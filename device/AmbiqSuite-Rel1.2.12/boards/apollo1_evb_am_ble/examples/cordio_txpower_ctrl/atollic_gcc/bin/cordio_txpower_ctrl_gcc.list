
cordio_txpower_ctrl_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001377c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00040000  2**2
                  ALLOC
  2 .data         0000014c  10001000  0001377c  00031000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00001834  1000114c  000138c8  0003114c  2**2
                  ALLOC
  4 .ARM.attributes 00000035  00000000  00000000  0003114c  2**0
                  CONTENTS, READONLY
  5 .debug_info   0002f5f5  00000000  00000000  00031181  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00005cf8  00000000  00000000  00060776  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00001610  00000000  00000000  0006646e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001c08  00000000  00000000  00067a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000d170  00000000  00000000  00069686  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008075  00000000  00000000  000767f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      000000ea  00000000  00000000  0007e86b  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00004b78  00000000  00000000  0007e958  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000902f  00000000  00000000  000834d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 09 ce 00 00 71 ce 00 00 71 d0 00 00     ........q...q...
      10:	71 d0 00 00 71 d0 00 00 71 d0 00 00 00 00 00 00     q...q...q.......
	...
      2c:	77 ce 00 00 77 ce 00 00 00 00 00 00 77 ce 00 00     w...w.......w...
      3c:	77 ce 00 00 77 ce 00 00 77 ce 00 00 77 ce 00 00     w...w...w...w...
      4c:	77 ce 00 00 77 ce 00 00 77 ce 00 00 f5 b5 00 00     w...w...w.......
      5c:	77 ce 00 00 77 ce 00 00 05 cd 00 00 e9 cc 00 00     w...w...........
      6c:	77 ce 00 00 77 ce 00 00 77 ce 00 00 77 ce 00 00     w...w...w...w...
      7c:	77 ce 00 00                                         w...

00000080 <attDmConnCback>:
      80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      82:	7804      	ldrb	r4, [r0, #0]
      84:	7883      	ldrb	r3, [r0, #2]
      86:	3c01      	subs	r4, #1
      88:	0005      	movs	r5, r0
      8a:	4e16      	ldr	r6, [pc, #88]	; (e4 <attDmConnCback+0x64>)
      8c:	0164      	lsls	r4, r4, #5
      8e:	2b27      	cmp	r3, #39	; 0x27
      90:	d10a      	bne.n	a8 <attDmConnCback+0x28>
      92:	88c2      	ldrh	r2, [r0, #6]
      94:	1933      	adds	r3, r6, r4
      96:	831a      	strh	r2, [r3, #24]
      98:	2217      	movs	r2, #23
      9a:	835a      	strh	r2, [r3, #26]
      9c:	8802      	ldrh	r2, [r0, #0]
      9e:	771a      	strb	r2, [r3, #28]
      a0:	2200      	movs	r2, #0
      a2:	775a      	strb	r2, [r3, #29]
      a4:	779a      	strb	r2, [r3, #30]
      a6:	77da      	strb	r2, [r3, #31]
      a8:	1934      	adds	r4, r6, r4
      aa:	7f23      	ldrb	r3, [r4, #28]
      ac:	2b00      	cmp	r3, #0
      ae:	d010      	beq.n	d2 <attDmConnCback+0x52>
      b0:	0037      	movs	r7, r6
      b2:	37fc      	adds	r7, #252	; 0xfc
      b4:	68bb      	ldr	r3, [r7, #8]
      b6:	0029      	movs	r1, r5
      b8:	68db      	ldr	r3, [r3, #12]
      ba:	0020      	movs	r0, r4
      bc:	4798      	blx	r3
      be:	687b      	ldr	r3, [r7, #4]
      c0:	0029      	movs	r1, r5
      c2:	68db      	ldr	r3, [r3, #12]
      c4:	0020      	movs	r0, r4
      c6:	4798      	blx	r3
      c8:	78ab      	ldrb	r3, [r5, #2]
      ca:	2b28      	cmp	r3, #40	; 0x28
      cc:	d101      	bne.n	d2 <attDmConnCback+0x52>
      ce:	2300      	movs	r3, #0
      d0:	7723      	strb	r3, [r4, #28]
      d2:	0033      	movs	r3, r6
      d4:	33fc      	adds	r3, #252	; 0xfc
      d6:	691b      	ldr	r3, [r3, #16]
      d8:	2b00      	cmp	r3, #0
      da:	d001      	beq.n	e0 <attDmConnCback+0x60>
      dc:	0028      	movs	r0, r5
      de:	4798      	blx	r3
      e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      e2:	46c0      	nop			; (mov r8, r8)
      e4:	1000114c 	.word	0x1000114c

000000e8 <attEmptyHandler>:
      e8:	4770      	bx	lr

000000ea <attEmptyConnCback>:
      ea:	4770      	bx	lr

000000ec <attEmptyDataCback>:
      ec:	4770      	bx	lr

000000ee <attL2cDataCback>:
      ee:	b510      	push	{r4, lr}
      f0:	4b05      	ldr	r3, [pc, #20]	; (108 <attL2cDataCback+0x1a>)
      f2:	7a14      	ldrb	r4, [r2, #8]
      f4:	33fc      	adds	r3, #252	; 0xfc
      f6:	07e4      	lsls	r4, r4, #31
      f8:	d501      	bpl.n	fe <attL2cDataCback+0x10>
      fa:	685b      	ldr	r3, [r3, #4]
      fc:	e000      	b.n	100 <attL2cDataCback+0x12>
      fe:	689b      	ldr	r3, [r3, #8]
     100:	681b      	ldr	r3, [r3, #0]
     102:	4798      	blx	r3
     104:	bd10      	pop	{r4, pc}
     106:	46c0      	nop			; (mov r8, r8)
     108:	1000114c 	.word	0x1000114c

0000010c <attL2cCtrlCback>:
     10c:	b570      	push	{r4, r5, r6, lr}
     10e:	7805      	ldrb	r5, [r0, #0]
     110:	4c0f      	ldr	r4, [pc, #60]	; (150 <attL2cCtrlCback+0x44>)
     112:	3d01      	subs	r5, #1
     114:	016d      	lsls	r5, r5, #5
     116:	1961      	adds	r1, r4, r5
     118:	7f0b      	ldrb	r3, [r1, #28]
     11a:	0006      	movs	r6, r0
     11c:	2b00      	cmp	r3, #0
     11e:	d015      	beq.n	14c <attL2cCtrlCback+0x40>
     120:	7882      	ldrb	r2, [r0, #2]
     122:	1e53      	subs	r3, r2, #1
     124:	4258      	negs	r0, r3
     126:	4143      	adcs	r3, r0
     128:	778b      	strb	r3, [r1, #30]
     12a:	2a01      	cmp	r2, #1
     12c:	d005      	beq.n	13a <attL2cCtrlCback+0x2e>
     12e:	0023      	movs	r3, r4
     130:	33fc      	adds	r3, #252	; 0xfc
     132:	689b      	ldr	r3, [r3, #8]
     134:	0030      	movs	r0, r6
     136:	685b      	ldr	r3, [r3, #4]
     138:	4798      	blx	r3
     13a:	1965      	adds	r5, r4, r5
     13c:	7fab      	ldrb	r3, [r5, #30]
     13e:	2b00      	cmp	r3, #0
     140:	d104      	bne.n	14c <attL2cCtrlCback+0x40>
     142:	34fc      	adds	r4, #252	; 0xfc
     144:	6863      	ldr	r3, [r4, #4]
     146:	0030      	movs	r0, r6
     148:	685b      	ldr	r3, [r3, #4]
     14a:	4798      	blx	r3
     14c:	bd70      	pop	{r4, r5, r6, pc}
     14e:	46c0      	nop			; (mov r8, r8)
     150:	1000114c 	.word	0x1000114c

00000154 <attCcbByHandle>:
     154:	b510      	push	{r4, lr}
     156:	f002 fe6f 	bl	2e38 <DmConnIdByHandle>
     15a:	1e03      	subs	r3, r0, #0
     15c:	d003      	beq.n	166 <attCcbByHandle+0x12>
     15e:	3b01      	subs	r3, #1
     160:	4801      	ldr	r0, [pc, #4]	; (168 <attCcbByHandle+0x14>)
     162:	015b      	lsls	r3, r3, #5
     164:	18c0      	adds	r0, r0, r3
     166:	bd10      	pop	{r4, pc}
     168:	1000114c 	.word	0x1000114c

0000016c <attCcbByConnId>:
     16c:	4b02      	ldr	r3, [pc, #8]	; (178 <attCcbByConnId+0xc>)
     16e:	3801      	subs	r0, #1
     170:	0140      	lsls	r0, r0, #5
     172:	1818      	adds	r0, r3, r0
     174:	4770      	bx	lr
     176:	46c0      	nop			; (mov r8, r8)
     178:	1000114c 	.word	0x1000114c

0000017c <attUuidCmp16to128>:
     17c:	b510      	push	{r4, lr}
     17e:	4b06      	ldr	r3, [pc, #24]	; (198 <attUuidCmp16to128+0x1c>)
     180:	7802      	ldrb	r2, [r0, #0]
     182:	731a      	strb	r2, [r3, #12]
     184:	7842      	ldrb	r2, [r0, #1]
     186:	0018      	movs	r0, r3
     188:	735a      	strb	r2, [r3, #13]
     18a:	2210      	movs	r2, #16
     18c:	f00f fcd0 	bl	fb30 <memcmp>
     190:	4243      	negs	r3, r0
     192:	4158      	adcs	r0, r3
     194:	b2c0      	uxtb	r0, r0
     196:	bd10      	pop	{r4, pc}
     198:	10001000 	.word	0x10001000

0000019c <attExecCallback>:
     19c:	b530      	push	{r4, r5, lr}
     19e:	b085      	sub	sp, #20
     1a0:	466d      	mov	r5, sp
     1a2:	70eb      	strb	r3, [r5, #3]
     1a4:	2300      	movs	r3, #0
     1a6:	ac08      	add	r4, sp, #32
     1a8:	812b      	strh	r3, [r5, #8]
     1aa:	732b      	strb	r3, [r5, #12]
     1ac:	4b05      	ldr	r3, [pc, #20]	; (1c4 <attExecCallback+0x28>)
     1ae:	8824      	ldrh	r4, [r4, #0]
     1b0:	33fc      	adds	r3, #252	; 0xfc
     1b2:	8028      	strh	r0, [r5, #0]
     1b4:	70a9      	strb	r1, [r5, #2]
     1b6:	4668      	mov	r0, sp
     1b8:	816a      	strh	r2, [r5, #10]
     1ba:	81ec      	strh	r4, [r5, #14]
     1bc:	68db      	ldr	r3, [r3, #12]
     1be:	4798      	blx	r3
     1c0:	b005      	add	sp, #20
     1c2:	bd30      	pop	{r4, r5, pc}
     1c4:	1000114c 	.word	0x1000114c

000001c8 <attSetMtu>:
     1c8:	b507      	push	{r0, r1, r2, lr}
     1ca:	1c13      	adds	r3, r2, #0
     1cc:	428a      	cmp	r2, r1
     1ce:	d900      	bls.n	1d2 <attSetMtu+0xa>
     1d0:	1c0b      	adds	r3, r1, #0
     1d2:	8b41      	ldrh	r1, [r0, #26]
     1d4:	b29a      	uxth	r2, r3
     1d6:	4291      	cmp	r1, r2
     1d8:	d007      	beq.n	1ea <attSetMtu+0x22>
     1da:	8343      	strh	r3, [r0, #26]
     1dc:	2300      	movs	r3, #0
     1de:	7f00      	ldrb	r0, [r0, #28]
     1e0:	2111      	movs	r1, #17
     1e2:	9200      	str	r2, [sp, #0]
     1e4:	001a      	movs	r2, r3
     1e6:	f7ff ffd9 	bl	19c <attExecCallback>
     1ea:	bd07      	pop	{r0, r1, r2, pc}

000001ec <attMsgAlloc>:
     1ec:	b510      	push	{r4, lr}
     1ee:	2100      	movs	r1, #0
     1f0:	f00a fe00 	bl	adf4 <WsfMsgDataAlloc>
     1f4:	bd10      	pop	{r4, pc}

000001f6 <AttHandlerInit>:
     1f6:	4b09      	ldr	r3, [pc, #36]	; (21c <AttHandlerInit+0x26>)
     1f8:	b510      	push	{r4, lr}
     1fa:	001a      	movs	r2, r3
     1fc:	32ff      	adds	r2, #255	; 0xff
     1fe:	7450      	strb	r0, [r2, #17]
     200:	4a07      	ldr	r2, [pc, #28]	; (220 <AttHandlerInit+0x2a>)
     202:	33fc      	adds	r3, #252	; 0xfc
     204:	605a      	str	r2, [r3, #4]
     206:	609a      	str	r2, [r3, #8]
     208:	4906      	ldr	r1, [pc, #24]	; (224 <AttHandlerInit+0x2e>)
     20a:	4a07      	ldr	r2, [pc, #28]	; (228 <AttHandlerInit+0x32>)
     20c:	2004      	movs	r0, #4
     20e:	f003 fce9 	bl	3be4 <L2cRegister>
     212:	4906      	ldr	r1, [pc, #24]	; (22c <AttHandlerInit+0x36>)
     214:	2000      	movs	r0, #0
     216:	f002 fd09 	bl	2c2c <DmConnRegister>
     21a:	bd10      	pop	{r4, pc}
     21c:	1000114c 	.word	0x1000114c
     220:	00010934 	.word	0x00010934
     224:	000000ef 	.word	0x000000ef
     228:	0000010d 	.word	0x0000010d
     22c:	00000081 	.word	0x00000081

00000230 <AttHandler>:
     230:	b510      	push	{r4, lr}
     232:	1e08      	subs	r0, r1, #0
     234:	d009      	beq.n	24a <AttHandler+0x1a>
     236:	4b05      	ldr	r3, [pc, #20]	; (24c <AttHandler+0x1c>)
     238:	788a      	ldrb	r2, [r1, #2]
     23a:	33fc      	adds	r3, #252	; 0xfc
     23c:	2a1f      	cmp	r2, #31
     23e:	d901      	bls.n	244 <AttHandler+0x14>
     240:	689b      	ldr	r3, [r3, #8]
     242:	e000      	b.n	246 <AttHandler+0x16>
     244:	685b      	ldr	r3, [r3, #4]
     246:	689b      	ldr	r3, [r3, #8]
     248:	4798      	blx	r3
     24a:	bd10      	pop	{r4, pc}
     24c:	1000114c 	.word	0x1000114c

00000250 <AttRegister>:
     250:	4b09      	ldr	r3, [pc, #36]	; (278 <AttRegister+0x28>)
     252:	b507      	push	{r0, r1, r2, lr}
     254:	33fc      	adds	r3, #252	; 0xfc
     256:	60d8      	str	r0, [r3, #12]
     258:	f007 fd6e 	bl	7d38 <HciGetMaxRxAclLen>
     25c:	4b07      	ldr	r3, [pc, #28]	; (27c <AttRegister+0x2c>)
     25e:	3803      	subs	r0, #3
     260:	681b      	ldr	r3, [r3, #0]
     262:	889b      	ldrh	r3, [r3, #4]
     264:	4298      	cmp	r0, r3
     266:	dc06      	bgt.n	276 <AttRegister+0x26>
     268:	2000      	movs	r0, #0
     26a:	2302      	movs	r3, #2
     26c:	9000      	str	r0, [sp, #0]
     26e:	0002      	movs	r2, r0
     270:	2152      	movs	r1, #82	; 0x52
     272:	f7ff ff93 	bl	19c <attExecCallback>
     276:	bd07      	pop	{r0, r1, r2, pc}
     278:	1000114c 	.word	0x1000114c
     27c:	10001088 	.word	0x10001088

00000280 <AttConnRegister>:
     280:	4b01      	ldr	r3, [pc, #4]	; (288 <AttConnRegister+0x8>)
     282:	33fc      	adds	r3, #252	; 0xfc
     284:	6118      	str	r0, [r3, #16]
     286:	4770      	bx	lr
     288:	1000114c 	.word	0x1000114c

0000028c <AttGetMtu>:
     28c:	4b02      	ldr	r3, [pc, #8]	; (298 <AttGetMtu+0xc>)
     28e:	3801      	subs	r0, #1
     290:	0140      	lsls	r0, r0, #5
     292:	1818      	adds	r0, r3, r0
     294:	8b40      	ldrh	r0, [r0, #26]
     296:	4770      	bx	lr
     298:	1000114c 	.word	0x1000114c

0000029c <AttMsgAlloc>:
     29c:	b510      	push	{r4, lr}
     29e:	291b      	cmp	r1, #27
     2a0:	d002      	beq.n	2a8 <AttMsgAlloc+0xc>
     2a2:	2200      	movs	r2, #0
     2a4:	291d      	cmp	r1, #29
     2a6:	d10a      	bne.n	2be <AttMsgAlloc+0x22>
     2a8:	300b      	adds	r0, #11
     2aa:	b280      	uxth	r0, r0
     2ac:	f7ff ff9e 	bl	1ec <attMsgAlloc>
     2b0:	0003      	movs	r3, r0
     2b2:	0002      	movs	r2, r0
     2b4:	1e58      	subs	r0, r3, #1
     2b6:	4183      	sbcs	r3, r0
     2b8:	320b      	adds	r2, #11
     2ba:	425b      	negs	r3, r3
     2bc:	401a      	ands	r2, r3
     2be:	0010      	movs	r0, r2
     2c0:	bd10      	pop	{r4, pc}

000002c2 <AttMsgFree>:
     2c2:	b510      	push	{r4, lr}
     2c4:	291b      	cmp	r1, #27
     2c6:	d002      	beq.n	2ce <AttMsgFree+0xc>
     2c8:	2300      	movs	r3, #0
     2ca:	291d      	cmp	r1, #29
     2cc:	d100      	bne.n	2d0 <AttMsgFree+0xe>
     2ce:	230b      	movs	r3, #11
     2d0:	1ac0      	subs	r0, r0, r3
     2d2:	f00a fdbb 	bl	ae4c <WsfMsgFree>
     2d6:	bd10      	pop	{r4, pc}

000002d8 <attcSendSimpleReq>:
     2d8:	2300      	movs	r3, #0
     2da:	b570      	push	{r4, r5, r6, lr}
     2dc:	6945      	ldr	r5, [r0, #20]
     2de:	6143      	str	r3, [r0, #20]
     2e0:	7c83      	ldrb	r3, [r0, #18]
     2e2:	0004      	movs	r4, r0
     2e4:	2b0a      	cmp	r3, #10
     2e6:	d009      	beq.n	2fc <attcSendSimpleReq+0x24>
     2e8:	0003      	movs	r3, r0
     2ea:	2210      	movs	r2, #16
     2ec:	3330      	adds	r3, #48	; 0x30
     2ee:	701a      	strb	r2, [r3, #0]
     2f0:	4b06      	ldr	r3, [pc, #24]	; (30c <attcSendSimpleReq+0x34>)
     2f2:	3024      	adds	r0, #36	; 0x24
     2f4:	681b      	ldr	r3, [r3, #0]
     2f6:	7999      	ldrb	r1, [r3, #6]
     2f8:	f00a ff4a 	bl	b190 <WsfTimerStartSec>
     2fc:	6823      	ldr	r3, [r4, #0]
     2fe:	882a      	ldrh	r2, [r5, #0]
     300:	8b19      	ldrh	r1, [r3, #24]
     302:	2004      	movs	r0, #4
     304:	002b      	movs	r3, r5
     306:	f003 fc79 	bl	3bfc <L2cDataReq>
     30a:	bd70      	pop	{r4, r5, r6, pc}
     30c:	10001088 	.word	0x10001088

00000310 <attcSendReq>:
     310:	b510      	push	{r4, lr}
     312:	7c83      	ldrb	r3, [r0, #18]
     314:	4a02      	ldr	r2, [pc, #8]	; (320 <attcSendReq+0x10>)
     316:	009b      	lsls	r3, r3, #2
     318:	589b      	ldr	r3, [r3, r2]
     31a:	4798      	blx	r3
     31c:	bd10      	pop	{r4, pc}
     31e:	46c0      	nop			; (mov r8, r8)
     320:	00010944 	.word	0x00010944

00000324 <attcSetupReq>:
     324:	0003      	movs	r3, r0
     326:	000a      	movs	r2, r1
     328:	b570      	push	{r4, r5, r6, lr}
     32a:	3310      	adds	r3, #16
     32c:	ca70      	ldmia	r2!, {r4, r5, r6}
     32e:	c370      	stmia	r3!, {r4, r5, r6}
     330:	684a      	ldr	r2, [r1, #4]
     332:	ca12      	ldmia	r2!, {r1, r4}
     334:	c312      	stmia	r3!, {r1, r4}
     336:	f7ff ffeb 	bl	310 <attcSendReq>
     33a:	bd70      	pop	{r4, r5, r6, pc}

0000033c <attcCcbByConnId>:
     33c:	b510      	push	{r4, lr}
     33e:	0004      	movs	r4, r0
     340:	f002 fd8e 	bl	2e60 <DmConnInUse>
     344:	2800      	cmp	r0, #0
     346:	d004      	beq.n	352 <attcCcbByConnId+0x16>
     348:	2338      	movs	r3, #56	; 0x38
     34a:	1e60      	subs	r0, r4, #1
     34c:	4358      	muls	r0, r3
     34e:	4b01      	ldr	r3, [pc, #4]	; (354 <attcCcbByConnId+0x18>)
     350:	1818      	adds	r0, r3, r0
     352:	bd10      	pop	{r4, pc}
     354:	10001260 	.word	0x10001260

00000358 <attcCcbByHandle>:
     358:	b510      	push	{r4, lr}
     35a:	f002 fd6d 	bl	2e38 <DmConnIdByHandle>
     35e:	2800      	cmp	r0, #0
     360:	d004      	beq.n	36c <attcCcbByHandle+0x14>
     362:	2338      	movs	r3, #56	; 0x38
     364:	3801      	subs	r0, #1
     366:	4358      	muls	r0, r3
     368:	4b01      	ldr	r3, [pc, #4]	; (370 <attcCcbByHandle+0x18>)
     36a:	1818      	adds	r0, r3, r0
     36c:	bd10      	pop	{r4, pc}
     36e:	46c0      	nop			; (mov r8, r8)
     370:	10001260 	.word	0x10001260

00000374 <attcDataCback>:
     374:	b570      	push	{r4, r5, r6, lr}
     376:	000d      	movs	r5, r1
     378:	0014      	movs	r4, r2
     37a:	f7ff ffed 	bl	358 <attcCcbByHandle>
     37e:	2800      	cmp	r0, #0
     380:	d00f      	beq.n	3a2 <attcDataCback+0x2e>
     382:	7a23      	ldrb	r3, [r4, #8]
     384:	2b19      	cmp	r3, #25
     386:	d804      	bhi.n	392 <attcDataCback+0x1e>
     388:	0022      	movs	r2, r4
     38a:	0029      	movs	r1, r5
     38c:	f000 fa58 	bl	840 <attcProcRsp>
     390:	e007      	b.n	3a2 <attcDataCback+0x2e>
     392:	22fd      	movs	r2, #253	; 0xfd
     394:	3b1b      	subs	r3, #27
     396:	4213      	tst	r3, r2
     398:	d103      	bne.n	3a2 <attcDataCback+0x2e>
     39a:	0022      	movs	r2, r4
     39c:	0029      	movs	r1, r5
     39e:	f000 faaf 	bl	900 <attcProcInd>
     3a2:	bd70      	pop	{r4, r5, r6, pc}

000003a4 <attcFreePkt>:
     3a4:	b510      	push	{r4, lr}
     3a6:	0004      	movs	r4, r0
     3a8:	6840      	ldr	r0, [r0, #4]
     3aa:	2800      	cmp	r0, #0
     3ac:	d003      	beq.n	3b6 <attcFreePkt+0x12>
     3ae:	f00a fd4d 	bl	ae4c <WsfMsgFree>
     3b2:	2300      	movs	r3, #0
     3b4:	6063      	str	r3, [r4, #4]
     3b6:	bd10      	pop	{r4, pc}

000003b8 <attcSendMtuReq>:
     3b8:	b510      	push	{r4, lr}
     3ba:	6803      	ldr	r3, [r0, #0]
     3bc:	0004      	movs	r4, r0
     3be:	7f5a      	ldrb	r2, [r3, #29]
     3c0:	2a00      	cmp	r2, #0
     3c2:	d005      	beq.n	3d0 <attcSendMtuReq+0x18>
     3c4:	3010      	adds	r0, #16
     3c6:	f7ff ffed 	bl	3a4 <attcFreePkt>
     3ca:	2300      	movs	r3, #0
     3cc:	74a3      	strb	r3, [r4, #18]
     3ce:	e003      	b.n	3d8 <attcSendMtuReq+0x20>
     3d0:	2201      	movs	r2, #1
     3d2:	775a      	strb	r2, [r3, #29]
     3d4:	f7ff ff80 	bl	2d8 <attcSendSimpleReq>
     3d8:	bd10      	pop	{r4, pc}

000003da <attcExecCallback>:
     3da:	b513      	push	{r0, r1, r4, lr}
     3dc:	2901      	cmp	r1, #1
     3de:	d003      	beq.n	3e8 <attcExecCallback+0xe>
     3e0:	2400      	movs	r4, #0
     3e2:	9400      	str	r4, [sp, #0]
     3e4:	f7ff feda 	bl	19c <attExecCallback>
     3e8:	bd13      	pop	{r0, r1, r4, pc}

000003ea <attcSendWriteCmd>:
     3ea:	b510      	push	{r4, lr}
     3ec:	0004      	movs	r4, r0
     3ee:	f7ff ff73 	bl	2d8 <attcSendSimpleReq>
     3f2:	6823      	ldr	r3, [r4, #0]
     3f4:	8b22      	ldrh	r2, [r4, #24]
     3f6:	7f18      	ldrb	r0, [r3, #28]
     3f8:	210a      	movs	r1, #10
     3fa:	2300      	movs	r3, #0
     3fc:	f7ff ffed 	bl	3da <attcExecCallback>
     400:	2300      	movs	r3, #0
     402:	74a3      	strb	r3, [r4, #18]
     404:	bd10      	pop	{r4, pc}

00000406 <attcReqClear>:
     406:	b570      	push	{r4, r5, r6, lr}
     408:	0006      	movs	r6, r0
     40a:	000c      	movs	r4, r1
     40c:	0015      	movs	r5, r2
     40e:	0008      	movs	r0, r1
     410:	f7ff ffc8 	bl	3a4 <attcFreePkt>
     414:	6833      	ldr	r3, [r6, #0]
     416:	8922      	ldrh	r2, [r4, #8]
     418:	7f18      	ldrb	r0, [r3, #28]
     41a:	78a1      	ldrb	r1, [r4, #2]
     41c:	002b      	movs	r3, r5
     41e:	f7ff ffdc 	bl	3da <attcExecCallback>
     422:	2300      	movs	r3, #0
     424:	70a3      	strb	r3, [r4, #2]
     426:	bd70      	pop	{r4, r5, r6, pc}

00000428 <attcSendPrepWriteReq>:
     428:	b570      	push	{r4, r5, r6, lr}
     42a:	7cc3      	ldrb	r3, [r0, #19]
     42c:	0004      	movs	r4, r0
     42e:	8b85      	ldrh	r5, [r0, #28]
     430:	2b01      	cmp	r3, #1
     432:	d124      	bne.n	47e <attcSendPrepWriteReq+0x56>
     434:	6803      	ldr	r3, [r0, #0]
     436:	8b5b      	ldrh	r3, [r3, #26]
     438:	3b05      	subs	r3, #5
     43a:	429d      	cmp	r5, r3
     43c:	db00      	blt.n	440 <attcSendPrepWriteReq+0x18>
     43e:	b29d      	uxth	r5, r3
     440:	0028      	movs	r0, r5
     442:	300d      	adds	r0, #13
     444:	b280      	uxth	r0, r0
     446:	f7ff fed1 	bl	1ec <attMsgAlloc>
     44a:	1e06      	subs	r6, r0, #0
     44c:	d010      	beq.n	470 <attcSendPrepWriteReq+0x48>
     44e:	220d      	movs	r2, #13
     450:	6961      	ldr	r1, [r4, #20]
     452:	f00f fb7c 	bl	fb4e <memcpy>
     456:	0030      	movs	r0, r6
     458:	002a      	movs	r2, r5
     45a:	6a21      	ldr	r1, [r4, #32]
     45c:	300d      	adds	r0, #13
     45e:	f00f fb76 	bl	fb4e <memcpy>
     462:	6a23      	ldr	r3, [r4, #32]
     464:	195b      	adds	r3, r3, r5
     466:	6223      	str	r3, [r4, #32]
     468:	8ba3      	ldrh	r3, [r4, #28]
     46a:	1b5b      	subs	r3, r3, r5
     46c:	83a3      	strh	r3, [r4, #28]
     46e:	e009      	b.n	484 <attcSendPrepWriteReq+0x5c>
     470:	0021      	movs	r1, r4
     472:	2270      	movs	r2, #112	; 0x70
     474:	3110      	adds	r1, #16
     476:	0020      	movs	r0, r4
     478:	f7ff ffc5 	bl	406 <attcReqClear>
     47c:	e01d      	b.n	4ba <attcSendPrepWriteReq+0x92>
     47e:	2300      	movs	r3, #0
     480:	6946      	ldr	r6, [r0, #20]
     482:	6143      	str	r3, [r0, #20]
     484:	8be3      	ldrh	r3, [r4, #30]
     486:	2210      	movs	r2, #16
     488:	72f3      	strb	r3, [r6, #11]
     48a:	8be3      	ldrh	r3, [r4, #30]
     48c:	0020      	movs	r0, r4
     48e:	0a1b      	lsrs	r3, r3, #8
     490:	7333      	strb	r3, [r6, #12]
     492:	8be3      	ldrh	r3, [r4, #30]
     494:	3024      	adds	r0, #36	; 0x24
     496:	18eb      	adds	r3, r5, r3
     498:	83e3      	strh	r3, [r4, #30]
     49a:	0023      	movs	r3, r4
     49c:	3330      	adds	r3, #48	; 0x30
     49e:	701a      	strb	r2, [r3, #0]
     4a0:	4b06      	ldr	r3, [pc, #24]	; (4bc <attcSendPrepWriteReq+0x94>)
     4a2:	3505      	adds	r5, #5
     4a4:	681b      	ldr	r3, [r3, #0]
     4a6:	7999      	ldrb	r1, [r3, #6]
     4a8:	f00a fe72 	bl	b190 <WsfTimerStartSec>
     4ac:	6823      	ldr	r3, [r4, #0]
     4ae:	b2aa      	uxth	r2, r5
     4b0:	8b19      	ldrh	r1, [r3, #24]
     4b2:	2004      	movs	r0, #4
     4b4:	0033      	movs	r3, r6
     4b6:	f003 fba1 	bl	3bfc <L2cDataReq>
     4ba:	bd70      	pop	{r4, r5, r6, pc}
     4bc:	10001088 	.word	0x10001088

000004c0 <attcSendContinuingReq>:
     4c0:	b570      	push	{r4, r5, r6, lr}
     4c2:	7cc3      	ldrb	r3, [r0, #19]
     4c4:	0004      	movs	r4, r0
     4c6:	6945      	ldr	r5, [r0, #20]
     4c8:	2b01      	cmp	r3, #1
     4ca:	d114      	bne.n	4f6 <attcSendContinuingReq+0x36>
     4cc:	8828      	ldrh	r0, [r5, #0]
     4ce:	3008      	adds	r0, #8
     4d0:	b280      	uxth	r0, r0
     4d2:	f7ff fe8b 	bl	1ec <attMsgAlloc>
     4d6:	1e05      	subs	r5, r0, #0
     4d8:	d006      	beq.n	4e8 <attcSendContinuingReq+0x28>
     4da:	6963      	ldr	r3, [r4, #20]
     4dc:	881a      	ldrh	r2, [r3, #0]
     4de:	0019      	movs	r1, r3
     4e0:	3208      	adds	r2, #8
     4e2:	f00f fb34 	bl	fb4e <memcpy>
     4e6:	e008      	b.n	4fa <attcSendContinuingReq+0x3a>
     4e8:	0021      	movs	r1, r4
     4ea:	2270      	movs	r2, #112	; 0x70
     4ec:	3110      	adds	r1, #16
     4ee:	0020      	movs	r0, r4
     4f0:	f7ff ff89 	bl	406 <attcReqClear>
     4f4:	e023      	b.n	53e <attcSendContinuingReq+0x7e>
     4f6:	2300      	movs	r3, #0
     4f8:	6143      	str	r3, [r0, #20]
     4fa:	7ca2      	ldrb	r2, [r4, #18]
     4fc:	8be3      	ldrh	r3, [r4, #30]
     4fe:	2a06      	cmp	r2, #6
     500:	d102      	bne.n	508 <attcSendContinuingReq+0x48>
     502:	72eb      	strb	r3, [r5, #11]
     504:	8be3      	ldrh	r3, [r4, #30]
     506:	e006      	b.n	516 <attcSendContinuingReq+0x56>
     508:	726b      	strb	r3, [r5, #9]
     50a:	8be3      	ldrh	r3, [r4, #30]
     50c:	0a1b      	lsrs	r3, r3, #8
     50e:	72ab      	strb	r3, [r5, #10]
     510:	8c23      	ldrh	r3, [r4, #32]
     512:	72eb      	strb	r3, [r5, #11]
     514:	8c23      	ldrh	r3, [r4, #32]
     516:	0a1b      	lsrs	r3, r3, #8
     518:	732b      	strb	r3, [r5, #12]
     51a:	0023      	movs	r3, r4
     51c:	2210      	movs	r2, #16
     51e:	0020      	movs	r0, r4
     520:	3330      	adds	r3, #48	; 0x30
     522:	701a      	strb	r2, [r3, #0]
     524:	4b06      	ldr	r3, [pc, #24]	; (540 <attcSendContinuingReq+0x80>)
     526:	3024      	adds	r0, #36	; 0x24
     528:	681b      	ldr	r3, [r3, #0]
     52a:	7999      	ldrb	r1, [r3, #6]
     52c:	f00a fe30 	bl	b190 <WsfTimerStartSec>
     530:	6823      	ldr	r3, [r4, #0]
     532:	882a      	ldrh	r2, [r5, #0]
     534:	8b19      	ldrh	r1, [r3, #24]
     536:	2004      	movs	r0, #4
     538:	002b      	movs	r3, r5
     53a:	f003 fb5f 	bl	3bfc <L2cDataReq>
     53e:	bd70      	pop	{r4, r5, r6, pc}
     540:	10001088 	.word	0x10001088

00000544 <attcConnCback>:
     544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     546:	788b      	ldrb	r3, [r1, #2]
     548:	0005      	movs	r5, r0
     54a:	2b27      	cmp	r3, #39	; 0x27
     54c:	d119      	bne.n	582 <attcConnCback+0x3e>
     54e:	7f00      	ldrb	r0, [r0, #28]
     550:	f002 fd00 	bl	2f54 <DmConnRole>
     554:	2800      	cmp	r0, #0
     556:	d153      	bne.n	600 <attcConnCback+0xbc>
     558:	4c2a      	ldr	r4, [pc, #168]	; (604 <attcConnCback+0xc0>)
     55a:	6823      	ldr	r3, [r4, #0]
     55c:	889e      	ldrh	r6, [r3, #4]
     55e:	f007 fbeb 	bl	7d38 <HciGetMaxRxAclLen>
     562:	3804      	subs	r0, #4
     564:	4286      	cmp	r6, r0
     566:	da02      	bge.n	56e <attcConnCback+0x2a>
     568:	6823      	ldr	r3, [r4, #0]
     56a:	8899      	ldrh	r1, [r3, #4]
     56c:	e003      	b.n	576 <attcConnCback+0x32>
     56e:	f007 fbe3 	bl	7d38 <HciGetMaxRxAclLen>
     572:	1f01      	subs	r1, r0, #4
     574:	b289      	uxth	r1, r1
     576:	2917      	cmp	r1, #23
     578:	d042      	beq.n	600 <attcConnCback+0xbc>
     57a:	7f28      	ldrb	r0, [r5, #28]
     57c:	f000 faab 	bl	ad6 <AttcMtuReq>
     580:	e03e      	b.n	600 <attcConnCback+0xbc>
     582:	2b28      	cmp	r3, #40	; 0x28
     584:	d13c      	bne.n	600 <attcConnCback+0xbc>
     586:	78cb      	ldrb	r3, [r1, #3]
     588:	001c      	movs	r4, r3
     58a:	3420      	adds	r4, #32
     58c:	b2e4      	uxtb	r4, r4
     58e:	2b00      	cmp	r3, #0
     590:	d102      	bne.n	598 <attcConnCback+0x54>
     592:	7a0c      	ldrb	r4, [r1, #8]
     594:	3420      	adds	r4, #32
     596:	b2e4      	uxtb	r4, r4
     598:	7f2b      	ldrb	r3, [r5, #28]
     59a:	2538      	movs	r5, #56	; 0x38
     59c:	3b01      	subs	r3, #1
     59e:	435d      	muls	r5, r3
     5a0:	4e19      	ldr	r6, [pc, #100]	; (608 <attcConnCback+0xc4>)
     5a2:	9301      	str	r3, [sp, #4]
     5a4:	1977      	adds	r7, r6, r5
     5a6:	7cbb      	ldrb	r3, [r7, #18]
     5a8:	2b00      	cmp	r3, #0
     5aa:	d00a      	beq.n	5c2 <attcConnCback+0x7e>
     5ac:	0038      	movs	r0, r7
     5ae:	3024      	adds	r0, #36	; 0x24
     5b0:	f00a fe14 	bl	b1dc <WsfTimerStop>
     5b4:	0029      	movs	r1, r5
     5b6:	3110      	adds	r1, #16
     5b8:	1871      	adds	r1, r6, r1
     5ba:	0022      	movs	r2, r4
     5bc:	0038      	movs	r0, r7
     5be:	f7ff ff22 	bl	406 <attcReqClear>
     5c2:	2138      	movs	r1, #56	; 0x38
     5c4:	9b01      	ldr	r3, [sp, #4]
     5c6:	4359      	muls	r1, r3
     5c8:	1871      	adds	r1, r6, r1
     5ca:	798b      	ldrb	r3, [r1, #6]
     5cc:	2b00      	cmp	r3, #0
     5ce:	d004      	beq.n	5da <attcConnCback+0x96>
     5d0:	3104      	adds	r1, #4
     5d2:	0022      	movs	r2, r4
     5d4:	0038      	movs	r0, r7
     5d6:	f7ff ff16 	bl	406 <attcReqClear>
     5da:	2338      	movs	r3, #56	; 0x38
     5dc:	9a01      	ldr	r2, [sp, #4]
     5de:	4353      	muls	r3, r2
     5e0:	2200      	movs	r2, #0
     5e2:	18f3      	adds	r3, r6, r3
     5e4:	0019      	movs	r1, r3
     5e6:	3335      	adds	r3, #53	; 0x35
     5e8:	701a      	strb	r2, [r3, #0]
     5ea:	23e0      	movs	r3, #224	; 0xe0
     5ec:	005b      	lsls	r3, r3, #1
     5ee:	58f3      	ldr	r3, [r6, r3]
     5f0:	3134      	adds	r1, #52	; 0x34
     5f2:	700a      	strb	r2, [r1, #0]
     5f4:	4293      	cmp	r3, r2
     5f6:	d003      	beq.n	600 <attcConnCback+0xbc>
     5f8:	685b      	ldr	r3, [r3, #4]
     5fa:	0021      	movs	r1, r4
     5fc:	0038      	movs	r0, r7
     5fe:	4798      	blx	r3
     600:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     602:	46c0      	nop			; (mov r8, r8)
     604:	10001088 	.word	0x10001088
     608:	10001260 	.word	0x10001260

0000060c <attcMsgCback>:
     60c:	b570      	push	{r4, r5, r6, lr}
     60e:	0005      	movs	r5, r0
     610:	7800      	ldrb	r0, [r0, #0]
     612:	f7ff fe93 	bl	33c <attcCcbByConnId>
     616:	78ab      	ldrb	r3, [r5, #2]
     618:	1e04      	subs	r4, r0, #0
     61a:	d106      	bne.n	62a <attcMsgCback+0x1e>
     61c:	3b01      	subs	r3, #1
     61e:	2b0c      	cmp	r3, #12
     620:	d84c      	bhi.n	6bc <attcMsgCback+0xb0>
     622:	0028      	movs	r0, r5
     624:	f7ff febe 	bl	3a4 <attcFreePkt>
     628:	e048      	b.n	6bc <attcMsgCback+0xb0>
     62a:	2b0c      	cmp	r3, #12
     62c:	d817      	bhi.n	65e <attcMsgCback+0x52>
     62e:	7983      	ldrb	r3, [r0, #6]
     630:	2b00      	cmp	r3, #0
     632:	d102      	bne.n	63a <attcMsgCback+0x2e>
     634:	7c83      	ldrb	r3, [r0, #18]
     636:	2b01      	cmp	r3, #1
     638:	d902      	bls.n	640 <attcMsgCback+0x34>
     63a:	2272      	movs	r2, #114	; 0x72
     63c:	0029      	movs	r1, r5
     63e:	e027      	b.n	690 <attcMsgCback+0x84>
     640:	2b01      	cmp	r3, #1
     642:	d004      	beq.n	64e <attcMsgCback+0x42>
     644:	0003      	movs	r3, r0
     646:	3334      	adds	r3, #52	; 0x34
     648:	781b      	ldrb	r3, [r3, #0]
     64a:	2b00      	cmp	r3, #0
     64c:	d003      	beq.n	656 <attcMsgCback+0x4a>
     64e:	3404      	adds	r4, #4
     650:	cd0e      	ldmia	r5!, {r1, r2, r3}
     652:	c40e      	stmia	r4!, {r1, r2, r3}
     654:	e032      	b.n	6bc <attcMsgCback+0xb0>
     656:	0029      	movs	r1, r5
     658:	f7ff fe64 	bl	324 <attcSetupReq>
     65c:	e02e      	b.n	6bc <attcMsgCback+0xb0>
     65e:	001a      	movs	r2, r3
     660:	3a0d      	subs	r2, #13
     662:	2a01      	cmp	r2, #1
     664:	d809      	bhi.n	67a <attcMsgCback+0x6e>
     666:	23e0      	movs	r3, #224	; 0xe0
     668:	4a15      	ldr	r2, [pc, #84]	; (6c0 <attcMsgCback+0xb4>)
     66a:	005b      	lsls	r3, r3, #1
     66c:	58d3      	ldr	r3, [r2, r3]
     66e:	2b00      	cmp	r3, #0
     670:	d024      	beq.n	6bc <attcMsgCback+0xb0>
     672:	681b      	ldr	r3, [r3, #0]
     674:	0029      	movs	r1, r5
     676:	4798      	blx	r3
     678:	e020      	b.n	6bc <attcMsgCback+0xb0>
     67a:	2b0f      	cmp	r3, #15
     67c:	d111      	bne.n	6a2 <attcMsgCback+0x96>
     67e:	7c83      	ldrb	r3, [r0, #18]
     680:	2b01      	cmp	r3, #1
     682:	d909      	bls.n	698 <attcMsgCback+0x8c>
     684:	3024      	adds	r0, #36	; 0x24
     686:	f00a fda9 	bl	b1dc <WsfTimerStop>
     68a:	0021      	movs	r1, r4
     68c:	3110      	adds	r1, #16
     68e:	2274      	movs	r2, #116	; 0x74
     690:	0020      	movs	r0, r4
     692:	f7ff feb8 	bl	406 <attcReqClear>
     696:	e011      	b.n	6bc <attcMsgCback+0xb0>
     698:	7983      	ldrb	r3, [r0, #6]
     69a:	1d01      	adds	r1, r0, #4
     69c:	2b00      	cmp	r3, #0
     69e:	d00d      	beq.n	6bc <attcMsgCback+0xb0>
     6a0:	e7f5      	b.n	68e <attcMsgCback+0x82>
     6a2:	2b10      	cmp	r3, #16
     6a4:	d10a      	bne.n	6bc <attcMsgCback+0xb0>
     6a6:	7c83      	ldrb	r3, [r0, #18]
     6a8:	2b00      	cmp	r3, #0
     6aa:	d007      	beq.n	6bc <attcMsgCback+0xb0>
     6ac:	0001      	movs	r1, r0
     6ae:	2271      	movs	r2, #113	; 0x71
     6b0:	3110      	adds	r1, #16
     6b2:	f7ff fea8 	bl	406 <attcReqClear>
     6b6:	2201      	movs	r2, #1
     6b8:	6823      	ldr	r3, [r4, #0]
     6ba:	77da      	strb	r2, [r3, #31]
     6bc:	bd70      	pop	{r4, r5, r6, pc}
     6be:	46c0      	nop			; (mov r8, r8)
     6c0:	10001260 	.word	0x10001260

000006c4 <AttcInit>:
     6c4:	21e0      	movs	r1, #224	; 0xe0
     6c6:	2300      	movs	r3, #0
     6c8:	4a0c      	ldr	r2, [pc, #48]	; (6fc <AttcInit+0x38>)
     6ca:	0049      	lsls	r1, r1, #1
     6cc:	b530      	push	{r4, r5, lr}
     6ce:	5053      	str	r3, [r2, r1]
     6d0:	490b      	ldr	r1, [pc, #44]	; (700 <AttcInit+0x3c>)
     6d2:	322c      	adds	r2, #44	; 0x2c
     6d4:	0008      	movs	r0, r1
     6d6:	30ff      	adds	r0, #255	; 0xff
     6d8:	7c44      	ldrb	r4, [r0, #17]
     6da:	0015      	movs	r5, r2
     6dc:	0158      	lsls	r0, r3, #5
     6de:	3d2c      	subs	r5, #44	; 0x2c
     6e0:	1808      	adds	r0, r1, r0
     6e2:	3301      	adds	r3, #1
     6e4:	6028      	str	r0, [r5, #0]
     6e6:	7014      	strb	r4, [r2, #0]
     6e8:	8053      	strh	r3, [r2, #2]
     6ea:	3238      	adds	r2, #56	; 0x38
     6ec:	2b08      	cmp	r3, #8
     6ee:	d1f4      	bne.n	6da <AttcInit+0x16>
     6f0:	4b04      	ldr	r3, [pc, #16]	; (704 <AttcInit+0x40>)
     6f2:	31fc      	adds	r1, #252	; 0xfc
     6f4:	3334      	adds	r3, #52	; 0x34
     6f6:	604b      	str	r3, [r1, #4]
     6f8:	bd30      	pop	{r4, r5, pc}
     6fa:	46c0      	nop			; (mov r8, r8)
     6fc:	10001260 	.word	0x10001260
     700:	1000114c 	.word	0x1000114c
     704:	00010944 	.word	0x00010944

00000708 <attcProcErrRsp>:
     708:	b510      	push	{r4, lr}
     70a:	7c81      	ldrb	r1, [r0, #18]
     70c:	0010      	movs	r0, r2
     70e:	1f4c      	subs	r4, r1, #5
     710:	7099      	strb	r1, [r3, #2]
     712:	300c      	adds	r0, #12
     714:	2c01      	cmp	r4, #1
     716:	d908      	bls.n	72a <attcProcErrRsp+0x22>
     718:	2402      	movs	r4, #2
     71a:	43a1      	bics	r1, r4
     71c:	2909      	cmp	r1, #9
     71e:	d004      	beq.n	72a <attcProcErrRsp+0x22>
     720:	7ad1      	ldrb	r1, [r2, #11]
     722:	7a92      	ldrb	r2, [r2, #10]
     724:	0209      	lsls	r1, r1, #8
     726:	1852      	adds	r2, r2, r1
     728:	815a      	strh	r2, [r3, #10]
     72a:	7802      	ldrb	r2, [r0, #0]
     72c:	2a00      	cmp	r2, #0
     72e:	d100      	bne.n	732 <attcProcErrRsp+0x2a>
     730:	2275      	movs	r2, #117	; 0x75
     732:	70da      	strb	r2, [r3, #3]
     734:	2200      	movs	r2, #0
     736:	811a      	strh	r2, [r3, #8]
     738:	bd10      	pop	{r4, pc}

0000073a <attcProcFindOrReadRsp>:
     73a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     73c:	0014      	movs	r4, r2
     73e:	3108      	adds	r1, #8
     740:	1852      	adds	r2, r2, r1
     742:	4694      	mov	ip, r2
     744:	0022      	movs	r2, r4
     746:	7c87      	ldrb	r7, [r0, #18]
     748:	9300      	str	r3, [sp, #0]
     74a:	320a      	adds	r2, #10
     74c:	7a61      	ldrb	r1, [r4, #9]
     74e:	2f02      	cmp	r7, #2
     750:	d104      	bne.n	75c <attcProcFindOrReadRsp+0x22>
     752:	003e      	movs	r6, r7
     754:	2901      	cmp	r1, #1
     756:	d007      	beq.n	768 <attcProcFindOrReadRsp+0x2e>
     758:	360e      	adds	r6, #14
     75a:	e005      	b.n	768 <attcProcFindOrReadRsp+0x2e>
     75c:	1f0e      	subs	r6, r1, #4
     75e:	b2f6      	uxtb	r6, r6
     760:	2f04      	cmp	r7, #4
     762:	d101      	bne.n	768 <attcProcFindOrReadRsp+0x2e>
     764:	3902      	subs	r1, #2
     766:	b2ce      	uxtb	r6, r1
     768:	8bc5      	ldrh	r5, [r0, #30]
     76a:	4562      	cmp	r2, ip
     76c:	d22e      	bcs.n	7cc <attcProcFindOrReadRsp+0x92>
     76e:	7854      	ldrb	r4, [r2, #1]
     770:	7811      	ldrb	r1, [r2, #0]
     772:	0224      	lsls	r4, r4, #8
     774:	190c      	adds	r4, r1, r4
     776:	b2a4      	uxth	r4, r4
     778:	2c00      	cmp	r4, #0
     77a:	d024      	beq.n	7c6 <attcProcFindOrReadRsp+0x8c>
     77c:	2d00      	cmp	r5, #0
     77e:	d022      	beq.n	7c6 <attcProcFindOrReadRsp+0x8c>
     780:	42a5      	cmp	r5, r4
     782:	d820      	bhi.n	7c6 <attcProcFindOrReadRsp+0x8c>
     784:	8c01      	ldrh	r1, [r0, #32]
     786:	9101      	str	r1, [sp, #4]
     788:	428c      	cmp	r4, r1
     78a:	d81c      	bhi.n	7c6 <attcProcFindOrReadRsp+0x8c>
     78c:	2f08      	cmp	r7, #8
     78e:	d10f      	bne.n	7b0 <attcProcFindOrReadRsp+0x76>
     790:	78d1      	ldrb	r1, [r2, #3]
     792:	020b      	lsls	r3, r1, #8
     794:	7891      	ldrb	r1, [r2, #2]
     796:	3204      	adds	r2, #4
     798:	18c9      	adds	r1, r1, r3
     79a:	b289      	uxth	r1, r1
     79c:	2900      	cmp	r1, #0
     79e:	d012      	beq.n	7c6 <attcProcFindOrReadRsp+0x8c>
     7a0:	428c      	cmp	r4, r1
     7a2:	d810      	bhi.n	7c6 <attcProcFindOrReadRsp+0x8c>
     7a4:	428d      	cmp	r5, r1
     7a6:	d80e      	bhi.n	7c6 <attcProcFindOrReadRsp+0x8c>
     7a8:	9c01      	ldr	r4, [sp, #4]
     7aa:	428c      	cmp	r4, r1
     7ac:	d202      	bcs.n	7b4 <attcProcFindOrReadRsp+0x7a>
     7ae:	e00a      	b.n	7c6 <attcProcFindOrReadRsp+0x8c>
     7b0:	0021      	movs	r1, r4
     7b2:	3202      	adds	r2, #2
     7b4:	4c0f      	ldr	r4, [pc, #60]	; (7f4 <attcProcFindOrReadRsp+0xba>)
     7b6:	2500      	movs	r5, #0
     7b8:	42a1      	cmp	r1, r4
     7ba:	d001      	beq.n	7c0 <attcProcFindOrReadRsp+0x86>
     7bc:	3101      	adds	r1, #1
     7be:	b28d      	uxth	r5, r1
     7c0:	1992      	adds	r2, r2, r6
     7c2:	4594      	cmp	ip, r2
     7c4:	d2d1      	bcs.n	76a <attcProcFindOrReadRsp+0x30>
     7c6:	2273      	movs	r2, #115	; 0x73
     7c8:	9b00      	ldr	r3, [sp, #0]
     7ca:	70da      	strb	r2, [r3, #3]
     7cc:	9b00      	ldr	r3, [sp, #0]
     7ce:	78db      	ldrb	r3, [r3, #3]
     7d0:	2b00      	cmp	r3, #0
     7d2:	d10d      	bne.n	7f0 <attcProcFindOrReadRsp+0xb6>
     7d4:	7cc3      	ldrb	r3, [r0, #19]
     7d6:	2b01      	cmp	r3, #1
     7d8:	d10a      	bne.n	7f0 <attcProcFindOrReadRsp+0xb6>
     7da:	2d00      	cmp	r5, #0
     7dc:	d003      	beq.n	7e6 <attcProcFindOrReadRsp+0xac>
     7de:	8c03      	ldrh	r3, [r0, #32]
     7e0:	3301      	adds	r3, #1
     7e2:	429d      	cmp	r5, r3
     7e4:	d102      	bne.n	7ec <attcProcFindOrReadRsp+0xb2>
     7e6:	2300      	movs	r3, #0
     7e8:	74c3      	strb	r3, [r0, #19]
     7ea:	e001      	b.n	7f0 <attcProcFindOrReadRsp+0xb6>
     7ec:	83c5      	strh	r5, [r0, #30]
     7ee:	8305      	strh	r5, [r0, #24]
     7f0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     7f2:	46c0      	nop			; (mov r8, r8)
     7f4:	0000ffff 	.word	0x0000ffff

000007f8 <attcProcReadRsp>:
     7f8:	4770      	bx	lr

000007fa <attcProcWriteRsp>:
     7fa:	2200      	movs	r2, #0
     7fc:	811a      	strh	r2, [r3, #8]
     7fe:	4770      	bx	lr

00000800 <attcProcMtuRsp>:
     800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     802:	7a94      	ldrb	r4, [r2, #10]
     804:	7a53      	ldrb	r3, [r2, #9]
     806:	0224      	lsls	r4, r4, #8
     808:	191c      	adds	r4, r3, r4
     80a:	b2a4      	uxth	r4, r4
     80c:	2c16      	cmp	r4, #22
     80e:	d800      	bhi.n	812 <attcProcMtuRsp+0x12>
     810:	2417      	movs	r4, #23
     812:	4e0a      	ldr	r6, [pc, #40]	; (83c <attcProcMtuRsp+0x3c>)
     814:	6805      	ldr	r5, [r0, #0]
     816:	6833      	ldr	r3, [r6, #0]
     818:	889f      	ldrh	r7, [r3, #4]
     81a:	f007 fa8d 	bl	7d38 <HciGetMaxRxAclLen>
     81e:	3804      	subs	r0, #4
     820:	4287      	cmp	r7, r0
     822:	da02      	bge.n	82a <attcProcMtuRsp+0x2a>
     824:	6833      	ldr	r3, [r6, #0]
     826:	889a      	ldrh	r2, [r3, #4]
     828:	e003      	b.n	832 <attcProcMtuRsp+0x32>
     82a:	f007 fa85 	bl	7d38 <HciGetMaxRxAclLen>
     82e:	1f02      	subs	r2, r0, #4
     830:	b292      	uxth	r2, r2
     832:	0028      	movs	r0, r5
     834:	0021      	movs	r1, r4
     836:	f7ff fcc7 	bl	1c8 <attSetMtu>
     83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     83c:	10001088 	.word	0x10001088

00000840 <attcProcRsp>:
     840:	b5f0      	push	{r4, r5, r6, r7, lr}
     842:	000e      	movs	r6, r1
     844:	7c81      	ldrb	r1, [r0, #18]
     846:	b085      	sub	sp, #20
     848:	0004      	movs	r4, r0
     84a:	0015      	movs	r5, r2
     84c:	2900      	cmp	r1, #0
     84e:	d050      	beq.n	8f2 <attcProcRsp+0xb2>
     850:	4668      	mov	r0, sp
     852:	7a13      	ldrb	r3, [r2, #8]
     854:	105b      	asrs	r3, r3, #1
     856:	b2da      	uxtb	r2, r3
     858:	7082      	strb	r2, [r0, #2]
     85a:	2b00      	cmp	r3, #0
     85c:	d001      	beq.n	862 <attcProcRsp+0x22>
     85e:	4291      	cmp	r1, r2
     860:	d147      	bne.n	8f2 <attcProcRsp+0xb2>
     862:	0020      	movs	r0, r4
     864:	3024      	adds	r0, #36	; 0x24
     866:	f00a fcb9 	bl	b1dc <WsfTimerStop>
     86a:	002b      	movs	r3, r5
     86c:	466a      	mov	r2, sp
     86e:	2700      	movs	r7, #0
     870:	3309      	adds	r3, #9
     872:	9301      	str	r3, [sp, #4]
     874:	1e73      	subs	r3, r6, #1
     876:	8113      	strh	r3, [r2, #8]
     878:	8b23      	ldrh	r3, [r4, #24]
     87a:	70d7      	strb	r7, [r2, #3]
     87c:	8153      	strh	r3, [r2, #10]
     87e:	7893      	ldrb	r3, [r2, #2]
     880:	4a1d      	ldr	r2, [pc, #116]	; (8f8 <attcProcRsp+0xb8>)
     882:	009b      	lsls	r3, r3, #2
     884:	589b      	ldr	r3, [r3, r2]
     886:	0031      	movs	r1, r6
     888:	469c      	mov	ip, r3
     88a:	002a      	movs	r2, r5
     88c:	466b      	mov	r3, sp
     88e:	0020      	movs	r0, r4
     890:	4665      	mov	r5, ip
     892:	47a8      	blx	r5
     894:	7ce2      	ldrb	r2, [r4, #19]
     896:	003b      	movs	r3, r7
     898:	42ba      	cmp	r2, r7
     89a:	d003      	beq.n	8a4 <attcProcRsp+0x64>
     89c:	466a      	mov	r2, sp
     89e:	78d2      	ldrb	r2, [r2, #3]
     8a0:	42ba      	cmp	r2, r7
     8a2:	d004      	beq.n	8ae <attcProcRsp+0x6e>
     8a4:	0020      	movs	r0, r4
     8a6:	74a3      	strb	r3, [r4, #18]
     8a8:	3010      	adds	r0, #16
     8aa:	f7ff fd7b 	bl	3a4 <attcFreePkt>
     8ae:	466b      	mov	r3, sp
     8b0:	789b      	ldrb	r3, [r3, #2]
     8b2:	2b01      	cmp	r3, #1
     8b4:	d009      	beq.n	8ca <attcProcRsp+0x8a>
     8b6:	466a      	mov	r2, sp
     8b8:	7ce3      	ldrb	r3, [r4, #19]
     8ba:	4668      	mov	r0, sp
     8bc:	7313      	strb	r3, [r2, #12]
     8be:	8a23      	ldrh	r3, [r4, #16]
     8c0:	8013      	strh	r3, [r2, #0]
     8c2:	4b0e      	ldr	r3, [pc, #56]	; (8fc <attcProcRsp+0xbc>)
     8c4:	33fc      	adds	r3, #252	; 0xfc
     8c6:	68db      	ldr	r3, [r3, #12]
     8c8:	4798      	blx	r3
     8ca:	0023      	movs	r3, r4
     8cc:	3334      	adds	r3, #52	; 0x34
     8ce:	781b      	ldrb	r3, [r3, #0]
     8d0:	2b00      	cmp	r3, #0
     8d2:	d10e      	bne.n	8f2 <attcProcRsp+0xb2>
     8d4:	6965      	ldr	r5, [r4, #20]
     8d6:	2d00      	cmp	r5, #0
     8d8:	d003      	beq.n	8e2 <attcProcRsp+0xa2>
     8da:	0020      	movs	r0, r4
     8dc:	f7ff fd18 	bl	310 <attcSendReq>
     8e0:	e007      	b.n	8f2 <attcProcRsp+0xb2>
     8e2:	79a3      	ldrb	r3, [r4, #6]
     8e4:	2b00      	cmp	r3, #0
     8e6:	d004      	beq.n	8f2 <attcProcRsp+0xb2>
     8e8:	1d21      	adds	r1, r4, #4
     8ea:	0020      	movs	r0, r4
     8ec:	f7ff fd1a 	bl	324 <attcSetupReq>
     8f0:	71a5      	strb	r5, [r4, #6]
     8f2:	b005      	add	sp, #20
     8f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8f6:	46c0      	nop			; (mov r8, r8)
     8f8:	00010988 	.word	0x00010988
     8fc:	1000114c 	.word	0x1000114c

00000900 <attcProcInd>:
     900:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     902:	0004      	movs	r4, r0
     904:	4668      	mov	r0, sp
     906:	7a13      	ldrb	r3, [r2, #8]
     908:	3903      	subs	r1, #3
     90a:	105b      	asrs	r3, r3, #1
     90c:	7083      	strb	r3, [r0, #2]
     90e:	7a93      	ldrb	r3, [r2, #10]
     910:	7a50      	ldrb	r0, [r2, #9]
     912:	021b      	lsls	r3, r3, #8
     914:	18c3      	adds	r3, r0, r3
     916:	4668      	mov	r0, sp
     918:	320b      	adds	r2, #11
     91a:	9201      	str	r2, [sp, #4]
     91c:	b29b      	uxth	r3, r3
     91e:	6822      	ldr	r2, [r4, #0]
     920:	8143      	strh	r3, [r0, #10]
     922:	8101      	strh	r1, [r0, #8]
     924:	7f12      	ldrb	r2, [r2, #28]
     926:	8002      	strh	r2, [r0, #0]
     928:	2200      	movs	r2, #0
     92a:	70c2      	strb	r2, [r0, #3]
     92c:	7302      	strb	r2, [r0, #12]
     92e:	4293      	cmp	r3, r2
     930:	d003      	beq.n	93a <attcProcInd+0x3a>
     932:	4b0f      	ldr	r3, [pc, #60]	; (970 <attcProcInd+0x70>)
     934:	33fc      	adds	r3, #252	; 0xfc
     936:	68db      	ldr	r3, [r3, #12]
     938:	4798      	blx	r3
     93a:	466b      	mov	r3, sp
     93c:	789b      	ldrb	r3, [r3, #2]
     93e:	2b0e      	cmp	r3, #14
     940:	d115      	bne.n	96e <attcProcInd+0x6e>
     942:	0023      	movs	r3, r4
     944:	3334      	adds	r3, #52	; 0x34
     946:	781b      	ldrb	r3, [r3, #0]
     948:	2b00      	cmp	r3, #0
     94a:	d10d      	bne.n	968 <attcProcInd+0x68>
     94c:	2009      	movs	r0, #9
     94e:	f7ff fc4d 	bl	1ec <attMsgAlloc>
     952:	1e03      	subs	r3, r0, #0
     954:	d00b      	beq.n	96e <attcProcInd+0x6e>
     956:	221e      	movs	r2, #30
     958:	7202      	strb	r2, [r0, #8]
     95a:	6822      	ldr	r2, [r4, #0]
     95c:	2004      	movs	r0, #4
     95e:	8b11      	ldrh	r1, [r2, #24]
     960:	2201      	movs	r2, #1
     962:	f003 f94b 	bl	3bfc <L2cDataReq>
     966:	e002      	b.n	96e <attcProcInd+0x6e>
     968:	2301      	movs	r3, #1
     96a:	3435      	adds	r4, #53	; 0x35
     96c:	7023      	strb	r3, [r4, #0]
     96e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     970:	1000114c 	.word	0x1000114c

00000974 <attcSendMsg>:
     974:	b5f0      	push	{r4, r5, r6, r7, lr}
     976:	0006      	movs	r6, r0
     978:	b085      	sub	sp, #20
     97a:	001d      	movs	r5, r3
     97c:	ab0a      	add	r3, sp, #40	; 0x28
     97e:	781b      	ldrb	r3, [r3, #0]
     980:	000f      	movs	r7, r1
     982:	0014      	movs	r4, r2
     984:	9303      	str	r3, [sp, #12]
     986:	f009 fb7b 	bl	a080 <WsfTaskLock>
     98a:	0030      	movs	r0, r6
     98c:	f7ff fcd6 	bl	33c <attcCcbByConnId>
     990:	2800      	cmp	r0, #0
     992:	d005      	beq.n	9a0 <attcSendMsg+0x2c>
     994:	6803      	ldr	r3, [r0, #0]
     996:	8b5a      	ldrh	r2, [r3, #26]
     998:	9201      	str	r2, [sp, #4]
     99a:	7fdb      	ldrb	r3, [r3, #31]
     99c:	9302      	str	r3, [sp, #8]
     99e:	e001      	b.n	9a4 <attcSendMsg+0x30>
     9a0:	9002      	str	r0, [sp, #8]
     9a2:	9001      	str	r0, [sp, #4]
     9a4:	f009 fb72 	bl	a08c <WsfTaskUnlock>
     9a8:	9b01      	ldr	r3, [sp, #4]
     9aa:	2b00      	cmp	r3, #0
     9ac:	d030      	beq.n	a10 <attcSendMsg+0x9c>
     9ae:	9b02      	ldr	r3, [sp, #8]
     9b0:	2b00      	cmp	r3, #0
     9b2:	d127      	bne.n	a04 <attcSendMsg+0x90>
     9b4:	2d00      	cmp	r5, #0
     9b6:	d00c      	beq.n	9d2 <attcSendMsg+0x5e>
     9b8:	2c0b      	cmp	r4, #11
     9ba:	d001      	beq.n	9c0 <attcSendMsg+0x4c>
     9bc:	882b      	ldrh	r3, [r5, #0]
     9be:	e005      	b.n	9cc <attcSendMsg+0x58>
     9c0:	9b03      	ldr	r3, [sp, #12]
     9c2:	2b00      	cmp	r3, #0
     9c4:	d105      	bne.n	9d2 <attcSendMsg+0x5e>
     9c6:	882b      	ldrh	r3, [r5, #0]
     9c8:	3305      	adds	r3, #5
     9ca:	b29b      	uxth	r3, r3
     9cc:	9a01      	ldr	r2, [sp, #4]
     9ce:	429a      	cmp	r2, r3
     9d0:	d311      	bcc.n	9f6 <attcSendMsg+0x82>
     9d2:	200c      	movs	r0, #12
     9d4:	f00a fa23 	bl	ae1e <WsfMsgAlloc>
     9d8:	1e01      	subs	r1, r0, #0
     9da:	d019      	beq.n	a10 <attcSendMsg+0x9c>
     9dc:	466b      	mov	r3, sp
     9de:	7b1b      	ldrb	r3, [r3, #12]
     9e0:	8006      	strh	r6, [r0, #0]
     9e2:	70c3      	strb	r3, [r0, #3]
     9e4:	4b0e      	ldr	r3, [pc, #56]	; (a20 <attcSendMsg+0xac>)
     9e6:	7084      	strb	r4, [r0, #2]
     9e8:	6045      	str	r5, [r0, #4]
     9ea:	8107      	strh	r7, [r0, #8]
     9ec:	33ff      	adds	r3, #255	; 0xff
     9ee:	7c58      	ldrb	r0, [r3, #17]
     9f0:	f00a fa39 	bl	ae66 <WsfMsgSend>
     9f4:	e011      	b.n	a1a <attcSendMsg+0xa6>
     9f6:	2377      	movs	r3, #119	; 0x77
     9f8:	003a      	movs	r2, r7
     9fa:	0021      	movs	r1, r4
     9fc:	0030      	movs	r0, r6
     9fe:	f7ff fcec 	bl	3da <attcExecCallback>
     a02:	e007      	b.n	a14 <attcSendMsg+0xa0>
     a04:	2371      	movs	r3, #113	; 0x71
     a06:	003a      	movs	r2, r7
     a08:	0021      	movs	r1, r4
     a0a:	0030      	movs	r0, r6
     a0c:	f7ff fce5 	bl	3da <attcExecCallback>
     a10:	2d00      	cmp	r5, #0
     a12:	d002      	beq.n	a1a <attcSendMsg+0xa6>
     a14:	0028      	movs	r0, r5
     a16:	f00a fa19 	bl	ae4c <WsfMsgFree>
     a1a:	b005      	add	sp, #20
     a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a1e:	46c0      	nop			; (mov r8, r8)
     a20:	1000114c 	.word	0x1000114c

00000a24 <AttcFindInfoReq>:
     a24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     a26:	0005      	movs	r5, r0
     a28:	200d      	movs	r0, #13
     a2a:	001e      	movs	r6, r3
     a2c:	000c      	movs	r4, r1
     a2e:	0017      	movs	r7, r2
     a30:	f7ff fbdc 	bl	1ec <attMsgAlloc>
     a34:	1e03      	subs	r3, r0, #0
     a36:	d00b      	beq.n	a50 <AttcFindInfoReq+0x2c>
     a38:	2205      	movs	r2, #5
     a3a:	8002      	strh	r2, [r0, #0]
     a3c:	3a01      	subs	r2, #1
     a3e:	7202      	strb	r2, [r0, #8]
     a40:	8044      	strh	r4, [r0, #2]
     a42:	8087      	strh	r7, [r0, #4]
     a44:	3a02      	subs	r2, #2
     a46:	9600      	str	r6, [sp, #0]
     a48:	0021      	movs	r1, r4
     a4a:	0028      	movs	r0, r5
     a4c:	f7ff ff92 	bl	974 <attcSendMsg>
     a50:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00000a52 <AttcReadReq>:
     a52:	b537      	push	{r0, r1, r2, r4, r5, lr}
     a54:	0005      	movs	r5, r0
     a56:	200b      	movs	r0, #11
     a58:	000c      	movs	r4, r1
     a5a:	f7ff fbc7 	bl	1ec <attMsgAlloc>
     a5e:	1e03      	subs	r3, r0, #0
     a60:	d00d      	beq.n	a7e <AttcReadReq+0x2c>
     a62:	2203      	movs	r2, #3
     a64:	8002      	strh	r2, [r0, #0]
     a66:	3207      	adds	r2, #7
     a68:	7202      	strb	r2, [r0, #8]
     a6a:	0a22      	lsrs	r2, r4, #8
     a6c:	7282      	strb	r2, [r0, #10]
     a6e:	2200      	movs	r2, #0
     a70:	7244      	strb	r4, [r0, #9]
     a72:	0021      	movs	r1, r4
     a74:	9200      	str	r2, [sp, #0]
     a76:	0028      	movs	r0, r5
     a78:	3205      	adds	r2, #5
     a7a:	f7ff ff7b 	bl	974 <attcSendMsg>
     a7e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

00000a80 <AttcWriteReq>:
     a80:	b5f0      	push	{r4, r5, r6, r7, lr}
     a82:	0007      	movs	r7, r0
     a84:	0010      	movs	r0, r2
     a86:	300b      	adds	r0, #11
     a88:	b085      	sub	sp, #20
     a8a:	b280      	uxth	r0, r0
     a8c:	000d      	movs	r5, r1
     a8e:	0016      	movs	r6, r2
     a90:	9303      	str	r3, [sp, #12]
     a92:	f7ff fbab 	bl	1ec <attMsgAlloc>
     a96:	1e04      	subs	r4, r0, #0
     a98:	d013      	beq.n	ac2 <AttcWriteReq+0x42>
     a9a:	1cf3      	adds	r3, r6, #3
     a9c:	8003      	strh	r3, [r0, #0]
     a9e:	2312      	movs	r3, #18
     aa0:	7203      	strb	r3, [r0, #8]
     aa2:	0a2b      	lsrs	r3, r5, #8
     aa4:	7283      	strb	r3, [r0, #10]
     aa6:	7245      	strb	r5, [r0, #9]
     aa8:	0032      	movs	r2, r6
     aaa:	9903      	ldr	r1, [sp, #12]
     aac:	300b      	adds	r0, #11
     aae:	f00f f84e 	bl	fb4e <memcpy>
     ab2:	2300      	movs	r3, #0
     ab4:	2209      	movs	r2, #9
     ab6:	9300      	str	r3, [sp, #0]
     ab8:	0029      	movs	r1, r5
     aba:	0023      	movs	r3, r4
     abc:	0038      	movs	r0, r7
     abe:	f7ff ff59 	bl	974 <attcSendMsg>
     ac2:	b005      	add	sp, #20
     ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000ac6 <AttcCancelReq>:
     ac6:	b507      	push	{r0, r1, r2, lr}
     ac8:	2100      	movs	r1, #0
     aca:	220f      	movs	r2, #15
     acc:	9100      	str	r1, [sp, #0]
     ace:	000b      	movs	r3, r1
     ad0:	f7ff ff50 	bl	974 <attcSendMsg>
     ad4:	bd07      	pop	{r0, r1, r2, pc}

00000ad6 <AttcMtuReq>:
     ad6:	b537      	push	{r0, r1, r2, r4, r5, lr}
     ad8:	0005      	movs	r5, r0
     ada:	200b      	movs	r0, #11
     adc:	000c      	movs	r4, r1
     ade:	f7ff fb85 	bl	1ec <attMsgAlloc>
     ae2:	1e03      	subs	r3, r0, #0
     ae4:	d00c      	beq.n	b00 <AttcMtuReq+0x2a>
     ae6:	2203      	movs	r2, #3
     ae8:	2100      	movs	r1, #0
     aea:	8002      	strh	r2, [r0, #0]
     aec:	7244      	strb	r4, [r0, #9]
     aee:	3a01      	subs	r2, #1
     af0:	0a24      	lsrs	r4, r4, #8
     af2:	7202      	strb	r2, [r0, #8]
     af4:	7284      	strb	r4, [r0, #10]
     af6:	3a01      	subs	r2, #1
     af8:	9100      	str	r1, [sp, #0]
     afa:	0028      	movs	r0, r5
     afc:	f7ff ff3a 	bl	974 <attcSendMsg>
     b00:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
     b02:	46c0      	nop			; (mov r8, r8)

00000b04 <attcProcFindByTypeRsp>:
     b04:	b5f0      	push	{r4, r5, r6, r7, lr}
     b06:	4c1b      	ldr	r4, [pc, #108]	; (b74 <attcProcFindByTypeRsp+0x70>)
     b08:	0017      	movs	r7, r2
     b0a:	46a4      	mov	ip, r4
     b0c:	3108      	adds	r1, #8
     b0e:	1852      	adds	r2, r2, r1
     b10:	8bc1      	ldrh	r1, [r0, #30]
     b12:	3709      	adds	r7, #9
     b14:	4297      	cmp	r7, r2
     b16:	d21c      	bcs.n	b52 <attcProcFindByTypeRsp+0x4e>
     b18:	787e      	ldrb	r6, [r7, #1]
     b1a:	783c      	ldrb	r4, [r7, #0]
     b1c:	0236      	lsls	r6, r6, #8
     b1e:	19a6      	adds	r6, r4, r6
     b20:	78fc      	ldrb	r4, [r7, #3]
     b22:	78bd      	ldrb	r5, [r7, #2]
     b24:	0224      	lsls	r4, r4, #8
     b26:	192d      	adds	r5, r5, r4
     b28:	b2b6      	uxth	r6, r6
     b2a:	b2ac      	uxth	r4, r5
     b2c:	3704      	adds	r7, #4
     b2e:	42a6      	cmp	r6, r4
     b30:	d80d      	bhi.n	b4e <attcProcFindByTypeRsp+0x4a>
     b32:	42b1      	cmp	r1, r6
     b34:	d80b      	bhi.n	b4e <attcProcFindByTypeRsp+0x4a>
     b36:	8c05      	ldrh	r5, [r0, #32]
     b38:	42b5      	cmp	r5, r6
     b3a:	d308      	bcc.n	b4e <attcProcFindByTypeRsp+0x4a>
     b3c:	2900      	cmp	r1, #0
     b3e:	d006      	beq.n	b4e <attcProcFindByTypeRsp+0x4a>
     b40:	2100      	movs	r1, #0
     b42:	4564      	cmp	r4, ip
     b44:	d001      	beq.n	b4a <attcProcFindByTypeRsp+0x46>
     b46:	3401      	adds	r4, #1
     b48:	b2a1      	uxth	r1, r4
     b4a:	42ba      	cmp	r2, r7
     b4c:	d2e2      	bcs.n	b14 <attcProcFindByTypeRsp+0x10>
     b4e:	2273      	movs	r2, #115	; 0x73
     b50:	70da      	strb	r2, [r3, #3]
     b52:	78db      	ldrb	r3, [r3, #3]
     b54:	2b00      	cmp	r3, #0
     b56:	d10c      	bne.n	b72 <attcProcFindByTypeRsp+0x6e>
     b58:	7cc3      	ldrb	r3, [r0, #19]
     b5a:	2b01      	cmp	r3, #1
     b5c:	d109      	bne.n	b72 <attcProcFindByTypeRsp+0x6e>
     b5e:	2900      	cmp	r1, #0
     b60:	d002      	beq.n	b68 <attcProcFindByTypeRsp+0x64>
     b62:	8c03      	ldrh	r3, [r0, #32]
     b64:	428b      	cmp	r3, r1
     b66:	d202      	bcs.n	b6e <attcProcFindByTypeRsp+0x6a>
     b68:	2300      	movs	r3, #0
     b6a:	74c3      	strb	r3, [r0, #19]
     b6c:	e001      	b.n	b72 <attcProcFindByTypeRsp+0x6e>
     b6e:	83c1      	strh	r1, [r0, #30]
     b70:	8301      	strh	r1, [r0, #24]
     b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b74:	0000ffff 	.word	0x0000ffff

00000b78 <attcProcReadLongRsp>:
     b78:	7cc2      	ldrb	r2, [r0, #19]
     b7a:	2a01      	cmp	r2, #1
     b7c:	d10a      	bne.n	b94 <attcProcReadLongRsp+0x1c>
     b7e:	6802      	ldr	r2, [r0, #0]
     b80:	8b52      	ldrh	r2, [r2, #26]
     b82:	428a      	cmp	r2, r1
     b84:	d902      	bls.n	b8c <attcProcReadLongRsp+0x14>
     b86:	2300      	movs	r3, #0
     b88:	74c3      	strb	r3, [r0, #19]
     b8a:	e003      	b.n	b94 <attcProcReadLongRsp+0x1c>
     b8c:	8bc2      	ldrh	r2, [r0, #30]
     b8e:	891b      	ldrh	r3, [r3, #8]
     b90:	18d3      	adds	r3, r2, r3
     b92:	83c3      	strh	r3, [r0, #30]
     b94:	4770      	bx	lr

00000b96 <AttcFindByTypeValueReq>:
     b96:	b5f0      	push	{r4, r5, r6, r7, lr}
     b98:	b087      	sub	sp, #28
     b9a:	001f      	movs	r7, r3
     b9c:	ab0c      	add	r3, sp, #48	; 0x30
     b9e:	881d      	ldrh	r5, [r3, #0]
     ba0:	9003      	str	r0, [sp, #12]
     ba2:	0028      	movs	r0, r5
     ba4:	ab0e      	add	r3, sp, #56	; 0x38
     ba6:	781b      	ldrb	r3, [r3, #0]
     ba8:	300f      	adds	r0, #15
     baa:	b280      	uxth	r0, r0
     bac:	000e      	movs	r6, r1
     bae:	9204      	str	r2, [sp, #16]
     bb0:	9305      	str	r3, [sp, #20]
     bb2:	f7ff fb1b 	bl	1ec <attMsgAlloc>
     bb6:	1e04      	subs	r4, r0, #0
     bb8:	d017      	beq.n	bea <AttcFindByTypeValueReq+0x54>
     bba:	1deb      	adds	r3, r5, #7
     bbc:	8003      	strh	r3, [r0, #0]
     bbe:	466b      	mov	r3, sp
     bc0:	8a1b      	ldrh	r3, [r3, #16]
     bc2:	8046      	strh	r6, [r0, #2]
     bc4:	8083      	strh	r3, [r0, #4]
     bc6:	2306      	movs	r3, #6
     bc8:	7203      	strb	r3, [r0, #8]
     bca:	0a3b      	lsrs	r3, r7, #8
     bcc:	7383      	strb	r3, [r0, #14]
     bce:	7347      	strb	r7, [r0, #13]
     bd0:	002a      	movs	r2, r5
     bd2:	990d      	ldr	r1, [sp, #52]	; 0x34
     bd4:	300f      	adds	r0, #15
     bd6:	f00e ffba 	bl	fb4e <memcpy>
     bda:	9b05      	ldr	r3, [sp, #20]
     bdc:	2203      	movs	r2, #3
     bde:	9300      	str	r3, [sp, #0]
     be0:	0031      	movs	r1, r6
     be2:	0023      	movs	r3, r4
     be4:	9803      	ldr	r0, [sp, #12]
     be6:	f7ff fec5 	bl	974 <attcSendMsg>
     bea:	b007      	add	sp, #28
     bec:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000bee <AttcReadByTypeReq>:
     bee:	b5f0      	push	{r4, r5, r6, r7, lr}
     bf0:	001f      	movs	r7, r3
     bf2:	b087      	sub	sp, #28
     bf4:	b2bd      	uxth	r5, r7
     bf6:	9002      	str	r0, [sp, #8]
     bf8:	0028      	movs	r0, r5
     bfa:	ab0c      	add	r3, sp, #48	; 0x30
     bfc:	9203      	str	r2, [sp, #12]
     bfe:	cb04      	ldmia	r3!, {r2}
     c00:	300d      	adds	r0, #13
     c02:	781b      	ldrb	r3, [r3, #0]
     c04:	000e      	movs	r6, r1
     c06:	9204      	str	r2, [sp, #16]
     c08:	9305      	str	r3, [sp, #20]
     c0a:	f7ff faef 	bl	1ec <attMsgAlloc>
     c0e:	1e04      	subs	r4, r0, #0
     c10:	d014      	beq.n	c3c <AttcReadByTypeReq+0x4e>
     c12:	466b      	mov	r3, sp
     c14:	899b      	ldrh	r3, [r3, #12]
     c16:	3505      	adds	r5, #5
     c18:	8083      	strh	r3, [r0, #4]
     c1a:	2308      	movs	r3, #8
     c1c:	8005      	strh	r5, [r0, #0]
     c1e:	7203      	strb	r3, [r0, #8]
     c20:	8046      	strh	r6, [r0, #2]
     c22:	003a      	movs	r2, r7
     c24:	9904      	ldr	r1, [sp, #16]
     c26:	300d      	adds	r0, #13
     c28:	f00e ff91 	bl	fb4e <memcpy>
     c2c:	9b05      	ldr	r3, [sp, #20]
     c2e:	2204      	movs	r2, #4
     c30:	9300      	str	r3, [sp, #0]
     c32:	0031      	movs	r1, r6
     c34:	0023      	movs	r3, r4
     c36:	9802      	ldr	r0, [sp, #8]
     c38:	f7ff fe9c 	bl	974 <attcSendMsg>
     c3c:	b007      	add	sp, #28
     c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000c40 <AttcReadLongReq>:
     c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     c42:	0005      	movs	r5, r0
     c44:	200d      	movs	r0, #13
     c46:	001e      	movs	r6, r3
     c48:	000c      	movs	r4, r1
     c4a:	0017      	movs	r7, r2
     c4c:	f7ff face 	bl	1ec <attMsgAlloc>
     c50:	1e03      	subs	r3, r0, #0
     c52:	d00d      	beq.n	c70 <AttcReadLongReq+0x30>
     c54:	2205      	movs	r2, #5
     c56:	8002      	strh	r2, [r0, #0]
     c58:	3207      	adds	r2, #7
     c5a:	7202      	strb	r2, [r0, #8]
     c5c:	0a22      	lsrs	r2, r4, #8
     c5e:	7282      	strb	r2, [r0, #10]
     c60:	8047      	strh	r7, [r0, #2]
     c62:	7244      	strb	r4, [r0, #9]
     c64:	2206      	movs	r2, #6
     c66:	9600      	str	r6, [sp, #0]
     c68:	0021      	movs	r1, r4
     c6a:	0028      	movs	r0, r5
     c6c:	f7ff fe82 	bl	974 <attcSendMsg>
     c70:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00000c72 <AttcReadMultipleReq>:
     c72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     c74:	004e      	lsls	r6, r1, #1
     c76:	0007      	movs	r7, r0
     c78:	0030      	movs	r0, r6
     c7a:	3009      	adds	r0, #9
     c7c:	000c      	movs	r4, r1
     c7e:	0015      	movs	r5, r2
     c80:	f7ff fab4 	bl	1ec <attMsgAlloc>
     c84:	1e03      	subs	r3, r0, #0
     c86:	d018      	beq.n	cba <AttcReadMultipleReq+0x48>
     c88:	220e      	movs	r2, #14
     c8a:	3601      	adds	r6, #1
     c8c:	8006      	strh	r6, [r0, #0]
     c8e:	8829      	ldrh	r1, [r5, #0]
     c90:	7202      	strb	r2, [r0, #8]
     c92:	0002      	movs	r2, r0
     c94:	3209      	adds	r2, #9
     c96:	3c01      	subs	r4, #1
     c98:	b2e4      	uxtb	r4, r4
     c9a:	2cff      	cmp	r4, #255	; 0xff
     c9c:	d007      	beq.n	cae <AttcReadMultipleReq+0x3c>
     c9e:	8828      	ldrh	r0, [r5, #0]
     ca0:	7010      	strb	r0, [r2, #0]
     ca2:	8828      	ldrh	r0, [r5, #0]
     ca4:	3502      	adds	r5, #2
     ca6:	0a00      	lsrs	r0, r0, #8
     ca8:	7050      	strb	r0, [r2, #1]
     caa:	3202      	adds	r2, #2
     cac:	e7f3      	b.n	c96 <AttcReadMultipleReq+0x24>
     cae:	2200      	movs	r2, #0
     cb0:	0038      	movs	r0, r7
     cb2:	9200      	str	r2, [sp, #0]
     cb4:	3207      	adds	r2, #7
     cb6:	f7ff fe5d 	bl	974 <attcSendMsg>
     cba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00000cbc <AttcReadByGroupTypeReq>:
     cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
     cbe:	001f      	movs	r7, r3
     cc0:	b087      	sub	sp, #28
     cc2:	b2bd      	uxth	r5, r7
     cc4:	9002      	str	r0, [sp, #8]
     cc6:	0028      	movs	r0, r5
     cc8:	ab0c      	add	r3, sp, #48	; 0x30
     cca:	9203      	str	r2, [sp, #12]
     ccc:	cb04      	ldmia	r3!, {r2}
     cce:	300d      	adds	r0, #13
     cd0:	781b      	ldrb	r3, [r3, #0]
     cd2:	000e      	movs	r6, r1
     cd4:	9204      	str	r2, [sp, #16]
     cd6:	9305      	str	r3, [sp, #20]
     cd8:	f7ff fa88 	bl	1ec <attMsgAlloc>
     cdc:	1e04      	subs	r4, r0, #0
     cde:	d014      	beq.n	d0a <AttcReadByGroupTypeReq+0x4e>
     ce0:	466b      	mov	r3, sp
     ce2:	899b      	ldrh	r3, [r3, #12]
     ce4:	3505      	adds	r5, #5
     ce6:	8083      	strh	r3, [r0, #4]
     ce8:	2310      	movs	r3, #16
     cea:	8005      	strh	r5, [r0, #0]
     cec:	7203      	strb	r3, [r0, #8]
     cee:	8046      	strh	r6, [r0, #2]
     cf0:	003a      	movs	r2, r7
     cf2:	9904      	ldr	r1, [sp, #16]
     cf4:	300d      	adds	r0, #13
     cf6:	f00e ff2a 	bl	fb4e <memcpy>
     cfa:	9b05      	ldr	r3, [sp, #20]
     cfc:	2208      	movs	r2, #8
     cfe:	9300      	str	r3, [sp, #0]
     d00:	0031      	movs	r1, r6
     d02:	0023      	movs	r3, r4
     d04:	9802      	ldr	r0, [sp, #8]
     d06:	f7ff fe35 	bl	974 <attcSendMsg>
     d0a:	b007      	add	sp, #28
     d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d0e:	46c0      	nop			; (mov r8, r8)

00000d10 <attcProcPrepWriteRsp>:
     d10:	7cc2      	ldrb	r2, [r0, #19]
     d12:	2a01      	cmp	r2, #1
     d14:	d103      	bne.n	d1e <attcProcPrepWriteRsp+0xe>
     d16:	8b82      	ldrh	r2, [r0, #28]
     d18:	2a00      	cmp	r2, #0
     d1a:	d100      	bne.n	d1e <attcProcPrepWriteRsp+0xe>
     d1c:	74c2      	strb	r2, [r0, #19]
     d1e:	2200      	movs	r2, #0
     d20:	811a      	strh	r2, [r3, #8]
     d22:	4770      	bx	lr

00000d24 <AttcWriteCmd>:
     d24:	b5f0      	push	{r4, r5, r6, r7, lr}
     d26:	0007      	movs	r7, r0
     d28:	0010      	movs	r0, r2
     d2a:	300b      	adds	r0, #11
     d2c:	b085      	sub	sp, #20
     d2e:	b280      	uxth	r0, r0
     d30:	000d      	movs	r5, r1
     d32:	0016      	movs	r6, r2
     d34:	9303      	str	r3, [sp, #12]
     d36:	f7ff fa59 	bl	1ec <attMsgAlloc>
     d3a:	1e04      	subs	r4, r0, #0
     d3c:	d013      	beq.n	d66 <AttcWriteCmd+0x42>
     d3e:	1cf3      	adds	r3, r6, #3
     d40:	8003      	strh	r3, [r0, #0]
     d42:	2352      	movs	r3, #82	; 0x52
     d44:	7203      	strb	r3, [r0, #8]
     d46:	0a2b      	lsrs	r3, r5, #8
     d48:	7283      	strb	r3, [r0, #10]
     d4a:	7245      	strb	r5, [r0, #9]
     d4c:	0032      	movs	r2, r6
     d4e:	9903      	ldr	r1, [sp, #12]
     d50:	300b      	adds	r0, #11
     d52:	f00e fefc 	bl	fb4e <memcpy>
     d56:	2300      	movs	r3, #0
     d58:	220a      	movs	r2, #10
     d5a:	9300      	str	r3, [sp, #0]
     d5c:	0029      	movs	r1, r5
     d5e:	0023      	movs	r3, r4
     d60:	0038      	movs	r0, r7
     d62:	f7ff fe07 	bl	974 <attcSendMsg>
     d66:	b005      	add	sp, #20
     d68:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000d6a <AttcPrepareWriteReq>:
     d6a:	b5f0      	push	{r4, r5, r6, r7, lr}
     d6c:	b087      	sub	sp, #28
     d6e:	001f      	movs	r7, r3
     d70:	ab0c      	add	r3, sp, #48	; 0x30
     d72:	9205      	str	r2, [sp, #20]
     d74:	cb04      	ldmia	r3!, {r2}
     d76:	9004      	str	r0, [sp, #16]
     d78:	781b      	ldrb	r3, [r3, #0]
     d7a:	000d      	movs	r5, r1
     d7c:	9303      	str	r3, [sp, #12]
     d7e:	ab0e      	add	r3, sp, #56	; 0x38
     d80:	781e      	ldrb	r6, [r3, #0]
     d82:	9202      	str	r2, [sp, #8]
     d84:	2e00      	cmp	r6, #0
     d86:	d003      	beq.n	d90 <AttcPrepareWriteReq+0x26>
     d88:	9b03      	ldr	r3, [sp, #12]
     d8a:	200d      	movs	r0, #13
     d8c:	2b00      	cmp	r3, #0
     d8e:	d102      	bne.n	d96 <AttcPrepareWriteReq+0x2c>
     d90:	0038      	movs	r0, r7
     d92:	300d      	adds	r0, #13
     d94:	b280      	uxth	r0, r0
     d96:	f7ff fa29 	bl	1ec <attMsgAlloc>
     d9a:	1e04      	subs	r4, r0, #0
     d9c:	d01f      	beq.n	dde <AttcPrepareWriteReq+0x74>
     d9e:	466b      	mov	r3, sp
     da0:	8a9b      	ldrh	r3, [r3, #20]
     da2:	8007      	strh	r7, [r0, #0]
     da4:	8043      	strh	r3, [r0, #2]
     da6:	2316      	movs	r3, #22
     da8:	7203      	strb	r3, [r0, #8]
     daa:	0a2b      	lsrs	r3, r5, #8
     dac:	7245      	strb	r5, [r0, #9]
     dae:	7283      	strb	r3, [r0, #10]
     db0:	2e00      	cmp	r6, #0
     db2:	d005      	beq.n	dc0 <AttcPrepareWriteReq+0x56>
     db4:	9b03      	ldr	r3, [sp, #12]
     db6:	2b00      	cmp	r3, #0
     db8:	d002      	beq.n	dc0 <AttcPrepareWriteReq+0x56>
     dba:	9b02      	ldr	r3, [sp, #8]
     dbc:	6043      	str	r3, [r0, #4]
     dbe:	e007      	b.n	dd0 <AttcPrepareWriteReq+0x66>
     dc0:	003a      	movs	r2, r7
     dc2:	0027      	movs	r7, r4
     dc4:	370d      	adds	r7, #13
     dc6:	9902      	ldr	r1, [sp, #8]
     dc8:	0038      	movs	r0, r7
     dca:	f00e fec0 	bl	fb4e <memcpy>
     dce:	6067      	str	r7, [r4, #4]
     dd0:	9600      	str	r6, [sp, #0]
     dd2:	0023      	movs	r3, r4
     dd4:	220b      	movs	r2, #11
     dd6:	0029      	movs	r1, r5
     dd8:	9804      	ldr	r0, [sp, #16]
     dda:	f7ff fdcb 	bl	974 <attcSendMsg>
     dde:	b007      	add	sp, #28
     de0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000de2 <AttcExecuteWriteReq>:
     de2:	b537      	push	{r0, r1, r2, r4, r5, lr}
     de4:	0004      	movs	r4, r0
     de6:	200a      	movs	r0, #10
     de8:	000d      	movs	r5, r1
     dea:	f7ff f9ff 	bl	1ec <attMsgAlloc>
     dee:	1e03      	subs	r3, r0, #0
     df0:	d00a      	beq.n	e08 <AttcExecuteWriteReq+0x26>
     df2:	2202      	movs	r2, #2
     df4:	2100      	movs	r1, #0
     df6:	8002      	strh	r2, [r0, #0]
     df8:	3216      	adds	r2, #22
     dfa:	7202      	strb	r2, [r0, #8]
     dfc:	7245      	strb	r5, [r0, #9]
     dfe:	3a0c      	subs	r2, #12
     e00:	9100      	str	r1, [sp, #0]
     e02:	0020      	movs	r0, r4
     e04:	f7ff fdb6 	bl	974 <attcSendMsg>
     e08:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
	...

00000e0c <attsIndCcbByConnId>:
     e0c:	b510      	push	{r4, lr}
     e0e:	0004      	movs	r4, r0
     e10:	f002 f826 	bl	2e60 <DmConnInUse>
     e14:	2800      	cmp	r0, #0
     e16:	d004      	beq.n	e22 <attsIndCcbByConnId+0x16>
     e18:	232c      	movs	r3, #44	; 0x2c
     e1a:	1e60      	subs	r0, r4, #1
     e1c:	4358      	muls	r0, r3
     e1e:	4b01      	ldr	r3, [pc, #4]	; (e24 <attsIndCcbByConnId+0x18>)
     e20:	1818      	adds	r0, r3, r0
     e22:	bd10      	pop	{r4, pc}
     e24:	10001424 	.word	0x10001424

00000e28 <attsExecCallback>:
     e28:	b507      	push	{r0, r1, r2, lr}
     e2a:	0013      	movs	r3, r2
     e2c:	2200      	movs	r2, #0
     e2e:	9200      	str	r2, [sp, #0]
     e30:	000a      	movs	r2, r1
     e32:	210f      	movs	r1, #15
     e34:	f7ff f9b2 	bl	19c <attExecCallback>
     e38:	bd07      	pop	{r0, r1, r2, pc}

00000e3a <attsIndNtfCallback>:
     e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e3c:	000c      	movs	r4, r1
     e3e:	8ac9      	ldrh	r1, [r1, #22]
     e40:	0006      	movs	r6, r0
     e42:	0017      	movs	r7, r2
     e44:	2900      	cmp	r1, #0
     e46:	d003      	beq.n	e50 <attsIndNtfCallback+0x16>
     e48:	f7ff ffee 	bl	e28 <attsExecCallback>
     e4c:	2300      	movs	r3, #0
     e4e:	82e3      	strh	r3, [r4, #22]
     e50:	0025      	movs	r5, r4
     e52:	342c      	adds	r4, #44	; 0x2c
     e54:	3518      	adds	r5, #24
     e56:	8829      	ldrh	r1, [r5, #0]
     e58:	2900      	cmp	r1, #0
     e5a:	d005      	beq.n	e68 <attsIndNtfCallback+0x2e>
     e5c:	003a      	movs	r2, r7
     e5e:	0030      	movs	r0, r6
     e60:	f7ff ffe2 	bl	e28 <attsExecCallback>
     e64:	2300      	movs	r3, #0
     e66:	802b      	strh	r3, [r5, #0]
     e68:	3502      	adds	r5, #2
     e6a:	42a5      	cmp	r5, r4
     e6c:	d1f3      	bne.n	e56 <attsIndNtfCallback+0x1c>
     e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000e70 <attsIndCtrlCback>:
     e70:	b510      	push	{r4, lr}
     e72:	0004      	movs	r4, r0
     e74:	7800      	ldrb	r0, [r0, #0]
     e76:	f7ff ffc9 	bl	e0c <attsIndCcbByConnId>
     e7a:	1e01      	subs	r1, r0, #0
     e7c:	d003      	beq.n	e86 <attsIndCtrlCback+0x16>
     e7e:	7820      	ldrb	r0, [r4, #0]
     e80:	2200      	movs	r2, #0
     e82:	f7ff ffda 	bl	e3a <attsIndNtfCallback>
     e86:	bd10      	pop	{r4, pc}

00000e88 <attsIndMsgCback>:
     e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e8a:	0005      	movs	r5, r0
     e8c:	7800      	ldrb	r0, [r0, #0]
     e8e:	f7ff ffbd 	bl	e0c <attsIndCcbByConnId>
     e92:	78ab      	ldrb	r3, [r5, #2]
     e94:	1e04      	subs	r4, r0, #0
     e96:	d102      	bne.n	e9e <attsIndMsgCback+0x16>
     e98:	2b21      	cmp	r3, #33	; 0x21
     e9a:	d165      	bne.n	f68 <attsIndMsgCback+0xe0>
     e9c:	e020      	b.n	ee0 <attsIndMsgCback+0x58>
     e9e:	2b21      	cmp	r3, #33	; 0x21
     ea0:	d122      	bne.n	ee8 <attsIndMsgCback+0x60>
     ea2:	686b      	ldr	r3, [r5, #4]
     ea4:	7a1a      	ldrb	r2, [r3, #8]
     ea6:	2a1d      	cmp	r2, #29
     ea8:	d103      	bne.n	eb2 <attsIndMsgCback+0x2a>
     eaa:	8ac2      	ldrh	r2, [r0, #22]
     eac:	2a00      	cmp	r2, #0
     eae:	d112      	bne.n	ed6 <attsIndMsgCback+0x4e>
     eb0:	e02b      	b.n	f0a <attsIndMsgCback+0x82>
     eb2:	0001      	movs	r1, r0
     eb4:	0006      	movs	r6, r0
     eb6:	2200      	movs	r2, #0
     eb8:	3118      	adds	r1, #24
     eba:	362c      	adds	r6, #44	; 0x2c
     ebc:	8808      	ldrh	r0, [r1, #0]
     ebe:	2800      	cmp	r0, #0
     ec0:	d004      	beq.n	ecc <attsIndMsgCback+0x44>
     ec2:	885f      	ldrh	r7, [r3, #2]
     ec4:	4287      	cmp	r7, r0
     ec6:	d006      	beq.n	ed6 <attsIndMsgCback+0x4e>
     ec8:	3201      	adds	r2, #1
     eca:	b2d2      	uxtb	r2, r2
     ecc:	3102      	adds	r1, #2
     ece:	42b1      	cmp	r1, r6
     ed0:	d1f4      	bne.n	ebc <attsIndMsgCback+0x34>
     ed2:	2a09      	cmp	r2, #9
     ed4:	d92b      	bls.n	f2e <attsIndMsgCback+0xa6>
     ed6:	8859      	ldrh	r1, [r3, #2]
     ed8:	7828      	ldrb	r0, [r5, #0]
     eda:	2272      	movs	r2, #114	; 0x72
     edc:	f7ff ffa4 	bl	e28 <attsExecCallback>
     ee0:	6868      	ldr	r0, [r5, #4]
     ee2:	f009 ffb3 	bl	ae4c <WsfMsgFree>
     ee6:	e03f      	b.n	f68 <attsIndMsgCback+0xe0>
     ee8:	2b22      	cmp	r3, #34	; 0x22
     eea:	d13d      	bne.n	f68 <attsIndMsgCback+0xe0>
     eec:	8a83      	ldrh	r3, [r0, #20]
     eee:	2b00      	cmp	r3, #0
     ef0:	d03a      	beq.n	f68 <attsIndMsgCback+0xe0>
     ef2:	2600      	movs	r6, #0
     ef4:	8286      	strh	r6, [r0, #20]
     ef6:	8ac1      	ldrh	r1, [r0, #22]
     ef8:	2271      	movs	r2, #113	; 0x71
     efa:	7828      	ldrb	r0, [r5, #0]
     efc:	f7ff ff94 	bl	e28 <attsExecCallback>
     f00:	2201      	movs	r2, #1
     f02:	6923      	ldr	r3, [r4, #16]
     f04:	82e6      	strh	r6, [r4, #22]
     f06:	77da      	strb	r2, [r3, #31]
     f08:	e02e      	b.n	f68 <attsIndMsgCback+0xe0>
     f0a:	6901      	ldr	r1, [r0, #16]
     f0c:	881a      	ldrh	r2, [r3, #0]
     f0e:	8b09      	ldrh	r1, [r1, #24]
     f10:	2004      	movs	r0, #4
     f12:	885d      	ldrh	r5, [r3, #2]
     f14:	f002 fe72 	bl	3bfc <L2cDataReq>
     f18:	2322      	movs	r3, #34	; 0x22
     f1a:	7323      	strb	r3, [r4, #12]
     f1c:	4b13      	ldr	r3, [pc, #76]	; (f6c <attsIndMsgCback+0xe4>)
     f1e:	82e5      	strh	r5, [r4, #22]
     f20:	681b      	ldr	r3, [r3, #0]
     f22:	82a5      	strh	r5, [r4, #20]
     f24:	7999      	ldrb	r1, [r3, #6]
     f26:	0020      	movs	r0, r4
     f28:	f00a f932 	bl	b190 <WsfTimerStartSec>
     f2c:	e01c      	b.n	f68 <attsIndMsgCback+0xe0>
     f2e:	6921      	ldr	r1, [r4, #16]
     f30:	881a      	ldrh	r2, [r3, #0]
     f32:	8b09      	ldrh	r1, [r1, #24]
     f34:	2004      	movs	r0, #4
     f36:	882e      	ldrh	r6, [r5, #0]
     f38:	885d      	ldrh	r5, [r3, #2]
     f3a:	f002 fe5f 	bl	3bfc <L2cDataReq>
     f3e:	6923      	ldr	r3, [r4, #16]
     f40:	7f9a      	ldrb	r2, [r3, #30]
     f42:	2300      	movs	r3, #0
     f44:	2a00      	cmp	r2, #0
     f46:	d107      	bne.n	f58 <attsIndMsgCback+0xd0>
     f48:	b2f0      	uxtb	r0, r6
     f4a:	0029      	movs	r1, r5
     f4c:	f7ff ff6c 	bl	e28 <attsExecCallback>
     f50:	e00a      	b.n	f68 <attsIndMsgCback+0xe0>
     f52:	3301      	adds	r3, #1
     f54:	2b0a      	cmp	r3, #10
     f56:	d007      	beq.n	f68 <attsIndMsgCback+0xe0>
     f58:	005a      	lsls	r2, r3, #1
     f5a:	18a2      	adds	r2, r4, r2
     f5c:	8b12      	ldrh	r2, [r2, #24]
     f5e:	2a00      	cmp	r2, #0
     f60:	d1f7      	bne.n	f52 <attsIndMsgCback+0xca>
     f62:	330c      	adds	r3, #12
     f64:	005b      	lsls	r3, r3, #1
     f66:	531d      	strh	r5, [r3, r4]
     f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f6a:	46c0      	nop			; (mov r8, r8)
     f6c:	10001088 	.word	0x10001088

00000f70 <attsHandleValueIndNtf>:
     f70:	b5f0      	push	{r4, r5, r6, r7, lr}
     f72:	0006      	movs	r6, r0
     f74:	b085      	sub	sp, #20
     f76:	9301      	str	r3, [sp, #4]
     f78:	ab0a      	add	r3, sp, #40	; 0x28
     f7a:	781b      	ldrb	r3, [r3, #0]
     f7c:	000d      	movs	r5, r1
     f7e:	9303      	str	r3, [sp, #12]
     f80:	ab0b      	add	r3, sp, #44	; 0x2c
     f82:	781b      	ldrb	r3, [r3, #0]
     f84:	0017      	movs	r7, r2
     f86:	9302      	str	r3, [sp, #8]
     f88:	f009 f87a 	bl	a080 <WsfTaskLock>
     f8c:	0030      	movs	r0, r6
     f8e:	f7ff ff3d 	bl	e0c <attsIndCcbByConnId>
     f92:	2800      	cmp	r0, #0
     f94:	d004      	beq.n	fa0 <attsHandleValueIndNtf+0x30>
     f96:	6903      	ldr	r3, [r0, #16]
     f98:	8b5a      	ldrh	r2, [r3, #26]
     f9a:	9200      	str	r2, [sp, #0]
     f9c:	7fdc      	ldrb	r4, [r3, #31]
     f9e:	e001      	b.n	fa4 <attsHandleValueIndNtf+0x34>
     fa0:	0004      	movs	r4, r0
     fa2:	9000      	str	r0, [sp, #0]
     fa4:	f009 f872 	bl	a08c <WsfTaskUnlock>
     fa8:	9b00      	ldr	r3, [sp, #0]
     faa:	2b00      	cmp	r3, #0
     fac:	d040      	beq.n	1030 <attsHandleValueIndNtf+0xc0>
     fae:	2c00      	cmp	r4, #0
     fb0:	d139      	bne.n	1026 <attsHandleValueIndNtf+0xb6>
     fb2:	9a00      	ldr	r2, [sp, #0]
     fb4:	1cbb      	adds	r3, r7, #2
     fb6:	4293      	cmp	r3, r2
     fb8:	da33      	bge.n	1022 <attsHandleValueIndNtf+0xb2>
     fba:	2008      	movs	r0, #8
     fbc:	f009 ff2f 	bl	ae1e <WsfMsgAlloc>
     fc0:	1e04      	subs	r4, r0, #0
     fc2:	d035      	beq.n	1030 <attsHandleValueIndNtf+0xc0>
     fc4:	2321      	movs	r3, #33	; 0x21
     fc6:	7083      	strb	r3, [r0, #2]
     fc8:	9b02      	ldr	r3, [sp, #8]
     fca:	8006      	strh	r6, [r0, #0]
     fcc:	2b00      	cmp	r3, #0
     fce:	d003      	beq.n	fd8 <attsHandleValueIndNtf+0x68>
     fd0:	9b01      	ldr	r3, [sp, #4]
     fd2:	3b0b      	subs	r3, #11
     fd4:	6043      	str	r3, [r0, #4]
     fd6:	e005      	b.n	fe4 <attsHandleValueIndNtf+0x74>
     fd8:	0038      	movs	r0, r7
     fda:	300b      	adds	r0, #11
     fdc:	b280      	uxth	r0, r0
     fde:	f7ff f905 	bl	1ec <attMsgAlloc>
     fe2:	6060      	str	r0, [r4, #4]
     fe4:	6860      	ldr	r0, [r4, #4]
     fe6:	2800      	cmp	r0, #0
     fe8:	d017      	beq.n	101a <attsHandleValueIndNtf+0xaa>
     fea:	1cfb      	adds	r3, r7, #3
     fec:	8003      	strh	r3, [r0, #0]
     fee:	466b      	mov	r3, sp
     ff0:	7b1b      	ldrb	r3, [r3, #12]
     ff2:	8045      	strh	r5, [r0, #2]
     ff4:	7203      	strb	r3, [r0, #8]
     ff6:	9b02      	ldr	r3, [sp, #8]
     ff8:	7245      	strb	r5, [r0, #9]
     ffa:	0a2d      	lsrs	r5, r5, #8
     ffc:	7285      	strb	r5, [r0, #10]
     ffe:	2b00      	cmp	r3, #0
    1000:	d104      	bne.n	100c <attsHandleValueIndNtf+0x9c>
    1002:	300b      	adds	r0, #11
    1004:	003a      	movs	r2, r7
    1006:	9901      	ldr	r1, [sp, #4]
    1008:	f00e fda1 	bl	fb4e <memcpy>
    100c:	4b0d      	ldr	r3, [pc, #52]	; (1044 <attsHandleValueIndNtf+0xd4>)
    100e:	0021      	movs	r1, r4
    1010:	33ff      	adds	r3, #255	; 0xff
    1012:	7c58      	ldrb	r0, [r3, #17]
    1014:	f009 ff27 	bl	ae66 <WsfMsgSend>
    1018:	e011      	b.n	103e <attsHandleValueIndNtf+0xce>
    101a:	0020      	movs	r0, r4
    101c:	f009 ff16 	bl	ae4c <WsfMsgFree>
    1020:	e006      	b.n	1030 <attsHandleValueIndNtf+0xc0>
    1022:	2277      	movs	r2, #119	; 0x77
    1024:	e000      	b.n	1028 <attsHandleValueIndNtf+0xb8>
    1026:	2271      	movs	r2, #113	; 0x71
    1028:	0029      	movs	r1, r5
    102a:	0030      	movs	r0, r6
    102c:	f7ff fefc 	bl	e28 <attsExecCallback>
    1030:	9b02      	ldr	r3, [sp, #8]
    1032:	2b00      	cmp	r3, #0
    1034:	d003      	beq.n	103e <attsHandleValueIndNtf+0xce>
    1036:	9903      	ldr	r1, [sp, #12]
    1038:	9801      	ldr	r0, [sp, #4]
    103a:	f7ff f942 	bl	2c2 <AttMsgFree>
    103e:	b005      	add	sp, #20
    1040:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1042:	46c0      	nop			; (mov r8, r8)
    1044:	1000114c 	.word	0x1000114c

00001048 <attsIndConnCback>:
    1048:	b570      	push	{r4, r5, r6, lr}
    104a:	788b      	ldrb	r3, [r1, #2]
    104c:	0006      	movs	r6, r0
    104e:	2b28      	cmp	r3, #40	; 0x28
    1050:	d11b      	bne.n	108a <attsIndConnCback+0x42>
    1052:	78cb      	ldrb	r3, [r1, #3]
    1054:	001d      	movs	r5, r3
    1056:	3520      	adds	r5, #32
    1058:	b2ed      	uxtb	r5, r5
    105a:	2b00      	cmp	r3, #0
    105c:	d102      	bne.n	1064 <attsIndConnCback+0x1c>
    105e:	7a0d      	ldrb	r5, [r1, #8]
    1060:	3520      	adds	r5, #32
    1062:	b2ed      	uxtb	r5, r5
    1064:	232c      	movs	r3, #44	; 0x2c
    1066:	7f34      	ldrb	r4, [r6, #28]
    1068:	3c01      	subs	r4, #1
    106a:	435c      	muls	r4, r3
    106c:	4b07      	ldr	r3, [pc, #28]	; (108c <attsIndConnCback+0x44>)
    106e:	191c      	adds	r4, r3, r4
    1070:	8aa3      	ldrh	r3, [r4, #20]
    1072:	2b00      	cmp	r3, #0
    1074:	d004      	beq.n	1080 <attsIndConnCback+0x38>
    1076:	0020      	movs	r0, r4
    1078:	f00a f8b0 	bl	b1dc <WsfTimerStop>
    107c:	2300      	movs	r3, #0
    107e:	82a3      	strh	r3, [r4, #20]
    1080:	7f30      	ldrb	r0, [r6, #28]
    1082:	002a      	movs	r2, r5
    1084:	0021      	movs	r1, r4
    1086:	f7ff fed8 	bl	e3a <attsIndNtfCallback>
    108a:	bd70      	pop	{r4, r5, r6, pc}
    108c:	10001424 	.word	0x10001424

00001090 <attsProcValueCnf>:
    1090:	b570      	push	{r4, r5, r6, lr}
    1092:	0006      	movs	r6, r0
    1094:	7f00      	ldrb	r0, [r0, #28]
    1096:	f7ff feb9 	bl	e0c <attsIndCcbByConnId>
    109a:	1e04      	subs	r4, r0, #0
    109c:	d00f      	beq.n	10be <attsProcValueCnf+0x2e>
    109e:	8a83      	ldrh	r3, [r0, #20]
    10a0:	2b00      	cmp	r3, #0
    10a2:	d00c      	beq.n	10be <attsProcValueCnf+0x2e>
    10a4:	2300      	movs	r3, #0
    10a6:	8283      	strh	r3, [r0, #20]
    10a8:	f00a f898 	bl	b1dc <WsfTimerStop>
    10ac:	7fb5      	ldrb	r5, [r6, #30]
    10ae:	2d00      	cmp	r5, #0
    10b0:	d105      	bne.n	10be <attsProcValueCnf+0x2e>
    10b2:	8ae1      	ldrh	r1, [r4, #22]
    10b4:	7f30      	ldrb	r0, [r6, #28]
    10b6:	002a      	movs	r2, r5
    10b8:	f7ff feb6 	bl	e28 <attsExecCallback>
    10bc:	82e5      	strh	r5, [r4, #22]
    10be:	bd70      	pop	{r4, r5, r6, pc}

000010c0 <AttsIndInit>:
    10c0:	490a      	ldr	r1, [pc, #40]	; (10ec <AttsIndInit+0x2c>)
    10c2:	b510      	push	{r4, lr}
    10c4:	000b      	movs	r3, r1
    10c6:	33ff      	adds	r3, #255	; 0xff
    10c8:	7c5c      	ldrb	r4, [r3, #17]
    10ca:	2300      	movs	r3, #0
    10cc:	4a08      	ldr	r2, [pc, #32]	; (10f0 <AttsIndInit+0x30>)
    10ce:	3208      	adds	r2, #8
    10d0:	0158      	lsls	r0, r3, #5
    10d2:	1808      	adds	r0, r1, r0
    10d4:	3301      	adds	r3, #1
    10d6:	6090      	str	r0, [r2, #8]
    10d8:	7014      	strb	r4, [r2, #0]
    10da:	8053      	strh	r3, [r2, #2]
    10dc:	322c      	adds	r2, #44	; 0x2c
    10de:	2b08      	cmp	r3, #8
    10e0:	d1f6      	bne.n	10d0 <AttsIndInit+0x10>
    10e2:	4a04      	ldr	r2, [pc, #16]	; (10f4 <AttsIndInit+0x34>)
    10e4:	4b04      	ldr	r3, [pc, #16]	; (10f8 <AttsIndInit+0x38>)
    10e6:	609a      	str	r2, [r3, #8]
    10e8:	bd10      	pop	{r4, pc}
    10ea:	46c0      	nop			; (mov r8, r8)
    10ec:	1000114c 	.word	0x1000114c
    10f0:	10001424 	.word	0x10001424
    10f4:	000109bc 	.word	0x000109bc
    10f8:	10001584 	.word	0x10001584

000010fc <AttsHandleValueInd>:
    10fc:	b513      	push	{r0, r1, r4, lr}
    10fe:	2400      	movs	r4, #0
    1100:	9401      	str	r4, [sp, #4]
    1102:	341d      	adds	r4, #29
    1104:	9400      	str	r4, [sp, #0]
    1106:	f7ff ff33 	bl	f70 <attsHandleValueIndNtf>
    110a:	bd13      	pop	{r0, r1, r4, pc}

0000110c <AttsHandleValueNtf>:
    110c:	b513      	push	{r0, r1, r4, lr}
    110e:	2400      	movs	r4, #0
    1110:	9401      	str	r4, [sp, #4]
    1112:	341b      	adds	r4, #27
    1114:	9400      	str	r4, [sp, #0]
    1116:	f7ff ff2b 	bl	f70 <attsHandleValueIndNtf>
    111a:	bd13      	pop	{r0, r1, r4, pc}

0000111c <AttsHandleValueIndZeroCpy>:
    111c:	b513      	push	{r0, r1, r4, lr}
    111e:	2401      	movs	r4, #1
    1120:	9401      	str	r4, [sp, #4]
    1122:	341c      	adds	r4, #28
    1124:	9400      	str	r4, [sp, #0]
    1126:	f7ff ff23 	bl	f70 <attsHandleValueIndNtf>
    112a:	bd13      	pop	{r0, r1, r4, pc}

0000112c <AttsHandleValueNtfZeroCpy>:
    112c:	b513      	push	{r0, r1, r4, lr}
    112e:	2401      	movs	r4, #1
    1130:	9401      	str	r4, [sp, #4]
    1132:	341a      	adds	r4, #26
    1134:	9400      	str	r4, [sp, #0]
    1136:	f7ff ff1b 	bl	f70 <attsHandleValueIndNtf>
    113a:	bd13      	pop	{r0, r1, r4, pc}

0000113c <attsL2cCtrlCback>:
    113c:	b510      	push	{r4, lr}
    113e:	4b02      	ldr	r3, [pc, #8]	; (1148 <attsL2cCtrlCback+0xc>)
    1140:	689b      	ldr	r3, [r3, #8]
    1142:	685b      	ldr	r3, [r3, #4]
    1144:	4798      	blx	r3
    1146:	bd10      	pop	{r4, pc}
    1148:	10001584 	.word	0x10001584

0000114c <attsMsgCback>:
    114c:	b510      	push	{r4, lr}
    114e:	7882      	ldrb	r2, [r0, #2]
    1150:	2a20      	cmp	r2, #32
    1152:	d105      	bne.n	1160 <attsMsgCback+0x14>
    1154:	7800      	ldrb	r0, [r0, #0]
    1156:	2200      	movs	r2, #0
    1158:	2104      	movs	r1, #4
    115a:	f001 fecf 	bl	2efc <DmConnSetIdle>
    115e:	e007      	b.n	1170 <attsMsgCback+0x24>
    1160:	4b04      	ldr	r3, [pc, #16]	; (1174 <attsMsgCback+0x28>)
    1162:	2a22      	cmp	r2, #34	; 0x22
    1164:	d802      	bhi.n	116c <attsMsgCback+0x20>
    1166:	689b      	ldr	r3, [r3, #8]
    1168:	689b      	ldr	r3, [r3, #8]
    116a:	e000      	b.n	116e <attsMsgCback+0x22>
    116c:	68db      	ldr	r3, [r3, #12]
    116e:	4798      	blx	r3
    1170:	bd10      	pop	{r4, pc}
    1172:	46c0      	nop			; (mov r8, r8)
    1174:	10001584 	.word	0x10001584

00001178 <attsErrRsp>:
    1178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    117a:	0005      	movs	r5, r0
    117c:	200d      	movs	r0, #13
    117e:	001e      	movs	r6, r3
    1180:	000f      	movs	r7, r1
    1182:	0014      	movs	r4, r2
    1184:	f7ff f832 	bl	1ec <attMsgAlloc>
    1188:	1e03      	subs	r3, r0, #0
    118a:	d00b      	beq.n	11a4 <attsErrRsp+0x2c>
    118c:	2201      	movs	r2, #1
    118e:	7284      	strb	r4, [r0, #10]
    1190:	0a24      	lsrs	r4, r4, #8
    1192:	7202      	strb	r2, [r0, #8]
    1194:	7247      	strb	r7, [r0, #9]
    1196:	72c4      	strb	r4, [r0, #11]
    1198:	7306      	strb	r6, [r0, #12]
    119a:	3204      	adds	r2, #4
    119c:	0029      	movs	r1, r5
    119e:	2004      	movs	r0, #4
    11a0:	f002 fd2c 	bl	3bfc <L2cDataReq>
    11a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000011a6 <attsDataCback>:
    11a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11a8:	0004      	movs	r4, r0
    11aa:	000d      	movs	r5, r1
    11ac:	0016      	movs	r6, r2
    11ae:	f7fe ffd1 	bl	154 <attCcbByHandle>
    11b2:	2800      	cmp	r0, #0
    11b4:	d029      	beq.n	120a <attsDataCback+0x64>
    11b6:	7a31      	ldrb	r1, [r6, #8]
    11b8:	2912      	cmp	r1, #18
    11ba:	d903      	bls.n	11c4 <attsDataCback+0x1e>
    11bc:	000b      	movs	r3, r1
    11be:	3b16      	subs	r3, #22
    11c0:	2b08      	cmp	r3, #8
    11c2:	d801      	bhi.n	11c8 <attsDataCback+0x22>
    11c4:	084b      	lsrs	r3, r1, #1
    11c6:	e007      	b.n	11d8 <attsDataCback+0x32>
    11c8:	230a      	movs	r3, #10
    11ca:	2952      	cmp	r1, #82	; 0x52
    11cc:	d004      	beq.n	11d8 <attsDataCback+0x32>
    11ce:	000b      	movs	r3, r1
    11d0:	3bd2      	subs	r3, #210	; 0xd2
    11d2:	425a      	negs	r2, r3
    11d4:	4153      	adcs	r3, r2
    11d6:	011b      	lsls	r3, r3, #4
    11d8:	4a0c      	ldr	r2, [pc, #48]	; (120c <attsDataCback+0x66>)
    11da:	009f      	lsls	r7, r3, #2
    11dc:	58bf      	ldr	r7, [r7, r2]
    11de:	2f00      	cmp	r7, #0
    11e0:	d008      	beq.n	11f4 <attsDataCback+0x4e>
    11e2:	4a0b      	ldr	r2, [pc, #44]	; (1210 <attsDataCback+0x6a>)
    11e4:	5cd2      	ldrb	r2, [r2, r3]
    11e6:	2304      	movs	r3, #4
    11e8:	42aa      	cmp	r2, r5
    11ea:	d804      	bhi.n	11f6 <attsDataCback+0x50>
    11ec:	0032      	movs	r2, r6
    11ee:	0029      	movs	r1, r5
    11f0:	47b8      	blx	r7
    11f2:	e00a      	b.n	120a <attsDataCback+0x64>
    11f4:	2306      	movs	r3, #6
    11f6:	2902      	cmp	r1, #2
    11f8:	d007      	beq.n	120a <attsDataCback+0x64>
    11fa:	291e      	cmp	r1, #30
    11fc:	d005      	beq.n	120a <attsDataCback+0x64>
    11fe:	2240      	movs	r2, #64	; 0x40
    1200:	400a      	ands	r2, r1
    1202:	d102      	bne.n	120a <attsDataCback+0x64>
    1204:	0020      	movs	r0, r4
    1206:	f7ff ffb7 	bl	1178 <attsErrRsp>
    120a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    120c:	10001010 	.word	0x10001010
    1210:	000109cc 	.word	0x000109cc

00001214 <attsClearPrepWrites>:
    1214:	b510      	push	{r4, lr}
    1216:	0004      	movs	r4, r0
    1218:	0020      	movs	r0, r4
    121a:	f009 fe8b 	bl	af34 <WsfQueueDeq>
    121e:	2800      	cmp	r0, #0
    1220:	d002      	beq.n	1228 <attsClearPrepWrites+0x14>
    1222:	f009 fdad 	bl	ad80 <WsfBufFree>
    1226:	e7f7      	b.n	1218 <attsClearPrepWrites+0x4>
    1228:	bd10      	pop	{r4, pc}

0000122a <attsConnCback>:
    122a:	b570      	push	{r4, r5, r6, lr}
    122c:	788b      	ldrb	r3, [r1, #2]
    122e:	0004      	movs	r4, r0
    1230:	000d      	movs	r5, r1
    1232:	2b28      	cmp	r3, #40	; 0x28
    1234:	d10a      	bne.n	124c <attsConnCback+0x22>
    1236:	f7ff ffed 	bl	1214 <attsClearPrepWrites>
    123a:	7f20      	ldrb	r0, [r4, #28]
    123c:	f001 fe7a 	bl	2f34 <DmConnCheckIdle>
    1240:	0743      	lsls	r3, r0, #29
    1242:	d503      	bpl.n	124c <attsConnCback+0x22>
    1244:	0020      	movs	r0, r4
    1246:	3008      	adds	r0, #8
    1248:	f009 ffc8 	bl	b1dc <WsfTimerStop>
    124c:	4b03      	ldr	r3, [pc, #12]	; (125c <attsConnCback+0x32>)
    124e:	0029      	movs	r1, r5
    1250:	689b      	ldr	r3, [r3, #8]
    1252:	0020      	movs	r0, r4
    1254:	68db      	ldr	r3, [r3, #12]
    1256:	4798      	blx	r3
    1258:	bd70      	pop	{r4, r5, r6, pc}
    125a:	46c0      	nop			; (mov r8, r8)
    125c:	10001584 	.word	0x10001584

00001260 <attsDiscBusy>:
    1260:	b570      	push	{r4, r5, r6, lr}
    1262:	4d0d      	ldr	r5, [pc, #52]	; (1298 <attsDiscBusy+0x38>)
    1264:	0004      	movs	r4, r0
    1266:	682b      	ldr	r3, [r5, #0]
    1268:	681b      	ldr	r3, [r3, #0]
    126a:	2b00      	cmp	r3, #0
    126c:	d012      	beq.n	1294 <attsDiscBusy+0x34>
    126e:	7f00      	ldrb	r0, [r0, #28]
    1270:	2104      	movs	r1, #4
    1272:	2201      	movs	r2, #1
    1274:	f001 fe42 	bl	2efc <DmConnSetIdle>
    1278:	4b08      	ldr	r3, [pc, #32]	; (129c <attsDiscBusy+0x3c>)
    127a:	0020      	movs	r0, r4
    127c:	33ff      	adds	r3, #255	; 0xff
    127e:	7c5b      	ldrb	r3, [r3, #17]
    1280:	3008      	adds	r0, #8
    1282:	7423      	strb	r3, [r4, #16]
    1284:	2320      	movs	r3, #32
    1286:	7523      	strb	r3, [r4, #20]
    1288:	7f23      	ldrb	r3, [r4, #28]
    128a:	8263      	strh	r3, [r4, #18]
    128c:	682b      	ldr	r3, [r5, #0]
    128e:	6819      	ldr	r1, [r3, #0]
    1290:	f009 ff7e 	bl	b190 <WsfTimerStartSec>
    1294:	bd70      	pop	{r4, r5, r6, pc}
    1296:	46c0      	nop			; (mov r8, r8)
    1298:	10001088 	.word	0x10001088
    129c:	1000114c 	.word	0x1000114c

000012a0 <AttsInit>:
    12a0:	2200      	movs	r2, #0
    12a2:	4b06      	ldr	r3, [pc, #24]	; (12bc <AttsInit+0x1c>)
    12a4:	601a      	str	r2, [r3, #0]
    12a6:	605a      	str	r2, [r3, #4]
    12a8:	4a05      	ldr	r2, [pc, #20]	; (12c0 <AttsInit+0x20>)
    12aa:	609a      	str	r2, [r3, #8]
    12ac:	4a05      	ldr	r2, [pc, #20]	; (12c4 <AttsInit+0x24>)
    12ae:	60da      	str	r2, [r3, #12]
    12b0:	4a05      	ldr	r2, [pc, #20]	; (12c8 <AttsInit+0x28>)
    12b2:	4b06      	ldr	r3, [pc, #24]	; (12cc <AttsInit+0x2c>)
    12b4:	3214      	adds	r2, #20
    12b6:	33fc      	adds	r3, #252	; 0xfc
    12b8:	609a      	str	r2, [r3, #8]
    12ba:	4770      	bx	lr
    12bc:	10001584 	.word	0x10001584
    12c0:	00010934 	.word	0x00010934
    12c4:	000000e9 	.word	0x000000e9
    12c8:	000109cc 	.word	0x000109cc
    12cc:	1000114c 	.word	0x1000114c

000012d0 <AttsAuthorRegister>:
    12d0:	4b01      	ldr	r3, [pc, #4]	; (12d8 <AttsAuthorRegister+0x8>)
    12d2:	6118      	str	r0, [r3, #16]
    12d4:	4770      	bx	lr
    12d6:	46c0      	nop			; (mov r8, r8)
    12d8:	10001584 	.word	0x10001584

000012dc <AttsAddGroup>:
    12dc:	b570      	push	{r4, r5, r6, lr}
    12de:	0004      	movs	r4, r0
    12e0:	f008 fece 	bl	a080 <WsfTaskLock>
    12e4:	2200      	movs	r2, #0
    12e6:	4808      	ldr	r0, [pc, #32]	; (1308 <AttsAddGroup+0x2c>)
    12e8:	6803      	ldr	r3, [r0, #0]
    12ea:	2b00      	cmp	r3, #0
    12ec:	d003      	beq.n	12f6 <AttsAddGroup+0x1a>
    12ee:	8a25      	ldrh	r5, [r4, #16]
    12f0:	8a19      	ldrh	r1, [r3, #16]
    12f2:	428d      	cmp	r5, r1
    12f4:	d205      	bcs.n	1302 <AttsAddGroup+0x26>
    12f6:	0021      	movs	r1, r4
    12f8:	f009 fe55 	bl	afa6 <WsfQueueInsert>
    12fc:	f008 fec6 	bl	a08c <WsfTaskUnlock>
    1300:	bd70      	pop	{r4, r5, r6, pc}
    1302:	001a      	movs	r2, r3
    1304:	681b      	ldr	r3, [r3, #0]
    1306:	e7f0      	b.n	12ea <AttsAddGroup+0xe>
    1308:	10001584 	.word	0x10001584

0000130c <AttsRemoveGroup>:
    130c:	b510      	push	{r4, lr}
    130e:	0004      	movs	r4, r0
    1310:	f008 feb6 	bl	a080 <WsfTaskLock>
    1314:	2200      	movs	r2, #0
    1316:	4807      	ldr	r0, [pc, #28]	; (1334 <AttsRemoveGroup+0x28>)
    1318:	6801      	ldr	r1, [r0, #0]
    131a:	2900      	cmp	r1, #0
    131c:	d007      	beq.n	132e <AttsRemoveGroup+0x22>
    131e:	8a0b      	ldrh	r3, [r1, #16]
    1320:	42a3      	cmp	r3, r4
    1322:	d002      	beq.n	132a <AttsRemoveGroup+0x1e>
    1324:	000a      	movs	r2, r1
    1326:	6809      	ldr	r1, [r1, #0]
    1328:	e7f7      	b.n	131a <AttsRemoveGroup+0xe>
    132a:	f009 fe67 	bl	affc <WsfQueueRemove>
    132e:	f008 fead 	bl	a08c <WsfTaskUnlock>
    1332:	bd10      	pop	{r4, pc}
    1334:	10001584 	.word	0x10001584

00001338 <AttsSetAttr>:
    1338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    133a:	0004      	movs	r4, r0
    133c:	000e      	movs	r6, r1
    133e:	0017      	movs	r7, r2
    1340:	f008 fe9e 	bl	a080 <WsfTaskLock>
    1344:	0020      	movs	r0, r4
    1346:	a901      	add	r1, sp, #4
    1348:	f000 f85e 	bl	1408 <attsFindByHandle>
    134c:	250a      	movs	r5, #10
    134e:	1e04      	subs	r4, r0, #0
    1350:	d00e      	beq.n	1370 <AttsSetAttr+0x38>
    1352:	8983      	ldrh	r3, [r0, #12]
    1354:	3503      	adds	r5, #3
    1356:	42b3      	cmp	r3, r6
    1358:	d30a      	bcc.n	1370 <AttsSetAttr+0x38>
    135a:	0032      	movs	r2, r6
    135c:	0039      	movs	r1, r7
    135e:	6840      	ldr	r0, [r0, #4]
    1360:	f00e fbf5 	bl	fb4e <memcpy>
    1364:	7ba3      	ldrb	r3, [r4, #14]
    1366:	2500      	movs	r5, #0
    1368:	071b      	lsls	r3, r3, #28
    136a:	d501      	bpl.n	1370 <AttsSetAttr+0x38>
    136c:	68a3      	ldr	r3, [r4, #8]
    136e:	801e      	strh	r6, [r3, #0]
    1370:	f008 fe8c 	bl	a08c <WsfTaskUnlock>
    1374:	0028      	movs	r0, r5
    1376:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00001378 <AttsGetAttr>:
    1378:	b537      	push	{r0, r1, r2, r4, r5, lr}
    137a:	000d      	movs	r5, r1
    137c:	a901      	add	r1, sp, #4
    137e:	0014      	movs	r4, r2
    1380:	f000 f842 	bl	1408 <attsFindByHandle>
    1384:	0003      	movs	r3, r0
    1386:	200a      	movs	r0, #10
    1388:	2b00      	cmp	r3, #0
    138a:	d005      	beq.n	1398 <AttsGetAttr+0x20>
    138c:	2000      	movs	r0, #0
    138e:	689a      	ldr	r2, [r3, #8]
    1390:	685b      	ldr	r3, [r3, #4]
    1392:	8812      	ldrh	r2, [r2, #0]
    1394:	802a      	strh	r2, [r5, #0]
    1396:	6023      	str	r3, [r4, #0]
    1398:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000139a <AttsErrorTest>:
    139a:	4b02      	ldr	r3, [pc, #8]	; (13a4 <AttsErrorTest+0xa>)
    139c:	33ff      	adds	r3, #255	; 0xff
    139e:	7498      	strb	r0, [r3, #18]
    13a0:	4770      	bx	lr
    13a2:	46c0      	nop			; (mov r8, r8)
    13a4:	1000114c 	.word	0x1000114c

000013a8 <attsUuidCmp>:
    13a8:	0003      	movs	r3, r0
    13aa:	b510      	push	{r4, lr}
    13ac:	0010      	movs	r0, r2
    13ae:	7b9a      	ldrb	r2, [r3, #14]
    13b0:	07d2      	lsls	r2, r2, #31
    13b2:	d402      	bmi.n	13ba <attsUuidCmp+0x12>
    13b4:	2902      	cmp	r1, #2
    13b6:	d10b      	bne.n	13d0 <attsUuidCmp+0x28>
    13b8:	e001      	b.n	13be <attsUuidCmp+0x16>
    13ba:	2910      	cmp	r1, #16
    13bc:	d10d      	bne.n	13da <attsUuidCmp+0x32>
    13be:	000a      	movs	r2, r1
    13c0:	0001      	movs	r1, r0
    13c2:	6818      	ldr	r0, [r3, #0]
    13c4:	f00e fbb4 	bl	fb30 <memcmp>
    13c8:	4243      	negs	r3, r0
    13ca:	4158      	adcs	r0, r3
    13cc:	b2c0      	uxtb	r0, r0
    13ce:	e007      	b.n	13e0 <attsUuidCmp+0x38>
    13d0:	2910      	cmp	r1, #16
    13d2:	d102      	bne.n	13da <attsUuidCmp+0x32>
    13d4:	0001      	movs	r1, r0
    13d6:	6818      	ldr	r0, [r3, #0]
    13d8:	e000      	b.n	13dc <attsUuidCmp+0x34>
    13da:	6819      	ldr	r1, [r3, #0]
    13dc:	f7fe fece 	bl	17c <attUuidCmp16to128>
    13e0:	bd10      	pop	{r4, pc}

000013e2 <attsUuid16Cmp>:
    13e2:	b510      	push	{r4, lr}
    13e4:	2902      	cmp	r1, #2
    13e6:	d10b      	bne.n	1400 <attsUuid16Cmp+0x1e>
    13e8:	7804      	ldrb	r4, [r0, #0]
    13ea:	7811      	ldrb	r1, [r2, #0]
    13ec:	2300      	movs	r3, #0
    13ee:	428c      	cmp	r4, r1
    13f0:	d104      	bne.n	13fc <attsUuid16Cmp+0x1a>
    13f2:	7843      	ldrb	r3, [r0, #1]
    13f4:	7850      	ldrb	r0, [r2, #1]
    13f6:	1a18      	subs	r0, r3, r0
    13f8:	4243      	negs	r3, r0
    13fa:	4143      	adcs	r3, r0
    13fc:	b2d8      	uxtb	r0, r3
    13fe:	e002      	b.n	1406 <attsUuid16Cmp+0x24>
    1400:	0011      	movs	r1, r2
    1402:	f7fe febb 	bl	17c <attUuidCmp16to128>
    1406:	bd10      	pop	{r4, pc}

00001408 <attsFindByHandle>:
    1408:	b510      	push	{r4, lr}
    140a:	4b09      	ldr	r3, [pc, #36]	; (1430 <attsFindByHandle+0x28>)
    140c:	681b      	ldr	r3, [r3, #0]
    140e:	2b00      	cmp	r3, #0
    1410:	d00b      	beq.n	142a <attsFindByHandle+0x22>
    1412:	8a1a      	ldrh	r2, [r3, #16]
    1414:	4282      	cmp	r2, r0
    1416:	d8f9      	bhi.n	140c <attsFindByHandle+0x4>
    1418:	8a5c      	ldrh	r4, [r3, #18]
    141a:	4284      	cmp	r4, r0
    141c:	d3f6      	bcc.n	140c <attsFindByHandle+0x4>
    141e:	600b      	str	r3, [r1, #0]
    1420:	1a80      	subs	r0, r0, r2
    1422:	685a      	ldr	r2, [r3, #4]
    1424:	0100      	lsls	r0, r0, #4
    1426:	1810      	adds	r0, r2, r0
    1428:	e000      	b.n	142c <attsFindByHandle+0x24>
    142a:	0018      	movs	r0, r3
    142c:	bd10      	pop	{r4, pc}
    142e:	46c0      	nop			; (mov r8, r8)
    1430:	10001584 	.word	0x10001584

00001434 <attsFindInRange>:
    1434:	b530      	push	{r4, r5, lr}
    1436:	4b0b      	ldr	r3, [pc, #44]	; (1464 <attsFindInRange+0x30>)
    1438:	681b      	ldr	r3, [r3, #0]
    143a:	2b00      	cmp	r3, #0
    143c:	d006      	beq.n	144c <attsFindInRange+0x18>
    143e:	8a1c      	ldrh	r4, [r3, #16]
    1440:	42a0      	cmp	r0, r4
    1442:	d205      	bcs.n	1450 <attsFindInRange+0x1c>
    1444:	428c      	cmp	r4, r1
    1446:	d8f7      	bhi.n	1438 <attsFindInRange+0x4>
    1448:	0020      	movs	r0, r4
    144a:	e001      	b.n	1450 <attsFindInRange+0x1c>
    144c:	0018      	movs	r0, r3
    144e:	e007      	b.n	1460 <attsFindInRange+0x2c>
    1450:	8a5d      	ldrh	r5, [r3, #18]
    1452:	4285      	cmp	r5, r0
    1454:	d3f0      	bcc.n	1438 <attsFindInRange+0x4>
    1456:	685b      	ldr	r3, [r3, #4]
    1458:	1b04      	subs	r4, r0, r4
    145a:	0124      	lsls	r4, r4, #4
    145c:	191c      	adds	r4, r3, r4
    145e:	6014      	str	r4, [r2, #0]
    1460:	bd30      	pop	{r4, r5, pc}
    1462:	46c0      	nop			; (mov r8, r8)
    1464:	10001584 	.word	0x10001584

00001468 <attsPermissions>:
    1468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    146a:	0006      	movs	r6, r0
    146c:	000c      	movs	r4, r1
    146e:	0017      	movs	r7, r2
    1470:	001d      	movs	r5, r3
    1472:	4219      	tst	r1, r3
    1474:	d105      	bne.n	1482 <attsPermissions+0x1a>
    1476:	3c01      	subs	r4, #1
    1478:	4260      	negs	r0, r4
    147a:	4160      	adcs	r0, r4
    147c:	2303      	movs	r3, #3
    147e:	1a18      	subs	r0, r3, r0
    1480:	e022      	b.n	14c8 <attsPermissions+0x60>
    1482:	2910      	cmp	r1, #16
    1484:	d100      	bne.n	1488 <attsPermissions+0x20>
    1486:	091d      	lsrs	r5, r3, #4
    1488:	230e      	movs	r3, #14
    148a:	421d      	tst	r5, r3
    148c:	d101      	bne.n	1492 <attsPermissions+0x2a>
    148e:	2000      	movs	r0, #0
    1490:	e01a      	b.n	14c8 <attsPermissions+0x60>
    1492:	0030      	movs	r0, r6
    1494:	f001 fd28 	bl	2ee8 <DmConnSecLevel>
    1498:	0002      	movs	r2, r0
    149a:	072b      	lsls	r3, r5, #28
    149c:	d502      	bpl.n	14a4 <attsPermissions+0x3c>
    149e:	2005      	movs	r0, #5
    14a0:	2a00      	cmp	r2, #0
    14a2:	d011      	beq.n	14c8 <attsPermissions+0x60>
    14a4:	230a      	movs	r3, #10
    14a6:	402b      	ands	r3, r5
    14a8:	2b0a      	cmp	r3, #10
    14aa:	d102      	bne.n	14b2 <attsPermissions+0x4a>
    14ac:	2005      	movs	r0, #5
    14ae:	2a01      	cmp	r2, #1
    14b0:	d90a      	bls.n	14c8 <attsPermissions+0x60>
    14b2:	076b      	lsls	r3, r5, #29
    14b4:	d5eb      	bpl.n	148e <attsPermissions+0x26>
    14b6:	4b05      	ldr	r3, [pc, #20]	; (14cc <attsPermissions+0x64>)
    14b8:	2008      	movs	r0, #8
    14ba:	691b      	ldr	r3, [r3, #16]
    14bc:	2b00      	cmp	r3, #0
    14be:	d003      	beq.n	14c8 <attsPermissions+0x60>
    14c0:	003a      	movs	r2, r7
    14c2:	0021      	movs	r1, r4
    14c4:	0030      	movs	r0, r6
    14c6:	4798      	blx	r3
    14c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14ca:	46c0      	nop			; (mov r8, r8)
    14cc:	10001584 	.word	0x10001584

000014d0 <attsProcMtuReq>:
    14d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14d2:	7a94      	ldrb	r4, [r2, #10]
    14d4:	7a53      	ldrb	r3, [r2, #9]
    14d6:	0224      	lsls	r4, r4, #8
    14d8:	191c      	adds	r4, r3, r4
    14da:	b2a4      	uxth	r4, r4
    14dc:	0005      	movs	r5, r0
    14de:	2c16      	cmp	r4, #22
    14e0:	d800      	bhi.n	14e4 <attsProcMtuReq+0x14>
    14e2:	2417      	movs	r4, #23
    14e4:	4e13      	ldr	r6, [pc, #76]	; (1534 <attsProcMtuReq+0x64>)
    14e6:	6833      	ldr	r3, [r6, #0]
    14e8:	889f      	ldrh	r7, [r3, #4]
    14ea:	f006 fc25 	bl	7d38 <HciGetMaxRxAclLen>
    14ee:	3804      	subs	r0, #4
    14f0:	4287      	cmp	r7, r0
    14f2:	da02      	bge.n	14fa <attsProcMtuReq+0x2a>
    14f4:	6833      	ldr	r3, [r6, #0]
    14f6:	8898      	ldrh	r0, [r3, #4]
    14f8:	e003      	b.n	1502 <attsProcMtuReq+0x32>
    14fa:	f006 fc1d 	bl	7d38 <HciGetMaxRxAclLen>
    14fe:	3804      	subs	r0, #4
    1500:	b280      	uxth	r0, r0
    1502:	1c26      	adds	r6, r4, #0
    1504:	4284      	cmp	r4, r0
    1506:	d900      	bls.n	150a <attsProcMtuReq+0x3a>
    1508:	1c06      	adds	r6, r0, #0
    150a:	200b      	movs	r0, #11
    150c:	f7fe fe6e 	bl	1ec <attMsgAlloc>
    1510:	b2b6      	uxth	r6, r6
    1512:	1e03      	subs	r3, r0, #0
    1514:	d008      	beq.n	1528 <attsProcMtuReq+0x58>
    1516:	2203      	movs	r2, #3
    1518:	0a31      	lsrs	r1, r6, #8
    151a:	7202      	strb	r2, [r0, #8]
    151c:	7246      	strb	r6, [r0, #9]
    151e:	7281      	strb	r1, [r0, #10]
    1520:	8b29      	ldrh	r1, [r5, #24]
    1522:	2004      	movs	r0, #4
    1524:	f002 fb6a 	bl	3bfc <L2cDataReq>
    1528:	0032      	movs	r2, r6
    152a:	0028      	movs	r0, r5
    152c:	0021      	movs	r1, r4
    152e:	f7fe fe4b 	bl	1c8 <attSetMtu>
    1532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1534:	10001088 	.word	0x10001088

00001538 <attsProcFindInfoReq>:
    1538:	b5f0      	push	{r4, r5, r6, r7, lr}
    153a:	7a93      	ldrb	r3, [r2, #10]
    153c:	7a51      	ldrb	r1, [r2, #9]
    153e:	021b      	lsls	r3, r3, #8
    1540:	18cb      	adds	r3, r1, r3
    1542:	b087      	sub	sp, #28
    1544:	b29b      	uxth	r3, r3
    1546:	0007      	movs	r7, r0
    1548:	9301      	str	r3, [sp, #4]
    154a:	2601      	movs	r6, #1
    154c:	2b00      	cmp	r3, #0
    154e:	d03a      	beq.n	15c6 <attsProcFindInfoReq+0x8e>
    1550:	7b13      	ldrb	r3, [r2, #12]
    1552:	7ad2      	ldrb	r2, [r2, #11]
    1554:	021b      	lsls	r3, r3, #8
    1556:	18d3      	adds	r3, r2, r3
    1558:	b29b      	uxth	r3, r3
    155a:	9302      	str	r3, [sp, #8]
    155c:	9a02      	ldr	r2, [sp, #8]
    155e:	9b01      	ldr	r3, [sp, #4]
    1560:	4293      	cmp	r3, r2
    1562:	d830      	bhi.n	15c6 <attsProcFindInfoReq+0x8e>
    1564:	8b40      	ldrh	r0, [r0, #26]
    1566:	3008      	adds	r0, #8
    1568:	b280      	uxth	r0, r0
    156a:	f7fe fe3f 	bl	1ec <attMsgAlloc>
    156e:	1e05      	subs	r5, r0, #0
    1570:	d05c      	beq.n	162c <attsProcFindInfoReq+0xf4>
    1572:	002c      	movs	r4, r5
    1574:	2305      	movs	r3, #5
    1576:	340a      	adds	r4, #10
    1578:	9801      	ldr	r0, [sp, #4]
    157a:	722b      	strb	r3, [r5, #8]
    157c:	726e      	strb	r6, [r5, #9]
    157e:	9403      	str	r4, [sp, #12]
    1580:	aa05      	add	r2, sp, #20
    1582:	9902      	ldr	r1, [sp, #8]
    1584:	f7ff ff56 	bl	1434 <attsFindInRange>
    1588:	2800      	cmp	r0, #0
    158a:	d014      	beq.n	15b6 <attsProcFindInfoReq+0x7e>
    158c:	9b05      	ldr	r3, [sp, #20]
    158e:	7b9b      	ldrb	r3, [r3, #14]
    1590:	4233      	tst	r3, r6
    1592:	d02e      	beq.n	15f2 <attsProcFindInfoReq+0xba>
    1594:	9b03      	ldr	r3, [sp, #12]
    1596:	429c      	cmp	r4, r3
    1598:	d10d      	bne.n	15b6 <attsProcFindInfoReq+0x7e>
    159a:	2302      	movs	r3, #2
    159c:	726b      	strb	r3, [r5, #9]
    159e:	7020      	strb	r0, [r4, #0]
    15a0:	0a00      	lsrs	r0, r0, #8
    15a2:	7060      	strb	r0, [r4, #1]
    15a4:	0028      	movs	r0, r5
    15a6:	9b05      	ldr	r3, [sp, #20]
    15a8:	2210      	movs	r2, #16
    15aa:	6819      	ldr	r1, [r3, #0]
    15ac:	300c      	adds	r0, #12
    15ae:	002c      	movs	r4, r5
    15b0:	f00e facd 	bl	fb4e <memcpy>
    15b4:	341c      	adds	r4, #28
    15b6:	9b03      	ldr	r3, [sp, #12]
    15b8:	2600      	movs	r6, #0
    15ba:	429c      	cmp	r4, r3
    15bc:	d103      	bne.n	15c6 <attsProcFindInfoReq+0x8e>
    15be:	0028      	movs	r0, r5
    15c0:	f009 fc44 	bl	ae4c <WsfMsgFree>
    15c4:	360a      	adds	r6, #10
    15c6:	0038      	movs	r0, r7
    15c8:	f7ff fe4a 	bl	1260 <attsDiscBusy>
    15cc:	8b38      	ldrh	r0, [r7, #24]
    15ce:	2e00      	cmp	r6, #0
    15d0:	d109      	bne.n	15e6 <attsProcFindInfoReq+0xae>
    15d2:	002a      	movs	r2, r5
    15d4:	3208      	adds	r2, #8
    15d6:	1aa2      	subs	r2, r4, r2
    15d8:	0001      	movs	r1, r0
    15da:	b292      	uxth	r2, r2
    15dc:	002b      	movs	r3, r5
    15de:	2004      	movs	r0, #4
    15e0:	f002 fb0c 	bl	3bfc <L2cDataReq>
    15e4:	e024      	b.n	1630 <attsProcFindInfoReq+0xf8>
    15e6:	0033      	movs	r3, r6
    15e8:	9a01      	ldr	r2, [sp, #4]
    15ea:	2104      	movs	r1, #4
    15ec:	f7ff fdc4 	bl	1178 <attsErrRsp>
    15f0:	e01e      	b.n	1630 <attsProcFindInfoReq+0xf8>
    15f2:	8b7b      	ldrh	r3, [r7, #26]
    15f4:	1d22      	adds	r2, r4, #4
    15f6:	3308      	adds	r3, #8
    15f8:	18eb      	adds	r3, r5, r3
    15fa:	429a      	cmp	r2, r3
    15fc:	d8db      	bhi.n	15b6 <attsProcFindInfoReq+0x7e>
    15fe:	0a03      	lsrs	r3, r0, #8
    1600:	7020      	strb	r0, [r4, #0]
    1602:	7063      	strb	r3, [r4, #1]
    1604:	9b05      	ldr	r3, [sp, #20]
    1606:	681b      	ldr	r3, [r3, #0]
    1608:	781b      	ldrb	r3, [r3, #0]
    160a:	70a3      	strb	r3, [r4, #2]
    160c:	9b05      	ldr	r3, [sp, #20]
    160e:	681b      	ldr	r3, [r3, #0]
    1610:	785b      	ldrb	r3, [r3, #1]
    1612:	70e3      	strb	r3, [r4, #3]
    1614:	4b07      	ldr	r3, [pc, #28]	; (1634 <attsProcFindInfoReq+0xfc>)
    1616:	4298      	cmp	r0, r3
    1618:	d006      	beq.n	1628 <attsProcFindInfoReq+0xf0>
    161a:	3001      	adds	r0, #1
    161c:	9b02      	ldr	r3, [sp, #8]
    161e:	b280      	uxth	r0, r0
    1620:	0014      	movs	r4, r2
    1622:	4283      	cmp	r3, r0
    1624:	d2ac      	bcs.n	1580 <attsProcFindInfoReq+0x48>
    1626:	e7c6      	b.n	15b6 <attsProcFindInfoReq+0x7e>
    1628:	0014      	movs	r4, r2
    162a:	e7c4      	b.n	15b6 <attsProcFindInfoReq+0x7e>
    162c:	2611      	movs	r6, #17
    162e:	e7ca      	b.n	15c6 <attsProcFindInfoReq+0x8e>
    1630:	b007      	add	sp, #28
    1632:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1634:	0000ffff 	.word	0x0000ffff

00001638 <attsProcReadReq>:
    1638:	b5f0      	push	{r4, r5, r6, r7, lr}
    163a:	7a94      	ldrb	r4, [r2, #10]
    163c:	7a53      	ldrb	r3, [r2, #9]
    163e:	0224      	lsls	r4, r4, #8
    1640:	191c      	adds	r4, r3, r4
    1642:	b087      	sub	sp, #28
    1644:	b2a4      	uxth	r4, r4
    1646:	0006      	movs	r6, r0
    1648:	a905      	add	r1, sp, #20
    164a:	0020      	movs	r0, r4
    164c:	f7ff fedc 	bl	1408 <attsFindByHandle>
    1650:	1e05      	subs	r5, r0, #0
    1652:	d042      	beq.n	16da <attsProcReadReq+0xa2>
    1654:	7bc3      	ldrb	r3, [r0, #15]
    1656:	0022      	movs	r2, r4
    1658:	7f30      	ldrb	r0, [r6, #28]
    165a:	2101      	movs	r1, #1
    165c:	f7ff ff04 	bl	1468 <attsPermissions>
    1660:	1e03      	subs	r3, r0, #0
    1662:	d13b      	bne.n	16dc <attsProcReadReq+0xa4>
    1664:	7baa      	ldrb	r2, [r5, #14]
    1666:	0751      	lsls	r1, r2, #29
    1668:	d509      	bpl.n	167e <attsProcReadReq+0x46>
    166a:	9905      	ldr	r1, [sp, #20]
    166c:	688f      	ldr	r7, [r1, #8]
    166e:	2f00      	cmp	r7, #0
    1670:	d005      	beq.n	167e <attsProcReadReq+0x46>
    1672:	7f30      	ldrb	r0, [r6, #28]
    1674:	9500      	str	r5, [sp, #0]
    1676:	220a      	movs	r2, #10
    1678:	0021      	movs	r1, r4
    167a:	47b8      	blx	r7
    167c:	e02a      	b.n	16d4 <attsProcReadReq+0x9c>
    167e:	0693      	lsls	r3, r2, #26
    1680:	d41f      	bmi.n	16c2 <attsProcReadReq+0x8a>
    1682:	68ab      	ldr	r3, [r5, #8]
    1684:	8b74      	ldrh	r4, [r6, #26]
    1686:	881b      	ldrh	r3, [r3, #0]
    1688:	3c01      	subs	r4, #1
    168a:	429c      	cmp	r4, r3
    168c:	dd00      	ble.n	1690 <attsProcReadReq+0x58>
    168e:	001c      	movs	r4, r3
    1690:	b2a3      	uxth	r3, r4
    1692:	0018      	movs	r0, r3
    1694:	3009      	adds	r0, #9
    1696:	b280      	uxth	r0, r0
    1698:	9303      	str	r3, [sp, #12]
    169a:	f7fe fda7 	bl	1ec <attMsgAlloc>
    169e:	1e07      	subs	r7, r0, #0
    16a0:	d021      	beq.n	16e6 <attsProcReadReq+0xae>
    16a2:	230b      	movs	r3, #11
    16a4:	7203      	strb	r3, [r0, #8]
    16a6:	b2a2      	uxth	r2, r4
    16a8:	6869      	ldr	r1, [r5, #4]
    16aa:	3009      	adds	r0, #9
    16ac:	f00e fa4f 	bl	fb4e <memcpy>
    16b0:	9a03      	ldr	r2, [sp, #12]
    16b2:	8b31      	ldrh	r1, [r6, #24]
    16b4:	3201      	adds	r2, #1
    16b6:	b292      	uxth	r2, r2
    16b8:	003b      	movs	r3, r7
    16ba:	2004      	movs	r0, #4
    16bc:	f002 fa9e 	bl	3bfc <L2cDataReq>
    16c0:	e011      	b.n	16e6 <attsProcReadReq+0xae>
    16c2:	4b0a      	ldr	r3, [pc, #40]	; (16ec <attsProcReadReq+0xb4>)
    16c4:	695f      	ldr	r7, [r3, #20]
    16c6:	2f00      	cmp	r7, #0
    16c8:	d0db      	beq.n	1682 <attsProcReadReq+0x4a>
    16ca:	7f30      	ldrb	r0, [r6, #28]
    16cc:	686b      	ldr	r3, [r5, #4]
    16ce:	0022      	movs	r2, r4
    16d0:	2105      	movs	r1, #5
    16d2:	47b8      	blx	r7
    16d4:	1e03      	subs	r3, r0, #0
    16d6:	d101      	bne.n	16dc <attsProcReadReq+0xa4>
    16d8:	e7d3      	b.n	1682 <attsProcReadReq+0x4a>
    16da:	2301      	movs	r3, #1
    16dc:	8b30      	ldrh	r0, [r6, #24]
    16de:	0022      	movs	r2, r4
    16e0:	210a      	movs	r1, #10
    16e2:	f7ff fd49 	bl	1178 <attsErrRsp>
    16e6:	b007      	add	sp, #28
    16e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16ea:	46c0      	nop			; (mov r8, r8)
    16ec:	10001584 	.word	0x10001584

000016f0 <attsFindUuidInRange>:
    16f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    16f2:	0005      	movs	r5, r0
    16f4:	000f      	movs	r7, r1
    16f6:	9301      	str	r3, [sp, #4]
    16f8:	4b18      	ldr	r3, [pc, #96]	; (175c <attsFindUuidInRange+0x6c>)
    16fa:	9e08      	ldr	r6, [sp, #32]
    16fc:	681c      	ldr	r4, [r3, #0]
    16fe:	9200      	str	r2, [sp, #0]
    1700:	2c00      	cmp	r4, #0
    1702:	d012      	beq.n	172a <attsFindUuidInRange+0x3a>
    1704:	8a23      	ldrh	r3, [r4, #16]
    1706:	429d      	cmp	r5, r3
    1708:	d202      	bcs.n	1710 <attsFindUuidInRange+0x20>
    170a:	42bb      	cmp	r3, r7
    170c:	d80b      	bhi.n	1726 <attsFindUuidInRange+0x36>
    170e:	001d      	movs	r5, r3
    1710:	8a62      	ldrh	r2, [r4, #18]
    1712:	42aa      	cmp	r2, r5
    1714:	d307      	bcc.n	1726 <attsFindUuidInRange+0x36>
    1716:	1aeb      	subs	r3, r5, r3
    1718:	6862      	ldr	r2, [r4, #4]
    171a:	011b      	lsls	r3, r3, #4
    171c:	18d3      	adds	r3, r2, r3
    171e:	6033      	str	r3, [r6, #0]
    1720:	8a63      	ldrh	r3, [r4, #18]
    1722:	42ab      	cmp	r3, r5
    1724:	d203      	bcs.n	172e <attsFindUuidInRange+0x3e>
    1726:	6824      	ldr	r4, [r4, #0]
    1728:	e7ea      	b.n	1700 <attsFindUuidInRange+0x10>
    172a:	0020      	movs	r0, r4
    172c:	e014      	b.n	1758 <attsFindUuidInRange+0x68>
    172e:	42bd      	cmp	r5, r7
    1730:	d8f9      	bhi.n	1726 <attsFindUuidInRange+0x36>
    1732:	9a01      	ldr	r2, [sp, #4]
    1734:	9900      	ldr	r1, [sp, #0]
    1736:	6830      	ldr	r0, [r6, #0]
    1738:	f7ff fe36 	bl	13a8 <attsUuidCmp>
    173c:	2800      	cmp	r0, #0
    173e:	d003      	beq.n	1748 <attsFindUuidInRange+0x58>
    1740:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1742:	0028      	movs	r0, r5
    1744:	601c      	str	r4, [r3, #0]
    1746:	e007      	b.n	1758 <attsFindUuidInRange+0x68>
    1748:	4b05      	ldr	r3, [pc, #20]	; (1760 <attsFindUuidInRange+0x70>)
    174a:	429d      	cmp	r5, r3
    174c:	d0eb      	beq.n	1726 <attsFindUuidInRange+0x36>
    174e:	6833      	ldr	r3, [r6, #0]
    1750:	3501      	adds	r5, #1
    1752:	b2ad      	uxth	r5, r5
    1754:	3310      	adds	r3, #16
    1756:	e7e2      	b.n	171e <attsFindUuidInRange+0x2e>
    1758:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    175a:	46c0      	nop			; (mov r8, r8)
    175c:	10001584 	.word	0x10001584
    1760:	0000ffff 	.word	0x0000ffff

00001764 <attsFindServiceGroupEnd>:
    1764:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1766:	2300      	movs	r3, #0
    1768:	466a      	mov	r2, sp
    176a:	7013      	strb	r3, [r2, #0]
    176c:	3328      	adds	r3, #40	; 0x28
    176e:	7053      	strb	r3, [r2, #1]
    1770:	0006      	movs	r6, r0
    1772:	2202      	movs	r2, #2
    1774:	491c      	ldr	r1, [pc, #112]	; (17e8 <attsFindServiceGroupEnd+0x84>)
    1776:	a801      	add	r0, sp, #4
    1778:	f00e f9e9 	bl	fb4e <memcpy>
    177c:	4b1b      	ldr	r3, [pc, #108]	; (17ec <attsFindServiceGroupEnd+0x88>)
    177e:	429e      	cmp	r6, r3
    1780:	d101      	bne.n	1786 <attsFindServiceGroupEnd+0x22>
    1782:	481a      	ldr	r0, [pc, #104]	; (17ec <attsFindServiceGroupEnd+0x88>)
    1784:	e02e      	b.n	17e4 <attsFindServiceGroupEnd+0x80>
    1786:	4b1a      	ldr	r3, [pc, #104]	; (17f0 <attsFindServiceGroupEnd+0x8c>)
    1788:	1c74      	adds	r4, r6, #1
    178a:	681f      	ldr	r7, [r3, #0]
    178c:	b2a4      	uxth	r4, r4
    178e:	2f00      	cmp	r7, #0
    1790:	d0f7      	beq.n	1782 <attsFindServiceGroupEnd+0x1e>
    1792:	8a3d      	ldrh	r5, [r7, #16]
    1794:	1c23      	adds	r3, r4, #0
    1796:	42ac      	cmp	r4, r5
    1798:	d200      	bcs.n	179c <attsFindServiceGroupEnd+0x38>
    179a:	1c2b      	adds	r3, r5, #0
    179c:	b29c      	uxth	r4, r3
    179e:	8a7b      	ldrh	r3, [r7, #18]
    17a0:	42a3      	cmp	r3, r4
    17a2:	d31c      	bcc.n	17de <attsFindServiceGroupEnd+0x7a>
    17a4:	1b65      	subs	r5, r4, r5
    17a6:	687b      	ldr	r3, [r7, #4]
    17a8:	012d      	lsls	r5, r5, #4
    17aa:	195d      	adds	r5, r3, r5
    17ac:	8a7b      	ldrh	r3, [r7, #18]
    17ae:	42a3      	cmp	r3, r4
    17b0:	d315      	bcc.n	17de <attsFindServiceGroupEnd+0x7a>
    17b2:	466a      	mov	r2, sp
    17b4:	2102      	movs	r1, #2
    17b6:	0028      	movs	r0, r5
    17b8:	f7ff fdf6 	bl	13a8 <attsUuidCmp>
    17bc:	2800      	cmp	r0, #0
    17be:	d110      	bne.n	17e2 <attsFindServiceGroupEnd+0x7e>
    17c0:	aa01      	add	r2, sp, #4
    17c2:	2102      	movs	r1, #2
    17c4:	0028      	movs	r0, r5
    17c6:	f7ff fdef 	bl	13a8 <attsUuidCmp>
    17ca:	2800      	cmp	r0, #0
    17cc:	d109      	bne.n	17e2 <attsFindServiceGroupEnd+0x7e>
    17ce:	4b07      	ldr	r3, [pc, #28]	; (17ec <attsFindServiceGroupEnd+0x88>)
    17d0:	429c      	cmp	r4, r3
    17d2:	d0d6      	beq.n	1782 <attsFindServiceGroupEnd+0x1e>
    17d4:	1c63      	adds	r3, r4, #1
    17d6:	0026      	movs	r6, r4
    17d8:	3510      	adds	r5, #16
    17da:	b29c      	uxth	r4, r3
    17dc:	e7e6      	b.n	17ac <attsFindServiceGroupEnd+0x48>
    17de:	683f      	ldr	r7, [r7, #0]
    17e0:	e7d5      	b.n	178e <attsFindServiceGroupEnd+0x2a>
    17e2:	0030      	movs	r0, r6
    17e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    17e6:	46c0      	nop			; (mov r8, r8)
    17e8:	000109f0 	.word	0x000109f0
    17ec:	0000ffff 	.word	0x0000ffff
    17f0:	10001584 	.word	0x10001584

000017f4 <attsProcReadBlobReq>:
    17f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    17f6:	7a94      	ldrb	r4, [r2, #10]
    17f8:	7a53      	ldrb	r3, [r2, #9]
    17fa:	0224      	lsls	r4, r4, #8
    17fc:	191c      	adds	r4, r3, r4
    17fe:	b087      	sub	sp, #28
    1800:	b2a4      	uxth	r4, r4
    1802:	9002      	str	r0, [sp, #8]
    1804:	a905      	add	r1, sp, #20
    1806:	0020      	movs	r0, r4
    1808:	7ad7      	ldrb	r7, [r2, #11]
    180a:	7b16      	ldrb	r6, [r2, #12]
    180c:	f7ff fdfc 	bl	1408 <attsFindByHandle>
    1810:	1e05      	subs	r5, r0, #0
    1812:	d053      	beq.n	18bc <attsProcReadBlobReq+0xc8>
    1814:	9a02      	ldr	r2, [sp, #8]
    1816:	7bc3      	ldrb	r3, [r0, #15]
    1818:	2101      	movs	r1, #1
    181a:	7f10      	ldrb	r0, [r2, #28]
    181c:	0022      	movs	r2, r4
    181e:	f7ff fe23 	bl	1468 <attsPermissions>
    1822:	2800      	cmp	r0, #0
    1824:	d14d      	bne.n	18c2 <attsProcReadBlobReq+0xce>
    1826:	0236      	lsls	r6, r6, #8
    1828:	19f7      	adds	r7, r6, r7
    182a:	b2bb      	uxth	r3, r7
    182c:	9303      	str	r3, [sp, #12]
    182e:	68ab      	ldr	r3, [r5, #8]
    1830:	9a03      	ldr	r2, [sp, #12]
    1832:	881b      	ldrh	r3, [r3, #0]
    1834:	4293      	cmp	r3, r2
    1836:	d343      	bcc.n	18c0 <attsProcReadBlobReq+0xcc>
    1838:	7bab      	ldrb	r3, [r5, #14]
    183a:	075a      	lsls	r2, r3, #29
    183c:	d50b      	bpl.n	1856 <attsProcReadBlobReq+0x62>
    183e:	9a05      	ldr	r2, [sp, #20]
    1840:	6896      	ldr	r6, [r2, #8]
    1842:	2e00      	cmp	r6, #0
    1844:	d007      	beq.n	1856 <attsProcReadBlobReq+0x62>
    1846:	9b02      	ldr	r3, [sp, #8]
    1848:	220c      	movs	r2, #12
    184a:	7f18      	ldrb	r0, [r3, #28]
    184c:	0021      	movs	r1, r4
    184e:	9500      	str	r5, [sp, #0]
    1850:	9b03      	ldr	r3, [sp, #12]
    1852:	47b0      	blx	r6
    1854:	e02f      	b.n	18b6 <attsProcReadBlobReq+0xc2>
    1856:	069b      	lsls	r3, r3, #26
    1858:	d423      	bmi.n	18a2 <attsProcReadBlobReq+0xae>
    185a:	68ab      	ldr	r3, [r5, #8]
    185c:	9a03      	ldr	r2, [sp, #12]
    185e:	881c      	ldrh	r4, [r3, #0]
    1860:	9b02      	ldr	r3, [sp, #8]
    1862:	1aa4      	subs	r4, r4, r2
    1864:	8b5b      	ldrh	r3, [r3, #26]
    1866:	3b01      	subs	r3, #1
    1868:	429c      	cmp	r4, r3
    186a:	dd00      	ble.n	186e <attsProcReadBlobReq+0x7a>
    186c:	001c      	movs	r4, r3
    186e:	b2a6      	uxth	r6, r4
    1870:	0030      	movs	r0, r6
    1872:	3009      	adds	r0, #9
    1874:	b280      	uxth	r0, r0
    1876:	f7fe fcb9 	bl	1ec <attMsgAlloc>
    187a:	1e07      	subs	r7, r0, #0
    187c:	d029      	beq.n	18d2 <attsProcReadBlobReq+0xde>
    187e:	230d      	movs	r3, #13
    1880:	7203      	strb	r3, [r0, #8]
    1882:	6869      	ldr	r1, [r5, #4]
    1884:	9b03      	ldr	r3, [sp, #12]
    1886:	b2a2      	uxth	r2, r4
    1888:	18c9      	adds	r1, r1, r3
    188a:	3009      	adds	r0, #9
    188c:	f00e f95f 	bl	fb4e <memcpy>
    1890:	9b02      	ldr	r3, [sp, #8]
    1892:	3601      	adds	r6, #1
    1894:	8b19      	ldrh	r1, [r3, #24]
    1896:	b2b2      	uxth	r2, r6
    1898:	003b      	movs	r3, r7
    189a:	2004      	movs	r0, #4
    189c:	f002 f9ae 	bl	3bfc <L2cDataReq>
    18a0:	e017      	b.n	18d2 <attsProcReadBlobReq+0xde>
    18a2:	4b0d      	ldr	r3, [pc, #52]	; (18d8 <attsProcReadBlobReq+0xe4>)
    18a4:	695e      	ldr	r6, [r3, #20]
    18a6:	2e00      	cmp	r6, #0
    18a8:	d0d7      	beq.n	185a <attsProcReadBlobReq+0x66>
    18aa:	9b02      	ldr	r3, [sp, #8]
    18ac:	0022      	movs	r2, r4
    18ae:	7f18      	ldrb	r0, [r3, #28]
    18b0:	2105      	movs	r1, #5
    18b2:	686b      	ldr	r3, [r5, #4]
    18b4:	47b0      	blx	r6
    18b6:	2800      	cmp	r0, #0
    18b8:	d103      	bne.n	18c2 <attsProcReadBlobReq+0xce>
    18ba:	e7ce      	b.n	185a <attsProcReadBlobReq+0x66>
    18bc:	2001      	movs	r0, #1
    18be:	e000      	b.n	18c2 <attsProcReadBlobReq+0xce>
    18c0:	2007      	movs	r0, #7
    18c2:	9b02      	ldr	r3, [sp, #8]
    18c4:	0022      	movs	r2, r4
    18c6:	8b1d      	ldrh	r5, [r3, #24]
    18c8:	210c      	movs	r1, #12
    18ca:	0003      	movs	r3, r0
    18cc:	0028      	movs	r0, r5
    18ce:	f7ff fc53 	bl	1178 <attsErrRsp>
    18d2:	b007      	add	sp, #28
    18d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18d6:	46c0      	nop			; (mov r8, r8)
    18d8:	10001584 	.word	0x10001584

000018dc <attsProcFindTypeReq>:
    18dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    18de:	7a93      	ldrb	r3, [r2, #10]
    18e0:	0017      	movs	r7, r2
    18e2:	7a52      	ldrb	r2, [r2, #9]
    18e4:	021b      	lsls	r3, r3, #8
    18e6:	18d3      	adds	r3, r2, r3
    18e8:	b08b      	sub	sp, #44	; 0x2c
    18ea:	b29b      	uxth	r3, r3
    18ec:	9003      	str	r0, [sp, #12]
    18ee:	9105      	str	r1, [sp, #20]
    18f0:	9302      	str	r3, [sp, #8]
    18f2:	2501      	movs	r5, #1
    18f4:	2b00      	cmp	r3, #0
    18f6:	d031      	beq.n	195c <attsProcFindTypeReq+0x80>
    18f8:	7b3b      	ldrb	r3, [r7, #12]
    18fa:	7afa      	ldrb	r2, [r7, #11]
    18fc:	021b      	lsls	r3, r3, #8
    18fe:	18d3      	adds	r3, r2, r3
    1900:	b29b      	uxth	r3, r3
    1902:	9304      	str	r3, [sp, #16]
    1904:	9a04      	ldr	r2, [sp, #16]
    1906:	9b02      	ldr	r3, [sp, #8]
    1908:	4293      	cmp	r3, r2
    190a:	d827      	bhi.n	195c <attsProcFindTypeReq+0x80>
    190c:	9b03      	ldr	r3, [sp, #12]
    190e:	8b58      	ldrh	r0, [r3, #26]
    1910:	3008      	adds	r0, #8
    1912:	b280      	uxth	r0, r0
    1914:	f7fe fc6a 	bl	1ec <attMsgAlloc>
    1918:	1e06      	subs	r6, r0, #0
    191a:	d064      	beq.n	19e6 <attsProcFindTypeReq+0x10a>
    191c:	9c05      	ldr	r4, [sp, #20]
    191e:	9802      	ldr	r0, [sp, #8]
    1920:	3c07      	subs	r4, #7
    1922:	b2a3      	uxth	r3, r4
    1924:	9305      	str	r3, [sp, #20]
    1926:	0034      	movs	r4, r6
    1928:	2307      	movs	r3, #7
    192a:	3409      	adds	r4, #9
    192c:	7233      	strb	r3, [r6, #8]
    192e:	9507      	str	r5, [sp, #28]
    1930:	ab09      	add	r3, sp, #36	; 0x24
    1932:	9301      	str	r3, [sp, #4]
    1934:	ab08      	add	r3, sp, #32
    1936:	9300      	str	r3, [sp, #0]
    1938:	003b      	movs	r3, r7
    193a:	2202      	movs	r2, #2
    193c:	330d      	adds	r3, #13
    193e:	9904      	ldr	r1, [sp, #16]
    1940:	f7ff fed6 	bl	16f0 <attsFindUuidInRange>
    1944:	1e05      	subs	r5, r0, #0
    1946:	9006      	str	r0, [sp, #24]
    1948:	d11f      	bne.n	198a <attsProcFindTypeReq+0xae>
    194a:	0033      	movs	r3, r6
    194c:	3309      	adds	r3, #9
    194e:	2500      	movs	r5, #0
    1950:	429c      	cmp	r4, r3
    1952:	d103      	bne.n	195c <attsProcFindTypeReq+0x80>
    1954:	0030      	movs	r0, r6
    1956:	f009 fa79 	bl	ae4c <WsfMsgFree>
    195a:	350a      	adds	r5, #10
    195c:	9803      	ldr	r0, [sp, #12]
    195e:	f7ff fc7f 	bl	1260 <attsDiscBusy>
    1962:	9b03      	ldr	r3, [sp, #12]
    1964:	8b18      	ldrh	r0, [r3, #24]
    1966:	2d00      	cmp	r5, #0
    1968:	d109      	bne.n	197e <attsProcFindTypeReq+0xa2>
    196a:	0032      	movs	r2, r6
    196c:	3208      	adds	r2, #8
    196e:	1aa2      	subs	r2, r4, r2
    1970:	0001      	movs	r1, r0
    1972:	b292      	uxth	r2, r2
    1974:	0033      	movs	r3, r6
    1976:	2004      	movs	r0, #4
    1978:	f002 f940 	bl	3bfc <L2cDataReq>
    197c:	e03d      	b.n	19fa <attsProcFindTypeReq+0x11e>
    197e:	002b      	movs	r3, r5
    1980:	9a02      	ldr	r2, [sp, #8]
    1982:	2106      	movs	r1, #6
    1984:	f7ff fbf8 	bl	1178 <attsErrRsp>
    1988:	e037      	b.n	19fa <attsProcFindTypeReq+0x11e>
    198a:	9b08      	ldr	r3, [sp, #32]
    198c:	9907      	ldr	r1, [sp, #28]
    198e:	7bda      	ldrb	r2, [r3, #15]
    1990:	420a      	tst	r2, r1
    1992:	d02a      	beq.n	19ea <attsProcFindTypeReq+0x10e>
    1994:	9a05      	ldr	r2, [sp, #20]
    1996:	2a00      	cmp	r2, #0
    1998:	d00c      	beq.n	19b4 <attsProcFindTypeReq+0xd8>
    199a:	689a      	ldr	r2, [r3, #8]
    199c:	9905      	ldr	r1, [sp, #20]
    199e:	8812      	ldrh	r2, [r2, #0]
    19a0:	428a      	cmp	r2, r1
    19a2:	d122      	bne.n	19ea <attsProcFindTypeReq+0x10e>
    19a4:	0038      	movs	r0, r7
    19a6:	000a      	movs	r2, r1
    19a8:	300f      	adds	r0, #15
    19aa:	6859      	ldr	r1, [r3, #4]
    19ac:	f00e f8c0 	bl	fb30 <memcmp>
    19b0:	2800      	cmp	r0, #0
    19b2:	d11a      	bne.n	19ea <attsProcFindTypeReq+0x10e>
    19b4:	7b7b      	ldrb	r3, [r7, #13]
    19b6:	0028      	movs	r0, r5
    19b8:	2b00      	cmp	r3, #0
    19ba:	d104      	bne.n	19c6 <attsProcFindTypeReq+0xea>
    19bc:	7bbb      	ldrb	r3, [r7, #14]
    19be:	2b28      	cmp	r3, #40	; 0x28
    19c0:	d101      	bne.n	19c6 <attsProcFindTypeReq+0xea>
    19c2:	f7ff fecf 	bl	1764 <attsFindServiceGroupEnd>
    19c6:	9b03      	ldr	r3, [sp, #12]
    19c8:	1d22      	adds	r2, r4, #4
    19ca:	8b5b      	ldrh	r3, [r3, #26]
    19cc:	3308      	adds	r3, #8
    19ce:	18f3      	adds	r3, r6, r3
    19d0:	429a      	cmp	r2, r3
    19d2:	d8ba      	bhi.n	194a <attsProcFindTypeReq+0x6e>
    19d4:	7025      	strb	r5, [r4, #0]
    19d6:	0a03      	lsrs	r3, r0, #8
    19d8:	0a2d      	lsrs	r5, r5, #8
    19da:	7065      	strb	r5, [r4, #1]
    19dc:	70a0      	strb	r0, [r4, #2]
    19de:	70e3      	strb	r3, [r4, #3]
    19e0:	9006      	str	r0, [sp, #24]
    19e2:	0014      	movs	r4, r2
    19e4:	e001      	b.n	19ea <attsProcFindTypeReq+0x10e>
    19e6:	2511      	movs	r5, #17
    19e8:	e7b8      	b.n	195c <attsProcFindTypeReq+0x80>
    19ea:	9b04      	ldr	r3, [sp, #16]
    19ec:	9a06      	ldr	r2, [sp, #24]
    19ee:	4293      	cmp	r3, r2
    19f0:	d9ab      	bls.n	194a <attsProcFindTypeReq+0x6e>
    19f2:	9b06      	ldr	r3, [sp, #24]
    19f4:	3301      	adds	r3, #1
    19f6:	b298      	uxth	r0, r3
    19f8:	e79a      	b.n	1930 <attsProcFindTypeReq+0x54>
    19fa:	b00b      	add	sp, #44	; 0x2c
    19fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000019fe <attsProcReadTypeReq>:
    19fe:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a00:	7a94      	ldrb	r4, [r2, #10]
    1a02:	0006      	movs	r6, r0
    1a04:	7a50      	ldrb	r0, [r2, #9]
    1a06:	0224      	lsls	r4, r4, #8
    1a08:	3905      	subs	r1, #5
    1a0a:	b08b      	sub	sp, #44	; 0x2c
    1a0c:	1904      	adds	r4, r0, r4
    1a0e:	b2cb      	uxtb	r3, r1
    1a10:	b2a4      	uxth	r4, r4
    1a12:	9304      	str	r3, [sp, #16]
    1a14:	2b02      	cmp	r3, #2
    1a16:	d004      	beq.n	1a22 <attsProcReadTypeReq+0x24>
    1a18:	9904      	ldr	r1, [sp, #16]
    1a1a:	2304      	movs	r3, #4
    1a1c:	2910      	cmp	r1, #16
    1a1e:	d000      	beq.n	1a22 <attsProcReadTypeReq+0x24>
    1a20:	e0cb      	b.n	1bba <attsProcReadTypeReq+0x1bc>
    1a22:	2c00      	cmp	r4, #0
    1a24:	d007      	beq.n	1a36 <attsProcReadTypeReq+0x38>
    1a26:	7b13      	ldrb	r3, [r2, #12]
    1a28:	7ad1      	ldrb	r1, [r2, #11]
    1a2a:	021b      	lsls	r3, r3, #8
    1a2c:	18cb      	adds	r3, r1, r3
    1a2e:	b29b      	uxth	r3, r3
    1a30:	9303      	str	r3, [sp, #12]
    1a32:	429c      	cmp	r4, r3
    1a34:	d901      	bls.n	1a3a <attsProcReadTypeReq+0x3c>
    1a36:	2301      	movs	r3, #1
    1a38:	e0bf      	b.n	1bba <attsProcReadTypeReq+0x1bc>
    1a3a:	ab09      	add	r3, sp, #36	; 0x24
    1a3c:	320d      	adds	r2, #13
    1a3e:	9301      	str	r3, [sp, #4]
    1a40:	ab08      	add	r3, sp, #32
    1a42:	9206      	str	r2, [sp, #24]
    1a44:	9300      	str	r3, [sp, #0]
    1a46:	0020      	movs	r0, r4
    1a48:	0013      	movs	r3, r2
    1a4a:	9903      	ldr	r1, [sp, #12]
    1a4c:	9a04      	ldr	r2, [sp, #16]
    1a4e:	f7ff fe4f 	bl	16f0 <attsFindUuidInRange>
    1a52:	230a      	movs	r3, #10
    1a54:	1e04      	subs	r4, r0, #0
    1a56:	d100      	bne.n	1a5a <attsProcReadTypeReq+0x5c>
    1a58:	e0af      	b.n	1bba <attsProcReadTypeReq+0x1bc>
    1a5a:	9b08      	ldr	r3, [sp, #32]
    1a5c:	7f30      	ldrb	r0, [r6, #28]
    1a5e:	7bdb      	ldrb	r3, [r3, #15]
    1a60:	0022      	movs	r2, r4
    1a62:	2101      	movs	r1, #1
    1a64:	f7ff fd00 	bl	1468 <attsPermissions>
    1a68:	1e03      	subs	r3, r0, #0
    1a6a:	d000      	beq.n	1a6e <attsProcReadTypeReq+0x70>
    1a6c:	e0a5      	b.n	1bba <attsProcReadTypeReq+0x1bc>
    1a6e:	9a08      	ldr	r2, [sp, #32]
    1a70:	7b91      	ldrb	r1, [r2, #14]
    1a72:	0748      	lsls	r0, r1, #29
    1a74:	d509      	bpl.n	1a8a <attsProcReadTypeReq+0x8c>
    1a76:	9809      	ldr	r0, [sp, #36]	; 0x24
    1a78:	6885      	ldr	r5, [r0, #8]
    1a7a:	2d00      	cmp	r5, #0
    1a7c:	d005      	beq.n	1a8a <attsProcReadTypeReq+0x8c>
    1a7e:	9200      	str	r2, [sp, #0]
    1a80:	7f30      	ldrb	r0, [r6, #28]
    1a82:	2208      	movs	r2, #8
    1a84:	0021      	movs	r1, r4
    1a86:	47a8      	blx	r5
    1a88:	e014      	b.n	1ab4 <attsProcReadTypeReq+0xb6>
    1a8a:	068b      	lsls	r3, r1, #26
    1a8c:	d409      	bmi.n	1aa2 <attsProcReadTypeReq+0xa4>
    1a8e:	8b70      	ldrh	r0, [r6, #26]
    1a90:	3008      	adds	r0, #8
    1a92:	b280      	uxth	r0, r0
    1a94:	f7fe fbaa 	bl	1ec <attMsgAlloc>
    1a98:	9002      	str	r0, [sp, #8]
    1a9a:	1e03      	subs	r3, r0, #0
    1a9c:	d10d      	bne.n	1aba <attsProcReadTypeReq+0xbc>
    1a9e:	3311      	adds	r3, #17
    1aa0:	e08b      	b.n	1bba <attsProcReadTypeReq+0x1bc>
    1aa2:	4b49      	ldr	r3, [pc, #292]	; (1bc8 <attsProcReadTypeReq+0x1ca>)
    1aa4:	695d      	ldr	r5, [r3, #20]
    1aa6:	2d00      	cmp	r5, #0
    1aa8:	d0f1      	beq.n	1a8e <attsProcReadTypeReq+0x90>
    1aaa:	6853      	ldr	r3, [r2, #4]
    1aac:	7f30      	ldrb	r0, [r6, #28]
    1aae:	0022      	movs	r2, r4
    1ab0:	2105      	movs	r1, #5
    1ab2:	47a8      	blx	r5
    1ab4:	1e03      	subs	r3, r0, #0
    1ab6:	d0ea      	beq.n	1a8e <attsProcReadTypeReq+0x90>
    1ab8:	e07f      	b.n	1bba <attsProcReadTypeReq+0x1bc>
    1aba:	2309      	movs	r3, #9
    1abc:	9a02      	ldr	r2, [sp, #8]
    1abe:	7213      	strb	r3, [r2, #8]
    1ac0:	9a08      	ldr	r2, [sp, #32]
    1ac2:	8b73      	ldrh	r3, [r6, #26]
    1ac4:	6891      	ldr	r1, [r2, #8]
    1ac6:	3b04      	subs	r3, #4
    1ac8:	8809      	ldrh	r1, [r1, #0]
    1aca:	428b      	cmp	r3, r1
    1acc:	d900      	bls.n	1ad0 <attsProcReadTypeReq+0xd2>
    1ace:	000b      	movs	r3, r1
    1ad0:	9802      	ldr	r0, [sp, #8]
    1ad2:	b2d9      	uxtb	r1, r3
    1ad4:	0005      	movs	r5, r0
    1ad6:	9107      	str	r1, [sp, #28]
    1ad8:	3102      	adds	r1, #2
    1ada:	7241      	strb	r1, [r0, #9]
    1adc:	0a21      	lsrs	r1, r4, #8
    1ade:	7284      	strb	r4, [r0, #10]
    1ae0:	b2db      	uxtb	r3, r3
    1ae2:	72c1      	strb	r1, [r0, #11]
    1ae4:	350c      	adds	r5, #12
    1ae6:	6851      	ldr	r1, [r2, #4]
    1ae8:	0028      	movs	r0, r5
    1aea:	001a      	movs	r2, r3
    1aec:	9305      	str	r3, [sp, #20]
    1aee:	f00e f82e 	bl	fb4e <memcpy>
    1af2:	9b05      	ldr	r3, [sp, #20]
    1af4:	3401      	adds	r4, #1
    1af6:	18ed      	adds	r5, r5, r3
    1af8:	b2a0      	uxth	r0, r4
    1afa:	ab09      	add	r3, sp, #36	; 0x24
    1afc:	9301      	str	r3, [sp, #4]
    1afe:	ab08      	add	r3, sp, #32
    1b00:	9300      	str	r3, [sp, #0]
    1b02:	9a04      	ldr	r2, [sp, #16]
    1b04:	9b06      	ldr	r3, [sp, #24]
    1b06:	9903      	ldr	r1, [sp, #12]
    1b08:	f7ff fdf2 	bl	16f0 <attsFindUuidInRange>
    1b0c:	1e04      	subs	r4, r0, #0
    1b0e:	d04a      	beq.n	1ba6 <attsProcReadTypeReq+0x1a8>
    1b10:	2104      	movs	r1, #4
    1b12:	9b08      	ldr	r3, [sp, #32]
    1b14:	7b9a      	ldrb	r2, [r3, #14]
    1b16:	420a      	tst	r2, r1
    1b18:	d00a      	beq.n	1b30 <attsProcReadTypeReq+0x132>
    1b1a:	9909      	ldr	r1, [sp, #36]	; 0x24
    1b1c:	688f      	ldr	r7, [r1, #8]
    1b1e:	2f00      	cmp	r7, #0
    1b20:	d006      	beq.n	1b30 <attsProcReadTypeReq+0x132>
    1b22:	9300      	str	r3, [sp, #0]
    1b24:	7f30      	ldrb	r0, [r6, #28]
    1b26:	2300      	movs	r3, #0
    1b28:	2208      	movs	r2, #8
    1b2a:	0021      	movs	r1, r4
    1b2c:	47b8      	blx	r7
    1b2e:	e012      	b.n	1b56 <attsProcReadTypeReq+0x158>
    1b30:	2120      	movs	r1, #32
    1b32:	420a      	tst	r2, r1
    1b34:	d106      	bne.n	1b44 <attsProcReadTypeReq+0x146>
    1b36:	9b08      	ldr	r3, [sp, #32]
    1b38:	9907      	ldr	r1, [sp, #28]
    1b3a:	689a      	ldr	r2, [r3, #8]
    1b3c:	8812      	ldrh	r2, [r2, #0]
    1b3e:	428a      	cmp	r2, r1
    1b40:	d00c      	beq.n	1b5c <attsProcReadTypeReq+0x15e>
    1b42:	e030      	b.n	1ba6 <attsProcReadTypeReq+0x1a8>
    1b44:	4a20      	ldr	r2, [pc, #128]	; (1bc8 <attsProcReadTypeReq+0x1ca>)
    1b46:	6957      	ldr	r7, [r2, #20]
    1b48:	2f00      	cmp	r7, #0
    1b4a:	d0f4      	beq.n	1b36 <attsProcReadTypeReq+0x138>
    1b4c:	7f30      	ldrb	r0, [r6, #28]
    1b4e:	685b      	ldr	r3, [r3, #4]
    1b50:	0022      	movs	r2, r4
    1b52:	2105      	movs	r1, #5
    1b54:	47b8      	blx	r7
    1b56:	2800      	cmp	r0, #0
    1b58:	d0ed      	beq.n	1b36 <attsProcReadTypeReq+0x138>
    1b5a:	e024      	b.n	1ba6 <attsProcReadTypeReq+0x1a8>
    1b5c:	7bdb      	ldrb	r3, [r3, #15]
    1b5e:	7f30      	ldrb	r0, [r6, #28]
    1b60:	0022      	movs	r2, r4
    1b62:	2101      	movs	r1, #1
    1b64:	f7ff fc80 	bl	1468 <attsPermissions>
    1b68:	2800      	cmp	r0, #0
    1b6a:	d11c      	bne.n	1ba6 <attsProcReadTypeReq+0x1a8>
    1b6c:	9b05      	ldr	r3, [sp, #20]
    1b6e:	9a02      	ldr	r2, [sp, #8]
    1b70:	1c9f      	adds	r7, r3, #2
    1b72:	8b73      	ldrh	r3, [r6, #26]
    1b74:	19ef      	adds	r7, r5, r7
    1b76:	3308      	adds	r3, #8
    1b78:	18d3      	adds	r3, r2, r3
    1b7a:	429f      	cmp	r7, r3
    1b7c:	d813      	bhi.n	1ba6 <attsProcReadTypeReq+0x1a8>
    1b7e:	0a23      	lsrs	r3, r4, #8
    1b80:	702c      	strb	r4, [r5, #0]
    1b82:	706b      	strb	r3, [r5, #1]
    1b84:	9b08      	ldr	r3, [sp, #32]
    1b86:	1ca8      	adds	r0, r5, #2
    1b88:	6859      	ldr	r1, [r3, #4]
    1b8a:	9a05      	ldr	r2, [sp, #20]
    1b8c:	f00d ffdf 	bl	fb4e <memcpy>
    1b90:	4b0e      	ldr	r3, [pc, #56]	; (1bcc <attsProcReadTypeReq+0x1ce>)
    1b92:	429c      	cmp	r4, r3
    1b94:	d006      	beq.n	1ba4 <attsProcReadTypeReq+0x1a6>
    1b96:	3401      	adds	r4, #1
    1b98:	9b03      	ldr	r3, [sp, #12]
    1b9a:	b2a0      	uxth	r0, r4
    1b9c:	003d      	movs	r5, r7
    1b9e:	4283      	cmp	r3, r0
    1ba0:	d2ab      	bcs.n	1afa <attsProcReadTypeReq+0xfc>
    1ba2:	e000      	b.n	1ba6 <attsProcReadTypeReq+0x1a8>
    1ba4:	003d      	movs	r5, r7
    1ba6:	9a02      	ldr	r2, [sp, #8]
    1ba8:	8b31      	ldrh	r1, [r6, #24]
    1baa:	3208      	adds	r2, #8
    1bac:	1aaa      	subs	r2, r5, r2
    1bae:	b292      	uxth	r2, r2
    1bb0:	9b02      	ldr	r3, [sp, #8]
    1bb2:	2004      	movs	r0, #4
    1bb4:	f002 f822 	bl	3bfc <L2cDataReq>
    1bb8:	e004      	b.n	1bc4 <attsProcReadTypeReq+0x1c6>
    1bba:	8b30      	ldrh	r0, [r6, #24]
    1bbc:	0022      	movs	r2, r4
    1bbe:	2108      	movs	r1, #8
    1bc0:	f7ff fada 	bl	1178 <attsErrRsp>
    1bc4:	b00b      	add	sp, #44	; 0x2c
    1bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bc8:	10001584 	.word	0x10001584
    1bcc:	0000ffff 	.word	0x0000ffff

00001bd0 <attsProcReadMultReq>:
    1bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bd2:	3108      	adds	r1, #8
    1bd4:	b089      	sub	sp, #36	; 0x24
    1bd6:	1853      	adds	r3, r2, r1
    1bd8:	3209      	adds	r2, #9
    1bda:	9305      	str	r3, [sp, #20]
    1bdc:	9204      	str	r2, [sp, #16]
    1bde:	0007      	movs	r7, r0
    1be0:	8b40      	ldrh	r0, [r0, #26]
    1be2:	3008      	adds	r0, #8
    1be4:	b280      	uxth	r0, r0
    1be6:	f7fe fb01 	bl	1ec <attMsgAlloc>
    1bea:	1e05      	subs	r5, r0, #0
    1bec:	d05a      	beq.n	1ca4 <attsProcReadMultReq+0xd4>
    1bee:	0003      	movs	r3, r0
    1bf0:	3309      	adds	r3, #9
    1bf2:	9302      	str	r3, [sp, #8]
    1bf4:	230f      	movs	r3, #15
    1bf6:	7203      	strb	r3, [r0, #8]
    1bf8:	9b04      	ldr	r3, [sp, #16]
    1bfa:	9a05      	ldr	r2, [sp, #20]
    1bfc:	4293      	cmp	r3, r2
    1bfe:	d25a      	bcs.n	1cb6 <attsProcReadMultReq+0xe6>
    1c00:	9b04      	ldr	r3, [sp, #16]
    1c02:	9a04      	ldr	r2, [sp, #16]
    1c04:	785b      	ldrb	r3, [r3, #1]
    1c06:	7812      	ldrb	r2, [r2, #0]
    1c08:	021b      	lsls	r3, r3, #8
    1c0a:	18d3      	adds	r3, r2, r3
    1c0c:	b29b      	uxth	r3, r3
    1c0e:	9303      	str	r3, [sp, #12]
    1c10:	9b04      	ldr	r3, [sp, #16]
    1c12:	a907      	add	r1, sp, #28
    1c14:	3302      	adds	r3, #2
    1c16:	9803      	ldr	r0, [sp, #12]
    1c18:	9304      	str	r3, [sp, #16]
    1c1a:	f7ff fbf5 	bl	1408 <attsFindByHandle>
    1c1e:	1e06      	subs	r6, r0, #0
    1c20:	d054      	beq.n	1ccc <attsProcReadMultReq+0xfc>
    1c22:	7bc3      	ldrb	r3, [r0, #15]
    1c24:	9a03      	ldr	r2, [sp, #12]
    1c26:	7f38      	ldrb	r0, [r7, #28]
    1c28:	2101      	movs	r1, #1
    1c2a:	f7ff fc1d 	bl	1468 <attsPermissions>
    1c2e:	1e04      	subs	r4, r0, #0
    1c30:	d14d      	bne.n	1cce <attsProcReadMultReq+0xfe>
    1c32:	2204      	movs	r2, #4
    1c34:	7bb3      	ldrb	r3, [r6, #14]
    1c36:	4213      	tst	r3, r2
    1c38:	d014      	beq.n	1c64 <attsProcReadMultReq+0x94>
    1c3a:	9a07      	ldr	r2, [sp, #28]
    1c3c:	6892      	ldr	r2, [r2, #8]
    1c3e:	4694      	mov	ip, r2
    1c40:	2a00      	cmp	r2, #0
    1c42:	d00f      	beq.n	1c64 <attsProcReadMultReq+0x94>
    1c44:	7f38      	ldrb	r0, [r7, #28]
    1c46:	0023      	movs	r3, r4
    1c48:	9600      	str	r6, [sp, #0]
    1c4a:	220e      	movs	r2, #14
    1c4c:	9903      	ldr	r1, [sp, #12]
    1c4e:	4664      	mov	r4, ip
    1c50:	47a0      	blx	r4
    1c52:	1e04      	subs	r4, r0, #0
    1c54:	d13b      	bne.n	1cce <attsProcReadMultReq+0xfe>
    1c56:	8b7b      	ldrh	r3, [r7, #26]
    1c58:	9a02      	ldr	r2, [sp, #8]
    1c5a:	3308      	adds	r3, #8
    1c5c:	18eb      	adds	r3, r5, r3
    1c5e:	429a      	cmp	r2, r3
    1c60:	d2ca      	bcs.n	1bf8 <attsProcReadMultReq+0x28>
    1c62:	e00c      	b.n	1c7e <attsProcReadMultReq+0xae>
    1c64:	2220      	movs	r2, #32
    1c66:	4213      	tst	r3, r2
    1c68:	d0f5      	beq.n	1c56 <attsProcReadMultReq+0x86>
    1c6a:	4b1c      	ldr	r3, [pc, #112]	; (1cdc <attsProcReadMultReq+0x10c>)
    1c6c:	695c      	ldr	r4, [r3, #20]
    1c6e:	2c00      	cmp	r4, #0
    1c70:	d0f1      	beq.n	1c56 <attsProcReadMultReq+0x86>
    1c72:	7f38      	ldrb	r0, [r7, #28]
    1c74:	6873      	ldr	r3, [r6, #4]
    1c76:	9a03      	ldr	r2, [sp, #12]
    1c78:	2105      	movs	r1, #5
    1c7a:	47a0      	blx	r4
    1c7c:	e7e9      	b.n	1c52 <attsProcReadMultReq+0x82>
    1c7e:	9a02      	ldr	r2, [sp, #8]
    1c80:	1a9b      	subs	r3, r3, r2
    1c82:	68b2      	ldr	r2, [r6, #8]
    1c84:	b29b      	uxth	r3, r3
    1c86:	8812      	ldrh	r2, [r2, #0]
    1c88:	1c14      	adds	r4, r2, #0
    1c8a:	429a      	cmp	r2, r3
    1c8c:	d900      	bls.n	1c90 <attsProcReadMultReq+0xc0>
    1c8e:	1c1c      	adds	r4, r3, #0
    1c90:	b2a4      	uxth	r4, r4
    1c92:	6871      	ldr	r1, [r6, #4]
    1c94:	0022      	movs	r2, r4
    1c96:	9802      	ldr	r0, [sp, #8]
    1c98:	f00d ff59 	bl	fb4e <memcpy>
    1c9c:	9b02      	ldr	r3, [sp, #8]
    1c9e:	191b      	adds	r3, r3, r4
    1ca0:	9302      	str	r3, [sp, #8]
    1ca2:	e7a9      	b.n	1bf8 <attsProcReadMultReq+0x28>
    1ca4:	2411      	movs	r4, #17
    1ca6:	9003      	str	r0, [sp, #12]
    1ca8:	8b38      	ldrh	r0, [r7, #24]
    1caa:	0023      	movs	r3, r4
    1cac:	9a03      	ldr	r2, [sp, #12]
    1cae:	210e      	movs	r1, #14
    1cb0:	f7ff fa62 	bl	1178 <attsErrRsp>
    1cb4:	e00f      	b.n	1cd6 <attsProcReadMultReq+0x106>
    1cb6:	002a      	movs	r2, r5
    1cb8:	9b02      	ldr	r3, [sp, #8]
    1cba:	3208      	adds	r2, #8
    1cbc:	1a9a      	subs	r2, r3, r2
    1cbe:	b292      	uxth	r2, r2
    1cc0:	8b39      	ldrh	r1, [r7, #24]
    1cc2:	002b      	movs	r3, r5
    1cc4:	2004      	movs	r0, #4
    1cc6:	f001 ff99 	bl	3bfc <L2cDataReq>
    1cca:	e004      	b.n	1cd6 <attsProcReadMultReq+0x106>
    1ccc:	2401      	movs	r4, #1
    1cce:	0028      	movs	r0, r5
    1cd0:	f009 f8bc 	bl	ae4c <WsfMsgFree>
    1cd4:	e7e8      	b.n	1ca8 <attsProcReadMultReq+0xd8>
    1cd6:	b009      	add	sp, #36	; 0x24
    1cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cda:	46c0      	nop			; (mov r8, r8)
    1cdc:	10001584 	.word	0x10001584

00001ce0 <attsProcReadGroupTypeReq>:
    1ce0:	2300      	movs	r3, #0
    1ce2:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ce4:	b08f      	sub	sp, #60	; 0x3c
    1ce6:	9002      	str	r0, [sp, #8]
    1ce8:	a80b      	add	r0, sp, #44	; 0x2c
    1cea:	7003      	strb	r3, [r0, #0]
    1cec:	3328      	adds	r3, #40	; 0x28
    1cee:	7043      	strb	r3, [r0, #1]
    1cf0:	7a93      	ldrb	r3, [r2, #10]
    1cf2:	7a54      	ldrb	r4, [r2, #9]
    1cf4:	021b      	lsls	r3, r3, #8
    1cf6:	18e3      	adds	r3, r4, r3
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	3905      	subs	r1, #5
    1cfc:	9303      	str	r3, [sp, #12]
    1cfe:	b2cb      	uxtb	r3, r1
    1d00:	9304      	str	r3, [sp, #16]
    1d02:	2b02      	cmp	r3, #2
    1d04:	d003      	beq.n	1d0e <attsProcReadGroupTypeReq+0x2e>
    1d06:	2704      	movs	r7, #4
    1d08:	2b10      	cmp	r3, #16
    1d0a:	d000      	beq.n	1d0e <attsProcReadGroupTypeReq+0x2e>
    1d0c:	e0b4      	b.n	1e78 <attsProcReadGroupTypeReq+0x198>
    1d0e:	9b03      	ldr	r3, [sp, #12]
    1d10:	2b00      	cmp	r3, #0
    1d12:	d100      	bne.n	1d16 <attsProcReadGroupTypeReq+0x36>
    1d14:	e0af      	b.n	1e76 <attsProcReadGroupTypeReq+0x196>
    1d16:	7b13      	ldrb	r3, [r2, #12]
    1d18:	7ad1      	ldrb	r1, [r2, #11]
    1d1a:	021b      	lsls	r3, r3, #8
    1d1c:	18cb      	adds	r3, r1, r3
    1d1e:	b29b      	uxth	r3, r3
    1d20:	9305      	str	r3, [sp, #20]
    1d22:	9905      	ldr	r1, [sp, #20]
    1d24:	9b03      	ldr	r3, [sp, #12]
    1d26:	2701      	movs	r7, #1
    1d28:	428b      	cmp	r3, r1
    1d2a:	d900      	bls.n	1d2e <attsProcReadGroupTypeReq+0x4e>
    1d2c:	e0a4      	b.n	1e78 <attsProcReadGroupTypeReq+0x198>
    1d2e:	320d      	adds	r2, #13
    1d30:	9904      	ldr	r1, [sp, #16]
    1d32:	9207      	str	r2, [sp, #28]
    1d34:	f7ff fb55 	bl	13e2 <attsUuid16Cmp>
    1d38:	2800      	cmp	r0, #0
    1d3a:	d100      	bne.n	1d3e <attsProcReadGroupTypeReq+0x5e>
    1d3c:	e0a7      	b.n	1e8e <attsProcReadGroupTypeReq+0x1ae>
    1d3e:	ab0d      	add	r3, sp, #52	; 0x34
    1d40:	9301      	str	r3, [sp, #4]
    1d42:	ab0c      	add	r3, sp, #48	; 0x30
    1d44:	9300      	str	r3, [sp, #0]
    1d46:	9a04      	ldr	r2, [sp, #16]
    1d48:	9b07      	ldr	r3, [sp, #28]
    1d4a:	9905      	ldr	r1, [sp, #20]
    1d4c:	9803      	ldr	r0, [sp, #12]
    1d4e:	f7ff fccf 	bl	16f0 <attsFindUuidInRange>
    1d52:	1e06      	subs	r6, r0, #0
    1d54:	d100      	bne.n	1d58 <attsProcReadGroupTypeReq+0x78>
    1d56:	e07b      	b.n	1e50 <attsProcReadGroupTypeReq+0x170>
    1d58:	9a02      	ldr	r2, [sp, #8]
    1d5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1d5c:	7f10      	ldrb	r0, [r2, #28]
    1d5e:	0039      	movs	r1, r7
    1d60:	7bdb      	ldrb	r3, [r3, #15]
    1d62:	0032      	movs	r2, r6
    1d64:	f7ff fb80 	bl	1468 <attsPermissions>
    1d68:	1e07      	subs	r7, r0, #0
    1d6a:	d16b      	bne.n	1e44 <attsProcReadGroupTypeReq+0x164>
    1d6c:	9b02      	ldr	r3, [sp, #8]
    1d6e:	8b58      	ldrh	r0, [r3, #26]
    1d70:	3008      	adds	r0, #8
    1d72:	b280      	uxth	r0, r0
    1d74:	f7fe fa3a 	bl	1ec <attMsgAlloc>
    1d78:	2311      	movs	r3, #17
    1d7a:	1e05      	subs	r5, r0, #0
    1d7c:	d065      	beq.n	1e4a <attsProcReadGroupTypeReq+0x16a>
    1d7e:	7203      	strb	r3, [r0, #8]
    1d80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1d82:	689a      	ldr	r2, [r3, #8]
    1d84:	9b02      	ldr	r3, [sp, #8]
    1d86:	8814      	ldrh	r4, [r2, #0]
    1d88:	8b5b      	ldrh	r3, [r3, #26]
    1d8a:	3b06      	subs	r3, #6
    1d8c:	429c      	cmp	r4, r3
    1d8e:	d900      	bls.n	1d92 <attsProcReadGroupTypeReq+0xb2>
    1d90:	001c      	movs	r4, r3
    1d92:	b2e3      	uxtb	r3, r4
    1d94:	9309      	str	r3, [sp, #36]	; 0x24
    1d96:	3304      	adds	r3, #4
    1d98:	726b      	strb	r3, [r5, #9]
    1d9a:	0a33      	lsrs	r3, r6, #8
    1d9c:	72ae      	strb	r6, [r5, #10]
    1d9e:	72eb      	strb	r3, [r5, #11]
    1da0:	0030      	movs	r0, r6
    1da2:	f7ff fcdf 	bl	1764 <attsFindServiceGroupEnd>
    1da6:	0a03      	lsrs	r3, r0, #8
    1da8:	736b      	strb	r3, [r5, #13]
    1daa:	b2e3      	uxtb	r3, r4
    1dac:	002c      	movs	r4, r5
    1dae:	9306      	str	r3, [sp, #24]
    1db0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1db2:	7328      	strb	r0, [r5, #12]
    1db4:	340e      	adds	r4, #14
    1db6:	6859      	ldr	r1, [r3, #4]
    1db8:	0006      	movs	r6, r0
    1dba:	9a06      	ldr	r2, [sp, #24]
    1dbc:	0020      	movs	r0, r4
    1dbe:	f00d fec6 	bl	fb4e <memcpy>
    1dc2:	9b06      	ldr	r3, [sp, #24]
    1dc4:	18e4      	adds	r4, r4, r3
    1dc6:	4b34      	ldr	r3, [pc, #208]	; (1e98 <attsProcReadGroupTypeReq+0x1b8>)
    1dc8:	429e      	cmp	r6, r3
    1dca:	d044      	beq.n	1e56 <attsProcReadGroupTypeReq+0x176>
    1dcc:	3601      	adds	r6, #1
    1dce:	9b05      	ldr	r3, [sp, #20]
    1dd0:	b2b0      	uxth	r0, r6
    1dd2:	4283      	cmp	r3, r0
    1dd4:	d33f      	bcc.n	1e56 <attsProcReadGroupTypeReq+0x176>
    1dd6:	ab0d      	add	r3, sp, #52	; 0x34
    1dd8:	9301      	str	r3, [sp, #4]
    1dda:	ab0c      	add	r3, sp, #48	; 0x30
    1ddc:	9300      	str	r3, [sp, #0]
    1dde:	9a04      	ldr	r2, [sp, #16]
    1de0:	9b07      	ldr	r3, [sp, #28]
    1de2:	9905      	ldr	r1, [sp, #20]
    1de4:	f7ff fc84 	bl	16f0 <attsFindUuidInRange>
    1de8:	1e06      	subs	r6, r0, #0
    1dea:	d034      	beq.n	1e56 <attsProcReadGroupTypeReq+0x176>
    1dec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1dee:	9909      	ldr	r1, [sp, #36]	; 0x24
    1df0:	689a      	ldr	r2, [r3, #8]
    1df2:	8812      	ldrh	r2, [r2, #0]
    1df4:	428a      	cmp	r2, r1
    1df6:	d12e      	bne.n	1e56 <attsProcReadGroupTypeReq+0x176>
    1df8:	9a02      	ldr	r2, [sp, #8]
    1dfa:	7bdb      	ldrb	r3, [r3, #15]
    1dfc:	7f10      	ldrb	r0, [r2, #28]
    1dfe:	2101      	movs	r1, #1
    1e00:	0032      	movs	r2, r6
    1e02:	f7ff fb31 	bl	1468 <attsPermissions>
    1e06:	2800      	cmp	r0, #0
    1e08:	d125      	bne.n	1e56 <attsProcReadGroupTypeReq+0x176>
    1e0a:	9b06      	ldr	r3, [sp, #24]
    1e0c:	3304      	adds	r3, #4
    1e0e:	18e3      	adds	r3, r4, r3
    1e10:	9308      	str	r3, [sp, #32]
    1e12:	9b02      	ldr	r3, [sp, #8]
    1e14:	9a08      	ldr	r2, [sp, #32]
    1e16:	8b5b      	ldrh	r3, [r3, #26]
    1e18:	3308      	adds	r3, #8
    1e1a:	18eb      	adds	r3, r5, r3
    1e1c:	429a      	cmp	r2, r3
    1e1e:	d81a      	bhi.n	1e56 <attsProcReadGroupTypeReq+0x176>
    1e20:	0a33      	lsrs	r3, r6, #8
    1e22:	7026      	strb	r6, [r4, #0]
    1e24:	7063      	strb	r3, [r4, #1]
    1e26:	0030      	movs	r0, r6
    1e28:	f7ff fc9c 	bl	1764 <attsFindServiceGroupEnd>
    1e2c:	0a03      	lsrs	r3, r0, #8
    1e2e:	70a0      	strb	r0, [r4, #2]
    1e30:	70e3      	strb	r3, [r4, #3]
    1e32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1e34:	0006      	movs	r6, r0
    1e36:	6859      	ldr	r1, [r3, #4]
    1e38:	1d20      	adds	r0, r4, #4
    1e3a:	9a06      	ldr	r2, [sp, #24]
    1e3c:	f00d fe87 	bl	fb4e <memcpy>
    1e40:	9c08      	ldr	r4, [sp, #32]
    1e42:	e7c0      	b.n	1dc6 <attsProcReadGroupTypeReq+0xe6>
    1e44:	9603      	str	r6, [sp, #12]
    1e46:	2400      	movs	r4, #0
    1e48:	e004      	b.n	1e54 <attsProcReadGroupTypeReq+0x174>
    1e4a:	001f      	movs	r7, r3
    1e4c:	0004      	movs	r4, r0
    1e4e:	e002      	b.n	1e56 <attsProcReadGroupTypeReq+0x176>
    1e50:	270a      	movs	r7, #10
    1e52:	0034      	movs	r4, r6
    1e54:	0025      	movs	r5, r4
    1e56:	9802      	ldr	r0, [sp, #8]
    1e58:	f7ff fa02 	bl	1260 <attsDiscBusy>
    1e5c:	2f00      	cmp	r7, #0
    1e5e:	d10e      	bne.n	1e7e <attsProcReadGroupTypeReq+0x19e>
    1e60:	002a      	movs	r2, r5
    1e62:	9b02      	ldr	r3, [sp, #8]
    1e64:	3208      	adds	r2, #8
    1e66:	1aa2      	subs	r2, r4, r2
    1e68:	8b19      	ldrh	r1, [r3, #24]
    1e6a:	b292      	uxth	r2, r2
    1e6c:	002b      	movs	r3, r5
    1e6e:	2004      	movs	r0, #4
    1e70:	f001 fec4 	bl	3bfc <L2cDataReq>
    1e74:	e00d      	b.n	1e92 <attsProcReadGroupTypeReq+0x1b2>
    1e76:	2701      	movs	r7, #1
    1e78:	9802      	ldr	r0, [sp, #8]
    1e7a:	f7ff f9f1 	bl	1260 <attsDiscBusy>
    1e7e:	9b02      	ldr	r3, [sp, #8]
    1e80:	9a03      	ldr	r2, [sp, #12]
    1e82:	8b18      	ldrh	r0, [r3, #24]
    1e84:	2110      	movs	r1, #16
    1e86:	003b      	movs	r3, r7
    1e88:	f7ff f976 	bl	1178 <attsErrRsp>
    1e8c:	e001      	b.n	1e92 <attsProcReadGroupTypeReq+0x1b2>
    1e8e:	2710      	movs	r7, #16
    1e90:	e7f2      	b.n	1e78 <attsProcReadGroupTypeReq+0x198>
    1e92:	b00f      	add	sp, #60	; 0x3c
    1e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e96:	46c0      	nop			; (mov r8, r8)
    1e98:	0000ffff 	.word	0x0000ffff

00001e9c <attsProcWrite>:
    1e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e9e:	7a13      	ldrb	r3, [r2, #8]
    1ea0:	b089      	sub	sp, #36	; 0x24
    1ea2:	7a94      	ldrb	r4, [r2, #10]
    1ea4:	9305      	str	r3, [sp, #20]
    1ea6:	7a53      	ldrb	r3, [r2, #9]
    1ea8:	0224      	lsls	r4, r4, #8
    1eaa:	191c      	adds	r4, r3, r4
    1eac:	b2a4      	uxth	r4, r4
    1eae:	9004      	str	r0, [sp, #16]
    1eb0:	000d      	movs	r5, r1
    1eb2:	0020      	movs	r0, r4
    1eb4:	a907      	add	r1, sp, #28
    1eb6:	0017      	movs	r7, r2
    1eb8:	f7ff faa6 	bl	1408 <attsFindByHandle>
    1ebc:	1e06      	subs	r6, r0, #0
    1ebe:	d050      	beq.n	1f62 <attsProcWrite+0xc6>
    1ec0:	9a04      	ldr	r2, [sp, #16]
    1ec2:	7bc3      	ldrb	r3, [r0, #15]
    1ec4:	2110      	movs	r1, #16
    1ec6:	7f10      	ldrb	r0, [r2, #28]
    1ec8:	0022      	movs	r2, r4
    1eca:	f7ff facd 	bl	1468 <attsPermissions>
    1ece:	2800      	cmp	r0, #0
    1ed0:	d14a      	bne.n	1f68 <attsProcWrite+0xcc>
    1ed2:	7bb2      	ldrb	r2, [r6, #14]
    1ed4:	3d03      	subs	r5, #3
    1ed6:	b2ad      	uxth	r5, r5
    1ed8:	89b3      	ldrh	r3, [r6, #12]
    1eda:	0711      	lsls	r1, r2, #28
    1edc:	d403      	bmi.n	1ee6 <attsProcWrite+0x4a>
    1ede:	300d      	adds	r0, #13
    1ee0:	42ab      	cmp	r3, r5
    1ee2:	d141      	bne.n	1f68 <attsProcWrite+0xcc>
    1ee4:	e001      	b.n	1eea <attsProcWrite+0x4e>
    1ee6:	42ab      	cmp	r3, r5
    1ee8:	d33d      	bcc.n	1f66 <attsProcWrite+0xca>
    1eea:	003b      	movs	r3, r7
    1eec:	330b      	adds	r3, #11
    1eee:	0791      	lsls	r1, r2, #30
    1ef0:	d50d      	bpl.n	1f0e <attsProcWrite+0x72>
    1ef2:	9907      	ldr	r1, [sp, #28]
    1ef4:	68cf      	ldr	r7, [r1, #12]
    1ef6:	2f00      	cmp	r7, #0
    1ef8:	d009      	beq.n	1f0e <attsProcWrite+0x72>
    1efa:	9a04      	ldr	r2, [sp, #16]
    1efc:	0021      	movs	r1, r4
    1efe:	7f10      	ldrb	r0, [r2, #28]
    1f00:	9301      	str	r3, [sp, #4]
    1f02:	9602      	str	r6, [sp, #8]
    1f04:	9500      	str	r5, [sp, #0]
    1f06:	2300      	movs	r3, #0
    1f08:	9a05      	ldr	r2, [sp, #20]
    1f0a:	47b8      	blx	r7
    1f0c:	e016      	b.n	1f3c <attsProcWrite+0xa0>
    1f0e:	0692      	lsls	r2, r2, #26
    1f10:	d509      	bpl.n	1f26 <attsProcWrite+0x8a>
    1f12:	4a1c      	ldr	r2, [pc, #112]	; (1f84 <attsProcWrite+0xe8>)
    1f14:	6957      	ldr	r7, [r2, #20]
    1f16:	2f00      	cmp	r7, #0
    1f18:	d005      	beq.n	1f26 <attsProcWrite+0x8a>
    1f1a:	9a04      	ldr	r2, [sp, #16]
    1f1c:	2109      	movs	r1, #9
    1f1e:	7f10      	ldrb	r0, [r2, #28]
    1f20:	0022      	movs	r2, r4
    1f22:	47b8      	blx	r7
    1f24:	e00a      	b.n	1f3c <attsProcWrite+0xa0>
    1f26:	0019      	movs	r1, r3
    1f28:	002a      	movs	r2, r5
    1f2a:	6870      	ldr	r0, [r6, #4]
    1f2c:	f00d fe0f 	bl	fb4e <memcpy>
    1f30:	7bb3      	ldrb	r3, [r6, #14]
    1f32:	071b      	lsls	r3, r3, #28
    1f34:	d504      	bpl.n	1f40 <attsProcWrite+0xa4>
    1f36:	68b3      	ldr	r3, [r6, #8]
    1f38:	801d      	strh	r5, [r3, #0]
    1f3a:	e001      	b.n	1f40 <attsProcWrite+0xa4>
    1f3c:	2800      	cmp	r0, #0
    1f3e:	d113      	bne.n	1f68 <attsProcWrite+0xcc>
    1f40:	9b05      	ldr	r3, [sp, #20]
    1f42:	2b12      	cmp	r3, #18
    1f44:	d11b      	bne.n	1f7e <attsProcWrite+0xe2>
    1f46:	2009      	movs	r0, #9
    1f48:	f7fe f950 	bl	1ec <attMsgAlloc>
    1f4c:	1e03      	subs	r3, r0, #0
    1f4e:	d016      	beq.n	1f7e <attsProcWrite+0xe2>
    1f50:	2213      	movs	r2, #19
    1f52:	7202      	strb	r2, [r0, #8]
    1f54:	9a04      	ldr	r2, [sp, #16]
    1f56:	2004      	movs	r0, #4
    1f58:	8b11      	ldrh	r1, [r2, #24]
    1f5a:	2201      	movs	r2, #1
    1f5c:	f001 fe4e 	bl	3bfc <L2cDataReq>
    1f60:	e00d      	b.n	1f7e <attsProcWrite+0xe2>
    1f62:	2001      	movs	r0, #1
    1f64:	e000      	b.n	1f68 <attsProcWrite+0xcc>
    1f66:	200d      	movs	r0, #13
    1f68:	9b05      	ldr	r3, [sp, #20]
    1f6a:	2b12      	cmp	r3, #18
    1f6c:	d107      	bne.n	1f7e <attsProcWrite+0xe2>
    1f6e:	9b04      	ldr	r3, [sp, #16]
    1f70:	0022      	movs	r2, r4
    1f72:	8b1d      	ldrh	r5, [r3, #24]
    1f74:	9905      	ldr	r1, [sp, #20]
    1f76:	0003      	movs	r3, r0
    1f78:	0028      	movs	r0, r5
    1f7a:	f7ff f8fd 	bl	1178 <attsErrRsp>
    1f7e:	b009      	add	sp, #36	; 0x24
    1f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f82:	46c0      	nop			; (mov r8, r8)
    1f84:	10001584 	.word	0x10001584

00001f88 <attsProcPrepWriteReq>:
    1f88:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f8a:	0017      	movs	r7, r2
    1f8c:	7a93      	ldrb	r3, [r2, #10]
    1f8e:	7a52      	ldrb	r2, [r2, #9]
    1f90:	021b      	lsls	r3, r3, #8
    1f92:	18d3      	adds	r3, r2, r3
    1f94:	b08b      	sub	sp, #44	; 0x2c
    1f96:	b29b      	uxth	r3, r3
    1f98:	9005      	str	r0, [sp, #20]
    1f9a:	9107      	str	r1, [sp, #28]
    1f9c:	0018      	movs	r0, r3
    1f9e:	a909      	add	r1, sp, #36	; 0x24
    1fa0:	9304      	str	r3, [sp, #16]
    1fa2:	7afe      	ldrb	r6, [r7, #11]
    1fa4:	7b3c      	ldrb	r4, [r7, #12]
    1fa6:	f7ff fa2f 	bl	1408 <attsFindByHandle>
    1faa:	1e05      	subs	r5, r0, #0
    1fac:	d074      	beq.n	2098 <attsProcPrepWriteReq+0x110>
    1fae:	9a05      	ldr	r2, [sp, #20]
    1fb0:	7bc3      	ldrb	r3, [r0, #15]
    1fb2:	2110      	movs	r1, #16
    1fb4:	7f10      	ldrb	r0, [r2, #28]
    1fb6:	9a04      	ldr	r2, [sp, #16]
    1fb8:	f7ff fa56 	bl	1468 <attsPermissions>
    1fbc:	1e03      	subs	r3, r0, #0
    1fbe:	d170      	bne.n	20a2 <attsProcPrepWriteReq+0x11a>
    1fc0:	0224      	lsls	r4, r4, #8
    1fc2:	19a6      	adds	r6, r4, r6
    1fc4:	b2b3      	uxth	r3, r6
    1fc6:	9306      	str	r3, [sp, #24]
    1fc8:	9a06      	ldr	r2, [sp, #24]
    1fca:	7bab      	ldrb	r3, [r5, #14]
    1fcc:	2a00      	cmp	r2, #0
    1fce:	d001      	beq.n	1fd4 <attsProcPrepWriteReq+0x4c>
    1fd0:	06da      	lsls	r2, r3, #27
    1fd2:	d563      	bpl.n	209c <attsProcPrepWriteReq+0x114>
    1fd4:	9a07      	ldr	r2, [sp, #28]
    1fd6:	1f54      	subs	r4, r2, #5
    1fd8:	b2a4      	uxth	r4, r4
    1fda:	071b      	lsls	r3, r3, #28
    1fdc:	d403      	bmi.n	1fe6 <attsProcPrepWriteReq+0x5e>
    1fde:	89aa      	ldrh	r2, [r5, #12]
    1fe0:	230d      	movs	r3, #13
    1fe2:	42a2      	cmp	r2, r4
    1fe4:	d15d      	bne.n	20a2 <attsProcPrepWriteReq+0x11a>
    1fe6:	9805      	ldr	r0, [sp, #20]
    1fe8:	f009 f82f 	bl	b04a <WsfQueueCount>
    1fec:	4b31      	ldr	r3, [pc, #196]	; (20b4 <attsProcPrepWriteReq+0x12c>)
    1fee:	681b      	ldr	r3, [r3, #0]
    1ff0:	79da      	ldrb	r2, [r3, #7]
    1ff2:	2309      	movs	r3, #9
    1ff4:	4282      	cmp	r2, r0
    1ff6:	d954      	bls.n	20a2 <attsProcPrepWriteReq+0x11a>
    1ff8:	9b07      	ldr	r3, [sp, #28]
    1ffa:	1d98      	adds	r0, r3, #6
    1ffc:	b280      	uxth	r0, r0
    1ffe:	f008 fe7f 	bl	ad00 <WsfBufAlloc>
    2002:	1e06      	subs	r6, r0, #0
    2004:	d04c      	beq.n	20a0 <attsProcPrepWriteReq+0x118>
    2006:	7bab      	ldrb	r3, [r5, #14]
    2008:	370d      	adds	r7, #13
    200a:	079b      	lsls	r3, r3, #30
    200c:	d432      	bmi.n	2074 <attsProcPrepWriteReq+0xec>
    200e:	466b      	mov	r3, sp
    2010:	8a1b      	ldrh	r3, [r3, #16]
    2012:	0030      	movs	r0, r6
    2014:	80f3      	strh	r3, [r6, #6]
    2016:	466b      	mov	r3, sp
    2018:	8b1b      	ldrh	r3, [r3, #24]
    201a:	0022      	movs	r2, r4
    201c:	8133      	strh	r3, [r6, #8]
    201e:	0039      	movs	r1, r7
    2020:	80b4      	strh	r4, [r6, #4]
    2022:	300a      	adds	r0, #10
    2024:	f00d fd93 	bl	fb4e <memcpy>
    2028:	0031      	movs	r1, r6
    202a:	9805      	ldr	r0, [sp, #20]
    202c:	f008 ff60 	bl	aef0 <WsfQueueEnq>
    2030:	9807      	ldr	r0, [sp, #28]
    2032:	3008      	adds	r0, #8
    2034:	b280      	uxth	r0, r0
    2036:	f7fe f8d9 	bl	1ec <attMsgAlloc>
    203a:	1e05      	subs	r5, r0, #0
    203c:	d037      	beq.n	20ae <attsProcPrepWriteReq+0x126>
    203e:	2317      	movs	r3, #23
    2040:	7203      	strb	r3, [r0, #8]
    2042:	466b      	mov	r3, sp
    2044:	7c1b      	ldrb	r3, [r3, #16]
    2046:	0022      	movs	r2, r4
    2048:	7243      	strb	r3, [r0, #9]
    204a:	9b04      	ldr	r3, [sp, #16]
    204c:	0039      	movs	r1, r7
    204e:	0a1b      	lsrs	r3, r3, #8
    2050:	7283      	strb	r3, [r0, #10]
    2052:	466b      	mov	r3, sp
    2054:	7e1b      	ldrb	r3, [r3, #24]
    2056:	72c3      	strb	r3, [r0, #11]
    2058:	9b06      	ldr	r3, [sp, #24]
    205a:	0a1b      	lsrs	r3, r3, #8
    205c:	7303      	strb	r3, [r0, #12]
    205e:	300d      	adds	r0, #13
    2060:	f00d fd75 	bl	fb4e <memcpy>
    2064:	9b05      	ldr	r3, [sp, #20]
    2066:	9a07      	ldr	r2, [sp, #28]
    2068:	8b19      	ldrh	r1, [r3, #24]
    206a:	2004      	movs	r0, #4
    206c:	002b      	movs	r3, r5
    206e:	f001 fdc5 	bl	3bfc <L2cDataReq>
    2072:	e01c      	b.n	20ae <attsProcPrepWriteReq+0x126>
    2074:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2076:	68db      	ldr	r3, [r3, #12]
    2078:	469c      	mov	ip, r3
    207a:	2b00      	cmp	r3, #0
    207c:	d0c7      	beq.n	200e <attsProcPrepWriteReq+0x86>
    207e:	9b05      	ldr	r3, [sp, #20]
    2080:	2216      	movs	r2, #22
    2082:	7f18      	ldrb	r0, [r3, #28]
    2084:	9904      	ldr	r1, [sp, #16]
    2086:	9502      	str	r5, [sp, #8]
    2088:	2300      	movs	r3, #0
    208a:	9701      	str	r7, [sp, #4]
    208c:	9400      	str	r4, [sp, #0]
    208e:	4665      	mov	r5, ip
    2090:	47a8      	blx	r5
    2092:	1e03      	subs	r3, r0, #0
    2094:	d0bb      	beq.n	200e <attsProcPrepWriteReq+0x86>
    2096:	e004      	b.n	20a2 <attsProcPrepWriteReq+0x11a>
    2098:	2301      	movs	r3, #1
    209a:	e002      	b.n	20a2 <attsProcPrepWriteReq+0x11a>
    209c:	230b      	movs	r3, #11
    209e:	e000      	b.n	20a2 <attsProcPrepWriteReq+0x11a>
    20a0:	2311      	movs	r3, #17
    20a2:	9a05      	ldr	r2, [sp, #20]
    20a4:	2116      	movs	r1, #22
    20a6:	8b10      	ldrh	r0, [r2, #24]
    20a8:	9a04      	ldr	r2, [sp, #16]
    20aa:	f7ff f865 	bl	1178 <attsErrRsp>
    20ae:	b00b      	add	sp, #44	; 0x2c
    20b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20b2:	46c0      	nop			; (mov r8, r8)
    20b4:	10001088 	.word	0x10001088

000020b8 <attsProcExecWriteReq>:
    20b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    20ba:	7a53      	ldrb	r3, [r2, #9]
    20bc:	b087      	sub	sp, #28
    20be:	0006      	movs	r6, r0
    20c0:	2b00      	cmp	r3, #0
    20c2:	d102      	bne.n	20ca <attsProcExecWriteReq+0x12>
    20c4:	f7ff f8a6 	bl	1214 <attsClearPrepWrites>
    20c8:	e068      	b.n	219c <attsProcExecWriteReq+0xe4>
    20ca:	2404      	movs	r4, #4
    20cc:	2b01      	cmp	r3, #1
    20ce:	d15e      	bne.n	218e <attsProcExecWriteReq+0xd6>
    20d0:	6804      	ldr	r4, [r0, #0]
    20d2:	2c00      	cmp	r4, #0
    20d4:	d032      	beq.n	213c <attsProcExecWriteReq+0x84>
    20d6:	88e0      	ldrh	r0, [r4, #6]
    20d8:	a904      	add	r1, sp, #16
    20da:	f7ff f995 	bl	1408 <attsFindByHandle>
    20de:	2800      	cmp	r0, #0
    20e0:	d007      	beq.n	20f2 <attsProcExecWriteReq+0x3a>
    20e2:	8923      	ldrh	r3, [r4, #8]
    20e4:	8982      	ldrh	r2, [r0, #12]
    20e6:	4293      	cmp	r3, r2
    20e8:	d865      	bhi.n	21b6 <attsProcExecWriteReq+0xfe>
    20ea:	88a1      	ldrh	r1, [r4, #4]
    20ec:	18cb      	adds	r3, r1, r3
    20ee:	4293      	cmp	r3, r2
    20f0:	dc63      	bgt.n	21ba <attsProcExecWriteReq+0x102>
    20f2:	6824      	ldr	r4, [r4, #0]
    20f4:	e7ed      	b.n	20d2 <attsProcExecWriteReq+0x1a>
    20f6:	88e8      	ldrh	r0, [r5, #6]
    20f8:	a905      	add	r1, sp, #20
    20fa:	f7ff f985 	bl	1408 <attsFindByHandle>
    20fe:	1e07      	subs	r7, r0, #0
    2100:	d03e      	beq.n	2180 <attsProcExecWriteReq+0xc8>
    2102:	2210      	movs	r2, #16
    2104:	7bc3      	ldrb	r3, [r0, #15]
    2106:	2403      	movs	r4, #3
    2108:	4213      	tst	r3, r2
    210a:	d03a      	beq.n	2182 <attsProcExecWriteReq+0xca>
    210c:	002b      	movs	r3, r5
    210e:	7b82      	ldrb	r2, [r0, #14]
    2110:	330a      	adds	r3, #10
    2112:	0791      	lsls	r1, r2, #30
    2114:	d518      	bpl.n	2148 <attsProcExecWriteReq+0x90>
    2116:	9905      	ldr	r1, [sp, #20]
    2118:	68cc      	ldr	r4, [r1, #12]
    211a:	2c00      	cmp	r4, #0
    211c:	d014      	beq.n	2148 <attsProcExecWriteReq+0x90>
    211e:	892a      	ldrh	r2, [r5, #8]
    2120:	88e9      	ldrh	r1, [r5, #6]
    2122:	9702      	str	r7, [sp, #8]
    2124:	9301      	str	r3, [sp, #4]
    2126:	88ab      	ldrh	r3, [r5, #4]
    2128:	7f30      	ldrb	r0, [r6, #28]
    212a:	9300      	str	r3, [sp, #0]
    212c:	0013      	movs	r3, r2
    212e:	2218      	movs	r2, #24
    2130:	47a0      	blx	r4
    2132:	1e04      	subs	r4, r0, #0
    2134:	d125      	bne.n	2182 <attsProcExecWriteReq+0xca>
    2136:	0028      	movs	r0, r5
    2138:	f008 fe22 	bl	ad80 <WsfBufFree>
    213c:	0030      	movs	r0, r6
    213e:	f008 fef9 	bl	af34 <WsfQueueDeq>
    2142:	1e05      	subs	r5, r0, #0
    2144:	d1d7      	bne.n	20f6 <attsProcExecWriteReq+0x3e>
    2146:	e020      	b.n	218a <attsProcExecWriteReq+0xd2>
    2148:	0692      	lsls	r2, r2, #26
    214a:	d508      	bpl.n	215e <attsProcExecWriteReq+0xa6>
    214c:	4a1e      	ldr	r2, [pc, #120]	; (21c8 <attsProcExecWriteReq+0x110>)
    214e:	6954      	ldr	r4, [r2, #20]
    2150:	2c00      	cmp	r4, #0
    2152:	d004      	beq.n	215e <attsProcExecWriteReq+0xa6>
    2154:	88ea      	ldrh	r2, [r5, #6]
    2156:	7f30      	ldrb	r0, [r6, #28]
    2158:	2109      	movs	r1, #9
    215a:	47a0      	blx	r4
    215c:	e7e9      	b.n	2132 <attsProcExecWriteReq+0x7a>
    215e:	687a      	ldr	r2, [r7, #4]
    2160:	8928      	ldrh	r0, [r5, #8]
    2162:	0019      	movs	r1, r3
    2164:	1810      	adds	r0, r2, r0
    2166:	88aa      	ldrh	r2, [r5, #4]
    2168:	f00d fcf1 	bl	fb4e <memcpy>
    216c:	7bbb      	ldrb	r3, [r7, #14]
    216e:	2400      	movs	r4, #0
    2170:	071b      	lsls	r3, r3, #28
    2172:	d5e0      	bpl.n	2136 <attsProcExecWriteReq+0x7e>
    2174:	88a9      	ldrh	r1, [r5, #4]
    2176:	892b      	ldrh	r3, [r5, #8]
    2178:	68ba      	ldr	r2, [r7, #8]
    217a:	18cb      	adds	r3, r1, r3
    217c:	8013      	strh	r3, [r2, #0]
    217e:	e7da      	b.n	2136 <attsProcExecWriteReq+0x7e>
    2180:	240e      	movs	r4, #14
    2182:	0030      	movs	r0, r6
    2184:	f7ff f846 	bl	1214 <attsClearPrepWrites>
    2188:	e7d5      	b.n	2136 <attsProcExecWriteReq+0x7e>
    218a:	2c00      	cmp	r4, #0
    218c:	d006      	beq.n	219c <attsProcExecWriteReq+0xe4>
    218e:	8b30      	ldrh	r0, [r6, #24]
    2190:	0023      	movs	r3, r4
    2192:	2200      	movs	r2, #0
    2194:	2118      	movs	r1, #24
    2196:	f7fe ffef 	bl	1178 <attsErrRsp>
    219a:	e013      	b.n	21c4 <attsProcExecWriteReq+0x10c>
    219c:	2009      	movs	r0, #9
    219e:	f7fe f825 	bl	1ec <attMsgAlloc>
    21a2:	1e03      	subs	r3, r0, #0
    21a4:	d00e      	beq.n	21c4 <attsProcExecWriteReq+0x10c>
    21a6:	2219      	movs	r2, #25
    21a8:	7202      	strb	r2, [r0, #8]
    21aa:	8b31      	ldrh	r1, [r6, #24]
    21ac:	3a18      	subs	r2, #24
    21ae:	2004      	movs	r0, #4
    21b0:	f001 fd24 	bl	3bfc <L2cDataReq>
    21b4:	e006      	b.n	21c4 <attsProcExecWriteReq+0x10c>
    21b6:	2407      	movs	r4, #7
    21b8:	e000      	b.n	21bc <attsProcExecWriteReq+0x104>
    21ba:	240d      	movs	r4, #13
    21bc:	0030      	movs	r0, r6
    21be:	f7ff f829 	bl	1214 <attsClearPrepWrites>
    21c2:	e7e4      	b.n	218e <attsProcExecWriteReq+0xd6>
    21c4:	b007      	add	sp, #28
    21c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21c8:	10001584 	.word	0x10001584

000021cc <dmAdvCbInit>:
    21cc:	0002      	movs	r2, r0
    21ce:	23ff      	movs	r3, #255	; 0xff
    21d0:	b510      	push	{r4, lr}
    21d2:	4c0a      	ldr	r4, [pc, #40]	; (21fc <dmAdvCbInit+0x30>)
    21d4:	3208      	adds	r2, #8
    21d6:	1821      	adds	r1, r4, r0
    21d8:	750b      	strb	r3, [r1, #20]
    21da:	0053      	lsls	r3, r2, #1
    21dc:	22c8      	movs	r2, #200	; 0xc8
    21de:	00d2      	lsls	r2, r2, #3
    21e0:	531a      	strh	r2, [r3, r4]
    21e2:	3241      	adds	r2, #65	; 0x41
    21e4:	18e3      	adds	r3, r4, r3
    21e6:	32ff      	adds	r2, #255	; 0xff
    21e8:	805a      	strh	r2, [r3, #2]
    21ea:	2307      	movs	r3, #7
    21ec:	754b      	strb	r3, [r1, #21]
    21ee:	4b04      	ldr	r3, [pc, #16]	; (2200 <dmAdvCbInit+0x34>)
    21f0:	1818      	adds	r0, r3, r0
    21f2:	2300      	movs	r3, #0
    21f4:	7443      	strb	r3, [r0, #17]
    21f6:	75cb      	strb	r3, [r1, #23]
    21f8:	bd10      	pop	{r4, pc}
    21fa:	46c0      	nop			; (mov r8, r8)
    21fc:	1000159c 	.word	0x1000159c
    2200:	1000174c 	.word	0x1000174c

00002204 <dmAdvInit>:
    2204:	b510      	push	{r4, lr}
    2206:	2000      	movs	r0, #0
    2208:	f7ff ffe0 	bl	21cc <dmAdvCbInit>
    220c:	4b03      	ldr	r3, [pc, #12]	; (221c <dmAdvInit+0x18>)
    220e:	4a04      	ldr	r2, [pc, #16]	; (2220 <dmAdvInit+0x1c>)
    2210:	7b19      	ldrb	r1, [r3, #12]
    2212:	7211      	strb	r1, [r2, #8]
    2214:	2200      	movs	r2, #0
    2216:	739a      	strb	r2, [r3, #14]
    2218:	bd10      	pop	{r4, pc}
    221a:	46c0      	nop			; (mov r8, r8)
    221c:	1000174c 	.word	0x1000174c
    2220:	1000159c 	.word	0x1000159c

00002224 <DmAdvConfig>:
    2224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2226:	0006      	movs	r6, r0
    2228:	200e      	movs	r0, #14
    222a:	000f      	movs	r7, r1
    222c:	0015      	movs	r5, r2
    222e:	9301      	str	r3, [sp, #4]
    2230:	f008 fdf5 	bl	ae1e <WsfMsgAlloc>
    2234:	1e04      	subs	r4, r0, #0
    2236:	d00d      	beq.n	2254 <DmAdvConfig+0x30>
    2238:	2300      	movs	r3, #0
    223a:	7147      	strb	r7, [r0, #5]
    223c:	7083      	strb	r3, [r0, #2]
    223e:	7106      	strb	r6, [r0, #4]
    2240:	7185      	strb	r5, [r0, #6]
    2242:	9901      	ldr	r1, [sp, #4]
    2244:	3007      	adds	r0, #7
    2246:	f00a fe19 	bl	ce7c <BdaCpy>
    224a:	4b03      	ldr	r3, [pc, #12]	; (2258 <DmAdvConfig+0x34>)
    224c:	0021      	movs	r1, r4
    224e:	7b18      	ldrb	r0, [r3, #12]
    2250:	f008 fe09 	bl	ae66 <WsfMsgSend>
    2254:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2256:	46c0      	nop			; (mov r8, r8)
    2258:	1000174c 	.word	0x1000174c

0000225c <DmAdvSetData>:
    225c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    225e:	0007      	movs	r7, r0
    2260:	200c      	movs	r0, #12
    2262:	000e      	movs	r6, r1
    2264:	0015      	movs	r5, r2
    2266:	001c      	movs	r4, r3
    2268:	f008 fdd9 	bl	ae1e <WsfMsgAlloc>
    226c:	1e01      	subs	r1, r0, #0
    226e:	d00b      	beq.n	2288 <DmAdvSetData+0x2c>
    2270:	2301      	movs	r3, #1
    2272:	7083      	strb	r3, [r0, #2]
    2274:	9b06      	ldr	r3, [sp, #24]
    2276:	7107      	strb	r7, [r0, #4]
    2278:	6083      	str	r3, [r0, #8]
    227a:	4b04      	ldr	r3, [pc, #16]	; (228c <DmAdvSetData+0x30>)
    227c:	7146      	strb	r6, [r0, #5]
    227e:	7185      	strb	r5, [r0, #6]
    2280:	71c4      	strb	r4, [r0, #7]
    2282:	7b18      	ldrb	r0, [r3, #12]
    2284:	f008 fdef 	bl	ae66 <WsfMsgSend>
    2288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    228a:	46c0      	nop			; (mov r8, r8)
    228c:	1000174c 	.word	0x1000174c

00002290 <DmAdvStart>:
    2290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2292:	0004      	movs	r4, r0
    2294:	200a      	movs	r0, #10
    2296:	000f      	movs	r7, r1
    2298:	0016      	movs	r6, r2
    229a:	001d      	movs	r5, r3
    229c:	f008 fdbf 	bl	ae1e <WsfMsgAlloc>
    22a0:	1e01      	subs	r1, r0, #0
    22a2:	d00e      	beq.n	22c2 <DmAdvStart+0x32>
    22a4:	2302      	movs	r3, #2
    22a6:	7104      	strb	r4, [r0, #4]
    22a8:	7083      	strb	r3, [r0, #2]
    22aa:	2c00      	cmp	r4, #0
    22ac:	d005      	beq.n	22ba <DmAdvStart+0x2a>
    22ae:	783b      	ldrb	r3, [r7, #0]
    22b0:	7143      	strb	r3, [r0, #5]
    22b2:	8833      	ldrh	r3, [r6, #0]
    22b4:	80c3      	strh	r3, [r0, #6]
    22b6:	782b      	ldrb	r3, [r5, #0]
    22b8:	7203      	strb	r3, [r0, #8]
    22ba:	4b02      	ldr	r3, [pc, #8]	; (22c4 <DmAdvStart+0x34>)
    22bc:	7b18      	ldrb	r0, [r3, #12]
    22be:	f008 fdd2 	bl	ae66 <WsfMsgSend>
    22c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22c4:	1000174c 	.word	0x1000174c

000022c8 <DmAdvStop>:
    22c8:	b570      	push	{r4, r5, r6, lr}
    22ca:	0004      	movs	r4, r0
    22cc:	2006      	movs	r0, #6
    22ce:	000d      	movs	r5, r1
    22d0:	f008 fda5 	bl	ae1e <WsfMsgAlloc>
    22d4:	1e01      	subs	r1, r0, #0
    22d6:	d00f      	beq.n	22f8 <DmAdvStop+0x30>
    22d8:	2303      	movs	r3, #3
    22da:	7083      	strb	r3, [r0, #2]
    22dc:	2300      	movs	r3, #0
    22de:	7104      	strb	r4, [r0, #4]
    22e0:	b2da      	uxtb	r2, r3
    22e2:	4294      	cmp	r4, r2
    22e4:	d904      	bls.n	22f0 <DmAdvStop+0x28>
    22e6:	5ce8      	ldrb	r0, [r5, r3]
    22e8:	18ca      	adds	r2, r1, r3
    22ea:	7150      	strb	r0, [r2, #5]
    22ec:	3301      	adds	r3, #1
    22ee:	e7f7      	b.n	22e0 <DmAdvStop+0x18>
    22f0:	4b02      	ldr	r3, [pc, #8]	; (22fc <DmAdvStop+0x34>)
    22f2:	7b18      	ldrb	r0, [r3, #12]
    22f4:	f008 fdb7 	bl	ae66 <WsfMsgSend>
    22f8:	bd70      	pop	{r4, r5, r6, pc}
    22fa:	46c0      	nop			; (mov r8, r8)
    22fc:	1000174c 	.word	0x1000174c

00002300 <DmAdvRemoveAdvSet>:
    2300:	b510      	push	{r4, lr}
    2302:	0004      	movs	r4, r0
    2304:	2006      	movs	r0, #6
    2306:	f008 fd8a 	bl	ae1e <WsfMsgAlloc>
    230a:	1e01      	subs	r1, r0, #0
    230c:	d006      	beq.n	231c <DmAdvRemoveAdvSet+0x1c>
    230e:	2304      	movs	r3, #4
    2310:	7083      	strb	r3, [r0, #2]
    2312:	4b03      	ldr	r3, [pc, #12]	; (2320 <DmAdvRemoveAdvSet+0x20>)
    2314:	7104      	strb	r4, [r0, #4]
    2316:	7b18      	ldrb	r0, [r3, #12]
    2318:	f008 fda5 	bl	ae66 <WsfMsgSend>
    231c:	bd10      	pop	{r4, pc}
    231e:	46c0      	nop			; (mov r8, r8)
    2320:	1000174c 	.word	0x1000174c

00002324 <DmAdvClearAdvSets>:
    2324:	b510      	push	{r4, lr}
    2326:	2004      	movs	r0, #4
    2328:	f008 fd79 	bl	ae1e <WsfMsgAlloc>
    232c:	1e01      	subs	r1, r0, #0
    232e:	d005      	beq.n	233c <DmAdvClearAdvSets+0x18>
    2330:	2305      	movs	r3, #5
    2332:	7083      	strb	r3, [r0, #2]
    2334:	4b02      	ldr	r3, [pc, #8]	; (2340 <DmAdvClearAdvSets+0x1c>)
    2336:	7b18      	ldrb	r0, [r3, #12]
    2338:	f008 fd95 	bl	ae66 <WsfMsgSend>
    233c:	bd10      	pop	{r4, pc}
    233e:	46c0      	nop			; (mov r8, r8)
    2340:	1000174c 	.word	0x1000174c

00002344 <DmAdvSetInterval>:
    2344:	b570      	push	{r4, r5, r6, lr}
    2346:	0004      	movs	r4, r0
    2348:	000e      	movs	r6, r1
    234a:	0015      	movs	r5, r2
    234c:	3408      	adds	r4, #8
    234e:	f007 fe97 	bl	a080 <WsfTaskLock>
    2352:	4b04      	ldr	r3, [pc, #16]	; (2364 <DmAdvSetInterval+0x20>)
    2354:	0060      	lsls	r0, r4, #1
    2356:	52c6      	strh	r6, [r0, r3]
    2358:	1818      	adds	r0, r3, r0
    235a:	8045      	strh	r5, [r0, #2]
    235c:	f007 fe96 	bl	a08c <WsfTaskUnlock>
    2360:	bd70      	pop	{r4, r5, r6, pc}
    2362:	46c0      	nop			; (mov r8, r8)
    2364:	1000159c 	.word	0x1000159c

00002368 <DmAdvSetChannelMap>:
    2368:	b570      	push	{r4, r5, r6, lr}
    236a:	0004      	movs	r4, r0
    236c:	000d      	movs	r5, r1
    236e:	f007 fe87 	bl	a080 <WsfTaskLock>
    2372:	4b03      	ldr	r3, [pc, #12]	; (2380 <DmAdvSetChannelMap+0x18>)
    2374:	191c      	adds	r4, r3, r4
    2376:	7565      	strb	r5, [r4, #21]
    2378:	f007 fe88 	bl	a08c <WsfTaskUnlock>
    237c:	bd70      	pop	{r4, r5, r6, pc}
    237e:	46c0      	nop			; (mov r8, r8)
    2380:	1000159c 	.word	0x1000159c

00002384 <DmAdvSetAddrType>:
    2384:	b510      	push	{r4, lr}
    2386:	0004      	movs	r4, r0
    2388:	f007 fe7a 	bl	a080 <WsfTaskLock>
    238c:	4b02      	ldr	r3, [pc, #8]	; (2398 <DmAdvSetAddrType+0x14>)
    238e:	739c      	strb	r4, [r3, #14]
    2390:	f007 fe7c 	bl	a08c <WsfTaskUnlock>
    2394:	bd10      	pop	{r4, pc}
    2396:	46c0      	nop			; (mov r8, r8)
    2398:	1000174c 	.word	0x1000174c

0000239c <DmAdvSetAdValue>:
    239c:	b5f0      	push	{r4, r5, r6, r7, lr}
    239e:	001e      	movs	r6, r3
    23a0:	b085      	sub	sp, #20
    23a2:	ab0a      	add	r3, sp, #40	; 0x28
    23a4:	cb80      	ldmia	r3!, {r7}
    23a6:	000c      	movs	r4, r1
    23a8:	881b      	ldrh	r3, [r3, #0]
    23aa:	9202      	str	r2, [sp, #8]
    23ac:	8831      	ldrh	r1, [r6, #0]
    23ae:	003a      	movs	r2, r7
    23b0:	9001      	str	r0, [sp, #4]
    23b2:	9303      	str	r3, [sp, #12]
    23b4:	f000 ff56 	bl	3264 <DmFindAdType>
    23b8:	2800      	cmp	r0, #0
    23ba:	d01b      	beq.n	23f4 <DmAdvSetAdValue+0x58>
    23bc:	7805      	ldrb	r5, [r0, #0]
    23be:	1c63      	adds	r3, r4, #1
    23c0:	42ab      	cmp	r3, r5
    23c2:	d105      	bne.n	23d0 <DmAdvSetAdValue+0x34>
    23c4:	0022      	movs	r2, r4
    23c6:	9902      	ldr	r1, [sp, #8]
    23c8:	3002      	adds	r0, #2
    23ca:	f00d fbc0 	bl	fb4e <memcpy>
    23ce:	e026      	b.n	241e <DmAdvSetAdValue+0x82>
    23d0:	8832      	ldrh	r2, [r6, #0]
    23d2:	b2ad      	uxth	r5, r5
    23d4:	18d3      	adds	r3, r2, r3
    23d6:	1b5b      	subs	r3, r3, r5
    23d8:	9903      	ldr	r1, [sp, #12]
    23da:	b29b      	uxth	r3, r3
    23dc:	428b      	cmp	r3, r1
    23de:	d809      	bhi.n	23f4 <DmAdvSetAdValue+0x58>
    23e0:	3501      	adds	r5, #1
    23e2:	1941      	adds	r1, r0, r5
    23e4:	1bcb      	subs	r3, r1, r7
    23e6:	b2db      	uxtb	r3, r3
    23e8:	1ad2      	subs	r2, r2, r3
    23ea:	f00d fbbb 	bl	fb64 <memmove>
    23ee:	8833      	ldrh	r3, [r6, #0]
    23f0:	1b5d      	subs	r5, r3, r5
    23f2:	8035      	strh	r5, [r6, #0]
    23f4:	8830      	ldrh	r0, [r6, #0]
    23f6:	9a03      	ldr	r2, [sp, #12]
    23f8:	1903      	adds	r3, r0, r4
    23fa:	3301      	adds	r3, #1
    23fc:	4293      	cmp	r3, r2
    23fe:	da10      	bge.n	2422 <DmAdvSetAdValue+0x86>
    2400:	1838      	adds	r0, r7, r0
    2402:	1c63      	adds	r3, r4, #1
    2404:	7003      	strb	r3, [r0, #0]
    2406:	466b      	mov	r3, sp
    2408:	791b      	ldrb	r3, [r3, #4]
    240a:	0022      	movs	r2, r4
    240c:	7043      	strb	r3, [r0, #1]
    240e:	9902      	ldr	r1, [sp, #8]
    2410:	3002      	adds	r0, #2
    2412:	f00d fb9c 	bl	fb4e <memcpy>
    2416:	8833      	ldrh	r3, [r6, #0]
    2418:	3402      	adds	r4, #2
    241a:	18e4      	adds	r4, r4, r3
    241c:	8034      	strh	r4, [r6, #0]
    241e:	2001      	movs	r0, #1
    2420:	e000      	b.n	2424 <DmAdvSetAdValue+0x88>
    2422:	2000      	movs	r0, #0
    2424:	b005      	add	sp, #20
    2426:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002428 <DmAdvSetName>:
    2428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    242a:	001f      	movs	r7, r3
    242c:	0005      	movs	r5, r0
    242e:	9101      	str	r1, [sp, #4]
    2430:	0014      	movs	r4, r2
    2432:	ab08      	add	r3, sp, #32
    2434:	8811      	ldrh	r1, [r2, #0]
    2436:	2009      	movs	r0, #9
    2438:	003a      	movs	r2, r7
    243a:	881e      	ldrh	r6, [r3, #0]
    243c:	f000 ff12 	bl	3264 <DmFindAdType>
    2440:	2800      	cmp	r0, #0
    2442:	d106      	bne.n	2452 <DmAdvSetName+0x2a>
    2444:	8821      	ldrh	r1, [r4, #0]
    2446:	003a      	movs	r2, r7
    2448:	3008      	adds	r0, #8
    244a:	f000 ff0b 	bl	3264 <DmFindAdType>
    244e:	2800      	cmp	r0, #0
    2450:	d00d      	beq.n	246e <DmAdvSetName+0x46>
    2452:	7803      	ldrb	r3, [r0, #0]
    2454:	3301      	adds	r3, #1
    2456:	18c1      	adds	r1, r0, r3
    2458:	9300      	str	r3, [sp, #0]
    245a:	1bca      	subs	r2, r1, r7
    245c:	8823      	ldrh	r3, [r4, #0]
    245e:	b2d2      	uxtb	r2, r2
    2460:	1a9a      	subs	r2, r3, r2
    2462:	f00d fb7f 	bl	fb64 <memmove>
    2466:	8823      	ldrh	r3, [r4, #0]
    2468:	9a00      	ldr	r2, [sp, #0]
    246a:	1a9b      	subs	r3, r3, r2
    246c:	8023      	strh	r3, [r4, #0]
    246e:	8823      	ldrh	r3, [r4, #0]
    2470:	1e72      	subs	r2, r6, #1
    2472:	2000      	movs	r0, #0
    2474:	429a      	cmp	r2, r3
    2476:	dd16      	ble.n	24a6 <DmAdvSetName+0x7e>
    2478:	18ea      	adds	r2, r5, r3
    247a:	3201      	adds	r2, #1
    247c:	2109      	movs	r1, #9
    247e:	4296      	cmp	r6, r2
    2480:	dc03      	bgt.n	248a <DmAdvSetName+0x62>
    2482:	3e02      	subs	r6, #2
    2484:	1af5      	subs	r5, r6, r3
    2486:	b2ed      	uxtb	r5, r5
    2488:	3901      	subs	r1, #1
    248a:	18ff      	adds	r7, r7, r3
    248c:	1c6b      	adds	r3, r5, #1
    248e:	703b      	strb	r3, [r7, #0]
    2490:	7079      	strb	r1, [r7, #1]
    2492:	002a      	movs	r2, r5
    2494:	1cb8      	adds	r0, r7, #2
    2496:	9901      	ldr	r1, [sp, #4]
    2498:	f00d fb59 	bl	fb4e <memcpy>
    249c:	2001      	movs	r0, #1
    249e:	8823      	ldrh	r3, [r4, #0]
    24a0:	3302      	adds	r3, #2
    24a2:	195d      	adds	r5, r3, r5
    24a4:	8025      	strh	r5, [r4, #0]
    24a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000024a8 <dmAdvActClearSets>:
    24a8:	4770      	bx	lr

000024aa <dmAdvMsgHandler>:
    24aa:	230f      	movs	r3, #15
    24ac:	7882      	ldrb	r2, [r0, #2]
    24ae:	b510      	push	{r4, lr}
    24b0:	4013      	ands	r3, r2
    24b2:	4a02      	ldr	r2, [pc, #8]	; (24bc <dmAdvMsgHandler+0x12>)
    24b4:	009b      	lsls	r3, r3, #2
    24b6:	589b      	ldr	r3, [r3, r2]
    24b8:	4798      	blx	r3
    24ba:	bd10      	pop	{r4, pc}
    24bc:	000109f4 	.word	0x000109f4

000024c0 <dmAdvConfig>:
    24c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    24c2:	4c0f      	ldr	r4, [pc, #60]	; (2500 <dmAdvConfig+0x40>)
    24c4:	b089      	sub	sp, #36	; 0x24
    24c6:	9106      	str	r1, [sp, #24]
    24c8:	9207      	str	r2, [sp, #28]
    24ca:	8a63      	ldrh	r3, [r4, #18]
    24cc:	4e0d      	ldr	r6, [pc, #52]	; (2504 <dmAdvConfig+0x44>)
    24ce:	8a27      	ldrh	r7, [r4, #16]
    24d0:	9305      	str	r3, [sp, #20]
    24d2:	0005      	movs	r5, r0
    24d4:	7bb0      	ldrb	r0, [r6, #14]
    24d6:	f000 ff05 	bl	32e4 <DmLlAddrType>
    24da:	7c72      	ldrb	r2, [r6, #17]
    24dc:	0003      	movs	r3, r0
    24de:	9203      	str	r2, [sp, #12]
    24e0:	7d62      	ldrb	r2, [r4, #21]
    24e2:	9905      	ldr	r1, [sp, #20]
    24e4:	9202      	str	r2, [sp, #8]
    24e6:	9a07      	ldr	r2, [sp, #28]
    24e8:	0038      	movs	r0, r7
    24ea:	9201      	str	r2, [sp, #4]
    24ec:	9a06      	ldr	r2, [sp, #24]
    24ee:	9200      	str	r2, [sp, #0]
    24f0:	002a      	movs	r2, r5
    24f2:	f004 fb5b 	bl	6bac <HciLeSetAdvParamCmd>
    24f6:	4b04      	ldr	r3, [pc, #16]	; (2508 <dmAdvConfig+0x48>)
    24f8:	701d      	strb	r5, [r3, #0]
    24fa:	b009      	add	sp, #36	; 0x24
    24fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24fe:	46c0      	nop			; (mov r8, r8)
    2500:	1000159c 	.word	0x1000159c
    2504:	1000174c 	.word	0x1000174c
    2508:	100015b8 	.word	0x100015b8

0000250c <dmAdvReset>:
    250c:	b507      	push	{r0, r1, r2, lr}
    250e:	480c      	ldr	r0, [pc, #48]	; (2540 <dmAdvReset+0x34>)
    2510:	7dc3      	ldrb	r3, [r0, #23]
    2512:	2b05      	cmp	r3, #5
    2514:	d006      	beq.n	2524 <dmAdvReset+0x18>
    2516:	2b01      	cmp	r3, #1
    2518:	d10e      	bne.n	2538 <dmAdvReset+0x2c>
    251a:	7d03      	ldrb	r3, [r0, #20]
    251c:	2b01      	cmp	r3, #1
    251e:	d00b      	beq.n	2538 <dmAdvReset+0x2c>
    2520:	2b04      	cmp	r3, #4
    2522:	d009      	beq.n	2538 <dmAdvReset+0x2c>
    2524:	f008 fe5a 	bl	b1dc <WsfTimerStop>
    2528:	2300      	movs	r3, #0
    252a:	a801      	add	r0, sp, #4
    252c:	70c3      	strb	r3, [r0, #3]
    252e:	3322      	adds	r3, #34	; 0x22
    2530:	7083      	strb	r3, [r0, #2]
    2532:	4b04      	ldr	r3, [pc, #16]	; (2544 <dmAdvReset+0x38>)
    2534:	689b      	ldr	r3, [r3, #8]
    2536:	4798      	blx	r3
    2538:	f7ff fe64 	bl	2204 <dmAdvInit>
    253c:	bd07      	pop	{r0, r1, r2, pc}
    253e:	46c0      	nop			; (mov r8, r8)
    2540:	1000159c 	.word	0x1000159c
    2544:	1000174c 	.word	0x1000174c

00002548 <dmAdvActConfig>:
    2548:	b510      	push	{r4, lr}
    254a:	4b07      	ldr	r3, [pc, #28]	; (2568 <dmAdvActConfig+0x20>)
    254c:	7dda      	ldrb	r2, [r3, #23]
    254e:	2a00      	cmp	r2, #0
    2550:	d109      	bne.n	2566 <dmAdvActConfig+0x1e>
    2552:	7d1b      	ldrb	r3, [r3, #20]
    2554:	2b01      	cmp	r3, #1
    2556:	d006      	beq.n	2566 <dmAdvActConfig+0x1e>
    2558:	2b04      	cmp	r3, #4
    255a:	d004      	beq.n	2566 <dmAdvActConfig+0x1e>
    255c:	1dc2      	adds	r2, r0, #7
    255e:	7981      	ldrb	r1, [r0, #6]
    2560:	7940      	ldrb	r0, [r0, #5]
    2562:	f7ff ffad 	bl	24c0 <dmAdvConfig>
    2566:	bd10      	pop	{r4, pc}
    2568:	1000159c 	.word	0x1000159c

0000256c <dmAdvActSetData>:
    256c:	b510      	push	{r4, lr}
    256e:	4a08      	ldr	r2, [pc, #32]	; (2590 <dmAdvActSetData+0x24>)
    2570:	0003      	movs	r3, r0
    2572:	7dd2      	ldrb	r2, [r2, #23]
    2574:	2a00      	cmp	r2, #0
    2576:	d109      	bne.n	258c <dmAdvActSetData+0x20>
    2578:	7982      	ldrb	r2, [r0, #6]
    257a:	6899      	ldr	r1, [r3, #8]
    257c:	79c0      	ldrb	r0, [r0, #7]
    257e:	2a00      	cmp	r2, #0
    2580:	d102      	bne.n	2588 <dmAdvActSetData+0x1c>
    2582:	f004 fae3 	bl	6b4c <HciLeSetAdvDataCmd>
    2586:	e001      	b.n	258c <dmAdvActSetData+0x20>
    2588:	f004 fbb3 	bl	6cf2 <HciLeSetScanRespDataCmd>
    258c:	bd10      	pop	{r4, pc}
    258e:	46c0      	nop			; (mov r8, r8)
    2590:	1000159c 	.word	0x1000159c

00002594 <dmAdvActStart>:
    2594:	b510      	push	{r4, lr}
    2596:	4b08      	ldr	r3, [pc, #32]	; (25b8 <dmAdvActStart+0x24>)
    2598:	7dda      	ldrb	r2, [r3, #23]
    259a:	2a00      	cmp	r2, #0
    259c:	d10b      	bne.n	25b6 <dmAdvActStart+0x22>
    259e:	7d1a      	ldrb	r2, [r3, #20]
    25a0:	2a01      	cmp	r2, #1
    25a2:	d008      	beq.n	25b6 <dmAdvActStart+0x22>
    25a4:	2a04      	cmp	r2, #4
    25a6:	d006      	beq.n	25b6 <dmAdvActStart+0x22>
    25a8:	2203      	movs	r2, #3
    25aa:	75da      	strb	r2, [r3, #23]
    25ac:	88c2      	ldrh	r2, [r0, #6]
    25ae:	2001      	movs	r0, #1
    25b0:	831a      	strh	r2, [r3, #24]
    25b2:	f004 faae 	bl	6b12 <HciLeSetAdvEnableCmd>
    25b6:	bd10      	pop	{r4, pc}
    25b8:	1000159c 	.word	0x1000159c

000025bc <dmAdvActStop>:
    25bc:	b510      	push	{r4, lr}
    25be:	4b07      	ldr	r3, [pc, #28]	; (25dc <dmAdvActStop+0x20>)
    25c0:	7dda      	ldrb	r2, [r3, #23]
    25c2:	2a01      	cmp	r2, #1
    25c4:	d109      	bne.n	25da <dmAdvActStop+0x1e>
    25c6:	7d1a      	ldrb	r2, [r3, #20]
    25c8:	2a01      	cmp	r2, #1
    25ca:	d006      	beq.n	25da <dmAdvActStop+0x1e>
    25cc:	2a04      	cmp	r2, #4
    25ce:	d004      	beq.n	25da <dmAdvActStop+0x1e>
    25d0:	2205      	movs	r2, #5
    25d2:	2000      	movs	r0, #0
    25d4:	75da      	strb	r2, [r3, #23]
    25d6:	f004 fa9c 	bl	6b12 <HciLeSetAdvEnableCmd>
    25da:	bd10      	pop	{r4, pc}
    25dc:	1000159c 	.word	0x1000159c

000025e0 <dmAdvActTimeout>:
    25e0:	b510      	push	{r4, lr}
    25e2:	f7ff ffeb 	bl	25bc <dmAdvActStop>
    25e6:	bd10      	pop	{r4, pc}

000025e8 <dmAdvHciHandler>:
    25e8:	b570      	push	{r4, r5, r6, lr}
    25ea:	7883      	ldrb	r3, [r0, #2]
    25ec:	0005      	movs	r5, r0
    25ee:	2b35      	cmp	r3, #53	; 0x35
    25f0:	d145      	bne.n	267e <dmAdvHciHandler+0x96>
    25f2:	4c23      	ldr	r4, [pc, #140]	; (2680 <dmAdvHciHandler+0x98>)
    25f4:	7de3      	ldrb	r3, [r4, #23]
    25f6:	2b03      	cmp	r3, #3
    25f8:	d003      	beq.n	2602 <dmAdvHciHandler+0x1a>
    25fa:	2b05      	cmp	r3, #5
    25fc:	d137      	bne.n	266e <dmAdvHciHandler+0x86>
    25fe:	2622      	movs	r6, #34	; 0x22
    2600:	e018      	b.n	2634 <dmAdvHciHandler+0x4c>
    2602:	2621      	movs	r6, #33	; 0x21
    2604:	78ea      	ldrb	r2, [r5, #3]
    2606:	2a00      	cmp	r2, #0
    2608:	d125      	bne.n	2656 <dmAdvHciHandler+0x6e>
    260a:	2b03      	cmp	r3, #3
    260c:	d10e      	bne.n	262c <dmAdvHciHandler+0x44>
    260e:	8b21      	ldrh	r1, [r4, #24]
    2610:	2900      	cmp	r1, #0
    2612:	d004      	beq.n	261e <dmAdvHciHandler+0x36>
    2614:	3303      	adds	r3, #3
    2616:	0020      	movs	r0, r4
    2618:	7323      	strb	r3, [r4, #12]
    261a:	f008 fdcb 	bl	b1b4 <WsfTimerStartMs>
    261e:	2314      	movs	r3, #20
    2620:	70ab      	strb	r3, [r5, #2]
    2622:	4b18      	ldr	r3, [pc, #96]	; (2684 <dmAdvHciHandler+0x9c>)
    2624:	0028      	movs	r0, r5
    2626:	685b      	ldr	r3, [r3, #4]
    2628:	689b      	ldr	r3, [r3, #8]
    262a:	4798      	blx	r3
    262c:	4b16      	ldr	r3, [pc, #88]	; (2688 <dmAdvHciHandler+0xa0>)
    262e:	781b      	ldrb	r3, [r3, #0]
    2630:	7523      	strb	r3, [r4, #20]
    2632:	e012      	b.n	265a <dmAdvHciHandler+0x72>
    2634:	78ea      	ldrb	r2, [r5, #3]
    2636:	2a00      	cmp	r2, #0
    2638:	d10f      	bne.n	265a <dmAdvHciHandler+0x72>
    263a:	2b05      	cmp	r3, #5
    263c:	d109      	bne.n	2652 <dmAdvHciHandler+0x6a>
    263e:	0020      	movs	r0, r4
    2640:	f008 fdcc 	bl	b1dc <WsfTimerStop>
    2644:	2315      	movs	r3, #21
    2646:	70ab      	strb	r3, [r5, #2]
    2648:	4b0e      	ldr	r3, [pc, #56]	; (2684 <dmAdvHciHandler+0x9c>)
    264a:	0028      	movs	r0, r5
    264c:	685b      	ldr	r3, [r3, #4]
    264e:	689b      	ldr	r3, [r3, #8]
    2650:	4798      	blx	r3
    2652:	23ff      	movs	r3, #255	; 0xff
    2654:	7523      	strb	r3, [r4, #20]
    2656:	2300      	movs	r3, #0
    2658:	e000      	b.n	265c <dmAdvHciHandler+0x74>
    265a:	2301      	movs	r3, #1
    265c:	75e3      	strb	r3, [r4, #23]
    265e:	2e00      	cmp	r6, #0
    2660:	d00d      	beq.n	267e <dmAdvHciHandler+0x96>
    2662:	4b0a      	ldr	r3, [pc, #40]	; (268c <dmAdvHciHandler+0xa4>)
    2664:	70ae      	strb	r6, [r5, #2]
    2666:	689b      	ldr	r3, [r3, #8]
    2668:	0028      	movs	r0, r5
    266a:	4798      	blx	r3
    266c:	e007      	b.n	267e <dmAdvHciHandler+0x96>
    266e:	1e98      	subs	r0, r3, #2
    2670:	2803      	cmp	r0, #3
    2672:	d804      	bhi.n	267e <dmAdvHciHandler+0x96>
    2674:	2600      	movs	r6, #0
    2676:	f003 fda1 	bl	61bc <__gnu_thumb1_case_sqi>
    267a:	c5c5      	.short	0xc5c5
    267c:	dddd      	.short	0xdddd
    267e:	bd70      	pop	{r4, r5, r6, pc}
    2680:	1000159c 	.word	0x1000159c
    2684:	10001054 	.word	0x10001054
    2688:	100015b8 	.word	0x100015b8
    268c:	1000174c 	.word	0x1000174c

00002690 <dmAdvActRemoveSet>:
    2690:	4770      	bx	lr

00002692 <dmAdvStartDirected>:
    2692:	b510      	push	{r4, lr}
    2694:	4c07      	ldr	r4, [pc, #28]	; (26b4 <dmAdvStartDirected+0x22>)
    2696:	ab02      	add	r3, sp, #8
    2698:	0008      	movs	r0, r1
    269a:	7819      	ldrb	r1, [r3, #0]
    269c:	7de3      	ldrb	r3, [r4, #23]
    269e:	2b00      	cmp	r3, #0
    26a0:	d107      	bne.n	26b2 <dmAdvStartDirected+0x20>
    26a2:	9a03      	ldr	r2, [sp, #12]
    26a4:	f7ff ff0c 	bl	24c0 <dmAdvConfig>
    26a8:	2302      	movs	r3, #2
    26aa:	2001      	movs	r0, #1
    26ac:	75e3      	strb	r3, [r4, #23]
    26ae:	f004 fa30 	bl	6b12 <HciLeSetAdvEnableCmd>
    26b2:	bd10      	pop	{r4, pc}
    26b4:	1000159c 	.word	0x1000159c

000026b8 <dmAdvStopDirected>:
    26b8:	b510      	push	{r4, lr}
    26ba:	4b05      	ldr	r3, [pc, #20]	; (26d0 <dmAdvStopDirected+0x18>)
    26bc:	7dda      	ldrb	r2, [r3, #23]
    26be:	2a01      	cmp	r2, #1
    26c0:	d104      	bne.n	26cc <dmAdvStopDirected+0x14>
    26c2:	3203      	adds	r2, #3
    26c4:	2000      	movs	r0, #0
    26c6:	75da      	strb	r2, [r3, #23]
    26c8:	f004 fa23 	bl	6b12 <HciLeSetAdvEnableCmd>
    26cc:	bd10      	pop	{r4, pc}
    26ce:	46c0      	nop			; (mov r8, r8)
    26d0:	1000159c 	.word	0x1000159c

000026d4 <dmAdvConnectFailed>:
    26d4:	b510      	push	{r4, lr}
    26d6:	4c04      	ldr	r4, [pc, #16]	; (26e8 <dmAdvConnectFailed+0x14>)
    26d8:	0020      	movs	r0, r4
    26da:	f008 fd7f 	bl	b1dc <WsfTimerStop>
    26de:	23ff      	movs	r3, #255	; 0xff
    26e0:	7523      	strb	r3, [r4, #20]
    26e2:	2300      	movs	r3, #0
    26e4:	75e3      	strb	r3, [r4, #23]
    26e6:	bd10      	pop	{r4, pc}
    26e8:	1000159c 	.word	0x1000159c

000026ec <dmAdvConnected>:
    26ec:	b510      	push	{r4, lr}
    26ee:	f7ff fff1 	bl	26d4 <dmAdvConnectFailed>
    26f2:	bd10      	pop	{r4, pc}

000026f4 <DmAdvInit>:
    26f4:	b510      	push	{r4, lr}
    26f6:	f007 fcc3 	bl	a080 <WsfTaskLock>
    26fa:	4b04      	ldr	r3, [pc, #16]	; (270c <DmAdvInit+0x18>)
    26fc:	4a04      	ldr	r2, [pc, #16]	; (2710 <DmAdvInit+0x1c>)
    26fe:	331c      	adds	r3, #28
    2700:	6013      	str	r3, [r2, #0]
    2702:	f7ff fd7f 	bl	2204 <dmAdvInit>
    2706:	f007 fcc1 	bl	a08c <WsfTaskUnlock>
    270a:	bd10      	pop	{r4, pc}
    270c:	000109f4 	.word	0x000109f4
    2710:	10001054 	.word	0x10001054

00002714 <DmAdvModeLeg>:
    2714:	4b04      	ldr	r3, [pc, #16]	; (2728 <DmAdvModeLeg+0x14>)
    2716:	4805      	ldr	r0, [pc, #20]	; (272c <DmAdvModeLeg+0x18>)
    2718:	681b      	ldr	r3, [r3, #0]
    271a:	301c      	adds	r0, #28
    271c:	1a18      	subs	r0, r3, r0
    271e:	4243      	negs	r3, r0
    2720:	4158      	adcs	r0, r3
    2722:	b2c0      	uxtb	r0, r0
    2724:	4770      	bx	lr
    2726:	46c0      	nop			; (mov r8, r8)
    2728:	10001054 	.word	0x10001054
    272c:	000109f4 	.word	0x000109f4

00002730 <dmConnSmActNone>:
    2730:	4770      	bx	lr

00002732 <dmConnSmActHciUpdated>:
    2732:	2329      	movs	r3, #41	; 0x29
    2734:	b510      	push	{r4, lr}
    2736:	708b      	strb	r3, [r1, #2]
    2738:	4b02      	ldr	r3, [pc, #8]	; (2744 <dmConnSmActHciUpdated+0x12>)
    273a:	0008      	movs	r0, r1
    273c:	33fc      	adds	r3, #252	; 0xfc
    273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    2740:	4798      	blx	r3
    2742:	bd10      	pop	{r4, pc}
    2744:	100015bc 	.word	0x100015bc

00002748 <dmConnSmActClose>:
    2748:	b510      	push	{r4, lr}
    274a:	7909      	ldrb	r1, [r1, #4]
    274c:	8980      	ldrh	r0, [r0, #12]
    274e:	f003 fe59 	bl	6404 <HciDisconnectCmd>
    2752:	bd10      	pop	{r4, pc}

00002754 <dmConnReset>:
    2754:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    2756:	2339      	movs	r3, #57	; 0x39
    2758:	ad01      	add	r5, sp, #4
    275a:	70ab      	strb	r3, [r5, #2]
    275c:	4c14      	ldr	r4, [pc, #80]	; (27b0 <dmConnReset+0x5c>)
    275e:	2300      	movs	r3, #0
    2760:	0026      	movs	r6, r4
    2762:	712b      	strb	r3, [r5, #4]
    2764:	70eb      	strb	r3, [r5, #3]
    2766:	3316      	adds	r3, #22
    2768:	722b      	strb	r3, [r5, #8]
    276a:	7da3      	ldrb	r3, [r4, #22]
    276c:	2b00      	cmp	r3, #0
    276e:	d006      	beq.n	277e <dmConnReset+0x2a>
    2770:	7c23      	ldrb	r3, [r4, #16]
    2772:	0029      	movs	r1, r5
    2774:	0020      	movs	r0, r4
    2776:	80eb      	strh	r3, [r5, #6]
    2778:	802b      	strh	r3, [r5, #0]
    277a:	f000 fc93 	bl	30a4 <dmConnSmExecute>
    277e:	0033      	movs	r3, r6
    2780:	3361      	adds	r3, #97	; 0x61
    2782:	342c      	adds	r4, #44	; 0x2c
    2784:	33ff      	adds	r3, #255	; 0xff
    2786:	429c      	cmp	r4, r3
    2788:	d1ef      	bne.n	276a <dmConnReset+0x16>
    278a:	22c0      	movs	r2, #192	; 0xc0
    278c:	2330      	movs	r3, #48	; 0x30
    278e:	0030      	movs	r0, r6
    2790:	0052      	lsls	r2, r2, #1
    2792:	52b3      	strh	r3, [r6, r2]
    2794:	3202      	adds	r2, #2
    2796:	52b3      	strh	r3, [r6, r2]
    2798:	3075      	adds	r0, #117	; 0x75
    279a:	3a77      	subs	r2, #119	; 0x77
    279c:	3aff      	subs	r2, #255	; 0xff
    279e:	4905      	ldr	r1, [pc, #20]	; (27b4 <dmConnReset+0x60>)
    27a0:	30ff      	adds	r0, #255	; 0xff
    27a2:	f00d f9d4 	bl	fb4e <memcpy>
    27a6:	2200      	movs	r2, #0
    27a8:	4b03      	ldr	r3, [pc, #12]	; (27b8 <dmConnReset+0x64>)
    27aa:	74da      	strb	r2, [r3, #19]
    27ac:	735a      	strb	r2, [r3, #13]
    27ae:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    27b0:	100015bc 	.word	0x100015bc
    27b4:	00010a1c 	.word	0x00010a1c
    27b8:	1000174c 	.word	0x1000174c

000027bc <dmConnSetConnSpec>:
    27bc:	b570      	push	{r4, r5, r6, lr}
    27be:	0005      	movs	r5, r0
    27c0:	000c      	movs	r4, r1
    27c2:	f007 fc5d 	bl	a080 <WsfTaskLock>
    27c6:	0028      	movs	r0, r5
    27c8:	f000 fdcc 	bl	3364 <DmInitPhyToIdx>
    27cc:	220c      	movs	r2, #12
    27ce:	4350      	muls	r0, r2
    27d0:	4b04      	ldr	r3, [pc, #16]	; (27e4 <dmConnSetConnSpec+0x28>)
    27d2:	0021      	movs	r1, r4
    27d4:	1818      	adds	r0, r3, r0
    27d6:	3075      	adds	r0, #117	; 0x75
    27d8:	30ff      	adds	r0, #255	; 0xff
    27da:	f00d f9b8 	bl	fb4e <memcpy>
    27de:	f007 fc55 	bl	a08c <WsfTaskUnlock>
    27e2:	bd70      	pop	{r4, r5, r6, pc}
    27e4:	100015bc 	.word	0x100015bc

000027e8 <dmConnCcbAlloc>:
    27e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27ea:	0006      	movs	r6, r0
    27ec:	2300      	movs	r3, #0
    27ee:	4c0e      	ldr	r4, [pc, #56]	; (2828 <dmConnCcbAlloc+0x40>)
    27f0:	7da5      	ldrb	r5, [r4, #22]
    27f2:	1c5f      	adds	r7, r3, #1
    27f4:	2d00      	cmp	r5, #0
    27f6:	d111      	bne.n	281c <dmConnCcbAlloc+0x34>
    27f8:	222c      	movs	r2, #44	; 0x2c
    27fa:	0029      	movs	r1, r5
    27fc:	0020      	movs	r0, r4
    27fe:	f00d f9cb 	bl	fb98 <memset>
    2802:	0020      	movs	r0, r4
    2804:	0031      	movs	r1, r6
    2806:	f00a fb39 	bl	ce7c <BdaCpy>
    280a:	2301      	movs	r3, #1
    280c:	425b      	negs	r3, r3
    280e:	81a3      	strh	r3, [r4, #12]
    2810:	3302      	adds	r3, #2
    2812:	7427      	strb	r7, [r4, #16]
    2814:	7465      	strb	r5, [r4, #17]
    2816:	75a3      	strb	r3, [r4, #22]
    2818:	0020      	movs	r0, r4
    281a:	e004      	b.n	2826 <dmConnCcbAlloc+0x3e>
    281c:	b2fb      	uxtb	r3, r7
    281e:	342c      	adds	r4, #44	; 0x2c
    2820:	2b08      	cmp	r3, #8
    2822:	d1e5      	bne.n	27f0 <dmConnCcbAlloc+0x8>
    2824:	2000      	movs	r0, #0
    2826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2828:	100015bc 	.word	0x100015bc

0000282c <dmConnCcbDealloc>:
    282c:	2300      	movs	r3, #0
    282e:	7583      	strb	r3, [r0, #22]
    2830:	4770      	bx	lr

00002832 <dmConnCcbByHandle>:
    2832:	4b08      	ldr	r3, [pc, #32]	; (2854 <dmConnCcbByHandle+0x22>)
    2834:	001a      	movs	r2, r3
    2836:	3261      	adds	r2, #97	; 0x61
    2838:	32ff      	adds	r2, #255	; 0xff
    283a:	7d99      	ldrb	r1, [r3, #22]
    283c:	2900      	cmp	r1, #0
    283e:	d002      	beq.n	2846 <dmConnCcbByHandle+0x14>
    2840:	8999      	ldrh	r1, [r3, #12]
    2842:	4281      	cmp	r1, r0
    2844:	d004      	beq.n	2850 <dmConnCcbByHandle+0x1e>
    2846:	332c      	adds	r3, #44	; 0x2c
    2848:	4293      	cmp	r3, r2
    284a:	d1f6      	bne.n	283a <dmConnCcbByHandle+0x8>
    284c:	2000      	movs	r0, #0
    284e:	e000      	b.n	2852 <dmConnCcbByHandle+0x20>
    2850:	0018      	movs	r0, r3
    2852:	4770      	bx	lr
    2854:	100015bc 	.word	0x100015bc

00002858 <dmConn2HciHandler>:
    2858:	b530      	push	{r4, r5, lr}
    285a:	0004      	movs	r4, r0
    285c:	b085      	sub	sp, #20
    285e:	8800      	ldrh	r0, [r0, #0]
    2860:	f7ff ffe7 	bl	2832 <dmConnCcbByHandle>
    2864:	2800      	cmp	r0, #0
    2866:	d06a      	beq.n	293e <dmConn2HciHandler+0xe6>
    2868:	78a3      	ldrb	r3, [r4, #2]
    286a:	2b23      	cmp	r3, #35	; 0x23
    286c:	d03b      	beq.n	28e6 <dmConn2HciHandler+0x8e>
    286e:	d821      	bhi.n	28b4 <dmConn2HciHandler+0x5c>
    2870:	2b07      	cmp	r3, #7
    2872:	d029      	beq.n	28c8 <dmConn2HciHandler+0x70>
    2874:	2b0b      	cmp	r3, #11
    2876:	d162      	bne.n	293e <dmConn2HciHandler+0xe6>
    2878:	7a63      	ldrb	r3, [r4, #9]
    287a:	7a22      	ldrb	r2, [r4, #8]
    287c:	021b      	lsls	r3, r3, #8
    287e:	189b      	adds	r3, r3, r2
    2880:	7aa2      	ldrb	r2, [r4, #10]
    2882:	0021      	movs	r1, r4
    2884:	0412      	lsls	r2, r2, #16
    2886:	189b      	adds	r3, r3, r2
    2888:	6283      	str	r3, [r0, #40]	; 0x28
    288a:	466a      	mov	r2, sp
    288c:	2351      	movs	r3, #81	; 0x51
    288e:	7093      	strb	r3, [r2, #2]
    2890:	7c03      	ldrb	r3, [r0, #16]
    2892:	3108      	adds	r1, #8
    2894:	8013      	strh	r3, [r2, #0]
    2896:	2300      	movs	r3, #0
    2898:	70d3      	strb	r3, [r2, #3]
    289a:	7923      	ldrb	r3, [r4, #4]
    289c:	a802      	add	r0, sp, #8
    289e:	7113      	strb	r3, [r2, #4]
    28a0:	88e3      	ldrh	r3, [r4, #6]
    28a2:	80d3      	strh	r3, [r2, #6]
    28a4:	2208      	movs	r2, #8
    28a6:	f00d f952 	bl	fb4e <memcpy>
    28aa:	4b26      	ldr	r3, [pc, #152]	; (2944 <dmConn2HciHandler+0xec>)
    28ac:	4668      	mov	r0, sp
    28ae:	33fc      	adds	r3, #252	; 0xfc
    28b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    28b2:	e043      	b.n	293c <dmConn2HciHandler+0xe4>
    28b4:	2b27      	cmp	r3, #39	; 0x27
    28b6:	d028      	beq.n	290a <dmConn2HciHandler+0xb2>
    28b8:	2b28      	cmp	r3, #40	; 0x28
    28ba:	d033      	beq.n	2924 <dmConn2HciHandler+0xcc>
    28bc:	2b24      	cmp	r3, #36	; 0x24
    28be:	d13e      	bne.n	293e <dmConn2HciHandler+0xe6>
    28c0:	8983      	ldrh	r3, [r0, #12]
    28c2:	7c02      	ldrb	r2, [r0, #16]
    28c4:	2140      	movs	r1, #64	; 0x40
    28c6:	e011      	b.n	28ec <dmConn2HciHandler+0x94>
    28c8:	2208      	movs	r2, #8
    28ca:	466d      	mov	r5, sp
    28cc:	56a2      	ldrsb	r2, [r4, r2]
    28ce:	7923      	ldrb	r3, [r4, #4]
    28d0:	2438      	movs	r4, #56	; 0x38
    28d2:	8981      	ldrh	r1, [r0, #12]
    28d4:	7c00      	ldrb	r0, [r0, #16]
    28d6:	70ac      	strb	r4, [r5, #2]
    28d8:	8028      	strh	r0, [r5, #0]
    28da:	70eb      	strb	r3, [r5, #3]
    28dc:	4668      	mov	r0, sp
    28de:	712b      	strb	r3, [r5, #4]
    28e0:	80e9      	strh	r1, [r5, #6]
    28e2:	722a      	strb	r2, [r5, #8]
    28e4:	e027      	b.n	2936 <dmConn2HciHandler+0xde>
    28e6:	213f      	movs	r1, #63	; 0x3f
    28e8:	8983      	ldrh	r3, [r0, #12]
    28ea:	7c02      	ldrb	r2, [r0, #16]
    28ec:	4668      	mov	r0, sp
    28ee:	8002      	strh	r2, [r0, #0]
    28f0:	2200      	movs	r2, #0
    28f2:	7081      	strb	r1, [r0, #2]
    28f4:	70c2      	strb	r2, [r0, #3]
    28f6:	8083      	strh	r3, [r0, #4]
    28f8:	88e3      	ldrh	r3, [r4, #6]
    28fa:	80c3      	strh	r3, [r0, #6]
    28fc:	8923      	ldrh	r3, [r4, #8]
    28fe:	8103      	strh	r3, [r0, #8]
    2900:	8963      	ldrh	r3, [r4, #10]
    2902:	8143      	strh	r3, [r0, #10]
    2904:	89a3      	ldrh	r3, [r4, #12]
    2906:	8183      	strh	r3, [r0, #12]
    2908:	e015      	b.n	2936 <dmConn2HciHandler+0xde>
    290a:	7923      	ldrb	r3, [r4, #4]
    290c:	88e2      	ldrh	r2, [r4, #6]
    290e:	466c      	mov	r4, sp
    2910:	7c01      	ldrb	r1, [r0, #16]
    2912:	2041      	movs	r0, #65	; 0x41
    2914:	8021      	strh	r1, [r4, #0]
    2916:	2100      	movs	r1, #0
    2918:	70a0      	strb	r0, [r4, #2]
    291a:	70e1      	strb	r1, [r4, #3]
    291c:	4668      	mov	r0, sp
    291e:	80e2      	strh	r2, [r4, #6]
    2920:	7123      	strb	r3, [r4, #4]
    2922:	e008      	b.n	2936 <dmConn2HciHandler+0xde>
    2924:	7c02      	ldrb	r2, [r0, #16]
    2926:	4668      	mov	r0, sp
    2928:	2142      	movs	r1, #66	; 0x42
    292a:	8002      	strh	r2, [r0, #0]
    292c:	2200      	movs	r2, #0
    292e:	88a3      	ldrh	r3, [r4, #4]
    2930:	7081      	strb	r1, [r0, #2]
    2932:	70c2      	strb	r2, [r0, #3]
    2934:	8083      	strh	r3, [r0, #4]
    2936:	4b03      	ldr	r3, [pc, #12]	; (2944 <dmConn2HciHandler+0xec>)
    2938:	33fc      	adds	r3, #252	; 0xfc
    293a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    293c:	4798      	blx	r3
    293e:	b005      	add	sp, #20
    2940:	bd30      	pop	{r4, r5, pc}
    2942:	46c0      	nop			; (mov r8, r8)
    2944:	100015bc 	.word	0x100015bc

00002948 <dmConnCcbByBdAddr>:
    2948:	b570      	push	{r4, r5, r6, lr}
    294a:	4c0b      	ldr	r4, [pc, #44]	; (2978 <dmConnCcbByBdAddr+0x30>)
    294c:	0005      	movs	r5, r0
    294e:	0026      	movs	r6, r4
    2950:	7da3      	ldrb	r3, [r4, #22]
    2952:	2b00      	cmp	r3, #0
    2954:	d107      	bne.n	2966 <dmConnCcbByBdAddr+0x1e>
    2956:	0033      	movs	r3, r6
    2958:	3361      	adds	r3, #97	; 0x61
    295a:	342c      	adds	r4, #44	; 0x2c
    295c:	33ff      	adds	r3, #255	; 0xff
    295e:	429c      	cmp	r4, r3
    2960:	d1f6      	bne.n	2950 <dmConnCcbByBdAddr+0x8>
    2962:	2000      	movs	r0, #0
    2964:	e006      	b.n	2974 <dmConnCcbByBdAddr+0x2c>
    2966:	0029      	movs	r1, r5
    2968:	0020      	movs	r0, r4
    296a:	f00a fa95 	bl	ce98 <BdaCmp>
    296e:	2800      	cmp	r0, #0
    2970:	d0f1      	beq.n	2956 <dmConnCcbByBdAddr+0xe>
    2972:	0020      	movs	r0, r4
    2974:	bd70      	pop	{r4, r5, r6, pc}
    2976:	46c0      	nop			; (mov r8, r8)
    2978:	100015bc 	.word	0x100015bc

0000297c <dmConnHciHandler>:
    297c:	b570      	push	{r4, r5, r6, lr}
    297e:	7885      	ldrb	r5, [r0, #2]
    2980:	0004      	movs	r4, r0
    2982:	1e6b      	subs	r3, r5, #1
    2984:	2b01      	cmp	r3, #1
    2986:	d823      	bhi.n	29d0 <dmConnHciHandler+0x54>
    2988:	0005      	movs	r5, r0
    298a:	350a      	adds	r5, #10
    298c:	0028      	movs	r0, r5
    298e:	f7ff ffdb 	bl	2948 <dmConnCcbByBdAddr>
    2992:	2800      	cmp	r0, #0
    2994:	d114      	bne.n	29c0 <dmConnHciHandler+0x44>
    2996:	4b19      	ldr	r3, [pc, #100]	; (29fc <dmConnHciHandler+0x80>)
    2998:	4e19      	ldr	r6, [pc, #100]	; (2a00 <dmConnHciHandler+0x84>)
    299a:	0019      	movs	r1, r3
    299c:	3161      	adds	r1, #97	; 0x61
    299e:	31ff      	adds	r1, #255	; 0xff
    29a0:	7d9a      	ldrb	r2, [r3, #22]
    29a2:	2a00      	cmp	r2, #0
    29a4:	d007      	beq.n	29b6 <dmConnHciHandler+0x3a>
    29a6:	7d5a      	ldrb	r2, [r3, #21]
    29a8:	2a02      	cmp	r2, #2
    29aa:	d008      	beq.n	29be <dmConnHciHandler+0x42>
    29ac:	2a04      	cmp	r2, #4
    29ae:	d102      	bne.n	29b6 <dmConnHciHandler+0x3a>
    29b0:	899a      	ldrh	r2, [r3, #12]
    29b2:	42b2      	cmp	r2, r6
    29b4:	d003      	beq.n	29be <dmConnHciHandler+0x42>
    29b6:	332c      	adds	r3, #44	; 0x2c
    29b8:	428b      	cmp	r3, r1
    29ba:	d1f1      	bne.n	29a0 <dmConnHciHandler+0x24>
    29bc:	e015      	b.n	29ea <dmConnHciHandler+0x6e>
    29be:	0018      	movs	r0, r3
    29c0:	78e3      	ldrb	r3, [r4, #3]
    29c2:	2b00      	cmp	r3, #0
    29c4:	d101      	bne.n	29ca <dmConnHciHandler+0x4e>
    29c6:	3338      	adds	r3, #56	; 0x38
    29c8:	e000      	b.n	29cc <dmConnHciHandler+0x50>
    29ca:	2337      	movs	r3, #55	; 0x37
    29cc:	70a3      	strb	r3, [r4, #2]
    29ce:	e004      	b.n	29da <dmConnHciHandler+0x5e>
    29d0:	8800      	ldrh	r0, [r0, #0]
    29d2:	3536      	adds	r5, #54	; 0x36
    29d4:	f7ff ff2d 	bl	2832 <dmConnCcbByHandle>
    29d8:	70a5      	strb	r5, [r4, #2]
    29da:	2800      	cmp	r0, #0
    29dc:	d00c      	beq.n	29f8 <dmConnHciHandler+0x7c>
    29de:	7c03      	ldrb	r3, [r0, #16]
    29e0:	0021      	movs	r1, r4
    29e2:	8023      	strh	r3, [r4, #0]
    29e4:	f000 fb5e 	bl	30a4 <dmConnSmExecute>
    29e8:	e006      	b.n	29f8 <dmConnHciHandler+0x7c>
    29ea:	7a23      	ldrb	r3, [r4, #8]
    29ec:	2b01      	cmp	r3, #1
    29ee:	d1e7      	bne.n	29c0 <dmConnHciHandler+0x44>
    29f0:	0028      	movs	r0, r5
    29f2:	f7ff fef9 	bl	27e8 <dmConnCcbAlloc>
    29f6:	e7e3      	b.n	29c0 <dmConnHciHandler+0x44>
    29f8:	bd70      	pop	{r4, r5, r6, pc}
    29fa:	46c0      	nop			; (mov r8, r8)
    29fc:	100015bc 	.word	0x100015bc
    2a00:	0000ffff 	.word	0x0000ffff

00002a04 <dmConnCcbById>:
    2a04:	222c      	movs	r2, #44	; 0x2c
    2a06:	3801      	subs	r0, #1
    2a08:	b2c3      	uxtb	r3, r0
    2a0a:	4353      	muls	r3, r2
    2a0c:	4803      	ldr	r0, [pc, #12]	; (2a1c <dmConnCcbById+0x18>)
    2a0e:	18c3      	adds	r3, r0, r3
    2a10:	7d9a      	ldrb	r2, [r3, #22]
    2a12:	1e10      	subs	r0, r2, #0
    2a14:	d000      	beq.n	2a18 <dmConnCcbById+0x14>
    2a16:	0018      	movs	r0, r3
    2a18:	4770      	bx	lr
    2a1a:	46c0      	nop			; (mov r8, r8)
    2a1c:	100015bc 	.word	0x100015bc

00002a20 <dmConnMsgHandler>:
    2a20:	b510      	push	{r4, lr}
    2a22:	0004      	movs	r4, r0
    2a24:	7800      	ldrb	r0, [r0, #0]
    2a26:	f7ff ffed 	bl	2a04 <dmConnCcbById>
    2a2a:	2800      	cmp	r0, #0
    2a2c:	d002      	beq.n	2a34 <dmConnMsgHandler+0x14>
    2a2e:	0021      	movs	r1, r4
    2a30:	f000 fb38 	bl	30a4 <dmConnSmExecute>
    2a34:	bd10      	pop	{r4, pc}

00002a36 <dmConn2MsgHandler>:
    2a36:	b530      	push	{r4, r5, lr}
    2a38:	0004      	movs	r4, r0
    2a3a:	b085      	sub	sp, #20
    2a3c:	7800      	ldrb	r0, [r0, #0]
    2a3e:	f7ff ffe1 	bl	2a04 <dmConnCcbById>
    2a42:	1e03      	subs	r3, r0, #0
    2a44:	d029      	beq.n	2a9a <dmConn2MsgHandler+0x64>
    2a46:	78a0      	ldrb	r0, [r4, #2]
    2a48:	3841      	subs	r0, #65	; 0x41
    2a4a:	2804      	cmp	r0, #4
    2a4c:	d825      	bhi.n	2a9a <dmConn2MsgHandler+0x64>
    2a4e:	899d      	ldrh	r5, [r3, #12]
    2a50:	f003 fbbe 	bl	61d0 <__gnu_thumb1_case_uqi>
    2a54:	19140703 	.word	0x19140703
    2a58:	1f          	.byte	0x1f
    2a59:	00          	.byte	0x00
    2a5a:	0028      	movs	r0, r5
    2a5c:	f004 f9d1 	bl	6e02 <HciReadRssiCmd>
    2a60:	e01b      	b.n	2a9a <dmConn2MsgHandler+0x64>
    2a62:	89e0      	ldrh	r0, [r4, #14]
    2a64:	8923      	ldrh	r3, [r4, #8]
    2a66:	9002      	str	r0, [sp, #8]
    2a68:	89a0      	ldrh	r0, [r4, #12]
    2a6a:	88e2      	ldrh	r2, [r4, #6]
    2a6c:	9001      	str	r0, [sp, #4]
    2a6e:	8960      	ldrh	r0, [r4, #10]
    2a70:	88a1      	ldrh	r1, [r4, #4]
    2a72:	9000      	str	r0, [sp, #0]
    2a74:	0028      	movs	r0, r5
    2a76:	f003 fdb2 	bl	65de <HciLeRemoteConnParamReqReply>
    2a7a:	e00e      	b.n	2a9a <dmConn2MsgHandler+0x64>
    2a7c:	7921      	ldrb	r1, [r4, #4]
    2a7e:	0028      	movs	r0, r5
    2a80:	f003 fe31 	bl	66e6 <HciLeRemoteConnParamReqNegReply>
    2a84:	e009      	b.n	2a9a <dmConn2MsgHandler+0x64>
    2a86:	88e2      	ldrh	r2, [r4, #6]
    2a88:	88a1      	ldrh	r1, [r4, #4]
    2a8a:	0028      	movs	r0, r5
    2a8c:	f003 fe59 	bl	6742 <HciLeSetDataLen>
    2a90:	e003      	b.n	2a9a <dmConn2MsgHandler+0x64>
    2a92:	88a1      	ldrh	r1, [r4, #4]
    2a94:	0028      	movs	r0, r5
    2a96:	f004 fa2b 	bl	6ef0 <HciWriteAuthPayloadTimeout>
    2a9a:	b005      	add	sp, #20
    2a9c:	bd30      	pop	{r4, r5, pc}

00002a9e <dmConnExecCback>:
    2a9e:	b570      	push	{r4, r5, r6, lr}
    2aa0:	0005      	movs	r5, r0
    2aa2:	2400      	movs	r4, #0
    2aa4:	0023      	movs	r3, r4
    2aa6:	4a06      	ldr	r2, [pc, #24]	; (2ac0 <dmConnExecCback+0x22>)
    2aa8:	3361      	adds	r3, #97	; 0x61
    2aaa:	33ff      	adds	r3, #255	; 0xff
    2aac:	58d3      	ldr	r3, [r2, r3]
    2aae:	2b00      	cmp	r3, #0
    2ab0:	d001      	beq.n	2ab6 <dmConnExecCback+0x18>
    2ab2:	0028      	movs	r0, r5
    2ab4:	4798      	blx	r3
    2ab6:	3404      	adds	r4, #4
    2ab8:	2c14      	cmp	r4, #20
    2aba:	d1f3      	bne.n	2aa4 <dmConnExecCback+0x6>
    2abc:	bd70      	pop	{r4, r5, r6, pc}
    2abe:	46c0      	nop			; (mov r8, r8)
    2ac0:	100015bc 	.word	0x100015bc

00002ac4 <dmConnSmActConnOpened>:
    2ac4:	b570      	push	{r4, r5, r6, lr}
    2ac6:	000d      	movs	r5, r1
    2ac8:	0004      	movs	r4, r0
    2aca:	310a      	adds	r1, #10
    2acc:	f00a f9d6 	bl	ce7c <BdaCpy>
    2ad0:	88eb      	ldrh	r3, [r5, #6]
    2ad2:	81a3      	strh	r3, [r4, #12]
    2ad4:	7a68      	ldrb	r0, [r5, #9]
    2ad6:	f000 fc13 	bl	3300 <DmHostAddrType>
    2ada:	74e0      	strb	r0, [r4, #19]
    2adc:	7a2b      	ldrb	r3, [r5, #8]
    2ade:	4913      	ldr	r1, [pc, #76]	; (2b2c <dmConnSmActConnOpened+0x68>)
    2ae0:	7663      	strb	r3, [r4, #25]
    2ae2:	2b00      	cmp	r3, #0
    2ae4:	d101      	bne.n	2aea <dmConnSmActConnOpened+0x26>
    2ae6:	7b4b      	ldrb	r3, [r1, #13]
    2ae8:	e000      	b.n	2aec <dmConnSmActConnOpened+0x28>
    2aea:	7b8b      	ldrb	r3, [r1, #14]
    2aec:	7523      	strb	r3, [r4, #20]
    2aee:	7d23      	ldrb	r3, [r4, #20]
    2af0:	1da6      	adds	r6, r4, #6
    2af2:	2b00      	cmp	r3, #0
    2af4:	d102      	bne.n	2afc <dmConnSmActConnOpened+0x38>
    2af6:	f005 f8f9 	bl	7cec <HciGetBdAddr>
    2afa:	0001      	movs	r1, r0
    2afc:	0030      	movs	r0, r6
    2afe:	f00a f9bd 	bl	ce7c <BdaCpy>
    2b02:	0029      	movs	r1, r5
    2b04:	0020      	movs	r0, r4
    2b06:	3117      	adds	r1, #23
    2b08:	301a      	adds	r0, #26
    2b0a:	f00a f9b7 	bl	ce7c <BdaCpy>
    2b0e:	0029      	movs	r1, r5
    2b10:	0020      	movs	r0, r4
    2b12:	311d      	adds	r1, #29
    2b14:	3020      	adds	r0, #32
    2b16:	f00a f9b1 	bl	ce7c <BdaCpy>
    2b1a:	2300      	movs	r3, #0
    2b1c:	81e3      	strh	r3, [r4, #14]
    2b1e:	3327      	adds	r3, #39	; 0x27
    2b20:	70ab      	strb	r3, [r5, #2]
    2b22:	0028      	movs	r0, r5
    2b24:	f7ff ffbb 	bl	2a9e <dmConnExecCback>
    2b28:	bd70      	pop	{r4, r5, r6, pc}
    2b2a:	46c0      	nop			; (mov r8, r8)
    2b2c:	1000174c 	.word	0x1000174c

00002b30 <dmConnSmActConnClosed>:
    2b30:	2300      	movs	r3, #0
    2b32:	b510      	push	{r4, lr}
    2b34:	7583      	strb	r3, [r0, #22]
    2b36:	3328      	adds	r3, #40	; 0x28
    2b38:	708b      	strb	r3, [r1, #2]
    2b3a:	0008      	movs	r0, r1
    2b3c:	f7ff ffaf 	bl	2a9e <dmConnExecCback>
    2b40:	bd10      	pop	{r4, pc}

00002b42 <dmConnSmActConnFailed>:
    2b42:	2300      	movs	r3, #0
    2b44:	b510      	push	{r4, lr}
    2b46:	7583      	strb	r3, [r0, #22]
    2b48:	3328      	adds	r3, #40	; 0x28
    2b4a:	708b      	strb	r3, [r1, #2]
    2b4c:	0008      	movs	r0, r1
    2b4e:	f7ff ffa6 	bl	2a9e <dmConnExecCback>
    2b52:	bd10      	pop	{r4, pc}

00002b54 <dmConnOpenAccept>:
    2b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b56:	b087      	sub	sp, #28
    2b58:	9302      	str	r3, [sp, #8]
    2b5a:	ab0c      	add	r3, sp, #48	; 0x30
    2b5c:	881b      	ldrh	r3, [r3, #0]
    2b5e:	0007      	movs	r7, r0
    2b60:	9303      	str	r3, [sp, #12]
    2b62:	ab0d      	add	r3, sp, #52	; 0x34
    2b64:	781b      	ldrb	r3, [r3, #0]
    2b66:	9100      	str	r1, [sp, #0]
    2b68:	9304      	str	r3, [sp, #16]
    2b6a:	ab0e      	add	r3, sp, #56	; 0x38
    2b6c:	781b      	ldrb	r3, [r3, #0]
    2b6e:	9201      	str	r2, [sp, #4]
    2b70:	9305      	str	r3, [sp, #20]
    2b72:	ab10      	add	r3, sp, #64	; 0x40
    2b74:	781e      	ldrb	r6, [r3, #0]
    2b76:	f007 fa83 	bl	a080 <WsfTaskLock>
    2b7a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2b7c:	f7ff fee4 	bl	2948 <dmConnCcbByBdAddr>
    2b80:	1e05      	subs	r5, r0, #0
    2b82:	d103      	bne.n	2b8c <dmConnOpenAccept+0x38>
    2b84:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2b86:	f7ff fe2f 	bl	27e8 <dmConnCcbAlloc>
    2b8a:	0005      	movs	r5, r0
    2b8c:	f007 fa7e 	bl	a08c <WsfTaskUnlock>
    2b90:	1e28      	subs	r0, r5, #0
    2b92:	d035      	beq.n	2c00 <dmConnOpenAccept+0xac>
    2b94:	2014      	movs	r0, #20
    2b96:	f008 f942 	bl	ae1e <WsfMsgAlloc>
    2b9a:	1e04      	subs	r4, r0, #0
    2b9c:	d02a      	beq.n	2bf4 <dmConnOpenAccept+0xa0>
    2b9e:	7c2b      	ldrb	r3, [r5, #16]
    2ba0:	8003      	strh	r3, [r0, #0]
    2ba2:	2330      	movs	r3, #48	; 0x30
    2ba4:	2e00      	cmp	r6, #0
    2ba6:	d000      	beq.n	2baa <dmConnOpenAccept+0x56>
    2ba8:	3302      	adds	r3, #2
    2baa:	70a3      	strb	r3, [r4, #2]
    2bac:	466b      	mov	r3, sp
    2bae:	781b      	ldrb	r3, [r3, #0]
    2bb0:	0020      	movs	r0, r4
    2bb2:	7123      	strb	r3, [r4, #4]
    2bb4:	466b      	mov	r3, sp
    2bb6:	791b      	ldrb	r3, [r3, #4]
    2bb8:	300b      	adds	r0, #11
    2bba:	7163      	strb	r3, [r4, #5]
    2bbc:	466b      	mov	r3, sp
    2bbe:	7a1b      	ldrb	r3, [r3, #8]
    2bc0:	990f      	ldr	r1, [sp, #60]	; 0x3c
    2bc2:	71a3      	strb	r3, [r4, #6]
    2bc4:	466b      	mov	r3, sp
    2bc6:	899b      	ldrh	r3, [r3, #12]
    2bc8:	8123      	strh	r3, [r4, #8]
    2bca:	466b      	mov	r3, sp
    2bcc:	7c1b      	ldrb	r3, [r3, #16]
    2bce:	72a3      	strb	r3, [r4, #10]
    2bd0:	f00a f954 	bl	ce7c <BdaCpy>
    2bd4:	466b      	mov	r3, sp
    2bd6:	7d1b      	ldrb	r3, [r3, #20]
    2bd8:	74a7      	strb	r7, [r4, #18]
    2bda:	7463      	strb	r3, [r4, #17]
    2bdc:	4b09      	ldr	r3, [pc, #36]	; (2c04 <dmConnOpenAccept+0xb0>)
    2bde:	0021      	movs	r1, r4
    2be0:	7b18      	ldrb	r0, [r3, #12]
    2be2:	f008 f940 	bl	ae66 <WsfMsgSend>
    2be6:	f007 fa4b 	bl	a080 <WsfTaskLock>
    2bea:	766e      	strb	r6, [r5, #25]
    2bec:	f007 fa4e 	bl	a08c <WsfTaskUnlock>
    2bf0:	7c28      	ldrb	r0, [r5, #16]
    2bf2:	e005      	b.n	2c00 <dmConnOpenAccept+0xac>
    2bf4:	f007 fa44 	bl	a080 <WsfTaskLock>
    2bf8:	75ac      	strb	r4, [r5, #22]
    2bfa:	f007 fa47 	bl	a08c <WsfTaskUnlock>
    2bfe:	0020      	movs	r0, r4
    2c00:	b007      	add	sp, #28
    2c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c04:	1000174c 	.word	0x1000174c

00002c08 <DmConnInit>:
    2c08:	4b05      	ldr	r3, [pc, #20]	; (2c20 <DmConnInit+0x18>)
    2c0a:	4a06      	ldr	r2, [pc, #24]	; (2c24 <DmConnInit+0x1c>)
    2c0c:	0019      	movs	r1, r3
    2c0e:	310c      	adds	r1, #12
    2c10:	60d1      	str	r1, [r2, #12]
    2c12:	0019      	movs	r1, r3
    2c14:	3118      	adds	r1, #24
    2c16:	6111      	str	r1, [r2, #16]
    2c18:	4a03      	ldr	r2, [pc, #12]	; (2c28 <DmConnInit+0x20>)
    2c1a:	3324      	adds	r3, #36	; 0x24
    2c1c:	6013      	str	r3, [r2, #0]
    2c1e:	4770      	bx	lr
    2c20:	00010a1c 	.word	0x00010a1c
    2c24:	10001054 	.word	0x10001054
    2c28:	10001740 	.word	0x10001740

00002c2c <DmConnRegister>:
    2c2c:	b570      	push	{r4, r5, r6, lr}
    2c2e:	0004      	movs	r4, r0
    2c30:	000d      	movs	r5, r1
    2c32:	3458      	adds	r4, #88	; 0x58
    2c34:	f007 fa24 	bl	a080 <WsfTaskLock>
    2c38:	4b02      	ldr	r3, [pc, #8]	; (2c44 <DmConnRegister+0x18>)
    2c3a:	00a4      	lsls	r4, r4, #2
    2c3c:	50e5      	str	r5, [r4, r3]
    2c3e:	f007 fa25 	bl	a08c <WsfTaskUnlock>
    2c42:	bd70      	pop	{r4, r5, r6, pc}
    2c44:	100015bc 	.word	0x100015bc

00002c48 <DmConnClose>:
    2c48:	b570      	push	{r4, r5, r6, lr}
    2c4a:	0004      	movs	r4, r0
    2c4c:	2006      	movs	r0, #6
    2c4e:	000e      	movs	r6, r1
    2c50:	0015      	movs	r5, r2
    2c52:	f008 f8e4 	bl	ae1e <WsfMsgAlloc>
    2c56:	1e01      	subs	r1, r0, #0
    2c58:	d008      	beq.n	2c6c <DmConnClose+0x24>
    2c5a:	2331      	movs	r3, #49	; 0x31
    2c5c:	7083      	strb	r3, [r0, #2]
    2c5e:	4b04      	ldr	r3, [pc, #16]	; (2c70 <DmConnClose+0x28>)
    2c60:	8006      	strh	r6, [r0, #0]
    2c62:	7105      	strb	r5, [r0, #4]
    2c64:	7144      	strb	r4, [r0, #5]
    2c66:	7b18      	ldrb	r0, [r3, #12]
    2c68:	f008 f8fd 	bl	ae66 <WsfMsgSend>
    2c6c:	bd70      	pop	{r4, r5, r6, pc}
    2c6e:	46c0      	nop			; (mov r8, r8)
    2c70:	1000174c 	.word	0x1000174c

00002c74 <DmReadRemoteFeatures>:
    2c74:	b510      	push	{r4, lr}
    2c76:	f7ff fec5 	bl	2a04 <dmConnCcbById>
    2c7a:	2800      	cmp	r0, #0
    2c7c:	d002      	beq.n	2c84 <DmReadRemoteFeatures+0x10>
    2c7e:	8980      	ldrh	r0, [r0, #12]
    2c80:	f003 fed6 	bl	6a30 <HciLeReadRemoteFeatCmd>
    2c84:	bd10      	pop	{r4, pc}

00002c86 <DmConnUpdate>:
    2c86:	b570      	push	{r4, r5, r6, lr}
    2c88:	0005      	movs	r5, r0
    2c8a:	2010      	movs	r0, #16
    2c8c:	000e      	movs	r6, r1
    2c8e:	f008 f8c6 	bl	ae1e <WsfMsgAlloc>
    2c92:	1e04      	subs	r4, r0, #0
    2c94:	d015      	beq.n	2cc2 <DmConnUpdate+0x3c>
    2c96:	232c      	movs	r3, #44	; 0x2c
    2c98:	1e6a      	subs	r2, r5, #1
    2c9a:	4353      	muls	r3, r2
    2c9c:	4a09      	ldr	r2, [pc, #36]	; (2cc4 <DmConnUpdate+0x3e>)
    2c9e:	0031      	movs	r1, r6
    2ca0:	18d3      	adds	r3, r2, r3
    2ca2:	7e5b      	ldrb	r3, [r3, #25]
    2ca4:	8005      	strh	r5, [r0, #0]
    2ca6:	425a      	negs	r2, r3
    2ca8:	4153      	adcs	r3, r2
    2caa:	2234      	movs	r2, #52	; 0x34
    2cac:	1ad3      	subs	r3, r2, r3
    2cae:	7083      	strb	r3, [r0, #2]
    2cb0:	3a28      	subs	r2, #40	; 0x28
    2cb2:	3004      	adds	r0, #4
    2cb4:	f00c ff4b 	bl	fb4e <memcpy>
    2cb8:	4b03      	ldr	r3, [pc, #12]	; (2cc8 <DmConnUpdate+0x42>)
    2cba:	0021      	movs	r1, r4
    2cbc:	7b18      	ldrb	r0, [r3, #12]
    2cbe:	f008 f8d2 	bl	ae66 <WsfMsgSend>
    2cc2:	bd70      	pop	{r4, r5, r6, pc}
    2cc4:	100015bc 	.word	0x100015bc
    2cc8:	1000174c 	.word	0x1000174c

00002ccc <DmConnSetScanInterval>:
    2ccc:	b570      	push	{r4, r5, r6, lr}
    2cce:	0005      	movs	r5, r0
    2cd0:	000c      	movs	r4, r1
    2cd2:	f007 f9d5 	bl	a080 <WsfTaskLock>
    2cd6:	2001      	movs	r0, #1
    2cd8:	f000 fb44 	bl	3364 <DmInitPhyToIdx>
    2cdc:	0003      	movs	r3, r0
    2cde:	4a04      	ldr	r2, [pc, #16]	; (2cf0 <DmConnSetScanInterval+0x24>)
    2ce0:	33c0      	adds	r3, #192	; 0xc0
    2ce2:	0058      	lsls	r0, r3, #1
    2ce4:	5285      	strh	r5, [r0, r2]
    2ce6:	1810      	adds	r0, r2, r0
    2ce8:	8044      	strh	r4, [r0, #2]
    2cea:	f007 f9cf 	bl	a08c <WsfTaskUnlock>
    2cee:	bd70      	pop	{r4, r5, r6, pc}
    2cf0:	100015bc 	.word	0x100015bc

00002cf4 <DmExtConnSetScanInterval>:
    2cf4:	b570      	push	{r4, r5, r6, lr}
    2cf6:	2301      	movs	r3, #1
    2cf8:	2600      	movs	r6, #0
    2cfa:	0004      	movs	r4, r0
    2cfc:	4134      	asrs	r4, r6
    2cfe:	421c      	tst	r4, r3
    2d00:	d012      	beq.n	2d28 <DmExtConnSetScanInterval+0x34>
    2d02:	8814      	ldrh	r4, [r2, #0]
    2d04:	880d      	ldrh	r5, [r1, #0]
    2d06:	f007 f9bb 	bl	a080 <WsfTaskLock>
    2d0a:	2001      	movs	r0, #1
    2d0c:	40b0      	lsls	r0, r6
    2d0e:	b2c0      	uxtb	r0, r0
    2d10:	f000 fb28 	bl	3364 <DmInitPhyToIdx>
    2d14:	0003      	movs	r3, r0
    2d16:	4a07      	ldr	r2, [pc, #28]	; (2d34 <DmExtConnSetScanInterval+0x40>)
    2d18:	33c0      	adds	r3, #192	; 0xc0
    2d1a:	0058      	lsls	r0, r3, #1
    2d1c:	5285      	strh	r5, [r0, r2]
    2d1e:	1810      	adds	r0, r2, r0
    2d20:	8044      	strh	r4, [r0, #2]
    2d22:	f007 f9b3 	bl	a08c <WsfTaskUnlock>
    2d26:	e003      	b.n	2d30 <DmExtConnSetScanInterval+0x3c>
    2d28:	2e07      	cmp	r6, #7
    2d2a:	d001      	beq.n	2d30 <DmExtConnSetScanInterval+0x3c>
    2d2c:	3601      	adds	r6, #1
    2d2e:	e7e4      	b.n	2cfa <DmExtConnSetScanInterval+0x6>
    2d30:	bd70      	pop	{r4, r5, r6, pc}
    2d32:	46c0      	nop			; (mov r8, r8)
    2d34:	100015bc 	.word	0x100015bc

00002d38 <DmConnSetConnSpec>:
    2d38:	b510      	push	{r4, lr}
    2d3a:	0001      	movs	r1, r0
    2d3c:	2001      	movs	r0, #1
    2d3e:	f7ff fd3d 	bl	27bc <dmConnSetConnSpec>
    2d42:	bd10      	pop	{r4, pc}

00002d44 <DmExtConnSetConnSpec>:
    2d44:	2300      	movs	r3, #0
    2d46:	2201      	movs	r2, #1
    2d48:	b510      	push	{r4, lr}
    2d4a:	0004      	movs	r4, r0
    2d4c:	411c      	asrs	r4, r3
    2d4e:	4214      	tst	r4, r2
    2d50:	d005      	beq.n	2d5e <DmExtConnSetConnSpec+0x1a>
    2d52:	2001      	movs	r0, #1
    2d54:	4098      	lsls	r0, r3
    2d56:	b2c0      	uxtb	r0, r0
    2d58:	f7ff fd30 	bl	27bc <dmConnSetConnSpec>
    2d5c:	e003      	b.n	2d66 <DmExtConnSetConnSpec+0x22>
    2d5e:	2b07      	cmp	r3, #7
    2d60:	d001      	beq.n	2d66 <DmExtConnSetConnSpec+0x22>
    2d62:	3301      	adds	r3, #1
    2d64:	e7f1      	b.n	2d4a <DmExtConnSetConnSpec+0x6>
    2d66:	bd10      	pop	{r4, pc}

00002d68 <DmConnReadRssi>:
    2d68:	b510      	push	{r4, lr}
    2d6a:	0004      	movs	r4, r0
    2d6c:	2004      	movs	r0, #4
    2d6e:	f008 f856 	bl	ae1e <WsfMsgAlloc>
    2d72:	1e01      	subs	r1, r0, #0
    2d74:	d006      	beq.n	2d84 <DmConnReadRssi+0x1c>
    2d76:	2341      	movs	r3, #65	; 0x41
    2d78:	7083      	strb	r3, [r0, #2]
    2d7a:	4b03      	ldr	r3, [pc, #12]	; (2d88 <DmConnReadRssi+0x20>)
    2d7c:	8004      	strh	r4, [r0, #0]
    2d7e:	7b18      	ldrb	r0, [r3, #12]
    2d80:	f008 f871 	bl	ae66 <WsfMsgSend>
    2d84:	bd10      	pop	{r4, pc}
    2d86:	46c0      	nop			; (mov r8, r8)
    2d88:	1000174c 	.word	0x1000174c

00002d8c <DmRemoteConnParamReqReply>:
    2d8c:	b570      	push	{r4, r5, r6, lr}
    2d8e:	0006      	movs	r6, r0
    2d90:	2010      	movs	r0, #16
    2d92:	000d      	movs	r5, r1
    2d94:	f008 f843 	bl	ae1e <WsfMsgAlloc>
    2d98:	1e04      	subs	r4, r0, #0
    2d9a:	d00c      	beq.n	2db6 <DmRemoteConnParamReqReply+0x2a>
    2d9c:	2342      	movs	r3, #66	; 0x42
    2d9e:	8006      	strh	r6, [r0, #0]
    2da0:	7083      	strb	r3, [r0, #2]
    2da2:	0029      	movs	r1, r5
    2da4:	3004      	adds	r0, #4
    2da6:	220c      	movs	r2, #12
    2da8:	f00c fed1 	bl	fb4e <memcpy>
    2dac:	4b02      	ldr	r3, [pc, #8]	; (2db8 <DmRemoteConnParamReqReply+0x2c>)
    2dae:	0021      	movs	r1, r4
    2db0:	7b18      	ldrb	r0, [r3, #12]
    2db2:	f008 f858 	bl	ae66 <WsfMsgSend>
    2db6:	bd70      	pop	{r4, r5, r6, pc}
    2db8:	1000174c 	.word	0x1000174c

00002dbc <DmRemoteConnParamReqNegReply>:
    2dbc:	b570      	push	{r4, r5, r6, lr}
    2dbe:	0005      	movs	r5, r0
    2dc0:	2006      	movs	r0, #6
    2dc2:	000c      	movs	r4, r1
    2dc4:	f008 f82b 	bl	ae1e <WsfMsgAlloc>
    2dc8:	1e01      	subs	r1, r0, #0
    2dca:	d007      	beq.n	2ddc <DmRemoteConnParamReqNegReply+0x20>
    2dcc:	2343      	movs	r3, #67	; 0x43
    2dce:	7083      	strb	r3, [r0, #2]
    2dd0:	4b03      	ldr	r3, [pc, #12]	; (2de0 <DmRemoteConnParamReqNegReply+0x24>)
    2dd2:	8005      	strh	r5, [r0, #0]
    2dd4:	7104      	strb	r4, [r0, #4]
    2dd6:	7b18      	ldrb	r0, [r3, #12]
    2dd8:	f008 f845 	bl	ae66 <WsfMsgSend>
    2ddc:	bd70      	pop	{r4, r5, r6, pc}
    2dde:	46c0      	nop			; (mov r8, r8)
    2de0:	1000174c 	.word	0x1000174c

00002de4 <DmConnSetDataLen>:
    2de4:	b570      	push	{r4, r5, r6, lr}
    2de6:	0006      	movs	r6, r0
    2de8:	2008      	movs	r0, #8
    2dea:	000d      	movs	r5, r1
    2dec:	0014      	movs	r4, r2
    2dee:	f008 f816 	bl	ae1e <WsfMsgAlloc>
    2df2:	1e01      	subs	r1, r0, #0
    2df4:	d008      	beq.n	2e08 <DmConnSetDataLen+0x24>
    2df6:	2344      	movs	r3, #68	; 0x44
    2df8:	7083      	strb	r3, [r0, #2]
    2dfa:	4b04      	ldr	r3, [pc, #16]	; (2e0c <DmConnSetDataLen+0x28>)
    2dfc:	8006      	strh	r6, [r0, #0]
    2dfe:	8085      	strh	r5, [r0, #4]
    2e00:	80c4      	strh	r4, [r0, #6]
    2e02:	7b18      	ldrb	r0, [r3, #12]
    2e04:	f008 f82f 	bl	ae66 <WsfMsgSend>
    2e08:	bd70      	pop	{r4, r5, r6, pc}
    2e0a:	46c0      	nop			; (mov r8, r8)
    2e0c:	1000174c 	.word	0x1000174c

00002e10 <DmWriteAuthPayloadTimeout>:
    2e10:	b570      	push	{r4, r5, r6, lr}
    2e12:	0005      	movs	r5, r0
    2e14:	2006      	movs	r0, #6
    2e16:	000c      	movs	r4, r1
    2e18:	f008 f801 	bl	ae1e <WsfMsgAlloc>
    2e1c:	1e01      	subs	r1, r0, #0
    2e1e:	d007      	beq.n	2e30 <DmWriteAuthPayloadTimeout+0x20>
    2e20:	2345      	movs	r3, #69	; 0x45
    2e22:	7083      	strb	r3, [r0, #2]
    2e24:	4b03      	ldr	r3, [pc, #12]	; (2e34 <DmWriteAuthPayloadTimeout+0x24>)
    2e26:	8005      	strh	r5, [r0, #0]
    2e28:	8084      	strh	r4, [r0, #4]
    2e2a:	7b18      	ldrb	r0, [r3, #12]
    2e2c:	f008 f81b 	bl	ae66 <WsfMsgSend>
    2e30:	bd70      	pop	{r4, r5, r6, pc}
    2e32:	46c0      	nop			; (mov r8, r8)
    2e34:	1000174c 	.word	0x1000174c

00002e38 <DmConnIdByHandle>:
    2e38:	4b08      	ldr	r3, [pc, #32]	; (2e5c <DmConnIdByHandle+0x24>)
    2e3a:	001a      	movs	r2, r3
    2e3c:	3261      	adds	r2, #97	; 0x61
    2e3e:	32ff      	adds	r2, #255	; 0xff
    2e40:	7d99      	ldrb	r1, [r3, #22]
    2e42:	2900      	cmp	r1, #0
    2e44:	d004      	beq.n	2e50 <DmConnIdByHandle+0x18>
    2e46:	8999      	ldrh	r1, [r3, #12]
    2e48:	4281      	cmp	r1, r0
    2e4a:	d101      	bne.n	2e50 <DmConnIdByHandle+0x18>
    2e4c:	7c18      	ldrb	r0, [r3, #16]
    2e4e:	e003      	b.n	2e58 <DmConnIdByHandle+0x20>
    2e50:	332c      	adds	r3, #44	; 0x2c
    2e52:	4293      	cmp	r3, r2
    2e54:	d1f4      	bne.n	2e40 <DmConnIdByHandle+0x8>
    2e56:	2000      	movs	r0, #0
    2e58:	4770      	bx	lr
    2e5a:	46c0      	nop			; (mov r8, r8)
    2e5c:	100015bc 	.word	0x100015bc

00002e60 <DmConnInUse>:
    2e60:	232c      	movs	r3, #44	; 0x2c
    2e62:	3801      	subs	r0, #1
    2e64:	4358      	muls	r0, r3
    2e66:	4b02      	ldr	r3, [pc, #8]	; (2e70 <DmConnInUse+0x10>)
    2e68:	1818      	adds	r0, r3, r0
    2e6a:	7d80      	ldrb	r0, [r0, #22]
    2e6c:	4770      	bx	lr
    2e6e:	46c0      	nop			; (mov r8, r8)
    2e70:	100015bc 	.word	0x100015bc

00002e74 <DmConnPeerAddrType>:
    2e74:	232c      	movs	r3, #44	; 0x2c
    2e76:	3801      	subs	r0, #1
    2e78:	4358      	muls	r0, r3
    2e7a:	4b02      	ldr	r3, [pc, #8]	; (2e84 <DmConnPeerAddrType+0x10>)
    2e7c:	1818      	adds	r0, r3, r0
    2e7e:	7cc0      	ldrb	r0, [r0, #19]
    2e80:	4770      	bx	lr
    2e82:	46c0      	nop			; (mov r8, r8)
    2e84:	100015bc 	.word	0x100015bc

00002e88 <DmConnPeerAddr>:
    2e88:	232c      	movs	r3, #44	; 0x2c
    2e8a:	3801      	subs	r0, #1
    2e8c:	4358      	muls	r0, r3
    2e8e:	4b01      	ldr	r3, [pc, #4]	; (2e94 <DmConnPeerAddr+0xc>)
    2e90:	1818      	adds	r0, r3, r0
    2e92:	4770      	bx	lr
    2e94:	100015bc 	.word	0x100015bc

00002e98 <DmConnLocalAddrType>:
    2e98:	232c      	movs	r3, #44	; 0x2c
    2e9a:	3801      	subs	r0, #1
    2e9c:	4358      	muls	r0, r3
    2e9e:	4b02      	ldr	r3, [pc, #8]	; (2ea8 <DmConnLocalAddrType+0x10>)
    2ea0:	1818      	adds	r0, r3, r0
    2ea2:	7d00      	ldrb	r0, [r0, #20]
    2ea4:	4770      	bx	lr
    2ea6:	46c0      	nop			; (mov r8, r8)
    2ea8:	100015bc 	.word	0x100015bc

00002eac <DmConnLocalAddr>:
    2eac:	232c      	movs	r3, #44	; 0x2c
    2eae:	3801      	subs	r0, #1
    2eb0:	4358      	muls	r0, r3
    2eb2:	4b02      	ldr	r3, [pc, #8]	; (2ebc <DmConnLocalAddr+0x10>)
    2eb4:	1818      	adds	r0, r3, r0
    2eb6:	3006      	adds	r0, #6
    2eb8:	4770      	bx	lr
    2eba:	46c0      	nop			; (mov r8, r8)
    2ebc:	100015bc 	.word	0x100015bc

00002ec0 <DmConnPeerRpa>:
    2ec0:	232c      	movs	r3, #44	; 0x2c
    2ec2:	3801      	subs	r0, #1
    2ec4:	4358      	muls	r0, r3
    2ec6:	4b02      	ldr	r3, [pc, #8]	; (2ed0 <DmConnPeerRpa+0x10>)
    2ec8:	3020      	adds	r0, #32
    2eca:	1818      	adds	r0, r3, r0
    2ecc:	4770      	bx	lr
    2ece:	46c0      	nop			; (mov r8, r8)
    2ed0:	100015bc 	.word	0x100015bc

00002ed4 <DmConnLocalRpa>:
    2ed4:	232c      	movs	r3, #44	; 0x2c
    2ed6:	3801      	subs	r0, #1
    2ed8:	4358      	muls	r0, r3
    2eda:	4b02      	ldr	r3, [pc, #8]	; (2ee4 <DmConnLocalRpa+0x10>)
    2edc:	1818      	adds	r0, r3, r0
    2ede:	301a      	adds	r0, #26
    2ee0:	4770      	bx	lr
    2ee2:	46c0      	nop			; (mov r8, r8)
    2ee4:	100015bc 	.word	0x100015bc

00002ee8 <DmConnSecLevel>:
    2ee8:	232c      	movs	r3, #44	; 0x2c
    2eea:	3801      	subs	r0, #1
    2eec:	4358      	muls	r0, r3
    2eee:	4b02      	ldr	r3, [pc, #8]	; (2ef8 <DmConnSecLevel+0x10>)
    2ef0:	1818      	adds	r0, r3, r0
    2ef2:	7dc0      	ldrb	r0, [r0, #23]
    2ef4:	4770      	bx	lr
    2ef6:	46c0      	nop			; (mov r8, r8)
    2ef8:	100015bc 	.word	0x100015bc

00002efc <DmConnSetIdle>:
    2efc:	b570      	push	{r4, r5, r6, lr}
    2efe:	0006      	movs	r6, r0
    2f00:	000c      	movs	r4, r1
    2f02:	0015      	movs	r5, r2
    2f04:	f007 f8bc 	bl	a080 <WsfTaskLock>
    2f08:	232c      	movs	r3, #44	; 0x2c
    2f0a:	1e70      	subs	r0, r6, #1
    2f0c:	4358      	muls	r0, r3
    2f0e:	4b08      	ldr	r3, [pc, #32]	; (2f30 <DmConnSetIdle+0x34>)
    2f10:	1818      	adds	r0, r3, r0
    2f12:	7d83      	ldrb	r3, [r0, #22]
    2f14:	2b00      	cmp	r3, #0
    2f16:	d007      	beq.n	2f28 <DmConnSetIdle+0x2c>
    2f18:	89c3      	ldrh	r3, [r0, #14]
    2f1a:	2d00      	cmp	r5, #0
    2f1c:	d102      	bne.n	2f24 <DmConnSetIdle+0x28>
    2f1e:	43a3      	bics	r3, r4
    2f20:	81c3      	strh	r3, [r0, #14]
    2f22:	e001      	b.n	2f28 <DmConnSetIdle+0x2c>
    2f24:	431c      	orrs	r4, r3
    2f26:	81c4      	strh	r4, [r0, #14]
    2f28:	f007 f8b0 	bl	a08c <WsfTaskUnlock>
    2f2c:	bd70      	pop	{r4, r5, r6, pc}
    2f2e:	46c0      	nop			; (mov r8, r8)
    2f30:	100015bc 	.word	0x100015bc

00002f34 <DmConnCheckIdle>:
    2f34:	b510      	push	{r4, lr}
    2f36:	0004      	movs	r4, r0
    2f38:	f007 f8a2 	bl	a080 <WsfTaskLock>
    2f3c:	232c      	movs	r3, #44	; 0x2c
    2f3e:	1e60      	subs	r0, r4, #1
    2f40:	4358      	muls	r0, r3
    2f42:	4b03      	ldr	r3, [pc, #12]	; (2f50 <DmConnCheckIdle+0x1c>)
    2f44:	1818      	adds	r0, r3, r0
    2f46:	89c4      	ldrh	r4, [r0, #14]
    2f48:	f007 f8a0 	bl	a08c <WsfTaskUnlock>
    2f4c:	0020      	movs	r0, r4
    2f4e:	bd10      	pop	{r4, pc}
    2f50:	100015bc 	.word	0x100015bc

00002f54 <DmConnRole>:
    2f54:	232c      	movs	r3, #44	; 0x2c
    2f56:	3801      	subs	r0, #1
    2f58:	4358      	muls	r0, r3
    2f5a:	4b02      	ldr	r3, [pc, #8]	; (2f64 <DmConnRole+0x10>)
    2f5c:	1818      	adds	r0, r3, r0
    2f5e:	7e40      	ldrb	r0, [r0, #25]
    2f60:	4770      	bx	lr
    2f62:	46c0      	nop			; (mov r8, r8)
    2f64:	100015bc 	.word	0x100015bc

00002f68 <dmConnSmActUpdateSlave>:
    2f68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    2f6a:	2602      	movs	r6, #2
    2f6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
    2f6e:	0004      	movs	r4, r0
    2f70:	000d      	movs	r5, r1
    2f72:	4233      	tst	r3, r6
    2f74:	d008      	beq.n	2f88 <dmConnSmActUpdateSlave+0x20>
    2f76:	f004 fecf 	bl	7d18 <HciGetLeSupFeat>
    2f7a:	4230      	tst	r0, r6
    2f7c:	d004      	beq.n	2f88 <dmConnSmActUpdateSlave+0x20>
    2f7e:	1d29      	adds	r1, r5, #4
    2f80:	89a0      	ldrh	r0, [r4, #12]
    2f82:	f003 faa5 	bl	64d0 <HciLeConnUpdateCmd>
    2f86:	e017      	b.n	2fb8 <dmConnSmActUpdateSlave+0x50>
    2f88:	7c63      	ldrb	r3, [r4, #17]
    2f8a:	2b00      	cmp	r3, #0
    2f8c:	d106      	bne.n	2f9c <dmConnSmActUpdateSlave+0x34>
    2f8e:	3301      	adds	r3, #1
    2f90:	7463      	strb	r3, [r4, #17]
    2f92:	1d29      	adds	r1, r5, #4
    2f94:	89a0      	ldrh	r0, [r4, #12]
    2f96:	f000 fe91 	bl	3cbc <L2cDmConnUpdateReq>
    2f9a:	e00d      	b.n	2fb8 <dmConnSmActUpdateSlave+0x50>
    2f9c:	4668      	mov	r0, sp
    2f9e:	7c23      	ldrb	r3, [r4, #16]
    2fa0:	2129      	movs	r1, #41	; 0x29
    2fa2:	8003      	strh	r3, [r0, #0]
    2fa4:	230c      	movs	r3, #12
    2fa6:	70c3      	strb	r3, [r0, #3]
    2fa8:	7103      	strb	r3, [r0, #4]
    2faa:	4b04      	ldr	r3, [pc, #16]	; (2fbc <dmConnSmActUpdateSlave+0x54>)
    2fac:	89a2      	ldrh	r2, [r4, #12]
    2fae:	33fc      	adds	r3, #252	; 0xfc
    2fb0:	7081      	strb	r1, [r0, #2]
    2fb2:	80c2      	strh	r2, [r0, #6]
    2fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    2fb6:	4798      	blx	r3
    2fb8:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    2fba:	46c0      	nop			; (mov r8, r8)
    2fbc:	100015bc 	.word	0x100015bc

00002fc0 <dmConnSmActL2cUpdateCnf>:
    2fc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2fc2:	7c43      	ldrb	r3, [r0, #17]
    2fc4:	2b00      	cmp	r3, #0
    2fc6:	d013      	beq.n	2ff0 <dmConnSmActL2cUpdateCnf+0x30>
    2fc8:	2300      	movs	r3, #0
    2fca:	7443      	strb	r3, [r0, #17]
    2fcc:	888b      	ldrh	r3, [r1, #4]
    2fce:	2b00      	cmp	r3, #0
    2fd0:	d00e      	beq.n	2ff0 <dmConnSmActL2cUpdateCnf+0x30>
    2fd2:	466c      	mov	r4, sp
    2fd4:	8982      	ldrh	r2, [r0, #12]
    2fd6:	7c01      	ldrb	r1, [r0, #16]
    2fd8:	2029      	movs	r0, #41	; 0x29
    2fda:	b2db      	uxtb	r3, r3
    2fdc:	70e3      	strb	r3, [r4, #3]
    2fde:	7123      	strb	r3, [r4, #4]
    2fe0:	4b04      	ldr	r3, [pc, #16]	; (2ff4 <dmConnSmActL2cUpdateCnf+0x34>)
    2fe2:	70a0      	strb	r0, [r4, #2]
    2fe4:	33fc      	adds	r3, #252	; 0xfc
    2fe6:	4668      	mov	r0, sp
    2fe8:	8021      	strh	r1, [r4, #0]
    2fea:	80e2      	strh	r2, [r4, #6]
    2fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    2fee:	4798      	blx	r3
    2ff0:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    2ff2:	46c0      	nop			; (mov r8, r8)
    2ff4:	100015bc 	.word	0x100015bc

00002ff8 <DmL2cConnUpdateCnf>:
    2ff8:	b513      	push	{r0, r1, r4, lr}
    2ffa:	000c      	movs	r4, r1
    2ffc:	f7ff fc19 	bl	2832 <dmConnCcbByHandle>
    3000:	2800      	cmp	r0, #0
    3002:	d006      	beq.n	3012 <DmL2cConnUpdateCnf+0x1a>
    3004:	466a      	mov	r2, sp
    3006:	2336      	movs	r3, #54	; 0x36
    3008:	4669      	mov	r1, sp
    300a:	7093      	strb	r3, [r2, #2]
    300c:	8094      	strh	r4, [r2, #4]
    300e:	f000 f849 	bl	30a4 <dmConnSmExecute>
    3012:	bd13      	pop	{r0, r1, r4, pc}

00003014 <DmConnAccept>:
    3014:	b570      	push	{r4, r5, r6, lr}
    3016:	2601      	movs	r6, #1
    3018:	b086      	sub	sp, #24
    301a:	ac0a      	add	r4, sp, #40	; 0x28
    301c:	ad0b      	add	r5, sp, #44	; 0x2c
    301e:	7824      	ldrb	r4, [r4, #0]
    3020:	782d      	ldrb	r5, [r5, #0]
    3022:	9604      	str	r6, [sp, #16]
    3024:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    3026:	9300      	str	r3, [sp, #0]
    3028:	9603      	str	r6, [sp, #12]
    302a:	0013      	movs	r3, r2
    302c:	9502      	str	r5, [sp, #8]
    302e:	000a      	movs	r2, r1
    3030:	9401      	str	r4, [sp, #4]
    3032:	2100      	movs	r1, #0
    3034:	f7ff fd8e 	bl	2b54 <dmConnOpenAccept>
    3038:	b006      	add	sp, #24
    303a:	bd70      	pop	{r4, r5, r6, pc}

0000303c <dmConnSmActAccept>:
    303c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    303e:	000d      	movs	r5, r1
    3040:	350b      	adds	r5, #11
    3042:	798c      	ldrb	r4, [r1, #6]
    3044:	7a8b      	ldrb	r3, [r1, #10]
    3046:	890a      	ldrh	r2, [r1, #8]
    3048:	7948      	ldrb	r0, [r1, #5]
    304a:	9501      	str	r5, [sp, #4]
    304c:	7c49      	ldrb	r1, [r1, #17]
    304e:	9100      	str	r1, [sp, #0]
    3050:	0021      	movs	r1, r4
    3052:	f7ff fb1e 	bl	2692 <dmAdvStartDirected>
    3056:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

00003058 <dmConnSmActCancelAccept>:
    3058:	b570      	push	{r4, r5, r6, lr}
    305a:	000d      	movs	r5, r1
    305c:	0004      	movs	r4, r0
    305e:	f7ff fb2b 	bl	26b8 <dmAdvStopDirected>
    3062:	0029      	movs	r1, r5
    3064:	0020      	movs	r0, r4
    3066:	f7ff fd6c 	bl	2b42 <dmConnSmActConnFailed>
    306a:	bd70      	pop	{r4, r5, r6, pc}

0000306c <dmConnSmActConnAccepted>:
    306c:	b570      	push	{r4, r5, r6, lr}
    306e:	000d      	movs	r5, r1
    3070:	0004      	movs	r4, r0
    3072:	f7ff fb3b 	bl	26ec <dmAdvConnected>
    3076:	0029      	movs	r1, r5
    3078:	0020      	movs	r0, r4
    307a:	f7ff fd23 	bl	2ac4 <dmConnSmActConnOpened>
    307e:	bd70      	pop	{r4, r5, r6, pc}

00003080 <dmConnSmActAcceptFailed>:
    3080:	b570      	push	{r4, r5, r6, lr}
    3082:	000d      	movs	r5, r1
    3084:	0004      	movs	r4, r0
    3086:	f7ff fb25 	bl	26d4 <dmAdvConnectFailed>
    308a:	0029      	movs	r1, r5
    308c:	0020      	movs	r0, r4
    308e:	f7ff fd58 	bl	2b42 <dmConnSmActConnFailed>
    3092:	bd70      	pop	{r4, r5, r6, pc}

00003094 <DmConnSlaveInit>:
    3094:	4a01      	ldr	r2, [pc, #4]	; (309c <DmConnSlaveInit+0x8>)
    3096:	4b02      	ldr	r3, [pc, #8]	; (30a0 <DmConnSlaveInit+0xc>)
    3098:	609a      	str	r2, [r3, #8]
    309a:	4770      	bx	lr
    309c:	00010a58 	.word	0x00010a58
    30a0:	10001740 	.word	0x10001740

000030a4 <dmConnSmExecute>:
    30a4:	230d      	movs	r3, #13
    30a6:	b570      	push	{r4, r5, r6, lr}
    30a8:	240f      	movs	r4, #15
    30aa:	7d46      	ldrb	r6, [r0, #21]
    30ac:	788a      	ldrb	r2, [r1, #2]
    30ae:	4373      	muls	r3, r6
    30b0:	4022      	ands	r2, r4
    30b2:	4d0a      	ldr	r5, [pc, #40]	; (30dc <dmConnSmExecute+0x38>)
    30b4:	189b      	adds	r3, r3, r2
    30b6:	005b      	lsls	r3, r3, #1
    30b8:	18ea      	adds	r2, r5, r3
    30ba:	7852      	ldrb	r2, [r2, #1]
    30bc:	5d5b      	ldrb	r3, [r3, r5]
    30be:	4d08      	ldr	r5, [pc, #32]	; (30e0 <dmConnSmExecute+0x3c>)
    30c0:	7543      	strb	r3, [r0, #21]
    30c2:	0913      	lsrs	r3, r2, #4
    30c4:	009b      	lsls	r3, r3, #2
    30c6:	595b      	ldr	r3, [r3, r5]
    30c8:	2b00      	cmp	r3, #0
    30ca:	d004      	beq.n	30d6 <dmConnSmExecute+0x32>
    30cc:	4014      	ands	r4, r2
    30ce:	00a4      	lsls	r4, r4, #2
    30d0:	58e3      	ldr	r3, [r4, r3]
    30d2:	4798      	blx	r3
    30d4:	e001      	b.n	30da <dmConnSmExecute+0x36>
    30d6:	f7ff fb2b 	bl	2730 <dmConnSmActNone>
    30da:	bd70      	pop	{r4, r5, r6, pc}
    30dc:	00010a70 	.word	0x00010a70
    30e0:	10001740 	.word	0x10001740

000030e4 <dmDevHciHandler>:
    30e4:	7883      	ldrb	r3, [r0, #2]
    30e6:	b510      	push	{r4, lr}
    30e8:	2b00      	cmp	r3, #0
    30ea:	d105      	bne.n	30f8 <dmDevHciHandler+0x14>
    30ec:	4a07      	ldr	r2, [pc, #28]	; (310c <dmDevHciHandler+0x28>)
    30ee:	7413      	strb	r3, [r2, #16]
    30f0:	3320      	adds	r3, #32
    30f2:	7083      	strb	r3, [r0, #2]
    30f4:	6893      	ldr	r3, [r2, #8]
    30f6:	e007      	b.n	3108 <dmDevHciHandler+0x24>
    30f8:	2b13      	cmp	r3, #19
    30fa:	d001      	beq.n	3100 <dmDevHciHandler+0x1c>
    30fc:	2b14      	cmp	r3, #20
    30fe:	d104      	bne.n	310a <dmDevHciHandler+0x26>
    3100:	3340      	adds	r3, #64	; 0x40
    3102:	7083      	strb	r3, [r0, #2]
    3104:	4b01      	ldr	r3, [pc, #4]	; (310c <dmDevHciHandler+0x28>)
    3106:	689b      	ldr	r3, [r3, #8]
    3108:	4798      	blx	r3
    310a:	bd10      	pop	{r4, pc}
    310c:	1000174c 	.word	0x1000174c

00003110 <dmDevActReset>:
    3110:	b510      	push	{r4, lr}
    3112:	4b08      	ldr	r3, [pc, #32]	; (3134 <dmDevActReset+0x24>)
    3114:	7c1c      	ldrb	r4, [r3, #16]
    3116:	2c00      	cmp	r4, #0
    3118:	d10a      	bne.n	3130 <dmDevActReset+0x20>
    311a:	2201      	movs	r2, #1
    311c:	741a      	strb	r2, [r3, #16]
    311e:	4b06      	ldr	r3, [pc, #24]	; (3138 <dmDevActReset+0x28>)
    3120:	591b      	ldr	r3, [r3, r4]
    3122:	3404      	adds	r4, #4
    3124:	681b      	ldr	r3, [r3, #0]
    3126:	4798      	blx	r3
    3128:	2c30      	cmp	r4, #48	; 0x30
    312a:	d1f8      	bne.n	311e <dmDevActReset+0xe>
    312c:	f004 fc68 	bl	7a00 <HciResetSequence>
    3130:	bd10      	pop	{r4, pc}
    3132:	46c0      	nop			; (mov r8, r8)
    3134:	1000174c 	.word	0x1000174c
    3138:	10001054 	.word	0x10001054

0000313c <dmDevMsgHandler>:
    313c:	b510      	push	{r4, lr}
    313e:	f7ff ffe7 	bl	3110 <dmDevActReset>
    3142:	bd10      	pop	{r4, pc}

00003144 <DmDevReset>:
    3144:	b510      	push	{r4, lr}
    3146:	2004      	movs	r0, #4
    3148:	f007 fe69 	bl	ae1e <WsfMsgAlloc>
    314c:	1e01      	subs	r1, r0, #0
    314e:	d005      	beq.n	315c <DmDevReset+0x18>
    3150:	2370      	movs	r3, #112	; 0x70
    3152:	7083      	strb	r3, [r0, #2]
    3154:	4b02      	ldr	r3, [pc, #8]	; (3160 <DmDevReset+0x1c>)
    3156:	7b18      	ldrb	r0, [r3, #12]
    3158:	f007 fe85 	bl	ae66 <WsfMsgSend>
    315c:	bd10      	pop	{r4, pc}
    315e:	46c0      	nop			; (mov r8, r8)
    3160:	1000174c 	.word	0x1000174c

00003164 <DmDevSetRandAddr>:
    3164:	b510      	push	{r4, lr}
    3166:	0004      	movs	r4, r0
    3168:	0001      	movs	r1, r0
    316a:	4803      	ldr	r0, [pc, #12]	; (3178 <DmDevSetRandAddr+0x14>)
    316c:	f009 fe86 	bl	ce7c <BdaCpy>
    3170:	0020      	movs	r0, r4
    3172:	f003 fda0 	bl	6cb6 <HciLeSetRandAddrCmd>
    3176:	bd10      	pop	{r4, pc}
    3178:	1000174c 	.word	0x1000174c

0000317c <DmDevWhiteListAdd>:
    317c:	b510      	push	{r4, lr}
    317e:	f003 f96f 	bl	6460 <HciLeAddDevWhiteListCmd>
    3182:	bd10      	pop	{r4, pc}

00003184 <DmDevWhiteListRemove>:
    3184:	b510      	push	{r4, lr}
    3186:	f003 fc9f 	bl	6ac8 <HciLeRemoveDevWhiteListCmd>
    318a:	bd10      	pop	{r4, pc}

0000318c <DmDevWhiteListClear>:
    318c:	b510      	push	{r4, lr}
    318e:	f003 f98c 	bl	64aa <HciLeClearWhiteListCmd>
    3192:	bd10      	pop	{r4, pc}

00003194 <dmDevSetFilterPolicy>:
    3194:	2901      	cmp	r1, #1
    3196:	d00c      	beq.n	31b2 <dmDevSetFilterPolicy+0x1e>
    3198:	2900      	cmp	r1, #0
    319a:	d002      	beq.n	31a2 <dmDevSetFilterPolicy+0xe>
    319c:	2902      	cmp	r1, #2
    319e:	d00e      	beq.n	31be <dmDevSetFilterPolicy+0x2a>
    31a0:	e013      	b.n	31ca <dmDevSetFilterPolicy+0x36>
    31a2:	000b      	movs	r3, r1
    31a4:	2a03      	cmp	r2, #3
    31a6:	d811      	bhi.n	31cc <dmDevSetFilterPolicy+0x38>
    31a8:	4b09      	ldr	r3, [pc, #36]	; (31d0 <dmDevSetFilterPolicy+0x3c>)
    31aa:	1818      	adds	r0, r3, r0
    31ac:	7442      	strb	r2, [r0, #17]
    31ae:	2301      	movs	r3, #1
    31b0:	e00c      	b.n	31cc <dmDevSetFilterPolicy+0x38>
    31b2:	2300      	movs	r3, #0
    31b4:	2a03      	cmp	r2, #3
    31b6:	d809      	bhi.n	31cc <dmDevSetFilterPolicy+0x38>
    31b8:	4b05      	ldr	r3, [pc, #20]	; (31d0 <dmDevSetFilterPolicy+0x3c>)
    31ba:	749a      	strb	r2, [r3, #18]
    31bc:	e7f7      	b.n	31ae <dmDevSetFilterPolicy+0x1a>
    31be:	2300      	movs	r3, #0
    31c0:	2a01      	cmp	r2, #1
    31c2:	d803      	bhi.n	31cc <dmDevSetFilterPolicy+0x38>
    31c4:	4b02      	ldr	r3, [pc, #8]	; (31d0 <dmDevSetFilterPolicy+0x3c>)
    31c6:	74da      	strb	r2, [r3, #19]
    31c8:	e7f1      	b.n	31ae <dmDevSetFilterPolicy+0x1a>
    31ca:	2300      	movs	r3, #0
    31cc:	0018      	movs	r0, r3
    31ce:	4770      	bx	lr
    31d0:	1000174c 	.word	0x1000174c

000031d4 <DmDevSetFilterPolicy>:
    31d4:	b510      	push	{r4, lr}
    31d6:	000a      	movs	r2, r1
    31d8:	0001      	movs	r1, r0
    31da:	2000      	movs	r0, #0
    31dc:	f7ff ffda 	bl	3194 <dmDevSetFilterPolicy>
    31e0:	bd10      	pop	{r4, pc}

000031e2 <DmDevSetExtFilterPolicy>:
    31e2:	b510      	push	{r4, lr}
    31e4:	f7ff ffd6 	bl	3194 <dmDevSetFilterPolicy>
    31e8:	bd10      	pop	{r4, pc}

000031ea <DmDevVsInit>:
    31ea:	b510      	push	{r4, lr}
    31ec:	f006 ff01 	bl	9ff2 <HciVsInit>
    31f0:	bd10      	pop	{r4, pc}
    31f2:	46c0      	nop			; (mov r8, r8)

000031f4 <dmHciEvtCback>:
    31f4:	b510      	push	{r4, lr}
    31f6:	4b07      	ldr	r3, [pc, #28]	; (3214 <dmHciEvtCback+0x20>)
    31f8:	7c1a      	ldrb	r2, [r3, #16]
    31fa:	7883      	ldrb	r3, [r0, #2]
    31fc:	2a00      	cmp	r2, #0
    31fe:	d001      	beq.n	3204 <dmHciEvtCback+0x10>
    3200:	2b00      	cmp	r3, #0
    3202:	d106      	bne.n	3212 <dmHciEvtCback+0x1e>
    3204:	4a04      	ldr	r2, [pc, #16]	; (3218 <dmHciEvtCback+0x24>)
    3206:	5cd3      	ldrb	r3, [r2, r3]
    3208:	4a04      	ldr	r2, [pc, #16]	; (321c <dmHciEvtCback+0x28>)
    320a:	009b      	lsls	r3, r3, #2
    320c:	589b      	ldr	r3, [r3, r2]
    320e:	685b      	ldr	r3, [r3, #4]
    3210:	4798      	blx	r3
    3212:	bd10      	pop	{r4, pc}
    3214:	1000174c 	.word	0x1000174c
    3218:	00010b00 	.word	0x00010b00
    321c:	10001054 	.word	0x10001054

00003220 <dmEmptyReset>:
    3220:	4770      	bx	lr

00003222 <dmEmptyHandler>:
    3222:	4770      	bx	lr

00003224 <DmRegister>:
    3224:	b510      	push	{r4, lr}
    3226:	4a0c      	ldr	r2, [pc, #48]	; (3258 <DmRegister+0x34>)
    3228:	4b0c      	ldr	r3, [pc, #48]	; (325c <DmRegister+0x38>)
    322a:	4c0d      	ldr	r4, [pc, #52]	; (3260 <DmRegister+0x3c>)
    322c:	6a12      	ldr	r2, [r2, #32]
    322e:	333c      	adds	r3, #60	; 0x3c
    3230:	b09a      	sub	sp, #104	; 0x68
    3232:	60a0      	str	r0, [r4, #8]
    3234:	429a      	cmp	r2, r3
    3236:	d00c      	beq.n	3252 <DmRegister+0x2e>
    3238:	f004 fd7e 	bl	7d38 <HciGetMaxRxAclLen>
    323c:	2844      	cmp	r0, #68	; 0x44
    323e:	dc08      	bgt.n	3252 <DmRegister+0x2e>
    3240:	2300      	movs	r3, #0
    3242:	a801      	add	r0, sp, #4
    3244:	8003      	strh	r3, [r0, #0]
    3246:	3352      	adds	r3, #82	; 0x52
    3248:	7083      	strb	r3, [r0, #2]
    324a:	3b51      	subs	r3, #81	; 0x51
    324c:	70c3      	strb	r3, [r0, #3]
    324e:	68a3      	ldr	r3, [r4, #8]
    3250:	4798      	blx	r3
    3252:	b01a      	add	sp, #104	; 0x68
    3254:	bd10      	pop	{r4, pc}
    3256:	46c0      	nop			; (mov r8, r8)
    3258:	10001054 	.word	0x10001054
    325c:	00010b00 	.word	0x00010b00
    3260:	1000174c 	.word	0x1000174c

00003264 <DmFindAdType>:
    3264:	b530      	push	{r4, r5, lr}
    3266:	2900      	cmp	r1, #0
    3268:	d00e      	beq.n	3288 <DmFindAdType+0x24>
    326a:	7813      	ldrb	r3, [r2, #0]
    326c:	2b00      	cmp	r3, #0
    326e:	d00f      	beq.n	3290 <DmFindAdType+0x2c>
    3270:	b29c      	uxth	r4, r3
    3272:	42a1      	cmp	r1, r4
    3274:	d908      	bls.n	3288 <DmFindAdType+0x24>
    3276:	7855      	ldrb	r5, [r2, #1]
    3278:	4285      	cmp	r5, r0
    327a:	d007      	beq.n	328c <DmFindAdType+0x28>
    327c:	43e4      	mvns	r4, r4
    327e:	3301      	adds	r3, #1
    3280:	1909      	adds	r1, r1, r4
    3282:	b289      	uxth	r1, r1
    3284:	18d2      	adds	r2, r2, r3
    3286:	e7ee      	b.n	3266 <DmFindAdType+0x2>
    3288:	2000      	movs	r0, #0
    328a:	e002      	b.n	3292 <DmFindAdType+0x2e>
    328c:	0010      	movs	r0, r2
    328e:	e000      	b.n	3292 <DmFindAdType+0x2e>
    3290:	0018      	movs	r0, r3
    3292:	bd30      	pop	{r4, r5, pc}

00003294 <DmHandlerInit>:
    3294:	2200      	movs	r2, #0
    3296:	b510      	push	{r4, lr}
    3298:	4b03      	ldr	r3, [pc, #12]	; (32a8 <DmHandlerInit+0x14>)
    329a:	7318      	strb	r0, [r3, #12]
    329c:	4803      	ldr	r0, [pc, #12]	; (32ac <DmHandlerInit+0x18>)
    329e:	751a      	strb	r2, [r3, #20]
    32a0:	741a      	strb	r2, [r3, #16]
    32a2:	f009 fa5d 	bl	c760 <HciEvtRegister>
    32a6:	bd10      	pop	{r4, pc}
    32a8:	1000174c 	.word	0x1000174c
    32ac:	000031f5 	.word	0x000031f5

000032b0 <DmHandler>:
    32b0:	b510      	push	{r4, lr}
    32b2:	2900      	cmp	r1, #0
    32b4:	d00b      	beq.n	32ce <DmHandler+0x1e>
    32b6:	4b06      	ldr	r3, [pc, #24]	; (32d0 <DmHandler+0x20>)
    32b8:	7c1b      	ldrb	r3, [r3, #16]
    32ba:	2b00      	cmp	r3, #0
    32bc:	d107      	bne.n	32ce <DmHandler+0x1e>
    32be:	788b      	ldrb	r3, [r1, #2]
    32c0:	4a04      	ldr	r2, [pc, #16]	; (32d4 <DmHandler+0x24>)
    32c2:	091b      	lsrs	r3, r3, #4
    32c4:	009b      	lsls	r3, r3, #2
    32c6:	589b      	ldr	r3, [r3, r2]
    32c8:	0008      	movs	r0, r1
    32ca:	689b      	ldr	r3, [r3, #8]
    32cc:	4798      	blx	r3
    32ce:	bd10      	pop	{r4, pc}
    32d0:	1000174c 	.word	0x1000174c
    32d4:	10001054 	.word	0x10001054

000032d8 <DmLlPrivEnabled>:
    32d8:	4b01      	ldr	r3, [pc, #4]	; (32e0 <DmLlPrivEnabled+0x8>)
    32da:	7d18      	ldrb	r0, [r3, #20]
    32dc:	4770      	bx	lr
    32de:	46c0      	nop			; (mov r8, r8)
    32e0:	1000174c 	.word	0x1000174c

000032e4 <DmLlAddrType>:
    32e4:	4b05      	ldr	r3, [pc, #20]	; (32fc <DmLlAddrType+0x18>)
    32e6:	7d1b      	ldrb	r3, [r3, #20]
    32e8:	2b00      	cmp	r3, #0
    32ea:	d006      	beq.n	32fa <DmLlAddrType+0x16>
    32ec:	2800      	cmp	r0, #0
    32ee:	d003      	beq.n	32f8 <DmLlAddrType+0x14>
    32f0:	2801      	cmp	r0, #1
    32f2:	d102      	bne.n	32fa <DmLlAddrType+0x16>
    32f4:	2003      	movs	r0, #3
    32f6:	e000      	b.n	32fa <DmLlAddrType+0x16>
    32f8:	2002      	movs	r0, #2
    32fa:	4770      	bx	lr
    32fc:	1000174c 	.word	0x1000174c

00003300 <DmHostAddrType>:
    3300:	4b05      	ldr	r3, [pc, #20]	; (3318 <DmHostAddrType+0x18>)
    3302:	7d1b      	ldrb	r3, [r3, #20]
    3304:	2b00      	cmp	r3, #0
    3306:	d006      	beq.n	3316 <DmHostAddrType+0x16>
    3308:	2802      	cmp	r0, #2
    330a:	d003      	beq.n	3314 <DmHostAddrType+0x14>
    330c:	2803      	cmp	r0, #3
    330e:	d102      	bne.n	3316 <DmHostAddrType+0x16>
    3310:	2001      	movs	r0, #1
    3312:	e000      	b.n	3316 <DmHostAddrType+0x16>
    3314:	2000      	movs	r0, #0
    3316:	4770      	bx	lr
    3318:	1000174c 	.word	0x1000174c

0000331c <DmSizeOfEvt>:
    331c:	7883      	ldrb	r3, [r0, #2]
    331e:	2004      	movs	r0, #4
    3320:	3b20      	subs	r3, #32
    3322:	b2da      	uxtb	r2, r3
    3324:	2a34      	cmp	r2, #52	; 0x34
    3326:	d803      	bhi.n	3330 <DmSizeOfEvt+0x14>
    3328:	4a02      	ldr	r2, [pc, #8]	; (3334 <DmSizeOfEvt+0x18>)
    332a:	005b      	lsls	r3, r3, #1
    332c:	3248      	adds	r2, #72	; 0x48
    332e:	5a98      	ldrh	r0, [r3, r2]
    3330:	4770      	bx	lr
    3332:	46c0      	nop			; (mov r8, r8)
    3334:	00010b00 	.word	0x00010b00

00003338 <DmScanPhyToIdx>:
    3338:	2000      	movs	r0, #0
    333a:	4770      	bx	lr

0000333c <dmInitPhyToIdx>:
    333c:	0003      	movs	r3, r0
    333e:	2000      	movs	r0, #0
    3340:	2b01      	cmp	r3, #1
    3342:	d00e      	beq.n	3362 <dmInitPhyToIdx+0x26>
    3344:	2b02      	cmp	r3, #2
    3346:	d104      	bne.n	3352 <dmInitPhyToIdx+0x16>
    3348:	3901      	subs	r1, #1
    334a:	1e48      	subs	r0, r1, #1
    334c:	4181      	sbcs	r1, r0
    334e:	b2c8      	uxtb	r0, r1
    3350:	e007      	b.n	3362 <dmInitPhyToIdx+0x26>
    3352:	2000      	movs	r0, #0
    3354:	2901      	cmp	r1, #1
    3356:	d004      	beq.n	3362 <dmInitPhyToIdx+0x26>
    3358:	3902      	subs	r1, #2
    335a:	4248      	negs	r0, r1
    335c:	4141      	adcs	r1, r0
    335e:	2002      	movs	r0, #2
    3360:	1a40      	subs	r0, r0, r1
    3362:	4770      	bx	lr

00003364 <DmInitPhyToIdx>:
    3364:	2000      	movs	r0, #0
    3366:	4770      	bx	lr

00003368 <dmPrivMsgHandler>:
    3368:	230f      	movs	r3, #15
    336a:	7882      	ldrb	r2, [r0, #2]
    336c:	b510      	push	{r4, lr}
    336e:	4013      	ands	r3, r2
    3370:	4a02      	ldr	r2, [pc, #8]	; (337c <dmPrivMsgHandler+0x14>)
    3372:	009b      	lsls	r3, r3, #2
    3374:	589b      	ldr	r3, [r3, r2]
    3376:	4798      	blx	r3
    3378:	bd10      	pop	{r4, pc}
    337a:	46c0      	nop			; (mov r8, r8)
    337c:	00010bb4 	.word	0x00010bb4

00003380 <dmPrivReset>:
    3380:	2300      	movs	r3, #0
    3382:	4a02      	ldr	r2, [pc, #8]	; (338c <dmPrivReset+0xc>)
    3384:	70d3      	strb	r3, [r2, #3]
    3386:	4a02      	ldr	r2, [pc, #8]	; (3390 <dmPrivReset+0x10>)
    3388:	7513      	strb	r3, [r2, #20]
    338a:	4770      	bx	lr
    338c:	10001764 	.word	0x10001764
    3390:	1000174c 	.word	0x1000174c

00003394 <dmPrivActAesCmpl>:
    3394:	b570      	push	{r4, r5, r6, lr}
    3396:	4d0b      	ldr	r5, [pc, #44]	; (33c4 <dmPrivActAesCmpl+0x30>)
    3398:	0004      	movs	r4, r0
    339a:	6841      	ldr	r1, [r0, #4]
    339c:	2203      	movs	r2, #3
    339e:	0028      	movs	r0, r5
    33a0:	f00c fbc6 	bl	fb30 <memcmp>
    33a4:	2800      	cmp	r0, #0
    33a6:	d101      	bne.n	33ac <dmPrivActAesCmpl+0x18>
    33a8:	70e0      	strb	r0, [r4, #3]
    33aa:	e001      	b.n	33b0 <dmPrivActAesCmpl+0x1c>
    33ac:	2305      	movs	r3, #5
    33ae:	70e3      	strb	r3, [r4, #3]
    33b0:	2300      	movs	r3, #0
    33b2:	70eb      	strb	r3, [r5, #3]
    33b4:	3337      	adds	r3, #55	; 0x37
    33b6:	70a3      	strb	r3, [r4, #2]
    33b8:	4b03      	ldr	r3, [pc, #12]	; (33c8 <dmPrivActAesCmpl+0x34>)
    33ba:	0020      	movs	r0, r4
    33bc:	689b      	ldr	r3, [r3, #8]
    33be:	4798      	blx	r3
    33c0:	bd70      	pop	{r4, r5, r6, pc}
    33c2:	46c0      	nop			; (mov r8, r8)
    33c4:	10001764 	.word	0x10001764
    33c8:	1000174c 	.word	0x1000174c

000033cc <dmPrivActAddDevToResList>:
    33cc:	0003      	movs	r3, r0
    33ce:	0002      	movs	r2, r0
    33d0:	b510      	push	{r4, lr}
    33d2:	0004      	movs	r4, r0
    33d4:	1d41      	adds	r1, r0, #5
    33d6:	331b      	adds	r3, #27
    33d8:	320b      	adds	r2, #11
    33da:	7900      	ldrb	r0, [r0, #4]
    33dc:	f003 fdbf 	bl	6f5e <HciLeAddDeviceToResolvingListCmd>
    33e0:	0022      	movs	r2, r4
    33e2:	322b      	adds	r2, #43	; 0x2b
    33e4:	7812      	ldrb	r2, [r2, #0]
    33e6:	4b02      	ldr	r3, [pc, #8]	; (33f0 <dmPrivActAddDevToResList+0x24>)
    33e8:	721a      	strb	r2, [r3, #8]
    33ea:	8822      	ldrh	r2, [r4, #0]
    33ec:	809a      	strh	r2, [r3, #4]
    33ee:	bd10      	pop	{r4, pc}
    33f0:	10001764 	.word	0x10001764

000033f4 <dmPrivActRemDevFromResList>:
    33f4:	b510      	push	{r4, lr}
    33f6:	0004      	movs	r4, r0
    33f8:	1d41      	adds	r1, r0, #5
    33fa:	7900      	ldrb	r0, [r0, #4]
    33fc:	f003 fde3 	bl	6fc6 <HciLeRemoveDeviceFromResolvingList>
    3400:	8822      	ldrh	r2, [r4, #0]
    3402:	4b01      	ldr	r3, [pc, #4]	; (3408 <dmPrivActRemDevFromResList+0x14>)
    3404:	80da      	strh	r2, [r3, #6]
    3406:	bd10      	pop	{r4, pc}
    3408:	10001764 	.word	0x10001764

0000340c <dmPrivActClearResList>:
    340c:	b510      	push	{r4, lr}
    340e:	f003 fdff 	bl	7010 <HciLeClearResolvingList>
    3412:	bd10      	pop	{r4, pc}

00003414 <dmPrivActSetPrivacyMode>:
    3414:	b510      	push	{r4, lr}
    3416:	1d41      	adds	r1, r0, #5
    3418:	7ac2      	ldrb	r2, [r0, #11]
    341a:	7900      	ldrb	r0, [r0, #4]
    341c:	f003 feab 	bl	7176 <HciLeSetPrivacyModeCmd>
    3420:	bd10      	pop	{r4, pc}

00003422 <dmPrivActResolveAddr>:
    3422:	b5f0      	push	{r4, r5, r6, r7, lr}
    3424:	4d15      	ldr	r5, [pc, #84]	; (347c <dmPrivActResolveAddr+0x5a>)
    3426:	b087      	sub	sp, #28
    3428:	78ef      	ldrb	r7, [r5, #3]
    342a:	0004      	movs	r4, r0
    342c:	4e14      	ldr	r6, [pc, #80]	; (3480 <dmPrivActResolveAddr+0x5e>)
    342e:	2f00      	cmp	r7, #0
    3430:	d11c      	bne.n	346c <dmPrivActResolveAddr+0x4a>
    3432:	0001      	movs	r1, r0
    3434:	2203      	movs	r2, #3
    3436:	3114      	adds	r1, #20
    3438:	0028      	movs	r0, r5
    343a:	f00c fb88 	bl	fb4e <memcpy>
    343e:	0021      	movs	r1, r4
    3440:	2203      	movs	r2, #3
    3442:	3117      	adds	r1, #23
    3444:	a802      	add	r0, sp, #8
    3446:	f00c fb82 	bl	fb4e <memcpy>
    344a:	200b      	movs	r0, #11
    344c:	0039      	movs	r1, r7
    344e:	220d      	movs	r2, #13
    3450:	4468      	add	r0, sp
    3452:	f00c fba1 	bl	fb98 <memset>
    3456:	2301      	movs	r3, #1
    3458:	2161      	movs	r1, #97	; 0x61
    345a:	70eb      	strb	r3, [r5, #3]
    345c:	7b32      	ldrb	r2, [r6, #12]
    345e:	8823      	ldrh	r3, [r4, #0]
    3460:	9100      	str	r1, [sp, #0]
    3462:	1d20      	adds	r0, r4, #4
    3464:	a902      	add	r1, sp, #8
    3466:	f007 f809 	bl	a47c <SecAes>
    346a:	e005      	b.n	3478 <dmPrivActResolveAddr+0x56>
    346c:	2307      	movs	r3, #7
    346e:	70c3      	strb	r3, [r0, #3]
    3470:	3330      	adds	r3, #48	; 0x30
    3472:	7083      	strb	r3, [r0, #2]
    3474:	68b3      	ldr	r3, [r6, #8]
    3476:	4798      	blx	r3
    3478:	b007      	add	sp, #28
    347a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    347c:	10001764 	.word	0x10001764
    3480:	1000174c 	.word	0x1000174c

00003484 <dmPrivActSetAddrResEnable>:
    3484:	b510      	push	{r4, lr}
    3486:	7904      	ldrb	r4, [r0, #4]
    3488:	0020      	movs	r0, r4
    348a:	f003 fe31 	bl	70f0 <HciLeSetAddrResolutionEnable>
    348e:	4b01      	ldr	r3, [pc, #4]	; (3494 <dmPrivActSetAddrResEnable+0x10>)
    3490:	725c      	strb	r4, [r3, #9]
    3492:	bd10      	pop	{r4, pc}
    3494:	10001764 	.word	0x10001764

00003498 <dmPrivHciHandler>:
    3498:	b570      	push	{r4, r5, r6, lr}
    349a:	0004      	movs	r4, r0
    349c:	7880      	ldrb	r0, [r0, #2]
    349e:	3815      	subs	r0, #21
    34a0:	2805      	cmp	r0, #5
    34a2:	d83d      	bhi.n	3520 <dmPrivHciHandler+0x88>
    34a4:	4d1f      	ldr	r5, [pc, #124]	; (3524 <dmPrivHciHandler+0x8c>)
    34a6:	f002 fe93 	bl	61d0 <__gnu_thumb1_case_uqi>
    34aa:	1703      	.short	0x1703
    34ac:	302d2b1d 	.word	0x302d2b1d
    34b0:	2339      	movs	r3, #57	; 0x39
    34b2:	4e1d      	ldr	r6, [pc, #116]	; (3528 <dmPrivHciHandler+0x90>)
    34b4:	70a3      	strb	r3, [r4, #2]
    34b6:	88b3      	ldrh	r3, [r6, #4]
    34b8:	8023      	strh	r3, [r4, #0]
    34ba:	78e3      	ldrb	r3, [r4, #3]
    34bc:	2b00      	cmp	r3, #0
    34be:	d12c      	bne.n	351a <dmPrivHciHandler+0x82>
    34c0:	7a33      	ldrb	r3, [r6, #8]
    34c2:	2b00      	cmp	r3, #0
    34c4:	d029      	beq.n	351a <dmPrivHciHandler+0x82>
    34c6:	7d2b      	ldrb	r3, [r5, #20]
    34c8:	2b00      	cmp	r3, #0
    34ca:	d126      	bne.n	351a <dmPrivHciHandler+0x82>
    34cc:	2001      	movs	r0, #1
    34ce:	f003 fe0f 	bl	70f0 <HciLeSetAddrResolutionEnable>
    34d2:	2301      	movs	r3, #1
    34d4:	7273      	strb	r3, [r6, #9]
    34d6:	e020      	b.n	351a <dmPrivHciHandler+0x82>
    34d8:	233a      	movs	r3, #58	; 0x3a
    34da:	70a3      	strb	r3, [r4, #2]
    34dc:	4b12      	ldr	r3, [pc, #72]	; (3528 <dmPrivHciHandler+0x90>)
    34de:	88db      	ldrh	r3, [r3, #6]
    34e0:	8023      	strh	r3, [r4, #0]
    34e2:	e01a      	b.n	351a <dmPrivHciHandler+0x82>
    34e4:	233b      	movs	r3, #59	; 0x3b
    34e6:	78e6      	ldrb	r6, [r4, #3]
    34e8:	70a3      	strb	r3, [r4, #2]
    34ea:	2e00      	cmp	r6, #0
    34ec:	d115      	bne.n	351a <dmPrivHciHandler+0x82>
    34ee:	7d2b      	ldrb	r3, [r5, #20]
    34f0:	2b00      	cmp	r3, #0
    34f2:	d012      	beq.n	351a <dmPrivHciHandler+0x82>
    34f4:	0030      	movs	r0, r6
    34f6:	f003 fdfb 	bl	70f0 <HciLeSetAddrResolutionEnable>
    34fa:	4b0b      	ldr	r3, [pc, #44]	; (3528 <dmPrivHciHandler+0x90>)
    34fc:	725e      	strb	r6, [r3, #9]
    34fe:	e00c      	b.n	351a <dmPrivHciHandler+0x82>
    3500:	233c      	movs	r3, #60	; 0x3c
    3502:	e000      	b.n	3506 <dmPrivHciHandler+0x6e>
    3504:	233d      	movs	r3, #61	; 0x3d
    3506:	70a3      	strb	r3, [r4, #2]
    3508:	e007      	b.n	351a <dmPrivHciHandler+0x82>
    350a:	233e      	movs	r3, #62	; 0x3e
    350c:	70a3      	strb	r3, [r4, #2]
    350e:	78e3      	ldrb	r3, [r4, #3]
    3510:	2b00      	cmp	r3, #0
    3512:	d102      	bne.n	351a <dmPrivHciHandler+0x82>
    3514:	4b04      	ldr	r3, [pc, #16]	; (3528 <dmPrivHciHandler+0x90>)
    3516:	7a5b      	ldrb	r3, [r3, #9]
    3518:	752b      	strb	r3, [r5, #20]
    351a:	68ab      	ldr	r3, [r5, #8]
    351c:	0020      	movs	r0, r4
    351e:	4798      	blx	r3
    3520:	bd70      	pop	{r4, r5, r6, pc}
    3522:	46c0      	nop			; (mov r8, r8)
    3524:	1000174c 	.word	0x1000174c
    3528:	10001764 	.word	0x10001764

0000352c <DmPrivInit>:
    352c:	4b02      	ldr	r3, [pc, #8]	; (3538 <DmPrivInit+0xc>)
    352e:	4a03      	ldr	r2, [pc, #12]	; (353c <DmPrivInit+0x10>)
    3530:	331c      	adds	r3, #28
    3532:	6193      	str	r3, [r2, #24]
    3534:	4770      	bx	lr
    3536:	46c0      	nop			; (mov r8, r8)
    3538:	00010bb4 	.word	0x00010bb4
    353c:	10001054 	.word	0x10001054

00003540 <DmPrivResolveAddr>:
    3540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3542:	0005      	movs	r5, r0
    3544:	201a      	movs	r0, #26
    3546:	000e      	movs	r6, r1
    3548:	0017      	movs	r7, r2
    354a:	f007 fc68 	bl	ae1e <WsfMsgAlloc>
    354e:	1e04      	subs	r4, r0, #0
    3550:	d010      	beq.n	3574 <DmPrivResolveAddr+0x34>
    3552:	2360      	movs	r3, #96	; 0x60
    3554:	8007      	strh	r7, [r0, #0]
    3556:	7083      	strb	r3, [r0, #2]
    3558:	0031      	movs	r1, r6
    355a:	3004      	adds	r0, #4
    355c:	f009 fcd9 	bl	cf12 <Calc128Cpy>
    3560:	0020      	movs	r0, r4
    3562:	0029      	movs	r1, r5
    3564:	3014      	adds	r0, #20
    3566:	f009 fc89 	bl	ce7c <BdaCpy>
    356a:	4b03      	ldr	r3, [pc, #12]	; (3578 <DmPrivResolveAddr+0x38>)
    356c:	0021      	movs	r1, r4
    356e:	7b18      	ldrb	r0, [r3, #12]
    3570:	f007 fc79 	bl	ae66 <WsfMsgSend>
    3574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3576:	46c0      	nop			; (mov r8, r8)
    3578:	1000174c 	.word	0x1000174c

0000357c <DmPrivAddDevToResList>:
    357c:	b5f0      	push	{r4, r5, r6, r7, lr}
    357e:	b085      	sub	sp, #20
    3580:	9302      	str	r3, [sp, #8]
    3582:	ab0a      	add	r3, sp, #40	; 0x28
    3584:	781b      	ldrb	r3, [r3, #0]
    3586:	0006      	movs	r6, r0
    3588:	9303      	str	r3, [sp, #12]
    358a:	202c      	movs	r0, #44	; 0x2c
    358c:	ab0b      	add	r3, sp, #44	; 0x2c
    358e:	9101      	str	r1, [sp, #4]
    3590:	0015      	movs	r5, r2
    3592:	881f      	ldrh	r7, [r3, #0]
    3594:	f007 fc43 	bl	ae1e <WsfMsgAlloc>
    3598:	1e04      	subs	r4, r0, #0
    359a:	d01b      	beq.n	35d4 <DmPrivAddDevToResList+0x58>
    359c:	2362      	movs	r3, #98	; 0x62
    359e:	8007      	strh	r7, [r0, #0]
    35a0:	7083      	strb	r3, [r0, #2]
    35a2:	7106      	strb	r6, [r0, #4]
    35a4:	9901      	ldr	r1, [sp, #4]
    35a6:	3005      	adds	r0, #5
    35a8:	f009 fc68 	bl	ce7c <BdaCpy>
    35ac:	0020      	movs	r0, r4
    35ae:	0029      	movs	r1, r5
    35b0:	300b      	adds	r0, #11
    35b2:	f009 fcae 	bl	cf12 <Calc128Cpy>
    35b6:	0020      	movs	r0, r4
    35b8:	9902      	ldr	r1, [sp, #8]
    35ba:	301b      	adds	r0, #27
    35bc:	f009 fca9 	bl	cf12 <Calc128Cpy>
    35c0:	466a      	mov	r2, sp
    35c2:	0023      	movs	r3, r4
    35c4:	7b12      	ldrb	r2, [r2, #12]
    35c6:	332b      	adds	r3, #43	; 0x2b
    35c8:	701a      	strb	r2, [r3, #0]
    35ca:	4b03      	ldr	r3, [pc, #12]	; (35d8 <DmPrivAddDevToResList+0x5c>)
    35cc:	0021      	movs	r1, r4
    35ce:	7b18      	ldrb	r0, [r3, #12]
    35d0:	f007 fc49 	bl	ae66 <WsfMsgSend>
    35d4:	b005      	add	sp, #20
    35d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35d8:	1000174c 	.word	0x1000174c

000035dc <DmPrivRemDevFromResList>:
    35dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35de:	0006      	movs	r6, r0
    35e0:	200c      	movs	r0, #12
    35e2:	000d      	movs	r5, r1
    35e4:	0017      	movs	r7, r2
    35e6:	f007 fc1a 	bl	ae1e <WsfMsgAlloc>
    35ea:	1e04      	subs	r4, r0, #0
    35ec:	d00c      	beq.n	3608 <DmPrivRemDevFromResList+0x2c>
    35ee:	2363      	movs	r3, #99	; 0x63
    35f0:	8007      	strh	r7, [r0, #0]
    35f2:	7083      	strb	r3, [r0, #2]
    35f4:	7106      	strb	r6, [r0, #4]
    35f6:	0029      	movs	r1, r5
    35f8:	3005      	adds	r0, #5
    35fa:	f009 fc3f 	bl	ce7c <BdaCpy>
    35fe:	4b03      	ldr	r3, [pc, #12]	; (360c <DmPrivRemDevFromResList+0x30>)
    3600:	0021      	movs	r1, r4
    3602:	7b18      	ldrb	r0, [r3, #12]
    3604:	f007 fc2f 	bl	ae66 <WsfMsgSend>
    3608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    360a:	46c0      	nop			; (mov r8, r8)
    360c:	1000174c 	.word	0x1000174c

00003610 <DmPrivClearResList>:
    3610:	b510      	push	{r4, lr}
    3612:	202c      	movs	r0, #44	; 0x2c
    3614:	f007 fc03 	bl	ae1e <WsfMsgAlloc>
    3618:	1e01      	subs	r1, r0, #0
    361a:	d005      	beq.n	3628 <DmPrivClearResList+0x18>
    361c:	2364      	movs	r3, #100	; 0x64
    361e:	7083      	strb	r3, [r0, #2]
    3620:	4b02      	ldr	r3, [pc, #8]	; (362c <DmPrivClearResList+0x1c>)
    3622:	7b18      	ldrb	r0, [r3, #12]
    3624:	f007 fc1f 	bl	ae66 <WsfMsgSend>
    3628:	bd10      	pop	{r4, pc}
    362a:	46c0      	nop			; (mov r8, r8)
    362c:	1000174c 	.word	0x1000174c

00003630 <DmPrivReadPeerResolvableAddr>:
    3630:	b510      	push	{r4, lr}
    3632:	f003 fd13 	bl	705c <HciLeReadPeerResolvableAddr>
    3636:	bd10      	pop	{r4, pc}

00003638 <DmPrivReadLocalResolvableAddr>:
    3638:	b510      	push	{r4, lr}
    363a:	f003 fd34 	bl	70a6 <HciLeReadLocalResolvableAddr>
    363e:	bd10      	pop	{r4, pc}

00003640 <DmPrivSetAddrResEnable>:
    3640:	b510      	push	{r4, lr}
    3642:	0004      	movs	r4, r0
    3644:	202c      	movs	r0, #44	; 0x2c
    3646:	f007 fbea 	bl	ae1e <WsfMsgAlloc>
    364a:	1e01      	subs	r1, r0, #0
    364c:	d008      	beq.n	3660 <DmPrivSetAddrResEnable+0x20>
    364e:	2365      	movs	r3, #101	; 0x65
    3650:	7083      	strb	r3, [r0, #2]
    3652:	2300      	movs	r3, #0
    3654:	8003      	strh	r3, [r0, #0]
    3656:	4b03      	ldr	r3, [pc, #12]	; (3664 <DmPrivSetAddrResEnable+0x24>)
    3658:	7104      	strb	r4, [r0, #4]
    365a:	7b18      	ldrb	r0, [r3, #12]
    365c:	f007 fc03 	bl	ae66 <WsfMsgSend>
    3660:	bd10      	pop	{r4, pc}
    3662:	46c0      	nop			; (mov r8, r8)
    3664:	1000174c 	.word	0x1000174c

00003668 <DmPrivSetResolvablePrivateAddrTimeout>:
    3668:	b510      	push	{r4, lr}
    366a:	f003 fd5e 	bl	712a <HciLeSetResolvablePrivateAddrTimeout>
    366e:	bd10      	pop	{r4, pc}

00003670 <DmPrivSetPrivacyMode>:
    3670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3672:	0007      	movs	r7, r0
    3674:	200c      	movs	r0, #12
    3676:	000e      	movs	r6, r1
    3678:	0015      	movs	r5, r2
    367a:	f007 fbd0 	bl	ae1e <WsfMsgAlloc>
    367e:	1e04      	subs	r4, r0, #0
    3680:	d00c      	beq.n	369c <DmPrivSetPrivacyMode+0x2c>
    3682:	2366      	movs	r3, #102	; 0x66
    3684:	7107      	strb	r7, [r0, #4]
    3686:	7083      	strb	r3, [r0, #2]
    3688:	0031      	movs	r1, r6
    368a:	3005      	adds	r0, #5
    368c:	f009 fbf6 	bl	ce7c <BdaCpy>
    3690:	4b03      	ldr	r3, [pc, #12]	; (36a0 <DmPrivSetPrivacyMode+0x30>)
    3692:	72e5      	strb	r5, [r4, #11]
    3694:	7b18      	ldrb	r0, [r3, #12]
    3696:	0021      	movs	r1, r4
    3698:	f007 fbe5 	bl	ae66 <WsfMsgSend>
    369c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    369e:	46c0      	nop			; (mov r8, r8)
    36a0:	1000174c 	.word	0x1000174c

000036a4 <dmSecMsgHandler>:
    36a4:	b570      	push	{r4, r5, r6, lr}
    36a6:	0004      	movs	r4, r0
    36a8:	7800      	ldrb	r0, [r0, #0]
    36aa:	f7ff f9ab 	bl	2a04 <dmConnCcbById>
    36ae:	1e05      	subs	r5, r0, #0
    36b0:	d027      	beq.n	3702 <dmSecMsgHandler+0x5e>
    36b2:	78a3      	ldrb	r3, [r4, #2]
    36b4:	2b50      	cmp	r3, #80	; 0x50
    36b6:	d002      	beq.n	36be <dmSecMsgHandler+0x1a>
    36b8:	2b51      	cmp	r3, #81	; 0x51
    36ba:	d011      	beq.n	36e0 <dmSecMsgHandler+0x3c>
    36bc:	e021      	b.n	3702 <dmSecMsgHandler+0x5e>
    36be:	7c00      	ldrb	r0, [r0, #16]
    36c0:	2201      	movs	r2, #1
    36c2:	2102      	movs	r1, #2
    36c4:	f7ff fc1a 	bl	2efc <DmConnSetIdle>
    36c8:	7fa3      	ldrb	r3, [r4, #30]
    36ca:	0021      	movs	r1, r4
    36cc:	762b      	strb	r3, [r5, #24]
    36ce:	2301      	movs	r3, #1
    36d0:	74ab      	strb	r3, [r5, #18]
    36d2:	8ba2      	ldrh	r2, [r4, #28]
    36d4:	1d23      	adds	r3, r4, #4
    36d6:	3114      	adds	r1, #20
    36d8:	89a8      	ldrh	r0, [r5, #12]
    36da:	f003 fb3a 	bl	6d52 <HciLeStartEncryptionCmd>
    36de:	e010      	b.n	3702 <dmSecMsgHandler+0x5e>
    36e0:	7d22      	ldrb	r2, [r4, #20]
    36e2:	2a00      	cmp	r2, #0
    36e4:	d006      	beq.n	36f4 <dmSecMsgHandler+0x50>
    36e6:	7d63      	ldrb	r3, [r4, #21]
    36e8:	1d21      	adds	r1, r4, #4
    36ea:	7603      	strb	r3, [r0, #24]
    36ec:	8980      	ldrh	r0, [r0, #12]
    36ee:	f003 f93a 	bl	6966 <HciLeLtkReqReplCmd>
    36f2:	e006      	b.n	3702 <dmSecMsgHandler+0x5e>
    36f4:	7c00      	ldrb	r0, [r0, #16]
    36f6:	2102      	movs	r1, #2
    36f8:	f7ff fc00 	bl	2efc <DmConnSetIdle>
    36fc:	89a8      	ldrh	r0, [r5, #12]
    36fe:	f003 f90c 	bl	691a <HciLeLtkReqNegReplCmd>
    3702:	bd70      	pop	{r4, r5, r6, pc}

00003704 <dmSecApiLtkMsg>:
    3704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3706:	0006      	movs	r6, r0
    3708:	2020      	movs	r0, #32
    370a:	9101      	str	r1, [sp, #4]
    370c:	0015      	movs	r5, r2
    370e:	001f      	movs	r7, r3
    3710:	f007 fb85 	bl	ae1e <WsfMsgAlloc>
    3714:	1e04      	subs	r4, r0, #0
    3716:	d00e      	beq.n	3736 <dmSecApiLtkMsg+0x32>
    3718:	466b      	mov	r3, sp
    371a:	791b      	ldrb	r3, [r3, #4]
    371c:	7087      	strb	r7, [r0, #2]
    371e:	70c3      	strb	r3, [r0, #3]
    3720:	8006      	strh	r6, [r0, #0]
    3722:	0029      	movs	r1, r5
    3724:	3004      	adds	r0, #4
    3726:	221a      	movs	r2, #26
    3728:	f00c fa11 	bl	fb4e <memcpy>
    372c:	4b02      	ldr	r3, [pc, #8]	; (3738 <dmSecApiLtkMsg+0x34>)
    372e:	0021      	movs	r1, r4
    3730:	7b18      	ldrb	r0, [r3, #12]
    3732:	f007 fb98 	bl	ae66 <WsfMsgSend>
    3736:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3738:	1000174c 	.word	0x1000174c

0000373c <DmSmpCbackExec>:
    373c:	22fd      	movs	r2, #253	; 0xfd
    373e:	b510      	push	{r4, lr}
    3740:	7883      	ldrb	r3, [r0, #2]
    3742:	0004      	movs	r4, r0
    3744:	3b2a      	subs	r3, #42	; 0x2a
    3746:	4213      	tst	r3, r2
    3748:	d105      	bne.n	3756 <DmSmpCbackExec+0x1a>
    374a:	4b05      	ldr	r3, [pc, #20]	; (3760 <DmSmpCbackExec+0x24>)
    374c:	33fc      	adds	r3, #252	; 0xfc
    374e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    3750:	2b00      	cmp	r3, #0
    3752:	d000      	beq.n	3756 <DmSmpCbackExec+0x1a>
    3754:	4798      	blx	r3
    3756:	4b03      	ldr	r3, [pc, #12]	; (3764 <DmSmpCbackExec+0x28>)
    3758:	0020      	movs	r0, r4
    375a:	689b      	ldr	r3, [r3, #8]
    375c:	4798      	blx	r3
    375e:	bd10      	pop	{r4, pc}
    3760:	100015bc 	.word	0x100015bc
    3764:	1000174c 	.word	0x1000174c

00003768 <dmSecHciHandler>:
    3768:	b573      	push	{r0, r1, r4, r5, r6, lr}
    376a:	0005      	movs	r5, r0
    376c:	8800      	ldrh	r0, [r0, #0]
    376e:	f7ff f860 	bl	2832 <dmConnCcbByHandle>
    3772:	1e04      	subs	r4, r0, #0
    3774:	d04e      	beq.n	3814 <dmSecHciHandler+0xac>
    3776:	78ab      	ldrb	r3, [r5, #2]
    3778:	2b10      	cmp	r3, #16
    377a:	d127      	bne.n	37cc <dmSecHciHandler+0x64>
    377c:	89eb      	ldrh	r3, [r5, #14]
    377e:	2b00      	cmp	r3, #0
    3780:	d114      	bne.n	37ac <dmSecHciHandler+0x44>
    3782:	1da8      	adds	r0, r5, #6
    3784:	2208      	movs	r2, #8
    3786:	4924      	ldr	r1, [pc, #144]	; (3818 <dmSecHciHandler+0xb0>)
    3788:	f00c f9d2 	bl	fb30 <memcmp>
    378c:	1e06      	subs	r6, r0, #0
    378e:	d10d      	bne.n	37ac <dmSecHciHandler+0x44>
    3790:	4669      	mov	r1, sp
    3792:	7c20      	ldrb	r0, [r4, #16]
    3794:	f000 fd18 	bl	41c8 <SmpDmGetStk>
    3798:	1e01      	subs	r1, r0, #0
    379a:	d007      	beq.n	37ac <dmSecHciHandler+0x44>
    379c:	466b      	mov	r3, sp
    379e:	781b      	ldrb	r3, [r3, #0]
    37a0:	74a6      	strb	r6, [r4, #18]
    37a2:	7623      	strb	r3, [r4, #24]
    37a4:	8828      	ldrh	r0, [r5, #0]
    37a6:	f003 f8de 	bl	6966 <HciLeLtkReqReplCmd>
    37aa:	e033      	b.n	3814 <dmSecHciHandler+0xac>
    37ac:	7c20      	ldrb	r0, [r4, #16]
    37ae:	2201      	movs	r2, #1
    37b0:	2102      	movs	r1, #2
    37b2:	f7ff fba3 	bl	2efc <DmConnSetIdle>
    37b6:	2301      	movs	r3, #1
    37b8:	74a3      	strb	r3, [r4, #18]
    37ba:	7c23      	ldrb	r3, [r4, #16]
    37bc:	0028      	movs	r0, r5
    37be:	802b      	strh	r3, [r5, #0]
    37c0:	2330      	movs	r3, #48	; 0x30
    37c2:	70ab      	strb	r3, [r5, #2]
    37c4:	4b15      	ldr	r3, [pc, #84]	; (381c <dmSecHciHandler+0xb4>)
    37c6:	689b      	ldr	r3, [r3, #8]
    37c8:	4798      	blx	r3
    37ca:	e023      	b.n	3814 <dmSecHciHandler+0xac>
    37cc:	3b0e      	subs	r3, #14
    37ce:	2b01      	cmp	r3, #1
    37d0:	d820      	bhi.n	3814 <dmSecHciHandler+0xac>
    37d2:	2200      	movs	r2, #0
    37d4:	7c00      	ldrb	r0, [r0, #16]
    37d6:	2102      	movs	r1, #2
    37d8:	f7ff fb90 	bl	2efc <DmConnSetIdle>
    37dc:	466a      	mov	r2, sp
    37de:	7c23      	ldrb	r3, [r4, #16]
    37e0:	8013      	strh	r3, [r2, #0]
    37e2:	78eb      	ldrb	r3, [r5, #3]
    37e4:	70d3      	strb	r3, [r2, #3]
    37e6:	2b00      	cmp	r3, #0
    37e8:	d106      	bne.n	37f8 <dmSecHciHandler+0x90>
    37ea:	332c      	adds	r3, #44	; 0x2c
    37ec:	7093      	strb	r3, [r2, #2]
    37ee:	7e23      	ldrb	r3, [r4, #24]
    37f0:	75e3      	strb	r3, [r4, #23]
    37f2:	7ca3      	ldrb	r3, [r4, #18]
    37f4:	7113      	strb	r3, [r2, #4]
    37f6:	e002      	b.n	37fe <dmSecHciHandler+0x96>
    37f8:	232d      	movs	r3, #45	; 0x2d
    37fa:	466a      	mov	r2, sp
    37fc:	7093      	strb	r3, [r2, #2]
    37fe:	4668      	mov	r0, sp
    3800:	f7ff ff9c 	bl	373c <DmSmpCbackExec>
    3804:	466a      	mov	r2, sp
    3806:	7c23      	ldrb	r3, [r4, #16]
    3808:	4668      	mov	r0, sp
    380a:	8013      	strh	r3, [r2, #0]
    380c:	78eb      	ldrb	r3, [r5, #3]
    380e:	70d3      	strb	r3, [r2, #3]
    3810:	f000 fd58 	bl	42c4 <SmpDmEncryptInd>
    3814:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    3816:	46c0      	nop			; (mov r8, r8)
    3818:	00012fcc 	.word	0x00012fcc
    381c:	1000174c 	.word	0x1000174c

00003820 <DmSecCancelReq>:
    3820:	b570      	push	{r4, r5, r6, lr}
    3822:	0005      	movs	r5, r0
    3824:	2004      	movs	r0, #4
    3826:	000c      	movs	r4, r1
    3828:	f007 faf9 	bl	ae1e <WsfMsgAlloc>
    382c:	2800      	cmp	r0, #0
    382e:	d005      	beq.n	383c <DmSecCancelReq+0x1c>
    3830:	2303      	movs	r3, #3
    3832:	8005      	strh	r5, [r0, #0]
    3834:	7083      	strb	r3, [r0, #2]
    3836:	70c4      	strb	r4, [r0, #3]
    3838:	f000 fcbb 	bl	41b2 <SmpDmMsgSend>
    383c:	bd70      	pop	{r4, r5, r6, pc}

0000383e <DmSecAuthRsp>:
    383e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3840:	0007      	movs	r7, r0
    3842:	2016      	movs	r0, #22
    3844:	000e      	movs	r6, r1
    3846:	0015      	movs	r5, r2
    3848:	f007 fae9 	bl	ae1e <WsfMsgAlloc>
    384c:	1e04      	subs	r4, r0, #0
    384e:	d00d      	beq.n	386c <DmSecAuthRsp+0x2e>
    3850:	2304      	movs	r3, #4
    3852:	8007      	strh	r7, [r0, #0]
    3854:	7083      	strb	r3, [r0, #2]
    3856:	7506      	strb	r6, [r0, #20]
    3858:	2d00      	cmp	r5, #0
    385a:	d004      	beq.n	3866 <DmSecAuthRsp+0x28>
    385c:	18c0      	adds	r0, r0, r3
    385e:	0032      	movs	r2, r6
    3860:	0029      	movs	r1, r5
    3862:	f00c f974 	bl	fb4e <memcpy>
    3866:	0020      	movs	r0, r4
    3868:	f000 fca3 	bl	41b2 <SmpDmMsgSend>
    386c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000386e <DmSecInit>:
    386e:	4a04      	ldr	r2, [pc, #16]	; (3880 <DmSecInit+0x12>)
    3870:	4b04      	ldr	r3, [pc, #16]	; (3884 <DmSecInit+0x16>)
    3872:	615a      	str	r2, [r3, #20]
    3874:	4b04      	ldr	r3, [pc, #16]	; (3888 <DmSecInit+0x1a>)
    3876:	4a05      	ldr	r2, [pc, #20]	; (388c <DmSecInit+0x1e>)
    3878:	601a      	str	r2, [r3, #0]
    387a:	605a      	str	r2, [r3, #4]
    387c:	4770      	bx	lr
    387e:	46c0      	nop			; (mov r8, r8)
    3880:	00010bdc 	.word	0x00010bdc
    3884:	10001054 	.word	0x10001054
    3888:	10001770 	.word	0x10001770
    388c:	00012fcc 	.word	0x00012fcc

00003890 <DmSecSetLocalCsrk>:
    3890:	b510      	push	{r4, lr}
    3892:	0004      	movs	r4, r0
    3894:	f006 fbf4 	bl	a080 <WsfTaskLock>
    3898:	4b02      	ldr	r3, [pc, #8]	; (38a4 <DmSecSetLocalCsrk+0x14>)
    389a:	605c      	str	r4, [r3, #4]
    389c:	f006 fbf6 	bl	a08c <WsfTaskUnlock>
    38a0:	bd10      	pop	{r4, pc}
    38a2:	46c0      	nop			; (mov r8, r8)
    38a4:	10001770 	.word	0x10001770

000038a8 <DmSecSetLocalIrk>:
    38a8:	b510      	push	{r4, lr}
    38aa:	0004      	movs	r4, r0
    38ac:	f006 fbe8 	bl	a080 <WsfTaskLock>
    38b0:	4b02      	ldr	r3, [pc, #8]	; (38bc <DmSecSetLocalIrk+0x14>)
    38b2:	601c      	str	r4, [r3, #0]
    38b4:	f006 fbea 	bl	a08c <WsfTaskUnlock>
    38b8:	bd10      	pop	{r4, pc}
    38ba:	46c0      	nop			; (mov r8, r8)
    38bc:	10001770 	.word	0x10001770

000038c0 <DmSecGetLocalCsrk>:
    38c0:	4b01      	ldr	r3, [pc, #4]	; (38c8 <DmSecGetLocalCsrk+0x8>)
    38c2:	6858      	ldr	r0, [r3, #4]
    38c4:	4770      	bx	lr
    38c6:	46c0      	nop			; (mov r8, r8)
    38c8:	10001770 	.word	0x10001770

000038cc <DmSecGetLocalIrk>:
    38cc:	4b01      	ldr	r3, [pc, #4]	; (38d4 <DmSecGetLocalIrk+0x8>)
    38ce:	6818      	ldr	r0, [r3, #0]
    38d0:	4770      	bx	lr
    38d2:	46c0      	nop			; (mov r8, r8)
    38d4:	10001770 	.word	0x10001770

000038d8 <dmSecLescMsgHandler>:
    38d8:	b570      	push	{r4, r5, r6, lr}
    38da:	7883      	ldrb	r3, [r0, #2]
    38dc:	0004      	movs	r4, r0
    38de:	2b81      	cmp	r3, #129	; 0x81
    38e0:	d102      	bne.n	38e8 <dmSecLescMsgHandler+0x10>
    38e2:	3b4d      	subs	r3, #77	; 0x4d
    38e4:	7083      	strb	r3, [r0, #2]
    38e6:	e010      	b.n	390a <dmSecLescMsgHandler+0x32>
    38e8:	2b80      	cmp	r3, #128	; 0x80
    38ea:	d112      	bne.n	3912 <dmSecLescMsgHandler+0x3a>
    38ec:	3b4d      	subs	r3, #77	; 0x4d
    38ee:	7083      	strb	r3, [r0, #2]
    38f0:	6861      	ldr	r1, [r4, #4]
    38f2:	3004      	adds	r0, #4
    38f4:	f009 fb0d 	bl	cf12 <Calc128Cpy>
    38f8:	0020      	movs	r0, r4
    38fa:	4d06      	ldr	r5, [pc, #24]	; (3914 <dmSecLescMsgHandler+0x3c>)
    38fc:	3014      	adds	r0, #20
    38fe:	6829      	ldr	r1, [r5, #0]
    3900:	f009 fb07 	bl	cf12 <Calc128Cpy>
    3904:	6828      	ldr	r0, [r5, #0]
    3906:	f007 fa3b 	bl	ad80 <WsfBufFree>
    390a:	4b03      	ldr	r3, [pc, #12]	; (3918 <dmSecLescMsgHandler+0x40>)
    390c:	0020      	movs	r0, r4
    390e:	689b      	ldr	r3, [r3, #8]
    3910:	4798      	blx	r3
    3912:	bd70      	pop	{r4, r5, r6, pc}
    3914:	10001778 	.word	0x10001778
    3918:	1000174c 	.word	0x1000174c

0000391c <DmSecKeypressReq>:
    391c:	b570      	push	{r4, r5, r6, lr}
    391e:	0004      	movs	r4, r0
    3920:	2006      	movs	r0, #6
    3922:	000d      	movs	r5, r1
    3924:	f007 fa7b 	bl	ae1e <WsfMsgAlloc>
    3928:	2800      	cmp	r0, #0
    392a:	d005      	beq.n	3938 <DmSecKeypressReq+0x1c>
    392c:	2316      	movs	r3, #22
    392e:	7105      	strb	r5, [r0, #4]
    3930:	8004      	strh	r4, [r0, #0]
    3932:	7083      	strb	r3, [r0, #2]
    3934:	f000 fc3d 	bl	41b2 <SmpDmMsgSend>
    3938:	bd70      	pop	{r4, r5, r6, pc}

0000393a <DmSecSetOob>:
    393a:	b510      	push	{r4, lr}
    393c:	f000 fe6a 	bl	4614 <SmpScSetOobCfg>
    3940:	bd10      	pop	{r4, pc}

00003942 <DmSecCalcOobReq>:
    3942:	b5f0      	push	{r4, r5, r6, r7, lr}
    3944:	0005      	movs	r5, r0
    3946:	b08d      	sub	sp, #52	; 0x34
    3948:	2010      	movs	r0, #16
    394a:	000f      	movs	r7, r1
    394c:	f007 f9d8 	bl	ad00 <WsfBufAlloc>
    3950:	4c1b      	ldr	r4, [pc, #108]	; (39c0 <DmSecCalcOobReq+0x7e>)
    3952:	4e1c      	ldr	r6, [pc, #112]	; (39c4 <DmSecCalcOobReq+0x82>)
    3954:	6020      	str	r0, [r4, #0]
    3956:	2800      	cmp	r0, #0
    3958:	d022      	beq.n	39a0 <DmSecCalcOobReq+0x5e>
    395a:	0029      	movs	r1, r5
    395c:	f009 fad9 	bl	cf12 <Calc128Cpy>
    3960:	2041      	movs	r0, #65	; 0x41
    3962:	f007 f9cd 	bl	ad00 <WsfBufAlloc>
    3966:	1e05      	subs	r5, r0, #0
    3968:	d017      	beq.n	399a <DmSecCalcOobReq+0x58>
    396a:	2220      	movs	r2, #32
    396c:	0039      	movs	r1, r7
    396e:	f000 fd73 	bl	4458 <SmpScCat>
    3972:	2220      	movs	r2, #32
    3974:	0039      	movs	r1, r7
    3976:	f000 fd6f 	bl	4458 <SmpScCat>
    397a:	2200      	movs	r2, #0
    397c:	2180      	movs	r1, #128	; 0x80
    397e:	7002      	strb	r2, [r0, #0]
    3980:	7b33      	ldrb	r3, [r6, #12]
    3982:	9101      	str	r1, [sp, #4]
    3984:	9200      	str	r2, [sp, #0]
    3986:	0029      	movs	r1, r5
    3988:	3241      	adds	r2, #65	; 0x41
    398a:	6820      	ldr	r0, [r4, #0]
    398c:	f006 ff4c 	bl	a828 <SecCmac>
    3990:	2800      	cmp	r0, #0
    3992:	d112      	bne.n	39ba <DmSecCalcOobReq+0x78>
    3994:	0028      	movs	r0, r5
    3996:	f007 f9f3 	bl	ad80 <WsfBufFree>
    399a:	6820      	ldr	r0, [r4, #0]
    399c:	f007 f9f0 	bl	ad80 <WsfBufFree>
    39a0:	ac03      	add	r4, sp, #12
    39a2:	2224      	movs	r2, #36	; 0x24
    39a4:	2100      	movs	r1, #0
    39a6:	0020      	movs	r0, r4
    39a8:	f00c f8f6 	bl	fb98 <memset>
    39ac:	2333      	movs	r3, #51	; 0x33
    39ae:	70a3      	strb	r3, [r4, #2]
    39b0:	3b2c      	subs	r3, #44	; 0x2c
    39b2:	70e3      	strb	r3, [r4, #3]
    39b4:	0020      	movs	r0, r4
    39b6:	68b3      	ldr	r3, [r6, #8]
    39b8:	4798      	blx	r3
    39ba:	b00d      	add	sp, #52	; 0x34
    39bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39be:	46c0      	nop			; (mov r8, r8)
    39c0:	10001778 	.word	0x10001778
    39c4:	1000174c 	.word	0x1000174c

000039c8 <DmSecGenerateEccKeyReq>:
    39c8:	b510      	push	{r4, lr}
    39ca:	4b03      	ldr	r3, [pc, #12]	; (39d8 <DmSecGenerateEccKeyReq+0x10>)
    39cc:	2281      	movs	r2, #129	; 0x81
    39ce:	7b18      	ldrb	r0, [r3, #12]
    39d0:	2100      	movs	r1, #0
    39d2:	f006 ffcf 	bl	a974 <SecEccGenKey>
    39d6:	bd10      	pop	{r4, pc}
    39d8:	1000174c 	.word	0x1000174c

000039dc <DmSecSetDebugEccKey>:
    39dc:	b530      	push	{r4, r5, lr}
    39de:	2420      	movs	r4, #32
    39e0:	4d12      	ldr	r5, [pc, #72]	; (3a2c <DmSecSetDebugEccKey+0x50>)
    39e2:	b099      	sub	sp, #100	; 0x64
    39e4:	0022      	movs	r2, r4
    39e6:	0029      	movs	r1, r5
    39e8:	4668      	mov	r0, sp
    39ea:	f00c f8b0 	bl	fb4e <memcpy>
    39ee:	1929      	adds	r1, r5, r4
    39f0:	0022      	movs	r2, r4
    39f2:	a808      	add	r0, sp, #32
    39f4:	f00c f8ab 	bl	fb4e <memcpy>
    39f8:	0029      	movs	r1, r5
    39fa:	0022      	movs	r2, r4
    39fc:	3140      	adds	r1, #64	; 0x40
    39fe:	a810      	add	r0, sp, #64	; 0x40
    3a00:	f00c f8a5 	bl	fb4e <memcpy>
    3a04:	4d0a      	ldr	r5, [pc, #40]	; (3a30 <DmSecSetDebugEccKey+0x54>)
    3a06:	0022      	movs	r2, r4
    3a08:	0028      	movs	r0, r5
    3a0a:	4669      	mov	r1, sp
    3a0c:	3044      	adds	r0, #68	; 0x44
    3a0e:	f00c f89e 	bl	fb4e <memcpy>
    3a12:	0022      	movs	r2, r4
    3a14:	a908      	add	r1, sp, #32
    3a16:	1d28      	adds	r0, r5, #4
    3a18:	f00c f899 	bl	fb4e <memcpy>
    3a1c:	0028      	movs	r0, r5
    3a1e:	0022      	movs	r2, r4
    3a20:	a910      	add	r1, sp, #64	; 0x40
    3a22:	3024      	adds	r0, #36	; 0x24
    3a24:	f00c f893 	bl	fb4e <memcpy>
    3a28:	b019      	add	sp, #100	; 0x64
    3a2a:	bd30      	pop	{r4, r5, pc}
    3a2c:	00010be8 	.word	0x00010be8
    3a30:	10001778 	.word	0x10001778

00003a34 <DmSecSetEccKey>:
    3a34:	b510      	push	{r4, lr}
    3a36:	0001      	movs	r1, r0
    3a38:	4802      	ldr	r0, [pc, #8]	; (3a44 <DmSecSetEccKey+0x10>)
    3a3a:	2260      	movs	r2, #96	; 0x60
    3a3c:	3004      	adds	r0, #4
    3a3e:	f00c f886 	bl	fb4e <memcpy>
    3a42:	bd10      	pop	{r4, pc}
    3a44:	10001778 	.word	0x10001778

00003a48 <DmSecGetEccKey>:
    3a48:	4801      	ldr	r0, [pc, #4]	; (3a50 <DmSecGetEccKey+0x8>)
    3a4a:	3004      	adds	r0, #4
    3a4c:	4770      	bx	lr
    3a4e:	46c0      	nop			; (mov r8, r8)
    3a50:	10001778 	.word	0x10001778

00003a54 <DmSecCompareRsp>:
    3a54:	b570      	push	{r4, r5, r6, lr}
    3a56:	0005      	movs	r5, r0
    3a58:	2016      	movs	r0, #22
    3a5a:	000c      	movs	r4, r1
    3a5c:	f007 f9df 	bl	ae1e <WsfMsgAlloc>
    3a60:	2800      	cmp	r0, #0
    3a62:	d009      	beq.n	3a78 <DmSecCompareRsp+0x24>
    3a64:	8005      	strh	r5, [r0, #0]
    3a66:	2315      	movs	r3, #21
    3a68:	2c00      	cmp	r4, #0
    3a6a:	d102      	bne.n	3a72 <DmSecCompareRsp+0x1e>
    3a6c:	2304      	movs	r3, #4
    3a6e:	70c3      	strb	r3, [r0, #3]
    3a70:	3b01      	subs	r3, #1
    3a72:	7083      	strb	r3, [r0, #2]
    3a74:	f000 fb9d 	bl	41b2 <SmpDmMsgSend>
    3a78:	bd70      	pop	{r4, r5, r6, pc}

00003a7a <DmSecGetCompareValue>:
    3a7a:	0002      	movs	r2, r0
    3a7c:	b510      	push	{r4, lr}
    3a7e:	7b83      	ldrb	r3, [r0, #14]
    3a80:	4906      	ldr	r1, [pc, #24]	; (3a9c <DmSecGetCompareValue+0x22>)
    3a82:	0218      	lsls	r0, r3, #8
    3a84:	7b53      	ldrb	r3, [r2, #13]
    3a86:	041b      	lsls	r3, r3, #16
    3a88:	18c3      	adds	r3, r0, r3
    3a8a:	7bd0      	ldrb	r0, [r2, #15]
    3a8c:	1818      	adds	r0, r3, r0
    3a8e:	7b13      	ldrb	r3, [r2, #12]
    3a90:	061b      	lsls	r3, r3, #24
    3a92:	18c0      	adds	r0, r0, r3
    3a94:	f002 fbb0 	bl	61f8 <__aeabi_uidivmod>
    3a98:	0008      	movs	r0, r1
    3a9a:	bd10      	pop	{r4, pc}
    3a9c:	000f4240 	.word	0x000f4240

00003aa0 <DmSecLescInit>:
    3aa0:	4b02      	ldr	r3, [pc, #8]	; (3aac <DmSecLescInit+0xc>)
    3aa2:	4a03      	ldr	r2, [pc, #12]	; (3ab0 <DmSecLescInit+0x10>)
    3aa4:	3360      	adds	r3, #96	; 0x60
    3aa6:	6213      	str	r3, [r2, #32]
    3aa8:	4770      	bx	lr
    3aaa:	46c0      	nop			; (mov r8, r8)
    3aac:	00010be8 	.word	0x00010be8
    3ab0:	10001054 	.word	0x10001054

00003ab4 <l2cDefaultDataCback>:
    3ab4:	4770      	bx	lr

00003ab6 <l2cDefaultDataCidCback>:
    3ab6:	4770      	bx	lr

00003ab8 <l2cDefaultCtrlCback>:
    3ab8:	4770      	bx	lr

00003aba <l2cHciFlowCback>:
    3aba:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3abc:	000d      	movs	r5, r1
    3abe:	f7ff f9bb 	bl	2e38 <DmConnIdByHandle>
    3ac2:	ac01      	add	r4, sp, #4
    3ac4:	b280      	uxth	r0, r0
    3ac6:	8020      	strh	r0, [r4, #0]
    3ac8:	2800      	cmp	r0, #0
    3aca:	d00c      	beq.n	3ae6 <l2cHciFlowCback+0x2c>
    3acc:	4e06      	ldr	r6, [pc, #24]	; (3ae8 <l2cHciFlowCback+0x2e>)
    3ace:	0020      	movs	r0, r4
    3ad0:	68f3      	ldr	r3, [r6, #12]
    3ad2:	70a5      	strb	r5, [r4, #2]
    3ad4:	4798      	blx	r3
    3ad6:	0020      	movs	r0, r4
    3ad8:	6933      	ldr	r3, [r6, #16]
    3ada:	70a5      	strb	r5, [r4, #2]
    3adc:	4798      	blx	r3
    3ade:	70a5      	strb	r5, [r4, #2]
    3ae0:	6973      	ldr	r3, [r6, #20]
    3ae2:	0020      	movs	r0, r4
    3ae4:	4798      	blx	r3
    3ae6:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    3ae8:	100017dc 	.word	0x100017dc

00003aec <l2cHciAclCback>:
    3aec:	b570      	push	{r4, r5, r6, lr}
    3aee:	78c3      	ldrb	r3, [r0, #3]
    3af0:	7882      	ldrb	r2, [r0, #2]
    3af2:	021b      	lsls	r3, r3, #8
    3af4:	18d3      	adds	r3, r2, r3
    3af6:	b29b      	uxth	r3, r3
    3af8:	0004      	movs	r4, r0
    3afa:	2b03      	cmp	r3, #3
    3afc:	d802      	bhi.n	3b04 <l2cHciAclCback+0x18>
    3afe:	1d02      	adds	r2, r0, #4
    3b00:	2100      	movs	r1, #0
    3b02:	e005      	b.n	3b10 <l2cHciAclCback+0x24>
    3b04:	7941      	ldrb	r1, [r0, #5]
    3b06:	7902      	ldrb	r2, [r0, #4]
    3b08:	0209      	lsls	r1, r1, #8
    3b0a:	1851      	adds	r1, r2, r1
    3b0c:	b289      	uxth	r1, r1
    3b0e:	1d82      	adds	r2, r0, #6
    3b10:	1d08      	adds	r0, r1, #4
    3b12:	4283      	cmp	r3, r0
    3b14:	d11e      	bne.n	3b54 <l2cHciAclCback+0x68>
    3b16:	7860      	ldrb	r0, [r4, #1]
    3b18:	7823      	ldrb	r3, [r4, #0]
    3b1a:	0200      	lsls	r0, r0, #8
    3b1c:	7856      	ldrb	r6, [r2, #1]
    3b1e:	1818      	adds	r0, r3, r0
    3b20:	7813      	ldrb	r3, [r2, #0]
    3b22:	0236      	lsls	r6, r6, #8
    3b24:	199e      	adds	r6, r3, r6
    3b26:	0500      	lsls	r0, r0, #20
    3b28:	b2b6      	uxth	r6, r6
    3b2a:	0d00      	lsrs	r0, r0, #20
    3b2c:	4b0b      	ldr	r3, [pc, #44]	; (3b5c <l2cHciAclCback+0x70>)
    3b2e:	2e05      	cmp	r6, #5
    3b30:	d005      	beq.n	3b3e <l2cHciAclCback+0x52>
    3b32:	2e06      	cmp	r6, #6
    3b34:	d005      	beq.n	3b42 <l2cHciAclCback+0x56>
    3b36:	2e04      	cmp	r6, #4
    3b38:	d107      	bne.n	3b4a <l2cHciAclCback+0x5e>
    3b3a:	681b      	ldr	r3, [r3, #0]
    3b3c:	e002      	b.n	3b44 <l2cHciAclCback+0x58>
    3b3e:	689b      	ldr	r3, [r3, #8]
    3b40:	e000      	b.n	3b44 <l2cHciAclCback+0x58>
    3b42:	685b      	ldr	r3, [r3, #4]
    3b44:	0022      	movs	r2, r4
    3b46:	4798      	blx	r3
    3b48:	e004      	b.n	3b54 <l2cHciAclCback+0x68>
    3b4a:	6a1d      	ldr	r5, [r3, #32]
    3b4c:	000a      	movs	r2, r1
    3b4e:	0023      	movs	r3, r4
    3b50:	0031      	movs	r1, r6
    3b52:	47a8      	blx	r5
    3b54:	0020      	movs	r0, r4
    3b56:	f007 f979 	bl	ae4c <WsfMsgFree>
    3b5a:	bd70      	pop	{r4, r5, r6, pc}
    3b5c:	100017dc 	.word	0x100017dc

00003b60 <l2cRxSignalingPkt>:
    3b60:	b570      	push	{r4, r5, r6, lr}
    3b62:	000d      	movs	r5, r1
    3b64:	0016      	movs	r6, r2
    3b66:	0004      	movs	r4, r0
    3b68:	f7ff f966 	bl	2e38 <DmConnIdByHandle>
    3b6c:	f7ff f9f2 	bl	2f54 <DmConnRole>
    3b70:	2800      	cmp	r0, #0
    3b72:	d102      	bne.n	3b7a <l2cRxSignalingPkt+0x1a>
    3b74:	4b06      	ldr	r3, [pc, #24]	; (3b90 <l2cRxSignalingPkt+0x30>)
    3b76:	699b      	ldr	r3, [r3, #24]
    3b78:	e003      	b.n	3b82 <l2cRxSignalingPkt+0x22>
    3b7a:	2801      	cmp	r0, #1
    3b7c:	d107      	bne.n	3b8e <l2cRxSignalingPkt+0x2e>
    3b7e:	4b04      	ldr	r3, [pc, #16]	; (3b90 <l2cRxSignalingPkt+0x30>)
    3b80:	69db      	ldr	r3, [r3, #28]
    3b82:	2b00      	cmp	r3, #0
    3b84:	d003      	beq.n	3b8e <l2cRxSignalingPkt+0x2e>
    3b86:	0032      	movs	r2, r6
    3b88:	0029      	movs	r1, r5
    3b8a:	0020      	movs	r0, r4
    3b8c:	4798      	blx	r3
    3b8e:	bd70      	pop	{r4, r5, r6, pc}
    3b90:	100017dc 	.word	0x100017dc

00003b94 <l2cMsgAlloc>:
    3b94:	b510      	push	{r4, lr}
    3b96:	2100      	movs	r1, #0
    3b98:	f007 f92c 	bl	adf4 <WsfMsgDataAlloc>
    3b9c:	bd10      	pop	{r4, pc}

00003b9e <L2cInit>:
    3b9e:	4b0a      	ldr	r3, [pc, #40]	; (3bc8 <L2cInit+0x2a>)
    3ba0:	4a0a      	ldr	r2, [pc, #40]	; (3bcc <L2cInit+0x2e>)
    3ba2:	b510      	push	{r4, lr}
    3ba4:	601a      	str	r2, [r3, #0]
    3ba6:	605a      	str	r2, [r3, #4]
    3ba8:	4a09      	ldr	r2, [pc, #36]	; (3bd0 <L2cInit+0x32>)
    3baa:	490a      	ldr	r1, [pc, #40]	; (3bd4 <L2cInit+0x36>)
    3bac:	609a      	str	r2, [r3, #8]
    3bae:	4a0a      	ldr	r2, [pc, #40]	; (3bd8 <L2cInit+0x3a>)
    3bb0:	480a      	ldr	r0, [pc, #40]	; (3bdc <L2cInit+0x3e>)
    3bb2:	60da      	str	r2, [r3, #12]
    3bb4:	611a      	str	r2, [r3, #16]
    3bb6:	615a      	str	r2, [r3, #20]
    3bb8:	4a09      	ldr	r2, [pc, #36]	; (3be0 <L2cInit+0x42>)
    3bba:	621a      	str	r2, [r3, #32]
    3bbc:	2201      	movs	r2, #1
    3bbe:	3305      	adds	r3, #5
    3bc0:	77da      	strb	r2, [r3, #31]
    3bc2:	f008 fded 	bl	c7a0 <HciAclRegister>
    3bc6:	bd10      	pop	{r4, pc}
    3bc8:	100017dc 	.word	0x100017dc
    3bcc:	00003ab5 	.word	0x00003ab5
    3bd0:	00003b61 	.word	0x00003b61
    3bd4:	00003abb 	.word	0x00003abb
    3bd8:	00003ab9 	.word	0x00003ab9
    3bdc:	00003aed 	.word	0x00003aed
    3be0:	00003ab7 	.word	0x00003ab7

00003be4 <L2cRegister>:
    3be4:	4b04      	ldr	r3, [pc, #16]	; (3bf8 <L2cRegister+0x14>)
    3be6:	2804      	cmp	r0, #4
    3be8:	d102      	bne.n	3bf0 <L2cRegister+0xc>
    3bea:	6019      	str	r1, [r3, #0]
    3bec:	60da      	str	r2, [r3, #12]
    3bee:	e001      	b.n	3bf4 <L2cRegister+0x10>
    3bf0:	6059      	str	r1, [r3, #4]
    3bf2:	611a      	str	r2, [r3, #16]
    3bf4:	4770      	bx	lr
    3bf6:	46c0      	nop			; (mov r8, r8)
    3bf8:	100017dc 	.word	0x100017dc

00003bfc <L2cDataReq>:
    3bfc:	b510      	push	{r4, lr}
    3bfe:	7019      	strb	r1, [r3, #0]
    3c00:	b2d4      	uxtb	r4, r2
    3c02:	0a09      	lsrs	r1, r1, #8
    3c04:	7059      	strb	r1, [r3, #1]
    3c06:	1d21      	adds	r1, r4, #4
    3c08:	7099      	strb	r1, [r3, #2]
    3c0a:	1d11      	adds	r1, r2, #4
    3c0c:	1209      	asrs	r1, r1, #8
    3c0e:	0a12      	lsrs	r2, r2, #8
    3c10:	7198      	strb	r0, [r3, #6]
    3c12:	0a00      	lsrs	r0, r0, #8
    3c14:	71d8      	strb	r0, [r3, #7]
    3c16:	70d9      	strb	r1, [r3, #3]
    3c18:	711c      	strb	r4, [r3, #4]
    3c1a:	715a      	strb	r2, [r3, #5]
    3c1c:	0018      	movs	r0, r3
    3c1e:	f003 ff0d 	bl	7a3c <HciSendAclData>
    3c22:	bd10      	pop	{r4, pc}

00003c24 <l2cSendCmdReject>:
    3c24:	b570      	push	{r4, r5, r6, lr}
    3c26:	0005      	movs	r5, r0
    3c28:	200e      	movs	r0, #14
    3c2a:	000e      	movs	r6, r1
    3c2c:	0014      	movs	r4, r2
    3c2e:	f7ff ffb1 	bl	3b94 <l2cMsgAlloc>
    3c32:	1e03      	subs	r3, r0, #0
    3c34:	d00e      	beq.n	3c54 <l2cSendCmdReject+0x30>
    3c36:	2201      	movs	r2, #1
    3c38:	7202      	strb	r2, [r0, #8]
    3c3a:	1892      	adds	r2, r2, r2
    3c3c:	7282      	strb	r2, [r0, #10]
    3c3e:	2200      	movs	r2, #0
    3c40:	7304      	strb	r4, [r0, #12]
    3c42:	0a24      	lsrs	r4, r4, #8
    3c44:	72c2      	strb	r2, [r0, #11]
    3c46:	7246      	strb	r6, [r0, #9]
    3c48:	7344      	strb	r4, [r0, #13]
    3c4a:	3206      	adds	r2, #6
    3c4c:	0029      	movs	r1, r5
    3c4e:	2005      	movs	r0, #5
    3c50:	f7ff ffd4 	bl	3bfc <L2cDataReq>
    3c54:	bd70      	pop	{r4, r5, r6, pc}
    3c56:	46c0      	nop			; (mov r8, r8)

00003c58 <l2cSlaveRxSignalingPkt>:
    3c58:	b570      	push	{r4, r5, r6, lr}
    3c5a:	0005      	movs	r5, r0
    3c5c:	7ad0      	ldrb	r0, [r2, #11]
    3c5e:	7a94      	ldrb	r4, [r2, #10]
    3c60:	0200      	lsls	r0, r0, #8
    3c62:	1820      	adds	r0, r4, r0
    3c64:	b280      	uxth	r0, r0
    3c66:	1d04      	adds	r4, r0, #4
    3c68:	000b      	movs	r3, r1
    3c6a:	7a51      	ldrb	r1, [r2, #9]
    3c6c:	42a3      	cmp	r3, r4
    3c6e:	d115      	bne.n	3c9c <l2cSlaveRxSignalingPkt+0x44>
    3c70:	7a13      	ldrb	r3, [r2, #8]
    3c72:	2b13      	cmp	r3, #19
    3c74:	d107      	bne.n	3c86 <l2cSlaveRxSignalingPkt+0x2e>
    3c76:	2802      	cmp	r0, #2
    3c78:	d110      	bne.n	3c9c <l2cSlaveRxSignalingPkt+0x44>
    3c7a:	7b53      	ldrb	r3, [r2, #13]
    3c7c:	7b14      	ldrb	r4, [r2, #12]
    3c7e:	021b      	lsls	r3, r3, #8
    3c80:	18e3      	adds	r3, r4, r3
    3c82:	b29c      	uxth	r4, r3
    3c84:	e002      	b.n	3c8c <l2cSlaveRxSignalingPkt+0x34>
    3c86:	2b01      	cmp	r3, #1
    3c88:	d108      	bne.n	3c9c <l2cSlaveRxSignalingPkt+0x44>
    3c8a:	001c      	movs	r4, r3
    3c8c:	4806      	ldr	r0, [pc, #24]	; (3ca8 <l2cSlaveRxSignalingPkt+0x50>)
    3c8e:	f007 faa5 	bl	b1dc <WsfTimerStop>
    3c92:	0021      	movs	r1, r4
    3c94:	0028      	movs	r0, r5
    3c96:	f7ff f9af 	bl	2ff8 <DmL2cConnUpdateCnf>
    3c9a:	e003      	b.n	3ca4 <l2cSlaveRxSignalingPkt+0x4c>
    3c9c:	2200      	movs	r2, #0
    3c9e:	0028      	movs	r0, r5
    3ca0:	f7ff ffc0 	bl	3c24 <l2cSendCmdReject>
    3ca4:	bd70      	pop	{r4, r5, r6, pc}
    3ca6:	46c0      	nop			; (mov r8, r8)
    3ca8:	10001804 	.word	0x10001804

00003cac <L2cSlaveInit>:
    3cac:	4a01      	ldr	r2, [pc, #4]	; (3cb4 <L2cSlaveInit+0x8>)
    3cae:	4b02      	ldr	r3, [pc, #8]	; (3cb8 <L2cSlaveInit+0xc>)
    3cb0:	61da      	str	r2, [r3, #28]
    3cb2:	4770      	bx	lr
    3cb4:	00003c59 	.word	0x00003c59
    3cb8:	100017dc 	.word	0x100017dc

00003cbc <L2cDmConnUpdateReq>:
    3cbc:	b570      	push	{r4, r5, r6, lr}
    3cbe:	0005      	movs	r5, r0
    3cc0:	4e1b      	ldr	r6, [pc, #108]	; (3d30 <L2cDmConnUpdateReq+0x74>)
    3cc2:	000c      	movs	r4, r1
    3cc4:	0030      	movs	r0, r6
    3cc6:	211e      	movs	r1, #30
    3cc8:	f007 fa62 	bl	b190 <WsfTimerStartSec>
    3ccc:	2014      	movs	r0, #20
    3cce:	8175      	strh	r5, [r6, #10]
    3cd0:	f7ff ff60 	bl	3b94 <l2cMsgAlloc>
    3cd4:	1e03      	subs	r3, r0, #0
    3cd6:	d02a      	beq.n	3d2e <L2cDmConnUpdateReq+0x72>
    3cd8:	2212      	movs	r2, #18
    3cda:	7202      	strb	r2, [r0, #8]
    3cdc:	4a15      	ldr	r2, [pc, #84]	; (3d34 <L2cDmConnUpdateReq+0x78>)
    3cde:	1d51      	adds	r1, r2, #5
    3ce0:	7fc8      	ldrb	r0, [r1, #31]
    3ce2:	7258      	strb	r0, [r3, #9]
    3ce4:	7fc9      	ldrb	r1, [r1, #31]
    3ce6:	2001      	movs	r0, #1
    3ce8:	29ff      	cmp	r1, #255	; 0xff
    3cea:	d001      	beq.n	3cf0 <L2cDmConnUpdateReq+0x34>
    3cec:	1809      	adds	r1, r1, r0
    3cee:	b2c8      	uxtb	r0, r1
    3cf0:	3205      	adds	r2, #5
    3cf2:	77d0      	strb	r0, [r2, #31]
    3cf4:	2208      	movs	r2, #8
    3cf6:	729a      	strb	r2, [r3, #10]
    3cf8:	2200      	movs	r2, #0
    3cfa:	72da      	strb	r2, [r3, #11]
    3cfc:	8822      	ldrh	r2, [r4, #0]
    3cfe:	0029      	movs	r1, r5
    3d00:	731a      	strb	r2, [r3, #12]
    3d02:	8822      	ldrh	r2, [r4, #0]
    3d04:	2005      	movs	r0, #5
    3d06:	0a12      	lsrs	r2, r2, #8
    3d08:	735a      	strb	r2, [r3, #13]
    3d0a:	8862      	ldrh	r2, [r4, #2]
    3d0c:	739a      	strb	r2, [r3, #14]
    3d0e:	8862      	ldrh	r2, [r4, #2]
    3d10:	0a12      	lsrs	r2, r2, #8
    3d12:	73da      	strb	r2, [r3, #15]
    3d14:	88a2      	ldrh	r2, [r4, #4]
    3d16:	741a      	strb	r2, [r3, #16]
    3d18:	88a2      	ldrh	r2, [r4, #4]
    3d1a:	0a12      	lsrs	r2, r2, #8
    3d1c:	745a      	strb	r2, [r3, #17]
    3d1e:	88e2      	ldrh	r2, [r4, #6]
    3d20:	749a      	strb	r2, [r3, #18]
    3d22:	88e2      	ldrh	r2, [r4, #6]
    3d24:	0a12      	lsrs	r2, r2, #8
    3d26:	74da      	strb	r2, [r3, #19]
    3d28:	220c      	movs	r2, #12
    3d2a:	f7ff ff67 	bl	3bfc <L2cDataReq>
    3d2e:	bd70      	pop	{r4, r5, r6, pc}
    3d30:	10001804 	.word	0x10001804
    3d34:	100017dc 	.word	0x100017dc

00003d38 <L2cSlaveHandlerInit>:
    3d38:	2201      	movs	r2, #1
    3d3a:	4b02      	ldr	r3, [pc, #8]	; (3d44 <L2cSlaveHandlerInit+0xc>)
    3d3c:	731a      	strb	r2, [r3, #12]
    3d3e:	7218      	strb	r0, [r3, #8]
    3d40:	7418      	strb	r0, [r3, #16]
    3d42:	4770      	bx	lr
    3d44:	10001804 	.word	0x10001804

00003d48 <L2cSlaveHandler>:
    3d48:	b510      	push	{r4, lr}
    3d4a:	1e0b      	subs	r3, r1, #0
    3d4c:	d005      	beq.n	3d5a <L2cSlaveHandler+0x12>
    3d4e:	7889      	ldrb	r1, [r1, #2]
    3d50:	2901      	cmp	r1, #1
    3d52:	d102      	bne.n	3d5a <L2cSlaveHandler+0x12>
    3d54:	8818      	ldrh	r0, [r3, #0]
    3d56:	f7ff f94f 	bl	2ff8 <DmL2cConnUpdateCnf>
    3d5a:	bd10      	pop	{r4, pc}

00003d5c <smpDmConnCback>:
    3d5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3d5e:	0004      	movs	r4, r0
    3d60:	8802      	ldrh	r2, [r0, #0]
    3d62:	78a1      	ldrb	r1, [r4, #2]
    3d64:	b2d0      	uxtb	r0, r2
    3d66:	1e46      	subs	r6, r0, #1
    3d68:	4d22      	ldr	r5, [pc, #136]	; (3df4 <smpDmConnCback+0x98>)
    3d6a:	2927      	cmp	r1, #39	; 0x27
    3d6c:	d124      	bne.n	3db8 <smpDmConnCback+0x5c>
    3d6e:	f7ff f8f1 	bl	2f54 <DmConnRole>
    3d72:	2338      	movs	r3, #56	; 0x38
    3d74:	4373      	muls	r3, r6
    3d76:	18eb      	adds	r3, r5, r3
    3d78:	001a      	movs	r2, r3
    3d7a:	322a      	adds	r2, #42	; 0x2a
    3d7c:	2800      	cmp	r0, #0
    3d7e:	d104      	bne.n	3d8a <smpDmConnCback+0x2e>
    3d80:	2101      	movs	r1, #1
    3d82:	332f      	adds	r3, #47	; 0x2f
    3d84:	7011      	strb	r1, [r2, #0]
    3d86:	220b      	movs	r2, #11
    3d88:	e003      	b.n	3d92 <smpDmConnCback+0x36>
    3d8a:	2100      	movs	r1, #0
    3d8c:	7011      	strb	r1, [r2, #0]
    3d8e:	2201      	movs	r2, #1
    3d90:	332f      	adds	r3, #47	; 0x2f
    3d92:	701a      	strb	r2, [r3, #0]
    3d94:	2338      	movs	r3, #56	; 0x38
    3d96:	435e      	muls	r6, r3
    3d98:	19ad      	adds	r5, r5, r6
    3d9a:	002b      	movs	r3, r5
    3d9c:	88e2      	ldrh	r2, [r4, #6]
    3d9e:	332d      	adds	r3, #45	; 0x2d
    3da0:	852a      	strh	r2, [r5, #40]	; 0x28
    3da2:	8822      	ldrh	r2, [r4, #0]
    3da4:	701a      	strb	r2, [r3, #0]
    3da6:	002a      	movs	r2, r5
    3da8:	2300      	movs	r3, #0
    3daa:	322b      	adds	r2, #43	; 0x2b
    3dac:	3533      	adds	r5, #51	; 0x33
    3dae:	7013      	strb	r3, [r2, #0]
    3db0:	7053      	strb	r3, [r2, #1]
    3db2:	71d3      	strb	r3, [r2, #7]
    3db4:	702b      	strb	r3, [r5, #0]
    3db6:	e01b      	b.n	3df0 <smpDmConnCback+0x94>
    3db8:	2338      	movs	r3, #56	; 0x38
    3dba:	435e      	muls	r6, r3
    3dbc:	19ad      	adds	r5, r5, r6
    3dbe:	002e      	movs	r6, r5
    3dc0:	362d      	adds	r6, #45	; 0x2d
    3dc2:	7833      	ldrb	r3, [r6, #0]
    3dc4:	2b00      	cmp	r3, #0
    3dc6:	d013      	beq.n	3df0 <smpDmConnCback+0x94>
    3dc8:	2928      	cmp	r1, #40	; 0x28
    3dca:	d111      	bne.n	3df0 <smpDmConnCback+0x94>
    3dcc:	230a      	movs	r3, #10
    3dce:	a901      	add	r1, sp, #4
    3dd0:	800a      	strh	r2, [r1, #0]
    3dd2:	708b      	strb	r3, [r1, #2]
    3dd4:	7a23      	ldrb	r3, [r4, #8]
    3dd6:	2400      	movs	r4, #0
    3dd8:	3320      	adds	r3, #32
    3dda:	0028      	movs	r0, r5
    3ddc:	70cb      	strb	r3, [r1, #3]
    3dde:	f001 fac2 	bl	5366 <smpSmExecute>
    3de2:	6a68      	ldr	r0, [r5, #36]	; 0x24
    3de4:	7034      	strb	r4, [r6, #0]
    3de6:	42a0      	cmp	r0, r4
    3de8:	d002      	beq.n	3df0 <smpDmConnCback+0x94>
    3dea:	f007 f82f 	bl	ae4c <WsfMsgFree>
    3dee:	626c      	str	r4, [r5, #36]	; 0x24
    3df0:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    3df2:	46c0      	nop			; (mov r8, r8)
    3df4:	10001818 	.word	0x10001818

00003df8 <smpCcbByHandle>:
    3df8:	b510      	push	{r4, lr}
    3dfa:	f7ff f81d 	bl	2e38 <DmConnIdByHandle>
    3dfe:	2800      	cmp	r0, #0
    3e00:	d004      	beq.n	3e0c <smpCcbByHandle+0x14>
    3e02:	2338      	movs	r3, #56	; 0x38
    3e04:	3801      	subs	r0, #1
    3e06:	4358      	muls	r0, r3
    3e08:	4b01      	ldr	r3, [pc, #4]	; (3e10 <smpCcbByHandle+0x18>)
    3e0a:	1818      	adds	r0, r3, r0
    3e0c:	bd10      	pop	{r4, pc}
    3e0e:	46c0      	nop			; (mov r8, r8)
    3e10:	10001818 	.word	0x10001818

00003e14 <smpL2cDataCback>:
    3e14:	b530      	push	{r4, r5, lr}
    3e16:	b087      	sub	sp, #28
    3e18:	000d      	movs	r5, r1
    3e1a:	0014      	movs	r4, r2
    3e1c:	f7ff ffec 	bl	3df8 <smpCcbByHandle>
    3e20:	2800      	cmp	r0, #0
    3e22:	d023      	beq.n	3e6c <smpL2cDataCback+0x58>
    3e24:	7a23      	ldrb	r3, [r4, #8]
    3e26:	1e5a      	subs	r2, r3, #1
    3e28:	2a0d      	cmp	r2, #13
    3e2a:	d81f      	bhi.n	3e6c <smpL2cDataCback+0x58>
    3e2c:	4a10      	ldr	r2, [pc, #64]	; (3e70 <smpL2cDataCback+0x5c>)
    3e2e:	5cd2      	ldrb	r2, [r2, r3]
    3e30:	42aa      	cmp	r2, r5
    3e32:	d11b      	bne.n	3e6c <smpL2cDataCback+0x58>
    3e34:	0002      	movs	r2, r0
    3e36:	322f      	adds	r2, #47	; 0x2f
    3e38:	7812      	ldrb	r2, [r2, #0]
    3e3a:	429a      	cmp	r2, r3
    3e3c:	d002      	beq.n	3e44 <smpL2cDataCback+0x30>
    3e3e:	2b05      	cmp	r3, #5
    3e40:	d114      	bne.n	3e6c <smpL2cDataCback+0x58>
    3e42:	e001      	b.n	3e48 <smpL2cDataCback+0x34>
    3e44:	2a05      	cmp	r2, #5
    3e46:	d105      	bne.n	3e54 <smpL2cDataCback+0x40>
    3e48:	2307      	movs	r3, #7
    3e4a:	466a      	mov	r2, sp
    3e4c:	7093      	strb	r3, [r2, #2]
    3e4e:	7a63      	ldrb	r3, [r4, #9]
    3e50:	70d3      	strb	r3, [r2, #3]
    3e52:	e002      	b.n	3e5a <smpL2cDataCback+0x46>
    3e54:	2306      	movs	r3, #6
    3e56:	466a      	mov	r2, sp
    3e58:	7093      	strb	r3, [r2, #2]
    3e5a:	0003      	movs	r3, r0
    3e5c:	466a      	mov	r2, sp
    3e5e:	332d      	adds	r3, #45	; 0x2d
    3e60:	781b      	ldrb	r3, [r3, #0]
    3e62:	4669      	mov	r1, sp
    3e64:	8013      	strh	r3, [r2, #0]
    3e66:	9401      	str	r4, [sp, #4]
    3e68:	f001 fa7d 	bl	5366 <smpSmExecute>
    3e6c:	b007      	add	sp, #28
    3e6e:	bd30      	pop	{r4, r5, pc}
    3e70:	00010c54 	.word	0x00010c54

00003e74 <smpCcbByConnId>:
    3e74:	2338      	movs	r3, #56	; 0x38
    3e76:	3801      	subs	r0, #1
    3e78:	4358      	muls	r0, r3
    3e7a:	4b01      	ldr	r3, [pc, #4]	; (3e80 <smpCcbByConnId+0xc>)
    3e7c:	1818      	adds	r0, r3, r0
    3e7e:	4770      	bx	lr
    3e80:	10001818 	.word	0x10001818

00003e84 <smpCalcC1Part1>:
    3e84:	0003      	movs	r3, r0
    3e86:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e88:	0004      	movs	r4, r0
    3e8a:	b08b      	sub	sp, #44	; 0x2c
    3e8c:	9103      	str	r1, [sp, #12]
    3e8e:	332a      	adds	r3, #42	; 0x2a
    3e90:	781b      	ldrb	r3, [r3, #0]
    3e92:	342d      	adds	r4, #45	; 0x2d
    3e94:	0005      	movs	r5, r0
    3e96:	0017      	movs	r7, r2
    3e98:	7820      	ldrb	r0, [r4, #0]
    3e9a:	2b00      	cmp	r3, #0
    3e9c:	d016      	beq.n	3ecc <smpCalcC1Part1+0x48>
    3e9e:	f7ff f819 	bl	2ed4 <DmConnLocalRpa>
    3ea2:	f009 f81c 	bl	cede <BdaIsZeros>
    3ea6:	2601      	movs	r6, #1
    3ea8:	2800      	cmp	r0, #0
    3eaa:	d003      	beq.n	3eb4 <smpCalcC1Part1+0x30>
    3eac:	7820      	ldrb	r0, [r4, #0]
    3eae:	f7fe fff3 	bl	2e98 <DmConnLocalAddrType>
    3eb2:	0006      	movs	r6, r0
    3eb4:	7820      	ldrb	r0, [r4, #0]
    3eb6:	f7ff f803 	bl	2ec0 <DmConnPeerRpa>
    3eba:	f009 f810 	bl	cede <BdaIsZeros>
    3ebe:	2301      	movs	r3, #1
    3ec0:	2800      	cmp	r0, #0
    3ec2:	d01a      	beq.n	3efa <smpCalcC1Part1+0x76>
    3ec4:	7820      	ldrb	r0, [r4, #0]
    3ec6:	f7fe ffd5 	bl	2e74 <DmConnPeerAddrType>
    3eca:	e015      	b.n	3ef8 <smpCalcC1Part1+0x74>
    3ecc:	f7fe fff8 	bl	2ec0 <DmConnPeerRpa>
    3ed0:	f009 f805 	bl	cede <BdaIsZeros>
    3ed4:	2601      	movs	r6, #1
    3ed6:	2800      	cmp	r0, #0
    3ed8:	d003      	beq.n	3ee2 <smpCalcC1Part1+0x5e>
    3eda:	7820      	ldrb	r0, [r4, #0]
    3edc:	f7fe ffca 	bl	2e74 <DmConnPeerAddrType>
    3ee0:	0006      	movs	r6, r0
    3ee2:	7820      	ldrb	r0, [r4, #0]
    3ee4:	f7fe fff6 	bl	2ed4 <DmConnLocalRpa>
    3ee8:	f008 fff9 	bl	cede <BdaIsZeros>
    3eec:	2301      	movs	r3, #1
    3eee:	2800      	cmp	r0, #0
    3ef0:	d003      	beq.n	3efa <smpCalcC1Part1+0x76>
    3ef2:	7820      	ldrb	r0, [r4, #0]
    3ef4:	f7fe ffd0 	bl	2e98 <DmConnLocalAddrType>
    3ef8:	0003      	movs	r3, r0
    3efa:	7878      	ldrb	r0, [r7, #1]
    3efc:	aa06      	add	r2, sp, #24
    3efe:	4043      	eors	r3, r0
    3f00:	7053      	strb	r3, [r2, #1]
    3f02:	2300      	movs	r3, #0
    3f04:	7839      	ldrb	r1, [r7, #0]
    3f06:	404e      	eors	r6, r1
    3f08:	7016      	strb	r6, [r2, #0]
    3f0a:	1cb9      	adds	r1, r7, #2
    3f0c:	18e8      	adds	r0, r5, r3
    3f0e:	7c07      	ldrb	r7, [r0, #16]
    3f10:	5cc8      	ldrb	r0, [r1, r3]
    3f12:	18d6      	adds	r6, r2, r3
    3f14:	4078      	eors	r0, r7
    3f16:	3301      	adds	r3, #1
    3f18:	70b0      	strb	r0, [r6, #2]
    3f1a:	2b07      	cmp	r3, #7
    3f1c:	d1f6      	bne.n	3f0c <smpCalcC1Part1+0x88>
    3f1e:	2300      	movs	r3, #0
    3f20:	aa06      	add	r2, sp, #24
    3f22:	18d0      	adds	r0, r2, r3
    3f24:	18ee      	adds	r6, r5, r3
    3f26:	18ca      	adds	r2, r1, r3
    3f28:	7df6      	ldrb	r6, [r6, #23]
    3f2a:	79d2      	ldrb	r2, [r2, #7]
    3f2c:	3301      	adds	r3, #1
    3f2e:	4072      	eors	r2, r6
    3f30:	7242      	strb	r2, [r0, #9]
    3f32:	2b07      	cmp	r3, #7
    3f34:	d1f4      	bne.n	3f20 <smpCalcC1Part1+0x9c>
    3f36:	22e4      	movs	r2, #228	; 0xe4
    3f38:	490c      	ldr	r1, [pc, #48]	; (3f6c <smpCalcC1Part1+0xe8>)
    3f3a:	0052      	lsls	r2, r2, #1
    3f3c:	5c8a      	ldrb	r2, [r1, r2]
    3f3e:	210b      	movs	r1, #11
    3f40:	7823      	ldrb	r3, [r4, #0]
    3f42:	9803      	ldr	r0, [sp, #12]
    3f44:	9100      	str	r1, [sp, #0]
    3f46:	a906      	add	r1, sp, #24
    3f48:	f006 fa98 	bl	a47c <SecAes>
    3f4c:	002b      	movs	r3, r5
    3f4e:	3331      	adds	r3, #49	; 0x31
    3f50:	7018      	strb	r0, [r3, #0]
    3f52:	28ff      	cmp	r0, #255	; 0xff
    3f54:	d107      	bne.n	3f66 <smpCalcC1Part1+0xe2>
    3f56:	2308      	movs	r3, #8
    3f58:	a905      	add	r1, sp, #20
    3f5a:	70cb      	strb	r3, [r1, #3]
    3f5c:	0028      	movs	r0, r5
    3f5e:	3b05      	subs	r3, #5
    3f60:	708b      	strb	r3, [r1, #2]
    3f62:	f001 fa00 	bl	5366 <smpSmExecute>
    3f66:	b00b      	add	sp, #44	; 0x2c
    3f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f6a:	46c0      	nop			; (mov r8, r8)
    3f6c:	10001818 	.word	0x10001818

00003f70 <smpCalcC1Part2>:
    3f70:	0003      	movs	r3, r0
    3f72:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f74:	0004      	movs	r4, r0
    3f76:	b08b      	sub	sp, #44	; 0x2c
    3f78:	9002      	str	r0, [sp, #8]
    3f7a:	9103      	str	r1, [sp, #12]
    3f7c:	332a      	adds	r3, #42	; 0x2a
    3f7e:	781b      	ldrb	r3, [r3, #0]
    3f80:	342d      	adds	r4, #45	; 0x2d
    3f82:	0015      	movs	r5, r2
    3f84:	7820      	ldrb	r0, [r4, #0]
    3f86:	2b00      	cmp	r3, #0
    3f88:	d016      	beq.n	3fb8 <smpCalcC1Part2+0x48>
    3f8a:	f7fe ffa3 	bl	2ed4 <DmConnLocalRpa>
    3f8e:	0006      	movs	r6, r0
    3f90:	f008 ffa5 	bl	cede <BdaIsZeros>
    3f94:	2800      	cmp	r0, #0
    3f96:	d003      	beq.n	3fa0 <smpCalcC1Part2+0x30>
    3f98:	7820      	ldrb	r0, [r4, #0]
    3f9a:	f7fe ff87 	bl	2eac <DmConnLocalAddr>
    3f9e:	0006      	movs	r6, r0
    3fa0:	7820      	ldrb	r0, [r4, #0]
    3fa2:	f7fe ff8d 	bl	2ec0 <DmConnPeerRpa>
    3fa6:	0007      	movs	r7, r0
    3fa8:	f008 ff99 	bl	cede <BdaIsZeros>
    3fac:	2800      	cmp	r0, #0
    3fae:	d01a      	beq.n	3fe6 <smpCalcC1Part2+0x76>
    3fb0:	7820      	ldrb	r0, [r4, #0]
    3fb2:	f7fe ff69 	bl	2e88 <DmConnPeerAddr>
    3fb6:	e015      	b.n	3fe4 <smpCalcC1Part2+0x74>
    3fb8:	f7fe ff82 	bl	2ec0 <DmConnPeerRpa>
    3fbc:	0006      	movs	r6, r0
    3fbe:	f008 ff8e 	bl	cede <BdaIsZeros>
    3fc2:	2800      	cmp	r0, #0
    3fc4:	d003      	beq.n	3fce <smpCalcC1Part2+0x5e>
    3fc6:	7820      	ldrb	r0, [r4, #0]
    3fc8:	f7fe ff5e 	bl	2e88 <DmConnPeerAddr>
    3fcc:	0006      	movs	r6, r0
    3fce:	7820      	ldrb	r0, [r4, #0]
    3fd0:	f7fe ff80 	bl	2ed4 <DmConnLocalRpa>
    3fd4:	0007      	movs	r7, r0
    3fd6:	f008 ff82 	bl	cede <BdaIsZeros>
    3fda:	2800      	cmp	r0, #0
    3fdc:	d003      	beq.n	3fe6 <smpCalcC1Part2+0x76>
    3fde:	7820      	ldrb	r0, [r4, #0]
    3fe0:	f7fe ff64 	bl	2eac <DmConnLocalAddr>
    3fe4:	0007      	movs	r7, r0
    3fe6:	2300      	movs	r3, #0
    3fe8:	5cf8      	ldrb	r0, [r7, r3]
    3fea:	5cea      	ldrb	r2, [r5, r3]
    3fec:	a906      	add	r1, sp, #24
    3fee:	4042      	eors	r2, r0
    3ff0:	545a      	strb	r2, [r3, r1]
    3ff2:	3301      	adds	r3, #1
    3ff4:	2b06      	cmp	r3, #6
    3ff6:	d1f7      	bne.n	3fe8 <smpCalcC1Part2+0x78>
    3ff8:	2300      	movs	r3, #0
    3ffa:	18ea      	adds	r2, r5, r3
    3ffc:	7997      	ldrb	r7, [r2, #6]
    3ffe:	5cf2      	ldrb	r2, [r6, r3]
    4000:	18c8      	adds	r0, r1, r3
    4002:	407a      	eors	r2, r7
    4004:	3301      	adds	r3, #1
    4006:	7182      	strb	r2, [r0, #6]
    4008:	2b06      	cmp	r3, #6
    400a:	d1f6      	bne.n	3ffa <smpCalcC1Part2+0x8a>
    400c:	22e4      	movs	r2, #228	; 0xe4
    400e:	7b2b      	ldrb	r3, [r5, #12]
    4010:	480f      	ldr	r0, [pc, #60]	; (4050 <smpCalcC1Part2+0xe0>)
    4012:	730b      	strb	r3, [r1, #12]
    4014:	7b6b      	ldrb	r3, [r5, #13]
    4016:	0052      	lsls	r2, r2, #1
    4018:	734b      	strb	r3, [r1, #13]
    401a:	7bab      	ldrb	r3, [r5, #14]
    401c:	738b      	strb	r3, [r1, #14]
    401e:	7beb      	ldrb	r3, [r5, #15]
    4020:	73cb      	strb	r3, [r1, #15]
    4022:	5c82      	ldrb	r2, [r0, r2]
    4024:	200b      	movs	r0, #11
    4026:	7823      	ldrb	r3, [r4, #0]
    4028:	9000      	str	r0, [sp, #0]
    402a:	9803      	ldr	r0, [sp, #12]
    402c:	f006 fa26 	bl	a47c <SecAes>
    4030:	9b02      	ldr	r3, [sp, #8]
    4032:	3331      	adds	r3, #49	; 0x31
    4034:	7018      	strb	r0, [r3, #0]
    4036:	28ff      	cmp	r0, #255	; 0xff
    4038:	d107      	bne.n	404a <smpCalcC1Part2+0xda>
    403a:	2308      	movs	r3, #8
    403c:	a905      	add	r1, sp, #20
    403e:	70cb      	strb	r3, [r1, #3]
    4040:	9802      	ldr	r0, [sp, #8]
    4042:	3b05      	subs	r3, #5
    4044:	708b      	strb	r3, [r1, #2]
    4046:	f001 f98e 	bl	5366 <smpSmExecute>
    404a:	b00b      	add	sp, #44	; 0x2c
    404c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    404e:	46c0      	nop			; (mov r8, r8)
    4050:	10001818 	.word	0x10001818

00004054 <smpCalcS1>:
    4054:	b570      	push	{r4, r5, r6, lr}
    4056:	0016      	movs	r6, r2
    4058:	b088      	sub	sp, #32
    405a:	0004      	movs	r4, r0
    405c:	000d      	movs	r5, r1
    405e:	a804      	add	r0, sp, #16
    4060:	0019      	movs	r1, r3
    4062:	f008 ff64 	bl	cf2e <Calc128Cpy64>
    4066:	0031      	movs	r1, r6
    4068:	a806      	add	r0, sp, #24
    406a:	f008 ff60 	bl	cf2e <Calc128Cpy64>
    406e:	22e4      	movs	r2, #228	; 0xe4
    4070:	490d      	ldr	r1, [pc, #52]	; (40a8 <smpCalcS1+0x54>)
    4072:	0023      	movs	r3, r4
    4074:	0052      	lsls	r2, r2, #1
    4076:	5c8a      	ldrb	r2, [r1, r2]
    4078:	210b      	movs	r1, #11
    407a:	332d      	adds	r3, #45	; 0x2d
    407c:	781b      	ldrb	r3, [r3, #0]
    407e:	0028      	movs	r0, r5
    4080:	9100      	str	r1, [sp, #0]
    4082:	a904      	add	r1, sp, #16
    4084:	f006 f9fa 	bl	a47c <SecAes>
    4088:	0023      	movs	r3, r4
    408a:	3331      	adds	r3, #49	; 0x31
    408c:	7018      	strb	r0, [r3, #0]
    408e:	28ff      	cmp	r0, #255	; 0xff
    4090:	d107      	bne.n	40a2 <smpCalcS1+0x4e>
    4092:	2308      	movs	r3, #8
    4094:	a903      	add	r1, sp, #12
    4096:	70cb      	strb	r3, [r1, #3]
    4098:	0020      	movs	r0, r4
    409a:	3b05      	subs	r3, #5
    409c:	708b      	strb	r3, [r1, #2]
    409e:	f001 f962 	bl	5366 <smpSmExecute>
    40a2:	b008      	add	sp, #32
    40a4:	bd70      	pop	{r4, r5, r6, pc}
    40a6:	46c0      	nop			; (mov r8, r8)
    40a8:	10001818 	.word	0x10001818

000040ac <smpGenerateLtk>:
    40ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40ae:	6a04      	ldr	r4, [r0, #32]
    40b0:	0005      	movs	r5, r0
    40b2:	1d26      	adds	r6, r4, #4
    40b4:	1c67      	adds	r7, r4, #1
    40b6:	7ff9      	ldrb	r1, [r7, #31]
    40b8:	0030      	movs	r0, r6
    40ba:	f006 fd53 	bl	ab64 <SecRand>
    40be:	2210      	movs	r2, #16
    40c0:	7ff8      	ldrb	r0, [r7, #31]
    40c2:	2100      	movs	r1, #0
    40c4:	1a12      	subs	r2, r2, r0
    40c6:	1830      	adds	r0, r6, r0
    40c8:	f00b fd66 	bl	fb98 <memset>
    40cc:	0023      	movs	r3, r4
    40ce:	0022      	movs	r2, r4
    40d0:	0020      	movs	r0, r4
    40d2:	0021      	movs	r1, r4
    40d4:	3331      	adds	r3, #49	; 0x31
    40d6:	781b      	ldrb	r3, [r3, #0]
    40d8:	3230      	adds	r2, #48	; 0x30
    40da:	7812      	ldrb	r2, [r2, #0]
    40dc:	021b      	lsls	r3, r3, #8
    40de:	18d3      	adds	r3, r2, r3
    40e0:	83a3      	strh	r3, [r4, #28]
    40e2:	3132      	adds	r1, #50	; 0x32
    40e4:	2208      	movs	r2, #8
    40e6:	3014      	adds	r0, #20
    40e8:	f00b fd31 	bl	fb4e <memcpy>
    40ec:	2301      	movs	r3, #1
    40ee:	3530      	adds	r5, #48	; 0x30
    40f0:	77a3      	strb	r3, [r4, #30]
    40f2:	782b      	ldrb	r3, [r5, #0]
    40f4:	0020      	movs	r0, r4
    40f6:	075b      	lsls	r3, r3, #29
    40f8:	0fdb      	lsrs	r3, r3, #31
    40fa:	3301      	adds	r3, #1
    40fc:	77e3      	strb	r3, [r4, #31]
    40fe:	232f      	movs	r3, #47	; 0x2f
    4100:	70a3      	strb	r3, [r4, #2]
    4102:	f7ff fb1b 	bl	373c <DmSmpCbackExec>
    4106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004108 <smpSendPkt>:
    4108:	0003      	movs	r3, r0
    410a:	b570      	push	{r4, r5, r6, lr}
    410c:	332c      	adds	r3, #44	; 0x2c
    410e:	781b      	ldrb	r3, [r3, #0]
    4110:	0004      	movs	r4, r0
    4112:	000d      	movs	r5, r1
    4114:	2b00      	cmp	r3, #0
    4116:	d006      	beq.n	4126 <smpSendPkt+0x1e>
    4118:	6a40      	ldr	r0, [r0, #36]	; 0x24
    411a:	2800      	cmp	r0, #0
    411c:	d001      	beq.n	4122 <smpSendPkt+0x1a>
    411e:	f006 fe95 	bl	ae4c <WsfMsgFree>
    4122:	6265      	str	r5, [r4, #36]	; 0x24
    4124:	e007      	b.n	4136 <smpSendPkt+0x2e>
    4126:	7a0b      	ldrb	r3, [r1, #8]
    4128:	4a03      	ldr	r2, [pc, #12]	; (4138 <smpSendPkt+0x30>)
    412a:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    412c:	5cd2      	ldrb	r2, [r2, r3]
    412e:	2006      	movs	r0, #6
    4130:	002b      	movs	r3, r5
    4132:	f7ff fd63 	bl	3bfc <L2cDataReq>
    4136:	bd70      	pop	{r4, r5, r6, pc}
    4138:	00010c54 	.word	0x00010c54

0000413c <smpL2cCtrlCback>:
    413c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    413e:	2438      	movs	r4, #56	; 0x38
    4140:	7803      	ldrb	r3, [r0, #0]
    4142:	0005      	movs	r5, r0
    4144:	1e5f      	subs	r7, r3, #1
    4146:	437c      	muls	r4, r7
    4148:	4b13      	ldr	r3, [pc, #76]	; (4198 <smpL2cCtrlCback+0x5c>)
    414a:	191c      	adds	r4, r3, r4
    414c:	0022      	movs	r2, r4
    414e:	322d      	adds	r2, #45	; 0x2d
    4150:	7812      	ldrb	r2, [r2, #0]
    4152:	001e      	movs	r6, r3
    4154:	2a00      	cmp	r2, #0
    4156:	d01d      	beq.n	4194 <smpL2cCtrlCback+0x58>
    4158:	7881      	ldrb	r1, [r0, #2]
    415a:	1e4a      	subs	r2, r1, #1
    415c:	4253      	negs	r3, r2
    415e:	415a      	adcs	r2, r3
    4160:	0023      	movs	r3, r4
    4162:	332c      	adds	r3, #44	; 0x2c
    4164:	701a      	strb	r2, [r3, #0]
    4166:	2901      	cmp	r1, #1
    4168:	d014      	beq.n	4194 <smpL2cCtrlCback+0x58>
    416a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    416c:	2900      	cmp	r1, #0
    416e:	d004      	beq.n	417a <smpL2cCtrlCback+0x3e>
    4170:	2300      	movs	r3, #0
    4172:	0020      	movs	r0, r4
    4174:	6263      	str	r3, [r4, #36]	; 0x24
    4176:	f7ff ffc7 	bl	4108 <smpSendPkt>
    417a:	2338      	movs	r3, #56	; 0x38
    417c:	437b      	muls	r3, r7
    417e:	18f3      	adds	r3, r6, r3
    4180:	332e      	adds	r3, #46	; 0x2e
    4182:	781b      	ldrb	r3, [r3, #0]
    4184:	2b00      	cmp	r3, #0
    4186:	d005      	beq.n	4194 <smpL2cCtrlCback+0x58>
    4188:	230c      	movs	r3, #12
    418a:	0029      	movs	r1, r5
    418c:	70ab      	strb	r3, [r5, #2]
    418e:	0020      	movs	r0, r4
    4190:	f001 f8e9 	bl	5366 <smpSmExecute>
    4194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4196:	46c0      	nop			; (mov r8, r8)
    4198:	10001818 	.word	0x10001818

0000419c <smpStateIdle>:
    419c:	302e      	adds	r0, #46	; 0x2e
    419e:	7800      	ldrb	r0, [r0, #0]
    41a0:	4243      	negs	r3, r0
    41a2:	4158      	adcs	r0, r3
    41a4:	b2c0      	uxtb	r0, r0
    41a6:	4770      	bx	lr

000041a8 <smpMsgAlloc>:
    41a8:	b510      	push	{r4, lr}
    41aa:	2100      	movs	r1, #0
    41ac:	f006 fe22 	bl	adf4 <WsfMsgDataAlloc>
    41b0:	bd10      	pop	{r4, pc}

000041b2 <SmpDmMsgSend>:
    41b2:	23e4      	movs	r3, #228	; 0xe4
    41b4:	b510      	push	{r4, lr}
    41b6:	4a03      	ldr	r2, [pc, #12]	; (41c4 <SmpDmMsgSend+0x12>)
    41b8:	005b      	lsls	r3, r3, #1
    41ba:	0001      	movs	r1, r0
    41bc:	5cd0      	ldrb	r0, [r2, r3]
    41be:	f006 fe52 	bl	ae66 <WsfMsgSend>
    41c2:	bd10      	pop	{r4, pc}
    41c4:	10001818 	.word	0x10001818

000041c8 <SmpDmGetStk>:
    41c8:	23ea      	movs	r3, #234	; 0xea
    41ca:	b530      	push	{r4, r5, lr}
    41cc:	4c13      	ldr	r4, [pc, #76]	; (421c <SmpDmGetStk+0x54>)
    41ce:	005b      	lsls	r3, r3, #1
    41d0:	5ce2      	ldrb	r2, [r4, r3]
    41d2:	3801      	subs	r0, #1
    41d4:	0023      	movs	r3, r4
    41d6:	2a00      	cmp	r2, #0
    41d8:	d00f      	beq.n	41fa <SmpDmGetStk+0x32>
    41da:	2238      	movs	r2, #56	; 0x38
    41dc:	4342      	muls	r2, r0
    41de:	18a2      	adds	r2, r4, r2
    41e0:	6b54      	ldr	r4, [r2, #52]	; 0x34
    41e2:	7825      	ldrb	r5, [r4, #0]
    41e4:	2d00      	cmp	r5, #0
    41e6:	d008      	beq.n	41fa <SmpDmGetStk+0x32>
    41e8:	6924      	ldr	r4, [r4, #16]
    41ea:	2c00      	cmp	r4, #0
    41ec:	d005      	beq.n	41fa <SmpDmGetStk+0x32>
    41ee:	2303      	movs	r3, #3
    41f0:	700b      	strb	r3, [r1, #0]
    41f2:	6b53      	ldr	r3, [r2, #52]	; 0x34
    41f4:	6918      	ldr	r0, [r3, #16]
    41f6:	3010      	adds	r0, #16
    41f8:	e00e      	b.n	4218 <SmpDmGetStk+0x50>
    41fa:	2238      	movs	r2, #56	; 0x38
    41fc:	4350      	muls	r0, r2
    41fe:	181b      	adds	r3, r3, r0
    4200:	6a18      	ldr	r0, [r3, #32]
    4202:	2800      	cmp	r0, #0
    4204:	d008      	beq.n	4218 <SmpDmGetStk+0x50>
    4206:	001a      	movs	r2, r3
    4208:	3230      	adds	r2, #48	; 0x30
    420a:	7812      	ldrb	r2, [r2, #0]
    420c:	0752      	lsls	r2, r2, #29
    420e:	0fd2      	lsrs	r2, r2, #31
    4210:	3201      	adds	r2, #1
    4212:	700a      	strb	r2, [r1, #0]
    4214:	6a18      	ldr	r0, [r3, #32]
    4216:	3020      	adds	r0, #32
    4218:	bd30      	pop	{r4, r5, pc}
    421a:	46c0      	nop			; (mov r8, r8)
    421c:	10001818 	.word	0x10001818

00004220 <SmpDmGetLtk>:
    4220:	23ea      	movs	r3, #234	; 0xea
    4222:	4a07      	ldr	r2, [pc, #28]	; (4240 <SmpDmGetLtk+0x20>)
    4224:	005b      	lsls	r3, r3, #1
    4226:	5cd1      	ldrb	r1, [r2, r3]
    4228:	3801      	subs	r0, #1
    422a:	1e0b      	subs	r3, r1, #0
    422c:	d005      	beq.n	423a <SmpDmGetLtk+0x1a>
    422e:	2338      	movs	r3, #56	; 0x38
    4230:	4358      	muls	r0, r3
    4232:	1810      	adds	r0, r2, r0
    4234:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4236:	691b      	ldr	r3, [r3, #16]
    4238:	3310      	adds	r3, #16
    423a:	0018      	movs	r0, r3
    423c:	4770      	bx	lr
    423e:	46c0      	nop			; (mov r8, r8)
    4240:	10001818 	.word	0x10001818

00004244 <SmpHandlerInit>:
    4244:	22e4      	movs	r2, #228	; 0xe4
    4246:	4b0c      	ldr	r3, [pc, #48]	; (4278 <SmpHandlerInit+0x34>)
    4248:	0052      	lsls	r2, r2, #1
    424a:	b510      	push	{r4, lr}
    424c:	5498      	strb	r0, [r3, r2]
    424e:	3ac8      	subs	r2, #200	; 0xc8
    4250:	3308      	adds	r3, #8
    4252:	3aff      	subs	r2, #255	; 0xff
    4254:	805a      	strh	r2, [r3, #2]
    4256:	3201      	adds	r2, #1
    4258:	b292      	uxth	r2, r2
    425a:	7018      	strb	r0, [r3, #0]
    425c:	3338      	adds	r3, #56	; 0x38
    425e:	2a09      	cmp	r2, #9
    4260:	d1f8      	bne.n	4254 <SmpHandlerInit+0x10>
    4262:	4a06      	ldr	r2, [pc, #24]	; (427c <SmpHandlerInit+0x38>)
    4264:	4906      	ldr	r1, [pc, #24]	; (4280 <SmpHandlerInit+0x3c>)
    4266:	2006      	movs	r0, #6
    4268:	f7ff fcbc 	bl	3be4 <L2cRegister>
    426c:	4905      	ldr	r1, [pc, #20]	; (4284 <SmpHandlerInit+0x40>)
    426e:	2001      	movs	r0, #1
    4270:	f7fe fcdc 	bl	2c2c <DmConnRegister>
    4274:	bd10      	pop	{r4, pc}
    4276:	46c0      	nop			; (mov r8, r8)
    4278:	10001818 	.word	0x10001818
    427c:	0000413d 	.word	0x0000413d
    4280:	00003e15 	.word	0x00003e15
    4284:	00003d5d 	.word	0x00003d5d

00004288 <SmpHandler>:
    4288:	b510      	push	{r4, lr}
    428a:	2900      	cmp	r1, #0
    428c:	d017      	beq.n	42be <SmpHandler+0x36>
    428e:	2338      	movs	r3, #56	; 0x38
    4290:	7808      	ldrb	r0, [r1, #0]
    4292:	4a0b      	ldr	r2, [pc, #44]	; (42c0 <SmpHandler+0x38>)
    4294:	3801      	subs	r0, #1
    4296:	4343      	muls	r3, r0
    4298:	18d3      	adds	r3, r2, r3
    429a:	001c      	movs	r4, r3
    429c:	342d      	adds	r4, #45	; 0x2d
    429e:	7824      	ldrb	r4, [r4, #0]
    42a0:	2c00      	cmp	r4, #0
    42a2:	d00c      	beq.n	42be <SmpHandler+0x36>
    42a4:	788c      	ldrb	r4, [r1, #2]
    42a6:	2c0b      	cmp	r4, #11
    42a8:	d104      	bne.n	42b4 <SmpHandler+0x2c>
    42aa:	3331      	adds	r3, #49	; 0x31
    42ac:	781c      	ldrb	r4, [r3, #0]
    42ae:	78cb      	ldrb	r3, [r1, #3]
    42b0:	429c      	cmp	r4, r3
    42b2:	d104      	bne.n	42be <SmpHandler+0x36>
    42b4:	2338      	movs	r3, #56	; 0x38
    42b6:	4358      	muls	r0, r3
    42b8:	1810      	adds	r0, r2, r0
    42ba:	f001 f854 	bl	5366 <smpSmExecute>
    42be:	bd10      	pop	{r4, pc}
    42c0:	10001818 	.word	0x10001818

000042c4 <SmpDmEncryptInd>:
    42c4:	b510      	push	{r4, lr}
    42c6:	78c3      	ldrb	r3, [r0, #3]
    42c8:	0001      	movs	r1, r0
    42ca:	425a      	negs	r2, r3
    42cc:	4153      	adcs	r3, r2
    42ce:	2209      	movs	r2, #9
    42d0:	1ad3      	subs	r3, r2, r3
    42d2:	7083      	strb	r3, [r0, #2]
    42d4:	2000      	movs	r0, #0
    42d6:	f7ff ffd7 	bl	4288 <SmpHandler>
    42da:	bd10      	pop	{r4, pc}

000042dc <SmpScAllocScratchBuffers>:
    42dc:	b570      	push	{r4, r5, r6, lr}
    42de:	6b45      	ldr	r5, [r0, #52]	; 0x34
    42e0:	0004      	movs	r4, r0
    42e2:	68eb      	ldr	r3, [r5, #12]
    42e4:	2b00      	cmp	r3, #0
    42e6:	d103      	bne.n	42f0 <SmpScAllocScratchBuffers+0x14>
    42e8:	2060      	movs	r0, #96	; 0x60
    42ea:	f006 fd09 	bl	ad00 <WsfBufAlloc>
    42ee:	60e8      	str	r0, [r5, #12]
    42f0:	6b65      	ldr	r5, [r4, #52]	; 0x34
    42f2:	68ab      	ldr	r3, [r5, #8]
    42f4:	2b00      	cmp	r3, #0
    42f6:	d103      	bne.n	4300 <SmpScAllocScratchBuffers+0x24>
    42f8:	2040      	movs	r0, #64	; 0x40
    42fa:	f006 fd01 	bl	ad00 <WsfBufAlloc>
    42fe:	60a8      	str	r0, [r5, #8]
    4300:	6b65      	ldr	r5, [r4, #52]	; 0x34
    4302:	692b      	ldr	r3, [r5, #16]
    4304:	2b00      	cmp	r3, #0
    4306:	d103      	bne.n	4310 <SmpScAllocScratchBuffers+0x34>
    4308:	2020      	movs	r0, #32
    430a:	f006 fcf9 	bl	ad00 <WsfBufAlloc>
    430e:	6128      	str	r0, [r5, #16]
    4310:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4312:	68d8      	ldr	r0, [r3, #12]
    4314:	2800      	cmp	r0, #0
    4316:	d006      	beq.n	4326 <SmpScAllocScratchBuffers+0x4a>
    4318:	6898      	ldr	r0, [r3, #8]
    431a:	2800      	cmp	r0, #0
    431c:	d003      	beq.n	4326 <SmpScAllocScratchBuffers+0x4a>
    431e:	6918      	ldr	r0, [r3, #16]
    4320:	1e43      	subs	r3, r0, #1
    4322:	4198      	sbcs	r0, r3
    4324:	b2c0      	uxtb	r0, r0
    4326:	bd70      	pop	{r4, r5, r6, pc}

00004328 <SmpScFreeScratchBuffers>:
    4328:	6b43      	ldr	r3, [r0, #52]	; 0x34
    432a:	b510      	push	{r4, lr}
    432c:	0004      	movs	r4, r0
    432e:	68d8      	ldr	r0, [r3, #12]
    4330:	2800      	cmp	r0, #0
    4332:	d004      	beq.n	433e <SmpScFreeScratchBuffers+0x16>
    4334:	f006 fd24 	bl	ad80 <WsfBufFree>
    4338:	2200      	movs	r2, #0
    433a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    433c:	60da      	str	r2, [r3, #12]
    433e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4340:	6898      	ldr	r0, [r3, #8]
    4342:	2800      	cmp	r0, #0
    4344:	d004      	beq.n	4350 <SmpScFreeScratchBuffers+0x28>
    4346:	f006 fd1b 	bl	ad80 <WsfBufFree>
    434a:	2200      	movs	r2, #0
    434c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    434e:	609a      	str	r2, [r3, #8]
    4350:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4352:	6918      	ldr	r0, [r3, #16]
    4354:	2800      	cmp	r0, #0
    4356:	d004      	beq.n	4362 <SmpScFreeScratchBuffers+0x3a>
    4358:	f006 fd12 	bl	ad80 <WsfBufFree>
    435c:	2200      	movs	r2, #0
    435e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4360:	611a      	str	r2, [r3, #16]
    4362:	bd10      	pop	{r4, pc}

00004364 <SmpScCmac>:
    4364:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4366:	001d      	movs	r5, r3
    4368:	23e4      	movs	r3, #228	; 0xe4
    436a:	4e0b      	ldr	r6, [pc, #44]	; (4398 <SmpScCmac+0x34>)
    436c:	005b      	lsls	r3, r3, #1
    436e:	5cf3      	ldrb	r3, [r6, r3]
    4370:	261b      	movs	r6, #27
    4372:	9601      	str	r6, [sp, #4]
    4374:	002e      	movs	r6, r5
    4376:	362d      	adds	r6, #45	; 0x2d
    4378:	7836      	ldrb	r6, [r6, #0]
    437a:	9c06      	ldr	r4, [sp, #24]
    437c:	9600      	str	r6, [sp, #0]
    437e:	f006 fa53 	bl	a828 <SecCmac>
    4382:	2800      	cmp	r0, #0
    4384:	d107      	bne.n	4396 <SmpScCmac+0x32>
    4386:	2308      	movs	r3, #8
    4388:	70e3      	strb	r3, [r4, #3]
    438a:	3b05      	subs	r3, #5
    438c:	70a3      	strb	r3, [r4, #2]
    438e:	0021      	movs	r1, r4
    4390:	0028      	movs	r0, r5
    4392:	f000 ffe8 	bl	5366 <smpSmExecute>
    4396:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    4398:	10001818 	.word	0x10001818

0000439c <SmpScAlloc>:
    439c:	b570      	push	{r4, r5, r6, lr}
    439e:	b280      	uxth	r0, r0
    43a0:	000d      	movs	r5, r1
    43a2:	0014      	movs	r4, r2
    43a4:	f006 fcac 	bl	ad00 <WsfBufAlloc>
    43a8:	1e06      	subs	r6, r0, #0
    43aa:	d107      	bne.n	43bc <SmpScAlloc+0x20>
    43ac:	2308      	movs	r3, #8
    43ae:	70e3      	strb	r3, [r4, #3]
    43b0:	3b05      	subs	r3, #5
    43b2:	70a3      	strb	r3, [r4, #2]
    43b4:	0021      	movs	r1, r4
    43b6:	0028      	movs	r0, r5
    43b8:	f000 ffd5 	bl	5366 <smpSmExecute>
    43bc:	0030      	movs	r0, r6
    43be:	bd70      	pop	{r4, r5, r6, pc}

000043c0 <SmpScFree>:
    43c0:	b510      	push	{r4, lr}
    43c2:	f006 fcdd 	bl	ad80 <WsfBufFree>
    43c6:	bd10      	pop	{r4, pc}

000043c8 <SmpScCalcF4>:
    43c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    43ca:	b085      	sub	sp, #20
    43cc:	9302      	str	r3, [sp, #8]
    43ce:	ab0a      	add	r3, sp, #40	; 0x28
    43d0:	781b      	ldrb	r3, [r3, #0]
    43d2:	0005      	movs	r5, r0
    43d4:	000e      	movs	r6, r1
    43d6:	0017      	movs	r7, r2
    43d8:	000a      	movs	r2, r1
    43da:	0001      	movs	r1, r0
    43dc:	2041      	movs	r0, #65	; 0x41
    43de:	9303      	str	r3, [sp, #12]
    43e0:	f7ff ffdc 	bl	439c <SmpScAlloc>
    43e4:	1e04      	subs	r4, r0, #0
    43e6:	d015      	beq.n	4414 <SmpScCalcF4+0x4c>
    43e8:	2220      	movs	r2, #32
    43ea:	0039      	movs	r1, r7
    43ec:	f00b fbaf 	bl	fb4e <memcpy>
    43f0:	0020      	movs	r0, r4
    43f2:	2220      	movs	r2, #32
    43f4:	9902      	ldr	r1, [sp, #8]
    43f6:	3020      	adds	r0, #32
    43f8:	f00b fba9 	bl	fb4e <memcpy>
    43fc:	466a      	mov	r2, sp
    43fe:	0023      	movs	r3, r4
    4400:	7b12      	ldrb	r2, [r2, #12]
    4402:	3340      	adds	r3, #64	; 0x40
    4404:	701a      	strb	r2, [r3, #0]
    4406:	0021      	movs	r1, r4
    4408:	9600      	str	r6, [sp, #0]
    440a:	002b      	movs	r3, r5
    440c:	2241      	movs	r2, #65	; 0x41
    440e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4410:	f7ff ffa8 	bl	4364 <SmpScCmac>
    4414:	b005      	add	sp, #20
    4416:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004418 <SmpScInit>:
    4418:	2300      	movs	r3, #0
    441a:	4a0a      	ldr	r2, [pc, #40]	; (4444 <SmpScInit+0x2c>)
    441c:	480a      	ldr	r0, [pc, #40]	; (4448 <SmpScInit+0x30>)
    441e:	18c1      	adds	r1, r0, r3
    4420:	3314      	adds	r3, #20
    4422:	6011      	str	r1, [r2, #0]
    4424:	3238      	adds	r2, #56	; 0x38
    4426:	2ba0      	cmp	r3, #160	; 0xa0
    4428:	d1f9      	bne.n	441e <SmpScInit+0x6>
    442a:	22e6      	movs	r2, #230	; 0xe6
    442c:	4b07      	ldr	r3, [pc, #28]	; (444c <SmpScInit+0x34>)
    442e:	4908      	ldr	r1, [pc, #32]	; (4450 <SmpScInit+0x38>)
    4430:	0052      	lsls	r2, r2, #1
    4432:	5099      	str	r1, [r3, r2]
    4434:	4907      	ldr	r1, [pc, #28]	; (4454 <SmpScInit+0x3c>)
    4436:	3204      	adds	r2, #4
    4438:	5099      	str	r1, [r3, r2]
    443a:	2101      	movs	r1, #1
    443c:	3204      	adds	r2, #4
    443e:	5499      	strb	r1, [r3, r2]
    4440:	4770      	bx	lr
    4442:	46c0      	nop			; (mov r8, r8)
    4444:	1000184c 	.word	0x1000184c
    4448:	100019f0 	.word	0x100019f0
    444c:	10001818 	.word	0x10001818
    4450:	00004785 	.word	0x00004785
    4454:	0000494d 	.word	0x0000494d

00004458 <SmpScCat>:
    4458:	b570      	push	{r4, r5, r6, lr}
    445a:	0005      	movs	r5, r0
    445c:	0014      	movs	r4, r2
    445e:	f00b fb76 	bl	fb4e <memcpy>
    4462:	1928      	adds	r0, r5, r4
    4464:	bd70      	pop	{r4, r5, r6, pc}

00004466 <SmpScCat128>:
    4466:	b510      	push	{r4, lr}
    4468:	0004      	movs	r4, r0
    446a:	f008 fd52 	bl	cf12 <Calc128Cpy>
    446e:	0020      	movs	r0, r4
    4470:	3010      	adds	r0, #16
    4472:	bd10      	pop	{r4, pc}

00004474 <smpScSendPubKey>:
    4474:	0003      	movs	r3, r0
    4476:	2201      	movs	r2, #1
    4478:	b570      	push	{r4, r5, r6, lr}
    447a:	0005      	movs	r5, r0
    447c:	332d      	adds	r3, #45	; 0x2d
    447e:	7818      	ldrb	r0, [r3, #0]
    4480:	000e      	movs	r6, r1
    4482:	0011      	movs	r1, r2
    4484:	f7fe fd3a 	bl	2efc <DmConnSetIdle>
    4488:	0028      	movs	r0, r5
    448a:	f000 fd4f 	bl	4f2c <smpStartRspTimer>
    448e:	2049      	movs	r0, #73	; 0x49
    4490:	f7ff fe8a 	bl	41a8 <smpMsgAlloc>
    4494:	1e04      	subs	r4, r0, #0
    4496:	d017      	beq.n	44c8 <smpScSendPubKey+0x54>
    4498:	230c      	movs	r3, #12
    449a:	7203      	strb	r3, [r0, #8]
    449c:	f7ff fad4 	bl	3a48 <DmSecGetEccKey>
    44a0:	0001      	movs	r1, r0
    44a2:	0020      	movs	r0, r4
    44a4:	2220      	movs	r2, #32
    44a6:	3009      	adds	r0, #9
    44a8:	f008 fd6e 	bl	cf88 <WStrReverseCpy>
    44ac:	f7ff facc 	bl	3a48 <DmSecGetEccKey>
    44b0:	0001      	movs	r1, r0
    44b2:	0020      	movs	r0, r4
    44b4:	3120      	adds	r1, #32
    44b6:	3029      	adds	r0, #41	; 0x29
    44b8:	2220      	movs	r2, #32
    44ba:	f008 fd65 	bl	cf88 <WStrReverseCpy>
    44be:	0021      	movs	r1, r4
    44c0:	0028      	movs	r0, r5
    44c2:	f7ff fe21 	bl	4108 <smpSendPkt>
    44c6:	e007      	b.n	44d8 <smpScSendPubKey+0x64>
    44c8:	2308      	movs	r3, #8
    44ca:	70f3      	strb	r3, [r6, #3]
    44cc:	3b05      	subs	r3, #5
    44ce:	70b3      	strb	r3, [r6, #2]
    44d0:	0031      	movs	r1, r6
    44d2:	0028      	movs	r0, r5
    44d4:	f000 ff47 	bl	5366 <smpSmExecute>
    44d8:	bd70      	pop	{r4, r5, r6, pc}

000044da <smpScSendDHKeyCheck>:
    44da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44dc:	0003      	movs	r3, r0
    44de:	0017      	movs	r7, r2
    44e0:	2201      	movs	r2, #1
    44e2:	0004      	movs	r4, r0
    44e4:	332d      	adds	r3, #45	; 0x2d
    44e6:	7818      	ldrb	r0, [r3, #0]
    44e8:	000e      	movs	r6, r1
    44ea:	0011      	movs	r1, r2
    44ec:	f7fe fd06 	bl	2efc <DmConnSetIdle>
    44f0:	0020      	movs	r0, r4
    44f2:	f000 fd1b 	bl	4f2c <smpStartRspTimer>
    44f6:	2019      	movs	r0, #25
    44f8:	f7ff fe56 	bl	41a8 <smpMsgAlloc>
    44fc:	1e05      	subs	r5, r0, #0
    44fe:	d00b      	beq.n	4518 <smpScSendDHKeyCheck+0x3e>
    4500:	230d      	movs	r3, #13
    4502:	0039      	movs	r1, r7
    4504:	7203      	strb	r3, [r0, #8]
    4506:	2210      	movs	r2, #16
    4508:	3009      	adds	r0, #9
    450a:	f008 fd3d 	bl	cf88 <WStrReverseCpy>
    450e:	0029      	movs	r1, r5
    4510:	0020      	movs	r0, r4
    4512:	f7ff fdf9 	bl	4108 <smpSendPkt>
    4516:	e007      	b.n	4528 <smpScSendDHKeyCheck+0x4e>
    4518:	2308      	movs	r3, #8
    451a:	70f3      	strb	r3, [r6, #3]
    451c:	3b05      	subs	r3, #5
    451e:	70b3      	strb	r3, [r6, #2]
    4520:	0031      	movs	r1, r6
    4522:	0020      	movs	r0, r4
    4524:	f000 ff1f 	bl	5366 <smpSmExecute>
    4528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000452a <smpScSendRand>:
    452a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    452c:	0003      	movs	r3, r0
    452e:	0017      	movs	r7, r2
    4530:	2201      	movs	r2, #1
    4532:	0004      	movs	r4, r0
    4534:	332d      	adds	r3, #45	; 0x2d
    4536:	7818      	ldrb	r0, [r3, #0]
    4538:	000e      	movs	r6, r1
    453a:	0011      	movs	r1, r2
    453c:	f7fe fcde 	bl	2efc <DmConnSetIdle>
    4540:	0020      	movs	r0, r4
    4542:	f000 fcf3 	bl	4f2c <smpStartRspTimer>
    4546:	2019      	movs	r0, #25
    4548:	f7ff fe2e 	bl	41a8 <smpMsgAlloc>
    454c:	1e05      	subs	r5, r0, #0
    454e:	d00b      	beq.n	4568 <smpScSendRand+0x3e>
    4550:	2304      	movs	r3, #4
    4552:	0039      	movs	r1, r7
    4554:	7203      	strb	r3, [r0, #8]
    4556:	2210      	movs	r2, #16
    4558:	3009      	adds	r0, #9
    455a:	f008 fd15 	bl	cf88 <WStrReverseCpy>
    455e:	0029      	movs	r1, r5
    4560:	0020      	movs	r0, r4
    4562:	f7ff fdd1 	bl	4108 <smpSendPkt>
    4566:	e007      	b.n	4578 <smpScSendRand+0x4e>
    4568:	2308      	movs	r3, #8
    456a:	70f3      	strb	r3, [r6, #3]
    456c:	3b05      	subs	r3, #5
    456e:	70b3      	strb	r3, [r6, #2]
    4570:	0031      	movs	r1, r6
    4572:	0020      	movs	r0, r4
    4574:	f000 fef7 	bl	5366 <smpSmExecute>
    4578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000457a <smpScSendPairCnf>:
    457a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    457c:	0003      	movs	r3, r0
    457e:	0017      	movs	r7, r2
    4580:	2201      	movs	r2, #1
    4582:	0004      	movs	r4, r0
    4584:	332d      	adds	r3, #45	; 0x2d
    4586:	7818      	ldrb	r0, [r3, #0]
    4588:	000e      	movs	r6, r1
    458a:	0011      	movs	r1, r2
    458c:	f7fe fcb6 	bl	2efc <DmConnSetIdle>
    4590:	0020      	movs	r0, r4
    4592:	f000 fccb 	bl	4f2c <smpStartRspTimer>
    4596:	2019      	movs	r0, #25
    4598:	f7ff fe06 	bl	41a8 <smpMsgAlloc>
    459c:	2303      	movs	r3, #3
    459e:	1e05      	subs	r5, r0, #0
    45a0:	d00a      	beq.n	45b8 <smpScSendPairCnf+0x3e>
    45a2:	7203      	strb	r3, [r0, #8]
    45a4:	0039      	movs	r1, r7
    45a6:	3009      	adds	r0, #9
    45a8:	2210      	movs	r2, #16
    45aa:	f008 fced 	bl	cf88 <WStrReverseCpy>
    45ae:	0029      	movs	r1, r5
    45b0:	0020      	movs	r0, r4
    45b2:	f7ff fda9 	bl	4108 <smpSendPkt>
    45b6:	e006      	b.n	45c6 <smpScSendPairCnf+0x4c>
    45b8:	2208      	movs	r2, #8
    45ba:	70b3      	strb	r3, [r6, #2]
    45bc:	70f2      	strb	r2, [r6, #3]
    45be:	0031      	movs	r1, r6
    45c0:	0020      	movs	r0, r4
    45c2:	f000 fed0 	bl	5366 <smpSmExecute>
    45c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000045c8 <smpGetPkBit>:
    45c8:	220f      	movs	r2, #15
    45ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
    45cc:	78d9      	ldrb	r1, [r3, #3]
    45ce:	68d8      	ldr	r0, [r3, #12]
    45d0:	08cb      	lsrs	r3, r1, #3
    45d2:	1ad2      	subs	r2, r2, r3
    45d4:	b2d3      	uxtb	r3, r2
    45d6:	18c3      	adds	r3, r0, r3
    45d8:	3301      	adds	r3, #1
    45da:	7fd8      	ldrb	r0, [r3, #31]
    45dc:	2307      	movs	r3, #7
    45de:	400b      	ands	r3, r1
    45e0:	4118      	asrs	r0, r3
    45e2:	2301      	movs	r3, #1
    45e4:	4018      	ands	r0, r3
    45e6:	3080      	adds	r0, #128	; 0x80
    45e8:	4770      	bx	lr

000045ea <smpGetPeerPublicKey>:
    45ea:	b510      	push	{r4, lr}
    45ec:	f7ff fc42 	bl	3e74 <smpCcbByConnId>
    45f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    45f2:	1e18      	subs	r0, r3, #0
    45f4:	d000      	beq.n	45f8 <smpGetPeerPublicKey+0xe>
    45f6:	6898      	ldr	r0, [r3, #8]
    45f8:	bd10      	pop	{r4, pc}

000045fa <smpSetPeerPublicKey>:
    45fa:	b510      	push	{r4, lr}
    45fc:	000c      	movs	r4, r1
    45fe:	f7ff fc39 	bl	3e74 <smpCcbByConnId>
    4602:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4604:	2b00      	cmp	r3, #0
    4606:	d004      	beq.n	4612 <smpSetPeerPublicKey+0x18>
    4608:	6898      	ldr	r0, [r3, #8]
    460a:	2240      	movs	r2, #64	; 0x40
    460c:	0021      	movs	r1, r4
    460e:	f00b fa9e 	bl	fb4e <memcpy>
    4612:	bd10      	pop	{r4, pc}

00004614 <SmpScSetOobCfg>:
    4614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4616:	000d      	movs	r5, r1
    4618:	f7ff fc2c 	bl	3e74 <smpCcbByConnId>
    461c:	0003      	movs	r3, r0
    461e:	0029      	movs	r1, r5
    4620:	002f      	movs	r7, r5
    4622:	002e      	movs	r6, r5
    4624:	332a      	adds	r3, #42	; 0x2a
    4626:	781a      	ldrb	r2, [r3, #0]
    4628:	6b43      	ldr	r3, [r0, #52]	; 0x34
    462a:	0004      	movs	r4, r0
    462c:	3110      	adds	r1, #16
    462e:	3730      	adds	r7, #48	; 0x30
    4630:	3620      	adds	r6, #32
    4632:	68d8      	ldr	r0, [r3, #12]
    4634:	2a00      	cmp	r2, #0
    4636:	d012      	beq.n	465e <SmpScSetOobCfg+0x4a>
    4638:	3050      	adds	r0, #80	; 0x50
    463a:	f008 fc6a 	bl	cf12 <Calc128Cpy>
    463e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4640:	0029      	movs	r1, r5
    4642:	68d8      	ldr	r0, [r3, #12]
    4644:	3020      	adds	r0, #32
    4646:	f008 fc64 	bl	cf12 <Calc128Cpy>
    464a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    464c:	0039      	movs	r1, r7
    464e:	68d8      	ldr	r0, [r3, #12]
    4650:	3040      	adds	r0, #64	; 0x40
    4652:	f008 fc5e 	bl	cf12 <Calc128Cpy>
    4656:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4658:	68d8      	ldr	r0, [r3, #12]
    465a:	3030      	adds	r0, #48	; 0x30
    465c:	e011      	b.n	4682 <SmpScSetOobCfg+0x6e>
    465e:	3040      	adds	r0, #64	; 0x40
    4660:	f008 fc57 	bl	cf12 <Calc128Cpy>
    4664:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4666:	0029      	movs	r1, r5
    4668:	68d8      	ldr	r0, [r3, #12]
    466a:	3030      	adds	r0, #48	; 0x30
    466c:	f008 fc51 	bl	cf12 <Calc128Cpy>
    4670:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4672:	0039      	movs	r1, r7
    4674:	68d8      	ldr	r0, [r3, #12]
    4676:	3050      	adds	r0, #80	; 0x50
    4678:	f008 fc4b 	bl	cf12 <Calc128Cpy>
    467c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    467e:	68d8      	ldr	r0, [r3, #12]
    4680:	3020      	adds	r0, #32
    4682:	0031      	movs	r1, r6
    4684:	f008 fc45 	bl	cf12 <Calc128Cpy>
    4688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000468a <smpEventStr>:
    468a:	3801      	subs	r0, #1
    468c:	b2c3      	uxtb	r3, r0
    468e:	4803      	ldr	r0, [pc, #12]	; (469c <smpEventStr+0x12>)
    4690:	2b1b      	cmp	r3, #27
    4692:	d802      	bhi.n	469a <smpEventStr+0x10>
    4694:	4a02      	ldr	r2, [pc, #8]	; (46a0 <smpEventStr+0x16>)
    4696:	009b      	lsls	r3, r3, #2
    4698:	5898      	ldr	r0, [r3, r2]
    469a:	4770      	bx	lr
    469c:	000133d7 	.word	0x000133d7
    46a0:	00010c64 	.word	0x00010c64

000046a4 <smpStateStr>:
    46a4:	b510      	push	{r4, lr}
    46a6:	4b05      	ldr	r3, [pc, #20]	; (46bc <smpStateStr+0x18>)
    46a8:	332a      	adds	r3, #42	; 0x2a
    46aa:	781b      	ldrb	r3, [r3, #0]
    46ac:	2b00      	cmp	r3, #0
    46ae:	d002      	beq.n	46b6 <smpStateStr+0x12>
    46b0:	f000 fbb6 	bl	4e20 <smpiStateStr>
    46b4:	e001      	b.n	46ba <smpStateStr+0x16>
    46b6:	f000 fbcf 	bl	4e58 <smprStateStr>
    46ba:	bd10      	pop	{r4, pc}
    46bc:	10001818 	.word	0x10001818

000046c0 <smpLogByteArray>:
    46c0:	4770      	bx	lr
    46c2:	46c0      	nop			; (mov r8, r8)

000046c4 <smpScCatInitiatorBdAddr>:
    46c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46c6:	0003      	movs	r3, r0
    46c8:	332d      	adds	r3, #45	; 0x2d
    46ca:	0006      	movs	r6, r0
    46cc:	7818      	ldrb	r0, [r3, #0]
    46ce:	000d      	movs	r5, r1
    46d0:	f7fe f998 	bl	2a04 <dmConnCcbById>
    46d4:	1e04      	subs	r4, r0, #0
    46d6:	d023      	beq.n	4720 <smpScCatInitiatorBdAddr+0x5c>
    46d8:	362a      	adds	r6, #42	; 0x2a
    46da:	7833      	ldrb	r3, [r6, #0]
    46dc:	0007      	movs	r7, r0
    46de:	1c6e      	adds	r6, r5, #1
    46e0:	2b00      	cmp	r3, #0
    46e2:	d00a      	beq.n	46fa <smpScCatInitiatorBdAddr+0x36>
    46e4:	371a      	adds	r7, #26
    46e6:	0038      	movs	r0, r7
    46e8:	f008 fbf9 	bl	cede <BdaIsZeros>
    46ec:	2800      	cmp	r0, #0
    46ee:	d00a      	beq.n	4706 <smpScCatInitiatorBdAddr+0x42>
    46f0:	7d23      	ldrb	r3, [r4, #20]
    46f2:	1da1      	adds	r1, r4, #6
    46f4:	702b      	strb	r3, [r5, #0]
    46f6:	2206      	movs	r2, #6
    46f8:	e00e      	b.n	4718 <smpScCatInitiatorBdAddr+0x54>
    46fa:	3720      	adds	r7, #32
    46fc:	0038      	movs	r0, r7
    46fe:	f008 fbee 	bl	cede <BdaIsZeros>
    4702:	2800      	cmp	r0, #0
    4704:	d104      	bne.n	4710 <smpScCatInitiatorBdAddr+0x4c>
    4706:	2301      	movs	r3, #1
    4708:	2206      	movs	r2, #6
    470a:	702b      	strb	r3, [r5, #0]
    470c:	0039      	movs	r1, r7
    470e:	e003      	b.n	4718 <smpScCatInitiatorBdAddr+0x54>
    4710:	2206      	movs	r2, #6
    4712:	0021      	movs	r1, r4
    4714:	7ce3      	ldrb	r3, [r4, #19]
    4716:	702b      	strb	r3, [r5, #0]
    4718:	0030      	movs	r0, r6
    471a:	f008 fc35 	bl	cf88 <WStrReverseCpy>
    471e:	1db5      	adds	r5, r6, #6
    4720:	0028      	movs	r0, r5
    4722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004724 <smpScCatResponderBdAddr>:
    4724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4726:	0003      	movs	r3, r0
    4728:	332d      	adds	r3, #45	; 0x2d
    472a:	0006      	movs	r6, r0
    472c:	7818      	ldrb	r0, [r3, #0]
    472e:	000d      	movs	r5, r1
    4730:	f7fe f968 	bl	2a04 <dmConnCcbById>
    4734:	1e04      	subs	r4, r0, #0
    4736:	d023      	beq.n	4780 <smpScCatResponderBdAddr+0x5c>
    4738:	362a      	adds	r6, #42	; 0x2a
    473a:	7833      	ldrb	r3, [r6, #0]
    473c:	0007      	movs	r7, r0
    473e:	1c6e      	adds	r6, r5, #1
    4740:	2b00      	cmp	r3, #0
    4742:	d00a      	beq.n	475a <smpScCatResponderBdAddr+0x36>
    4744:	3720      	adds	r7, #32
    4746:	0038      	movs	r0, r7
    4748:	f008 fbc9 	bl	cede <BdaIsZeros>
    474c:	2800      	cmp	r0, #0
    474e:	d00a      	beq.n	4766 <smpScCatResponderBdAddr+0x42>
    4750:	7ce3      	ldrb	r3, [r4, #19]
    4752:	2206      	movs	r2, #6
    4754:	702b      	strb	r3, [r5, #0]
    4756:	0021      	movs	r1, r4
    4758:	e00e      	b.n	4778 <smpScCatResponderBdAddr+0x54>
    475a:	371a      	adds	r7, #26
    475c:	0038      	movs	r0, r7
    475e:	f008 fbbe 	bl	cede <BdaIsZeros>
    4762:	2800      	cmp	r0, #0
    4764:	d104      	bne.n	4770 <smpScCatResponderBdAddr+0x4c>
    4766:	2301      	movs	r3, #1
    4768:	2206      	movs	r2, #6
    476a:	702b      	strb	r3, [r5, #0]
    476c:	0039      	movs	r1, r7
    476e:	e003      	b.n	4778 <smpScCatResponderBdAddr+0x54>
    4770:	2206      	movs	r2, #6
    4772:	7d23      	ldrb	r3, [r4, #20]
    4774:	1da1      	adds	r1, r4, #6
    4776:	702b      	strb	r3, [r5, #0]
    4778:	0030      	movs	r0, r6
    477a:	f008 fc05 	bl	cf88 <WStrReverseCpy>
    477e:	1db5      	adds	r5, r6, #6
    4780:	0028      	movs	r0, r5
    4782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004784 <smpScProcPairing>:
    4784:	2300      	movs	r3, #0
    4786:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4788:	7013      	strb	r3, [r2, #0]
    478a:	700b      	strb	r3, [r1, #0]
    478c:	0004      	movs	r4, r0
    478e:	7cc5      	ldrb	r5, [r0, #19]
    4790:	2008      	movs	r0, #8
    4792:	7ca3      	ldrb	r3, [r4, #18]
    4794:	4205      	tst	r5, r0
    4796:	d00c      	beq.n	47b2 <smpScProcPairing+0x2e>
    4798:	7ea5      	ldrb	r5, [r4, #26]
    479a:	4205      	tst	r5, r0
    479c:	d009      	beq.n	47b2 <smpScProcPairing+0x2e>
    479e:	2b01      	cmp	r3, #1
    47a0:	d003      	beq.n	47aa <smpScProcPairing+0x26>
    47a2:	2601      	movs	r6, #1
    47a4:	7e63      	ldrb	r3, [r4, #25]
    47a6:	42b3      	cmp	r3, r6
    47a8:	d108      	bne.n	47bc <smpScProcPairing+0x38>
    47aa:	2301      	movs	r3, #1
    47ac:	2600      	movs	r6, #0
    47ae:	700b      	strb	r3, [r1, #0]
    47b0:	e004      	b.n	47bc <smpScProcPairing+0x38>
    47b2:	2601      	movs	r6, #1
    47b4:	42b3      	cmp	r3, r6
    47b6:	d101      	bne.n	47bc <smpScProcPairing+0x38>
    47b8:	7e63      	ldrb	r3, [r4, #25]
    47ba:	e7f4      	b.n	47a6 <smpScProcPairing+0x22>
    47bc:	780b      	ldrb	r3, [r1, #0]
    47be:	2b00      	cmp	r3, #0
    47c0:	d12a      	bne.n	4818 <smpScProcPairing+0x94>
    47c2:	7ce0      	ldrb	r0, [r4, #19]
    47c4:	3304      	adds	r3, #4
    47c6:	4218      	tst	r0, r3
    47c8:	d102      	bne.n	47d0 <smpScProcPairing+0x4c>
    47ca:	7ea0      	ldrb	r0, [r4, #26]
    47cc:	4218      	tst	r0, r3
    47ce:	d023      	beq.n	4818 <smpScProcPairing+0x94>
    47d0:	7c65      	ldrb	r5, [r4, #17]
    47d2:	2d03      	cmp	r5, #3
    47d4:	d020      	beq.n	4818 <smpScProcPairing+0x94>
    47d6:	7e20      	ldrb	r0, [r4, #24]
    47d8:	2803      	cmp	r0, #3
    47da:	d01d      	beq.n	4818 <smpScProcPairing+0x94>
    47dc:	2d01      	cmp	r5, #1
    47de:	d803      	bhi.n	47e8 <smpScProcPairing+0x64>
    47e0:	2301      	movs	r3, #1
    47e2:	4298      	cmp	r0, r3
    47e4:	d808      	bhi.n	47f8 <smpScProcPairing+0x74>
    47e6:	e017      	b.n	4818 <smpScProcPairing+0x94>
    47e8:	2300      	movs	r3, #0
    47ea:	2d04      	cmp	r5, #4
    47ec:	d104      	bne.n	47f8 <smpScProcPairing+0x74>
    47ee:	33fd      	adds	r3, #253	; 0xfd
    47f0:	3802      	subs	r0, #2
    47f2:	4018      	ands	r0, r3
    47f4:	4243      	negs	r3, r0
    47f6:	4143      	adcs	r3, r0
    47f8:	7013      	strb	r3, [r2, #0]
    47fa:	7e20      	ldrb	r0, [r4, #24]
    47fc:	2802      	cmp	r0, #2
    47fe:	d103      	bne.n	4808 <smpScProcPairing+0x84>
    4800:	7c60      	ldrb	r0, [r4, #17]
    4802:	2600      	movs	r6, #0
    4804:	2802      	cmp	r0, #2
    4806:	d007      	beq.n	4818 <smpScProcPairing+0x94>
    4808:	0020      	movs	r0, r4
    480a:	302a      	adds	r0, #42	; 0x2a
    480c:	7805      	ldrb	r5, [r0, #0]
    480e:	2600      	movs	r6, #0
    4810:	4268      	negs	r0, r5
    4812:	4168      	adcs	r0, r5
    4814:	4043      	eors	r3, r0
    4816:	7013      	strb	r3, [r2, #0]
    4818:	0027      	movs	r7, r4
    481a:	2308      	movs	r3, #8
    481c:	7ce0      	ldrb	r0, [r4, #19]
    481e:	ad01      	add	r5, sp, #4
    4820:	372d      	adds	r7, #45	; 0x2d
    4822:	4218      	tst	r0, r3
    4824:	d048      	beq.n	48b8 <smpScProcPairing+0x134>
    4826:	7ea0      	ldrb	r0, [r4, #26]
    4828:	4218      	tst	r0, r3
    482a:	d045      	beq.n	48b8 <smpScProcPairing+0x134>
    482c:	33cd      	adds	r3, #205	; 0xcd
    482e:	4845      	ldr	r0, [pc, #276]	; (4944 <smpScProcPairing+0x1c0>)
    4830:	33ff      	adds	r3, #255	; 0xff
    4832:	5cc3      	ldrb	r3, [r0, r3]
    4834:	2b00      	cmp	r3, #0
    4836:	d06b      	beq.n	4910 <smpScProcPairing+0x18c>
    4838:	2301      	movs	r3, #1
    483a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    483c:	7003      	strb	r3, [r0, #0]
    483e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4840:	7043      	strb	r3, [r0, #1]
    4842:	7813      	ldrb	r3, [r2, #0]
    4844:	6b62      	ldr	r2, [r4, #52]	; 0x34
    4846:	7113      	strb	r3, [r2, #4]
    4848:	780b      	ldrb	r3, [r1, #0]
    484a:	2b00      	cmp	r3, #0
    484c:	d001      	beq.n	4852 <smpScProcPairing+0xce>
    484e:	2302      	movs	r3, #2
    4850:	e024      	b.n	489c <smpScProcPairing+0x118>
    4852:	2e00      	cmp	r6, #0
    4854:	d11b      	bne.n	488e <smpScProcPairing+0x10a>
    4856:	2303      	movs	r3, #3
    4858:	6b62      	ldr	r2, [r4, #52]	; 0x34
    485a:	7053      	strb	r3, [r2, #1]
    485c:	7e23      	ldrb	r3, [r4, #24]
    485e:	2b04      	cmp	r3, #4
    4860:	d103      	bne.n	486a <smpScProcPairing+0xe6>
    4862:	7c63      	ldrb	r3, [r4, #17]
    4864:	2b01      	cmp	r3, #1
    4866:	d103      	bne.n	4870 <smpScProcPairing+0xec>
    4868:	e004      	b.n	4874 <smpScProcPairing+0xf0>
    486a:	2b01      	cmp	r3, #1
    486c:	d104      	bne.n	4878 <smpScProcPairing+0xf4>
    486e:	7c63      	ldrb	r3, [r4, #17]
    4870:	2b04      	cmp	r3, #4
    4872:	d101      	bne.n	4878 <smpScProcPairing+0xf4>
    4874:	2304      	movs	r3, #4
    4876:	e011      	b.n	489c <smpScProcPairing+0x118>
    4878:	2310      	movs	r3, #16
    487a:	7ce2      	ldrb	r2, [r4, #19]
    487c:	421a      	tst	r2, r3
    487e:	d00f      	beq.n	48a0 <smpScProcPairing+0x11c>
    4880:	7ea2      	ldrb	r2, [r4, #26]
    4882:	421a      	tst	r2, r3
    4884:	d00c      	beq.n	48a0 <smpScProcPairing+0x11c>
    4886:	6b62      	ldr	r2, [r4, #52]	; 0x34
    4888:	3b0f      	subs	r3, #15
    488a:	7093      	strb	r3, [r2, #2]
    488c:	e008      	b.n	48a0 <smpScProcPairing+0x11c>
    488e:	7e23      	ldrb	r3, [r4, #24]
    4890:	2b01      	cmp	r3, #1
    4892:	d105      	bne.n	48a0 <smpScProcPairing+0x11c>
    4894:	7c63      	ldrb	r3, [r4, #17]
    4896:	2b01      	cmp	r3, #1
    4898:	d102      	bne.n	48a0 <smpScProcPairing+0x11c>
    489a:	3303      	adds	r3, #3
    489c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    489e:	7053      	strb	r3, [r2, #1]
    48a0:	783b      	ldrb	r3, [r7, #0]
    48a2:	0020      	movs	r0, r4
    48a4:	802b      	strh	r3, [r5, #0]
    48a6:	f7ff fd19 	bl	42dc <SmpScAllocScratchBuffers>
    48aa:	2310      	movs	r3, #16
    48ac:	2800      	cmp	r0, #0
    48ae:	d10e      	bne.n	48ce <smpScProcPairing+0x14a>
    48b0:	2308      	movs	r3, #8
    48b2:	70eb      	strb	r3, [r5, #3]
    48b4:	3b05      	subs	r3, #5
    48b6:	e00a      	b.n	48ce <smpScProcPairing+0x14a>
    48b8:	4b23      	ldr	r3, [pc, #140]	; (4948 <smpScProcPairing+0x1c4>)
    48ba:	681b      	ldr	r3, [r3, #0]
    48bc:	799a      	ldrb	r2, [r3, #6]
    48be:	2308      	movs	r3, #8
    48c0:	4013      	ands	r3, r2
    48c2:	d125      	bne.n	4910 <smpScProcPairing+0x18c>
    48c4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    48c6:	7013      	strb	r3, [r2, #0]
    48c8:	783b      	ldrb	r3, [r7, #0]
    48ca:	802b      	strh	r3, [r5, #0]
    48cc:	2311      	movs	r3, #17
    48ce:	0029      	movs	r1, r5
    48d0:	0020      	movs	r0, r4
    48d2:	70ab      	strb	r3, [r5, #2]
    48d4:	f000 fd47 	bl	5366 <smpSmExecute>
    48d8:	0022      	movs	r2, r4
    48da:	7ce3      	ldrb	r3, [r4, #19]
    48dc:	7ea0      	ldrb	r0, [r4, #26]
    48de:	2104      	movs	r1, #4
    48e0:	3230      	adds	r2, #48	; 0x30
    48e2:	4003      	ands	r3, r0
    48e4:	2e00      	cmp	r6, #0
    48e6:	d101      	bne.n	48ec <smpScProcPairing+0x168>
    48e8:	430b      	orrs	r3, r1
    48ea:	e000      	b.n	48ee <smpScProcPairing+0x16a>
    48ec:	438b      	bics	r3, r1
    48ee:	7013      	strb	r3, [r2, #0]
    48f0:	0023      	movs	r3, r4
    48f2:	332a      	adds	r3, #42	; 0x2a
    48f4:	781b      	ldrb	r3, [r3, #0]
    48f6:	2b00      	cmp	r3, #0
    48f8:	d001      	beq.n	48fe <smpScProcPairing+0x17a>
    48fa:	7ce3      	ldrb	r3, [r4, #19]
    48fc:	e000      	b.n	4900 <smpScProcPairing+0x17c>
    48fe:	7ea3      	ldrb	r3, [r4, #26]
    4900:	4a11      	ldr	r2, [pc, #68]	; (4948 <smpScProcPairing+0x1c4>)
    4902:	2e00      	cmp	r6, #0
    4904:	d009      	beq.n	491a <smpScProcPairing+0x196>
    4906:	6811      	ldr	r1, [r2, #0]
    4908:	7989      	ldrb	r1, [r1, #6]
    490a:	400b      	ands	r3, r1
    490c:	075b      	lsls	r3, r3, #29
    490e:	d504      	bpl.n	491a <smpScProcPairing+0x196>
    4910:	783b      	ldrb	r3, [r7, #0]
    4912:	802b      	strh	r3, [r5, #0]
    4914:	2303      	movs	r3, #3
    4916:	70eb      	strb	r3, [r5, #3]
    4918:	e00d      	b.n	4936 <smpScProcPairing+0x1b2>
    491a:	6813      	ldr	r3, [r2, #0]
    491c:	7d22      	ldrb	r2, [r4, #20]
    491e:	78db      	ldrb	r3, [r3, #3]
    4920:	429a      	cmp	r2, r3
    4922:	d303      	bcc.n	492c <smpScProcPairing+0x1a8>
    4924:	7ee2      	ldrb	r2, [r4, #27]
    4926:	2001      	movs	r0, #1
    4928:	429a      	cmp	r2, r3
    492a:	d20a      	bcs.n	4942 <smpScProcPairing+0x1be>
    492c:	783b      	ldrb	r3, [r7, #0]
    492e:	802b      	strh	r3, [r5, #0]
    4930:	2306      	movs	r3, #6
    4932:	70eb      	strb	r3, [r5, #3]
    4934:	3b03      	subs	r3, #3
    4936:	0020      	movs	r0, r4
    4938:	0029      	movs	r1, r5
    493a:	70ab      	strb	r3, [r5, #2]
    493c:	f000 fd13 	bl	5366 <smpSmExecute>
    4940:	2000      	movs	r0, #0
    4942:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4944:	10001818 	.word	0x10001818
    4948:	1000108c 	.word	0x1000108c

0000494c <smpScAuthReq>:
    494c:	0003      	movs	r3, r0
    494e:	b530      	push	{r4, r5, lr}
    4950:	6b44      	ldr	r4, [r0, #52]	; 0x34
    4952:	b087      	sub	sp, #28
    4954:	7825      	ldrb	r5, [r4, #0]
    4956:	332d      	adds	r3, #45	; 0x2d
    4958:	2d00      	cmp	r5, #0
    495a:	d105      	bne.n	4968 <smpScAuthReq+0x1c>
    495c:	0004      	movs	r4, r0
    495e:	3430      	adds	r4, #48	; 0x30
    4960:	7824      	ldrb	r4, [r4, #0]
    4962:	0764      	lsls	r4, r4, #29
    4964:	d50d      	bpl.n	4982 <smpScAuthReq+0x36>
    4966:	e002      	b.n	496e <smpScAuthReq+0x22>
    4968:	7864      	ldrb	r4, [r4, #1]
    496a:	2c02      	cmp	r4, #2
    496c:	d109      	bne.n	4982 <smpScAuthReq+0x36>
    496e:	4668      	mov	r0, sp
    4970:	781b      	ldrb	r3, [r3, #0]
    4972:	7101      	strb	r1, [r0, #4]
    4974:	8003      	strh	r3, [r0, #0]
    4976:	232e      	movs	r3, #46	; 0x2e
    4978:	7142      	strb	r2, [r0, #5]
    497a:	7083      	strb	r3, [r0, #2]
    497c:	f7fe fede 	bl	373c <DmSmpCbackExec>
    4980:	e00d      	b.n	499e <smpScAuthReq+0x52>
    4982:	466a      	mov	r2, sp
    4984:	781b      	ldrb	r3, [r3, #0]
    4986:	4669      	mov	r1, sp
    4988:	8013      	strh	r3, [r2, #0]
    498a:	2304      	movs	r3, #4
    498c:	7093      	strb	r3, [r2, #2]
    498e:	2300      	movs	r3, #0
    4990:	7113      	strb	r3, [r2, #4]
    4992:	7153      	strb	r3, [r2, #5]
    4994:	7193      	strb	r3, [r2, #6]
    4996:	3303      	adds	r3, #3
    4998:	7513      	strb	r3, [r2, #20]
    499a:	f000 fce4 	bl	5366 <smpSmExecute>
    499e:	b007      	add	sp, #28
    49a0:	bd30      	pop	{r4, r5, pc}

000049a2 <smpScActCleanup>:
    49a2:	b510      	push	{r4, lr}
    49a4:	0004      	movs	r4, r0
    49a6:	f000 fae8 	bl	4f7a <smpActCleanup>
    49aa:	0020      	movs	r0, r4
    49ac:	f7ff fcbc 	bl	4328 <SmpScFreeScratchBuffers>
    49b0:	bd10      	pop	{r4, pc}

000049b2 <smpScActPairingFailed>:
    49b2:	b570      	push	{r4, r5, r6, lr}
    49b4:	000d      	movs	r5, r1
    49b6:	0004      	movs	r4, r0
    49b8:	f7ff fff3 	bl	49a2 <smpScActCleanup>
    49bc:	0029      	movs	r1, r5
    49be:	0020      	movs	r0, r4
    49c0:	f000 faee 	bl	4fa0 <smpActPairingFailed>
    49c4:	bd70      	pop	{r4, r5, r6, pc}

000049c6 <smpScActPairingCancel>:
    49c6:	b570      	push	{r4, r5, r6, lr}
    49c8:	000d      	movs	r5, r1
    49ca:	0004      	movs	r4, r0
    49cc:	78c9      	ldrb	r1, [r1, #3]
    49ce:	f000 fad8 	bl	4f82 <smpSendPairingFailed>
    49d2:	0029      	movs	r1, r5
    49d4:	0020      	movs	r0, r4
    49d6:	f7ff ffec 	bl	49b2 <smpScActPairingFailed>
    49da:	bd70      	pop	{r4, r5, r6, pc}

000049dc <smpScActAuthSelect>:
    49dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    49de:	684d      	ldr	r5, [r1, #4]
    49e0:	0004      	movs	r4, r0
    49e2:	0029      	movs	r1, r5
    49e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    49e6:	3109      	adds	r1, #9
    49e8:	6898      	ldr	r0, [r3, #8]
    49ea:	2220      	movs	r2, #32
    49ec:	f008 facc 	bl	cf88 <WStrReverseCpy>
    49f0:	0029      	movs	r1, r5
    49f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    49f4:	3129      	adds	r1, #41	; 0x29
    49f6:	6898      	ldr	r0, [r3, #8]
    49f8:	2220      	movs	r2, #32
    49fa:	3020      	adds	r0, #32
    49fc:	f008 fac4 	bl	cf88 <WStrReverseCpy>
    4a00:	0023      	movs	r3, r4
    4a02:	332d      	adds	r3, #45	; 0x2d
    4a04:	781b      	ldrb	r3, [r3, #0]
    4a06:	a901      	add	r1, sp, #4
    4a08:	800b      	strh	r3, [r1, #0]
    4a0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4a0c:	7858      	ldrb	r0, [r3, #1]
    4a0e:	3801      	subs	r0, #1
    4a10:	2803      	cmp	r0, #3
    4a12:	d809      	bhi.n	4a28 <smpScActAuthSelect+0x4c>
    4a14:	f001 fbdc 	bl	61d0 <__gnu_thumb1_case_uqi>
    4a18:	02060402 	.word	0x02060402
    4a1c:	2312      	movs	r3, #18
    4a1e:	e006      	b.n	4a2e <smpScActAuthSelect+0x52>
    4a20:	2314      	movs	r3, #20
    4a22:	e004      	b.n	4a2e <smpScActAuthSelect+0x52>
    4a24:	2313      	movs	r3, #19
    4a26:	e002      	b.n	4a2e <smpScActAuthSelect+0x52>
    4a28:	2308      	movs	r3, #8
    4a2a:	70cb      	strb	r3, [r1, #3]
    4a2c:	3b05      	subs	r3, #5
    4a2e:	0020      	movs	r0, r4
    4a30:	708b      	strb	r3, [r1, #2]
    4a32:	f000 fc98 	bl	5366 <smpSmExecute>
    4a36:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

00004a38 <smpScActPkSetup>:
    4a38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    4a3a:	2300      	movs	r3, #0
    4a3c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    4a3e:	2103      	movs	r1, #3
    4a40:	70d3      	strb	r3, [r2, #3]
    4a42:	0002      	movs	r2, r0
    4a44:	322f      	adds	r2, #47	; 0x2f
    4a46:	7011      	strb	r1, [r2, #0]
    4a48:	4669      	mov	r1, sp
    4a4a:	3a02      	subs	r2, #2
    4a4c:	7812      	ldrb	r2, [r2, #0]
    4a4e:	710b      	strb	r3, [r1, #4]
    4a50:	800a      	strh	r2, [r1, #0]
    4a52:	222e      	movs	r2, #46	; 0x2e
    4a54:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4a56:	708a      	strb	r2, [r1, #2]
    4a58:	791b      	ldrb	r3, [r3, #4]
    4a5a:	4668      	mov	r0, sp
    4a5c:	714b      	strb	r3, [r1, #5]
    4a5e:	f7fe fe6d 	bl	373c <DmSmpCbackExec>
    4a62:	b007      	add	sp, #28
    4a64:	bd00      	pop	{pc}

00004a66 <smpScActJwncCalcF4>:
    4a66:	0003      	movs	r3, r0
    4a68:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4a6a:	332a      	adds	r3, #42	; 0x2a
    4a6c:	781e      	ldrb	r6, [r3, #0]
    4a6e:	0004      	movs	r4, r0
    4a70:	000d      	movs	r5, r1
    4a72:	2e00      	cmp	r6, #0
    4a74:	d00c      	beq.n	4a90 <smpScActJwncCalcF4+0x2a>
    4a76:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4a78:	689e      	ldr	r6, [r3, #8]
    4a7a:	f7fe ffe5 	bl	3a48 <DmSecGetEccKey>
    4a7e:	6b62      	ldr	r2, [r4, #52]	; 0x34
    4a80:	0003      	movs	r3, r0
    4a82:	68d2      	ldr	r2, [r2, #12]
    4a84:	3210      	adds	r2, #16
    4a86:	9201      	str	r2, [sp, #4]
    4a88:	2200      	movs	r2, #0
    4a8a:	9200      	str	r2, [sp, #0]
    4a8c:	0032      	movs	r2, r6
    4a8e:	e008      	b.n	4aa2 <smpScActJwncCalcF4+0x3c>
    4a90:	f7fe ffda 	bl	3a48 <DmSecGetEccKey>
    4a94:	0002      	movs	r2, r0
    4a96:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4a98:	68cb      	ldr	r3, [r1, #12]
    4a9a:	9600      	str	r6, [sp, #0]
    4a9c:	3310      	adds	r3, #16
    4a9e:	9301      	str	r3, [sp, #4]
    4aa0:	688b      	ldr	r3, [r1, #8]
    4aa2:	0029      	movs	r1, r5
    4aa4:	0020      	movs	r0, r4
    4aa6:	f7ff fc8f 	bl	43c8 <SmpScCalcF4>
    4aaa:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

00004aac <smpScActJwncCalcG2>:
    4aac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4aae:	000a      	movs	r2, r1
    4ab0:	0004      	movs	r4, r0
    4ab2:	000e      	movs	r6, r1
    4ab4:	0001      	movs	r1, r0
    4ab6:	2050      	movs	r0, #80	; 0x50
    4ab8:	f7ff fc70 	bl	439c <SmpScAlloc>
    4abc:	1e05      	subs	r5, r0, #0
    4abe:	d029      	beq.n	4b14 <smpScActJwncCalcG2+0x68>
    4ac0:	0023      	movs	r3, r4
    4ac2:	332a      	adds	r3, #42	; 0x2a
    4ac4:	781b      	ldrb	r3, [r3, #0]
    4ac6:	2b00      	cmp	r3, #0
    4ac8:	d00a      	beq.n	4ae0 <smpScActJwncCalcG2+0x34>
    4aca:	f7fe ffbd 	bl	3a48 <DmSecGetEccKey>
    4ace:	2220      	movs	r2, #32
    4ad0:	0001      	movs	r1, r0
    4ad2:	0028      	movs	r0, r5
    4ad4:	f7ff fcc0 	bl	4458 <SmpScCat>
    4ad8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4ada:	2220      	movs	r2, #32
    4adc:	6899      	ldr	r1, [r3, #8]
    4ade:	e00a      	b.n	4af6 <smpScActJwncCalcG2+0x4a>
    4ae0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4ae2:	2220      	movs	r2, #32
    4ae4:	6899      	ldr	r1, [r3, #8]
    4ae6:	f7ff fcb7 	bl	4458 <SmpScCat>
    4aea:	0007      	movs	r7, r0
    4aec:	f7fe ffac 	bl	3a48 <DmSecGetEccKey>
    4af0:	2220      	movs	r2, #32
    4af2:	0001      	movs	r1, r0
    4af4:	0038      	movs	r0, r7
    4af6:	f7ff fcaf 	bl	4458 <SmpScCat>
    4afa:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4afc:	68d9      	ldr	r1, [r3, #12]
    4afe:	3110      	adds	r1, #16
    4b00:	f7ff fcb1 	bl	4466 <SmpScCat128>
    4b04:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4b06:	9600      	str	r6, [sp, #0]
    4b08:	0023      	movs	r3, r4
    4b0a:	2250      	movs	r2, #80	; 0x50
    4b0c:	0029      	movs	r1, r5
    4b0e:	68c0      	ldr	r0, [r0, #12]
    4b10:	f7ff fc28 	bl	4364 <SmpScCmac>
    4b14:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00004b16 <smpScActJwncDisplay>:
    4b16:	b530      	push	{r4, r5, lr}
    4b18:	0005      	movs	r5, r0
    4b1a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4b1c:	b087      	sub	sp, #28
    4b1e:	785b      	ldrb	r3, [r3, #1]
    4b20:	ac01      	add	r4, sp, #4
    4b22:	352d      	adds	r5, #45	; 0x2d
    4b24:	2b04      	cmp	r3, #4
    4b26:	d10b      	bne.n	4b40 <smpScActJwncDisplay+0x2a>
    4b28:	a802      	add	r0, sp, #8
    4b2a:	6849      	ldr	r1, [r1, #4]
    4b2c:	f008 f9f1 	bl	cf12 <Calc128Cpy>
    4b30:	782b      	ldrb	r3, [r5, #0]
    4b32:	0020      	movs	r0, r4
    4b34:	8023      	strh	r3, [r4, #0]
    4b36:	2335      	movs	r3, #53	; 0x35
    4b38:	70a3      	strb	r3, [r4, #2]
    4b3a:	f7fe fdff 	bl	373c <DmSmpCbackExec>
    4b3e:	e006      	b.n	4b4e <smpScActJwncDisplay+0x38>
    4b40:	782b      	ldrb	r3, [r5, #0]
    4b42:	0021      	movs	r1, r4
    4b44:	8023      	strh	r3, [r4, #0]
    4b46:	2315      	movs	r3, #21
    4b48:	70a3      	strb	r3, [r4, #2]
    4b4a:	f000 fc0c 	bl	5366 <smpSmExecute>
    4b4e:	b007      	add	sp, #28
    4b50:	bd30      	pop	{r4, r5, pc}

00004b52 <smpScActPkKeypress>:
    4b52:	b507      	push	{r0, r1, r2, lr}
    4b54:	684a      	ldr	r2, [r1, #4]
    4b56:	7a13      	ldrb	r3, [r2, #8]
    4b58:	2b0e      	cmp	r3, #14
    4b5a:	d10b      	bne.n	4b74 <smpScActPkKeypress+0x22>
    4b5c:	7a53      	ldrb	r3, [r2, #9]
    4b5e:	466a      	mov	r2, sp
    4b60:	302d      	adds	r0, #45	; 0x2d
    4b62:	7113      	strb	r3, [r2, #4]
    4b64:	7803      	ldrb	r3, [r0, #0]
    4b66:	4668      	mov	r0, sp
    4b68:	8013      	strh	r3, [r2, #0]
    4b6a:	2336      	movs	r3, #54	; 0x36
    4b6c:	7093      	strb	r3, [r2, #2]
    4b6e:	f7fe fde5 	bl	373c <DmSmpCbackExec>
    4b72:	e005      	b.n	4b80 <smpScActPkKeypress+0x2e>
    4b74:	2b03      	cmp	r3, #3
    4b76:	d103      	bne.n	4b80 <smpScActPkKeypress+0x2e>
    4b78:	331a      	adds	r3, #26
    4b7a:	708b      	strb	r3, [r1, #2]
    4b7c:	f000 fbf3 	bl	5366 <smpSmExecute>
    4b80:	bd07      	pop	{r0, r1, r2, pc}

00004b82 <smpScActPkSendKeypress>:
    4b82:	b570      	push	{r4, r5, r6, lr}
    4b84:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4b86:	0004      	movs	r4, r0
    4b88:	789b      	ldrb	r3, [r3, #2]
    4b8a:	000d      	movs	r5, r1
    4b8c:	2b00      	cmp	r3, #0
    4b8e:	d016      	beq.n	4bbe <smpScActPkSendKeypress+0x3c>
    4b90:	f000 f9cc 	bl	4f2c <smpStartRspTimer>
    4b94:	200a      	movs	r0, #10
    4b96:	f7ff fb07 	bl	41a8 <smpMsgAlloc>
    4b9a:	1e01      	subs	r1, r0, #0
    4b9c:	d007      	beq.n	4bae <smpScActPkSendKeypress+0x2c>
    4b9e:	230e      	movs	r3, #14
    4ba0:	7203      	strb	r3, [r0, #8]
    4ba2:	792b      	ldrb	r3, [r5, #4]
    4ba4:	7243      	strb	r3, [r0, #9]
    4ba6:	0020      	movs	r0, r4
    4ba8:	f7ff faae 	bl	4108 <smpSendPkt>
    4bac:	e007      	b.n	4bbe <smpScActPkSendKeypress+0x3c>
    4bae:	2308      	movs	r3, #8
    4bb0:	70eb      	strb	r3, [r5, #3]
    4bb2:	3b05      	subs	r3, #5
    4bb4:	70ab      	strb	r3, [r5, #2]
    4bb6:	0029      	movs	r1, r5
    4bb8:	0020      	movs	r0, r4
    4bba:	f000 fbd4 	bl	5366 <smpSmExecute>
    4bbe:	bd70      	pop	{r4, r5, r6, pc}

00004bc0 <smpScActCalcSharedSecret>:
    4bc0:	b570      	push	{r4, r5, r6, lr}
    4bc2:	b098      	sub	sp, #96	; 0x60
    4bc4:	0004      	movs	r4, r0
    4bc6:	f7fe ff3f 	bl	3a48 <DmSecGetEccKey>
    4bca:	2520      	movs	r5, #32
    4bcc:	0001      	movs	r1, r0
    4bce:	002a      	movs	r2, r5
    4bd0:	3140      	adds	r1, #64	; 0x40
    4bd2:	a810      	add	r0, sp, #64	; 0x40
    4bd4:	f00a ffbb 	bl	fb4e <memcpy>
    4bd8:	6b66      	ldr	r6, [r4, #52]	; 0x34
    4bda:	002a      	movs	r2, r5
    4bdc:	68b1      	ldr	r1, [r6, #8]
    4bde:	4668      	mov	r0, sp
    4be0:	f00a ffb5 	bl	fb4e <memcpy>
    4be4:	68b1      	ldr	r1, [r6, #8]
    4be6:	002a      	movs	r2, r5
    4be8:	1949      	adds	r1, r1, r5
    4bea:	a808      	add	r0, sp, #32
    4bec:	f00a ffaf 	bl	fb4e <memcpy>
    4bf0:	23e4      	movs	r3, #228	; 0xe4
    4bf2:	4906      	ldr	r1, [pc, #24]	; (4c0c <smpScActCalcSharedSecret+0x4c>)
    4bf4:	005b      	lsls	r3, r3, #1
    4bf6:	5cc9      	ldrb	r1, [r1, r3]
    4bf8:	342d      	adds	r4, #45	; 0x2d
    4bfa:	3bb1      	subs	r3, #177	; 0xb1
    4bfc:	7822      	ldrb	r2, [r4, #0]
    4bfe:	3bff      	subs	r3, #255	; 0xff
    4c00:	4668      	mov	r0, sp
    4c02:	f005 fee5 	bl	a9d0 <SecEccGenSharedSecret>
    4c06:	b018      	add	sp, #96	; 0x60
    4c08:	bd70      	pop	{r4, r5, r6, pc}
    4c0a:	46c0      	nop			; (mov r8, r8)
    4c0c:	10001818 	.word	0x10001818

00004c10 <smpScActCalcF5TKey>:
    4c10:	b570      	push	{r4, r5, r6, lr}
    4c12:	000a      	movs	r2, r1
    4c14:	b086      	sub	sp, #24
    4c16:	0006      	movs	r6, r0
    4c18:	000d      	movs	r5, r1
    4c1a:	0001      	movs	r1, r0
    4c1c:	2020      	movs	r0, #32
    4c1e:	f7ff fbbd 	bl	439c <SmpScAlloc>
    4c22:	1e04      	subs	r4, r0, #0
    4c24:	d010      	beq.n	4c48 <smpScActCalcF5TKey+0x38>
    4c26:	2210      	movs	r2, #16
    4c28:	4908      	ldr	r1, [pc, #32]	; (4c4c <smpScActCalcF5TKey+0x3c>)
    4c2a:	a802      	add	r0, sp, #8
    4c2c:	f00a ff8f 	bl	fb4e <memcpy>
    4c30:	1d29      	adds	r1, r5, #4
    4c32:	2220      	movs	r2, #32
    4c34:	0020      	movs	r0, r4
    4c36:	f00a ff8a 	bl	fb4e <memcpy>
    4c3a:	9500      	str	r5, [sp, #0]
    4c3c:	0033      	movs	r3, r6
    4c3e:	2220      	movs	r2, #32
    4c40:	0021      	movs	r1, r4
    4c42:	a802      	add	r0, sp, #8
    4c44:	f7ff fb8e 	bl	4364 <SmpScCmac>
    4c48:	b006      	add	sp, #24
    4c4a:	bd70      	pop	{r4, r5, r6, pc}
    4c4c:	00010cd4 	.word	0x00010cd4

00004c50 <smpScActCalcF5MacKey>:
    4c50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4c52:	0004      	movs	r4, r0
    4c54:	000e      	movs	r6, r1
    4c56:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4c58:	6849      	ldr	r1, [r1, #4]
    4c5a:	6918      	ldr	r0, [r3, #16]
    4c5c:	3010      	adds	r0, #16
    4c5e:	f008 f958 	bl	cf12 <Calc128Cpy>
    4c62:	0032      	movs	r2, r6
    4c64:	0021      	movs	r1, r4
    4c66:	2035      	movs	r0, #53	; 0x35
    4c68:	f7ff fb98 	bl	439c <SmpScAlloc>
    4c6c:	1e05      	subs	r5, r0, #0
    4c6e:	d024      	beq.n	4cba <smpScActCalcF5MacKey+0x6a>
    4c70:	2700      	movs	r7, #0
    4c72:	4912      	ldr	r1, [pc, #72]	; (4cbc <smpScActCalcF5MacKey+0x6c>)
    4c74:	2204      	movs	r2, #4
    4c76:	3110      	adds	r1, #16
    4c78:	3001      	adds	r0, #1
    4c7a:	702f      	strb	r7, [r5, #0]
    4c7c:	f7ff fbec 	bl	4458 <SmpScCat>
    4c80:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4c82:	68d9      	ldr	r1, [r3, #12]
    4c84:	f7ff fbef 	bl	4466 <SmpScCat128>
    4c88:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4c8a:	68d9      	ldr	r1, [r3, #12]
    4c8c:	3110      	adds	r1, #16
    4c8e:	f7ff fbea 	bl	4466 <SmpScCat128>
    4c92:	0001      	movs	r1, r0
    4c94:	0020      	movs	r0, r4
    4c96:	f7ff fd15 	bl	46c4 <smpScCatInitiatorBdAddr>
    4c9a:	0001      	movs	r1, r0
    4c9c:	0020      	movs	r0, r4
    4c9e:	f7ff fd41 	bl	4724 <smpScCatResponderBdAddr>
    4ca2:	2301      	movs	r3, #1
    4ca4:	7047      	strb	r7, [r0, #1]
    4ca6:	7003      	strb	r3, [r0, #0]
    4ca8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4caa:	2235      	movs	r2, #53	; 0x35
    4cac:	6918      	ldr	r0, [r3, #16]
    4cae:	0029      	movs	r1, r5
    4cb0:	3010      	adds	r0, #16
    4cb2:	9600      	str	r6, [sp, #0]
    4cb4:	0023      	movs	r3, r4
    4cb6:	f7ff fb55 	bl	4364 <SmpScCmac>
    4cba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4cbc:	00010cd4 	.word	0x00010cd4

00004cc0 <smpScActCalcF5Ltk>:
    4cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4cc2:	0004      	movs	r4, r0
    4cc4:	000e      	movs	r6, r1
    4cc6:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4cc8:	6849      	ldr	r1, [r1, #4]
    4cca:	6918      	ldr	r0, [r3, #16]
    4ccc:	f008 f921 	bl	cf12 <Calc128Cpy>
    4cd0:	0032      	movs	r2, r6
    4cd2:	0021      	movs	r1, r4
    4cd4:	2035      	movs	r0, #53	; 0x35
    4cd6:	f7ff fb61 	bl	439c <SmpScAlloc>
    4cda:	1e05      	subs	r5, r0, #0
    4cdc:	d024      	beq.n	4d28 <smpScActCalcF5Ltk+0x68>
    4cde:	2701      	movs	r7, #1
    4ce0:	4912      	ldr	r1, [pc, #72]	; (4d2c <smpScActCalcF5Ltk+0x6c>)
    4ce2:	2204      	movs	r2, #4
    4ce4:	3110      	adds	r1, #16
    4ce6:	3001      	adds	r0, #1
    4ce8:	702f      	strb	r7, [r5, #0]
    4cea:	f7ff fbb5 	bl	4458 <SmpScCat>
    4cee:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4cf0:	68d9      	ldr	r1, [r3, #12]
    4cf2:	f7ff fbb8 	bl	4466 <SmpScCat128>
    4cf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4cf8:	68d9      	ldr	r1, [r3, #12]
    4cfa:	3110      	adds	r1, #16
    4cfc:	f7ff fbb3 	bl	4466 <SmpScCat128>
    4d00:	0001      	movs	r1, r0
    4d02:	0020      	movs	r0, r4
    4d04:	f7ff fcde 	bl	46c4 <smpScCatInitiatorBdAddr>
    4d08:	0001      	movs	r1, r0
    4d0a:	0020      	movs	r0, r4
    4d0c:	f7ff fd0a 	bl	4724 <smpScCatResponderBdAddr>
    4d10:	2300      	movs	r3, #0
    4d12:	7007      	strb	r7, [r0, #0]
    4d14:	7043      	strb	r3, [r0, #1]
    4d16:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4d18:	2235      	movs	r2, #53	; 0x35
    4d1a:	6918      	ldr	r0, [r3, #16]
    4d1c:	0029      	movs	r1, r5
    4d1e:	3010      	adds	r0, #16
    4d20:	9600      	str	r6, [sp, #0]
    4d22:	0023      	movs	r3, r4
    4d24:	f7ff fb1e 	bl	4364 <SmpScCmac>
    4d28:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4d2a:	46c0      	nop			; (mov r8, r8)
    4d2c:	00010cd4 	.word	0x00010cd4

00004d30 <smpScActDHKeyCalcF6Ea>:
    4d30:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4d32:	0004      	movs	r4, r0
    4d34:	000e      	movs	r6, r1
    4d36:	6b43      	ldr	r3, [r0, #52]	; 0x34
    4d38:	2210      	movs	r2, #16
    4d3a:	6918      	ldr	r0, [r3, #16]
    4d3c:	6849      	ldr	r1, [r1, #4]
    4d3e:	3010      	adds	r0, #16
    4d40:	f008 f922 	bl	cf88 <WStrReverseCpy>
    4d44:	0032      	movs	r2, r6
    4d46:	0021      	movs	r1, r4
    4d48:	2041      	movs	r0, #65	; 0x41
    4d4a:	f7ff fb27 	bl	439c <SmpScAlloc>
    4d4e:	1e05      	subs	r5, r0, #0
    4d50:	d023      	beq.n	4d9a <smpScActDHKeyCalcF6Ea+0x6a>
    4d52:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4d54:	68d9      	ldr	r1, [r3, #12]
    4d56:	f7ff fb86 	bl	4466 <SmpScCat128>
    4d5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4d5c:	68d9      	ldr	r1, [r3, #12]
    4d5e:	3110      	adds	r1, #16
    4d60:	f7ff fb81 	bl	4466 <SmpScCat128>
    4d64:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4d66:	68d9      	ldr	r1, [r3, #12]
    4d68:	3130      	adds	r1, #48	; 0x30
    4d6a:	f7ff fb7c 	bl	4466 <SmpScCat128>
    4d6e:	7ce3      	ldrb	r3, [r4, #19]
    4d70:	1cc1      	adds	r1, r0, #3
    4d72:	7003      	strb	r3, [r0, #0]
    4d74:	7ca3      	ldrb	r3, [r4, #18]
    4d76:	7043      	strb	r3, [r0, #1]
    4d78:	7c63      	ldrb	r3, [r4, #17]
    4d7a:	7083      	strb	r3, [r0, #2]
    4d7c:	0020      	movs	r0, r4
    4d7e:	f7ff fca1 	bl	46c4 <smpScCatInitiatorBdAddr>
    4d82:	0001      	movs	r1, r0
    4d84:	0020      	movs	r0, r4
    4d86:	f7ff fccd 	bl	4724 <smpScCatResponderBdAddr>
    4d8a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4d8c:	9600      	str	r6, [sp, #0]
    4d8e:	0023      	movs	r3, r4
    4d90:	2241      	movs	r2, #65	; 0x41
    4d92:	0029      	movs	r1, r5
    4d94:	6900      	ldr	r0, [r0, #16]
    4d96:	f7ff fae5 	bl	4364 <SmpScCmac>
    4d9a:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

00004d9c <smpScActDHKeyCalcF6Eb>:
    4d9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4d9e:	000a      	movs	r2, r1
    4da0:	0004      	movs	r4, r0
    4da2:	000d      	movs	r5, r1
    4da4:	0001      	movs	r1, r0
    4da6:	2041      	movs	r0, #65	; 0x41
    4da8:	f7ff faf8 	bl	439c <SmpScAlloc>
    4dac:	1e06      	subs	r6, r0, #0
    4dae:	d023      	beq.n	4df8 <smpScActDHKeyCalcF6Eb+0x5c>
    4db0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4db2:	68d9      	ldr	r1, [r3, #12]
    4db4:	3110      	adds	r1, #16
    4db6:	f7ff fb56 	bl	4466 <SmpScCat128>
    4dba:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4dbc:	68d9      	ldr	r1, [r3, #12]
    4dbe:	f7ff fb52 	bl	4466 <SmpScCat128>
    4dc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4dc4:	68d9      	ldr	r1, [r3, #12]
    4dc6:	3120      	adds	r1, #32
    4dc8:	f7ff fb4d 	bl	4466 <SmpScCat128>
    4dcc:	7ea3      	ldrb	r3, [r4, #26]
    4dce:	1cc1      	adds	r1, r0, #3
    4dd0:	7003      	strb	r3, [r0, #0]
    4dd2:	7e63      	ldrb	r3, [r4, #25]
    4dd4:	7043      	strb	r3, [r0, #1]
    4dd6:	7e23      	ldrb	r3, [r4, #24]
    4dd8:	7083      	strb	r3, [r0, #2]
    4dda:	0020      	movs	r0, r4
    4ddc:	f7ff fca2 	bl	4724 <smpScCatResponderBdAddr>
    4de0:	0001      	movs	r1, r0
    4de2:	0020      	movs	r0, r4
    4de4:	f7ff fc6e 	bl	46c4 <smpScCatInitiatorBdAddr>
    4de8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4dea:	9500      	str	r5, [sp, #0]
    4dec:	0023      	movs	r3, r4
    4dee:	2241      	movs	r2, #65	; 0x41
    4df0:	0031      	movs	r1, r6
    4df2:	6900      	ldr	r0, [r0, #16]
    4df4:	f7ff fab6 	bl	4364 <SmpScCmac>
    4df8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4dfa:	6869      	ldr	r1, [r5, #4]
    4dfc:	68d8      	ldr	r0, [r3, #12]
    4dfe:	f008 f888 	bl	cf12 <Calc128Cpy>
    4e02:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

00004e04 <SmpiScInit>:
    4e04:	23e2      	movs	r3, #226	; 0xe2
    4e06:	b510      	push	{r4, lr}
    4e08:	4903      	ldr	r1, [pc, #12]	; (4e18 <SmpiScInit+0x14>)
    4e0a:	4a04      	ldr	r2, [pc, #16]	; (4e1c <SmpiScInit+0x18>)
    4e0c:	005b      	lsls	r3, r3, #1
    4e0e:	50d1      	str	r1, [r2, r3]
    4e10:	f7ff fb02 	bl	4418 <SmpScInit>
    4e14:	bd10      	pop	{r4, pc}
    4e16:	46c0      	nop			; (mov r8, r8)
    4e18:	00010ce8 	.word	0x00010ce8
    4e1c:	10001818 	.word	0x10001818

00004e20 <smpiStateStr>:
    4e20:	4b04      	ldr	r3, [pc, #16]	; (4e34 <smpiStateStr+0x14>)
    4e22:	2824      	cmp	r0, #36	; 0x24
    4e24:	d803      	bhi.n	4e2e <smpiStateStr+0xe>
    4e26:	4b04      	ldr	r3, [pc, #16]	; (4e38 <smpiStateStr+0x18>)
    4e28:	0080      	lsls	r0, r0, #2
    4e2a:	1818      	adds	r0, r3, r0
    4e2c:	68c3      	ldr	r3, [r0, #12]
    4e2e:	0018      	movs	r0, r3
    4e30:	4770      	bx	lr
    4e32:	46c0      	nop			; (mov r8, r8)
    4e34:	000133d5 	.word	0x000133d5
    4e38:	00010ce8 	.word	0x00010ce8

00004e3c <SmprScInit>:
    4e3c:	23e0      	movs	r3, #224	; 0xe0
    4e3e:	b510      	push	{r4, lr}
    4e40:	4903      	ldr	r1, [pc, #12]	; (4e50 <SmprScInit+0x14>)
    4e42:	4a04      	ldr	r2, [pc, #16]	; (4e54 <SmprScInit+0x18>)
    4e44:	005b      	lsls	r3, r3, #1
    4e46:	50d1      	str	r1, [r2, r3]
    4e48:	f7ff fae6 	bl	4418 <SmpScInit>
    4e4c:	bd10      	pop	{r4, pc}
    4e4e:	46c0      	nop			; (mov r8, r8)
    4e50:	00011014 	.word	0x00011014
    4e54:	10001818 	.word	0x10001818

00004e58 <smprStateStr>:
    4e58:	4b04      	ldr	r3, [pc, #16]	; (4e6c <smprStateStr+0x14>)
    4e5a:	2824      	cmp	r0, #36	; 0x24
    4e5c:	d803      	bhi.n	4e66 <smprStateStr+0xe>
    4e5e:	4b04      	ldr	r3, [pc, #16]	; (4e70 <smprStateStr+0x18>)
    4e60:	0080      	lsls	r0, r0, #2
    4e62:	1818      	adds	r0, r3, r0
    4e64:	68c3      	ldr	r3, [r0, #12]
    4e66:	0018      	movs	r0, r3
    4e68:	4770      	bx	lr
    4e6a:	46c0      	nop			; (mov r8, r8)
    4e6c:	000135a9 	.word	0x000135a9
    4e70:	00011014 	.word	0x00011014

00004e74 <SmprInit>:
    4e74:	22e0      	movs	r2, #224	; 0xe0
    4e76:	4b05      	ldr	r3, [pc, #20]	; (4e8c <SmprInit+0x18>)
    4e78:	4905      	ldr	r1, [pc, #20]	; (4e90 <SmprInit+0x1c>)
    4e7a:	0052      	lsls	r2, r2, #1
    4e7c:	5099      	str	r1, [r3, r2]
    4e7e:	4905      	ldr	r1, [pc, #20]	; (4e94 <SmprInit+0x20>)
    4e80:	320c      	adds	r2, #12
    4e82:	5099      	str	r1, [r3, r2]
    4e84:	4904      	ldr	r1, [pc, #16]	; (4e98 <SmprInit+0x24>)
    4e86:	3204      	adds	r2, #4
    4e88:	5099      	str	r1, [r3, r2]
    4e8a:	4770      	bx	lr
    4e8c:	10001818 	.word	0x10001818
    4e90:	00011360 	.word	0x00011360
    4e94:	000053c9 	.word	0x000053c9
    4e98:	000054b5 	.word	0x000054b5

00004e9c <DmSmpEncryptReq>:
    4e9c:	b570      	push	{r4, r5, r6, lr}
    4e9e:	000d      	movs	r5, r1
    4ea0:	0014      	movs	r4, r2
    4ea2:	f7fd fdaf 	bl	2a04 <dmConnCcbById>
    4ea6:	2800      	cmp	r0, #0
    4ea8:	d007      	beq.n	4eba <DmSmpEncryptReq+0x1e>
    4eaa:	2200      	movs	r2, #0
    4eac:	7605      	strb	r5, [r0, #24]
    4eae:	7482      	strb	r2, [r0, #18]
    4eb0:	0023      	movs	r3, r4
    4eb2:	8980      	ldrh	r0, [r0, #12]
    4eb4:	4901      	ldr	r1, [pc, #4]	; (4ebc <DmSmpEncryptReq+0x20>)
    4eb6:	f001 ff4c 	bl	6d52 <HciLeStartEncryptionCmd>
    4eba:	bd70      	pop	{r4, r5, r6, pc}
    4ebc:	00012fcc 	.word	0x00012fcc

00004ec0 <DmSecPairReq>:
    4ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4ec2:	001c      	movs	r4, r3
    4ec4:	ab08      	add	r3, sp, #32
    4ec6:	781b      	ldrb	r3, [r3, #0]
    4ec8:	0007      	movs	r7, r0
    4eca:	2008      	movs	r0, #8
    4ecc:	000e      	movs	r6, r1
    4ece:	0015      	movs	r5, r2
    4ed0:	9301      	str	r3, [sp, #4]
    4ed2:	f005 ffa4 	bl	ae1e <WsfMsgAlloc>
    4ed6:	2800      	cmp	r0, #0
    4ed8:	d00c      	beq.n	4ef4 <DmSecPairReq+0x34>
    4eda:	2301      	movs	r3, #1
    4edc:	9a01      	ldr	r2, [sp, #4]
    4ede:	7083      	strb	r3, [r0, #2]
    4ee0:	3306      	adds	r3, #6
    4ee2:	401c      	ands	r4, r3
    4ee4:	401a      	ands	r2, r3
    4ee6:	8007      	strh	r7, [r0, #0]
    4ee8:	7106      	strb	r6, [r0, #4]
    4eea:	7145      	strb	r5, [r0, #5]
    4eec:	7184      	strb	r4, [r0, #6]
    4eee:	71c2      	strb	r2, [r0, #7]
    4ef0:	f7ff f95f 	bl	41b2 <SmpDmMsgSend>
    4ef4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00004ef6 <DmSecEncryptReq>:
    4ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ef8:	0007      	movs	r7, r0
    4efa:	2020      	movs	r0, #32
    4efc:	000d      	movs	r5, r1
    4efe:	0016      	movs	r6, r2
    4f00:	f005 ff8d 	bl	ae1e <WsfMsgAlloc>
    4f04:	1e04      	subs	r4, r0, #0
    4f06:	d00d      	beq.n	4f24 <DmSecEncryptReq+0x2e>
    4f08:	2350      	movs	r3, #80	; 0x50
    4f0a:	8007      	strh	r7, [r0, #0]
    4f0c:	7083      	strb	r3, [r0, #2]
    4f0e:	0031      	movs	r1, r6
    4f10:	3004      	adds	r0, #4
    4f12:	221a      	movs	r2, #26
    4f14:	f00a fe1b 	bl	fb4e <memcpy>
    4f18:	4b03      	ldr	r3, [pc, #12]	; (4f28 <DmSecEncryptReq+0x32>)
    4f1a:	77a5      	strb	r5, [r4, #30]
    4f1c:	7b18      	ldrb	r0, [r3, #12]
    4f1e:	0021      	movs	r1, r4
    4f20:	f005 ffa1 	bl	ae66 <WsfMsgSend>
    4f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f26:	46c0      	nop			; (mov r8, r8)
    4f28:	1000174c 	.word	0x1000174c

00004f2c <smpStartRspTimer>:
    4f2c:	230f      	movs	r3, #15
    4f2e:	b510      	push	{r4, lr}
    4f30:	7303      	strb	r3, [r0, #12]
    4f32:	33d2      	adds	r3, #210	; 0xd2
    4f34:	7343      	strb	r3, [r0, #13]
    4f36:	211e      	movs	r1, #30
    4f38:	f006 f92a 	bl	b190 <WsfTimerStartSec>
    4f3c:	bd10      	pop	{r4, pc}

00004f3e <smpActNone>:
    4f3e:	4770      	bx	lr

00004f40 <smpCleanup>:
    4f40:	b510      	push	{r4, lr}
    4f42:	0004      	movs	r4, r0
    4f44:	6a00      	ldr	r0, [r0, #32]
    4f46:	2800      	cmp	r0, #0
    4f48:	d003      	beq.n	4f52 <smpCleanup+0x12>
    4f4a:	f005 ff19 	bl	ad80 <WsfBufFree>
    4f4e:	2300      	movs	r3, #0
    4f50:	6223      	str	r3, [r4, #32]
    4f52:	0020      	movs	r0, r4
    4f54:	f006 f942 	bl	b1dc <WsfTimerStop>
    4f58:	0023      	movs	r3, r4
    4f5a:	2200      	movs	r2, #0
    4f5c:	332b      	adds	r3, #43	; 0x2b
    4f5e:	701a      	strb	r2, [r3, #0]
    4f60:	3b01      	subs	r3, #1
    4f62:	781a      	ldrb	r2, [r3, #0]
    4f64:	230b      	movs	r3, #11
    4f66:	2a00      	cmp	r2, #0
    4f68:	d100      	bne.n	4f6c <smpCleanup+0x2c>
    4f6a:	3b0a      	subs	r3, #10
    4f6c:	0022      	movs	r2, r4
    4f6e:	322f      	adds	r2, #47	; 0x2f
    4f70:	7013      	strb	r3, [r2, #0]
    4f72:	2300      	movs	r3, #0
    4f74:	3433      	adds	r4, #51	; 0x33
    4f76:	7023      	strb	r3, [r4, #0]
    4f78:	bd10      	pop	{r4, pc}

00004f7a <smpActCleanup>:
    4f7a:	b510      	push	{r4, lr}
    4f7c:	f7ff ffe0 	bl	4f40 <smpCleanup>
    4f80:	bd10      	pop	{r4, pc}

00004f82 <smpSendPairingFailed>:
    4f82:	b570      	push	{r4, r5, r6, lr}
    4f84:	0004      	movs	r4, r0
    4f86:	200a      	movs	r0, #10
    4f88:	000d      	movs	r5, r1
    4f8a:	f7ff f90d 	bl	41a8 <smpMsgAlloc>
    4f8e:	1e01      	subs	r1, r0, #0
    4f90:	d005      	beq.n	4f9e <smpSendPairingFailed+0x1c>
    4f92:	2305      	movs	r3, #5
    4f94:	7245      	strb	r5, [r0, #9]
    4f96:	7203      	strb	r3, [r0, #8]
    4f98:	0020      	movs	r0, r4
    4f9a:	f7ff f8b5 	bl	4108 <smpSendPkt>
    4f9e:	bd70      	pop	{r4, r5, r6, pc}

00004fa0 <smpActPairingFailed>:
    4fa0:	b570      	push	{r4, r5, r6, lr}
    4fa2:	0004      	movs	r4, r0
    4fa4:	342d      	adds	r4, #45	; 0x2d
    4fa6:	000d      	movs	r5, r1
    4fa8:	f7ff ffca 	bl	4f40 <smpCleanup>
    4fac:	7820      	ldrb	r0, [r4, #0]
    4fae:	2200      	movs	r2, #0
    4fb0:	2101      	movs	r1, #1
    4fb2:	f7fd ffa3 	bl	2efc <DmConnSetIdle>
    4fb6:	232b      	movs	r3, #43	; 0x2b
    4fb8:	0028      	movs	r0, r5
    4fba:	70ab      	strb	r3, [r5, #2]
    4fbc:	f7fe fbbe 	bl	373c <DmSmpCbackExec>
    4fc0:	bd70      	pop	{r4, r5, r6, pc}

00004fc2 <smpActPairingCancel>:
    4fc2:	b570      	push	{r4, r5, r6, lr}
    4fc4:	000d      	movs	r5, r1
    4fc6:	0004      	movs	r4, r0
    4fc8:	78c9      	ldrb	r1, [r1, #3]
    4fca:	f7ff ffda 	bl	4f82 <smpSendPairingFailed>
    4fce:	0029      	movs	r1, r5
    4fd0:	0020      	movs	r0, r4
    4fd2:	f7ff ffe5 	bl	4fa0 <smpActPairingFailed>
    4fd6:	bd70      	pop	{r4, r5, r6, pc}

00004fd8 <smpActStorePin>:
    4fd8:	b570      	push	{r4, r5, r6, lr}
    4fda:	000c      	movs	r4, r1
    4fdc:	7d0a      	ldrb	r2, [r1, #20]
    4fde:	0005      	movs	r5, r0
    4fe0:	3104      	adds	r1, #4
    4fe2:	6a00      	ldr	r0, [r0, #32]
    4fe4:	f00a fdb3 	bl	fb4e <memcpy>
    4fe8:	7d23      	ldrb	r3, [r4, #20]
    4fea:	2b03      	cmp	r3, #3
    4fec:	d105      	bne.n	4ffa <smpActStorePin+0x22>
    4fee:	6a28      	ldr	r0, [r5, #32]
    4ff0:	220d      	movs	r2, #13
    4ff2:	3003      	adds	r0, #3
    4ff4:	2100      	movs	r1, #0
    4ff6:	f00a fdcf 	bl	fb98 <memset>
    4ffa:	bd70      	pop	{r4, r5, r6, pc}

00004ffc <smpActPairCnfCalc1>:
    4ffc:	b510      	push	{r4, lr}
    4ffe:	0004      	movs	r4, r0
    5000:	f7ff ffea 	bl	4fd8 <smpActStorePin>
    5004:	6a20      	ldr	r0, [r4, #32]
    5006:	2110      	movs	r1, #16
    5008:	3030      	adds	r0, #48	; 0x30
    500a:	f005 fdab 	bl	ab64 <SecRand>
    500e:	6a22      	ldr	r2, [r4, #32]
    5010:	6a21      	ldr	r1, [r4, #32]
    5012:	3230      	adds	r2, #48	; 0x30
    5014:	0020      	movs	r0, r4
    5016:	f7fe ff35 	bl	3e84 <smpCalcC1Part1>
    501a:	bd10      	pop	{r4, pc}

0000501c <smpActSendPairCnf>:
    501c:	0003      	movs	r3, r0
    501e:	b570      	push	{r4, r5, r6, lr}
    5020:	332a      	adds	r3, #42	; 0x2a
    5022:	781b      	ldrb	r3, [r3, #0]
    5024:	0004      	movs	r4, r0
    5026:	1e5a      	subs	r2, r3, #1
    5028:	4193      	sbcs	r3, r2
    502a:	2204      	movs	r2, #4
    502c:	1ad3      	subs	r3, r2, r3
    502e:	0002      	movs	r2, r0
    5030:	322f      	adds	r2, #47	; 0x2f
    5032:	7013      	strb	r3, [r2, #0]
    5034:	000e      	movs	r6, r1
    5036:	f7ff ff79 	bl	4f2c <smpStartRspTimer>
    503a:	2019      	movs	r0, #25
    503c:	f7ff f8b4 	bl	41a8 <smpMsgAlloc>
    5040:	1e05      	subs	r5, r0, #0
    5042:	d00a      	beq.n	505a <smpActSendPairCnf+0x3e>
    5044:	2303      	movs	r3, #3
    5046:	7203      	strb	r3, [r0, #8]
    5048:	6871      	ldr	r1, [r6, #4]
    504a:	3009      	adds	r0, #9
    504c:	2210      	movs	r2, #16
    504e:	f00a fd7e 	bl	fb4e <memcpy>
    5052:	0029      	movs	r1, r5
    5054:	0020      	movs	r0, r4
    5056:	f7ff f857 	bl	4108 <smpSendPkt>
    505a:	bd70      	pop	{r4, r5, r6, pc}

0000505c <smpActPairCnfVerCalc1>:
    505c:	b570      	push	{r4, r5, r6, lr}
    505e:	0005      	movs	r5, r0
    5060:	684c      	ldr	r4, [r1, #4]
    5062:	6a00      	ldr	r0, [r0, #32]
    5064:	3409      	adds	r4, #9
    5066:	0021      	movs	r1, r4
    5068:	2210      	movs	r2, #16
    506a:	3010      	adds	r0, #16
    506c:	f00a fd6f 	bl	fb4e <memcpy>
    5070:	6a29      	ldr	r1, [r5, #32]
    5072:	0028      	movs	r0, r5
    5074:	0022      	movs	r2, r4
    5076:	f7fe ff05 	bl	3e84 <smpCalcC1Part1>
    507a:	bd70      	pop	{r4, r5, r6, pc}

0000507c <smpActPairCnfVerCalc2>:
    507c:	b510      	push	{r4, lr}
    507e:	684a      	ldr	r2, [r1, #4]
    5080:	6a01      	ldr	r1, [r0, #32]
    5082:	f7fe ff75 	bl	3f70 <smpCalcC1Part2>
    5086:	bd10      	pop	{r4, pc}

00005088 <smpActPairCnfCalc2>:
    5088:	b510      	push	{r4, lr}
    508a:	f7ff fff7 	bl	507c <smpActPairCnfVerCalc2>
    508e:	bd10      	pop	{r4, pc}

00005090 <smpSendKey>:
    5090:	22ea      	movs	r2, #234	; 0xea
    5092:	b5f0      	push	{r4, r5, r6, r7, lr}
    5094:	4b62      	ldr	r3, [pc, #392]	; (5220 <smpSendKey+0x190>)
    5096:	0052      	lsls	r2, r2, #1
    5098:	5c9a      	ldrb	r2, [r3, r2]
    509a:	b08d      	sub	sp, #52	; 0x34
    509c:	0004      	movs	r4, r0
    509e:	000e      	movs	r6, r1
    50a0:	9301      	str	r3, [sp, #4]
    50a2:	2a00      	cmp	r2, #0
    50a4:	d02c      	beq.n	5100 <smpSendKey+0x70>
    50a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
    50a8:	781b      	ldrb	r3, [r3, #0]
    50aa:	2b00      	cmp	r3, #0
    50ac:	d028      	beq.n	5100 <smpSendKey+0x70>
    50ae:	0003      	movs	r3, r0
    50b0:	3333      	adds	r3, #51	; 0x33
    50b2:	9300      	str	r3, [sp, #0]
    50b4:	781b      	ldrb	r3, [r3, #0]
    50b6:	2b00      	cmp	r3, #0
    50b8:	d122      	bne.n	5100 <smpSendKey+0x70>
    50ba:	0007      	movs	r7, r0
    50bc:	372d      	adds	r7, #45	; 0x2d
    50be:	7838      	ldrb	r0, [r7, #0]
    50c0:	f7fd ff48 	bl	2f54 <DmConnRole>
    50c4:	ad03      	add	r5, sp, #12
    50c6:	2302      	movs	r3, #2
    50c8:	2800      	cmp	r0, #0
    50ca:	d000      	beq.n	50ce <smpSendKey+0x3e>
    50cc:	2301      	movs	r3, #1
    50ce:	77ab      	strb	r3, [r5, #30]
    50d0:	232f      	movs	r3, #47	; 0x2f
    50d2:	70ab      	strb	r3, [r5, #2]
    50d4:	783b      	ldrb	r3, [r7, #0]
    50d6:	2100      	movs	r1, #0
    50d8:	802b      	strh	r3, [r5, #0]
    50da:	2303      	movs	r3, #3
    50dc:	2208      	movs	r2, #8
    50de:	a808      	add	r0, sp, #32
    50e0:	77eb      	strb	r3, [r5, #31]
    50e2:	83a9      	strh	r1, [r5, #28]
    50e4:	f00a fd58 	bl	fb98 <memset>
    50e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    50ea:	a804      	add	r0, sp, #16
    50ec:	6919      	ldr	r1, [r3, #16]
    50ee:	3110      	adds	r1, #16
    50f0:	f007 ff0f 	bl	cf12 <Calc128Cpy>
    50f4:	0028      	movs	r0, r5
    50f6:	f7fe fb21 	bl	373c <DmSmpCbackExec>
    50fa:	2307      	movs	r3, #7
    50fc:	9a00      	ldr	r2, [sp, #0]
    50fe:	7013      	strb	r3, [r2, #0]
    5100:	2501      	movs	r5, #1
    5102:	2e00      	cmp	r6, #0
    5104:	d100      	bne.n	5108 <smpSendKey+0x78>
    5106:	e087      	b.n	5218 <smpSendKey+0x188>
    5108:	0027      	movs	r7, r4
    510a:	3733      	adds	r7, #51	; 0x33
    510c:	42ae      	cmp	r6, r5
    510e:	d103      	bne.n	5118 <smpSendKey+0x88>
    5110:	783b      	ldrb	r3, [r7, #0]
    5112:	2b07      	cmp	r3, #7
    5114:	d102      	bne.n	511c <smpSendKey+0x8c>
    5116:	e07f      	b.n	5218 <smpSendKey+0x188>
    5118:	2e03      	cmp	r6, #3
    511a:	d803      	bhi.n	5124 <smpSendKey+0x94>
    511c:	783b      	ldrb	r3, [r7, #0]
    511e:	2501      	movs	r5, #1
    5120:	2b09      	cmp	r3, #9
    5122:	d079      	beq.n	5218 <smpSendKey+0x188>
    5124:	783b      	ldrb	r3, [r7, #0]
    5126:	2501      	movs	r5, #1
    5128:	2b0a      	cmp	r3, #10
    512a:	d075      	beq.n	5218 <smpSendKey+0x188>
    512c:	0023      	movs	r3, r4
    512e:	332c      	adds	r3, #44	; 0x2c
    5130:	9300      	str	r3, [sp, #0]
    5132:	781b      	ldrb	r3, [r3, #0]
    5134:	2b00      	cmp	r3, #0
    5136:	d001      	beq.n	513c <smpSendKey+0xac>
    5138:	2500      	movs	r5, #0
    513a:	e06d      	b.n	5218 <smpSendKey+0x188>
    513c:	2019      	movs	r0, #25
    513e:	f7ff f833 	bl	41a8 <smpMsgAlloc>
    5142:	1e05      	subs	r5, r0, #0
    5144:	d0f8      	beq.n	5138 <smpSendKey+0xa8>
    5146:	783b      	ldrb	r3, [r7, #0]
    5148:	2b00      	cmp	r3, #0
    514a:	d109      	bne.n	5160 <smpSendKey+0xd0>
    514c:	07f2      	lsls	r2, r6, #31
    514e:	d519      	bpl.n	5184 <smpSendKey+0xf4>
    5150:	0020      	movs	r0, r4
    5152:	f7fe ffab 	bl	40ac <smpGenerateLtk>
    5156:	2306      	movs	r3, #6
    5158:	722b      	strb	r3, [r5, #8]
    515a:	6a23      	ldr	r3, [r4, #32]
    515c:	1d19      	adds	r1, r3, #4
    515e:	e01c      	b.n	519a <smpSendKey+0x10a>
    5160:	2b06      	cmp	r3, #6
    5162:	d10f      	bne.n	5184 <smpSendKey+0xf4>
    5164:	3301      	adds	r3, #1
    5166:	7203      	strb	r3, [r0, #8]
    5168:	6a23      	ldr	r3, [r4, #32]
    516a:	2208      	movs	r2, #8
    516c:	8b9b      	ldrh	r3, [r3, #28]
    516e:	7243      	strb	r3, [r0, #9]
    5170:	6a23      	ldr	r3, [r4, #32]
    5172:	8b9b      	ldrh	r3, [r3, #28]
    5174:	0a1b      	lsrs	r3, r3, #8
    5176:	7283      	strb	r3, [r0, #10]
    5178:	6a21      	ldr	r1, [r4, #32]
    517a:	300b      	adds	r0, #11
    517c:	3114      	adds	r1, #20
    517e:	f00a fce6 	bl	fb4e <memcpy>
    5182:	e02f      	b.n	51e4 <smpSendKey+0x154>
    5184:	07b2      	lsls	r2, r6, #30
    5186:	d50d      	bpl.n	51a4 <smpSendKey+0x114>
    5188:	2b00      	cmp	r3, #0
    518a:	d001      	beq.n	5190 <smpSendKey+0x100>
    518c:	2b07      	cmp	r3, #7
    518e:	d109      	bne.n	51a4 <smpSendKey+0x114>
    5190:	2308      	movs	r3, #8
    5192:	722b      	strb	r3, [r5, #8]
    5194:	f7fe fb9a 	bl	38cc <DmSecGetLocalIrk>
    5198:	0001      	movs	r1, r0
    519a:	0028      	movs	r0, r5
    519c:	3009      	adds	r0, #9
    519e:	f007 feb8 	bl	cf12 <Calc128Cpy>
    51a2:	e01f      	b.n	51e4 <smpSendKey+0x154>
    51a4:	2b08      	cmp	r3, #8
    51a6:	d10b      	bne.n	51c0 <smpSendKey+0x130>
    51a8:	3301      	adds	r3, #1
    51aa:	722b      	strb	r3, [r5, #8]
    51ac:	2300      	movs	r3, #0
    51ae:	726b      	strb	r3, [r5, #9]
    51b0:	f002 fd9c 	bl	7cec <HciGetBdAddr>
    51b4:	0001      	movs	r1, r0
    51b6:	0028      	movs	r0, r5
    51b8:	300a      	adds	r0, #10
    51ba:	f007 fe5f 	bl	ce7c <BdaCpy>
    51be:	e011      	b.n	51e4 <smpSendKey+0x154>
    51c0:	0772      	lsls	r2, r6, #29
    51c2:	d50a      	bpl.n	51da <smpSendKey+0x14a>
    51c4:	2b00      	cmp	r3, #0
    51c6:	d003      	beq.n	51d0 <smpSendKey+0x140>
    51c8:	22fd      	movs	r2, #253	; 0xfd
    51ca:	3b07      	subs	r3, #7
    51cc:	4213      	tst	r3, r2
    51ce:	d104      	bne.n	51da <smpSendKey+0x14a>
    51d0:	230a      	movs	r3, #10
    51d2:	722b      	strb	r3, [r5, #8]
    51d4:	f7fe fb74 	bl	38c0 <DmSecGetLocalCsrk>
    51d8:	e7de      	b.n	5198 <smpSendKey+0x108>
    51da:	0028      	movs	r0, r5
    51dc:	f005 fe36 	bl	ae4c <WsfMsgFree>
    51e0:	2501      	movs	r5, #1
    51e2:	e019      	b.n	5218 <smpSendKey+0x188>
    51e4:	7a2b      	ldrb	r3, [r5, #8]
    51e6:	0029      	movs	r1, r5
    51e8:	703b      	strb	r3, [r7, #0]
    51ea:	0020      	movs	r0, r4
    51ec:	f7fe ff8c 	bl	4108 <smpSendPkt>
    51f0:	9b00      	ldr	r3, [sp, #0]
    51f2:	781d      	ldrb	r5, [r3, #0]
    51f4:	2d00      	cmp	r5, #0
    51f6:	d19f      	bne.n	5138 <smpSendKey+0xa8>
    51f8:	2004      	movs	r0, #4
    51fa:	f005 fe10 	bl	ae1e <WsfMsgAlloc>
    51fe:	1e01      	subs	r1, r0, #0
    5200:	d09a      	beq.n	5138 <smpSendKey+0xa8>
    5202:	230c      	movs	r3, #12
    5204:	342d      	adds	r4, #45	; 0x2d
    5206:	7083      	strb	r3, [r0, #2]
    5208:	7823      	ldrb	r3, [r4, #0]
    520a:	9a01      	ldr	r2, [sp, #4]
    520c:	8003      	strh	r3, [r0, #0]
    520e:	23e4      	movs	r3, #228	; 0xe4
    5210:	005b      	lsls	r3, r3, #1
    5212:	5cd0      	ldrb	r0, [r2, r3]
    5214:	f005 fe27 	bl	ae66 <WsfMsgSend>
    5218:	0028      	movs	r0, r5
    521a:	b00d      	add	sp, #52	; 0x34
    521c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    521e:	46c0      	nop			; (mov r8, r8)
    5220:	10001818 	.word	0x10001818

00005224 <smpProcRcvKey>:
    5224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5226:	000c      	movs	r4, r1
    5228:	0011      	movs	r1, r2
    522a:	001e      	movs	r6, r3
    522c:	7a13      	ldrb	r3, [r2, #8]
    522e:	0005      	movs	r5, r0
    5230:	3109      	adds	r1, #9
    5232:	2b06      	cmp	r3, #6
    5234:	d018      	beq.n	5268 <smpProcRcvKey+0x44>
    5236:	2b07      	cmp	r3, #7
    5238:	d114      	bne.n	5264 <smpProcRcvKey+0x40>
    523a:	0020      	movs	r0, r4
    523c:	7a93      	ldrb	r3, [r2, #10]
    523e:	7a51      	ldrb	r1, [r2, #9]
    5240:	021b      	lsls	r3, r3, #8
    5242:	18cb      	adds	r3, r1, r3
    5244:	320b      	adds	r2, #11
    5246:	83a3      	strh	r3, [r4, #28]
    5248:	0011      	movs	r1, r2
    524a:	3014      	adds	r0, #20
    524c:	2208      	movs	r2, #8
    524e:	f00a fc7e 	bl	fb4e <memcpy>
    5252:	002b      	movs	r3, r5
    5254:	3330      	adds	r3, #48	; 0x30
    5256:	781b      	ldrb	r3, [r3, #0]
    5258:	075b      	lsls	r3, r3, #29
    525a:	0fdb      	lsrs	r3, r3, #31
    525c:	3301      	adds	r3, #1
    525e:	77e3      	strb	r3, [r4, #31]
    5260:	2302      	movs	r3, #2
    5262:	e019      	b.n	5298 <smpProcRcvKey+0x74>
    5264:	2b08      	cmp	r3, #8
    5266:	d104      	bne.n	5272 <smpProcRcvKey+0x4e>
    5268:	1d20      	adds	r0, r4, #4
    526a:	f007 fe52 	bl	cf12 <Calc128Cpy>
    526e:	2200      	movs	r2, #0
    5270:	e014      	b.n	529c <smpProcRcvKey+0x78>
    5272:	2b09      	cmp	r3, #9
    5274:	d109      	bne.n	528a <smpProcRcvKey+0x66>
    5276:	0020      	movs	r0, r4
    5278:	7a53      	ldrb	r3, [r2, #9]
    527a:	320a      	adds	r2, #10
    527c:	76a3      	strb	r3, [r4, #26]
    527e:	0011      	movs	r1, r2
    5280:	3014      	adds	r0, #20
    5282:	f007 fdfb 	bl	ce7c <BdaCpy>
    5286:	2304      	movs	r3, #4
    5288:	e006      	b.n	5298 <smpProcRcvKey+0x74>
    528a:	2200      	movs	r2, #0
    528c:	2b0a      	cmp	r3, #10
    528e:	d105      	bne.n	529c <smpProcRcvKey+0x78>
    5290:	1d20      	adds	r0, r4, #4
    5292:	f007 fe3e 	bl	cf12 <Calc128Cpy>
    5296:	2308      	movs	r3, #8
    5298:	2201      	movs	r2, #1
    529a:	77a3      	strb	r3, [r4, #30]
    529c:	0028      	movs	r0, r5
    529e:	302f      	adds	r0, #47	; 0x2f
    52a0:	7803      	ldrb	r3, [r0, #0]
    52a2:	2702      	movs	r7, #2
    52a4:	1f9d      	subs	r5, r3, #6
    52a6:	0029      	movs	r1, r5
    52a8:	43b9      	bics	r1, r7
    52aa:	b2cd      	uxtb	r5, r1
    52ac:	2d00      	cmp	r5, #0
    52ae:	d102      	bne.n	52b6 <smpProcRcvKey+0x92>
    52b0:	3301      	adds	r3, #1
    52b2:	7003      	strb	r3, [r0, #0]
    52b4:	e011      	b.n	52da <smpProcRcvKey+0xb6>
    52b6:	423e      	tst	r6, r7
    52b8:	d005      	beq.n	52c6 <smpProcRcvKey+0xa2>
    52ba:	2b07      	cmp	r3, #7
    52bc:	d103      	bne.n	52c6 <smpProcRcvKey+0xa2>
    52be:	3301      	adds	r3, #1
    52c0:	7003      	strb	r3, [r0, #0]
    52c2:	2500      	movs	r5, #0
    52c4:	e009      	b.n	52da <smpProcRcvKey+0xb6>
    52c6:	2501      	movs	r5, #1
    52c8:	0771      	lsls	r1, r6, #29
    52ca:	d506      	bpl.n	52da <smpProcRcvKey+0xb6>
    52cc:	21fd      	movs	r1, #253	; 0xfd
    52ce:	3b07      	subs	r3, #7
    52d0:	400b      	ands	r3, r1
    52d2:	d102      	bne.n	52da <smpProcRcvKey+0xb6>
    52d4:	001d      	movs	r5, r3
    52d6:	39f3      	subs	r1, #243	; 0xf3
    52d8:	7001      	strb	r1, [r0, #0]
    52da:	2a00      	cmp	r2, #0
    52dc:	d004      	beq.n	52e8 <smpProcRcvKey+0xc4>
    52de:	232f      	movs	r3, #47	; 0x2f
    52e0:	0020      	movs	r0, r4
    52e2:	70a3      	strb	r3, [r4, #2]
    52e4:	f7fe fa2a 	bl	373c <DmSmpCbackExec>
    52e8:	0028      	movs	r0, r5
    52ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000052ec <smpActMaxAttempts>:
    52ec:	b510      	push	{r4, lr}
    52ee:	0004      	movs	r4, r0
    52f0:	f7ff fe67 	bl	4fc2 <smpActPairingCancel>
    52f4:	230f      	movs	r3, #15
    52f6:	7323      	strb	r3, [r4, #12]
    52f8:	4b04      	ldr	r3, [pc, #16]	; (530c <smpActMaxAttempts+0x20>)
    52fa:	0020      	movs	r0, r4
    52fc:	681b      	ldr	r3, [r3, #0]
    52fe:	3432      	adds	r4, #50	; 0x32
    5300:	8819      	ldrh	r1, [r3, #0]
    5302:	f005 ff57 	bl	b1b4 <WsfTimerStartMs>
    5306:	2300      	movs	r3, #0
    5308:	7023      	strb	r3, [r4, #0]
    530a:	bd10      	pop	{r4, pc}
    530c:	1000108c 	.word	0x1000108c

00005310 <smpActAttemptRcvd>:
    5310:	2301      	movs	r3, #1
    5312:	3032      	adds	r0, #50	; 0x32
    5314:	7003      	strb	r3, [r0, #0]
    5316:	4770      	bx	lr

00005318 <smpActCheckAttempts>:
    5318:	0003      	movs	r3, r0
    531a:	b510      	push	{r4, lr}
    531c:	3332      	adds	r3, #50	; 0x32
    531e:	781a      	ldrb	r2, [r3, #0]
    5320:	0004      	movs	r4, r0
    5322:	2a00      	cmp	r2, #0
    5324:	d007      	beq.n	5336 <smpActCheckAttempts+0x1e>
    5326:	2200      	movs	r2, #0
    5328:	2109      	movs	r1, #9
    532a:	701a      	strb	r2, [r3, #0]
    532c:	f7ff fe29 	bl	4f82 <smpSendPairingFailed>
    5330:	0020      	movs	r0, r4
    5332:	f7ff fe05 	bl	4f40 <smpCleanup>
    5336:	bd10      	pop	{r4, pc}

00005338 <smpActPairingCmpl>:
    5338:	b537      	push	{r0, r1, r2, r4, r5, lr}
    533a:	0004      	movs	r4, r0
    533c:	0025      	movs	r5, r4
    533e:	352d      	adds	r5, #45	; 0x2d
    5340:	f7ff fdfe 	bl	4f40 <smpCleanup>
    5344:	7828      	ldrb	r0, [r5, #0]
    5346:	2101      	movs	r1, #1
    5348:	2200      	movs	r2, #0
    534a:	f7fd fdd7 	bl	2efc <DmConnSetIdle>
    534e:	466a      	mov	r2, sp
    5350:	3430      	adds	r4, #48	; 0x30
    5352:	7823      	ldrb	r3, [r4, #0]
    5354:	4668      	mov	r0, sp
    5356:	7113      	strb	r3, [r2, #4]
    5358:	782b      	ldrb	r3, [r5, #0]
    535a:	8013      	strh	r3, [r2, #0]
    535c:	232a      	movs	r3, #42	; 0x2a
    535e:	7093      	strb	r3, [r2, #2]
    5360:	f7fe f9ec 	bl	373c <DmSmpCbackExec>
    5364:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

00005366 <smpSmExecute>:
    5366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5368:	0003      	movs	r3, r0
    536a:	332d      	adds	r3, #45	; 0x2d
    536c:	0004      	movs	r4, r0
    536e:	7818      	ldrb	r0, [r3, #0]
    5370:	000d      	movs	r5, r1
    5372:	f7fd fdef 	bl	2f54 <DmConnRole>
    5376:	4b13      	ldr	r3, [pc, #76]	; (53c4 <smpSmExecute+0x5e>)
    5378:	22e0      	movs	r2, #224	; 0xe0
    537a:	2801      	cmp	r0, #1
    537c:	d000      	beq.n	5380 <smpSmExecute+0x1a>
    537e:	22e2      	movs	r2, #226	; 0xe2
    5380:	0020      	movs	r0, r4
    5382:	0052      	lsls	r2, r2, #1
    5384:	589a      	ldr	r2, [r3, r2]
    5386:	302e      	adds	r0, #46	; 0x2e
    5388:	7803      	ldrb	r3, [r0, #0]
    538a:	6811      	ldr	r1, [r2, #0]
    538c:	009b      	lsls	r3, r3, #2
    538e:	5859      	ldr	r1, [r3, r1]
    5390:	78af      	ldrb	r7, [r5, #2]
    5392:	000b      	movs	r3, r1
    5394:	7819      	ldrb	r1, [r3, #0]
    5396:	42b9      	cmp	r1, r7
    5398:	d109      	bne.n	53ae <smpSmExecute+0x48>
    539a:	7859      	ldrb	r1, [r3, #1]
    539c:	7001      	strb	r1, [r0, #0]
    539e:	789b      	ldrb	r3, [r3, #2]
    53a0:	6852      	ldr	r2, [r2, #4]
    53a2:	009b      	lsls	r3, r3, #2
    53a4:	589b      	ldr	r3, [r3, r2]
    53a6:	0029      	movs	r1, r5
    53a8:	0020      	movs	r0, r4
    53aa:	4798      	blx	r3
    53ac:	e008      	b.n	53c0 <smpSmExecute+0x5a>
    53ae:	3303      	adds	r3, #3
    53b0:	7819      	ldrb	r1, [r3, #0]
    53b2:	2900      	cmp	r1, #0
    53b4:	d1ee      	bne.n	5394 <smpSmExecute+0x2e>
    53b6:	6891      	ldr	r1, [r2, #8]
    53b8:	000e      	movs	r6, r1
    53ba:	360c      	adds	r6, #12
    53bc:	42b3      	cmp	r3, r6
    53be:	d1e8      	bne.n	5392 <smpSmExecute+0x2c>
    53c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53c2:	46c0      	nop			; (mov r8, r8)
    53c4:	10001818 	.word	0x10001818

000053c8 <smpProcPairing>:
    53c8:	2300      	movs	r3, #0
    53ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    53cc:	0005      	movs	r5, r0
    53ce:	0004      	movs	r4, r0
    53d0:	7013      	strb	r3, [r2, #0]
    53d2:	700b      	strb	r3, [r1, #0]
    53d4:	7c83      	ldrb	r3, [r0, #18]
    53d6:	352a      	adds	r5, #42	; 0x2a
    53d8:	3430      	adds	r4, #48	; 0x30
    53da:	2b01      	cmp	r3, #1
    53dc:	d104      	bne.n	53e8 <smpProcPairing+0x20>
    53de:	7e43      	ldrb	r3, [r0, #25]
    53e0:	2b01      	cmp	r3, #1
    53e2:	d101      	bne.n	53e8 <smpProcPairing+0x20>
    53e4:	700b      	strb	r3, [r1, #0]
    53e6:	e059      	b.n	549c <smpProcPairing+0xd4>
    53e8:	2104      	movs	r1, #4
    53ea:	7cc3      	ldrb	r3, [r0, #19]
    53ec:	420b      	tst	r3, r1
    53ee:	d102      	bne.n	53f6 <smpProcPairing+0x2e>
    53f0:	7e86      	ldrb	r6, [r0, #26]
    53f2:	420e      	tst	r6, r1
    53f4:	d020      	beq.n	5438 <smpProcPairing+0x70>
    53f6:	7c47      	ldrb	r7, [r0, #17]
    53f8:	2f03      	cmp	r7, #3
    53fa:	d01d      	beq.n	5438 <smpProcPairing+0x70>
    53fc:	7e06      	ldrb	r6, [r0, #24]
    53fe:	2e03      	cmp	r6, #3
    5400:	d01a      	beq.n	5438 <smpProcPairing+0x70>
    5402:	2f01      	cmp	r7, #1
    5404:	d803      	bhi.n	540e <smpProcPairing+0x46>
    5406:	2101      	movs	r1, #1
    5408:	428e      	cmp	r6, r1
    540a:	d808      	bhi.n	541e <smpProcPairing+0x56>
    540c:	e014      	b.n	5438 <smpProcPairing+0x70>
    540e:	2100      	movs	r1, #0
    5410:	2f04      	cmp	r7, #4
    5412:	d104      	bne.n	541e <smpProcPairing+0x56>
    5414:	31fd      	adds	r1, #253	; 0xfd
    5416:	3e02      	subs	r6, #2
    5418:	400e      	ands	r6, r1
    541a:	4271      	negs	r1, r6
    541c:	4171      	adcs	r1, r6
    541e:	7011      	strb	r1, [r2, #0]
    5420:	7e03      	ldrb	r3, [r0, #24]
    5422:	2b02      	cmp	r3, #2
    5424:	d102      	bne.n	542c <smpProcPairing+0x64>
    5426:	7c43      	ldrb	r3, [r0, #17]
    5428:	2b02      	cmp	r3, #2
    542a:	d037      	beq.n	549c <smpProcPairing+0xd4>
    542c:	782e      	ldrb	r6, [r5, #0]
    542e:	4273      	negs	r3, r6
    5430:	4173      	adcs	r3, r6
    5432:	4059      	eors	r1, r3
    5434:	7011      	strb	r1, [r2, #0]
    5436:	e031      	b.n	549c <smpProcPairing+0xd4>
    5438:	7e82      	ldrb	r2, [r0, #26]
    543a:	4013      	ands	r3, r2
    543c:	2204      	movs	r2, #4
    543e:	4393      	bics	r3, r2
    5440:	7023      	strb	r3, [r4, #0]
    5442:	3a03      	subs	r2, #3
    5444:	782b      	ldrb	r3, [r5, #0]
    5446:	2b00      	cmp	r3, #0
    5448:	d001      	beq.n	544e <smpProcPairing+0x86>
    544a:	7cc3      	ldrb	r3, [r0, #19]
    544c:	e000      	b.n	5450 <smpProcPairing+0x88>
    544e:	7e83      	ldrb	r3, [r0, #26]
    5450:	4917      	ldr	r1, [pc, #92]	; (54b0 <smpProcPairing+0xe8>)
    5452:	2a00      	cmp	r2, #0
    5454:	d00c      	beq.n	5470 <smpProcPairing+0xa8>
    5456:	680a      	ldr	r2, [r1, #0]
    5458:	7992      	ldrb	r2, [r2, #6]
    545a:	4013      	ands	r3, r2
    545c:	075b      	lsls	r3, r3, #29
    545e:	d507      	bpl.n	5470 <smpProcPairing+0xa8>
    5460:	0003      	movs	r3, r0
    5462:	332d      	adds	r3, #45	; 0x2d
    5464:	781b      	ldrb	r3, [r3, #0]
    5466:	a901      	add	r1, sp, #4
    5468:	800b      	strh	r3, [r1, #0]
    546a:	2303      	movs	r3, #3
    546c:	70cb      	strb	r3, [r1, #3]
    546e:	e010      	b.n	5492 <smpProcPairing+0xca>
    5470:	680b      	ldr	r3, [r1, #0]
    5472:	78da      	ldrb	r2, [r3, #3]
    5474:	7d03      	ldrb	r3, [r0, #20]
    5476:	4293      	cmp	r3, r2
    5478:	d303      	bcc.n	5482 <smpProcPairing+0xba>
    547a:	7ec1      	ldrb	r1, [r0, #27]
    547c:	2301      	movs	r3, #1
    547e:	4291      	cmp	r1, r2
    5480:	d214      	bcs.n	54ac <smpProcPairing+0xe4>
    5482:	0003      	movs	r3, r0
    5484:	332d      	adds	r3, #45	; 0x2d
    5486:	781b      	ldrb	r3, [r3, #0]
    5488:	a901      	add	r1, sp, #4
    548a:	800b      	strh	r3, [r1, #0]
    548c:	2306      	movs	r3, #6
    548e:	70cb      	strb	r3, [r1, #3]
    5490:	3b03      	subs	r3, #3
    5492:	708b      	strb	r3, [r1, #2]
    5494:	f7ff ff67 	bl	5366 <smpSmExecute>
    5498:	2300      	movs	r3, #0
    549a:	e007      	b.n	54ac <smpProcPairing+0xe4>
    549c:	7e82      	ldrb	r2, [r0, #26]
    549e:	7cc3      	ldrb	r3, [r0, #19]
    54a0:	4013      	ands	r3, r2
    54a2:	2204      	movs	r2, #4
    54a4:	4313      	orrs	r3, r2
    54a6:	7023      	strb	r3, [r4, #0]
    54a8:	2200      	movs	r2, #0
    54aa:	e7cb      	b.n	5444 <smpProcPairing+0x7c>
    54ac:	0018      	movs	r0, r3
    54ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    54b0:	1000108c 	.word	0x1000108c

000054b4 <smpAuthReq>:
    54b4:	0003      	movs	r3, r0
    54b6:	b530      	push	{r4, r5, lr}
    54b8:	2404      	movs	r4, #4
    54ba:	0005      	movs	r5, r0
    54bc:	3330      	adds	r3, #48	; 0x30
    54be:	781b      	ldrb	r3, [r3, #0]
    54c0:	b087      	sub	sp, #28
    54c2:	4023      	ands	r3, r4
    54c4:	352d      	adds	r5, #45	; 0x2d
    54c6:	2b00      	cmp	r3, #0
    54c8:	d009      	beq.n	54de <smpAuthReq+0x2a>
    54ca:	4668      	mov	r0, sp
    54cc:	782b      	ldrb	r3, [r5, #0]
    54ce:	7101      	strb	r1, [r0, #4]
    54d0:	8003      	strh	r3, [r0, #0]
    54d2:	232e      	movs	r3, #46	; 0x2e
    54d4:	7142      	strb	r2, [r0, #5]
    54d6:	7083      	strb	r3, [r0, #2]
    54d8:	f7fe f930 	bl	373c <DmSmpCbackExec>
    54dc:	e00a      	b.n	54f4 <smpAuthReq+0x40>
    54de:	4669      	mov	r1, sp
    54e0:	782a      	ldrb	r2, [r5, #0]
    54e2:	710b      	strb	r3, [r1, #4]
    54e4:	714b      	strb	r3, [r1, #5]
    54e6:	718b      	strb	r3, [r1, #6]
    54e8:	2303      	movs	r3, #3
    54ea:	800a      	strh	r2, [r1, #0]
    54ec:	708c      	strb	r4, [r1, #2]
    54ee:	750b      	strb	r3, [r1, #20]
    54f0:	f7ff ff39 	bl	5366 <smpSmExecute>
    54f4:	b007      	add	sp, #28
    54f6:	bd30      	pop	{r4, r5, pc}

000054f8 <smpiActPairReq>:
    54f8:	0003      	movs	r3, r0
    54fa:	2201      	movs	r2, #1
    54fc:	b570      	push	{r4, r5, r6, lr}
    54fe:	0005      	movs	r5, r0
    5500:	332d      	adds	r3, #45	; 0x2d
    5502:	7818      	ldrb	r0, [r3, #0]
    5504:	000e      	movs	r6, r1
    5506:	0011      	movs	r1, r2
    5508:	f7fd fcf8 	bl	2efc <DmConnSetIdle>
    550c:	002b      	movs	r3, r5
    550e:	2202      	movs	r2, #2
    5510:	332f      	adds	r3, #47	; 0x2f
    5512:	701a      	strb	r2, [r3, #0]
    5514:	0028      	movs	r0, r5
    5516:	f7ff fd09 	bl	4f2c <smpStartRspTimer>
    551a:	2040      	movs	r0, #64	; 0x40
    551c:	f005 fbf0 	bl	ad00 <WsfBufAlloc>
    5520:	6228      	str	r0, [r5, #32]
    5522:	200f      	movs	r0, #15
    5524:	f7fe fe40 	bl	41a8 <smpMsgAlloc>
    5528:	1e04      	subs	r4, r0, #0
    552a:	d01a      	beq.n	5562 <smpiActPairReq+0x6a>
    552c:	2301      	movs	r3, #1
    552e:	7203      	strb	r3, [r0, #8]
    5530:	4b0c      	ldr	r3, [pc, #48]	; (5564 <smpiActPairReq+0x6c>)
    5532:	0021      	movs	r1, r4
    5534:	681b      	ldr	r3, [r3, #0]
    5536:	3108      	adds	r1, #8
    5538:	789a      	ldrb	r2, [r3, #2]
    553a:	7242      	strb	r2, [r0, #9]
    553c:	7932      	ldrb	r2, [r6, #4]
    553e:	7282      	strb	r2, [r0, #10]
    5540:	7972      	ldrb	r2, [r6, #5]
    5542:	72c2      	strb	r2, [r0, #11]
    5544:	791b      	ldrb	r3, [r3, #4]
    5546:	2207      	movs	r2, #7
    5548:	7303      	strb	r3, [r0, #12]
    554a:	79b3      	ldrb	r3, [r6, #6]
    554c:	7343      	strb	r3, [r0, #13]
    554e:	79f3      	ldrb	r3, [r6, #7]
    5550:	7383      	strb	r3, [r0, #14]
    5552:	0028      	movs	r0, r5
    5554:	3010      	adds	r0, #16
    5556:	f00a fafa 	bl	fb4e <memcpy>
    555a:	0021      	movs	r1, r4
    555c:	0028      	movs	r0, r5
    555e:	f7fe fdd3 	bl	4108 <smpSendPkt>
    5562:	bd70      	pop	{r4, r5, r6, pc}
    5564:	1000108c 	.word	0x1000108c

00005568 <smpiActCheckSecurityReq>:
    5568:	0003      	movs	r3, r0
    556a:	b510      	push	{r4, lr}
    556c:	332b      	adds	r3, #43	; 0x2b
    556e:	781a      	ldrb	r2, [r3, #0]
    5570:	2a00      	cmp	r2, #0
    5572:	d004      	beq.n	557e <smpiActCheckSecurityReq+0x16>
    5574:	2200      	movs	r2, #0
    5576:	701a      	strb	r2, [r3, #0]
    5578:	78c9      	ldrb	r1, [r1, #3]
    557a:	f7ff fd02 	bl	4f82 <smpSendPairingFailed>
    557e:	bd10      	pop	{r4, pc}

00005580 <smpiActProcSecurityReq>:
    5580:	0003      	movs	r3, r0
    5582:	b507      	push	{r0, r1, r2, lr}
    5584:	2201      	movs	r2, #1
    5586:	332b      	adds	r3, #43	; 0x2b
    5588:	701a      	strb	r2, [r3, #0]
    558a:	466a      	mov	r2, sp
    558c:	684b      	ldr	r3, [r1, #4]
    558e:	302d      	adds	r0, #45	; 0x2d
    5590:	7a5b      	ldrb	r3, [r3, #9]
    5592:	7113      	strb	r3, [r2, #4]
    5594:	7803      	ldrb	r3, [r0, #0]
    5596:	4668      	mov	r0, sp
    5598:	8013      	strh	r3, [r2, #0]
    559a:	2332      	movs	r3, #50	; 0x32
    559c:	7093      	strb	r3, [r2, #2]
    559e:	f7fe f8cd 	bl	373c <DmSmpCbackExec>
    55a2:	bd07      	pop	{r0, r1, r2, pc}

000055a4 <smpiActProcPairRsp>:
    55a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    55a6:	684e      	ldr	r6, [r1, #4]
    55a8:	000d      	movs	r5, r1
    55aa:	0031      	movs	r1, r6
    55ac:	0004      	movs	r4, r0
    55ae:	2207      	movs	r2, #7
    55b0:	3017      	adds	r0, #23
    55b2:	3108      	adds	r1, #8
    55b4:	f00a facb 	bl	fb4e <memcpy>
    55b8:	7d62      	ldrb	r2, [r4, #21]
    55ba:	7b73      	ldrb	r3, [r6, #13]
    55bc:	4393      	bics	r3, r2
    55be:	d103      	bne.n	55c8 <smpiActProcPairRsp+0x24>
    55c0:	7da2      	ldrb	r2, [r4, #22]
    55c2:	7bb3      	ldrb	r3, [r6, #14]
    55c4:	4393      	bics	r3, r2
    55c6:	d008      	beq.n	55da <smpiActProcPairRsp+0x36>
    55c8:	230a      	movs	r3, #10
    55ca:	70eb      	strb	r3, [r5, #3]
    55cc:	3b07      	subs	r3, #7
    55ce:	70ab      	strb	r3, [r5, #2]
    55d0:	0029      	movs	r1, r5
    55d2:	0020      	movs	r0, r4
    55d4:	f7ff fec7 	bl	5366 <smpSmExecute>
    55d8:	e013      	b.n	5602 <smpiActProcPairRsp+0x5e>
    55da:	466b      	mov	r3, sp
    55dc:	1ddf      	adds	r7, r3, #7
    55de:	1d9e      	adds	r6, r3, #6
    55e0:	23e6      	movs	r3, #230	; 0xe6
    55e2:	4d08      	ldr	r5, [pc, #32]	; (5604 <smpiActProcPairRsp+0x60>)
    55e4:	005b      	lsls	r3, r3, #1
    55e6:	58eb      	ldr	r3, [r5, r3]
    55e8:	003a      	movs	r2, r7
    55ea:	0031      	movs	r1, r6
    55ec:	0020      	movs	r0, r4
    55ee:	4798      	blx	r3
    55f0:	2800      	cmp	r0, #0
    55f2:	d006      	beq.n	5602 <smpiActProcPairRsp+0x5e>
    55f4:	23e8      	movs	r3, #232	; 0xe8
    55f6:	005b      	lsls	r3, r3, #1
    55f8:	783a      	ldrb	r2, [r7, #0]
    55fa:	7831      	ldrb	r1, [r6, #0]
    55fc:	58eb      	ldr	r3, [r5, r3]
    55fe:	0020      	movs	r0, r4
    5600:	4798      	blx	r3
    5602:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    5604:	10001818 	.word	0x10001818

00005608 <smpiActProcPairCnf>:
    5608:	b570      	push	{r4, r5, r6, lr}
    560a:	0004      	movs	r4, r0
    560c:	6849      	ldr	r1, [r1, #4]
    560e:	6a00      	ldr	r0, [r0, #32]
    5610:	3109      	adds	r1, #9
    5612:	2210      	movs	r2, #16
    5614:	3020      	adds	r0, #32
    5616:	f00a fa9a 	bl	fb4e <memcpy>
    561a:	0023      	movs	r3, r4
    561c:	2604      	movs	r6, #4
    561e:	332f      	adds	r3, #47	; 0x2f
    5620:	701e      	strb	r6, [r3, #0]
    5622:	0020      	movs	r0, r4
    5624:	f7ff fc82 	bl	4f2c <smpStartRspTimer>
    5628:	2019      	movs	r0, #25
    562a:	f7fe fdbd 	bl	41a8 <smpMsgAlloc>
    562e:	1e05      	subs	r5, r0, #0
    5630:	d00a      	beq.n	5648 <smpiActProcPairCnf+0x40>
    5632:	7206      	strb	r6, [r0, #8]
    5634:	6a21      	ldr	r1, [r4, #32]
    5636:	3009      	adds	r0, #9
    5638:	3130      	adds	r1, #48	; 0x30
    563a:	2210      	movs	r2, #16
    563c:	f00a fa87 	bl	fb4e <memcpy>
    5640:	0029      	movs	r1, r5
    5642:	0020      	movs	r0, r4
    5644:	f7fe fd60 	bl	4108 <smpSendPkt>
    5648:	bd70      	pop	{r4, r5, r6, pc}

0000564a <smpiActCnfVerify>:
    564a:	b570      	push	{r4, r5, r6, lr}
    564c:	6a06      	ldr	r6, [r0, #32]
    564e:	000c      	movs	r4, r1
    5650:	0031      	movs	r1, r6
    5652:	0005      	movs	r5, r0
    5654:	3120      	adds	r1, #32
    5656:	2210      	movs	r2, #16
    5658:	6860      	ldr	r0, [r4, #4]
    565a:	f00a fa69 	bl	fb30 <memcmp>
    565e:	2800      	cmp	r0, #0
    5660:	d01c      	beq.n	569c <smpiActCnfVerify+0x52>
    5662:	002b      	movs	r3, r5
    5664:	332b      	adds	r3, #43	; 0x2b
    5666:	781b      	ldrb	r3, [r3, #0]
    5668:	2b00      	cmp	r3, #0
    566a:	d00e      	beq.n	568a <smpiActCnfVerify+0x40>
    566c:	002a      	movs	r2, r5
    566e:	3232      	adds	r2, #50	; 0x32
    5670:	7813      	ldrb	r3, [r2, #0]
    5672:	3301      	adds	r3, #1
    5674:	b2db      	uxtb	r3, r3
    5676:	7013      	strb	r3, [r2, #0]
    5678:	4a0d      	ldr	r2, [pc, #52]	; (56b0 <smpiActCnfVerify+0x66>)
    567a:	6812      	ldr	r2, [r2, #0]
    567c:	7952      	ldrb	r2, [r2, #5]
    567e:	429a      	cmp	r2, r3
    5680:	d103      	bne.n	568a <smpiActCnfVerify+0x40>
    5682:	2309      	movs	r3, #9
    5684:	70e3      	strb	r3, [r4, #3]
    5686:	3304      	adds	r3, #4
    5688:	e002      	b.n	5690 <smpiActCnfVerify+0x46>
    568a:	2304      	movs	r3, #4
    568c:	70e3      	strb	r3, [r4, #3]
    568e:	3b01      	subs	r3, #1
    5690:	70a3      	strb	r3, [r4, #2]
    5692:	0021      	movs	r1, r4
    5694:	0028      	movs	r0, r5
    5696:	f7ff fe66 	bl	5366 <smpSmExecute>
    569a:	e007      	b.n	56ac <smpiActCnfVerify+0x62>
    569c:	0033      	movs	r3, r6
    569e:	0032      	movs	r2, r6
    56a0:	3330      	adds	r3, #48	; 0x30
    56a2:	3210      	adds	r2, #16
    56a4:	0031      	movs	r1, r6
    56a6:	0028      	movs	r0, r5
    56a8:	f7fe fcd4 	bl	4054 <smpCalcS1>
    56ac:	bd70      	pop	{r4, r5, r6, pc}
    56ae:	46c0      	nop			; (mov r8, r8)
    56b0:	1000108c 	.word	0x1000108c

000056b4 <smpiActStkEncrypt>:
    56b4:	b530      	push	{r4, r5, lr}
    56b6:	7ec2      	ldrb	r2, [r0, #27]
    56b8:	7d03      	ldrb	r3, [r0, #20]
    56ba:	b085      	sub	sp, #20
    56bc:	0005      	movs	r5, r0
    56be:	1c14      	adds	r4, r2, #0
    56c0:	429a      	cmp	r2, r3
    56c2:	d900      	bls.n	56c6 <smpiActStkEncrypt+0x12>
    56c4:	1c1c      	adds	r4, r3, #0
    56c6:	b2e4      	uxtb	r4, r4
    56c8:	0022      	movs	r2, r4
    56ca:	6849      	ldr	r1, [r1, #4]
    56cc:	4668      	mov	r0, sp
    56ce:	f00a fa3e 	bl	fb4e <memcpy>
    56d2:	0020      	movs	r0, r4
    56d4:	2210      	movs	r2, #16
    56d6:	4468      	add	r0, sp
    56d8:	1b12      	subs	r2, r2, r4
    56da:	2100      	movs	r1, #0
    56dc:	f00a fa5c 	bl	fb98 <memset>
    56e0:	002b      	movs	r3, r5
    56e2:	3330      	adds	r3, #48	; 0x30
    56e4:	7819      	ldrb	r1, [r3, #0]
    56e6:	352d      	adds	r5, #45	; 0x2d
    56e8:	0749      	lsls	r1, r1, #29
    56ea:	0fc9      	lsrs	r1, r1, #31
    56ec:	3101      	adds	r1, #1
    56ee:	7828      	ldrb	r0, [r5, #0]
    56f0:	466a      	mov	r2, sp
    56f2:	f7ff fbd3 	bl	4e9c <DmSmpEncryptReq>
    56f6:	b005      	add	sp, #20
    56f8:	bd30      	pop	{r4, r5, pc}

000056fa <smpiActSetupKeyDist>:
    56fa:	b570      	push	{r4, r5, r6, lr}
    56fc:	0004      	movs	r4, r0
    56fe:	000d      	movs	r5, r1
    5700:	f7ff fc14 	bl	4f2c <smpStartRspTimer>
    5704:	0023      	movs	r3, r4
    5706:	332d      	adds	r3, #45	; 0x2d
    5708:	781b      	ldrb	r3, [r3, #0]
    570a:	6a22      	ldr	r2, [r4, #32]
    570c:	8013      	strh	r3, [r2, #0]
    570e:	0023      	movs	r3, r4
    5710:	3330      	adds	r3, #48	; 0x30
    5712:	781b      	ldrb	r3, [r3, #0]
    5714:	6a22      	ldr	r2, [r4, #32]
    5716:	075b      	lsls	r3, r3, #29
    5718:	0fdb      	lsrs	r3, r3, #31
    571a:	3301      	adds	r3, #1
    571c:	77d3      	strb	r3, [r2, #31]
    571e:	7ee0      	ldrb	r0, [r4, #27]
    5720:	7d21      	ldrb	r1, [r4, #20]
    5722:	6a23      	ldr	r3, [r4, #32]
    5724:	1c02      	adds	r2, r0, #0
    5726:	4288      	cmp	r0, r1
    5728:	d900      	bls.n	572c <smpiActSetupKeyDist+0x32>
    572a:	1c0a      	adds	r2, r1, #0
    572c:	3301      	adds	r3, #1
    572e:	77da      	strb	r2, [r3, #31]
    5730:	0022      	movs	r2, r4
    5732:	2300      	movs	r3, #0
    5734:	322f      	adds	r2, #47	; 0x2f
    5736:	7013      	strb	r3, [r2, #0]
    5738:	7da3      	ldrb	r3, [r4, #22]
    573a:	7f61      	ldrb	r1, [r4, #29]
    573c:	400b      	ands	r3, r1
    573e:	07d9      	lsls	r1, r3, #31
    5740:	d50f      	bpl.n	5762 <smpiActSetupKeyDist+0x68>
    5742:	21ea      	movs	r1, #234	; 0xea
    5744:	480f      	ldr	r0, [pc, #60]	; (5784 <smpiActSetupKeyDist+0x8a>)
    5746:	0049      	lsls	r1, r1, #1
    5748:	5c41      	ldrb	r1, [r0, r1]
    574a:	2900      	cmp	r1, #0
    574c:	d007      	beq.n	575e <smpiActSetupKeyDist+0x64>
    574e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5750:	7809      	ldrb	r1, [r1, #0]
    5752:	2900      	cmp	r1, #0
    5754:	d003      	beq.n	575e <smpiActSetupKeyDist+0x64>
    5756:	079b      	lsls	r3, r3, #30
    5758:	d509      	bpl.n	576e <smpiActSetupKeyDist+0x74>
    575a:	2308      	movs	r3, #8
    575c:	e006      	b.n	576c <smpiActSetupKeyDist+0x72>
    575e:	2306      	movs	r3, #6
    5760:	e004      	b.n	576c <smpiActSetupKeyDist+0x72>
    5762:	0799      	lsls	r1, r3, #30
    5764:	d4f9      	bmi.n	575a <smpiActSetupKeyDist+0x60>
    5766:	075b      	lsls	r3, r3, #29
    5768:	d501      	bpl.n	576e <smpiActSetupKeyDist+0x74>
    576a:	230a      	movs	r3, #10
    576c:	7013      	strb	r3, [r2, #0]
    576e:	7813      	ldrb	r3, [r2, #0]
    5770:	2b00      	cmp	r3, #0
    5772:	d105      	bne.n	5780 <smpiActSetupKeyDist+0x86>
    5774:	330c      	adds	r3, #12
    5776:	70ab      	strb	r3, [r5, #2]
    5778:	0029      	movs	r1, r5
    577a:	0020      	movs	r0, r4
    577c:	f7ff fdf3 	bl	5366 <smpSmExecute>
    5780:	bd70      	pop	{r4, r5, r6, pc}
    5782:	46c0      	nop			; (mov r8, r8)
    5784:	10001818 	.word	0x10001818

00005788 <smpiActRcvKey>:
    5788:	b570      	push	{r4, r5, r6, lr}
    578a:	7f42      	ldrb	r2, [r0, #29]
    578c:	7d83      	ldrb	r3, [r0, #22]
    578e:	000d      	movs	r5, r1
    5790:	4013      	ands	r3, r2
    5792:	684a      	ldr	r2, [r1, #4]
    5794:	6a01      	ldr	r1, [r0, #32]
    5796:	0004      	movs	r4, r0
    5798:	f7ff fd44 	bl	5224 <smpProcRcvKey>
    579c:	2800      	cmp	r0, #0
    579e:	d009      	beq.n	57b4 <smpiActRcvKey+0x2c>
    57a0:	0023      	movs	r3, r4
    57a2:	2200      	movs	r2, #0
    57a4:	332f      	adds	r3, #47	; 0x2f
    57a6:	701a      	strb	r2, [r3, #0]
    57a8:	230c      	movs	r3, #12
    57aa:	0029      	movs	r1, r5
    57ac:	70ab      	strb	r3, [r5, #2]
    57ae:	0020      	movs	r0, r4
    57b0:	f7ff fdd9 	bl	5366 <smpSmExecute>
    57b4:	bd70      	pop	{r4, r5, r6, pc}

000057b6 <smpiActSendKey>:
    57b6:	b570      	push	{r4, r5, r6, lr}
    57b8:	000d      	movs	r5, r1
    57ba:	7d43      	ldrb	r3, [r0, #21]
    57bc:	7f01      	ldrb	r1, [r0, #28]
    57be:	0004      	movs	r4, r0
    57c0:	4019      	ands	r1, r3
    57c2:	f7ff fc65 	bl	5090 <smpSendKey>
    57c6:	2800      	cmp	r0, #0
    57c8:	d005      	beq.n	57d6 <smpiActSendKey+0x20>
    57ca:	230e      	movs	r3, #14
    57cc:	0029      	movs	r1, r5
    57ce:	70ab      	strb	r3, [r5, #2]
    57d0:	0020      	movs	r0, r4
    57d2:	f7ff fdc8 	bl	5366 <smpSmExecute>
    57d6:	bd70      	pop	{r4, r5, r6, pc}

000057d8 <smpiScActAuthSelect>:
    57d8:	b510      	push	{r4, lr}
    57da:	f7ff f8ff 	bl	49dc <smpScActAuthSelect>
    57de:	bd10      	pop	{r4, pc}

000057e0 <smpiScActSendPubKey>:
    57e0:	0003      	movs	r3, r0
    57e2:	220c      	movs	r2, #12
    57e4:	b510      	push	{r4, lr}
    57e6:	332f      	adds	r3, #47	; 0x2f
    57e8:	701a      	strb	r2, [r3, #0]
    57ea:	f7fe fe43 	bl	4474 <smpScSendPubKey>
    57ee:	bd10      	pop	{r4, pc}

000057f0 <smpiScActJwncSetup>:
    57f0:	b570      	push	{r4, r5, r6, lr}
    57f2:	0004      	movs	r4, r0
    57f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    57f6:	2110      	movs	r1, #16
    57f8:	68d8      	ldr	r0, [r3, #12]
    57fa:	f005 f9b3 	bl	ab64 <SecRand>
    57fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5800:	4d07      	ldr	r5, [pc, #28]	; (5820 <smpiScActJwncSetup+0x30>)
    5802:	68d8      	ldr	r0, [r3, #12]
    5804:	0029      	movs	r1, r5
    5806:	3020      	adds	r0, #32
    5808:	f007 fb83 	bl	cf12 <Calc128Cpy>
    580c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    580e:	0029      	movs	r1, r5
    5810:	68d8      	ldr	r0, [r3, #12]
    5812:	342f      	adds	r4, #47	; 0x2f
    5814:	3030      	adds	r0, #48	; 0x30
    5816:	f007 fb7c 	bl	cf12 <Calc128Cpy>
    581a:	2303      	movs	r3, #3
    581c:	7023      	strb	r3, [r4, #0]
    581e:	bd70      	pop	{r4, r5, r6, pc}
    5820:	00012fcc 	.word	0x00012fcc

00005824 <smpiScActJwncCalcF4>:
    5824:	b570      	push	{r4, r5, r6, lr}
    5826:	000d      	movs	r5, r1
    5828:	0004      	movs	r4, r0
    582a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    582c:	6849      	ldr	r1, [r1, #4]
    582e:	68d8      	ldr	r0, [r3, #12]
    5830:	2210      	movs	r2, #16
    5832:	3109      	adds	r1, #9
    5834:	3010      	adds	r0, #16
    5836:	f007 fba7 	bl	cf88 <WStrReverseCpy>
    583a:	0029      	movs	r1, r5
    583c:	0020      	movs	r0, r4
    583e:	f7ff f912 	bl	4a66 <smpScActJwncCalcF4>
    5842:	bd70      	pop	{r4, r5, r6, pc}

00005844 <smpiScActJwncCalcG2>:
    5844:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5846:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5848:	0004      	movs	r4, r0
    584a:	68d8      	ldr	r0, [r3, #12]
    584c:	000d      	movs	r5, r1
    584e:	3040      	adds	r0, #64	; 0x40
    5850:	2210      	movs	r2, #16
    5852:	6849      	ldr	r1, [r1, #4]
    5854:	f00a f96c 	bl	fb30 <memcmp>
    5858:	2800      	cmp	r0, #0
    585a:	d00c      	beq.n	5876 <smpiScActJwncCalcG2+0x32>
    585c:	0023      	movs	r3, r4
    585e:	332d      	adds	r3, #45	; 0x2d
    5860:	781b      	ldrb	r3, [r3, #0]
    5862:	a901      	add	r1, sp, #4
    5864:	800b      	strh	r3, [r1, #0]
    5866:	2304      	movs	r3, #4
    5868:	0020      	movs	r0, r4
    586a:	70cb      	strb	r3, [r1, #3]
    586c:	3b01      	subs	r3, #1
    586e:	708b      	strb	r3, [r1, #2]
    5870:	f7ff fd79 	bl	5366 <smpSmExecute>
    5874:	e003      	b.n	587e <smpiScActJwncCalcG2+0x3a>
    5876:	0029      	movs	r1, r5
    5878:	0020      	movs	r0, r4
    587a:	f7ff f917 	bl	4aac <smpScActJwncCalcG2>
    587e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

00005880 <smpiScActPkCalcCa>:
    5880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5882:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5884:	0004      	movs	r4, r0
    5886:	78da      	ldrb	r2, [r3, #3]
    5888:	000d      	movs	r5, r1
    588a:	2a00      	cmp	r2, #0
    588c:	d11d      	bne.n	58ca <smpiScActPkCalcCa+0x4a>
    588e:	4e1b      	ldr	r6, [pc, #108]	; (58fc <smpiScActPkCalcCa+0x7c>)
    5890:	68d8      	ldr	r0, [r3, #12]
    5892:	0031      	movs	r1, r6
    5894:	3020      	adds	r0, #32
    5896:	f007 fb3c 	bl	cf12 <Calc128Cpy>
    589a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    589c:	0031      	movs	r1, r6
    589e:	68d8      	ldr	r0, [r3, #12]
    58a0:	3030      	adds	r0, #48	; 0x30
    58a2:	f007 fb36 	bl	cf12 <Calc128Cpy>
    58a6:	7d2a      	ldrb	r2, [r5, #20]
    58a8:	2a03      	cmp	r2, #3
    58aa:	d80e      	bhi.n	58ca <smpiScActPkCalcCa+0x4a>
    58ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
    58ae:	1d2e      	adds	r6, r5, #4
    58b0:	68d8      	ldr	r0, [r3, #12]
    58b2:	b292      	uxth	r2, r2
    58b4:	302d      	adds	r0, #45	; 0x2d
    58b6:	0031      	movs	r1, r6
    58b8:	f007 fb66 	bl	cf88 <WStrReverseCpy>
    58bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    58be:	7d2a      	ldrb	r2, [r5, #20]
    58c0:	68d8      	ldr	r0, [r3, #12]
    58c2:	0031      	movs	r1, r6
    58c4:	303d      	adds	r0, #61	; 0x3d
    58c6:	f007 fb5f 	bl	cf88 <WStrReverseCpy>
    58ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
    58cc:	2110      	movs	r1, #16
    58ce:	68d8      	ldr	r0, [r3, #12]
    58d0:	f005 f948 	bl	ab64 <SecRand>
    58d4:	f7fe f8b8 	bl	3a48 <DmSecGetEccKey>
    58d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    58da:	0006      	movs	r6, r0
    58dc:	0020      	movs	r0, r4
    58de:	689f      	ldr	r7, [r3, #8]
    58e0:	f7fe fe72 	bl	45c8 <smpGetPkBit>
    58e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    58e6:	0032      	movs	r2, r6
    58e8:	68db      	ldr	r3, [r3, #12]
    58ea:	0029      	movs	r1, r5
    58ec:	9301      	str	r3, [sp, #4]
    58ee:	9000      	str	r0, [sp, #0]
    58f0:	003b      	movs	r3, r7
    58f2:	0020      	movs	r0, r4
    58f4:	f7fe fd68 	bl	43c8 <SmpScCalcF4>
    58f8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    58fa:	46c0      	nop			; (mov r8, r8)
    58fc:	00012fcc 	.word	0x00012fcc

00005900 <smpiScActPkCalcCb>:
    5900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5902:	0004      	movs	r4, r0
    5904:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5906:	000d      	movs	r5, r1
    5908:	68d8      	ldr	r0, [r3, #12]
    590a:	6849      	ldr	r1, [r1, #4]
    590c:	2210      	movs	r2, #16
    590e:	3109      	adds	r1, #9
    5910:	3010      	adds	r0, #16
    5912:	f007 fb39 	bl	cf88 <WStrReverseCpy>
    5916:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5918:	689e      	ldr	r6, [r3, #8]
    591a:	f7fe f895 	bl	3a48 <DmSecGetEccKey>
    591e:	0007      	movs	r7, r0
    5920:	0020      	movs	r0, r4
    5922:	f7fe fe51 	bl	45c8 <smpGetPkBit>
    5926:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5928:	0032      	movs	r2, r6
    592a:	68db      	ldr	r3, [r3, #12]
    592c:	0029      	movs	r1, r5
    592e:	3310      	adds	r3, #16
    5930:	9301      	str	r3, [sp, #4]
    5932:	9000      	str	r0, [sp, #0]
    5934:	003b      	movs	r3, r7
    5936:	0020      	movs	r0, r4
    5938:	f7fe fd46 	bl	43c8 <SmpScCalcF4>
    593c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0000593e <smpiScActPkSendCnf>:
    593e:	b510      	push	{r4, lr}
    5940:	684a      	ldr	r2, [r1, #4]
    5942:	f7fe fe1a 	bl	457a <smpScSendPairCnf>
    5946:	bd10      	pop	{r4, pc}

00005948 <smpiScActPkSendRand>:
    5948:	b570      	push	{r4, r5, r6, lr}
    594a:	0004      	movs	r4, r0
    594c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    594e:	000d      	movs	r5, r1
    5950:	68d8      	ldr	r0, [r3, #12]
    5952:	6849      	ldr	r1, [r1, #4]
    5954:	3040      	adds	r0, #64	; 0x40
    5956:	3109      	adds	r1, #9
    5958:	2210      	movs	r2, #16
    595a:	f007 fb15 	bl	cf88 <WStrReverseCpy>
    595e:	0023      	movs	r3, r4
    5960:	2204      	movs	r2, #4
    5962:	332f      	adds	r3, #47	; 0x2f
    5964:	701a      	strb	r2, [r3, #0]
    5966:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5968:	0029      	movs	r1, r5
    596a:	68da      	ldr	r2, [r3, #12]
    596c:	0020      	movs	r0, r4
    596e:	f7fe fddc 	bl	452a <smpScSendRand>
    5972:	bd70      	pop	{r4, r5, r6, pc}

00005974 <smpiScActJwncSendRand>:
    5974:	b510      	push	{r4, lr}
    5976:	f7ff ffe7 	bl	5948 <smpiScActPkSendRand>
    597a:	bd10      	pop	{r4, pc}

0000597c <smpiScActPkCheck>:
    597c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    597e:	0004      	movs	r4, r0
    5980:	6b45      	ldr	r5, [r0, #52]	; 0x34
    5982:	2210      	movs	r2, #16
    5984:	68e8      	ldr	r0, [r5, #12]
    5986:	6849      	ldr	r1, [r1, #4]
    5988:	3040      	adds	r0, #64	; 0x40
    598a:	f00a f8d1 	bl	fb30 <memcmp>
    598e:	0022      	movs	r2, r4
    5990:	a901      	add	r1, sp, #4
    5992:	322d      	adds	r2, #45	; 0x2d
    5994:	2800      	cmp	r0, #0
    5996:	d006      	beq.n	59a6 <smpiScActPkCheck+0x2a>
    5998:	7813      	ldrb	r3, [r2, #0]
    599a:	800b      	strh	r3, [r1, #0]
    599c:	2304      	movs	r3, #4
    599e:	70cb      	strb	r3, [r1, #3]
    59a0:	3b01      	subs	r3, #1
    59a2:	708b      	strb	r3, [r1, #2]
    59a4:	e00f      	b.n	59c6 <smpiScActPkCheck+0x4a>
    59a6:	78eb      	ldrb	r3, [r5, #3]
    59a8:	3301      	adds	r3, #1
    59aa:	b2db      	uxtb	r3, r3
    59ac:	70eb      	strb	r3, [r5, #3]
    59ae:	2b13      	cmp	r3, #19
    59b0:	d901      	bls.n	59b6 <smpiScActPkCheck+0x3a>
    59b2:	231a      	movs	r3, #26
    59b4:	e004      	b.n	59c0 <smpiScActPkCheck+0x44>
    59b6:	0023      	movs	r3, r4
    59b8:	2003      	movs	r0, #3
    59ba:	332f      	adds	r3, #47	; 0x2f
    59bc:	7018      	strb	r0, [r3, #0]
    59be:	2319      	movs	r3, #25
    59c0:	708b      	strb	r3, [r1, #2]
    59c2:	7813      	ldrb	r3, [r2, #0]
    59c4:	800b      	strh	r3, [r1, #0]
    59c6:	0020      	movs	r0, r4
    59c8:	f7ff fccd 	bl	5366 <smpSmExecute>
    59cc:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

000059ce <smpiScActOobCalcCb>:
    59ce:	b530      	push	{r4, r5, lr}
    59d0:	7c83      	ldrb	r3, [r0, #18]
    59d2:	b085      	sub	sp, #20
    59d4:	0004      	movs	r4, r0
    59d6:	000d      	movs	r5, r1
    59d8:	2b01      	cmp	r3, #1
    59da:	d005      	beq.n	59e8 <smpiScActOobCalcCb+0x1a>
    59dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    59de:	4913      	ldr	r1, [pc, #76]	; (5a2c <smpiScActOobCalcCb+0x5e>)
    59e0:	68d8      	ldr	r0, [r3, #12]
    59e2:	3020      	adds	r0, #32
    59e4:	f007 fa95 	bl	cf12 <Calc128Cpy>
    59e8:	7e62      	ldrb	r2, [r4, #25]
    59ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
    59ec:	2a01      	cmp	r2, #1
    59ee:	d10b      	bne.n	5a08 <smpiScActOobCalcCb+0x3a>
    59f0:	689a      	ldr	r2, [r3, #8]
    59f2:	68db      	ldr	r3, [r3, #12]
    59f4:	0029      	movs	r1, r5
    59f6:	3330      	adds	r3, #48	; 0x30
    59f8:	9301      	str	r3, [sp, #4]
    59fa:	2300      	movs	r3, #0
    59fc:	0020      	movs	r0, r4
    59fe:	9300      	str	r3, [sp, #0]
    5a00:	0013      	movs	r3, r2
    5a02:	f7fe fce1 	bl	43c8 <SmpScCalcF4>
    5a06:	e00e      	b.n	5a26 <smpiScActOobCalcCb+0x58>
    5a08:	68d8      	ldr	r0, [r3, #12]
    5a0a:	4908      	ldr	r1, [pc, #32]	; (5a2c <smpiScActOobCalcCb+0x5e>)
    5a0c:	3030      	adds	r0, #48	; 0x30
    5a0e:	f007 fa80 	bl	cf12 <Calc128Cpy>
    5a12:	0023      	movs	r3, r4
    5a14:	332d      	adds	r3, #45	; 0x2d
    5a16:	781b      	ldrb	r3, [r3, #0]
    5a18:	a903      	add	r1, sp, #12
    5a1a:	800b      	strh	r3, [r1, #0]
    5a1c:	231b      	movs	r3, #27
    5a1e:	0020      	movs	r0, r4
    5a20:	708b      	strb	r3, [r1, #2]
    5a22:	f7ff fca0 	bl	5366 <smpSmExecute>
    5a26:	b005      	add	sp, #20
    5a28:	bd30      	pop	{r4, r5, pc}
    5a2a:	46c0      	nop			; (mov r8, r8)
    5a2c:	00012fcc 	.word	0x00012fcc

00005a30 <smpiScActOobSendRand>:
    5a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5a32:	7e43      	ldrb	r3, [r0, #25]
    5a34:	0004      	movs	r4, r0
    5a36:	000d      	movs	r5, r1
    5a38:	2b01      	cmp	r3, #1
    5a3a:	d115      	bne.n	5a68 <smpiScActOobSendRand+0x38>
    5a3c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5a3e:	2210      	movs	r2, #16
    5a40:	68d8      	ldr	r0, [r3, #12]
    5a42:	6849      	ldr	r1, [r1, #4]
    5a44:	3040      	adds	r0, #64	; 0x40
    5a46:	f00a f873 	bl	fb30 <memcmp>
    5a4a:	2800      	cmp	r0, #0
    5a4c:	d00c      	beq.n	5a68 <smpiScActOobSendRand+0x38>
    5a4e:	0023      	movs	r3, r4
    5a50:	332d      	adds	r3, #45	; 0x2d
    5a52:	781b      	ldrb	r3, [r3, #0]
    5a54:	a901      	add	r1, sp, #4
    5a56:	800b      	strh	r3, [r1, #0]
    5a58:	2304      	movs	r3, #4
    5a5a:	0020      	movs	r0, r4
    5a5c:	70cb      	strb	r3, [r1, #3]
    5a5e:	3b01      	subs	r3, #1
    5a60:	708b      	strb	r3, [r1, #2]
    5a62:	f7ff fc80 	bl	5366 <smpSmExecute>
    5a66:	e00e      	b.n	5a86 <smpiScActOobSendRand+0x56>
    5a68:	0023      	movs	r3, r4
    5a6a:	2204      	movs	r2, #4
    5a6c:	332f      	adds	r3, #47	; 0x2f
    5a6e:	701a      	strb	r2, [r3, #0]
    5a70:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5a72:	2110      	movs	r1, #16
    5a74:	68d8      	ldr	r0, [r3, #12]
    5a76:	f005 f875 	bl	ab64 <SecRand>
    5a7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5a7c:	0029      	movs	r1, r5
    5a7e:	68da      	ldr	r2, [r3, #12]
    5a80:	0020      	movs	r0, r4
    5a82:	f7fe fd52 	bl	452a <smpScSendRand>
    5a86:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

00005a88 <smpiScActOobProcRand>:
    5a88:	b570      	push	{r4, r5, r6, lr}
    5a8a:	000d      	movs	r5, r1
    5a8c:	0004      	movs	r4, r0
    5a8e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5a90:	6849      	ldr	r1, [r1, #4]
    5a92:	68d8      	ldr	r0, [r3, #12]
    5a94:	2210      	movs	r2, #16
    5a96:	3109      	adds	r1, #9
    5a98:	3010      	adds	r0, #16
    5a9a:	f007 fa75 	bl	cf88 <WStrReverseCpy>
    5a9e:	0029      	movs	r1, r5
    5aa0:	0020      	movs	r0, r4
    5aa2:	f7ff f88d 	bl	4bc0 <smpScActCalcSharedSecret>
    5aa6:	bd70      	pop	{r4, r5, r6, pc}

00005aa8 <smpiScActDHKeyCheckSend>:
    5aa8:	b570      	push	{r4, r5, r6, lr}
    5aaa:	0004      	movs	r4, r0
    5aac:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5aae:	000d      	movs	r5, r1
    5ab0:	68d8      	ldr	r0, [r3, #12]
    5ab2:	2210      	movs	r2, #16
    5ab4:	3010      	adds	r0, #16
    5ab6:	6849      	ldr	r1, [r1, #4]
    5ab8:	f007 fa66 	bl	cf88 <WStrReverseCpy>
    5abc:	0023      	movs	r3, r4
    5abe:	220d      	movs	r2, #13
    5ac0:	332f      	adds	r3, #47	; 0x2f
    5ac2:	701a      	strb	r2, [r3, #0]
    5ac4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5ac6:	0029      	movs	r1, r5
    5ac8:	68da      	ldr	r2, [r3, #12]
    5aca:	0020      	movs	r0, r4
    5acc:	f7fe fd05 	bl	44da <smpScSendDHKeyCheck>
    5ad0:	bd70      	pop	{r4, r5, r6, pc}

00005ad2 <smpiScActDHKeyCheckVerify>:
    5ad2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    5ad4:	0004      	movs	r4, r0
    5ad6:	6b46      	ldr	r6, [r0, #52]	; 0x34
    5ad8:	6848      	ldr	r0, [r1, #4]
    5ada:	68f3      	ldr	r3, [r6, #12]
    5adc:	3009      	adds	r0, #9
    5ade:	3310      	adds	r3, #16
    5ae0:	2210      	movs	r2, #16
    5ae2:	0019      	movs	r1, r3
    5ae4:	0025      	movs	r5, r4
    5ae6:	f00a f823 	bl	fb30 <memcmp>
    5aea:	352d      	adds	r5, #45	; 0x2d
    5aec:	2800      	cmp	r0, #0
    5aee:	d119      	bne.n	5b24 <smpiScActDHKeyCheckVerify+0x52>
    5af0:	7d23      	ldrb	r3, [r4, #20]
    5af2:	7ee2      	ldrb	r2, [r4, #27]
    5af4:	1c14      	adds	r4, r2, #0
    5af6:	429a      	cmp	r2, r3
    5af8:	d900      	bls.n	5afc <smpiScActDHKeyCheckVerify+0x2a>
    5afa:	1c1c      	adds	r4, r3, #0
    5afc:	6931      	ldr	r1, [r6, #16]
    5afe:	b2e4      	uxtb	r4, r4
    5b00:	0022      	movs	r2, r4
    5b02:	3110      	adds	r1, #16
    5b04:	4668      	mov	r0, sp
    5b06:	f00a f822 	bl	fb4e <memcpy>
    5b0a:	0020      	movs	r0, r4
    5b0c:	2210      	movs	r2, #16
    5b0e:	4468      	add	r0, sp
    5b10:	1b12      	subs	r2, r2, r4
    5b12:	2100      	movs	r1, #0
    5b14:	f00a f840 	bl	fb98 <memset>
    5b18:	7828      	ldrb	r0, [r5, #0]
    5b1a:	466a      	mov	r2, sp
    5b1c:	2103      	movs	r1, #3
    5b1e:	f7ff f9bd 	bl	4e9c <DmSmpEncryptReq>
    5b22:	e00a      	b.n	5b3a <smpiScActDHKeyCheckVerify+0x68>
    5b24:	466a      	mov	r2, sp
    5b26:	782b      	ldrb	r3, [r5, #0]
    5b28:	4669      	mov	r1, sp
    5b2a:	8013      	strh	r3, [r2, #0]
    5b2c:	230b      	movs	r3, #11
    5b2e:	0020      	movs	r0, r4
    5b30:	70d3      	strb	r3, [r2, #3]
    5b32:	3311      	adds	r3, #17
    5b34:	7093      	strb	r3, [r2, #2]
    5b36:	f7ff fc16 	bl	5366 <smpSmExecute>
    5b3a:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

00005b3c <smprActSendSecurityReq>:
    5b3c:	0003      	movs	r3, r0
    5b3e:	2201      	movs	r2, #1
    5b40:	332b      	adds	r3, #43	; 0x2b
    5b42:	b570      	push	{r4, r5, r6, lr}
    5b44:	0004      	movs	r4, r0
    5b46:	701a      	strb	r2, [r3, #0]
    5b48:	200a      	movs	r0, #10
    5b4a:	000d      	movs	r5, r1
    5b4c:	f7fe fb2c 	bl	41a8 <smpMsgAlloc>
    5b50:	1e01      	subs	r1, r0, #0
    5b52:	d006      	beq.n	5b62 <smprActSendSecurityReq+0x26>
    5b54:	230b      	movs	r3, #11
    5b56:	7203      	strb	r3, [r0, #8]
    5b58:	792b      	ldrb	r3, [r5, #4]
    5b5a:	7243      	strb	r3, [r0, #9]
    5b5c:	0020      	movs	r0, r4
    5b5e:	f7fe fad3 	bl	4108 <smpSendPkt>
    5b62:	bd70      	pop	{r4, r5, r6, pc}

00005b64 <smprActCheckSecurityReq>:
    5b64:	0003      	movs	r3, r0
    5b66:	b510      	push	{r4, lr}
    5b68:	332b      	adds	r3, #43	; 0x2b
    5b6a:	781b      	ldrb	r3, [r3, #0]
    5b6c:	2b00      	cmp	r3, #0
    5b6e:	d001      	beq.n	5b74 <smprActCheckSecurityReq+0x10>
    5b70:	f7ff fa16 	bl	4fa0 <smpActPairingFailed>
    5b74:	bd10      	pop	{r4, pc}

00005b76 <smprActClearSecurityReq>:
    5b76:	2300      	movs	r3, #0
    5b78:	302b      	adds	r0, #43	; 0x2b
    5b7a:	7003      	strb	r3, [r0, #0]
    5b7c:	4770      	bx	lr

00005b7e <smprActProcPairReq>:
    5b7e:	6a03      	ldr	r3, [r0, #32]
    5b80:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5b82:	0004      	movs	r4, r0
    5b84:	000d      	movs	r5, r1
    5b86:	2b00      	cmp	r3, #0
    5b88:	d10e      	bne.n	5ba8 <smprActProcPairReq+0x2a>
    5b8a:	2040      	movs	r0, #64	; 0x40
    5b8c:	f005 f8b8 	bl	ad00 <WsfBufAlloc>
    5b90:	6220      	str	r0, [r4, #32]
    5b92:	2800      	cmp	r0, #0
    5b94:	d108      	bne.n	5ba8 <smprActProcPairReq+0x2a>
    5b96:	2308      	movs	r3, #8
    5b98:	70eb      	strb	r3, [r5, #3]
    5b9a:	3b05      	subs	r3, #5
    5b9c:	70ab      	strb	r3, [r5, #2]
    5b9e:	0029      	movs	r1, r5
    5ba0:	0020      	movs	r0, r4
    5ba2:	f7ff fbe0 	bl	5366 <smpSmExecute>
    5ba6:	e01e      	b.n	5be6 <smprActProcPairReq+0x68>
    5ba8:	0026      	movs	r6, r4
    5baa:	2201      	movs	r2, #1
    5bac:	362d      	adds	r6, #45	; 0x2d
    5bae:	0011      	movs	r1, r2
    5bb0:	7830      	ldrb	r0, [r6, #0]
    5bb2:	f7fd f9a3 	bl	2efc <DmConnSetIdle>
    5bb6:	686d      	ldr	r5, [r5, #4]
    5bb8:	0020      	movs	r0, r4
    5bba:	0029      	movs	r1, r5
    5bbc:	2207      	movs	r2, #7
    5bbe:	3010      	adds	r0, #16
    5bc0:	3108      	adds	r1, #8
    5bc2:	f009 ffc4 	bl	fb4e <memcpy>
    5bc6:	466a      	mov	r2, sp
    5bc8:	7aab      	ldrb	r3, [r5, #10]
    5bca:	4668      	mov	r0, sp
    5bcc:	7153      	strb	r3, [r2, #5]
    5bce:	7aeb      	ldrb	r3, [r5, #11]
    5bd0:	7113      	strb	r3, [r2, #4]
    5bd2:	7b6b      	ldrb	r3, [r5, #13]
    5bd4:	7193      	strb	r3, [r2, #6]
    5bd6:	7bab      	ldrb	r3, [r5, #14]
    5bd8:	71d3      	strb	r3, [r2, #7]
    5bda:	7833      	ldrb	r3, [r6, #0]
    5bdc:	8013      	strh	r3, [r2, #0]
    5bde:	2331      	movs	r3, #49	; 0x31
    5be0:	7093      	strb	r3, [r2, #2]
    5be2:	f7fd fdab 	bl	373c <DmSmpCbackExec>
    5be6:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

00005be8 <smprActSendPairRsp>:
    5be8:	2302      	movs	r3, #2
    5bea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5bec:	75c3      	strb	r3, [r0, #23]
    5bee:	4b21      	ldr	r3, [pc, #132]	; (5c74 <smprActSendPairRsp+0x8c>)
    5bf0:	000d      	movs	r5, r1
    5bf2:	681b      	ldr	r3, [r3, #0]
    5bf4:	4e20      	ldr	r6, [pc, #128]	; (5c78 <smprActSendPairRsp+0x90>)
    5bf6:	789a      	ldrb	r2, [r3, #2]
    5bf8:	0004      	movs	r4, r0
    5bfa:	7602      	strb	r2, [r0, #24]
    5bfc:	790a      	ldrb	r2, [r1, #4]
    5bfe:	7642      	strb	r2, [r0, #25]
    5c00:	794a      	ldrb	r2, [r1, #5]
    5c02:	7682      	strb	r2, [r0, #26]
    5c04:	791b      	ldrb	r3, [r3, #4]
    5c06:	76c3      	strb	r3, [r0, #27]
    5c08:	798b      	ldrb	r3, [r1, #6]
    5c0a:	7703      	strb	r3, [r0, #28]
    5c0c:	79cb      	ldrb	r3, [r1, #7]
    5c0e:	4669      	mov	r1, sp
    5c10:	7743      	strb	r3, [r0, #29]
    5c12:	466b      	mov	r3, sp
    5c14:	1ddf      	adds	r7, r3, #7
    5c16:	23e6      	movs	r3, #230	; 0xe6
    5c18:	005b      	lsls	r3, r3, #1
    5c1a:	58f3      	ldr	r3, [r6, r3]
    5c1c:	003a      	movs	r2, r7
    5c1e:	3106      	adds	r1, #6
    5c20:	4798      	blx	r3
    5c22:	2800      	cmp	r0, #0
    5c24:	d024      	beq.n	5c70 <smprActSendPairRsp+0x88>
    5c26:	796a      	ldrb	r2, [r5, #5]
    5c28:	7ce3      	ldrb	r3, [r4, #19]
    5c2a:	4013      	ands	r3, r2
    5c2c:	0022      	movs	r2, r4
    5c2e:	322f      	adds	r2, #47	; 0x2f
    5c30:	071b      	lsls	r3, r3, #28
    5c32:	d501      	bpl.n	5c38 <smprActSendPairRsp+0x50>
    5c34:	230c      	movs	r3, #12
    5c36:	e000      	b.n	5c3a <smprActSendPairRsp+0x52>
    5c38:	2303      	movs	r3, #3
    5c3a:	7013      	strb	r3, [r2, #0]
    5c3c:	0020      	movs	r0, r4
    5c3e:	f7ff f975 	bl	4f2c <smpStartRspTimer>
    5c42:	200f      	movs	r0, #15
    5c44:	f7fe fab0 	bl	41a8 <smpMsgAlloc>
    5c48:	1e05      	subs	r5, r0, #0
    5c4a:	d009      	beq.n	5c60 <smprActSendPairRsp+0x78>
    5c4c:	0021      	movs	r1, r4
    5c4e:	3008      	adds	r0, #8
    5c50:	3117      	adds	r1, #23
    5c52:	2207      	movs	r2, #7
    5c54:	f009 ff7b 	bl	fb4e <memcpy>
    5c58:	0029      	movs	r1, r5
    5c5a:	0020      	movs	r0, r4
    5c5c:	f7fe fa54 	bl	4108 <smpSendPkt>
    5c60:	466b      	mov	r3, sp
    5c62:	7999      	ldrb	r1, [r3, #6]
    5c64:	23e8      	movs	r3, #232	; 0xe8
    5c66:	005b      	lsls	r3, r3, #1
    5c68:	783a      	ldrb	r2, [r7, #0]
    5c6a:	58f3      	ldr	r3, [r6, r3]
    5c6c:	0020      	movs	r0, r4
    5c6e:	4798      	blx	r3
    5c70:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    5c72:	46c0      	nop			; (mov r8, r8)
    5c74:	1000108c 	.word	0x1000108c
    5c78:	10001818 	.word	0x10001818

00005c7c <smprActProcPairCnf>:
    5c7c:	b510      	push	{r4, lr}
    5c7e:	0004      	movs	r4, r0
    5c80:	6849      	ldr	r1, [r1, #4]
    5c82:	6a00      	ldr	r0, [r0, #32]
    5c84:	3109      	adds	r1, #9
    5c86:	2210      	movs	r2, #16
    5c88:	3020      	adds	r0, #32
    5c8a:	f009 ff60 	bl	fb4e <memcpy>
    5c8e:	2300      	movs	r3, #0
    5c90:	342f      	adds	r4, #47	; 0x2f
    5c92:	7023      	strb	r3, [r4, #0]
    5c94:	bd10      	pop	{r4, pc}

00005c96 <smprActProcPairCnfCalc1>:
    5c96:	b510      	push	{r4, lr}
    5c98:	0004      	movs	r4, r0
    5c9a:	f7ff ffef 	bl	5c7c <smprActProcPairCnf>
    5c9e:	6a20      	ldr	r0, [r4, #32]
    5ca0:	2110      	movs	r1, #16
    5ca2:	3030      	adds	r0, #48	; 0x30
    5ca4:	f004 ff5e 	bl	ab64 <SecRand>
    5ca8:	6a22      	ldr	r2, [r4, #32]
    5caa:	6a21      	ldr	r1, [r4, #32]
    5cac:	3230      	adds	r2, #48	; 0x30
    5cae:	0020      	movs	r0, r4
    5cb0:	f7fe f8e8 	bl	3e84 <smpCalcC1Part1>
    5cb4:	bd10      	pop	{r4, pc}

00005cb6 <smprActCnfVerify>:
    5cb6:	b570      	push	{r4, r5, r6, lr}
    5cb8:	6a06      	ldr	r6, [r0, #32]
    5cba:	000c      	movs	r4, r1
    5cbc:	0031      	movs	r1, r6
    5cbe:	0005      	movs	r5, r0
    5cc0:	3120      	adds	r1, #32
    5cc2:	2210      	movs	r2, #16
    5cc4:	6860      	ldr	r0, [r4, #4]
    5cc6:	f009 ff33 	bl	fb30 <memcmp>
    5cca:	2800      	cmp	r0, #0
    5ccc:	d015      	beq.n	5cfa <smprActCnfVerify+0x44>
    5cce:	002a      	movs	r2, r5
    5cd0:	3232      	adds	r2, #50	; 0x32
    5cd2:	7813      	ldrb	r3, [r2, #0]
    5cd4:	3301      	adds	r3, #1
    5cd6:	b2db      	uxtb	r3, r3
    5cd8:	7013      	strb	r3, [r2, #0]
    5cda:	4a0c      	ldr	r2, [pc, #48]	; (5d0c <smprActCnfVerify+0x56>)
    5cdc:	6812      	ldr	r2, [r2, #0]
    5cde:	7951      	ldrb	r1, [r2, #5]
    5ce0:	2204      	movs	r2, #4
    5ce2:	70e2      	strb	r2, [r4, #3]
    5ce4:	4299      	cmp	r1, r3
    5ce6:	d101      	bne.n	5cec <smprActCnfVerify+0x36>
    5ce8:	230d      	movs	r3, #13
    5cea:	e000      	b.n	5cee <smprActCnfVerify+0x38>
    5cec:	2303      	movs	r3, #3
    5cee:	70a3      	strb	r3, [r4, #2]
    5cf0:	0021      	movs	r1, r4
    5cf2:	0028      	movs	r0, r5
    5cf4:	f7ff fb37 	bl	5366 <smpSmExecute>
    5cf8:	e007      	b.n	5d0a <smprActCnfVerify+0x54>
    5cfa:	0033      	movs	r3, r6
    5cfc:	0032      	movs	r2, r6
    5cfe:	3310      	adds	r3, #16
    5d00:	3230      	adds	r2, #48	; 0x30
    5d02:	0031      	movs	r1, r6
    5d04:	0028      	movs	r0, r5
    5d06:	f7fe f9a5 	bl	4054 <smpCalcS1>
    5d0a:	bd70      	pop	{r4, r5, r6, pc}
    5d0c:	1000108c 	.word	0x1000108c

00005d10 <smprActSendPairRandom>:
    5d10:	b570      	push	{r4, r5, r6, lr}
    5d12:	7ec2      	ldrb	r2, [r0, #27]
    5d14:	7d03      	ldrb	r3, [r0, #20]
    5d16:	0005      	movs	r5, r0
    5d18:	1c14      	adds	r4, r2, #0
    5d1a:	429a      	cmp	r2, r3
    5d1c:	d900      	bls.n	5d20 <smprActSendPairRandom+0x10>
    5d1e:	1c1c      	adds	r4, r3, #0
    5d20:	2610      	movs	r6, #16
    5d22:	6a28      	ldr	r0, [r5, #32]
    5d24:	b2e4      	uxtb	r4, r4
    5d26:	0022      	movs	r2, r4
    5d28:	6849      	ldr	r1, [r1, #4]
    5d2a:	3020      	adds	r0, #32
    5d2c:	f009 ff0f 	bl	fb4e <memcpy>
    5d30:	6a28      	ldr	r0, [r5, #32]
    5d32:	1b32      	subs	r2, r6, r4
    5d34:	3020      	adds	r0, #32
    5d36:	2100      	movs	r1, #0
    5d38:	1900      	adds	r0, r0, r4
    5d3a:	f009 ff2d 	bl	fb98 <memset>
    5d3e:	0028      	movs	r0, r5
    5d40:	f7ff f8f4 	bl	4f2c <smpStartRspTimer>
    5d44:	2019      	movs	r0, #25
    5d46:	f7fe fa2f 	bl	41a8 <smpMsgAlloc>
    5d4a:	1e04      	subs	r4, r0, #0
    5d4c:	d00b      	beq.n	5d66 <smprActSendPairRandom+0x56>
    5d4e:	2304      	movs	r3, #4
    5d50:	7203      	strb	r3, [r0, #8]
    5d52:	6a29      	ldr	r1, [r5, #32]
    5d54:	3009      	adds	r0, #9
    5d56:	3130      	adds	r1, #48	; 0x30
    5d58:	0032      	movs	r2, r6
    5d5a:	f009 fef8 	bl	fb4e <memcpy>
    5d5e:	0021      	movs	r1, r4
    5d60:	0028      	movs	r0, r5
    5d62:	f7fe f9d1 	bl	4108 <smpSendPkt>
    5d66:	bd70      	pop	{r4, r5, r6, pc}

00005d68 <smprActSendKey>:
    5d68:	b570      	push	{r4, r5, r6, lr}
    5d6a:	000d      	movs	r5, r1
    5d6c:	7d83      	ldrb	r3, [r0, #22]
    5d6e:	7f41      	ldrb	r1, [r0, #29]
    5d70:	0004      	movs	r4, r0
    5d72:	4019      	ands	r1, r3
    5d74:	f7ff f98c 	bl	5090 <smpSendKey>
    5d78:	2800      	cmp	r0, #0
    5d7a:	d027      	beq.n	5dcc <smprActSendKey+0x64>
    5d7c:	0022      	movs	r2, r4
    5d7e:	2300      	movs	r3, #0
    5d80:	322f      	adds	r2, #47	; 0x2f
    5d82:	7013      	strb	r3, [r2, #0]
    5d84:	7d63      	ldrb	r3, [r4, #21]
    5d86:	7f21      	ldrb	r1, [r4, #28]
    5d88:	400b      	ands	r3, r1
    5d8a:	07d9      	lsls	r1, r3, #31
    5d8c:	d50f      	bpl.n	5dae <smprActSendKey+0x46>
    5d8e:	21ea      	movs	r1, #234	; 0xea
    5d90:	480f      	ldr	r0, [pc, #60]	; (5dd0 <smprActSendKey+0x68>)
    5d92:	0049      	lsls	r1, r1, #1
    5d94:	5c41      	ldrb	r1, [r0, r1]
    5d96:	2900      	cmp	r1, #0
    5d98:	d007      	beq.n	5daa <smprActSendKey+0x42>
    5d9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5d9c:	7809      	ldrb	r1, [r1, #0]
    5d9e:	2900      	cmp	r1, #0
    5da0:	d003      	beq.n	5daa <smprActSendKey+0x42>
    5da2:	079b      	lsls	r3, r3, #30
    5da4:	d509      	bpl.n	5dba <smprActSendKey+0x52>
    5da6:	2308      	movs	r3, #8
    5da8:	e006      	b.n	5db8 <smprActSendKey+0x50>
    5daa:	2306      	movs	r3, #6
    5dac:	e004      	b.n	5db8 <smprActSendKey+0x50>
    5dae:	0799      	lsls	r1, r3, #30
    5db0:	d4f9      	bmi.n	5da6 <smprActSendKey+0x3e>
    5db2:	075b      	lsls	r3, r3, #29
    5db4:	d501      	bpl.n	5dba <smprActSendKey+0x52>
    5db6:	230a      	movs	r3, #10
    5db8:	7013      	strb	r3, [r2, #0]
    5dba:	7813      	ldrb	r3, [r2, #0]
    5dbc:	2b00      	cmp	r3, #0
    5dbe:	d105      	bne.n	5dcc <smprActSendKey+0x64>
    5dc0:	330e      	adds	r3, #14
    5dc2:	70ab      	strb	r3, [r5, #2]
    5dc4:	0029      	movs	r1, r5
    5dc6:	0020      	movs	r0, r4
    5dc8:	f7ff facd 	bl	5366 <smpSmExecute>
    5dcc:	bd70      	pop	{r4, r5, r6, pc}
    5dce:	46c0      	nop			; (mov r8, r8)
    5dd0:	10001818 	.word	0x10001818

00005dd4 <smprActSetupKeyDist>:
    5dd4:	0003      	movs	r3, r0
    5dd6:	2200      	movs	r2, #0
    5dd8:	b570      	push	{r4, r5, r6, lr}
    5dda:	0004      	movs	r4, r0
    5ddc:	332f      	adds	r3, #47	; 0x2f
    5dde:	701a      	strb	r2, [r3, #0]
    5de0:	000d      	movs	r5, r1
    5de2:	f7ff f8a3 	bl	4f2c <smpStartRspTimer>
    5de6:	0023      	movs	r3, r4
    5de8:	332d      	adds	r3, #45	; 0x2d
    5dea:	781b      	ldrb	r3, [r3, #0]
    5dec:	6a22      	ldr	r2, [r4, #32]
    5dee:	8013      	strh	r3, [r2, #0]
    5df0:	0023      	movs	r3, r4
    5df2:	3330      	adds	r3, #48	; 0x30
    5df4:	781b      	ldrb	r3, [r3, #0]
    5df6:	6a22      	ldr	r2, [r4, #32]
    5df8:	075b      	lsls	r3, r3, #29
    5dfa:	0fdb      	lsrs	r3, r3, #31
    5dfc:	3301      	adds	r3, #1
    5dfe:	77d3      	strb	r3, [r2, #31]
    5e00:	7ee0      	ldrb	r0, [r4, #27]
    5e02:	7d21      	ldrb	r1, [r4, #20]
    5e04:	6a23      	ldr	r3, [r4, #32]
    5e06:	1c02      	adds	r2, r0, #0
    5e08:	4288      	cmp	r0, r1
    5e0a:	d900      	bls.n	5e0e <smprActSetupKeyDist+0x3a>
    5e0c:	1c0a      	adds	r2, r1, #0
    5e0e:	3301      	adds	r3, #1
    5e10:	0029      	movs	r1, r5
    5e12:	77da      	strb	r2, [r3, #31]
    5e14:	0020      	movs	r0, r4
    5e16:	f7ff ffa7 	bl	5d68 <smprActSendKey>
    5e1a:	bd70      	pop	{r4, r5, r6, pc}

00005e1c <smprActRcvKey>:
    5e1c:	b570      	push	{r4, r5, r6, lr}
    5e1e:	7f02      	ldrb	r2, [r0, #28]
    5e20:	7d43      	ldrb	r3, [r0, #21]
    5e22:	000d      	movs	r5, r1
    5e24:	4013      	ands	r3, r2
    5e26:	684a      	ldr	r2, [r1, #4]
    5e28:	6a01      	ldr	r1, [r0, #32]
    5e2a:	0004      	movs	r4, r0
    5e2c:	f7ff f9fa 	bl	5224 <smpProcRcvKey>
    5e30:	2800      	cmp	r0, #0
    5e32:	d005      	beq.n	5e40 <smprActRcvKey+0x24>
    5e34:	230e      	movs	r3, #14
    5e36:	0029      	movs	r1, r5
    5e38:	70ab      	strb	r3, [r5, #2]
    5e3a:	0020      	movs	r0, r4
    5e3c:	f7ff fa93 	bl	5366 <smpSmExecute>
    5e40:	bd70      	pop	{r4, r5, r6, pc}
    5e42:	46c0      	nop			; (mov r8, r8)

00005e44 <smprScActStoreLescPin>:
    5e44:	b570      	push	{r4, r5, r6, lr}
    5e46:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5e48:	0004      	movs	r4, r0
    5e4a:	785a      	ldrb	r2, [r3, #1]
    5e4c:	000d      	movs	r5, r1
    5e4e:	2a03      	cmp	r2, #3
    5e50:	d11d      	bne.n	5e8e <smprScActStoreLescPin+0x4a>
    5e52:	4e0f      	ldr	r6, [pc, #60]	; (5e90 <smprScActStoreLescPin+0x4c>)
    5e54:	68d8      	ldr	r0, [r3, #12]
    5e56:	0031      	movs	r1, r6
    5e58:	3020      	adds	r0, #32
    5e5a:	f007 f85a 	bl	cf12 <Calc128Cpy>
    5e5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5e60:	0031      	movs	r1, r6
    5e62:	68d8      	ldr	r0, [r3, #12]
    5e64:	3030      	adds	r0, #48	; 0x30
    5e66:	f007 f854 	bl	cf12 <Calc128Cpy>
    5e6a:	7d2a      	ldrb	r2, [r5, #20]
    5e6c:	2a03      	cmp	r2, #3
    5e6e:	d80e      	bhi.n	5e8e <smprScActStoreLescPin+0x4a>
    5e70:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5e72:	1d2e      	adds	r6, r5, #4
    5e74:	68d8      	ldr	r0, [r3, #12]
    5e76:	b292      	uxth	r2, r2
    5e78:	302d      	adds	r0, #45	; 0x2d
    5e7a:	0031      	movs	r1, r6
    5e7c:	f007 f884 	bl	cf88 <WStrReverseCpy>
    5e80:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5e82:	7d2a      	ldrb	r2, [r5, #20]
    5e84:	68d8      	ldr	r0, [r3, #12]
    5e86:	0031      	movs	r1, r6
    5e88:	303d      	adds	r0, #61	; 0x3d
    5e8a:	f007 f87d 	bl	cf88 <WStrReverseCpy>
    5e8e:	bd70      	pop	{r4, r5, r6, pc}
    5e90:	00012fcc 	.word	0x00012fcc

00005e94 <smprScActSendPubKey>:
    5e94:	b570      	push	{r4, r5, r6, lr}
    5e96:	000d      	movs	r5, r1
    5e98:	0004      	movs	r4, r0
    5e9a:	f7fe fd9f 	bl	49dc <smpScActAuthSelect>
    5e9e:	0029      	movs	r1, r5
    5ea0:	0020      	movs	r0, r4
    5ea2:	f7fe fae7 	bl	4474 <smpScSendPubKey>
    5ea6:	bd70      	pop	{r4, r5, r6, pc}

00005ea8 <smprScActJwncSetup>:
    5ea8:	b570      	push	{r4, r5, r6, lr}
    5eaa:	0004      	movs	r4, r0
    5eac:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5eae:	000e      	movs	r6, r1
    5eb0:	68d8      	ldr	r0, [r3, #12]
    5eb2:	2110      	movs	r1, #16
    5eb4:	3010      	adds	r0, #16
    5eb6:	f004 fe55 	bl	ab64 <SecRand>
    5eba:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5ebc:	4d0a      	ldr	r5, [pc, #40]	; (5ee8 <smprScActJwncSetup+0x40>)
    5ebe:	68d8      	ldr	r0, [r3, #12]
    5ec0:	0029      	movs	r1, r5
    5ec2:	3020      	adds	r0, #32
    5ec4:	f007 f825 	bl	cf12 <Calc128Cpy>
    5ec8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5eca:	0029      	movs	r1, r5
    5ecc:	68d8      	ldr	r0, [r3, #12]
    5ece:	3030      	adds	r0, #48	; 0x30
    5ed0:	f007 f81f 	bl	cf12 <Calc128Cpy>
    5ed4:	0023      	movs	r3, r4
    5ed6:	2204      	movs	r2, #4
    5ed8:	332f      	adds	r3, #47	; 0x2f
    5eda:	0031      	movs	r1, r6
    5edc:	701a      	strb	r2, [r3, #0]
    5ede:	0020      	movs	r0, r4
    5ee0:	f7fe fdc1 	bl	4a66 <smpScActJwncCalcF4>
    5ee4:	bd70      	pop	{r4, r5, r6, pc}
    5ee6:	46c0      	nop			; (mov r8, r8)
    5ee8:	00012fcc 	.word	0x00012fcc

00005eec <smprScActJwncCalcG2>:
    5eec:	b570      	push	{r4, r5, r6, lr}
    5eee:	000d      	movs	r5, r1
    5ef0:	0004      	movs	r4, r0
    5ef2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5ef4:	6849      	ldr	r1, [r1, #4]
    5ef6:	68d8      	ldr	r0, [r3, #12]
    5ef8:	2210      	movs	r2, #16
    5efa:	3109      	adds	r1, #9
    5efc:	f007 f844 	bl	cf88 <WStrReverseCpy>
    5f00:	0029      	movs	r1, r5
    5f02:	0020      	movs	r0, r4
    5f04:	f7fe fdd2 	bl	4aac <smpScActJwncCalcG2>
    5f08:	bd70      	pop	{r4, r5, r6, pc}

00005f0a <smprScActPkStoreCnf>:
    5f0a:	b510      	push	{r4, lr}
    5f0c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5f0e:	6849      	ldr	r1, [r1, #4]
    5f10:	68d8      	ldr	r0, [r3, #12]
    5f12:	3109      	adds	r1, #9
    5f14:	3050      	adds	r0, #80	; 0x50
    5f16:	2210      	movs	r2, #16
    5f18:	f007 f836 	bl	cf88 <WStrReverseCpy>
    5f1c:	bd10      	pop	{r4, pc}

00005f1e <smprScActPkCalcCb>:
    5f1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5f20:	0004      	movs	r4, r0
    5f22:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5f24:	000d      	movs	r5, r1
    5f26:	68d8      	ldr	r0, [r3, #12]
    5f28:	2110      	movs	r1, #16
    5f2a:	3010      	adds	r0, #16
    5f2c:	f004 fe1a 	bl	ab64 <SecRand>
    5f30:	0023      	movs	r3, r4
    5f32:	2204      	movs	r2, #4
    5f34:	332f      	adds	r3, #47	; 0x2f
    5f36:	701a      	strb	r2, [r3, #0]
    5f38:	f7fd fd86 	bl	3a48 <DmSecGetEccKey>
    5f3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5f3e:	0006      	movs	r6, r0
    5f40:	0020      	movs	r0, r4
    5f42:	689f      	ldr	r7, [r3, #8]
    5f44:	f7fe fb40 	bl	45c8 <smpGetPkBit>
    5f48:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5f4a:	0032      	movs	r2, r6
    5f4c:	68db      	ldr	r3, [r3, #12]
    5f4e:	0029      	movs	r1, r5
    5f50:	3310      	adds	r3, #16
    5f52:	9301      	str	r3, [sp, #4]
    5f54:	9000      	str	r0, [sp, #0]
    5f56:	003b      	movs	r3, r7
    5f58:	0020      	movs	r0, r4
    5f5a:	f7fe fa35 	bl	43c8 <SmpScCalcF4>
    5f5e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00005f60 <smprScActPkStoreCnfAndCalcCb>:
    5f60:	b570      	push	{r4, r5, r6, lr}
    5f62:	000d      	movs	r5, r1
    5f64:	0004      	movs	r4, r0
    5f66:	f7ff ffd0 	bl	5f0a <smprScActPkStoreCnf>
    5f6a:	0029      	movs	r1, r5
    5f6c:	0020      	movs	r0, r4
    5f6e:	f7ff ffd6 	bl	5f1e <smprScActPkCalcCb>
    5f72:	bd70      	pop	{r4, r5, r6, pc}

00005f74 <smprScActPkStorePinAndCalcCb>:
    5f74:	b570      	push	{r4, r5, r6, lr}
    5f76:	000d      	movs	r5, r1
    5f78:	0004      	movs	r4, r0
    5f7a:	f7ff ff63 	bl	5e44 <smprScActStoreLescPin>
    5f7e:	0029      	movs	r1, r5
    5f80:	0020      	movs	r0, r4
    5f82:	f7ff ffcc 	bl	5f1e <smprScActPkCalcCb>
    5f86:	bd70      	pop	{r4, r5, r6, pc}

00005f88 <smprScActPkSendCnf>:
    5f88:	b510      	push	{r4, lr}
    5f8a:	684a      	ldr	r2, [r1, #4]
    5f8c:	f7fe faf5 	bl	457a <smpScSendPairCnf>
    5f90:	bd10      	pop	{r4, pc}

00005f92 <smprScActJwncSendCnf>:
    5f92:	b510      	push	{r4, lr}
    5f94:	f7ff fff8 	bl	5f88 <smprScActPkSendCnf>
    5f98:	bd10      	pop	{r4, pc}

00005f9a <smprScActPkCalcCa>:
    5f9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5f9c:	0004      	movs	r4, r0
    5f9e:	000d      	movs	r5, r1
    5fa0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    5fa2:	6849      	ldr	r1, [r1, #4]
    5fa4:	2210      	movs	r2, #16
    5fa6:	3109      	adds	r1, #9
    5fa8:	68d8      	ldr	r0, [r3, #12]
    5faa:	f006 ffed 	bl	cf88 <WStrReverseCpy>
    5fae:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5fb0:	689e      	ldr	r6, [r3, #8]
    5fb2:	f7fd fd49 	bl	3a48 <DmSecGetEccKey>
    5fb6:	0007      	movs	r7, r0
    5fb8:	0020      	movs	r0, r4
    5fba:	f7fe fb05 	bl	45c8 <smpGetPkBit>
    5fbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5fc0:	0032      	movs	r2, r6
    5fc2:	68db      	ldr	r3, [r3, #12]
    5fc4:	0029      	movs	r1, r5
    5fc6:	9301      	str	r3, [sp, #4]
    5fc8:	9000      	str	r0, [sp, #0]
    5fca:	003b      	movs	r3, r7
    5fcc:	0020      	movs	r0, r4
    5fce:	f7fe f9fb 	bl	43c8 <SmpScCalcF4>
    5fd2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00005fd4 <smprScActPkSendRand>:
    5fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fd6:	0005      	movs	r5, r0
    5fd8:	6b46      	ldr	r6, [r0, #52]	; 0x34
    5fda:	b085      	sub	sp, #20
    5fdc:	68f0      	ldr	r0, [r6, #12]
    5fde:	000f      	movs	r7, r1
    5fe0:	3050      	adds	r0, #80	; 0x50
    5fe2:	2210      	movs	r2, #16
    5fe4:	6849      	ldr	r1, [r1, #4]
    5fe6:	f009 fda3 	bl	fb30 <memcmp>
    5fea:	002b      	movs	r3, r5
    5fec:	332d      	adds	r3, #45	; 0x2d
    5fee:	ac03      	add	r4, sp, #12
    5ff0:	9301      	str	r3, [sp, #4]
    5ff2:	2800      	cmp	r0, #0
    5ff4:	d006      	beq.n	6004 <smprScActPkSendRand+0x30>
    5ff6:	781b      	ldrb	r3, [r3, #0]
    5ff8:	8023      	strh	r3, [r4, #0]
    5ffa:	2304      	movs	r3, #4
    5ffc:	70e3      	strb	r3, [r4, #3]
    5ffe:	3b01      	subs	r3, #1
    6000:	70a3      	strb	r3, [r4, #2]
    6002:	e018      	b.n	6036 <smprScActPkSendRand+0x62>
    6004:	78f3      	ldrb	r3, [r6, #3]
    6006:	3301      	adds	r3, #1
    6008:	b2db      	uxtb	r3, r3
    600a:	70f3      	strb	r3, [r6, #3]
    600c:	2b13      	cmp	r3, #19
    600e:	d902      	bls.n	6016 <smprScActPkSendRand+0x42>
    6010:	231a      	movs	r3, #26
    6012:	70a3      	strb	r3, [r4, #2]
    6014:	e00c      	b.n	6030 <smprScActPkSendRand+0x5c>
    6016:	002b      	movs	r3, r5
    6018:	2203      	movs	r2, #3
    601a:	332f      	adds	r3, #47	; 0x2f
    601c:	701a      	strb	r2, [r3, #0]
    601e:	2319      	movs	r3, #25
    6020:	70a3      	strb	r3, [r4, #2]
    6022:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    6024:	0039      	movs	r1, r7
    6026:	68da      	ldr	r2, [r3, #12]
    6028:	0028      	movs	r0, r5
    602a:	3210      	adds	r2, #16
    602c:	f7fe fa7d 	bl	452a <smpScSendRand>
    6030:	9b01      	ldr	r3, [sp, #4]
    6032:	781b      	ldrb	r3, [r3, #0]
    6034:	8023      	strh	r3, [r4, #0]
    6036:	0021      	movs	r1, r4
    6038:	0028      	movs	r0, r5
    603a:	f7ff f994 	bl	5366 <smpSmExecute>
    603e:	b005      	add	sp, #20
    6040:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006042 <smprScActOobSetup>:
    6042:	2304      	movs	r3, #4
    6044:	302f      	adds	r0, #47	; 0x2f
    6046:	7003      	strb	r3, [r0, #0]
    6048:	4770      	bx	lr

0000604a <smprScActOobCalcCa>:
    604a:	b530      	push	{r4, r5, lr}
    604c:	0004      	movs	r4, r0
    604e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    6050:	000d      	movs	r5, r1
    6052:	6849      	ldr	r1, [r1, #4]
    6054:	68d8      	ldr	r0, [r3, #12]
    6056:	b085      	sub	sp, #20
    6058:	3109      	adds	r1, #9
    605a:	2210      	movs	r2, #16
    605c:	f006 ff94 	bl	cf88 <WStrReverseCpy>
    6060:	7e63      	ldrb	r3, [r4, #25]
    6062:	2b01      	cmp	r3, #1
    6064:	d005      	beq.n	6072 <smprScActOobCalcCa+0x28>
    6066:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6068:	4912      	ldr	r1, [pc, #72]	; (60b4 <smprScActOobCalcCa+0x6a>)
    606a:	68d8      	ldr	r0, [r3, #12]
    606c:	3030      	adds	r0, #48	; 0x30
    606e:	f006 ff50 	bl	cf12 <Calc128Cpy>
    6072:	7ca2      	ldrb	r2, [r4, #18]
    6074:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6076:	2a01      	cmp	r2, #1
    6078:	d10b      	bne.n	6092 <smprScActOobCalcCa+0x48>
    607a:	689a      	ldr	r2, [r3, #8]
    607c:	68db      	ldr	r3, [r3, #12]
    607e:	0029      	movs	r1, r5
    6080:	3320      	adds	r3, #32
    6082:	9301      	str	r3, [sp, #4]
    6084:	2300      	movs	r3, #0
    6086:	0020      	movs	r0, r4
    6088:	9300      	str	r3, [sp, #0]
    608a:	0013      	movs	r3, r2
    608c:	f7fe f99c 	bl	43c8 <SmpScCalcF4>
    6090:	e00e      	b.n	60b0 <smprScActOobCalcCa+0x66>
    6092:	68d8      	ldr	r0, [r3, #12]
    6094:	4907      	ldr	r1, [pc, #28]	; (60b4 <smprScActOobCalcCa+0x6a>)
    6096:	3020      	adds	r0, #32
    6098:	f006 ff3b 	bl	cf12 <Calc128Cpy>
    609c:	0023      	movs	r3, r4
    609e:	332d      	adds	r3, #45	; 0x2d
    60a0:	781b      	ldrb	r3, [r3, #0]
    60a2:	a903      	add	r1, sp, #12
    60a4:	800b      	strh	r3, [r1, #0]
    60a6:	231b      	movs	r3, #27
    60a8:	0020      	movs	r0, r4
    60aa:	708b      	strb	r3, [r1, #2]
    60ac:	f7ff f95b 	bl	5366 <smpSmExecute>
    60b0:	b005      	add	sp, #20
    60b2:	bd30      	pop	{r4, r5, pc}
    60b4:	00012fcc 	.word	0x00012fcc

000060b8 <smprScActOobSendRand>:
    60b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    60ba:	7c83      	ldrb	r3, [r0, #18]
    60bc:	0004      	movs	r4, r0
    60be:	000d      	movs	r5, r1
    60c0:	2b01      	cmp	r3, #1
    60c2:	d115      	bne.n	60f0 <smprScActOobSendRand+0x38>
    60c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    60c6:	2210      	movs	r2, #16
    60c8:	68d8      	ldr	r0, [r3, #12]
    60ca:	6849      	ldr	r1, [r1, #4]
    60cc:	3050      	adds	r0, #80	; 0x50
    60ce:	f009 fd2f 	bl	fb30 <memcmp>
    60d2:	2800      	cmp	r0, #0
    60d4:	d00c      	beq.n	60f0 <smprScActOobSendRand+0x38>
    60d6:	0023      	movs	r3, r4
    60d8:	332d      	adds	r3, #45	; 0x2d
    60da:	781b      	ldrb	r3, [r3, #0]
    60dc:	a901      	add	r1, sp, #4
    60de:	800b      	strh	r3, [r1, #0]
    60e0:	2304      	movs	r3, #4
    60e2:	0020      	movs	r0, r4
    60e4:	70cb      	strb	r3, [r1, #3]
    60e6:	3b01      	subs	r3, #1
    60e8:	708b      	strb	r3, [r1, #2]
    60ea:	f7ff f93c 	bl	5366 <smpSmExecute>
    60ee:	e010      	b.n	6112 <smprScActOobSendRand+0x5a>
    60f0:	0023      	movs	r3, r4
    60f2:	220d      	movs	r2, #13
    60f4:	332f      	adds	r3, #47	; 0x2f
    60f6:	701a      	strb	r2, [r3, #0]
    60f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    60fa:	2110      	movs	r1, #16
    60fc:	68d8      	ldr	r0, [r3, #12]
    60fe:	3010      	adds	r0, #16
    6100:	f004 fd30 	bl	ab64 <SecRand>
    6104:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6106:	0029      	movs	r1, r5
    6108:	68da      	ldr	r2, [r3, #12]
    610a:	0020      	movs	r0, r4
    610c:	3210      	adds	r2, #16
    610e:	f7fe fa0c 	bl	452a <smpScSendRand>
    6112:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

00006114 <smprScActWaitDhCheck>:
    6114:	0003      	movs	r3, r0
    6116:	220d      	movs	r2, #13
    6118:	b510      	push	{r4, lr}
    611a:	332f      	adds	r3, #47	; 0x2f
    611c:	701a      	strb	r2, [r3, #0]
    611e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    6120:	785a      	ldrb	r2, [r3, #1]
    6122:	2a02      	cmp	r2, #2
    6124:	d003      	beq.n	612e <smprScActWaitDhCheck+0x1a>
    6126:	68da      	ldr	r2, [r3, #12]
    6128:	3210      	adds	r2, #16
    612a:	f7fe f9fe 	bl	452a <smpScSendRand>
    612e:	bd10      	pop	{r4, pc}

00006130 <smprScActCalcDHKey>:
    6130:	b570      	push	{r4, r5, r6, lr}
    6132:	000d      	movs	r5, r1
    6134:	0004      	movs	r4, r0
    6136:	6b43      	ldr	r3, [r0, #52]	; 0x34
    6138:	6849      	ldr	r1, [r1, #4]
    613a:	68d8      	ldr	r0, [r3, #12]
    613c:	2210      	movs	r2, #16
    613e:	3109      	adds	r1, #9
    6140:	3050      	adds	r0, #80	; 0x50
    6142:	f006 ff21 	bl	cf88 <WStrReverseCpy>
    6146:	0029      	movs	r1, r5
    6148:	0020      	movs	r0, r4
    614a:	f7fe fd39 	bl	4bc0 <smpScActCalcSharedSecret>
    614e:	bd70      	pop	{r4, r5, r6, pc}

00006150 <smprScActDHKeyCheckSend>:
    6150:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6152:	0004      	movs	r4, r0
    6154:	6b43      	ldr	r3, [r0, #52]	; 0x34
    6156:	000d      	movs	r5, r1
    6158:	68d8      	ldr	r0, [r3, #12]
    615a:	6849      	ldr	r1, [r1, #4]
    615c:	3010      	adds	r0, #16
    615e:	f006 fed8 	bl	cf12 <Calc128Cpy>
    6162:	6b66      	ldr	r6, [r4, #52]	; 0x34
    6164:	2210      	movs	r2, #16
    6166:	68f0      	ldr	r0, [r6, #12]
    6168:	68f1      	ldr	r1, [r6, #12]
    616a:	3050      	adds	r0, #80	; 0x50
    616c:	f009 fce0 	bl	fb30 <memcmp>
    6170:	2800      	cmp	r0, #0
    6172:	d116      	bne.n	61a2 <smprScActDHKeyCheckSend+0x52>
    6174:	7ee1      	ldrb	r1, [r4, #27]
    6176:	7d22      	ldrb	r2, [r4, #20]
    6178:	1c0b      	adds	r3, r1, #0
    617a:	4291      	cmp	r1, r2
    617c:	d900      	bls.n	6180 <smprScActDHKeyCheckSend+0x30>
    617e:	1c13      	adds	r3, r2, #0
    6180:	2210      	movs	r2, #16
    6182:	6930      	ldr	r0, [r6, #16]
    6184:	b2db      	uxtb	r3, r3
    6186:	3010      	adds	r0, #16
    6188:	1ad2      	subs	r2, r2, r3
    618a:	18c0      	adds	r0, r0, r3
    618c:	2100      	movs	r1, #0
    618e:	f009 fd03 	bl	fb98 <memset>
    6192:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6194:	0029      	movs	r1, r5
    6196:	68da      	ldr	r2, [r3, #12]
    6198:	0020      	movs	r0, r4
    619a:	3210      	adds	r2, #16
    619c:	f7fe f99d 	bl	44da <smpScSendDHKeyCheck>
    61a0:	e00b      	b.n	61ba <smprScActDHKeyCheckSend+0x6a>
    61a2:	0023      	movs	r3, r4
    61a4:	332d      	adds	r3, #45	; 0x2d
    61a6:	781b      	ldrb	r3, [r3, #0]
    61a8:	a901      	add	r1, sp, #4
    61aa:	800b      	strh	r3, [r1, #0]
    61ac:	230b      	movs	r3, #11
    61ae:	0020      	movs	r0, r4
    61b0:	70cb      	strb	r3, [r1, #3]
    61b2:	3311      	adds	r3, #17
    61b4:	708b      	strb	r3, [r1, #2]
    61b6:	f7ff f8d6 	bl	5366 <smpSmExecute>
    61ba:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

000061bc <__gnu_thumb1_case_sqi>:
    61bc:	b402      	push	{r1}
    61be:	4671      	mov	r1, lr
    61c0:	0849      	lsrs	r1, r1, #1
    61c2:	0049      	lsls	r1, r1, #1
    61c4:	5609      	ldrsb	r1, [r1, r0]
    61c6:	0049      	lsls	r1, r1, #1
    61c8:	448e      	add	lr, r1
    61ca:	bc02      	pop	{r1}
    61cc:	4770      	bx	lr
    61ce:	bf00      	nop

000061d0 <__gnu_thumb1_case_uqi>:
    61d0:	b402      	push	{r1}
    61d2:	4671      	mov	r1, lr
    61d4:	0849      	lsrs	r1, r1, #1
    61d6:	0049      	lsls	r1, r1, #1
    61d8:	5c09      	ldrb	r1, [r1, r0]
    61da:	0049      	lsls	r1, r1, #1
    61dc:	448e      	add	lr, r1
    61de:	bc02      	pop	{r1}
    61e0:	4770      	bx	lr
    61e2:	bf00      	nop

000061e4 <__udivsi3>:
    61e4:	2900      	cmp	r1, #0
    61e6:	d002      	beq.n	61ee <__udivsi3+0xa>
    61e8:	fbb0 f0f1 	udiv	r0, r0, r1
    61ec:	4770      	bx	lr
    61ee:	b108      	cbz	r0, 61f4 <__udivsi3+0x10>
    61f0:	f04f 30ff 	mov.w	r0, #4294967295
    61f4:	f000 b808 	b.w	6208 <__aeabi_idiv0>

000061f8 <__aeabi_uidivmod>:
    61f8:	2900      	cmp	r1, #0
    61fa:	d0f8      	beq.n	61ee <__udivsi3+0xa>
    61fc:	4602      	mov	r2, r0
    61fe:	fbb0 f0f1 	udiv	r0, r0, r1
    6202:	fb00 2111 	mls	r1, r0, r1, r2
    6206:	4770      	bx	lr

00006208 <__aeabi_idiv0>:
    6208:	4770      	bx	lr
    620a:	bf00      	nop

0000620c <__aeabi_d2f>:
    620c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    6210:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    6214:	bf24      	itt	cs
    6216:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    621a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    621e:	d90d      	bls.n	623c <__aeabi_d2f+0x30>
    6220:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    6224:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    6228:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    622c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    6230:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    6234:	bf08      	it	eq
    6236:	f020 0001 	biceq.w	r0, r0, #1
    623a:	4770      	bx	lr
    623c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    6240:	d121      	bne.n	6286 <__aeabi_d2f+0x7a>
    6242:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    6246:	bfbc      	itt	lt
    6248:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    624c:	4770      	bxlt	lr
    624e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    6252:	ea4f 5252 	mov.w	r2, r2, lsr #21
    6256:	f1c2 0218 	rsb	r2, r2, #24
    625a:	f1c2 0c20 	rsb	ip, r2, #32
    625e:	fa10 f30c 	lsls.w	r3, r0, ip
    6262:	fa20 f002 	lsr.w	r0, r0, r2
    6266:	bf18      	it	ne
    6268:	f040 0001 	orrne.w	r0, r0, #1
    626c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    6270:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    6274:	fa03 fc0c 	lsl.w	ip, r3, ip
    6278:	ea40 000c 	orr.w	r0, r0, ip
    627c:	fa23 f302 	lsr.w	r3, r3, r2
    6280:	ea4f 0343 	mov.w	r3, r3, lsl #1
    6284:	e7cc      	b.n	6220 <__aeabi_d2f+0x14>
    6286:	ea7f 5362 	mvns.w	r3, r2, asr #21
    628a:	d107      	bne.n	629c <__aeabi_d2f+0x90>
    628c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    6290:	bf1e      	ittt	ne
    6292:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    6296:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    629a:	4770      	bxne	lr
    629c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    62a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    62a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    62a8:	4770      	bx	lr
    62aa:	bf00      	nop

000062ac <hciCmdAlloc>:
 *
 *  \return Pointer to WSF msg buffer.
 */
/*************************************************************************************************/
uint8_t *hciCmdAlloc(uint16_t opcode, uint16_t len)
{
    62ac:	b580      	push	{r7, lr}
    62ae:	b084      	sub	sp, #16
    62b0:	af00      	add	r7, sp, #0
    62b2:	4603      	mov	r3, r0
    62b4:	460a      	mov	r2, r1
    62b6:	80fb      	strh	r3, [r7, #6]
    62b8:	4613      	mov	r3, r2
    62ba:	80bb      	strh	r3, [r7, #4]
  uint8_t   *p;

  /* allocate buffer */
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    62bc:	88bb      	ldrh	r3, [r7, #4]
    62be:	3303      	adds	r3, #3
    62c0:	b29b      	uxth	r3, r3
    62c2:	4618      	mov	r0, r3
    62c4:	f004 fdab 	bl	ae1e <WsfMsgAlloc>
    62c8:	60f8      	str	r0, [r7, #12]
    62ca:	68fb      	ldr	r3, [r7, #12]
    62cc:	2b00      	cmp	r3, #0
    62ce:	d016      	beq.n	62fe <hciCmdAlloc+0x52>
  {
    /* set HCI command header */
    UINT16_TO_BSTREAM(p, opcode);
    62d0:	68fb      	ldr	r3, [r7, #12]
    62d2:	1c5a      	adds	r2, r3, #1
    62d4:	60fa      	str	r2, [r7, #12]
    62d6:	88fa      	ldrh	r2, [r7, #6]
    62d8:	b2d2      	uxtb	r2, r2
    62da:	701a      	strb	r2, [r3, #0]
    62dc:	68fb      	ldr	r3, [r7, #12]
    62de:	1c5a      	adds	r2, r3, #1
    62e0:	60fa      	str	r2, [r7, #12]
    62e2:	88fa      	ldrh	r2, [r7, #6]
    62e4:	0a12      	lsrs	r2, r2, #8
    62e6:	b292      	uxth	r2, r2
    62e8:	b2d2      	uxtb	r2, r2
    62ea:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, len);
    62ec:	68fb      	ldr	r3, [r7, #12]
    62ee:	1c5a      	adds	r2, r3, #1
    62f0:	60fa      	str	r2, [r7, #12]
    62f2:	88ba      	ldrh	r2, [r7, #4]
    62f4:	b2d2      	uxtb	r2, r2
    62f6:	701a      	strb	r2, [r3, #0]
    p -= HCI_CMD_HDR_LEN;
    62f8:	68fb      	ldr	r3, [r7, #12]
    62fa:	3b03      	subs	r3, #3
    62fc:	60fb      	str	r3, [r7, #12]
  }

  return p;
    62fe:	68fb      	ldr	r3, [r7, #12]
}
    6300:	4618      	mov	r0, r3
    6302:	3710      	adds	r7, #16
    6304:	46bd      	mov	sp, r7
    6306:	bd80      	pop	{r7, pc}

00006308 <hciCmdSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdSend(uint8_t *pData)
{
    6308:	b580      	push	{r7, lr}
    630a:	b084      	sub	sp, #16
    630c:	af00      	add	r7, sp, #0
    630e:	6078      	str	r0, [r7, #4]
  uint8_t         *p;
  wsfHandlerId_t  handlerId;

  /* queue command if present */
  if (pData != NULL)
    6310:	687b      	ldr	r3, [r7, #4]
    6312:	2b00      	cmp	r3, #0
    6314:	d004      	beq.n	6320 <hciCmdSend+0x18>
  {
    /* queue data - message handler ID 'handerId' not used */
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    6316:	687a      	ldr	r2, [r7, #4]
    6318:	2100      	movs	r1, #0
    631a:	4817      	ldr	r0, [pc, #92]	; (6378 <hciCmdSend+0x70>)
    631c:	f004 fdbb 	bl	ae96 <WsfMsgEnq>

  /* service the HCI command queue; first check if controller can accept any commands */
#if defined(AM_PART_APOLLO3) && !defined(NO_APOLLO3_BUFFER_WORKAROUND)
  if (hciCmdCb.numCmdPkts > 0 && (hciCoreCb.availBufs > 0))
#else
  if (hciCmdCb.numCmdPkts > 0)
    6320:	4b16      	ldr	r3, [pc, #88]	; (637c <hciCmdSend+0x74>)
    6322:	7e9b      	ldrb	r3, [r3, #26]
    6324:	2b00      	cmp	r3, #0
    6326:	d023      	beq.n	6370 <hciCmdSend+0x68>
#endif
  {
    /* if queue not empty */
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    6328:	f107 030b 	add.w	r3, r7, #11
    632c:	4619      	mov	r1, r3
    632e:	4812      	ldr	r0, [pc, #72]	; (6378 <hciCmdSend+0x70>)
    6330:	f004 fdc6 	bl	aec0 <WsfMsgDeq>
    6334:	60f8      	str	r0, [r7, #12]
    6336:	68fb      	ldr	r3, [r7, #12]
    6338:	2b00      	cmp	r3, #0
    633a:	d019      	beq.n	6370 <hciCmdSend+0x68>
    {
      /* decrement controller command packet count */
      hciCmdCb.numCmdPkts--;
    633c:	4b0f      	ldr	r3, [pc, #60]	; (637c <hciCmdSend+0x74>)
    633e:	7e9b      	ldrb	r3, [r3, #26]
    6340:	3b01      	subs	r3, #1
    6342:	b2da      	uxtb	r2, r3
    6344:	4b0d      	ldr	r3, [pc, #52]	; (637c <hciCmdSend+0x74>)
    6346:	769a      	strb	r2, [r3, #26]

      /* store opcode of command we're sending */
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    6348:	68fb      	ldr	r3, [r7, #12]
    634a:	781b      	ldrb	r3, [r3, #0]
    634c:	b29a      	uxth	r2, r3
    634e:	68fb      	ldr	r3, [r7, #12]
    6350:	3301      	adds	r3, #1
    6352:	781b      	ldrb	r3, [r3, #0]
    6354:	b29b      	uxth	r3, r3
    6356:	021b      	lsls	r3, r3, #8
    6358:	b29b      	uxth	r3, r3
    635a:	4413      	add	r3, r2
    635c:	b29a      	uxth	r2, r3
    635e:	4b07      	ldr	r3, [pc, #28]	; (637c <hciCmdSend+0x74>)
    6360:	831a      	strh	r2, [r3, #24]

      /* start command timeout */
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    6362:	211e      	movs	r1, #30
    6364:	4805      	ldr	r0, [pc, #20]	; (637c <hciCmdSend+0x74>)
    6366:	f004 ff13 	bl	b190 <WsfTimerStartSec>

      /* send command to transport */
      hciTrSendCmd(p);
    636a:	68f8      	ldr	r0, [r7, #12]
    636c:	f003 fb5f 	bl	9a2e <hciTrSendCmd>
    }
  }
}
    6370:	bf00      	nop
    6372:	3710      	adds	r7, #16
    6374:	46bd      	mov	sp, r7
    6376:	bd80      	pop	{r7, pc}
    6378:	10002624 	.word	0x10002624
    637c:	10002614 	.word	0x10002614

00006380 <hciCmdInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdInit(void)
{
    6380:	b480      	push	{r7}
    6382:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&hciCmdCb.cmdQueue);
    6384:	4b0a      	ldr	r3, [pc, #40]	; (63b0 <hciCmdInit+0x30>)
    6386:	2200      	movs	r2, #0
    6388:	611a      	str	r2, [r3, #16]
    638a:	4b09      	ldr	r3, [pc, #36]	; (63b0 <hciCmdInit+0x30>)
    638c:	2200      	movs	r2, #0
    638e:	615a      	str	r2, [r3, #20]

  /* initialize numCmdPkts for special case of first command */
  hciCmdCb.numCmdPkts = 1;
    6390:	4b07      	ldr	r3, [pc, #28]	; (63b0 <hciCmdInit+0x30>)
    6392:	2201      	movs	r2, #1
    6394:	769a      	strb	r2, [r3, #26]
#if defined(AM_PART_APOLLO3) && !defined(NO_APOLLO3_BUFFER_WORKAROUND)
  hciCoreCb.availBufs = 1;
#endif

  /* initialize timer */
  hciCmdCb.cmdTimer.msg.event = HCI_MSG_CMD_TIMEOUT;
    6396:	4b06      	ldr	r3, [pc, #24]	; (63b0 <hciCmdInit+0x30>)
    6398:	2201      	movs	r2, #1
    639a:	731a      	strb	r2, [r3, #12]
  hciCmdCb.cmdTimer.handlerId = hciCb.handlerId;
    639c:	4b05      	ldr	r3, [pc, #20]	; (63b4 <hciCmdInit+0x34>)
    639e:	7e1a      	ldrb	r2, [r3, #24]
    63a0:	4b03      	ldr	r3, [pc, #12]	; (63b0 <hciCmdInit+0x30>)
    63a2:	721a      	strb	r2, [r3, #8]
}
    63a4:	bf00      	nop
    63a6:	46bd      	mov	sp, r7
    63a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    63ac:	4770      	bx	lr
    63ae:	bf00      	nop
    63b0:	10002614 	.word	0x10002614
    63b4:	100028f4 	.word	0x100028f4

000063b8 <hciCmdTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdTimeout(wsfMsgHdr_t *pMsg)
{
    63b8:	b580      	push	{r7, lr}
    63ba:	b082      	sub	sp, #8
    63bc:	af00      	add	r7, sp, #0
    63be:	6078      	str	r0, [r7, #4]
  HCI_TRACE_INFO0("hciCmdTimeout");
    63c0:	4805      	ldr	r0, [pc, #20]	; (63d8 <hciCmdTimeout+0x20>)
    63c2:	f003 ffb3 	bl	a32c <WsfTrace>
  // When it times out, pretty much we have to
  // reset/reboot controller and initialize HCI
  // layer and SPI transport layer again.
  HciDrvRadioBoot(0);
    63c6:	2000      	movs	r0, #0
    63c8:	f006 f906 	bl	c5d8 <HciDrvRadioBoot>
  DmDevReset();
    63cc:	f7fc feba 	bl	3144 <DmDevReset>
}
    63d0:	bf00      	nop
    63d2:	3708      	adds	r7, #8
    63d4:	46bd      	mov	sp, r7
    63d6:	bd80      	pop	{r7, pc}
    63d8:	0000fba8 	.word	0x0000fba8

000063dc <hciCmdRecvCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdRecvCmpl(uint8_t numCmdPkts)
{
    63dc:	b580      	push	{r7, lr}
    63de:	b082      	sub	sp, #8
    63e0:	af00      	add	r7, sp, #0
    63e2:	4603      	mov	r3, r0
    63e4:	71fb      	strb	r3, [r7, #7]
  /* stop the command timeout timer */
  WsfTimerStop(&hciCmdCb.cmdTimer);
    63e6:	4806      	ldr	r0, [pc, #24]	; (6400 <hciCmdRecvCmpl+0x24>)
    63e8:	f004 fef8 	bl	b1dc <WsfTimerStop>
  /*
   * Set the number of commands that can be sent to the controller.  Setting this
   * to 1 rather than incrementing by numCmdPkts allows only one command at a time to
   * be sent to the controller and simplifies the code.
   */
  hciCmdCb.numCmdPkts = 1;
    63ec:	4b04      	ldr	r3, [pc, #16]	; (6400 <hciCmdRecvCmpl+0x24>)
    63ee:	2201      	movs	r2, #1
    63f0:	769a      	strb	r2, [r3, #26]

  /* send the next queued command */
  hciCmdSend(NULL);
    63f2:	2000      	movs	r0, #0
    63f4:	f7ff ff88 	bl	6308 <hciCmdSend>
}
    63f8:	bf00      	nop
    63fa:	3708      	adds	r7, #8
    63fc:	46bd      	mov	sp, r7
    63fe:	bd80      	pop	{r7, pc}
    6400:	10002614 	.word	0x10002614

00006404 <HciDisconnectCmd>:
 *
 *  \brief  HCI disconnect command.
 */
/*************************************************************************************************/
void HciDisconnectCmd(uint16_t handle, uint8_t reason)
{
    6404:	b580      	push	{r7, lr}
    6406:	b084      	sub	sp, #16
    6408:	af00      	add	r7, sp, #0
    640a:	4603      	mov	r3, r0
    640c:	460a      	mov	r2, r1
    640e:	80fb      	strh	r3, [r7, #6]
    6410:	4613      	mov	r3, r2
    6412:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_DISCONNECT, HCI_LEN_DISCONNECT)) != NULL)
    6414:	2103      	movs	r1, #3
    6416:	f240 4006 	movw	r0, #1030	; 0x406
    641a:	f7ff ff47 	bl	62ac <hciCmdAlloc>
    641e:	60f8      	str	r0, [r7, #12]
    6420:	68fb      	ldr	r3, [r7, #12]
    6422:	2b00      	cmp	r3, #0
    6424:	d018      	beq.n	6458 <HciDisconnectCmd+0x54>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6426:	68fb      	ldr	r3, [r7, #12]
    6428:	3303      	adds	r3, #3
    642a:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
    642c:	68bb      	ldr	r3, [r7, #8]
    642e:	1c5a      	adds	r2, r3, #1
    6430:	60ba      	str	r2, [r7, #8]
    6432:	88fa      	ldrh	r2, [r7, #6]
    6434:	b2d2      	uxtb	r2, r2
    6436:	701a      	strb	r2, [r3, #0]
    6438:	68bb      	ldr	r3, [r7, #8]
    643a:	1c5a      	adds	r2, r3, #1
    643c:	60ba      	str	r2, [r7, #8]
    643e:	88fa      	ldrh	r2, [r7, #6]
    6440:	0a12      	lsrs	r2, r2, #8
    6442:	b292      	uxth	r2, r2
    6444:	b2d2      	uxtb	r2, r2
    6446:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
    6448:	68bb      	ldr	r3, [r7, #8]
    644a:	1c5a      	adds	r2, r3, #1
    644c:	60ba      	str	r2, [r7, #8]
    644e:	797a      	ldrb	r2, [r7, #5]
    6450:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    6452:	68f8      	ldr	r0, [r7, #12]
    6454:	f7ff ff58 	bl	6308 <hciCmdSend>
  }
}
    6458:	bf00      	nop
    645a:	3710      	adds	r7, #16
    645c:	46bd      	mov	sp, r7
    645e:	bd80      	pop	{r7, pc}

00006460 <HciLeAddDevWhiteListCmd>:
 *
 *  \brief  HCI LE add device white list command.
 */
/*************************************************************************************************/
void HciLeAddDevWhiteListCmd(uint8_t addrType, uint8_t *pAddr)
{
    6460:	b580      	push	{r7, lr}
    6462:	b084      	sub	sp, #16
    6464:	af00      	add	r7, sp, #0
    6466:	4603      	mov	r3, r0
    6468:	6039      	str	r1, [r7, #0]
    646a:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_WHITE_LIST, HCI_LEN_LE_ADD_DEV_WHITE_LIST)) != NULL)
    646c:	2107      	movs	r1, #7
    646e:	f242 0011 	movw	r0, #8209	; 0x2011
    6472:	f7ff ff1b 	bl	62ac <hciCmdAlloc>
    6476:	60f8      	str	r0, [r7, #12]
    6478:	68fb      	ldr	r3, [r7, #12]
    647a:	2b00      	cmp	r3, #0
    647c:	d011      	beq.n	64a2 <HciLeAddDevWhiteListCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    647e:	68fb      	ldr	r3, [r7, #12]
    6480:	3303      	adds	r3, #3
    6482:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
    6484:	68bb      	ldr	r3, [r7, #8]
    6486:	1c5a      	adds	r2, r3, #1
    6488:	60ba      	str	r2, [r7, #8]
    648a:	79fa      	ldrb	r2, [r7, #7]
    648c:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
    648e:	6839      	ldr	r1, [r7, #0]
    6490:	68b8      	ldr	r0, [r7, #8]
    6492:	f006 fcf3 	bl	ce7c <BdaCpy>
    6496:	68bb      	ldr	r3, [r7, #8]
    6498:	3306      	adds	r3, #6
    649a:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
    649c:	68f8      	ldr	r0, [r7, #12]
    649e:	f7ff ff33 	bl	6308 <hciCmdSend>
  }
}
    64a2:	bf00      	nop
    64a4:	3710      	adds	r7, #16
    64a6:	46bd      	mov	sp, r7
    64a8:	bd80      	pop	{r7, pc}

000064aa <HciLeClearWhiteListCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearWhiteListCmd(void)
{
    64aa:	b580      	push	{r7, lr}
    64ac:	b082      	sub	sp, #8
    64ae:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_WHITE_LIST, HCI_LEN_LE_CLEAR_WHITE_LIST)) != NULL)
    64b0:	2100      	movs	r1, #0
    64b2:	f242 0010 	movw	r0, #8208	; 0x2010
    64b6:	f7ff fef9 	bl	62ac <hciCmdAlloc>
    64ba:	6078      	str	r0, [r7, #4]
    64bc:	687b      	ldr	r3, [r7, #4]
    64be:	2b00      	cmp	r3, #0
    64c0:	d002      	beq.n	64c8 <HciLeClearWhiteListCmd+0x1e>
  {
    hciCmdSend(pBuf);
    64c2:	6878      	ldr	r0, [r7, #4]
    64c4:	f7ff ff20 	bl	6308 <hciCmdSend>
  }
}
    64c8:	bf00      	nop
    64ca:	3708      	adds	r7, #8
    64cc:	46bd      	mov	sp, r7
    64ce:	bd80      	pop	{r7, pc}

000064d0 <HciLeConnUpdateCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeConnUpdateCmd(uint16_t handle, hciConnSpec_t *pConnSpec)
{
    64d0:	b580      	push	{r7, lr}
    64d2:	b084      	sub	sp, #16
    64d4:	af00      	add	r7, sp, #0
    64d6:	4603      	mov	r3, r0
    64d8:	6039      	str	r1, [r7, #0]
    64da:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CONN_UPDATE, HCI_LEN_LE_CONN_UPDATE)) != NULL)
    64dc:	210e      	movs	r1, #14
    64de:	f242 0013 	movw	r0, #8211	; 0x2013
    64e2:	f7ff fee3 	bl	62ac <hciCmdAlloc>
    64e6:	60f8      	str	r0, [r7, #12]
    64e8:	68fb      	ldr	r3, [r7, #12]
    64ea:	2b00      	cmp	r3, #0
    64ec:	d073      	beq.n	65d6 <HciLeConnUpdateCmd+0x106>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    64ee:	68fb      	ldr	r3, [r7, #12]
    64f0:	3303      	adds	r3, #3
    64f2:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
    64f4:	68bb      	ldr	r3, [r7, #8]
    64f6:	1c5a      	adds	r2, r3, #1
    64f8:	60ba      	str	r2, [r7, #8]
    64fa:	88fa      	ldrh	r2, [r7, #6]
    64fc:	b2d2      	uxtb	r2, r2
    64fe:	701a      	strb	r2, [r3, #0]
    6500:	68bb      	ldr	r3, [r7, #8]
    6502:	1c5a      	adds	r2, r3, #1
    6504:	60ba      	str	r2, [r7, #8]
    6506:	88fa      	ldrh	r2, [r7, #6]
    6508:	0a12      	lsrs	r2, r2, #8
    650a:	b292      	uxth	r2, r2
    650c:	b2d2      	uxtb	r2, r2
    650e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);
    6510:	68bb      	ldr	r3, [r7, #8]
    6512:	1c5a      	adds	r2, r3, #1
    6514:	60ba      	str	r2, [r7, #8]
    6516:	683a      	ldr	r2, [r7, #0]
    6518:	8812      	ldrh	r2, [r2, #0]
    651a:	b2d2      	uxtb	r2, r2
    651c:	701a      	strb	r2, [r3, #0]
    651e:	68bb      	ldr	r3, [r7, #8]
    6520:	1c5a      	adds	r2, r3, #1
    6522:	60ba      	str	r2, [r7, #8]
    6524:	683a      	ldr	r2, [r7, #0]
    6526:	8812      	ldrh	r2, [r2, #0]
    6528:	0a12      	lsrs	r2, r2, #8
    652a:	b292      	uxth	r2, r2
    652c:	b2d2      	uxtb	r2, r2
    652e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMax);
    6530:	68bb      	ldr	r3, [r7, #8]
    6532:	1c5a      	adds	r2, r3, #1
    6534:	60ba      	str	r2, [r7, #8]
    6536:	683a      	ldr	r2, [r7, #0]
    6538:	8852      	ldrh	r2, [r2, #2]
    653a:	b2d2      	uxtb	r2, r2
    653c:	701a      	strb	r2, [r3, #0]
    653e:	68bb      	ldr	r3, [r7, #8]
    6540:	1c5a      	adds	r2, r3, #1
    6542:	60ba      	str	r2, [r7, #8]
    6544:	683a      	ldr	r2, [r7, #0]
    6546:	8852      	ldrh	r2, [r2, #2]
    6548:	0a12      	lsrs	r2, r2, #8
    654a:	b292      	uxth	r2, r2
    654c:	b2d2      	uxtb	r2, r2
    654e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connLatency);
    6550:	68bb      	ldr	r3, [r7, #8]
    6552:	1c5a      	adds	r2, r3, #1
    6554:	60ba      	str	r2, [r7, #8]
    6556:	683a      	ldr	r2, [r7, #0]
    6558:	8892      	ldrh	r2, [r2, #4]
    655a:	b2d2      	uxtb	r2, r2
    655c:	701a      	strb	r2, [r3, #0]
    655e:	68bb      	ldr	r3, [r7, #8]
    6560:	1c5a      	adds	r2, r3, #1
    6562:	60ba      	str	r2, [r7, #8]
    6564:	683a      	ldr	r2, [r7, #0]
    6566:	8892      	ldrh	r2, [r2, #4]
    6568:	0a12      	lsrs	r2, r2, #8
    656a:	b292      	uxth	r2, r2
    656c:	b2d2      	uxtb	r2, r2
    656e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->supTimeout);
    6570:	68bb      	ldr	r3, [r7, #8]
    6572:	1c5a      	adds	r2, r3, #1
    6574:	60ba      	str	r2, [r7, #8]
    6576:	683a      	ldr	r2, [r7, #0]
    6578:	88d2      	ldrh	r2, [r2, #6]
    657a:	b2d2      	uxtb	r2, r2
    657c:	701a      	strb	r2, [r3, #0]
    657e:	68bb      	ldr	r3, [r7, #8]
    6580:	1c5a      	adds	r2, r3, #1
    6582:	60ba      	str	r2, [r7, #8]
    6584:	683a      	ldr	r2, [r7, #0]
    6586:	88d2      	ldrh	r2, [r2, #6]
    6588:	0a12      	lsrs	r2, r2, #8
    658a:	b292      	uxth	r2, r2
    658c:	b2d2      	uxtb	r2, r2
    658e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->minCeLen);
    6590:	68bb      	ldr	r3, [r7, #8]
    6592:	1c5a      	adds	r2, r3, #1
    6594:	60ba      	str	r2, [r7, #8]
    6596:	683a      	ldr	r2, [r7, #0]
    6598:	8912      	ldrh	r2, [r2, #8]
    659a:	b2d2      	uxtb	r2, r2
    659c:	701a      	strb	r2, [r3, #0]
    659e:	68bb      	ldr	r3, [r7, #8]
    65a0:	1c5a      	adds	r2, r3, #1
    65a2:	60ba      	str	r2, [r7, #8]
    65a4:	683a      	ldr	r2, [r7, #0]
    65a6:	8912      	ldrh	r2, [r2, #8]
    65a8:	0a12      	lsrs	r2, r2, #8
    65aa:	b292      	uxth	r2, r2
    65ac:	b2d2      	uxtb	r2, r2
    65ae:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->maxCeLen);
    65b0:	68bb      	ldr	r3, [r7, #8]
    65b2:	1c5a      	adds	r2, r3, #1
    65b4:	60ba      	str	r2, [r7, #8]
    65b6:	683a      	ldr	r2, [r7, #0]
    65b8:	8952      	ldrh	r2, [r2, #10]
    65ba:	b2d2      	uxtb	r2, r2
    65bc:	701a      	strb	r2, [r3, #0]
    65be:	68bb      	ldr	r3, [r7, #8]
    65c0:	1c5a      	adds	r2, r3, #1
    65c2:	60ba      	str	r2, [r7, #8]
    65c4:	683a      	ldr	r2, [r7, #0]
    65c6:	8952      	ldrh	r2, [r2, #10]
    65c8:	0a12      	lsrs	r2, r2, #8
    65ca:	b292      	uxth	r2, r2
    65cc:	b2d2      	uxtb	r2, r2
    65ce:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    65d0:	68f8      	ldr	r0, [r7, #12]
    65d2:	f7ff fe99 	bl	6308 <hciCmdSend>
  }
}
    65d6:	bf00      	nop
    65d8:	3710      	adds	r7, #16
    65da:	46bd      	mov	sp, r7
    65dc:	bd80      	pop	{r7, pc}

000065de <HciLeRemoteConnParamReqReply>:
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqReply(uint16_t handle, uint16_t intervalMin, uint16_t intervalMax, uint16_t latency,
                                  uint16_t timeout, uint16_t minCeLen, uint16_t maxCeLen)
{
    65de:	b590      	push	{r4, r7, lr}
    65e0:	b085      	sub	sp, #20
    65e2:	af00      	add	r7, sp, #0
    65e4:	4604      	mov	r4, r0
    65e6:	4608      	mov	r0, r1
    65e8:	4611      	mov	r1, r2
    65ea:	461a      	mov	r2, r3
    65ec:	4623      	mov	r3, r4
    65ee:	80fb      	strh	r3, [r7, #6]
    65f0:	4603      	mov	r3, r0
    65f2:	80bb      	strh	r3, [r7, #4]
    65f4:	460b      	mov	r3, r1
    65f6:	807b      	strh	r3, [r7, #2]
    65f8:	4613      	mov	r3, r2
    65fa:	803b      	strh	r3, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_REP, HCI_LEN_LE_REM_CONN_PARAM_REP)) != NULL)
    65fc:	210e      	movs	r1, #14
    65fe:	f242 0020 	movw	r0, #8224	; 0x2020
    6602:	f7ff fe53 	bl	62ac <hciCmdAlloc>
    6606:	60f8      	str	r0, [r7, #12]
    6608:	68fb      	ldr	r3, [r7, #12]
    660a:	2b00      	cmp	r3, #0
    660c:	d067      	beq.n	66de <HciLeRemoteConnParamReqReply+0x100>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    660e:	68fb      	ldr	r3, [r7, #12]
    6610:	3303      	adds	r3, #3
    6612:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
    6614:	68bb      	ldr	r3, [r7, #8]
    6616:	1c5a      	adds	r2, r3, #1
    6618:	60ba      	str	r2, [r7, #8]
    661a:	88fa      	ldrh	r2, [r7, #6]
    661c:	b2d2      	uxtb	r2, r2
    661e:	701a      	strb	r2, [r3, #0]
    6620:	68bb      	ldr	r3, [r7, #8]
    6622:	1c5a      	adds	r2, r3, #1
    6624:	60ba      	str	r2, [r7, #8]
    6626:	88fa      	ldrh	r2, [r7, #6]
    6628:	0a12      	lsrs	r2, r2, #8
    662a:	b292      	uxth	r2, r2
    662c:	b2d2      	uxtb	r2, r2
    662e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, intervalMin);
    6630:	68bb      	ldr	r3, [r7, #8]
    6632:	1c5a      	adds	r2, r3, #1
    6634:	60ba      	str	r2, [r7, #8]
    6636:	88ba      	ldrh	r2, [r7, #4]
    6638:	b2d2      	uxtb	r2, r2
    663a:	701a      	strb	r2, [r3, #0]
    663c:	68bb      	ldr	r3, [r7, #8]
    663e:	1c5a      	adds	r2, r3, #1
    6640:	60ba      	str	r2, [r7, #8]
    6642:	88ba      	ldrh	r2, [r7, #4]
    6644:	0a12      	lsrs	r2, r2, #8
    6646:	b292      	uxth	r2, r2
    6648:	b2d2      	uxtb	r2, r2
    664a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, intervalMax);
    664c:	68bb      	ldr	r3, [r7, #8]
    664e:	1c5a      	adds	r2, r3, #1
    6650:	60ba      	str	r2, [r7, #8]
    6652:	887a      	ldrh	r2, [r7, #2]
    6654:	b2d2      	uxtb	r2, r2
    6656:	701a      	strb	r2, [r3, #0]
    6658:	68bb      	ldr	r3, [r7, #8]
    665a:	1c5a      	adds	r2, r3, #1
    665c:	60ba      	str	r2, [r7, #8]
    665e:	887a      	ldrh	r2, [r7, #2]
    6660:	0a12      	lsrs	r2, r2, #8
    6662:	b292      	uxth	r2, r2
    6664:	b2d2      	uxtb	r2, r2
    6666:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, latency);
    6668:	68bb      	ldr	r3, [r7, #8]
    666a:	1c5a      	adds	r2, r3, #1
    666c:	60ba      	str	r2, [r7, #8]
    666e:	883a      	ldrh	r2, [r7, #0]
    6670:	b2d2      	uxtb	r2, r2
    6672:	701a      	strb	r2, [r3, #0]
    6674:	68bb      	ldr	r3, [r7, #8]
    6676:	1c5a      	adds	r2, r3, #1
    6678:	60ba      	str	r2, [r7, #8]
    667a:	883a      	ldrh	r2, [r7, #0]
    667c:	0a12      	lsrs	r2, r2, #8
    667e:	b292      	uxth	r2, r2
    6680:	b2d2      	uxtb	r2, r2
    6682:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, timeout);
    6684:	68bb      	ldr	r3, [r7, #8]
    6686:	1c5a      	adds	r2, r3, #1
    6688:	60ba      	str	r2, [r7, #8]
    668a:	8c3a      	ldrh	r2, [r7, #32]
    668c:	b2d2      	uxtb	r2, r2
    668e:	701a      	strb	r2, [r3, #0]
    6690:	68bb      	ldr	r3, [r7, #8]
    6692:	1c5a      	adds	r2, r3, #1
    6694:	60ba      	str	r2, [r7, #8]
    6696:	8c3a      	ldrh	r2, [r7, #32]
    6698:	0a12      	lsrs	r2, r2, #8
    669a:	b292      	uxth	r2, r2
    669c:	b2d2      	uxtb	r2, r2
    669e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, minCeLen);
    66a0:	68bb      	ldr	r3, [r7, #8]
    66a2:	1c5a      	adds	r2, r3, #1
    66a4:	60ba      	str	r2, [r7, #8]
    66a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
    66a8:	b2d2      	uxtb	r2, r2
    66aa:	701a      	strb	r2, [r3, #0]
    66ac:	68bb      	ldr	r3, [r7, #8]
    66ae:	1c5a      	adds	r2, r3, #1
    66b0:	60ba      	str	r2, [r7, #8]
    66b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
    66b4:	0a12      	lsrs	r2, r2, #8
    66b6:	b292      	uxth	r2, r2
    66b8:	b2d2      	uxtb	r2, r2
    66ba:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, maxCeLen);
    66bc:	68bb      	ldr	r3, [r7, #8]
    66be:	1c5a      	adds	r2, r3, #1
    66c0:	60ba      	str	r2, [r7, #8]
    66c2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    66c4:	b2d2      	uxtb	r2, r2
    66c6:	701a      	strb	r2, [r3, #0]
    66c8:	68bb      	ldr	r3, [r7, #8]
    66ca:	1c5a      	adds	r2, r3, #1
    66cc:	60ba      	str	r2, [r7, #8]
    66ce:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    66d0:	0a12      	lsrs	r2, r2, #8
    66d2:	b292      	uxth	r2, r2
    66d4:	b2d2      	uxtb	r2, r2
    66d6:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    66d8:	68f8      	ldr	r0, [r7, #12]
    66da:	f7ff fe15 	bl	6308 <hciCmdSend>
  }
}
    66de:	bf00      	nop
    66e0:	3714      	adds	r7, #20
    66e2:	46bd      	mov	sp, r7
    66e4:	bd90      	pop	{r4, r7, pc}

000066e6 <HciLeRemoteConnParamReqNegReply>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqNegReply(uint16_t handle, uint8_t reason)
{
    66e6:	b580      	push	{r7, lr}
    66e8:	b084      	sub	sp, #16
    66ea:	af00      	add	r7, sp, #0
    66ec:	4603      	mov	r3, r0
    66ee:	460a      	mov	r2, r1
    66f0:	80fb      	strh	r3, [r7, #6]
    66f2:	4613      	mov	r3, r2
    66f4:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP, HCI_LEN_LE_REM_CONN_PARAM_NEG_REP)) != NULL)
    66f6:	2103      	movs	r1, #3
    66f8:	f242 0021 	movw	r0, #8225	; 0x2021
    66fc:	f7ff fdd6 	bl	62ac <hciCmdAlloc>
    6700:	60f8      	str	r0, [r7, #12]
    6702:	68fb      	ldr	r3, [r7, #12]
    6704:	2b00      	cmp	r3, #0
    6706:	d018      	beq.n	673a <HciLeRemoteConnParamReqNegReply+0x54>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6708:	68fb      	ldr	r3, [r7, #12]
    670a:	3303      	adds	r3, #3
    670c:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
    670e:	68bb      	ldr	r3, [r7, #8]
    6710:	1c5a      	adds	r2, r3, #1
    6712:	60ba      	str	r2, [r7, #8]
    6714:	88fa      	ldrh	r2, [r7, #6]
    6716:	b2d2      	uxtb	r2, r2
    6718:	701a      	strb	r2, [r3, #0]
    671a:	68bb      	ldr	r3, [r7, #8]
    671c:	1c5a      	adds	r2, r3, #1
    671e:	60ba      	str	r2, [r7, #8]
    6720:	88fa      	ldrh	r2, [r7, #6]
    6722:	0a12      	lsrs	r2, r2, #8
    6724:	b292      	uxth	r2, r2
    6726:	b2d2      	uxtb	r2, r2
    6728:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
    672a:	68bb      	ldr	r3, [r7, #8]
    672c:	1c5a      	adds	r2, r3, #1
    672e:	60ba      	str	r2, [r7, #8]
    6730:	797a      	ldrb	r2, [r7, #5]
    6732:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    6734:	68f8      	ldr	r0, [r7, #12]
    6736:	f7ff fde7 	bl	6308 <hciCmdSend>
  }
}
    673a:	bf00      	nop
    673c:	3710      	adds	r7, #16
    673e:	46bd      	mov	sp, r7
    6740:	bd80      	pop	{r7, pc}

00006742 <HciLeSetDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeSetDataLen(uint16_t handle, uint16_t txOctets, uint16_t txTime)
{
    6742:	b580      	push	{r7, lr}
    6744:	b084      	sub	sp, #16
    6746:	af00      	add	r7, sp, #0
    6748:	4603      	mov	r3, r0
    674a:	80fb      	strh	r3, [r7, #6]
    674c:	460b      	mov	r3, r1
    674e:	80bb      	strh	r3, [r7, #4]
    6750:	4613      	mov	r3, r2
    6752:	807b      	strh	r3, [r7, #2]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_DATA_LEN, HCI_LEN_LE_SET_DATA_LEN)) != NULL)
    6754:	2106      	movs	r1, #6
    6756:	f242 0022 	movw	r0, #8226	; 0x2022
    675a:	f7ff fda7 	bl	62ac <hciCmdAlloc>
    675e:	60f8      	str	r0, [r7, #12]
    6760:	68fb      	ldr	r3, [r7, #12]
    6762:	2b00      	cmp	r3, #0
    6764:	d02f      	beq.n	67c6 <HciLeSetDataLen+0x84>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6766:	68fb      	ldr	r3, [r7, #12]
    6768:	3303      	adds	r3, #3
    676a:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
    676c:	68bb      	ldr	r3, [r7, #8]
    676e:	1c5a      	adds	r2, r3, #1
    6770:	60ba      	str	r2, [r7, #8]
    6772:	88fa      	ldrh	r2, [r7, #6]
    6774:	b2d2      	uxtb	r2, r2
    6776:	701a      	strb	r2, [r3, #0]
    6778:	68bb      	ldr	r3, [r7, #8]
    677a:	1c5a      	adds	r2, r3, #1
    677c:	60ba      	str	r2, [r7, #8]
    677e:	88fa      	ldrh	r2, [r7, #6]
    6780:	0a12      	lsrs	r2, r2, #8
    6782:	b292      	uxth	r2, r2
    6784:	b2d2      	uxtb	r2, r2
    6786:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, txOctets);
    6788:	68bb      	ldr	r3, [r7, #8]
    678a:	1c5a      	adds	r2, r3, #1
    678c:	60ba      	str	r2, [r7, #8]
    678e:	88ba      	ldrh	r2, [r7, #4]
    6790:	b2d2      	uxtb	r2, r2
    6792:	701a      	strb	r2, [r3, #0]
    6794:	68bb      	ldr	r3, [r7, #8]
    6796:	1c5a      	adds	r2, r3, #1
    6798:	60ba      	str	r2, [r7, #8]
    679a:	88ba      	ldrh	r2, [r7, #4]
    679c:	0a12      	lsrs	r2, r2, #8
    679e:	b292      	uxth	r2, r2
    67a0:	b2d2      	uxtb	r2, r2
    67a2:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, txTime);
    67a4:	68bb      	ldr	r3, [r7, #8]
    67a6:	1c5a      	adds	r2, r3, #1
    67a8:	60ba      	str	r2, [r7, #8]
    67aa:	887a      	ldrh	r2, [r7, #2]
    67ac:	b2d2      	uxtb	r2, r2
    67ae:	701a      	strb	r2, [r3, #0]
    67b0:	68bb      	ldr	r3, [r7, #8]
    67b2:	1c5a      	adds	r2, r3, #1
    67b4:	60ba      	str	r2, [r7, #8]
    67b6:	887a      	ldrh	r2, [r7, #2]
    67b8:	0a12      	lsrs	r2, r2, #8
    67ba:	b292      	uxth	r2, r2
    67bc:	b2d2      	uxtb	r2, r2
    67be:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    67c0:	68f8      	ldr	r0, [r7, #12]
    67c2:	f7ff fda1 	bl	6308 <hciCmdSend>
  }
}
    67c6:	bf00      	nop
    67c8:	3710      	adds	r7, #16
    67ca:	46bd      	mov	sp, r7
    67cc:	bd80      	pop	{r7, pc}

000067ce <HciLeWriteDefDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeWriteDefDataLen(uint16_t suggestedMaxTxOctets, uint16_t suggestedMaxTxTime)
{
    67ce:	b580      	push	{r7, lr}
    67d0:	b084      	sub	sp, #16
    67d2:	af00      	add	r7, sp, #0
    67d4:	4603      	mov	r3, r0
    67d6:	460a      	mov	r2, r1
    67d8:	80fb      	strh	r3, [r7, #6]
    67da:	4613      	mov	r3, r2
    67dc:	80bb      	strh	r3, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_WRITE_DEF_DATA_LEN, HCI_LEN_LE_WRITE_DEF_DATA_LEN)) != NULL)
    67de:	2104      	movs	r1, #4
    67e0:	f242 0024 	movw	r0, #8228	; 0x2024
    67e4:	f7ff fd62 	bl	62ac <hciCmdAlloc>
    67e8:	60f8      	str	r0, [r7, #12]
    67ea:	68fb      	ldr	r3, [r7, #12]
    67ec:	2b00      	cmp	r3, #0
    67ee:	d021      	beq.n	6834 <HciLeWriteDefDataLen+0x66>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    67f0:	68fb      	ldr	r3, [r7, #12]
    67f2:	3303      	adds	r3, #3
    67f4:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, suggestedMaxTxOctets);
    67f6:	68bb      	ldr	r3, [r7, #8]
    67f8:	1c5a      	adds	r2, r3, #1
    67fa:	60ba      	str	r2, [r7, #8]
    67fc:	88fa      	ldrh	r2, [r7, #6]
    67fe:	b2d2      	uxtb	r2, r2
    6800:	701a      	strb	r2, [r3, #0]
    6802:	68bb      	ldr	r3, [r7, #8]
    6804:	1c5a      	adds	r2, r3, #1
    6806:	60ba      	str	r2, [r7, #8]
    6808:	88fa      	ldrh	r2, [r7, #6]
    680a:	0a12      	lsrs	r2, r2, #8
    680c:	b292      	uxth	r2, r2
    680e:	b2d2      	uxtb	r2, r2
    6810:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, suggestedMaxTxTime);
    6812:	68bb      	ldr	r3, [r7, #8]
    6814:	1c5a      	adds	r2, r3, #1
    6816:	60ba      	str	r2, [r7, #8]
    6818:	88ba      	ldrh	r2, [r7, #4]
    681a:	b2d2      	uxtb	r2, r2
    681c:	701a      	strb	r2, [r3, #0]
    681e:	68bb      	ldr	r3, [r7, #8]
    6820:	1c5a      	adds	r2, r3, #1
    6822:	60ba      	str	r2, [r7, #8]
    6824:	88ba      	ldrh	r2, [r7, #4]
    6826:	0a12      	lsrs	r2, r2, #8
    6828:	b292      	uxth	r2, r2
    682a:	b2d2      	uxtb	r2, r2
    682c:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    682e:	68f8      	ldr	r0, [r7, #12]
    6830:	f7ff fd6a 	bl	6308 <hciCmdSend>
  }
}
    6834:	bf00      	nop
    6836:	3710      	adds	r7, #16
    6838:	46bd      	mov	sp, r7
    683a:	bd80      	pop	{r7, pc}

0000683c <HciLeReadLocalP256PubKey>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeReadLocalP256PubKey(void)
{
    683c:	b580      	push	{r7, lr}
    683e:	b082      	sub	sp, #8
    6840:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_P256_PUB_KEY, HCI_LEN_LE_READ_LOCAL_P256_PUB_KEY)) != NULL)
    6842:	2100      	movs	r1, #0
    6844:	f242 0025 	movw	r0, #8229	; 0x2025
    6848:	f7ff fd30 	bl	62ac <hciCmdAlloc>
    684c:	6078      	str	r0, [r7, #4]
    684e:	687b      	ldr	r3, [r7, #4]
    6850:	2b00      	cmp	r3, #0
    6852:	d002      	beq.n	685a <HciLeReadLocalP256PubKey+0x1e>
  {
    hciCmdSend(pBuf);
    6854:	6878      	ldr	r0, [r7, #4]
    6856:	f7ff fd57 	bl	6308 <hciCmdSend>
  }
}
    685a:	bf00      	nop
    685c:	3708      	adds	r7, #8
    685e:	46bd      	mov	sp, r7
    6860:	bd80      	pop	{r7, pc}

00006862 <HciLeGenerateDHKey>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeGenerateDHKey(uint8_t *pPubKeyX, uint8_t *pPubKeyY)
{
    6862:	b580      	push	{r7, lr}
    6864:	b084      	sub	sp, #16
    6866:	af00      	add	r7, sp, #0
    6868:	6078      	str	r0, [r7, #4]
    686a:	6039      	str	r1, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_GENERATE_DHKEY, HCI_LEN_LE_GENERATE_DHKEY)) != NULL)
    686c:	2140      	movs	r1, #64	; 0x40
    686e:	f242 0026 	movw	r0, #8230	; 0x2026
    6872:	f7ff fd1b 	bl	62ac <hciCmdAlloc>
    6876:	60f8      	str	r0, [r7, #12]
    6878:	68fb      	ldr	r3, [r7, #12]
    687a:	2b00      	cmp	r3, #0
    687c:	d011      	beq.n	68a2 <HciLeGenerateDHKey+0x40>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    687e:	68fb      	ldr	r3, [r7, #12]
    6880:	3303      	adds	r3, #3
    6882:	60bb      	str	r3, [r7, #8]
    memcpy(p, pPubKeyX, HCI_DH_KEY_LEN);
    6884:	2220      	movs	r2, #32
    6886:	6879      	ldr	r1, [r7, #4]
    6888:	68b8      	ldr	r0, [r7, #8]
    688a:	f009 f960 	bl	fb4e <memcpy>
    memcpy(p + HCI_DH_KEY_LEN, pPubKeyY, HCI_DH_KEY_LEN);
    688e:	68bb      	ldr	r3, [r7, #8]
    6890:	3320      	adds	r3, #32
    6892:	2220      	movs	r2, #32
    6894:	6839      	ldr	r1, [r7, #0]
    6896:	4618      	mov	r0, r3
    6898:	f009 f959 	bl	fb4e <memcpy>
    hciCmdSend(pBuf);
    689c:	68f8      	ldr	r0, [r7, #12]
    689e:	f7ff fd33 	bl	6308 <hciCmdSend>
  }
}
    68a2:	bf00      	nop
    68a4:	3710      	adds	r7, #16
    68a6:	46bd      	mov	sp, r7
    68a8:	bd80      	pop	{r7, pc}

000068aa <HciLeReadMaxDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeReadMaxDataLen(void)
{
    68aa:	b580      	push	{r7, lr}
    68ac:	b082      	sub	sp, #8
    68ae:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_MAX_DATA_LEN, HCI_LEN_LE_READ_MAX_DATA_LEN)) != NULL)
    68b0:	2100      	movs	r1, #0
    68b2:	f242 002f 	movw	r0, #8239	; 0x202f
    68b6:	f7ff fcf9 	bl	62ac <hciCmdAlloc>
    68ba:	6078      	str	r0, [r7, #4]
    68bc:	687b      	ldr	r3, [r7, #4]
    68be:	2b00      	cmp	r3, #0
    68c0:	d002      	beq.n	68c8 <HciLeReadMaxDataLen+0x1e>
  {
    hciCmdSend(pBuf);
    68c2:	6878      	ldr	r0, [r7, #4]
    68c4:	f7ff fd20 	bl	6308 <hciCmdSend>
  }
}
    68c8:	bf00      	nop
    68ca:	3708      	adds	r7, #8
    68cc:	46bd      	mov	sp, r7
    68ce:	bd80      	pop	{r7, pc}

000068d0 <HciLeEncryptCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeEncryptCmd(uint8_t *pKey, uint8_t *pData)
{
    68d0:	b580      	push	{r7, lr}
    68d2:	b084      	sub	sp, #16
    68d4:	af00      	add	r7, sp, #0
    68d6:	6078      	str	r0, [r7, #4]
    68d8:	6039      	str	r1, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ENCRYPT, HCI_LEN_LE_ENCRYPT)) != NULL)
    68da:	2120      	movs	r1, #32
    68dc:	f242 0017 	movw	r0, #8215	; 0x2017
    68e0:	f7ff fce4 	bl	62ac <hciCmdAlloc>
    68e4:	60f8      	str	r0, [r7, #12]
    68e6:	68fb      	ldr	r3, [r7, #12]
    68e8:	2b00      	cmp	r3, #0
    68ea:	d012      	beq.n	6912 <HciLeEncryptCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    68ec:	68fb      	ldr	r3, [r7, #12]
    68ee:	3303      	adds	r3, #3
    68f0:	60bb      	str	r3, [r7, #8]
    memcpy(p, pKey, HCI_KEY_LEN);
    68f2:	2210      	movs	r2, #16
    68f4:	6879      	ldr	r1, [r7, #4]
    68f6:	68b8      	ldr	r0, [r7, #8]
    68f8:	f009 f929 	bl	fb4e <memcpy>
    p += HCI_KEY_LEN;
    68fc:	68bb      	ldr	r3, [r7, #8]
    68fe:	3310      	adds	r3, #16
    6900:	60bb      	str	r3, [r7, #8]
    memcpy(p, pData, HCI_ENCRYPT_DATA_LEN);
    6902:	2210      	movs	r2, #16
    6904:	6839      	ldr	r1, [r7, #0]
    6906:	68b8      	ldr	r0, [r7, #8]
    6908:	f009 f921 	bl	fb4e <memcpy>
    hciCmdSend(pBuf);
    690c:	68f8      	ldr	r0, [r7, #12]
    690e:	f7ff fcfb 	bl	6308 <hciCmdSend>
  }
}
    6912:	bf00      	nop
    6914:	3710      	adds	r7, #16
    6916:	46bd      	mov	sp, r7
    6918:	bd80      	pop	{r7, pc}

0000691a <HciLeLtkReqNegReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqNegReplCmd(uint16_t handle)
{
    691a:	b580      	push	{r7, lr}
    691c:	b084      	sub	sp, #16
    691e:	af00      	add	r7, sp, #0
    6920:	4603      	mov	r3, r0
    6922:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_NEG_REPL, HCI_LEN_LE_LTK_REQ_NEG_REPL)) != NULL)
    6924:	2102      	movs	r1, #2
    6926:	f242 001b 	movw	r0, #8219	; 0x201b
    692a:	f7ff fcbf 	bl	62ac <hciCmdAlloc>
    692e:	60f8      	str	r0, [r7, #12]
    6930:	68fb      	ldr	r3, [r7, #12]
    6932:	2b00      	cmp	r3, #0
    6934:	d013      	beq.n	695e <HciLeLtkReqNegReplCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6936:	68fb      	ldr	r3, [r7, #12]
    6938:	3303      	adds	r3, #3
    693a:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
    693c:	68bb      	ldr	r3, [r7, #8]
    693e:	1c5a      	adds	r2, r3, #1
    6940:	60ba      	str	r2, [r7, #8]
    6942:	88fa      	ldrh	r2, [r7, #6]
    6944:	b2d2      	uxtb	r2, r2
    6946:	701a      	strb	r2, [r3, #0]
    6948:	68bb      	ldr	r3, [r7, #8]
    694a:	1c5a      	adds	r2, r3, #1
    694c:	60ba      	str	r2, [r7, #8]
    694e:	88fa      	ldrh	r2, [r7, #6]
    6950:	0a12      	lsrs	r2, r2, #8
    6952:	b292      	uxth	r2, r2
    6954:	b2d2      	uxtb	r2, r2
    6956:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    6958:	68f8      	ldr	r0, [r7, #12]
    695a:	f7ff fcd5 	bl	6308 <hciCmdSend>
  }
}
    695e:	bf00      	nop
    6960:	3710      	adds	r7, #16
    6962:	46bd      	mov	sp, r7
    6964:	bd80      	pop	{r7, pc}

00006966 <HciLeLtkReqReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqReplCmd(uint16_t handle, uint8_t *pKey)
{
    6966:	b580      	push	{r7, lr}
    6968:	b084      	sub	sp, #16
    696a:	af00      	add	r7, sp, #0
    696c:	4603      	mov	r3, r0
    696e:	6039      	str	r1, [r7, #0]
    6970:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_REPL, HCI_LEN_LE_LTK_REQ_REPL)) != NULL)
    6972:	2112      	movs	r1, #18
    6974:	f242 001a 	movw	r0, #8218	; 0x201a
    6978:	f7ff fc98 	bl	62ac <hciCmdAlloc>
    697c:	60f8      	str	r0, [r7, #12]
    697e:	68fb      	ldr	r3, [r7, #12]
    6980:	2b00      	cmp	r3, #0
    6982:	d018      	beq.n	69b6 <HciLeLtkReqReplCmd+0x50>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6984:	68fb      	ldr	r3, [r7, #12]
    6986:	3303      	adds	r3, #3
    6988:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
    698a:	68bb      	ldr	r3, [r7, #8]
    698c:	1c5a      	adds	r2, r3, #1
    698e:	60ba      	str	r2, [r7, #8]
    6990:	88fa      	ldrh	r2, [r7, #6]
    6992:	b2d2      	uxtb	r2, r2
    6994:	701a      	strb	r2, [r3, #0]
    6996:	68bb      	ldr	r3, [r7, #8]
    6998:	1c5a      	adds	r2, r3, #1
    699a:	60ba      	str	r2, [r7, #8]
    699c:	88fa      	ldrh	r2, [r7, #6]
    699e:	0a12      	lsrs	r2, r2, #8
    69a0:	b292      	uxth	r2, r2
    69a2:	b2d2      	uxtb	r2, r2
    69a4:	701a      	strb	r2, [r3, #0]
    memcpy(p, pKey, HCI_KEY_LEN);
    69a6:	2210      	movs	r2, #16
    69a8:	6839      	ldr	r1, [r7, #0]
    69aa:	68b8      	ldr	r0, [r7, #8]
    69ac:	f009 f8cf 	bl	fb4e <memcpy>
    hciCmdSend(pBuf);
    69b0:	68f8      	ldr	r0, [r7, #12]
    69b2:	f7ff fca9 	bl	6308 <hciCmdSend>
  }
}
    69b6:	bf00      	nop
    69b8:	3710      	adds	r7, #16
    69ba:	46bd      	mov	sp, r7
    69bc:	bd80      	pop	{r7, pc}

000069be <HciLeRandCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRandCmd(void)
{
    69be:	b580      	push	{r7, lr}
    69c0:	b082      	sub	sp, #8
    69c2:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_RAND, HCI_LEN_LE_RAND)) != NULL)
    69c4:	2100      	movs	r1, #0
    69c6:	f242 0018 	movw	r0, #8216	; 0x2018
    69ca:	f7ff fc6f 	bl	62ac <hciCmdAlloc>
    69ce:	6078      	str	r0, [r7, #4]
    69d0:	687b      	ldr	r3, [r7, #4]
    69d2:	2b00      	cmp	r3, #0
    69d4:	d002      	beq.n	69dc <HciLeRandCmd+0x1e>
  {
    hciCmdSend(pBuf);
    69d6:	6878      	ldr	r0, [r7, #4]
    69d8:	f7ff fc96 	bl	6308 <hciCmdSend>
  }
}
    69dc:	bf00      	nop
    69de:	3708      	adds	r7, #8
    69e0:	46bd      	mov	sp, r7
    69e2:	bd80      	pop	{r7, pc}

000069e4 <HciLeReadBufSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadBufSizeCmd(void)
{
    69e4:	b580      	push	{r7, lr}
    69e6:	b082      	sub	sp, #8
    69e8:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_BUF_SIZE, HCI_LEN_LE_READ_BUF_SIZE)) != NULL)
    69ea:	2100      	movs	r1, #0
    69ec:	f242 0002 	movw	r0, #8194	; 0x2002
    69f0:	f7ff fc5c 	bl	62ac <hciCmdAlloc>
    69f4:	6078      	str	r0, [r7, #4]
    69f6:	687b      	ldr	r3, [r7, #4]
    69f8:	2b00      	cmp	r3, #0
    69fa:	d002      	beq.n	6a02 <HciLeReadBufSizeCmd+0x1e>
  {
    hciCmdSend(pBuf);
    69fc:	6878      	ldr	r0, [r7, #4]
    69fe:	f7ff fc83 	bl	6308 <hciCmdSend>
  }
}
    6a02:	bf00      	nop
    6a04:	3708      	adds	r7, #8
    6a06:	46bd      	mov	sp, r7
    6a08:	bd80      	pop	{r7, pc}

00006a0a <HciLeReadLocalSupFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadLocalSupFeatCmd(void)
{
    6a0a:	b580      	push	{r7, lr}
    6a0c:	b082      	sub	sp, #8
    6a0e:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_SUP_FEAT, HCI_LEN_LE_READ_LOCAL_SUP_FEAT)) != NULL)
    6a10:	2100      	movs	r1, #0
    6a12:	f242 0003 	movw	r0, #8195	; 0x2003
    6a16:	f7ff fc49 	bl	62ac <hciCmdAlloc>
    6a1a:	6078      	str	r0, [r7, #4]
    6a1c:	687b      	ldr	r3, [r7, #4]
    6a1e:	2b00      	cmp	r3, #0
    6a20:	d002      	beq.n	6a28 <HciLeReadLocalSupFeatCmd+0x1e>
  {
    hciCmdSend(pBuf);
    6a22:	6878      	ldr	r0, [r7, #4]
    6a24:	f7ff fc70 	bl	6308 <hciCmdSend>
  }
}
    6a28:	bf00      	nop
    6a2a:	3708      	adds	r7, #8
    6a2c:	46bd      	mov	sp, r7
    6a2e:	bd80      	pop	{r7, pc}

00006a30 <HciLeReadRemoteFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadRemoteFeatCmd(uint16_t handle)
{
    6a30:	b580      	push	{r7, lr}
    6a32:	b084      	sub	sp, #16
    6a34:	af00      	add	r7, sp, #0
    6a36:	4603      	mov	r3, r0
    6a38:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_REMOTE_FEAT, HCI_LEN_LE_READ_REMOTE_FEAT)) != NULL)
    6a3a:	2102      	movs	r1, #2
    6a3c:	f242 0016 	movw	r0, #8214	; 0x2016
    6a40:	f7ff fc34 	bl	62ac <hciCmdAlloc>
    6a44:	60f8      	str	r0, [r7, #12]
    6a46:	68fb      	ldr	r3, [r7, #12]
    6a48:	2b00      	cmp	r3, #0
    6a4a:	d013      	beq.n	6a74 <HciLeReadRemoteFeatCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6a4c:	68fb      	ldr	r3, [r7, #12]
    6a4e:	3303      	adds	r3, #3
    6a50:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
    6a52:	68bb      	ldr	r3, [r7, #8]
    6a54:	1c5a      	adds	r2, r3, #1
    6a56:	60ba      	str	r2, [r7, #8]
    6a58:	88fa      	ldrh	r2, [r7, #6]
    6a5a:	b2d2      	uxtb	r2, r2
    6a5c:	701a      	strb	r2, [r3, #0]
    6a5e:	68bb      	ldr	r3, [r7, #8]
    6a60:	1c5a      	adds	r2, r3, #1
    6a62:	60ba      	str	r2, [r7, #8]
    6a64:	88fa      	ldrh	r2, [r7, #6]
    6a66:	0a12      	lsrs	r2, r2, #8
    6a68:	b292      	uxth	r2, r2
    6a6a:	b2d2      	uxtb	r2, r2
    6a6c:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    6a6e:	68f8      	ldr	r0, [r7, #12]
    6a70:	f7ff fc4a 	bl	6308 <hciCmdSend>
  }
}
    6a74:	bf00      	nop
    6a76:	3710      	adds	r7, #16
    6a78:	46bd      	mov	sp, r7
    6a7a:	bd80      	pop	{r7, pc}

00006a7c <HciLeReadSupStatesCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadSupStatesCmd(void)
{
    6a7c:	b580      	push	{r7, lr}
    6a7e:	b082      	sub	sp, #8
    6a80:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_SUP_STATES, HCI_LEN_LE_READ_SUP_STATES)) != NULL)
    6a82:	2100      	movs	r1, #0
    6a84:	f242 001c 	movw	r0, #8220	; 0x201c
    6a88:	f7ff fc10 	bl	62ac <hciCmdAlloc>
    6a8c:	6078      	str	r0, [r7, #4]
    6a8e:	687b      	ldr	r3, [r7, #4]
    6a90:	2b00      	cmp	r3, #0
    6a92:	d002      	beq.n	6a9a <HciLeReadSupStatesCmd+0x1e>
  {
    hciCmdSend(pBuf);
    6a94:	6878      	ldr	r0, [r7, #4]
    6a96:	f7ff fc37 	bl	6308 <hciCmdSend>
  }
}
    6a9a:	bf00      	nop
    6a9c:	3708      	adds	r7, #8
    6a9e:	46bd      	mov	sp, r7
    6aa0:	bd80      	pop	{r7, pc}

00006aa2 <HciLeReadWhiteListSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadWhiteListSizeCmd(void)
{
    6aa2:	b580      	push	{r7, lr}
    6aa4:	b082      	sub	sp, #8
    6aa6:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_WHITE_LIST_SIZE, HCI_LEN_LE_READ_WHITE_LIST_SIZE)) != NULL)
    6aa8:	2100      	movs	r1, #0
    6aaa:	f242 000f 	movw	r0, #8207	; 0x200f
    6aae:	f7ff fbfd 	bl	62ac <hciCmdAlloc>
    6ab2:	6078      	str	r0, [r7, #4]
    6ab4:	687b      	ldr	r3, [r7, #4]
    6ab6:	2b00      	cmp	r3, #0
    6ab8:	d002      	beq.n	6ac0 <HciLeReadWhiteListSizeCmd+0x1e>
  {
    hciCmdSend(pBuf);
    6aba:	6878      	ldr	r0, [r7, #4]
    6abc:	f7ff fc24 	bl	6308 <hciCmdSend>
  }
}
    6ac0:	bf00      	nop
    6ac2:	3708      	adds	r7, #8
    6ac4:	46bd      	mov	sp, r7
    6ac6:	bd80      	pop	{r7, pc}

00006ac8 <HciLeRemoveDevWhiteListCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRemoveDevWhiteListCmd(uint8_t addrType, uint8_t *pAddr)
{
    6ac8:	b580      	push	{r7, lr}
    6aca:	b084      	sub	sp, #16
    6acc:	af00      	add	r7, sp, #0
    6ace:	4603      	mov	r3, r0
    6ad0:	6039      	str	r1, [r7, #0]
    6ad2:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REMOVE_DEV_WHITE_LIST, HCI_LEN_LE_REMOVE_DEV_WHITE_LIST)) != NULL)
    6ad4:	2107      	movs	r1, #7
    6ad6:	f242 0012 	movw	r0, #8210	; 0x2012
    6ada:	f7ff fbe7 	bl	62ac <hciCmdAlloc>
    6ade:	60f8      	str	r0, [r7, #12]
    6ae0:	68fb      	ldr	r3, [r7, #12]
    6ae2:	2b00      	cmp	r3, #0
    6ae4:	d011      	beq.n	6b0a <HciLeRemoveDevWhiteListCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6ae6:	68fb      	ldr	r3, [r7, #12]
    6ae8:	3303      	adds	r3, #3
    6aea:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
    6aec:	68bb      	ldr	r3, [r7, #8]
    6aee:	1c5a      	adds	r2, r3, #1
    6af0:	60ba      	str	r2, [r7, #8]
    6af2:	79fa      	ldrb	r2, [r7, #7]
    6af4:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
    6af6:	6839      	ldr	r1, [r7, #0]
    6af8:	68b8      	ldr	r0, [r7, #8]
    6afa:	f006 f9bf 	bl	ce7c <BdaCpy>
    6afe:	68bb      	ldr	r3, [r7, #8]
    6b00:	3306      	adds	r3, #6
    6b02:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
    6b04:	68f8      	ldr	r0, [r7, #12]
    6b06:	f7ff fbff 	bl	6308 <hciCmdSend>
  }
}
    6b0a:	bf00      	nop
    6b0c:	3710      	adds	r7, #16
    6b0e:	46bd      	mov	sp, r7
    6b10:	bd80      	pop	{r7, pc}

00006b12 <HciLeSetAdvEnableCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvEnableCmd(uint8_t enable)
{
    6b12:	b580      	push	{r7, lr}
    6b14:	b084      	sub	sp, #16
    6b16:	af00      	add	r7, sp, #0
    6b18:	4603      	mov	r3, r0
    6b1a:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_ENABLE, HCI_LEN_LE_SET_ADV_ENABLE)) != NULL)
    6b1c:	2101      	movs	r1, #1
    6b1e:	f242 000a 	movw	r0, #8202	; 0x200a
    6b22:	f7ff fbc3 	bl	62ac <hciCmdAlloc>
    6b26:	60f8      	str	r0, [r7, #12]
    6b28:	68fb      	ldr	r3, [r7, #12]
    6b2a:	2b00      	cmp	r3, #0
    6b2c:	d00a      	beq.n	6b44 <HciLeSetAdvEnableCmd+0x32>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6b2e:	68fb      	ldr	r3, [r7, #12]
    6b30:	3303      	adds	r3, #3
    6b32:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, enable);
    6b34:	68bb      	ldr	r3, [r7, #8]
    6b36:	1c5a      	adds	r2, r3, #1
    6b38:	60ba      	str	r2, [r7, #8]
    6b3a:	79fa      	ldrb	r2, [r7, #7]
    6b3c:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    6b3e:	68f8      	ldr	r0, [r7, #12]
    6b40:	f7ff fbe2 	bl	6308 <hciCmdSend>
  }
}
    6b44:	bf00      	nop
    6b46:	3710      	adds	r7, #16
    6b48:	46bd      	mov	sp, r7
    6b4a:	bd80      	pop	{r7, pc}

00006b4c <HciLeSetAdvDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvDataCmd(uint8_t len, uint8_t *pData)
{
    6b4c:	b580      	push	{r7, lr}
    6b4e:	b084      	sub	sp, #16
    6b50:	af00      	add	r7, sp, #0
    6b52:	4603      	mov	r3, r0
    6b54:	6039      	str	r1, [r7, #0]
    6b56:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_DATA, HCI_LEN_LE_SET_ADV_DATA)) != NULL)
    6b58:	2120      	movs	r1, #32
    6b5a:	f242 0008 	movw	r0, #8200	; 0x2008
    6b5e:	f7ff fba5 	bl	62ac <hciCmdAlloc>
    6b62:	60f8      	str	r0, [r7, #12]
    6b64:	68fb      	ldr	r3, [r7, #12]
    6b66:	2b00      	cmp	r3, #0
    6b68:	d01c      	beq.n	6ba4 <HciLeSetAdvDataCmd+0x58>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6b6a:	68fb      	ldr	r3, [r7, #12]
    6b6c:	3303      	adds	r3, #3
    6b6e:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, len);
    6b70:	68bb      	ldr	r3, [r7, #8]
    6b72:	1c5a      	adds	r2, r3, #1
    6b74:	60ba      	str	r2, [r7, #8]
    6b76:	79fa      	ldrb	r2, [r7, #7]
    6b78:	701a      	strb	r2, [r3, #0]
    memcpy(p, pData, len);
    6b7a:	79fb      	ldrb	r3, [r7, #7]
    6b7c:	461a      	mov	r2, r3
    6b7e:	6839      	ldr	r1, [r7, #0]
    6b80:	68b8      	ldr	r0, [r7, #8]
    6b82:	f008 ffe4 	bl	fb4e <memcpy>
    p += len;
    6b86:	79fb      	ldrb	r3, [r7, #7]
    6b88:	68ba      	ldr	r2, [r7, #8]
    6b8a:	4413      	add	r3, r2
    6b8c:	60bb      	str	r3, [r7, #8]
    memset(p, 0, (HCI_ADV_DATA_LEN - len));
    6b8e:	79fb      	ldrb	r3, [r7, #7]
    6b90:	f1c3 031f 	rsb	r3, r3, #31
    6b94:	461a      	mov	r2, r3
    6b96:	2100      	movs	r1, #0
    6b98:	68b8      	ldr	r0, [r7, #8]
    6b9a:	f008 fffd 	bl	fb98 <memset>
    hciCmdSend(pBuf);
    6b9e:	68f8      	ldr	r0, [r7, #12]
    6ba0:	f7ff fbb2 	bl	6308 <hciCmdSend>
  }
}
    6ba4:	bf00      	nop
    6ba6:	3710      	adds	r7, #16
    6ba8:	46bd      	mov	sp, r7
    6baa:	bd80      	pop	{r7, pc}

00006bac <HciLeSetAdvParamCmd>:
 */
/*************************************************************************************************/
void HciLeSetAdvParamCmd(uint16_t advIntervalMin, uint16_t advIntervalMax, uint8_t advType,
                         uint8_t ownAddrType, uint8_t peerAddrType, uint8_t *pPeerAddr,
                         uint8_t advChanMap, uint8_t advFiltPolicy)
{
    6bac:	b590      	push	{r4, r7, lr}
    6bae:	b085      	sub	sp, #20
    6bb0:	af00      	add	r7, sp, #0
    6bb2:	4604      	mov	r4, r0
    6bb4:	4608      	mov	r0, r1
    6bb6:	4611      	mov	r1, r2
    6bb8:	461a      	mov	r2, r3
    6bba:	4623      	mov	r3, r4
    6bbc:	80fb      	strh	r3, [r7, #6]
    6bbe:	4603      	mov	r3, r0
    6bc0:	80bb      	strh	r3, [r7, #4]
    6bc2:	460b      	mov	r3, r1
    6bc4:	70fb      	strb	r3, [r7, #3]
    6bc6:	4613      	mov	r3, r2
    6bc8:	70bb      	strb	r3, [r7, #2]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_PARAM, HCI_LEN_LE_SET_ADV_PARAM)) != NULL)
    6bca:	210f      	movs	r1, #15
    6bcc:	f242 0006 	movw	r0, #8198	; 0x2006
    6bd0:	f7ff fb6c 	bl	62ac <hciCmdAlloc>
    6bd4:	60b8      	str	r0, [r7, #8]
    6bd6:	68bb      	ldr	r3, [r7, #8]
    6bd8:	2b00      	cmp	r3, #0
    6bda:	d04c      	beq.n	6c76 <HciLeSetAdvParamCmd+0xca>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6bdc:	68bb      	ldr	r3, [r7, #8]
    6bde:	3303      	adds	r3, #3
    6be0:	60fb      	str	r3, [r7, #12]
    UINT16_TO_BSTREAM(p, advIntervalMin);
    6be2:	68fb      	ldr	r3, [r7, #12]
    6be4:	1c5a      	adds	r2, r3, #1
    6be6:	60fa      	str	r2, [r7, #12]
    6be8:	88fa      	ldrh	r2, [r7, #6]
    6bea:	b2d2      	uxtb	r2, r2
    6bec:	701a      	strb	r2, [r3, #0]
    6bee:	68fb      	ldr	r3, [r7, #12]
    6bf0:	1c5a      	adds	r2, r3, #1
    6bf2:	60fa      	str	r2, [r7, #12]
    6bf4:	88fa      	ldrh	r2, [r7, #6]
    6bf6:	0a12      	lsrs	r2, r2, #8
    6bf8:	b292      	uxth	r2, r2
    6bfa:	b2d2      	uxtb	r2, r2
    6bfc:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, advIntervalMax);
    6bfe:	68fb      	ldr	r3, [r7, #12]
    6c00:	1c5a      	adds	r2, r3, #1
    6c02:	60fa      	str	r2, [r7, #12]
    6c04:	88ba      	ldrh	r2, [r7, #4]
    6c06:	b2d2      	uxtb	r2, r2
    6c08:	701a      	strb	r2, [r3, #0]
    6c0a:	68fb      	ldr	r3, [r7, #12]
    6c0c:	1c5a      	adds	r2, r3, #1
    6c0e:	60fa      	str	r2, [r7, #12]
    6c10:	88ba      	ldrh	r2, [r7, #4]
    6c12:	0a12      	lsrs	r2, r2, #8
    6c14:	b292      	uxth	r2, r2
    6c16:	b2d2      	uxtb	r2, r2
    6c18:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, advType);
    6c1a:	68fb      	ldr	r3, [r7, #12]
    6c1c:	1c5a      	adds	r2, r3, #1
    6c1e:	60fa      	str	r2, [r7, #12]
    6c20:	78fa      	ldrb	r2, [r7, #3]
    6c22:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, ownAddrType);
    6c24:	68fb      	ldr	r3, [r7, #12]
    6c26:	1c5a      	adds	r2, r3, #1
    6c28:	60fa      	str	r2, [r7, #12]
    6c2a:	78ba      	ldrb	r2, [r7, #2]
    6c2c:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, peerAddrType);
    6c2e:	68fb      	ldr	r3, [r7, #12]
    6c30:	1c5a      	adds	r2, r3, #1
    6c32:	60fa      	str	r2, [r7, #12]
    6c34:	f897 2020 	ldrb.w	r2, [r7, #32]
    6c38:	701a      	strb	r2, [r3, #0]
    if (pPeerAddr != NULL)
    6c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6c3c:	2b00      	cmp	r3, #0
    6c3e:	d007      	beq.n	6c50 <HciLeSetAdvParamCmd+0xa4>
    {
      BDA_TO_BSTREAM(p, pPeerAddr);
    6c40:	6a79      	ldr	r1, [r7, #36]	; 0x24
    6c42:	68f8      	ldr	r0, [r7, #12]
    6c44:	f006 f91a 	bl	ce7c <BdaCpy>
    6c48:	68fb      	ldr	r3, [r7, #12]
    6c4a:	3306      	adds	r3, #6
    6c4c:	60fb      	str	r3, [r7, #12]
    6c4e:	e003      	b.n	6c58 <HciLeSetAdvParamCmd+0xac>
    }
    else
    {
      p = BdaClr(p);
    6c50:	68f8      	ldr	r0, [r7, #12]
    6c52:	f006 f935 	bl	cec0 <BdaClr>
    6c56:	60f8      	str	r0, [r7, #12]
    }
    UINT8_TO_BSTREAM(p, advChanMap);
    6c58:	68fb      	ldr	r3, [r7, #12]
    6c5a:	1c5a      	adds	r2, r3, #1
    6c5c:	60fa      	str	r2, [r7, #12]
    6c5e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
    6c62:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, advFiltPolicy);
    6c64:	68fb      	ldr	r3, [r7, #12]
    6c66:	1c5a      	adds	r2, r3, #1
    6c68:	60fa      	str	r2, [r7, #12]
    6c6a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    6c6e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    6c70:	68b8      	ldr	r0, [r7, #8]
    6c72:	f7ff fb49 	bl	6308 <hciCmdSend>
  }
}
    6c76:	bf00      	nop
    6c78:	3714      	adds	r7, #20
    6c7a:	46bd      	mov	sp, r7
    6c7c:	bd90      	pop	{r4, r7, pc}

00006c7e <HciLeSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetEventMaskCmd(uint8_t *pLeEventMask)
{
    6c7e:	b580      	push	{r7, lr}
    6c80:	b084      	sub	sp, #16
    6c82:	af00      	add	r7, sp, #0
    6c84:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_EVENT_MASK, HCI_LEN_LE_SET_EVENT_MASK)) != NULL)
    6c86:	2108      	movs	r1, #8
    6c88:	f242 0001 	movw	r0, #8193	; 0x2001
    6c8c:	f7ff fb0e 	bl	62ac <hciCmdAlloc>
    6c90:	60f8      	str	r0, [r7, #12]
    6c92:	68fb      	ldr	r3, [r7, #12]
    6c94:	2b00      	cmp	r3, #0
    6c96:	d00a      	beq.n	6cae <HciLeSetEventMaskCmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6c98:	68fb      	ldr	r3, [r7, #12]
    6c9a:	3303      	adds	r3, #3
    6c9c:	60bb      	str	r3, [r7, #8]
    memcpy(p, pLeEventMask, HCI_LE_EVT_MASK_LEN);
    6c9e:	2208      	movs	r2, #8
    6ca0:	6879      	ldr	r1, [r7, #4]
    6ca2:	68b8      	ldr	r0, [r7, #8]
    6ca4:	f008 ff53 	bl	fb4e <memcpy>
    hciCmdSend(pBuf);
    6ca8:	68f8      	ldr	r0, [r7, #12]
    6caa:	f7ff fb2d 	bl	6308 <hciCmdSend>
  }
}
    6cae:	bf00      	nop
    6cb0:	3710      	adds	r7, #16
    6cb2:	46bd      	mov	sp, r7
    6cb4:	bd80      	pop	{r7, pc}

00006cb6 <HciLeSetRandAddrCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetRandAddrCmd(uint8_t *pAddr)
{
    6cb6:	b580      	push	{r7, lr}
    6cb8:	b084      	sub	sp, #16
    6cba:	af00      	add	r7, sp, #0
    6cbc:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_RAND_ADDR, HCI_LEN_LE_SET_RAND_ADDR)) != NULL)
    6cbe:	2106      	movs	r1, #6
    6cc0:	f242 0005 	movw	r0, #8197	; 0x2005
    6cc4:	f7ff faf2 	bl	62ac <hciCmdAlloc>
    6cc8:	60f8      	str	r0, [r7, #12]
    6cca:	68fb      	ldr	r3, [r7, #12]
    6ccc:	2b00      	cmp	r3, #0
    6cce:	d00c      	beq.n	6cea <HciLeSetRandAddrCmd+0x34>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6cd0:	68fb      	ldr	r3, [r7, #12]
    6cd2:	3303      	adds	r3, #3
    6cd4:	60bb      	str	r3, [r7, #8]
    BDA_TO_BSTREAM(p, pAddr);
    6cd6:	6879      	ldr	r1, [r7, #4]
    6cd8:	68b8      	ldr	r0, [r7, #8]
    6cda:	f006 f8cf 	bl	ce7c <BdaCpy>
    6cde:	68bb      	ldr	r3, [r7, #8]
    6ce0:	3306      	adds	r3, #6
    6ce2:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
    6ce4:	68f8      	ldr	r0, [r7, #12]
    6ce6:	f7ff fb0f 	bl	6308 <hciCmdSend>
  }
}
    6cea:	bf00      	nop
    6cec:	3710      	adds	r7, #16
    6cee:	46bd      	mov	sp, r7
    6cf0:	bd80      	pop	{r7, pc}

00006cf2 <HciLeSetScanRespDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetScanRespDataCmd(uint8_t len, uint8_t *pData)
{
    6cf2:	b580      	push	{r7, lr}
    6cf4:	b084      	sub	sp, #16
    6cf6:	af00      	add	r7, sp, #0
    6cf8:	4603      	mov	r3, r0
    6cfa:	6039      	str	r1, [r7, #0]
    6cfc:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_SCAN_RESP_DATA, HCI_LEN_LE_SET_SCAN_RESP_DATA)) != NULL)
    6cfe:	2120      	movs	r1, #32
    6d00:	f242 0009 	movw	r0, #8201	; 0x2009
    6d04:	f7ff fad2 	bl	62ac <hciCmdAlloc>
    6d08:	60f8      	str	r0, [r7, #12]
    6d0a:	68fb      	ldr	r3, [r7, #12]
    6d0c:	2b00      	cmp	r3, #0
    6d0e:	d01c      	beq.n	6d4a <HciLeSetScanRespDataCmd+0x58>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6d10:	68fb      	ldr	r3, [r7, #12]
    6d12:	3303      	adds	r3, #3
    6d14:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, len);
    6d16:	68bb      	ldr	r3, [r7, #8]
    6d18:	1c5a      	adds	r2, r3, #1
    6d1a:	60ba      	str	r2, [r7, #8]
    6d1c:	79fa      	ldrb	r2, [r7, #7]
    6d1e:	701a      	strb	r2, [r3, #0]
    memcpy(p, pData, len);
    6d20:	79fb      	ldrb	r3, [r7, #7]
    6d22:	461a      	mov	r2, r3
    6d24:	6839      	ldr	r1, [r7, #0]
    6d26:	68b8      	ldr	r0, [r7, #8]
    6d28:	f008 ff11 	bl	fb4e <memcpy>
    p += len;
    6d2c:	79fb      	ldrb	r3, [r7, #7]
    6d2e:	68ba      	ldr	r2, [r7, #8]
    6d30:	4413      	add	r3, r2
    6d32:	60bb      	str	r3, [r7, #8]
    memset(p, 0, (HCI_SCAN_DATA_LEN - len));
    6d34:	79fb      	ldrb	r3, [r7, #7]
    6d36:	f1c3 031f 	rsb	r3, r3, #31
    6d3a:	461a      	mov	r2, r3
    6d3c:	2100      	movs	r1, #0
    6d3e:	68b8      	ldr	r0, [r7, #8]
    6d40:	f008 ff2a 	bl	fb98 <memset>
    hciCmdSend(pBuf);
    6d44:	68f8      	ldr	r0, [r7, #12]
    6d46:	f7ff fadf 	bl	6308 <hciCmdSend>
  }
}
    6d4a:	bf00      	nop
    6d4c:	3710      	adds	r7, #16
    6d4e:	46bd      	mov	sp, r7
    6d50:	bd80      	pop	{r7, pc}

00006d52 <HciLeStartEncryptionCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeStartEncryptionCmd(uint16_t handle, uint8_t *pRand, uint16_t diversifier, uint8_t *pKey)
{
    6d52:	b580      	push	{r7, lr}
    6d54:	b086      	sub	sp, #24
    6d56:	af00      	add	r7, sp, #0
    6d58:	60b9      	str	r1, [r7, #8]
    6d5a:	607b      	str	r3, [r7, #4]
    6d5c:	4603      	mov	r3, r0
    6d5e:	81fb      	strh	r3, [r7, #14]
    6d60:	4613      	mov	r3, r2
    6d62:	81bb      	strh	r3, [r7, #12]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_START_ENCRYPTION, HCI_LEN_LE_START_ENCRYPTION)) != NULL)
    6d64:	211c      	movs	r1, #28
    6d66:	f242 0019 	movw	r0, #8217	; 0x2019
    6d6a:	f7ff fa9f 	bl	62ac <hciCmdAlloc>
    6d6e:	6178      	str	r0, [r7, #20]
    6d70:	697b      	ldr	r3, [r7, #20]
    6d72:	2b00      	cmp	r3, #0
    6d74:	d02e      	beq.n	6dd4 <HciLeStartEncryptionCmd+0x82>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6d76:	697b      	ldr	r3, [r7, #20]
    6d78:	3303      	adds	r3, #3
    6d7a:	613b      	str	r3, [r7, #16]
    UINT16_TO_BSTREAM(p, handle);
    6d7c:	693b      	ldr	r3, [r7, #16]
    6d7e:	1c5a      	adds	r2, r3, #1
    6d80:	613a      	str	r2, [r7, #16]
    6d82:	89fa      	ldrh	r2, [r7, #14]
    6d84:	b2d2      	uxtb	r2, r2
    6d86:	701a      	strb	r2, [r3, #0]
    6d88:	693b      	ldr	r3, [r7, #16]
    6d8a:	1c5a      	adds	r2, r3, #1
    6d8c:	613a      	str	r2, [r7, #16]
    6d8e:	89fa      	ldrh	r2, [r7, #14]
    6d90:	0a12      	lsrs	r2, r2, #8
    6d92:	b292      	uxth	r2, r2
    6d94:	b2d2      	uxtb	r2, r2
    6d96:	701a      	strb	r2, [r3, #0]
    memcpy(p, pRand, HCI_RAND_LEN);
    6d98:	2208      	movs	r2, #8
    6d9a:	68b9      	ldr	r1, [r7, #8]
    6d9c:	6938      	ldr	r0, [r7, #16]
    6d9e:	f008 fed6 	bl	fb4e <memcpy>
    p += HCI_RAND_LEN;
    6da2:	693b      	ldr	r3, [r7, #16]
    6da4:	3308      	adds	r3, #8
    6da6:	613b      	str	r3, [r7, #16]
    UINT16_TO_BSTREAM(p, diversifier);
    6da8:	693b      	ldr	r3, [r7, #16]
    6daa:	1c5a      	adds	r2, r3, #1
    6dac:	613a      	str	r2, [r7, #16]
    6dae:	89ba      	ldrh	r2, [r7, #12]
    6db0:	b2d2      	uxtb	r2, r2
    6db2:	701a      	strb	r2, [r3, #0]
    6db4:	693b      	ldr	r3, [r7, #16]
    6db6:	1c5a      	adds	r2, r3, #1
    6db8:	613a      	str	r2, [r7, #16]
    6dba:	89ba      	ldrh	r2, [r7, #12]
    6dbc:	0a12      	lsrs	r2, r2, #8
    6dbe:	b292      	uxth	r2, r2
    6dc0:	b2d2      	uxtb	r2, r2
    6dc2:	701a      	strb	r2, [r3, #0]
    memcpy(p, pKey, HCI_KEY_LEN);
    6dc4:	2210      	movs	r2, #16
    6dc6:	6879      	ldr	r1, [r7, #4]
    6dc8:	6938      	ldr	r0, [r7, #16]
    6dca:	f008 fec0 	bl	fb4e <memcpy>
    hciCmdSend(pBuf);
    6dce:	6978      	ldr	r0, [r7, #20]
    6dd0:	f7ff fa9a 	bl	6308 <hciCmdSend>
  }
}
    6dd4:	bf00      	nop
    6dd6:	3718      	adds	r7, #24
    6dd8:	46bd      	mov	sp, r7
    6dda:	bd80      	pop	{r7, pc}

00006ddc <HciReadBdAddrCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadBdAddrCmd(void)
{
    6ddc:	b580      	push	{r7, lr}
    6dde:	b082      	sub	sp, #8
    6de0:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_BD_ADDR, HCI_LEN_READ_BD_ADDR)) != NULL)
    6de2:	2100      	movs	r1, #0
    6de4:	f241 0009 	movw	r0, #4105	; 0x1009
    6de8:	f7ff fa60 	bl	62ac <hciCmdAlloc>
    6dec:	6078      	str	r0, [r7, #4]
    6dee:	687b      	ldr	r3, [r7, #4]
    6df0:	2b00      	cmp	r3, #0
    6df2:	d002      	beq.n	6dfa <HciReadBdAddrCmd+0x1e>
  {
    hciCmdSend(pBuf);
    6df4:	6878      	ldr	r0, [r7, #4]
    6df6:	f7ff fa87 	bl	6308 <hciCmdSend>
  }
}
    6dfa:	bf00      	nop
    6dfc:	3708      	adds	r7, #8
    6dfe:	46bd      	mov	sp, r7
    6e00:	bd80      	pop	{r7, pc}

00006e02 <HciReadRssiCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadRssiCmd(uint16_t handle)
{
    6e02:	b580      	push	{r7, lr}
    6e04:	b084      	sub	sp, #16
    6e06:	af00      	add	r7, sp, #0
    6e08:	4603      	mov	r3, r0
    6e0a:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_RSSI, HCI_LEN_READ_RSSI)) != NULL)
    6e0c:	2102      	movs	r1, #2
    6e0e:	f241 4005 	movw	r0, #5125	; 0x1405
    6e12:	f7ff fa4b 	bl	62ac <hciCmdAlloc>
    6e16:	60f8      	str	r0, [r7, #12]
    6e18:	68fb      	ldr	r3, [r7, #12]
    6e1a:	2b00      	cmp	r3, #0
    6e1c:	d013      	beq.n	6e46 <HciReadRssiCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6e1e:	68fb      	ldr	r3, [r7, #12]
    6e20:	3303      	adds	r3, #3
    6e22:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
    6e24:	68bb      	ldr	r3, [r7, #8]
    6e26:	1c5a      	adds	r2, r3, #1
    6e28:	60ba      	str	r2, [r7, #8]
    6e2a:	88fa      	ldrh	r2, [r7, #6]
    6e2c:	b2d2      	uxtb	r2, r2
    6e2e:	701a      	strb	r2, [r3, #0]
    6e30:	68bb      	ldr	r3, [r7, #8]
    6e32:	1c5a      	adds	r2, r3, #1
    6e34:	60ba      	str	r2, [r7, #8]
    6e36:	88fa      	ldrh	r2, [r7, #6]
    6e38:	0a12      	lsrs	r2, r2, #8
    6e3a:	b292      	uxth	r2, r2
    6e3c:	b2d2      	uxtb	r2, r2
    6e3e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    6e40:	68f8      	ldr	r0, [r7, #12]
    6e42:	f7ff fa61 	bl	6308 <hciCmdSend>
  }
}
    6e46:	bf00      	nop
    6e48:	3710      	adds	r7, #16
    6e4a:	46bd      	mov	sp, r7
    6e4c:	bd80      	pop	{r7, pc}
	...

00006e50 <HciResetCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetCmd(void)
{
    6e50:	b580      	push	{r7, lr}
    6e52:	b082      	sub	sp, #8
    6e54:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  /* initialize numCmdPkts for special case of reset command */
  hciCmdCb.numCmdPkts = 1;
    6e56:	4b09      	ldr	r3, [pc, #36]	; (6e7c <HciResetCmd+0x2c>)
    6e58:	2201      	movs	r2, #1
    6e5a:	769a      	strb	r2, [r3, #26]

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_RESET, HCI_LEN_RESET)) != NULL)
    6e5c:	2100      	movs	r1, #0
    6e5e:	f640 4003 	movw	r0, #3075	; 0xc03
    6e62:	f7ff fa23 	bl	62ac <hciCmdAlloc>
    6e66:	6078      	str	r0, [r7, #4]
    6e68:	687b      	ldr	r3, [r7, #4]
    6e6a:	2b00      	cmp	r3, #0
    6e6c:	d002      	beq.n	6e74 <HciResetCmd+0x24>
  {
    hciCmdSend(pBuf);
    6e6e:	6878      	ldr	r0, [r7, #4]
    6e70:	f7ff fa4a 	bl	6308 <hciCmdSend>
  }
}
    6e74:	bf00      	nop
    6e76:	3708      	adds	r7, #8
    6e78:	46bd      	mov	sp, r7
    6e7a:	bd80      	pop	{r7, pc}
    6e7c:	10002614 	.word	0x10002614

00006e80 <HciSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetEventMaskCmd(uint8_t *pEventMask)
{
    6e80:	b580      	push	{r7, lr}
    6e82:	b084      	sub	sp, #16
    6e84:	af00      	add	r7, sp, #0
    6e86:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK, HCI_LEN_SET_EVENT_MASK)) != NULL)
    6e88:	2108      	movs	r1, #8
    6e8a:	f640 4001 	movw	r0, #3073	; 0xc01
    6e8e:	f7ff fa0d 	bl	62ac <hciCmdAlloc>
    6e92:	60f8      	str	r0, [r7, #12]
    6e94:	68fb      	ldr	r3, [r7, #12]
    6e96:	2b00      	cmp	r3, #0
    6e98:	d00a      	beq.n	6eb0 <HciSetEventMaskCmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6e9a:	68fb      	ldr	r3, [r7, #12]
    6e9c:	3303      	adds	r3, #3
    6e9e:	60bb      	str	r3, [r7, #8]
    memcpy(p, pEventMask, HCI_EVT_MASK_LEN);
    6ea0:	2208      	movs	r2, #8
    6ea2:	6879      	ldr	r1, [r7, #4]
    6ea4:	68b8      	ldr	r0, [r7, #8]
    6ea6:	f008 fe52 	bl	fb4e <memcpy>
    hciCmdSend(pBuf);
    6eaa:	68f8      	ldr	r0, [r7, #12]
    6eac:	f7ff fa2c 	bl	6308 <hciCmdSend>
  }
}
    6eb0:	bf00      	nop
    6eb2:	3710      	adds	r7, #16
    6eb4:	46bd      	mov	sp, r7
    6eb6:	bd80      	pop	{r7, pc}

00006eb8 <HciSetEventMaskPage2Cmd>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciSetEventMaskPage2Cmd(uint8_t *pEventMask)
{
    6eb8:	b580      	push	{r7, lr}
    6eba:	b084      	sub	sp, #16
    6ebc:	af00      	add	r7, sp, #0
    6ebe:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK_PAGE2, HCI_LEN_SET_EVENT_MASK_PAGE2)) != NULL)
    6ec0:	2108      	movs	r1, #8
    6ec2:	f640 4063 	movw	r0, #3171	; 0xc63
    6ec6:	f7ff f9f1 	bl	62ac <hciCmdAlloc>
    6eca:	60f8      	str	r0, [r7, #12]
    6ecc:	68fb      	ldr	r3, [r7, #12]
    6ece:	2b00      	cmp	r3, #0
    6ed0:	d00a      	beq.n	6ee8 <HciSetEventMaskPage2Cmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6ed2:	68fb      	ldr	r3, [r7, #12]
    6ed4:	3303      	adds	r3, #3
    6ed6:	60bb      	str	r3, [r7, #8]
    memcpy(p, pEventMask, HCI_EVT_MASK_PAGE_2_LEN);
    6ed8:	2208      	movs	r2, #8
    6eda:	6879      	ldr	r1, [r7, #4]
    6edc:	68b8      	ldr	r0, [r7, #8]
    6ede:	f008 fe36 	bl	fb4e <memcpy>
    hciCmdSend(pBuf);
    6ee2:	68f8      	ldr	r0, [r7, #12]
    6ee4:	f7ff fa10 	bl	6308 <hciCmdSend>
  }
}
    6ee8:	bf00      	nop
    6eea:	3710      	adds	r7, #16
    6eec:	46bd      	mov	sp, r7
    6eee:	bd80      	pop	{r7, pc}

00006ef0 <HciWriteAuthPayloadTimeout>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciWriteAuthPayloadTimeout(uint16_t handle, uint16_t timeout)
{
    6ef0:	b580      	push	{r7, lr}
    6ef2:	b084      	sub	sp, #16
    6ef4:	af00      	add	r7, sp, #0
    6ef6:	4603      	mov	r3, r0
    6ef8:	460a      	mov	r2, r1
    6efa:	80fb      	strh	r3, [r7, #6]
    6efc:	4613      	mov	r3, r2
    6efe:	80bb      	strh	r3, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO, HCI_LEN_WRITE_AUTH_PAYLOAD_TO)) != NULL)
    6f00:	2104      	movs	r1, #4
    6f02:	f640 407c 	movw	r0, #3196	; 0xc7c
    6f06:	f7ff f9d1 	bl	62ac <hciCmdAlloc>
    6f0a:	60f8      	str	r0, [r7, #12]
    6f0c:	68fb      	ldr	r3, [r7, #12]
    6f0e:	2b00      	cmp	r3, #0
    6f10:	d021      	beq.n	6f56 <HciWriteAuthPayloadTimeout+0x66>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6f12:	68fb      	ldr	r3, [r7, #12]
    6f14:	3303      	adds	r3, #3
    6f16:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
    6f18:	68bb      	ldr	r3, [r7, #8]
    6f1a:	1c5a      	adds	r2, r3, #1
    6f1c:	60ba      	str	r2, [r7, #8]
    6f1e:	88fa      	ldrh	r2, [r7, #6]
    6f20:	b2d2      	uxtb	r2, r2
    6f22:	701a      	strb	r2, [r3, #0]
    6f24:	68bb      	ldr	r3, [r7, #8]
    6f26:	1c5a      	adds	r2, r3, #1
    6f28:	60ba      	str	r2, [r7, #8]
    6f2a:	88fa      	ldrh	r2, [r7, #6]
    6f2c:	0a12      	lsrs	r2, r2, #8
    6f2e:	b292      	uxth	r2, r2
    6f30:	b2d2      	uxtb	r2, r2
    6f32:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, timeout);
    6f34:	68bb      	ldr	r3, [r7, #8]
    6f36:	1c5a      	adds	r2, r3, #1
    6f38:	60ba      	str	r2, [r7, #8]
    6f3a:	88ba      	ldrh	r2, [r7, #4]
    6f3c:	b2d2      	uxtb	r2, r2
    6f3e:	701a      	strb	r2, [r3, #0]
    6f40:	68bb      	ldr	r3, [r7, #8]
    6f42:	1c5a      	adds	r2, r3, #1
    6f44:	60ba      	str	r2, [r7, #8]
    6f46:	88ba      	ldrh	r2, [r7, #4]
    6f48:	0a12      	lsrs	r2, r2, #8
    6f4a:	b292      	uxth	r2, r2
    6f4c:	b2d2      	uxtb	r2, r2
    6f4e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    6f50:	68f8      	ldr	r0, [r7, #12]
    6f52:	f7ff f9d9 	bl	6308 <hciCmdSend>
  }
}
    6f56:	bf00      	nop
    6f58:	3710      	adds	r7, #16
    6f5a:	46bd      	mov	sp, r7
    6f5c:	bd80      	pop	{r7, pc}

00006f5e <HciLeAddDeviceToResolvingListCmd>:
 *  \return None.
 */
/*************************************************************************************************/
void HciLeAddDeviceToResolvingListCmd(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr,
                                      const uint8_t *pPeerIrk, const uint8_t *pLocalIrk)
{
    6f5e:	b580      	push	{r7, lr}
    6f60:	b086      	sub	sp, #24
    6f62:	af00      	add	r7, sp, #0
    6f64:	60b9      	str	r1, [r7, #8]
    6f66:	607a      	str	r2, [r7, #4]
    6f68:	603b      	str	r3, [r7, #0]
    6f6a:	4603      	mov	r3, r0
    6f6c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_RES_LIST, HCI_LEN_LE_ADD_DEV_RES_LIST)) != NULL)
    6f6e:	2127      	movs	r1, #39	; 0x27
    6f70:	f242 0027 	movw	r0, #8231	; 0x2027
    6f74:	f7ff f99a 	bl	62ac <hciCmdAlloc>
    6f78:	6178      	str	r0, [r7, #20]
    6f7a:	697b      	ldr	r3, [r7, #20]
    6f7c:	2b00      	cmp	r3, #0
    6f7e:	d01e      	beq.n	6fbe <HciLeAddDeviceToResolvingListCmd+0x60>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6f80:	697b      	ldr	r3, [r7, #20]
    6f82:	3303      	adds	r3, #3
    6f84:	613b      	str	r3, [r7, #16]
    UINT8_TO_BSTREAM(p, peerAddrType);
    6f86:	693b      	ldr	r3, [r7, #16]
    6f88:	1c5a      	adds	r2, r3, #1
    6f8a:	613a      	str	r2, [r7, #16]
    6f8c:	7bfa      	ldrb	r2, [r7, #15]
    6f8e:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
    6f90:	68b9      	ldr	r1, [r7, #8]
    6f92:	6938      	ldr	r0, [r7, #16]
    6f94:	f005 ff72 	bl	ce7c <BdaCpy>
    6f98:	693b      	ldr	r3, [r7, #16]
    6f9a:	3306      	adds	r3, #6
    6f9c:	613b      	str	r3, [r7, #16]
    memcpy(p, pPeerIrk, HCI_KEY_LEN);
    6f9e:	2210      	movs	r2, #16
    6fa0:	6879      	ldr	r1, [r7, #4]
    6fa2:	6938      	ldr	r0, [r7, #16]
    6fa4:	f008 fdd3 	bl	fb4e <memcpy>
    p += HCI_KEY_LEN;
    6fa8:	693b      	ldr	r3, [r7, #16]
    6faa:	3310      	adds	r3, #16
    6fac:	613b      	str	r3, [r7, #16]
    memcpy(p, pLocalIrk, HCI_KEY_LEN);
    6fae:	2210      	movs	r2, #16
    6fb0:	6839      	ldr	r1, [r7, #0]
    6fb2:	6938      	ldr	r0, [r7, #16]
    6fb4:	f008 fdcb 	bl	fb4e <memcpy>
    hciCmdSend(pBuf);
    6fb8:	6978      	ldr	r0, [r7, #20]
    6fba:	f7ff f9a5 	bl	6308 <hciCmdSend>
  }
}
    6fbe:	bf00      	nop
    6fc0:	3718      	adds	r7, #24
    6fc2:	46bd      	mov	sp, r7
    6fc4:	bd80      	pop	{r7, pc}

00006fc6 <HciLeRemoveDeviceFromResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRemoveDeviceFromResolvingList(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr)
{
    6fc6:	b580      	push	{r7, lr}
    6fc8:	b084      	sub	sp, #16
    6fca:	af00      	add	r7, sp, #0
    6fcc:	4603      	mov	r3, r0
    6fce:	6039      	str	r1, [r7, #0]
    6fd0:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REMOVE_DEV_RES_LIST, HCI_LEN_LE_REMOVE_DEV_RES_LIST)) != NULL)
    6fd2:	2107      	movs	r1, #7
    6fd4:	f242 0028 	movw	r0, #8232	; 0x2028
    6fd8:	f7ff f968 	bl	62ac <hciCmdAlloc>
    6fdc:	60f8      	str	r0, [r7, #12]
    6fde:	68fb      	ldr	r3, [r7, #12]
    6fe0:	2b00      	cmp	r3, #0
    6fe2:	d011      	beq.n	7008 <HciLeRemoveDeviceFromResolvingList+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    6fe4:	68fb      	ldr	r3, [r7, #12]
    6fe6:	3303      	adds	r3, #3
    6fe8:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, peerAddrType);
    6fea:	68bb      	ldr	r3, [r7, #8]
    6fec:	1c5a      	adds	r2, r3, #1
    6fee:	60ba      	str	r2, [r7, #8]
    6ff0:	79fa      	ldrb	r2, [r7, #7]
    6ff2:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
    6ff4:	6839      	ldr	r1, [r7, #0]
    6ff6:	68b8      	ldr	r0, [r7, #8]
    6ff8:	f005 ff40 	bl	ce7c <BdaCpy>
    6ffc:	68bb      	ldr	r3, [r7, #8]
    6ffe:	3306      	adds	r3, #6
    7000:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
    7002:	68f8      	ldr	r0, [r7, #12]
    7004:	f7ff f980 	bl	6308 <hciCmdSend>
  }
}
    7008:	bf00      	nop
    700a:	3710      	adds	r7, #16
    700c:	46bd      	mov	sp, r7
    700e:	bd80      	pop	{r7, pc}

00007010 <HciLeClearResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearResolvingList(void)
{
    7010:	b580      	push	{r7, lr}
    7012:	b082      	sub	sp, #8
    7014:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_RES_LIST, HCI_LEN_LE_CLEAR_RES_LIST)) != NULL)
    7016:	2100      	movs	r1, #0
    7018:	f242 0029 	movw	r0, #8233	; 0x2029
    701c:	f7ff f946 	bl	62ac <hciCmdAlloc>
    7020:	6078      	str	r0, [r7, #4]
    7022:	687b      	ldr	r3, [r7, #4]
    7024:	2b00      	cmp	r3, #0
    7026:	d002      	beq.n	702e <HciLeClearResolvingList+0x1e>
  {
    hciCmdSend(pBuf);
    7028:	6878      	ldr	r0, [r7, #4]
    702a:	f7ff f96d 	bl	6308 <hciCmdSend>
  }
}
    702e:	bf00      	nop
    7030:	3708      	adds	r7, #8
    7032:	46bd      	mov	sp, r7
    7034:	bd80      	pop	{r7, pc}

00007036 <HciLeReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadResolvingListSize(void)
{
    7036:	b580      	push	{r7, lr}
    7038:	b082      	sub	sp, #8
    703a:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_RES_LIST_SIZE, HCI_LEN_LE_READ_RES_LIST_SIZE)) != NULL)
    703c:	2100      	movs	r1, #0
    703e:	f242 002a 	movw	r0, #8234	; 0x202a
    7042:	f7ff f933 	bl	62ac <hciCmdAlloc>
    7046:	6078      	str	r0, [r7, #4]
    7048:	687b      	ldr	r3, [r7, #4]
    704a:	2b00      	cmp	r3, #0
    704c:	d002      	beq.n	7054 <HciLeReadResolvingListSize+0x1e>
  {
    hciCmdSend(pBuf);
    704e:	6878      	ldr	r0, [r7, #4]
    7050:	f7ff f95a 	bl	6308 <hciCmdSend>
  }
}
    7054:	bf00      	nop
    7056:	3708      	adds	r7, #8
    7058:	46bd      	mov	sp, r7
    705a:	bd80      	pop	{r7, pc}

0000705c <HciLeReadPeerResolvableAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadPeerResolvableAddr(uint8_t addrType, const uint8_t *pIdentityAddr)
{
    705c:	b580      	push	{r7, lr}
    705e:	b084      	sub	sp, #16
    7060:	af00      	add	r7, sp, #0
    7062:	4603      	mov	r3, r0
    7064:	6039      	str	r1, [r7, #0]
    7066:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_PEER_RES_ADDR, HCI_LEN_LE_READ_PEER_RES_ADDR)) != NULL)
    7068:	2107      	movs	r1, #7
    706a:	f242 002b 	movw	r0, #8235	; 0x202b
    706e:	f7ff f91d 	bl	62ac <hciCmdAlloc>
    7072:	60f8      	str	r0, [r7, #12]
    7074:	68fb      	ldr	r3, [r7, #12]
    7076:	2b00      	cmp	r3, #0
    7078:	d011      	beq.n	709e <HciLeReadPeerResolvableAddr+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    707a:	68fb      	ldr	r3, [r7, #12]
    707c:	3303      	adds	r3, #3
    707e:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
    7080:	68bb      	ldr	r3, [r7, #8]
    7082:	1c5a      	adds	r2, r3, #1
    7084:	60ba      	str	r2, [r7, #8]
    7086:	79fa      	ldrb	r2, [r7, #7]
    7088:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pIdentityAddr);
    708a:	6839      	ldr	r1, [r7, #0]
    708c:	68b8      	ldr	r0, [r7, #8]
    708e:	f005 fef5 	bl	ce7c <BdaCpy>
    7092:	68bb      	ldr	r3, [r7, #8]
    7094:	3306      	adds	r3, #6
    7096:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
    7098:	68f8      	ldr	r0, [r7, #12]
    709a:	f7ff f935 	bl	6308 <hciCmdSend>
  }
}
    709e:	bf00      	nop
    70a0:	3710      	adds	r7, #16
    70a2:	46bd      	mov	sp, r7
    70a4:	bd80      	pop	{r7, pc}

000070a6 <HciLeReadLocalResolvableAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadLocalResolvableAddr(uint8_t addrType, const uint8_t *pIdentityAddr)
{
    70a6:	b580      	push	{r7, lr}
    70a8:	b084      	sub	sp, #16
    70aa:	af00      	add	r7, sp, #0
    70ac:	4603      	mov	r3, r0
    70ae:	6039      	str	r1, [r7, #0]
    70b0:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_RES_ADDR, HCI_LEN_LE_READ_LOCAL_RES_ADDR)) != NULL)
    70b2:	2107      	movs	r1, #7
    70b4:	f242 002c 	movw	r0, #8236	; 0x202c
    70b8:	f7ff f8f8 	bl	62ac <hciCmdAlloc>
    70bc:	60f8      	str	r0, [r7, #12]
    70be:	68fb      	ldr	r3, [r7, #12]
    70c0:	2b00      	cmp	r3, #0
    70c2:	d011      	beq.n	70e8 <HciLeReadLocalResolvableAddr+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    70c4:	68fb      	ldr	r3, [r7, #12]
    70c6:	3303      	adds	r3, #3
    70c8:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
    70ca:	68bb      	ldr	r3, [r7, #8]
    70cc:	1c5a      	adds	r2, r3, #1
    70ce:	60ba      	str	r2, [r7, #8]
    70d0:	79fa      	ldrb	r2, [r7, #7]
    70d2:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pIdentityAddr);
    70d4:	6839      	ldr	r1, [r7, #0]
    70d6:	68b8      	ldr	r0, [r7, #8]
    70d8:	f005 fed0 	bl	ce7c <BdaCpy>
    70dc:	68bb      	ldr	r3, [r7, #8]
    70de:	3306      	adds	r3, #6
    70e0:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
    70e2:	68f8      	ldr	r0, [r7, #12]
    70e4:	f7ff f910 	bl	6308 <hciCmdSend>
  }
}
    70e8:	bf00      	nop
    70ea:	3710      	adds	r7, #16
    70ec:	46bd      	mov	sp, r7
    70ee:	bd80      	pop	{r7, pc}

000070f0 <HciLeSetAddrResolutionEnable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAddrResolutionEnable(uint8_t enable)
{
    70f0:	b580      	push	{r7, lr}
    70f2:	b084      	sub	sp, #16
    70f4:	af00      	add	r7, sp, #0
    70f6:	4603      	mov	r3, r0
    70f8:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADDR_RES_ENABLE, HCI_LEN_LE_SET_ADDR_RES_ENABLE)) != NULL)
    70fa:	2101      	movs	r1, #1
    70fc:	f242 002d 	movw	r0, #8237	; 0x202d
    7100:	f7ff f8d4 	bl	62ac <hciCmdAlloc>
    7104:	60f8      	str	r0, [r7, #12]
    7106:	68fb      	ldr	r3, [r7, #12]
    7108:	2b00      	cmp	r3, #0
    710a:	d00a      	beq.n	7122 <HciLeSetAddrResolutionEnable+0x32>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    710c:	68fb      	ldr	r3, [r7, #12]
    710e:	3303      	adds	r3, #3
    7110:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, enable);
    7112:	68bb      	ldr	r3, [r7, #8]
    7114:	1c5a      	adds	r2, r3, #1
    7116:	60ba      	str	r2, [r7, #8]
    7118:	79fa      	ldrb	r2, [r7, #7]
    711a:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    711c:	68f8      	ldr	r0, [r7, #12]
    711e:	f7ff f8f3 	bl	6308 <hciCmdSend>
  }
}
    7122:	bf00      	nop
    7124:	3710      	adds	r7, #16
    7126:	46bd      	mov	sp, r7
    7128:	bd80      	pop	{r7, pc}

0000712a <HciLeSetResolvablePrivateAddrTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetResolvablePrivateAddrTimeout(uint16_t rpaTimeout)
{
    712a:	b580      	push	{r7, lr}
    712c:	b084      	sub	sp, #16
    712e:	af00      	add	r7, sp, #0
    7130:	4603      	mov	r3, r0
    7132:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_RES_PRIV_ADDR_TO, HCI_LEN_LE_SET_RES_PRIV_ADDR_TO)) != NULL)
    7134:	2102      	movs	r1, #2
    7136:	f242 002e 	movw	r0, #8238	; 0x202e
    713a:	f7ff f8b7 	bl	62ac <hciCmdAlloc>
    713e:	60f8      	str	r0, [r7, #12]
    7140:	68fb      	ldr	r3, [r7, #12]
    7142:	2b00      	cmp	r3, #0
    7144:	d013      	beq.n	716e <HciLeSetResolvablePrivateAddrTimeout+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    7146:	68fb      	ldr	r3, [r7, #12]
    7148:	3303      	adds	r3, #3
    714a:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, rpaTimeout);
    714c:	68bb      	ldr	r3, [r7, #8]
    714e:	1c5a      	adds	r2, r3, #1
    7150:	60ba      	str	r2, [r7, #8]
    7152:	88fa      	ldrh	r2, [r7, #6]
    7154:	b2d2      	uxtb	r2, r2
    7156:	701a      	strb	r2, [r3, #0]
    7158:	68bb      	ldr	r3, [r7, #8]
    715a:	1c5a      	adds	r2, r3, #1
    715c:	60ba      	str	r2, [r7, #8]
    715e:	88fa      	ldrh	r2, [r7, #6]
    7160:	0a12      	lsrs	r2, r2, #8
    7162:	b292      	uxth	r2, r2
    7164:	b2d2      	uxtb	r2, r2
    7166:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    7168:	68f8      	ldr	r0, [r7, #12]
    716a:	f7ff f8cd 	bl	6308 <hciCmdSend>
  }
}
    716e:	bf00      	nop
    7170:	3710      	adds	r7, #16
    7172:	46bd      	mov	sp, r7
    7174:	bd80      	pop	{r7, pc}

00007176 <HciLeSetPrivacyModeCmd>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void HciLeSetPrivacyModeCmd(uint8_t addrType, uint8_t *pAddr, uint8_t mode)
{
    7176:	b580      	push	{r7, lr}
    7178:	b084      	sub	sp, #16
    717a:	af00      	add	r7, sp, #0
    717c:	4603      	mov	r3, r0
    717e:	6039      	str	r1, [r7, #0]
    7180:	71fb      	strb	r3, [r7, #7]
    7182:	4613      	mov	r3, r2
    7184:	71bb      	strb	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_PRIVACY_MODE, HCI_LEN_LE_SET_PRIVACY_MODE)) != NULL)
    7186:	2108      	movs	r1, #8
    7188:	f242 004e 	movw	r0, #8270	; 0x204e
    718c:	f7ff f88e 	bl	62ac <hciCmdAlloc>
    7190:	60f8      	str	r0, [r7, #12]
    7192:	68fb      	ldr	r3, [r7, #12]
    7194:	2b00      	cmp	r3, #0
    7196:	d016      	beq.n	71c6 <HciLeSetPrivacyModeCmd+0x50>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    7198:	68fb      	ldr	r3, [r7, #12]
    719a:	3303      	adds	r3, #3
    719c:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
    719e:	68bb      	ldr	r3, [r7, #8]
    71a0:	1c5a      	adds	r2, r3, #1
    71a2:	60ba      	str	r2, [r7, #8]
    71a4:	79fa      	ldrb	r2, [r7, #7]
    71a6:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
    71a8:	6839      	ldr	r1, [r7, #0]
    71aa:	68b8      	ldr	r0, [r7, #8]
    71ac:	f005 fe66 	bl	ce7c <BdaCpy>
    71b0:	68bb      	ldr	r3, [r7, #8]
    71b2:	3306      	adds	r3, #6
    71b4:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, mode);
    71b6:	68bb      	ldr	r3, [r7, #8]
    71b8:	1c5a      	adds	r2, r3, #1
    71ba:	60ba      	str	r2, [r7, #8]
    71bc:	79ba      	ldrb	r2, [r7, #6]
    71be:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    71c0:	68f8      	ldr	r0, [r7, #12]
    71c2:	f7ff f8a1 	bl	6308 <hciCmdSend>
  }
}
    71c6:	bf00      	nop
    71c8:	3710      	adds	r7, #16
    71ca:	46bd      	mov	sp, r7
    71cc:	bd80      	pop	{r7, pc}

000071ce <HciLeTransmitterTestCmd>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void HciLeTransmitterTestCmd(uint8_t TX_Channel, uint8_t len_of_test_data, uint8_t packet_payload)
{
    71ce:	b580      	push	{r7, lr}
    71d0:	b084      	sub	sp, #16
    71d2:	af00      	add	r7, sp, #0
    71d4:	4603      	mov	r3, r0
    71d6:	71fb      	strb	r3, [r7, #7]
    71d8:	460b      	mov	r3, r1
    71da:	71bb      	strb	r3, [r7, #6]
    71dc:	4613      	mov	r3, r2
    71de:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_TRANSMITTER_TEST, HCI_LEN_LE_TRANSMITTER_TEST)) != NULL)
    71e0:	2103      	movs	r1, #3
    71e2:	f242 001e 	movw	r0, #8222	; 0x201e
    71e6:	f7ff f861 	bl	62ac <hciCmdAlloc>
    71ea:	60f8      	str	r0, [r7, #12]
    71ec:	68fb      	ldr	r3, [r7, #12]
    71ee:	2b00      	cmp	r3, #0
    71f0:	d014      	beq.n	721c <HciLeTransmitterTestCmd+0x4e>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    71f2:	68fb      	ldr	r3, [r7, #12]
    71f4:	3303      	adds	r3, #3
    71f6:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, TX_Channel);
    71f8:	68bb      	ldr	r3, [r7, #8]
    71fa:	1c5a      	adds	r2, r3, #1
    71fc:	60ba      	str	r2, [r7, #8]
    71fe:	79fa      	ldrb	r2, [r7, #7]
    7200:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, len_of_test_data);
    7202:	68bb      	ldr	r3, [r7, #8]
    7204:	1c5a      	adds	r2, r3, #1
    7206:	60ba      	str	r2, [r7, #8]
    7208:	79ba      	ldrb	r2, [r7, #6]
    720a:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, packet_payload);
    720c:	68bb      	ldr	r3, [r7, #8]
    720e:	1c5a      	adds	r2, r3, #1
    7210:	60ba      	str	r2, [r7, #8]
    7212:	797a      	ldrb	r2, [r7, #5]
    7214:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    7216:	68f8      	ldr	r0, [r7, #12]
    7218:	f7ff f876 	bl	6308 <hciCmdSend>
  }
}
    721c:	bf00      	nop
    721e:	3710      	adds	r7, #16
    7220:	46bd      	mov	sp, r7
    7222:	bd80      	pop	{r7, pc}

00007224 <HciLeTestEndCmd>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void HciLeTestEndCmd(void)
{
    7224:	b580      	push	{r7, lr}
    7226:	b082      	sub	sp, #8
    7228:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_TEST_END, HCI_LEN_LE_TEST_END)) != NULL)
    722a:	2100      	movs	r1, #0
    722c:	f242 001f 	movw	r0, #8223	; 0x201f
    7230:	f7ff f83c 	bl	62ac <hciCmdAlloc>
    7234:	6078      	str	r0, [r7, #4]
    7236:	687b      	ldr	r3, [r7, #4]
    7238:	2b00      	cmp	r3, #0
    723a:	d002      	beq.n	7242 <HciLeTestEndCmd+0x1e>
  {
    hciCmdSend(pBuf);
    723c:	6878      	ldr	r0, [r7, #4]
    723e:	f7ff f863 	bl	6308 <hciCmdSend>
  }
}
    7242:	bf00      	nop
    7244:	3708      	adds	r7, #8
    7246:	46bd      	mov	sp, r7
    7248:	bd80      	pop	{r7, pc}

0000724a <HciVendorSpecificCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciVendorSpecificCmd(uint16_t opcode, uint8_t len, uint8_t *pData)
{
    724a:	b580      	push	{r7, lr}
    724c:	b084      	sub	sp, #16
    724e:	af00      	add	r7, sp, #0
    7250:	4603      	mov	r3, r0
    7252:	603a      	str	r2, [r7, #0]
    7254:	80fb      	strh	r3, [r7, #6]
    7256:	460b      	mov	r3, r1
    7258:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(opcode, len)) != NULL)
    725a:	797b      	ldrb	r3, [r7, #5]
    725c:	b29a      	uxth	r2, r3
    725e:	88fb      	ldrh	r3, [r7, #6]
    7260:	4611      	mov	r1, r2
    7262:	4618      	mov	r0, r3
    7264:	f7ff f822 	bl	62ac <hciCmdAlloc>
    7268:	60f8      	str	r0, [r7, #12]
    726a:	68fb      	ldr	r3, [r7, #12]
    726c:	2b00      	cmp	r3, #0
    726e:	d00b      	beq.n	7288 <HciVendorSpecificCmd+0x3e>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    7270:	68fb      	ldr	r3, [r7, #12]
    7272:	3303      	adds	r3, #3
    7274:	60bb      	str	r3, [r7, #8]
    memcpy(p, pData, len);
    7276:	797b      	ldrb	r3, [r7, #5]
    7278:	461a      	mov	r2, r3
    727a:	6839      	ldr	r1, [r7, #0]
    727c:	68b8      	ldr	r0, [r7, #8]
    727e:	f008 fc66 	bl	fb4e <memcpy>
    hciCmdSend(pBuf);
    7282:	68f8      	ldr	r0, [r7, #12]
    7284:	f7ff f840 	bl	6308 <hciCmdSend>
  }
}
    7288:	bf00      	nop
    728a:	3710      	adds	r7, #16
    728c:	46bd      	mov	sp, r7
    728e:	bd80      	pop	{r7, pc}

00007290 <hciCoreConnAlloc>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreConnAlloc(uint16_t handle)
{
    7290:	b580      	push	{r7, lr}
    7292:	b084      	sub	sp, #16
    7294:	af00      	add	r7, sp, #0
    7296:	4603      	mov	r3, r0
    7298:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
    729a:	4b13      	ldr	r3, [pc, #76]	; (72e8 <hciCoreConnAlloc+0x58>)
    729c:	60bb      	str	r3, [r7, #8]

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    729e:	2308      	movs	r3, #8
    72a0:	73fb      	strb	r3, [r7, #15]
    72a2:	e018      	b.n	72d6 <hciCoreConnAlloc+0x46>
  {
    if (pConn->handle == HCI_HANDLE_NONE)
    72a4:	68bb      	ldr	r3, [r7, #8]
    72a6:	8a1b      	ldrh	r3, [r3, #16]
    72a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    72ac:	4293      	cmp	r3, r2
    72ae:	d10c      	bne.n	72ca <hciCoreConnAlloc+0x3a>
    {
      /* allocate and initialize */
      pConn->handle = handle;
    72b0:	68bb      	ldr	r3, [r7, #8]
    72b2:	88fa      	ldrh	r2, [r7, #6]
    72b4:	821a      	strh	r2, [r3, #16]
      pConn->flowDisabled = FALSE;
    72b6:	68bb      	ldr	r3, [r7, #8]
    72b8:	2200      	movs	r2, #0
    72ba:	75da      	strb	r2, [r3, #23]
      pConn->outBufs = 0;
    72bc:	68bb      	ldr	r3, [r7, #8]
    72be:	2200      	movs	r2, #0
    72c0:	765a      	strb	r2, [r3, #25]
      pConn->queuedBufs = 0;
    72c2:	68bb      	ldr	r3, [r7, #8]
    72c4:	2200      	movs	r2, #0
    72c6:	761a      	strb	r2, [r3, #24]

      return;
    72c8:	e00b      	b.n	72e2 <hciCoreConnAlloc+0x52>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    72ca:	7bfb      	ldrb	r3, [r7, #15]
    72cc:	3b01      	subs	r3, #1
    72ce:	73fb      	strb	r3, [r7, #15]
    72d0:	68bb      	ldr	r3, [r7, #8]
    72d2:	331c      	adds	r3, #28
    72d4:	60bb      	str	r3, [r7, #8]
    72d6:	7bfb      	ldrb	r3, [r7, #15]
    72d8:	2b00      	cmp	r3, #0
    72da:	d1e3      	bne.n	72a4 <hciCoreConnAlloc+0x14>
    }
  }

  HCI_TRACE_WARN0("HCI conn struct alloc failure");
    72dc:	4803      	ldr	r0, [pc, #12]	; (72ec <hciCoreConnAlloc+0x5c>)
    72de:	f003 f825 	bl	a32c <WsfTrace>
}
    72e2:	3710      	adds	r7, #16
    72e4:	46bd      	mov	sp, r7
    72e6:	bd80      	pop	{r7, pc}
    72e8:	10002630 	.word	0x10002630
    72ec:	0000fbb8 	.word	0x0000fbb8

000072f0 <hciCoreConnFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreConnFree(uint16_t handle)
{
    72f0:	b580      	push	{r7, lr}
    72f2:	b084      	sub	sp, #16
    72f4:	af00      	add	r7, sp, #0
    72f6:	4603      	mov	r3, r0
    72f8:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
    72fa:	4b20      	ldr	r3, [pc, #128]	; (737c <hciCoreConnFree+0x8c>)
    72fc:	60bb      	str	r3, [r7, #8]

  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    72fe:	2308      	movs	r3, #8
    7300:	73fb      	strb	r3, [r7, #15]
    7302:	e02f      	b.n	7364 <hciCoreConnFree+0x74>
  {
    if (pConn->handle == handle)
    7304:	68bb      	ldr	r3, [r7, #8]
    7306:	8a1b      	ldrh	r3, [r3, #16]
    7308:	88fa      	ldrh	r2, [r7, #6]
    730a:	429a      	cmp	r2, r3
    730c:	d124      	bne.n	7358 <hciCoreConnFree+0x68>
    {
      /* free any fragmenting ACL packet */
      if (pConn->pTxAclPkt != NULL)
    730e:	68bb      	ldr	r3, [r7, #8]
    7310:	681b      	ldr	r3, [r3, #0]
    7312:	2b00      	cmp	r3, #0
    7314:	d007      	beq.n	7326 <hciCoreConnFree+0x36>
      {
        WsfMsgFree(pConn->pTxAclPkt);
    7316:	68bb      	ldr	r3, [r7, #8]
    7318:	681b      	ldr	r3, [r3, #0]
    731a:	4618      	mov	r0, r3
    731c:	f003 fd96 	bl	ae4c <WsfMsgFree>
        pConn->pTxAclPkt = NULL;
    7320:	68bb      	ldr	r3, [r7, #8]
    7322:	2200      	movs	r2, #0
    7324:	601a      	str	r2, [r3, #0]
      }
      pConn->fragmenting = FALSE;
    7326:	68bb      	ldr	r3, [r7, #8]
    7328:	2200      	movs	r2, #0
    732a:	759a      	strb	r2, [r3, #22]

      if (pConn->pRxAclPkt != NULL)
    732c:	68bb      	ldr	r3, [r7, #8]
    732e:	689b      	ldr	r3, [r3, #8]
    7330:	2b00      	cmp	r3, #0
    7332:	d007      	beq.n	7344 <hciCoreConnFree+0x54>
      {
        WsfMsgFree(pConn->pRxAclPkt);
    7334:	68bb      	ldr	r3, [r7, #8]
    7336:	689b      	ldr	r3, [r3, #8]
    7338:	4618      	mov	r0, r3
    733a:	f003 fd87 	bl	ae4c <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
    733e:	68bb      	ldr	r3, [r7, #8]
    7340:	2200      	movs	r2, #0
    7342:	609a      	str	r2, [r3, #8]
      }

      /* free structure */
      pConn->handle = HCI_HANDLE_NONE;
    7344:	68bb      	ldr	r3, [r7, #8]
    7346:	f64f 72ff 	movw	r2, #65535	; 0xffff
    734a:	821a      	strh	r2, [r3, #16]

      /* optional: iterate through tx ACL queue and free any buffers with this handle */

      /* outstanding buffers are now available; service TX data path */
      hciCoreTxReady(pConn->outBufs);
    734c:	68bb      	ldr	r3, [r7, #8]
    734e:	7e5b      	ldrb	r3, [r3, #25]
    7350:	4618      	mov	r0, r3
    7352:	f000 f8a3 	bl	749c <hciCoreTxReady>

      return;
    7356:	e00d      	b.n	7374 <hciCoreConnFree+0x84>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    7358:	7bfb      	ldrb	r3, [r7, #15]
    735a:	3b01      	subs	r3, #1
    735c:	73fb      	strb	r3, [r7, #15]
    735e:	68bb      	ldr	r3, [r7, #8]
    7360:	331c      	adds	r3, #28
    7362:	60bb      	str	r3, [r7, #8]
    7364:	7bfb      	ldrb	r3, [r7, #15]
    7366:	2b00      	cmp	r3, #0
    7368:	d1cc      	bne.n	7304 <hciCoreConnFree+0x14>
    }
  }

  HCI_TRACE_WARN1("hciCoreConnFree handle not found:%u", handle);
    736a:	88fb      	ldrh	r3, [r7, #6]
    736c:	4619      	mov	r1, r3
    736e:	4804      	ldr	r0, [pc, #16]	; (7380 <hciCoreConnFree+0x90>)
    7370:	f002 ffdc 	bl	a32c <WsfTrace>
}
    7374:	3710      	adds	r7, #16
    7376:	46bd      	mov	sp, r7
    7378:	bd80      	pop	{r7, pc}
    737a:	bf00      	nop
    737c:	10002630 	.word	0x10002630
    7380:	0000fbd8 	.word	0x0000fbd8

00007384 <hciCoreConnByHandle>:
 *
 *  \return Pointer to connection structure or NULL if not found.
 */
/*************************************************************************************************/
hciCoreConn_t *hciCoreConnByHandle(uint16_t handle)
{
    7384:	b480      	push	{r7}
    7386:	b085      	sub	sp, #20
    7388:	af00      	add	r7, sp, #0
    738a:	4603      	mov	r3, r0
    738c:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
    738e:	4b0e      	ldr	r3, [pc, #56]	; (73c8 <hciCoreConnByHandle+0x44>)
    7390:	60bb      	str	r3, [r7, #8]

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    7392:	2308      	movs	r3, #8
    7394:	73fb      	strb	r3, [r7, #15]
    7396:	e00c      	b.n	73b2 <hciCoreConnByHandle+0x2e>
  {
    if (pConn->handle == handle)
    7398:	68bb      	ldr	r3, [r7, #8]
    739a:	8a1b      	ldrh	r3, [r3, #16]
    739c:	88fa      	ldrh	r2, [r7, #6]
    739e:	429a      	cmp	r2, r3
    73a0:	d101      	bne.n	73a6 <hciCoreConnByHandle+0x22>
    {
      return pConn;
    73a2:	68bb      	ldr	r3, [r7, #8]
    73a4:	e009      	b.n	73ba <hciCoreConnByHandle+0x36>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    73a6:	7bfb      	ldrb	r3, [r7, #15]
    73a8:	3b01      	subs	r3, #1
    73aa:	73fb      	strb	r3, [r7, #15]
    73ac:	68bb      	ldr	r3, [r7, #8]
    73ae:	331c      	adds	r3, #28
    73b0:	60bb      	str	r3, [r7, #8]
    73b2:	7bfb      	ldrb	r3, [r7, #15]
    73b4:	2b00      	cmp	r3, #0
    73b6:	d1ef      	bne.n	7398 <hciCoreConnByHandle+0x14>
    }
  }

  return NULL;
    73b8:	2300      	movs	r3, #0
}
    73ba:	4618      	mov	r0, r3
    73bc:	3714      	adds	r7, #20
    73be:	46bd      	mov	sp, r7
    73c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    73c4:	4770      	bx	lr
    73c6:	bf00      	nop
    73c8:	10002630 	.word	0x10002630

000073cc <hciCoreNextConnFragment>:
 *
 *  \return Pointer to connection structure or NULL if not found.
 */
/*************************************************************************************************/
static hciCoreConn_t *hciCoreNextConnFragment(void)
{
    73cc:	b480      	push	{r7}
    73ce:	b083      	sub	sp, #12
    73d0:	af00      	add	r7, sp, #0
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
    73d2:	4b10      	ldr	r3, [pc, #64]	; (7414 <hciCoreNextConnFragment+0x48>)
    73d4:	603b      	str	r3, [r7, #0]

  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    73d6:	2308      	movs	r3, #8
    73d8:	71fb      	strb	r3, [r7, #7]
    73da:	e011      	b.n	7400 <hciCoreNextConnFragment+0x34>
  {
    if (pConn->handle != HCI_HANDLE_NONE && pConn->fragmenting)
    73dc:	683b      	ldr	r3, [r7, #0]
    73de:	8a1b      	ldrh	r3, [r3, #16]
    73e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    73e4:	4293      	cmp	r3, r2
    73e6:	d005      	beq.n	73f4 <hciCoreNextConnFragment+0x28>
    73e8:	683b      	ldr	r3, [r7, #0]
    73ea:	7d9b      	ldrb	r3, [r3, #22]
    73ec:	2b00      	cmp	r3, #0
    73ee:	d001      	beq.n	73f4 <hciCoreNextConnFragment+0x28>
    {
      return pConn;
    73f0:	683b      	ldr	r3, [r7, #0]
    73f2:	e009      	b.n	7408 <hciCoreNextConnFragment+0x3c>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    73f4:	79fb      	ldrb	r3, [r7, #7]
    73f6:	3b01      	subs	r3, #1
    73f8:	71fb      	strb	r3, [r7, #7]
    73fa:	683b      	ldr	r3, [r7, #0]
    73fc:	331c      	adds	r3, #28
    73fe:	603b      	str	r3, [r7, #0]
    7400:	79fb      	ldrb	r3, [r7, #7]
    7402:	2b00      	cmp	r3, #0
    7404:	d1ea      	bne.n	73dc <hciCoreNextConnFragment+0x10>
    }
  }

  return NULL;
    7406:	2300      	movs	r3, #0
}
    7408:	4618      	mov	r0, r3
    740a:	370c      	adds	r7, #12
    740c:	46bd      	mov	sp, r7
    740e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7412:	4770      	bx	lr
    7414:	10002630 	.word	0x10002630

00007418 <hciCoreConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreConnOpen(uint16_t handle)
{
    7418:	b580      	push	{r7, lr}
    741a:	b082      	sub	sp, #8
    741c:	af00      	add	r7, sp, #0
    741e:	4603      	mov	r3, r0
    7420:	80fb      	strh	r3, [r7, #6]
  /* allocate connection structure */
  hciCoreConnAlloc(handle);
    7422:	88fb      	ldrh	r3, [r7, #6]
    7424:	4618      	mov	r0, r3
    7426:	f7ff ff33 	bl	7290 <hciCoreConnAlloc>
}
    742a:	bf00      	nop
    742c:	3708      	adds	r7, #8
    742e:	46bd      	mov	sp, r7
    7430:	bd80      	pop	{r7, pc}

00007432 <hciCoreConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreConnClose(uint16_t handle)
{
    7432:	b580      	push	{r7, lr}
    7434:	b082      	sub	sp, #8
    7436:	af00      	add	r7, sp, #0
    7438:	4603      	mov	r3, r0
    743a:	80fb      	strh	r3, [r7, #6]
  /* free connection structure */
  hciCoreConnFree(handle);
    743c:	88fb      	ldrh	r3, [r7, #6]
    743e:	4618      	mov	r0, r3
    7440:	f7ff ff56 	bl	72f0 <hciCoreConnFree>
}
    7444:	bf00      	nop
    7446:	3708      	adds	r7, #8
    7448:	46bd      	mov	sp, r7
    744a:	bd80      	pop	{r7, pc}

0000744c <hciCoreSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreSendAclData(hciCoreConn_t *pConn, uint8_t *pData)
{
    744c:	b580      	push	{r7, lr}
    744e:	b082      	sub	sp, #8
    7450:	af00      	add	r7, sp, #0
    7452:	6078      	str	r0, [r7, #4]
    7454:	6039      	str	r1, [r7, #0]
  /* increment outstanding buf count for handle */
  pConn->outBufs++;
    7456:	687b      	ldr	r3, [r7, #4]
    7458:	7e5b      	ldrb	r3, [r3, #25]
    745a:	3301      	adds	r3, #1
    745c:	b2da      	uxtb	r2, r3
    745e:	687b      	ldr	r3, [r7, #4]
    7460:	765a      	strb	r2, [r3, #25]

  /* send to transport */
  hciTrSendAclData(pConn, pData);
    7462:	6839      	ldr	r1, [r7, #0]
    7464:	6878      	ldr	r0, [r7, #4]
    7466:	f002 fab5 	bl	99d4 <hciTrSendAclData>

  /* decrement available buffer count */
  if (hciCoreCb.availBufs > 0)
    746a:	4b0a      	ldr	r3, [pc, #40]	; (7494 <hciCoreSendAclData+0x48>)
    746c:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
    7470:	2b00      	cmp	r3, #0
    7472:	d008      	beq.n	7486 <hciCoreSendAclData+0x3a>
  {
    hciCoreCb.availBufs--;
    7474:	4b07      	ldr	r3, [pc, #28]	; (7494 <hciCoreSendAclData+0x48>)
    7476:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
    747a:	3b01      	subs	r3, #1
    747c:	b2da      	uxtb	r2, r3
    747e:	4b05      	ldr	r3, [pc, #20]	; (7494 <hciCoreSendAclData+0x48>)
    7480:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
  }
  else
  {
    HCI_TRACE_WARN0("hciCoreSendAclData availBufs=0");
  }
}
    7484:	e002      	b.n	748c <hciCoreSendAclData+0x40>
    HCI_TRACE_WARN0("hciCoreSendAclData availBufs=0");
    7486:	4804      	ldr	r0, [pc, #16]	; (7498 <hciCoreSendAclData+0x4c>)
    7488:	f002 ff50 	bl	a32c <WsfTrace>
}
    748c:	bf00      	nop
    748e:	3708      	adds	r7, #8
    7490:	46bd      	mov	sp, r7
    7492:	bd80      	pop	{r7, pc}
    7494:	10002630 	.word	0x10002630
    7498:	0000fbfc 	.word	0x0000fbfc

0000749c <hciCoreTxReady>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxReady(uint8_t bufs)
{
    749c:	b580      	push	{r7, lr}
    749e:	b086      	sub	sp, #24
    74a0:	af00      	add	r7, sp, #0
    74a2:	4603      	mov	r3, r0
    74a4:	71fb      	strb	r3, [r7, #7]
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* increment available buffers, with ceiling */
  if (bufs > 0)
    74a6:	79fb      	ldrb	r3, [r7, #7]
    74a8:	2b00      	cmp	r3, #0
    74aa:	d055      	beq.n	7558 <hciCoreTxReady+0xbc>
  {
    hciCoreCb.availBufs += bufs;
    74ac:	4b30      	ldr	r3, [pc, #192]	; (7570 <hciCoreTxReady+0xd4>)
    74ae:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
    74b2:	79fb      	ldrb	r3, [r7, #7]
    74b4:	4413      	add	r3, r2
    74b6:	b2da      	uxtb	r2, r3
    74b8:	4b2d      	ldr	r3, [pc, #180]	; (7570 <hciCoreTxReady+0xd4>)
    74ba:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
    if (hciCoreCb.availBufs > hciCoreCb.numBufs)
    74be:	4b2c      	ldr	r3, [pc, #176]	; (7570 <hciCoreTxReady+0xd4>)
    74c0:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
    74c4:	4b2a      	ldr	r3, [pc, #168]	; (7570 <hciCoreTxReady+0xd4>)
    74c6:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    74ca:	429a      	cmp	r2, r3
    74cc:	d944      	bls.n	7558 <hciCoreTxReady+0xbc>
    {
      hciCoreCb.availBufs = hciCoreCb.numBufs;
    74ce:	4b28      	ldr	r3, [pc, #160]	; (7570 <hciCoreTxReady+0xd4>)
    74d0:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
    74d4:	4b26      	ldr	r3, [pc, #152]	; (7570 <hciCoreTxReady+0xd4>)
    74d6:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102

  /* service ACL data queue and send as many buffers as we can */
#if defined(AM_PART_APOLLO3) && !defined(NO_APOLLO3_BUFFER_WORKAROUND)
  while (hciCoreCb.availBufs > 0 && hciCmdCb.numCmdPkts > 0)
#else
  while (hciCoreCb.availBufs > 0)
    74da:	e03d      	b.n	7558 <hciCoreTxReady+0xbc>
#endif
  {
    /* send continuation of any fragments first */
    if (hciCoreTxAclContinue(NULL) == FALSE)
    74dc:	2000      	movs	r0, #0
    74de:	f000 f89b 	bl	7618 <hciCoreTxAclContinue>
    74e2:	4603      	mov	r3, r0
    74e4:	2b00      	cmp	r3, #0
    74e6:	d137      	bne.n	7558 <hciCoreTxReady+0xbc>
    {
      /* if no fragments then check for any queued ACL data */
      if ((pData = WsfMsgDeq(&hciCoreCb.aclQueue, &handlerId)) != NULL)
    74e8:	f107 030b 	add.w	r3, r7, #11
    74ec:	4619      	mov	r1, r3
    74ee:	4821      	ldr	r0, [pc, #132]	; (7574 <hciCoreTxReady+0xd8>)
    74f0:	f003 fce6 	bl	aec0 <WsfMsgDeq>
    74f4:	6178      	str	r0, [r7, #20]
    74f6:	697b      	ldr	r3, [r7, #20]
    74f8:	2b00      	cmp	r3, #0
    74fa:	d033      	beq.n	7564 <hciCoreTxReady+0xc8>
      {
        /* parse handle and length */
        BYTES_TO_UINT16(handle, pData);
    74fc:	697b      	ldr	r3, [r7, #20]
    74fe:	781b      	ldrb	r3, [r3, #0]
    7500:	b29a      	uxth	r2, r3
    7502:	697b      	ldr	r3, [r7, #20]
    7504:	3301      	adds	r3, #1
    7506:	781b      	ldrb	r3, [r3, #0]
    7508:	b29b      	uxth	r3, r3
    750a:	021b      	lsls	r3, r3, #8
    750c:	b29b      	uxth	r3, r3
    750e:	4413      	add	r3, r2
    7510:	827b      	strh	r3, [r7, #18]
        BYTES_TO_UINT16(len, &pData[2]);
    7512:	697b      	ldr	r3, [r7, #20]
    7514:	3302      	adds	r3, #2
    7516:	781b      	ldrb	r3, [r3, #0]
    7518:	b29a      	uxth	r2, r3
    751a:	697b      	ldr	r3, [r7, #20]
    751c:	3303      	adds	r3, #3
    751e:	781b      	ldrb	r3, [r3, #0]
    7520:	b29b      	uxth	r3, r3
    7522:	021b      	lsls	r3, r3, #8
    7524:	b29b      	uxth	r3, r3
    7526:	4413      	add	r3, r2
    7528:	823b      	strh	r3, [r7, #16]

        /* look up conn structure and send data */
        if ((pConn = hciCoreConnByHandle(handle)) != NULL)
    752a:	8a7b      	ldrh	r3, [r7, #18]
    752c:	4618      	mov	r0, r3
    752e:	f7ff ff29 	bl	7384 <hciCoreConnByHandle>
    7532:	60f8      	str	r0, [r7, #12]
    7534:	68fb      	ldr	r3, [r7, #12]
    7536:	2b00      	cmp	r3, #0
    7538:	d006      	beq.n	7548 <hciCoreTxReady+0xac>
        {
          hciCoreTxAclStart(pConn, len, pData);
    753a:	8a3b      	ldrh	r3, [r7, #16]
    753c:	697a      	ldr	r2, [r7, #20]
    753e:	4619      	mov	r1, r3
    7540:	68f8      	ldr	r0, [r7, #12]
    7542:	f000 f81b 	bl	757c <hciCoreTxAclStart>
    7546:	e007      	b.n	7558 <hciCoreTxReady+0xbc>
        }
        /* handle not found, connection must be closed */
        else
        {
          /* discard buffer */
          WsfMsgFree(pData);
    7548:	6978      	ldr	r0, [r7, #20]
    754a:	f003 fc7f 	bl	ae4c <WsfMsgFree>

          HCI_TRACE_WARN1("hciCoreTxReady discarding buffer, handle=%u", handle);
    754e:	8a7b      	ldrh	r3, [r7, #18]
    7550:	4619      	mov	r1, r3
    7552:	4809      	ldr	r0, [pc, #36]	; (7578 <hciCoreTxReady+0xdc>)
    7554:	f002 feea 	bl	a32c <WsfTrace>
  while (hciCoreCb.availBufs > 0)
    7558:	4b05      	ldr	r3, [pc, #20]	; (7570 <hciCoreTxReady+0xd4>)
    755a:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
    755e:	2b00      	cmp	r3, #0
    7560:	d1bc      	bne.n	74dc <hciCoreTxReady+0x40>
        /* no fragments or queued data to send; we're done */
        break;
      }
    }
  }
}
    7562:	e000      	b.n	7566 <hciCoreTxReady+0xca>
        break;
    7564:	bf00      	nop
}
    7566:	bf00      	nop
    7568:	3718      	adds	r7, #24
    756a:	46bd      	mov	sp, r7
    756c:	bd80      	pop	{r7, pc}
    756e:	bf00      	nop
    7570:	10002630 	.word	0x10002630
    7574:	10002720 	.word	0x10002720
    7578:	0000fc1c 	.word	0x0000fc1c

0000757c <hciCoreTxAclStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclStart(hciCoreConn_t *pConn, uint16_t len, uint8_t *pData)
{
    757c:	b580      	push	{r7, lr}
    757e:	b086      	sub	sp, #24
    7580:	af00      	add	r7, sp, #0
    7582:	60f8      	str	r0, [r7, #12]
    7584:	460b      	mov	r3, r1
    7586:	607a      	str	r2, [r7, #4]
    7588:	817b      	strh	r3, [r7, #10]
  uint16_t hciLen;

  /* make sure not already fragmenting on this connection */
  WSF_ASSERT(pConn->fragmenting == FALSE);

  hciLen = HciGetBufSize();
    758a:	f000 fbb9 	bl	7d00 <HciGetBufSize>
    758e:	4603      	mov	r3, r0
    7590:	82fb      	strh	r3, [r7, #22]

  HCI_TRACE_INFO1("hciCoreTxAclStart len=%u", len);
    7592:	897b      	ldrh	r3, [r7, #10]
    7594:	4619      	mov	r1, r3
    7596:	481e      	ldr	r0, [pc, #120]	; (7610 <hciCoreTxAclStart+0x94>)
    7598:	f002 fec8 	bl	a32c <WsfTrace>

  /* if acl len > controller acl buf len */
  if (len > hciLen)
    759c:	897a      	ldrh	r2, [r7, #10]
    759e:	8afb      	ldrh	r3, [r7, #22]
    75a0:	429a      	cmp	r2, r3
    75a2:	d92d      	bls.n	7600 <hciCoreTxAclStart+0x84>
  {
    /* store remaining acl len = acl len - hci acl buf len */
    pConn->txAclRemLen = len - hciLen;
    75a4:	897a      	ldrh	r2, [r7, #10]
    75a6:	8afb      	ldrh	r3, [r7, #22]
    75a8:	1ad3      	subs	r3, r2, r3
    75aa:	b29a      	uxth	r2, r3
    75ac:	68fb      	ldr	r3, [r7, #12]
    75ae:	825a      	strh	r2, [r3, #18]

    /* store position for next fragment */
    pConn->pNextTxFrag = pData + hciLen;
    75b0:	8afb      	ldrh	r3, [r7, #22]
    75b2:	687a      	ldr	r2, [r7, #4]
    75b4:	441a      	add	r2, r3
    75b6:	68fb      	ldr	r3, [r7, #12]
    75b8:	605a      	str	r2, [r3, #4]

    /* store information required for fragmentation */
    pConn->pTxAclPkt = pData;
    75ba:	68fb      	ldr	r3, [r7, #12]
    75bc:	687a      	ldr	r2, [r7, #4]
    75be:	601a      	str	r2, [r3, #0]
    pConn->fragmenting = TRUE;
    75c0:	68fb      	ldr	r3, [r7, #12]
    75c2:	2201      	movs	r2, #1
    75c4:	759a      	strb	r2, [r3, #22]

    /* set acl len in packet to hci acl buf len */
    UINT16_TO_BUF(&pData[2], hciLen);
    75c6:	687b      	ldr	r3, [r7, #4]
    75c8:	3302      	adds	r3, #2
    75ca:	8afa      	ldrh	r2, [r7, #22]
    75cc:	b2d2      	uxtb	r2, r2
    75ce:	701a      	strb	r2, [r3, #0]
    75d0:	687b      	ldr	r3, [r7, #4]
    75d2:	3303      	adds	r3, #3
    75d4:	8afa      	ldrh	r2, [r7, #22]
    75d6:	0a12      	lsrs	r2, r2, #8
    75d8:	b292      	uxth	r2, r2
    75da:	b2d2      	uxtb	r2, r2
    75dc:	701a      	strb	r2, [r3, #0]

    /* send the packet */
    hciCoreSendAclData(pConn, pData);
    75de:	6879      	ldr	r1, [r7, #4]
    75e0:	68f8      	ldr	r0, [r7, #12]
    75e2:	f7ff ff33 	bl	744c <hciCoreSendAclData>

    /* send additional fragments while there are HCI buffers available */
#if defined(AM_PART_APOLLO3) && !defined(NO_APOLLO3_BUFFER_WORKAROUND)
    while ((hciCoreCb.availBufs > 0) && hciCoreTxAclContinue(pConn) && (hciCmdCb.numCmdPkts > 0));
#else
    while ((hciCoreCb.availBufs > 0) && hciCoreTxAclContinue(pConn));
    75e6:	bf00      	nop
    75e8:	4b0a      	ldr	r3, [pc, #40]	; (7614 <hciCoreTxAclStart+0x98>)
    75ea:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
    75ee:	2b00      	cmp	r3, #0
    75f0:	d00a      	beq.n	7608 <hciCoreTxAclStart+0x8c>
    75f2:	68f8      	ldr	r0, [r7, #12]
    75f4:	f000 f810 	bl	7618 <hciCoreTxAclContinue>
    75f8:	4603      	mov	r3, r0
    75fa:	2b00      	cmp	r3, #0
    75fc:	d1f4      	bne.n	75e8 <hciCoreTxAclStart+0x6c>
  else
  {
    /* no fragmentation, just send the packet */
    hciCoreSendAclData(pConn, pData);
  }
}
    75fe:	e003      	b.n	7608 <hciCoreTxAclStart+0x8c>
    hciCoreSendAclData(pConn, pData);
    7600:	6879      	ldr	r1, [r7, #4]
    7602:	68f8      	ldr	r0, [r7, #12]
    7604:	f7ff ff22 	bl	744c <hciCoreSendAclData>
}
    7608:	bf00      	nop
    760a:	3718      	adds	r7, #24
    760c:	46bd      	mov	sp, r7
    760e:	bd80      	pop	{r7, pc}
    7610:	0000fc48 	.word	0x0000fc48
    7614:	10002630 	.word	0x10002630

00007618 <hciCoreTxAclContinue>:
 *
 *  \return TRUE if packet sent, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t hciCoreTxAclContinue(hciCoreConn_t *pConn)
{
    7618:	b590      	push	{r4, r7, lr}
    761a:	b085      	sub	sp, #20
    761c:	af00      	add	r7, sp, #0
    761e:	6078      	str	r0, [r7, #4]
  uint16_t aclLen;

  if (pConn == NULL)
    7620:	687b      	ldr	r3, [r7, #4]
    7622:	2b00      	cmp	r3, #0
    7624:	d102      	bne.n	762c <hciCoreTxAclContinue+0x14>
  {
    pConn = hciCoreNextConnFragment();
    7626:	f7ff fed1 	bl	73cc <hciCoreNextConnFragment>
    762a:	6078      	str	r0, [r7, #4]
  }

  if (pConn != NULL)
    762c:	687b      	ldr	r3, [r7, #4]
    762e:	2b00      	cmp	r3, #0
    7630:	d050      	beq.n	76d4 <hciCoreTxAclContinue+0xbc>
  {
    /* get next fragment length */
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
    7632:	687b      	ldr	r3, [r7, #4]
    7634:	8a5c      	ldrh	r4, [r3, #18]
    7636:	f000 fb63 	bl	7d00 <HciGetBufSize>
    763a:	4603      	mov	r3, r0
    763c:	429c      	cmp	r4, r3
    763e:	d202      	bcs.n	7646 <hciCoreTxAclContinue+0x2e>
    7640:	687b      	ldr	r3, [r7, #4]
    7642:	8a5b      	ldrh	r3, [r3, #18]
    7644:	e002      	b.n	764c <hciCoreTxAclContinue+0x34>
    7646:	f000 fb5b 	bl	7d00 <HciGetBufSize>
    764a:	4603      	mov	r3, r0
    764c:	81fb      	strh	r3, [r7, #14]

    if (aclLen > 0)
    764e:	89fb      	ldrh	r3, [r7, #14]
    7650:	2b00      	cmp	r3, #0
    7652:	d03f      	beq.n	76d4 <hciCoreTxAclContinue+0xbc>
    {
      /* decrement remaining length */
      pConn->txAclRemLen -= aclLen;
    7654:	687b      	ldr	r3, [r7, #4]
    7656:	8a5a      	ldrh	r2, [r3, #18]
    7658:	89fb      	ldrh	r3, [r7, #14]
    765a:	1ad3      	subs	r3, r2, r3
    765c:	b29a      	uxth	r2, r3
    765e:	687b      	ldr	r3, [r7, #4]
    7660:	825a      	strh	r2, [r3, #18]

      /* set handle in packet with continuation bit set */
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
    7662:	687b      	ldr	r3, [r7, #4]
    7664:	685b      	ldr	r3, [r3, #4]
    7666:	687a      	ldr	r2, [r7, #4]
    7668:	8a12      	ldrh	r2, [r2, #16]
    766a:	b2d2      	uxtb	r2, r2
    766c:	701a      	strb	r2, [r3, #0]
    766e:	687b      	ldr	r3, [r7, #4]
    7670:	685b      	ldr	r3, [r3, #4]
    7672:	3301      	adds	r3, #1
    7674:	687a      	ldr	r2, [r7, #4]
    7676:	8a12      	ldrh	r2, [r2, #16]
    7678:	0a12      	lsrs	r2, r2, #8
    767a:	b292      	uxth	r2, r2
    767c:	f042 0210 	orr.w	r2, r2, #16
    7680:	b292      	uxth	r2, r2
    7682:	b2d2      	uxtb	r2, r2
    7684:	701a      	strb	r2, [r3, #0]

      /* set acl len in packet */
      UINT16_TO_BUF(&(pConn->pNextTxFrag[2]), aclLen);
    7686:	687b      	ldr	r3, [r7, #4]
    7688:	685b      	ldr	r3, [r3, #4]
    768a:	3302      	adds	r3, #2
    768c:	89fa      	ldrh	r2, [r7, #14]
    768e:	b2d2      	uxtb	r2, r2
    7690:	701a      	strb	r2, [r3, #0]
    7692:	687b      	ldr	r3, [r7, #4]
    7694:	685b      	ldr	r3, [r3, #4]
    7696:	3303      	adds	r3, #3
    7698:	89fa      	ldrh	r2, [r7, #14]
    769a:	0a12      	lsrs	r2, r2, #8
    769c:	b292      	uxth	r2, r2
    769e:	b2d2      	uxtb	r2, r2
    76a0:	701a      	strb	r2, [r3, #0]

      HCI_TRACE_INFO2("hciCoreTxAclContinue aclLen=%u remLen=%u", aclLen, pConn->txAclRemLen);
    76a2:	89f9      	ldrh	r1, [r7, #14]
    76a4:	687b      	ldr	r3, [r7, #4]
    76a6:	8a5b      	ldrh	r3, [r3, #18]
    76a8:	461a      	mov	r2, r3
    76aa:	480d      	ldr	r0, [pc, #52]	; (76e0 <hciCoreTxAclContinue+0xc8>)
    76ac:	f002 fe3e 	bl	a32c <WsfTrace>

      /* send the packet */
      hciCoreSendAclData(pConn, pConn->pNextTxFrag);
    76b0:	687b      	ldr	r3, [r7, #4]
    76b2:	685b      	ldr	r3, [r3, #4]
    76b4:	4619      	mov	r1, r3
    76b6:	6878      	ldr	r0, [r7, #4]
    76b8:	f7ff fec8 	bl	744c <hciCoreSendAclData>

      /* set up pointer to next fragment */
      if (pConn->txAclRemLen > 0)
    76bc:	687b      	ldr	r3, [r7, #4]
    76be:	8a5b      	ldrh	r3, [r3, #18]
    76c0:	2b00      	cmp	r3, #0
    76c2:	d005      	beq.n	76d0 <hciCoreTxAclContinue+0xb8>
      {
        pConn->pNextTxFrag += aclLen;
    76c4:	687b      	ldr	r3, [r7, #4]
    76c6:	685a      	ldr	r2, [r3, #4]
    76c8:	89fb      	ldrh	r3, [r7, #14]
    76ca:	441a      	add	r2, r3
    76cc:	687b      	ldr	r3, [r7, #4]
    76ce:	605a      	str	r2, [r3, #4]
      }

      return TRUE;
    76d0:	2301      	movs	r3, #1
    76d2:	e000      	b.n	76d6 <hciCoreTxAclContinue+0xbe>
    }
  }

  return FALSE;
    76d4:	2300      	movs	r3, #0
}
    76d6:	4618      	mov	r0, r3
    76d8:	3714      	adds	r7, #20
    76da:	46bd      	mov	sp, r7
    76dc:	bd90      	pop	{r4, r7, pc}
    76de:	bf00      	nop
    76e0:	0000fc64 	.word	0x0000fc64

000076e4 <hciCoreTxAclComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclComplete(hciCoreConn_t *pConn, uint8_t *pData)
{
    76e4:	b580      	push	{r7, lr}
    76e6:	b082      	sub	sp, #8
    76e8:	af00      	add	r7, sp, #0
    76ea:	6078      	str	r0, [r7, #4]
    76ec:	6039      	str	r1, [r7, #0]
  /* if fragmenting */
  if (pConn->fragmenting)
    76ee:	687b      	ldr	r3, [r7, #4]
    76f0:	7d9b      	ldrb	r3, [r3, #22]
    76f2:	2b00      	cmp	r3, #0
    76f4:	d012      	beq.n	771c <hciCoreTxAclComplete+0x38>
  {
    /* check if all fragments sent */
    if (pConn->txAclRemLen == 0)
    76f6:	687b      	ldr	r3, [r7, #4]
    76f8:	8a5b      	ldrh	r3, [r3, #18]
    76fa:	2b00      	cmp	r3, #0
    76fc:	d114      	bne.n	7728 <hciCoreTxAclComplete+0x44>
    {
      /* free original buffer */
      WsfMsgFree(pConn->pTxAclPkt);
    76fe:	687b      	ldr	r3, [r7, #4]
    7700:	681b      	ldr	r3, [r3, #0]
    7702:	4618      	mov	r0, r3
    7704:	f003 fba2 	bl	ae4c <WsfMsgFree>
      pConn->pTxAclPkt = NULL;
    7708:	687b      	ldr	r3, [r7, #4]
    770a:	2200      	movs	r2, #0
    770c:	601a      	str	r2, [r3, #0]
      pConn->fragmenting = FALSE;
    770e:	687b      	ldr	r3, [r7, #4]
    7710:	2200      	movs	r2, #0
    7712:	759a      	strb	r2, [r3, #22]
      HCI_TRACE_INFO0("hciCoreTxAclComplete free pTxAclPkt");
    7714:	4806      	ldr	r0, [pc, #24]	; (7730 <hciCoreTxAclComplete+0x4c>)
    7716:	f002 fe09 	bl	a32c <WsfTrace>
  }
  else if (pData != NULL)
  {
    WsfMsgFree(pData);
  }
}
    771a:	e005      	b.n	7728 <hciCoreTxAclComplete+0x44>
  else if (pData != NULL)
    771c:	683b      	ldr	r3, [r7, #0]
    771e:	2b00      	cmp	r3, #0
    7720:	d002      	beq.n	7728 <hciCoreTxAclComplete+0x44>
    WsfMsgFree(pData);
    7722:	6838      	ldr	r0, [r7, #0]
    7724:	f003 fb92 	bl	ae4c <WsfMsgFree>
}
    7728:	bf00      	nop
    772a:	3708      	adds	r7, #8
    772c:	46bd      	mov	sp, r7
    772e:	bd80      	pop	{r7, pc}
    7730:	0000fc90 	.word	0x0000fc90

00007734 <hciCoreAclReassembly>:
 *
 *  \return pointer to ACL packet to send, or NULL if no packet to send.
 */
/*************************************************************************************************/
uint8_t *hciCoreAclReassembly(uint8_t *pData)
{
    7734:	b580      	push	{r7, lr}
    7736:	b088      	sub	sp, #32
    7738:	af00      	add	r7, sp, #0
    773a:	6078      	str	r0, [r7, #4]
  hciCoreConn_t *pConn;
  uint8_t       *pDataRtn = NULL;
    773c:	2300      	movs	r3, #0
    773e:	61fb      	str	r3, [r7, #28]
  uint16_t      handle;
  uint16_t      aclLen;
  uint16_t      l2cLen;
  uint16_t      pbf;
  bool_t        freeData = TRUE;
    7740:	2301      	movs	r3, #1
    7742:	76fb      	strb	r3, [r7, #27]

  BYTES_TO_UINT16(handle, pData);
    7744:	687b      	ldr	r3, [r7, #4]
    7746:	781b      	ldrb	r3, [r3, #0]
    7748:	b29a      	uxth	r2, r3
    774a:	687b      	ldr	r3, [r7, #4]
    774c:	3301      	adds	r3, #1
    774e:	781b      	ldrb	r3, [r3, #0]
    7750:	b29b      	uxth	r3, r3
    7752:	021b      	lsls	r3, r3, #8
    7754:	b29b      	uxth	r3, r3
    7756:	4413      	add	r3, r2
    7758:	833b      	strh	r3, [r7, #24]
  pbf = handle & HCI_PB_FLAG_MASK;
    775a:	8b3b      	ldrh	r3, [r7, #24]
    775c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
    7760:	82fb      	strh	r3, [r7, #22]
  handle &= HCI_HANDLE_MASK;
    7762:	8b3b      	ldrh	r3, [r7, #24]
    7764:	f3c3 030b 	ubfx	r3, r3, #0, #12
    7768:	833b      	strh	r3, [r7, #24]
  BYTES_TO_UINT16(aclLen, &pData[2]);
    776a:	687b      	ldr	r3, [r7, #4]
    776c:	3302      	adds	r3, #2
    776e:	781b      	ldrb	r3, [r3, #0]
    7770:	b29a      	uxth	r2, r3
    7772:	687b      	ldr	r3, [r7, #4]
    7774:	3303      	adds	r3, #3
    7776:	781b      	ldrb	r3, [r3, #0]
    7778:	b29b      	uxth	r3, r3
    777a:	021b      	lsls	r3, r3, #8
    777c:	b29b      	uxth	r3, r3
    777e:	4413      	add	r3, r2
    7780:	82bb      	strh	r3, [r7, #20]

  /* look up connection */
  if ((pConn = hciCoreConnByHandle(handle)) != NULL)
    7782:	8b3b      	ldrh	r3, [r7, #24]
    7784:	4618      	mov	r0, r3
    7786:	f7ff fdfd 	bl	7384 <hciCoreConnByHandle>
    778a:	6138      	str	r0, [r7, #16]
    778c:	693b      	ldr	r3, [r7, #16]
    778e:	2b00      	cmp	r3, #0
    7790:	f000 80d9 	beq.w	7946 <hciCoreAclReassembly+0x212>
  {
    /* if this is a start packet */
    if (pbf == HCI_PB_START_C2H)
    7794:	8afb      	ldrh	r3, [r7, #22]
    7796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    779a:	f040 8093 	bne.w	78c4 <hciCoreAclReassembly+0x190>
    {
      /* if currently reassembled packet not complete */
      if (pConn->pRxAclPkt != NULL)
    779e:	693b      	ldr	r3, [r7, #16]
    77a0:	689b      	ldr	r3, [r3, #8]
    77a2:	2b00      	cmp	r3, #0
    77a4:	d00c      	beq.n	77c0 <hciCoreAclReassembly+0x8c>
      {
        /* discard currently reassembled packet */
        WsfMsgFree(pConn->pRxAclPkt);
    77a6:	693b      	ldr	r3, [r7, #16]
    77a8:	689b      	ldr	r3, [r3, #8]
    77aa:	4618      	mov	r0, r3
    77ac:	f003 fb4e 	bl	ae4c <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
    77b0:	693b      	ldr	r3, [r7, #16]
    77b2:	2200      	movs	r2, #0
    77b4:	609a      	str	r2, [r3, #8]
        HCI_TRACE_WARN1("disarded hci rx pkt handle=0x%04x", handle);
    77b6:	8b3b      	ldrh	r3, [r7, #24]
    77b8:	4619      	mov	r1, r3
    77ba:	486c      	ldr	r0, [pc, #432]	; (796c <hciCoreAclReassembly+0x238>)
    77bc:	f002 fdb6 	bl	a32c <WsfTrace>
      }

      /* read l2cap length */
      if (aclLen >= L2C_HDR_LEN)
    77c0:	8abb      	ldrh	r3, [r7, #20]
    77c2:	2b03      	cmp	r3, #3
    77c4:	d978      	bls.n	78b8 <hciCoreAclReassembly+0x184>
      {
        BYTES_TO_UINT16(l2cLen, &pData[4]);
    77c6:	687b      	ldr	r3, [r7, #4]
    77c8:	3304      	adds	r3, #4
    77ca:	781b      	ldrb	r3, [r3, #0]
    77cc:	b29a      	uxth	r2, r3
    77ce:	687b      	ldr	r3, [r7, #4]
    77d0:	3305      	adds	r3, #5
    77d2:	781b      	ldrb	r3, [r3, #0]
    77d4:	b29b      	uxth	r3, r3
    77d6:	021b      	lsls	r3, r3, #8
    77d8:	b29b      	uxth	r3, r3
    77da:	4413      	add	r3, r2
    77dc:	81fb      	strh	r3, [r7, #14]

        /* check length vs. configured maximum */
        if ((l2cLen + L2C_HDR_LEN) > hciCoreCb.maxRxAclLen)
    77de:	89fb      	ldrh	r3, [r7, #14]
    77e0:	3304      	adds	r3, #4
    77e2:	4a63      	ldr	r2, [pc, #396]	; (7970 <hciCoreAclReassembly+0x23c>)
    77e4:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
    77e8:	4293      	cmp	r3, r2
    77ea:	dd05      	ble.n	77f8 <hciCoreAclReassembly+0xc4>
        {
          HCI_TRACE_WARN1("l2c len=0x%04x to large for reassembly", l2cLen);
    77ec:	89fb      	ldrh	r3, [r7, #14]
    77ee:	4619      	mov	r1, r3
    77f0:	4860      	ldr	r0, [pc, #384]	; (7974 <hciCoreAclReassembly+0x240>)
    77f2:	f002 fd9b 	bl	a32c <WsfTrace>
    77f6:	e0ad      	b.n	7954 <hciCoreAclReassembly+0x220>
        }
        /* if reassembly required */
        else if ((l2cLen + L2C_HDR_LEN) > aclLen)
    77f8:	89fb      	ldrh	r3, [r7, #14]
    77fa:	1d1a      	adds	r2, r3, #4
    77fc:	8abb      	ldrh	r3, [r7, #20]
    77fe:	429a      	cmp	r2, r3
    7800:	dd55      	ble.n	78ae <hciCoreAclReassembly+0x17a>
        {
          /* allocate buffer to store complete l2cap packet */
          if ((pConn->pRxAclPkt = WsfMsgDataAlloc(l2cLen + L2C_HDR_LEN + HCI_ACL_HDR_LEN, 0)) != NULL)
    7802:	89fb      	ldrh	r3, [r7, #14]
    7804:	3308      	adds	r3, #8
    7806:	b29b      	uxth	r3, r3
    7808:	2100      	movs	r1, #0
    780a:	4618      	mov	r0, r3
    780c:	f003 faf2 	bl	adf4 <WsfMsgDataAlloc>
    7810:	4602      	mov	r2, r0
    7812:	693b      	ldr	r3, [r7, #16]
    7814:	609a      	str	r2, [r3, #8]
    7816:	693b      	ldr	r3, [r7, #16]
    7818:	689b      	ldr	r3, [r3, #8]
    781a:	2b00      	cmp	r3, #0
    781c:	d040      	beq.n	78a0 <hciCoreAclReassembly+0x16c>
          {
            /* store buffer for reassembly */
            pConn->pNextRxFrag = pConn->pRxAclPkt;
    781e:	693b      	ldr	r3, [r7, #16]
    7820:	689a      	ldr	r2, [r3, #8]
    7822:	693b      	ldr	r3, [r7, #16]
    7824:	60da      	str	r2, [r3, #12]

            /* build acl header and copy data */
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, handle);
    7826:	693b      	ldr	r3, [r7, #16]
    7828:	68db      	ldr	r3, [r3, #12]
    782a:	1c59      	adds	r1, r3, #1
    782c:	693a      	ldr	r2, [r7, #16]
    782e:	60d1      	str	r1, [r2, #12]
    7830:	8b3a      	ldrh	r2, [r7, #24]
    7832:	b2d2      	uxtb	r2, r2
    7834:	701a      	strb	r2, [r3, #0]
    7836:	693b      	ldr	r3, [r7, #16]
    7838:	68db      	ldr	r3, [r3, #12]
    783a:	1c59      	adds	r1, r3, #1
    783c:	693a      	ldr	r2, [r7, #16]
    783e:	60d1      	str	r1, [r2, #12]
    7840:	8b3a      	ldrh	r2, [r7, #24]
    7842:	0a12      	lsrs	r2, r2, #8
    7844:	b292      	uxth	r2, r2
    7846:	b2d2      	uxtb	r2, r2
    7848:	701a      	strb	r2, [r3, #0]
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, l2cLen + L2C_HDR_LEN);
    784a:	693b      	ldr	r3, [r7, #16]
    784c:	68db      	ldr	r3, [r3, #12]
    784e:	1c59      	adds	r1, r3, #1
    7850:	693a      	ldr	r2, [r7, #16]
    7852:	60d1      	str	r1, [r2, #12]
    7854:	89fa      	ldrh	r2, [r7, #14]
    7856:	b2d2      	uxtb	r2, r2
    7858:	3204      	adds	r2, #4
    785a:	b2d2      	uxtb	r2, r2
    785c:	701a      	strb	r2, [r3, #0]
    785e:	693b      	ldr	r3, [r7, #16]
    7860:	68db      	ldr	r3, [r3, #12]
    7862:	1c59      	adds	r1, r3, #1
    7864:	693a      	ldr	r2, [r7, #16]
    7866:	60d1      	str	r1, [r2, #12]
    7868:	89fa      	ldrh	r2, [r7, #14]
    786a:	3204      	adds	r2, #4
    786c:	1212      	asrs	r2, r2, #8
    786e:	b2d2      	uxtb	r2, r2
    7870:	701a      	strb	r2, [r3, #0]
            memcpy(pConn->pNextRxFrag, &pData[4], aclLen);
    7872:	693b      	ldr	r3, [r7, #16]
    7874:	68d8      	ldr	r0, [r3, #12]
    7876:	687b      	ldr	r3, [r7, #4]
    7878:	3304      	adds	r3, #4
    787a:	8aba      	ldrh	r2, [r7, #20]
    787c:	4619      	mov	r1, r3
    787e:	f008 f966 	bl	fb4e <memcpy>
            pConn->pNextRxFrag += aclLen;
    7882:	693b      	ldr	r3, [r7, #16]
    7884:	68da      	ldr	r2, [r3, #12]
    7886:	8abb      	ldrh	r3, [r7, #20]
    7888:	441a      	add	r2, r3
    788a:	693b      	ldr	r3, [r7, #16]
    788c:	60da      	str	r2, [r3, #12]

            /* store remaining length */
            pConn->rxAclRemLen = l2cLen + L2C_HDR_LEN - aclLen;
    788e:	89fa      	ldrh	r2, [r7, #14]
    7890:	8abb      	ldrh	r3, [r7, #20]
    7892:	1ad3      	subs	r3, r2, r3
    7894:	b29b      	uxth	r3, r3
    7896:	3304      	adds	r3, #4
    7898:	b29a      	uxth	r2, r3
    789a:	693b      	ldr	r3, [r7, #16]
    789c:	829a      	strh	r2, [r3, #20]
    789e:	e059      	b.n	7954 <hciCoreAclReassembly+0x220>
          }
          else
          {
            /* alloc failed; discard */
            HCI_TRACE_WARN1("reassembly alloc failed len=%u", (l2cLen + L2C_HDR_LEN + HCI_ACL_HDR_LEN));
    78a0:	89fb      	ldrh	r3, [r7, #14]
    78a2:	3308      	adds	r3, #8
    78a4:	4619      	mov	r1, r3
    78a6:	4834      	ldr	r0, [pc, #208]	; (7978 <hciCoreAclReassembly+0x244>)
    78a8:	f002 fd40 	bl	a32c <WsfTrace>
    78ac:	e052      	b.n	7954 <hciCoreAclReassembly+0x220>
          }
        }
        else
        {
          /* no reassembly required, pData is ready to go */
          pDataRtn = pData;
    78ae:	687b      	ldr	r3, [r7, #4]
    78b0:	61fb      	str	r3, [r7, #28]
          freeData = FALSE;
    78b2:	2300      	movs	r3, #0
    78b4:	76fb      	strb	r3, [r7, #27]
    78b6:	e04d      	b.n	7954 <hciCoreAclReassembly+0x220>
        }
      }
      else
      {
        /* invalid l2cap packet; discard */
        HCI_TRACE_WARN1("invalid l2c pkt aclLen=%u", aclLen);
    78b8:	8abb      	ldrh	r3, [r7, #20]
    78ba:	4619      	mov	r1, r3
    78bc:	482f      	ldr	r0, [pc, #188]	; (797c <hciCoreAclReassembly+0x248>)
    78be:	f002 fd35 	bl	a32c <WsfTrace>
    78c2:	e047      	b.n	7954 <hciCoreAclReassembly+0x220>
      }
    }
    /* else if this is a continuation packet */
    else if (pbf == HCI_PB_CONTINUE)
    78c4:	8afb      	ldrh	r3, [r7, #22]
    78c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    78ca:	d136      	bne.n	793a <hciCoreAclReassembly+0x206>
    {
      /* if expecting a continuation */
      if (pConn->pRxAclPkt != NULL)
    78cc:	693b      	ldr	r3, [r7, #16]
    78ce:	689b      	ldr	r3, [r3, #8]
    78d0:	2b00      	cmp	r3, #0
    78d2:	d02c      	beq.n	792e <hciCoreAclReassembly+0x1fa>
      {
        if (aclLen <= pConn->rxAclRemLen)
    78d4:	693b      	ldr	r3, [r7, #16]
    78d6:	8a9b      	ldrh	r3, [r3, #20]
    78d8:	8aba      	ldrh	r2, [r7, #20]
    78da:	429a      	cmp	r2, r3
    78dc:	d81f      	bhi.n	791e <hciCoreAclReassembly+0x1ea>
        {
          /* copy data to start of next fragment */
          memcpy(pConn->pNextRxFrag, &pData[HCI_ACL_HDR_LEN], aclLen);
    78de:	693b      	ldr	r3, [r7, #16]
    78e0:	68d8      	ldr	r0, [r3, #12]
    78e2:	687b      	ldr	r3, [r7, #4]
    78e4:	3304      	adds	r3, #4
    78e6:	8aba      	ldrh	r2, [r7, #20]
    78e8:	4619      	mov	r1, r3
    78ea:	f008 f930 	bl	fb4e <memcpy>
          pConn->pNextRxFrag += aclLen;
    78ee:	693b      	ldr	r3, [r7, #16]
    78f0:	68da      	ldr	r2, [r3, #12]
    78f2:	8abb      	ldrh	r3, [r7, #20]
    78f4:	441a      	add	r2, r3
    78f6:	693b      	ldr	r3, [r7, #16]
    78f8:	60da      	str	r2, [r3, #12]

          /* update remaining length */
          pConn->rxAclRemLen -= aclLen;
    78fa:	693b      	ldr	r3, [r7, #16]
    78fc:	8a9a      	ldrh	r2, [r3, #20]
    78fe:	8abb      	ldrh	r3, [r7, #20]
    7900:	1ad3      	subs	r3, r2, r3
    7902:	b29a      	uxth	r2, r3
    7904:	693b      	ldr	r3, [r7, #16]
    7906:	829a      	strh	r2, [r3, #20]

          /* if reassembly complete return reassembled packet */
          if (pConn->rxAclRemLen == 0)
    7908:	693b      	ldr	r3, [r7, #16]
    790a:	8a9b      	ldrh	r3, [r3, #20]
    790c:	2b00      	cmp	r3, #0
    790e:	d121      	bne.n	7954 <hciCoreAclReassembly+0x220>
          {
            pDataRtn = pConn->pRxAclPkt;
    7910:	693b      	ldr	r3, [r7, #16]
    7912:	689b      	ldr	r3, [r3, #8]
    7914:	61fb      	str	r3, [r7, #28]
            pConn->pRxAclPkt = NULL;
    7916:	693b      	ldr	r3, [r7, #16]
    7918:	2200      	movs	r2, #0
    791a:	609a      	str	r2, [r3, #8]
    791c:	e01a      	b.n	7954 <hciCoreAclReassembly+0x220>
          }
        }
        else
        {
          HCI_TRACE_WARN2("continuation pkt too long len=%u RemLen=%u", aclLen, pConn->rxAclRemLen);
    791e:	8ab9      	ldrh	r1, [r7, #20]
    7920:	693b      	ldr	r3, [r7, #16]
    7922:	8a9b      	ldrh	r3, [r3, #20]
    7924:	461a      	mov	r2, r3
    7926:	4816      	ldr	r0, [pc, #88]	; (7980 <hciCoreAclReassembly+0x24c>)
    7928:	f002 fd00 	bl	a32c <WsfTrace>
    792c:	e012      	b.n	7954 <hciCoreAclReassembly+0x220>
        }
      }
      else
      {
        HCI_TRACE_WARN1("unexpected continuation pkt handle=0x%04x", handle);
    792e:	8b3b      	ldrh	r3, [r7, #24]
    7930:	4619      	mov	r1, r3
    7932:	4814      	ldr	r0, [pc, #80]	; (7984 <hciCoreAclReassembly+0x250>)
    7934:	f002 fcfa 	bl	a32c <WsfTrace>
    7938:	e00c      	b.n	7954 <hciCoreAclReassembly+0x220>
      }
    }
    /* else unknown packet type */
    else
    {
      HCI_TRACE_WARN1("unknown pb flags=0x%04x", pbf);
    793a:	8afb      	ldrh	r3, [r7, #22]
    793c:	4619      	mov	r1, r3
    793e:	4812      	ldr	r0, [pc, #72]	; (7988 <hciCoreAclReassembly+0x254>)
    7940:	f002 fcf4 	bl	a32c <WsfTrace>
    7944:	e006      	b.n	7954 <hciCoreAclReassembly+0x220>
    }
  }
  else
  {
    /* connection not found */
    HCI_TRACE_WARN1("pkt rcvd on unknown handle=0x%04x", (handle & HCI_HANDLE_MASK));
    7946:	8b3b      	ldrh	r3, [r7, #24]
    7948:	f3c3 030b 	ubfx	r3, r3, #0, #12
    794c:	4619      	mov	r1, r3
    794e:	480f      	ldr	r0, [pc, #60]	; (798c <hciCoreAclReassembly+0x258>)
    7950:	f002 fcec 	bl	a32c <WsfTrace>
  }

  if (freeData)
    7954:	7efb      	ldrb	r3, [r7, #27]
    7956:	2b00      	cmp	r3, #0
    7958:	d002      	beq.n	7960 <hciCoreAclReassembly+0x22c>
  {
    WsfMsgFree(pData);
    795a:	6878      	ldr	r0, [r7, #4]
    795c:	f003 fa76 	bl	ae4c <WsfMsgFree>
  }

  return pDataRtn;
    7960:	69fb      	ldr	r3, [r7, #28]
}
    7962:	4618      	mov	r0, r3
    7964:	3720      	adds	r7, #32
    7966:	46bd      	mov	sp, r7
    7968:	bd80      	pop	{r7, pc}
    796a:	bf00      	nop
    796c:	0000fcb4 	.word	0x0000fcb4
    7970:	10002630 	.word	0x10002630
    7974:	0000fcd8 	.word	0x0000fcd8
    7978:	0000fd00 	.word	0x0000fd00
    797c:	0000fd20 	.word	0x0000fd20
    7980:	0000fd3c 	.word	0x0000fd3c
    7984:	0000fd68 	.word	0x0000fd68
    7988:	0000fd94 	.word	0x0000fd94
    798c:	0000fdac 	.word	0x0000fdac

00007990 <HciCoreInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciCoreInit(void)
{
    7990:	b580      	push	{r7, lr}
    7992:	b082      	sub	sp, #8
    7994:	af00      	add	r7, sp, #0
  uint8_t   i;

  WSF_QUEUE_INIT(&hciCoreCb.aclQueue);
    7996:	4b19      	ldr	r3, [pc, #100]	; (79fc <HciCoreInit+0x6c>)
    7998:	2200      	movs	r2, #0
    799a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    799e:	4b17      	ldr	r3, [pc, #92]	; (79fc <HciCoreInit+0x6c>)
    79a0:	2200      	movs	r2, #0
    79a2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  for (i = 0; i < DM_CONN_MAX; i++)
    79a6:	2300      	movs	r3, #0
    79a8:	71fb      	strb	r3, [r7, #7]
    79aa:	e00d      	b.n	79c8 <HciCoreInit+0x38>
  {
    hciCoreCb.conn[i].handle = HCI_HANDLE_NONE;
    79ac:	79fa      	ldrb	r2, [r7, #7]
    79ae:	4913      	ldr	r1, [pc, #76]	; (79fc <HciCoreInit+0x6c>)
    79b0:	4613      	mov	r3, r2
    79b2:	00db      	lsls	r3, r3, #3
    79b4:	1a9b      	subs	r3, r3, r2
    79b6:	009b      	lsls	r3, r3, #2
    79b8:	440b      	add	r3, r1
    79ba:	3310      	adds	r3, #16
    79bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    79c0:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < DM_CONN_MAX; i++)
    79c2:	79fb      	ldrb	r3, [r7, #7]
    79c4:	3301      	adds	r3, #1
    79c6:	71fb      	strb	r3, [r7, #7]
    79c8:	79fb      	ldrb	r3, [r7, #7]
    79ca:	2b07      	cmp	r3, #7
    79cc:	d9ee      	bls.n	79ac <HciCoreInit+0x1c>
  }

  hciCoreCb.maxRxAclLen = HCI_MAX_RX_ACL_LEN;
    79ce:	4b0b      	ldr	r3, [pc, #44]	; (79fc <HciCoreInit+0x6c>)
    79d0:	221b      	movs	r2, #27
    79d2:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
  hciCoreCb.aclQueueHi = HCI_ACL_QUEUE_HI;
    79d6:	4b09      	ldr	r3, [pc, #36]	; (79fc <HciCoreInit+0x6c>)
    79d8:	2205      	movs	r2, #5
    79da:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  hciCoreCb.aclQueueLo = HCI_ACL_QUEUE_LO;
    79de:	4b07      	ldr	r3, [pc, #28]	; (79fc <HciCoreInit+0x6c>)
    79e0:	2201      	movs	r2, #1
    79e2:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
  hciCoreCb.extResetSeq = NULL;
    79e6:	4b05      	ldr	r3, [pc, #20]	; (79fc <HciCoreInit+0x6c>)
    79e8:	2200      	movs	r2, #0
    79ea:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

  hciCoreInit();
    79ee:	f000 f897 	bl	7b20 <hciCoreInit>
}
    79f2:	bf00      	nop
    79f4:	3708      	adds	r7, #8
    79f6:	46bd      	mov	sp, r7
    79f8:	bd80      	pop	{r7, pc}
    79fa:	bf00      	nop
    79fc:	10002630 	.word	0x10002630

00007a00 <HciResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetSequence(void)
{
    7a00:	b580      	push	{r7, lr}
    7a02:	af00      	add	r7, sp, #0
  /* set resetting state */
  hciCb.resetting = TRUE;
    7a04:	4b03      	ldr	r3, [pc, #12]	; (7a14 <HciResetSequence+0x14>)
    7a06:	2201      	movs	r2, #1
    7a08:	765a      	strb	r2, [r3, #25]

  /* start the reset sequence */
  hciCoreResetStart();
    7a0a:	f002 f977 	bl	9cfc <hciCoreResetStart>
}
    7a0e:	bf00      	nop
    7a10:	bd80      	pop	{r7, pc}
    7a12:	bf00      	nop
    7a14:	100028f4 	.word	0x100028f4

00007a18 <HciSetMaxRxAclLen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetMaxRxAclLen(uint16_t len)
{
    7a18:	b480      	push	{r7}
    7a1a:	b083      	sub	sp, #12
    7a1c:	af00      	add	r7, sp, #0
    7a1e:	4603      	mov	r3, r0
    7a20:	80fb      	strh	r3, [r7, #6]
  hciCoreCb.maxRxAclLen = len;
    7a22:	4a05      	ldr	r2, [pc, #20]	; (7a38 <HciSetMaxRxAclLen+0x20>)
    7a24:	88fb      	ldrh	r3, [r7, #6]
    7a26:	f8a2 30fc 	strh.w	r3, [r2, #252]	; 0xfc
}
    7a2a:	bf00      	nop
    7a2c:	370c      	adds	r7, #12
    7a2e:	46bd      	mov	sp, r7
    7a30:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a34:	4770      	bx	lr
    7a36:	bf00      	nop
    7a38:	10002630 	.word	0x10002630

00007a3c <HciSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSendAclData(uint8_t *pData)
{
    7a3c:	b590      	push	{r4, r7, lr}
    7a3e:	b085      	sub	sp, #20
    7a40:	af00      	add	r7, sp, #0
    7a42:	6078      	str	r0, [r7, #4]
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* parse handle and length */
  BYTES_TO_UINT16(handle, pData);
    7a44:	687b      	ldr	r3, [r7, #4]
    7a46:	781b      	ldrb	r3, [r3, #0]
    7a48:	b29a      	uxth	r2, r3
    7a4a:	687b      	ldr	r3, [r7, #4]
    7a4c:	3301      	adds	r3, #1
    7a4e:	781b      	ldrb	r3, [r3, #0]
    7a50:	b29b      	uxth	r3, r3
    7a52:	021b      	lsls	r3, r3, #8
    7a54:	b29b      	uxth	r3, r3
    7a56:	4413      	add	r3, r2
    7a58:	81fb      	strh	r3, [r7, #14]
  BYTES_TO_UINT16(len, &pData[2]);
    7a5a:	687b      	ldr	r3, [r7, #4]
    7a5c:	3302      	adds	r3, #2
    7a5e:	781b      	ldrb	r3, [r3, #0]
    7a60:	b29a      	uxth	r2, r3
    7a62:	687b      	ldr	r3, [r7, #4]
    7a64:	3303      	adds	r3, #3
    7a66:	781b      	ldrb	r3, [r3, #0]
    7a68:	b29b      	uxth	r3, r3
    7a6a:	021b      	lsls	r3, r3, #8
    7a6c:	b29b      	uxth	r3, r3
    7a6e:	4413      	add	r3, r2
    7a70:	81bb      	strh	r3, [r7, #12]

  /* look up connection structure */
  if ((pConn = hciCoreConnByHandle(handle)) != NULL)
    7a72:	89fb      	ldrh	r3, [r7, #14]
    7a74:	4618      	mov	r0, r3
    7a76:	f7ff fc85 	bl	7384 <hciCoreConnByHandle>
    7a7a:	60b8      	str	r0, [r7, #8]
    7a7c:	68bb      	ldr	r3, [r7, #8]
    7a7e:	2b00      	cmp	r3, #0
    7a80:	d03a      	beq.n	7af8 <HciSendAclData+0xbc>
  {
    /* if queue empty and buffers available */
#if defined(AM_PART_APOLLO3) && !defined(NO_APOLLO3_BUFFER_WORKAROUND)
    if (WsfQueueEmpty(&hciCoreCb.aclQueue) && hciCoreCb.availBufs > 0 && hciCmdCb.numCmdPkts > 0)
#else
    if (WsfQueueEmpty(&hciCoreCb.aclQueue) && hciCoreCb.availBufs > 0)
    7a82:	4823      	ldr	r0, [pc, #140]	; (7b10 <HciSendAclData+0xd4>)
    7a84:	f003 fafd 	bl	b082 <WsfQueueEmpty>
    7a88:	4603      	mov	r3, r0
    7a8a:	2b00      	cmp	r3, #0
    7a8c:	d00b      	beq.n	7aa6 <HciSendAclData+0x6a>
    7a8e:	4b21      	ldr	r3, [pc, #132]	; (7b14 <HciSendAclData+0xd8>)
    7a90:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
    7a94:	2b00      	cmp	r3, #0
    7a96:	d006      	beq.n	7aa6 <HciSendAclData+0x6a>
#endif
    {
      /* send data */
      hciCoreTxAclStart(pConn, len, pData);
    7a98:	89bb      	ldrh	r3, [r7, #12]
    7a9a:	687a      	ldr	r2, [r7, #4]
    7a9c:	4619      	mov	r1, r3
    7a9e:	68b8      	ldr	r0, [r7, #8]
    7aa0:	f7ff fd6c 	bl	757c <hciCoreTxAclStart>
    7aa4:	e004      	b.n	7ab0 <HciSendAclData+0x74>
    }
    else
    {
      /* queue data - message handler ID 'handerId' not used */
      WsfMsgEnq(&hciCoreCb.aclQueue, 0, pData);
    7aa6:	687a      	ldr	r2, [r7, #4]
    7aa8:	2100      	movs	r1, #0
    7aaa:	4819      	ldr	r0, [pc, #100]	; (7b10 <HciSendAclData+0xd4>)
    7aac:	f003 f9f3 	bl	ae96 <WsfMsgEnq>
    }

    /* increment buffer queue count for this connection with consideration for HCI fragmentation */
    pConn->queuedBufs += ((len - 1) / HciGetBufSize()) + 1;
    7ab0:	89bb      	ldrh	r3, [r7, #12]
    7ab2:	1e5c      	subs	r4, r3, #1
    7ab4:	f000 f924 	bl	7d00 <HciGetBufSize>
    7ab8:	4603      	mov	r3, r0
    7aba:	fb94 f3f3 	sdiv	r3, r4, r3
    7abe:	1c59      	adds	r1, r3, #1
    7ac0:	68bb      	ldr	r3, [r7, #8]
    7ac2:	7e1a      	ldrb	r2, [r3, #24]
    7ac4:	b2cb      	uxtb	r3, r1
    7ac6:	4413      	add	r3, r2
    7ac8:	b2da      	uxtb	r2, r3
    7aca:	68bb      	ldr	r3, [r7, #8]
    7acc:	761a      	strb	r2, [r3, #24]

    /* manage flow control to stack */
    if (pConn->queuedBufs >= hciCoreCb.aclQueueHi && pConn->flowDisabled == FALSE)
    7ace:	68bb      	ldr	r3, [r7, #8]
    7ad0:	7e1a      	ldrb	r2, [r3, #24]
    7ad2:	4b10      	ldr	r3, [pc, #64]	; (7b14 <HciSendAclData+0xd8>)
    7ad4:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
    7ad8:	429a      	cmp	r2, r3
    7ada:	d315      	bcc.n	7b08 <HciSendAclData+0xcc>
    7adc:	68bb      	ldr	r3, [r7, #8]
    7ade:	7ddb      	ldrb	r3, [r3, #23]
    7ae0:	2b00      	cmp	r3, #0
    7ae2:	d111      	bne.n	7b08 <HciSendAclData+0xcc>
    {
      pConn->flowDisabled = TRUE;
    7ae4:	68bb      	ldr	r3, [r7, #8]
    7ae6:	2201      	movs	r2, #1
    7ae8:	75da      	strb	r2, [r3, #23]
      (*hciCb.flowCback)(handle, TRUE);
    7aea:	4b0b      	ldr	r3, [pc, #44]	; (7b18 <HciSendAclData+0xdc>)
    7aec:	695b      	ldr	r3, [r3, #20]
    7aee:	89fa      	ldrh	r2, [r7, #14]
    7af0:	2101      	movs	r1, #1
    7af2:	4610      	mov	r0, r2
    7af4:	4798      	blx	r3
    /* discard buffer */
    WsfMsgFree(pData);

    HCI_TRACE_WARN1("HciSendAclData discarding buffer, handle=%u", handle);
  }
}
    7af6:	e007      	b.n	7b08 <HciSendAclData+0xcc>
    WsfMsgFree(pData);
    7af8:	6878      	ldr	r0, [r7, #4]
    7afa:	f003 f9a7 	bl	ae4c <WsfMsgFree>
    HCI_TRACE_WARN1("HciSendAclData discarding buffer, handle=%u", handle);
    7afe:	89fb      	ldrh	r3, [r7, #14]
    7b00:	4619      	mov	r1, r3
    7b02:	4806      	ldr	r0, [pc, #24]	; (7b1c <HciSendAclData+0xe0>)
    7b04:	f002 fc12 	bl	a32c <WsfTrace>
}
    7b08:	bf00      	nop
    7b0a:	3714      	adds	r7, #20
    7b0c:	46bd      	mov	sp, r7
    7b0e:	bd90      	pop	{r4, r7, pc}
    7b10:	10002720 	.word	0x10002720
    7b14:	10002630 	.word	0x10002630
    7b18:	100028f4 	.word	0x100028f4
    7b1c:	0000fdd0 	.word	0x0000fdd0

00007b20 <hciCoreInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreInit(void)
{
    7b20:	b580      	push	{r7, lr}
    7b22:	af00      	add	r7, sp, #0
  hciCmdInit();
    7b24:	f7fe fc2c 	bl	6380 <hciCmdInit>
}
    7b28:	bf00      	nop
    7b2a:	bd80      	pop	{r7, pc}

00007b2c <hciCoreNumCmplPkts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreNumCmplPkts(uint8_t *pMsg)
{
    7b2c:	b580      	push	{r7, lr}
    7b2e:	b086      	sub	sp, #24
    7b30:	af00      	add	r7, sp, #0
    7b32:	6078      	str	r0, [r7, #4]
  uint8_t         numHandles;
  uint16_t        bufs;
  uint16_t        handle;
  uint8_t         availBufs = 0;
    7b34:	2300      	movs	r3, #0
    7b36:	75bb      	strb	r3, [r7, #22]
  hciCoreConn_t   *pConn;

  /* parse number of handles */
  BSTREAM_TO_UINT8(numHandles, pMsg);
    7b38:	687b      	ldr	r3, [r7, #4]
    7b3a:	1c5a      	adds	r2, r3, #1
    7b3c:	607a      	str	r2, [r7, #4]
    7b3e:	781b      	ldrb	r3, [r3, #0]
    7b40:	75fb      	strb	r3, [r7, #23]

  /* for each handle in event */
  while (numHandles-- > 0)
    7b42:	e04c      	b.n	7bde <hciCoreNumCmplPkts+0xb2>
  {
    /* parse handle and number of buffers */
    BSTREAM_TO_UINT16(handle, pMsg);
    7b44:	687b      	ldr	r3, [r7, #4]
    7b46:	781b      	ldrb	r3, [r3, #0]
    7b48:	b29a      	uxth	r2, r3
    7b4a:	687b      	ldr	r3, [r7, #4]
    7b4c:	3301      	adds	r3, #1
    7b4e:	781b      	ldrb	r3, [r3, #0]
    7b50:	b29b      	uxth	r3, r3
    7b52:	021b      	lsls	r3, r3, #8
    7b54:	b29b      	uxth	r3, r3
    7b56:	4413      	add	r3, r2
    7b58:	82bb      	strh	r3, [r7, #20]
    7b5a:	687b      	ldr	r3, [r7, #4]
    7b5c:	3302      	adds	r3, #2
    7b5e:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT16(bufs, pMsg);
    7b60:	687b      	ldr	r3, [r7, #4]
    7b62:	781b      	ldrb	r3, [r3, #0]
    7b64:	b29a      	uxth	r2, r3
    7b66:	687b      	ldr	r3, [r7, #4]
    7b68:	3301      	adds	r3, #1
    7b6a:	781b      	ldrb	r3, [r3, #0]
    7b6c:	b29b      	uxth	r3, r3
    7b6e:	021b      	lsls	r3, r3, #8
    7b70:	b29b      	uxth	r3, r3
    7b72:	4413      	add	r3, r2
    7b74:	827b      	strh	r3, [r7, #18]
    7b76:	687b      	ldr	r3, [r7, #4]
    7b78:	3302      	adds	r3, #2
    7b7a:	607b      	str	r3, [r7, #4]

    if ((pConn = hciCoreConnByHandle(handle)) != NULL)
    7b7c:	8abb      	ldrh	r3, [r7, #20]
    7b7e:	4618      	mov	r0, r3
    7b80:	f7ff fc00 	bl	7384 <hciCoreConnByHandle>
    7b84:	60f8      	str	r0, [r7, #12]
    7b86:	68fb      	ldr	r3, [r7, #12]
    7b88:	2b00      	cmp	r3, #0
    7b8a:	d028      	beq.n	7bde <hciCoreNumCmplPkts+0xb2>
    {
      /* decrement outstanding buffer count to controller */
      pConn->outBufs -= (uint8_t) bufs;
    7b8c:	68fb      	ldr	r3, [r7, #12]
    7b8e:	7e5a      	ldrb	r2, [r3, #25]
    7b90:	8a7b      	ldrh	r3, [r7, #18]
    7b92:	b2db      	uxtb	r3, r3
    7b94:	1ad3      	subs	r3, r2, r3
    7b96:	b2da      	uxtb	r2, r3
    7b98:	68fb      	ldr	r3, [r7, #12]
    7b9a:	765a      	strb	r2, [r3, #25]

      /* decrement queued buffer count for this connection */
      pConn->queuedBufs -= (uint8_t) bufs;
    7b9c:	68fb      	ldr	r3, [r7, #12]
    7b9e:	7e1a      	ldrb	r2, [r3, #24]
    7ba0:	8a7b      	ldrh	r3, [r7, #18]
    7ba2:	b2db      	uxtb	r3, r3
    7ba4:	1ad3      	subs	r3, r2, r3
    7ba6:	b2da      	uxtb	r2, r3
    7ba8:	68fb      	ldr	r3, [r7, #12]
    7baa:	761a      	strb	r2, [r3, #24]

      /* increment available buffer count */
      availBufs += (uint8_t) bufs;
    7bac:	8a7b      	ldrh	r3, [r7, #18]
    7bae:	b2da      	uxtb	r2, r3
    7bb0:	7dbb      	ldrb	r3, [r7, #22]
    7bb2:	4413      	add	r3, r2
    7bb4:	75bb      	strb	r3, [r7, #22]

      /* call flow control callback */
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
    7bb6:	68fb      	ldr	r3, [r7, #12]
    7bb8:	7ddb      	ldrb	r3, [r3, #23]
    7bba:	2b00      	cmp	r3, #0
    7bbc:	d00f      	beq.n	7bde <hciCoreNumCmplPkts+0xb2>
    7bbe:	68fb      	ldr	r3, [r7, #12]
    7bc0:	7e1a      	ldrb	r2, [r3, #24]
    7bc2:	4b0d      	ldr	r3, [pc, #52]	; (7bf8 <hciCoreNumCmplPkts+0xcc>)
    7bc4:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
    7bc8:	429a      	cmp	r2, r3
    7bca:	d808      	bhi.n	7bde <hciCoreNumCmplPkts+0xb2>
      {
        pConn->flowDisabled = FALSE;
    7bcc:	68fb      	ldr	r3, [r7, #12]
    7bce:	2200      	movs	r2, #0
    7bd0:	75da      	strb	r2, [r3, #23]
        (*hciCb.flowCback)(handle, FALSE);
    7bd2:	4b0a      	ldr	r3, [pc, #40]	; (7bfc <hciCoreNumCmplPkts+0xd0>)
    7bd4:	695b      	ldr	r3, [r3, #20]
    7bd6:	8aba      	ldrh	r2, [r7, #20]
    7bd8:	2100      	movs	r1, #0
    7bda:	4610      	mov	r0, r2
    7bdc:	4798      	blx	r3
  while (numHandles-- > 0)
    7bde:	7dfb      	ldrb	r3, [r7, #23]
    7be0:	1e5a      	subs	r2, r3, #1
    7be2:	75fa      	strb	r2, [r7, #23]
    7be4:	2b00      	cmp	r3, #0
    7be6:	d1ad      	bne.n	7b44 <hciCoreNumCmplPkts+0x18>
      }
    }
  }

  /* service TX data path */
  hciCoreTxReady(availBufs);
    7be8:	7dbb      	ldrb	r3, [r7, #22]
    7bea:	4618      	mov	r0, r3
    7bec:	f7ff fc56 	bl	749c <hciCoreTxReady>
}
    7bf0:	bf00      	nop
    7bf2:	3718      	adds	r7, #24
    7bf4:	46bd      	mov	sp, r7
    7bf6:	bd80      	pop	{r7, pc}
    7bf8:	10002630 	.word	0x10002630
    7bfc:	100028f4 	.word	0x100028f4

00007c00 <hciCoreRecv>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreRecv(uint8_t msgType, uint8_t *pCoreRecvMsg)
{
    7c00:	b580      	push	{r7, lr}
    7c02:	b082      	sub	sp, #8
    7c04:	af00      	add	r7, sp, #0
    7c06:	4603      	mov	r3, r0
    7c08:	6039      	str	r1, [r7, #0]
    7c0a:	71fb      	strb	r3, [r7, #7]
  /* dump event for protocol analysis */
  if (msgType == HCI_EVT_TYPE)
    7c0c:	79fb      	ldrb	r3, [r7, #7]
    7c0e:	2b04      	cmp	r3, #4
    7c10:	d109      	bne.n	7c26 <hciCoreRecv+0x26>
  {
    HCI_PDUMP_EVT(*(pCoreRecvMsg + 1) + HCI_EVT_HDR_LEN, pCoreRecvMsg);
    7c12:	683b      	ldr	r3, [r7, #0]
    7c14:	3301      	adds	r3, #1
    7c16:	781b      	ldrb	r3, [r3, #0]
    7c18:	3302      	adds	r3, #2
    7c1a:	683a      	ldr	r2, [r7, #0]
    7c1c:	4619      	mov	r1, r3
    7c1e:	2004      	movs	r0, #4
    7c20:	f002 fb50 	bl	a2c4 <WsfPacketTrace>
    7c24:	e00b      	b.n	7c3e <hciCoreRecv+0x3e>
  }
  else if (msgType == HCI_ACL_TYPE)
    7c26:	79fb      	ldrb	r3, [r7, #7]
    7c28:	2b02      	cmp	r3, #2
    7c2a:	d108      	bne.n	7c3e <hciCoreRecv+0x3e>
  {
    HCI_PDUMP_RX_ACL(*(pCoreRecvMsg + 2) + HCI_ACL_HDR_LEN, pCoreRecvMsg);
    7c2c:	683b      	ldr	r3, [r7, #0]
    7c2e:	3302      	adds	r3, #2
    7c30:	781b      	ldrb	r3, [r3, #0]
    7c32:	3304      	adds	r3, #4
    7c34:	683a      	ldr	r2, [r7, #0]
    7c36:	4619      	mov	r1, r3
    7c38:	2002      	movs	r0, #2
    7c3a:	f002 fb43 	bl	a2c4 <WsfPacketTrace>
  }

  /* queue buffer */
  WsfMsgEnq(&hciCb.rxQueue, (wsfHandlerId_t) msgType, pCoreRecvMsg);
    7c3e:	79fb      	ldrb	r3, [r7, #7]
    7c40:	683a      	ldr	r2, [r7, #0]
    7c42:	4619      	mov	r1, r3
    7c44:	4806      	ldr	r0, [pc, #24]	; (7c60 <hciCoreRecv+0x60>)
    7c46:	f003 f926 	bl	ae96 <WsfMsgEnq>

  /* set event */
  WsfSetEvent(hciCb.handlerId, HCI_EVT_RX);
    7c4a:	4b05      	ldr	r3, [pc, #20]	; (7c60 <hciCoreRecv+0x60>)
    7c4c:	7e1b      	ldrb	r3, [r3, #24]
    7c4e:	2101      	movs	r1, #1
    7c50:	4618      	mov	r0, r3
    7c52:	f002 fa29 	bl	a0a8 <WsfSetEvent>
}
    7c56:	bf00      	nop
    7c58:	3708      	adds	r7, #8
    7c5a:	46bd      	mov	sp, r7
    7c5c:	bd80      	pop	{r7, pc}
    7c5e:	bf00      	nop
    7c60:	100028f4 	.word	0x100028f4

00007c64 <HciCoreHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciCoreHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
    7c64:	b580      	push	{r7, lr}
    7c66:	b084      	sub	sp, #16
    7c68:	af00      	add	r7, sp, #0
    7c6a:	4603      	mov	r3, r0
    7c6c:	6039      	str	r1, [r7, #0]
    7c6e:	71fb      	strb	r3, [r7, #7]
  uint8_t         *pBuf;
  wsfHandlerId_t  handlerId;
  
  /* Handle message */
  if (pMsg != NULL)
    7c70:	683b      	ldr	r3, [r7, #0]
    7c72:	2b00      	cmp	r3, #0
    7c74:	d007      	beq.n	7c86 <HciCoreHandler+0x22>
  {
    /* Handle HCI command timeout */
    if (pMsg->event == HCI_MSG_CMD_TIMEOUT)
    7c76:	683b      	ldr	r3, [r7, #0]
    7c78:	789b      	ldrb	r3, [r3, #2]
    7c7a:	2b01      	cmp	r3, #1
    7c7c:	d12f      	bne.n	7cde <HciCoreHandler+0x7a>
    {
      hciCmdTimeout(pMsg);
    7c7e:	6838      	ldr	r0, [r7, #0]
    7c80:	f7fe fb9a 	bl	63b8 <hciCmdTimeout>
          hciCb.aclCback(pBuf);
        }
      }
    }
  }
}
    7c84:	e02b      	b.n	7cde <HciCoreHandler+0x7a>
  else if (event & HCI_EVT_RX)
    7c86:	79fb      	ldrb	r3, [r7, #7]
    7c88:	f003 0301 	and.w	r3, r3, #1
    7c8c:	2b00      	cmp	r3, #0
    7c8e:	d026      	beq.n	7cde <HciCoreHandler+0x7a>
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
    7c90:	e01b      	b.n	7cca <HciCoreHandler+0x66>
      if (handlerId == HCI_EVT_TYPE)
    7c92:	7afb      	ldrb	r3, [r7, #11]
    7c94:	2b04      	cmp	r3, #4
    7c96:	d10d      	bne.n	7cb4 <HciCoreHandler+0x50>
        hciEvtProcessMsg(pBuf);
    7c98:	68f8      	ldr	r0, [r7, #12]
    7c9a:	f001 fd01 	bl	96a0 <hciEvtProcessMsg>
        if (hciCb.resetting)
    7c9e:	4b12      	ldr	r3, [pc, #72]	; (7ce8 <HciCoreHandler+0x84>)
    7ca0:	7e5b      	ldrb	r3, [r3, #25]
    7ca2:	2b00      	cmp	r3, #0
    7ca4:	d002      	beq.n	7cac <HciCoreHandler+0x48>
          hciCoreResetSequence(pBuf);
    7ca6:	68f8      	ldr	r0, [r7, #12]
    7ca8:	f002 f82e 	bl	9d08 <hciCoreResetSequence>
        WsfMsgFree(pBuf);
    7cac:	68f8      	ldr	r0, [r7, #12]
    7cae:	f003 f8cd 	bl	ae4c <WsfMsgFree>
    7cb2:	e00a      	b.n	7cca <HciCoreHandler+0x66>
        if ((pBuf = hciCoreAclReassembly(pBuf)) != NULL)
    7cb4:	68f8      	ldr	r0, [r7, #12]
    7cb6:	f7ff fd3d 	bl	7734 <hciCoreAclReassembly>
    7cba:	60f8      	str	r0, [r7, #12]
    7cbc:	68fb      	ldr	r3, [r7, #12]
    7cbe:	2b00      	cmp	r3, #0
    7cc0:	d003      	beq.n	7cca <HciCoreHandler+0x66>
          hciCb.aclCback(pBuf);
    7cc2:	4b09      	ldr	r3, [pc, #36]	; (7ce8 <HciCoreHandler+0x84>)
    7cc4:	691b      	ldr	r3, [r3, #16]
    7cc6:	68f8      	ldr	r0, [r7, #12]
    7cc8:	4798      	blx	r3
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
    7cca:	f107 030b 	add.w	r3, r7, #11
    7cce:	4619      	mov	r1, r3
    7cd0:	4805      	ldr	r0, [pc, #20]	; (7ce8 <HciCoreHandler+0x84>)
    7cd2:	f003 f8f5 	bl	aec0 <WsfMsgDeq>
    7cd6:	60f8      	str	r0, [r7, #12]
    7cd8:	68fb      	ldr	r3, [r7, #12]
    7cda:	2b00      	cmp	r3, #0
    7cdc:	d1d9      	bne.n	7c92 <HciCoreHandler+0x2e>
}
    7cde:	bf00      	nop
    7ce0:	3710      	adds	r7, #16
    7ce2:	46bd      	mov	sp, r7
    7ce4:	bd80      	pop	{r7, pc}
    7ce6:	bf00      	nop
    7ce8:	100028f4 	.word	0x100028f4

00007cec <HciGetBdAddr>:
 *
 *  \return Pointer to the BD address.
 */
/*************************************************************************************************/
uint8_t *HciGetBdAddr(void)
{
    7cec:	b480      	push	{r7}
    7cee:	af00      	add	r7, sp, #0
  return hciCoreCb.bdAddr;
    7cf0:	4b02      	ldr	r3, [pc, #8]	; (7cfc <HciGetBdAddr+0x10>)
}
    7cf2:	4618      	mov	r0, r3
    7cf4:	46bd      	mov	sp, r7
    7cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cfa:	4770      	bx	lr
    7cfc:	10002718 	.word	0x10002718

00007d00 <HciGetBufSize>:
 *
 *  \return ACL buffer size.
 */
/*************************************************************************************************/
uint16_t HciGetBufSize(void)
{
    7d00:	b480      	push	{r7}
    7d02:	af00      	add	r7, sp, #0
  return hciCoreCb.bufSize;
    7d04:	4b03      	ldr	r3, [pc, #12]	; (7d14 <HciGetBufSize+0x14>)
    7d06:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	; 0xfe
}
    7d0a:	4618      	mov	r0, r3
    7d0c:	46bd      	mov	sp, r7
    7d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d12:	4770      	bx	lr
    7d14:	10002630 	.word	0x10002630

00007d18 <HciGetLeSupFeat>:
 *
 *  \return Supported features.
 */
/*************************************************************************************************/
uint16_t HciGetLeSupFeat(void)
{
    7d18:	b480      	push	{r7}
    7d1a:	af00      	add	r7, sp, #0
  // disable LL connection parameter update feature for a better
  // interoperability with Android phones (especially older Android OS).
  return hciCoreCb.leSupFeat & ~HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC;
    7d1c:	4b05      	ldr	r3, [pc, #20]	; (7d34 <HciGetLeSupFeat+0x1c>)
    7d1e:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
    7d22:	f023 0302 	bic.w	r3, r3, #2
    7d26:	b29b      	uxth	r3, r3
}
    7d28:	4618      	mov	r0, r3
    7d2a:	46bd      	mov	sp, r7
    7d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d30:	4770      	bx	lr
    7d32:	bf00      	nop
    7d34:	10002630 	.word	0x10002630

00007d38 <HciGetMaxRxAclLen>:
 *
 *  \return ACL packet length.
 */
/*************************************************************************************************/
uint16_t HciGetMaxRxAclLen(void)
{
    7d38:	b480      	push	{r7}
    7d3a:	af00      	add	r7, sp, #0
  return hciCoreCb.maxRxAclLen;
    7d3c:	4b03      	ldr	r3, [pc, #12]	; (7d4c <HciGetMaxRxAclLen+0x14>)
    7d3e:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
}
    7d42:	4618      	mov	r0, r3
    7d44:	46bd      	mov	sp, r7
    7d46:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d4a:	4770      	bx	lr
    7d4c:	10002630 	.word	0x10002630

00007d50 <hciEvtParseLeConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    7d50:	b580      	push	{r7, lr}
    7d52:	b084      	sub	sp, #16
    7d54:	af00      	add	r7, sp, #0
    7d56:	60f8      	str	r0, [r7, #12]
    7d58:	60b9      	str	r1, [r7, #8]
    7d5a:	4613      	mov	r3, r2
    7d5c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
    7d5e:	68bb      	ldr	r3, [r7, #8]
    7d60:	1c5a      	adds	r2, r3, #1
    7d62:	60ba      	str	r2, [r7, #8]
    7d64:	781a      	ldrb	r2, [r3, #0]
    7d66:	68fb      	ldr	r3, [r7, #12]
    7d68:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
    7d6a:	68bb      	ldr	r3, [r7, #8]
    7d6c:	781b      	ldrb	r3, [r3, #0]
    7d6e:	b29a      	uxth	r2, r3
    7d70:	68bb      	ldr	r3, [r7, #8]
    7d72:	3301      	adds	r3, #1
    7d74:	781b      	ldrb	r3, [r3, #0]
    7d76:	b29b      	uxth	r3, r3
    7d78:	021b      	lsls	r3, r3, #8
    7d7a:	b29b      	uxth	r3, r3
    7d7c:	4413      	add	r3, r2
    7d7e:	b29a      	uxth	r2, r3
    7d80:	68fb      	ldr	r3, [r7, #12]
    7d82:	80da      	strh	r2, [r3, #6]
    7d84:	68bb      	ldr	r3, [r7, #8]
    7d86:	3302      	adds	r3, #2
    7d88:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
    7d8a:	68bb      	ldr	r3, [r7, #8]
    7d8c:	1c5a      	adds	r2, r3, #1
    7d8e:	60ba      	str	r2, [r7, #8]
    7d90:	781a      	ldrb	r2, [r3, #0]
    7d92:	68fb      	ldr	r3, [r7, #12]
    7d94:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
    7d96:	68bb      	ldr	r3, [r7, #8]
    7d98:	1c5a      	adds	r2, r3, #1
    7d9a:	60ba      	str	r2, [r7, #8]
    7d9c:	781a      	ldrb	r2, [r3, #0]
    7d9e:	68fb      	ldr	r3, [r7, #12]
    7da0:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
    7da2:	68fb      	ldr	r3, [r7, #12]
    7da4:	330a      	adds	r3, #10
    7da6:	68b9      	ldr	r1, [r7, #8]
    7da8:	4618      	mov	r0, r3
    7daa:	f005 f867 	bl	ce7c <BdaCpy>
    7dae:	68bb      	ldr	r3, [r7, #8]
    7db0:	3306      	adds	r3, #6
    7db2:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
    7db4:	68bb      	ldr	r3, [r7, #8]
    7db6:	781b      	ldrb	r3, [r3, #0]
    7db8:	b29a      	uxth	r2, r3
    7dba:	68bb      	ldr	r3, [r7, #8]
    7dbc:	3301      	adds	r3, #1
    7dbe:	781b      	ldrb	r3, [r3, #0]
    7dc0:	b29b      	uxth	r3, r3
    7dc2:	021b      	lsls	r3, r3, #8
    7dc4:	b29b      	uxth	r3, r3
    7dc6:	4413      	add	r3, r2
    7dc8:	b29a      	uxth	r2, r3
    7dca:	68fb      	ldr	r3, [r7, #12]
    7dcc:	821a      	strh	r2, [r3, #16]
    7dce:	68bb      	ldr	r3, [r7, #8]
    7dd0:	3302      	adds	r3, #2
    7dd2:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
    7dd4:	68bb      	ldr	r3, [r7, #8]
    7dd6:	781b      	ldrb	r3, [r3, #0]
    7dd8:	b29a      	uxth	r2, r3
    7dda:	68bb      	ldr	r3, [r7, #8]
    7ddc:	3301      	adds	r3, #1
    7dde:	781b      	ldrb	r3, [r3, #0]
    7de0:	b29b      	uxth	r3, r3
    7de2:	021b      	lsls	r3, r3, #8
    7de4:	b29b      	uxth	r3, r3
    7de6:	4413      	add	r3, r2
    7de8:	b29a      	uxth	r2, r3
    7dea:	68fb      	ldr	r3, [r7, #12]
    7dec:	825a      	strh	r2, [r3, #18]
    7dee:	68bb      	ldr	r3, [r7, #8]
    7df0:	3302      	adds	r3, #2
    7df2:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
    7df4:	68bb      	ldr	r3, [r7, #8]
    7df6:	781b      	ldrb	r3, [r3, #0]
    7df8:	b29a      	uxth	r2, r3
    7dfa:	68bb      	ldr	r3, [r7, #8]
    7dfc:	3301      	adds	r3, #1
    7dfe:	781b      	ldrb	r3, [r3, #0]
    7e00:	b29b      	uxth	r3, r3
    7e02:	021b      	lsls	r3, r3, #8
    7e04:	b29b      	uxth	r3, r3
    7e06:	4413      	add	r3, r2
    7e08:	b29a      	uxth	r2, r3
    7e0a:	68fb      	ldr	r3, [r7, #12]
    7e0c:	829a      	strh	r2, [r3, #20]
    7e0e:	68bb      	ldr	r3, [r7, #8]
    7e10:	3302      	adds	r3, #2
    7e12:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
    7e14:	68bb      	ldr	r3, [r7, #8]
    7e16:	1c5a      	adds	r2, r3, #1
    7e18:	60ba      	str	r2, [r7, #8]
    7e1a:	781a      	ldrb	r2, [r3, #0]
    7e1c:	68fb      	ldr	r3, [r7, #12]
    7e1e:	759a      	strb	r2, [r3, #22]

  /* zero out unused fields */
  memset(pMsg->leConnCmpl.localRpa, 0, BDA_ADDR_LEN);
    7e20:	68fb      	ldr	r3, [r7, #12]
    7e22:	3317      	adds	r3, #23
    7e24:	2206      	movs	r2, #6
    7e26:	2100      	movs	r1, #0
    7e28:	4618      	mov	r0, r3
    7e2a:	f007 feb5 	bl	fb98 <memset>
  memset(pMsg->leConnCmpl.peerRpa, 0, BDA_ADDR_LEN);
    7e2e:	68fb      	ldr	r3, [r7, #12]
    7e30:	331d      	adds	r3, #29
    7e32:	2206      	movs	r2, #6
    7e34:	2100      	movs	r1, #0
    7e36:	4618      	mov	r0, r3
    7e38:	f007 feae 	bl	fb98 <memset>

  pMsg->hdr.param = pMsg->leConnCmpl.handle;
    7e3c:	68fb      	ldr	r3, [r7, #12]
    7e3e:	88da      	ldrh	r2, [r3, #6]
    7e40:	68fb      	ldr	r3, [r7, #12]
    7e42:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
    7e44:	68fb      	ldr	r3, [r7, #12]
    7e46:	791a      	ldrb	r2, [r3, #4]
    7e48:	68fb      	ldr	r3, [r7, #12]
    7e4a:	70da      	strb	r2, [r3, #3]
}
    7e4c:	bf00      	nop
    7e4e:	3710      	adds	r7, #16
    7e50:	46bd      	mov	sp, r7
    7e52:	bd80      	pop	{r7, pc}

00007e54 <hciEvtParseLeEnhancedConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeEnhancedConnCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    7e54:	b580      	push	{r7, lr}
    7e56:	b084      	sub	sp, #16
    7e58:	af00      	add	r7, sp, #0
    7e5a:	60f8      	str	r0, [r7, #12]
    7e5c:	60b9      	str	r1, [r7, #8]
    7e5e:	4613      	mov	r3, r2
    7e60:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
    7e62:	68bb      	ldr	r3, [r7, #8]
    7e64:	1c5a      	adds	r2, r3, #1
    7e66:	60ba      	str	r2, [r7, #8]
    7e68:	781a      	ldrb	r2, [r3, #0]
    7e6a:	68fb      	ldr	r3, [r7, #12]
    7e6c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
    7e6e:	68bb      	ldr	r3, [r7, #8]
    7e70:	781b      	ldrb	r3, [r3, #0]
    7e72:	b29a      	uxth	r2, r3
    7e74:	68bb      	ldr	r3, [r7, #8]
    7e76:	3301      	adds	r3, #1
    7e78:	781b      	ldrb	r3, [r3, #0]
    7e7a:	b29b      	uxth	r3, r3
    7e7c:	021b      	lsls	r3, r3, #8
    7e7e:	b29b      	uxth	r3, r3
    7e80:	4413      	add	r3, r2
    7e82:	b29a      	uxth	r2, r3
    7e84:	68fb      	ldr	r3, [r7, #12]
    7e86:	80da      	strh	r2, [r3, #6]
    7e88:	68bb      	ldr	r3, [r7, #8]
    7e8a:	3302      	adds	r3, #2
    7e8c:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
    7e8e:	68bb      	ldr	r3, [r7, #8]
    7e90:	1c5a      	adds	r2, r3, #1
    7e92:	60ba      	str	r2, [r7, #8]
    7e94:	781a      	ldrb	r2, [r3, #0]
    7e96:	68fb      	ldr	r3, [r7, #12]
    7e98:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
    7e9a:	68bb      	ldr	r3, [r7, #8]
    7e9c:	1c5a      	adds	r2, r3, #1
    7e9e:	60ba      	str	r2, [r7, #8]
    7ea0:	781a      	ldrb	r2, [r3, #0]
    7ea2:	68fb      	ldr	r3, [r7, #12]
    7ea4:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
    7ea6:	68fb      	ldr	r3, [r7, #12]
    7ea8:	330a      	adds	r3, #10
    7eaa:	68b9      	ldr	r1, [r7, #8]
    7eac:	4618      	mov	r0, r3
    7eae:	f004 ffe5 	bl	ce7c <BdaCpy>
    7eb2:	68bb      	ldr	r3, [r7, #8]
    7eb4:	3306      	adds	r3, #6
    7eb6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.localRpa, p);
    7eb8:	68fb      	ldr	r3, [r7, #12]
    7eba:	3317      	adds	r3, #23
    7ebc:	68b9      	ldr	r1, [r7, #8]
    7ebe:	4618      	mov	r0, r3
    7ec0:	f004 ffdc 	bl	ce7c <BdaCpy>
    7ec4:	68bb      	ldr	r3, [r7, #8]
    7ec6:	3306      	adds	r3, #6
    7ec8:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerRpa, p);
    7eca:	68fb      	ldr	r3, [r7, #12]
    7ecc:	331d      	adds	r3, #29
    7ece:	68b9      	ldr	r1, [r7, #8]
    7ed0:	4618      	mov	r0, r3
    7ed2:	f004 ffd3 	bl	ce7c <BdaCpy>
    7ed6:	68bb      	ldr	r3, [r7, #8]
    7ed8:	3306      	adds	r3, #6
    7eda:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
    7edc:	68bb      	ldr	r3, [r7, #8]
    7ede:	781b      	ldrb	r3, [r3, #0]
    7ee0:	b29a      	uxth	r2, r3
    7ee2:	68bb      	ldr	r3, [r7, #8]
    7ee4:	3301      	adds	r3, #1
    7ee6:	781b      	ldrb	r3, [r3, #0]
    7ee8:	b29b      	uxth	r3, r3
    7eea:	021b      	lsls	r3, r3, #8
    7eec:	b29b      	uxth	r3, r3
    7eee:	4413      	add	r3, r2
    7ef0:	b29a      	uxth	r2, r3
    7ef2:	68fb      	ldr	r3, [r7, #12]
    7ef4:	821a      	strh	r2, [r3, #16]
    7ef6:	68bb      	ldr	r3, [r7, #8]
    7ef8:	3302      	adds	r3, #2
    7efa:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
    7efc:	68bb      	ldr	r3, [r7, #8]
    7efe:	781b      	ldrb	r3, [r3, #0]
    7f00:	b29a      	uxth	r2, r3
    7f02:	68bb      	ldr	r3, [r7, #8]
    7f04:	3301      	adds	r3, #1
    7f06:	781b      	ldrb	r3, [r3, #0]
    7f08:	b29b      	uxth	r3, r3
    7f0a:	021b      	lsls	r3, r3, #8
    7f0c:	b29b      	uxth	r3, r3
    7f0e:	4413      	add	r3, r2
    7f10:	b29a      	uxth	r2, r3
    7f12:	68fb      	ldr	r3, [r7, #12]
    7f14:	825a      	strh	r2, [r3, #18]
    7f16:	68bb      	ldr	r3, [r7, #8]
    7f18:	3302      	adds	r3, #2
    7f1a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
    7f1c:	68bb      	ldr	r3, [r7, #8]
    7f1e:	781b      	ldrb	r3, [r3, #0]
    7f20:	b29a      	uxth	r2, r3
    7f22:	68bb      	ldr	r3, [r7, #8]
    7f24:	3301      	adds	r3, #1
    7f26:	781b      	ldrb	r3, [r3, #0]
    7f28:	b29b      	uxth	r3, r3
    7f2a:	021b      	lsls	r3, r3, #8
    7f2c:	b29b      	uxth	r3, r3
    7f2e:	4413      	add	r3, r2
    7f30:	b29a      	uxth	r2, r3
    7f32:	68fb      	ldr	r3, [r7, #12]
    7f34:	829a      	strh	r2, [r3, #20]
    7f36:	68bb      	ldr	r3, [r7, #8]
    7f38:	3302      	adds	r3, #2
    7f3a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
    7f3c:	68bb      	ldr	r3, [r7, #8]
    7f3e:	1c5a      	adds	r2, r3, #1
    7f40:	60ba      	str	r2, [r7, #8]
    7f42:	781a      	ldrb	r2, [r3, #0]
    7f44:	68fb      	ldr	r3, [r7, #12]
    7f46:	759a      	strb	r2, [r3, #22]

  pMsg->hdr.param = pMsg->leConnCmpl.handle;
    7f48:	68fb      	ldr	r3, [r7, #12]
    7f4a:	88da      	ldrh	r2, [r3, #6]
    7f4c:	68fb      	ldr	r3, [r7, #12]
    7f4e:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
    7f50:	68fb      	ldr	r3, [r7, #12]
    7f52:	791a      	ldrb	r2, [r3, #4]
    7f54:	68fb      	ldr	r3, [r7, #12]
    7f56:	70da      	strb	r2, [r3, #3]
}
    7f58:	bf00      	nop
    7f5a:	3710      	adds	r7, #16
    7f5c:	46bd      	mov	sp, r7
    7f5e:	bd80      	pop	{r7, pc}

00007f60 <hciEvtParseDisconnectCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDisconnectCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    7f60:	b480      	push	{r7}
    7f62:	b085      	sub	sp, #20
    7f64:	af00      	add	r7, sp, #0
    7f66:	60f8      	str	r0, [r7, #12]
    7f68:	60b9      	str	r1, [r7, #8]
    7f6a:	4613      	mov	r3, r2
    7f6c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.status, p);
    7f6e:	68bb      	ldr	r3, [r7, #8]
    7f70:	1c5a      	adds	r2, r3, #1
    7f72:	60ba      	str	r2, [r7, #8]
    7f74:	781a      	ldrb	r2, [r3, #0]
    7f76:	68fb      	ldr	r3, [r7, #12]
    7f78:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->disconnectCmpl.handle, p);
    7f7a:	68bb      	ldr	r3, [r7, #8]
    7f7c:	781b      	ldrb	r3, [r3, #0]
    7f7e:	b29a      	uxth	r2, r3
    7f80:	68bb      	ldr	r3, [r7, #8]
    7f82:	3301      	adds	r3, #1
    7f84:	781b      	ldrb	r3, [r3, #0]
    7f86:	b29b      	uxth	r3, r3
    7f88:	021b      	lsls	r3, r3, #8
    7f8a:	b29b      	uxth	r3, r3
    7f8c:	4413      	add	r3, r2
    7f8e:	b29a      	uxth	r2, r3
    7f90:	68fb      	ldr	r3, [r7, #12]
    7f92:	80da      	strh	r2, [r3, #6]
    7f94:	68bb      	ldr	r3, [r7, #8]
    7f96:	3302      	adds	r3, #2
    7f98:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.reason, p);
    7f9a:	68bb      	ldr	r3, [r7, #8]
    7f9c:	1c5a      	adds	r2, r3, #1
    7f9e:	60ba      	str	r2, [r7, #8]
    7fa0:	781a      	ldrb	r2, [r3, #0]
    7fa2:	68fb      	ldr	r3, [r7, #12]
    7fa4:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->disconnectCmpl.handle;
    7fa6:	68fb      	ldr	r3, [r7, #12]
    7fa8:	88da      	ldrh	r2, [r3, #6]
    7faa:	68fb      	ldr	r3, [r7, #12]
    7fac:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->disconnectCmpl.status;
    7fae:	68fb      	ldr	r3, [r7, #12]
    7fb0:	791a      	ldrb	r2, [r3, #4]
    7fb2:	68fb      	ldr	r3, [r7, #12]
    7fb4:	70da      	strb	r2, [r3, #3]
}
    7fb6:	bf00      	nop
    7fb8:	3714      	adds	r7, #20
    7fba:	46bd      	mov	sp, r7
    7fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fc0:	4770      	bx	lr

00007fc2 <hciEvtParseLeConnUpdateCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    7fc2:	b480      	push	{r7}
    7fc4:	b085      	sub	sp, #20
    7fc6:	af00      	add	r7, sp, #0
    7fc8:	60f8      	str	r0, [r7, #12]
    7fca:	60b9      	str	r1, [r7, #8]
    7fcc:	4613      	mov	r3, r2
    7fce:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnUpdateCmpl.status, p);
    7fd0:	68bb      	ldr	r3, [r7, #8]
    7fd2:	1c5a      	adds	r2, r3, #1
    7fd4:	60ba      	str	r2, [r7, #8]
    7fd6:	781a      	ldrb	r2, [r3, #0]
    7fd8:	68fb      	ldr	r3, [r7, #12]
    7fda:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.handle, p);
    7fdc:	68bb      	ldr	r3, [r7, #8]
    7fde:	781b      	ldrb	r3, [r3, #0]
    7fe0:	b29a      	uxth	r2, r3
    7fe2:	68bb      	ldr	r3, [r7, #8]
    7fe4:	3301      	adds	r3, #1
    7fe6:	781b      	ldrb	r3, [r3, #0]
    7fe8:	b29b      	uxth	r3, r3
    7fea:	021b      	lsls	r3, r3, #8
    7fec:	b29b      	uxth	r3, r3
    7fee:	4413      	add	r3, r2
    7ff0:	b29a      	uxth	r2, r3
    7ff2:	68fb      	ldr	r3, [r7, #12]
    7ff4:	80da      	strh	r2, [r3, #6]
    7ff6:	68bb      	ldr	r3, [r7, #8]
    7ff8:	3302      	adds	r3, #2
    7ffa:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connInterval, p);
    7ffc:	68bb      	ldr	r3, [r7, #8]
    7ffe:	781b      	ldrb	r3, [r3, #0]
    8000:	b29a      	uxth	r2, r3
    8002:	68bb      	ldr	r3, [r7, #8]
    8004:	3301      	adds	r3, #1
    8006:	781b      	ldrb	r3, [r3, #0]
    8008:	b29b      	uxth	r3, r3
    800a:	021b      	lsls	r3, r3, #8
    800c:	b29b      	uxth	r3, r3
    800e:	4413      	add	r3, r2
    8010:	b29a      	uxth	r2, r3
    8012:	68fb      	ldr	r3, [r7, #12]
    8014:	811a      	strh	r2, [r3, #8]
    8016:	68bb      	ldr	r3, [r7, #8]
    8018:	3302      	adds	r3, #2
    801a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connLatency, p);
    801c:	68bb      	ldr	r3, [r7, #8]
    801e:	781b      	ldrb	r3, [r3, #0]
    8020:	b29a      	uxth	r2, r3
    8022:	68bb      	ldr	r3, [r7, #8]
    8024:	3301      	adds	r3, #1
    8026:	781b      	ldrb	r3, [r3, #0]
    8028:	b29b      	uxth	r3, r3
    802a:	021b      	lsls	r3, r3, #8
    802c:	b29b      	uxth	r3, r3
    802e:	4413      	add	r3, r2
    8030:	b29a      	uxth	r2, r3
    8032:	68fb      	ldr	r3, [r7, #12]
    8034:	815a      	strh	r2, [r3, #10]
    8036:	68bb      	ldr	r3, [r7, #8]
    8038:	3302      	adds	r3, #2
    803a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.supTimeout, p);
    803c:	68bb      	ldr	r3, [r7, #8]
    803e:	781b      	ldrb	r3, [r3, #0]
    8040:	b29a      	uxth	r2, r3
    8042:	68bb      	ldr	r3, [r7, #8]
    8044:	3301      	adds	r3, #1
    8046:	781b      	ldrb	r3, [r3, #0]
    8048:	b29b      	uxth	r3, r3
    804a:	021b      	lsls	r3, r3, #8
    804c:	b29b      	uxth	r3, r3
    804e:	4413      	add	r3, r2
    8050:	b29a      	uxth	r2, r3
    8052:	68fb      	ldr	r3, [r7, #12]
    8054:	819a      	strh	r2, [r3, #12]
    8056:	68bb      	ldr	r3, [r7, #8]
    8058:	3302      	adds	r3, #2
    805a:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leConnUpdateCmpl.handle;
    805c:	68fb      	ldr	r3, [r7, #12]
    805e:	88da      	ldrh	r2, [r3, #6]
    8060:	68fb      	ldr	r3, [r7, #12]
    8062:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnUpdateCmpl.status;
    8064:	68fb      	ldr	r3, [r7, #12]
    8066:	791a      	ldrb	r2, [r3, #4]
    8068:	68fb      	ldr	r3, [r7, #12]
    806a:	70da      	strb	r2, [r3, #3]
}
    806c:	bf00      	nop
    806e:	3714      	adds	r7, #20
    8070:	46bd      	mov	sp, r7
    8072:	f85d 7b04 	ldr.w	r7, [sp], #4
    8076:	4770      	bx	lr

00008078 <hciEvtParseLeCreateConnCancelCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCreateConnCancelCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8078:	b480      	push	{r7}
    807a:	b085      	sub	sp, #20
    807c:	af00      	add	r7, sp, #0
    807e:	60f8      	str	r0, [r7, #12]
    8080:	60b9      	str	r1, [r7, #8]
    8082:	4613      	mov	r3, r2
    8084:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leCreateConnCancelCmdCmpl.status, p);
    8086:	68bb      	ldr	r3, [r7, #8]
    8088:	1c5a      	adds	r2, r3, #1
    808a:	60ba      	str	r2, [r7, #8]
    808c:	781a      	ldrb	r2, [r3, #0]
    808e:	68fb      	ldr	r3, [r7, #12]
    8090:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leCreateConnCancelCmdCmpl.status;
    8092:	68fb      	ldr	r3, [r7, #12]
    8094:	791a      	ldrb	r2, [r3, #4]
    8096:	68fb      	ldr	r3, [r7, #12]
    8098:	70da      	strb	r2, [r3, #3]
}
    809a:	bf00      	nop
    809c:	3714      	adds	r7, #20
    809e:	46bd      	mov	sp, r7
    80a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    80a4:	4770      	bx	lr

000080a6 <hciEvtParseReadRssiCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRssiCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    80a6:	b480      	push	{r7}
    80a8:	b085      	sub	sp, #20
    80aa:	af00      	add	r7, sp, #0
    80ac:	60f8      	str	r0, [r7, #12]
    80ae:	60b9      	str	r1, [r7, #8]
    80b0:	4613      	mov	r3, r2
    80b2:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.status, p);
    80b4:	68bb      	ldr	r3, [r7, #8]
    80b6:	1c5a      	adds	r2, r3, #1
    80b8:	60ba      	str	r2, [r7, #8]
    80ba:	781a      	ldrb	r2, [r3, #0]
    80bc:	68fb      	ldr	r3, [r7, #12]
    80be:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readRssiCmdCmpl.handle, p);
    80c0:	68bb      	ldr	r3, [r7, #8]
    80c2:	781b      	ldrb	r3, [r3, #0]
    80c4:	b29a      	uxth	r2, r3
    80c6:	68bb      	ldr	r3, [r7, #8]
    80c8:	3301      	adds	r3, #1
    80ca:	781b      	ldrb	r3, [r3, #0]
    80cc:	b29b      	uxth	r3, r3
    80ce:	021b      	lsls	r3, r3, #8
    80d0:	b29b      	uxth	r3, r3
    80d2:	4413      	add	r3, r2
    80d4:	b29a      	uxth	r2, r3
    80d6:	68fb      	ldr	r3, [r7, #12]
    80d8:	80da      	strh	r2, [r3, #6]
    80da:	68bb      	ldr	r3, [r7, #8]
    80dc:	3302      	adds	r3, #2
    80de:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.rssi, p);
    80e0:	68bb      	ldr	r3, [r7, #8]
    80e2:	1c5a      	adds	r2, r3, #1
    80e4:	60ba      	str	r2, [r7, #8]
    80e6:	781b      	ldrb	r3, [r3, #0]
    80e8:	b25a      	sxtb	r2, r3
    80ea:	68fb      	ldr	r3, [r7, #12]
    80ec:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->readRssiCmdCmpl.handle;
    80ee:	68fb      	ldr	r3, [r7, #12]
    80f0:	88da      	ldrh	r2, [r3, #6]
    80f2:	68fb      	ldr	r3, [r7, #12]
    80f4:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readRssiCmdCmpl.status;
    80f6:	68fb      	ldr	r3, [r7, #12]
    80f8:	791a      	ldrb	r2, [r3, #4]
    80fa:	68fb      	ldr	r3, [r7, #12]
    80fc:	70da      	strb	r2, [r3, #3]
}
    80fe:	bf00      	nop
    8100:	3714      	adds	r7, #20
    8102:	46bd      	mov	sp, r7
    8104:	f85d 7b04 	ldr.w	r7, [sp], #4
    8108:	4770      	bx	lr

0000810a <hciEvtParseReadChanMapCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadChanMapCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    810a:	b580      	push	{r7, lr}
    810c:	b084      	sub	sp, #16
    810e:	af00      	add	r7, sp, #0
    8110:	60f8      	str	r0, [r7, #12]
    8112:	60b9      	str	r1, [r7, #8]
    8114:	4613      	mov	r3, r2
    8116:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readChanMapCmdCmpl.status, p);
    8118:	68bb      	ldr	r3, [r7, #8]
    811a:	1c5a      	adds	r2, r3, #1
    811c:	60ba      	str	r2, [r7, #8]
    811e:	781a      	ldrb	r2, [r3, #0]
    8120:	68fb      	ldr	r3, [r7, #12]
    8122:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readChanMapCmdCmpl.handle, p);
    8124:	68bb      	ldr	r3, [r7, #8]
    8126:	781b      	ldrb	r3, [r3, #0]
    8128:	b29a      	uxth	r2, r3
    812a:	68bb      	ldr	r3, [r7, #8]
    812c:	3301      	adds	r3, #1
    812e:	781b      	ldrb	r3, [r3, #0]
    8130:	b29b      	uxth	r3, r3
    8132:	021b      	lsls	r3, r3, #8
    8134:	b29b      	uxth	r3, r3
    8136:	4413      	add	r3, r2
    8138:	b29a      	uxth	r2, r3
    813a:	68fb      	ldr	r3, [r7, #12]
    813c:	80da      	strh	r2, [r3, #6]
    813e:	68bb      	ldr	r3, [r7, #8]
    8140:	3302      	adds	r3, #2
    8142:	60bb      	str	r3, [r7, #8]

  memcpy(pMsg->readChanMapCmdCmpl.chanMap, p, HCI_CHAN_MAP_LEN);
    8144:	68fb      	ldr	r3, [r7, #12]
    8146:	3308      	adds	r3, #8
    8148:	2205      	movs	r2, #5
    814a:	68b9      	ldr	r1, [r7, #8]
    814c:	4618      	mov	r0, r3
    814e:	f007 fcfe 	bl	fb4e <memcpy>

  pMsg->hdr.param = pMsg->readChanMapCmdCmpl.handle;
    8152:	68fb      	ldr	r3, [r7, #12]
    8154:	88da      	ldrh	r2, [r3, #6]
    8156:	68fb      	ldr	r3, [r7, #12]
    8158:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readChanMapCmdCmpl.status;
    815a:	68fb      	ldr	r3, [r7, #12]
    815c:	791a      	ldrb	r2, [r3, #4]
    815e:	68fb      	ldr	r3, [r7, #12]
    8160:	70da      	strb	r2, [r3, #3]
}
    8162:	bf00      	nop
    8164:	3710      	adds	r7, #16
    8166:	46bd      	mov	sp, r7
    8168:	bd80      	pop	{r7, pc}

0000816a <hciEvtParseReadTxPwrLvlCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadTxPwrLvlCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    816a:	b480      	push	{r7}
    816c:	b085      	sub	sp, #20
    816e:	af00      	add	r7, sp, #0
    8170:	60f8      	str	r0, [r7, #12]
    8172:	60b9      	str	r1, [r7, #8]
    8174:	4613      	mov	r3, r2
    8176:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readTxPwrLvlCmdCmpl.status, p);
    8178:	68bb      	ldr	r3, [r7, #8]
    817a:	1c5a      	adds	r2, r3, #1
    817c:	60ba      	str	r2, [r7, #8]
    817e:	781a      	ldrb	r2, [r3, #0]
    8180:	68fb      	ldr	r3, [r7, #12]
    8182:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readTxPwrLvlCmdCmpl.handle, p);
    8184:	68bb      	ldr	r3, [r7, #8]
    8186:	781a      	ldrb	r2, [r3, #0]
    8188:	68fb      	ldr	r3, [r7, #12]
    818a:	715a      	strb	r2, [r3, #5]
    818c:	68bb      	ldr	r3, [r7, #8]
    818e:	3302      	adds	r3, #2
    8190:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_INT8(pMsg->readTxPwrLvlCmdCmpl.pwrLvl, p);
    8192:	68bb      	ldr	r3, [r7, #8]
    8194:	1c5a      	adds	r2, r3, #1
    8196:	60ba      	str	r2, [r7, #8]
    8198:	781b      	ldrb	r3, [r3, #0]
    819a:	b25a      	sxtb	r2, r3
    819c:	68fb      	ldr	r3, [r7, #12]
    819e:	719a      	strb	r2, [r3, #6]

  pMsg->hdr.param = pMsg->readTxPwrLvlCmdCmpl.handle;
    81a0:	68fb      	ldr	r3, [r7, #12]
    81a2:	795b      	ldrb	r3, [r3, #5]
    81a4:	b29a      	uxth	r2, r3
    81a6:	68fb      	ldr	r3, [r7, #12]
    81a8:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readTxPwrLvlCmdCmpl.status;
    81aa:	68fb      	ldr	r3, [r7, #12]
    81ac:	791a      	ldrb	r2, [r3, #4]
    81ae:	68fb      	ldr	r3, [r7, #12]
    81b0:	70da      	strb	r2, [r3, #3]
}
    81b2:	bf00      	nop
    81b4:	3714      	adds	r7, #20
    81b6:	46bd      	mov	sp, r7
    81b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    81bc:	4770      	bx	lr

000081be <hciEvtParseReadRemoteVerInfoCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRemoteVerInfoCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    81be:	b480      	push	{r7}
    81c0:	b085      	sub	sp, #20
    81c2:	af00      	add	r7, sp, #0
    81c4:	60f8      	str	r0, [r7, #12]
    81c6:	60b9      	str	r1, [r7, #8]
    81c8:	4613      	mov	r3, r2
    81ca:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.status, p);
    81cc:	68bb      	ldr	r3, [r7, #8]
    81ce:	1c5a      	adds	r2, r3, #1
    81d0:	60ba      	str	r2, [r7, #8]
    81d2:	781a      	ldrb	r2, [r3, #0]
    81d4:	68fb      	ldr	r3, [r7, #12]
    81d6:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.handle, p);
    81d8:	68bb      	ldr	r3, [r7, #8]
    81da:	781b      	ldrb	r3, [r3, #0]
    81dc:	b29a      	uxth	r2, r3
    81de:	68bb      	ldr	r3, [r7, #8]
    81e0:	3301      	adds	r3, #1
    81e2:	781b      	ldrb	r3, [r3, #0]
    81e4:	b29b      	uxth	r3, r3
    81e6:	021b      	lsls	r3, r3, #8
    81e8:	b29b      	uxth	r3, r3
    81ea:	4413      	add	r3, r2
    81ec:	b29a      	uxth	r2, r3
    81ee:	68fb      	ldr	r3, [r7, #12]
    81f0:	80da      	strh	r2, [r3, #6]
    81f2:	68bb      	ldr	r3, [r7, #8]
    81f4:	3302      	adds	r3, #2
    81f6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.version, p);
    81f8:	68bb      	ldr	r3, [r7, #8]
    81fa:	1c5a      	adds	r2, r3, #1
    81fc:	60ba      	str	r2, [r7, #8]
    81fe:	781a      	ldrb	r2, [r3, #0]
    8200:	68fb      	ldr	r3, [r7, #12]
    8202:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.mfrName, p);
    8204:	68bb      	ldr	r3, [r7, #8]
    8206:	781b      	ldrb	r3, [r3, #0]
    8208:	b29a      	uxth	r2, r3
    820a:	68bb      	ldr	r3, [r7, #8]
    820c:	3301      	adds	r3, #1
    820e:	781b      	ldrb	r3, [r3, #0]
    8210:	b29b      	uxth	r3, r3
    8212:	021b      	lsls	r3, r3, #8
    8214:	b29b      	uxth	r3, r3
    8216:	4413      	add	r3, r2
    8218:	b29a      	uxth	r2, r3
    821a:	68fb      	ldr	r3, [r7, #12]
    821c:	815a      	strh	r2, [r3, #10]
    821e:	68bb      	ldr	r3, [r7, #8]
    8220:	3302      	adds	r3, #2
    8222:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.subversion, p);
    8224:	68bb      	ldr	r3, [r7, #8]
    8226:	781b      	ldrb	r3, [r3, #0]
    8228:	b29a      	uxth	r2, r3
    822a:	68bb      	ldr	r3, [r7, #8]
    822c:	3301      	adds	r3, #1
    822e:	781b      	ldrb	r3, [r3, #0]
    8230:	b29b      	uxth	r3, r3
    8232:	021b      	lsls	r3, r3, #8
    8234:	b29b      	uxth	r3, r3
    8236:	4413      	add	r3, r2
    8238:	b29a      	uxth	r2, r3
    823a:	68fb      	ldr	r3, [r7, #12]
    823c:	819a      	strh	r2, [r3, #12]
    823e:	68bb      	ldr	r3, [r7, #8]
    8240:	3302      	adds	r3, #2
    8242:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->readRemoteVerInfoCmpl.handle;
    8244:	68fb      	ldr	r3, [r7, #12]
    8246:	88da      	ldrh	r2, [r3, #6]
    8248:	68fb      	ldr	r3, [r7, #12]
    824a:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readRemoteVerInfoCmpl.status;
    824c:	68fb      	ldr	r3, [r7, #12]
    824e:	791a      	ldrb	r2, [r3, #4]
    8250:	68fb      	ldr	r3, [r7, #12]
    8252:	70da      	strb	r2, [r3, #3]
}
    8254:	bf00      	nop
    8256:	3714      	adds	r7, #20
    8258:	46bd      	mov	sp, r7
    825a:	f85d 7b04 	ldr.w	r7, [sp], #4
    825e:	4770      	bx	lr

00008260 <hciEvtParseReadLeRemoteFeatCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadLeRemoteFeatCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8260:	b580      	push	{r7, lr}
    8262:	b084      	sub	sp, #16
    8264:	af00      	add	r7, sp, #0
    8266:	60f8      	str	r0, [r7, #12]
    8268:	60b9      	str	r1, [r7, #8]
    826a:	4613      	mov	r3, r2
    826c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadRemoteFeatCmpl.status, p);
    826e:	68bb      	ldr	r3, [r7, #8]
    8270:	1c5a      	adds	r2, r3, #1
    8272:	60ba      	str	r2, [r7, #8]
    8274:	781a      	ldrb	r2, [r3, #0]
    8276:	68fb      	ldr	r3, [r7, #12]
    8278:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadRemoteFeatCmpl.handle, p);
    827a:	68bb      	ldr	r3, [r7, #8]
    827c:	781b      	ldrb	r3, [r3, #0]
    827e:	b29a      	uxth	r2, r3
    8280:	68bb      	ldr	r3, [r7, #8]
    8282:	3301      	adds	r3, #1
    8284:	781b      	ldrb	r3, [r3, #0]
    8286:	b29b      	uxth	r3, r3
    8288:	021b      	lsls	r3, r3, #8
    828a:	b29b      	uxth	r3, r3
    828c:	4413      	add	r3, r2
    828e:	b29a      	uxth	r2, r3
    8290:	68fb      	ldr	r3, [r7, #12]
    8292:	80da      	strh	r2, [r3, #6]
    8294:	68bb      	ldr	r3, [r7, #8]
    8296:	3302      	adds	r3, #2
    8298:	60bb      	str	r3, [r7, #8]
  memcpy(&pMsg->leReadRemoteFeatCmpl.features, p, HCI_FEAT_LEN);
    829a:	68fb      	ldr	r3, [r7, #12]
    829c:	3308      	adds	r3, #8
    829e:	2208      	movs	r2, #8
    82a0:	68b9      	ldr	r1, [r7, #8]
    82a2:	4618      	mov	r0, r3
    82a4:	f007 fc53 	bl	fb4e <memcpy>

  pMsg->hdr.param = pMsg->leReadRemoteFeatCmpl.handle;
    82a8:	68fb      	ldr	r3, [r7, #12]
    82aa:	88da      	ldrh	r2, [r3, #6]
    82ac:	68fb      	ldr	r3, [r7, #12]
    82ae:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leReadRemoteFeatCmpl.status;
    82b0:	68fb      	ldr	r3, [r7, #12]
    82b2:	791a      	ldrb	r2, [r3, #4]
    82b4:	68fb      	ldr	r3, [r7, #12]
    82b6:	70da      	strb	r2, [r3, #3]
}
    82b8:	bf00      	nop
    82ba:	3710      	adds	r7, #16
    82bc:	46bd      	mov	sp, r7
    82be:	bd80      	pop	{r7, pc}

000082c0 <hciEvtParseLeLtkReqReplCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    82c0:	b480      	push	{r7}
    82c2:	b085      	sub	sp, #20
    82c4:	af00      	add	r7, sp, #0
    82c6:	60f8      	str	r0, [r7, #12]
    82c8:	60b9      	str	r1, [r7, #8]
    82ca:	4613      	mov	r3, r2
    82cc:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leLtkReqReplCmdCmpl.status, p);
    82ce:	68bb      	ldr	r3, [r7, #8]
    82d0:	1c5a      	adds	r2, r3, #1
    82d2:	60ba      	str	r2, [r7, #8]
    82d4:	781a      	ldrb	r2, [r3, #0]
    82d6:	68fb      	ldr	r3, [r7, #12]
    82d8:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqReplCmdCmpl.handle, p);
    82da:	68bb      	ldr	r3, [r7, #8]
    82dc:	781b      	ldrb	r3, [r3, #0]
    82de:	b29a      	uxth	r2, r3
    82e0:	68bb      	ldr	r3, [r7, #8]
    82e2:	3301      	adds	r3, #1
    82e4:	781b      	ldrb	r3, [r3, #0]
    82e6:	b29b      	uxth	r3, r3
    82e8:	021b      	lsls	r3, r3, #8
    82ea:	b29b      	uxth	r3, r3
    82ec:	4413      	add	r3, r2
    82ee:	b29a      	uxth	r2, r3
    82f0:	68fb      	ldr	r3, [r7, #12]
    82f2:	80da      	strh	r2, [r3, #6]
    82f4:	68bb      	ldr	r3, [r7, #8]
    82f6:	3302      	adds	r3, #2
    82f8:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReqReplCmdCmpl.handle;
    82fa:	68fb      	ldr	r3, [r7, #12]
    82fc:	88da      	ldrh	r2, [r3, #6]
    82fe:	68fb      	ldr	r3, [r7, #12]
    8300:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leLtkReqReplCmdCmpl.status;
    8302:	68fb      	ldr	r3, [r7, #12]
    8304:	791a      	ldrb	r2, [r3, #4]
    8306:	68fb      	ldr	r3, [r7, #12]
    8308:	70da      	strb	r2, [r3, #3]
}
    830a:	bf00      	nop
    830c:	3714      	adds	r7, #20
    830e:	46bd      	mov	sp, r7
    8310:	f85d 7b04 	ldr.w	r7, [sp], #4
    8314:	4770      	bx	lr

00008316 <hciEvtParseLeLtkReqNegReplCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqNegReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8316:	b480      	push	{r7}
    8318:	b085      	sub	sp, #20
    831a:	af00      	add	r7, sp, #0
    831c:	60f8      	str	r0, [r7, #12]
    831e:	60b9      	str	r1, [r7, #8]
    8320:	4613      	mov	r3, r2
    8322:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leLtkReqNegReplCmdCmpl.status, p);
    8324:	68bb      	ldr	r3, [r7, #8]
    8326:	1c5a      	adds	r2, r3, #1
    8328:	60ba      	str	r2, [r7, #8]
    832a:	781a      	ldrb	r2, [r3, #0]
    832c:	68fb      	ldr	r3, [r7, #12]
    832e:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqNegReplCmdCmpl.handle, p);
    8330:	68bb      	ldr	r3, [r7, #8]
    8332:	781b      	ldrb	r3, [r3, #0]
    8334:	b29a      	uxth	r2, r3
    8336:	68bb      	ldr	r3, [r7, #8]
    8338:	3301      	adds	r3, #1
    833a:	781b      	ldrb	r3, [r3, #0]
    833c:	b29b      	uxth	r3, r3
    833e:	021b      	lsls	r3, r3, #8
    8340:	b29b      	uxth	r3, r3
    8342:	4413      	add	r3, r2
    8344:	b29a      	uxth	r2, r3
    8346:	68fb      	ldr	r3, [r7, #12]
    8348:	80da      	strh	r2, [r3, #6]
    834a:	68bb      	ldr	r3, [r7, #8]
    834c:	3302      	adds	r3, #2
    834e:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReqNegReplCmdCmpl.handle;
    8350:	68fb      	ldr	r3, [r7, #12]
    8352:	88da      	ldrh	r2, [r3, #6]
    8354:	68fb      	ldr	r3, [r7, #12]
    8356:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leLtkReqNegReplCmdCmpl.status;
    8358:	68fb      	ldr	r3, [r7, #12]
    835a:	791a      	ldrb	r2, [r3, #4]
    835c:	68fb      	ldr	r3, [r7, #12]
    835e:	70da      	strb	r2, [r3, #3]
}
    8360:	bf00      	nop
    8362:	3714      	adds	r7, #20
    8364:	46bd      	mov	sp, r7
    8366:	f85d 7b04 	ldr.w	r7, [sp], #4
    836a:	4770      	bx	lr

0000836c <hciEvtParseEncKeyRefreshCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncKeyRefreshCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    836c:	b480      	push	{r7}
    836e:	b085      	sub	sp, #20
    8370:	af00      	add	r7, sp, #0
    8372:	60f8      	str	r0, [r7, #12]
    8374:	60b9      	str	r1, [r7, #8]
    8376:	4613      	mov	r3, r2
    8378:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->encKeyRefreshCmpl.status, p);
    837a:	68bb      	ldr	r3, [r7, #8]
    837c:	1c5a      	adds	r2, r3, #1
    837e:	60ba      	str	r2, [r7, #8]
    8380:	781a      	ldrb	r2, [r3, #0]
    8382:	68fb      	ldr	r3, [r7, #12]
    8384:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->encKeyRefreshCmpl.handle, p);
    8386:	68bb      	ldr	r3, [r7, #8]
    8388:	781b      	ldrb	r3, [r3, #0]
    838a:	b29a      	uxth	r2, r3
    838c:	68bb      	ldr	r3, [r7, #8]
    838e:	3301      	adds	r3, #1
    8390:	781b      	ldrb	r3, [r3, #0]
    8392:	b29b      	uxth	r3, r3
    8394:	021b      	lsls	r3, r3, #8
    8396:	b29b      	uxth	r3, r3
    8398:	4413      	add	r3, r2
    839a:	b29a      	uxth	r2, r3
    839c:	68fb      	ldr	r3, [r7, #12]
    839e:	80da      	strh	r2, [r3, #6]
    83a0:	68bb      	ldr	r3, [r7, #8]
    83a2:	3302      	adds	r3, #2
    83a4:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->encKeyRefreshCmpl.handle;
    83a6:	68fb      	ldr	r3, [r7, #12]
    83a8:	88da      	ldrh	r2, [r3, #6]
    83aa:	68fb      	ldr	r3, [r7, #12]
    83ac:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->encKeyRefreshCmpl.status;
    83ae:	68fb      	ldr	r3, [r7, #12]
    83b0:	791a      	ldrb	r2, [r3, #4]
    83b2:	68fb      	ldr	r3, [r7, #12]
    83b4:	70da      	strb	r2, [r3, #3]
}
    83b6:	bf00      	nop
    83b8:	3714      	adds	r7, #20
    83ba:	46bd      	mov	sp, r7
    83bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    83c0:	4770      	bx	lr

000083c2 <hciEvtParseEncChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    83c2:	b480      	push	{r7}
    83c4:	b085      	sub	sp, #20
    83c6:	af00      	add	r7, sp, #0
    83c8:	60f8      	str	r0, [r7, #12]
    83ca:	60b9      	str	r1, [r7, #8]
    83cc:	4613      	mov	r3, r2
    83ce:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->encChange.status, p);
    83d0:	68bb      	ldr	r3, [r7, #8]
    83d2:	1c5a      	adds	r2, r3, #1
    83d4:	60ba      	str	r2, [r7, #8]
    83d6:	781a      	ldrb	r2, [r3, #0]
    83d8:	68fb      	ldr	r3, [r7, #12]
    83da:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->encChange.handle, p);
    83dc:	68bb      	ldr	r3, [r7, #8]
    83de:	781b      	ldrb	r3, [r3, #0]
    83e0:	b29a      	uxth	r2, r3
    83e2:	68bb      	ldr	r3, [r7, #8]
    83e4:	3301      	adds	r3, #1
    83e6:	781b      	ldrb	r3, [r3, #0]
    83e8:	b29b      	uxth	r3, r3
    83ea:	021b      	lsls	r3, r3, #8
    83ec:	b29b      	uxth	r3, r3
    83ee:	4413      	add	r3, r2
    83f0:	b29a      	uxth	r2, r3
    83f2:	68fb      	ldr	r3, [r7, #12]
    83f4:	80da      	strh	r2, [r3, #6]
    83f6:	68bb      	ldr	r3, [r7, #8]
    83f8:	3302      	adds	r3, #2
    83fa:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->encChange.enabled, p);
    83fc:	68bb      	ldr	r3, [r7, #8]
    83fe:	1c5a      	adds	r2, r3, #1
    8400:	60ba      	str	r2, [r7, #8]
    8402:	781a      	ldrb	r2, [r3, #0]
    8404:	68fb      	ldr	r3, [r7, #12]
    8406:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->encChange.handle;
    8408:	68fb      	ldr	r3, [r7, #12]
    840a:	88da      	ldrh	r2, [r3, #6]
    840c:	68fb      	ldr	r3, [r7, #12]
    840e:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->encChange.status;
    8410:	68fb      	ldr	r3, [r7, #12]
    8412:	791a      	ldrb	r2, [r3, #4]
    8414:	68fb      	ldr	r3, [r7, #12]
    8416:	70da      	strb	r2, [r3, #3]
}
    8418:	bf00      	nop
    841a:	3714      	adds	r7, #20
    841c:	46bd      	mov	sp, r7
    841e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8422:	4770      	bx	lr

00008424 <hciEvtParseLeLtkReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8424:	b580      	push	{r7, lr}
    8426:	b084      	sub	sp, #16
    8428:	af00      	add	r7, sp, #0
    842a:	60f8      	str	r0, [r7, #12]
    842c:	60b9      	str	r1, [r7, #8]
    842e:	4613      	mov	r3, r2
    8430:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leLtkReq.handle, p);
    8432:	68bb      	ldr	r3, [r7, #8]
    8434:	781b      	ldrb	r3, [r3, #0]
    8436:	b29a      	uxth	r2, r3
    8438:	68bb      	ldr	r3, [r7, #8]
    843a:	3301      	adds	r3, #1
    843c:	781b      	ldrb	r3, [r3, #0]
    843e:	b29b      	uxth	r3, r3
    8440:	021b      	lsls	r3, r3, #8
    8442:	b29b      	uxth	r3, r3
    8444:	4413      	add	r3, r2
    8446:	b29a      	uxth	r2, r3
    8448:	68fb      	ldr	r3, [r7, #12]
    844a:	809a      	strh	r2, [r3, #4]
    844c:	68bb      	ldr	r3, [r7, #8]
    844e:	3302      	adds	r3, #2
    8450:	60bb      	str	r3, [r7, #8]

  memcpy(pMsg->leLtkReq.randNum, p, HCI_RAND_LEN);
    8452:	68fb      	ldr	r3, [r7, #12]
    8454:	3306      	adds	r3, #6
    8456:	2208      	movs	r2, #8
    8458:	68b9      	ldr	r1, [r7, #8]
    845a:	4618      	mov	r0, r3
    845c:	f007 fb77 	bl	fb4e <memcpy>
  p += HCI_RAND_LEN;
    8460:	68bb      	ldr	r3, [r7, #8]
    8462:	3308      	adds	r3, #8
    8464:	60bb      	str	r3, [r7, #8]

  BSTREAM_TO_UINT16(pMsg->leLtkReq.encDiversifier, p);
    8466:	68bb      	ldr	r3, [r7, #8]
    8468:	781b      	ldrb	r3, [r3, #0]
    846a:	b29a      	uxth	r2, r3
    846c:	68bb      	ldr	r3, [r7, #8]
    846e:	3301      	adds	r3, #1
    8470:	781b      	ldrb	r3, [r3, #0]
    8472:	b29b      	uxth	r3, r3
    8474:	021b      	lsls	r3, r3, #8
    8476:	b29b      	uxth	r3, r3
    8478:	4413      	add	r3, r2
    847a:	b29a      	uxth	r2, r3
    847c:	68fb      	ldr	r3, [r7, #12]
    847e:	81da      	strh	r2, [r3, #14]
    8480:	68bb      	ldr	r3, [r7, #8]
    8482:	3302      	adds	r3, #2
    8484:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReq.handle;
    8486:	68fb      	ldr	r3, [r7, #12]
    8488:	889a      	ldrh	r2, [r3, #4]
    848a:	68fb      	ldr	r3, [r7, #12]
    848c:	801a      	strh	r2, [r3, #0]
}
    848e:	bf00      	nop
    8490:	3710      	adds	r7, #16
    8492:	46bd      	mov	sp, r7
    8494:	bd80      	pop	{r7, pc}

00008496 <hciEvtParseVendorSpecCmdStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdStatus(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8496:	b480      	push	{r7}
    8498:	b085      	sub	sp, #20
    849a:	af00      	add	r7, sp, #0
    849c:	60f8      	str	r0, [r7, #12]
    849e:	60b9      	str	r1, [r7, #8]
    84a0:	4613      	mov	r3, r2
    84a2:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdStatus.opcode, p);
    84a4:	68bb      	ldr	r3, [r7, #8]
    84a6:	781b      	ldrb	r3, [r3, #0]
    84a8:	b29a      	uxth	r2, r3
    84aa:	68bb      	ldr	r3, [r7, #8]
    84ac:	3301      	adds	r3, #1
    84ae:	781b      	ldrb	r3, [r3, #0]
    84b0:	b29b      	uxth	r3, r3
    84b2:	021b      	lsls	r3, r3, #8
    84b4:	b29b      	uxth	r3, r3
    84b6:	4413      	add	r3, r2
    84b8:	b29a      	uxth	r2, r3
    84ba:	68fb      	ldr	r3, [r7, #12]
    84bc:	809a      	strh	r2, [r3, #4]
    84be:	68bb      	ldr	r3, [r7, #8]
    84c0:	3302      	adds	r3, #2
    84c2:	60bb      	str	r3, [r7, #8]
}
    84c4:	bf00      	nop
    84c6:	3714      	adds	r7, #20
    84c8:	46bd      	mov	sp, r7
    84ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    84ce:	4770      	bx	lr

000084d0 <hciEvtParseVendorSpecCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    84d0:	b480      	push	{r7}
    84d2:	b085      	sub	sp, #20
    84d4:	af00      	add	r7, sp, #0
    84d6:	60f8      	str	r0, [r7, #12]
    84d8:	60b9      	str	r1, [r7, #8]
    84da:	4613      	mov	r3, r2
    84dc:	71fb      	strb	r3, [r7, #7]
  /* roll pointer back to opcode */
  p -= 2;
    84de:	68bb      	ldr	r3, [r7, #8]
    84e0:	3b02      	subs	r3, #2
    84e2:	60bb      	str	r3, [r7, #8]

  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdCmpl.opcode, p);
    84e4:	68bb      	ldr	r3, [r7, #8]
    84e6:	781b      	ldrb	r3, [r3, #0]
    84e8:	b29a      	uxth	r2, r3
    84ea:	68bb      	ldr	r3, [r7, #8]
    84ec:	3301      	adds	r3, #1
    84ee:	781b      	ldrb	r3, [r3, #0]
    84f0:	b29b      	uxth	r3, r3
    84f2:	021b      	lsls	r3, r3, #8
    84f4:	b29b      	uxth	r3, r3
    84f6:	4413      	add	r3, r2
    84f8:	b29a      	uxth	r2, r3
    84fa:	68fb      	ldr	r3, [r7, #12]
    84fc:	809a      	strh	r2, [r3, #4]
    84fe:	68bb      	ldr	r3, [r7, #8]
    8500:	3302      	adds	r3, #2
    8502:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
    8504:	68bb      	ldr	r3, [r7, #8]
    8506:	1c5a      	adds	r2, r3, #1
    8508:	60ba      	str	r2, [r7, #8]
    850a:	781a      	ldrb	r2, [r3, #0]
    850c:	68fb      	ldr	r3, [r7, #12]
    850e:	70da      	strb	r2, [r3, #3]
  BSTREAM_TO_UINT8(pMsg->vendorSpecCmdCmpl.param[0], p);
    8510:	68bb      	ldr	r3, [r7, #8]
    8512:	1c5a      	adds	r2, r3, #1
    8514:	60ba      	str	r2, [r7, #8]
    8516:	781a      	ldrb	r2, [r3, #0]
    8518:	68fb      	ldr	r3, [r7, #12]
    851a:	719a      	strb	r2, [r3, #6]
}
    851c:	bf00      	nop
    851e:	3714      	adds	r7, #20
    8520:	46bd      	mov	sp, r7
    8522:	f85d 7b04 	ldr.w	r7, [sp], #4
    8526:	4770      	bx	lr

00008528 <hciEvtParseVendorSpec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpec(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8528:	b580      	push	{r7, lr}
    852a:	b084      	sub	sp, #16
    852c:	af00      	add	r7, sp, #0
    852e:	60f8      	str	r0, [r7, #12]
    8530:	60b9      	str	r1, [r7, #8]
    8532:	4613      	mov	r3, r2
    8534:	71fb      	strb	r3, [r7, #7]
  memcpy(pMsg->vendorSpec.param, p, len);
    8536:	68fb      	ldr	r3, [r7, #12]
    8538:	3304      	adds	r3, #4
    853a:	79fa      	ldrb	r2, [r7, #7]
    853c:	68b9      	ldr	r1, [r7, #8]
    853e:	4618      	mov	r0, r3
    8540:	f007 fb05 	bl	fb4e <memcpy>
}
    8544:	bf00      	nop
    8546:	3710      	adds	r7, #16
    8548:	46bd      	mov	sp, r7
    854a:	bd80      	pop	{r7, pc}

0000854c <hciEvtParseHwError>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseHwError(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    854c:	b480      	push	{r7}
    854e:	b085      	sub	sp, #20
    8550:	af00      	add	r7, sp, #0
    8552:	60f8      	str	r0, [r7, #12]
    8554:	60b9      	str	r1, [r7, #8]
    8556:	4613      	mov	r3, r2
    8558:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->hwError.code, p);
    855a:	68bb      	ldr	r3, [r7, #8]
    855c:	1c5a      	adds	r2, r3, #1
    855e:	60ba      	str	r2, [r7, #8]
    8560:	781a      	ldrb	r2, [r3, #0]
    8562:	68fb      	ldr	r3, [r7, #12]
    8564:	711a      	strb	r2, [r3, #4]
}
    8566:	bf00      	nop
    8568:	3714      	adds	r7, #20
    856a:	46bd      	mov	sp, r7
    856c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8570:	4770      	bx	lr

00008572 <hciEvtParseLeEncryptCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeEncryptCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8572:	b580      	push	{r7, lr}
    8574:	b084      	sub	sp, #16
    8576:	af00      	add	r7, sp, #0
    8578:	60f8      	str	r0, [r7, #12]
    857a:	60b9      	str	r1, [r7, #8]
    857c:	4613      	mov	r3, r2
    857e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leEncryptCmdCmpl.status, p);
    8580:	68bb      	ldr	r3, [r7, #8]
    8582:	1c5a      	adds	r2, r3, #1
    8584:	60ba      	str	r2, [r7, #8]
    8586:	781a      	ldrb	r2, [r3, #0]
    8588:	68fb      	ldr	r3, [r7, #12]
    858a:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leEncryptCmdCmpl.data, p, HCI_ENCRYPT_DATA_LEN);
    858c:	68fb      	ldr	r3, [r7, #12]
    858e:	3305      	adds	r3, #5
    8590:	2210      	movs	r2, #16
    8592:	68b9      	ldr	r1, [r7, #8]
    8594:	4618      	mov	r0, r3
    8596:	f007 fada 	bl	fb4e <memcpy>

  pMsg->hdr.status = pMsg->leEncryptCmdCmpl.status;
    859a:	68fb      	ldr	r3, [r7, #12]
    859c:	791a      	ldrb	r2, [r3, #4]
    859e:	68fb      	ldr	r3, [r7, #12]
    85a0:	70da      	strb	r2, [r3, #3]
}
    85a2:	bf00      	nop
    85a4:	3710      	adds	r7, #16
    85a6:	46bd      	mov	sp, r7
    85a8:	bd80      	pop	{r7, pc}

000085aa <hciEvtParseLeRandCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRandCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    85aa:	b580      	push	{r7, lr}
    85ac:	b084      	sub	sp, #16
    85ae:	af00      	add	r7, sp, #0
    85b0:	60f8      	str	r0, [r7, #12]
    85b2:	60b9      	str	r1, [r7, #8]
    85b4:	4613      	mov	r3, r2
    85b6:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRandCmdCmpl.status, p);
    85b8:	68bb      	ldr	r3, [r7, #8]
    85ba:	1c5a      	adds	r2, r3, #1
    85bc:	60ba      	str	r2, [r7, #8]
    85be:	781a      	ldrb	r2, [r3, #0]
    85c0:	68fb      	ldr	r3, [r7, #12]
    85c2:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leRandCmdCmpl.randNum, p, HCI_RAND_LEN);
    85c4:	68fb      	ldr	r3, [r7, #12]
    85c6:	3305      	adds	r3, #5
    85c8:	2208      	movs	r2, #8
    85ca:	68b9      	ldr	r1, [r7, #8]
    85cc:	4618      	mov	r0, r3
    85ce:	f007 fabe 	bl	fb4e <memcpy>

  pMsg->hdr.status = pMsg->leRandCmdCmpl.status;
    85d2:	68fb      	ldr	r3, [r7, #12]
    85d4:	791a      	ldrb	r2, [r3, #4]
    85d6:	68fb      	ldr	r3, [r7, #12]
    85d8:	70da      	strb	r2, [r3, #3]
}
    85da:	bf00      	nop
    85dc:	3710      	adds	r7, #16
    85de:	46bd      	mov	sp, r7
    85e0:	bd80      	pop	{r7, pc}

000085e2 <hciEvtParseLeAddDevToResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAddDevToResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    85e2:	b480      	push	{r7}
    85e4:	b085      	sub	sp, #20
    85e6:	af00      	add	r7, sp, #0
    85e8:	60f8      	str	r0, [r7, #12]
    85ea:	60b9      	str	r1, [r7, #8]
    85ec:	4613      	mov	r3, r2
    85ee:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leAddDevToResListCmdCmpl.status, p);
    85f0:	68bb      	ldr	r3, [r7, #8]
    85f2:	1c5a      	adds	r2, r3, #1
    85f4:	60ba      	str	r2, [r7, #8]
    85f6:	781a      	ldrb	r2, [r3, #0]
    85f8:	68fb      	ldr	r3, [r7, #12]
    85fa:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leAddDevToResListCmdCmpl.status;
    85fc:	68fb      	ldr	r3, [r7, #12]
    85fe:	791a      	ldrb	r2, [r3, #4]
    8600:	68fb      	ldr	r3, [r7, #12]
    8602:	70da      	strb	r2, [r3, #3]
}
    8604:	bf00      	nop
    8606:	3714      	adds	r7, #20
    8608:	46bd      	mov	sp, r7
    860a:	f85d 7b04 	ldr.w	r7, [sp], #4
    860e:	4770      	bx	lr

00008610 <hciEvtParseLeRemDevFromResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRemDevFromResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8610:	b480      	push	{r7}
    8612:	b085      	sub	sp, #20
    8614:	af00      	add	r7, sp, #0
    8616:	60f8      	str	r0, [r7, #12]
    8618:	60b9      	str	r1, [r7, #8]
    861a:	4613      	mov	r3, r2
    861c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemDevFromResListCmdCmpl.status, p);
    861e:	68bb      	ldr	r3, [r7, #8]
    8620:	1c5a      	adds	r2, r3, #1
    8622:	60ba      	str	r2, [r7, #8]
    8624:	781a      	ldrb	r2, [r3, #0]
    8626:	68fb      	ldr	r3, [r7, #12]
    8628:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leRemDevFromResListCmdCmpl.status;
    862a:	68fb      	ldr	r3, [r7, #12]
    862c:	791a      	ldrb	r2, [r3, #4]
    862e:	68fb      	ldr	r3, [r7, #12]
    8630:	70da      	strb	r2, [r3, #3]
}
    8632:	bf00      	nop
    8634:	3714      	adds	r7, #20
    8636:	46bd      	mov	sp, r7
    8638:	f85d 7b04 	ldr.w	r7, [sp], #4
    863c:	4770      	bx	lr

0000863e <hciEvtParseLeClearResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeClearResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    863e:	b480      	push	{r7}
    8640:	b085      	sub	sp, #20
    8642:	af00      	add	r7, sp, #0
    8644:	60f8      	str	r0, [r7, #12]
    8646:	60b9      	str	r1, [r7, #8]
    8648:	4613      	mov	r3, r2
    864a:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leClearResListCmdCmpl.status, p);
    864c:	68bb      	ldr	r3, [r7, #8]
    864e:	1c5a      	adds	r2, r3, #1
    8650:	60ba      	str	r2, [r7, #8]
    8652:	781a      	ldrb	r2, [r3, #0]
    8654:	68fb      	ldr	r3, [r7, #12]
    8656:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leClearResListCmdCmpl.status;
    8658:	68fb      	ldr	r3, [r7, #12]
    865a:	791a      	ldrb	r2, [r3, #4]
    865c:	68fb      	ldr	r3, [r7, #12]
    865e:	70da      	strb	r2, [r3, #3]
}
    8660:	bf00      	nop
    8662:	3714      	adds	r7, #20
    8664:	46bd      	mov	sp, r7
    8666:	f85d 7b04 	ldr.w	r7, [sp], #4
    866a:	4770      	bx	lr

0000866c <hciEvtParseLeReadPeerResAddrCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeReadPeerResAddrCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    866c:	b580      	push	{r7, lr}
    866e:	b084      	sub	sp, #16
    8670:	af00      	add	r7, sp, #0
    8672:	60f8      	str	r0, [r7, #12]
    8674:	60b9      	str	r1, [r7, #8]
    8676:	4613      	mov	r3, r2
    8678:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadPeerResAddrCmdCmpl.status, p);
    867a:	68bb      	ldr	r3, [r7, #8]
    867c:	1c5a      	adds	r2, r3, #1
    867e:	60ba      	str	r2, [r7, #8]
    8680:	781a      	ldrb	r2, [r3, #0]
    8682:	68fb      	ldr	r3, [r7, #12]
    8684:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_BDA(pMsg->leReadPeerResAddrCmdCmpl.peerRpa, p);
    8686:	68fb      	ldr	r3, [r7, #12]
    8688:	3305      	adds	r3, #5
    868a:	68b9      	ldr	r1, [r7, #8]
    868c:	4618      	mov	r0, r3
    868e:	f004 fbf5 	bl	ce7c <BdaCpy>
    8692:	68bb      	ldr	r3, [r7, #8]
    8694:	3306      	adds	r3, #6
    8696:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadPeerResAddrCmdCmpl.status;
    8698:	68fb      	ldr	r3, [r7, #12]
    869a:	791a      	ldrb	r2, [r3, #4]
    869c:	68fb      	ldr	r3, [r7, #12]
    869e:	70da      	strb	r2, [r3, #3]
}
    86a0:	bf00      	nop
    86a2:	3710      	adds	r7, #16
    86a4:	46bd      	mov	sp, r7
    86a6:	bd80      	pop	{r7, pc}

000086a8 <hciEvtParseLeReadLocalResAddrCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeReadLocalResAddrCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    86a8:	b580      	push	{r7, lr}
    86aa:	b084      	sub	sp, #16
    86ac:	af00      	add	r7, sp, #0
    86ae:	60f8      	str	r0, [r7, #12]
    86b0:	60b9      	str	r1, [r7, #8]
    86b2:	4613      	mov	r3, r2
    86b4:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadLocalResAddrCmdCmpl.status, p);
    86b6:	68bb      	ldr	r3, [r7, #8]
    86b8:	1c5a      	adds	r2, r3, #1
    86ba:	60ba      	str	r2, [r7, #8]
    86bc:	781a      	ldrb	r2, [r3, #0]
    86be:	68fb      	ldr	r3, [r7, #12]
    86c0:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_BDA(pMsg->leReadLocalResAddrCmdCmpl.localRpa, p);
    86c2:	68fb      	ldr	r3, [r7, #12]
    86c4:	3305      	adds	r3, #5
    86c6:	68b9      	ldr	r1, [r7, #8]
    86c8:	4618      	mov	r0, r3
    86ca:	f004 fbd7 	bl	ce7c <BdaCpy>
    86ce:	68bb      	ldr	r3, [r7, #8]
    86d0:	3306      	adds	r3, #6
    86d2:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadLocalResAddrCmdCmpl.status;
    86d4:	68fb      	ldr	r3, [r7, #12]
    86d6:	791a      	ldrb	r2, [r3, #4]
    86d8:	68fb      	ldr	r3, [r7, #12]
    86da:	70da      	strb	r2, [r3, #3]
}
    86dc:	bf00      	nop
    86de:	3710      	adds	r7, #16
    86e0:	46bd      	mov	sp, r7
    86e2:	bd80      	pop	{r7, pc}

000086e4 <hciEvtParseLeSetAddrResEnableCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeSetAddrResEnableCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    86e4:	b480      	push	{r7}
    86e6:	b085      	sub	sp, #20
    86e8:	af00      	add	r7, sp, #0
    86ea:	60f8      	str	r0, [r7, #12]
    86ec:	60b9      	str	r1, [r7, #8]
    86ee:	4613      	mov	r3, r2
    86f0:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetAddrResEnableCmdCmpl.status, p);
    86f2:	68bb      	ldr	r3, [r7, #8]
    86f4:	1c5a      	adds	r2, r3, #1
    86f6:	60ba      	str	r2, [r7, #8]
    86f8:	781a      	ldrb	r2, [r3, #0]
    86fa:	68fb      	ldr	r3, [r7, #12]
    86fc:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leSetAddrResEnableCmdCmpl.status;
    86fe:	68fb      	ldr	r3, [r7, #12]
    8700:	791a      	ldrb	r2, [r3, #4]
    8702:	68fb      	ldr	r3, [r7, #12]
    8704:	70da      	strb	r2, [r3, #3]
}
    8706:	bf00      	nop
    8708:	3714      	adds	r7, #20
    870a:	46bd      	mov	sp, r7
    870c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8710:	4770      	bx	lr

00008712 <hciEvtParseRemConnParamRepCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8712:	b480      	push	{r7}
    8714:	b085      	sub	sp, #20
    8716:	af00      	add	r7, sp, #0
    8718:	60f8      	str	r0, [r7, #12]
    871a:	60b9      	str	r1, [r7, #8]
    871c:	4613      	mov	r3, r2
    871e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemConnParamRepCmdCmpl.status, p);
    8720:	68bb      	ldr	r3, [r7, #8]
    8722:	1c5a      	adds	r2, r3, #1
    8724:	60ba      	str	r2, [r7, #8]
    8726:	781a      	ldrb	r2, [r3, #0]
    8728:	68fb      	ldr	r3, [r7, #12]
    872a:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamRepCmdCmpl.handle, p);
    872c:	68bb      	ldr	r3, [r7, #8]
    872e:	781b      	ldrb	r3, [r3, #0]
    8730:	b29a      	uxth	r2, r3
    8732:	68bb      	ldr	r3, [r7, #8]
    8734:	3301      	adds	r3, #1
    8736:	781b      	ldrb	r3, [r3, #0]
    8738:	b29b      	uxth	r3, r3
    873a:	021b      	lsls	r3, r3, #8
    873c:	b29b      	uxth	r3, r3
    873e:	4413      	add	r3, r2
    8740:	b29a      	uxth	r2, r3
    8742:	68fb      	ldr	r3, [r7, #12]
    8744:	80da      	strh	r2, [r3, #6]
    8746:	68bb      	ldr	r3, [r7, #8]
    8748:	3302      	adds	r3, #2
    874a:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leRemConnParamRepCmdCmpl.status;
    874c:	68fb      	ldr	r3, [r7, #12]
    874e:	791a      	ldrb	r2, [r3, #4]
    8750:	68fb      	ldr	r3, [r7, #12]
    8752:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leRemConnParamRepCmdCmpl.handle;
    8754:	68fb      	ldr	r3, [r7, #12]
    8756:	88da      	ldrh	r2, [r3, #6]
    8758:	68fb      	ldr	r3, [r7, #12]
    875a:	801a      	strh	r2, [r3, #0]
}
    875c:	bf00      	nop
    875e:	3714      	adds	r7, #20
    8760:	46bd      	mov	sp, r7
    8762:	f85d 7b04 	ldr.w	r7, [sp], #4
    8766:	4770      	bx	lr

00008768 <hciEvtParseRemConnParamNegRepCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamNegRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8768:	b480      	push	{r7}
    876a:	b085      	sub	sp, #20
    876c:	af00      	add	r7, sp, #0
    876e:	60f8      	str	r0, [r7, #12]
    8770:	60b9      	str	r1, [r7, #8]
    8772:	4613      	mov	r3, r2
    8774:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemConnParamNegRepCmdCmpl.status, p);
    8776:	68bb      	ldr	r3, [r7, #8]
    8778:	1c5a      	adds	r2, r3, #1
    877a:	60ba      	str	r2, [r7, #8]
    877c:	781a      	ldrb	r2, [r3, #0]
    877e:	68fb      	ldr	r3, [r7, #12]
    8780:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamNegRepCmdCmpl.handle, p);
    8782:	68bb      	ldr	r3, [r7, #8]
    8784:	781b      	ldrb	r3, [r3, #0]
    8786:	b29a      	uxth	r2, r3
    8788:	68bb      	ldr	r3, [r7, #8]
    878a:	3301      	adds	r3, #1
    878c:	781b      	ldrb	r3, [r3, #0]
    878e:	b29b      	uxth	r3, r3
    8790:	021b      	lsls	r3, r3, #8
    8792:	b29b      	uxth	r3, r3
    8794:	4413      	add	r3, r2
    8796:	b29a      	uxth	r2, r3
    8798:	68fb      	ldr	r3, [r7, #12]
    879a:	80da      	strh	r2, [r3, #6]
    879c:	68bb      	ldr	r3, [r7, #8]
    879e:	3302      	adds	r3, #2
    87a0:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leRemConnParamNegRepCmdCmpl.status;
    87a2:	68fb      	ldr	r3, [r7, #12]
    87a4:	791a      	ldrb	r2, [r3, #4]
    87a6:	68fb      	ldr	r3, [r7, #12]
    87a8:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leRemConnParamNegRepCmdCmpl.handle;
    87aa:	68fb      	ldr	r3, [r7, #12]
    87ac:	88da      	ldrh	r2, [r3, #6]
    87ae:	68fb      	ldr	r3, [r7, #12]
    87b0:	801a      	strh	r2, [r3, #0]
}
    87b2:	bf00      	nop
    87b4:	3714      	adds	r7, #20
    87b6:	46bd      	mov	sp, r7
    87b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    87bc:	4770      	bx	lr

000087be <hciEvtParseReadDefDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    87be:	b480      	push	{r7}
    87c0:	b085      	sub	sp, #20
    87c2:	af00      	add	r7, sp, #0
    87c4:	60f8      	str	r0, [r7, #12]
    87c6:	60b9      	str	r1, [r7, #8]
    87c8:	4613      	mov	r3, r2
    87ca:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadDefDataLenCmdCmpl.status, p);
    87cc:	68bb      	ldr	r3, [r7, #8]
    87ce:	1c5a      	adds	r2, r3, #1
    87d0:	60ba      	str	r2, [r7, #8]
    87d2:	781a      	ldrb	r2, [r3, #0]
    87d4:	68fb      	ldr	r3, [r7, #12]
    87d6:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxOctets, p);
    87d8:	68bb      	ldr	r3, [r7, #8]
    87da:	781b      	ldrb	r3, [r3, #0]
    87dc:	b29a      	uxth	r2, r3
    87de:	68bb      	ldr	r3, [r7, #8]
    87e0:	3301      	adds	r3, #1
    87e2:	781b      	ldrb	r3, [r3, #0]
    87e4:	b29b      	uxth	r3, r3
    87e6:	021b      	lsls	r3, r3, #8
    87e8:	b29b      	uxth	r3, r3
    87ea:	4413      	add	r3, r2
    87ec:	b29a      	uxth	r2, r3
    87ee:	68fb      	ldr	r3, [r7, #12]
    87f0:	80da      	strh	r2, [r3, #6]
    87f2:	68bb      	ldr	r3, [r7, #8]
    87f4:	3302      	adds	r3, #2
    87f6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxTime, p);
    87f8:	68bb      	ldr	r3, [r7, #8]
    87fa:	781b      	ldrb	r3, [r3, #0]
    87fc:	b29a      	uxth	r2, r3
    87fe:	68bb      	ldr	r3, [r7, #8]
    8800:	3301      	adds	r3, #1
    8802:	781b      	ldrb	r3, [r3, #0]
    8804:	b29b      	uxth	r3, r3
    8806:	021b      	lsls	r3, r3, #8
    8808:	b29b      	uxth	r3, r3
    880a:	4413      	add	r3, r2
    880c:	b29a      	uxth	r2, r3
    880e:	68fb      	ldr	r3, [r7, #12]
    8810:	811a      	strh	r2, [r3, #8]
    8812:	68bb      	ldr	r3, [r7, #8]
    8814:	3302      	adds	r3, #2
    8816:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadDefDataLenCmdCmpl.status;
    8818:	68fb      	ldr	r3, [r7, #12]
    881a:	791a      	ldrb	r2, [r3, #4]
    881c:	68fb      	ldr	r3, [r7, #12]
    881e:	70da      	strb	r2, [r3, #3]
}
    8820:	bf00      	nop
    8822:	3714      	adds	r7, #20
    8824:	46bd      	mov	sp, r7
    8826:	f85d 7b04 	ldr.w	r7, [sp], #4
    882a:	4770      	bx	lr

0000882c <hciEvtParseWriteDefDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseWriteDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    882c:	b480      	push	{r7}
    882e:	b085      	sub	sp, #20
    8830:	af00      	add	r7, sp, #0
    8832:	60f8      	str	r0, [r7, #12]
    8834:	60b9      	str	r1, [r7, #8]
    8836:	4613      	mov	r3, r2
    8838:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leWriteDefDataLenCmdCmpl.status, p);
    883a:	68bb      	ldr	r3, [r7, #8]
    883c:	1c5a      	adds	r2, r3, #1
    883e:	60ba      	str	r2, [r7, #8]
    8840:	781a      	ldrb	r2, [r3, #0]
    8842:	68fb      	ldr	r3, [r7, #12]
    8844:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leWriteDefDataLenCmdCmpl.status;
    8846:	68fb      	ldr	r3, [r7, #12]
    8848:	791a      	ldrb	r2, [r3, #4]
    884a:	68fb      	ldr	r3, [r7, #12]
    884c:	70da      	strb	r2, [r3, #3]
}
    884e:	bf00      	nop
    8850:	3714      	adds	r7, #20
    8852:	46bd      	mov	sp, r7
    8854:	f85d 7b04 	ldr.w	r7, [sp], #4
    8858:	4770      	bx	lr

0000885a <hciEvtParseSetDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    885a:	b480      	push	{r7}
    885c:	b085      	sub	sp, #20
    885e:	af00      	add	r7, sp, #0
    8860:	60f8      	str	r0, [r7, #12]
    8862:	60b9      	str	r1, [r7, #8]
    8864:	4613      	mov	r3, r2
    8866:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetDataLenCmdCmpl.status, p);
    8868:	68bb      	ldr	r3, [r7, #8]
    886a:	1c5a      	adds	r2, r3, #1
    886c:	60ba      	str	r2, [r7, #8]
    886e:	781a      	ldrb	r2, [r3, #0]
    8870:	68fb      	ldr	r3, [r7, #12]
    8872:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leSetDataLenCmdCmpl.handle, p);
    8874:	68bb      	ldr	r3, [r7, #8]
    8876:	781b      	ldrb	r3, [r3, #0]
    8878:	b29a      	uxth	r2, r3
    887a:	68bb      	ldr	r3, [r7, #8]
    887c:	3301      	adds	r3, #1
    887e:	781b      	ldrb	r3, [r3, #0]
    8880:	b29b      	uxth	r3, r3
    8882:	021b      	lsls	r3, r3, #8
    8884:	b29b      	uxth	r3, r3
    8886:	4413      	add	r3, r2
    8888:	b29a      	uxth	r2, r3
    888a:	68fb      	ldr	r3, [r7, #12]
    888c:	80da      	strh	r2, [r3, #6]
    888e:	68bb      	ldr	r3, [r7, #8]
    8890:	3302      	adds	r3, #2
    8892:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leSetDataLenCmdCmpl.status;
    8894:	68fb      	ldr	r3, [r7, #12]
    8896:	791a      	ldrb	r2, [r3, #4]
    8898:	68fb      	ldr	r3, [r7, #12]
    889a:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leSetDataLenCmdCmpl.handle;
    889c:	68fb      	ldr	r3, [r7, #12]
    889e:	88da      	ldrh	r2, [r3, #6]
    88a0:	68fb      	ldr	r3, [r7, #12]
    88a2:	801a      	strh	r2, [r3, #0]
}
    88a4:	bf00      	nop
    88a6:	3714      	adds	r7, #20
    88a8:	46bd      	mov	sp, r7
    88aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    88ae:	4770      	bx	lr

000088b0 <hciEvtParseReadMaxDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadMaxDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    88b0:	b480      	push	{r7}
    88b2:	b085      	sub	sp, #20
    88b4:	af00      	add	r7, sp, #0
    88b6:	60f8      	str	r0, [r7, #12]
    88b8:	60b9      	str	r1, [r7, #8]
    88ba:	4613      	mov	r3, r2
    88bc:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadMaxDataLenCmdCmpl.status, p);
    88be:	68bb      	ldr	r3, [r7, #8]
    88c0:	1c5a      	adds	r2, r3, #1
    88c2:	60ba      	str	r2, [r7, #8]
    88c4:	781a      	ldrb	r2, [r3, #0]
    88c6:	68fb      	ldr	r3, [r7, #12]
    88c8:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxOctets, p);
    88ca:	68bb      	ldr	r3, [r7, #8]
    88cc:	781b      	ldrb	r3, [r3, #0]
    88ce:	b29a      	uxth	r2, r3
    88d0:	68bb      	ldr	r3, [r7, #8]
    88d2:	3301      	adds	r3, #1
    88d4:	781b      	ldrb	r3, [r3, #0]
    88d6:	b29b      	uxth	r3, r3
    88d8:	021b      	lsls	r3, r3, #8
    88da:	b29b      	uxth	r3, r3
    88dc:	4413      	add	r3, r2
    88de:	b29a      	uxth	r2, r3
    88e0:	68fb      	ldr	r3, [r7, #12]
    88e2:	80da      	strh	r2, [r3, #6]
    88e4:	68bb      	ldr	r3, [r7, #8]
    88e6:	3302      	adds	r3, #2
    88e8:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxTime, p);
    88ea:	68bb      	ldr	r3, [r7, #8]
    88ec:	781b      	ldrb	r3, [r3, #0]
    88ee:	b29a      	uxth	r2, r3
    88f0:	68bb      	ldr	r3, [r7, #8]
    88f2:	3301      	adds	r3, #1
    88f4:	781b      	ldrb	r3, [r3, #0]
    88f6:	b29b      	uxth	r3, r3
    88f8:	021b      	lsls	r3, r3, #8
    88fa:	b29b      	uxth	r3, r3
    88fc:	4413      	add	r3, r2
    88fe:	b29a      	uxth	r2, r3
    8900:	68fb      	ldr	r3, [r7, #12]
    8902:	811a      	strh	r2, [r3, #8]
    8904:	68bb      	ldr	r3, [r7, #8]
    8906:	3302      	adds	r3, #2
    8908:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxOctets, p);
    890a:	68bb      	ldr	r3, [r7, #8]
    890c:	781b      	ldrb	r3, [r3, #0]
    890e:	b29a      	uxth	r2, r3
    8910:	68bb      	ldr	r3, [r7, #8]
    8912:	3301      	adds	r3, #1
    8914:	781b      	ldrb	r3, [r3, #0]
    8916:	b29b      	uxth	r3, r3
    8918:	021b      	lsls	r3, r3, #8
    891a:	b29b      	uxth	r3, r3
    891c:	4413      	add	r3, r2
    891e:	b29a      	uxth	r2, r3
    8920:	68fb      	ldr	r3, [r7, #12]
    8922:	815a      	strh	r2, [r3, #10]
    8924:	68bb      	ldr	r3, [r7, #8]
    8926:	3302      	adds	r3, #2
    8928:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxTime, p);
    892a:	68bb      	ldr	r3, [r7, #8]
    892c:	781b      	ldrb	r3, [r3, #0]
    892e:	b29a      	uxth	r2, r3
    8930:	68bb      	ldr	r3, [r7, #8]
    8932:	3301      	adds	r3, #1
    8934:	781b      	ldrb	r3, [r3, #0]
    8936:	b29b      	uxth	r3, r3
    8938:	021b      	lsls	r3, r3, #8
    893a:	b29b      	uxth	r3, r3
    893c:	4413      	add	r3, r2
    893e:	b29a      	uxth	r2, r3
    8940:	68fb      	ldr	r3, [r7, #12]
    8942:	819a      	strh	r2, [r3, #12]
    8944:	68bb      	ldr	r3, [r7, #8]
    8946:	3302      	adds	r3, #2
    8948:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadMaxDataLenCmdCmpl.status;
    894a:	68fb      	ldr	r3, [r7, #12]
    894c:	791a      	ldrb	r2, [r3, #4]
    894e:	68fb      	ldr	r3, [r7, #12]
    8950:	70da      	strb	r2, [r3, #3]
}
    8952:	bf00      	nop
    8954:	3714      	adds	r7, #20
    8956:	46bd      	mov	sp, r7
    8958:	f85d 7b04 	ldr.w	r7, [sp], #4
    895c:	4770      	bx	lr

0000895e <hciEvtParseRemConnParamReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    895e:	b480      	push	{r7}
    8960:	b085      	sub	sp, #20
    8962:	af00      	add	r7, sp, #0
    8964:	60f8      	str	r0, [r7, #12]
    8966:	60b9      	str	r1, [r7, #8]
    8968:	4613      	mov	r3, r2
    896a:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.handle, p);
    896c:	68bb      	ldr	r3, [r7, #8]
    896e:	781b      	ldrb	r3, [r3, #0]
    8970:	b29a      	uxth	r2, r3
    8972:	68bb      	ldr	r3, [r7, #8]
    8974:	3301      	adds	r3, #1
    8976:	781b      	ldrb	r3, [r3, #0]
    8978:	b29b      	uxth	r3, r3
    897a:	021b      	lsls	r3, r3, #8
    897c:	b29b      	uxth	r3, r3
    897e:	4413      	add	r3, r2
    8980:	b29a      	uxth	r2, r3
    8982:	68fb      	ldr	r3, [r7, #12]
    8984:	809a      	strh	r2, [r3, #4]
    8986:	68bb      	ldr	r3, [r7, #8]
    8988:	3302      	adds	r3, #2
    898a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMin, p);
    898c:	68bb      	ldr	r3, [r7, #8]
    898e:	781b      	ldrb	r3, [r3, #0]
    8990:	b29a      	uxth	r2, r3
    8992:	68bb      	ldr	r3, [r7, #8]
    8994:	3301      	adds	r3, #1
    8996:	781b      	ldrb	r3, [r3, #0]
    8998:	b29b      	uxth	r3, r3
    899a:	021b      	lsls	r3, r3, #8
    899c:	b29b      	uxth	r3, r3
    899e:	4413      	add	r3, r2
    89a0:	b29a      	uxth	r2, r3
    89a2:	68fb      	ldr	r3, [r7, #12]
    89a4:	80da      	strh	r2, [r3, #6]
    89a6:	68bb      	ldr	r3, [r7, #8]
    89a8:	3302      	adds	r3, #2
    89aa:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMax, p);
    89ac:	68bb      	ldr	r3, [r7, #8]
    89ae:	781b      	ldrb	r3, [r3, #0]
    89b0:	b29a      	uxth	r2, r3
    89b2:	68bb      	ldr	r3, [r7, #8]
    89b4:	3301      	adds	r3, #1
    89b6:	781b      	ldrb	r3, [r3, #0]
    89b8:	b29b      	uxth	r3, r3
    89ba:	021b      	lsls	r3, r3, #8
    89bc:	b29b      	uxth	r3, r3
    89be:	4413      	add	r3, r2
    89c0:	b29a      	uxth	r2, r3
    89c2:	68fb      	ldr	r3, [r7, #12]
    89c4:	811a      	strh	r2, [r3, #8]
    89c6:	68bb      	ldr	r3, [r7, #8]
    89c8:	3302      	adds	r3, #2
    89ca:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.latency, p);
    89cc:	68bb      	ldr	r3, [r7, #8]
    89ce:	781b      	ldrb	r3, [r3, #0]
    89d0:	b29a      	uxth	r2, r3
    89d2:	68bb      	ldr	r3, [r7, #8]
    89d4:	3301      	adds	r3, #1
    89d6:	781b      	ldrb	r3, [r3, #0]
    89d8:	b29b      	uxth	r3, r3
    89da:	021b      	lsls	r3, r3, #8
    89dc:	b29b      	uxth	r3, r3
    89de:	4413      	add	r3, r2
    89e0:	b29a      	uxth	r2, r3
    89e2:	68fb      	ldr	r3, [r7, #12]
    89e4:	815a      	strh	r2, [r3, #10]
    89e6:	68bb      	ldr	r3, [r7, #8]
    89e8:	3302      	adds	r3, #2
    89ea:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.timeout, p);
    89ec:	68bb      	ldr	r3, [r7, #8]
    89ee:	781b      	ldrb	r3, [r3, #0]
    89f0:	b29a      	uxth	r2, r3
    89f2:	68bb      	ldr	r3, [r7, #8]
    89f4:	3301      	adds	r3, #1
    89f6:	781b      	ldrb	r3, [r3, #0]
    89f8:	b29b      	uxth	r3, r3
    89fa:	021b      	lsls	r3, r3, #8
    89fc:	b29b      	uxth	r3, r3
    89fe:	4413      	add	r3, r2
    8a00:	b29a      	uxth	r2, r3
    8a02:	68fb      	ldr	r3, [r7, #12]
    8a04:	819a      	strh	r2, [r3, #12]
    8a06:	68bb      	ldr	r3, [r7, #8]
    8a08:	3302      	adds	r3, #2
    8a0a:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leRemConnParamReq.handle;
    8a0c:	68fb      	ldr	r3, [r7, #12]
    8a0e:	889a      	ldrh	r2, [r3, #4]
    8a10:	68fb      	ldr	r3, [r7, #12]
    8a12:	801a      	strh	r2, [r3, #0]
}
    8a14:	bf00      	nop
    8a16:	3714      	adds	r7, #20
    8a18:	46bd      	mov	sp, r7
    8a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a1e:	4770      	bx	lr

00008a20 <hciEvtParseDataLenChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDataLenChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8a20:	b480      	push	{r7}
    8a22:	b085      	sub	sp, #20
    8a24:	af00      	add	r7, sp, #0
    8a26:	60f8      	str	r0, [r7, #12]
    8a28:	60b9      	str	r1, [r7, #8]
    8a2a:	4613      	mov	r3, r2
    8a2c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.handle, p);
    8a2e:	68bb      	ldr	r3, [r7, #8]
    8a30:	781b      	ldrb	r3, [r3, #0]
    8a32:	b29a      	uxth	r2, r3
    8a34:	68bb      	ldr	r3, [r7, #8]
    8a36:	3301      	adds	r3, #1
    8a38:	781b      	ldrb	r3, [r3, #0]
    8a3a:	b29b      	uxth	r3, r3
    8a3c:	021b      	lsls	r3, r3, #8
    8a3e:	b29b      	uxth	r3, r3
    8a40:	4413      	add	r3, r2
    8a42:	b29a      	uxth	r2, r3
    8a44:	68fb      	ldr	r3, [r7, #12]
    8a46:	809a      	strh	r2, [r3, #4]
    8a48:	68bb      	ldr	r3, [r7, #8]
    8a4a:	3302      	adds	r3, #2
    8a4c:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxOctets, p);
    8a4e:	68bb      	ldr	r3, [r7, #8]
    8a50:	781b      	ldrb	r3, [r3, #0]
    8a52:	b29a      	uxth	r2, r3
    8a54:	68bb      	ldr	r3, [r7, #8]
    8a56:	3301      	adds	r3, #1
    8a58:	781b      	ldrb	r3, [r3, #0]
    8a5a:	b29b      	uxth	r3, r3
    8a5c:	021b      	lsls	r3, r3, #8
    8a5e:	b29b      	uxth	r3, r3
    8a60:	4413      	add	r3, r2
    8a62:	b29a      	uxth	r2, r3
    8a64:	68fb      	ldr	r3, [r7, #12]
    8a66:	80da      	strh	r2, [r3, #6]
    8a68:	68bb      	ldr	r3, [r7, #8]
    8a6a:	3302      	adds	r3, #2
    8a6c:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxTime, p);
    8a6e:	68bb      	ldr	r3, [r7, #8]
    8a70:	781b      	ldrb	r3, [r3, #0]
    8a72:	b29a      	uxth	r2, r3
    8a74:	68bb      	ldr	r3, [r7, #8]
    8a76:	3301      	adds	r3, #1
    8a78:	781b      	ldrb	r3, [r3, #0]
    8a7a:	b29b      	uxth	r3, r3
    8a7c:	021b      	lsls	r3, r3, #8
    8a7e:	b29b      	uxth	r3, r3
    8a80:	4413      	add	r3, r2
    8a82:	b29a      	uxth	r2, r3
    8a84:	68fb      	ldr	r3, [r7, #12]
    8a86:	811a      	strh	r2, [r3, #8]
    8a88:	68bb      	ldr	r3, [r7, #8]
    8a8a:	3302      	adds	r3, #2
    8a8c:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxOctets, p);
    8a8e:	68bb      	ldr	r3, [r7, #8]
    8a90:	781b      	ldrb	r3, [r3, #0]
    8a92:	b29a      	uxth	r2, r3
    8a94:	68bb      	ldr	r3, [r7, #8]
    8a96:	3301      	adds	r3, #1
    8a98:	781b      	ldrb	r3, [r3, #0]
    8a9a:	b29b      	uxth	r3, r3
    8a9c:	021b      	lsls	r3, r3, #8
    8a9e:	b29b      	uxth	r3, r3
    8aa0:	4413      	add	r3, r2
    8aa2:	b29a      	uxth	r2, r3
    8aa4:	68fb      	ldr	r3, [r7, #12]
    8aa6:	815a      	strh	r2, [r3, #10]
    8aa8:	68bb      	ldr	r3, [r7, #8]
    8aaa:	3302      	adds	r3, #2
    8aac:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxTime, p);
    8aae:	68bb      	ldr	r3, [r7, #8]
    8ab0:	781b      	ldrb	r3, [r3, #0]
    8ab2:	b29a      	uxth	r2, r3
    8ab4:	68bb      	ldr	r3, [r7, #8]
    8ab6:	3301      	adds	r3, #1
    8ab8:	781b      	ldrb	r3, [r3, #0]
    8aba:	b29b      	uxth	r3, r3
    8abc:	021b      	lsls	r3, r3, #8
    8abe:	b29b      	uxth	r3, r3
    8ac0:	4413      	add	r3, r2
    8ac2:	b29a      	uxth	r2, r3
    8ac4:	68fb      	ldr	r3, [r7, #12]
    8ac6:	819a      	strh	r2, [r3, #12]
    8ac8:	68bb      	ldr	r3, [r7, #8]
    8aca:	3302      	adds	r3, #2
    8acc:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leDataLenChange.handle;
    8ace:	68fb      	ldr	r3, [r7, #12]
    8ad0:	889a      	ldrh	r2, [r3, #4]
    8ad2:	68fb      	ldr	r3, [r7, #12]
    8ad4:	801a      	strh	r2, [r3, #0]
}
    8ad6:	bf00      	nop
    8ad8:	3714      	adds	r7, #20
    8ada:	46bd      	mov	sp, r7
    8adc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ae0:	4770      	bx	lr

00008ae2 <hciEvtParseReadPubKeyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPubKeyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8ae2:	b580      	push	{r7, lr}
    8ae4:	b084      	sub	sp, #16
    8ae6:	af00      	add	r7, sp, #0
    8ae8:	60f8      	str	r0, [r7, #12]
    8aea:	60b9      	str	r1, [r7, #8]
    8aec:	4613      	mov	r3, r2
    8aee:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leP256.status, p);
    8af0:	68bb      	ldr	r3, [r7, #8]
    8af2:	1c5a      	adds	r2, r3, #1
    8af4:	60ba      	str	r2, [r7, #8]
    8af6:	781a      	ldrb	r2, [r3, #0]
    8af8:	68fb      	ldr	r3, [r7, #12]
    8afa:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leP256.key, p, HCI_P256_KEY_LEN);
    8afc:	68fb      	ldr	r3, [r7, #12]
    8afe:	3305      	adds	r3, #5
    8b00:	2240      	movs	r2, #64	; 0x40
    8b02:	68b9      	ldr	r1, [r7, #8]
    8b04:	4618      	mov	r0, r3
    8b06:	f007 f822 	bl	fb4e <memcpy>

  pMsg->hdr.status = pMsg->leP256.status;
    8b0a:	68fb      	ldr	r3, [r7, #12]
    8b0c:	791a      	ldrb	r2, [r3, #4]
    8b0e:	68fb      	ldr	r3, [r7, #12]
    8b10:	70da      	strb	r2, [r3, #3]
}
    8b12:	bf00      	nop
    8b14:	3710      	adds	r7, #16
    8b16:	46bd      	mov	sp, r7
    8b18:	bd80      	pop	{r7, pc}

00008b1a <hciEvtParseGenDhKeyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseGenDhKeyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8b1a:	b580      	push	{r7, lr}
    8b1c:	b084      	sub	sp, #16
    8b1e:	af00      	add	r7, sp, #0
    8b20:	60f8      	str	r0, [r7, #12]
    8b22:	60b9      	str	r1, [r7, #8]
    8b24:	4613      	mov	r3, r2
    8b26:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leGenDHKey.status, p);
    8b28:	68bb      	ldr	r3, [r7, #8]
    8b2a:	1c5a      	adds	r2, r3, #1
    8b2c:	60ba      	str	r2, [r7, #8]
    8b2e:	781a      	ldrb	r2, [r3, #0]
    8b30:	68fb      	ldr	r3, [r7, #12]
    8b32:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leGenDHKey.key, p, HCI_DH_KEY_LEN);
    8b34:	68fb      	ldr	r3, [r7, #12]
    8b36:	3305      	adds	r3, #5
    8b38:	2220      	movs	r2, #32
    8b3a:	68b9      	ldr	r1, [r7, #8]
    8b3c:	4618      	mov	r0, r3
    8b3e:	f007 f806 	bl	fb4e <memcpy>

  pMsg->hdr.status = pMsg->leGenDHKey.status;
    8b42:	68fb      	ldr	r3, [r7, #12]
    8b44:	791a      	ldrb	r2, [r3, #4]
    8b46:	68fb      	ldr	r3, [r7, #12]
    8b48:	70da      	strb	r2, [r3, #3]
}
    8b4a:	bf00      	nop
    8b4c:	3710      	adds	r7, #16
    8b4e:	46bd      	mov	sp, r7
    8b50:	bd80      	pop	{r7, pc}

00008b52 <hciEvtParseWriteAuthTimeoutCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseWriteAuthTimeoutCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8b52:	b480      	push	{r7}
    8b54:	b085      	sub	sp, #20
    8b56:	af00      	add	r7, sp, #0
    8b58:	60f8      	str	r0, [r7, #12]
    8b5a:	60b9      	str	r1, [r7, #8]
    8b5c:	4613      	mov	r3, r2
    8b5e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->writeAuthPayloadToCmdCmpl.status, p);
    8b60:	68bb      	ldr	r3, [r7, #8]
    8b62:	1c5a      	adds	r2, r3, #1
    8b64:	60ba      	str	r2, [r7, #8]
    8b66:	781a      	ldrb	r2, [r3, #0]
    8b68:	68fb      	ldr	r3, [r7, #12]
    8b6a:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->writeAuthPayloadToCmdCmpl.handle, p);
    8b6c:	68bb      	ldr	r3, [r7, #8]
    8b6e:	781b      	ldrb	r3, [r3, #0]
    8b70:	b29a      	uxth	r2, r3
    8b72:	68bb      	ldr	r3, [r7, #8]
    8b74:	3301      	adds	r3, #1
    8b76:	781b      	ldrb	r3, [r3, #0]
    8b78:	b29b      	uxth	r3, r3
    8b7a:	021b      	lsls	r3, r3, #8
    8b7c:	b29b      	uxth	r3, r3
    8b7e:	4413      	add	r3, r2
    8b80:	b29a      	uxth	r2, r3
    8b82:	68fb      	ldr	r3, [r7, #12]
    8b84:	80da      	strh	r2, [r3, #6]
    8b86:	68bb      	ldr	r3, [r7, #8]
    8b88:	3302      	adds	r3, #2
    8b8a:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->writeAuthPayloadToCmdCmpl.status;
    8b8c:	68fb      	ldr	r3, [r7, #12]
    8b8e:	791a      	ldrb	r2, [r3, #4]
    8b90:	68fb      	ldr	r3, [r7, #12]
    8b92:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->writeAuthPayloadToCmdCmpl.handle;
    8b94:	68fb      	ldr	r3, [r7, #12]
    8b96:	88da      	ldrh	r2, [r3, #6]
    8b98:	68fb      	ldr	r3, [r7, #12]
    8b9a:	801a      	strh	r2, [r3, #0]
}
    8b9c:	bf00      	nop
    8b9e:	3714      	adds	r7, #20
    8ba0:	46bd      	mov	sp, r7
    8ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ba6:	4770      	bx	lr

00008ba8 <hciEvtParseAuthTimeoutExpiredEvt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseAuthTimeoutExpiredEvt(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8ba8:	b480      	push	{r7}
    8baa:	b085      	sub	sp, #20
    8bac:	af00      	add	r7, sp, #0
    8bae:	60f8      	str	r0, [r7, #12]
    8bb0:	60b9      	str	r1, [r7, #8]
    8bb2:	4613      	mov	r3, r2
    8bb4:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->authPayloadToExpired.handle, p);
    8bb6:	68bb      	ldr	r3, [r7, #8]
    8bb8:	781b      	ldrb	r3, [r3, #0]
    8bba:	b29a      	uxth	r2, r3
    8bbc:	68bb      	ldr	r3, [r7, #8]
    8bbe:	3301      	adds	r3, #1
    8bc0:	781b      	ldrb	r3, [r3, #0]
    8bc2:	b29b      	uxth	r3, r3
    8bc4:	021b      	lsls	r3, r3, #8
    8bc6:	b29b      	uxth	r3, r3
    8bc8:	4413      	add	r3, r2
    8bca:	b29a      	uxth	r2, r3
    8bcc:	68fb      	ldr	r3, [r7, #12]
    8bce:	809a      	strh	r2, [r3, #4]
    8bd0:	68bb      	ldr	r3, [r7, #8]
    8bd2:	3302      	adds	r3, #2
    8bd4:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->authPayloadToExpired.handle;
    8bd6:	68fb      	ldr	r3, [r7, #12]
    8bd8:	889a      	ldrh	r2, [r3, #4]
    8bda:	68fb      	ldr	r3, [r7, #12]
    8bdc:	801a      	strh	r2, [r3, #0]
}
    8bde:	bf00      	nop
    8be0:	3714      	adds	r7, #20
    8be2:	46bd      	mov	sp, r7
    8be4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8be8:	4770      	bx	lr

00008bea <hciEvtParseReadPhyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8bea:	b480      	push	{r7}
    8bec:	b085      	sub	sp, #20
    8bee:	af00      	add	r7, sp, #0
    8bf0:	60f8      	str	r0, [r7, #12]
    8bf2:	60b9      	str	r1, [r7, #8]
    8bf4:	4613      	mov	r3, r2
    8bf6:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.status, p);
    8bf8:	68bb      	ldr	r3, [r7, #8]
    8bfa:	1c5a      	adds	r2, r3, #1
    8bfc:	60ba      	str	r2, [r7, #8]
    8bfe:	781a      	ldrb	r2, [r3, #0]
    8c00:	68fb      	ldr	r3, [r7, #12]
    8c02:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadPhyCmdCmpl.handle, p);
    8c04:	68bb      	ldr	r3, [r7, #8]
    8c06:	781b      	ldrb	r3, [r3, #0]
    8c08:	b29a      	uxth	r2, r3
    8c0a:	68bb      	ldr	r3, [r7, #8]
    8c0c:	3301      	adds	r3, #1
    8c0e:	781b      	ldrb	r3, [r3, #0]
    8c10:	b29b      	uxth	r3, r3
    8c12:	021b      	lsls	r3, r3, #8
    8c14:	b29b      	uxth	r3, r3
    8c16:	4413      	add	r3, r2
    8c18:	b29a      	uxth	r2, r3
    8c1a:	68fb      	ldr	r3, [r7, #12]
    8c1c:	80da      	strh	r2, [r3, #6]
    8c1e:	68bb      	ldr	r3, [r7, #8]
    8c20:	3302      	adds	r3, #2
    8c22:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.txPhy, p);
    8c24:	68bb      	ldr	r3, [r7, #8]
    8c26:	1c5a      	adds	r2, r3, #1
    8c28:	60ba      	str	r2, [r7, #8]
    8c2a:	781a      	ldrb	r2, [r3, #0]
    8c2c:	68fb      	ldr	r3, [r7, #12]
    8c2e:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.rxPhy, p);
    8c30:	68bb      	ldr	r3, [r7, #8]
    8c32:	1c5a      	adds	r2, r3, #1
    8c34:	60ba      	str	r2, [r7, #8]
    8c36:	781a      	ldrb	r2, [r3, #0]
    8c38:	68fb      	ldr	r3, [r7, #12]
    8c3a:	725a      	strb	r2, [r3, #9]

  pMsg->hdr.status = pMsg->leReadPhyCmdCmpl.status;
    8c3c:	68fb      	ldr	r3, [r7, #12]
    8c3e:	791a      	ldrb	r2, [r3, #4]
    8c40:	68fb      	ldr	r3, [r7, #12]
    8c42:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leReadPhyCmdCmpl.handle;
    8c44:	68fb      	ldr	r3, [r7, #12]
    8c46:	88da      	ldrh	r2, [r3, #6]
    8c48:	68fb      	ldr	r3, [r7, #12]
    8c4a:	801a      	strh	r2, [r3, #0]
}
    8c4c:	bf00      	nop
    8c4e:	3714      	adds	r7, #20
    8c50:	46bd      	mov	sp, r7
    8c52:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c56:	4770      	bx	lr

00008c58 <hciEvtParseSetDefPhyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDefPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8c58:	b480      	push	{r7}
    8c5a:	b085      	sub	sp, #20
    8c5c:	af00      	add	r7, sp, #0
    8c5e:	60f8      	str	r0, [r7, #12]
    8c60:	60b9      	str	r1, [r7, #8]
    8c62:	4613      	mov	r3, r2
    8c64:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetDefPhyCmdCmpl.status, p);
    8c66:	68bb      	ldr	r3, [r7, #8]
    8c68:	1c5a      	adds	r2, r3, #1
    8c6a:	60ba      	str	r2, [r7, #8]
    8c6c:	781a      	ldrb	r2, [r3, #0]
    8c6e:	68fb      	ldr	r3, [r7, #12]
    8c70:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leSetDefPhyCmdCmpl.status;
    8c72:	68fb      	ldr	r3, [r7, #12]
    8c74:	791a      	ldrb	r2, [r3, #4]
    8c76:	68fb      	ldr	r3, [r7, #12]
    8c78:	70da      	strb	r2, [r3, #3]
}
    8c7a:	bf00      	nop
    8c7c:	3714      	adds	r7, #20
    8c7e:	46bd      	mov	sp, r7
    8c80:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c84:	4770      	bx	lr

00008c86 <hciEvtParsePhyUpdateCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParsePhyUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8c86:	b480      	push	{r7}
    8c88:	b085      	sub	sp, #20
    8c8a:	af00      	add	r7, sp, #0
    8c8c:	60f8      	str	r0, [r7, #12]
    8c8e:	60b9      	str	r1, [r7, #8]
    8c90:	4613      	mov	r3, r2
    8c92:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.status, p);
    8c94:	68bb      	ldr	r3, [r7, #8]
    8c96:	1c5a      	adds	r2, r3, #1
    8c98:	60ba      	str	r2, [r7, #8]
    8c9a:	781a      	ldrb	r2, [r3, #0]
    8c9c:	68fb      	ldr	r3, [r7, #12]
    8c9e:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->lePhyUpdate.handle, p);
    8ca0:	68bb      	ldr	r3, [r7, #8]
    8ca2:	781b      	ldrb	r3, [r3, #0]
    8ca4:	b29a      	uxth	r2, r3
    8ca6:	68bb      	ldr	r3, [r7, #8]
    8ca8:	3301      	adds	r3, #1
    8caa:	781b      	ldrb	r3, [r3, #0]
    8cac:	b29b      	uxth	r3, r3
    8cae:	021b      	lsls	r3, r3, #8
    8cb0:	b29b      	uxth	r3, r3
    8cb2:	4413      	add	r3, r2
    8cb4:	b29a      	uxth	r2, r3
    8cb6:	68fb      	ldr	r3, [r7, #12]
    8cb8:	80da      	strh	r2, [r3, #6]
    8cba:	68bb      	ldr	r3, [r7, #8]
    8cbc:	3302      	adds	r3, #2
    8cbe:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.txPhy, p);
    8cc0:	68bb      	ldr	r3, [r7, #8]
    8cc2:	1c5a      	adds	r2, r3, #1
    8cc4:	60ba      	str	r2, [r7, #8]
    8cc6:	781a      	ldrb	r2, [r3, #0]
    8cc8:	68fb      	ldr	r3, [r7, #12]
    8cca:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.rxPhy, p);
    8ccc:	68bb      	ldr	r3, [r7, #8]
    8cce:	1c5a      	adds	r2, r3, #1
    8cd0:	60ba      	str	r2, [r7, #8]
    8cd2:	781a      	ldrb	r2, [r3, #0]
    8cd4:	68fb      	ldr	r3, [r7, #12]
    8cd6:	725a      	strb	r2, [r3, #9]

  pMsg->hdr.status = pMsg->lePhyUpdate.status;
    8cd8:	68fb      	ldr	r3, [r7, #12]
    8cda:	791a      	ldrb	r2, [r3, #4]
    8cdc:	68fb      	ldr	r3, [r7, #12]
    8cde:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->lePhyUpdate.handle;
    8ce0:	68fb      	ldr	r3, [r7, #12]
    8ce2:	88da      	ldrh	r2, [r3, #6]
    8ce4:	68fb      	ldr	r3, [r7, #12]
    8ce6:	801a      	strh	r2, [r3, #0]
}
    8ce8:	bf00      	nop
    8cea:	3714      	adds	r7, #20
    8cec:	46bd      	mov	sp, r7
    8cee:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cf2:	4770      	bx	lr

00008cf4 <hciEvtProcessLeAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeAdvReport(uint8_t *p, uint8_t len)
{
    8cf4:	b580      	push	{r7, lr}
    8cf6:	b084      	sub	sp, #16
    8cf8:	af00      	add	r7, sp, #0
    8cfa:	6078      	str	r0, [r7, #4]
    8cfc:	460b      	mov	r3, r1
    8cfe:	70fb      	strb	r3, [r7, #3]
  hciLeAdvReportEvt_t *pMsg;
  uint8_t             i;

  /* get number of reports */
  BSTREAM_TO_UINT8(i, p);
    8d00:	687b      	ldr	r3, [r7, #4]
    8d02:	1c5a      	adds	r2, r3, #1
    8d04:	607a      	str	r2, [r7, #4]
    8d06:	781b      	ldrb	r3, [r3, #0]
    8d08:	73fb      	strb	r3, [r7, #15]

  HCI_TRACE_INFO1("HCI Adv report, num reports: %d", i);
    8d0a:	7bfb      	ldrb	r3, [r7, #15]
    8d0c:	4619      	mov	r1, r3
    8d0e:	483a      	ldr	r0, [pc, #232]	; (8df8 <hciEvtProcessLeAdvReport+0x104>)
    8d10:	f001 fb0c 	bl	a32c <WsfTrace>

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
    8d14:	7bfb      	ldrb	r3, [r7, #15]
    8d16:	2b0f      	cmp	r3, #15
    8d18:	d86a      	bhi.n	8df0 <hciEvtProcessLeAdvReport+0xfc>
  {
    return;
  }

  /* allocate temp buffer that can hold max length adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t) + HCI_ADV_DATA_LEN)) != NULL)
    8d1a:	203b      	movs	r0, #59	; 0x3b
    8d1c:	f001 fff0 	bl	ad00 <WsfBufAlloc>
    8d20:	60b8      	str	r0, [r7, #8]
    8d22:	68bb      	ldr	r3, [r7, #8]
    8d24:	2b00      	cmp	r3, #0
    8d26:	d064      	beq.n	8df2 <hciEvtProcessLeAdvReport+0xfe>
  {
    /* parse each report and execute callback */
    while (i-- > 0)
    8d28:	e059      	b.n	8dde <hciEvtProcessLeAdvReport+0xea>
    {
      BSTREAM_TO_UINT8(pMsg->eventType, p);
    8d2a:	687b      	ldr	r3, [r7, #4]
    8d2c:	1c5a      	adds	r2, r3, #1
    8d2e:	607a      	str	r2, [r7, #4]
    8d30:	781a      	ldrb	r2, [r3, #0]
    8d32:	68bb      	ldr	r3, [r7, #8]
    8d34:	729a      	strb	r2, [r3, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
    8d36:	687b      	ldr	r3, [r7, #4]
    8d38:	1c5a      	adds	r2, r3, #1
    8d3a:	607a      	str	r2, [r7, #4]
    8d3c:	781a      	ldrb	r2, [r3, #0]
    8d3e:	68bb      	ldr	r3, [r7, #8]
    8d40:	72da      	strb	r2, [r3, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
    8d42:	68bb      	ldr	r3, [r7, #8]
    8d44:	330c      	adds	r3, #12
    8d46:	6879      	ldr	r1, [r7, #4]
    8d48:	4618      	mov	r0, r3
    8d4a:	f004 f897 	bl	ce7c <BdaCpy>
    8d4e:	687b      	ldr	r3, [r7, #4]
    8d50:	3306      	adds	r3, #6
    8d52:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->len, p);
    8d54:	687b      	ldr	r3, [r7, #4]
    8d56:	1c5a      	adds	r2, r3, #1
    8d58:	607a      	str	r2, [r7, #4]
    8d5a:	781a      	ldrb	r2, [r3, #0]
    8d5c:	68bb      	ldr	r3, [r7, #8]
    8d5e:	721a      	strb	r2, [r3, #8]

      HCI_TRACE_INFO1("HCI Adv report, data len: %d", pMsg->len);
    8d60:	68bb      	ldr	r3, [r7, #8]
    8d62:	7a1b      	ldrb	r3, [r3, #8]
    8d64:	4619      	mov	r1, r3
    8d66:	4825      	ldr	r0, [pc, #148]	; (8dfc <hciEvtProcessLeAdvReport+0x108>)
    8d68:	f001 fae0 	bl	a32c <WsfTrace>

      /* sanity check on report length; quit if invalid */
      if (pMsg->len > HCI_ADV_DATA_LEN)
    8d6c:	68bb      	ldr	r3, [r7, #8]
    8d6e:	7a1b      	ldrb	r3, [r3, #8]
    8d70:	2b1f      	cmp	r3, #31
    8d72:	d903      	bls.n	8d7c <hciEvtProcessLeAdvReport+0x88>
      {
        HCI_TRACE_WARN0("Invalid adv report data len");
    8d74:	4822      	ldr	r0, [pc, #136]	; (8e00 <hciEvtProcessLeAdvReport+0x10c>)
    8d76:	f001 fad9 	bl	a32c <WsfTrace>
        break;
    8d7a:	e035      	b.n	8de8 <hciEvtProcessLeAdvReport+0xf4>
      }

      /* Copy data to space after end of report struct */
      pMsg->pData = (uint8_t *) (pMsg + 1);
    8d7c:	68bb      	ldr	r3, [r7, #8]
    8d7e:	f103 021c 	add.w	r2, r3, #28
    8d82:	68bb      	ldr	r3, [r7, #8]
    8d84:	605a      	str	r2, [r3, #4]
      memcpy(pMsg->pData, p, pMsg->len);
    8d86:	68bb      	ldr	r3, [r7, #8]
    8d88:	6858      	ldr	r0, [r3, #4]
    8d8a:	68bb      	ldr	r3, [r7, #8]
    8d8c:	7a1b      	ldrb	r3, [r3, #8]
    8d8e:	461a      	mov	r2, r3
    8d90:	6879      	ldr	r1, [r7, #4]
    8d92:	f006 fedc 	bl	fb4e <memcpy>
      p += pMsg->len;
    8d96:	68bb      	ldr	r3, [r7, #8]
    8d98:	7a1b      	ldrb	r3, [r3, #8]
    8d9a:	461a      	mov	r2, r3
    8d9c:	687b      	ldr	r3, [r7, #4]
    8d9e:	4413      	add	r3, r2
    8da0:	607b      	str	r3, [r7, #4]

      BSTREAM_TO_UINT8(pMsg->rssi, p);
    8da2:	687b      	ldr	r3, [r7, #4]
    8da4:	1c5a      	adds	r2, r3, #1
    8da6:	607a      	str	r2, [r7, #4]
    8da8:	781b      	ldrb	r3, [r3, #0]
    8daa:	b25a      	sxtb	r2, r3
    8dac:	68bb      	ldr	r3, [r7, #8]
    8dae:	725a      	strb	r2, [r3, #9]

      /* zero out unused fields */
      pMsg->directAddrType = 0;
    8db0:	68bb      	ldr	r3, [r7, #8]
    8db2:	2200      	movs	r2, #0
    8db4:	749a      	strb	r2, [r3, #18]
      memset(pMsg->directAddr, 0, BDA_ADDR_LEN);
    8db6:	68bb      	ldr	r3, [r7, #8]
    8db8:	3313      	adds	r3, #19
    8dba:	2206      	movs	r2, #6
    8dbc:	2100      	movs	r1, #0
    8dbe:	4618      	mov	r0, r3
    8dc0:	f006 feea 	bl	fb98 <memset>

      /* initialize message header */
      pMsg->hdr.param = 0;
    8dc4:	68bb      	ldr	r3, [r7, #8]
    8dc6:	2200      	movs	r2, #0
    8dc8:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_ADV_REPORT_CBACK_EVT;
    8dca:	68bb      	ldr	r3, [r7, #8]
    8dcc:	2206      	movs	r2, #6
    8dce:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
    8dd0:	68bb      	ldr	r3, [r7, #8]
    8dd2:	2200      	movs	r2, #0
    8dd4:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
    8dd6:	4b0b      	ldr	r3, [pc, #44]	; (8e04 <hciEvtProcessLeAdvReport+0x110>)
    8dd8:	689b      	ldr	r3, [r3, #8]
    8dda:	68b8      	ldr	r0, [r7, #8]
    8ddc:	4798      	blx	r3
    while (i-- > 0)
    8dde:	7bfb      	ldrb	r3, [r7, #15]
    8de0:	1e5a      	subs	r2, r3, #1
    8de2:	73fa      	strb	r2, [r7, #15]
    8de4:	2b00      	cmp	r3, #0
    8de6:	d1a0      	bne.n	8d2a <hciEvtProcessLeAdvReport+0x36>
    }

    /* free buffer */
    WsfBufFree(pMsg);
    8de8:	68b8      	ldr	r0, [r7, #8]
    8dea:	f001 ffc9 	bl	ad80 <WsfBufFree>
    8dee:	e000      	b.n	8df2 <hciEvtProcessLeAdvReport+0xfe>
    return;
    8df0:	bf00      	nop
  }
}
    8df2:	3710      	adds	r7, #16
    8df4:	46bd      	mov	sp, r7
    8df6:	bd80      	pop	{r7, pc}
    8df8:	0000fdfc 	.word	0x0000fdfc
    8dfc:	0000fe1c 	.word	0x0000fe1c
    8e00:	0000fe3c 	.word	0x0000fe3c
    8e04:	100028f4 	.word	0x100028f4

00008e08 <hciEvtProcessLeExtAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeExtAdvReport(uint8_t *p, uint8_t len)
{
    8e08:	b580      	push	{r7, lr}
    8e0a:	b086      	sub	sp, #24
    8e0c:	af00      	add	r7, sp, #0
    8e0e:	6078      	str	r0, [r7, #4]
    8e10:	460b      	mov	r3, r1
    8e12:	70fb      	strb	r3, [r7, #3]
  uint8_t                *ptr;
  uint8_t                maxLen;
  uint8_t                dataLen;

  /* get number of reports without advancing pointer */
  i = *p;
    8e14:	687b      	ldr	r3, [r7, #4]
    8e16:	781b      	ldrb	r3, [r3, #0]
    8e18:	75fb      	strb	r3, [r7, #23]

  HCI_TRACE_INFO1("HCI Ext Adv report, num reports: %d", i);
    8e1a:	7dfb      	ldrb	r3, [r7, #23]
    8e1c:	4619      	mov	r1, r3
    8e1e:	486b      	ldr	r0, [pc, #428]	; (8fcc <hciEvtProcessLeExtAdvReport+0x1c4>)
    8e20:	f001 fa84 	bl	a32c <WsfTrace>

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
    8e24:	7dfb      	ldrb	r3, [r7, #23]
    8e26:	2b0f      	cmp	r3, #15
    8e28:	f200 80cc 	bhi.w	8fc4 <hciEvtProcessLeExtAdvReport+0x1bc>
  {
    return;
  }

  ptr = p + 1;
    8e2c:	687b      	ldr	r3, [r7, #4]
    8e2e:	3301      	adds	r3, #1
    8e30:	613b      	str	r3, [r7, #16]
  maxLen = 0;
    8e32:	2300      	movs	r3, #0
    8e34:	73fb      	strb	r3, [r7, #15]

  /* find out max length ext adv/scan rsp data */
  while (i-- > 0)
    8e36:	e011      	b.n	8e5c <hciEvtProcessLeExtAdvReport+0x54>
  {
    ptr += HCI_EXT_ADV_RPT_DATA_LEN_OFFSET;
    8e38:	693b      	ldr	r3, [r7, #16]
    8e3a:	3317      	adds	r3, #23
    8e3c:	613b      	str	r3, [r7, #16]
    BSTREAM_TO_UINT8(dataLen, ptr);
    8e3e:	693b      	ldr	r3, [r7, #16]
    8e40:	1c5a      	adds	r2, r3, #1
    8e42:	613a      	str	r2, [r7, #16]
    8e44:	781b      	ldrb	r3, [r3, #0]
    8e46:	73bb      	strb	r3, [r7, #14]
    ptr += dataLen;
    8e48:	7bbb      	ldrb	r3, [r7, #14]
    8e4a:	693a      	ldr	r2, [r7, #16]
    8e4c:	4413      	add	r3, r2
    8e4e:	613b      	str	r3, [r7, #16]

    /* if len greater than max len seen so far */
    if (dataLen > maxLen)
    8e50:	7bba      	ldrb	r2, [r7, #14]
    8e52:	7bfb      	ldrb	r3, [r7, #15]
    8e54:	429a      	cmp	r2, r3
    8e56:	d901      	bls.n	8e5c <hciEvtProcessLeExtAdvReport+0x54>
    {
      /* update max len */
      maxLen = dataLen;
    8e58:	7bbb      	ldrb	r3, [r7, #14]
    8e5a:	73fb      	strb	r3, [r7, #15]
  while (i-- > 0)
    8e5c:	7dfb      	ldrb	r3, [r7, #23]
    8e5e:	1e5a      	subs	r2, r3, #1
    8e60:	75fa      	strb	r2, [r7, #23]
    8e62:	2b00      	cmp	r3, #0
    8e64:	d1e8      	bne.n	8e38 <hciEvtProcessLeExtAdvReport+0x30>
    }
  }

  /* allocate temp buffer that can hold max length ext adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeExtAdvReportEvt_t) + maxLen)) != NULL)
    8e66:	7bfb      	ldrb	r3, [r7, #15]
    8e68:	b29b      	uxth	r3, r3
    8e6a:	3320      	adds	r3, #32
    8e6c:	b29b      	uxth	r3, r3
    8e6e:	4618      	mov	r0, r3
    8e70:	f001 ff46 	bl	ad00 <WsfBufAlloc>
    8e74:	60b8      	str	r0, [r7, #8]
    8e76:	68bb      	ldr	r3, [r7, #8]
    8e78:	2b00      	cmp	r3, #0
    8e7a:	f000 80a4 	beq.w	8fc6 <hciEvtProcessLeExtAdvReport+0x1be>
  {
    /* get number of reports */
    BSTREAM_TO_UINT8(i, p);
    8e7e:	687b      	ldr	r3, [r7, #4]
    8e80:	1c5a      	adds	r2, r3, #1
    8e82:	607a      	str	r2, [r7, #4]
    8e84:	781b      	ldrb	r3, [r3, #0]
    8e86:	75fb      	strb	r3, [r7, #23]

    /* parse each report and execute callback */
    while (i-- > 0)
    8e88:	e092      	b.n	8fb0 <hciEvtProcessLeExtAdvReport+0x1a8>
    {
      BSTREAM_TO_UINT16(pMsg->eventType, p);
    8e8a:	687b      	ldr	r3, [r7, #4]
    8e8c:	781b      	ldrb	r3, [r3, #0]
    8e8e:	b29a      	uxth	r2, r3
    8e90:	687b      	ldr	r3, [r7, #4]
    8e92:	3301      	adds	r3, #1
    8e94:	781b      	ldrb	r3, [r3, #0]
    8e96:	b29b      	uxth	r3, r3
    8e98:	021b      	lsls	r3, r3, #8
    8e9a:	b29b      	uxth	r3, r3
    8e9c:	4413      	add	r3, r2
    8e9e:	b29a      	uxth	r2, r3
    8ea0:	68bb      	ldr	r3, [r7, #8]
    8ea2:	809a      	strh	r2, [r3, #4]
    8ea4:	687b      	ldr	r3, [r7, #4]
    8ea6:	3302      	adds	r3, #2
    8ea8:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
    8eaa:	687b      	ldr	r3, [r7, #4]
    8eac:	1c5a      	adds	r2, r3, #1
    8eae:	607a      	str	r2, [r7, #4]
    8eb0:	781a      	ldrb	r2, [r3, #0]
    8eb2:	68bb      	ldr	r3, [r7, #8]
    8eb4:	719a      	strb	r2, [r3, #6]
      BSTREAM_TO_BDA(pMsg->addr, p);
    8eb6:	68bb      	ldr	r3, [r7, #8]
    8eb8:	3307      	adds	r3, #7
    8eba:	6879      	ldr	r1, [r7, #4]
    8ebc:	4618      	mov	r0, r3
    8ebe:	f003 ffdd 	bl	ce7c <BdaCpy>
    8ec2:	687b      	ldr	r3, [r7, #4]
    8ec4:	3306      	adds	r3, #6
    8ec6:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->priPhy, p);
    8ec8:	687b      	ldr	r3, [r7, #4]
    8eca:	1c5a      	adds	r2, r3, #1
    8ecc:	607a      	str	r2, [r7, #4]
    8ece:	781a      	ldrb	r2, [r3, #0]
    8ed0:	68bb      	ldr	r3, [r7, #8]
    8ed2:	735a      	strb	r2, [r3, #13]
      BSTREAM_TO_UINT8(pMsg->secPhy, p);
    8ed4:	687b      	ldr	r3, [r7, #4]
    8ed6:	1c5a      	adds	r2, r3, #1
    8ed8:	607a      	str	r2, [r7, #4]
    8eda:	781a      	ldrb	r2, [r3, #0]
    8edc:	68bb      	ldr	r3, [r7, #8]
    8ede:	739a      	strb	r2, [r3, #14]
      BSTREAM_TO_UINT8(pMsg->advSid, p);
    8ee0:	687b      	ldr	r3, [r7, #4]
    8ee2:	1c5a      	adds	r2, r3, #1
    8ee4:	607a      	str	r2, [r7, #4]
    8ee6:	781a      	ldrb	r2, [r3, #0]
    8ee8:	68bb      	ldr	r3, [r7, #8]
    8eea:	73da      	strb	r2, [r3, #15]
      BSTREAM_TO_INT8(pMsg->txPower, p);
    8eec:	687b      	ldr	r3, [r7, #4]
    8eee:	1c5a      	adds	r2, r3, #1
    8ef0:	607a      	str	r2, [r7, #4]
    8ef2:	781b      	ldrb	r3, [r3, #0]
    8ef4:	b25a      	sxtb	r2, r3
    8ef6:	68bb      	ldr	r3, [r7, #8]
    8ef8:	741a      	strb	r2, [r3, #16]
      BSTREAM_TO_INT8(pMsg->rssi, p);
    8efa:	687b      	ldr	r3, [r7, #4]
    8efc:	1c5a      	adds	r2, r3, #1
    8efe:	607a      	str	r2, [r7, #4]
    8f00:	781b      	ldrb	r3, [r3, #0]
    8f02:	b25a      	sxtb	r2, r3
    8f04:	68bb      	ldr	r3, [r7, #8]
    8f06:	745a      	strb	r2, [r3, #17]
      BSTREAM_TO_UINT16(pMsg->perAdvInter, p);
    8f08:	687b      	ldr	r3, [r7, #4]
    8f0a:	781b      	ldrb	r3, [r3, #0]
    8f0c:	b29a      	uxth	r2, r3
    8f0e:	687b      	ldr	r3, [r7, #4]
    8f10:	3301      	adds	r3, #1
    8f12:	781b      	ldrb	r3, [r3, #0]
    8f14:	b29b      	uxth	r3, r3
    8f16:	021b      	lsls	r3, r3, #8
    8f18:	b29b      	uxth	r3, r3
    8f1a:	4413      	add	r3, r2
    8f1c:	b29b      	uxth	r3, r3
    8f1e:	b21a      	sxth	r2, r3
    8f20:	68bb      	ldr	r3, [r7, #8]
    8f22:	825a      	strh	r2, [r3, #18]
    8f24:	687b      	ldr	r3, [r7, #4]
    8f26:	3302      	adds	r3, #2
    8f28:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
    8f2a:	687b      	ldr	r3, [r7, #4]
    8f2c:	1c5a      	adds	r2, r3, #1
    8f2e:	607a      	str	r2, [r7, #4]
    8f30:	781a      	ldrb	r2, [r3, #0]
    8f32:	68bb      	ldr	r3, [r7, #8]
    8f34:	751a      	strb	r2, [r3, #20]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
    8f36:	68bb      	ldr	r3, [r7, #8]
    8f38:	3315      	adds	r3, #21
    8f3a:	6879      	ldr	r1, [r7, #4]
    8f3c:	4618      	mov	r0, r3
    8f3e:	f003 ff9d 	bl	ce7c <BdaCpy>
    8f42:	687b      	ldr	r3, [r7, #4]
    8f44:	3306      	adds	r3, #6
    8f46:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->len, p);
    8f48:	687b      	ldr	r3, [r7, #4]
    8f4a:	1c5a      	adds	r2, r3, #1
    8f4c:	607a      	str	r2, [r7, #4]
    8f4e:	781a      	ldrb	r2, [r3, #0]
    8f50:	68bb      	ldr	r3, [r7, #8]
    8f52:	76da      	strb	r2, [r3, #27]

      HCI_TRACE_INFO1("HCI Ext Adv report, data len: %d", pMsg->len);
    8f54:	68bb      	ldr	r3, [r7, #8]
    8f56:	7edb      	ldrb	r3, [r3, #27]
    8f58:	4619      	mov	r1, r3
    8f5a:	481d      	ldr	r0, [pc, #116]	; (8fd0 <hciEvtProcessLeExtAdvReport+0x1c8>)
    8f5c:	f001 f9e6 	bl	a32c <WsfTrace>

      /* sanity check on report length; quit if invalid */
      if (pMsg->len > HCI_EXT_ADV_RPT_DATA_LEN)
    8f60:	68bb      	ldr	r3, [r7, #8]
    8f62:	7edb      	ldrb	r3, [r3, #27]
    8f64:	2be5      	cmp	r3, #229	; 0xe5
    8f66:	d903      	bls.n	8f70 <hciEvtProcessLeExtAdvReport+0x168>
      {
        HCI_TRACE_WARN0("Invalid ext adv report data len");
    8f68:	481a      	ldr	r0, [pc, #104]	; (8fd4 <hciEvtProcessLeExtAdvReport+0x1cc>)
    8f6a:	f001 f9df 	bl	a32c <WsfTrace>
        break;
    8f6e:	e025      	b.n	8fbc <hciEvtProcessLeExtAdvReport+0x1b4>
      }

      /* Copy data to space after end of report struct */
      pMsg->pData = (uint8_t *)(pMsg + 1);
    8f70:	68bb      	ldr	r3, [r7, #8]
    8f72:	f103 0220 	add.w	r2, r3, #32
    8f76:	68bb      	ldr	r3, [r7, #8]
    8f78:	61da      	str	r2, [r3, #28]
      memcpy(pMsg->pData, p, pMsg->len);
    8f7a:	68bb      	ldr	r3, [r7, #8]
    8f7c:	69d8      	ldr	r0, [r3, #28]
    8f7e:	68bb      	ldr	r3, [r7, #8]
    8f80:	7edb      	ldrb	r3, [r3, #27]
    8f82:	461a      	mov	r2, r3
    8f84:	6879      	ldr	r1, [r7, #4]
    8f86:	f006 fde2 	bl	fb4e <memcpy>
      p += pMsg->len;
    8f8a:	68bb      	ldr	r3, [r7, #8]
    8f8c:	7edb      	ldrb	r3, [r3, #27]
    8f8e:	461a      	mov	r2, r3
    8f90:	687b      	ldr	r3, [r7, #4]
    8f92:	4413      	add	r3, r2
    8f94:	607b      	str	r3, [r7, #4]

      /* initialize message header */
      pMsg->hdr.param = 0;
    8f96:	68bb      	ldr	r3, [r7, #8]
    8f98:	2200      	movs	r2, #0
    8f9a:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_EXT_ADV_REPORT_CBACK_EVT;
    8f9c:	68bb      	ldr	r3, [r7, #8]
    8f9e:	222c      	movs	r2, #44	; 0x2c
    8fa0:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
    8fa2:	68bb      	ldr	r3, [r7, #8]
    8fa4:	2200      	movs	r2, #0
    8fa6:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *)pMsg);
    8fa8:	4b0b      	ldr	r3, [pc, #44]	; (8fd8 <hciEvtProcessLeExtAdvReport+0x1d0>)
    8faa:	689b      	ldr	r3, [r3, #8]
    8fac:	68b8      	ldr	r0, [r7, #8]
    8fae:	4798      	blx	r3
    while (i-- > 0)
    8fb0:	7dfb      	ldrb	r3, [r7, #23]
    8fb2:	1e5a      	subs	r2, r3, #1
    8fb4:	75fa      	strb	r2, [r7, #23]
    8fb6:	2b00      	cmp	r3, #0
    8fb8:	f47f af67 	bne.w	8e8a <hciEvtProcessLeExtAdvReport+0x82>
    }

    /* free buffer */
    WsfBufFree(pMsg);
    8fbc:	68b8      	ldr	r0, [r7, #8]
    8fbe:	f001 fedf 	bl	ad80 <WsfBufFree>
    8fc2:	e000      	b.n	8fc6 <hciEvtProcessLeExtAdvReport+0x1be>
    return;
    8fc4:	bf00      	nop
  }
}
    8fc6:	3718      	adds	r7, #24
    8fc8:	46bd      	mov	sp, r7
    8fca:	bd80      	pop	{r7, pc}
    8fcc:	0000fe58 	.word	0x0000fe58
    8fd0:	0000fe7c 	.word	0x0000fe7c
    8fd4:	0000fea0 	.word	0x0000fea0
    8fd8:	100028f4 	.word	0x100028f4

00008fdc <hciEvtParseLeScanTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeScanTimeout(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8fdc:	b480      	push	{r7}
    8fde:	b085      	sub	sp, #20
    8fe0:	af00      	add	r7, sp, #0
    8fe2:	60f8      	str	r0, [r7, #12]
    8fe4:	60b9      	str	r1, [r7, #8]
    8fe6:	4613      	mov	r3, r2
    8fe8:	71fb      	strb	r3, [r7, #7]
  /* empty */
}
    8fea:	bf00      	nop
    8fec:	3714      	adds	r7, #20
    8fee:	46bd      	mov	sp, r7
    8ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ff4:	4770      	bx	lr

00008ff6 <hciEvtParseLeAdvSetTerm>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAdvSetTerm(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    8ff6:	b480      	push	{r7}
    8ff8:	b085      	sub	sp, #20
    8ffa:	af00      	add	r7, sp, #0
    8ffc:	60f8      	str	r0, [r7, #12]
    8ffe:	60b9      	str	r1, [r7, #8]
    9000:	4613      	mov	r3, r2
    9002:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.status, p);
    9004:	68bb      	ldr	r3, [r7, #8]
    9006:	1c5a      	adds	r2, r3, #1
    9008:	60ba      	str	r2, [r7, #8]
    900a:	781a      	ldrb	r2, [r3, #0]
    900c:	68fb      	ldr	r3, [r7, #12]
    900e:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.advHandle, p);
    9010:	68bb      	ldr	r3, [r7, #8]
    9012:	1c5a      	adds	r2, r3, #1
    9014:	60ba      	str	r2, [r7, #8]
    9016:	781a      	ldrb	r2, [r3, #0]
    9018:	68fb      	ldr	r3, [r7, #12]
    901a:	715a      	strb	r2, [r3, #5]
  BSTREAM_TO_UINT16(pMsg->leAdvSetTerm.handle, p);
    901c:	68bb      	ldr	r3, [r7, #8]
    901e:	781b      	ldrb	r3, [r3, #0]
    9020:	b29a      	uxth	r2, r3
    9022:	68bb      	ldr	r3, [r7, #8]
    9024:	3301      	adds	r3, #1
    9026:	781b      	ldrb	r3, [r3, #0]
    9028:	b29b      	uxth	r3, r3
    902a:	021b      	lsls	r3, r3, #8
    902c:	b29b      	uxth	r3, r3
    902e:	4413      	add	r3, r2
    9030:	b29a      	uxth	r2, r3
    9032:	68fb      	ldr	r3, [r7, #12]
    9034:	80da      	strh	r2, [r3, #6]
    9036:	68bb      	ldr	r3, [r7, #8]
    9038:	3302      	adds	r3, #2
    903a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.numComplEvts, p);
    903c:	68bb      	ldr	r3, [r7, #8]
    903e:	1c5a      	adds	r2, r3, #1
    9040:	60ba      	str	r2, [r7, #8]
    9042:	781a      	ldrb	r2, [r3, #0]
    9044:	68fb      	ldr	r3, [r7, #12]
    9046:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.status = pMsg->leAdvSetTerm.status;
    9048:	68fb      	ldr	r3, [r7, #12]
    904a:	791a      	ldrb	r2, [r3, #4]
    904c:	68fb      	ldr	r3, [r7, #12]
    904e:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leAdvSetTerm.handle;
    9050:	68fb      	ldr	r3, [r7, #12]
    9052:	88da      	ldrh	r2, [r3, #6]
    9054:	68fb      	ldr	r3, [r7, #12]
    9056:	801a      	strh	r2, [r3, #0]
}
    9058:	bf00      	nop
    905a:	3714      	adds	r7, #20
    905c:	46bd      	mov	sp, r7
    905e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9062:	4770      	bx	lr

00009064 <hciEvtParseLeScanReqRcvd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeScanReqRcvd(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    9064:	b580      	push	{r7, lr}
    9066:	b084      	sub	sp, #16
    9068:	af00      	add	r7, sp, #0
    906a:	60f8      	str	r0, [r7, #12]
    906c:	60b9      	str	r1, [r7, #8]
    906e:	4613      	mov	r3, r2
    9070:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.advHandle, p);
    9072:	68bb      	ldr	r3, [r7, #8]
    9074:	1c5a      	adds	r2, r3, #1
    9076:	60ba      	str	r2, [r7, #8]
    9078:	781a      	ldrb	r2, [r3, #0]
    907a:	68fb      	ldr	r3, [r7, #12]
    907c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.scanAddrType, p);
    907e:	68bb      	ldr	r3, [r7, #8]
    9080:	1c5a      	adds	r2, r3, #1
    9082:	60ba      	str	r2, [r7, #8]
    9084:	781a      	ldrb	r2, [r3, #0]
    9086:	68fb      	ldr	r3, [r7, #12]
    9088:	715a      	strb	r2, [r3, #5]
  BSTREAM_TO_BDA(pMsg->leScanReqRcvd.scanAddr, p);
    908a:	68fb      	ldr	r3, [r7, #12]
    908c:	3306      	adds	r3, #6
    908e:	68b9      	ldr	r1, [r7, #8]
    9090:	4618      	mov	r0, r3
    9092:	f003 fef3 	bl	ce7c <BdaCpy>
    9096:	68bb      	ldr	r3, [r7, #8]
    9098:	3306      	adds	r3, #6
    909a:	60bb      	str	r3, [r7, #8]
}
    909c:	bf00      	nop
    909e:	3710      	adds	r7, #16
    90a0:	46bd      	mov	sp, r7
    90a2:	bd80      	pop	{r7, pc}

000090a4 <hciEvtParseLePerAdvSyncEst>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncEst(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    90a4:	b580      	push	{r7, lr}
    90a6:	b084      	sub	sp, #16
    90a8:	af00      	add	r7, sp, #0
    90aa:	60f8      	str	r0, [r7, #12]
    90ac:	60b9      	str	r1, [r7, #8]
    90ae:	4613      	mov	r3, r2
    90b0:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.status, p);
    90b2:	68bb      	ldr	r3, [r7, #8]
    90b4:	1c5a      	adds	r2, r3, #1
    90b6:	60ba      	str	r2, [r7, #8]
    90b8:	781a      	ldrb	r2, [r3, #0]
    90ba:	68fb      	ldr	r3, [r7, #12]
    90bc:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.syncHandle, p);
    90be:	68bb      	ldr	r3, [r7, #8]
    90c0:	781b      	ldrb	r3, [r3, #0]
    90c2:	b29a      	uxth	r2, r3
    90c4:	68bb      	ldr	r3, [r7, #8]
    90c6:	3301      	adds	r3, #1
    90c8:	781b      	ldrb	r3, [r3, #0]
    90ca:	b29b      	uxth	r3, r3
    90cc:	021b      	lsls	r3, r3, #8
    90ce:	b29b      	uxth	r3, r3
    90d0:	4413      	add	r3, r2
    90d2:	b29a      	uxth	r2, r3
    90d4:	68fb      	ldr	r3, [r7, #12]
    90d6:	80da      	strh	r2, [r3, #6]
    90d8:	68bb      	ldr	r3, [r7, #8]
    90da:	3302      	adds	r3, #2
    90dc:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advSid, p);
    90de:	68bb      	ldr	r3, [r7, #8]
    90e0:	1c5a      	adds	r2, r3, #1
    90e2:	60ba      	str	r2, [r7, #8]
    90e4:	781a      	ldrb	r2, [r3, #0]
    90e6:	68fb      	ldr	r3, [r7, #12]
    90e8:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advAddrType, p);
    90ea:	68bb      	ldr	r3, [r7, #8]
    90ec:	1c5a      	adds	r2, r3, #1
    90ee:	60ba      	str	r2, [r7, #8]
    90f0:	781a      	ldrb	r2, [r3, #0]
    90f2:	68fb      	ldr	r3, [r7, #12]
    90f4:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->lePerAdvSyncEst.advAddr, p);
    90f6:	68fb      	ldr	r3, [r7, #12]
    90f8:	330a      	adds	r3, #10
    90fa:	68b9      	ldr	r1, [r7, #8]
    90fc:	4618      	mov	r0, r3
    90fe:	f003 febd 	bl	ce7c <BdaCpy>
    9102:	68bb      	ldr	r3, [r7, #8]
    9104:	3306      	adds	r3, #6
    9106:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advPhy, p);
    9108:	68bb      	ldr	r3, [r7, #8]
    910a:	1c5a      	adds	r2, r3, #1
    910c:	60ba      	str	r2, [r7, #8]
    910e:	781a      	ldrb	r2, [r3, #0]
    9110:	68fb      	ldr	r3, [r7, #12]
    9112:	741a      	strb	r2, [r3, #16]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.perAdvInterval, p);
    9114:	68bb      	ldr	r3, [r7, #8]
    9116:	781b      	ldrb	r3, [r3, #0]
    9118:	b29a      	uxth	r2, r3
    911a:	68bb      	ldr	r3, [r7, #8]
    911c:	3301      	adds	r3, #1
    911e:	781b      	ldrb	r3, [r3, #0]
    9120:	b29b      	uxth	r3, r3
    9122:	021b      	lsls	r3, r3, #8
    9124:	b29b      	uxth	r3, r3
    9126:	4413      	add	r3, r2
    9128:	b29a      	uxth	r2, r3
    912a:	68fb      	ldr	r3, [r7, #12]
    912c:	825a      	strh	r2, [r3, #18]
    912e:	68bb      	ldr	r3, [r7, #8]
    9130:	3302      	adds	r3, #2
    9132:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.clockAccuracy, p);
    9134:	68bb      	ldr	r3, [r7, #8]
    9136:	1c5a      	adds	r2, r3, #1
    9138:	60ba      	str	r2, [r7, #8]
    913a:	781a      	ldrb	r2, [r3, #0]
    913c:	68fb      	ldr	r3, [r7, #12]
    913e:	751a      	strb	r2, [r3, #20]

  pMsg->hdr.status = pMsg->lePerAdvSyncEst.status;
    9140:	68fb      	ldr	r3, [r7, #12]
    9142:	791a      	ldrb	r2, [r3, #4]
    9144:	68fb      	ldr	r3, [r7, #12]
    9146:	70da      	strb	r2, [r3, #3]
}
    9148:	bf00      	nop
    914a:	3710      	adds	r7, #16
    914c:	46bd      	mov	sp, r7
    914e:	bd80      	pop	{r7, pc}

00009150 <hciEvtProcessLePerAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLePerAdvReport(uint8_t *p, uint8_t len)
{
    9150:	b580      	push	{r7, lr}
    9152:	b084      	sub	sp, #16
    9154:	af00      	add	r7, sp, #0
    9156:	6078      	str	r0, [r7, #4]
    9158:	460b      	mov	r3, r1
    915a:	70fb      	strb	r3, [r7, #3]
  hciLePerAdvReportEvt_t *pMsg;
  uint8_t                dataLen;

  HCI_TRACE_INFO0("HCI Per Adv report");
    915c:	4837      	ldr	r0, [pc, #220]	; (923c <hciEvtProcessLePerAdvReport+0xec>)
    915e:	f001 f8e5 	bl	a32c <WsfTrace>

  /* get report data length */
  dataLen = p[HCI_PER_ADV_RPT_DATA_LEN_OFFSET];
    9162:	687b      	ldr	r3, [r7, #4]
    9164:	795b      	ldrb	r3, [r3, #5]
    9166:	73fb      	strb	r3, [r7, #15]

  /* sanity check on report length; quit if invalid */
  if (dataLen > HCI_PER_ADV_RPT_DATA_LEN)
    9168:	7bfb      	ldrb	r3, [r7, #15]
    916a:	2bf8      	cmp	r3, #248	; 0xf8
    916c:	d905      	bls.n	917a <hciEvtProcessLePerAdvReport+0x2a>
  {
    HCI_TRACE_WARN1("Invalid per adv report data len: %d", dataLen);
    916e:	7bfb      	ldrb	r3, [r7, #15]
    9170:	4619      	mov	r1, r3
    9172:	4833      	ldr	r0, [pc, #204]	; (9240 <hciEvtProcessLePerAdvReport+0xf0>)
    9174:	f001 f8da 	bl	a32c <WsfTrace>
    return;
    9178:	e05c      	b.n	9234 <hciEvtProcessLePerAdvReport+0xe4>
  }

  /* allocate temp buffer that can hold max length periodic adv report data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLePerAdvReportEvt_t) + dataLen)) != NULL)
    917a:	7bfb      	ldrb	r3, [r7, #15]
    917c:	b29b      	uxth	r3, r3
    917e:	3310      	adds	r3, #16
    9180:	b29b      	uxth	r3, r3
    9182:	4618      	mov	r0, r3
    9184:	f001 fdbc 	bl	ad00 <WsfBufAlloc>
    9188:	60b8      	str	r0, [r7, #8]
    918a:	68bb      	ldr	r3, [r7, #8]
    918c:	2b00      	cmp	r3, #0
    918e:	d051      	beq.n	9234 <hciEvtProcessLePerAdvReport+0xe4>
  {
    /* parse report and execute callback */
    BSTREAM_TO_UINT16(pMsg->syncHandle, p);
    9190:	687b      	ldr	r3, [r7, #4]
    9192:	781b      	ldrb	r3, [r3, #0]
    9194:	b29a      	uxth	r2, r3
    9196:	687b      	ldr	r3, [r7, #4]
    9198:	3301      	adds	r3, #1
    919a:	781b      	ldrb	r3, [r3, #0]
    919c:	b29b      	uxth	r3, r3
    919e:	021b      	lsls	r3, r3, #8
    91a0:	b29b      	uxth	r3, r3
    91a2:	4413      	add	r3, r2
    91a4:	b29a      	uxth	r2, r3
    91a6:	68bb      	ldr	r3, [r7, #8]
    91a8:	809a      	strh	r2, [r3, #4]
    91aa:	687b      	ldr	r3, [r7, #4]
    91ac:	3302      	adds	r3, #2
    91ae:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT8(pMsg->txPower, p);
    91b0:	687b      	ldr	r3, [r7, #4]
    91b2:	1c5a      	adds	r2, r3, #1
    91b4:	607a      	str	r2, [r7, #4]
    91b6:	781a      	ldrb	r2, [r3, #0]
    91b8:	68bb      	ldr	r3, [r7, #8]
    91ba:	719a      	strb	r2, [r3, #6]
    BSTREAM_TO_UINT8(pMsg->rssi, p);
    91bc:	687b      	ldr	r3, [r7, #4]
    91be:	1c5a      	adds	r2, r3, #1
    91c0:	607a      	str	r2, [r7, #4]
    91c2:	781a      	ldrb	r2, [r3, #0]
    91c4:	68bb      	ldr	r3, [r7, #8]
    91c6:	71da      	strb	r2, [r3, #7]
    BSTREAM_TO_UINT8(pMsg->unused, p);
    91c8:	687b      	ldr	r3, [r7, #4]
    91ca:	1c5a      	adds	r2, r3, #1
    91cc:	607a      	str	r2, [r7, #4]
    91ce:	781a      	ldrb	r2, [r3, #0]
    91d0:	68bb      	ldr	r3, [r7, #8]
    91d2:	721a      	strb	r2, [r3, #8]
    BSTREAM_TO_UINT8(pMsg->status, p);
    91d4:	687b      	ldr	r3, [r7, #4]
    91d6:	1c5a      	adds	r2, r3, #1
    91d8:	607a      	str	r2, [r7, #4]
    91da:	781a      	ldrb	r2, [r3, #0]
    91dc:	68bb      	ldr	r3, [r7, #8]
    91de:	725a      	strb	r2, [r3, #9]
    BSTREAM_TO_UINT8(pMsg->len, p);
    91e0:	687b      	ldr	r3, [r7, #4]
    91e2:	1c5a      	adds	r2, r3, #1
    91e4:	607a      	str	r2, [r7, #4]
    91e6:	781a      	ldrb	r2, [r3, #0]
    91e8:	68bb      	ldr	r3, [r7, #8]
    91ea:	729a      	strb	r2, [r3, #10]

    HCI_TRACE_INFO1("HCI Per Adv report, data len: %d", pMsg->len);
    91ec:	68bb      	ldr	r3, [r7, #8]
    91ee:	7a9b      	ldrb	r3, [r3, #10]
    91f0:	4619      	mov	r1, r3
    91f2:	4814      	ldr	r0, [pc, #80]	; (9244 <hciEvtProcessLePerAdvReport+0xf4>)
    91f4:	f001 f89a 	bl	a32c <WsfTrace>

    /* Copy data to space after end of report struct */
    pMsg->pData = (uint8_t *)(pMsg + 1);
    91f8:	68bb      	ldr	r3, [r7, #8]
    91fa:	f103 0210 	add.w	r2, r3, #16
    91fe:	68bb      	ldr	r3, [r7, #8]
    9200:	60da      	str	r2, [r3, #12]
    memcpy(pMsg->pData, p, pMsg->len);
    9202:	68bb      	ldr	r3, [r7, #8]
    9204:	68d8      	ldr	r0, [r3, #12]
    9206:	68bb      	ldr	r3, [r7, #8]
    9208:	7a9b      	ldrb	r3, [r3, #10]
    920a:	461a      	mov	r2, r3
    920c:	6879      	ldr	r1, [r7, #4]
    920e:	f006 fc9e 	bl	fb4e <memcpy>

    /* initialize message header */
    pMsg->hdr.param = 0;
    9212:	68bb      	ldr	r3, [r7, #8]
    9214:	2200      	movs	r2, #0
    9216:	801a      	strh	r2, [r3, #0]
    pMsg->hdr.event = HCI_LE_PER_ADV_REPORT_CBACK_EVT;
    9218:	68bb      	ldr	r3, [r7, #8]
    921a:	2231      	movs	r2, #49	; 0x31
    921c:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.status = pMsg->status;
    921e:	68bb      	ldr	r3, [r7, #8]
    9220:	7a5a      	ldrb	r2, [r3, #9]
    9222:	68bb      	ldr	r3, [r7, #8]
    9224:	70da      	strb	r2, [r3, #3]

    /* execute callback */
    (*hciCb.evtCback)((hciEvt_t *)pMsg);
    9226:	4b08      	ldr	r3, [pc, #32]	; (9248 <hciEvtProcessLePerAdvReport+0xf8>)
    9228:	689b      	ldr	r3, [r3, #8]
    922a:	68b8      	ldr	r0, [r7, #8]
    922c:	4798      	blx	r3

    /* free buffer */
    WsfBufFree(pMsg);
    922e:	68b8      	ldr	r0, [r7, #8]
    9230:	f001 fda6 	bl	ad80 <WsfBufFree>
  }
}
    9234:	3710      	adds	r7, #16
    9236:	46bd      	mov	sp, r7
    9238:	bd80      	pop	{r7, pc}
    923a:	bf00      	nop
    923c:	0000fec0 	.word	0x0000fec0
    9240:	0000fed4 	.word	0x0000fed4
    9244:	0000fef8 	.word	0x0000fef8
    9248:	100028f4 	.word	0x100028f4

0000924c <hciEvtParseLeCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    924c:	b480      	push	{r7}
    924e:	b085      	sub	sp, #20
    9250:	af00      	add	r7, sp, #0
    9252:	60f8      	str	r0, [r7, #12]
    9254:	60b9      	str	r1, [r7, #8]
    9256:	4613      	mov	r3, r2
    9258:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
    925a:	68bb      	ldr	r3, [r7, #8]
    925c:	1c5a      	adds	r2, r3, #1
    925e:	60ba      	str	r2, [r7, #8]
    9260:	781a      	ldrb	r2, [r3, #0]
    9262:	68fb      	ldr	r3, [r7, #12]
    9264:	70da      	strb	r2, [r3, #3]
}
    9266:	bf00      	nop
    9268:	3714      	adds	r7, #20
    926a:	46bd      	mov	sp, r7
    926c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9270:	4770      	bx	lr

00009272 <hciEvtParseLePerAdvSyncLost>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncLost(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    9272:	b480      	push	{r7}
    9274:	b085      	sub	sp, #20
    9276:	af00      	add	r7, sp, #0
    9278:	60f8      	str	r0, [r7, #12]
    927a:	60b9      	str	r1, [r7, #8]
    927c:	4613      	mov	r3, r2
    927e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncLost.syncHandle, p);
    9280:	68bb      	ldr	r3, [r7, #8]
    9282:	781b      	ldrb	r3, [r3, #0]
    9284:	b29a      	uxth	r2, r3
    9286:	68bb      	ldr	r3, [r7, #8]
    9288:	3301      	adds	r3, #1
    928a:	781b      	ldrb	r3, [r3, #0]
    928c:	b29b      	uxth	r3, r3
    928e:	021b      	lsls	r3, r3, #8
    9290:	b29b      	uxth	r3, r3
    9292:	4413      	add	r3, r2
    9294:	b29a      	uxth	r2, r3
    9296:	68fb      	ldr	r3, [r7, #12]
    9298:	809a      	strh	r2, [r3, #4]
    929a:	68bb      	ldr	r3, [r7, #8]
    929c:	3302      	adds	r3, #2
    929e:	60bb      	str	r3, [r7, #8]
}
    92a0:	bf00      	nop
    92a2:	3714      	adds	r7, #20
    92a4:	46bd      	mov	sp, r7
    92a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    92aa:	4770      	bx	lr

000092ac <hciEvtProcessLeDirectAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeDirectAdvReport(uint8_t *p, uint8_t len)
{
    92ac:	b580      	push	{r7, lr}
    92ae:	b084      	sub	sp, #16
    92b0:	af00      	add	r7, sp, #0
    92b2:	6078      	str	r0, [r7, #4]
    92b4:	460b      	mov	r3, r1
    92b6:	70fb      	strb	r3, [r7, #3]
  hciLeAdvReportEvt_t *pMsg;
  uint8_t             i;

  /* get number of reports */
  BSTREAM_TO_UINT8(i, p);
    92b8:	687b      	ldr	r3, [r7, #4]
    92ba:	1c5a      	adds	r2, r3, #1
    92bc:	607a      	str	r2, [r7, #4]
    92be:	781b      	ldrb	r3, [r3, #0]
    92c0:	73fb      	strb	r3, [r7, #15]

  HCI_TRACE_INFO1("HCI Adv report, num reports: %d", i);
    92c2:	7bfb      	ldrb	r3, [r7, #15]
    92c4:	4619      	mov	r1, r3
    92c6:	482c      	ldr	r0, [pc, #176]	; (9378 <hciEvtProcessLeDirectAdvReport+0xcc>)
    92c8:	f001 f830 	bl	a32c <WsfTrace>

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
    92cc:	7bfb      	ldrb	r3, [r7, #15]
    92ce:	2b0f      	cmp	r3, #15
    92d0:	d84e      	bhi.n	9370 <hciEvtProcessLeDirectAdvReport+0xc4>
  {
    return;
  }

  /* allocate temp buffer that can hold max length adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t))) != NULL)
    92d2:	201c      	movs	r0, #28
    92d4:	f001 fd14 	bl	ad00 <WsfBufAlloc>
    92d8:	60b8      	str	r0, [r7, #8]
    92da:	68bb      	ldr	r3, [r7, #8]
    92dc:	2b00      	cmp	r3, #0
    92de:	d048      	beq.n	9372 <hciEvtProcessLeDirectAdvReport+0xc6>
  {
    /* parse each report and execute callback */
    while (i-- > 0)
    92e0:	e03d      	b.n	935e <hciEvtProcessLeDirectAdvReport+0xb2>
    {
      BSTREAM_TO_UINT8(pMsg->eventType, p);
    92e2:	687b      	ldr	r3, [r7, #4]
    92e4:	1c5a      	adds	r2, r3, #1
    92e6:	607a      	str	r2, [r7, #4]
    92e8:	781a      	ldrb	r2, [r3, #0]
    92ea:	68bb      	ldr	r3, [r7, #8]
    92ec:	729a      	strb	r2, [r3, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
    92ee:	687b      	ldr	r3, [r7, #4]
    92f0:	1c5a      	adds	r2, r3, #1
    92f2:	607a      	str	r2, [r7, #4]
    92f4:	781a      	ldrb	r2, [r3, #0]
    92f6:	68bb      	ldr	r3, [r7, #8]
    92f8:	72da      	strb	r2, [r3, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
    92fa:	68bb      	ldr	r3, [r7, #8]
    92fc:	330c      	adds	r3, #12
    92fe:	6879      	ldr	r1, [r7, #4]
    9300:	4618      	mov	r0, r3
    9302:	f003 fdbb 	bl	ce7c <BdaCpy>
    9306:	687b      	ldr	r3, [r7, #4]
    9308:	3306      	adds	r3, #6
    930a:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
    930c:	687b      	ldr	r3, [r7, #4]
    930e:	1c5a      	adds	r2, r3, #1
    9310:	607a      	str	r2, [r7, #4]
    9312:	781a      	ldrb	r2, [r3, #0]
    9314:	68bb      	ldr	r3, [r7, #8]
    9316:	749a      	strb	r2, [r3, #18]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
    9318:	68bb      	ldr	r3, [r7, #8]
    931a:	3313      	adds	r3, #19
    931c:	6879      	ldr	r1, [r7, #4]
    931e:	4618      	mov	r0, r3
    9320:	f003 fdac 	bl	ce7c <BdaCpy>
    9324:	687b      	ldr	r3, [r7, #4]
    9326:	3306      	adds	r3, #6
    9328:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->rssi, p);
    932a:	687b      	ldr	r3, [r7, #4]
    932c:	1c5a      	adds	r2, r3, #1
    932e:	607a      	str	r2, [r7, #4]
    9330:	781b      	ldrb	r3, [r3, #0]
    9332:	b25a      	sxtb	r2, r3
    9334:	68bb      	ldr	r3, [r7, #8]
    9336:	725a      	strb	r2, [r3, #9]

      /* zero out unused fields */
      pMsg->len = 0;
    9338:	68bb      	ldr	r3, [r7, #8]
    933a:	2200      	movs	r2, #0
    933c:	721a      	strb	r2, [r3, #8]
      pMsg->pData = NULL;
    933e:	68bb      	ldr	r3, [r7, #8]
    9340:	2200      	movs	r2, #0
    9342:	605a      	str	r2, [r3, #4]

      /* initialize message header */
      pMsg->hdr.param = 0;
    9344:	68bb      	ldr	r3, [r7, #8]
    9346:	2200      	movs	r2, #0
    9348:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_ADV_REPORT_CBACK_EVT;
    934a:	68bb      	ldr	r3, [r7, #8]
    934c:	2206      	movs	r2, #6
    934e:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
    9350:	68bb      	ldr	r3, [r7, #8]
    9352:	2200      	movs	r2, #0
    9354:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
    9356:	4b09      	ldr	r3, [pc, #36]	; (937c <hciEvtProcessLeDirectAdvReport+0xd0>)
    9358:	689b      	ldr	r3, [r3, #8]
    935a:	68b8      	ldr	r0, [r7, #8]
    935c:	4798      	blx	r3
    while (i-- > 0)
    935e:	7bfb      	ldrb	r3, [r7, #15]
    9360:	1e5a      	subs	r2, r3, #1
    9362:	73fa      	strb	r2, [r7, #15]
    9364:	2b00      	cmp	r3, #0
    9366:	d1bc      	bne.n	92e2 <hciEvtProcessLeDirectAdvReport+0x36>
    }

    /* free buffer */
    WsfBufFree(pMsg);
    9368:	68b8      	ldr	r0, [r7, #8]
    936a:	f001 fd09 	bl	ad80 <WsfBufFree>
    936e:	e000      	b.n	9372 <hciEvtProcessLeDirectAdvReport+0xc6>
    return;
    9370:	bf00      	nop
  }
}
    9372:	3710      	adds	r7, #16
    9374:	46bd      	mov	sp, r7
    9376:	bd80      	pop	{r7, pc}
    9378:	0000fdfc 	.word	0x0000fdfc
    937c:	100028f4 	.word	0x100028f4

00009380 <hciEvtCmdStatusFailure>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtCmdStatusFailure(uint8_t status, uint16_t opcode)
{
    9380:	b480      	push	{r7}
    9382:	b083      	sub	sp, #12
    9384:	af00      	add	r7, sp, #0
    9386:	4603      	mov	r3, r0
    9388:	460a      	mov	r2, r1
    938a:	71fb      	strb	r3, [r7, #7]
    938c:	4613      	mov	r3, r2
    938e:	80bb      	strh	r3, [r7, #4]
  HCI_OPCODE_LE_CONN_UPDATE
  HCI_OPCODE_LE_READ_REMOTE_FEAT
  HCI_OPCODE_LE_START_ENCRYPTION
  HCI_OPCODE_READ_REMOTE_VER_INFO
#endif
}
    9390:	bf00      	nop
    9392:	370c      	adds	r7, #12
    9394:	46bd      	mov	sp, r7
    9396:	f85d 7b04 	ldr.w	r7, [sp], #4
    939a:	4770      	bx	lr

0000939c <hciEvtProcessCmdStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdStatus(uint8_t *p)
{
    939c:	b580      	push	{r7, lr}
    939e:	b084      	sub	sp, #16
    93a0:	af00      	add	r7, sp, #0
    93a2:	6078      	str	r0, [r7, #4]
  uint8_t   status;
  uint8_t   numPkts;
  uint16_t  opcode;

  BSTREAM_TO_UINT8(status, p);
    93a4:	687b      	ldr	r3, [r7, #4]
    93a6:	1c5a      	adds	r2, r3, #1
    93a8:	607a      	str	r2, [r7, #4]
    93aa:	781b      	ldrb	r3, [r3, #0]
    93ac:	73fb      	strb	r3, [r7, #15]
  BSTREAM_TO_UINT8(numPkts, p);
    93ae:	687b      	ldr	r3, [r7, #4]
    93b0:	1c5a      	adds	r2, r3, #1
    93b2:	607a      	str	r2, [r7, #4]
    93b4:	781b      	ldrb	r3, [r3, #0]
    93b6:	73bb      	strb	r3, [r7, #14]
  BSTREAM_TO_UINT16(opcode, p);
    93b8:	687b      	ldr	r3, [r7, #4]
    93ba:	781b      	ldrb	r3, [r3, #0]
    93bc:	b29a      	uxth	r2, r3
    93be:	687b      	ldr	r3, [r7, #4]
    93c0:	3301      	adds	r3, #1
    93c2:	781b      	ldrb	r3, [r3, #0]
    93c4:	b29b      	uxth	r3, r3
    93c6:	021b      	lsls	r3, r3, #8
    93c8:	b29b      	uxth	r3, r3
    93ca:	4413      	add	r3, r2
    93cc:	81bb      	strh	r3, [r7, #12]
    93ce:	687b      	ldr	r3, [r7, #4]
    93d0:	3302      	adds	r3, #2
    93d2:	607b      	str	r3, [r7, #4]

  if (status != HCI_SUCCESS)  /* optional: or vendor specific */
    93d4:	7bfb      	ldrb	r3, [r7, #15]
    93d6:	2b00      	cmp	r3, #0
    93d8:	d005      	beq.n	93e6 <hciEvtProcessCmdStatus+0x4a>
  {
    hciEvtCmdStatusFailure(status, opcode);
    93da:	89ba      	ldrh	r2, [r7, #12]
    93dc:	7bfb      	ldrb	r3, [r7, #15]
    93de:	4611      	mov	r1, r2
    93e0:	4618      	mov	r0, r3
    93e2:	f7ff ffcd 	bl	9380 <hciEvtCmdStatusFailure>
  }

  /* optional:  handle vendor-specific command status event */

  hciCmdRecvCmpl(numPkts);
    93e6:	7bbb      	ldrb	r3, [r7, #14]
    93e8:	4618      	mov	r0, r3
    93ea:	f7fc fff7 	bl	63dc <hciCmdRecvCmpl>
}
    93ee:	bf00      	nop
    93f0:	3710      	adds	r7, #16
    93f2:	46bd      	mov	sp, r7
    93f4:	bd80      	pop	{r7, pc}
	...

000093f8 <hciEvtProcessCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdCmpl(uint8_t *p, uint8_t len)
{
    93f8:	b580      	push	{r7, lr}
    93fa:	b086      	sub	sp, #24
    93fc:	af00      	add	r7, sp, #0
    93fe:	6078      	str	r0, [r7, #4]
    9400:	460b      	mov	r3, r1
    9402:	70fb      	strb	r3, [r7, #3]
  uint8_t       numPkts;
  uint16_t      opcode;
  hciEvt_t      *pMsg;
  uint8_t       cbackEvt = 0;
    9404:	2300      	movs	r3, #0
    9406:	75fb      	strb	r3, [r7, #23]
  hciEvtCback_t cback = hciCb.evtCback;
    9408:	4ba2      	ldr	r3, [pc, #648]	; (9694 <hciEvtProcessCmdCmpl+0x29c>)
    940a:	689b      	ldr	r3, [r3, #8]
    940c:	613b      	str	r3, [r7, #16]

  BSTREAM_TO_UINT8(numPkts, p);
    940e:	687b      	ldr	r3, [r7, #4]
    9410:	1c5a      	adds	r2, r3, #1
    9412:	607a      	str	r2, [r7, #4]
    9414:	781b      	ldrb	r3, [r3, #0]
    9416:	73fb      	strb	r3, [r7, #15]
  BSTREAM_TO_UINT16(opcode, p);
    9418:	687b      	ldr	r3, [r7, #4]
    941a:	781b      	ldrb	r3, [r3, #0]
    941c:	b29a      	uxth	r2, r3
    941e:	687b      	ldr	r3, [r7, #4]
    9420:	3301      	adds	r3, #1
    9422:	781b      	ldrb	r3, [r3, #0]
    9424:	b29b      	uxth	r3, r3
    9426:	021b      	lsls	r3, r3, #8
    9428:	b29b      	uxth	r3, r3
    942a:	4413      	add	r3, r2
    942c:	81bb      	strh	r3, [r7, #12]
    942e:	687b      	ldr	r3, [r7, #4]
    9430:	3302      	adds	r3, #2
    9432:	607b      	str	r3, [r7, #4]

  /* convert opcode to internal event code and perform special handling */
  switch (opcode)
    9434:	89bb      	ldrh	r3, [r7, #12]
    9436:	f242 0222 	movw	r2, #8226	; 0x2022
    943a:	4293      	cmp	r3, r2
    943c:	f000 80aa 	beq.w	9594 <hciEvtProcessCmdCmpl+0x19c>
    9440:	f242 0222 	movw	r2, #8226	; 0x2022
    9444:	4293      	cmp	r3, r2
    9446:	dc49      	bgt.n	94dc <hciEvtProcessCmdCmpl+0xe4>
    9448:	f242 0215 	movw	r2, #8213	; 0x2015
    944c:	4293      	cmp	r3, r2
    944e:	f000 80b3 	beq.w	95b8 <hciEvtProcessCmdCmpl+0x1c0>
    9452:	f242 0215 	movw	r2, #8213	; 0x2015
    9456:	4293      	cmp	r3, r2
    9458:	dc22      	bgt.n	94a0 <hciEvtProcessCmdCmpl+0xa8>
    945a:	f241 4205 	movw	r2, #5125	; 0x1405
    945e:	4293      	cmp	r3, r2
    9460:	f000 80ad 	beq.w	95be <hciEvtProcessCmdCmpl+0x1c6>
    9464:	f241 4205 	movw	r2, #5125	; 0x1405
    9468:	4293      	cmp	r3, r2
    946a:	dc0a      	bgt.n	9482 <hciEvtProcessCmdCmpl+0x8a>
    946c:	f640 422d 	movw	r2, #3117	; 0xc2d
    9470:	4293      	cmp	r3, r2
    9472:	f000 80a7 	beq.w	95c4 <hciEvtProcessCmdCmpl+0x1cc>
    9476:	f640 427c 	movw	r2, #3196	; 0xc7c
    947a:	4293      	cmp	r3, r2
    947c:	f000 80b7 	beq.w	95ee <hciEvtProcessCmdCmpl+0x1f6>
    9480:	e0cd      	b.n	961e <hciEvtProcessCmdCmpl+0x226>
    9482:	f242 020c 	movw	r2, #8204	; 0x200c
    9486:	4293      	cmp	r3, r2
    9488:	f000 80ba 	beq.w	9600 <hciEvtProcessCmdCmpl+0x208>
    948c:	f242 020e 	movw	r2, #8206	; 0x200e
    9490:	4293      	cmp	r3, r2
    9492:	d06a      	beq.n	956a <hciEvtProcessCmdCmpl+0x172>
    9494:	f242 020a 	movw	r2, #8202	; 0x200a
    9498:	4293      	cmp	r3, r2
    949a:	f000 80b4 	beq.w	9606 <hciEvtProcessCmdCmpl+0x20e>
    949e:	e0be      	b.n	961e <hciEvtProcessCmdCmpl+0x226>
    94a0:	f242 021a 	movw	r2, #8218	; 0x201a
    94a4:	4293      	cmp	r3, r2
    94a6:	d07b      	beq.n	95a0 <hciEvtProcessCmdCmpl+0x1a8>
    94a8:	f242 021a 	movw	r2, #8218	; 0x201a
    94ac:	4293      	cmp	r3, r2
    94ae:	dc08      	bgt.n	94c2 <hciEvtProcessCmdCmpl+0xca>
    94b0:	f242 0217 	movw	r2, #8215	; 0x2017
    94b4:	4293      	cmp	r3, r2
    94b6:	d05b      	beq.n	9570 <hciEvtProcessCmdCmpl+0x178>
    94b8:	f242 0218 	movw	r2, #8216	; 0x2018
    94bc:	4293      	cmp	r3, r2
    94be:	d075      	beq.n	95ac <hciEvtProcessCmdCmpl+0x1b4>
    94c0:	e0ad      	b.n	961e <hciEvtProcessCmdCmpl+0x226>
    94c2:	f242 0220 	movw	r2, #8224	; 0x2020
    94c6:	4293      	cmp	r3, r2
    94c8:	d058      	beq.n	957c <hciEvtProcessCmdCmpl+0x184>
    94ca:	f242 0220 	movw	r2, #8224	; 0x2020
    94ce:	4293      	cmp	r3, r2
    94d0:	dc57      	bgt.n	9582 <hciEvtProcessCmdCmpl+0x18a>
    94d2:	f242 021b 	movw	r2, #8219	; 0x201b
    94d6:	4293      	cmp	r3, r2
    94d8:	d065      	beq.n	95a6 <hciEvtProcessCmdCmpl+0x1ae>
    94da:	e0a0      	b.n	961e <hciEvtProcessCmdCmpl+0x226>
    94dc:	f242 022c 	movw	r2, #8236	; 0x202c
    94e0:	4293      	cmp	r3, r2
    94e2:	d07e      	beq.n	95e2 <hciEvtProcessCmdCmpl+0x1ea>
    94e4:	f242 022c 	movw	r2, #8236	; 0x202c
    94e8:	4293      	cmp	r3, r2
    94ea:	dc1d      	bgt.n	9528 <hciEvtProcessCmdCmpl+0x130>
    94ec:	f242 0227 	movw	r2, #8231	; 0x2027
    94f0:	4293      	cmp	r3, r2
    94f2:	d06a      	beq.n	95ca <hciEvtProcessCmdCmpl+0x1d2>
    94f4:	f242 0227 	movw	r2, #8231	; 0x2027
    94f8:	4293      	cmp	r3, r2
    94fa:	dc08      	bgt.n	950e <hciEvtProcessCmdCmpl+0x116>
    94fc:	f242 0223 	movw	r2, #8227	; 0x2023
    9500:	4293      	cmp	r3, r2
    9502:	d041      	beq.n	9588 <hciEvtProcessCmdCmpl+0x190>
    9504:	f242 0224 	movw	r2, #8228	; 0x2024
    9508:	4293      	cmp	r3, r2
    950a:	d040      	beq.n	958e <hciEvtProcessCmdCmpl+0x196>
    950c:	e087      	b.n	961e <hciEvtProcessCmdCmpl+0x226>
    950e:	f242 0229 	movw	r2, #8233	; 0x2029
    9512:	4293      	cmp	r3, r2
    9514:	d05f      	beq.n	95d6 <hciEvtProcessCmdCmpl+0x1de>
    9516:	f242 0229 	movw	r2, #8233	; 0x2029
    951a:	4293      	cmp	r3, r2
    951c:	db58      	blt.n	95d0 <hciEvtProcessCmdCmpl+0x1d8>
    951e:	f242 022b 	movw	r2, #8235	; 0x202b
    9522:	4293      	cmp	r3, r2
    9524:	d05a      	beq.n	95dc <hciEvtProcessCmdCmpl+0x1e4>
    9526:	e07a      	b.n	961e <hciEvtProcessCmdCmpl+0x226>
    9528:	f242 0231 	movw	r2, #8241	; 0x2031
    952c:	4293      	cmp	r3, r2
    952e:	d064      	beq.n	95fa <hciEvtProcessCmdCmpl+0x202>
    9530:	f242 0231 	movw	r2, #8241	; 0x2031
    9534:	4293      	cmp	r3, r2
    9536:	dc0c      	bgt.n	9552 <hciEvtProcessCmdCmpl+0x15a>
    9538:	f242 022f 	movw	r2, #8239	; 0x202f
    953c:	4293      	cmp	r3, r2
    953e:	d02c      	beq.n	959a <hciEvtProcessCmdCmpl+0x1a2>
    9540:	f242 022f 	movw	r2, #8239	; 0x202f
    9544:	4293      	cmp	r3, r2
    9546:	dc55      	bgt.n	95f4 <hciEvtProcessCmdCmpl+0x1fc>
    9548:	f242 022d 	movw	r2, #8237	; 0x202d
    954c:	4293      	cmp	r3, r2
    954e:	d04b      	beq.n	95e8 <hciEvtProcessCmdCmpl+0x1f0>
    9550:	e065      	b.n	961e <hciEvtProcessCmdCmpl+0x226>
    9552:	f5b3 5f01 	cmp.w	r3, #8256	; 0x2040
    9556:	d05f      	beq.n	9618 <hciEvtProcessCmdCmpl+0x220>
    9558:	f242 0242 	movw	r2, #8258	; 0x2042
    955c:	4293      	cmp	r3, r2
    955e:	d055      	beq.n	960c <hciEvtProcessCmdCmpl+0x214>
    9560:	f242 0239 	movw	r2, #8249	; 0x2039
    9564:	4293      	cmp	r3, r2
    9566:	d054      	beq.n	9612 <hciEvtProcessCmdCmpl+0x21a>
    9568:	e059      	b.n	961e <hciEvtProcessCmdCmpl+0x226>
  {
  case HCI_OPCODE_LE_CREATE_CONN_CANCEL:
    cbackEvt = HCI_LE_CREATE_CONN_CANCEL_CMD_CMPL_CBACK_EVT;
    956a:	2305      	movs	r3, #5
    956c:	75fb      	strb	r3, [r7, #23]
    break;
    956e:	e064      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_ENCRYPT:
    cbackEvt = HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT;
    9570:	231b      	movs	r3, #27
    9572:	75fb      	strb	r3, [r7, #23]
    cback = hciCb.secCback;
    9574:	4b47      	ldr	r3, [pc, #284]	; (9694 <hciEvtProcessCmdCmpl+0x29c>)
    9576:	68db      	ldr	r3, [r3, #12]
    9578:	613b      	str	r3, [r7, #16]
    break;
    957a:	e05e      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_REM_CONN_PARAM_REP:
    cbackEvt = HCI_LE_REM_CONN_PARAM_REP_CMD_CMPL_CBACK_EVT;
    957c:	231d      	movs	r3, #29
    957e:	75fb      	strb	r3, [r7, #23]
    break;
    9580:	e05b      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP:
    cbackEvt = HCI_LE_REM_CONN_PARAM_NEG_REP_CMD_CMPL_CBACK_EVT;
    9582:	231e      	movs	r3, #30
    9584:	75fb      	strb	r3, [r7, #23]
    break;
    9586:	e058      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_DEF_DATA_LEN:
    cbackEvt = HCI_LE_READ_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
    9588:	231f      	movs	r3, #31
    958a:	75fb      	strb	r3, [r7, #23]
    break;
    958c:	e055      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_WRITE_DEF_DATA_LEN:
    cbackEvt = HCI_LE_WRITE_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
    958e:	2320      	movs	r3, #32
    9590:	75fb      	strb	r3, [r7, #23]
    break;
    9592:	e052      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_DATA_LEN:
    cbackEvt = HCI_LE_SET_DATA_LEN_CMD_CMPL_CBACK_EVT;
    9594:	2321      	movs	r3, #33	; 0x21
    9596:	75fb      	strb	r3, [r7, #23]
    break;
    9598:	e04f      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_MAX_DATA_LEN:
    cbackEvt = HCI_LE_READ_MAX_DATA_LEN_CMD_CMPL_CBACK_EVT;
    959a:	2322      	movs	r3, #34	; 0x22
    959c:	75fb      	strb	r3, [r7, #23]
    break;
    959e:	e04c      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_LTK_REQ_REPL:
    cbackEvt = HCI_LE_LTK_REQ_REPL_CMD_CMPL_CBACK_EVT;
    95a0:	230c      	movs	r3, #12
    95a2:	75fb      	strb	r3, [r7, #23]
    break;
    95a4:	e049      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_LTK_REQ_NEG_REPL:
    cbackEvt = HCI_LE_LTK_REQ_NEG_REPL_CMD_CMPL_CBACK_EVT;
    95a6:	230d      	movs	r3, #13
    95a8:	75fb      	strb	r3, [r7, #23]
    break;
    95aa:	e046      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_RAND:
    cbackEvt = HCI_LE_RAND_CMD_CMPL_CBACK_EVT;
    95ac:	231c      	movs	r3, #28
    95ae:	75fb      	strb	r3, [r7, #23]
    cback = hciCb.secCback;
    95b0:	4b38      	ldr	r3, [pc, #224]	; (9694 <hciEvtProcessCmdCmpl+0x29c>)
    95b2:	68db      	ldr	r3, [r3, #12]
    95b4:	613b      	str	r3, [r7, #16]
    break;
    95b6:	e040      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_CHAN_MAP:
    cbackEvt = HCI_LE_READ_CHAN_MAP_CMD_CMPL_CBACK_EVT;
    95b8:	2308      	movs	r3, #8
    95ba:	75fb      	strb	r3, [r7, #23]
    break;
    95bc:	e03d      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_READ_RSSI:
    cbackEvt = HCI_READ_RSSI_CMD_CMPL_CBACK_EVT;
    95be:	2307      	movs	r3, #7
    95c0:	75fb      	strb	r3, [r7, #23]
    break;
    95c2:	e03a      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_READ_TX_PWR_LVL:
    cbackEvt = HCI_READ_TX_PWR_LVL_CMD_CMPL_CBACK_EVT;
    95c4:	2309      	movs	r3, #9
    95c6:	75fb      	strb	r3, [r7, #23]
    break;
    95c8:	e037      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_ADD_DEV_RES_LIST:
    cbackEvt = HCI_LE_ADD_DEV_TO_RES_LIST_CMD_CMPL_CBACK_EVT;
    95ca:	2315      	movs	r3, #21
    95cc:	75fb      	strb	r3, [r7, #23]
    break;
    95ce:	e034      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_REMOVE_DEV_RES_LIST:
    cbackEvt = HCI_LE_REM_DEV_FROM_RES_LIST_CMD_CMPL_CBACK_EVT;
    95d0:	2316      	movs	r3, #22
    95d2:	75fb      	strb	r3, [r7, #23]
    break;
    95d4:	e031      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_CLEAR_RES_LIST:
    cbackEvt = HCI_LE_CLEAR_RES_LIST_CMD_CMPL_CBACK_EVT;
    95d6:	2317      	movs	r3, #23
    95d8:	75fb      	strb	r3, [r7, #23]
    break;
    95da:	e02e      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_PEER_RES_ADDR:
    cbackEvt = HCI_LE_READ_PEER_RES_ADDR_CMD_CMPL_CBACK_EVT;
    95dc:	2318      	movs	r3, #24
    95de:	75fb      	strb	r3, [r7, #23]
    break;
    95e0:	e02b      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_LOCAL_RES_ADDR:
    cbackEvt = HCI_LE_READ_LOCAL_RES_ADDR_CMD_CMPL_CBACK_EVT;
    95e2:	2319      	movs	r3, #25
    95e4:	75fb      	strb	r3, [r7, #23]
    break;
    95e6:	e028      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_ADDR_RES_ENABLE:
    cbackEvt = HCI_LE_SET_ADDR_RES_ENABLE_CMD_CMPL_CBACK_EVT;
    95e8:	231a      	movs	r3, #26
    95ea:	75fb      	strb	r3, [r7, #23]
    break;
    95ec:	e025      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO:
    cbackEvt = HCI_WRITE_AUTH_PAYLOAD_TO_CMD_CMPL_CBACK_EVT;
    95ee:	2327      	movs	r3, #39	; 0x27
    95f0:	75fb      	strb	r3, [r7, #23]
    break;
    95f2:	e022      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_PHY:
    cbackEvt = HCI_LE_READ_PHY_CMD_CMPL_CBACK_EVT;
    95f4:	2329      	movs	r3, #41	; 0x29
    95f6:	75fb      	strb	r3, [r7, #23]
    break;
    95f8:	e01f      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_DEF_PHY:
    cbackEvt = HCI_LE_SET_DEF_PHY_CMD_CMPL_CBACK_EVT;
    95fa:	232a      	movs	r3, #42	; 0x2a
    95fc:	75fb      	strb	r3, [r7, #23]
    break;
    95fe:	e01c      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_SCAN_ENABLE:
    cbackEvt = HCI_LE_SCAN_ENABLE_CMPL_CBACK_EVT;
    9600:	2334      	movs	r3, #52	; 0x34
    9602:	75fb      	strb	r3, [r7, #23]
    break;
    9604:	e019      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_ADV_ENABLE:
    cbackEvt = HCI_LE_ADV_ENABLE_CMPL_CBACK_EVT;
    9606:	2335      	movs	r3, #53	; 0x35
    9608:	75fb      	strb	r3, [r7, #23]
    break;
    960a:	e016      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_EXT_SCAN_ENABLE:
    cbackEvt = HCI_LE_EXT_SCAN_ENABLE_CMPL_CBACK_EVT;
    960c:	2336      	movs	r3, #54	; 0x36
    960e:	75fb      	strb	r3, [r7, #23]
    break;
    9610:	e013      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_EXT_ADV_ENABLE:
    cbackEvt = HCI_LE_EXT_ADV_ENABLE_CMPL_CBACK_EVT;
    9612:	2337      	movs	r3, #55	; 0x37
    9614:	75fb      	strb	r3, [r7, #23]
    break;
    9616:	e010      	b.n	963a <hciEvtProcessCmdCmpl+0x242>
  
  case HCI_OPCODE_LE_SET_PER_ADV_ENABLE:
    cbackEvt = HCI_LE_PER_ADV_ENABLE_CMPL_CBACK_EVT;
    9618:	2338      	movs	r3, #56	; 0x38
    961a:	75fb      	strb	r3, [r7, #23]
    break;
    961c:	e00d      	b.n	963a <hciEvtProcessCmdCmpl+0x242>

  default:
    /* test for vendor specific command completion OGF. */
    if (HCI_OGF(opcode) == HCI_OGF_VENDOR_SPEC)
    961e:	89bb      	ldrh	r3, [r7, #12]
    9620:	0a9b      	lsrs	r3, r3, #10
    9622:	b29b      	uxth	r3, r3
    9624:	2b3f      	cmp	r3, #63	; 0x3f
    9626:	d107      	bne.n	9638 <hciEvtProcessCmdCmpl+0x240>
    {
      cbackEvt = hciCoreVsCmdCmplRcvd(opcode, p, len);
    9628:	78fa      	ldrb	r2, [r7, #3]
    962a:	89bb      	ldrh	r3, [r7, #12]
    962c:	6879      	ldr	r1, [r7, #4]
    962e:	4618      	mov	r0, r3
    9630:	f000 fcd0 	bl	9fd4 <hciCoreVsCmdCmplRcvd>
    9634:	4603      	mov	r3, r0
    9636:	75fb      	strb	r3, [r7, #23]
    }
    break;
    9638:	bf00      	nop
  }

  /* if callback is executed for this event */
  if (cbackEvt != 0)
    963a:	7dfb      	ldrb	r3, [r7, #23]
    963c:	2b00      	cmp	r3, #0
    963e:	d021      	beq.n	9684 <hciEvtProcessCmdCmpl+0x28c>
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
    9640:	7dfb      	ldrb	r3, [r7, #23]
    9642:	4a15      	ldr	r2, [pc, #84]	; (9698 <hciEvtProcessCmdCmpl+0x2a0>)
    9644:	5cd3      	ldrb	r3, [r2, r3]
    9646:	b29b      	uxth	r3, r3
    9648:	4618      	mov	r0, r3
    964a:	f001 fb59 	bl	ad00 <WsfBufAlloc>
    964e:	60b8      	str	r0, [r7, #8]
    9650:	68bb      	ldr	r3, [r7, #8]
    9652:	2b00      	cmp	r3, #0
    9654:	d016      	beq.n	9684 <hciEvtProcessCmdCmpl+0x28c>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
    9656:	68bb      	ldr	r3, [r7, #8]
    9658:	2200      	movs	r2, #0
    965a:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = cbackEvt;
    965c:	68bb      	ldr	r3, [r7, #8]
    965e:	7dfa      	ldrb	r2, [r7, #23]
    9660:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
    9662:	68bb      	ldr	r3, [r7, #8]
    9664:	2200      	movs	r2, #0
    9666:	70da      	strb	r2, [r3, #3]

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, p, len);
    9668:	7dfb      	ldrb	r3, [r7, #23]
    966a:	4a0c      	ldr	r2, [pc, #48]	; (969c <hciEvtProcessCmdCmpl+0x2a4>)
    966c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9670:	78fa      	ldrb	r2, [r7, #3]
    9672:	6879      	ldr	r1, [r7, #4]
    9674:	68b8      	ldr	r0, [r7, #8]
    9676:	4798      	blx	r3

      /* execute callback */
      (*cback)(pMsg);
    9678:	693b      	ldr	r3, [r7, #16]
    967a:	68b8      	ldr	r0, [r7, #8]
    967c:	4798      	blx	r3

      /* free buffer */
      WsfBufFree(pMsg);
    967e:	68b8      	ldr	r0, [r7, #8]
    9680:	f001 fb7e 	bl	ad80 <WsfBufFree>
    }
  }

  hciCmdRecvCmpl(numPkts);
    9684:	7bfb      	ldrb	r3, [r7, #15]
    9686:	4618      	mov	r0, r3
    9688:	f7fc fea8 	bl	63dc <hciCmdRecvCmpl>
}
    968c:	bf00      	nop
    968e:	3718      	adds	r7, #24
    9690:	46bd      	mov	sp, r7
    9692:	bd80      	pop	{r7, pc}
    9694:	100028f4 	.word	0x100028f4
    9698:	000115a0 	.word	0x000115a0
    969c:	000114bc 	.word	0x000114bc

000096a0 <hciEvtProcessMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessMsg(uint8_t *pEvt)
{
    96a0:	b580      	push	{r7, lr}
    96a2:	b088      	sub	sp, #32
    96a4:	af00      	add	r7, sp, #0
    96a6:	6078      	str	r0, [r7, #4]
  uint8_t   evt;
  uint8_t   subEvt;
  uint8_t   len;
  uint8_t   cbackEvt = 0;
    96a8:	2300      	movs	r3, #0
    96aa:	77fb      	strb	r3, [r7, #31]
  hciEvt_t  *pMsg;
  uint16_t  handle;
  hciEvtCback_t cback = hciCb.evtCback;
    96ac:	4ba1      	ldr	r3, [pc, #644]	; (9934 <hciEvtProcessMsg+0x294>)
    96ae:	689b      	ldr	r3, [r3, #8]
    96b0:	61bb      	str	r3, [r7, #24]

  /* parse HCI event header */
  BSTREAM_TO_UINT8(evt, pEvt);
    96b2:	687b      	ldr	r3, [r7, #4]
    96b4:	1c5a      	adds	r2, r3, #1
    96b6:	607a      	str	r2, [r7, #4]
    96b8:	781b      	ldrb	r3, [r3, #0]
    96ba:	75fb      	strb	r3, [r7, #23]
  BSTREAM_TO_UINT8(len, pEvt);
    96bc:	687b      	ldr	r3, [r7, #4]
    96be:	1c5a      	adds	r2, r3, #1
    96c0:	607a      	str	r2, [r7, #4]
    96c2:	781b      	ldrb	r3, [r3, #0]
    96c4:	75bb      	strb	r3, [r7, #22]

  /* convert hci event code to internal event code and perform special handling */
  switch (evt)
    96c6:	7dfb      	ldrb	r3, [r7, #23]
    96c8:	2b10      	cmp	r3, #16
    96ca:	f000 8121 	beq.w	9910 <hciEvtProcessMsg+0x270>
    96ce:	2b10      	cmp	r3, #16
    96d0:	dc10      	bgt.n	96f4 <hciEvtProcessMsg+0x54>
    96d2:	2b0c      	cmp	r3, #12
    96d4:	f000 8103 	beq.w	98de <hciEvtProcessMsg+0x23e>
    96d8:	2b0c      	cmp	r3, #12
    96da:	dc06      	bgt.n	96ea <hciEvtProcessMsg+0x4a>
    96dc:	2b05      	cmp	r3, #5
    96de:	f000 80ec 	beq.w	98ba <hciEvtProcessMsg+0x21a>
    96e2:	2b08      	cmp	r3, #8
    96e4:	f000 80f2 	beq.w	98cc <hciEvtProcessMsg+0x22c>
      hciEvtStats.numVendorSpecEvt++;
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
      break;

    default:
      break;
    96e8:	e131      	b.n	994e <hciEvtProcessMsg+0x2ae>
  switch (evt)
    96ea:	2b0e      	cmp	r3, #14
    96ec:	d020      	beq.n	9730 <hciEvtProcessMsg+0x90>
    96ee:	2b0f      	cmp	r3, #15
    96f0:	d014      	beq.n	971c <hciEvtProcessMsg+0x7c>
      break;
    96f2:	e12c      	b.n	994e <hciEvtProcessMsg+0x2ae>
  switch (evt)
    96f4:	2b30      	cmp	r3, #48	; 0x30
    96f6:	f000 80fb 	beq.w	98f0 <hciEvtProcessMsg+0x250>
    96fa:	2b30      	cmp	r3, #48	; 0x30
    96fc:	dc05      	bgt.n	970a <hciEvtProcessMsg+0x6a>
    96fe:	2b13      	cmp	r3, #19
    9700:	d022      	beq.n	9748 <hciEvtProcessMsg+0xa8>
    9702:	2b1a      	cmp	r3, #26
    9704:	f000 80fd 	beq.w	9902 <hciEvtProcessMsg+0x262>
      break;
    9708:	e121      	b.n	994e <hciEvtProcessMsg+0x2ae>
  switch (evt)
    970a:	2b57      	cmp	r3, #87	; 0x57
    970c:	f000 8109 	beq.w	9922 <hciEvtProcessMsg+0x282>
    9710:	2bff      	cmp	r3, #255	; 0xff
    9712:	f000 8113 	beq.w	993c <hciEvtProcessMsg+0x29c>
    9716:	2b3e      	cmp	r3, #62	; 0x3e
    9718:	d020      	beq.n	975c <hciEvtProcessMsg+0xbc>
      break;
    971a:	e118      	b.n	994e <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numCmdStatusEvt++;
    971c:	4b86      	ldr	r3, [pc, #536]	; (9938 <hciEvtProcessMsg+0x298>)
    971e:	891b      	ldrh	r3, [r3, #8]
    9720:	3301      	adds	r3, #1
    9722:	b29a      	uxth	r2, r3
    9724:	4b84      	ldr	r3, [pc, #528]	; (9938 <hciEvtProcessMsg+0x298>)
    9726:	811a      	strh	r2, [r3, #8]
      hciEvtProcessCmdStatus(pEvt);
    9728:	6878      	ldr	r0, [r7, #4]
    972a:	f7ff fe37 	bl	939c <hciEvtProcessCmdStatus>
      break;
    972e:	e10e      	b.n	994e <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numCmdCmplEvt++;
    9730:	4b81      	ldr	r3, [pc, #516]	; (9938 <hciEvtProcessMsg+0x298>)
    9732:	88db      	ldrh	r3, [r3, #6]
    9734:	3301      	adds	r3, #1
    9736:	b29a      	uxth	r2, r3
    9738:	4b7f      	ldr	r3, [pc, #508]	; (9938 <hciEvtProcessMsg+0x298>)
    973a:	80da      	strh	r2, [r3, #6]
      hciEvtProcessCmdCmpl(pEvt, len);
    973c:	7dbb      	ldrb	r3, [r7, #22]
    973e:	4619      	mov	r1, r3
    9740:	6878      	ldr	r0, [r7, #4]
    9742:	f7ff fe59 	bl	93f8 <hciEvtProcessCmdCmpl>
      break;
    9746:	e102      	b.n	994e <hciEvtProcessMsg+0x2ae>
      hciCoreNumCmplPkts(pEvt);
    9748:	6878      	ldr	r0, [r7, #4]
    974a:	f7fe f9ef 	bl	7b2c <hciCoreNumCmplPkts>
      hciEvtStats.numCmplPktsEvt++;
    974e:	4b7a      	ldr	r3, [pc, #488]	; (9938 <hciEvtProcessMsg+0x298>)
    9750:	899b      	ldrh	r3, [r3, #12]
    9752:	3301      	adds	r3, #1
    9754:	b29a      	uxth	r2, r3
    9756:	4b78      	ldr	r3, [pc, #480]	; (9938 <hciEvtProcessMsg+0x298>)
    9758:	819a      	strh	r2, [r3, #12]
      break;
    975a:	e0f8      	b.n	994e <hciEvtProcessMsg+0x2ae>
      BSTREAM_TO_UINT8(subEvt, pEvt);
    975c:	687b      	ldr	r3, [r7, #4]
    975e:	1c5a      	adds	r2, r3, #1
    9760:	607a      	str	r2, [r7, #4]
    9762:	781b      	ldrb	r3, [r3, #0]
    9764:	757b      	strb	r3, [r7, #21]
      hciEvtStats.numLeMetaEvt++;
    9766:	4b74      	ldr	r3, [pc, #464]	; (9938 <hciEvtProcessMsg+0x298>)
    9768:	8a5b      	ldrh	r3, [r3, #18]
    976a:	3301      	adds	r3, #1
    976c:	b29a      	uxth	r2, r3
    976e:	4b72      	ldr	r3, [pc, #456]	; (9938 <hciEvtProcessMsg+0x298>)
    9770:	825a      	strh	r2, [r3, #18]
      switch (subEvt)
    9772:	7d7b      	ldrb	r3, [r7, #21]
    9774:	3b01      	subs	r3, #1
    9776:	2b12      	cmp	r3, #18
    9778:	f200 809d 	bhi.w	98b6 <hciEvtProcessMsg+0x216>
    977c:	a201      	add	r2, pc, #4	; (adr r2, 9784 <hciEvtProcessMsg+0xe4>)
    977e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9782:	bf00      	nop
    9784:	000097d1 	.word	0x000097d1
    9788:	000097ff 	.word	0x000097ff
    978c:	0000980b 	.word	0x0000980b
    9790:	00009811 	.word	0x00009811
    9794:	00009817 	.word	0x00009817
    9798:	00009857 	.word	0x00009857
    979c:	0000985d 	.word	0x0000985d
    97a0:	00009863 	.word	0x00009863
    97a4:	0000986f 	.word	0x0000986f
    97a8:	0000981d 	.word	0x0000981d
    97ac:	0000984b 	.word	0x0000984b
    97b0:	0000987b 	.word	0x0000987b
    97b4:	00009881 	.word	0x00009881
    97b8:	0000989f 	.word	0x0000989f
    97bc:	000098a5 	.word	0x000098a5
    97c0:	000098b1 	.word	0x000098b1
    97c4:	0000988d 	.word	0x0000988d
    97c8:	00009893 	.word	0x00009893
    97cc:	00009899 	.word	0x00009899
          if (*pEvt == HCI_SUCCESS)
    97d0:	687b      	ldr	r3, [r7, #4]
    97d2:	781b      	ldrb	r3, [r3, #0]
    97d4:	2b00      	cmp	r3, #0
    97d6:	d10f      	bne.n	97f8 <hciEvtProcessMsg+0x158>
            BYTES_TO_UINT16(handle, (pEvt + 1));
    97d8:	687b      	ldr	r3, [r7, #4]
    97da:	3301      	adds	r3, #1
    97dc:	781b      	ldrb	r3, [r3, #0]
    97de:	b29a      	uxth	r2, r3
    97e0:	687b      	ldr	r3, [r7, #4]
    97e2:	3302      	adds	r3, #2
    97e4:	781b      	ldrb	r3, [r3, #0]
    97e6:	b29b      	uxth	r3, r3
    97e8:	021b      	lsls	r3, r3, #8
    97ea:	b29b      	uxth	r3, r3
    97ec:	4413      	add	r3, r2
    97ee:	827b      	strh	r3, [r7, #18]
            hciCoreConnOpen(handle);
    97f0:	8a7b      	ldrh	r3, [r7, #18]
    97f2:	4618      	mov	r0, r3
    97f4:	f7fd fe10 	bl	7418 <hciCoreConnOpen>
          cbackEvt = HCI_LE_CONN_CMPL_CBACK_EVT;
    97f8:	2301      	movs	r3, #1
    97fa:	77fb      	strb	r3, [r7, #31]
          break;
    97fc:	e05c      	b.n	98b8 <hciEvtProcessMsg+0x218>
          hciEvtProcessLeAdvReport(pEvt, len);
    97fe:	7dbb      	ldrb	r3, [r7, #22]
    9800:	4619      	mov	r1, r3
    9802:	6878      	ldr	r0, [r7, #4]
    9804:	f7ff fa76 	bl	8cf4 <hciEvtProcessLeAdvReport>
          break;
    9808:	e056      	b.n	98b8 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_CONN_UPDATE_CMPL_CBACK_EVT;
    980a:	2304      	movs	r3, #4
    980c:	77fb      	strb	r3, [r7, #31]
          break;
    980e:	e053      	b.n	98b8 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_READ_REMOTE_FEAT_CMPL_CBACK_EVT;
    9810:	230b      	movs	r3, #11
    9812:	77fb      	strb	r3, [r7, #31]
          break;
    9814:	e050      	b.n	98b8 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_LTK_REQ_CBACK_EVT;
    9816:	2310      	movs	r3, #16
    9818:	77fb      	strb	r3, [r7, #31]
          break;
    981a:	e04d      	b.n	98b8 <hciEvtProcessMsg+0x218>
          if (*pEvt == HCI_SUCCESS)
    981c:	687b      	ldr	r3, [r7, #4]
    981e:	781b      	ldrb	r3, [r3, #0]
    9820:	2b00      	cmp	r3, #0
    9822:	d10f      	bne.n	9844 <hciEvtProcessMsg+0x1a4>
            BYTES_TO_UINT16(handle, (pEvt + 1));
    9824:	687b      	ldr	r3, [r7, #4]
    9826:	3301      	adds	r3, #1
    9828:	781b      	ldrb	r3, [r3, #0]
    982a:	b29a      	uxth	r2, r3
    982c:	687b      	ldr	r3, [r7, #4]
    982e:	3302      	adds	r3, #2
    9830:	781b      	ldrb	r3, [r3, #0]
    9832:	b29b      	uxth	r3, r3
    9834:	021b      	lsls	r3, r3, #8
    9836:	b29b      	uxth	r3, r3
    9838:	4413      	add	r3, r2
    983a:	827b      	strh	r3, [r7, #18]
            hciCoreConnOpen(handle);
    983c:	8a7b      	ldrh	r3, [r7, #18]
    983e:	4618      	mov	r0, r3
    9840:	f7fd fdea 	bl	7418 <hciCoreConnOpen>
          cbackEvt = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
    9844:	2302      	movs	r3, #2
    9846:	77fb      	strb	r3, [r7, #31]
          break;
    9848:	e036      	b.n	98b8 <hciEvtProcessMsg+0x218>
          hciEvtProcessLeDirectAdvReport(pEvt, len);
    984a:	7dbb      	ldrb	r3, [r7, #22]
    984c:	4619      	mov	r1, r3
    984e:	6878      	ldr	r0, [r7, #4]
    9850:	f7ff fd2c 	bl	92ac <hciEvtProcessLeDirectAdvReport>
          break;
    9854:	e030      	b.n	98b8 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_REM_CONN_PARAM_REQ_CBACK_EVT;
    9856:	2323      	movs	r3, #35	; 0x23
    9858:	77fb      	strb	r3, [r7, #31]
          break;
    985a:	e02d      	b.n	98b8 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_DATA_LEN_CHANGE_CBACK_EVT;
    985c:	2324      	movs	r3, #36	; 0x24
    985e:	77fb      	strb	r3, [r7, #31]
          break;
    9860:	e02a      	b.n	98b8 <hciEvtProcessMsg+0x218>
          cback = hciCb.secCback;
    9862:	4b34      	ldr	r3, [pc, #208]	; (9934 <hciEvtProcessMsg+0x294>)
    9864:	68db      	ldr	r3, [r3, #12]
    9866:	61bb      	str	r3, [r7, #24]
          cbackEvt = HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT;
    9868:	2325      	movs	r3, #37	; 0x25
    986a:	77fb      	strb	r3, [r7, #31]
          break;
    986c:	e024      	b.n	98b8 <hciEvtProcessMsg+0x218>
          cback = hciCb.secCback;
    986e:	4b31      	ldr	r3, [pc, #196]	; (9934 <hciEvtProcessMsg+0x294>)
    9870:	68db      	ldr	r3, [r3, #12]
    9872:	61bb      	str	r3, [r7, #24]
          cbackEvt = HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT;
    9874:	2326      	movs	r3, #38	; 0x26
    9876:	77fb      	strb	r3, [r7, #31]
          break;
    9878:	e01e      	b.n	98b8 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_PHY_UPDATE_CMPL_CBACK_EVT;
    987a:	232b      	movs	r3, #43	; 0x2b
    987c:	77fb      	strb	r3, [r7, #31]
          break;
    987e:	e01b      	b.n	98b8 <hciEvtProcessMsg+0x218>
          hciEvtProcessLeExtAdvReport(pEvt, len);
    9880:	7dbb      	ldrb	r3, [r7, #22]
    9882:	4619      	mov	r1, r3
    9884:	6878      	ldr	r0, [r7, #4]
    9886:	f7ff fabf 	bl	8e08 <hciEvtProcessLeExtAdvReport>
          break;
    988a:	e015      	b.n	98b8 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_SCAN_TIMEOUT_CBACK_EVT;
    988c:	232d      	movs	r3, #45	; 0x2d
    988e:	77fb      	strb	r3, [r7, #31]
          break;
    9890:	e012      	b.n	98b8 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_ADV_SET_TERM_CBACK_EVT;
    9892:	232e      	movs	r3, #46	; 0x2e
    9894:	77fb      	strb	r3, [r7, #31]
          break;
    9896:	e00f      	b.n	98b8 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_SCAN_REQ_RCVD_CBACK_EVT;
    9898:	232f      	movs	r3, #47	; 0x2f
    989a:	77fb      	strb	r3, [r7, #31]
          break;
    989c:	e00c      	b.n	98b8 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_PER_ADV_SYNC_EST_CBACK_EVT;
    989e:	2330      	movs	r3, #48	; 0x30
    98a0:	77fb      	strb	r3, [r7, #31]
          break;
    98a2:	e009      	b.n	98b8 <hciEvtProcessMsg+0x218>
          hciEvtProcessLePerAdvReport(pEvt, len);
    98a4:	7dbb      	ldrb	r3, [r7, #22]
    98a6:	4619      	mov	r1, r3
    98a8:	6878      	ldr	r0, [r7, #4]
    98aa:	f7ff fc51 	bl	9150 <hciEvtProcessLePerAdvReport>
          break;
    98ae:	e003      	b.n	98b8 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_PER_ADV_SYNC_LOST_CBACK_EVT;
    98b0:	2332      	movs	r3, #50	; 0x32
    98b2:	77fb      	strb	r3, [r7, #31]
          break;
    98b4:	e000      	b.n	98b8 <hciEvtProcessMsg+0x218>
          break;
    98b6:	bf00      	nop
      break;
    98b8:	e049      	b.n	994e <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numDiscCmplEvt++;
    98ba:	4b1f      	ldr	r3, [pc, #124]	; (9938 <hciEvtProcessMsg+0x298>)
    98bc:	881b      	ldrh	r3, [r3, #0]
    98be:	3301      	adds	r3, #1
    98c0:	b29a      	uxth	r2, r3
    98c2:	4b1d      	ldr	r3, [pc, #116]	; (9938 <hciEvtProcessMsg+0x298>)
    98c4:	801a      	strh	r2, [r3, #0]
      cbackEvt = HCI_DISCONNECT_CMPL_CBACK_EVT;
    98c6:	2303      	movs	r3, #3
    98c8:	77fb      	strb	r3, [r7, #31]
      break;
    98ca:	e040      	b.n	994e <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numEncChangeEvt++;
    98cc:	4b1a      	ldr	r3, [pc, #104]	; (9938 <hciEvtProcessMsg+0x298>)
    98ce:	885b      	ldrh	r3, [r3, #2]
    98d0:	3301      	adds	r3, #1
    98d2:	b29a      	uxth	r2, r3
    98d4:	4b18      	ldr	r3, [pc, #96]	; (9938 <hciEvtProcessMsg+0x298>)
    98d6:	805a      	strh	r2, [r3, #2]
      cbackEvt = HCI_ENC_CHANGE_CBACK_EVT;
    98d8:	230f      	movs	r3, #15
    98da:	77fb      	strb	r3, [r7, #31]
      break;
    98dc:	e037      	b.n	994e <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numReadRemoteVerInfoCmpEvt++;
    98de:	4b16      	ldr	r3, [pc, #88]	; (9938 <hciEvtProcessMsg+0x298>)
    98e0:	889b      	ldrh	r3, [r3, #4]
    98e2:	3301      	adds	r3, #1
    98e4:	b29a      	uxth	r2, r3
    98e6:	4b14      	ldr	r3, [pc, #80]	; (9938 <hciEvtProcessMsg+0x298>)
    98e8:	809a      	strh	r2, [r3, #4]
      cbackEvt = HCI_READ_REMOTE_VER_INFO_CMPL_CBACK_EVT;
    98ea:	230a      	movs	r3, #10
    98ec:	77fb      	strb	r3, [r7, #31]
      break;
    98ee:	e02e      	b.n	994e <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numEncKeyRefreshCmplEvt++;
    98f0:	4b11      	ldr	r3, [pc, #68]	; (9938 <hciEvtProcessMsg+0x298>)
    98f2:	8a1b      	ldrh	r3, [r3, #16]
    98f4:	3301      	adds	r3, #1
    98f6:	b29a      	uxth	r2, r3
    98f8:	4b0f      	ldr	r3, [pc, #60]	; (9938 <hciEvtProcessMsg+0x298>)
    98fa:	821a      	strh	r2, [r3, #16]
      cbackEvt = HCI_ENC_KEY_REFRESH_CMPL_CBACK_EVT;
    98fc:	230e      	movs	r3, #14
    98fe:	77fb      	strb	r3, [r7, #31]
      break;
    9900:	e025      	b.n	994e <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numDataBufOverflowEvt++;
    9902:	4b0d      	ldr	r3, [pc, #52]	; (9938 <hciEvtProcessMsg+0x298>)
    9904:	89db      	ldrh	r3, [r3, #14]
    9906:	3301      	adds	r3, #1
    9908:	b29a      	uxth	r2, r3
    990a:	4b0b      	ldr	r3, [pc, #44]	; (9938 <hciEvtProcessMsg+0x298>)
    990c:	81da      	strh	r2, [r3, #14]
      break;
    990e:	e01e      	b.n	994e <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numHwErrorEvt++;
    9910:	4b09      	ldr	r3, [pc, #36]	; (9938 <hciEvtProcessMsg+0x298>)
    9912:	895b      	ldrh	r3, [r3, #10]
    9914:	3301      	adds	r3, #1
    9916:	b29a      	uxth	r2, r3
    9918:	4b07      	ldr	r3, [pc, #28]	; (9938 <hciEvtProcessMsg+0x298>)
    991a:	815a      	strh	r2, [r3, #10]
      cbackEvt = HCI_HW_ERROR_CBACK_EVT;
    991c:	2314      	movs	r3, #20
    991e:	77fb      	strb	r3, [r7, #31]
      break;
    9920:	e015      	b.n	994e <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numAuthToEvt++;
    9922:	4b05      	ldr	r3, [pc, #20]	; (9938 <hciEvtProcessMsg+0x298>)
    9924:	8adb      	ldrh	r3, [r3, #22]
    9926:	3301      	adds	r3, #1
    9928:	b29a      	uxth	r2, r3
    992a:	4b03      	ldr	r3, [pc, #12]	; (9938 <hciEvtProcessMsg+0x298>)
    992c:	82da      	strh	r2, [r3, #22]
      cbackEvt = HCI_AUTH_PAYLOAD_TO_EXPIRED_CBACK_EVT;
    992e:	2328      	movs	r3, #40	; 0x28
    9930:	77fb      	strb	r3, [r7, #31]
      break;
    9932:	e00c      	b.n	994e <hciEvtProcessMsg+0x2ae>
    9934:	100028f4 	.word	0x100028f4
    9938:	10001a90 	.word	0x10001a90
      hciEvtStats.numVendorSpecEvt++;
    993c:	4b22      	ldr	r3, [pc, #136]	; (99c8 <hciEvtProcessMsg+0x328>)
    993e:	8a9b      	ldrh	r3, [r3, #20]
    9940:	3301      	adds	r3, #1
    9942:	b29a      	uxth	r2, r3
    9944:	4b20      	ldr	r3, [pc, #128]	; (99c8 <hciEvtProcessMsg+0x328>)
    9946:	829a      	strh	r2, [r3, #20]
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
    9948:	2313      	movs	r3, #19
    994a:	77fb      	strb	r3, [r7, #31]
      break;
    994c:	bf00      	nop
  }

  /* if callback is executed for this event */
  if (cbackEvt != 0)
    994e:	7ffb      	ldrb	r3, [r7, #31]
    9950:	2b00      	cmp	r3, #0
    9952:	d034      	beq.n	99be <hciEvtProcessMsg+0x31e>
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
    9954:	7ffb      	ldrb	r3, [r7, #31]
    9956:	4a1d      	ldr	r2, [pc, #116]	; (99cc <hciEvtProcessMsg+0x32c>)
    9958:	5cd3      	ldrb	r3, [r2, r3]
    995a:	b29b      	uxth	r3, r3
    995c:	4618      	mov	r0, r3
    995e:	f001 f9cf 	bl	ad00 <WsfBufAlloc>
    9962:	60f8      	str	r0, [r7, #12]
    9964:	68fb      	ldr	r3, [r7, #12]
    9966:	2b00      	cmp	r3, #0
    9968:	d016      	beq.n	9998 <hciEvtProcessMsg+0x2f8>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
    996a:	68fb      	ldr	r3, [r7, #12]
    996c:	2200      	movs	r2, #0
    996e:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = cbackEvt;
    9970:	68fb      	ldr	r3, [r7, #12]
    9972:	7ffa      	ldrb	r2, [r7, #31]
    9974:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
    9976:	68fb      	ldr	r3, [r7, #12]
    9978:	2200      	movs	r2, #0
    997a:	70da      	strb	r2, [r3, #3]

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
    997c:	7ffb      	ldrb	r3, [r7, #31]
    997e:	4a14      	ldr	r2, [pc, #80]	; (99d0 <hciEvtProcessMsg+0x330>)
    9980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9984:	7dba      	ldrb	r2, [r7, #22]
    9986:	6879      	ldr	r1, [r7, #4]
    9988:	68f8      	ldr	r0, [r7, #12]
    998a:	4798      	blx	r3

      /* execute callback */
      (*cback)(pMsg);
    998c:	69bb      	ldr	r3, [r7, #24]
    998e:	68f8      	ldr	r0, [r7, #12]
    9990:	4798      	blx	r3

      /* free buffer */
      WsfBufFree(pMsg);
    9992:	68f8      	ldr	r0, [r7, #12]
    9994:	f001 f9f4 	bl	ad80 <WsfBufFree>
    }

    /* execute core procedure for connection close after callback */
    if (cbackEvt == HCI_DISCONNECT_CMPL_CBACK_EVT)
    9998:	7ffb      	ldrb	r3, [r7, #31]
    999a:	2b03      	cmp	r3, #3
    999c:	d10f      	bne.n	99be <hciEvtProcessMsg+0x31e>
    {
      BYTES_TO_UINT16(handle, (pEvt + 1));
    999e:	687b      	ldr	r3, [r7, #4]
    99a0:	3301      	adds	r3, #1
    99a2:	781b      	ldrb	r3, [r3, #0]
    99a4:	b29a      	uxth	r2, r3
    99a6:	687b      	ldr	r3, [r7, #4]
    99a8:	3302      	adds	r3, #2
    99aa:	781b      	ldrb	r3, [r3, #0]
    99ac:	b29b      	uxth	r3, r3
    99ae:	021b      	lsls	r3, r3, #8
    99b0:	b29b      	uxth	r3, r3
    99b2:	4413      	add	r3, r2
    99b4:	827b      	strh	r3, [r7, #18]
      hciCoreConnClose(handle);
    99b6:	8a7b      	ldrh	r3, [r7, #18]
    99b8:	4618      	mov	r0, r3
    99ba:	f7fd fd3a 	bl	7432 <hciCoreConnClose>
    }
  }
}
    99be:	bf00      	nop
    99c0:	3720      	adds	r7, #32
    99c2:	46bd      	mov	sp, r7
    99c4:	bd80      	pop	{r7, pc}
    99c6:	bf00      	nop
    99c8:	10001a90 	.word	0x10001a90
    99cc:	000115a0 	.word	0x000115a0
    99d0:	000114bc 	.word	0x000114bc

000099d4 <hciTrSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendAclData(void *pContext, uint8_t *pData)
{
    99d4:	b580      	push	{r7, lr}
    99d6:	b084      	sub	sp, #16
    99d8:	af00      	add	r7, sp, #0
    99da:	6078      	str	r0, [r7, #4]
    99dc:	6039      	str	r1, [r7, #0]
  uint16_t   len;

  /* get 16-bit length */
  BYTES_TO_UINT16(len, &pData[2]);
    99de:	683b      	ldr	r3, [r7, #0]
    99e0:	3302      	adds	r3, #2
    99e2:	781b      	ldrb	r3, [r3, #0]
    99e4:	b29a      	uxth	r2, r3
    99e6:	683b      	ldr	r3, [r7, #0]
    99e8:	3303      	adds	r3, #3
    99ea:	781b      	ldrb	r3, [r3, #0]
    99ec:	b29b      	uxth	r3, r3
    99ee:	021b      	lsls	r3, r3, #8
    99f0:	b29b      	uxth	r3, r3
    99f2:	4413      	add	r3, r2
    99f4:	81fb      	strh	r3, [r7, #14]
  len += HCI_ACL_HDR_LEN;
    99f6:	89fb      	ldrh	r3, [r7, #14]
    99f8:	3304      	adds	r3, #4
    99fa:	81fb      	strh	r3, [r7, #14]

  /* dump event for protocol analysis */
  HCI_PDUMP_TX_ACL(len, pData);
    99fc:	89fb      	ldrh	r3, [r7, #14]
    99fe:	683a      	ldr	r2, [r7, #0]
    9a00:	4619      	mov	r1, r3
    9a02:	2002      	movs	r0, #2
    9a04:	f000 fc5e 	bl	a2c4 <WsfPacketTrace>

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_ACL_TYPE, len, pData) == len)
    9a08:	89fb      	ldrh	r3, [r7, #14]
    9a0a:	683a      	ldr	r2, [r7, #0]
    9a0c:	4619      	mov	r1, r3
    9a0e:	2002      	movs	r0, #2
    9a10:	f002 fd04 	bl	c41c <hciDrvWrite>
    9a14:	4603      	mov	r3, r0
    9a16:	461a      	mov	r2, r3
    9a18:	89fb      	ldrh	r3, [r7, #14]
    9a1a:	4293      	cmp	r3, r2
    9a1c:	d103      	bne.n	9a26 <hciTrSendAclData+0x52>
  {
    /* free buffer */
    hciCoreTxAclComplete(pContext, pData);
    9a1e:	6839      	ldr	r1, [r7, #0]
    9a20:	6878      	ldr	r0, [r7, #4]
    9a22:	f7fd fe5f 	bl	76e4 <hciCoreTxAclComplete>
  }
}
    9a26:	bf00      	nop
    9a28:	3710      	adds	r7, #16
    9a2a:	46bd      	mov	sp, r7
    9a2c:	bd80      	pop	{r7, pc}

00009a2e <hciTrSendCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendCmd(uint8_t *pData)
{
    9a2e:	b580      	push	{r7, lr}
    9a30:	b084      	sub	sp, #16
    9a32:	af00      	add	r7, sp, #0
    9a34:	6078      	str	r0, [r7, #4]
  uint8_t   len;

  /* get length */
  len = pData[2] + HCI_CMD_HDR_LEN;
    9a36:	687b      	ldr	r3, [r7, #4]
    9a38:	3302      	adds	r3, #2
    9a3a:	781b      	ldrb	r3, [r3, #0]
    9a3c:	3303      	adds	r3, #3
    9a3e:	73fb      	strb	r3, [r7, #15]

  /* dump event for protocol analysis */
  HCI_PDUMP_CMD(len, pData);
    9a40:	7bfb      	ldrb	r3, [r7, #15]
    9a42:	687a      	ldr	r2, [r7, #4]
    9a44:	4619      	mov	r1, r3
    9a46:	2001      	movs	r0, #1
    9a48:	f000 fc3c 	bl	a2c4 <WsfPacketTrace>

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_CMD_TYPE, len, pData) == len)
    9a4c:	7bfb      	ldrb	r3, [r7, #15]
    9a4e:	b29b      	uxth	r3, r3
    9a50:	687a      	ldr	r2, [r7, #4]
    9a52:	4619      	mov	r1, r3
    9a54:	2001      	movs	r0, #1
    9a56:	f002 fce1 	bl	c41c <hciDrvWrite>
    9a5a:	4603      	mov	r3, r0
    9a5c:	461a      	mov	r2, r3
    9a5e:	7bfb      	ldrb	r3, [r7, #15]
    9a60:	b29b      	uxth	r3, r3
    9a62:	429a      	cmp	r2, r3
    9a64:	d102      	bne.n	9a6c <hciTrSendCmd+0x3e>
  {
    /* free buffer */
    WsfMsgFree(pData);
    9a66:	6878      	ldr	r0, [r7, #4]
    9a68:	f001 f9f0 	bl	ae4c <WsfMsgFree>
  }
}
    9a6c:	bf00      	nop
    9a6e:	3710      	adds	r7, #16
    9a70:	46bd      	mov	sp, r7
    9a72:	bd80      	pop	{r7, pc}

00009a74 <hciTrSerialRxIncoming>:
 *
 *  \return The number of bytes consumed.
 */
/*************************************************************************************************/
uint8_t hciTrSerialRxIncoming(uint8_t *pBuf, uint8_t len)
{
    9a74:	b580      	push	{r7, lr}
    9a76:	b084      	sub	sp, #16
    9a78:	af00      	add	r7, sp, #0
    9a7a:	6078      	str	r0, [r7, #4]
    9a7c:	460b      	mov	r3, r1
    9a7e:	70fb      	strb	r3, [r7, #3]
  static uint8_t    *pPktRx;
  static uint8_t    *pDataRx;

  uint8_t dataByte, consumed_bytes;

  consumed_bytes = 0;
    9a80:	2300      	movs	r3, #0
    9a82:	73fb      	strb	r3, [r7, #15]
  /* loop until all bytes of incoming buffer are handled */
  while (len)
    9a84:	e0e9      	b.n	9c5a <hciTrSerialRxIncoming+0x1e6>
  {
    /* read single byte from incoming buffer and advance to next byte */
    dataByte = *pBuf;
    9a86:	687b      	ldr	r3, [r7, #4]
    9a88:	781b      	ldrb	r3, [r3, #0]
    9a8a:	72bb      	strb	r3, [r7, #10]
 
    /* --- Idle State --- */
    if (stateRx == HCI_RX_STATE_IDLE)
    9a8c:	4b77      	ldr	r3, [pc, #476]	; (9c6c <hciTrSerialRxIncoming+0x1f8>)
    9a8e:	781b      	ldrb	r3, [r3, #0]
    9a90:	2b00      	cmp	r3, #0
    9a92:	d115      	bne.n	9ac0 <hciTrSerialRxIncoming+0x4c>
    {
      /* save the packet type */
      pktIndRx = dataByte;
    9a94:	4a76      	ldr	r2, [pc, #472]	; (9c70 <hciTrSerialRxIncoming+0x1fc>)
    9a96:	7abb      	ldrb	r3, [r7, #10]
    9a98:	7013      	strb	r3, [r2, #0]
      iRx      = 0;
    9a9a:	4b76      	ldr	r3, [pc, #472]	; (9c74 <hciTrSerialRxIncoming+0x200>)
    9a9c:	2200      	movs	r2, #0
    9a9e:	801a      	strh	r2, [r3, #0]
      stateRx  = HCI_RX_STATE_HEADER;
    9aa0:	4b72      	ldr	r3, [pc, #456]	; (9c6c <hciTrSerialRxIncoming+0x1f8>)
    9aa2:	2201      	movs	r2, #1
    9aa4:	701a      	strb	r2, [r3, #0]
      g_bHCIReceivingPacket = TRUE;
    9aa6:	4b74      	ldr	r3, [pc, #464]	; (9c78 <hciTrSerialRxIncoming+0x204>)
    9aa8:	2201      	movs	r2, #1
    9aaa:	701a      	strb	r2, [r3, #0]
      pBuf++;
    9aac:	687b      	ldr	r3, [r7, #4]
    9aae:	3301      	adds	r3, #1
    9ab0:	607b      	str	r3, [r7, #4]
      consumed_bytes++;
    9ab2:	7bfb      	ldrb	r3, [r7, #15]
    9ab4:	3301      	adds	r3, #1
    9ab6:	73fb      	strb	r3, [r7, #15]
      len--;
    9ab8:	78fb      	ldrb	r3, [r7, #3]
    9aba:	3b01      	subs	r3, #1
    9abc:	70fb      	strb	r3, [r7, #3]
    9abe:	e0b6      	b.n	9c2e <hciTrSerialRxIncoming+0x1ba>
    }

    /* --- Header State --- */
    else if (stateRx == HCI_RX_STATE_HEADER)
    9ac0:	4b6a      	ldr	r3, [pc, #424]	; (9c6c <hciTrSerialRxIncoming+0x1f8>)
    9ac2:	781b      	ldrb	r3, [r3, #0]
    9ac4:	2b01      	cmp	r3, #1
    9ac6:	f040 8091 	bne.w	9bec <hciTrSerialRxIncoming+0x178>
    {
      uint8_t  hdrLen = 0;
    9aca:	2300      	movs	r3, #0
    9acc:	73bb      	strb	r3, [r7, #14]
      uint16_t dataLen = 0;
    9ace:	2300      	movs	r3, #0
    9ad0:	81bb      	strh	r3, [r7, #12]

      /* determine header length based on packet type */
      if (pktIndRx == HCI_EVT_TYPE)
    9ad2:	4b67      	ldr	r3, [pc, #412]	; (9c70 <hciTrSerialRxIncoming+0x1fc>)
    9ad4:	781b      	ldrb	r3, [r3, #0]
    9ad6:	2b04      	cmp	r3, #4
    9ad8:	d102      	bne.n	9ae0 <hciTrSerialRxIncoming+0x6c>
      {
        hdrLen = HCI_EVT_HDR_LEN;
    9ada:	2302      	movs	r3, #2
    9adc:	73bb      	strb	r3, [r7, #14]
    9ade:	e008      	b.n	9af2 <hciTrSerialRxIncoming+0x7e>
      }
      else if (pktIndRx == HCI_ACL_TYPE)
    9ae0:	4b63      	ldr	r3, [pc, #396]	; (9c70 <hciTrSerialRxIncoming+0x1fc>)
    9ae2:	781b      	ldrb	r3, [r3, #0]
    9ae4:	2b02      	cmp	r3, #2
    9ae6:	d102      	bne.n	9aee <hciTrSerialRxIncoming+0x7a>
      {
        hdrLen = HCI_ACL_HDR_LEN;
    9ae8:	2304      	movs	r3, #4
    9aea:	73bb      	strb	r3, [r7, #14]
    9aec:	e001      	b.n	9af2 <hciTrSerialRxIncoming+0x7e>
      }
      else
      {
        /* invalid packet type */
        WSF_ASSERT(0);
        return consumed_bytes;
    9aee:	7bfb      	ldrb	r3, [r7, #15]
    9af0:	e0b8      	b.n	9c64 <hciTrSerialRxIncoming+0x1f0>
      }

      if (iRx != hdrLen) {
    9af2:	7bbb      	ldrb	r3, [r7, #14]
    9af4:	b29a      	uxth	r2, r3
    9af6:	4b5f      	ldr	r3, [pc, #380]	; (9c74 <hciTrSerialRxIncoming+0x200>)
    9af8:	881b      	ldrh	r3, [r3, #0]
    9afa:	429a      	cmp	r2, r3
    9afc:	d012      	beq.n	9b24 <hciTrSerialRxIncoming+0xb0>
        /* copy current byte into the temp header buffer */
        hdrRx[iRx++] = dataByte;
    9afe:	4b5d      	ldr	r3, [pc, #372]	; (9c74 <hciTrSerialRxIncoming+0x200>)
    9b00:	881b      	ldrh	r3, [r3, #0]
    9b02:	1c5a      	adds	r2, r3, #1
    9b04:	b291      	uxth	r1, r2
    9b06:	4a5b      	ldr	r2, [pc, #364]	; (9c74 <hciTrSerialRxIncoming+0x200>)
    9b08:	8011      	strh	r1, [r2, #0]
    9b0a:	4619      	mov	r1, r3
    9b0c:	4a5b      	ldr	r2, [pc, #364]	; (9c7c <hciTrSerialRxIncoming+0x208>)
    9b0e:	7abb      	ldrb	r3, [r7, #10]
    9b10:	5453      	strb	r3, [r2, r1]
        pBuf++;
    9b12:	687b      	ldr	r3, [r7, #4]
    9b14:	3301      	adds	r3, #1
    9b16:	607b      	str	r3, [r7, #4]
        consumed_bytes++;
    9b18:	7bfb      	ldrb	r3, [r7, #15]
    9b1a:	3301      	adds	r3, #1
    9b1c:	73fb      	strb	r3, [r7, #15]
        len--;
    9b1e:	78fb      	ldrb	r3, [r7, #3]
    9b20:	3b01      	subs	r3, #1
    9b22:	70fb      	strb	r3, [r7, #3]
      }

      /* see if entire header has been read */
      if (iRx == hdrLen)
    9b24:	7bbb      	ldrb	r3, [r7, #14]
    9b26:	b29a      	uxth	r2, r3
    9b28:	4b52      	ldr	r3, [pc, #328]	; (9c74 <hciTrSerialRxIncoming+0x200>)
    9b2a:	881b      	ldrh	r3, [r3, #0]
    9b2c:	429a      	cmp	r2, r3
    9b2e:	d17e      	bne.n	9c2e <hciTrSerialRxIncoming+0x1ba>
      {
        /* extract data length from header */
        if (pktIndRx == HCI_EVT_TYPE)
    9b30:	4b4f      	ldr	r3, [pc, #316]	; (9c70 <hciTrSerialRxIncoming+0x1fc>)
    9b32:	781b      	ldrb	r3, [r3, #0]
    9b34:	2b04      	cmp	r3, #4
    9b36:	d103      	bne.n	9b40 <hciTrSerialRxIncoming+0xcc>
        {
          dataLen = hdrRx[1];
    9b38:	4b50      	ldr	r3, [pc, #320]	; (9c7c <hciTrSerialRxIncoming+0x208>)
    9b3a:	785b      	ldrb	r3, [r3, #1]
    9b3c:	81bb      	strh	r3, [r7, #12]
    9b3e:	e00d      	b.n	9b5c <hciTrSerialRxIncoming+0xe8>
        }
        else if (pktIndRx == HCI_ACL_TYPE)
    9b40:	4b4b      	ldr	r3, [pc, #300]	; (9c70 <hciTrSerialRxIncoming+0x1fc>)
    9b42:	781b      	ldrb	r3, [r3, #0]
    9b44:	2b02      	cmp	r3, #2
    9b46:	d109      	bne.n	9b5c <hciTrSerialRxIncoming+0xe8>
        {
          BYTES_TO_UINT16(dataLen, &hdrRx[2]);
    9b48:	4b4c      	ldr	r3, [pc, #304]	; (9c7c <hciTrSerialRxIncoming+0x208>)
    9b4a:	789b      	ldrb	r3, [r3, #2]
    9b4c:	b29a      	uxth	r2, r3
    9b4e:	4b4c      	ldr	r3, [pc, #304]	; (9c80 <hciTrSerialRxIncoming+0x20c>)
    9b50:	781b      	ldrb	r3, [r3, #0]
    9b52:	b29b      	uxth	r3, r3
    9b54:	021b      	lsls	r3, r3, #8
    9b56:	b29b      	uxth	r3, r3
    9b58:	4413      	add	r3, r2
    9b5a:	81bb      	strh	r3, [r7, #12]
        }

        /* allocate data buffer to hold entire packet */
        if (pktIndRx == HCI_ACL_TYPE)
    9b5c:	4b44      	ldr	r3, [pc, #272]	; (9c70 <hciTrSerialRxIncoming+0x1fc>)
    9b5e:	781b      	ldrb	r3, [r3, #0]
    9b60:	2b02      	cmp	r3, #2
    9b62:	d10c      	bne.n	9b7e <hciTrSerialRxIncoming+0x10a>
        {
          pPktRx = (uint8_t*)WsfMsgDataAlloc(hdrLen + dataLen, 0);
    9b64:	7bbb      	ldrb	r3, [r7, #14]
    9b66:	b29a      	uxth	r2, r3
    9b68:	89bb      	ldrh	r3, [r7, #12]
    9b6a:	4413      	add	r3, r2
    9b6c:	b29b      	uxth	r3, r3
    9b6e:	2100      	movs	r1, #0
    9b70:	4618      	mov	r0, r3
    9b72:	f001 f93f 	bl	adf4 <WsfMsgDataAlloc>
    9b76:	4602      	mov	r2, r0
    9b78:	4b42      	ldr	r3, [pc, #264]	; (9c84 <hciTrSerialRxIncoming+0x210>)
    9b7a:	601a      	str	r2, [r3, #0]
    9b7c:	e00a      	b.n	9b94 <hciTrSerialRxIncoming+0x120>
        }
        else
        {
          pPktRx = (uint8_t*)WsfMsgAlloc(hdrLen + dataLen);
    9b7e:	7bbb      	ldrb	r3, [r7, #14]
    9b80:	b29a      	uxth	r2, r3
    9b82:	89bb      	ldrh	r3, [r7, #12]
    9b84:	4413      	add	r3, r2
    9b86:	b29b      	uxth	r3, r3
    9b88:	4618      	mov	r0, r3
    9b8a:	f001 f948 	bl	ae1e <WsfMsgAlloc>
    9b8e:	4602      	mov	r2, r0
    9b90:	4b3c      	ldr	r3, [pc, #240]	; (9c84 <hciTrSerialRxIncoming+0x210>)
    9b92:	601a      	str	r2, [r3, #0]
        }

        if (pPktRx != NULL)
    9b94:	4b3b      	ldr	r3, [pc, #236]	; (9c84 <hciTrSerialRxIncoming+0x210>)
    9b96:	681b      	ldr	r3, [r3, #0]
    9b98:	2b00      	cmp	r3, #0
    9b9a:	d025      	beq.n	9be8 <hciTrSerialRxIncoming+0x174>
        {
          pDataRx = pPktRx;
    9b9c:	4b39      	ldr	r3, [pc, #228]	; (9c84 <hciTrSerialRxIncoming+0x210>)
    9b9e:	681b      	ldr	r3, [r3, #0]
    9ba0:	4a39      	ldr	r2, [pc, #228]	; (9c88 <hciTrSerialRxIncoming+0x214>)
    9ba2:	6013      	str	r3, [r2, #0]

          /* copy header into data packet (note: memcpy is not so portable) */
          {
            uint8_t  i;
            for (i = 0; i < hdrLen; i++)
    9ba4:	2300      	movs	r3, #0
    9ba6:	72fb      	strb	r3, [r7, #11]
    9ba8:	e00b      	b.n	9bc2 <hciTrSerialRxIncoming+0x14e>
            {
              *pDataRx++ = hdrRx[i];
    9baa:	4b37      	ldr	r3, [pc, #220]	; (9c88 <hciTrSerialRxIncoming+0x214>)
    9bac:	681b      	ldr	r3, [r3, #0]
    9bae:	1c5a      	adds	r2, r3, #1
    9bb0:	4935      	ldr	r1, [pc, #212]	; (9c88 <hciTrSerialRxIncoming+0x214>)
    9bb2:	600a      	str	r2, [r1, #0]
    9bb4:	7afa      	ldrb	r2, [r7, #11]
    9bb6:	4931      	ldr	r1, [pc, #196]	; (9c7c <hciTrSerialRxIncoming+0x208>)
    9bb8:	5c8a      	ldrb	r2, [r1, r2]
    9bba:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < hdrLen; i++)
    9bbc:	7afb      	ldrb	r3, [r7, #11]
    9bbe:	3301      	adds	r3, #1
    9bc0:	72fb      	strb	r3, [r7, #11]
    9bc2:	7afa      	ldrb	r2, [r7, #11]
    9bc4:	7bbb      	ldrb	r3, [r7, #14]
    9bc6:	429a      	cmp	r2, r3
    9bc8:	d3ef      	bcc.n	9baa <hciTrSerialRxIncoming+0x136>
            }
          }

          /* save number of bytes left to read */
          iRx = dataLen;
    9bca:	4a2a      	ldr	r2, [pc, #168]	; (9c74 <hciTrSerialRxIncoming+0x200>)
    9bcc:	89bb      	ldrh	r3, [r7, #12]
    9bce:	8013      	strh	r3, [r2, #0]
          if (iRx == 0)
    9bd0:	4b28      	ldr	r3, [pc, #160]	; (9c74 <hciTrSerialRxIncoming+0x200>)
    9bd2:	881b      	ldrh	r3, [r3, #0]
    9bd4:	2b00      	cmp	r3, #0
    9bd6:	d103      	bne.n	9be0 <hciTrSerialRxIncoming+0x16c>
          {
            stateRx = HCI_RX_STATE_COMPLETE;
    9bd8:	4b24      	ldr	r3, [pc, #144]	; (9c6c <hciTrSerialRxIncoming+0x1f8>)
    9bda:	2203      	movs	r2, #3
    9bdc:	701a      	strb	r2, [r3, #0]
    9bde:	e026      	b.n	9c2e <hciTrSerialRxIncoming+0x1ba>
          }
          else
          {
            stateRx = HCI_RX_STATE_DATA;
    9be0:	4b22      	ldr	r3, [pc, #136]	; (9c6c <hciTrSerialRxIncoming+0x1f8>)
    9be2:	2202      	movs	r2, #2
    9be4:	701a      	strb	r2, [r3, #0]
    9be6:	e022      	b.n	9c2e <hciTrSerialRxIncoming+0x1ba>
          }
        }
        else
        {
          WSF_ASSERT(0); /* allocate falied */
          return consumed_bytes;
    9be8:	7bfb      	ldrb	r3, [r7, #15]
    9bea:	e03b      	b.n	9c64 <hciTrSerialRxIncoming+0x1f0>

      }
    }

    /* --- Data State --- */
    else if (stateRx == HCI_RX_STATE_DATA)
    9bec:	4b1f      	ldr	r3, [pc, #124]	; (9c6c <hciTrSerialRxIncoming+0x1f8>)
    9bee:	781b      	ldrb	r3, [r3, #0]
    9bf0:	2b02      	cmp	r3, #2
    9bf2:	d11c      	bne.n	9c2e <hciTrSerialRxIncoming+0x1ba>
    {
      /* write incoming byte to allocated buffer */
      *pDataRx++ = dataByte;
    9bf4:	4b24      	ldr	r3, [pc, #144]	; (9c88 <hciTrSerialRxIncoming+0x214>)
    9bf6:	681b      	ldr	r3, [r3, #0]
    9bf8:	1c5a      	adds	r2, r3, #1
    9bfa:	4923      	ldr	r1, [pc, #140]	; (9c88 <hciTrSerialRxIncoming+0x214>)
    9bfc:	600a      	str	r2, [r1, #0]
    9bfe:	7aba      	ldrb	r2, [r7, #10]
    9c00:	701a      	strb	r2, [r3, #0]

      /* determine if entire packet has been read */
      iRx--;
    9c02:	4b1c      	ldr	r3, [pc, #112]	; (9c74 <hciTrSerialRxIncoming+0x200>)
    9c04:	881b      	ldrh	r3, [r3, #0]
    9c06:	3b01      	subs	r3, #1
    9c08:	b29a      	uxth	r2, r3
    9c0a:	4b1a      	ldr	r3, [pc, #104]	; (9c74 <hciTrSerialRxIncoming+0x200>)
    9c0c:	801a      	strh	r2, [r3, #0]
      if (iRx == 0)
    9c0e:	4b19      	ldr	r3, [pc, #100]	; (9c74 <hciTrSerialRxIncoming+0x200>)
    9c10:	881b      	ldrh	r3, [r3, #0]
    9c12:	2b00      	cmp	r3, #0
    9c14:	d102      	bne.n	9c1c <hciTrSerialRxIncoming+0x1a8>
      {
        stateRx = HCI_RX_STATE_COMPLETE;
    9c16:	4b15      	ldr	r3, [pc, #84]	; (9c6c <hciTrSerialRxIncoming+0x1f8>)
    9c18:	2203      	movs	r2, #3
    9c1a:	701a      	strb	r2, [r3, #0]
      }
      pBuf++;
    9c1c:	687b      	ldr	r3, [r7, #4]
    9c1e:	3301      	adds	r3, #1
    9c20:	607b      	str	r3, [r7, #4]
      consumed_bytes++;
    9c22:	7bfb      	ldrb	r3, [r7, #15]
    9c24:	3301      	adds	r3, #1
    9c26:	73fb      	strb	r3, [r7, #15]
      len--;
    9c28:	78fb      	ldrb	r3, [r7, #3]
    9c2a:	3b01      	subs	r3, #1
    9c2c:	70fb      	strb	r3, [r7, #3]
    }

    /* --- Complete State --- */
    /* ( Note Well!  There is no else-if construct by design. ) */
    if (stateRx == HCI_RX_STATE_COMPLETE)
    9c2e:	4b0f      	ldr	r3, [pc, #60]	; (9c6c <hciTrSerialRxIncoming+0x1f8>)
    9c30:	781b      	ldrb	r3, [r3, #0]
    9c32:	2b03      	cmp	r3, #3
    9c34:	d111      	bne.n	9c5a <hciTrSerialRxIncoming+0x1e6>
    {
      g_bHCIReceivingPacket = FALSE;
    9c36:	4b10      	ldr	r3, [pc, #64]	; (9c78 <hciTrSerialRxIncoming+0x204>)
    9c38:	2200      	movs	r2, #0
    9c3a:	701a      	strb	r2, [r3, #0]

      /* deliver data */
      if (pPktRx != NULL)
    9c3c:	4b11      	ldr	r3, [pc, #68]	; (9c84 <hciTrSerialRxIncoming+0x210>)
    9c3e:	681b      	ldr	r3, [r3, #0]
    9c40:	2b00      	cmp	r3, #0
    9c42:	d007      	beq.n	9c54 <hciTrSerialRxIncoming+0x1e0>
      {
        //am_hal_gpio_out_bit_set(13);
        hciCoreRecv(pktIndRx, pPktRx);
    9c44:	4b0a      	ldr	r3, [pc, #40]	; (9c70 <hciTrSerialRxIncoming+0x1fc>)
    9c46:	781a      	ldrb	r2, [r3, #0]
    9c48:	4b0e      	ldr	r3, [pc, #56]	; (9c84 <hciTrSerialRxIncoming+0x210>)
    9c4a:	681b      	ldr	r3, [r3, #0]
    9c4c:	4619      	mov	r1, r3
    9c4e:	4610      	mov	r0, r2
    9c50:	f7fd ffd6 	bl	7c00 <hciCoreRecv>
        //am_hal_gpio_out_bit_clear(13);
      }

      /* reset state machine */
      stateRx = HCI_RX_STATE_IDLE;
    9c54:	4b05      	ldr	r3, [pc, #20]	; (9c6c <hciTrSerialRxIncoming+0x1f8>)
    9c56:	2200      	movs	r2, #0
    9c58:	701a      	strb	r2, [r3, #0]
  while (len)
    9c5a:	78fb      	ldrb	r3, [r7, #3]
    9c5c:	2b00      	cmp	r3, #0
    9c5e:	f47f af12 	bne.w	9a86 <hciTrSerialRxIncoming+0x12>
    }
  }
  return consumed_bytes;
    9c62:	7bfb      	ldrb	r3, [r7, #15]
}
    9c64:	4618      	mov	r0, r3
    9c66:	3710      	adds	r7, #16
    9c68:	46bd      	mov	sp, r7
    9c6a:	bd80      	pop	{r7, pc}
    9c6c:	10001aa9 	.word	0x10001aa9
    9c70:	10001aaa 	.word	0x10001aaa
    9c74:	10001aac 	.word	0x10001aac
    9c78:	10001aa8 	.word	0x10001aa8
    9c7c:	10001ab0 	.word	0x10001ab0
    9c80:	10001ab3 	.word	0x10001ab3
    9c84:	10001ab4 	.word	0x10001ab4
    9c88:	10001ab8 	.word	0x10001ab8

00009c8c <hciCoreReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreReadResolvingListSize(void)
{
    9c8c:	b580      	push	{r7, lr}
    9c8e:	af00      	add	r7, sp, #0
  /* if LL Privacy is supported by Controller and included */
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
    9c90:	4b0b      	ldr	r3, [pc, #44]	; (9cc0 <hciCoreReadResolvingListSize+0x34>)
    9c92:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
    9c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9c9a:	2b00      	cmp	r3, #0
    9c9c:	d008      	beq.n	9cb0 <hciCoreReadResolvingListSize+0x24>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_PRIVACY))
    9c9e:	4b09      	ldr	r3, [pc, #36]	; (9cc4 <hciCoreReadResolvingListSize+0x38>)
    9ca0:	881b      	ldrh	r3, [r3, #0]
    9ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
    9ca6:	2b00      	cmp	r3, #0
    9ca8:	d002      	beq.n	9cb0 <hciCoreReadResolvingListSize+0x24>
  {
    /* send next command in sequence */
    HciLeReadResolvingListSize();
    9caa:	f7fd f9c4 	bl	7036 <HciLeReadResolvingListSize>
    9cae:	e005      	b.n	9cbc <hciCoreReadResolvingListSize+0x30>
  }
  else
  {
    hciCoreCb.resListSize = 0;
    9cb0:	4b03      	ldr	r3, [pc, #12]	; (9cc0 <hciCoreReadResolvingListSize+0x34>)
    9cb2:	2200      	movs	r2, #0
    9cb4:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

    /* send next command in sequence */
    hciCoreReadMaxDataLen();
    9cb8:	f000 f806 	bl	9cc8 <hciCoreReadMaxDataLen>
  }
}
    9cbc:	bf00      	nop
    9cbe:	bd80      	pop	{r7, pc}
    9cc0:	10002630 	.word	0x10002630
    9cc4:	10001084 	.word	0x10001084

00009cc8 <hciCoreReadMaxDataLen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreReadMaxDataLen(void)
{
    9cc8:	b580      	push	{r7, lr}
    9cca:	af00      	add	r7, sp, #0
  /* if LE Data Packet Length Extensions is supported by Controller and included */
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
    9ccc:	4b09      	ldr	r3, [pc, #36]	; (9cf4 <hciCoreReadMaxDataLen+0x2c>)
    9cce:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
    9cd2:	f003 0320 	and.w	r3, r3, #32
    9cd6:	2b00      	cmp	r3, #0
    9cd8:	d008      	beq.n	9cec <hciCoreReadMaxDataLen+0x24>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_DATA_LEN_EXT))
    9cda:	4b07      	ldr	r3, [pc, #28]	; (9cf8 <hciCoreReadMaxDataLen+0x30>)
    9cdc:	881b      	ldrh	r3, [r3, #0]
    9cde:	f003 0320 	and.w	r3, r3, #32
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
    9ce2:	2b00      	cmp	r3, #0
    9ce4:	d002      	beq.n	9cec <hciCoreReadMaxDataLen+0x24>
  {
    /* send next command in sequence */
    HciLeReadMaxDataLen();
    9ce6:	f7fc fde0 	bl	68aa <HciLeReadMaxDataLen>
    9cea:	e001      	b.n	9cf0 <hciCoreReadMaxDataLen+0x28>
  }
  else
  {
    /* send next command in sequence */
    HciLeRandCmd();
    9cec:	f7fc fe67 	bl	69be <HciLeRandCmd>
  }
}
    9cf0:	bf00      	nop
    9cf2:	bd80      	pop	{r7, pc}
    9cf4:	10002630 	.word	0x10002630
    9cf8:	10001084 	.word	0x10001084

00009cfc <hciCoreResetStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetStart(void)
{
    9cfc:	b580      	push	{r7, lr}
    9cfe:	af00      	add	r7, sp, #0
  /* send an HCI Reset command to start the sequence */
  HciResetCmd();
    9d00:	f7fd f8a6 	bl	6e50 <HciResetCmd>
}
    9d04:	bf00      	nop
    9d06:	bd80      	pop	{r7, pc}

00009d08 <hciCoreResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetSequence(uint8_t *pMsg)
{
    9d08:	b580      	push	{r7, lr}
    9d0a:	b086      	sub	sp, #24
    9d0c:	af00      	add	r7, sp, #0
    9d0e:	6078      	str	r0, [r7, #4]
  uint16_t       opcode;
  wsfMsgHdr_t    hdr;
  static uint8_t randCnt;

  /* if event is a command complete event */
  if (*pMsg == HCI_CMD_CMPL_EVT)
    9d10:	687b      	ldr	r3, [r7, #4]
    9d12:	781b      	ldrb	r3, [r3, #0]
    9d14:	2b0e      	cmp	r3, #14
    9d16:	f040 8149 	bne.w	9fac <hciCoreResetSequence+0x2a4>
  {
    /* parse parameters */
    pMsg += HCI_EVT_HDR_LEN;
    9d1a:	687b      	ldr	r3, [r7, #4]
    9d1c:	3302      	adds	r3, #2
    9d1e:	607b      	str	r3, [r7, #4]
    pMsg++;                   /* skip num packets */
    9d20:	687b      	ldr	r3, [r7, #4]
    9d22:	3301      	adds	r3, #1
    9d24:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT16(opcode, pMsg);
    9d26:	687b      	ldr	r3, [r7, #4]
    9d28:	781b      	ldrb	r3, [r3, #0]
    9d2a:	b29a      	uxth	r2, r3
    9d2c:	687b      	ldr	r3, [r7, #4]
    9d2e:	3301      	adds	r3, #1
    9d30:	781b      	ldrb	r3, [r3, #0]
    9d32:	b29b      	uxth	r3, r3
    9d34:	021b      	lsls	r3, r3, #8
    9d36:	b29b      	uxth	r3, r3
    9d38:	4413      	add	r3, r2
    9d3a:	82fb      	strh	r3, [r7, #22]
    9d3c:	687b      	ldr	r3, [r7, #4]
    9d3e:	3302      	adds	r3, #2
    9d40:	607b      	str	r3, [r7, #4]
    pMsg++;                   /* skip status */
    9d42:	687b      	ldr	r3, [r7, #4]
    9d44:	3301      	adds	r3, #1
    9d46:	607b      	str	r3, [r7, #4]

    /* decode opcode */
    switch (opcode)
    9d48:	8afb      	ldrh	r3, [r7, #22]
    9d4a:	f242 020f 	movw	r2, #8207	; 0x200f
    9d4e:	4293      	cmp	r3, r2
    9d50:	f000 809c 	beq.w	9e8c <hciCoreResetSequence+0x184>
    9d54:	f242 020f 	movw	r2, #8207	; 0x200f
    9d58:	4293      	cmp	r3, r2
    9d5a:	dc22      	bgt.n	9da2 <hciCoreResetSequence+0x9a>
    9d5c:	f241 0209 	movw	r2, #4105	; 0x1009
    9d60:	4293      	cmp	r3, r2
    9d62:	d062      	beq.n	9e2a <hciCoreResetSequence+0x122>
    9d64:	f241 0209 	movw	r2, #4105	; 0x1009
    9d68:	4293      	cmp	r3, r2
    9d6a:	dc0c      	bgt.n	9d86 <hciCoreResetSequence+0x7e>
    9d6c:	f640 4203 	movw	r2, #3075	; 0xc03
    9d70:	4293      	cmp	r3, r2
    9d72:	d042      	beq.n	9dfa <hciCoreResetSequence+0xf2>
    9d74:	f640 4263 	movw	r2, #3171	; 0xc63
    9d78:	4293      	cmp	r3, r2
    9d7a:	d053      	beq.n	9e24 <hciCoreResetSequence+0x11c>
    9d7c:	f640 4201 	movw	r2, #3073	; 0xc01
    9d80:	4293      	cmp	r3, r2
    9d82:	d047      	beq.n	9e14 <hciCoreResetSequence+0x10c>
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
        }
        break;

      default:
        break;
    9d84:	e112      	b.n	9fac <hciCoreResetSequence+0x2a4>
    switch (opcode)
    9d86:	f242 0202 	movw	r2, #8194	; 0x2002
    9d8a:	4293      	cmp	r3, r2
    9d8c:	d054      	beq.n	9e38 <hciCoreResetSequence+0x130>
    9d8e:	f242 0203 	movw	r2, #8195	; 0x2003
    9d92:	4293      	cmp	r3, r2
    9d94:	f000 8084 	beq.w	9ea0 <hciCoreResetSequence+0x198>
    9d98:	f242 0201 	movw	r2, #8193	; 0x2001
    9d9c:	4293      	cmp	r3, r2
    9d9e:	d03d      	beq.n	9e1c <hciCoreResetSequence+0x114>
        break;
    9da0:	e104      	b.n	9fac <hciCoreResetSequence+0x2a4>
    switch (opcode)
    9da2:	f242 022a 	movw	r2, #8234	; 0x202a
    9da6:	4293      	cmp	r3, r2
    9da8:	f000 808e 	beq.w	9ec8 <hciCoreResetSequence+0x1c0>
    9dac:	f242 022a 	movw	r2, #8234	; 0x202a
    9db0:	4293      	cmp	r3, r2
    9db2:	dc0e      	bgt.n	9dd2 <hciCoreResetSequence+0xca>
    9db4:	f242 021c 	movw	r2, #8220	; 0x201c
    9db8:	4293      	cmp	r3, r2
    9dba:	d05e      	beq.n	9e7a <hciCoreResetSequence+0x172>
    9dbc:	f242 0224 	movw	r2, #8228	; 0x2024
    9dc0:	4293      	cmp	r3, r2
    9dc2:	f000 80ae 	beq.w	9f22 <hciCoreResetSequence+0x21a>
    9dc6:	f242 0218 	movw	r2, #8216	; 0x2018
    9dca:	4293      	cmp	r3, r2
    9dcc:	f000 80d2 	beq.w	9f74 <hciCoreResetSequence+0x26c>
        break;
    9dd0:	e0ec      	b.n	9fac <hciCoreResetSequence+0x2a4>
    switch (opcode)
    9dd2:	f242 023b 	movw	r2, #8251	; 0x203b
    9dd6:	4293      	cmp	r3, r2
    9dd8:	dc09      	bgt.n	9dee <hciCoreResetSequence+0xe6>
    9dda:	f242 023a 	movw	r2, #8250	; 0x203a
    9dde:	4293      	cmp	r3, r2
    9de0:	f280 80bb 	bge.w	9f5a <hciCoreResetSequence+0x252>
    9de4:	f242 022f 	movw	r2, #8239	; 0x202f
    9de8:	4293      	cmp	r3, r2
    9dea:	d077      	beq.n	9edc <hciCoreResetSequence+0x1d4>
        break;
    9dec:	e0de      	b.n	9fac <hciCoreResetSequence+0x2a4>
    switch (opcode)
    9dee:	f242 024a 	movw	r2, #8266	; 0x204a
    9df2:	4293      	cmp	r3, r2
    9df4:	f000 80b1 	beq.w	9f5a <hciCoreResetSequence+0x252>
        break;
    9df8:	e0d8      	b.n	9fac <hciCoreResetSequence+0x2a4>
        randCnt = 0;
    9dfa:	4b6e      	ldr	r3, [pc, #440]	; (9fb4 <hciCoreResetSequence+0x2ac>)
    9dfc:	2200      	movs	r2, #0
    9dfe:	701a      	strb	r2, [r3, #0]
        HciVendorSpecificCmd(0xFC02, 6, g_BLEMacAddress);
    9e00:	4a6d      	ldr	r2, [pc, #436]	; (9fb8 <hciCoreResetSequence+0x2b0>)
    9e02:	2106      	movs	r1, #6
    9e04:	f64f 4002 	movw	r0, #64514	; 0xfc02
    9e08:	f7fd fa1f 	bl	724a <HciVendorSpecificCmd>
        HciSetEventMaskCmd((uint8_t *) hciEventMask);
    9e0c:	486b      	ldr	r0, [pc, #428]	; (9fbc <hciCoreResetSequence+0x2b4>)
    9e0e:	f7fd f837 	bl	6e80 <HciSetEventMaskCmd>
        break;
    9e12:	e0cb      	b.n	9fac <hciCoreResetSequence+0x2a4>
        HciLeSetEventMaskCmd((uint8_t *) hciLeEventMask);
    9e14:	486a      	ldr	r0, [pc, #424]	; (9fc0 <hciCoreResetSequence+0x2b8>)
    9e16:	f7fc ff32 	bl	6c7e <HciLeSetEventMaskCmd>
        break;
    9e1a:	e0c7      	b.n	9fac <hciCoreResetSequence+0x2a4>
        HciSetEventMaskPage2Cmd((uint8_t *) hciEventMaskPage2);
    9e1c:	4869      	ldr	r0, [pc, #420]	; (9fc4 <hciCoreResetSequence+0x2bc>)
    9e1e:	f7fd f84b 	bl	6eb8 <HciSetEventMaskPage2Cmd>
        break;
    9e22:	e0c3      	b.n	9fac <hciCoreResetSequence+0x2a4>
        HciReadBdAddrCmd();
    9e24:	f7fc ffda 	bl	6ddc <HciReadBdAddrCmd>
        break;
    9e28:	e0c0      	b.n	9fac <hciCoreResetSequence+0x2a4>
        BdaCpy(hciCoreCb.bdAddr, pMsg);
    9e2a:	6879      	ldr	r1, [r7, #4]
    9e2c:	4866      	ldr	r0, [pc, #408]	; (9fc8 <hciCoreResetSequence+0x2c0>)
    9e2e:	f003 f825 	bl	ce7c <BdaCpy>
        HciLeReadBufSizeCmd();
    9e32:	f7fc fdd7 	bl	69e4 <HciLeReadBufSizeCmd>
        break;
    9e36:	e0b9      	b.n	9fac <hciCoreResetSequence+0x2a4>
        BSTREAM_TO_UINT16(hciCoreCb.bufSize, pMsg);
    9e38:	687b      	ldr	r3, [r7, #4]
    9e3a:	781b      	ldrb	r3, [r3, #0]
    9e3c:	b29a      	uxth	r2, r3
    9e3e:	687b      	ldr	r3, [r7, #4]
    9e40:	3301      	adds	r3, #1
    9e42:	781b      	ldrb	r3, [r3, #0]
    9e44:	b29b      	uxth	r3, r3
    9e46:	021b      	lsls	r3, r3, #8
    9e48:	b29b      	uxth	r3, r3
    9e4a:	4413      	add	r3, r2
    9e4c:	b29a      	uxth	r2, r3
    9e4e:	4b5f      	ldr	r3, [pc, #380]	; (9fcc <hciCoreResetSequence+0x2c4>)
    9e50:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
    9e54:	687b      	ldr	r3, [r7, #4]
    9e56:	3302      	adds	r3, #2
    9e58:	607b      	str	r3, [r7, #4]
        BSTREAM_TO_UINT8(hciCoreCb.numBufs, pMsg);
    9e5a:	687b      	ldr	r3, [r7, #4]
    9e5c:	1c5a      	adds	r2, r3, #1
    9e5e:	607a      	str	r2, [r7, #4]
    9e60:	781a      	ldrb	r2, [r3, #0]
    9e62:	4b5a      	ldr	r3, [pc, #360]	; (9fcc <hciCoreResetSequence+0x2c4>)
    9e64:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
        hciCoreCb.availBufs = hciCoreCb.numBufs;
    9e68:	4b58      	ldr	r3, [pc, #352]	; (9fcc <hciCoreResetSequence+0x2c4>)
    9e6a:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
    9e6e:	4b57      	ldr	r3, [pc, #348]	; (9fcc <hciCoreResetSequence+0x2c4>)
    9e70:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
        HciLeReadSupStatesCmd();
    9e74:	f7fc fe02 	bl	6a7c <HciLeReadSupStatesCmd>
        break;
    9e78:	e098      	b.n	9fac <hciCoreResetSequence+0x2a4>
        memcpy(hciCoreCb.leStates, pMsg, HCI_LE_STATES_LEN);
    9e7a:	4b54      	ldr	r3, [pc, #336]	; (9fcc <hciCoreResetSequence+0x2c4>)
    9e7c:	687a      	ldr	r2, [r7, #4]
    9e7e:	33e0      	adds	r3, #224	; 0xe0
    9e80:	6810      	ldr	r0, [r2, #0]
    9e82:	6851      	ldr	r1, [r2, #4]
    9e84:	c303      	stmia	r3!, {r0, r1}
        HciLeReadWhiteListSizeCmd();
    9e86:	f7fc fe0c 	bl	6aa2 <HciLeReadWhiteListSizeCmd>
        break;
    9e8a:	e08f      	b.n	9fac <hciCoreResetSequence+0x2a4>
        BSTREAM_TO_UINT8(hciCoreCb.whiteListSize, pMsg);
    9e8c:	687b      	ldr	r3, [r7, #4]
    9e8e:	1c5a      	adds	r2, r3, #1
    9e90:	607a      	str	r2, [r7, #4]
    9e92:	781a      	ldrb	r2, [r3, #0]
    9e94:	4b4d      	ldr	r3, [pc, #308]	; (9fcc <hciCoreResetSequence+0x2c4>)
    9e96:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
        HciLeReadLocalSupFeatCmd();
    9e9a:	f7fc fdb6 	bl	6a0a <HciLeReadLocalSupFeatCmd>
        break;
    9e9e:	e085      	b.n	9fac <hciCoreResetSequence+0x2a4>
        BSTREAM_TO_UINT16(hciCoreCb.leSupFeat, pMsg);
    9ea0:	687b      	ldr	r3, [r7, #4]
    9ea2:	781b      	ldrb	r3, [r3, #0]
    9ea4:	b29a      	uxth	r2, r3
    9ea6:	687b      	ldr	r3, [r7, #4]
    9ea8:	3301      	adds	r3, #1
    9eaa:	781b      	ldrb	r3, [r3, #0]
    9eac:	b29b      	uxth	r3, r3
    9eae:	021b      	lsls	r3, r3, #8
    9eb0:	b29b      	uxth	r3, r3
    9eb2:	4413      	add	r3, r2
    9eb4:	b29a      	uxth	r2, r3
    9eb6:	4b45      	ldr	r3, [pc, #276]	; (9fcc <hciCoreResetSequence+0x2c4>)
    9eb8:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
    9ebc:	687b      	ldr	r3, [r7, #4]
    9ebe:	3302      	adds	r3, #2
    9ec0:	607b      	str	r3, [r7, #4]
        hciCoreReadResolvingListSize();
    9ec2:	f7ff fee3 	bl	9c8c <hciCoreReadResolvingListSize>
        break;
    9ec6:	e071      	b.n	9fac <hciCoreResetSequence+0x2a4>
        BSTREAM_TO_UINT8(hciCoreCb.resListSize, pMsg);
    9ec8:	687b      	ldr	r3, [r7, #4]
    9eca:	1c5a      	adds	r2, r3, #1
    9ecc:	607a      	str	r2, [r7, #4]
    9ece:	781a      	ldrb	r2, [r3, #0]
    9ed0:	4b3e      	ldr	r3, [pc, #248]	; (9fcc <hciCoreResetSequence+0x2c4>)
    9ed2:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        hciCoreReadMaxDataLen();
    9ed6:	f7ff fef7 	bl	9cc8 <hciCoreReadMaxDataLen>
        break;
    9eda:	e067      	b.n	9fac <hciCoreResetSequence+0x2a4>
          BSTREAM_TO_UINT16(maxTxOctets, pMsg);
    9edc:	687b      	ldr	r3, [r7, #4]
    9ede:	781b      	ldrb	r3, [r3, #0]
    9ee0:	b29a      	uxth	r2, r3
    9ee2:	687b      	ldr	r3, [r7, #4]
    9ee4:	3301      	adds	r3, #1
    9ee6:	781b      	ldrb	r3, [r3, #0]
    9ee8:	b29b      	uxth	r3, r3
    9eea:	021b      	lsls	r3, r3, #8
    9eec:	b29b      	uxth	r3, r3
    9eee:	4413      	add	r3, r2
    9ef0:	82bb      	strh	r3, [r7, #20]
    9ef2:	687b      	ldr	r3, [r7, #4]
    9ef4:	3302      	adds	r3, #2
    9ef6:	607b      	str	r3, [r7, #4]
          BSTREAM_TO_UINT16(maxTxTime, pMsg);
    9ef8:	687b      	ldr	r3, [r7, #4]
    9efa:	781b      	ldrb	r3, [r3, #0]
    9efc:	b29a      	uxth	r2, r3
    9efe:	687b      	ldr	r3, [r7, #4]
    9f00:	3301      	adds	r3, #1
    9f02:	781b      	ldrb	r3, [r3, #0]
    9f04:	b29b      	uxth	r3, r3
    9f06:	021b      	lsls	r3, r3, #8
    9f08:	b29b      	uxth	r3, r3
    9f0a:	4413      	add	r3, r2
    9f0c:	827b      	strh	r3, [r7, #18]
    9f0e:	687b      	ldr	r3, [r7, #4]
    9f10:	3302      	adds	r3, #2
    9f12:	607b      	str	r3, [r7, #4]
          HciLeWriteDefDataLen(maxTxOctets, maxTxTime);
    9f14:	8a7a      	ldrh	r2, [r7, #18]
    9f16:	8abb      	ldrh	r3, [r7, #20]
    9f18:	4611      	mov	r1, r2
    9f1a:	4618      	mov	r0, r3
    9f1c:	f7fc fc57 	bl	67ce <HciLeWriteDefDataLen>
        break;
    9f20:	e044      	b.n	9fac <hciCoreResetSequence+0x2a4>
        if (hciCoreCb.extResetSeq)
    9f22:	4b2a      	ldr	r3, [pc, #168]	; (9fcc <hciCoreResetSequence+0x2c4>)
    9f24:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    9f28:	2b00      	cmp	r3, #0
    9f2a:	d007      	beq.n	9f3c <hciCoreResetSequence+0x234>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
    9f2c:	4b27      	ldr	r3, [pc, #156]	; (9fcc <hciCoreResetSequence+0x2c4>)
    9f2e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    9f32:	8afa      	ldrh	r2, [r7, #22]
    9f34:	4611      	mov	r1, r2
    9f36:	6878      	ldr	r0, [r7, #4]
    9f38:	4798      	blx	r3
        break;
    9f3a:	e037      	b.n	9fac <hciCoreResetSequence+0x2a4>
          hciCoreCb.maxAdvDataLen = 0;
    9f3c:	4b23      	ldr	r3, [pc, #140]	; (9fcc <hciCoreResetSequence+0x2c4>)
    9f3e:	2200      	movs	r2, #0
    9f40:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
          hciCoreCb.numSupAdvSets = 0;
    9f44:	4b21      	ldr	r3, [pc, #132]	; (9fcc <hciCoreResetSequence+0x2c4>)
    9f46:	2200      	movs	r2, #0
    9f48:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
          hciCoreCb.perAdvListSize = 0;
    9f4c:	4b1f      	ldr	r3, [pc, #124]	; (9fcc <hciCoreResetSequence+0x2c4>)
    9f4e:	2200      	movs	r2, #0
    9f50:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
          HciLeRandCmd();
    9f54:	f7fc fd33 	bl	69be <HciLeRandCmd>
        break;
    9f58:	e028      	b.n	9fac <hciCoreResetSequence+0x2a4>
        if (hciCoreCb.extResetSeq)
    9f5a:	4b1c      	ldr	r3, [pc, #112]	; (9fcc <hciCoreResetSequence+0x2c4>)
    9f5c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    9f60:	2b00      	cmp	r3, #0
    9f62:	d022      	beq.n	9faa <hciCoreResetSequence+0x2a2>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
    9f64:	4b19      	ldr	r3, [pc, #100]	; (9fcc <hciCoreResetSequence+0x2c4>)
    9f66:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    9f6a:	8afa      	ldrh	r2, [r7, #22]
    9f6c:	4611      	mov	r1, r2
    9f6e:	6878      	ldr	r0, [r7, #4]
    9f70:	4798      	blx	r3
        break;
    9f72:	e01a      	b.n	9faa <hciCoreResetSequence+0x2a2>
        if (randCnt < (HCI_RESET_RAND_CNT-1))
    9f74:	4b0f      	ldr	r3, [pc, #60]	; (9fb4 <hciCoreResetSequence+0x2ac>)
    9f76:	781b      	ldrb	r3, [r3, #0]
    9f78:	2b02      	cmp	r3, #2
    9f7a:	d808      	bhi.n	9f8e <hciCoreResetSequence+0x286>
          randCnt++;
    9f7c:	4b0d      	ldr	r3, [pc, #52]	; (9fb4 <hciCoreResetSequence+0x2ac>)
    9f7e:	781b      	ldrb	r3, [r3, #0]
    9f80:	3301      	adds	r3, #1
    9f82:	b2da      	uxtb	r2, r3
    9f84:	4b0b      	ldr	r3, [pc, #44]	; (9fb4 <hciCoreResetSequence+0x2ac>)
    9f86:	701a      	strb	r2, [r3, #0]
          HciLeRandCmd();
    9f88:	f7fc fd19 	bl	69be <HciLeRandCmd>
        break;
    9f8c:	e00e      	b.n	9fac <hciCoreResetSequence+0x2a4>
          hciCb.resetting = FALSE;
    9f8e:	4b10      	ldr	r3, [pc, #64]	; (9fd0 <hciCoreResetSequence+0x2c8>)
    9f90:	2200      	movs	r2, #0
    9f92:	765a      	strb	r2, [r3, #25]
          hdr.param = 0;
    9f94:	2300      	movs	r3, #0
    9f96:	81bb      	strh	r3, [r7, #12]
          hdr.event = HCI_RESET_SEQ_CMPL_CBACK_EVT;
    9f98:	2300      	movs	r3, #0
    9f9a:	73bb      	strb	r3, [r7, #14]
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
    9f9c:	4b0c      	ldr	r3, [pc, #48]	; (9fd0 <hciCoreResetSequence+0x2c8>)
    9f9e:	689b      	ldr	r3, [r3, #8]
    9fa0:	f107 020c 	add.w	r2, r7, #12
    9fa4:	4610      	mov	r0, r2
    9fa6:	4798      	blx	r3
        break;
    9fa8:	e000      	b.n	9fac <hciCoreResetSequence+0x2a4>
        break;
    9faa:	bf00      	nop
    }
  }
}
    9fac:	bf00      	nop
    9fae:	3718      	adds	r7, #24
    9fb0:	46bd      	mov	sp, r7
    9fb2:	bd80      	pop	{r7, pc}
    9fb4:	10001abc 	.word	0x10001abc
    9fb8:	10001090 	.word	0x10001090
    9fbc:	000114a4 	.word	0x000114a4
    9fc0:	000114ac 	.word	0x000114ac
    9fc4:	000114b4 	.word	0x000114b4
    9fc8:	10002718 	.word	0x10002718
    9fcc:	10002630 	.word	0x10002630
    9fd0:	100028f4 	.word	0x100028f4

00009fd4 <hciCoreVsCmdCmplRcvd>:
 *
 *  \return HCI callback event code or zero.
 */
/*************************************************************************************************/
uint8_t hciCoreVsCmdCmplRcvd(uint16_t opcode, uint8_t *pMsg, uint8_t len)
{
    9fd4:	b480      	push	{r7}
    9fd6:	b083      	sub	sp, #12
    9fd8:	af00      	add	r7, sp, #0
    9fda:	4603      	mov	r3, r0
    9fdc:	6039      	str	r1, [r7, #0]
    9fde:	80fb      	strh	r3, [r7, #6]
    9fe0:	4613      	mov	r3, r2
    9fe2:	717b      	strb	r3, [r7, #5]
  return HCI_VENDOR_SPEC_CMD_CMPL_CBACK_EVT;
    9fe4:	2312      	movs	r3, #18
}
    9fe6:	4618      	mov	r0, r3
    9fe8:	370c      	adds	r7, #12
    9fea:	46bd      	mov	sp, r7
    9fec:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ff0:	4770      	bx	lr

00009ff2 <HciVsInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciVsInit(uint8_t param)
{
    9ff2:	b480      	push	{r7}
    9ff4:	b083      	sub	sp, #12
    9ff6:	af00      	add	r7, sp, #0
    9ff8:	4603      	mov	r3, r0
    9ffa:	71fb      	strb	r3, [r7, #7]

}
    9ffc:	bf00      	nop
    9ffe:	370c      	adds	r7, #12
    a000:	46bd      	mov	sp, r7
    a002:	f85d 7b04 	ldr.w	r7, [sp], #4
    a006:	4770      	bx	lr

0000a008 <WsfAssert>:
 *  \param  pFile   Name of file originating assert.
 *  \param  line    Line number of assert statement.
 */
/*************************************************************************************************/
void WsfAssert(const char *pFile, uint16_t line)
{
    a008:	b480      	push	{r7}
    a00a:	b085      	sub	sp, #20
    a00c:	af00      	add	r7, sp, #0
    a00e:	6078      	str	r0, [r7, #4]
    a010:	460b      	mov	r3, r1
    a012:	807b      	strh	r3, [r7, #2]
  volatile uint8_t escape=0;
    a014:	2300      	movs	r3, #0
    a016:	73fb      	strb	r3, [r7, #15]
  {
    /*
     *  However, you can exit with a debugger by setting variable 'escape'.
     *  Handy to see where the assert happened if you cannot view the call stack.
    */
    if (escape)
    a018:	7bfb      	ldrb	r3, [r7, #15]
    a01a:	b2db      	uxtb	r3, r3
    a01c:	2b00      	cmp	r3, #0
    a01e:	d100      	bne.n	a022 <WsfAssert+0x1a>
    a020:	e7fa      	b.n	a018 <WsfAssert+0x10>
    {
      break;
    a022:	bf00      	nop
    }
  }
}
    a024:	bf00      	nop
    a026:	3714      	adds	r7, #20
    a028:	46bd      	mov	sp, r7
    a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a02e:	4770      	bx	lr

0000a030 <WsfCsEnter>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfCsEnter(void)
{
    a030:	b480      	push	{r7}
    a032:	af00      	add	r7, sp, #0
  if (csNesting == 0)
    a034:	4b07      	ldr	r3, [pc, #28]	; (a054 <WsfCsEnter+0x24>)
    a036:	781b      	ldrb	r3, [r3, #0]
    a038:	2b00      	cmp	r3, #0
    a03a:	d100      	bne.n	a03e <WsfCsEnter+0xe>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __disable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsid i");
    a03c:	b672      	cpsid	i
#ifdef __CC_ARM
  __disable_irq();
#endif

  }
  csNesting++;
    a03e:	4b05      	ldr	r3, [pc, #20]	; (a054 <WsfCsEnter+0x24>)
    a040:	781b      	ldrb	r3, [r3, #0]
    a042:	3301      	adds	r3, #1
    a044:	b2da      	uxtb	r2, r3
    a046:	4b03      	ldr	r3, [pc, #12]	; (a054 <WsfCsEnter+0x24>)
    a048:	701a      	strb	r2, [r3, #0]
}
    a04a:	bf00      	nop
    a04c:	46bd      	mov	sp, r7
    a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a052:	4770      	bx	lr
    a054:	10001abd 	.word	0x10001abd

0000a058 <WsfCsExit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfCsExit(void)
{
    a058:	b480      	push	{r7}
    a05a:	af00      	add	r7, sp, #0
  WSF_ASSERT(csNesting != 0);

  csNesting--;
    a05c:	4b07      	ldr	r3, [pc, #28]	; (a07c <WsfCsExit+0x24>)
    a05e:	781b      	ldrb	r3, [r3, #0]
    a060:	3b01      	subs	r3, #1
    a062:	b2da      	uxtb	r2, r3
    a064:	4b05      	ldr	r3, [pc, #20]	; (a07c <WsfCsExit+0x24>)
    a066:	701a      	strb	r2, [r3, #0]
  if (csNesting == 0)
    a068:	4b04      	ldr	r3, [pc, #16]	; (a07c <WsfCsExit+0x24>)
    a06a:	781b      	ldrb	r3, [r3, #0]
    a06c:	2b00      	cmp	r3, #0
    a06e:	d100      	bne.n	a072 <WsfCsExit+0x1a>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __enable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsie i");
    a070:	b662      	cpsie	i
#ifdef __CC_ARM
      __enable_irq();
#endif

  }
}
    a072:	bf00      	nop
    a074:	46bd      	mov	sp, r7
    a076:	f85d 7b04 	ldr.w	r7, [sp], #4
    a07a:	4770      	bx	lr
    a07c:	10001abd 	.word	0x10001abd

0000a080 <WsfTaskLock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskLock(void)
{
    a080:	b580      	push	{r7, lr}
    a082:	af00      	add	r7, sp, #0
  WsfCsEnter();
    a084:	f7ff ffd4 	bl	a030 <WsfCsEnter>
}
    a088:	bf00      	nop
    a08a:	bd80      	pop	{r7, pc}

0000a08c <WsfTaskUnlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskUnlock(void)
{
    a08c:	b580      	push	{r7, lr}
    a08e:	af00      	add	r7, sp, #0
  WsfCsExit();
    a090:	f7ff ffe2 	bl	a058 <WsfCsExit>
}
    a094:	bf00      	nop
    a096:	bd80      	pop	{r7, pc}

0000a098 <WsfSetOsSpecificEvent>:

void WsfSetOsSpecificEvent(void)
{
    a098:	b480      	push	{r7}
    a09a:	af00      	add	r7, sp, #0
          }
      }

  }    
#endif
}
    a09c:	bf00      	nop
    a09e:	46bd      	mov	sp, r7
    a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    a0a4:	4770      	bx	lr
	...

0000a0a8 <WsfSetEvent>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfSetEvent(wsfHandlerId_t handlerId, wsfEventMask_t event)
{
    a0a8:	b580      	push	{r7, lr}
    a0aa:	b082      	sub	sp, #8
    a0ac:	af00      	add	r7, sp, #0
    a0ae:	4603      	mov	r3, r0
    a0b0:	460a      	mov	r2, r1
    a0b2:	71fb      	strb	r3, [r7, #7]
    a0b4:	4613      	mov	r3, r2
    a0b6:	71bb      	strb	r3, [r7, #6]

  WSF_ASSERT(WSF_HANDLER_FROM_ID(handlerId) < WSF_MAX_HANDLERS);

  WSF_TRACE_INFO2("WsfSetEvent handlerId:%u event:%u", handlerId, event);

  WSF_CS_ENTER(cs);
    a0b8:	f7ff ffba 	bl	a030 <WsfCsEnter>
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
    a0bc:	79fb      	ldrb	r3, [r7, #7]
    a0be:	f003 030f 	and.w	r3, r3, #15
    a0c2:	79fa      	ldrb	r2, [r7, #7]
    a0c4:	f002 020f 	and.w	r2, r2, #15
    a0c8:	490e      	ldr	r1, [pc, #56]	; (a104 <WsfSetEvent+0x5c>)
    a0ca:	440a      	add	r2, r1
    a0cc:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
    a0d0:	79ba      	ldrb	r2, [r7, #6]
    a0d2:	430a      	orrs	r2, r1
    a0d4:	b2d1      	uxtb	r1, r2
    a0d6:	4a0b      	ldr	r2, [pc, #44]	; (a104 <WsfSetEvent+0x5c>)
    a0d8:	4413      	add	r3, r2
    a0da:	460a      	mov	r2, r1
    a0dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
    a0e0:	4b08      	ldr	r3, [pc, #32]	; (a104 <WsfSetEvent+0x5c>)
    a0e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    a0e6:	f043 0304 	orr.w	r3, r3, #4
    a0ea:	b2da      	uxtb	r2, r3
    a0ec:	4b05      	ldr	r3, [pc, #20]	; (a104 <WsfSetEvent+0x5c>)
    a0ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  WSF_CS_EXIT(cs);
    a0f2:	f7ff ffb1 	bl	a058 <WsfCsExit>

  /* set event in OS */

  WsfSetOsSpecificEvent();
    a0f6:	f7ff ffcf 	bl	a098 <WsfSetOsSpecificEvent>
}
    a0fa:	bf00      	nop
    a0fc:	3708      	adds	r7, #8
    a0fe:	46bd      	mov	sp, r7
    a100:	bd80      	pop	{r7, pc}
    a102:	bf00      	nop
    a104:	10002744 	.word	0x10002744

0000a108 <WsfTaskSetReady>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskSetReady(wsfHandlerId_t handlerId, wsfTaskEvent_t event)
{
    a108:	b580      	push	{r7, lr}
    a10a:	b082      	sub	sp, #8
    a10c:	af00      	add	r7, sp, #0
    a10e:	4603      	mov	r3, r0
    a110:	460a      	mov	r2, r1
    a112:	71fb      	strb	r3, [r7, #7]
    a114:	4613      	mov	r3, r2
    a116:	71bb      	strb	r3, [r7, #6]
  WSF_CS_INIT(cs);

  WSF_CS_ENTER(cs);
    a118:	f7ff ff8a 	bl	a030 <WsfCsEnter>
  wsfOs.task.taskEventMask |= event;
    a11c:	4b08      	ldr	r3, [pc, #32]	; (a140 <WsfTaskSetReady+0x38>)
    a11e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    a122:	79bb      	ldrb	r3, [r7, #6]
    a124:	4313      	orrs	r3, r2
    a126:	b2da      	uxtb	r2, r3
    a128:	4b05      	ldr	r3, [pc, #20]	; (a140 <WsfTaskSetReady+0x38>)
    a12a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  WSF_CS_EXIT(cs);
    a12e:	f7ff ff93 	bl	a058 <WsfCsExit>

  /* set event in OS */

  WsfSetOsSpecificEvent();
    a132:	f7ff ffb1 	bl	a098 <WsfSetOsSpecificEvent>
}
    a136:	bf00      	nop
    a138:	3708      	adds	r7, #8
    a13a:	46bd      	mov	sp, r7
    a13c:	bd80      	pop	{r7, pc}
    a13e:	bf00      	nop
    a140:	10002744 	.word	0x10002744

0000a144 <WsfTaskMsgQueue>:
 *
 *  \return Task message queue.
 */
/*************************************************************************************************/
wsfQueue_t *WsfTaskMsgQueue(wsfHandlerId_t handlerId)
{
    a144:	b480      	push	{r7}
    a146:	b083      	sub	sp, #12
    a148:	af00      	add	r7, sp, #0
    a14a:	4603      	mov	r3, r0
    a14c:	71fb      	strb	r3, [r7, #7]
  return &(wsfOs.task.msgQueue);
    a14e:	4b03      	ldr	r3, [pc, #12]	; (a15c <WsfTaskMsgQueue+0x18>)
}
    a150:	4618      	mov	r0, r3
    a152:	370c      	adds	r7, #12
    a154:	46bd      	mov	sp, r7
    a156:	f85d 7b04 	ldr.w	r7, [sp], #4
    a15a:	4770      	bx	lr
    a15c:	10002774 	.word	0x10002774

0000a160 <WsfOsSetNextHandler>:
 *
 *  \return WSF handler ID for this handler.
 */
/*************************************************************************************************/
wsfHandlerId_t WsfOsSetNextHandler(wsfEventHandler_t handler)
{
    a160:	b480      	push	{r7}
    a162:	b085      	sub	sp, #20
    a164:	af00      	add	r7, sp, #0
    a166:	6078      	str	r0, [r7, #4]
  wsfHandlerId_t handlerId = wsfOs.task.numHandler++;
    a168:	4b0a      	ldr	r3, [pc, #40]	; (a194 <WsfOsSetNextHandler+0x34>)
    a16a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
    a16e:	1c5a      	adds	r2, r3, #1
    a170:	b2d1      	uxtb	r1, r2
    a172:	4a08      	ldr	r2, [pc, #32]	; (a194 <WsfOsSetNextHandler+0x34>)
    a174:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
    a178:	73fb      	strb	r3, [r7, #15]

  WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);

  wsfOs.task.handler[handlerId] = handler;
    a17a:	7bfb      	ldrb	r3, [r7, #15]
    a17c:	4905      	ldr	r1, [pc, #20]	; (a194 <WsfOsSetNextHandler+0x34>)
    a17e:	687a      	ldr	r2, [r7, #4]
    a180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  return handlerId;
    a184:	7bfb      	ldrb	r3, [r7, #15]
}
    a186:	4618      	mov	r0, r3
    a188:	3714      	adds	r7, #20
    a18a:	46bd      	mov	sp, r7
    a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a190:	4770      	bx	lr
    a192:	bf00      	nop
    a194:	10002744 	.word	0x10002744

0000a198 <wsfOsReadyToSleep>:
 *
 *  \return Return TRUE if there are no pending WSF task events set, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t wsfOsReadyToSleep(void)
{
    a198:	b480      	push	{r7}
    a19a:	af00      	add	r7, sp, #0
  return (wsfOs.task.taskEventMask == 0);
    a19c:	4b06      	ldr	r3, [pc, #24]	; (a1b8 <wsfOsReadyToSleep+0x20>)
    a19e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    a1a2:	2b00      	cmp	r3, #0
    a1a4:	bf0c      	ite	eq
    a1a6:	2301      	moveq	r3, #1
    a1a8:	2300      	movne	r3, #0
    a1aa:	b2db      	uxtb	r3, r3
}
    a1ac:	4618      	mov	r0, r3
    a1ae:	46bd      	mov	sp, r7
    a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1b4:	4770      	bx	lr
    a1b6:	bf00      	nop
    a1b8:	10002744 	.word	0x10002744

0000a1bc <wsfOsDispatcher>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void wsfOsDispatcher(void)
{
    a1bc:	b580      	push	{r7, lr}
    a1be:	b086      	sub	sp, #24
    a1c0:	af00      	add	r7, sp, #0
  wsfHandlerId_t    handlerId;
  uint8_t           i;

  WSF_CS_INIT(cs);

  pTask = &wsfOs.task;
    a1c2:	4b3f      	ldr	r3, [pc, #252]	; (a2c0 <wsfOsDispatcher+0x104>)
    a1c4:	613b      	str	r3, [r7, #16]

  while (pTask->taskEventMask)
    a1c6:	e072      	b.n	a2ae <wsfOsDispatcher+0xf2>
  {
    /* get and then clear task event mask */
    WSF_CS_ENTER(cs);
    a1c8:	f7ff ff32 	bl	a030 <WsfCsEnter>
    taskEventMask = pTask->taskEventMask;
    a1cc:	693b      	ldr	r3, [r7, #16]
    a1ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    a1d2:	73fb      	strb	r3, [r7, #15]
    pTask->taskEventMask = 0;
    a1d4:	693b      	ldr	r3, [r7, #16]
    a1d6:	2200      	movs	r2, #0
    a1d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    WSF_CS_EXIT(cs);
    a1dc:	f7ff ff3c 	bl	a058 <WsfCsExit>

    if (taskEventMask & WSF_MSG_QUEUE_EVENT)
    a1e0:	7bfb      	ldrb	r3, [r7, #15]
    a1e2:	f003 0301 	and.w	r3, r3, #1
    a1e6:	2b00      	cmp	r3, #0
    a1e8:	d016      	beq.n	a218 <wsfOsDispatcher+0x5c>
    {
      /* handle msg queue */
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
    a1ea:	e00a      	b.n	a202 <wsfOsDispatcher+0x46>
      {
        WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[handlerId])(0, pMsg);
    a1ec:	78bb      	ldrb	r3, [r7, #2]
    a1ee:	461a      	mov	r2, r3
    a1f0:	693b      	ldr	r3, [r7, #16]
    a1f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a1f6:	68b9      	ldr	r1, [r7, #8]
    a1f8:	2000      	movs	r0, #0
    a1fa:	4798      	blx	r3
        WsfMsgFree(pMsg);
    a1fc:	68b8      	ldr	r0, [r7, #8]
    a1fe:	f000 fe25 	bl	ae4c <WsfMsgFree>
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
    a202:	693b      	ldr	r3, [r7, #16]
    a204:	3330      	adds	r3, #48	; 0x30
    a206:	1cba      	adds	r2, r7, #2
    a208:	4611      	mov	r1, r2
    a20a:	4618      	mov	r0, r3
    a20c:	f000 fe58 	bl	aec0 <WsfMsgDeq>
    a210:	60b8      	str	r0, [r7, #8]
    a212:	68bb      	ldr	r3, [r7, #8]
    a214:	2b00      	cmp	r3, #0
    a216:	d1e9      	bne.n	a1ec <wsfOsDispatcher+0x30>
      }
    }

    if (taskEventMask & WSF_TIMER_EVENT)
    a218:	7bfb      	ldrb	r3, [r7, #15]
    a21a:	f003 0302 	and.w	r3, r3, #2
    a21e:	2b00      	cmp	r3, #0
    a220:	d012      	beq.n	a248 <wsfOsDispatcher+0x8c>
    {
      /* service timers */
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
    a222:	e00a      	b.n	a23a <wsfOsDispatcher+0x7e>
      {
        WSF_ASSERT(pTimer->handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[pTimer->handlerId])(0, &pTimer->msg);
    a224:	687b      	ldr	r3, [r7, #4]
    a226:	7a1b      	ldrb	r3, [r3, #8]
    a228:	461a      	mov	r2, r3
    a22a:	693b      	ldr	r3, [r7, #16]
    a22c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a230:	687a      	ldr	r2, [r7, #4]
    a232:	320a      	adds	r2, #10
    a234:	4611      	mov	r1, r2
    a236:	2000      	movs	r0, #0
    a238:	4798      	blx	r3
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
    a23a:	2000      	movs	r0, #0
    a23c:	f001 f82c 	bl	b298 <WsfTimerServiceExpired>
    a240:	6078      	str	r0, [r7, #4]
    a242:	687b      	ldr	r3, [r7, #4]
    a244:	2b00      	cmp	r3, #0
    a246:	d1ed      	bne.n	a224 <wsfOsDispatcher+0x68>
      }
    }

    if (taskEventMask & WSF_HANDLER_EVENT)
    a248:	7bfb      	ldrb	r3, [r7, #15]
    a24a:	f003 0304 	and.w	r3, r3, #4
    a24e:	2b00      	cmp	r3, #0
    a250:	d02d      	beq.n	a2ae <wsfOsDispatcher+0xf2>
    {
      /* service handlers */
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
    a252:	2300      	movs	r3, #0
    a254:	75fb      	strb	r3, [r7, #23]
    a256:	e027      	b.n	a2a8 <wsfOsDispatcher+0xec>
      {
        if ((pTask->handlerEventMask[i] != 0) && (pTask->handler[i] != NULL))
    a258:	7dfb      	ldrb	r3, [r7, #23]
    a25a:	693a      	ldr	r2, [r7, #16]
    a25c:	4413      	add	r3, r2
    a25e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a262:	2b00      	cmp	r3, #0
    a264:	d01d      	beq.n	a2a2 <wsfOsDispatcher+0xe6>
    a266:	7dfa      	ldrb	r2, [r7, #23]
    a268:	693b      	ldr	r3, [r7, #16]
    a26a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a26e:	2b00      	cmp	r3, #0
    a270:	d017      	beq.n	a2a2 <wsfOsDispatcher+0xe6>
        {
          WSF_CS_ENTER(cs);
    a272:	f7ff fedd 	bl	a030 <WsfCsEnter>
          eventMask = pTask->handlerEventMask[i];
    a276:	7dfb      	ldrb	r3, [r7, #23]
    a278:	693a      	ldr	r2, [r7, #16]
    a27a:	4413      	add	r3, r2
    a27c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a280:	70fb      	strb	r3, [r7, #3]
          pTask->handlerEventMask[i] = 0;
    a282:	7dfb      	ldrb	r3, [r7, #23]
    a284:	693a      	ldr	r2, [r7, #16]
    a286:	4413      	add	r3, r2
    a288:	2200      	movs	r2, #0
    a28a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          WSF_CS_EXIT(cs);
    a28e:	f7ff fee3 	bl	a058 <WsfCsExit>

          (*pTask->handler[i])(eventMask, NULL);
    a292:	7dfa      	ldrb	r2, [r7, #23]
    a294:	693b      	ldr	r3, [r7, #16]
    a296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a29a:	78fa      	ldrb	r2, [r7, #3]
    a29c:	2100      	movs	r1, #0
    a29e:	4610      	mov	r0, r2
    a2a0:	4798      	blx	r3
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
    a2a2:	7dfb      	ldrb	r3, [r7, #23]
    a2a4:	3301      	adds	r3, #1
    a2a6:	75fb      	strb	r3, [r7, #23]
    a2a8:	7dfb      	ldrb	r3, [r7, #23]
    a2aa:	2b08      	cmp	r3, #8
    a2ac:	d9d4      	bls.n	a258 <wsfOsDispatcher+0x9c>
  while (pTask->taskEventMask)
    a2ae:	693b      	ldr	r3, [r7, #16]
    a2b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    a2b4:	2b00      	cmp	r3, #0
    a2b6:	d187      	bne.n	a1c8 <wsfOsDispatcher+0xc>
        }
      }
    }
  }
}
    a2b8:	bf00      	nop
    a2ba:	3718      	adds	r7, #24
    a2bc:	46bd      	mov	sp, r7
    a2be:	bd80      	pop	{r7, pc}
    a2c0:	10002744 	.word	0x10002744

0000a2c4 <WsfPacketTrace>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfPacketTrace(uint8_t ui8Type, uint32_t ui32Len, uint8_t *pui8Buf)
{
    a2c4:	b580      	push	{r7, lr}
    a2c6:	b086      	sub	sp, #24
    a2c8:	af00      	add	r7, sp, #0
    a2ca:	4603      	mov	r3, r0
    a2cc:	60b9      	str	r1, [r7, #8]
    a2ce:	607a      	str	r2, [r7, #4]
    a2d0:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  am_util_debug_printf("%02X ", ui8Type);
    a2d2:	7bfb      	ldrb	r3, [r7, #15]
    a2d4:	4619      	mov	r1, r3
    a2d6:	4812      	ldr	r0, [pc, #72]	; (a320 <WsfPacketTrace+0x5c>)
    a2d8:	f003 fdce 	bl	de78 <am_util_stdio_printf>

  for(i = 0; i < ui32Len; i++)
    a2dc:	2300      	movs	r3, #0
    a2de:	617b      	str	r3, [r7, #20]
    a2e0:	e012      	b.n	a308 <WsfPacketTrace+0x44>
  {
    if ((i % 8) == 0)
    a2e2:	697b      	ldr	r3, [r7, #20]
    a2e4:	f003 0307 	and.w	r3, r3, #7
    a2e8:	2b00      	cmp	r3, #0
    a2ea:	d102      	bne.n	a2f2 <WsfPacketTrace+0x2e>
    {
      am_util_debug_printf("\n");
    a2ec:	480d      	ldr	r0, [pc, #52]	; (a324 <WsfPacketTrace+0x60>)
    a2ee:	f003 fdc3 	bl	de78 <am_util_stdio_printf>
    }

    am_util_debug_printf("%02X ", *pui8Buf++);
    a2f2:	687b      	ldr	r3, [r7, #4]
    a2f4:	1c5a      	adds	r2, r3, #1
    a2f6:	607a      	str	r2, [r7, #4]
    a2f8:	781b      	ldrb	r3, [r3, #0]
    a2fa:	4619      	mov	r1, r3
    a2fc:	4808      	ldr	r0, [pc, #32]	; (a320 <WsfPacketTrace+0x5c>)
    a2fe:	f003 fdbb 	bl	de78 <am_util_stdio_printf>
  for(i = 0; i < ui32Len; i++)
    a302:	697b      	ldr	r3, [r7, #20]
    a304:	3301      	adds	r3, #1
    a306:	617b      	str	r3, [r7, #20]
    a308:	697a      	ldr	r2, [r7, #20]
    a30a:	68bb      	ldr	r3, [r7, #8]
    a30c:	429a      	cmp	r2, r3
    a30e:	d3e8      	bcc.n	a2e2 <WsfPacketTrace+0x1e>
  }

  am_util_debug_printf("\n\n");
    a310:	4805      	ldr	r0, [pc, #20]	; (a328 <WsfPacketTrace+0x64>)
    a312:	f003 fdb1 	bl	de78 <am_util_stdio_printf>
}
    a316:	bf00      	nop
    a318:	3718      	adds	r7, #24
    a31a:	46bd      	mov	sp, r7
    a31c:	bd80      	pop	{r7, pc}
    a31e:	bf00      	nop
    a320:	0000ff1c 	.word	0x0000ff1c
    a324:	0000ff24 	.word	0x0000ff24
    a328:	0000ff28 	.word	0x0000ff28

0000a32c <WsfTrace>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTrace(const char *pStr, ...)
{
    a32c:	b40f      	push	{r0, r1, r2, r3}
    a32e:	b580      	push	{r7, lr}
    a330:	b0c2      	sub	sp, #264	; 0x108
    a332:	af00      	add	r7, sp, #0
  char pTraceMsg[AM_PRINTF_BUFSIZE];
  uint32_t ui32NumChars;
  va_list           args;

  va_start(args, pStr);
    a334:	f507 728a 	add.w	r2, r7, #276	; 0x114
    a338:	463b      	mov	r3, r7
    a33a:	601a      	str	r2, [r3, #0]
  am_util_stdio_vsprintf(pTraceMsg, pStr, args);
    a33c:	463b      	mov	r3, r7
    a33e:	1d38      	adds	r0, r7, #4
    a340:	681a      	ldr	r2, [r3, #0]
    a342:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
    a346:	f003 fa91 	bl	d86c <am_util_stdio_vsprintf>
  //vprintf(pStr, args);
  va_end(args);
  ui32NumChars = am_util_debug_printf(pTraceMsg);
    a34a:	1d3b      	adds	r3, r7, #4
    a34c:	4618      	mov	r0, r3
    a34e:	f003 fd93 	bl	de78 <am_util_stdio_printf>
    a352:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  if (!(ui32NumChars < AM_PRINTF_BUFSIZE))
    a356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
    a35a:	2bff      	cmp	r3, #255	; 0xff
    a35c:	d903      	bls.n	a366 <WsfTrace+0x3a>
    WsfAssert(__FILE__, (uint16_t) __LINE__);
    a35e:	2183      	movs	r1, #131	; 0x83
    a360:	4806      	ldr	r0, [pc, #24]	; (a37c <WsfTrace+0x50>)
    a362:	f7ff fe51 	bl	a008 <WsfAssert>
  am_util_debug_printf("\n");
    a366:	4806      	ldr	r0, [pc, #24]	; (a380 <WsfTrace+0x54>)
    a368:	f003 fd86 	bl	de78 <am_util_stdio_printf>
}
    a36c:	bf00      	nop
    a36e:	f507 7784 	add.w	r7, r7, #264	; 0x108
    a372:	46bd      	mov	sp, r7
    a374:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    a378:	b004      	add	sp, #16
    a37a:	4770      	bx	lr
    a37c:	0000ff2c 	.word	0x0000ff2c
    a380:	0000ff24 	.word	0x0000ff24

0000a384 <appProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appProcMsg(wsfMsgHdr_t *pMsg)
{
    a384:	b580      	push	{r7, lr}
    a386:	b082      	sub	sp, #8
    a388:	af00      	add	r7, sp, #0
    a38a:	6078      	str	r0, [r7, #4]
  switch(pMsg->event)
    a38c:	687b      	ldr	r3, [r7, #4]
    a38e:	789b      	ldrb	r3, [r3, #2]
    a390:	2b00      	cmp	r3, #0
    a392:	d002      	beq.n	a39a <appProcMsg+0x16>
    a394:	2b01      	cmp	r3, #1
    a396:	d003      	beq.n	a3a0 <appProcMsg+0x1c>
    case APP_UI_TIMER_IND:
      appUiTimerExpired(pMsg);
      break;
            
    default:
      break;
    a398:	e006      	b.n	a3a8 <appProcMsg+0x24>
      appUiBtnPoll();
    a39a:	f002 f9bf 	bl	c71c <appUiBtnPoll>
      break;
    a39e:	e003      	b.n	a3a8 <appProcMsg+0x24>
      appUiTimerExpired(pMsg);
    a3a0:	6878      	ldr	r0, [r7, #4]
    a3a2:	f002 f9b1 	bl	c708 <appUiTimerExpired>
      break;
    a3a6:	bf00      	nop
  }
}
    a3a8:	bf00      	nop
    a3aa:	3708      	adds	r7, #8
    a3ac:	46bd      	mov	sp, r7
    a3ae:	bd80      	pop	{r7, pc}

0000a3b0 <AppHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandlerInit(wsfHandlerId_t handlerId)
{
    a3b0:	b580      	push	{r7, lr}
    a3b2:	b082      	sub	sp, #8
    a3b4:	af00      	add	r7, sp, #0
    a3b6:	4603      	mov	r3, r0
    a3b8:	71fb      	strb	r3, [r7, #7]
  appHandlerId = handlerId;
    a3ba:	4a04      	ldr	r2, [pc, #16]	; (a3cc <AppHandlerInit+0x1c>)
    a3bc:	79fb      	ldrb	r3, [r7, #7]
    a3be:	7013      	strb	r3, [r2, #0]
  
  AppDbInit();
    a3c0:	f002 f99b 	bl	c6fa <AppDbInit>
}
    a3c4:	bf00      	nop
    a3c6:	3708      	adds	r7, #8
    a3c8:	46bd      	mov	sp, r7
    a3ca:	bd80      	pop	{r7, pc}
    a3cc:	1000279c 	.word	0x1000279c

0000a3d0 <AppHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
    a3d0:	b580      	push	{r7, lr}
    a3d2:	b082      	sub	sp, #8
    a3d4:	af00      	add	r7, sp, #0
    a3d6:	4603      	mov	r3, r0
    a3d8:	6039      	str	r1, [r7, #0]
    a3da:	71fb      	strb	r3, [r7, #7]
  if (pMsg != NULL)
    a3dc:	683b      	ldr	r3, [r7, #0]
    a3de:	2b00      	cmp	r3, #0
    a3e0:	d01b      	beq.n	a41a <AppHandler+0x4a>
  {
    APP_TRACE_INFO1("App got evt %d", pMsg->event);
    a3e2:	683b      	ldr	r3, [r7, #0]
    a3e4:	789b      	ldrb	r3, [r3, #2]
    a3e6:	4619      	mov	r1, r3
    a3e8:	4811      	ldr	r0, [pc, #68]	; (a430 <AppHandler+0x60>)
    a3ea:	f7ff ff9f 	bl	a32c <WsfTrace>
    
    if (pMsg->event >= APP_MASTER_MSG_START)
    a3ee:	683b      	ldr	r3, [r7, #0]
    a3f0:	789b      	ldrb	r3, [r3, #2]
    a3f2:	2b1f      	cmp	r3, #31
    a3f4:	d904      	bls.n	a400 <AppHandler+0x30>
    {
      /* pass event to master handler */
      (*appCb.masterCback)(pMsg);    
    a3f6:	4b0f      	ldr	r3, [pc, #60]	; (a434 <AppHandler+0x64>)
    a3f8:	685b      	ldr	r3, [r3, #4]
    a3fa:	6838      	ldr	r0, [r7, #0]
    a3fc:	4798      	blx	r3
    if (event & APP_BTN_DOWN_EVT)
    {
      AppUiBtnPressed();
    }
  }
}
    a3fe:	e013      	b.n	a428 <AppHandler+0x58>
    else if (pMsg->event >= APP_SLAVE_MSG_START)
    a400:	683b      	ldr	r3, [r7, #0]
    a402:	789b      	ldrb	r3, [r3, #2]
    a404:	2b0f      	cmp	r3, #15
    a406:	d904      	bls.n	a412 <AppHandler+0x42>
      (*appCb.slaveCback)(pMsg);    
    a408:	4b0a      	ldr	r3, [pc, #40]	; (a434 <AppHandler+0x64>)
    a40a:	681b      	ldr	r3, [r3, #0]
    a40c:	6838      	ldr	r0, [r7, #0]
    a40e:	4798      	blx	r3
}
    a410:	e00a      	b.n	a428 <AppHandler+0x58>
      appProcMsg(pMsg);
    a412:	6838      	ldr	r0, [r7, #0]
    a414:	f7ff ffb6 	bl	a384 <appProcMsg>
}
    a418:	e006      	b.n	a428 <AppHandler+0x58>
    if (event & APP_BTN_DOWN_EVT)
    a41a:	79fb      	ldrb	r3, [r7, #7]
    a41c:	f003 0310 	and.w	r3, r3, #16
    a420:	2b00      	cmp	r3, #0
    a422:	d001      	beq.n	a428 <AppHandler+0x58>
      AppUiBtnPressed();
    a424:	f002 f981 	bl	c72a <AppUiBtnPressed>
}
    a428:	bf00      	nop
    a42a:	3708      	adds	r7, #8
    a42c:	46bd      	mov	sp, r7
    a42e:	bd80      	pop	{r7, pc}
    a430:	0000ff74 	.word	0x0000ff74
    a434:	1000278c 	.word	0x1000278c

0000a438 <getNextToken>:
 *
 *  \return Token value.
 */
/*************************************************************************************************/
static uint8_t getNextToken()
{
    a438:	b480      	push	{r7}
    a43a:	b083      	sub	sp, #12
    a43c:	af00      	add	r7, sp, #0
  uint8_t token = secCb.token++;
    a43e:	4b0e      	ldr	r3, [pc, #56]	; (a478 <getNextToken+0x40>)
    a440:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    a444:	1c5a      	adds	r2, r3, #1
    a446:	b2d1      	uxtb	r1, r2
    a448:	4a0b      	ldr	r2, [pc, #44]	; (a478 <getNextToken+0x40>)
    a44a:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    a44e:	71fb      	strb	r3, [r7, #7]

  if (token == SEC_TOKEN_INVALID)
    a450:	79fb      	ldrb	r3, [r7, #7]
    a452:	2bff      	cmp	r3, #255	; 0xff
    a454:	d108      	bne.n	a468 <getNextToken+0x30>
  {
    token = secCb.token++;
    a456:	4b08      	ldr	r3, [pc, #32]	; (a478 <getNextToken+0x40>)
    a458:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    a45c:	1c5a      	adds	r2, r3, #1
    a45e:	b2d1      	uxtb	r1, r2
    a460:	4a05      	ldr	r2, [pc, #20]	; (a478 <getNextToken+0x40>)
    a462:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    a466:	71fb      	strb	r3, [r7, #7]
  }

  return token;
    a468:	79fb      	ldrb	r3, [r7, #7]
}
    a46a:	4618      	mov	r0, r3
    a46c:	370c      	adds	r7, #12
    a46e:	46bd      	mov	sp, r7
    a470:	f85d 7b04 	ldr.w	r7, [sp], #4
    a474:	4770      	bx	lr
    a476:	bf00      	nop
    a478:	100028b0 	.word	0x100028b0

0000a47c <SecAes>:
 *  \return Token value.
 */
/*************************************************************************************************/
uint8_t SecAes(uint8_t *pKey, uint8_t *pPlaintext, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
    a47c:	b580      	push	{r7, lr}
    a47e:	b086      	sub	sp, #24
    a480:	af00      	add	r7, sp, #0
    a482:	60f8      	str	r0, [r7, #12]
    a484:	60b9      	str	r1, [r7, #8]
    a486:	4611      	mov	r1, r2
    a488:	461a      	mov	r2, r3
    a48a:	460b      	mov	r3, r1
    a48c:	71fb      	strb	r3, [r7, #7]
    a48e:	4613      	mov	r3, r2
    a490:	80bb      	strh	r3, [r7, #4]
  secQueueBuf_t  *pBuf;
  
  /* allocate a buffer */
  if ((pBuf = WsfMsgAlloc(sizeof(secQueueBuf_t))) != NULL)
    a492:	2030      	movs	r0, #48	; 0x30
    a494:	f000 fcc3 	bl	ae1e <WsfMsgAlloc>
    a498:	6178      	str	r0, [r7, #20]
    a49a:	697b      	ldr	r3, [r7, #20]
    a49c:	2b00      	cmp	r3, #0
    a49e:	d01d      	beq.n	a4dc <SecAes+0x60>
  {
    pBuf->msg.hdr.status = getNextToken();
    a4a0:	f7ff ffca 	bl	a438 <getNextToken>
    a4a4:	4603      	mov	r3, r0
    a4a6:	461a      	mov	r2, r3
    a4a8:	697b      	ldr	r3, [r7, #20]
    a4aa:	70da      	strb	r2, [r3, #3]
    pBuf->msg.hdr.param = param;
    a4ac:	697b      	ldr	r3, [r7, #20]
    a4ae:	88ba      	ldrh	r2, [r7, #4]
    a4b0:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
    a4b2:	697b      	ldr	r3, [r7, #20]
    a4b4:	f897 2020 	ldrb.w	r2, [r7, #32]
    a4b8:	709a      	strb	r2, [r3, #2]
   
    pBuf->type = SEC_TYPE_AES;
    a4ba:	697b      	ldr	r3, [r7, #20]
    a4bc:	2200      	movs	r2, #0
    a4be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
    a4c2:	79fb      	ldrb	r3, [r7, #7]
    a4c4:	697a      	ldr	r2, [r7, #20]
    a4c6:	4619      	mov	r1, r3
    a4c8:	4807      	ldr	r0, [pc, #28]	; (a4e8 <SecAes+0x6c>)
    a4ca:	f000 fce4 	bl	ae96 <WsfMsgEnq>
    
    /* call HCI encrypt function */
    HciLeEncryptCmd(pKey, pPlaintext);
    a4ce:	68b9      	ldr	r1, [r7, #8]
    a4d0:	68f8      	ldr	r0, [r7, #12]
    a4d2:	f7fc f9fd 	bl	68d0 <HciLeEncryptCmd>

    return pBuf->msg.hdr.status;
    a4d6:	697b      	ldr	r3, [r7, #20]
    a4d8:	78db      	ldrb	r3, [r3, #3]
    a4da:	e000      	b.n	a4de <SecAes+0x62>
  }
  
  return SEC_TOKEN_INVALID;
    a4dc:	23ff      	movs	r3, #255	; 0xff
}
    a4de:	4618      	mov	r0, r3
    a4e0:	3718      	adds	r7, #24
    a4e2:	46bd      	mov	sp, r7
    a4e4:	bd80      	pop	{r7, pc}
    a4e6:	bf00      	nop
    a4e8:	100028d0 	.word	0x100028d0

0000a4ec <SecAesHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecAesHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
    a4ec:	b580      	push	{r7, lr}
    a4ee:	b086      	sub	sp, #24
    a4f0:	af00      	add	r7, sp, #0
    a4f2:	60f8      	str	r0, [r7, #12]
    a4f4:	60b9      	str	r1, [r7, #8]
    a4f6:	4613      	mov	r3, r2
    a4f8:	71fb      	strb	r3, [r7, #7]
  secAes_t *pAes = (secAes_t *) &pBuf->msg;
    a4fa:	68fb      	ldr	r3, [r7, #12]
    a4fc:	617b      	str	r3, [r7, #20]
  
  /* set encrypted data pointer and copy */
  pAes->pCiphertext = pBuf->ciphertext;
    a4fe:	68fb      	ldr	r3, [r7, #12]
    a500:	f103 0208 	add.w	r2, r3, #8
    a504:	697b      	ldr	r3, [r7, #20]
    a506:	605a      	str	r2, [r3, #4]
  Calc128Cpy(pAes->pCiphertext, pEvent->leEncryptCmdCmpl.data);
    a508:	697b      	ldr	r3, [r7, #20]
    a50a:	685a      	ldr	r2, [r3, #4]
    a50c:	68bb      	ldr	r3, [r7, #8]
    a50e:	3305      	adds	r3, #5
    a510:	4619      	mov	r1, r3
    a512:	4610      	mov	r0, r2
    a514:	f002 fcfd 	bl	cf12 <Calc128Cpy>

  /* send message */
  WsfMsgSend(handlerId, pAes);
    a518:	79fb      	ldrb	r3, [r7, #7]
    a51a:	6979      	ldr	r1, [r7, #20]
    a51c:	4618      	mov	r0, r3
    a51e:	f000 fca2 	bl	ae66 <WsfMsgSend>
}
    a522:	bf00      	nop
    a524:	3718      	adds	r7, #24
    a526:	46bd      	mov	sp, r7
    a528:	bd80      	pop	{r7, pc}
	...

0000a52c <SecAesInit>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecAesInit()
{
    a52c:	b480      	push	{r7}
    a52e:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_AES] = SecAesHciCback;
    a530:	4b03      	ldr	r3, [pc, #12]	; (a540 <SecAesInit+0x14>)
    a532:	4a04      	ldr	r2, [pc, #16]	; (a544 <SecAesInit+0x18>)
    a534:	62da      	str	r2, [r3, #44]	; 0x2c
}
    a536:	bf00      	nop
    a538:	46bd      	mov	sp, r7
    a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a53e:	4770      	bx	lr
    a540:	100028b0 	.word	0x100028b0
    a544:	0000a4ed 	.word	0x0000a4ed

0000a548 <secCmacProcessBlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacProcessBlock(secQueueBuf_t *pBuf)
{
    a548:	b580      	push	{r7, lr}
    a54a:	b08a      	sub	sp, #40	; 0x28
    a54c:	af00      	add	r7, sp, #0
    a54e:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
    a550:	687b      	ldr	r3, [r7, #4]
    a552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a554:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t buf[SEC_BLOCK_LEN];
  uint8_t *pMn = pCmac->pPlainText + pCmac->position;
    a556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a558:	681b      	ldr	r3, [r3, #0]
    a55a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a55c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    a55e:	4413      	add	r3, r2
    a560:	623b      	str	r3, [r7, #32]
  int8_t remaining = (int16_t) pCmac->len - pCmac->position;
    a562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a564:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    a566:	b2da      	uxtb	r2, r3
    a568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a56a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    a56c:	b2db      	uxtb	r3, r3
    a56e:	1ad3      	subs	r3, r2, r3
    a570:	b2db      	uxtb	r3, r3
    a572:	77fb      	strb	r3, [r7, #31]

  /* Check for Last Block */
  if (remaining <= SEC_BLOCK_LEN)
    a574:	f997 301f 	ldrsb.w	r3, [r7, #31]
    a578:	2b10      	cmp	r3, #16
    a57a:	dc2d      	bgt.n	a5d8 <secCmacProcessBlock+0x90>
  {
    WStrReverseCpy(buf, pMn, SEC_BLOCK_LEN);
    a57c:	f107 030c 	add.w	r3, r7, #12
    a580:	2210      	movs	r2, #16
    a582:	6a39      	ldr	r1, [r7, #32]
    a584:	4618      	mov	r0, r3
    a586:	f002 fcff 	bl	cf88 <WStrReverseCpy>

    /* Pad the message if necessary */
    if (remaining != SEC_BLOCK_LEN)
    a58a:	f997 301f 	ldrsb.w	r3, [r7, #31]
    a58e:	2b10      	cmp	r3, #16
    a590:	d014      	beq.n	a5bc <secCmacProcessBlock+0x74>
    {
      memset(buf, 0, SEC_BLOCK_LEN - remaining);
    a592:	f997 301f 	ldrsb.w	r3, [r7, #31]
    a596:	f1c3 0310 	rsb	r3, r3, #16
    a59a:	461a      	mov	r2, r3
    a59c:	f107 030c 	add.w	r3, r7, #12
    a5a0:	2100      	movs	r1, #0
    a5a2:	4618      	mov	r0, r3
    a5a4:	f005 faf8 	bl	fb98 <memset>
      buf[SEC_BLOCK_LEN-remaining-1] = 0x80;
    a5a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
    a5ac:	f1c3 030f 	rsb	r3, r3, #15
    a5b0:	f107 0228 	add.w	r2, r7, #40	; 0x28
    a5b4:	4413      	add	r3, r2
    a5b6:	2280      	movs	r2, #128	; 0x80
    a5b8:	f803 2c1c 	strb.w	r2, [r3, #-28]
    }

    /* XOr the subkey */
    Calc128Xor(buf, pCmac->subkey);
    a5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a5be:	f103 0214 	add.w	r2, r3, #20
    a5c2:	f107 030c 	add.w	r3, r7, #12
    a5c6:	4611      	mov	r1, r2
    a5c8:	4618      	mov	r0, r3
    a5ca:	f002 fcbe 	bl	cf4a <Calc128Xor>
    pCmac->state = SEC_CMAC_STATE_COMPLETE;
    a5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a5d0:	2202      	movs	r2, #2
    a5d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    a5d6:	e006      	b.n	a5e6 <secCmacProcessBlock+0x9e>
  }
  else
  {
    /* Copy the block to the buffer */
    WStrReverseCpy(buf, pMn, SEC_BLOCK_LEN);
    a5d8:	f107 030c 	add.w	r3, r7, #12
    a5dc:	2210      	movs	r2, #16
    a5de:	6a39      	ldr	r1, [r7, #32]
    a5e0:	4618      	mov	r0, r3
    a5e2:	f002 fcd1 	bl	cf88 <WStrReverseCpy>
  }

  if (pCmac->position != 0)
    a5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a5e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    a5ea:	2b00      	cmp	r3, #0
    a5ec:	d008      	beq.n	a600 <secCmacProcessBlock+0xb8>
  {
    /* Except for first block, XOr the previous AES calculation */
    Calc128Xor(buf, pBuf->ciphertext);
    a5ee:	687b      	ldr	r3, [r7, #4]
    a5f0:	f103 0208 	add.w	r2, r3, #8
    a5f4:	f107 030c 	add.w	r3, r7, #12
    a5f8:	4611      	mov	r1, r2
    a5fa:	4618      	mov	r0, r3
    a5fc:	f002 fca5 	bl	cf4a <Calc128Xor>
  }

  pCmac->position += SEC_BLOCK_LEN;
    a600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a602:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    a604:	3310      	adds	r3, #16
    a606:	b29a      	uxth	r2, r3
    a608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a60a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Enqueue and perform AES operation */
  WsfMsgEnq(&secCb.queue, pCmac->handlerId, pBuf);
    a60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a60e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    a612:	687a      	ldr	r2, [r7, #4]
    a614:	4619      	mov	r1, r3
    a616:	4807      	ldr	r0, [pc, #28]	; (a634 <secCmacProcessBlock+0xec>)
    a618:	f000 fc3d 	bl	ae96 <WsfMsgEnq>
  HciLeEncryptCmd(pCmac->key, buf);
    a61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a61e:	3304      	adds	r3, #4
    a620:	f107 020c 	add.w	r2, r7, #12
    a624:	4611      	mov	r1, r2
    a626:	4618      	mov	r0, r3
    a628:	f7fc f952 	bl	68d0 <HciLeEncryptCmd>
}
    a62c:	bf00      	nop
    a62e:	3728      	adds	r7, #40	; 0x28
    a630:	46bd      	mov	sp, r7
    a632:	bd80      	pop	{r7, pc}
    a634:	100028d0 	.word	0x100028d0

0000a638 <secCmacGenSubkey1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacGenSubkey1(secQueueBuf_t *pBuf)
{
    a638:	b580      	push	{r7, lr}
    a63a:	b088      	sub	sp, #32
    a63c:	af00      	add	r7, sp, #0
    a63e:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
    a640:	687b      	ldr	r3, [r7, #4]
    a642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a644:	61fb      	str	r3, [r7, #28]
  uint8_t buf[SEC_BLOCK_LEN];

  /* Perform aes on the key with a constant zero */
  memset(buf, 0, SEC_BLOCK_LEN);
    a646:	f107 030c 	add.w	r3, r7, #12
    a64a:	2210      	movs	r2, #16
    a64c:	2100      	movs	r1, #0
    a64e:	4618      	mov	r0, r3
    a650:	f005 faa2 	bl	fb98 <memset>

  WsfMsgEnq(&secCb.queue, pCmac->handlerId, pBuf);
    a654:	69fb      	ldr	r3, [r7, #28]
    a656:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    a65a:	687a      	ldr	r2, [r7, #4]
    a65c:	4619      	mov	r1, r3
    a65e:	4807      	ldr	r0, [pc, #28]	; (a67c <secCmacGenSubkey1+0x44>)
    a660:	f000 fc19 	bl	ae96 <WsfMsgEnq>
  HciLeEncryptCmd(pCmac->key, buf);
    a664:	69fb      	ldr	r3, [r7, #28]
    a666:	3304      	adds	r3, #4
    a668:	f107 020c 	add.w	r2, r7, #12
    a66c:	4611      	mov	r1, r2
    a66e:	4618      	mov	r0, r3
    a670:	f7fc f92e 	bl	68d0 <HciLeEncryptCmd>
}
    a674:	bf00      	nop
    a676:	3720      	adds	r7, #32
    a678:	46bd      	mov	sp, r7
    a67a:	bd80      	pop	{r7, pc}
    a67c:	100028d0 	.word	0x100028d0

0000a680 <secCmacKeyShift>:
 *
 *  \return The overflow of the operaiton.
 */
/*************************************************************************************************/
static uint8_t secCmacKeyShift(uint8_t *pBuf, uint8_t shift)
{
    a680:	b480      	push	{r7}
    a682:	b085      	sub	sp, #20
    a684:	af00      	add	r7, sp, #0
    a686:	6078      	str	r0, [r7, #4]
    a688:	460b      	mov	r3, r1
    a68a:	70fb      	strb	r3, [r7, #3]
  uint8_t bits, i, prevBits = 0;
    a68c:	2300      	movs	r3, #0
    a68e:	73bb      	strb	r3, [r7, #14]

  for (i = 0; i < SEC_CMAC_KEY_LEN; i++)
    a690:	2300      	movs	r3, #0
    a692:	73fb      	strb	r3, [r7, #15]
    a694:	e021      	b.n	a6da <secCmacKeyShift+0x5a>
  {
    /* store shifted bits for next byte */
    bits = pBuf[i] >> (8 - shift);
    a696:	7bfb      	ldrb	r3, [r7, #15]
    a698:	687a      	ldr	r2, [r7, #4]
    a69a:	4413      	add	r3, r2
    a69c:	781b      	ldrb	r3, [r3, #0]
    a69e:	461a      	mov	r2, r3
    a6a0:	78fb      	ldrb	r3, [r7, #3]
    a6a2:	f1c3 0308 	rsb	r3, r3, #8
    a6a6:	fa42 f303 	asr.w	r3, r2, r3
    a6aa:	737b      	strb	r3, [r7, #13]

    /* shift byte and OR in shifted bits from previous byte */
    pBuf[i] = (pBuf[i] << shift) | prevBits;
    a6ac:	7bfb      	ldrb	r3, [r7, #15]
    a6ae:	687a      	ldr	r2, [r7, #4]
    a6b0:	4413      	add	r3, r2
    a6b2:	7bfa      	ldrb	r2, [r7, #15]
    a6b4:	6879      	ldr	r1, [r7, #4]
    a6b6:	440a      	add	r2, r1
    a6b8:	7812      	ldrb	r2, [r2, #0]
    a6ba:	4611      	mov	r1, r2
    a6bc:	78fa      	ldrb	r2, [r7, #3]
    a6be:	fa01 f202 	lsl.w	r2, r1, r2
    a6c2:	b251      	sxtb	r1, r2
    a6c4:	f997 200e 	ldrsb.w	r2, [r7, #14]
    a6c8:	430a      	orrs	r2, r1
    a6ca:	b252      	sxtb	r2, r2
    a6cc:	b2d2      	uxtb	r2, r2
    a6ce:	701a      	strb	r2, [r3, #0]

    prevBits = bits;
    a6d0:	7b7b      	ldrb	r3, [r7, #13]
    a6d2:	73bb      	strb	r3, [r7, #14]
  for (i = 0; i < SEC_CMAC_KEY_LEN; i++)
    a6d4:	7bfb      	ldrb	r3, [r7, #15]
    a6d6:	3301      	adds	r3, #1
    a6d8:	73fb      	strb	r3, [r7, #15]
    a6da:	7bfb      	ldrb	r3, [r7, #15]
    a6dc:	2b0f      	cmp	r3, #15
    a6de:	d9da      	bls.n	a696 <secCmacKeyShift+0x16>
  }

  return prevBits;
    a6e0:	7bbb      	ldrb	r3, [r7, #14]
}
    a6e2:	4618      	mov	r0, r3
    a6e4:	3714      	adds	r7, #20
    a6e6:	46bd      	mov	sp, r7
    a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a6ec:	4770      	bx	lr

0000a6ee <secCmacGenSubkey2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacGenSubkey2(secQueueBuf_t *pBuf)
{
    a6ee:	b580      	push	{r7, lr}
    a6f0:	b084      	sub	sp, #16
    a6f2:	af00      	add	r7, sp, #0
    a6f4:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
    a6f6:	687b      	ldr	r3, [r7, #4]
    a6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a6fa:	60fb      	str	r3, [r7, #12]
  uint8_t overflow;

  /* Copy the result of the AES oepration */
  Calc128Cpy(pCmac->subkey, pBuf->ciphertext);
    a6fc:	68fb      	ldr	r3, [r7, #12]
    a6fe:	f103 0214 	add.w	r2, r3, #20
    a702:	687b      	ldr	r3, [r7, #4]
    a704:	3308      	adds	r3, #8
    a706:	4619      	mov	r1, r3
    a708:	4610      	mov	r0, r2
    a70a:	f002 fc02 	bl	cf12 <Calc128Cpy>

  /* Calculate the K1 subkey */
  overflow = secCmacKeyShift(pCmac->subkey, 1);
    a70e:	68fb      	ldr	r3, [r7, #12]
    a710:	3314      	adds	r3, #20
    a712:	2101      	movs	r1, #1
    a714:	4618      	mov	r0, r3
    a716:	f7ff ffb3 	bl	a680 <secCmacKeyShift>
    a71a:	4603      	mov	r3, r0
    a71c:	72fb      	strb	r3, [r7, #11]

  if (overflow)
    a71e:	7afb      	ldrb	r3, [r7, #11]
    a720:	2b00      	cmp	r3, #0
    a722:	d007      	beq.n	a734 <secCmacGenSubkey2+0x46>
  {
    pCmac->subkey[0] ^= SEC_CMAC_RB;
    a724:	68fb      	ldr	r3, [r7, #12]
    a726:	7d1b      	ldrb	r3, [r3, #20]
    a728:	f083 0378 	eor.w	r3, r3, #120	; 0x78
    a72c:	43db      	mvns	r3, r3
    a72e:	b2da      	uxtb	r2, r3
    a730:	68fb      	ldr	r3, [r7, #12]
    a732:	751a      	strb	r2, [r3, #20]
  }

  if (pCmac->len % SEC_BLOCK_LEN != 0)
    a734:	68fb      	ldr	r3, [r7, #12]
    a736:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    a738:	f003 030f 	and.w	r3, r3, #15
    a73c:	b29b      	uxth	r3, r3
    a73e:	2b00      	cmp	r3, #0
    a740:	d012      	beq.n	a768 <secCmacGenSubkey2+0x7a>
  {
    /* If the message len is not a multiple of SEC_BLOCK_LEN */
    /* Continue with generation of the K2 subkey based on the K1 key */
    overflow = secCmacKeyShift(pCmac->subkey, 1);
    a742:	68fb      	ldr	r3, [r7, #12]
    a744:	3314      	adds	r3, #20
    a746:	2101      	movs	r1, #1
    a748:	4618      	mov	r0, r3
    a74a:	f7ff ff99 	bl	a680 <secCmacKeyShift>
    a74e:	4603      	mov	r3, r0
    a750:	72fb      	strb	r3, [r7, #11]

    if (overflow)
    a752:	7afb      	ldrb	r3, [r7, #11]
    a754:	2b00      	cmp	r3, #0
    a756:	d007      	beq.n	a768 <secCmacGenSubkey2+0x7a>
    {
      pCmac->subkey[0] ^= SEC_CMAC_RB;
    a758:	68fb      	ldr	r3, [r7, #12]
    a75a:	7d1b      	ldrb	r3, [r3, #20]
    a75c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
    a760:	43db      	mvns	r3, r3
    a762:	b2da      	uxtb	r2, r3
    a764:	68fb      	ldr	r3, [r7, #12]
    a766:	751a      	strb	r2, [r3, #20]
    }
  }

  /* Begin CMAC calculation */
  pCmac->state = SEC_CMAC_STATE_BLOCK;
    a768:	68fb      	ldr	r3, [r7, #12]
    a76a:	2201      	movs	r2, #1
    a76c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  secCmacProcessBlock(pBuf);
    a770:	6878      	ldr	r0, [r7, #4]
    a772:	f7ff fee9 	bl	a548 <secCmacProcessBlock>
}
    a776:	bf00      	nop
    a778:	3710      	adds	r7, #16
    a77a:	46bd      	mov	sp, r7
    a77c:	bd80      	pop	{r7, pc}

0000a77e <secCmacComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacComplete(secQueueBuf_t *pBuf)
{
    a77e:	b580      	push	{r7, lr}
    a780:	b084      	sub	sp, #16
    a782:	af00      	add	r7, sp, #0
    a784:	6078      	str	r0, [r7, #4]
  /* CMAC is complete, copy and send result to handler */
  secCmacMsg_t *pMsg = (secCmacMsg_t *) &pBuf->msg;
    a786:	687b      	ldr	r3, [r7, #4]
    a788:	60fb      	str	r3, [r7, #12]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
    a78a:	687b      	ldr	r3, [r7, #4]
    a78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a78e:	60bb      	str	r3, [r7, #8]

  WStrReverse(pBuf->ciphertext, SEC_CMAC_KEY_LEN);
    a790:	687b      	ldr	r3, [r7, #4]
    a792:	3308      	adds	r3, #8
    a794:	2110      	movs	r1, #16
    a796:	4618      	mov	r0, r3
    a798:	f002 fc1f 	bl	cfda <WStrReverse>
  pMsg->pCiphertext = pBuf->ciphertext;
    a79c:	687b      	ldr	r3, [r7, #4]
    a79e:	f103 0208 	add.w	r2, r3, #8
    a7a2:	68fb      	ldr	r3, [r7, #12]
    a7a4:	605a      	str	r2, [r3, #4]
  WsfBufFree(pCmac->pPlainText);
    a7a6:	68bb      	ldr	r3, [r7, #8]
    a7a8:	681b      	ldr	r3, [r3, #0]
    a7aa:	4618      	mov	r0, r3
    a7ac:	f000 fae8 	bl	ad80 <WsfBufFree>

  WsfMsgSend(pCmac->handlerId, pMsg);
    a7b0:	68bb      	ldr	r3, [r7, #8]
    a7b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    a7b6:	68f9      	ldr	r1, [r7, #12]
    a7b8:	4618      	mov	r0, r3
    a7ba:	f000 fb54 	bl	ae66 <WsfMsgSend>
}
    a7be:	bf00      	nop
    a7c0:	3710      	adds	r7, #16
    a7c2:	46bd      	mov	sp, r7
    a7c4:	bd80      	pop	{r7, pc}

0000a7c6 <SecCmacHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecCmacHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
    a7c6:	b580      	push	{r7, lr}
    a7c8:	b086      	sub	sp, #24
    a7ca:	af00      	add	r7, sp, #0
    a7cc:	60f8      	str	r0, [r7, #12]
    a7ce:	60b9      	str	r1, [r7, #8]
    a7d0:	4613      	mov	r3, r2
    a7d2:	71fb      	strb	r3, [r7, #7]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t *) pBuf->pCb;
    a7d4:	68fb      	ldr	r3, [r7, #12]
    a7d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a7d8:	617b      	str	r3, [r7, #20]

  if (pCmac)
    a7da:	697b      	ldr	r3, [r7, #20]
    a7dc:	2b00      	cmp	r3, #0
    a7de:	d01e      	beq.n	a81e <SecCmacHciCback+0x58>
  {
    Calc128Cpy(pBuf->ciphertext, pEvent->leEncryptCmdCmpl.data);
    a7e0:	68fb      	ldr	r3, [r7, #12]
    a7e2:	f103 0208 	add.w	r2, r3, #8
    a7e6:	68bb      	ldr	r3, [r7, #8]
    a7e8:	3305      	adds	r3, #5
    a7ea:	4619      	mov	r1, r3
    a7ec:	4610      	mov	r0, r2
    a7ee:	f002 fb90 	bl	cf12 <Calc128Cpy>

    switch (pCmac->state)
    a7f2:	697b      	ldr	r3, [r7, #20]
    a7f4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    a7f8:	2b01      	cmp	r3, #1
    a7fa:	d008      	beq.n	a80e <SecCmacHciCback+0x48>
    a7fc:	2b02      	cmp	r3, #2
    a7fe:	d00a      	beq.n	a816 <SecCmacHciCback+0x50>
    a800:	2b00      	cmp	r3, #0
    a802:	d000      	beq.n	a806 <SecCmacHciCback+0x40>
    case SEC_CMAC_STATE_COMPLETE:
      secCmacComplete(pBuf);
      break;
    }
  }
}
    a804:	e00b      	b.n	a81e <SecCmacHciCback+0x58>
      secCmacGenSubkey2(pBuf);
    a806:	68f8      	ldr	r0, [r7, #12]
    a808:	f7ff ff71 	bl	a6ee <secCmacGenSubkey2>
      break;
    a80c:	e007      	b.n	a81e <SecCmacHciCback+0x58>
      secCmacProcessBlock(pBuf);
    a80e:	68f8      	ldr	r0, [r7, #12]
    a810:	f7ff fe9a 	bl	a548 <secCmacProcessBlock>
      break;
    a814:	e003      	b.n	a81e <SecCmacHciCback+0x58>
      secCmacComplete(pBuf);
    a816:	68f8      	ldr	r0, [r7, #12]
    a818:	f7ff ffb1 	bl	a77e <secCmacComplete>
      break;
    a81c:	bf00      	nop
}
    a81e:	bf00      	nop
    a820:	3718      	adds	r7, #24
    a822:	46bd      	mov	sp, r7
    a824:	bd80      	pop	{r7, pc}
	...

0000a828 <SecCmac>:
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecCmac(const uint8_t *pKey, uint8_t *pPlainText, uint8_t textLen, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
    a828:	b580      	push	{r7, lr}
    a82a:	b088      	sub	sp, #32
    a82c:	af00      	add	r7, sp, #0
    a82e:	60f8      	str	r0, [r7, #12]
    a830:	60b9      	str	r1, [r7, #8]
    a832:	4611      	mov	r1, r2
    a834:	461a      	mov	r2, r3
    a836:	460b      	mov	r3, r1
    a838:	71fb      	strb	r3, [r7, #7]
    a83a:	4613      	mov	r3, r2
    a83c:	71bb      	strb	r3, [r7, #6]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secCmacSecCb_t);
    a83e:	235c      	movs	r3, #92	; 0x5c
    a840:	83fb      	strh	r3, [r7, #30]

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
    a842:	8bfb      	ldrh	r3, [r7, #30]
    a844:	4618      	mov	r0, r3
    a846:	f000 faea 	bl	ae1e <WsfMsgAlloc>
    a84a:	61b8      	str	r0, [r7, #24]
    a84c:	69bb      	ldr	r3, [r7, #24]
    a84e:	2b00      	cmp	r3, #0
    a850:	d038      	beq.n	a8c4 <SecCmac+0x9c>
  {
    secCmacSecCb_t *pCmacCb = (secCmacSecCb_t *) (pBuf + 1);
    a852:	69bb      	ldr	r3, [r7, #24]
    a854:	3330      	adds	r3, #48	; 0x30
    a856:	617b      	str	r3, [r7, #20]

    /* Setup queue buffer */
    pBuf->pCb = pCmacCb;
    a858:	69bb      	ldr	r3, [r7, #24]
    a85a:	697a      	ldr	r2, [r7, #20]
    a85c:	629a      	str	r2, [r3, #40]	; 0x28
    pBuf->type = SEC_TYPE_CMAC;
    a85e:	69bb      	ldr	r3, [r7, #24]
    a860:	2201      	movs	r2, #1
    a862:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    pBuf->msg.hdr.status = secCb.token++;
    a866:	4b1a      	ldr	r3, [pc, #104]	; (a8d0 <SecCmac+0xa8>)
    a868:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    a86c:	1c5a      	adds	r2, r3, #1
    a86e:	b2d1      	uxtb	r1, r2
    a870:	4a17      	ldr	r2, [pc, #92]	; (a8d0 <SecCmac+0xa8>)
    a872:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    a876:	69ba      	ldr	r2, [r7, #24]
    a878:	70d3      	strb	r3, [r2, #3]
    pBuf->msg.hdr.param = param;
    a87a:	69bb      	ldr	r3, [r7, #24]
    a87c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    a87e:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
    a880:	69bb      	ldr	r3, [r7, #24]
    a882:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    a886:	709a      	strb	r2, [r3, #2]

    pCmacCb->pPlainText = pPlainText;
    a888:	697b      	ldr	r3, [r7, #20]
    a88a:	68ba      	ldr	r2, [r7, #8]
    a88c:	601a      	str	r2, [r3, #0]

    pCmacCb->len = textLen;
    a88e:	79fb      	ldrb	r3, [r7, #7]
    a890:	b29a      	uxth	r2, r3
    a892:	697b      	ldr	r3, [r7, #20]
    a894:	84da      	strh	r2, [r3, #38]	; 0x26
    pCmacCb->position = 0;
    a896:	697b      	ldr	r3, [r7, #20]
    a898:	2200      	movs	r2, #0
    a89a:	849a      	strh	r2, [r3, #36]	; 0x24
    pCmacCb->handlerId = handlerId;
    a89c:	697b      	ldr	r3, [r7, #20]
    a89e:	79ba      	ldrb	r2, [r7, #6]
    a8a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    pCmacCb->state = SEC_CMAC_STATE_SUBKEY;
    a8a4:	697b      	ldr	r3, [r7, #20]
    a8a6:	2200      	movs	r2, #0
    a8a8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Copy key */
    WStrReverseCpy(pCmacCb->key, pKey, SEC_CMAC_KEY_LEN);
    a8ac:	697b      	ldr	r3, [r7, #20]
    a8ae:	3304      	adds	r3, #4
    a8b0:	2210      	movs	r2, #16
    a8b2:	68f9      	ldr	r1, [r7, #12]
    a8b4:	4618      	mov	r0, r3
    a8b6:	f002 fb67 	bl	cf88 <WStrReverseCpy>

    /* Start the CMAC process by calculating the subkey */
    secCmacGenSubkey1(pBuf);
    a8ba:	69b8      	ldr	r0, [r7, #24]
    a8bc:	f7ff febc 	bl	a638 <secCmacGenSubkey1>

    return TRUE;
    a8c0:	2301      	movs	r3, #1
    a8c2:	e000      	b.n	a8c6 <SecCmac+0x9e>
  }

  return FALSE;
    a8c4:	2300      	movs	r3, #0
}
    a8c6:	4618      	mov	r0, r3
    a8c8:	3720      	adds	r7, #32
    a8ca:	46bd      	mov	sp, r7
    a8cc:	bd80      	pop	{r7, pc}
    a8ce:	bf00      	nop
    a8d0:	100028b0 	.word	0x100028b0

0000a8d4 <SecCmacInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecCmacInit()
{
    a8d4:	b480      	push	{r7}
    a8d6:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_CMAC] = SecCmacHciCback;
    a8d8:	4b03      	ldr	r3, [pc, #12]	; (a8e8 <SecCmacInit+0x14>)
    a8da:	4a04      	ldr	r2, [pc, #16]	; (a8ec <SecCmacInit+0x18>)
    a8dc:	631a      	str	r2, [r3, #48]	; 0x30
}
    a8de:	bf00      	nop
    a8e0:	46bd      	mov	sp, r7
    a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a8e6:	4770      	bx	lr
    a8e8:	100028b0 	.word	0x100028b0
    a8ec:	0000a7c7 	.word	0x0000a7c7

0000a8f0 <SecEccHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecEccHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
    a8f0:	b580      	push	{r7, lr}
    a8f2:	b086      	sub	sp, #24
    a8f4:	af00      	add	r7, sp, #0
    a8f6:	60f8      	str	r0, [r7, #12]
    a8f8:	60b9      	str	r1, [r7, #8]
    a8fa:	4613      	mov	r3, r2
    a8fc:	71fb      	strb	r3, [r7, #7]
  secEccMsg_t *pMsg = (secEccMsg_t *) &pBuf->msg;
    a8fe:	68fb      	ldr	r3, [r7, #12]
    a900:	617b      	str	r3, [r7, #20]

  if (pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT)
    a902:	68bb      	ldr	r3, [r7, #8]
    a904:	789b      	ldrb	r3, [r3, #2]
    a906:	2b25      	cmp	r3, #37	; 0x25
    a908:	d11b      	bne.n	a942 <SecEccHciCback+0x52>
  {
    /* Reverse copy the public key (to big endian) */
    WStrReverseCpy(pMsg->data.key.pubKey_x, pEvent->leP256.key, SEC_ECC_KEY_LEN);
    a90a:	697b      	ldr	r3, [r7, #20]
    a90c:	1d18      	adds	r0, r3, #4
    a90e:	68bb      	ldr	r3, [r7, #8]
    a910:	3305      	adds	r3, #5
    a912:	2220      	movs	r2, #32
    a914:	4619      	mov	r1, r3
    a916:	f002 fb37 	bl	cf88 <WStrReverseCpy>
    WStrReverseCpy(pMsg->data.key.pubKey_y, pEvent->leP256.key + SEC_ECC_KEY_LEN, SEC_ECC_KEY_LEN);
    a91a:	697b      	ldr	r3, [r7, #20]
    a91c:	f103 0024 	add.w	r0, r3, #36	; 0x24
    a920:	68bb      	ldr	r3, [r7, #8]
    a922:	3305      	adds	r3, #5
    a924:	3320      	adds	r3, #32
    a926:	2220      	movs	r2, #32
    a928:	4619      	mov	r1, r3
    a92a:	f002 fb2d 	bl	cf88 <WStrReverseCpy>

    /* Send shared secret to handler */
    pMsg->hdr.status = pEvent->leP256.status;
    a92e:	68bb      	ldr	r3, [r7, #8]
    a930:	791a      	ldrb	r2, [r3, #4]
    a932:	697b      	ldr	r3, [r7, #20]
    a934:	70da      	strb	r2, [r3, #3]
    WsfMsgSend(handlerId, pMsg);
    a936:	79fb      	ldrb	r3, [r7, #7]
    a938:	6979      	ldr	r1, [r7, #20]
    a93a:	4618      	mov	r0, r3
    a93c:	f000 fa93 	bl	ae66 <WsfMsgSend>

    /* Send shared secret to handler */
    pMsg->hdr.status = pEvent->leGenDHKey.status;
    WsfMsgSend(handlerId, pMsg);
  }
}
    a940:	e014      	b.n	a96c <SecEccHciCback+0x7c>
  else if (pEvent->hdr.event == HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT)
    a942:	68bb      	ldr	r3, [r7, #8]
    a944:	789b      	ldrb	r3, [r3, #2]
    a946:	2b26      	cmp	r3, #38	; 0x26
    a948:	d110      	bne.n	a96c <SecEccHciCback+0x7c>
    WStrReverseCpy(pMsg->data.sharedSecret.secret, pEvent->leGenDHKey.key, SEC_ECC_KEY_LEN);
    a94a:	697b      	ldr	r3, [r7, #20]
    a94c:	1d18      	adds	r0, r3, #4
    a94e:	68bb      	ldr	r3, [r7, #8]
    a950:	3305      	adds	r3, #5
    a952:	2220      	movs	r2, #32
    a954:	4619      	mov	r1, r3
    a956:	f002 fb17 	bl	cf88 <WStrReverseCpy>
    pMsg->hdr.status = pEvent->leGenDHKey.status;
    a95a:	68bb      	ldr	r3, [r7, #8]
    a95c:	791a      	ldrb	r2, [r3, #4]
    a95e:	697b      	ldr	r3, [r7, #20]
    a960:	70da      	strb	r2, [r3, #3]
    WsfMsgSend(handlerId, pMsg);
    a962:	79fb      	ldrb	r3, [r7, #7]
    a964:	6979      	ldr	r1, [r7, #20]
    a966:	4618      	mov	r0, r3
    a968:	f000 fa7d 	bl	ae66 <WsfMsgSend>
}
    a96c:	bf00      	nop
    a96e:	3718      	adds	r7, #24
    a970:	46bd      	mov	sp, r7
    a972:	bd80      	pop	{r7, pc}

0000a974 <SecEccGenKey>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenKey(wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
    a974:	b580      	push	{r7, lr}
    a976:	b084      	sub	sp, #16
    a978:	af00      	add	r7, sp, #0
    a97a:	4603      	mov	r3, r0
    a97c:	71fb      	strb	r3, [r7, #7]
    a97e:	460b      	mov	r3, r1
    a980:	80bb      	strh	r3, [r7, #4]
    a982:	4613      	mov	r3, r2
    a984:	71bb      	strb	r3, [r7, #6]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secEccMsg_t);
    a986:	2394      	movs	r3, #148	; 0x94
    a988:	81fb      	strh	r3, [r7, #14]

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
    a98a:	89fb      	ldrh	r3, [r7, #14]
    a98c:	4618      	mov	r0, r3
    a98e:	f000 fa46 	bl	ae1e <WsfMsgAlloc>
    a992:	60b8      	str	r0, [r7, #8]
    a994:	68bb      	ldr	r3, [r7, #8]
    a996:	2b00      	cmp	r3, #0
    a998:	d013      	beq.n	a9c2 <SecEccGenKey+0x4e>
  {
    /* Record the event and parameter for use in the HCI response */
    pBuf->msg.hdr.param = param;
    a99a:	68bb      	ldr	r3, [r7, #8]
    a99c:	88ba      	ldrh	r2, [r7, #4]
    a99e:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
    a9a0:	68bb      	ldr	r3, [r7, #8]
    a9a2:	79ba      	ldrb	r2, [r7, #6]
    a9a4:	709a      	strb	r2, [r3, #2]
    pBuf->type = SEC_TYPE_DH;
    a9a6:	68bb      	ldr	r3, [r7, #8]
    a9a8:	2202      	movs	r2, #2
    a9aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
    a9ae:	79fb      	ldrb	r3, [r7, #7]
    a9b0:	68ba      	ldr	r2, [r7, #8]
    a9b2:	4619      	mov	r1, r3
    a9b4:	4805      	ldr	r0, [pc, #20]	; (a9cc <SecEccGenKey+0x58>)
    a9b6:	f000 fa6e 	bl	ae96 <WsfMsgEnq>

    /* Request the local public key via HCI */
    HciLeReadLocalP256PubKey();
    a9ba:	f7fb ff3f 	bl	683c <HciLeReadLocalP256PubKey>

    return TRUE;
    a9be:	2301      	movs	r3, #1
    a9c0:	e000      	b.n	a9c4 <SecEccGenKey+0x50>
  }

  return FALSE;
    a9c2:	2300      	movs	r3, #0
}
    a9c4:	4618      	mov	r0, r3
    a9c6:	3710      	adds	r7, #16
    a9c8:	46bd      	mov	sp, r7
    a9ca:	bd80      	pop	{r7, pc}
    a9cc:	100028d0 	.word	0x100028d0

0000a9d0 <SecEccGenSharedSecret>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenSharedSecret(secEccKey_t *pKey, wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
    a9d0:	b580      	push	{r7, lr}
    a9d2:	b094      	sub	sp, #80	; 0x50
    a9d4:	af00      	add	r7, sp, #0
    a9d6:	6078      	str	r0, [r7, #4]
    a9d8:	4608      	mov	r0, r1
    a9da:	4611      	mov	r1, r2
    a9dc:	461a      	mov	r2, r3
    a9de:	4603      	mov	r3, r0
    a9e0:	70fb      	strb	r3, [r7, #3]
    a9e2:	460b      	mov	r3, r1
    a9e4:	803b      	strh	r3, [r7, #0]
    a9e6:	4613      	mov	r3, r2
    a9e8:	70bb      	strb	r3, [r7, #2]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secEccMsg_t);
    a9ea:	2394      	movs	r3, #148	; 0x94
    a9ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
    a9f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
    a9f4:	4618      	mov	r0, r3
    a9f6:	f000 fa12 	bl	ae1e <WsfMsgAlloc>
    a9fa:	64b8      	str	r0, [r7, #72]	; 0x48
    a9fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a9fe:	2b00      	cmp	r3, #0
    aa00:	d029      	beq.n	aa56 <SecEccGenSharedSecret+0x86>
  {
    uint8_t pubKeyX[SEC_ECC_KEY_LEN];
    uint8_t pubKeyY[SEC_ECC_KEY_LEN];

    /* Record the event and parameter for use in the HCI response */
    pBuf->msg.hdr.param = param;
    aa02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    aa04:	883a      	ldrh	r2, [r7, #0]
    aa06:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
    aa08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    aa0a:	78ba      	ldrb	r2, [r7, #2]
    aa0c:	709a      	strb	r2, [r3, #2]
    pBuf->type = SEC_TYPE_DH;
    aa0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    aa10:	2202      	movs	r2, #2
    aa12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
    aa16:	78fb      	ldrb	r3, [r7, #3]
    aa18:	6cba      	ldr	r2, [r7, #72]	; 0x48
    aa1a:	4619      	mov	r1, r3
    aa1c:	4810      	ldr	r0, [pc, #64]	; (aa60 <SecEccGenSharedSecret+0x90>)
    aa1e:	f000 fa3a 	bl	ae96 <WsfMsgEnq>

    /* Reverse keys (to little endian) */
    WStrReverseCpy(pubKeyX, pKey->pubKey_x, SEC_ECC_KEY_LEN);
    aa22:	6879      	ldr	r1, [r7, #4]
    aa24:	f107 0308 	add.w	r3, r7, #8
    aa28:	2220      	movs	r2, #32
    aa2a:	4618      	mov	r0, r3
    aa2c:	f002 faac 	bl	cf88 <WStrReverseCpy>
    WStrReverseCpy(pubKeyY, pKey->pubKey_y, SEC_ECC_KEY_LEN);
    aa30:	687b      	ldr	r3, [r7, #4]
    aa32:	f103 0120 	add.w	r1, r3, #32
    aa36:	f107 0328 	add.w	r3, r7, #40	; 0x28
    aa3a:	2220      	movs	r2, #32
    aa3c:	4618      	mov	r0, r3
    aa3e:	f002 faa3 	bl	cf88 <WStrReverseCpy>

    /* Request the DH Key via HCI */
    HciLeGenerateDHKey(pubKeyX, pubKeyY);
    aa42:	f107 0228 	add.w	r2, r7, #40	; 0x28
    aa46:	f107 0308 	add.w	r3, r7, #8
    aa4a:	4611      	mov	r1, r2
    aa4c:	4618      	mov	r0, r3
    aa4e:	f7fb ff08 	bl	6862 <HciLeGenerateDHKey>

    return TRUE;
    aa52:	2301      	movs	r3, #1
    aa54:	e000      	b.n	aa58 <SecEccGenSharedSecret+0x88>
  }

  return FALSE;
    aa56:	2300      	movs	r3, #0
}
    aa58:	4618      	mov	r0, r3
    aa5a:	3750      	adds	r7, #80	; 0x50
    aa5c:	46bd      	mov	sp, r7
    aa5e:	bd80      	pop	{r7, pc}
    aa60:	100028d0 	.word	0x100028d0

0000aa64 <SecEccInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecEccInit()
{
    aa64:	b480      	push	{r7}
    aa66:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_DH] = SecEccHciCback;
    aa68:	4b03      	ldr	r3, [pc, #12]	; (aa78 <SecEccInit+0x14>)
    aa6a:	4a04      	ldr	r2, [pc, #16]	; (aa7c <SecEccInit+0x18>)
    aa6c:	635a      	str	r2, [r3, #52]	; 0x34
}
    aa6e:	bf00      	nop
    aa70:	46bd      	mov	sp, r7
    aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa76:	4770      	bx	lr
    aa78:	100028b0 	.word	0x100028b0
    aa7c:	0000a8f1 	.word	0x0000a8f1

0000aa80 <secHciCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secHciCback(hciEvt_t *pEvent)
{
    aa80:	b580      	push	{r7, lr}
    aa82:	b084      	sub	sp, #16
    aa84:	af00      	add	r7, sp, #0
    aa86:	6078      	str	r0, [r7, #4]
  secQueueBuf_t  *pBuf  = NULL;
    aa88:	2300      	movs	r3, #0
    aa8a:	60fb      	str	r3, [r7, #12]
  wsfHandlerId_t    handlerId = 0;
    aa8c:	2300      	movs	r3, #0
    aa8e:	72fb      	strb	r3, [r7, #11]
  
  /* handle random number event */
  if (pEvent->hdr.event == HCI_LE_RAND_CMD_CMPL_CBACK_EVT)
    aa90:	687b      	ldr	r3, [r7, #4]
    aa92:	789b      	ldrb	r3, [r3, #2]
    aa94:	2b1c      	cmp	r3, #28
    aa96:	d10c      	bne.n	aab2 <secHciCback+0x32>
  {
    /* move up data by eight bytes */    
    memcpy(&secCb.rand[HCI_RAND_LEN], secCb.rand, HCI_RAND_LEN * (SEC_HCI_RAND_MULT-1));
    aa98:	2218      	movs	r2, #24
    aa9a:	4922      	ldr	r1, [pc, #136]	; (ab24 <secHciCback+0xa4>)
    aa9c:	4822      	ldr	r0, [pc, #136]	; (ab28 <secHciCback+0xa8>)
    aa9e:	f005 f856 	bl	fb4e <memcpy>
    
    /* copy new data to random data buffer */
    memcpy(secCb.rand, pEvent->leRandCmdCmpl.randNum, HCI_RAND_LEN);
    aaa2:	687b      	ldr	r3, [r7, #4]
    aaa4:	3305      	adds	r3, #5
    aaa6:	2208      	movs	r2, #8
    aaa8:	4619      	mov	r1, r3
    aaaa:	481e      	ldr	r0, [pc, #120]	; (ab24 <secHciCback+0xa4>)
    aaac:	f005 f84f 	bl	fb4e <memcpy>
    else
    {
      WSF_TRACE_WARN0("WSF sec queue empty!");
    }
  }
}
    aab0:	e033      	b.n	ab1a <secHciCback+0x9a>
  else if (pEvent->hdr.event == HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT ||
    aab2:	687b      	ldr	r3, [r7, #4]
    aab4:	789b      	ldrb	r3, [r3, #2]
    aab6:	2b1b      	cmp	r3, #27
    aab8:	d007      	beq.n	aaca <secHciCback+0x4a>
           pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT ||
    aaba:	687b      	ldr	r3, [r7, #4]
    aabc:	789b      	ldrb	r3, [r3, #2]
  else if (pEvent->hdr.event == HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT ||
    aabe:	2b25      	cmp	r3, #37	; 0x25
    aac0:	d003      	beq.n	aaca <secHciCback+0x4a>
           pEvent->hdr.event == HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT)
    aac2:	687b      	ldr	r3, [r7, #4]
    aac4:	789b      	ldrb	r3, [r3, #2]
           pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT ||
    aac6:	2b26      	cmp	r3, #38	; 0x26
    aac8:	d127      	bne.n	ab1a <secHciCback+0x9a>
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
    aaca:	f107 030b 	add.w	r3, r7, #11
    aace:	4619      	mov	r1, r3
    aad0:	4816      	ldr	r0, [pc, #88]	; (ab2c <secHciCback+0xac>)
    aad2:	f000 f9f5 	bl	aec0 <WsfMsgDeq>
    aad6:	60f8      	str	r0, [r7, #12]
    aad8:	68fb      	ldr	r3, [r7, #12]
    aada:	2b00      	cmp	r3, #0
    aadc:	d01a      	beq.n	ab14 <secHciCback+0x94>
      if (secCb.hciCbackTbl[pBuf->type])
    aade:	68fb      	ldr	r3, [r7, #12]
    aae0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    aae4:	4a0f      	ldr	r2, [pc, #60]	; (ab24 <secHciCback+0xa4>)
    aae6:	330a      	adds	r3, #10
    aae8:	009b      	lsls	r3, r3, #2
    aaea:	4413      	add	r3, r2
    aaec:	685b      	ldr	r3, [r3, #4]
    aaee:	2b00      	cmp	r3, #0
    aaf0:	d00c      	beq.n	ab0c <secHciCback+0x8c>
        secCb.hciCbackTbl[pBuf->type](pBuf, pEvent, handlerId);
    aaf2:	68fb      	ldr	r3, [r7, #12]
    aaf4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    aaf8:	4a0a      	ldr	r2, [pc, #40]	; (ab24 <secHciCback+0xa4>)
    aafa:	330a      	adds	r3, #10
    aafc:	009b      	lsls	r3, r3, #2
    aafe:	4413      	add	r3, r2
    ab00:	685b      	ldr	r3, [r3, #4]
    ab02:	7afa      	ldrb	r2, [r7, #11]
    ab04:	6879      	ldr	r1, [r7, #4]
    ab06:	68f8      	ldr	r0, [r7, #12]
    ab08:	4798      	blx	r3
}
    ab0a:	e006      	b.n	ab1a <secHciCback+0x9a>
        WSF_TRACE_WARN0("WSF sec not registered");
    ab0c:	4808      	ldr	r0, [pc, #32]	; (ab30 <secHciCback+0xb0>)
    ab0e:	f7ff fc0d 	bl	a32c <WsfTrace>
}
    ab12:	e002      	b.n	ab1a <secHciCback+0x9a>
      WSF_TRACE_WARN0("WSF sec queue empty!");
    ab14:	4807      	ldr	r0, [pc, #28]	; (ab34 <secHciCback+0xb4>)
    ab16:	f7ff fc09 	bl	a32c <WsfTrace>
}
    ab1a:	bf00      	nop
    ab1c:	3710      	adds	r7, #16
    ab1e:	46bd      	mov	sp, r7
    ab20:	bd80      	pop	{r7, pc}
    ab22:	bf00      	nop
    ab24:	100028b0 	.word	0x100028b0
    ab28:	100028b8 	.word	0x100028b8
    ab2c:	100028d0 	.word	0x100028d0
    ab30:	0000ff84 	.word	0x0000ff84
    ab34:	0000ff9c 	.word	0x0000ff9c

0000ab38 <SecInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecInit(void)
{
    ab38:	b580      	push	{r7, lr}
    ab3a:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&secCb.queue);
    ab3c:	4b07      	ldr	r3, [pc, #28]	; (ab5c <SecInit+0x24>)
    ab3e:	2200      	movs	r2, #0
    ab40:	621a      	str	r2, [r3, #32]
    ab42:	4b06      	ldr	r3, [pc, #24]	; (ab5c <SecInit+0x24>)
    ab44:	2200      	movs	r2, #0
    ab46:	625a      	str	r2, [r3, #36]	; 0x24
  secCb.token = 0;
    ab48:	4b04      	ldr	r3, [pc, #16]	; (ab5c <SecInit+0x24>)
    ab4a:	2200      	movs	r2, #0
    ab4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Register callback with HCI */
  HciSecRegister(secHciCback);
    ab50:	4803      	ldr	r0, [pc, #12]	; (ab60 <SecInit+0x28>)
    ab52:	f001 fe15 	bl	c780 <HciSecRegister>
}
    ab56:	bf00      	nop
    ab58:	bd80      	pop	{r7, pc}
    ab5a:	bf00      	nop
    ab5c:	100028b0 	.word	0x100028b0
    ab60:	0000aa81 	.word	0x0000aa81

0000ab64 <SecRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecRand(uint8_t *pRand, uint8_t randLen)
{
    ab64:	b580      	push	{r7, lr}
    ab66:	b084      	sub	sp, #16
    ab68:	af00      	add	r7, sp, #0
    ab6a:	6078      	str	r0, [r7, #4]
    ab6c:	460b      	mov	r3, r1
    ab6e:	70fb      	strb	r3, [r7, #3]
  int8_t count = (randLen + HCI_RAND_LEN - 1) / HCI_RAND_LEN;
    ab70:	78fb      	ldrb	r3, [r7, #3]
    ab72:	3307      	adds	r3, #7
    ab74:	2b00      	cmp	r3, #0
    ab76:	da00      	bge.n	ab7a <SecRand+0x16>
    ab78:	3307      	adds	r3, #7
    ab7a:	10db      	asrs	r3, r3, #3
    ab7c:	73fb      	strb	r3, [r7, #15]

  WSF_ASSERT(randLen <= HCI_RAND_LEN * SEC_HCI_RAND_MULT);

  /* copy data */
  memcpy(pRand, secCb.rand, randLen);
    ab7e:	78fb      	ldrb	r3, [r7, #3]
    ab80:	461a      	mov	r2, r3
    ab82:	4909      	ldr	r1, [pc, #36]	; (aba8 <SecRand+0x44>)
    ab84:	6878      	ldr	r0, [r7, #4]
    ab86:	f004 ffe2 	bl	fb4e <memcpy>
  
  /* get new random numbers */
  while (count--)
    ab8a:	e001      	b.n	ab90 <SecRand+0x2c>
  {
    HciLeRandCmd();
    ab8c:	f7fb ff17 	bl	69be <HciLeRandCmd>
  while (count--)
    ab90:	f997 300f 	ldrsb.w	r3, [r7, #15]
    ab94:	b2da      	uxtb	r2, r3
    ab96:	3a01      	subs	r2, #1
    ab98:	b2d2      	uxtb	r2, r2
    ab9a:	73fa      	strb	r2, [r7, #15]
    ab9c:	2b00      	cmp	r3, #0
    ab9e:	d1f5      	bne.n	ab8c <SecRand+0x28>
  }
}
    aba0:	bf00      	nop
    aba2:	3710      	adds	r7, #16
    aba4:	46bd      	mov	sp, r7
    aba6:	bd80      	pop	{r7, pc}
    aba8:	100028b0 	.word	0x100028b0

0000abac <WsfBufInit>:
 *
 *  \return Amount of pBufMem used or 0 for failures.
 */
/*************************************************************************************************/
uint16_t WsfBufInit(uint16_t bufMemLen, uint8_t *pBufMem, uint8_t numPools, wsfBufPoolDesc_t *pDesc)
{
    abac:	b480      	push	{r7}
    abae:	b089      	sub	sp, #36	; 0x24
    abb0:	af00      	add	r7, sp, #0
    abb2:	60b9      	str	r1, [r7, #8]
    abb4:	607b      	str	r3, [r7, #4]
    abb6:	4603      	mov	r3, r0
    abb8:	81fb      	strh	r3, [r7, #14]
    abba:	4613      	mov	r3, r2
    abbc:	737b      	strb	r3, [r7, #13]
  wsfBufPool_t  *pPool;
  wsfBufMem_t   *pStart;
  uint16_t      len;
  uint8_t       i;

  wsfBufMem = (wsfBufMem_t *) pBufMem;
    abbe:	4a4d      	ldr	r2, [pc, #308]	; (acf4 <WsfBufInit+0x148>)
    abc0:	68bb      	ldr	r3, [r7, #8]
    abc2:	6013      	str	r3, [r2, #0]
  pPool = (wsfBufPool_t *) wsfBufMem;
    abc4:	4b4b      	ldr	r3, [pc, #300]	; (acf4 <WsfBufInit+0x148>)
    abc6:	681b      	ldr	r3, [r3, #0]
    abc8:	61fb      	str	r3, [r7, #28]

  /* buffer storage starts after the pool structs */
  pStart = (wsfBufMem_t *) (pPool + numPools);
    abca:	7b7a      	ldrb	r2, [r7, #13]
    abcc:	4613      	mov	r3, r2
    abce:	005b      	lsls	r3, r3, #1
    abd0:	4413      	add	r3, r2
    abd2:	009b      	lsls	r3, r3, #2
    abd4:	461a      	mov	r2, r3
    abd6:	69fb      	ldr	r3, [r7, #28]
    abd8:	4413      	add	r3, r2
    abda:	61bb      	str	r3, [r7, #24]

  wsfBufNumPools = numPools;
    abdc:	4a46      	ldr	r2, [pc, #280]	; (acf8 <WsfBufInit+0x14c>)
    abde:	7b7b      	ldrb	r3, [r7, #13]
    abe0:	7013      	strb	r3, [r2, #0]

  /* create each pool; see loop exit condition below */
  while (TRUE)
  {
    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
    abe2:	4b44      	ldr	r3, [pc, #272]	; (acf4 <WsfBufInit+0x148>)
    abe4:	681a      	ldr	r2, [r3, #0]
    abe6:	89fb      	ldrh	r3, [r7, #14]
    abe8:	08db      	lsrs	r3, r3, #3
    abea:	b29b      	uxth	r3, r3
    abec:	00db      	lsls	r3, r3, #3
    abee:	441a      	add	r2, r3
    abf0:	69bb      	ldr	r3, [r7, #24]
    abf2:	429a      	cmp	r2, r3
    abf4:	d201      	bcs.n	abfa <WsfBufInit+0x4e>
    {
      WSF_ASSERT(FALSE);
      return 0;
    abf6:	2300      	movs	r3, #0
    abf8:	e075      	b.n	ace6 <WsfBufInit+0x13a>
    }

    /* exit loop after verification check */
    if (numPools-- == 0)
    abfa:	7b7b      	ldrb	r3, [r7, #13]
    abfc:	1e5a      	subs	r2, r3, #1
    abfe:	737a      	strb	r2, [r7, #13]
    ac00:	2b00      	cmp	r3, #0
    ac02:	d066      	beq.n	acd2 <WsfBufInit+0x126>
    {
      break;
    }

    /* adjust pool lengths for minimum size and alignment */
    if (pDesc->len < sizeof(wsfBufMem_t))
    ac04:	687b      	ldr	r3, [r7, #4]
    ac06:	881b      	ldrh	r3, [r3, #0]
    ac08:	2b07      	cmp	r3, #7
    ac0a:	d803      	bhi.n	ac14 <WsfBufInit+0x68>
    {
      pPool->desc.len = sizeof(wsfBufMem_t);
    ac0c:	69fb      	ldr	r3, [r7, #28]
    ac0e:	2208      	movs	r2, #8
    ac10:	801a      	strh	r2, [r3, #0]
    ac12:	e014      	b.n	ac3e <WsfBufInit+0x92>
    }
    else if ((pDesc->len % sizeof(wsfBufMem_t)) != 0)
    ac14:	687b      	ldr	r3, [r7, #4]
    ac16:	881b      	ldrh	r3, [r3, #0]
    ac18:	f003 0307 	and.w	r3, r3, #7
    ac1c:	b29b      	uxth	r3, r3
    ac1e:	2b00      	cmp	r3, #0
    ac20:	d009      	beq.n	ac36 <WsfBufInit+0x8a>
    {
      pPool->desc.len = pDesc->len + sizeof(wsfBufMem_t) - (pDesc->len % sizeof(wsfBufMem_t));
    ac22:	687b      	ldr	r3, [r7, #4]
    ac24:	881b      	ldrh	r3, [r3, #0]
    ac26:	f023 0307 	bic.w	r3, r3, #7
    ac2a:	b29b      	uxth	r3, r3
    ac2c:	3308      	adds	r3, #8
    ac2e:	b29a      	uxth	r2, r3
    ac30:	69fb      	ldr	r3, [r7, #28]
    ac32:	801a      	strh	r2, [r3, #0]
    ac34:	e003      	b.n	ac3e <WsfBufInit+0x92>
    }
    else
    {
      pPool->desc.len = pDesc->len;
    ac36:	687b      	ldr	r3, [r7, #4]
    ac38:	881a      	ldrh	r2, [r3, #0]
    ac3a:	69fb      	ldr	r3, [r7, #28]
    ac3c:	801a      	strh	r2, [r3, #0]
    }

    pPool->desc.num = pDesc->num;
    ac3e:	687b      	ldr	r3, [r7, #4]
    ac40:	789a      	ldrb	r2, [r3, #2]
    ac42:	69fb      	ldr	r3, [r7, #28]
    ac44:	709a      	strb	r2, [r3, #2]
    pDesc++;
    ac46:	687b      	ldr	r3, [r7, #4]
    ac48:	3304      	adds	r3, #4
    ac4a:	607b      	str	r3, [r7, #4]

    pPool->pStart = pStart;
    ac4c:	69fb      	ldr	r3, [r7, #28]
    ac4e:	69ba      	ldr	r2, [r7, #24]
    ac50:	605a      	str	r2, [r3, #4]
    pPool->pFree = pStart;
    ac52:	69fb      	ldr	r3, [r7, #28]
    ac54:	69ba      	ldr	r2, [r7, #24]
    ac56:	609a      	str	r2, [r3, #8]

    WSF_TRACE_INFO2("Creating pool len=%u num=%u", pPool->desc.len, pPool->desc.num);
    WSF_TRACE_INFO1("              pStart=0x%x", (uint32_t)pPool->pStart);

    /* initialize free list */
    len = pPool->desc.len / sizeof(wsfBufMem_t);
    ac58:	69fb      	ldr	r3, [r7, #28]
    ac5a:	881b      	ldrh	r3, [r3, #0]
    ac5c:	08db      	lsrs	r3, r3, #3
    ac5e:	82bb      	strh	r3, [r7, #20]
    for (i = pPool->desc.num; i > 1; i--)
    ac60:	69fb      	ldr	r3, [r7, #28]
    ac62:	789b      	ldrb	r3, [r3, #2]
    ac64:	75fb      	strb	r3, [r7, #23]
    ac66:	e019      	b.n	ac9c <WsfBufInit+0xf0>
    {
      /* verify we didn't overrun memory; if we did, abort */
      if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
    ac68:	4b22      	ldr	r3, [pc, #136]	; (acf4 <WsfBufInit+0x148>)
    ac6a:	681a      	ldr	r2, [r3, #0]
    ac6c:	89fb      	ldrh	r3, [r7, #14]
    ac6e:	08db      	lsrs	r3, r3, #3
    ac70:	b29b      	uxth	r3, r3
    ac72:	00db      	lsls	r3, r3, #3
    ac74:	441a      	add	r2, r3
    ac76:	69bb      	ldr	r3, [r7, #24]
    ac78:	429a      	cmp	r2, r3
    ac7a:	d201      	bcs.n	ac80 <WsfBufInit+0xd4>
      {
        WSF_ASSERT(FALSE);
        return 0;
    ac7c:	2300      	movs	r3, #0
    ac7e:	e032      	b.n	ace6 <WsfBufInit+0x13a>
      }
      /* pointer to the next free buffer is stored in the buffer itself */
      pStart->pNext = pStart + len;
    ac80:	8abb      	ldrh	r3, [r7, #20]
    ac82:	00db      	lsls	r3, r3, #3
    ac84:	69ba      	ldr	r2, [r7, #24]
    ac86:	441a      	add	r2, r3
    ac88:	69bb      	ldr	r3, [r7, #24]
    ac8a:	601a      	str	r2, [r3, #0]
      pStart += len;
    ac8c:	8abb      	ldrh	r3, [r7, #20]
    ac8e:	00db      	lsls	r3, r3, #3
    ac90:	69ba      	ldr	r2, [r7, #24]
    ac92:	4413      	add	r3, r2
    ac94:	61bb      	str	r3, [r7, #24]
    for (i = pPool->desc.num; i > 1; i--)
    ac96:	7dfb      	ldrb	r3, [r7, #23]
    ac98:	3b01      	subs	r3, #1
    ac9a:	75fb      	strb	r3, [r7, #23]
    ac9c:	7dfb      	ldrb	r3, [r7, #23]
    ac9e:	2b01      	cmp	r3, #1
    aca0:	d8e2      	bhi.n	ac68 <WsfBufInit+0xbc>
    }

    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
    aca2:	4b14      	ldr	r3, [pc, #80]	; (acf4 <WsfBufInit+0x148>)
    aca4:	681a      	ldr	r2, [r3, #0]
    aca6:	89fb      	ldrh	r3, [r7, #14]
    aca8:	08db      	lsrs	r3, r3, #3
    acaa:	b29b      	uxth	r3, r3
    acac:	00db      	lsls	r3, r3, #3
    acae:	441a      	add	r2, r3
    acb0:	69bb      	ldr	r3, [r7, #24]
    acb2:	429a      	cmp	r2, r3
    acb4:	d201      	bcs.n	acba <WsfBufInit+0x10e>
    {
      WSF_ASSERT(FALSE);
      return 0;
    acb6:	2300      	movs	r3, #0
    acb8:	e015      	b.n	ace6 <WsfBufInit+0x13a>
    }
    /* last one in list points to NULL */
    pStart->pNext = NULL;
    acba:	69bb      	ldr	r3, [r7, #24]
    acbc:	2200      	movs	r2, #0
    acbe:	601a      	str	r2, [r3, #0]
    pStart += len;
    acc0:	8abb      	ldrh	r3, [r7, #20]
    acc2:	00db      	lsls	r3, r3, #3
    acc4:	69ba      	ldr	r2, [r7, #24]
    acc6:	4413      	add	r3, r2
    acc8:	61bb      	str	r3, [r7, #24]

    /* next pool */
    pPool++;
    acca:	69fb      	ldr	r3, [r7, #28]
    accc:	330c      	adds	r3, #12
    acce:	61fb      	str	r3, [r7, #28]
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
    acd0:	e787      	b.n	abe2 <WsfBufInit+0x36>
      break;
    acd2:	bf00      	nop
  }

  wsfBufMemLen = (uint8_t *) pStart - (uint8_t *) wsfBufMem;
    acd4:	69bb      	ldr	r3, [r7, #24]
    acd6:	4a07      	ldr	r2, [pc, #28]	; (acf4 <WsfBufInit+0x148>)
    acd8:	6812      	ldr	r2, [r2, #0]
    acda:	1a9b      	subs	r3, r3, r2
    acdc:	b29a      	uxth	r2, r3
    acde:	4b07      	ldr	r3, [pc, #28]	; (acfc <WsfBufInit+0x150>)
    ace0:	801a      	strh	r2, [r3, #0]
  WSF_TRACE_INFO1("Created buffer pools; using %u bytes", wsfBufMemLen);

  return wsfBufMemLen;
    ace2:	4b06      	ldr	r3, [pc, #24]	; (acfc <WsfBufInit+0x150>)
    ace4:	881b      	ldrh	r3, [r3, #0]
}
    ace6:	4618      	mov	r0, r3
    ace8:	3724      	adds	r7, #36	; 0x24
    acea:	46bd      	mov	sp, r7
    acec:	f85d 7b04 	ldr.w	r7, [sp], #4
    acf0:	4770      	bx	lr
    acf2:	bf00      	nop
    acf4:	10001ac0 	.word	0x10001ac0
    acf8:	100028ea 	.word	0x100028ea
    acfc:	100028e8 	.word	0x100028e8

0000ad00 <WsfBufAlloc>:
 *
 *  \return Pointer to allocated buffer or NULL if allocation fails.
 */
/*************************************************************************************************/
void *WsfBufAlloc(uint16_t len)
{
    ad00:	b580      	push	{r7, lr}
    ad02:	b086      	sub	sp, #24
    ad04:	af00      	add	r7, sp, #0
    ad06:	4603      	mov	r3, r0
    ad08:	80fb      	strh	r3, [r7, #6]

  WSF_CS_INIT(cs);

  WSF_ASSERT(len > 0);

  pPool = (wsfBufPool_t *) wsfBufMem;
    ad0a:	4b1a      	ldr	r3, [pc, #104]	; (ad74 <WsfBufAlloc+0x74>)
    ad0c:	681b      	ldr	r3, [r3, #0]
    ad0e:	617b      	str	r3, [r7, #20]

  for (i = wsfBufNumPools; i > 0; i--, pPool++)
    ad10:	4b19      	ldr	r3, [pc, #100]	; (ad78 <WsfBufAlloc+0x78>)
    ad12:	781b      	ldrb	r3, [r3, #0]
    ad14:	74fb      	strb	r3, [r7, #19]
    ad16:	e020      	b.n	ad5a <WsfBufAlloc+0x5a>
  {
    /* if buffer is big enough */
    if (len <= pPool->desc.len)
    ad18:	697b      	ldr	r3, [r7, #20]
    ad1a:	881b      	ldrh	r3, [r3, #0]
    ad1c:	88fa      	ldrh	r2, [r7, #6]
    ad1e:	429a      	cmp	r2, r3
    ad20:	d815      	bhi.n	ad4e <WsfBufAlloc+0x4e>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
    ad22:	f7ff f985 	bl	a030 <WsfCsEnter>

      /* if buffers available */
      if (pPool->pFree != NULL)
    ad26:	697b      	ldr	r3, [r7, #20]
    ad28:	689b      	ldr	r3, [r3, #8]
    ad2a:	2b00      	cmp	r3, #0
    ad2c:	d00d      	beq.n	ad4a <WsfBufAlloc+0x4a>
      {
        /* allocation succeeded */
        pBuf = pPool->pFree;
    ad2e:	697b      	ldr	r3, [r7, #20]
    ad30:	689b      	ldr	r3, [r3, #8]
    ad32:	60fb      	str	r3, [r7, #12]

        /* next free buffer is stored inside current free buffer */
        pPool->pFree = pBuf->pNext;
    ad34:	68fb      	ldr	r3, [r7, #12]
    ad36:	681a      	ldr	r2, [r3, #0]
    ad38:	697b      	ldr	r3, [r7, #20]
    ad3a:	609a      	str	r2, [r3, #8]

#if WSF_BUF_FREE_CHECK == TRUE
        pBuf->free = 0;
    ad3c:	68fb      	ldr	r3, [r7, #12]
    ad3e:	2200      	movs	r2, #0
    ad40:	605a      	str	r2, [r3, #4]
          pPool->maxAlloc = pPool->numAlloc;
        }
        pPool->maxReqLen = WSF_MAX(pPool->maxReqLen, len);
#endif
        /* exit critical section */
        WSF_CS_EXIT(cs);
    ad42:	f7ff f989 	bl	a058 <WsfCsExit>

        WSF_TRACE_ALLOC2("WsfBufAlloc len:%u pBuf:%08x", pPool->desc.len, pBuf);

        return pBuf;
    ad46:	68fb      	ldr	r3, [r7, #12]
    ad48:	e010      	b.n	ad6c <WsfBufAlloc+0x6c>
      }

      /* exit critical section */
      WSF_CS_EXIT(cs);
    ad4a:	f7ff f985 	bl	a058 <WsfCsExit>
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
    ad4e:	7cfb      	ldrb	r3, [r7, #19]
    ad50:	3b01      	subs	r3, #1
    ad52:	74fb      	strb	r3, [r7, #19]
    ad54:	697b      	ldr	r3, [r7, #20]
    ad56:	330c      	adds	r3, #12
    ad58:	617b      	str	r3, [r7, #20]
    ad5a:	7cfb      	ldrb	r3, [r7, #19]
    ad5c:	2b00      	cmp	r3, #0
    ad5e:	d1db      	bne.n	ad18 <WsfBufAlloc+0x18>
  else
  {
    WSF_TRACE_WARN2("WsfBufAlloc failed len:%u - task:%u", len, WSF_OS_GET_ACTIVE_HANDLER_ID());
  }
#else
  WSF_TRACE_WARN1("WsfBufAlloc failed len:%u", len);
    ad60:	88fb      	ldrh	r3, [r7, #6]
    ad62:	4619      	mov	r1, r3
    ad64:	4805      	ldr	r0, [pc, #20]	; (ad7c <WsfBufAlloc+0x7c>)
    ad66:	f7ff fae1 	bl	a32c <WsfTrace>

#if WSF_BUF_ALLOC_FAIL_ASSERT == TRUE
  WSF_ASSERT(FALSE);
#endif

  return NULL;
    ad6a:	2300      	movs	r3, #0
}
    ad6c:	4618      	mov	r0, r3
    ad6e:	3718      	adds	r7, #24
    ad70:	46bd      	mov	sp, r7
    ad72:	bd80      	pop	{r7, pc}
    ad74:	10001ac0 	.word	0x10001ac0
    ad78:	100028ea 	.word	0x100028ea
    ad7c:	0000ffb4 	.word	0x0000ffb4

0000ad80 <WsfBufFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfBufFree(void *pBuf)
{
    ad80:	b580      	push	{r7, lr}
    ad82:	b084      	sub	sp, #16
    ad84:	af00      	add	r7, sp, #0
    ad86:	6078      	str	r0, [r7, #4]
  wsfBufPool_t  *pPool;
  wsfBufMem_t   *p = pBuf;
    ad88:	687b      	ldr	r3, [r7, #4]
    ad8a:	60bb      	str	r3, [r7, #8]
  WSF_ASSERT(p >= ((wsfBufPool_t *) wsfBufMem)->pStart);
  WSF_ASSERT(p < (wsfBufMem_t *)(((uint8_t *) wsfBufMem) + wsfBufMemLen));
#endif

  /* iterate over pools starting from last pool */
  pPool = (wsfBufPool_t *) wsfBufMem + (wsfBufNumPools - 1);
    ad8c:	4b16      	ldr	r3, [pc, #88]	; (ade8 <WsfBufFree+0x68>)
    ad8e:	681a      	ldr	r2, [r3, #0]
    ad90:	4b16      	ldr	r3, [pc, #88]	; (adec <WsfBufFree+0x6c>)
    ad92:	781b      	ldrb	r3, [r3, #0]
    ad94:	4619      	mov	r1, r3
    ad96:	460b      	mov	r3, r1
    ad98:	005b      	lsls	r3, r3, #1
    ad9a:	440b      	add	r3, r1
    ad9c:	009b      	lsls	r3, r3, #2
    ad9e:	3b0c      	subs	r3, #12
    ada0:	4413      	add	r3, r2
    ada2:	60fb      	str	r3, [r7, #12]
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
    ada4:	e016      	b.n	add4 <WsfBufFree+0x54>
  {
    /* if the buffer memory is located inside this pool */
    if (p >= pPool->pStart)
    ada6:	68fb      	ldr	r3, [r7, #12]
    ada8:	685a      	ldr	r2, [r3, #4]
    adaa:	68bb      	ldr	r3, [r7, #8]
    adac:	429a      	cmp	r2, r3
    adae:	d80e      	bhi.n	adce <WsfBufFree+0x4e>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
    adb0:	f7ff f93e 	bl	a030 <WsfCsEnter>

#if WSF_BUF_FREE_CHECK == TRUE
      WSF_ASSERT(p->free != WSF_BUF_FREE_NUM);
      p->free = WSF_BUF_FREE_NUM;
    adb4:	68bb      	ldr	r3, [r7, #8]
    adb6:	4a0e      	ldr	r2, [pc, #56]	; (adf0 <WsfBufFree+0x70>)
    adb8:	605a      	str	r2, [r3, #4]
#if WSF_BUF_STATS == TRUE
      pPool->numAlloc--;
#endif

      /* pool found; put buffer back in free list */
      p->pNext = pPool->pFree;
    adba:	68fb      	ldr	r3, [r7, #12]
    adbc:	689a      	ldr	r2, [r3, #8]
    adbe:	68bb      	ldr	r3, [r7, #8]
    adc0:	601a      	str	r2, [r3, #0]
      pPool->pFree = p;
    adc2:	68fb      	ldr	r3, [r7, #12]
    adc4:	68ba      	ldr	r2, [r7, #8]
    adc6:	609a      	str	r2, [r3, #8]

      /* exit critical section */
      WSF_CS_EXIT(cs);
    adc8:	f7ff f946 	bl	a058 <WsfCsExit>

      WSF_TRACE_FREE2("WsfBufFree len:%u pBuf:%08x", pPool->desc.len, pBuf);

      return;
    adcc:	e008      	b.n	ade0 <WsfBufFree+0x60>
    }

    /* next pool */
    pPool--;
    adce:	68fb      	ldr	r3, [r7, #12]
    add0:	3b0c      	subs	r3, #12
    add2:	60fb      	str	r3, [r7, #12]
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
    add4:	4b04      	ldr	r3, [pc, #16]	; (ade8 <WsfBufFree+0x68>)
    add6:	681b      	ldr	r3, [r3, #0]
    add8:	68fa      	ldr	r2, [r7, #12]
    adda:	429a      	cmp	r2, r3
    addc:	d2e3      	bcs.n	ada6 <WsfBufFree+0x26>
  }

  /* should never get here */
  WSF_ASSERT(FALSE);

  return;
    adde:	bf00      	nop
}
    ade0:	3710      	adds	r7, #16
    ade2:	46bd      	mov	sp, r7
    ade4:	bd80      	pop	{r7, pc}
    ade6:	bf00      	nop
    ade8:	10001ac0 	.word	0x10001ac0
    adec:	100028ea 	.word	0x100028ea
    adf0:	faabd00d 	.word	0xfaabd00d

0000adf4 <WsfMsgDataAlloc>:
 *
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *WsfMsgDataAlloc(uint16_t len, uint8_t tailroom)
{
    adf4:	b580      	push	{r7, lr}
    adf6:	b082      	sub	sp, #8
    adf8:	af00      	add	r7, sp, #0
    adfa:	4603      	mov	r3, r0
    adfc:	460a      	mov	r2, r1
    adfe:	80fb      	strh	r3, [r7, #6]
    ae00:	4613      	mov	r3, r2
    ae02:	717b      	strb	r3, [r7, #5]
  return WsfMsgAlloc(len + tailroom);
    ae04:	797b      	ldrb	r3, [r7, #5]
    ae06:	b29a      	uxth	r2, r3
    ae08:	88fb      	ldrh	r3, [r7, #6]
    ae0a:	4413      	add	r3, r2
    ae0c:	b29b      	uxth	r3, r3
    ae0e:	4618      	mov	r0, r3
    ae10:	f000 f805 	bl	ae1e <WsfMsgAlloc>
    ae14:	4603      	mov	r3, r0
}
    ae16:	4618      	mov	r0, r3
    ae18:	3708      	adds	r7, #8
    ae1a:	46bd      	mov	sp, r7
    ae1c:	bd80      	pop	{r7, pc}

0000ae1e <WsfMsgAlloc>:
 *
 *  \return Pointer to message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *WsfMsgAlloc(uint16_t len)
{
    ae1e:	b580      	push	{r7, lr}
    ae20:	b084      	sub	sp, #16
    ae22:	af00      	add	r7, sp, #0
    ae24:	4603      	mov	r3, r0
    ae26:	80fb      	strh	r3, [r7, #6]
  wsfMsg_t  *pMsg;

  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
    ae28:	88fb      	ldrh	r3, [r7, #6]
    ae2a:	3308      	adds	r3, #8
    ae2c:	b29b      	uxth	r3, r3
    ae2e:	4618      	mov	r0, r3
    ae30:	f7ff ff66 	bl	ad00 <WsfBufAlloc>
    ae34:	60f8      	str	r0, [r7, #12]

  /* hide header */
  if (pMsg != NULL)
    ae36:	68fb      	ldr	r3, [r7, #12]
    ae38:	2b00      	cmp	r3, #0
    ae3a:	d002      	beq.n	ae42 <WsfMsgAlloc+0x24>
  {
    pMsg++;
    ae3c:	68fb      	ldr	r3, [r7, #12]
    ae3e:	3308      	adds	r3, #8
    ae40:	60fb      	str	r3, [r7, #12]
  }

  return pMsg;
    ae42:	68fb      	ldr	r3, [r7, #12]
}
    ae44:	4618      	mov	r0, r3
    ae46:	3710      	adds	r7, #16
    ae48:	46bd      	mov	sp, r7
    ae4a:	bd80      	pop	{r7, pc}

0000ae4c <WsfMsgFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgFree(void *pMsg)
{
    ae4c:	b580      	push	{r7, lr}
    ae4e:	b082      	sub	sp, #8
    ae50:	af00      	add	r7, sp, #0
    ae52:	6078      	str	r0, [r7, #4]
  WsfBufFree(((wsfMsg_t *) pMsg) - 1);
    ae54:	687b      	ldr	r3, [r7, #4]
    ae56:	3b08      	subs	r3, #8
    ae58:	4618      	mov	r0, r3
    ae5a:	f7ff ff91 	bl	ad80 <WsfBufFree>
}
    ae5e:	bf00      	nop
    ae60:	3708      	adds	r7, #8
    ae62:	46bd      	mov	sp, r7
    ae64:	bd80      	pop	{r7, pc}

0000ae66 <WsfMsgSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgSend(wsfHandlerId_t handlerId, void *pMsg)
{
    ae66:	b580      	push	{r7, lr}
    ae68:	b082      	sub	sp, #8
    ae6a:	af00      	add	r7, sp, #0
    ae6c:	4603      	mov	r3, r0
    ae6e:	6039      	str	r1, [r7, #0]
    ae70:	71fb      	strb	r3, [r7, #7]
  WSF_TRACE_MSG1("WsfMsgSend handlerId:%u", handlerId);

  /* get queue for this handler and enqueue message */
  WsfMsgEnq(WsfTaskMsgQueue(handlerId), handlerId, pMsg);
    ae72:	79fb      	ldrb	r3, [r7, #7]
    ae74:	4618      	mov	r0, r3
    ae76:	f7ff f965 	bl	a144 <WsfTaskMsgQueue>
    ae7a:	79fb      	ldrb	r3, [r7, #7]
    ae7c:	683a      	ldr	r2, [r7, #0]
    ae7e:	4619      	mov	r1, r3
    ae80:	f000 f809 	bl	ae96 <WsfMsgEnq>

  /* set task for this handler as ready to run */
  WsfTaskSetReady(handlerId, WSF_MSG_QUEUE_EVENT);
    ae84:	79fb      	ldrb	r3, [r7, #7]
    ae86:	2101      	movs	r1, #1
    ae88:	4618      	mov	r0, r3
    ae8a:	f7ff f93d 	bl	a108 <WsfTaskSetReady>
}
    ae8e:	bf00      	nop
    ae90:	3708      	adds	r7, #8
    ae92:	46bd      	mov	sp, r7
    ae94:	bd80      	pop	{r7, pc}

0000ae96 <WsfMsgEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgEnq(wsfQueue_t *pQueue, wsfHandlerId_t handlerId, void *pMsg)
{
    ae96:	b580      	push	{r7, lr}
    ae98:	b086      	sub	sp, #24
    ae9a:	af00      	add	r7, sp, #0
    ae9c:	60f8      	str	r0, [r7, #12]
    ae9e:	460b      	mov	r3, r1
    aea0:	607a      	str	r2, [r7, #4]
    aea2:	72fb      	strb	r3, [r7, #11]
  wsfMsg_t    *p;

  WSF_ASSERT(pMsg != NULL);

  /* get message header */
  p = ((wsfMsg_t *) pMsg) - 1;
    aea4:	687b      	ldr	r3, [r7, #4]
    aea6:	3b08      	subs	r3, #8
    aea8:	617b      	str	r3, [r7, #20]

  /* set handler ID */
  p->handlerId = handlerId;
    aeaa:	697b      	ldr	r3, [r7, #20]
    aeac:	7afa      	ldrb	r2, [r7, #11]
    aeae:	711a      	strb	r2, [r3, #4]

  WsfQueueEnq(pQueue, p);
    aeb0:	6979      	ldr	r1, [r7, #20]
    aeb2:	68f8      	ldr	r0, [r7, #12]
    aeb4:	f000 f81c 	bl	aef0 <WsfQueueEnq>
}
    aeb8:	bf00      	nop
    aeba:	3718      	adds	r7, #24
    aebc:	46bd      	mov	sp, r7
    aebe:	bd80      	pop	{r7, pc}

0000aec0 <WsfMsgDeq>:
 *
 *  \return Pointer to message that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfMsgDeq(wsfQueue_t *pQueue, wsfHandlerId_t *pHandlerId)
{
    aec0:	b580      	push	{r7, lr}
    aec2:	b084      	sub	sp, #16
    aec4:	af00      	add	r7, sp, #0
    aec6:	6078      	str	r0, [r7, #4]
    aec8:	6039      	str	r1, [r7, #0]
  wsfMsg_t *pMsg;

  if ((pMsg = WsfQueueDeq(pQueue)) != NULL)
    aeca:	6878      	ldr	r0, [r7, #4]
    aecc:	f000 f832 	bl	af34 <WsfQueueDeq>
    aed0:	60f8      	str	r0, [r7, #12]
    aed2:	68fb      	ldr	r3, [r7, #12]
    aed4:	2b00      	cmp	r3, #0
    aed6:	d006      	beq.n	aee6 <WsfMsgDeq+0x26>
  {
    *pHandlerId = pMsg->handlerId;
    aed8:	68fb      	ldr	r3, [r7, #12]
    aeda:	791a      	ldrb	r2, [r3, #4]
    aedc:	683b      	ldr	r3, [r7, #0]
    aede:	701a      	strb	r2, [r3, #0]

    /* hide header */
    pMsg++;
    aee0:	68fb      	ldr	r3, [r7, #12]
    aee2:	3308      	adds	r3, #8
    aee4:	60fb      	str	r3, [r7, #12]
  }

  return pMsg;
    aee6:	68fb      	ldr	r3, [r7, #12]
}
    aee8:	4618      	mov	r0, r3
    aeea:	3710      	adds	r7, #16
    aeec:	46bd      	mov	sp, r7
    aeee:	bd80      	pop	{r7, pc}

0000aef0 <WsfQueueEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueEnq(wsfQueue_t *pQueue, void *pElem)
{
    aef0:	b580      	push	{r7, lr}
    aef2:	b082      	sub	sp, #8
    aef4:	af00      	add	r7, sp, #0
    aef6:	6078      	str	r0, [r7, #4]
    aef8:	6039      	str	r1, [r7, #0]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* initialize next pointer */
  WSF_QUEUE_NEXT(pElem) = NULL;
    aefa:	683b      	ldr	r3, [r7, #0]
    aefc:	2200      	movs	r2, #0
    aefe:	601a      	str	r2, [r3, #0]

  /* enter critical section */
  WSF_CS_ENTER(cs);
    af00:	f7ff f896 	bl	a030 <WsfCsEnter>

  /* if queue empty */
  if (pQueue->pHead == NULL)
    af04:	687b      	ldr	r3, [r7, #4]
    af06:	681b      	ldr	r3, [r3, #0]
    af08:	2b00      	cmp	r3, #0
    af0a:	d106      	bne.n	af1a <WsfQueueEnq+0x2a>
  {
    pQueue->pHead = pElem;
    af0c:	687b      	ldr	r3, [r7, #4]
    af0e:	683a      	ldr	r2, [r7, #0]
    af10:	601a      	str	r2, [r3, #0]
    pQueue->pTail = pElem;
    af12:	687b      	ldr	r3, [r7, #4]
    af14:	683a      	ldr	r2, [r7, #0]
    af16:	605a      	str	r2, [r3, #4]
    af18:	e006      	b.n	af28 <WsfQueueEnq+0x38>
  }
  /* else enqueue element to the tail of queue */
  else
  {
    WSF_QUEUE_NEXT(pQueue->pTail) = pElem;
    af1a:	687b      	ldr	r3, [r7, #4]
    af1c:	685b      	ldr	r3, [r3, #4]
    af1e:	683a      	ldr	r2, [r7, #0]
    af20:	601a      	str	r2, [r3, #0]
    pQueue->pTail = pElem;
    af22:	687b      	ldr	r3, [r7, #4]
    af24:	683a      	ldr	r2, [r7, #0]
    af26:	605a      	str	r2, [r3, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
    af28:	f7ff f896 	bl	a058 <WsfCsExit>
}
    af2c:	bf00      	nop
    af2e:	3708      	adds	r7, #8
    af30:	46bd      	mov	sp, r7
    af32:	bd80      	pop	{r7, pc}

0000af34 <WsfQueueDeq>:
 *
 *  \return Pointer to element that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfQueueDeq(wsfQueue_t *pQueue)
{
    af34:	b580      	push	{r7, lr}
    af36:	b084      	sub	sp, #16
    af38:	af00      	add	r7, sp, #0
    af3a:	6078      	str	r0, [r7, #4]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
    af3c:	f7ff f878 	bl	a030 <WsfCsEnter>

  pElem = pQueue->pHead;
    af40:	687b      	ldr	r3, [r7, #4]
    af42:	681b      	ldr	r3, [r3, #0]
    af44:	60fb      	str	r3, [r7, #12]

  /* if queue is not empty */
  if (pElem != NULL)
    af46:	68fb      	ldr	r3, [r7, #12]
    af48:	2b00      	cmp	r3, #0
    af4a:	d00a      	beq.n	af62 <WsfQueueDeq+0x2e>
  {
    /* set head to next element in queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
    af4c:	68fb      	ldr	r3, [r7, #12]
    af4e:	681a      	ldr	r2, [r3, #0]
    af50:	687b      	ldr	r3, [r7, #4]
    af52:	601a      	str	r2, [r3, #0]

    /* check for empty queue */
    if (pQueue->pHead == NULL)
    af54:	687b      	ldr	r3, [r7, #4]
    af56:	681b      	ldr	r3, [r3, #0]
    af58:	2b00      	cmp	r3, #0
    af5a:	d102      	bne.n	af62 <WsfQueueDeq+0x2e>
    {
      pQueue->pTail = NULL;
    af5c:	687b      	ldr	r3, [r7, #4]
    af5e:	2200      	movs	r2, #0
    af60:	605a      	str	r2, [r3, #4]
    }
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
    af62:	f7ff f879 	bl	a058 <WsfCsExit>

  return pElem;
    af66:	68fb      	ldr	r3, [r7, #12]
}
    af68:	4618      	mov	r0, r3
    af6a:	3710      	adds	r7, #16
    af6c:	46bd      	mov	sp, r7
    af6e:	bd80      	pop	{r7, pc}

0000af70 <WsfQueuePush>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueuePush(wsfQueue_t *pQueue, void *pElem)
{
    af70:	b580      	push	{r7, lr}
    af72:	b082      	sub	sp, #8
    af74:	af00      	add	r7, sp, #0
    af76:	6078      	str	r0, [r7, #4]
    af78:	6039      	str	r1, [r7, #0]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
    af7a:	f7ff f859 	bl	a030 <WsfCsEnter>

  /* else push element to head of queue */
  WSF_QUEUE_NEXT(pElem) = pQueue->pHead;
    af7e:	687b      	ldr	r3, [r7, #4]
    af80:	681a      	ldr	r2, [r3, #0]
    af82:	683b      	ldr	r3, [r7, #0]
    af84:	601a      	str	r2, [r3, #0]

  /* if queue was empty set tail */
  if (pQueue->pHead == NULL)
    af86:	687b      	ldr	r3, [r7, #4]
    af88:	681b      	ldr	r3, [r3, #0]
    af8a:	2b00      	cmp	r3, #0
    af8c:	d102      	bne.n	af94 <WsfQueuePush+0x24>
  {
    pQueue->pTail = pElem;
    af8e:	687b      	ldr	r3, [r7, #4]
    af90:	683a      	ldr	r2, [r7, #0]
    af92:	605a      	str	r2, [r3, #4]
  }

  /* set head */
  pQueue->pHead = pElem;
    af94:	687b      	ldr	r3, [r7, #4]
    af96:	683a      	ldr	r2, [r7, #0]
    af98:	601a      	str	r2, [r3, #0]

  /* exit critical section */
  WSF_CS_EXIT(cs);
    af9a:	f7ff f85d 	bl	a058 <WsfCsExit>
}
    af9e:	bf00      	nop
    afa0:	3708      	adds	r7, #8
    afa2:	46bd      	mov	sp, r7
    afa4:	bd80      	pop	{r7, pc}

0000afa6 <WsfQueueInsert>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueInsert(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
    afa6:	b580      	push	{r7, lr}
    afa8:	b084      	sub	sp, #16
    afaa:	af00      	add	r7, sp, #0
    afac:	60f8      	str	r0, [r7, #12]
    afae:	60b9      	str	r1, [r7, #8]
    afb0:	607a      	str	r2, [r7, #4]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
    afb2:	f7ff f83d 	bl	a030 <WsfCsEnter>

  /* if queue empty or inserting at tail */
  if (pQueue->pHead == NULL || pPrev == pQueue->pTail)
    afb6:	68fb      	ldr	r3, [r7, #12]
    afb8:	681b      	ldr	r3, [r3, #0]
    afba:	2b00      	cmp	r3, #0
    afbc:	d004      	beq.n	afc8 <WsfQueueInsert+0x22>
    afbe:	68fb      	ldr	r3, [r7, #12]
    afc0:	685a      	ldr	r2, [r3, #4]
    afc2:	687b      	ldr	r3, [r7, #4]
    afc4:	429a      	cmp	r2, r3
    afc6:	d104      	bne.n	afd2 <WsfQueueInsert+0x2c>
  {
    /* queue as normal */
    WsfQueueEnq(pQueue, pElem);
    afc8:	68b9      	ldr	r1, [r7, #8]
    afca:	68f8      	ldr	r0, [r7, #12]
    afcc:	f7ff ff90 	bl	aef0 <WsfQueueEnq>
    afd0:	e00e      	b.n	aff0 <WsfQueueInsert+0x4a>
  }
  /* else if inserting at head */
  else if (pPrev == NULL)
    afd2:	687b      	ldr	r3, [r7, #4]
    afd4:	2b00      	cmp	r3, #0
    afd6:	d104      	bne.n	afe2 <WsfQueueInsert+0x3c>
  {
    /* push to head */
    WsfQueuePush(pQueue, pElem);
    afd8:	68b9      	ldr	r1, [r7, #8]
    afda:	68f8      	ldr	r0, [r7, #12]
    afdc:	f7ff ffc8 	bl	af70 <WsfQueuePush>
    afe0:	e006      	b.n	aff0 <WsfQueueInsert+0x4a>
  }
  else
  {
    /* insert in middle of queue */
    WSF_QUEUE_NEXT(pElem) = WSF_QUEUE_NEXT(pPrev);
    afe2:	687b      	ldr	r3, [r7, #4]
    afe4:	681a      	ldr	r2, [r3, #0]
    afe6:	68bb      	ldr	r3, [r7, #8]
    afe8:	601a      	str	r2, [r3, #0]
    WSF_QUEUE_NEXT(pPrev) = pElem;
    afea:	687b      	ldr	r3, [r7, #4]
    afec:	68ba      	ldr	r2, [r7, #8]
    afee:	601a      	str	r2, [r3, #0]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
    aff0:	f7ff f832 	bl	a058 <WsfCsExit>
}
    aff4:	bf00      	nop
    aff6:	3710      	adds	r7, #16
    aff8:	46bd      	mov	sp, r7
    affa:	bd80      	pop	{r7, pc}

0000affc <WsfQueueRemove>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueRemove(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
    affc:	b580      	push	{r7, lr}
    affe:	b084      	sub	sp, #16
    b000:	af00      	add	r7, sp, #0
    b002:	60f8      	str	r0, [r7, #12]
    b004:	60b9      	str	r1, [r7, #8]
    b006:	607a      	str	r2, [r7, #4]
  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pQueue->pHead != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
    b008:	f7ff f812 	bl	a030 <WsfCsEnter>

  /* if first element */
  if (pElem == pQueue->pHead)
    b00c:	68fb      	ldr	r3, [r7, #12]
    b00e:	681a      	ldr	r2, [r3, #0]
    b010:	68bb      	ldr	r3, [r7, #8]
    b012:	429a      	cmp	r2, r3
    b014:	d104      	bne.n	b020 <WsfQueueRemove+0x24>
  {
    /* remove from head of queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
    b016:	68bb      	ldr	r3, [r7, #8]
    b018:	681a      	ldr	r2, [r3, #0]
    b01a:	68fb      	ldr	r3, [r7, #12]
    b01c:	601a      	str	r2, [r3, #0]
    b01e:	e006      	b.n	b02e <WsfQueueRemove+0x32>
  }
  else if (pPrev)
    b020:	687b      	ldr	r3, [r7, #4]
    b022:	2b00      	cmp	r3, #0
    b024:	d003      	beq.n	b02e <WsfQueueRemove+0x32>
  {
    /* remove from middle of queue, pPrev will never be null */
    WSF_QUEUE_NEXT(pPrev) = WSF_QUEUE_NEXT(pElem);
    b026:	68bb      	ldr	r3, [r7, #8]
    b028:	681a      	ldr	r2, [r3, #0]
    b02a:	687b      	ldr	r3, [r7, #4]
    b02c:	601a      	str	r2, [r3, #0]
  }

  /* if last element */
  if (pElem == pQueue->pTail)
    b02e:	68fb      	ldr	r3, [r7, #12]
    b030:	685a      	ldr	r2, [r3, #4]
    b032:	68bb      	ldr	r3, [r7, #8]
    b034:	429a      	cmp	r2, r3
    b036:	d102      	bne.n	b03e <WsfQueueRemove+0x42>
  {
    /* update tail */
    pQueue->pTail = pPrev;
    b038:	68fb      	ldr	r3, [r7, #12]
    b03a:	687a      	ldr	r2, [r7, #4]
    b03c:	605a      	str	r2, [r3, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
    b03e:	f7ff f80b 	bl	a058 <WsfCsExit>
}
    b042:	bf00      	nop
    b044:	3710      	adds	r7, #16
    b046:	46bd      	mov	sp, r7
    b048:	bd80      	pop	{r7, pc}

0000b04a <WsfQueueCount>:
 *
 *  \return Number of elements in queue.
 */
/*************************************************************************************************/
uint16_t WsfQueueCount(wsfQueue_t *pQueue)
{
    b04a:	b580      	push	{r7, lr}
    b04c:	b084      	sub	sp, #16
    b04e:	af00      	add	r7, sp, #0
    b050:	6078      	str	r0, [r7, #4]
  wsfQueueElem_t  *pElem;
  uint16_t        count = 0;
    b052:	2300      	movs	r3, #0
    b054:	817b      	strh	r3, [r7, #10]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
    b056:	f7fe ffeb 	bl	a030 <WsfCsEnter>

  pElem = pQueue->pHead;
    b05a:	687b      	ldr	r3, [r7, #4]
    b05c:	681b      	ldr	r3, [r3, #0]
    b05e:	60fb      	str	r3, [r7, #12]

  /* iterate over queue */
  while (pElem != NULL)
    b060:	e005      	b.n	b06e <WsfQueueCount+0x24>
  {
    count++;
    b062:	897b      	ldrh	r3, [r7, #10]
    b064:	3301      	adds	r3, #1
    b066:	817b      	strh	r3, [r7, #10]
    pElem = pElem->pNext;
    b068:	68fb      	ldr	r3, [r7, #12]
    b06a:	681b      	ldr	r3, [r3, #0]
    b06c:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
    b06e:	68fb      	ldr	r3, [r7, #12]
    b070:	2b00      	cmp	r3, #0
    b072:	d1f6      	bne.n	b062 <WsfQueueCount+0x18>
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
    b074:	f7fe fff0 	bl	a058 <WsfCsExit>

  return count;
    b078:	897b      	ldrh	r3, [r7, #10]
}
    b07a:	4618      	mov	r0, r3
    b07c:	3710      	adds	r7, #16
    b07e:	46bd      	mov	sp, r7
    b080:	bd80      	pop	{r7, pc}

0000b082 <WsfQueueEmpty>:
 *
 *  \return TRUE if queue is empty, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t WsfQueueEmpty(wsfQueue_t *pQueue)
{
    b082:	b580      	push	{r7, lr}
    b084:	b084      	sub	sp, #16
    b086:	af00      	add	r7, sp, #0
    b088:	6078      	str	r0, [r7, #4]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
    b08a:	f7fe ffd1 	bl	a030 <WsfCsEnter>

  empty = (pQueue->pHead == NULL);
    b08e:	687b      	ldr	r3, [r7, #4]
    b090:	681b      	ldr	r3, [r3, #0]
    b092:	2b00      	cmp	r3, #0
    b094:	bf0c      	ite	eq
    b096:	2301      	moveq	r3, #1
    b098:	2300      	movne	r3, #0
    b09a:	b2db      	uxtb	r3, r3
    b09c:	73fb      	strb	r3, [r7, #15]

  /* exit critical section */
  WSF_CS_EXIT(cs);
    b09e:	f7fe ffdb 	bl	a058 <WsfCsExit>

  return empty;
    b0a2:	7bfb      	ldrb	r3, [r7, #15]
}
    b0a4:	4618      	mov	r0, r3
    b0a6:	3710      	adds	r7, #16
    b0a8:	46bd      	mov	sp, r7
    b0aa:	bd80      	pop	{r7, pc}

0000b0ac <wsfTimerRemove>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void wsfTimerRemove(wsfTimer_t *pTimer)
{
    b0ac:	b580      	push	{r7, lr}
    b0ae:	b084      	sub	sp, #16
    b0b0:	af00      	add	r7, sp, #0
    b0b2:	6078      	str	r0, [r7, #4]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
    b0b4:	2300      	movs	r3, #0
    b0b6:	60bb      	str	r3, [r7, #8]

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
    b0b8:	4b10      	ldr	r3, [pc, #64]	; (b0fc <wsfTimerRemove+0x50>)
    b0ba:	681b      	ldr	r3, [r3, #0]
    b0bc:	60fb      	str	r3, [r7, #12]

  /* find timer in queue */
  while (pElem != NULL)
    b0be:	e008      	b.n	b0d2 <wsfTimerRemove+0x26>
  {
    if (pElem == pTimer)
    b0c0:	68fa      	ldr	r2, [r7, #12]
    b0c2:	687b      	ldr	r3, [r7, #4]
    b0c4:	429a      	cmp	r2, r3
    b0c6:	d008      	beq.n	b0da <wsfTimerRemove+0x2e>
    {
      break;
    }
    pPrev = pElem;
    b0c8:	68fb      	ldr	r3, [r7, #12]
    b0ca:	60bb      	str	r3, [r7, #8]
    pElem = pElem->pNext;
    b0cc:	68fb      	ldr	r3, [r7, #12]
    b0ce:	681b      	ldr	r3, [r3, #0]
    b0d0:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
    b0d2:	68fb      	ldr	r3, [r7, #12]
    b0d4:	2b00      	cmp	r3, #0
    b0d6:	d1f3      	bne.n	b0c0 <wsfTimerRemove+0x14>
    b0d8:	e000      	b.n	b0dc <wsfTimerRemove+0x30>
      break;
    b0da:	bf00      	nop
  }

  /* if timer found remove from queue */
  if (pElem != NULL)
    b0dc:	68fb      	ldr	r3, [r7, #12]
    b0de:	2b00      	cmp	r3, #0
    b0e0:	d007      	beq.n	b0f2 <wsfTimerRemove+0x46>
  {
    WsfQueueRemove(&wsfTimerTimerQueue, pTimer, pPrev);
    b0e2:	68ba      	ldr	r2, [r7, #8]
    b0e4:	6879      	ldr	r1, [r7, #4]
    b0e6:	4805      	ldr	r0, [pc, #20]	; (b0fc <wsfTimerRemove+0x50>)
    b0e8:	f7ff ff88 	bl	affc <WsfQueueRemove>

    pTimer->isStarted = FALSE;
    b0ec:	687b      	ldr	r3, [r7, #4]
    b0ee:	2200      	movs	r2, #0
    b0f0:	725a      	strb	r2, [r3, #9]
  }
}
    b0f2:	bf00      	nop
    b0f4:	3710      	adds	r7, #16
    b0f6:	46bd      	mov	sp, r7
    b0f8:	bd80      	pop	{r7, pc}
    b0fa:	bf00      	nop
    b0fc:	100028ec 	.word	0x100028ec

0000b100 <wsfTimerInsert>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void wsfTimerInsert(wsfTimer_t *pTimer, wsfTimerTicks_t ticks)
{
    b100:	b580      	push	{r7, lr}
    b102:	b084      	sub	sp, #16
    b104:	af00      	add	r7, sp, #0
    b106:	6078      	str	r0, [r7, #4]
    b108:	6039      	str	r1, [r7, #0]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
    b10a:	2300      	movs	r3, #0
    b10c:	60bb      	str	r3, [r7, #8]

  /* task schedule lock */
  WsfTaskLock();
    b10e:	f7fe ffb7 	bl	a080 <WsfTaskLock>

  /* if timer is already running stop it first */
  if (pTimer->isStarted)
    b112:	687b      	ldr	r3, [r7, #4]
    b114:	7a5b      	ldrb	r3, [r3, #9]
    b116:	2b00      	cmp	r3, #0
    b118:	d002      	beq.n	b120 <wsfTimerInsert+0x20>
  {
    wsfTimerRemove(pTimer);
    b11a:	6878      	ldr	r0, [r7, #4]
    b11c:	f7ff ffc6 	bl	b0ac <wsfTimerRemove>
  }

  pTimer->isStarted = TRUE;
    b120:	687b      	ldr	r3, [r7, #4]
    b122:	2201      	movs	r2, #1
    b124:	725a      	strb	r2, [r3, #9]
  pTimer->ticks = ticks;
    b126:	687b      	ldr	r3, [r7, #4]
    b128:	683a      	ldr	r2, [r7, #0]
    b12a:	605a      	str	r2, [r3, #4]

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
    b12c:	4b0f      	ldr	r3, [pc, #60]	; (b16c <wsfTimerInsert+0x6c>)
    b12e:	681b      	ldr	r3, [r3, #0]
    b130:	60fb      	str	r3, [r7, #12]

  /* find insertion point in queue */
  while (pElem != NULL)
    b132:	e00a      	b.n	b14a <wsfTimerInsert+0x4a>
  {
    if (pTimer->ticks < pElem->ticks)
    b134:	687b      	ldr	r3, [r7, #4]
    b136:	685a      	ldr	r2, [r3, #4]
    b138:	68fb      	ldr	r3, [r7, #12]
    b13a:	685b      	ldr	r3, [r3, #4]
    b13c:	429a      	cmp	r2, r3
    b13e:	d308      	bcc.n	b152 <wsfTimerInsert+0x52>
    {
      break;
    }
    pPrev = pElem;
    b140:	68fb      	ldr	r3, [r7, #12]
    b142:	60bb      	str	r3, [r7, #8]
    pElem = pElem->pNext;
    b144:	68fb      	ldr	r3, [r7, #12]
    b146:	681b      	ldr	r3, [r3, #0]
    b148:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
    b14a:	68fb      	ldr	r3, [r7, #12]
    b14c:	2b00      	cmp	r3, #0
    b14e:	d1f1      	bne.n	b134 <wsfTimerInsert+0x34>
    b150:	e000      	b.n	b154 <wsfTimerInsert+0x54>
      break;
    b152:	bf00      	nop
  }

  /* insert timer into queue */
  WsfQueueInsert(&wsfTimerTimerQueue, pTimer, pPrev);
    b154:	68ba      	ldr	r2, [r7, #8]
    b156:	6879      	ldr	r1, [r7, #4]
    b158:	4804      	ldr	r0, [pc, #16]	; (b16c <wsfTimerInsert+0x6c>)
    b15a:	f7ff ff24 	bl	afa6 <WsfQueueInsert>

  /* task schedule unlock */
  WsfTaskUnlock();
    b15e:	f7fe ff95 	bl	a08c <WsfTaskUnlock>
}
    b162:	bf00      	nop
    b164:	3710      	adds	r7, #16
    b166:	46bd      	mov	sp, r7
    b168:	bd80      	pop	{r7, pc}
    b16a:	bf00      	nop
    b16c:	100028ec 	.word	0x100028ec

0000b170 <WsfTimerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerInit(void)
{
    b170:	b480      	push	{r7}
    b172:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&wsfTimerTimerQueue);
    b174:	4b05      	ldr	r3, [pc, #20]	; (b18c <WsfTimerInit+0x1c>)
    b176:	2200      	movs	r2, #0
    b178:	601a      	str	r2, [r3, #0]
    b17a:	4b04      	ldr	r3, [pc, #16]	; (b18c <WsfTimerInit+0x1c>)
    b17c:	2200      	movs	r2, #0
    b17e:	605a      	str	r2, [r3, #4]
}
    b180:	bf00      	nop
    b182:	46bd      	mov	sp, r7
    b184:	f85d 7b04 	ldr.w	r7, [sp], #4
    b188:	4770      	bx	lr
    b18a:	bf00      	nop
    b18c:	100028ec 	.word	0x100028ec

0000b190 <WsfTimerStartSec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartSec(wsfTimer_t *pTimer, wsfTimerTicks_t sec)
{
    b190:	b580      	push	{r7, lr}
    b192:	b082      	sub	sp, #8
    b194:	af00      	add	r7, sp, #0
    b196:	6078      	str	r0, [r7, #4]
    b198:	6039      	str	r1, [r7, #0]
  WSF_TRACE_INFO2("WsfTimerStartSec pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_SEC_TO_TICKS(sec));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_SEC_TO_TICKS(sec));
    b19a:	683b      	ldr	r3, [r7, #0]
    b19c:	2264      	movs	r2, #100	; 0x64
    b19e:	fb02 f303 	mul.w	r3, r2, r3
    b1a2:	4619      	mov	r1, r3
    b1a4:	6878      	ldr	r0, [r7, #4]
    b1a6:	f7ff ffab 	bl	b100 <wsfTimerInsert>
}
    b1aa:	bf00      	nop
    b1ac:	3708      	adds	r7, #8
    b1ae:	46bd      	mov	sp, r7
    b1b0:	bd80      	pop	{r7, pc}
	...

0000b1b4 <WsfTimerStartMs>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartMs(wsfTimer_t *pTimer, wsfTimerTicks_t ms)
{
    b1b4:	b580      	push	{r7, lr}
    b1b6:	b082      	sub	sp, #8
    b1b8:	af00      	add	r7, sp, #0
    b1ba:	6078      	str	r0, [r7, #4]
    b1bc:	6039      	str	r1, [r7, #0]
  WSF_TRACE_INFO2("WsfTimerStartMs pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_MS_TO_TICKS(ms));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_MS_TO_TICKS(ms));
    b1be:	683b      	ldr	r3, [r7, #0]
    b1c0:	4a05      	ldr	r2, [pc, #20]	; (b1d8 <WsfTimerStartMs+0x24>)
    b1c2:	fba2 2303 	umull	r2, r3, r2, r3
    b1c6:	08db      	lsrs	r3, r3, #3
    b1c8:	4619      	mov	r1, r3
    b1ca:	6878      	ldr	r0, [r7, #4]
    b1cc:	f7ff ff98 	bl	b100 <wsfTimerInsert>
}
    b1d0:	bf00      	nop
    b1d2:	3708      	adds	r7, #8
    b1d4:	46bd      	mov	sp, r7
    b1d6:	bd80      	pop	{r7, pc}
    b1d8:	cccccccd 	.word	0xcccccccd

0000b1dc <WsfTimerStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStop(wsfTimer_t *pTimer)
{
    b1dc:	b580      	push	{r7, lr}
    b1de:	b082      	sub	sp, #8
    b1e0:	af00      	add	r7, sp, #0
    b1e2:	6078      	str	r0, [r7, #4]
  WSF_TRACE_INFO1("WsfTimerStop pTimer:0x%x", pTimer);

  /* task schedule lock */
  WsfTaskLock();
    b1e4:	f7fe ff4c 	bl	a080 <WsfTaskLock>

  wsfTimerRemove(pTimer);
    b1e8:	6878      	ldr	r0, [r7, #4]
    b1ea:	f7ff ff5f 	bl	b0ac <wsfTimerRemove>

  /* task schedule unlock */
  WsfTaskUnlock();
    b1ee:	f7fe ff4d 	bl	a08c <WsfTaskUnlock>
}
    b1f2:	bf00      	nop
    b1f4:	3708      	adds	r7, #8
    b1f6:	46bd      	mov	sp, r7
    b1f8:	bd80      	pop	{r7, pc}
	...

0000b1fc <WsfTimerUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerUpdate(wsfTimerTicks_t ticks)
{
    b1fc:	b580      	push	{r7, lr}
    b1fe:	b084      	sub	sp, #16
    b200:	af00      	add	r7, sp, #0
    b202:	6078      	str	r0, [r7, #4]
  wsfTimer_t  *pElem;

  /* task schedule lock */
  WsfTaskLock();
    b204:	f7fe ff3c 	bl	a080 <WsfTaskLock>

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
    b208:	4b12      	ldr	r3, [pc, #72]	; (b254 <WsfTimerUpdate+0x58>)
    b20a:	681b      	ldr	r3, [r3, #0]
    b20c:	60fb      	str	r3, [r7, #12]

  /* iterate over timer queue */
  while (pElem != NULL)
    b20e:	e017      	b.n	b240 <WsfTimerUpdate+0x44>
  {
    /* decrement ticks while preventing underflow */
    if (pElem->ticks > ticks)
    b210:	68fb      	ldr	r3, [r7, #12]
    b212:	685a      	ldr	r2, [r3, #4]
    b214:	687b      	ldr	r3, [r7, #4]
    b216:	429a      	cmp	r2, r3
    b218:	d906      	bls.n	b228 <WsfTimerUpdate+0x2c>
    {
      pElem->ticks -= ticks;
    b21a:	68fb      	ldr	r3, [r7, #12]
    b21c:	685a      	ldr	r2, [r3, #4]
    b21e:	687b      	ldr	r3, [r7, #4]
    b220:	1ad2      	subs	r2, r2, r3
    b222:	68fb      	ldr	r3, [r7, #12]
    b224:	605a      	str	r2, [r3, #4]
    b226:	e008      	b.n	b23a <WsfTimerUpdate+0x3e>
    }
    else
    {
      pElem->ticks = 0;
    b228:	68fb      	ldr	r3, [r7, #12]
    b22a:	2200      	movs	r2, #0
    b22c:	605a      	str	r2, [r3, #4]

      /* timer expired; set task for this timer as ready */
      WsfTaskSetReady(pElem->handlerId, WSF_TIMER_EVENT);
    b22e:	68fb      	ldr	r3, [r7, #12]
    b230:	7a1b      	ldrb	r3, [r3, #8]
    b232:	2102      	movs	r1, #2
    b234:	4618      	mov	r0, r3
    b236:	f7fe ff67 	bl	a108 <WsfTaskSetReady>
    }

    pElem = pElem->pNext;
    b23a:	68fb      	ldr	r3, [r7, #12]
    b23c:	681b      	ldr	r3, [r3, #0]
    b23e:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
    b240:	68fb      	ldr	r3, [r7, #12]
    b242:	2b00      	cmp	r3, #0
    b244:	d1e4      	bne.n	b210 <WsfTimerUpdate+0x14>
  }

  /* task schedule unlock */
  WsfTaskUnlock();
    b246:	f7fe ff21 	bl	a08c <WsfTaskUnlock>
}
    b24a:	bf00      	nop
    b24c:	3710      	adds	r7, #16
    b24e:	46bd      	mov	sp, r7
    b250:	bd80      	pop	{r7, pc}
    b252:	bf00      	nop
    b254:	100028ec 	.word	0x100028ec

0000b258 <WsfTimerNextExpiration>:
 *
 *  \return The number of ticks until the next timer expiration.
 */
/*************************************************************************************************/
wsfTimerTicks_t WsfTimerNextExpiration(bool_t *pTimerRunning)
{
    b258:	b580      	push	{r7, lr}
    b25a:	b084      	sub	sp, #16
    b25c:	af00      	add	r7, sp, #0
    b25e:	6078      	str	r0, [r7, #4]
  wsfTimerTicks_t ticks;

  /* task schedule lock */
  WsfTaskLock();
    b260:	f7fe ff0e 	bl	a080 <WsfTaskLock>

  if (wsfTimerTimerQueue.pHead == NULL)
    b264:	4b0b      	ldr	r3, [pc, #44]	; (b294 <WsfTimerNextExpiration+0x3c>)
    b266:	681b      	ldr	r3, [r3, #0]
    b268:	2b00      	cmp	r3, #0
    b26a:	d105      	bne.n	b278 <WsfTimerNextExpiration+0x20>
  {
    *pTimerRunning = FALSE;
    b26c:	687b      	ldr	r3, [r7, #4]
    b26e:	2200      	movs	r2, #0
    b270:	701a      	strb	r2, [r3, #0]
    ticks = 0;
    b272:	2300      	movs	r3, #0
    b274:	60fb      	str	r3, [r7, #12]
    b276:	e006      	b.n	b286 <WsfTimerNextExpiration+0x2e>
  }
  else
  {
    *pTimerRunning = TRUE;
    b278:	687b      	ldr	r3, [r7, #4]
    b27a:	2201      	movs	r2, #1
    b27c:	701a      	strb	r2, [r3, #0]
    ticks = ((wsfTimer_t *) wsfTimerTimerQueue.pHead)->ticks;
    b27e:	4b05      	ldr	r3, [pc, #20]	; (b294 <WsfTimerNextExpiration+0x3c>)
    b280:	681b      	ldr	r3, [r3, #0]
    b282:	685b      	ldr	r3, [r3, #4]
    b284:	60fb      	str	r3, [r7, #12]
  }

  /* task schedule unlock */
  WsfTaskUnlock();
    b286:	f7fe ff01 	bl	a08c <WsfTaskUnlock>

  return ticks;
    b28a:	68fb      	ldr	r3, [r7, #12]
}
    b28c:	4618      	mov	r0, r3
    b28e:	3710      	adds	r7, #16
    b290:	46bd      	mov	sp, r7
    b292:	bd80      	pop	{r7, pc}
    b294:	100028ec 	.word	0x100028ec

0000b298 <WsfTimerServiceExpired>:
 *
 *  \return Pointer to timer or NULL.
 */
/*************************************************************************************************/
wsfTimer_t *WsfTimerServiceExpired(wsfTaskId_t taskId)
{
    b298:	b580      	push	{r7, lr}
    b29a:	b084      	sub	sp, #16
    b29c:	af00      	add	r7, sp, #0
    b29e:	4603      	mov	r3, r0
    b2a0:	71fb      	strb	r3, [r7, #7]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
    b2a2:	2300      	movs	r3, #0
    b2a4:	60fb      	str	r3, [r7, #12]

  /* task schedule lock */
  WsfTaskLock();
    b2a6:	f7fe feeb 	bl	a080 <WsfTaskLock>

  /* find expired timers in queue */
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
    b2aa:	4b0e      	ldr	r3, [pc, #56]	; (b2e4 <WsfTimerServiceExpired+0x4c>)
    b2ac:	681b      	ldr	r3, [r3, #0]
    b2ae:	60bb      	str	r3, [r7, #8]
    b2b0:	68bb      	ldr	r3, [r7, #8]
    b2b2:	2b00      	cmp	r3, #0
    b2b4:	d00f      	beq.n	b2d6 <WsfTimerServiceExpired+0x3e>
      (pElem->ticks == 0))
    b2b6:	68bb      	ldr	r3, [r7, #8]
    b2b8:	685b      	ldr	r3, [r3, #4]
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
    b2ba:	2b00      	cmp	r3, #0
    b2bc:	d10b      	bne.n	b2d6 <WsfTimerServiceExpired+0x3e>
  {
    /* remove timer from queue */
    WsfQueueRemove(&wsfTimerTimerQueue, pElem, pPrev);
    b2be:	68fa      	ldr	r2, [r7, #12]
    b2c0:	68b9      	ldr	r1, [r7, #8]
    b2c2:	4808      	ldr	r0, [pc, #32]	; (b2e4 <WsfTimerServiceExpired+0x4c>)
    b2c4:	f7ff fe9a 	bl	affc <WsfQueueRemove>

    pElem->isStarted = FALSE;
    b2c8:	68bb      	ldr	r3, [r7, #8]
    b2ca:	2200      	movs	r2, #0
    b2cc:	725a      	strb	r2, [r3, #9]

    /* task schedule unlock */
    WsfTaskUnlock();
    b2ce:	f7fe fedd 	bl	a08c <WsfTaskUnlock>

    WSF_TRACE_INFO1("Timer expired pTimer:0x%x", pElem);

    /* return timer */
    return pElem;
    b2d2:	68bb      	ldr	r3, [r7, #8]
    b2d4:	e002      	b.n	b2dc <WsfTimerServiceExpired+0x44>
  }

  /* task schedule unlock */
  WsfTaskUnlock();
    b2d6:	f7fe fed9 	bl	a08c <WsfTaskUnlock>

  return NULL;
    b2da:	2300      	movs	r3, #0
}
    b2dc:	4618      	mov	r0, r3
    b2de:	3710      	adds	r7, #16
    b2e0:	46bd      	mov	sp, r7
    b2e2:	bd80      	pop	{r7, pc}
    b2e4:	100028ec 	.word	0x100028ec

0000b2e8 <am_devices_button_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_button_init(am_devices_button_t *psButton)
{
    b2e8:	b490      	push	{r4, r7}
    b2ea:	b082      	sub	sp, #8
    b2ec:	af00      	add	r7, sp, #0
    b2ee:	6078      	str	r0, [r7, #4]
    // Disable the pin to save power.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
#else
    am_hal_gpio_pin_config(psButton->ui32GPIONumber, AM_HAL_PIN_DISABLE);
    b2f0:	687b      	ldr	r3, [r7, #4]
    b2f2:	681b      	ldr	r3, [r3, #0]
    b2f4:	2b00      	cmp	r3, #0
    b2f6:	db46      	blt.n	b386 <am_devices_button_init+0x9e>
    b2f8:	4b2a      	ldr	r3, [pc, #168]	; (b3a4 <am_devices_button_init+0xbc>)
    b2fa:	2273      	movs	r2, #115	; 0x73
    b2fc:	601a      	str	r2, [r3, #0]
    b2fe:	687b      	ldr	r3, [r7, #4]
    b300:	681b      	ldr	r3, [r3, #0]
    b302:	085b      	lsrs	r3, r3, #1
    b304:	f003 027c 	and.w	r2, r3, #124	; 0x7c
    b308:	4b27      	ldr	r3, [pc, #156]	; (b3a8 <am_devices_button_init+0xc0>)
    b30a:	4413      	add	r3, r2
    b30c:	4618      	mov	r0, r3
    b30e:	687b      	ldr	r3, [r7, #4]
    b310:	681b      	ldr	r3, [r3, #0]
    b312:	085b      	lsrs	r3, r3, #1
    b314:	f003 027c 	and.w	r2, r3, #124	; 0x7c
    b318:	4b23      	ldr	r3, [pc, #140]	; (b3a8 <am_devices_button_init+0xc0>)
    b31a:	4413      	add	r3, r2
    b31c:	681a      	ldr	r2, [r3, #0]
    b31e:	687b      	ldr	r3, [r7, #4]
    b320:	681b      	ldr	r3, [r3, #0]
    b322:	009b      	lsls	r3, r3, #2
    b324:	f003 031c 	and.w	r3, r3, #28
    b328:	2107      	movs	r1, #7
    b32a:	fa01 f303 	lsl.w	r3, r1, r3
    b32e:	43db      	mvns	r3, r3
    b330:	4013      	ands	r3, r2
    b332:	6003      	str	r3, [r0, #0]
    b334:	687b      	ldr	r3, [r7, #4]
    b336:	681b      	ldr	r3, [r3, #0]
    b338:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    b33c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b340:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b344:	461c      	mov	r4, r3
    b346:	687b      	ldr	r3, [r7, #4]
    b348:	681b      	ldr	r3, [r3, #0]
    b34a:	00db      	lsls	r3, r3, #3
    b34c:	f003 0318 	and.w	r3, r3, #24
    b350:	2218      	movs	r2, #24
    b352:	409a      	lsls	r2, r3
    b354:	687b      	ldr	r3, [r7, #4]
    b356:	681b      	ldr	r3, [r3, #0]
    b358:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    b35c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b360:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b364:	6819      	ldr	r1, [r3, #0]
    b366:	687b      	ldr	r3, [r7, #4]
    b368:	681b      	ldr	r3, [r3, #0]
    b36a:	00db      	lsls	r3, r3, #3
    b36c:	f003 0318 	and.w	r3, r3, #24
    b370:	20ff      	movs	r0, #255	; 0xff
    b372:	fa00 f303 	lsl.w	r3, r0, r3
    b376:	43db      	mvns	r3, r3
    b378:	400b      	ands	r3, r1
    b37a:	4313      	orrs	r3, r2
    b37c:	6023      	str	r3, [r4, #0]
    b37e:	4b09      	ldr	r3, [pc, #36]	; (b3a4 <am_devices_button_init+0xbc>)
    b380:	2200      	movs	r2, #0
    b382:	601a      	str	r2, [r3, #0]
    b384:	e000      	b.n	b388 <am_devices_button_init+0xa0>
    b386:	bf00      	nop


    //
    // Initialize the state variables.
    //
    psButton->ui32Count = 0;
    b388:	687b      	ldr	r3, [r7, #4]
    b38a:	2200      	movs	r2, #0
    b38c:	609a      	str	r2, [r3, #8]
    psButton->bPressed = false;
    b38e:	687b      	ldr	r3, [r7, #4]
    b390:	2200      	movs	r2, #0
    b392:	731a      	strb	r2, [r3, #12]
    psButton->bChanged = false;
    b394:	687b      	ldr	r3, [r7, #4]
    b396:	2200      	movs	r2, #0
    b398:	735a      	strb	r2, [r3, #13]
}
    b39a:	bf00      	nop
    b39c:	3708      	adds	r7, #8
    b39e:	46bd      	mov	sp, r7
    b3a0:	bc90      	pop	{r4, r7}
    b3a2:	4770      	bx	lr
    b3a4:	40010060 	.word	0x40010060
    b3a8:	40010040 	.word	0x40010040

0000b3ac <am_devices_button_array_init>:
//
//*****************************************************************************
void
am_devices_button_array_init(am_devices_button_t *psButtons,
                             uint32_t ui32NumButtons)
{
    b3ac:	b580      	push	{r7, lr}
    b3ae:	b084      	sub	sp, #16
    b3b0:	af00      	add	r7, sp, #0
    b3b2:	6078      	str	r0, [r7, #4]
    b3b4:	6039      	str	r1, [r7, #0]
    uint32_t i;

    //
    // Loop through the list of buttons, configuring each one individually.
    //
    for ( i = 0; i < ui32NumButtons; i++ )
    b3b6:	2300      	movs	r3, #0
    b3b8:	60fb      	str	r3, [r7, #12]
    b3ba:	e009      	b.n	b3d0 <am_devices_button_array_init+0x24>
    {
        am_devices_button_init(psButtons + i);
    b3bc:	68fb      	ldr	r3, [r7, #12]
    b3be:	011b      	lsls	r3, r3, #4
    b3c0:	687a      	ldr	r2, [r7, #4]
    b3c2:	4413      	add	r3, r2
    b3c4:	4618      	mov	r0, r3
    b3c6:	f7ff ff8f 	bl	b2e8 <am_devices_button_init>
    for ( i = 0; i < ui32NumButtons; i++ )
    b3ca:	68fb      	ldr	r3, [r7, #12]
    b3cc:	3301      	adds	r3, #1
    b3ce:	60fb      	str	r3, [r7, #12]
    b3d0:	68fa      	ldr	r2, [r7, #12]
    b3d2:	683b      	ldr	r3, [r7, #0]
    b3d4:	429a      	cmp	r2, r3
    b3d6:	d3f1      	bcc.n	b3bc <am_devices_button_array_init+0x10>
    }
}
    b3d8:	bf00      	nop
    b3da:	3710      	adds	r7, #16
    b3dc:	46bd      	mov	sp, r7
    b3de:	bd80      	pop	{r7, pc}

0000b3e0 <am_devices_button_tick>:
//! @return None.
//
//*****************************************************************************
void
am_devices_button_tick(am_devices_button_t *psButton)
{
    b3e0:	b490      	push	{r4, r7}
    b3e2:	b084      	sub	sp, #16
    b3e4:	af00      	add	r7, sp, #0
    b3e6:	6078      	str	r0, [r7, #4]
    // Enable the button pin.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_INPUT);
#else
    am_hal_gpio_pin_config(psButton->ui32GPIONumber, AM_HAL_PIN_INPUT);
    b3e8:	687b      	ldr	r3, [r7, #4]
    b3ea:	681b      	ldr	r3, [r3, #0]
    b3ec:	2b00      	cmp	r3, #0
    b3ee:	db46      	blt.n	b47e <am_devices_button_tick+0x9e>
    b3f0:	4b6a      	ldr	r3, [pc, #424]	; (b59c <am_devices_button_tick+0x1bc>)
    b3f2:	2273      	movs	r2, #115	; 0x73
    b3f4:	601a      	str	r2, [r3, #0]
    b3f6:	687b      	ldr	r3, [r7, #4]
    b3f8:	681b      	ldr	r3, [r3, #0]
    b3fa:	085b      	lsrs	r3, r3, #1
    b3fc:	f003 027c 	and.w	r2, r3, #124	; 0x7c
    b400:	4b67      	ldr	r3, [pc, #412]	; (b5a0 <am_devices_button_tick+0x1c0>)
    b402:	4413      	add	r3, r2
    b404:	4618      	mov	r0, r3
    b406:	687b      	ldr	r3, [r7, #4]
    b408:	681b      	ldr	r3, [r3, #0]
    b40a:	085b      	lsrs	r3, r3, #1
    b40c:	f003 027c 	and.w	r2, r3, #124	; 0x7c
    b410:	4b63      	ldr	r3, [pc, #396]	; (b5a0 <am_devices_button_tick+0x1c0>)
    b412:	4413      	add	r3, r2
    b414:	681a      	ldr	r2, [r3, #0]
    b416:	687b      	ldr	r3, [r7, #4]
    b418:	681b      	ldr	r3, [r3, #0]
    b41a:	009b      	lsls	r3, r3, #2
    b41c:	f003 031c 	and.w	r3, r3, #28
    b420:	2107      	movs	r1, #7
    b422:	fa01 f303 	lsl.w	r3, r1, r3
    b426:	43db      	mvns	r3, r3
    b428:	4013      	ands	r3, r2
    b42a:	6003      	str	r3, [r0, #0]
    b42c:	687b      	ldr	r3, [r7, #4]
    b42e:	681b      	ldr	r3, [r3, #0]
    b430:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    b434:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b438:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b43c:	461c      	mov	r4, r3
    b43e:	687b      	ldr	r3, [r7, #4]
    b440:	681b      	ldr	r3, [r3, #0]
    b442:	00db      	lsls	r3, r3, #3
    b444:	f003 0318 	and.w	r3, r3, #24
    b448:	221a      	movs	r2, #26
    b44a:	409a      	lsls	r2, r3
    b44c:	687b      	ldr	r3, [r7, #4]
    b44e:	681b      	ldr	r3, [r3, #0]
    b450:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    b454:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b458:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b45c:	6819      	ldr	r1, [r3, #0]
    b45e:	687b      	ldr	r3, [r7, #4]
    b460:	681b      	ldr	r3, [r3, #0]
    b462:	00db      	lsls	r3, r3, #3
    b464:	f003 0318 	and.w	r3, r3, #24
    b468:	20ff      	movs	r0, #255	; 0xff
    b46a:	fa00 f303 	lsl.w	r3, r0, r3
    b46e:	43db      	mvns	r3, r3
    b470:	400b      	ands	r3, r1
    b472:	4313      	orrs	r3, r2
    b474:	6023      	str	r3, [r4, #0]
    b476:	4b49      	ldr	r3, [pc, #292]	; (b59c <am_devices_button_tick+0x1bc>)
    b478:	2200      	movs	r2, #0
    b47a:	601a      	str	r2, [r3, #0]
    b47c:	e000      	b.n	b480 <am_devices_button_tick+0xa0>
    b47e:	bf00      	nop
    // its "state" counter to zero.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_state_read(psButton->ui32GPIONumber, AM_HAL_GPIO_INPUT_READ, &ui32PinState);
#else
    ui32PinState = am_hal_gpio_input_bit_read(psButton->ui32GPIONumber);
    b480:	687b      	ldr	r3, [r7, #4]
    b482:	681b      	ldr	r3, [r3, #0]
    b484:	08db      	lsrs	r3, r3, #3
    b486:	f003 0204 	and.w	r2, r3, #4
    b48a:	4b46      	ldr	r3, [pc, #280]	; (b5a4 <am_devices_button_tick+0x1c4>)
    b48c:	4413      	add	r3, r2
    b48e:	681a      	ldr	r2, [r3, #0]
    b490:	687b      	ldr	r3, [r7, #4]
    b492:	681b      	ldr	r3, [r3, #0]
    b494:	f003 031f 	and.w	r3, r3, #31
    b498:	fa22 f303 	lsr.w	r3, r2, r3
    b49c:	f003 0301 	and.w	r3, r3, #1
    b4a0:	2b00      	cmp	r3, #0
    b4a2:	bf14      	ite	ne
    b4a4:	2301      	movne	r3, #1
    b4a6:	2300      	moveq	r3, #0
    b4a8:	b2db      	uxtb	r3, r3
    b4aa:	60fb      	str	r3, [r7, #12]
#endif

    //
    // Check to see if the button is "pressed" according to our GPIO reading.
    //
    bRawButtonPressed = (ui32PinState != psButton->ui32Polarity);
    b4ac:	687b      	ldr	r3, [r7, #4]
    b4ae:	685a      	ldr	r2, [r3, #4]
    b4b0:	68fb      	ldr	r3, [r7, #12]
    b4b2:	429a      	cmp	r2, r3
    b4b4:	bf14      	ite	ne
    b4b6:	2301      	movne	r3, #1
    b4b8:	2300      	moveq	r3, #0
    b4ba:	72fb      	strb	r3, [r7, #11]

    //
    // Is this button state different from the last saved state?
    //
    if ( bRawButtonPressed != psButton->bPressed )
    b4bc:	687b      	ldr	r3, [r7, #4]
    b4be:	7b1b      	ldrb	r3, [r3, #12]
    b4c0:	7afa      	ldrb	r2, [r7, #11]
    b4c2:	429a      	cmp	r2, r3
    b4c4:	d005      	beq.n	b4d2 <am_devices_button_tick+0xf2>
    {
        //
        // If so, increase the debounce count.
        //
        psButton->ui32Count++;
    b4c6:	687b      	ldr	r3, [r7, #4]
    b4c8:	689b      	ldr	r3, [r3, #8]
    b4ca:	1c5a      	adds	r2, r3, #1
    b4cc:	687b      	ldr	r3, [r7, #4]
    b4ce:	609a      	str	r2, [r3, #8]
    b4d0:	e002      	b.n	b4d8 <am_devices_button_tick+0xf8>
    else
    {
        //
        // Otherwise, set the count back to zero.
        //
        psButton->ui32Count = 0;
    b4d2:	687b      	ldr	r3, [r7, #4]
    b4d4:	2200      	movs	r2, #0
    b4d6:	609a      	str	r2, [r3, #8]

    //
    // If we hit the button debounce delay, record a button press to the
    // structure, and reset the count.
    //
    if ( psButton->ui32Count >= AM_DEVICES_BUTTON_DEBOUNCE_DELAY )
    b4d8:	687b      	ldr	r3, [r7, #4]
    b4da:	689b      	ldr	r3, [r3, #8]
    b4dc:	2b03      	cmp	r3, #3
    b4de:	d909      	bls.n	b4f4 <am_devices_button_tick+0x114>
    {
        psButton->bPressed = bRawButtonPressed;
    b4e0:	687b      	ldr	r3, [r7, #4]
    b4e2:	7afa      	ldrb	r2, [r7, #11]
    b4e4:	731a      	strb	r2, [r3, #12]
        psButton->bChanged = true;
    b4e6:	687b      	ldr	r3, [r7, #4]
    b4e8:	2201      	movs	r2, #1
    b4ea:	735a      	strb	r2, [r3, #13]
        psButton->ui32Count = 0;
    b4ec:	687b      	ldr	r3, [r7, #4]
    b4ee:	2200      	movs	r2, #0
    b4f0:	609a      	str	r2, [r3, #8]
    b4f2:	e002      	b.n	b4fa <am_devices_button_tick+0x11a>
    {
        //
        // If we didn't just record a press/release event, update the structure
        // to say that the current state isn't new.
        //
        psButton->bChanged = false;
    b4f4:	687b      	ldr	r3, [r7, #4]
    b4f6:	2200      	movs	r2, #0
    b4f8:	735a      	strb	r2, [r3, #13]
    // Disable the button pin to save power.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
#else
    am_hal_gpio_pin_config(psButton->ui32GPIONumber, AM_HAL_PIN_DISABLE);
    b4fa:	687b      	ldr	r3, [r7, #4]
    b4fc:	681b      	ldr	r3, [r3, #0]
    b4fe:	2b00      	cmp	r3, #0
    b500:	db46      	blt.n	b590 <am_devices_button_tick+0x1b0>
    b502:	4b26      	ldr	r3, [pc, #152]	; (b59c <am_devices_button_tick+0x1bc>)
    b504:	2273      	movs	r2, #115	; 0x73
    b506:	601a      	str	r2, [r3, #0]
    b508:	687b      	ldr	r3, [r7, #4]
    b50a:	681b      	ldr	r3, [r3, #0]
    b50c:	085b      	lsrs	r3, r3, #1
    b50e:	f003 027c 	and.w	r2, r3, #124	; 0x7c
    b512:	4b23      	ldr	r3, [pc, #140]	; (b5a0 <am_devices_button_tick+0x1c0>)
    b514:	4413      	add	r3, r2
    b516:	4618      	mov	r0, r3
    b518:	687b      	ldr	r3, [r7, #4]
    b51a:	681b      	ldr	r3, [r3, #0]
    b51c:	085b      	lsrs	r3, r3, #1
    b51e:	f003 027c 	and.w	r2, r3, #124	; 0x7c
    b522:	4b1f      	ldr	r3, [pc, #124]	; (b5a0 <am_devices_button_tick+0x1c0>)
    b524:	4413      	add	r3, r2
    b526:	681a      	ldr	r2, [r3, #0]
    b528:	687b      	ldr	r3, [r7, #4]
    b52a:	681b      	ldr	r3, [r3, #0]
    b52c:	009b      	lsls	r3, r3, #2
    b52e:	f003 031c 	and.w	r3, r3, #28
    b532:	2107      	movs	r1, #7
    b534:	fa01 f303 	lsl.w	r3, r1, r3
    b538:	43db      	mvns	r3, r3
    b53a:	4013      	ands	r3, r2
    b53c:	6003      	str	r3, [r0, #0]
    b53e:	687b      	ldr	r3, [r7, #4]
    b540:	681b      	ldr	r3, [r3, #0]
    b542:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    b546:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b54a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b54e:	461c      	mov	r4, r3
    b550:	687b      	ldr	r3, [r7, #4]
    b552:	681b      	ldr	r3, [r3, #0]
    b554:	00db      	lsls	r3, r3, #3
    b556:	f003 0318 	and.w	r3, r3, #24
    b55a:	2218      	movs	r2, #24
    b55c:	409a      	lsls	r2, r3
    b55e:	687b      	ldr	r3, [r7, #4]
    b560:	681b      	ldr	r3, [r3, #0]
    b562:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    b566:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b56a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b56e:	6819      	ldr	r1, [r3, #0]
    b570:	687b      	ldr	r3, [r7, #4]
    b572:	681b      	ldr	r3, [r3, #0]
    b574:	00db      	lsls	r3, r3, #3
    b576:	f003 0318 	and.w	r3, r3, #24
    b57a:	20ff      	movs	r0, #255	; 0xff
    b57c:	fa00 f303 	lsl.w	r3, r0, r3
    b580:	43db      	mvns	r3, r3
    b582:	400b      	ands	r3, r1
    b584:	4313      	orrs	r3, r2
    b586:	6023      	str	r3, [r4, #0]
    b588:	4b04      	ldr	r3, [pc, #16]	; (b59c <am_devices_button_tick+0x1bc>)
    b58a:	2200      	movs	r2, #0
    b58c:	601a      	str	r2, [r3, #0]
#endif // AM_APOLLO3_GPIO
}
    b58e:	e000      	b.n	b592 <am_devices_button_tick+0x1b2>
    am_hal_gpio_pin_config(psButton->ui32GPIONumber, AM_HAL_PIN_DISABLE);
    b590:	bf00      	nop
}
    b592:	bf00      	nop
    b594:	3710      	adds	r7, #16
    b596:	46bd      	mov	sp, r7
    b598:	bc90      	pop	{r4, r7}
    b59a:	4770      	bx	lr
    b59c:	40010060 	.word	0x40010060
    b5a0:	40010040 	.word	0x40010040
    b5a4:	40010080 	.word	0x40010080

0000b5a8 <am_devices_button_array_tick>:
//
//*****************************************************************************
void
am_devices_button_array_tick(am_devices_button_t *psButtons,
                             uint32_t ui32NumButtons)
{
    b5a8:	b580      	push	{r7, lr}
    b5aa:	b084      	sub	sp, #16
    b5ac:	af00      	add	r7, sp, #0
    b5ae:	6078      	str	r0, [r7, #4]
    b5b0:	6039      	str	r1, [r7, #0]
    uint32_t i;

    //
    // Run the "tick" function for each button in the list.
    //
    for ( i = 0; i < ui32NumButtons; i++ )
    b5b2:	2300      	movs	r3, #0
    b5b4:	60fb      	str	r3, [r7, #12]
    b5b6:	e009      	b.n	b5cc <am_devices_button_array_tick+0x24>
    {
        am_devices_button_tick(psButtons + i);
    b5b8:	68fb      	ldr	r3, [r7, #12]
    b5ba:	011b      	lsls	r3, r3, #4
    b5bc:	687a      	ldr	r2, [r7, #4]
    b5be:	4413      	add	r3, r2
    b5c0:	4618      	mov	r0, r3
    b5c2:	f7ff ff0d 	bl	b3e0 <am_devices_button_tick>
    for ( i = 0; i < ui32NumButtons; i++ )
    b5c6:	68fb      	ldr	r3, [r7, #12]
    b5c8:	3301      	adds	r3, #1
    b5ca:	60fb      	str	r3, [r7, #12]
    b5cc:	68fa      	ldr	r2, [r7, #12]
    b5ce:	683b      	ldr	r3, [r7, #0]
    b5d0:	429a      	cmp	r2, r3
    b5d2:	d3f1      	bcc.n	b5b8 <am_devices_button_array_tick+0x10>
    }
}
    b5d4:	bf00      	nop
    b5d6:	3710      	adds	r7, #16
    b5d8:	46bd      	mov	sp, r7
    b5da:	bd80      	pop	{r7, pc}

0000b5dc <iom_write_complete>:
// IOM write complete callback
//
//*****************************************************************************
static void
iom_write_complete(void)
{
    b5dc:	b480      	push	{r7}
    b5de:	af00      	add	r7, sp, #0
    gIomDone = true;
    b5e0:	4b03      	ldr	r3, [pc, #12]	; (b5f0 <iom_write_complete+0x14>)
    b5e2:	2201      	movs	r2, #1
    b5e4:	701a      	strb	r2, [r3, #0]
}
    b5e6:	bf00      	nop
    b5e8:	46bd      	mov	sp, r7
    b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    b5ee:	4770      	bx	lr
    b5f0:	10001ac5 	.word	0x10001ac5

0000b5f4 <am_iomaster0_isr>:
//
//*****************************************************************************
#if (0 == AM_BSP_EM9304_IOM)
void
am_iomaster0_isr(void)
{
    b5f4:	b580      	push	{r7, lr}
    b5f6:	b082      	sub	sp, #8
    b5f8:	af00      	add	r7, sp, #0
    uint32_t ui32IntStatus;

    //
    // Read and clear the interrupt status.
    //
    ui32IntStatus = am_hal_iom_int_status_get(0, false);
    b5fa:	2100      	movs	r1, #0
    b5fc:	2000      	movs	r0, #0
    b5fe:	f004 f8fd 	bl	f7fc <am_hal_iom_int_status_get>
    b602:	6078      	str	r0, [r7, #4]
    am_hal_iom_int_clear(0, ui32IntStatus);
    b604:	6879      	ldr	r1, [r7, #4]
    b606:	2000      	movs	r0, #0
    b608:	f004 f8ee 	bl	f7e8 <am_hal_iom_int_clear>

    //
    // Service FIFO interrupts as necessary, and call IOM callbacks as
    // transfers are completed.
    //
    am_hal_iom_int_service(0, ui32IntStatus);
    b60c:	6879      	ldr	r1, [r7, #4]
    b60e:	2000      	movs	r0, #0
    b610:	f003 feaa 	bl	f368 <am_hal_iom_int_service>
}
    b614:	bf00      	nop
    b616:	3708      	adds	r7, #8
    b618:	46bd      	mov	sp, r7
    b61a:	bd80      	pop	{r7, pc}

0000b61c <am_devices_em9304_tx_starts>:
//! @return Number of bytes that can be written to EM9304.
//
//*****************************************************************************
uint8_t
am_devices_em9304_tx_starts(const am_devices_em9304_t *psDevice)
{
    b61c:	b590      	push	{r4, r7, lr}
    b61e:	b087      	sub	sp, #28
    b620:	af02      	add	r7, sp, #8
    b622:	6078      	str	r0, [r7, #4]
  // Indicates that a SPI transfer is in progress
  spiTxInProgress = 1;
    b624:	4b1a      	ldr	r3, [pc, #104]	; (b690 <am_devices_em9304_tx_starts+0x74>)
    b626:	2201      	movs	r2, #1
    b628:	701a      	strb	r2, [r3, #0]

  am_hal_iom_buffer(2) sCommand;
  am_hal_iom_buffer(2) sStas;
  sCommand.bytes[0] = EM9304_SPI_HEADER_TX;
    b62a:	2342      	movs	r3, #66	; 0x42
    b62c:	733b      	strb	r3, [r7, #12]
  sCommand.bytes[1] = 0x0;
    b62e:	2300      	movs	r3, #0
    b630:	737b      	strb	r3, [r7, #13]

  // Select the EM9304
  EM9304_SPISLAVESELECT();
    b632:	4b18      	ldr	r3, [pc, #96]	; (b694 <am_devices_em9304_tx_starts+0x78>)
    b634:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    b638:	601a      	str	r2, [r3, #0]

  // Wait EM9304 RDY signal
  while ( !EM9304_RDY_INT() );
    b63a:	bf00      	nop
    b63c:	f002 fee6 	bl	e40c <am_hal_gpio_input_read>
    b640:	460a      	mov	r2, r1
    b642:	4601      	mov	r1, r0
    b644:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    b648:	f04f 0400 	mov.w	r4, #0
    b64c:	ea03 0301 	and.w	r3, r3, r1
    b650:	ea04 0402 	and.w	r4, r4, r2
    b654:	4323      	orrs	r3, r4
    b656:	d0f1      	beq.n	b63c <am_devices_em9304_tx_starts+0x20>
#endif
  {
    //
    // Write to the IOM.
    //
    am_hal_iom_spi_write(psDevice->ui32IOMModule,
    b658:	687b      	ldr	r3, [r7, #4]
    b65a:	6858      	ldr	r0, [r3, #4]
    b65c:	f107 020c 	add.w	r2, r7, #12
    b660:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b664:	9300      	str	r3, [sp, #0]
    b666:	2301      	movs	r3, #1
    b668:	2100      	movs	r1, #0
    b66a:	f003 faed 	bl	ec48 <am_hal_iom_spi_write>
                         AM_HAL_IOM_RAW);

    //
    // Read from the IOM.
    //
    am_hal_iom_spi_read(psDevice->ui32IOMModule,
    b66e:	687b      	ldr	r3, [r7, #4]
    b670:	6858      	ldr	r0, [r3, #4]
    b672:	f107 0208 	add.w	r2, r7, #8
    b676:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b67a:	9300      	str	r3, [sp, #0]
    b67c:	2301      	movs	r3, #1
    b67e:	2100      	movs	r1, #0
    b680:	f003 fde0 	bl	f244 <am_hal_iom_spi_read>
                        0, sStas.words, 1,
                        AM_HAL_IOM_RAW);

    return sStas.bytes[0];
    b684:	7a3b      	ldrb	r3, [r7, #8]
  }
}
    b686:	4618      	mov	r0, r3
    b688:	3714      	adds	r7, #20
    b68a:	46bd      	mov	sp, r7
    b68c:	bd90      	pop	{r4, r7, pc}
    b68e:	bf00      	nop
    b690:	10001ac4 	.word	0x10001ac4
    b694:	4001009c 	.word	0x4001009c

0000b698 <am_devices_em9304_tx_ends>:
//! @return None.
//
//*****************************************************************************
void
am_devices_em9304_tx_ends(void)
{
    b698:	b580      	push	{r7, lr}
    b69a:	af00      	add	r7, sp, #0
    am_hal_iom_poll_complete(g_sEm9304.ui32IOMModule);
    b69c:	2300      	movs	r3, #0
    b69e:	4618      	mov	r0, r3
    b6a0:	f003 fe58 	bl	f354 <am_hal_iom_poll_complete>
    // Deselect the EM9304
    EM9304_SPISLAVEDESELECT();
    b6a4:	4b04      	ldr	r3, [pc, #16]	; (b6b8 <am_devices_em9304_tx_ends+0x20>)
    b6a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    b6aa:	601a      	str	r2, [r3, #0]

    // Indicates that the SPI transfer is finished
    spiTxInProgress = 0;
    b6ac:	4b03      	ldr	r3, [pc, #12]	; (b6bc <am_devices_em9304_tx_ends+0x24>)
    b6ae:	2200      	movs	r2, #0
    b6b0:	701a      	strb	r2, [r3, #0]
}
    b6b2:	bf00      	nop
    b6b4:	bd80      	pop	{r7, pc}
    b6b6:	bf00      	nop
    b6b8:	40010094 	.word	0x40010094
    b6bc:	10001ac4 	.word	0x10001ac4

0000b6c0 <am_devices_em9304_block_write>:
void
am_devices_em9304_block_write(const am_devices_em9304_t *psDevice,
                              uint8_t type,
                              uint8_t *pui8Values,
                              uint32_t ui32NumBytes)
{
    b6c0:	b590      	push	{r4, r7, lr}
    b6c2:	b0cb      	sub	sp, #300	; 0x12c
    b6c4:	af02      	add	r7, sp, #8
    b6c6:	f107 040c 	add.w	r4, r7, #12
    b6ca:	6020      	str	r0, [r4, #0]
    b6cc:	4608      	mov	r0, r1
    b6ce:	1d39      	adds	r1, r7, #4
    b6d0:	600a      	str	r2, [r1, #0]
    b6d2:	463a      	mov	r2, r7
    b6d4:	6013      	str	r3, [r2, #0]
    b6d6:	f107 030b 	add.w	r3, r7, #11
    b6da:	4602      	mov	r2, r0
    b6dc:	701a      	strb	r2, [r3, #0]
  am_hal_iom_buffer(EM9304_BUFFER_SIZE) sData;
  uint8_t em9304BufSize = 0;
    b6de:	2300      	movs	r3, #0
    b6e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  uint8_t hci_type_sent = 0;
    b6e4:	2300      	movs	r3, #0
    b6e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  // Check that we are not going to overwrite buffer.
  if ((ui32NumBytes + 1) > EM9304_BUFFER_SIZE)
    b6ea:	463b      	mov	r3, r7
    b6ec:	681b      	ldr	r3, [r3, #0]
    b6ee:	3301      	adds	r3, #1
    b6f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b6f4:	d903      	bls.n	b6fe <am_devices_em9304_block_write+0x3e>
  {
    am_util_debug_printf("HCI TX Error (STATUS ERROR) Packet Too Large\n");
    b6f6:	4850      	ldr	r0, [pc, #320]	; (b838 <am_devices_em9304_block_write+0x178>)
    b6f8:	f002 fbbe 	bl	de78 <am_util_stdio_printf>
    b6fc:	e098      	b.n	b830 <am_devices_em9304_block_write+0x170>
    return;
  }

  for ( uint32_t i = 0; i < ui32NumBytes; )
    b6fe:	2300      	movs	r3, #0
    b700:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    b704:	e08d      	b.n	b822 <am_devices_em9304_block_write+0x162>
  {
    if ( i < ui32NumBytes )
    b706:	463b      	mov	r3, r7
    b708:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
    b70c:	681b      	ldr	r3, [r3, #0]
    b70e:	429a      	cmp	r2, r3
    b710:	d207      	bcs.n	b722 <am_devices_em9304_block_write+0x62>
    {
      em9304BufSize = am_devices_em9304_tx_starts(psDevice);
    b712:	f107 030c 	add.w	r3, r7, #12
    b716:	6818      	ldr	r0, [r3, #0]
    b718:	f7ff ff80 	bl	b61c <am_devices_em9304_tx_starts>
    b71c:	4603      	mov	r3, r0
    b71e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    }

    uint32_t len = (em9304BufSize < (ui32NumBytes - i)) ? em9304BufSize : (ui32NumBytes - i);
    b722:	463b      	mov	r3, r7
    b724:	681a      	ldr	r2, [r3, #0]
    b726:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
    b72a:	1ad2      	subs	r2, r2, r3
    b72c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
    b730:	4293      	cmp	r3, r2
    b732:	bf28      	it	cs
    b734:	4613      	movcs	r3, r2
    b736:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    if (len > 0)  // check again if there is room to send more data
    b73a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    b73e:	2b00      	cmp	r3, #0
    b740:	d06d      	beq.n	b81e <am_devices_em9304_block_write+0x15e>
    {
      if (hci_type_sent == 0)
    b742:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
    b746:	2b00      	cmp	r3, #0
    b748:	d11c      	bne.n	b784 <am_devices_em9304_block_write+0xc4>
      {
        sData.bytes[0] = type;
    b74a:	f107 0310 	add.w	r3, r7, #16
    b74e:	f107 020b 	add.w	r2, r7, #11
    b752:	7812      	ldrb	r2, [r2, #0]
    b754:	701a      	strb	r2, [r3, #0]
        memcpy(&(sData.bytes[1]), pui8Values, len - 1);
    b756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    b75a:	1e59      	subs	r1, r3, #1
    b75c:	1d3b      	adds	r3, r7, #4
    b75e:	f107 0210 	add.w	r2, r7, #16
    b762:	1c50      	adds	r0, r2, #1
    b764:	460a      	mov	r2, r1
    b766:	6819      	ldr	r1, [r3, #0]
    b768:	f004 f9f1 	bl	fb4e <memcpy>
        i += len -1;
    b76c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
    b770:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
    b774:	4413      	add	r3, r2
    b776:	3b01      	subs	r3, #1
    b778:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
        hci_type_sent = 1;
    b77c:	2301      	movs	r3, #1
    b77e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    b782:	e012      	b.n	b7aa <am_devices_em9304_block_write+0xea>
      }
      else
      {
        memcpy(&(sData.bytes[0]), pui8Values + i, len);
    b784:	1d3b      	adds	r3, r7, #4
    b786:	681a      	ldr	r2, [r3, #0]
    b788:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
    b78c:	18d1      	adds	r1, r2, r3
    b78e:	f107 0310 	add.w	r3, r7, #16
    b792:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
    b796:	4618      	mov	r0, r3
    b798:	f004 f9d9 	bl	fb4e <memcpy>
        i += len;
    b79c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
    b7a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    b7a4:	4413      	add	r3, r2
    b7a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
      }

      while ( !EM9304_RDY_INT() );
    b7aa:	bf00      	nop
    b7ac:	f002 fe2e 	bl	e40c <am_hal_gpio_input_read>
    b7b0:	460a      	mov	r2, r1
    b7b2:	4601      	mov	r1, r0
    b7b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    b7b8:	f04f 0400 	mov.w	r4, #0
    b7bc:	ea03 0301 	and.w	r3, r3, r1
    b7c0:	ea04 0402 	and.w	r4, r4, r2
    b7c4:	4323      	orrs	r3, r4
    b7c6:	d0f1      	beq.n	b7ac <am_devices_em9304_block_write+0xec>

#if defined(USE_IOM_NONBLOCKING)
      gIomDone = false;
    b7c8:	4b1c      	ldr	r3, [pc, #112]	; (b83c <am_devices_em9304_block_write+0x17c>)
    b7ca:	2200      	movs	r2, #0
    b7cc:	701a      	strb	r2, [r3, #0]
      am_hal_iom_spi_write_nb(psDevice->ui32IOMModule,
    b7ce:	f107 030c 	add.w	r3, r7, #12
    b7d2:	681b      	ldr	r3, [r3, #0]
    b7d4:	6858      	ldr	r0, [r3, #4]
    b7d6:	f107 0210 	add.w	r2, r7, #16
    b7da:	4b19      	ldr	r3, [pc, #100]	; (b840 <am_devices_em9304_block_write+0x180>)
    b7dc:	9301      	str	r3, [sp, #4]
    b7de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b7e2:	9300      	str	r3, [sp, #0]
    b7e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    b7e8:	2100      	movs	r1, #0
    b7ea:	f003 fc77 	bl	f0dc <am_hal_iom_spi_write_nb>
      while(1)
      {
        //
        // Disable interrupt while we decide whether we're going to sleep.
        //
        uint32_t ui32IntStatus = am_hal_interrupt_master_disable();
    b7ee:	f002 fe97 	bl	e520 <am_hal_interrupt_master_disable>
    b7f2:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        if (!gIomDone)
    b7f6:	4b11      	ldr	r3, [pc, #68]	; (b83c <am_devices_em9304_block_write+0x17c>)
    b7f8:	781b      	ldrb	r3, [r3, #0]
    b7fa:	b2db      	uxtb	r3, r3
    b7fc:	f083 0301 	eor.w	r3, r3, #1
    b800:	b2db      	uxtb	r3, r3
    b802:	2b00      	cmp	r3, #0
    b804:	d007      	beq.n	b816 <am_devices_em9304_block_write+0x156>
        {
          //
          // Sleep while waiting for the IOM transaction to finish.
          //
          am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    b806:	2001      	movs	r0, #1
    b808:	f004 f91a 	bl	fa40 <am_hal_sysctrl_sleep>
          //
          // Enable interrupts
          //
          am_hal_interrupt_master_set(ui32IntStatus);
    b80c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
    b810:	f002 fe8a 	bl	e528 <am_hal_interrupt_master_set>
    b814:	e7eb      	b.n	b7ee <am_devices_em9304_block_write+0x12e>
        else
        {
          //
          // Enable interrupts
          //
          am_hal_interrupt_master_set(ui32IntStatus);
    b816:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
    b81a:	f002 fe85 	bl	e528 <am_hal_interrupt_master_set>
                           0, sData.words, len,
                           AM_HAL_IOM_RAW);
#endif
    }

    am_devices_em9304_tx_ends();
    b81e:	f7ff ff3b 	bl	b698 <am_devices_em9304_tx_ends>
  for ( uint32_t i = 0; i < ui32NumBytes; )
    b822:	463b      	mov	r3, r7
    b824:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
    b828:	681b      	ldr	r3, [r3, #0]
    b82a:	429a      	cmp	r2, r3
    b82c:	f4ff af6b 	bcc.w	b706 <am_devices_em9304_block_write+0x46>

  }
}
    b830:	f507 7792 	add.w	r7, r7, #292	; 0x124
    b834:	46bd      	mov	sp, r7
    b836:	bd90      	pop	{r4, r7, pc}
    b838:	0000ffd0 	.word	0x0000ffd0
    b83c:	10001ac5 	.word	0x10001ac5
    b840:	0000b5dd 	.word	0x0000b5dd

0000b844 <am_devices_em9304_block_read>:
//*****************************************************************************
uint32_t
am_devices_em9304_block_read(const am_devices_em9304_t *psDevice,
                             uint32_t *pui32Values,
                             uint32_t ui32NumBytes)
{
    b844:	b590      	push	{r4, r7, lr}
    b846:	b08d      	sub	sp, #52	; 0x34
    b848:	af02      	add	r7, sp, #8
    b84a:	60f8      	str	r0, [r7, #12]
    b84c:	60b9      	str	r1, [r7, #8]
    b84e:	607a      	str	r2, [r7, #4]
  am_hal_iom_buffer(2) sCommand;
  am_hal_iom_buffer(2) sStas;
  uint8_t ui8RxBytes;
  uint8_t spiRxTotalBytesCount = 0;
    b850:	2300      	movs	r3, #0
    b852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


  sCommand.bytes[0] = EM9304_SPI_HEADER_RX;
    b856:	2381      	movs	r3, #129	; 0x81
    b858:	763b      	strb	r3, [r7, #24]
  sCommand.bytes[1] = 0x0;
    b85a:	2300      	movs	r3, #0
    b85c:	767b      	strb	r3, [r7, #25]

  //
  // Check if the SPI is free
  //
  if ( spiTxInProgress )
    b85e:	4b4c      	ldr	r3, [pc, #304]	; (b990 <am_devices_em9304_block_read+0x14c>)
    b860:	781b      	ldrb	r3, [r3, #0]
    b862:	2b00      	cmp	r3, #0
    b864:	d004      	beq.n	b870 <am_devices_em9304_block_read+0x2c>
  {
    //
    // TX in progress -> Ignore RDY interrupt
    //
    am_util_debug_printf("HCI TX in progress\n");
    b866:	484b      	ldr	r0, [pc, #300]	; (b994 <am_devices_em9304_block_read+0x150>)
    b868:	f002 fb06 	bl	de78 <am_util_stdio_printf>
    return 0;
    b86c:	2300      	movs	r3, #0
    b86e:	e08b      	b.n	b988 <am_devices_em9304_block_read+0x144>
  }

  //
  // Check if they are still data to read
  //
  if ( !EM9304_RDY_INT() )
    b870:	f002 fdcc 	bl	e40c <am_hal_gpio_input_read>
    b874:	460a      	mov	r2, r1
    b876:	4601      	mov	r1, r0
    b878:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    b87c:	f04f 0400 	mov.w	r4, #0
    b880:	ea03 0301 	and.w	r3, r3, r1
    b884:	ea04 0402 	and.w	r4, r4, r2
    b888:	4323      	orrs	r3, r4
    b88a:	d101      	bne.n	b890 <am_devices_em9304_block_read+0x4c>
  {
    // No data
    //am_util_debug_printf("HCI No data\n");
    return 0;
    b88c:	2300      	movs	r3, #0
    b88e:	e07b      	b.n	b988 <am_devices_em9304_block_read+0x144>
  }

  //
  // Select the EM9304
  //
  EM9304_SPISLAVESELECT();
    b890:	4b41      	ldr	r3, [pc, #260]	; (b998 <am_devices_em9304_block_read+0x154>)
    b892:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    b896:	601a      	str	r2, [r3, #0]
#endif
  {
    //
    // Write to the IOM.
    //
    am_hal_iom_spi_write(psDevice->ui32IOMModule,
    b898:	68fb      	ldr	r3, [r7, #12]
    b89a:	6858      	ldr	r0, [r3, #4]
    b89c:	f107 0218 	add.w	r2, r7, #24
    b8a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b8a4:	9300      	str	r3, [sp, #0]
    b8a6:	2301      	movs	r3, #1
    b8a8:	2100      	movs	r1, #0
    b8aa:	f003 f9cd 	bl	ec48 <am_hal_iom_spi_write>
                         AM_HAL_IOM_RAW);

    //
    // Read from the IOM.
    //
    am_hal_iom_spi_read(psDevice->ui32IOMModule,
    b8ae:	68fb      	ldr	r3, [r7, #12]
    b8b0:	6858      	ldr	r0, [r3, #4]
    b8b2:	f107 0214 	add.w	r2, r7, #20
    b8b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b8ba:	9300      	str	r3, [sp, #0]
    b8bc:	2301      	movs	r3, #1
    b8be:	2100      	movs	r1, #0
    b8c0:	f003 fcc0 	bl	f244 <am_hal_iom_spi_read>
                        AM_HAL_IOM_RAW);

    //
    // Set the number of bytes to receive.
    //
    ui8RxBytes = sStas.bytes[0];
    b8c4:	7d3b      	ldrb	r3, [r7, #20]
    b8c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }

  while ( EM9304_RDY_INT() && (spiRxTotalBytesCount < ui8RxBytes) && (ui8RxBytes != 0))
    b8ca:	e03f      	b.n	b94c <am_devices_em9304_block_read+0x108>
  {
    uint32_t len = 1;
    b8cc:	2301      	movs	r3, #1
    b8ce:	623b      	str	r3, [r7, #32]

    if ( (ui8RxBytes - spiRxTotalBytesCount) >= EM9304_BUFFER_SIZE )
    b8d0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
    b8d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b8d8:	1ad3      	subs	r3, r2, r3
    b8da:	2bff      	cmp	r3, #255	; 0xff
    b8dc:	dd0b      	ble.n	b8f6 <am_devices_em9304_block_read+0xb2>
    {
      //
      // Error. Packet too large.
      //
      am_util_debug_printf("HCI RX Error (STATUS ERROR) Packet Too Large\n");
    b8de:	482f      	ldr	r0, [pc, #188]	; (b99c <am_devices_em9304_block_read+0x158>)
    b8e0:	f002 faca 	bl	de78 <am_util_stdio_printf>
      am_util_debug_printf("%d, %d\n", sStas.bytes[0], sStas.bytes[1]);
    b8e4:	7d3b      	ldrb	r3, [r7, #20]
    b8e6:	4619      	mov	r1, r3
    b8e8:	7d7b      	ldrb	r3, [r7, #21]
    b8ea:	461a      	mov	r2, r3
    b8ec:	482c      	ldr	r0, [pc, #176]	; (b9a0 <am_devices_em9304_block_read+0x15c>)
    b8ee:	f002 fac3 	bl	de78 <am_util_stdio_printf>
      return 0;
    b8f2:	2300      	movs	r3, #0
    b8f4:	e048      	b.n	b988 <am_devices_em9304_block_read+0x144>
    }
    else
    {
      len = ui8RxBytes;
    b8f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    b8fa:	623b      	str	r3, [r7, #32]
    }

#if defined(USE_IOM_NONBLOCKING)
    gIomDone = false;
    b8fc:	4b29      	ldr	r3, [pc, #164]	; (b9a4 <am_devices_em9304_block_read+0x160>)
    b8fe:	2200      	movs	r2, #0
    b900:	701a      	strb	r2, [r3, #0]
    am_hal_iom_spi_read_nb(psDevice->ui32IOMModule,
    b902:	68fb      	ldr	r3, [r7, #12]
    b904:	6858      	ldr	r0, [r3, #4]
    b906:	4b28      	ldr	r3, [pc, #160]	; (b9a8 <am_devices_em9304_block_read+0x164>)
    b908:	9301      	str	r3, [sp, #4]
    b90a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b90e:	9300      	str	r3, [sp, #0]
    b910:	6a3b      	ldr	r3, [r7, #32]
    b912:	68ba      	ldr	r2, [r7, #8]
    b914:	2100      	movs	r1, #0
    b916:	f003 fbe9 	bl	f0ec <am_hal_iom_spi_read_nb>
    while(1)
    {
      //
      // Disable interrupt while we decide whether we're going to sleep.
      //
      uint32_t ui32IntStatus = am_hal_interrupt_master_disable();
    b91a:	f002 fe01 	bl	e520 <am_hal_interrupt_master_disable>
    b91e:	61f8      	str	r0, [r7, #28]

      if (!gIomDone)
    b920:	4b20      	ldr	r3, [pc, #128]	; (b9a4 <am_devices_em9304_block_read+0x160>)
    b922:	781b      	ldrb	r3, [r3, #0]
    b924:	b2db      	uxtb	r3, r3
    b926:	f083 0301 	eor.w	r3, r3, #1
    b92a:	b2db      	uxtb	r3, r3
    b92c:	2b00      	cmp	r3, #0
    b92e:	d006      	beq.n	b93e <am_devices_em9304_block_read+0xfa>
      {
        //
        // Sleep while waiting for the IOM transaction to finish.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    b930:	2001      	movs	r0, #1
    b932:	f004 f885 	bl	fa40 <am_hal_sysctrl_sleep>
        //
        // Enable interrupts
        //
        am_hal_interrupt_master_set(ui32IntStatus);
    b936:	69f8      	ldr	r0, [r7, #28]
    b938:	f002 fdf6 	bl	e528 <am_hal_interrupt_master_set>
    b93c:	e7ed      	b.n	b91a <am_devices_em9304_block_read+0xd6>
      else
      {
        //
        // Enable interrupts
        //
        am_hal_interrupt_master_set(ui32IntStatus);
    b93e:	69f8      	ldr	r0, [r7, #28]
    b940:	f002 fdf2 	bl	e528 <am_hal_interrupt_master_set>
        break;
    b944:	bf00      	nop
    am_hal_iom_spi_read(psDevice->ui32IOMModule,
                        0, pui32Values,
                        len, AM_HAL_IOM_RAW);
#endif

    spiRxTotalBytesCount = len;
    b946:	6a3b      	ldr	r3, [r7, #32]
    b948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  while ( EM9304_RDY_INT() && (spiRxTotalBytesCount < ui8RxBytes) && (ui8RxBytes != 0))
    b94c:	f002 fd5e 	bl	e40c <am_hal_gpio_input_read>
    b950:	460a      	mov	r2, r1
    b952:	4601      	mov	r1, r0
    b954:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    b958:	f04f 0400 	mov.w	r4, #0
    b95c:	ea03 0301 	and.w	r3, r3, r1
    b960:	ea04 0402 	and.w	r4, r4, r2
    b964:	4323      	orrs	r3, r4
    b966:	d009      	beq.n	b97c <am_devices_em9304_block_read+0x138>
    b968:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    b96c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    b970:	429a      	cmp	r2, r3
    b972:	d203      	bcs.n	b97c <am_devices_em9304_block_read+0x138>
    b974:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    b978:	2b00      	cmp	r3, #0
    b97a:	d1a7      	bne.n	b8cc <am_devices_em9304_block_read+0x88>
  }

  // Deselect the EM9304
  EM9304_SPISLAVEDESELECT();
    b97c:	4b0b      	ldr	r3, [pc, #44]	; (b9ac <am_devices_em9304_block_read+0x168>)
    b97e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    b982:	601a      	str	r2, [r3, #0]

  return spiRxTotalBytesCount;
    b984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
    b988:	4618      	mov	r0, r3
    b98a:	372c      	adds	r7, #44	; 0x2c
    b98c:	46bd      	mov	sp, r7
    b98e:	bd90      	pop	{r4, r7, pc}
    b990:	10001ac4 	.word	0x10001ac4
    b994:	00010000 	.word	0x00010000
    b998:	4001009c 	.word	0x4001009c
    b99c:	00010014 	.word	0x00010014
    b9a0:	00010044 	.word	0x00010044
    b9a4:	10001ac5 	.word	0x10001ac5
    b9a8:	0000b5dd 	.word	0x0000b5dd
    b9ac:	40010094 	.word	0x40010094

0000b9b0 <am_devices_em9304_spi_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_em9304_spi_init(uint32_t ui32Module, const am_hal_iom_config_t *psIomConfig)
{
    b9b0:	b580      	push	{r7, lr}
    b9b2:	b082      	sub	sp, #8
    b9b4:	af00      	add	r7, sp, #0
    b9b6:	6078      	str	r0, [r7, #4]
    b9b8:	6039      	str	r1, [r7, #0]
    if ( AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_IFCEN_M )
    b9ba:	687b      	ldr	r3, [r7, #4]
    b9bc:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    b9c0:	3304      	adds	r3, #4
    b9c2:	031b      	lsls	r3, r3, #12
    b9c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
    b9c8:	681b      	ldr	r3, [r3, #0]
    b9ca:	2b00      	cmp	r3, #0
    b9cc:	db18      	blt.n	ba00 <am_devices_em9304_spi_init+0x50>
    am_hal_iom_pwrctrl_enable(ui32Module);
#endif
    //
    // Setup the pins for SPI mode.
    //
    am_bsp_iom_spi_pins_enable(ui32Module);
    b9ce:	6878      	ldr	r0, [r7, #4]
    b9d0:	f002 fa70 	bl	deb4 <am_bsp_iom_spi_pins_enable>

    //
    // Set the required configuration settings for the IOM.
    //
    am_hal_iom_config(ui32Module, psIomConfig);
    b9d4:	6839      	ldr	r1, [r7, #0]
    b9d6:	6878      	ldr	r0, [r7, #4]
    b9d8:	f002 ff2c 	bl	e834 <am_hal_iom_config>

    // Enable spi
    am_hal_iom_enable(ui32Module);
    b9dc:	6878      	ldr	r0, [r7, #4]
    b9de:	f002 fe9b 	bl	e718 <am_hal_iom_enable>

#if defined(USE_IOM_NONBLOCKING)
    //
    // Enable interrupts.
    //
    am_hal_iom_int_clear(ui32Module, AM_HAL_IOM_INT_CMDCMP | AM_HAL_IOM_INT_THR);
    b9e2:	2103      	movs	r1, #3
    b9e4:	6878      	ldr	r0, [r7, #4]
    b9e6:	f003 feff 	bl	f7e8 <am_hal_iom_int_clear>
    am_hal_iom_int_enable(ui32Module, AM_HAL_IOM_INT_CMDCMP | AM_HAL_IOM_INT_THR);
    b9ea:	2103      	movs	r1, #3
    b9ec:	6878      	ldr	r0, [r7, #4]
    b9ee:	f003 feef 	bl	f7d0 <am_hal_iom_int_enable>

#if (0 == AM_BSP_EM9304_IOM)
      am_hal_interrupt_enable(AM_HAL_INTERRUPT_IOMASTER0);
    b9f2:	2016      	movs	r0, #22
    b9f4:	f002 fd68 	bl	e4c8 <am_hal_interrupt_enable>
#endif

    //
    // Reset the IOM Done flag.
    //
    gIomDone = false;
    b9f8:	4b03      	ldr	r3, [pc, #12]	; (ba08 <am_devices_em9304_spi_init+0x58>)
    b9fa:	2200      	movs	r2, #0
    b9fc:	701a      	strb	r2, [r3, #0]
    b9fe:	e000      	b.n	ba02 <am_devices_em9304_spi_init+0x52>
        return;
    ba00:	bf00      	nop
#endif

}
    ba02:	3708      	adds	r7, #8
    ba04:	46bd      	mov	sp, r7
    ba06:	bd80      	pop	{r7, pc}
    ba08:	10001ac5 	.word	0x10001ac5

0000ba0c <am_devices_em9304_spi_awake>:
//! @return None.
//
//*****************************************************************************
void
am_devices_em9304_spi_awake(uint32_t ui32Module)
{
    ba0c:	b580      	push	{r7, lr}
    ba0e:	b082      	sub	sp, #8
    ba10:	af00      	add	r7, sp, #0
    ba12:	6078      	str	r0, [r7, #4]

    if ( AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_IFCEN_M )
    ba14:	687b      	ldr	r3, [r7, #4]
    ba16:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ba1a:	3304      	adds	r3, #4
    ba1c:	031b      	lsls	r3, r3, #12
    ba1e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
    ba22:	681b      	ldr	r3, [r3, #0]
    ba24:	2b00      	cmp	r3, #0
    ba26:	db06      	blt.n	ba36 <am_devices_em9304_spi_awake+0x2a>
#endif

    //
    // Setup the pins for SPI mode.
    //
    am_bsp_iom_spi_pins_enable(ui32Module);
    ba28:	6878      	ldr	r0, [r7, #4]
    ba2a:	f002 fa43 	bl	deb4 <am_bsp_iom_spi_pins_enable>

    // Enable spi
    am_hal_iom_enable(ui32Module);
    ba2e:	6878      	ldr	r0, [r7, #4]
    ba30:	f002 fe72 	bl	e718 <am_hal_iom_enable>
    ba34:	e000      	b.n	ba38 <am_devices_em9304_spi_awake+0x2c>
        return;
    ba36:	bf00      	nop
}
    ba38:	3708      	adds	r7, #8
    ba3a:	46bd      	mov	sp, r7
    ba3c:	bd80      	pop	{r7, pc}

0000ba3e <am_devices_em9304_spi_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_devices_em9304_spi_sleep(uint32_t ui32Module)
{
    ba3e:	b580      	push	{r7, lr}
    ba40:	b082      	sub	sp, #8
    ba42:	af00      	add	r7, sp, #0
    ba44:	6078      	str	r0, [r7, #4]
    if ( !(AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_IFCEN_M) )
    ba46:	687b      	ldr	r3, [r7, #4]
    ba48:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ba4c:	3304      	adds	r3, #4
    ba4e:	031b      	lsls	r3, r3, #12
    ba50:	f503 738e 	add.w	r3, r3, #284	; 0x11c
    ba54:	681b      	ldr	r3, [r3, #0]
    ba56:	2b00      	cmp	r3, #0
    ba58:	da06      	bge.n	ba68 <am_devices_em9304_spi_sleep+0x2a>
    {
        return;
    }

    am_hal_iom_disable(ui32Module);
    ba5a:	6878      	ldr	r0, [r7, #4]
    ba5c:	f002 fea6 	bl	e7ac <am_hal_iom_disable>

#if defined(AM_PART_APOLLO)
    am_bsp_iom_spi_pins_disable(ui32Module);
    ba60:	6878      	ldr	r0, [r7, #4]
    ba62:	f002 fa8d 	bl	df80 <am_bsp_iom_spi_pins_disable>
    ba66:	e000      	b.n	ba6a <am_devices_em9304_spi_sleep+0x2c>
        return;
    ba68:	bf00      	nop
#else
    am_hal_iom_power_off_save(ui32Module);
    am_devices_em9304_configure_spi_sleep();
#endif
}
    ba6a:	3708      	adds	r7, #8
    ba6c:	46bd      	mov	sp, r7
    ba6e:	bd80      	pop	{r7, pc}

0000ba70 <am_devices_em9304_config_pins>:
//! @return None.
//
//*****************************************************************************
void
am_devices_em9304_config_pins(void)
{
    ba70:	b580      	push	{r7, lr}
    ba72:	af00      	add	r7, sp, #0
    am_hal_gpio_state_write(AM_BSP_GPIO_EM9304_CS, AM_HAL_GPIO_OUTPUT_SET);

    // Note - interrupt polarity is handled by the pin configuration.
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_EM9304_INT));
#else
    am_bsp_pin_enable(EM9304_CS);
    ba74:	4b20      	ldr	r3, [pc, #128]	; (baf8 <am_devices_em9304_config_pins+0x88>)
    ba76:	2273      	movs	r2, #115	; 0x73
    ba78:	601a      	str	r2, [r3, #0]
    ba7a:	4a20      	ldr	r2, [pc, #128]	; (bafc <am_devices_em9304_config_pins+0x8c>)
    ba7c:	4b1f      	ldr	r3, [pc, #124]	; (bafc <am_devices_em9304_config_pins+0x8c>)
    ba7e:	681b      	ldr	r3, [r3, #0]
    ba80:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    ba84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    ba88:	6013      	str	r3, [r2, #0]
    ba8a:	4a1d      	ldr	r2, [pc, #116]	; (bb00 <am_devices_em9304_config_pins+0x90>)
    ba8c:	4b1c      	ldr	r3, [pc, #112]	; (bb00 <am_devices_em9304_config_pins+0x90>)
    ba8e:	681b      	ldr	r3, [r3, #0]
    ba90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
    ba94:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
    ba98:	6013      	str	r3, [r2, #0]
    ba9a:	4b17      	ldr	r3, [pc, #92]	; (baf8 <am_devices_em9304_config_pins+0x88>)
    ba9c:	2200      	movs	r2, #0
    ba9e:	601a      	str	r2, [r3, #0]
    am_bsp_pin_enable(EM9304_INT);
    baa0:	4b15      	ldr	r3, [pc, #84]	; (baf8 <am_devices_em9304_config_pins+0x88>)
    baa2:	2273      	movs	r2, #115	; 0x73
    baa4:	601a      	str	r2, [r3, #0]
    baa6:	4a17      	ldr	r2, [pc, #92]	; (bb04 <am_devices_em9304_config_pins+0x94>)
    baa8:	4b16      	ldr	r3, [pc, #88]	; (bb04 <am_devices_em9304_config_pins+0x94>)
    baaa:	681b      	ldr	r3, [r3, #0]
    baac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    bab0:	6013      	str	r3, [r2, #0]
    bab2:	4a15      	ldr	r2, [pc, #84]	; (bb08 <am_devices_em9304_config_pins+0x98>)
    bab4:	4b14      	ldr	r3, [pc, #80]	; (bb08 <am_devices_em9304_config_pins+0x98>)
    bab6:	681b      	ldr	r3, [r3, #0]
    bab8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    babc:	f043 53d0 	orr.w	r3, r3, #436207616	; 0x1a000000
    bac0:	6013      	str	r3, [r2, #0]
    bac2:	4b0d      	ldr	r3, [pc, #52]	; (baf8 <am_devices_em9304_config_pins+0x88>)
    bac4:	2200      	movs	r2, #0
    bac6:	601a      	str	r2, [r3, #0]

    am_hal_gpio_out_bit_set(AM_BSP_GPIO_EM9304_CS);
    bac8:	4b10      	ldr	r3, [pc, #64]	; (bb0c <am_devices_em9304_config_pins+0x9c>)
    baca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    bace:	601a      	str	r2, [r3, #0]

    am_hal_gpio_int_polarity_bit_set(AM_BSP_GPIO_EM9304_INT, AM_HAL_GPIO_RISING);
    bad0:	4b09      	ldr	r3, [pc, #36]	; (baf8 <am_devices_em9304_config_pins+0x88>)
    bad2:	2273      	movs	r2, #115	; 0x73
    bad4:	601a      	str	r2, [r3, #0]
    bad6:	4a0b      	ldr	r2, [pc, #44]	; (bb04 <am_devices_em9304_config_pins+0x94>)
    bad8:	4b0a      	ldr	r3, [pc, #40]	; (bb04 <am_devices_em9304_config_pins+0x94>)
    bada:	681b      	ldr	r3, [r3, #0]
    badc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    bae0:	6013      	str	r3, [r2, #0]
    bae2:	4b05      	ldr	r3, [pc, #20]	; (baf8 <am_devices_em9304_config_pins+0x88>)
    bae4:	2200      	movs	r2, #0
    bae6:	601a      	str	r2, [r3, #0]
    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_EM9304_INT));
    bae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    baec:	f04f 0100 	mov.w	r1, #0
    baf0:	f002 fcbe 	bl	e470 <am_hal_gpio_int_clear>
#endif // AM_APOLLO3_GPIO
}
    baf4:	bf00      	nop
    baf6:	bd80      	pop	{r7, pc}
    baf8:	40010060 	.word	0x40010060
    bafc:	40010054 	.word	0x40010054
    bb00:	4001002c 	.word	0x4001002c
    bb04:	4001004c 	.word	0x4001004c
    bb08:	40010018 	.word	0x40010018
    bb0c:	40010094 	.word	0x40010094

0000bb10 <am_devices_em9304_mac_set>:
//! @return Success.
//
//*****************************************************************************
bool
am_devices_em9304_mac_set(const uint8_t *pui8MacAddress)
{
    bb10:	b480      	push	{r7}
    bb12:	b085      	sub	sp, #20
    bb14:	af00      	add	r7, sp, #0
    bb16:	6078      	str	r0, [r7, #4]
    uint32_t i;

    //
    // Copy the 6-byte MAC address into our global variable.
    //
    for ( i = 0; i < 6; i++ )
    bb18:	2300      	movs	r3, #0
    bb1a:	60fb      	str	r3, [r7, #12]
    bb1c:	e00b      	b.n	bb36 <am_devices_em9304_mac_set+0x26>
    {
        g_BLEMacAddress[i] = *pui8MacAddress++;
    bb1e:	687b      	ldr	r3, [r7, #4]
    bb20:	1c5a      	adds	r2, r3, #1
    bb22:	607a      	str	r2, [r7, #4]
    bb24:	7819      	ldrb	r1, [r3, #0]
    bb26:	4a09      	ldr	r2, [pc, #36]	; (bb4c <am_devices_em9304_mac_set+0x3c>)
    bb28:	68fb      	ldr	r3, [r7, #12]
    bb2a:	4413      	add	r3, r2
    bb2c:	460a      	mov	r2, r1
    bb2e:	701a      	strb	r2, [r3, #0]
    for ( i = 0; i < 6; i++ )
    bb30:	68fb      	ldr	r3, [r7, #12]
    bb32:	3301      	adds	r3, #1
    bb34:	60fb      	str	r3, [r7, #12]
    bb36:	68fb      	ldr	r3, [r7, #12]
    bb38:	2b05      	cmp	r3, #5
    bb3a:	d9f0      	bls.n	bb1e <am_devices_em9304_mac_set+0xe>
    }

    //HciVendorSpecificCmd(0xFC02, 6, g_BLEMacAddress);

    return true;
    bb3c:	2301      	movs	r3, #1
}
    bb3e:	4618      	mov	r0, r3
    bb40:	3714      	adds	r7, #20
    bb42:	46bd      	mov	sp, r7
    bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb48:	4770      	bx	lr
    bb4a:	bf00      	nop
    bb4c:	10001090 	.word	0x10001090

0000bb50 <am_devices_em9304_enable_interrupt>:

void am_devices_em9304_enable_interrupt(void)
{
    bb50:	b580      	push	{r7, lr}
    bb52:	af00      	add	r7, sp, #0
#if AM_APOLLO3_GPIO
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_EM9304_INT));
#else
    am_hal_gpio_int_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_EM9304_INT));
    bb54:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    bb58:	f04f 0100 	mov.w	r1, #0
    bb5c:	f002 fc66 	bl	e42c <am_hal_gpio_int_enable>
#endif
}
    bb60:	bf00      	nop
    bb62:	bd80      	pop	{r7, pc}

0000bb64 <am_devices_em9304_disable_interrupt>:

void am_devices_em9304_disable_interrupt(void)
{
    bb64:	b580      	push	{r7, lr}
    bb66:	af00      	add	r7, sp, #0
#if AM_APOLLO3_GPIO
    am_hal_gpio_interrupt_disable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_EM9304_INT));
#else
    am_hal_gpio_int_disable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_EM9304_INT));
    bb68:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    bb6c:	f04f 0100 	mov.w	r1, #0
    bb70:	f002 fc6c 	bl	e44c <am_hal_gpio_int_disable>
#endif
}
    bb74:	bf00      	nop
    bb76:	bd80      	pop	{r7, pc}

0000bb78 <waitEM9304Response>:
//! @return none.
//
//*****************************************************************************
uint32_t
waitEM9304Response(void)
{
    bb78:	b580      	push	{r7, lr}
    bb7a:	b082      	sub	sp, #8
    bb7c:	af00      	add	r7, sp, #0
  uint32_t numBytesRx;
  
  // HCI Respone should return in 1-2 messages at most, but driver returns
  // 0 bytes when nothing is available, so wait up to 10msec.
  for (uint32_t attempts = 0; attempts < EM9304_MAX_ATTEMPTS; attempts++)
    bb7e:	2300      	movs	r3, #0
    bb80:	607b      	str	r3, [r7, #4]
    bb82:	e01a      	b.n	bbba <waitEM9304Response+0x42>
  {
    numBytesRx = am_devices_em9304_block_read(&g_sEm9304, g_pui32HCIRXBuffer,0);
    bb84:	2200      	movs	r2, #0
    bb86:	4911      	ldr	r1, [pc, #68]	; (bbcc <waitEM9304Response+0x54>)
    bb88:	4811      	ldr	r0, [pc, #68]	; (bbd0 <waitEM9304Response+0x58>)
    bb8a:	f7ff fe5b 	bl	b844 <am_devices_em9304_block_read>
    bb8e:	6038      	str	r0, [r7, #0]
    // Look for "no message" return while filtering out the EM9304 vendor specific events.
    if ((numBytesRx !=0) && (!((numBytesRx == 4) && (0x0000FF04 == (g_pui32HCIRXBuffer[0] & 0x0000FFFF)))))
    bb90:	683b      	ldr	r3, [r7, #0]
    bb92:	2b00      	cmp	r3, #0
    bb94:	d00b      	beq.n	bbae <waitEM9304Response+0x36>
    bb96:	683b      	ldr	r3, [r7, #0]
    bb98:	2b04      	cmp	r3, #4
    bb9a:	d106      	bne.n	bbaa <waitEM9304Response+0x32>
    bb9c:	4b0b      	ldr	r3, [pc, #44]	; (bbcc <waitEM9304Response+0x54>)
    bb9e:	681b      	ldr	r3, [r3, #0]
    bba0:	b29b      	uxth	r3, r3
    bba2:	f64f 7204 	movw	r2, #65284	; 0xff04
    bba6:	4293      	cmp	r3, r2
    bba8:	d001      	beq.n	bbae <waitEM9304Response+0x36>
    {
      return EM9304_INIT_STATUS_SUCCESS;
    bbaa:	2300      	movs	r3, #0
    bbac:	e009      	b.n	bbc2 <waitEM9304Response+0x4a>
    }
    am_util_delay_ms(EM9304_ATTEMPT_DELAY_MS);
    bbae:	2001      	movs	r0, #1
    bbb0:	f001 fa44 	bl	d03c <am_util_delay_ms>
  for (uint32_t attempts = 0; attempts < EM9304_MAX_ATTEMPTS; attempts++)
    bbb4:	687b      	ldr	r3, [r7, #4]
    bbb6:	3301      	adds	r3, #1
    bbb8:	607b      	str	r3, [r7, #4]
    bbba:	687b      	ldr	r3, [r7, #4]
    bbbc:	2b63      	cmp	r3, #99	; 0x63
    bbbe:	d9e1      	bls.n	bb84 <waitEM9304Response+0xc>
  }
  return EM9304_INIT_STATUS_ERROR;
    bbc0:	2301      	movs	r3, #1
  
}
    bbc2:	4618      	mov	r0, r3
    bbc4:	3708      	adds	r7, #8
    bbc6:	46bd      	mov	sp, r7
    bbc8:	bd80      	pop	{r7, pc}
    bbca:	bf00      	nop
    bbcc:	10001ac8 	.word	0x10001ac8
    bbd0:	000115f8 	.word	0x000115f8

0000bbd4 <validEM9304Patches>:
//! @return bool (TRUE = patches are valid).
//
//*****************************************************************************
bool
validEM9304Patches(void)
{
    bbd4:	b580      	push	{r7, lr}
    bbd6:	af00      	add	r7, sp, #0
		am_util_debug_printf("em9304_patches.c contains NULL patch only\n");
    return false;
  }
  else
  {
		am_util_debug_printf("Valid em9304_patches.c file found\n");
    bbd8:	4802      	ldr	r0, [pc, #8]	; (bbe4 <validEM9304Patches+0x10>)
    bbda:	f002 f94d 	bl	de78 <am_util_stdio_printf>
    return true;
    bbde:	2301      	movs	r3, #1
  }
}
    bbe0:	4618      	mov	r0, r3
    bbe2:	bd80      	pop	{r7, pc}
    bbe4:	0001004c 	.word	0x0001004c

0000bbe8 <invalidateEM9304Patch>:
//! @return status.
//
//*****************************************************************************
#ifdef INVALIDATE_UNKNOWN_PATCHES
static uint32_t invalidateEM9304Patch(uint32_t addr, uint32_t size)
{
    bbe8:	b590      	push	{r4, r7, lr}
    bbea:	b089      	sub	sp, #36	; 0x24
    bbec:	af00      	add	r7, sp, #0
    bbee:	6078      	str	r0, [r7, #4]
    bbf0:	6039      	str	r1, [r7, #0]
  uint8_t   *bytePtr = (uint8_t *)&g_pui32HCIRXBuffer;
    bbf2:	4b24      	ldr	r3, [pc, #144]	; (bc84 <invalidateEM9304Patch+0x9c>)
    bbf4:	61fb      	str	r3, [r7, #28]
  
  uint8_t payload[] = { 0x22, 0xFC, //WriteAtAddr command
    bbf6:	4b24      	ldr	r3, [pc, #144]	; (bc88 <invalidateEM9304Patch+0xa0>)
    bbf8:	f107 040c 	add.w	r4, r7, #12
    bbfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    bbfe:	c407      	stmia	r4!, {r0, r1, r2}
    bc00:	8023      	strh	r3, [r4, #0]
    bc02:	3402      	adds	r4, #2
    bc04:	0c1b      	lsrs	r3, r3, #16
    bc06:	7023      	strb	r3, [r4, #0]
  0, 0, 0, 0, // container address placeholder
  0x33, 0x39, 0x6D, 0x65, //signature
  0, 0, 0, 0 }; //size placeholder
  
  
  am_util_debug_printf("Invalidating patch at %x\n", addr);
    bc08:	6879      	ldr	r1, [r7, #4]
    bc0a:	4820      	ldr	r0, [pc, #128]	; (bc8c <invalidateEM9304Patch+0xa4>)
    bc0c:	f002 f934 	bl	de78 <am_util_stdio_printf>
  
  payload[3] = (uint8_t)(addr & 0xFF);
    bc10:	687b      	ldr	r3, [r7, #4]
    bc12:	b2db      	uxtb	r3, r3
    bc14:	73fb      	strb	r3, [r7, #15]
  payload[4] = (uint8_t)((addr & 0xFF00) >> 8);
    bc16:	687b      	ldr	r3, [r7, #4]
    bc18:	0a1b      	lsrs	r3, r3, #8
    bc1a:	b2db      	uxtb	r3, r3
    bc1c:	743b      	strb	r3, [r7, #16]
  payload[5] = (uint8_t)((addr & 0xFF0000) >> 16);
    bc1e:	687b      	ldr	r3, [r7, #4]
    bc20:	0c1b      	lsrs	r3, r3, #16
    bc22:	b2db      	uxtb	r3, r3
    bc24:	747b      	strb	r3, [r7, #17]
  payload[6] = (uint8_t)((addr & 0xFF000000) >> 24);
    bc26:	687b      	ldr	r3, [r7, #4]
    bc28:	0e1b      	lsrs	r3, r3, #24
    bc2a:	b2db      	uxtb	r3, r3
    bc2c:	74bb      	strb	r3, [r7, #18]
  
  size |= 0x36000000;  // mask the size to change the patch (invalidate it).
    bc2e:	683b      	ldr	r3, [r7, #0]
    bc30:	f043 5358 	orr.w	r3, r3, #905969664	; 0x36000000
    bc34:	603b      	str	r3, [r7, #0]
  
  payload[11] = (uint8_t)(size & 0xFF);
    bc36:	683b      	ldr	r3, [r7, #0]
    bc38:	b2db      	uxtb	r3, r3
    bc3a:	75fb      	strb	r3, [r7, #23]
  payload[12] = (uint8_t)((size & 0xFF00) >> 8);
    bc3c:	683b      	ldr	r3, [r7, #0]
    bc3e:	0a1b      	lsrs	r3, r3, #8
    bc40:	b2db      	uxtb	r3, r3
    bc42:	763b      	strb	r3, [r7, #24]
  payload[13] = (uint8_t)((size & 0xFF0000) >> 16);
    bc44:	683b      	ldr	r3, [r7, #0]
    bc46:	0c1b      	lsrs	r3, r3, #16
    bc48:	b2db      	uxtb	r3, r3
    bc4a:	767b      	strb	r3, [r7, #25]
  payload[14] = (uint8_t)((size & 0xFF000000) >> 24);
    bc4c:	683b      	ldr	r3, [r7, #0]
    bc4e:	0e1b      	lsrs	r3, r3, #24
    bc50:	b2db      	uxtb	r3, r3
    bc52:	76bb      	strb	r3, [r7, #26]
  
  am_devices_em9304_block_write(&g_sEm9304, HCI_CMD_TYPE, payload, sizeof(payload));
    bc54:	f107 020c 	add.w	r2, r7, #12
    bc58:	230f      	movs	r3, #15
    bc5a:	2101      	movs	r1, #1
    bc5c:	480c      	ldr	r0, [pc, #48]	; (bc90 <invalidateEM9304Patch+0xa8>)
    bc5e:	f7ff fd2f 	bl	b6c0 <am_devices_em9304_block_write>
  
  if ((EM9304_INIT_STATUS_SUCCESS != waitEM9304Response()) || (bytePtr[HCI_STATUS_OFFSET] != 0))
    bc62:	f7ff ff89 	bl	bb78 <waitEM9304Response>
    bc66:	4603      	mov	r3, r0
    bc68:	2b00      	cmp	r3, #0
    bc6a:	d104      	bne.n	bc76 <invalidateEM9304Patch+0x8e>
    bc6c:	69fb      	ldr	r3, [r7, #28]
    bc6e:	3306      	adds	r3, #6
    bc70:	781b      	ldrb	r3, [r3, #0]
    bc72:	2b00      	cmp	r3, #0
    bc74:	d001      	beq.n	bc7a <invalidateEM9304Patch+0x92>
  {
    return EM9304_INIT_STATUS_ERROR;
    bc76:	2301      	movs	r3, #1
    bc78:	e000      	b.n	bc7c <invalidateEM9304Patch+0x94>
  }
  
  return EM9304_INIT_STATUS_SUCCESS;
    bc7a:	2300      	movs	r3, #0
}
    bc7c:	4618      	mov	r0, r3
    bc7e:	3724      	adds	r7, #36	; 0x24
    bc80:	46bd      	mov	sp, r7
    bc82:	bd90      	pop	{r4, r7, pc}
    bc84:	10001ac8 	.word	0x10001ac8
    bc88:	0001008c 	.word	0x0001008c
    bc8c:	00010070 	.word	0x00010070
    bc90:	000115f8 	.word	0x000115f8

0000bc94 <queryEM9304Patches>:
//! @return status.
//
//*****************************************************************************
uint32_t
queryEM9304Patches(void)
{
    bc94:	b580      	push	{r7, lr}
    bc96:	b094      	sub	sp, #80	; 0x50
    bc98:	af06      	add	r7, sp, #24
  uint32_t	containerCount;
  uint32_t	buildNumber, userBuildNumber, containerVersion, containerType, containerID;
#ifdef INVALIDATE_UNKNOWN_PATCHES
  uint32_t  containerAddr, containerSize;
  bool      invalidatePatch = false;
    bc9a:	2300      	movs	r3, #0
    bc9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#endif
  uint8_t	*pBuf = (uint8_t *)g_pui32HCIRXBuffer;
    bca0:	4b74      	ldr	r3, [pc, #464]	; (be74 <queryEM9304Patches+0x1e0>)
    bca2:	623b      	str	r3, [r7, #32]
  
  // Initialize the container info patch status
  for (uint32_t patch = 0; patch < EM9304_PATCHES_NUM_PATCHES; patch++)
    bca4:	2300      	movs	r3, #0
    bca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    bca8:	e056      	b.n	bd58 <queryEM9304Patches+0xc4>
  {
    // Check patch for enabling 32Khz clck from Apollo MCU
    if ( (g_pEm9304Patches[patch].userBuildNumber == 2)
    bcaa:	4973      	ldr	r1, [pc, #460]	; (be78 <queryEM9304Patches+0x1e4>)
    bcac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    bcae:	4613      	mov	r3, r2
    bcb0:	009b      	lsls	r3, r3, #2
    bcb2:	4413      	add	r3, r2
    bcb4:	005b      	lsls	r3, r3, #1
    bcb6:	440b      	add	r3, r1
    bcb8:	3302      	adds	r3, #2
    bcba:	881b      	ldrh	r3, [r3, #0]
    bcbc:	2b02      	cmp	r3, #2
    bcbe:	d13c      	bne.n	bd3a <queryEM9304Patches+0xa6>
        && (g_pEm9304Patches[patch].containerID == SLEEP_CLK_PATCH_CONTAINER_ID))
    bcc0:	496d      	ldr	r1, [pc, #436]	; (be78 <queryEM9304Patches+0x1e4>)
    bcc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    bcc4:	4613      	mov	r3, r2
    bcc6:	009b      	lsls	r3, r3, #2
    bcc8:	4413      	add	r3, r2
    bcca:	005b      	lsls	r3, r3, #1
    bccc:	440b      	add	r3, r1
    bcce:	3306      	adds	r3, #6
    bcd0:	781b      	ldrb	r3, [r3, #0]
    bcd2:	2b16      	cmp	r3, #22
    bcd4:	d131      	bne.n	bd3a <queryEM9304Patches+0xa6>
      uint32_t  ui32PN;

      //
      // Device identification
      //
      ui32PN = AM_REG(MCUCTRL, CHIP_INFO)  &
    bcd6:	4b69      	ldr	r3, [pc, #420]	; (be7c <queryEM9304Patches+0x1e8>)
    bcd8:	681b      	ldr	r3, [r3, #0]
    bcda:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    bcde:	61fb      	str	r3, [r7, #28]
               AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_PN_M;

      #ifdef ENABLE_32K_CLK_FROM_APOLLO
      // Currently only enable this for Apollo2-Blue
      if (ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLOBL) {
    bce0:	69fb      	ldr	r3, [r7, #28]
    bce2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
    bce6:	d133      	bne.n	bd50 <queryEM9304Patches+0xbc>
        g_pEm9304Patches[patch].applyPatch = true;
    bce8:	4963      	ldr	r1, [pc, #396]	; (be78 <queryEM9304Patches+0x1e4>)
    bcea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    bcec:	4613      	mov	r3, r2
    bcee:	009b      	lsls	r3, r3, #2
    bcf0:	4413      	add	r3, r2
    bcf2:	005b      	lsls	r3, r3, #1
    bcf4:	440b      	add	r3, r1
    bcf6:	3307      	adds	r3, #7
    bcf8:	2201      	movs	r2, #1
    bcfa:	701a      	strb	r2, [r3, #0]

        // GPIO 24 in Apollo2-blue connected to LFCLK in EM9304
        am_hal_gpio_pin_config(24, AM_HAL_PIN_24_CLKOUT);
    bcfc:	4b60      	ldr	r3, [pc, #384]	; (be80 <queryEM9304Patches+0x1ec>)
    bcfe:	2273      	movs	r2, #115	; 0x73
    bd00:	601a      	str	r2, [r3, #0]
    bd02:	4a60      	ldr	r2, [pc, #384]	; (be84 <queryEM9304Patches+0x1f0>)
    bd04:	4b5f      	ldr	r3, [pc, #380]	; (be84 <queryEM9304Patches+0x1f0>)
    bd06:	681b      	ldr	r3, [r3, #0]
    bd08:	f023 0307 	bic.w	r3, r3, #7
    bd0c:	6013      	str	r3, [r2, #0]
    bd0e:	4a5e      	ldr	r2, [pc, #376]	; (be88 <queryEM9304Patches+0x1f4>)
    bd10:	4b5d      	ldr	r3, [pc, #372]	; (be88 <queryEM9304Patches+0x1f4>)
    bd12:	681b      	ldr	r3, [r3, #0]
    bd14:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    bd18:	f043 0310 	orr.w	r3, r3, #16
    bd1c:	6013      	str	r3, [r2, #0]
    bd1e:	4b58      	ldr	r3, [pc, #352]	; (be80 <queryEM9304Patches+0x1ec>)
    bd20:	2200      	movs	r2, #0
    bd22:	601a      	str	r2, [r3, #0]
        am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_XT);
    bd24:	2001      	movs	r0, #1
    bd26:	f002 f9db 	bl	e0e0 <am_hal_clkgen_osc_start>
        am_util_delay_ms(500);
    bd2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    bd2e:	f001 f985 	bl	d03c <am_util_delay_ms>
        am_hal_clkgen_clkout_enable(AM_HAL_CLKGEN_CLKOUT_CKSEL_XT);
    bd32:	2017      	movs	r0, #23
    bd34:	f002 f9de 	bl	e0f4 <am_hal_clkgen_clkout_enable>
    {
    bd38:	e00a      	b.n	bd50 <queryEM9304Patches+0xbc>
      }
      #endif
    }
    else {
      g_pEm9304Patches[patch].applyPatch = true;
    bd3a:	494f      	ldr	r1, [pc, #316]	; (be78 <queryEM9304Patches+0x1e4>)
    bd3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    bd3e:	4613      	mov	r3, r2
    bd40:	009b      	lsls	r3, r3, #2
    bd42:	4413      	add	r3, r2
    bd44:	005b      	lsls	r3, r3, #1
    bd46:	440b      	add	r3, r1
    bd48:	3307      	adds	r3, #7
    bd4a:	2201      	movs	r2, #1
    bd4c:	701a      	strb	r2, [r3, #0]
    bd4e:	e000      	b.n	bd52 <queryEM9304Patches+0xbe>
    {
    bd50:	bf00      	nop
  for (uint32_t patch = 0; patch < EM9304_PATCHES_NUM_PATCHES; patch++)
    bd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bd54:	3301      	adds	r3, #1
    bd56:	62fb      	str	r3, [r7, #44]	; 0x2c
    bd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bd5a:	2b05      	cmp	r3, #5
    bd5c:	d9a5      	bls.n	bcaa <queryEM9304Patches+0x16>
    }
  }
  
  // Send the EM_SetSleepOptions command to disable sleep and check the response.
  am_devices_em9304_block_write(&g_sEm9304, HCI_CMD_TYPE, g_pui8EM_SleepDisable, sizeof(g_pui8EM_SleepDisable) );
    bd5e:	2304      	movs	r3, #4
    bd60:	4a4a      	ldr	r2, [pc, #296]	; (be8c <queryEM9304Patches+0x1f8>)
    bd62:	2101      	movs	r1, #1
    bd64:	484a      	ldr	r0, [pc, #296]	; (be90 <queryEM9304Patches+0x1fc>)
    bd66:	f7ff fcab 	bl	b6c0 <am_devices_em9304_block_write>
  
  if (EM9304_INIT_STATUS_SUCCESS != waitEM9304Response())
    bd6a:	f7ff ff05 	bl	bb78 <waitEM9304Response>
    bd6e:	4603      	mov	r3, r0
    bd70:	2b00      	cmp	r3, #0
    bd72:	d004      	beq.n	bd7e <queryEM9304Patches+0xea>
  {
    am_util_debug_printf("No Response to EM9304 Sleep Disable\n");
    bd74:	4847      	ldr	r0, [pc, #284]	; (be94 <queryEM9304Patches+0x200>)
    bd76:	f002 f87f 	bl	de78 <am_util_stdio_printf>
    return EM9304_INIT_STATUS_ERROR;
    bd7a:	2301      	movs	r3, #1
    bd7c:	e1c8      	b.n	c110 <queryEM9304Patches+0x47c>
  }
  
  // Check that the response is to the Sleep Disable.
  if ((0x01040E04 != g_pui32HCIRXBuffer[0]) || (0x0000FC2D != (g_pui32HCIRXBuffer[1] & 0x0000FFFF)))
    bd7e:	4b3d      	ldr	r3, [pc, #244]	; (be74 <queryEM9304Patches+0x1e0>)
    bd80:	681b      	ldr	r3, [r3, #0]
    bd82:	4a45      	ldr	r2, [pc, #276]	; (be98 <queryEM9304Patches+0x204>)
    bd84:	4293      	cmp	r3, r2
    bd86:	d106      	bne.n	bd96 <queryEM9304Patches+0x102>
    bd88:	4b3a      	ldr	r3, [pc, #232]	; (be74 <queryEM9304Patches+0x1e0>)
    bd8a:	685b      	ldr	r3, [r3, #4]
    bd8c:	b29b      	uxth	r3, r3
    bd8e:	f64f 422d 	movw	r2, #64557	; 0xfc2d
    bd92:	4293      	cmp	r3, r2
    bd94:	d004      	beq.n	bda0 <queryEM9304Patches+0x10c>
  {
    am_util_debug_printf("Invalid Response to EM9304 Sleep Disable\n");
    bd96:	4841      	ldr	r0, [pc, #260]	; (be9c <queryEM9304Patches+0x208>)
    bd98:	f002 f86e 	bl	de78 <am_util_stdio_printf>
    return EM9304_INIT_STATUS_ERROR;
    bd9c:	2301      	movs	r3, #1
    bd9e:	e1b7      	b.n	c110 <queryEM9304Patches+0x47c>
  }
  
  // Send the EM_SetMemoryMode command to turn on OTP and check the response.
  am_devices_em9304_block_write(&g_sEm9304, HCI_CMD_TYPE, g_pui8EM_SetOTPOn, sizeof(g_pui8EM_SetOTPOn) );
    bda0:	2304      	movs	r3, #4
    bda2:	4a3f      	ldr	r2, [pc, #252]	; (bea0 <queryEM9304Patches+0x20c>)
    bda4:	2101      	movs	r1, #1
    bda6:	483a      	ldr	r0, [pc, #232]	; (be90 <queryEM9304Patches+0x1fc>)
    bda8:	f7ff fc8a 	bl	b6c0 <am_devices_em9304_block_write>
  
  if (EM9304_INIT_STATUS_SUCCESS != waitEM9304Response())
    bdac:	f7ff fee4 	bl	bb78 <waitEM9304Response>
    bdb0:	4603      	mov	r3, r0
    bdb2:	2b00      	cmp	r3, #0
    bdb4:	d004      	beq.n	bdc0 <queryEM9304Patches+0x12c>
  {
    am_util_debug_printf("No Response to EM9304 OTP Enable\n");
    bdb6:	483b      	ldr	r0, [pc, #236]	; (bea4 <queryEM9304Patches+0x210>)
    bdb8:	f002 f85e 	bl	de78 <am_util_stdio_printf>
    return EM9304_INIT_STATUS_ERROR;
    bdbc:	2301      	movs	r3, #1
    bdbe:	e1a7      	b.n	c110 <queryEM9304Patches+0x47c>
  }
  
  // Check that the response is to the OTP enable.
  if ((0x01040E04 != g_pui32HCIRXBuffer[0]) || (0x0000FC2B != (g_pui32HCIRXBuffer[1] & 0x0000FFFF)))
    bdc0:	4b2c      	ldr	r3, [pc, #176]	; (be74 <queryEM9304Patches+0x1e0>)
    bdc2:	681b      	ldr	r3, [r3, #0]
    bdc4:	4a34      	ldr	r2, [pc, #208]	; (be98 <queryEM9304Patches+0x204>)
    bdc6:	4293      	cmp	r3, r2
    bdc8:	d106      	bne.n	bdd8 <queryEM9304Patches+0x144>
    bdca:	4b2a      	ldr	r3, [pc, #168]	; (be74 <queryEM9304Patches+0x1e0>)
    bdcc:	685b      	ldr	r3, [r3, #4]
    bdce:	b29b      	uxth	r3, r3
    bdd0:	f64f 422b 	movw	r2, #64555	; 0xfc2b
    bdd4:	4293      	cmp	r3, r2
    bdd6:	d004      	beq.n	bde2 <queryEM9304Patches+0x14e>
  {
    am_util_debug_printf("Invalid Response to EM9304 OTP Enable\n");
    bdd8:	4833      	ldr	r0, [pc, #204]	; (bea8 <queryEM9304Patches+0x214>)
    bdda:	f002 f84d 	bl	de78 <am_util_stdio_printf>
    return EM9304_INIT_STATUS_ERROR;
    bdde:	2301      	movs	r3, #1
    bde0:	e196      	b.n	c110 <queryEM9304Patches+0x47c>
  }
  
  // Query the EM9304 with the EM_PatchQuery and Patch Index = 0.  This will return the Container Count.
  am_devices_em9304_block_write(&g_sEm9304, HCI_CMD_TYPE, g_pui8EM_PatchQuery, sizeof(g_pui8EM_PatchQuery) );
    bde2:	2305      	movs	r3, #5
    bde4:	4a31      	ldr	r2, [pc, #196]	; (beac <queryEM9304Patches+0x218>)
    bde6:	2101      	movs	r1, #1
    bde8:	4829      	ldr	r0, [pc, #164]	; (be90 <queryEM9304Patches+0x1fc>)
    bdea:	f7ff fc69 	bl	b6c0 <am_devices_em9304_block_write>
  
  if (EM9304_INIT_STATUS_SUCCESS != waitEM9304Response())
    bdee:	f7ff fec3 	bl	bb78 <waitEM9304Response>
    bdf2:	4603      	mov	r3, r0
    bdf4:	2b00      	cmp	r3, #0
    bdf6:	d004      	beq.n	be02 <queryEM9304Patches+0x16e>
  {
    am_util_debug_printf("No Response to EM9304 Patch Query\n");
    bdf8:	482d      	ldr	r0, [pc, #180]	; (beb0 <queryEM9304Patches+0x21c>)
    bdfa:	f002 f83d 	bl	de78 <am_util_stdio_printf>
    return EM9304_INIT_STATUS_ERROR;
    bdfe:	2301      	movs	r3, #1
    be00:	e186      	b.n	c110 <queryEM9304Patches+0x47c>
  }
  
  // Check that the response is to the Patch Query.
  if ((0x01200E04 != g_pui32HCIRXBuffer[0]) || (0x0000FC34 != (g_pui32HCIRXBuffer[1] & 0x0000FFFF)))
    be02:	4b1c      	ldr	r3, [pc, #112]	; (be74 <queryEM9304Patches+0x1e0>)
    be04:	681b      	ldr	r3, [r3, #0]
    be06:	4a2b      	ldr	r2, [pc, #172]	; (beb4 <queryEM9304Patches+0x220>)
    be08:	4293      	cmp	r3, r2
    be0a:	d106      	bne.n	be1a <queryEM9304Patches+0x186>
    be0c:	4b19      	ldr	r3, [pc, #100]	; (be74 <queryEM9304Patches+0x1e0>)
    be0e:	685b      	ldr	r3, [r3, #4]
    be10:	b29b      	uxth	r3, r3
    be12:	f64f 4234 	movw	r2, #64564	; 0xfc34
    be16:	4293      	cmp	r3, r2
    be18:	d004      	beq.n	be24 <queryEM9304Patches+0x190>
  {
    am_util_debug_printf("Invalid Response to EM9304 Patch Query\n");
    be1a:	4827      	ldr	r0, [pc, #156]	; (beb8 <queryEM9304Patches+0x224>)
    be1c:	f002 f82c 	bl	de78 <am_util_stdio_printf>
    return EM9304_INIT_STATUS_ERROR;
    be20:	2301      	movs	r3, #1
    be22:	e175      	b.n	c110 <queryEM9304Patches+0x47c>
  }
  
  // Extract the container information from the query response.
  containerCount = (uint32_t)pBuf[CONTAINER_COUNT_INDEX] + 
    be24:	6a3b      	ldr	r3, [r7, #32]
    be26:	3307      	adds	r3, #7
    be28:	781b      	ldrb	r3, [r3, #0]
    be2a:	461a      	mov	r2, r3
    ((uint32_t)pBuf[CONTAINER_COUNT_INDEX + 1] << 8);
    be2c:	6a3b      	ldr	r3, [r7, #32]
    be2e:	3308      	adds	r3, #8
    be30:	781b      	ldrb	r3, [r3, #0]
    be32:	021b      	lsls	r3, r3, #8
  containerCount = (uint32_t)pBuf[CONTAINER_COUNT_INDEX] + 
    be34:	4413      	add	r3, r2
    be36:	637b      	str	r3, [r7, #52]	; 0x34
  
  // Assume the first patch is the manufacturing trim patch.
  // This is the only patch that never should be invalidated.
  am_util_debug_printf("Number of patch containers on EM9304 excluding Patch#0: %d\n",containerCount-1);
    be38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    be3a:	3b01      	subs	r3, #1
    be3c:	4619      	mov	r1, r3
    be3e:	481f      	ldr	r0, [pc, #124]	; (bebc <queryEM9304Patches+0x228>)
    be40:	f002 f81a 	bl	de78 <am_util_stdio_printf>
  
  // For each container in Container Count
  for (uint32_t container = 1; container < containerCount; container++)
    be44:	2301      	movs	r3, #1
    be46:	62bb      	str	r3, [r7, #40]	; 0x28
    be48:	e11a      	b.n	c080 <queryEM9304Patches+0x3ec>
  {
    // Send the EM_PatchQuery for the Container.
    g_pui8EM_PatchQuery[PATCH_INDEX_OFFSET] = container;
    be4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    be4c:	b2da      	uxtb	r2, r3
    be4e:	4b17      	ldr	r3, [pc, #92]	; (beac <queryEM9304Patches+0x218>)
    be50:	70da      	strb	r2, [r3, #3]
    am_devices_em9304_block_write(&g_sEm9304, HCI_CMD_TYPE, g_pui8EM_PatchQuery, sizeof(g_pui8EM_PatchQuery) );
    be52:	2305      	movs	r3, #5
    be54:	4a15      	ldr	r2, [pc, #84]	; (beac <queryEM9304Patches+0x218>)
    be56:	2101      	movs	r1, #1
    be58:	480d      	ldr	r0, [pc, #52]	; (be90 <queryEM9304Patches+0x1fc>)
    be5a:	f7ff fc31 	bl	b6c0 <am_devices_em9304_block_write>
    
    if (EM9304_INIT_STATUS_SUCCESS != waitEM9304Response())
    be5e:	f7ff fe8b 	bl	bb78 <waitEM9304Response>
    be62:	4603      	mov	r3, r0
    be64:	2b00      	cmp	r3, #0
    be66:	d02b      	beq.n	bec0 <queryEM9304Patches+0x22c>
    {
      am_util_debug_printf("No Response to EM9304 Patch Query\n");
    be68:	4811      	ldr	r0, [pc, #68]	; (beb0 <queryEM9304Patches+0x21c>)
    be6a:	f002 f805 	bl	de78 <am_util_stdio_printf>
      return EM9304_INIT_STATUS_ERROR;
    be6e:	2301      	movs	r3, #1
    be70:	e14e      	b.n	c110 <queryEM9304Patches+0x47c>
    be72:	bf00      	nop
    be74:	10001ac8 	.word	0x10001ac8
    be78:	100010b8 	.word	0x100010b8
    be7c:	40020000 	.word	0x40020000
    be80:	40010060 	.word	0x40010060
    be84:	4001004c 	.word	0x4001004c
    be88:	40010018 	.word	0x40010018
    be8c:	10001098 	.word	0x10001098
    be90:	000115f8 	.word	0x000115f8
    be94:	0001009c 	.word	0x0001009c
    be98:	01040e04 	.word	0x01040e04
    be9c:	000100c4 	.word	0x000100c4
    bea0:	1000109c 	.word	0x1000109c
    bea4:	000100f0 	.word	0x000100f0
    bea8:	00010114 	.word	0x00010114
    beac:	100010a8 	.word	0x100010a8
    beb0:	0001013c 	.word	0x0001013c
    beb4:	01200e04 	.word	0x01200e04
    beb8:	00010160 	.word	0x00010160
    bebc:	00010188 	.word	0x00010188
    }
    
    // Extract the container information from the query response.
    containerCount = (uint32_t)pBuf[CONTAINER_COUNT_INDEX] + 
    bec0:	6a3b      	ldr	r3, [r7, #32]
    bec2:	3307      	adds	r3, #7
    bec4:	781b      	ldrb	r3, [r3, #0]
    bec6:	461a      	mov	r2, r3
      ((uint32_t)pBuf[CONTAINER_COUNT_INDEX + 1] << 8);
    bec8:	6a3b      	ldr	r3, [r7, #32]
    beca:	3308      	adds	r3, #8
    becc:	781b      	ldrb	r3, [r3, #0]
    bece:	021b      	lsls	r3, r3, #8
    containerCount = (uint32_t)pBuf[CONTAINER_COUNT_INDEX] + 
    bed0:	4413      	add	r3, r2
    bed2:	637b      	str	r3, [r7, #52]	; 0x34
    buildNumber = (uint32_t)pBuf[BUILD_NUMBER_INDEX] + 
    bed4:	6a3b      	ldr	r3, [r7, #32]
    bed6:	331b      	adds	r3, #27
    bed8:	781b      	ldrb	r3, [r3, #0]
    beda:	461a      	mov	r2, r3
      ((uint32_t)(pBuf[BUILD_NUMBER_INDEX+1] << 8));
    bedc:	6a3b      	ldr	r3, [r7, #32]
    bede:	331c      	adds	r3, #28
    bee0:	781b      	ldrb	r3, [r3, #0]
    bee2:	021b      	lsls	r3, r3, #8
    buildNumber = (uint32_t)pBuf[BUILD_NUMBER_INDEX] + 
    bee4:	4413      	add	r3, r2
    bee6:	61bb      	str	r3, [r7, #24]
    userBuildNumber = (uint32_t)pBuf[USER_BUILD_NUMBER_INDEX] + 
    bee8:	6a3b      	ldr	r3, [r7, #32]
    beea:	331d      	adds	r3, #29
    beec:	781b      	ldrb	r3, [r3, #0]
    beee:	461a      	mov	r2, r3
      ((uint32_t)(pBuf[USER_BUILD_NUMBER_INDEX+1] << 8));
    bef0:	6a3b      	ldr	r3, [r7, #32]
    bef2:	331e      	adds	r3, #30
    bef4:	781b      	ldrb	r3, [r3, #0]
    bef6:	021b      	lsls	r3, r3, #8
    userBuildNumber = (uint32_t)pBuf[USER_BUILD_NUMBER_INDEX] + 
    bef8:	4413      	add	r3, r2
    befa:	617b      	str	r3, [r7, #20]
    containerVersion = pBuf[CONTAINER_VERSION_INDEX];
    befc:	6a3b      	ldr	r3, [r7, #32]
    befe:	3320      	adds	r3, #32
    bf00:	781b      	ldrb	r3, [r3, #0]
    bf02:	613b      	str	r3, [r7, #16]
    containerType = pBuf[CONTAINER_TYPE_INDEX];
    bf04:	6a3b      	ldr	r3, [r7, #32]
    bf06:	3321      	adds	r3, #33	; 0x21
    bf08:	781b      	ldrb	r3, [r3, #0]
    bf0a:	60fb      	str	r3, [r7, #12]
    containerID = pBuf[CONTAINER_ID_INDEX];
    bf0c:	6a3b      	ldr	r3, [r7, #32]
    bf0e:	3322      	adds	r3, #34	; 0x22
    bf10:	781b      	ldrb	r3, [r3, #0]
    bf12:	60bb      	str	r3, [r7, #8]
#ifdef INVALIDATE_UNKNOWN_PATCHES
    containerAddr = (uint32_t)((pBuf[CONTAINER_ADDR_INDEX+3] << 24) +
    bf14:	6a3b      	ldr	r3, [r7, #32]
    bf16:	3312      	adds	r3, #18
    bf18:	781b      	ldrb	r3, [r3, #0]
    bf1a:	061a      	lsls	r2, r3, #24
                               (pBuf[CONTAINER_ADDR_INDEX+2] << 16) +
    bf1c:	6a3b      	ldr	r3, [r7, #32]
    bf1e:	3311      	adds	r3, #17
    bf20:	781b      	ldrb	r3, [r3, #0]
    bf22:	041b      	lsls	r3, r3, #16
    containerAddr = (uint32_t)((pBuf[CONTAINER_ADDR_INDEX+3] << 24) +
    bf24:	441a      	add	r2, r3
                                 (pBuf[CONTAINER_ADDR_INDEX+1] << 8) +
    bf26:	6a3b      	ldr	r3, [r7, #32]
    bf28:	3310      	adds	r3, #16
    bf2a:	781b      	ldrb	r3, [r3, #0]
    bf2c:	021b      	lsls	r3, r3, #8
                               (pBuf[CONTAINER_ADDR_INDEX+2] << 16) +
    bf2e:	4413      	add	r3, r2
                                   pBuf[CONTAINER_ADDR_INDEX]);
    bf30:	6a3a      	ldr	r2, [r7, #32]
    bf32:	320f      	adds	r2, #15
    bf34:	7812      	ldrb	r2, [r2, #0]
                                 (pBuf[CONTAINER_ADDR_INDEX+1] << 8) +
    bf36:	4413      	add	r3, r2
    containerAddr = (uint32_t)((pBuf[CONTAINER_ADDR_INDEX+3] << 24) +
    bf38:	607b      	str	r3, [r7, #4]
    containerSize = (uint32_t)((pBuf[CONTAINER_SIZE_INDEX+3] << 24) +
    bf3a:	6a3b      	ldr	r3, [r7, #32]
    bf3c:	3316      	adds	r3, #22
    bf3e:	781b      	ldrb	r3, [r3, #0]
    bf40:	061a      	lsls	r2, r3, #24
                               (pBuf[CONTAINER_SIZE_INDEX+2] << 16) +
    bf42:	6a3b      	ldr	r3, [r7, #32]
    bf44:	3315      	adds	r3, #21
    bf46:	781b      	ldrb	r3, [r3, #0]
    bf48:	041b      	lsls	r3, r3, #16
    containerSize = (uint32_t)((pBuf[CONTAINER_SIZE_INDEX+3] << 24) +
    bf4a:	441a      	add	r2, r3
                                 (pBuf[CONTAINER_SIZE_INDEX+1] << 8) +
    bf4c:	6a3b      	ldr	r3, [r7, #32]
    bf4e:	3314      	adds	r3, #20
    bf50:	781b      	ldrb	r3, [r3, #0]
    bf52:	021b      	lsls	r3, r3, #8
                               (pBuf[CONTAINER_SIZE_INDEX+2] << 16) +
    bf54:	4413      	add	r3, r2
                                   pBuf[CONTAINER_SIZE_INDEX]);
    bf56:	6a3a      	ldr	r2, [r7, #32]
    bf58:	3213      	adds	r2, #19
    bf5a:	7812      	ldrb	r2, [r2, #0]
                                 (pBuf[CONTAINER_SIZE_INDEX+1] << 8) +
    bf5c:	4413      	add	r3, r2
    containerSize = (uint32_t)((pBuf[CONTAINER_SIZE_INDEX+3] << 24) +
    bf5e:	603b      	str	r3, [r7, #0]

    am_util_debug_printf("Patch #%d: Container Address = %8.8X Container Size = %4.4d Container Type=%d Container ID=%d Container Version=%d Build Number=%d User Build Number=%d\n",
    bf60:	697b      	ldr	r3, [r7, #20]
    bf62:	9304      	str	r3, [sp, #16]
    bf64:	69bb      	ldr	r3, [r7, #24]
    bf66:	9303      	str	r3, [sp, #12]
    bf68:	693b      	ldr	r3, [r7, #16]
    bf6a:	9302      	str	r3, [sp, #8]
    bf6c:	68bb      	ldr	r3, [r7, #8]
    bf6e:	9301      	str	r3, [sp, #4]
    bf70:	68fb      	ldr	r3, [r7, #12]
    bf72:	9300      	str	r3, [sp, #0]
    bf74:	683b      	ldr	r3, [r7, #0]
    bf76:	687a      	ldr	r2, [r7, #4]
    bf78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    bf7a:	4867      	ldr	r0, [pc, #412]	; (c118 <queryEM9304Patches+0x484>)
    bf7c:	f001 ff7c 	bl	de78 <am_util_stdio_printf>
		  container, containerAddr, containerSize, containerType, containerID, containerVersion, buildNumber, userBuildNumber);

    // Check for patches that are likely not configuration managed by the customer.
    // Avoid invalidating these patches.
    if ( ((CONTAINER_TYPE_CONFIG_DATA_WORD == containerType) || 
    bf80:	68fb      	ldr	r3, [r7, #12]
    bf82:	2b01      	cmp	r3, #1
    bf84:	d008      	beq.n	bf98 <queryEM9304Patches+0x304>
    bf86:	68fb      	ldr	r3, [r7, #12]
    bf88:	2b02      	cmp	r3, #2
    bf8a:	d005      	beq.n	bf98 <queryEM9304Patches+0x304>
          (CONTAINER_TYPE_RANDOM_DATA_WORD == containerType)  ||
    bf8c:	68fb      	ldr	r3, [r7, #12]
    bf8e:	2b0b      	cmp	r3, #11
    bf90:	d002      	beq.n	bf98 <queryEM9304Patches+0x304>
            (CONTAINER_TYPE_CONFIG_DATA_BYTE == containerType) || 
    bf92:	68fb      	ldr	r3, [r7, #12]
    bf94:	2b03      	cmp	r3, #3
    bf96:	d10e      	bne.n	bfb6 <queryEM9304Patches+0x322>
              (CONTAINER_TYPE_RANDOM_DATA_BYTE == containerType)) &&
    bf98:	69bb      	ldr	r3, [r7, #24]
    bf9a:	2b00      	cmp	r3, #0
    bf9c:	d004      	beq.n	bfa8 <queryEM9304Patches+0x314>
        ((0 == buildNumber) || (3089 == buildNumber)) &&
    bf9e:	69bb      	ldr	r3, [r7, #24]
    bfa0:	f640 4211 	movw	r2, #3089	; 0xc11
    bfa4:	4293      	cmp	r3, r2
    bfa6:	d106      	bne.n	bfb6 <queryEM9304Patches+0x322>
    bfa8:	697b      	ldr	r3, [r7, #20]
    bfaa:	2b00      	cmp	r3, #0
    bfac:	d103      	bne.n	bfb6 <queryEM9304Patches+0x322>
          (0 == userBuildNumber) )
    {
      invalidatePatch = false;
    bfae:	2300      	movs	r3, #0
    bfb0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    bfb4:	e002      	b.n	bfbc <queryEM9304Patches+0x328>
    }
    else
    {
      // Initialize the invalidate flag.
      invalidatePatch = true;
    bfb6:	2301      	movs	r3, #1
    bfb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
#endif	
    
    // For each local patch, compare the Container Version, Container Type, and Container ID to the container info.
    for (uint32_t patch = 0; patch < EM9304_PATCHES_NUM_PATCHES; patch++)
    bfbc:	2300      	movs	r3, #0
    bfbe:	627b      	str	r3, [r7, #36]	; 0x24
    bfc0:	e050      	b.n	c064 <queryEM9304Patches+0x3d0>
    {
      if ((g_pEm9304Patches[patch].buildNumber == buildNumber) &&
    bfc2:	4956      	ldr	r1, [pc, #344]	; (c11c <queryEM9304Patches+0x488>)
    bfc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    bfc6:	4613      	mov	r3, r2
    bfc8:	009b      	lsls	r3, r3, #2
    bfca:	4413      	add	r3, r2
    bfcc:	005b      	lsls	r3, r3, #1
    bfce:	440b      	add	r3, r1
    bfd0:	881b      	ldrh	r3, [r3, #0]
    bfd2:	461a      	mov	r2, r3
    bfd4:	69bb      	ldr	r3, [r7, #24]
    bfd6:	429a      	cmp	r2, r3
    bfd8:	d141      	bne.n	c05e <queryEM9304Patches+0x3ca>
          (g_pEm9304Patches[patch].userBuildNumber == userBuildNumber) &&
    bfda:	4950      	ldr	r1, [pc, #320]	; (c11c <queryEM9304Patches+0x488>)
    bfdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    bfde:	4613      	mov	r3, r2
    bfe0:	009b      	lsls	r3, r3, #2
    bfe2:	4413      	add	r3, r2
    bfe4:	005b      	lsls	r3, r3, #1
    bfe6:	440b      	add	r3, r1
    bfe8:	3302      	adds	r3, #2
    bfea:	881b      	ldrh	r3, [r3, #0]
    bfec:	461a      	mov	r2, r3
      if ((g_pEm9304Patches[patch].buildNumber == buildNumber) &&
    bfee:	697b      	ldr	r3, [r7, #20]
    bff0:	429a      	cmp	r2, r3
    bff2:	d134      	bne.n	c05e <queryEM9304Patches+0x3ca>
            (g_pEm9304Patches[patch].containerVersion == containerVersion) &&
    bff4:	4949      	ldr	r1, [pc, #292]	; (c11c <queryEM9304Patches+0x488>)
    bff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    bff8:	4613      	mov	r3, r2
    bffa:	009b      	lsls	r3, r3, #2
    bffc:	4413      	add	r3, r2
    bffe:	005b      	lsls	r3, r3, #1
    c000:	440b      	add	r3, r1
    c002:	3304      	adds	r3, #4
    c004:	781b      	ldrb	r3, [r3, #0]
    c006:	461a      	mov	r2, r3
          (g_pEm9304Patches[patch].userBuildNumber == userBuildNumber) &&
    c008:	693b      	ldr	r3, [r7, #16]
    c00a:	429a      	cmp	r2, r3
    c00c:	d127      	bne.n	c05e <queryEM9304Patches+0x3ca>
              (g_pEm9304Patches[patch].containerType == containerType) &&
    c00e:	4943      	ldr	r1, [pc, #268]	; (c11c <queryEM9304Patches+0x488>)
    c010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c012:	4613      	mov	r3, r2
    c014:	009b      	lsls	r3, r3, #2
    c016:	4413      	add	r3, r2
    c018:	005b      	lsls	r3, r3, #1
    c01a:	440b      	add	r3, r1
    c01c:	3305      	adds	r3, #5
    c01e:	781b      	ldrb	r3, [r3, #0]
    c020:	461a      	mov	r2, r3
            (g_pEm9304Patches[patch].containerVersion == containerVersion) &&
    c022:	68fb      	ldr	r3, [r7, #12]
    c024:	429a      	cmp	r2, r3
    c026:	d11a      	bne.n	c05e <queryEM9304Patches+0x3ca>
                (g_pEm9304Patches[patch].containerID == containerID))
    c028:	493c      	ldr	r1, [pc, #240]	; (c11c <queryEM9304Patches+0x488>)
    c02a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c02c:	4613      	mov	r3, r2
    c02e:	009b      	lsls	r3, r3, #2
    c030:	4413      	add	r3, r2
    c032:	005b      	lsls	r3, r3, #1
    c034:	440b      	add	r3, r1
    c036:	3306      	adds	r3, #6
    c038:	781b      	ldrb	r3, [r3, #0]
    c03a:	461a      	mov	r2, r3
              (g_pEm9304Patches[patch].containerType == containerType) &&
    c03c:	68bb      	ldr	r3, [r7, #8]
    c03e:	429a      	cmp	r2, r3
    c040:	d10d      	bne.n	c05e <queryEM9304Patches+0x3ca>
      {
        g_pEm9304Patches[patch].applyPatch = false;		// Patch is already installed, so don't apply.
    c042:	4936      	ldr	r1, [pc, #216]	; (c11c <queryEM9304Patches+0x488>)
    c044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c046:	4613      	mov	r3, r2
    c048:	009b      	lsls	r3, r3, #2
    c04a:	4413      	add	r3, r2
    c04c:	005b      	lsls	r3, r3, #1
    c04e:	440b      	add	r3, r1
    c050:	3307      	adds	r3, #7
    c052:	2200      	movs	r2, #0
    c054:	701a      	strb	r2, [r3, #0]
#ifdef INVALIDATE_UNKNOWN_PATCHES
        // Note that we will "re-enable" patches here even if they met the criteria above (which can happen!)
        invalidatePatch = false;
    c056:	2300      	movs	r3, #0
    c058:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#endif	
        break;
    c05c:	e005      	b.n	c06a <queryEM9304Patches+0x3d6>
    for (uint32_t patch = 0; patch < EM9304_PATCHES_NUM_PATCHES; patch++)
    c05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c060:	3301      	adds	r3, #1
    c062:	627b      	str	r3, [r7, #36]	; 0x24
    c064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c066:	2b05      	cmp	r3, #5
    c068:	d9ab      	bls.n	bfc2 <queryEM9304Patches+0x32e>
      }
    }
    
#ifdef INVALIDATE_UNKNOWN_PATCHES		
    // Check to see if we need to invalidate the patch.
    if (invalidatePatch)
    c06a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    c06e:	2b00      	cmp	r3, #0
    c070:	d003      	beq.n	c07a <queryEM9304Patches+0x3e6>
    {
      invalidateEM9304Patch(containerAddr, containerSize);
    c072:	6839      	ldr	r1, [r7, #0]
    c074:	6878      	ldr	r0, [r7, #4]
    c076:	f7ff fdb7 	bl	bbe8 <invalidateEM9304Patch>
  for (uint32_t container = 1; container < containerCount; container++)
    c07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c07c:	3301      	adds	r3, #1
    c07e:	62bb      	str	r3, [r7, #40]	; 0x28
    c080:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c084:	429a      	cmp	r2, r3
    c086:	f4ff aee0 	bcc.w	be4a <queryEM9304Patches+0x1b6>


  if (DEST_MEMORY_IRAM == EM9304_PATCHES_DEST_MEMORY)
  {
    // Send the EM_SetMemoryMode command to turn off OTP and check the response.
    am_devices_em9304_block_write(&g_sEm9304, HCI_CMD_TYPE, g_pui8EM_SetOTPOff, sizeof(g_pui8EM_SetOTPOff) );
    c08a:	2304      	movs	r3, #4
    c08c:	4a24      	ldr	r2, [pc, #144]	; (c120 <queryEM9304Patches+0x48c>)
    c08e:	2101      	movs	r1, #1
    c090:	4824      	ldr	r0, [pc, #144]	; (c124 <queryEM9304Patches+0x490>)
    c092:	f7ff fb15 	bl	b6c0 <am_devices_em9304_block_write>
    
    if (EM9304_INIT_STATUS_SUCCESS != waitEM9304Response())
    c096:	f7ff fd6f 	bl	bb78 <waitEM9304Response>
    c09a:	4603      	mov	r3, r0
    c09c:	2b00      	cmp	r3, #0
    c09e:	d004      	beq.n	c0aa <queryEM9304Patches+0x416>
    {
      am_util_debug_printf("No Response to EM9304 OTP Disable\n");
    c0a0:	4821      	ldr	r0, [pc, #132]	; (c128 <queryEM9304Patches+0x494>)
    c0a2:	f001 fee9 	bl	de78 <am_util_stdio_printf>
      return EM9304_INIT_STATUS_ERROR;
    c0a6:	2301      	movs	r3, #1
    c0a8:	e032      	b.n	c110 <queryEM9304Patches+0x47c>
    }
    
    // Check that the response is to the OTP Disable.
    if ((0x01040E04 != g_pui32HCIRXBuffer[0]) || (0x0000FC2B != (g_pui32HCIRXBuffer[1] & 0x0000FFFF)))
    c0aa:	4b20      	ldr	r3, [pc, #128]	; (c12c <queryEM9304Patches+0x498>)
    c0ac:	681b      	ldr	r3, [r3, #0]
    c0ae:	4a20      	ldr	r2, [pc, #128]	; (c130 <queryEM9304Patches+0x49c>)
    c0b0:	4293      	cmp	r3, r2
    c0b2:	d106      	bne.n	c0c2 <queryEM9304Patches+0x42e>
    c0b4:	4b1d      	ldr	r3, [pc, #116]	; (c12c <queryEM9304Patches+0x498>)
    c0b6:	685b      	ldr	r3, [r3, #4]
    c0b8:	b29b      	uxth	r3, r3
    c0ba:	f64f 422b 	movw	r2, #64555	; 0xfc2b
    c0be:	4293      	cmp	r3, r2
    c0c0:	d004      	beq.n	c0cc <queryEM9304Patches+0x438>
    {
      am_util_debug_printf("Invalid Response to EM9304 OTP Disable\n");
    c0c2:	481c      	ldr	r0, [pc, #112]	; (c134 <queryEM9304Patches+0x4a0>)
    c0c4:	f001 fed8 	bl	de78 <am_util_stdio_printf>
      return EM9304_INIT_STATUS_ERROR;
    c0c8:	2301      	movs	r3, #1
    c0ca:	e021      	b.n	c110 <queryEM9304Patches+0x47c>
    }
  }
  
  // Send the EM_SetSleepOptions command to disable sleep and check the response.
  am_devices_em9304_block_write(&g_sEm9304, HCI_CMD_TYPE, g_pui8EM_SleepEnable, sizeof(g_pui8EM_SleepEnable) );
    c0cc:	2304      	movs	r3, #4
    c0ce:	4a1a      	ldr	r2, [pc, #104]	; (c138 <queryEM9304Patches+0x4a4>)
    c0d0:	2101      	movs	r1, #1
    c0d2:	4814      	ldr	r0, [pc, #80]	; (c124 <queryEM9304Patches+0x490>)
    c0d4:	f7ff faf4 	bl	b6c0 <am_devices_em9304_block_write>
  
  if (EM9304_INIT_STATUS_SUCCESS != waitEM9304Response())
    c0d8:	f7ff fd4e 	bl	bb78 <waitEM9304Response>
    c0dc:	4603      	mov	r3, r0
    c0de:	2b00      	cmp	r3, #0
    c0e0:	d004      	beq.n	c0ec <queryEM9304Patches+0x458>
  {
    am_util_debug_printf("No Response to EM9304 Sleep Enable\n");
    c0e2:	4816      	ldr	r0, [pc, #88]	; (c13c <queryEM9304Patches+0x4a8>)
    c0e4:	f001 fec8 	bl	de78 <am_util_stdio_printf>
    return EM9304_INIT_STATUS_ERROR;
    c0e8:	2301      	movs	r3, #1
    c0ea:	e011      	b.n	c110 <queryEM9304Patches+0x47c>
  }
  
  
  // Check that the response is to the Sleep Enable.
  if ((0x01040E04 != g_pui32HCIRXBuffer[0]) || (0x0000FC2D != (g_pui32HCIRXBuffer[1] & 0x0000FFFF)))
    c0ec:	4b0f      	ldr	r3, [pc, #60]	; (c12c <queryEM9304Patches+0x498>)
    c0ee:	681b      	ldr	r3, [r3, #0]
    c0f0:	4a0f      	ldr	r2, [pc, #60]	; (c130 <queryEM9304Patches+0x49c>)
    c0f2:	4293      	cmp	r3, r2
    c0f4:	d106      	bne.n	c104 <queryEM9304Patches+0x470>
    c0f6:	4b0d      	ldr	r3, [pc, #52]	; (c12c <queryEM9304Patches+0x498>)
    c0f8:	685b      	ldr	r3, [r3, #4]
    c0fa:	b29b      	uxth	r3, r3
    c0fc:	f64f 422d 	movw	r2, #64557	; 0xfc2d
    c100:	4293      	cmp	r3, r2
    c102:	d004      	beq.n	c10e <queryEM9304Patches+0x47a>
  {
    am_util_debug_printf("Invalid Response to EM9304 Sleep Enable\n");
    c104:	480e      	ldr	r0, [pc, #56]	; (c140 <queryEM9304Patches+0x4ac>)
    c106:	f001 feb7 	bl	de78 <am_util_stdio_printf>
    return EM9304_INIT_STATUS_ERROR;
    c10a:	2301      	movs	r3, #1
    c10c:	e000      	b.n	c110 <queryEM9304Patches+0x47c>
  }
  
  return EM9304_INIT_STATUS_SUCCESS;
    c10e:	2300      	movs	r3, #0
  
}
    c110:	4618      	mov	r0, r3
    c112:	3738      	adds	r7, #56	; 0x38
    c114:	46bd      	mov	sp, r7
    c116:	bd80      	pop	{r7, pc}
    c118:	000101c4 	.word	0x000101c4
    c11c:	100010b8 	.word	0x100010b8
    c120:	100010a0 	.word	0x100010a0
    c124:	000115f8 	.word	0x000115f8
    c128:	00010260 	.word	0x00010260
    c12c:	10001ac8 	.word	0x10001ac8
    c130:	01040e04 	.word	0x01040e04
    c134:	00010284 	.word	0x00010284
    c138:	100010b0 	.word	0x100010b0
    c13c:	000102ac 	.word	0x000102ac
    c140:	000102d0 	.word	0x000102d0

0000c144 <applyEM9304Patches>:
//! @return Returns the status of the patch application (< 0 is an error).
//
//*****************************************************************************
uint32_t
applyEM9304Patches(void)
{
    c144:	b5f0      	push	{r4, r5, r6, r7, lr}
    c146:	b089      	sub	sp, #36	; 0x24
    c148:	af04      	add	r7, sp, #16
  uint8_t   *bytePtr = (uint8_t *)&g_pui32HCIRXBuffer;
    c14a:	4b7d      	ldr	r3, [pc, #500]	; (c340 <applyEM9304Patches+0x1fc>)
    c14c:	607b      	str	r3, [r7, #4]
  uint32_t  ui32PN;
  
  g_EMPatchErrors = 0;
    c14e:	4b7d      	ldr	r3, [pc, #500]	; (c344 <applyEM9304Patches+0x200>)
    c150:	2200      	movs	r2, #0
    c152:	601a      	str	r2, [r3, #0]

  //
  // Device identification
  //
  ui32PN = AM_REG(MCUCTRL, CHIP_INFO)  &
    c154:	4b7c      	ldr	r3, [pc, #496]	; (c348 <applyEM9304Patches+0x204>)
    c156:	681b      	ldr	r3, [r3, #0]
    c158:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    c15c:	603b      	str	r3, [r7, #0]
  }

  if (DEST_MEMORY_IRAM == EM9304_PATCHES_DEST_MEMORY)
  {
    // Send the EM_SetMemoryMode command to turn on IRAM and check the response.
    am_devices_em9304_block_write(&g_sEm9304, HCI_CMD_TYPE, g_pui8EM_SetIRAMOn, sizeof(g_pui8EM_SetIRAMOn) );
    c15e:	2304      	movs	r3, #4
    c160:	4a7a      	ldr	r2, [pc, #488]	; (c34c <applyEM9304Patches+0x208>)
    c162:	2101      	movs	r1, #1
    c164:	487a      	ldr	r0, [pc, #488]	; (c350 <applyEM9304Patches+0x20c>)
    c166:	f7ff faab 	bl	b6c0 <am_devices_em9304_block_write>
    
    if (EM9304_INIT_STATUS_SUCCESS != waitEM9304Response())
    c16a:	f7ff fd05 	bl	bb78 <waitEM9304Response>
    c16e:	4603      	mov	r3, r0
    c170:	2b00      	cmp	r3, #0
    c172:	d004      	beq.n	c17e <applyEM9304Patches+0x3a>
    {
      am_util_debug_printf("No Response to EM9304 IRAM Enable\n");
    c174:	4877      	ldr	r0, [pc, #476]	; (c354 <applyEM9304Patches+0x210>)
    c176:	f001 fe7f 	bl	de78 <am_util_stdio_printf>
      return EM9304_INIT_STATUS_ERROR;
    c17a:	2301      	movs	r3, #1
    c17c:	e0dc      	b.n	c338 <applyEM9304Patches+0x1f4>
    }
    
    // Check that the response is to the IRAM enable.
    if ((0x01040E04 != g_pui32HCIRXBuffer[0]) || (0x0000FC2B != (g_pui32HCIRXBuffer[1] & 0x0000FFFF)))
    c17e:	4b70      	ldr	r3, [pc, #448]	; (c340 <applyEM9304Patches+0x1fc>)
    c180:	681b      	ldr	r3, [r3, #0]
    c182:	4a75      	ldr	r2, [pc, #468]	; (c358 <applyEM9304Patches+0x214>)
    c184:	4293      	cmp	r3, r2
    c186:	d106      	bne.n	c196 <applyEM9304Patches+0x52>
    c188:	4b6d      	ldr	r3, [pc, #436]	; (c340 <applyEM9304Patches+0x1fc>)
    c18a:	685b      	ldr	r3, [r3, #4]
    c18c:	b29b      	uxth	r3, r3
    c18e:	f64f 422b 	movw	r2, #64555	; 0xfc2b
    c192:	4293      	cmp	r3, r2
    c194:	d004      	beq.n	c1a0 <applyEM9304Patches+0x5c>
    {
      am_util_debug_printf("Invalid Response to EM9304 IRAM Enable\n");
    c196:	4871      	ldr	r0, [pc, #452]	; (c35c <applyEM9304Patches+0x218>)
    c198:	f001 fe6e 	bl	de78 <am_util_stdio_printf>
      return EM9304_INIT_STATUS_ERROR;
    c19c:	2301      	movs	r3, #1
    c19e:	e0cb      	b.n	c338 <applyEM9304Patches+0x1f4>
    }
  }
  
  // Loop through the patches and apply those that are not already there.
  // For each local patch, compare the Container Version, Container Type, and Container ID to the container info.
  for (uint32_t patch = 0; patch < EM9304_PATCHES_NUM_PATCHES; patch++)
    c1a0:	2300      	movs	r3, #0
    c1a2:	60fb      	str	r3, [r7, #12]
    c1a4:	e0c3      	b.n	c32e <applyEM9304Patches+0x1ea>
  {
    if (g_pEm9304Patches[patch].applyPatch)
    c1a6:	496e      	ldr	r1, [pc, #440]	; (c360 <applyEM9304Patches+0x21c>)
    c1a8:	68fa      	ldr	r2, [r7, #12]
    c1aa:	4613      	mov	r3, r2
    c1ac:	009b      	lsls	r3, r3, #2
    c1ae:	4413      	add	r3, r2
    c1b0:	005b      	lsls	r3, r3, #1
    c1b2:	440b      	add	r3, r1
    c1b4:	3307      	adds	r3, #7
    c1b6:	781b      	ldrb	r3, [r3, #0]
    c1b8:	2b00      	cmp	r3, #0
    c1ba:	f000 80b5 	beq.w	c328 <applyEM9304Patches+0x1e4>
    {
			am_util_debug_printf("Applying Patch #%d: Container Type=%d Container ID=%d Container Version=%d Build Number=%d User Build Number=%d\n",
    c1be:	4968      	ldr	r1, [pc, #416]	; (c360 <applyEM9304Patches+0x21c>)
    c1c0:	68fa      	ldr	r2, [r7, #12]
    c1c2:	4613      	mov	r3, r2
    c1c4:	009b      	lsls	r3, r3, #2
    c1c6:	4413      	add	r3, r2
    c1c8:	005b      	lsls	r3, r3, #1
    c1ca:	440b      	add	r3, r1
    c1cc:	3305      	adds	r3, #5
    c1ce:	781b      	ldrb	r3, [r3, #0]
    c1d0:	461d      	mov	r5, r3
    c1d2:	4963      	ldr	r1, [pc, #396]	; (c360 <applyEM9304Patches+0x21c>)
    c1d4:	68fa      	ldr	r2, [r7, #12]
    c1d6:	4613      	mov	r3, r2
    c1d8:	009b      	lsls	r3, r3, #2
    c1da:	4413      	add	r3, r2
    c1dc:	005b      	lsls	r3, r3, #1
    c1de:	440b      	add	r3, r1
    c1e0:	3306      	adds	r3, #6
    c1e2:	781b      	ldrb	r3, [r3, #0]
    c1e4:	461e      	mov	r6, r3
    c1e6:	495e      	ldr	r1, [pc, #376]	; (c360 <applyEM9304Patches+0x21c>)
    c1e8:	68fa      	ldr	r2, [r7, #12]
    c1ea:	4613      	mov	r3, r2
    c1ec:	009b      	lsls	r3, r3, #2
    c1ee:	4413      	add	r3, r2
    c1f0:	005b      	lsls	r3, r3, #1
    c1f2:	440b      	add	r3, r1
    c1f4:	3304      	adds	r3, #4
    c1f6:	781b      	ldrb	r3, [r3, #0]
    c1f8:	4618      	mov	r0, r3
    c1fa:	4959      	ldr	r1, [pc, #356]	; (c360 <applyEM9304Patches+0x21c>)
    c1fc:	68fa      	ldr	r2, [r7, #12]
    c1fe:	4613      	mov	r3, r2
    c200:	009b      	lsls	r3, r3, #2
    c202:	4413      	add	r3, r2
    c204:	005b      	lsls	r3, r3, #1
    c206:	440b      	add	r3, r1
    c208:	881b      	ldrh	r3, [r3, #0]
    c20a:	461c      	mov	r4, r3
    c20c:	4954      	ldr	r1, [pc, #336]	; (c360 <applyEM9304Patches+0x21c>)
    c20e:	68fa      	ldr	r2, [r7, #12]
    c210:	4613      	mov	r3, r2
    c212:	009b      	lsls	r3, r3, #2
    c214:	4413      	add	r3, r2
    c216:	005b      	lsls	r3, r3, #1
    c218:	440b      	add	r3, r1
    c21a:	3302      	adds	r3, #2
    c21c:	881b      	ldrh	r3, [r3, #0]
    c21e:	9302      	str	r3, [sp, #8]
    c220:	9401      	str	r4, [sp, #4]
    c222:	9000      	str	r0, [sp, #0]
    c224:	4633      	mov	r3, r6
    c226:	462a      	mov	r2, r5
    c228:	68f9      	ldr	r1, [r7, #12]
    c22a:	484e      	ldr	r0, [pc, #312]	; (c364 <applyEM9304Patches+0x220>)
    c22c:	f001 fe24 	bl	de78 <am_util_stdio_printf>
		    patch, g_pEm9304Patches[patch].containerType, g_pEm9304Patches[patch].containerID, g_pEm9304Patches[patch].containerVersion, 
			    g_pEm9304Patches[patch].buildNumber, g_pEm9304Patches[patch].userBuildNumber);


      for (uint32_t index = g_pEm9304Patches[patch].startingPatch; index < g_pEm9304Patches[patch].endingPatch; index ++)
    c230:	494b      	ldr	r1, [pc, #300]	; (c360 <applyEM9304Patches+0x21c>)
    c232:	68fa      	ldr	r2, [r7, #12]
    c234:	4613      	mov	r3, r2
    c236:	009b      	lsls	r3, r3, #2
    c238:	4413      	add	r3, r2
    c23a:	005b      	lsls	r3, r3, #1
    c23c:	440b      	add	r3, r1
    c23e:	3308      	adds	r3, #8
    c240:	781b      	ldrb	r3, [r3, #0]
    c242:	60bb      	str	r3, [r7, #8]
    c244:	e063      	b.n	c30e <applyEM9304Patches+0x1ca>
      {
        am_devices_em9304_block_write(&g_sEm9304, HCI_CMD_TYPE, (uint8_t *)g_pEm9304PatchesHCICmd[index], 
    c246:	68ba      	ldr	r2, [r7, #8]
    c248:	4613      	mov	r3, r2
    c24a:	011b      	lsls	r3, r3, #4
    c24c:	4413      	add	r3, r2
    c24e:	009b      	lsls	r3, r3, #2
    c250:	4a45      	ldr	r2, [pc, #276]	; (c368 <applyEM9304Patches+0x224>)
    c252:	1898      	adds	r0, r3, r2
                                      g_pEm9304PatchesHCICmd[index][PATCH_LENGTH_OFFSET]+3 );
    c254:	4944      	ldr	r1, [pc, #272]	; (c368 <applyEM9304Patches+0x224>)
    c256:	68ba      	ldr	r2, [r7, #8]
    c258:	4613      	mov	r3, r2
    c25a:	011b      	lsls	r3, r3, #4
    c25c:	4413      	add	r3, r2
    c25e:	009b      	lsls	r3, r3, #2
    c260:	440b      	add	r3, r1
    c262:	3302      	adds	r3, #2
    c264:	781b      	ldrb	r3, [r3, #0]
    c266:	3303      	adds	r3, #3
        am_devices_em9304_block_write(&g_sEm9304, HCI_CMD_TYPE, (uint8_t *)g_pEm9304PatchesHCICmd[index], 
    c268:	4602      	mov	r2, r0
    c26a:	2101      	movs	r1, #1
    c26c:	4838      	ldr	r0, [pc, #224]	; (c350 <applyEM9304Patches+0x20c>)
    c26e:	f7ff fa27 	bl	b6c0 <am_devices_em9304_block_write>
	
        if (EM9304_INIT_STATUS_SUCCESS != waitEM9304Response())
    c272:	f7ff fc81 	bl	bb78 <waitEM9304Response>
    c276:	4603      	mov	r3, r0
    c278:	2b00      	cmp	r3, #0
    c27a:	d004      	beq.n	c286 <applyEM9304Patches+0x142>
        {
          am_util_debug_printf("No Response to EM9304 Patch Write\n");
    c27c:	483b      	ldr	r0, [pc, #236]	; (c36c <applyEM9304Patches+0x228>)
    c27e:	f001 fdfb 	bl	de78 <am_util_stdio_printf>
          return EM9304_INIT_STATUS_ERROR;
    c282:	2301      	movs	r3, #1
    c284:	e058      	b.n	c338 <applyEM9304Patches+0x1f4>
        }
        
        if ((g_pEm9304PatchesHCICmd[index][1] == 0x27) &&
    c286:	4938      	ldr	r1, [pc, #224]	; (c368 <applyEM9304Patches+0x224>)
    c288:	68ba      	ldr	r2, [r7, #8]
    c28a:	4613      	mov	r3, r2
    c28c:	011b      	lsls	r3, r3, #4
    c28e:	4413      	add	r3, r2
    c290:	009b      	lsls	r3, r3, #2
    c292:	440b      	add	r3, r1
    c294:	3301      	adds	r3, #1
    c296:	781b      	ldrb	r3, [r3, #0]
    c298:	2b27      	cmp	r3, #39	; 0x27
    c29a:	d109      	bne.n	c2b0 <applyEM9304Patches+0x16c>
            (bytePtr[EM_PATCH_STATUS_OFFSET] != EM_PATCH_APPLIED))
    c29c:	687b      	ldr	r3, [r7, #4]
    c29e:	3307      	adds	r3, #7
    c2a0:	781b      	ldrb	r3, [r3, #0]
        if ((g_pEm9304PatchesHCICmd[index][1] == 0x27) &&
    c2a2:	2b01      	cmp	r3, #1
    c2a4:	d004      	beq.n	c2b0 <applyEM9304Patches+0x16c>
        {
          am_util_debug_printf("Error Response to EM9304 Patch Write\n");
    c2a6:	4832      	ldr	r0, [pc, #200]	; (c370 <applyEM9304Patches+0x22c>)
    c2a8:	f001 fde6 	bl	de78 <am_util_stdio_printf>
          return EM9304_INIT_STATUS_ERROR;
    c2ac:	2301      	movs	r3, #1
    c2ae:	e043      	b.n	c338 <applyEM9304Patches+0x1f4>
        }
        else if (g_pEm9304PatchesHCICmd[index][1] == 0x28)
    c2b0:	492d      	ldr	r1, [pc, #180]	; (c368 <applyEM9304Patches+0x224>)
    c2b2:	68ba      	ldr	r2, [r7, #8]
    c2b4:	4613      	mov	r3, r2
    c2b6:	011b      	lsls	r3, r3, #4
    c2b8:	4413      	add	r3, r2
    c2ba:	009b      	lsls	r3, r3, #2
    c2bc:	440b      	add	r3, r1
    c2be:	3301      	adds	r3, #1
    c2c0:	781b      	ldrb	r3, [r3, #0]
    c2c2:	2b28      	cmp	r3, #40	; 0x28
    c2c4:	d120      	bne.n	c308 <applyEM9304Patches+0x1c4>
        {
          if (((index + 1) == g_pEm9304Patches[patch].endingPatch) && (bytePtr[EM_PATCH_STATUS_OFFSET] != EM_PATCH_APPLIED))
    c2c6:	68bb      	ldr	r3, [r7, #8]
    c2c8:	1c59      	adds	r1, r3, #1
    c2ca:	4825      	ldr	r0, [pc, #148]	; (c360 <applyEM9304Patches+0x21c>)
    c2cc:	68fa      	ldr	r2, [r7, #12]
    c2ce:	4613      	mov	r3, r2
    c2d0:	009b      	lsls	r3, r3, #2
    c2d2:	4413      	add	r3, r2
    c2d4:	005b      	lsls	r3, r3, #1
    c2d6:	4403      	add	r3, r0
    c2d8:	3309      	adds	r3, #9
    c2da:	781b      	ldrb	r3, [r3, #0]
    c2dc:	4299      	cmp	r1, r3
    c2de:	d109      	bne.n	c2f4 <applyEM9304Patches+0x1b0>
    c2e0:	687b      	ldr	r3, [r7, #4]
    c2e2:	3307      	adds	r3, #7
    c2e4:	781b      	ldrb	r3, [r3, #0]
    c2e6:	2b01      	cmp	r3, #1
    c2e8:	d004      	beq.n	c2f4 <applyEM9304Patches+0x1b0>
          {
            am_util_debug_printf("Error Response to EM9304 Patch Continue (next to last patch segment)\n");
    c2ea:	4822      	ldr	r0, [pc, #136]	; (c374 <applyEM9304Patches+0x230>)
    c2ec:	f001 fdc4 	bl	de78 <am_util_stdio_printf>
            return EM9304_INIT_STATUS_ERROR;
    c2f0:	2301      	movs	r3, #1
    c2f2:	e021      	b.n	c338 <applyEM9304Patches+0x1f4>
          }
          else if (bytePtr[EM_PATCH_STATUS_OFFSET] != EM_PATCH_CONTINUE)
    c2f4:	687b      	ldr	r3, [r7, #4]
    c2f6:	3307      	adds	r3, #7
    c2f8:	781b      	ldrb	r3, [r3, #0]
    c2fa:	2b02      	cmp	r3, #2
    c2fc:	d004      	beq.n	c308 <applyEM9304Patches+0x1c4>
          {
            am_util_debug_printf("Error Response to EM9304 Patch Continue (last patch segment)\n");
    c2fe:	481e      	ldr	r0, [pc, #120]	; (c378 <applyEM9304Patches+0x234>)
    c300:	f001 fdba 	bl	de78 <am_util_stdio_printf>
            return EM9304_INIT_STATUS_ERROR;
    c304:	2301      	movs	r3, #1
    c306:	e017      	b.n	c338 <applyEM9304Patches+0x1f4>
      for (uint32_t index = g_pEm9304Patches[patch].startingPatch; index < g_pEm9304Patches[patch].endingPatch; index ++)
    c308:	68bb      	ldr	r3, [r7, #8]
    c30a:	3301      	adds	r3, #1
    c30c:	60bb      	str	r3, [r7, #8]
    c30e:	4914      	ldr	r1, [pc, #80]	; (c360 <applyEM9304Patches+0x21c>)
    c310:	68fa      	ldr	r2, [r7, #12]
    c312:	4613      	mov	r3, r2
    c314:	009b      	lsls	r3, r3, #2
    c316:	4413      	add	r3, r2
    c318:	005b      	lsls	r3, r3, #1
    c31a:	440b      	add	r3, r1
    c31c:	3309      	adds	r3, #9
    c31e:	781b      	ldrb	r3, [r3, #0]
    c320:	461a      	mov	r2, r3
    c322:	68bb      	ldr	r3, [r7, #8]
    c324:	429a      	cmp	r2, r3
    c326:	d88e      	bhi.n	c246 <applyEM9304Patches+0x102>
  for (uint32_t patch = 0; patch < EM9304_PATCHES_NUM_PATCHES; patch++)
    c328:	68fb      	ldr	r3, [r7, #12]
    c32a:	3301      	adds	r3, #1
    c32c:	60fb      	str	r3, [r7, #12]
    c32e:	68fb      	ldr	r3, [r7, #12]
    c330:	2b05      	cmp	r3, #5
    c332:	f67f af38 	bls.w	c1a6 <applyEM9304Patches+0x62>
        }
      }
    }
  }
  
  return EM9304_INIT_STATUS_SUCCESS;
    c336:	2300      	movs	r3, #0
}
    c338:	4618      	mov	r0, r3
    c33a:	3714      	adds	r7, #20
    c33c:	46bd      	mov	sp, r7
    c33e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c340:	10001ac8 	.word	0x10001ac8
    c344:	10001bc8 	.word	0x10001bc8
    c348:	40020000 	.word	0x40020000
    c34c:	100010a4 	.word	0x100010a4
    c350:	000115f8 	.word	0x000115f8
    c354:	000102fc 	.word	0x000102fc
    c358:	01040e04 	.word	0x01040e04
    c35c:	00010320 	.word	0x00010320
    c360:	100010b8 	.word	0x100010b8
    c364:	00010348 	.word	0x00010348
    c368:	00011608 	.word	0x00011608
    c36c:	000103bc 	.word	0x000103bc
    c370:	000103e0 	.word	0x000103e0
    c374:	00010408 	.word	0x00010408
    c378:	00010450 	.word	0x00010450

0000c37c <initEM9304>:
// Configure the necessary pins and start the EM9304 radio.
//
//*****************************************************************************
void
initEM9304(void)
{
    c37c:	b580      	push	{r7, lr}
    c37e:	b082      	sub	sp, #8
    c380:	af00      	add	r7, sp, #0
  uint32_t numBytesRx;
  
  if (validEM9304Patches())
    c382:	f7ff fc27 	bl	bbd4 <validEM9304Patches>
    c386:	4603      	mov	r3, r0
    c388:	2b00      	cmp	r3, #0
    c38a:	d010      	beq.n	c3ae <initEM9304+0x32>
  {
    //
    // Query the EM9304 for patches
    //
    if (EM9304_INIT_STATUS_SUCCESS == queryEM9304Patches())
    c38c:	f7ff fc82 	bl	bc94 <queryEM9304Patches>
    c390:	4603      	mov	r3, r0
    c392:	2b00      	cmp	r3, #0
    c394:	d108      	bne.n	c3a8 <initEM9304+0x2c>
    {
      //
      // Apply the patches not already in the EM9304
      //
      if (EM9304_INIT_STATUS_SUCCESS != applyEM9304Patches())
    c396:	f7ff fed5 	bl	c144 <applyEM9304Patches>
    c39a:	4603      	mov	r3, r0
    c39c:	2b00      	cmp	r3, #0
    c39e:	d006      	beq.n	c3ae <initEM9304+0x32>
      {
        am_util_debug_printf("EM9304 Patch Application Failed\n");
    c3a0:	4818      	ldr	r0, [pc, #96]	; (c404 <initEM9304+0x88>)
    c3a2:	f001 fd69 	bl	de78 <am_util_stdio_printf>
    c3a6:	e002      	b.n	c3ae <initEM9304+0x32>
      }
    }
    else
    {
      am_util_debug_printf("EM9304 Patching Query Failed.  Patch update not applied\n");
    c3a8:	4817      	ldr	r0, [pc, #92]	; (c408 <initEM9304+0x8c>)
    c3aa:	f001 fd65 	bl	de78 <am_util_stdio_printf>
    }
    
  }
  // Send EM_CpuReset HCI command.
  am_devices_em9304_block_write(&g_sEm9304, HCI_CMD_TYPE, g_pui8EM_CpuReset, sizeof(g_pui8EM_CpuReset) );
    c3ae:	2303      	movs	r3, #3
    c3b0:	4a16      	ldr	r2, [pc, #88]	; (c40c <initEM9304+0x90>)
    c3b2:	2101      	movs	r1, #1
    c3b4:	4816      	ldr	r0, [pc, #88]	; (c410 <initEM9304+0x94>)
    c3b6:	f7ff f983 	bl	b6c0 <am_devices_em9304_block_write>
  
  // HCI Respone should return in 1-2 messages at most, but driver returns
  // 0 bytes when nothing is available, so wait up to 10msec.
  for (uint32_t attempts = 0; attempts < EM9304_MAX_ATTEMPTS; attempts++)
    c3ba:	2300      	movs	r3, #0
    c3bc:	607b      	str	r3, [r7, #4]
    c3be:	e019      	b.n	c3f4 <initEM9304+0x78>
  {
    numBytesRx = am_devices_em9304_block_read(&g_sEm9304, g_pui32HCIRXBuffer,0);
    c3c0:	2200      	movs	r2, #0
    c3c2:	4914      	ldr	r1, [pc, #80]	; (c414 <initEM9304+0x98>)
    c3c4:	4812      	ldr	r0, [pc, #72]	; (c410 <initEM9304+0x94>)
    c3c6:	f7ff fa3d 	bl	b844 <am_devices_em9304_block_read>
    c3ca:	6038      	str	r0, [r7, #0]
    if ((numBytesRx == 7) && (0x0000FC32 == (g_pui32HCIRXBuffer[1] & 0x0000FFFF)))
    c3cc:	683b      	ldr	r3, [r7, #0]
    c3ce:	2b07      	cmp	r3, #7
    c3d0:	d10a      	bne.n	c3e8 <initEM9304+0x6c>
    c3d2:	4b10      	ldr	r3, [pc, #64]	; (c414 <initEM9304+0x98>)
    c3d4:	685b      	ldr	r3, [r3, #4]
    c3d6:	b29b      	uxth	r3, r3
    c3d8:	f64f 4232 	movw	r2, #64562	; 0xfc32
    c3dc:	4293      	cmp	r3, r2
    c3de:	d103      	bne.n	c3e8 <initEM9304+0x6c>
    {
      am_util_debug_printf("EM9304 CPU Reset Successfully\n");
    c3e0:	480d      	ldr	r0, [pc, #52]	; (c418 <initEM9304+0x9c>)
    c3e2:	f001 fd49 	bl	de78 <am_util_stdio_printf>
      break;
    c3e6:	e008      	b.n	c3fa <initEM9304+0x7e>
    }
    am_util_delay_ms(EM9304_ATTEMPT_DELAY_MS);
    c3e8:	2001      	movs	r0, #1
    c3ea:	f000 fe27 	bl	d03c <am_util_delay_ms>
  for (uint32_t attempts = 0; attempts < EM9304_MAX_ATTEMPTS; attempts++)
    c3ee:	687b      	ldr	r3, [r7, #4]
    c3f0:	3301      	adds	r3, #1
    c3f2:	607b      	str	r3, [r7, #4]
    c3f4:	687b      	ldr	r3, [r7, #4]
    c3f6:	2b63      	cmp	r3, #99	; 0x63
    c3f8:	d9e2      	bls.n	c3c0 <initEM9304+0x44>
  }
  
}
    c3fa:	bf00      	nop
    c3fc:	3708      	adds	r7, #8
    c3fe:	46bd      	mov	sp, r7
    c400:	bd80      	pop	{r7, pc}
    c402:	bf00      	nop
    c404:	00010490 	.word	0x00010490
    c408:	000104b4 	.word	0x000104b4
    c40c:	100010b4 	.word	0x100010b4
    c410:	000115f8 	.word	0x000115f8
    c414:	10001ac8 	.word	0x10001ac8
    c418:	000104f0 	.word	0x000104f0

0000c41c <hciDrvWrite>:
//! @return Returns the number of bytes written.
//
//*****************************************************************************
uint16_t
hciDrvWrite(uint8_t type, uint16_t len, uint8_t *pData)
{
    c41c:	b580      	push	{r7, lr}
    c41e:	b082      	sub	sp, #8
    c420:	af00      	add	r7, sp, #0
    c422:	4603      	mov	r3, r0
    c424:	603a      	str	r2, [r7, #0]
    c426:	71fb      	strb	r3, [r7, #7]
    c428:	460b      	mov	r3, r1
    c42a:	80bb      	strh	r3, [r7, #4]
    //
    // Turn on the IOM for this operation.
    //
    am_devices_em9304_spi_awake(g_sEm9304.ui32IOMModule);
    c42c:	4b0a      	ldr	r3, [pc, #40]	; (c458 <hciDrvWrite+0x3c>)
    c42e:	685b      	ldr	r3, [r3, #4]
    c430:	4618      	mov	r0, r3
    c432:	f7ff faeb 	bl	ba0c <am_devices_em9304_spi_awake>

	  //
	  // Write the HCI packet.
	  //
    am_devices_em9304_block_write(&g_sEm9304, type, pData, len );
    c436:	88bb      	ldrh	r3, [r7, #4]
    c438:	79f9      	ldrb	r1, [r7, #7]
    c43a:	683a      	ldr	r2, [r7, #0]
    c43c:	4806      	ldr	r0, [pc, #24]	; (c458 <hciDrvWrite+0x3c>)
    c43e:	f7ff f93f 	bl	b6c0 <am_devices_em9304_block_write>
	
    //
    // Disable IOM SPI pins and turn off the IOM after operation
    //
    am_devices_em9304_spi_sleep(g_sEm9304.ui32IOMModule);
    c442:	4b05      	ldr	r3, [pc, #20]	; (c458 <hciDrvWrite+0x3c>)
    c444:	685b      	ldr	r3, [r3, #4]
    c446:	4618      	mov	r0, r3
    c448:	f7ff faf9 	bl	ba3e <am_devices_em9304_spi_sleep>

    return len;
    c44c:	88bb      	ldrh	r3, [r7, #4]
}
    c44e:	4618      	mov	r0, r3
    c450:	3708      	adds	r7, #8
    c452:	46bd      	mov	sp, r7
    c454:	bd80      	pop	{r7, pc}
    c456:	bf00      	nop
    c458:	000115f8 	.word	0x000115f8

0000c45c <HciDataReadyISR>:
    return TRUE;
}

bool_t
HciDataReadyISR(void)
{
    c45c:	b580      	push	{r7, lr}
    c45e:	af00      	add	r7, sp, #0
  //
  // If the radio boot has not yet completed, then do not process HCI packets
  if (!radio_boot_complete)
    c460:	4b52      	ldr	r3, [pc, #328]	; (c5ac <HciDataReadyISR+0x150>)
    c462:	781b      	ldrb	r3, [r3, #0]
    c464:	2b00      	cmp	r3, #0
    c466:	d101      	bne.n	c46c <HciDataReadyISR+0x10>
  {
    return TRUE;
    c468:	2301      	movs	r3, #1
    c46a:	e09c      	b.n	c5a6 <HciDataReadyISR+0x14a>
  }

  // check if there's pending HCI data from last time
  if (g_ui32HCIPacketSize > g_consumed_bytes)
    c46c:	4b50      	ldr	r3, [pc, #320]	; (c5b0 <HciDataReadyISR+0x154>)
    c46e:	781b      	ldrb	r3, [r3, #0]
    c470:	461a      	mov	r2, r3
    c472:	4b50      	ldr	r3, [pc, #320]	; (c5b4 <HciDataReadyISR+0x158>)
    c474:	681b      	ldr	r3, [r3, #0]
    c476:	429a      	cmp	r2, r3
    c478:	d226      	bcs.n	c4c8 <HciDataReadyISR+0x6c>
  {
    g_consumed_bytes += hciTrSerialRxIncoming(
    c47a:	4b4d      	ldr	r3, [pc, #308]	; (c5b0 <HciDataReadyISR+0x154>)
    c47c:	781b      	ldrb	r3, [r3, #0]
    c47e:	461a      	mov	r2, r3
    c480:	4b4d      	ldr	r3, [pc, #308]	; (c5b8 <HciDataReadyISR+0x15c>)
    c482:	18d0      	adds	r0, r2, r3
    c484:	4b4b      	ldr	r3, [pc, #300]	; (c5b4 <HciDataReadyISR+0x158>)
    c486:	681b      	ldr	r3, [r3, #0]
    c488:	b2da      	uxtb	r2, r3
    c48a:	4b49      	ldr	r3, [pc, #292]	; (c5b0 <HciDataReadyISR+0x154>)
    c48c:	781b      	ldrb	r3, [r3, #0]
    c48e:	1ad3      	subs	r3, r2, r3
    c490:	b2db      	uxtb	r3, r3
    c492:	4619      	mov	r1, r3
    c494:	f7fd faee 	bl	9a74 <hciTrSerialRxIncoming>
    c498:	4603      	mov	r3, r0
    c49a:	461a      	mov	r2, r3
    c49c:	4b44      	ldr	r3, [pc, #272]	; (c5b0 <HciDataReadyISR+0x154>)
    c49e:	781b      	ldrb	r3, [r3, #0]
    c4a0:	4413      	add	r3, r2
    c4a2:	b2da      	uxtb	r2, r3
    c4a4:	4b42      	ldr	r3, [pc, #264]	; (c5b0 <HciDataReadyISR+0x154>)
    c4a6:	701a      	strb	r2, [r3, #0]
              ((uint8_t *)g_pui32HCIRXBuffer) + g_consumed_bytes, 
              g_ui32HCIPacketSize - g_consumed_bytes);

    if (g_consumed_bytes == g_ui32HCIPacketSize) {
    c4a8:	4b41      	ldr	r3, [pc, #260]	; (c5b0 <HciDataReadyISR+0x154>)
    c4aa:	781b      	ldrb	r3, [r3, #0]
    c4ac:	461a      	mov	r2, r3
    c4ae:	4b41      	ldr	r3, [pc, #260]	; (c5b4 <HciDataReadyISR+0x158>)
    c4b0:	681b      	ldr	r3, [r3, #0]
    c4b2:	429a      	cmp	r2, r3
    c4b4:	d106      	bne.n	c4c4 <HciDataReadyISR+0x68>
      g_ui32HCIPacketSize = 0;
    c4b6:	4b3f      	ldr	r3, [pc, #252]	; (c5b4 <HciDataReadyISR+0x158>)
    c4b8:	2200      	movs	r2, #0
    c4ba:	601a      	str	r2, [r3, #0]
      g_consumed_bytes    = 0;
    c4bc:	4b3c      	ldr	r3, [pc, #240]	; (c5b0 <HciDataReadyISR+0x154>)
    c4be:	2200      	movs	r2, #0
    c4c0:	701a      	strb	r2, [r3, #0]
    c4c2:	e001      	b.n	c4c8 <HciDataReadyISR+0x6c>
    }
    else {
      return FALSE;
    c4c4:	2300      	movs	r3, #0
    c4c6:	e06e      	b.n	c5a6 <HciDataReadyISR+0x14a>
  }

  //
  // Turn on the IOM for this operation.
  //
  am_devices_em9304_spi_awake(g_sEm9304.ui32IOMModule);
    c4c8:	4b3c      	ldr	r3, [pc, #240]	; (c5bc <HciDataReadyISR+0x160>)
    c4ca:	685b      	ldr	r3, [r3, #4]
    c4cc:	4618      	mov	r0, r3
    c4ce:	f7ff fa9d 	bl	ba0c <am_devices_em9304_spi_awake>

  g_ui32HCIPacketSize = am_devices_em9304_block_read(&g_sEm9304, g_pui32HCIRXBuffer, 0);
    c4d2:	2200      	movs	r2, #0
    c4d4:	4938      	ldr	r1, [pc, #224]	; (c5b8 <HciDataReadyISR+0x15c>)
    c4d6:	4839      	ldr	r0, [pc, #228]	; (c5bc <HciDataReadyISR+0x160>)
    c4d8:	f7ff f9b4 	bl	b844 <am_devices_em9304_block_read>
    c4dc:	4602      	mov	r2, r0
    c4de:	4b35      	ldr	r3, [pc, #212]	; (c5b4 <HciDataReadyISR+0x158>)
    c4e0:	601a      	str	r2, [r3, #0]

  // Check for EM9304 Vendor Specific events and record them.
	if ( (g_ui32HCIPacketSize > 3) && (0x0001FF04 == (g_pui32HCIRXBuffer[0] & 0x00FFFFFF)) )
    c4e2:	4b34      	ldr	r3, [pc, #208]	; (c5b4 <HciDataReadyISR+0x158>)
    c4e4:	681b      	ldr	r3, [r3, #0]
    c4e6:	2b03      	cmp	r3, #3
    c4e8:	d931      	bls.n	c54e <HciDataReadyISR+0xf2>
    c4ea:	4b33      	ldr	r3, [pc, #204]	; (c5b8 <HciDataReadyISR+0x15c>)
    c4ec:	681b      	ldr	r3, [r3, #0]
    c4ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c4f2:	4a33      	ldr	r2, [pc, #204]	; (c5c0 <HciDataReadyISR+0x164>)
    c4f4:	4293      	cmp	r3, r2
    c4f6:	d12a      	bne.n	c54e <HciDataReadyISR+0xf2>
	{
		switch((g_pui32HCIRXBuffer[0] & 0xFF000000) >> 24)
    c4f8:	4b2f      	ldr	r3, [pc, #188]	; (c5b8 <HciDataReadyISR+0x15c>)
    c4fa:	681b      	ldr	r3, [r3, #0]
    c4fc:	0e1b      	lsrs	r3, r3, #24
    c4fe:	2b03      	cmp	r3, #3
    c500:	d00c      	beq.n	c51c <HciDataReadyISR+0xc0>
    c502:	2b04      	cmp	r3, #4
    c504:	d013      	beq.n	c52e <HciDataReadyISR+0xd2>
    c506:	2b01      	cmp	r3, #1
    c508:	d11a      	bne.n	c540 <HciDataReadyISR+0xe4>
		{
			case 0x01:
				g_EMVendorSpecificEvents.EM_ActiveStateEntered++;
    c50a:	4b2e      	ldr	r3, [pc, #184]	; (c5c4 <HciDataReadyISR+0x168>)
    c50c:	681b      	ldr	r3, [r3, #0]
    c50e:	3301      	adds	r3, #1
    c510:	4a2c      	ldr	r2, [pc, #176]	; (c5c4 <HciDataReadyISR+0x168>)
    c512:	6013      	str	r3, [r2, #0]
				am_util_debug_printf("Received EM_ActiveStateEntered Event\n");					
    c514:	482c      	ldr	r0, [pc, #176]	; (c5c8 <HciDataReadyISR+0x16c>)
    c516:	f001 fcaf 	bl	de78 <am_util_stdio_printf>
				break;
    c51a:	e015      	b.n	c548 <HciDataReadyISR+0xec>
			case 0x03:
				g_EMVendorSpecificEvents.EM_TestModeEntered++;
    c51c:	4b29      	ldr	r3, [pc, #164]	; (c5c4 <HciDataReadyISR+0x168>)
    c51e:	685b      	ldr	r3, [r3, #4]
    c520:	3301      	adds	r3, #1
    c522:	4a28      	ldr	r2, [pc, #160]	; (c5c4 <HciDataReadyISR+0x168>)
    c524:	6053      	str	r3, [r2, #4]
				am_util_debug_printf("Received EM_TestModeEntered Event\n");					
    c526:	4829      	ldr	r0, [pc, #164]	; (c5cc <HciDataReadyISR+0x170>)
    c528:	f001 fca6 	bl	de78 <am_util_stdio_printf>
				break;
    c52c:	e00c      	b.n	c548 <HciDataReadyISR+0xec>
			case 0x04:
				g_EMVendorSpecificEvents.EM_HalNotification++;
    c52e:	4b25      	ldr	r3, [pc, #148]	; (c5c4 <HciDataReadyISR+0x168>)
    c530:	689b      	ldr	r3, [r3, #8]
    c532:	3301      	adds	r3, #1
    c534:	4a23      	ldr	r2, [pc, #140]	; (c5c4 <HciDataReadyISR+0x168>)
    c536:	6093      	str	r3, [r2, #8]
				am_util_debug_printf("Received EM_HalNotification Event\n");		
    c538:	4825      	ldr	r0, [pc, #148]	; (c5d0 <HciDataReadyISR+0x174>)
    c53a:	f001 fc9d 	bl	de78 <am_util_stdio_printf>
				break;
    c53e:	e003      	b.n	c548 <HciDataReadyISR+0xec>
			default:
				am_util_debug_printf("Received Unknown Vendor Specific Event from EM9304\n");
    c540:	4824      	ldr	r0, [pc, #144]	; (c5d4 <HciDataReadyISR+0x178>)
    c542:	f001 fc99 	bl	de78 <am_util_stdio_printf>
				break;
    c546:	bf00      	nop
		}
		
		//
		// Reset the packet size to 0 so that this packet will not be processed by the host stack.
		//
		g_ui32HCIPacketSize = 0;
    c548:	4b1a      	ldr	r3, [pc, #104]	; (c5b4 <HciDataReadyISR+0x158>)
    c54a:	2200      	movs	r2, #0
    c54c:	601a      	str	r2, [r3, #0]
	}
		
	if (g_ui32HCIPacketSize > 0)
    c54e:	4b19      	ldr	r3, [pc, #100]	; (c5b4 <HciDataReadyISR+0x158>)
    c550:	681b      	ldr	r3, [r3, #0]
    c552:	2b00      	cmp	r3, #0
    c554:	d01b      	beq.n	c58e <HciDataReadyISR+0x132>
  {
    g_consumed_bytes += hciTrSerialRxIncoming((uint8_t *)g_pui32HCIRXBuffer, g_ui32HCIPacketSize);
    c556:	4b17      	ldr	r3, [pc, #92]	; (c5b4 <HciDataReadyISR+0x158>)
    c558:	681b      	ldr	r3, [r3, #0]
    c55a:	b2db      	uxtb	r3, r3
    c55c:	4619      	mov	r1, r3
    c55e:	4816      	ldr	r0, [pc, #88]	; (c5b8 <HciDataReadyISR+0x15c>)
    c560:	f7fd fa88 	bl	9a74 <hciTrSerialRxIncoming>
    c564:	4603      	mov	r3, r0
    c566:	461a      	mov	r2, r3
    c568:	4b11      	ldr	r3, [pc, #68]	; (c5b0 <HciDataReadyISR+0x154>)
    c56a:	781b      	ldrb	r3, [r3, #0]
    c56c:	4413      	add	r3, r2
    c56e:	b2da      	uxtb	r2, r3
    c570:	4b0f      	ldr	r3, [pc, #60]	; (c5b0 <HciDataReadyISR+0x154>)
    c572:	701a      	strb	r2, [r3, #0]
    if (g_consumed_bytes == g_ui32HCIPacketSize) {
    c574:	4b0e      	ldr	r3, [pc, #56]	; (c5b0 <HciDataReadyISR+0x154>)
    c576:	781b      	ldrb	r3, [r3, #0]
    c578:	461a      	mov	r2, r3
    c57a:	4b0e      	ldr	r3, [pc, #56]	; (c5b4 <HciDataReadyISR+0x158>)
    c57c:	681b      	ldr	r3, [r3, #0]
    c57e:	429a      	cmp	r2, r3
    c580:	d105      	bne.n	c58e <HciDataReadyISR+0x132>
      g_ui32HCIPacketSize = 0;
    c582:	4b0c      	ldr	r3, [pc, #48]	; (c5b4 <HciDataReadyISR+0x158>)
    c584:	2200      	movs	r2, #0
    c586:	601a      	str	r2, [r3, #0]
      g_consumed_bytes = 0;
    c588:	4b09      	ldr	r3, [pc, #36]	; (c5b0 <HciDataReadyISR+0x154>)
    c58a:	2200      	movs	r2, #0
    c58c:	701a      	strb	r2, [r3, #0]
  }

  //
  // Disable IOM SPI pins and turn off the IOM after operation
  //
  am_devices_em9304_spi_sleep(g_sEm9304.ui32IOMModule);
    c58e:	4b0b      	ldr	r3, [pc, #44]	; (c5bc <HciDataReadyISR+0x160>)
    c590:	685b      	ldr	r3, [r3, #4]
    c592:	4618      	mov	r0, r3
    c594:	f7ff fa53 	bl	ba3e <am_devices_em9304_spi_sleep>

  return (g_ui32HCIPacketSize == 0);
    c598:	4b06      	ldr	r3, [pc, #24]	; (c5b4 <HciDataReadyISR+0x158>)
    c59a:	681b      	ldr	r3, [r3, #0]
    c59c:	2b00      	cmp	r3, #0
    c59e:	bf0c      	ite	eq
    c5a0:	2301      	moveq	r3, #1
    c5a2:	2300      	movne	r3, #0
    c5a4:	b2db      	uxtb	r3, r3
}
    c5a6:	4618      	mov	r0, r3
    c5a8:	bd80      	pop	{r7, pc}
    c5aa:	bf00      	nop
    c5ac:	10001bcc 	.word	0x10001bcc
    c5b0:	10001cd4 	.word	0x10001cd4
    c5b4:	10001cd0 	.word	0x10001cd0
    c5b8:	10001bd0 	.word	0x10001bd0
    c5bc:	000115f8 	.word	0x000115f8
    c5c0:	0001ff04 	.word	0x0001ff04
    c5c4:	10001cd8 	.word	0x10001cd8
    c5c8:	00010510 	.word	0x00010510
    c5cc:	00010538 	.word	0x00010538
    c5d0:	0001055c 	.word	0x0001055c
    c5d4:	00010580 	.word	0x00010580

0000c5d8 <HciDrvRadioBoot>:
// Configure the necessary pins and start the EM9304 radio.
//
//*****************************************************************************
void
HciDrvRadioBoot(uint32_t ui32UartModule)
{
    c5d8:	b580      	push	{r7, lr}
    c5da:	b082      	sub	sp, #8
    c5dc:	af00      	add	r7, sp, #0
    c5de:	6078      	str	r0, [r7, #4]
    // disable interrupt during EM9304 initialization.
    am_devices_em9304_disable_interrupt();
    c5e0:	f7ff fac0 	bl	bb64 <am_devices_em9304_disable_interrupt>

    radio_boot_complete = 0;
    c5e4:	4b2b      	ldr	r3, [pc, #172]	; (c694 <HciDrvRadioBoot+0xbc>)
    c5e6:	2200      	movs	r2, #0
    c5e8:	701a      	strb	r2, [r3, #0]
#endif

    //
    // Assert RESET to the EM9304 device.
    //
    am_hal_gpio_pin_config(HCI_APOLLO_RESET_PIN, AM_HAL_GPIO_OUTPUT);
    c5ea:	4b2b      	ldr	r3, [pc, #172]	; (c698 <HciDrvRadioBoot+0xc0>)
    c5ec:	2273      	movs	r2, #115	; 0x73
    c5ee:	601a      	str	r2, [r3, #0]
    c5f0:	4a2a      	ldr	r2, [pc, #168]	; (c69c <HciDrvRadioBoot+0xc4>)
    c5f2:	4b2a      	ldr	r3, [pc, #168]	; (c69c <HciDrvRadioBoot+0xc4>)
    c5f4:	681b      	ldr	r3, [r3, #0]
    c5f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    c5fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c5fe:	6013      	str	r3, [r2, #0]
    c600:	4a27      	ldr	r2, [pc, #156]	; (c6a0 <HciDrvRadioBoot+0xc8>)
    c602:	4b27      	ldr	r3, [pc, #156]	; (c6a0 <HciDrvRadioBoot+0xc8>)
    c604:	681b      	ldr	r3, [r3, #0]
    c606:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    c60a:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
    c60e:	6013      	str	r3, [r2, #0]
    c610:	4b21      	ldr	r3, [pc, #132]	; (c698 <HciDrvRadioBoot+0xc0>)
    c612:	2200      	movs	r2, #0
    c614:	601a      	str	r2, [r3, #0]
    am_hal_gpio_out_bit_clear(HCI_APOLLO_RESET_PIN);
    c616:	4b23      	ldr	r3, [pc, #140]	; (c6a4 <HciDrvRadioBoot+0xcc>)
    c618:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c61c:	601a      	str	r2, [r3, #0]

    //
    // Setup SPI interface for EM9304
    //
    am_devices_em9304_config_pins();
    c61e:	f7ff fa27 	bl	ba70 <am_devices_em9304_config_pins>
    am_devices_em9304_spi_init(g_sEm9304.ui32IOMModule, &g_sEm9304IOMConfigSPI);
    c622:	4b21      	ldr	r3, [pc, #132]	; (c6a8 <HciDrvRadioBoot+0xd0>)
    c624:	685b      	ldr	r3, [r3, #4]
    c626:	4921      	ldr	r1, [pc, #132]	; (c6ac <HciDrvRadioBoot+0xd4>)
    c628:	4618      	mov	r0, r3
    c62a:	f7ff f9c1 	bl	b9b0 <am_devices_em9304_spi_init>
  
    //
    // Enable the IOM and GPIO interrupt handlers.
    //
    am_hal_gpio_out_bit_set(HCI_APOLLO_RESET_PIN);
    c62e:	4b20      	ldr	r3, [pc, #128]	; (c6b0 <HciDrvRadioBoot+0xd8>)
    c630:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c634:	601a      	str	r2, [r3, #0]

    //
    // Delay for 20ms to make sure the em device gets ready for commands.
    //
    am_util_delay_ms(20);
    c636:	2014      	movs	r0, #20
    c638:	f000 fd00 	bl	d03c <am_util_delay_ms>

    //
    // Initialize the EM9304.
    //
    initEM9304();
    c63c:	f7ff fe9e 	bl	c37c <initEM9304>

    // delay here to make sure EM9304 is ready for operation after
    // patch is loaded.
    am_util_delay_ms(20);
    c640:	2014      	movs	r0, #20
    c642:	f000 fcfb 	bl	d03c <am_util_delay_ms>
    // Set the MAC address. Use the CHIPID1 register for additional
    // randomization if the config file requested it.
    //
    if (HCI_APOLLO_USE_CHIPID_FOR_MAC)
    {
        g_pui8BLEMacAddress[0] = AM_REG(MCUCTRL, CHIPID1);
    c646:	4b1b      	ldr	r3, [pc, #108]	; (c6b4 <HciDrvRadioBoot+0xdc>)
    c648:	681b      	ldr	r3, [r3, #0]
    c64a:	b2da      	uxtb	r2, r3
    c64c:	4b1a      	ldr	r3, [pc, #104]	; (c6b8 <HciDrvRadioBoot+0xe0>)
    c64e:	701a      	strb	r2, [r3, #0]
        g_pui8BLEMacAddress[1] = AM_REG(MCUCTRL, CHIPID1) >> 8;
    c650:	4b18      	ldr	r3, [pc, #96]	; (c6b4 <HciDrvRadioBoot+0xdc>)
    c652:	681b      	ldr	r3, [r3, #0]
    c654:	0a1b      	lsrs	r3, r3, #8
    c656:	b2da      	uxtb	r2, r3
    c658:	4b17      	ldr	r3, [pc, #92]	; (c6b8 <HciDrvRadioBoot+0xe0>)
    c65a:	705a      	strb	r2, [r3, #1]
        g_pui8BLEMacAddress[2] = AM_REG(MCUCTRL, CHIPID1) >> 16;
    c65c:	4b15      	ldr	r3, [pc, #84]	; (c6b4 <HciDrvRadioBoot+0xdc>)
    c65e:	681b      	ldr	r3, [r3, #0]
    c660:	0c1b      	lsrs	r3, r3, #16
    c662:	b2da      	uxtb	r2, r3
    c664:	4b14      	ldr	r3, [pc, #80]	; (c6b8 <HciDrvRadioBoot+0xe0>)
    c666:	709a      	strb	r2, [r3, #2]
    }

    am_devices_em9304_mac_set(g_pui8BLEMacAddress);
    c668:	4813      	ldr	r0, [pc, #76]	; (c6b8 <HciDrvRadioBoot+0xe0>)
    c66a:	f7ff fa51 	bl	bb10 <am_devices_em9304_mac_set>

    // Initialization of the EM9304 is complete.
    radio_boot_complete = 1;
    c66e:	4b09      	ldr	r3, [pc, #36]	; (c694 <HciDrvRadioBoot+0xbc>)
    c670:	2201      	movs	r2, #1
    c672:	701a      	strb	r2, [r3, #0]
    g_ui32HCIPacketSize = 0;
    c674:	4b11      	ldr	r3, [pc, #68]	; (c6bc <HciDrvRadioBoot+0xe4>)
    c676:	2200      	movs	r2, #0
    c678:	601a      	str	r2, [r3, #0]
    g_consumed_bytes    = 0;
    c67a:	4b11      	ldr	r3, [pc, #68]	; (c6c0 <HciDrvRadioBoot+0xe8>)
    c67c:	2200      	movs	r2, #0
    c67e:	701a      	strb	r2, [r3, #0]
    am_util_debug_printf("HciDrvRadioBoot complete\n");
    c680:	4810      	ldr	r0, [pc, #64]	; (c6c4 <HciDrvRadioBoot+0xec>)
    c682:	f001 fbf9 	bl	de78 <am_util_stdio_printf>

    // enable interrupt after EM9304 initialization is done.
    am_devices_em9304_enable_interrupt();
    c686:	f7ff fa63 	bl	bb50 <am_devices_em9304_enable_interrupt>
}
    c68a:	bf00      	nop
    c68c:	3708      	adds	r7, #8
    c68e:	46bd      	mov	sp, r7
    c690:	bd80      	pop	{r7, pc}
    c692:	bf00      	nop
    c694:	10001bcc 	.word	0x10001bcc
    c698:	40010060 	.word	0x40010060
    c69c:	40010054 	.word	0x40010054
    c6a0:	40010028 	.word	0x40010028
    c6a4:	4001009c 	.word	0x4001009c
    c6a8:	000115f8 	.word	0x000115f8
    c6ac:	000115ec 	.word	0x000115ec
    c6b0:	40010094 	.word	0x40010094
    c6b4:	40020008 	.word	0x40020008
    c6b8:	100010f4 	.word	0x100010f4
    c6bc:	10001cd0 	.word	0x10001cd0
    c6c0:	10001cd4 	.word	0x10001cd4
    c6c4:	000105b4 	.word	0x000105b4

0000c6c8 <HciVsEM_SetRfPowerLevelEx>:
 *
 *  \return true when success, otherwise false
 */
/*************************************************************************************************/
uint32_t HciVsEM_SetRfPowerLevelEx(txPowerLevel_t txPowerlevel)
{
    c6c8:	b580      	push	{r7, lr}
    c6ca:	b084      	sub	sp, #16
    c6cc:	af00      	add	r7, sp, #0
    c6ce:	4603      	mov	r3, r0
    c6d0:	71fb      	strb	r3, [r7, #7]
  // make sure it's 8 bit
  uint8_t tx_power_level = (uint8_t)txPowerlevel;
    c6d2:	79fb      	ldrb	r3, [r7, #7]
    c6d4:	73fb      	strb	r3, [r7, #15]

  if(tx_power_level < TX_POWER_LEVEL_INVALID) {
    c6d6:	7bfb      	ldrb	r3, [r7, #15]
    c6d8:	2b11      	cmp	r3, #17
    c6da:	d809      	bhi.n	c6f0 <HciVsEM_SetRfPowerLevelEx+0x28>
    HciVendorSpecificCmd(0xFC26, sizeof(tx_power_level), &tx_power_level);
    c6dc:	f107 030f 	add.w	r3, r7, #15
    c6e0:	461a      	mov	r2, r3
    c6e2:	2101      	movs	r1, #1
    c6e4:	f64f 4026 	movw	r0, #64550	; 0xfc26
    c6e8:	f7fa fdaf 	bl	724a <HciVendorSpecificCmd>
    return true;
    c6ec:	2301      	movs	r3, #1
    c6ee:	e000      	b.n	c6f2 <HciVsEM_SetRfPowerLevelEx+0x2a>
  }
  else {
    return false;
    c6f0:	2300      	movs	r3, #0
  }

}
    c6f2:	4618      	mov	r0, r3
    c6f4:	3710      	adds	r7, #16
    c6f6:	46bd      	mov	sp, r7
    c6f8:	bd80      	pop	{r7, pc}

0000c6fa <AppDbInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbInit(void)
{
    c6fa:	b480      	push	{r7}
    c6fc:	af00      	add	r7, sp, #0
  return;
    c6fe:	bf00      	nop
}
    c700:	46bd      	mov	sp, r7
    c702:	f85d 7b04 	ldr.w	r7, [sp], #4
    c706:	4770      	bx	lr

0000c708 <appUiTimerExpired>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appUiTimerExpired(wsfMsgHdr_t *pMsg)
{
    c708:	b480      	push	{r7}
    c70a:	b083      	sub	sp, #12
    c70c:	af00      	add	r7, sp, #0
    c70e:	6078      	str	r0, [r7, #4]

}
    c710:	bf00      	nop
    c712:	370c      	adds	r7, #12
    c714:	46bd      	mov	sp, r7
    c716:	f85d 7b04 	ldr.w	r7, [sp], #4
    c71a:	4770      	bx	lr

0000c71c <appUiBtnPoll>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appUiBtnPoll(void)
{
    c71c:	b480      	push	{r7}
    c71e:	af00      	add	r7, sp, #0

}
    c720:	bf00      	nop
    c722:	46bd      	mov	sp, r7
    c724:	f85d 7b04 	ldr.w	r7, [sp], #4
    c728:	4770      	bx	lr

0000c72a <AppUiBtnPressed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiBtnPressed(void)
{
    c72a:	b480      	push	{r7}
    c72c:	af00      	add	r7, sp, #0

}
    c72e:	bf00      	nop
    c730:	46bd      	mov	sp, r7
    c732:	f85d 7b04 	ldr.w	r7, [sp], #4
    c736:	4770      	bx	lr

0000c738 <AppUiBtnTest>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiBtnTest(uint8_t btn)
{
    c738:	b580      	push	{r7, lr}
    c73a:	b082      	sub	sp, #8
    c73c:	af00      	add	r7, sp, #0
    c73e:	4603      	mov	r3, r0
    c740:	71fb      	strb	r3, [r7, #7]
  if(appUiBtn.cback) {
    c742:	4b06      	ldr	r3, [pc, #24]	; (c75c <AppUiBtnTest+0x24>)
    c744:	681b      	ldr	r3, [r3, #0]
    c746:	2b00      	cmp	r3, #0
    c748:	d004      	beq.n	c754 <AppUiBtnTest+0x1c>
    (*appUiBtn.cback)(btn);
    c74a:	4b04      	ldr	r3, [pc, #16]	; (c75c <AppUiBtnTest+0x24>)
    c74c:	681b      	ldr	r3, [r3, #0]
    c74e:	79fa      	ldrb	r2, [r7, #7]
    c750:	4610      	mov	r0, r2
    c752:	4798      	blx	r3
  }
}
    c754:	bf00      	nop
    c756:	3708      	adds	r7, #8
    c758:	46bd      	mov	sp, r7
    c75a:	bd80      	pop	{r7, pc}
    c75c:	10001cf4 	.word	0x10001cf4

0000c760 <HciEvtRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciEvtRegister(hciEvtCback_t evtCback)
{
    c760:	b480      	push	{r7}
    c762:	b083      	sub	sp, #12
    c764:	af00      	add	r7, sp, #0
    c766:	6078      	str	r0, [r7, #4]
  hciCb.evtCback = evtCback;
    c768:	4a04      	ldr	r2, [pc, #16]	; (c77c <HciEvtRegister+0x1c>)
    c76a:	687b      	ldr	r3, [r7, #4]
    c76c:	6093      	str	r3, [r2, #8]
}
    c76e:	bf00      	nop
    c770:	370c      	adds	r7, #12
    c772:	46bd      	mov	sp, r7
    c774:	f85d 7b04 	ldr.w	r7, [sp], #4
    c778:	4770      	bx	lr
    c77a:	bf00      	nop
    c77c:	100028f4 	.word	0x100028f4

0000c780 <HciSecRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSecRegister(hciSecCback_t secCback)
{
    c780:	b480      	push	{r7}
    c782:	b083      	sub	sp, #12
    c784:	af00      	add	r7, sp, #0
    c786:	6078      	str	r0, [r7, #4]
  hciCb.secCback = secCback;
    c788:	4a04      	ldr	r2, [pc, #16]	; (c79c <HciSecRegister+0x1c>)
    c78a:	687b      	ldr	r3, [r7, #4]
    c78c:	60d3      	str	r3, [r2, #12]
}
    c78e:	bf00      	nop
    c790:	370c      	adds	r7, #12
    c792:	46bd      	mov	sp, r7
    c794:	f85d 7b04 	ldr.w	r7, [sp], #4
    c798:	4770      	bx	lr
    c79a:	bf00      	nop
    c79c:	100028f4 	.word	0x100028f4

0000c7a0 <HciAclRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciAclRegister(hciAclCback_t aclCback, hciFlowCback_t flowCback)
{
    c7a0:	b480      	push	{r7}
    c7a2:	b083      	sub	sp, #12
    c7a4:	af00      	add	r7, sp, #0
    c7a6:	6078      	str	r0, [r7, #4]
    c7a8:	6039      	str	r1, [r7, #0]
  hciCb.aclCback = aclCback;
    c7aa:	4a06      	ldr	r2, [pc, #24]	; (c7c4 <HciAclRegister+0x24>)
    c7ac:	687b      	ldr	r3, [r7, #4]
    c7ae:	6113      	str	r3, [r2, #16]
  hciCb.flowCback = flowCback;
    c7b0:	4a04      	ldr	r2, [pc, #16]	; (c7c4 <HciAclRegister+0x24>)
    c7b2:	683b      	ldr	r3, [r7, #0]
    c7b4:	6153      	str	r3, [r2, #20]
}
    c7b6:	bf00      	nop
    c7b8:	370c      	adds	r7, #12
    c7ba:	46bd      	mov	sp, r7
    c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7c0:	4770      	bx	lr
    c7c2:	bf00      	nop
    c7c4:	100028f4 	.word	0x100028f4

0000c7c8 <HciHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciHandlerInit(wsfHandlerId_t handlerId)
{
    c7c8:	b580      	push	{r7, lr}
    c7ca:	b082      	sub	sp, #8
    c7cc:	af00      	add	r7, sp, #0
    c7ce:	4603      	mov	r3, r0
    c7d0:	71fb      	strb	r3, [r7, #7]
  /* store handler ID */
  hciCb.handlerId = handlerId;
    c7d2:	4a07      	ldr	r2, [pc, #28]	; (c7f0 <HciHandlerInit+0x28>)
    c7d4:	79fb      	ldrb	r3, [r7, #7]
    c7d6:	7613      	strb	r3, [r2, #24]

  /* init rx queue */
  WSF_QUEUE_INIT(&hciCb.rxQueue);
    c7d8:	4b05      	ldr	r3, [pc, #20]	; (c7f0 <HciHandlerInit+0x28>)
    c7da:	2200      	movs	r2, #0
    c7dc:	601a      	str	r2, [r3, #0]
    c7de:	4b04      	ldr	r3, [pc, #16]	; (c7f0 <HciHandlerInit+0x28>)
    c7e0:	2200      	movs	r2, #0
    c7e2:	605a      	str	r2, [r3, #4]
    
  /* perform other hci initialization */
  HciCoreInit();
    c7e4:	f7fb f8d4 	bl	7990 <HciCoreInit>
}
    c7e8:	bf00      	nop
    c7ea:	3708      	adds	r7, #8
    c7ec:	46bd      	mov	sp, r7
    c7ee:	bd80      	pop	{r7, pc}
    c7f0:	100028f4 	.word	0x100028f4

0000c7f4 <HciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
    c7f4:	b580      	push	{r7, lr}
    c7f6:	b082      	sub	sp, #8
    c7f8:	af00      	add	r7, sp, #0
    c7fa:	4603      	mov	r3, r0
    c7fc:	6039      	str	r1, [r7, #0]
    c7fe:	71fb      	strb	r3, [r7, #7]
  HciCoreHandler(event, pMsg);
    c800:	79fb      	ldrb	r3, [r7, #7]
    c802:	6839      	ldr	r1, [r7, #0]
    c804:	4618      	mov	r0, r3
    c806:	f7fb fa2d 	bl	7c64 <HciCoreHandler>
}
    c80a:	bf00      	nop
    c80c:	3708      	adds	r7, #8
    c80e:	46bd      	mov	sp, r7
    c810:	bd80      	pop	{r7, pc}
	...

0000c814 <ble_data_ready_handler>:
//
//*****************************************************************************
uint32_t g_ui32LastTime = 0;

void ble_data_ready_handler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
    c814:	b580      	push	{r7, lr}
    c816:	b082      	sub	sp, #8
    c818:	af00      	add	r7, sp, #0
    c81a:	4603      	mov	r3, r0
    c81c:	6039      	str	r1, [r7, #0]
    c81e:	71fb      	strb	r3, [r7, #7]
    if (FALSE == HciDataReadyISR()) {
    c820:	f7ff fe1c 	bl	c45c <HciDataReadyISR>
    c824:	4603      	mov	r3, r0
    c826:	2b00      	cmp	r3, #0
    c828:	d105      	bne.n	c836 <ble_data_ready_handler+0x22>
        // trigger event again to handle pending data from BLE controller
        WsfSetEvent(g_bleDataReadyHandlerId, BLE_DATA_READY_EVENT);
    c82a:	4b05      	ldr	r3, [pc, #20]	; (c840 <ble_data_ready_handler+0x2c>)
    c82c:	781b      	ldrb	r3, [r3, #0]
    c82e:	2101      	movs	r1, #1
    c830:	4618      	mov	r0, r3
    c832:	f7fd fc39 	bl	a0a8 <WsfSetEvent>
    }
}
    c836:	bf00      	nop
    c838:	3708      	adds	r7, #8
    c83a:	46bd      	mov	sp, r7
    c83c:	bd80      	pop	{r7, pc}
    c83e:	bf00      	nop
    c840:	10002910 	.word	0x10002910

0000c844 <exactle_stack_init>:
// Initialization for the ExactLE stack.
//
//*****************************************************************************
void
exactle_stack_init(void)
{
    c844:	b580      	push	{r7, lr}
    c846:	b082      	sub	sp, #8
    c848:	af00      	add	r7, sp, #0
    wsfHandlerId_t handlerId;

    //
    // Set up timers for the WSF scheduler.
    //
    scheduler_timer_init();
    c84a:	f000 f891 	bl	c970 <scheduler_timer_init>
    WsfTimerInit();
    c84e:	f7fe fc8f 	bl	b170 <WsfTimerInit>

    //
    // Initialize a buffer pool for WSF dynamic memory needs.
    //
    WsfBufInit(sizeof(g_pui32BufMem), (uint8_t*)g_pui32BufMem, WSF_BUF_POOLS, g_psPoolDescriptors);
    c852:	4b3b      	ldr	r3, [pc, #236]	; (c940 <exactle_stack_init+0xfc>)
    c854:	2204      	movs	r2, #4
    c856:	493b      	ldr	r1, [pc, #236]	; (c944 <exactle_stack_init+0x100>)
    c858:	f44f 6000 	mov.w	r0, #2048	; 0x800
    c85c:	f7fe f9a6 	bl	abac <WsfBufInit>

    //
    // Initialize security.
    //
    SecInit();
    c860:	f7fe f96a 	bl	ab38 <SecInit>
    SecAesInit();
    c864:	f7fd fe62 	bl	a52c <SecAesInit>
    SecCmacInit();
    c868:	f7fe f834 	bl	a8d4 <SecCmacInit>
    SecEccInit();
    c86c:	f7fe f8fa 	bl	aa64 <SecEccInit>

    //
    // Set up callback functions for the various layers of the ExactLE stack.
    //
    handlerId = WsfOsSetNextHandler(HciHandler);
    c870:	4835      	ldr	r0, [pc, #212]	; (c948 <exactle_stack_init+0x104>)
    c872:	f7fd fc75 	bl	a160 <WsfOsSetNextHandler>
    c876:	4603      	mov	r3, r0
    c878:	71fb      	strb	r3, [r7, #7]
    HciHandlerInit(handlerId);
    c87a:	79fb      	ldrb	r3, [r7, #7]
    c87c:	4618      	mov	r0, r3
    c87e:	f7ff ffa3 	bl	c7c8 <HciHandlerInit>

    handlerId = WsfOsSetNextHandler(DmHandler);
    c882:	4832      	ldr	r0, [pc, #200]	; (c94c <exactle_stack_init+0x108>)
    c884:	f7fd fc6c 	bl	a160 <WsfOsSetNextHandler>
    c888:	4603      	mov	r3, r0
    c88a:	71fb      	strb	r3, [r7, #7]
    DmDevVsInit(0);
    c88c:	2000      	movs	r0, #0
    c88e:	f7f6 fcac 	bl	31ea <DmDevVsInit>
    DmAdvInit();
    c892:	f7f5 ff2f 	bl	26f4 <DmAdvInit>
    DmConnInit();
    c896:	f7f6 f9b7 	bl	2c08 <DmConnInit>
    DmConnSlaveInit();
    c89a:	f7f6 fbfb 	bl	3094 <DmConnSlaveInit>
    DmSecInit();
    c89e:	f7f6 ffe6 	bl	386e <DmSecInit>
    DmSecLescInit();
    c8a2:	f7f7 f8fd 	bl	3aa0 <DmSecLescInit>
    DmPrivInit();
    c8a6:	f7f6 fe41 	bl	352c <DmPrivInit>
    DmHandlerInit(handlerId);
    c8aa:	79fb      	ldrb	r3, [r7, #7]
    c8ac:	4618      	mov	r0, r3
    c8ae:	f7f6 fcf1 	bl	3294 <DmHandlerInit>

    handlerId = WsfOsSetNextHandler(L2cSlaveHandler);
    c8b2:	4827      	ldr	r0, [pc, #156]	; (c950 <exactle_stack_init+0x10c>)
    c8b4:	f7fd fc54 	bl	a160 <WsfOsSetNextHandler>
    c8b8:	4603      	mov	r3, r0
    c8ba:	71fb      	strb	r3, [r7, #7]
    L2cSlaveHandlerInit(handlerId);
    c8bc:	79fb      	ldrb	r3, [r7, #7]
    c8be:	4618      	mov	r0, r3
    c8c0:	f7f7 fa3a 	bl	3d38 <L2cSlaveHandlerInit>
    L2cInit();
    c8c4:	f7f7 f96b 	bl	3b9e <L2cInit>
    L2cSlaveInit();
    c8c8:	f7f7 f9f0 	bl	3cac <L2cSlaveInit>

    handlerId = WsfOsSetNextHandler(AttHandler);
    c8cc:	4821      	ldr	r0, [pc, #132]	; (c954 <exactle_stack_init+0x110>)
    c8ce:	f7fd fc47 	bl	a160 <WsfOsSetNextHandler>
    c8d2:	4603      	mov	r3, r0
    c8d4:	71fb      	strb	r3, [r7, #7]
    AttHandlerInit(handlerId);
    c8d6:	79fb      	ldrb	r3, [r7, #7]
    c8d8:	4618      	mov	r0, r3
    c8da:	f7f3 fc8c 	bl	1f6 <AttHandlerInit>
    AttsInit();
    c8de:	f7f4 fcdf 	bl	12a0 <AttsInit>
    AttsIndInit();
    c8e2:	f7f4 fbed 	bl	10c0 <AttsIndInit>
    AttcInit();
    c8e6:	f7f3 feed 	bl	6c4 <AttcInit>

    handlerId = WsfOsSetNextHandler(SmpHandler);
    c8ea:	481b      	ldr	r0, [pc, #108]	; (c958 <exactle_stack_init+0x114>)
    c8ec:	f7fd fc38 	bl	a160 <WsfOsSetNextHandler>
    c8f0:	4603      	mov	r3, r0
    c8f2:	71fb      	strb	r3, [r7, #7]
    SmpHandlerInit(handlerId);
    c8f4:	79fb      	ldrb	r3, [r7, #7]
    c8f6:	4618      	mov	r0, r3
    c8f8:	f7f7 fca4 	bl	4244 <SmpHandlerInit>
    SmprInit();
    c8fc:	f7f8 faba 	bl	4e74 <SmprInit>
    SmprScInit();
    c900:	f7f8 fa9c 	bl	4e3c <SmprScInit>
    HciSetMaxRxAclLen(251);
    c904:	20fb      	movs	r0, #251	; 0xfb
    c906:	f7fb f887 	bl	7a18 <HciSetMaxRxAclLen>

    handlerId = WsfOsSetNextHandler(AppHandler);
    c90a:	4814      	ldr	r0, [pc, #80]	; (c95c <exactle_stack_init+0x118>)
    c90c:	f7fd fc28 	bl	a160 <WsfOsSetNextHandler>
    c910:	4603      	mov	r3, r0
    c912:	71fb      	strb	r3, [r7, #7]
    AppHandlerInit(handlerId);
    c914:	79fb      	ldrb	r3, [r7, #7]
    c916:	4618      	mov	r0, r3
    c918:	f7fd fd4a 	bl	a3b0 <AppHandlerInit>

    g_bleDataReadyHandlerId = WsfOsSetNextHandler(ble_data_ready_handler);
    c91c:	4810      	ldr	r0, [pc, #64]	; (c960 <exactle_stack_init+0x11c>)
    c91e:	f7fd fc1f 	bl	a160 <WsfOsSetNextHandler>
    c922:	4603      	mov	r3, r0
    c924:	461a      	mov	r2, r3
    c926:	4b0f      	ldr	r3, [pc, #60]	; (c964 <exactle_stack_init+0x120>)
    c928:	701a      	strb	r2, [r3, #0]

    ButtonHandlerId = WsfOsSetNextHandler(button_handler);
    c92a:	480f      	ldr	r0, [pc, #60]	; (c968 <exactle_stack_init+0x124>)
    c92c:	f7fd fc18 	bl	a160 <WsfOsSetNextHandler>
    c930:	4603      	mov	r3, r0
    c932:	461a      	mov	r2, r3
    c934:	4b0d      	ldr	r3, [pc, #52]	; (c96c <exactle_stack_init+0x128>)
    c936:	701a      	strb	r2, [r3, #0]
}
    c938:	bf00      	nop
    c93a:	3708      	adds	r7, #8
    c93c:	46bd      	mov	sp, r7
    c93e:	bd80      	pop	{r7, pc}
    c940:	100010fc 	.word	0x100010fc
    c944:	10001cf8 	.word	0x10001cf8
    c948:	0000c7f5 	.word	0x0000c7f5
    c94c:	000032b1 	.word	0x000032b1
    c950:	00003d49 	.word	0x00003d49
    c954:	00000231 	.word	0x00000231
    c958:	00004289 	.word	0x00004289
    c95c:	0000a3d1 	.word	0x0000a3d1
    c960:	0000c815 	.word	0x0000c815
    c964:	10002910 	.word	0x10002910
    c968:	0000ca85 	.word	0x0000ca85
    c96c:	10002911 	.word	0x10002911

0000c970 <scheduler_timer_init>:
// Set up a pair of timers to handle the WSF scheduler.
//
//*****************************************************************************
void
scheduler_timer_init(void)
{
    c970:	b580      	push	{r7, lr}
    c972:	af00      	add	r7, sp, #0
    //
    // One of the timers will run in one-shot mode and provide interrupts for
    // scheduled events.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
    c974:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c978:	2000      	movs	r0, #0
    c97a:	f001 fc0f 	bl	e19c <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(0, AM_HAL_CTIMER_TIMERA,
    c97e:	f44f 7205 	mov.w	r2, #532	; 0x214
    c982:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c986:	2000      	movs	r0, #0
    c988:	f001 fbce 	bl	e128 <am_hal_ctimer_config_single>
                                 AM_HAL_CTIMER_FN_ONCE));

    //
    // The other timer will run continuously and provide a constant time-base.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERB);
    c98c:	490a      	ldr	r1, [pc, #40]	; (c9b8 <scheduler_timer_init+0x48>)
    c98e:	2000      	movs	r0, #0
    c990:	f001 fc04 	bl	e19c <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(0, AM_HAL_CTIMER_TIMERB,
    c994:	f44f 728a 	mov.w	r2, #276	; 0x114
    c998:	4907      	ldr	r1, [pc, #28]	; (c9b8 <scheduler_timer_init+0x48>)
    c99a:	2000      	movs	r0, #0
    c99c:	f001 fbc4 	bl	e128 <am_hal_ctimer_config_single>
                                 AM_HAL_CTIMER_FN_CONTINUOUS));

    //
    // Start the continuous timer.
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERB);
    c9a0:	4905      	ldr	r1, [pc, #20]	; (c9b8 <scheduler_timer_init+0x48>)
    c9a2:	2000      	movs	r0, #0
    c9a4:	f001 fbdc 	bl	e160 <am_hal_ctimer_start>

    //
    // Enable the timer interrupt.
    //
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    c9a8:	2001      	movs	r0, #1
    c9aa:	f001 fc95 	bl	e2d8 <am_hal_ctimer_int_enable>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_CTIMER);
    c9ae:	201a      	movs	r0, #26
    c9b0:	f001 fd8a 	bl	e4c8 <am_hal_interrupt_enable>
}
    c9b4:	bf00      	nop
    c9b6:	bd80      	pop	{r7, pc}
    c9b8:	ffff0000 	.word	0xffff0000

0000c9bc <update_scheduler_timers>:
// Calculate the elapsed time, and update the WSF software timers.
//
//*****************************************************************************
void
update_scheduler_timers(void)
{
    c9bc:	b580      	push	{r7, lr}
    c9be:	b082      	sub	sp, #8
    c9c0:	af00      	add	r7, sp, #0
    uint32_t ui32CurrentTime, ui32ElapsedTime;

    //
    // Read the continuous timer.
    //
    ui32CurrentTime = am_hal_ctimer_read(0, AM_HAL_CTIMER_TIMERB);
    c9c2:	4914      	ldr	r1, [pc, #80]	; (ca14 <update_scheduler_timers+0x58>)
    c9c4:	2000      	movs	r0, #0
    c9c6:	f001 fbf3 	bl	e1b0 <am_hal_ctimer_read>
    c9ca:	6078      	str	r0, [r7, #4]
    //
    // Figure out how long it has been since the last time we've read the
    // continuous timer. We should be reading often enough that we'll never
    // have more than one overflow.
    //
    ui32ElapsedTime = (ui32CurrentTime >= g_ui32LastTime ?
    c9cc:	4b12      	ldr	r3, [pc, #72]	; (ca18 <update_scheduler_timers+0x5c>)
    c9ce:	681b      	ldr	r3, [r3, #0]
                       (ui32CurrentTime - g_ui32LastTime) :
    c9d0:	687a      	ldr	r2, [r7, #4]
    c9d2:	429a      	cmp	r2, r3
    c9d4:	d304      	bcc.n	c9e0 <update_scheduler_timers+0x24>
    c9d6:	4b10      	ldr	r3, [pc, #64]	; (ca18 <update_scheduler_timers+0x5c>)
    c9d8:	681b      	ldr	r3, [r3, #0]
    c9da:	687a      	ldr	r2, [r7, #4]
    c9dc:	1ad3      	subs	r3, r2, r3
    c9de:	e005      	b.n	c9ec <update_scheduler_timers+0x30>
                       (0x10000 + ui32CurrentTime - g_ui32LastTime));
    c9e0:	4b0d      	ldr	r3, [pc, #52]	; (ca18 <update_scheduler_timers+0x5c>)
    c9e2:	681b      	ldr	r3, [r3, #0]
    c9e4:	687a      	ldr	r2, [r7, #4]
    c9e6:	1ad3      	subs	r3, r2, r3
                       (ui32CurrentTime - g_ui32LastTime) :
    c9e8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    ui32ElapsedTime = (ui32CurrentTime >= g_ui32LastTime ?
    c9ec:	603b      	str	r3, [r7, #0]

    //
    // Check to see if any WSF ticks need to happen.
    //
    if ( (ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS) > 0 )
    c9ee:	683b      	ldr	r3, [r7, #0]
    c9f0:	2b04      	cmp	r3, #4
    c9f2:	d90a      	bls.n	ca0a <update_scheduler_timers+0x4e>
    {
        //
        // Update the WSF timers and save the current time as our "last
        // update".
        //
        WsfTimerUpdate(ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS);
    c9f4:	683b      	ldr	r3, [r7, #0]
    c9f6:	4a09      	ldr	r2, [pc, #36]	; (ca1c <update_scheduler_timers+0x60>)
    c9f8:	fba2 2303 	umull	r2, r3, r2, r3
    c9fc:	089b      	lsrs	r3, r3, #2
    c9fe:	4618      	mov	r0, r3
    ca00:	f7fe fbfc 	bl	b1fc <WsfTimerUpdate>

        g_ui32LastTime = ui32CurrentTime;
    ca04:	4a04      	ldr	r2, [pc, #16]	; (ca18 <update_scheduler_timers+0x5c>)
    ca06:	687b      	ldr	r3, [r7, #4]
    ca08:	6013      	str	r3, [r2, #0]
    }
}
    ca0a:	bf00      	nop
    ca0c:	3708      	adds	r7, #8
    ca0e:	46bd      	mov	sp, r7
    ca10:	bd80      	pop	{r7, pc}
    ca12:	bf00      	nop
    ca14:	ffff0000 	.word	0xffff0000
    ca18:	100024fc 	.word	0x100024fc
    ca1c:	cccccccd 	.word	0xcccccccd

0000ca20 <set_next_wakeup>:
// Set a timer interrupt for the next upcoming scheduler event.
//
//*****************************************************************************
void
set_next_wakeup(void)
{
    ca20:	b580      	push	{r7, lr}
    ca22:	b082      	sub	sp, #8
    ca24:	af00      	add	r7, sp, #0
    wsfTimerTicks_t xNextExpiration;

    //
    // Stop and clear the scheduling timer.
    //
    am_hal_ctimer_stop(0, AM_HAL_CTIMER_TIMERA);
    ca26:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ca2a:	2000      	movs	r0, #0
    ca2c:	f001 fbaa 	bl	e184 <am_hal_ctimer_stop>
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
    ca30:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ca34:	2000      	movs	r0, #0
    ca36:	f001 fbb1 	bl	e19c <am_hal_ctimer_clear>

    //
    // Check to see when the next timer expiration should happen.
    //
    xNextExpiration = WsfTimerNextExpiration(&bTimerRunning);
    ca3a:	1cfb      	adds	r3, r7, #3
    ca3c:	4618      	mov	r0, r3
    ca3e:	f7fe fc0b 	bl	b258 <WsfTimerNextExpiration>
    ca42:	6078      	str	r0, [r7, #4]
    //
    // If there's a pending WSF timer event, set an interrupt to wake us up in
    // time to service it. Otherwise, set an interrupt to wake us up in time to
    // prevent a double-overflow of our continuous timer.
    //
    if ( xNextExpiration )
    ca44:	687b      	ldr	r3, [r7, #4]
    ca46:	2b00      	cmp	r3, #0
    ca48:	d00a      	beq.n	ca60 <set_next_wakeup+0x40>
    {
        am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA,
    ca4a:	687a      	ldr	r2, [r7, #4]
    ca4c:	4613      	mov	r3, r2
    ca4e:	009b      	lsls	r3, r3, #2
    ca50:	441a      	add	r2, r3
    ca52:	2300      	movs	r3, #0
    ca54:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ca58:	2000      	movs	r0, #0
    ca5a:	f001 fbff 	bl	e25c <am_hal_ctimer_period_set>
    ca5e:	e007      	b.n	ca70 <set_next_wakeup+0x50>
                                 xNextExpiration * CLK_TICKS_PER_WSF_TICKS, 0);
    }
    else
    {
        am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, 0x8000, 0);
    ca60:	2300      	movs	r3, #0
    ca62:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    ca66:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ca6a:	2000      	movs	r0, #0
    ca6c:	f001 fbf6 	bl	e25c <am_hal_ctimer_period_set>
    }

    //
    // Start the scheduling timer.
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    ca70:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ca74:	2000      	movs	r0, #0
    ca76:	f001 fb73 	bl	e160 <am_hal_ctimer_start>
}
    ca7a:	bf00      	nop
    ca7c:	3708      	adds	r7, #8
    ca7e:	46bd      	mov	sp, r7
    ca80:	bd80      	pop	{r7, pc}
	...

0000ca84 <button_handler>:
// Poll the buttons.
//
//*****************************************************************************
void
button_handler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
    ca84:	b580      	push	{r7, lr}
    ca86:	b082      	sub	sp, #8
    ca88:	af00      	add	r7, sp, #0
    ca8a:	4603      	mov	r3, r0
    ca8c:	6039      	str	r1, [r7, #0]
    ca8e:	71fb      	strb	r3, [r7, #7]
    //
    // Restart the button timer.
    //
    WsfTimerStartMs(&ButtonTimer, 10);
    ca90:	210a      	movs	r1, #10
    ca92:	4870      	ldr	r0, [pc, #448]	; (cc54 <button_handler+0x1d0>)
    ca94:	f7fe fb8e 	bl	b1b4 <WsfTimerStartMs>

    //
    // Every time we get a button timer tick, check all of our buttons.
    //
    am_devices_button_array_tick(am_bsp_psButtons, AM_BSP_NUM_BUTTONS);
    ca98:	2103      	movs	r1, #3
    ca9a:	486f      	ldr	r0, [pc, #444]	; (cc58 <button_handler+0x1d4>)
    ca9c:	f7fe fd84 	bl	b5a8 <am_devices_button_array_tick>

    //
    // If we got a a press, do something with it.
    //
    if ( am_devices_button_released(am_bsp_psButtons[0]) )
    caa0:	4b6d      	ldr	r3, [pc, #436]	; (cc58 <button_handler+0x1d4>)
    caa2:	7b1b      	ldrb	r3, [r3, #12]
    caa4:	f083 0301 	eor.w	r3, r3, #1
    caa8:	b2db      	uxtb	r3, r3
    caaa:	2b00      	cmp	r3, #0
    caac:	d009      	beq.n	cac2 <button_handler+0x3e>
    caae:	4b6a      	ldr	r3, [pc, #424]	; (cc58 <button_handler+0x1d4>)
    cab0:	7b5b      	ldrb	r3, [r3, #13]
    cab2:	2b00      	cmp	r3, #0
    cab4:	d005      	beq.n	cac2 <button_handler+0x3e>
    {
        am_util_debug_printf("Got Button 0 Press\n");
    cab6:	4869      	ldr	r0, [pc, #420]	; (cc5c <button_handler+0x1d8>)
    cab8:	f001 f9de 	bl	de78 <am_util_stdio_printf>
        AppUiBtnTest(APP_UI_BTN_1_SHORT);
    cabc:	2002      	movs	r0, #2
    cabe:	f7ff fe3b 	bl	c738 <AppUiBtnTest>
    }

    if ( am_devices_button_released(am_bsp_psButtons[1]) )
    cac2:	4b65      	ldr	r3, [pc, #404]	; (cc58 <button_handler+0x1d4>)
    cac4:	7f1b      	ldrb	r3, [r3, #28]
    cac6:	f083 0301 	eor.w	r3, r3, #1
    caca:	b2db      	uxtb	r3, r3
    cacc:	2b00      	cmp	r3, #0
    cace:	f000 8093 	beq.w	cbf8 <button_handler+0x174>
    cad2:	4b61      	ldr	r3, [pc, #388]	; (cc58 <button_handler+0x1d4>)
    cad4:	7f5b      	ldrb	r3, [r3, #29]
    cad6:	2b00      	cmp	r3, #0
    cad8:	f000 808e 	beq.w	cbf8 <button_handler+0x174>
    {
      AppUiBtnTest(APP_UI_BTN_1_SHORT);
    cadc:	2002      	movs	r0, #2
    cade:	f7ff fe2b 	bl	c738 <AppUiBtnTest>

      HciVsEM_SetRfPowerLevelEx(tx_power_level);
    cae2:	4b5f      	ldr	r3, [pc, #380]	; (cc60 <button_handler+0x1dc>)
    cae4:	781b      	ldrb	r3, [r3, #0]
    cae6:	4618      	mov	r0, r3
    cae8:	f7ff fdee 	bl	c6c8 <HciVsEM_SetRfPowerLevelEx>
      switch ( tx_power_level )
    caec:	4b5c      	ldr	r3, [pc, #368]	; (cc60 <button_handler+0x1dc>)
    caee:	781b      	ldrb	r3, [r3, #0]
    caf0:	2b11      	cmp	r3, #17
    caf2:	d86f      	bhi.n	cbd4 <button_handler+0x150>
    caf4:	a201      	add	r2, pc, #4	; (adr r2, cafc <button_handler+0x78>)
    caf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cafa:	bf00      	nop
    cafc:	0000cb45 	.word	0x0000cb45
    cb00:	0000cb4d 	.word	0x0000cb4d
    cb04:	0000cb55 	.word	0x0000cb55
    cb08:	0000cb5d 	.word	0x0000cb5d
    cb0c:	0000cb65 	.word	0x0000cb65
    cb10:	0000cb6d 	.word	0x0000cb6d
    cb14:	0000cb75 	.word	0x0000cb75
    cb18:	0000cb7d 	.word	0x0000cb7d
    cb1c:	0000cb85 	.word	0x0000cb85
    cb20:	0000cb8d 	.word	0x0000cb8d
    cb24:	0000cb95 	.word	0x0000cb95
    cb28:	0000cb9d 	.word	0x0000cb9d
    cb2c:	0000cba5 	.word	0x0000cba5
    cb30:	0000cbad 	.word	0x0000cbad
    cb34:	0000cbb5 	.word	0x0000cbb5
    cb38:	0000cbbd 	.word	0x0000cbbd
    cb3c:	0000cbc5 	.word	0x0000cbc5
    cb40:	0000cbcd 	.word	0x0000cbcd
      {
        case TX_POWER_LEVEL_MINOR_33P5_dBm:
            am_util_debug_printf("Current Tx Power is -33.5 dBm\n");
    cb44:	4847      	ldr	r0, [pc, #284]	; (cc64 <button_handler+0x1e0>)
    cb46:	f001 f997 	bl	de78 <am_util_stdio_printf>
            break;
    cb4a:	e047      	b.n	cbdc <button_handler+0x158>
        case TX_POWER_LEVEL_MINOR_29P0_dBm:
            am_util_debug_printf("Current Tx Power is -29.0 dBm\n");
    cb4c:	4846      	ldr	r0, [pc, #280]	; (cc68 <button_handler+0x1e4>)
    cb4e:	f001 f993 	bl	de78 <am_util_stdio_printf>
            break;
    cb52:	e043      	b.n	cbdc <button_handler+0x158>
        case TX_POWER_LEVEL_MINOR_17P9_dBm:
            am_util_debug_printf("Current Tx Power is -17.9 dBm\n");
    cb54:	4845      	ldr	r0, [pc, #276]	; (cc6c <button_handler+0x1e8>)
    cb56:	f001 f98f 	bl	de78 <am_util_stdio_printf>
            break;
    cb5a:	e03f      	b.n	cbdc <button_handler+0x158>
        case TX_POWER_LEVEL_MINOR_16P4_dBm:
            am_util_debug_printf("Current Tx Power is -16.4 dBm\n");
    cb5c:	4844      	ldr	r0, [pc, #272]	; (cc70 <button_handler+0x1ec>)
    cb5e:	f001 f98b 	bl	de78 <am_util_stdio_printf>
            break;
    cb62:	e03b      	b.n	cbdc <button_handler+0x158>
        case TX_POWER_LEVEL_MINOR_14P6_dBm:
            am_util_debug_printf("Current Tx Power is -14.6 dBm\n");
    cb64:	4843      	ldr	r0, [pc, #268]	; (cc74 <button_handler+0x1f0>)
    cb66:	f001 f987 	bl	de78 <am_util_stdio_printf>
            break;
    cb6a:	e037      	b.n	cbdc <button_handler+0x158>
        case TX_POWER_LEVEL_MINOR_13P1_dBm:
            am_util_debug_printf("Current Tx Power is -13.1 dBm\n");
    cb6c:	4842      	ldr	r0, [pc, #264]	; (cc78 <button_handler+0x1f4>)
    cb6e:	f001 f983 	bl	de78 <am_util_stdio_printf>
            break;
    cb72:	e033      	b.n	cbdc <button_handler+0x158>
        case TX_POWER_LEVEL_MINOR_11P4_dBm:
            am_util_debug_printf("Current Tx Power is -11.4 dBm\n");
    cb74:	4841      	ldr	r0, [pc, #260]	; (cc7c <button_handler+0x1f8>)
    cb76:	f001 f97f 	bl	de78 <am_util_stdio_printf>
            break;
    cb7a:	e02f      	b.n	cbdc <button_handler+0x158>
        case TX_POWER_LEVEL_MINOR_9P9_dBm:
            am_util_debug_printf("Current Tx Power is -9.9 dBm\n");
    cb7c:	4840      	ldr	r0, [pc, #256]	; (cc80 <button_handler+0x1fc>)
    cb7e:	f001 f97b 	bl	de78 <am_util_stdio_printf>
            break;
    cb82:	e02b      	b.n	cbdc <button_handler+0x158>
        case TX_POWER_LEVEL_MINOR_8P4_dBm:
            am_util_debug_printf("Current Tx Power is -8.4 dBm\n");
    cb84:	483f      	ldr	r0, [pc, #252]	; (cc84 <button_handler+0x200>)
    cb86:	f001 f977 	bl	de78 <am_util_stdio_printf>
            break;
    cb8a:	e027      	b.n	cbdc <button_handler+0x158>
        case TX_POWER_LEVEL_MINOR_6P9_dBm:
            am_util_debug_printf("Current Tx Power is -6.9 dBm\n");
    cb8c:	483e      	ldr	r0, [pc, #248]	; (cc88 <button_handler+0x204>)
    cb8e:	f001 f973 	bl	de78 <am_util_stdio_printf>
            break;
    cb92:	e023      	b.n	cbdc <button_handler+0x158>
        case TX_POWER_LEVEL_MINOR_5P5_dBm:
            am_util_debug_printf("Current Tx Power is -5.5 dBm\n");
    cb94:	483d      	ldr	r0, [pc, #244]	; (cc8c <button_handler+0x208>)
    cb96:	f001 f96f 	bl	de78 <am_util_stdio_printf>
            break;
    cb9a:	e01f      	b.n	cbdc <button_handler+0x158>
        case TX_POWER_LEVEL_MINOR_4P0_dBm:
            am_util_debug_printf("Current Tx Power is -4.0 dBm\n");
    cb9c:	483c      	ldr	r0, [pc, #240]	; (cc90 <button_handler+0x20c>)
    cb9e:	f001 f96b 	bl	de78 <am_util_stdio_printf>
            break;
    cba2:	e01b      	b.n	cbdc <button_handler+0x158>
        case TX_POWER_LEVEL_MINOR_2P6_dBm:
            am_util_debug_printf("Current Tx Power is -2.6 dBm\n");
    cba4:	483b      	ldr	r0, [pc, #236]	; (cc94 <button_handler+0x210>)
    cba6:	f001 f967 	bl	de78 <am_util_stdio_printf>
            break;
    cbaa:	e017      	b.n	cbdc <button_handler+0x158>
        case TX_POWER_LEVEL_MINOR_1P4_dBm:
            am_util_debug_printf("Current Tx Power is -1.4 dBm\n");
    cbac:	483a      	ldr	r0, [pc, #232]	; (cc98 <button_handler+0x214>)
    cbae:	f001 f963 	bl	de78 <am_util_stdio_printf>
            break;
    cbb2:	e013      	b.n	cbdc <button_handler+0x158>
        case TX_POWER_LEVEL_PLUS_0P4_dBm:
            am_util_debug_printf("Current Tx Power is +0.4 dBm\n");
    cbb4:	4839      	ldr	r0, [pc, #228]	; (cc9c <button_handler+0x218>)
    cbb6:	f001 f95f 	bl	de78 <am_util_stdio_printf>
            break;
    cbba:	e00f      	b.n	cbdc <button_handler+0x158>
        case TX_POWER_LEVEL_PLUS_2P5_dBm:
            am_util_debug_printf("Current Tx Power is +2.5 dBm\n");
    cbbc:	4838      	ldr	r0, [pc, #224]	; (cca0 <button_handler+0x21c>)
    cbbe:	f001 f95b 	bl	de78 <am_util_stdio_printf>
            break;
    cbc2:	e00b      	b.n	cbdc <button_handler+0x158>
        case TX_POWER_LEVEL_PLUS_4P6_dBm:
            am_util_debug_printf("Current Tx Power is +4.6 dBm\n");
    cbc4:	4837      	ldr	r0, [pc, #220]	; (cca4 <button_handler+0x220>)
    cbc6:	f001 f957 	bl	de78 <am_util_stdio_printf>
            break;
    cbca:	e007      	b.n	cbdc <button_handler+0x158>
        case TX_POWER_LEVEL_PLUS_6P2_dBm:
            am_util_debug_printf("Current Tx Power is +6.2 dBm\n");
    cbcc:	4836      	ldr	r0, [pc, #216]	; (cca8 <button_handler+0x224>)
    cbce:	f001 f953 	bl	de78 <am_util_stdio_printf>
            break;
    cbd2:	e003      	b.n	cbdc <button_handler+0x158>
        default:
            am_util_debug_printf("Invalid Tx power level\n");
    cbd4:	4835      	ldr	r0, [pc, #212]	; (ccac <button_handler+0x228>)
    cbd6:	f001 f94f 	bl	de78 <am_util_stdio_printf>
            break;
    cbda:	bf00      	nop
      }

      if ( tx_power_level == 0 )
    cbdc:	4b20      	ldr	r3, [pc, #128]	; (cc60 <button_handler+0x1dc>)
    cbde:	781b      	ldrb	r3, [r3, #0]
    cbe0:	2b00      	cmp	r3, #0
    cbe2:	d103      	bne.n	cbec <button_handler+0x168>
      {
        tx_power_level = TX_POWER_LEVEL_PLUS_6P2_dBm;
    cbe4:	4b1e      	ldr	r3, [pc, #120]	; (cc60 <button_handler+0x1dc>)
    cbe6:	2211      	movs	r2, #17
    cbe8:	701a      	strb	r2, [r3, #0]
    cbea:	e005      	b.n	cbf8 <button_handler+0x174>
      }
      else
      {
        tx_power_level--;
    cbec:	4b1c      	ldr	r3, [pc, #112]	; (cc60 <button_handler+0x1dc>)
    cbee:	781b      	ldrb	r3, [r3, #0]
    cbf0:	3b01      	subs	r3, #1
    cbf2:	b2da      	uxtb	r2, r3
    cbf4:	4b1a      	ldr	r3, [pc, #104]	; (cc60 <button_handler+0x1dc>)
    cbf6:	701a      	strb	r2, [r3, #0]
      }
    }

    if ( am_devices_button_released(am_bsp_psButtons[2]) )
    cbf8:	4b17      	ldr	r3, [pc, #92]	; (cc58 <button_handler+0x1d4>)
    cbfa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    cbfe:	f083 0301 	eor.w	r3, r3, #1
    cc02:	b2db      	uxtb	r3, r3
    cc04:	2b00      	cmp	r3, #0
    cc06:	d021      	beq.n	cc4c <button_handler+0x1c8>
    cc08:	4b13      	ldr	r3, [pc, #76]	; (cc58 <button_handler+0x1d4>)
    cc0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    cc0e:	2b00      	cmp	r3, #0
    cc10:	d01c      	beq.n	cc4c <button_handler+0x1c8>
    {
        AppUiBtnTest(APP_UI_BTN_2_SHORT);
    cc12:	2007      	movs	r0, #7
    cc14:	f7ff fd90 	bl	c738 <AppUiBtnTest>

        if ( dtm_in_progress )
    cc18:	4b25      	ldr	r3, [pc, #148]	; (ccb0 <button_handler+0x22c>)
    cc1a:	681b      	ldr	r3, [r3, #0]
    cc1c:	2b00      	cmp	r3, #0
    cc1e:	d008      	beq.n	cc32 <button_handler+0x1ae>
        {
            HciLeTestEndCmd();
    cc20:	f7fa fb00 	bl	7224 <HciLeTestEndCmd>
            dtm_in_progress = false;
    cc24:	4b22      	ldr	r3, [pc, #136]	; (ccb0 <button_handler+0x22c>)
    cc26:	2200      	movs	r2, #0
    cc28:	601a      	str	r2, [r3, #0]
            am_util_debug_printf("Transmitter test ended\n");
    cc2a:	4822      	ldr	r0, [pc, #136]	; (ccb4 <button_handler+0x230>)
    cc2c:	f001 f924 	bl	de78 <am_util_stdio_printf>

            dtm_in_progress = true;
            am_util_debug_printf("Transmitter test started\n");
        }
    }
}
    cc30:	e00c      	b.n	cc4c <button_handler+0x1c8>
            HciResetCmd();
    cc32:	f7fa f90d 	bl	6e50 <HciResetCmd>
            HciLeTransmitterTestCmd(0, 255, 7);
    cc36:	2207      	movs	r2, #7
    cc38:	21ff      	movs	r1, #255	; 0xff
    cc3a:	2000      	movs	r0, #0
    cc3c:	f7fa fac7 	bl	71ce <HciLeTransmitterTestCmd>
            dtm_in_progress = true;
    cc40:	4b1b      	ldr	r3, [pc, #108]	; (ccb0 <button_handler+0x22c>)
    cc42:	2201      	movs	r2, #1
    cc44:	601a      	str	r2, [r3, #0]
            am_util_debug_printf("Transmitter test started\n");
    cc46:	481c      	ldr	r0, [pc, #112]	; (ccb8 <button_handler+0x234>)
    cc48:	f001 f916 	bl	de78 <am_util_stdio_printf>
}
    cc4c:	bf00      	nop
    cc4e:	3708      	adds	r7, #8
    cc50:	46bd      	mov	sp, r7
    cc52:	bd80      	pop	{r7, pc}
    cc54:	10002914 	.word	0x10002914
    cc58:	10001110 	.word	0x10001110
    cc5c:	000105d0 	.word	0x000105d0
    cc60:	1000110c 	.word	0x1000110c
    cc64:	000105e4 	.word	0x000105e4
    cc68:	00010604 	.word	0x00010604
    cc6c:	00010624 	.word	0x00010624
    cc70:	00010644 	.word	0x00010644
    cc74:	00010664 	.word	0x00010664
    cc78:	00010684 	.word	0x00010684
    cc7c:	000106a4 	.word	0x000106a4
    cc80:	000106c4 	.word	0x000106c4
    cc84:	000106e4 	.word	0x000106e4
    cc88:	00010704 	.word	0x00010704
    cc8c:	00010724 	.word	0x00010724
    cc90:	00010744 	.word	0x00010744
    cc94:	00010764 	.word	0x00010764
    cc98:	00010784 	.word	0x00010784
    cc9c:	000107a4 	.word	0x000107a4
    cca0:	000107c4 	.word	0x000107c4
    cca4:	000107e4 	.word	0x000107e4
    cca8:	00010804 	.word	0x00010804
    ccac:	00010824 	.word	0x00010824
    ccb0:	100024f8 	.word	0x100024f8
    ccb4:	0001083c 	.word	0x0001083c
    ccb8:	00010854 	.word	0x00010854

0000ccbc <setup_buttons>:
// Sets up a button interface.
//
//*****************************************************************************
void
setup_buttons(void)
{
    ccbc:	b580      	push	{r7, lr}
    ccbe:	af00      	add	r7, sp, #0
    //
    // Enable the buttons for user interaction.
    //
    am_devices_button_array_init(am_bsp_psButtons, AM_BSP_NUM_BUTTONS);
    ccc0:	2103      	movs	r1, #3
    ccc2:	4806      	ldr	r0, [pc, #24]	; (ccdc <setup_buttons+0x20>)
    ccc4:	f7fe fb72 	bl	b3ac <am_devices_button_array_init>

    //
    // Start a timer.
    //
    ButtonTimer.handlerId = ButtonHandlerId;
    ccc8:	4b05      	ldr	r3, [pc, #20]	; (cce0 <setup_buttons+0x24>)
    ccca:	781a      	ldrb	r2, [r3, #0]
    cccc:	4b05      	ldr	r3, [pc, #20]	; (cce4 <setup_buttons+0x28>)
    ccce:	721a      	strb	r2, [r3, #8]
    WsfTimerStartSec(&ButtonTimer, 2);
    ccd0:	2102      	movs	r1, #2
    ccd2:	4804      	ldr	r0, [pc, #16]	; (cce4 <setup_buttons+0x28>)
    ccd4:	f7fe fa5c 	bl	b190 <WsfTimerStartSec>
}
    ccd8:	bf00      	nop
    ccda:	bd80      	pop	{r7, pc}
    ccdc:	10001110 	.word	0x10001110
    cce0:	10002911 	.word	0x10002911
    cce4:	10002914 	.word	0x10002914

0000cce8 <am_ctimer_isr>:
// Interrupt handler for the CTIMERs
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
    cce8:	b580      	push	{r7, lr}
    ccea:	b082      	sub	sp, #8
    ccec:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    //
    // Check and clear any active CTIMER interrupts.
    //
    ui32Status = am_hal_ctimer_int_status_get(true);
    ccee:	2001      	movs	r0, #1
    ccf0:	f001 fb00 	bl	e2f4 <am_hal_ctimer_int_status_get>
    ccf4:	6078      	str	r0, [r7, #4]
    am_hal_ctimer_int_clear(ui32Status);
    ccf6:	6878      	ldr	r0, [r7, #4]
    ccf8:	f001 faf6 	bl	e2e8 <am_hal_ctimer_int_clear>
}
    ccfc:	bf00      	nop
    ccfe:	3708      	adds	r7, #8
    cd00:	46bd      	mov	sp, r7
    cd02:	bd80      	pop	{r7, pc}

0000cd04 <am_gpio_isr>:
// Interrupt handler for the GPIO module
//
//*****************************************************************************
void
am_gpio_isr(void)
{
    cd04:	b590      	push	{r4, r7, lr}
    cd06:	b083      	sub	sp, #12
    cd08:	af00      	add	r7, sp, #0
    uint64_t ui64Status;

    //
    // Check and clear the GPIO interrupt status
    //
    ui64Status = am_hal_gpio_int_status_get(true);
    cd0a:	2001      	movs	r0, #1
    cd0c:	f001 fbba 	bl	e484 <am_hal_gpio_int_status_get>
    cd10:	e9c7 0100 	strd	r0, r1, [r7]
    am_hal_gpio_int_clear(ui64Status);
    cd14:	e9d7 0100 	ldrd	r0, r1, [r7]
    cd18:	f001 fbaa 	bl	e470 <am_hal_gpio_int_clear>

    //
    // Check to see if this was a wakeup event from the BLE radio.
    //
    if ( ui64Status & AM_HAL_GPIO_BIT(AM_BSP_GPIO_EM9304_INT) )
    cd1c:	e897 0018 	ldmia.w	r7, {r3, r4}
    cd20:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    cd24:	f04f 0200 	mov.w	r2, #0
    cd28:	ea03 0301 	and.w	r3, r3, r1
    cd2c:	ea04 0402 	and.w	r4, r4, r2
    cd30:	4323      	orrs	r3, r4
    cd32:	d005      	beq.n	cd40 <am_gpio_isr+0x3c>
    {
        WsfSetEvent(g_bleDataReadyHandlerId, BLE_DATA_READY_EVENT);
    cd34:	4b04      	ldr	r3, [pc, #16]	; (cd48 <am_gpio_isr+0x44>)
    cd36:	781b      	ldrb	r3, [r3, #0]
    cd38:	2101      	movs	r1, #1
    cd3a:	4618      	mov	r0, r3
    cd3c:	f7fd f9b4 	bl	a0a8 <WsfSetEvent>
    }
}
    cd40:	bf00      	nop
    cd42:	370c      	adds	r7, #12
    cd44:	46bd      	mov	sp, r7
    cd46:	bd90      	pop	{r4, r7, pc}
    cd48:	10002910 	.word	0x10002910

0000cd4c <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    cd4c:	b580      	push	{r7, lr}
    cd4e:	af00      	add	r7, sp, #0
    //
    // Configure the system clock to run at 24 MHz
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
    cd50:	2000      	movs	r0, #0
    cd52:	f001 f9a9 	bl	e0a8 <am_hal_clkgen_sysclk_select>

    //
    // Configure the MCU for low power operation, but leave the LFRC on.
    //
    am_hal_pwrctrl_bucks_enable();
    cd56:	f002 fdcd 	bl	f8f4 <am_hal_mcuctrl_bucks_enable>
    am_hal_vcomp_disable();
    cd5a:	f002 fee3 	bl	fb24 <am_hal_vcomp_disable>

#ifdef AM_DEBUG_PRINTF
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
    cd5e:	4822      	ldr	r0, [pc, #136]	; (cde8 <main+0x9c>)
    cd60:	f000 fa06 	bl	d170 <am_util_stdio_printf_init>
    am_bsp_pin_enable(ITM_SWO);
    cd64:	4b21      	ldr	r3, [pc, #132]	; (cdec <main+0xa0>)
    cd66:	2273      	movs	r2, #115	; 0x73
    cd68:	601a      	str	r2, [r3, #0]
    cd6a:	4a21      	ldr	r2, [pc, #132]	; (cdf0 <main+0xa4>)
    cd6c:	4b20      	ldr	r3, [pc, #128]	; (cdf0 <main+0xa4>)
    cd6e:	681b      	ldr	r3, [r3, #0]
    cd70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    cd74:	6013      	str	r3, [r2, #0]
    cd76:	4a1f      	ldr	r2, [pc, #124]	; (cdf4 <main+0xa8>)
    cd78:	4b1e      	ldr	r3, [pc, #120]	; (cdf4 <main+0xa8>)
    cd7a:	681b      	ldr	r3, [r3, #0]
    cd7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
    cd80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    cd84:	6013      	str	r3, [r2, #0]
    cd86:	4b19      	ldr	r3, [pc, #100]	; (cdec <main+0xa0>)
    cd88:	2200      	movs	r2, #0
    cd8a:	601a      	str	r2, [r3, #0]
    am_hal_itm_enable();
    cd8c:	f002 fd48 	bl	f820 <am_hal_itm_enable>
    am_bsp_debug_printf_enable();
    cd90:	f001 f95c 	bl	e04c <am_bsp_debug_printf_enable>
#endif

    am_util_debug_printf("Apollo2 Cordio Tx power Control Example\n");
    cd94:	4818      	ldr	r0, [pc, #96]	; (cdf8 <main+0xac>)
    cd96:	f001 f86f 	bl	de78 <am_util_stdio_printf>

    //
    // Boot the radio.
    //
    HciDrvRadioBoot(0);
    cd9a:	2000      	movs	r0, #0
    cd9c:	f7ff fc1c 	bl	c5d8 <HciDrvRadioBoot>

    //
    // Initialize the main ExactLE stack.
    //
    exactle_stack_init();
    cda0:	f7ff fd50 	bl	c844 <exactle_stack_init>

    //
    // Enable BLE data ready interrupt
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_GPIO);
    cda4:	2019      	movs	r0, #25
    cda6:	f001 fb8f 	bl	e4c8 <am_hal_interrupt_enable>

    //
    // Prep the buttons for use
    //
    setup_buttons();
    cdaa:	f7ff ff87 	bl	ccbc <setup_buttons>

    am_util_debug_printf("Usage as below:\n");
    cdae:	4813      	ldr	r0, [pc, #76]	; (cdfc <main+0xb0>)
    cdb0:	f001 f862 	bl	de78 <am_util_stdio_printf>
    am_util_debug_printf("Short press Button 2 to enter/exit DTM tx test\n");
    cdb4:	4812      	ldr	r0, [pc, #72]	; (ce00 <main+0xb4>)
    cdb6:	f001 f85f 	bl	de78 <am_util_stdio_printf>
    am_util_debug_printf("Short press Button 1 to change tx power level from high to low.\n");
    cdba:	4812      	ldr	r0, [pc, #72]	; (ce04 <main+0xb8>)
    cdbc:	f001 f85c 	bl	de78 <am_util_stdio_printf>
    {
        //
        // Calculate the elapsed time from our free-running timer, and update
        // the software timers in the WSF scheduler.
        //
        update_scheduler_timers();
    cdc0:	f7ff fdfc 	bl	c9bc <update_scheduler_timers>
        wsfOsDispatcher();
    cdc4:	f7fd f9fa 	bl	a1bc <wsfOsDispatcher>

        //
        // Enable an interrupt to wake us up next time we have a scheduled event.
        //
        set_next_wakeup();
    cdc8:	f7ff fe2a 	bl	ca20 <set_next_wakeup>

        am_hal_interrupt_master_disable();
    cdcc:	f001 fba8 	bl	e520 <am_hal_interrupt_master_disable>

        //
        // Check to see if the WSF routines are ready to go to sleep.
        //
        if ( wsfOsReadyToSleep() )
    cdd0:	f7fd f9e2 	bl	a198 <wsfOsReadyToSleep>
    cdd4:	4603      	mov	r3, r0
    cdd6:	2b00      	cmp	r3, #0
    cdd8:	d002      	beq.n	cde0 <main+0x94>
        {
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    cdda:	2001      	movs	r0, #1
    cddc:	f002 fe30 	bl	fa40 <am_hal_sysctrl_sleep>
        }
        am_hal_interrupt_master_enable();
    cde0:	f001 fb9a 	bl	e518 <am_hal_interrupt_master_enable>
        update_scheduler_timers();
    cde4:	e7ec      	b.n	cdc0 <main+0x74>
    cde6:	bf00      	nop
    cde8:	0000e0a5 	.word	0x0000e0a5
    cdec:	40010060 	.word	0x40010060
    cdf0:	40010054 	.word	0x40010054
    cdf4:	40010028 	.word	0x40010028
    cdf8:	00010870 	.word	0x00010870
    cdfc:	0001089c 	.word	0x0001089c
    ce00:	000108b0 	.word	0x000108b0
    ce04:	000108e0 	.word	0x000108e0

0000ce08 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    ce08:	4811      	ldr	r0, [pc, #68]	; (ce50 <zero_loop+0x12>)
    ce0a:	4912      	ldr	r1, [pc, #72]	; (ce54 <zero_loop+0x16>)
    ce0c:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    ce0e:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    ce12:	4811      	ldr	r0, [pc, #68]	; (ce58 <zero_loop+0x1a>)
    ce14:	6801      	ldr	r1, [r0, #0]
    ce16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    ce1a:	6001      	str	r1, [r0, #0]
    ce1c:	f3bf 8f4f 	dsb	sy
    ce20:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    ce24:	480d      	ldr	r0, [pc, #52]	; (ce5c <zero_loop+0x1e>)
    ce26:	490e      	ldr	r1, [pc, #56]	; (ce60 <zero_loop+0x22>)
    ce28:	4a0e      	ldr	r2, [pc, #56]	; (ce64 <zero_loop+0x26>)

0000ce2a <copy_loop>:
    ce2a:	f850 3b04 	ldr.w	r3, [r0], #4
    ce2e:	f841 3b04 	str.w	r3, [r1], #4
    ce32:	4291      	cmp	r1, r2
    ce34:	dbf9      	blt.n	ce2a <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    ce36:	480c      	ldr	r0, [pc, #48]	; (ce68 <zero_loop+0x2a>)
    ce38:	490c      	ldr	r1, [pc, #48]	; (ce6c <zero_loop+0x2e>)
    ce3a:	f04f 0200 	mov.w	r2, #0

0000ce3e <zero_loop>:
    ce3e:	4288      	cmp	r0, r1
    ce40:	bfb8      	it	lt
    ce42:	f840 2b04 	strlt.w	r2, [r0], #4
    ce46:	dbfa      	blt.n	ce3e <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    ce48:	f7ff ff80 	bl	cd4c <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    ce4c:	be00      	bkpt	0x0000
}
    ce4e:	bf00      	nop
    ce50:	e000ed08 	.word	0xe000ed08
    ce54:	00000000 	.word	0x00000000
    ce58:	e000ed88 	.word	0xe000ed88
    ce5c:	0001377c 	.word	0x0001377c
    ce60:	10001000 	.word	0x10001000
    ce64:	1000114c 	.word	0x1000114c
    ce68:	1000114c 	.word	0x1000114c
    ce6c:	10002980 	.word	0x10002980

0000ce70 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
    ce70:	b480      	push	{r7}
    ce72:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    ce74:	e7fe      	b.n	ce74 <am_nmi_isr+0x4>

0000ce76 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    ce76:	b480      	push	{r7}
    ce78:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    ce7a:	e7fe      	b.n	ce7a <am_adc_isr+0x4>

0000ce7c <BdaCpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BdaCpy(uint8_t *pDst, const uint8_t *pSrc)
{
    ce7c:	b580      	push	{r7, lr}
    ce7e:	b082      	sub	sp, #8
    ce80:	af00      	add	r7, sp, #0
    ce82:	6078      	str	r0, [r7, #4]
    ce84:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, BDA_ADDR_LEN);
    ce86:	2206      	movs	r2, #6
    ce88:	6839      	ldr	r1, [r7, #0]
    ce8a:	6878      	ldr	r0, [r7, #4]
    ce8c:	f002 fe5f 	bl	fb4e <memcpy>
}
    ce90:	bf00      	nop
    ce92:	3708      	adds	r7, #8
    ce94:	46bd      	mov	sp, r7
    ce96:	bd80      	pop	{r7, pc}

0000ce98 <BdaCmp>:
 *
 *  \return TRUE if addresses match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t BdaCmp(const uint8_t *pAddr1, const uint8_t *pAddr2)
{
    ce98:	b580      	push	{r7, lr}
    ce9a:	b082      	sub	sp, #8
    ce9c:	af00      	add	r7, sp, #0
    ce9e:	6078      	str	r0, [r7, #4]
    cea0:	6039      	str	r1, [r7, #0]
  return (memcmp(pAddr1, pAddr2, BDA_ADDR_LEN) == 0);
    cea2:	2206      	movs	r2, #6
    cea4:	6839      	ldr	r1, [r7, #0]
    cea6:	6878      	ldr	r0, [r7, #4]
    cea8:	f002 fe42 	bl	fb30 <memcmp>
    ceac:	4603      	mov	r3, r0
    ceae:	2b00      	cmp	r3, #0
    ceb0:	bf0c      	ite	eq
    ceb2:	2301      	moveq	r3, #1
    ceb4:	2300      	movne	r3, #0
    ceb6:	b2db      	uxtb	r3, r3
}
    ceb8:	4618      	mov	r0, r3
    ceba:	3708      	adds	r7, #8
    cebc:	46bd      	mov	sp, r7
    cebe:	bd80      	pop	{r7, pc}

0000cec0 <BdaClr>:
 *
 *  \return pDst + BDA_ADDR_LEN
 */
/*************************************************************************************************/
uint8_t *BdaClr(uint8_t *pDst)
{
    cec0:	b580      	push	{r7, lr}
    cec2:	b082      	sub	sp, #8
    cec4:	af00      	add	r7, sp, #0
    cec6:	6078      	str	r0, [r7, #4]
  memset(pDst, 0, BDA_ADDR_LEN);
    cec8:	2206      	movs	r2, #6
    ceca:	2100      	movs	r1, #0
    cecc:	6878      	ldr	r0, [r7, #4]
    cece:	f002 fe63 	bl	fb98 <memset>

  return (pDst + BDA_ADDR_LEN);
    ced2:	687b      	ldr	r3, [r7, #4]
    ced4:	3306      	adds	r3, #6
}
    ced6:	4618      	mov	r0, r3
    ced8:	3708      	adds	r7, #8
    ceda:	46bd      	mov	sp, r7
    cedc:	bd80      	pop	{r7, pc}

0000cede <BdaIsZeros>:
*
*  \return TRUE if address is all zeros, FALSE otherwise.
*/
/*************************************************************************************************/
bool_t BdaIsZeros(const uint8_t *pAddr)
{
    cede:	b580      	push	{r7, lr}
    cee0:	b084      	sub	sp, #16
    cee2:	af00      	add	r7, sp, #0
    cee4:	6078      	str	r0, [r7, #4]
  uint8_t addrZeros[BDA_ADDR_LEN] = { 0 };
    cee6:	f107 0308 	add.w	r3, r7, #8
    ceea:	2200      	movs	r2, #0
    ceec:	601a      	str	r2, [r3, #0]
    ceee:	809a      	strh	r2, [r3, #4]

  return (memcmp(pAddr, addrZeros, BDA_ADDR_LEN) == 0);
    cef0:	f107 0308 	add.w	r3, r7, #8
    cef4:	2206      	movs	r2, #6
    cef6:	4619      	mov	r1, r3
    cef8:	6878      	ldr	r0, [r7, #4]
    cefa:	f002 fe19 	bl	fb30 <memcmp>
    cefe:	4603      	mov	r3, r0
    cf00:	2b00      	cmp	r3, #0
    cf02:	bf0c      	ite	eq
    cf04:	2301      	moveq	r3, #1
    cf06:	2300      	movne	r3, #0
    cf08:	b2db      	uxtb	r3, r3
}
    cf0a:	4618      	mov	r0, r3
    cf0c:	3710      	adds	r7, #16
    cf0e:	46bd      	mov	sp, r7
    cf10:	bd80      	pop	{r7, pc}

0000cf12 <Calc128Cpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy(uint8_t *pDst, uint8_t *pSrc)
{
    cf12:	b580      	push	{r7, lr}
    cf14:	b082      	sub	sp, #8
    cf16:	af00      	add	r7, sp, #0
    cf18:	6078      	str	r0, [r7, #4]
    cf1a:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, CALC128_LEN);
    cf1c:	2210      	movs	r2, #16
    cf1e:	6839      	ldr	r1, [r7, #0]
    cf20:	6878      	ldr	r0, [r7, #4]
    cf22:	f002 fe14 	bl	fb4e <memcpy>
}
    cf26:	bf00      	nop
    cf28:	3708      	adds	r7, #8
    cf2a:	46bd      	mov	sp, r7
    cf2c:	bd80      	pop	{r7, pc}

0000cf2e <Calc128Cpy64>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy64(uint8_t *pDst, uint8_t *pSrc)
{
    cf2e:	b580      	push	{r7, lr}
    cf30:	b082      	sub	sp, #8
    cf32:	af00      	add	r7, sp, #0
    cf34:	6078      	str	r0, [r7, #4]
    cf36:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, CALC128_LEN/2);
    cf38:	2208      	movs	r2, #8
    cf3a:	6839      	ldr	r1, [r7, #0]
    cf3c:	6878      	ldr	r0, [r7, #4]
    cf3e:	f002 fe06 	bl	fb4e <memcpy>
}
    cf42:	bf00      	nop
    cf44:	3708      	adds	r7, #8
    cf46:	46bd      	mov	sp, r7
    cf48:	bd80      	pop	{r7, pc}

0000cf4a <Calc128Xor>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Xor(uint8_t *pDst, uint8_t *pSrc)
{
    cf4a:	b480      	push	{r7}
    cf4c:	b085      	sub	sp, #20
    cf4e:	af00      	add	r7, sp, #0
    cf50:	6078      	str	r0, [r7, #4]
    cf52:	6039      	str	r1, [r7, #0]
  uint8_t i;
  
  for (i = CALC128_LEN; i > 0; i--)
    cf54:	2310      	movs	r3, #16
    cf56:	73fb      	strb	r3, [r7, #15]
    cf58:	e00d      	b.n	cf76 <Calc128Xor+0x2c>
  {
    *pDst++ ^= *pSrc++;
    cf5a:	683b      	ldr	r3, [r7, #0]
    cf5c:	1c5a      	adds	r2, r3, #1
    cf5e:	603a      	str	r2, [r7, #0]
    cf60:	781a      	ldrb	r2, [r3, #0]
    cf62:	687b      	ldr	r3, [r7, #4]
    cf64:	1c59      	adds	r1, r3, #1
    cf66:	6079      	str	r1, [r7, #4]
    cf68:	7819      	ldrb	r1, [r3, #0]
    cf6a:	404a      	eors	r2, r1
    cf6c:	b2d2      	uxtb	r2, r2
    cf6e:	701a      	strb	r2, [r3, #0]
  for (i = CALC128_LEN; i > 0; i--)
    cf70:	7bfb      	ldrb	r3, [r7, #15]
    cf72:	3b01      	subs	r3, #1
    cf74:	73fb      	strb	r3, [r7, #15]
    cf76:	7bfb      	ldrb	r3, [r7, #15]
    cf78:	2b00      	cmp	r3, #0
    cf7a:	d1ee      	bne.n	cf5a <Calc128Xor+0x10>
  }
}
    cf7c:	bf00      	nop
    cf7e:	3714      	adds	r7, #20
    cf80:	46bd      	mov	sp, r7
    cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf86:	4770      	bx	lr

0000cf88 <WStrReverseCpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WStrReverseCpy(uint8_t *pBuf1, const uint8_t *pBuf2, uint16_t len)
{
    cf88:	b480      	push	{r7}
    cf8a:	b087      	sub	sp, #28
    cf8c:	af00      	add	r7, sp, #0
    cf8e:	60f8      	str	r0, [r7, #12]
    cf90:	60b9      	str	r1, [r7, #8]
    cf92:	4613      	mov	r3, r2
    cf94:	80fb      	strh	r3, [r7, #6]
  int16_t i;

  for (i=0; i<len; i++)
    cf96:	2300      	movs	r3, #0
    cf98:	82fb      	strh	r3, [r7, #22]
    cf9a:	e013      	b.n	cfc4 <WStrReverseCpy+0x3c>
  {
    pBuf1[len-1-i] = pBuf2[i];
    cf9c:	88fb      	ldrh	r3, [r7, #6]
    cf9e:	1e5a      	subs	r2, r3, #1
    cfa0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    cfa4:	1ad3      	subs	r3, r2, r3
    cfa6:	461a      	mov	r2, r3
    cfa8:	68fb      	ldr	r3, [r7, #12]
    cfaa:	4413      	add	r3, r2
    cfac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
    cfb0:	68b9      	ldr	r1, [r7, #8]
    cfb2:	440a      	add	r2, r1
    cfb4:	7812      	ldrb	r2, [r2, #0]
    cfb6:	701a      	strb	r2, [r3, #0]
  for (i=0; i<len; i++)
    cfb8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    cfbc:	b29b      	uxth	r3, r3
    cfbe:	3301      	adds	r3, #1
    cfc0:	b29b      	uxth	r3, r3
    cfc2:	82fb      	strh	r3, [r7, #22]
    cfc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
    cfc8:	88fb      	ldrh	r3, [r7, #6]
    cfca:	429a      	cmp	r2, r3
    cfcc:	dbe6      	blt.n	cf9c <WStrReverseCpy+0x14>
  }
}
    cfce:	bf00      	nop
    cfd0:	371c      	adds	r7, #28
    cfd2:	46bd      	mov	sp, r7
    cfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    cfd8:	4770      	bx	lr

0000cfda <WStrReverse>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WStrReverse(uint8_t *pBuf, uint8_t len)
{
    cfda:	b480      	push	{r7}
    cfdc:	b085      	sub	sp, #20
    cfde:	af00      	add	r7, sp, #0
    cfe0:	6078      	str	r0, [r7, #4]
    cfe2:	460b      	mov	r3, r1
    cfe4:	70fb      	strb	r3, [r7, #3]
  uint8_t i, temp;

  for (i=0; i<len/2; i++)
    cfe6:	2300      	movs	r3, #0
    cfe8:	73fb      	strb	r3, [r7, #15]
    cfea:	e01a      	b.n	d022 <WStrReverse+0x48>
  {
    temp = pBuf[len-i-1];
    cfec:	78fa      	ldrb	r2, [r7, #3]
    cfee:	7bfb      	ldrb	r3, [r7, #15]
    cff0:	1ad3      	subs	r3, r2, r3
    cff2:	3b01      	subs	r3, #1
    cff4:	687a      	ldr	r2, [r7, #4]
    cff6:	4413      	add	r3, r2
    cff8:	781b      	ldrb	r3, [r3, #0]
    cffa:	73bb      	strb	r3, [r7, #14]
    pBuf[len-i-1] = pBuf[i];
    cffc:	78fa      	ldrb	r2, [r7, #3]
    cffe:	7bfb      	ldrb	r3, [r7, #15]
    d000:	1ad3      	subs	r3, r2, r3
    d002:	3b01      	subs	r3, #1
    d004:	687a      	ldr	r2, [r7, #4]
    d006:	4413      	add	r3, r2
    d008:	7bfa      	ldrb	r2, [r7, #15]
    d00a:	6879      	ldr	r1, [r7, #4]
    d00c:	440a      	add	r2, r1
    d00e:	7812      	ldrb	r2, [r2, #0]
    d010:	701a      	strb	r2, [r3, #0]
    pBuf[i] = temp;
    d012:	7bfb      	ldrb	r3, [r7, #15]
    d014:	687a      	ldr	r2, [r7, #4]
    d016:	4413      	add	r3, r2
    d018:	7bba      	ldrb	r2, [r7, #14]
    d01a:	701a      	strb	r2, [r3, #0]
  for (i=0; i<len/2; i++)
    d01c:	7bfb      	ldrb	r3, [r7, #15]
    d01e:	3301      	adds	r3, #1
    d020:	73fb      	strb	r3, [r7, #15]
    d022:	78fb      	ldrb	r3, [r7, #3]
    d024:	085b      	lsrs	r3, r3, #1
    d026:	b2db      	uxtb	r3, r3
    d028:	7bfa      	ldrb	r2, [r7, #15]
    d02a:	429a      	cmp	r2, r3
    d02c:	d3de      	bcc.n	cfec <WStrReverse+0x12>
  }
}
    d02e:	bf00      	nop
    d030:	3714      	adds	r7, #20
    d032:	46bd      	mov	sp, r7
    d034:	f85d 7b04 	ldr.w	r7, [sp], #4
    d038:	4770      	bx	lr
	...

0000d03c <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    d03c:	b580      	push	{r7, lr}
    d03e:	b084      	sub	sp, #16
    d040:	af00      	add	r7, sp, #0
    d042:	6078      	str	r0, [r7, #4]
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
    d044:	f001 f840 	bl	e0c8 <am_hal_clkgen_sysclk_get>
    d048:	60f8      	str	r0, [r7, #12]
#endif
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    d04a:	68fb      	ldr	r3, [r7, #12]
    d04c:	4a07      	ldr	r2, [pc, #28]	; (d06c <am_util_delay_ms+0x30>)
    d04e:	fba2 2303 	umull	r2, r3, r2, r3
    d052:	099b      	lsrs	r3, r3, #6
    d054:	687a      	ldr	r2, [r7, #4]
    d056:	fb02 f303 	mul.w	r3, r2, r3
    d05a:	60bb      	str	r3, [r7, #8]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    d05c:	68b8      	ldr	r0, [r7, #8]
    d05e:	f001 f959 	bl	e314 <am_hal_flash_delay>
}
    d062:	bf00      	nop
    d064:	3710      	adds	r7, #16
    d066:	46bd      	mov	sp, r7
    d068:	bd80      	pop	{r7, pc}
    d06a:	bf00      	nop
    d06c:	057619f1 	.word	0x057619f1

0000d070 <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
    d070:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
    d072:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
    d074:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    d076:	f000 f809 	bl	d08c <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
    d07a:	bd01      	pop	{r0, pc}
}
    d07c:	bf00      	nop
    d07e:	4618      	mov	r0, r3

0000d080 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    d080:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    d082:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    d084:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    d086:	4770      	bx	lr
}
    d088:	bf00      	nop
    d08a:	4618      	mov	r0, r3

0000d08c <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    d08c:	b580      	push	{r7, lr}
    d08e:	b096      	sub	sp, #88	; 0x58
    d090:	af00      	add	r7, sp, #0
    d092:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    d094:	f107 030c 	add.w	r3, r7, #12
    d098:	2200      	movs	r2, #0
    d09a:	601a      	str	r2, [r3, #0]
    d09c:	605a      	str	r2, [r3, #4]
    d09e:	609a      	str	r2, [r3, #8]
    d0a0:	60da      	str	r2, [r3, #12]
    d0a2:	611a      	str	r2, [r3, #16]
    d0a4:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    d0a6:	2300      	movs	r3, #0
    d0a8:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    d0aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    d0ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    d0ae:	4b2e      	ldr	r3, [pc, #184]	; (d168 <am_util_faultisr_collect_data+0xdc>)
    d0b0:	681b      	ldr	r3, [r3, #0]
    d0b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    d0b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d0b6:	b2db      	uxtb	r3, r3
    d0b8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    d0bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d0be:	0a1b      	lsrs	r3, r3, #8
    d0c0:	b2db      	uxtb	r3, r3
    d0c2:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    d0c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d0c8:	0c1b      	lsrs	r3, r3, #16
    d0ca:	b29b      	uxth	r3, r3
    d0cc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    d0d0:	4b26      	ldr	r3, [pc, #152]	; (d16c <am_util_faultisr_collect_data+0xe0>)
    d0d2:	681b      	ldr	r3, [r3, #0]
    d0d4:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    d0d6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    d0da:	b2db      	uxtb	r3, r3
    d0dc:	f003 0302 	and.w	r3, r3, #2
    d0e0:	2b00      	cmp	r3, #0
    d0e2:	d005      	beq.n	d0f0 <am_util_faultisr_collect_data+0x64>
    d0e4:	6879      	ldr	r1, [r7, #4]
    d0e6:	2006      	movs	r0, #6
    d0e8:	f7ff ffca 	bl	d080 <getStackedReg>
    d0ec:	4603      	mov	r3, r0
    d0ee:	e001      	b.n	d0f4 <am_util_faultisr_collect_data+0x68>
    d0f0:	f04f 33ff 	mov.w	r3, #4294967295
    d0f4:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    d0f6:	6879      	ldr	r1, [r7, #4]
    d0f8:	2000      	movs	r0, #0
    d0fa:	f7ff ffc1 	bl	d080 <getStackedReg>
    d0fe:	4603      	mov	r3, r0
    d100:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    d102:	6879      	ldr	r1, [r7, #4]
    d104:	2001      	movs	r0, #1
    d106:	f7ff ffbb 	bl	d080 <getStackedReg>
    d10a:	4603      	mov	r3, r0
    d10c:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    d10e:	6879      	ldr	r1, [r7, #4]
    d110:	2002      	movs	r0, #2
    d112:	f7ff ffb5 	bl	d080 <getStackedReg>
    d116:	4603      	mov	r3, r0
    d118:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    d11a:	6879      	ldr	r1, [r7, #4]
    d11c:	2003      	movs	r0, #3
    d11e:	f7ff ffaf 	bl	d080 <getStackedReg>
    d122:	4603      	mov	r3, r0
    d124:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    d126:	6879      	ldr	r1, [r7, #4]
    d128:	2004      	movs	r0, #4
    d12a:	f7ff ffa9 	bl	d080 <getStackedReg>
    d12e:	4603      	mov	r3, r0
    d130:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    d132:	6879      	ldr	r1, [r7, #4]
    d134:	2005      	movs	r0, #5
    d136:	f7ff ffa3 	bl	d080 <getStackedReg>
    d13a:	4603      	mov	r3, r0
    d13c:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    d13e:	6879      	ldr	r1, [r7, #4]
    d140:	2006      	movs	r0, #6
    d142:	f7ff ff9d 	bl	d080 <getStackedReg>
    d146:	4603      	mov	r3, r0
    d148:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    d14a:	6879      	ldr	r1, [r7, #4]
    d14c:	2007      	movs	r0, #7
    d14e:	f7ff ff97 	bl	d080 <getStackedReg>
    d152:	4603      	mov	r3, r0
    d154:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
    d156:	f107 030c 	add.w	r3, r7, #12
    d15a:	4618      	mov	r0, r3
    d15c:	f002 fba6 	bl	f8ac <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
    d160:	2300      	movs	r3, #0
    d162:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    d164:	e7fe      	b.n	d164 <am_util_faultisr_collect_data+0xd8>
    d166:	bf00      	nop
    d168:	e000ed28 	.word	0xe000ed28
    d16c:	e000ed38 	.word	0xe000ed38

0000d170 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    d170:	b480      	push	{r7}
    d172:	b083      	sub	sp, #12
    d174:	af00      	add	r7, sp, #0
    d176:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    d178:	4a04      	ldr	r2, [pc, #16]	; (d18c <am_util_stdio_printf_init+0x1c>)
    d17a:	687b      	ldr	r3, [r7, #4]
    d17c:	6013      	str	r3, [r2, #0]
}
    d17e:	bf00      	nop
    d180:	370c      	adds	r7, #12
    d182:	46bd      	mov	sp, r7
    d184:	f85d 7b04 	ldr.w	r7, [sp], #4
    d188:	4770      	bx	lr
    d18a:	bf00      	nop
    d18c:	10002924 	.word	0x10002924

0000d190 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    d190:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    d194:	b096      	sub	sp, #88	; 0x58
    d196:	af00      	add	r7, sp, #0
    d198:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    d19c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    d1a0:	0025      	movs	r5, r4
    d1a2:	2600      	movs	r6, #0
    d1a4:	ea55 0306 	orrs.w	r3, r5, r6
    d1a8:	f000 80a0 	beq.w	d2ec <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    d1ac:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    d1b0:	0862      	lsrs	r2, r4, #1
    d1b2:	ea4f 0133 	mov.w	r1, r3, rrx
    d1b6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    d1ba:	ea4f 0893 	mov.w	r8, r3, lsr #2
    d1be:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
    d1c2:	ea4f 0994 	mov.w	r9, r4, lsr #2
    d1c6:	eb11 0308 	adds.w	r3, r1, r8
    d1ca:	eb42 0409 	adc.w	r4, r2, r9
    d1ce:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
    d1d2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    d1d6:	ea4f 1a13 	mov.w	sl, r3, lsr #4
    d1da:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
    d1de:	ea4f 1b14 	mov.w	fp, r4, lsr #4
    d1e2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    d1e6:	eb13 030a 	adds.w	r3, r3, sl
    d1ea:	eb44 040b 	adc.w	r4, r4, fp
    d1ee:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
    d1f2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    d1f6:	0a1a      	lsrs	r2, r3, #8
    d1f8:	62ba      	str	r2, [r7, #40]	; 0x28
    d1fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d1fc:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    d200:	62ba      	str	r2, [r7, #40]	; 0x28
    d202:	0a23      	lsrs	r3, r4, #8
    d204:	62fb      	str	r3, [r7, #44]	; 0x2c
    d206:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    d20a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
    d20e:	18c9      	adds	r1, r1, r3
    d210:	eb42 0204 	adc.w	r2, r2, r4
    d214:	460b      	mov	r3, r1
    d216:	4614      	mov	r4, r2
    d218:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
    d21c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    d220:	0c1a      	lsrs	r2, r3, #16
    d222:	623a      	str	r2, [r7, #32]
    d224:	6a3a      	ldr	r2, [r7, #32]
    d226:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    d22a:	623a      	str	r2, [r7, #32]
    d22c:	0c23      	lsrs	r3, r4, #16
    d22e:	627b      	str	r3, [r7, #36]	; 0x24
    d230:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    d234:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
    d238:	18c9      	adds	r1, r1, r3
    d23a:	eb42 0204 	adc.w	r2, r2, r4
    d23e:	460b      	mov	r3, r1
    d240:	4614      	mov	r4, r2
    d242:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
    d246:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    d24a:	0023      	movs	r3, r4
    d24c:	603b      	str	r3, [r7, #0]
    d24e:	2300      	movs	r3, #0
    d250:	607b      	str	r3, [r7, #4]
    d252:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    d256:	e897 0006 	ldmia.w	r7, {r1, r2}
    d25a:	18c9      	adds	r1, r1, r3
    d25c:	eb42 0204 	adc.w	r2, r2, r4
    d260:	460b      	mov	r3, r1
    d262:	4614      	mov	r4, r2
    d264:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
    d268:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    d26c:	08da      	lsrs	r2, r3, #3
    d26e:	613a      	str	r2, [r7, #16]
    d270:	693a      	ldr	r2, [r7, #16]
    d272:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
    d276:	613a      	str	r2, [r7, #16]
    d278:	08e3      	lsrs	r3, r4, #3
    d27a:	617b      	str	r3, [r7, #20]
    d27c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    d280:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
    d284:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    d288:	460b      	mov	r3, r1
    d28a:	4614      	mov	r4, r2
    d28c:	00a0      	lsls	r0, r4, #2
    d28e:	60f8      	str	r0, [r7, #12]
    d290:	68f8      	ldr	r0, [r7, #12]
    d292:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    d296:	60f8      	str	r0, [r7, #12]
    d298:	009b      	lsls	r3, r3, #2
    d29a:	60bb      	str	r3, [r7, #8]
    d29c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    d2a0:	185b      	adds	r3, r3, r1
    d2a2:	eb44 0402 	adc.w	r4, r4, r2
    d2a6:	18db      	adds	r3, r3, r3
    d2a8:	eb44 0404 	adc.w	r4, r4, r4
    d2ac:	4619      	mov	r1, r3
    d2ae:	4622      	mov	r2, r4
    d2b0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    d2b4:	1a5b      	subs	r3, r3, r1
    d2b6:	eb64 0402 	sbc.w	r4, r4, r2
    d2ba:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
    d2be:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    d2c2:	3306      	adds	r3, #6
    d2c4:	f144 0400 	adc.w	r4, r4, #0
    d2c8:	091a      	lsrs	r2, r3, #4
    d2ca:	61ba      	str	r2, [r7, #24]
    d2cc:	69ba      	ldr	r2, [r7, #24]
    d2ce:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
    d2d2:	61ba      	str	r2, [r7, #24]
    d2d4:	0923      	lsrs	r3, r4, #4
    d2d6:	61fb      	str	r3, [r7, #28]
    d2d8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    d2dc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    d2e0:	18c9      	adds	r1, r1, r3
    d2e2:	eb42 0204 	adc.w	r2, r2, r4
    d2e6:	460b      	mov	r3, r1
    d2e8:	4614      	mov	r4, r2
    d2ea:	e029      	b.n	d340 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    d2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d2ee:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
    d2f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d2f2:	085a      	lsrs	r2, r3, #1
    d2f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d2f6:	089b      	lsrs	r3, r3, #2
    d2f8:	4413      	add	r3, r2
    d2fa:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
    d2fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d2fe:	091b      	lsrs	r3, r3, #4
    d300:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    d302:	4413      	add	r3, r2
    d304:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
    d306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d308:	0a1b      	lsrs	r3, r3, #8
    d30a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    d30c:	4413      	add	r3, r2
    d30e:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
    d310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d312:	0c1b      	lsrs	r3, r3, #16
    d314:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    d316:	4413      	add	r3, r2
    d318:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
    d31a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d31c:	08db      	lsrs	r3, r3, #3
    d31e:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
    d320:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    d322:	4613      	mov	r3, r2
    d324:	009b      	lsls	r3, r3, #2
    d326:	4413      	add	r3, r2
    d328:	005b      	lsls	r3, r3, #1
    d32a:	461a      	mov	r2, r3
    d32c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d32e:	1a9b      	subs	r3, r3, r2
    d330:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    d332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d334:	3306      	adds	r3, #6
    d336:	091a      	lsrs	r2, r3, #4
    d338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d33a:	4413      	add	r3, r2
    d33c:	f04f 0400 	mov.w	r4, #0
    }
}
    d340:	4618      	mov	r0, r3
    d342:	4621      	mov	r1, r4
    d344:	3758      	adds	r7, #88	; 0x58
    d346:	46bd      	mov	sp, r7
    d348:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    d34c:	4770      	bx	lr

0000d34e <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    d34e:	b590      	push	{r4, r7, lr}
    d350:	b085      	sub	sp, #20
    d352:	af00      	add	r7, sp, #0
    d354:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    d358:	683a      	ldr	r2, [r7, #0]
    d35a:	687b      	ldr	r3, [r7, #4]
    d35c:	4313      	orrs	r3, r2
    d35e:	2b00      	cmp	r3, #0
    d360:	bf0c      	ite	eq
    d362:	2301      	moveq	r3, #1
    d364:	2300      	movne	r3, #0
    d366:	b2db      	uxtb	r3, r3
    d368:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    d36a:	e008      	b.n	d37e <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    d36c:	e9d7 0100 	ldrd	r0, r1, [r7]
    d370:	f7ff ff0e 	bl	d190 <divu64_10>
    d374:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    d378:	68fb      	ldr	r3, [r7, #12]
    d37a:	3301      	adds	r3, #1
    d37c:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    d37e:	e897 0018 	ldmia.w	r7, {r3, r4}
    d382:	4323      	orrs	r3, r4
    d384:	d1f2      	bne.n	d36c <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    d386:	68fb      	ldr	r3, [r7, #12]
}
    d388:	4618      	mov	r0, r3
    d38a:	3714      	adds	r7, #20
    d38c:	46bd      	mov	sp, r7
    d38e:	bd90      	pop	{r4, r7, pc}

0000d390 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    d390:	b590      	push	{r4, r7, lr}
    d392:	b083      	sub	sp, #12
    d394:	af00      	add	r7, sp, #0
    d396:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    d39a:	e897 0018 	ldmia.w	r7, {r3, r4}
    d39e:	2b00      	cmp	r3, #0
    d3a0:	f174 0300 	sbcs.w	r3, r4, #0
    d3a4:	da06      	bge.n	d3b4 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    d3a6:	e897 0018 	ldmia.w	r7, {r3, r4}
    d3aa:	425b      	negs	r3, r3
    d3ac:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    d3b0:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
    d3b4:	e897 0018 	ldmia.w	r7, {r3, r4}
    d3b8:	4618      	mov	r0, r3
    d3ba:	4621      	mov	r1, r4
    d3bc:	f7ff ffc7 	bl	d34e <ndigits_in_u64>
    d3c0:	4603      	mov	r3, r0
}
    d3c2:	4618      	mov	r0, r3
    d3c4:	370c      	adds	r7, #12
    d3c6:	46bd      	mov	sp, r7
    d3c8:	bd90      	pop	{r4, r7, pc}

0000d3ca <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    d3ca:	b490      	push	{r4, r7}
    d3cc:	b084      	sub	sp, #16
    d3ce:	af00      	add	r7, sp, #0
    d3d0:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    d3d4:	6839      	ldr	r1, [r7, #0]
    d3d6:	687a      	ldr	r2, [r7, #4]
    d3d8:	430a      	orrs	r2, r1
    d3da:	2a00      	cmp	r2, #0
    d3dc:	bf0c      	ite	eq
    d3de:	2201      	moveq	r2, #1
    d3e0:	2200      	movne	r2, #0
    d3e2:	b2d2      	uxtb	r2, r2
    d3e4:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
    d3e6:	e00a      	b.n	d3fe <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
    d3e8:	e897 0006 	ldmia.w	r7, {r1, r2}
    d3ec:	090b      	lsrs	r3, r1, #4
    d3ee:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    d3f2:	0914      	lsrs	r4, r2, #4
    d3f4:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
    d3f8:	68fa      	ldr	r2, [r7, #12]
    d3fa:	3201      	adds	r2, #1
    d3fc:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
    d3fe:	e897 0006 	ldmia.w	r7, {r1, r2}
    d402:	430a      	orrs	r2, r1
    d404:	d1f0      	bne.n	d3e8 <ndigits_in_hex+0x1e>
    }

    return iDigits;
    d406:	68fb      	ldr	r3, [r7, #12]
}
    d408:	4618      	mov	r0, r3
    d40a:	3710      	adds	r7, #16
    d40c:	46bd      	mov	sp, r7
    d40e:	bc90      	pop	{r4, r7}
    d410:	4770      	bx	lr

0000d412 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    d412:	b480      	push	{r7}
    d414:	b087      	sub	sp, #28
    d416:	af00      	add	r7, sp, #0
    d418:	6078      	str	r0, [r7, #4]
    d41a:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    d41c:	2300      	movs	r3, #0
    d41e:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    d420:	2300      	movs	r3, #0
    d422:	613b      	str	r3, [r7, #16]
    d424:	2300      	movs	r3, #0
    d426:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    d428:	687b      	ldr	r3, [r7, #4]
    d42a:	781b      	ldrb	r3, [r3, #0]
    d42c:	2b2d      	cmp	r3, #45	; 0x2d
    d42e:	d11b      	bne.n	d468 <decstr_to_int+0x56>
    {
        bNeg = true;
    d430:	2301      	movs	r3, #1
    d432:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    d434:	687b      	ldr	r3, [r7, #4]
    d436:	3301      	adds	r3, #1
    d438:	607b      	str	r3, [r7, #4]
        uCnt++;
    d43a:	68fb      	ldr	r3, [r7, #12]
    d43c:	3301      	adds	r3, #1
    d43e:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d440:	e012      	b.n	d468 <decstr_to_int+0x56>
    {
        ++uCnt;
    d442:	68fb      	ldr	r3, [r7, #12]
    d444:	3301      	adds	r3, #1
    d446:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    d448:	693a      	ldr	r2, [r7, #16]
    d44a:	4613      	mov	r3, r2
    d44c:	009b      	lsls	r3, r3, #2
    d44e:	4413      	add	r3, r2
    d450:	005b      	lsls	r3, r3, #1
    d452:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    d454:	687b      	ldr	r3, [r7, #4]
    d456:	781b      	ldrb	r3, [r3, #0]
    d458:	461a      	mov	r2, r3
    d45a:	693b      	ldr	r3, [r7, #16]
    d45c:	4413      	add	r3, r2
    d45e:	3b30      	subs	r3, #48	; 0x30
    d460:	613b      	str	r3, [r7, #16]
        pcStr++;
    d462:	687b      	ldr	r3, [r7, #4]
    d464:	3301      	adds	r3, #1
    d466:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d468:	687b      	ldr	r3, [r7, #4]
    d46a:	781b      	ldrb	r3, [r3, #0]
    d46c:	2b2f      	cmp	r3, #47	; 0x2f
    d46e:	d903      	bls.n	d478 <decstr_to_int+0x66>
    d470:	687b      	ldr	r3, [r7, #4]
    d472:	781b      	ldrb	r3, [r3, #0]
    d474:	2b39      	cmp	r3, #57	; 0x39
    d476:	d9e4      	bls.n	d442 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    d478:	683b      	ldr	r3, [r7, #0]
    d47a:	2b00      	cmp	r3, #0
    d47c:	d002      	beq.n	d484 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    d47e:	683b      	ldr	r3, [r7, #0]
    d480:	68fa      	ldr	r2, [r7, #12]
    d482:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    d484:	7dfb      	ldrb	r3, [r7, #23]
    d486:	2b00      	cmp	r3, #0
    d488:	d002      	beq.n	d490 <decstr_to_int+0x7e>
    d48a:	693b      	ldr	r3, [r7, #16]
    d48c:	425b      	negs	r3, r3
    d48e:	e000      	b.n	d492 <decstr_to_int+0x80>
    d490:	693b      	ldr	r3, [r7, #16]
}
    d492:	4618      	mov	r0, r3
    d494:	371c      	adds	r7, #28
    d496:	46bd      	mov	sp, r7
    d498:	f85d 7b04 	ldr.w	r7, [sp], #4
    d49c:	4770      	bx	lr

0000d49e <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    d49e:	b590      	push	{r4, r7, lr}
    d4a0:	b091      	sub	sp, #68	; 0x44
    d4a2:	af00      	add	r7, sp, #0
    d4a4:	e9c7 0102 	strd	r0, r1, [r7, #8]
    d4a8:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    d4aa:	2300      	movs	r3, #0
    d4ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    d4ae:	2300      	movs	r3, #0
    d4b0:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    d4b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    d4b6:	f7ff fe6b 	bl	d190 <divu64_10>
    d4ba:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    d4be:	68b9      	ldr	r1, [r7, #8]
    d4c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d4c2:	4613      	mov	r3, r2
    d4c4:	009b      	lsls	r3, r3, #2
    d4c6:	4413      	add	r3, r2
    d4c8:	005b      	lsls	r3, r3, #1
    d4ca:	1acb      	subs	r3, r1, r3
    d4cc:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    d4ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d4d0:	1c5a      	adds	r2, r3, #1
    d4d2:	63fa      	str	r2, [r7, #60]	; 0x3c
    d4d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    d4d6:	b2d2      	uxtb	r2, r2
    d4d8:	3230      	adds	r2, #48	; 0x30
    d4da:	b2d2      	uxtb	r2, r2
    d4dc:	f107 0140 	add.w	r1, r7, #64	; 0x40
    d4e0:	440b      	add	r3, r1
    d4e2:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    d4e6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    d4ea:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    d4ee:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    d4f2:	4323      	orrs	r3, r4
    d4f4:	d1dd      	bne.n	d4b2 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    d4f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d4f8:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    d4fa:	687b      	ldr	r3, [r7, #4]
    d4fc:	2b00      	cmp	r3, #0
    d4fe:	d011      	beq.n	d524 <uint64_to_str+0x86>
    {
        while ( ix-- )
    d500:	e008      	b.n	d514 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    d502:	687b      	ldr	r3, [r7, #4]
    d504:	1c5a      	adds	r2, r3, #1
    d506:	607a      	str	r2, [r7, #4]
    d508:	f107 0110 	add.w	r1, r7, #16
    d50c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d50e:	440a      	add	r2, r1
    d510:	7812      	ldrb	r2, [r2, #0]
    d512:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    d514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d516:	1e5a      	subs	r2, r3, #1
    d518:	63fa      	str	r2, [r7, #60]	; 0x3c
    d51a:	2b00      	cmp	r3, #0
    d51c:	d1f1      	bne.n	d502 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    d51e:	687b      	ldr	r3, [r7, #4]
    d520:	2200      	movs	r2, #0
    d522:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    d524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    d526:	4618      	mov	r0, r3
    d528:	3744      	adds	r7, #68	; 0x44
    d52a:	46bd      	mov	sp, r7
    d52c:	bd90      	pop	{r4, r7, pc}

0000d52e <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    d52e:	b4b0      	push	{r4, r5, r7}
    d530:	b08d      	sub	sp, #52	; 0x34
    d532:	af00      	add	r7, sp, #0
    d534:	e9c7 0102 	strd	r0, r1, [r7, #8]
    d538:	607a      	str	r2, [r7, #4]
    d53a:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    d53c:	2300      	movs	r3, #0
    d53e:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    d540:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    d544:	4313      	orrs	r3, r2
    d546:	d131      	bne.n	d5ac <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
    d548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d54a:	1c5a      	adds	r2, r3, #1
    d54c:	62fa      	str	r2, [r7, #44]	; 0x2c
    d54e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    d552:	4413      	add	r3, r2
    d554:	2230      	movs	r2, #48	; 0x30
    d556:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    d55a:	e027      	b.n	d5ac <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
    d55c:	7a3b      	ldrb	r3, [r7, #8]
    d55e:	f003 030f 	and.w	r3, r3, #15
    d562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    d566:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    d56a:	2b09      	cmp	r3, #9
    d56c:	d90a      	bls.n	d584 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    d56e:	78fb      	ldrb	r3, [r7, #3]
    d570:	2b00      	cmp	r3, #0
    d572:	d001      	beq.n	d578 <uint64_to_hexstr+0x4a>
    d574:	2227      	movs	r2, #39	; 0x27
    d576:	e000      	b.n	d57a <uint64_to_hexstr+0x4c>
    d578:	2207      	movs	r2, #7
    d57a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    d57e:	4413      	add	r3, r2
    d580:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    d584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d586:	1c5a      	adds	r2, r3, #1
    d588:	62fa      	str	r2, [r7, #44]	; 0x2c
    d58a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    d58e:	3230      	adds	r2, #48	; 0x30
    d590:	b2d2      	uxtb	r2, r2
    d592:	f107 0130 	add.w	r1, r7, #48	; 0x30
    d596:	440b      	add	r3, r1
    d598:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    d59c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    d5a0:	0914      	lsrs	r4, r2, #4
    d5a2:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    d5a6:	091d      	lsrs	r5, r3, #4
    d5a8:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
    d5ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    d5b0:	4313      	orrs	r3, r2
    d5b2:	d1d3      	bne.n	d55c <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    d5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d5b6:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    d5b8:	687b      	ldr	r3, [r7, #4]
    d5ba:	2b00      	cmp	r3, #0
    d5bc:	d011      	beq.n	d5e2 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
    d5be:	e008      	b.n	d5d2 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
    d5c0:	687b      	ldr	r3, [r7, #4]
    d5c2:	1c5a      	adds	r2, r3, #1
    d5c4:	607a      	str	r2, [r7, #4]
    d5c6:	f107 0110 	add.w	r1, r7, #16
    d5ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    d5cc:	440a      	add	r2, r1
    d5ce:	7812      	ldrb	r2, [r2, #0]
    d5d0:	701a      	strb	r2, [r3, #0]
        while (ix--)
    d5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d5d4:	1e5a      	subs	r2, r3, #1
    d5d6:	62fa      	str	r2, [r7, #44]	; 0x2c
    d5d8:	2b00      	cmp	r3, #0
    d5da:	d1f1      	bne.n	d5c0 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    d5dc:	687b      	ldr	r3, [r7, #4]
    d5de:	2200      	movs	r2, #0
    d5e0:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    d5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d5e4:	4618      	mov	r0, r3
    d5e6:	3734      	adds	r7, #52	; 0x34
    d5e8:	46bd      	mov	sp, r7
    d5ea:	bcb0      	pop	{r4, r5, r7}
    d5ec:	4770      	bx	lr

0000d5ee <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    d5ee:	b480      	push	{r7}
    d5f0:	b085      	sub	sp, #20
    d5f2:	af00      	add	r7, sp, #0
    d5f4:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    d5f6:	2300      	movs	r3, #0
    d5f8:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    d5fa:	687b      	ldr	r3, [r7, #4]
    d5fc:	2b00      	cmp	r3, #0
    d5fe:	d104      	bne.n	d60a <simple_strlen+0x1c>
    {
        return ui32RetVal;
    d600:	68fb      	ldr	r3, [r7, #12]
    d602:	e009      	b.n	d618 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    d604:	68fb      	ldr	r3, [r7, #12]
    d606:	3301      	adds	r3, #1
    d608:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    d60a:	687b      	ldr	r3, [r7, #4]
    d60c:	1c5a      	adds	r2, r3, #1
    d60e:	607a      	str	r2, [r7, #4]
    d610:	781b      	ldrb	r3, [r3, #0]
    d612:	2b00      	cmp	r3, #0
    d614:	d1f6      	bne.n	d604 <simple_strlen+0x16>
    }
    return ui32RetVal;
    d616:	68fb      	ldr	r3, [r7, #12]
}
    d618:	4618      	mov	r0, r3
    d61a:	3714      	adds	r7, #20
    d61c:	46bd      	mov	sp, r7
    d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d622:	4770      	bx	lr

0000d624 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    d624:	b480      	push	{r7}
    d626:	b087      	sub	sp, #28
    d628:	af00      	add	r7, sp, #0
    d62a:	60f8      	str	r0, [r7, #12]
    d62c:	460b      	mov	r3, r1
    d62e:	607a      	str	r2, [r7, #4]
    d630:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    d632:	2300      	movs	r3, #0
    d634:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    d636:	687b      	ldr	r3, [r7, #4]
    d638:	2b00      	cmp	r3, #0
    d63a:	dc0c      	bgt.n	d656 <padbuffer+0x32>
    {
        return i32Cnt;
    d63c:	697b      	ldr	r3, [r7, #20]
    d63e:	e010      	b.n	d662 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    d640:	68fb      	ldr	r3, [r7, #12]
    d642:	2b00      	cmp	r3, #0
    d644:	d004      	beq.n	d650 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    d646:	68fb      	ldr	r3, [r7, #12]
    d648:	1c5a      	adds	r2, r3, #1
    d64a:	60fa      	str	r2, [r7, #12]
    d64c:	7afa      	ldrb	r2, [r7, #11]
    d64e:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    d650:	697b      	ldr	r3, [r7, #20]
    d652:	3301      	adds	r3, #1
    d654:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    d656:	687b      	ldr	r3, [r7, #4]
    d658:	1e5a      	subs	r2, r3, #1
    d65a:	607a      	str	r2, [r7, #4]
    d65c:	2b00      	cmp	r3, #0
    d65e:	d1ef      	bne.n	d640 <padbuffer+0x1c>
    }

    return i32Cnt;
    d660:	697b      	ldr	r3, [r7, #20]
}
    d662:	4618      	mov	r0, r3
    d664:	371c      	adds	r7, #28
    d666:	46bd      	mov	sp, r7
    d668:	f85d 7b04 	ldr.w	r7, [sp], #4
    d66c:	4770      	bx	lr
	...

0000d670 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    d670:	b590      	push	{r4, r7, lr}
    d672:	b08f      	sub	sp, #60	; 0x3c
    d674:	af00      	add	r7, sp, #0
    d676:	60f8      	str	r0, [r7, #12]
    d678:	60b9      	str	r1, [r7, #8]
    d67a:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    d67c:	68bb      	ldr	r3, [r7, #8]
    d67e:	681b      	ldr	r3, [r3, #0]
    d680:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    d682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d684:	2b03      	cmp	r3, #3
    d686:	dc02      	bgt.n	d68e <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    d688:	f06f 0302 	mvn.w	r3, #2
    d68c:	e0e7      	b.n	d85e <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
    d68e:	edd7 7a03 	vldr	s15, [r7, #12]
    d692:	eef5 7a40 	vcmp.f32	s15, #0.0
    d696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d69a:	d104      	bne.n	d6a6 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    d69c:	68bb      	ldr	r3, [r7, #8]
    d69e:	4a72      	ldr	r2, [pc, #456]	; (d868 <ftoa+0x1f8>)
    d6a0:	601a      	str	r2, [r3, #0]
        return 3;
    d6a2:	2303      	movs	r3, #3
    d6a4:	e0db      	b.n	d85e <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
    d6a6:	68bb      	ldr	r3, [r7, #8]
    d6a8:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    d6aa:	68fb      	ldr	r3, [r7, #12]
    d6ac:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    d6ae:	693b      	ldr	r3, [r7, #16]
    d6b0:	15db      	asrs	r3, r3, #23
    d6b2:	b2db      	uxtb	r3, r3
    d6b4:	3b7f      	subs	r3, #127	; 0x7f
    d6b6:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    d6b8:	693b      	ldr	r3, [r7, #16]
    d6ba:	f3c3 0316 	ubfx	r3, r3, #0, #23
    d6be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    d6c2:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    d6c4:	2300      	movs	r3, #0
    d6c6:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    d6c8:	2300      	movs	r3, #0
    d6ca:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    d6cc:	69fb      	ldr	r3, [r7, #28]
    d6ce:	2b1e      	cmp	r3, #30
    d6d0:	dd02      	ble.n	d6d8 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    d6d2:	f06f 0301 	mvn.w	r3, #1
    d6d6:	e0c2      	b.n	d85e <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
    d6d8:	69fb      	ldr	r3, [r7, #28]
    d6da:	f113 0f17 	cmn.w	r3, #23
    d6de:	da02      	bge.n	d6e6 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    d6e0:	f04f 33ff 	mov.w	r3, #4294967295
    d6e4:	e0bb      	b.n	d85e <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
    d6e6:	69fb      	ldr	r3, [r7, #28]
    d6e8:	2b16      	cmp	r3, #22
    d6ea:	dd06      	ble.n	d6fa <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    d6ec:	69fb      	ldr	r3, [r7, #28]
    d6ee:	3b17      	subs	r3, #23
    d6f0:	69ba      	ldr	r2, [r7, #24]
    d6f2:	fa02 f303 	lsl.w	r3, r2, r3
    d6f6:	637b      	str	r3, [r7, #52]	; 0x34
    d6f8:	e01a      	b.n	d730 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    d6fa:	69fb      	ldr	r3, [r7, #28]
    d6fc:	2b00      	cmp	r3, #0
    d6fe:	db0f      	blt.n	d720 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    d700:	69fb      	ldr	r3, [r7, #28]
    d702:	f1c3 0317 	rsb	r3, r3, #23
    d706:	69ba      	ldr	r2, [r7, #24]
    d708:	fa42 f303 	asr.w	r3, r2, r3
    d70c:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d70e:	69fb      	ldr	r3, [r7, #28]
    d710:	3301      	adds	r3, #1
    d712:	69ba      	ldr	r2, [r7, #24]
    d714:	fa02 f303 	lsl.w	r3, r2, r3
    d718:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d71c:	633b      	str	r3, [r7, #48]	; 0x30
    d71e:	e007      	b.n	d730 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d720:	69bb      	ldr	r3, [r7, #24]
    d722:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    d726:	69fb      	ldr	r3, [r7, #28]
    d728:	43db      	mvns	r3, r3
    d72a:	fa42 f303 	asr.w	r3, r2, r3
    d72e:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    d730:	693b      	ldr	r3, [r7, #16]
    d732:	2b00      	cmp	r3, #0
    d734:	da04      	bge.n	d740 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    d736:	68bb      	ldr	r3, [r7, #8]
    d738:	1c5a      	adds	r2, r3, #1
    d73a:	60ba      	str	r2, [r7, #8]
    d73c:	222d      	movs	r2, #45	; 0x2d
    d73e:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    d740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d742:	2b00      	cmp	r3, #0
    d744:	d105      	bne.n	d752 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    d746:	68bb      	ldr	r3, [r7, #8]
    d748:	1c5a      	adds	r2, r3, #1
    d74a:	60ba      	str	r2, [r7, #8]
    d74c:	2230      	movs	r2, #48	; 0x30
    d74e:	701a      	strb	r2, [r3, #0]
    d750:	e021      	b.n	d796 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    d752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d754:	2b00      	cmp	r3, #0
    d756:	dd08      	ble.n	d76a <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    d758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d75a:	ea4f 74e3 	mov.w	r4, r3, asr #31
    d75e:	68ba      	ldr	r2, [r7, #8]
    d760:	4618      	mov	r0, r3
    d762:	4621      	mov	r1, r4
    d764:	f7ff fe9b 	bl	d49e <uint64_to_str>
    d768:	e011      	b.n	d78e <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    d76a:	68bb      	ldr	r3, [r7, #8]
    d76c:	1c5a      	adds	r2, r3, #1
    d76e:	60ba      	str	r2, [r7, #8]
    d770:	222d      	movs	r2, #45	; 0x2d
    d772:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    d774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d776:	425b      	negs	r3, r3
    d778:	ea4f 74e3 	mov.w	r4, r3, asr #31
    d77c:	68ba      	ldr	r2, [r7, #8]
    d77e:	4618      	mov	r0, r3
    d780:	4621      	mov	r1, r4
    d782:	f7ff fe8c 	bl	d49e <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    d786:	e002      	b.n	d78e <ftoa+0x11e>
        {
            pcBuf++;
    d788:	68bb      	ldr	r3, [r7, #8]
    d78a:	3301      	adds	r3, #1
    d78c:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    d78e:	68bb      	ldr	r3, [r7, #8]
    d790:	781b      	ldrb	r3, [r3, #0]
    d792:	2b00      	cmp	r3, #0
    d794:	d1f8      	bne.n	d788 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    d796:	68bb      	ldr	r3, [r7, #8]
    d798:	1c5a      	adds	r2, r3, #1
    d79a:	60ba      	str	r2, [r7, #8]
    d79c:	222e      	movs	r2, #46	; 0x2e
    d79e:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    d7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d7a2:	2b00      	cmp	r3, #0
    d7a4:	d105      	bne.n	d7b2 <ftoa+0x142>
    {
        *pcBuf++ = '0';
    d7a6:	68bb      	ldr	r3, [r7, #8]
    d7a8:	1c5a      	adds	r2, r3, #1
    d7aa:	60ba      	str	r2, [r7, #8]
    d7ac:	2230      	movs	r2, #48	; 0x30
    d7ae:	701a      	strb	r2, [r3, #0]
    d7b0:	e04f      	b.n	d852 <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    d7b2:	68ba      	ldr	r2, [r7, #8]
    d7b4:	6a3b      	ldr	r3, [r7, #32]
    d7b6:	1ad3      	subs	r3, r2, r3
    d7b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d7ba:	1ad3      	subs	r3, r2, r3
    d7bc:	3b01      	subs	r3, #1
    d7be:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    d7c0:	697a      	ldr	r2, [r7, #20]
    d7c2:	687b      	ldr	r3, [r7, #4]
    d7c4:	4293      	cmp	r3, r2
    d7c6:	bfa8      	it	ge
    d7c8:	4613      	movge	r3, r2
    d7ca:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    d7cc:	2300      	movs	r3, #0
    d7ce:	62bb      	str	r3, [r7, #40]	; 0x28
    d7d0:	e015      	b.n	d7fe <ftoa+0x18e>
        {
            i32FracPart *= 10;
    d7d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d7d4:	4613      	mov	r3, r2
    d7d6:	009b      	lsls	r3, r3, #2
    d7d8:	4413      	add	r3, r2
    d7da:	005b      	lsls	r3, r3, #1
    d7dc:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d7de:	68bb      	ldr	r3, [r7, #8]
    d7e0:	1c5a      	adds	r2, r3, #1
    d7e2:	60ba      	str	r2, [r7, #8]
    d7e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d7e6:	1612      	asrs	r2, r2, #24
    d7e8:	b2d2      	uxtb	r2, r2
    d7ea:	3230      	adds	r2, #48	; 0x30
    d7ec:	b2d2      	uxtb	r2, r2
    d7ee:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    d7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d7f2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d7f6:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    d7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d7fa:	3301      	adds	r3, #1
    d7fc:	62bb      	str	r3, [r7, #40]	; 0x28
    d7fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d800:	697b      	ldr	r3, [r7, #20]
    d802:	429a      	cmp	r2, r3
    d804:	dbe5      	blt.n	d7d2 <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    d806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d808:	4613      	mov	r3, r2
    d80a:	009b      	lsls	r3, r3, #2
    d80c:	4413      	add	r3, r2
    d80e:	005b      	lsls	r3, r3, #1
    d810:	161b      	asrs	r3, r3, #24
    d812:	2b04      	cmp	r3, #4
    d814:	dd1d      	ble.n	d852 <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    d816:	68bb      	ldr	r3, [r7, #8]
    d818:	3b01      	subs	r3, #1
    d81a:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    d81c:	e015      	b.n	d84a <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
    d81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d820:	781b      	ldrb	r3, [r3, #0]
    d822:	2b2e      	cmp	r3, #46	; 0x2e
    d824:	d00e      	beq.n	d844 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
    d826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d828:	781b      	ldrb	r3, [r3, #0]
    d82a:	2b39      	cmp	r3, #57	; 0x39
    d82c:	d103      	bne.n	d836 <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
    d82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d830:	2230      	movs	r2, #48	; 0x30
    d832:	701a      	strb	r2, [r3, #0]
    d834:	e006      	b.n	d844 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
    d836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d838:	781b      	ldrb	r3, [r3, #0]
    d83a:	3301      	adds	r3, #1
    d83c:	b2da      	uxtb	r2, r3
    d83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d840:	701a      	strb	r2, [r3, #0]
                    break;
    d842:	e006      	b.n	d852 <ftoa+0x1e2>
                }
                pcBuftmp--;
    d844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d846:	3b01      	subs	r3, #1
    d848:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    d84a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    d84c:	6a3b      	ldr	r3, [r7, #32]
    d84e:	429a      	cmp	r2, r3
    d850:	d2e5      	bcs.n	d81e <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    d852:	68bb      	ldr	r3, [r7, #8]
    d854:	2200      	movs	r2, #0
    d856:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    d858:	68ba      	ldr	r2, [r7, #8]
    d85a:	6a3b      	ldr	r3, [r7, #32]
    d85c:	1ad3      	subs	r3, r2, r3
} // ftoa()
    d85e:	4618      	mov	r0, r3
    d860:	373c      	adds	r7, #60	; 0x3c
    d862:	46bd      	mov	sp, r7
    d864:	bd90      	pop	{r4, r7, pc}
    d866:	bf00      	nop
    d868:	00302e30 	.word	0x00302e30

0000d86c <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    d86c:	b590      	push	{r4, r7, lr}
    d86e:	b095      	sub	sp, #84	; 0x54
    d870:	af00      	add	r7, sp, #0
    d872:	60f8      	str	r0, [r7, #12]
    d874:	60b9      	str	r1, [r7, #8]
    d876:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    d878:	2300      	movs	r3, #0
    d87a:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    d87c:	2300      	movs	r3, #0
    d87e:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    d880:	e2e3      	b.n	de4a <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    d882:	2306      	movs	r3, #6
    d884:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    d886:	68bb      	ldr	r3, [r7, #8]
    d888:	781b      	ldrb	r3, [r3, #0]
    d88a:	2b25      	cmp	r3, #37	; 0x25
    d88c:	d01f      	beq.n	d8ce <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    d88e:	68fb      	ldr	r3, [r7, #12]
    d890:	2b00      	cmp	r3, #0
    d892:	d015      	beq.n	d8c0 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    d894:	68bb      	ldr	r3, [r7, #8]
    d896:	781b      	ldrb	r3, [r3, #0]
    d898:	2b0a      	cmp	r3, #10
    d89a:	d10b      	bne.n	d8b4 <am_util_stdio_vsprintf+0x48>
    d89c:	4bb1      	ldr	r3, [pc, #708]	; (db64 <am_util_stdio_vsprintf+0x2f8>)
    d89e:	781b      	ldrb	r3, [r3, #0]
    d8a0:	2b00      	cmp	r3, #0
    d8a2:	d007      	beq.n	d8b4 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    d8a4:	68fb      	ldr	r3, [r7, #12]
    d8a6:	1c5a      	adds	r2, r3, #1
    d8a8:	60fa      	str	r2, [r7, #12]
    d8aa:	220d      	movs	r2, #13
    d8ac:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    d8ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d8b0:	3301      	adds	r3, #1
    d8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    d8b4:	68fb      	ldr	r3, [r7, #12]
    d8b6:	1c5a      	adds	r2, r3, #1
    d8b8:	60fa      	str	r2, [r7, #12]
    d8ba:	68ba      	ldr	r2, [r7, #8]
    d8bc:	7812      	ldrb	r2, [r2, #0]
    d8be:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    d8c0:	68bb      	ldr	r3, [r7, #8]
    d8c2:	3301      	adds	r3, #1
    d8c4:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    d8c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d8c8:	3301      	adds	r3, #1
    d8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    d8cc:	e2bd      	b.n	de4a <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    d8ce:	68bb      	ldr	r3, [r7, #8]
    d8d0:	3301      	adds	r3, #1
    d8d2:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    d8d4:	2300      	movs	r3, #0
    d8d6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    d8da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d8de:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    d8e2:	2320      	movs	r3, #32
    d8e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    d8e8:	68bb      	ldr	r3, [r7, #8]
    d8ea:	781b      	ldrb	r3, [r3, #0]
    d8ec:	2b30      	cmp	r3, #48	; 0x30
    d8ee:	d105      	bne.n	d8fc <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    d8f0:	2330      	movs	r3, #48	; 0x30
    d8f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    d8f6:	68bb      	ldr	r3, [r7, #8]
    d8f8:	3301      	adds	r3, #1
    d8fa:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    d8fc:	f107 0310 	add.w	r3, r7, #16
    d900:	4619      	mov	r1, r3
    d902:	68b8      	ldr	r0, [r7, #8]
    d904:	f7ff fd85 	bl	d412 <decstr_to_int>
    d908:	4603      	mov	r3, r0
    d90a:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    d90c:	693b      	ldr	r3, [r7, #16]
    d90e:	68ba      	ldr	r2, [r7, #8]
    d910:	4413      	add	r3, r2
    d912:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    d914:	68bb      	ldr	r3, [r7, #8]
    d916:	781b      	ldrb	r3, [r3, #0]
    d918:	2b73      	cmp	r3, #115	; 0x73
    d91a:	d005      	beq.n	d928 <am_util_stdio_vsprintf+0xbc>
    d91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d91e:	2b00      	cmp	r3, #0
    d920:	da02      	bge.n	d928 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    d922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d924:	425b      	negs	r3, r3
    d926:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    d928:	68bb      	ldr	r3, [r7, #8]
    d92a:	781b      	ldrb	r3, [r3, #0]
    d92c:	2b2e      	cmp	r3, #46	; 0x2e
    d92e:	d10e      	bne.n	d94e <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    d930:	68bb      	ldr	r3, [r7, #8]
    d932:	3301      	adds	r3, #1
    d934:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    d936:	f107 0310 	add.w	r3, r7, #16
    d93a:	4619      	mov	r1, r3
    d93c:	68b8      	ldr	r0, [r7, #8]
    d93e:	f7ff fd68 	bl	d412 <decstr_to_int>
    d942:	4603      	mov	r3, r0
    d944:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    d946:	693b      	ldr	r3, [r7, #16]
    d948:	68ba      	ldr	r2, [r7, #8]
    d94a:	4413      	add	r3, r2
    d94c:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    d94e:	68bb      	ldr	r3, [r7, #8]
    d950:	781b      	ldrb	r3, [r3, #0]
    d952:	2b6c      	cmp	r3, #108	; 0x6c
    d954:	d10c      	bne.n	d970 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    d956:	68bb      	ldr	r3, [r7, #8]
    d958:	3301      	adds	r3, #1
    d95a:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    d95c:	68bb      	ldr	r3, [r7, #8]
    d95e:	781b      	ldrb	r3, [r3, #0]
    d960:	2b6c      	cmp	r3, #108	; 0x6c
    d962:	d105      	bne.n	d970 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    d964:	68bb      	ldr	r3, [r7, #8]
    d966:	3301      	adds	r3, #1
    d968:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    d96a:	2301      	movs	r3, #1
    d96c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    d970:	68bb      	ldr	r3, [r7, #8]
    d972:	781b      	ldrb	r3, [r3, #0]
    d974:	3b46      	subs	r3, #70	; 0x46
    d976:	2b32      	cmp	r3, #50	; 0x32
    d978:	f200 8254 	bhi.w	de24 <am_util_stdio_vsprintf+0x5b8>
    d97c:	a201      	add	r2, pc, #4	; (adr r2, d984 <am_util_stdio_vsprintf+0x118>)
    d97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d982:	bf00      	nop
    d984:	0000ddaf 	.word	0x0000ddaf
    d988:	0000de25 	.word	0x0000de25
    d98c:	0000de25 	.word	0x0000de25
    d990:	0000de25 	.word	0x0000de25
    d994:	0000de25 	.word	0x0000de25
    d998:	0000de25 	.word	0x0000de25
    d99c:	0000de25 	.word	0x0000de25
    d9a0:	0000de25 	.word	0x0000de25
    d9a4:	0000de25 	.word	0x0000de25
    d9a8:	0000de25 	.word	0x0000de25
    d9ac:	0000de25 	.word	0x0000de25
    d9b0:	0000de25 	.word	0x0000de25
    d9b4:	0000de25 	.word	0x0000de25
    d9b8:	0000de25 	.word	0x0000de25
    d9bc:	0000de25 	.word	0x0000de25
    d9c0:	0000de25 	.word	0x0000de25
    d9c4:	0000de25 	.word	0x0000de25
    d9c8:	0000de25 	.word	0x0000de25
    d9cc:	0000db4b 	.word	0x0000db4b
    d9d0:	0000de25 	.word	0x0000de25
    d9d4:	0000de25 	.word	0x0000de25
    d9d8:	0000de25 	.word	0x0000de25
    d9dc:	0000de25 	.word	0x0000de25
    d9e0:	0000de25 	.word	0x0000de25
    d9e4:	0000de25 	.word	0x0000de25
    d9e8:	0000de25 	.word	0x0000de25
    d9ec:	0000de25 	.word	0x0000de25
    d9f0:	0000de25 	.word	0x0000de25
    d9f4:	0000de25 	.word	0x0000de25
    d9f8:	0000da51 	.word	0x0000da51
    d9fc:	0000dc77 	.word	0x0000dc77
    da00:	0000de25 	.word	0x0000de25
    da04:	0000ddaf 	.word	0x0000ddaf
    da08:	0000de25 	.word	0x0000de25
    da0c:	0000de25 	.word	0x0000de25
    da10:	0000dc77 	.word	0x0000dc77
    da14:	0000de25 	.word	0x0000de25
    da18:	0000de25 	.word	0x0000de25
    da1c:	0000de25 	.word	0x0000de25
    da20:	0000de25 	.word	0x0000de25
    da24:	0000de25 	.word	0x0000de25
    da28:	0000de25 	.word	0x0000de25
    da2c:	0000de25 	.word	0x0000de25
    da30:	0000de25 	.word	0x0000de25
    da34:	0000de25 	.word	0x0000de25
    da38:	0000da77 	.word	0x0000da77
    da3c:	0000de25 	.word	0x0000de25
    da40:	0000dbe5 	.word	0x0000dbe5
    da44:	0000de25 	.word	0x0000de25
    da48:	0000de25 	.word	0x0000de25
    da4c:	0000db45 	.word	0x0000db45
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    da50:	687b      	ldr	r3, [r7, #4]
    da52:	1d1a      	adds	r2, r3, #4
    da54:	607a      	str	r2, [r7, #4]
    da56:	681b      	ldr	r3, [r3, #0]
    da58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    da5c:	68fb      	ldr	r3, [r7, #12]
    da5e:	2b00      	cmp	r3, #0
    da60:	d005      	beq.n	da6e <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    da62:	68fb      	ldr	r3, [r7, #12]
    da64:	1c5a      	adds	r2, r3, #1
    da66:	60fa      	str	r2, [r7, #12]
    da68:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    da6c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    da6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    da70:	3301      	adds	r3, #1
    da72:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    da74:	e1e6      	b.n	de44 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    da76:	687b      	ldr	r3, [r7, #4]
    da78:	1d1a      	adds	r2, r3, #4
    da7a:	607a      	str	r2, [r7, #4]
    da7c:	681b      	ldr	r3, [r3, #0]
    da7e:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    da80:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    da82:	f7ff fdb4 	bl	d5ee <simple_strlen>
    da86:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    da88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    da8a:	2b00      	cmp	r3, #0
    da8c:	dd2e      	ble.n	daec <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    da8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    da90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    da92:	429a      	cmp	r2, r3
    da94:	d22a      	bcs.n	daec <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    da96:	6bba      	ldr	r2, [r7, #56]	; 0x38
    da98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    da9a:	1ad3      	subs	r3, r2, r3
    da9c:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    da9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    daa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    daa4:	4619      	mov	r1, r3
    daa6:	68f8      	ldr	r0, [r7, #12]
    daa8:	f7ff fdbc 	bl	d624 <padbuffer>
    daac:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    daae:	68fb      	ldr	r3, [r7, #12]
    dab0:	2b00      	cmp	r3, #0
    dab2:	d001      	beq.n	dab8 <am_util_stdio_vsprintf+0x24c>
    dab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dab6:	e000      	b.n	daba <am_util_stdio_vsprintf+0x24e>
    dab8:	2300      	movs	r3, #0
    daba:	68fa      	ldr	r2, [r7, #12]
    dabc:	4413      	add	r3, r2
    dabe:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    dac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dac2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    dac4:	4413      	add	r3, r2
    dac6:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    dac8:	2300      	movs	r3, #0
    daca:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    dacc:	e00e      	b.n	daec <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    dace:	68fb      	ldr	r3, [r7, #12]
    dad0:	2b00      	cmp	r3, #0
    dad2:	d005      	beq.n	dae0 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    dad4:	68fb      	ldr	r3, [r7, #12]
    dad6:	1c5a      	adds	r2, r3, #1
    dad8:	60fa      	str	r2, [r7, #12]
    dada:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    dadc:	7812      	ldrb	r2, [r2, #0]
    dade:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    dae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    dae2:	3301      	adds	r3, #1
    dae4:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    dae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dae8:	3301      	adds	r3, #1
    daea:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    daec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    daee:	781b      	ldrb	r3, [r3, #0]
    daf0:	2b00      	cmp	r3, #0
    daf2:	d1ec      	bne.n	dace <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    daf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    daf6:	2b00      	cmp	r3, #0
    daf8:	f000 81a1 	beq.w	de3e <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    dafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dafe:	425b      	negs	r3, r3
    db00:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    db02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    db04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    db06:	429a      	cmp	r2, r3
    db08:	f080 8199 	bcs.w	de3e <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    db0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    db0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    db10:	1ad3      	subs	r3, r2, r3
    db12:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    db14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    db18:	6bba      	ldr	r2, [r7, #56]	; 0x38
    db1a:	4619      	mov	r1, r3
    db1c:	68f8      	ldr	r0, [r7, #12]
    db1e:	f7ff fd81 	bl	d624 <padbuffer>
    db22:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    db24:	68fb      	ldr	r3, [r7, #12]
    db26:	2b00      	cmp	r3, #0
    db28:	d001      	beq.n	db2e <am_util_stdio_vsprintf+0x2c2>
    db2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    db2c:	e000      	b.n	db30 <am_util_stdio_vsprintf+0x2c4>
    db2e:	2300      	movs	r3, #0
    db30:	68fa      	ldr	r2, [r7, #12]
    db32:	4413      	add	r3, r2
    db34:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    db36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    db38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    db3a:	4413      	add	r3, r2
    db3c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    db3e:	2300      	movs	r3, #0
    db40:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    db42:	e17c      	b.n	de3e <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    db44:	2301      	movs	r3, #1
    db46:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    db4a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    db4e:	2b00      	cmp	r3, #0
    db50:	d00a      	beq.n	db68 <am_util_stdio_vsprintf+0x2fc>
    db52:	687b      	ldr	r3, [r7, #4]
    db54:	3307      	adds	r3, #7
    db56:	f023 0307 	bic.w	r3, r3, #7
    db5a:	f103 0208 	add.w	r2, r3, #8
    db5e:	607a      	str	r2, [r7, #4]
    db60:	cb18      	ldmia	r3, {r3, r4}
    db62:	e007      	b.n	db74 <am_util_stdio_vsprintf+0x308>
    db64:	10002600 	.word	0x10002600
                                      va_arg(pArgs, uint32_t);
    db68:	687b      	ldr	r3, [r7, #4]
    db6a:	1d1a      	adds	r2, r3, #4
    db6c:	607a      	str	r2, [r7, #4]
    db6e:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    db70:	f04f 0400 	mov.w	r4, #0
    db74:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    db78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    db7a:	2b00      	cmp	r3, #0
    db7c:	d01e      	beq.n	dbbc <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    db7e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    db82:	f7ff fc22 	bl	d3ca <ndigits_in_hex>
    db86:	4602      	mov	r2, r0
    db88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    db8a:	1a9b      	subs	r3, r3, r2
    db8c:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    db8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    db92:	6bba      	ldr	r2, [r7, #56]	; 0x38
    db94:	4619      	mov	r1, r3
    db96:	68f8      	ldr	r0, [r7, #12]
    db98:	f7ff fd44 	bl	d624 <padbuffer>
    db9c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    db9e:	68fb      	ldr	r3, [r7, #12]
    dba0:	2b00      	cmp	r3, #0
    dba2:	d001      	beq.n	dba8 <am_util_stdio_vsprintf+0x33c>
    dba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dba6:	e000      	b.n	dbaa <am_util_stdio_vsprintf+0x33e>
    dba8:	2300      	movs	r3, #0
    dbaa:	68fa      	ldr	r2, [r7, #12]
    dbac:	4413      	add	r3, r2
    dbae:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    dbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dbb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    dbb4:	4413      	add	r3, r2
    dbb6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    dbb8:	2300      	movs	r3, #0
    dbba:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    dbbc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    dbc0:	68fa      	ldr	r2, [r7, #12]
    dbc2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    dbc6:	f7ff fcb2 	bl	d52e <uint64_to_hexstr>
    dbca:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    dbcc:	68fb      	ldr	r3, [r7, #12]
    dbce:	2b00      	cmp	r3, #0
    dbd0:	d003      	beq.n	dbda <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    dbd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dbd4:	68fa      	ldr	r2, [r7, #12]
    dbd6:	4413      	add	r3, r2
    dbd8:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    dbda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dbdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    dbde:	4413      	add	r3, r2
    dbe0:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    dbe2:	e12f      	b.n	de44 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    dbe4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    dbe8:	2b00      	cmp	r3, #0
    dbea:	d008      	beq.n	dbfe <am_util_stdio_vsprintf+0x392>
    dbec:	687b      	ldr	r3, [r7, #4]
    dbee:	3307      	adds	r3, #7
    dbf0:	f023 0307 	bic.w	r3, r3, #7
    dbf4:	f103 0208 	add.w	r2, r3, #8
    dbf8:	607a      	str	r2, [r7, #4]
    dbfa:	cb18      	ldmia	r3, {r3, r4}
    dbfc:	e005      	b.n	dc0a <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    dbfe:	687b      	ldr	r3, [r7, #4]
    dc00:	1d1a      	adds	r2, r3, #4
    dc02:	607a      	str	r2, [r7, #4]
    dc04:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    dc06:	f04f 0400 	mov.w	r4, #0
    dc0a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    dc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dc10:	2b00      	cmp	r3, #0
    dc12:	d01e      	beq.n	dc52 <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    dc14:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    dc18:	f7ff fb99 	bl	d34e <ndigits_in_u64>
    dc1c:	4602      	mov	r2, r0
    dc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dc20:	1a9b      	subs	r3, r3, r2
    dc22:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    dc24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    dc28:	6bba      	ldr	r2, [r7, #56]	; 0x38
    dc2a:	4619      	mov	r1, r3
    dc2c:	68f8      	ldr	r0, [r7, #12]
    dc2e:	f7ff fcf9 	bl	d624 <padbuffer>
    dc32:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    dc34:	68fb      	ldr	r3, [r7, #12]
    dc36:	2b00      	cmp	r3, #0
    dc38:	d001      	beq.n	dc3e <am_util_stdio_vsprintf+0x3d2>
    dc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dc3c:	e000      	b.n	dc40 <am_util_stdio_vsprintf+0x3d4>
    dc3e:	2300      	movs	r3, #0
    dc40:	68fa      	ldr	r2, [r7, #12]
    dc42:	4413      	add	r3, r2
    dc44:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    dc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dc48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    dc4a:	4413      	add	r3, r2
    dc4c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    dc4e:	2300      	movs	r3, #0
    dc50:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    dc52:	68fa      	ldr	r2, [r7, #12]
    dc54:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    dc58:	f7ff fc21 	bl	d49e <uint64_to_str>
    dc5c:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    dc5e:	68fb      	ldr	r3, [r7, #12]
    dc60:	2b00      	cmp	r3, #0
    dc62:	d003      	beq.n	dc6c <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    dc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dc66:	68fa      	ldr	r2, [r7, #12]
    dc68:	4413      	add	r3, r2
    dc6a:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    dc6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dc6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    dc70:	4413      	add	r3, r2
    dc72:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    dc74:	e0e6      	b.n	de44 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    dc76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    dc7a:	2b00      	cmp	r3, #0
    dc7c:	d008      	beq.n	dc90 <am_util_stdio_vsprintf+0x424>
    dc7e:	687b      	ldr	r3, [r7, #4]
    dc80:	3307      	adds	r3, #7
    dc82:	f023 0307 	bic.w	r3, r3, #7
    dc86:	f103 0208 	add.w	r2, r3, #8
    dc8a:	607a      	str	r2, [r7, #4]
    dc8c:	cb18      	ldmia	r3, {r3, r4}
    dc8e:	e005      	b.n	dc9c <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    dc90:	687b      	ldr	r3, [r7, #4]
    dc92:	1d1a      	adds	r2, r3, #4
    dc94:	607a      	str	r2, [r7, #4]
    dc96:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    dc98:	ea4f 74e3 	mov.w	r4, r3, asr #31
    dc9c:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    dca0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    dca4:	2b00      	cmp	r3, #0
    dca6:	f174 0300 	sbcs.w	r3, r4, #0
    dcaa:	da0a      	bge.n	dcc2 <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    dcac:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    dcb0:	425b      	negs	r3, r3
    dcb2:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    dcb6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    dcba:	2301      	movs	r3, #1
    dcbc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    dcc0:	e006      	b.n	dcd0 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    dcc2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    dcc6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    dcca:	2300      	movs	r3, #0
    dccc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    dcd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dcd2:	2b00      	cmp	r3, #0
    dcd4:	d04a      	beq.n	dd6c <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    dcd6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    dcda:	4618      	mov	r0, r3
    dcdc:	4621      	mov	r1, r4
    dcde:	f7ff fb57 	bl	d390 <ndigits_in_i64>
    dce2:	4602      	mov	r2, r0
    dce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dce6:	1a9b      	subs	r3, r3, r2
    dce8:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    dcea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    dcee:	2b00      	cmp	r3, #0
    dcf0:	d011      	beq.n	dd16 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    dcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dcf4:	3b01      	subs	r3, #1
    dcf6:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    dcf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    dcfc:	2b30      	cmp	r3, #48	; 0x30
    dcfe:	d10a      	bne.n	dd16 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    dd00:	68fb      	ldr	r3, [r7, #12]
    dd02:	2b00      	cmp	r3, #0
    dd04:	d004      	beq.n	dd10 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    dd06:	68fb      	ldr	r3, [r7, #12]
    dd08:	1c5a      	adds	r2, r3, #1
    dd0a:	60fa      	str	r2, [r7, #12]
    dd0c:	222d      	movs	r2, #45	; 0x2d
    dd0e:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    dd10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dd12:	3301      	adds	r3, #1
    dd14:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    dd16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    dd1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    dd1c:	4619      	mov	r1, r3
    dd1e:	68f8      	ldr	r0, [r7, #12]
    dd20:	f7ff fc80 	bl	d624 <padbuffer>
    dd24:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    dd26:	68fb      	ldr	r3, [r7, #12]
    dd28:	2b00      	cmp	r3, #0
    dd2a:	d001      	beq.n	dd30 <am_util_stdio_vsprintf+0x4c4>
    dd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dd2e:	e000      	b.n	dd32 <am_util_stdio_vsprintf+0x4c6>
    dd30:	2300      	movs	r3, #0
    dd32:	68fa      	ldr	r2, [r7, #12]
    dd34:	4413      	add	r3, r2
    dd36:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    dd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dd3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    dd3c:	4413      	add	r3, r2
    dd3e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    dd40:	2300      	movs	r3, #0
    dd42:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    dd44:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    dd48:	2b00      	cmp	r3, #0
    dd4a:	d01e      	beq.n	dd8a <am_util_stdio_vsprintf+0x51e>
    dd4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    dd50:	2b20      	cmp	r3, #32
    dd52:	d11a      	bne.n	dd8a <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    dd54:	68fb      	ldr	r3, [r7, #12]
    dd56:	2b00      	cmp	r3, #0
    dd58:	d004      	beq.n	dd64 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    dd5a:	68fb      	ldr	r3, [r7, #12]
    dd5c:	1c5a      	adds	r2, r3, #1
    dd5e:	60fa      	str	r2, [r7, #12]
    dd60:	222d      	movs	r2, #45	; 0x2d
    dd62:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    dd64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dd66:	3301      	adds	r3, #1
    dd68:	63fb      	str	r3, [r7, #60]	; 0x3c
    dd6a:	e00e      	b.n	dd8a <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    dd6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    dd70:	2b00      	cmp	r3, #0
    dd72:	d00a      	beq.n	dd8a <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    dd74:	68fb      	ldr	r3, [r7, #12]
    dd76:	2b00      	cmp	r3, #0
    dd78:	d004      	beq.n	dd84 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    dd7a:	68fb      	ldr	r3, [r7, #12]
    dd7c:	1c5a      	adds	r2, r3, #1
    dd7e:	60fa      	str	r2, [r7, #12]
    dd80:	222d      	movs	r2, #45	; 0x2d
    dd82:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    dd84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dd86:	3301      	adds	r3, #1
    dd88:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    dd8a:	68fa      	ldr	r2, [r7, #12]
    dd8c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    dd90:	f7ff fb85 	bl	d49e <uint64_to_str>
    dd94:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    dd96:	68fb      	ldr	r3, [r7, #12]
    dd98:	2b00      	cmp	r3, #0
    dd9a:	d003      	beq.n	dda4 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    dd9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dd9e:	68fa      	ldr	r2, [r7, #12]
    dda0:	4413      	add	r3, r2
    dda2:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    dda4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dda6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    dda8:	4413      	add	r3, r2
    ddaa:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    ddac:	e04a      	b.n	de44 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    ddae:	68fb      	ldr	r3, [r7, #12]
    ddb0:	2b00      	cmp	r3, #0
    ddb2:	d046      	beq.n	de42 <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    ddb4:	687b      	ldr	r3, [r7, #4]
    ddb6:	3307      	adds	r3, #7
    ddb8:	f023 0307 	bic.w	r3, r3, #7
    ddbc:	f103 0208 	add.w	r2, r3, #8
    ddc0:	607a      	str	r2, [r7, #4]
    ddc2:	cb18      	ldmia	r3, {r3, r4}
    ddc4:	4618      	mov	r0, r3
    ddc6:	4621      	mov	r1, r4
    ddc8:	f7f8 fa20 	bl	620c <__aeabi_d2f>
    ddcc:	4603      	mov	r3, r0
    ddce:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    ddd0:	68fb      	ldr	r3, [r7, #12]
    ddd2:	2214      	movs	r2, #20
    ddd4:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    ddd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ddd8:	68f9      	ldr	r1, [r7, #12]
    ddda:	6978      	ldr	r0, [r7, #20]
    dddc:	f7ff fc48 	bl	d670 <ftoa>
    dde0:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    dde2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dde4:	2b00      	cmp	r3, #0
    dde6:	da14      	bge.n	de12 <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    dde8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ddea:	f1b3 3fff 	cmp.w	r3, #4294967295
    ddee:	d102      	bne.n	ddf6 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    ddf0:	4b1e      	ldr	r3, [pc, #120]	; (de6c <am_util_stdio_vsprintf+0x600>)
    ddf2:	62bb      	str	r3, [r7, #40]	; 0x28
    ddf4:	e008      	b.n	de08 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    ddf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ddf8:	f113 0f02 	cmn.w	r3, #2
    ddfc:	d102      	bne.n	de04 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    ddfe:	4b1c      	ldr	r3, [pc, #112]	; (de70 <am_util_stdio_vsprintf+0x604>)
    de00:	62bb      	str	r3, [r7, #40]	; 0x28
    de02:	e001      	b.n	de08 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    de04:	4b1b      	ldr	r3, [pc, #108]	; (de74 <am_util_stdio_vsprintf+0x608>)
    de06:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    de08:	68fb      	ldr	r3, [r7, #12]
    de0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    de0c:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    de0e:	2303      	movs	r3, #3
    de10:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    de12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    de14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    de16:	4413      	add	r3, r2
    de18:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    de1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    de1c:	68fa      	ldr	r2, [r7, #12]
    de1e:	4413      	add	r3, r2
    de20:	60fb      	str	r3, [r7, #12]
                }
                break;
    de22:	e00e      	b.n	de42 <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    de24:	68fb      	ldr	r3, [r7, #12]
    de26:	2b00      	cmp	r3, #0
    de28:	d005      	beq.n	de36 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    de2a:	68fb      	ldr	r3, [r7, #12]
    de2c:	1c5a      	adds	r2, r3, #1
    de2e:	60fa      	str	r2, [r7, #12]
    de30:	68ba      	ldr	r2, [r7, #8]
    de32:	7812      	ldrb	r2, [r2, #0]
    de34:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    de36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    de38:	3301      	adds	r3, #1
    de3a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    de3c:	e002      	b.n	de44 <am_util_stdio_vsprintf+0x5d8>
                break;
    de3e:	bf00      	nop
    de40:	e000      	b.n	de44 <am_util_stdio_vsprintf+0x5d8>
                break;
    de42:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    de44:	68bb      	ldr	r3, [r7, #8]
    de46:	3301      	adds	r3, #1
    de48:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    de4a:	68bb      	ldr	r3, [r7, #8]
    de4c:	781b      	ldrb	r3, [r3, #0]
    de4e:	2b00      	cmp	r3, #0
    de50:	f47f ad17 	bne.w	d882 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    de54:	68fb      	ldr	r3, [r7, #12]
    de56:	2b00      	cmp	r3, #0
    de58:	d002      	beq.n	de60 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    de5a:	68fb      	ldr	r3, [r7, #12]
    de5c:	2200      	movs	r2, #0
    de5e:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    de60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    de62:	4618      	mov	r0, r3
    de64:	3754      	adds	r7, #84	; 0x54
    de66:	46bd      	mov	sp, r7
    de68:	bd90      	pop	{r4, r7, pc}
    de6a:	bf00      	nop
    de6c:	00302e30 	.word	0x00302e30
    de70:	00232e23 	.word	0x00232e23
    de74:	003f2e3f 	.word	0x003f2e3f

0000de78 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    de78:	b40f      	push	{r0, r1, r2, r3}
    de7a:	b580      	push	{r7, lr}
    de7c:	b082      	sub	sp, #8
    de7e:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    de80:	f107 0314 	add.w	r3, r7, #20
    de84:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    de86:	683a      	ldr	r2, [r7, #0]
    de88:	6939      	ldr	r1, [r7, #16]
    de8a:	4808      	ldr	r0, [pc, #32]	; (deac <am_util_stdio_printf+0x34>)
    de8c:	f7ff fcee 	bl	d86c <am_util_stdio_vsprintf>
    de90:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    de92:	4b07      	ldr	r3, [pc, #28]	; (deb0 <am_util_stdio_printf+0x38>)
    de94:	681b      	ldr	r3, [r3, #0]
    de96:	4805      	ldr	r0, [pc, #20]	; (deac <am_util_stdio_printf+0x34>)
    de98:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    de9a:	687b      	ldr	r3, [r7, #4]
}
    de9c:	4618      	mov	r0, r3
    de9e:	3708      	adds	r7, #8
    dea0:	46bd      	mov	sp, r7
    dea2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    dea6:	b004      	add	sp, #16
    dea8:	4770      	bx	lr
    deaa:	bf00      	nop
    deac:	10002500 	.word	0x10002500
    deb0:	10002924 	.word	0x10002924

0000deb4 <am_bsp_iom_spi_pins_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_iom_spi_pins_enable(uint32_t ui32Module)
{
    deb4:	b430      	push	{r4, r5}
    switch(ui32Module)
    deb6:	2800      	cmp	r0, #0
    deb8:	d02d      	beq.n	df16 <am_bsp_iom_spi_pins_enable+0x62>
    deba:	2801      	cmp	r0, #1
    debc:	d000      	beq.n	dec0 <am_bsp_iom_spi_pins_enable+0xc>
    debe:	e7fe      	b.n	debe <am_bsp_iom_spi_pins_enable+0xa>
            break;
#endif

#ifdef AM_BSP_GPIO_IOM1_SCK
        case 1:
            am_bsp_pin_enable(IOM1_SCK);
    dec0:	4b2a      	ldr	r3, [pc, #168]	; (df6c <am_bsp_iom_spi_pins_enable+0xb8>)
    dec2:	492b      	ldr	r1, [pc, #172]	; (df70 <am_bsp_iom_spi_pins_enable+0xbc>)
    dec4:	4a2b      	ldr	r2, [pc, #172]	; (df74 <am_bsp_iom_spi_pins_enable+0xc0>)
    dec6:	2573      	movs	r5, #115	; 0x73
    dec8:	601d      	str	r5, [r3, #0]
    deca:	6808      	ldr	r0, [r1, #0]
    decc:	f020 0407 	bic.w	r4, r0, #7
    ded0:	600c      	str	r4, [r1, #0]
    ded2:	6810      	ldr	r0, [r2, #0]
    ded4:	f020 04ff 	bic.w	r4, r0, #255	; 0xff
    ded8:	f044 000e 	orr.w	r0, r4, #14
    dedc:	2400      	movs	r4, #0
    dede:	6010      	str	r0, [r2, #0]
    dee0:	601c      	str	r4, [r3, #0]
            am_bsp_pin_enable(IOM1_MISO);
    dee2:	601d      	str	r5, [r3, #0]
    dee4:	6808      	ldr	r0, [r1, #0]
    dee6:	f020 0070 	bic.w	r0, r0, #112	; 0x70
    deea:	6008      	str	r0, [r1, #0]
    deec:	6810      	ldr	r0, [r2, #0]
    deee:	f420 4c7f 	bic.w	ip, r0, #65280	; 0xff00
    def2:	f44c 6020 	orr.w	r0, ip, #2560	; 0xa00
    def6:	6010      	str	r0, [r2, #0]
    def8:	601c      	str	r4, [r3, #0]
            am_bsp_pin_enable(IOM1_MOSI);
    defa:	601d      	str	r5, [r3, #0]
    defc:	680d      	ldr	r5, [r1, #0]
    defe:	f425 60e0 	bic.w	r0, r5, #1792	; 0x700
    df02:	6008      	str	r0, [r1, #0]
    df04:	6811      	ldr	r1, [r2, #0]
    df06:	f421 057f 	bic.w	r5, r1, #16711680	; 0xff0000
    df0a:	f445 2000 	orr.w	r0, r5, #524288	; 0x80000
    df0e:	6010      	str	r0, [r2, #0]
    df10:	601c      	str	r4, [r3, #0]
        // debugging.
        //
        default:
            while(1);
    }
}
    df12:	bc30      	pop	{r4, r5}
    df14:	4770      	bx	lr
            am_bsp_pin_enable(IOM0_SCK);
    df16:	4b15      	ldr	r3, [pc, #84]	; (df6c <am_bsp_iom_spi_pins_enable+0xb8>)
    df18:	4917      	ldr	r1, [pc, #92]	; (df78 <am_bsp_iom_spi_pins_enable+0xc4>)
    df1a:	4a18      	ldr	r2, [pc, #96]	; (df7c <am_bsp_iom_spi_pins_enable+0xc8>)
    df1c:	2573      	movs	r5, #115	; 0x73
    df1e:	601d      	str	r5, [r3, #0]
    df20:	680c      	ldr	r4, [r1, #0]
    df22:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
    df26:	600c      	str	r4, [r1, #0]
    df28:	6814      	ldr	r4, [r2, #0]
    df2a:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00
    df2e:	f44c 6460 	orr.w	r4, ip, #3584	; 0xe00
    df32:	6014      	str	r4, [r2, #0]
    df34:	6018      	str	r0, [r3, #0]
            am_bsp_pin_enable(IOM0_MISO);
    df36:	601d      	str	r5, [r3, #0]
    df38:	680c      	ldr	r4, [r1, #0]
    df3a:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
    df3e:	600c      	str	r4, [r1, #0]
    df40:	6814      	ldr	r4, [r2, #0]
    df42:	f424 0c7f 	bic.w	ip, r4, #16711680	; 0xff0000
    df46:	f44c 2420 	orr.w	r4, ip, #655360	; 0xa0000
    df4a:	6014      	str	r4, [r2, #0]
    df4c:	6018      	str	r0, [r3, #0]
            am_bsp_pin_enable(IOM0_MOSI);
    df4e:	601d      	str	r5, [r3, #0]
    df50:	680d      	ldr	r5, [r1, #0]
    df52:	f025 44e0 	bic.w	r4, r5, #1879048192	; 0x70000000
    df56:	600c      	str	r4, [r1, #0]
    df58:	6811      	ldr	r1, [r2, #0]
    df5a:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    df5e:	f045 6400 	orr.w	r4, r5, #134217728	; 0x8000000
    df62:	6014      	str	r4, [r2, #0]
    df64:	6018      	str	r0, [r3, #0]
}
    df66:	bc30      	pop	{r4, r5}
    df68:	4770      	bx	lr
    df6a:	bf00      	nop
    df6c:	40010060 	.word	0x40010060
    df70:	40010044 	.word	0x40010044
    df74:	40010008 	.word	0x40010008
    df78:	40010040 	.word	0x40010040
    df7c:	40010004 	.word	0x40010004

0000df80 <am_bsp_iom_spi_pins_disable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_iom_spi_pins_disable(uint32_t ui32Module)
{
    df80:	b430      	push	{r4, r5}
    switch(ui32Module)
    df82:	2800      	cmp	r0, #0
    df84:	d02d      	beq.n	dfe2 <am_bsp_iom_spi_pins_disable+0x62>
    df86:	2801      	cmp	r0, #1
    df88:	d000      	beq.n	df8c <am_bsp_iom_spi_pins_disable+0xc>
    df8a:	e7fe      	b.n	df8a <am_bsp_iom_spi_pins_disable+0xa>
            break;
#endif

#ifdef AM_BSP_GPIO_IOM1_SCK
        case 1:
            am_bsp_pin_disable(IOM1_SCK);
    df8c:	4b2a      	ldr	r3, [pc, #168]	; (e038 <am_bsp_iom_spi_pins_disable+0xb8>)
    df8e:	492b      	ldr	r1, [pc, #172]	; (e03c <am_bsp_iom_spi_pins_disable+0xbc>)
    df90:	4a2b      	ldr	r2, [pc, #172]	; (e040 <am_bsp_iom_spi_pins_disable+0xc0>)
    df92:	2573      	movs	r5, #115	; 0x73
    df94:	601d      	str	r5, [r3, #0]
    df96:	6808      	ldr	r0, [r1, #0]
    df98:	f020 0407 	bic.w	r4, r0, #7
    df9c:	600c      	str	r4, [r1, #0]
    df9e:	6810      	ldr	r0, [r2, #0]
    dfa0:	f020 04ff 	bic.w	r4, r0, #255	; 0xff
    dfa4:	f044 0018 	orr.w	r0, r4, #24
    dfa8:	2400      	movs	r4, #0
    dfaa:	6010      	str	r0, [r2, #0]
    dfac:	601c      	str	r4, [r3, #0]
            am_bsp_pin_disable(IOM1_MISO);
    dfae:	601d      	str	r5, [r3, #0]
    dfb0:	6808      	ldr	r0, [r1, #0]
    dfb2:	f020 0070 	bic.w	r0, r0, #112	; 0x70
    dfb6:	6008      	str	r0, [r1, #0]
    dfb8:	6810      	ldr	r0, [r2, #0]
    dfba:	f420 4c7f 	bic.w	ip, r0, #65280	; 0xff00
    dfbe:	f44c 50c0 	orr.w	r0, ip, #6144	; 0x1800
    dfc2:	6010      	str	r0, [r2, #0]
    dfc4:	601c      	str	r4, [r3, #0]
            am_bsp_pin_disable(IOM1_MOSI);
    dfc6:	601d      	str	r5, [r3, #0]
    dfc8:	680d      	ldr	r5, [r1, #0]
    dfca:	f425 60e0 	bic.w	r0, r5, #1792	; 0x700
    dfce:	6008      	str	r0, [r1, #0]
    dfd0:	6811      	ldr	r1, [r2, #0]
    dfd2:	f421 057f 	bic.w	r5, r1, #16711680	; 0xff0000
    dfd6:	f445 10c0 	orr.w	r0, r5, #1572864	; 0x180000
    dfda:	6010      	str	r0, [r2, #0]
    dfdc:	601c      	str	r4, [r3, #0]
        // debugging.
        //
        default:
            while(1);
    }
}
    dfde:	bc30      	pop	{r4, r5}
    dfe0:	4770      	bx	lr
            am_bsp_pin_disable(IOM0_SCK);
    dfe2:	4b15      	ldr	r3, [pc, #84]	; (e038 <am_bsp_iom_spi_pins_disable+0xb8>)
    dfe4:	4917      	ldr	r1, [pc, #92]	; (e044 <am_bsp_iom_spi_pins_disable+0xc4>)
    dfe6:	4a18      	ldr	r2, [pc, #96]	; (e048 <am_bsp_iom_spi_pins_disable+0xc8>)
    dfe8:	2573      	movs	r5, #115	; 0x73
    dfea:	601d      	str	r5, [r3, #0]
    dfec:	680c      	ldr	r4, [r1, #0]
    dfee:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
    dff2:	600c      	str	r4, [r1, #0]
    dff4:	6814      	ldr	r4, [r2, #0]
    dff6:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00
    dffa:	f44c 54c0 	orr.w	r4, ip, #6144	; 0x1800
    dffe:	6014      	str	r4, [r2, #0]
    e000:	6018      	str	r0, [r3, #0]
            am_bsp_pin_disable(IOM0_MISO);
    e002:	601d      	str	r5, [r3, #0]
    e004:	680c      	ldr	r4, [r1, #0]
    e006:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
    e00a:	600c      	str	r4, [r1, #0]
    e00c:	6814      	ldr	r4, [r2, #0]
    e00e:	f424 0c7f 	bic.w	ip, r4, #16711680	; 0xff0000
    e012:	f44c 14c0 	orr.w	r4, ip, #1572864	; 0x180000
    e016:	6014      	str	r4, [r2, #0]
    e018:	6018      	str	r0, [r3, #0]
            am_bsp_pin_disable(IOM0_MOSI);
    e01a:	601d      	str	r5, [r3, #0]
    e01c:	680d      	ldr	r5, [r1, #0]
    e01e:	f025 44e0 	bic.w	r4, r5, #1879048192	; 0x70000000
    e022:	600c      	str	r4, [r1, #0]
    e024:	6811      	ldr	r1, [r2, #0]
    e026:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    e02a:	f045 54c0 	orr.w	r4, r5, #402653184	; 0x18000000
    e02e:	6014      	str	r4, [r2, #0]
    e030:	6018      	str	r0, [r3, #0]
}
    e032:	bc30      	pop	{r4, r5}
    e034:	4770      	bx	lr
    e036:	bf00      	nop
    e038:	40010060 	.word	0x40010060
    e03c:	40010044 	.word	0x40010044
    e040:	40010008 	.word	0x40010008
    e044:	40010040 	.word	0x40010040
    e048:	40010004 	.word	0x40010004

0000e04c <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    e04c:	b510      	push	{r4, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    e04e:	4b10      	ldr	r3, [pc, #64]	; (e090 <am_bsp_debug_printf_enable+0x44>)
    e050:	681c      	ldr	r4, [r3, #0]
    e052:	f014 0401 	ands.w	r4, r4, #1
{
    e056:	b086      	sub	sp, #24
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    e058:	d001      	beq.n	e05e <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    e05a:	b006      	add	sp, #24
    e05c:	bd10      	pop	{r4, pc}
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    e05e:	a806      	add	r0, sp, #24
    e060:	490c      	ldr	r1, [pc, #48]	; (e094 <am_bsp_debug_printf_enable+0x48>)
    e062:	f840 1d14 	str.w	r1, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    e066:	f001 fd01 	bl	fa6c <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    e06a:	4a0b      	ldr	r2, [pc, #44]	; (e098 <am_bsp_debug_printf_enable+0x4c>)
    e06c:	480b      	ldr	r0, [pc, #44]	; (e09c <am_bsp_debug_printf_enable+0x50>)
    e06e:	490c      	ldr	r1, [pc, #48]	; (e0a0 <am_bsp_debug_printf_enable+0x54>)
    e070:	2373      	movs	r3, #115	; 0x73
    e072:	6013      	str	r3, [r2, #0]
    e074:	6803      	ldr	r3, [r0, #0]
    e076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    e07a:	6003      	str	r3, [r0, #0]
    e07c:	6808      	ldr	r0, [r1, #0]
    e07e:	f420 4c7f 	bic.w	ip, r0, #65280	; 0xff00
    e082:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    e086:	600b      	str	r3, [r1, #0]
    e088:	6014      	str	r4, [r2, #0]
}
    e08a:	b006      	add	sp, #24
    e08c:	bd10      	pop	{r4, pc}
    e08e:	bf00      	nop
    e090:	10002604 	.word	0x10002604
    e094:	000f4240 	.word	0x000f4240
    e098:	40010060 	.word	0x40010060
    e09c:	40010054 	.word	0x40010054
    e0a0:	40010028 	.word	0x40010028

0000e0a4 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    e0a4:	f001 bbe8 	b.w	f878 <am_hal_itm_print>

0000e0a8 <am_hal_clkgen_sysclk_select>:
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    e0a8:	4b05      	ldr	r3, [pc, #20]	; (e0c0 <am_hal_clkgen_sysclk_select+0x18>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    e0aa:	4906      	ldr	r1, [pc, #24]	; (e0c4 <am_hal_clkgen_sysclk_select+0x1c>)
{
    e0ac:	b410      	push	{r4}

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    e0ae:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    e0b0:	2447      	movs	r4, #71	; 0x47
    e0b2:	601c      	str	r4, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    e0b4:	6008      	str	r0, [r1, #0]
}
    e0b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(CLKGEN, CLKKEY) = 0;
    e0ba:	601a      	str	r2, [r3, #0]
}
    e0bc:	4770      	bx	lr
    e0be:	bf00      	nop
    e0c0:	40004014 	.word	0x40004014
    e0c4:	40004018 	.word	0x40004018

0000e0c8 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_BFR(CLKGEN, CCTRL, CORESEL);
    e0c8:	4b03      	ldr	r3, [pc, #12]	; (e0d8 <am_hal_clkgen_sysclk_get+0x10>)
    e0ca:	4a04      	ldr	r2, [pc, #16]	; (e0dc <am_hal_clkgen_sysclk_get+0x14>)
    e0cc:	6818      	ldr	r0, [r3, #0]
    e0ce:	f000 0107 	and.w	r1, r0, #7
        case AM_HAL_CLKGEN_SYSCLK_3MHZ:
            return 3000000;
        default:
            return 0xFFFFFFFF;
    }
}
    e0d2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    e0d6:	4770      	bx	lr
    e0d8:	40004018 	.word	0x40004018
    e0dc:	00012fdc 	.word	0x00012fdc

0000e0e0 <am_hal_clkgen_osc_start>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_start(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    e0e0:	0783      	lsls	r3, r0, #30
    e0e2:	d004      	beq.n	e0ee <am_hal_clkgen_osc_start+0xe>
    {
        //
        // Start the oscillator(s).
        // Note that these bits are cleared in order to enable the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) &= ~ui32OscFlags;
    e0e4:	4a02      	ldr	r2, [pc, #8]	; (e0f0 <am_hal_clkgen_osc_start+0x10>)
    e0e6:	6813      	ldr	r3, [r2, #0]
    e0e8:	ea23 0000 	bic.w	r0, r3, r0
    e0ec:	6010      	str	r0, [r2, #0]
    e0ee:	4770      	bx	lr
    e0f0:	4000400c 	.word	0x4000400c

0000e0f4 <am_hal_clkgen_clkout_enable>:
am_hal_clkgen_clkout_enable(uint32_t ui32Signal)
{
    //
    // Enable the clock out on desired signal.
    //
    AM_REG(CLKGEN, CLKOUT) = AM_REG_CLKGEN_CLKOUT_CKEN_M | ui32Signal;
    e0f4:	4b02      	ldr	r3, [pc, #8]	; (e100 <am_hal_clkgen_clkout_enable+0xc>)
    e0f6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    e0fa:	6018      	str	r0, [r3, #0]
    e0fc:	4770      	bx	lr
    e0fe:	bf00      	nop
    e100:	40004010 	.word	0x40004010

0000e104 <back2back_reads>:
void
back2back_reads(uint32_t u32TimerAddr, uint32_t u32Data[])
{
    // u32TimerAddr = address of the timer to be read.
    // u32Data[] is a pointer to a 3 word data array provided by the caller.
    __asm
    e104:	b410      	push	{r4}
    e106:	b402      	push	{r1}
    e108:	4602      	mov	r2, r0
    e10a:	f3ef 8410 	mrs	r4, PRIMASK
    e10e:	b672      	cpsid	i
    e110:	bf00      	nop
    e112:	6810      	ldr	r0, [r2, #0]
    e114:	6811      	ldr	r1, [r2, #0]
    e116:	6813      	ldr	r3, [r2, #0]
    e118:	f384 8810 	msr	PRIMASK, r4
    e11c:	bc04      	pop	{r2}
    e11e:	6010      	str	r0, [r2, #0]
    e120:	6051      	str	r1, [r2, #4]
    e122:	6093      	str	r3, [r2, #8]
    e124:	bc10      	pop	{r4}
    e126:	4770      	bx	lr

0000e128 <am_hal_ctimer_config_single>:
//*****************************************************************************
void
am_hal_ctimer_config_single(uint32_t ui32TimerNumber,
                            uint32_t ui32TimerSegment,
                            uint32_t ui32ConfigVal)
{
    e128:	b410      	push	{r4}

    //
    // Find the correct register to write based on the timer number.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    e12a:	0100      	lsls	r0, r0, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    e12c:	4c0b      	ldr	r4, [pc, #44]	; (e15c <am_hal_ctimer_config_single+0x34>)

    //
    // If we're working with TIMERB, we need to shift our configuration value
    // up by 16 bits.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    e12e:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    ui32WriteVal = AM_REGVAL(pui32ConfigReg);
    e132:	5903      	ldr	r3, [r0, r4]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    e134:	d00a      	beq.n	e14c <am_hal_ctimer_config_single+0x24>

    //
    // Replace part of the saved register value with the configuration value
    // from the caller.
    //
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
    e136:	ea23 0301 	bic.w	r3, r3, r1
    e13a:	431a      	orrs	r2, r3

    //
    // If we're configuring both timers, we need to set the "link" bit.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_BOTH )
    e13c:	3101      	adds	r1, #1
    {
        ui32WriteVal |= AM_HAL_CTIMER_LINK;
    e13e:	bf08      	it	eq
    e140:	f042 4200 	orreq.w	r2, r2, #2147483648	; 0x80000000
    }

    //
    // Write our completed configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
    e144:	5102      	str	r2, [r0, r4]
}
    e146:	f85d 4b04 	ldr.w	r4, [sp], #4
    e14a:	4770      	bx	lr
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
    e14c:	b299      	uxth	r1, r3
    e14e:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
    e152:	5102      	str	r2, [r0, r4]
}
    e154:	f85d 4b04 	ldr.w	r4, [sp], #4
    e158:	4770      	bx	lr
    e15a:	bf00      	nop
    e15c:	4000800c 	.word	0x4000800c

0000e160 <am_hal_ctimer_start>:

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    e160:	0100      	lsls	r0, r0, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    e162:	4a07      	ldr	r2, [pc, #28]	; (e180 <am_hal_ctimer_start+0x20>)

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    e164:	5883      	ldr	r3, [r0, r2]
{
    e166:	b410      	push	{r4}

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    e168:	f001 2408 	and.w	r4, r1, #134219776	; 0x8000800
    e16c:	ea23 0304 	bic.w	r3, r3, r4
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    e170:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    e174:	4319      	orrs	r1, r3
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    e176:	5081      	str	r1, [r0, r2]
}
    e178:	f85d 4b04 	ldr.w	r4, [sp], #4
    e17c:	4770      	bx	lr
    e17e:	bf00      	nop
    e180:	4000800c 	.word	0x4000800c

0000e184 <am_hal_ctimer_stop>:

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    e184:	0100      	lsls	r0, r0, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    e186:	4a04      	ldr	r2, [pc, #16]	; (e198 <am_hal_ctimer_stop+0x14>)

    //
    // Clear the "enable" bit
    //
    AM_REGVAL(pui32ConfigReg) &= ~(ui32TimerSegment &
    e188:	5883      	ldr	r3, [r0, r2]
    e18a:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    e18e:	ea23 0301 	bic.w	r3, r3, r1
    e192:	5083      	str	r3, [r0, r2]
    e194:	4770      	bx	lr
    e196:	bf00      	nop
    e198:	4000800c 	.word	0x4000800c

0000e19c <am_hal_ctimer_clear>:

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    e19c:	0100      	lsls	r0, r0, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    e19e:	4b03      	ldr	r3, [pc, #12]	; (e1ac <am_hal_ctimer_clear+0x10>)

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    e1a0:	58c2      	ldr	r2, [r0, r3]
    e1a2:	f001 2108 	and.w	r1, r1, #134219776	; 0x8000800
    e1a6:	4311      	orrs	r1, r2
    e1a8:	50c1      	str	r1, [r0, r3]
    e1aa:	4770      	bx	lr
    e1ac:	4000800c 	.word	0x4000800c

0000e1b0 <am_hal_ctimer_read>:
//! @return Current timer value.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_read(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    e1b0:	b530      	push	{r4, r5, lr}
    volatile uint32_t ui32Value = 0;
    uint32_t ui32Values[3];
    uint32_t ui32TimerAddrTbl[4] =
    e1b2:	4b27      	ldr	r3, [pc, #156]	; (e250 <am_hal_ctimer_read+0xa0>)
{
    e1b4:	4604      	mov	r4, r0
    e1b6:	460d      	mov	r5, r1
    uint32_t ui32TimerAddrTbl[4] =
    e1b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
{
    e1ba:	b089      	sub	sp, #36	; 0x24
    uint32_t ui32TimerAddrTbl[4] =
    e1bc:	f10d 0e20 	add.w	lr, sp, #32
    e1c0:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
    // to increment once, and that only one of the three reads can be wrong.
    // This routine will perform the back-to-back reads and return all three
    // values. The rest of this fuction determines which value we should
    // actually use.
    //
    back2back_reads(ui32TimerAddrTbl[ui32TimerNumber], &ui32Values[0]);
    e1c4:	eb0e 0084 	add.w	r0, lr, r4, lsl #2
    volatile uint32_t ui32Value = 0;
    e1c8:	2100      	movs	r1, #0
    e1ca:	9100      	str	r1, [sp, #0]
    back2back_reads(ui32TimerAddrTbl[ui32TimerNumber], &ui32Values[0]);
    e1cc:	f850 0c10 	ldr.w	r0, [r0, #-16]
    e1d0:	a901      	add	r1, sp, #4
    e1d2:	f7ff ff97 	bl	e104 <back2back_reads>

    //
    // Shift or mask the values based on the given timer segment.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    e1d6:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
    e1da:	d017      	beq.n	e20c <am_hal_ctimer_read+0x5c>
    {
        ui32Values[0] >>= 16;
        ui32Values[1] >>= 16;
        ui32Values[2] >>= 16;
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    e1dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e1e0:	4295      	cmp	r5, r2
    e1e2:	d022      	beq.n	e22a <am_hal_ctimer_read+0x7a>
    e1e4:	9c01      	ldr	r4, [sp, #4]
    e1e6:	9b02      	ldr	r3, [sp, #8]
    }

    //
    // Now, we'll figure out which of the three values is the correct time.
    //
    if (ui32Values[0] == ui32Values[1])
    e1e8:	429c      	cmp	r4, r3
    e1ea:	d01a      	beq.n	e222 <am_hal_ctimer_read+0x72>
        //
        // If the first two values didn't match, then one of them might be bad.
        // If one of the first two values is bad, then the third one should
        // always be correct. We'll take the third value as the correct time.
        //
        ui32Value = ui32Values[2];
    e1ec:	9903      	ldr	r1, [sp, #12]
    e1ee:	9100      	str	r1, [sp, #0]
        // flag it as a "bad read", and fail this assert statement.
        //
        // This shouldn't ever happen, and it hasn't ever happened in any of
        // our tests so far.
        //
        am_hal_debug_assert_msg((adjacent(ui32Values[1], ui32Values[2]) ||
    e1f0:	4299      	cmp	r1, r3
    e1f2:	d008      	beq.n	e206 <am_hal_ctimer_read+0x56>
    e1f4:	3301      	adds	r3, #1
    e1f6:	4299      	cmp	r1, r3
    e1f8:	d005      	beq.n	e206 <am_hal_ctimer_read+0x56>
    e1fa:	42a1      	cmp	r1, r4
    e1fc:	d003      	beq.n	e206 <am_hal_ctimer_read+0x56>
    e1fe:	3401      	adds	r4, #1
    e200:	42a1      	cmp	r1, r4
    e202:	d000      	beq.n	e206 <am_hal_ctimer_read+0x56>
    e204:	b9d9      	cbnz	r1, e23e <am_hal_ctimer_read+0x8e>
                                 adjacent(ui32Values[0], ui32Values[2])),
                                "Bad CTIMER read");
    }
#endif

    return ui32Value;
    e206:	9800      	ldr	r0, [sp, #0]
}
    e208:	b009      	add	sp, #36	; 0x24
    e20a:	bd30      	pop	{r4, r5, pc}
        ui32Values[0] >>= 16;
    e20c:	f8bd 4006 	ldrh.w	r4, [sp, #6]
        ui32Values[1] >>= 16;
    e210:	f8bd 300a 	ldrh.w	r3, [sp, #10]
        ui32Values[2] >>= 16;
    e214:	f8bd 000e 	ldrh.w	r0, [sp, #14]
        ui32Values[0] >>= 16;
    e218:	9401      	str	r4, [sp, #4]
    if (ui32Values[0] == ui32Values[1])
    e21a:	429c      	cmp	r4, r3
        ui32Values[1] >>= 16;
    e21c:	9302      	str	r3, [sp, #8]
        ui32Values[2] >>= 16;
    e21e:	9003      	str	r0, [sp, #12]
    if (ui32Values[0] == ui32Values[1])
    e220:	d1e4      	bne.n	e1ec <am_hal_ctimer_read+0x3c>
        ui32Value = ui32Values[1];
    e222:	9400      	str	r4, [sp, #0]
    return ui32Value;
    e224:	9800      	ldr	r0, [sp, #0]
}
    e226:	b009      	add	sp, #36	; 0x24
    e228:	bd30      	pop	{r4, r5, pc}
        ui32Values[0] &= 0xFFFF;
    e22a:	f8bd 4004 	ldrh.w	r4, [sp, #4]
        ui32Values[1] &= 0xFFFF;
    e22e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
        ui32Values[2] &= 0xFFFF;
    e232:	f8bd 500c 	ldrh.w	r5, [sp, #12]
        ui32Values[0] &= 0xFFFF;
    e236:	9401      	str	r4, [sp, #4]
        ui32Values[1] &= 0xFFFF;
    e238:	9302      	str	r3, [sp, #8]
        ui32Values[2] &= 0xFFFF;
    e23a:	9503      	str	r5, [sp, #12]
    e23c:	e7d4      	b.n	e1e8 <am_hal_ctimer_read+0x38>
        am_hal_debug_assert_msg((adjacent(ui32Values[1], ui32Values[2]) ||
    e23e:	4a05      	ldr	r2, [pc, #20]	; (e254 <am_hal_ctimer_read+0xa4>)
    e240:	4805      	ldr	r0, [pc, #20]	; (e258 <am_hal_ctimer_read+0xa8>)
    e242:	f240 21ea 	movw	r1, #746	; 0x2ea
    e246:	f000 f863 	bl	e310 <am_hal_debug_error>
    return ui32Value;
    e24a:	9800      	ldr	r0, [sp, #0]
}
    e24c:	b009      	add	sp, #36	; 0x24
    e24e:	bd30      	pop	{r4, r5, pc}
    e250:	00010924 	.word	0x00010924
    e254:	0001303c 	.word	0x0001303c
    e258:	00013024 	.word	0x00013024

0000e25c <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    e25c:	b5f0      	push	{r4, r5, r6, r7, lr}
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    e25e:	0100      	lsls	r0, r0, #4
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    e260:	4c19      	ldr	r4, [pc, #100]	; (e2c8 <am_hal_ctimer_period_set+0x6c>)
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    e262:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    ui32Mode = *pui32ControlReg;
    e266:	5905      	ldr	r5, [r0, r4]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    e268:	d018      	beq.n	e29c <am_hal_ctimer_period_set+0x40>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    e26a:	f405 76c0 	and.w	r6, r5, #384	; 0x180
    e26e:	2e80      	cmp	r6, #128	; 0x80
    e270:	d019      	beq.n	e2a6 <am_hal_ctimer_period_set+0x4a>
    e272:	2500      	movs	r5, #0
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    e274:	462c      	mov	r4, r5
    pui32CompareRegA = (uint32_t *)(AM_REG_CTIMERn(0) +
                                    AM_REG_CTIMER_CMPRA0_O +
                                    (ui32TimerNumber * TIMER_OFFSET));

    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
                                    AM_REG_CTIMER_CMPRB0_O +
    e276:	4e15      	ldr	r6, [pc, #84]	; (e2cc <am_hal_ctimer_period_set+0x70>)
                                    AM_REG_CTIMER_CMPRA0_O +
    e278:	4f15      	ldr	r7, [pc, #84]	; (e2d0 <am_hal_ctimer_period_set+0x74>)

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    e27a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e27e:	4299      	cmp	r1, r3
                                    AM_REG_CTIMER_CMPRB0_O +
    e280:	eb00 0e06 	add.w	lr, r0, r6
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    e284:	d01c      	beq.n	e2c0 <am_hal_ctimer_period_set+0x64>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    e286:	4b13      	ldr	r3, [pc, #76]	; (e2d4 <am_hal_ctimer_period_set+0x78>)
    e288:	4299      	cmp	r1, r3
    e28a:	d014      	beq.n	e2b6 <am_hal_ctimer_period_set+0x5a>
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    e28c:	b291      	uxth	r1, r2
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1 >> 16));
    e28e:	401c      	ands	r4, r3
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    e290:	ea44 4212 	orr.w	r2, r4, r2, lsr #16
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    e294:	430d      	orrs	r5, r1
    e296:	51c5      	str	r5, [r0, r7]
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    e298:	5182      	str	r2, [r0, r6]
    }
}
    e29a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32Mode = ui32Mode >> 16;
    e29c:	0c2f      	lsrs	r7, r5, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    e29e:	f407 75c0 	and.w	r5, r7, #384	; 0x180
    e2a2:	2d80      	cmp	r5, #128	; 0x80
    e2a4:	d103      	bne.n	e2ae <am_hal_ctimer_period_set+0x52>
    e2a6:	0415      	lsls	r5, r2, #16
        ui32Comp1 = ui32Period;
    e2a8:	4614      	mov	r4, r2
        ui32Comp0 = ui32Period - ui32OnTime;
    e2aa:	1ad2      	subs	r2, r2, r3
        ui32Comp1 = ui32Period;
    e2ac:	e7e3      	b.n	e276 <am_hal_ctimer_period_set+0x1a>
                                    AM_REG_CTIMER_CMPRB0_O +
    e2ae:	f8df e01c 	ldr.w	lr, [pc, #28]	; e2cc <am_hal_ctimer_period_set+0x70>
    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
    e2b2:	2500      	movs	r5, #0
                                    AM_REG_CTIMER_CMPRB0_O +
    e2b4:	4486      	add	lr, r0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    e2b6:	b290      	uxth	r0, r2
    e2b8:	4305      	orrs	r5, r0
    e2ba:	f8ce 5000 	str.w	r5, [lr]
    e2be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    e2c0:	b294      	uxth	r4, r2
    e2c2:	4325      	orrs	r5, r4
    e2c4:	51c5      	str	r5, [r0, r7]
    e2c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e2c8:	4000800c 	.word	0x4000800c
    e2cc:	40008008 	.word	0x40008008
    e2d0:	40008004 	.word	0x40008004
    e2d4:	ffff0000 	.word	0xffff0000

0000e2d8 <am_hal_ctimer_int_enable>:
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    e2d8:	4a02      	ldr	r2, [pc, #8]	; (e2e4 <am_hal_ctimer_int_enable+0xc>)
    e2da:	6813      	ldr	r3, [r2, #0]
    e2dc:	4318      	orrs	r0, r3
    e2de:	6010      	str	r0, [r2, #0]
    e2e0:	4770      	bx	lr
    e2e2:	bf00      	nop
    e2e4:	40008200 	.word	0x40008200

0000e2e8 <am_hal_ctimer_int_clear>:
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTCLR) = ui32Interrupt;
    e2e8:	4b01      	ldr	r3, [pc, #4]	; (e2f0 <am_hal_ctimer_int_clear+0x8>)
    e2ea:	6018      	str	r0, [r3, #0]
    e2ec:	4770      	bx	lr
    e2ee:	bf00      	nop
    e2f0:	40008208 	.word	0x40008208

0000e2f4 <am_hal_ctimer_int_status_get>:
am_hal_ctimer_int_status_get(bool bEnabledOnly)
{
    //
    // Return the desired status.
    //
    if (bEnabledOnly)
    e2f4:	b910      	cbnz	r0, e2fc <am_hal_ctimer_int_status_get+0x8>
        uint32_t u32RetVal = AM_REGn(CTIMER, 0, INTSTAT);
        return u32RetVal & AM_REGn(CTIMER, 0, INTEN);
    }
    else
    {
        return AM_REGn(CTIMER, 0, INTSTAT);
    e2f6:	4b04      	ldr	r3, [pc, #16]	; (e308 <am_hal_ctimer_int_status_get+0x14>)
    e2f8:	6818      	ldr	r0, [r3, #0]
    }
}
    e2fa:	4770      	bx	lr
        uint32_t u32RetVal = AM_REGn(CTIMER, 0, INTSTAT);
    e2fc:	4a02      	ldr	r2, [pc, #8]	; (e308 <am_hal_ctimer_int_status_get+0x14>)
        return u32RetVal & AM_REGn(CTIMER, 0, INTEN);
    e2fe:	4903      	ldr	r1, [pc, #12]	; (e30c <am_hal_ctimer_int_status_get+0x18>)
        uint32_t u32RetVal = AM_REGn(CTIMER, 0, INTSTAT);
    e300:	6810      	ldr	r0, [r2, #0]
        return u32RetVal & AM_REGn(CTIMER, 0, INTEN);
    e302:	680b      	ldr	r3, [r1, #0]
    e304:	4018      	ands	r0, r3
    e306:	4770      	bx	lr
    e308:	40008204 	.word	0x40008204
    e30c:	40008200 	.word	0x40008200

0000e310 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    e310:	e7fe      	b.n	e310 <am_hal_debug_error>
    e312:	bf00      	nop

0000e314 <am_hal_flash_delay>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_flash_delay(uint32_t ui32Iterations)
{
    __asm("    subs    r0, #1\n"
    e314:	3801      	subs	r0, #1
    e316:	f47f affd 	bne.w	e314 <am_hal_flash_delay>
    e31a:	4770      	bx	lr

0000e31c <am_hal_flash_delay_status_change>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_change(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                 uint32_t ui32Mask, uint32_t ui32Value)
{
    while ( ui32usMaxDelay-- )
    e31c:	2800      	cmp	r0, #0
    e31e:	d070      	beq.n	e402 <am_hal_flash_delay_status_change+0xe6>
{
    e320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e324:	1e47      	subs	r7, r0, #1
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    e326:	6808      	ldr	r0, [r1, #0]
    e328:	4010      	ands	r0, r2
    e32a:	4283      	cmp	r3, r0
    e32c:	d063      	beq.n	e3f6 <am_hal_flash_delay_status_change+0xda>
    e32e:	f017 0903 	ands.w	r9, r7, #3
    e332:	461c      	mov	r4, r3
    e334:	4615      	mov	r5, r2
    e336:	460e      	mov	r6, r1
        }

        //
        // Call the BOOTROM cycle function to delay for about 1 microsecond.
        //
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    e338:	f8df 80cc 	ldr.w	r8, [pc, #204]	; e408 <am_hal_flash_delay_status_change+0xec>
    e33c:	d02c      	beq.n	e398 <am_hal_flash_delay_status_change+0x7c>
    e33e:	f7ff fec3 	bl	e0c8 <am_hal_clkgen_sysclk_get>
    e342:	fba8 3100 	umull	r3, r1, r8, r0
    e346:	0c88      	lsrs	r0, r1, #18
    e348:	f7ff ffe4 	bl	e314 <am_hal_flash_delay>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    e34c:	6833      	ldr	r3, [r6, #0]
    e34e:	402b      	ands	r3, r5
    e350:	42a3      	cmp	r3, r4
    while ( ui32usMaxDelay-- )
    e352:	f107 37ff 	add.w	r7, r7, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    e356:	d04e      	beq.n	e3f6 <am_hal_flash_delay_status_change+0xda>
    e358:	f1b9 0f01 	cmp.w	r9, #1
    e35c:	d01c      	beq.n	e398 <am_hal_flash_delay_status_change+0x7c>
    e35e:	f1b9 0f02 	cmp.w	r9, #2
    e362:	d00c      	beq.n	e37e <am_hal_flash_delay_status_change+0x62>
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    e364:	f7ff feb0 	bl	e0c8 <am_hal_clkgen_sysclk_get>
    e368:	fba8 3200 	umull	r3, r2, r8, r0
    e36c:	0c90      	lsrs	r0, r2, #18
    e36e:	f7ff ffd1 	bl	e314 <am_hal_flash_delay>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    e372:	6830      	ldr	r0, [r6, #0]
    e374:	4028      	ands	r0, r5
    e376:	42a0      	cmp	r0, r4
    while ( ui32usMaxDelay-- )
    e378:	f107 37ff 	add.w	r7, r7, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    e37c:	d03b      	beq.n	e3f6 <am_hal_flash_delay_status_change+0xda>
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    e37e:	f7ff fea3 	bl	e0c8 <am_hal_clkgen_sysclk_get>
    e382:	fba8 3100 	umull	r3, r1, r8, r0
    e386:	0c88      	lsrs	r0, r1, #18
    e388:	f7ff ffc4 	bl	e314 <am_hal_flash_delay>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    e38c:	6833      	ldr	r3, [r6, #0]
    e38e:	402b      	ands	r3, r5
    e390:	42a3      	cmp	r3, r4
    while ( ui32usMaxDelay-- )
    e392:	f107 37ff 	add.w	r7, r7, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    e396:	d02e      	beq.n	e3f6 <am_hal_flash_delay_status_change+0xda>
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    e398:	f7ff fe96 	bl	e0c8 <am_hal_clkgen_sysclk_get>
    e39c:	fba8 3200 	umull	r3, r2, r8, r0
    e3a0:	0c90      	lsrs	r0, r2, #18
    e3a2:	f7ff ffb7 	bl	e314 <am_hal_flash_delay>
    while ( ui32usMaxDelay-- )
    e3a6:	b34f      	cbz	r7, e3fc <am_hal_flash_delay_status_change+0xe0>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    e3a8:	6830      	ldr	r0, [r6, #0]
    e3aa:	4028      	ands	r0, r5
    e3ac:	42a0      	cmp	r0, r4
    while ( ui32usMaxDelay-- )
    e3ae:	f1a7 0704 	sub.w	r7, r7, #4
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    e3b2:	d020      	beq.n	e3f6 <am_hal_flash_delay_status_change+0xda>
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    e3b4:	f7ff fe88 	bl	e0c8 <am_hal_clkgen_sysclk_get>
    e3b8:	fba8 3100 	umull	r3, r1, r8, r0
    e3bc:	0c88      	lsrs	r0, r1, #18
    e3be:	f7ff ffa9 	bl	e314 <am_hal_flash_delay>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    e3c2:	6833      	ldr	r3, [r6, #0]
    e3c4:	402b      	ands	r3, r5
    e3c6:	42a3      	cmp	r3, r4
    e3c8:	d015      	beq.n	e3f6 <am_hal_flash_delay_status_change+0xda>
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    e3ca:	f7ff fe7d 	bl	e0c8 <am_hal_clkgen_sysclk_get>
    e3ce:	fba8 3200 	umull	r3, r2, r8, r0
    e3d2:	0c90      	lsrs	r0, r2, #18
    e3d4:	f7ff ff9e 	bl	e314 <am_hal_flash_delay>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    e3d8:	6830      	ldr	r0, [r6, #0]
    e3da:	4028      	ands	r0, r5
    e3dc:	42a0      	cmp	r0, r4
    e3de:	d00a      	beq.n	e3f6 <am_hal_flash_delay_status_change+0xda>
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    e3e0:	f7ff fe72 	bl	e0c8 <am_hal_clkgen_sysclk_get>
    e3e4:	fba8 3100 	umull	r3, r1, r8, r0
    e3e8:	0c88      	lsrs	r0, r1, #18
    e3ea:	f7ff ff93 	bl	e314 <am_hal_flash_delay>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    e3ee:	6833      	ldr	r3, [r6, #0]
    e3f0:	402b      	ands	r3, r5
    e3f2:	42a3      	cmp	r3, r4
    e3f4:	d1d0      	bne.n	e398 <am_hal_flash_delay_status_change+0x7c>
            return 1;
    e3f6:	2001      	movs	r0, #1
    e3f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }

    return 0;
    e3fc:	2000      	movs	r0, #0
    e3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e402:	2000      	movs	r0, #0
} // am_hal_flash_delay_status_change()
    e404:	4770      	bx	lr
    e406:	bf00      	nop
    e408:	165e9f81 	.word	0x165e9f81

0000e40c <am_hal_gpio_input_read>:
{
    //
    // Combine upper or lower GPIO words into one 64 bit return value.
    //
    uint64_t u64RetVal;
    u64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, RDB)) << 32;
    e40c:	4a05      	ldr	r2, [pc, #20]	; (e424 <am_hal_gpio_input_read+0x18>)
    u64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, RDA)) << 0;
    e40e:	4b06      	ldr	r3, [pc, #24]	; (e428 <am_hal_gpio_input_read+0x1c>)
    u64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, RDB)) << 32;
    e410:	6811      	ldr	r1, [r2, #0]
    u64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, RDA)) << 0;
    e412:	6818      	ldr	r0, [r3, #0]
    u64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, RDB)) << 32;
    e414:	2200      	movs	r2, #0
    e416:	460b      	mov	r3, r1
    return u64RetVal;
}
    e418:	ea42 0200 	orr.w	r2, r2, r0
    e41c:	4610      	mov	r0, r2
    e41e:	4619      	mov	r1, r3
    e420:	4770      	bx	lr
    e422:	bf00      	nop
    e424:	40010084 	.word	0x40010084
    e428:	40010080 	.word	0x40010080

0000e42c <am_hal_gpio_int_enable>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_enable(uint64_t ui64Interrupt)
{
    e42c:	b410      	push	{r4}
    //
    // Enable the interrupts.
    //
    AM_REG(GPIO, INT1EN) |= (ui64Interrupt >> 32);
    e42e:	4c05      	ldr	r4, [pc, #20]	; (e444 <am_hal_gpio_int_enable+0x18>)
    AM_REG(GPIO, INT0EN) |= (ui64Interrupt & 0xFFFFFFFF);
    e430:	4a05      	ldr	r2, [pc, #20]	; (e448 <am_hal_gpio_int_enable+0x1c>)
    AM_REG(GPIO, INT1EN) |= (ui64Interrupt >> 32);
    e432:	6823      	ldr	r3, [r4, #0]
    e434:	4319      	orrs	r1, r3
    e436:	6021      	str	r1, [r4, #0]
    AM_REG(GPIO, INT0EN) |= (ui64Interrupt & 0xFFFFFFFF);
    e438:	6811      	ldr	r1, [r2, #0]
}
    e43a:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(GPIO, INT0EN) |= (ui64Interrupt & 0xFFFFFFFF);
    e43e:	4308      	orrs	r0, r1
    e440:	6010      	str	r0, [r2, #0]
}
    e442:	4770      	bx	lr
    e444:	40010210 	.word	0x40010210
    e448:	40010200 	.word	0x40010200

0000e44c <am_hal_gpio_int_disable>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_disable(uint64_t ui64Interrupt)
{
    e44c:	b410      	push	{r4}
    //
    // Disable the interrupts.
    //
    AM_REG(GPIO, INT1EN) &= ~(ui64Interrupt >> 32);
    e44e:	4c06      	ldr	r4, [pc, #24]	; (e468 <am_hal_gpio_int_disable+0x1c>)
    AM_REG(GPIO, INT0EN) &= ~(ui64Interrupt & 0xFFFFFFFF);
    e450:	4a06      	ldr	r2, [pc, #24]	; (e46c <am_hal_gpio_int_disable+0x20>)
    AM_REG(GPIO, INT1EN) &= ~(ui64Interrupt >> 32);
    e452:	6823      	ldr	r3, [r4, #0]
    e454:	ea23 0101 	bic.w	r1, r3, r1
    e458:	6021      	str	r1, [r4, #0]
    AM_REG(GPIO, INT0EN) &= ~(ui64Interrupt & 0xFFFFFFFF);
    e45a:	6814      	ldr	r4, [r2, #0]
    e45c:	ea24 0000 	bic.w	r0, r4, r0
    e460:	6010      	str	r0, [r2, #0]
}
    e462:	f85d 4b04 	ldr.w	r4, [sp], #4
    e466:	4770      	bx	lr
    e468:	40010210 	.word	0x40010210
    e46c:	40010200 	.word	0x40010200

0000e470 <am_hal_gpio_int_clear>:
am_hal_gpio_int_clear(uint64_t ui64Interrupt)
{
    //
    // Clear the interrupts.
    //
    AM_REG(GPIO, INT1CLR) = (ui64Interrupt >> 32);
    e470:	4a02      	ldr	r2, [pc, #8]	; (e47c <am_hal_gpio_int_clear+0xc>)
    AM_REG(GPIO, INT0CLR) = (ui64Interrupt & 0xFFFFFFFF);
    e472:	4b03      	ldr	r3, [pc, #12]	; (e480 <am_hal_gpio_int_clear+0x10>)
    AM_REG(GPIO, INT1CLR) = (ui64Interrupt >> 32);
    e474:	6011      	str	r1, [r2, #0]
    AM_REG(GPIO, INT0CLR) = (ui64Interrupt & 0xFFFFFFFF);
    e476:	6018      	str	r0, [r3, #0]
    e478:	4770      	bx	lr
    e47a:	bf00      	nop
    e47c:	40010218 	.word	0x40010218
    e480:	40010208 	.word	0x40010208

0000e484 <am_hal_gpio_int_status_get>:
//! @return None
//
//*****************************************************************************
uint64_t
am_hal_gpio_int_status_get(bool bEnabledOnly)
{
    e484:	b470      	push	{r4, r5, r6}
    uint64_t u64RetVal, u64Mask;
    //
    // Combine upper or lower GPIO words into one 64 bit return value.
    //
    if (bEnabledOnly)
    e486:	b930      	cbnz	r0, e496 <am_hal_gpio_int_status_get+0x12>
        u64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
        return u64RetVal & u64Mask;
    }
    else
    {
        u64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    e488:	4a0b      	ldr	r2, [pc, #44]	; (e4b8 <am_hal_gpio_int_status_get+0x34>)
        u64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    e48a:	4b0c      	ldr	r3, [pc, #48]	; (e4bc <am_hal_gpio_int_status_get+0x38>)
        u64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    e48c:	6811      	ldr	r1, [r2, #0]
        u64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    e48e:	681c      	ldr	r4, [r3, #0]
    e490:	4320      	orrs	r0, r4
        return u64RetVal;
    }
}
    e492:	bc70      	pop	{r4, r5, r6}
    e494:	4770      	bx	lr
        u64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
    e496:	4d0a      	ldr	r5, [pc, #40]	; (e4c0 <am_hal_gpio_int_status_get+0x3c>)
        u64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
    e498:	4e0a      	ldr	r6, [pc, #40]	; (e4c4 <am_hal_gpio_int_status_get+0x40>)
        u64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    e49a:	4c07      	ldr	r4, [pc, #28]	; (e4b8 <am_hal_gpio_int_status_get+0x34>)
        u64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    e49c:	4a07      	ldr	r2, [pc, #28]	; (e4bc <am_hal_gpio_int_status_get+0x38>)
        u64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
    e49e:	6829      	ldr	r1, [r5, #0]
        u64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
    e4a0:	6835      	ldr	r5, [r6, #0]
        u64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    e4a2:	6823      	ldr	r3, [r4, #0]
        u64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    e4a4:	6816      	ldr	r6, [r2, #0]
        u64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
    e4a6:	2000      	movs	r0, #0
        u64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    e4a8:	4602      	mov	r2, r0
        u64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    e4aa:	4332      	orrs	r2, r6
        u64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
    e4ac:	4328      	orrs	r0, r5
        return u64RetVal & u64Mask;
    e4ae:	4010      	ands	r0, r2
    e4b0:	4019      	ands	r1, r3
}
    e4b2:	bc70      	pop	{r4, r5, r6}
    e4b4:	4770      	bx	lr
    e4b6:	bf00      	nop
    e4b8:	40010214 	.word	0x40010214
    e4bc:	40010204 	.word	0x40010204
    e4c0:	40010210 	.word	0x40010210
    e4c4:	40010200 	.word	0x40010200

0000e4c8 <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    e4c8:	280f      	cmp	r0, #15
    e4ca:	d80b      	bhi.n	e4e4 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    e4cc:	2805      	cmp	r0, #5
    e4ce:	d013      	beq.n	e4f8 <am_hal_interrupt_enable+0x30>
    e4d0:	2806      	cmp	r0, #6
    e4d2:	d017      	beq.n	e504 <am_hal_interrupt_enable+0x3c>
    e4d4:	2804      	cmp	r0, #4
    e4d6:	d104      	bne.n	e4e2 <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    e4d8:	4a0d      	ldr	r2, [pc, #52]	; (e510 <am_hal_interrupt_enable+0x48>)
    e4da:	6813      	ldr	r3, [r2, #0]
    e4dc:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    e4e0:	6010      	str	r0, [r2, #0]
    e4e2:	4770      	bx	lr
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    e4e4:	f1a0 0310 	sub.w	r3, r0, #16
    e4e8:	f003 0c1f 	and.w	ip, r3, #31
    e4ec:	2001      	movs	r0, #1
    e4ee:	4909      	ldr	r1, [pc, #36]	; (e514 <am_hal_interrupt_enable+0x4c>)
    e4f0:	fa00 f20c 	lsl.w	r2, r0, ip
    e4f4:	600a      	str	r2, [r1, #0]
    e4f6:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    e4f8:	4805      	ldr	r0, [pc, #20]	; (e510 <am_hal_interrupt_enable+0x48>)
    e4fa:	6801      	ldr	r1, [r0, #0]
    e4fc:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    e500:	6002      	str	r2, [r0, #0]
            break;
    e502:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    e504:	4902      	ldr	r1, [pc, #8]	; (e510 <am_hal_interrupt_enable+0x48>)
    e506:	680a      	ldr	r2, [r1, #0]
    e508:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    e50c:	600b      	str	r3, [r1, #0]
            break;
    e50e:	4770      	bx	lr
    e510:	e000ed24 	.word	0xe000ed24
    e514:	e000e100 	.word	0xe000e100

0000e518 <am_hal_interrupt_master_enable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    e518:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    e51c:	b662      	cpsie	i
    __asm("    bx lr");
    e51e:	4770      	bx	lr

0000e520 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    e520:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    e524:	b672      	cpsid	i
    __asm("    bx lr");
    e526:	4770      	bx	lr

0000e528 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    e528:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    e52c:	4770      	bx	lr
    e52e:	bf00      	nop

0000e530 <am_hal_iom_sleeping_queue_flush>:
    uint32_t ui32Critical;

    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    e530:	2801      	cmp	r0, #1
    e532:	d900      	bls.n	e536 <am_hal_iom_sleeping_queue_flush+0x6>
    e534:	4770      	bx	lr
{
    e536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e538:	4f0c      	ldr	r7, [pc, #48]	; (e56c <am_hal_iom_sleeping_queue_flush+0x3c>)
    e53a:	4e0d      	ldr	r6, [pc, #52]	; (e570 <am_hal_iom_sleeping_queue_flush+0x40>)

        //
        // Check the queue and the IOM itself.
        //
        if ( (g_bIomBusy[ui32Module] == false) &&
            am_hal_queue_empty(&g_psIOMQueue[ui32Module]) )
    e53c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    e540:	4604      	mov	r4, r0
    e542:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
        ui32Critical = am_hal_interrupt_master_disable();
    e546:	f7ff ffeb 	bl	e520 <am_hal_interrupt_master_disable>
        if ( (g_bIomBusy[ui32Module] == false) &&
    e54a:	5d31      	ldrb	r1, [r6, r4]
        ui32Critical = am_hal_interrupt_master_disable();
    e54c:	4605      	mov	r5, r0
        if ( (g_bIomBusy[ui32Module] == false) &&
    e54e:	b929      	cbnz	r1, e55c <am_hal_iom_sleeping_queue_flush+0x2c>
    e550:	68ba      	ldr	r2, [r7, #8]
    e552:	b91a      	cbnz	r2, e55c <am_hal_iom_sleeping_queue_flush+0x2c>
        //
        // End the critical section.
        //
        am_hal_interrupt_master_set(ui32Critical);
    }
}
    e554:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        am_hal_interrupt_master_set(ui32Critical);
    e558:	f7ff bfe6 	b.w	e528 <am_hal_interrupt_master_set>
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_NORMAL);
    e55c:	2000      	movs	r0, #0
    e55e:	f001 fa6f 	bl	fa40 <am_hal_sysctrl_sleep>
        am_hal_interrupt_master_set(ui32Critical);
    e562:	4628      	mov	r0, r5
    e564:	f7ff ffe0 	bl	e528 <am_hal_interrupt_master_set>
    e568:	e7ed      	b.n	e546 <am_hal_iom_sleeping_queue_flush+0x16>
    e56a:	bf00      	nop
    e56c:	10002950 	.word	0x10002950
    e570:	10002608 	.word	0x10002608

0000e574 <am_hal_iom_spi_write_nb.part.6>:
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    e574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    e578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    e57c:	461f      	mov	r7, r3
    e57e:	4606      	mov	r6, r0
    e580:	4688      	mov	r8, r1
    e582:	4691      	mov	r9, r2
    e584:	9d08      	ldr	r5, [sp, #32]
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    e586:	f080 80a6 	bcs.w	e6d6 <am_hal_iom_spi_write_nb.part.6+0x162>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    e58a:	2b00      	cmp	r3, #0
    e58c:	f000 809c 	beq.w	e6c8 <am_hal_iom_spi_write_nb.part.6+0x154>
    e590:	495b      	ldr	r1, [pc, #364]	; (e700 <am_hal_iom_spi_write_nb.part.6+0x18c>)
    while ( g_bIomBusy[ui32Module] );
    e592:	5d8a      	ldrb	r2, [r1, r6]
    e594:	2a00      	cmp	r2, #0
    e596:	d1fc      	bne.n	e592 <am_hal_iom_spi_write_nb.part.6+0x1e>
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    e598:	f506 24a0 	add.w	r4, r6, #327680	; 0x50000
    g_bIomBusy[ui32Module] = true;
    e59c:	2301      	movs	r3, #1
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    e59e:	3404      	adds	r4, #4
    g_bIomBusy[ui32Module] = true;
    e5a0:	558b      	strb	r3, [r1, r6]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    e5a2:	0324      	lsls	r4, r4, #12
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    e5a4:	2f40      	cmp	r7, #64	; 0x40
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    e5a6:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    e5aa:	f040 0101 	orr.w	r1, r0, #1
    e5ae:	f8c4 1208 	str.w	r1, [r4, #520]	; 0x208
    return (AM_HAL_IOM_MAX_FIFO_SIZE - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    e5b2:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    e5b6:	f002 0a7f 	and.w	sl, r2, #127	; 0x7f
    e5ba:	f1ca 0c40 	rsb	ip, sl, #64	; 0x40
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    e5be:	f00c 03fc 	and.w	r3, ip, #252	; 0xfc
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    e5c2:	46ba      	mov	sl, r7
    e5c4:	bf28      	it	cs
    e5c6:	f04f 0a40 	movcs.w	sl, #64	; 0x40
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    e5ca:	459a      	cmp	sl, r3
    e5cc:	f200 808a 	bhi.w	e6e4 <am_hal_iom_spi_write_nb.part.6+0x170>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    e5d0:	f1ba 0f00 	cmp.w	sl, #0
    e5d4:	d076      	beq.n	e6c4 <am_hal_iom_spi_write_nb.part.6+0x150>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    e5d6:	4648      	mov	r0, r9
    e5d8:	ea6f 0209 	mvn.w	r2, r9
    e5dc:	f850 1b04 	ldr.w	r1, [r0], #4
    e5e0:	6021      	str	r1, [r4, #0]
    e5e2:	444a      	add	r2, r9
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    e5e4:	eba0 0c09 	sub.w	ip, r0, r9
    e5e8:	4452      	add	r2, sl
    e5ea:	45e2      	cmp	sl, ip
    e5ec:	f3c2 0382 	ubfx	r3, r2, #2, #3
    e5f0:	d943      	bls.n	e67a <am_hal_iom_spi_write_nb.part.6+0x106>
    e5f2:	b323      	cbz	r3, e63e <am_hal_iom_spi_write_nb.part.6+0xca>
    e5f4:	2b01      	cmp	r3, #1
    e5f6:	d01b      	beq.n	e630 <am_hal_iom_spi_write_nb.part.6+0xbc>
    e5f8:	2b02      	cmp	r3, #2
    e5fa:	d016      	beq.n	e62a <am_hal_iom_spi_write_nb.part.6+0xb6>
    e5fc:	2b03      	cmp	r3, #3
    e5fe:	d011      	beq.n	e624 <am_hal_iom_spi_write_nb.part.6+0xb0>
    e600:	2b04      	cmp	r3, #4
    e602:	d00c      	beq.n	e61e <am_hal_iom_spi_write_nb.part.6+0xaa>
    e604:	2b05      	cmp	r3, #5
    e606:	d007      	beq.n	e618 <am_hal_iom_spi_write_nb.part.6+0xa4>
    e608:	2b06      	cmp	r3, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    e60a:	bf1c      	itt	ne
    e60c:	f850 3b04 	ldrne.w	r3, [r0], #4
    e610:	6023      	strne	r3, [r4, #0]
    e612:	f850 2b04 	ldr.w	r2, [r0], #4
    e616:	6022      	str	r2, [r4, #0]
    e618:	f850 1b04 	ldr.w	r1, [r0], #4
    e61c:	6021      	str	r1, [r4, #0]
    e61e:	f850 3b04 	ldr.w	r3, [r0], #4
    e622:	6023      	str	r3, [r4, #0]
    e624:	f850 2b04 	ldr.w	r2, [r0], #4
    e628:	6022      	str	r2, [r4, #0]
    e62a:	f850 1b04 	ldr.w	r1, [r0], #4
    e62e:	6021      	str	r1, [r4, #0]
    e630:	f850 3b04 	ldr.w	r3, [r0], #4
    e634:	6023      	str	r3, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    e636:	eba0 0209 	sub.w	r2, r0, r9
    e63a:	4592      	cmp	sl, r2
    e63c:	d91d      	bls.n	e67a <am_hal_iom_spi_write_nb.part.6+0x106>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    e63e:	4684      	mov	ip, r0
    e640:	3020      	adds	r0, #32
    e642:	f85c 1b04 	ldr.w	r1, [ip], #4
    e646:	6021      	str	r1, [r4, #0]
    e648:	f850 3c1c 	ldr.w	r3, [r0, #-28]
    e64c:	6023      	str	r3, [r4, #0]
    e64e:	f8dc 2004 	ldr.w	r2, [ip, #4]
    e652:	6022      	str	r2, [r4, #0]
    e654:	f850 1c14 	ldr.w	r1, [r0, #-20]
    e658:	6021      	str	r1, [r4, #0]
    e65a:	f850 3c10 	ldr.w	r3, [r0, #-16]
    e65e:	6023      	str	r3, [r4, #0]
    e660:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    e664:	6022      	str	r2, [r4, #0]
    e666:	f850 1c08 	ldr.w	r1, [r0, #-8]
    e66a:	6021      	str	r1, [r4, #0]
    e66c:	f850 3c04 	ldr.w	r3, [r0, #-4]
    e670:	6023      	str	r3, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    e672:	eba0 0209 	sub.w	r2, r0, r9
    e676:	4592      	cmp	sl, r2
    e678:	d8e1      	bhi.n	e63e <am_hal_iom_spi_write_nb.part.6+0xca>
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    e67a:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    e67e:	0086      	lsls	r6, r0, #2
    e680:	4a20      	ldr	r2, [pc, #128]	; (e704 <am_hal_iom_spi_write_nb.part.6+0x190>)
        g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    e682:	9809      	ldr	r0, [sp, #36]	; 0x24
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    e684:	2101      	movs	r1, #1
    e686:	1993      	adds	r3, r2, r6
    e688:	5191      	str	r1, [r2, r6]
        g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    e68a:	f02a 0203 	bic.w	r2, sl, #3
        g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
    e68e:	eba7 060a 	sub.w	r6, r7, sl
        g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    e692:	444a      	add	r2, r9
        g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    e694:	6118      	str	r0, [r3, #16]
        g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    e696:	60dd      	str	r5, [r3, #12]
        g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
    e698:	609e      	str	r6, [r3, #8]
        g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    e69a:	605a      	str	r2, [r3, #4]
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    e69c:	b34f      	cbz	r7, e6f2 <am_hal_iom_spi_write_nb.part.6+0x17e>
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    e69e:	ea4f 4808 	mov.w	r8, r8, lsl #16
    ui32Command |= ui32Options & 0x5C00FF00;
    e6a2:	f025 4523 	bic.w	r5, r5, #2734686208	; 0xa3000000
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    e6a6:	f408 23e0 	and.w	r3, r8, #458752	; 0x70000
    ui32Command |= ui32Options & 0x5C00FF00;
    e6aa:	f005 21ff 	and.w	r1, r5, #4278255360	; 0xff00ff00
    ui32Command |= (ui32NumBytes & 0xFF);
    e6ae:	b2fa      	uxtb	r2, r7
    ui32Command |= ui32Options & 0x5C00FF00;
    e6b0:	430b      	orrs	r3, r1
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    e6b2:	03ff      	lsls	r7, r7, #15
    ui32Command |= ui32Options & 0x5C00FF00;
    e6b4:	4313      	orrs	r3, r2
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    e6b6:	f007 66f0 	and.w	r6, r7, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
    e6ba:	4333      	orrs	r3, r6
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    e6bc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    e6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e6c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    e6c8:	4a0f      	ldr	r2, [pc, #60]	; (e708 <am_hal_iom_spi_write_nb.part.6+0x194>)
    e6ca:	4810      	ldr	r0, [pc, #64]	; (e70c <am_hal_iom_spi_write_nb.part.6+0x198>)
    e6cc:	f240 313f 	movw	r1, #831	; 0x33f
    e6d0:	f7ff fe1e 	bl	e310 <am_hal_debug_error>
    e6d4:	e75c      	b.n	e590 <am_hal_iom_spi_write_nb.part.6+0x1c>
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    e6d6:	4a0e      	ldr	r2, [pc, #56]	; (e710 <am_hal_iom_spi_write_nb.part.6+0x19c>)
    e6d8:	480c      	ldr	r0, [pc, #48]	; (e70c <am_hal_iom_spi_write_nb.part.6+0x198>)
    e6da:	f240 313d 	movw	r1, #829	; 0x33d
    e6de:	f7ff fe17 	bl	e310 <am_hal_debug_error>
    e6e2:	e755      	b.n	e590 <am_hal_iom_spi_write_nb.part.6+0x1c>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    e6e4:	4a0b      	ldr	r2, [pc, #44]	; (e714 <am_hal_iom_spi_write_nb.part.6+0x1a0>)
    e6e6:	4809      	ldr	r0, [pc, #36]	; (e70c <am_hal_iom_spi_write_nb.part.6+0x198>)
    e6e8:	f240 71d6 	movw	r1, #2006	; 0x7d6
    e6ec:	f7ff fe10 	bl	e310 <am_hal_debug_error>
    e6f0:	e771      	b.n	e5d6 <am_hal_iom_spi_write_nb.part.6+0x62>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    e6f2:	4a05      	ldr	r2, [pc, #20]	; (e708 <am_hal_iom_spi_write_nb.part.6+0x194>)
    e6f4:	4805      	ldr	r0, [pc, #20]	; (e70c <am_hal_iom_spi_write_nb.part.6+0x198>)
    e6f6:	f240 4104 	movw	r1, #1028	; 0x404
    e6fa:	f7ff fe09 	bl	e310 <am_hal_debug_error>
    e6fe:	e7ce      	b.n	e69e <am_hal_iom_spi_write_nb.part.6+0x12a>
    e700:	10002608 	.word	0x10002608
    e704:	10002928 	.word	0x10002928
    e708:	000130c8 	.word	0x000130c8
    e70c:	000130ec 	.word	0x000130ec
    e710:	000131dc 	.word	0x000131dc
    e714:	000131f4 	.word	0x000131f4

0000e718 <am_hal_iom_enable>:
    if ( ui32Module < AM_REG_IOMSTR_NUM_MODULES )
    e718:	2801      	cmp	r0, #1
{
    e71a:	b410      	push	{r4}
    if ( ui32Module < AM_REG_IOMSTR_NUM_MODULES )
    e71c:	d906      	bls.n	e72c <am_hal_iom_enable+0x14>
        if ( g_ui32Mod1Interface == AM_HAL_IOM_SPIMODE )
    e71e:	481d      	ldr	r0, [pc, #116]	; (e794 <am_hal_iom_enable+0x7c>)
    e720:	6803      	ldr	r3, [r0, #0]
    e722:	2b01      	cmp	r3, #1
    e724:	d025      	beq.n	e772 <am_hal_iom_enable+0x5a>
}
    e726:	f85d 4b04 	ldr.w	r4, [sp], #4
    e72a:	4770      	bx	lr
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
    e72c:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    e730:	3304      	adds	r3, #4
    e732:	031b      	lsls	r3, r3, #12
        g_bIomBusy[ui32Module] = false;
    e734:	4918      	ldr	r1, [pc, #96]	; (e798 <am_hal_iom_enable+0x80>)
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
    e736:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
        g_bIomBusy[ui32Module] = false;
    e73a:	2400      	movs	r4, #0
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
    e73c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    e740:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        g_bIomBusy[ui32Module] = false;
    e744:	540c      	strb	r4, [r1, r0]
    if ( ui32Module == 0 )
    e746:	2800      	cmp	r0, #0
    e748:	d1e9      	bne.n	e71e <am_hal_iom_enable+0x6>
        if ( g_ui32Mod0Interface == AM_HAL_IOM_SPIMODE )
    e74a:	4914      	ldr	r1, [pc, #80]	; (e79c <am_hal_iom_enable+0x84>)
    e74c:	680c      	ldr	r4, [r1, #0]
    e74e:	2c01      	cmp	r4, #1
    e750:	d1e9      	bne.n	e726 <am_hal_iom_enable+0xe>
            AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    e752:	4913      	ldr	r1, [pc, #76]	; (e7a0 <am_hal_iom_enable+0x88>)
            AM_BFW(GPIO, PADREGB, PAD5INPEN, 1);
    e754:	4b13      	ldr	r3, [pc, #76]	; (e7a4 <am_hal_iom_enable+0x8c>)
            AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    e756:	2273      	movs	r2, #115	; 0x73
    e758:	600a      	str	r2, [r1, #0]
            AM_BFW(GPIO, PADREGB, PAD5INPEN, 1);
    e75a:	681c      	ldr	r4, [r3, #0]
    e75c:	f444 7200 	orr.w	r2, r4, #512	; 0x200
    e760:	601a      	str	r2, [r3, #0]
            AM_BFW(GPIO, PADREGB, PAD6INPEN, 1);
    e762:	681c      	ldr	r4, [r3, #0]
    e764:	f444 3200 	orr.w	r2, r4, #131072	; 0x20000
    e768:	601a      	str	r2, [r3, #0]
}
    e76a:	f85d 4b04 	ldr.w	r4, [sp], #4
            AM_REGn(GPIO, 0, PADKEY) = 0;
    e76e:	6008      	str	r0, [r1, #0]
}
    e770:	4770      	bx	lr
            AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    e772:	490b      	ldr	r1, [pc, #44]	; (e7a0 <am_hal_iom_enable+0x88>)
            AM_BFW(GPIO, PADREGC, PAD8INPEN, 1);
    e774:	4c0c      	ldr	r4, [pc, #48]	; (e7a8 <am_hal_iom_enable+0x90>)
            AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    e776:	2273      	movs	r2, #115	; 0x73
    e778:	600a      	str	r2, [r1, #0]
            AM_BFW(GPIO, PADREGC, PAD8INPEN, 1);
    e77a:	6820      	ldr	r0, [r4, #0]
    e77c:	f040 0302 	orr.w	r3, r0, #2
    e780:	6023      	str	r3, [r4, #0]
            AM_BFW(GPIO, PADREGC, PAD9INPEN, 1);
    e782:	6822      	ldr	r2, [r4, #0]
            AM_REGn(GPIO, 0, PADKEY) = 0;
    e784:	2000      	movs	r0, #0
            AM_BFW(GPIO, PADREGC, PAD9INPEN, 1);
    e786:	f442 7300 	orr.w	r3, r2, #512	; 0x200
    e78a:	6023      	str	r3, [r4, #0]
            AM_REGn(GPIO, 0, PADKEY) = 0;
    e78c:	6008      	str	r0, [r1, #0]
}
    e78e:	f85d 4b04 	ldr.w	r4, [sp], #4
    e792:	4770      	bx	lr
    e794:	10002610 	.word	0x10002610
    e798:	10002608 	.word	0x10002608
    e79c:	1000260c 	.word	0x1000260c
    e7a0:	40010060 	.word	0x40010060
    e7a4:	40010004 	.word	0x40010004
    e7a8:	40010008 	.word	0x40010008

0000e7ac <am_hal_iom_disable>:
    if ( ui32Module < AM_REG_IOMSTR_NUM_MODULES )
    e7ac:	2801      	cmp	r0, #1
    e7ae:	d900      	bls.n	e7b2 <am_hal_iom_disable+0x6>
    e7b0:	4770      	bx	lr
    e7b2:	4a1a      	ldr	r2, [pc, #104]	; (e81c <am_hal_iom_disable+0x70>)
    while ( g_bIomBusy[ui32Module] );
    e7b4:	5c13      	ldrb	r3, [r2, r0]
    e7b6:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    e7ba:	2b00      	cmp	r3, #0
    e7bc:	d1fa      	bne.n	e7b4 <am_hal_iom_disable+0x8>
        AM_REGn(IOMSTR, ui32Module, CFG) &= ~(AM_REG_IOMSTR_CFG_IFCEN(1));
    e7be:	f500 22a0 	add.w	r2, r0, #327680	; 0x50000
    e7c2:	3204      	adds	r2, #4
    e7c4:	0313      	lsls	r3, r2, #12
    e7c6:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
    e7ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    e7ce:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        if ( ui32Module == 0 )
    e7d2:	b988      	cbnz	r0, e7f8 <am_hal_iom_disable+0x4c>
            if ( g_ui32Mod0Interface == AM_HAL_IOM_SPIMODE )
    e7d4:	4912      	ldr	r1, [pc, #72]	; (e820 <am_hal_iom_disable+0x74>)
    e7d6:	680b      	ldr	r3, [r1, #0]
    e7d8:	2b01      	cmp	r3, #1
    e7da:	d1e9      	bne.n	e7b0 <am_hal_iom_disable+0x4>
                AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    e7dc:	4911      	ldr	r1, [pc, #68]	; (e824 <am_hal_iom_disable+0x78>)
                AM_BFW(GPIO, PADREGB, PAD5INPEN, 0);
    e7de:	4b12      	ldr	r3, [pc, #72]	; (e828 <am_hal_iom_disable+0x7c>)
                AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    e7e0:	2273      	movs	r2, #115	; 0x73
    e7e2:	600a      	str	r2, [r1, #0]
                AM_BFW(GPIO, PADREGB, PAD5INPEN, 0);
    e7e4:	681a      	ldr	r2, [r3, #0]
    e7e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    e7ea:	601a      	str	r2, [r3, #0]
                AM_BFW(GPIO, PADREGB, PAD6INPEN, 0);
    e7ec:	681a      	ldr	r2, [r3, #0]
    e7ee:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
    e7f2:	601a      	str	r2, [r3, #0]
                AM_REGn(GPIO, 0, PADKEY) = 0;
    e7f4:	6008      	str	r0, [r1, #0]
    e7f6:	4770      	bx	lr
            if ( g_ui32Mod1Interface == AM_HAL_IOM_SPIMODE )
    e7f8:	480c      	ldr	r0, [pc, #48]	; (e82c <am_hal_iom_disable+0x80>)
    e7fa:	6803      	ldr	r3, [r0, #0]
    e7fc:	2b01      	cmp	r3, #1
    e7fe:	d1d7      	bne.n	e7b0 <am_hal_iom_disable+0x4>
                AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    e800:	4808      	ldr	r0, [pc, #32]	; (e824 <am_hal_iom_disable+0x78>)
                AM_BFW(GPIO, PADREGC, PAD8INPEN, 0);
    e802:	4b0b      	ldr	r3, [pc, #44]	; (e830 <am_hal_iom_disable+0x84>)
                AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    e804:	2273      	movs	r2, #115	; 0x73
    e806:	6002      	str	r2, [r0, #0]
                AM_BFW(GPIO, PADREGC, PAD8INPEN, 0);
    e808:	681a      	ldr	r2, [r3, #0]
    e80a:	f022 0202 	bic.w	r2, r2, #2
    e80e:	601a      	str	r2, [r3, #0]
                AM_BFW(GPIO, PADREGC, PAD9INPEN, 0);
    e810:	681a      	ldr	r2, [r3, #0]
    e812:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    e816:	601a      	str	r2, [r3, #0]
                AM_REGn(GPIO, 0, PADKEY) = 0;
    e818:	6001      	str	r1, [r0, #0]
}
    e81a:	e7c9      	b.n	e7b0 <am_hal_iom_disable+0x4>
    e81c:	10002608 	.word	0x10002608
    e820:	1000260c 	.word	0x1000260c
    e824:	40010060 	.word	0x40010060
    e828:	40010004 	.word	0x40010004
    e82c:	10002610 	.word	0x10002610
    e830:	40010008 	.word	0x40010008

0000e834 <am_hal_iom_config>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    e834:	2801      	cmp	r0, #1
    e836:	d900      	bls.n	e83a <am_hal_iom_config+0x6>
    e838:	4770      	bx	lr
{
    e83a:	b538      	push	{r3, r4, r5, lr}
    ui32Config = psConfig->ui32InterfaceMode;
    e83c:	680b      	ldr	r3, [r1, #0]
    if ( ui32Module == 0 )
    e83e:	b348      	cbz	r0, e894 <am_hal_iom_config+0x60>
        g_ui32Mod1Interface = psConfig->ui32InterfaceMode;
    e840:	4a24      	ldr	r2, [pc, #144]	; (e8d4 <am_hal_iom_config+0xa0>)
    e842:	6013      	str	r3, [r2, #0]
    if ( psConfig->bSPHA )
    e844:	7a0d      	ldrb	r5, [r1, #8]
    e846:	b10d      	cbz	r5, e84c <am_hal_iom_config+0x18>
        ui32Config |= AM_REG_IOMSTR_CFG_SPHA(1);
    e848:	f043 0304 	orr.w	r3, r3, #4
    if ( psConfig->bSPOL )
    e84c:	7a4a      	ldrb	r2, [r1, #9]
    e84e:	b10a      	cbz	r2, e854 <am_hal_iom_config+0x20>
        ui32Config |= AM_REG_IOMSTR_CFG_SPOL(1);
    e850:	f043 0302 	orr.w	r3, r3, #2
    AM_REGn(IOMSTR, ui32Module, CFG) = ui32Config;
    e854:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
    e858:	3004      	adds	r0, #4
    e85a:	0304      	lsls	r4, r0, #12
    e85c:	460d      	mov	r5, r1
    e85e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    am_hal_debug_assert_msg(
    e862:	7a89      	ldrb	r1, [r1, #10]
    e864:	293c      	cmp	r1, #60	; 0x3c
    e866:	d82e      	bhi.n	e8c6 <am_hal_iom_config+0x92>
    am_hal_debug_assert_msg(
    e868:	7aea      	ldrb	r2, [r5, #11]
    e86a:	2a3c      	cmp	r2, #60	; 0x3c
    e86c:	d824      	bhi.n	e8b8 <am_hal_iom_config+0x84>
    am_hal_debug_assert_msg(
    e86e:	7aab      	ldrb	r3, [r5, #10]
    e870:	2b03      	cmp	r3, #3
    e872:	d91a      	bls.n	e8aa <am_hal_iom_config+0x76>
    am_hal_debug_assert_msg(
    e874:	7ae8      	ldrb	r0, [r5, #11]
    e876:	2803      	cmp	r0, #3
    e878:	d90f      	bls.n	e89a <am_hal_iom_config+0x66>
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(psConfig->ui8WriteThreshold) |
    e87a:	7aa9      	ldrb	r1, [r5, #10]
    e87c:	020b      	lsls	r3, r1, #8
         AM_REG_IOMSTR_FIFOTHR_FIFORTHR(psConfig->ui8ReadThreshold));
    e87e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(psConfig->ui8WriteThreshold) |
    e882:	f403 507c 	and.w	r0, r3, #16128	; 0x3f00
    e886:	4310      	orrs	r0, r2
    AM_REGn(IOMSTR, ui32Module, FIFOTHR) =
    e888:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    AM_REGn(IOMSTR, ui32Module, CLKCFG) = psConfig->ui32ClockFrequency;
    e88c:	686d      	ldr	r5, [r5, #4]
    e88e:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
    e892:	bd38      	pop	{r3, r4, r5, pc}
        g_ui32Mod0Interface = psConfig->ui32InterfaceMode;
    e894:	4c10      	ldr	r4, [pc, #64]	; (e8d8 <am_hal_iom_config+0xa4>)
    e896:	6023      	str	r3, [r4, #0]
    e898:	e7d4      	b.n	e844 <am_hal_iom_config+0x10>
    am_hal_debug_assert_msg(
    e89a:	4810      	ldr	r0, [pc, #64]	; (e8dc <am_hal_iom_config+0xa8>)
    e89c:	4a10      	ldr	r2, [pc, #64]	; (e8e0 <am_hal_iom_config+0xac>)
    e89e:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    e8a2:	f7ff fd35 	bl	e310 <am_hal_debug_error>
    e8a6:	7ae8      	ldrb	r0, [r5, #11]
    e8a8:	e7e7      	b.n	e87a <am_hal_iom_config+0x46>
    am_hal_debug_assert_msg(
    e8aa:	4a0e      	ldr	r2, [pc, #56]	; (e8e4 <am_hal_iom_config+0xb0>)
    e8ac:	480b      	ldr	r0, [pc, #44]	; (e8dc <am_hal_iom_config+0xa8>)
    e8ae:	f44f 71ac 	mov.w	r1, #344	; 0x158
    e8b2:	f7ff fd2d 	bl	e310 <am_hal_debug_error>
    e8b6:	e7dd      	b.n	e874 <am_hal_iom_config+0x40>
    am_hal_debug_assert_msg(
    e8b8:	4a0b      	ldr	r2, [pc, #44]	; (e8e8 <am_hal_iom_config+0xb4>)
    e8ba:	4808      	ldr	r0, [pc, #32]	; (e8dc <am_hal_iom_config+0xa8>)
    e8bc:	f44f 71ab 	mov.w	r1, #342	; 0x156
    e8c0:	f7ff fd26 	bl	e310 <am_hal_debug_error>
    e8c4:	e7d3      	b.n	e86e <am_hal_iom_config+0x3a>
    am_hal_debug_assert_msg(
    e8c6:	4a09      	ldr	r2, [pc, #36]	; (e8ec <am_hal_iom_config+0xb8>)
    e8c8:	4804      	ldr	r0, [pc, #16]	; (e8dc <am_hal_iom_config+0xa8>)
    e8ca:	f44f 71aa 	mov.w	r1, #340	; 0x154
    e8ce:	f7ff fd1f 	bl	e310 <am_hal_debug_error>
    e8d2:	e7c9      	b.n	e868 <am_hal_iom_config+0x34>
    e8d4:	10002610 	.word	0x10002610
    e8d8:	1000260c 	.word	0x1000260c
    e8dc:	000130ec 	.word	0x000130ec
    e8e0:	000130a8 	.word	0x000130a8
    e8e4:	00013088 	.word	0x00013088
    e8e8:	0001306c 	.word	0x0001306c
    e8ec:	0001304c 	.word	0x0001304c

0000e8f0 <am_hal_iom_spi_write_nq>:
{
    e8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    e8f4:	2801      	cmp	r0, #1
{
    e8f6:	b083      	sub	sp, #12
    e8f8:	4606      	mov	r6, r0
    e8fa:	4688      	mov	r8, r1
    e8fc:	4617      	mov	r7, r2
    e8fe:	469b      	mov	fp, r3
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    e900:	d905      	bls.n	e90e <am_hal_iom_spi_write_nq+0x1e>
    e902:	4ac9      	ldr	r2, [pc, #804]	; (ec28 <am_hal_iom_spi_write_nq+0x338>)
    e904:	48c9      	ldr	r0, [pc, #804]	; (ec2c <am_hal_iom_spi_write_nq+0x33c>)
    e906:	f240 2121 	movw	r1, #545	; 0x221
    e90a:	f7ff fd01 	bl	e310 <am_hal_debug_error>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    e90e:	f1bb 0f00 	cmp.w	fp, #0
    e912:	f000 8173 	beq.w	ebfc <am_hal_iom_spi_write_nq+0x30c>
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    e916:	f5bb 5f80 	cmp.w	fp, #4096	; 0x1000
    e91a:	f080 80e3 	bcs.w	eae4 <am_hal_iom_spi_write_nq+0x1f4>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    e91e:	2e01      	cmp	r6, #1
    e920:	f240 80e9 	bls.w	eaf6 <am_hal_iom_spi_write_nq+0x206>
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    e924:	f506 24a0 	add.w	r4, r6, #327680	; 0x50000
    e928:	3404      	adds	r4, #4
    e92a:	0324      	lsls	r4, r4, #12
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    e92c:	2500      	movs	r5, #0
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    e92e:	f8d4 9200 	ldr.w	r9, [r4, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    e932:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    e936:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    e93a:	465d      	mov	r5, fp
    e93c:	2d40      	cmp	r5, #64	; 0x40
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    e93e:	f040 0301 	orr.w	r3, r0, #1
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    e942:	f504 7200 	add.w	r2, r4, #512	; 0x200
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    e946:	bf28      	it	cs
    e948:	2540      	movcs	r5, #64	; 0x40
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    e94a:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    e94e:	9200      	str	r2, [sp, #0]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    e950:	f504 7a02 	add.w	sl, r4, #520	; 0x208
    e954:	f025 0303 	bic.w	r3, r5, #3
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    e958:	f1bb 0f00 	cmp.w	fp, #0
    e95c:	d107      	bne.n	e96e <am_hal_iom_spi_write_nq+0x7e>
    e95e:	4ab4      	ldr	r2, [pc, #720]	; (ec30 <am_hal_iom_spi_write_nq+0x340>)
    e960:	48b2      	ldr	r0, [pc, #712]	; (ec2c <am_hal_iom_spi_write_nq+0x33c>)
    e962:	9301      	str	r3, [sp, #4]
    e964:	f240 4104 	movw	r1, #1028	; 0x404
    e968:	f7ff fcd2 	bl	e310 <am_hal_debug_error>
    e96c:	9b01      	ldr	r3, [sp, #4]
    ui32Command |= ui32Options & 0x5C00FF00;
    e96e:	990c      	ldr	r1, [sp, #48]	; 0x30
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    e970:	ea4f 4008 	mov.w	r0, r8, lsl #16
    ui32Command |= ui32Options & 0x5C00FF00;
    e974:	f021 4123 	bic.w	r1, r1, #2734686208	; 0xa3000000
    e978:	f001 28ff 	and.w	r8, r1, #4278255360	; 0xff00ff00
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    e97c:	f400 2ee0 	and.w	lr, r0, #458752	; 0x70000
    ui32Command |= ui32Options & 0x5C00FF00;
    e980:	ea4e 0208 	orr.w	r2, lr, r8
    ui32Command |= (ui32NumBytes & 0xFF);
    e984:	fa5f f08b 	uxtb.w	r0, fp
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    e988:	ea4f 3ccb 	mov.w	ip, fp, lsl #15
    ui32Command |= ui32Options & 0x5C00FF00;
    e98c:	4302      	orrs	r2, r0
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    e98e:	f00c 61f0 	and.w	r1, ip, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
    e992:	430a      	orrs	r2, r1
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    e994:	ebbb 0b05 	subs.w	fp, fp, r5
    pui32Data += ui32TransferSize >> 2;
    e998:	441f      	add	r7, r3
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    e99a:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    e99e:	bf08      	it	eq
    e9a0:	f504 7801 	addeq.w	r8, r4, #516	; 0x204
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    e9a4:	f000 8082 	beq.w	eaac <am_hal_iom_spi_write_nq+0x1bc>
    e9a8:	f8d4 5204 	ldr.w	r5, [r4, #516]	; 0x204
    e9ac:	07e9      	lsls	r1, r5, #31
    e9ae:	f504 7801 	add.w	r8, r4, #516	; 0x204
    e9b2:	d47b      	bmi.n	eaac <am_hal_iom_spi_write_nq+0x1bc>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    e9b4:	4653      	mov	r3, sl
    e9b6:	46ca      	mov	sl, r9
    e9b8:	e003      	b.n	e9c2 <am_hal_iom_spi_write_nq+0xd2>
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    e9ba:	f8d8 5000 	ldr.w	r5, [r8]
    e9be:	07ea      	lsls	r2, r5, #31
    e9c0:	d472      	bmi.n	eaa8 <am_hal_iom_spi_write_nq+0x1b8>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    e9c2:	2e01      	cmp	r6, #1
    e9c4:	d8f9      	bhi.n	e9ba <am_hal_iom_spi_write_nq+0xca>
    return (AM_HAL_IOM_MAX_FIFO_SIZE - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    e9c6:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    e9ca:	f002 007f 	and.w	r0, r2, #127	; 0x7f
    e9ce:	f1c0 0140 	rsb	r1, r0, #64	; 0x40
        ui32SpaceInFifo =  am_hal_iom_fifo_empty_slots(ui32Module);
    e9d2:	f001 09fc 	and.w	r9, r1, #252	; 0xfc
        if ( ui32NumBytes <= ui32SpaceInFifo )
    e9d6:	45cb      	cmp	fp, r9
    return (AM_HAL_IOM_MAX_FIFO_SIZE - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    e9d8:	f504 7e80 	add.w	lr, r4, #256	; 0x100
        if ( ui32NumBytes <= ui32SpaceInFifo )
    e9dc:	f200 811e 	bhi.w	ec1c <am_hal_iom_spi_write_nq+0x32c>
    e9e0:	f02b 0903 	bic.w	r9, fp, #3
    e9e4:	465d      	mov	r5, fp
    e9e6:	f04f 0b00 	mov.w	fp, #0
    return (AM_HAL_IOM_MAX_FIFO_SIZE - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    e9ea:	f8de 2000 	ldr.w	r2, [lr]
    e9ee:	f002 007f 	and.w	r0, r2, #127	; 0x7f
    e9f2:	f1c0 0140 	rsb	r1, r0, #64	; 0x40
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    e9f6:	f001 0cfc 	and.w	ip, r1, #252	; 0xfc
    e9fa:	4565      	cmp	r5, ip
    e9fc:	f200 80f5 	bhi.w	ebea <am_hal_iom_spi_write_nq+0x2fa>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    ea00:	2d00      	cmp	r5, #0
    ea02:	d04d      	beq.n	eaa0 <am_hal_iom_spi_write_nq+0x1b0>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    ea04:	463a      	mov	r2, r7
    ea06:	43f9      	mvns	r1, r7
    ea08:	f852 0b04 	ldr.w	r0, [r2], #4
    ea0c:	6020      	str	r0, [r4, #0]
    ea0e:	4439      	add	r1, r7
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    ea10:	1bd0      	subs	r0, r2, r7
    ea12:	4429      	add	r1, r5
    ea14:	4285      	cmp	r5, r0
    ea16:	f3c1 0182 	ubfx	r1, r1, #2, #3
    ea1a:	d941      	bls.n	eaa0 <am_hal_iom_spi_write_nq+0x1b0>
    ea1c:	b319      	cbz	r1, ea66 <am_hal_iom_spi_write_nq+0x176>
    ea1e:	2901      	cmp	r1, #1
    ea20:	d01b      	beq.n	ea5a <am_hal_iom_spi_write_nq+0x16a>
    ea22:	2902      	cmp	r1, #2
    ea24:	d016      	beq.n	ea54 <am_hal_iom_spi_write_nq+0x164>
    ea26:	2903      	cmp	r1, #3
    ea28:	d011      	beq.n	ea4e <am_hal_iom_spi_write_nq+0x15e>
    ea2a:	2904      	cmp	r1, #4
    ea2c:	d00c      	beq.n	ea48 <am_hal_iom_spi_write_nq+0x158>
    ea2e:	2905      	cmp	r1, #5
    ea30:	d007      	beq.n	ea42 <am_hal_iom_spi_write_nq+0x152>
    ea32:	2906      	cmp	r1, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    ea34:	bf1c      	itt	ne
    ea36:	f852 1b04 	ldrne.w	r1, [r2], #4
    ea3a:	6021      	strne	r1, [r4, #0]
    ea3c:	f852 0b04 	ldr.w	r0, [r2], #4
    ea40:	6020      	str	r0, [r4, #0]
    ea42:	f852 1b04 	ldr.w	r1, [r2], #4
    ea46:	6021      	str	r1, [r4, #0]
    ea48:	f852 0b04 	ldr.w	r0, [r2], #4
    ea4c:	6020      	str	r0, [r4, #0]
    ea4e:	f852 1b04 	ldr.w	r1, [r2], #4
    ea52:	6021      	str	r1, [r4, #0]
    ea54:	f852 0b04 	ldr.w	r0, [r2], #4
    ea58:	6020      	str	r0, [r4, #0]
    ea5a:	f852 1b04 	ldr.w	r1, [r2], #4
    ea5e:	6021      	str	r1, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    ea60:	1bd0      	subs	r0, r2, r7
    ea62:	4285      	cmp	r5, r0
    ea64:	d91c      	bls.n	eaa0 <am_hal_iom_spi_write_nq+0x1b0>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    ea66:	4696      	mov	lr, r2
    ea68:	3220      	adds	r2, #32
    ea6a:	f85e 1b04 	ldr.w	r1, [lr], #4
    ea6e:	6021      	str	r1, [r4, #0]
    ea70:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    ea74:	6020      	str	r0, [r4, #0]
    ea76:	f8de 1004 	ldr.w	r1, [lr, #4]
    ea7a:	6021      	str	r1, [r4, #0]
    ea7c:	f852 0c14 	ldr.w	r0, [r2, #-20]
    ea80:	6020      	str	r0, [r4, #0]
    ea82:	f852 1c10 	ldr.w	r1, [r2, #-16]
    ea86:	6021      	str	r1, [r4, #0]
    ea88:	f852 0c0c 	ldr.w	r0, [r2, #-12]
    ea8c:	6020      	str	r0, [r4, #0]
    ea8e:	f852 1c08 	ldr.w	r1, [r2, #-8]
    ea92:	6021      	str	r1, [r4, #0]
    ea94:	f852 0c04 	ldr.w	r0, [r2, #-4]
    ea98:	6020      	str	r0, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    ea9a:	1bd1      	subs	r1, r2, r7
    ea9c:	428d      	cmp	r5, r1
    ea9e:	d8e2      	bhi.n	ea66 <am_hal_iom_spi_write_nq+0x176>
        pui32Data += ui32TransferSize >> 2;
    eaa0:	444f      	add	r7, r9
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    eaa2:	f1bb 0f00 	cmp.w	fp, #0
    eaa6:	d188      	bne.n	e9ba <am_hal_iom_spi_write_nq+0xca>
    eaa8:	46d1      	mov	r9, sl
    eaaa:	469a      	mov	sl, r3
    ui32Status = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    eaac:	4f61      	ldr	r7, [pc, #388]	; (ec34 <am_hal_iom_spi_write_nq+0x344>)
    eaae:	2301      	movs	r3, #1
    eab0:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
    eab4:	461a      	mov	r2, r3
    eab6:	4641      	mov	r1, r8
    eab8:	f7ff fc30 	bl	e31c <am_hal_flash_delay_status_change>
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    eabc:	9a00      	ldr	r2, [sp, #0]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = (ui32IntConfig | AM_REG_IOMSTR_INTSTAT_CMDCMP_M);
    eabe:	f049 0401 	orr.w	r4, r9, #1
    am_hal_debug_assert_msg(ui32Status == 1, "IOM CMDCMP was not seen");
    eac2:	2801      	cmp	r0, #1
    AM_REGn(IOMSTR, ui32Module, INTCLR) = (ui32IntConfig | AM_REG_IOMSTR_INTSTAT_CMDCMP_M);
    eac4:	f8ca 4000 	str.w	r4, [sl]
    ui32Status = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    eac8:	4606      	mov	r6, r0
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    eaca:	f8c2 9000 	str.w	r9, [r2]
    am_hal_debug_assert_msg(ui32Status == 1, "IOM CMDCMP was not seen");
    eace:	d005      	beq.n	eadc <am_hal_iom_spi_write_nq+0x1ec>
    ead0:	4a59      	ldr	r2, [pc, #356]	; (ec38 <am_hal_iom_spi_write_nq+0x348>)
    ead2:	4856      	ldr	r0, [pc, #344]	; (ec2c <am_hal_iom_spi_write_nq+0x33c>)
    ead4:	f240 2181 	movw	r1, #641	; 0x281
    ead8:	f7ff fc1a 	bl	e310 <am_hal_debug_error>
}
    eadc:	4630      	mov	r0, r6
    eade:	b003      	add	sp, #12
    eae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    eae4:	4a55      	ldr	r2, [pc, #340]	; (ec3c <am_hal_iom_spi_write_nq+0x34c>)
    eae6:	4851      	ldr	r0, [pc, #324]	; (ec2c <am_hal_iom_spi_write_nq+0x33c>)
    eae8:	f44f 710a 	mov.w	r1, #552	; 0x228
    eaec:	f7ff fc10 	bl	e310 <am_hal_debug_error>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    eaf0:	2e01      	cmp	r6, #1
    eaf2:	f63f af17 	bhi.w	e924 <am_hal_iom_spi_write_nq+0x34>
    eaf6:	4952      	ldr	r1, [pc, #328]	; (ec40 <am_hal_iom_spi_write_nq+0x350>)
    while ( g_bIomBusy[ui32Module] );
    eaf8:	5d8b      	ldrb	r3, [r1, r6]
    eafa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    eafe:	2b00      	cmp	r3, #0
    eb00:	d1fa      	bne.n	eaf8 <am_hal_iom_spi_write_nq+0x208>
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    eb02:	f506 24a0 	add.w	r4, r6, #327680	; 0x50000
    eb06:	3404      	adds	r4, #4
    eb08:	0324      	lsls	r4, r4, #12
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    eb0a:	465d      	mov	r5, fp
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    eb0c:	f8d4 9200 	ldr.w	r9, [r4, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    eb10:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    eb14:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    eb18:	f040 0101 	orr.w	r1, r0, #1
    eb1c:	f8c4 1208 	str.w	r1, [r4, #520]	; 0x208
    return (AM_HAL_IOM_MAX_FIFO_SIZE - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    eb20:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    eb24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    eb28:	2d40      	cmp	r5, #64	; 0x40
    return (AM_HAL_IOM_MAX_FIFO_SIZE - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    eb2a:	f1c2 0040 	rsb	r0, r2, #64	; 0x40
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    eb2e:	bf28      	it	cs
    eb30:	2540      	movcs	r5, #64	; 0x40
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    eb32:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    eb36:	f504 7300 	add.w	r3, r4, #512	; 0x200
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    eb3a:	42a9      	cmp	r1, r5
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    eb3c:	9300      	str	r3, [sp, #0]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    eb3e:	f504 7a02 	add.w	sl, r4, #520	; 0x208
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    eb42:	d362      	bcc.n	ec0a <am_hal_iom_spi_write_nq+0x31a>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    eb44:	2d00      	cmp	r5, #0
    eb46:	d067      	beq.n	ec18 <am_hal_iom_spi_write_nq+0x328>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    eb48:	4638      	mov	r0, r7
    eb4a:	43fa      	mvns	r2, r7
    eb4c:	f850 1b04 	ldr.w	r1, [r0], #4
    eb50:	6021      	str	r1, [r4, #0]
    eb52:	443a      	add	r2, r7
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    eb54:	1bc3      	subs	r3, r0, r7
    eb56:	442a      	add	r2, r5
    eb58:	42ab      	cmp	r3, r5
    eb5a:	f3c2 0282 	ubfx	r2, r2, #2, #3
    eb5e:	f4bf aef9 	bcs.w	e954 <am_hal_iom_spi_write_nq+0x64>
    eb62:	b322      	cbz	r2, ebae <am_hal_iom_spi_write_nq+0x2be>
    eb64:	2a01      	cmp	r2, #1
    eb66:	d01b      	beq.n	eba0 <am_hal_iom_spi_write_nq+0x2b0>
    eb68:	2a02      	cmp	r2, #2
    eb6a:	d016      	beq.n	eb9a <am_hal_iom_spi_write_nq+0x2aa>
    eb6c:	2a03      	cmp	r2, #3
    eb6e:	d011      	beq.n	eb94 <am_hal_iom_spi_write_nq+0x2a4>
    eb70:	2a04      	cmp	r2, #4
    eb72:	d00c      	beq.n	eb8e <am_hal_iom_spi_write_nq+0x29e>
    eb74:	2a05      	cmp	r2, #5
    eb76:	d007      	beq.n	eb88 <am_hal_iom_spi_write_nq+0x298>
    eb78:	2a06      	cmp	r2, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    eb7a:	bf1c      	itt	ne
    eb7c:	f850 2b04 	ldrne.w	r2, [r0], #4
    eb80:	6022      	strne	r2, [r4, #0]
    eb82:	f850 1b04 	ldr.w	r1, [r0], #4
    eb86:	6021      	str	r1, [r4, #0]
    eb88:	f850 3b04 	ldr.w	r3, [r0], #4
    eb8c:	6023      	str	r3, [r4, #0]
    eb8e:	f850 2b04 	ldr.w	r2, [r0], #4
    eb92:	6022      	str	r2, [r4, #0]
    eb94:	f850 1b04 	ldr.w	r1, [r0], #4
    eb98:	6021      	str	r1, [r4, #0]
    eb9a:	f850 3b04 	ldr.w	r3, [r0], #4
    eb9e:	6023      	str	r3, [r4, #0]
    eba0:	f850 2b04 	ldr.w	r2, [r0], #4
    eba4:	6022      	str	r2, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    eba6:	1bc1      	subs	r1, r0, r7
    eba8:	42a9      	cmp	r1, r5
    ebaa:	f4bf aed3 	bcs.w	e954 <am_hal_iom_spi_write_nq+0x64>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    ebae:	4684      	mov	ip, r0
    ebb0:	3020      	adds	r0, #32
    ebb2:	f85c 3b04 	ldr.w	r3, [ip], #4
    ebb6:	6023      	str	r3, [r4, #0]
    ebb8:	f850 2c1c 	ldr.w	r2, [r0, #-28]
    ebbc:	6022      	str	r2, [r4, #0]
    ebbe:	f8dc 1004 	ldr.w	r1, [ip, #4]
    ebc2:	6021      	str	r1, [r4, #0]
    ebc4:	f850 3c14 	ldr.w	r3, [r0, #-20]
    ebc8:	6023      	str	r3, [r4, #0]
    ebca:	f850 2c10 	ldr.w	r2, [r0, #-16]
    ebce:	6022      	str	r2, [r4, #0]
    ebd0:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    ebd4:	6021      	str	r1, [r4, #0]
    ebd6:	f850 3c08 	ldr.w	r3, [r0, #-8]
    ebda:	6023      	str	r3, [r4, #0]
    ebdc:	f850 2c04 	ldr.w	r2, [r0, #-4]
    ebe0:	6022      	str	r2, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    ebe2:	1bc1      	subs	r1, r0, r7
    ebe4:	42a9      	cmp	r1, r5
    ebe6:	d3e2      	bcc.n	ebae <am_hal_iom_spi_write_nq+0x2be>
    ebe8:	e6b4      	b.n	e954 <am_hal_iom_spi_write_nq+0x64>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    ebea:	4a16      	ldr	r2, [pc, #88]	; (ec44 <am_hal_iom_spi_write_nq+0x354>)
    ebec:	480f      	ldr	r0, [pc, #60]	; (ec2c <am_hal_iom_spi_write_nq+0x33c>)
    ebee:	9301      	str	r3, [sp, #4]
    ebf0:	f240 71d6 	movw	r1, #2006	; 0x7d6
    ebf4:	f7ff fb8c 	bl	e310 <am_hal_debug_error>
    ebf8:	9b01      	ldr	r3, [sp, #4]
    ebfa:	e703      	b.n	ea04 <am_hal_iom_spi_write_nq+0x114>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    ebfc:	4a0c      	ldr	r2, [pc, #48]	; (ec30 <am_hal_iom_spi_write_nq+0x340>)
    ebfe:	480b      	ldr	r0, [pc, #44]	; (ec2c <am_hal_iom_spi_write_nq+0x33c>)
    ec00:	f240 2123 	movw	r1, #547	; 0x223
    ec04:	f7ff fb84 	bl	e310 <am_hal_debug_error>
    ec08:	e689      	b.n	e91e <am_hal_iom_spi_write_nq+0x2e>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    ec0a:	4a0e      	ldr	r2, [pc, #56]	; (ec44 <am_hal_iom_spi_write_nq+0x354>)
    ec0c:	4807      	ldr	r0, [pc, #28]	; (ec2c <am_hal_iom_spi_write_nq+0x33c>)
    ec0e:	f240 71d6 	movw	r1, #2006	; 0x7d6
    ec12:	f7ff fb7d 	bl	e310 <am_hal_debug_error>
    ec16:	e797      	b.n	eb48 <am_hal_iom_spi_write_nq+0x258>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    ec18:	462b      	mov	r3, r5
    ec1a:	e69d      	b.n	e958 <am_hal_iom_spi_write_nq+0x68>
    ec1c:	f029 0503 	bic.w	r5, r9, #3
    ec20:	ebab 0b05 	sub.w	fp, fp, r5
    ec24:	46a9      	mov	r9, r5
    ec26:	e6e0      	b.n	e9ea <am_hal_iom_spi_write_nq+0xfa>
    ec28:	00013228 	.word	0x00013228
    ec2c:	000130ec 	.word	0x000130ec
    ec30:	000130c8 	.word	0x000130c8
    ec34:	10001144 	.word	0x10001144
    ec38:	00013150 	.word	0x00013150
    ec3c:	000131dc 	.word	0x000131dc
    ec40:	10002608 	.word	0x10002608
    ec44:	000131f4 	.word	0x000131f4

0000ec48 <am_hal_iom_spi_write>:
{
    ec48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    ec4c:	2801      	cmp	r0, #1
{
    ec4e:	b08a      	sub	sp, #40	; 0x28
    ec50:	4604      	mov	r4, r0
    ec52:	460f      	mov	r7, r1
    ec54:	4690      	mov	r8, r2
    ec56:	461e      	mov	r6, r3
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    ec58:	d905      	bls.n	ec66 <am_hal_iom_spi_write+0x1e>
    ec5a:	4a32      	ldr	r2, [pc, #200]	; (ed24 <am_hal_iom_spi_write+0xdc>)
    ec5c:	4832      	ldr	r0, [pc, #200]	; (ed28 <am_hal_iom_spi_write+0xe0>)
    ec5e:	f240 118f 	movw	r1, #399	; 0x18f
    ec62:	f7ff fb55 	bl	e310 <am_hal_debug_error>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    ec66:	b18e      	cbz	r6, ec8c <am_hal_iom_spi_write+0x44>
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
    ec68:	0065      	lsls	r5, r4, #1
    ec6a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; ed3c <am_hal_iom_spi_write+0xf4>
    ec6e:	192a      	adds	r2, r5, r4
    ec70:	eb09 00c2 	add.w	r0, r9, r2, lsl #3
    ec74:	6943      	ldr	r3, [r0, #20]
    ec76:	2b00      	cmp	r3, #0
    ec78:	d032      	beq.n	ece0 <am_hal_iom_spi_write+0x98>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    ec7a:	2c01      	cmp	r4, #1
    ec7c:	d90d      	bls.n	ec9a <am_hal_iom_spi_write+0x52>
        am_hal_iom_queue_flush(ui32Module);
    ec7e:	4e2b      	ldr	r6, [pc, #172]	; (ed2c <am_hal_iom_spi_write+0xe4>)
    ec80:	4620      	mov	r0, r4
    ec82:	6834      	ldr	r4, [r6, #0]
    ec84:	47a0      	blx	r4
}
    ec86:	b00a      	add	sp, #40	; 0x28
    ec88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    ec8c:	4a28      	ldr	r2, [pc, #160]	; (ed30 <am_hal_iom_spi_write+0xe8>)
    ec8e:	4826      	ldr	r0, [pc, #152]	; (ed28 <am_hal_iom_spi_write+0xe0>)
    ec90:	f240 1191 	movw	r1, #401	; 0x191
    ec94:	f7ff fb3c 	bl	e310 <am_hal_debug_error>
    ec98:	e7e6      	b.n	ec68 <am_hal_iom_spi_write+0x20>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    ec9a:	b356      	cbz	r6, ecf2 <am_hal_iom_spi_write+0xaa>
    ui32Critical = am_hal_interrupt_master_disable();
    ec9c:	f7ff fc40 	bl	e520 <am_hal_interrupt_master_disable>
    if ( (g_bIomBusy[ui32Module] == false) &&
    eca0:	4a24      	ldr	r2, [pc, #144]	; (ed34 <am_hal_iom_spi_write+0xec>)
    ui32Critical = am_hal_interrupt_master_disable();
    eca2:	4682      	mov	sl, r0
    if ( (g_bIomBusy[ui32Module] == false) &&
    eca4:	5d10      	ldrb	r0, [r2, r4]
    eca6:	b928      	cbnz	r0, ecb4 <am_hal_iom_spi_write+0x6c>
        am_hal_queue_empty(&g_psIOMQueue[ui32Module]) )
    eca8:	192b      	adds	r3, r5, r4
    ecaa:	eb09 0cc3 	add.w	ip, r9, r3, lsl #3
    if ( (g_bIomBusy[ui32Module] == false) &&
    ecae:	f8dc 1008 	ldr.w	r1, [ip, #8]
    ecb2:	b361      	cbz	r1, ed0e <am_hal_iom_spi_write+0xc6>
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    ecb4:	4425      	add	r5, r4
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_WRITE;
    ecb6:	2300      	movs	r3, #0
        sIOMTransaction.ui32ChipSelect = ui32ChipSelect;
    ecb8:	9705      	str	r7, [sp, #20]
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    ecba:	eb09 00c5 	add.w	r0, r9, r5, lsl #3
        sIOMTransaction.ui32Options = ui32Options;
    ecbe:	9f12      	ldr	r7, [sp, #72]	; 0x48
        sIOMTransaction.ui32Module = ui32Module;
    ecc0:	9404      	str	r4, [sp, #16]
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    ecc2:	2201      	movs	r2, #1
    ecc4:	a903      	add	r1, sp, #12
        sIOMTransaction.pui32Data = pui32Data;
    ecc6:	f8cd 8018 	str.w	r8, [sp, #24]
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
    ecca:	9607      	str	r6, [sp, #28]
        sIOMTransaction.ui32Options = ui32Options;
    eccc:	9708      	str	r7, [sp, #32]
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_WRITE;
    ecce:	9303      	str	r3, [sp, #12]
        sIOMTransaction.pfnCallback = pfnCallback;
    ecd0:	9309      	str	r3, [sp, #36]	; 0x24
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    ecd2:	f000 fe25 	bl	f920 <am_hal_queue_item_add>
    ecd6:	b198      	cbz	r0, ed00 <am_hal_iom_spi_write+0xb8>
    am_hal_interrupt_master_set(ui32Critical);
    ecd8:	4650      	mov	r0, sl
    ecda:	f7ff fc25 	bl	e528 <am_hal_interrupt_master_set>
    ecde:	e7ce      	b.n	ec7e <am_hal_iom_spi_write+0x36>
        am_hal_iom_spi_write_nq(ui32Module, ui32ChipSelect, pui32Data,
    ece0:	9912      	ldr	r1, [sp, #72]	; 0x48
    ece2:	9100      	str	r1, [sp, #0]
    ece4:	4633      	mov	r3, r6
    ece6:	4642      	mov	r2, r8
    ece8:	4639      	mov	r1, r7
    ecea:	4620      	mov	r0, r4
    ecec:	f7ff fe00 	bl	e8f0 <am_hal_iom_spi_write_nq>
    ecf0:	e7c9      	b.n	ec86 <am_hal_iom_spi_write+0x3e>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    ecf2:	4a0f      	ldr	r2, [pc, #60]	; (ed30 <am_hal_iom_spi_write+0xe8>)
    ecf4:	480c      	ldr	r0, [pc, #48]	; (ed28 <am_hal_iom_spi_write+0xe0>)
    ecf6:	f640 218c 	movw	r1, #2700	; 0xa8c
    ecfa:	f7ff fb09 	bl	e310 <am_hal_debug_error>
    ecfe:	e7cd      	b.n	ec9c <am_hal_iom_spi_write+0x54>
            am_hal_debug_assert_msg(0,
    ed00:	4a0d      	ldr	r2, [pc, #52]	; (ed38 <am_hal_iom_spi_write+0xf0>)
    ed02:	4809      	ldr	r0, [pc, #36]	; (ed28 <am_hal_iom_spi_write+0xe0>)
    ed04:	f640 21bd 	movw	r1, #2749	; 0xabd
    ed08:	f7ff fb02 	bl	e310 <am_hal_debug_error>
    ed0c:	e7e4      	b.n	ecd8 <am_hal_iom_spi_write+0x90>
    ed0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ed10:	9101      	str	r1, [sp, #4]
    ed12:	9200      	str	r2, [sp, #0]
    ed14:	4633      	mov	r3, r6
    ed16:	4642      	mov	r2, r8
    ed18:	4639      	mov	r1, r7
    ed1a:	4620      	mov	r0, r4
    ed1c:	f7ff fc2a 	bl	e574 <am_hal_iom_spi_write_nb.part.6>
    ed20:	e7da      	b.n	ecd8 <am_hal_iom_spi_write+0x90>
    ed22:	bf00      	nop
    ed24:	00013228 	.word	0x00013228
    ed28:	000130ec 	.word	0x000130ec
    ed2c:	10001140 	.word	0x10001140
    ed30:	000130c8 	.word	0x000130c8
    ed34:	10002608 	.word	0x10002608
    ed38:	00013168 	.word	0x00013168
    ed3c:	10002950 	.word	0x10002950

0000ed40 <am_hal_iom_spi_read_nq>:
{
    ed40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed44:	b085      	sub	sp, #20
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    ed46:	2801      	cmp	r0, #1
{
    ed48:	4607      	mov	r7, r0
    ed4a:	4688      	mov	r8, r1
    ed4c:	4692      	mov	sl, r2
    ed4e:	461d      	mov	r5, r3
    ed50:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    ed52:	f240 81a2 	bls.w	f09a <am_hal_iom_spi_read_nq+0x35a>
    ed56:	4ab2      	ldr	r2, [pc, #712]	; (f020 <am_hal_iom_spi_read_nq+0x2e0>)
    ed58:	48b2      	ldr	r0, [pc, #712]	; (f024 <am_hal_iom_spi_read_nq+0x2e4>)
    ed5a:	f240 21ae 	movw	r1, #686	; 0x2ae
    ed5e:	f7ff fad7 	bl	e310 <am_hal_debug_error>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    ed62:	2d00      	cmp	r5, #0
    ed64:	f000 8168 	beq.w	f038 <am_hal_iom_spi_read_nq+0x2f8>
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    ed68:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    ed6c:	f080 8133 	bcs.w	efd6 <am_hal_iom_spi_read_nq+0x296>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    ed70:	2f01      	cmp	r7, #1
    ed72:	f240 8139 	bls.w	efe8 <am_hal_iom_spi_read_nq+0x2a8>
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    ed76:	f507 24a0 	add.w	r4, r7, #327680	; 0x50000
    ed7a:	3404      	adds	r4, #4
    ed7c:	0324      	lsls	r4, r4, #12
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    ed7e:	2000      	movs	r0, #0
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    ed80:	f8d4 b200 	ldr.w	fp, [r4, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    ed84:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    ed88:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    ed8c:	f504 7200 	add.w	r2, r4, #512	; 0x200
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    ed90:	f041 0301 	orr.w	r3, r1, #1
    ed94:	f504 7002 	add.w	r0, r4, #520	; 0x208
    ed98:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    ed9c:	9202      	str	r2, [sp, #8]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    ed9e:	9001      	str	r0, [sp, #4]
    ui32Command |= ui32Options & 0x5C00FF00;
    eda0:	f026 4923 	bic.w	r9, r6, #2734686208	; 0xa3000000
    eda4:	f009 2cff 	and.w	ip, r9, #4278255360	; 0xff00ff00
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    eda8:	ea4f 4308 	mov.w	r3, r8, lsl #16
    ui32Command |= ui32Options & 0x5C00FF00;
    edac:	f04c 4100 	orr.w	r1, ip, #2147483648	; 0x80000000
    ui32Command |= (ui32NumBytes & 0xFF);
    edb0:	b2ee      	uxtb	r6, r5
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    edb2:	f403 22e0 	and.w	r2, r3, #458752	; 0x70000
    ui32Command |= ui32Options & 0x5C00FF00;
    edb6:	430e      	orrs	r6, r1
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    edb8:	03e8      	lsls	r0, r5, #15
    ui32Command |= ui32Options & 0x5C00FF00;
    edba:	ea46 0102 	orr.w	r1, r6, r2
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    edbe:	f000 63f0 	and.w	r3, r0, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
    edc2:	430b      	orrs	r3, r1
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    edc4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    edc8:	f504 7801 	add.w	r8, r4, #516	; 0x204
    edcc:	2600      	movs	r6, #0
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    edce:	2f01      	cmp	r7, #1
    edd0:	d927      	bls.n	ee22 <am_hal_iom_spi_read_nq+0xe2>
        if ( ui32BytesInFifo >= ui32NumBytes )
    edd2:	b9f5      	cbnz	r5, ee12 <am_hal_iom_spi_read_nq+0xd2>
        if ( bCmdCmp == true )
    edd4:	b90e      	cbnz	r6, edda <am_hal_iom_spi_read_nq+0x9a>
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    edd6:	f8d8 3000 	ldr.w	r3, [r8]
    ui32Status = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    edda:	4c93      	ldr	r4, [pc, #588]	; (f028 <am_hal_iom_spi_read_nq+0x2e8>)
    eddc:	2301      	movs	r3, #1
    edde:	461a      	mov	r2, r3
    ede0:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
    ede4:	4641      	mov	r1, r8
    ede6:	f7ff fa99 	bl	e31c <am_hal_flash_delay_status_change>
    AM_REGn(IOMSTR, ui32Module, INTCLR) = (ui32IntConfig | AM_REG_IOMSTR_INTSTAT_CMDCMP_M);
    edea:	9a01      	ldr	r2, [sp, #4]
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    edec:	9d02      	ldr	r5, [sp, #8]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = (ui32IntConfig | AM_REG_IOMSTR_INTSTAT_CMDCMP_M);
    edee:	f04b 0301 	orr.w	r3, fp, #1
    am_hal_debug_assert_msg(ui32Status == 1, "IOM CMDCMP was not seen");
    edf2:	2801      	cmp	r0, #1
    AM_REGn(IOMSTR, ui32Module, INTCLR) = (ui32IntConfig | AM_REG_IOMSTR_INTSTAT_CMDCMP_M);
    edf4:	6013      	str	r3, [r2, #0]
    ui32Status = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    edf6:	4607      	mov	r7, r0
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    edf8:	f8c5 b000 	str.w	fp, [r5]
    am_hal_debug_assert_msg(ui32Status == 1, "IOM CMDCMP was not seen");
    edfc:	d005      	beq.n	ee0a <am_hal_iom_spi_read_nq+0xca>
    edfe:	4a8b      	ldr	r2, [pc, #556]	; (f02c <am_hal_iom_spi_read_nq+0x2ec>)
    ee00:	4888      	ldr	r0, [pc, #544]	; (f024 <am_hal_iom_spi_read_nq+0x2e4>)
    ee02:	f240 3101 	movw	r1, #769	; 0x301
    ee06:	f7ff fa83 	bl	e310 <am_hal_debug_error>
}
    ee0a:	4638      	mov	r0, r7
    ee0c:	b005      	add	sp, #20
    ee0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( bCmdCmp == true )
    ee12:	2e00      	cmp	r6, #0
    ee14:	d1e1      	bne.n	edda <am_hal_iom_spi_read_nq+0x9a>
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    ee16:	f8d8 6000 	ldr.w	r6, [r8]
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    ee1a:	2f01      	cmp	r7, #1
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    ee1c:	f006 0601 	and.w	r6, r6, #1
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    ee20:	d8d7      	bhi.n	edd2 <am_hal_iom_spi_read_nq+0x92>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    ee22:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
        ui32BytesInFifo =  am_hal_iom_fifo_full_slots(ui32Module);
    ee26:	f002 097f 	and.w	r9, r2, #127	; 0x7f
        if ( ui32BytesInFifo >= ui32NumBytes )
    ee2a:	45a9      	cmp	r9, r5
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    ee2c:	f504 7e80 	add.w	lr, r4, #256	; 0x100
        if ( ui32BytesInFifo >= ui32NumBytes )
    ee30:	d262      	bcs.n	eef8 <am_hal_iom_spi_read_nq+0x1b8>
        else if ( ui32BytesInFifo >= 4 )
    ee32:	f1b9 0f03 	cmp.w	r9, #3
    ee36:	d954      	bls.n	eee2 <am_hal_iom_spi_read_nq+0x1a2>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    ee38:	f8de 0000 	ldr.w	r0, [lr]
            am_hal_iom_fifo_read(ui32Module, pui32Data, ui32BytesInFifo & ~0x3);
    ee3c:	f029 0303 	bic.w	r3, r9, #3
    am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    ee40:	f000 017f 	and.w	r1, r0, #127	; 0x7f
    ee44:	428b      	cmp	r3, r1
    ee46:	f200 8139 	bhi.w	f0bc <am_hal_iom_spi_read_nq+0x37c>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    ee4a:	4652      	mov	r2, sl
    ee4c:	6820      	ldr	r0, [r4, #0]
    ee4e:	f842 0b04 	str.w	r0, [r2], #4
    ee52:	f009 097c 	and.w	r9, r9, #124	; 0x7c
    ee56:	46d4      	mov	ip, sl
    ee58:	44ca      	add	sl, r9
    ee5a:	ebaa 0e0c 	sub.w	lr, sl, ip
    ee5e:	f1ae 0104 	sub.w	r1, lr, #4
    for ( i = 0; i < ui32NumWords; i++ )
    ee62:	4552      	cmp	r2, sl
    ee64:	f3c1 0082 	ubfx	r0, r1, #2, #3
    ee68:	d03a      	beq.n	eee0 <am_hal_iom_spi_read_nq+0x1a0>
    ee6a:	b318      	cbz	r0, eeb4 <am_hal_iom_spi_read_nq+0x174>
    ee6c:	2801      	cmp	r0, #1
    ee6e:	d01c      	beq.n	eeaa <am_hal_iom_spi_read_nq+0x16a>
    ee70:	2802      	cmp	r0, #2
    ee72:	d017      	beq.n	eea4 <am_hal_iom_spi_read_nq+0x164>
    ee74:	2803      	cmp	r0, #3
    ee76:	d012      	beq.n	ee9e <am_hal_iom_spi_read_nq+0x15e>
    ee78:	2804      	cmp	r0, #4
    ee7a:	d00d      	beq.n	ee98 <am_hal_iom_spi_read_nq+0x158>
    ee7c:	2805      	cmp	r0, #5
    ee7e:	d008      	beq.n	ee92 <am_hal_iom_spi_read_nq+0x152>
    ee80:	2806      	cmp	r0, #6
    ee82:	d003      	beq.n	ee8c <am_hal_iom_spi_read_nq+0x14c>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    ee84:	6821      	ldr	r1, [r4, #0]
    ee86:	f8cc 1004 	str.w	r1, [ip, #4]
    ee8a:	3204      	adds	r2, #4
    ee8c:	6820      	ldr	r0, [r4, #0]
    ee8e:	f842 0b04 	str.w	r0, [r2], #4
    ee92:	6821      	ldr	r1, [r4, #0]
    ee94:	f842 1b04 	str.w	r1, [r2], #4
    ee98:	6820      	ldr	r0, [r4, #0]
    ee9a:	f842 0b04 	str.w	r0, [r2], #4
    ee9e:	6821      	ldr	r1, [r4, #0]
    eea0:	f842 1b04 	str.w	r1, [r2], #4
    eea4:	6820      	ldr	r0, [r4, #0]
    eea6:	f842 0b04 	str.w	r0, [r2], #4
    eeaa:	6821      	ldr	r1, [r4, #0]
    eeac:	f842 1b04 	str.w	r1, [r2], #4
    for ( i = 0; i < ui32NumWords; i++ )
    eeb0:	4552      	cmp	r2, sl
    eeb2:	d015      	beq.n	eee0 <am_hal_iom_spi_read_nq+0x1a0>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    eeb4:	4694      	mov	ip, r2
    eeb6:	6820      	ldr	r0, [r4, #0]
    eeb8:	f84c 0b04 	str.w	r0, [ip], #4
    eebc:	6821      	ldr	r1, [r4, #0]
    eebe:	6051      	str	r1, [r2, #4]
    eec0:	6820      	ldr	r0, [r4, #0]
    eec2:	f8cc 0004 	str.w	r0, [ip, #4]
    eec6:	6821      	ldr	r1, [r4, #0]
    eec8:	60d1      	str	r1, [r2, #12]
    eeca:	6820      	ldr	r0, [r4, #0]
    eecc:	6110      	str	r0, [r2, #16]
    eece:	6821      	ldr	r1, [r4, #0]
    eed0:	6151      	str	r1, [r2, #20]
    eed2:	6820      	ldr	r0, [r4, #0]
    eed4:	6190      	str	r0, [r2, #24]
    eed6:	6821      	ldr	r1, [r4, #0]
    eed8:	61d1      	str	r1, [r2, #28]
    eeda:	3220      	adds	r2, #32
    for ( i = 0; i < ui32NumWords; i++ )
    eedc:	4552      	cmp	r2, sl
    eede:	d1e9      	bne.n	eeb4 <am_hal_iom_spi_read_nq+0x174>
            ui32NumBytes -= ui32BytesInFifo & ~0x3;
    eee0:	1aed      	subs	r5, r5, r3
        if ( bCmdCmp == true )
    eee2:	2e00      	cmp	r6, #0
    eee4:	f47f af79 	bne.w	edda <am_hal_iom_spi_read_nq+0x9a>
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    eee8:	f8d8 6000 	ldr.w	r6, [r8]
    eeec:	f006 0601 	and.w	r6, r6, #1
    while ( ui32NumBytes )
    eef0:	2d00      	cmp	r5, #0
    eef2:	f47f af6c 	bne.w	edce <am_hal_iom_spi_read_nq+0x8e>
    eef6:	e770      	b.n	edda <am_hal_iom_spi_read_nq+0x9a>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    eef8:	f8de 2000 	ldr.w	r2, [lr]
    am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    eefc:	f002 097f 	and.w	r9, r2, #127	; 0x7f
    ef00:	45a9      	cmp	r9, r5
    ef02:	f0c0 80d4 	bcc.w	f0ae <am_hal_iom_spi_read_nq+0x36e>
    ef06:	f005 0103 	and.w	r1, r5, #3
    for ( i = 0; i < ui32NumWords; i++ )
    ef0a:	08ad      	lsrs	r5, r5, #2
    ef0c:	d04b      	beq.n	efa6 <am_hal_iom_spi_read_nq+0x266>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    ef0e:	4653      	mov	r3, sl
    ef10:	6820      	ldr	r0, [r4, #0]
    ef12:	f843 0b04 	str.w	r0, [r3], #4
    ef16:	eb0a 0c85 	add.w	ip, sl, r5, lsl #2
    ef1a:	ebac 0e0a 	sub.w	lr, ip, sl
    ef1e:	f1ae 0204 	sub.w	r2, lr, #4
    for ( i = 0; i < ui32NumWords; i++ )
    ef22:	4563      	cmp	r3, ip
    ef24:	f3c2 0082 	ubfx	r0, r2, #2, #3
    ef28:	d03d      	beq.n	efa6 <am_hal_iom_spi_read_nq+0x266>
    ef2a:	b310      	cbz	r0, ef72 <am_hal_iom_spi_read_nq+0x232>
    ef2c:	2801      	cmp	r0, #1
    ef2e:	d01b      	beq.n	ef68 <am_hal_iom_spi_read_nq+0x228>
    ef30:	2802      	cmp	r0, #2
    ef32:	d016      	beq.n	ef62 <am_hal_iom_spi_read_nq+0x222>
    ef34:	2803      	cmp	r0, #3
    ef36:	d011      	beq.n	ef5c <am_hal_iom_spi_read_nq+0x21c>
    ef38:	2804      	cmp	r0, #4
    ef3a:	d00c      	beq.n	ef56 <am_hal_iom_spi_read_nq+0x216>
    ef3c:	2805      	cmp	r0, #5
    ef3e:	d007      	beq.n	ef50 <am_hal_iom_spi_read_nq+0x210>
    ef40:	2806      	cmp	r0, #6
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    ef42:	bf1c      	itt	ne
    ef44:	6820      	ldrne	r0, [r4, #0]
    ef46:	f843 0b04 	strne.w	r0, [r3], #4
    ef4a:	6822      	ldr	r2, [r4, #0]
    ef4c:	f843 2b04 	str.w	r2, [r3], #4
    ef50:	6820      	ldr	r0, [r4, #0]
    ef52:	f843 0b04 	str.w	r0, [r3], #4
    ef56:	6822      	ldr	r2, [r4, #0]
    ef58:	f843 2b04 	str.w	r2, [r3], #4
    ef5c:	6820      	ldr	r0, [r4, #0]
    ef5e:	f843 0b04 	str.w	r0, [r3], #4
    ef62:	6822      	ldr	r2, [r4, #0]
    ef64:	f843 2b04 	str.w	r2, [r3], #4
    ef68:	6820      	ldr	r0, [r4, #0]
    ef6a:	f843 0b04 	str.w	r0, [r3], #4
    for ( i = 0; i < ui32NumWords; i++ )
    ef6e:	4563      	cmp	r3, ip
    ef70:	d019      	beq.n	efa6 <am_hal_iom_spi_read_nq+0x266>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    ef72:	4699      	mov	r9, r3
    ef74:	f8d4 e000 	ldr.w	lr, [r4]
    ef78:	f849 eb04 	str.w	lr, [r9], #4
    ef7c:	f8d4 e000 	ldr.w	lr, [r4]
    ef80:	f8c3 e004 	str.w	lr, [r3, #4]
    ef84:	f8d4 e000 	ldr.w	lr, [r4]
    ef88:	f8c9 e004 	str.w	lr, [r9, #4]
    ef8c:	6822      	ldr	r2, [r4, #0]
    ef8e:	60da      	str	r2, [r3, #12]
    ef90:	6820      	ldr	r0, [r4, #0]
    ef92:	6118      	str	r0, [r3, #16]
    ef94:	6822      	ldr	r2, [r4, #0]
    ef96:	615a      	str	r2, [r3, #20]
    ef98:	6820      	ldr	r0, [r4, #0]
    ef9a:	6198      	str	r0, [r3, #24]
    ef9c:	6822      	ldr	r2, [r4, #0]
    ef9e:	61da      	str	r2, [r3, #28]
    efa0:	3320      	adds	r3, #32
    for ( i = 0; i < ui32NumWords; i++ )
    efa2:	4563      	cmp	r3, ip
    efa4:	d1e5      	bne.n	ef72 <am_hal_iom_spi_read_nq+0x232>
    if ( ui32Leftovers )
    efa6:	2900      	cmp	r1, #0
    efa8:	f43f af14 	beq.w	edd4 <am_hal_iom_spi_read_nq+0x94>
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
    efac:	6824      	ldr	r4, [r4, #0]
            pui8Data[j] = sTempBuffer.bytes[j];
    efae:	f80a 4025 	strb.w	r4, [sl, r5, lsl #2]
        for ( j = 0; j < ui32Leftovers; j++ )
    efb2:	2901      	cmp	r1, #1
        pui8Data = (uint8_t *) (&pui32Data[i]);
    efb4:	ea4f 0385 	mov.w	r3, r5, lsl #2
        for ( j = 0; j < ui32Leftovers; j++ )
    efb8:	f43f af0c 	beq.w	edd4 <am_hal_iom_spi_read_nq+0x94>
            pui8Data[j] = sTempBuffer.bytes[j];
    efbc:	449a      	add	sl, r3
        for ( j = 0; j < ui32Leftovers; j++ )
    efbe:	2903      	cmp	r1, #3
            pui8Data[j] = sTempBuffer.bytes[j];
    efc0:	f3c4 2507 	ubfx	r5, r4, #8, #8
    efc4:	bf08      	it	eq
    efc6:	f3c4 4407 	ubfxeq	r4, r4, #16, #8
    efca:	f88a 5001 	strb.w	r5, [sl, #1]
    efce:	bf08      	it	eq
    efd0:	f88a 4002 	strbeq.w	r4, [sl, #2]
    efd4:	e6fe      	b.n	edd4 <am_hal_iom_spi_read_nq+0x94>
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    efd6:	4a16      	ldr	r2, [pc, #88]	; (f030 <am_hal_iom_spi_read_nq+0x2f0>)
    efd8:	4812      	ldr	r0, [pc, #72]	; (f024 <am_hal_iom_spi_read_nq+0x2e4>)
    efda:	f240 21b5 	movw	r1, #693	; 0x2b5
    efde:	f7ff f997 	bl	e310 <am_hal_debug_error>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    efe2:	2f01      	cmp	r7, #1
    efe4:	f63f aec7 	bhi.w	ed76 <am_hal_iom_spi_read_nq+0x36>
    efe8:	4912      	ldr	r1, [pc, #72]	; (f034 <am_hal_iom_spi_read_nq+0x2f4>)
    while ( g_bIomBusy[ui32Module] );
    efea:	5dcb      	ldrb	r3, [r1, r7]
    efec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    eff0:	2b00      	cmp	r3, #0
    eff2:	d1fa      	bne.n	efea <am_hal_iom_spi_read_nq+0x2aa>
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    eff4:	f507 24a0 	add.w	r4, r7, #327680	; 0x50000
    eff8:	3404      	adds	r4, #4
    effa:	0324      	lsls	r4, r4, #12
    effc:	f504 7000 	add.w	r0, r4, #512	; 0x200
    f000:	f8d4 b200 	ldr.w	fp, [r4, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    f004:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    f008:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    f00c:	9002      	str	r0, [sp, #8]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    f00e:	f041 0301 	orr.w	r3, r1, #1
    f012:	f504 7202 	add.w	r2, r4, #520	; 0x208
    f016:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    f01a:	9201      	str	r2, [sp, #4]
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    f01c:	b335      	cbz	r5, f06c <am_hal_iom_spi_read_nq+0x32c>
    f01e:	e6bf      	b.n	eda0 <am_hal_iom_spi_read_nq+0x60>
    f020:	00013228 	.word	0x00013228
    f024:	000130ec 	.word	0x000130ec
    f028:	10001144 	.word	0x10001144
    f02c:	00013150 	.word	0x00013150
    f030:	000131dc 	.word	0x000131dc
    f034:	10002608 	.word	0x10002608
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    f038:	4a25      	ldr	r2, [pc, #148]	; (f0d0 <am_hal_iom_spi_read_nq+0x390>)
    f03a:	4826      	ldr	r0, [pc, #152]	; (f0d4 <am_hal_iom_spi_read_nq+0x394>)
    f03c:	f44f 712c 	mov.w	r1, #688	; 0x2b0
    f040:	f7ff f966 	bl	e310 <am_hal_debug_error>
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    f044:	f507 21a0 	add.w	r1, r7, #327680	; 0x50000
    f048:	3104      	adds	r1, #4
    f04a:	030c      	lsls	r4, r1, #12
    f04c:	f504 7000 	add.w	r0, r4, #512	; 0x200
    f050:	f8d4 b200 	ldr.w	fp, [r4, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    f054:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    f058:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    f05c:	9002      	str	r0, [sp, #8]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    f05e:	f042 0301 	orr.w	r3, r2, #1
    f062:	f504 7502 	add.w	r5, r4, #520	; 0x208
    f066:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    f06a:	9501      	str	r5, [sp, #4]
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    f06c:	4819      	ldr	r0, [pc, #100]	; (f0d4 <am_hal_iom_spi_read_nq+0x394>)
    f06e:	4a18      	ldr	r2, [pc, #96]	; (f0d0 <am_hal_iom_spi_read_nq+0x390>)
    f070:	f240 4104 	movw	r1, #1028	; 0x404
    ui32Command |= ui32Options & 0x5C00FF00;
    f074:	f026 4a23 	bic.w	sl, r6, #2734686208	; 0xa3000000
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    f078:	f7ff f94a 	bl	e310 <am_hal_debug_error>
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    f07c:	ea4f 4108 	mov.w	r1, r8, lsl #16
    ui32Command |= ui32Options & 0x5C00FF00;
    f080:	f00a 2cff 	and.w	ip, sl, #4278255360	; 0xff00ff00
    f084:	f04c 4900 	orr.w	r9, ip, #2147483648	; 0x80000000
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    f088:	f401 26e0 	and.w	r6, r1, #458752	; 0x70000
    ui32Command |= ui32Options & 0x5C00FF00;
    f08c:	ea49 0006 	orr.w	r0, r9, r6
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    f090:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    f094:	f504 7801 	add.w	r8, r4, #516	; 0x204
    f098:	e69f      	b.n	edda <am_hal_iom_spi_read_nq+0x9a>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    f09a:	2b00      	cmp	r3, #0
    f09c:	f47f ae64 	bne.w	ed68 <am_hal_iom_spi_read_nq+0x28>
    f0a0:	4a0b      	ldr	r2, [pc, #44]	; (f0d0 <am_hal_iom_spi_read_nq+0x390>)
    f0a2:	480c      	ldr	r0, [pc, #48]	; (f0d4 <am_hal_iom_spi_read_nq+0x394>)
    f0a4:	f44f 712c 	mov.w	r1, #688	; 0x2b0
    f0a8:	f7ff f932 	bl	e310 <am_hal_debug_error>
    f0ac:	e79c      	b.n	efe8 <am_hal_iom_spi_read_nq+0x2a8>
    am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    f0ae:	4a0a      	ldr	r2, [pc, #40]	; (f0d8 <am_hal_iom_spi_read_nq+0x398>)
    f0b0:	4808      	ldr	r0, [pc, #32]	; (f0d4 <am_hal_iom_spi_read_nq+0x394>)
    f0b2:	f640 010e 	movw	r1, #2062	; 0x80e
    f0b6:	f7ff f92b 	bl	e310 <am_hal_debug_error>
    f0ba:	e724      	b.n	ef06 <am_hal_iom_spi_read_nq+0x1c6>
    f0bc:	4a06      	ldr	r2, [pc, #24]	; (f0d8 <am_hal_iom_spi_read_nq+0x398>)
    f0be:	4805      	ldr	r0, [pc, #20]	; (f0d4 <am_hal_iom_spi_read_nq+0x394>)
    f0c0:	9303      	str	r3, [sp, #12]
    f0c2:	f640 010e 	movw	r1, #2062	; 0x80e
    f0c6:	f7ff f923 	bl	e310 <am_hal_debug_error>
    f0ca:	9b03      	ldr	r3, [sp, #12]
    f0cc:	e6bd      	b.n	ee4a <am_hal_iom_spi_read_nq+0x10a>
    f0ce:	bf00      	nop
    f0d0:	000130c8 	.word	0x000130c8
    f0d4:	000130ec 	.word	0x000130ec
    f0d8:	00013118 	.word	0x00013118

0000f0dc <am_hal_iom_spi_write_nb>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    f0dc:	2801      	cmp	r0, #1
{
    f0de:	b430      	push	{r4, r5}
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    f0e0:	d901      	bls.n	f0e6 <am_hal_iom_spi_write_nb+0xa>
}
    f0e2:	bc30      	pop	{r4, r5}
    f0e4:	4770      	bx	lr
    f0e6:	bc30      	pop	{r4, r5}
    f0e8:	f7ff ba44 	b.w	e574 <am_hal_iom_spi_write_nb.part.6>

0000f0ec <am_hal_iom_spi_read_nb>:
{
    f0ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    f0f0:	2801      	cmp	r0, #1
{
    f0f2:	4604      	mov	r4, r0
    f0f4:	460f      	mov	r7, r1
    f0f6:	4691      	mov	r9, r2
    f0f8:	461e      	mov	r6, r3
    f0fa:	f8dd 8020 	ldr.w	r8, [sp, #32]
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    f0fe:	d944      	bls.n	f18a <am_hal_iom_spi_read_nb+0x9e>
    f100:	4a4a      	ldr	r2, [pc, #296]	; (f22c <am_hal_iom_spi_read_nb+0x140>)
    f102:	484b      	ldr	r0, [pc, #300]	; (f230 <am_hal_iom_spi_read_nb+0x144>)
    f104:	f240 319d 	movw	r1, #925	; 0x39d
    f108:	f7ff f902 	bl	e310 <am_hal_debug_error>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    f10c:	2e00      	cmp	r6, #0
    f10e:	d06b      	beq.n	f1e8 <am_hal_iom_spi_read_nb+0xfc>
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    f110:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
    f114:	d232      	bcs.n	f17c <am_hal_iom_spi_read_nb+0x90>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    f116:	2c01      	cmp	r4, #1
    f118:	d93f      	bls.n	f19a <am_hal_iom_spi_read_nb+0xae>
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    f11a:	f504 25a0 	add.w	r5, r4, #327680	; 0x50000
    g_bIomBusy[ui32Module] = true;
    f11e:	4845      	ldr	r0, [pc, #276]	; (f234 <am_hal_iom_spi_read_nb+0x148>)
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    f120:	4945      	ldr	r1, [pc, #276]	; (f238 <am_hal_iom_spi_read_nb+0x14c>)
    g_bIomBusy[ui32Module] = true;
    f122:	2301      	movs	r3, #1
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    f124:	3504      	adds	r5, #4
    g_bIomBusy[ui32Module] = true;
    f126:	5503      	strb	r3, [r0, r4]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    f128:	032d      	lsls	r5, r5, #12
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    f12a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    f12e:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    f132:	00a0      	lsls	r0, r4, #2
    f134:	180b      	adds	r3, r1, r0
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    f136:	f042 0401 	orr.w	r4, r2, #1
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    f13a:	2202      	movs	r2, #2
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    f13c:	f8c5 4208 	str.w	r4, [r5, #520]	; 0x208
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    f140:	500a      	str	r2, [r1, r0]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    f142:	9909      	ldr	r1, [sp, #36]	; 0x24
    g_psIOMBuffers[ui32Module].pui32Data = pui32Data;
    f144:	f8c3 9004 	str.w	r9, [r3, #4]
    g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes;
    f148:	609e      	str	r6, [r3, #8]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    f14a:	6119      	str	r1, [r3, #16]
    g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    f14c:	f8c3 800c 	str.w	r8, [r3, #12]
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    f150:	043f      	lsls	r7, r7, #16
    ui32Command |= ui32Options & 0x5C00FF00;
    f152:	f028 4323 	bic.w	r3, r8, #2734686208	; 0xa3000000
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    f156:	f407 2ce0 	and.w	ip, r7, #458752	; 0x70000
    ui32Command |= ui32Options & 0x5C00FF00;
    f15a:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
    f15e:	ea4c 0402 	orr.w	r4, ip, r2
    f162:	f044 4100 	orr.w	r1, r4, #2147483648	; 0x80000000
    ui32Command |= (ui32NumBytes & 0xFF);
    f166:	b2f0      	uxtb	r0, r6
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    f168:	03f6      	lsls	r6, r6, #15
    ui32Command |= ui32Options & 0x5C00FF00;
    f16a:	4308      	orrs	r0, r1
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    f16c:	f006 67f0 	and.w	r7, r6, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
    f170:	4338      	orrs	r0, r7
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    f172:	f8c5 0110 	str.w	r0, [r5, #272]	; 0x110
}
    f176:	2001      	movs	r0, #1
    f178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    f17c:	4a2f      	ldr	r2, [pc, #188]	; (f23c <am_hal_iom_spi_read_nb+0x150>)
    f17e:	482c      	ldr	r0, [pc, #176]	; (f230 <am_hal_iom_spi_read_nb+0x144>)
    f180:	f44f 7169 	mov.w	r1, #932	; 0x3a4
    f184:	f7ff f8c4 	bl	e310 <am_hal_debug_error>
    f188:	e7c5      	b.n	f116 <am_hal_iom_spi_read_nb+0x2a>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    f18a:	2b00      	cmp	r3, #0
    f18c:	d1c0      	bne.n	f110 <am_hal_iom_spi_read_nb+0x24>
    f18e:	4a2c      	ldr	r2, [pc, #176]	; (f240 <am_hal_iom_spi_read_nb+0x154>)
    f190:	4827      	ldr	r0, [pc, #156]	; (f230 <am_hal_iom_spi_read_nb+0x144>)
    f192:	f240 319f 	movw	r1, #927	; 0x39f
    f196:	f7ff f8bb 	bl	e310 <am_hal_debug_error>
    f19a:	4a26      	ldr	r2, [pc, #152]	; (f234 <am_hal_iom_spi_read_nb+0x148>)
    while ( g_bIomBusy[ui32Module] );
    f19c:	5d13      	ldrb	r3, [r2, r4]
    f19e:	2b00      	cmp	r3, #0
    f1a0:	d1fc      	bne.n	f19c <am_hal_iom_spi_read_nb+0xb0>
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    f1a2:	f504 25a0 	add.w	r5, r4, #327680	; 0x50000
    g_bIomBusy[ui32Module] = true;
    f1a6:	2001      	movs	r0, #1
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    f1a8:	3504      	adds	r5, #4
    g_bIomBusy[ui32Module] = true;
    f1aa:	5510      	strb	r0, [r2, r4]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    f1ac:	032d      	lsls	r5, r5, #12
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    f1ae:	4922      	ldr	r1, [pc, #136]	; (f238 <am_hal_iom_spi_read_nb+0x14c>)
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    f1b0:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    f1b4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    f1b8:	00a0      	lsls	r0, r4, #2
    f1ba:	180b      	adds	r3, r1, r0
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    f1bc:	f042 0401 	orr.w	r4, r2, #1
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    f1c0:	2202      	movs	r2, #2
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    f1c2:	f8c5 4208 	str.w	r4, [r5, #520]	; 0x208
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    f1c6:	500a      	str	r2, [r1, r0]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    f1c8:	9909      	ldr	r1, [sp, #36]	; 0x24
    g_psIOMBuffers[ui32Module].pui32Data = pui32Data;
    f1ca:	f8c3 9004 	str.w	r9, [r3, #4]
    g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes;
    f1ce:	609e      	str	r6, [r3, #8]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    f1d0:	6119      	str	r1, [r3, #16]
    g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    f1d2:	f8c3 800c 	str.w	r8, [r3, #12]
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    f1d6:	2e00      	cmp	r6, #0
    f1d8:	d1ba      	bne.n	f150 <am_hal_iom_spi_read_nb+0x64>
    f1da:	4a19      	ldr	r2, [pc, #100]	; (f240 <am_hal_iom_spi_read_nb+0x154>)
    f1dc:	4814      	ldr	r0, [pc, #80]	; (f230 <am_hal_iom_spi_read_nb+0x144>)
    f1de:	f240 4104 	movw	r1, #1028	; 0x404
    f1e2:	f7ff f895 	bl	e310 <am_hal_debug_error>
    f1e6:	e7b3      	b.n	f150 <am_hal_iom_spi_read_nb+0x64>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    f1e8:	4a15      	ldr	r2, [pc, #84]	; (f240 <am_hal_iom_spi_read_nb+0x154>)
    f1ea:	4811      	ldr	r0, [pc, #68]	; (f230 <am_hal_iom_spi_read_nb+0x144>)
    f1ec:	f240 319f 	movw	r1, #927	; 0x39f
    f1f0:	f7ff f88e 	bl	e310 <am_hal_debug_error>
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    f1f4:	f504 25a0 	add.w	r5, r4, #327680	; 0x50000
    g_bIomBusy[ui32Module] = true;
    f1f8:	4b0e      	ldr	r3, [pc, #56]	; (f234 <am_hal_iom_spi_read_nb+0x148>)
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    f1fa:	480f      	ldr	r0, [pc, #60]	; (f238 <am_hal_iom_spi_read_nb+0x14c>)
    g_bIomBusy[ui32Module] = true;
    f1fc:	2201      	movs	r2, #1
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    f1fe:	3504      	adds	r5, #4
    g_bIomBusy[ui32Module] = true;
    f200:	551a      	strb	r2, [r3, r4]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    f202:	032d      	lsls	r5, r5, #12
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    f204:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    f208:	f8d5 1208 	ldr.w	r1, [r5, #520]	; 0x208
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    f20c:	00a2      	lsls	r2, r4, #2
    f20e:	1883      	adds	r3, r0, r2
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    f210:	f041 0401 	orr.w	r4, r1, #1
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    f214:	2102      	movs	r1, #2
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    f216:	f8c5 4208 	str.w	r4, [r5, #520]	; 0x208
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    f21a:	5081      	str	r1, [r0, r2]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    f21c:	9809      	ldr	r0, [sp, #36]	; 0x24
    g_psIOMBuffers[ui32Module].pui32Data = pui32Data;
    f21e:	f8c3 9004 	str.w	r9, [r3, #4]
    g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes;
    f222:	609e      	str	r6, [r3, #8]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    f224:	6118      	str	r0, [r3, #16]
    g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    f226:	f8c3 800c 	str.w	r8, [r3, #12]
    f22a:	e7d6      	b.n	f1da <am_hal_iom_spi_read_nb+0xee>
    f22c:	00013228 	.word	0x00013228
    f230:	000130ec 	.word	0x000130ec
    f234:	10002608 	.word	0x10002608
    f238:	10002928 	.word	0x10002928
    f23c:	000131dc 	.word	0x000131dc
    f240:	000130c8 	.word	0x000130c8

0000f244 <am_hal_iom_spi_read>:
{
    f244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    f248:	2801      	cmp	r0, #1
{
    f24a:	b08a      	sub	sp, #40	; 0x28
    f24c:	4604      	mov	r4, r0
    f24e:	460f      	mov	r7, r1
    f250:	4690      	mov	r8, r2
    f252:	461d      	mov	r5, r3
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    f254:	d905      	bls.n	f262 <am_hal_iom_spi_read+0x1e>
    f256:	4a37      	ldr	r2, [pc, #220]	; (f334 <am_hal_iom_spi_read+0xf0>)
    f258:	4837      	ldr	r0, [pc, #220]	; (f338 <am_hal_iom_spi_read+0xf4>)
    f25a:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    f25e:	f7ff f857 	bl	e310 <am_hal_debug_error>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    f262:	b1dd      	cbz	r5, f29c <am_hal_iom_spi_read+0x58>
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    f264:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    f268:	d211      	bcs.n	f28e <am_hal_iom_spi_read+0x4a>
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
    f26a:	0066      	lsls	r6, r4, #1
    f26c:	f8df 90e0 	ldr.w	r9, [pc, #224]	; f350 <am_hal_iom_spi_read+0x10c>
    f270:	1932      	adds	r2, r6, r4
    f272:	eb09 00c2 	add.w	r0, r9, r2, lsl #3
    f276:	6943      	ldr	r3, [r0, #20]
    f278:	2b00      	cmp	r3, #0
    f27a:	d03a      	beq.n	f2f2 <am_hal_iom_spi_read+0xae>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    f27c:	2c01      	cmp	r4, #1
    f27e:	d914      	bls.n	f2aa <am_hal_iom_spi_read+0x66>
        am_hal_iom_queue_flush(ui32Module);
    f280:	492e      	ldr	r1, [pc, #184]	; (f33c <am_hal_iom_spi_read+0xf8>)
    f282:	4620      	mov	r0, r4
    f284:	680c      	ldr	r4, [r1, #0]
    f286:	47a0      	blx	r4
}
    f288:	b00a      	add	sp, #40	; 0x28
    f28a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    f28e:	4a2c      	ldr	r2, [pc, #176]	; (f340 <am_hal_iom_spi_read+0xfc>)
    f290:	4829      	ldr	r0, [pc, #164]	; (f338 <am_hal_iom_spi_read+0xf4>)
    f292:	f240 11d9 	movw	r1, #473	; 0x1d9
    f296:	f7ff f83b 	bl	e310 <am_hal_debug_error>
    f29a:	e7e6      	b.n	f26a <am_hal_iom_spi_read+0x26>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    f29c:	4a29      	ldr	r2, [pc, #164]	; (f344 <am_hal_iom_spi_read+0x100>)
    f29e:	4826      	ldr	r0, [pc, #152]	; (f338 <am_hal_iom_spi_read+0xf4>)
    f2a0:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
    f2a4:	f7ff f834 	bl	e310 <am_hal_debug_error>
    f2a8:	e7df      	b.n	f26a <am_hal_iom_spi_read+0x26>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    f2aa:	b35d      	cbz	r5, f304 <am_hal_iom_spi_read+0xc0>
    ui32Critical = am_hal_interrupt_master_disable();
    f2ac:	f7ff f938 	bl	e520 <am_hal_interrupt_master_disable>
    if ( (g_bIomBusy[ui32Module] == false) &&
    f2b0:	4a25      	ldr	r2, [pc, #148]	; (f348 <am_hal_iom_spi_read+0x104>)
    ui32Critical = am_hal_interrupt_master_disable();
    f2b2:	4682      	mov	sl, r0
    if ( (g_bIomBusy[ui32Module] == false) &&
    f2b4:	5d10      	ldrb	r0, [r2, r4]
    f2b6:	b928      	cbnz	r0, f2c4 <am_hal_iom_spi_read+0x80>
        am_hal_queue_empty(&g_psIOMQueue[ui32Module]) )
    f2b8:	1933      	adds	r3, r6, r4
    f2ba:	eb09 0cc3 	add.w	ip, r9, r3, lsl #3
    if ( (g_bIomBusy[ui32Module] == false) &&
    f2be:	f8dc 1008 	ldr.w	r1, [ip, #8]
    f2c2:	b369      	cbz	r1, f320 <am_hal_iom_spi_read+0xdc>
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_READ;
    f2c4:	2301      	movs	r3, #1
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    f2c6:	4426      	add	r6, r4
        sIOMTransaction.ui32ChipSelect = ui32ChipSelect;
    f2c8:	9705      	str	r7, [sp, #20]
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
    f2ca:	9507      	str	r5, [sp, #28]
        sIOMTransaction.pfnCallback = pfnCallback;
    f2cc:	2700      	movs	r7, #0
        sIOMTransaction.ui32Options = ui32Options;
    f2ce:	9d12      	ldr	r5, [sp, #72]	; 0x48
        sIOMTransaction.ui32Module = ui32Module;
    f2d0:	9404      	str	r4, [sp, #16]
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    f2d2:	eb09 00c6 	add.w	r0, r9, r6, lsl #3
    f2d6:	461a      	mov	r2, r3
    f2d8:	a903      	add	r1, sp, #12
        sIOMTransaction.pui32Data = pui32Data;
    f2da:	f8cd 8018 	str.w	r8, [sp, #24]
        sIOMTransaction.ui32Options = ui32Options;
    f2de:	9508      	str	r5, [sp, #32]
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_READ;
    f2e0:	9303      	str	r3, [sp, #12]
        sIOMTransaction.pfnCallback = pfnCallback;
    f2e2:	9709      	str	r7, [sp, #36]	; 0x24
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    f2e4:	f000 fb1c 	bl	f920 <am_hal_queue_item_add>
    f2e8:	b198      	cbz	r0, f312 <am_hal_iom_spi_read+0xce>
    am_hal_interrupt_master_set(ui32Critical);
    f2ea:	4650      	mov	r0, sl
    f2ec:	f7ff f91c 	bl	e528 <am_hal_interrupt_master_set>
    f2f0:	e7c6      	b.n	f280 <am_hal_iom_spi_read+0x3c>
        am_hal_iom_spi_read_nq(ui32Module, ui32ChipSelect, pui32Data,
    f2f2:	9912      	ldr	r1, [sp, #72]	; 0x48
    f2f4:	9100      	str	r1, [sp, #0]
    f2f6:	462b      	mov	r3, r5
    f2f8:	4642      	mov	r2, r8
    f2fa:	4639      	mov	r1, r7
    f2fc:	4620      	mov	r0, r4
    f2fe:	f7ff fd1f 	bl	ed40 <am_hal_iom_spi_read_nq>
    f302:	e7c1      	b.n	f288 <am_hal_iom_spi_read+0x44>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    f304:	4a0f      	ldr	r2, [pc, #60]	; (f344 <am_hal_iom_spi_read+0x100>)
    f306:	480c      	ldr	r0, [pc, #48]	; (f338 <am_hal_iom_spi_read+0xf4>)
    f308:	f640 21f8 	movw	r1, #2808	; 0xaf8
    f30c:	f7ff f800 	bl	e310 <am_hal_debug_error>
    f310:	e7cc      	b.n	f2ac <am_hal_iom_spi_read+0x68>
            am_hal_debug_assert_msg(0,
    f312:	4a0e      	ldr	r2, [pc, #56]	; (f34c <am_hal_iom_spi_read+0x108>)
    f314:	4808      	ldr	r0, [pc, #32]	; (f338 <am_hal_iom_spi_read+0xf4>)
    f316:	f640 3128 	movw	r1, #2856	; 0xb28
    f31a:	f7fe fff9 	bl	e310 <am_hal_debug_error>
    f31e:	e7e4      	b.n	f2ea <am_hal_iom_spi_read+0xa6>
        am_hal_iom_spi_read_nb(ui32Module, ui32ChipSelect, pui32Data,
    f320:	9a12      	ldr	r2, [sp, #72]	; 0x48
    f322:	9101      	str	r1, [sp, #4]
    f324:	9200      	str	r2, [sp, #0]
    f326:	462b      	mov	r3, r5
    f328:	4642      	mov	r2, r8
    f32a:	4639      	mov	r1, r7
    f32c:	4620      	mov	r0, r4
    f32e:	f7ff fedd 	bl	f0ec <am_hal_iom_spi_read_nb>
    f332:	e7da      	b.n	f2ea <am_hal_iom_spi_read+0xa6>
    f334:	00013228 	.word	0x00013228
    f338:	000130ec 	.word	0x000130ec
    f33c:	10001140 	.word	0x10001140
    f340:	000131dc 	.word	0x000131dc
    f344:	000130c8 	.word	0x000130c8
    f348:	10002608 	.word	0x10002608
    f34c:	00013168 	.word	0x00013168
    f350:	10002950 	.word	0x10002950

0000f354 <am_hal_iom_poll_complete>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    f354:	2801      	cmp	r0, #1
    f356:	d900      	bls.n	f35a <am_hal_iom_poll_complete+0x6>
    f358:	4770      	bx	lr
    f35a:	4a02      	ldr	r2, [pc, #8]	; (f364 <am_hal_iom_poll_complete+0x10>)
    while ( g_bIomBusy[ui32Module] );
    f35c:	5c13      	ldrb	r3, [r2, r0]
    f35e:	2b00      	cmp	r3, #0
    f360:	d1fc      	bne.n	f35c <am_hal_iom_poll_complete+0x8>
    f362:	4770      	bx	lr
    f364:	10002608 	.word	0x10002608

0000f368 <am_hal_iom_int_service>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    f368:	2801      	cmp	r0, #1
    f36a:	d900      	bls.n	f36e <am_hal_iom_int_service+0x6>
    f36c:	4770      	bx	lr
{
    f36e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ( ui32Status & AM_HAL_IOM_INT_CMDCMP )
    f372:	07ca      	lsls	r2, r1, #31
{
    f374:	b085      	sub	sp, #20
    f376:	4604      	mov	r4, r0
    if ( ui32Status & AM_HAL_IOM_INT_CMDCMP )
    f378:	d517      	bpl.n	f3aa <am_hal_iom_int_service+0x42>
        if ( psBuffer->ui32State == BUFFER_IDLE )
    f37a:	0085      	lsls	r5, r0, #2
    f37c:	182e      	adds	r6, r5, r0
    f37e:	00b3      	lsls	r3, r6, #2
    f380:	4e99      	ldr	r6, [pc, #612]	; (f5e8 <am_hal_iom_int_service+0x280>)
        g_bIomBusy[ui32Module] = false;
    f382:	499a      	ldr	r1, [pc, #616]	; (f5ec <am_hal_iom_int_service+0x284>)
        if ( psBuffer->ui32State == BUFFER_IDLE )
    f384:	58f7      	ldr	r7, [r6, r3]
        g_bIomBusy[ui32Module] = false;
    f386:	2200      	movs	r2, #0
        if ( psBuffer->ui32State == BUFFER_IDLE )
    f388:	4433      	add	r3, r6
        g_bIomBusy[ui32Module] = false;
    f38a:	540a      	strb	r2, [r1, r0]
        if ( psBuffer->ui32State == BUFFER_IDLE )
    f38c:	b3af      	cbz	r7, f3fa <am_hal_iom_int_service+0x92>
        if ( psBuffer->ui32State == BUFFER_RECEIVING )
    f38e:	2f02      	cmp	r7, #2
    f390:	f000 8194 	beq.w	f6bc <am_hal_iom_int_service+0x354>
        psBuffer->ui32State = BUFFER_IDLE;
    f394:	192a      	adds	r2, r5, r4
    f396:	0090      	lsls	r0, r2, #2
        if ( psBuffer->pfnCallback )
    f398:	1834      	adds	r4, r6, r0
        psBuffer->ui32State = BUFFER_IDLE;
    f39a:	2500      	movs	r5, #0
        if ( psBuffer->pfnCallback )
    f39c:	6921      	ldr	r1, [r4, #16]
        psBuffer->ui32State = BUFFER_IDLE;
    f39e:	5035      	str	r5, [r6, r0]
        if ( psBuffer->pfnCallback )
    f3a0:	b359      	cbz	r1, f3fa <am_hal_iom_int_service+0x92>
}
    f3a2:	b005      	add	sp, #20
    f3a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            psBuffer->pfnCallback();
    f3a8:	4708      	bx	r1
    else if ( ui32Status & AM_HAL_IOM_INT_THR )
    f3aa:	078b      	lsls	r3, r1, #30
    f3ac:	d525      	bpl.n	f3fa <am_hal_iom_int_service+0x92>
        if ( psBuffer->ui32State == BUFFER_IDLE )
    f3ae:	eb00 0b80 	add.w	fp, r0, r0, lsl #2
    f3b2:	ea4f 068b 	mov.w	r6, fp, lsl #2
    f3b6:	4b8c      	ldr	r3, [pc, #560]	; (f5e8 <am_hal_iom_int_service+0x280>)
    f3b8:	599a      	ldr	r2, [r3, r6]
    f3ba:	441e      	add	r6, r3
    f3bc:	b1ea      	cbz	r2, f3fa <am_hal_iom_int_service+0x92>
            thresh = AM_BFRn(IOMSTR, ui32Module, FIFOTHR, FIFOWTHR);
    f3be:	f500 24a0 	add.w	r4, r0, #327680	; 0x50000
    f3c2:	3404      	adds	r4, #4
        if ( psBuffer->ui32State == BUFFER_SENDING )
    f3c4:	2a01      	cmp	r2, #1
            thresh = AM_BFRn(IOMSTR, ui32Module, FIFOTHR, FIFOWTHR);
    f3c6:	ea4f 3404 	mov.w	r4, r4, lsl #12
        if ( psBuffer->ui32State == BUFFER_SENDING )
    f3ca:	d019      	beq.n	f400 <am_hal_iom_int_service+0x98>
            thresh = AM_BFRn(IOMSTR, ui32Module, FIFOTHR, FIFORTHR);
    f3cc:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
                if ( ui32NumBytes == psBuffer->ui32BytesLeft )
    f3d0:	46b0      	mov	r8, r6
            thresh = AM_BFRn(IOMSTR, ui32Module, FIFOTHR, FIFORTHR);
    f3d2:	f000 093f 	and.w	r9, r0, #63	; 0x3f
    f3d6:	f504 7a80 	add.w	sl, r4, #256	; 0x100
    f3da:	e007      	b.n	f3ec <am_hal_iom_int_service+0x84>
                if ( ui32NumBytes == psBuffer->ui32BytesLeft )
    f3dc:	f8d8 6008 	ldr.w	r6, [r8, #8]
    f3e0:	42ae      	cmp	r6, r5
    f3e2:	f000 809d 	beq.w	f520 <am_hal_iom_int_service+0x1b8>
                else if ( ui32NumBytes >= 4 )
    f3e6:	2d03      	cmp	r5, #3
    f3e8:	f200 8106 	bhi.w	f5f8 <am_hal_iom_int_service+0x290>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    f3ec:	f8da 7000 	ldr.w	r7, [sl]
    f3f0:	b2ff      	uxtb	r7, r7
            while ( (ui32NumBytes = am_hal_iom_fifo_full_slots(ui32Module)) >= thresh )
    f3f2:	f007 057f 	and.w	r5, r7, #127	; 0x7f
    f3f6:	45a9      	cmp	r9, r5
    f3f8:	d9f0      	bls.n	f3dc <am_hal_iom_int_service+0x74>
}
    f3fa:	b005      	add	sp, #20
    f3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            thresh = AM_BFRn(IOMSTR, ui32Module, FIFOTHR, FIFOWTHR);
    f400:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    f404:	6877      	ldr	r7, [r6, #4]
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    f406:	f8df a1ec 	ldr.w	sl, [pc, #492]	; f5f4 <am_hal_iom_int_service+0x28c>
            thresh = AM_BFRn(IOMSTR, ui32Module, FIFOTHR, FIFOWTHR);
    f40a:	f3c2 2b05 	ubfx	fp, r2, #8, #6
    f40e:	f504 7880 	add.w	r8, r4, #256	; 0x100
    f412:	f504 7902 	add.w	r9, r4, #520	; 0x208
    return (AM_HAL_IOM_MAX_FIFO_SIZE - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    f416:	f8d8 5000 	ldr.w	r5, [r8]
    f41a:	f8d8 0000 	ldr.w	r0, [r8]
    f41e:	68b1      	ldr	r1, [r6, #8]
    f420:	f005 037f 	and.w	r3, r5, #127	; 0x7f
    f424:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
                ui32SpaceInFifo = am_hal_iom_fifo_empty_slots(ui32Module);
    f428:	f002 05fc 	and.w	r5, r2, #252	; 0xfc
    return (AM_HAL_IOM_MAX_FIFO_SIZE - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    f42c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    f430:	428d      	cmp	r5, r1
    f432:	f1c0 0c40 	rsb	ip, r0, #64	; 0x40
    f436:	bf28      	it	cs
    f438:	460d      	movcs	r5, r1
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    f43a:	f00c 01fc 	and.w	r1, ip, #252	; 0xfc
    f43e:	42a9      	cmp	r1, r5
    f440:	d367      	bcc.n	f512 <am_hal_iom_int_service+0x1aa>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    f442:	2d00      	cmp	r5, #0
    f444:	d04d      	beq.n	f4e2 <am_hal_iom_int_service+0x17a>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    f446:	463b      	mov	r3, r7
    f448:	43fa      	mvns	r2, r7
    f44a:	f853 0b04 	ldr.w	r0, [r3], #4
    f44e:	6020      	str	r0, [r4, #0]
    f450:	443a      	add	r2, r7
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    f452:	1bd9      	subs	r1, r3, r7
    f454:	442a      	add	r2, r5
    f456:	42a9      	cmp	r1, r5
    f458:	f3c2 0282 	ubfx	r2, r2, #2, #3
    f45c:	d241      	bcs.n	f4e2 <am_hal_iom_int_service+0x17a>
    f45e:	b31a      	cbz	r2, f4a8 <am_hal_iom_int_service+0x140>
    f460:	2a01      	cmp	r2, #1
    f462:	d01b      	beq.n	f49c <am_hal_iom_int_service+0x134>
    f464:	2a02      	cmp	r2, #2
    f466:	d016      	beq.n	f496 <am_hal_iom_int_service+0x12e>
    f468:	2a03      	cmp	r2, #3
    f46a:	d011      	beq.n	f490 <am_hal_iom_int_service+0x128>
    f46c:	2a04      	cmp	r2, #4
    f46e:	d00c      	beq.n	f48a <am_hal_iom_int_service+0x122>
    f470:	2a05      	cmp	r2, #5
    f472:	d007      	beq.n	f484 <am_hal_iom_int_service+0x11c>
    f474:	2a06      	cmp	r2, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    f476:	bf1c      	itt	ne
    f478:	f853 2b04 	ldrne.w	r2, [r3], #4
    f47c:	6022      	strne	r2, [r4, #0]
    f47e:	f853 0b04 	ldr.w	r0, [r3], #4
    f482:	6020      	str	r0, [r4, #0]
    f484:	f853 1b04 	ldr.w	r1, [r3], #4
    f488:	6021      	str	r1, [r4, #0]
    f48a:	f853 2b04 	ldr.w	r2, [r3], #4
    f48e:	6022      	str	r2, [r4, #0]
    f490:	f853 0b04 	ldr.w	r0, [r3], #4
    f494:	6020      	str	r0, [r4, #0]
    f496:	f853 1b04 	ldr.w	r1, [r3], #4
    f49a:	6021      	str	r1, [r4, #0]
    f49c:	f853 2b04 	ldr.w	r2, [r3], #4
    f4a0:	6022      	str	r2, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    f4a2:	1bd8      	subs	r0, r3, r7
    f4a4:	42a8      	cmp	r0, r5
    f4a6:	d21c      	bcs.n	f4e2 <am_hal_iom_int_service+0x17a>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    f4a8:	469c      	mov	ip, r3
    f4aa:	3320      	adds	r3, #32
    f4ac:	f85c 1b04 	ldr.w	r1, [ip], #4
    f4b0:	6021      	str	r1, [r4, #0]
    f4b2:	f853 2c1c 	ldr.w	r2, [r3, #-28]
    f4b6:	6022      	str	r2, [r4, #0]
    f4b8:	f8dc 0004 	ldr.w	r0, [ip, #4]
    f4bc:	6020      	str	r0, [r4, #0]
    f4be:	f853 1c14 	ldr.w	r1, [r3, #-20]
    f4c2:	6021      	str	r1, [r4, #0]
    f4c4:	f853 2c10 	ldr.w	r2, [r3, #-16]
    f4c8:	6022      	str	r2, [r4, #0]
    f4ca:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    f4ce:	6020      	str	r0, [r4, #0]
    f4d0:	f853 1c08 	ldr.w	r1, [r3, #-8]
    f4d4:	6021      	str	r1, [r4, #0]
    f4d6:	f853 2c04 	ldr.w	r2, [r3, #-4]
    f4da:	6022      	str	r2, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    f4dc:	1bd8      	subs	r0, r3, r7
    f4de:	42a8      	cmp	r0, r5
    f4e0:	d3e2      	bcc.n	f4a8 <am_hal_iom_int_service+0x140>
                AM_BFWn(IOMSTR, ui32Module, INTCLR, THR, 1);
    f4e2:	f8d9 7000 	ldr.w	r7, [r9]
    f4e6:	f047 0302 	orr.w	r3, r7, #2
    f4ea:	f8c9 3000 	str.w	r3, [r9]
                psBuffer->ui32BytesLeft -= ui32NumBytes;
    f4ee:	68b1      	ldr	r1, [r6, #8]
                psBuffer->pui32Data += (ui32NumBytes / 4);
    f4f0:	6877      	ldr	r7, [r6, #4]
    f4f2:	f025 0c03 	bic.w	ip, r5, #3
    f4f6:	4467      	add	r7, ip
                psBuffer->ui32BytesLeft -= ui32NumBytes;
    f4f8:	1b4d      	subs	r5, r1, r5
    f4fa:	60b5      	str	r5, [r6, #8]
                psBuffer->pui32Data += (ui32NumBytes / 4);
    f4fc:	6077      	str	r7, [r6, #4]
                if ( 0 == psBuffer->ui32BytesLeft )
    f4fe:	2d00      	cmp	r5, #0
    f500:	f43f af7b 	beq.w	f3fa <am_hal_iom_int_service+0x92>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    f504:	f8d8 2000 	ldr.w	r2, [r8]
            } while ( am_hal_iom_fifo_full_slots(ui32Module) <= thresh );
    f508:	f002 007f 	and.w	r0, r2, #127	; 0x7f
    f50c:	4583      	cmp	fp, r0
    f50e:	d282      	bcs.n	f416 <am_hal_iom_int_service+0xae>
    f510:	e773      	b.n	f3fa <am_hal_iom_int_service+0x92>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    f512:	4652      	mov	r2, sl
    f514:	f240 71d6 	movw	r1, #2006	; 0x7d6
    f518:	4835      	ldr	r0, [pc, #212]	; (f5f0 <am_hal_iom_int_service+0x288>)
    f51a:	f7fe fef9 	bl	e310 <am_hal_debug_error>
    f51e:	e792      	b.n	f446 <am_hal_iom_int_service+0xde>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    f520:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
                    am_hal_iom_fifo_read(ui32Module, psBuffer->pui32Data,
    f524:	eb03 0c8b 	add.w	ip, r3, fp, lsl #2
    am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    f528:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    f52c:	429e      	cmp	r6, r3
                    am_hal_iom_fifo_read(ui32Module, psBuffer->pui32Data,
    f52e:	f8dc 5004 	ldr.w	r5, [ip, #4]
    am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    f532:	f200 8132 	bhi.w	f79a <am_hal_iom_int_service+0x432>
    for ( i = 0; i < ui32NumWords; i++ )
    f536:	ea5f 0a96 	movs.w	sl, r6, lsr #2
    f53a:	f007 0203 	and.w	r2, r7, #3
    f53e:	d047      	beq.n	f5d0 <am_hal_iom_int_service+0x268>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    f540:	462f      	mov	r7, r5
    f542:	6826      	ldr	r6, [r4, #0]
    f544:	f847 6b04 	str.w	r6, [r7], #4
    f548:	eb05 0e8a 	add.w	lr, r5, sl, lsl #2
    f54c:	ebae 0805 	sub.w	r8, lr, r5
    f550:	f1a8 0904 	sub.w	r9, r8, #4
    for ( i = 0; i < ui32NumWords; i++ )
    f554:	45be      	cmp	lr, r7
    f556:	f3c9 0182 	ubfx	r1, r9, #2, #3
    f55a:	d039      	beq.n	f5d0 <am_hal_iom_int_service+0x268>
    f55c:	b311      	cbz	r1, f5a4 <am_hal_iom_int_service+0x23c>
    f55e:	2901      	cmp	r1, #1
    f560:	d01b      	beq.n	f59a <am_hal_iom_int_service+0x232>
    f562:	2902      	cmp	r1, #2
    f564:	d016      	beq.n	f594 <am_hal_iom_int_service+0x22c>
    f566:	2903      	cmp	r1, #3
    f568:	d011      	beq.n	f58e <am_hal_iom_int_service+0x226>
    f56a:	2904      	cmp	r1, #4
    f56c:	d00c      	beq.n	f588 <am_hal_iom_int_service+0x220>
    f56e:	2905      	cmp	r1, #5
    f570:	d007      	beq.n	f582 <am_hal_iom_int_service+0x21a>
    f572:	2906      	cmp	r1, #6
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    f574:	bf1c      	itt	ne
    f576:	6821      	ldrne	r1, [r4, #0]
    f578:	f847 1b04 	strne.w	r1, [r7], #4
    f57c:	6823      	ldr	r3, [r4, #0]
    f57e:	f847 3b04 	str.w	r3, [r7], #4
    f582:	6826      	ldr	r6, [r4, #0]
    f584:	f847 6b04 	str.w	r6, [r7], #4
    f588:	6821      	ldr	r1, [r4, #0]
    f58a:	f847 1b04 	str.w	r1, [r7], #4
    f58e:	6823      	ldr	r3, [r4, #0]
    f590:	f847 3b04 	str.w	r3, [r7], #4
    f594:	6826      	ldr	r6, [r4, #0]
    f596:	f847 6b04 	str.w	r6, [r7], #4
    f59a:	6821      	ldr	r1, [r4, #0]
    f59c:	f847 1b04 	str.w	r1, [r7], #4
    for ( i = 0; i < ui32NumWords; i++ )
    f5a0:	45be      	cmp	lr, r7
    f5a2:	d015      	beq.n	f5d0 <am_hal_iom_int_service+0x268>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    f5a4:	46bb      	mov	fp, r7
    f5a6:	6820      	ldr	r0, [r4, #0]
    f5a8:	f84b 0b04 	str.w	r0, [fp], #4
    f5ac:	6823      	ldr	r3, [r4, #0]
    f5ae:	607b      	str	r3, [r7, #4]
    f5b0:	6826      	ldr	r6, [r4, #0]
    f5b2:	f8cb 6004 	str.w	r6, [fp, #4]
    f5b6:	6821      	ldr	r1, [r4, #0]
    f5b8:	60f9      	str	r1, [r7, #12]
    f5ba:	6820      	ldr	r0, [r4, #0]
    f5bc:	6138      	str	r0, [r7, #16]
    f5be:	6823      	ldr	r3, [r4, #0]
    f5c0:	617b      	str	r3, [r7, #20]
    f5c2:	6826      	ldr	r6, [r4, #0]
    f5c4:	61be      	str	r6, [r7, #24]
    f5c6:	6821      	ldr	r1, [r4, #0]
    f5c8:	61f9      	str	r1, [r7, #28]
    f5ca:	3720      	adds	r7, #32
    for ( i = 0; i < ui32NumWords; i++ )
    f5cc:	45be      	cmp	lr, r7
    f5ce:	d1e9      	bne.n	f5a4 <am_hal_iom_int_service+0x23c>
    if ( ui32Leftovers )
    f5d0:	2a00      	cmp	r2, #0
    f5d2:	f43f af12 	beq.w	f3fa <am_hal_iom_int_service+0x92>
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
    f5d6:	a904      	add	r1, sp, #16
    f5d8:	6824      	ldr	r4, [r4, #0]
    f5da:	f841 4d04 	str.w	r4, [r1, #-4]!
    f5de:	eb05 008a 	add.w	r0, r5, sl, lsl #2
    f5e2:	f000 fab4 	bl	fb4e <memcpy>
    f5e6:	e708      	b.n	f3fa <am_hal_iom_int_service+0x92>
    f5e8:	10002928 	.word	0x10002928
    f5ec:	10002608 	.word	0x10002608
    f5f0:	000130ec 	.word	0x000130ec
    f5f4:	000131f4 	.word	0x000131f4
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    f5f8:	f8da 1000 	ldr.w	r1, [sl]
                    am_hal_iom_fifo_read(ui32Module, psBuffer->pui32Data, ui32NumBytes);
    f5fc:	f8d8 7004 	ldr.w	r7, [r8, #4]
    am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    f600:	f001 0c7f 	and.w	ip, r1, #127	; 0x7f
                    ui32NumBytes = (ui32NumBytes & (~0x3));
    f604:	f025 0603 	bic.w	r6, r5, #3
    am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    f608:	4566      	cmp	r6, ip
    f60a:	f200 80cd 	bhi.w	f7a8 <am_hal_iom_int_service+0x440>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    f60e:	463a      	mov	r2, r7
    f610:	6820      	ldr	r0, [r4, #0]
    f612:	f842 0b04 	str.w	r0, [r2], #4
    f616:	f005 0c7c 	and.w	ip, r5, #124	; 0x7c
    f61a:	f1ac 0504 	sub.w	r5, ip, #4
    f61e:	44bc      	add	ip, r7
    for ( i = 0; i < ui32NumWords; i++ )
    f620:	4562      	cmp	r2, ip
    f622:	f3c5 0182 	ubfx	r1, r5, #2, #3
    f626:	d038      	beq.n	f69a <am_hal_iom_int_service+0x332>
    f628:	b311      	cbz	r1, f670 <am_hal_iom_int_service+0x308>
    f62a:	2901      	cmp	r1, #1
    f62c:	d01b      	beq.n	f666 <am_hal_iom_int_service+0x2fe>
    f62e:	2902      	cmp	r1, #2
    f630:	d016      	beq.n	f660 <am_hal_iom_int_service+0x2f8>
    f632:	2903      	cmp	r1, #3
    f634:	d011      	beq.n	f65a <am_hal_iom_int_service+0x2f2>
    f636:	2904      	cmp	r1, #4
    f638:	d00c      	beq.n	f654 <am_hal_iom_int_service+0x2ec>
    f63a:	2905      	cmp	r1, #5
    f63c:	d007      	beq.n	f64e <am_hal_iom_int_service+0x2e6>
    f63e:	2906      	cmp	r1, #6
    f640:	d002      	beq.n	f648 <am_hal_iom_int_service+0x2e0>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    f642:	6820      	ldr	r0, [r4, #0]
    f644:	6078      	str	r0, [r7, #4]
    f646:	3204      	adds	r2, #4
    f648:	6827      	ldr	r7, [r4, #0]
    f64a:	f842 7b04 	str.w	r7, [r2], #4
    f64e:	6825      	ldr	r5, [r4, #0]
    f650:	f842 5b04 	str.w	r5, [r2], #4
    f654:	6821      	ldr	r1, [r4, #0]
    f656:	f842 1b04 	str.w	r1, [r2], #4
    f65a:	6820      	ldr	r0, [r4, #0]
    f65c:	f842 0b04 	str.w	r0, [r2], #4
    f660:	6827      	ldr	r7, [r4, #0]
    f662:	f842 7b04 	str.w	r7, [r2], #4
    f666:	6825      	ldr	r5, [r4, #0]
    f668:	f842 5b04 	str.w	r5, [r2], #4
    for ( i = 0; i < ui32NumWords; i++ )
    f66c:	4562      	cmp	r2, ip
    f66e:	d014      	beq.n	f69a <am_hal_iom_int_service+0x332>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    f670:	4611      	mov	r1, r2
    f672:	6820      	ldr	r0, [r4, #0]
    f674:	f841 0b04 	str.w	r0, [r1], #4
    f678:	6827      	ldr	r7, [r4, #0]
    f67a:	6057      	str	r7, [r2, #4]
    f67c:	6825      	ldr	r5, [r4, #0]
    f67e:	604d      	str	r5, [r1, #4]
    f680:	6821      	ldr	r1, [r4, #0]
    f682:	60d1      	str	r1, [r2, #12]
    f684:	6820      	ldr	r0, [r4, #0]
    f686:	6110      	str	r0, [r2, #16]
    f688:	6827      	ldr	r7, [r4, #0]
    f68a:	6157      	str	r7, [r2, #20]
    f68c:	6825      	ldr	r5, [r4, #0]
    f68e:	6195      	str	r5, [r2, #24]
    f690:	6821      	ldr	r1, [r4, #0]
    f692:	61d1      	str	r1, [r2, #28]
    f694:	3220      	adds	r2, #32
    for ( i = 0; i < ui32NumWords; i++ )
    f696:	4562      	cmp	r2, ip
    f698:	d1ea      	bne.n	f670 <am_hal_iom_int_service+0x308>
                    psBuffer->ui32BytesLeft -= ui32NumBytes;
    f69a:	f8d8 0008 	ldr.w	r0, [r8, #8]
                    psBuffer->pui32Data += (ui32NumBytes / 4);
    f69e:	f8d8 2004 	ldr.w	r2, [r8, #4]
                    psBuffer->ui32BytesLeft -= ui32NumBytes;
    f6a2:	1b87      	subs	r7, r0, r6
                    psBuffer->pui32Data += (ui32NumBytes / 4);
    f6a4:	4432      	add	r2, r6
                    psBuffer->ui32BytesLeft -= ui32NumBytes;
    f6a6:	f8c8 7008 	str.w	r7, [r8, #8]
                    psBuffer->pui32Data += (ui32NumBytes / 4);
    f6aa:	f8c8 2004 	str.w	r2, [r8, #4]
                    AM_BFWn(IOMSTR, ui32Module, INTCLR, THR, 1);
    f6ae:	f8d4 6208 	ldr.w	r6, [r4, #520]	; 0x208
    f6b2:	f046 0502 	orr.w	r5, r6, #2
    f6b6:	f8c4 5208 	str.w	r5, [r4, #520]	; 0x208
    f6ba:	e697      	b.n	f3ec <am_hal_iom_int_service+0x84>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    f6bc:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
    f6c0:	3004      	adds	r0, #4
    f6c2:	0307      	lsls	r7, r0, #12
            am_hal_iom_fifo_read(ui32Module, psBuffer->pui32Data, ui32NumBytes);
    f6c4:	f8d3 8004 	ldr.w	r8, [r3, #4]
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    f6c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
    f6cc:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
    f6d0:	fa5f f983 	uxtb.w	r9, r3
            ui32NumBytes = am_hal_iom_fifo_full_slots(ui32Module);
    f6d4:	f009 0a7f 	and.w	sl, r9, #127	; 0x7f
    am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    f6d8:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    f6dc:	4592      	cmp	sl, r2
    f6de:	d86c      	bhi.n	f7ba <am_hal_iom_int_service+0x452>
    for ( i = 0; i < ui32NumWords; i++ )
    f6e0:	ea5f 009a 	movs.w	r0, sl, lsr #2
    f6e4:	f009 0203 	and.w	r2, r9, #3
    f6e8:	d04b      	beq.n	f782 <am_hal_iom_int_service+0x41a>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    f6ea:	4643      	mov	r3, r8
    f6ec:	6839      	ldr	r1, [r7, #0]
    f6ee:	f843 1b04 	str.w	r1, [r3], #4
    f6f2:	eb08 0e80 	add.w	lr, r8, r0, lsl #2
    f6f6:	ebae 0b08 	sub.w	fp, lr, r8
    f6fa:	f1ab 0c04 	sub.w	ip, fp, #4
    for ( i = 0; i < ui32NumWords; i++ )
    f6fe:	4573      	cmp	r3, lr
    f700:	f3cc 0182 	ubfx	r1, ip, #2, #3
    f704:	d03d      	beq.n	f782 <am_hal_iom_int_service+0x41a>
    f706:	b311      	cbz	r1, f74e <am_hal_iom_int_service+0x3e6>
    f708:	2901      	cmp	r1, #1
    f70a:	d01b      	beq.n	f744 <am_hal_iom_int_service+0x3dc>
    f70c:	2902      	cmp	r1, #2
    f70e:	d016      	beq.n	f73e <am_hal_iom_int_service+0x3d6>
    f710:	2903      	cmp	r1, #3
    f712:	d011      	beq.n	f738 <am_hal_iom_int_service+0x3d0>
    f714:	2904      	cmp	r1, #4
    f716:	d00c      	beq.n	f732 <am_hal_iom_int_service+0x3ca>
    f718:	2905      	cmp	r1, #5
    f71a:	d007      	beq.n	f72c <am_hal_iom_int_service+0x3c4>
    f71c:	2906      	cmp	r1, #6
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    f71e:	bf1c      	itt	ne
    f720:	6839      	ldrne	r1, [r7, #0]
    f722:	f843 1b04 	strne.w	r1, [r3], #4
    f726:	6839      	ldr	r1, [r7, #0]
    f728:	f843 1b04 	str.w	r1, [r3], #4
    f72c:	6839      	ldr	r1, [r7, #0]
    f72e:	f843 1b04 	str.w	r1, [r3], #4
    f732:	6839      	ldr	r1, [r7, #0]
    f734:	f843 1b04 	str.w	r1, [r3], #4
    f738:	6839      	ldr	r1, [r7, #0]
    f73a:	f843 1b04 	str.w	r1, [r3], #4
    f73e:	6839      	ldr	r1, [r7, #0]
    f740:	f843 1b04 	str.w	r1, [r3], #4
    f744:	6839      	ldr	r1, [r7, #0]
    f746:	f843 1b04 	str.w	r1, [r3], #4
    for ( i = 0; i < ui32NumWords; i++ )
    f74a:	4573      	cmp	r3, lr
    f74c:	d019      	beq.n	f782 <am_hal_iom_int_service+0x41a>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    f74e:	4699      	mov	r9, r3
    f750:	f8d7 a000 	ldr.w	sl, [r7]
    f754:	f849 ab04 	str.w	sl, [r9], #4
    f758:	f8d7 b000 	ldr.w	fp, [r7]
    f75c:	f8c3 b004 	str.w	fp, [r3, #4]
    f760:	f8d7 c000 	ldr.w	ip, [r7]
    f764:	f8c9 c004 	str.w	ip, [r9, #4]
    f768:	6839      	ldr	r1, [r7, #0]
    f76a:	60d9      	str	r1, [r3, #12]
    f76c:	6839      	ldr	r1, [r7, #0]
    f76e:	6119      	str	r1, [r3, #16]
    f770:	6839      	ldr	r1, [r7, #0]
    f772:	6159      	str	r1, [r3, #20]
    f774:	6839      	ldr	r1, [r7, #0]
    f776:	6199      	str	r1, [r3, #24]
    f778:	6839      	ldr	r1, [r7, #0]
    f77a:	61d9      	str	r1, [r3, #28]
    f77c:	3320      	adds	r3, #32
    for ( i = 0; i < ui32NumWords; i++ )
    f77e:	4573      	cmp	r3, lr
    f780:	d1e5      	bne.n	f74e <am_hal_iom_int_service+0x3e6>
    if ( ui32Leftovers )
    f782:	2a00      	cmp	r2, #0
    f784:	f43f ae06 	beq.w	f394 <am_hal_iom_int_service+0x2c>
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
    f788:	a904      	add	r1, sp, #16
    f78a:	683b      	ldr	r3, [r7, #0]
    f78c:	f841 3d04 	str.w	r3, [r1, #-4]!
    f790:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    f794:	f000 f9db 	bl	fb4e <memcpy>
    f798:	e5fc      	b.n	f394 <am_hal_iom_int_service+0x2c>
    am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    f79a:	4a0b      	ldr	r2, [pc, #44]	; (f7c8 <am_hal_iom_int_service+0x460>)
    f79c:	480b      	ldr	r0, [pc, #44]	; (f7cc <am_hal_iom_int_service+0x464>)
    f79e:	f640 010e 	movw	r1, #2062	; 0x80e
    f7a2:	f7fe fdb5 	bl	e310 <am_hal_debug_error>
    f7a6:	e6c6      	b.n	f536 <am_hal_iom_int_service+0x1ce>
    f7a8:	4a07      	ldr	r2, [pc, #28]	; (f7c8 <am_hal_iom_int_service+0x460>)
    f7aa:	4808      	ldr	r0, [pc, #32]	; (f7cc <am_hal_iom_int_service+0x464>)
    f7ac:	9301      	str	r3, [sp, #4]
    f7ae:	f640 010e 	movw	r1, #2062	; 0x80e
    f7b2:	f7fe fdad 	bl	e310 <am_hal_debug_error>
    f7b6:	9b01      	ldr	r3, [sp, #4]
    f7b8:	e729      	b.n	f60e <am_hal_iom_int_service+0x2a6>
    f7ba:	4a03      	ldr	r2, [pc, #12]	; (f7c8 <am_hal_iom_int_service+0x460>)
    f7bc:	4803      	ldr	r0, [pc, #12]	; (f7cc <am_hal_iom_int_service+0x464>)
    f7be:	f640 010e 	movw	r1, #2062	; 0x80e
    f7c2:	f7fe fda5 	bl	e310 <am_hal_debug_error>
    f7c6:	e78b      	b.n	f6e0 <am_hal_iom_int_service+0x378>
    f7c8:	00013118 	.word	0x00013118
    f7cc:	000130ec 	.word	0x000130ec

0000f7d0 <am_hal_iom_int_enable>:
am_hal_iom_int_enable(uint32_t ui32Module, uint32_t ui32Interrupt)
{
    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    f7d0:	2801      	cmp	r0, #1
    f7d2:	d808      	bhi.n	f7e6 <am_hal_iom_int_enable+0x16>
    {
        return;
    }

    AM_REGn(IOMSTR, ui32Module, INTEN) |= ui32Interrupt;
    f7d4:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
    f7d8:	3004      	adds	r0, #4
    f7da:	0302      	lsls	r2, r0, #12
    f7dc:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    f7e0:	4319      	orrs	r1, r3
    f7e2:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    f7e6:	4770      	bx	lr

0000f7e8 <am_hal_iom_int_clear>:
am_hal_iom_int_clear(uint32_t ui32Module, uint32_t ui32Interrupt)
{
    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    f7e8:	2801      	cmp	r0, #1
    f7ea:	d805      	bhi.n	f7f8 <am_hal_iom_int_clear+0x10>
    {
        return;
    }

    AM_REGn(IOMSTR, ui32Module, INTCLR) = ui32Interrupt;
    f7ec:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
    f7f0:	3004      	adds	r0, #4
    f7f2:	0302      	lsls	r2, r0, #12
    f7f4:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    f7f8:	4770      	bx	lr
    f7fa:	bf00      	nop

0000f7fc <am_hal_iom_int_status_get>:
am_hal_iom_int_status_get(uint32_t ui32Module, bool bEnabledOnly)
{
    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    f7fc:	2801      	cmp	r0, #1
    f7fe:	d901      	bls.n	f804 <am_hal_iom_int_status_get+0x8>
    {
        return 0;
    f800:	2000      	movs	r0, #0
    }
    else
    {
        return AM_REGn(IOMSTR, ui32Module, INTSTAT);
    }
}
    f802:	4770      	bx	lr
        uint32_t u32RetVal = AM_REGn(IOMSTR, ui32Module, INTSTAT);
    f804:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
    f808:	3004      	adds	r0, #4
    f80a:	0302      	lsls	r2, r0, #12
    if ( bEnabledOnly )
    f80c:	b911      	cbnz	r1, f814 <am_hal_iom_int_status_get+0x18>
        return AM_REGn(IOMSTR, ui32Module, INTSTAT);
    f80e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
    f812:	4770      	bx	lr
        uint32_t u32RetVal = AM_REGn(IOMSTR, ui32Module, INTSTAT);
    f814:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
        return u32RetVal & AM_REGn(IOMSTR, ui32Module, INTEN);
    f818:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    f81c:	4018      	ands	r0, r3
    f81e:	4770      	bx	lr

0000f820 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    f820:	4b0d      	ldr	r3, [pc, #52]	; (f858 <am_hal_itm_enable+0x38>)
    f822:	6818      	ldr	r0, [r3, #0]
    f824:	07c2      	lsls	r2, r0, #31
    f826:	d416      	bmi.n	f856 <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    f828:	4a0c      	ldr	r2, [pc, #48]	; (f85c <am_hal_itm_enable+0x3c>)
    f82a:	6811      	ldr	r1, [r2, #0]
{
    f82c:	b430      	push	{r4, r5}
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    f82e:	f041 7480 	orr.w	r4, r1, #16777216	; 0x1000000
    f832:	6014      	str	r4, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    f834:	6815      	ldr	r5, [r2, #0]
    f836:	01eb      	lsls	r3, r5, #7
    f838:	d5fc      	bpl.n	f834 <am_hal_itm_enable+0x14>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    f83a:	4809      	ldr	r0, [pc, #36]	; (f860 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    f83c:	4c09      	ldr	r4, [pc, #36]	; (f864 <am_hal_itm_enable+0x44>)
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    f83e:	4d0a      	ldr	r5, [pc, #40]	; (f868 <am_hal_itm_enable+0x48>)
    f840:	6005      	str	r5, [r0, #0]
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    f842:	250f      	movs	r5, #15
    f844:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    f846:	bc30      	pop	{r4, r5}
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    f848:	4908      	ldr	r1, [pc, #32]	; (f86c <am_hal_itm_enable+0x4c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    f84a:	4b09      	ldr	r3, [pc, #36]	; (f870 <am_hal_itm_enable+0x50>)
    f84c:	4a09      	ldr	r2, [pc, #36]	; (f874 <am_hal_itm_enable+0x54>)
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    f84e:	f04f 30ff 	mov.w	r0, #4294967295
    f852:	6008      	str	r0, [r1, #0]
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    f854:	601a      	str	r2, [r3, #0]
}
    f856:	4770      	bx	lr
    f858:	10002604 	.word	0x10002604
    f85c:	e000edfc 	.word	0xe000edfc
    f860:	e0000fb0 	.word	0xe0000fb0
    f864:	e0000e40 	.word	0xe0000e40
    f868:	c5acce55 	.word	0xc5acce55
    f86c:	e0000e00 	.word	0xe0000e00
    f870:	e0000e80 	.word	0xe0000e80
    f874:	00150511 	.word	0x00150511

0000f878 <am_hal_itm_print>:
    uint32_t ui32Idx;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    f878:	7803      	ldrb	r3, [r0, #0]
    f87a:	b1b3      	cbz	r3, f8aa <am_hal_itm_print+0x32>
{
    f87c:	b410      	push	{r4}
    f87e:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    f880:	2400      	movs	r4, #0
    f882:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    f886:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    f888:	2900      	cmp	r1, #0
    f88a:	d1fa      	bne.n	f882 <am_hal_itm_print+0xa>
    f88c:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    f88e:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
        else
        {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    f892:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    f896:	f8dc 3000 	ldr.w	r3, [ip]
    f89a:	2b00      	cmp	r3, #0
    f89c:	d0fb      	beq.n	f896 <am_hal_itm_print+0x1e>
    while (ui32Length)
    f89e:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    f8a0:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    f8a4:	d1f5      	bne.n	f892 <am_hal_itm_print+0x1a>
            // Subtract from length.
            //
            ui32Length--;
        }
    }
}
    f8a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    f8aa:	4770      	bx	lr

0000f8ac <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    f8ac:	490d      	ldr	r1, [pc, #52]	; (f8e4 <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    f8ae:	4b0e      	ldr	r3, [pc, #56]	; (f8e8 <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    f8b0:	4a0e      	ldr	r2, [pc, #56]	; (f8ec <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    f8b2:	681b      	ldr	r3, [r3, #0]
{
    f8b4:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    f8b6:	680d      	ldr	r5, [r1, #0]
    f8b8:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    f8ba:	6815      	ldr	r5, [r2, #0]
    f8bc:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    f8be:	4c0c      	ldr	r4, [pc, #48]	; (f8f0 <am_hal_mcuctrl_fault_status+0x44>)
    f8c0:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    f8c2:	4329      	orrs	r1, r5
    f8c4:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    f8c6:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    f8c8:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    f8cc:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    f8ce:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    f8d0:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    f8d4:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    f8d8:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    f8da:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    f8dc:	6142      	str	r2, [r0, #20]
}
    f8de:	bc70      	pop	{r4, r5, r6}
    f8e0:	4770      	bx	lr
    f8e2:	bf00      	nop
    f8e4:	400201c4 	.word	0x400201c4
    f8e8:	400201cc 	.word	0x400201cc
    f8ec:	400201c0 	.word	0x400201c0
    f8f0:	400201c8 	.word	0x400201c8

0000f8f4 <am_hal_mcuctrl_bucks_enable>:
am_hal_mcuctrl_bucks_enable(void)
{
    //
    // Enable the core buck converter in the MCUCTRL.
    //
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    f8f4:	4b08      	ldr	r3, [pc, #32]	; (f918 <am_hal_mcuctrl_bucks_enable+0x24>)
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Poll until core buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    f8f6:	4a09      	ldr	r2, [pc, #36]	; (f91c <am_hal_mcuctrl_bucks_enable+0x28>)
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    f8f8:	6819      	ldr	r1, [r3, #0]
    f8fa:	f041 0002 	orr.w	r0, r1, #2
    f8fe:	6018      	str	r0, [r3, #0]
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    f900:	6819      	ldr	r1, [r3, #0]
    f902:	f041 0001 	orr.w	r0, r1, #1
    f906:	6018      	str	r0, [r3, #0]
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    f908:	6813      	ldr	r3, [r2, #0]
    f90a:	0799      	lsls	r1, r3, #30
    f90c:	d5fc      	bpl.n	f908 <am_hal_mcuctrl_bucks_enable+0x14>

    //
    // Poll until SRAM buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, MEMBUCKON) );
    f90e:	4a03      	ldr	r2, [pc, #12]	; (f91c <am_hal_mcuctrl_bucks_enable+0x28>)
    f910:	6811      	ldr	r1, [r2, #0]
    f912:	07cb      	lsls	r3, r1, #31
    f914:	d5fc      	bpl.n	f910 <am_hal_mcuctrl_bucks_enable+0x1c>
}
    f916:	4770      	bx	lr
    f918:	40020010 	.word	0x40020010
    f91c:	40020014 	.word	0x40020014

0000f920 <am_hal_queue_item_add>:
//! didn't have enough space.
//
//*****************************************************************************
bool
am_hal_queue_item_add(am_hal_queue_t *psQueue, const void *pvSource, uint32_t ui32NumItems)
{
    f920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f922:	4604      	mov	r4, r0
    uint32_t i;
    uint8_t *pui8Source;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    f924:	6907      	ldr	r7, [r0, #16]
{
    f926:	460e      	mov	r6, r1
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    f928:	fb07 f702 	mul.w	r7, r7, r2
    bool bSuccess = false;
    uint32_t ui32Primask;

    pui8Source = (uint8_t *) pvSource;

    ui32Primask = am_hal_interrupt_master_disable();
    f92c:	f7fe fdf8 	bl	e520 <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't already full
    //
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    f930:	68a5      	ldr	r5, [r4, #8]
    f932:	68e3      	ldr	r3, [r4, #12]
    f934:	1b59      	subs	r1, r3, r5
    f936:	428f      	cmp	r7, r1
    f938:	d87c      	bhi.n	fa34 <am_hal_queue_item_add+0x114>
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    f93a:	2f00      	cmp	r7, #0
    f93c:	d073      	beq.n	fa26 <am_hal_queue_item_add+0x106>
        {
            //
            // Write the value to the buffer.
            //
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    f93e:	4635      	mov	r5, r6
    f940:	6823      	ldr	r3, [r4, #0]
    f942:	6962      	ldr	r2, [r4, #20]
    f944:	f815 1b01 	ldrb.w	r1, [r5], #1
    f948:	54d1      	strb	r1, [r2, r3]

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f94a:	6823      	ldr	r3, [r4, #0]
    f94c:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    f950:	1c5a      	adds	r2, r3, #1
    f952:	19f1      	adds	r1, r6, r7
    f954:	f107 3cff 	add.w	ip, r7, #4294967295
    f958:	fbb2 f6fe 	udiv	r6, r2, lr
        for ( i = 0; i < ui32Bytes; i++ )
    f95c:	42a9      	cmp	r1, r5
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f95e:	fb0e 2316 	mls	r3, lr, r6, r2
    f962:	6023      	str	r3, [r4, #0]
    f964:	f00c 0203 	and.w	r2, ip, #3
        for ( i = 0; i < ui32Bytes; i++ )
    f968:	d05c      	beq.n	fa24 <am_hal_queue_item_add+0x104>
    f96a:	b34a      	cbz	r2, f9c0 <am_hal_queue_item_add+0xa0>
    f96c:	2a01      	cmp	r2, #1
    f96e:	d019      	beq.n	f9a4 <am_hal_queue_item_add+0x84>
    f970:	2a02      	cmp	r2, #2
    f972:	d00b      	beq.n	f98c <am_hal_queue_item_add+0x6c>
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    f974:	6962      	ldr	r2, [r4, #20]
    f976:	f815 6b01 	ldrb.w	r6, [r5], #1
    f97a:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f97c:	6823      	ldr	r3, [r4, #0]
    f97e:	68e6      	ldr	r6, [r4, #12]
    f980:	1c5a      	adds	r2, r3, #1
    f982:	fbb2 fef6 	udiv	lr, r2, r6
    f986:	fb06 231e 	mls	r3, r6, lr, r2
    f98a:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    f98c:	6962      	ldr	r2, [r4, #20]
    f98e:	f815 6b01 	ldrb.w	r6, [r5], #1
    f992:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f994:	6823      	ldr	r3, [r4, #0]
    f996:	68e6      	ldr	r6, [r4, #12]
    f998:	1c5a      	adds	r2, r3, #1
    f99a:	fbb2 fcf6 	udiv	ip, r2, r6
    f99e:	fb06 231c 	mls	r3, r6, ip, r2
    f9a2:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    f9a4:	6962      	ldr	r2, [r4, #20]
    f9a6:	f815 6b01 	ldrb.w	r6, [r5], #1
    f9aa:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f9ac:	6823      	ldr	r3, [r4, #0]
    f9ae:	68e6      	ldr	r6, [r4, #12]
    f9b0:	1c5a      	adds	r2, r3, #1
        for ( i = 0; i < ui32Bytes; i++ )
    f9b2:	42a9      	cmp	r1, r5
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f9b4:	fbb2 fef6 	udiv	lr, r2, r6
    f9b8:	fb06 231e 	mls	r3, r6, lr, r2
    f9bc:	6023      	str	r3, [r4, #0]
        for ( i = 0; i < ui32Bytes; i++ )
    f9be:	d031      	beq.n	fa24 <am_hal_queue_item_add+0x104>
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    f9c0:	46ac      	mov	ip, r5
    f9c2:	6962      	ldr	r2, [r4, #20]
    f9c4:	f81c 6b01 	ldrb.w	r6, [ip], #1
    f9c8:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f9ca:	6823      	ldr	r3, [r4, #0]
    f9cc:	68e2      	ldr	r2, [r4, #12]
    f9ce:	1c5e      	adds	r6, r3, #1
    f9d0:	fbb6 fef2 	udiv	lr, r6, r2
    f9d4:	fb02 631e 	mls	r3, r2, lr, r6
    f9d8:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    f9da:	6962      	ldr	r2, [r4, #20]
    f9dc:	786e      	ldrb	r6, [r5, #1]
    f9de:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f9e0:	6823      	ldr	r3, [r4, #0]
    f9e2:	68e2      	ldr	r2, [r4, #12]
    f9e4:	1c5e      	adds	r6, r3, #1
    f9e6:	fbb6 fef2 	udiv	lr, r6, r2
    f9ea:	fb02 631e 	mls	r3, r2, lr, r6
    f9ee:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    f9f0:	6962      	ldr	r2, [r4, #20]
    f9f2:	f89c 6001 	ldrb.w	r6, [ip, #1]
    f9f6:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    f9f8:	6823      	ldr	r3, [r4, #0]
    f9fa:	68e2      	ldr	r2, [r4, #12]
    f9fc:	1c5e      	adds	r6, r3, #1
    f9fe:	fbb6 fcf2 	udiv	ip, r6, r2
    fa02:	fb02 631c 	mls	r3, r2, ip, r6
    fa06:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    fa08:	6962      	ldr	r2, [r4, #20]
    fa0a:	78ee      	ldrb	r6, [r5, #3]
    fa0c:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    fa0e:	6823      	ldr	r3, [r4, #0]
    fa10:	68e2      	ldr	r2, [r4, #12]
    fa12:	1c5e      	adds	r6, r3, #1
    fa14:	3504      	adds	r5, #4
    fa16:	fbb6 fef2 	udiv	lr, r6, r2
        for ( i = 0; i < ui32Bytes; i++ )
    fa1a:	42a9      	cmp	r1, r5
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    fa1c:	fb02 631e 	mls	r3, r2, lr, r6
    fa20:	6023      	str	r3, [r4, #0]
        for ( i = 0; i < ui32Bytes; i++ )
    fa22:	d1cd      	bne.n	f9c0 <am_hal_queue_item_add+0xa0>
    fa24:	68a5      	ldr	r5, [r4, #8]
        }

        //
        // Update the length value appropriately.
        //
        psQueue->ui32Length += ui32Bytes;
    fa26:	443d      	add	r5, r7
    fa28:	60a5      	str	r5, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
    fa2a:	2401      	movs	r4, #1
        // failure.
        //
        bSuccess = false;
    }

    am_hal_interrupt_master_set(ui32Primask);
    fa2c:	f7fe fd7c 	bl	e528 <am_hal_interrupt_master_set>

    return bSuccess;
}
    fa30:	4620      	mov	r0, r4
    fa32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        bSuccess = false;
    fa34:	2400      	movs	r4, #0
    am_hal_interrupt_master_set(ui32Primask);
    fa36:	f7fe fd77 	bl	e528 <am_hal_interrupt_master_set>
}
    fa3a:	4620      	mov	r0, r4
    fa3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fa3e:	bf00      	nop

0000fa40 <am_hal_sysctrl_sleep>:
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    fa40:	4a08      	ldr	r2, [pc, #32]	; (fa64 <am_hal_sysctrl_sleep+0x24>)
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    fa42:	b118      	cbz	r0, fa4c <am_hal_sysctrl_sleep+0xc>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    fa44:	4b08      	ldr	r3, [pc, #32]	; (fa68 <am_hal_sysctrl_sleep+0x28>)
    fa46:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    fa48:	07c3      	lsls	r3, r0, #31
    fa4a:	d505      	bpl.n	fa58 <am_hal_sysctrl_sleep+0x18>
    }
    else
    {
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    fa4c:	6811      	ldr	r1, [r2, #0]
    fa4e:	f021 0304 	bic.w	r3, r1, #4
    fa52:	6013      	str	r3, [r2, #0]
    }

    //
    // Go to sleep.
    //
    AM_ASM_WFI;
    fa54:	bf30      	wfi
    fa56:	4770      	bx	lr
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    fa58:	6810      	ldr	r0, [r2, #0]
    fa5a:	f040 0104 	orr.w	r1, r0, #4
    fa5e:	6011      	str	r1, [r2, #0]
    AM_ASM_WFI;
    fa60:	bf30      	wfi
    fa62:	4770      	bx	lr
    fa64:	e000ed10 	.word	0xe000ed10
    fa68:	40020250 	.word	0x40020250

0000fa6c <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    fa6c:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    fa6e:	4a24      	ldr	r2, [pc, #144]	; (fb00 <am_hal_tpiu_enable+0x94>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    fa70:	6803      	ldr	r3, [r0, #0]
    AM_REG(TPIU, FFCR) = 0;
    fa72:	2100      	movs	r1, #0
    fa74:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    fa76:	b313      	cbz	r3, fabe <am_hal_tpiu_enable+0x52>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    fa78:	f5a2 7c40 	sub.w	ip, r2, #768	; 0x300
    fa7c:	2101      	movs	r1, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    fa7e:	4c21      	ldr	r4, [pc, #132]	; (fb04 <am_hal_tpiu_enable+0x98>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    fa80:	4d21      	ldr	r5, [pc, #132]	; (fb08 <am_hal_tpiu_enable+0x9c>)
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    fa82:	f8cc 1000 	str.w	r1, [ip]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    fa86:	f5a3 4e61 	sub.w	lr, r3, #57600	; 0xe100
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    fa8a:	45a6      	cmp	lr, r4
    fa8c:	bf94      	ite	ls
    fa8e:	461c      	movls	r4, r3
    fa90:	462c      	movhi	r4, r5
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    fa92:	f7fe fb19 	bl	e0c8 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    fa96:	1c43      	adds	r3, r0, #1
    fa98:	d02f      	beq.n	fafa <am_hal_tpiu_enable+0x8e>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    fa9a:	08c2      	lsrs	r2, r0, #3
    fa9c:	fbb2 f3f4 	udiv	r3, r2, r4
    faa0:	1e5d      	subs	r5, r3, #1
    faa2:	b2a8      	uxth	r0, r5
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    faa4:	4a19      	ldr	r2, [pc, #100]	; (fb0c <am_hal_tpiu_enable+0xa0>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    faa6:	4c1a      	ldr	r4, [pc, #104]	; (fb10 <am_hal_tpiu_enable+0xa4>)

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    faa8:	491a      	ldr	r1, [pc, #104]	; (fb14 <am_hal_tpiu_enable+0xa8>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    faaa:	4b1b      	ldr	r3, [pc, #108]	; (fb18 <am_hal_tpiu_enable+0xac>)
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    faac:	6010      	str	r0, [r2, #0]
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    faae:	2502      	movs	r5, #2
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    fab0:	2000      	movs	r0, #0
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    fab2:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    fab6:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    fab8:	6008      	str	r0, [r1, #0]
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    faba:	601a      	str	r2, [r3, #0]
    fabc:	e010      	b.n	fae0 <am_hal_tpiu_enable+0x74>
        //

        //
        // Set the Asynchronous Clock Prescaler Register.
        //
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    fabe:	4c13      	ldr	r4, [pc, #76]	; (fb0c <am_hal_tpiu_enable+0xa0>)
    fac0:	6905      	ldr	r5, [r0, #16]
    fac2:	6025      	str	r5, [r4, #0]

        //
        // Set the Selected Pin Protocol Register.
        //  e.g. AM_REG_TPIU_SPPR_TXMODE_UART
        //
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    fac4:	6882      	ldr	r2, [r0, #8]
    fac6:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    faca:	68c3      	ldr	r3, [r0, #12]
    facc:	4c13      	ldr	r4, [pc, #76]	; (fb1c <am_hal_tpiu_enable+0xb0>)

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    face:	4912      	ldr	r1, [pc, #72]	; (fb18 <am_hal_tpiu_enable+0xac>)
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    fad0:	1e5d      	subs	r5, r3, #1
    fad2:	2201      	movs	r2, #1
    fad4:	40aa      	lsls	r2, r5
    fad6:	6022      	str	r2, [r4, #0]
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    fad8:	6840      	ldr	r0, [r0, #4]
    fada:	680b      	ldr	r3, [r1, #0]
    fadc:	4303      	orrs	r3, r0
    fade:	600b      	str	r3, [r1, #0]
    }

    // wait for 50us for the data to flush out
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    fae0:	f7fe faf2 	bl	e0c8 <am_hal_clkgen_sysclk_get>
    fae4:	4c0e      	ldr	r4, [pc, #56]	; (fb20 <am_hal_tpiu_enable+0xb4>)
    fae6:	fba4 3100 	umull	r3, r1, r4, r0
    faea:	0c88      	lsrs	r0, r1, #18
    faec:	2332      	movs	r3, #50	; 0x32
    faee:	fb03 f000 	mul.w	r0, r3, r0
}
    faf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    faf6:	f7fe bc0d 	b.w	e314 <am_hal_flash_delay>
    fafa:	2002      	movs	r0, #2
    fafc:	e7d2      	b.n	faa4 <am_hal_tpiu_enable+0x38>
    fafe:	bf00      	nop
    fb00:	e0040304 	.word	0xe0040304
    fb04:	001da380 	.word	0x001da380
    fb08:	000f4240 	.word	0x000f4240
    fb0c:	e0040010 	.word	0xe0040010
    fb10:	e00400f0 	.word	0xe00400f0
    fb14:	e0040f00 	.word	0xe0040f00
    fb18:	40020250 	.word	0x40020250
    fb1c:	e0040004 	.word	0xe0040004
    fb20:	165e9f81 	.word	0x165e9f81

0000fb24 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    fb24:	4b01      	ldr	r3, [pc, #4]	; (fb2c <am_hal_vcomp_disable+0x8>)
    fb26:	2237      	movs	r2, #55	; 0x37
    fb28:	601a      	str	r2, [r3, #0]
    fb2a:	4770      	bx	lr
    fb2c:	4000c008 	.word	0x4000c008

0000fb30 <memcmp>:
    fb30:	b510      	push	{r4, lr}
    fb32:	3901      	subs	r1, #1
    fb34:	4402      	add	r2, r0
    fb36:	4290      	cmp	r0, r2
    fb38:	d101      	bne.n	fb3e <memcmp+0xe>
    fb3a:	2000      	movs	r0, #0
    fb3c:	bd10      	pop	{r4, pc}
    fb3e:	f810 3b01 	ldrb.w	r3, [r0], #1
    fb42:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    fb46:	42a3      	cmp	r3, r4
    fb48:	d0f5      	beq.n	fb36 <memcmp+0x6>
    fb4a:	1b18      	subs	r0, r3, r4
    fb4c:	bd10      	pop	{r4, pc}

0000fb4e <memcpy>:
    fb4e:	b510      	push	{r4, lr}
    fb50:	1e43      	subs	r3, r0, #1
    fb52:	440a      	add	r2, r1
    fb54:	4291      	cmp	r1, r2
    fb56:	d100      	bne.n	fb5a <memcpy+0xc>
    fb58:	bd10      	pop	{r4, pc}
    fb5a:	f811 4b01 	ldrb.w	r4, [r1], #1
    fb5e:	f803 4f01 	strb.w	r4, [r3, #1]!
    fb62:	e7f7      	b.n	fb54 <memcpy+0x6>

0000fb64 <memmove>:
    fb64:	4288      	cmp	r0, r1
    fb66:	b510      	push	{r4, lr}
    fb68:	eb01 0302 	add.w	r3, r1, r2
    fb6c:	d803      	bhi.n	fb76 <memmove+0x12>
    fb6e:	1e42      	subs	r2, r0, #1
    fb70:	4299      	cmp	r1, r3
    fb72:	d10c      	bne.n	fb8e <memmove+0x2a>
    fb74:	bd10      	pop	{r4, pc}
    fb76:	4298      	cmp	r0, r3
    fb78:	d2f9      	bcs.n	fb6e <memmove+0xa>
    fb7a:	1881      	adds	r1, r0, r2
    fb7c:	1ad2      	subs	r2, r2, r3
    fb7e:	42d3      	cmn	r3, r2
    fb80:	d100      	bne.n	fb84 <memmove+0x20>
    fb82:	bd10      	pop	{r4, pc}
    fb84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    fb88:	f801 4d01 	strb.w	r4, [r1, #-1]!
    fb8c:	e7f7      	b.n	fb7e <memmove+0x1a>
    fb8e:	f811 4b01 	ldrb.w	r4, [r1], #1
    fb92:	f802 4f01 	strb.w	r4, [r2, #1]!
    fb96:	e7eb      	b.n	fb70 <memmove+0xc>

0000fb98 <memset>:
    fb98:	4402      	add	r2, r0
    fb9a:	4603      	mov	r3, r0
    fb9c:	4293      	cmp	r3, r2
    fb9e:	d100      	bne.n	fba2 <memset+0xa>
    fba0:	4770      	bx	lr
    fba2:	f803 1b01 	strb.w	r1, [r3], #1
    fba6:	e7f9      	b.n	fb9c <memset+0x4>
    fba8:	43696368 	.word	0x43696368
    fbac:	6954646d 	.word	0x6954646d
    fbb0:	756f656d 	.word	0x756f656d
    fbb4:	00000074 	.word	0x00000074
    fbb8:	20494348 	.word	0x20494348
    fbbc:	6e6e6f63 	.word	0x6e6e6f63
    fbc0:	72747320 	.word	0x72747320
    fbc4:	20746375 	.word	0x20746375
    fbc8:	6f6c6c61 	.word	0x6f6c6c61
    fbcc:	61662063 	.word	0x61662063
    fbd0:	72756c69 	.word	0x72756c69
    fbd4:	00000065 	.word	0x00000065
    fbd8:	43696368 	.word	0x43696368
    fbdc:	4365726f 	.word	0x4365726f
    fbe0:	466e6e6f 	.word	0x466e6e6f
    fbe4:	20656572 	.word	0x20656572
    fbe8:	646e6168 	.word	0x646e6168
    fbec:	6e20656c 	.word	0x6e20656c
    fbf0:	6620746f 	.word	0x6620746f
    fbf4:	646e756f 	.word	0x646e756f
    fbf8:	0075253a 	.word	0x0075253a
    fbfc:	43696368 	.word	0x43696368
    fc00:	5365726f 	.word	0x5365726f
    fc04:	41646e65 	.word	0x41646e65
    fc08:	61446c63 	.word	0x61446c63
    fc0c:	61206174 	.word	0x61206174
    fc10:	6c696176 	.word	0x6c696176
    fc14:	73667542 	.word	0x73667542
    fc18:	0000303d 	.word	0x0000303d
    fc1c:	43696368 	.word	0x43696368
    fc20:	5465726f 	.word	0x5465726f
    fc24:	61655278 	.word	0x61655278
    fc28:	64207964 	.word	0x64207964
    fc2c:	61637369 	.word	0x61637369
    fc30:	6e696472 	.word	0x6e696472
    fc34:	75622067 	.word	0x75622067
    fc38:	72656666 	.word	0x72656666
    fc3c:	6168202c 	.word	0x6168202c
    fc40:	656c646e 	.word	0x656c646e
    fc44:	0075253d 	.word	0x0075253d
    fc48:	43696368 	.word	0x43696368
    fc4c:	5465726f 	.word	0x5465726f
    fc50:	6c634178 	.word	0x6c634178
    fc54:	72617453 	.word	0x72617453
    fc58:	656c2074 	.word	0x656c2074
    fc5c:	75253d6e 	.word	0x75253d6e
    fc60:	00000000 	.word	0x00000000
    fc64:	43696368 	.word	0x43696368
    fc68:	5465726f 	.word	0x5465726f
    fc6c:	6c634178 	.word	0x6c634178
    fc70:	746e6f43 	.word	0x746e6f43
    fc74:	65756e69 	.word	0x65756e69
    fc78:	6c636120 	.word	0x6c636120
    fc7c:	3d6e654c 	.word	0x3d6e654c
    fc80:	72207525 	.word	0x72207525
    fc84:	654c6d65 	.word	0x654c6d65
    fc88:	75253d6e 	.word	0x75253d6e
    fc8c:	00000000 	.word	0x00000000
    fc90:	43696368 	.word	0x43696368
    fc94:	5465726f 	.word	0x5465726f
    fc98:	6c634178 	.word	0x6c634178
    fc9c:	706d6f43 	.word	0x706d6f43
    fca0:	6574656c 	.word	0x6574656c
    fca4:	65726620 	.word	0x65726620
    fca8:	54702065 	.word	0x54702065
    fcac:	6c634178 	.word	0x6c634178
    fcb0:	00746b50 	.word	0x00746b50
    fcb4:	61736964 	.word	0x61736964
    fcb8:	64656472 	.word	0x64656472
    fcbc:	69636820 	.word	0x69636820
    fcc0:	20787220 	.word	0x20787220
    fcc4:	20746b70 	.word	0x20746b70
    fcc8:	646e6168 	.word	0x646e6168
    fccc:	303d656c 	.word	0x303d656c
    fcd0:	34302578 	.word	0x34302578
    fcd4:	00000078 	.word	0x00000078
    fcd8:	2063326c 	.word	0x2063326c
    fcdc:	3d6e656c 	.word	0x3d6e656c
    fce0:	30257830 	.word	0x30257830
    fce4:	74207834 	.word	0x74207834
    fce8:	616c206f 	.word	0x616c206f
    fcec:	20656772 	.word	0x20656772
    fcf0:	20726f66 	.word	0x20726f66
    fcf4:	73616572 	.word	0x73616572
    fcf8:	626d6573 	.word	0x626d6573
    fcfc:	0000796c 	.word	0x0000796c
    fd00:	73616572 	.word	0x73616572
    fd04:	626d6573 	.word	0x626d6573
    fd08:	6120796c 	.word	0x6120796c
    fd0c:	636f6c6c 	.word	0x636f6c6c
    fd10:	69616620 	.word	0x69616620
    fd14:	2064656c 	.word	0x2064656c
    fd18:	3d6e656c 	.word	0x3d6e656c
    fd1c:	00007525 	.word	0x00007525
    fd20:	61766e69 	.word	0x61766e69
    fd24:	2064696c 	.word	0x2064696c
    fd28:	2063326c 	.word	0x2063326c
    fd2c:	20746b70 	.word	0x20746b70
    fd30:	4c6c6361 	.word	0x4c6c6361
    fd34:	253d6e65 	.word	0x253d6e65
    fd38:	00000075 	.word	0x00000075
    fd3c:	746e6f63 	.word	0x746e6f63
    fd40:	61756e69 	.word	0x61756e69
    fd44:	6e6f6974 	.word	0x6e6f6974
    fd48:	746b7020 	.word	0x746b7020
    fd4c:	6f6f7420 	.word	0x6f6f7420
    fd50:	6e6f6c20 	.word	0x6e6f6c20
    fd54:	656c2067 	.word	0x656c2067
    fd58:	75253d6e 	.word	0x75253d6e
    fd5c:	6d655220 	.word	0x6d655220
    fd60:	3d6e654c 	.word	0x3d6e654c
    fd64:	00007525 	.word	0x00007525
    fd68:	78656e75 	.word	0x78656e75
    fd6c:	74636570 	.word	0x74636570
    fd70:	63206465 	.word	0x63206465
    fd74:	69746e6f 	.word	0x69746e6f
    fd78:	7461756e 	.word	0x7461756e
    fd7c:	206e6f69 	.word	0x206e6f69
    fd80:	20746b70 	.word	0x20746b70
    fd84:	646e6168 	.word	0x646e6168
    fd88:	303d656c 	.word	0x303d656c
    fd8c:	34302578 	.word	0x34302578
    fd90:	00000078 	.word	0x00000078
    fd94:	6e6b6e75 	.word	0x6e6b6e75
    fd98:	206e776f 	.word	0x206e776f
    fd9c:	66206270 	.word	0x66206270
    fda0:	7367616c 	.word	0x7367616c
    fda4:	2578303d 	.word	0x2578303d
    fda8:	00783430 	.word	0x00783430
    fdac:	20746b70 	.word	0x20746b70
    fdb0:	64766372 	.word	0x64766372
    fdb4:	206e6f20 	.word	0x206e6f20
    fdb8:	6e6b6e75 	.word	0x6e6b6e75
    fdbc:	206e776f 	.word	0x206e776f
    fdc0:	646e6168 	.word	0x646e6168
    fdc4:	303d656c 	.word	0x303d656c
    fdc8:	34302578 	.word	0x34302578
    fdcc:	00000078 	.word	0x00000078
    fdd0:	53696348 	.word	0x53696348
    fdd4:	41646e65 	.word	0x41646e65
    fdd8:	61446c63 	.word	0x61446c63
    fddc:	64206174 	.word	0x64206174
    fde0:	61637369 	.word	0x61637369
    fde4:	6e696472 	.word	0x6e696472
    fde8:	75622067 	.word	0x75622067
    fdec:	72656666 	.word	0x72656666
    fdf0:	6168202c 	.word	0x6168202c
    fdf4:	656c646e 	.word	0x656c646e
    fdf8:	0075253d 	.word	0x0075253d
    fdfc:	20494348 	.word	0x20494348
    fe00:	20766441 	.word	0x20766441
    fe04:	6f706572 	.word	0x6f706572
    fe08:	202c7472 	.word	0x202c7472
    fe0c:	206d756e 	.word	0x206d756e
    fe10:	6f706572 	.word	0x6f706572
    fe14:	3a737472 	.word	0x3a737472
    fe18:	00642520 	.word	0x00642520
    fe1c:	20494348 	.word	0x20494348
    fe20:	20766441 	.word	0x20766441
    fe24:	6f706572 	.word	0x6f706572
    fe28:	202c7472 	.word	0x202c7472
    fe2c:	61746164 	.word	0x61746164
    fe30:	6e656c20 	.word	0x6e656c20
    fe34:	6425203a 	.word	0x6425203a
    fe38:	00000000 	.word	0x00000000
    fe3c:	61766e49 	.word	0x61766e49
    fe40:	2064696c 	.word	0x2064696c
    fe44:	20766461 	.word	0x20766461
    fe48:	6f706572 	.word	0x6f706572
    fe4c:	64207472 	.word	0x64207472
    fe50:	20617461 	.word	0x20617461
    fe54:	006e656c 	.word	0x006e656c
    fe58:	20494348 	.word	0x20494348
    fe5c:	20747845 	.word	0x20747845
    fe60:	20766441 	.word	0x20766441
    fe64:	6f706572 	.word	0x6f706572
    fe68:	202c7472 	.word	0x202c7472
    fe6c:	206d756e 	.word	0x206d756e
    fe70:	6f706572 	.word	0x6f706572
    fe74:	3a737472 	.word	0x3a737472
    fe78:	00642520 	.word	0x00642520
    fe7c:	20494348 	.word	0x20494348
    fe80:	20747845 	.word	0x20747845
    fe84:	20766441 	.word	0x20766441
    fe88:	6f706572 	.word	0x6f706572
    fe8c:	202c7472 	.word	0x202c7472
    fe90:	61746164 	.word	0x61746164
    fe94:	6e656c20 	.word	0x6e656c20
    fe98:	6425203a 	.word	0x6425203a
    fe9c:	00000000 	.word	0x00000000
    fea0:	61766e49 	.word	0x61766e49
    fea4:	2064696c 	.word	0x2064696c
    fea8:	20747865 	.word	0x20747865
    feac:	20766461 	.word	0x20766461
    feb0:	6f706572 	.word	0x6f706572
    feb4:	64207472 	.word	0x64207472
    feb8:	20617461 	.word	0x20617461
    febc:	006e656c 	.word	0x006e656c
    fec0:	20494348 	.word	0x20494348
    fec4:	20726550 	.word	0x20726550
    fec8:	20766441 	.word	0x20766441
    fecc:	6f706572 	.word	0x6f706572
    fed0:	00007472 	.word	0x00007472
    fed4:	61766e49 	.word	0x61766e49
    fed8:	2064696c 	.word	0x2064696c
    fedc:	20726570 	.word	0x20726570
    fee0:	20766461 	.word	0x20766461
    fee4:	6f706572 	.word	0x6f706572
    fee8:	64207472 	.word	0x64207472
    feec:	20617461 	.word	0x20617461
    fef0:	3a6e656c 	.word	0x3a6e656c
    fef4:	00642520 	.word	0x00642520
    fef8:	20494348 	.word	0x20494348
    fefc:	20726550 	.word	0x20726550
    ff00:	20766441 	.word	0x20766441
    ff04:	6f706572 	.word	0x6f706572
    ff08:	202c7472 	.word	0x202c7472
    ff0c:	61746164 	.word	0x61746164
    ff10:	6e656c20 	.word	0x6e656c20
    ff14:	6425203a 	.word	0x6425203a
    ff18:	00000000 	.word	0x00000000
    ff1c:	58323025 	.word	0x58323025
    ff20:	00000020 	.word	0x00000020
    ff24:	0000000a 	.word	0x0000000a
    ff28:	00000a0a 	.word	0x00000a0a
    ff2c:	2e5c2e2e 	.word	0x2e5c2e2e
    ff30:	2e2e5c2e 	.word	0x2e2e5c2e
    ff34:	5c2e2e5c 	.word	0x5c2e2e5c
    ff38:	2e5c2e2e 	.word	0x2e5c2e2e
    ff3c:	68745c2e 	.word	0x68745c2e
    ff40:	5f647269 	.word	0x5f647269
    ff44:	74726170 	.word	0x74726170
    ff48:	78655c79 	.word	0x78655c79
    ff4c:	6c746361 	.word	0x6c746361
    ff50:	73775c65 	.word	0x73775c65
    ff54:	726f632d 	.word	0x726f632d
    ff58:	77735c65 	.word	0x77735c65
    ff5c:	6673775c 	.word	0x6673775c
    ff60:	626d615c 	.word	0x626d615c
    ff64:	775c7169 	.word	0x775c7169
    ff68:	745f6673 	.word	0x745f6673
    ff6c:	65636172 	.word	0x65636172
    ff70:	0000632e 	.word	0x0000632e
    ff74:	20707041 	.word	0x20707041
    ff78:	20746f67 	.word	0x20746f67
    ff7c:	20747665 	.word	0x20747665
    ff80:	00006425 	.word	0x00006425
    ff84:	20465357 	.word	0x20465357
    ff88:	20636573 	.word	0x20636573
    ff8c:	20746f6e 	.word	0x20746f6e
    ff90:	69676572 	.word	0x69676572
    ff94:	72657473 	.word	0x72657473
    ff98:	00006465 	.word	0x00006465
    ff9c:	20465357 	.word	0x20465357
    ffa0:	20636573 	.word	0x20636573
    ffa4:	75657571 	.word	0x75657571
    ffa8:	6d652065 	.word	0x6d652065
    ffac:	21797470 	.word	0x21797470
    ffb0:	00000000 	.word	0x00000000
    ffb4:	42667357 	.word	0x42667357
    ffb8:	6c416675 	.word	0x6c416675
    ffbc:	20636f6c 	.word	0x20636f6c
    ffc0:	6c696166 	.word	0x6c696166
    ffc4:	6c206465 	.word	0x6c206465
    ffc8:	253a6e65 	.word	0x253a6e65
    ffcc:	00000075 	.word	0x00000075
    ffd0:	20494348 	.word	0x20494348
    ffd4:	45205854 	.word	0x45205854
    ffd8:	726f7272 	.word	0x726f7272
    ffdc:	54532820 	.word	0x54532820
    ffe0:	53555441 	.word	0x53555441
    ffe4:	52524520 	.word	0x52524520
    ffe8:	2029524f 	.word	0x2029524f
    ffec:	6b636150 	.word	0x6b636150
    fff0:	54207465 	.word	0x54207465
    fff4:	4c206f6f 	.word	0x4c206f6f
    fff8:	65677261 	.word	0x65677261
    fffc:	0000000a 	.word	0x0000000a
   10000:	20494348 	.word	0x20494348
   10004:	69205854 	.word	0x69205854
   10008:	7270206e 	.word	0x7270206e
   1000c:	6572676f 	.word	0x6572676f
   10010:	000a7373 	.word	0x000a7373
   10014:	20494348 	.word	0x20494348
   10018:	45205852 	.word	0x45205852
   1001c:	726f7272 	.word	0x726f7272
   10020:	54532820 	.word	0x54532820
   10024:	53555441 	.word	0x53555441
   10028:	52524520 	.word	0x52524520
   1002c:	2029524f 	.word	0x2029524f
   10030:	6b636150 	.word	0x6b636150
   10034:	54207465 	.word	0x54207465
   10038:	4c206f6f 	.word	0x4c206f6f
   1003c:	65677261 	.word	0x65677261
   10040:	0000000a 	.word	0x0000000a
   10044:	202c6425 	.word	0x202c6425
   10048:	000a6425 	.word	0x000a6425
   1004c:	696c6156 	.word	0x696c6156
   10050:	6d652064 	.word	0x6d652064
   10054:	34303339 	.word	0x34303339
   10058:	7461705f 	.word	0x7461705f
   1005c:	73656863 	.word	0x73656863
   10060:	6620632e 	.word	0x6620632e
   10064:	20656c69 	.word	0x20656c69
   10068:	6e756f66 	.word	0x6e756f66
   1006c:	00000a64 	.word	0x00000a64
   10070:	61766e49 	.word	0x61766e49
   10074:	6164696c 	.word	0x6164696c
   10078:	676e6974 	.word	0x676e6974
   1007c:	74617020 	.word	0x74617020
   10080:	61206863 	.word	0x61206863
   10084:	78252074 	.word	0x78252074
   10088:	0000000a 	.word	0x0000000a
   1008c:	000cfc22 	.word	0x000cfc22
   10090:	33000000 	.word	0x33000000
   10094:	00656d39 	.word	0x00656d39
   10098:	00000000 	.word	0x00000000
   1009c:	52206f4e 	.word	0x52206f4e
   100a0:	6f707365 	.word	0x6f707365
   100a4:	2065736e 	.word	0x2065736e
   100a8:	45206f74 	.word	0x45206f74
   100ac:	3033394d 	.word	0x3033394d
   100b0:	6c532034 	.word	0x6c532034
   100b4:	20706565 	.word	0x20706565
   100b8:	61736944 	.word	0x61736944
   100bc:	0a656c62 	.word	0x0a656c62
   100c0:	00000000 	.word	0x00000000
   100c4:	61766e49 	.word	0x61766e49
   100c8:	2064696c 	.word	0x2064696c
   100cc:	70736552 	.word	0x70736552
   100d0:	65736e6f 	.word	0x65736e6f
   100d4:	206f7420 	.word	0x206f7420
   100d8:	33394d45 	.word	0x33394d45
   100dc:	53203430 	.word	0x53203430
   100e0:	7065656c 	.word	0x7065656c
   100e4:	73694420 	.word	0x73694420
   100e8:	656c6261 	.word	0x656c6261
   100ec:	0000000a 	.word	0x0000000a
   100f0:	52206f4e 	.word	0x52206f4e
   100f4:	6f707365 	.word	0x6f707365
   100f8:	2065736e 	.word	0x2065736e
   100fc:	45206f74 	.word	0x45206f74
   10100:	3033394d 	.word	0x3033394d
   10104:	544f2034 	.word	0x544f2034
   10108:	6e452050 	.word	0x6e452050
   1010c:	656c6261 	.word	0x656c6261
   10110:	0000000a 	.word	0x0000000a
   10114:	61766e49 	.word	0x61766e49
   10118:	2064696c 	.word	0x2064696c
   1011c:	70736552 	.word	0x70736552
   10120:	65736e6f 	.word	0x65736e6f
   10124:	206f7420 	.word	0x206f7420
   10128:	33394d45 	.word	0x33394d45
   1012c:	4f203430 	.word	0x4f203430
   10130:	45205054 	.word	0x45205054
   10134:	6c62616e 	.word	0x6c62616e
   10138:	00000a65 	.word	0x00000a65
   1013c:	52206f4e 	.word	0x52206f4e
   10140:	6f707365 	.word	0x6f707365
   10144:	2065736e 	.word	0x2065736e
   10148:	45206f74 	.word	0x45206f74
   1014c:	3033394d 	.word	0x3033394d
   10150:	61502034 	.word	0x61502034
   10154:	20686374 	.word	0x20686374
   10158:	72657551 	.word	0x72657551
   1015c:	00000a79 	.word	0x00000a79
   10160:	61766e49 	.word	0x61766e49
   10164:	2064696c 	.word	0x2064696c
   10168:	70736552 	.word	0x70736552
   1016c:	65736e6f 	.word	0x65736e6f
   10170:	206f7420 	.word	0x206f7420
   10174:	33394d45 	.word	0x33394d45
   10178:	50203430 	.word	0x50203430
   1017c:	68637461 	.word	0x68637461
   10180:	65755120 	.word	0x65755120
   10184:	000a7972 	.word	0x000a7972
   10188:	626d754e 	.word	0x626d754e
   1018c:	6f207265 	.word	0x6f207265
   10190:	61702066 	.word	0x61702066
   10194:	20686374 	.word	0x20686374
   10198:	746e6f63 	.word	0x746e6f63
   1019c:	656e6961 	.word	0x656e6961
   101a0:	6f207372 	.word	0x6f207372
   101a4:	4d45206e 	.word	0x4d45206e
   101a8:	34303339 	.word	0x34303339
   101ac:	63786520 	.word	0x63786520
   101b0:	6964756c 	.word	0x6964756c
   101b4:	5020676e 	.word	0x5020676e
   101b8:	68637461 	.word	0x68637461
   101bc:	203a3023 	.word	0x203a3023
   101c0:	000a6425 	.word	0x000a6425
   101c4:	63746150 	.word	0x63746150
   101c8:	25232068 	.word	0x25232068
   101cc:	43203a64 	.word	0x43203a64
   101d0:	61746e6f 	.word	0x61746e6f
   101d4:	72656e69 	.word	0x72656e69
   101d8:	64644120 	.word	0x64644120
   101dc:	73736572 	.word	0x73736572
   101e0:	25203d20 	.word	0x25203d20
   101e4:	58382e38 	.word	0x58382e38
   101e8:	6e6f4320 	.word	0x6e6f4320
   101ec:	6e696174 	.word	0x6e696174
   101f0:	53207265 	.word	0x53207265
   101f4:	20657a69 	.word	0x20657a69
   101f8:	3425203d 	.word	0x3425203d
   101fc:	2064342e 	.word	0x2064342e
   10200:	746e6f43 	.word	0x746e6f43
   10204:	656e6961 	.word	0x656e6961
   10208:	79542072 	.word	0x79542072
   1020c:	253d6570 	.word	0x253d6570
   10210:	6f432064 	.word	0x6f432064
   10214:	6961746e 	.word	0x6961746e
   10218:	2072656e 	.word	0x2072656e
   1021c:	253d4449 	.word	0x253d4449
   10220:	6f432064 	.word	0x6f432064
   10224:	6961746e 	.word	0x6961746e
   10228:	2072656e 	.word	0x2072656e
   1022c:	73726556 	.word	0x73726556
   10230:	3d6e6f69 	.word	0x3d6e6f69
   10234:	42206425 	.word	0x42206425
   10238:	646c6975 	.word	0x646c6975
   1023c:	6d754e20 	.word	0x6d754e20
   10240:	3d726562 	.word	0x3d726562
   10244:	55206425 	.word	0x55206425
   10248:	20726573 	.word	0x20726573
   1024c:	6c697542 	.word	0x6c697542
   10250:	754e2064 	.word	0x754e2064
   10254:	7265626d 	.word	0x7265626d
   10258:	0a64253d 	.word	0x0a64253d
   1025c:	00000000 	.word	0x00000000
   10260:	52206f4e 	.word	0x52206f4e
   10264:	6f707365 	.word	0x6f707365
   10268:	2065736e 	.word	0x2065736e
   1026c:	45206f74 	.word	0x45206f74
   10270:	3033394d 	.word	0x3033394d
   10274:	544f2034 	.word	0x544f2034
   10278:	69442050 	.word	0x69442050
   1027c:	6c626173 	.word	0x6c626173
   10280:	00000a65 	.word	0x00000a65
   10284:	61766e49 	.word	0x61766e49
   10288:	2064696c 	.word	0x2064696c
   1028c:	70736552 	.word	0x70736552
   10290:	65736e6f 	.word	0x65736e6f
   10294:	206f7420 	.word	0x206f7420
   10298:	33394d45 	.word	0x33394d45
   1029c:	4f203430 	.word	0x4f203430
   102a0:	44205054 	.word	0x44205054
   102a4:	62617369 	.word	0x62617369
   102a8:	000a656c 	.word	0x000a656c
   102ac:	52206f4e 	.word	0x52206f4e
   102b0:	6f707365 	.word	0x6f707365
   102b4:	2065736e 	.word	0x2065736e
   102b8:	45206f74 	.word	0x45206f74
   102bc:	3033394d 	.word	0x3033394d
   102c0:	6c532034 	.word	0x6c532034
   102c4:	20706565 	.word	0x20706565
   102c8:	62616e45 	.word	0x62616e45
   102cc:	000a656c 	.word	0x000a656c
   102d0:	61766e49 	.word	0x61766e49
   102d4:	2064696c 	.word	0x2064696c
   102d8:	70736552 	.word	0x70736552
   102dc:	65736e6f 	.word	0x65736e6f
   102e0:	206f7420 	.word	0x206f7420
   102e4:	33394d45 	.word	0x33394d45
   102e8:	53203430 	.word	0x53203430
   102ec:	7065656c 	.word	0x7065656c
   102f0:	616e4520 	.word	0x616e4520
   102f4:	0a656c62 	.word	0x0a656c62
   102f8:	00000000 	.word	0x00000000
   102fc:	52206f4e 	.word	0x52206f4e
   10300:	6f707365 	.word	0x6f707365
   10304:	2065736e 	.word	0x2065736e
   10308:	45206f74 	.word	0x45206f74
   1030c:	3033394d 	.word	0x3033394d
   10310:	52492034 	.word	0x52492034
   10314:	45204d41 	.word	0x45204d41
   10318:	6c62616e 	.word	0x6c62616e
   1031c:	00000a65 	.word	0x00000a65
   10320:	61766e49 	.word	0x61766e49
   10324:	2064696c 	.word	0x2064696c
   10328:	70736552 	.word	0x70736552
   1032c:	65736e6f 	.word	0x65736e6f
   10330:	206f7420 	.word	0x206f7420
   10334:	33394d45 	.word	0x33394d45
   10338:	49203430 	.word	0x49203430
   1033c:	204d4152 	.word	0x204d4152
   10340:	62616e45 	.word	0x62616e45
   10344:	000a656c 	.word	0x000a656c
   10348:	6c707041 	.word	0x6c707041
   1034c:	676e6979 	.word	0x676e6979
   10350:	74615020 	.word	0x74615020
   10354:	23206863 	.word	0x23206863
   10358:	203a6425 	.word	0x203a6425
   1035c:	746e6f43 	.word	0x746e6f43
   10360:	656e6961 	.word	0x656e6961
   10364:	79542072 	.word	0x79542072
   10368:	253d6570 	.word	0x253d6570
   1036c:	6f432064 	.word	0x6f432064
   10370:	6961746e 	.word	0x6961746e
   10374:	2072656e 	.word	0x2072656e
   10378:	253d4449 	.word	0x253d4449
   1037c:	6f432064 	.word	0x6f432064
   10380:	6961746e 	.word	0x6961746e
   10384:	2072656e 	.word	0x2072656e
   10388:	73726556 	.word	0x73726556
   1038c:	3d6e6f69 	.word	0x3d6e6f69
   10390:	42206425 	.word	0x42206425
   10394:	646c6975 	.word	0x646c6975
   10398:	6d754e20 	.word	0x6d754e20
   1039c:	3d726562 	.word	0x3d726562
   103a0:	55206425 	.word	0x55206425
   103a4:	20726573 	.word	0x20726573
   103a8:	6c697542 	.word	0x6c697542
   103ac:	754e2064 	.word	0x754e2064
   103b0:	7265626d 	.word	0x7265626d
   103b4:	0a64253d 	.word	0x0a64253d
   103b8:	00000000 	.word	0x00000000
   103bc:	52206f4e 	.word	0x52206f4e
   103c0:	6f707365 	.word	0x6f707365
   103c4:	2065736e 	.word	0x2065736e
   103c8:	45206f74 	.word	0x45206f74
   103cc:	3033394d 	.word	0x3033394d
   103d0:	61502034 	.word	0x61502034
   103d4:	20686374 	.word	0x20686374
   103d8:	74697257 	.word	0x74697257
   103dc:	00000a65 	.word	0x00000a65
   103e0:	6f727245 	.word	0x6f727245
   103e4:	65522072 	.word	0x65522072
   103e8:	6e6f7073 	.word	0x6e6f7073
   103ec:	74206573 	.word	0x74206573
   103f0:	4d45206f 	.word	0x4d45206f
   103f4:	34303339 	.word	0x34303339
   103f8:	74615020 	.word	0x74615020
   103fc:	57206863 	.word	0x57206863
   10400:	65746972 	.word	0x65746972
   10404:	0000000a 	.word	0x0000000a
   10408:	6f727245 	.word	0x6f727245
   1040c:	65522072 	.word	0x65522072
   10410:	6e6f7073 	.word	0x6e6f7073
   10414:	74206573 	.word	0x74206573
   10418:	4d45206f 	.word	0x4d45206f
   1041c:	34303339 	.word	0x34303339
   10420:	74615020 	.word	0x74615020
   10424:	43206863 	.word	0x43206863
   10428:	69746e6f 	.word	0x69746e6f
   1042c:	2065756e 	.word	0x2065756e
   10430:	78656e28 	.word	0x78656e28
   10434:	6f742074 	.word	0x6f742074
   10438:	73616c20 	.word	0x73616c20
   1043c:	61702074 	.word	0x61702074
   10440:	20686374 	.word	0x20686374
   10444:	6d676573 	.word	0x6d676573
   10448:	29746e65 	.word	0x29746e65
   1044c:	0000000a 	.word	0x0000000a
   10450:	6f727245 	.word	0x6f727245
   10454:	65522072 	.word	0x65522072
   10458:	6e6f7073 	.word	0x6e6f7073
   1045c:	74206573 	.word	0x74206573
   10460:	4d45206f 	.word	0x4d45206f
   10464:	34303339 	.word	0x34303339
   10468:	74615020 	.word	0x74615020
   1046c:	43206863 	.word	0x43206863
   10470:	69746e6f 	.word	0x69746e6f
   10474:	2065756e 	.word	0x2065756e
   10478:	73616c28 	.word	0x73616c28
   1047c:	61702074 	.word	0x61702074
   10480:	20686374 	.word	0x20686374
   10484:	6d676573 	.word	0x6d676573
   10488:	29746e65 	.word	0x29746e65
   1048c:	0000000a 	.word	0x0000000a
   10490:	33394d45 	.word	0x33394d45
   10494:	50203430 	.word	0x50203430
   10498:	68637461 	.word	0x68637461
   1049c:	70704120 	.word	0x70704120
   104a0:	6163696c 	.word	0x6163696c
   104a4:	6e6f6974 	.word	0x6e6f6974
   104a8:	69614620 	.word	0x69614620
   104ac:	0a64656c 	.word	0x0a64656c
   104b0:	00000000 	.word	0x00000000
   104b4:	33394d45 	.word	0x33394d45
   104b8:	50203430 	.word	0x50203430
   104bc:	68637461 	.word	0x68637461
   104c0:	20676e69 	.word	0x20676e69
   104c4:	72657551 	.word	0x72657551
   104c8:	61462079 	.word	0x61462079
   104cc:	64656c69 	.word	0x64656c69
   104d0:	5020202e 	.word	0x5020202e
   104d4:	68637461 	.word	0x68637461
   104d8:	64707520 	.word	0x64707520
   104dc:	20657461 	.word	0x20657461
   104e0:	20746f6e 	.word	0x20746f6e
   104e4:	6c707061 	.word	0x6c707061
   104e8:	0a646569 	.word	0x0a646569
   104ec:	00000000 	.word	0x00000000
   104f0:	33394d45 	.word	0x33394d45
   104f4:	43203430 	.word	0x43203430
   104f8:	52205550 	.word	0x52205550
   104fc:	74657365 	.word	0x74657365
   10500:	63755320 	.word	0x63755320
   10504:	73736563 	.word	0x73736563
   10508:	6c6c7566 	.word	0x6c6c7566
   1050c:	00000a79 	.word	0x00000a79
   10510:	65636552 	.word	0x65636552
   10514:	64657669 	.word	0x64657669
   10518:	5f4d4520 	.word	0x5f4d4520
   1051c:	69746341 	.word	0x69746341
   10520:	74536576 	.word	0x74536576
   10524:	45657461 	.word	0x45657461
   10528:	7265746e 	.word	0x7265746e
   1052c:	45206465 	.word	0x45206465
   10530:	746e6576 	.word	0x746e6576
   10534:	0000000a 	.word	0x0000000a
   10538:	65636552 	.word	0x65636552
   1053c:	64657669 	.word	0x64657669
   10540:	5f4d4520 	.word	0x5f4d4520
   10544:	74736554 	.word	0x74736554
   10548:	65646f4d 	.word	0x65646f4d
   1054c:	65746e45 	.word	0x65746e45
   10550:	20646572 	.word	0x20646572
   10554:	6e657645 	.word	0x6e657645
   10558:	00000a74 	.word	0x00000a74
   1055c:	65636552 	.word	0x65636552
   10560:	64657669 	.word	0x64657669
   10564:	5f4d4520 	.word	0x5f4d4520
   10568:	4e6c6148 	.word	0x4e6c6148
   1056c:	6669746f 	.word	0x6669746f
   10570:	74616369 	.word	0x74616369
   10574:	206e6f69 	.word	0x206e6f69
   10578:	6e657645 	.word	0x6e657645
   1057c:	00000a74 	.word	0x00000a74
   10580:	65636552 	.word	0x65636552
   10584:	64657669 	.word	0x64657669
   10588:	6b6e5520 	.word	0x6b6e5520
   1058c:	6e776f6e 	.word	0x6e776f6e
   10590:	6e655620 	.word	0x6e655620
   10594:	20726f64 	.word	0x20726f64
   10598:	63657053 	.word	0x63657053
   1059c:	63696669 	.word	0x63696669
   105a0:	65764520 	.word	0x65764520
   105a4:	6620746e 	.word	0x6620746e
   105a8:	206d6f72 	.word	0x206d6f72
   105ac:	33394d45 	.word	0x33394d45
   105b0:	000a3430 	.word	0x000a3430
   105b4:	44696348 	.word	0x44696348
   105b8:	61527672 	.word	0x61527672
   105bc:	426f6964 	.word	0x426f6964
   105c0:	20746f6f 	.word	0x20746f6f
   105c4:	706d6f63 	.word	0x706d6f63
   105c8:	6574656c 	.word	0x6574656c
   105cc:	0000000a 	.word	0x0000000a
   105d0:	20746f47 	.word	0x20746f47
   105d4:	74747542 	.word	0x74747542
   105d8:	30206e6f 	.word	0x30206e6f
   105dc:	65725020 	.word	0x65725020
   105e0:	000a7373 	.word	0x000a7373
   105e4:	72727543 	.word	0x72727543
   105e8:	20746e65 	.word	0x20746e65
   105ec:	50207854 	.word	0x50207854
   105f0:	7265776f 	.word	0x7265776f
   105f4:	20736920 	.word	0x20736920
   105f8:	2e33332d 	.word	0x2e33332d
   105fc:	42642035 	.word	0x42642035
   10600:	00000a6d 	.word	0x00000a6d
   10604:	72727543 	.word	0x72727543
   10608:	20746e65 	.word	0x20746e65
   1060c:	50207854 	.word	0x50207854
   10610:	7265776f 	.word	0x7265776f
   10614:	20736920 	.word	0x20736920
   10618:	2e39322d 	.word	0x2e39322d
   1061c:	42642030 	.word	0x42642030
   10620:	00000a6d 	.word	0x00000a6d
   10624:	72727543 	.word	0x72727543
   10628:	20746e65 	.word	0x20746e65
   1062c:	50207854 	.word	0x50207854
   10630:	7265776f 	.word	0x7265776f
   10634:	20736920 	.word	0x20736920
   10638:	2e37312d 	.word	0x2e37312d
   1063c:	42642039 	.word	0x42642039
   10640:	00000a6d 	.word	0x00000a6d
   10644:	72727543 	.word	0x72727543
   10648:	20746e65 	.word	0x20746e65
   1064c:	50207854 	.word	0x50207854
   10650:	7265776f 	.word	0x7265776f
   10654:	20736920 	.word	0x20736920
   10658:	2e36312d 	.word	0x2e36312d
   1065c:	42642034 	.word	0x42642034
   10660:	00000a6d 	.word	0x00000a6d
   10664:	72727543 	.word	0x72727543
   10668:	20746e65 	.word	0x20746e65
   1066c:	50207854 	.word	0x50207854
   10670:	7265776f 	.word	0x7265776f
   10674:	20736920 	.word	0x20736920
   10678:	2e34312d 	.word	0x2e34312d
   1067c:	42642036 	.word	0x42642036
   10680:	00000a6d 	.word	0x00000a6d
   10684:	72727543 	.word	0x72727543
   10688:	20746e65 	.word	0x20746e65
   1068c:	50207854 	.word	0x50207854
   10690:	7265776f 	.word	0x7265776f
   10694:	20736920 	.word	0x20736920
   10698:	2e33312d 	.word	0x2e33312d
   1069c:	42642031 	.word	0x42642031
   106a0:	00000a6d 	.word	0x00000a6d
   106a4:	72727543 	.word	0x72727543
   106a8:	20746e65 	.word	0x20746e65
   106ac:	50207854 	.word	0x50207854
   106b0:	7265776f 	.word	0x7265776f
   106b4:	20736920 	.word	0x20736920
   106b8:	2e31312d 	.word	0x2e31312d
   106bc:	42642034 	.word	0x42642034
   106c0:	00000a6d 	.word	0x00000a6d
   106c4:	72727543 	.word	0x72727543
   106c8:	20746e65 	.word	0x20746e65
   106cc:	50207854 	.word	0x50207854
   106d0:	7265776f 	.word	0x7265776f
   106d4:	20736920 	.word	0x20736920
   106d8:	392e392d 	.word	0x392e392d
   106dc:	6d426420 	.word	0x6d426420
   106e0:	0000000a 	.word	0x0000000a
   106e4:	72727543 	.word	0x72727543
   106e8:	20746e65 	.word	0x20746e65
   106ec:	50207854 	.word	0x50207854
   106f0:	7265776f 	.word	0x7265776f
   106f4:	20736920 	.word	0x20736920
   106f8:	342e382d 	.word	0x342e382d
   106fc:	6d426420 	.word	0x6d426420
   10700:	0000000a 	.word	0x0000000a
   10704:	72727543 	.word	0x72727543
   10708:	20746e65 	.word	0x20746e65
   1070c:	50207854 	.word	0x50207854
   10710:	7265776f 	.word	0x7265776f
   10714:	20736920 	.word	0x20736920
   10718:	392e362d 	.word	0x392e362d
   1071c:	6d426420 	.word	0x6d426420
   10720:	0000000a 	.word	0x0000000a
   10724:	72727543 	.word	0x72727543
   10728:	20746e65 	.word	0x20746e65
   1072c:	50207854 	.word	0x50207854
   10730:	7265776f 	.word	0x7265776f
   10734:	20736920 	.word	0x20736920
   10738:	352e352d 	.word	0x352e352d
   1073c:	6d426420 	.word	0x6d426420
   10740:	0000000a 	.word	0x0000000a
   10744:	72727543 	.word	0x72727543
   10748:	20746e65 	.word	0x20746e65
   1074c:	50207854 	.word	0x50207854
   10750:	7265776f 	.word	0x7265776f
   10754:	20736920 	.word	0x20736920
   10758:	302e342d 	.word	0x302e342d
   1075c:	6d426420 	.word	0x6d426420
   10760:	0000000a 	.word	0x0000000a
   10764:	72727543 	.word	0x72727543
   10768:	20746e65 	.word	0x20746e65
   1076c:	50207854 	.word	0x50207854
   10770:	7265776f 	.word	0x7265776f
   10774:	20736920 	.word	0x20736920
   10778:	362e322d 	.word	0x362e322d
   1077c:	6d426420 	.word	0x6d426420
   10780:	0000000a 	.word	0x0000000a
   10784:	72727543 	.word	0x72727543
   10788:	20746e65 	.word	0x20746e65
   1078c:	50207854 	.word	0x50207854
   10790:	7265776f 	.word	0x7265776f
   10794:	20736920 	.word	0x20736920
   10798:	342e312d 	.word	0x342e312d
   1079c:	6d426420 	.word	0x6d426420
   107a0:	0000000a 	.word	0x0000000a
   107a4:	72727543 	.word	0x72727543
   107a8:	20746e65 	.word	0x20746e65
   107ac:	50207854 	.word	0x50207854
   107b0:	7265776f 	.word	0x7265776f
   107b4:	20736920 	.word	0x20736920
   107b8:	342e302b 	.word	0x342e302b
   107bc:	6d426420 	.word	0x6d426420
   107c0:	0000000a 	.word	0x0000000a
   107c4:	72727543 	.word	0x72727543
   107c8:	20746e65 	.word	0x20746e65
   107cc:	50207854 	.word	0x50207854
   107d0:	7265776f 	.word	0x7265776f
   107d4:	20736920 	.word	0x20736920
   107d8:	352e322b 	.word	0x352e322b
   107dc:	6d426420 	.word	0x6d426420
   107e0:	0000000a 	.word	0x0000000a
   107e4:	72727543 	.word	0x72727543
   107e8:	20746e65 	.word	0x20746e65
   107ec:	50207854 	.word	0x50207854
   107f0:	7265776f 	.word	0x7265776f
   107f4:	20736920 	.word	0x20736920
   107f8:	362e342b 	.word	0x362e342b
   107fc:	6d426420 	.word	0x6d426420
   10800:	0000000a 	.word	0x0000000a
   10804:	72727543 	.word	0x72727543
   10808:	20746e65 	.word	0x20746e65
   1080c:	50207854 	.word	0x50207854
   10810:	7265776f 	.word	0x7265776f
   10814:	20736920 	.word	0x20736920
   10818:	322e362b 	.word	0x322e362b
   1081c:	6d426420 	.word	0x6d426420
   10820:	0000000a 	.word	0x0000000a
   10824:	61766e49 	.word	0x61766e49
   10828:	2064696c 	.word	0x2064696c
   1082c:	70207854 	.word	0x70207854
   10830:	7265776f 	.word	0x7265776f
   10834:	76656c20 	.word	0x76656c20
   10838:	000a6c65 	.word	0x000a6c65
   1083c:	6e617254 	.word	0x6e617254
   10840:	74696d73 	.word	0x74696d73
   10844:	20726574 	.word	0x20726574
   10848:	74736574 	.word	0x74736574
   1084c:	646e6520 	.word	0x646e6520
   10850:	000a6465 	.word	0x000a6465
   10854:	6e617254 	.word	0x6e617254
   10858:	74696d73 	.word	0x74696d73
   1085c:	20726574 	.word	0x20726574
   10860:	74736574 	.word	0x74736574
   10864:	61747320 	.word	0x61747320
   10868:	64657472 	.word	0x64657472
   1086c:	0000000a 	.word	0x0000000a
   10870:	6c6f7041 	.word	0x6c6f7041
   10874:	20326f6c 	.word	0x20326f6c
   10878:	64726f43 	.word	0x64726f43
   1087c:	54206f69 	.word	0x54206f69
   10880:	6f702078 	.word	0x6f702078
   10884:	20726577 	.word	0x20726577
   10888:	746e6f43 	.word	0x746e6f43
   1088c:	206c6f72 	.word	0x206c6f72
   10890:	6d617845 	.word	0x6d617845
   10894:	0a656c70 	.word	0x0a656c70
   10898:	00000000 	.word	0x00000000
   1089c:	67617355 	.word	0x67617355
   108a0:	73612065 	.word	0x73612065
   108a4:	6c656220 	.word	0x6c656220
   108a8:	0a3a776f 	.word	0x0a3a776f
   108ac:	00000000 	.word	0x00000000
   108b0:	726f6853 	.word	0x726f6853
   108b4:	72702074 	.word	0x72702074
   108b8:	20737365 	.word	0x20737365
   108bc:	74747542 	.word	0x74747542
   108c0:	32206e6f 	.word	0x32206e6f
   108c4:	206f7420 	.word	0x206f7420
   108c8:	65746e65 	.word	0x65746e65
   108cc:	78652f72 	.word	0x78652f72
   108d0:	44207469 	.word	0x44207469
   108d4:	74204d54 	.word	0x74204d54
   108d8:	65742078 	.word	0x65742078
   108dc:	000a7473 	.word	0x000a7473
   108e0:	726f6853 	.word	0x726f6853
   108e4:	72702074 	.word	0x72702074
   108e8:	20737365 	.word	0x20737365
   108ec:	74747542 	.word	0x74747542
   108f0:	31206e6f 	.word	0x31206e6f
   108f4:	206f7420 	.word	0x206f7420
   108f8:	6e616863 	.word	0x6e616863
   108fc:	74206567 	.word	0x74206567
   10900:	6f702078 	.word	0x6f702078
   10904:	20726577 	.word	0x20726577
   10908:	6576656c 	.word	0x6576656c
   1090c:	7266206c 	.word	0x7266206c
   10910:	68206d6f 	.word	0x68206d6f
   10914:	20686769 	.word	0x20686769
   10918:	6c206f74 	.word	0x6c206f74
   1091c:	0a2e776f 	.word	0x0a2e776f
   10920:	00000000 	.word	0x00000000
   10924:	40008000 	.word	0x40008000
   10928:	40008010 	.word	0x40008010
   1092c:	40008020 	.word	0x40008020
   10930:	40008030 	.word	0x40008030

00010934 <attFcnDefault>:
   10934:	000000ed 000000e9 000000e9 000000eb     ................

00010944 <attcSendReqTbl>:
   10944:	00000000 000003b9 000004c1 000004c1     ................
   10954:	000004c1 000002d9 000004c1 000002d9     ................
   10964:	000004c1 000002d9 000003eb 00000429     ............)...
   10974:	000002d9                                ....

00010978 <attcFcnIf>:
   10978:	00000375 000000e9 0000060d 00000545     u...........E...

00010988 <attcProcRspTbl>:
   10988:	00000709 00000801 0000073b 00000b05     ........;.......
   10998:	0000073b 000007f9 00000b79 000007f9     ;.......y.......
   109a8:	0000073b 000007fb 00000000 00000d11     ;...............
   109b8:	000007fb                                ....

000109bc <attsIndFcnIf>:
   109bc:	000000ed 00000e71 00000e89 00001049     ....q.......I...

000109cc <attsMinPduLen>:
   109cc:	07050300 05050305 05030305 01000002     ................
   109dc:	0000000f                                ....

000109e0 <attsFcnIf>:
   109e0:	000011a7 0000113d 0000114d 0000122b     ....=...M...+...
   109f0:	00002801                                .(..

000109f4 <dmAdvAct>:
   109f4:	00002549 0000256d 00002595 000025bd     I%..m%...%...%..
   10a04:	00002691 000024a9 000025e1              .&...$...%..

00010a10 <dmAdvFcnIf>:
   10a10:	0000250d 000025e9 000024ab              .%...%...$..

00010a1c <dmConnSpecDefaults>:
   10a1c:	00280018 07d00000 00000000              ..(.........

00010a28 <dmConnFcnIf>:
   10a28:	00002755 0000297d 00002a21              U'..})..!*..

00010a34 <dmConn2FcnIf>:
   10a34:	00003221 00002859 00002a37              !2..Y(..7*..

00010a40 <dmConnActSetMain>:
   10a40:	00002731 00002749 00002ac5 00002b43     1'..I'...*..C+..
   10a50:	00002b31 00002733                       1+..3'..

00010a58 <dmConnActSetSlave>:
   10a58:	0000303d 00003059 00002f69 0000306d     =0..Y0..i/..m0..
   10a68:	00003081 00002fc1                       .0.../..

00010a70 <dmConnStateTbl>:
   10a70:	00001001 00002002 00000000 00000000     ..... ..........
   10a80:	00002303 00000000 00010000 00011104     .#..............
   10a90:	00010001 00010001 02030300 00010300     ................
   10aa0:	00010001 21000002 00020002 00020002     .......!........
   10ab0:	24000002 24002303 00020002 00030002     ...$.#.$........
   10ac0:	00030104 22031203 25031303 00030003     ......."...%....
   10ad0:	05030400 05030003 00040004 00040004     ................
   10ae0:	00040004 04000004 04000104 00040004     ................
   10af0:	00000004                                ....

00010af4 <dmDevFcnIf>:
   10af4:	00003221 000030e5 0000313d              !2...0..=1..

00010b00 <dmHciToIdTbl>:
   10b00:	03030307 04020303 04040404 05050505     ................
   10b10:	07070705 06060607 05060606 07040405     ................
   10b20:	04070407 04050504 09090904 00000202     ................
   10b30:	070b0b0b 00020002 0000000a              ............

00010b3c <dmFcnDefault>:
   10b3c:	00003221 00003223 00003223              !2..#2..#2..

00010b48 <dmEvtCbackLen>:
   10b48:	00040004 000c0004 00040004 0024001c     ..............$.
   10b58:	000e000a 00040006 00040006 00220006     ..............".
   10b68:	00080010 00240006 00140064 00040006     ......$.d.......
   10b78:	0006000a 00060006 000c000c 000e0006     ................
   10b88:	0008000e 000a0006 000a0006 000a0006     ................
   10b98:	0004000c 00200004 00060006 00060016     ...... .........
   10ba8:	00100010 00060004 00000004              ............

00010bb4 <dmPrivAct>:
   10bb4:	00003423 00003395 000033cd 000033f5     #4...3...3...3..
   10bc4:	0000340d 00003485 00003415              .4...4...4..

00010bd0 <dmPrivFcnIf>:
   10bd0:	00003381 00003499 00003369              .3...4..i3..

00010bdc <dmSecFcnIf>:
   10bdc:	00003221 00003769 000036a5 d4f6493f     !2..i7...6..?I..
   10bec:	385fc5a3 e3b3c974 503f10d2 7b60ff4a     .._8t.....?PJ.`{
   10bfc:	99b740eb a6b89958 bd1a3ccd d203b020     .@..X....<.. ...
   10c0c:	2cbe97f2 a7832c5e b9a5f9e9 1191f4ef     ...,^,..........
   10c1c:	dbfdf4ac 480103cc e69d350e 499c80dc     .......H.5.....I
   10c2c:	6deb2a65 bf9a3263 5c15525a c2456376     e*.mc2..ZR.\vcE.
   10c3c:	2430ed8f d08e1c74 8bd28915              ..0$t.......

00010c48 <dmSecLescFcnIf>:
   10c48:	00003221 00003223 000038d9              !2..#2...8..

00010c54 <smpPktLenTbl>:
   10c54:	11070700 0b110211 02110811 00021141     ............A...

00010c64 <CSWTCH.23>:
   10c64:	00013258 000135bc 00013265 00013274     X2...5..e2..t2..
   10c74:	00013281 00013292 0001329a 000132ad     .2...2...2...2..
   10c84:	000132bd 000132cf 000132dd 000132ea     .2...2...2...2..
   10c94:	000132fc 0001330d 0001331e 0001332a     .2...3...3..*3..
   10ca4:	00013333 0001333e 00013348 00013354     33..>3..H3..T3..
   10cb4:	0001335c 0001336d 0001337f 00013391     \3..m3...3...3..
   10cc4:	0001339e 000133aa 000133b6 000133c4     .3...3...3...3..
   10cd4:	9183886c 38a5f5aa db0b3760 be83605a     l......8`7..Z`..

00010ce4 <smpScF5Key>:
   10ce4:	656c7462                                btle

00010ce8 <smpiScSmIf>:
   10ce8:	00010d88 00010f50 00010f3f              ....P...?...

00010cf4 <CSWTCH.2>:
   10cf4:	000133df 000135be 000133e6 000133f4     .3...5...3...3..
   10d04:	000133ff 00013409 00013417 00013427     .3...4...4..'4..
   10d14:	00013433 00013442 00013451 00013462     34..B4..Q4..b4..
   10d24:	00013470 0001347a 00013483 0001348d     p4..z4...4...4..
   10d34:	00013498 000134a4 000134b4 000133d5     .4...4...4...3..
   10d44:	000134c4 000134d3 000134e4 000134f2     .4...4...4...4..
   10d54:	000134ff 0001350c 0001351e 0001352b     .4...5...5..+5..
   10d64:	00013538 00013545 00013550 0001355c     85..E5..P5..\5..
   10d74:	0001356d 0001357e 00013589 00013593     m5..~5...5...5..
   10d84:	0001359e                                .5..

00010d88 <smpiScStateTbl>:
   10d88:	00010f2a 00010f24 00010f1b 00010f15     *...$...........
   10d98:	00010f0f 00010f03 00010efd 00010ef7     ................
   10da8:	00010ef1 00010eeb 00010ee5 00010ed9     ................
   10db8:	00010ed3 00010ecd 00010ec7 00010ec1     ................
   10dc8:	00010eb8 00010eb2 00010eac 00010ea6     ................
   10dd8:	00010ea0 00010e9a 00010e94 00010e8e     ................
   10de8:	00010e88 00010e82 00010e7c 00010e76     ........|...v...
   10df8:	00010e70 00010e6a 00010e64 00010e5e     p...j...d...^...
   10e08:	00010e58 00010e4f 00010e40 00010e31     X...O...@...1...
   10e18:	00010e1c                                ....

00010e1c <smpiScStateTblAttempts>:
   10e1c:	060b000f 01010a24 01000a0d 07010003     ....$...........
   10e2c:	00000024 15230600                                $....

00010e31 <smpiScStateTblKeyDist>:
   10e31:	0c152306 000e1623 0023030c 08000000              .#..#.....#....

00010e40 <smpiScStateTblEncrypt>:
   10e40:	09142308 22030200 03001c00 0b000000              .#.....".......

00010e4f <smpiScStateTblStkCalc>:
   10e4f:	0d13220b 00000924 12210b00                       ."..$....

00010e58 <smpiScStateTblCnfVerCalc2>:
   10e58:	0012210b 200b0000                                .!....

00010e5e <smpiScStateTblCnfVerCalc1>:
   10e5e:	0008200b 1f060000                                . ....

00010e64 <smpiScStateTblPairRand>:
   10e64:	00071f06 1e060000                                ......

00010e6a <smpiScStateTblPairCnf>:
   10e6a:	00111e06 1d0b0000                                ......

00010e70 <smpiScStateTblCnfCalc2>:
   10e70:	00061d0b 1c0b0000                                ......

00010e76 <smpiScStateTblCnfCalc1>:
   10e76:	00051c0b 1b040000                                ......

00010e7c <smpiScStateTblLegacyPin>:
   10e7c:	00041b04 22060000                                ......

00010e82 <smpiScStateTblVerifyDHCheck>:
   10e82:	00302206 191b0000                                ."0...

00010e88 <smpiScStateTblDhCalcF6Eb>:
   10e88:	002f191b 181b0000                                ../...

00010e8e <smpiScStateTblDhCalcF6Ea>:
   10e8e:	002e181b 171b0000                                ......

00010e94 <smpiScStateTblCalcF5LTK>:
   10e94:	002d171b 161b0000                                ..-...

00010e9a <smpiScStateTblCalcF5MacKey>:
   10e9a:	002c161b 151b0000                                ..,...

00010ea0 <smpiScStateTblCalcF5TKey>:
   10ea0:	002b151b 14180000                                ..+...

00010ea6 <smpiScStateTblCalcDHKey>:
   10ea6:	002a1418 13060000                                ..*...

00010eac <smpiScStateTblOobWaitRand>:
   10eac:	00281306 121b0000                                ..(...

00010eb2 <smpiScStateTblOobSendRand>:
   10eb2:	0027121b 0c190000                                ..'...

00010eb8 <smpiScStateTblPasskeyRepeat>:
   10eb8:	1a210c19 00002913 25101b00                       ..!..)...

00010ec1 <smpiScStateTblPasskeyCheck>:
   10ec1:	0025101b 0f060000                                ..%...

00010ec7 <smpiScStateTblPasskeyRand>:
   10ec7:	00220f06 0e060000                                .."...

00010ecd <smpiScStateTblPasskeyCnf>:
   10ecd:	00240e06 0d1b0000                                ..$...

00010ed3 <smpiScStateTblPasskeyCalc>:
   10ed3:	00230d1b 0b060000                                ..#...

00010ed9 <smprScStateTblPasskeyKeypress>:
   10ed9:	161f0b06 0c04200b 00000021              ..... ..!...

00010ee5 <smpiScStateTblJwNcWaitUser>:
   10ee5:	00291315 0a1b0000                                ..)...

00010eeb <smpiScStateTblJwNcCheck2>:
   10eeb:	001d0a1b 091b0000                                ......

00010ef1 <smpiScStateTblJwNcCheck1>:
   10ef1:	001c091b 08060000                                ......

00010ef7 <smpiScStateTblJwNcRand>:
   10ef7:	001b0806 07060000                                ......

00010efd <smpiScStateTblJwNcWaitCnf>:
   10efd:	001a0706 06120000                                ......

00010f03 <smpiScStateTblAuthSelect>:
   10f03:	13190612 11141e0b 00000026              ........&...

00010f0f <smpiScStateTblPubKey>:
   10f0f:	00180506 04040000                                ......

00010f15 <smpiScStateTblLescPin>:
   10f15:	00170404 03100000                                ......

00010f1b <smpiScStateTblModeSelect>:
   10f1b:	11000310 0000001a 10020600                       .........

00010f24 <smpiScStateTblPairRsp>:
   10f24:	00100206 01010000                                ......

00010f2a <smpiScStateTblIdle>:
   10f2a:	0a0d0101 00030100 0f00060e 0f000007     ................
   10f3a:	00000000 02000a00                                .....

00010f3f <smpiScStateTblCommon>:
   10f3f:	0702000a 00030200 02000f03 00000000     ................
	...

00010f50 <smpiScActionTbl>:
   10f50:	00004f3f 000049a3 000049b3 000049c7     ?O...I...I...I..
   10f60:	00004ffd 00005089 0000501d 0000505d     .O...P...P..]P..
   10f70:	0000507d 000052ed 00005311 00005319     }P...R...S...S..
   10f80:	00005339 000054f9 00005569 00005581     9S...T..iU...U..
   10f90:	000055a5 00005609 0000564b 000056b5     .U...V..KV...V..
   10fa0:	000056fb 00005789 000057b7 000057e1     .V...W...W...W..
   10fb0:	000057d9 000057f1 00005975 00005825     .W...W..uY..%X..
   10fc0:	00005845 00004b17 00004a39 00004b53     EX...K..9J..SK..
   10fd0:	00004b83 00005881 00005901 0000593f     .K...X...Y..?Y..
   10fe0:	00005949 0000597d 000059cf 00005a31     IY..}Y...Y..1Z..
   10ff0:	00005a89 00004bc1 00004c11 00004c51     .Z...K...L..QL..
   11000:	00004cc1 00004d31 00004d9d 00005aa9     .L..1M...M...Z..
   11010:	00005ad3                                .Z..

00011014 <smprScSmIf>:
   11014:	000110b4 0001128c 0001127a              ........z...

00011020 <CSWTCH.2>:
   11020:	000135b3 000135ba 000135c9 000135d7     .5...5...5...5..
   11030:	000135a9 000135e1 000135ef 000135fc     .5...5...5...5..
   11040:	0001360d 0001361c 0001362d 000135a9     .6...6..-6...5..
   11050:	0001363b 00013649 00013653 0001365d     ;6..I6..S6..]6..
   11060:	00013668 00013674 00013684 00013694     h6..t6...6...6..
   11070:	000135a9 000136a4 000136b3 000136c4     .5...6...6...6..
   11080:	000136d2 000136df 000136ec 000136f9     .6...6...6...6..
   11090:	00013706 00013713 00013720 0001372c     .7...7.. 7..,7..
   110a0:	0001373d 0001374e 00013759 00013763     =7..N7..Y7..c7..
   110b0:	0001376e                                n7..

000110b4 <smprScStateTbl>:
   110b4:	0001125f 00011259 00011250 00011244     _...Y...P...D...
   110c4:	0001124a 00011238 00011232 0001122c     J...8...2...,...
   110d4:	00011226 00011220 00011211 0001120b     &... ...........
   110e4:	00011205 000111ff 000111f9 000111f3     ................
   110f4:	000111ea 000111de 000111e4 000111d8     ................
   11104:	000111d2 000111cc 000111c6 000111c0     ................
   11114:	000111ba 000111b4 000111ab 000111a2     ................
   11124:	0001119c 00011196 00011190 0001118a     ................
   11134:	00011184 0001117b 0001116c 0001115d     ....{...l...]...
   11144:	00011148                                H...

00011148 <smprScStateTblAttempts>:
   11148:	060e000f 00050f24 01000a10 07010003     ....$...........
   11158:	00000024 33230600                                $....

0001115d <smprScStateTblKeyDist>:
   1115d:	0c332306 000e3423 0023030d 08000000              .#3.#4....#....

0001116c <smprScStateTblEncrypt>:
   1116c:	09322308 22030200 03001c00 0b000000              .#2....".......

0001117b <smprScStateTblStkCalc>:
   1117b:	0d31220b 00000c24 30210b00                       ."1.$....

00011184 <smprStateTblCnfVerCalc2>:
   11184:	0030210b 200b0000                                .!0...

0001118a <smprStateTblCnfVerCalc1>:
   1118a:	000b200b 1f060000                                . ....

00011190 <smprStateTblPairRand>:
   11190:	000a1f06 1e0b0000                                ......

00011196 <smprStateTblCnfCalc2>:
   11196:	00091e0b 1d0b0000                                ......

0001119c <smprStateTblCnfCalc1>:
   1119c:	00081d0b 1c040000                                ......

000111a2 <smprStateTblPinPair2>:
   111a2:	06071c04 00002f1c 051b0400                       ...../...

000111ab <smprStateTblPinPair1>:
   111ab:	06051b04 0000151b 2e221b00                       .........

000111b4 <smprScStateTblDhCalcF6Eb>:
   111b4:	002e221b 191b0000                                ."....

000111ba <smprScStateTblDhCalcF6Ea>:
   111ba:	002d191b 181b0000                                ..-...

000111c0 <smprScStateTblCalcF5LTK>:
   111c0:	002c181b 171b0000                                ..,...

000111c6 <smprScStateTblCalcF5MacKey>:
   111c6:	002b171b 161b0000                                ..+...

000111cc <smprScStateTblCalcF5TKey>:
   111cc:	002a161b 15180000                                ..*...

000111d2 <smprScStateTblCalcDHKey>:
   111d2:	00291518 14060000                                ..)...

000111d8 <smprScStateTblWaitDhCheck>:
   111d8:	00281406 131b0000                                ..(...

000111de <smprScStateTblOobSendRand>:
   111de:	0026131b 11060000                                ..&...

000111e4 <smprScStateTblOobWaitRand>:
   111e4:	00251106 0c190000                                ..%...

000111ea <smprScStateTblPasskeyRepeat>:
   111ea:	1a000c19 00002713 23101b00                       .....'...

000111f3 <smprScStateTblPasskeyCheck>:
   111f3:	0023101b 0f060000                                ..#...

000111f9 <smprScStateTblPasskeyRand>:
   111f9:	00220f06 0e1b0000                                .."...

000111ff <smprScStateTblPasskeyCalc>:
   111ff:	00210e1b 0d060000                                ..!...

00011205 <smprScStateTblPasskeyWaitCnf>:
   11205:	001e0d06 0d040000                                ......

0001120b <smprScStateTblPassWaitAuthRsp>:
   1120b:	001f0d04 0a060000                                ......

00011211 <smprScStateTblPassKeyKeypress>:
   11211:	1d1b0a06 0a161d0b 060c041c 15000000              ...............

00011220 <smprScStateTblJwNcWaitUser>:
   11220:	00271315 091b0000                                ..'...

00011226 <smprScStateTblJwNcCalcG2>:
   11226:	0019091b 08060000                                ......

0001122c <smprScStateTblJwNcWaitRand>:
   1122c:	00180806 071b0000                                ......

00011232 <smprScStateTblJwNcSetup>:
   11232:	0017071b 06120000                                ......

00011238 <smprScStateTblAuthSelect>:
   11238:	13160612 12141a0a 00000024              ........$...

00011244 <smprScStateTblPubKey>:
   11244:	00040506 03040000                                ......

0001124a <smprScStateTblLescPin>:
   1124a:	00060304 04100000                                ......

00011250 <smprScStateTblModeSelect>:
   11250:	11000410 0000001a 14020200                       .........

00011259 <smprScStateTblApiPairRsp>:
   11259:	00140202 00050000                                ......

0001125f <smprScStateTblIdle>:
   1125f:	0a100005 00080100 12000912 07130106     ................
   1126f:	00031100 00000f01 0a000000                       ...........

0001127a <smprScStateTblCommon>:
   1127a:	0702000a 00030200 02000f03 00000000     ................
	...

0001128c <smprScActionTbl>:
   1128c:	00004f3f 000049a3 000049b3 000049c7     ?O...I...I...I..
   1129c:	00005e95 00004fd9 00005e45 00004ffd     .^...O..E^...O..
   112ac:	00005089 0000501d 0000505d 0000507d     .P...P..]P..}P..
   112bc:	000052ed 00005339 00005319 00005311     .R..9S...S...S..
   112cc:	00005b3d 00005b65 00005b77 00005b7f     =[..e[..w[...[..
   112dc:	00005be9 00005c7d 00005ea9 00005f93     .[..}\...^..._..
   112ec:	00005eed 00004b17 00004a39 00004b53     .^...K..9J..SK..
   112fc:	00004b83 00005f0b 00005f61 00005f75     .K..._..a_..u_..
   1130c:	00005f1f 00005f89 00005f9b 00005fd5     ._..._..._..._..
   1131c:	00006043 0000604b 000060b9 00006115     C`..K`...`...a..
   1132c:	00006131 00004c11 00004c51 00004cc1     1a...L..QL...L..
   1133c:	00004d31 00004d9d 00006151 00005c97     1M...M..Qa...\..
   1134c:	00005cb7 00005d11 00005dd5 00005e1d     .\...]...]...^..
   1135c:	00005d69                                i]..

00011360 <smprSmIf>:
   11360:	0001136c 0001143c 0001142a              l...<...*...

0001136c <smprStateTbl>:
   1136c:	0001140f 00011409 00011400 000113f7     ................
   1137c:	000113f1 000113eb 000113e5 000113df     ................
   1138c:	000113d9 000113d0 000113c4 000113b5     ................
   1139c:	000113a0                                ....

000113a0 <smprStateTblAttempts>:
   113a0:	060c000f 00050b0c 01000a0e 07010003     ................
   113b0:	0000000c 180b0c00                                .....

000113b5 <smprStateTblKeyDist>:
   113b5:	06180b0c 000e190b 000b030d 08000000              ...............

000113c4 <smprStateTblEncrypt>:
   113c4:	09170b08 0a030200 00000000              ............

000113d0 <smprStateTblStkCalc>:
   113d0:	0d160a0b 00000a0c 15090b00                       .........

000113d9 <smprStateTblCnfVerCalc2>:
   113d9:	0015090b 080b0000                                ......

000113df <smprStateTblCnfVerCalc1>:
   113df:	0009080b 07060000                                ......

000113e5 <smprStateTblPairRand>:
   113e5:	00080706 060b0000                                ......

000113eb <smprStateTblCnfCalc2>:
   113eb:	0007060b 050b0000                                ......

000113f1 <smprStateTblCnfCalc1>:
   113f1:	0006050b 04040000                                ......

000113f7 <smprStateTblPinPair2>:
   113f7:	06050404 00001404 04030400                       .........

00011400 <smprStateTblPinPair1>:
   11400:	06040304 00001303 12020200                       .........

00011409 <smprStateTblApiPairRsp>:
   11409:	00120202 00050000                                ......

0001140f <smprStateTblIdle>:
   1140f:	0a0e0005 00080100 10000910 07110106     ................
   1141f:	00030f00 00000f01 0a000000                       ...........

0001142a <smprStateTblCommon>:
   1142a:	0702000a 00030200 02000f03 00000000     ................
	...

0001143c <smprActionTbl>:
   1143c:	00004f3f 00004f7b 00004fa1 00004fc3     ?O..{O...O...O..
   1144c:	00004fd9 00004ffd 00005089 0000501d     .O...O...P...P..
   1145c:	0000505d 0000507d 000052ed 00005311     ]P..}P...R...S..
   1146c:	00005319 00005339 00005b3d 00005b65     .S..9S..=[..e[..
   1147c:	00005b77 00005b7f 00005be9 00005c7d     w[...[...[..}\..
   1148c:	00005c97 00005cb7 00005d11 00005dd5     .\...\...]...]..
   1149c:	00005d69 00005e1d                       i]...^..

000114a4 <hciEventMask>:
   114a4:	02008890 20008000                       ....... 

000114ac <hciLeEventMask>:
   114ac:	000fffff 00000000                       ........

000114b4 <hciEventMaskPage2>:
   114b4:	00800000 00000000                       ........

000114bc <hciEvtParseFcnTbl>:
   114bc:	00000000 00007d51 00007e55 00007f61     ....Q}..U~..a...
   114cc:	00007fc3 00008079 00000000 000080a7     ....y...........
   114dc:	0000810b 0000816b 000081bf 00008261     ....k.......a...
   114ec:	000082c1 00008317 0000836d 000083c3     ........m.......
   114fc:	00008425 00008497 000084d1 00008529     %...........)...
   1150c:	0000854d 000085e3 00008611 0000863f     M...........?...
   1151c:	0000866d 000086a9 000086e5 00008573     m...........s...
   1152c:	000085ab 00008713 00008769 000087bf     ........i.......
   1153c:	0000882d 0000885b 000088b1 0000895f     -...[......._...
   1154c:	00008a21 00008ae3 00008b1b 00008b53     !...........S...
   1155c:	00008ba9 00008beb 00008c59 00008c87     ........Y.......
   1156c:	00000000 00008fdd 00008ff7 00009065     ............e...
   1157c:	000090a5 00000000 00009273 00000000     ........s.......
   1158c:	0000924d 0000924d 0000924d 0000924d     M...M...M...M...
   1159c:	0000924d                                M...

000115a0 <hciEvtCbackLen>:
   115a0:	0a242404 0a1c060e 100e080e 0a080808     .$$.............
   115b0:	06080610 06060606 16060c0c 0a08080e     ................
   115c0:	0e0e0806 0826460e 0a060a06 0c0a0420     .....F&..... ...
   115d0:	04061016 04040404 00000004              ............

000115dc <attCfg>:
   115dc:	0000000f 041e00f7                       ........

000115e4 <smpCfg>:
   115e4:	07030bb8 00000310                       ........

000115ec <g_sEm9304IOMConfigSPI>:
   115ec:	00000001 00000900 14140000              ............

000115f8 <g_sEm9304>:
	...
   11600:	0000002d 0000001b                       -.......

00011608 <g_pEm9304PatchesHCICmd>:
   11608:	0025fc27 ec06a3c6 656d3933 00000020     '.%.....39me ...
   11618:	14150b01 00020c11 34f1553c 00000230     ........<U.40...
   11628:	00000001 000000fb 00000000 00000000     ................
	...
   1164c:	0025fc27 762eab0a 656d3933 00000020     '.%....v39me ...
   1165c:	14140b01 00020c11 2fa9ffa5 00000235     .........../5...
   1166c:	00000001 00000008 00000000 00000000     ................
	...
   11690:	0025fc27 86ca4cd8 656d3933 00000020     '.%..L..39me ...
   116a0:	14160b01 00020c11 f02b5427 00000108     ........'T+.....
   116b0:	00000002 00000202 00000000 00000000     ................
	...
   116d4:	0040fc27 eb2cab73 656d3933 000001fc     '.@.s.,.39me....
   116e4:	141f0201 00000c11 63bc1bca 00805844     ...........cDX..
   116f4:	00000000 00805440 00000000 00805444     ....@T......DT..
   11704:	00000000 00805448 00000000 0080544c     ....HT......LT..
   11714:	00000000 0140fc28 4d45e600 54500075     ....(.@...EMu.PT
   11724:	00000080 54540000 00000080 54580000     ......TT......XT
   11734:	00000080 545c0000 00000080 54600000     ......\T......`T
   11744:	00000080 54640000 00000080 54680000     ......dT......hT
   11754:	00000080 006c0000 0240fc28 20af3d00     ......l.(.@..=. 
   11764:	008054cc 00000000 00805470 00000000     .T......pT......
   11774:	00805474 00000000 00805478 00000000     tT......xT......
   11784:	0080547c 00000000 00805480 00000000     |T.......T......
   11794:	00805484 00000000 00805488 0340fc28     .T.......T..(.@.
   117a4:	17e82d00 000000f2 548c0000 00000080     .-.........T....
   117b4:	54900000 00000080 54940000 00000080     ...T.......T....
   117c4:	54980000 00000080 549c0000 00000080     ...T.......T....
   117d4:	54a00000 00000080 54a40000 00000080     ...T.......T....
   117e4:	0440fc28 a27bed00 0000004f 008054a8     (.@...{.O....T..
   117f4:	00000000 008054ac 00000000 008054b0     .....T.......T..
   11804:	00000000 008054b4 00000000 008054b8     .....T.......T..
   11814:	00000000 008054bc 00000000 008054c0     .....T.......T..
   11824:	00000000 0540fc28 e0efbd00 54c400b2     ....(.@........T
   11834:	00000080 54c80000 00000080 54cc0000     .......T.......T
   11844:	00000080 54d00000 00000080 54d40000     .......T.......T
   11854:	00000080 54d80000 00000080 54dc0000     .......T.......T
   11864:	00000080 00e00000 0640fc28 68c59d00     ........(.@....h
   11874:	0080545e 00000000 008054e4 00000000     ^T.......T......
   11884:	008054e8 00000000 008054ec 00000000     .T.......T......
   11894:	008054f0 00000000 008054f4 00000000     .T.......T......
   118a4:	008054f8 00000000 008054fc 0740fc28     .T.......T..(.@.
   118b4:	a8887f00 00000066 56940000 00000080     ....f......V....
   118c4:	56980000 00000080 569c0000 00000080     ...V.......V....
   118d4:	56a00000 00000080 56a40000 00000080     ...V.......V....
   118e4:	56a80000 00000080 56ac0000 00000080     ...V.......V....
   118f4:	0831fc28 8b31ea00 0000002b 008056b0     (.1...1.+....V..
   11904:	00000000 008056b4 00000000 008056b8     .....V.......V..
   11914:	00000000 008056bc 00000000 008056c0     .....V.......V..
	...
   11938:	0025fc27 640a1033 656d3933 00000020     '.%.3..d39me ...
   11948:	142b0b01 00000c11 fbb1ddef 0000011c     ..+.............
   11958:	00000002 000004e2 00000000 00000000     ................
	...
   1197c:	0040fc27 ccb6a888 656d3933 00001304     '.@.....39me....
   1198c:	143b0502 00000c11 063e3145 0000001c     ..;.....E1>.....
   1199c:	00000022 00000023 00000024 000000a2     "...#...$.......
   119ac:	000000b8 000000c9 000000e2 00000116     ................
   119bc:	0000016f 0140fc28 28d3a000 019b008a     o...(.@....(....
   119cc:	01a10000 01a60000 01a90000 01ac0000     ................
   119dc:	01bc0000 01c60000 01dd0000 01de0000     ................
   119ec:	01df0000 01e00000 01e70000 01e80000     ................
   119fc:	01e90000 00f80000 0240fc28 21a49500     ........(.@....!
   11a0c:	0000010d 0000021a 0000026c 000002e7     ........l.......
   11a1c:	00000341 00000200 00000214 00000228     A...........(...
   11a2c:	0000023c 00000314 00000474 000004a0     <.......t.......
   11a3c:	0000052c 00000620 00000660 0340fc28     ,... ...`...(.@.
   11a4c:	17c13600 071400f0 079c0000 0a780000     .6............x.
   11a5c:	0b540000 0bf40000 0e980000 0fb80000     ..T.............
   11a6c:	0fcc0000 0fe40000 0ff80000 100c0000     ................
   11a7c:	10200000 10340000 10480000 005c0000     .. ...4...H...\.
   11a8c:	0440fc28 375e5e00 000010e6 0000107c     (.@..^^7....|...
   11a9c:	000010cc 00001174 000011e8 00001054     ....t.......T...
   11aac:	00000044 00440000 00000001 00400000     D.....D.......@.
   11abc:	00600000 0000002d 44000236 00012ccc     ..`.-...6..D.,..
   11acc:	00000246 0540fc28 5a62eb00 2c6c4497     F...(.@...bZ.Dl,
   11adc:	027e0001 2c6c4400 02c80001 00006d00     ..~..Dl,.....m..
   11aec:	035c0000 6fa04400 036c0000 2c0c4400     ..\..D.o..l..D.,
   11afc:	038c0001 2ca04400 05780001 0f386c00     .....D.,..x..l8.
   11b0c:	05a20000 00046d00 0640fc28 f008be00     .....m..(.@.....
   11b1c:	0000008a 6d0005ae 00000024 6c0005c6     .......m$......l
   11b2c:	000011c0 6c0005d2 000011b8 440005fa     .......l.......D
   11b3c:	0000df24 44000612 00012ce4 6c0006c4     $......D.,.....l
   11b4c:	0000073c 400006c8 0001bb20 0740fc28     <......@ ...(.@.
   11b5c:	34780a00 0702007e 00046d00 07080000     ..x4~....m......
   11b6c:	00246d00 07400000 11d86c00 07c00000     .m$...@..l......
   11b7c:	d08c4400 080a0001 00006d00 087a0000     .D.......m....z.
   11b8c:	d08c4400 08b80001 d08c4400 00f80001     .D.......D......
   11b9c:	0840fc28 b275e300 440008a8 0001d08c     (.@...u....D....
   11bac:	44000a30 000062e0 6d000a5a 00000000     0..D.b..Z..m....
   11bbc:	44000afc 000062e0 44000c06 000062e0     ...D.b.....D.b..
   11bcc:	44000c3c 000062e0 44000c5c 000062e0     <..D.b..\..D.b..
   11bdc:	00000dfe 0940fc28 bd69a800 13144434     ....(.@...i.4D..
   11bec:	0e100001 13144400 0eb00001 20744400     .....D.......Dt 
   11bfc:	0ef60001 70244400 0f3c0000 4c784400     .....D$p..<..DxL
   11c0c:	0f700001 2e3c4400 0fa00001 23f04400     ..p..D<......D.#
   11c1c:	10e80000 00b46c00 0a40fc28 d1d8be00     .....l..(.@.....
   11c2c:	000010d5 44001124 0001fd70 4400112e     ....$..Dp......D
   11c3c:	0001fd70 44001152 0001c888 4400115a     p...R..D....Z..D
   11c4c:	0001c888 100011b8 00000588 100011c8     ................
   11c5c:	000006cc 100011d8 000011c4 0b40fc28     ............(.@.
   11c6c:	30ee9f00 ffff0069 0000ffff c3e40000     ...0i...........
   11c7c:	45cbc1ac 02e00080 c48085c0 5802a580     ...E...........X
   11c8c:	c7c4a5c0 c3e478e0 45cbc1bc 02e00080     .....x.....E....
   11c9c:	c48085c0 5800a580 c7c4a5c0 00e478e0     .......X.....x..
   11cac:	0c40fc28 12f50500 c1bcc343 008045cb     (.@.....C....E..
   11cbc:	85c002e0 a580c480 a5c05801 78e0c7c4     .........X.....x
   11ccc:	c1a1c3ea 5b074708 008046cb 86000654     .....G.[.F..T...
   11cdc:	000140d3 0899066c 70ad0030 58c9c080     .@..l...0..p...X
   11cec:	00088622 0d40fc28 2250ac00 770c4355     "...(.@...P"UC.w
   11cfc:	812342c1 23ca7171 23541045 00071a08     .B#.qq.#E.T#....
   11d0c:	6b440000 eb128260 0af98340 702c83e0     ..Dk`...@.....,p
   11d1c:	74118283 12cc2402 030d21ca 7030a223     ...t.$...!..#.0p
   11d2c:	004d20ca 008d25ca 0e40fc28 196f0200     . M..%..(.@...o.
   11d3c:	f1ee109e 27408722 70301411 40c1a723     ....".@'..0p#..@
   11d4c:	0a9a4122 25ca096e e88813cd 40c1704c     "A..n..%....Lp.@
   11d5c:	0a2a4122 a7e4096e 40c3c100 02f80080     "A*.n......@....
   11d6c:	13e00d3f 8602a020 00c00837 0f40fc28     ?... ...7...(.@.
   11d7c:	78520f00 40c3036e 02f40080 8503a020     ..Rxn..@.... ...
   11d8c:	70001e00 02fc0080 8702f017 4fa8a7e4     ...p...........O
   11d9c:	704ca703 096e09f2 a6e240c1 874258ce     ..Lp..n..@...XB.
   11dac:	41e14002 f00758c3 a6a258cf 00028543     .@.A.X...X..C...
   11dbc:	1040fc28 412a5000 41a14049 5b0858c3     (.@..P*AI@.A.X.[
   11dcc:	78e0c7ca 258ac2e8 651d1d07 15f14608     ...x...%...e.F..
   11ddc:	080d9080 47280fb1 92031df1 08158e01     ......(G........
   11dec:	8f010411 40c3e806 00000060 00431800     .......@`.....C.
   11dfc:	0093ea09 1140fc28 82c47700 10801678     ....(.@..w..x...
   11e0c:	71047254 10021e93 f05ff290 10031e93     Tr.q......_.....
   11e1c:	d8498e20 8f0058aa b8228d21 080bb8c0      .I..X..!.".....
   11e2c:	40c10061 f00659b5 00402179 40c1ad01     a..@.Y..y!@....@
   11e3c:	8f0059b4 00238d20 1240fc28 8f6d5600     .Y.. .#.(.@..Vm.
   11e4c:	2941b807 bac00102 0887b8c0 215000a1     ..A)..........P!
   11e5c:	b9840100 20ca7054 ad000041 e8398f01     ....Tp. A.....9.
   11e6c:	083b8d14 169d011e 77141600 7104f205     ..;........w...q
   11e7c:	10181e9d 40c1f00e 00191e9d 1340fc28     .......@....(.@.
   11e8c:	de399500 20801042 88200c49 f704e1fe     ..9.B.. I. .....
   11e9c:	a8207124 1800f004 0c460003 089f034e     $q .......F.N...
   11eac:	d83d0030 008040c3 08a20868 4010096e     0.=..@..h...n..@
   11ebc:	165880a0 6f221100 b3018560 00048f00     ..X..."o`.......
   11ecc:	1440fc28 c2d8f300 8f41ad72 b5436b06     (.@.....r.A..kC.
   11edc:	4d9c581e 096e0916 21002040 d8228e20     .X.M..n.@ .! .".
   11eec:	169358a9 780f1080 00950829 08198e01     .X.....x).......
   11efc:	8f000811 013f0811 208040c1 88000d87     ......?..@. ....
   11f0c:	001e0811 1540fc28 caee6500 d8320027     ....(.@..e..'.2.
   11f1c:	40c1ae02 081159a6 712c0051 59a940c1     ...@.Y..Q.,q.@.Y
   11f2c:	d84a8e20 8f2058aa 008040c3 a8200864      .J..X ..@..d. .
   11f3c:	081d8e01 16950411 080d1080 08110050     ............P...
   11f4c:	1e9500d1 007a1043 1640fc28 1154f600     ....C.z.(.@...T.
   11f5c:	1100165e 10041e96 1df1c6c8 40c19002     ^..............@
   11f6c:	c6c8599d c1a1c3e2 40c34508 180800f0     .Y.......E.@....
   11f7c:	5aaac180 40c3a500 02f40080 c0008020     ...Z...@.... ...
   11f8c:	28497822 28450601 008b0600 1740fc28     "xI(..E(....(.@.
   11f9c:	d4012000 20c0e182 c7c2006d c3e878e0     . ..... m....x..
   11fac:	45cbc1a1 03180080 40508d00 00b0082b     ...E......P@+...
   11fbc:	08494728 71cd0071 598e5b09 5b0aa501     (GI.q..q.[.Y...[
   11fcc:	e82f8501 a70070cd 20c11800 0001b5c1     ../..p..... ....
   11fdc:	1840fc28 72a28100 10831d43 8d08f02b     (.@....rC...+...
   11fec:	00700843 5afcde12 a501598f 85015afd     C.p....Z.Y...Z..
   11ffc:	e819de11 a70070cd 21011800 1d01b5c1     .....p.....!....
   1200c:	f01910c3 30c31c03 1800a7a0 15082380     .......0.....#..
   1201c:	00101084 1940fc28 a4135f00 712cd8fa     ....(.@.._....,q
   1202c:	30c22440 58a1706c f0095990 1800a7a0     @$.0lp.X.Y......
   1203c:	f0052041 1800a7a0 de112041 c7c840c1     A ......A ...@..
   1204c:	c3e478e0 4528c1a5 4608c184 7014593a     .x....(E...F:Y.p
   1205c:	f456710c 00d7d80a 1a40fc28 9426d400     .qV.....(.@...&.
   1206c:	73145905 f252730c 8802c004 00500863     .Y.s.sR.....c.P.
   1207c:	c660e8b8 1c01be28 95003382 1c02c280     ..`.(....3......
   1208c:	b8283002 30021c03 c0619501 1c05b828     .0(....0..a.(...
   1209c:	95023002 30021c06 0007b828 1b40fc28     .0.....0(...(.@.
   120ac:	acf8fc00 30021cf9 c0629503 1c09b828     .......0..b.(...
   120bc:	95243002 b88dd813 30421c0a 1c0bb928     .0$.......B0(...
   120cc:	95653042 c363d90e 1c0dbb28 594b30c2     B0e...c.(....0KY
   120dc:	720c7114 f00af420 11041506 00419562     .q.r .......b.A.
   120ec:	1c40fc28 b797d900 95209586 5b4240c1     (.@....... ..@B[
   120fc:	0051080d 59d7710c c7c4710c 41c3c004     ..Q..q.Y.q.....A
   1210c:	27100000 00581869 00181868 0f981867     ...'i.X.h...g...
   1211c:	0f380040 07062080 720c59cb 78e0c7c4     @.8.. ...Y.r...x
   1212c:	0000c2e2 1d40fc28 3b1ba000 70841681     ....(.@....;...p
   1213c:	03200080 45084220 742cd80f 58a1706c     .. . B.E..,tlp.X
   1214c:	40c36d23 00040060 581eda20 40c34dcb     #m.@`... ..X.M.@
   1215c:	00240060 581eda20 5895d83b c6c2700c     `.$. ..X;..X.p..
   1216c:	c3e278e0 00c3c1b1 1e40fc28 16b0ac00     .x......(.@.....
   1217c:	00404229 450811c0 82409000 004041c3     )B@....E..@..A@.
   1218c:	596111b8 218ae811 1c000004 95203044     ..aY...!....D0 .
   1219c:	30421c02 1c03b928 80403042 7a60c180     ..B0(...B0@...`z
   121ac:	700c40a1 092ec7c2 00a106ee 1f40fc28     .@.p........(.@.
   121bc:	fc929400 c7c24024 c3ea78e0 46cbc1a1     ....$@...x.....F
   121cc:	06540080 48a84508 092e0ed6 860240c1     ..T..E.H.....@..
   121dc:	036108a1 58c9c080 40108622 8103c200     ..a....X"..@....
   121ec:	008041c3 a14002f8 20ca7012 00cf2005     .A....@..p. . ..
   121fc:	2040fc28 9ba37a00 70ad58cc 41b147c9     (.@ .z...X.p.G.A
   1220c:	8140f004 81017a60 e81b8700 08138020     ..@.`z...... ...
   1221c:	81432030 20a50815 04022202 e2d0a143     0 C.... ."..C...
   1222c:	68e4f7c5 f1f24110 8660a1a3 080f8041     ...h.A....`.A...
   1223c:	00e400e0 2140fc28 73550100 190468e4     ....(.@!..Us.h..
   1224c:	f1e52080 f1e3a640 e80f8600 8060702c     . ..@.......,p`.
   1225c:	80016989 74508343 10c625ca 008621ca     .i..C.Pt.%...!..
   1226c:	2179e8f8 f0020000 ed0a700c a6a2e80a     ..y!.....p......
   1227c:	40c38543 006c0001 2240fc28 613cbe00     C..@..l.(.@"..<a
   1228c:	41a10681 c7ca58c3 10011e08 78e0c7ca     ...A.X.........x
   1229c:	008040c3 41c300c0 073c0040 0d8e0459     .@.....A@.<.Y...
   122ac:	c1b1c0f1 0931882c 700c0ef0 0eb1095f     ....,.1....p_...
   122bc:	38812440 30802440 00031c00 2340fc28     @$.8@$.0....(.@#
   122cc:	b66a5c00 59ea32d5 70841600 03200080     .\j..2.Y...p.. .
   122dc:	dc1f7014 102124ca d942d83e 40c3f017     .p...$!.>.B....@
   122ec:	00040060 006041c3 24400024 1c003082     `....A`.$.@$.0..
   122fc:	59eb3243 70841600 03200080 001f7014     C2.Y...p.. ..p..
   1230c:	2440fc28 335cc100 24cadcf2 d83e1021     (.@$..\3...$!.>.
   1231c:	c280d922 1c01706c 58a13302 c0b1730c     "...lp...3.X.s..
   1232c:	7ee0c0d1 0f801808 11d80040 d8097fe0     ...~....@.......
   1233c:	c1aac3ea 30011c24 88024708 2d07218a     ....$..0.G...!.-
   1234c:	00b3081d 2540fc28 5a95e300 210006b3     ....(.@%...Z...!
   1235c:	089b23d1 08270090 08ed0410 764c0530     .#....'.....0.Lv
   1236c:	0590081f 0887f0cf e0a20cb0 008045cb     .............E..
   1237c:	f28a07bc f2a7e0b1 f4c3e09a 8d00d532     ............2...
   1238c:	46cbdb0c 00be0080 2640fc28 7b75ca00     ...F....(.@&..u{
   1239c:	68530663 b8c26832 0142226c 21847114     c.Sh2h..l"B..q.!
   123ac:	78450002 c0607825 8e00f203 17e06866     ..Ex%x`.....fh..
   123bc:	10047010 24402401 764c3080 0e6e08ce     .p...$@$.0Lv..n.
   123cc:	30c21c01 21538d20 00630080 2740fc28     ...0 .S!..c.(.@'
   123dc:	1be4f900 007108e1 21c02040 008040c3     ......q.@ .!.@..
   123ec:	880009a0 007e0859 c289b925 4002b9c1     ....Y.~.%......@
   123fc:	0849596a 76cd0071 b887c020 f021c060     jYI.q..v ...`.!.
   1240c:	c289c180 59b040e1 30801401 00c3e807     .....@.Y...0....
   1241c:	2840fc28 4aac5400 006040f8 18000000     (.@(.T.J.@`.....
   1242c:	71ad0043 72148f02 1775f47f 87391082     C..q...r..u...9.
   1243c:	716c8718 58ee4460 58f5710c 8ec0f07d     ..lq`D.X.q.X}...
   1244c:	f005c049 1c2476cd 8f023400 da25700e     I....v$..4...p%.
   1245c:	0097e090 2940fc28 6b3c7700 e09af228     ....(.@).w<k(...
   1246c:	e096f28f da26f48f 0677f091 17fc0080     ......&...w.....
   1247c:	8920f001 008045cb 8d6006de d40bb903     .. ..E....`.....
   1248c:	21847664 1c010003 214f30c2 84200083     dv.!.....0O!.. .
   1249c:	30802440 006e0816 2a40fc28 1292de00     @$.0..n.(.@*....
   124ac:	c3600eb9 40c38dc0 06bf0080 2200204a     ..`....@....J ."
   124bc:	f0c5c049 00800694 43c38520 06e00080     I....... ..C....
   124cc:	24408b84 89203080 764cbc06 2184793b     ..@$.0 ...Lv;y.!
   124dc:	79850002 00c12145 0020c160 2b40fc28     ...yE!..`. .(.@+
   124ec:	31392c00 0fd68381 1c010e2e 85203303     .,91.........3 .
   124fc:	764cc082 581e7224 2380204a f0a370cd     ..Lv$r.XJ .#.p..
   1250c:	8d6c8580 de228525 bb038c80 00032384     ..l.%."......#..
   1251c:	24847c9b 7b851002 30802440 0045764c     .|.$...{@$.0LvE.
   1252c:	2c40fc28 63046500 01432377 33821c01     (.@,.e.cw#C....3
   1253c:	0e2e0f96 8500c360 0030089d c0826822     ....`.....0."h..
   1254c:	581e764c 700cf04a 71ad58bb 58c7f088     Lv.XJ..p.X.q...X
   1255c:	30821401 7956d9e6 01047030 11000005     ...0..Vy0p......
   1256c:	00012081 2d40fc28 6df02600 20801100     . ..(.@-.&.m... 
   1257c:	208c1102 c220b922 24446873 21441040     ... ". .shD$@.D!
   1258c:	68940101 00c02105 78857845 1114c060     ...h.!..Ex.x`...
   1259c:	14012080 08c3308e 720e013e 712c8f00     . ...0..>..r..,q
   125ac:	f05b59af 0005da27 2e40fc28 9c3beb00     .Y[.'...(.@...;.
   125bc:	700cf04f 710e58bb 716c704c 8e8940c3     O..p.X.qLplq.@..
   125cc:	41c3bed6 55550055 58ee4460 b8c28d00     ...AU.UU`D.X....
   125dc:	00b10809 f003700c 58f5710c 71ad7016     .....p...q.X.p.q
   125ec:	2200204a f03ff446 00bb700c 2f40fc28     J ."F.?..p..(.@/
   125fc:	f2b98200 85065849 8d3e954e 30041c0e     ....IX..N.>....0
   1260c:	70cdb830 43c3c165 07e00080 30841c12     0..pe..C.......0
   1261c:	30041c10 2103197f 139c1f99 93239382     ...0...!......#.
   1262c:	95519304 008b1300 33821c17 001ac466     ..Q........3f...
   1263c:	3040fc28 f1e2fb00 30421c45 1c20c067     (.@0....E.B0g. .
   1264c:	95503084 bc288b6c 30841c1e 8d6d6b55     .0P.l.(....0Ukm.
   1265c:	b828b928 1c157a65 204a3103 1c162900     (.(.ez...1J .)..
   1266c:	1c223382 1c1932c2 1c1b3302 1c1d3042     .3"..2...3..B0..
   1267c:	00233002 3140fc28 e6a65100 30821c99     .0#.(.@1.Q.....0
   1268c:	c180c309 420240e1 58b044c1 40a14508     .....@.B.D.X.E.@
   1269c:	c2e4c7ca 45084628 08b2d809 712c02ee     ....(F.E......,q
   126ac:	10710e1f 268046a9 58fb1c0a 10051e00     ..q..F.&...X....
   126bc:	008041c3 000007ec 3240fc28 21935e00     .A......(.@2.^.!
   126cc:	b8a38948 8d21a900 0411092f 006040c3     H.....!./....@`.
   126dc:	15950000 0a131082 88200071 0051090b     ........q. ...Q.
   126ec:	11031d95 0a0df006 e9840111 10431d95     ..............C.
   126fc:	00031800 09158d21 00950810 3340fc28     ....!.......(.@3
   1270c:	d2baee00 10801507 0051080d 1100156e     ..........Q.n...
   1271c:	1592e88f da771083 1e002554 1ec12554     ......w.T%..T%..
   1272c:	bbc462ba 8d2159e2 10021d75 04310949     .b...Y!.u...I.1.
   1273c:	020a208a 880060b8 0823b8c2 008a0131     . ...`....#.1...
   1274c:	3440fc28 e4e97500 058a205e 900060b8     (.@4.u..^ ...`..
   1275c:	1101157a 09137704 40a10021 0d872080     z....w..!..@. ..
   1276c:	b9838820 1595a820 08151080 156e0051      ... .......Q.n.
   1277c:	70141100 0022099c 034220ca 702cd809     ...p..".. B...,p
   1278c:	00431d02 3540fc28 0c347c00 0fe61093     ..C.(.@5.|4.....
   1279c:	1d9302ae c6c41003 c2e678e0 208a4508     .........x...E. 
   127ac:	651e038a 910016fc 11011568 00210915     ...e....h.....!.
   127bc:	16fa71ed b8239080 004f2044 1d68f00b     .q....#.D O...h.
   127cc:	96001004 00041d6c 3640fc28 ccc78600     ....l...(.@6....
   127dc:	16fe104c 1d6a9100 96221004 1100156e     L.....j...".n...
   127ec:	0040080d 402071ed 10441d6e 1d95e803     ..@..q @n.D.....
   127fc:	960310c3 11011578 0000090d 410071ed     ....x........q.A
   1280c:	10041d78 908c16fb 001f9601 3740fc28     x...........(.@7
   1281c:	7474e500 0f832137 27100000 93021ee5     ..tt7!.....'....
   1282c:	101c1d99 1e022540 248a4dc8 40a10901     ....@%...M.$...@
   1283c:	16fa59a3 ef099080 00c1204f 90421efa     .Y......O ....B.
   1284c:	d8258d20 c6c658b7 0080206c 00021efa      .%..X..l ......
   1285c:	3840fc28 dc40b100 c6c69080 4508c2e6     (.@8..@........E
   1286c:	268a8802 084d1d87 66be0db0 0d10086b     ...&..M....fk...
   1287c:	0091088b 02d10a8b 08898d01 25540431     ............1.T%
   1288c:	8e001a82 204f4dfc 44cb004f 000a0080     .....MO O..D....
   1289c:	008043c3 3940fc28 25ed1600 006c0001     .C..(.@9...%..l.
   128ac:	00ff0881 d834aee0 100e1580 9400ad02     ......4.........
   128bc:	248a9360 78d40981 0a4ff042 d8080171     `..$...xB.O.q...
   128cc:	02ae0ede 1584712c 08471080 712c00b5     ....,q....G...,q
   128dc:	59a940a1 00001694 3a40fc28 699bb500     .@.Y....(.@:...i
   128ec:	e89f11a9 10831d84 0a2bf01b 15950151     ..........+.Q...
   128fc:	080b1080 080b0050 1d950111 d80810c3     ....P...........
   1290c:	02ae0ea6 712c712c 59a940a1 1900f009     ....,q,q.@.Y....
   1291c:	c6c60043 ad02d832 00a1c6c6 3b40fc28     C...2.......(.@;
   1292c:	6dcc6900 59ae4022 0e86d808 702c02ae     .i.m"@.Y......,p
   1293c:	d836c6c6 100f1580 167dad02 94801080     ..6.......}.....
   1294c:	209f9360 60980893 0981248a 631b78f4     `.. ...`.$...x.c
   1295c:	59a340a1 c2f8c6c6 208a4508 006e208a     .@.Y.....E. . n.
   1296c:	3c40fc28 0fe1f700 0100109a 1103157a     (.@<........z...
   1297c:	23502000 20821006 68c16319 0a5dbac2     . P#... .c.h..].
   1298c:	71240131 210c1014 43cb7830 80000000     1.$q...!0x.C....
   1299c:	10230c0f 489271ed 10840b0d 4c12f008     ..#..q.H.......L
   129ac:	00840b0d 3d40fc28 c8816d00 7091108e     ....(.@=.m.....p
   129bc:	442870ed 40a1f418 0d872080 b9838820     .p(D...@. .. ...
   129cc:	ef11a820 7890712c 01567070 b98f002e      ...,q.xppV.....
   129dc:	0e134876 20071044 00000f8e 667effff     vH..D.. ......~f
   129ec:	4428f003 00801000 3e40fc28 44c4cf00     ..(D....(.@>...D
   129fc:	706e207b 0837b8c2 702c0131 208040a1     { np..7.1.,p.@. 
   12a0c:	9000000a 68497990 00450a15 702c4950     .....yIh..E.PI,p
   12a1c:	0f85081b 80010000 f0094a71 702c7a22     ........qJ.."z,p
   12a2c:	0f840a0b 80010000 002f4b11 3f40fc28     .........K/.(.@?
   12a3c:	c00e7800 904827fe d992d875 2554da77     .x...'H.u...w.T%
   12a4c:	25541ed8 212f1e17 25002388 25001015     ..T%../!.#.%...%
   12a5c:	25001052 f2251094 10562742 120070cd     R..%..%.B'V..p..
   12a6c:	40e22083 bbc44103 59e24282 00021d00     . .@.A...B.Y....
   12a7c:	4040fc28 87965500 773220cc 958126cc     (.@@.U... 2w.&..
   12a8c:	157af206 71041100 10041d7a 0edd71c5     ..z....qz....q..
   12a9c:	41a193c4 2180754c 40e200ca 1000581e     ...ALu.!...@.X..
   12aac:	206c2080 18000080 270e2002 2742144f     . l ..... .'O.B'
   12abc:	00031050 4140fc28 7e337200 7166f080     P...(.@A.r3~..fq
   12acc:	14c8262f 13e30e29 120040e2 41032083     /&..)....@... .A
   12adc:	4282bbc4 0ee959e2 1d009420 157a2002     ...B.Y.. .... z.
   12aec:	71041100 10041d7a 095df1ec 214220b4     ...qz.....].. B!
   12afc:	1568204e 00921101 4240fc28 e7089300     N h.....(.@B....
   12b0c:	10801573 219f855f a5230893 b82579cc     s..._..!..#..y%.
   12b1c:	0d1a6159 a53f082e 008041c3 892007ec     Ya....?..A.... .
   12b2c:	b9c24708 082e0d06 853f4020 856360f8     .G...... @?..`c.
   12b3c:	0a0f2985 17022540 008a7bcc 4340fc28     .)..@%...{..(.@C
   12b4c:	843e1e00 08012460 782ca563 0a0f2885     ..>.`$..c.,x.(..
   12b5c:	1d806d24 40a11000 c6d859a3 76304b16     $m.....@.Y...K0v
   12b6c:	ffc506c2 0f8e2307 ffff0000 f159661e     .....#.......fY.
   12b7c:	c2e678e0 45084728 1d87268a 005758a7     .x..(G.E.&...XW.
   12b8c:	4440fc28 f6212300 03610852 8d2166be     (.@D.#!.R.a..f!.
   12b9c:	0810090b 04310945 8d0240a1 0c910845     ....E.1..@..E...
   12bac:	08478e00 70ed017f 0411098f 10801594     ..G....p........
   12bbc:	00900841 0051086f 1600154e 8000e833     A...o.Q.N...3...
   12bcc:	00008000 4540fc28 ecec6c00 085f8864     ....(.@E.l..d._.
   12bdc:	8e120151 01d0083f 0091083f 16431e12     Q...?...?.....C.
   12bec:	09c6f01b 41e108ae 1f00c6c6 c6c61043     .......A....C...
   12bfc:	ae00b8a5 59ae40a1 15b0c6c6 082f1080     .....@.Y....../.
   12c0c:	41a102f1 0080700c 4640fc28 cd6d0800     ...A.p..(.@F..m.
   12c1c:	02082193 01431900 1e12f00d d97f1603     .!....C.........
   12c2c:	10031e7b 10191d9d 10421e7a 1d9b710c     {.......z.B..q..
   12c3c:	09321fd9 40c3030e 08640080 080f8800     ..2....@..d.....
   12c4c:	8e00011f 001f0807 00c771ed 4740fc28     .........q..(.@G
   12c5c:	4f39a400 ef9058b9 0f840821 08de0000     ..9O.X..!.......
   12c6c:	599f8518 ad02d834 08938e12 702c813e     ...Y4.......>.,p
   12c7c:	59af8d00 712cc6c6 59a940a1 c3e2c6c6     ...Y..,q.@.Y....
   12c8c:	0d3ec1a1 450809ee 02b10837 0060dc3b     ..>....E7...;.`.
   12c9c:	4840fc28 7a1c0a00 1c0295a3 c3603302     (.@H...z.....3`.
   12cac:	208abb28 732c0190 1c01c280 1d6930c2     (.. ..,s.....0i.
   12cbc:	594b1019 00710813 59d7710c 712cd810     ..KY..q..q.Y..,q
   12ccc:	08ee0ece c7c2704c 2482c3e4 45cb3802     ....Lp.....$.8.E
   12cdc:	00e00080 4940fc28 4b303a00 85c00253     ....(.@I.:0KS...
   12cec:	a580c480 a5c05808 c3e4c7c4 38022482     .....X.......$.8
   12cfc:	008045cb 85c002e0 0c52c480 a58000ae     .E........R.....
   12d0c:	c7c4a5c0 c3e478e0 38022482 008045cb     .....x...$.8.E..
   12d1c:	85c002e0 0060c380 4a40fc28 45455c00     ......`.(.@J.\EE
   12d2c:	580aa5e5 c7c4a5c0 2482c3e4 45cb3802     ...X.......$.8.E
   12d3c:	02e00080 c48085c0 580ca580 c7c4a5c0     ...........X....
   12d4c:	2482c3e4 45cb300a 02e00080 c28085c0     ...$.0.E........
   12d5c:	580ea540 c7c4a5c0 0082c3e4 4b40fc28     @..X........(.@K
   12d6c:	ce315800 300a24ee 008045cb 85c002e0     .X1..$.0.E......
   12d7c:	a560c380 a5c0580f c3e4c7c4 300a2482     ..`..X.......$.0
   12d8c:	008045cb 85c002e0 a520c180 a5c05810     .E........ ..X..
   12d9c:	c3e4c7c4 38022482 008045cb 00c002e0     .....$.8.E......
   12dac:	4c40fc28 f2ada700 c28085a3 5812a540     (.@L........@..X
   12dbc:	c7c4a5c0 2482c3e4 45cb3802 02e00080     .......$.8.E....
   12dcc:	c18085c0 5813a520 c7c4a5c0 d81ec0f1     .... ..X........
   12ddc:	c0d15a1d 78e07ee0 1600c0f1 00807000     .Z...~.x.....p..
   12dec:	00005c68 4d40fc28 49abe200 00011818     h\..(.@M...I....
   12dfc:	70001600 040400f0 b8c1b83a 70001e00     ...p....:......p
   12e0c:	02500080 16005b32 00807001 710c5c68     ..P.2[...p..h\.q
   12e1c:	0fc3190c 710c5b33 712c5b3d 00f040c3     ....3[.q=[,q.@..
   12e2c:	a0200988 003f236f 4e40fc28 0a8f9a00     .. .o#?.(.@N....
   12e3c:	18e400aa c0d18040 18f07fe0 78e08040     ....@.......@..x
   12e4c:	c1a4c3e6 003f276f 003f236f 70801600     ....o'?.o#?....p
   12e5c:	5aa30080 0030088b 45cb70ed 040400f0     ...Z..0..p.E....
   12e6c:	087f8500 bf91047e 003b5a8e 4f40fc28     ....~....Z;.(.@O
   12e7c:	0c238500 46cbe81a 00000010 004040c3     ..#....F.....@@.
   12e8c:	086b10b4 208a03a5 85200008 210478fb     ..k.... .. ..x.!
   12e9c:	f402800d 47cb5a22 00000012 0007c641     ...."Z.G....A...
   12eac:	c6010000 13e50e43 c381c282 00e140c1     ....C........@..
   12ebc:	5040fc28 2f89ed00 5a864121 c602e899     (.@P.../!A.Z....
   12ecc:	744cc083 0f6e0c4e 4e984e9c 0c46c080     ..LtN.n..N.N..F.
   12edc:	744c0f6e 30801401 825108d5 30801402     n.Lt...0..Q....0
   12eec:	8ed108cd 30801403 5a7660d8 ed835ae7     .......0.`vZ.Z..
   12efc:	003a5a21 5140fc28 8528f400 0d8e0f06     !Z:.(.@Q..(.....
   12f0c:	5a37702c 0d8e0f32 c0e678e0 008041c3     ,p7Z2....x...A..
   12f1c:	11000268 daff00c0 f6857714 0432080b     h........w....2.
   12f2c:	da0f4200 1600a940 00807003 700c5c68     .B..@....p..h\.p
   12f3c:	71cd7f4d 008a8bab 5240fc28 8c3fd600     M..q....(.@R..?.
   12f4c:	702c8b3e 00000007 081f7104 0cfd0345     >.,p.....q..E...
   12f5c:	631a902e 00c21204 90a20ff1 10022e00     ...c............
   12f6c:	7945792f ab2cf1f2 0000c4c6 00400588     /yEy..,.......@.
   12f7c:	02402026 00000001 00000000 533bfc28     & @.........(.;S
   12f8c:	ce7cd000 06cc0062 00000040 00000000     ..|.b...@.......
   12f9c:	00000000 11c40000 00000040 00000000     ........@.......
   12fac:	00000000 4e490000 00000249 ffbc0060     ......INI...`...
   12fbc:	0000ffff 00000000 00000000 00000000     ................

00012fcc <calc128Zeros>:
	...

00012fdc <CSWTCH.4>:
   12fdc:	016e3600 00b71b00 007a1200 005b8d80     .6n.......z...[.
   12fec:	00493e00 003d0900 003450db 002dc6c0     .>I...=..P4...-.
   12ffc:	6d695443 69207265 7265746e 74707572     CTimer interrupt
   1300c:	6d756e20 20726562 2074756f 7220666f      number out of r
   1301c:	65676e61 0000002e 2e5c2e2e 6d615c2e     ange......\..\am
   1302c:	6c61685f 6974635f 2e72656d 00000063     _hal_ctimer.c...
   1303c:	20646142 4d495443 72205245 00646165     Bad CTIMER read.
   1304c:	204d4f49 74697277 68742065 68736572     IOM write thresh
   1305c:	20646c6f 206f6f74 2e676962 00000000     old too big.....
   1306c:	204d4f49 64616572 72687420 6f687365     IOM read thresho
   1307c:	7420646c 62206f6f 002e6769 204d4f49     ld too big..IOM 
   1308c:	74697277 68742065 68736572 20646c6f     write threshold 
   1309c:	206f6f74 6c616d73 00002e6c 204d4f49     too small...IOM 
   130ac:	64616572 72687420 6f687365 7420646c     read threshold t
   130bc:	73206f6f 6c6c616d 0000002e 69797254     oo small....Tryi
   130cc:	7420676e 6f64206f 30206120 74796220     ng to do a 0 byt
   130dc:	72742065 61736e61 6f697463 0000006e     e transaction...
   130ec:	2e5c2e2e 6d615c2e 6c61685f 6d6f695f     ..\..\am_hal_iom
   130fc:	0000632e 20433249 6e617274 72656673     .c..I2C transfer
   1310c:	6f6f7420 67696220 0000002e 20656854      too big....The 
   1311c:	6f666966 656f6420 74276e73 6e6f6320     fifo doesn't con
   1312c:	6e696174 65687420 71657220 74736575     tain the request
   1313c:	6e206465 65626d75 666f2072 74796220     ed number of byt
   1314c:	002e7365 204d4f49 43444d43 7720504d     es..IOM CMDCMP w
   1315c:	6e207361 7320746f 006e6565 20656854     as not seen.The 
   1316c:	204d4f49 75657571 73692065 6c756620     IOM queue is ful
   1317c:	41202e6c 636f6c6c 20657461 65726f6d     l. Allocate more
   1318c:	6f6d656d 74207972 6874206f 4f492065     memory to the IO
   1319c:	7571204d 2c657565 20726f20 6f6c6c61     M queue, or allo
   131ac:	74692077 726f6d20 6d697465 6f742065     w it moretime to
   131bc:	706d6520 62207974 65777465 74206e65      empty between t
   131cc:	736e6172 69746361 2e736e6f 00000000     ransactions.....
   131dc:	20495053 6e617274 72656673 6f6f7420     SPI transfer too
   131ec:	67696220 0000002e 20656854 6f666966      big....The fifo
   131fc:	756f6320 276e646c 69662074 68742074      couldn't fit th
   1320c:	65722065 73657571 20646574 626d756e     e requested numb
   1321c:	6f207265 79622066 00736574 69797254     er of bytes.Tryi
   1322c:	7420676e 7375206f 6e612065 4d4f4920     ng to use an IOM
   1323c:	646f6d20 20656c75 74616874 656f6420      module that doe
   1324c:	74276e73 69786520 002e7473 5f495041     sn't exist..API_
   1325c:	52494150 5145525f 49504100 4e41435f     PAIR_REQ.API_CAN
   1326c:	5f4c4543 00514552 5f495041 48545541     CEL_REQ.API_AUTH
   1327c:	5053525f 49504100 4345535f 54495255     _RSP.API_SECURIT
   1328c:	45525f59 4d430051 4b505f44 4d430054     Y_REQ.CMD_PKT.CM
   1329c:	41505f44 4e495249 41465f47 44454c49     D_PAIRING_FAILED
   132ac:	5f4d4400 52434e45 5f545059 4c504d43     .DM_ENCRYPT_CMPL
   132bc:	5f4d4400 52434e45 5f545059 4c494146     .DM_ENCRYPT_FAIL
   132cc:	44004445 4f435f4d 435f4e4e 45534f4c     ED.DM_CONN_CLOSE
   132dc:	46535700 5345415f 504d435f 4e49004c     .WSF_AES_CMPL.IN
   132ec:	45535f54 4e5f444e 5f545845 0059454b     T_SEND_NEXT_KEY.
   132fc:	5f544e49 5f58414d 45545441 5354504d     INT_MAX_ATTEMPTS
   1330c:	544e4900 4941505f 474e4952 504d435f     .INT_PAIRING_CMP
   1331c:	4e49004c 49545f54 554f454d 4e490054     L.INT_TIMEOUT.IN
   1332c:	454c5f54 49004353 4c5f544e 43414745     T_LESC.INT_LEGAC
   1333c:	4e490059 574a5f54 00434e5f 5f544e49     Y.INT_JW_NC.INT_
   1334c:	53534150 0059454b 5f544e49 00424f4f     PASSKEY.INT_OOB.
   1335c:	5f495041 52455355 4e4f435f 4d524946     API_USER_CONFIRM
   1336c:	49504100 4553555f 454b5f52 45525059     .API_USER_KEYPRE
   1337c:	41005353 4b5f4950 52505945 5f535345     SS.API_KEYPRESS_
   1338c:	4c504d43 46535700 4343455f 504d435f     CMPL.WSF_ECC_CMP
   1339c:	4e49004c 4b505f54 58454e5f 4e490054     L.INT_PK_NEXT.IN
   133ac:	4b505f54 504d435f 5357004c 4d435f46     T_PK_CMPL.WSF_CM
   133bc:	435f4341 004c504d 435f4844 4b434548     AC_CMPL.DH_CHECK
   133cc:	4941465f 4552554c 555f4900 6f6e6b6e     _FAILURE.I_Unkno
   133dc:	49006e77 4c44495f 5f490045 45444f4d     wn.I_IDLE.I_MODE
   133ec:	4c45535f 00544345 454c5f49 505f4353     _SELECT.I_LESC_P
   133fc:	49004e49 4255505f 59454b5f 415f4900     IN.I_PUB_KEY.I_A
   1340c:	5f485455 454c4553 49005443 4e574a5f     UTH_SELECT.I_JWN
   1341c:	41575f43 435f5449 4900464e 4e574a5f     C_WAIT_CNF.I_JWN
   1342c:	41525f43 4900444e 4e574a5f 48435f43     C_RAND.I_JWNC_CH
   1343c:	5f4b4345 5f490031 434e574a 4548435f     ECK_1.I_JWNC_CHE
   1344c:	325f4b43 4a5f4900 5f434e57 54494157     CK_2.I_JWNC_WAIT
   1345c:	4553555f 5f490052 4b5f4b50 52505945     _USER.I_PK_KEYPR
   1346c:	00535345 4b505f49 4c41435f 5f490043     ESS.I_PK_CALC.I_
   1347c:	435f4b50 4900464e 5f4b505f 444e4152     PK_CNF.I_PK_RAND
   1348c:	505f4900 48435f4b 004b4345 4b505f49     .I_PK_CHECK.I_PK
   1349c:	5045525f 00544145 4f4f5f49 45535f42     _REPEAT.I_OOB_SE
   134ac:	525f444e 00444e41 4f4f5f49 41575f42     ND_RAND.I_OOB_WA
   134bc:	525f5449 00444e41 41435f49 465f434c     IT_RAND.I_CALC_F
   134cc:	4b545f35 49005945 4c41435f 35465f43     5_TKEY.I_CALC_F5
   134dc:	43414d5f 0059454b 41435f49 465f434c     _MACKEY.I_CALC_F
   134ec:	544c5f35 5f49004b 434c4143 5f36465f     5_LTK.I_CALC_F6_
   134fc:	49004145 4c41435f 36465f43 0042455f     EA.I_CALC_F6_EB.
   1350c:	45565f49 59464952 5f48445f 43454843     I_VERIFY_DH_CHEC
   1351c:	5f49004b 4147454c 505f5943 49004e49     K.I_LEGACY_PIN.I
   1352c:	464e435f 4c41435f 00315f43 4e435f49     _CNF_CALC_1.I_CN
   1353c:	41435f46 325f434c 505f4900 5f524941     F_CALC_2.I_PAIR_
   1354c:	00464e43 41505f49 525f5249 00444e41     CNF.I_PAIR_RAND.
   1355c:	4e435f49 45565f46 41435f52 315f434c     I_CNF_VER_CALC_1
   1356c:	435f4900 565f464e 435f5245 5f434c41     .I_CNF_VER_CALC_
   1357c:	5f490032 5f4b5453 434c4143 455f4900     2.I_STK_CALC.I_E
   1358c:	5952434e 49005450 59454b5f 5349445f     NCRYPT.I_KEY_DIS
   1359c:	5f490054 45545441 5354504d 555f5200     T.I_ATTEMPTS.R_U
   135ac:	6f6e6b6e 52006e77 4c44495f 5f520045     nknown.R_IDLE.R_
   135bc:	5f495041 52494150 5053525f 4d5f5200     API_PAIR_RSP.R_M
   135cc:	5f45444f 454c4553 52005443 4255505f     ODE_SELECT.R_PUB
   135dc:	59454b5f 415f5200 5f485455 454c4553     _KEY.R_AUTH_SELE
   135ec:	52005443 4e574a5f 45535f43 00505554     CT.R_JWNC_SETUP.
   135fc:	574a5f52 575f434e 5f544941 444e4152     R_JWNC_WAIT_RAND
   1360c:	4a5f5200 5f434e57 434c4143 0032475f     .R_JWNC_CALC_G2.
   1361c:	574a5f52 575f434e 5f544941 52455355     R_JWNC_WAIT_USER
   1362c:	505f5200 454b5f4b 45525059 52005353     .R_PK_KEYPRESS.R
   1363c:	5f4b505f 54494157 464e435f 505f5200     _PK_WAIT_CNF.R_P
   1364c:	41435f4b 5200434c 5f4b505f 444e4152     K_CALC.R_PK_RAND
   1365c:	505f5200 48435f4b 004b4345 4b505f52     .R_PK_CHECK.R_PK
   1366c:	5045525f 00544145 4f4f5f52 45535f42     _REPEAT.R_OOB_SE
   1367c:	525f444e 00444e41 4f4f5f52 41575f42     ND_RAND.R_OOB_WA
   1368c:	525f5449 00444e41 41575f52 445f5449     IT_RAND.R_WAIT_D
   1369c:	48435f48 004b4345 41435f52 465f434c     H_CHECK.R_CALC_F
   136ac:	4b545f35 52005945 4c41435f 35465f43     5_TKEY.R_CALC_F5
   136bc:	43414d5f 0059454b 41435f52 465f434c     _MACKEY.R_CALC_F
   136cc:	544c5f35 5f52004b 434c4143 5f36465f     5_LTK.R_CALC_F6_
   136dc:	52004145 4c41435f 36465f43 0042455f     EA.R_CALC_F6_EB.
   136ec:	49505f52 41505f4e 315f5249 505f5200     R_PIN_PAIR_1.R_P
   136fc:	505f4e49 5f524941 5f520032 5f464e43     IN_PAIR_2.R_CNF_
   1370c:	434c4143 5200315f 464e435f 4c41435f     CALC_1.R_CNF_CAL
   1371c:	00325f43 41505f52 525f5249 00444e41     C_2.R_PAIR_RAND.
   1372c:	4e435f52 45565f46 41435f52 315f434c     R_CNF_VER_CALC_1
   1373c:	435f5200 565f464e 435f5245 5f434c41     .R_CNF_VER_CALC_
   1374c:	5f520032 5f4b5453 434c4143 455f5200     2.R_STK_CALC.R_E
   1375c:	5952434e 52005450 59454b5f 5349445f     NCRYPT.R_KEY_DIS
   1376c:	5f520054 45545441 5354504d 00000000     T.R_ATTEMPTS....
