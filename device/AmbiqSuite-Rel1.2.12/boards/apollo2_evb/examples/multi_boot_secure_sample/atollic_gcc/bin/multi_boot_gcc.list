
multi_boot_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002504  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000060  10001000  00002504  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00002294  10001060  00002564  00021060  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021060  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000f24f  00000000  00000000  00021097  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002ca7  00000000  00000000  000302e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000990  00000000  00000000  00032f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001428  00000000  00000000  0003391d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005853  00000000  00000000  00034d45  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003cfd  00000000  00000000  0003a598  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  0003e295  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001b90  00000000  00000000  0003e314  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000043c4  00000000  00000000  0003fea4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 81 16 00 00 e9 16 00 00 ef 16 00 00     ................
      10:	ef 16 00 00 ef 16 00 00 ef 16 00 00 00 00 00 00     ................
	...
      2c:	f5 16 00 00 f5 16 00 00 00 00 00 00 f5 16 00 00     ................
      3c:	f5 16 00 00 f5 16 00 00 f5 16 00 00 f5 16 00 00     ................
      4c:	f5 16 00 00 f5 16 00 00 f5 16 00 00 f5 16 00 00     ................
      5c:	f5 16 00 00 f5 16 00 00 f5 16 00 00 f5 16 00 00     ................
      6c:	f5 16 00 00 89 11 00 00 f5 16 00 00 b9 11 00 00     ................
      7c:	f5 16 00 00 f5 16 00 00 f5 16 00 00 f5 16 00 00     ................
      8c:	f5 16 00 00 f5 16 00 00 f5 16 00 00 f5 16 00 00     ................
      9c:	f5 16 00 00 f5 16 00 00 f5 16 00 00 f5 16 00 00     ................
      ac:	f5 16 00 00 f5 16 00 00 f5 16 00 00 f5 16 00 00     ................
      bc:	f5 16 00 00                                         ....

000000c0 <am_bootloader_fast_crc32>:
//! @return 32-bit CRC value.
//
//*****************************************************************************
uint32_t
am_bootloader_fast_crc32(const void *pvData, uint32_t ui32NumBytes)
{
      c0:	b480      	push	{r7}
      c2:	b087      	sub	sp, #28
      c4:	af00      	add	r7, sp, #0
      c6:	6078      	str	r0, [r7, #4]
      c8:	6039      	str	r1, [r7, #0]
    uint32_t ui32CRC, ui32CRCIndex, i;
    uint8_t *pui8Data;

    ui32CRC = 0;
      ca:	2300      	movs	r3, #0
      cc:	617b      	str	r3, [r7, #20]
    pui8Data = (uint8_t *) pvData;
      ce:	687b      	ldr	r3, [r7, #4]
      d0:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < ui32NumBytes; i++ )
      d2:	2300      	movs	r3, #0
      d4:	613b      	str	r3, [r7, #16]
      d6:	e013      	b.n	100 <am_bootloader_fast_crc32+0x40>
    {
        ui32CRCIndex = pui8Data[i] ^ (ui32CRC >> 24);
      d8:	68fa      	ldr	r2, [r7, #12]
      da:	693b      	ldr	r3, [r7, #16]
      dc:	4413      	add	r3, r2
      de:	781b      	ldrb	r3, [r3, #0]
      e0:	461a      	mov	r2, r3
      e2:	697b      	ldr	r3, [r7, #20]
      e4:	0e1b      	lsrs	r3, r3, #24
      e6:	4053      	eors	r3, r2
      e8:	60bb      	str	r3, [r7, #8]
        ui32CRC = (ui32CRC << 8) ^ g_pui32CRC32Table[ui32CRCIndex];
      ea:	697b      	ldr	r3, [r7, #20]
      ec:	021a      	lsls	r2, r3, #8
      ee:	490a      	ldr	r1, [pc, #40]	; (118 <am_bootloader_fast_crc32+0x58>)
      f0:	68bb      	ldr	r3, [r7, #8]
      f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      f6:	4053      	eors	r3, r2
      f8:	617b      	str	r3, [r7, #20]
    for (i = 0; i < ui32NumBytes; i++ )
      fa:	693b      	ldr	r3, [r7, #16]
      fc:	3301      	adds	r3, #1
      fe:	613b      	str	r3, [r7, #16]
     100:	693a      	ldr	r2, [r7, #16]
     102:	683b      	ldr	r3, [r7, #0]
     104:	429a      	cmp	r2, r3
     106:	d3e7      	bcc.n	d8 <am_bootloader_fast_crc32+0x18>
    }

    return ui32CRC;
     108:	697b      	ldr	r3, [r7, #20]
}
     10a:	4618      	mov	r0, r3
     10c:	371c      	adds	r7, #28
     10e:	46bd      	mov	sp, r7
     110:	f85d 7b04 	ldr.w	r7, [sp], #4
     114:	4770      	bx	lr
     116:	bf00      	nop
     118:	00001fac 	.word	0x00001fac

0000011c <am_bootloader_partial_crc32>:
//
//*****************************************************************************
void
am_bootloader_partial_crc32(const void *pvData, uint32_t ui32NumBytes,
                            uint32_t *pui32CRC)
{
     11c:	b480      	push	{r7}
     11e:	b089      	sub	sp, #36	; 0x24
     120:	af00      	add	r7, sp, #0
     122:	60f8      	str	r0, [r7, #12]
     124:	60b9      	str	r1, [r7, #8]
     126:	607a      	str	r2, [r7, #4]
    uint32_t ui32CRCIndex, i;
    uint8_t *pui8Data;

    uint32_t ui32TempCRC = *pui32CRC;
     128:	687b      	ldr	r3, [r7, #4]
     12a:	681b      	ldr	r3, [r3, #0]
     12c:	61bb      	str	r3, [r7, #24]

    pui8Data = (uint8_t *) pvData;
     12e:	68fb      	ldr	r3, [r7, #12]
     130:	617b      	str	r3, [r7, #20]

    for ( i = 0; i < ui32NumBytes; i++ )
     132:	2300      	movs	r3, #0
     134:	61fb      	str	r3, [r7, #28]
     136:	e013      	b.n	160 <am_bootloader_partial_crc32+0x44>
    {
        ui32CRCIndex = pui8Data[i] ^ (ui32TempCRC >> 24);
     138:	697a      	ldr	r2, [r7, #20]
     13a:	69fb      	ldr	r3, [r7, #28]
     13c:	4413      	add	r3, r2
     13e:	781b      	ldrb	r3, [r3, #0]
     140:	461a      	mov	r2, r3
     142:	69bb      	ldr	r3, [r7, #24]
     144:	0e1b      	lsrs	r3, r3, #24
     146:	4053      	eors	r3, r2
     148:	613b      	str	r3, [r7, #16]
        ui32TempCRC = (ui32TempCRC << 8) ^ g_pui32CRC32Table[ui32CRCIndex];
     14a:	69bb      	ldr	r3, [r7, #24]
     14c:	021a      	lsls	r2, r3, #8
     14e:	490b      	ldr	r1, [pc, #44]	; (17c <am_bootloader_partial_crc32+0x60>)
     150:	693b      	ldr	r3, [r7, #16]
     152:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
     156:	4053      	eors	r3, r2
     158:	61bb      	str	r3, [r7, #24]
    for ( i = 0; i < ui32NumBytes; i++ )
     15a:	69fb      	ldr	r3, [r7, #28]
     15c:	3301      	adds	r3, #1
     15e:	61fb      	str	r3, [r7, #28]
     160:	69fa      	ldr	r2, [r7, #28]
     162:	68bb      	ldr	r3, [r7, #8]
     164:	429a      	cmp	r2, r3
     166:	d3e7      	bcc.n	138 <am_bootloader_partial_crc32+0x1c>
    }

    *pui32CRC = ui32TempCRC;
     168:	687b      	ldr	r3, [r7, #4]
     16a:	69ba      	ldr	r2, [r7, #24]
     16c:	601a      	str	r2, [r3, #0]
}
     16e:	bf00      	nop
     170:	3724      	adds	r7, #36	; 0x24
     172:	46bd      	mov	sp, r7
     174:	f85d 7b04 	ldr.w	r7, [sp], #4
     178:	4770      	bx	lr
     17a:	bf00      	nop
     17c:	00001fac 	.word	0x00001fac

00000180 <am_bootloader_flash_check>:
//! @return true if the image is safe to run.
//
//*****************************************************************************
bool
am_bootloader_flash_check(am_bootloader_image_t *psImage)
{
     180:	b580      	push	{r7, lr}
     182:	b092      	sub	sp, #72	; 0x48
     184:	af00      	add	r7, sp, #0
     186:	6078      	str	r0, [r7, #4]
    am_hal_mcuctrl_device_t sDevice;
    uint32_t ui32ResetVector, ui32StackPointer, ui32LinkAddress;

    ui32LinkAddress = (uint32_t) psImage->pui32LinkAddress;
     188:	687b      	ldr	r3, [r7, #4]
     18a:	681b      	ldr	r3, [r3, #0]
     18c:	63fb      	str	r3, [r7, #60]	; 0x3c

    // Get chip specific info
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &sDevice);
#else
    am_hal_mcuctrl_device_info_get(&sDevice);
     18e:	f107 030c 	add.w	r3, r7, #12
     192:	4618      	mov	r0, r3
     194:	f001 fbc6 	bl	1924 <am_hal_mcuctrl_device_info_get>

    //
    // Make sure the link address is in flash.
    //
    if (((AM_HAL_FLASH_ADDR != 0) && (ui32LinkAddress < AM_HAL_FLASH_ADDR)) ||
        (ui32LinkAddress >= (AM_HAL_FLASH_ADDR + sDevice.ui32FlashSize)))
     198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    if (((AM_HAL_FLASH_ADDR != 0) && (ui32LinkAddress < AM_HAL_FLASH_ADDR)) ||
     19a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     19c:	429a      	cmp	r2, r3
     19e:	d801      	bhi.n	1a4 <am_bootloader_flash_check+0x24>
    {
        DPRINTF(("Link address outside of flash. 0x%08x\r\n", ui32LinkAddress));
        return false;
     1a0:	2300      	movs	r3, #0
     1a2:	e03f      	b.n	224 <am_bootloader_flash_check+0xa4>

    //
    // Check to see if the image was encrypted. If it was, these tests won't
    // work. We'll need to just skip them.
    //
    if ( psImage->bEncrypted == false )
     1a4:	687b      	ldr	r3, [r7, #4]
     1a6:	69db      	ldr	r3, [r3, #28]
     1a8:	2b00      	cmp	r3, #0
     1aa:	d108      	bne.n	1be <am_bootloader_flash_check+0x3e>
    {
        ui32StackPointer = psImage->pui32LinkAddress[0];
     1ac:	687b      	ldr	r3, [r7, #4]
     1ae:	681b      	ldr	r3, [r3, #0]
     1b0:	681b      	ldr	r3, [r3, #0]
     1b2:	643b      	str	r3, [r7, #64]	; 0x40
        ui32ResetVector = psImage->pui32LinkAddress[1];
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	681b      	ldr	r3, [r3, #0]
     1b8:	685b      	ldr	r3, [r3, #4]
     1ba:	647b      	str	r3, [r7, #68]	; 0x44
     1bc:	e005      	b.n	1ca <am_bootloader_flash_check+0x4a>
    }
    else
    {
        ui32StackPointer = (uint32_t) psImage->pui32StackPointer;
     1be:	687b      	ldr	r3, [r7, #4]
     1c0:	695b      	ldr	r3, [r3, #20]
     1c2:	643b      	str	r3, [r7, #64]	; 0x40
        ui32ResetVector = (uint32_t) psImage->pui32ResetVector;
     1c4:	687b      	ldr	r3, [r7, #4]
     1c6:	699b      	ldr	r3, [r3, #24]
     1c8:	647b      	str	r3, [r7, #68]	; 0x44
    }

    //
    // Make sure the stack is in SRAM.
    //
    if (((SRAM_BASEADDR != 0) && (ui32StackPointer < SRAM_BASEADDR))
     1ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     1cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
     1d0:	d305      	bcc.n	1de <am_bootloader_flash_check+0x5e>
        || (ui32StackPointer >= (SRAM_BASEADDR + sDevice.ui32SRAMSize)))
     1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
     1d4:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
     1d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     1da:	429a      	cmp	r2, r3
     1dc:	d801      	bhi.n	1e2 <am_bootloader_flash_check+0x62>
    {
        DPRINTF(("Stack not in SRAM 0x%08x\r\n", ui32StackPointer));
        return false;
     1de:	2300      	movs	r3, #0
     1e0:	e020      	b.n	224 <am_bootloader_flash_check+0xa4>
    }

    //
    // Make sure the reset vector points somewhere in the image.
    //
    if (ui32ResetVector < ui32LinkAddress ||
     1e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
     1e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     1e6:	429a      	cmp	r2, r3
     1e8:	d306      	bcc.n	1f8 <am_bootloader_flash_check+0x78>
        ui32ResetVector >= (ui32LinkAddress + psImage->ui32NumBytes))
     1ea:	687b      	ldr	r3, [r7, #4]
     1ec:	685a      	ldr	r2, [r3, #4]
     1ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     1f0:	441a      	add	r2, r3
    if (ui32ResetVector < ui32LinkAddress ||
     1f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     1f4:	429a      	cmp	r2, r3
     1f6:	d801      	bhi.n	1fc <am_bootloader_flash_check+0x7c>
    {
        DPRINTF(("Reset Vector not in image 0x%08x\r\n", ui32ResetVector));
        return false;
     1f8:	2300      	movs	r3, #0
     1fa:	e013      	b.n	224 <am_bootloader_flash_check+0xa4>
    }

    //
    // If the image isn't encrypted, run a CRC32.
    //
    if ( psImage->bEncrypted == false )
     1fc:	687b      	ldr	r3, [r7, #4]
     1fe:	69db      	ldr	r3, [r3, #28]
     200:	2b00      	cmp	r3, #0
     202:	d10e      	bne.n	222 <am_bootloader_flash_check+0xa2>
    {
        //
        // Run a CRC on the image to make sure it matches the stored checksum
        // value.
        //
        if ( am_bootloader_fast_crc32(psImage->pui32LinkAddress, psImage->ui32NumBytes) !=
     204:	687b      	ldr	r3, [r7, #4]
     206:	681a      	ldr	r2, [r3, #0]
     208:	687b      	ldr	r3, [r7, #4]
     20a:	685b      	ldr	r3, [r3, #4]
     20c:	4619      	mov	r1, r3
     20e:	4610      	mov	r0, r2
     210:	f7ff ff56 	bl	c0 <am_bootloader_fast_crc32>
     214:	4602      	mov	r2, r0
             psImage->ui32CRC )
     216:	687b      	ldr	r3, [r7, #4]
     218:	689b      	ldr	r3, [r3, #8]
        if ( am_bootloader_fast_crc32(psImage->pui32LinkAddress, psImage->ui32NumBytes) !=
     21a:	429a      	cmp	r2, r3
     21c:	d001      	beq.n	222 <am_bootloader_flash_check+0xa2>
        {
            DPRINTF(("Bad CRC 0x%08x\r\n", psImage->ui32CRC));
            return false;
     21e:	2300      	movs	r3, #0
     220:	e000      	b.n	224 <am_bootloader_flash_check+0xa4>
    }

    //
    // If those tests pass, we're probably safe to run.
    //
    return true;
     222:	2301      	movs	r3, #1
}
     224:	4618      	mov	r0, r3
     226:	3748      	adds	r7, #72	; 0x48
     228:	46bd      	mov	sp, r7
     22a:	bd80      	pop	{r7, pc}

0000022c <am_hal_bootloader_override_check>:
//! @return true if override is asserted
//
//*****************************************************************************
bool
am_hal_bootloader_override_check(am_bootloader_image_t *psImage)
{
     22c:	b590      	push	{r4, r7, lr}
     22e:	b087      	sub	sp, #28
     230:	af00      	add	r7, sp, #0
     232:	6078      	str	r0, [r7, #4]
    DPRINTF(("Entering %s 0x%08x\r\n", __func__, (uintptr_t)psImage));
    uint32_t    ui32OverridePin;
    //
    // Check the override GPIO
    //
    if ( psImage->ui32OverrideGPIO != 0xFFFFFFFF )
     234:	687b      	ldr	r3, [r7, #4]
     236:	68db      	ldr	r3, [r3, #12]
     238:	f1b3 3fff 	cmp.w	r3, #4294967295
     23c:	f000 8160 	beq.w	500 <am_hal_bootloader_override_check+0x2d4>
#endif
        //
        // Temporarily configure the override pin as an input.
        //
#ifndef AM_PART_APOLLO3
        am_hal_gpio_pin_config(psImage->ui32OverrideGPIO, AM_HAL_PIN_INPUT);
     240:	687b      	ldr	r3, [r7, #4]
     242:	68db      	ldr	r3, [r3, #12]
     244:	2b31      	cmp	r3, #49	; 0x31
     246:	d866      	bhi.n	316 <am_hal_bootloader_override_check+0xea>
     248:	f001 fb64 	bl	1914 <am_hal_interrupt_master_disable>
     24c:	4603      	mov	r3, r0
     24e:	613b      	str	r3, [r7, #16]
     250:	4bae      	ldr	r3, [pc, #696]	; (50c <am_hal_bootloader_override_check+0x2e0>)
     252:	2273      	movs	r2, #115	; 0x73
     254:	601a      	str	r2, [r3, #0]
     256:	687b      	ldr	r3, [r7, #4]
     258:	68db      	ldr	r3, [r3, #12]
     25a:	085b      	lsrs	r3, r3, #1
     25c:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     260:	4bab      	ldr	r3, [pc, #684]	; (510 <am_hal_bootloader_override_check+0x2e4>)
     262:	4413      	add	r3, r2
     264:	4618      	mov	r0, r3
     266:	687b      	ldr	r3, [r7, #4]
     268:	68db      	ldr	r3, [r3, #12]
     26a:	085b      	lsrs	r3, r3, #1
     26c:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     270:	4ba7      	ldr	r3, [pc, #668]	; (510 <am_hal_bootloader_override_check+0x2e4>)
     272:	4413      	add	r3, r2
     274:	681a      	ldr	r2, [r3, #0]
     276:	687b      	ldr	r3, [r7, #4]
     278:	68db      	ldr	r3, [r3, #12]
     27a:	009b      	lsls	r3, r3, #2
     27c:	f003 031c 	and.w	r3, r3, #28
     280:	2107      	movs	r1, #7
     282:	fa01 f303 	lsl.w	r3, r1, r3
     286:	43db      	mvns	r3, r3
     288:	4013      	ands	r3, r2
     28a:	6003      	str	r3, [r0, #0]
     28c:	687b      	ldr	r3, [r7, #4]
     28e:	68db      	ldr	r3, [r3, #12]
     290:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     294:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     298:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     29c:	461c      	mov	r4, r3
     29e:	687b      	ldr	r3, [r7, #4]
     2a0:	68db      	ldr	r3, [r3, #12]
     2a2:	00db      	lsls	r3, r3, #3
     2a4:	f003 0318 	and.w	r3, r3, #24
     2a8:	221a      	movs	r2, #26
     2aa:	409a      	lsls	r2, r3
     2ac:	687b      	ldr	r3, [r7, #4]
     2ae:	68db      	ldr	r3, [r3, #12]
     2b0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     2b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     2b8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     2bc:	6819      	ldr	r1, [r3, #0]
     2be:	687b      	ldr	r3, [r7, #4]
     2c0:	68db      	ldr	r3, [r3, #12]
     2c2:	00db      	lsls	r3, r3, #3
     2c4:	f003 0318 	and.w	r3, r3, #24
     2c8:	20ff      	movs	r0, #255	; 0xff
     2ca:	fa00 f303 	lsl.w	r3, r0, r3
     2ce:	43db      	mvns	r3, r3
     2d0:	400b      	ands	r3, r1
     2d2:	4313      	orrs	r3, r2
     2d4:	6023      	str	r3, [r4, #0]
     2d6:	687b      	ldr	r3, [r7, #4]
     2d8:	68db      	ldr	r3, [r3, #12]
     2da:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     2de:	4b8d      	ldr	r3, [pc, #564]	; (514 <am_hal_bootloader_override_check+0x2e8>)
     2e0:	4413      	add	r3, r2
     2e2:	4618      	mov	r0, r3
     2e4:	687b      	ldr	r3, [r7, #4]
     2e6:	68db      	ldr	r3, [r3, #12]
     2e8:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     2ec:	4b89      	ldr	r3, [pc, #548]	; (514 <am_hal_bootloader_override_check+0x2e8>)
     2ee:	4413      	add	r3, r2
     2f0:	681a      	ldr	r2, [r3, #0]
     2f2:	687b      	ldr	r3, [r7, #4]
     2f4:	68db      	ldr	r3, [r3, #12]
     2f6:	00db      	lsls	r3, r3, #3
     2f8:	f003 0318 	and.w	r3, r3, #24
     2fc:	21ff      	movs	r1, #255	; 0xff
     2fe:	fa01 f303 	lsl.w	r3, r1, r3
     302:	43db      	mvns	r3, r3
     304:	4013      	ands	r3, r2
     306:	6003      	str	r3, [r0, #0]
     308:	4b80      	ldr	r3, [pc, #512]	; (50c <am_hal_bootloader_override_check+0x2e0>)
     30a:	2200      	movs	r2, #0
     30c:	601a      	str	r2, [r3, #0]
     30e:	693b      	ldr	r3, [r7, #16]
     310:	4618      	mov	r0, r3
     312:	f001 fb03 	bl	191c <am_hal_interrupt_master_set>

        //
        // If the override pin matches the specified polarity, force a failure.
        //
#ifndef AM_PART_APOLLO3
        ui32OverridePin = am_hal_gpio_input_bit_read(psImage->ui32OverrideGPIO);
     316:	687b      	ldr	r3, [r7, #4]
     318:	68db      	ldr	r3, [r3, #12]
     31a:	08db      	lsrs	r3, r3, #3
     31c:	f003 0204 	and.w	r2, r3, #4
     320:	4b7d      	ldr	r3, [pc, #500]	; (518 <am_hal_bootloader_override_check+0x2ec>)
     322:	4413      	add	r3, r2
     324:	681a      	ldr	r2, [r3, #0]
     326:	687b      	ldr	r3, [r7, #4]
     328:	68db      	ldr	r3, [r3, #12]
     32a:	f003 031f 	and.w	r3, r3, #31
     32e:	fa22 f303 	lsr.w	r3, r2, r3
     332:	f003 0301 	and.w	r3, r3, #1
     336:	2b00      	cmp	r3, #0
     338:	bf14      	ite	ne
     33a:	2301      	movne	r3, #1
     33c:	2300      	moveq	r3, #0
     33e:	b2db      	uxtb	r3, r3
     340:	617b      	str	r3, [r7, #20]
#else
        am_hal_gpio_state_read(psImage->ui32OverrideGPIO, AM_HAL_GPIO_INPUT_READ, &ui32OverridePin );
#endif
        if ( ui32OverridePin == (psImage->ui32OverridePolarity & 0x1) )
     342:	687b      	ldr	r3, [r7, #4]
     344:	691b      	ldr	r3, [r3, #16]
     346:	f003 0201 	and.w	r2, r3, #1
     34a:	697b      	ldr	r3, [r7, #20]
     34c:	429a      	cmp	r2, r3
     34e:	d16c      	bne.n	42a <am_hal_bootloader_override_check+0x1fe>
            DPRINTF(("Override Pin %d matches Polarity, force failure. %d, %d\r\n", psImage->ui32OverrideGPIO,  ui32OverridePin, psImage->ui32OverridePolarity));
            //
            // Make sure to disable the pin before continuing.
            //
#ifndef AM_PART_APOLLO3
            am_hal_gpio_pin_config(psImage->ui32OverrideGPIO, AM_HAL_PIN_DISABLE);
     350:	687b      	ldr	r3, [r7, #4]
     352:	68db      	ldr	r3, [r3, #12]
     354:	2b31      	cmp	r3, #49	; 0x31
     356:	d866      	bhi.n	426 <am_hal_bootloader_override_check+0x1fa>
     358:	f001 fadc 	bl	1914 <am_hal_interrupt_master_disable>
     35c:	4603      	mov	r3, r0
     35e:	60fb      	str	r3, [r7, #12]
     360:	4b6a      	ldr	r3, [pc, #424]	; (50c <am_hal_bootloader_override_check+0x2e0>)
     362:	2273      	movs	r2, #115	; 0x73
     364:	601a      	str	r2, [r3, #0]
     366:	687b      	ldr	r3, [r7, #4]
     368:	68db      	ldr	r3, [r3, #12]
     36a:	085b      	lsrs	r3, r3, #1
     36c:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     370:	4b67      	ldr	r3, [pc, #412]	; (510 <am_hal_bootloader_override_check+0x2e4>)
     372:	4413      	add	r3, r2
     374:	4618      	mov	r0, r3
     376:	687b      	ldr	r3, [r7, #4]
     378:	68db      	ldr	r3, [r3, #12]
     37a:	085b      	lsrs	r3, r3, #1
     37c:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     380:	4b63      	ldr	r3, [pc, #396]	; (510 <am_hal_bootloader_override_check+0x2e4>)
     382:	4413      	add	r3, r2
     384:	681a      	ldr	r2, [r3, #0]
     386:	687b      	ldr	r3, [r7, #4]
     388:	68db      	ldr	r3, [r3, #12]
     38a:	009b      	lsls	r3, r3, #2
     38c:	f003 031c 	and.w	r3, r3, #28
     390:	2107      	movs	r1, #7
     392:	fa01 f303 	lsl.w	r3, r1, r3
     396:	43db      	mvns	r3, r3
     398:	4013      	ands	r3, r2
     39a:	6003      	str	r3, [r0, #0]
     39c:	687b      	ldr	r3, [r7, #4]
     39e:	68db      	ldr	r3, [r3, #12]
     3a0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     3a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     3a8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     3ac:	461c      	mov	r4, r3
     3ae:	687b      	ldr	r3, [r7, #4]
     3b0:	68db      	ldr	r3, [r3, #12]
     3b2:	00db      	lsls	r3, r3, #3
     3b4:	f003 0318 	and.w	r3, r3, #24
     3b8:	2218      	movs	r2, #24
     3ba:	409a      	lsls	r2, r3
     3bc:	687b      	ldr	r3, [r7, #4]
     3be:	68db      	ldr	r3, [r3, #12]
     3c0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     3c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     3c8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     3cc:	6819      	ldr	r1, [r3, #0]
     3ce:	687b      	ldr	r3, [r7, #4]
     3d0:	68db      	ldr	r3, [r3, #12]
     3d2:	00db      	lsls	r3, r3, #3
     3d4:	f003 0318 	and.w	r3, r3, #24
     3d8:	20ff      	movs	r0, #255	; 0xff
     3da:	fa00 f303 	lsl.w	r3, r0, r3
     3de:	43db      	mvns	r3, r3
     3e0:	400b      	ands	r3, r1
     3e2:	4313      	orrs	r3, r2
     3e4:	6023      	str	r3, [r4, #0]
     3e6:	687b      	ldr	r3, [r7, #4]
     3e8:	68db      	ldr	r3, [r3, #12]
     3ea:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     3ee:	4b49      	ldr	r3, [pc, #292]	; (514 <am_hal_bootloader_override_check+0x2e8>)
     3f0:	4413      	add	r3, r2
     3f2:	4618      	mov	r0, r3
     3f4:	687b      	ldr	r3, [r7, #4]
     3f6:	68db      	ldr	r3, [r3, #12]
     3f8:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     3fc:	4b45      	ldr	r3, [pc, #276]	; (514 <am_hal_bootloader_override_check+0x2e8>)
     3fe:	4413      	add	r3, r2
     400:	681a      	ldr	r2, [r3, #0]
     402:	687b      	ldr	r3, [r7, #4]
     404:	68db      	ldr	r3, [r3, #12]
     406:	00db      	lsls	r3, r3, #3
     408:	f003 0318 	and.w	r3, r3, #24
     40c:	21ff      	movs	r1, #255	; 0xff
     40e:	fa01 f303 	lsl.w	r3, r1, r3
     412:	43db      	mvns	r3, r3
     414:	4013      	ands	r3, r2
     416:	6003      	str	r3, [r0, #0]
     418:	4b3c      	ldr	r3, [pc, #240]	; (50c <am_hal_bootloader_override_check+0x2e0>)
     41a:	2200      	movs	r2, #0
     41c:	601a      	str	r2, [r3, #0]
     41e:	68fb      	ldr	r3, [r7, #12]
     420:	4618      	mov	r0, r3
     422:	f001 fa7b 	bl	191c <am_hal_interrupt_master_set>
#else
            am_hal_gpio_pinconfig(psImage->ui32OverrideGPIO, g_AM_HAL_GPIO_INPUT_DISABLE);
#endif
            return true;
     426:	2301      	movs	r3, #1
     428:	e06b      	b.n	502 <am_hal_bootloader_override_check+0x2d6>
        // If the test passed, we still need to make sure the GPIO is disabled,
        // as it might interfere with the program we are (presumably) about to
        // boot.
        //
#ifndef AM_PART_APOLLO3
            am_hal_gpio_pin_config(psImage->ui32OverrideGPIO, AM_HAL_PIN_DISABLE);
     42a:	687b      	ldr	r3, [r7, #4]
     42c:	68db      	ldr	r3, [r3, #12]
     42e:	2b31      	cmp	r3, #49	; 0x31
     430:	d866      	bhi.n	500 <am_hal_bootloader_override_check+0x2d4>
     432:	f001 fa6f 	bl	1914 <am_hal_interrupt_master_disable>
     436:	4603      	mov	r3, r0
     438:	60bb      	str	r3, [r7, #8]
     43a:	4b34      	ldr	r3, [pc, #208]	; (50c <am_hal_bootloader_override_check+0x2e0>)
     43c:	2273      	movs	r2, #115	; 0x73
     43e:	601a      	str	r2, [r3, #0]
     440:	687b      	ldr	r3, [r7, #4]
     442:	68db      	ldr	r3, [r3, #12]
     444:	085b      	lsrs	r3, r3, #1
     446:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     44a:	4b31      	ldr	r3, [pc, #196]	; (510 <am_hal_bootloader_override_check+0x2e4>)
     44c:	4413      	add	r3, r2
     44e:	4618      	mov	r0, r3
     450:	687b      	ldr	r3, [r7, #4]
     452:	68db      	ldr	r3, [r3, #12]
     454:	085b      	lsrs	r3, r3, #1
     456:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     45a:	4b2d      	ldr	r3, [pc, #180]	; (510 <am_hal_bootloader_override_check+0x2e4>)
     45c:	4413      	add	r3, r2
     45e:	681a      	ldr	r2, [r3, #0]
     460:	687b      	ldr	r3, [r7, #4]
     462:	68db      	ldr	r3, [r3, #12]
     464:	009b      	lsls	r3, r3, #2
     466:	f003 031c 	and.w	r3, r3, #28
     46a:	2107      	movs	r1, #7
     46c:	fa01 f303 	lsl.w	r3, r1, r3
     470:	43db      	mvns	r3, r3
     472:	4013      	ands	r3, r2
     474:	6003      	str	r3, [r0, #0]
     476:	687b      	ldr	r3, [r7, #4]
     478:	68db      	ldr	r3, [r3, #12]
     47a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     47e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     482:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     486:	461c      	mov	r4, r3
     488:	687b      	ldr	r3, [r7, #4]
     48a:	68db      	ldr	r3, [r3, #12]
     48c:	00db      	lsls	r3, r3, #3
     48e:	f003 0318 	and.w	r3, r3, #24
     492:	2218      	movs	r2, #24
     494:	409a      	lsls	r2, r3
     496:	687b      	ldr	r3, [r7, #4]
     498:	68db      	ldr	r3, [r3, #12]
     49a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     49e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     4a2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     4a6:	6819      	ldr	r1, [r3, #0]
     4a8:	687b      	ldr	r3, [r7, #4]
     4aa:	68db      	ldr	r3, [r3, #12]
     4ac:	00db      	lsls	r3, r3, #3
     4ae:	f003 0318 	and.w	r3, r3, #24
     4b2:	20ff      	movs	r0, #255	; 0xff
     4b4:	fa00 f303 	lsl.w	r3, r0, r3
     4b8:	43db      	mvns	r3, r3
     4ba:	400b      	ands	r3, r1
     4bc:	4313      	orrs	r3, r2
     4be:	6023      	str	r3, [r4, #0]
     4c0:	687b      	ldr	r3, [r7, #4]
     4c2:	68db      	ldr	r3, [r3, #12]
     4c4:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     4c8:	4b12      	ldr	r3, [pc, #72]	; (514 <am_hal_bootloader_override_check+0x2e8>)
     4ca:	4413      	add	r3, r2
     4cc:	4618      	mov	r0, r3
     4ce:	687b      	ldr	r3, [r7, #4]
     4d0:	68db      	ldr	r3, [r3, #12]
     4d2:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     4d6:	4b0f      	ldr	r3, [pc, #60]	; (514 <am_hal_bootloader_override_check+0x2e8>)
     4d8:	4413      	add	r3, r2
     4da:	681a      	ldr	r2, [r3, #0]
     4dc:	687b      	ldr	r3, [r7, #4]
     4de:	68db      	ldr	r3, [r3, #12]
     4e0:	00db      	lsls	r3, r3, #3
     4e2:	f003 0318 	and.w	r3, r3, #24
     4e6:	21ff      	movs	r1, #255	; 0xff
     4e8:	fa01 f303 	lsl.w	r3, r1, r3
     4ec:	43db      	mvns	r3, r3
     4ee:	4013      	ands	r3, r2
     4f0:	6003      	str	r3, [r0, #0]
     4f2:	4b06      	ldr	r3, [pc, #24]	; (50c <am_hal_bootloader_override_check+0x2e0>)
     4f4:	2200      	movs	r2, #0
     4f6:	601a      	str	r2, [r3, #0]
     4f8:	68bb      	ldr	r3, [r7, #8]
     4fa:	4618      	mov	r0, r3
     4fc:	f001 fa0e 	bl	191c <am_hal_interrupt_master_set>
#else
            am_hal_gpio_pinconfig(psImage->ui32OverrideGPIO, g_AM_HAL_GPIO_INPUT_DISABLE);
#endif
    }

    return false;
     500:	2300      	movs	r3, #0
}
     502:	4618      	mov	r0, r3
     504:	371c      	adds	r7, #28
     506:	46bd      	mov	sp, r7
     508:	bd90      	pop	{r4, r7, pc}
     50a:	bf00      	nop
     50c:	40010060 	.word	0x40010060
     510:	40010040 	.word	0x40010040
     514:	400100e0 	.word	0x400100e0
     518:	40010080 	.word	0x40010080

0000051c <am_bootloader_validate_structure>:
//! @return true if the check passes.
//
//*****************************************************************************
bool
am_bootloader_validate_structure(uint32_t *pInfo, uint32_t size)
{
     51c:	b580      	push	{r7, lr}
     51e:	b084      	sub	sp, #16
     520:	af00      	add	r7, sp, #0
     522:	6078      	str	r0, [r7, #4]
     524:	6039      	str	r1, [r7, #0]
    uint32_t ui32Crc = 0;
     526:	2300      	movs	r3, #0
     528:	60bb      	str	r3, [r7, #8]
    // CRC value is the last 4 bytes of the structure
    uint32_t *pCrc = pInfo + size / 4 - 1;
     52a:	683b      	ldr	r3, [r7, #0]
     52c:	f023 0303 	bic.w	r3, r3, #3
     530:	3b04      	subs	r3, #4
     532:	687a      	ldr	r2, [r7, #4]
     534:	4413      	add	r3, r2
     536:	60fb      	str	r3, [r7, #12]
    // Compute and validate CRC of the structure
    am_bootloader_partial_crc32(pInfo, size - 4, &ui32Crc);
     538:	683b      	ldr	r3, [r7, #0]
     53a:	3b04      	subs	r3, #4
     53c:	f107 0208 	add.w	r2, r7, #8
     540:	4619      	mov	r1, r3
     542:	6878      	ldr	r0, [r7, #4]
     544:	f7ff fdea 	bl	11c <am_bootloader_partial_crc32>
    if (*pCrc != ui32Crc)
     548:	68fb      	ldr	r3, [r7, #12]
     54a:	681a      	ldr	r2, [r3, #0]
     54c:	68bb      	ldr	r3, [r7, #8]
     54e:	429a      	cmp	r2, r3
     550:	d001      	beq.n	556 <am_bootloader_validate_structure+0x3a>
    {
        return false;
     552:	2300      	movs	r3, #0
     554:	e000      	b.n	558 <am_bootloader_validate_structure+0x3c>
    }
    else
    {
        return true;
     556:	2301      	movs	r3, #1
    }
}
     558:	4618      	mov	r0, r3
     55a:	3710      	adds	r7, #16
     55c:	46bd      	mov	sp, r7
     55e:	bd80      	pop	{r7, pc}

00000560 <am_bootloader_flag_page_update>:
//
//*****************************************************************************
int
am_bootloader_flag_page_update(am_bootloader_image_t *psImage,
                               uint32_t *pui32FlagPage)
{
     560:	b580      	push	{r7, lr}
     562:	b086      	sub	sp, #24
     564:	af00      	add	r7, sp, #0
     566:	6078      	str	r0, [r7, #4]
     568:	6039      	str	r1, [r7, #0]
    uint32_t ui32Block, ui32Page;
    uint32_t ui32Critical;
    psImage->ui32Checksum = 0;
     56a:	687b      	ldr	r3, [r7, #4]
     56c:	2200      	movs	r2, #0
     56e:	621a      	str	r2, [r3, #32]
    DPRINTF(("Image to use: 0x%08x\r\n", (uintptr_t)psImage));
    DPRINTF(("Flag page address: 0x%08x\r\n", (uintptr_t)pui32FlagPage));
    //
    // Calculate the correct flag page number.
    //
    ui32Page = AM_HAL_FLASH_ADDR2PAGE((uintptr_t)pui32FlagPage);
     570:	683b      	ldr	r3, [r7, #0]
     572:	0b5b      	lsrs	r3, r3, #13
     574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     578:	617b      	str	r3, [r7, #20]
    DPRINTF(("Flag page %d\r\n", ui32Page));
    ui32Block = AM_HAL_FLASH_ADDR2INST((uint32_t)pui32FlagPage);
     57a:	683b      	ldr	r3, [r7, #0]
     57c:	0cdb      	lsrs	r3, r3, #19
     57e:	f003 0301 	and.w	r3, r3, #1
     582:	613b      	str	r3, [r7, #16]
    DPRINTF(("Flag page in block %d\r\n", ui32Block));

    // Compute CRC of the structure
    am_bootloader_partial_crc32(psImage, sizeof(*psImage) - 4, &psImage->ui32Checksum);
     584:	687b      	ldr	r3, [r7, #4]
     586:	3320      	adds	r3, #32
     588:	461a      	mov	r2, r3
     58a:	2120      	movs	r1, #32
     58c:	6878      	ldr	r0, [r7, #4]
     58e:	f7ff fdc5 	bl	11c <am_bootloader_partial_crc32>
    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
     592:	f001 f9bf 	bl	1914 <am_hal_interrupt_master_disable>
     596:	60f8      	str	r0, [r7, #12]
    //
    // Erase the page.
    //
    int rc = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, ui32Block, ui32Page);
     598:	697a      	ldr	r2, [r7, #20]
     59a:	6939      	ldr	r1, [r7, #16]
     59c:	4809      	ldr	r0, [pc, #36]	; (5c4 <am_bootloader_flag_page_update+0x64>)
     59e:	f001 f917 	bl	17d0 <am_hal_flash_page_erase>
     5a2:	60b8      	str	r0, [r7, #8]
    DPRINTF(("Flash Erased %d\r\n", rc));

    //
    // Write the psImage structure directly to the flag page.
    //
    rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY,
     5a4:	2309      	movs	r3, #9
     5a6:	683a      	ldr	r2, [r7, #0]
     5a8:	6879      	ldr	r1, [r7, #4]
     5aa:	4806      	ldr	r0, [pc, #24]	; (5c4 <am_bootloader_flag_page_update+0x64>)
     5ac:	f001 f914 	bl	17d8 <am_hal_flash_program_main>
     5b0:	60b8      	str	r0, [r7, #8]
                              pui32FlagPage,
                              sizeof(am_bootloader_image_t) / 4);
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
     5b2:	68f8      	ldr	r0, [r7, #12]
     5b4:	f001 f9b2 	bl	191c <am_hal_interrupt_master_set>
    DPRINTF(("Done. %d\r\n", rc));
    return rc;
     5b8:	68bb      	ldr	r3, [r7, #8]
}
     5ba:	4618      	mov	r0, r3
     5bc:	3718      	adds	r7, #24
     5be:	46bd      	mov	sp, r7
     5c0:	bd80      	pop	{r7, pc}
     5c2:	bf00      	nop
     5c4:	12344321 	.word	0x12344321

000005c8 <am_bootloader_check_index>:
//! @return return false if the bit corresponding to index is set.
//
//*****************************************************************************
bool
am_bootloader_check_index(uint32_t index, uint32_t *pMask)
{
     5c8:	b480      	push	{r7}
     5ca:	b085      	sub	sp, #20
     5cc:	af00      	add	r7, sp, #0
     5ce:	6078      	str	r0, [r7, #4]
     5d0:	6039      	str	r1, [r7, #0]
    uint32_t valid = *pMask;
     5d2:	683b      	ldr	r3, [r7, #0]
     5d4:	681b      	ldr	r3, [r3, #0]
     5d6:	60fb      	str	r3, [r7, #12]
    if (index > 31)
     5d8:	687b      	ldr	r3, [r7, #4]
     5da:	2b1f      	cmp	r3, #31
     5dc:	d901      	bls.n	5e2 <am_bootloader_check_index+0x1a>
    {
        return true;
     5de:	2301      	movs	r3, #1
     5e0:	e00d      	b.n	5fe <am_bootloader_check_index+0x36>
    }
    if (valid & (1 << (31 - index)))
     5e2:	687b      	ldr	r3, [r7, #4]
     5e4:	f1c3 031f 	rsb	r3, r3, #31
     5e8:	2201      	movs	r2, #1
     5ea:	fa02 f303 	lsl.w	r3, r2, r3
     5ee:	461a      	mov	r2, r3
     5f0:	68fb      	ldr	r3, [r7, #12]
     5f2:	4013      	ands	r3, r2
     5f4:	2b00      	cmp	r3, #0
     5f6:	d001      	beq.n	5fc <am_bootloader_check_index+0x34>
    {
        return false;
     5f8:	2300      	movs	r3, #0
     5fa:	e000      	b.n	5fe <am_bootloader_check_index+0x36>
    }
    return true;
     5fc:	2301      	movs	r3, #1

}
     5fe:	4618      	mov	r0, r3
     600:	3714      	adds	r7, #20
     602:	46bd      	mov	sp, r7
     604:	f85d 7b04 	ldr.w	r7, [sp], #4
     608:	4770      	bx	lr
	...

0000060c <am_bootloader_erase_flash_page>:
//! @return none
//
//*****************************************************************************
void
am_bootloader_erase_flash_page(uint32_t ui32Addr)
{
     60c:	b580      	push	{r7, lr}
     60e:	b086      	sub	sp, #24
     610:	af00      	add	r7, sp, #0
     612:	6078      	str	r0, [r7, #4]
    uint32_t ui32Critical;
    uint32_t ui32CurrentPage, ui32CurrentBlock;
    //
    // Figure out what page and block we're working on.
    //
    ui32CurrentPage =  AM_HAL_FLASH_ADDR2PAGE(ui32Addr);
     614:	687b      	ldr	r3, [r7, #4]
     616:	0b5b      	lsrs	r3, r3, #13
     618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     61c:	617b      	str	r3, [r7, #20]
    ui32CurrentBlock = AM_HAL_FLASH_ADDR2INST(ui32Addr);
     61e:	687b      	ldr	r3, [r7, #4]
     620:	0cdb      	lsrs	r3, r3, #19
     622:	f003 0301 	and.w	r3, r3, #1
     626:	613b      	str	r3, [r7, #16]
    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
     628:	f001 f974 	bl	1914 <am_hal_interrupt_master_disable>
     62c:	60f8      	str	r0, [r7, #12]
    am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY,
     62e:	697a      	ldr	r2, [r7, #20]
     630:	6939      	ldr	r1, [r7, #16]
     632:	4805      	ldr	r0, [pc, #20]	; (648 <am_bootloader_erase_flash_page+0x3c>)
     634:	f001 f8cc 	bl	17d0 <am_hal_flash_page_erase>
                                ui32CurrentBlock, ui32CurrentPage);
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
     638:	68f8      	ldr	r0, [r7, #12]
     63a:	f001 f96f 	bl	191c <am_hal_interrupt_master_set>
}
     63e:	bf00      	nop
     640:	3718      	adds	r7, #24
     642:	46bd      	mov	sp, r7
     644:	bd80      	pop	{r7, pc}
     646:	bf00      	nop
     648:	12344321 	.word	0x12344321

0000064c <am_bootloader_program_flash_page>:
//
//*****************************************************************************
void
am_bootloader_program_flash_page(uint32_t ui32WriteAddr,
                                 uint32_t *pui32ReadAddr, uint32_t numBytes)
{
     64c:	b580      	push	{r7, lr}
     64e:	b086      	sub	sp, #24
     650:	af00      	add	r7, sp, #0
     652:	60f8      	str	r0, [r7, #12]
     654:	60b9      	str	r1, [r7, #8]
     656:	607a      	str	r2, [r7, #4]
    uint32_t ui32Critical;
    uint32_t ui32WordsInBuffer;

    am_bootloader_erase_flash_page(ui32WriteAddr);
     658:	68f8      	ldr	r0, [r7, #12]
     65a:	f7ff ffd7 	bl	60c <am_bootloader_erase_flash_page>

    ui32WordsInBuffer = (numBytes + 3) / 4;
     65e:	687b      	ldr	r3, [r7, #4]
     660:	3303      	adds	r3, #3
     662:	089b      	lsrs	r3, r3, #2
     664:	617b      	str	r3, [r7, #20]
    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
     666:	f001 f955 	bl	1914 <am_hal_interrupt_master_disable>
     66a:	6138      	str	r0, [r7, #16]
    //
    // Program the flash page with the data we just received.
    //
    am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, pui32ReadAddr,
     66c:	68fa      	ldr	r2, [r7, #12]
     66e:	697b      	ldr	r3, [r7, #20]
     670:	68b9      	ldr	r1, [r7, #8]
     672:	4805      	ldr	r0, [pc, #20]	; (688 <am_bootloader_program_flash_page+0x3c>)
     674:	f001 f8b0 	bl	17d8 <am_hal_flash_program_main>
                              (uint32_t *)ui32WriteAddr, ui32WordsInBuffer);
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
     678:	6938      	ldr	r0, [r7, #16]
     67a:	f001 f94f 	bl	191c <am_hal_interrupt_master_set>
}
     67e:	bf00      	nop
     680:	3718      	adds	r7, #24
     682:	46bd      	mov	sp, r7
     684:	bd80      	pop	{r7, pc}
     686:	bf00      	nop
     688:	12344321 	.word	0x12344321

0000068c <am_bootloader_image_run>:
//! @return The function does not return.
//
//*****************************************************************************
void
am_bootloader_image_run(am_bootloader_image_t *psImage)
{
     68c:	b580      	push	{r7, lr}
     68e:	b082      	sub	sp, #8
     690:	af00      	add	r7, sp, #0
     692:	6078      	str	r0, [r7, #4]
    // The underlying boot sequence is a little different depeding on whether
    // the image was delivered as an encrypted image or as a cleartext image.
    // We will call the correct assembly routine based on what the image
    // structure tells us.
    //
    if ( psImage->bEncrypted )
     694:	687b      	ldr	r3, [r7, #4]
     696:	69db      	ldr	r3, [r3, #28]
     698:	2b00      	cmp	r3, #0
     69a:	d003      	beq.n	6a4 <am_bootloader_image_run+0x18>
    {
        am_bootloader_encrypted_image_run(psImage);
     69c:	6878      	ldr	r0, [r7, #4]
     69e:	f000 f808 	bl	6b2 <am_bootloader_encrypted_image_run>
    }
    else
    {
        am_bootloader_clear_image_run(psImage);
    }
}
     6a2:	e002      	b.n	6aa <am_bootloader_image_run+0x1e>
        am_bootloader_clear_image_run(psImage);
     6a4:	6878      	ldr	r0, [r7, #4]
     6a6:	f000 f80f 	bl	6c8 <am_bootloader_clear_image_run>
}
     6aa:	bf00      	nop
     6ac:	3708      	adds	r7, #8
     6ae:	46bd      	mov	sp, r7
     6b0:	bd80      	pop	{r7, pc}

000006b2 <am_bootloader_encrypted_image_run>:
am_bootloader_encrypted_image_run(am_bootloader_image_t *psImage)
{
    //
    // Load the new stack pointer into R1 and the new reset vector into R2.
    //
    __asm("    ldr     r1, [r0, #20]");
     6b2:	6941      	ldr	r1, [r0, #20]
    __asm("    ldr     r2, [r0, #24]");
     6b4:	6982      	ldr	r2, [r0, #24]

    //
    // Load the link address of the boot image into R0.
    //
    __asm("    ldr     r0, [r0, #0]");
     6b6:	6800      	ldr	r0, [r0, #0]

    //
    // Store the vector table pointer of the new image into VTOR.
    //
    __asm("    movw    r3, #0xED08");
     6b8:	f64e 5308 	movw	r3, #60680	; 0xed08
    __asm("    movt    r3, #0xE000");
     6bc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    __asm("    str     r0, [r3, #0]");
     6c0:	6018      	str	r0, [r3, #0]

    //
    // Set the stack pointer for the new image.
    //
    __asm("    mov     sp, r1");
     6c2:	468d      	mov	sp, r1

    //
    // Jump to the new reset vector.
    //
    __asm("    bx      r2");
     6c4:	4710      	bx	r2
}
     6c6:	bf00      	nop

000006c8 <am_bootloader_clear_image_run>:
am_bootloader_clear_image_run(am_bootloader_image_t *psImage)
{
    //
    // Load the link address of the boot image into R0.
    //
    __asm("    ldr     r0, [r0, #0]");
     6c8:	6800      	ldr	r0, [r0, #0]

    //
    // Store the vector table pointer of the new image into VTOR.
    //
    __asm("    movw    r3, #0xED08");
     6ca:	f64e 5308 	movw	r3, #60680	; 0xed08
    __asm("    movt    r3, #0xE000");
     6ce:	f2ce 0300 	movt	r3, #57344	; 0xe000
    __asm("    str     r0, [r3, #0]");
     6d2:	6018      	str	r0, [r3, #0]

    //
    // Load the new stack pointer into R1 and the new reset vector into R2.
    //
    __asm("    ldr     r1, [r0, #0]");
     6d4:	6801      	ldr	r1, [r0, #0]
    __asm("    ldr     r2, [r0, #4]");
     6d6:	6842      	ldr	r2, [r0, #4]

    //
    // Set the stack pointer for the new image.
    //
    __asm("    mov     sp, r1");
     6d8:	468d      	mov	sp, r1

    //
    // Jump to the new reset vector.
    //
    __asm("    bx      r2");
     6da:	4710      	bx	r2
}
     6dc:	bf00      	nop
	...

000006e0 <check_flash_address_range>:

// Checks that the address does not overlap with bootloader or flag page
// It also checks that the address is inside the internal flash
static bool
check_flash_address_range(uint32_t address, uint32_t size)
{
     6e0:	b580      	push	{r7, lr}
     6e2:	b090      	sub	sp, #64	; 0x40
     6e4:	af00      	add	r7, sp, #0
     6e6:	6078      	str	r0, [r7, #4]
     6e8:	6039      	str	r1, [r7, #0]
    static uint32_t g_intFlashSize = 0;
    am_hal_mcuctrl_device_t sDevice;

    uint32_t ui32Start = address;
     6ea:	687b      	ldr	r3, [r7, #4]
     6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint32_t ui32End = address + size - 1 ;
     6ee:	687a      	ldr	r2, [r7, #4]
     6f0:	683b      	ldr	r3, [r7, #0]
     6f2:	4413      	add	r3, r2
     6f4:	3b01      	subs	r3, #1
     6f6:	63bb      	str	r3, [r7, #56]	; 0x38

    if (g_intFlashSize == 0) // First call
     6f8:	4b19      	ldr	r3, [pc, #100]	; (760 <check_flash_address_range+0x80>)
     6fa:	681b      	ldr	r3, [r3, #0]
     6fc:	2b00      	cmp	r3, #0
     6fe:	d107      	bne.n	710 <check_flash_address_range+0x30>
    {
        // Get chip specific info
#if AM_APOLLO3_MCUCTRL
        am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &sDevice);
#else
        am_hal_mcuctrl_device_info_get(&sDevice);
     700:	f107 0308 	add.w	r3, r7, #8
     704:	4618      	mov	r0, r3
     706:	f001 f90d 	bl	1924 <am_hal_mcuctrl_device_info_get>
#endif

        g_intFlashSize = sDevice.ui32FlashSize;
     70a:	6a3b      	ldr	r3, [r7, #32]
     70c:	4a14      	ldr	r2, [pc, #80]	; (760 <check_flash_address_range+0x80>)
     70e:	6013      	str	r3, [r2, #0]
    // Make sure the address is within flash.
    //
    //
    // Check to make sure address is not within bootloader program
    //
    if ( ui32Start < MAX_BOOTLOADER_SIZE )
     710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     712:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
     716:	d201      	bcs.n	71c <check_flash_address_range+0x3c>
    {
        return false;
     718:	2300      	movs	r3, #0
     71a:	e01d      	b.n	758 <check_flash_address_range+0x78>
    }
    // Check to make sure the address is not beyond the flash
    if (ui32End >= g_intFlashSize)
     71c:	4b10      	ldr	r3, [pc, #64]	; (760 <check_flash_address_range+0x80>)
     71e:	681b      	ldr	r3, [r3, #0]
     720:	6bba      	ldr	r2, [r7, #56]	; 0x38
     722:	429a      	cmp	r2, r3
     724:	d301      	bcc.n	72a <check_flash_address_range+0x4a>
    {
        return false;
     726:	2300      	movs	r3, #0
     728:	e016      	b.n	758 <check_flash_address_range+0x78>
    if ( USE_FLAG_PAGE )
    {
        //
        // Check to make sure address is not in the flag page
        //
        if ( (FLAG_PAGE_LOCATION == ui32Start) ||
     72a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     72c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
     730:	d00f      	beq.n	752 <check_flash_address_range+0x72>
     732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
     738:	d903      	bls.n	742 <check_flash_address_range+0x62>
             ((FLAG_PAGE_LOCATION < ui32Start) &&
     73a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     73c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
     740:	d307      	bcc.n	752 <check_flash_address_range+0x72>
                ((FLAG_PAGE_LOCATION + AM_HAL_FLASH_PAGE_SIZE) > ui32Start)) ||
     742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     744:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
     748:	d205      	bcs.n	756 <check_flash_address_range+0x76>
            ((FLAG_PAGE_LOCATION > ui32Start) &&
     74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     74c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
     750:	d301      	bcc.n	756 <check_flash_address_range+0x76>
                (FLAG_PAGE_LOCATION <= ui32End))
           )
        {
            return false;
     752:	2300      	movs	r3, #0
     754:	e000      	b.n	758 <check_flash_address_range+0x78>
        }
    }
    return true;
     756:	2301      	movs	r3, #1
}
     758:	4618      	mov	r0, r3
     75a:	3740      	adds	r7, #64	; 0x40
     75c:	46bd      	mov	sp, r7
     75e:	bd80      	pop	{r7, pc}
     760:	10001080 	.word	0x10001080

00000764 <wipe_sram>:
// Wipe Clean SRAM up to the specified address
// CAUTION!!!
// This will wipe the complete SRAM including stack of the caller
// This should be called as the last thing before calling reset
void wipe_sram(void)
{
     764:	b480      	push	{r7}
     766:	af00      	add	r7, sp, #0
    //
    // Wipe SRAM (without using variables).
    //
    // Use the first SRAM location as temp
    // Last SRAM word = lastAddr = SRAM_BASEADDR + g_am_multiboot.ui32SramBytesUsed - 4;
    *((volatile uint32_t *)(SRAM_BASEADDR)) =
     768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
        SRAM_BASEADDR + g_am_multiboot.ui32SramBytesUsed - 4;
     76c:	4b0e      	ldr	r3, [pc, #56]	; (7a8 <wipe_sram+0x44>)
     76e:	695b      	ldr	r3, [r3, #20]
     770:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
     774:	3b04      	subs	r3, #4
    *((volatile uint32_t *)(SRAM_BASEADDR)) =
     776:	6013      	str	r3, [r2, #0]

    // Can not use any local variables from now on
    while ( *((volatile uint32_t *)(SRAM_BASEADDR)) != SRAM_BASEADDR )
     778:	e00b      	b.n	792 <wipe_sram+0x2e>
    {
        *(*((volatile uint32_t **)(SRAM_BASEADDR))) = 0x0;
     77a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     77e:	681b      	ldr	r3, [r3, #0]
     780:	2200      	movs	r2, #0
     782:	601a      	str	r2, [r3, #0]
        *((volatile uint32_t *)(SRAM_BASEADDR)) -= 4;
     784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     788:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     78c:	681b      	ldr	r3, [r3, #0]
     78e:	3b04      	subs	r3, #4
     790:	6013      	str	r3, [r2, #0]
    while ( *((volatile uint32_t *)(SRAM_BASEADDR)) != SRAM_BASEADDR )
     792:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     796:	681b      	ldr	r3, [r3, #0]
     798:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
     79c:	d1ed      	bne.n	77a <wipe_sram+0x16>
    }
}
     79e:	bf00      	nop
     7a0:	46bd      	mov	sp, r7
     7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
     7a6:	4770      	bx	lr
     7a8:	10001060 	.word	0x10001060

000007ac <program_image>:
#endif

// Programs the flash based on g_am_multiboot.pui32WriteAddress, g_am_multiboot.pui8RxBuffer & g_am_multiboot.ui32BytesInBuffer
void
program_image(uint32_t bEncrypted)
{
     7ac:	b580      	push	{r7, lr}
     7ae:	b086      	sub	sp, #24
     7b0:	af00      	add	r7, sp, #0
     7b2:	6078      	str	r0, [r7, #4]
    uint32_t ui32WriteAddr = (uint32_t)g_am_multiboot.pui32WriteAddress;
     7b4:	4b18      	ldr	r3, [pc, #96]	; (818 <program_image+0x6c>)
     7b6:	691b      	ldr	r3, [r3, #16]
     7b8:	617b      	str	r3, [r7, #20]
    uint32_t *pui32ReadAddr = (uint32_t *)g_am_multiboot.pui8RxBuffer;
     7ba:	4b17      	ldr	r3, [pc, #92]	; (818 <program_image+0x6c>)
     7bc:	685b      	ldr	r3, [r3, #4]
     7be:	613b      	str	r3, [r7, #16]
    uint32_t ui32NumBytes = g_am_multiboot.ui32BytesInBuffer;
     7c0:	4b15      	ldr	r3, [pc, #84]	; (818 <program_image+0x6c>)
     7c2:	689b      	ldr	r3, [r3, #8]
     7c4:	60fb      	str	r3, [r7, #12]

    if ( g_am_multiboot.bStoreInSRAM )
     7c6:	4b14      	ldr	r3, [pc, #80]	; (818 <program_image+0x6c>)
     7c8:	7b1b      	ldrb	r3, [r3, #12]
     7ca:	2b00      	cmp	r3, #0
     7cc:	d020      	beq.n	810 <program_image+0x64>
    {
        while ( ui32NumBytes )
     7ce:	e01a      	b.n	806 <program_image+0x5a>
        {
            am_bootloader_program_flash_page(ui32WriteAddr, pui32ReadAddr,
     7d0:	68fb      	ldr	r3, [r7, #12]
     7d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
     7d6:	bf28      	it	cs
     7d8:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
     7dc:	461a      	mov	r2, r3
     7de:	6939      	ldr	r1, [r7, #16]
     7e0:	6978      	ldr	r0, [r7, #20]
     7e2:	f7ff ff33 	bl	64c <am_bootloader_program_flash_page>
                (ui32NumBytes > AM_HAL_FLASH_PAGE_SIZE) ? AM_HAL_FLASH_PAGE_SIZE: ui32NumBytes);
            if ( ui32NumBytes > AM_HAL_FLASH_PAGE_SIZE )
     7e6:	68fb      	ldr	r3, [r7, #12]
     7e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
     7ec:	d90f      	bls.n	80e <program_image+0x62>
            {
                ui32NumBytes -= AM_HAL_FLASH_PAGE_SIZE;
     7ee:	68fb      	ldr	r3, [r7, #12]
     7f0:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
     7f4:	60fb      	str	r3, [r7, #12]
                ui32WriteAddr += AM_HAL_FLASH_PAGE_SIZE;
     7f6:	697b      	ldr	r3, [r7, #20]
     7f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     7fc:	617b      	str	r3, [r7, #20]
                pui32ReadAddr += AM_HAL_FLASH_PAGE_SIZE / 4;
     7fe:	693b      	ldr	r3, [r7, #16]
     800:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     804:	613b      	str	r3, [r7, #16]
        while ( ui32NumBytes )
     806:	68fb      	ldr	r3, [r7, #12]
     808:	2b00      	cmp	r3, #0
     80a:	d1e1      	bne.n	7d0 <program_image+0x24>
        }
    }
    // TODO: Apply necessary protections to flash
    // Need to add flash protection - chunk by chunk including potentially
    // the last partial chunk
}
     80c:	e000      	b.n	810 <program_image+0x64>
                break;
     80e:	bf00      	nop
}
     810:	bf00      	nop
     812:	3718      	adds	r7, #24
     814:	46bd      	mov	sp, r7
     816:	bd80      	pop	{r7, pc}
     818:	10001060 	.word	0x10001060

0000081c <am_multiboot_init>:
//! @return true if the parameters are acceptable.
//
//*****************************************************************************
bool
am_multiboot_init(uint32_t *pBuf, uint32_t bufSize)
{
     81c:	b480      	push	{r7}
     81e:	b085      	sub	sp, #20
     820:	af00      	add	r7, sp, #0
     822:	6078      	str	r0, [r7, #4]
     824:	6039      	str	r1, [r7, #0]
    bool ret = false;
     826:	2300      	movs	r3, #0
     828:	73fb      	strb	r3, [r7, #15]
    if (pBuf && (bufSize >= AM_HAL_FLASH_PAGE_SIZE))
     82a:	687b      	ldr	r3, [r7, #4]
     82c:	2b00      	cmp	r3, #0
     82e:	d008      	beq.n	842 <am_multiboot_init+0x26>
     830:	683b      	ldr	r3, [r7, #0]
     832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
     836:	d304      	bcc.n	842 <am_multiboot_init+0x26>
    {
        g_am_multiboot.pui32UserBuf = pBuf;
     838:	4a05      	ldr	r2, [pc, #20]	; (850 <am_multiboot_init+0x34>)
     83a:	687b      	ldr	r3, [r7, #4]
     83c:	6013      	str	r3, [r2, #0]
        ret = true;
     83e:	2301      	movs	r3, #1
     840:	73fb      	strb	r3, [r7, #15]
    }
    return ret;
     842:	7bfb      	ldrb	r3, [r7, #15]
}
     844:	4618      	mov	r0, r3
     846:	3714      	adds	r7, #20
     848:	46bd      	mov	sp, r7
     84a:	f85d 7b04 	ldr.w	r7, [sp], #4
     84e:	4770      	bx	lr
     850:	10001060 	.word	0x10001060

00000854 <image_start_packet_read>:
//! @return true if the image parameters are acceptable.
//
//*****************************************************************************
bool
image_start_packet_read(am_bootloader_image_t *psImage, uint32_t *pui32Packet)
{
     854:	b580      	push	{r7, lr}
     856:	b090      	sub	sp, #64	; 0x40
     858:	af02      	add	r7, sp, #8
     85a:	6078      	str	r0, [r7, #4]
     85c:	6039      	str	r1, [r7, #0]
    // Get chip specific info
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &sDevice);
#else
    // Get chip specific info
    am_hal_mcuctrl_device_info_get(&sDevice);
     85e:	f107 0308 	add.w	r3, r7, #8
     862:	4618      	mov	r0, r3
     864:	f001 f85e 	bl	1924 <am_hal_mcuctrl_device_info_get>

    //
    // Set the image structure parameters based on the information in the
    // packet.
    //
    psImage->pui32LinkAddress = (uint32_t *)(pui32Packet[1]);
     868:	683b      	ldr	r3, [r7, #0]
     86a:	3304      	adds	r3, #4
     86c:	681b      	ldr	r3, [r3, #0]
     86e:	461a      	mov	r2, r3
     870:	687b      	ldr	r3, [r7, #4]
     872:	601a      	str	r2, [r3, #0]
    psImage->ui32NumBytes = pui32Packet[2];
     874:	683b      	ldr	r3, [r7, #0]
     876:	689a      	ldr	r2, [r3, #8]
     878:	687b      	ldr	r3, [r7, #4]
     87a:	605a      	str	r2, [r3, #4]
    psImage->ui32CRC = pui32Packet[3];
     87c:	683b      	ldr	r3, [r7, #0]
     87e:	68da      	ldr	r2, [r3, #12]
     880:	687b      	ldr	r3, [r7, #4]
     882:	609a      	str	r2, [r3, #8]
    psImage->ui32OverrideGPIO = DEFAULT_OVERRIDE_GPIO;
     884:	687b      	ldr	r3, [r7, #4]
     886:	2212      	movs	r2, #18
     888:	60da      	str	r2, [r3, #12]
    psImage->ui32OverridePolarity = DEFAULT_OVERRIDE_POLARITY;
     88a:	687b      	ldr	r3, [r7, #4]
     88c:	2200      	movs	r2, #0
     88e:	611a      	str	r2, [r3, #16]
    psImage->bEncrypted = 0; // This only indicates Copy-Protection in flash
     890:	687b      	ldr	r3, [r7, #4]
     892:	2200      	movs	r2, #0
     894:	61da      	str	r2, [r3, #28]

    //
    // We'll need to fill in the stack pointer and reset vector a little later
    // in the process.
    //
    psImage->pui32StackPointer = 0;
     896:	687b      	ldr	r3, [r7, #4]
     898:	2200      	movs	r2, #0
     89a:	615a      	str	r2, [r3, #20]
    psImage->pui32ResetVector = 0;
     89c:	687b      	ldr	r3, [r7, #4]
     89e:	2200      	movs	r2, #0
     8a0:	619a      	str	r2, [r3, #24]

    //
    // Check to make sure we're not overwriting the bootloader or the flag page.
    //
    if (!check_flash_address_range((uint32_t)psImage->pui32LinkAddress,
     8a2:	687b      	ldr	r3, [r7, #4]
     8a4:	681b      	ldr	r3, [r3, #0]
     8a6:	461a      	mov	r2, r3
     8a8:	687b      	ldr	r3, [r7, #4]
     8aa:	685b      	ldr	r3, [r3, #4]
     8ac:	4619      	mov	r1, r3
     8ae:	4610      	mov	r0, r2
     8b0:	f7ff ff16 	bl	6e0 <check_flash_address_range>
     8b4:	4603      	mov	r3, r0
     8b6:	f083 0301 	eor.w	r3, r3, #1
     8ba:	b2db      	uxtb	r3, r3
     8bc:	2b00      	cmp	r3, #0
     8be:	d001      	beq.n	8c4 <image_start_packet_read+0x70>
            psImage->ui32NumBytes))
    {
        return false;
     8c0:	2300      	movs	r3, #0
     8c2:	e042      	b.n	94a <image_start_packet_read+0xf6>
    }
    // Determine if we can gather image in SRAM completely before flashing all at once
    // This implementation uses the excess SRAM available in the system
    // CAUTION!!!: For this to work it is essential that the unused SRAM banks are
    // not powered down
    if ((sDevice.ui32SRAMSize - MAX_SRAM_USED) >= psImage->ui32NumBytes)
     8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     8c6:	f5a3 4280 	sub.w	r2, r3, #16384	; 0x4000
     8ca:	687b      	ldr	r3, [r7, #4]
     8cc:	685b      	ldr	r3, [r3, #4]
     8ce:	429a      	cmp	r2, r3
     8d0:	d309      	bcc.n	8e6 <image_start_packet_read+0x92>
    {
        g_am_multiboot.bStoreInSRAM = 1;
     8d2:	4b20      	ldr	r3, [pc, #128]	; (954 <image_start_packet_read+0x100>)
     8d4:	2201      	movs	r2, #1
     8d6:	731a      	strb	r2, [r3, #12]
        g_am_multiboot.pui8RxBuffer = (uint8_t *)(SRAM_BASEADDR + MAX_SRAM_USED);
     8d8:	4b1e      	ldr	r3, [pc, #120]	; (954 <image_start_packet_read+0x100>)
     8da:	4a1f      	ldr	r2, [pc, #124]	; (958 <image_start_packet_read+0x104>)
     8dc:	605a      	str	r2, [r3, #4]
#ifdef MULTIBOOT_SECURE
        g_am_multiboot.ui32SramBytesUsed = sDevice.ui32SRAMSize;
     8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     8e0:	4a1c      	ldr	r2, [pc, #112]	; (954 <image_start_packet_read+0x100>)
     8e2:	6153      	str	r3, [r2, #20]
     8e4:	e010      	b.n	908 <image_start_packet_read+0xb4>
#endif
    }
    else
    {
        g_am_multiboot.bStoreInSRAM = 0;
     8e6:	4b1b      	ldr	r3, [pc, #108]	; (954 <image_start_packet_read+0x100>)
     8e8:	2200      	movs	r2, #0
     8ea:	731a      	strb	r2, [r3, #12]
        if (g_am_multiboot.pui32UserBuf == NULL)
     8ec:	4b19      	ldr	r3, [pc, #100]	; (954 <image_start_packet_read+0x100>)
     8ee:	681b      	ldr	r3, [r3, #0]
     8f0:	2b00      	cmp	r3, #0
     8f2:	d101      	bne.n	8f8 <image_start_packet_read+0xa4>
        {
            return false;
     8f4:	2300      	movs	r3, #0
     8f6:	e028      	b.n	94a <image_start_packet_read+0xf6>
        }
        g_am_multiboot.pui8RxBuffer = (uint8_t *)g_am_multiboot.pui32UserBuf;
     8f8:	4b16      	ldr	r3, [pc, #88]	; (954 <image_start_packet_read+0x100>)
     8fa:	681b      	ldr	r3, [r3, #0]
     8fc:	4a15      	ldr	r2, [pc, #84]	; (954 <image_start_packet_read+0x100>)
     8fe:	6053      	str	r3, [r2, #4]
#ifdef MULTIBOOT_SECURE
        g_am_multiboot.ui32SramBytesUsed = MAX_SRAM_USED;
     900:	4b14      	ldr	r3, [pc, #80]	; (954 <image_start_packet_read+0x100>)
     902:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     906:	615a      	str	r2, [r3, #20]
#endif
    }

#ifdef MULTIBOOT_SECURE
    // Validate the security trailer & Initialize the security params
    if ( init_multiboot_secure(pui32Packet[4], &pui32Packet[5], g_am_multiboot.bStoreInSRAM,
     908:	683b      	ldr	r3, [r7, #0]
     90a:	3310      	adds	r3, #16
     90c:	6818      	ldr	r0, [r3, #0]
     90e:	683b      	ldr	r3, [r7, #0]
     910:	f103 0114 	add.w	r1, r3, #20
     914:	4b0f      	ldr	r3, [pc, #60]	; (954 <image_start_packet_read+0x100>)
     916:	7b1a      	ldrb	r2, [r3, #12]
     918:	687b      	ldr	r3, [r7, #4]
     91a:	331c      	adds	r3, #28
     91c:	9300      	str	r3, [sp, #0]
     91e:	687b      	ldr	r3, [r7, #4]
     920:	f000 fddc 	bl	14dc <init_multiboot_secure>
     924:	4603      	mov	r3, r0
     926:	2b00      	cmp	r3, #0
     928:	d001      	beq.n	92e <image_start_packet_read+0xda>
                               psImage, &psImage->bEncrypted) != 0 )
    {
        return false;
     92a:	2300      	movs	r3, #0
     92c:	e00d      	b.n	94a <image_start_packet_read+0xf6>
#endif
    //
    // Otherwise, the image is presumed to be reasonable. Set our global
    // variables based on the new image structure.
    //
    g_am_multiboot.pui32WriteAddress = psImage->pui32LinkAddress;
     92e:	687b      	ldr	r3, [r7, #4]
     930:	681b      	ldr	r3, [r3, #0]
     932:	4a08      	ldr	r2, [pc, #32]	; (954 <image_start_packet_read+0x100>)
     934:	6113      	str	r3, [r2, #16]
    g_ui32BytesReceived = 0;
     936:	4b09      	ldr	r3, [pc, #36]	; (95c <image_start_packet_read+0x108>)
     938:	2200      	movs	r2, #0
     93a:	601a      	str	r2, [r3, #0]
    g_am_multiboot.ui32BytesInBuffer = 0;
     93c:	4b05      	ldr	r3, [pc, #20]	; (954 <image_start_packet_read+0x100>)
     93e:	2200      	movs	r2, #0
     940:	609a      	str	r2, [r3, #8]
    g_ui32CRC = 0;
     942:	4b07      	ldr	r3, [pc, #28]	; (960 <image_start_packet_read+0x10c>)
     944:	2200      	movs	r2, #0
     946:	601a      	str	r2, [r3, #0]
    return true;
     948:	2301      	movs	r3, #1
}
     94a:	4618      	mov	r0, r3
     94c:	3738      	adds	r7, #56	; 0x38
     94e:	46bd      	mov	sp, r7
     950:	bd80      	pop	{r7, pc}
     952:	bf00      	nop
     954:	10001060 	.word	0x10001060
     958:	10004000 	.word	0x10004000
     95c:	10001078 	.word	0x10001078
     960:	1000107c 	.word	0x1000107c

00000964 <image_data_packet_read>:
//! @return None.
//
//*****************************************************************************
void
image_data_packet_read(uint8_t *pui8Src, uint32_t ui32Size)
{
     964:	b580      	push	{r7, lr}
     966:	b084      	sub	sp, #16
     968:	af00      	add	r7, sp, #0
     96a:	6078      	str	r0, [r7, #4]
     96c:	6039      	str	r1, [r7, #0]
    uint32_t i;
    //
    // Loop through the data, copying it into the global buffer.
    //
    for ( i = 0; i < ui32Size; i++ )
     96e:	2300      	movs	r3, #0
     970:	60fb      	str	r3, [r7, #12]
     972:	e06b      	b.n	a4c <image_data_packet_read+0xe8>
    {
        g_am_multiboot.pui8RxBuffer[g_am_multiboot.ui32BytesInBuffer] = *pui8Src++;
     974:	4b39      	ldr	r3, [pc, #228]	; (a5c <image_data_packet_read+0xf8>)
     976:	685a      	ldr	r2, [r3, #4]
     978:	4b38      	ldr	r3, [pc, #224]	; (a5c <image_data_packet_read+0xf8>)
     97a:	689b      	ldr	r3, [r3, #8]
     97c:	441a      	add	r2, r3
     97e:	687b      	ldr	r3, [r7, #4]
     980:	1c59      	adds	r1, r3, #1
     982:	6079      	str	r1, [r7, #4]
     984:	781b      	ldrb	r3, [r3, #0]
     986:	7013      	strb	r3, [r2, #0]

        //
        // Keep track of how much data we've copied into the SRAM buffer.
        //
        g_am_multiboot.ui32BytesInBuffer++;
     988:	4b34      	ldr	r3, [pc, #208]	; (a5c <image_data_packet_read+0xf8>)
     98a:	689b      	ldr	r3, [r3, #8]
     98c:	3301      	adds	r3, #1
     98e:	4a33      	ldr	r2, [pc, #204]	; (a5c <image_data_packet_read+0xf8>)
     990:	6093      	str	r3, [r2, #8]
        g_ui32BytesReceived++;
     992:	4b33      	ldr	r3, [pc, #204]	; (a60 <image_data_packet_read+0xfc>)
     994:	681b      	ldr	r3, [r3, #0]
     996:	3301      	adds	r3, #1
     998:	4a31      	ldr	r2, [pc, #196]	; (a60 <image_data_packet_read+0xfc>)
     99a:	6013      	str	r3, [r2, #0]

        //
        // Whenever we hit a page boundary or the end of the image, we should
        // write to flash.
        //
        if ( (!g_am_multiboot.bStoreInSRAM && (g_am_multiboot.ui32BytesInBuffer == AM_HAL_FLASH_PAGE_SIZE)) ||
     99c:	4b2f      	ldr	r3, [pc, #188]	; (a5c <image_data_packet_read+0xf8>)
     99e:	7b1b      	ldrb	r3, [r3, #12]
     9a0:	f083 0301 	eor.w	r3, r3, #1
     9a4:	b2db      	uxtb	r3, r3
     9a6:	2b00      	cmp	r3, #0
     9a8:	d004      	beq.n	9b4 <image_data_packet_read+0x50>
     9aa:	4b2c      	ldr	r3, [pc, #176]	; (a5c <image_data_packet_read+0xf8>)
     9ac:	689b      	ldr	r3, [r3, #8]
     9ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
     9b2:	d005      	beq.n	9c0 <image_data_packet_read+0x5c>
                 g_ui32BytesReceived == g_sImage.ui32NumBytes )
     9b4:	4b2b      	ldr	r3, [pc, #172]	; (a64 <image_data_packet_read+0x100>)
     9b6:	685a      	ldr	r2, [r3, #4]
     9b8:	4b29      	ldr	r3, [pc, #164]	; (a60 <image_data_packet_read+0xfc>)
     9ba:	681b      	ldr	r3, [r3, #0]
        if ( (!g_am_multiboot.bStoreInSRAM && (g_am_multiboot.ui32BytesInBuffer == AM_HAL_FLASH_PAGE_SIZE)) ||
     9bc:	429a      	cmp	r2, r3
     9be:	d142      	bne.n	a46 <image_data_packet_read+0xe2>
        {
            //
            // Run a quick CRC on the received bytes, holding on to the result in a
            // global variable, so we can pick up where we left off on the next pass.
            //
            am_bootloader_partial_crc32(g_am_multiboot.pui8RxBuffer, g_am_multiboot.ui32BytesInBuffer, &g_ui32CRC);
     9c0:	4b26      	ldr	r3, [pc, #152]	; (a5c <image_data_packet_read+0xf8>)
     9c2:	6858      	ldr	r0, [r3, #4]
     9c4:	4b25      	ldr	r3, [pc, #148]	; (a5c <image_data_packet_read+0xf8>)
     9c6:	689b      	ldr	r3, [r3, #8]
     9c8:	4a27      	ldr	r2, [pc, #156]	; (a68 <image_data_packet_read+0x104>)
     9ca:	4619      	mov	r1, r3
     9cc:	f7ff fba6 	bl	11c <am_bootloader_partial_crc32>

#ifdef MULTIBOOT_SECURE
            // Decrypt in place
            multiboot_secure_decrypt(g_am_multiboot.pui8RxBuffer, g_am_multiboot.ui32BytesInBuffer);
     9d0:	4b22      	ldr	r3, [pc, #136]	; (a5c <image_data_packet_read+0xf8>)
     9d2:	685a      	ldr	r2, [r3, #4]
     9d4:	4b21      	ldr	r3, [pc, #132]	; (a5c <image_data_packet_read+0xf8>)
     9d6:	689b      	ldr	r3, [r3, #8]
     9d8:	4619      	mov	r1, r3
     9da:	4610      	mov	r0, r2
     9dc:	f000 fdf4 	bl	15c8 <multiboot_secure_decrypt>
            //
            // If this is the first block of our new image, we need to record
            // the reset vector and stack pointer information for inclusion in
            // the flag page.
            //
            if ( g_am_multiboot.bStoreInSRAM || (g_ui32BytesReceived <= AM_HAL_FLASH_PAGE_SIZE) )
     9e0:	4b1e      	ldr	r3, [pc, #120]	; (a5c <image_data_packet_read+0xf8>)
     9e2:	7b1b      	ldrb	r3, [r3, #12]
     9e4:	2b00      	cmp	r3, #0
     9e6:	d104      	bne.n	9f2 <image_data_packet_read+0x8e>
     9e8:	4b1d      	ldr	r3, [pc, #116]	; (a60 <image_data_packet_read+0xfc>)
     9ea:	681b      	ldr	r3, [r3, #0]
     9ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
     9f0:	d80c      	bhi.n	a0c <image_data_packet_read+0xa8>
            {
                g_sImage.pui32StackPointer = (uint32_t *)(((uint32_t *)g_am_multiboot.pui8RxBuffer)[0]);
     9f2:	4b1a      	ldr	r3, [pc, #104]	; (a5c <image_data_packet_read+0xf8>)
     9f4:	685b      	ldr	r3, [r3, #4]
     9f6:	681b      	ldr	r3, [r3, #0]
     9f8:	461a      	mov	r2, r3
     9fa:	4b1a      	ldr	r3, [pc, #104]	; (a64 <image_data_packet_read+0x100>)
     9fc:	615a      	str	r2, [r3, #20]
                g_sImage.pui32ResetVector = (uint32_t *)(((uint32_t *)g_am_multiboot.pui8RxBuffer)[1]);
     9fe:	4b17      	ldr	r3, [pc, #92]	; (a5c <image_data_packet_read+0xf8>)
     a00:	685b      	ldr	r3, [r3, #4]
     a02:	3304      	adds	r3, #4
     a04:	681b      	ldr	r3, [r3, #0]
     a06:	461a      	mov	r2, r3
     a08:	4b16      	ldr	r3, [pc, #88]	; (a64 <image_data_packet_read+0x100>)
     a0a:	619a      	str	r2, [r3, #24]
            }

            if ( !g_am_multiboot.bStoreInSRAM )
     a0c:	4b13      	ldr	r3, [pc, #76]	; (a5c <image_data_packet_read+0xf8>)
     a0e:	7b1b      	ldrb	r3, [r3, #12]
     a10:	f083 0301 	eor.w	r3, r3, #1
     a14:	b2db      	uxtb	r3, r3
     a16:	2b00      	cmp	r3, #0
     a18:	d015      	beq.n	a46 <image_data_packet_read+0xe2>
            {
                am_bootloader_program_flash_page((uint32_t)g_am_multiboot.pui32WriteAddress,
     a1a:	4b10      	ldr	r3, [pc, #64]	; (a5c <image_data_packet_read+0xf8>)
     a1c:	691b      	ldr	r3, [r3, #16]
     a1e:	4618      	mov	r0, r3
                    (uint32_t *)g_am_multiboot.pui8RxBuffer, g_am_multiboot.ui32BytesInBuffer);
     a20:	4b0e      	ldr	r3, [pc, #56]	; (a5c <image_data_packet_read+0xf8>)
     a22:	6859      	ldr	r1, [r3, #4]
                am_bootloader_program_flash_page((uint32_t)g_am_multiboot.pui32WriteAddress,
     a24:	4b0d      	ldr	r3, [pc, #52]	; (a5c <image_data_packet_read+0xf8>)
     a26:	689b      	ldr	r3, [r3, #8]
     a28:	461a      	mov	r2, r3
     a2a:	f7ff fe0f 	bl	64c <am_bootloader_program_flash_page>
                //
                // Adjust the global variables.
                //
                g_am_multiboot.pui32WriteAddress += (g_am_multiboot.ui32BytesInBuffer / 4);
     a2e:	4b0b      	ldr	r3, [pc, #44]	; (a5c <image_data_packet_read+0xf8>)
     a30:	691a      	ldr	r2, [r3, #16]
     a32:	4b0a      	ldr	r3, [pc, #40]	; (a5c <image_data_packet_read+0xf8>)
     a34:	689b      	ldr	r3, [r3, #8]
     a36:	f023 0303 	bic.w	r3, r3, #3
     a3a:	4413      	add	r3, r2
     a3c:	4a07      	ldr	r2, [pc, #28]	; (a5c <image_data_packet_read+0xf8>)
     a3e:	6113      	str	r3, [r2, #16]
                g_am_multiboot.ui32BytesInBuffer = 0;
     a40:	4b06      	ldr	r3, [pc, #24]	; (a5c <image_data_packet_read+0xf8>)
     a42:	2200      	movs	r2, #0
     a44:	609a      	str	r2, [r3, #8]
    for ( i = 0; i < ui32Size; i++ )
     a46:	68fb      	ldr	r3, [r7, #12]
     a48:	3301      	adds	r3, #1
     a4a:	60fb      	str	r3, [r7, #12]
     a4c:	68fa      	ldr	r2, [r7, #12]
     a4e:	683b      	ldr	r3, [r7, #0]
     a50:	429a      	cmp	r2, r3
     a52:	d38f      	bcc.n	974 <image_data_packet_read+0x10>
            }
        }
    }
}
     a54:	bf00      	nop
     a56:	3710      	adds	r7, #16
     a58:	46bd      	mov	sp, r7
     a5a:	bd80      	pop	{r7, pc}
     a5c:	10001060 	.word	0x10001060
     a60:	10001078 	.word	0x10001078
     a64:	10001000 	.word	0x10001000
     a68:	1000107c 	.word	0x1000107c

00000a6c <am_multiboot_check_boot_from_flash>:
//! @return true if it's okay to boot from flash (returns the image structure).
//
//*****************************************************************************
bool
am_multiboot_check_boot_from_flash(bool *pbOverride, am_bootloader_image_t **ppsImage)
{
     a6c:	b580      	push	{r7, lr}
     a6e:	b084      	sub	sp, #16
     a70:	af00      	add	r7, sp, #0
     a72:	6078      	str	r0, [r7, #4]
     a74:	6039      	str	r1, [r7, #0]
    bool bValid = false;
     a76:	2300      	movs	r3, #0
     a78:	73fb      	strb	r3, [r7, #15]
    // If we're using a flag page, we can run a full CRC check to verify the
    // integrity of our image. If not, we'll just check the override pin.
    // First check if the flag page is valid
    //
    if ( USE_FLAG_PAGE &&
        ( am_bootloader_validate_structure((uint32_t *)g_psBootImage, sizeof(*g_psBootImage)) ))
     a7a:	4b22      	ldr	r3, [pc, #136]	; (b04 <am_multiboot_check_boot_from_flash+0x98>)
     a7c:	681b      	ldr	r3, [r3, #0]
     a7e:	2124      	movs	r1, #36	; 0x24
     a80:	4618      	mov	r0, r3
     a82:	f7ff fd4b 	bl	51c <am_bootloader_validate_structure>
     a86:	4603      	mov	r3, r0
    if ( USE_FLAG_PAGE &&
     a88:	2b00      	cmp	r3, #0
     a8a:	d01d      	beq.n	ac8 <am_multiboot_check_boot_from_flash+0x5c>
        //
        // Check the flag page (including the stored CRC) and the override pin
        // to make sure we have a valid image and the host isn't requesting an
        // upgrade.
        //
        if (am_hal_bootloader_override_check(g_psBootImage))
     a8c:	4b1d      	ldr	r3, [pc, #116]	; (b04 <am_multiboot_check_boot_from_flash+0x98>)
     a8e:	681b      	ldr	r3, [r3, #0]
     a90:	4618      	mov	r0, r3
     a92:	f7ff fbcb 	bl	22c <am_hal_bootloader_override_check>
     a96:	4603      	mov	r3, r0
     a98:	2b00      	cmp	r3, #0
     a9a:	d003      	beq.n	aa4 <am_multiboot_check_boot_from_flash+0x38>
        {
            *pbOverride = true;
     a9c:	687b      	ldr	r3, [r7, #4]
     a9e:	2201      	movs	r2, #1
     aa0:	701a      	strb	r2, [r3, #0]
     aa2:	e029      	b.n	af8 <am_multiboot_check_boot_from_flash+0x8c>
        }
        else
        {
            *pbOverride = false;
     aa4:	687b      	ldr	r3, [r7, #4]
     aa6:	2200      	movs	r2, #0
     aa8:	701a      	strb	r2, [r3, #0]
            if ( am_bootloader_flash_check(g_psBootImage) )
     aaa:	4b16      	ldr	r3, [pc, #88]	; (b04 <am_multiboot_check_boot_from_flash+0x98>)
     aac:	681b      	ldr	r3, [r3, #0]
     aae:	4618      	mov	r0, r3
     ab0:	f7ff fb66 	bl	180 <am_bootloader_flash_check>
     ab4:	4603      	mov	r3, r0
     ab6:	2b00      	cmp	r3, #0
     ab8:	d01e      	beq.n	af8 <am_multiboot_check_boot_from_flash+0x8c>
            {
                *ppsImage = g_psBootImage;
     aba:	4b12      	ldr	r3, [pc, #72]	; (b04 <am_multiboot_check_boot_from_flash+0x98>)
     abc:	681a      	ldr	r2, [r3, #0]
     abe:	683b      	ldr	r3, [r7, #0]
     ac0:	601a      	str	r2, [r3, #0]
                bValid = true;
     ac2:	2301      	movs	r3, #1
     ac4:	73fb      	strb	r3, [r7, #15]
     ac6:	e017      	b.n	af8 <am_multiboot_check_boot_from_flash+0x8c>
        //
        // Check the override pin to make sure the host isn't requesting an
        // upgrade, and do a quick check to make sure an image actually exists
        // at the default application location.
        //
        if (am_hal_bootloader_override_check(&g_sImage))
     ac8:	480f      	ldr	r0, [pc, #60]	; (b08 <am_multiboot_check_boot_from_flash+0x9c>)
     aca:	f7ff fbaf 	bl	22c <am_hal_bootloader_override_check>
     ace:	4603      	mov	r3, r0
     ad0:	2b00      	cmp	r3, #0
     ad2:	d003      	beq.n	adc <am_multiboot_check_boot_from_flash+0x70>
        {
            *pbOverride = true;
     ad4:	687b      	ldr	r3, [r7, #4]
     ad6:	2201      	movs	r2, #1
     ad8:	701a      	strb	r2, [r3, #0]
     ada:	e00d      	b.n	af8 <am_multiboot_check_boot_from_flash+0x8c>
        }
        else
        {
            *pbOverride = false;
     adc:	687b      	ldr	r3, [r7, #4]
     ade:	2200      	movs	r2, #0
     ae0:	701a      	strb	r2, [r3, #0]
            if ( *(g_sImage.pui32LinkAddress) != 0xFFFFFFFF)
     ae2:	4b09      	ldr	r3, [pc, #36]	; (b08 <am_multiboot_check_boot_from_flash+0x9c>)
     ae4:	681b      	ldr	r3, [r3, #0]
     ae6:	681b      	ldr	r3, [r3, #0]
     ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
     aec:	d004      	beq.n	af8 <am_multiboot_check_boot_from_flash+0x8c>
            {
                *ppsImage = &g_sImage;
     aee:	683b      	ldr	r3, [r7, #0]
     af0:	4a05      	ldr	r2, [pc, #20]	; (b08 <am_multiboot_check_boot_from_flash+0x9c>)
     af2:	601a      	str	r2, [r3, #0]
                bValid = true;
     af4:	2301      	movs	r3, #1
     af6:	73fb      	strb	r3, [r7, #15]
            }
        }
    }
    return bValid;
     af8:	7bfb      	ldrb	r3, [r7, #15]
}
     afa:	4618      	mov	r0, r3
     afc:	3710      	adds	r7, #16
     afe:	46bd      	mov	sp, r7
     b00:	bd80      	pop	{r7, pc}
     b02:	bf00      	nop
     b04:	10001024 	.word	0x10001024
     b08:	10001000 	.word	0x10001000

00000b0c <ser_out>:
volatile bool g_bUartImageValid = false;

//
void
ser_out(uint32_t ui32Module, unsigned char data)
{
     b0c:	b480      	push	{r7}
     b0e:	b083      	sub	sp, #12
     b10:	af00      	add	r7, sp, #0
     b12:	6078      	str	r0, [r7, #4]
     b14:	460b      	mov	r3, r1
     b16:	70fb      	strb	r3, [r7, #3]
    AM_REGn(UART, ui32Module, DR) = data;
     b18:	687b      	ldr	r3, [r7, #4]
     b1a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
     b1e:	331c      	adds	r3, #28
     b20:	031b      	lsls	r3, r3, #12
     b22:	461a      	mov	r2, r3
     b24:	78fb      	ldrb	r3, [r7, #3]
     b26:	6013      	str	r3, [r2, #0]
    while ( AM_BFRn(UART, ui32Module, FR, TXFF) );
     b28:	bf00      	nop
     b2a:	687b      	ldr	r3, [r7, #4]
     b2c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
     b30:	331c      	adds	r3, #28
     b32:	031b      	lsls	r3, r3, #12
     b34:	3318      	adds	r3, #24
     b36:	681b      	ldr	r3, [r3, #0]
     b38:	f003 0320 	and.w	r3, r3, #32
     b3c:	2b00      	cmp	r3, #0
     b3e:	d1f4      	bne.n	b2a <ser_out+0x1e>
}
     b40:	bf00      	nop
     b42:	370c      	adds	r7, #12
     b44:	46bd      	mov	sp, r7
     b46:	f85d 7b04 	ldr.w	r7, [sp], #4
     b4a:	4770      	bx	lr

00000b4c <am_multiboot_setup_serial>:
//! @return none
//
//*****************************************************************************
void
am_multiboot_setup_serial(int32_t i32Module, uint32_t ui32BaudRate)
{
     b4c:	b580      	push	{r7, lr}
     b4e:	b084      	sub	sp, #16
     b50:	af00      	add	r7, sp, #0
     b52:	6078      	str	r0, [r7, #4]
     b54:	6039      	str	r1, [r7, #0]
    uint32_t uartInt = AM_HAL_INTERRUPT_UART;
     b56:	231e      	movs	r3, #30
     b58:	60fb      	str	r3, [r7, #12]
    command = 0;
     b5a:	4b23      	ldr	r3, [pc, #140]	; (be8 <am_multiboot_setup_serial+0x9c>)
     b5c:	2200      	movs	r2, #0
     b5e:	601a      	str	r2, [r3, #0]
    uart_RX_head = uart_RX_tail = uart_RX_cnt = 0;
     b60:	2300      	movs	r3, #0
     b62:	4a22      	ldr	r2, [pc, #136]	; (bec <am_multiboot_setup_serial+0xa0>)
     b64:	6013      	str	r3, [r2, #0]
     b66:	4a22      	ldr	r2, [pc, #136]	; (bf0 <am_multiboot_setup_serial+0xa4>)
     b68:	6013      	str	r3, [r2, #0]
     b6a:	4a22      	ldr	r2, [pc, #136]	; (bf4 <am_multiboot_setup_serial+0xa8>)
     b6c:	6013      	str	r3, [r2, #0]
    RX_FIFO_FULL = 0;  // check serial FIFO operation
     b6e:	4b22      	ldr	r3, [pc, #136]	; (bf8 <am_multiboot_setup_serial+0xac>)
     b70:	2200      	movs	r2, #0
     b72:	701a      	strb	r2, [r3, #0]
    RX_FIFO_EMPTY = 1;
     b74:	4b21      	ldr	r3, [pc, #132]	; (bfc <am_multiboot_setup_serial+0xb0>)
     b76:	2201      	movs	r2, #1
     b78:	701a      	strb	r2, [r3, #0]
    packet_cnt = 0xff;
     b7a:	4b21      	ldr	r3, [pc, #132]	; (c00 <am_multiboot_setup_serial+0xb4>)
     b7c:	22ff      	movs	r2, #255	; 0xff
     b7e:	601a      	str	r2, [r3, #0]

    //
    // Power on the selected UART
    //
    am_hal_uart_pwrctrl_enable(i32Module);
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	4618      	mov	r0, r3
     b84:	f001 f94a 	bl	1e1c <am_hal_uart_pwrctrl_enable>

    //
    // Start the UART interface, apply the desired configuration settings, and
    // enable the FIFOs.
    //
    am_hal_uart_clock_enable(i32Module);
     b88:	687b      	ldr	r3, [r7, #4]
     b8a:	4618      	mov	r0, r3
     b8c:	f001 f95a 	bl	1e44 <am_hal_uart_clock_enable>

    //
    // Disable the UART before configuring it.
    //
    am_hal_uart_disable(i32Module);
     b90:	687b      	ldr	r3, [r7, #4]
     b92:	4618      	mov	r0, r3
     b94:	f001 f92c 	bl	1df0 <am_hal_uart_disable>

    //
    // Configure the UART.
    //
    g_sUartConfig.ui32BaudRate = ui32BaudRate;
     b98:	4a1a      	ldr	r2, [pc, #104]	; (c04 <am_multiboot_setup_serial+0xb8>)
     b9a:	683b      	ldr	r3, [r7, #0]
     b9c:	6013      	str	r3, [r2, #0]
    am_hal_uart_config(i32Module, &g_sUartConfig);
     b9e:	687b      	ldr	r3, [r7, #4]
     ba0:	4918      	ldr	r1, [pc, #96]	; (c04 <am_multiboot_setup_serial+0xb8>)
     ba2:	4618      	mov	r0, r3
     ba4:	f001 f8c0 	bl	1d28 <am_hal_uart_config>

    //
    // Enable the UART FIFO.
    //
   am_hal_uart_fifo_config(i32Module,
     ba8:	687b      	ldr	r3, [r7, #4]
     baa:	211b      	movs	r1, #27
     bac:	4618      	mov	r0, r3
     bae:	f001 f95b 	bl	1e68 <am_hal_uart_fifo_config>

//    am_util_delay_ms(100);
    //
    // Enable the UART.
    //
    am_hal_uart_enable(i32Module);
     bb2:	687b      	ldr	r3, [r7, #4]
     bb4:	4618      	mov	r0, r3
     bb6:	f001 f905 	bl	1dc4 <am_hal_uart_enable>

    am_hal_uart_int_clear(i32Module, AM_HAL_UART_INT_RX | AM_HAL_UART_INT_RX_TMOUT);
     bba:	687b      	ldr	r3, [r7, #4]
     bbc:	2150      	movs	r1, #80	; 0x50
     bbe:	4618      	mov	r0, r3
     bc0:	f001 f8f2 	bl	1da8 <am_hal_uart_int_clear>
    am_hal_uart_int_enable(i32Module, AM_HAL_UART_INT_RX | AM_HAL_UART_INT_RX_TMOUT);
     bc4:	687b      	ldr	r3, [r7, #4]
     bc6:	2150      	movs	r1, #80	; 0x50
     bc8:	4618      	mov	r0, r3
     bca:	f001 f8f3 	bl	1db4 <am_hal_uart_int_enable>

#ifndef AM_PART_APOLLO
    if (i32Module == 1)
     bce:	687b      	ldr	r3, [r7, #4]
     bd0:	2b01      	cmp	r3, #1
     bd2:	d101      	bne.n	bd8 <am_multiboot_setup_serial+0x8c>
    {
        uartInt = AM_HAL_INTERRUPT_UART1;
     bd4:	231f      	movs	r3, #31
     bd6:	60fb      	str	r3, [r7, #12]
    }
#endif
    am_hal_interrupt_enable(uartInt);
     bd8:	68f8      	ldr	r0, [r7, #12]
     bda:	f000 fe47 	bl	186c <am_hal_interrupt_enable>
}
     bde:	bf00      	nop
     be0:	3710      	adds	r7, #16
     be2:	46bd      	mov	sp, r7
     be4:	bd80      	pop	{r7, pc}
     be6:	bf00      	nop
     be8:	100010d4 	.word	0x100010d4
     bec:	100010b4 	.word	0x100010b4
     bf0:	100010cc 	.word	0x100010cc
     bf4:	100010bc 	.word	0x100010bc
     bf8:	100010e0 	.word	0x100010e0
     bfc:	100010c9 	.word	0x100010c9
     c00:	100010b8 	.word	0x100010b8
     c04:	10001028 	.word	0x10001028

00000c08 <am_multiboot_uart_isr_handler>:
//! @return none.
//
//*****************************************************************************
void
am_multiboot_uart_isr_handler(uint32_t ui32Module)
{
     c08:	b580      	push	{r7, lr}
     c0a:	b088      	sub	sp, #32
     c0c:	af00      	add	r7, sp, #0
     c0e:	6078      	str	r0, [r7, #4]
    uint32_t *rx_pui32Packet;
    unsigned char send_byte_cnt, flush = 0;
     c10:	2300      	movs	r3, #0
     c12:	77bb      	strb	r3, [r7, #30]
    uint32_t cnt = 0;
     c14:	2300      	movs	r3, #0
     c16:	61bb      	str	r3, [r7, #24]

    //
    // Check to see what caused this interrupt, then clear the bit from the
    // interrupt register.
    //
    ui32Status = am_hal_uart_int_status_get(ui32Module, false);
     c18:	2100      	movs	r1, #0
     c1a:	6878      	ldr	r0, [r7, #4]
     c1c:	f001 f8ba 	bl	1d94 <am_hal_uart_int_status_get>
     c20:	6178      	str	r0, [r7, #20]
    am_hal_uart_int_clear(ui32Module, ui32Status);
     c22:	6979      	ldr	r1, [r7, #20]
     c24:	6878      	ldr	r0, [r7, #4]
     c26:	f001 f8bf 	bl	1da8 <am_hal_uart_int_clear>
    //
    // Service the uart FIFO.
    //


    RX_FIFO_EMPTY = 0;
     c2a:	4ba6      	ldr	r3, [pc, #664]	; (ec4 <am_multiboot_uart_isr_handler+0x2bc>)
     c2c:	2200      	movs	r2, #0
     c2e:	701a      	strb	r2, [r3, #0]
    // Read the UART FIFO till we have data
    while ( !AM_BFRn(UART, ui32Module, FR, RXFE) )
     c30:	e16a      	b.n	f08 <am_multiboot_uart_isr_handler+0x300>
    {
        if ( uart_RX_head == MAX_BUFFER )
     c32:	4ba5      	ldr	r3, [pc, #660]	; (ec8 <am_multiboot_uart_isr_handler+0x2c0>)
     c34:	681b      	ldr	r3, [r3, #0]
     c36:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
     c3a:	d10c      	bne.n	c56 <am_multiboot_uart_isr_handler+0x4e>
        {
            // We should never reach here!
            RX_FIFO_FULL = 1;
     c3c:	4ba3      	ldr	r3, [pc, #652]	; (ecc <am_multiboot_uart_isr_handler+0x2c4>)
     c3e:	2201      	movs	r2, #1
     c40:	701a      	strb	r2, [r3, #0]
            tx_pui32Packet = (uint32_t *) uart_TX_buffer;
     c42:	4ba3      	ldr	r3, [pc, #652]	; (ed0 <am_multiboot_uart_isr_handler+0x2c8>)
     c44:	60bb      	str	r3, [r7, #8]
            //
            // Bad packet; Send back an error.
            //
            tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
     c46:	68bb      	ldr	r3, [r7, #8]
     c48:	2205      	movs	r2, #5
     c4a:	601a      	str	r2, [r3, #0]
            flush = 1;
     c4c:	2301      	movs	r3, #1
     c4e:	77bb      	strb	r3, [r7, #30]
            send_byte_cnt = 4;
     c50:	2304      	movs	r3, #4
     c52:	77fb      	strb	r3, [r7, #31]
            break;
     c54:	e164      	b.n	f20 <am_multiboot_uart_isr_handler+0x318>
        }
        rxData = AM_REGn(UART, ui32Module, DR);
     c56:	687b      	ldr	r3, [r7, #4]
     c58:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
     c5c:	331c      	adds	r3, #28
     c5e:	031b      	lsls	r3, r3, #12
     c60:	681b      	ldr	r3, [r3, #0]
     c62:	74fb      	strb	r3, [r7, #19]
        uart_RX_buffer[uart_RX_head++] = rxData;
     c64:	4b98      	ldr	r3, [pc, #608]	; (ec8 <am_multiboot_uart_isr_handler+0x2c0>)
     c66:	681b      	ldr	r3, [r3, #0]
     c68:	1c5a      	adds	r2, r3, #1
     c6a:	4997      	ldr	r1, [pc, #604]	; (ec8 <am_multiboot_uart_isr_handler+0x2c0>)
     c6c:	600a      	str	r2, [r1, #0]
     c6e:	4999      	ldr	r1, [pc, #612]	; (ed4 <am_multiboot_uart_isr_handler+0x2cc>)
     c70:	7cfa      	ldrb	r2, [r7, #19]
     c72:	54ca      	strb	r2, [r1, r3]

        uart_RX_cnt++;
     c74:	4b98      	ldr	r3, [pc, #608]	; (ed8 <am_multiboot_uart_isr_handler+0x2d0>)
     c76:	681b      	ldr	r3, [r3, #0]
     c78:	3301      	adds	r3, #1
     c7a:	4a97      	ldr	r2, [pc, #604]	; (ed8 <am_multiboot_uart_isr_handler+0x2d0>)
     c7c:	6013      	str	r3, [r2, #0]
        cnt++;
     c7e:	69bb      	ldr	r3, [r7, #24]
     c80:	3301      	adds	r3, #1
     c82:	61bb      	str	r3, [r7, #24]

        if ( uart_RX_cnt == 4 ) // cmd received, wait for parameters
     c84:	4b94      	ldr	r3, [pc, #592]	; (ed8 <am_multiboot_uart_isr_handler+0x2d0>)
     c86:	681b      	ldr	r3, [r3, #0]
     c88:	2b04      	cmp	r3, #4
     c8a:	d13e      	bne.n	d0a <am_multiboot_uart_isr_handler+0x102>
        {
            command = uart_RX_buffer[0];
     c8c:	4b91      	ldr	r3, [pc, #580]	; (ed4 <am_multiboot_uart_isr_handler+0x2cc>)
     c8e:	781b      	ldrb	r3, [r3, #0]
     c90:	b2db      	uxtb	r3, r3
     c92:	461a      	mov	r2, r3
     c94:	4b91      	ldr	r3, [pc, #580]	; (edc <am_multiboot_uart_isr_handler+0x2d4>)
     c96:	601a      	str	r2, [r3, #0]
            switch (command)
     c98:	4b90      	ldr	r3, [pc, #576]	; (edc <am_multiboot_uart_isr_handler+0x2d4>)
     c9a:	681b      	ldr	r3, [r3, #0]
     c9c:	2b09      	cmp	r3, #9
     c9e:	d82f      	bhi.n	d00 <am_multiboot_uart_isr_handler+0xf8>
     ca0:	a201      	add	r2, pc, #4	; (adr r2, ca8 <am_multiboot_uart_isr_handler+0xa0>)
     ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     ca6:	bf00      	nop
     ca8:	00000ce9 	.word	0x00000ce9
     cac:	00000cf1 	.word	0x00000cf1
     cb0:	00000d09 	.word	0x00000d09
     cb4:	00000d09 	.word	0x00000d09
     cb8:	00000cd9 	.word	0x00000cd9
     cbc:	00000cd1 	.word	0x00000cd1
     cc0:	00000ce1 	.word	0x00000ce1
     cc4:	00000d01 	.word	0x00000d01
     cc8:	00000d01 	.word	0x00000d01
     ccc:	00000cf9 	.word	0x00000cf9
#ifndef MULTIBOOT_SECURE
                    packet_cnt = 16;
#endif
                    break;
                case AM_BOOTLOADER_SET_OVERRIDE_CMD:
                    packet_cnt = 12;
     cd0:	4b83      	ldr	r3, [pc, #524]	; (ee0 <am_multiboot_uart_isr_handler+0x2d8>)
     cd2:	220c      	movs	r2, #12
     cd4:	601a      	str	r2, [r3, #0]
                    break;
     cd6:	e018      	b.n	d0a <am_multiboot_uart_isr_handler+0x102>
                case AM_BOOTLOADER_NEW_PACKET:
                    //    packet_cnt = pkt_size+8;
                    break;
                case AM_BOOTLOADER_RESET:
                    packet_cnt = 4;
     cd8:	4b81      	ldr	r3, [pc, #516]	; (ee0 <am_multiboot_uart_isr_handler+0x2d8>)
     cda:	2204      	movs	r2, #4
     cdc:	601a      	str	r2, [r3, #0]
                    break;
     cde:	e014      	b.n	d0a <am_multiboot_uart_isr_handler+0x102>
                case AM_BOOTLOADER_BL_VERSION_CMD:
                    packet_cnt = 4;
     ce0:	4b7f      	ldr	r3, [pc, #508]	; (ee0 <am_multiboot_uart_isr_handler+0x2d8>)
     ce2:	2204      	movs	r2, #4
     ce4:	601a      	str	r2, [r3, #0]
                    break;
     ce6:	e010      	b.n	d0a <am_multiboot_uart_isr_handler+0x102>
                case AM_BOOTLOADER_ACK_CMD:
                    packet_cnt = 4;
     ce8:	4b7d      	ldr	r3, [pc, #500]	; (ee0 <am_multiboot_uart_isr_handler+0x2d8>)
     cea:	2204      	movs	r2, #4
     cec:	601a      	str	r2, [r3, #0]
                    break;
     cee:	e00c      	b.n	d0a <am_multiboot_uart_isr_handler+0x102>
                case AM_BOOTLOADER_NAK_CMD:
                    packet_cnt = 4;
     cf0:	4b7b      	ldr	r3, [pc, #492]	; (ee0 <am_multiboot_uart_isr_handler+0x2d8>)
     cf2:	2204      	movs	r2, #4
     cf4:	601a      	str	r2, [r3, #0]
                    break;
     cf6:	e008      	b.n	d0a <am_multiboot_uart_isr_handler+0x102>
                case AM_BOOTLOADER_RESTART:
                    packet_cnt = 4;
     cf8:	4b79      	ldr	r3, [pc, #484]	; (ee0 <am_multiboot_uart_isr_handler+0x2d8>)
     cfa:	2204      	movs	r2, #4
     cfc:	601a      	str	r2, [r3, #0]
                    break;
     cfe:	e004      	b.n	d0a <am_multiboot_uart_isr_handler+0x102>
                default:
                    // Unknown command
                    packet_cnt = 4;
     d00:	4b77      	ldr	r3, [pc, #476]	; (ee0 <am_multiboot_uart_isr_handler+0x2d8>)
     d02:	2204      	movs	r2, #4
     d04:	601a      	str	r2, [r3, #0]
                    break;
     d06:	e000      	b.n	d0a <am_multiboot_uart_isr_handler+0x102>
                    break;
     d08:	bf00      	nop
            }
        }

        if ( (command == AM_BOOTLOADER_NEW_PACKET) && (uart_RX_cnt == 8) )
     d0a:	4b74      	ldr	r3, [pc, #464]	; (edc <am_multiboot_uart_isr_handler+0x2d4>)
     d0c:	681b      	ldr	r3, [r3, #0]
     d0e:	2b03      	cmp	r3, #3
     d10:	d10c      	bne.n	d2c <am_multiboot_uart_isr_handler+0x124>
     d12:	4b71      	ldr	r3, [pc, #452]	; (ed8 <am_multiboot_uart_isr_handler+0x2d0>)
     d14:	681b      	ldr	r3, [r3, #0]
     d16:	2b08      	cmp	r3, #8
     d18:	d108      	bne.n	d2c <am_multiboot_uart_isr_handler+0x124>
        {
            pkt_size = *(uint32_t *) (&uart_RX_buffer[4]);
     d1a:	4b72      	ldr	r3, [pc, #456]	; (ee4 <am_multiboot_uart_isr_handler+0x2dc>)
     d1c:	681b      	ldr	r3, [r3, #0]
     d1e:	4a72      	ldr	r2, [pc, #456]	; (ee8 <am_multiboot_uart_isr_handler+0x2e0>)
     d20:	6013      	str	r3, [r2, #0]
            packet_cnt = pkt_size + 8;
     d22:	4b71      	ldr	r3, [pc, #452]	; (ee8 <am_multiboot_uart_isr_handler+0x2e0>)
     d24:	681b      	ldr	r3, [r3, #0]
     d26:	3308      	adds	r3, #8
     d28:	4a6d      	ldr	r2, [pc, #436]	; (ee0 <am_multiboot_uart_isr_handler+0x2d8>)
     d2a:	6013      	str	r3, [r2, #0]
        }

#ifdef MULTIBOOT_SECURE
        if ( (command == AM_BOOTLOADER_NEW_IMAGE) && (uart_RX_cnt == 20) )
     d2c:	4b6b      	ldr	r3, [pc, #428]	; (edc <am_multiboot_uart_isr_handler+0x2d4>)
     d2e:	681b      	ldr	r3, [r3, #0]
     d30:	2b02      	cmp	r3, #2
     d32:	d10c      	bne.n	d4e <am_multiboot_uart_isr_handler+0x146>
     d34:	4b68      	ldr	r3, [pc, #416]	; (ed8 <am_multiboot_uart_isr_handler+0x2d0>)
     d36:	681b      	ldr	r3, [r3, #0]
     d38:	2b14      	cmp	r3, #20
     d3a:	d108      	bne.n	d4e <am_multiboot_uart_isr_handler+0x146>
        {
            pkt_size = *(uint32_t *) (&uart_RX_buffer[16]);
     d3c:	4b6b      	ldr	r3, [pc, #428]	; (eec <am_multiboot_uart_isr_handler+0x2e4>)
     d3e:	681b      	ldr	r3, [r3, #0]
     d40:	4a69      	ldr	r2, [pc, #420]	; (ee8 <am_multiboot_uart_isr_handler+0x2e0>)
     d42:	6013      	str	r3, [r2, #0]
            packet_cnt = pkt_size + 20;
     d44:	4b68      	ldr	r3, [pc, #416]	; (ee8 <am_multiboot_uart_isr_handler+0x2e0>)
     d46:	681b      	ldr	r3, [r3, #0]
     d48:	3314      	adds	r3, #20
     d4a:	4a65      	ldr	r2, [pc, #404]	; (ee0 <am_multiboot_uart_isr_handler+0x2d8>)
     d4c:	6013      	str	r3, [r2, #0]
        }
#endif

        if ( (uart_RX_cnt >= 4) && (uart_RX_cnt == packet_cnt) )
     d4e:	4b62      	ldr	r3, [pc, #392]	; (ed8 <am_multiboot_uart_isr_handler+0x2d0>)
     d50:	681b      	ldr	r3, [r3, #0]
     d52:	2b03      	cmp	r3, #3
     d54:	f240 80d8 	bls.w	f08 <am_multiboot_uart_isr_handler+0x300>
     d58:	4b5f      	ldr	r3, [pc, #380]	; (ed8 <am_multiboot_uart_isr_handler+0x2d0>)
     d5a:	681a      	ldr	r2, [r3, #0]
     d5c:	4b60      	ldr	r3, [pc, #384]	; (ee0 <am_multiboot_uart_isr_handler+0x2d8>)
     d5e:	681b      	ldr	r3, [r3, #0]
     d60:	429a      	cmp	r2, r3
     d62:	f040 80d1 	bne.w	f08 <am_multiboot_uart_isr_handler+0x300>
        {
            rx_pui32Packet = (uint32_t *) uart_RX_buffer;
     d66:	4b5b      	ldr	r3, [pc, #364]	; (ed4 <am_multiboot_uart_isr_handler+0x2cc>)
     d68:	60fb      	str	r3, [r7, #12]
            tx_pui32Packet = (uint32_t *) uart_TX_buffer;
     d6a:	4b59      	ldr	r3, [pc, #356]	; (ed0 <am_multiboot_uart_isr_handler+0x2c8>)
     d6c:	60bb      	str	r3, [r7, #8]

            switch (rx_pui32Packet[0])
     d6e:	68fb      	ldr	r3, [r7, #12]
     d70:	681b      	ldr	r3, [r3, #0]
     d72:	2b09      	cmp	r3, #9
     d74:	f200 809b 	bhi.w	eae <am_multiboot_uart_isr_handler+0x2a6>
     d78:	a201      	add	r2, pc, #4	; (adr r2, d80 <am_multiboot_uart_isr_handler+0x178>)
     d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     d7e:	bf00      	nop
     d80:	00000ebf 	.word	0x00000ebf
     d84:	00000ebf 	.word	0x00000ebf
     d88:	00000da9 	.word	0x00000da9
     d8c:	00000dfb 	.word	0x00000dfb
     d90:	00000e83 	.word	0x00000e83
     d94:	00000ddb 	.word	0x00000ddb
     d98:	00000e97 	.word	0x00000e97
     d9c:	00000eaf 	.word	0x00000eaf
     da0:	00000eaf 	.word	0x00000eaf
     da4:	00000e91 	.word	0x00000e91
                case AM_BOOTLOADER_NEW_IMAGE:
                    //
                    // Parse the image packet, and store the result to the global
                    // image structure.
                    //
                    g_bUartImageValid = image_start_packet_read(&g_sImage,
     da8:	494a      	ldr	r1, [pc, #296]	; (ed4 <am_multiboot_uart_isr_handler+0x2cc>)
     daa:	4851      	ldr	r0, [pc, #324]	; (ef0 <am_multiboot_uart_isr_handler+0x2e8>)
     dac:	f7ff fd52 	bl	854 <image_start_packet_read>
     db0:	4603      	mov	r3, r0
     db2:	461a      	mov	r2, r3
     db4:	4b4f      	ldr	r3, [pc, #316]	; (ef4 <am_multiboot_uart_isr_handler+0x2ec>)
     db6:	701a      	strb	r2, [r3, #0]

                    //
                    // Make sure the image packet had reasonable contents. If it
                    // didn't, we need to let the host know.
                    //
                    if ( g_bUartImageValid )
     db8:	4b4e      	ldr	r3, [pc, #312]	; (ef4 <am_multiboot_uart_isr_handler+0x2ec>)
     dba:	781b      	ldrb	r3, [r3, #0]
     dbc:	b2db      	uxtb	r3, r3
     dbe:	2b00      	cmp	r3, #0
     dc0:	d003      	beq.n	dca <am_multiboot_uart_isr_handler+0x1c2>
                    {
                        //
                        // Good image; Send back a "READY" packet.
                        //
                        tx_pui32Packet[0] = AM_BOOTLOADER_READY;
     dc2:	68bb      	ldr	r3, [r7, #8]
     dc4:	2202      	movs	r2, #2
     dc6:	601a      	str	r2, [r3, #0]
     dc8:	e002      	b.n	dd0 <am_multiboot_uart_isr_handler+0x1c8>
                    else
                    {
                        //
                        // Bad image; Send back an error.
                        //
                        tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
     dca:	68bb      	ldr	r3, [r7, #8]
     dcc:	2205      	movs	r2, #5
     dce:	601a      	str	r2, [r3, #0]
                    }

                    flush = 1;
     dd0:	2301      	movs	r3, #1
     dd2:	77bb      	strb	r3, [r7, #30]
                    send_byte_cnt = 4;
     dd4:	2304      	movs	r3, #4
     dd6:	77fb      	strb	r3, [r7, #31]
                    break;
     dd8:	e072      	b.n	ec0 <am_multiboot_uart_isr_handler+0x2b8>
                case AM_BOOTLOADER_SET_OVERRIDE_CMD:
                    //
                    // Set the override GPIO settings based on the packet
                    // information.
                    //
                    g_sImage.ui32OverrideGPIO = rx_pui32Packet[1];
     dda:	68fb      	ldr	r3, [r7, #12]
     ddc:	685b      	ldr	r3, [r3, #4]
     dde:	4a44      	ldr	r2, [pc, #272]	; (ef0 <am_multiboot_uart_isr_handler+0x2e8>)
     de0:	60d3      	str	r3, [r2, #12]
                    g_sImage.ui32OverridePolarity = rx_pui32Packet[2];
     de2:	68fb      	ldr	r3, [r7, #12]
     de4:	689b      	ldr	r3, [r3, #8]
     de6:	4a42      	ldr	r2, [pc, #264]	; (ef0 <am_multiboot_uart_isr_handler+0x2e8>)
     de8:	6113      	str	r3, [r2, #16]

                    //
                    // Send back a "READY" packet.
                    //
                    tx_pui32Packet[0] = AM_BOOTLOADER_READY;
     dea:	68bb      	ldr	r3, [r7, #8]
     dec:	2202      	movs	r2, #2
     dee:	601a      	str	r2, [r3, #0]
                    flush = 1;
     df0:	2301      	movs	r3, #1
     df2:	77bb      	strb	r3, [r7, #30]
                    send_byte_cnt = 4;
     df4:	2304      	movs	r3, #4
     df6:	77fb      	strb	r3, [r7, #31]
                    break;
     df8:	e062      	b.n	ec0 <am_multiboot_uart_isr_handler+0x2b8>

                case AM_BOOTLOADER_NEW_PACKET:
                    //
                    // Only take new packets if our image structure is valid.
                    //
                    if ( !g_bUartImageValid )
     dfa:	4b3e      	ldr	r3, [pc, #248]	; (ef4 <am_multiboot_uart_isr_handler+0x2ec>)
     dfc:	781b      	ldrb	r3, [r3, #0]
     dfe:	b2db      	uxtb	r3, r3
     e00:	f083 0301 	eor.w	r3, r3, #1
     e04:	b2db      	uxtb	r3, r3
     e06:	2b00      	cmp	r3, #0
     e08:	d003      	beq.n	e12 <am_multiboot_uart_isr_handler+0x20a>
                    {
                        tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
     e0a:	68bb      	ldr	r3, [r7, #8]
     e0c:	2205      	movs	r2, #5
     e0e:	601a      	str	r2, [r3, #0]
                        break;
     e10:	e056      	b.n	ec0 <am_multiboot_uart_isr_handler+0x2b8>
                    }

                    //
                    // Parse the rest of the packet sitting in the IOS LRAM.
                    //
                    image_data_packet_read((uint8_t *)(uart_RX_buffer + 8),
     e12:	4a39      	ldr	r2, [pc, #228]	; (ef8 <am_multiboot_uart_isr_handler+0x2f0>)
                        *((uint32_t *)(uart_RX_buffer + 4)));
     e14:	4b33      	ldr	r3, [pc, #204]	; (ee4 <am_multiboot_uart_isr_handler+0x2dc>)
                    image_data_packet_read((uint8_t *)(uart_RX_buffer + 8),
     e16:	681b      	ldr	r3, [r3, #0]
     e18:	4619      	mov	r1, r3
     e1a:	4610      	mov	r0, r2
     e1c:	f7ff fda2 	bl	964 <image_data_packet_read>

                    //
                    // If this packet completed the image...
                    //
                    if ( g_ui32BytesReceived == g_sImage.ui32NumBytes )
     e20:	4b33      	ldr	r3, [pc, #204]	; (ef0 <am_multiboot_uart_isr_handler+0x2e8>)
     e22:	685a      	ldr	r2, [r3, #4]
     e24:	4b35      	ldr	r3, [pc, #212]	; (efc <am_multiboot_uart_isr_handler+0x2f4>)
     e26:	681b      	ldr	r3, [r3, #0]
     e28:	429a      	cmp	r2, r3
     e2a:	d122      	bne.n	e72 <am_multiboot_uart_isr_handler+0x26a>
                    {
#ifdef MULTIBOOT_SECURE
                        if ( (g_ui32CRC != g_sImage.ui32CRC) || multiboot_secure_verify(&g_sImage.ui32CRC) )
     e2c:	4b30      	ldr	r3, [pc, #192]	; (ef0 <am_multiboot_uart_isr_handler+0x2e8>)
     e2e:	689a      	ldr	r2, [r3, #8]
     e30:	4b33      	ldr	r3, [pc, #204]	; (f00 <am_multiboot_uart_isr_handler+0x2f8>)
     e32:	681b      	ldr	r3, [r3, #0]
     e34:	429a      	cmp	r2, r3
     e36:	d105      	bne.n	e44 <am_multiboot_uart_isr_handler+0x23c>
     e38:	4832      	ldr	r0, [pc, #200]	; (f04 <am_multiboot_uart_isr_handler+0x2fc>)
     e3a:	f000 fbeb 	bl	1614 <multiboot_secure_verify>
     e3e:	4603      	mov	r3, r0
     e40:	2b00      	cmp	r3, #0
     e42:	d003      	beq.n	e4c <am_multiboot_uart_isr_handler+0x244>
                        {
                            tx_pui32Packet[0] = AM_BOOTLOADER_BAD_CRC;
     e44:	68bb      	ldr	r3, [r7, #8]
     e46:	2204      	movs	r2, #4
     e48:	601a      	str	r2, [r3, #0]
     e4a:	e015      	b.n	e78 <am_multiboot_uart_isr_handler+0x270>
#endif
                        else
                        {
                            // Protect (and optionally write if stored in SRAM)
                            // image in flash now as it has been validated now
                            program_image(g_sImage.bEncrypted);
     e4c:	4b28      	ldr	r3, [pc, #160]	; (ef0 <am_multiboot_uart_isr_handler+0x2e8>)
     e4e:	69db      	ldr	r3, [r3, #28]
     e50:	4618      	mov	r0, r3
     e52:	f7ff fcab 	bl	7ac <program_image>
                            // Validate the flash contents of a boot image to make
                            // sure it's safe to run
                            if ( am_bootloader_flash_check(&g_sImage) )
     e56:	4826      	ldr	r0, [pc, #152]	; (ef0 <am_multiboot_uart_isr_handler+0x2e8>)
     e58:	f7ff f992 	bl	180 <am_bootloader_flash_check>
     e5c:	4603      	mov	r3, r0
     e5e:	2b00      	cmp	r3, #0
     e60:	d003      	beq.n	e6a <am_multiboot_uart_isr_handler+0x262>
                            {
                                tx_pui32Packet[0] = AM_BOOTLOADER_IMAGE_COMPLETE;
     e62:	68bb      	ldr	r3, [r7, #8]
     e64:	2203      	movs	r2, #3
     e66:	601a      	str	r2, [r3, #0]
     e68:	e006      	b.n	e78 <am_multiboot_uart_isr_handler+0x270>
                            }
                            else
                            {
                                tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
     e6a:	68bb      	ldr	r3, [r7, #8]
     e6c:	2205      	movs	r2, #5
     e6e:	601a      	str	r2, [r3, #0]
     e70:	e002      	b.n	e78 <am_multiboot_uart_isr_handler+0x270>
                    {
                        //
                        // If this wasn't the end of the image, just send back a
                        // "READY" packet.
                        //
                        tx_pui32Packet[0] = AM_BOOTLOADER_READY;
     e72:	68bb      	ldr	r3, [r7, #8]
     e74:	2202      	movs	r2, #2
     e76:	601a      	str	r2, [r3, #0]
                    }

                    flush = 1;
     e78:	2301      	movs	r3, #1
     e7a:	77bb      	strb	r3, [r7, #30]
                    send_byte_cnt = 4;
     e7c:	2304      	movs	r3, #4
     e7e:	77fb      	strb	r3, [r7, #31]

                    break;
     e80:	e01e      	b.n	ec0 <am_multiboot_uart_isr_handler+0x2b8>
                    if ( USE_FLAG_PAGE )
                    {
                        //
                        // Write the flag page.
                        //
                        am_bootloader_flag_page_update(&g_sImage,
     e82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     e86:	481a      	ldr	r0, [pc, #104]	; (ef0 <am_multiboot_uart_isr_handler+0x2e8>)
     e88:	f7ff fb6a 	bl	560 <am_bootloader_flag_page_update>
                            (uint32_t *)FLAG_PAGE_LOCATION);
                    }
#ifdef MULTIBOOT_SECURE
                    wipe_sram();
     e8c:	f7ff fc6a 	bl	764 <wipe_sram>
                    // Perform a software reset.
                    //
#if AM_APOLLO3_RESET
                    am_hal_reset_control(AM_HAL_RESET_CONTROL_SWPOI);
#else
                    am_hal_reset_poi();
     e90:	f000 fe74 	bl	1b7c <am_hal_reset_poi>
#endif

                    //
                    // Wait for the reset to take effect.
                    //
                    while (1);
     e94:	e7fe      	b.n	e94 <am_multiboot_uart_isr_handler+0x28c>

                case AM_BOOTLOADER_BL_VERSION_CMD:
                    //
                    // Respond with the version number.
                    //
                    tx_pui32Packet[0] = AM_BOOTLOADER_BL_VERSION;
     e96:	68bb      	ldr	r3, [r7, #8]
     e98:	2206      	movs	r2, #6
     e9a:	601a      	str	r2, [r3, #0]
                    tx_pui32Packet[1] = AM_BOOTLOADER_VERSION_NUM;
     e9c:	68bb      	ldr	r3, [r7, #8]
     e9e:	3304      	adds	r3, #4
     ea0:	2201      	movs	r2, #1
     ea2:	601a      	str	r2, [r3, #0]

                    flush = 1;
     ea4:	2301      	movs	r3, #1
     ea6:	77bb      	strb	r3, [r7, #30]
                    send_byte_cnt = 8;
     ea8:	2308      	movs	r3, #8
     eaa:	77fb      	strb	r3, [r7, #31]
                    break;
     eac:	e008      	b.n	ec0 <am_multiboot_uart_isr_handler+0x2b8>
                case AM_BOOTLOADER_NAK_CMD:
                    break;

                default:
                    // Error
                    tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
     eae:	68bb      	ldr	r3, [r7, #8]
     eb0:	2205      	movs	r2, #5
     eb2:	601a      	str	r2, [r3, #0]
                    flush = 1;
     eb4:	2301      	movs	r3, #1
     eb6:	77bb      	strb	r3, [r7, #30]
                    send_byte_cnt = 4;
     eb8:	2304      	movs	r3, #4
     eba:	77fb      	strb	r3, [r7, #31]
                    break;
     ebc:	e000      	b.n	ec0 <am_multiboot_uart_isr_handler+0x2b8>
                    break;
     ebe:	bf00      	nop
            }
            break;
     ec0:	e02e      	b.n	f20 <am_multiboot_uart_isr_handler+0x318>
     ec2:	bf00      	nop
     ec4:	100010c9 	.word	0x100010c9
     ec8:	100010bc 	.word	0x100010bc
     ecc:	100010e0 	.word	0x100010e0
     ed0:	100010c0 	.word	0x100010c0
     ed4:	100010e4 	.word	0x100010e4
     ed8:	100010b4 	.word	0x100010b4
     edc:	100010d4 	.word	0x100010d4
     ee0:	100010b8 	.word	0x100010b8
     ee4:	100010e8 	.word	0x100010e8
     ee8:	100012ec 	.word	0x100012ec
     eec:	100010f4 	.word	0x100010f4
     ef0:	10001000 	.word	0x10001000
     ef4:	10001084 	.word	0x10001084
     ef8:	100010ec 	.word	0x100010ec
     efc:	10001078 	.word	0x10001078
     f00:	1000107c 	.word	0x1000107c
     f04:	10001008 	.word	0x10001008
    while ( !AM_BFRn(UART, ui32Module, FR, RXFE) )
     f08:	687b      	ldr	r3, [r7, #4]
     f0a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
     f0e:	331c      	adds	r3, #28
     f10:	031b      	lsls	r3, r3, #12
     f12:	3318      	adds	r3, #24
     f14:	681b      	ldr	r3, [r3, #0]
     f16:	f003 0310 	and.w	r3, r3, #16
     f1a:	2b00      	cmp	r3, #0
     f1c:	f43f ae89 	beq.w	c32 <am_multiboot_uart_isr_handler+0x2a>
        }
    }

    if ( flush )
     f20:	7fbb      	ldrb	r3, [r7, #30]
     f22:	2b00      	cmp	r3, #0
     f24:	d030      	beq.n	f88 <am_multiboot_uart_isr_handler+0x380>
    {
        uart_TX_tail = 0;
     f26:	4b1a      	ldr	r3, [pc, #104]	; (f90 <am_multiboot_uart_isr_handler+0x388>)
     f28:	2200      	movs	r2, #0
     f2a:	701a      	strb	r2, [r3, #0]

        for ( cnt = 0; cnt < send_byte_cnt; cnt++ )
     f2c:	2300      	movs	r3, #0
     f2e:	61bb      	str	r3, [r7, #24]
     f30:	e00f      	b.n	f52 <am_multiboot_uart_isr_handler+0x34a>
        {
            ser_out(ui32Module, uart_TX_buffer[uart_TX_tail++]);
     f32:	4b17      	ldr	r3, [pc, #92]	; (f90 <am_multiboot_uart_isr_handler+0x388>)
     f34:	781b      	ldrb	r3, [r3, #0]
     f36:	1c5a      	adds	r2, r3, #1
     f38:	b2d1      	uxtb	r1, r2
     f3a:	4a15      	ldr	r2, [pc, #84]	; (f90 <am_multiboot_uart_isr_handler+0x388>)
     f3c:	7011      	strb	r1, [r2, #0]
     f3e:	461a      	mov	r2, r3
     f40:	4b14      	ldr	r3, [pc, #80]	; (f94 <am_multiboot_uart_isr_handler+0x38c>)
     f42:	5c9b      	ldrb	r3, [r3, r2]
     f44:	4619      	mov	r1, r3
     f46:	6878      	ldr	r0, [r7, #4]
     f48:	f7ff fde0 	bl	b0c <ser_out>
        for ( cnt = 0; cnt < send_byte_cnt; cnt++ )
     f4c:	69bb      	ldr	r3, [r7, #24]
     f4e:	3301      	adds	r3, #1
     f50:	61bb      	str	r3, [r7, #24]
     f52:	7ffa      	ldrb	r2, [r7, #31]
     f54:	69bb      	ldr	r3, [r7, #24]
     f56:	429a      	cmp	r2, r3
     f58:	d8eb      	bhi.n	f32 <am_multiboot_uart_isr_handler+0x32a>
        }
        command = 0;
     f5a:	4b0f      	ldr	r3, [pc, #60]	; (f98 <am_multiboot_uart_isr_handler+0x390>)
     f5c:	2200      	movs	r2, #0
     f5e:	601a      	str	r2, [r3, #0]
        uart_RX_head = uart_RX_tail = uart_RX_cnt = 0;
     f60:	2300      	movs	r3, #0
     f62:	4a0e      	ldr	r2, [pc, #56]	; (f9c <am_multiboot_uart_isr_handler+0x394>)
     f64:	6013      	str	r3, [r2, #0]
     f66:	4a0e      	ldr	r2, [pc, #56]	; (fa0 <am_multiboot_uart_isr_handler+0x398>)
     f68:	6013      	str	r3, [r2, #0]
     f6a:	4a0e      	ldr	r2, [pc, #56]	; (fa4 <am_multiboot_uart_isr_handler+0x39c>)
     f6c:	6013      	str	r3, [r2, #0]
        RX_FIFO_FULL = 0;  // check serial FIFO operation
     f6e:	4b0e      	ldr	r3, [pc, #56]	; (fa8 <am_multiboot_uart_isr_handler+0x3a0>)
     f70:	2200      	movs	r2, #0
     f72:	701a      	strb	r2, [r3, #0]
        RX_FIFO_EMPTY = 1;
     f74:	4b0d      	ldr	r3, [pc, #52]	; (fac <am_multiboot_uart_isr_handler+0x3a4>)
     f76:	2201      	movs	r2, #1
     f78:	701a      	strb	r2, [r3, #0]
        flush = 0;
     f7a:	2300      	movs	r3, #0
     f7c:	77bb      	strb	r3, [r7, #30]
        send_byte_cnt = 0;
     f7e:	2300      	movs	r3, #0
     f80:	77fb      	strb	r3, [r7, #31]
        packet_cnt = 0xff;
     f82:	4b0b      	ldr	r3, [pc, #44]	; (fb0 <am_multiboot_uart_isr_handler+0x3a8>)
     f84:	22ff      	movs	r2, #255	; 0xff
     f86:	601a      	str	r2, [r3, #0]
    }

}
     f88:	bf00      	nop
     f8a:	3720      	adds	r7, #32
     f8c:	46bd      	mov	sp, r7
     f8e:	bd80      	pop	{r7, pc}
     f90:	100012f0 	.word	0x100012f0
     f94:	100010c0 	.word	0x100010c0
     f98:	100010d4 	.word	0x100010d4
     f9c:	100010b4 	.word	0x100010b4
     fa0:	100010cc 	.word	0x100010cc
     fa4:	100010bc 	.word	0x100010bc
     fa8:	100010e0 	.word	0x100010e0
     fac:	100010c9 	.word	0x100010c9
     fb0:	100010b8 	.word	0x100010b8

00000fb4 <am_multiboot_uart_detect_baudrate>:
//!
//! @return the computed baud rate.
//
//*****************************************************************************
uint32_t am_multiboot_uart_detect_baudrate(uint32_t ui32RxPin)
{
     fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     fb8:	b087      	sub	sp, #28
     fba:	af00      	add	r7, sp, #0
     fbc:	6078      	str	r0, [r7, #4]
    // We need to hit this register as early as possible, so we are skipping
    // all of the normal logic that checks to make sure we are responding to
    // the right GPIO. In the interest of time, we will just assume that this
    // interrupt is coming from the UART RX pin.
    //
    ui32Start = am_hal_systick_count();
     fbe:	f000 fead 	bl	1d1c <am_hal_systick_count>
     fc2:	6178      	str	r0, [r7, #20]
    // Wait for exactly 9 edges on the UART RX pin. This corresponds to the
    // number of edges in the byte 0x55 after the start bit. Using a simple
    // polling approach here gives us the best possible chance to catch every
    // single edge.
    //
    while ( !am_hal_gpio_input_bit_read(ui32RxPin) );
     fc4:	bf00      	nop
     fc6:	687b      	ldr	r3, [r7, #4]
     fc8:	08db      	lsrs	r3, r3, #3
     fca:	f003 0204 	and.w	r2, r3, #4
     fce:	4b6c      	ldr	r3, [pc, #432]	; (1180 <am_multiboot_uart_detect_baudrate+0x1cc>)
     fd0:	4413      	add	r3, r2
     fd2:	681a      	ldr	r2, [r3, #0]
     fd4:	687b      	ldr	r3, [r7, #4]
     fd6:	f003 031f 	and.w	r3, r3, #31
     fda:	fa22 f303 	lsr.w	r3, r2, r3
     fde:	f003 0301 	and.w	r3, r3, #1
     fe2:	2b00      	cmp	r3, #0
     fe4:	d0ef      	beq.n	fc6 <am_multiboot_uart_detect_baudrate+0x12>
    while ( am_hal_gpio_input_bit_read(ui32RxPin) );
     fe6:	bf00      	nop
     fe8:	687b      	ldr	r3, [r7, #4]
     fea:	08db      	lsrs	r3, r3, #3
     fec:	f003 0204 	and.w	r2, r3, #4
     ff0:	4b63      	ldr	r3, [pc, #396]	; (1180 <am_multiboot_uart_detect_baudrate+0x1cc>)
     ff2:	4413      	add	r3, r2
     ff4:	681a      	ldr	r2, [r3, #0]
     ff6:	687b      	ldr	r3, [r7, #4]
     ff8:	f003 031f 	and.w	r3, r3, #31
     ffc:	fa22 f303 	lsr.w	r3, r2, r3
    1000:	f003 0301 	and.w	r3, r3, #1
    1004:	2b00      	cmp	r3, #0
    1006:	d1ef      	bne.n	fe8 <am_multiboot_uart_detect_baudrate+0x34>
    while ( !am_hal_gpio_input_bit_read(ui32RxPin) );
    1008:	bf00      	nop
    100a:	687b      	ldr	r3, [r7, #4]
    100c:	08db      	lsrs	r3, r3, #3
    100e:	f003 0204 	and.w	r2, r3, #4
    1012:	4b5b      	ldr	r3, [pc, #364]	; (1180 <am_multiboot_uart_detect_baudrate+0x1cc>)
    1014:	4413      	add	r3, r2
    1016:	681a      	ldr	r2, [r3, #0]
    1018:	687b      	ldr	r3, [r7, #4]
    101a:	f003 031f 	and.w	r3, r3, #31
    101e:	fa22 f303 	lsr.w	r3, r2, r3
    1022:	f003 0301 	and.w	r3, r3, #1
    1026:	2b00      	cmp	r3, #0
    1028:	d0ef      	beq.n	100a <am_multiboot_uart_detect_baudrate+0x56>
    while ( am_hal_gpio_input_bit_read(ui32RxPin) );
    102a:	bf00      	nop
    102c:	687b      	ldr	r3, [r7, #4]
    102e:	08db      	lsrs	r3, r3, #3
    1030:	f003 0204 	and.w	r2, r3, #4
    1034:	4b52      	ldr	r3, [pc, #328]	; (1180 <am_multiboot_uart_detect_baudrate+0x1cc>)
    1036:	4413      	add	r3, r2
    1038:	681a      	ldr	r2, [r3, #0]
    103a:	687b      	ldr	r3, [r7, #4]
    103c:	f003 031f 	and.w	r3, r3, #31
    1040:	fa22 f303 	lsr.w	r3, r2, r3
    1044:	f003 0301 	and.w	r3, r3, #1
    1048:	2b00      	cmp	r3, #0
    104a:	d1ef      	bne.n	102c <am_multiboot_uart_detect_baudrate+0x78>
    while ( !am_hal_gpio_input_bit_read(ui32RxPin) );
    104c:	bf00      	nop
    104e:	687b      	ldr	r3, [r7, #4]
    1050:	08db      	lsrs	r3, r3, #3
    1052:	f003 0204 	and.w	r2, r3, #4
    1056:	4b4a      	ldr	r3, [pc, #296]	; (1180 <am_multiboot_uart_detect_baudrate+0x1cc>)
    1058:	4413      	add	r3, r2
    105a:	681a      	ldr	r2, [r3, #0]
    105c:	687b      	ldr	r3, [r7, #4]
    105e:	f003 031f 	and.w	r3, r3, #31
    1062:	fa22 f303 	lsr.w	r3, r2, r3
    1066:	f003 0301 	and.w	r3, r3, #1
    106a:	2b00      	cmp	r3, #0
    106c:	d0ef      	beq.n	104e <am_multiboot_uart_detect_baudrate+0x9a>
    while ( am_hal_gpio_input_bit_read(ui32RxPin) );
    106e:	bf00      	nop
    1070:	687b      	ldr	r3, [r7, #4]
    1072:	08db      	lsrs	r3, r3, #3
    1074:	f003 0204 	and.w	r2, r3, #4
    1078:	4b41      	ldr	r3, [pc, #260]	; (1180 <am_multiboot_uart_detect_baudrate+0x1cc>)
    107a:	4413      	add	r3, r2
    107c:	681a      	ldr	r2, [r3, #0]
    107e:	687b      	ldr	r3, [r7, #4]
    1080:	f003 031f 	and.w	r3, r3, #31
    1084:	fa22 f303 	lsr.w	r3, r2, r3
    1088:	f003 0301 	and.w	r3, r3, #1
    108c:	2b00      	cmp	r3, #0
    108e:	d1ef      	bne.n	1070 <am_multiboot_uart_detect_baudrate+0xbc>
    while ( !am_hal_gpio_input_bit_read(ui32RxPin) );
    1090:	bf00      	nop
    1092:	687b      	ldr	r3, [r7, #4]
    1094:	08db      	lsrs	r3, r3, #3
    1096:	f003 0204 	and.w	r2, r3, #4
    109a:	4b39      	ldr	r3, [pc, #228]	; (1180 <am_multiboot_uart_detect_baudrate+0x1cc>)
    109c:	4413      	add	r3, r2
    109e:	681a      	ldr	r2, [r3, #0]
    10a0:	687b      	ldr	r3, [r7, #4]
    10a2:	f003 031f 	and.w	r3, r3, #31
    10a6:	fa22 f303 	lsr.w	r3, r2, r3
    10aa:	f003 0301 	and.w	r3, r3, #1
    10ae:	2b00      	cmp	r3, #0
    10b0:	d0ef      	beq.n	1092 <am_multiboot_uart_detect_baudrate+0xde>
    while ( am_hal_gpio_input_bit_read(ui32RxPin) );
    10b2:	bf00      	nop
    10b4:	687b      	ldr	r3, [r7, #4]
    10b6:	08db      	lsrs	r3, r3, #3
    10b8:	f003 0204 	and.w	r2, r3, #4
    10bc:	4b30      	ldr	r3, [pc, #192]	; (1180 <am_multiboot_uart_detect_baudrate+0x1cc>)
    10be:	4413      	add	r3, r2
    10c0:	681a      	ldr	r2, [r3, #0]
    10c2:	687b      	ldr	r3, [r7, #4]
    10c4:	f003 031f 	and.w	r3, r3, #31
    10c8:	fa22 f303 	lsr.w	r3, r2, r3
    10cc:	f003 0301 	and.w	r3, r3, #1
    10d0:	2b00      	cmp	r3, #0
    10d2:	d1ef      	bne.n	10b4 <am_multiboot_uart_detect_baudrate+0x100>
    while ( !am_hal_gpio_input_bit_read(ui32RxPin) );
    10d4:	bf00      	nop
    10d6:	687b      	ldr	r3, [r7, #4]
    10d8:	08db      	lsrs	r3, r3, #3
    10da:	f003 0204 	and.w	r2, r3, #4
    10de:	4b28      	ldr	r3, [pc, #160]	; (1180 <am_multiboot_uart_detect_baudrate+0x1cc>)
    10e0:	4413      	add	r3, r2
    10e2:	681a      	ldr	r2, [r3, #0]
    10e4:	687b      	ldr	r3, [r7, #4]
    10e6:	f003 031f 	and.w	r3, r3, #31
    10ea:	fa22 f303 	lsr.w	r3, r2, r3
    10ee:	f003 0301 	and.w	r3, r3, #1
    10f2:	2b00      	cmp	r3, #0
    10f4:	d0ef      	beq.n	10d6 <am_multiboot_uart_detect_baudrate+0x122>

    //
    // Record the "end" time.
    //
    ui32End = am_hal_systick_count();
    10f6:	f000 fe11 	bl	1d1c <am_hal_systick_count>
    10fa:	6138      	str	r0, [r7, #16]
    am_hal_systick_stop();
    10fc:	f000 fe00 	bl	1d00 <am_hal_systick_stop>
    // At this point, the timing-critical portion of the interrupt handler is
    // complete, and we are free to clean up our interrupt status. We only
    // intend to perform the automatic baud-rate detection once, so we will go
    // ahead and disable the interrupt on the UART RX pin now.
    //
    am_hal_gpio_int_disable(AM_HAL_GPIO_BIT(ui32RxPin));
    1100:	f04f 0201 	mov.w	r2, #1
    1104:	f04f 0300 	mov.w	r3, #0
    1108:	6879      	ldr	r1, [r7, #4]
    110a:	f1a1 0620 	sub.w	r6, r1, #32
    110e:	f1c1 0020 	rsb	r0, r1, #32
    1112:	fa03 f901 	lsl.w	r9, r3, r1
    1116:	fa02 f606 	lsl.w	r6, r2, r6
    111a:	ea49 0906 	orr.w	r9, r9, r6
    111e:	fa22 f000 	lsr.w	r0, r2, r0
    1122:	ea49 0900 	orr.w	r9, r9, r0
    1126:	fa02 f801 	lsl.w	r8, r2, r1
    112a:	4640      	mov	r0, r8
    112c:	4649      	mov	r1, r9
    112e:	f000 fb6f 	bl	1810 <am_hal_gpio_int_disable>
    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(ui32RxPin));
    1132:	f04f 0201 	mov.w	r2, #1
    1136:	f04f 0300 	mov.w	r3, #0
    113a:	6879      	ldr	r1, [r7, #4]
    113c:	f1a1 0620 	sub.w	r6, r1, #32
    1140:	f1c1 0020 	rsb	r0, r1, #32
    1144:	fa03 f501 	lsl.w	r5, r3, r1
    1148:	fa02 f606 	lsl.w	r6, r2, r6
    114c:	4335      	orrs	r5, r6
    114e:	fa22 f000 	lsr.w	r0, r2, r0
    1152:	4305      	orrs	r5, r0
    1154:	fa02 f401 	lsl.w	r4, r2, r1
    1158:	4620      	mov	r0, r4
    115a:	4629      	mov	r1, r5
    115c:	f000 fb72 	bl	1844 <am_hal_gpio_int_clear>
    // Check to see how long those nine edges took to arrive. This should
    // correspond to exactly nine bit-times of UART traffic from the host. From
    // there, we can use the speed of the processor (which is known) to
    // calculate the host's baud rate.
    //
    ui32Counts = ui32Start - ui32End;
    1160:	697a      	ldr	r2, [r7, #20]
    1162:	693b      	ldr	r3, [r7, #16]
    1164:	1ad3      	subs	r3, r2, r3
    1166:	60fb      	str	r3, [r7, #12]
    ui32BaudRate = AM_HAL_CLKGEN_FREQ_MAX_HZ * 9 / ui32Counts;
    1168:	4a06      	ldr	r2, [pc, #24]	; (1184 <am_multiboot_uart_detect_baudrate+0x1d0>)
    116a:	68fb      	ldr	r3, [r7, #12]
    116c:	fbb2 f3f3 	udiv	r3, r2, r3
    1170:	60bb      	str	r3, [r7, #8]
    return ui32BaudRate;
    1172:	68bb      	ldr	r3, [r7, #8]
}
    1174:	4618      	mov	r0, r3
    1176:	371c      	adds	r7, #28
    1178:	46bd      	mov	sp, r7
    117a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    117e:	bf00      	nop
    1180:	40010080 	.word	0x40010080
    1184:	19bfcc00 	.word	0x19bfcc00

00001188 <am_gpio_isr>:
// Setting up a GPIO ISR for the UART autobaud feature.
//
//*****************************************************************************
void
am_gpio_isr(void)
{
    1188:	b580      	push	{r7, lr}
    118a:	b082      	sub	sp, #8
    118c:	af00      	add	r7, sp, #0
    uint32_t ui32BaudRate;

    ui32BaudRate = am_multiboot_uart_detect_baudrate(AM_BSP_GPIO_BOOTLOADER_UART_RX);
    118e:	2017      	movs	r0, #23
    1190:	f7ff ff10 	bl	fb4 <am_multiboot_uart_detect_baudrate>
    1194:	6078      	str	r0, [r7, #4]

    //
    // Now that we have a baud rate, we can configure our UART.
    //
    am_multiboot_setup_serial(AM_BSP_UART_BOOTLOADER_INST, ui32BaudRate);
    1196:	6879      	ldr	r1, [r7, #4]
    1198:	2000      	movs	r0, #0
    119a:	f7ff fcd7 	bl	b4c <am_multiboot_setup_serial>
    //
    // Send a '0x55' to give the boot host some indication that we have the
    // correct baud rate and to let it know that our UART is ready for further
    // traffic.
    //
    am_hal_uart_char_transmit_polled(AM_BSP_UART_BOOTLOADER_INST, 0x55);
    119e:	2155      	movs	r1, #85	; 0x55
    11a0:	2000      	movs	r0, #0
    11a2:	f000 fe6b 	bl	1e7c <am_hal_uart_char_transmit_polled>
    g_bUartConfigured = true;
    11a6:	4b03      	ldr	r3, [pc, #12]	; (11b4 <am_gpio_isr+0x2c>)
    11a8:	2201      	movs	r2, #1
    11aa:	701a      	strb	r2, [r3, #0]
}
    11ac:	bf00      	nop
    11ae:	3708      	adds	r7, #8
    11b0:	46bd      	mov	sp, r7
    11b2:	bd80      	pop	{r7, pc}
    11b4:	10001085 	.word	0x10001085

000011b8 <am_uart_isr>:
#if (AM_BSP_UART_BOOTLOADER_INST == 0)
am_uart_isr(void)
#elif (AM_BSP_UART_BOOTLOADER_INST == 1)
am_uart1_isr(void)
#endif
{
    11b8:	b580      	push	{r7, lr}
    11ba:	af00      	add	r7, sp, #0
    am_multiboot_uart_isr_handler(AM_BSP_UART_BOOTLOADER_INST);
    11bc:	2000      	movs	r0, #0
    11be:	f7ff fd23 	bl	c08 <am_multiboot_uart_isr_handler>
}
    11c2:	bf00      	nop
    11c4:	bd80      	pop	{r7, pc}
	...

000011c8 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    11c8:	b580      	push	{r7, lr}
    11ca:	b088      	sub	sp, #32
    11cc:	af00      	add	r7, sp, #0
    am_bootloader_image_t *pBootImage;
    bool bOverride = false;
    11ce:	2300      	movs	r3, #0
    11d0:	74fb      	strb	r3, [r7, #19]
    bool bBootFromFlash = false;
    11d2:	2300      	movs	r3, #0
    11d4:	77fb      	strb	r3, [r7, #31]
    //
    am_hal_gpio_out_bit_set(MULTIBOOT_IOS_INTERRUPT_PIN);
    am_hal_gpio_pin_config(MULTIBOOT_IOS_INTERRUPT_PIN, AM_HAL_PIN_OUTPUT);
#endif

    bBootFromFlash = am_multiboot_check_boot_from_flash(&bOverride, &pBootImage);
    11d6:	f107 0214 	add.w	r2, r7, #20
    11da:	f107 0313 	add.w	r3, r7, #19
    11de:	4611      	mov	r1, r2
    11e0:	4618      	mov	r0, r3
    11e2:	f7ff fc43 	bl	a6c <am_multiboot_check_boot_from_flash>
    11e6:	4603      	mov	r3, r0
    11e8:	77fb      	strb	r3, [r7, #31]
    if (!bOverride)
    11ea:	7cfb      	ldrb	r3, [r7, #19]
    11ec:	f083 0301 	eor.w	r3, r3, #1
    11f0:	b2db      	uxtb	r3, r3
    11f2:	2b00      	cmp	r3, #0
    11f4:	d006      	beq.n	1204 <main+0x3c>
    {
        if (bBootFromFlash)
    11f6:	7ffb      	ldrb	r3, [r7, #31]
    11f8:	2b00      	cmp	r3, #0
    11fa:	d003      	beq.n	1204 <main+0x3c>
            //
            // If everything looks good, disable the interrupt pin and run.
            //
            am_hal_gpio_pin_config(MULTIBOOT_IOS_INTERRUPT_PIN, AM_HAL_PIN_DISABLE);
#endif
            am_bootloader_image_run(pBootImage);
    11fc:	697b      	ldr	r3, [r7, #20]
    11fe:	4618      	mov	r0, r3
    1200:	f7ff fa44 	bl	68c <am_bootloader_image_run>
    }
    //
    // If we get here, we're going to try to download a new image from a host
    // processor. Speed up the clocks and start turning on peripherals.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
    1204:	2000      	movs	r0, #0
    1206:	f000 fa8b 	bl	1720 <am_hal_clkgen_sysclk_select>
    //
    // Configure the board for low power.
    //
    am_bsp_low_power_init();
    120a:	f000 fa77 	bl	16fc <am_bsp_low_power_init>

    //
    // Provide temp buffer for multiboot to operate on
    //
    am_multiboot_init(sramTempBuf, sizeof(sramTempBuf));
    120e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    1212:	485b      	ldr	r0, [pc, #364]	; (1380 <main+0x1b8>)
    1214:	f7ff fb02 	bl	81c <am_multiboot_init>
#ifdef AM_MULTIBOOT_SUPPORT_UART
#ifdef MULTIBOOT_DETECT_BAUDRATE
    //
    // Re-Start systick to measure time for autobaud and for the IOS timeout.
    //
    am_hal_systick_stop();
    1218:	f000 fd72 	bl	1d00 <am_hal_systick_stop>
    am_hal_systick_load(0x00FFFFFF);
    121c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    1220:	f000 fd76 	bl	1d10 <am_hal_systick_load>
    am_hal_systick_start();
    1224:	f000 fd64 	bl	1cf0 <am_hal_systick_start>

    //
    // Configure our RX pin as a GPIO input with a falling edge interrupt.
    //
    am_hal_gpio_pin_config(AM_BSP_GPIO_BOOTLOADER_UART_RX, AM_HAL_GPIO_INPUT);
    1228:	f000 fb74 	bl	1914 <am_hal_interrupt_master_disable>
    122c:	4603      	mov	r3, r0
    122e:	60fb      	str	r3, [r7, #12]
    1230:	4b54      	ldr	r3, [pc, #336]	; (1384 <main+0x1bc>)
    1232:	2273      	movs	r2, #115	; 0x73
    1234:	601a      	str	r2, [r3, #0]
    1236:	4a54      	ldr	r2, [pc, #336]	; (1388 <main+0x1c0>)
    1238:	4b53      	ldr	r3, [pc, #332]	; (1388 <main+0x1c0>)
    123a:	681b      	ldr	r3, [r3, #0]
    123c:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    1240:	6013      	str	r3, [r2, #0]
    1242:	4a52      	ldr	r2, [pc, #328]	; (138c <main+0x1c4>)
    1244:	4b51      	ldr	r3, [pc, #324]	; (138c <main+0x1c4>)
    1246:	681b      	ldr	r3, [r3, #0]
    1248:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    124c:	f043 53d0 	orr.w	r3, r3, #436207616	; 0x1a000000
    1250:	6013      	str	r3, [r2, #0]
    1252:	4a4f      	ldr	r2, [pc, #316]	; (1390 <main+0x1c8>)
    1254:	4b4e      	ldr	r3, [pc, #312]	; (1390 <main+0x1c8>)
    1256:	681b      	ldr	r3, [r3, #0]
    1258:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    125c:	6013      	str	r3, [r2, #0]
    125e:	4b49      	ldr	r3, [pc, #292]	; (1384 <main+0x1bc>)
    1260:	2200      	movs	r2, #0
    1262:	601a      	str	r2, [r3, #0]
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4618      	mov	r0, r3
    1268:	f000 fb58 	bl	191c <am_hal_interrupt_master_set>
    am_hal_gpio_int_polarity_bit_set(AM_BSP_GPIO_BOOTLOADER_UART_RX, AM_HAL_GPIO_FALLING);
    126c:	f000 fb52 	bl	1914 <am_hal_interrupt_master_disable>
    1270:	4603      	mov	r3, r0
    1272:	60bb      	str	r3, [r7, #8]
    1274:	4b43      	ldr	r3, [pc, #268]	; (1384 <main+0x1bc>)
    1276:	2273      	movs	r2, #115	; 0x73
    1278:	601a      	str	r2, [r3, #0]
    127a:	4a43      	ldr	r2, [pc, #268]	; (1388 <main+0x1c0>)
    127c:	4b42      	ldr	r3, [pc, #264]	; (1388 <main+0x1c0>)
    127e:	681b      	ldr	r3, [r3, #0]
    1280:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1284:	6013      	str	r3, [r2, #0]
    1286:	4b3f      	ldr	r3, [pc, #252]	; (1384 <main+0x1bc>)
    1288:	2200      	movs	r2, #0
    128a:	601a      	str	r2, [r3, #0]
    128c:	68bb      	ldr	r3, [r7, #8]
    128e:	4618      	mov	r0, r3
    1290:	f000 fb44 	bl	191c <am_hal_interrupt_master_set>

    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BOOTLOADER_UART_RX));
    1294:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    1298:	f04f 0100 	mov.w	r1, #0
    129c:	f000 fad2 	bl	1844 <am_hal_gpio_int_clear>
    am_hal_gpio_int_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BOOTLOADER_UART_RX));
    12a0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    12a4:	f04f 0100 	mov.w	r1, #0
    12a8:	f000 faa2 	bl	17f0 <am_hal_gpio_int_enable>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_GPIO);
    12ac:	201c      	movs	r0, #28
    12ae:	f000 fadd 	bl	186c <am_hal_interrupt_enable>

    //
    // Enable interrupts so we can receive messages from the boot host.
    //
    am_hal_interrupt_master_enable();
    12b2:	f000 fb2b 	bl	190c <am_hal_interrupt_master_enable>
    while (1)
    {
        //
        // Disable interrupt while we decide whether we're going to sleep.
        //
        uint32_t ui32IntStatus = am_hal_interrupt_master_disable();
    12b6:	f000 fb2d 	bl	1914 <am_hal_interrupt_master_disable>
    12ba:	61b8      	str	r0, [r7, #24]

        if (!g_bUartConfigured)
    12bc:	4b35      	ldr	r3, [pc, #212]	; (1394 <main+0x1cc>)
    12be:	781b      	ldrb	r3, [r3, #0]
    12c0:	b2db      	uxtb	r3, r3
    12c2:	f083 0301 	eor.w	r3, r3, #1
    12c6:	b2db      	uxtb	r3, r3
    12c8:	2b00      	cmp	r3, #0
    12ca:	d006      	beq.n	12da <main+0x112>
        {
            // Wait for Baud rate detection
            am_hal_sysctrl_sleep(false);
    12cc:	2000      	movs	r0, #0
    12ce:	f000 fc71 	bl	1bb4 <am_hal_sysctrl_sleep>
            //
            // Enable interrupts
            //
            am_hal_interrupt_master_set(ui32IntStatus);
    12d2:	69b8      	ldr	r0, [r7, #24]
    12d4:	f000 fb22 	bl	191c <am_hal_interrupt_master_set>
    12d8:	e7ed      	b.n	12b6 <main+0xee>
        else
        {
            //
            // Enable interrupts
            //
            am_hal_interrupt_master_set(ui32IntStatus);
    12da:	69b8      	ldr	r0, [r7, #24]
    12dc:	f000 fb1e 	bl	191c <am_hal_interrupt_master_set>
            break;
    12e0:	bf00      	nop
        }
    }
    // ISR has already configured the UART by now
    am_hal_gpio_int_disable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BOOTLOADER_UART_RX));
    12e2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    12e6:	f04f 0100 	mov.w	r1, #0
    12ea:	f000 fa91 	bl	1810 <am_hal_gpio_int_disable>
    am_hal_interrupt_disable(AM_HAL_INTERRUPT_GPIO);
    12ee:	201c      	movs	r0, #28
    12f0:	f000 fae4 	bl	18bc <am_hal_interrupt_disable>
#endif

    //
    // Make sure the UART RX and TX pins are enabled.
    //
    am_hal_gpio_pin_config(AM_BSP_GPIO_BOOTLOADER_UART_TX, AM_BSP_GPIO_CFG_BOOTLOADER_UART_TX);
    12f4:	f000 fb0e 	bl	1914 <am_hal_interrupt_master_disable>
    12f8:	4603      	mov	r3, r0
    12fa:	607b      	str	r3, [r7, #4]
    12fc:	4b21      	ldr	r3, [pc, #132]	; (1384 <main+0x1bc>)
    12fe:	2273      	movs	r2, #115	; 0x73
    1300:	601a      	str	r2, [r3, #0]
    1302:	4a21      	ldr	r2, [pc, #132]	; (1388 <main+0x1c0>)
    1304:	4b20      	ldr	r3, [pc, #128]	; (1388 <main+0x1c0>)
    1306:	681b      	ldr	r3, [r3, #0]
    1308:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    130c:	6013      	str	r3, [r2, #0]
    130e:	4a1f      	ldr	r2, [pc, #124]	; (138c <main+0x1c4>)
    1310:	4b1e      	ldr	r3, [pc, #120]	; (138c <main+0x1c4>)
    1312:	681b      	ldr	r3, [r3, #0]
    1314:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    1318:	6013      	str	r3, [r2, #0]
    131a:	4a1d      	ldr	r2, [pc, #116]	; (1390 <main+0x1c8>)
    131c:	4b1c      	ldr	r3, [pc, #112]	; (1390 <main+0x1c8>)
    131e:	681b      	ldr	r3, [r3, #0]
    1320:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    1324:	6013      	str	r3, [r2, #0]
    1326:	4b17      	ldr	r3, [pc, #92]	; (1384 <main+0x1bc>)
    1328:	2200      	movs	r2, #0
    132a:	601a      	str	r2, [r3, #0]
    132c:	687b      	ldr	r3, [r7, #4]
    132e:	4618      	mov	r0, r3
    1330:	f000 faf4 	bl	191c <am_hal_interrupt_master_set>
    am_hal_gpio_pin_config(AM_BSP_GPIO_BOOTLOADER_UART_RX, AM_BSP_GPIO_CFG_BOOTLOADER_UART_RX);
    1334:	f000 faee 	bl	1914 <am_hal_interrupt_master_disable>
    1338:	4603      	mov	r3, r0
    133a:	603b      	str	r3, [r7, #0]
    133c:	4b11      	ldr	r3, [pc, #68]	; (1384 <main+0x1bc>)
    133e:	2273      	movs	r2, #115	; 0x73
    1340:	601a      	str	r2, [r3, #0]
    1342:	4a11      	ldr	r2, [pc, #68]	; (1388 <main+0x1c0>)
    1344:	4b10      	ldr	r3, [pc, #64]	; (1388 <main+0x1c0>)
    1346:	681b      	ldr	r3, [r3, #0]
    1348:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    134c:	6013      	str	r3, [r2, #0]
    134e:	4a0f      	ldr	r2, [pc, #60]	; (138c <main+0x1c4>)
    1350:	4b0e      	ldr	r3, [pc, #56]	; (138c <main+0x1c4>)
    1352:	681b      	ldr	r3, [r3, #0]
    1354:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1358:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    135c:	6013      	str	r3, [r2, #0]
    135e:	4a0c      	ldr	r2, [pc, #48]	; (1390 <main+0x1c8>)
    1360:	4b0b      	ldr	r3, [pc, #44]	; (1390 <main+0x1c8>)
    1362:	681b      	ldr	r3, [r3, #0]
    1364:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1368:	6013      	str	r3, [r2, #0]
    136a:	4b06      	ldr	r3, [pc, #24]	; (1384 <main+0x1bc>)
    136c:	2200      	movs	r2, #0
    136e:	601a      	str	r2, [r3, #0]
    1370:	683b      	ldr	r3, [r7, #0]
    1372:	4618      	mov	r0, r3
    1374:	f000 fad2 	bl	191c <am_hal_interrupt_master_set>
    //
    // Enable interrupts so we can receive messages from the boot host.
    //
    am_hal_interrupt_master_enable();
    1378:	f000 fac8 	bl	190c <am_hal_interrupt_master_enable>
#endif

    //
    // Loop forever - should never reach here
    //
    while (1)
    137c:	e7fe      	b.n	137c <main+0x1b4>
    137e:	bf00      	nop
    1380:	100012f4 	.word	0x100012f4
    1384:	40010060 	.word	0x40010060
    1388:	40010048 	.word	0x40010048
    138c:	40010014 	.word	0x40010014
    1390:	400100f4 	.word	0x400100f4
    1394:	10001085 	.word	0x10001085

00001398 <multiboot_decrypt>:
    {0xA5A5A5A5, },
    {0x66666666, },
};

static void multiboot_decrypt(uint32_t * data, uint32_t size_words, uint32_t *key, uint32_t key_size_words, uint32_t * iv)
{
    1398:	b480      	push	{r7}
    139a:	b089      	sub	sp, #36	; 0x24
    139c:	af00      	add	r7, sp, #0
    139e:	60f8      	str	r0, [r7, #12]
    13a0:	60b9      	str	r1, [r7, #8]
    13a2:	607a      	str	r2, [r7, #4]
    13a4:	603b      	str	r3, [r7, #0]
    int i, j;
    uint32_t temp;
    for ( j = 0; j < size_words / key_size_words; j++ )
    13a6:	2300      	movs	r3, #0
    13a8:	61bb      	str	r3, [r7, #24]
    13aa:	e03d      	b.n	1428 <multiboot_decrypt+0x90>
    {
        for ( i = 0; i < key_size_words; i++ )
    13ac:	2300      	movs	r3, #0
    13ae:	61fb      	str	r3, [r7, #28]
    13b0:	e033      	b.n	141a <multiboot_decrypt+0x82>
        {
            temp = data[j * key_size_words + i];
    13b2:	69bb      	ldr	r3, [r7, #24]
    13b4:	683a      	ldr	r2, [r7, #0]
    13b6:	fb02 f203 	mul.w	r2, r2, r3
    13ba:	69fb      	ldr	r3, [r7, #28]
    13bc:	4413      	add	r3, r2
    13be:	009b      	lsls	r3, r3, #2
    13c0:	68fa      	ldr	r2, [r7, #12]
    13c2:	4413      	add	r3, r2
    13c4:	681b      	ldr	r3, [r3, #0]
    13c6:	617b      	str	r3, [r7, #20]
            data[j * key_size_words + i] = (data[j * key_size_words + i] ^ key[i]) ^ iv[i];
    13c8:	69bb      	ldr	r3, [r7, #24]
    13ca:	683a      	ldr	r2, [r7, #0]
    13cc:	fb02 f203 	mul.w	r2, r2, r3
    13d0:	69fb      	ldr	r3, [r7, #28]
    13d2:	4413      	add	r3, r2
    13d4:	009b      	lsls	r3, r3, #2
    13d6:	68fa      	ldr	r2, [r7, #12]
    13d8:	4413      	add	r3, r2
    13da:	69ba      	ldr	r2, [r7, #24]
    13dc:	6839      	ldr	r1, [r7, #0]
    13de:	fb01 f102 	mul.w	r1, r1, r2
    13e2:	69fa      	ldr	r2, [r7, #28]
    13e4:	440a      	add	r2, r1
    13e6:	0092      	lsls	r2, r2, #2
    13e8:	68f9      	ldr	r1, [r7, #12]
    13ea:	440a      	add	r2, r1
    13ec:	6811      	ldr	r1, [r2, #0]
    13ee:	69fa      	ldr	r2, [r7, #28]
    13f0:	0092      	lsls	r2, r2, #2
    13f2:	6878      	ldr	r0, [r7, #4]
    13f4:	4402      	add	r2, r0
    13f6:	6812      	ldr	r2, [r2, #0]
    13f8:	4051      	eors	r1, r2
    13fa:	69fa      	ldr	r2, [r7, #28]
    13fc:	0092      	lsls	r2, r2, #2
    13fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1400:	4402      	add	r2, r0
    1402:	6812      	ldr	r2, [r2, #0]
    1404:	404a      	eors	r2, r1
    1406:	601a      	str	r2, [r3, #0]
            iv[i] = temp;
    1408:	69fb      	ldr	r3, [r7, #28]
    140a:	009b      	lsls	r3, r3, #2
    140c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    140e:	4413      	add	r3, r2
    1410:	697a      	ldr	r2, [r7, #20]
    1412:	601a      	str	r2, [r3, #0]
        for ( i = 0; i < key_size_words; i++ )
    1414:	69fb      	ldr	r3, [r7, #28]
    1416:	3301      	adds	r3, #1
    1418:	61fb      	str	r3, [r7, #28]
    141a:	69fa      	ldr	r2, [r7, #28]
    141c:	683b      	ldr	r3, [r7, #0]
    141e:	429a      	cmp	r2, r3
    1420:	d3c7      	bcc.n	13b2 <multiboot_decrypt+0x1a>
    for ( j = 0; j < size_words / key_size_words; j++ )
    1422:	69bb      	ldr	r3, [r7, #24]
    1424:	3301      	adds	r3, #1
    1426:	61bb      	str	r3, [r7, #24]
    1428:	68ba      	ldr	r2, [r7, #8]
    142a:	683b      	ldr	r3, [r7, #0]
    142c:	fbb2 f2f3 	udiv	r2, r2, r3
    1430:	69bb      	ldr	r3, [r7, #24]
    1432:	429a      	cmp	r2, r3
    1434:	d8ba      	bhi.n	13ac <multiboot_decrypt+0x14>
        }
    }
}
    1436:	bf00      	nop
    1438:	3724      	adds	r7, #36	; 0x24
    143a:	46bd      	mov	sp, r7
    143c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1440:	4770      	bx	lr
	...

00001444 <validate_keyidx>:
}
#endif

static bool
validate_keyidx(uint32_t keyIdx)
{
    1444:	b580      	push	{r7, lr}
    1446:	b082      	sub	sp, #8
    1448:	af00      	add	r7, sp, #0
    144a:	6078      	str	r0, [r7, #4]
    if ( keyIdx > MAX_KEYS )
    144c:	687b      	ldr	r3, [r7, #4]
    144e:	2b08      	cmp	r3, #8
    1450:	d901      	bls.n	1456 <validate_keyidx+0x12>
    {
        return true;
    1452:	2301      	movs	r3, #1
    1454:	e004      	b.n	1460 <validate_keyidx+0x1c>
    }
    // Validate the key index to make sure it has not been revoked
    return am_bootloader_check_index(keyIdx, (uint32_t *)KEY_VALID_MASK_LOCATION);
    1456:	4904      	ldr	r1, [pc, #16]	; (1468 <validate_keyidx+0x24>)
    1458:	6878      	ldr	r0, [r7, #4]
    145a:	f7ff f8b5 	bl	5c8 <am_bootloader_check_index>
    145e:	4603      	mov	r3, r0
}
    1460:	4618      	mov	r0, r3
    1462:	3708      	adds	r7, #8
    1464:	46bd      	mov	sp, r7
    1466:	bd80      	pop	{r7, pc}
    1468:	1000103c 	.word	0x1000103c

0000146c <validate_sec_trailer>:

static bool
validate_sec_trailer(multiboot_security_trailer_t *pTrailer)
{
    146c:	b580      	push	{r7, lr}
    146e:	b084      	sub	sp, #16
    1470:	af00      	add	r7, sp, #0
    1472:	6078      	str	r0, [r7, #4]
    int i;
    // Validate signature of Seurity trailer
    // Signature = CRC32 of trailer ^ key
    uint32_t crc = 0;
    1474:	2300      	movs	r3, #0
    1476:	60bb      	str	r3, [r7, #8]
    am_bootloader_partial_crc32(&(pTrailer->keyIdx), sizeof(pTrailer->keyIdx), &crc);
    1478:	687b      	ldr	r3, [r7, #4]
    147a:	f107 0208 	add.w	r2, r7, #8
    147e:	2104      	movs	r1, #4
    1480:	4618      	mov	r0, r3
    1482:	f7fe fe4b 	bl	11c <am_bootloader_partial_crc32>
    am_bootloader_partial_crc32(&(pTrailer->secInfo), sizeof(pTrailer->secInfo), &crc);
    1486:	687b      	ldr	r3, [r7, #4]
    1488:	3304      	adds	r3, #4
    148a:	f107 0208 	add.w	r2, r7, #8
    148e:	2110      	movs	r1, #16
    1490:	4618      	mov	r0, r3
    1492:	f7fe fe43 	bl	11c <am_bootloader_partial_crc32>
    for ( i = 0; i < KEY_SIZE_WORDS; i++ )
    1496:	2300      	movs	r3, #0
    1498:	60fb      	str	r3, [r7, #12]
    149a:	e015      	b.n	14c8 <validate_sec_trailer+0x5c>
    {
        if ( pTrailer->signature[i] != (crc ^ keyTbl[pTrailer->keyIdx][i]) )
    149c:	687a      	ldr	r2, [r7, #4]
    149e:	68fb      	ldr	r3, [r7, #12]
    14a0:	3304      	adds	r3, #4
    14a2:	009b      	lsls	r3, r3, #2
    14a4:	4413      	add	r3, r2
    14a6:	685a      	ldr	r2, [r3, #4]
    14a8:	687b      	ldr	r3, [r7, #4]
    14aa:	6819      	ldr	r1, [r3, #0]
    14ac:	480a      	ldr	r0, [pc, #40]	; (14d8 <validate_sec_trailer+0x6c>)
    14ae:	68fb      	ldr	r3, [r7, #12]
    14b0:	440b      	add	r3, r1
    14b2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
    14b6:	68bb      	ldr	r3, [r7, #8]
    14b8:	404b      	eors	r3, r1
    14ba:	429a      	cmp	r2, r3
    14bc:	d001      	beq.n	14c2 <validate_sec_trailer+0x56>
        {
            return true;
    14be:	2301      	movs	r3, #1
    14c0:	e006      	b.n	14d0 <validate_sec_trailer+0x64>
    for ( i = 0; i < KEY_SIZE_WORDS; i++ )
    14c2:	68fb      	ldr	r3, [r7, #12]
    14c4:	3301      	adds	r3, #1
    14c6:	60fb      	str	r3, [r7, #12]
    14c8:	68fb      	ldr	r3, [r7, #12]
    14ca:	2b00      	cmp	r3, #0
    14cc:	dde6      	ble.n	149c <validate_sec_trailer+0x30>
        }
    }
    return false;
    14ce:	2300      	movs	r3, #0
}
    14d0:	4618      	mov	r0, r3
    14d2:	3710      	adds	r7, #16
    14d4:	46bd      	mov	sp, r7
    14d6:	bd80      	pop	{r7, pc}
    14d8:	10001040 	.word	0x10001040

000014dc <init_multiboot_secure>:
// Verify the security trailer & initialize the security params
int
init_multiboot_secure(uint32_t length, uint32_t *pData,
                      bool bStoreInSram, am_bootloader_image_t *psImage,
                      uint32_t *pProtect)
{
    14dc:	b580      	push	{r7, lr}
    14de:	b086      	sub	sp, #24
    14e0:	af00      	add	r7, sp, #0
    14e2:	60f8      	str	r0, [r7, #12]
    14e4:	60b9      	str	r1, [r7, #8]
    14e6:	603b      	str	r3, [r7, #0]
    14e8:	4613      	mov	r3, r2
    14ea:	71fb      	strb	r3, [r7, #7]
    int i;
    multiboot_security_trailer_t *pSec = (multiboot_security_trailer_t *)pData;
    14ec:	68bb      	ldr	r3, [r7, #8]
    14ee:	613b      	str	r3, [r7, #16]
    // Verify the length
    if ( length != sizeof(*pSec) )
    14f0:	68fb      	ldr	r3, [r7, #12]
    14f2:	2b18      	cmp	r3, #24
    14f4:	d002      	beq.n	14fc <init_multiboot_secure+0x20>
    {
        return -1;
    14f6:	f04f 33ff 	mov.w	r3, #4294967295
    14fa:	e05c      	b.n	15b6 <init_multiboot_secure+0xda>
    }
    // Validate key index
    if ( validate_keyidx(pSec->keyIdx) )
    14fc:	693b      	ldr	r3, [r7, #16]
    14fe:	681b      	ldr	r3, [r3, #0]
    1500:	4618      	mov	r0, r3
    1502:	f7ff ff9f 	bl	1444 <validate_keyidx>
    1506:	4603      	mov	r3, r0
    1508:	2b00      	cmp	r3, #0
    150a:	d002      	beq.n	1512 <init_multiboot_secure+0x36>
    {
        return -1;
    150c:	f04f 33ff 	mov.w	r3, #4294967295
    1510:	e051      	b.n	15b6 <init_multiboot_secure+0xda>
    }
    // Now Authenticate the security trailer itself
    if ( validate_sec_trailer(pSec) )
    1512:	6938      	ldr	r0, [r7, #16]
    1514:	f7ff ffaa 	bl	146c <validate_sec_trailer>
    1518:	4603      	mov	r3, r0
    151a:	2b00      	cmp	r3, #0
    151c:	d002      	beq.n	1524 <init_multiboot_secure+0x48>
    {
        return -1;
    151e:	f04f 33ff 	mov.w	r3, #4294967295
    1522:	e048      	b.n	15b6 <init_multiboot_secure+0xda>
    }
    // We could reject the download if we can not validate if before flashing
    // by checking bStoreInSram herea - optional
    // Initialize State Variables
    g_sSecState.imageLength = pSec->secInfo.imageLength;
    1524:	693b      	ldr	r3, [r7, #16]
    1526:	689b      	ldr	r3, [r3, #8]
    1528:	4a25      	ldr	r2, [pc, #148]	; (15c0 <init_multiboot_secure+0xe4>)
    152a:	6093      	str	r3, [r2, #8]
    if ( g_sSecState.imageLength != psImage->ui32NumBytes )
    152c:	4b24      	ldr	r3, [pc, #144]	; (15c0 <init_multiboot_secure+0xe4>)
    152e:	689a      	ldr	r2, [r3, #8]
    1530:	683b      	ldr	r3, [r7, #0]
    1532:	685b      	ldr	r3, [r3, #4]
    1534:	429a      	cmp	r2, r3
    1536:	d002      	beq.n	153e <init_multiboot_secure+0x62>
    {
        return -1;
    1538:	f04f 33ff 	mov.w	r3, #4294967295
    153c:	e03b      	b.n	15b6 <init_multiboot_secure+0xda>
    }
    g_sSecState.clearCRC = 0;
    153e:	4b20      	ldr	r3, [pc, #128]	; (15c0 <init_multiboot_secure+0xe4>)
    1540:	2200      	movs	r2, #0
    1542:	61da      	str	r2, [r3, #28]
    g_sSecState.offset = 0;
    1544:	4b1e      	ldr	r3, [pc, #120]	; (15c0 <init_multiboot_secure+0xe4>)
    1546:	2200      	movs	r2, #0
    1548:	619a      	str	r2, [r3, #24]
    for ( i = 0; i < KEY_SIZE_WORDS; i++ )
    154a:	2300      	movs	r3, #0
    154c:	617b      	str	r3, [r7, #20]
    154e:	e02a      	b.n	15a6 <init_multiboot_secure+0xca>
    {
        // Initialize IV
        g_sSecState.initVector[i] = pSec->secInfo.initVector[i];
    1550:	693a      	ldr	r2, [r7, #16]
    1552:	697b      	ldr	r3, [r7, #20]
    1554:	3302      	adds	r3, #2
    1556:	009b      	lsls	r3, r3, #2
    1558:	4413      	add	r3, r2
    155a:	689a      	ldr	r2, [r3, #8]
    155c:	4918      	ldr	r1, [pc, #96]	; (15c0 <init_multiboot_secure+0xe4>)
    155e:	697b      	ldr	r3, [r7, #20]
    1560:	3304      	adds	r3, #4
    1562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        // Store Signature
        g_sSecState.signature[i] = pSec->secInfo.imageSignature[i];
    1566:	693a      	ldr	r2, [r7, #16]
    1568:	697b      	ldr	r3, [r7, #20]
    156a:	3302      	adds	r3, #2
    156c:	009b      	lsls	r3, r3, #2
    156e:	4413      	add	r3, r2
    1570:	685a      	ldr	r2, [r3, #4]
    1572:	4913      	ldr	r1, [pc, #76]	; (15c0 <init_multiboot_secure+0xe4>)
    1574:	697b      	ldr	r3, [r7, #20]
    1576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        g_sSecState.runningSignature[i] = 0;
    157a:	4a11      	ldr	r2, [pc, #68]	; (15c0 <init_multiboot_secure+0xe4>)
    157c:	697b      	ldr	r3, [r7, #20]
    157e:	009b      	lsls	r3, r3, #2
    1580:	4413      	add	r3, r2
    1582:	2200      	movs	r2, #0
    1584:	605a      	str	r2, [r3, #4]
        g_sSecState.key[i] = keyTbl[pSec->keyIdx][i];
    1586:	693b      	ldr	r3, [r7, #16]
    1588:	681a      	ldr	r2, [r3, #0]
    158a:	490e      	ldr	r1, [pc, #56]	; (15c4 <init_multiboot_secure+0xe8>)
    158c:	697b      	ldr	r3, [r7, #20]
    158e:	4413      	add	r3, r2
    1590:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    1594:	490a      	ldr	r1, [pc, #40]	; (15c0 <init_multiboot_secure+0xe4>)
    1596:	697b      	ldr	r3, [r7, #20]
    1598:	3304      	adds	r3, #4
    159a:	009b      	lsls	r3, r3, #2
    159c:	440b      	add	r3, r1
    159e:	605a      	str	r2, [r3, #4]
    for ( i = 0; i < KEY_SIZE_WORDS; i++ )
    15a0:	697b      	ldr	r3, [r7, #20]
    15a2:	3301      	adds	r3, #1
    15a4:	617b      	str	r3, [r7, #20]
    15a6:	697b      	ldr	r3, [r7, #20]
    15a8:	2b00      	cmp	r3, #0
    15aa:	ddd1      	ble.n	1550 <init_multiboot_secure+0x74>
    }
    *pProtect = pSec->secInfo.protection; // Could be set if copy-protection is desired
    15ac:	693b      	ldr	r3, [r7, #16]
    15ae:	685a      	ldr	r2, [r3, #4]
    15b0:	6a3b      	ldr	r3, [r7, #32]
    15b2:	601a      	str	r2, [r3, #0]
    return 0;
    15b4:	2300      	movs	r3, #0
}
    15b6:	4618      	mov	r0, r3
    15b8:	3718      	adds	r7, #24
    15ba:	46bd      	mov	sp, r7
    15bc:	bd80      	pop	{r7, pc}
    15be:	bf00      	nop
    15c0:	10001088 	.word	0x10001088
    15c4:	10001040 	.word	0x10001040

000015c8 <multiboot_secure_decrypt>:

void
multiboot_secure_decrypt(void *pData, uint32_t ui32NumBytes)
{
    15c8:	b580      	push	{r7, lr}
    15ca:	b084      	sub	sp, #16
    15cc:	af02      	add	r7, sp, #8
    15ce:	6078      	str	r0, [r7, #4]
    15d0:	6039      	str	r1, [r7, #0]
    // Do in place decryption
    // With knowledge of image structure, this can also grab the image version
    // from a fixed location from within image
    multiboot_decrypt((uint32_t *)pData, ui32NumBytes / 4,
    15d2:	683b      	ldr	r3, [r7, #0]
    15d4:	0899      	lsrs	r1, r3, #2
    15d6:	4b0b      	ldr	r3, [pc, #44]	; (1604 <multiboot_secure_decrypt+0x3c>)
    15d8:	9300      	str	r3, [sp, #0]
    15da:	2301      	movs	r3, #1
    15dc:	4a0a      	ldr	r2, [pc, #40]	; (1608 <multiboot_secure_decrypt+0x40>)
    15de:	6878      	ldr	r0, [r7, #4]
    15e0:	f7ff feda 	bl	1398 <multiboot_decrypt>
        g_sSecState.key, KEY_SIZE_WORDS, g_sSecState.initVector);
    // Update the running CRC for clear image
    am_bootloader_partial_crc32(pData, ui32NumBytes, &g_sSecState.clearCRC);
    15e4:	4a09      	ldr	r2, [pc, #36]	; (160c <multiboot_secure_decrypt+0x44>)
    15e6:	6839      	ldr	r1, [r7, #0]
    15e8:	6878      	ldr	r0, [r7, #4]
    15ea:	f7fe fd97 	bl	11c <am_bootloader_partial_crc32>
    g_sSecState.offset += ui32NumBytes;
    15ee:	4b08      	ldr	r3, [pc, #32]	; (1610 <multiboot_secure_decrypt+0x48>)
    15f0:	699a      	ldr	r2, [r3, #24]
    15f2:	683b      	ldr	r3, [r7, #0]
    15f4:	4413      	add	r3, r2
    15f6:	4a06      	ldr	r2, [pc, #24]	; (1610 <multiboot_secure_decrypt+0x48>)
    15f8:	6193      	str	r3, [r2, #24]
}
    15fa:	bf00      	nop
    15fc:	3708      	adds	r7, #8
    15fe:	46bd      	mov	sp, r7
    1600:	bd80      	pop	{r7, pc}
    1602:	bf00      	nop
    1604:	10001098 	.word	0x10001098
    1608:	1000109c 	.word	0x1000109c
    160c:	100010a4 	.word	0x100010a4
    1610:	10001088 	.word	0x10001088

00001614 <multiboot_secure_verify>:

// Verify the authenticity and integrity of the Image
// return the clear CRC for integrity verification going forward
int
multiboot_secure_verify(uint32_t *pui32ClearCRC)
{
    1614:	b480      	push	{r7}
    1616:	b085      	sub	sp, #20
    1618:	af00      	add	r7, sp, #0
    161a:	6078      	str	r0, [r7, #4]
    // Check the signature with computed Value - for authentication
    // Optionally check the version for replay protection
    // Return 0 for success
    // Check for image signature to validate authenticity (and integrity)
    // Image Signature is ClearCRC ^ key
    for ( i = 0; i < KEY_SIZE_WORDS; i++ )
    161c:	2300      	movs	r3, #0
    161e:	60fb      	str	r3, [r7, #12]
    1620:	e01e      	b.n	1660 <multiboot_secure_verify+0x4c>
    {
        g_sSecState.runningSignature[i] = g_sSecState.key[i] ^ g_sSecState.clearCRC;
    1622:	4a16      	ldr	r2, [pc, #88]	; (167c <multiboot_secure_verify+0x68>)
    1624:	68fb      	ldr	r3, [r7, #12]
    1626:	3304      	adds	r3, #4
    1628:	009b      	lsls	r3, r3, #2
    162a:	4413      	add	r3, r2
    162c:	685a      	ldr	r2, [r3, #4]
    162e:	4b13      	ldr	r3, [pc, #76]	; (167c <multiboot_secure_verify+0x68>)
    1630:	69db      	ldr	r3, [r3, #28]
    1632:	405a      	eors	r2, r3
    1634:	4911      	ldr	r1, [pc, #68]	; (167c <multiboot_secure_verify+0x68>)
    1636:	68fb      	ldr	r3, [r7, #12]
    1638:	009b      	lsls	r3, r3, #2
    163a:	440b      	add	r3, r1
    163c:	605a      	str	r2, [r3, #4]
        if ( g_sSecState.runningSignature[i] != g_sSecState.signature[i] )
    163e:	4a0f      	ldr	r2, [pc, #60]	; (167c <multiboot_secure_verify+0x68>)
    1640:	68fb      	ldr	r3, [r7, #12]
    1642:	009b      	lsls	r3, r3, #2
    1644:	4413      	add	r3, r2
    1646:	685a      	ldr	r2, [r3, #4]
    1648:	490c      	ldr	r1, [pc, #48]	; (167c <multiboot_secure_verify+0x68>)
    164a:	68fb      	ldr	r3, [r7, #12]
    164c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    1650:	429a      	cmp	r2, r3
    1652:	d002      	beq.n	165a <multiboot_secure_verify+0x46>
        {
            return -1;
    1654:	f04f 33ff 	mov.w	r3, #4294967295
    1658:	e00a      	b.n	1670 <multiboot_secure_verify+0x5c>
    for ( i = 0; i < KEY_SIZE_WORDS; i++ )
    165a:	68fb      	ldr	r3, [r7, #12]
    165c:	3301      	adds	r3, #1
    165e:	60fb      	str	r3, [r7, #12]
    1660:	68fb      	ldr	r3, [r7, #12]
    1662:	2b00      	cmp	r3, #0
    1664:	dddd      	ble.n	1622 <multiboot_secure_verify+0xe>
        }
    }
    // Update the CRC in psImage for integrity verification going forward
    *pui32ClearCRC = g_sSecState.clearCRC;
    1666:	4b05      	ldr	r3, [pc, #20]	; (167c <multiboot_secure_verify+0x68>)
    1668:	69da      	ldr	r2, [r3, #28]
    166a:	687b      	ldr	r3, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
    return 0;
    166e:	2300      	movs	r3, #0
}
    1670:	4618      	mov	r0, r3
    1672:	3714      	adds	r7, #20
    1674:	46bd      	mov	sp, r7
    1676:	f85d 7b04 	ldr.w	r7, [sp], #4
    167a:	4770      	bx	lr
    167c:	10001088 	.word	0x10001088

00001680 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    1680:	4811      	ldr	r0, [pc, #68]	; (16c8 <zero_loop+0x12>)
    1682:	4912      	ldr	r1, [pc, #72]	; (16cc <zero_loop+0x16>)
    1684:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    1686:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    168a:	4811      	ldr	r0, [pc, #68]	; (16d0 <zero_loop+0x1a>)
    168c:	6801      	ldr	r1, [r0, #0]
    168e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    1692:	6001      	str	r1, [r0, #0]
    1694:	f3bf 8f4f 	dsb	sy
    1698:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    169c:	480d      	ldr	r0, [pc, #52]	; (16d4 <zero_loop+0x1e>)
    169e:	490e      	ldr	r1, [pc, #56]	; (16d8 <zero_loop+0x22>)
    16a0:	4a0e      	ldr	r2, [pc, #56]	; (16dc <zero_loop+0x26>)

000016a2 <copy_loop>:
    16a2:	f850 3b04 	ldr.w	r3, [r0], #4
    16a6:	f841 3b04 	str.w	r3, [r1], #4
    16aa:	4291      	cmp	r1, r2
    16ac:	dbf9      	blt.n	16a2 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    16ae:	480c      	ldr	r0, [pc, #48]	; (16e0 <zero_loop+0x2a>)
    16b0:	490c      	ldr	r1, [pc, #48]	; (16e4 <zero_loop+0x2e>)
    16b2:	f04f 0200 	mov.w	r2, #0

000016b6 <zero_loop>:
    16b6:	4288      	cmp	r0, r1
    16b8:	bfb8      	it	lt
    16ba:	f840 2b04 	strlt.w	r2, [r0], #4
    16be:	dbfa      	blt.n	16b6 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    16c0:	f7ff fd82 	bl	11c8 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    16c4:	be00      	bkpt	0x0000
}
    16c6:	bf00      	nop
    16c8:	e000ed08 	.word	0xe000ed08
    16cc:	00000000 	.word	0x00000000
    16d0:	e000ed88 	.word	0xe000ed88
    16d4:	00002504 	.word	0x00002504
    16d8:	10001000 	.word	0x10001000
    16dc:	10001060 	.word	0x10001060
    16e0:	10001060 	.word	0x10001060
    16e4:	100032f4 	.word	0x100032f4

000016e8 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
    16e8:	b480      	push	{r7}
    16ea:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    16ec:	e7fe      	b.n	16ec <am_nmi_isr+0x4>

000016ee <am_busfault_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_fault_isr(void)
{
    16ee:	b480      	push	{r7}
    16f0:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    16f2:	e7fe      	b.n	16f2 <am_busfault_isr+0x4>

000016f4 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    16f4:	b480      	push	{r7}
    16f6:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    16f8:	e7fe      	b.n	16f8 <am_adc_isr+0x4>
	...

000016fc <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    16fc:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    16fe:	f000 f9bf 	bl	1a80 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    1702:	f000 fa2b 	bl	1b5c <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    1706:	f000 fbc5 	bl	1e94 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    170a:	2001      	movs	r0, #1
    170c:	f000 fa3c 	bl	1b88 <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1710:	2001      	movs	r0, #1
    1712:	f000 f82d 	bl	1770 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    1716:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    171a:	f000 ba43 	b.w	1ba4 <am_hal_rtc_osc_disable>
    171e:	bf00      	nop

00001720 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    1720:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    1722:	4604      	mov	r4, r0
    1724:	b120      	cbz	r0, 1730 <am_hal_clkgen_sysclk_select+0x10>
    1726:	4a06      	ldr	r2, [pc, #24]	; (1740 <am_hal_clkgen_sysclk_select+0x20>)
    1728:	4806      	ldr	r0, [pc, #24]	; (1744 <am_hal_clkgen_sysclk_select+0x24>)
    172a:	2153      	movs	r1, #83	; 0x53
    172c:	f000 f84e 	bl	17cc <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1730:	4b05      	ldr	r3, [pc, #20]	; (1748 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the required operating value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1732:	4906      	ldr	r1, [pc, #24]	; (174c <am_hal_clkgen_sysclk_select+0x2c>)
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1734:	2047      	movs	r0, #71	; 0x47

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    1736:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1738:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    173a:	600c      	str	r4, [r1, #0]
    AM_REG(CLKGEN, CLKKEY) = 0;
    173c:	601a      	str	r2, [r3, #0]
    173e:	bd10      	pop	{r4, pc}
    1740:	000023ac 	.word	0x000023ac
    1744:	000023e4 	.word	0x000023e4
    1748:	40004014 	.word	0x40004014
    174c:	40004018 	.word	0x40004018

00001750 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1750:	4b04      	ldr	r3, [pc, #16]	; (1764 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    1752:	4905      	ldr	r1, [pc, #20]	; (1768 <am_hal_clkgen_sysclk_get+0x18>)
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1754:	681a      	ldr	r2, [r3, #0]
            return 48000000;
    1756:	4805      	ldr	r0, [pc, #20]	; (176c <am_hal_clkgen_sysclk_get+0x1c>)
    switch ( ui32ClockSetting )
    1758:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    175c:	bf08      	it	eq
    175e:	4608      	moveq	r0, r1
    1760:	4770      	bx	lr
    1762:	bf00      	nop
    1764:	40004018 	.word	0x40004018
    1768:	02dc6c00 	.word	0x02dc6c00
    176c:	016e3600 	.word	0x016e3600

00001770 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1770:	0783      	lsls	r3, r0, #30
    1772:	d003      	beq.n	177c <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    1774:	4b02      	ldr	r3, [pc, #8]	; (1780 <am_hal_clkgen_osc_stop+0x10>)
    1776:	681a      	ldr	r2, [r3, #0]
    1778:	4310      	orrs	r0, r2
    177a:	6018      	str	r0, [r3, #0]
    177c:	4770      	bx	lr
    177e:	bf00      	nop
    1780:	4000400c 	.word	0x4000400c

00001784 <am_hal_clkgen_uarten_set>:
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    uint32_t ui32Mask;

    if ( (ui32Module >= AM_REG_UART_NUM_MODULES)        ||
    1784:	2801      	cmp	r0, #1
    1786:	d900      	bls.n	178a <am_hal_clkgen_uarten_set+0x6>
    1788:	4770      	bx	lr
    178a:	2903      	cmp	r1, #3
    178c:	d8fc      	bhi.n	1788 <am_hal_clkgen_uarten_set+0x4>
{
    178e:	b530      	push	{r4, r5, lr}
         (ui32UartEn > AM_HAL_CLKGEN_UARTEN_EN_POWER_SAV) )
    {
        return;
    }

    ui32UartEn <<= (ui32Module * AM_HAL_CLKGEN_UARTEN_UARTENn_S(ui32Module));
    1790:	fb00 f500 	mul.w	r5, r0, r0
{
    1794:	b083      	sub	sp, #12
    1796:	4604      	mov	r4, r0
    ui32UartEn <<= (ui32Module * AM_HAL_CLKGEN_UARTEN_UARTENn_S(ui32Module));
    1798:	00e8      	lsls	r0, r5, #3
    179a:	fa01 f500 	lsl.w	r5, r1, r0
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    179e:	f000 f8b9 	bl	1914 <am_hal_interrupt_master_disable>

    //
    // Set the UART clock
    //
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    17a2:	4b09      	ldr	r3, [pc, #36]	; (17c8 <am_hal_clkgen_uarten_set+0x44>)
    AM_CRITICAL_BEGIN_ASM
    17a4:	9001      	str	r0, [sp, #4]
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    17a6:	681a      	ldr	r2, [r3, #0]
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));
    17a8:	f04f 0c03 	mov.w	ip, #3
    17ac:	00e1      	lsls	r1, r4, #3
    17ae:	fa0c f401 	lsl.w	r4, ip, r1
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    17b2:	ea22 0004 	bic.w	r0, r2, r4
    17b6:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, UARTEN) |= ui32UartEn;
    17b8:	6819      	ldr	r1, [r3, #0]
    17ba:	430d      	orrs	r5, r1
    17bc:	601d      	str	r5, [r3, #0]

    //
    // Begin critical section.
    //
    AM_CRITICAL_END_ASM
    17be:	9801      	ldr	r0, [sp, #4]
    17c0:	f000 f8ac 	bl	191c <am_hal_interrupt_master_set>
}
    17c4:	b003      	add	sp, #12
    17c6:	bd30      	pop	{r4, r5, pc}
    17c8:	40004034 	.word	0x40004034

000017cc <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    17cc:	e7fe      	b.n	17cc <am_hal_debug_error>
    17ce:	bf00      	nop

000017d0 <am_hal_flash_page_erase>:
//*****************************************************************************
int
am_hal_flash_page_erase(uint32_t ui32Value, uint32_t ui32FlashInst,
                        uint32_t ui32PageNum)
{
    return g_am_hal_flash.flash_page_erase(ui32Value,
    17d0:	4b00      	ldr	r3, [pc, #0]	; (17d4 <am_hal_flash_page_erase+0x4>)
    17d2:	4718      	bx	r3
    17d4:	08000051 	.word	0x08000051

000017d8 <am_hal_flash_program_main>:
//
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32Value, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
    17d8:	b410      	push	{r4}
    return g_am_hal_flash.flash_program_main(ui32Value, pui32Src,
    17da:	4c02      	ldr	r4, [pc, #8]	; (17e4 <am_hal_flash_program_main+0xc>)
    17dc:	46a4      	mov	ip, r4
                                             pui32Dst, ui32NumWords);
}
    17de:	f85d 4b04 	ldr.w	r4, [sp], #4
    return g_am_hal_flash.flash_program_main(ui32Value, pui32Src,
    17e2:	4760      	bx	ip
    17e4:	08000055 	.word	0x08000055

000017e8 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    17e8:	4b00      	ldr	r3, [pc, #0]	; (17ec <am_hal_flash_delay+0x4>)
    17ea:	4718      	bx	r3
    17ec:	0800009d 	.word	0x0800009d

000017f0 <am_hal_gpio_int_enable>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_enable(uint64_t ui64InterruptMask)
{
    17f0:	b410      	push	{r4}
    //
    // Enable the interrupts.
    //
    AM_REG(GPIO, INT1EN) |= (ui64InterruptMask >> 32);
    17f2:	4c05      	ldr	r4, [pc, #20]	; (1808 <am_hal_gpio_int_enable+0x18>)
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    17f4:	4a05      	ldr	r2, [pc, #20]	; (180c <am_hal_gpio_int_enable+0x1c>)
    AM_REG(GPIO, INT1EN) |= (ui64InterruptMask >> 32);
    17f6:	6823      	ldr	r3, [r4, #0]
    17f8:	4319      	orrs	r1, r3
    17fa:	6021      	str	r1, [r4, #0]
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    17fc:	6811      	ldr	r1, [r2, #0]
}
    17fe:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    1802:	4308      	orrs	r0, r1
    1804:	6010      	str	r0, [r2, #0]
}
    1806:	4770      	bx	lr
    1808:	40010210 	.word	0x40010210
    180c:	40010200 	.word	0x40010200

00001810 <am_hal_gpio_int_disable>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_disable(uint64_t ui64InterruptMask)
{
    1810:	b570      	push	{r4, r5, r6, lr}
    1812:	b082      	sub	sp, #8
    1814:	460e      	mov	r6, r1
    1816:	4605      	mov	r5, r0
    //
    // Disable the interrupts.
    //
    AM_CRITICAL_BEGIN_ASM
    1818:	f000 f87c 	bl	1914 <am_hal_interrupt_master_disable>
    AM_REG(GPIO, INT1EN) &= ~(ui64InterruptMask >> 32);
    181c:	4c07      	ldr	r4, [pc, #28]	; (183c <am_hal_gpio_int_disable+0x2c>)
    AM_CRITICAL_BEGIN_ASM
    181e:	9001      	str	r0, [sp, #4]
    AM_REG(GPIO, INT1EN) &= ~(ui64InterruptMask >> 32);
    1820:	6823      	ldr	r3, [r4, #0]
    AM_REG(GPIO, INT0EN) &= ~(ui64InterruptMask & 0xFFFFFFFF);
    1822:	4a07      	ldr	r2, [pc, #28]	; (1840 <am_hal_gpio_int_disable+0x30>)
    AM_REG(GPIO, INT1EN) &= ~(ui64InterruptMask >> 32);
    1824:	ea23 0006 	bic.w	r0, r3, r6
    1828:	6020      	str	r0, [r4, #0]
    AM_REG(GPIO, INT0EN) &= ~(ui64InterruptMask & 0xFFFFFFFF);
    182a:	6811      	ldr	r1, [r2, #0]
    182c:	ea21 0505 	bic.w	r5, r1, r5
    1830:	6015      	str	r5, [r2, #0]
    AM_CRITICAL_END_ASM
    1832:	9801      	ldr	r0, [sp, #4]
    1834:	f000 f872 	bl	191c <am_hal_interrupt_master_set>
}
    1838:	b002      	add	sp, #8
    183a:	bd70      	pop	{r4, r5, r6, pc}
    183c:	40010210 	.word	0x40010210
    1840:	40010200 	.word	0x40010200

00001844 <am_hal_gpio_int_clear>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_clear(uint64_t ui64InterruptMask)
{
    1844:	b530      	push	{r4, r5, lr}
    1846:	b083      	sub	sp, #12
    1848:	460d      	mov	r5, r1
    184a:	4604      	mov	r4, r0
    //
    // Clear the interrupts.
    //
    AM_CRITICAL_BEGIN_ASM
    184c:	f000 f862 	bl	1914 <am_hal_interrupt_master_disable>
    AM_REG(GPIO, INT1CLR) = (ui64InterruptMask >> 32);
    1850:	4a04      	ldr	r2, [pc, #16]	; (1864 <am_hal_gpio_int_clear+0x20>)
    AM_REG(GPIO, INT0CLR) = (ui64InterruptMask & 0xFFFFFFFF);
    1852:	4b05      	ldr	r3, [pc, #20]	; (1868 <am_hal_gpio_int_clear+0x24>)
    AM_CRITICAL_BEGIN_ASM
    1854:	9001      	str	r0, [sp, #4]
    AM_REG(GPIO, INT1CLR) = (ui64InterruptMask >> 32);
    1856:	6015      	str	r5, [r2, #0]
    AM_REG(GPIO, INT0CLR) = (ui64InterruptMask & 0xFFFFFFFF);
    1858:	601c      	str	r4, [r3, #0]
    AM_CRITICAL_END_ASM
    185a:	9801      	ldr	r0, [sp, #4]
    185c:	f000 f85e 	bl	191c <am_hal_interrupt_master_set>
}
    1860:	b003      	add	sp, #12
    1862:	bd30      	pop	{r4, r5, pc}
    1864:	40010218 	.word	0x40010218
    1868:	40010208 	.word	0x40010208

0000186c <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    186c:	280f      	cmp	r0, #15
    186e:	d80b      	bhi.n	1888 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    1870:	2805      	cmp	r0, #5
    1872:	d013      	beq.n	189c <am_hal_interrupt_enable+0x30>
    1874:	2806      	cmp	r0, #6
    1876:	d017      	beq.n	18a8 <am_hal_interrupt_enable+0x3c>
    1878:	2804      	cmp	r0, #4
    187a:	d104      	bne.n	1886 <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    187c:	4a0d      	ldr	r2, [pc, #52]	; (18b4 <am_hal_interrupt_enable+0x48>)
    187e:	6813      	ldr	r3, [r2, #0]
    1880:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    1884:	6010      	str	r0, [r2, #0]
    1886:	4770      	bx	lr
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    1888:	f1a0 0310 	sub.w	r3, r0, #16
    188c:	f003 0c1f 	and.w	ip, r3, #31
    1890:	2001      	movs	r0, #1
    1892:	4909      	ldr	r1, [pc, #36]	; (18b8 <am_hal_interrupt_enable+0x4c>)
    1894:	fa00 f20c 	lsl.w	r2, r0, ip
    1898:	600a      	str	r2, [r1, #0]
    189a:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    189c:	4805      	ldr	r0, [pc, #20]	; (18b4 <am_hal_interrupt_enable+0x48>)
    189e:	6801      	ldr	r1, [r0, #0]
    18a0:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    18a4:	6002      	str	r2, [r0, #0]
            break;
    18a6:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    18a8:	4902      	ldr	r1, [pc, #8]	; (18b4 <am_hal_interrupt_enable+0x48>)
    18aa:	680a      	ldr	r2, [r1, #0]
    18ac:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    18b0:	600b      	str	r3, [r1, #0]
            break;
    18b2:	4770      	bx	lr
    18b4:	e000ed24 	.word	0xe000ed24
    18b8:	e000e100 	.word	0xe000e100

000018bc <am_hal_interrupt_disable>:
am_hal_interrupt_disable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    18bc:	280f      	cmp	r0, #15
    18be:	d80b      	bhi.n	18d8 <am_hal_interrupt_disable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    18c0:	2805      	cmp	r0, #5
    18c2:	d013      	beq.n	18ec <am_hal_interrupt_disable+0x30>
    18c4:	2806      	cmp	r0, #6
    18c6:	d017      	beq.n	18f8 <am_hal_interrupt_disable+0x3c>
    18c8:	2804      	cmp	r0, #4
    18ca:	d104      	bne.n	18d6 <am_hal_interrupt_disable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 0);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 0);
    18cc:	4a0d      	ldr	r2, [pc, #52]	; (1904 <am_hal_interrupt_disable+0x48>)
    18ce:	6813      	ldr	r3, [r2, #0]
    18d0:	f423 3080 	bic.w	r0, r3, #65536	; 0x10000
    18d4:	6010      	str	r0, [r2, #0]
    18d6:	4770      	bx	lr
        AM_REG(NVIC, ICER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    18d8:	f1a0 0310 	sub.w	r3, r0, #16
    18dc:	f003 0c1f 	and.w	ip, r3, #31
    18e0:	2001      	movs	r0, #1
    18e2:	4909      	ldr	r1, [pc, #36]	; (1908 <am_hal_interrupt_disable+0x4c>)
    18e4:	fa00 f20c 	lsl.w	r2, r0, ip
    18e8:	600a      	str	r2, [r1, #0]
    18ea:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 0);
    18ec:	4805      	ldr	r0, [pc, #20]	; (1904 <am_hal_interrupt_disable+0x48>)
    18ee:	6801      	ldr	r1, [r0, #0]
    18f0:	f421 3200 	bic.w	r2, r1, #131072	; 0x20000
    18f4:	6002      	str	r2, [r0, #0]
            break;
    18f6:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 0);
    18f8:	4902      	ldr	r1, [pc, #8]	; (1904 <am_hal_interrupt_disable+0x48>)
    18fa:	680a      	ldr	r2, [r1, #0]
    18fc:	f422 2380 	bic.w	r3, r2, #262144	; 0x40000
    1900:	600b      	str	r3, [r1, #0]
            break;
    1902:	4770      	bx	lr
    1904:	e000ed24 	.word	0xe000ed24
    1908:	e000e180 	.word	0xe000e180

0000190c <am_hal_interrupt_master_enable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    190c:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    1910:	b662      	cpsie	i
    __asm("    bx lr");
    1912:	4770      	bx	lr

00001914 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1914:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    1918:	b672      	cpsid	i
    __asm("    bx lr");
    191a:	4770      	bx	lr

0000191c <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    191c:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    1920:	4770      	bx	lr
    1922:	bf00      	nop

00001924 <am_hal_mcuctrl_device_info_get>:
am_hal_mcuctrl_device_info_get(am_hal_mcuctrl_device_t *psDevice)
{
    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    1924:	4b29      	ldr	r3, [pc, #164]	; (19cc <am_hal_mcuctrl_device_info_get+0xa8>)

    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
        g_am_hal_mcuctrl_flash_size[
    1926:	4a2a      	ldr	r2, [pc, #168]	; (19d0 <am_hal_mcuctrl_device_info_get+0xac>)
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    1928:	681b      	ldr	r3, [r3, #0]
    192a:	6003      	str	r3, [r0, #0]
{
    192c:	b4f0      	push	{r4, r5, r6, r7}
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    192e:	4f29      	ldr	r7, [pc, #164]	; (19d4 <am_hal_mcuctrl_device_info_get+0xb0>)
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    1930:	4e29      	ldr	r6, [pc, #164]	; (19d8 <am_hal_mcuctrl_device_info_get+0xb4>)
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    1932:	683f      	ldr	r7, [r7, #0]
    1934:	6047      	str	r7, [r0, #4]
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    1936:	6836      	ldr	r6, [r6, #0]
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    1938:	4c28      	ldr	r4, [pc, #160]	; (19dc <am_hal_mcuctrl_device_info_get+0xb8>)
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    193a:	6086      	str	r6, [r0, #8]
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    193c:	6824      	ldr	r4, [r4, #0]
    psDevice->ui32VendorID = AM_REG(MCUCTRL, VENDORID);
    193e:	4d28      	ldr	r5, [pc, #160]	; (19e0 <am_hal_mcuctrl_device_info_get+0xbc>)
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    1940:	60c4      	str	r4, [r0, #12]
            (psDevice->ui32ChipPN & AM_HAL_MCUCTRL_CHIP_INFO_FLASH_SIZE_M) >>
    1942:	f3c3 5703 	ubfx	r7, r3, #20, #4
    //
    // SRAM size from Part Number.
    //
    psDevice->ui32SRAMSize =
        g_am_hal_mcuctrl_sram_size[
            (psDevice->ui32ChipPN & AM_HAL_MCUCTRL_CHIP_INFO_SRAM_SIZE_M) >>
    1946:	f3c3 4c03 	ubfx	ip, r3, #16, #4
    psDevice->ui32VendorID = AM_REG(MCUCTRL, VENDORID);
    194a:	682d      	ldr	r5, [r5, #0]
    // Bits [7:4] are 0xE for Apollo, 0xD for Apollo2.
    // Bits [3:0] are defined differently for Apollo and Apollo2.
    //   For Apollo, the low nibble is 0x0.
    //   For Apollo2, the low nibble indicates flash and SRAM size.
    //
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    194c:	4925      	ldr	r1, [pc, #148]	; (19e4 <am_hal_mcuctrl_device_info_get+0xc0>)
    psDevice->ui32FlashSize =
    194e:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
    psDevice->ui32SRAMSize =
    1952:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
    psDevice->ui32VendorID = AM_REG(MCUCTRL, VENDORID);
    1956:	6105      	str	r5, [r0, #16]
            (psDevice->ui32ChipPN & AM_HAL_MCUCTRL_CHIP_INFO_QUAL_M) >>
    1958:	f003 0301 	and.w	r3, r3, #1
    psDevice->ui32FlashSize =
    195c:	6186      	str	r6, [r0, #24]
    psDevice->ui32SRAMSize =
    195e:	61c2      	str	r2, [r0, #28]
    psDevice->ui32Qualified =
    1960:	6143      	str	r3, [r0, #20]
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    1962:	680c      	ldr	r4, [r1, #0]
    psDevice->ui32JedecPN |= (AM_BFR(JEDEC, PID1, PNH4) << 8);
    1964:	4f20      	ldr	r7, [pc, #128]	; (19e8 <am_hal_mcuctrl_device_info_get+0xc4>)

    //
    // CHIPREV is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    psDevice->ui32JedecCHIPREV |= (AM_BFR(JEDEC, PID3, CHIPREVL4) << 0);
    1966:	4e21      	ldr	r6, [pc, #132]	; (19ec <am_hal_mcuctrl_device_info_get+0xc8>)

    //
    // Let's get the Coresight ID (32-bits across 4 registers)
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    1968:	4a21      	ldr	r2, [pc, #132]	; (19f0 <am_hal_mcuctrl_device_info_get+0xcc>)
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID2, CID) << 16);
    196a:	4d22      	ldr	r5, [pc, #136]	; (19f4 <am_hal_mcuctrl_device_info_get+0xd0>)
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    196c:	b2e4      	uxtb	r4, r4
    196e:	6204      	str	r4, [r0, #32]
    psDevice->ui32JedecPN |= (AM_BFR(JEDEC, PID1, PNH4) << 8);
    1970:	683b      	ldr	r3, [r7, #0]
    1972:	021b      	lsls	r3, r3, #8
    1974:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    1978:	4323      	orrs	r3, r4
    197a:	6203      	str	r3, [r0, #32]
    psDevice->ui32JedecJEPID  = (AM_BFR(JEDEC, PID1, JEPIDL) << 0);
    197c:	683f      	ldr	r7, [r7, #0]
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID1, CID) <<  8);
    197e:	4c1e      	ldr	r4, [pc, #120]	; (19f8 <am_hal_mcuctrl_device_info_get+0xd4>)
    psDevice->ui32JedecJEPID  = (AM_BFR(JEDEC, PID1, JEPIDL) << 0);
    1980:	f3c7 1703 	ubfx	r7, r7, #4, #4
    1984:	6247      	str	r7, [r0, #36]	; 0x24
    psDevice->ui32JedecJEPID |= (AM_BFR(JEDEC, PID2, JEPIDH) << 4);
    1986:	688b      	ldr	r3, [r1, #8]
    1988:	011b      	lsls	r3, r3, #4
    198a:	b2db      	uxtb	r3, r3
    198c:	433b      	orrs	r3, r7
    198e:	6243      	str	r3, [r0, #36]	; 0x24
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    1990:	688f      	ldr	r7, [r1, #8]
    1992:	f007 07f0 	and.w	r7, r7, #240	; 0xf0
    1996:	6287      	str	r7, [r0, #40]	; 0x28
    psDevice->ui32JedecCHIPREV |= (AM_BFR(JEDEC, PID3, CHIPREVL4) << 0);
    1998:	6836      	ldr	r6, [r6, #0]
    199a:	f3c6 1303 	ubfx	r3, r6, #4, #4
    199e:	433b      	orrs	r3, r7
    19a0:	6283      	str	r3, [r0, #40]	; 0x28
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    19a2:	6812      	ldr	r2, [r2, #0]
    19a4:	0617      	lsls	r7, r2, #24
    19a6:	62c7      	str	r7, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID2, CID) << 16);
    19a8:	682d      	ldr	r5, [r5, #0]
    19aa:	042e      	lsls	r6, r5, #16
    19ac:	f406 037f 	and.w	r3, r6, #16711680	; 0xff0000
    19b0:	431f      	orrs	r7, r3
    19b2:	62c7      	str	r7, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID1, CID) <<  8);
    19b4:	6824      	ldr	r4, [r4, #0]
    19b6:	0222      	lsls	r2, r4, #8
    19b8:	b295      	uxth	r5, r2
    19ba:	433d      	orrs	r5, r7
    19bc:	62c5      	str	r5, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID0, CID) <<  0);
    19be:	690f      	ldr	r7, [r1, #16]
    19c0:	b2f9      	uxtb	r1, r7
    19c2:	430d      	orrs	r5, r1
    19c4:	62c5      	str	r5, [r0, #44]	; 0x2c
}
    19c6:	bcf0      	pop	{r4, r5, r6, r7}
    19c8:	4770      	bx	lr
    19ca:	bf00      	nop
    19cc:	40020000 	.word	0x40020000
    19d0:	000023fc 	.word	0x000023fc
    19d4:	40020004 	.word	0x40020004
    19d8:	40020008 	.word	0x40020008
    19dc:	4002000c 	.word	0x4002000c
    19e0:	40020010 	.word	0x40020010
    19e4:	f0000fe0 	.word	0xf0000fe0
    19e8:	f0000fe4 	.word	0xf0000fe4
    19ec:	f0000fec 	.word	0xf0000fec
    19f0:	f0000ffc 	.word	0xf0000ffc
    19f4:	f0000ff8 	.word	0xf0000ff8
    19f8:	f0000ff4 	.word	0xf0000ff4

000019fc <am_hal_pwrctrl_periph_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    19fc:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    19fe:	4604      	mov	r4, r0
{
    1a00:	b082      	sub	sp, #8
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1a02:	b1b8      	cbz	r0, 1a34 <am_hal_pwrctrl_periph_enable+0x38>
    1a04:	1e43      	subs	r3, r0, #1
    1a06:	4203      	tst	r3, r0
    1a08:	d114      	bne.n	1a34 <am_hal_pwrctrl_periph_enable+0x38>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1a0a:	f7ff ff83 	bl	1914 <am_hal_interrupt_master_disable>

    //
    // Enable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    1a0e:	4a18      	ldr	r2, [pc, #96]	; (1a70 <am_hal_pwrctrl_periph_enable+0x74>)
    AM_CRITICAL_BEGIN_ASM
    1a10:	9001      	str	r0, [sp, #4]
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    1a12:	6810      	ldr	r0, [r2, #0]
    1a14:	4320      	orrs	r0, r4
    1a16:	6010      	str	r0, [r2, #0]

    //
    // End Critical Section.
    //
    AM_CRITICAL_END_ASM
    1a18:	9801      	ldr	r0, [sp, #4]
    1a1a:	f7ff ff7f 	bl	191c <am_hal_interrupt_master_set>

    //
    // Wait for the power to stablize.  Using a simple delay loop is more
    // power efficient than a polling loop.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);
    1a1e:	200e      	movs	r0, #14
    1a20:	f7ff fee2 	bl	17e8 <am_hal_flash_delay>

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    1a24:	f014 0f0e 	tst.w	r4, #14
    1a28:	d10a      	bne.n	1a40 <am_hal_pwrctrl_periph_enable+0x44>
    1a2a:	f014 0f70 	tst.w	r4, #112	; 0x70
    1a2e:	d00e      	beq.n	1a4e <am_hal_pwrctrl_periph_enable+0x52>
    1a30:	2408      	movs	r4, #8
    1a32:	e006      	b.n	1a42 <am_hal_pwrctrl_periph_enable+0x46>
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1a34:	4a0f      	ldr	r2, [pc, #60]	; (1a74 <am_hal_pwrctrl_periph_enable+0x78>)
    1a36:	4810      	ldr	r0, [pc, #64]	; (1a78 <am_hal_pwrctrl_periph_enable+0x7c>)
    1a38:	2160      	movs	r1, #96	; 0x60
    1a3a:	f7ff fec7 	bl	17cc <am_hal_debug_error>
    1a3e:	e7e4      	b.n	1a0a <am_hal_pwrctrl_periph_enable+0xe>
    POLL_PWRSTATUS(ui32Peripheral);
    1a40:	2404      	movs	r4, #4
    1a42:	4a0e      	ldr	r2, [pc, #56]	; (1a7c <am_hal_pwrctrl_periph_enable+0x80>)
    1a44:	6813      	ldr	r3, [r2, #0]
    1a46:	421c      	tst	r4, r3
    1a48:	d0fc      	beq.n	1a44 <am_hal_pwrctrl_periph_enable+0x48>
}
    1a4a:	b002      	add	sp, #8
    1a4c:	bd10      	pop	{r4, pc}
    POLL_PWRSTATUS(ui32Peripheral);
    1a4e:	f240 1181 	movw	r1, #385	; 0x181
    1a52:	420c      	tst	r4, r1
    1a54:	d108      	bne.n	1a68 <am_hal_pwrctrl_periph_enable+0x6c>
    1a56:	05a3      	lsls	r3, r4, #22
    1a58:	d408      	bmi.n	1a6c <am_hal_pwrctrl_periph_enable+0x70>
    1a5a:	f414 6f80 	tst.w	r4, #1024	; 0x400
    1a5e:	bf14      	ite	ne
    1a60:	2410      	movne	r4, #16
    1a62:	f04f 34ff 	moveq.w	r4, #4294967295
    1a66:	e7ec      	b.n	1a42 <am_hal_pwrctrl_periph_enable+0x46>
    1a68:	2402      	movs	r4, #2
    1a6a:	e7ea      	b.n	1a42 <am_hal_pwrctrl_periph_enable+0x46>
    1a6c:	2480      	movs	r4, #128	; 0x80
    1a6e:	e7e8      	b.n	1a42 <am_hal_pwrctrl_periph_enable+0x46>
    1a70:	40021008 	.word	0x40021008
    1a74:	0000243c 	.word	0x0000243c
    1a78:	00002470 	.word	0x00002470
    1a7c:	40021014 	.word	0x40021014

00001a80 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1a80:	4b0f      	ldr	r3, [pc, #60]	; (1ac0 <am_hal_pwrctrl_bucks_init+0x40>)
    1a82:	681a      	ldr	r2, [r3, #0]
    1a84:	0792      	lsls	r2, r2, #30
    1a86:	d502      	bpl.n	1a8e <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1a88:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1a8a:	07c3      	lsls	r3, r0, #31
    1a8c:	d40e      	bmi.n	1aac <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1a8e:	4b0d      	ldr	r3, [pc, #52]	; (1ac4 <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1a90:	4a0b      	ldr	r2, [pc, #44]	; (1ac0 <am_hal_pwrctrl_bucks_init+0x40>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1a92:	6819      	ldr	r1, [r3, #0]
    1a94:	f041 0002 	orr.w	r0, r1, #2
    1a98:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1a9a:	6819      	ldr	r1, [r3, #0]
    1a9c:	f041 0001 	orr.w	r0, r1, #1
    1aa0:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1aa2:	6813      	ldr	r3, [r2, #0]
    1aa4:	f003 0103 	and.w	r1, r3, #3
    1aa8:	2903      	cmp	r1, #3
    1aaa:	d1fa      	bne.n	1aa2 <am_hal_pwrctrl_bucks_init+0x22>
    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    1aac:	4a04      	ldr	r2, [pc, #16]	; (1ac0 <am_hal_pwrctrl_bucks_init+0x40>)
    1aae:	6810      	ldr	r0, [r2, #0]
    1ab0:	f000 0303 	and.w	r3, r0, #3
    1ab4:	2b03      	cmp	r3, #3
    1ab6:	d1fa      	bne.n	1aae <am_hal_pwrctrl_bucks_init+0x2e>
    am_hal_flash_delay(200 / 3);
    1ab8:	2042      	movs	r0, #66	; 0x42
    1aba:	f7ff be95 	b.w	17e8 <am_hal_flash_delay>
    1abe:	bf00      	nop
    1ac0:	40021004 	.word	0x40021004
    1ac4:	40021000 	.word	0x40021000

00001ac8 <am_hal_pwrctrl_bucks_enable>:
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1ac8:	4b0b      	ldr	r3, [pc, #44]	; (1af8 <am_hal_pwrctrl_bucks_enable+0x30>)
    1aca:	681a      	ldr	r2, [r3, #0]
    1acc:	0792      	lsls	r2, r2, #30
    1ace:	d502      	bpl.n	1ad6 <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1ad0:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1ad2:	07c3      	lsls	r3, r0, #31
    1ad4:	d40e      	bmi.n	1af4 <am_hal_pwrctrl_bucks_enable+0x2c>
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1ad6:	4b09      	ldr	r3, [pc, #36]	; (1afc <am_hal_pwrctrl_bucks_enable+0x34>)
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1ad8:	4a07      	ldr	r2, [pc, #28]	; (1af8 <am_hal_pwrctrl_bucks_enable+0x30>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1ada:	6819      	ldr	r1, [r3, #0]
    1adc:	f041 0002 	orr.w	r0, r1, #2
    1ae0:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1ae2:	6819      	ldr	r1, [r3, #0]
    1ae4:	f041 0001 	orr.w	r0, r1, #1
    1ae8:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1aea:	6813      	ldr	r3, [r2, #0]
    1aec:	f003 0103 	and.w	r1, r3, #3
    1af0:	2903      	cmp	r1, #3
    1af2:	d1fa      	bne.n	1aea <am_hal_pwrctrl_bucks_enable+0x22>
    1af4:	4770      	bx	lr
    1af6:	bf00      	nop
    1af8:	40021004 	.word	0x40021004
    1afc:	40021000 	.word	0x40021000

00001b00 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1b00:	4b12      	ldr	r3, [pc, #72]	; (1b4c <am_hal_pwrctrl_bucks_disable+0x4c>)
    1b02:	681a      	ldr	r2, [r3, #0]
    1b04:	0792      	lsls	r2, r2, #30
    1b06:	d402      	bmi.n	1b0e <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    1b08:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1b0a:	07c3      	lsls	r3, r0, #31
    1b0c:	d51c      	bpl.n	1b48 <am_hal_pwrctrl_bucks_disable+0x48>
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1b0e:	4910      	ldr	r1, [pc, #64]	; (1b50 <am_hal_pwrctrl_bucks_disable+0x50>)
    1b10:	680b      	ldr	r3, [r1, #0]
    1b12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1b16:	2a20      	cmp	r2, #32
    1b18:	d00b      	beq.n	1b32 <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    1b1a:	4b0e      	ldr	r3, [pc, #56]	; (1b54 <am_hal_pwrctrl_bucks_disable+0x54>)
    1b1c:	681a      	ldr	r2, [r3, #0]
    1b1e:	f022 0002 	bic.w	r0, r2, #2
    1b22:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    1b24:	6819      	ldr	r1, [r3, #0]
    1b26:	f021 0201 	bic.w	r2, r1, #1
    1b2a:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    1b2c:	200a      	movs	r0, #10
    1b2e:	f7ff be5b 	b.w	17e8 <am_hal_flash_delay>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_PWRADC_EN) )
    1b32:	4809      	ldr	r0, [pc, #36]	; (1b58 <am_hal_pwrctrl_bucks_disable+0x58>)
    1b34:	6801      	ldr	r1, [r0, #0]
    if ( isRev_ADC()  &&
    1b36:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1b3a:	d1ee      	bne.n	1b1a <am_hal_pwrctrl_bucks_disable+0x1a>
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    1b3c:	4805      	ldr	r0, [pc, #20]	; (1b54 <am_hal_pwrctrl_bucks_disable+0x54>)
    1b3e:	6803      	ldr	r3, [r0, #0]
    1b40:	f003 0105 	and.w	r1, r3, #5
    1b44:	6001      	str	r1, [r0, #0]
    1b46:	e7f1      	b.n	1b2c <am_hal_pwrctrl_bucks_disable+0x2c>
    1b48:	4770      	bx	lr
    1b4a:	bf00      	nop
    1b4c:	40021004 	.word	0x40021004
    1b50:	4002000c 	.word	0x4002000c
    1b54:	40021000 	.word	0x40021000
    1b58:	40021008 	.word	0x40021008

00001b5c <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1b5c:	4905      	ldr	r1, [pc, #20]	; (1b74 <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1b5e:	4a06      	ldr	r2, [pc, #24]	; (1b78 <am_hal_pwrctrl_low_power_init+0x1c>)
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1b60:	680b      	ldr	r3, [r1, #0]
    1b62:	f043 0006 	orr.w	r0, r3, #6
    1b66:	6008      	str	r0, [r1, #0]
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1b68:	6811      	ldr	r1, [r2, #0]
    1b6a:	f021 0304 	bic.w	r3, r1, #4
    1b6e:	6013      	str	r3, [r2, #0]
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop
    1b74:	40021018 	.word	0x40021018
    1b78:	40021000 	.word	0x40021000

00001b7c <am_hal_reset_poi>:
void am_hal_reset_poi(void)
{
    //
    // Write the POI key to the software POI register.
    //
    AM_REG(RSTGEN, SWPOI) =
    1b7c:	4b01      	ldr	r3, [pc, #4]	; (1b84 <am_hal_reset_poi+0x8>)
    1b7e:	221b      	movs	r2, #27
    1b80:	601a      	str	r2, [r3, #0]
    1b82:	4770      	bx	lr
    1b84:	40000004 	.word	0x40000004

00001b88 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1b88:	4a05      	ldr	r2, [pc, #20]	; (1ba0 <am_hal_rtc_osc_select+0x18>)
    1b8a:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    1b8c:	b918      	cbnz	r0, 1b96 <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    1b8e:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1b92:	6010      	str	r0, [r2, #0]
    1b94:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1b96:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    1b9a:	6011      	str	r1, [r2, #0]
    1b9c:	4770      	bx	lr
    1b9e:	bf00      	nop
    1ba0:	4000400c 	.word	0x4000400c

00001ba4 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    1ba4:	4a02      	ldr	r2, [pc, #8]	; (1bb0 <am_hal_rtc_osc_disable+0xc>)
    1ba6:	6813      	ldr	r3, [r2, #0]
    1ba8:	f043 0010 	orr.w	r0, r3, #16
    1bac:	6010      	str	r0, [r2, #0]
    1bae:	4770      	bx	lr
    1bb0:	40004050 	.word	0x40004050

00001bb4 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    1bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bb6:	b083      	sub	sp, #12
    1bb8:	4604      	mov	r4, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    1bba:	f7ff feab 	bl	1914 <am_hal_interrupt_master_disable>
    1bbe:	4605      	mov	r5, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1bc0:	b124      	cbz	r4, 1bcc <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    1bc2:	4b42      	ldr	r3, [pc, #264]	; (1ccc <am_hal_sysctrl_sleep+0x118>)
    1bc4:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1bc6:	f010 0c01 	ands.w	ip, r0, #1
    1bca:	d00a      	beq.n	1be2 <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    1bcc:	4a40      	ldr	r2, [pc, #256]	; (1cd0 <am_hal_sysctrl_sleep+0x11c>)
    1bce:	6811      	ldr	r1, [r2, #0]
    1bd0:	f021 0604 	bic.w	r6, r1, #4
    1bd4:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    1bd6:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1bd8:	4628      	mov	r0, r5
    1bda:	f7ff fe9f 	bl	191c <am_hal_interrupt_master_set>
}
    1bde:	b003      	add	sp, #12
    1be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1be2:	4c3b      	ldr	r4, [pc, #236]	; (1cd0 <am_hal_sysctrl_sleep+0x11c>)
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1be4:	4b3b      	ldr	r3, [pc, #236]	; (1cd4 <am_hal_sysctrl_sleep+0x120>)
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1be6:	6820      	ldr	r0, [r4, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1be8:	4e3b      	ldr	r6, [pc, #236]	; (1cd8 <am_hal_sysctrl_sleep+0x124>)
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1bea:	4f3c      	ldr	r7, [pc, #240]	; (1cdc <am_hal_sysctrl_sleep+0x128>)
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1bec:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 1cec <am_hal_sysctrl_sleep+0x138>
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1bf0:	f040 0204 	orr.w	r2, r0, #4
    1bf4:	6022      	str	r2, [r4, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1bf6:	681c      	ldr	r4, [r3, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1bf8:	6833      	ldr	r3, [r6, #0]
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1bfa:	f8de 2000 	ldr.w	r2, [lr]
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1bfe:	6839      	ldr	r1, [r7, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1c00:	f004 07f0 	and.w	r7, r4, #240	; 0xf0
                   CHKBUCKZX_REV : 0x0;
    1c04:	2f20      	cmp	r7, #32
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1c06:	f103 30ff 	add.w	r0, r3, #4294967295
                   CHKBUCKZX_REV : 0x0;
    1c0a:	bf14      	ite	ne
    1c0c:	2700      	movne	r7, #0
    1c0e:	2702      	moveq	r7, #2
                    CHKBUCKZX_TIMER : 0x0;
    1c10:	2803      	cmp	r0, #3
    1c12:	bf98      	it	ls
    1c14:	f04f 0c04 	movls.w	ip, #4
                     CHKBUCKZX_BUCKS : 0x0;
    1c18:	f012 0403 	ands.w	r4, r2, #3
    1c1c:	bf18      	it	ne
    1c1e:	2401      	movne	r4, #1
    g_buckZX_chk |= ( ui32SupplySrc &
    1c20:	f240 53ff 	movw	r3, #1535	; 0x5ff
    g_buckZX_chk |= (ui32SupplySrc &
    1c24:	433c      	orrs	r4, r7
                0x0 : CHKBUCKZX_DEVEN;
    1c26:	ea11 0703 	ands.w	r7, r1, r3
    g_buckZX_chk |= (ui32SupplySrc &
    1c2a:	ea44 040c 	orr.w	r4, r4, ip
                0x0 : CHKBUCKZX_DEVEN;
    1c2e:	d103      	bne.n	1c38 <am_hal_sysctrl_sleep+0x84>
    g_buckZX_chk |= ( ui32SupplySrc &
    1c30:	f044 0408 	orr.w	r4, r4, #8
        if ( bBuckZX_chk )
    1c34:	2c0f      	cmp	r4, #15
    1c36:	d00a      	beq.n	1c4e <am_hal_sysctrl_sleep+0x9a>
        AM_ASM_WFI;
    1c38:	bf30      	wfi
        if ( bBuckZX_chk )
    1c3a:	2c0f      	cmp	r4, #15
    1c3c:	d01a      	beq.n	1c74 <am_hal_sysctrl_sleep+0xc0>
            g_bBuckRestoreComplete = true;
    1c3e:	4e28      	ldr	r6, [pc, #160]	; (1ce0 <am_hal_sysctrl_sleep+0x12c>)
    1c40:	2001      	movs	r0, #1
    1c42:	7030      	strb	r0, [r6, #0]
    am_hal_interrupt_master_set(ui32Critical);
    1c44:	4628      	mov	r0, r5
    1c46:	f7ff fe69 	bl	191c <am_hal_interrupt_master_set>
}
    1c4a:	b003      	add	sp, #12
    1c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1c4e:	6832      	ldr	r2, [r6, #0]
    1c50:	1e51      	subs	r1, r2, #1
    1c52:	9100      	str	r1, [sp, #0]
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    1c54:	9800      	ldr	r0, [sp, #0]
    1c56:	f04f 31ff 	mov.w	r1, #4294967295
    1c5a:	f000 f939 	bl	1ed0 <am_hal_ctimer_clear>
            am_hal_ctimer_period_set(ui32BuckTimer,
    1c5e:	9800      	ldr	r0, [sp, #0]
    1c60:	463b      	mov	r3, r7
    1c62:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    1c66:	f04f 31ff 	mov.w	r1, #4294967295
    1c6a:	f000 f945 	bl	1ef8 <am_hal_ctimer_period_set>
            am_hal_pwrctrl_bucks_disable();
    1c6e:	f7ff ff47 	bl	1b00 <am_hal_pwrctrl_bucks_disable>
    1c72:	e7e1      	b.n	1c38 <am_hal_sysctrl_sleep+0x84>
    AM_CRITICAL_BEGIN_ASM
    1c74:	f7ff fe4e 	bl	1914 <am_hal_interrupt_master_disable>
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    1c78:	4b1a      	ldr	r3, [pc, #104]	; (1ce4 <am_hal_sysctrl_sleep+0x130>)
    AM_CRITICAL_BEGIN_ASM
    1c7a:	9001      	str	r0, [sp, #4]
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    1c7c:	681a      	ldr	r2, [r3, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    1c7e:	681a      	ldr	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    1c80:	681f      	ldr	r7, [r3, #0]
    1c82:	f027 043c 	bic.w	r4, r7, #60	; 0x3c
    1c86:	f044 021c 	orr.w	r2, r4, #28
    1c8a:	601a      	str	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    1c8c:	6819      	ldr	r1, [r3, #0]
            g_bBuckRestoreComplete = false;
    1c8e:	4c14      	ldr	r4, [pc, #80]	; (1ce0 <am_hal_sysctrl_sleep+0x12c>)
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    1c90:	f421 30f0 	bic.w	r0, r1, #122880	; 0x1e000
    1c94:	f440 4760 	orr.w	r7, r0, #57344	; 0xe000
    1c98:	601f      	str	r7, [r3, #0]
    AM_CRITICAL_END_ASM
    1c9a:	9801      	ldr	r0, [sp, #4]
    1c9c:	f7ff fe3e 	bl	191c <am_hal_interrupt_master_set>
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    1ca0:	201c      	movs	r0, #28
    1ca2:	f7ff fda1 	bl	17e8 <am_hal_flash_delay>
            am_hal_pwrctrl_bucks_enable();
    1ca6:	f7ff ff0f 	bl	1ac8 <am_hal_pwrctrl_bucks_enable>
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1caa:	6836      	ldr	r6, [r6, #0]
            g_ui32BuckInputs = 0;
    1cac:	490e      	ldr	r1, [pc, #56]	; (1ce8 <am_hal_sysctrl_sleep+0x134>)
            g_bBuckRestoreComplete = false;
    1cae:	2200      	movs	r2, #0
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1cb0:	1e73      	subs	r3, r6, #1
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    1cb2:	204c      	movs	r0, #76	; 0x4c
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1cb4:	9300      	str	r3, [sp, #0]
            g_bBuckRestoreComplete = false;
    1cb6:	7022      	strb	r2, [r4, #0]
            g_ui32BuckInputs = 0;
    1cb8:	600a      	str	r2, [r1, #0]
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    1cba:	f7ff fd95 	bl	17e8 <am_hal_flash_delay>
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    1cbe:	9800      	ldr	r0, [sp, #0]
    1cc0:	f04f 31ff 	mov.w	r1, #4294967295
    1cc4:	f000 f8ec 	bl	1ea0 <am_hal_ctimer_start>
    1cc8:	e786      	b.n	1bd8 <am_hal_sysctrl_sleep+0x24>
    1cca:	bf00      	nop
    1ccc:	40020250 	.word	0x40020250
    1cd0:	e000ed10 	.word	0xe000ed10
    1cd4:	4002000c 	.word	0x4002000c
    1cd8:	100010b0 	.word	0x100010b0
    1cdc:	40021008 	.word	0x40021008
    1ce0:	100010a8 	.word	0x100010a8
    1ce4:	40020068 	.word	0x40020068
    1ce8:	100010ac 	.word	0x100010ac
    1cec:	40021000 	.word	0x40021000

00001cf0 <am_hal_systick_start>:
am_hal_systick_start(void)
{
    //
    // Start the systick timer.
    //
    AM_REG(SYSTICK, SYSTCSR) |= AM_REG_SYSTICK_SYSTCSR_ENABLE_M;
    1cf0:	4a02      	ldr	r2, [pc, #8]	; (1cfc <am_hal_systick_start+0xc>)
    1cf2:	6813      	ldr	r3, [r2, #0]
    1cf4:	f043 0001 	orr.w	r0, r3, #1
    1cf8:	6010      	str	r0, [r2, #0]
    1cfa:	4770      	bx	lr
    1cfc:	e000e010 	.word	0xe000e010

00001d00 <am_hal_systick_stop>:
am_hal_systick_stop(void)
{
    //
    // Stop the systick timer.
    //
    AM_REG(SYSTICK, SYSTCSR) &= ~AM_REG_SYSTICK_SYSTCSR_ENABLE_M;
    1d00:	4a02      	ldr	r2, [pc, #8]	; (1d0c <am_hal_systick_stop+0xc>)
    1d02:	6813      	ldr	r3, [r2, #0]
    1d04:	f023 0001 	bic.w	r0, r3, #1
    1d08:	6010      	str	r0, [r2, #0]
    1d0a:	4770      	bx	lr
    1d0c:	e000e010 	.word	0xe000e010

00001d10 <am_hal_systick_load>:
am_hal_systick_load(uint32_t ui32LoadVal)
{
    //
    // Write the reload register.
    //
    AM_REG(SYSTICK, SYSTRVR) = ui32LoadVal;
    1d10:	4b01      	ldr	r3, [pc, #4]	; (1d18 <am_hal_systick_load+0x8>)
    1d12:	6018      	str	r0, [r3, #0]
    1d14:	4770      	bx	lr
    1d16:	bf00      	nop
    1d18:	e000e014 	.word	0xe000e014

00001d1c <am_hal_systick_count>:
am_hal_systick_count(void)
{
    //
    // Return the current systick timer count value.
    //
    return AM_REG(SYSTICK, SYSTCVR);
    1d1c:	4b01      	ldr	r3, [pc, #4]	; (1d24 <am_hal_systick_count+0x8>)
    1d1e:	6818      	ldr	r0, [r3, #0]
}
    1d20:	4770      	bx	lr
    1d22:	bf00      	nop
    1d24:	e000e018 	.word	0xe000e018

00001d28 <am_hal_uart_config>:
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    1d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d2a:	460d      	mov	r5, r1
    1d2c:	4607      	mov	r7, r0
    uint32_t ui32HFRC;

    //
    // Configure the Baudrate.
    //
    ui32HFRC = am_hal_clkgen_sysclk_get();
    1d2e:	f7ff fd0f 	bl	1750 <am_hal_clkgen_sysclk_get>
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    1d32:	682b      	ldr	r3, [r5, #0]
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    1d34:	0186      	lsls	r6, r0, #6
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    1d36:	0159      	lsls	r1, r3, #5
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    1d38:	fbb0 f4f1 	udiv	r4, r0, r1
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    1d3c:	fbb6 f0f1 	udiv	r0, r6, r1
    1d40:	eba0 1684 	sub.w	r6, r0, r4, lsl #6
    am_hal_debug_assert_msg(ui32IntegerDivisor > 0, "Integer divisor MUST be greater than or equal to 1.");
    1d44:	b924      	cbnz	r4, 1d50 <am_hal_uart_config+0x28>
    1d46:	4a11      	ldr	r2, [pc, #68]	; (1d8c <am_hal_uart_config+0x64>)
    1d48:	4811      	ldr	r0, [pc, #68]	; (1d90 <am_hal_uart_config+0x68>)
    1d4a:	2164      	movs	r1, #100	; 0x64
    1d4c:	f7ff fd3e 	bl	17cc <am_hal_debug_error>
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    1d50:	f507 2280 	add.w	r2, r7, #262144	; 0x40000
    1d54:	321c      	adds	r2, #28
    1d56:	0317      	lsls	r7, r2, #12
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    1d58:	7a2b      	ldrb	r3, [r5, #8]
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    1d5a:	627c      	str	r4, [r7, #36]	; 0x24
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    1d5c:	627c      	str	r4, [r7, #36]	; 0x24
    AM_REGn(UART, ui32Module, FBRD) = ui32FractionDivisor;
    1d5e:	62be      	str	r6, [r7, #40]	; 0x28
    ui32ConfigVal |= psConfig->ui32DataBits;
    1d60:	6868      	ldr	r0, [r5, #4]
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    1d62:	68ec      	ldr	r4, [r5, #12]
    1d64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    1d66:	2b00      	cmp	r3, #0
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    1d68:	ea40 0004 	orr.w	r0, r0, r4
    1d6c:	ea40 0001 	orr.w	r0, r0, r1
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    1d70:	bf14      	ite	ne
    1d72:	2108      	movne	r1, #8
    1d74:	2100      	moveq	r1, #0
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    1d76:	4308      	orrs	r0, r1
    1d78:	62f8      	str	r0, [r7, #44]	; 0x2c

    //
    // Write the flow control settings to the control register.
    //
    AM_REGn(UART, ui32Module, CR) |= psConfig->ui32FlowCtrl;
    1d7a:	6b3e      	ldr	r6, [r7, #48]	; 0x30
    1d7c:	692d      	ldr	r5, [r5, #16]
    1d7e:	432e      	orrs	r6, r5
    1d80:	633e      	str	r6, [r7, #48]	; 0x30

    //
    // Set the clock select field for 24MHz from the HFRC
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    1d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1d84:	f042 0310 	orr.w	r3, r2, #16
    1d88:	633b      	str	r3, [r7, #48]	; 0x30
    1d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d8c:	00002488 	.word	0x00002488
    1d90:	000024bc 	.word	0x000024bc

00001d94 <am_hal_uart_int_status_get>:
    if (bEnabledOnly)
    {
        //
        // Read and return the Masked Interrupt Status.
        //
        return AM_REGn(UART, ui32Module, MIS);
    1d94:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1d98:	301c      	adds	r0, #28
    1d9a:	0302      	lsls	r2, r0, #12
    if (bEnabledOnly)
    1d9c:	b909      	cbnz	r1, 1da2 <am_hal_uart_int_status_get+0xe>
    else
    {
        //
        // Read and return the Raw Interrupt Status.
        //
        return AM_REGn(UART, ui32Module, IES);
    1d9e:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    }
}
    1da0:	4770      	bx	lr
        return AM_REGn(UART, ui32Module, MIS);
    1da2:	6c10      	ldr	r0, [r2, #64]	; 0x40
    1da4:	4770      	bx	lr
    1da6:	bf00      	nop

00001da8 <am_hal_uart_int_clear>:
am_hal_uart_int_clear(uint32_t ui32Module, uint32_t ui32Interrupt)
{
    //
    // Clear the bits.
    //
    AM_REGn(UART, ui32Module, IEC) = ui32Interrupt;
    1da8:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1dac:	301c      	adds	r0, #28
    1dae:	0302      	lsls	r2, r0, #12
    1db0:	6451      	str	r1, [r2, #68]	; 0x44
    1db2:	4770      	bx	lr

00001db4 <am_hal_uart_int_enable>:
am_hal_uart_int_enable(uint32_t ui32Module, uint32_t ui32Interrupt)
{
    //
    // Enable the interrupts.
    //
    AM_REGn(UART, ui32Module, IER) |= ui32Interrupt;
    1db4:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1db8:	301c      	adds	r0, #28
    1dba:	0302      	lsls	r2, r0, #12
    1dbc:	6b93      	ldr	r3, [r2, #56]	; 0x38
    1dbe:	4319      	orrs	r1, r3
    1dc0:	6391      	str	r1, [r2, #56]	; 0x38
    1dc2:	4770      	bx	lr

00001dc4 <am_hal_uart_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_enable(uint32_t ui32Module)
{
    1dc4:	b510      	push	{r4, lr}
    1dc6:	4604      	mov	r4, r0
    1dc8:	b082      	sub	sp, #8
    //
    // Enable the UART, RX, and TX.
    //
    AM_REGan_SET(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    1dca:	f7ff fda3 	bl	1914 <am_hal_interrupt_master_disable>
    1dce:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
    1dd2:	331c      	adds	r3, #28
    1dd4:	0319      	lsls	r1, r3, #12
    1dd6:	9001      	str	r0, [sp, #4]
    1dd8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    1dda:	f442 7040 	orr.w	r0, r2, #768	; 0x300
    1dde:	f040 0401 	orr.w	r4, r0, #1
    1de2:	630c      	str	r4, [r1, #48]	; 0x30
    1de4:	9801      	ldr	r0, [sp, #4]
    1de6:	f7ff fd99 	bl	191c <am_hal_interrupt_master_set>
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    1dea:	b002      	add	sp, #8
    1dec:	bd10      	pop	{r4, pc}
    1dee:	bf00      	nop

00001df0 <am_hal_uart_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_disable(uint32_t ui32Module)
{
    1df0:	b510      	push	{r4, lr}
    1df2:	4604      	mov	r4, r0
    1df4:	b082      	sub	sp, #8
    //
    // Disable the UART.
    //
    AM_REGan_CLR(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    1df6:	f7ff fd8d 	bl	1914 <am_hal_interrupt_master_disable>
    1dfa:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
    1dfe:	331c      	adds	r3, #28
    1e00:	0319      	lsls	r1, r3, #12
    1e02:	9001      	str	r0, [sp, #4]
    1e04:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    1e06:	f422 7040 	bic.w	r0, r2, #768	; 0x300
    1e0a:	f020 0401 	bic.w	r4, r0, #1
    1e0e:	630c      	str	r4, [r1, #48]	; 0x30
    1e10:	9801      	ldr	r0, [sp, #4]
    1e12:	f7ff fd83 	bl	191c <am_hal_interrupt_master_set>
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    1e16:	b002      	add	sp, #8
    1e18:	bd10      	pop	{r4, pc}
    1e1a:	bf00      	nop

00001e1c <am_hal_uart_pwrctrl_enable>:
am_hal_uart_pwrctrl_enable(uint32_t ui32Module)
{
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    1e1c:	2801      	cmp	r0, #1
{
    1e1e:	b510      	push	{r4, lr}
    1e20:	4604      	mov	r4, r0
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    1e22:	d905      	bls.n	1e30 <am_hal_uart_pwrctrl_enable+0x14>
    1e24:	4a05      	ldr	r2, [pc, #20]	; (1e3c <am_hal_uart_pwrctrl_enable+0x20>)
    1e26:	4806      	ldr	r0, [pc, #24]	; (1e40 <am_hal_uart_pwrctrl_enable+0x24>)
    1e28:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    1e2c:	f7ff fcce 	bl	17cc <am_hal_debug_error>
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    1e30:	2080      	movs	r0, #128	; 0x80
    1e32:	40a0      	lsls	r0, r4
}
    1e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    1e38:	f7ff bde0 	b.w	19fc <am_hal_pwrctrl_periph_enable>
    1e3c:	000024d0 	.word	0x000024d0
    1e40:	000024bc 	.word	0x000024bc

00001e44 <am_hal_uart_clock_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    1e44:	b510      	push	{r4, lr}
    //
    // Set CLKGEN.UARTEN, clear the field then write the desired enable value
    // Valid enable values are DIS, EN, REDUCE_FREQ, EN_POWER_SAV.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    1e46:	2101      	movs	r1, #1
{
    1e48:	4604      	mov	r4, r0
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    1e4a:	f7ff fc9b 	bl	1784 <am_hal_clkgen_uarten_set>

    //
    // Enable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKEN_M;
    1e4e:	f504 2080 	add.w	r0, r4, #262144	; 0x40000
    1e52:	301c      	adds	r0, #28
    1e54:	0301      	lsls	r1, r0, #12
    1e56:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    1e58:	f043 0208 	orr.w	r2, r3, #8
    1e5c:	630a      	str	r2, [r1, #48]	; 0x30

    //
    // Select default UART clock source
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    1e5e:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    1e60:	f044 0010 	orr.w	r0, r4, #16
    1e64:	6308      	str	r0, [r1, #48]	; 0x30
    1e66:	bd10      	pop	{r4, pc}

00001e68 <am_hal_uart_fifo_config>:
am_hal_uart_fifo_config(uint32_t ui32Module, uint32_t ui32LvlCfg)
{
    //
    // Enable the use of FIFOs.
    //
    AM_REGn(UART, ui32Module, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    1e68:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1e6c:	301c      	adds	r0, #28
    1e6e:	0302      	lsls	r2, r0, #12
    1e70:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1e72:	f043 0010 	orr.w	r0, r3, #16
    1e76:	62d0      	str	r0, [r2, #44]	; 0x2c

    //
    // Write the FIFO level register.
    //
    AM_REGn(UART, ui32Module, IFLS) = ui32LvlCfg;
    1e78:	6351      	str	r1, [r2, #52]	; 0x34
    1e7a:	4770      	bx	lr

00001e7c <am_hal_uart_char_transmit_polled>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_char_transmit_polled(uint32_t ui32Module, char cChar)
{
    1e7c:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1e80:	301c      	adds	r0, #28
    1e82:	0300      	lsls	r0, r0, #12
    1e84:	f100 0218 	add.w	r2, r0, #24
    //
    // Wait for space, i.e.  TX FIFO EMPTY
    //
    while (AM_BFRn(UART, ui32Module, FR, TXFF));
    1e88:	6813      	ldr	r3, [r2, #0]
    1e8a:	069b      	lsls	r3, r3, #26
    1e8c:	d4fc      	bmi.n	1e88 <am_hal_uart_char_transmit_polled+0xc>

    //
    // Write the char.
    //
    AM_REGn(UART, ui32Module, DR) = cChar;
    1e8e:	6001      	str	r1, [r0, #0]
    1e90:	4770      	bx	lr
    1e92:	bf00      	nop

00001e94 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    1e94:	4b01      	ldr	r3, [pc, #4]	; (1e9c <am_hal_vcomp_disable+0x8>)
    1e96:	2237      	movs	r2, #55	; 0x37
    1e98:	601a      	str	r2, [r3, #0]
    1e9a:	4770      	bx	lr
    1e9c:	4000c008 	.word	0x4000c008

00001ea0 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1ea0:	b570      	push	{r4, r5, r6, lr}
    1ea2:	b082      	sub	sp, #8
    1ea4:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    1ea6:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1ea8:	f7ff fd34 	bl	1914 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1eac:	4d07      	ldr	r5, [pc, #28]	; (1ecc <am_hal_ctimer_start+0x2c>)
    AM_CRITICAL_BEGIN_ASM
    1eae:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    1eb0:	5971      	ldr	r1, [r6, r5]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    1eb2:	f004 2308 	and.w	r3, r4, #134219776	; 0x8000800
    1eb6:	ea21 0003 	bic.w	r0, r1, r3
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    1eba:	f004 1201 	and.w	r2, r4, #65537	; 0x10001
    1ebe:	4302      	orrs	r2, r0
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    1ec0:	5172      	str	r2, [r6, r5]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1ec2:	9801      	ldr	r0, [sp, #4]
    1ec4:	f7ff fd2a 	bl	191c <am_hal_interrupt_master_set>
} // am_hal_ctimer_start()
    1ec8:	b002      	add	sp, #8
    1eca:	bd70      	pop	{r4, r5, r6, pc}
    1ecc:	4000800c 	.word	0x4000800c

00001ed0 <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1ed0:	b570      	push	{r4, r5, r6, lr}
    1ed2:	b082      	sub	sp, #8
    1ed4:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    1ed6:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1ed8:	f7ff fd1c 	bl	1914 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1edc:	4d05      	ldr	r5, [pc, #20]	; (1ef4 <am_hal_ctimer_clear+0x24>)
    AM_CRITICAL_BEGIN_ASM
    1ede:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    1ee0:	5971      	ldr	r1, [r6, r5]
    1ee2:	f004 2008 	and.w	r0, r4, #134219776	; 0x8000800
    1ee6:	4308      	orrs	r0, r1
    1ee8:	5170      	str	r0, [r6, r5]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1eea:	9801      	ldr	r0, [sp, #4]
    1eec:	f7ff fd16 	bl	191c <am_hal_interrupt_master_set>
} // am_hal_ctimer_clear()
    1ef0:	b002      	add	sp, #8
    1ef2:	bd70      	pop	{r4, r5, r6, pc}
    1ef4:	4000800c 	.word	0x4000800c

00001ef8 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1efc:	b082      	sub	sp, #8
    1efe:	4688      	mov	r8, r1
    1f00:	461f      	mov	r7, r3
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    1f02:	ea4f 1900 	mov.w	r9, r0, lsl #4
{
    1f06:	4614      	mov	r4, r2
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1f08:	f7ff fd04 	bl	1914 <am_hal_interrupt_master_disable>
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1f0c:	f8df a098 	ldr.w	sl, [pc, #152]	; 1fa8 <am_hal_ctimer_period_set+0xb0>
    AM_CRITICAL_BEGIN_ASM
    1f10:	9001      	str	r0, [sp, #4]
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1f12:	f518 3f80 	cmn.w	r8, #65536	; 0x10000
                                    AM_REG_CTIMER_CMPRA0_O +
    1f16:	4d21      	ldr	r5, [pc, #132]	; (1f9c <am_hal_ctimer_period_set+0xa4>)
                                    AM_REG_CTIMER_CMPRB0_O +
    1f18:	4e21      	ldr	r6, [pc, #132]	; (1fa0 <am_hal_ctimer_period_set+0xa8>)
    ui32Mode = *pui32ControlReg;
    1f1a:	f859 300a 	ldr.w	r3, [r9, sl]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1f1e:	d01b      	beq.n	1f58 <am_hal_ctimer_period_set+0x60>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1f20:	f403 70c0 	and.w	r0, r3, #384	; 0x180
    1f24:	2880      	cmp	r0, #128	; 0x80
    1f26:	d01c      	beq.n	1f62 <am_hal_ctimer_period_set+0x6a>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1f28:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1f2c:	2300      	movs	r3, #0
    1f2e:	45b8      	cmp	r8, r7
        ui32Comp1 = 0;
    1f30:	461a      	mov	r2, r3
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1f32:	d01d      	beq.n	1f70 <am_hal_ctimer_period_set+0x78>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1f34:	491b      	ldr	r1, [pc, #108]	; (1fa4 <am_hal_ctimer_period_set+0xac>)
    1f36:	4588      	cmp	r8, r1
    1f38:	d025      	beq.n	1f86 <am_hal_ctimer_period_set+0x8e>
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1 >> 16));
    1f3a:	400a      	ands	r2, r1
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1f3c:	b2a0      	uxth	r0, r4
    1f3e:	4303      	orrs	r3, r0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1f40:	ea42 4414 	orr.w	r4, r2, r4, lsr #16
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1f44:	f849 3005 	str.w	r3, [r9, r5]
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1f48:	f849 4006 	str.w	r4, [r9, r6]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1f4c:	9801      	ldr	r0, [sp, #4]
    1f4e:	f7ff fce5 	bl	191c <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    1f52:	b002      	add	sp, #8
    1f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ui32Mode = ui32Mode >> 16;
    1f58:	0c19      	lsrs	r1, r3, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1f5a:	f401 70c0 	and.w	r0, r1, #384	; 0x180
    1f5e:	2880      	cmp	r0, #128	; 0x80
    1f60:	d110      	bne.n	1f84 <am_hal_ctimer_period_set+0x8c>
    1f62:	0423      	lsls	r3, r4, #16
        ui32Comp1 = ui32Period;
    1f64:	4622      	mov	r2, r4
        ui32Comp0 = ui32Period - ui32OnTime;
    1f66:	1be4      	subs	r4, r4, r7
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1f68:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1f6c:	45b8      	cmp	r8, r7
    1f6e:	d1e1      	bne.n	1f34 <am_hal_ctimer_period_set+0x3c>
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1f70:	b2a6      	uxth	r6, r4
    1f72:	4333      	orrs	r3, r6
    1f74:	f849 3005 	str.w	r3, [r9, r5]
    AM_CRITICAL_END_ASM
    1f78:	9801      	ldr	r0, [sp, #4]
    1f7a:	f7ff fccf 	bl	191c <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    1f7e:	b002      	add	sp, #8
    1f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1f84:	2300      	movs	r3, #0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1f86:	b2a5      	uxth	r5, r4
    1f88:	432b      	orrs	r3, r5
    1f8a:	f849 3006 	str.w	r3, [r9, r6]
    AM_CRITICAL_END_ASM
    1f8e:	9801      	ldr	r0, [sp, #4]
    1f90:	f7ff fcc4 	bl	191c <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    1f94:	b002      	add	sp, #8
    1f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1f9a:	bf00      	nop
    1f9c:	40008004 	.word	0x40008004
    1fa0:	40008008 	.word	0x40008008
    1fa4:	ffff0000 	.word	0xffff0000
    1fa8:	4000800c 	.word	0x4000800c

00001fac <g_pui32CRC32Table>:
    1fac:	00000000 1edc6f41 3db8de82 2364b1c3     ....Ao.....=..d#
    1fbc:	7b71bd04 65add245 46c96386 58150cc7     ..q{E..e.c.F...X
    1fcc:	f6e37a08 e83f1549 cb5ba48a d587cbcb     .z..I.?...[.....
    1fdc:	8d92c70c 934ea84d b02a198e aef676cf     ....M.N...*..v..
    1fec:	f31a9b51 edc6f410 cea245d3 d07e2a92     Q........E...*~.
    1ffc:	886b2655 96b74914 b5d3f8d7 ab0f9796     U&k..I..........
    200c:	05f9e159 1b258e18 38413fdb 269d509a     Y.....%..?A8.P.&
    201c:	7e885c5d 6054331c 433082df 5deced9e     ]\.~.3T`..0C...]
    202c:	f8e959e3 e63536a2 c5518761 db8de820     .Y...65.a.Q. ...
    203c:	8398e4e7 9d448ba6 be203a65 a0fc5524     ......D.e: .$U..
    204c:	0e0a23eb 10d64caa 33b2fd69 2d6e9228     .#...L..i..3(.n-
    205c:	757b9eef 6ba7f1ae 48c3406d 561f2f2c     ..{u...km@.H,/.V
    206c:	0bf3c2b2 152fadf3 364b1c30 28977371     ....../.0.K6qs.(
    207c:	70827fb6 6e5e10f7 4d3aa134 53e6ce75     ...p..^n4.:Mu..S
    208c:	fd10b8ba e3ccd7fb c0a86638 de740979     ........8f..y.t.
    209c:	866105be 98bd6aff bbd9db3c a505b47d     ..a..j..<...}...
    20ac:	ef0edc87 f1d2b3c6 d2b60205 cc6a6d44     ............Dmj.
    20bc:	947f6183 8aa30ec2 a9c7bf01 b71bd040     .a..........@...
    20cc:	19eda68f 0731c9ce 2455780d 3a89174c     ......1..xU$L..:
    20dc:	629c1b8b 7c4074ca 5f24c509 41f8aa48     ...b.t@|..$_H..A
    20ec:	1c1447d6 02c82897 21ac9954 3f70f615     .G...(..T..!..p?
    20fc:	6765fad2 79b99593 5add2450 44014b11     ..eg...yP$.Z.K.D
    210c:	eaf73dde f42b529f d74fe35c c9938c1d     .=...R+.\.O.....
    211c:	918680da 8f5aef9b ac3e5e58 b2e23119     ......Z.X^>..1..
    212c:	17e78564 093bea25 2a5f5be6 348334a7     d...%.;..[_*.4.4
    213c:	6c963860 724a5721 512ee6e2 4ff289a3     `8.l!WJr...Q...O
    214c:	e104ff6c ffd8902d dcbc21ee c2604eaf     l...-....!...N`.
    215c:	9a754268 84a92d29 a7cd9cea b911f3ab     hBu.)-..........
    216c:	e4fd1e35 fa217174 d945c0b7 c799aff6     5...tq!...E.....
    217c:	9f8ca331 8150cc70 a2347db3 bce812f2     1...p.P..}4.....
    218c:	121e643d 0cc20b7c 2fa6babf 317ad5fe     =d..|....../..z1
    219c:	696fd939 77b3b678 54d707bb 4a0b68fa     9.oix..w...T.h.J
    21ac:	c0c1d64f de1db90e fd7908cd e3a5678c     O.........y..g..
    21bc:	bbb06b4b a56c040a 8608b5c9 98d4da88     Kk....l.........
    21cc:	3622ac47 28fec306 0b9a72c5 15461d84     G."6...(.r....F.
    21dc:	4d531143 538f7e02 70ebcfc1 6e37a080     C.SM.~.S...p..7n
    21ec:	33db4d1e 2d07225f 0e63939c 10bffcdd     .M.3_".-..c.....
    21fc:	48aaf01a 56769f5b 75122e98 6bce41d9     ...H[.vV...u.A.k
    220c:	c5383716 dbe45857 f880e994 e65c86d5     .78.WX........\.
    221c:	be498a12 a095e553 83f15490 9d2d3bd1     ..I.S....T...;-.
    222c:	38288fac 26f4e0ed 0590512e 1b4c3e6f     ..(8...&.Q..o>L.
    223c:	435932a8 5d855de9 7ee1ec2a 603d836b     .2YC.].]*..~k.=`
    224c:	cecbf5a4 d0179ae5 f3732b26 edaf4467     ........&+s.gD..
    225c:	b5ba48a0 ab6627e1 88029622 96def963     .H...'f."...c...
    226c:	cb3214fd d5ee7bbc f68aca7f e856a53e     ..2..{......>.V.
    227c:	b043a9f9 ae9fc6b8 8dfb777b 9327183a     ..C.....{w..:.'.
    228c:	3dd16ef5 230d01b4 0069b077 1eb5df36     .n.=...#w.i.6...
    229c:	46a0d3f1 587cbcb0 7b180d73 65c46232     ...F..|Xs..{2b.e
    22ac:	2fcf0ac8 31136589 1277d44a 0cabbb0b     .../.e.1J.w.....
    22bc:	54beb7cc 4a62d88d 6906694e 77da060f     ...T..bJNi.i...w
    22cc:	d92c70c0 c7f01f81 e494ae42 fa48c103     .p,.....B.....H.
    22dc:	a25dcdc4 bc81a285 9fe51346 81397c07     ..].....F....|9.
    22ec:	dcd59199 c209fed8 e16d4f1b ffb1205a     .........Om.Z ..
    22fc:	a7a42c9d b97843dc 9a1cf21f 84c09d5e     .,...Cx.....^...
    230c:	2a36eb91 34ea84d0 178e3513 09525a52     ..6*...4.5..RZR.
    231c:	51475695 4f9b39d4 6cff8817 7223e756     .VGQ.9.O...lV.#r
    232c:	d726532b c9fa3c6a ea9e8da9 f442e2e8     +S&.j<........B.
    233c:	ac57ee2f b28b816e 91ef30ad 8f335fec     /.W.n....0..._3.
    234c:	21c52923 3f194662 1c7df7a1 02a198e0     #).!bF.?..}.....
    235c:	5ab49427 4468fb66 670c4aa5 79d025e4     '..Zf.hD.J.g.%.y
    236c:	243cc87a 3ae0a73b 198416f8 075879b9     z.<$;..:.....yX.
    237c:	5f4d757e 41911a3f 62f5abfc 7c29c4bd     ~uM_?..A...b..)|
    238c:	d2dfb272 cc03dd33 ef676cf0 f1bb03b1     r...3....lg.....
    239c:	a9ae0f76 b7726037 9416d1f4 8acabeb5     v...7`r.........
    23ac:	685f6d61 635f6c61 65676b6c 79735f6e     am_hal_clkgen_sy
    23bc:	6b6c6373 6c65735f 28746365 69203a29     sclk_select(): i
    23cc:	6c61766e 63206469 6b636f6c 74657320     nvalid clock set
    23dc:	676e6974 0000002e 2e5c2e2e 6d615c2e     ting......\..\am
    23ec:	6c61685f 6b6c635f 2e6e6567 00000063     _hal_clkgen.c...

000023fc <g_am_hal_mcuctrl_flash_size>:
    23fc:	00004000 00008000 00010000 00020000     .@..............
    240c:	00040000 00080000 00100000 00200000     .............. .
	...
    243c:	6e6e6143 6520746f 6c62616e 6f6d2065     Cannot enable mo
    244c:	74206572 206e6168 20656e6f 69726570     re than one peri
    245c:	72656870 61206c61 20612074 656d6974     pheral at a time
    246c:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    247c:	7277705f 6c727463 0000632e 65746e49     _pwrctrl.c..Inte
    248c:	20726567 69766964 20726f73 5453554d     ger divisor MUST
    249c:	20656220 61657267 20726574 6e616874      be greater than
    24ac:	20726f20 61757165 6f74206c 002e3120      or equal to 1..
    24bc:	2e5c2e2e 6d615c2e 6c61685f 7261755f     ..\..\am_hal_uar
    24cc:	00632e74 69797254 7420676e 6964206f     t.c.Trying to di
    24dc:	6c626173 20612065 54524155 646f6d20     sable a UART mod
    24ec:	20656c75 74616874 656f6420 74276e73     ule that doesn't
    24fc:	69786520 00007473                        exist..
