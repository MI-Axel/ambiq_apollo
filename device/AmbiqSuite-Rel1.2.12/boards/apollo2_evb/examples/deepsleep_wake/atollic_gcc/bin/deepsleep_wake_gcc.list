
deepsleep_wake_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025b4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         0000003c  10001000  000025b4  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000110  1000103c  000025f0  0002103c  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  0002103c  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000cc36  00000000  00000000  00021073  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000029d0  00000000  00000000  0002dca9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000910  00000000  00000000  00030679  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001398  00000000  00000000  00030f89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005155  00000000  00000000  00032321  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000032c4  00000000  00000000  00037476  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  0003a73a  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001aa0  00000000  00000000  0003a7b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004385  00000000  00000000  0003c258  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 d5 09 00 00 3d 0a 00 00 7d 0a 00 00     ........=...}...
      10:	7d 0a 00 00 7d 0a 00 00 7d 0a 00 00 00 00 00 00     }...}...}.......
	...
      2c:	43 0a 00 00 43 0a 00 00 00 00 00 00 43 0a 00 00     C...C.......C...
      3c:	43 0a 00 00 43 0a 00 00 43 0a 00 00 51 08 00 00     C...C...C...Q...
      4c:	43 0a 00 00 43 0a 00 00 43 0a 00 00 43 0a 00 00     C...C...C...C...
      5c:	43 0a 00 00 43 0a 00 00 43 0a 00 00 43 0a 00 00     C...C...C...C...
      6c:	43 0a 00 00 29 08 00 00 43 0a 00 00 43 0a 00 00     C...)...C...C...
      7c:	43 0a 00 00 43 0a 00 00 43 0a 00 00 43 0a 00 00     C...C...C...C...
      8c:	43 0a 00 00 43 0a 00 00 43 0a 00 00 43 0a 00 00     C...C...C...C...
      9c:	43 0a 00 00 43 0a 00 00 43 0a 00 00 43 0a 00 00     C...C...C...C...
      ac:	43 0a 00 00 43 0a 00 00 43 0a 00 00 43 0a 00 00     C...C...C...C...
      bc:	43 0a 00 00                                         C...

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <am_devices_led_init>:
am_devices_led_array_disable(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
    if ( (psLEDs == NULL)                       ||
         (ui32NumLEDs > MAX_LEDS) )
    {
        return;
     160:	b590      	push	{r4, r7, lr}
        am_hal_gpio_pinconfig((psLEDs + i)->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
#else
        am_hal_gpio_pin_config((psLEDs + i)->ui32GPIONumber, AM_HAL_GPIO_DISABLE);
#endif
    }
}
     162:	b085      	sub	sp, #20
     164:	af00      	add	r7, sp, #0
     166:	6078      	str	r0, [r7, #4]
     168:	687b      	ldr	r3, [r7, #4]
     16a:	2b00      	cmp	r3, #0
     16c:	f000 8162 	beq.w	434 <am_devices_led_init+0x2d4>
     170:	687b      	ldr	r3, [r7, #4]
     172:	681b      	ldr	r3, [r3, #0]
    if ( (psLED == NULL)    ||
     174:	2b31      	cmp	r3, #49	; 0x31
     176:	f200 815d 	bhi.w	434 <am_devices_led_init+0x2d4>
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
     17a:	687b      	ldr	r3, [r7, #4]
     17c:	685b      	ldr	r3, [r3, #4]
     17e:	f003 0302 	and.w	r3, r3, #2
     182:	2b00      	cmp	r3, #0
     184:	f000 80ab 	beq.w	2de <am_devices_led_init+0x17e>
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT);
     188:	687b      	ldr	r3, [r7, #4]
     18a:	681b      	ldr	r3, [r3, #0]
     18c:	2b31      	cmp	r3, #49	; 0x31
     18e:	d86e      	bhi.n	26e <am_devices_led_init+0x10e>
     190:	f001 fd10 	bl	1bb4 <am_hal_interrupt_master_disable>
     194:	4603      	mov	r3, r0
     196:	60fb      	str	r3, [r7, #12]
     198:	4ba8      	ldr	r3, [pc, #672]	; (43c <am_devices_led_init+0x2dc>)
     19a:	2273      	movs	r2, #115	; 0x73
     19c:	601a      	str	r2, [r3, #0]
     19e:	687b      	ldr	r3, [r7, #4]
     1a0:	681b      	ldr	r3, [r3, #0]
     1a2:	085b      	lsrs	r3, r3, #1
     1a4:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     1a8:	4ba5      	ldr	r3, [pc, #660]	; (440 <am_devices_led_init+0x2e0>)
     1aa:	4413      	add	r3, r2
     1ac:	461c      	mov	r4, r3
     1ae:	687b      	ldr	r3, [r7, #4]
     1b0:	681b      	ldr	r3, [r3, #0]
     1b2:	009b      	lsls	r3, r3, #2
     1b4:	f003 031c 	and.w	r3, r3, #28
     1b8:	2202      	movs	r2, #2
     1ba:	409a      	lsls	r2, r3
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	681b      	ldr	r3, [r3, #0]
     1c0:	085b      	lsrs	r3, r3, #1
     1c2:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     1c6:	4b9e      	ldr	r3, [pc, #632]	; (440 <am_devices_led_init+0x2e0>)
     1c8:	440b      	add	r3, r1
     1ca:	6819      	ldr	r1, [r3, #0]
     1cc:	687b      	ldr	r3, [r7, #4]
     1ce:	681b      	ldr	r3, [r3, #0]
     1d0:	009b      	lsls	r3, r3, #2
     1d2:	f003 031c 	and.w	r3, r3, #28
     1d6:	2007      	movs	r0, #7
     1d8:	fa00 f303 	lsl.w	r3, r0, r3
     1dc:	43db      	mvns	r3, r3
     1de:	400b      	ands	r3, r1
     1e0:	4313      	orrs	r3, r2
     1e2:	6023      	str	r3, [r4, #0]
     1e4:	687b      	ldr	r3, [r7, #4]
     1e6:	681b      	ldr	r3, [r3, #0]
     1e8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     1ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     1f0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     1f4:	461c      	mov	r4, r3
     1f6:	687b      	ldr	r3, [r7, #4]
     1f8:	681b      	ldr	r3, [r3, #0]
     1fa:	00db      	lsls	r3, r3, #3
     1fc:	f003 0318 	and.w	r3, r3, #24
     200:	2218      	movs	r2, #24
     202:	409a      	lsls	r2, r3
     204:	687b      	ldr	r3, [r7, #4]
     206:	681b      	ldr	r3, [r3, #0]
     208:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     20c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     210:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     214:	6819      	ldr	r1, [r3, #0]
     216:	687b      	ldr	r3, [r7, #4]
     218:	681b      	ldr	r3, [r3, #0]
     21a:	00db      	lsls	r3, r3, #3
     21c:	f003 0318 	and.w	r3, r3, #24
     220:	20ff      	movs	r0, #255	; 0xff
     222:	fa00 f303 	lsl.w	r3, r0, r3
     226:	43db      	mvns	r3, r3
     228:	400b      	ands	r3, r1
     22a:	4313      	orrs	r3, r2
     22c:	6023      	str	r3, [r4, #0]
     22e:	687b      	ldr	r3, [r7, #4]
     230:	681b      	ldr	r3, [r3, #0]
     232:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     236:	4b83      	ldr	r3, [pc, #524]	; (444 <am_devices_led_init+0x2e4>)
     238:	4413      	add	r3, r2
     23a:	4618      	mov	r0, r3
     23c:	687b      	ldr	r3, [r7, #4]
     23e:	681b      	ldr	r3, [r3, #0]
     240:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     244:	4b7f      	ldr	r3, [pc, #508]	; (444 <am_devices_led_init+0x2e4>)
     246:	4413      	add	r3, r2
     248:	681a      	ldr	r2, [r3, #0]
     24a:	687b      	ldr	r3, [r7, #4]
     24c:	681b      	ldr	r3, [r3, #0]
     24e:	00db      	lsls	r3, r3, #3
     250:	f003 0318 	and.w	r3, r3, #24
     254:	21ff      	movs	r1, #255	; 0xff
     256:	fa01 f303 	lsl.w	r3, r1, r3
     25a:	43db      	mvns	r3, r3
     25c:	4013      	ands	r3, r2
     25e:	6003      	str	r3, [r0, #0]
     260:	4b76      	ldr	r3, [pc, #472]	; (43c <am_devices_led_init+0x2dc>)
     262:	2200      	movs	r2, #0
     264:	601a      	str	r2, [r3, #0]
     266:	68fb      	ldr	r3, [r7, #12]
     268:	4618      	mov	r0, r3
     26a:	f001 fca7 	bl	1bbc <am_hal_interrupt_master_set>
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     26e:	687b      	ldr	r3, [r7, #4]
     270:	681b      	ldr	r3, [r3, #0]
     272:	08db      	lsrs	r3, r3, #3
     274:	f003 0204 	and.w	r2, r3, #4
     278:	4b73      	ldr	r3, [pc, #460]	; (448 <am_devices_led_init+0x2e8>)
     27a:	4413      	add	r3, r2
     27c:	4619      	mov	r1, r3
     27e:	687b      	ldr	r3, [r7, #4]
     280:	681b      	ldr	r3, [r3, #0]
     282:	f003 031f 	and.w	r3, r3, #31
     286:	2201      	movs	r2, #1
     288:	fa02 f303 	lsl.w	r3, r2, r3
     28c:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     28e:	687b      	ldr	r3, [r7, #4]
     290:	685b      	ldr	r3, [r3, #4]
     292:	f003 0301 	and.w	r3, r3, #1
     296:	2b00      	cmp	r3, #0
     298:	d010      	beq.n	2bc <am_devices_led_init+0x15c>
     29a:	687b      	ldr	r3, [r7, #4]
     29c:	681b      	ldr	r3, [r3, #0]
     29e:	08db      	lsrs	r3, r3, #3
     2a0:	f003 0204 	and.w	r2, r3, #4
     2a4:	4b69      	ldr	r3, [pc, #420]	; (44c <am_devices_led_init+0x2ec>)
     2a6:	4413      	add	r3, r2
     2a8:	4619      	mov	r1, r3
     2aa:	687b      	ldr	r3, [r7, #4]
     2ac:	681b      	ldr	r3, [r3, #0]
     2ae:	f003 031f 	and.w	r3, r3, #31
     2b2:	2201      	movs	r2, #1
     2b4:	fa02 f303 	lsl.w	r3, r2, r3
     2b8:	600b      	str	r3, [r1, #0]
     2ba:	e0bc      	b.n	436 <am_devices_led_init+0x2d6>
     2bc:	687b      	ldr	r3, [r7, #4]
     2be:	681b      	ldr	r3, [r3, #0]
     2c0:	08db      	lsrs	r3, r3, #3
     2c2:	f003 0204 	and.w	r2, r3, #4
     2c6:	4b62      	ldr	r3, [pc, #392]	; (450 <am_devices_led_init+0x2f0>)
     2c8:	4413      	add	r3, r2
     2ca:	4619      	mov	r1, r3
     2cc:	687b      	ldr	r3, [r7, #4]
     2ce:	681b      	ldr	r3, [r3, #0]
     2d0:	f003 031f 	and.w	r3, r3, #31
     2d4:	2201      	movs	r2, #1
     2d6:	fa02 f303 	lsl.w	r3, r2, r3
     2da:	600b      	str	r3, [r1, #0]
     2dc:	e0ab      	b.n	436 <am_devices_led_init+0x2d6>
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     2de:	687b      	ldr	r3, [r7, #4]
     2e0:	681b      	ldr	r3, [r3, #0]
     2e2:	2b31      	cmp	r3, #49	; 0x31
     2e4:	d86e      	bhi.n	3c4 <am_devices_led_init+0x264>
     2e6:	f001 fc65 	bl	1bb4 <am_hal_interrupt_master_disable>
     2ea:	4603      	mov	r3, r0
     2ec:	60bb      	str	r3, [r7, #8]
     2ee:	4b53      	ldr	r3, [pc, #332]	; (43c <am_devices_led_init+0x2dc>)
     2f0:	2273      	movs	r2, #115	; 0x73
     2f2:	601a      	str	r2, [r3, #0]
     2f4:	687b      	ldr	r3, [r7, #4]
     2f6:	681b      	ldr	r3, [r3, #0]
     2f8:	085b      	lsrs	r3, r3, #1
     2fa:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     2fe:	4b50      	ldr	r3, [pc, #320]	; (440 <am_devices_led_init+0x2e0>)
     300:	4413      	add	r3, r2
     302:	461c      	mov	r4, r3
     304:	687b      	ldr	r3, [r7, #4]
     306:	681b      	ldr	r3, [r3, #0]
     308:	009b      	lsls	r3, r3, #2
     30a:	f003 031c 	and.w	r3, r3, #28
     30e:	2206      	movs	r2, #6
     310:	409a      	lsls	r2, r3
     312:	687b      	ldr	r3, [r7, #4]
     314:	681b      	ldr	r3, [r3, #0]
     316:	085b      	lsrs	r3, r3, #1
     318:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     31c:	4b48      	ldr	r3, [pc, #288]	; (440 <am_devices_led_init+0x2e0>)
     31e:	440b      	add	r3, r1
     320:	6819      	ldr	r1, [r3, #0]
     322:	687b      	ldr	r3, [r7, #4]
     324:	681b      	ldr	r3, [r3, #0]
     326:	009b      	lsls	r3, r3, #2
     328:	f003 031c 	and.w	r3, r3, #28
     32c:	2007      	movs	r0, #7
     32e:	fa00 f303 	lsl.w	r3, r0, r3
     332:	43db      	mvns	r3, r3
     334:	400b      	ands	r3, r1
     336:	4313      	orrs	r3, r2
     338:	6023      	str	r3, [r4, #0]
     33a:	687b      	ldr	r3, [r7, #4]
     33c:	681b      	ldr	r3, [r3, #0]
     33e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     342:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     346:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     34a:	461c      	mov	r4, r3
     34c:	687b      	ldr	r3, [r7, #4]
     34e:	681b      	ldr	r3, [r3, #0]
     350:	00db      	lsls	r3, r3, #3
     352:	f003 0318 	and.w	r3, r3, #24
     356:	2218      	movs	r2, #24
     358:	409a      	lsls	r2, r3
     35a:	687b      	ldr	r3, [r7, #4]
     35c:	681b      	ldr	r3, [r3, #0]
     35e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     362:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     366:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     36a:	6819      	ldr	r1, [r3, #0]
     36c:	687b      	ldr	r3, [r7, #4]
     36e:	681b      	ldr	r3, [r3, #0]
     370:	00db      	lsls	r3, r3, #3
     372:	f003 0318 	and.w	r3, r3, #24
     376:	20ff      	movs	r0, #255	; 0xff
     378:	fa00 f303 	lsl.w	r3, r0, r3
     37c:	43db      	mvns	r3, r3
     37e:	400b      	ands	r3, r1
     380:	4313      	orrs	r3, r2
     382:	6023      	str	r3, [r4, #0]
     384:	687b      	ldr	r3, [r7, #4]
     386:	681b      	ldr	r3, [r3, #0]
     388:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     38c:	4b2d      	ldr	r3, [pc, #180]	; (444 <am_devices_led_init+0x2e4>)
     38e:	4413      	add	r3, r2
     390:	4618      	mov	r0, r3
     392:	687b      	ldr	r3, [r7, #4]
     394:	681b      	ldr	r3, [r3, #0]
     396:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     39a:	4b2a      	ldr	r3, [pc, #168]	; (444 <am_devices_led_init+0x2e4>)
     39c:	4413      	add	r3, r2
     39e:	681a      	ldr	r2, [r3, #0]
     3a0:	687b      	ldr	r3, [r7, #4]
     3a2:	681b      	ldr	r3, [r3, #0]
     3a4:	00db      	lsls	r3, r3, #3
     3a6:	f003 0318 	and.w	r3, r3, #24
     3aa:	21ff      	movs	r1, #255	; 0xff
     3ac:	fa01 f303 	lsl.w	r3, r1, r3
     3b0:	43db      	mvns	r3, r3
     3b2:	4013      	ands	r3, r2
     3b4:	6003      	str	r3, [r0, #0]
     3b6:	4b21      	ldr	r3, [pc, #132]	; (43c <am_devices_led_init+0x2dc>)
     3b8:	2200      	movs	r2, #0
     3ba:	601a      	str	r2, [r3, #0]
     3bc:	68bb      	ldr	r3, [r7, #8]
     3be:	4618      	mov	r0, r3
     3c0:	f001 fbfc 	bl	1bbc <am_hal_interrupt_master_set>
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     3c4:	687b      	ldr	r3, [r7, #4]
     3c6:	681b      	ldr	r3, [r3, #0]
     3c8:	08db      	lsrs	r3, r3, #3
     3ca:	f003 0204 	and.w	r2, r3, #4
     3ce:	4b1e      	ldr	r3, [pc, #120]	; (448 <am_devices_led_init+0x2e8>)
     3d0:	4413      	add	r3, r2
     3d2:	4619      	mov	r1, r3
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	681b      	ldr	r3, [r3, #0]
     3d8:	f003 031f 	and.w	r3, r3, #31
     3dc:	2201      	movs	r2, #1
     3de:	fa02 f303 	lsl.w	r3, r2, r3
     3e2:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     3e4:	687b      	ldr	r3, [r7, #4]
     3e6:	685b      	ldr	r3, [r3, #4]
     3e8:	f003 0301 	and.w	r3, r3, #1
     3ec:	2b00      	cmp	r3, #0
     3ee:	d010      	beq.n	412 <am_devices_led_init+0x2b2>
     3f0:	687b      	ldr	r3, [r7, #4]
     3f2:	681b      	ldr	r3, [r3, #0]
     3f4:	08db      	lsrs	r3, r3, #3
     3f6:	f003 0204 	and.w	r2, r3, #4
     3fa:	4b14      	ldr	r3, [pc, #80]	; (44c <am_devices_led_init+0x2ec>)
     3fc:	4413      	add	r3, r2
     3fe:	4619      	mov	r1, r3
     400:	687b      	ldr	r3, [r7, #4]
     402:	681b      	ldr	r3, [r3, #0]
     404:	f003 031f 	and.w	r3, r3, #31
     408:	2201      	movs	r2, #1
     40a:	fa02 f303 	lsl.w	r3, r2, r3
     40e:	600b      	str	r3, [r1, #0]
     410:	e011      	b.n	436 <am_devices_led_init+0x2d6>
     412:	687b      	ldr	r3, [r7, #4]
     414:	681b      	ldr	r3, [r3, #0]
     416:	08db      	lsrs	r3, r3, #3
     418:	f003 0204 	and.w	r2, r3, #4
     41c:	4b0c      	ldr	r3, [pc, #48]	; (450 <am_devices_led_init+0x2f0>)
     41e:	4413      	add	r3, r2
     420:	4619      	mov	r1, r3
     422:	687b      	ldr	r3, [r7, #4]
     424:	681b      	ldr	r3, [r3, #0]
     426:	f003 031f 	and.w	r3, r3, #31
     42a:	2201      	movs	r2, #1
     42c:	fa02 f303 	lsl.w	r3, r2, r3
     430:	600b      	str	r3, [r1, #0]
     432:	e000      	b.n	436 <am_devices_led_init+0x2d6>
        return;
     434:	bf00      	nop
}
     436:	3714      	adds	r7, #20
     438:	46bd      	mov	sp, r7
     43a:	bd90      	pop	{r4, r7, pc}
     43c:	40010060 	.word	0x40010060
     440:	40010040 	.word	0x40010040
     444:	400100e0 	.word	0x400100e0
     448:	400100b4 	.word	0x400100b4
     44c:	40010090 	.word	0x40010090
     450:	40010098 	.word	0x40010098

00000454 <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
     454:	b580      	push	{r7, lr}
     456:	b084      	sub	sp, #16
     458:	af00      	add	r7, sp, #0
     45a:	6078      	str	r0, [r7, #4]
     45c:	6039      	str	r1, [r7, #0]
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
     45e:	687b      	ldr	r3, [r7, #4]
     460:	2b00      	cmp	r3, #0
     462:	d014      	beq.n	48e <am_devices_led_array_init+0x3a>
     464:	683b      	ldr	r3, [r7, #0]
     466:	2b1f      	cmp	r3, #31
     468:	d811      	bhi.n	48e <am_devices_led_array_init+0x3a>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     46a:	2300      	movs	r3, #0
     46c:	60fb      	str	r3, [r7, #12]
     46e:	e009      	b.n	484 <am_devices_led_array_init+0x30>
    {
        am_devices_led_init(psLEDs + i);
     470:	68fb      	ldr	r3, [r7, #12]
     472:	00db      	lsls	r3, r3, #3
     474:	687a      	ldr	r2, [r7, #4]
     476:	4413      	add	r3, r2
     478:	4618      	mov	r0, r3
     47a:	f7ff fe71 	bl	160 <am_devices_led_init>
    for ( i = 0; i < ui32NumLEDs; i++ )
     47e:	68fb      	ldr	r3, [r7, #12]
     480:	3301      	adds	r3, #1
     482:	60fb      	str	r3, [r7, #12]
     484:	68fa      	ldr	r2, [r7, #12]
     486:	683b      	ldr	r3, [r7, #0]
     488:	429a      	cmp	r2, r3
     48a:	d3f1      	bcc.n	470 <am_devices_led_array_init+0x1c>
     48c:	e000      	b.n	490 <am_devices_led_array_init+0x3c>
        return;
     48e:	bf00      	nop
    }
}
     490:	3710      	adds	r7, #16
     492:	46bd      	mov	sp, r7
     494:	bd80      	pop	{r7, pc}
	...

00000498 <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     498:	b480      	push	{r7}
     49a:	b083      	sub	sp, #12
     49c:	af00      	add	r7, sp, #0
     49e:	6078      	str	r0, [r7, #4]
     4a0:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
     4a2:	687b      	ldr	r3, [r7, #4]
     4a4:	2b00      	cmp	r3, #0
     4a6:	d060      	beq.n	56a <am_devices_led_off+0xd2>
     4a8:	683b      	ldr	r3, [r7, #0]
     4aa:	2b1e      	cmp	r3, #30
     4ac:	d85d      	bhi.n	56a <am_devices_led_off+0xd2>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
     4ae:	683b      	ldr	r3, [r7, #0]
     4b0:	00db      	lsls	r3, r3, #3
     4b2:	687a      	ldr	r2, [r7, #4]
     4b4:	4413      	add	r3, r2
     4b6:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
     4b8:	2b31      	cmp	r3, #49	; 0x31
     4ba:	d856      	bhi.n	56a <am_devices_led_off+0xd2>
    }
#else
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     4bc:	683b      	ldr	r3, [r7, #0]
     4be:	00db      	lsls	r3, r3, #3
     4c0:	687a      	ldr	r2, [r7, #4]
     4c2:	4413      	add	r3, r2
     4c4:	685b      	ldr	r3, [r3, #4]
     4c6:	f003 0302 	and.w	r3, r3, #2
     4ca:	2b00      	cmp	r3, #0
     4cc:	d036      	beq.n	53c <am_devices_led_off+0xa4>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     4ce:	683b      	ldr	r3, [r7, #0]
     4d0:	00db      	lsls	r3, r3, #3
     4d2:	687a      	ldr	r2, [r7, #4]
     4d4:	4413      	add	r3, r2
     4d6:	685b      	ldr	r3, [r3, #4]
     4d8:	f003 0301 	and.w	r3, r3, #1
     4dc:	2b00      	cmp	r3, #0
     4de:	d116      	bne.n	50e <am_devices_led_off+0x76>
     4e0:	683b      	ldr	r3, [r7, #0]
     4e2:	00db      	lsls	r3, r3, #3
     4e4:	687a      	ldr	r2, [r7, #4]
     4e6:	4413      	add	r3, r2
     4e8:	681b      	ldr	r3, [r3, #0]
     4ea:	08db      	lsrs	r3, r3, #3
     4ec:	f003 0204 	and.w	r2, r3, #4
     4f0:	4b21      	ldr	r3, [pc, #132]	; (578 <am_devices_led_off+0xe0>)
     4f2:	4413      	add	r3, r2
     4f4:	4619      	mov	r1, r3
     4f6:	683b      	ldr	r3, [r7, #0]
     4f8:	00db      	lsls	r3, r3, #3
     4fa:	687a      	ldr	r2, [r7, #4]
     4fc:	4413      	add	r3, r2
     4fe:	681b      	ldr	r3, [r3, #0]
     500:	f003 031f 	and.w	r3, r3, #31
     504:	2201      	movs	r2, #1
     506:	fa02 f303 	lsl.w	r3, r2, r3
     50a:	600b      	str	r3, [r1, #0]
     50c:	e02e      	b.n	56c <am_devices_led_off+0xd4>
     50e:	683b      	ldr	r3, [r7, #0]
     510:	00db      	lsls	r3, r3, #3
     512:	687a      	ldr	r2, [r7, #4]
     514:	4413      	add	r3, r2
     516:	681b      	ldr	r3, [r3, #0]
     518:	08db      	lsrs	r3, r3, #3
     51a:	f003 0204 	and.w	r2, r3, #4
     51e:	4b17      	ldr	r3, [pc, #92]	; (57c <am_devices_led_off+0xe4>)
     520:	4413      	add	r3, r2
     522:	4619      	mov	r1, r3
     524:	683b      	ldr	r3, [r7, #0]
     526:	00db      	lsls	r3, r3, #3
     528:	687a      	ldr	r2, [r7, #4]
     52a:	4413      	add	r3, r2
     52c:	681b      	ldr	r3, [r3, #0]
     52e:	f003 031f 	and.w	r3, r3, #31
     532:	2201      	movs	r2, #1
     534:	fa02 f303 	lsl.w	r3, r2, r3
     538:	600b      	str	r3, [r1, #0]
     53a:	e017      	b.n	56c <am_devices_led_off+0xd4>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
     53c:	683b      	ldr	r3, [r7, #0]
     53e:	00db      	lsls	r3, r3, #3
     540:	687a      	ldr	r2, [r7, #4]
     542:	4413      	add	r3, r2
     544:	681b      	ldr	r3, [r3, #0]
     546:	08db      	lsrs	r3, r3, #3
     548:	f003 0204 	and.w	r2, r3, #4
     54c:	4b0c      	ldr	r3, [pc, #48]	; (580 <am_devices_led_off+0xe8>)
     54e:	4413      	add	r3, r2
     550:	4619      	mov	r1, r3
     552:	683b      	ldr	r3, [r7, #0]
     554:	00db      	lsls	r3, r3, #3
     556:	687a      	ldr	r2, [r7, #4]
     558:	4413      	add	r3, r2
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f003 031f 	and.w	r3, r3, #31
     560:	2201      	movs	r2, #1
     562:	fa02 f303 	lsl.w	r3, r2, r3
     566:	600b      	str	r3, [r1, #0]
     568:	e000      	b.n	56c <am_devices_led_off+0xd4>
        return;
     56a:	bf00      	nop
    }
#endif
}
     56c:	370c      	adds	r7, #12
     56e:	46bd      	mov	sp, r7
     570:	f85d 7b04 	ldr.w	r7, [sp], #4
     574:	4770      	bx	lr
     576:	bf00      	nop
     578:	40010090 	.word	0x40010090
     57c:	40010098 	.word	0x40010098
     580:	400100b4 	.word	0x400100b4

00000584 <am_devices_led_toggle>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     584:	b580      	push	{r7, lr}
     586:	b084      	sub	sp, #16
     588:	af00      	add	r7, sp, #0
     58a:	6078      	str	r0, [r7, #4]
     58c:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
     58e:	687b      	ldr	r3, [r7, #4]
     590:	2b00      	cmp	r3, #0
     592:	d076      	beq.n	682 <am_devices_led_toggle+0xfe>
     594:	683b      	ldr	r3, [r7, #0]
     596:	2b1e      	cmp	r3, #30
     598:	d873      	bhi.n	682 <am_devices_led_toggle+0xfe>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
     59a:	683b      	ldr	r3, [r7, #0]
     59c:	00db      	lsls	r3, r3, #3
     59e:	687a      	ldr	r2, [r7, #4]
     5a0:	4413      	add	r3, r2
     5a2:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
     5a4:	2b31      	cmp	r3, #49	; 0x31
     5a6:	d86c      	bhi.n	682 <am_devices_led_toggle+0xfe>
    }
#else
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     5a8:	683b      	ldr	r3, [r7, #0]
     5aa:	00db      	lsls	r3, r3, #3
     5ac:	687a      	ldr	r2, [r7, #4]
     5ae:	4413      	add	r3, r2
     5b0:	685b      	ldr	r3, [r3, #4]
     5b2:	f003 0302 	and.w	r3, r3, #2
     5b6:	2b00      	cmp	r3, #0
     5b8:	d02a      	beq.n	610 <am_devices_led_toggle+0x8c>
    {
        am_hal_gpio_out_bit_toggle(psLEDs[ui32LEDNum].ui32GPIONumber);
     5ba:	f001 fafb 	bl	1bb4 <am_hal_interrupt_master_disable>
     5be:	4603      	mov	r3, r0
     5c0:	60fb      	str	r3, [r7, #12]
     5c2:	683b      	ldr	r3, [r7, #0]
     5c4:	00db      	lsls	r3, r3, #3
     5c6:	687a      	ldr	r2, [r7, #4]
     5c8:	4413      	add	r3, r2
     5ca:	681b      	ldr	r3, [r3, #0]
     5cc:	08db      	lsrs	r3, r3, #3
     5ce:	f003 0204 	and.w	r2, r3, #4
     5d2:	4b2e      	ldr	r3, [pc, #184]	; (68c <am_devices_led_toggle+0x108>)
     5d4:	4413      	add	r3, r2
     5d6:	4618      	mov	r0, r3
     5d8:	683b      	ldr	r3, [r7, #0]
     5da:	00db      	lsls	r3, r3, #3
     5dc:	687a      	ldr	r2, [r7, #4]
     5de:	4413      	add	r3, r2
     5e0:	681b      	ldr	r3, [r3, #0]
     5e2:	08db      	lsrs	r3, r3, #3
     5e4:	f003 0204 	and.w	r2, r3, #4
     5e8:	4b28      	ldr	r3, [pc, #160]	; (68c <am_devices_led_toggle+0x108>)
     5ea:	4413      	add	r3, r2
     5ec:	681a      	ldr	r2, [r3, #0]
     5ee:	683b      	ldr	r3, [r7, #0]
     5f0:	00db      	lsls	r3, r3, #3
     5f2:	6879      	ldr	r1, [r7, #4]
     5f4:	440b      	add	r3, r1
     5f6:	681b      	ldr	r3, [r3, #0]
     5f8:	f003 031f 	and.w	r3, r3, #31
     5fc:	2101      	movs	r1, #1
     5fe:	fa01 f303 	lsl.w	r3, r1, r3
     602:	4053      	eors	r3, r2
     604:	6003      	str	r3, [r0, #0]
     606:	68fb      	ldr	r3, [r7, #12]
     608:	4618      	mov	r0, r3
     60a:	f001 fad7 	bl	1bbc <am_hal_interrupt_master_set>
     60e:	e039      	b.n	684 <am_devices_led_toggle+0x100>
    else
    {
        //
        // Check to see if the LED pin is enabled.
        //
        if ( am_hal_gpio_out_enable_bit_get(psLEDs[ui32LEDNum].ui32GPIONumber) )
     610:	683b      	ldr	r3, [r7, #0]
     612:	00db      	lsls	r3, r3, #3
     614:	687a      	ldr	r2, [r7, #4]
     616:	4413      	add	r3, r2
     618:	681b      	ldr	r3, [r3, #0]
     61a:	4618      	mov	r0, r3
     61c:	f001 fa6c 	bl	1af8 <am_hal_gpio_out_enable_bit_get>
     620:	4603      	mov	r3, r0
     622:	2b00      	cmp	r3, #0
     624:	d016      	beq.n	654 <am_devices_led_toggle+0xd0>
        {
            //
            // If it was enabled, turn if off.
            //
            am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
     626:	683b      	ldr	r3, [r7, #0]
     628:	00db      	lsls	r3, r3, #3
     62a:	687a      	ldr	r2, [r7, #4]
     62c:	4413      	add	r3, r2
     62e:	681b      	ldr	r3, [r3, #0]
     630:	08db      	lsrs	r3, r3, #3
     632:	f003 0204 	and.w	r2, r3, #4
     636:	4b16      	ldr	r3, [pc, #88]	; (690 <am_devices_led_toggle+0x10c>)
     638:	4413      	add	r3, r2
     63a:	4619      	mov	r1, r3
     63c:	683b      	ldr	r3, [r7, #0]
     63e:	00db      	lsls	r3, r3, #3
     640:	687a      	ldr	r2, [r7, #4]
     642:	4413      	add	r3, r2
     644:	681b      	ldr	r3, [r3, #0]
     646:	f003 031f 	and.w	r3, r3, #31
     64a:	2201      	movs	r2, #1
     64c:	fa02 f303 	lsl.w	r3, r2, r3
     650:	600b      	str	r3, [r1, #0]
     652:	e017      	b.n	684 <am_devices_led_toggle+0x100>
        else
        {
            //
            // If it was not enabled, turn if on.
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
     654:	683b      	ldr	r3, [r7, #0]
     656:	00db      	lsls	r3, r3, #3
     658:	687a      	ldr	r2, [r7, #4]
     65a:	4413      	add	r3, r2
     65c:	681b      	ldr	r3, [r3, #0]
     65e:	08db      	lsrs	r3, r3, #3
     660:	f003 0204 	and.w	r2, r3, #4
     664:	4b0b      	ldr	r3, [pc, #44]	; (694 <am_devices_led_toggle+0x110>)
     666:	4413      	add	r3, r2
     668:	4619      	mov	r1, r3
     66a:	683b      	ldr	r3, [r7, #0]
     66c:	00db      	lsls	r3, r3, #3
     66e:	687a      	ldr	r2, [r7, #4]
     670:	4413      	add	r3, r2
     672:	681b      	ldr	r3, [r3, #0]
     674:	f003 031f 	and.w	r3, r3, #31
     678:	2201      	movs	r2, #1
     67a:	fa02 f303 	lsl.w	r3, r2, r3
     67e:	600b      	str	r3, [r1, #0]
     680:	e000      	b.n	684 <am_devices_led_toggle+0x100>
        return;
     682:	bf00      	nop
        }
    }
#endif
}
     684:	3710      	adds	r7, #16
     686:	46bd      	mov	sp, r7
     688:	bd80      	pop	{r7, pc}
     68a:	bf00      	nop
     68c:	40010088 	.word	0x40010088
     690:	400100b4 	.word	0x400100b4
     694:	400100a8 	.word	0x400100a8

00000698 <uart_init>:
// Initialize the UART
//
//*****************************************************************************
void
uart_init(uint32_t ui32UartModule)
{
     698:	b580      	push	{r7, lr}
     69a:	b084      	sub	sp, #16
     69c:	af00      	add	r7, sp, #0
     69e:	6078      	str	r0, [r7, #4]
    //
    // Make sure the UART RX and TX pins are enabled.
    //
    am_bsp_pin_enable(COM_UART_TX);
     6a0:	f001 fa88 	bl	1bb4 <am_hal_interrupt_master_disable>
     6a4:	4603      	mov	r3, r0
     6a6:	60fb      	str	r3, [r7, #12]
     6a8:	4b2a      	ldr	r3, [pc, #168]	; (754 <uart_init+0xbc>)
     6aa:	2273      	movs	r2, #115	; 0x73
     6ac:	601a      	str	r2, [r3, #0]
     6ae:	4a2a      	ldr	r2, [pc, #168]	; (758 <uart_init+0xc0>)
     6b0:	4b29      	ldr	r3, [pc, #164]	; (758 <uart_init+0xc0>)
     6b2:	681b      	ldr	r3, [r3, #0]
     6b4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     6b8:	6013      	str	r3, [r2, #0]
     6ba:	4a28      	ldr	r2, [pc, #160]	; (75c <uart_init+0xc4>)
     6bc:	4b27      	ldr	r3, [pc, #156]	; (75c <uart_init+0xc4>)
     6be:	681b      	ldr	r3, [r3, #0]
     6c0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     6c4:	6013      	str	r3, [r2, #0]
     6c6:	4a26      	ldr	r2, [pc, #152]	; (760 <uart_init+0xc8>)
     6c8:	4b25      	ldr	r3, [pc, #148]	; (760 <uart_init+0xc8>)
     6ca:	681b      	ldr	r3, [r3, #0]
     6cc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     6d0:	6013      	str	r3, [r2, #0]
     6d2:	4b20      	ldr	r3, [pc, #128]	; (754 <uart_init+0xbc>)
     6d4:	2200      	movs	r2, #0
     6d6:	601a      	str	r2, [r3, #0]
     6d8:	68fb      	ldr	r3, [r7, #12]
     6da:	4618      	mov	r0, r3
     6dc:	f001 fa6e 	bl	1bbc <am_hal_interrupt_master_set>
    am_bsp_pin_enable(COM_UART_RX);
     6e0:	f001 fa68 	bl	1bb4 <am_hal_interrupt_master_disable>
     6e4:	4603      	mov	r3, r0
     6e6:	60bb      	str	r3, [r7, #8]
     6e8:	4b1a      	ldr	r3, [pc, #104]	; (754 <uart_init+0xbc>)
     6ea:	2273      	movs	r2, #115	; 0x73
     6ec:	601a      	str	r2, [r3, #0]
     6ee:	4a1a      	ldr	r2, [pc, #104]	; (758 <uart_init+0xc0>)
     6f0:	4b19      	ldr	r3, [pc, #100]	; (758 <uart_init+0xc0>)
     6f2:	681b      	ldr	r3, [r3, #0]
     6f4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
     6f8:	6013      	str	r3, [r2, #0]
     6fa:	4a18      	ldr	r2, [pc, #96]	; (75c <uart_init+0xc4>)
     6fc:	4b17      	ldr	r3, [pc, #92]	; (75c <uart_init+0xc4>)
     6fe:	681b      	ldr	r3, [r3, #0]
     700:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     704:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     708:	6013      	str	r3, [r2, #0]
     70a:	4a15      	ldr	r2, [pc, #84]	; (760 <uart_init+0xc8>)
     70c:	4b14      	ldr	r3, [pc, #80]	; (760 <uart_init+0xc8>)
     70e:	681b      	ldr	r3, [r3, #0]
     710:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     714:	6013      	str	r3, [r2, #0]
     716:	4b0f      	ldr	r3, [pc, #60]	; (754 <uart_init+0xbc>)
     718:	2200      	movs	r2, #0
     71a:	601a      	str	r2, [r3, #0]
     71c:	68bb      	ldr	r3, [r7, #8]
     71e:	4618      	mov	r0, r3
     720:	f001 fa4c 	bl	1bbc <am_hal_interrupt_master_set>

    //
    // Power on the selected UART
    //
    am_hal_uart_pwrctrl_enable(ui32UartModule);
     724:	6878      	ldr	r0, [r7, #4]
     726:	f001 fdad 	bl	2284 <am_hal_uart_pwrctrl_enable>

    //
    // Start the UART interface, apply the desired configuration settings, and
    // enable the FIFOs.
    //
    am_hal_uart_clock_enable(ui32UartModule);
     72a:	6878      	ldr	r0, [r7, #4]
     72c:	f001 fdd2 	bl	22d4 <am_hal_uart_clock_enable>

    //
    // Disable the UART before configuring it.
    //
    am_hal_uart_disable(ui32UartModule);
     730:	6878      	ldr	r0, [r7, #4]
     732:	f001 fd91 	bl	2258 <am_hal_uart_disable>

    //
    // Configure the UART.
    //
    am_hal_uart_config(ui32UartModule, &g_sUartConfig);
     736:	490b      	ldr	r1, [pc, #44]	; (764 <uart_init+0xcc>)
     738:	6878      	ldr	r0, [r7, #4]
     73a:	f001 fd41 	bl	21c0 <am_hal_uart_config>

    //
    // Enable the UART FIFO.
    //
    am_hal_uart_fifo_config(ui32UartModule, AM_HAL_UART_TX_FIFO_1_2 | AM_HAL_UART_RX_FIFO_1_2);
     73e:	2112      	movs	r1, #18
     740:	6878      	ldr	r0, [r7, #4]
     742:	f001 fde5 	bl	2310 <am_hal_uart_fifo_config>

    //
    // Enable the UART.
    //
    am_hal_uart_enable(ui32UartModule);
     746:	6878      	ldr	r0, [r7, #4]
     748:	f001 fd70 	bl	222c <am_hal_uart_enable>
}
     74c:	bf00      	nop
     74e:	3710      	adds	r7, #16
     750:	46bd      	mov	sp, r7
     752:	bd80      	pop	{r7, pc}
     754:	40010060 	.word	0x40010060
     758:	40010048 	.word	0x40010048
     75c:	40010014 	.word	0x40010014
     760:	400100f4 	.word	0x400100f4
     764:	10001000 	.word	0x10001000

00000768 <uart_disable>:
// Disable the UART
//
//*****************************************************************************
void
uart_disable(uint32_t ui32UartModule)
{
     768:	b580      	push	{r7, lr}
     76a:	b084      	sub	sp, #16
     76c:	af00      	add	r7, sp, #0
     76e:	6078      	str	r0, [r7, #4]
    //
    // Before disabling the UART, wait a little time to be sure all
    // printing has completed.
    //
    am_util_delay_ms(10);
     770:	200a      	movs	r0, #10
     772:	f000 f969 	bl	a48 <am_util_delay_ms>

    //
    // Disable and power down the UART.
    //
    am_hal_uart_disable(ui32UartModule);
     776:	6878      	ldr	r0, [r7, #4]
     778:	f001 fd6e 	bl	2258 <am_hal_uart_disable>
    am_hal_uart_pwrctrl_disable(ui32UartModule);
     77c:	6878      	ldr	r0, [r7, #4]
     77e:	f001 fd95 	bl	22ac <am_hal_uart_pwrctrl_disable>

    //
    // Turn off UART clock.
    // Note - this is automatically handled in hardware on Apollo2.
    //
    am_hal_uart_clock_disable(ui32UartModule);
     782:	6878      	ldr	r0, [r7, #4]
     784:	f001 fdb8 	bl	22f8 <am_hal_uart_clock_disable>

    //
    // Disable the UART pins.
    //
    am_bsp_pin_disable(COM_UART_TX);
     788:	f001 fa14 	bl	1bb4 <am_hal_interrupt_master_disable>
     78c:	4603      	mov	r3, r0
     78e:	60fb      	str	r3, [r7, #12]
     790:	4b21      	ldr	r3, [pc, #132]	; (818 <uart_disable+0xb0>)
     792:	2273      	movs	r2, #115	; 0x73
     794:	601a      	str	r2, [r3, #0]
     796:	4a21      	ldr	r2, [pc, #132]	; (81c <uart_disable+0xb4>)
     798:	4b20      	ldr	r3, [pc, #128]	; (81c <uart_disable+0xb4>)
     79a:	681b      	ldr	r3, [r3, #0]
     79c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     7a0:	6013      	str	r3, [r2, #0]
     7a2:	4a1f      	ldr	r2, [pc, #124]	; (820 <uart_disable+0xb8>)
     7a4:	4b1e      	ldr	r3, [pc, #120]	; (820 <uart_disable+0xb8>)
     7a6:	681b      	ldr	r3, [r3, #0]
     7a8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     7ac:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
     7b0:	6013      	str	r3, [r2, #0]
     7b2:	4a1c      	ldr	r2, [pc, #112]	; (824 <uart_disable+0xbc>)
     7b4:	4b1b      	ldr	r3, [pc, #108]	; (824 <uart_disable+0xbc>)
     7b6:	681b      	ldr	r3, [r3, #0]
     7b8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     7bc:	6013      	str	r3, [r2, #0]
     7be:	4b16      	ldr	r3, [pc, #88]	; (818 <uart_disable+0xb0>)
     7c0:	2200      	movs	r2, #0
     7c2:	601a      	str	r2, [r3, #0]
     7c4:	68fb      	ldr	r3, [r7, #12]
     7c6:	4618      	mov	r0, r3
     7c8:	f001 f9f8 	bl	1bbc <am_hal_interrupt_master_set>
    am_bsp_pin_disable(COM_UART_RX);
     7cc:	f001 f9f2 	bl	1bb4 <am_hal_interrupt_master_disable>
     7d0:	4603      	mov	r3, r0
     7d2:	60bb      	str	r3, [r7, #8]
     7d4:	4b10      	ldr	r3, [pc, #64]	; (818 <uart_disable+0xb0>)
     7d6:	2273      	movs	r2, #115	; 0x73
     7d8:	601a      	str	r2, [r3, #0]
     7da:	4a10      	ldr	r2, [pc, #64]	; (81c <uart_disable+0xb4>)
     7dc:	4b0f      	ldr	r3, [pc, #60]	; (81c <uart_disable+0xb4>)
     7de:	681b      	ldr	r3, [r3, #0]
     7e0:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
     7e4:	6013      	str	r3, [r2, #0]
     7e6:	4a0e      	ldr	r2, [pc, #56]	; (820 <uart_disable+0xb8>)
     7e8:	4b0d      	ldr	r3, [pc, #52]	; (820 <uart_disable+0xb8>)
     7ea:	681b      	ldr	r3, [r3, #0]
     7ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     7f0:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
     7f4:	6013      	str	r3, [r2, #0]
     7f6:	4a0b      	ldr	r2, [pc, #44]	; (824 <uart_disable+0xbc>)
     7f8:	4b0a      	ldr	r3, [pc, #40]	; (824 <uart_disable+0xbc>)
     7fa:	681b      	ldr	r3, [r3, #0]
     7fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     800:	6013      	str	r3, [r2, #0]
     802:	4b05      	ldr	r3, [pc, #20]	; (818 <uart_disable+0xb0>)
     804:	2200      	movs	r2, #0
     806:	601a      	str	r2, [r3, #0]
     808:	68bb      	ldr	r3, [r7, #8]
     80a:	4618      	mov	r0, r3
     80c:	f001 f9d6 	bl	1bbc <am_hal_interrupt_master_set>
}
     810:	bf00      	nop
     812:	3710      	adds	r7, #16
     814:	46bd      	mov	sp, r7
     816:	bd80      	pop	{r7, pc}
     818:	40010060 	.word	0x40010060
     81c:	40010048 	.word	0x40010048
     820:	40010014 	.word	0x40010014
     824:	400100f4 	.word	0x400100f4

00000828 <am_gpio_isr>:
// GPIO ISR
//
//*****************************************************************************
void
am_gpio_isr(void)
{
     828:	b580      	push	{r7, lr}
     82a:	af00      	add	r7, sp, #0
    //
    // Delay for debounce.
    //
    am_util_delay_ms(200);
     82c:	20c8      	movs	r0, #200	; 0xc8
     82e:	f000 f90b 	bl	a48 <am_util_delay_ms>

    //
    // Clear the GPIO Interrupt (write to clear).
    //
    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
     832:	f44f 3080 	mov.w	r0, #65536	; 0x10000
     836:	f04f 0100 	mov.w	r1, #0
     83a:	f001 f97b 	bl	1b34 <am_hal_gpio_int_clear>

    //
    // Toggle LED 0.
    //
    am_devices_led_toggle(am_bsp_psLEDs, 0);
     83e:	2100      	movs	r1, #0
     840:	4802      	ldr	r0, [pc, #8]	; (84c <am_gpio_isr+0x24>)
     842:	f7ff fe9f 	bl	584 <am_devices_led_toggle>
}
     846:	bf00      	nop
     848:	bd80      	pop	{r7, pc}
     84a:	bf00      	nop
     84c:	10001014 	.word	0x10001014

00000850 <am_clkgen_isr>:
// RTC ISR
//
//*****************************************************************************
void
am_clkgen_isr(void)
{
     850:	b580      	push	{r7, lr}
     852:	af00      	add	r7, sp, #0
    //
    // Clear the RTC alarm interrupt.
    //
    am_hal_rtc_int_clear(AM_HAL_RTC_INT_ALM);
     854:	2008      	movs	r0, #8
     856:	f001 fbe7 	bl	2028 <am_hal_rtc_int_clear>

    //
    // Toggle LED 1.
    //
    am_devices_led_toggle(am_bsp_psLEDs, 1);
     85a:	2101      	movs	r1, #1
     85c:	4802      	ldr	r0, [pc, #8]	; (868 <am_clkgen_isr+0x18>)
     85e:	f7ff fe91 	bl	584 <am_devices_led_toggle>
}
     862:	bf00      	nop
     864:	bd80      	pop	{r7, pc}
     866:	bf00      	nop
     868:	10001014 	.word	0x10001014

0000086c <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     86c:	b580      	push	{r7, lr}
     86e:	b082      	sub	sp, #8
     870:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     872:	2000      	movs	r0, #0
     874:	f001 f8da 	bl	1a2c <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     878:	484b      	ldr	r0, [pc, #300]	; (9a8 <main+0x13c>)
     87a:	f001 f841 	bl	1900 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     87e:	f001 f829 	bl	18d4 <am_bsp_low_power_init>

#if RTC_CLK_SRC == XT
    //
    // Enable the XT for the RTC.
    //
    am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_XT);
     882:	2001      	movs	r0, #1
     884:	f001 f8fa 	bl	1a7c <am_hal_clkgen_osc_start>

    //
    // Select XT for RTC clock source
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_XT);
     888:	2000      	movs	r0, #0
     88a:	f001 fba7 	bl	1fdc <am_hal_rtc_osc_select>
#endif

    //
    // Enable the RTC.
    //
    am_hal_rtc_osc_enable();
     88e:	f001 fbb3 	bl	1ff8 <am_hal_rtc_osc_enable>

    //
    // Initialize the printf interface for UART output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t)am_bsp_uart_string_print);
     892:	4846      	ldr	r0, [pc, #280]	; (9ac <main+0x140>)
     894:	f000 f972 	bl	b7c <am_util_stdio_printf_init>

    //
    // Initialize the UART
    //
    uart_init(AM_BSP_UART_PRINT_INST);
     898:	2000      	movs	r0, #0
     89a:	f7ff fefd 	bl	698 <uart_init>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
     89e:	f001 f80f 	bl	18c0 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Deepsleep Wake Example\n");
     8a2:	4843      	ldr	r0, [pc, #268]	; (9b0 <main+0x144>)
     8a4:	f000 ffee 	bl	1884 <am_util_stdio_printf>

    //
    // To minimize power during the run, disable the UART.
    //
    uart_disable(AM_BSP_UART_PRINT_INST);
     8a8:	2000      	movs	r0, #0
     8aa:	f7ff ff5d 	bl	768 <uart_disable>
#ifdef AM_PART_APOLLO2

    //
    // Turn OFF Flash1
    //
    AM_BFW(PWRCTRL, MEMEN, FLASH1, 0);
     8ae:	4a41      	ldr	r2, [pc, #260]	; (9b4 <main+0x148>)
     8b0:	4b40      	ldr	r3, [pc, #256]	; (9b4 <main+0x148>)
     8b2:	681b      	ldr	r3, [r3, #0]
     8b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
     8b8:	6013      	str	r3, [r2, #0]
    while (AM_BFR(PWRCTRL, PWRONSTATUS, PD_FLAM1) != 0) {}
     8ba:	bf00      	nop
     8bc:	4b3e      	ldr	r3, [pc, #248]	; (9b8 <main+0x14c>)
     8be:	681b      	ldr	r3, [r3, #0]
     8c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     8c4:	2b00      	cmp	r3, #0
     8c6:	d1f9      	bne.n	8bc <main+0x50>

    //
    // Power down SRAM
    //
    AM_BFWe(PWRCTRL, SRAMPWDINSLEEP, SRAMSLEEPPOWERDOWN, ALLBUTLOWER8K);
     8c8:	4a3c      	ldr	r2, [pc, #240]	; (9bc <main+0x150>)
     8ca:	4b3c      	ldr	r3, [pc, #240]	; (9bc <main+0x150>)
     8cc:	681b      	ldr	r3, [r3, #0]
     8ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
     8d2:	f023 0307 	bic.w	r3, r3, #7
     8d6:	f443 63ff 	orr.w	r3, r3, #2040	; 0x7f8
     8da:	f043 0306 	orr.w	r3, r3, #6
     8de:	6013      	str	r3, [r2, #0]
#endif // AM_PART_APOLLO2

    //
    // Configure the LEDs GPIO and button pins.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
     8e0:	2105      	movs	r1, #5
     8e2:	4837      	ldr	r0, [pc, #220]	; (9c0 <main+0x154>)
     8e4:	f7ff fdb6 	bl	454 <am_devices_led_array_init>
    am_hal_gpio_pin_config(AM_BSP_GPIO_BUTTON0, AM_HAL_GPIO_INPUT);
     8e8:	f001 f964 	bl	1bb4 <am_hal_interrupt_master_disable>
     8ec:	4603      	mov	r3, r0
     8ee:	607b      	str	r3, [r7, #4]
     8f0:	4b34      	ldr	r3, [pc, #208]	; (9c4 <main+0x158>)
     8f2:	2273      	movs	r2, #115	; 0x73
     8f4:	601a      	str	r2, [r3, #0]
     8f6:	4a34      	ldr	r2, [pc, #208]	; (9c8 <main+0x15c>)
     8f8:	4b33      	ldr	r3, [pc, #204]	; (9c8 <main+0x15c>)
     8fa:	681b      	ldr	r3, [r3, #0]
     8fc:	f023 0307 	bic.w	r3, r3, #7
     900:	6013      	str	r3, [r2, #0]
     902:	4a32      	ldr	r2, [pc, #200]	; (9cc <main+0x160>)
     904:	4b31      	ldr	r3, [pc, #196]	; (9cc <main+0x160>)
     906:	681b      	ldr	r3, [r3, #0]
     908:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     90c:	f043 031a 	orr.w	r3, r3, #26
     910:	6013      	str	r3, [r2, #0]
     912:	4a2f      	ldr	r2, [pc, #188]	; (9d0 <main+0x164>)
     914:	4b2e      	ldr	r3, [pc, #184]	; (9d0 <main+0x164>)
     916:	681b      	ldr	r3, [r3, #0]
     918:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     91c:	6013      	str	r3, [r2, #0]
     91e:	4b29      	ldr	r3, [pc, #164]	; (9c4 <main+0x158>)
     920:	2200      	movs	r2, #0
     922:	601a      	str	r2, [r3, #0]
     924:	687b      	ldr	r3, [r7, #4]
     926:	4618      	mov	r0, r3
     928:	f001 f948 	bl	1bbc <am_hal_interrupt_master_set>

    //
    // Turn the LEDs off.
    //
    am_devices_led_off(am_bsp_psLEDs, 0);
     92c:	2100      	movs	r1, #0
     92e:	4824      	ldr	r0, [pc, #144]	; (9c0 <main+0x154>)
     930:	f7ff fdb2 	bl	498 <am_devices_led_off>
    am_devices_led_off(am_bsp_psLEDs, 1);
     934:	2101      	movs	r1, #1
     936:	4822      	ldr	r0, [pc, #136]	; (9c0 <main+0x154>)
     938:	f7ff fdae 	bl	498 <am_devices_led_off>

    //
    // Configure the GPIO/button interrupt polarity.
    //
    am_hal_gpio_int_polarity_bit_set(AM_BSP_GPIO_BUTTON0, AM_HAL_GPIO_RISING);
     93c:	f001 f93a 	bl	1bb4 <am_hal_interrupt_master_disable>
     940:	4603      	mov	r3, r0
     942:	603b      	str	r3, [r7, #0]
     944:	4b1f      	ldr	r3, [pc, #124]	; (9c4 <main+0x158>)
     946:	2273      	movs	r2, #115	; 0x73
     948:	601a      	str	r2, [r3, #0]
     94a:	4a1f      	ldr	r2, [pc, #124]	; (9c8 <main+0x15c>)
     94c:	4b1e      	ldr	r3, [pc, #120]	; (9c8 <main+0x15c>)
     94e:	681b      	ldr	r3, [r3, #0]
     950:	f023 0308 	bic.w	r3, r3, #8
     954:	6013      	str	r3, [r2, #0]
     956:	4b1b      	ldr	r3, [pc, #108]	; (9c4 <main+0x158>)
     958:	2200      	movs	r2, #0
     95a:	601a      	str	r2, [r3, #0]
     95c:	683b      	ldr	r3, [r7, #0]
     95e:	4618      	mov	r0, r3
     960:	f001 f92c 	bl	1bbc <am_hal_interrupt_master_set>

    //
    // Clear the GPIO Interrupt (write to clear).
    //
    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
     964:	f44f 3080 	mov.w	r0, #65536	; 0x10000
     968:	f04f 0100 	mov.w	r1, #0
     96c:	f001 f8e2 	bl	1b34 <am_hal_gpio_int_clear>

    //
    // Enable the GPIO/button interrupt.
    //
    am_hal_gpio_int_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
     970:	f44f 3080 	mov.w	r0, #65536	; 0x10000
     974:	f04f 0100 	mov.w	r1, #0
     978:	f001 f8cc 	bl	1b14 <am_hal_gpio_int_enable>

    //
    // Set the alarm repeat interval to be every second.
    //
    am_hal_rtc_alarm_interval_set(AM_HAL_RTC_ALM_RPT_SEC);
     97c:	2007      	movs	r0, #7
     97e:	f001 fb59 	bl	2034 <am_hal_rtc_alarm_interval_set>

    //
    // Clear the RTC alarm interrupt.
    //
    am_hal_rtc_int_clear(AM_HAL_RTC_INT_ALM);
     982:	2008      	movs	r0, #8
     984:	f001 fb50 	bl	2028 <am_hal_rtc_int_clear>

    //
    // Enable the RTC alarm interrupt.
    //
    am_hal_rtc_int_enable(AM_HAL_RTC_INT_ALM);
     988:	2008      	movs	r0, #8
     98a:	f001 fb45 	bl	2018 <am_hal_rtc_int_enable>

    //
    // Enable GPIO interrupts to the NVIC.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_GPIO);
     98e:	201c      	movs	r0, #28
     990:	f001 f8e4 	bl	1b5c <am_hal_interrupt_enable>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_CLKGEN);
     994:	2012      	movs	r0, #18
     996:	f001 f8e1 	bl	1b5c <am_hal_interrupt_enable>

    //
    // Enable interrupts to the core.
    //
    am_hal_interrupt_master_enable();
     99a:	f001 f907 	bl	1bac <am_hal_interrupt_master_enable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     99e:	2001      	movs	r0, #1
     9a0:	f001 fb70 	bl	2084 <am_hal_sysctrl_sleep>
     9a4:	e7fb      	b.n	99e <main+0x132>
     9a6:	bf00      	nop
     9a8:	00002490 	.word	0x00002490
     9ac:	000018f9 	.word	0x000018f9
     9b0:	00002464 	.word	0x00002464
     9b4:	40021010 	.word	0x40021010
     9b8:	40021014 	.word	0x40021014
     9bc:	4002100c 	.word	0x4002100c
     9c0:	10001014 	.word	0x10001014
     9c4:	40010060 	.word	0x40010060
     9c8:	40010048 	.word	0x40010048
     9cc:	40010010 	.word	0x40010010
     9d0:	400100f0 	.word	0x400100f0

000009d4 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     9d4:	4811      	ldr	r0, [pc, #68]	; (a1c <zero_loop+0x12>)
     9d6:	4912      	ldr	r1, [pc, #72]	; (a20 <zero_loop+0x16>)
     9d8:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     9da:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     9de:	4811      	ldr	r0, [pc, #68]	; (a24 <zero_loop+0x1a>)
     9e0:	6801      	ldr	r1, [r0, #0]
     9e2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     9e6:	6001      	str	r1, [r0, #0]
     9e8:	f3bf 8f4f 	dsb	sy
     9ec:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     9f0:	480d      	ldr	r0, [pc, #52]	; (a28 <zero_loop+0x1e>)
     9f2:	490e      	ldr	r1, [pc, #56]	; (a2c <zero_loop+0x22>)
     9f4:	4a0e      	ldr	r2, [pc, #56]	; (a30 <zero_loop+0x26>)

000009f6 <copy_loop>:
     9f6:	f850 3b04 	ldr.w	r3, [r0], #4
     9fa:	f841 3b04 	str.w	r3, [r1], #4
     9fe:	4291      	cmp	r1, r2
     a00:	dbf9      	blt.n	9f6 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     a02:	480c      	ldr	r0, [pc, #48]	; (a34 <zero_loop+0x2a>)
     a04:	490c      	ldr	r1, [pc, #48]	; (a38 <zero_loop+0x2e>)
     a06:	f04f 0200 	mov.w	r2, #0

00000a0a <zero_loop>:
     a0a:	4288      	cmp	r0, r1
     a0c:	bfb8      	it	lt
     a0e:	f840 2b04 	strlt.w	r2, [r0], #4
     a12:	dbfa      	blt.n	a0a <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     a14:	f7ff ff2a 	bl	86c <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     a18:	be00      	bkpt	0x0000
}
     a1a:	bf00      	nop
     a1c:	e000ed08 	.word	0xe000ed08
     a20:	00000000 	.word	0x00000000
     a24:	e000ed88 	.word	0xe000ed88
     a28:	000025b4 	.word	0x000025b4
     a2c:	10001000 	.word	0x10001000
     a30:	1000103c 	.word	0x1000103c
     a34:	1000103c 	.word	0x1000103c
     a38:	1000114c 	.word	0x1000114c

00000a3c <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     a3c:	b480      	push	{r7}
     a3e:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     a40:	e7fe      	b.n	a40 <am_nmi_isr+0x4>

00000a42 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     a42:	b480      	push	{r7}
     a44:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     a46:	e7fe      	b.n	a46 <am_adc_isr+0x4>

00000a48 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
     a48:	b580      	push	{r7, lr}
     a4a:	b084      	sub	sp, #16
     a4c:	af00      	add	r7, sp, #0
     a4e:	6078      	str	r0, [r7, #4]
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
     a50:	f001 f804 	bl	1a5c <am_hal_clkgen_sysclk_get>
     a54:	60f8      	str	r0, [r7, #12]
#endif
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
     a56:	68fb      	ldr	r3, [r7, #12]
     a58:	4a07      	ldr	r2, [pc, #28]	; (a78 <am_util_delay_ms+0x30>)
     a5a:	fba2 2303 	umull	r2, r3, r2, r3
     a5e:	099b      	lsrs	r3, r3, #6
     a60:	687a      	ldr	r2, [r7, #4]
     a62:	fb02 f303 	mul.w	r3, r2, r3
     a66:	60bb      	str	r3, [r7, #8]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
     a68:	68b8      	ldr	r0, [r7, #8]
     a6a:	f001 f841 	bl	1af0 <am_hal_flash_delay>
}
     a6e:	bf00      	nop
     a70:	3710      	adds	r7, #16
     a72:	46bd      	mov	sp, r7
     a74:	bd80      	pop	{r7, pc}
     a76:	bf00      	nop
     a78:	057619f1 	.word	0x057619f1

00000a7c <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     a7c:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     a7e:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     a80:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     a82:	f000 f809 	bl	a98 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     a86:	bd01      	pop	{r0, pc}
}
     a88:	bf00      	nop
     a8a:	4618      	mov	r0, r3

00000a8c <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     a8c:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     a8e:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     a90:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     a92:	4770      	bx	lr
}
     a94:	bf00      	nop
     a96:	4618      	mov	r0, r3

00000a98 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     a98:	b580      	push	{r7, lr}
     a9a:	b096      	sub	sp, #88	; 0x58
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     aa0:	f107 030c 	add.w	r3, r7, #12
     aa4:	2200      	movs	r2, #0
     aa6:	601a      	str	r2, [r3, #0]
     aa8:	605a      	str	r2, [r3, #4]
     aaa:	609a      	str	r2, [r3, #8]
     aac:	60da      	str	r2, [r3, #12]
     aae:	611a      	str	r2, [r3, #16]
     ab0:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
     ab2:	2300      	movs	r3, #0
     ab4:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     aba:	4b2e      	ldr	r3, [pc, #184]	; (b74 <am_util_faultisr_collect_data+0xdc>)
     abc:	681b      	ldr	r3, [r3, #0]
     abe:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     ac2:	b2db      	uxtb	r3, r3
     ac4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     aca:	0a1b      	lsrs	r3, r3, #8
     acc:	b2db      	uxtb	r3, r3
     ace:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     ad4:	0c1b      	lsrs	r3, r3, #16
     ad6:	b29b      	uxth	r3, r3
     ad8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     adc:	4b26      	ldr	r3, [pc, #152]	; (b78 <am_util_faultisr_collect_data+0xe0>)
     ade:	681b      	ldr	r3, [r3, #0]
     ae0:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     ae2:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     ae6:	b2db      	uxtb	r3, r3
     ae8:	f003 0302 	and.w	r3, r3, #2
     aec:	2b00      	cmp	r3, #0
     aee:	d005      	beq.n	afc <am_util_faultisr_collect_data+0x64>
     af0:	6879      	ldr	r1, [r7, #4]
     af2:	2006      	movs	r0, #6
     af4:	f7ff ffca 	bl	a8c <getStackedReg>
     af8:	4603      	mov	r3, r0
     afa:	e001      	b.n	b00 <am_util_faultisr_collect_data+0x68>
     afc:	f04f 33ff 	mov.w	r3, #4294967295
     b00:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     b02:	6879      	ldr	r1, [r7, #4]
     b04:	2000      	movs	r0, #0
     b06:	f7ff ffc1 	bl	a8c <getStackedReg>
     b0a:	4603      	mov	r3, r0
     b0c:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     b0e:	6879      	ldr	r1, [r7, #4]
     b10:	2001      	movs	r0, #1
     b12:	f7ff ffbb 	bl	a8c <getStackedReg>
     b16:	4603      	mov	r3, r0
     b18:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     b1a:	6879      	ldr	r1, [r7, #4]
     b1c:	2002      	movs	r0, #2
     b1e:	f7ff ffb5 	bl	a8c <getStackedReg>
     b22:	4603      	mov	r3, r0
     b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     b26:	6879      	ldr	r1, [r7, #4]
     b28:	2003      	movs	r0, #3
     b2a:	f7ff ffaf 	bl	a8c <getStackedReg>
     b2e:	4603      	mov	r3, r0
     b30:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     b32:	6879      	ldr	r1, [r7, #4]
     b34:	2004      	movs	r0, #4
     b36:	f7ff ffa9 	bl	a8c <getStackedReg>
     b3a:	4603      	mov	r3, r0
     b3c:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     b3e:	6879      	ldr	r1, [r7, #4]
     b40:	2005      	movs	r0, #5
     b42:	f7ff ffa3 	bl	a8c <getStackedReg>
     b46:	4603      	mov	r3, r0
     b48:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     b4a:	6879      	ldr	r1, [r7, #4]
     b4c:	2006      	movs	r0, #6
     b4e:	f7ff ff9d 	bl	a8c <getStackedReg>
     b52:	4603      	mov	r3, r0
     b54:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     b56:	6879      	ldr	r1, [r7, #4]
     b58:	2007      	movs	r0, #7
     b5a:	f7ff ff97 	bl	a8c <getStackedReg>
     b5e:	4603      	mov	r3, r0
     b60:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     b62:	f107 030c 	add.w	r3, r7, #12
     b66:	4618      	mov	r0, r3
     b68:	f001 f82c 	bl	1bc4 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     b6c:	2300      	movs	r3, #0
     b6e:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
     b70:	e7fe      	b.n	b70 <am_util_faultisr_collect_data+0xd8>
     b72:	bf00      	nop
     b74:	e000ed28 	.word	0xe000ed28
     b78:	e000ed38 	.word	0xe000ed38

00000b7c <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     b7c:	b480      	push	{r7}
     b7e:	b083      	sub	sp, #12
     b80:	af00      	add	r7, sp, #0
     b82:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     b84:	4a04      	ldr	r2, [pc, #16]	; (b98 <am_util_stdio_printf_init+0x1c>)
     b86:	687b      	ldr	r3, [r7, #4]
     b88:	6013      	str	r3, [r2, #0]
}
     b8a:	bf00      	nop
     b8c:	370c      	adds	r7, #12
     b8e:	46bd      	mov	sp, r7
     b90:	f85d 7b04 	ldr.w	r7, [sp], #4
     b94:	4770      	bx	lr
     b96:	bf00      	nop
     b98:	10001148 	.word	0x10001148

00000b9c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     b9c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     ba0:	b096      	sub	sp, #88	; 0x58
     ba2:	af00      	add	r7, sp, #0
     ba4:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     ba8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     bac:	0025      	movs	r5, r4
     bae:	2600      	movs	r6, #0
     bb0:	ea55 0306 	orrs.w	r3, r5, r6
     bb4:	f000 80a0 	beq.w	cf8 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     bb8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     bbc:	0862      	lsrs	r2, r4, #1
     bbe:	ea4f 0133 	mov.w	r1, r3, rrx
     bc2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     bc6:	ea4f 0893 	mov.w	r8, r3, lsr #2
     bca:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     bce:	ea4f 0994 	mov.w	r9, r4, lsr #2
     bd2:	eb11 0308 	adds.w	r3, r1, r8
     bd6:	eb42 0409 	adc.w	r4, r2, r9
     bda:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     bde:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     be2:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     be6:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     bea:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     bee:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     bf2:	eb13 030a 	adds.w	r3, r3, sl
     bf6:	eb44 040b 	adc.w	r4, r4, fp
     bfa:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     bfe:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     c02:	0a1a      	lsrs	r2, r3, #8
     c04:	62ba      	str	r2, [r7, #40]	; 0x28
     c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
     c08:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     c0c:	62ba      	str	r2, [r7, #40]	; 0x28
     c0e:	0a23      	lsrs	r3, r4, #8
     c10:	62fb      	str	r3, [r7, #44]	; 0x2c
     c12:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     c16:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     c1a:	18c9      	adds	r1, r1, r3
     c1c:	eb42 0204 	adc.w	r2, r2, r4
     c20:	460b      	mov	r3, r1
     c22:	4614      	mov	r4, r2
     c24:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     c28:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     c2c:	0c1a      	lsrs	r2, r3, #16
     c2e:	623a      	str	r2, [r7, #32]
     c30:	6a3a      	ldr	r2, [r7, #32]
     c32:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     c36:	623a      	str	r2, [r7, #32]
     c38:	0c23      	lsrs	r3, r4, #16
     c3a:	627b      	str	r3, [r7, #36]	; 0x24
     c3c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     c40:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     c44:	18c9      	adds	r1, r1, r3
     c46:	eb42 0204 	adc.w	r2, r2, r4
     c4a:	460b      	mov	r3, r1
     c4c:	4614      	mov	r4, r2
     c4e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     c52:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     c56:	0023      	movs	r3, r4
     c58:	603b      	str	r3, [r7, #0]
     c5a:	2300      	movs	r3, #0
     c5c:	607b      	str	r3, [r7, #4]
     c5e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     c62:	e897 0006 	ldmia.w	r7, {r1, r2}
     c66:	18c9      	adds	r1, r1, r3
     c68:	eb42 0204 	adc.w	r2, r2, r4
     c6c:	460b      	mov	r3, r1
     c6e:	4614      	mov	r4, r2
     c70:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     c74:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     c78:	08da      	lsrs	r2, r3, #3
     c7a:	613a      	str	r2, [r7, #16]
     c7c:	693a      	ldr	r2, [r7, #16]
     c7e:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     c82:	613a      	str	r2, [r7, #16]
     c84:	08e3      	lsrs	r3, r4, #3
     c86:	617b      	str	r3, [r7, #20]
     c88:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     c8c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     c90:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
     c94:	460b      	mov	r3, r1
     c96:	4614      	mov	r4, r2
     c98:	00a0      	lsls	r0, r4, #2
     c9a:	60f8      	str	r0, [r7, #12]
     c9c:	68f8      	ldr	r0, [r7, #12]
     c9e:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
     ca2:	60f8      	str	r0, [r7, #12]
     ca4:	009b      	lsls	r3, r3, #2
     ca6:	60bb      	str	r3, [r7, #8]
     ca8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     cac:	185b      	adds	r3, r3, r1
     cae:	eb44 0402 	adc.w	r4, r4, r2
     cb2:	18db      	adds	r3, r3, r3
     cb4:	eb44 0404 	adc.w	r4, r4, r4
     cb8:	4619      	mov	r1, r3
     cba:	4622      	mov	r2, r4
     cbc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     cc0:	1a5b      	subs	r3, r3, r1
     cc2:	eb64 0402 	sbc.w	r4, r4, r2
     cc6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     cca:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     cce:	3306      	adds	r3, #6
     cd0:	f144 0400 	adc.w	r4, r4, #0
     cd4:	091a      	lsrs	r2, r3, #4
     cd6:	61ba      	str	r2, [r7, #24]
     cd8:	69ba      	ldr	r2, [r7, #24]
     cda:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     cde:	61ba      	str	r2, [r7, #24]
     ce0:	0923      	lsrs	r3, r4, #4
     ce2:	61fb      	str	r3, [r7, #28]
     ce4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     ce8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     cec:	18c9      	adds	r1, r1, r3
     cee:	eb42 0204 	adc.w	r2, r2, r4
     cf2:	460b      	mov	r3, r1
     cf4:	4614      	mov	r4, r2
     cf6:	e029      	b.n	d4c <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     cfa:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     cfe:	085a      	lsrs	r2, r3, #1
     d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     d02:	089b      	lsrs	r3, r3, #2
     d04:	4413      	add	r3, r2
     d06:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     d0a:	091b      	lsrs	r3, r3, #4
     d0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     d0e:	4413      	add	r3, r2
     d10:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     d14:	0a1b      	lsrs	r3, r3, #8
     d16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     d18:	4413      	add	r3, r2
     d1a:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     d1e:	0c1b      	lsrs	r3, r3, #16
     d20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     d22:	4413      	add	r3, r2
     d24:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     d28:	08db      	lsrs	r3, r3, #3
     d2a:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     d2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     d2e:	4613      	mov	r3, r2
     d30:	009b      	lsls	r3, r3, #2
     d32:	4413      	add	r3, r2
     d34:	005b      	lsls	r3, r3, #1
     d36:	461a      	mov	r2, r3
     d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     d3a:	1a9b      	subs	r3, r3, r2
     d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d40:	3306      	adds	r3, #6
     d42:	091a      	lsrs	r2, r3, #4
     d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     d46:	4413      	add	r3, r2
     d48:	f04f 0400 	mov.w	r4, #0
    }
}
     d4c:	4618      	mov	r0, r3
     d4e:	4621      	mov	r1, r4
     d50:	3758      	adds	r7, #88	; 0x58
     d52:	46bd      	mov	sp, r7
     d54:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     d58:	4770      	bx	lr

00000d5a <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     d5a:	b590      	push	{r4, r7, lr}
     d5c:	b085      	sub	sp, #20
     d5e:	af00      	add	r7, sp, #0
     d60:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     d64:	683a      	ldr	r2, [r7, #0]
     d66:	687b      	ldr	r3, [r7, #4]
     d68:	4313      	orrs	r3, r2
     d6a:	2b00      	cmp	r3, #0
     d6c:	bf0c      	ite	eq
     d6e:	2301      	moveq	r3, #1
     d70:	2300      	movne	r3, #0
     d72:	b2db      	uxtb	r3, r3
     d74:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     d76:	e008      	b.n	d8a <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     d78:	e9d7 0100 	ldrd	r0, r1, [r7]
     d7c:	f7ff ff0e 	bl	b9c <divu64_10>
     d80:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     d84:	68fb      	ldr	r3, [r7, #12]
     d86:	3301      	adds	r3, #1
     d88:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
     d8a:	e897 0018 	ldmia.w	r7, {r3, r4}
     d8e:	4323      	orrs	r3, r4
     d90:	d1f2      	bne.n	d78 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
     d92:	68fb      	ldr	r3, [r7, #12]
}
     d94:	4618      	mov	r0, r3
     d96:	3714      	adds	r7, #20
     d98:	46bd      	mov	sp, r7
     d9a:	bd90      	pop	{r4, r7, pc}

00000d9c <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     d9c:	b590      	push	{r4, r7, lr}
     d9e:	b083      	sub	sp, #12
     da0:	af00      	add	r7, sp, #0
     da2:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     da6:	e897 0018 	ldmia.w	r7, {r3, r4}
     daa:	2b00      	cmp	r3, #0
     dac:	f174 0300 	sbcs.w	r3, r4, #0
     db0:	da06      	bge.n	dc0 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     db2:	e897 0018 	ldmia.w	r7, {r3, r4}
     db6:	425b      	negs	r3, r3
     db8:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     dbc:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     dc0:	e897 0018 	ldmia.w	r7, {r3, r4}
     dc4:	4618      	mov	r0, r3
     dc6:	4621      	mov	r1, r4
     dc8:	f7ff ffc7 	bl	d5a <ndigits_in_u64>
     dcc:	4603      	mov	r3, r0
}
     dce:	4618      	mov	r0, r3
     dd0:	370c      	adds	r7, #12
     dd2:	46bd      	mov	sp, r7
     dd4:	bd90      	pop	{r4, r7, pc}

00000dd6 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     dd6:	b490      	push	{r4, r7}
     dd8:	b084      	sub	sp, #16
     dda:	af00      	add	r7, sp, #0
     ddc:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     de0:	6839      	ldr	r1, [r7, #0]
     de2:	687a      	ldr	r2, [r7, #4]
     de4:	430a      	orrs	r2, r1
     de6:	2a00      	cmp	r2, #0
     de8:	bf0c      	ite	eq
     dea:	2201      	moveq	r2, #1
     dec:	2200      	movne	r2, #0
     dee:	b2d2      	uxtb	r2, r2
     df0:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     df2:	e00a      	b.n	e0a <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     df4:	e897 0006 	ldmia.w	r7, {r1, r2}
     df8:	090b      	lsrs	r3, r1, #4
     dfa:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     dfe:	0914      	lsrs	r4, r2, #4
     e00:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     e04:	68fa      	ldr	r2, [r7, #12]
     e06:	3201      	adds	r2, #1
     e08:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
     e0a:	e897 0006 	ldmia.w	r7, {r1, r2}
     e0e:	430a      	orrs	r2, r1
     e10:	d1f0      	bne.n	df4 <ndigits_in_hex+0x1e>
    }

    return iDigits;
     e12:	68fb      	ldr	r3, [r7, #12]
}
     e14:	4618      	mov	r0, r3
     e16:	3710      	adds	r7, #16
     e18:	46bd      	mov	sp, r7
     e1a:	bc90      	pop	{r4, r7}
     e1c:	4770      	bx	lr

00000e1e <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     e1e:	b480      	push	{r7}
     e20:	b087      	sub	sp, #28
     e22:	af00      	add	r7, sp, #0
     e24:	6078      	str	r0, [r7, #4]
     e26:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     e28:	2300      	movs	r3, #0
     e2a:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     e2c:	2300      	movs	r3, #0
     e2e:	613b      	str	r3, [r7, #16]
     e30:	2300      	movs	r3, #0
     e32:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     e34:	687b      	ldr	r3, [r7, #4]
     e36:	781b      	ldrb	r3, [r3, #0]
     e38:	2b2d      	cmp	r3, #45	; 0x2d
     e3a:	d11b      	bne.n	e74 <decstr_to_int+0x56>
    {
        bNeg = true;
     e3c:	2301      	movs	r3, #1
     e3e:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     e40:	687b      	ldr	r3, [r7, #4]
     e42:	3301      	adds	r3, #1
     e44:	607b      	str	r3, [r7, #4]
        uCnt++;
     e46:	68fb      	ldr	r3, [r7, #12]
     e48:	3301      	adds	r3, #1
     e4a:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     e4c:	e012      	b.n	e74 <decstr_to_int+0x56>
    {
        ++uCnt;
     e4e:	68fb      	ldr	r3, [r7, #12]
     e50:	3301      	adds	r3, #1
     e52:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     e54:	693a      	ldr	r2, [r7, #16]
     e56:	4613      	mov	r3, r2
     e58:	009b      	lsls	r3, r3, #2
     e5a:	4413      	add	r3, r2
     e5c:	005b      	lsls	r3, r3, #1
     e5e:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     e60:	687b      	ldr	r3, [r7, #4]
     e62:	781b      	ldrb	r3, [r3, #0]
     e64:	461a      	mov	r2, r3
     e66:	693b      	ldr	r3, [r7, #16]
     e68:	4413      	add	r3, r2
     e6a:	3b30      	subs	r3, #48	; 0x30
     e6c:	613b      	str	r3, [r7, #16]
        pcStr++;
     e6e:	687b      	ldr	r3, [r7, #4]
     e70:	3301      	adds	r3, #1
     e72:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     e74:	687b      	ldr	r3, [r7, #4]
     e76:	781b      	ldrb	r3, [r3, #0]
     e78:	2b2f      	cmp	r3, #47	; 0x2f
     e7a:	d903      	bls.n	e84 <decstr_to_int+0x66>
     e7c:	687b      	ldr	r3, [r7, #4]
     e7e:	781b      	ldrb	r3, [r3, #0]
     e80:	2b39      	cmp	r3, #57	; 0x39
     e82:	d9e4      	bls.n	e4e <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
     e84:	683b      	ldr	r3, [r7, #0]
     e86:	2b00      	cmp	r3, #0
     e88:	d002      	beq.n	e90 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     e8a:	683b      	ldr	r3, [r7, #0]
     e8c:	68fa      	ldr	r2, [r7, #12]
     e8e:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     e90:	7dfb      	ldrb	r3, [r7, #23]
     e92:	2b00      	cmp	r3, #0
     e94:	d002      	beq.n	e9c <decstr_to_int+0x7e>
     e96:	693b      	ldr	r3, [r7, #16]
     e98:	425b      	negs	r3, r3
     e9a:	e000      	b.n	e9e <decstr_to_int+0x80>
     e9c:	693b      	ldr	r3, [r7, #16]
}
     e9e:	4618      	mov	r0, r3
     ea0:	371c      	adds	r7, #28
     ea2:	46bd      	mov	sp, r7
     ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ea8:	4770      	bx	lr

00000eaa <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     eaa:	b590      	push	{r4, r7, lr}
     eac:	b091      	sub	sp, #68	; 0x44
     eae:	af00      	add	r7, sp, #0
     eb0:	e9c7 0102 	strd	r0, r1, [r7, #8]
     eb4:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     eb6:	2300      	movs	r3, #0
     eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
     eba:	2300      	movs	r3, #0
     ebc:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     ebe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     ec2:	f7ff fe6b 	bl	b9c <divu64_10>
     ec6:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     eca:	68b9      	ldr	r1, [r7, #8]
     ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     ece:	4613      	mov	r3, r2
     ed0:	009b      	lsls	r3, r3, #2
     ed2:	4413      	add	r3, r2
     ed4:	005b      	lsls	r3, r3, #1
     ed6:	1acb      	subs	r3, r1, r3
     ed8:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     edc:	1c5a      	adds	r2, r3, #1
     ede:	63fa      	str	r2, [r7, #60]	; 0x3c
     ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     ee2:	b2d2      	uxtb	r2, r2
     ee4:	3230      	adds	r2, #48	; 0x30
     ee6:	b2d2      	uxtb	r2, r2
     ee8:	f107 0140 	add.w	r1, r7, #64	; 0x40
     eec:	440b      	add	r3, r1
     eee:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     ef2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     ef6:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     efa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     efe:	4323      	orrs	r3, r4
     f00:	d1dd      	bne.n	ebe <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f04:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     f06:	687b      	ldr	r3, [r7, #4]
     f08:	2b00      	cmp	r3, #0
     f0a:	d011      	beq.n	f30 <uint64_to_str+0x86>
    {
        while ( ix-- )
     f0c:	e008      	b.n	f20 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     f0e:	687b      	ldr	r3, [r7, #4]
     f10:	1c5a      	adds	r2, r3, #1
     f12:	607a      	str	r2, [r7, #4]
     f14:	f107 0110 	add.w	r1, r7, #16
     f18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f1a:	440a      	add	r2, r1
     f1c:	7812      	ldrb	r2, [r2, #0]
     f1e:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
     f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f22:	1e5a      	subs	r2, r3, #1
     f24:	63fa      	str	r2, [r7, #60]	; 0x3c
     f26:	2b00      	cmp	r3, #0
     f28:	d1f1      	bne.n	f0e <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     f2a:	687b      	ldr	r3, [r7, #4]
     f2c:	2200      	movs	r2, #0
     f2e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     f32:	4618      	mov	r0, r3
     f34:	3744      	adds	r7, #68	; 0x44
     f36:	46bd      	mov	sp, r7
     f38:	bd90      	pop	{r4, r7, pc}

00000f3a <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     f3a:	b4b0      	push	{r4, r5, r7}
     f3c:	b08d      	sub	sp, #52	; 0x34
     f3e:	af00      	add	r7, sp, #0
     f40:	e9c7 0102 	strd	r0, r1, [r7, #8]
     f44:	607a      	str	r2, [r7, #4]
     f46:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     f48:	2300      	movs	r3, #0
     f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     f4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     f50:	4313      	orrs	r3, r2
     f52:	d131      	bne.n	fb8 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f56:	1c5a      	adds	r2, r3, #1
     f58:	62fa      	str	r2, [r7, #44]	; 0x2c
     f5a:	f107 0230 	add.w	r2, r7, #48	; 0x30
     f5e:	4413      	add	r3, r2
     f60:	2230      	movs	r2, #48	; 0x30
     f62:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     f66:	e027      	b.n	fb8 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     f68:	7a3b      	ldrb	r3, [r7, #8]
     f6a:	f003 030f 	and.w	r3, r3, #15
     f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     f72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     f76:	2b09      	cmp	r3, #9
     f78:	d90a      	bls.n	f90 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     f7a:	78fb      	ldrb	r3, [r7, #3]
     f7c:	2b00      	cmp	r3, #0
     f7e:	d001      	beq.n	f84 <uint64_to_hexstr+0x4a>
     f80:	2227      	movs	r2, #39	; 0x27
     f82:	e000      	b.n	f86 <uint64_to_hexstr+0x4c>
     f84:	2207      	movs	r2, #7
     f86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     f8a:	4413      	add	r3, r2
     f8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f92:	1c5a      	adds	r2, r3, #1
     f94:	62fa      	str	r2, [r7, #44]	; 0x2c
     f96:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     f9a:	3230      	adds	r2, #48	; 0x30
     f9c:	b2d2      	uxtb	r2, r2
     f9e:	f107 0130 	add.w	r1, r7, #48	; 0x30
     fa2:	440b      	add	r3, r1
     fa4:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     fa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     fac:	0914      	lsrs	r4, r2, #4
     fae:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     fb2:	091d      	lsrs	r5, r3, #4
     fb4:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
     fb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     fbc:	4313      	orrs	r3, r2
     fbe:	d1d3      	bne.n	f68 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     fc2:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     fc4:	687b      	ldr	r3, [r7, #4]
     fc6:	2b00      	cmp	r3, #0
     fc8:	d011      	beq.n	fee <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     fca:	e008      	b.n	fde <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     fcc:	687b      	ldr	r3, [r7, #4]
     fce:	1c5a      	adds	r2, r3, #1
     fd0:	607a      	str	r2, [r7, #4]
     fd2:	f107 0110 	add.w	r1, r7, #16
     fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     fd8:	440a      	add	r2, r1
     fda:	7812      	ldrb	r2, [r2, #0]
     fdc:	701a      	strb	r2, [r3, #0]
        while (ix--)
     fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     fe0:	1e5a      	subs	r2, r3, #1
     fe2:	62fa      	str	r2, [r7, #44]	; 0x2c
     fe4:	2b00      	cmp	r3, #0
     fe6:	d1f1      	bne.n	fcc <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     fe8:	687b      	ldr	r3, [r7, #4]
     fea:	2200      	movs	r2, #0
     fec:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     ff0:	4618      	mov	r0, r3
     ff2:	3734      	adds	r7, #52	; 0x34
     ff4:	46bd      	mov	sp, r7
     ff6:	bcb0      	pop	{r4, r5, r7}
     ff8:	4770      	bx	lr

00000ffa <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     ffa:	b480      	push	{r7}
     ffc:	b085      	sub	sp, #20
     ffe:	af00      	add	r7, sp, #0
    1000:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    1002:	2300      	movs	r3, #0
    1004:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    1006:	687b      	ldr	r3, [r7, #4]
    1008:	2b00      	cmp	r3, #0
    100a:	d104      	bne.n	1016 <simple_strlen+0x1c>
    {
        return ui32RetVal;
    100c:	68fb      	ldr	r3, [r7, #12]
    100e:	e009      	b.n	1024 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    1010:	68fb      	ldr	r3, [r7, #12]
    1012:	3301      	adds	r3, #1
    1014:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    1016:	687b      	ldr	r3, [r7, #4]
    1018:	1c5a      	adds	r2, r3, #1
    101a:	607a      	str	r2, [r7, #4]
    101c:	781b      	ldrb	r3, [r3, #0]
    101e:	2b00      	cmp	r3, #0
    1020:	d1f6      	bne.n	1010 <simple_strlen+0x16>
    }
    return ui32RetVal;
    1022:	68fb      	ldr	r3, [r7, #12]
}
    1024:	4618      	mov	r0, r3
    1026:	3714      	adds	r7, #20
    1028:	46bd      	mov	sp, r7
    102a:	f85d 7b04 	ldr.w	r7, [sp], #4
    102e:	4770      	bx	lr

00001030 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    1030:	b480      	push	{r7}
    1032:	b087      	sub	sp, #28
    1034:	af00      	add	r7, sp, #0
    1036:	60f8      	str	r0, [r7, #12]
    1038:	460b      	mov	r3, r1
    103a:	607a      	str	r2, [r7, #4]
    103c:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    103e:	2300      	movs	r3, #0
    1040:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    1042:	687b      	ldr	r3, [r7, #4]
    1044:	2b00      	cmp	r3, #0
    1046:	dc0c      	bgt.n	1062 <padbuffer+0x32>
    {
        return i32Cnt;
    1048:	697b      	ldr	r3, [r7, #20]
    104a:	e010      	b.n	106e <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    104c:	68fb      	ldr	r3, [r7, #12]
    104e:	2b00      	cmp	r3, #0
    1050:	d004      	beq.n	105c <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    1052:	68fb      	ldr	r3, [r7, #12]
    1054:	1c5a      	adds	r2, r3, #1
    1056:	60fa      	str	r2, [r7, #12]
    1058:	7afa      	ldrb	r2, [r7, #11]
    105a:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    105c:	697b      	ldr	r3, [r7, #20]
    105e:	3301      	adds	r3, #1
    1060:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    1062:	687b      	ldr	r3, [r7, #4]
    1064:	1e5a      	subs	r2, r3, #1
    1066:	607a      	str	r2, [r7, #4]
    1068:	2b00      	cmp	r3, #0
    106a:	d1ef      	bne.n	104c <padbuffer+0x1c>
    }

    return i32Cnt;
    106c:	697b      	ldr	r3, [r7, #20]
}
    106e:	4618      	mov	r0, r3
    1070:	371c      	adds	r7, #28
    1072:	46bd      	mov	sp, r7
    1074:	f85d 7b04 	ldr.w	r7, [sp], #4
    1078:	4770      	bx	lr
	...

0000107c <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    107c:	b590      	push	{r4, r7, lr}
    107e:	b08f      	sub	sp, #60	; 0x3c
    1080:	af00      	add	r7, sp, #0
    1082:	60f8      	str	r0, [r7, #12]
    1084:	60b9      	str	r1, [r7, #8]
    1086:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    1088:	68bb      	ldr	r3, [r7, #8]
    108a:	681b      	ldr	r3, [r3, #0]
    108c:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1090:	2b03      	cmp	r3, #3
    1092:	dc02      	bgt.n	109a <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    1094:	f06f 0302 	mvn.w	r3, #2
    1098:	e0e7      	b.n	126a <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
    109a:	edd7 7a03 	vldr	s15, [r7, #12]
    109e:	eef5 7a40 	vcmp.f32	s15, #0.0
    10a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10a6:	d104      	bne.n	10b2 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    10a8:	68bb      	ldr	r3, [r7, #8]
    10aa:	4a72      	ldr	r2, [pc, #456]	; (1274 <ftoa+0x1f8>)
    10ac:	601a      	str	r2, [r3, #0]
        return 3;
    10ae:	2303      	movs	r3, #3
    10b0:	e0db      	b.n	126a <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
    10b2:	68bb      	ldr	r3, [r7, #8]
    10b4:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    10b6:	68fb      	ldr	r3, [r7, #12]
    10b8:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    10ba:	693b      	ldr	r3, [r7, #16]
    10bc:	15db      	asrs	r3, r3, #23
    10be:	b2db      	uxtb	r3, r3
    10c0:	3b7f      	subs	r3, #127	; 0x7f
    10c2:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    10c4:	693b      	ldr	r3, [r7, #16]
    10c6:	f3c3 0316 	ubfx	r3, r3, #0, #23
    10ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    10ce:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    10d0:	2300      	movs	r3, #0
    10d2:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    10d4:	2300      	movs	r3, #0
    10d6:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    10d8:	69fb      	ldr	r3, [r7, #28]
    10da:	2b1e      	cmp	r3, #30
    10dc:	dd02      	ble.n	10e4 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    10de:	f06f 0301 	mvn.w	r3, #1
    10e2:	e0c2      	b.n	126a <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
    10e4:	69fb      	ldr	r3, [r7, #28]
    10e6:	f113 0f17 	cmn.w	r3, #23
    10ea:	da02      	bge.n	10f2 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    10ec:	f04f 33ff 	mov.w	r3, #4294967295
    10f0:	e0bb      	b.n	126a <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
    10f2:	69fb      	ldr	r3, [r7, #28]
    10f4:	2b16      	cmp	r3, #22
    10f6:	dd06      	ble.n	1106 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    10f8:	69fb      	ldr	r3, [r7, #28]
    10fa:	3b17      	subs	r3, #23
    10fc:	69ba      	ldr	r2, [r7, #24]
    10fe:	fa02 f303 	lsl.w	r3, r2, r3
    1102:	637b      	str	r3, [r7, #52]	; 0x34
    1104:	e01a      	b.n	113c <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    1106:	69fb      	ldr	r3, [r7, #28]
    1108:	2b00      	cmp	r3, #0
    110a:	db0f      	blt.n	112c <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    110c:	69fb      	ldr	r3, [r7, #28]
    110e:	f1c3 0317 	rsb	r3, r3, #23
    1112:	69ba      	ldr	r2, [r7, #24]
    1114:	fa42 f303 	asr.w	r3, r2, r3
    1118:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    111a:	69fb      	ldr	r3, [r7, #28]
    111c:	3301      	adds	r3, #1
    111e:	69ba      	ldr	r2, [r7, #24]
    1120:	fa02 f303 	lsl.w	r3, r2, r3
    1124:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1128:	633b      	str	r3, [r7, #48]	; 0x30
    112a:	e007      	b.n	113c <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    112c:	69bb      	ldr	r3, [r7, #24]
    112e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    1132:	69fb      	ldr	r3, [r7, #28]
    1134:	43db      	mvns	r3, r3
    1136:	fa42 f303 	asr.w	r3, r2, r3
    113a:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    113c:	693b      	ldr	r3, [r7, #16]
    113e:	2b00      	cmp	r3, #0
    1140:	da04      	bge.n	114c <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    1142:	68bb      	ldr	r3, [r7, #8]
    1144:	1c5a      	adds	r2, r3, #1
    1146:	60ba      	str	r2, [r7, #8]
    1148:	222d      	movs	r2, #45	; 0x2d
    114a:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    114c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    114e:	2b00      	cmp	r3, #0
    1150:	d105      	bne.n	115e <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    1152:	68bb      	ldr	r3, [r7, #8]
    1154:	1c5a      	adds	r2, r3, #1
    1156:	60ba      	str	r2, [r7, #8]
    1158:	2230      	movs	r2, #48	; 0x30
    115a:	701a      	strb	r2, [r3, #0]
    115c:	e021      	b.n	11a2 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    115e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1160:	2b00      	cmp	r3, #0
    1162:	dd08      	ble.n	1176 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    1164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1166:	ea4f 74e3 	mov.w	r4, r3, asr #31
    116a:	68ba      	ldr	r2, [r7, #8]
    116c:	4618      	mov	r0, r3
    116e:	4621      	mov	r1, r4
    1170:	f7ff fe9b 	bl	eaa <uint64_to_str>
    1174:	e011      	b.n	119a <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    1176:	68bb      	ldr	r3, [r7, #8]
    1178:	1c5a      	adds	r2, r3, #1
    117a:	60ba      	str	r2, [r7, #8]
    117c:	222d      	movs	r2, #45	; 0x2d
    117e:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    1180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1182:	425b      	negs	r3, r3
    1184:	ea4f 74e3 	mov.w	r4, r3, asr #31
    1188:	68ba      	ldr	r2, [r7, #8]
    118a:	4618      	mov	r0, r3
    118c:	4621      	mov	r1, r4
    118e:	f7ff fe8c 	bl	eaa <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    1192:	e002      	b.n	119a <ftoa+0x11e>
        {
            pcBuf++;
    1194:	68bb      	ldr	r3, [r7, #8]
    1196:	3301      	adds	r3, #1
    1198:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    119a:	68bb      	ldr	r3, [r7, #8]
    119c:	781b      	ldrb	r3, [r3, #0]
    119e:	2b00      	cmp	r3, #0
    11a0:	d1f8      	bne.n	1194 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    11a2:	68bb      	ldr	r3, [r7, #8]
    11a4:	1c5a      	adds	r2, r3, #1
    11a6:	60ba      	str	r2, [r7, #8]
    11a8:	222e      	movs	r2, #46	; 0x2e
    11aa:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    11ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    11ae:	2b00      	cmp	r3, #0
    11b0:	d105      	bne.n	11be <ftoa+0x142>
    {
        *pcBuf++ = '0';
    11b2:	68bb      	ldr	r3, [r7, #8]
    11b4:	1c5a      	adds	r2, r3, #1
    11b6:	60ba      	str	r2, [r7, #8]
    11b8:	2230      	movs	r2, #48	; 0x30
    11ba:	701a      	strb	r2, [r3, #0]
    11bc:	e04f      	b.n	125e <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    11be:	68ba      	ldr	r2, [r7, #8]
    11c0:	6a3b      	ldr	r3, [r7, #32]
    11c2:	1ad3      	subs	r3, r2, r3
    11c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    11c6:	1ad3      	subs	r3, r2, r3
    11c8:	3b01      	subs	r3, #1
    11ca:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    11cc:	697a      	ldr	r2, [r7, #20]
    11ce:	687b      	ldr	r3, [r7, #4]
    11d0:	4293      	cmp	r3, r2
    11d2:	bfa8      	it	ge
    11d4:	4613      	movge	r3, r2
    11d6:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    11d8:	2300      	movs	r3, #0
    11da:	62bb      	str	r3, [r7, #40]	; 0x28
    11dc:	e015      	b.n	120a <ftoa+0x18e>
        {
            i32FracPart *= 10;
    11de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    11e0:	4613      	mov	r3, r2
    11e2:	009b      	lsls	r3, r3, #2
    11e4:	4413      	add	r3, r2
    11e6:	005b      	lsls	r3, r3, #1
    11e8:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    11ea:	68bb      	ldr	r3, [r7, #8]
    11ec:	1c5a      	adds	r2, r3, #1
    11ee:	60ba      	str	r2, [r7, #8]
    11f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    11f2:	1612      	asrs	r2, r2, #24
    11f4:	b2d2      	uxtb	r2, r2
    11f6:	3230      	adds	r2, #48	; 0x30
    11f8:	b2d2      	uxtb	r2, r2
    11fa:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    11fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    11fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1202:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    1204:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1206:	3301      	adds	r3, #1
    1208:	62bb      	str	r3, [r7, #40]	; 0x28
    120a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    120c:	697b      	ldr	r3, [r7, #20]
    120e:	429a      	cmp	r2, r3
    1210:	dbe5      	blt.n	11de <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    1212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1214:	4613      	mov	r3, r2
    1216:	009b      	lsls	r3, r3, #2
    1218:	4413      	add	r3, r2
    121a:	005b      	lsls	r3, r3, #1
    121c:	161b      	asrs	r3, r3, #24
    121e:	2b04      	cmp	r3, #4
    1220:	dd1d      	ble.n	125e <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    1222:	68bb      	ldr	r3, [r7, #8]
    1224:	3b01      	subs	r3, #1
    1226:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    1228:	e015      	b.n	1256 <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
    122a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    122c:	781b      	ldrb	r3, [r3, #0]
    122e:	2b2e      	cmp	r3, #46	; 0x2e
    1230:	d00e      	beq.n	1250 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
    1232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1234:	781b      	ldrb	r3, [r3, #0]
    1236:	2b39      	cmp	r3, #57	; 0x39
    1238:	d103      	bne.n	1242 <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
    123a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    123c:	2230      	movs	r2, #48	; 0x30
    123e:	701a      	strb	r2, [r3, #0]
    1240:	e006      	b.n	1250 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
    1242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1244:	781b      	ldrb	r3, [r3, #0]
    1246:	3301      	adds	r3, #1
    1248:	b2da      	uxtb	r2, r3
    124a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    124c:	701a      	strb	r2, [r3, #0]
                    break;
    124e:	e006      	b.n	125e <ftoa+0x1e2>
                }
                pcBuftmp--;
    1250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1252:	3b01      	subs	r3, #1
    1254:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    1256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1258:	6a3b      	ldr	r3, [r7, #32]
    125a:	429a      	cmp	r2, r3
    125c:	d2e5      	bcs.n	122a <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    125e:	68bb      	ldr	r3, [r7, #8]
    1260:	2200      	movs	r2, #0
    1262:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    1264:	68ba      	ldr	r2, [r7, #8]
    1266:	6a3b      	ldr	r3, [r7, #32]
    1268:	1ad3      	subs	r3, r2, r3
} // ftoa()
    126a:	4618      	mov	r0, r3
    126c:	373c      	adds	r7, #60	; 0x3c
    126e:	46bd      	mov	sp, r7
    1270:	bd90      	pop	{r4, r7, pc}
    1272:	bf00      	nop
    1274:	00302e30 	.word	0x00302e30

00001278 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    1278:	b590      	push	{r4, r7, lr}
    127a:	b095      	sub	sp, #84	; 0x54
    127c:	af00      	add	r7, sp, #0
    127e:	60f8      	str	r0, [r7, #12]
    1280:	60b9      	str	r1, [r7, #8]
    1282:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    1284:	2300      	movs	r3, #0
    1286:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    1288:	2300      	movs	r3, #0
    128a:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    128c:	e2e3      	b.n	1856 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    128e:	2306      	movs	r3, #6
    1290:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    1292:	68bb      	ldr	r3, [r7, #8]
    1294:	781b      	ldrb	r3, [r3, #0]
    1296:	2b25      	cmp	r3, #37	; 0x25
    1298:	d01f      	beq.n	12da <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    129a:	68fb      	ldr	r3, [r7, #12]
    129c:	2b00      	cmp	r3, #0
    129e:	d015      	beq.n	12cc <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    12a0:	68bb      	ldr	r3, [r7, #8]
    12a2:	781b      	ldrb	r3, [r3, #0]
    12a4:	2b0a      	cmp	r3, #10
    12a6:	d10b      	bne.n	12c0 <am_util_stdio_vsprintf+0x48>
    12a8:	4bb1      	ldr	r3, [pc, #708]	; (1570 <am_util_stdio_vsprintf+0x2f8>)
    12aa:	781b      	ldrb	r3, [r3, #0]
    12ac:	2b00      	cmp	r3, #0
    12ae:	d007      	beq.n	12c0 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    12b0:	68fb      	ldr	r3, [r7, #12]
    12b2:	1c5a      	adds	r2, r3, #1
    12b4:	60fa      	str	r2, [r7, #12]
    12b6:	220d      	movs	r2, #13
    12b8:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    12ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    12bc:	3301      	adds	r3, #1
    12be:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    12c0:	68fb      	ldr	r3, [r7, #12]
    12c2:	1c5a      	adds	r2, r3, #1
    12c4:	60fa      	str	r2, [r7, #12]
    12c6:	68ba      	ldr	r2, [r7, #8]
    12c8:	7812      	ldrb	r2, [r2, #0]
    12ca:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    12cc:	68bb      	ldr	r3, [r7, #8]
    12ce:	3301      	adds	r3, #1
    12d0:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    12d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    12d4:	3301      	adds	r3, #1
    12d6:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    12d8:	e2bd      	b.n	1856 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    12da:	68bb      	ldr	r3, [r7, #8]
    12dc:	3301      	adds	r3, #1
    12de:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    12e0:	2300      	movs	r3, #0
    12e2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    12e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    12ea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    12ee:	2320      	movs	r3, #32
    12f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    12f4:	68bb      	ldr	r3, [r7, #8]
    12f6:	781b      	ldrb	r3, [r3, #0]
    12f8:	2b30      	cmp	r3, #48	; 0x30
    12fa:	d105      	bne.n	1308 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    12fc:	2330      	movs	r3, #48	; 0x30
    12fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    1302:	68bb      	ldr	r3, [r7, #8]
    1304:	3301      	adds	r3, #1
    1306:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    1308:	f107 0310 	add.w	r3, r7, #16
    130c:	4619      	mov	r1, r3
    130e:	68b8      	ldr	r0, [r7, #8]
    1310:	f7ff fd85 	bl	e1e <decstr_to_int>
    1314:	4603      	mov	r3, r0
    1316:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    1318:	693b      	ldr	r3, [r7, #16]
    131a:	68ba      	ldr	r2, [r7, #8]
    131c:	4413      	add	r3, r2
    131e:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    1320:	68bb      	ldr	r3, [r7, #8]
    1322:	781b      	ldrb	r3, [r3, #0]
    1324:	2b73      	cmp	r3, #115	; 0x73
    1326:	d005      	beq.n	1334 <am_util_stdio_vsprintf+0xbc>
    1328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    132a:	2b00      	cmp	r3, #0
    132c:	da02      	bge.n	1334 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    132e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1330:	425b      	negs	r3, r3
    1332:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    1334:	68bb      	ldr	r3, [r7, #8]
    1336:	781b      	ldrb	r3, [r3, #0]
    1338:	2b2e      	cmp	r3, #46	; 0x2e
    133a:	d10e      	bne.n	135a <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    133c:	68bb      	ldr	r3, [r7, #8]
    133e:	3301      	adds	r3, #1
    1340:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    1342:	f107 0310 	add.w	r3, r7, #16
    1346:	4619      	mov	r1, r3
    1348:	68b8      	ldr	r0, [r7, #8]
    134a:	f7ff fd68 	bl	e1e <decstr_to_int>
    134e:	4603      	mov	r3, r0
    1350:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    1352:	693b      	ldr	r3, [r7, #16]
    1354:	68ba      	ldr	r2, [r7, #8]
    1356:	4413      	add	r3, r2
    1358:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    135a:	68bb      	ldr	r3, [r7, #8]
    135c:	781b      	ldrb	r3, [r3, #0]
    135e:	2b6c      	cmp	r3, #108	; 0x6c
    1360:	d10c      	bne.n	137c <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    1362:	68bb      	ldr	r3, [r7, #8]
    1364:	3301      	adds	r3, #1
    1366:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    1368:	68bb      	ldr	r3, [r7, #8]
    136a:	781b      	ldrb	r3, [r3, #0]
    136c:	2b6c      	cmp	r3, #108	; 0x6c
    136e:	d105      	bne.n	137c <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    1370:	68bb      	ldr	r3, [r7, #8]
    1372:	3301      	adds	r3, #1
    1374:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    1376:	2301      	movs	r3, #1
    1378:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    137c:	68bb      	ldr	r3, [r7, #8]
    137e:	781b      	ldrb	r3, [r3, #0]
    1380:	3b46      	subs	r3, #70	; 0x46
    1382:	2b32      	cmp	r3, #50	; 0x32
    1384:	f200 8254 	bhi.w	1830 <am_util_stdio_vsprintf+0x5b8>
    1388:	a201      	add	r2, pc, #4	; (adr r2, 1390 <am_util_stdio_vsprintf+0x118>)
    138a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    138e:	bf00      	nop
    1390:	000017bb 	.word	0x000017bb
    1394:	00001831 	.word	0x00001831
    1398:	00001831 	.word	0x00001831
    139c:	00001831 	.word	0x00001831
    13a0:	00001831 	.word	0x00001831
    13a4:	00001831 	.word	0x00001831
    13a8:	00001831 	.word	0x00001831
    13ac:	00001831 	.word	0x00001831
    13b0:	00001831 	.word	0x00001831
    13b4:	00001831 	.word	0x00001831
    13b8:	00001831 	.word	0x00001831
    13bc:	00001831 	.word	0x00001831
    13c0:	00001831 	.word	0x00001831
    13c4:	00001831 	.word	0x00001831
    13c8:	00001831 	.word	0x00001831
    13cc:	00001831 	.word	0x00001831
    13d0:	00001831 	.word	0x00001831
    13d4:	00001831 	.word	0x00001831
    13d8:	00001557 	.word	0x00001557
    13dc:	00001831 	.word	0x00001831
    13e0:	00001831 	.word	0x00001831
    13e4:	00001831 	.word	0x00001831
    13e8:	00001831 	.word	0x00001831
    13ec:	00001831 	.word	0x00001831
    13f0:	00001831 	.word	0x00001831
    13f4:	00001831 	.word	0x00001831
    13f8:	00001831 	.word	0x00001831
    13fc:	00001831 	.word	0x00001831
    1400:	00001831 	.word	0x00001831
    1404:	0000145d 	.word	0x0000145d
    1408:	00001683 	.word	0x00001683
    140c:	00001831 	.word	0x00001831
    1410:	000017bb 	.word	0x000017bb
    1414:	00001831 	.word	0x00001831
    1418:	00001831 	.word	0x00001831
    141c:	00001683 	.word	0x00001683
    1420:	00001831 	.word	0x00001831
    1424:	00001831 	.word	0x00001831
    1428:	00001831 	.word	0x00001831
    142c:	00001831 	.word	0x00001831
    1430:	00001831 	.word	0x00001831
    1434:	00001831 	.word	0x00001831
    1438:	00001831 	.word	0x00001831
    143c:	00001831 	.word	0x00001831
    1440:	00001831 	.word	0x00001831
    1444:	00001483 	.word	0x00001483
    1448:	00001831 	.word	0x00001831
    144c:	000015f1 	.word	0x000015f1
    1450:	00001831 	.word	0x00001831
    1454:	00001831 	.word	0x00001831
    1458:	00001551 	.word	0x00001551
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    145c:	687b      	ldr	r3, [r7, #4]
    145e:	1d1a      	adds	r2, r3, #4
    1460:	607a      	str	r2, [r7, #4]
    1462:	681b      	ldr	r3, [r3, #0]
    1464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    1468:	68fb      	ldr	r3, [r7, #12]
    146a:	2b00      	cmp	r3, #0
    146c:	d005      	beq.n	147a <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    146e:	68fb      	ldr	r3, [r7, #12]
    1470:	1c5a      	adds	r2, r3, #1
    1472:	60fa      	str	r2, [r7, #12]
    1474:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    1478:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    147a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    147c:	3301      	adds	r3, #1
    147e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1480:	e1e6      	b.n	1850 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    1482:	687b      	ldr	r3, [r7, #4]
    1484:	1d1a      	adds	r2, r3, #4
    1486:	607a      	str	r2, [r7, #4]
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    148c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    148e:	f7ff fdb4 	bl	ffa <simple_strlen>
    1492:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    1494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1496:	2b00      	cmp	r3, #0
    1498:	dd2e      	ble.n	14f8 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    149a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    149c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    149e:	429a      	cmp	r2, r3
    14a0:	d22a      	bcs.n	14f8 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    14a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    14a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    14a6:	1ad3      	subs	r3, r2, r3
    14a8:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    14aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    14ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
    14b0:	4619      	mov	r1, r3
    14b2:	68f8      	ldr	r0, [r7, #12]
    14b4:	f7ff fdbc 	bl	1030 <padbuffer>
    14b8:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    14ba:	68fb      	ldr	r3, [r7, #12]
    14bc:	2b00      	cmp	r3, #0
    14be:	d001      	beq.n	14c4 <am_util_stdio_vsprintf+0x24c>
    14c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14c2:	e000      	b.n	14c6 <am_util_stdio_vsprintf+0x24e>
    14c4:	2300      	movs	r3, #0
    14c6:	68fa      	ldr	r2, [r7, #12]
    14c8:	4413      	add	r3, r2
    14ca:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    14cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    14d0:	4413      	add	r3, r2
    14d2:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    14d4:	2300      	movs	r3, #0
    14d6:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    14d8:	e00e      	b.n	14f8 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    14da:	68fb      	ldr	r3, [r7, #12]
    14dc:	2b00      	cmp	r3, #0
    14de:	d005      	beq.n	14ec <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    14e0:	68fb      	ldr	r3, [r7, #12]
    14e2:	1c5a      	adds	r2, r3, #1
    14e4:	60fa      	str	r2, [r7, #12]
    14e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    14e8:	7812      	ldrb	r2, [r2, #0]
    14ea:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    14ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    14ee:	3301      	adds	r3, #1
    14f0:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    14f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    14f4:	3301      	adds	r3, #1
    14f6:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    14f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    14fa:	781b      	ldrb	r3, [r3, #0]
    14fc:	2b00      	cmp	r3, #0
    14fe:	d1ec      	bne.n	14da <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    1500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1502:	2b00      	cmp	r3, #0
    1504:	f000 81a1 	beq.w	184a <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    1508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    150a:	425b      	negs	r3, r3
    150c:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    150e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1512:	429a      	cmp	r2, r3
    1514:	f080 8199 	bcs.w	184a <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1518:	6bba      	ldr	r2, [r7, #56]	; 0x38
    151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    151c:	1ad3      	subs	r3, r2, r3
    151e:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1520:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1524:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1526:	4619      	mov	r1, r3
    1528:	68f8      	ldr	r0, [r7, #12]
    152a:	f7ff fd81 	bl	1030 <padbuffer>
    152e:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    1530:	68fb      	ldr	r3, [r7, #12]
    1532:	2b00      	cmp	r3, #0
    1534:	d001      	beq.n	153a <am_util_stdio_vsprintf+0x2c2>
    1536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1538:	e000      	b.n	153c <am_util_stdio_vsprintf+0x2c4>
    153a:	2300      	movs	r3, #0
    153c:	68fa      	ldr	r2, [r7, #12]
    153e:	4413      	add	r3, r2
    1540:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    1542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1544:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1546:	4413      	add	r3, r2
    1548:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    154a:	2300      	movs	r3, #0
    154c:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    154e:	e17c      	b.n	184a <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    1550:	2301      	movs	r3, #1
    1552:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1556:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    155a:	2b00      	cmp	r3, #0
    155c:	d00a      	beq.n	1574 <am_util_stdio_vsprintf+0x2fc>
    155e:	687b      	ldr	r3, [r7, #4]
    1560:	3307      	adds	r3, #7
    1562:	f023 0307 	bic.w	r3, r3, #7
    1566:	f103 0208 	add.w	r2, r3, #8
    156a:	607a      	str	r2, [r7, #4]
    156c:	cb18      	ldmia	r3, {r3, r4}
    156e:	e007      	b.n	1580 <am_util_stdio_vsprintf+0x308>
    1570:	1000113c 	.word	0x1000113c
                                      va_arg(pArgs, uint32_t);
    1574:	687b      	ldr	r3, [r7, #4]
    1576:	1d1a      	adds	r2, r3, #4
    1578:	607a      	str	r2, [r7, #4]
    157a:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    157c:	f04f 0400 	mov.w	r4, #0
    1580:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    1584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1586:	2b00      	cmp	r3, #0
    1588:	d01e      	beq.n	15c8 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    158a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    158e:	f7ff fc22 	bl	dd6 <ndigits_in_hex>
    1592:	4602      	mov	r2, r0
    1594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1596:	1a9b      	subs	r3, r3, r2
    1598:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    159a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    159e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    15a0:	4619      	mov	r1, r3
    15a2:	68f8      	ldr	r0, [r7, #12]
    15a4:	f7ff fd44 	bl	1030 <padbuffer>
    15a8:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    15aa:	68fb      	ldr	r3, [r7, #12]
    15ac:	2b00      	cmp	r3, #0
    15ae:	d001      	beq.n	15b4 <am_util_stdio_vsprintf+0x33c>
    15b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    15b2:	e000      	b.n	15b6 <am_util_stdio_vsprintf+0x33e>
    15b4:	2300      	movs	r3, #0
    15b6:	68fa      	ldr	r2, [r7, #12]
    15b8:	4413      	add	r3, r2
    15ba:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    15bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    15be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    15c0:	4413      	add	r3, r2
    15c2:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    15c4:	2300      	movs	r3, #0
    15c6:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    15c8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    15cc:	68fa      	ldr	r2, [r7, #12]
    15ce:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    15d2:	f7ff fcb2 	bl	f3a <uint64_to_hexstr>
    15d6:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    15d8:	68fb      	ldr	r3, [r7, #12]
    15da:	2b00      	cmp	r3, #0
    15dc:	d003      	beq.n	15e6 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    15de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15e0:	68fa      	ldr	r2, [r7, #12]
    15e2:	4413      	add	r3, r2
    15e4:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    15e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    15ea:	4413      	add	r3, r2
    15ec:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    15ee:	e12f      	b.n	1850 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    15f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    15f4:	2b00      	cmp	r3, #0
    15f6:	d008      	beq.n	160a <am_util_stdio_vsprintf+0x392>
    15f8:	687b      	ldr	r3, [r7, #4]
    15fa:	3307      	adds	r3, #7
    15fc:	f023 0307 	bic.w	r3, r3, #7
    1600:	f103 0208 	add.w	r2, r3, #8
    1604:	607a      	str	r2, [r7, #4]
    1606:	cb18      	ldmia	r3, {r3, r4}
    1608:	e005      	b.n	1616 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    160a:	687b      	ldr	r3, [r7, #4]
    160c:	1d1a      	adds	r2, r3, #4
    160e:	607a      	str	r2, [r7, #4]
    1610:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1612:	f04f 0400 	mov.w	r4, #0
    1616:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    161a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    161c:	2b00      	cmp	r3, #0
    161e:	d01e      	beq.n	165e <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    1620:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1624:	f7ff fb99 	bl	d5a <ndigits_in_u64>
    1628:	4602      	mov	r2, r0
    162a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    162c:	1a9b      	subs	r3, r3, r2
    162e:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1630:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1634:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1636:	4619      	mov	r1, r3
    1638:	68f8      	ldr	r0, [r7, #12]
    163a:	f7ff fcf9 	bl	1030 <padbuffer>
    163e:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1640:	68fb      	ldr	r3, [r7, #12]
    1642:	2b00      	cmp	r3, #0
    1644:	d001      	beq.n	164a <am_util_stdio_vsprintf+0x3d2>
    1646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1648:	e000      	b.n	164c <am_util_stdio_vsprintf+0x3d4>
    164a:	2300      	movs	r3, #0
    164c:	68fa      	ldr	r2, [r7, #12]
    164e:	4413      	add	r3, r2
    1650:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1654:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1656:	4413      	add	r3, r2
    1658:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    165a:	2300      	movs	r3, #0
    165c:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    165e:	68fa      	ldr	r2, [r7, #12]
    1660:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1664:	f7ff fc21 	bl	eaa <uint64_to_str>
    1668:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    166a:	68fb      	ldr	r3, [r7, #12]
    166c:	2b00      	cmp	r3, #0
    166e:	d003      	beq.n	1678 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    1670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1672:	68fa      	ldr	r2, [r7, #12]
    1674:	4413      	add	r3, r2
    1676:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    167a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    167c:	4413      	add	r3, r2
    167e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1680:	e0e6      	b.n	1850 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1682:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1686:	2b00      	cmp	r3, #0
    1688:	d008      	beq.n	169c <am_util_stdio_vsprintf+0x424>
    168a:	687b      	ldr	r3, [r7, #4]
    168c:	3307      	adds	r3, #7
    168e:	f023 0307 	bic.w	r3, r3, #7
    1692:	f103 0208 	add.w	r2, r3, #8
    1696:	607a      	str	r2, [r7, #4]
    1698:	cb18      	ldmia	r3, {r3, r4}
    169a:	e005      	b.n	16a8 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    169c:	687b      	ldr	r3, [r7, #4]
    169e:	1d1a      	adds	r2, r3, #4
    16a0:	607a      	str	r2, [r7, #4]
    16a2:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    16a4:	ea4f 74e3 	mov.w	r4, r3, asr #31
    16a8:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    16ac:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    16b0:	2b00      	cmp	r3, #0
    16b2:	f174 0300 	sbcs.w	r3, r4, #0
    16b6:	da0a      	bge.n	16ce <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    16b8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    16bc:	425b      	negs	r3, r3
    16be:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    16c2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    16c6:	2301      	movs	r3, #1
    16c8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    16cc:	e006      	b.n	16dc <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    16ce:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    16d2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    16d6:	2300      	movs	r3, #0
    16d8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    16dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    16de:	2b00      	cmp	r3, #0
    16e0:	d04a      	beq.n	1778 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    16e2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    16e6:	4618      	mov	r0, r3
    16e8:	4621      	mov	r1, r4
    16ea:	f7ff fb57 	bl	d9c <ndigits_in_i64>
    16ee:	4602      	mov	r2, r0
    16f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    16f2:	1a9b      	subs	r3, r3, r2
    16f4:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    16f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    16fa:	2b00      	cmp	r3, #0
    16fc:	d011      	beq.n	1722 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    16fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1700:	3b01      	subs	r3, #1
    1702:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    1704:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1708:	2b30      	cmp	r3, #48	; 0x30
    170a:	d10a      	bne.n	1722 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    170c:	68fb      	ldr	r3, [r7, #12]
    170e:	2b00      	cmp	r3, #0
    1710:	d004      	beq.n	171c <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    1712:	68fb      	ldr	r3, [r7, #12]
    1714:	1c5a      	adds	r2, r3, #1
    1716:	60fa      	str	r2, [r7, #12]
    1718:	222d      	movs	r2, #45	; 0x2d
    171a:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    171c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    171e:	3301      	adds	r3, #1
    1720:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1722:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1726:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1728:	4619      	mov	r1, r3
    172a:	68f8      	ldr	r0, [r7, #12]
    172c:	f7ff fc80 	bl	1030 <padbuffer>
    1730:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1732:	68fb      	ldr	r3, [r7, #12]
    1734:	2b00      	cmp	r3, #0
    1736:	d001      	beq.n	173c <am_util_stdio_vsprintf+0x4c4>
    1738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    173a:	e000      	b.n	173e <am_util_stdio_vsprintf+0x4c6>
    173c:	2300      	movs	r3, #0
    173e:	68fa      	ldr	r2, [r7, #12]
    1740:	4413      	add	r3, r2
    1742:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1746:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1748:	4413      	add	r3, r2
    174a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    174c:	2300      	movs	r3, #0
    174e:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    1750:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1754:	2b00      	cmp	r3, #0
    1756:	d01e      	beq.n	1796 <am_util_stdio_vsprintf+0x51e>
    1758:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    175c:	2b20      	cmp	r3, #32
    175e:	d11a      	bne.n	1796 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    1760:	68fb      	ldr	r3, [r7, #12]
    1762:	2b00      	cmp	r3, #0
    1764:	d004      	beq.n	1770 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    1766:	68fb      	ldr	r3, [r7, #12]
    1768:	1c5a      	adds	r2, r3, #1
    176a:	60fa      	str	r2, [r7, #12]
    176c:	222d      	movs	r2, #45	; 0x2d
    176e:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    1770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1772:	3301      	adds	r3, #1
    1774:	63fb      	str	r3, [r7, #60]	; 0x3c
    1776:	e00e      	b.n	1796 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    1778:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    177c:	2b00      	cmp	r3, #0
    177e:	d00a      	beq.n	1796 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    1780:	68fb      	ldr	r3, [r7, #12]
    1782:	2b00      	cmp	r3, #0
    1784:	d004      	beq.n	1790 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    1786:	68fb      	ldr	r3, [r7, #12]
    1788:	1c5a      	adds	r2, r3, #1
    178a:	60fa      	str	r2, [r7, #12]
    178c:	222d      	movs	r2, #45	; 0x2d
    178e:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    1790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1792:	3301      	adds	r3, #1
    1794:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1796:	68fa      	ldr	r2, [r7, #12]
    1798:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    179c:	f7ff fb85 	bl	eaa <uint64_to_str>
    17a0:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    17a2:	68fb      	ldr	r3, [r7, #12]
    17a4:	2b00      	cmp	r3, #0
    17a6:	d003      	beq.n	17b0 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    17a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    17aa:	68fa      	ldr	r2, [r7, #12]
    17ac:	4413      	add	r3, r2
    17ae:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    17b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    17b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    17b4:	4413      	add	r3, r2
    17b6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    17b8:	e04a      	b.n	1850 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    17ba:	68fb      	ldr	r3, [r7, #12]
    17bc:	2b00      	cmp	r3, #0
    17be:	d046      	beq.n	184e <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    17c0:	687b      	ldr	r3, [r7, #4]
    17c2:	3307      	adds	r3, #7
    17c4:	f023 0307 	bic.w	r3, r3, #7
    17c8:	f103 0208 	add.w	r2, r3, #8
    17cc:	607a      	str	r2, [r7, #4]
    17ce:	cb18      	ldmia	r3, {r3, r4}
    17d0:	4618      	mov	r0, r3
    17d2:	4621      	mov	r1, r4
    17d4:	f7fe fc74 	bl	c0 <__aeabi_d2f>
    17d8:	4603      	mov	r3, r0
    17da:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    17dc:	68fb      	ldr	r3, [r7, #12]
    17de:	2214      	movs	r2, #20
    17e0:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    17e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    17e4:	68f9      	ldr	r1, [r7, #12]
    17e6:	6978      	ldr	r0, [r7, #20]
    17e8:	f7ff fc48 	bl	107c <ftoa>
    17ec:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    17ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    17f0:	2b00      	cmp	r3, #0
    17f2:	da14      	bge.n	181e <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    17f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    17f6:	f1b3 3fff 	cmp.w	r3, #4294967295
    17fa:	d102      	bne.n	1802 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    17fc:	4b1e      	ldr	r3, [pc, #120]	; (1878 <am_util_stdio_vsprintf+0x600>)
    17fe:	62bb      	str	r3, [r7, #40]	; 0x28
    1800:	e008      	b.n	1814 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    1802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1804:	f113 0f02 	cmn.w	r3, #2
    1808:	d102      	bne.n	1810 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    180a:	4b1c      	ldr	r3, [pc, #112]	; (187c <am_util_stdio_vsprintf+0x604>)
    180c:	62bb      	str	r3, [r7, #40]	; 0x28
    180e:	e001      	b.n	1814 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    1810:	4b1b      	ldr	r3, [pc, #108]	; (1880 <am_util_stdio_vsprintf+0x608>)
    1812:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    1814:	68fb      	ldr	r3, [r7, #12]
    1816:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1818:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    181a:	2303      	movs	r3, #3
    181c:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    181e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1820:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1822:	4413      	add	r3, r2
    1824:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    1826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1828:	68fa      	ldr	r2, [r7, #12]
    182a:	4413      	add	r3, r2
    182c:	60fb      	str	r3, [r7, #12]
                }
                break;
    182e:	e00e      	b.n	184e <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    1830:	68fb      	ldr	r3, [r7, #12]
    1832:	2b00      	cmp	r3, #0
    1834:	d005      	beq.n	1842 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    1836:	68fb      	ldr	r3, [r7, #12]
    1838:	1c5a      	adds	r2, r3, #1
    183a:	60fa      	str	r2, [r7, #12]
    183c:	68ba      	ldr	r2, [r7, #8]
    183e:	7812      	ldrb	r2, [r2, #0]
    1840:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    1842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1844:	3301      	adds	r3, #1
    1846:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1848:	e002      	b.n	1850 <am_util_stdio_vsprintf+0x5d8>
                break;
    184a:	bf00      	nop
    184c:	e000      	b.n	1850 <am_util_stdio_vsprintf+0x5d8>
                break;
    184e:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    1850:	68bb      	ldr	r3, [r7, #8]
    1852:	3301      	adds	r3, #1
    1854:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    1856:	68bb      	ldr	r3, [r7, #8]
    1858:	781b      	ldrb	r3, [r3, #0]
    185a:	2b00      	cmp	r3, #0
    185c:	f47f ad17 	bne.w	128e <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    1860:	68fb      	ldr	r3, [r7, #12]
    1862:	2b00      	cmp	r3, #0
    1864:	d002      	beq.n	186c <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    1866:	68fb      	ldr	r3, [r7, #12]
    1868:	2200      	movs	r2, #0
    186a:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    186c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    186e:	4618      	mov	r0, r3
    1870:	3754      	adds	r7, #84	; 0x54
    1872:	46bd      	mov	sp, r7
    1874:	bd90      	pop	{r4, r7, pc}
    1876:	bf00      	nop
    1878:	00302e30 	.word	0x00302e30
    187c:	00232e23 	.word	0x00232e23
    1880:	003f2e3f 	.word	0x003f2e3f

00001884 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    1884:	b40f      	push	{r0, r1, r2, r3}
    1886:	b580      	push	{r7, lr}
    1888:	b082      	sub	sp, #8
    188a:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    188c:	f107 0314 	add.w	r3, r7, #20
    1890:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    1892:	683a      	ldr	r2, [r7, #0]
    1894:	6939      	ldr	r1, [r7, #16]
    1896:	4808      	ldr	r0, [pc, #32]	; (18b8 <am_util_stdio_printf+0x34>)
    1898:	f7ff fcee 	bl	1278 <am_util_stdio_vsprintf>
    189c:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    189e:	4b07      	ldr	r3, [pc, #28]	; (18bc <am_util_stdio_printf+0x38>)
    18a0:	681b      	ldr	r3, [r3, #0]
    18a2:	4805      	ldr	r0, [pc, #20]	; (18b8 <am_util_stdio_printf+0x34>)
    18a4:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    18a6:	687b      	ldr	r3, [r7, #4]
}
    18a8:	4618      	mov	r0, r3
    18aa:	3708      	adds	r7, #8
    18ac:	46bd      	mov	sp, r7
    18ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    18b2:	b004      	add	sp, #16
    18b4:	4770      	bx	lr
    18b6:	bf00      	nop
    18b8:	1000103c 	.word	0x1000103c
    18bc:	10001148 	.word	0x10001148

000018c0 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    18c0:	b580      	push	{r7, lr}
    18c2:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    18c4:	4802      	ldr	r0, [pc, #8]	; (18d0 <am_util_stdio_terminal_clear+0x10>)
    18c6:	f7ff ffdd 	bl	1884 <am_util_stdio_printf>
}
    18ca:	bf00      	nop
    18cc:	bd80      	pop	{r7, pc}
    18ce:	bf00      	nop
    18d0:	0000247c 	.word	0x0000247c

000018d4 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    18d4:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    18d6:	f000 fb03 	bl	1ee0 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    18da:	f000 fb6f 	bl	1fbc <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    18de:	f000 fd35 	bl	234c <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    18e2:	2001      	movs	r0, #1
    18e4:	f000 fb7a 	bl	1fdc <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    18e8:	2001      	movs	r0, #1
    18ea:	f000 f8d1 	bl	1a90 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    18ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    18f2:	f000 bb89 	b.w	2008 <am_hal_rtc_osc_disable>
    18f6:	bf00      	nop

000018f8 <am_bsp_uart_string_print>:
//
//*****************************************************************************
void
am_bsp_uart_string_print(char *pcString)
{
    am_hal_uart_string_transmit_polled(AM_BSP_UART_PRINT_INST, pcString);
    18f8:	4601      	mov	r1, r0
    18fa:	2000      	movs	r0, #0
    18fc:	f000 bd12 	b.w	2324 <am_hal_uart_string_transmit_polled>

00001900 <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    1900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1902:	4605      	mov	r5, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1904:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    1908:	78ab      	ldrb	r3, [r5, #2]
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    190a:	786c      	ldrb	r4, [r5, #1]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    190c:	78ef      	ldrb	r7, [r5, #3]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    190e:	792e      	ldrb	r6, [r5, #4]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    1910:	79a9      	ldrb	r1, [r5, #6]
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    1912:	009a      	lsls	r2, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    1914:	0064      	lsls	r4, r4, #1
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    1916:	f002 0204 	and.w	r2, r2, #4
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    191a:	f004 0402 	and.w	r4, r4, #2
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    191e:	4314      	orrs	r4, r2
    1920:	f047 0701 	orr.w	r7, r7, #1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    1924:	79ea      	ldrb	r2, [r5, #7]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    1926:	01f6      	lsls	r6, r6, #7
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1928:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    192a:	b2f6      	uxtb	r6, r6
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    192c:	7a2f      	ldrb	r7, [r5, #8]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    192e:	0289      	lsls	r1, r1, #10
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1930:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    1932:	f401 6180 	and.w	r1, r1, #1024	; 0x400
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    1936:	7a6e      	ldrb	r6, [r5, #9]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    1938:	02d2      	lsls	r2, r2, #11
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    193a:	430c      	orrs	r4, r1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    193c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    1940:	7aa9      	ldrb	r1, [r5, #10]
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    1942:	033f      	lsls	r7, r7, #12
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1944:	4314      	orrs	r4, r2
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    1946:	b2bf      	uxth	r7, r7
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    1948:	0436      	lsls	r6, r6, #16
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    194a:	7aea      	ldrb	r2, [r5, #11]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    194c:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    194e:	0509      	lsls	r1, r1, #20
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    1950:	f406 2770 	and.w	r7, r6, #983040	; 0xf0000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    1954:	0612      	lsls	r2, r2, #24
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1956:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    1958:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    195c:	009b      	lsls	r3, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    195e:	f002 7780 	and.w	r7, r2, #16777216	; 0x1000000
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1962:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    1964:	f003 0108 	and.w	r1, r3, #8
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1968:	433c      	orrs	r4, r7
    196a:	430c      	orrs	r4, r1
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    196c:	f000 f9b2 	bl	1cd4 <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1970:	482c      	ldr	r0, [pc, #176]	; (1a24 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1972:	4b2d      	ldr	r3, [pc, #180]	; (1a28 <am_hal_cachectrl_enable+0x128>)
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1974:	6004      	str	r4, [r0, #0]
    1976:	2232      	movs	r2, #50	; 0x32
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1978:	681e      	ldr	r6, [r3, #0]
    197a:	0777      	lsls	r7, r6, #29
    197c:	d41e      	bmi.n	19bc <am_hal_cachectrl_enable+0xbc>
    197e:	681f      	ldr	r7, [r3, #0]
    1980:	077e      	lsls	r6, r7, #29
    1982:	f102 32ff 	add.w	r2, r2, #4294967295
    1986:	d419      	bmi.n	19bc <am_hal_cachectrl_enable+0xbc>
    1988:	6819      	ldr	r1, [r3, #0]
    198a:	074f      	lsls	r7, r1, #29
    198c:	d416      	bmi.n	19bc <am_hal_cachectrl_enable+0xbc>
    198e:	6818      	ldr	r0, [r3, #0]
    1990:	0746      	lsls	r6, r0, #29
    1992:	d413      	bmi.n	19bc <am_hal_cachectrl_enable+0xbc>
    1994:	681e      	ldr	r6, [r3, #0]
    1996:	0770      	lsls	r0, r6, #29
    1998:	d410      	bmi.n	19bc <am_hal_cachectrl_enable+0xbc>
    199a:	681f      	ldr	r7, [r3, #0]
    199c:	0779      	lsls	r1, r7, #29
    199e:	d40d      	bmi.n	19bc <am_hal_cachectrl_enable+0xbc>
    19a0:	6819      	ldr	r1, [r3, #0]
    19a2:	074f      	lsls	r7, r1, #29
    19a4:	d40a      	bmi.n	19bc <am_hal_cachectrl_enable+0xbc>
    19a6:	6818      	ldr	r0, [r3, #0]
    19a8:	0746      	lsls	r6, r0, #29
    19aa:	d407      	bmi.n	19bc <am_hal_cachectrl_enable+0xbc>
    19ac:	681e      	ldr	r6, [r3, #0]
    19ae:	0770      	lsls	r0, r6, #29
    19b0:	d404      	bmi.n	19bc <am_hal_cachectrl_enable+0xbc>
    19b2:	681f      	ldr	r7, [r3, #0]
    19b4:	0779      	lsls	r1, r7, #29
    19b6:	d401      	bmi.n	19bc <am_hal_cachectrl_enable+0xbc>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    19b8:	3a09      	subs	r2, #9
    19ba:	d1dd      	bne.n	1978 <am_hal_cachectrl_enable+0x78>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    19bc:	4b1a      	ldr	r3, [pc, #104]	; (1a28 <am_hal_cachectrl_enable+0x128>)
    19be:	681a      	ldr	r2, [r3, #0]
    19c0:	f042 0101 	orr.w	r1, r2, #1
    19c4:	6019      	str	r1, [r3, #0]
    19c6:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    19c8:	6818      	ldr	r0, [r3, #0]
    19ca:	0740      	lsls	r0, r0, #29
    19cc:	d41e      	bmi.n	1a0c <am_hal_cachectrl_enable+0x10c>
    19ce:	681e      	ldr	r6, [r3, #0]
    19d0:	0771      	lsls	r1, r6, #29
    19d2:	f102 32ff 	add.w	r2, r2, #4294967295
    19d6:	d419      	bmi.n	1a0c <am_hal_cachectrl_enable+0x10c>
    19d8:	681f      	ldr	r7, [r3, #0]
    19da:	077f      	lsls	r7, r7, #29
    19dc:	d416      	bmi.n	1a0c <am_hal_cachectrl_enable+0x10c>
    19de:	6819      	ldr	r1, [r3, #0]
    19e0:	074e      	lsls	r6, r1, #29
    19e2:	d413      	bmi.n	1a0c <am_hal_cachectrl_enable+0x10c>
    19e4:	6818      	ldr	r0, [r3, #0]
    19e6:	0740      	lsls	r0, r0, #29
    19e8:	d410      	bmi.n	1a0c <am_hal_cachectrl_enable+0x10c>
    19ea:	681e      	ldr	r6, [r3, #0]
    19ec:	0771      	lsls	r1, r6, #29
    19ee:	d40d      	bmi.n	1a0c <am_hal_cachectrl_enable+0x10c>
    19f0:	681f      	ldr	r7, [r3, #0]
    19f2:	077f      	lsls	r7, r7, #29
    19f4:	d40a      	bmi.n	1a0c <am_hal_cachectrl_enable+0x10c>
    19f6:	6819      	ldr	r1, [r3, #0]
    19f8:	074e      	lsls	r6, r1, #29
    19fa:	d407      	bmi.n	1a0c <am_hal_cachectrl_enable+0x10c>
    19fc:	6818      	ldr	r0, [r3, #0]
    19fe:	0740      	lsls	r0, r0, #29
    1a00:	d404      	bmi.n	1a0c <am_hal_cachectrl_enable+0x10c>
    1a02:	681e      	ldr	r6, [r3, #0]
    1a04:	0771      	lsls	r1, r6, #29
    1a06:	d401      	bmi.n	1a0c <am_hal_cachectrl_enable+0x10c>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    1a08:	3a09      	subs	r2, #9
    1a0a:	d1dd      	bne.n	19c8 <am_hal_cachectrl_enable+0xc8>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1a0c:	796d      	ldrb	r5, [r5, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1a0e:	4f05      	ldr	r7, [pc, #20]	; (1a24 <am_hal_cachectrl_enable+0x124>)
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );
    1a10:	022b      	lsls	r3, r5, #8
    1a12:	f403 7100 	and.w	r1, r3, #512	; 0x200
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1a16:	f403 7280 	and.w	r2, r3, #256	; 0x100
    1a1a:	4311      	orrs	r1, r2
    1a1c:	430c      	orrs	r4, r1
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1a1e:	603c      	str	r4, [r7, #0]
    1a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a22:	bf00      	nop
    1a24:	40018000 	.word	0x40018000
    1a28:	40018008 	.word	0x40018008

00001a2c <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    1a2c:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    1a2e:	4604      	mov	r4, r0
    1a30:	b120      	cbz	r0, 1a3c <am_hal_clkgen_sysclk_select+0x10>
    1a32:	4a06      	ldr	r2, [pc, #24]	; (1a4c <am_hal_clkgen_sysclk_select+0x20>)
    1a34:	4806      	ldr	r0, [pc, #24]	; (1a50 <am_hal_clkgen_sysclk_select+0x24>)
    1a36:	2153      	movs	r1, #83	; 0x53
    1a38:	f000 f858 	bl	1aec <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1a3c:	4b05      	ldr	r3, [pc, #20]	; (1a54 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the required operating value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1a3e:	4906      	ldr	r1, [pc, #24]	; (1a58 <am_hal_clkgen_sysclk_select+0x2c>)
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1a40:	2047      	movs	r0, #71	; 0x47

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    1a42:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1a44:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1a46:	600c      	str	r4, [r1, #0]
    AM_REG(CLKGEN, CLKKEY) = 0;
    1a48:	601a      	str	r2, [r3, #0]
    1a4a:	bd10      	pop	{r4, pc}
    1a4c:	0000249c 	.word	0x0000249c
    1a50:	000024d4 	.word	0x000024d4
    1a54:	40004014 	.word	0x40004014
    1a58:	40004018 	.word	0x40004018

00001a5c <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1a5c:	4b04      	ldr	r3, [pc, #16]	; (1a70 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    1a5e:	4905      	ldr	r1, [pc, #20]	; (1a74 <am_hal_clkgen_sysclk_get+0x18>)
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1a60:	681a      	ldr	r2, [r3, #0]
            return 48000000;
    1a62:	4805      	ldr	r0, [pc, #20]	; (1a78 <am_hal_clkgen_sysclk_get+0x1c>)
    switch ( ui32ClockSetting )
    1a64:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    1a68:	bf08      	it	eq
    1a6a:	4608      	moveq	r0, r1
    1a6c:	4770      	bx	lr
    1a6e:	bf00      	nop
    1a70:	40004018 	.word	0x40004018
    1a74:	02dc6c00 	.word	0x02dc6c00
    1a78:	016e3600 	.word	0x016e3600

00001a7c <am_hal_clkgen_osc_start>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_start(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1a7c:	0783      	lsls	r3, r0, #30
    1a7e:	d004      	beq.n	1a8a <am_hal_clkgen_osc_start+0xe>
    {
        //
        // Start the oscillator(s).
        // Note that these bits are cleared in order to enable the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) &= ~ui32OscFlags;
    1a80:	4a02      	ldr	r2, [pc, #8]	; (1a8c <am_hal_clkgen_osc_start+0x10>)
    1a82:	6813      	ldr	r3, [r2, #0]
    1a84:	ea23 0000 	bic.w	r0, r3, r0
    1a88:	6010      	str	r0, [r2, #0]
    1a8a:	4770      	bx	lr
    1a8c:	4000400c 	.word	0x4000400c

00001a90 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1a90:	0783      	lsls	r3, r0, #30
    1a92:	d003      	beq.n	1a9c <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    1a94:	4b02      	ldr	r3, [pc, #8]	; (1aa0 <am_hal_clkgen_osc_stop+0x10>)
    1a96:	681a      	ldr	r2, [r3, #0]
    1a98:	4310      	orrs	r0, r2
    1a9a:	6018      	str	r0, [r3, #0]
    1a9c:	4770      	bx	lr
    1a9e:	bf00      	nop
    1aa0:	4000400c 	.word	0x4000400c

00001aa4 <am_hal_clkgen_uarten_set>:
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    uint32_t ui32Mask;

    if ( (ui32Module >= AM_REG_UART_NUM_MODULES)        ||
    1aa4:	2801      	cmp	r0, #1
    1aa6:	d900      	bls.n	1aaa <am_hal_clkgen_uarten_set+0x6>
    1aa8:	4770      	bx	lr
    1aaa:	2903      	cmp	r1, #3
    1aac:	d8fc      	bhi.n	1aa8 <am_hal_clkgen_uarten_set+0x4>
{
    1aae:	b530      	push	{r4, r5, lr}
         (ui32UartEn > AM_HAL_CLKGEN_UARTEN_EN_POWER_SAV) )
    {
        return;
    }

    ui32UartEn <<= (ui32Module * AM_HAL_CLKGEN_UARTEN_UARTENn_S(ui32Module));
    1ab0:	fb00 f500 	mul.w	r5, r0, r0
{
    1ab4:	b083      	sub	sp, #12
    1ab6:	4604      	mov	r4, r0
    ui32UartEn <<= (ui32Module * AM_HAL_CLKGEN_UARTEN_UARTENn_S(ui32Module));
    1ab8:	00e8      	lsls	r0, r5, #3
    1aba:	fa01 f500 	lsl.w	r5, r1, r0
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1abe:	f000 f879 	bl	1bb4 <am_hal_interrupt_master_disable>

    //
    // Set the UART clock
    //
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    1ac2:	4b09      	ldr	r3, [pc, #36]	; (1ae8 <am_hal_clkgen_uarten_set+0x44>)
    AM_CRITICAL_BEGIN_ASM
    1ac4:	9001      	str	r0, [sp, #4]
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    1ac6:	681a      	ldr	r2, [r3, #0]
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));
    1ac8:	f04f 0c03 	mov.w	ip, #3
    1acc:	00e1      	lsls	r1, r4, #3
    1ace:	fa0c f401 	lsl.w	r4, ip, r1
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    1ad2:	ea22 0004 	bic.w	r0, r2, r4
    1ad6:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, UARTEN) |= ui32UartEn;
    1ad8:	6819      	ldr	r1, [r3, #0]
    1ada:	430d      	orrs	r5, r1
    1adc:	601d      	str	r5, [r3, #0]

    //
    // Begin critical section.
    //
    AM_CRITICAL_END_ASM
    1ade:	9801      	ldr	r0, [sp, #4]
    1ae0:	f000 f86c 	bl	1bbc <am_hal_interrupt_master_set>
}
    1ae4:	b003      	add	sp, #12
    1ae6:	bd30      	pop	{r4, r5, pc}
    1ae8:	40004034 	.word	0x40004034

00001aec <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    1aec:	e7fe      	b.n	1aec <am_hal_debug_error>
    1aee:	bf00      	nop

00001af0 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1af0:	4b00      	ldr	r3, [pc, #0]	; (1af4 <am_hal_flash_delay+0x4>)
    1af2:	4718      	bx	r3
    1af4:	0800009d 	.word	0x0800009d

00001af8 <am_hal_gpio_out_enable_bit_get>:
{
    //
    // Return 0 or 1.
    //

    return (AM_HAL_GPIO_EN(ui32BitNum) & AM_HAL_GPIO_EN_M(ui32BitNum)) ? 1 : 0;
    1af8:	08c3      	lsrs	r3, r0, #3
    1afa:	f003 0104 	and.w	r1, r3, #4
    1afe:	4a04      	ldr	r2, [pc, #16]	; (1b10 <am_hal_gpio_out_enable_bit_get+0x18>)
    1b00:	588b      	ldr	r3, [r1, r2]
    1b02:	f000 001f 	and.w	r0, r0, #31
    1b06:	fa23 f100 	lsr.w	r1, r3, r0
}
    1b0a:	f001 0001 	and.w	r0, r1, #1
    1b0e:	4770      	bx	lr
    1b10:	400100a0 	.word	0x400100a0

00001b14 <am_hal_gpio_int_enable>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_enable(uint64_t ui64InterruptMask)
{
    1b14:	b410      	push	{r4}
    //
    // Enable the interrupts.
    //
    AM_REG(GPIO, INT1EN) |= (ui64InterruptMask >> 32);
    1b16:	4c05      	ldr	r4, [pc, #20]	; (1b2c <am_hal_gpio_int_enable+0x18>)
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    1b18:	4a05      	ldr	r2, [pc, #20]	; (1b30 <am_hal_gpio_int_enable+0x1c>)
    AM_REG(GPIO, INT1EN) |= (ui64InterruptMask >> 32);
    1b1a:	6823      	ldr	r3, [r4, #0]
    1b1c:	4319      	orrs	r1, r3
    1b1e:	6021      	str	r1, [r4, #0]
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    1b20:	6811      	ldr	r1, [r2, #0]
}
    1b22:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    1b26:	4308      	orrs	r0, r1
    1b28:	6010      	str	r0, [r2, #0]
}
    1b2a:	4770      	bx	lr
    1b2c:	40010210 	.word	0x40010210
    1b30:	40010200 	.word	0x40010200

00001b34 <am_hal_gpio_int_clear>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_clear(uint64_t ui64InterruptMask)
{
    1b34:	b530      	push	{r4, r5, lr}
    1b36:	b083      	sub	sp, #12
    1b38:	460d      	mov	r5, r1
    1b3a:	4604      	mov	r4, r0
    //
    // Clear the interrupts.
    //
    AM_CRITICAL_BEGIN_ASM
    1b3c:	f000 f83a 	bl	1bb4 <am_hal_interrupt_master_disable>
    AM_REG(GPIO, INT1CLR) = (ui64InterruptMask >> 32);
    1b40:	4a04      	ldr	r2, [pc, #16]	; (1b54 <am_hal_gpio_int_clear+0x20>)
    AM_REG(GPIO, INT0CLR) = (ui64InterruptMask & 0xFFFFFFFF);
    1b42:	4b05      	ldr	r3, [pc, #20]	; (1b58 <am_hal_gpio_int_clear+0x24>)
    AM_CRITICAL_BEGIN_ASM
    1b44:	9001      	str	r0, [sp, #4]
    AM_REG(GPIO, INT1CLR) = (ui64InterruptMask >> 32);
    1b46:	6015      	str	r5, [r2, #0]
    AM_REG(GPIO, INT0CLR) = (ui64InterruptMask & 0xFFFFFFFF);
    1b48:	601c      	str	r4, [r3, #0]
    AM_CRITICAL_END_ASM
    1b4a:	9801      	ldr	r0, [sp, #4]
    1b4c:	f000 f836 	bl	1bbc <am_hal_interrupt_master_set>
}
    1b50:	b003      	add	sp, #12
    1b52:	bd30      	pop	{r4, r5, pc}
    1b54:	40010218 	.word	0x40010218
    1b58:	40010208 	.word	0x40010208

00001b5c <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    1b5c:	280f      	cmp	r0, #15
    1b5e:	d80b      	bhi.n	1b78 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    1b60:	2805      	cmp	r0, #5
    1b62:	d013      	beq.n	1b8c <am_hal_interrupt_enable+0x30>
    1b64:	2806      	cmp	r0, #6
    1b66:	d017      	beq.n	1b98 <am_hal_interrupt_enable+0x3c>
    1b68:	2804      	cmp	r0, #4
    1b6a:	d104      	bne.n	1b76 <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    1b6c:	4a0d      	ldr	r2, [pc, #52]	; (1ba4 <am_hal_interrupt_enable+0x48>)
    1b6e:	6813      	ldr	r3, [r2, #0]
    1b70:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    1b74:	6010      	str	r0, [r2, #0]
    1b76:	4770      	bx	lr
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    1b78:	f1a0 0310 	sub.w	r3, r0, #16
    1b7c:	f003 0c1f 	and.w	ip, r3, #31
    1b80:	2001      	movs	r0, #1
    1b82:	4909      	ldr	r1, [pc, #36]	; (1ba8 <am_hal_interrupt_enable+0x4c>)
    1b84:	fa00 f20c 	lsl.w	r2, r0, ip
    1b88:	600a      	str	r2, [r1, #0]
    1b8a:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    1b8c:	4805      	ldr	r0, [pc, #20]	; (1ba4 <am_hal_interrupt_enable+0x48>)
    1b8e:	6801      	ldr	r1, [r0, #0]
    1b90:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    1b94:	6002      	str	r2, [r0, #0]
            break;
    1b96:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    1b98:	4902      	ldr	r1, [pc, #8]	; (1ba4 <am_hal_interrupt_enable+0x48>)
    1b9a:	680a      	ldr	r2, [r1, #0]
    1b9c:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    1ba0:	600b      	str	r3, [r1, #0]
            break;
    1ba2:	4770      	bx	lr
    1ba4:	e000ed24 	.word	0xe000ed24
    1ba8:	e000e100 	.word	0xe000e100

00001bac <am_hal_interrupt_master_enable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1bac:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    1bb0:	b662      	cpsie	i
    __asm("    bx lr");
    1bb2:	4770      	bx	lr

00001bb4 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1bb4:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    1bb8:	b672      	cpsid	i
    __asm("    bx lr");
    1bba:	4770      	bx	lr

00001bbc <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    1bbc:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    1bc0:	4770      	bx	lr
    1bc2:	bf00      	nop

00001bc4 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1bc4:	490d      	ldr	r1, [pc, #52]	; (1bfc <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1bc6:	4b0e      	ldr	r3, [pc, #56]	; (1c00 <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1bc8:	4a0e      	ldr	r2, [pc, #56]	; (1c04 <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1bca:	681b      	ldr	r3, [r3, #0]
{
    1bcc:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1bce:	680d      	ldr	r5, [r1, #0]
    1bd0:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1bd2:	6815      	ldr	r5, [r2, #0]
    1bd4:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1bd6:	4c0c      	ldr	r4, [pc, #48]	; (1c08 <am_hal_mcuctrl_fault_status+0x44>)
    1bd8:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1bda:	4329      	orrs	r1, r5
    1bdc:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1bde:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1be0:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1be4:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1be6:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1be8:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1bec:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1bf0:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1bf2:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1bf4:	6142      	str	r2, [r0, #20]
}
    1bf6:	bc70      	pop	{r4, r5, r6}
    1bf8:	4770      	bx	lr
    1bfa:	bf00      	nop
    1bfc:	400201c4 	.word	0x400201c4
    1c00:	400201cc 	.word	0x400201cc
    1c04:	400201c0 	.word	0x400201c0
    1c08:	400201c8 	.word	0x400201c8

00001c0c <am_hal_pwrctrl_periph_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    1c0c:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1c0e:	4604      	mov	r4, r0
{
    1c10:	b082      	sub	sp, #8
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1c12:	b1b8      	cbz	r0, 1c44 <am_hal_pwrctrl_periph_enable+0x38>
    1c14:	1e43      	subs	r3, r0, #1
    1c16:	4203      	tst	r3, r0
    1c18:	d114      	bne.n	1c44 <am_hal_pwrctrl_periph_enable+0x38>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1c1a:	f7ff ffcb 	bl	1bb4 <am_hal_interrupt_master_disable>

    //
    // Enable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    1c1e:	4a18      	ldr	r2, [pc, #96]	; (1c80 <am_hal_pwrctrl_periph_enable+0x74>)
    AM_CRITICAL_BEGIN_ASM
    1c20:	9001      	str	r0, [sp, #4]
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    1c22:	6810      	ldr	r0, [r2, #0]
    1c24:	4320      	orrs	r0, r4
    1c26:	6010      	str	r0, [r2, #0]

    //
    // End Critical Section.
    //
    AM_CRITICAL_END_ASM
    1c28:	9801      	ldr	r0, [sp, #4]
    1c2a:	f7ff ffc7 	bl	1bbc <am_hal_interrupt_master_set>

    //
    // Wait for the power to stablize.  Using a simple delay loop is more
    // power efficient than a polling loop.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);
    1c2e:	200e      	movs	r0, #14
    1c30:	f7ff ff5e 	bl	1af0 <am_hal_flash_delay>

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    1c34:	f014 0f0e 	tst.w	r4, #14
    1c38:	d10a      	bne.n	1c50 <am_hal_pwrctrl_periph_enable+0x44>
    1c3a:	f014 0f70 	tst.w	r4, #112	; 0x70
    1c3e:	d00e      	beq.n	1c5e <am_hal_pwrctrl_periph_enable+0x52>
    1c40:	2408      	movs	r4, #8
    1c42:	e006      	b.n	1c52 <am_hal_pwrctrl_periph_enable+0x46>
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1c44:	4a0f      	ldr	r2, [pc, #60]	; (1c84 <am_hal_pwrctrl_periph_enable+0x78>)
    1c46:	4810      	ldr	r0, [pc, #64]	; (1c88 <am_hal_pwrctrl_periph_enable+0x7c>)
    1c48:	2160      	movs	r1, #96	; 0x60
    1c4a:	f7ff ff4f 	bl	1aec <am_hal_debug_error>
    1c4e:	e7e4      	b.n	1c1a <am_hal_pwrctrl_periph_enable+0xe>
    POLL_PWRSTATUS(ui32Peripheral);
    1c50:	2404      	movs	r4, #4
    1c52:	4a0e      	ldr	r2, [pc, #56]	; (1c8c <am_hal_pwrctrl_periph_enable+0x80>)
    1c54:	6813      	ldr	r3, [r2, #0]
    1c56:	421c      	tst	r4, r3
    1c58:	d0fc      	beq.n	1c54 <am_hal_pwrctrl_periph_enable+0x48>
}
    1c5a:	b002      	add	sp, #8
    1c5c:	bd10      	pop	{r4, pc}
    POLL_PWRSTATUS(ui32Peripheral);
    1c5e:	f240 1181 	movw	r1, #385	; 0x181
    1c62:	420c      	tst	r4, r1
    1c64:	d108      	bne.n	1c78 <am_hal_pwrctrl_periph_enable+0x6c>
    1c66:	05a3      	lsls	r3, r4, #22
    1c68:	d408      	bmi.n	1c7c <am_hal_pwrctrl_periph_enable+0x70>
    1c6a:	f414 6f80 	tst.w	r4, #1024	; 0x400
    1c6e:	bf14      	ite	ne
    1c70:	2410      	movne	r4, #16
    1c72:	f04f 34ff 	moveq.w	r4, #4294967295
    1c76:	e7ec      	b.n	1c52 <am_hal_pwrctrl_periph_enable+0x46>
    1c78:	2402      	movs	r4, #2
    1c7a:	e7ea      	b.n	1c52 <am_hal_pwrctrl_periph_enable+0x46>
    1c7c:	2480      	movs	r4, #128	; 0x80
    1c7e:	e7e8      	b.n	1c52 <am_hal_pwrctrl_periph_enable+0x46>
    1c80:	40021008 	.word	0x40021008
    1c84:	000024ec 	.word	0x000024ec
    1c88:	00002520 	.word	0x00002520
    1c8c:	40021014 	.word	0x40021014

00001c90 <am_hal_pwrctrl_periph_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_disable(uint32_t ui32Peripheral)
{
    1c90:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1c92:	4604      	mov	r4, r0
{
    1c94:	b082      	sub	sp, #8
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1c96:	b110      	cbz	r0, 1c9e <am_hal_pwrctrl_periph_disable+0xe>
    1c98:	1e43      	subs	r3, r0, #1
    1c9a:	4203      	tst	r3, r0
    1c9c:	d004      	beq.n	1ca8 <am_hal_pwrctrl_periph_disable+0x18>
    1c9e:	4a0a      	ldr	r2, [pc, #40]	; (1cc8 <am_hal_pwrctrl_periph_disable+0x38>)
    1ca0:	480a      	ldr	r0, [pc, #40]	; (1ccc <am_hal_pwrctrl_periph_disable+0x3c>)
    1ca2:	2190      	movs	r1, #144	; 0x90
    1ca4:	f7ff ff22 	bl	1aec <am_hal_debug_error>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1ca8:	f7ff ff84 	bl	1bb4 <am_hal_interrupt_master_disable>

    //
    // Disable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) &= ~ui32Peripheral;
    1cac:	4a08      	ldr	r2, [pc, #32]	; (1cd0 <am_hal_pwrctrl_periph_disable+0x40>)
    AM_CRITICAL_BEGIN_ASM
    1cae:	9001      	str	r0, [sp, #4]
    AM_REG(PWRCTRL, DEVICEEN) &= ~ui32Peripheral;
    1cb0:	6810      	ldr	r0, [r2, #0]
    1cb2:	ea20 0104 	bic.w	r1, r0, r4
    1cb6:	6011      	str	r1, [r2, #0]

    //
    // End critical section.
    //
    AM_CRITICAL_END_ASM
    1cb8:	9801      	ldr	r0, [sp, #4]
    1cba:	f7ff ff7f 	bl	1bbc <am_hal_interrupt_master_set>

    //
    // Wait for the power to stablize
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEDIS_DELAYCYCLES / 3);
    1cbe:	200e      	movs	r0, #14
    1cc0:	f7ff ff16 	bl	1af0 <am_hal_flash_delay>
}
    1cc4:	b002      	add	sp, #8
    1cc6:	bd10      	pop	{r4, pc}
    1cc8:	000024ec 	.word	0x000024ec
    1ccc:	00002520 	.word	0x00002520
    1cd0:	40021008 	.word	0x40021008

00001cd4 <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1cd4:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
{
    1cd8:	b430      	push	{r4, r5}
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1cda:	d03a      	beq.n	1d52 <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    1cdc:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    1ce0:	f000 809d 	beq.w	1e1e <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    1ce4:	2801      	cmp	r0, #1
    1ce6:	f000 809d 	beq.w	1e24 <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    1cea:	2803      	cmp	r0, #3
    1cec:	f000 80a6 	beq.w	1e3c <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    1cf0:	2807      	cmp	r0, #7
    1cf2:	f000 809c 	beq.w	1e2e <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    1cf6:	280f      	cmp	r0, #15
    1cf8:	f000 80a5 	beq.w	1e46 <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    1cfc:	281f      	cmp	r0, #31
    1cfe:	f000 80b0 	beq.w	1e62 <am_hal_pwrctrl_memory_enable+0x18e>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    1d02:	283f      	cmp	r0, #63	; 0x3f
    1d04:	f000 80b4 	beq.w	1e70 <am_hal_pwrctrl_memory_enable+0x19c>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    1d08:	287f      	cmp	r0, #127	; 0x7f
    1d0a:	f000 80b8 	beq.w	1e7e <am_hal_pwrctrl_memory_enable+0x1aa>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    1d0e:	28ff      	cmp	r0, #255	; 0xff
    1d10:	f000 80a0 	beq.w	1e54 <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    1d14:	f240 13ff 	movw	r3, #511	; 0x1ff
    1d18:	4298      	cmp	r0, r3
    1d1a:	f000 80b7 	beq.w	1e8c <am_hal_pwrctrl_memory_enable+0x1b8>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    1d1e:	f240 31ff 	movw	r1, #1023	; 0x3ff
    1d22:	4288      	cmp	r0, r1
    1d24:	f000 80b8 	beq.w	1e98 <am_hal_pwrctrl_memory_enable+0x1c4>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    1d28:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1d2c:	4290      	cmp	r0, r2
    1d2e:	d00e      	beq.n	1d4e <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    1d30:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    1d34:	f000 80b6 	beq.w	1ea4 <am_hal_pwrctrl_memory_enable+0x1d0>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    1d38:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    1d3c:	42a0      	cmp	r0, r4
    1d3e:	f000 80b4 	beq.w	1eaa <am_hal_pwrctrl_memory_enable+0x1d6>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    1d42:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    1d46:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    1d4a:	4560      	cmp	r0, ip
    1d4c:	d132      	bne.n	1db4 <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    1d4e:	495b      	ldr	r1, [pc, #364]	; (1ebc <am_hal_pwrctrl_memory_enable+0x1e8>)
    1d50:	e066      	b.n	1e20 <am_hal_pwrctrl_memory_enable+0x14c>
    1d52:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    1d56:	2340      	movs	r3, #64	; 0x40
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    1d58:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1d5a:	4c59      	ldr	r4, [pc, #356]	; (1ec0 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1d5c:	6825      	ldr	r5, [r4, #0]
    1d5e:	402a      	ands	r2, r5
    1d60:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    1d62:	4a57      	ldr	r2, [pc, #348]	; (1ec0 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1d64:	6814      	ldr	r4, [r2, #0]
    1d66:	4320      	orrs	r0, r4
    1d68:	6010      	str	r0, [r2, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    1d6a:	2b00      	cmp	r3, #0
    1d6c:	d029      	beq.n	1dc2 <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d6e:	4d55      	ldr	r5, [pc, #340]	; (1ec4 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1d70:	6828      	ldr	r0, [r5, #0]
        while ( --i32TOcnt              &&
    1d72:	4218      	tst	r0, r3
    1d74:	bf18      	it	ne
    1d76:	20c6      	movne	r0, #198	; 0xc6
    1d78:	d01f      	beq.n	1dba <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d7a:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1d7c:	421a      	tst	r2, r3
    1d7e:	d01c      	beq.n	1dba <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d80:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1d82:	421c      	tst	r4, r3
    1d84:	d019      	beq.n	1dba <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d86:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1d88:	421a      	tst	r2, r3
    1d8a:	d016      	beq.n	1dba <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d8c:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1d8e:	421c      	tst	r4, r3
    1d90:	d013      	beq.n	1dba <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d92:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1d94:	421a      	tst	r2, r3
    1d96:	d010      	beq.n	1dba <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d98:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1d9a:	421c      	tst	r4, r3
    1d9c:	d00d      	beq.n	1dba <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d9e:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1da0:	421a      	tst	r2, r3
    1da2:	d00a      	beq.n	1dba <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1da4:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1da6:	421c      	tst	r4, r3
    1da8:	d007      	beq.n	1dba <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1daa:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1dac:	421a      	tst	r2, r3
    1dae:	d004      	beq.n	1dba <am_hal_pwrctrl_memory_enable+0xe6>
    1db0:	3809      	subs	r0, #9
    1db2:	d1e2      	bne.n	1d7a <am_hal_pwrctrl_memory_enable+0xa6>
        return false;
    1db4:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    1db6:	bc30      	pop	{r4, r5}
    1db8:	4770      	bx	lr
    if ( ui32PwrStatEnMask )
    1dba:	b911      	cbnz	r1, 1dc2 <am_hal_pwrctrl_memory_enable+0xee>
    return true;
    1dbc:	2001      	movs	r0, #1
}
    1dbe:	bc30      	pop	{r4, r5}
    1dc0:	4770      	bx	lr
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1dc2:	4b40      	ldr	r3, [pc, #256]	; (1ec4 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1dc4:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1dc6:	ea31 0405 	bics.w	r4, r1, r5
    1dca:	bf18      	it	ne
    1dcc:	24c6      	movne	r4, #198	; 0xc6
    1dce:	d0f5      	beq.n	1dbc <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1dd0:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1dd2:	ea31 0000 	bics.w	r0, r1, r0
    1dd6:	d0f1      	beq.n	1dbc <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1dd8:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1dda:	ea31 0002 	bics.w	r0, r1, r2
    1dde:	d0ed      	beq.n	1dbc <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1de0:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1de2:	ea31 0005 	bics.w	r0, r1, r5
    1de6:	d0e9      	beq.n	1dbc <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1de8:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1dea:	ea31 0000 	bics.w	r0, r1, r0
    1dee:	d0e5      	beq.n	1dbc <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1df0:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1df2:	ea31 0002 	bics.w	r0, r1, r2
    1df6:	d0e1      	beq.n	1dbc <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1df8:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1dfa:	ea31 0005 	bics.w	r0, r1, r5
    1dfe:	d0dd      	beq.n	1dbc <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e00:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1e02:	ea31 0000 	bics.w	r0, r1, r0
    1e06:	d0d9      	beq.n	1dbc <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e08:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1e0a:	ea31 0002 	bics.w	r0, r1, r2
    1e0e:	d0d5      	beq.n	1dbc <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e10:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1e12:	ea31 0005 	bics.w	r0, r1, r5
    1e16:	d0d1      	beq.n	1dbc <am_hal_pwrctrl_memory_enable+0xe8>
    1e18:	3c09      	subs	r4, #9
    1e1a:	d1d9      	bne.n	1dd0 <am_hal_pwrctrl_memory_enable+0xfc>
    1e1c:	e7ca      	b.n	1db4 <am_hal_pwrctrl_memory_enable+0xe0>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    1e1e:	2160      	movs	r1, #96	; 0x60
{
    1e20:	2300      	movs	r3, #0
    1e22:	e79e      	b.n	1d62 <am_hal_pwrctrl_memory_enable+0x8e>
    1e24:	4a28      	ldr	r2, [pc, #160]	; (1ec8 <am_hal_pwrctrl_memory_enable+0x1f4>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e26:	4b29      	ldr	r3, [pc, #164]	; (1ecc <am_hal_pwrctrl_memory_enable+0x1f8>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    1e28:	f44f 7180 	mov.w	r1, #256	; 0x100
    1e2c:	e795      	b.n	1d5a <am_hal_pwrctrl_memory_enable+0x86>
    1e2e:	f46f 62ff 	mvn.w	r2, #2040	; 0x7f8
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e32:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    1e36:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    1e3a:	e78e      	b.n	1d5a <am_hal_pwrctrl_memory_enable+0x86>
    1e3c:	4a24      	ldr	r2, [pc, #144]	; (1ed0 <am_hal_pwrctrl_memory_enable+0x1fc>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e3e:	4b25      	ldr	r3, [pc, #148]	; (1ed4 <am_hal_pwrctrl_memory_enable+0x200>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    1e40:	f44f 7140 	mov.w	r1, #768	; 0x300
    1e44:	e789      	b.n	1d5a <am_hal_pwrctrl_memory_enable+0x86>
    1e46:	f46f 62fe 	mvn.w	r2, #2032	; 0x7f0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e4a:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    1e4e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    1e52:	e782      	b.n	1d5a <am_hal_pwrctrl_memory_enable+0x86>
    1e54:	f46f 62e0 	mvn.w	r2, #1792	; 0x700
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e58:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    1e5c:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    1e60:	e77b      	b.n	1d5a <am_hal_pwrctrl_memory_enable+0x86>
    1e62:	f46f 62fc 	mvn.w	r2, #2016	; 0x7e0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e66:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    1e6a:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    1e6e:	e774      	b.n	1d5a <am_hal_pwrctrl_memory_enable+0x86>
    1e70:	f46f 62f8 	mvn.w	r2, #1984	; 0x7c0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e74:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    1e78:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    1e7c:	e76d      	b.n	1d5a <am_hal_pwrctrl_memory_enable+0x86>
    1e7e:	f46f 62f0 	mvn.w	r2, #1920	; 0x780
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e82:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    1e86:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    1e8a:	e766      	b.n	1d5a <am_hal_pwrctrl_memory_enable+0x86>
    1e8c:	f46f 62c0 	mvn.w	r2, #1536	; 0x600
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e90:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    1e94:	4910      	ldr	r1, [pc, #64]	; (1ed8 <am_hal_pwrctrl_memory_enable+0x204>)
    1e96:	e760      	b.n	1d5a <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    1e98:	4910      	ldr	r1, [pc, #64]	; (1edc <am_hal_pwrctrl_memory_enable+0x208>)
    1e9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e9e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1ea2:	e75a      	b.n	1d5a <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1ea4:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1ea8:	e7ba      	b.n	1e20 <am_hal_pwrctrl_memory_enable+0x14c>
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1eaa:	4805      	ldr	r0, [pc, #20]	; (1ec0 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1eac:	6803      	ldr	r3, [r0, #0]
    1eae:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    1eb2:	6001      	str	r1, [r0, #0]
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1eb4:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
        ui32PwrStatEnMask  = 0;
    1eb8:	2100      	movs	r1, #0
    1eba:	e758      	b.n	1d6e <am_hal_pwrctrl_memory_enable+0x9a>
    1ebc:	0007ff00 	.word	0x0007ff00
    1ec0:	40021010 	.word	0x40021010
    1ec4:	40021014 	.word	0x40021014
    1ec8:	fffff801 	.word	0xfffff801
    1ecc:	0007fe00 	.word	0x0007fe00
    1ed0:	fffff803 	.word	0xfffff803
    1ed4:	0007fc00 	.word	0x0007fc00
    1ed8:	0001ff00 	.word	0x0001ff00
    1edc:	0003ff00 	.word	0x0003ff00

00001ee0 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1ee0:	4b0f      	ldr	r3, [pc, #60]	; (1f20 <am_hal_pwrctrl_bucks_init+0x40>)
    1ee2:	681a      	ldr	r2, [r3, #0]
    1ee4:	0792      	lsls	r2, r2, #30
    1ee6:	d502      	bpl.n	1eee <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1ee8:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1eea:	07c3      	lsls	r3, r0, #31
    1eec:	d40e      	bmi.n	1f0c <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1eee:	4b0d      	ldr	r3, [pc, #52]	; (1f24 <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1ef0:	4a0b      	ldr	r2, [pc, #44]	; (1f20 <am_hal_pwrctrl_bucks_init+0x40>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1ef2:	6819      	ldr	r1, [r3, #0]
    1ef4:	f041 0002 	orr.w	r0, r1, #2
    1ef8:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1efa:	6819      	ldr	r1, [r3, #0]
    1efc:	f041 0001 	orr.w	r0, r1, #1
    1f00:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1f02:	6813      	ldr	r3, [r2, #0]
    1f04:	f003 0103 	and.w	r1, r3, #3
    1f08:	2903      	cmp	r1, #3
    1f0a:	d1fa      	bne.n	1f02 <am_hal_pwrctrl_bucks_init+0x22>
    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    1f0c:	4a04      	ldr	r2, [pc, #16]	; (1f20 <am_hal_pwrctrl_bucks_init+0x40>)
    1f0e:	6810      	ldr	r0, [r2, #0]
    1f10:	f000 0303 	and.w	r3, r0, #3
    1f14:	2b03      	cmp	r3, #3
    1f16:	d1fa      	bne.n	1f0e <am_hal_pwrctrl_bucks_init+0x2e>
    am_hal_flash_delay(200 / 3);
    1f18:	2042      	movs	r0, #66	; 0x42
    1f1a:	f7ff bde9 	b.w	1af0 <am_hal_flash_delay>
    1f1e:	bf00      	nop
    1f20:	40021004 	.word	0x40021004
    1f24:	40021000 	.word	0x40021000

00001f28 <am_hal_pwrctrl_bucks_enable>:
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1f28:	4b0b      	ldr	r3, [pc, #44]	; (1f58 <am_hal_pwrctrl_bucks_enable+0x30>)
    1f2a:	681a      	ldr	r2, [r3, #0]
    1f2c:	0792      	lsls	r2, r2, #30
    1f2e:	d502      	bpl.n	1f36 <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1f30:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1f32:	07c3      	lsls	r3, r0, #31
    1f34:	d40e      	bmi.n	1f54 <am_hal_pwrctrl_bucks_enable+0x2c>
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1f36:	4b09      	ldr	r3, [pc, #36]	; (1f5c <am_hal_pwrctrl_bucks_enable+0x34>)
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1f38:	4a07      	ldr	r2, [pc, #28]	; (1f58 <am_hal_pwrctrl_bucks_enable+0x30>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1f3a:	6819      	ldr	r1, [r3, #0]
    1f3c:	f041 0002 	orr.w	r0, r1, #2
    1f40:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1f42:	6819      	ldr	r1, [r3, #0]
    1f44:	f041 0001 	orr.w	r0, r1, #1
    1f48:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1f4a:	6813      	ldr	r3, [r2, #0]
    1f4c:	f003 0103 	and.w	r1, r3, #3
    1f50:	2903      	cmp	r1, #3
    1f52:	d1fa      	bne.n	1f4a <am_hal_pwrctrl_bucks_enable+0x22>
    1f54:	4770      	bx	lr
    1f56:	bf00      	nop
    1f58:	40021004 	.word	0x40021004
    1f5c:	40021000 	.word	0x40021000

00001f60 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1f60:	4b12      	ldr	r3, [pc, #72]	; (1fac <am_hal_pwrctrl_bucks_disable+0x4c>)
    1f62:	681a      	ldr	r2, [r3, #0]
    1f64:	0792      	lsls	r2, r2, #30
    1f66:	d402      	bmi.n	1f6e <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    1f68:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1f6a:	07c3      	lsls	r3, r0, #31
    1f6c:	d51c      	bpl.n	1fa8 <am_hal_pwrctrl_bucks_disable+0x48>
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1f6e:	4910      	ldr	r1, [pc, #64]	; (1fb0 <am_hal_pwrctrl_bucks_disable+0x50>)
    1f70:	680b      	ldr	r3, [r1, #0]
    1f72:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1f76:	2a20      	cmp	r2, #32
    1f78:	d00b      	beq.n	1f92 <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    1f7a:	4b0e      	ldr	r3, [pc, #56]	; (1fb4 <am_hal_pwrctrl_bucks_disable+0x54>)
    1f7c:	681a      	ldr	r2, [r3, #0]
    1f7e:	f022 0002 	bic.w	r0, r2, #2
    1f82:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    1f84:	6819      	ldr	r1, [r3, #0]
    1f86:	f021 0201 	bic.w	r2, r1, #1
    1f8a:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    1f8c:	200a      	movs	r0, #10
    1f8e:	f7ff bdaf 	b.w	1af0 <am_hal_flash_delay>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_PWRADC_EN) )
    1f92:	4809      	ldr	r0, [pc, #36]	; (1fb8 <am_hal_pwrctrl_bucks_disable+0x58>)
    1f94:	6801      	ldr	r1, [r0, #0]
    if ( isRev_ADC()  &&
    1f96:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1f9a:	d1ee      	bne.n	1f7a <am_hal_pwrctrl_bucks_disable+0x1a>
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    1f9c:	4805      	ldr	r0, [pc, #20]	; (1fb4 <am_hal_pwrctrl_bucks_disable+0x54>)
    1f9e:	6803      	ldr	r3, [r0, #0]
    1fa0:	f003 0105 	and.w	r1, r3, #5
    1fa4:	6001      	str	r1, [r0, #0]
    1fa6:	e7f1      	b.n	1f8c <am_hal_pwrctrl_bucks_disable+0x2c>
    1fa8:	4770      	bx	lr
    1faa:	bf00      	nop
    1fac:	40021004 	.word	0x40021004
    1fb0:	4002000c 	.word	0x4002000c
    1fb4:	40021000 	.word	0x40021000
    1fb8:	40021008 	.word	0x40021008

00001fbc <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1fbc:	4905      	ldr	r1, [pc, #20]	; (1fd4 <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1fbe:	4a06      	ldr	r2, [pc, #24]	; (1fd8 <am_hal_pwrctrl_low_power_init+0x1c>)
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1fc0:	680b      	ldr	r3, [r1, #0]
    1fc2:	f043 0006 	orr.w	r0, r3, #6
    1fc6:	6008      	str	r0, [r1, #0]
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1fc8:	6811      	ldr	r1, [r2, #0]
    1fca:	f021 0304 	bic.w	r3, r1, #4
    1fce:	6013      	str	r3, [r2, #0]
    1fd0:	4770      	bx	lr
    1fd2:	bf00      	nop
    1fd4:	40021018 	.word	0x40021018
    1fd8:	40021000 	.word	0x40021000

00001fdc <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1fdc:	4a05      	ldr	r2, [pc, #20]	; (1ff4 <am_hal_rtc_osc_select+0x18>)
    1fde:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    1fe0:	b918      	cbnz	r0, 1fea <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    1fe2:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1fe6:	6010      	str	r0, [r2, #0]
    1fe8:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1fea:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    1fee:	6011      	str	r1, [r2, #0]
    1ff0:	4770      	bx	lr
    1ff2:	bf00      	nop
    1ff4:	4000400c 	.word	0x4000400c

00001ff8 <am_hal_rtc_osc_enable>:
am_hal_rtc_osc_enable(void)
{
    //
    // Start the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) &= ~AM_REG_RTC_RTCCTL_RSTOP(1);
    1ff8:	4a02      	ldr	r2, [pc, #8]	; (2004 <am_hal_rtc_osc_enable+0xc>)
    1ffa:	6813      	ldr	r3, [r2, #0]
    1ffc:	f023 0010 	bic.w	r0, r3, #16
    2000:	6010      	str	r0, [r2, #0]
    2002:	4770      	bx	lr
    2004:	40004050 	.word	0x40004050

00002008 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    2008:	4a02      	ldr	r2, [pc, #8]	; (2014 <am_hal_rtc_osc_disable+0xc>)
    200a:	6813      	ldr	r3, [r2, #0]
    200c:	f043 0010 	orr.w	r0, r3, #16
    2010:	6010      	str	r0, [r2, #0]
    2012:	4770      	bx	lr
    2014:	40004050 	.word	0x40004050

00002018 <am_hal_rtc_int_enable>:
am_hal_rtc_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupts.
    //
    AM_REG(RTC, INTEN) |= ui32Interrupt;
    2018:	4a02      	ldr	r2, [pc, #8]	; (2024 <am_hal_rtc_int_enable+0xc>)
    201a:	6813      	ldr	r3, [r2, #0]
    201c:	4318      	orrs	r0, r3
    201e:	6010      	str	r0, [r2, #0]
    2020:	4770      	bx	lr
    2022:	bf00      	nop
    2024:	40004100 	.word	0x40004100

00002028 <am_hal_rtc_int_clear>:
am_hal_rtc_int_clear(uint32_t ui32Interrupt)
{
    //
    // Clear the interrupts.
    //
    AM_REG(RTC, INTCLR) = ui32Interrupt;
    2028:	4b01      	ldr	r3, [pc, #4]	; (2030 <am_hal_rtc_int_clear+0x8>)
    202a:	6018      	str	r0, [r3, #0]
    202c:	4770      	bx	lr
    202e:	bf00      	nop
    2030:	40004108 	.word	0x40004108

00002034 <am_hal_rtc_alarm_interval_set>:
void
am_hal_rtc_alarm_interval_set(uint32_t ui32RepeatInterval)
{
    uint32_t ui32RptInt, ui32Alm100, ui32Value;

    switch(ui32RepeatInterval)
    2034:	2808      	cmp	r0, #8
{
    2036:	b410      	push	{r4}
    switch(ui32RepeatInterval)
    2038:	d01c      	beq.n	2074 <am_hal_rtc_alarm_interval_set+0x40>
    203a:	2809      	cmp	r0, #9
    203c:	d110      	bne.n	2060 <am_hal_rtc_alarm_interval_set+0x2c>
    203e:	220e      	movs	r2, #14
        //
        // If repeat every 100th set RPT and ALM100 field accordinly
        //
        case AM_HAL_RTC_ALM_RPT_100TH:
            ui32RptInt = AM_HAL_RTC_ALM_RPT_SEC;
            ui32Alm100 = AM_HAL_RTC_ALM100_100TH;
    2040:	21ff      	movs	r1, #255	; 0xff
    }

    //
    // Write the interval to the register.
    //
    AM_BFW(RTC, RTCCTL, RPT, ui32RptInt);
    2042:	4b0e      	ldr	r3, [pc, #56]	; (207c <am_hal_rtc_alarm_interval_set+0x48>)

    //
    // Write the Alarm 100 bits in the ALM100 register.
    //
    AM_BFW(RTC, ALMLOW, ALM100, ui32Alm100);
    2044:	4c0e      	ldr	r4, [pc, #56]	; (2080 <am_hal_rtc_alarm_interval_set+0x4c>)
    AM_BFW(RTC, RTCCTL, RPT, ui32RptInt);
    2046:	6818      	ldr	r0, [r3, #0]
    2048:	f020 000e 	bic.w	r0, r0, #14
    204c:	4310      	orrs	r0, r2
    204e:	6018      	str	r0, [r3, #0]
    AM_BFW(RTC, ALMLOW, ALM100, ui32Alm100);
    2050:	6822      	ldr	r2, [r4, #0]
    2052:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
    2056:	430b      	orrs	r3, r1
    2058:	6023      	str	r3, [r4, #0]
}
    205a:	f85d 4b04 	ldr.w	r4, [sp], #4
    205e:	4770      	bx	lr
            ui32Value = AM_BFR(RTC, ALMLOW, ALM100);
    2060:	4b07      	ldr	r3, [pc, #28]	; (2080 <am_hal_rtc_alarm_interval_set+0x4c>)
    2062:	6819      	ldr	r1, [r3, #0]
    2064:	b2c9      	uxtb	r1, r1
    2066:	0040      	lsls	r0, r0, #1
            ui32Alm100 = ui32Value >= 0xF0 ? 0 : ui32Value;
    2068:	29ef      	cmp	r1, #239	; 0xef
    206a:	f000 020e 	and.w	r2, r0, #14
    206e:	d9e8      	bls.n	2042 <am_hal_rtc_alarm_interval_set+0xe>
    2070:	2100      	movs	r1, #0
    2072:	e7e6      	b.n	2042 <am_hal_rtc_alarm_interval_set+0xe>
    switch(ui32RepeatInterval)
    2074:	220e      	movs	r2, #14
            ui32Alm100 = AM_HAL_RTC_ALM100_10TH;
    2076:	21f0      	movs	r1, #240	; 0xf0
    2078:	e7e3      	b.n	2042 <am_hal_rtc_alarm_interval_set+0xe>
    207a:	bf00      	nop
    207c:	40004050 	.word	0x40004050
    2080:	40004048 	.word	0x40004048

00002084 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    2084:	b5f0      	push	{r4, r5, r6, r7, lr}
    2086:	b083      	sub	sp, #12
    2088:	4604      	mov	r4, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    208a:	f7ff fd93 	bl	1bb4 <am_hal_interrupt_master_disable>
    208e:	4605      	mov	r5, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    2090:	b124      	cbz	r4, 209c <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    2092:	4b42      	ldr	r3, [pc, #264]	; (219c <am_hal_sysctrl_sleep+0x118>)
    2094:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    2096:	f010 0c01 	ands.w	ip, r0, #1
    209a:	d00a      	beq.n	20b2 <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    209c:	4a40      	ldr	r2, [pc, #256]	; (21a0 <am_hal_sysctrl_sleep+0x11c>)
    209e:	6811      	ldr	r1, [r2, #0]
    20a0:	f021 0604 	bic.w	r6, r1, #4
    20a4:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    20a6:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    20a8:	4628      	mov	r0, r5
    20aa:	f7ff fd87 	bl	1bbc <am_hal_interrupt_master_set>
}
    20ae:	b003      	add	sp, #12
    20b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    20b2:	4c3b      	ldr	r4, [pc, #236]	; (21a0 <am_hal_sysctrl_sleep+0x11c>)
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    20b4:	4b3b      	ldr	r3, [pc, #236]	; (21a4 <am_hal_sysctrl_sleep+0x120>)
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    20b6:	6820      	ldr	r0, [r4, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    20b8:	4e3b      	ldr	r6, [pc, #236]	; (21a8 <am_hal_sysctrl_sleep+0x124>)
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    20ba:	4f3c      	ldr	r7, [pc, #240]	; (21ac <am_hal_sysctrl_sleep+0x128>)
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    20bc:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 21bc <am_hal_sysctrl_sleep+0x138>
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    20c0:	f040 0204 	orr.w	r2, r0, #4
    20c4:	6022      	str	r2, [r4, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    20c6:	681c      	ldr	r4, [r3, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    20c8:	6833      	ldr	r3, [r6, #0]
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    20ca:	f8de 2000 	ldr.w	r2, [lr]
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    20ce:	6839      	ldr	r1, [r7, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    20d0:	f004 07f0 	and.w	r7, r4, #240	; 0xf0
                   CHKBUCKZX_REV : 0x0;
    20d4:	2f20      	cmp	r7, #32
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    20d6:	f103 30ff 	add.w	r0, r3, #4294967295
                   CHKBUCKZX_REV : 0x0;
    20da:	bf14      	ite	ne
    20dc:	2700      	movne	r7, #0
    20de:	2702      	moveq	r7, #2
                    CHKBUCKZX_TIMER : 0x0;
    20e0:	2803      	cmp	r0, #3
    20e2:	bf98      	it	ls
    20e4:	f04f 0c04 	movls.w	ip, #4
                     CHKBUCKZX_BUCKS : 0x0;
    20e8:	f012 0403 	ands.w	r4, r2, #3
    20ec:	bf18      	it	ne
    20ee:	2401      	movne	r4, #1
    g_buckZX_chk |= ( ui32SupplySrc &
    20f0:	f240 53ff 	movw	r3, #1535	; 0x5ff
    g_buckZX_chk |= (ui32SupplySrc &
    20f4:	433c      	orrs	r4, r7
                0x0 : CHKBUCKZX_DEVEN;
    20f6:	ea11 0703 	ands.w	r7, r1, r3
    g_buckZX_chk |= (ui32SupplySrc &
    20fa:	ea44 040c 	orr.w	r4, r4, ip
                0x0 : CHKBUCKZX_DEVEN;
    20fe:	d103      	bne.n	2108 <am_hal_sysctrl_sleep+0x84>
    g_buckZX_chk |= ( ui32SupplySrc &
    2100:	f044 0408 	orr.w	r4, r4, #8
        if ( bBuckZX_chk )
    2104:	2c0f      	cmp	r4, #15
    2106:	d00a      	beq.n	211e <am_hal_sysctrl_sleep+0x9a>
        AM_ASM_WFI;
    2108:	bf30      	wfi
        if ( bBuckZX_chk )
    210a:	2c0f      	cmp	r4, #15
    210c:	d01a      	beq.n	2144 <am_hal_sysctrl_sleep+0xc0>
            g_bBuckRestoreComplete = true;
    210e:	4e28      	ldr	r6, [pc, #160]	; (21b0 <am_hal_sysctrl_sleep+0x12c>)
    2110:	2001      	movs	r0, #1
    2112:	7030      	strb	r0, [r6, #0]
    am_hal_interrupt_master_set(ui32Critical);
    2114:	4628      	mov	r0, r5
    2116:	f7ff fd51 	bl	1bbc <am_hal_interrupt_master_set>
}
    211a:	b003      	add	sp, #12
    211c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ui32BuckTimer = g_ui32BuckTimer - 1;
    211e:	6832      	ldr	r2, [r6, #0]
    2120:	1e51      	subs	r1, r2, #1
    2122:	9100      	str	r1, [sp, #0]
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    2124:	9800      	ldr	r0, [sp, #0]
    2126:	f04f 31ff 	mov.w	r1, #4294967295
    212a:	f000 f92d 	bl	2388 <am_hal_ctimer_clear>
            am_hal_ctimer_period_set(ui32BuckTimer,
    212e:	9800      	ldr	r0, [sp, #0]
    2130:	463b      	mov	r3, r7
    2132:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    2136:	f04f 31ff 	mov.w	r1, #4294967295
    213a:	f000 f939 	bl	23b0 <am_hal_ctimer_period_set>
            am_hal_pwrctrl_bucks_disable();
    213e:	f7ff ff0f 	bl	1f60 <am_hal_pwrctrl_bucks_disable>
    2142:	e7e1      	b.n	2108 <am_hal_sysctrl_sleep+0x84>
    AM_CRITICAL_BEGIN_ASM
    2144:	f7ff fd36 	bl	1bb4 <am_hal_interrupt_master_disable>
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    2148:	4b1a      	ldr	r3, [pc, #104]	; (21b4 <am_hal_sysctrl_sleep+0x130>)
    AM_CRITICAL_BEGIN_ASM
    214a:	9001      	str	r0, [sp, #4]
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    214c:	681a      	ldr	r2, [r3, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    214e:	681a      	ldr	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    2150:	681f      	ldr	r7, [r3, #0]
    2152:	f027 043c 	bic.w	r4, r7, #60	; 0x3c
    2156:	f044 021c 	orr.w	r2, r4, #28
    215a:	601a      	str	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    215c:	6819      	ldr	r1, [r3, #0]
            g_bBuckRestoreComplete = false;
    215e:	4c14      	ldr	r4, [pc, #80]	; (21b0 <am_hal_sysctrl_sleep+0x12c>)
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    2160:	f421 30f0 	bic.w	r0, r1, #122880	; 0x1e000
    2164:	f440 4760 	orr.w	r7, r0, #57344	; 0xe000
    2168:	601f      	str	r7, [r3, #0]
    AM_CRITICAL_END_ASM
    216a:	9801      	ldr	r0, [sp, #4]
    216c:	f7ff fd26 	bl	1bbc <am_hal_interrupt_master_set>
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    2170:	201c      	movs	r0, #28
    2172:	f7ff fcbd 	bl	1af0 <am_hal_flash_delay>
            am_hal_pwrctrl_bucks_enable();
    2176:	f7ff fed7 	bl	1f28 <am_hal_pwrctrl_bucks_enable>
            ui32BuckTimer = g_ui32BuckTimer - 1;
    217a:	6836      	ldr	r6, [r6, #0]
            g_ui32BuckInputs = 0;
    217c:	490e      	ldr	r1, [pc, #56]	; (21b8 <am_hal_sysctrl_sleep+0x134>)
            g_bBuckRestoreComplete = false;
    217e:	2200      	movs	r2, #0
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2180:	1e73      	subs	r3, r6, #1
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    2182:	204c      	movs	r0, #76	; 0x4c
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2184:	9300      	str	r3, [sp, #0]
            g_bBuckRestoreComplete = false;
    2186:	7022      	strb	r2, [r4, #0]
            g_ui32BuckInputs = 0;
    2188:	600a      	str	r2, [r1, #0]
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    218a:	f7ff fcb1 	bl	1af0 <am_hal_flash_delay>
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    218e:	9800      	ldr	r0, [sp, #0]
    2190:	f04f 31ff 	mov.w	r1, #4294967295
    2194:	f000 f8e0 	bl	2358 <am_hal_ctimer_start>
    2198:	e786      	b.n	20a8 <am_hal_sysctrl_sleep+0x24>
    219a:	bf00      	nop
    219c:	40020250 	.word	0x40020250
    21a0:	e000ed10 	.word	0xe000ed10
    21a4:	4002000c 	.word	0x4002000c
    21a8:	10001144 	.word	0x10001144
    21ac:	40021008 	.word	0x40021008
    21b0:	1000113d 	.word	0x1000113d
    21b4:	40020068 	.word	0x40020068
    21b8:	10001140 	.word	0x10001140
    21bc:	40021000 	.word	0x40021000

000021c0 <am_hal_uart_config>:
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    21c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21c2:	460d      	mov	r5, r1
    21c4:	4607      	mov	r7, r0
    uint32_t ui32HFRC;

    //
    // Configure the Baudrate.
    //
    ui32HFRC = am_hal_clkgen_sysclk_get();
    21c6:	f7ff fc49 	bl	1a5c <am_hal_clkgen_sysclk_get>
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    21ca:	682b      	ldr	r3, [r5, #0]
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    21cc:	0186      	lsls	r6, r0, #6
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    21ce:	0159      	lsls	r1, r3, #5
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    21d0:	fbb0 f4f1 	udiv	r4, r0, r1
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    21d4:	fbb6 f0f1 	udiv	r0, r6, r1
    21d8:	eba0 1684 	sub.w	r6, r0, r4, lsl #6
    am_hal_debug_assert_msg(ui32IntegerDivisor > 0, "Integer divisor MUST be greater than or equal to 1.");
    21dc:	b924      	cbnz	r4, 21e8 <am_hal_uart_config+0x28>
    21de:	4a11      	ldr	r2, [pc, #68]	; (2224 <am_hal_uart_config+0x64>)
    21e0:	4811      	ldr	r0, [pc, #68]	; (2228 <am_hal_uart_config+0x68>)
    21e2:	2164      	movs	r1, #100	; 0x64
    21e4:	f7ff fc82 	bl	1aec <am_hal_debug_error>
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    21e8:	f507 2280 	add.w	r2, r7, #262144	; 0x40000
    21ec:	321c      	adds	r2, #28
    21ee:	0317      	lsls	r7, r2, #12
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    21f0:	7a2b      	ldrb	r3, [r5, #8]
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    21f2:	627c      	str	r4, [r7, #36]	; 0x24
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    21f4:	627c      	str	r4, [r7, #36]	; 0x24
    AM_REGn(UART, ui32Module, FBRD) = ui32FractionDivisor;
    21f6:	62be      	str	r6, [r7, #40]	; 0x28
    ui32ConfigVal |= psConfig->ui32DataBits;
    21f8:	6868      	ldr	r0, [r5, #4]
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    21fa:	68ec      	ldr	r4, [r5, #12]
    21fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    21fe:	2b00      	cmp	r3, #0
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    2200:	ea40 0004 	orr.w	r0, r0, r4
    2204:	ea40 0001 	orr.w	r0, r0, r1
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    2208:	bf14      	ite	ne
    220a:	2108      	movne	r1, #8
    220c:	2100      	moveq	r1, #0
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    220e:	4308      	orrs	r0, r1
    2210:	62f8      	str	r0, [r7, #44]	; 0x2c

    //
    // Write the flow control settings to the control register.
    //
    AM_REGn(UART, ui32Module, CR) |= psConfig->ui32FlowCtrl;
    2212:	6b3e      	ldr	r6, [r7, #48]	; 0x30
    2214:	692d      	ldr	r5, [r5, #16]
    2216:	432e      	orrs	r6, r5
    2218:	633e      	str	r6, [r7, #48]	; 0x30

    //
    // Set the clock select field for 24MHz from the HFRC
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    221a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    221c:	f042 0310 	orr.w	r3, r2, #16
    2220:	633b      	str	r3, [r7, #48]	; 0x30
    2222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2224:	00002538 	.word	0x00002538
    2228:	0000256c 	.word	0x0000256c

0000222c <am_hal_uart_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_enable(uint32_t ui32Module)
{
    222c:	b510      	push	{r4, lr}
    222e:	4604      	mov	r4, r0
    2230:	b082      	sub	sp, #8
    //
    // Enable the UART, RX, and TX.
    //
    AM_REGan_SET(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    2232:	f7ff fcbf 	bl	1bb4 <am_hal_interrupt_master_disable>
    2236:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
    223a:	331c      	adds	r3, #28
    223c:	0319      	lsls	r1, r3, #12
    223e:	9001      	str	r0, [sp, #4]
    2240:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    2242:	f442 7040 	orr.w	r0, r2, #768	; 0x300
    2246:	f040 0401 	orr.w	r4, r0, #1
    224a:	630c      	str	r4, [r1, #48]	; 0x30
    224c:	9801      	ldr	r0, [sp, #4]
    224e:	f7ff fcb5 	bl	1bbc <am_hal_interrupt_master_set>
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    2252:	b002      	add	sp, #8
    2254:	bd10      	pop	{r4, pc}
    2256:	bf00      	nop

00002258 <am_hal_uart_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_disable(uint32_t ui32Module)
{
    2258:	b510      	push	{r4, lr}
    225a:	4604      	mov	r4, r0
    225c:	b082      	sub	sp, #8
    //
    // Disable the UART.
    //
    AM_REGan_CLR(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    225e:	f7ff fca9 	bl	1bb4 <am_hal_interrupt_master_disable>
    2262:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
    2266:	331c      	adds	r3, #28
    2268:	0319      	lsls	r1, r3, #12
    226a:	9001      	str	r0, [sp, #4]
    226c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    226e:	f422 7040 	bic.w	r0, r2, #768	; 0x300
    2272:	f020 0401 	bic.w	r4, r0, #1
    2276:	630c      	str	r4, [r1, #48]	; 0x30
    2278:	9801      	ldr	r0, [sp, #4]
    227a:	f7ff fc9f 	bl	1bbc <am_hal_interrupt_master_set>
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    227e:	b002      	add	sp, #8
    2280:	bd10      	pop	{r4, pc}
    2282:	bf00      	nop

00002284 <am_hal_uart_pwrctrl_enable>:
am_hal_uart_pwrctrl_enable(uint32_t ui32Module)
{
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    2284:	2801      	cmp	r0, #1
{
    2286:	b510      	push	{r4, lr}
    2288:	4604      	mov	r4, r0
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    228a:	d905      	bls.n	2298 <am_hal_uart_pwrctrl_enable+0x14>
    228c:	4a05      	ldr	r2, [pc, #20]	; (22a4 <am_hal_uart_pwrctrl_enable+0x20>)
    228e:	4806      	ldr	r0, [pc, #24]	; (22a8 <am_hal_uart_pwrctrl_enable+0x24>)
    2290:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    2294:	f7ff fc2a 	bl	1aec <am_hal_debug_error>
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    2298:	2080      	movs	r0, #128	; 0x80
    229a:	40a0      	lsls	r0, r4
}
    229c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    22a0:	f7ff bcb4 	b.w	1c0c <am_hal_pwrctrl_periph_enable>
    22a4:	00002580 	.word	0x00002580
    22a8:	0000256c 	.word	0x0000256c

000022ac <am_hal_uart_pwrctrl_disable>:
am_hal_uart_pwrctrl_disable(uint32_t ui32Module)
{
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    22ac:	2801      	cmp	r0, #1
{
    22ae:	b510      	push	{r4, lr}
    22b0:	4604      	mov	r4, r0
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    22b2:	d905      	bls.n	22c0 <am_hal_uart_pwrctrl_disable+0x14>
    22b4:	4a05      	ldr	r2, [pc, #20]	; (22cc <am_hal_uart_pwrctrl_disable+0x20>)
    22b6:	4806      	ldr	r0, [pc, #24]	; (22d0 <am_hal_uart_pwrctrl_disable+0x24>)
    22b8:	f240 11bd 	movw	r1, #445	; 0x1bd
    22bc:	f7ff fc16 	bl	1aec <am_hal_debug_error>
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    22c0:	2080      	movs	r0, #128	; 0x80
    22c2:	40a0      	lsls	r0, r4
}
    22c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    22c8:	f7ff bce2 	b.w	1c90 <am_hal_pwrctrl_periph_disable>
    22cc:	00002580 	.word	0x00002580
    22d0:	0000256c 	.word	0x0000256c

000022d4 <am_hal_uart_clock_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    22d4:	b510      	push	{r4, lr}
    //
    // Set CLKGEN.UARTEN, clear the field then write the desired enable value
    // Valid enable values are DIS, EN, REDUCE_FREQ, EN_POWER_SAV.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    22d6:	2101      	movs	r1, #1
{
    22d8:	4604      	mov	r4, r0
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    22da:	f7ff fbe3 	bl	1aa4 <am_hal_clkgen_uarten_set>

    //
    // Enable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKEN_M;
    22de:	f504 2080 	add.w	r0, r4, #262144	; 0x40000
    22e2:	301c      	adds	r0, #28
    22e4:	0301      	lsls	r1, r0, #12
    22e6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    22e8:	f043 0208 	orr.w	r2, r3, #8
    22ec:	630a      	str	r2, [r1, #48]	; 0x30

    //
    // Select default UART clock source
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    22ee:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    22f0:	f044 0010 	orr.w	r0, r4, #16
    22f4:	6308      	str	r0, [r1, #48]	; 0x30
    22f6:	bd10      	pop	{r4, pc}

000022f8 <am_hal_uart_clock_disable>:
am_hal_uart_clock_disable(uint32_t ui32Module)
{
    //
    // Disable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) &= ~AM_REG_UART_CR_CLKEN_M;
    22f8:	f500 2380 	add.w	r3, r0, #262144	; 0x40000
    22fc:	331c      	adds	r3, #28
    22fe:	031b      	lsls	r3, r3, #12

    //
    // Disable the UART clock in the CLKGEN module.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_DIS);
    2300:	2100      	movs	r1, #0
    AM_REGn(UART, ui32Module, CR) &= ~AM_REG_UART_CR_CLKEN_M;
    2302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2304:	f022 0208 	bic.w	r2, r2, #8
    2308:	631a      	str	r2, [r3, #48]	; 0x30
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_DIS);
    230a:	f7ff bbcb 	b.w	1aa4 <am_hal_clkgen_uarten_set>
    230e:	bf00      	nop

00002310 <am_hal_uart_fifo_config>:
am_hal_uart_fifo_config(uint32_t ui32Module, uint32_t ui32LvlCfg)
{
    //
    // Enable the use of FIFOs.
    //
    AM_REGn(UART, ui32Module, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    2310:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    2314:	301c      	adds	r0, #28
    2316:	0302      	lsls	r2, r0, #12
    2318:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    231a:	f043 0010 	orr.w	r0, r3, #16
    231e:	62d0      	str	r0, [r2, #44]	; 0x2c

    //
    // Write the FIFO level register.
    //
    AM_REGn(UART, ui32Module, IFLS) = ui32LvlCfg;
    2320:	6351      	str	r1, [r2, #52]	; 0x34
    2322:	4770      	bx	lr

00002324 <am_hal_uart_string_transmit_polled>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_string_transmit_polled(uint32_t ui32Module, char *pcString)
{
    2324:	b410      	push	{r4}
    while (*pcString)
    2326:	780c      	ldrb	r4, [r1, #0]
    2328:	b16c      	cbz	r4, 2346 <am_hal_uart_string_transmit_polled+0x22>
    232a:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    232e:	301c      	adds	r0, #28
    2330:	0300      	lsls	r0, r0, #12
    2332:	f100 0218 	add.w	r2, r0, #24
    {
        //
        // Wait for space, i.e.  TX FIFO EMPTY.
        //
        while (AM_BFRn(UART, ui32Module, FR, TXFF));
    2336:	6813      	ldr	r3, [r2, #0]
    2338:	069b      	lsls	r3, r3, #26
    233a:	d4fc      	bmi.n	2336 <am_hal_uart_string_transmit_polled+0x12>

        //
        // Write the char.
        //
        AM_REGn(UART, ui32Module, DR) = *pcString++;
    233c:	6004      	str	r4, [r0, #0]
    while (*pcString)
    233e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    2342:	2c00      	cmp	r4, #0
    2344:	d1f7      	bne.n	2336 <am_hal_uart_string_transmit_polled+0x12>
    }
}
    2346:	f85d 4b04 	ldr.w	r4, [sp], #4
    234a:	4770      	bx	lr

0000234c <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    234c:	4b01      	ldr	r3, [pc, #4]	; (2354 <am_hal_vcomp_disable+0x8>)
    234e:	2237      	movs	r2, #55	; 0x37
    2350:	601a      	str	r2, [r3, #0]
    2352:	4770      	bx	lr
    2354:	4000c008 	.word	0x4000c008

00002358 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    2358:	b570      	push	{r4, r5, r6, lr}
    235a:	b082      	sub	sp, #8
    235c:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    235e:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    2360:	f7ff fc28 	bl	1bb4 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    2364:	4d07      	ldr	r5, [pc, #28]	; (2384 <am_hal_ctimer_start+0x2c>)
    AM_CRITICAL_BEGIN_ASM
    2366:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    2368:	5971      	ldr	r1, [r6, r5]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    236a:	f004 2308 	and.w	r3, r4, #134219776	; 0x8000800
    236e:	ea21 0003 	bic.w	r0, r1, r3
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    2372:	f004 1201 	and.w	r2, r4, #65537	; 0x10001
    2376:	4302      	orrs	r2, r0
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    2378:	5172      	str	r2, [r6, r5]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    237a:	9801      	ldr	r0, [sp, #4]
    237c:	f7ff fc1e 	bl	1bbc <am_hal_interrupt_master_set>
} // am_hal_ctimer_start()
    2380:	b002      	add	sp, #8
    2382:	bd70      	pop	{r4, r5, r6, pc}
    2384:	4000800c 	.word	0x4000800c

00002388 <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    2388:	b570      	push	{r4, r5, r6, lr}
    238a:	b082      	sub	sp, #8
    238c:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    238e:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    2390:	f7ff fc10 	bl	1bb4 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    2394:	4d05      	ldr	r5, [pc, #20]	; (23ac <am_hal_ctimer_clear+0x24>)
    AM_CRITICAL_BEGIN_ASM
    2396:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    2398:	5971      	ldr	r1, [r6, r5]
    239a:	f004 2008 	and.w	r0, r4, #134219776	; 0x8000800
    239e:	4308      	orrs	r0, r1
    23a0:	5170      	str	r0, [r6, r5]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    23a2:	9801      	ldr	r0, [sp, #4]
    23a4:	f7ff fc0a 	bl	1bbc <am_hal_interrupt_master_set>
} // am_hal_ctimer_clear()
    23a8:	b002      	add	sp, #8
    23aa:	bd70      	pop	{r4, r5, r6, pc}
    23ac:	4000800c 	.word	0x4000800c

000023b0 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    23b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    23b4:	b082      	sub	sp, #8
    23b6:	4688      	mov	r8, r1
    23b8:	461f      	mov	r7, r3
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    23ba:	ea4f 1900 	mov.w	r9, r0, lsl #4
{
    23be:	4614      	mov	r4, r2
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    23c0:	f7ff fbf8 	bl	1bb4 <am_hal_interrupt_master_disable>
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    23c4:	f8df a098 	ldr.w	sl, [pc, #152]	; 2460 <am_hal_ctimer_period_set+0xb0>
    AM_CRITICAL_BEGIN_ASM
    23c8:	9001      	str	r0, [sp, #4]
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    23ca:	f518 3f80 	cmn.w	r8, #65536	; 0x10000
                                    AM_REG_CTIMER_CMPRA0_O +
    23ce:	4d21      	ldr	r5, [pc, #132]	; (2454 <am_hal_ctimer_period_set+0xa4>)
                                    AM_REG_CTIMER_CMPRB0_O +
    23d0:	4e21      	ldr	r6, [pc, #132]	; (2458 <am_hal_ctimer_period_set+0xa8>)
    ui32Mode = *pui32ControlReg;
    23d2:	f859 300a 	ldr.w	r3, [r9, sl]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    23d6:	d01b      	beq.n	2410 <am_hal_ctimer_period_set+0x60>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    23d8:	f403 70c0 	and.w	r0, r3, #384	; 0x180
    23dc:	2880      	cmp	r0, #128	; 0x80
    23de:	d01c      	beq.n	241a <am_hal_ctimer_period_set+0x6a>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    23e0:	f64f 77ff 	movw	r7, #65535	; 0xffff
    23e4:	2300      	movs	r3, #0
    23e6:	45b8      	cmp	r8, r7
        ui32Comp1 = 0;
    23e8:	461a      	mov	r2, r3
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    23ea:	d01d      	beq.n	2428 <am_hal_ctimer_period_set+0x78>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    23ec:	491b      	ldr	r1, [pc, #108]	; (245c <am_hal_ctimer_period_set+0xac>)
    23ee:	4588      	cmp	r8, r1
    23f0:	d025      	beq.n	243e <am_hal_ctimer_period_set+0x8e>
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1 >> 16));
    23f2:	400a      	ands	r2, r1
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    23f4:	b2a0      	uxth	r0, r4
    23f6:	4303      	orrs	r3, r0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    23f8:	ea42 4414 	orr.w	r4, r2, r4, lsr #16
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    23fc:	f849 3005 	str.w	r3, [r9, r5]
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    2400:	f849 4006 	str.w	r4, [r9, r6]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    2404:	9801      	ldr	r0, [sp, #4]
    2406:	f7ff fbd9 	bl	1bbc <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    240a:	b002      	add	sp, #8
    240c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ui32Mode = ui32Mode >> 16;
    2410:	0c19      	lsrs	r1, r3, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    2412:	f401 70c0 	and.w	r0, r1, #384	; 0x180
    2416:	2880      	cmp	r0, #128	; 0x80
    2418:	d110      	bne.n	243c <am_hal_ctimer_period_set+0x8c>
    241a:	0423      	lsls	r3, r4, #16
        ui32Comp1 = ui32Period;
    241c:	4622      	mov	r2, r4
        ui32Comp0 = ui32Period - ui32OnTime;
    241e:	1be4      	subs	r4, r4, r7
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    2420:	f64f 77ff 	movw	r7, #65535	; 0xffff
    2424:	45b8      	cmp	r8, r7
    2426:	d1e1      	bne.n	23ec <am_hal_ctimer_period_set+0x3c>
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    2428:	b2a6      	uxth	r6, r4
    242a:	4333      	orrs	r3, r6
    242c:	f849 3005 	str.w	r3, [r9, r5]
    AM_CRITICAL_END_ASM
    2430:	9801      	ldr	r0, [sp, #4]
    2432:	f7ff fbc3 	bl	1bbc <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    2436:	b002      	add	sp, #8
    2438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    243c:	2300      	movs	r3, #0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    243e:	b2a5      	uxth	r5, r4
    2440:	432b      	orrs	r3, r5
    2442:	f849 3006 	str.w	r3, [r9, r6]
    AM_CRITICAL_END_ASM
    2446:	9801      	ldr	r0, [sp, #4]
    2448:	f7ff fbb8 	bl	1bbc <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    244c:	b002      	add	sp, #8
    244e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2452:	bf00      	nop
    2454:	40008004 	.word	0x40008004
    2458:	40008008 	.word	0x40008008
    245c:	ffff0000 	.word	0xffff0000
    2460:	4000800c 	.word	0x4000800c
    2464:	70656544 	.word	0x70656544
    2468:	65656c73 	.word	0x65656c73
    246c:	61572070 	.word	0x61572070
    2470:	4520656b 	.word	0x4520656b
    2474:	706d6178 	.word	0x706d6178
    2478:	000a656c 	.word	0x000a656c
    247c:	0a0a0a0a 	.word	0x0a0a0a0a
    2480:	0a0a0a0a 	.word	0x0a0a0a0a
    2484:	0a0a0a0a 	.word	0x0a0a0a0a
    2488:	0a0a0a0a 	.word	0x0a0a0a0a
    248c:	00000a0a 	.word	0x00000a0a

00002490 <am_hal_cachectrl_defaults>:
    2490:	50000001 00010300 00010101 685f6d61     ...P........am_h
    24a0:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    24b0:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    24c0:	63206469 6b636f6c 74657320 676e6974     id clock setting
    24d0:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    24e0:	6b6c635f 2e6e6567 00000063 6e6e6143     _clkgen.c...Cann
    24f0:	6520746f 6c62616e 6f6d2065 74206572     ot enable more t
    2500:	206e6168 20656e6f 69726570 72656870     han one peripher
    2510:	61206c61 20612074 656d6974 0000002e     al at a time....
    2520:	2e5c2e2e 6d615c2e 6c61685f 7277705f     ..\..\am_hal_pwr
    2530:	6c727463 0000632e 65746e49 20726567     ctrl.c..Integer 
    2540:	69766964 20726f73 5453554d 20656220     divisor MUST be 
    2550:	61657267 20726574 6e616874 20726f20     greater than or 
    2560:	61757165 6f74206c 002e3120 2e5c2e2e     equal to 1....\.
    2570:	6d615c2e 6c61685f 7261755f 00632e74     .\am_hal_uart.c.
    2580:	69797254 7420676e 6964206f 6c626173     Trying to disabl
    2590:	20612065 54524155 646f6d20 20656c75     e a UART module 
    25a0:	74616874 656f6420 74276e73 69786520     that doesn't exi
    25b0:	00007473                                st..
