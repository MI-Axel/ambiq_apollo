
flash_write_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000191c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00020000  2**2
                  ALLOC
  2 .data         00000000  10001000  10001000  0001191c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000090c  10001000  0000191c  00021000  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  0001191c  2**0
                  CONTENTS, READONLY
  5 .debug_info   000092db  00000000  00000000  00011953  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001ea9  00000000  00000000  0001ac2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000638  00000000  00000000  0001cad7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000f00  00000000  00000000  0001d10f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003b59  00000000  00000000  0001e00f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002416  00000000  00000000  00021b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  00023f7e  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000010d0  00000000  00000000  00023ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000020df  00000000  00000000  000250cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 b9 03 00 00 21 04 00 00 2d 04 00 00     ........!...-...
      10:	2d 04 00 00 2d 04 00 00 2d 04 00 00 00 00 00 00     -...-...-.......
	...
      2c:	27 04 00 00 27 04 00 00 00 00 00 00 27 04 00 00     '...'.......'...
      3c:	27 04 00 00 27 04 00 00 27 04 00 00 27 04 00 00     '...'...'...'...
      4c:	27 04 00 00 27 04 00 00 27 04 00 00 27 04 00 00     '...'...'...'...
      5c:	27 04 00 00 27 04 00 00 27 04 00 00 27 04 00 00     '...'...'...'...
      6c:	27 04 00 00 27 04 00 00 27 04 00 00 27 04 00 00     '...'...'...'...
      7c:	27 04 00 00 27 04 00 00 27 04 00 00 27 04 00 00     '...'...'...'...
      8c:	27 04 00 00 27 04 00 00 27 04 00 00 27 04 00 00     '...'...'...'...
      9c:	27 04 00 00 27 04 00 00 27 04 00 00 27 04 00 00     '...'...'...'...
      ac:	27 04 00 00 27 04 00 00 27 04 00 00 27 04 00 00     '...'...'...'...
      bc:	27 04 00 00                                         '...

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     160:	b580      	push	{r7, lr}
     162:	b088      	sub	sp, #32
     164:	af00      	add	r7, sp, #0
    int32_t i32ReturnCode;
    int32_t i32ErrorFlag = 0;
     166:	2300      	movs	r3, #0
     168:	61fb      	str	r3, [r7, #28]
    uint32_t ui32PrgmAddr;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     16a:	2000      	movs	r0, #0
     16c:	f001 f8de 	bl	132c <am_hal_clkgen_sysclk_select>

    //
    // Initialize the peripherals for this board.
    //
    am_bsp_low_power_init();
     170:	f001 f888 	bl	1284 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     174:	487c      	ldr	r0, [pc, #496]	; (368 <main+0x208>)
     176:	f000 f9d9 	bl	52c <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     17a:	f001 f91f 	bl	13bc <am_hal_interrupt_master_disable>
     17e:	4603      	mov	r3, r0
     180:	607b      	str	r3, [r7, #4]
     182:	4b7a      	ldr	r3, [pc, #488]	; (36c <main+0x20c>)
     184:	2273      	movs	r2, #115	; 0x73
     186:	601a      	str	r2, [r3, #0]
     188:	4a79      	ldr	r2, [pc, #484]	; (370 <main+0x210>)
     18a:	4b79      	ldr	r3, [pc, #484]	; (370 <main+0x210>)
     18c:	681b      	ldr	r3, [r3, #0]
     18e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     192:	6013      	str	r3, [r2, #0]
     194:	4a77      	ldr	r2, [pc, #476]	; (374 <main+0x214>)
     196:	4b77      	ldr	r3, [pc, #476]	; (374 <main+0x214>)
     198:	681b      	ldr	r3, [r3, #0]
     19a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     19e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     1a2:	6013      	str	r3, [r2, #0]
     1a4:	4a74      	ldr	r2, [pc, #464]	; (378 <main+0x218>)
     1a6:	4b74      	ldr	r3, [pc, #464]	; (378 <main+0x218>)
     1a8:	681b      	ldr	r3, [r3, #0]
     1aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     1ae:	6013      	str	r3, [r2, #0]
     1b0:	4b6e      	ldr	r3, [pc, #440]	; (36c <main+0x20c>)
     1b2:	2200      	movs	r2, #0
     1b4:	601a      	str	r2, [r3, #0]
     1b6:	687b      	ldr	r3, [r7, #4]
     1b8:	4618      	mov	r0, r3
     1ba:	f001 f903 	bl	13c4 <am_hal_interrupt_master_set>

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     1be:	f001 f905 	bl	13cc <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     1c2:	f001 f871 	bl	12a8 <am_bsp_debug_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
     1c6:	f001 f853 	bl	1270 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Flash Write Example\n");
     1ca:	486c      	ldr	r0, [pc, #432]	; (37c <main+0x21c>)
     1cc:	f001 f832 	bl	1234 <am_util_stdio_printf>

    //
    // Select an arbitrary page address in flash instance 1.
    // 260KB = 0x41000.
    //
    ui32PrgmAddr = ARB_PAGE_ADDRESS;
     1d0:	f44f 2304 	mov.w	r3, #540672	; 0x84000
     1d4:	613b      	str	r3, [r7, #16]

    //
    // Erase the whole block of FLASH instance 1.
    //
    am_util_stdio_printf("  ... erasing all of flash instance %d.\n", AM_HAL_FLASH_ADDR2INST(ui32PrgmAddr) );
     1d6:	693b      	ldr	r3, [r7, #16]
     1d8:	0cdb      	lsrs	r3, r3, #19
     1da:	f003 0301 	and.w	r3, r3, #1
     1de:	4619      	mov	r1, r3
     1e0:	4867      	ldr	r0, [pc, #412]	; (380 <main+0x220>)
     1e2:	f001 f827 	bl	1234 <am_util_stdio_printf>
    i32ReturnCode = am_hal_flash_mass_erase(AM_HAL_FLASH_PROGRAM_KEY, 1);
     1e6:	2101      	movs	r1, #1
     1e8:	4866      	ldr	r0, [pc, #408]	; (384 <main+0x224>)
     1ea:	f001 f8d3 	bl	1394 <am_hal_flash_mass_erase>
     1ee:	60f8      	str	r0, [r7, #12]

    //
    // Check for an error from the HAL.
    //
    if (i32ReturnCode)
     1f0:	68fb      	ldr	r3, [r7, #12]
     1f2:	2b00      	cmp	r3, #0
     1f4:	d006      	beq.n	204 <main+0xa4>
    {
        am_util_stdio_printf("FLASH_MASS_ERASE i32ReturnCode =  0x%x.\n",
     1f6:	68f9      	ldr	r1, [r7, #12]
     1f8:	4863      	ldr	r0, [pc, #396]	; (388 <main+0x228>)
     1fa:	f001 f81b 	bl	1234 <am_util_stdio_printf>
                             i32ReturnCode);
        i32ErrorFlag++;
     1fe:	69fb      	ldr	r3, [r7, #28]
     200:	3301      	adds	r3, #1
     202:	61fb      	str	r3, [r7, #28]

    //
    // Setup a pattern to write to the FLASH.
    //
    am_util_stdio_printf("  ... programming flash instance %d, page %d.\n",
                          AM_HAL_FLASH_ADDR2INST(ui32PrgmAddr),
     204:	693b      	ldr	r3, [r7, #16]
     206:	0cdb      	lsrs	r3, r3, #19
    am_util_stdio_printf("  ... programming flash instance %d, page %d.\n",
     208:	f003 0101 	and.w	r1, r3, #1
                          AM_HAL_FLASH_ADDR2PAGE(ui32PrgmAddr) );
     20c:	693b      	ldr	r3, [r7, #16]
     20e:	0b5b      	lsrs	r3, r3, #13
    am_util_stdio_printf("  ... programming flash instance %d, page %d.\n",
     210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     214:	461a      	mov	r2, r3
     216:	485d      	ldr	r0, [pc, #372]	; (38c <main+0x22c>)
     218:	f001 f80c 	bl	1234 <am_util_stdio_printf>

    pui32Src = ui32Source;
     21c:	4b5c      	ldr	r3, [pc, #368]	; (390 <main+0x230>)
     21e:	61bb      	str	r3, [r7, #24]
    for (ix = 0x100; ix < (0x100 + (512 * 4)); ix += 4)
     220:	f44f 7380 	mov.w	r3, #256	; 0x100
     224:	617b      	str	r3, [r7, #20]
     226:	e007      	b.n	238 <main+0xd8>
    {
        *pui32Src++ = ix;
     228:	69bb      	ldr	r3, [r7, #24]
     22a:	1d1a      	adds	r2, r3, #4
     22c:	61ba      	str	r2, [r7, #24]
     22e:	697a      	ldr	r2, [r7, #20]
     230:	601a      	str	r2, [r3, #0]
    for (ix = 0x100; ix < (0x100 + (512 * 4)); ix += 4)
     232:	697b      	ldr	r3, [r7, #20]
     234:	3304      	adds	r3, #4
     236:	617b      	str	r3, [r7, #20]
     238:	697b      	ldr	r3, [r7, #20]
     23a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
     23e:	dbf3      	blt.n	228 <main+0xc8>
    }

    //
    // Program a few words in a page in the main block of instance 1.
    //
    pui32Dst = (uint32_t *) ui32PrgmAddr;
     240:	693b      	ldr	r3, [r7, #16]
     242:	60bb      	str	r3, [r7, #8]
    i32ReturnCode = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY,
     244:	f44f 7300 	mov.w	r3, #512	; 0x200
     248:	68ba      	ldr	r2, [r7, #8]
     24a:	4951      	ldr	r1, [pc, #324]	; (390 <main+0x230>)
     24c:	484d      	ldr	r0, [pc, #308]	; (384 <main+0x224>)
     24e:	f001 f8a9 	bl	13a4 <am_hal_flash_program_main>
     252:	60f8      	str	r0, [r7, #12]
                                              512);

    //
    // Check for an error from the HAL.
    //
    if (i32ReturnCode)
     254:	68fb      	ldr	r3, [r7, #12]
     256:	2b00      	cmp	r3, #0
     258:	d007      	beq.n	26a <main+0x10a>
    {
        am_util_stdio_printf("FLASH program page at 0x%08x "
     25a:	68fa      	ldr	r2, [r7, #12]
     25c:	6939      	ldr	r1, [r7, #16]
     25e:	484d      	ldr	r0, [pc, #308]	; (394 <main+0x234>)
     260:	f000 ffe8 	bl	1234 <am_util_stdio_printf>
                             "i32ReturnCode = 0x%x.\n",
                             ui32PrgmAddr,
                             i32ReturnCode);
        i32ErrorFlag++;
     264:	69fb      	ldr	r3, [r7, #28]
     266:	3301      	adds	r3, #1
     268:	61fb      	str	r3, [r7, #28]
    }

    //
    // Check the page just programmed.
    //
    am_util_stdio_printf("  ... verifying the page just programmed.\n");
     26a:	484b      	ldr	r0, [pc, #300]	; (398 <main+0x238>)
     26c:	f000 ffe2 	bl	1234 <am_util_stdio_printf>
    for ( ix = 0; ix < 512; ix++ )
     270:	2300      	movs	r3, #0
     272:	617b      	str	r3, [r7, #20]
     274:	e020      	b.n	2b8 <main+0x158>
    {
        if ( *(uint32_t*)(ui32PrgmAddr + (ix*4)) != ui32Source[ix] )
     276:	697b      	ldr	r3, [r7, #20]
     278:	009b      	lsls	r3, r3, #2
     27a:	461a      	mov	r2, r3
     27c:	693b      	ldr	r3, [r7, #16]
     27e:	4413      	add	r3, r2
     280:	681a      	ldr	r2, [r3, #0]
     282:	4943      	ldr	r1, [pc, #268]	; (390 <main+0x230>)
     284:	697b      	ldr	r3, [r7, #20]
     286:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
     28a:	429a      	cmp	r2, r3
     28c:	d011      	beq.n	2b2 <main+0x152>
        {
            am_util_stdio_printf("ERROR: flash address 0x%08x did not program properly:\n"
                                 "  Expected value = 0x%08x, programmed value = 0x%08x.\n",
                                 ui32PrgmAddr + (ix * 4),
     28e:	697b      	ldr	r3, [r7, #20]
     290:	009b      	lsls	r3, r3, #2
     292:	461a      	mov	r2, r3
            am_util_stdio_printf("ERROR: flash address 0x%08x did not program properly:\n"
     294:	693b      	ldr	r3, [r7, #16]
     296:	18d1      	adds	r1, r2, r3
     298:	4a3d      	ldr	r2, [pc, #244]	; (390 <main+0x230>)
     29a:	697b      	ldr	r3, [r7, #20]
     29c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                                 ui32Source[ix],
                                 *(uint32_t*)(ui32PrgmAddr + (ix * 4)) );
     2a0:	697b      	ldr	r3, [r7, #20]
     2a2:	009b      	lsls	r3, r3, #2
     2a4:	4618      	mov	r0, r3
     2a6:	693b      	ldr	r3, [r7, #16]
     2a8:	4403      	add	r3, r0
            am_util_stdio_printf("ERROR: flash address 0x%08x did not program properly:\n"
     2aa:	681b      	ldr	r3, [r3, #0]
     2ac:	483b      	ldr	r0, [pc, #236]	; (39c <main+0x23c>)
     2ae:	f000 ffc1 	bl	1234 <am_util_stdio_printf>
    for ( ix = 0; ix < 512; ix++ )
     2b2:	697b      	ldr	r3, [r7, #20]
     2b4:	3301      	adds	r3, #1
     2b6:	617b      	str	r3, [r7, #20]
     2b8:	697b      	ldr	r3, [r7, #20]
     2ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
     2be:	dbda      	blt.n	276 <main+0x116>
    }

    //
    // Erase the page just programmed.
    //
    am_util_stdio_printf("  ... erasing the page just programmed.\n");
     2c0:	4837      	ldr	r0, [pc, #220]	; (3a0 <main+0x240>)
     2c2:	f000 ffb7 	bl	1234 <am_util_stdio_printf>
    i32ReturnCode = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY,
                                            AM_HAL_FLASH_ADDR2INST(ui32PrgmAddr),
     2c6:	693b      	ldr	r3, [r7, #16]
     2c8:	0cdb      	lsrs	r3, r3, #19
    i32ReturnCode = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY,
     2ca:	f003 0101 	and.w	r1, r3, #1
                                            AM_HAL_FLASH_ADDR2PAGE(ui32PrgmAddr) );
     2ce:	693b      	ldr	r3, [r7, #16]
     2d0:	0b5b      	lsrs	r3, r3, #13
    i32ReturnCode = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY,
     2d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     2d6:	461a      	mov	r2, r3
     2d8:	482a      	ldr	r0, [pc, #168]	; (384 <main+0x224>)
     2da:	f001 f85f 	bl	139c <am_hal_flash_page_erase>
     2de:	60f8      	str	r0, [r7, #12]

    //
    // Check for an error from the HAL.
    //
    if (i32ReturnCode)
     2e0:	68fb      	ldr	r3, [r7, #12]
     2e2:	2b00      	cmp	r3, #0
     2e4:	d008      	beq.n	2f8 <main+0x198>
    {
        am_util_stdio_printf(" FLASH erase page at 0x%08x "
     2e6:	68fa      	ldr	r2, [r7, #12]
     2e8:	f44f 2104 	mov.w	r1, #540672	; 0x84000
     2ec:	482d      	ldr	r0, [pc, #180]	; (3a4 <main+0x244>)
     2ee:	f000 ffa1 	bl	1234 <am_util_stdio_printf>
                             "i32ReturnCode =  0x%x.\n",
                             ARB_PAGE_ADDRESS, i32ReturnCode);
        i32ErrorFlag++;
     2f2:	69fb      	ldr	r3, [r7, #28]
     2f4:	3301      	adds	r3, #1
     2f6:	61fb      	str	r3, [r7, #28]
    }

    //
    // Check that the entire page is erased.
    //
    am_util_stdio_printf("  ... verifying the page just erased.\n");
     2f8:	482b      	ldr	r0, [pc, #172]	; (3a8 <main+0x248>)
     2fa:	f000 ff9b 	bl	1234 <am_util_stdio_printf>
    for ( ix = 0; ix < 512; ix++ )
     2fe:	2300      	movs	r3, #0
     300:	617b      	str	r3, [r7, #20]
     302:	e01a      	b.n	33a <main+0x1da>
    {
        if ( *(uint32_t*)(ui32PrgmAddr + (ix*4)) != 0xFFFFFFFF )
     304:	697b      	ldr	r3, [r7, #20]
     306:	009b      	lsls	r3, r3, #2
     308:	461a      	mov	r2, r3
     30a:	693b      	ldr	r3, [r7, #16]
     30c:	4413      	add	r3, r2
     30e:	681b      	ldr	r3, [r3, #0]
     310:	f1b3 3fff 	cmp.w	r3, #4294967295
     314:	d00e      	beq.n	334 <main+0x1d4>
        {
            am_util_stdio_printf("ERROR: flash address 0x%08x did not ERASE properly:\n"
                                 "  Expected value = 0xFFFFFFFF, programmed value = 0x%08x.\n",
                                 ui32PrgmAddr + (ix*4),
     316:	697b      	ldr	r3, [r7, #20]
     318:	009b      	lsls	r3, r3, #2
     31a:	461a      	mov	r2, r3
            am_util_stdio_printf("ERROR: flash address 0x%08x did not ERASE properly:\n"
     31c:	693b      	ldr	r3, [r7, #16]
     31e:	18d1      	adds	r1, r2, r3
                                 *(uint32_t*)(ui32PrgmAddr + (ix * 4)) );
     320:	697b      	ldr	r3, [r7, #20]
     322:	009b      	lsls	r3, r3, #2
     324:	461a      	mov	r2, r3
     326:	693b      	ldr	r3, [r7, #16]
     328:	4413      	add	r3, r2
            am_util_stdio_printf("ERROR: flash address 0x%08x did not ERASE properly:\n"
     32a:	681b      	ldr	r3, [r3, #0]
     32c:	461a      	mov	r2, r3
     32e:	481f      	ldr	r0, [pc, #124]	; (3ac <main+0x24c>)
     330:	f000 ff80 	bl	1234 <am_util_stdio_printf>
    for ( ix = 0; ix < 512; ix++ )
     334:	697b      	ldr	r3, [r7, #20]
     336:	3301      	adds	r3, #1
     338:	617b      	str	r3, [r7, #20]
     33a:	697b      	ldr	r3, [r7, #20]
     33c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
     340:	dbe0      	blt.n	304 <main+0x1a4>
    }

    //
    // Report success or any failures and exit.
    //
    if (i32ErrorFlag)
     342:	69fb      	ldr	r3, [r7, #28]
     344:	2b00      	cmp	r3, #0
     346:	d004      	beq.n	352 <main+0x1f2>
    {
        am_util_stdio_printf("ERROR: FLASH Write example failure %d\n",
     348:	69f9      	ldr	r1, [r7, #28]
     34a:	4819      	ldr	r0, [pc, #100]	; (3b0 <main+0x250>)
     34c:	f000 ff72 	bl	1234 <am_util_stdio_printf>
     350:	e002      	b.n	358 <main+0x1f8>
                             i32ErrorFlag);
    }
    else
    {
        am_util_stdio_printf("FLASH Write example successful \n");
     352:	4818      	ldr	r0, [pc, #96]	; (3b4 <main+0x254>)
     354:	f000 ff6e 	bl	1234 <am_util_stdio_printf>
    }

    //
    // Verify that ITM is done printing
    //
    am_hal_itm_not_busy();
     358:	f001 f864 	bl	1424 <am_hal_itm_not_busy>

    //
    // Provide return code back to the system.
    //
    return i32ErrorFlag;
     35c:	69fb      	ldr	r3, [r7, #28]
}
     35e:	4618      	mov	r0, r3
     360:	3720      	adds	r7, #32
     362:	46bd      	mov	sp, r7
     364:	bd80      	pop	{r7, pc}
     366:	bf00      	nop
     368:	00001329 	.word	0x00001329
     36c:	40010060 	.word	0x40010060
     370:	40010054 	.word	0x40010054
     374:	40010028 	.word	0x40010028
     378:	40010108 	.word	0x40010108
     37c:	00001604 	.word	0x00001604
     380:	0000161c 	.word	0x0000161c
     384:	12344321 	.word	0x12344321
     388:	00001648 	.word	0x00001648
     38c:	00001674 	.word	0x00001674
     390:	10001000 	.word	0x10001000
     394:	000016a4 	.word	0x000016a4
     398:	000016d8 	.word	0x000016d8
     39c:	00001704 	.word	0x00001704
     3a0:	00001774 	.word	0x00001774
     3a4:	000017a0 	.word	0x000017a0
     3a8:	000017d4 	.word	0x000017d4
     3ac:	000017fc 	.word	0x000017fc
     3b0:	0000186c 	.word	0x0000186c
     3b4:	00001894 	.word	0x00001894

000003b8 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     3b8:	4811      	ldr	r0, [pc, #68]	; (400 <zero_loop+0x12>)
     3ba:	4912      	ldr	r1, [pc, #72]	; (404 <zero_loop+0x16>)
     3bc:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     3be:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     3c2:	4811      	ldr	r0, [pc, #68]	; (408 <zero_loop+0x1a>)
     3c4:	6801      	ldr	r1, [r0, #0]
     3c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3ca:	6001      	str	r1, [r0, #0]
     3cc:	f3bf 8f4f 	dsb	sy
     3d0:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     3d4:	480d      	ldr	r0, [pc, #52]	; (40c <zero_loop+0x1e>)
     3d6:	490e      	ldr	r1, [pc, #56]	; (410 <zero_loop+0x22>)
     3d8:	4a0e      	ldr	r2, [pc, #56]	; (414 <zero_loop+0x26>)

000003da <copy_loop>:
     3da:	f850 3b04 	ldr.w	r3, [r0], #4
     3de:	f841 3b04 	str.w	r3, [r1], #4
     3e2:	4291      	cmp	r1, r2
     3e4:	dbf9      	blt.n	3da <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     3e6:	480c      	ldr	r0, [pc, #48]	; (418 <zero_loop+0x2a>)
     3e8:	490c      	ldr	r1, [pc, #48]	; (41c <zero_loop+0x2e>)
     3ea:	f04f 0200 	mov.w	r2, #0

000003ee <zero_loop>:
     3ee:	4288      	cmp	r0, r1
     3f0:	bfb8      	it	lt
     3f2:	f840 2b04 	strlt.w	r2, [r0], #4
     3f6:	dbfa      	blt.n	3ee <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     3f8:	f7ff feb2 	bl	160 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     3fc:	be00      	bkpt	0x0000
}
     3fe:	bf00      	nop
     400:	e000ed08 	.word	0xe000ed08
     404:	00000000 	.word	0x00000000
     408:	e000ed88 	.word	0xe000ed88
     40c:	0000191c 	.word	0x0000191c
     410:	10001000 	.word	0x10001000
     414:	10001000 	.word	0x10001000
     418:	10001000 	.word	0x10001000
     41c:	1000190c 	.word	0x1000190c

00000420 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     420:	b480      	push	{r7}
     422:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     424:	e7fe      	b.n	424 <am_nmi_isr+0x4>

00000426 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     426:	b480      	push	{r7}
     428:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     42a:	e7fe      	b.n	42a <am_adc_isr+0x4>

0000042c <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     42c:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     42e:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     430:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     432:	f000 f809 	bl	448 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     436:	bd01      	pop	{r0, pc}
}
     438:	bf00      	nop
     43a:	4618      	mov	r0, r3

0000043c <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     43c:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     43e:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     440:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     442:	4770      	bx	lr
}
     444:	bf00      	nop
     446:	4618      	mov	r0, r3

00000448 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     448:	b580      	push	{r7, lr}
     44a:	b096      	sub	sp, #88	; 0x58
     44c:	af00      	add	r7, sp, #0
     44e:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     450:	f107 030c 	add.w	r3, r7, #12
     454:	2200      	movs	r2, #0
     456:	601a      	str	r2, [r3, #0]
     458:	605a      	str	r2, [r3, #4]
     45a:	609a      	str	r2, [r3, #8]
     45c:	60da      	str	r2, [r3, #12]
     45e:	611a      	str	r2, [r3, #16]
     460:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
     462:	2300      	movs	r3, #0
     464:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     468:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     46a:	4b2e      	ldr	r3, [pc, #184]	; (524 <am_util_faultisr_collect_data+0xdc>)
     46c:	681b      	ldr	r3, [r3, #0]
     46e:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     472:	b2db      	uxtb	r3, r3
     474:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     47a:	0a1b      	lsrs	r3, r3, #8
     47c:	b2db      	uxtb	r3, r3
     47e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     484:	0c1b      	lsrs	r3, r3, #16
     486:	b29b      	uxth	r3, r3
     488:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     48c:	4b26      	ldr	r3, [pc, #152]	; (528 <am_util_faultisr_collect_data+0xe0>)
     48e:	681b      	ldr	r3, [r3, #0]
     490:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     492:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     496:	b2db      	uxtb	r3, r3
     498:	f003 0302 	and.w	r3, r3, #2
     49c:	2b00      	cmp	r3, #0
     49e:	d005      	beq.n	4ac <am_util_faultisr_collect_data+0x64>
     4a0:	6879      	ldr	r1, [r7, #4]
     4a2:	2006      	movs	r0, #6
     4a4:	f7ff ffca 	bl	43c <getStackedReg>
     4a8:	4603      	mov	r3, r0
     4aa:	e001      	b.n	4b0 <am_util_faultisr_collect_data+0x68>
     4ac:	f04f 33ff 	mov.w	r3, #4294967295
     4b0:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     4b2:	6879      	ldr	r1, [r7, #4]
     4b4:	2000      	movs	r0, #0
     4b6:	f7ff ffc1 	bl	43c <getStackedReg>
     4ba:	4603      	mov	r3, r0
     4bc:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     4be:	6879      	ldr	r1, [r7, #4]
     4c0:	2001      	movs	r0, #1
     4c2:	f7ff ffbb 	bl	43c <getStackedReg>
     4c6:	4603      	mov	r3, r0
     4c8:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     4ca:	6879      	ldr	r1, [r7, #4]
     4cc:	2002      	movs	r0, #2
     4ce:	f7ff ffb5 	bl	43c <getStackedReg>
     4d2:	4603      	mov	r3, r0
     4d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     4d6:	6879      	ldr	r1, [r7, #4]
     4d8:	2003      	movs	r0, #3
     4da:	f7ff ffaf 	bl	43c <getStackedReg>
     4de:	4603      	mov	r3, r0
     4e0:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     4e2:	6879      	ldr	r1, [r7, #4]
     4e4:	2004      	movs	r0, #4
     4e6:	f7ff ffa9 	bl	43c <getStackedReg>
     4ea:	4603      	mov	r3, r0
     4ec:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     4ee:	6879      	ldr	r1, [r7, #4]
     4f0:	2005      	movs	r0, #5
     4f2:	f7ff ffa3 	bl	43c <getStackedReg>
     4f6:	4603      	mov	r3, r0
     4f8:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     4fa:	6879      	ldr	r1, [r7, #4]
     4fc:	2006      	movs	r0, #6
     4fe:	f7ff ff9d 	bl	43c <getStackedReg>
     502:	4603      	mov	r3, r0
     504:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     506:	6879      	ldr	r1, [r7, #4]
     508:	2007      	movs	r0, #7
     50a:	f7ff ff97 	bl	43c <getStackedReg>
     50e:	4603      	mov	r3, r0
     510:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     512:	f107 030c 	add.w	r3, r7, #12
     516:	4618      	mov	r0, r3
     518:	f000 ffa8 	bl	146c <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     51c:	2300      	movs	r3, #0
     51e:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
     520:	e7fe      	b.n	520 <am_util_faultisr_collect_data+0xd8>
     522:	bf00      	nop
     524:	e000ed28 	.word	0xe000ed28
     528:	e000ed38 	.word	0xe000ed38

0000052c <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
     532:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     534:	4a04      	ldr	r2, [pc, #16]	; (548 <am_util_stdio_printf_init+0x1c>)
     536:	687b      	ldr	r3, [r7, #4]
     538:	6013      	str	r3, [r2, #0]
}
     53a:	bf00      	nop
     53c:	370c      	adds	r7, #12
     53e:	46bd      	mov	sp, r7
     540:	f85d 7b04 	ldr.w	r7, [sp], #4
     544:	4770      	bx	lr
     546:	bf00      	nop
     548:	10001908 	.word	0x10001908

0000054c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     54c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     550:	b096      	sub	sp, #88	; 0x58
     552:	af00      	add	r7, sp, #0
     554:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     558:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     55c:	0025      	movs	r5, r4
     55e:	2600      	movs	r6, #0
     560:	ea55 0306 	orrs.w	r3, r5, r6
     564:	f000 80a0 	beq.w	6a8 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     568:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     56c:	0862      	lsrs	r2, r4, #1
     56e:	ea4f 0133 	mov.w	r1, r3, rrx
     572:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     576:	ea4f 0893 	mov.w	r8, r3, lsr #2
     57a:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     57e:	ea4f 0994 	mov.w	r9, r4, lsr #2
     582:	eb11 0308 	adds.w	r3, r1, r8
     586:	eb42 0409 	adc.w	r4, r2, r9
     58a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     58e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     592:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     596:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     59a:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     59e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5a2:	eb13 030a 	adds.w	r3, r3, sl
     5a6:	eb44 040b 	adc.w	r4, r4, fp
     5aa:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     5ae:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5b2:	0a1a      	lsrs	r2, r3, #8
     5b4:	62ba      	str	r2, [r7, #40]	; 0x28
     5b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
     5b8:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     5bc:	62ba      	str	r2, [r7, #40]	; 0x28
     5be:	0a23      	lsrs	r3, r4, #8
     5c0:	62fb      	str	r3, [r7, #44]	; 0x2c
     5c2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5c6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     5ca:	18c9      	adds	r1, r1, r3
     5cc:	eb42 0204 	adc.w	r2, r2, r4
     5d0:	460b      	mov	r3, r1
     5d2:	4614      	mov	r4, r2
     5d4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     5d8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5dc:	0c1a      	lsrs	r2, r3, #16
     5de:	623a      	str	r2, [r7, #32]
     5e0:	6a3a      	ldr	r2, [r7, #32]
     5e2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     5e6:	623a      	str	r2, [r7, #32]
     5e8:	0c23      	lsrs	r3, r4, #16
     5ea:	627b      	str	r3, [r7, #36]	; 0x24
     5ec:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     5f4:	18c9      	adds	r1, r1, r3
     5f6:	eb42 0204 	adc.w	r2, r2, r4
     5fa:	460b      	mov	r3, r1
     5fc:	4614      	mov	r4, r2
     5fe:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     602:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     606:	0023      	movs	r3, r4
     608:	603b      	str	r3, [r7, #0]
     60a:	2300      	movs	r3, #0
     60c:	607b      	str	r3, [r7, #4]
     60e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     612:	e897 0006 	ldmia.w	r7, {r1, r2}
     616:	18c9      	adds	r1, r1, r3
     618:	eb42 0204 	adc.w	r2, r2, r4
     61c:	460b      	mov	r3, r1
     61e:	4614      	mov	r4, r2
     620:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     624:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     628:	08da      	lsrs	r2, r3, #3
     62a:	613a      	str	r2, [r7, #16]
     62c:	693a      	ldr	r2, [r7, #16]
     62e:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     632:	613a      	str	r2, [r7, #16]
     634:	08e3      	lsrs	r3, r4, #3
     636:	617b      	str	r3, [r7, #20]
     638:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     63c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     640:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
     644:	460b      	mov	r3, r1
     646:	4614      	mov	r4, r2
     648:	00a0      	lsls	r0, r4, #2
     64a:	60f8      	str	r0, [r7, #12]
     64c:	68f8      	ldr	r0, [r7, #12]
     64e:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
     652:	60f8      	str	r0, [r7, #12]
     654:	009b      	lsls	r3, r3, #2
     656:	60bb      	str	r3, [r7, #8]
     658:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     65c:	185b      	adds	r3, r3, r1
     65e:	eb44 0402 	adc.w	r4, r4, r2
     662:	18db      	adds	r3, r3, r3
     664:	eb44 0404 	adc.w	r4, r4, r4
     668:	4619      	mov	r1, r3
     66a:	4622      	mov	r2, r4
     66c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     670:	1a5b      	subs	r3, r3, r1
     672:	eb64 0402 	sbc.w	r4, r4, r2
     676:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     67a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     67e:	3306      	adds	r3, #6
     680:	f144 0400 	adc.w	r4, r4, #0
     684:	091a      	lsrs	r2, r3, #4
     686:	61ba      	str	r2, [r7, #24]
     688:	69ba      	ldr	r2, [r7, #24]
     68a:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     68e:	61ba      	str	r2, [r7, #24]
     690:	0923      	lsrs	r3, r4, #4
     692:	61fb      	str	r3, [r7, #28]
     694:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     698:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     69c:	18c9      	adds	r1, r1, r3
     69e:	eb42 0204 	adc.w	r2, r2, r4
     6a2:	460b      	mov	r3, r1
     6a4:	4614      	mov	r4, r2
     6a6:	e029      	b.n	6fc <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     6aa:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     6ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     6ae:	085a      	lsrs	r2, r3, #1
     6b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     6b2:	089b      	lsrs	r3, r3, #2
     6b4:	4413      	add	r3, r2
     6b6:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     6b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     6ba:	091b      	lsrs	r3, r3, #4
     6bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     6be:	4413      	add	r3, r2
     6c0:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     6c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     6c4:	0a1b      	lsrs	r3, r3, #8
     6c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     6c8:	4413      	add	r3, r2
     6ca:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     6cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     6ce:	0c1b      	lsrs	r3, r3, #16
     6d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     6d2:	4413      	add	r3, r2
     6d4:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     6d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     6d8:	08db      	lsrs	r3, r3, #3
     6da:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     6dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     6de:	4613      	mov	r3, r2
     6e0:	009b      	lsls	r3, r3, #2
     6e2:	4413      	add	r3, r2
     6e4:	005b      	lsls	r3, r3, #1
     6e6:	461a      	mov	r2, r3
     6e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     6ea:	1a9b      	subs	r3, r3, r2
     6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     6ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     6f0:	3306      	adds	r3, #6
     6f2:	091a      	lsrs	r2, r3, #4
     6f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     6f6:	4413      	add	r3, r2
     6f8:	f04f 0400 	mov.w	r4, #0
    }
}
     6fc:	4618      	mov	r0, r3
     6fe:	4621      	mov	r1, r4
     700:	3758      	adds	r7, #88	; 0x58
     702:	46bd      	mov	sp, r7
     704:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     708:	4770      	bx	lr

0000070a <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     70a:	b590      	push	{r4, r7, lr}
     70c:	b085      	sub	sp, #20
     70e:	af00      	add	r7, sp, #0
     710:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     714:	683a      	ldr	r2, [r7, #0]
     716:	687b      	ldr	r3, [r7, #4]
     718:	4313      	orrs	r3, r2
     71a:	2b00      	cmp	r3, #0
     71c:	bf0c      	ite	eq
     71e:	2301      	moveq	r3, #1
     720:	2300      	movne	r3, #0
     722:	b2db      	uxtb	r3, r3
     724:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     726:	e008      	b.n	73a <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     728:	e9d7 0100 	ldrd	r0, r1, [r7]
     72c:	f7ff ff0e 	bl	54c <divu64_10>
     730:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     734:	68fb      	ldr	r3, [r7, #12]
     736:	3301      	adds	r3, #1
     738:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
     73a:	e897 0018 	ldmia.w	r7, {r3, r4}
     73e:	4323      	orrs	r3, r4
     740:	d1f2      	bne.n	728 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
     742:	68fb      	ldr	r3, [r7, #12]
}
     744:	4618      	mov	r0, r3
     746:	3714      	adds	r7, #20
     748:	46bd      	mov	sp, r7
     74a:	bd90      	pop	{r4, r7, pc}

0000074c <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     74c:	b590      	push	{r4, r7, lr}
     74e:	b083      	sub	sp, #12
     750:	af00      	add	r7, sp, #0
     752:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     756:	e897 0018 	ldmia.w	r7, {r3, r4}
     75a:	2b00      	cmp	r3, #0
     75c:	f174 0300 	sbcs.w	r3, r4, #0
     760:	da06      	bge.n	770 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     762:	e897 0018 	ldmia.w	r7, {r3, r4}
     766:	425b      	negs	r3, r3
     768:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     76c:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     770:	e897 0018 	ldmia.w	r7, {r3, r4}
     774:	4618      	mov	r0, r3
     776:	4621      	mov	r1, r4
     778:	f7ff ffc7 	bl	70a <ndigits_in_u64>
     77c:	4603      	mov	r3, r0
}
     77e:	4618      	mov	r0, r3
     780:	370c      	adds	r7, #12
     782:	46bd      	mov	sp, r7
     784:	bd90      	pop	{r4, r7, pc}

00000786 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     786:	b490      	push	{r4, r7}
     788:	b084      	sub	sp, #16
     78a:	af00      	add	r7, sp, #0
     78c:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     790:	6839      	ldr	r1, [r7, #0]
     792:	687a      	ldr	r2, [r7, #4]
     794:	430a      	orrs	r2, r1
     796:	2a00      	cmp	r2, #0
     798:	bf0c      	ite	eq
     79a:	2201      	moveq	r2, #1
     79c:	2200      	movne	r2, #0
     79e:	b2d2      	uxtb	r2, r2
     7a0:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     7a2:	e00a      	b.n	7ba <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     7a4:	e897 0006 	ldmia.w	r7, {r1, r2}
     7a8:	090b      	lsrs	r3, r1, #4
     7aa:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     7ae:	0914      	lsrs	r4, r2, #4
     7b0:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     7b4:	68fa      	ldr	r2, [r7, #12]
     7b6:	3201      	adds	r2, #1
     7b8:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
     7ba:	e897 0006 	ldmia.w	r7, {r1, r2}
     7be:	430a      	orrs	r2, r1
     7c0:	d1f0      	bne.n	7a4 <ndigits_in_hex+0x1e>
    }

    return iDigits;
     7c2:	68fb      	ldr	r3, [r7, #12]
}
     7c4:	4618      	mov	r0, r3
     7c6:	3710      	adds	r7, #16
     7c8:	46bd      	mov	sp, r7
     7ca:	bc90      	pop	{r4, r7}
     7cc:	4770      	bx	lr

000007ce <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     7ce:	b480      	push	{r7}
     7d0:	b087      	sub	sp, #28
     7d2:	af00      	add	r7, sp, #0
     7d4:	6078      	str	r0, [r7, #4]
     7d6:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     7d8:	2300      	movs	r3, #0
     7da:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     7dc:	2300      	movs	r3, #0
     7de:	613b      	str	r3, [r7, #16]
     7e0:	2300      	movs	r3, #0
     7e2:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     7e4:	687b      	ldr	r3, [r7, #4]
     7e6:	781b      	ldrb	r3, [r3, #0]
     7e8:	2b2d      	cmp	r3, #45	; 0x2d
     7ea:	d11b      	bne.n	824 <decstr_to_int+0x56>
    {
        bNeg = true;
     7ec:	2301      	movs	r3, #1
     7ee:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     7f0:	687b      	ldr	r3, [r7, #4]
     7f2:	3301      	adds	r3, #1
     7f4:	607b      	str	r3, [r7, #4]
        uCnt++;
     7f6:	68fb      	ldr	r3, [r7, #12]
     7f8:	3301      	adds	r3, #1
     7fa:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     7fc:	e012      	b.n	824 <decstr_to_int+0x56>
    {
        ++uCnt;
     7fe:	68fb      	ldr	r3, [r7, #12]
     800:	3301      	adds	r3, #1
     802:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     804:	693a      	ldr	r2, [r7, #16]
     806:	4613      	mov	r3, r2
     808:	009b      	lsls	r3, r3, #2
     80a:	4413      	add	r3, r2
     80c:	005b      	lsls	r3, r3, #1
     80e:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     810:	687b      	ldr	r3, [r7, #4]
     812:	781b      	ldrb	r3, [r3, #0]
     814:	461a      	mov	r2, r3
     816:	693b      	ldr	r3, [r7, #16]
     818:	4413      	add	r3, r2
     81a:	3b30      	subs	r3, #48	; 0x30
     81c:	613b      	str	r3, [r7, #16]
        pcStr++;
     81e:	687b      	ldr	r3, [r7, #4]
     820:	3301      	adds	r3, #1
     822:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     824:	687b      	ldr	r3, [r7, #4]
     826:	781b      	ldrb	r3, [r3, #0]
     828:	2b2f      	cmp	r3, #47	; 0x2f
     82a:	d903      	bls.n	834 <decstr_to_int+0x66>
     82c:	687b      	ldr	r3, [r7, #4]
     82e:	781b      	ldrb	r3, [r3, #0]
     830:	2b39      	cmp	r3, #57	; 0x39
     832:	d9e4      	bls.n	7fe <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
     834:	683b      	ldr	r3, [r7, #0]
     836:	2b00      	cmp	r3, #0
     838:	d002      	beq.n	840 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     83a:	683b      	ldr	r3, [r7, #0]
     83c:	68fa      	ldr	r2, [r7, #12]
     83e:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     840:	7dfb      	ldrb	r3, [r7, #23]
     842:	2b00      	cmp	r3, #0
     844:	d002      	beq.n	84c <decstr_to_int+0x7e>
     846:	693b      	ldr	r3, [r7, #16]
     848:	425b      	negs	r3, r3
     84a:	e000      	b.n	84e <decstr_to_int+0x80>
     84c:	693b      	ldr	r3, [r7, #16]
}
     84e:	4618      	mov	r0, r3
     850:	371c      	adds	r7, #28
     852:	46bd      	mov	sp, r7
     854:	f85d 7b04 	ldr.w	r7, [sp], #4
     858:	4770      	bx	lr

0000085a <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     85a:	b590      	push	{r4, r7, lr}
     85c:	b091      	sub	sp, #68	; 0x44
     85e:	af00      	add	r7, sp, #0
     860:	e9c7 0102 	strd	r0, r1, [r7, #8]
     864:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     866:	2300      	movs	r3, #0
     868:	63fb      	str	r3, [r7, #60]	; 0x3c
     86a:	2300      	movs	r3, #0
     86c:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     86e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     872:	f7ff fe6b 	bl	54c <divu64_10>
     876:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     87a:	68b9      	ldr	r1, [r7, #8]
     87c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     87e:	4613      	mov	r3, r2
     880:	009b      	lsls	r3, r3, #2
     882:	4413      	add	r3, r2
     884:	005b      	lsls	r3, r3, #1
     886:	1acb      	subs	r3, r1, r3
     888:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     88a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     88c:	1c5a      	adds	r2, r3, #1
     88e:	63fa      	str	r2, [r7, #60]	; 0x3c
     890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     892:	b2d2      	uxtb	r2, r2
     894:	3230      	adds	r2, #48	; 0x30
     896:	b2d2      	uxtb	r2, r2
     898:	f107 0140 	add.w	r1, r7, #64	; 0x40
     89c:	440b      	add	r3, r1
     89e:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     8a2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     8a6:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     8aa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     8ae:	4323      	orrs	r3, r4
     8b0:	d1dd      	bne.n	86e <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     8b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     8b4:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     8b6:	687b      	ldr	r3, [r7, #4]
     8b8:	2b00      	cmp	r3, #0
     8ba:	d011      	beq.n	8e0 <uint64_to_str+0x86>
    {
        while ( ix-- )
     8bc:	e008      	b.n	8d0 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     8be:	687b      	ldr	r3, [r7, #4]
     8c0:	1c5a      	adds	r2, r3, #1
     8c2:	607a      	str	r2, [r7, #4]
     8c4:	f107 0110 	add.w	r1, r7, #16
     8c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     8ca:	440a      	add	r2, r1
     8cc:	7812      	ldrb	r2, [r2, #0]
     8ce:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
     8d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     8d2:	1e5a      	subs	r2, r3, #1
     8d4:	63fa      	str	r2, [r7, #60]	; 0x3c
     8d6:	2b00      	cmp	r3, #0
     8d8:	d1f1      	bne.n	8be <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     8da:	687b      	ldr	r3, [r7, #4]
     8dc:	2200      	movs	r2, #0
     8de:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     8e2:	4618      	mov	r0, r3
     8e4:	3744      	adds	r7, #68	; 0x44
     8e6:	46bd      	mov	sp, r7
     8e8:	bd90      	pop	{r4, r7, pc}

000008ea <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     8ea:	b4b0      	push	{r4, r5, r7}
     8ec:	b08d      	sub	sp, #52	; 0x34
     8ee:	af00      	add	r7, sp, #0
     8f0:	e9c7 0102 	strd	r0, r1, [r7, #8]
     8f4:	607a      	str	r2, [r7, #4]
     8f6:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     8f8:	2300      	movs	r3, #0
     8fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     8fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     900:	4313      	orrs	r3, r2
     902:	d131      	bne.n	968 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     906:	1c5a      	adds	r2, r3, #1
     908:	62fa      	str	r2, [r7, #44]	; 0x2c
     90a:	f107 0230 	add.w	r2, r7, #48	; 0x30
     90e:	4413      	add	r3, r2
     910:	2230      	movs	r2, #48	; 0x30
     912:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     916:	e027      	b.n	968 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     918:	7a3b      	ldrb	r3, [r7, #8]
     91a:	f003 030f 	and.w	r3, r3, #15
     91e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     922:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     926:	2b09      	cmp	r3, #9
     928:	d90a      	bls.n	940 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     92a:	78fb      	ldrb	r3, [r7, #3]
     92c:	2b00      	cmp	r3, #0
     92e:	d001      	beq.n	934 <uint64_to_hexstr+0x4a>
     930:	2227      	movs	r2, #39	; 0x27
     932:	e000      	b.n	936 <uint64_to_hexstr+0x4c>
     934:	2207      	movs	r2, #7
     936:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     93a:	4413      	add	r3, r2
     93c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     942:	1c5a      	adds	r2, r3, #1
     944:	62fa      	str	r2, [r7, #44]	; 0x2c
     946:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     94a:	3230      	adds	r2, #48	; 0x30
     94c:	b2d2      	uxtb	r2, r2
     94e:	f107 0130 	add.w	r1, r7, #48	; 0x30
     952:	440b      	add	r3, r1
     954:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     958:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     95c:	0914      	lsrs	r4, r2, #4
     95e:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     962:	091d      	lsrs	r5, r3, #4
     964:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
     968:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     96c:	4313      	orrs	r3, r2
     96e:	d1d3      	bne.n	918 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     972:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     974:	687b      	ldr	r3, [r7, #4]
     976:	2b00      	cmp	r3, #0
     978:	d011      	beq.n	99e <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     97a:	e008      	b.n	98e <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     97c:	687b      	ldr	r3, [r7, #4]
     97e:	1c5a      	adds	r2, r3, #1
     980:	607a      	str	r2, [r7, #4]
     982:	f107 0110 	add.w	r1, r7, #16
     986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     988:	440a      	add	r2, r1
     98a:	7812      	ldrb	r2, [r2, #0]
     98c:	701a      	strb	r2, [r3, #0]
        while (ix--)
     98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     990:	1e5a      	subs	r2, r3, #1
     992:	62fa      	str	r2, [r7, #44]	; 0x2c
     994:	2b00      	cmp	r3, #0
     996:	d1f1      	bne.n	97c <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     998:	687b      	ldr	r3, [r7, #4]
     99a:	2200      	movs	r2, #0
     99c:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     9a0:	4618      	mov	r0, r3
     9a2:	3734      	adds	r7, #52	; 0x34
     9a4:	46bd      	mov	sp, r7
     9a6:	bcb0      	pop	{r4, r5, r7}
     9a8:	4770      	bx	lr

000009aa <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     9aa:	b480      	push	{r7}
     9ac:	b085      	sub	sp, #20
     9ae:	af00      	add	r7, sp, #0
     9b0:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     9b2:	2300      	movs	r3, #0
     9b4:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     9b6:	687b      	ldr	r3, [r7, #4]
     9b8:	2b00      	cmp	r3, #0
     9ba:	d104      	bne.n	9c6 <simple_strlen+0x1c>
    {
        return ui32RetVal;
     9bc:	68fb      	ldr	r3, [r7, #12]
     9be:	e009      	b.n	9d4 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     9c0:	68fb      	ldr	r3, [r7, #12]
     9c2:	3301      	adds	r3, #1
     9c4:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
     9c6:	687b      	ldr	r3, [r7, #4]
     9c8:	1c5a      	adds	r2, r3, #1
     9ca:	607a      	str	r2, [r7, #4]
     9cc:	781b      	ldrb	r3, [r3, #0]
     9ce:	2b00      	cmp	r3, #0
     9d0:	d1f6      	bne.n	9c0 <simple_strlen+0x16>
    }
    return ui32RetVal;
     9d2:	68fb      	ldr	r3, [r7, #12]
}
     9d4:	4618      	mov	r0, r3
     9d6:	3714      	adds	r7, #20
     9d8:	46bd      	mov	sp, r7
     9da:	f85d 7b04 	ldr.w	r7, [sp], #4
     9de:	4770      	bx	lr

000009e0 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     9e0:	b480      	push	{r7}
     9e2:	b087      	sub	sp, #28
     9e4:	af00      	add	r7, sp, #0
     9e6:	60f8      	str	r0, [r7, #12]
     9e8:	460b      	mov	r3, r1
     9ea:	607a      	str	r2, [r7, #4]
     9ec:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     9ee:	2300      	movs	r3, #0
     9f0:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     9f2:	687b      	ldr	r3, [r7, #4]
     9f4:	2b00      	cmp	r3, #0
     9f6:	dc0c      	bgt.n	a12 <padbuffer+0x32>
    {
        return i32Cnt;
     9f8:	697b      	ldr	r3, [r7, #20]
     9fa:	e010      	b.n	a1e <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     9fc:	68fb      	ldr	r3, [r7, #12]
     9fe:	2b00      	cmp	r3, #0
     a00:	d004      	beq.n	a0c <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     a02:	68fb      	ldr	r3, [r7, #12]
     a04:	1c5a      	adds	r2, r3, #1
     a06:	60fa      	str	r2, [r7, #12]
     a08:	7afa      	ldrb	r2, [r7, #11]
     a0a:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     a0c:	697b      	ldr	r3, [r7, #20]
     a0e:	3301      	adds	r3, #1
     a10:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
     a12:	687b      	ldr	r3, [r7, #4]
     a14:	1e5a      	subs	r2, r3, #1
     a16:	607a      	str	r2, [r7, #4]
     a18:	2b00      	cmp	r3, #0
     a1a:	d1ef      	bne.n	9fc <padbuffer+0x1c>
    }

    return i32Cnt;
     a1c:	697b      	ldr	r3, [r7, #20]
}
     a1e:	4618      	mov	r0, r3
     a20:	371c      	adds	r7, #28
     a22:	46bd      	mov	sp, r7
     a24:	f85d 7b04 	ldr.w	r7, [sp], #4
     a28:	4770      	bx	lr
	...

00000a2c <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     a2c:	b590      	push	{r4, r7, lr}
     a2e:	b08f      	sub	sp, #60	; 0x3c
     a30:	af00      	add	r7, sp, #0
     a32:	60f8      	str	r0, [r7, #12]
     a34:	60b9      	str	r1, [r7, #8]
     a36:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
     a38:	68bb      	ldr	r3, [r7, #8]
     a3a:	681b      	ldr	r3, [r3, #0]
     a3c:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
     a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a40:	2b03      	cmp	r3, #3
     a42:	dc02      	bgt.n	a4a <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     a44:	f06f 0302 	mvn.w	r3, #2
     a48:	e0e7      	b.n	c1a <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
     a4a:	edd7 7a03 	vldr	s15, [r7, #12]
     a4e:	eef5 7a40 	vcmp.f32	s15, #0.0
     a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     a56:	d104      	bne.n	a62 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     a58:	68bb      	ldr	r3, [r7, #8]
     a5a:	4a72      	ldr	r2, [pc, #456]	; (c24 <ftoa+0x1f8>)
     a5c:	601a      	str	r2, [r3, #0]
        return 3;
     a5e:	2303      	movs	r3, #3
     a60:	e0db      	b.n	c1a <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
     a62:	68bb      	ldr	r3, [r7, #8]
     a64:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
     a66:	68fb      	ldr	r3, [r7, #12]
     a68:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     a6a:	693b      	ldr	r3, [r7, #16]
     a6c:	15db      	asrs	r3, r3, #23
     a6e:	b2db      	uxtb	r3, r3
     a70:	3b7f      	subs	r3, #127	; 0x7f
     a72:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     a74:	693b      	ldr	r3, [r7, #16]
     a76:	f3c3 0316 	ubfx	r3, r3, #0, #23
     a7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     a7e:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
     a80:	2300      	movs	r3, #0
     a82:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     a84:	2300      	movs	r3, #0
     a86:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     a88:	69fb      	ldr	r3, [r7, #28]
     a8a:	2b1e      	cmp	r3, #30
     a8c:	dd02      	ble.n	a94 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     a8e:	f06f 0301 	mvn.w	r3, #1
     a92:	e0c2      	b.n	c1a <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
     a94:	69fb      	ldr	r3, [r7, #28]
     a96:	f113 0f17 	cmn.w	r3, #23
     a9a:	da02      	bge.n	aa2 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     a9c:	f04f 33ff 	mov.w	r3, #4294967295
     aa0:	e0bb      	b.n	c1a <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
     aa2:	69fb      	ldr	r3, [r7, #28]
     aa4:	2b16      	cmp	r3, #22
     aa6:	dd06      	ble.n	ab6 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
     aa8:	69fb      	ldr	r3, [r7, #28]
     aaa:	3b17      	subs	r3, #23
     aac:	69ba      	ldr	r2, [r7, #24]
     aae:	fa02 f303 	lsl.w	r3, r2, r3
     ab2:	637b      	str	r3, [r7, #52]	; 0x34
     ab4:	e01a      	b.n	aec <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     ab6:	69fb      	ldr	r3, [r7, #28]
     ab8:	2b00      	cmp	r3, #0
     aba:	db0f      	blt.n	adc <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
     abc:	69fb      	ldr	r3, [r7, #28]
     abe:	f1c3 0317 	rsb	r3, r3, #23
     ac2:	69ba      	ldr	r2, [r7, #24]
     ac4:	fa42 f303 	asr.w	r3, r2, r3
     ac8:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
     aca:	69fb      	ldr	r3, [r7, #28]
     acc:	3301      	adds	r3, #1
     ace:	69ba      	ldr	r2, [r7, #24]
     ad0:	fa02 f303 	lsl.w	r3, r2, r3
     ad4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     ad8:	633b      	str	r3, [r7, #48]	; 0x30
     ada:	e007      	b.n	aec <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
     adc:	69bb      	ldr	r3, [r7, #24]
     ade:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     ae2:	69fb      	ldr	r3, [r7, #28]
     ae4:	43db      	mvns	r3, r3
     ae6:	fa42 f303 	asr.w	r3, r2, r3
     aea:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     aec:	693b      	ldr	r3, [r7, #16]
     aee:	2b00      	cmp	r3, #0
     af0:	da04      	bge.n	afc <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     af2:	68bb      	ldr	r3, [r7, #8]
     af4:	1c5a      	adds	r2, r3, #1
     af6:	60ba      	str	r2, [r7, #8]
     af8:	222d      	movs	r2, #45	; 0x2d
     afa:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     afe:	2b00      	cmp	r3, #0
     b00:	d105      	bne.n	b0e <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     b02:	68bb      	ldr	r3, [r7, #8]
     b04:	1c5a      	adds	r2, r3, #1
     b06:	60ba      	str	r2, [r7, #8]
     b08:	2230      	movs	r2, #48	; 0x30
     b0a:	701a      	strb	r2, [r3, #0]
     b0c:	e021      	b.n	b52 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b10:	2b00      	cmp	r3, #0
     b12:	dd08      	ble.n	b26 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b16:	ea4f 74e3 	mov.w	r4, r3, asr #31
     b1a:	68ba      	ldr	r2, [r7, #8]
     b1c:	4618      	mov	r0, r3
     b1e:	4621      	mov	r1, r4
     b20:	f7ff fe9b 	bl	85a <uint64_to_str>
     b24:	e011      	b.n	b4a <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     b26:	68bb      	ldr	r3, [r7, #8]
     b28:	1c5a      	adds	r2, r3, #1
     b2a:	60ba      	str	r2, [r7, #8]
     b2c:	222d      	movs	r2, #45	; 0x2d
     b2e:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b32:	425b      	negs	r3, r3
     b34:	ea4f 74e3 	mov.w	r4, r3, asr #31
     b38:	68ba      	ldr	r2, [r7, #8]
     b3a:	4618      	mov	r0, r3
     b3c:	4621      	mov	r1, r4
     b3e:	f7ff fe8c 	bl	85a <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     b42:	e002      	b.n	b4a <ftoa+0x11e>
        {
            pcBuf++;
     b44:	68bb      	ldr	r3, [r7, #8]
     b46:	3301      	adds	r3, #1
     b48:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
     b4a:	68bb      	ldr	r3, [r7, #8]
     b4c:	781b      	ldrb	r3, [r3, #0]
     b4e:	2b00      	cmp	r3, #0
     b50:	d1f8      	bne.n	b44 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     b52:	68bb      	ldr	r3, [r7, #8]
     b54:	1c5a      	adds	r2, r3, #1
     b56:	60ba      	str	r2, [r7, #8]
     b58:	222e      	movs	r2, #46	; 0x2e
     b5a:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     b5e:	2b00      	cmp	r3, #0
     b60:	d105      	bne.n	b6e <ftoa+0x142>
    {
        *pcBuf++ = '0';
     b62:	68bb      	ldr	r3, [r7, #8]
     b64:	1c5a      	adds	r2, r3, #1
     b66:	60ba      	str	r2, [r7, #8]
     b68:	2230      	movs	r2, #48	; 0x30
     b6a:	701a      	strb	r2, [r3, #0]
     b6c:	e04f      	b.n	c0e <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     b6e:	68ba      	ldr	r2, [r7, #8]
     b70:	6a3b      	ldr	r3, [r7, #32]
     b72:	1ad3      	subs	r3, r2, r3
     b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     b76:	1ad3      	subs	r3, r2, r3
     b78:	3b01      	subs	r3, #1
     b7a:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     b7c:	697a      	ldr	r2, [r7, #20]
     b7e:	687b      	ldr	r3, [r7, #4]
     b80:	4293      	cmp	r3, r2
     b82:	bfa8      	it	ge
     b84:	4613      	movge	r3, r2
     b86:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
     b88:	2300      	movs	r3, #0
     b8a:	62bb      	str	r3, [r7, #40]	; 0x28
     b8c:	e015      	b.n	bba <ftoa+0x18e>
        {
            i32FracPart *= 10;
     b8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     b90:	4613      	mov	r3, r2
     b92:	009b      	lsls	r3, r3, #2
     b94:	4413      	add	r3, r2
     b96:	005b      	lsls	r3, r3, #1
     b98:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     b9a:	68bb      	ldr	r3, [r7, #8]
     b9c:	1c5a      	adds	r2, r3, #1
     b9e:	60ba      	str	r2, [r7, #8]
     ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     ba2:	1612      	asrs	r2, r2, #24
     ba4:	b2d2      	uxtb	r2, r2
     ba6:	3230      	adds	r2, #48	; 0x30
     ba8:	b2d2      	uxtb	r2, r2
     baa:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     bae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     bb2:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
     bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
     bb6:	3301      	adds	r3, #1
     bb8:	62bb      	str	r3, [r7, #40]	; 0x28
     bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
     bbc:	697b      	ldr	r3, [r7, #20]
     bbe:	429a      	cmp	r2, r3
     bc0:	dbe5      	blt.n	b8e <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
     bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     bc4:	4613      	mov	r3, r2
     bc6:	009b      	lsls	r3, r3, #2
     bc8:	4413      	add	r3, r2
     bca:	005b      	lsls	r3, r3, #1
     bcc:	161b      	asrs	r3, r3, #24
     bce:	2b04      	cmp	r3, #4
     bd0:	dd1d      	ble.n	c0e <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
     bd2:	68bb      	ldr	r3, [r7, #8]
     bd4:	3b01      	subs	r3, #1
     bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     bd8:	e015      	b.n	c06 <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
     bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     bdc:	781b      	ldrb	r3, [r3, #0]
     bde:	2b2e      	cmp	r3, #46	; 0x2e
     be0:	d00e      	beq.n	c00 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
     be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     be4:	781b      	ldrb	r3, [r3, #0]
     be6:	2b39      	cmp	r3, #57	; 0x39
     be8:	d103      	bne.n	bf2 <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
     bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     bec:	2230      	movs	r2, #48	; 0x30
     bee:	701a      	strb	r2, [r3, #0]
     bf0:	e006      	b.n	c00 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
     bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     bf4:	781b      	ldrb	r3, [r3, #0]
     bf6:	3301      	adds	r3, #1
     bf8:	b2da      	uxtb	r2, r3
     bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     bfc:	701a      	strb	r2, [r3, #0]
                    break;
     bfe:	e006      	b.n	c0e <ftoa+0x1e2>
                }
                pcBuftmp--;
     c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c02:	3b01      	subs	r3, #1
     c04:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     c08:	6a3b      	ldr	r3, [r7, #32]
     c0a:	429a      	cmp	r2, r3
     c0c:	d2e5      	bcs.n	bda <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     c0e:	68bb      	ldr	r3, [r7, #8]
     c10:	2200      	movs	r2, #0
     c12:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     c14:	68ba      	ldr	r2, [r7, #8]
     c16:	6a3b      	ldr	r3, [r7, #32]
     c18:	1ad3      	subs	r3, r2, r3
} // ftoa()
     c1a:	4618      	mov	r0, r3
     c1c:	373c      	adds	r7, #60	; 0x3c
     c1e:	46bd      	mov	sp, r7
     c20:	bd90      	pop	{r4, r7, pc}
     c22:	bf00      	nop
     c24:	00302e30 	.word	0x00302e30

00000c28 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     c28:	b590      	push	{r4, r7, lr}
     c2a:	b095      	sub	sp, #84	; 0x54
     c2c:	af00      	add	r7, sp, #0
     c2e:	60f8      	str	r0, [r7, #12]
     c30:	60b9      	str	r1, [r7, #8]
     c32:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     c34:	2300      	movs	r3, #0
     c36:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     c38:	2300      	movs	r3, #0
     c3a:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     c3c:	e2e3      	b.n	1206 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     c3e:	2306      	movs	r3, #6
     c40:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     c42:	68bb      	ldr	r3, [r7, #8]
     c44:	781b      	ldrb	r3, [r3, #0]
     c46:	2b25      	cmp	r3, #37	; 0x25
     c48:	d01f      	beq.n	c8a <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     c4a:	68fb      	ldr	r3, [r7, #12]
     c4c:	2b00      	cmp	r3, #0
     c4e:	d015      	beq.n	c7c <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     c50:	68bb      	ldr	r3, [r7, #8]
     c52:	781b      	ldrb	r3, [r3, #0]
     c54:	2b0a      	cmp	r3, #10
     c56:	d10b      	bne.n	c70 <am_util_stdio_vsprintf+0x48>
     c58:	4bb1      	ldr	r3, [pc, #708]	; (f20 <am_util_stdio_vsprintf+0x2f8>)
     c5a:	781b      	ldrb	r3, [r3, #0]
     c5c:	2b00      	cmp	r3, #0
     c5e:	d007      	beq.n	c70 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     c60:	68fb      	ldr	r3, [r7, #12]
     c62:	1c5a      	adds	r2, r3, #1
     c64:	60fa      	str	r2, [r7, #12]
     c66:	220d      	movs	r2, #13
     c68:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     c6c:	3301      	adds	r3, #1
     c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     c70:	68fb      	ldr	r3, [r7, #12]
     c72:	1c5a      	adds	r2, r3, #1
     c74:	60fa      	str	r2, [r7, #12]
     c76:	68ba      	ldr	r2, [r7, #8]
     c78:	7812      	ldrb	r2, [r2, #0]
     c7a:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     c7c:	68bb      	ldr	r3, [r7, #8]
     c7e:	3301      	adds	r3, #1
     c80:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     c84:	3301      	adds	r3, #1
     c86:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     c88:	e2bd      	b.n	1206 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     c8a:	68bb      	ldr	r3, [r7, #8]
     c8c:	3301      	adds	r3, #1
     c8e:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     c90:	2300      	movs	r3, #0
     c92:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     c96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     c9a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     c9e:	2320      	movs	r3, #32
     ca0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     ca4:	68bb      	ldr	r3, [r7, #8]
     ca6:	781b      	ldrb	r3, [r3, #0]
     ca8:	2b30      	cmp	r3, #48	; 0x30
     caa:	d105      	bne.n	cb8 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     cac:	2330      	movs	r3, #48	; 0x30
     cae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     cb2:	68bb      	ldr	r3, [r7, #8]
     cb4:	3301      	adds	r3, #1
     cb6:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     cb8:	f107 0310 	add.w	r3, r7, #16
     cbc:	4619      	mov	r1, r3
     cbe:	68b8      	ldr	r0, [r7, #8]
     cc0:	f7ff fd85 	bl	7ce <decstr_to_int>
     cc4:	4603      	mov	r3, r0
     cc6:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     cc8:	693b      	ldr	r3, [r7, #16]
     cca:	68ba      	ldr	r2, [r7, #8]
     ccc:	4413      	add	r3, r2
     cce:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     cd0:	68bb      	ldr	r3, [r7, #8]
     cd2:	781b      	ldrb	r3, [r3, #0]
     cd4:	2b73      	cmp	r3, #115	; 0x73
     cd6:	d005      	beq.n	ce4 <am_util_stdio_vsprintf+0xbc>
     cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     cda:	2b00      	cmp	r3, #0
     cdc:	da02      	bge.n	ce4 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ce0:	425b      	negs	r3, r3
     ce2:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     ce4:	68bb      	ldr	r3, [r7, #8]
     ce6:	781b      	ldrb	r3, [r3, #0]
     ce8:	2b2e      	cmp	r3, #46	; 0x2e
     cea:	d10e      	bne.n	d0a <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     cec:	68bb      	ldr	r3, [r7, #8]
     cee:	3301      	adds	r3, #1
     cf0:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     cf2:	f107 0310 	add.w	r3, r7, #16
     cf6:	4619      	mov	r1, r3
     cf8:	68b8      	ldr	r0, [r7, #8]
     cfa:	f7ff fd68 	bl	7ce <decstr_to_int>
     cfe:	4603      	mov	r3, r0
     d00:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     d02:	693b      	ldr	r3, [r7, #16]
     d04:	68ba      	ldr	r2, [r7, #8]
     d06:	4413      	add	r3, r2
     d08:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     d0a:	68bb      	ldr	r3, [r7, #8]
     d0c:	781b      	ldrb	r3, [r3, #0]
     d0e:	2b6c      	cmp	r3, #108	; 0x6c
     d10:	d10c      	bne.n	d2c <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     d12:	68bb      	ldr	r3, [r7, #8]
     d14:	3301      	adds	r3, #1
     d16:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     d18:	68bb      	ldr	r3, [r7, #8]
     d1a:	781b      	ldrb	r3, [r3, #0]
     d1c:	2b6c      	cmp	r3, #108	; 0x6c
     d1e:	d105      	bne.n	d2c <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     d20:	68bb      	ldr	r3, [r7, #8]
     d22:	3301      	adds	r3, #1
     d24:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     d26:	2301      	movs	r3, #1
     d28:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     d2c:	68bb      	ldr	r3, [r7, #8]
     d2e:	781b      	ldrb	r3, [r3, #0]
     d30:	3b46      	subs	r3, #70	; 0x46
     d32:	2b32      	cmp	r3, #50	; 0x32
     d34:	f200 8254 	bhi.w	11e0 <am_util_stdio_vsprintf+0x5b8>
     d38:	a201      	add	r2, pc, #4	; (adr r2, d40 <am_util_stdio_vsprintf+0x118>)
     d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     d3e:	bf00      	nop
     d40:	0000116b 	.word	0x0000116b
     d44:	000011e1 	.word	0x000011e1
     d48:	000011e1 	.word	0x000011e1
     d4c:	000011e1 	.word	0x000011e1
     d50:	000011e1 	.word	0x000011e1
     d54:	000011e1 	.word	0x000011e1
     d58:	000011e1 	.word	0x000011e1
     d5c:	000011e1 	.word	0x000011e1
     d60:	000011e1 	.word	0x000011e1
     d64:	000011e1 	.word	0x000011e1
     d68:	000011e1 	.word	0x000011e1
     d6c:	000011e1 	.word	0x000011e1
     d70:	000011e1 	.word	0x000011e1
     d74:	000011e1 	.word	0x000011e1
     d78:	000011e1 	.word	0x000011e1
     d7c:	000011e1 	.word	0x000011e1
     d80:	000011e1 	.word	0x000011e1
     d84:	000011e1 	.word	0x000011e1
     d88:	00000f07 	.word	0x00000f07
     d8c:	000011e1 	.word	0x000011e1
     d90:	000011e1 	.word	0x000011e1
     d94:	000011e1 	.word	0x000011e1
     d98:	000011e1 	.word	0x000011e1
     d9c:	000011e1 	.word	0x000011e1
     da0:	000011e1 	.word	0x000011e1
     da4:	000011e1 	.word	0x000011e1
     da8:	000011e1 	.word	0x000011e1
     dac:	000011e1 	.word	0x000011e1
     db0:	000011e1 	.word	0x000011e1
     db4:	00000e0d 	.word	0x00000e0d
     db8:	00001033 	.word	0x00001033
     dbc:	000011e1 	.word	0x000011e1
     dc0:	0000116b 	.word	0x0000116b
     dc4:	000011e1 	.word	0x000011e1
     dc8:	000011e1 	.word	0x000011e1
     dcc:	00001033 	.word	0x00001033
     dd0:	000011e1 	.word	0x000011e1
     dd4:	000011e1 	.word	0x000011e1
     dd8:	000011e1 	.word	0x000011e1
     ddc:	000011e1 	.word	0x000011e1
     de0:	000011e1 	.word	0x000011e1
     de4:	000011e1 	.word	0x000011e1
     de8:	000011e1 	.word	0x000011e1
     dec:	000011e1 	.word	0x000011e1
     df0:	000011e1 	.word	0x000011e1
     df4:	00000e33 	.word	0x00000e33
     df8:	000011e1 	.word	0x000011e1
     dfc:	00000fa1 	.word	0x00000fa1
     e00:	000011e1 	.word	0x000011e1
     e04:	000011e1 	.word	0x000011e1
     e08:	00000f01 	.word	0x00000f01
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
     e0c:	687b      	ldr	r3, [r7, #4]
     e0e:	1d1a      	adds	r2, r3, #4
     e10:	607a      	str	r2, [r7, #4]
     e12:	681b      	ldr	r3, [r3, #0]
     e14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
     e18:	68fb      	ldr	r3, [r7, #12]
     e1a:	2b00      	cmp	r3, #0
     e1c:	d005      	beq.n	e2a <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
     e1e:	68fb      	ldr	r3, [r7, #12]
     e20:	1c5a      	adds	r2, r3, #1
     e22:	60fa      	str	r2, [r7, #12]
     e24:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
     e28:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
     e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e2c:	3301      	adds	r3, #1
     e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     e30:	e1e6      	b.n	1200 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
     e32:	687b      	ldr	r3, [r7, #4]
     e34:	1d1a      	adds	r2, r3, #4
     e36:	607a      	str	r2, [r7, #4]
     e38:	681b      	ldr	r3, [r3, #0]
     e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
     e3c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
     e3e:	f7ff fdb4 	bl	9aa <simple_strlen>
     e42:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
     e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e46:	2b00      	cmp	r3, #0
     e48:	dd2e      	ble.n	ea8 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
     e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     e4e:	429a      	cmp	r2, r3
     e50:	d22a      	bcs.n	ea8 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     e52:	6bba      	ldr	r2, [r7, #56]	; 0x38
     e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e56:	1ad3      	subs	r3, r2, r3
     e58:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     e5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     e5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
     e60:	4619      	mov	r1, r3
     e62:	68f8      	ldr	r0, [r7, #12]
     e64:	f7ff fdbc 	bl	9e0 <padbuffer>
     e68:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     e6a:	68fb      	ldr	r3, [r7, #12]
     e6c:	2b00      	cmp	r3, #0
     e6e:	d001      	beq.n	e74 <am_util_stdio_vsprintf+0x24c>
     e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e72:	e000      	b.n	e76 <am_util_stdio_vsprintf+0x24e>
     e74:	2300      	movs	r3, #0
     e76:	68fa      	ldr	r2, [r7, #12]
     e78:	4413      	add	r3, r2
     e7a:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     e80:	4413      	add	r3, r2
     e82:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     e84:	2300      	movs	r3, #0
     e86:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
     e88:	e00e      	b.n	ea8 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
     e8a:	68fb      	ldr	r3, [r7, #12]
     e8c:	2b00      	cmp	r3, #0
     e8e:	d005      	beq.n	e9c <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
     e90:	68fb      	ldr	r3, [r7, #12]
     e92:	1c5a      	adds	r2, r3, #1
     e94:	60fa      	str	r2, [r7, #12]
     e96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     e98:	7812      	ldrb	r2, [r2, #0]
     e9a:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
     e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     e9e:	3301      	adds	r3, #1
     ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
     ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ea4:	3301      	adds	r3, #1
     ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
     ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     eaa:	781b      	ldrb	r3, [r3, #0]
     eac:	2b00      	cmp	r3, #0
     eae:	d1ec      	bne.n	e8a <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
     eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     eb2:	2b00      	cmp	r3, #0
     eb4:	f000 81a1 	beq.w	11fa <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
     eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     eba:	425b      	negs	r3, r3
     ebc:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
     ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     ec2:	429a      	cmp	r2, r3
     ec4:	f080 8199 	bcs.w	11fa <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     ec8:	6bba      	ldr	r2, [r7, #56]	; 0x38
     eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ecc:	1ad3      	subs	r3, r2, r3
     ece:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     ed0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     ed4:	6bba      	ldr	r2, [r7, #56]	; 0x38
     ed6:	4619      	mov	r1, r3
     ed8:	68f8      	ldr	r0, [r7, #12]
     eda:	f7ff fd81 	bl	9e0 <padbuffer>
     ede:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     ee0:	68fb      	ldr	r3, [r7, #12]
     ee2:	2b00      	cmp	r3, #0
     ee4:	d001      	beq.n	eea <am_util_stdio_vsprintf+0x2c2>
     ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ee8:	e000      	b.n	eec <am_util_stdio_vsprintf+0x2c4>
     eea:	2300      	movs	r3, #0
     eec:	68fa      	ldr	r2, [r7, #12]
     eee:	4413      	add	r3, r2
     ef0:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ef4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     ef6:	4413      	add	r3, r2
     ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     efa:	2300      	movs	r3, #0
     efc:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
     efe:	e17c      	b.n	11fa <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
     f00:	2301      	movs	r3, #1
     f02:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     f06:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     f0a:	2b00      	cmp	r3, #0
     f0c:	d00a      	beq.n	f24 <am_util_stdio_vsprintf+0x2fc>
     f0e:	687b      	ldr	r3, [r7, #4]
     f10:	3307      	adds	r3, #7
     f12:	f023 0307 	bic.w	r3, r3, #7
     f16:	f103 0208 	add.w	r2, r3, #8
     f1a:	607a      	str	r2, [r7, #4]
     f1c:	cb18      	ldmia	r3, {r3, r4}
     f1e:	e007      	b.n	f30 <am_util_stdio_vsprintf+0x308>
     f20:	10001900 	.word	0x10001900
                                      va_arg(pArgs, uint32_t);
     f24:	687b      	ldr	r3, [r7, #4]
     f26:	1d1a      	adds	r2, r3, #4
     f28:	607a      	str	r2, [r7, #4]
     f2a:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     f2c:	f04f 0400 	mov.w	r4, #0
     f30:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
     f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f36:	2b00      	cmp	r3, #0
     f38:	d01e      	beq.n	f78 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
     f3a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     f3e:	f7ff fc22 	bl	786 <ndigits_in_hex>
     f42:	4602      	mov	r2, r0
     f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f46:	1a9b      	subs	r3, r3, r2
     f48:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     f4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     f4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f50:	4619      	mov	r1, r3
     f52:	68f8      	ldr	r0, [r7, #12]
     f54:	f7ff fd44 	bl	9e0 <padbuffer>
     f58:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
     f5a:	68fb      	ldr	r3, [r7, #12]
     f5c:	2b00      	cmp	r3, #0
     f5e:	d001      	beq.n	f64 <am_util_stdio_vsprintf+0x33c>
     f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f62:	e000      	b.n	f66 <am_util_stdio_vsprintf+0x33e>
     f64:	2300      	movs	r3, #0
     f66:	68fa      	ldr	r2, [r7, #12]
     f68:	4413      	add	r3, r2
     f6a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
     f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f70:	4413      	add	r3, r2
     f72:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
     f74:	2300      	movs	r3, #0
     f76:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
     f78:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
     f7c:	68fa      	ldr	r2, [r7, #12]
     f7e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     f82:	f7ff fcb2 	bl	8ea <uint64_to_hexstr>
     f86:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
     f88:	68fb      	ldr	r3, [r7, #12]
     f8a:	2b00      	cmp	r3, #0
     f8c:	d003      	beq.n	f96 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
     f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f90:	68fa      	ldr	r2, [r7, #12]
     f92:	4413      	add	r3, r2
     f94:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
     f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f9a:	4413      	add	r3, r2
     f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     f9e:	e12f      	b.n	1200 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     fa0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     fa4:	2b00      	cmp	r3, #0
     fa6:	d008      	beq.n	fba <am_util_stdio_vsprintf+0x392>
     fa8:	687b      	ldr	r3, [r7, #4]
     faa:	3307      	adds	r3, #7
     fac:	f023 0307 	bic.w	r3, r3, #7
     fb0:	f103 0208 	add.w	r2, r3, #8
     fb4:	607a      	str	r2, [r7, #4]
     fb6:	cb18      	ldmia	r3, {r3, r4}
     fb8:	e005      	b.n	fc6 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
     fba:	687b      	ldr	r3, [r7, #4]
     fbc:	1d1a      	adds	r2, r3, #4
     fbe:	607a      	str	r2, [r7, #4]
     fc0:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     fc2:	f04f 0400 	mov.w	r4, #0
     fc6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
     fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fcc:	2b00      	cmp	r3, #0
     fce:	d01e      	beq.n	100e <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
     fd0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     fd4:	f7ff fb99 	bl	70a <ndigits_in_u64>
     fd8:	4602      	mov	r2, r0
     fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fdc:	1a9b      	subs	r3, r3, r2
     fde:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     fe0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     fe4:	6bba      	ldr	r2, [r7, #56]	; 0x38
     fe6:	4619      	mov	r1, r3
     fe8:	68f8      	ldr	r0, [r7, #12]
     fea:	f7ff fcf9 	bl	9e0 <padbuffer>
     fee:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
     ff0:	68fb      	ldr	r3, [r7, #12]
     ff2:	2b00      	cmp	r3, #0
     ff4:	d001      	beq.n	ffa <am_util_stdio_vsprintf+0x3d2>
     ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ff8:	e000      	b.n	ffc <am_util_stdio_vsprintf+0x3d4>
     ffa:	2300      	movs	r3, #0
     ffc:	68fa      	ldr	r2, [r7, #12]
     ffe:	4413      	add	r3, r2
    1000:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1004:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1006:	4413      	add	r3, r2
    1008:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    100a:	2300      	movs	r3, #0
    100c:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    100e:	68fa      	ldr	r2, [r7, #12]
    1010:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1014:	f7ff fc21 	bl	85a <uint64_to_str>
    1018:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    101a:	68fb      	ldr	r3, [r7, #12]
    101c:	2b00      	cmp	r3, #0
    101e:	d003      	beq.n	1028 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    1020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1022:	68fa      	ldr	r2, [r7, #12]
    1024:	4413      	add	r3, r2
    1026:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    102a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    102c:	4413      	add	r3, r2
    102e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1030:	e0e6      	b.n	1200 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1032:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1036:	2b00      	cmp	r3, #0
    1038:	d008      	beq.n	104c <am_util_stdio_vsprintf+0x424>
    103a:	687b      	ldr	r3, [r7, #4]
    103c:	3307      	adds	r3, #7
    103e:	f023 0307 	bic.w	r3, r3, #7
    1042:	f103 0208 	add.w	r2, r3, #8
    1046:	607a      	str	r2, [r7, #4]
    1048:	cb18      	ldmia	r3, {r3, r4}
    104a:	e005      	b.n	1058 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    104c:	687b      	ldr	r3, [r7, #4]
    104e:	1d1a      	adds	r2, r3, #4
    1050:	607a      	str	r2, [r7, #4]
    1052:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1054:	ea4f 74e3 	mov.w	r4, r3, asr #31
    1058:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    105c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1060:	2b00      	cmp	r3, #0
    1062:	f174 0300 	sbcs.w	r3, r4, #0
    1066:	da0a      	bge.n	107e <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    1068:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    106c:	425b      	negs	r3, r3
    106e:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    1072:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    1076:	2301      	movs	r3, #1
    1078:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    107c:	e006      	b.n	108c <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    107e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1082:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    1086:	2300      	movs	r3, #0
    1088:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    108c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    108e:	2b00      	cmp	r3, #0
    1090:	d04a      	beq.n	1128 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    1092:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    1096:	4618      	mov	r0, r3
    1098:	4621      	mov	r1, r4
    109a:	f7ff fb57 	bl	74c <ndigits_in_i64>
    109e:	4602      	mov	r2, r0
    10a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10a2:	1a9b      	subs	r3, r3, r2
    10a4:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    10a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    10aa:	2b00      	cmp	r3, #0
    10ac:	d011      	beq.n	10d2 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    10ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10b0:	3b01      	subs	r3, #1
    10b2:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    10b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    10b8:	2b30      	cmp	r3, #48	; 0x30
    10ba:	d10a      	bne.n	10d2 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    10bc:	68fb      	ldr	r3, [r7, #12]
    10be:	2b00      	cmp	r3, #0
    10c0:	d004      	beq.n	10cc <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    10c2:	68fb      	ldr	r3, [r7, #12]
    10c4:	1c5a      	adds	r2, r3, #1
    10c6:	60fa      	str	r2, [r7, #12]
    10c8:	222d      	movs	r2, #45	; 0x2d
    10ca:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    10cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10ce:	3301      	adds	r3, #1
    10d0:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    10d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    10d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
    10d8:	4619      	mov	r1, r3
    10da:	68f8      	ldr	r0, [r7, #12]
    10dc:	f7ff fc80 	bl	9e0 <padbuffer>
    10e0:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    10e2:	68fb      	ldr	r3, [r7, #12]
    10e4:	2b00      	cmp	r3, #0
    10e6:	d001      	beq.n	10ec <am_util_stdio_vsprintf+0x4c4>
    10e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10ea:	e000      	b.n	10ee <am_util_stdio_vsprintf+0x4c6>
    10ec:	2300      	movs	r3, #0
    10ee:	68fa      	ldr	r2, [r7, #12]
    10f0:	4413      	add	r3, r2
    10f2:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    10f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10f8:	4413      	add	r3, r2
    10fa:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    10fc:	2300      	movs	r3, #0
    10fe:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    1100:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1104:	2b00      	cmp	r3, #0
    1106:	d01e      	beq.n	1146 <am_util_stdio_vsprintf+0x51e>
    1108:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    110c:	2b20      	cmp	r3, #32
    110e:	d11a      	bne.n	1146 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    1110:	68fb      	ldr	r3, [r7, #12]
    1112:	2b00      	cmp	r3, #0
    1114:	d004      	beq.n	1120 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    1116:	68fb      	ldr	r3, [r7, #12]
    1118:	1c5a      	adds	r2, r3, #1
    111a:	60fa      	str	r2, [r7, #12]
    111c:	222d      	movs	r2, #45	; 0x2d
    111e:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    1120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1122:	3301      	adds	r3, #1
    1124:	63fb      	str	r3, [r7, #60]	; 0x3c
    1126:	e00e      	b.n	1146 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    1128:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    112c:	2b00      	cmp	r3, #0
    112e:	d00a      	beq.n	1146 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    1130:	68fb      	ldr	r3, [r7, #12]
    1132:	2b00      	cmp	r3, #0
    1134:	d004      	beq.n	1140 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    1136:	68fb      	ldr	r3, [r7, #12]
    1138:	1c5a      	adds	r2, r3, #1
    113a:	60fa      	str	r2, [r7, #12]
    113c:	222d      	movs	r2, #45	; 0x2d
    113e:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    1140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1142:	3301      	adds	r3, #1
    1144:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1146:	68fa      	ldr	r2, [r7, #12]
    1148:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    114c:	f7ff fb85 	bl	85a <uint64_to_str>
    1150:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1152:	68fb      	ldr	r3, [r7, #12]
    1154:	2b00      	cmp	r3, #0
    1156:	d003      	beq.n	1160 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    1158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    115a:	68fa      	ldr	r2, [r7, #12]
    115c:	4413      	add	r3, r2
    115e:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1162:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1164:	4413      	add	r3, r2
    1166:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1168:	e04a      	b.n	1200 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    116a:	68fb      	ldr	r3, [r7, #12]
    116c:	2b00      	cmp	r3, #0
    116e:	d046      	beq.n	11fe <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    1170:	687b      	ldr	r3, [r7, #4]
    1172:	3307      	adds	r3, #7
    1174:	f023 0307 	bic.w	r3, r3, #7
    1178:	f103 0208 	add.w	r2, r3, #8
    117c:	607a      	str	r2, [r7, #4]
    117e:	cb18      	ldmia	r3, {r3, r4}
    1180:	4618      	mov	r0, r3
    1182:	4621      	mov	r1, r4
    1184:	f7fe ff9c 	bl	c0 <__aeabi_d2f>
    1188:	4603      	mov	r3, r0
    118a:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    118c:	68fb      	ldr	r3, [r7, #12]
    118e:	2214      	movs	r2, #20
    1190:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    1192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1194:	68f9      	ldr	r1, [r7, #12]
    1196:	6978      	ldr	r0, [r7, #20]
    1198:	f7ff fc48 	bl	a2c <ftoa>
    119c:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    119e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11a0:	2b00      	cmp	r3, #0
    11a2:	da14      	bge.n	11ce <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    11a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11a6:	f1b3 3fff 	cmp.w	r3, #4294967295
    11aa:	d102      	bne.n	11b2 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    11ac:	4b1e      	ldr	r3, [pc, #120]	; (1228 <am_util_stdio_vsprintf+0x600>)
    11ae:	62bb      	str	r3, [r7, #40]	; 0x28
    11b0:	e008      	b.n	11c4 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    11b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11b4:	f113 0f02 	cmn.w	r3, #2
    11b8:	d102      	bne.n	11c0 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    11ba:	4b1c      	ldr	r3, [pc, #112]	; (122c <am_util_stdio_vsprintf+0x604>)
    11bc:	62bb      	str	r3, [r7, #40]	; 0x28
    11be:	e001      	b.n	11c4 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    11c0:	4b1b      	ldr	r3, [pc, #108]	; (1230 <am_util_stdio_vsprintf+0x608>)
    11c2:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    11c4:	68fb      	ldr	r3, [r7, #12]
    11c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    11c8:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    11ca:	2303      	movs	r3, #3
    11cc:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    11ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    11d2:	4413      	add	r3, r2
    11d4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    11d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11d8:	68fa      	ldr	r2, [r7, #12]
    11da:	4413      	add	r3, r2
    11dc:	60fb      	str	r3, [r7, #12]
                }
                break;
    11de:	e00e      	b.n	11fe <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    11e0:	68fb      	ldr	r3, [r7, #12]
    11e2:	2b00      	cmp	r3, #0
    11e4:	d005      	beq.n	11f2 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    11e6:	68fb      	ldr	r3, [r7, #12]
    11e8:	1c5a      	adds	r2, r3, #1
    11ea:	60fa      	str	r2, [r7, #12]
    11ec:	68ba      	ldr	r2, [r7, #8]
    11ee:	7812      	ldrb	r2, [r2, #0]
    11f0:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    11f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11f4:	3301      	adds	r3, #1
    11f6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    11f8:	e002      	b.n	1200 <am_util_stdio_vsprintf+0x5d8>
                break;
    11fa:	bf00      	nop
    11fc:	e000      	b.n	1200 <am_util_stdio_vsprintf+0x5d8>
                break;
    11fe:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    1200:	68bb      	ldr	r3, [r7, #8]
    1202:	3301      	adds	r3, #1
    1204:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    1206:	68bb      	ldr	r3, [r7, #8]
    1208:	781b      	ldrb	r3, [r3, #0]
    120a:	2b00      	cmp	r3, #0
    120c:	f47f ad17 	bne.w	c3e <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    1210:	68fb      	ldr	r3, [r7, #12]
    1212:	2b00      	cmp	r3, #0
    1214:	d002      	beq.n	121c <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    1216:	68fb      	ldr	r3, [r7, #12]
    1218:	2200      	movs	r2, #0
    121a:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    121c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    121e:	4618      	mov	r0, r3
    1220:	3754      	adds	r7, #84	; 0x54
    1222:	46bd      	mov	sp, r7
    1224:	bd90      	pop	{r4, r7, pc}
    1226:	bf00      	nop
    1228:	00302e30 	.word	0x00302e30
    122c:	00232e23 	.word	0x00232e23
    1230:	003f2e3f 	.word	0x003f2e3f

00001234 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    1234:	b40f      	push	{r0, r1, r2, r3}
    1236:	b580      	push	{r7, lr}
    1238:	b082      	sub	sp, #8
    123a:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    123c:	f107 0314 	add.w	r3, r7, #20
    1240:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    1242:	683a      	ldr	r2, [r7, #0]
    1244:	6939      	ldr	r1, [r7, #16]
    1246:	4808      	ldr	r0, [pc, #32]	; (1268 <am_util_stdio_printf+0x34>)
    1248:	f7ff fcee 	bl	c28 <am_util_stdio_vsprintf>
    124c:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    124e:	4b07      	ldr	r3, [pc, #28]	; (126c <am_util_stdio_printf+0x38>)
    1250:	681b      	ldr	r3, [r3, #0]
    1252:	4805      	ldr	r0, [pc, #20]	; (1268 <am_util_stdio_printf+0x34>)
    1254:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    1256:	687b      	ldr	r3, [r7, #4]
}
    1258:	4618      	mov	r0, r3
    125a:	3708      	adds	r7, #8
    125c:	46bd      	mov	sp, r7
    125e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    1262:	b004      	add	sp, #16
    1264:	4770      	bx	lr
    1266:	bf00      	nop
    1268:	10001800 	.word	0x10001800
    126c:	10001908 	.word	0x10001908

00001270 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    1270:	b580      	push	{r7, lr}
    1272:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    1274:	4802      	ldr	r0, [pc, #8]	; (1280 <am_util_stdio_terminal_clear+0x10>)
    1276:	f7ff ffdd 	bl	1234 <am_util_stdio_printf>
}
    127a:	bf00      	nop
    127c:	bd80      	pop	{r7, pc}
    127e:	bf00      	nop
    1280:	000018b8 	.word	0x000018b8

00001284 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1284:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    1286:	f000 f915 	bl	14b4 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    128a:	f000 f937 	bl	14fc <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    128e:	f000 f9b3 	bl	15f8 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    1292:	2001      	movs	r0, #1
    1294:	f000 f942 	bl	151c <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1298:	2001      	movs	r0, #1
    129a:	f000 f86f 	bl	137c <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    129e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    12a2:	f000 b949 	b.w	1538 <am_hal_rtc_osc_disable>
    12a6:	bf00      	nop

000012a8 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    12a8:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    12aa:	4b17      	ldr	r3, [pc, #92]	; (1308 <am_bsp_debug_printf_enable+0x60>)
    12ac:	681c      	ldr	r4, [r3, #0]
    12ae:	f014 0401 	ands.w	r4, r4, #1
{
    12b2:	b087      	sub	sp, #28
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    12b4:	d001      	beq.n	12ba <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    12b6:	b007      	add	sp, #28
    12b8:	bd30      	pop	{r4, r5, pc}
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    12ba:	4a14      	ldr	r2, [pc, #80]	; (130c <am_bsp_debug_printf_enable+0x64>)
    12bc:	4914      	ldr	r1, [pc, #80]	; (1310 <am_bsp_debug_printf_enable+0x68>)
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    12be:	4d15      	ldr	r5, [pc, #84]	; (1314 <am_bsp_debug_printf_enable+0x6c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    12c0:	6011      	str	r1, [r2, #0]
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    12c2:	a806      	add	r0, sp, #24
    12c4:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    12c8:	f000 f93e 	bl	1548 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    12cc:	f000 f876 	bl	13bc <am_hal_interrupt_master_disable>
    12d0:	4a11      	ldr	r2, [pc, #68]	; (1318 <am_bsp_debug_printf_enable+0x70>)
    12d2:	9000      	str	r0, [sp, #0]
    12d4:	4d11      	ldr	r5, [pc, #68]	; (131c <am_bsp_debug_printf_enable+0x74>)
    12d6:	4912      	ldr	r1, [pc, #72]	; (1320 <am_bsp_debug_printf_enable+0x78>)
    12d8:	2073      	movs	r0, #115	; 0x73
    12da:	6010      	str	r0, [r2, #0]
    12dc:	682b      	ldr	r3, [r5, #0]
    12de:	4811      	ldr	r0, [pc, #68]	; (1324 <am_bsp_debug_printf_enable+0x7c>)
    12e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    12e4:	602b      	str	r3, [r5, #0]
    12e6:	6805      	ldr	r5, [r0, #0]
    12e8:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    12ec:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    12f0:	6003      	str	r3, [r0, #0]
    12f2:	6808      	ldr	r0, [r1, #0]
    12f4:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    12f8:	600d      	str	r5, [r1, #0]
    12fa:	6014      	str	r4, [r2, #0]
    12fc:	9800      	ldr	r0, [sp, #0]
    12fe:	f000 f861 	bl	13c4 <am_hal_interrupt_master_set>
}
    1302:	b007      	add	sp, #28
    1304:	bd30      	pop	{r4, r5, pc}
    1306:	bf00      	nop
    1308:	10001904 	.word	0x10001904
    130c:	e0000e80 	.word	0xe0000e80
    1310:	00150511 	.word	0x00150511
    1314:	000f4240 	.word	0x000f4240
    1318:	40010060 	.word	0x40010060
    131c:	40010054 	.word	0x40010054
    1320:	40010108 	.word	0x40010108
    1324:	40010028 	.word	0x40010028

00001328 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    1328:	f000 b886 	b.w	1438 <am_hal_itm_print>

0000132c <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    132c:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    132e:	4604      	mov	r4, r0
    1330:	b120      	cbz	r0, 133c <am_hal_clkgen_sysclk_select+0x10>
    1332:	4a06      	ldr	r2, [pc, #24]	; (134c <am_hal_clkgen_sysclk_select+0x20>)
    1334:	4806      	ldr	r0, [pc, #24]	; (1350 <am_hal_clkgen_sysclk_select+0x24>)
    1336:	2153      	movs	r1, #83	; 0x53
    1338:	f000 f82a 	bl	1390 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    133c:	4b05      	ldr	r3, [pc, #20]	; (1354 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the required operating value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    133e:	4906      	ldr	r1, [pc, #24]	; (1358 <am_hal_clkgen_sysclk_select+0x2c>)
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1340:	2047      	movs	r0, #71	; 0x47

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    1342:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1344:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1346:	600c      	str	r4, [r1, #0]
    AM_REG(CLKGEN, CLKKEY) = 0;
    1348:	601a      	str	r2, [r3, #0]
    134a:	bd10      	pop	{r4, pc}
    134c:	000018cc 	.word	0x000018cc
    1350:	00001904 	.word	0x00001904
    1354:	40004014 	.word	0x40004014
    1358:	40004018 	.word	0x40004018

0000135c <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    135c:	4b04      	ldr	r3, [pc, #16]	; (1370 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    135e:	4905      	ldr	r1, [pc, #20]	; (1374 <am_hal_clkgen_sysclk_get+0x18>)
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1360:	681a      	ldr	r2, [r3, #0]
            return 48000000;
    1362:	4805      	ldr	r0, [pc, #20]	; (1378 <am_hal_clkgen_sysclk_get+0x1c>)
    switch ( ui32ClockSetting )
    1364:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    1368:	bf08      	it	eq
    136a:	4608      	moveq	r0, r1
    136c:	4770      	bx	lr
    136e:	bf00      	nop
    1370:	40004018 	.word	0x40004018
    1374:	02dc6c00 	.word	0x02dc6c00
    1378:	016e3600 	.word	0x016e3600

0000137c <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    137c:	0783      	lsls	r3, r0, #30
    137e:	d003      	beq.n	1388 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    1380:	4b02      	ldr	r3, [pc, #8]	; (138c <am_hal_clkgen_osc_stop+0x10>)
    1382:	681a      	ldr	r2, [r3, #0]
    1384:	4310      	orrs	r0, r2
    1386:	6018      	str	r0, [r3, #0]
    1388:	4770      	bx	lr
    138a:	bf00      	nop
    138c:	4000400c 	.word	0x4000400c

00001390 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    1390:	e7fe      	b.n	1390 <am_hal_debug_error>
    1392:	bf00      	nop

00001394 <am_hal_flash_mass_erase>:
//
//*****************************************************************************
int
am_hal_flash_mass_erase(uint32_t ui32Value, uint32_t ui32FlashInst)
{
    return g_am_hal_flash.flash_mass_erase(ui32Value, ui32FlashInst);
    1394:	4b00      	ldr	r3, [pc, #0]	; (1398 <am_hal_flash_mass_erase+0x4>)
    1396:	4718      	bx	r3
    1398:	0800004d 	.word	0x0800004d

0000139c <am_hal_flash_page_erase>:
//*****************************************************************************
int
am_hal_flash_page_erase(uint32_t ui32Value, uint32_t ui32FlashInst,
                        uint32_t ui32PageNum)
{
    return g_am_hal_flash.flash_page_erase(ui32Value,
    139c:	4b00      	ldr	r3, [pc, #0]	; (13a0 <am_hal_flash_page_erase+0x4>)
    139e:	4718      	bx	r3
    13a0:	08000051 	.word	0x08000051

000013a4 <am_hal_flash_program_main>:
//
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32Value, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
    13a4:	b410      	push	{r4}
    return g_am_hal_flash.flash_program_main(ui32Value, pui32Src,
    13a6:	4c02      	ldr	r4, [pc, #8]	; (13b0 <am_hal_flash_program_main+0xc>)
    13a8:	46a4      	mov	ip, r4
                                             pui32Dst, ui32NumWords);
}
    13aa:	f85d 4b04 	ldr.w	r4, [sp], #4
    return g_am_hal_flash.flash_program_main(ui32Value, pui32Src,
    13ae:	4760      	bx	ip
    13b0:	08000055 	.word	0x08000055

000013b4 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    13b4:	4b00      	ldr	r3, [pc, #0]	; (13b8 <am_hal_flash_delay+0x4>)
    13b6:	4718      	bx	r3
    13b8:	0800009d 	.word	0x0800009d

000013bc <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    13bc:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    13c0:	b672      	cpsid	i
    __asm("    bx lr");
    13c2:	4770      	bx	lr

000013c4 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    13c4:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    13c8:	4770      	bx	lr
    13ca:	bf00      	nop

000013cc <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    13cc:	4b0d      	ldr	r3, [pc, #52]	; (1404 <am_hal_itm_enable+0x38>)
    13ce:	6818      	ldr	r0, [r3, #0]
    13d0:	07c2      	lsls	r2, r0, #31
    13d2:	d416      	bmi.n	1402 <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    13d4:	4a0c      	ldr	r2, [pc, #48]	; (1408 <am_hal_itm_enable+0x3c>)
    13d6:	6811      	ldr	r1, [r2, #0]
{
    13d8:	b430      	push	{r4, r5}
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    13da:	f041 7480 	orr.w	r4, r1, #16777216	; 0x1000000
    13de:	6014      	str	r4, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    13e0:	6815      	ldr	r5, [r2, #0]
    13e2:	01eb      	lsls	r3, r5, #7
    13e4:	d5fc      	bpl.n	13e0 <am_hal_itm_enable+0x14>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    13e6:	4809      	ldr	r0, [pc, #36]	; (140c <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    13e8:	4c09      	ldr	r4, [pc, #36]	; (1410 <am_hal_itm_enable+0x44>)
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    13ea:	4d0a      	ldr	r5, [pc, #40]	; (1414 <am_hal_itm_enable+0x48>)
    13ec:	6005      	str	r5, [r0, #0]
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    13ee:	250f      	movs	r5, #15
    13f0:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    13f2:	bc30      	pop	{r4, r5}
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    13f4:	4908      	ldr	r1, [pc, #32]	; (1418 <am_hal_itm_enable+0x4c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    13f6:	4b09      	ldr	r3, [pc, #36]	; (141c <am_hal_itm_enable+0x50>)
    13f8:	4a09      	ldr	r2, [pc, #36]	; (1420 <am_hal_itm_enable+0x54>)
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    13fa:	f04f 30ff 	mov.w	r0, #4294967295
    13fe:	6008      	str	r0, [r1, #0]
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1400:	601a      	str	r2, [r3, #0]
}
    1402:	4770      	bx	lr
    1404:	10001904 	.word	0x10001904
    1408:	e000edfc 	.word	0xe000edfc
    140c:	e0000fb0 	.word	0xe0000fb0
    1410:	e0000e40 	.word	0xe0000e40
    1414:	c5acce55 	.word	0xc5acce55
    1418:	e0000e00 	.word	0xe0000e00
    141c:	e0000e80 	.word	0xe0000e80
    1420:	00150511 	.word	0x00150511

00001424 <am_hal_itm_not_busy>:
am_hal_itm_not_busy(void)
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
    while (AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1));
    1424:	4a03      	ldr	r2, [pc, #12]	; (1434 <am_hal_itm_not_busy+0x10>)
    1426:	6813      	ldr	r3, [r2, #0]
    1428:	021b      	lsls	r3, r3, #8
    142a:	d4fc      	bmi.n	1426 <am_hal_itm_not_busy+0x2>

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    142c:	f44f 7047 	mov.w	r0, #796	; 0x31c
    1430:	f7ff bfc0 	b.w	13b4 <am_hal_flash_delay>
    1434:	e0000e80 	.word	0xe0000e80

00001438 <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1438:	7803      	ldrb	r3, [r0, #0]
    143a:	b1b3      	cbz	r3, 146a <am_hal_itm_print+0x32>
{
    143c:	b410      	push	{r4}
    143e:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    1440:	2400      	movs	r4, #0
    1442:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    1446:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    1448:	2900      	cmp	r1, #0
    144a:	d1fa      	bne.n	1442 <am_hal_itm_print+0xa>
    144c:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    144e:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    1452:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    1456:	f8dc 3000 	ldr.w	r3, [ip]
    145a:	2b00      	cmp	r3, #0
    145c:	d0fb      	beq.n	1456 <am_hal_itm_print+0x1e>
    while (ui32Length)
    145e:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    1460:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    1464:	d1f5      	bne.n	1452 <am_hal_itm_print+0x1a>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    1466:	f85d 4b04 	ldr.w	r4, [sp], #4
    146a:	4770      	bx	lr

0000146c <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    146c:	490d      	ldr	r1, [pc, #52]	; (14a4 <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    146e:	4b0e      	ldr	r3, [pc, #56]	; (14a8 <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1470:	4a0e      	ldr	r2, [pc, #56]	; (14ac <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1472:	681b      	ldr	r3, [r3, #0]
{
    1474:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1476:	680d      	ldr	r5, [r1, #0]
    1478:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    147a:	6815      	ldr	r5, [r2, #0]
    147c:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    147e:	4c0c      	ldr	r4, [pc, #48]	; (14b0 <am_hal_mcuctrl_fault_status+0x44>)
    1480:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1482:	4329      	orrs	r1, r5
    1484:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1486:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1488:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    148c:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    148e:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1490:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1494:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1498:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    149a:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    149c:	6142      	str	r2, [r0, #20]
}
    149e:	bc70      	pop	{r4, r5, r6}
    14a0:	4770      	bx	lr
    14a2:	bf00      	nop
    14a4:	400201c4 	.word	0x400201c4
    14a8:	400201cc 	.word	0x400201cc
    14ac:	400201c0 	.word	0x400201c0
    14b0:	400201c8 	.word	0x400201c8

000014b4 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    14b4:	4b0f      	ldr	r3, [pc, #60]	; (14f4 <am_hal_pwrctrl_bucks_init+0x40>)
    14b6:	681a      	ldr	r2, [r3, #0]
    14b8:	0792      	lsls	r2, r2, #30
    14ba:	d502      	bpl.n	14c2 <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    14bc:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    14be:	07c3      	lsls	r3, r0, #31
    14c0:	d40e      	bmi.n	14e0 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    14c2:	4b0d      	ldr	r3, [pc, #52]	; (14f8 <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    14c4:	4a0b      	ldr	r2, [pc, #44]	; (14f4 <am_hal_pwrctrl_bucks_init+0x40>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    14c6:	6819      	ldr	r1, [r3, #0]
    14c8:	f041 0002 	orr.w	r0, r1, #2
    14cc:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    14ce:	6819      	ldr	r1, [r3, #0]
    14d0:	f041 0001 	orr.w	r0, r1, #1
    14d4:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    14d6:	6813      	ldr	r3, [r2, #0]
    14d8:	f003 0103 	and.w	r1, r3, #3
    14dc:	2903      	cmp	r1, #3
    14de:	d1fa      	bne.n	14d6 <am_hal_pwrctrl_bucks_init+0x22>
    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    14e0:	4a04      	ldr	r2, [pc, #16]	; (14f4 <am_hal_pwrctrl_bucks_init+0x40>)
    14e2:	6810      	ldr	r0, [r2, #0]
    14e4:	f000 0303 	and.w	r3, r0, #3
    14e8:	2b03      	cmp	r3, #3
    14ea:	d1fa      	bne.n	14e2 <am_hal_pwrctrl_bucks_init+0x2e>
    am_hal_flash_delay(200 / 3);
    14ec:	2042      	movs	r0, #66	; 0x42
    14ee:	f7ff bf61 	b.w	13b4 <am_hal_flash_delay>
    14f2:	bf00      	nop
    14f4:	40021004 	.word	0x40021004
    14f8:	40021000 	.word	0x40021000

000014fc <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    14fc:	4905      	ldr	r1, [pc, #20]	; (1514 <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    14fe:	4a06      	ldr	r2, [pc, #24]	; (1518 <am_hal_pwrctrl_low_power_init+0x1c>)
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1500:	680b      	ldr	r3, [r1, #0]
    1502:	f043 0006 	orr.w	r0, r3, #6
    1506:	6008      	str	r0, [r1, #0]
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1508:	6811      	ldr	r1, [r2, #0]
    150a:	f021 0304 	bic.w	r3, r1, #4
    150e:	6013      	str	r3, [r2, #0]
    1510:	4770      	bx	lr
    1512:	bf00      	nop
    1514:	40021018 	.word	0x40021018
    1518:	40021000 	.word	0x40021000

0000151c <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    151c:	4a05      	ldr	r2, [pc, #20]	; (1534 <am_hal_rtc_osc_select+0x18>)
    151e:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    1520:	b918      	cbnz	r0, 152a <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    1522:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1526:	6010      	str	r0, [r2, #0]
    1528:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    152a:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    152e:	6011      	str	r1, [r2, #0]
    1530:	4770      	bx	lr
    1532:	bf00      	nop
    1534:	4000400c 	.word	0x4000400c

00001538 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    1538:	4a02      	ldr	r2, [pc, #8]	; (1544 <am_hal_rtc_osc_disable+0xc>)
    153a:	6813      	ldr	r3, [r2, #0]
    153c:	f043 0010 	orr.w	r0, r3, #16
    1540:	6010      	str	r0, [r2, #0]
    1542:	4770      	bx	lr
    1544:	40004050 	.word	0x40004050

00001548 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    1548:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    154a:	4a23      	ldr	r2, [pc, #140]	; (15d8 <am_hal_tpiu_enable+0x90>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    154c:	6803      	ldr	r3, [r0, #0]
    AM_REG(TPIU, FFCR) = 0;
    154e:	2100      	movs	r1, #0
    1550:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    1552:	b33b      	cbz	r3, 15a4 <am_hal_tpiu_enable+0x5c>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1554:	f5a2 7c40 	sub.w	ip, r2, #768	; 0x300
    1558:	2101      	movs	r1, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    155a:	4c20      	ldr	r4, [pc, #128]	; (15dc <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    155c:	4d20      	ldr	r5, [pc, #128]	; (15e0 <am_hal_tpiu_enable+0x98>)
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    155e:	f8cc 1000 	str.w	r1, [ip]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1562:	f5a3 4e61 	sub.w	lr, r3, #57600	; 0xe100
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1566:	45a6      	cmp	lr, r4
    1568:	bf94      	ite	ls
    156a:	461c      	movls	r4, r3
    156c:	462c      	movhi	r4, r5
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    156e:	f7ff fef5 	bl	135c <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    1572:	1c43      	adds	r3, r0, #1
    1574:	d02d      	beq.n	15d2 <am_hal_tpiu_enable+0x8a>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    1576:	08c2      	lsrs	r2, r0, #3
    1578:	fbb2 f3f4 	udiv	r3, r2, r4
    157c:	1e5d      	subs	r5, r3, #1
    157e:	b2a8      	uxth	r0, r5
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1580:	4a18      	ldr	r2, [pc, #96]	; (15e4 <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1582:	4c19      	ldr	r4, [pc, #100]	; (15e8 <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1584:	4b19      	ldr	r3, [pc, #100]	; (15ec <am_hal_tpiu_enable+0xa4>)
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1586:	491a      	ldr	r1, [pc, #104]	; (15f0 <am_hal_tpiu_enable+0xa8>)
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1588:	6010      	str	r0, [r2, #0]
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    158a:	2502      	movs	r5, #2
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    158c:	2000      	movs	r0, #0
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    158e:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1592:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1594:	6008      	str	r0, [r1, #0]
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1596:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1598:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    159c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    15a0:	f7ff bf08 	b.w	13b4 <am_hal_flash_delay>
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    15a4:	4c0f      	ldr	r4, [pc, #60]	; (15e4 <am_hal_tpiu_enable+0x9c>)
    15a6:	6905      	ldr	r5, [r0, #16]
    15a8:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    15aa:	6882      	ldr	r2, [r0, #8]
    15ac:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    15b0:	68c3      	ldr	r3, [r0, #12]
    15b2:	4c10      	ldr	r4, [pc, #64]	; (15f4 <am_hal_tpiu_enable+0xac>)
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    15b4:	490d      	ldr	r1, [pc, #52]	; (15ec <am_hal_tpiu_enable+0xa4>)
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    15b6:	1e5d      	subs	r5, r3, #1
    15b8:	2201      	movs	r2, #1
    15ba:	40aa      	lsls	r2, r5
    15bc:	6022      	str	r2, [r4, #0]
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    15be:	6840      	ldr	r0, [r0, #4]
    15c0:	680b      	ldr	r3, [r1, #0]
    15c2:	4303      	orrs	r3, r0
    15c4:	600b      	str	r3, [r1, #0]
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    15c6:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    15ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    15ce:	f7ff bef1 	b.w	13b4 <am_hal_flash_delay>
    15d2:	2005      	movs	r0, #5
    15d4:	e7d4      	b.n	1580 <am_hal_tpiu_enable+0x38>
    15d6:	bf00      	nop
    15d8:	e0040304 	.word	0xe0040304
    15dc:	001da380 	.word	0x001da380
    15e0:	000f4240 	.word	0x000f4240
    15e4:	e0040010 	.word	0xe0040010
    15e8:	e00400f0 	.word	0xe00400f0
    15ec:	40020250 	.word	0x40020250
    15f0:	e0040f00 	.word	0xe0040f00
    15f4:	e0040004 	.word	0xe0040004

000015f8 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    15f8:	4b01      	ldr	r3, [pc, #4]	; (1600 <am_hal_vcomp_disable+0x8>)
    15fa:	2237      	movs	r2, #55	; 0x37
    15fc:	601a      	str	r2, [r3, #0]
    15fe:	4770      	bx	lr
    1600:	4000c008 	.word	0x4000c008
    1604:	73616c46 	.word	0x73616c46
    1608:	72572068 	.word	0x72572068
    160c:	20657469 	.word	0x20657469
    1610:	6d617845 	.word	0x6d617845
    1614:	0a656c70 	.word	0x0a656c70
    1618:	00000000 	.word	0x00000000
    161c:	2e2e2020 	.word	0x2e2e2020
    1620:	7265202e 	.word	0x7265202e
    1624:	6e697361 	.word	0x6e697361
    1628:	6c612067 	.word	0x6c612067
    162c:	666f206c 	.word	0x666f206c
    1630:	616c6620 	.word	0x616c6620
    1634:	69206873 	.word	0x69206873
    1638:	6174736e 	.word	0x6174736e
    163c:	2065636e 	.word	0x2065636e
    1640:	0a2e6425 	.word	0x0a2e6425
    1644:	00000000 	.word	0x00000000
    1648:	53414c46 	.word	0x53414c46
    164c:	414d5f48 	.word	0x414d5f48
    1650:	455f5353 	.word	0x455f5353
    1654:	45534152 	.word	0x45534152
    1658:	32336920 	.word	0x32336920
    165c:	75746552 	.word	0x75746552
    1660:	6f436e72 	.word	0x6f436e72
    1664:	3d206564 	.word	0x3d206564
    1668:	78302020 	.word	0x78302020
    166c:	0a2e7825 	.word	0x0a2e7825
    1670:	00000000 	.word	0x00000000
    1674:	2e2e2020 	.word	0x2e2e2020
    1678:	7270202e 	.word	0x7270202e
    167c:	6172676f 	.word	0x6172676f
    1680:	6e696d6d 	.word	0x6e696d6d
    1684:	6c662067 	.word	0x6c662067
    1688:	20687361 	.word	0x20687361
    168c:	74736e69 	.word	0x74736e69
    1690:	65636e61 	.word	0x65636e61
    1694:	2c642520 	.word	0x2c642520
    1698:	67617020 	.word	0x67617020
    169c:	64252065 	.word	0x64252065
    16a0:	00000a2e 	.word	0x00000a2e
    16a4:	53414c46 	.word	0x53414c46
    16a8:	72702048 	.word	0x72702048
    16ac:	6172676f 	.word	0x6172676f
    16b0:	6170206d 	.word	0x6170206d
    16b4:	61206567 	.word	0x61206567
    16b8:	78302074 	.word	0x78302074
    16bc:	78383025 	.word	0x78383025
    16c0:	32336920 	.word	0x32336920
    16c4:	75746552 	.word	0x75746552
    16c8:	6f436e72 	.word	0x6f436e72
    16cc:	3d206564 	.word	0x3d206564
    16d0:	25783020 	.word	0x25783020
    16d4:	000a2e78 	.word	0x000a2e78
    16d8:	2e2e2020 	.word	0x2e2e2020
    16dc:	6576202e 	.word	0x6576202e
    16e0:	79666972 	.word	0x79666972
    16e4:	20676e69 	.word	0x20676e69
    16e8:	20656874 	.word	0x20656874
    16ec:	65676170 	.word	0x65676170
    16f0:	73756a20 	.word	0x73756a20
    16f4:	72702074 	.word	0x72702074
    16f8:	6172676f 	.word	0x6172676f
    16fc:	64656d6d 	.word	0x64656d6d
    1700:	00000a2e 	.word	0x00000a2e
    1704:	4f525245 	.word	0x4f525245
    1708:	66203a52 	.word	0x66203a52
    170c:	6873616c 	.word	0x6873616c
    1710:	64646120 	.word	0x64646120
    1714:	73736572 	.word	0x73736572
    1718:	25783020 	.word	0x25783020
    171c:	20783830 	.word	0x20783830
    1720:	20646964 	.word	0x20646964
    1724:	20746f6e 	.word	0x20746f6e
    1728:	676f7270 	.word	0x676f7270
    172c:	206d6172 	.word	0x206d6172
    1730:	706f7270 	.word	0x706f7270
    1734:	796c7265 	.word	0x796c7265
    1738:	20200a3a 	.word	0x20200a3a
    173c:	65707845 	.word	0x65707845
    1740:	64657463 	.word	0x64657463
    1744:	6c617620 	.word	0x6c617620
    1748:	3d206575 	.word	0x3d206575
    174c:	25783020 	.word	0x25783020
    1750:	2c783830 	.word	0x2c783830
    1754:	6f727020 	.word	0x6f727020
    1758:	6d617267 	.word	0x6d617267
    175c:	2064656d 	.word	0x2064656d
    1760:	756c6176 	.word	0x756c6176
    1764:	203d2065 	.word	0x203d2065
    1768:	30257830 	.word	0x30257830
    176c:	0a2e7838 	.word	0x0a2e7838
    1770:	00000000 	.word	0x00000000
    1774:	2e2e2020 	.word	0x2e2e2020
    1778:	7265202e 	.word	0x7265202e
    177c:	6e697361 	.word	0x6e697361
    1780:	68742067 	.word	0x68742067
    1784:	61702065 	.word	0x61702065
    1788:	6a206567 	.word	0x6a206567
    178c:	20747375 	.word	0x20747375
    1790:	676f7270 	.word	0x676f7270
    1794:	6d6d6172 	.word	0x6d6d6172
    1798:	0a2e6465 	.word	0x0a2e6465
    179c:	00000000 	.word	0x00000000
    17a0:	414c4620 	.word	0x414c4620
    17a4:	65204853 	.word	0x65204853
    17a8:	65736172 	.word	0x65736172
    17ac:	67617020 	.word	0x67617020
    17b0:	74612065 	.word	0x74612065
    17b4:	25783020 	.word	0x25783020
    17b8:	20783830 	.word	0x20783830
    17bc:	52323369 	.word	0x52323369
    17c0:	72757465 	.word	0x72757465
    17c4:	646f436e 	.word	0x646f436e
    17c8:	203d2065 	.word	0x203d2065
    17cc:	25783020 	.word	0x25783020
    17d0:	000a2e78 	.word	0x000a2e78
    17d4:	2e2e2020 	.word	0x2e2e2020
    17d8:	6576202e 	.word	0x6576202e
    17dc:	79666972 	.word	0x79666972
    17e0:	20676e69 	.word	0x20676e69
    17e4:	20656874 	.word	0x20656874
    17e8:	65676170 	.word	0x65676170
    17ec:	73756a20 	.word	0x73756a20
    17f0:	72652074 	.word	0x72652074
    17f4:	64657361 	.word	0x64657361
    17f8:	00000a2e 	.word	0x00000a2e
    17fc:	4f525245 	.word	0x4f525245
    1800:	66203a52 	.word	0x66203a52
    1804:	6873616c 	.word	0x6873616c
    1808:	64646120 	.word	0x64646120
    180c:	73736572 	.word	0x73736572
    1810:	25783020 	.word	0x25783020
    1814:	20783830 	.word	0x20783830
    1818:	20646964 	.word	0x20646964
    181c:	20746f6e 	.word	0x20746f6e
    1820:	53415245 	.word	0x53415245
    1824:	72702045 	.word	0x72702045
    1828:	7265706f 	.word	0x7265706f
    182c:	0a3a796c 	.word	0x0a3a796c
    1830:	78452020 	.word	0x78452020
    1834:	74636570 	.word	0x74636570
    1838:	76206465 	.word	0x76206465
    183c:	65756c61 	.word	0x65756c61
    1840:	30203d20 	.word	0x30203d20
    1844:	46464678 	.word	0x46464678
    1848:	46464646 	.word	0x46464646
    184c:	70202c46 	.word	0x70202c46
    1850:	72676f72 	.word	0x72676f72
    1854:	656d6d61 	.word	0x656d6d61
    1858:	61762064 	.word	0x61762064
    185c:	2065756c 	.word	0x2065756c
    1860:	7830203d 	.word	0x7830203d
    1864:	78383025 	.word	0x78383025
    1868:	00000a2e 	.word	0x00000a2e
    186c:	4f525245 	.word	0x4f525245
    1870:	46203a52 	.word	0x46203a52
    1874:	4853414c 	.word	0x4853414c
    1878:	69725720 	.word	0x69725720
    187c:	65206574 	.word	0x65206574
    1880:	706d6178 	.word	0x706d6178
    1884:	6620656c 	.word	0x6620656c
    1888:	756c6961 	.word	0x756c6961
    188c:	25206572 	.word	0x25206572
    1890:	00000a64 	.word	0x00000a64
    1894:	53414c46 	.word	0x53414c46
    1898:	72572048 	.word	0x72572048
    189c:	20657469 	.word	0x20657469
    18a0:	6d617865 	.word	0x6d617865
    18a4:	20656c70 	.word	0x20656c70
    18a8:	63637573 	.word	0x63637573
    18ac:	66737365 	.word	0x66737365
    18b0:	0a206c75 	.word	0x0a206c75
    18b4:	00000000 	.word	0x00000000
    18b8:	0a0a0a0a 	.word	0x0a0a0a0a
    18bc:	0a0a0a0a 	.word	0x0a0a0a0a
    18c0:	0a0a0a0a 	.word	0x0a0a0a0a
    18c4:	0a0a0a0a 	.word	0x0a0a0a0a
    18c8:	00000a0a 	.word	0x00000a0a
    18cc:	685f6d61 	.word	0x685f6d61
    18d0:	635f6c61 	.word	0x635f6c61
    18d4:	65676b6c 	.word	0x65676b6c
    18d8:	79735f6e 	.word	0x79735f6e
    18dc:	6b6c6373 	.word	0x6b6c6373
    18e0:	6c65735f 	.word	0x6c65735f
    18e4:	28746365 	.word	0x28746365
    18e8:	69203a29 	.word	0x69203a29
    18ec:	6c61766e 	.word	0x6c61766e
    18f0:	63206469 	.word	0x63206469
    18f4:	6b636f6c 	.word	0x6b636f6c
    18f8:	74657320 	.word	0x74657320
    18fc:	676e6974 	.word	0x676e6974
    1900:	0000002e 	.word	0x0000002e
    1904:	2e5c2e2e 	.word	0x2e5c2e2e
    1908:	6d615c2e 	.word	0x6d615c2e
    190c:	6c61685f 	.word	0x6c61685f
    1910:	6b6c635f 	.word	0x6b6c635f
    1914:	2e6e6567 	.word	0x2e6e6567
    1918:	00000063 	.word	0x00000063
