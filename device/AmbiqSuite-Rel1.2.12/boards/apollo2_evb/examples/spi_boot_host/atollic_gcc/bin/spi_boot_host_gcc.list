
spi_boot_host_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000046e8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000004  10001000  000046e8  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000004a0  10001004  000046ec  00021004  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021004  2**0
                  CONTENTS, READONLY
  5 .debug_info   00010f3f  00000000  00000000  0002103b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000025a3  00000000  00000000  00031f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000008d8  00000000  00000000  0003451d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001d48  00000000  00000000  00034df5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000580c  00000000  00000000  00036b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000034dc  00000000  00000000  0003c349  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  0003f825  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001b84  00000000  00000000  0003f8a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000f1f3  00000000  00000000  00041428  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 25 06 00 00 8d 06 00 00 93 06 00 00     ....%...........
      10:	93 06 00 00 93 06 00 00 93 06 00 00 00 00 00 00     ................
	...
      2c:	99 06 00 00 99 06 00 00 00 00 00 00 99 06 00 00     ................
      3c:	99 06 00 00 99 06 00 00 99 06 00 00 99 06 00 00     ................
      4c:	99 06 00 00 99 06 00 00 99 06 00 00 99 06 00 00     ................
      5c:	99 06 00 00 99 06 00 00 99 06 00 00 99 06 00 00     ................
      6c:	99 06 00 00 49 02 00 00 99 06 00 00 99 06 00 00     ....I...........
      7c:	99 06 00 00 99 06 00 00 99 06 00 00 99 06 00 00     ................
      8c:	99 06 00 00 99 06 00 00 99 06 00 00 99 06 00 00     ................
      9c:	99 06 00 00 99 06 00 00 99 06 00 00 99 06 00 00     ................
      ac:	99 06 00 00 99 06 00 00 99 06 00 00 99 06 00 00     ................
      bc:	99 06 00 00                                         ....

000000c0 <configure_pins>:
// Configure GPIOs for this example
//
//*****************************************************************************
void
configure_pins(void)
{
      c0:	b580      	push	{r7, lr}
      c2:	b086      	sub	sp, #24
      c4:	af00      	add	r7, sp, #0
    //
    // Configure I/O Master 0 as SPI
    //
    am_hal_gpio_pin_config(5, AM_HAL_PIN_5_M0SCK);
      c6:	f000 fd29 	bl	b1c <am_hal_interrupt_master_disable>
      ca:	4603      	mov	r3, r0
      cc:	617b      	str	r3, [r7, #20]
      ce:	4b55      	ldr	r3, [pc, #340]	; (224 <configure_pins+0x164>)
      d0:	2273      	movs	r2, #115	; 0x73
      d2:	601a      	str	r2, [r3, #0]
      d4:	4a54      	ldr	r2, [pc, #336]	; (228 <configure_pins+0x168>)
      d6:	4b54      	ldr	r3, [pc, #336]	; (228 <configure_pins+0x168>)
      d8:	681b      	ldr	r3, [r3, #0]
      da:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
      de:	6013      	str	r3, [r2, #0]
      e0:	4a52      	ldr	r2, [pc, #328]	; (22c <configure_pins+0x16c>)
      e2:	4b52      	ldr	r3, [pc, #328]	; (22c <configure_pins+0x16c>)
      e4:	681b      	ldr	r3, [r3, #0]
      e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
      ea:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
      ee:	6013      	str	r3, [r2, #0]
      f0:	4a4f      	ldr	r2, [pc, #316]	; (230 <configure_pins+0x170>)
      f2:	4b4f      	ldr	r3, [pc, #316]	; (230 <configure_pins+0x170>)
      f4:	681b      	ldr	r3, [r3, #0]
      f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
      fa:	6013      	str	r3, [r2, #0]
      fc:	4b49      	ldr	r3, [pc, #292]	; (224 <configure_pins+0x164>)
      fe:	2200      	movs	r2, #0
     100:	601a      	str	r2, [r3, #0]
     102:	697b      	ldr	r3, [r7, #20]
     104:	4618      	mov	r0, r3
     106:	f000 fd0d 	bl	b24 <am_hal_interrupt_master_set>
    am_hal_gpio_pin_config(6, AM_HAL_PIN_6_M0MISO);
     10a:	f000 fd07 	bl	b1c <am_hal_interrupt_master_disable>
     10e:	4603      	mov	r3, r0
     110:	613b      	str	r3, [r7, #16]
     112:	4b44      	ldr	r3, [pc, #272]	; (224 <configure_pins+0x164>)
     114:	2273      	movs	r2, #115	; 0x73
     116:	601a      	str	r2, [r3, #0]
     118:	4a43      	ldr	r2, [pc, #268]	; (228 <configure_pins+0x168>)
     11a:	4b43      	ldr	r3, [pc, #268]	; (228 <configure_pins+0x168>)
     11c:	681b      	ldr	r3, [r3, #0]
     11e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     122:	6013      	str	r3, [r2, #0]
     124:	4a41      	ldr	r2, [pc, #260]	; (22c <configure_pins+0x16c>)
     126:	4b41      	ldr	r3, [pc, #260]	; (22c <configure_pins+0x16c>)
     128:	681b      	ldr	r3, [r3, #0]
     12a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     12e:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
     132:	6013      	str	r3, [r2, #0]
     134:	4a3e      	ldr	r2, [pc, #248]	; (230 <configure_pins+0x170>)
     136:	4b3e      	ldr	r3, [pc, #248]	; (230 <configure_pins+0x170>)
     138:	681b      	ldr	r3, [r3, #0]
     13a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     13e:	6013      	str	r3, [r2, #0]
     140:	4b38      	ldr	r3, [pc, #224]	; (224 <configure_pins+0x164>)
     142:	2200      	movs	r2, #0
     144:	601a      	str	r2, [r3, #0]
     146:	693b      	ldr	r3, [r7, #16]
     148:	4618      	mov	r0, r3
     14a:	f000 fceb 	bl	b24 <am_hal_interrupt_master_set>
    am_hal_gpio_pin_config(7, AM_HAL_PIN_7_M0MOSI);
     14e:	f000 fce5 	bl	b1c <am_hal_interrupt_master_disable>
     152:	4603      	mov	r3, r0
     154:	60fb      	str	r3, [r7, #12]
     156:	4b33      	ldr	r3, [pc, #204]	; (224 <configure_pins+0x164>)
     158:	2273      	movs	r2, #115	; 0x73
     15a:	601a      	str	r2, [r3, #0]
     15c:	4a32      	ldr	r2, [pc, #200]	; (228 <configure_pins+0x168>)
     15e:	4b32      	ldr	r3, [pc, #200]	; (228 <configure_pins+0x168>)
     160:	681b      	ldr	r3, [r3, #0]
     162:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
     166:	6013      	str	r3, [r2, #0]
     168:	4a30      	ldr	r2, [pc, #192]	; (22c <configure_pins+0x16c>)
     16a:	4b30      	ldr	r3, [pc, #192]	; (22c <configure_pins+0x16c>)
     16c:	681b      	ldr	r3, [r3, #0]
     16e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     172:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
     176:	6013      	str	r3, [r2, #0]
     178:	4a2d      	ldr	r2, [pc, #180]	; (230 <configure_pins+0x170>)
     17a:	4b2d      	ldr	r3, [pc, #180]	; (230 <configure_pins+0x170>)
     17c:	681b      	ldr	r3, [r3, #0]
     17e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     182:	6013      	str	r3, [r2, #0]
     184:	4b27      	ldr	r3, [pc, #156]	; (224 <configure_pins+0x164>)
     186:	2200      	movs	r2, #0
     188:	601a      	str	r2, [r3, #0]
     18a:	68fb      	ldr	r3, [r7, #12]
     18c:	4618      	mov	r0, r3
     18e:	f000 fcc9 	bl	b24 <am_hal_interrupt_master_set>
    am_hal_gpio_pin_config(11, AM_HAL_PIN_11_M0nCE0);
     192:	f000 fcc3 	bl	b1c <am_hal_interrupt_master_disable>
     196:	4603      	mov	r3, r0
     198:	60bb      	str	r3, [r7, #8]
     19a:	4b22      	ldr	r3, [pc, #136]	; (224 <configure_pins+0x164>)
     19c:	2273      	movs	r2, #115	; 0x73
     19e:	601a      	str	r2, [r3, #0]
     1a0:	4a24      	ldr	r2, [pc, #144]	; (234 <configure_pins+0x174>)
     1a2:	4b24      	ldr	r3, [pc, #144]	; (234 <configure_pins+0x174>)
     1a4:	681b      	ldr	r3, [r3, #0]
     1a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
     1aa:	6013      	str	r3, [r2, #0]
     1ac:	4a22      	ldr	r2, [pc, #136]	; (238 <configure_pins+0x178>)
     1ae:	4b22      	ldr	r3, [pc, #136]	; (238 <configure_pins+0x178>)
     1b0:	681b      	ldr	r3, [r3, #0]
     1b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     1b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
     1ba:	6013      	str	r3, [r2, #0]
     1bc:	4a1f      	ldr	r2, [pc, #124]	; (23c <configure_pins+0x17c>)
     1be:	4b1f      	ldr	r3, [pc, #124]	; (23c <configure_pins+0x17c>)
     1c0:	681b      	ldr	r3, [r3, #0]
     1c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     1c6:	6013      	str	r3, [r2, #0]
     1c8:	4b16      	ldr	r3, [pc, #88]	; (224 <configure_pins+0x164>)
     1ca:	2200      	movs	r2, #0
     1cc:	601a      	str	r2, [r3, #0]
     1ce:	68bb      	ldr	r3, [r7, #8]
     1d0:	4618      	mov	r0, r3
     1d2:	f000 fca7 	bl	b24 <am_hal_interrupt_master_set>


    //
    // Configure the I/O Slave interrupt pin
    //
    am_hal_gpio_pin_config(BOOTLOADER_HANDSHAKE_PIN, AM_HAL_PIN_INPUT | AM_HAL_GPIO_PULLUP);
     1d6:	f000 fca1 	bl	b1c <am_hal_interrupt_master_disable>
     1da:	4603      	mov	r3, r0
     1dc:	607b      	str	r3, [r7, #4]
     1de:	4b11      	ldr	r3, [pc, #68]	; (224 <configure_pins+0x164>)
     1e0:	2273      	movs	r2, #115	; 0x73
     1e2:	601a      	str	r2, [r3, #0]
     1e4:	4a10      	ldr	r2, [pc, #64]	; (228 <configure_pins+0x168>)
     1e6:	4b10      	ldr	r3, [pc, #64]	; (228 <configure_pins+0x168>)
     1e8:	681b      	ldr	r3, [r3, #0]
     1ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     1ee:	6013      	str	r3, [r2, #0]
     1f0:	4a13      	ldr	r2, [pc, #76]	; (240 <configure_pins+0x180>)
     1f2:	4b13      	ldr	r3, [pc, #76]	; (240 <configure_pins+0x180>)
     1f4:	681b      	ldr	r3, [r3, #0]
     1f6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     1fa:	f443 13d8 	orr.w	r3, r3, #1769472	; 0x1b0000
     1fe:	6013      	str	r3, [r2, #0]
     200:	4a10      	ldr	r2, [pc, #64]	; (244 <configure_pins+0x184>)
     202:	4b10      	ldr	r3, [pc, #64]	; (244 <configure_pins+0x184>)
     204:	681b      	ldr	r3, [r3, #0]
     206:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     20a:	6013      	str	r3, [r2, #0]
     20c:	4b05      	ldr	r3, [pc, #20]	; (224 <configure_pins+0x164>)
     20e:	2200      	movs	r2, #0
     210:	601a      	str	r2, [r3, #0]
     212:	687b      	ldr	r3, [r7, #4]
     214:	4618      	mov	r0, r3
     216:	f000 fc85 	bl	b24 <am_hal_interrupt_master_set>
}
     21a:	bf00      	nop
     21c:	3718      	adds	r7, #24
     21e:	46bd      	mov	sp, r7
     220:	bd80      	pop	{r7, pc}
     222:	bf00      	nop
     224:	40010060 	.word	0x40010060
     228:	40010040 	.word	0x40010040
     22c:	40010004 	.word	0x40010004
     230:	400100e4 	.word	0x400100e4
     234:	40010044 	.word	0x40010044
     238:	40010008 	.word	0x40010008
     23c:	400100e8 	.word	0x400100e8
     240:	40010000 	.word	0x40010000
     244:	400100e0 	.word	0x400100e0

00000248 <am_gpio_isr>:
// Interrupt handler for the GPIO pins.
//
//*****************************************************************************
void
am_gpio_isr(void)
{
     248:	b580      	push	{r7, lr}
     24a:	b082      	sub	sp, #8
     24c:	af00      	add	r7, sp, #0
    uint64_t ui64Status;

    //
    // Read and clear the GPIO interrupt status.
    //
    ui64Status = am_hal_gpio_int_status_get(false);
     24e:	2000      	movs	r0, #0
     250:	f000 fc3a 	bl	ac8 <am_hal_gpio_int_status_get>
     254:	e9c7 0100 	strd	r0, r1, [r7]
    am_hal_gpio_int_clear(ui64Status);
     258:	e9d7 0100 	ldrd	r0, r1, [r7]
     25c:	f000 fc20 	bl	aa0 <am_hal_gpio_int_clear>
}
     260:	bf00      	nop
     262:	3708      	adds	r7, #8
     264:	46bd      	mov	sp, r7
     266:	bd80      	pop	{r7, pc}

00000268 <start_boot_mode>:
// Reset the slave device and force it into boot mode.
//
//*****************************************************************************
void
start_boot_mode(void)
{
     268:	b580      	push	{r7, lr}
     26a:	b082      	sub	sp, #8
     26c:	af00      	add	r7, sp, #0
    //
    // Drive RESET low.
    //
    am_hal_gpio_out_bit_clear(DRIVE_SLAVE_RESET_PIN);
     26e:	4b30      	ldr	r3, [pc, #192]	; (330 <start_boot_mode+0xc8>)
     270:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     274:	601a      	str	r2, [r3, #0]
    am_hal_gpio_pin_config(DRIVE_SLAVE_RESET_PIN, AM_HAL_PIN_OUTPUT);
     276:	f000 fc51 	bl	b1c <am_hal_interrupt_master_disable>
     27a:	4603      	mov	r3, r0
     27c:	607b      	str	r3, [r7, #4]
     27e:	4b2d      	ldr	r3, [pc, #180]	; (334 <start_boot_mode+0xcc>)
     280:	2273      	movs	r2, #115	; 0x73
     282:	601a      	str	r2, [r3, #0]
     284:	4a2c      	ldr	r2, [pc, #176]	; (338 <start_boot_mode+0xd0>)
     286:	4b2c      	ldr	r3, [pc, #176]	; (338 <start_boot_mode+0xd0>)
     288:	681b      	ldr	r3, [r3, #0]
     28a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     28e:	f043 0320 	orr.w	r3, r3, #32
     292:	6013      	str	r3, [r2, #0]
     294:	4a29      	ldr	r2, [pc, #164]	; (33c <start_boot_mode+0xd4>)
     296:	4b29      	ldr	r3, [pc, #164]	; (33c <start_boot_mode+0xd4>)
     298:	681b      	ldr	r3, [r3, #0]
     29a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     29e:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
     2a2:	6013      	str	r3, [r2, #0]
     2a4:	4a26      	ldr	r2, [pc, #152]	; (340 <start_boot_mode+0xd8>)
     2a6:	4b26      	ldr	r3, [pc, #152]	; (340 <start_boot_mode+0xd8>)
     2a8:	681b      	ldr	r3, [r3, #0]
     2aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     2ae:	6013      	str	r3, [r2, #0]
     2b0:	4b20      	ldr	r3, [pc, #128]	; (334 <start_boot_mode+0xcc>)
     2b2:	2200      	movs	r2, #0
     2b4:	601a      	str	r2, [r3, #0]
     2b6:	687b      	ldr	r3, [r7, #4]
     2b8:	4618      	mov	r0, r3
     2ba:	f000 fc33 	bl	b24 <am_hal_interrupt_master_set>

    //
    // Drive the override pin low to force the slave into boot mode.
    //
    am_hal_gpio_out_bit_clear(DRIVE_SLAVE_OVERRIDE_PIN);
     2be:	4b1c      	ldr	r3, [pc, #112]	; (330 <start_boot_mode+0xc8>)
     2c0:	2210      	movs	r2, #16
     2c2:	601a      	str	r2, [r3, #0]
    am_hal_gpio_pin_config(DRIVE_SLAVE_OVERRIDE_PIN, AM_HAL_PIN_OUTPUT);
     2c4:	f000 fc2a 	bl	b1c <am_hal_interrupt_master_disable>
     2c8:	4603      	mov	r3, r0
     2ca:	603b      	str	r3, [r7, #0]
     2cc:	4b19      	ldr	r3, [pc, #100]	; (334 <start_boot_mode+0xcc>)
     2ce:	2273      	movs	r2, #115	; 0x73
     2d0:	601a      	str	r2, [r3, #0]
     2d2:	4a1c      	ldr	r2, [pc, #112]	; (344 <start_boot_mode+0xdc>)
     2d4:	4b1b      	ldr	r3, [pc, #108]	; (344 <start_boot_mode+0xdc>)
     2d6:	681b      	ldr	r3, [r3, #0]
     2d8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
     2dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     2e0:	6013      	str	r3, [r2, #0]
     2e2:	4a19      	ldr	r2, [pc, #100]	; (348 <start_boot_mode+0xe0>)
     2e4:	4b18      	ldr	r3, [pc, #96]	; (348 <start_boot_mode+0xe0>)
     2e6:	681b      	ldr	r3, [r3, #0]
     2e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     2ec:	f043 0318 	orr.w	r3, r3, #24
     2f0:	6013      	str	r3, [r2, #0]
     2f2:	4a16      	ldr	r2, [pc, #88]	; (34c <start_boot_mode+0xe4>)
     2f4:	4b15      	ldr	r3, [pc, #84]	; (34c <start_boot_mode+0xe4>)
     2f6:	681b      	ldr	r3, [r3, #0]
     2f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     2fc:	6013      	str	r3, [r2, #0]
     2fe:	4b0d      	ldr	r3, [pc, #52]	; (334 <start_boot_mode+0xcc>)
     300:	2200      	movs	r2, #0
     302:	601a      	str	r2, [r3, #0]
     304:	683b      	ldr	r3, [r7, #0]
     306:	4618      	mov	r0, r3
     308:	f000 fc0c 	bl	b24 <am_hal_interrupt_master_set>

    //
    // Short delay.
    //
    am_util_delay_us(5);
     30c:	2005      	movs	r0, #5
     30e:	f000 f9c7 	bl	6a0 <am_util_delay_us>

    //
    // Release RESET.
    //
    am_hal_gpio_out_bit_set(DRIVE_SLAVE_RESET_PIN);
     312:	4b0f      	ldr	r3, [pc, #60]	; (350 <start_boot_mode+0xe8>)
     314:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     318:	601a      	str	r2, [r3, #0]

    //
    // Wait for the slave to Set the handshake pin
    //
    while ( !am_hal_gpio_input_bit_read(BOOTLOADER_HANDSHAKE_PIN) );
     31a:	bf00      	nop
     31c:	4b0d      	ldr	r3, [pc, #52]	; (354 <start_boot_mode+0xec>)
     31e:	681b      	ldr	r3, [r3, #0]
     320:	f003 0304 	and.w	r3, r3, #4
     324:	2b00      	cmp	r3, #0
     326:	d0f9      	beq.n	31c <start_boot_mode+0xb4>
}
     328:	bf00      	nop
     32a:	3708      	adds	r7, #8
     32c:	46bd      	mov	sp, r7
     32e:	bd80      	pop	{r7, pc}
     330:	40010098 	.word	0x40010098
     334:	40010060 	.word	0x40010060
     338:	40010048 	.word	0x40010048
     33c:	40010010 	.word	0x40010010
     340:	400100f0 	.word	0x400100f0
     344:	40010040 	.word	0x40010040
     348:	40010004 	.word	0x40010004
     34c:	400100e4 	.word	0x400100e4
     350:	40010090 	.word	0x40010090
     354:	40010080 	.word	0x40010080

00000358 <start_new_image>:
// Send the commands to start a new boot download.
//
//*****************************************************************************
void
start_new_image(void)
{
     358:	b580      	push	{r7, lr}
     35a:	b082      	sub	sp, #8
     35c:	af02      	add	r7, sp, #8
    //
    // Wait for the slave to send the ready signal
    //
    while ( am_hal_gpio_input_bit_read(BOOTLOADER_HANDSHAKE_PIN) );
     35e:	bf00      	nop
     360:	4b25      	ldr	r3, [pc, #148]	; (3f8 <start_new_image+0xa0>)
     362:	681b      	ldr	r3, [r3, #0]
     364:	f003 0304 	and.w	r3, r3, #4
     368:	2b00      	cmp	r3, #0
     36a:	d1f9      	bne.n	360 <start_new_image+0x8>
    //
    // Make sure the override pin is high so the slave will reboot into
    // application mode when our boot procedure is complete.
    //
    am_hal_gpio_out_bit_set(DRIVE_SLAVE_OVERRIDE_PIN);
     36c:	4b23      	ldr	r3, [pc, #140]	; (3fc <start_new_image+0xa4>)
     36e:	2210      	movs	r2, #16
     370:	601a      	str	r2, [r3, #0]
    // Clear any interrupts that may have happened while Slave is coming up
    am_hal_iom_int_clear(0, 0xFFFFFFFF);
     372:	f04f 31ff 	mov.w	r1, #4294967295
     376:	2000      	movs	r0, #0
     378:	f001 ff16 	bl	21a8 <am_hal_iom_int_clear>
    am_hal_iom_spi_read(0, 0, g_psRxBuffer.words, 4, AM_HAL_IOM_OFFSET(0x0));
     37c:	2300      	movs	r3, #0
     37e:	9300      	str	r3, [sp, #0]
     380:	2304      	movs	r3, #4
     382:	4a1f      	ldr	r2, [pc, #124]	; (400 <start_new_image+0xa8>)
     384:	2100      	movs	r1, #0
     386:	2000      	movs	r0, #0
     388:	f001 fe8a 	bl	20a0 <am_hal_iom_spi_read>

    //
    // ACK the ready signal to have slave pull the interrupt line high.
    //
    g_psTxBuffer.words[0] = AM_BOOTLOADER_ACK_CMD;
     38c:	4b1d      	ldr	r3, [pc, #116]	; (404 <start_new_image+0xac>)
     38e:	2200      	movs	r2, #0
     390:	601a      	str	r2, [r3, #0]
    am_hal_iom_spi_write(0, 0, g_psTxBuffer.words, 4, AM_HAL_IOM_OFFSET(0x80));
     392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     396:	9300      	str	r3, [sp, #0]
     398:	2304      	movs	r3, #4
     39a:	4a1a      	ldr	r2, [pc, #104]	; (404 <start_new_image+0xac>)
     39c:	2100      	movs	r1, #0
     39e:	2000      	movs	r0, #0
     3a0:	f001 fc2c 	bl	1bfc <am_hal_iom_spi_write>
    //
    // Wait for the slave to read the ACK
    //
    while ( !am_hal_gpio_input_bit_read(BOOTLOADER_HANDSHAKE_PIN) );
     3a4:	bf00      	nop
     3a6:	4b14      	ldr	r3, [pc, #80]	; (3f8 <start_new_image+0xa0>)
     3a8:	681b      	ldr	r3, [r3, #0]
     3aa:	f003 0304 	and.w	r3, r3, #4
     3ae:	2b00      	cmp	r3, #0
     3b0:	d0f9      	beq.n	3a6 <start_new_image+0x4e>

    //
    // Write the image parameters to the SPI FIFO
    //
    g_psTxBuffer.words[0] = IMAGE_LINK_ADDRESS;
     3b2:	4b14      	ldr	r3, [pc, #80]	; (404 <start_new_image+0xac>)
     3b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     3b8:	601a      	str	r2, [r3, #0]
    g_psTxBuffer.words[1] = IMAGE_SIZE;
     3ba:	4b12      	ldr	r3, [pc, #72]	; (404 <start_new_image+0xac>)
     3bc:	f641 420a 	movw	r2, #7178	; 0x1c0a
     3c0:	605a      	str	r2, [r3, #4]
    g_psTxBuffer.words[2] = IMAGE_CRC;
     3c2:	4b10      	ldr	r3, [pc, #64]	; (404 <start_new_image+0xac>)
     3c4:	4a10      	ldr	r2, [pc, #64]	; (408 <start_new_image+0xb0>)
     3c6:	609a      	str	r2, [r3, #8]

    //
    // Send the image parameters to the slave.
    //
    am_hal_iom_spi_write(0, 0, g_psTxBuffer.words, 12, AM_HAL_IOM_OFFSET(0x84));
     3c8:	f44f 4304 	mov.w	r3, #33792	; 0x8400
     3cc:	9300      	str	r3, [sp, #0]
     3ce:	230c      	movs	r3, #12
     3d0:	4a0c      	ldr	r2, [pc, #48]	; (404 <start_new_image+0xac>)
     3d2:	2100      	movs	r1, #0
     3d4:	2000      	movs	r0, #0
     3d6:	f001 fc11 	bl	1bfc <am_hal_iom_spi_write>

    //
    // Finish out the image start routine with the "New Image" packet.
    //
    g_psTxBuffer.words[0] = AM_BOOTLOADER_NEW_IMAGE;
     3da:	4b0a      	ldr	r3, [pc, #40]	; (404 <start_new_image+0xac>)
     3dc:	2202      	movs	r2, #2
     3de:	601a      	str	r2, [r3, #0]
    am_hal_iom_spi_write(0, 0, g_psTxBuffer.words, 4, AM_HAL_IOM_OFFSET(0x80));
     3e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     3e4:	9300      	str	r3, [sp, #0]
     3e6:	2304      	movs	r3, #4
     3e8:	4a06      	ldr	r2, [pc, #24]	; (404 <start_new_image+0xac>)
     3ea:	2100      	movs	r1, #0
     3ec:	2000      	movs	r0, #0
     3ee:	f001 fc05 	bl	1bfc <am_hal_iom_spi_write>
}
     3f2:	bf00      	nop
     3f4:	46bd      	mov	sp, r7
     3f6:	bd80      	pop	{r7, pc}
     3f8:	40010080 	.word	0x40010080
     3fc:	40010090 	.word	0x40010090
     400:	1000120c 	.word	0x1000120c
     404:	1000101c 	.word	0x1000101c
     408:	160b7b17 	.word	0x160b7b17

0000040c <override_pin_set>:
// Set override pin.
//
//*****************************************************************************
void
override_pin_set(uint32_t ui32OverridePin, uint32_t ui32OverridePolarity)
{
     40c:	b580      	push	{r7, lr}
     40e:	b084      	sub	sp, #16
     410:	af02      	add	r7, sp, #8
     412:	6078      	str	r0, [r7, #4]
     414:	6039      	str	r1, [r7, #0]
    //
    // Wait for the slave to send the ready signal
    //
    while ( am_hal_gpio_input_bit_read(BOOTLOADER_HANDSHAKE_PIN) );
     416:	bf00      	nop
     418:	4b1f      	ldr	r3, [pc, #124]	; (498 <override_pin_set+0x8c>)
     41a:	681b      	ldr	r3, [r3, #0]
     41c:	f003 0304 	and.w	r3, r3, #4
     420:	2b00      	cmp	r3, #0
     422:	d1f9      	bne.n	418 <override_pin_set+0xc>
    am_hal_iom_spi_read(0, 0, g_psRxBuffer.words, 4, AM_HAL_IOM_OFFSET(0x0));
     424:	2300      	movs	r3, #0
     426:	9300      	str	r3, [sp, #0]
     428:	2304      	movs	r3, #4
     42a:	4a1c      	ldr	r2, [pc, #112]	; (49c <override_pin_set+0x90>)
     42c:	2100      	movs	r1, #0
     42e:	2000      	movs	r0, #0
     430:	f001 fe36 	bl	20a0 <am_hal_iom_spi_read>

    //
    // ACK the ready signal to have slave pull the interrupt line high.
    //
    g_psTxBuffer.words[0] = AM_BOOTLOADER_ACK_CMD;
     434:	4b1a      	ldr	r3, [pc, #104]	; (4a0 <override_pin_set+0x94>)
     436:	2200      	movs	r2, #0
     438:	601a      	str	r2, [r3, #0]
    am_hal_iom_spi_write(0, 0, g_psTxBuffer.words, 4, AM_HAL_IOM_OFFSET(0x80));
     43a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     43e:	9300      	str	r3, [sp, #0]
     440:	2304      	movs	r3, #4
     442:	4a17      	ldr	r2, [pc, #92]	; (4a0 <override_pin_set+0x94>)
     444:	2100      	movs	r1, #0
     446:	2000      	movs	r0, #0
     448:	f001 fbd8 	bl	1bfc <am_hal_iom_spi_write>
    //
    // Wait for the slave to read the ACK
    //
    while ( !am_hal_gpio_input_bit_read(BOOTLOADER_HANDSHAKE_PIN) );
     44c:	bf00      	nop
     44e:	4b12      	ldr	r3, [pc, #72]	; (498 <override_pin_set+0x8c>)
     450:	681b      	ldr	r3, [r3, #0]
     452:	f003 0304 	and.w	r3, r3, #4
     456:	2b00      	cmp	r3, #0
     458:	d0f9      	beq.n	44e <override_pin_set+0x42>

    //
    // Write the image parameters to the SPI FIFO
    //
    g_psTxBuffer.words[0] = ui32OverridePin;
     45a:	4a11      	ldr	r2, [pc, #68]	; (4a0 <override_pin_set+0x94>)
     45c:	687b      	ldr	r3, [r7, #4]
     45e:	6013      	str	r3, [r2, #0]
    g_psTxBuffer.words[1] = ui32OverridePolarity;
     460:	4a0f      	ldr	r2, [pc, #60]	; (4a0 <override_pin_set+0x94>)
     462:	683b      	ldr	r3, [r7, #0]
     464:	6053      	str	r3, [r2, #4]

    //
    // Send the image parameters to the slave.
    //
    am_hal_iom_spi_write(0, 0, g_psTxBuffer.words, 8, AM_HAL_IOM_OFFSET(0x84));
     466:	f44f 4304 	mov.w	r3, #33792	; 0x8400
     46a:	9300      	str	r3, [sp, #0]
     46c:	2308      	movs	r3, #8
     46e:	4a0c      	ldr	r2, [pc, #48]	; (4a0 <override_pin_set+0x94>)
     470:	2100      	movs	r1, #0
     472:	2000      	movs	r0, #0
     474:	f001 fbc2 	bl	1bfc <am_hal_iom_spi_write>

    //
    // Finish out the image start routine with the "New Image" packet.
    //
    g_psTxBuffer.words[0] = AM_BOOTLOADER_SET_OVERRIDE_CMD;
     478:	4b09      	ldr	r3, [pc, #36]	; (4a0 <override_pin_set+0x94>)
     47a:	2205      	movs	r2, #5
     47c:	601a      	str	r2, [r3, #0]
    am_hal_iom_spi_write(0, 0, g_psTxBuffer.words, 4, AM_HAL_IOM_OFFSET(0x80));
     47e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     482:	9300      	str	r3, [sp, #0]
     484:	2304      	movs	r3, #4
     486:	4a06      	ldr	r2, [pc, #24]	; (4a0 <override_pin_set+0x94>)
     488:	2100      	movs	r1, #0
     48a:	2000      	movs	r0, #0
     48c:	f001 fbb6 	bl	1bfc <am_hal_iom_spi_write>
}
     490:	bf00      	nop
     492:	3708      	adds	r7, #8
     494:	46bd      	mov	sp, r7
     496:	bd80      	pop	{r7, pc}
     498:	40010080 	.word	0x40010080
     49c:	1000120c 	.word	0x1000120c
     4a0:	1000101c 	.word	0x1000101c

000004a4 <transfer_image>:
// Send the actual firmware image over to the boot slave.
//
//*****************************************************************************
void
transfer_image(void)
{
     4a4:	b580      	push	{r7, lr}
     4a6:	b086      	sub	sp, #24
     4a8:	af02      	add	r7, sp, #8
    uint32_t i;

    //
    // Send the firmware image across.
    //
    ui32BytesRemaining = IMAGE_SIZE;
     4aa:	f641 430a 	movw	r3, #7178	; 0x1c0a
     4ae:	60fb      	str	r3, [r7, #12]
    ui32Offset = 0;
     4b0:	2300      	movs	r3, #0
     4b2:	60bb      	str	r3, [r7, #8]

    while ( ui32BytesRemaining )
     4b4:	e05b      	b.n	56e <transfer_image+0xca>
    {
        //
        // Wait for another ready signal.
        //
        while ( am_hal_gpio_input_bit_read(BOOTLOADER_HANDSHAKE_PIN) );
     4b6:	bf00      	nop
     4b8:	4b30      	ldr	r3, [pc, #192]	; (57c <transfer_image+0xd8>)
     4ba:	681b      	ldr	r3, [r3, #0]
     4bc:	f003 0304 	and.w	r3, r3, #4
     4c0:	2b00      	cmp	r3, #0
     4c2:	d1f9      	bne.n	4b8 <transfer_image+0x14>
        am_hal_iom_spi_read(0, 0, g_psRxBuffer.words, 4, AM_HAL_IOM_OFFSET(0x0));
     4c4:	2300      	movs	r3, #0
     4c6:	9300      	str	r3, [sp, #0]
     4c8:	2304      	movs	r3, #4
     4ca:	4a2d      	ldr	r2, [pc, #180]	; (580 <transfer_image+0xdc>)
     4cc:	2100      	movs	r1, #0
     4ce:	2000      	movs	r0, #0
     4d0:	f001 fde6 	bl	20a0 <am_hal_iom_spi_read>
        //
        // ACK the ready signal to have slave pull the interrupt line high.
        //
        g_psTxBuffer.words[0] = AM_BOOTLOADER_ACK_CMD;
     4d4:	4b2b      	ldr	r3, [pc, #172]	; (584 <transfer_image+0xe0>)
     4d6:	2200      	movs	r2, #0
     4d8:	601a      	str	r2, [r3, #0]
        am_hal_iom_spi_write(0, 0, g_psTxBuffer.words, 4, AM_HAL_IOM_OFFSET(0x80));
     4da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     4de:	9300      	str	r3, [sp, #0]
     4e0:	2304      	movs	r3, #4
     4e2:	4a28      	ldr	r2, [pc, #160]	; (584 <transfer_image+0xe0>)
     4e4:	2100      	movs	r1, #0
     4e6:	2000      	movs	r0, #0
     4e8:	f001 fb88 	bl	1bfc <am_hal_iom_spi_write>
        //
        // Wait for the slave to read the ACK
        //
        while ( !am_hal_gpio_input_bit_read(BOOTLOADER_HANDSHAKE_PIN) );
     4ec:	bf00      	nop
     4ee:	4b23      	ldr	r3, [pc, #140]	; (57c <transfer_image+0xd8>)
     4f0:	681b      	ldr	r3, [r3, #0]
     4f2:	f003 0304 	and.w	r3, r3, #4
     4f6:	2b00      	cmp	r3, #0
     4f8:	d0f9      	beq.n	4ee <transfer_image+0x4a>

        //
        // We can't transfer more than a few bytes at a time. Limit the
        // transaction to 112 bytes max.
        //
        ui32TransferSize = ui32BytesRemaining > 112 ? 112 : ui32BytesRemaining;
     4fa:	68fb      	ldr	r3, [r7, #12]
     4fc:	2b70      	cmp	r3, #112	; 0x70
     4fe:	bf28      	it	cs
     500:	2370      	movcs	r3, #112	; 0x70
     502:	603b      	str	r3, [r7, #0]

        //
        // Start the packet with the packet length.
        //
        g_psTxBuffer.words[0] = ui32TransferSize;
     504:	4a1f      	ldr	r2, [pc, #124]	; (584 <transfer_image+0xe0>)
     506:	683b      	ldr	r3, [r7, #0]
     508:	6013      	str	r3, [r2, #0]

        //
        // Fill in the packet contents.
        //
        for ( i = 0; i < ui32TransferSize; i++ )
     50a:	2300      	movs	r3, #0
     50c:	607b      	str	r3, [r7, #4]
     50e:	e00b      	b.n	528 <transfer_image+0x84>
        {
            g_psTxBuffer.bytes[4 + i] = IMAGE_ARRAY[ui32Offset + i];
     510:	687b      	ldr	r3, [r7, #4]
     512:	3304      	adds	r3, #4
     514:	68b9      	ldr	r1, [r7, #8]
     516:	687a      	ldr	r2, [r7, #4]
     518:	440a      	add	r2, r1
     51a:	491b      	ldr	r1, [pc, #108]	; (588 <transfer_image+0xe4>)
     51c:	5c89      	ldrb	r1, [r1, r2]
     51e:	4a19      	ldr	r2, [pc, #100]	; (584 <transfer_image+0xe0>)
     520:	54d1      	strb	r1, [r2, r3]
        for ( i = 0; i < ui32TransferSize; i++ )
     522:	687b      	ldr	r3, [r7, #4]
     524:	3301      	adds	r3, #1
     526:	607b      	str	r3, [r7, #4]
     528:	687a      	ldr	r2, [r7, #4]
     52a:	683b      	ldr	r3, [r7, #0]
     52c:	429a      	cmp	r2, r3
     52e:	d3ef      	bcc.n	510 <transfer_image+0x6c>
        }

        //
        // Send the data over to the slave.
        //
        am_hal_iom_spi_write(0, 0, g_psTxBuffer.words, ui32TransferSize + 4,
     530:	683b      	ldr	r3, [r7, #0]
     532:	1d1a      	adds	r2, r3, #4
     534:	f44f 4304 	mov.w	r3, #33792	; 0x8400
     538:	9300      	str	r3, [sp, #0]
     53a:	4613      	mov	r3, r2
     53c:	4a11      	ldr	r2, [pc, #68]	; (584 <transfer_image+0xe0>)
     53e:	2100      	movs	r1, #0
     540:	2000      	movs	r0, #0
     542:	f001 fb5b 	bl	1bfc <am_hal_iom_spi_write>
                             AM_HAL_IOM_OFFSET(0x84));

        //
        // Finish with the "New Packet" boot command.
        //
        g_psTxBuffer.words[0] = AM_BOOTLOADER_NEW_PACKET;
     546:	4b0f      	ldr	r3, [pc, #60]	; (584 <transfer_image+0xe0>)
     548:	2203      	movs	r2, #3
     54a:	601a      	str	r2, [r3, #0]
        am_hal_iom_spi_write(0, 0, g_psTxBuffer.words, 4, AM_HAL_IOM_OFFSET(0x80));
     54c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     550:	9300      	str	r3, [sp, #0]
     552:	2304      	movs	r3, #4
     554:	4a0b      	ldr	r2, [pc, #44]	; (584 <transfer_image+0xe0>)
     556:	2100      	movs	r1, #0
     558:	2000      	movs	r0, #0
     55a:	f001 fb4f 	bl	1bfc <am_hal_iom_spi_write>

        //
        // Update the loop variables.
        //
        ui32BytesRemaining -= ui32TransferSize;
     55e:	68fa      	ldr	r2, [r7, #12]
     560:	683b      	ldr	r3, [r7, #0]
     562:	1ad3      	subs	r3, r2, r3
     564:	60fb      	str	r3, [r7, #12]
        ui32Offset += ui32TransferSize;
     566:	68ba      	ldr	r2, [r7, #8]
     568:	683b      	ldr	r3, [r7, #0]
     56a:	4413      	add	r3, r2
     56c:	60bb      	str	r3, [r7, #8]
    while ( ui32BytesRemaining )
     56e:	68fb      	ldr	r3, [r7, #12]
     570:	2b00      	cmp	r3, #0
     572:	d1a0      	bne.n	4b6 <transfer_image+0x12>
    }
}
     574:	bf00      	nop
     576:	3710      	adds	r7, #16
     578:	46bd      	mov	sp, r7
     57a:	bd80      	pop	{r7, pc}
     57c:	40010080 	.word	0x40010080
     580:	1000120c 	.word	0x1000120c
     584:	1000101c 	.word	0x1000101c
     588:	000028e8 	.word	0x000028e8

0000058c <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     58c:	b580      	push	{r7, lr}
     58e:	b082      	sub	sp, #8
     590:	af02      	add	r7, sp, #8
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     592:	2000      	movs	r0, #0
     594:	f000 f9aa 	bl	8ec <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     598:	481d      	ldr	r0, [pc, #116]	; (610 <main+0x84>)
     59a:	f000 f911 	bl	7c0 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     59e:	f000 f8fd 	bl	79c <am_bsp_low_power_init>

    //
    // Setup the pins for IO Master Example.
    //
    configure_pins();
     5a2:	f7ff fd8d 	bl	c0 <configure_pins>

    //
    // Initialize IOM 0 in SPI mode at 100KHz
    //
#ifndef AM_PART_APOLLO
    am_hal_iom_pwrctrl_enable(0);
     5a6:	2000      	movs	r0, #0
     5a8:	f000 faf4 	bl	b94 <am_hal_iom_pwrctrl_enable>
#endif
    am_hal_iom_config(0, &g_sIOMConfig);
     5ac:	4919      	ldr	r1, [pc, #100]	; (614 <main+0x88>)
     5ae:	2000      	movs	r0, #0
     5b0:	f000 fb1a 	bl	be8 <am_hal_iom_config>
    //
    // Turn on the IOM for this operation.
    //
    am_bsp_iom_enable(0);
     5b4:	2000      	movs	r0, #0
     5b6:	f000 f88d 	bl	6d4 <am_bsp_iom_enable>

    //
    // Force the slave into boot mode.
    //
    start_boot_mode();
     5ba:	f7ff fe55 	bl	268 <start_boot_mode>

    //
    // Wait for the 'READY' from the boot slave, and then send the packet
    // information.
    //
    start_new_image();
     5be:	f7ff fecb 	bl	358 <start_new_image>

    //
    // Change the override pin to correspond to a button on the Apollo EVK
    //
    override_pin_set(TARGET_BOARD_OVERRIDE_PIN, 0);
     5c2:	2100      	movs	r1, #0
     5c4:	2012      	movs	r0, #18
     5c6:	f7ff ff21 	bl	40c <override_pin_set>

    //
    // Wait for another 'READY', and send the actual image across.
    //
    transfer_image();
     5ca:	f7ff ff6b 	bl	4a4 <transfer_image>
    //
    // At this point, the slave should send back a either 'CRC OK' or some sort
    // of error. If the CRC was good, we should tell the slave to reset itself
    // and run the new image.
    //
    while ( am_hal_gpio_input_bit_read(BOOTLOADER_HANDSHAKE_PIN) );
     5ce:	bf00      	nop
     5d0:	4b11      	ldr	r3, [pc, #68]	; (618 <main+0x8c>)
     5d2:	681b      	ldr	r3, [r3, #0]
     5d4:	f003 0304 	and.w	r3, r3, #4
     5d8:	2b00      	cmp	r3, #0
     5da:	d1f9      	bne.n	5d0 <main+0x44>
    am_hal_iom_spi_read(0, 0, g_psRxBuffer.words, 4, AM_HAL_IOM_OFFSET(0x0));
     5dc:	2300      	movs	r3, #0
     5de:	9300      	str	r3, [sp, #0]
     5e0:	2304      	movs	r3, #4
     5e2:	4a0e      	ldr	r2, [pc, #56]	; (61c <main+0x90>)
     5e4:	2100      	movs	r1, #0
     5e6:	2000      	movs	r0, #0
     5e8:	f001 fd5a 	bl	20a0 <am_hal_iom_spi_read>

    if ( g_psRxBuffer.words[0] == AM_BOOTLOADER_IMAGE_COMPLETE )
     5ec:	4b0b      	ldr	r3, [pc, #44]	; (61c <main+0x90>)
     5ee:	681b      	ldr	r3, [r3, #0]
     5f0:	2b03      	cmp	r3, #3
     5f2:	d10b      	bne.n	60c <main+0x80>
    {
        //
        // If the CRC is correct, send a RESET command.
        //
        g_psTxBuffer.words[0] = AM_BOOTLOADER_RESET;
     5f4:	4b0a      	ldr	r3, [pc, #40]	; (620 <main+0x94>)
     5f6:	2204      	movs	r2, #4
     5f8:	601a      	str	r2, [r3, #0]
        am_hal_iom_spi_write(0, 0, g_psTxBuffer.words, 4, AM_HAL_IOM_OFFSET(0x80));
     5fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     5fe:	9300      	str	r3, [sp, #0]
     600:	2304      	movs	r3, #4
     602:	4a07      	ldr	r2, [pc, #28]	; (620 <main+0x94>)
     604:	2100      	movs	r1, #0
     606:	2000      	movs	r0, #0
     608:	f001 faf8 	bl	1bfc <am_hal_iom_spi_write>
    }

    //
    // Loop forever.
    //
    while (1)
     60c:	e7fe      	b.n	60c <main+0x80>
     60e:	bf00      	nop
     610:	00004530 	.word	0x00004530
     614:	000044f4 	.word	0x000044f4
     618:	40010080 	.word	0x40010080
     61c:	1000120c 	.word	0x1000120c
     620:	1000101c 	.word	0x1000101c

00000624 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     624:	4811      	ldr	r0, [pc, #68]	; (66c <zero_loop+0x12>)
     626:	4912      	ldr	r1, [pc, #72]	; (670 <zero_loop+0x16>)
     628:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     62a:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     62e:	4811      	ldr	r0, [pc, #68]	; (674 <zero_loop+0x1a>)
     630:	6801      	ldr	r1, [r0, #0]
     632:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     636:	6001      	str	r1, [r0, #0]
     638:	f3bf 8f4f 	dsb	sy
     63c:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     640:	480d      	ldr	r0, [pc, #52]	; (678 <zero_loop+0x1e>)
     642:	490e      	ldr	r1, [pc, #56]	; (67c <zero_loop+0x22>)
     644:	4a0e      	ldr	r2, [pc, #56]	; (680 <zero_loop+0x26>)

00000646 <copy_loop>:
     646:	f850 3b04 	ldr.w	r3, [r0], #4
     64a:	f841 3b04 	str.w	r3, [r1], #4
     64e:	4291      	cmp	r1, r2
     650:	dbf9      	blt.n	646 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     652:	480c      	ldr	r0, [pc, #48]	; (684 <zero_loop+0x2a>)
     654:	490c      	ldr	r1, [pc, #48]	; (688 <zero_loop+0x2e>)
     656:	f04f 0200 	mov.w	r2, #0

0000065a <zero_loop>:
     65a:	4288      	cmp	r0, r1
     65c:	bfb8      	it	lt
     65e:	f840 2b04 	strlt.w	r2, [r0], #4
     662:	dbfa      	blt.n	65a <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     664:	f7ff ff92 	bl	58c <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     668:	be00      	bkpt	0x0000
}
     66a:	bf00      	nop
     66c:	e000ed08 	.word	0xe000ed08
     670:	00000000 	.word	0x00000000
     674:	e000ed88 	.word	0xe000ed88
     678:	000046e8 	.word	0x000046e8
     67c:	10001000 	.word	0x10001000
     680:	10001004 	.word	0x10001004
     684:	10001004 	.word	0x10001004
     688:	100014a4 	.word	0x100014a4

0000068c <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     68c:	b480      	push	{r7}
     68e:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     690:	e7fe      	b.n	690 <am_nmi_isr+0x4>

00000692 <am_busfault_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_fault_isr(void)
{
     692:	b480      	push	{r7}
     694:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     696:	e7fe      	b.n	696 <am_busfault_isr+0x4>

00000698 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     698:	b480      	push	{r7}
     69a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     69c:	e7fe      	b.n	69c <am_adc_isr+0x4>
	...

000006a0 <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
     6a0:	b580      	push	{r7, lr}
     6a2:	b084      	sub	sp, #16
     6a4:	af00      	add	r7, sp, #0
     6a6:	6078      	str	r0, [r7, #4]
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
     6a8:	f000 f938 	bl	91c <am_hal_clkgen_sysclk_get>
     6ac:	60f8      	str	r0, [r7, #12]
#endif
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
     6ae:	68fb      	ldr	r3, [r7, #12]
     6b0:	4a07      	ldr	r2, [pc, #28]	; (6d0 <am_util_delay_us+0x30>)
     6b2:	fba2 2303 	umull	r2, r3, r2, r3
     6b6:	0c9b      	lsrs	r3, r3, #18
     6b8:	687a      	ldr	r2, [r7, #4]
     6ba:	fb02 f303 	mul.w	r3, r2, r3
     6be:	60bb      	str	r3, [r7, #8]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
     6c0:	68b8      	ldr	r0, [r7, #8]
     6c2:	f000 f947 	bl	954 <am_hal_flash_delay>
}
     6c6:	bf00      	nop
     6c8:	3710      	adds	r7, #16
     6ca:	46bd      	mov	sp, r7
     6cc:	bd80      	pop	{r7, pc}
     6ce:	bf00      	nop
     6d0:	165e9f81 	.word	0x165e9f81

000006d4 <am_bsp_iom_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_iom_enable(uint32_t ui32Module)
{
     6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     6d6:	4605      	mov	r5, r0
    am_hal_iom_enable(ui32Module);

    //
    // Check that the MISO pin is defined in BSP and we are in SPI mode.
    //
    if ( (AM_BSP_GPIO_UNDEF != g_SPIpins[ui32Module][0] ) &&
     6d8:	4e2b      	ldr	r6, [pc, #172]	; (788 <am_bsp_iom_enable+0xb4>)
{
     6da:	b083      	sub	sp, #12
    am_hal_iom_enable(ui32Module);
     6dc:	f000 fa6e 	bl	bbc <am_hal_iom_enable>
    if ( (AM_BSP_GPIO_UNDEF != g_SPIpins[ui32Module][0] ) &&
     6e0:	f856 4035 	ldr.w	r4, [r6, r5, lsl #3]
     6e4:	4b29      	ldr	r3, [pc, #164]	; (78c <am_bsp_iom_enable+0xb8>)
     6e6:	429c      	cmp	r4, r3
     6e8:	d009      	beq.n	6fe <am_bsp_iom_enable+0x2a>
         (1 == AM_BFRn(IOMSTR, ui32Module, CFG, IFCSEL) ) )
     6ea:	f505 20a0 	add.w	r0, r5, #327680	; 0x50000
     6ee:	3004      	adds	r0, #4
     6f0:	0301      	lsls	r1, r0, #12
     6f2:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    if ( (AM_BSP_GPIO_UNDEF != g_SPIpins[ui32Module][0] ) &&
     6f6:	07d3      	lsls	r3, r2, #31
     6f8:	d501      	bpl.n	6fe <am_bsp_iom_enable+0x2a>
    {
        am_hal_gpio_pin_config(g_SPIpins[ui32Module][0],
     6fa:	2c31      	cmp	r4, #49	; 0x31
     6fc:	d901      	bls.n	702 <am_bsp_iom_enable+0x2e>
                               g_SPIpins[ui32Module][1]);
    }
}
     6fe:	b003      	add	sp, #12
     700:	bdf0      	pop	{r4, r5, r6, r7, pc}
        am_hal_gpio_pin_config(g_SPIpins[ui32Module][0],
     702:	f000 fa0b 	bl	b1c <am_hal_interrupt_master_disable>
     706:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
     70a:	4e21      	ldr	r6, [pc, #132]	; (790 <am_bsp_iom_enable+0xbc>)
     70c:	9001      	str	r0, [sp, #4]
     70e:	0865      	lsrs	r5, r4, #1
     710:	f005 0e7c 	and.w	lr, r5, #124	; 0x7c
     714:	f8df c080 	ldr.w	ip, [pc, #128]	; 798 <am_bsp_iom_enable+0xc4>
     718:	687b      	ldr	r3, [r7, #4]
     71a:	4d1e      	ldr	r5, [pc, #120]	; (794 <am_bsp_iom_enable+0xc0>)
     71c:	2073      	movs	r0, #115	; 0x73
     71e:	6030      	str	r0, [r6, #0]
     720:	00a1      	lsls	r1, r4, #2
     722:	f85e 700c 	ldr.w	r7, [lr, ip]
     726:	f001 001c 	and.w	r0, r1, #28
     72a:	2207      	movs	r2, #7
     72c:	4082      	lsls	r2, r0
     72e:	ea27 0102 	bic.w	r1, r7, r2
     732:	f3c3 2202 	ubfx	r2, r3, #8, #3
     736:	4082      	lsls	r2, r0
     738:	f004 00fc 	and.w	r0, r4, #252	; 0xfc
     73c:	430a      	orrs	r2, r1
     73e:	f100 4780 	add.w	r7, r0, #1073741824	; 0x40000000
     742:	f84e 200c 	str.w	r2, [lr, ip]
     746:	00e4      	lsls	r4, r4, #3
     748:	f507 3c80 	add.w	ip, r7, #65536	; 0x10000
     74c:	21ff      	movs	r1, #255	; 0xff
     74e:	f004 0718 	and.w	r7, r4, #24
     752:	f8dc e000 	ldr.w	lr, [ip]
     756:	40b9      	lsls	r1, r7
     758:	43ca      	mvns	r2, r1
     75a:	b2dc      	uxtb	r4, r3
     75c:	ea0e 0102 	and.w	r1, lr, r2
     760:	40bc      	lsls	r4, r7
     762:	430c      	orrs	r4, r1
     764:	f8cc 4000 	str.w	r4, [ip]
     768:	5941      	ldr	r1, [r0, r5]
     76a:	f3c3 4307 	ubfx	r3, r3, #16, #8
     76e:	400a      	ands	r2, r1
     770:	fa03 f707 	lsl.w	r7, r3, r7
     774:	4317      	orrs	r7, r2
     776:	2200      	movs	r2, #0
     778:	5147      	str	r7, [r0, r5]
     77a:	6032      	str	r2, [r6, #0]
     77c:	9801      	ldr	r0, [sp, #4]
     77e:	f000 f9d1 	bl	b24 <am_hal_interrupt_master_set>
}
     782:	b003      	add	sp, #12
     784:	bdf0      	pop	{r4, r5, r6, r7, pc}
     786:	bf00      	nop
     788:	00004500 	.word	0x00004500
     78c:	deadbeef 	.word	0xdeadbeef
     790:	40010060 	.word	0x40010060
     794:	400100e0 	.word	0x400100e0
     798:	40010040 	.word	0x40010040

0000079c <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
     79c:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
     79e:	f001 fe55 	bl	244c <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
     7a2:	f001 fec1 	bl	2528 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
     7a6:	f002 f813 	bl	27d0 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
     7aa:	2001      	movs	r0, #1
     7ac:	f001 ff5c 	bl	2668 <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
     7b0:	2001      	movs	r0, #1
     7b2:	f000 f8c3 	bl	93c <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
     7b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
     7ba:	f001 bf63 	b.w	2684 <am_hal_rtc_osc_disable>
     7be:	bf00      	nop

000007c0 <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
     7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     7c2:	4605      	mov	r5, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
     7c4:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
     7c8:	78ab      	ldrb	r3, [r5, #2]
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
     7ca:	786c      	ldrb	r4, [r5, #1]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
     7cc:	78ef      	ldrb	r7, [r5, #3]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
     7ce:	792e      	ldrb	r6, [r5, #4]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
     7d0:	79a9      	ldrb	r1, [r5, #6]
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
     7d2:	009a      	lsls	r2, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
     7d4:	0064      	lsls	r4, r4, #1
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
     7d6:	f002 0204 	and.w	r2, r2, #4
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
     7da:	f004 0402 	and.w	r4, r4, #2
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
     7de:	4314      	orrs	r4, r2
     7e0:	f047 0701 	orr.w	r7, r7, #1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
     7e4:	79ea      	ldrb	r2, [r5, #7]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
     7e6:	01f6      	lsls	r6, r6, #7
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
     7e8:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
     7ea:	b2f6      	uxtb	r6, r6
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
     7ec:	7a2f      	ldrb	r7, [r5, #8]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
     7ee:	0289      	lsls	r1, r1, #10
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
     7f0:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
     7f2:	f401 6180 	and.w	r1, r1, #1024	; 0x400
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
     7f6:	7a6e      	ldrb	r6, [r5, #9]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
     7f8:	02d2      	lsls	r2, r2, #11
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
     7fa:	430c      	orrs	r4, r1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
     7fc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
     800:	7aa9      	ldrb	r1, [r5, #10]
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
     802:	033f      	lsls	r7, r7, #12
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
     804:	4314      	orrs	r4, r2
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
     806:	b2bf      	uxth	r7, r7
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
     808:	0436      	lsls	r6, r6, #16
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
     80a:	7aea      	ldrb	r2, [r5, #11]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
     80c:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
     80e:	0509      	lsls	r1, r1, #20
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
     810:	f406 2770 	and.w	r7, r6, #983040	; 0xf0000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
     814:	0612      	lsls	r2, r2, #24
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
     816:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
     818:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
     81c:	009b      	lsls	r3, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
     81e:	f002 7780 	and.w	r7, r2, #16777216	; 0x1000000
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
     822:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
     824:	f003 0108 	and.w	r1, r3, #8
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
     828:	433c      	orrs	r4, r7
     82a:	430c      	orrs	r4, r1
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
     82c:	f001 fd08 	bl	2240 <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
     830:	482c      	ldr	r0, [pc, #176]	; (8e4 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
     832:	4b2d      	ldr	r3, [pc, #180]	; (8e8 <am_hal_cachectrl_enable+0x128>)
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
     834:	6004      	str	r4, [r0, #0]
     836:	2232      	movs	r2, #50	; 0x32
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
     838:	681e      	ldr	r6, [r3, #0]
     83a:	0777      	lsls	r7, r6, #29
     83c:	d41e      	bmi.n	87c <am_hal_cachectrl_enable+0xbc>
     83e:	681f      	ldr	r7, [r3, #0]
     840:	077e      	lsls	r6, r7, #29
     842:	f102 32ff 	add.w	r2, r2, #4294967295
     846:	d419      	bmi.n	87c <am_hal_cachectrl_enable+0xbc>
     848:	6819      	ldr	r1, [r3, #0]
     84a:	074f      	lsls	r7, r1, #29
     84c:	d416      	bmi.n	87c <am_hal_cachectrl_enable+0xbc>
     84e:	6818      	ldr	r0, [r3, #0]
     850:	0746      	lsls	r6, r0, #29
     852:	d413      	bmi.n	87c <am_hal_cachectrl_enable+0xbc>
     854:	681e      	ldr	r6, [r3, #0]
     856:	0770      	lsls	r0, r6, #29
     858:	d410      	bmi.n	87c <am_hal_cachectrl_enable+0xbc>
     85a:	681f      	ldr	r7, [r3, #0]
     85c:	0779      	lsls	r1, r7, #29
     85e:	d40d      	bmi.n	87c <am_hal_cachectrl_enable+0xbc>
     860:	6819      	ldr	r1, [r3, #0]
     862:	074f      	lsls	r7, r1, #29
     864:	d40a      	bmi.n	87c <am_hal_cachectrl_enable+0xbc>
     866:	6818      	ldr	r0, [r3, #0]
     868:	0746      	lsls	r6, r0, #29
     86a:	d407      	bmi.n	87c <am_hal_cachectrl_enable+0xbc>
     86c:	681e      	ldr	r6, [r3, #0]
     86e:	0770      	lsls	r0, r6, #29
     870:	d404      	bmi.n	87c <am_hal_cachectrl_enable+0xbc>
     872:	681f      	ldr	r7, [r3, #0]
     874:	0779      	lsls	r1, r7, #29
     876:	d401      	bmi.n	87c <am_hal_cachectrl_enable+0xbc>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
     878:	3a09      	subs	r2, #9
     87a:	d1dd      	bne.n	838 <am_hal_cachectrl_enable+0x78>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
     87c:	4b1a      	ldr	r3, [pc, #104]	; (8e8 <am_hal_cachectrl_enable+0x128>)
     87e:	681a      	ldr	r2, [r3, #0]
     880:	f042 0101 	orr.w	r1, r2, #1
     884:	6019      	str	r1, [r3, #0]
     886:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
     888:	6818      	ldr	r0, [r3, #0]
     88a:	0740      	lsls	r0, r0, #29
     88c:	d41e      	bmi.n	8cc <am_hal_cachectrl_enable+0x10c>
     88e:	681e      	ldr	r6, [r3, #0]
     890:	0771      	lsls	r1, r6, #29
     892:	f102 32ff 	add.w	r2, r2, #4294967295
     896:	d419      	bmi.n	8cc <am_hal_cachectrl_enable+0x10c>
     898:	681f      	ldr	r7, [r3, #0]
     89a:	077f      	lsls	r7, r7, #29
     89c:	d416      	bmi.n	8cc <am_hal_cachectrl_enable+0x10c>
     89e:	6819      	ldr	r1, [r3, #0]
     8a0:	074e      	lsls	r6, r1, #29
     8a2:	d413      	bmi.n	8cc <am_hal_cachectrl_enable+0x10c>
     8a4:	6818      	ldr	r0, [r3, #0]
     8a6:	0740      	lsls	r0, r0, #29
     8a8:	d410      	bmi.n	8cc <am_hal_cachectrl_enable+0x10c>
     8aa:	681e      	ldr	r6, [r3, #0]
     8ac:	0771      	lsls	r1, r6, #29
     8ae:	d40d      	bmi.n	8cc <am_hal_cachectrl_enable+0x10c>
     8b0:	681f      	ldr	r7, [r3, #0]
     8b2:	077f      	lsls	r7, r7, #29
     8b4:	d40a      	bmi.n	8cc <am_hal_cachectrl_enable+0x10c>
     8b6:	6819      	ldr	r1, [r3, #0]
     8b8:	074e      	lsls	r6, r1, #29
     8ba:	d407      	bmi.n	8cc <am_hal_cachectrl_enable+0x10c>
     8bc:	6818      	ldr	r0, [r3, #0]
     8be:	0740      	lsls	r0, r0, #29
     8c0:	d404      	bmi.n	8cc <am_hal_cachectrl_enable+0x10c>
     8c2:	681e      	ldr	r6, [r3, #0]
     8c4:	0771      	lsls	r1, r6, #29
     8c6:	d401      	bmi.n	8cc <am_hal_cachectrl_enable+0x10c>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
     8c8:	3a09      	subs	r2, #9
     8ca:	d1dd      	bne.n	888 <am_hal_cachectrl_enable+0xc8>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
     8cc:	796d      	ldrb	r5, [r5, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
     8ce:	4f05      	ldr	r7, [pc, #20]	; (8e4 <am_hal_cachectrl_enable+0x124>)
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );
     8d0:	022b      	lsls	r3, r5, #8
     8d2:	f403 7100 	and.w	r1, r3, #512	; 0x200
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
     8d6:	f403 7280 	and.w	r2, r3, #256	; 0x100
     8da:	4311      	orrs	r1, r2
     8dc:	430c      	orrs	r4, r1
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
     8de:	603c      	str	r4, [r7, #0]
     8e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     8e2:	bf00      	nop
     8e4:	40018000 	.word	0x40018000
     8e8:	40018008 	.word	0x40018008

000008ec <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
     8ec:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
     8ee:	4604      	mov	r4, r0
     8f0:	b120      	cbz	r0, 8fc <am_hal_clkgen_sysclk_select+0x10>
     8f2:	4a06      	ldr	r2, [pc, #24]	; (90c <am_hal_clkgen_sysclk_select+0x20>)
     8f4:	4806      	ldr	r0, [pc, #24]	; (910 <am_hal_clkgen_sysclk_select+0x24>)
     8f6:	2153      	movs	r1, #83	; 0x53
     8f8:	f000 f82a 	bl	950 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
     8fc:	4b05      	ldr	r3, [pc, #20]	; (914 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the required operating value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
     8fe:	4906      	ldr	r1, [pc, #24]	; (918 <am_hal_clkgen_sysclk_select+0x2c>)
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
     900:	2047      	movs	r0, #71	; 0x47

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
     902:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
     904:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
     906:	600c      	str	r4, [r1, #0]
    AM_REG(CLKGEN, CLKKEY) = 0;
     908:	601a      	str	r2, [r3, #0]
     90a:	bd10      	pop	{r4, pc}
     90c:	0000453c 	.word	0x0000453c
     910:	00004574 	.word	0x00004574
     914:	40004014 	.word	0x40004014
     918:	40004018 	.word	0x40004018

0000091c <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
     91c:	4b04      	ldr	r3, [pc, #16]	; (930 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
     91e:	4905      	ldr	r1, [pc, #20]	; (934 <am_hal_clkgen_sysclk_get+0x18>)
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
     920:	681a      	ldr	r2, [r3, #0]
            return 48000000;
     922:	4805      	ldr	r0, [pc, #20]	; (938 <am_hal_clkgen_sysclk_get+0x1c>)
    switch ( ui32ClockSetting )
     924:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
     928:	bf08      	it	eq
     92a:	4608      	moveq	r0, r1
     92c:	4770      	bx	lr
     92e:	bf00      	nop
     930:	40004018 	.word	0x40004018
     934:	02dc6c00 	.word	0x02dc6c00
     938:	016e3600 	.word	0x016e3600

0000093c <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
     93c:	0783      	lsls	r3, r0, #30
     93e:	d003      	beq.n	948 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
     940:	4b02      	ldr	r3, [pc, #8]	; (94c <am_hal_clkgen_osc_stop+0x10>)
     942:	681a      	ldr	r2, [r3, #0]
     944:	4310      	orrs	r0, r2
     946:	6018      	str	r0, [r3, #0]
     948:	4770      	bx	lr
     94a:	bf00      	nop
     94c:	4000400c 	.word	0x4000400c

00000950 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
     950:	e7fe      	b.n	950 <am_hal_debug_error>
     952:	bf00      	nop

00000954 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
     954:	4b00      	ldr	r3, [pc, #0]	; (958 <am_hal_flash_delay+0x4>)
     956:	4718      	bx	r3
     958:	0800009d 	.word	0x0800009d

0000095c <am_hal_flash_delay_status_change>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_change(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                 uint32_t ui32Mask, uint32_t ui32Value)
{
    while ( ui32usMaxDelay-- )
     95c:	2800      	cmp	r0, #0
     95e:	f000 809a 	beq.w	a96 <am_hal_flash_delay_status_change+0x13a>
{
     962:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     966:	1e44      	subs	r4, r0, #1
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     968:	6808      	ldr	r0, [r1, #0]
     96a:	4010      	ands	r0, r2
     96c:	4283      	cmp	r3, r0
     96e:	f000 808c 	beq.w	a8a <am_hal_flash_delay_status_change+0x12e>
     972:	f014 0907 	ands.w	r9, r4, #7
     976:	461d      	mov	r5, r3
     978:	4616      	mov	r6, r2
     97a:	460f      	mov	r7, r1
    g_am_hal_flash.delay_cycles(ui32Iterations);
     97c:	f8df 811c 	ldr.w	r8, [pc, #284]	; a9c <am_hal_flash_delay_status_change+0x140>
     980:	d049      	beq.n	a16 <am_hal_flash_delay_status_change+0xba>
     982:	200c      	movs	r0, #12
     984:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     986:	683b      	ldr	r3, [r7, #0]
     988:	4033      	ands	r3, r6
     98a:	42ab      	cmp	r3, r5
    while ( ui32usMaxDelay-- )
     98c:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     990:	d07b      	beq.n	a8a <am_hal_flash_delay_status_change+0x12e>
     992:	f1b9 0f01 	cmp.w	r9, #1
     996:	d03e      	beq.n	a16 <am_hal_flash_delay_status_change+0xba>
     998:	f1b9 0f02 	cmp.w	r9, #2
     99c:	d033      	beq.n	a06 <am_hal_flash_delay_status_change+0xaa>
     99e:	f1b9 0f03 	cmp.w	r9, #3
     9a2:	d028      	beq.n	9f6 <am_hal_flash_delay_status_change+0x9a>
     9a4:	f1b9 0f04 	cmp.w	r9, #4
     9a8:	d01d      	beq.n	9e6 <am_hal_flash_delay_status_change+0x8a>
     9aa:	f1b9 0f05 	cmp.w	r9, #5
     9ae:	d012      	beq.n	9d6 <am_hal_flash_delay_status_change+0x7a>
     9b0:	f1b9 0f06 	cmp.w	r9, #6
     9b4:	d007      	beq.n	9c6 <am_hal_flash_delay_status_change+0x6a>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     9b6:	200c      	movs	r0, #12
     9b8:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     9ba:	6839      	ldr	r1, [r7, #0]
     9bc:	4031      	ands	r1, r6
     9be:	42a9      	cmp	r1, r5
    while ( ui32usMaxDelay-- )
     9c0:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     9c4:	d061      	beq.n	a8a <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     9c6:	200c      	movs	r0, #12
     9c8:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     9ca:	683a      	ldr	r2, [r7, #0]
     9cc:	4032      	ands	r2, r6
     9ce:	42aa      	cmp	r2, r5
    while ( ui32usMaxDelay-- )
     9d0:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     9d4:	d059      	beq.n	a8a <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     9d6:	200c      	movs	r0, #12
     9d8:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     9da:	6838      	ldr	r0, [r7, #0]
     9dc:	4030      	ands	r0, r6
     9de:	42a8      	cmp	r0, r5
    while ( ui32usMaxDelay-- )
     9e0:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     9e4:	d051      	beq.n	a8a <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     9e6:	200c      	movs	r0, #12
     9e8:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     9ea:	683b      	ldr	r3, [r7, #0]
     9ec:	4033      	ands	r3, r6
     9ee:	42ab      	cmp	r3, r5
    while ( ui32usMaxDelay-- )
     9f0:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     9f4:	d049      	beq.n	a8a <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     9f6:	200c      	movs	r0, #12
     9f8:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     9fa:	6839      	ldr	r1, [r7, #0]
     9fc:	4031      	ands	r1, r6
     9fe:	42a9      	cmp	r1, r5
    while ( ui32usMaxDelay-- )
     a00:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     a04:	d041      	beq.n	a8a <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     a06:	200c      	movs	r0, #12
     a08:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     a0a:	683a      	ldr	r2, [r7, #0]
     a0c:	4032      	ands	r2, r6
     a0e:	42aa      	cmp	r2, r5
    while ( ui32usMaxDelay-- )
     a10:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     a14:	d039      	beq.n	a8a <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     a16:	200c      	movs	r0, #12
     a18:	47c0      	blx	r8
     a1a:	200c      	movs	r0, #12
    while ( ui32usMaxDelay-- )
     a1c:	2c00      	cmp	r4, #0
     a1e:	d037      	beq.n	a90 <am_hal_flash_delay_status_change+0x134>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     a20:	683b      	ldr	r3, [r7, #0]
     a22:	4033      	ands	r3, r6
     a24:	42ab      	cmp	r3, r5
    while ( ui32usMaxDelay-- )
     a26:	f1a4 0408 	sub.w	r4, r4, #8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     a2a:	d02e      	beq.n	a8a <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     a2c:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     a2e:	6839      	ldr	r1, [r7, #0]
     a30:	4031      	ands	r1, r6
     a32:	42a9      	cmp	r1, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
     a34:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     a38:	d027      	beq.n	a8a <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     a3a:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     a3c:	683a      	ldr	r2, [r7, #0]
     a3e:	4032      	ands	r2, r6
     a40:	42aa      	cmp	r2, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
     a42:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     a46:	d020      	beq.n	a8a <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     a48:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     a4a:	683b      	ldr	r3, [r7, #0]
     a4c:	4033      	ands	r3, r6
     a4e:	42ab      	cmp	r3, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
     a50:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     a54:	d019      	beq.n	a8a <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     a56:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     a58:	6839      	ldr	r1, [r7, #0]
     a5a:	4031      	ands	r1, r6
     a5c:	42a9      	cmp	r1, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
     a5e:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     a62:	d012      	beq.n	a8a <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     a64:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     a66:	683a      	ldr	r2, [r7, #0]
     a68:	4032      	ands	r2, r6
     a6a:	42aa      	cmp	r2, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
     a6c:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     a70:	d00b      	beq.n	a8a <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     a72:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     a74:	683b      	ldr	r3, [r7, #0]
     a76:	4033      	ands	r3, r6
     a78:	42ab      	cmp	r3, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
     a7a:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     a7e:	d004      	beq.n	a8a <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     a80:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     a82:	6838      	ldr	r0, [r7, #0]
     a84:	4030      	ands	r0, r6
     a86:	42a8      	cmp	r0, r5
     a88:	d1c5      	bne.n	a16 <am_hal_flash_delay_status_change+0xba>
        {
            return 1;
     a8a:	2001      	movs	r0, #1
     a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        // Call the BOOTROM cycle function to delay for about 1 microsecond.
        //
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    }

    return 0;
     a90:	2000      	movs	r0, #0
     a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     a96:	2000      	movs	r0, #0
} // am_hal_flash_delay_status_change()
     a98:	4770      	bx	lr
     a9a:	bf00      	nop
     a9c:	0800009d 	.word	0x0800009d

00000aa0 <am_hal_gpio_int_clear>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_clear(uint64_t ui64InterruptMask)
{
     aa0:	b530      	push	{r4, r5, lr}
     aa2:	b083      	sub	sp, #12
     aa4:	460d      	mov	r5, r1
     aa6:	4604      	mov	r4, r0
    //
    // Clear the interrupts.
    //
    AM_CRITICAL_BEGIN_ASM
     aa8:	f000 f838 	bl	b1c <am_hal_interrupt_master_disable>
    AM_REG(GPIO, INT1CLR) = (ui64InterruptMask >> 32);
     aac:	4a04      	ldr	r2, [pc, #16]	; (ac0 <am_hal_gpio_int_clear+0x20>)
    AM_REG(GPIO, INT0CLR) = (ui64InterruptMask & 0xFFFFFFFF);
     aae:	4b05      	ldr	r3, [pc, #20]	; (ac4 <am_hal_gpio_int_clear+0x24>)
    AM_CRITICAL_BEGIN_ASM
     ab0:	9001      	str	r0, [sp, #4]
    AM_REG(GPIO, INT1CLR) = (ui64InterruptMask >> 32);
     ab2:	6015      	str	r5, [r2, #0]
    AM_REG(GPIO, INT0CLR) = (ui64InterruptMask & 0xFFFFFFFF);
     ab4:	601c      	str	r4, [r3, #0]
    AM_CRITICAL_END_ASM
     ab6:	9801      	ldr	r0, [sp, #4]
     ab8:	f000 f834 	bl	b24 <am_hal_interrupt_master_set>
}
     abc:	b003      	add	sp, #12
     abe:	bd30      	pop	{r4, r5, pc}
     ac0:	40010218 	.word	0x40010218
     ac4:	40010208 	.word	0x40010208

00000ac8 <am_hal_gpio_int_status_get>:
//! @return None
//
//*****************************************************************************
uint64_t
am_hal_gpio_int_status_get(bool bEnabledOnly)
{
     ac8:	b570      	push	{r4, r5, r6, lr}
     aca:	b082      	sub	sp, #8
     acc:	4606      	mov	r6, r0
    //
    // Combine upper or lower GPIO words into one 64 bit return value.
    //
    ui64Mask   = 0xFFFFFFFFFFFFFFFF;

    AM_CRITICAL_BEGIN_ASM
     ace:	f000 f825 	bl	b1c <am_hal_interrupt_master_disable>
    ui64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
     ad2:	4b0f      	ldr	r3, [pc, #60]	; (b10 <am_hal_gpio_int_status_get+0x48>)
    AM_CRITICAL_BEGIN_ASM
     ad4:	9001      	str	r0, [sp, #4]
    ui64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
     ad6:	f1a3 0110 	sub.w	r1, r3, #16
    ui64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
     ada:	681d      	ldr	r5, [r3, #0]
    ui64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
     adc:	680a      	ldr	r2, [r1, #0]
    ui64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
     ade:	2000      	movs	r0, #0
    ui64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
     ae0:	ea40 0402 	orr.w	r4, r0, r2

    if ( bEnabledOnly )
     ae4:	b176      	cbz	r6, b04 <am_hal_gpio_int_status_get+0x3c>
    {
        ui64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
     ae6:	490b      	ldr	r1, [pc, #44]	; (b14 <am_hal_gpio_int_status_get+0x4c>)
        ui64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
     ae8:	4a0b      	ldr	r2, [pc, #44]	; (b18 <am_hal_gpio_int_status_get+0x50>)
        ui64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
     aea:	680b      	ldr	r3, [r1, #0]
        ui64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
     aec:	6811      	ldr	r1, [r2, #0]
        ui64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
     aee:	4606      	mov	r6, r0
        ui64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
     af0:	430e      	orrs	r6, r1
    }

    ui64RetVal &= ui64Mask;
    AM_CRITICAL_END_ASM
     af2:	9801      	ldr	r0, [sp, #4]
    ui64RetVal &= ui64Mask;
     af4:	401d      	ands	r5, r3
    AM_CRITICAL_END_ASM
     af6:	f000 f815 	bl	b24 <am_hal_interrupt_master_set>
    ui64RetVal &= ui64Mask;
     afa:	4034      	ands	r4, r6

    return ui64RetVal;
}
     afc:	4620      	mov	r0, r4
     afe:	4629      	mov	r1, r5
     b00:	b002      	add	sp, #8
     b02:	bd70      	pop	{r4, r5, r6, pc}
    ui64Mask   = 0xFFFFFFFFFFFFFFFF;
     b04:	f04f 36ff 	mov.w	r6, #4294967295
     b08:	f04f 33ff 	mov.w	r3, #4294967295
     b0c:	e7f1      	b.n	af2 <am_hal_gpio_int_status_get+0x2a>
     b0e:	bf00      	nop
     b10:	40010214 	.word	0x40010214
     b14:	40010210 	.word	0x40010210
     b18:	40010200 	.word	0x40010200

00000b1c <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
     b1c:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
     b20:	b672      	cpsid	i
    __asm("    bx lr");
     b22:	4770      	bx	lr

00000b24 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
     b24:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
     b28:	4770      	bx	lr
     b2a:	bf00      	nop

00000b2c <iom_workaround_loop>:
                    bool bRising)
{
    //
    // Check to see if this is a "rising edge" or "falling edge" detector.
    //
    __asm("    cbz      r2, falling_edge");
     b2c:	b132      	cbz	r2, b3c <falling_edge>

00000b2e <rising_edge>:

    //
    // Read GPIO pin 44, and loop until it's HIGH.
    //
    __asm("rising_edge:");
    __asm("    ldr      r2, =0x40010084");
     b2e:	4a07      	ldr	r2, [pc, #28]	; (b4c <falling_check_mosi+0xe>)

00000b30 <rising_check_mosi>:
    __asm("rising_check_mosi:");
    __asm("    ldr      r3, [r2]");
     b30:	6813      	ldr	r3, [r2, #0]
    __asm("    ands     r3, r3, #0x1000");
     b32:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    __asm("    beq      rising_check_mosi");
     b36:	d0fb      	beq.n	b30 <rising_check_mosi>

    //
    // Write the PADREG Value to the PADREG register.
    //
    __asm("    str     r0, [r1]");
     b38:	6008      	str	r0, [r1, #0]
    __asm("    bx      lr");
     b3a:	4770      	bx	lr

00000b3c <falling_edge>:

    //
    // Read GPIO pin 44, and loop until it's LOW.
    //
    __asm("falling_edge:");
    __asm("    ldr      r2, =0x40010084");
     b3c:	4a03      	ldr	r2, [pc, #12]	; (b4c <falling_check_mosi+0xe>)

00000b3e <falling_check_mosi>:
    __asm("falling_check_mosi:");
    __asm("    ldr      r3, [r2]");
     b3e:	6813      	ldr	r3, [r2, #0]
    __asm("    ands     r3, r3, #0x1000");
     b40:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    __asm("    bne      falling_check_mosi");
     b44:	d1fb      	bne.n	b3e <falling_check_mosi>

    //
    // Write the PADREG Value to the PADREG register.
    //
    __asm("    str     r0, [r1]");
     b46:	6008      	str	r0, [r1, #0]
    __asm("    bx      lr");
     b48:	4770      	bx	lr
     b4a:	0000      	.short	0x0000
     b4c:	40010084 	.word	0x40010084

00000b50 <am_hal_iom_sleeping_queue_flush>:
    uint32_t ui32Critical;

    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
     b50:	2805      	cmp	r0, #5
     b52:	d819      	bhi.n	b88 <am_hal_iom_sleeping_queue_flush+0x38>
{
     b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b56:	4f0d      	ldr	r7, [pc, #52]	; (b8c <am_hal_iom_sleeping_queue_flush+0x3c>)
     b58:	4e0d      	ldr	r6, [pc, #52]	; (b90 <am_hal_iom_sleeping_queue_flush+0x40>)

        //
        // Check the queue and the IOM itself.
        //
        if ( (g_bIomBusy[ui32Module] == false) &&
            am_hal_queue_empty(&g_psIOMQueue[ui32Module]) )
     b5a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     b5e:	4604      	mov	r4, r0
     b60:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
        ui32Critical = am_hal_interrupt_master_disable();
     b64:	f7ff ffda 	bl	b1c <am_hal_interrupt_master_disable>
        if ( (g_bIomBusy[ui32Module] == false) &&
     b68:	5d31      	ldrb	r1, [r6, r4]
        ui32Critical = am_hal_interrupt_master_disable();
     b6a:	4605      	mov	r5, r0
        if ( (g_bIomBusy[ui32Module] == false) &&
     b6c:	b929      	cbnz	r1, b7a <am_hal_iom_sleeping_queue_flush+0x2a>
     b6e:	68ba      	ldr	r2, [r7, #8]
     b70:	b91a      	cbnz	r2, b7a <am_hal_iom_sleeping_queue_flush+0x2a>
        //
        // End the critical section.
        //
        am_hal_interrupt_master_set(ui32Critical);
    }
}
     b72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        am_hal_interrupt_master_set(ui32Critical);
     b76:	f7ff bfd5 	b.w	b24 <am_hal_interrupt_master_set>
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_NORMAL);
     b7a:	2000      	movs	r0, #0
     b7c:	f001 fd8a 	bl	2694 <am_hal_sysctrl_sleep>
        am_hal_interrupt_master_set(ui32Critical);
     b80:	4628      	mov	r0, r5
     b82:	f7ff ffcf 	bl	b24 <am_hal_interrupt_master_set>
     b86:	e7ed      	b.n	b64 <am_hal_iom_sleeping_queue_flush+0x14>
     b88:	4770      	bx	lr
     b8a:	bf00      	nop
     b8c:	1000139c 	.word	0x1000139c
     b90:	10001004 	.word	0x10001004

00000b94 <am_hal_iom_pwrctrl_enable>:
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
     b94:	2805      	cmp	r0, #5
{
     b96:	b510      	push	{r4, lr}
     b98:	4604      	mov	r4, r0
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
     b9a:	d905      	bls.n	ba8 <am_hal_iom_pwrctrl_enable+0x14>
     b9c:	4a05      	ldr	r2, [pc, #20]	; (bb4 <am_hal_iom_pwrctrl_enable+0x20>)
     b9e:	4806      	ldr	r0, [pc, #24]	; (bb8 <am_hal_iom_pwrctrl_enable+0x24>)
     ba0:	f240 21d5 	movw	r1, #725	; 0x2d5
     ba4:	f7ff fed4 	bl	950 <am_hal_debug_error>
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_IOM0 << ui32Module);
     ba8:	2002      	movs	r0, #2
     baa:	40a0      	lsls	r0, r4
}
     bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_IOM0 << ui32Module);
     bb0:	f001 bb04 	b.w	21bc <am_hal_pwrctrl_periph_enable>
     bb4:	0000460c 	.word	0x0000460c
     bb8:	000045c0 	.word	0x000045c0

00000bbc <am_hal_iom_enable>:
    if ( ui32Module < AM_REG_IOMSTR_NUM_MODULES )
     bbc:	2805      	cmp	r0, #5
     bbe:	d80f      	bhi.n	be0 <am_hal_iom_enable+0x24>
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
     bc0:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
     bc4:	3304      	adds	r3, #4
     bc6:	031b      	lsls	r3, r3, #12
        g_bIomBusy[ui32Module] = false;
     bc8:	4906      	ldr	r1, [pc, #24]	; (be4 <am_hal_iom_enable+0x28>)
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
     bca:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
{
     bce:	b410      	push	{r4}
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
     bd0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
        g_bIomBusy[ui32Module] = false;
     bd4:	2400      	movs	r4, #0
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
     bd6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        g_bIomBusy[ui32Module] = false;
     bda:	540c      	strb	r4, [r1, r0]
}
     bdc:	f85d 4b04 	ldr.w	r4, [sp], #4
     be0:	4770      	bx	lr
     be2:	bf00      	nop
     be4:	10001004 	.word	0x10001004

00000be8 <am_hal_iom_config>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
     be8:	2805      	cmp	r0, #5
     bea:	f200 80e0 	bhi.w	dae <am_hal_iom_config+0x1c6>
{
     bee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ( psConfig->bSPHA )
     bf2:	7a0d      	ldrb	r5, [r1, #8]
    ui32Config = psConfig->ui32InterfaceMode;
     bf4:	680b      	ldr	r3, [r1, #0]
    if ( psConfig->bSPHA )
     bf6:	b10d      	cbz	r5, bfc <am_hal_iom_config+0x14>
        ui32Config |= AM_REG_IOMSTR_CFG_SPHA(1);
     bf8:	f043 0304 	orr.w	r3, r3, #4
    if ( psConfig->bSPOL )
     bfc:	7a4a      	ldrb	r2, [r1, #9]
     bfe:	b10a      	cbz	r2, c04 <am_hal_iom_config+0x1c>
        ui32Config |= AM_REG_IOMSTR_CFG_SPOL(1);
     c00:	f043 0302 	orr.w	r3, r3, #2
    if ( psConfig->ui32ClockFrequency >= 16000000UL)
     c04:	684c      	ldr	r4, [r1, #4]
     c06:	4e83      	ldr	r6, [pc, #524]	; (e14 <am_hal_iom_config+0x22c>)
    AM_REGn(IOMSTR, ui32Module, CFG) = ui32Config;
     c08:	f500 27a0 	add.w	r7, r0, #327680	; 0x50000
     c0c:	3704      	adds	r7, #4
    if ( psConfig->ui32ClockFrequency >= 16000000UL)
     c0e:	42b4      	cmp	r4, r6
    AM_REGn(IOMSTR, ui32Module, CFG) = ui32Config;
     c10:	ea4f 3407 	mov.w	r4, r7, lsl #12
        ui32Config |= AM_REG_IOMSTR_CFG_STARTRD(2);
     c14:	bf88      	it	hi
     c16:	f043 0320 	orrhi.w	r3, r3, #32
    AM_REGn(IOMSTR, ui32Module, CFG) = ui32Config;
     c1a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(check_iom_threshold(psConfig->ui8WriteThreshold)) |
     c1e:	7a8a      	ldrb	r2, [r1, #10]
         AM_REG_IOMSTR_FIFOTHR_FIFORTHR(check_iom_threshold(psConfig->ui8ReadThreshold)));
     c20:	7acb      	ldrb	r3, [r1, #11]
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(check_iom_threshold(psConfig->ui8WriteThreshold)) |
     c22:	2a7c      	cmp	r2, #124	; 0x7c
     c24:	bf28      	it	cs
     c26:	227c      	movcs	r2, #124	; 0x7c
     c28:	2a04      	cmp	r2, #4
     c2a:	bf38      	it	cc
     c2c:	2204      	movcc	r2, #4
     c2e:	0216      	lsls	r6, r2, #8
         AM_REG_IOMSTR_FIFOTHR_FIFORTHR(check_iom_threshold(psConfig->ui8ReadThreshold)));
     c30:	2b7c      	cmp	r3, #124	; 0x7c
     c32:	bf28      	it	cs
     c34:	237c      	movcs	r3, #124	; 0x7c
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(check_iom_threshold(psConfig->ui8WriteThreshold)) |
     c36:	f406 47fe 	and.w	r7, r6, #32512	; 0x7f00
     c3a:	2b04      	cmp	r3, #4
     c3c:	bf2c      	ite	cs
     c3e:	ea47 0203 	orrcs.w	r2, r7, r3
     c42:	f047 0204 	orrcc.w	r2, r7, #4
    if ((0 != ui32Module) && (4 != ui32Module) && (6 != ui32Module) &&
     c46:	f030 0304 	bics.w	r3, r0, #4
    AM_REGn(IOMSTR, ui32Module, FIFOTHR) =
     c4a:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    if ((0 != ui32Module) && (4 != ui32Module) && (6 != ui32Module) &&
     c4e:	d005      	beq.n	c5c <am_hal_iom_config+0x74>
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) ==
     c50:	4b71      	ldr	r3, [pc, #452]	; (e18 <am_hal_iom_config+0x230>)
     c52:	681e      	ldr	r6, [r3, #0]
     c54:	b2f7      	uxtb	r7, r6
     c56:	2f22      	cmp	r7, #34	; 0x22
     c58:	f000 80ae 	beq.w	db8 <am_hal_iom_config+0x1d0>
      ui32ClkCfg = iom_get_interface_clock_cfg(psConfig->ui32ClockFrequency,
     c5c:	f8d1 e004 	ldr.w	lr, [r1, #4]
    if ( ui32FreqHz == 0 )
     c60:	f1be 0f00 	cmp.w	lr, #0
     c64:	f000 8093 	beq.w	d8e <am_hal_iom_config+0x1a6>
    i32Div = (ui32HFRCfreqHz / ui32FreqHz) + ((ui32HFRCfreqHz % ui32FreqHz) ? 1 : 0);    // Round up (ceiling)
     c68:	4b6c      	ldr	r3, [pc, #432]	; (e1c <am_hal_iom_config+0x234>)
     c6a:	fbb3 f7fe 	udiv	r7, r3, lr
     c6e:	fb0e 3617 	mls	r6, lr, r7, r3
     c72:	2e00      	cmp	r6, #0
     c74:	bf18      	it	ne
     c76:	3701      	addne	r7, #1
    i32N = 31 - AM_INSTR_CLZ((i32Div & (-i32Div)));
     c78:	427a      	negs	r2, r7
     c7a:	403a      	ands	r2, r7
     c7c:	fab2 f882 	clz	r8, r2
     c80:	f1c8 031f 	rsb	r3, r8, #31
     c84:	2b06      	cmp	r3, #6
     c86:	bfa8      	it	ge
     c88:	2306      	movge	r3, #6
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
     c8a:	f5be 6f37 	cmp.w	lr, #2928	; 0xb70
     c8e:	f240 808f 	bls.w	db0 <am_hal_iom_config+0x1c8>
     c92:	f5ae 0974 	sub.w	r9, lr, #15990784	; 0xf40000
     c96:	4e62      	ldr	r6, [pc, #392]	; (e20 <am_hal_iom_config+0x238>)
     c98:	f5a9 5210 	sub.w	r2, r9, #9216	; 0x2400
     c9c:	42b2      	cmp	r2, r6
     c9e:	bf8b      	itete	hi
     ca0:	f04f 0c00 	movhi.w	ip, #0
     ca4:	f44f 6c00 	movls.w	ip, #2048	; 0x800
     ca8:	2201      	movhi	r2, #1
     caa:	2203      	movls	r2, #3
    ui32Denom = ( 1 << i32N ) * ( 1 + (ui32Div3 * 2) );
     cac:	fa02 fa03 	lsl.w	sl, r2, r3
    ui32TotPer = i32Div / ui32Denom;
     cb0:	fbb7 f6fa 	udiv	r6, r7, sl
    ui32TotPer += (i32Div % ui32Denom) ? 1 : 0;
     cb4:	fb0a 7b16 	mls	fp, sl, r6, r7
     cb8:	f1bb 0f00 	cmp.w	fp, #0
     cbc:	bf18      	it	ne
     cbe:	3601      	addne	r6, #1
    ui32v1 = 31 - AM_INSTR_CLZ(ui32TotPer);     // v1 = log2(TotPer)
     cc0:	fab6 f886 	clz	r8, r6
     cc4:	f1c8 091f 	rsb	r9, r8, #31
    ui32Fsel = (ui32v1 > 7) ? ui32v1 + i32N - 7 : i32N;
     cc8:	f1b9 0f07 	cmp.w	r9, #7
     ccc:	f240 808f 	bls.w	dee <am_hal_iom_config+0x206>
     cd0:	3b07      	subs	r3, #7
     cd2:	444b      	add	r3, r9
    ui32Fsel++;
     cd4:	f103 0b01 	add.w	fp, r3, #1
    if ( ui32Fsel > 7 )
     cd8:	f1bb 0f07 	cmp.w	fp, #7
     cdc:	d857      	bhi.n	d8e <am_hal_iom_config+0x1a6>
        ui32TotPer = ui32TotPer>>(ui32v1-7);
     cde:	f1a9 0807 	sub.w	r8, r9, #7
        ui32TotPer += ((ui32DivEn) % (1 << (ui32v1 - 7))) ? 1 : 0;
     ce2:	f04f 0a01 	mov.w	sl, #1
     ce6:	fa0a f908 	lsl.w	r9, sl, r8
     cea:	f109 3aff 	add.w	sl, r9, #4294967295
     cee:	ea0a 0906 	and.w	r9, sl, r6
        ui32TotPer = ui32TotPer>>(ui32v1-7);
     cf2:	fa26 f608 	lsr.w	r6, r6, r8
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
     cf6:	f8df 814c 	ldr.w	r8, [pc, #332]	; e44 <am_hal_iom_config+0x25c>
        ui32TotPer += ((ui32DivEn) % (1 << (ui32v1 - 7))) ? 1 : 0;
     cfa:	f1b9 0f00 	cmp.w	r9, #0
     cfe:	bf18      	it	ne
     d00:	3601      	addne	r6, #1
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
     d02:	45c6      	cmp	lr, r8
     d04:	d879      	bhi.n	dfa <am_hal_iom_config+0x212>
     d06:	f04f 0e01 	mov.w	lr, #1
     d0a:	fa0e fa03 	lsl.w	sl, lr, r3
     d0e:	4557      	cmp	r7, sl
     d10:	d073      	beq.n	dfa <am_hal_iom_config+0x212>
     d12:	1e77      	subs	r7, r6, #1
     d14:	46b1      	mov	r9, r6
     d16:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
    if (ui32Phase == 1)
     d1a:	2d00      	cmp	r5, #0
     d1c:	d173      	bne.n	e06 <am_hal_iom_config+0x21e>
        ui32LowPer = (ui32TotPer - 1) / 2;          // Longer low phase
     d1e:	087e      	lsrs	r6, r7, #1
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
     d20:	409a      	lsls	r2, r3
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
     d22:	4b3e      	ldr	r3, [pc, #248]	; (e1c <am_hal_iom_config+0x234>)
    if ( (ui32ClkFreq % 250000) == 0 )
     d24:	f8df 8120 	ldr.w	r8, [pc, #288]	; e48 <am_hal_iom_config+0x260>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
     d28:	fb09 f202 	mul.w	r2, r9, r2
    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
     d2c:	ea4f 250b 	mov.w	r5, fp, lsl #8
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
     d30:	fbb3 fbf2 	udiv	fp, r3, r2
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
     d34:	fb02 331b 	mls	r3, r2, fp, r3
     d38:	0852      	lsrs	r2, r2, #1
     d3a:	429a      	cmp	r2, r3
     d3c:	bf2c      	ite	cs
     d3e:	465b      	movcs	r3, fp
     d40:	f10b 0301 	addcc.w	r3, fp, #1
    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
     d44:	f405 65e0 	and.w	r5, r5, #1792	; 0x700
     d48:	ea45 020c 	orr.w	r2, r5, ip
    if ( (ui32ClkFreq % 250000) == 0 )
     d4c:	f8df 90fc 	ldr.w	r9, [pc, #252]	; e4c <am_hal_iom_config+0x264>
     d50:	fba8 ba03 	umull	fp, sl, r8, r3
    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
     d54:	ea42 020e 	orr.w	r2, r2, lr
                 AM_REG_IOMSTR_CLKCFG_LOWPER(ui32LowPer)            |
     d58:	0436      	lsls	r6, r6, #16
    if ( (ui32ClkFreq % 250000) == 0 )
     d5a:	ea4f 4e1a 	mov.w	lr, sl, lsr #16
    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
     d5e:	ea42 6207 	orr.w	r2, r2, r7, lsl #24
                 AM_REG_IOMSTR_CLKCFG_LOWPER(ui32LowPer)            |
     d62:	f406 0c7f 	and.w	ip, r6, #16711680	; 0xff0000
    if ( (ui32ClkFreq % 250000) == 0 )
     d66:	fb09 371e 	mls	r7, r9, lr, r3
    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
     d6a:	ea42 020c 	orr.w	r2, r2, ip
    if ( (ui32ClkFreq % 250000) == 0 )
     d6e:	b93f      	cbnz	r7, d80 <am_hal_iom_config+0x198>
    return ui32Value  &&  !(ui32Value & (ui32Value - 1));
     d70:	f1be 0f00 	cmp.w	lr, #0
     d74:	d004      	beq.n	d80 <am_hal_iom_config+0x198>
     d76:	f10e 33ff 	add.w	r3, lr, #4294967295
     d7a:	ea13 0f0e 	tst.w	r3, lr
     d7e:	d033      	beq.n	de8 <am_hal_iom_config+0x200>
    return ( ((uint64_t)ui32ClkFreq) << 32) | (uint64_t)ui32ClkCfg;
     d80:	2500      	movs	r5, #0
     d82:	ea45 0602 	orr.w	r6, r5, r2
      ui32ClkCfg = iom_get_interface_clock_cfg(psConfig->ui32ClockFrequency,
     d86:	4637      	mov	r7, r6
    if ( ui32ClkCfg )
     d88:	b10e      	cbz	r6, d8e <am_hal_iom_config+0x1a6>
        AM_REGn(IOMSTR, ui32Module, CLKCFG) = (uint32_t)ui32ClkCfg;
     d8a:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
     d8e:	468b      	mov	fp, r1
     d90:	4604      	mov	r4, r0
    ui32HFRC = am_hal_clkgen_sysclk_get();
     d92:	f7ff fdc3 	bl	91c <am_hal_clkgen_sysclk_get>
    ui32StatusTimeout[ui32Module] = MAX_IOM_BITS * AM_HAL_IOM_MAX_FIFO_SIZE *
     d96:	4f23      	ldr	r7, [pc, #140]	; (e24 <am_hal_iom_config+0x23c>)
      IOM_OVERHEAD_FACTOR * (ui32HFRC / psConfig->ui32ClockFrequency);
     d98:	f8db 1004 	ldr.w	r1, [fp, #4]
     d9c:	fbb0 f0f1 	udiv	r0, r0, r1
     da0:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
     da4:	0216      	lsls	r6, r2, #8
    ui32StatusTimeout[ui32Module] = MAX_IOM_BITS * AM_HAL_IOM_MAX_FIFO_SIZE *
     da6:	f847 6024 	str.w	r6, [r7, r4, lsl #2]
     daa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     dae:	4770      	bx	lr
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
     db0:	f44f 6c00 	mov.w	ip, #2048	; 0x800
     db4:	2203      	movs	r2, #3
     db6:	e779      	b.n	cac <am_hal_iom_config+0xc4>
            isRevB2() && (AM_HAL_IOM_I2CMODE == psConfig->ui32InterfaceMode))
     db8:	680a      	ldr	r2, [r1, #0]
     dba:	2a00      	cmp	r2, #0
     dbc:	f47f af4e 	bne.w	c5c <am_hal_iom_config+0x74>
      AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_SPHA_M;
     dc0:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
  if (ui32FreqHz == AM_HAL_IOM_800KHZ)
     dc4:	4d18      	ldr	r5, [pc, #96]	; (e28 <am_hal_iom_config+0x240>)
      AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_SPHA_M;
     dc6:	f043 0204 	orr.w	r2, r3, #4
     dca:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
      ui32ClkCfg = iom_get_i2c_workaround_clock_cfg(psConfig->ui32ClockFrequency);
     dce:	684a      	ldr	r2, [r1, #4]
  if (ui32FreqHz == AM_HAL_IOM_800KHZ)
     dd0:	42aa      	cmp	r2, r5
     dd2:	d01b      	beq.n	e0c <am_hal_iom_config+0x224>
  else if (ui32FreqHz == AM_HAL_IOM_400KHZ)
     dd4:	4e15      	ldr	r6, [pc, #84]	; (e2c <am_hal_iom_config+0x244>)
     dd6:	42b2      	cmp	r2, r6
     dd8:	d01a      	beq.n	e10 <am_hal_iom_config+0x228>
  else if (ui32FreqHz == AM_HAL_IOM_200KHZ)
     dda:	4b15      	ldr	r3, [pc, #84]	; (e30 <am_hal_iom_config+0x248>)
     ddc:	4f15      	ldr	r7, [pc, #84]	; (e34 <am_hal_iom_config+0x24c>)
     dde:	4d16      	ldr	r5, [pc, #88]	; (e38 <am_hal_iom_config+0x250>)
     de0:	429a      	cmp	r2, r3
     de2:	bf08      	it	eq
     de4:	462f      	moveq	r7, r5
     de6:	e7d0      	b.n	d8a <am_hal_iom_config+0x1a2>
            ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)    |
     de8:	f445 6200 	orr.w	r2, r5, #2048	; 0x800
     dec:	e7c8      	b.n	d80 <am_hal_iom_config+0x198>
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
     dee:	f8df 8054 	ldr.w	r8, [pc, #84]	; e44 <am_hal_iom_config+0x25c>
     df2:	45c6      	cmp	lr, r8
    ui32Fsel++;
     df4:	f103 0b01 	add.w	fp, r3, #1
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
     df8:	d985      	bls.n	d06 <am_hal_iom_config+0x11e>
     dfa:	1e77      	subs	r7, r6, #1
     dfc:	f04f 0901 	mov.w	r9, #1
     e00:	f04f 0e00 	mov.w	lr, #0
     e04:	e789      	b.n	d1a <am_hal_iom_config+0x132>
        ui32LowPer = (ui32TotPer - 2) / 2;          // Longer high phase
     e06:	1eb5      	subs	r5, r6, #2
     e08:	086e      	lsrs	r6, r5, #1
     e0a:	e789      	b.n	d20 <am_hal_iom_config+0x138>
  if (ui32FreqHz == AM_HAL_IOM_800KHZ)
     e0c:	4f0b      	ldr	r7, [pc, #44]	; (e3c <am_hal_iom_config+0x254>)
     e0e:	e7bc      	b.n	d8a <am_hal_iom_config+0x1a2>
  else if (ui32FreqHz == AM_HAL_IOM_400KHZ)
     e10:	4f0b      	ldr	r7, [pc, #44]	; (e40 <am_hal_iom_config+0x258>)
     e12:	e7ba      	b.n	d8a <am_hal_iom_config+0x1a2>
     e14:	00f423ff 	.word	0x00f423ff
     e18:	4002000c 	.word	0x4002000c
     e1c:	02dc6c00 	.word	0x02dc6c00
     e20:	007a11ff 	.word	0x007a11ff
     e24:	1000130c 	.word	0x1000130c
     e28:	000c3500 	.word	0x000c3500
     e2c:	00061a80 	.word	0x00061a80
     e30:	00030d40 	.word	0x00030d40
     e34:	1d0e1500 	.word	0x1d0e1500
     e38:	1d0e1400 	.word	0x1d0e1400
     e3c:	1d0e1200 	.word	0x1d0e1200
     e40:	1d0e1300 	.word	0x1d0e1300
     e44:	00b71aff 	.word	0x00b71aff
     e48:	431bde83 	.word	0x431bde83
     e4c:	0003d090 	.word	0x0003d090

00000e50 <am_hal_iom_workaround_word_write>:
{
     e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, WORKAROUND_IOM, CFG, FULLDUP)) ?
     e54:	4cc9      	ldr	r4, [pc, #804]	; (117c <am_hal_iom_workaround_word_write+0x32c>)
     e56:	6825      	ldr	r5, [r4, #0]
{
     e58:	4691      	mov	r9, r2
                               AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
     e5a:	f015 0f08 	tst.w	r5, #8
{
     e5e:	b08d      	sub	sp, #52	; 0x34
    am_hal_debug_assert_msg(ui32NumBytes <= 4091, "SPI transfer too big.");
     e60:	f640 72fb 	movw	r2, #4091	; 0xffb
                               AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
     e64:	bf14      	ite	ne
     e66:	2640      	movne	r6, #64	; 0x40
     e68:	2680      	moveq	r6, #128	; 0x80
    am_hal_debug_assert_msg(ui32NumBytes <= 4091, "SPI transfer too big.");
     e6a:	4591      	cmp	r9, r2
{
     e6c:	4604      	mov	r4, r0
     e6e:	4688      	mov	r8, r1
     e70:	9301      	str	r3, [sp, #4]
    am_hal_debug_assert_msg(ui32NumBytes <= 4091, "SPI transfer too big.");
     e72:	f200 832b 	bhi.w	14cc <am_hal_iom_workaround_word_write+0x67c>
    ui32ClkCfg = AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG);
     e76:	4bc2      	ldr	r3, [pc, #776]	; (1180 <am_hal_iom_workaround_word_write+0x330>)
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
     e78:	4fc2      	ldr	r7, [pc, #776]	; (1184 <am_hal_iom_workaround_word_write+0x334>)
    ui32ClkCfg = AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG);
     e7a:	681d      	ldr	r5, [r3, #0]
    uint32_t ui32ClkCfg = AM_REGn(IOMSTR, 4, CLKCFG);
     e7c:	681a      	ldr	r2, [r3, #0]
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
     e7e:	49c2      	ldr	r1, [pc, #776]	; (1188 <am_hal_iom_workaround_word_write+0x338>)
     e80:	f3c2 3e00 	ubfx	lr, r2, #12, #1
     e84:	f3c2 20c0 	ubfx	r0, r2, #11, #1
     e88:	0e13      	lsrs	r3, r2, #24
     e8a:	fb03 f30e 	mul.w	r3, r3, lr
     e8e:	0040      	lsls	r0, r0, #1
     e90:	3001      	adds	r0, #1
     e92:	3301      	adds	r3, #1
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
     e94:	fb03 fa00 	mul.w	sl, r3, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
     e98:	ea4f 0c5a 	mov.w	ip, sl, lsr #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
     e9c:	fbb7 fbfa 	udiv	fp, r7, sl
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
     ea0:	fb0a 721b 	mls	r2, sl, fp, r7
     ea4:	4594      	cmp	ip, r2
     ea6:	bf2c      	ite	cs
     ea8:	46de      	movcs	lr, fp
     eaa:	f10b 0e01 	addcc.w	lr, fp, #1
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
     eae:	458e      	cmp	lr, r1
     eb0:	f240 835d 	bls.w	156e <am_hal_iom_workaround_word_write+0x71e>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
     eb4:	0040      	lsls	r0, r0, #1
     eb6:	fb03 f300 	mul.w	r3, r3, r0
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
     eba:	fbb7 faf3 	udiv	sl, r7, r3
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
     ebe:	fb03 771a 	mls	r7, r3, sl, r7
     ec2:	085b      	lsrs	r3, r3, #1
     ec4:	42bb      	cmp	r3, r7
     ec6:	bf2c      	ite	cs
     ec8:	4652      	movcs	r2, sl
     eca:	f10a 0201 	addcc.w	r2, sl, #1
    for ( ui32Fsel = 1; ui32Fsel < 8; ui32Fsel++ )
     ece:	428a      	cmp	r2, r1
     ed0:	bf8c      	ite	hi
     ed2:	f04f 0c03 	movhi.w	ip, #3
     ed6:	f04f 0c02 	movls.w	ip, #2
    ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ,
     eda:	f3c5 21c0 	ubfx	r1, r5, #11, #1
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
     ede:	0048      	lsls	r0, r1, #1
    ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ,
     ee0:	f3c5 2b02 	ubfx	fp, r5, #8, #3
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
     ee4:	f10b 33ff 	add.w	r3, fp, #4294967295
     ee8:	1c47      	adds	r7, r0, #1
    ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ,
     eea:	f3c5 3200 	ubfx	r2, r5, #12, #1
     eee:	0e29      	lsrs	r1, r5, #24
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
     ef0:	f8df b290 	ldr.w	fp, [pc, #656]	; 1184 <am_hal_iom_workaround_word_write+0x334>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
     ef4:	fa07 f003 	lsl.w	r0, r7, r3
     ef8:	fb01 f102 	mul.w	r1, r1, r2
     efc:	fb01 0300 	mla	r3, r1, r0, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
     f00:	0859      	lsrs	r1, r3, #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
     f02:	fbbb fef3 	udiv	lr, fp, r3
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
     f06:	fb03 b01e 	mls	r0, r3, lr, fp
     f0a:	4281      	cmp	r1, r0
     f0c:	bf2c      	ite	cs
     f0e:	4677      	movcs	r7, lr
     f10:	f10e 0701 	addcc.w	r7, lr, #1
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32HiClkCfg;
     f14:	4a9a      	ldr	r2, [pc, #616]	; (1180 <am_hal_iom_workaround_word_write+0x330>)
    ui32DelayTime = ((2 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32NormalFreq * 3));
     f16:	499d      	ldr	r1, [pc, #628]	; (118c <am_hal_iom_workaround_word_write+0x33c>)
    ui32HiClkCfg = ((ui32ClkCfg & (~AM_REG_IOMSTR_CLKCFG_FSEL_M)) |
     f18:	f425 6ae0 	bic.w	sl, r5, #1792	; 0x700
    ui32DelayTime = ((2 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32NormalFreq * 3));
     f1c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    ui32HiClkCfg = ((ui32ClkCfg & (~AM_REG_IOMSTR_CLKCFG_FSEL_M)) |
     f20:	ea4a 270c 	orr.w	r7, sl, ip, lsl #8
    ((void (*)(uint32_t)) 0x0800009d)(ui32DelayTime);
     f24:	fbb1 f0f3 	udiv	r0, r1, r3
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32HiClkCfg;
     f28:	6017      	str	r7, [r2, #0]
    ((void (*)(uint32_t)) 0x0800009d)(ui32DelayTime);
     f2a:	4b99      	ldr	r3, [pc, #612]	; (1190 <am_hal_iom_workaround_word_write+0x340>)
     f2c:	4798      	blx	r3
    ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ,
     f2e:	f3c7 22c0 	ubfx	r2, r7, #11, #1
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
     f32:	0050      	lsls	r0, r2, #1
    ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ,
     f34:	f3c7 2c01 	ubfx	ip, r7, #8, #2
     f38:	f3c7 3100 	ubfx	r1, r7, #12, #1
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
     f3c:	3001      	adds	r0, #1
     f3e:	f10c 33ff 	add.w	r3, ip, #4294967295
    ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ,
     f42:	0e3f      	lsrs	r7, r7, #24
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
     f44:	fb07 f701 	mul.w	r7, r7, r1
     f48:	4098      	lsls	r0, r3
     f4a:	fb07 0000 	mla	r0, r7, r0, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
     f4e:	0842      	lsrs	r2, r0, #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
     f50:	fbbb f7f0 	udiv	r7, fp, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
     f54:	fb00 bb17 	mls	fp, r0, r7, fp
     f58:	455a      	cmp	r2, fp
     f5a:	bf38      	it	cc
     f5c:	3701      	addcc	r7, #1
    am_hal_debug_assert_msg(ui32HiFreq > 0, "Invalid Hi Frequency for IOM.");
     f5e:	2f00      	cmp	r7, #0
     f60:	f000 82ad 	beq.w	14be <am_hal_iom_workaround_word_write+0x66e>
    uint32_t ui32ClkCfg = AM_REGn(IOMSTR, 4, CLKCFG);
     f64:	4b86      	ldr	r3, [pc, #536]	; (1180 <am_hal_iom_workaround_word_write+0x330>)
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
     f66:	4a87      	ldr	r2, [pc, #540]	; (1184 <am_hal_iom_workaround_word_write+0x334>)
    uint32_t ui32ClkCfg = AM_REGn(IOMSTR, 4, CLKCFG);
     f68:	681b      	ldr	r3, [r3, #0]
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
     f6a:	f8df e234 	ldr.w	lr, [pc, #564]	; 11a0 <am_hal_iom_workaround_word_write+0x350>
     f6e:	f3c3 3000 	ubfx	r0, r3, #12, #1
     f72:	f3c3 21c0 	ubfx	r1, r3, #11, #1
     f76:	0e1b      	lsrs	r3, r3, #24
     f78:	fb03 f300 	mul.w	r3, r3, r0
     f7c:	0049      	lsls	r1, r1, #1
     f7e:	3101      	adds	r1, #1
     f80:	3301      	adds	r3, #1
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
     f82:	fb03 f001 	mul.w	r0, r3, r1
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
     f86:	ea4f 0b50 	mov.w	fp, r0, lsr #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
     f8a:	fbb2 fcf0 	udiv	ip, r2, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
     f8e:	fb00 201c 	mls	r0, r0, ip, r2
     f92:	4583      	cmp	fp, r0
     f94:	bf2c      	ite	cs
     f96:	46e3      	movcs	fp, ip
     f98:	f10c 0b01 	addcc.w	fp, ip, #1
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
     f9c:	45f3      	cmp	fp, lr
     f9e:	f240 82e4 	bls.w	156a <am_hal_iom_workaround_word_write+0x71a>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
     fa2:	0048      	lsls	r0, r1, #1
     fa4:	fb03 f000 	mul.w	r0, r3, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
     fa8:	ea4f 0b50 	mov.w	fp, r0, lsr #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
     fac:	fbb2 fcf0 	udiv	ip, r2, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
     fb0:	fb00 201c 	mls	r0, r0, ip, r2
     fb4:	4583      	cmp	fp, r0
     fb6:	bf2c      	ite	cs
     fb8:	46e3      	movcs	fp, ip
     fba:	f10c 0b01 	addcc.w	fp, ip, #1
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
     fbe:	45f3      	cmp	fp, lr
     fc0:	f240 82d8 	bls.w	1574 <am_hal_iom_workaround_word_write+0x724>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
     fc4:	0088      	lsls	r0, r1, #2
     fc6:	fb03 f000 	mul.w	r0, r3, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
     fca:	ea4f 0b50 	mov.w	fp, r0, lsr #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
     fce:	fbb2 fcf0 	udiv	ip, r2, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
     fd2:	fb00 201c 	mls	r0, r0, ip, r2
     fd6:	4583      	cmp	fp, r0
     fd8:	bf2c      	ite	cs
     fda:	46e3      	movcs	fp, ip
     fdc:	f10c 0b01 	addcc.w	fp, ip, #1
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
     fe0:	45f3      	cmp	fp, lr
     fe2:	f240 82c9 	bls.w	1578 <am_hal_iom_workaround_word_write+0x728>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
     fe6:	00c8      	lsls	r0, r1, #3
     fe8:	fb03 f000 	mul.w	r0, r3, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
     fec:	ea4f 0b50 	mov.w	fp, r0, lsr #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
     ff0:	fbb2 fcf0 	udiv	ip, r2, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
     ff4:	fb00 201c 	mls	r0, r0, ip, r2
     ff8:	4583      	cmp	fp, r0
     ffa:	bf2c      	ite	cs
     ffc:	46e3      	movcs	fp, ip
     ffe:	f10c 0b01 	addcc.w	fp, ip, #1
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    1002:	45f3      	cmp	fp, lr
    1004:	f240 82ba 	bls.w	157c <am_hal_iom_workaround_word_write+0x72c>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    1008:	0108      	lsls	r0, r1, #4
    100a:	fb03 f000 	mul.w	r0, r3, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    100e:	ea4f 0b50 	mov.w	fp, r0, lsr #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    1012:	fbb2 fcf0 	udiv	ip, r2, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    1016:	fb00 201c 	mls	r0, r0, ip, r2
    101a:	4583      	cmp	fp, r0
    101c:	bf2c      	ite	cs
    101e:	46e3      	movcs	fp, ip
    1020:	f10c 0b01 	addcc.w	fp, ip, #1
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    1024:	45f3      	cmp	fp, lr
    1026:	f240 82ab 	bls.w	1580 <am_hal_iom_workaround_word_write+0x730>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    102a:	0149      	lsls	r1, r1, #5
    102c:	fb03 f301 	mul.w	r3, r3, r1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    1030:	fbb2 f0f3 	udiv	r0, r2, r3
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    1034:	fb03 2210 	mls	r2, r3, r0, r2
    1038:	085b      	lsrs	r3, r3, #1
    103a:	4293      	cmp	r3, r2
    103c:	bf2c      	ite	cs
    103e:	4601      	movcs	r1, r0
    1040:	1c41      	addcc	r1, r0, #1
    for ( ui32Fsel = 1; ui32Fsel < 8; ui32Fsel++ )
    1042:	4571      	cmp	r1, lr
    1044:	bf8c      	ite	hi
    1046:	2007      	movhi	r0, #7
    1048:	2006      	movls	r0, #6
    if ( ui32Options & AM_HAL_IOM_RAW )
    104a:	9b01      	ldr	r3, [sp, #4]
    ui32LowClkCfg = ((ui32ClkCfg & (~AM_REG_IOMSTR_CLKCFG_FSEL_M)) |
    104c:	ea4a 2200 	orr.w	r2, sl, r0, lsl #8
    if ( ui32Options & AM_HAL_IOM_RAW )
    1050:	f013 4080 	ands.w	r0, r3, #1073741824	; 0x40000000
    ui32LowClkCfg = ((ui32ClkCfg & (~AM_REG_IOMSTR_CLKCFG_FSEL_M)) |
    1054:	9203      	str	r2, [sp, #12]
    if ( ui32Options & AM_HAL_IOM_RAW )
    1056:	f000 813d 	beq.w	12d4 <am_hal_iom_workaround_word_write+0x484>
        if ( pui32Data[0] & 0x80 )
    105a:	f8d8 1000 	ldr.w	r1, [r8]
        ui32DelayTime = ((27 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32HiFreq * 3));
    105e:	4a4d      	ldr	r2, [pc, #308]	; (1194 <am_hal_iom_workaround_word_write+0x344>)
        if ( pui32Data[0] & 0x80 )
    1060:	f001 0380 	and.w	r3, r1, #128	; 0x80
            ui32FirstWord = 0x00000000;
    1064:	2b00      	cmp	r3, #0
        ui32DelayTime = ((27 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32HiFreq * 3));
    1066:	eb07 0047 	add.w	r0, r7, r7, lsl #1
    106a:	fbb2 f1f0 	udiv	r1, r2, r0
    106e:	9107      	str	r1, [sp, #28]
            ui32FirstWord = 0x00000000;
    1070:	bf0b      	itete	eq
    1072:	2100      	moveq	r1, #0
    1074:	2101      	movne	r1, #1
    1076:	f06f 07ff 	mvneq.w	r7, #255	; 0xff
    107a:	2700      	movne	r7, #0
    107c:	9106      	str	r1, [sp, #24]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    107e:	4b3f      	ldr	r3, [pc, #252]	; (117c <am_hal_iom_workaround_word_write+0x32c>)
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1080:	4a45      	ldr	r2, [pc, #276]	; (1198 <am_hal_iom_workaround_word_write+0x348>)
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    1082:	6818      	ldr	r0, [r3, #0]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1084:	6813      	ldr	r3, [r2, #0]
    ui32NumBytes += 4;
    1086:	f109 0104 	add.w	r1, r9, #4
    ui32TransferSize = (ui32NumBytes <= ui32MaxFifoSize ? ui32NumBytes :
    108a:	428e      	cmp	r6, r1
    108c:	bf28      	it	cs
    108e:	460e      	movcs	r6, r1
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    1090:	f010 0f08 	tst.w	r0, #8
    1094:	bf14      	ite	ne
    1096:	2040      	movne	r0, #64	; 0x40
    1098:	2080      	moveq	r0, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    109a:	1ac2      	subs	r2, r0, r3
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    109c:	f002 00fc 	and.w	r0, r2, #252	; 0xfc
    10a0:	2803      	cmp	r0, #3
    ui32NumBytes += 4;
    10a2:	9104      	str	r1, [sp, #16]
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    10a4:	f240 8204 	bls.w	14b0 <am_hal_iom_workaround_word_write+0x660>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    10a8:	493c      	ldr	r1, [pc, #240]	; (119c <am_hal_iom_workaround_word_write+0x34c>)
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    10aa:	4b34      	ldr	r3, [pc, #208]	; (117c <am_hal_iom_workaround_word_write+0x32c>)
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    10ac:	600f      	str	r7, [r1, #0]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    10ae:	681f      	ldr	r7, [r3, #0]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    10b0:	f853 2c1c 	ldr.w	r2, [r3, #-28]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    10b4:	f017 0f08 	tst.w	r7, #8
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    10b8:	f1a3 001c 	sub.w	r0, r3, #28
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    10bc:	bf14      	ite	ne
    10be:	2040      	movne	r0, #64	; 0x40
    10c0:	2080      	moveq	r0, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    10c2:	1a81      	subs	r1, r0, r2
    am_hal_iom_fifo_write(WORKAROUND_IOM, pui32Data, ui32TransferSize - 4);
    10c4:	3e04      	subs	r6, #4
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    10c6:	f001 09fc 	and.w	r9, r1, #252	; 0xfc
    10ca:	454e      	cmp	r6, r9
    10cc:	f200 81e9 	bhi.w	14a2 <am_hal_iom_workaround_word_write+0x652>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    10d0:	2e00      	cmp	r6, #0
    10d2:	d067      	beq.n	11a4 <am_hal_iom_workaround_word_write+0x354>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    10d4:	4643      	mov	r3, r8
    10d6:	ea6f 0c08 	mvn.w	ip, r8
    10da:	f853 7b04 	ldr.w	r7, [r3], #4
    10de:	4a2f      	ldr	r2, [pc, #188]	; (119c <am_hal_iom_workaround_word_write+0x34c>)
    10e0:	44c4      	add	ip, r8
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    10e2:	eba3 0b08 	sub.w	fp, r3, r8
    10e6:	44b4      	add	ip, r6
    10e8:	455e      	cmp	r6, fp
    10ea:	f3cc 0082 	ubfx	r0, ip, #2, #3
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    10ee:	6017      	str	r7, [r2, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    10f0:	d958      	bls.n	11a4 <am_hal_iom_workaround_word_write+0x354>
    10f2:	b320      	cbz	r0, 113e <am_hal_iom_workaround_word_write+0x2ee>
    10f4:	2801      	cmp	r0, #1
    10f6:	d01b      	beq.n	1130 <am_hal_iom_workaround_word_write+0x2e0>
    10f8:	2802      	cmp	r0, #2
    10fa:	d016      	beq.n	112a <am_hal_iom_workaround_word_write+0x2da>
    10fc:	2803      	cmp	r0, #3
    10fe:	d011      	beq.n	1124 <am_hal_iom_workaround_word_write+0x2d4>
    1100:	2804      	cmp	r0, #4
    1102:	d00c      	beq.n	111e <am_hal_iom_workaround_word_write+0x2ce>
    1104:	2805      	cmp	r0, #5
    1106:	d007      	beq.n	1118 <am_hal_iom_workaround_word_write+0x2c8>
    1108:	2806      	cmp	r0, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    110a:	bf1c      	itt	ne
    110c:	f853 0b04 	ldrne.w	r0, [r3], #4
    1110:	6010      	strne	r0, [r2, #0]
    1112:	f853 1b04 	ldr.w	r1, [r3], #4
    1116:	6011      	str	r1, [r2, #0]
    1118:	f853 7b04 	ldr.w	r7, [r3], #4
    111c:	6017      	str	r7, [r2, #0]
    111e:	f853 0b04 	ldr.w	r0, [r3], #4
    1122:	6010      	str	r0, [r2, #0]
    1124:	f853 1b04 	ldr.w	r1, [r3], #4
    1128:	6011      	str	r1, [r2, #0]
    112a:	f853 7b04 	ldr.w	r7, [r3], #4
    112e:	6017      	str	r7, [r2, #0]
    1130:	f853 0b04 	ldr.w	r0, [r3], #4
    1134:	6010      	str	r0, [r2, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1136:	eba3 0a08 	sub.w	sl, r3, r8
    113a:	4556      	cmp	r6, sl
    113c:	d932      	bls.n	11a4 <am_hal_iom_workaround_word_write+0x354>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    113e:	469e      	mov	lr, r3
    1140:	3320      	adds	r3, #32
    1142:	f85e 1b04 	ldr.w	r1, [lr], #4
    1146:	6011      	str	r1, [r2, #0]
    1148:	f853 7c1c 	ldr.w	r7, [r3, #-28]
    114c:	6017      	str	r7, [r2, #0]
    114e:	f8de 0004 	ldr.w	r0, [lr, #4]
    1152:	6010      	str	r0, [r2, #0]
    1154:	f853 1c14 	ldr.w	r1, [r3, #-20]
    1158:	6011      	str	r1, [r2, #0]
    115a:	f853 7c10 	ldr.w	r7, [r3, #-16]
    115e:	6017      	str	r7, [r2, #0]
    1160:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    1164:	6010      	str	r0, [r2, #0]
    1166:	f853 1c08 	ldr.w	r1, [r3, #-8]
    116a:	6011      	str	r1, [r2, #0]
    116c:	f853 7c04 	ldr.w	r7, [r3, #-4]
    1170:	6017      	str	r7, [r2, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1172:	eba3 0008 	sub.w	r0, r3, r8
    1176:	4286      	cmp	r6, r0
    1178:	d8e1      	bhi.n	113e <am_hal_iom_workaround_word_write+0x2ee>
    117a:	e013      	b.n	11a4 <am_hal_iom_workaround_word_write+0x354>
    117c:	5000811c 	.word	0x5000811c
    1180:	5000810c 	.word	0x5000810c
    1184:	02dc6c00 	.word	0x02dc6c00
    1188:	00f42400 	.word	0x00f42400
    118c:	05b8d800 	.word	0x05b8d800
    1190:	0800009d 	.word	0x0800009d
    1194:	4d3f6400 	.word	0x4d3f6400
    1198:	50008100 	.word	0x50008100
    119c:	50008000 	.word	0x50008000
    11a0:	000f4240 	.word	0x000f4240
        if ( g_IOMPads[index].channel == ui32ChipSelect )
    11a4:	2c00      	cmp	r4, #0
    11a6:	f000 8198 	beq.w	14da <am_hal_iom_workaround_word_write+0x68a>
    11aa:	2c01      	cmp	r4, #1
    11ac:	f000 80a3 	beq.w	12f6 <am_hal_iom_workaround_word_write+0x4a6>
    11b0:	2c02      	cmp	r4, #2
    11b2:	f000 80b8 	beq.w	1326 <am_hal_iom_workaround_word_write+0x4d6>
    11b6:	2c03      	cmp	r4, #3
    11b8:	f000 80c6 	beq.w	1348 <am_hal_iom_workaround_word_write+0x4f8>
    11bc:	2c04      	cmp	r4, #4
    11be:	f000 811e 	beq.w	13fe <am_hal_iom_workaround_word_write+0x5ae>
    11c2:	2c05      	cmp	r4, #5
    11c4:	f000 8133 	beq.w	142e <am_hal_iom_workaround_word_write+0x5de>
    11c8:	2c06      	cmp	r4, #6
    11ca:	f000 8148 	beq.w	145e <am_hal_iom_workaround_word_write+0x60e>
    11ce:	2c07      	cmp	r4, #7
    11d0:	f000 8156 	beq.w	1480 <am_hal_iom_workaround_word_write+0x630>
    am_hal_debug_assert(0xDEADBEEF != ui32IOMGPIO);
    11d4:	2200      	movs	r2, #0
    11d6:	48cc      	ldr	r0, [pc, #816]	; (1508 <am_hal_iom_workaround_word_write+0x6b8>)
    ui32CSPadregVal = *pui32CSPadreg;
    11d8:	4fcc      	ldr	r7, [pc, #816]	; (150c <am_hal_iom_workaround_word_write+0x6bc>)
    am_hal_debug_assert(0xDEADBEEF != ui32IOMGPIO);
    11da:	f240 512d 	movw	r1, #1325	; 0x52d
    11de:	f7ff fbb7 	bl	950 <am_hal_debug_error>
    am_hal_gpio_out_bit_set(ui32IOMGPIO);
    11e2:	48cb      	ldr	r0, [pc, #812]	; (1510 <am_hal_iom_workaround_word_write+0x6c0>)
    ui32CSPadregVal = *pui32CSPadreg;
    11e4:	683a      	ldr	r2, [r7, #0]
    11e6:	9202      	str	r2, [sp, #8]
    am_hal_gpio_out_bit_set(ui32IOMGPIO);
    11e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    pui32CSPadreg = (volatile uint32_t *)AM_HAL_GPIO_PADREG(ui32IOMGPIO);
    11ec:	46bb      	mov	fp, r7
    am_hal_gpio_out_bit_set(ui32IOMGPIO);
    11ee:	6003      	str	r3, [r0, #0]
    am_hal_gpio_pin_config(WORKAROUND_IOM_MOSI_PIN, WORKAROUND_IOM_MOSI_CFG | AM_HAL_PIN_DIR_INPUT);
    11f0:	f7ff fc94 	bl	b1c <am_hal_interrupt_master_disable>
    11f4:	4ec7      	ldr	r6, [pc, #796]	; (1514 <am_hal_iom_workaround_word_write+0x6c4>)
    11f6:	f8df 9360 	ldr.w	r9, [pc, #864]	; 1558 <am_hal_iom_workaround_word_write+0x708>
    11fa:	900a      	str	r0, [sp, #40]	; 0x28
    11fc:	2173      	movs	r1, #115	; 0x73
    11fe:	6031      	str	r1, [r6, #0]
    1200:	f8d9 0000 	ldr.w	r0, [r9]
    1204:	f8df 8354 	ldr.w	r8, [pc, #852]	; 155c <am_hal_iom_workaround_word_write+0x70c>
    1208:	9105      	str	r1, [sp, #20]
    120a:	f420 22e0 	bic.w	r2, r0, #458752	; 0x70000
    120e:	f8c9 2000 	str.w	r2, [r9]
    1212:	f8d8 3000 	ldr.w	r3, [r8]
    1216:	4fc0      	ldr	r7, [pc, #768]	; (1518 <am_hal_iom_workaround_word_write+0x6c8>)
    1218:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    121c:	f041 002a 	orr.w	r0, r1, #42	; 0x2a
    1220:	f8c8 0000 	str.w	r0, [r8]
    1224:	683a      	ldr	r2, [r7, #0]
    1226:	f04f 0a00 	mov.w	sl, #0
    122a:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
    122e:	603b      	str	r3, [r7, #0]
    1230:	f8c6 a000 	str.w	sl, [r6]
    1234:	980a      	ldr	r0, [sp, #40]	; 0x28
    1236:	f7ff fc75 	bl	b24 <am_hal_interrupt_master_set>
    ui32Command |= ui32Options & 0x5C00FF00;
    123a:	9901      	ldr	r1, [sp, #4]
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    123c:	0424      	lsls	r4, r4, #16
    123e:	f404 20e0 	and.w	r0, r4, #458752	; 0x70000
    ui32Command |= ui32Options & 0x5C00FF00;
    1242:	f021 4323 	bic.w	r3, r1, #2734686208	; 0xa3000000
    ui32Command |= (ui32NumBytes & 0xFF);
    1246:	9904      	ldr	r1, [sp, #16]
    ui32Command |= ui32Options & 0x5C00FF00;
    1248:	f003 24ff 	and.w	r4, r3, #4278255360	; 0xff00ff00
    124c:	f040 4280 	orr.w	r2, r0, #1073741824	; 0x40000000
    1250:	4322      	orrs	r2, r4
    ui32Command |= (ui32NumBytes & 0xFF);
    1252:	b2c8      	uxtb	r0, r1
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    1254:	03cc      	lsls	r4, r1, #15
    AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    1256:	9b05      	ldr	r3, [sp, #20]
    1258:	6033      	str	r3, [r6, #0]
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    125a:	f004 61f0 	and.w	r1, r4, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
    125e:	4302      	orrs	r2, r0
    1260:	430a      	orrs	r2, r1
    AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    1262:	9305      	str	r3, [sp, #20]
    ui32Command |= ui32Options & 0x5C00FF00;
    1264:	9204      	str	r2, [sp, #16]
    ui32Critical = am_hal_interrupt_master_disable();
    1266:	f7ff fc59 	bl	b1c <am_hal_interrupt_master_disable>
    126a:	9001      	str	r0, [sp, #4]
    AM_REGn(IOMSTR, WORKAROUND_IOM, CMD) = ui32Command;
    126c:	48ab      	ldr	r0, [pc, #684]	; (151c <am_hal_iom_workaround_word_write+0x6cc>)
    126e:	9a04      	ldr	r2, [sp, #16]
    1270:	6002      	str	r2, [r0, #0]
    ((void (*)(uint32_t)) 0x0800009d)(ui32DelayTime);
    1272:	4cab      	ldr	r4, [pc, #684]	; (1520 <am_hal_iom_workaround_word_write+0x6d0>)
    1274:	9807      	ldr	r0, [sp, #28]
    1276:	47a0      	blx	r4
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32LowClkCfg;
    1278:	4baa      	ldr	r3, [pc, #680]	; (1524 <am_hal_iom_workaround_word_write+0x6d4>)
    127a:	9c03      	ldr	r4, [sp, #12]
    iom_workaround_loop(ui32CSPadregVal, pui32CSPadreg, bRising);
    127c:	9a06      	ldr	r2, [sp, #24]
    127e:	9802      	ldr	r0, [sp, #8]
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32LowClkCfg;
    1280:	601c      	str	r4, [r3, #0]
    iom_workaround_loop(ui32CSPadregVal, pui32CSPadreg, bRising);
    1282:	4659      	mov	r1, fp
    1284:	f7ff fc52 	bl	b2c <iom_workaround_loop>
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32ClkCfg;
    1288:	49a6      	ldr	r1, [pc, #664]	; (1524 <am_hal_iom_workaround_word_write+0x6d4>)
    128a:	600d      	str	r5, [r1, #0]
    am_hal_gpio_pin_config(WORKAROUND_IOM_MOSI_PIN, WORKAROUND_IOM_MOSI_CFG);
    128c:	f7ff fc46 	bl	b1c <am_hal_interrupt_master_disable>
    1290:	9d05      	ldr	r5, [sp, #20]
    1292:	900b      	str	r0, [sp, #44]	; 0x2c
    1294:	6035      	str	r5, [r6, #0]
    1296:	f8d9 0000 	ldr.w	r0, [r9]
    129a:	f420 22e0 	bic.w	r2, r0, #458752	; 0x70000
    129e:	f8c9 2000 	str.w	r2, [r9]
    12a2:	f8d8 3000 	ldr.w	r3, [r8]
    12a6:	f023 04ff 	bic.w	r4, r3, #255	; 0xff
    12aa:	f044 0128 	orr.w	r1, r4, #40	; 0x28
    12ae:	f8c8 1000 	str.w	r1, [r8]
    12b2:	683d      	ldr	r5, [r7, #0]
    12b4:	f025 00ff 	bic.w	r0, r5, #255	; 0xff
    12b8:	6038      	str	r0, [r7, #0]
    12ba:	f8c6 a000 	str.w	sl, [r6]
    12be:	980b      	ldr	r0, [sp, #44]	; 0x2c
    12c0:	f7ff fc30 	bl	b24 <am_hal_interrupt_master_set>
    am_hal_interrupt_master_set(ui32Critical);
    12c4:	9801      	ldr	r0, [sp, #4]
    12c6:	f7ff fc2d 	bl	b24 <am_hal_interrupt_master_set>
    AM_REGn(GPIO, 0, PADKEY) = 0;
    12ca:	f8c6 a000 	str.w	sl, [r6]
}
    12ce:	b00d      	add	sp, #52	; 0x34
    12d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ui32FirstWord = ((ui32Options & 0xFF00) << 16);
    12d4:	041a      	lsls	r2, r3, #16
        ui32DelayTime = ((19 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32HiFreq * 3));
    12d6:	eb07 0a47 	add.w	sl, r7, r7, lsl #1
    12da:	4f93      	ldr	r7, [pc, #588]	; (1528 <am_hal_iom_workaround_word_write+0x6d8>)
    12dc:	fbb7 f1fa 	udiv	r1, r7, sl
        if ( ui32FirstWord & 0x80000000 )
    12e0:	f012 477f 	ands.w	r7, r2, #4278190080	; 0xff000000
        ui32DelayTime = ((19 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32HiFreq * 3));
    12e4:	9107      	str	r1, [sp, #28]
        if ( ui32FirstWord & 0x80000000 )
    12e6:	f100 813d 	bmi.w	1564 <am_hal_iom_workaround_word_write+0x714>
            ui32FirstWord |= 0x00FFFF00;
    12ea:	f447 037f 	orr.w	r3, r7, #16711680	; 0xff0000
    12ee:	f443 477f 	orr.w	r7, r3, #65280	; 0xff00
            bRising = false;
    12f2:	9006      	str	r0, [sp, #24]
    12f4:	e6c3      	b.n	107e <am_hal_iom_workaround_word_write+0x22e>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    12f6:	4a8d      	ldr	r2, [pc, #564]	; (152c <am_hal_iom_workaround_word_write+0x6dc>)
    12f8:	6813      	ldr	r3, [r2, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    12fa:	f3c3 46c2 	ubfx	r6, r3, #19, #3
    12fe:	2e04      	cmp	r6, #4
    1300:	f000 814a 	beq.w	1598 <am_hal_iom_workaround_word_write+0x748>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    1304:	3214      	adds	r2, #20
    1306:	6811      	ldr	r1, [r2, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    1308:	f3c1 27c2 	ubfx	r7, r1, #11, #3
    130c:	2f05      	cmp	r7, #5
    130e:	f47f af61 	bne.w	11d4 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    1312:	f04f 0825 	mov.w	r8, #37	; 0x25
    1316:	4693      	mov	fp, r2
    1318:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    131a:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    131e:	f04f 0a08 	mov.w	sl, #8
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    1322:	2624      	movs	r6, #36	; 0x24
    1324:	e027      	b.n	1376 <am_hal_iom_workaround_word_write+0x526>
    1326:	4982      	ldr	r1, [pc, #520]	; (1530 <am_hal_iom_workaround_word_write+0x6e0>)
    1328:	680f      	ldr	r7, [r1, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    132a:	f3c7 20c2 	ubfx	r0, r7, #11, #3
    132e:	2806      	cmp	r0, #6
    1330:	f47f af50 	bne.w	11d4 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    1334:	f04f 0829 	mov.w	r8, #41	; 0x29
    1338:	468b      	mov	fp, r1
    133a:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    133c:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    1340:	f04f 0a08 	mov.w	sl, #8
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    1344:	2628      	movs	r6, #40	; 0x28
    1346:	e016      	b.n	1376 <am_hal_iom_workaround_word_write+0x526>
    1348:	4f78      	ldr	r7, [pc, #480]	; (152c <am_hal_iom_workaround_word_write+0x6dc>)
    134a:	6838      	ldr	r0, [r7, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    134c:	f3c0 22c2 	ubfx	r2, r0, #11, #3
    1350:	2a04      	cmp	r2, #4
    1352:	f000 812b 	beq.w	15ac <am_hal_iom_workaround_word_write+0x75c>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    1356:	371c      	adds	r7, #28
    1358:	683b      	ldr	r3, [r7, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    135a:	f3c3 26c2 	ubfx	r6, r3, #11, #3
    135e:	2e04      	cmp	r6, #4
    1360:	f47f af38 	bne.w	11d4 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    1364:	f04f 082d 	mov.w	r8, #45	; 0x2d
    1368:	46bb      	mov	fp, r7
    136a:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    136c:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    1370:	f04f 0a08 	mov.w	sl, #8
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    1374:	262c      	movs	r6, #44	; 0x2c
    am_hal_gpio_out_bit_set(ui32IOMGPIO);
    1376:	ea4f 01d8 	mov.w	r1, r8, lsr #3
    137a:	f001 0e04 	and.w	lr, r1, #4
    137e:	f00c 001f 	and.w	r0, ip, #31
    1382:	4b6c      	ldr	r3, [pc, #432]	; (1534 <am_hal_iom_workaround_word_write+0x6e4>)
    ui32CSPadregVal = *pui32CSPadreg;
    1384:	f8db 7000 	ldr.w	r7, [fp]
    1388:	9702      	str	r7, [sp, #8]
    am_hal_gpio_out_bit_set(ui32IOMGPIO);
    138a:	2201      	movs	r2, #1
    138c:	4082      	lsls	r2, r0
    138e:	f84e 2003 	str.w	r2, [lr, r3]
    am_hal_gpio_pin_config(ui32IOMGPIO, AM_HAL_GPIO_OUTPUT);
    1392:	f7ff fbc3 	bl	b1c <am_hal_interrupt_master_disable>
    1396:	4f5f      	ldr	r7, [pc, #380]	; (1514 <am_hal_iom_workaround_word_write+0x6c4>)
    1398:	9009      	str	r0, [sp, #36]	; 0x24
    139a:	ea4f 0c58 	mov.w	ip, r8, lsr #1
    139e:	f00c 017c 	and.w	r1, ip, #124	; 0x7c
    13a2:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 1560 <am_hal_iom_workaround_word_write+0x710>
    13a6:	2073      	movs	r0, #115	; 0x73
    13a8:	6038      	str	r0, [r7, #0]
    13aa:	ea4f 0288 	mov.w	r2, r8, lsl #2
    13ae:	f002 031c 	and.w	r3, r2, #28
    13b2:	f851 800e 	ldr.w	r8, [r1, lr]
    13b6:	4860      	ldr	r0, [pc, #384]	; (1538 <am_hal_iom_workaround_word_write+0x6e8>)
    13b8:	2207      	movs	r2, #7
    13ba:	409a      	lsls	r2, r3
    13bc:	f04f 0c02 	mov.w	ip, #2
    13c0:	ea28 0202 	bic.w	r2, r8, r2
    13c4:	fa0c f303 	lsl.w	r3, ip, r3
    13c8:	4313      	orrs	r3, r2
    13ca:	f841 300e 	str.w	r3, [r1, lr]
    13ce:	f8db 1000 	ldr.w	r1, [fp]
    13d2:	ea6f 0909 	mvn.w	r9, r9
    13d6:	f04f 0e18 	mov.w	lr, #24
    13da:	ea01 0809 	and.w	r8, r1, r9
    13de:	fa0e f20a 	lsl.w	r2, lr, sl
    13e2:	ea42 0308 	orr.w	r3, r2, r8
    13e6:	f8cb 3000 	str.w	r3, [fp]
    13ea:	5831      	ldr	r1, [r6, r0]
    13ec:	2200      	movs	r2, #0
    13ee:	ea09 0301 	and.w	r3, r9, r1
    13f2:	5033      	str	r3, [r6, r0]
    13f4:	603a      	str	r2, [r7, #0]
    13f6:	9809      	ldr	r0, [sp, #36]	; 0x24
    13f8:	f7ff fb94 	bl	b24 <am_hal_interrupt_master_set>
    13fc:	e6f8      	b.n	11f0 <am_hal_iom_workaround_word_write+0x3a0>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    13fe:	484f      	ldr	r0, [pc, #316]	; (153c <am_hal_iom_workaround_word_write+0x6ec>)
    1400:	6802      	ldr	r2, [r0, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    1402:	f3c2 43c2 	ubfx	r3, r2, #19, #3
    1406:	2b06      	cmp	r3, #6
    1408:	f000 80da 	beq.w	15c0 <am_hal_iom_workaround_word_write+0x770>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    140c:	3024      	adds	r0, #36	; 0x24
    140e:	6806      	ldr	r6, [r0, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    1410:	f3c6 41c2 	ubfx	r1, r6, #19, #3
    1414:	2906      	cmp	r1, #6
    1416:	f47f aedd 	bne.w	11d4 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    141a:	f04f 082e 	mov.w	r8, #46	; 0x2e
    141e:	4683      	mov	fp, r0
    1420:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    1422:	f44f 097f 	mov.w	r9, #16711680	; 0xff0000
    1426:	f04f 0a10 	mov.w	sl, #16
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    142a:	262c      	movs	r6, #44	; 0x2c
    142c:	e7a3      	b.n	1376 <am_hal_iom_workaround_word_write+0x526>
    142e:	4a43      	ldr	r2, [pc, #268]	; (153c <am_hal_iom_workaround_word_write+0x6ec>)
    1430:	6813      	ldr	r3, [r2, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    1432:	f3c3 26c2 	ubfx	r6, r3, #11, #3
    1436:	2e04      	cmp	r6, #4
    1438:	f000 80cc 	beq.w	15d4 <am_hal_iom_workaround_word_write+0x784>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    143c:	3224      	adds	r2, #36	; 0x24
    143e:	6811      	ldr	r1, [r2, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    1440:	f3c1 67c2 	ubfx	r7, r1, #27, #3
    1444:	2f06      	cmp	r7, #6
    1446:	f47f aec5 	bne.w	11d4 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    144a:	f04f 082f 	mov.w	r8, #47	; 0x2f
    144e:	4693      	mov	fp, r2
    1450:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    1452:	f04f 497f 	mov.w	r9, #4278190080	; 0xff000000
    1456:	f04f 0a18 	mov.w	sl, #24
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    145a:	262c      	movs	r6, #44	; 0x2c
    145c:	e78b      	b.n	1376 <am_hal_iom_workaround_word_write+0x526>
    145e:	4938      	ldr	r1, [pc, #224]	; (1540 <am_hal_iom_workaround_word_write+0x6f0>)
    1460:	680f      	ldr	r7, [r1, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    1462:	f3c7 60c2 	ubfx	r0, r7, #27, #3
    1466:	2804      	cmp	r0, #4
    1468:	f47f aeb4 	bne.w	11d4 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    146c:	f04f 0823 	mov.w	r8, #35	; 0x23
    1470:	468b      	mov	fp, r1
    1472:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    1474:	f04f 497f 	mov.w	r9, #4278190080	; 0xff000000
    1478:	f04f 0a18 	mov.w	sl, #24
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    147c:	2620      	movs	r6, #32
    147e:	e77a      	b.n	1376 <am_hal_iom_workaround_word_write+0x526>
    1480:	4e30      	ldr	r6, [pc, #192]	; (1544 <am_hal_iom_workaround_word_write+0x6f4>)
    1482:	6833      	ldr	r3, [r6, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    1484:	f3c3 42c2 	ubfx	r2, r3, #19, #3
    1488:	2a06      	cmp	r2, #6
    148a:	f47f aea3 	bne.w	11d4 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    148e:	f04f 0826 	mov.w	r8, #38	; 0x26
    1492:	46b3      	mov	fp, r6
    1494:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    1496:	f44f 097f 	mov.w	r9, #16711680	; 0xff0000
    149a:	f04f 0a10 	mov.w	sl, #16
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    149e:	2624      	movs	r6, #36	; 0x24
    14a0:	e769      	b.n	1376 <am_hal_iom_workaround_word_write+0x526>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    14a2:	4a29      	ldr	r2, [pc, #164]	; (1548 <am_hal_iom_workaround_word_write+0x6f8>)
    14a4:	4818      	ldr	r0, [pc, #96]	; (1508 <am_hal_iom_workaround_word_write+0x6b8>)
    14a6:	f640 7145 	movw	r1, #3909	; 0xf45
    14aa:	f7ff fa51 	bl	950 <am_hal_debug_error>
    14ae:	e611      	b.n	10d4 <am_hal_iom_workaround_word_write+0x284>
    14b0:	4a25      	ldr	r2, [pc, #148]	; (1548 <am_hal_iom_workaround_word_write+0x6f8>)
    14b2:	4815      	ldr	r0, [pc, #84]	; (1508 <am_hal_iom_workaround_word_write+0x6b8>)
    14b4:	f640 7145 	movw	r1, #3909	; 0xf45
    14b8:	f7ff fa4a 	bl	950 <am_hal_debug_error>
    14bc:	e5f4      	b.n	10a8 <am_hal_iom_workaround_word_write+0x258>
    am_hal_debug_assert_msg(ui32HiFreq > 0, "Invalid Hi Frequency for IOM.");
    14be:	4a23      	ldr	r2, [pc, #140]	; (154c <am_hal_iom_workaround_word_write+0x6fc>)
    14c0:	4811      	ldr	r0, [pc, #68]	; (1508 <am_hal_iom_workaround_word_write+0x6b8>)
    14c2:	f240 41e5 	movw	r1, #1253	; 0x4e5
    14c6:	f7ff fa43 	bl	950 <am_hal_debug_error>
    14ca:	e54b      	b.n	f64 <am_hal_iom_workaround_word_write+0x114>
    am_hal_debug_assert_msg(ui32NumBytes <= 4091, "SPI transfer too big.");
    14cc:	4a20      	ldr	r2, [pc, #128]	; (1550 <am_hal_iom_workaround_word_write+0x700>)
    14ce:	480e      	ldr	r0, [pc, #56]	; (1508 <am_hal_iom_workaround_word_write+0x6b8>)
    14d0:	f240 41ba 	movw	r1, #1210	; 0x4ba
    14d4:	f7ff fa3c 	bl	950 <am_hal_debug_error>
    14d8:	e4cd      	b.n	e76 <am_hal_iom_workaround_word_write+0x26>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    14da:	481e      	ldr	r0, [pc, #120]	; (1554 <am_hal_iom_workaround_word_write+0x704>)
    14dc:	6802      	ldr	r2, [r0, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    14de:	f3c2 23c2 	ubfx	r3, r2, #11, #3
    14e2:	2b06      	cmp	r3, #6
    14e4:	d04e      	beq.n	1584 <am_hal_iom_workaround_word_write+0x734>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    14e6:	3004      	adds	r0, #4
    14e8:	6806      	ldr	r6, [r0, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    14ea:	f3c6 41c2 	ubfx	r1, r6, #19, #3
    14ee:	2906      	cmp	r1, #6
    14f0:	f47f ae70 	bne.w	11d4 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    14f4:	f04f 0822 	mov.w	r8, #34	; 0x22
    14f8:	4683      	mov	fp, r0
    14fa:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    14fc:	f44f 097f 	mov.w	r9, #16711680	; 0xff0000
    1500:	f04f 0a10 	mov.w	sl, #16
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    1504:	2620      	movs	r6, #32
    1506:	e736      	b.n	1376 <am_hal_iom_workaround_word_write+0x526>
    1508:	000045c0 	.word	0x000045c0
    150c:	400100ec 	.word	0x400100ec
    1510:	40010094 	.word	0x40010094
    1514:	40010060 	.word	0x40010060
    1518:	4001010c 	.word	0x4001010c
    151c:	50008110 	.word	0x50008110
    1520:	0800009d 	.word	0x0800009d
    1524:	5000810c 	.word	0x5000810c
    1528:	365c0400 	.word	0x365c0400
    152c:	40010010 	.word	0x40010010
    1530:	40010028 	.word	0x40010028
    1534:	40010090 	.word	0x40010090
    1538:	400100e0 	.word	0x400100e0
    153c:	40010008 	.word	0x40010008
    1540:	40010020 	.word	0x40010020
    1544:	40010024 	.word	0x40010024
    1548:	0000458c 	.word	0x0000458c
    154c:	0000467c 	.word	0x0000467c
    1550:	00004664 	.word	0x00004664
    1554:	4001001c 	.word	0x4001001c
    1558:	40010054 	.word	0x40010054
    155c:	4001002c 	.word	0x4001002c
    1560:	40010040 	.word	0x40010040
            bRising = true;
    1564:	2001      	movs	r0, #1
    1566:	9006      	str	r0, [sp, #24]
    1568:	e589      	b.n	107e <am_hal_iom_workaround_word_write+0x22e>
    for ( ui32Fsel = 1; ui32Fsel < 8; ui32Fsel++ )
    156a:	2001      	movs	r0, #1
    156c:	e56d      	b.n	104a <am_hal_iom_workaround_word_write+0x1fa>
    156e:	f04f 0c01 	mov.w	ip, #1
    1572:	e4b2      	b.n	eda <am_hal_iom_workaround_word_write+0x8a>
    1574:	2002      	movs	r0, #2
    1576:	e568      	b.n	104a <am_hal_iom_workaround_word_write+0x1fa>
    1578:	2003      	movs	r0, #3
    157a:	e566      	b.n	104a <am_hal_iom_workaround_word_write+0x1fa>
    157c:	2004      	movs	r0, #4
    157e:	e564      	b.n	104a <am_hal_iom_workaround_word_write+0x1fa>
    1580:	2005      	movs	r0, #5
    1582:	e562      	b.n	104a <am_hal_iom_workaround_word_write+0x1fa>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    1584:	f04f 081d 	mov.w	r8, #29
    1588:	4683      	mov	fp, r0
    158a:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    158c:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    1590:	f04f 0a08 	mov.w	sl, #8
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    1594:	261c      	movs	r6, #28
    1596:	e6ee      	b.n	1376 <am_hal_iom_workaround_word_write+0x526>
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    1598:	f04f 0a10 	mov.w	sl, #16
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    159c:	f04f 0812 	mov.w	r8, #18
    15a0:	4693      	mov	fp, r2
    15a2:	4656      	mov	r6, sl
    15a4:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    15a6:	f44f 097f 	mov.w	r9, #16711680	; 0xff0000
    15aa:	e6e4      	b.n	1376 <am_hal_iom_workaround_word_write+0x526>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    15ac:	f04f 0811 	mov.w	r8, #17
    15b0:	46bb      	mov	fp, r7
    15b2:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    15b4:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    15b8:	f04f 0a08 	mov.w	sl, #8
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    15bc:	2610      	movs	r6, #16
    15be:	e6da      	b.n	1376 <am_hal_iom_workaround_word_write+0x526>
    15c0:	f04f 080a 	mov.w	r8, #10
    15c4:	4683      	mov	fp, r0
    15c6:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    15c8:	f44f 097f 	mov.w	r9, #16711680	; 0xff0000
    15cc:	f04f 0a10 	mov.w	sl, #16
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    15d0:	2608      	movs	r6, #8
    15d2:	e6d0      	b.n	1376 <am_hal_iom_workaround_word_write+0x526>
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    15d4:	f04f 0a08 	mov.w	sl, #8
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    15d8:	f04f 0809 	mov.w	r8, #9
    15dc:	4693      	mov	fp, r2
    15de:	4656      	mov	r6, sl
    15e0:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    15e2:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    15e6:	e6c6      	b.n	1376 <am_hal_iom_workaround_word_write+0x526>

000015e8 <am_hal_iom_spi_write_nb.part.6>:
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    15e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    15ec:	f500 24a0 	add.w	r4, r0, #327680	; 0x50000
    15f0:	3404      	adds	r4, #4
    15f2:	0324      	lsls	r4, r4, #12
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    15f4:	4606      	mov	r6, r0
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    15f6:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
    g_bIomBusy[ui32Module] = true;
    15fa:	4d6b      	ldr	r5, [pc, #428]	; (17a8 <am_hal_iom_spi_write_nb.part.6+0x1c0>)
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    15fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    1600:	f000 0708 	and.w	r7, r0, #8
                      AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    1604:	2f00      	cmp	r7, #0
    g_bIomBusy[ui32Module] = true;
    1606:	f04f 0e01 	mov.w	lr, #1
    160a:	f805 e006 	strb.w	lr, [r5, r6]
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    160e:	4617      	mov	r7, r2
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    1610:	f240 70ff 	movw	r0, #2047	; 0x7ff
                      AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    1614:	bf15      	itete	ne
    1616:	223c      	movne	r2, #60	; 0x3c
    1618:	227c      	moveq	r2, #124	; 0x7c
    161a:	2540      	movne	r5, #64	; 0x40
    161c:	2580      	moveq	r5, #128	; 0x80
    if ( WORKAROUND_IOM == ui32Module && isRevB0() )
    161e:	2e04      	cmp	r6, #4
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    1620:	4688      	mov	r8, r1
    1622:	469a      	mov	sl, r3
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    1624:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
    if ( WORKAROUND_IOM == ui32Module && isRevB0() )
    1628:	f000 808f 	beq.w	174a <am_hal_iom_spi_write_nb.part.6+0x162>
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    162c:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1630:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
        ui32TransferSize = (ui32NumBytes <= ui32MaxFifoSize ? ui32NumBytes :
    1634:	4555      	cmp	r5, sl
    1636:	bf28      	it	cs
    1638:	4655      	movcs	r5, sl
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    163a:	f013 0f08 	tst.w	r3, #8
    163e:	bf14      	ite	ne
    1640:	2340      	movne	r3, #64	; 0x40
    1642:	2380      	moveq	r3, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1644:	1a99      	subs	r1, r3, r2
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    1646:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
    164a:	4285      	cmp	r5, r0
    164c:	f200 809d 	bhi.w	178a <am_hal_iom_spi_write_nb.part.6+0x1a2>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1650:	2d00      	cmp	r5, #0
    1652:	d077      	beq.n	1744 <am_hal_iom_spi_write_nb.part.6+0x15c>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1654:	463a      	mov	r2, r7
    1656:	43f9      	mvns	r1, r7
    1658:	f852 3b04 	ldr.w	r3, [r2], #4
    165c:	6023      	str	r3, [r4, #0]
    165e:	4439      	add	r1, r7
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1660:	1bd0      	subs	r0, r2, r7
    1662:	4429      	add	r1, r5
    1664:	4285      	cmp	r5, r0
    1666:	f3c1 0182 	ubfx	r1, r1, #2, #3
    166a:	d941      	bls.n	16f0 <am_hal_iom_spi_write_nb.part.6+0x108>
    166c:	b319      	cbz	r1, 16b6 <am_hal_iom_spi_write_nb.part.6+0xce>
    166e:	2901      	cmp	r1, #1
    1670:	d01b      	beq.n	16aa <am_hal_iom_spi_write_nb.part.6+0xc2>
    1672:	2902      	cmp	r1, #2
    1674:	d016      	beq.n	16a4 <am_hal_iom_spi_write_nb.part.6+0xbc>
    1676:	2903      	cmp	r1, #3
    1678:	d011      	beq.n	169e <am_hal_iom_spi_write_nb.part.6+0xb6>
    167a:	2904      	cmp	r1, #4
    167c:	d00c      	beq.n	1698 <am_hal_iom_spi_write_nb.part.6+0xb0>
    167e:	2905      	cmp	r1, #5
    1680:	d007      	beq.n	1692 <am_hal_iom_spi_write_nb.part.6+0xaa>
    1682:	2906      	cmp	r1, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1684:	bf1c      	itt	ne
    1686:	f852 0b04 	ldrne.w	r0, [r2], #4
    168a:	6020      	strne	r0, [r4, #0]
    168c:	f852 3b04 	ldr.w	r3, [r2], #4
    1690:	6023      	str	r3, [r4, #0]
    1692:	f852 0b04 	ldr.w	r0, [r2], #4
    1696:	6020      	str	r0, [r4, #0]
    1698:	f852 1b04 	ldr.w	r1, [r2], #4
    169c:	6021      	str	r1, [r4, #0]
    169e:	f852 3b04 	ldr.w	r3, [r2], #4
    16a2:	6023      	str	r3, [r4, #0]
    16a4:	f852 0b04 	ldr.w	r0, [r2], #4
    16a8:	6020      	str	r0, [r4, #0]
    16aa:	f852 1b04 	ldr.w	r1, [r2], #4
    16ae:	6021      	str	r1, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    16b0:	1bd3      	subs	r3, r2, r7
    16b2:	429d      	cmp	r5, r3
    16b4:	d91c      	bls.n	16f0 <am_hal_iom_spi_write_nb.part.6+0x108>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    16b6:	4694      	mov	ip, r2
    16b8:	3220      	adds	r2, #32
    16ba:	f85c 0b04 	ldr.w	r0, [ip], #4
    16be:	6020      	str	r0, [r4, #0]
    16c0:	f852 1c1c 	ldr.w	r1, [r2, #-28]
    16c4:	6021      	str	r1, [r4, #0]
    16c6:	f8dc 3004 	ldr.w	r3, [ip, #4]
    16ca:	6023      	str	r3, [r4, #0]
    16cc:	f852 0c14 	ldr.w	r0, [r2, #-20]
    16d0:	6020      	str	r0, [r4, #0]
    16d2:	f852 1c10 	ldr.w	r1, [r2, #-16]
    16d6:	6021      	str	r1, [r4, #0]
    16d8:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    16dc:	6023      	str	r3, [r4, #0]
    16de:	f852 0c08 	ldr.w	r0, [r2, #-8]
    16e2:	6020      	str	r0, [r4, #0]
    16e4:	f852 1c04 	ldr.w	r1, [r2, #-4]
    16e8:	6021      	str	r1, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    16ea:	1bd3      	subs	r3, r2, r7
    16ec:	429d      	cmp	r5, r3
    16ee:	d8e2      	bhi.n	16b6 <am_hal_iom_spi_write_nb.part.6+0xce>
            g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    16f0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    16f4:	4a2d      	ldr	r2, [pc, #180]	; (17ac <am_hal_iom_spi_write_nb.part.6+0x1c4>)
    16f6:	00b0      	lsls	r0, r6, #2
    16f8:	1813      	adds	r3, r2, r0
            g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    16fa:	f025 0c03 	bic.w	ip, r5, #3
            g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    16fe:	2101      	movs	r1, #1
            g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
    1700:	ebaa 0505 	sub.w	r5, sl, r5
            g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    1704:	4467      	add	r7, ip
            g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    1706:	9e09      	ldr	r6, [sp, #36]	; 0x24
            g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    1708:	5011      	str	r1, [r2, r0]
            g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    170a:	611e      	str	r6, [r3, #16]
            g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    170c:	f8c3 900c 	str.w	r9, [r3, #12]
            g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
    1710:	609d      	str	r5, [r3, #8]
            g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    1712:	605f      	str	r7, [r3, #4]
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1714:	f1ba 0f00 	cmp.w	sl, #0
    1718:	d03e      	beq.n	1798 <am_hal_iom_spi_write_nb.part.6+0x1b0>
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    171a:	ea4f 4708 	mov.w	r7, r8, lsl #16
    ui32Command |= ui32Options & 0x5C00FF00;
    171e:	f029 4223 	bic.w	r2, r9, #2734686208	; 0xa3000000
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    1722:	f407 20e0 	and.w	r0, r7, #458752	; 0x70000
    ui32Command |= ui32Options & 0x5C00FF00;
    1726:	f002 23ff 	and.w	r3, r2, #4278255360	; 0xff00ff00
    172a:	ea40 0103 	orr.w	r1, r0, r3
    ui32Command |= (ui32NumBytes & 0xFF);
    172e:	fa5f f58a 	uxtb.w	r5, sl
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    1732:	ea4f 36ca 	mov.w	r6, sl, lsl #15
    ui32Command |= ui32Options & 0x5C00FF00;
    1736:	4329      	orrs	r1, r5
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    1738:	f006 67f0 	and.w	r7, r6, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
    173c:	ea41 0207 	orr.w	r2, r1, r7
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    1740:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
}
    1744:	2000      	movs	r0, #0
    1746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B )
    174a:	4b19      	ldr	r3, [pc, #100]	; (17b0 <am_hal_iom_spi_write_nb.part.6+0x1c8>)
    174c:	6819      	ldr	r1, [r3, #0]
    174e:	b2c8      	uxtb	r0, r1
    1750:	2820      	cmp	r0, #32
    1752:	f47f af6b 	bne.w	162c <am_hal_iom_spi_write_nb.part.6+0x44>
        ui32TransferSize = (ui32NumBytes <= (ui32MaxFifoSize - 4) ?  ui32NumBytes :
    1756:	4552      	cmp	r2, sl
    1758:	bf28      	it	cs
    175a:	4652      	movcs	r2, sl
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    175c:	4d13      	ldr	r5, [pc, #76]	; (17ac <am_hal_iom_spi_write_nb.part.6+0x1c4>)
        g_psIOMBuffers[ui32Module].pui32Data = pui32Data + (ui32TransferSize / 4);
    175e:	f022 0603 	bic.w	r6, r2, #3
    1762:	443e      	add	r6, r7
        g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes - ui32TransferSize;
    1764:	ebaa 0402 	sub.w	r4, sl, r2
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
    1768:	4639      	mov	r1, r7
        g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    176a:	9f09      	ldr	r7, [sp, #36]	; 0x24
        g_psIOMBuffers[ui32Module].pui32Data = pui32Data + (ui32TransferSize / 4);
    176c:	656e      	str	r6, [r5, #84]	; 0x54
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
    176e:	4640      	mov	r0, r8
    1770:	4652      	mov	r2, sl
    1772:	464b      	mov	r3, r9
        g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes - ui32TransferSize;
    1774:	65ac      	str	r4, [r5, #88]	; 0x58
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    1776:	f8c5 e050 	str.w	lr, [r5, #80]	; 0x50
        g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    177a:	662f      	str	r7, [r5, #96]	; 0x60
        g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    177c:	f8c5 905c 	str.w	r9, [r5, #92]	; 0x5c
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
    1780:	f7ff fb66 	bl	e50 <am_hal_iom_workaround_word_write>
}
    1784:	2000      	movs	r0, #0
    1786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    178a:	4a0a      	ldr	r2, [pc, #40]	; (17b4 <am_hal_iom_spi_write_nb.part.6+0x1cc>)
    178c:	480a      	ldr	r0, [pc, #40]	; (17b8 <am_hal_iom_spi_write_nb.part.6+0x1d0>)
    178e:	f640 7145 	movw	r1, #3909	; 0xf45
    1792:	f7ff f8dd 	bl	950 <am_hal_debug_error>
    1796:	e75d      	b.n	1654 <am_hal_iom_spi_write_nb.part.6+0x6c>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1798:	4a08      	ldr	r2, [pc, #32]	; (17bc <am_hal_iom_spi_write_nb.part.6+0x1d4>)
    179a:	4807      	ldr	r0, [pc, #28]	; (17b8 <am_hal_iom_spi_write_nb.part.6+0x1d0>)
    179c:	f640 21da 	movw	r1, #2778	; 0xada
    17a0:	f7ff f8d6 	bl	950 <am_hal_debug_error>
    17a4:	e7b9      	b.n	171a <am_hal_iom_spi_write_nb.part.6+0x132>
    17a6:	bf00      	nop
    17a8:	10001004 	.word	0x10001004
    17ac:	10001324 	.word	0x10001324
    17b0:	4002000c 	.word	0x4002000c
    17b4:	0000458c 	.word	0x0000458c
    17b8:	000045c0 	.word	0x000045c0
    17bc:	00004640 	.word	0x00004640

000017c0 <am_hal_iom_spi_read_nb.part.7>:
am_hal_iom_spi_read_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    17c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    17c4:	f500 27a0 	add.w	r7, r0, #327680	; 0x50000
    17c8:	3704      	adds	r7, #4
    17ca:	033f      	lsls	r7, r7, #12
    g_bIomBusy[ui32Module] = true;
    17cc:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 18c8 <am_hal_iom_spi_read_nb.part.7+0x108>
    17d0:	f04f 0801 	mov.w	r8, #1
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    17d4:	f240 7bff 	movw	fp, #2047	; 0x7ff
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
    17d8:	2804      	cmp	r0, #4
    g_bIomBusy[ui32Module] = true;
    17da:	f80a 8000 	strb.w	r8, [sl, r0]
am_hal_iom_spi_read_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    17de:	b083      	sub	sp, #12
    17e0:	4604      	mov	r4, r0
    17e2:	460e      	mov	r6, r1
    17e4:	4691      	mov	r9, r2
    17e6:	461d      	mov	r5, r3
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    17e8:	f8c7 b208 	str.w	fp, [r7, #520]	; 0x208
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
    17ec:	d02c      	beq.n	1848 <am_hal_iom_spi_read_nb.part.7+0x88>
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    17ee:	482f      	ldr	r0, [pc, #188]	; (18ac <am_hal_iom_spi_read_nb.part.7+0xec>)
    17f0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    17f4:	00a2      	lsls	r2, r4, #2
    17f6:	1883      	adds	r3, r0, r2
    17f8:	2102      	movs	r1, #2
    17fa:	5081      	str	r1, [r0, r2]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    17fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    17fe:	980c      	ldr	r0, [sp, #48]	; 0x30
    g_psIOMBuffers[ui32Module].pui32Data = pui32Data;
    1800:	f8c3 9004 	str.w	r9, [r3, #4]
    g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes;
    1804:	609d      	str	r5, [r3, #8]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    1806:	611c      	str	r4, [r3, #16]
    g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    1808:	60d8      	str	r0, [r3, #12]
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    180a:	b92d      	cbnz	r5, 1818 <am_hal_iom_spi_read_nb.part.7+0x58>
    180c:	4a28      	ldr	r2, [pc, #160]	; (18b0 <am_hal_iom_spi_read_nb.part.7+0xf0>)
    180e:	4829      	ldr	r0, [pc, #164]	; (18b4 <am_hal_iom_spi_read_nb.part.7+0xf4>)
    1810:	f640 21da 	movw	r1, #2778	; 0xada
    1814:	f7ff f89c 	bl	950 <am_hal_debug_error>
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    1818:	03ea      	lsls	r2, r5, #15
    ui32Command |= (ui32NumBytes & 0xFF);
    181a:	fa5f fc85 	uxtb.w	ip, r5
    ui32Command |= ui32Options & 0x5C00FF00;
    181e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    1820:	f002 61f0 	and.w	r1, r2, #125829120	; 0x7800000
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    1824:	0436      	lsls	r6, r6, #16
    ui32Command |= (ui32NumBytes & 0xFF);
    1826:	f04c 4500 	orr.w	r5, ip, #2147483648	; 0x80000000
    ui32Command |= ui32Options & 0x5C00FF00;
    182a:	f023 4023 	bic.w	r0, r3, #2734686208	; 0xa3000000
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    182e:	f406 24e0 	and.w	r4, r6, #458752	; 0x70000
    ui32Command |= (ui32NumBytes & 0xFF);
    1832:	430d      	orrs	r5, r1
    ui32Command |= ui32Options & 0x5C00FF00;
    1834:	f000 22ff 	and.w	r2, r0, #4278255360	; 0xff00ff00
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    1838:	432c      	orrs	r4, r5
    ui32Command |= ui32Options & 0x5C00FF00;
    183a:	4322      	orrs	r2, r4
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    183c:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
    return ui32Status;
    1840:	2000      	movs	r0, #0
}
    1842:	b003      	add	sp, #12
    1844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
    1848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    184a:	f013 4180 	ands.w	r1, r3, #1073741824	; 0x40000000
    184e:	d1ce      	bne.n	17ee <am_hal_iom_spi_read_nb.part.7+0x2e>
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B )
    1850:	4819      	ldr	r0, [pc, #100]	; (18b8 <am_hal_iom_spi_read_nb.part.7+0xf8>)
    1852:	6802      	ldr	r2, [r0, #0]
    1854:	b2d3      	uxtb	r3, r2
    1856:	2b20      	cmp	r3, #32
    1858:	d1c9      	bne.n	17ee <am_hal_iom_spi_read_nb.part.7+0x2e>
        ui32IntConfig = AM_REGn(IOMSTR, 4, INTEN);
    185a:	4818      	ldr	r0, [pc, #96]	; (18bc <am_hal_iom_spi_read_nb.part.7+0xfc>)
    185c:	6803      	ldr	r3, [r0, #0]
        AM_REGn(IOMSTR, 4, INTEN) = 0;
    185e:	4817      	ldr	r0, [pc, #92]	; (18bc <am_hal_iom_spi_read_nb.part.7+0xfc>)
        ui32IntConfig = AM_REGn(IOMSTR, 4, INTEN);
    1860:	9301      	str	r3, [sp, #4]
        AM_REGn(IOMSTR, 4, INTEN) = 0;
    1862:	6001      	str	r1, [r0, #0]
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
    1864:	460a      	mov	r2, r1
    1866:	990c      	ldr	r1, [sp, #48]	; 0x30
    1868:	4630      	mov	r0, r6
    186a:	f041 5380 	orr.w	r3, r1, #268435456	; 0x10000000
    186e:	4649      	mov	r1, r9
    1870:	f7ff faee 	bl	e50 <am_hal_iom_workaround_word_write>
        waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    1874:	4a12      	ldr	r2, [pc, #72]	; (18c0 <am_hal_iom_spi_read_nb.part.7+0x100>)
    1876:	4643      	mov	r3, r8
    1878:	6910      	ldr	r0, [r2, #16]
    187a:	f507 7101 	add.w	r1, r7, #516	; 0x204
    187e:	4642      	mov	r2, r8
    1880:	f7ff f86c 	bl	95c <am_hal_flash_delay_status_change>
        if (waitStatus != 1)
    1884:	2801      	cmp	r0, #1
    1886:	d004      	beq.n	1892 <am_hal_iom_spi_read_nb.part.7+0xd2>
            g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    1888:	4f0e      	ldr	r7, [pc, #56]	; (18c4 <am_hal_iom_spi_read_nb.part.7+0x104>)
            return ui32Status;
    188a:	4640      	mov	r0, r8
            g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    188c:	f887 8004 	strb.w	r8, [r7, #4]
    1890:	e7d7      	b.n	1842 <am_hal_iom_spi_read_nb.part.7+0x82>
        ui32Options |= AM_HAL_IOM_RAW;
    1892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        AM_REGn(IOMSTR, 4, INTEN) = ui32IntConfig;
    1894:	4909      	ldr	r1, [pc, #36]	; (18bc <am_hal_iom_spi_read_nb.part.7+0xfc>)
        g_bIomBusy[ui32Module] = true;
    1896:	f88a 0004 	strb.w	r0, [sl, #4]
        AM_REGn(IOMSTR, 4, INTEN) = ui32IntConfig;
    189a:	9a01      	ldr	r2, [sp, #4]
        AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    189c:	f8c7 b208 	str.w	fp, [r7, #520]	; 0x208
        ui32Options |= AM_HAL_IOM_RAW;
    18a0:	f043 4080 	orr.w	r0, r3, #1073741824	; 0x40000000
    18a4:	900c      	str	r0, [sp, #48]	; 0x30
        AM_REGn(IOMSTR, 4, INTEN) = ui32IntConfig;
    18a6:	600a      	str	r2, [r1, #0]
    18a8:	e7a1      	b.n	17ee <am_hal_iom_spi_read_nb.part.7+0x2e>
    18aa:	bf00      	nop
    18ac:	10001324 	.word	0x10001324
    18b0:	00004640 	.word	0x00004640
    18b4:	000045c0 	.word	0x000045c0
    18b8:	4002000c 	.word	0x4002000c
    18bc:	50008200 	.word	0x50008200
    18c0:	1000130c 	.word	0x1000130c
    18c4:	1000100c 	.word	0x1000100c
    18c8:	10001004 	.word	0x10001004

000018cc <am_hal_iom_spi_write_nq>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    18cc:	2805      	cmp	r0, #5
    18ce:	d901      	bls.n	18d4 <am_hal_iom_spi_write_nq+0x8>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    18d0:	2002      	movs	r0, #2
    18d2:	4770      	bx	lr
{
    18d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18d8:	4dc1      	ldr	r5, [pc, #772]	; (1be0 <am_hal_iom_spi_write_nq+0x314>)
    18da:	b083      	sub	sp, #12
    while ( g_bIomBusy[ui32Module] );
    18dc:	5c2c      	ldrb	r4, [r5, r0]
    18de:	f004 06ff 	and.w	r6, r4, #255	; 0xff
    18e2:	2c00      	cmp	r4, #0
    18e4:	d1fa      	bne.n	18dc <am_hal_iom_spi_write_nq+0x10>
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    18e6:	f8df 930c 	ldr.w	r9, [pc, #780]	; 1bf4 <am_hal_iom_spi_write_nq+0x328>
    if (ui32NumBytes == 0)
    18ea:	1e5f      	subs	r7, r3, #1
    18ec:	f640 75fe 	movw	r5, #4094	; 0xffe
    18f0:	42af      	cmp	r7, r5
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    18f2:	f809 6000 	strb.w	r6, [r9, r0]
    if (ui32NumBytes == 0)
    18f6:	d906      	bls.n	1906 <am_hal_iom_spi_write_nq+0x3a>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    18f8:	2403      	movs	r4, #3
    18fa:	f809 4000 	strb.w	r4, [r9, r0]
        return ui32Status;
    18fe:	4620      	mov	r0, r4
}
    1900:	b003      	add	sp, #12
    1902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1906:	468b      	mov	fp, r1
    1908:	9000      	str	r0, [sp, #0]
    190a:	4601      	mov	r1, r0
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    190c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
    1910:	3004      	adds	r0, #4
    1912:	0304      	lsls	r4, r0, #12
    1914:	4698      	mov	r8, r3
    1916:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    191a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    191e:	f8c4 6200 	str.w	r6, [r4, #512]	; 0x200
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    1922:	f005 0008 	and.w	r0, r5, #8
                       AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    1926:	2800      	cmp	r0, #0
    1928:	4617      	mov	r7, r2
    192a:	bf18      	it	ne
    192c:	f04f 0e3c 	movne.w	lr, #60	; 0x3c
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    1930:	f240 72ff 	movw	r2, #2047	; 0x7ff
                       AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    1934:	bf0a      	itet	eq
    1936:	f04f 0e7c 	moveq.w	lr, #124	; 0x7c
    193a:	2640      	movne	r6, #64	; 0x40
    193c:	2680      	moveq	r6, #128	; 0x80
    if ( WORKAROUND_IOM == ui32Module && isRevB0() )
    193e:	2904      	cmp	r1, #4
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    1940:	9301      	str	r3, [sp, #4]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    1942:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    1946:	f504 7a8e 	add.w	sl, r4, #284	; 0x11c
    if ( WORKAROUND_IOM == ui32Module && isRevB0() )
    194a:	d105      	bne.n	1958 <am_hal_iom_spi_write_nq+0x8c>
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B )
    194c:	4aa5      	ldr	r2, [pc, #660]	; (1be4 <am_hal_iom_spi_write_nq+0x318>)
    194e:	6815      	ldr	r5, [r2, #0]
    1950:	b2eb      	uxtb	r3, r5
    1952:	2b20      	cmp	r3, #32
    1954:	f000 8136 	beq.w	1bc4 <am_hal_iom_spi_write_nq+0x2f8>
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    1958:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    195c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
        ui32TransferSize = (ui32NumBytes <= ui32MaxFifoSize ? ui32NumBytes :
    1960:	4546      	cmp	r6, r8
    1962:	bf28      	it	cs
    1964:	4646      	movcs	r6, r8
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    1966:	f010 0f08 	tst.w	r0, #8
    196a:	bf14      	ite	ne
    196c:	2040      	movne	r0, #64	; 0x40
    196e:	2080      	moveq	r0, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1970:	1a42      	subs	r2, r0, r1
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    1972:	f002 05fc 	and.w	r5, r2, #252	; 0xfc
    1976:	42ae      	cmp	r6, r5
    1978:	f200 811d 	bhi.w	1bb6 <am_hal_iom_spi_write_nq+0x2ea>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    197c:	463b      	mov	r3, r7
    197e:	43f8      	mvns	r0, r7
    1980:	f853 1b04 	ldr.w	r1, [r3], #4
    1984:	6021      	str	r1, [r4, #0]
    1986:	4438      	add	r0, r7
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1988:	1bdd      	subs	r5, r3, r7
    198a:	4430      	add	r0, r6
    198c:	42ae      	cmp	r6, r5
    198e:	f3c0 0282 	ubfx	r2, r0, #2, #3
    1992:	d941      	bls.n	1a18 <am_hal_iom_spi_write_nq+0x14c>
    1994:	b31a      	cbz	r2, 19de <am_hal_iom_spi_write_nq+0x112>
    1996:	2a01      	cmp	r2, #1
    1998:	d01b      	beq.n	19d2 <am_hal_iom_spi_write_nq+0x106>
    199a:	2a02      	cmp	r2, #2
    199c:	d016      	beq.n	19cc <am_hal_iom_spi_write_nq+0x100>
    199e:	2a03      	cmp	r2, #3
    19a0:	d011      	beq.n	19c6 <am_hal_iom_spi_write_nq+0xfa>
    19a2:	2a04      	cmp	r2, #4
    19a4:	d00c      	beq.n	19c0 <am_hal_iom_spi_write_nq+0xf4>
    19a6:	2a05      	cmp	r2, #5
    19a8:	d007      	beq.n	19ba <am_hal_iom_spi_write_nq+0xee>
    19aa:	2a06      	cmp	r2, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    19ac:	bf1c      	itt	ne
    19ae:	f853 2b04 	ldrne.w	r2, [r3], #4
    19b2:	6022      	strne	r2, [r4, #0]
    19b4:	f853 0b04 	ldr.w	r0, [r3], #4
    19b8:	6020      	str	r0, [r4, #0]
    19ba:	f853 1b04 	ldr.w	r1, [r3], #4
    19be:	6021      	str	r1, [r4, #0]
    19c0:	f853 5b04 	ldr.w	r5, [r3], #4
    19c4:	6025      	str	r5, [r4, #0]
    19c6:	f853 2b04 	ldr.w	r2, [r3], #4
    19ca:	6022      	str	r2, [r4, #0]
    19cc:	f853 0b04 	ldr.w	r0, [r3], #4
    19d0:	6020      	str	r0, [r4, #0]
    19d2:	f853 1b04 	ldr.w	r1, [r3], #4
    19d6:	6021      	str	r1, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    19d8:	1bdd      	subs	r5, r3, r7
    19da:	42ae      	cmp	r6, r5
    19dc:	d91c      	bls.n	1a18 <am_hal_iom_spi_write_nq+0x14c>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    19de:	469c      	mov	ip, r3
    19e0:	3320      	adds	r3, #32
    19e2:	f85c 2b04 	ldr.w	r2, [ip], #4
    19e6:	6022      	str	r2, [r4, #0]
    19e8:	f853 0c1c 	ldr.w	r0, [r3, #-28]
    19ec:	6020      	str	r0, [r4, #0]
    19ee:	f8dc 1004 	ldr.w	r1, [ip, #4]
    19f2:	6021      	str	r1, [r4, #0]
    19f4:	f853 5c14 	ldr.w	r5, [r3, #-20]
    19f8:	6025      	str	r5, [r4, #0]
    19fa:	f853 2c10 	ldr.w	r2, [r3, #-16]
    19fe:	6022      	str	r2, [r4, #0]
    1a00:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    1a04:	6020      	str	r0, [r4, #0]
    1a06:	f853 1c08 	ldr.w	r1, [r3, #-8]
    1a0a:	6021      	str	r1, [r4, #0]
    1a0c:	f853 5c04 	ldr.w	r5, [r3, #-4]
    1a10:	6025      	str	r5, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1a12:	1bda      	subs	r2, r3, r7
    1a14:	4296      	cmp	r6, r2
    1a16:	d8e2      	bhi.n	19de <am_hal_iom_spi_write_nq+0x112>
    ui32Command |= ui32Options & 0x5C00FF00;
    1a18:	990c      	ldr	r1, [sp, #48]	; 0x30
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    1a1a:	ea4f 4e0b 	mov.w	lr, fp, lsl #16
    1a1e:	f40e 20e0 	and.w	r0, lr, #458752	; 0x70000
    ui32Command |= (ui32NumBytes & 0xFF);
    1a22:	fa5f f388 	uxtb.w	r3, r8
    ui32Command |= ui32Options & 0x5C00FF00;
    1a26:	f021 4523 	bic.w	r5, r1, #2734686208	; 0xa3000000
    1a2a:	4303      	orrs	r3, r0
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    1a2c:	ea4f 3cc8 	mov.w	ip, r8, lsl #15
    ui32Command |= ui32Options & 0x5C00FF00;
    1a30:	f005 20ff 	and.w	r0, r5, #4278255360	; 0xff00ff00
    1a34:	4303      	orrs	r3, r0
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    1a36:	f00c 62f0 	and.w	r2, ip, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
    1a3a:	4313      	orrs	r3, r2
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    1a3c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pui32Data += ui32TransferSize >> 2;
    1a40:	f026 0e03 	bic.w	lr, r6, #3
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    1a44:	ebb8 0606 	subs.w	r6, r8, r6
    pui32Data += ui32TransferSize >> 2;
    1a48:	4477      	add	r7, lr
    1a4a:	bf08      	it	eq
    1a4c:	f504 7b01 	addeq.w	fp, r4, #516	; 0x204
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    1a50:	f000 8083 	beq.w	1b5a <am_hal_iom_spi_write_nq+0x28e>
    1a54:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
    1a58:	07da      	lsls	r2, r3, #31
    1a5a:	f504 7b01 	add.w	fp, r4, #516	; 0x204
    1a5e:	d47c      	bmi.n	1b5a <am_hal_iom_spi_write_nq+0x28e>
    1a60:	f504 7580 	add.w	r5, r4, #256	; 0x100
    1a64:	46a8      	mov	r8, r5
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    1a66:	f8da 1000 	ldr.w	r1, [sl]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1a6a:	f8d8 0000 	ldr.w	r0, [r8]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    1a6e:	f011 0f08 	tst.w	r1, #8
    1a72:	bf14      	ite	ne
    1a74:	2140      	movne	r1, #64	; 0x40
    1a76:	2180      	moveq	r1, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1a78:	1a0a      	subs	r2, r1, r0
        ui32SpaceInFifo =  am_hal_iom_fifo_empty_slots(ui32Module);
    1a7a:	f002 03fc 	and.w	r3, r2, #252	; 0xfc
        if ( ui32NumBytes <= ui32SpaceInFifo )
    1a7e:	42b3      	cmp	r3, r6
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    1a80:	f8da 1000 	ldr.w	r1, [sl]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1a84:	f8d8 0000 	ldr.w	r0, [r8]
            ui32TransferSize = ui32SpaceInFifo & ~(0x3);
    1a88:	bf3b      	ittet	cc
    1a8a:	f023 0303 	biccc.w	r3, r3, #3
    1a8e:	1af5      	subcc	r5, r6, r3
        if ( ui32NumBytes <= ui32SpaceInFifo )
    1a90:	2500      	movcs	r5, #0
            ui32TransferSize = ui32SpaceInFifo & ~(0x3);
    1a92:	461e      	movcc	r6, r3
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    1a94:	f011 0f08 	tst.w	r1, #8
    1a98:	bf14      	ite	ne
    1a9a:	2140      	movne	r1, #64	; 0x40
    1a9c:	2180      	moveq	r1, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1a9e:	1a0a      	subs	r2, r1, r0
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    1aa0:	f002 0cfc 	and.w	ip, r2, #252	; 0xfc
    1aa4:	4566      	cmp	r6, ip
    1aa6:	d86e      	bhi.n	1b86 <am_hal_iom_spi_write_nq+0x2ba>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1aa8:	2e00      	cmp	r6, #0
    1aaa:	d04d      	beq.n	1b48 <am_hal_iom_spi_write_nq+0x27c>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1aac:	463b      	mov	r3, r7
    1aae:	43f8      	mvns	r0, r7
    1ab0:	f853 1b04 	ldr.w	r1, [r3], #4
    1ab4:	6021      	str	r1, [r4, #0]
    1ab6:	4438      	add	r0, r7
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1ab8:	1bd9      	subs	r1, r3, r7
    1aba:	4430      	add	r0, r6
    1abc:	428e      	cmp	r6, r1
    1abe:	f3c0 0282 	ubfx	r2, r0, #2, #3
    1ac2:	d941      	bls.n	1b48 <am_hal_iom_spi_write_nq+0x27c>
    1ac4:	b31a      	cbz	r2, 1b0e <am_hal_iom_spi_write_nq+0x242>
    1ac6:	2a01      	cmp	r2, #1
    1ac8:	d01b      	beq.n	1b02 <am_hal_iom_spi_write_nq+0x236>
    1aca:	2a02      	cmp	r2, #2
    1acc:	d016      	beq.n	1afc <am_hal_iom_spi_write_nq+0x230>
    1ace:	2a03      	cmp	r2, #3
    1ad0:	d011      	beq.n	1af6 <am_hal_iom_spi_write_nq+0x22a>
    1ad2:	2a04      	cmp	r2, #4
    1ad4:	d00c      	beq.n	1af0 <am_hal_iom_spi_write_nq+0x224>
    1ad6:	2a05      	cmp	r2, #5
    1ad8:	d007      	beq.n	1aea <am_hal_iom_spi_write_nq+0x21e>
    1ada:	2a06      	cmp	r2, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1adc:	bf1c      	itt	ne
    1ade:	f853 2b04 	ldrne.w	r2, [r3], #4
    1ae2:	6022      	strne	r2, [r4, #0]
    1ae4:	f853 0b04 	ldr.w	r0, [r3], #4
    1ae8:	6020      	str	r0, [r4, #0]
    1aea:	f853 1b04 	ldr.w	r1, [r3], #4
    1aee:	6021      	str	r1, [r4, #0]
    1af0:	f853 2b04 	ldr.w	r2, [r3], #4
    1af4:	6022      	str	r2, [r4, #0]
    1af6:	f853 0b04 	ldr.w	r0, [r3], #4
    1afa:	6020      	str	r0, [r4, #0]
    1afc:	f853 1b04 	ldr.w	r1, [r3], #4
    1b00:	6021      	str	r1, [r4, #0]
    1b02:	f853 2b04 	ldr.w	r2, [r3], #4
    1b06:	6022      	str	r2, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1b08:	1bd8      	subs	r0, r3, r7
    1b0a:	4286      	cmp	r6, r0
    1b0c:	d91c      	bls.n	1b48 <am_hal_iom_spi_write_nq+0x27c>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1b0e:	469e      	mov	lr, r3
    1b10:	3320      	adds	r3, #32
    1b12:	f85e 1b04 	ldr.w	r1, [lr], #4
    1b16:	6021      	str	r1, [r4, #0]
    1b18:	f853 2c1c 	ldr.w	r2, [r3, #-28]
    1b1c:	6022      	str	r2, [r4, #0]
    1b1e:	f8de 0004 	ldr.w	r0, [lr, #4]
    1b22:	6020      	str	r0, [r4, #0]
    1b24:	f853 1c14 	ldr.w	r1, [r3, #-20]
    1b28:	6021      	str	r1, [r4, #0]
    1b2a:	f853 2c10 	ldr.w	r2, [r3, #-16]
    1b2e:	6022      	str	r2, [r4, #0]
    1b30:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    1b34:	6020      	str	r0, [r4, #0]
    1b36:	f853 1c08 	ldr.w	r1, [r3, #-8]
    1b3a:	6021      	str	r1, [r4, #0]
    1b3c:	f853 2c04 	ldr.w	r2, [r3, #-4]
    1b40:	6022      	str	r2, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1b42:	1bd8      	subs	r0, r3, r7
    1b44:	4286      	cmp	r6, r0
    1b46:	d8e2      	bhi.n	1b0e <am_hal_iom_spi_write_nq+0x242>
        pui32Data += ui32TransferSize >> 2;
    1b48:	f026 0603 	bic.w	r6, r6, #3
    1b4c:	4437      	add	r7, r6
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    1b4e:	b125      	cbz	r5, 1b5a <am_hal_iom_spi_write_nq+0x28e>
    1b50:	f8db 3000 	ldr.w	r3, [fp]
    1b54:	07db      	lsls	r3, r3, #31
    1b56:	462e      	mov	r6, r5
    1b58:	d585      	bpl.n	1a66 <am_hal_iom_spi_write_nq+0x19a>
    waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    1b5a:	9d00      	ldr	r5, [sp, #0]
    1b5c:	4f22      	ldr	r7, [pc, #136]	; (1be8 <am_hal_iom_spi_write_nq+0x31c>)
    1b5e:	2301      	movs	r3, #1
    1b60:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
    1b64:	461a      	mov	r2, r3
    1b66:	4659      	mov	r1, fp
    1b68:	f7fe fef8 	bl	95c <am_hal_flash_delay_status_change>
    if (waitStatus != 1)
    1b6c:	2801      	cmp	r0, #1
    1b6e:	d011      	beq.n	1b94 <am_hal_iom_spi_write_nq+0x2c8>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    1b70:	2001      	movs	r0, #1
    1b72:	f809 0005 	strb.w	r0, [r9, r5]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    1b76:	f240 73ff 	movw	r3, #2047	; 0x7ff
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    1b7a:	9e01      	ldr	r6, [sp, #4]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    1b7c:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    1b80:	f8c4 6200 	str.w	r6, [r4, #512]	; 0x200
    1b84:	e6bc      	b.n	1900 <am_hal_iom_spi_write_nq+0x34>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    1b86:	4a19      	ldr	r2, [pc, #100]	; (1bec <am_hal_iom_spi_write_nq+0x320>)
    1b88:	4819      	ldr	r0, [pc, #100]	; (1bf0 <am_hal_iom_spi_write_nq+0x324>)
    1b8a:	f640 7145 	movw	r1, #3909	; 0xf45
    1b8e:	f7fe fedf 	bl	950 <am_hal_debug_error>
    1b92:	e78b      	b.n	1aac <am_hal_iom_spi_write_nq+0x1e0>
        uint32_t u32RetVal = AM_REGn(IOMSTR, ui32Module, INTSTAT);
        return u32RetVal & AM_REGn(IOMSTR, ui32Module, INTEN);
    }
    else
    {
        return AM_REGn(IOMSTR, ui32Module, INTSTAT);
    1b94:	f8db 1000 	ldr.w	r1, [fp]
    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    1b98:	f011 0fcc 	tst.w	r1, #204	; 0xcc
    1b9c:	d11d      	bne.n	1bda <am_hal_iom_spi_write_nq+0x30e>
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
    1b9e:	f411 6fe0 	tst.w	r1, #1792	; 0x700
    1ba2:	d129      	bne.n	1bf8 <am_hal_iom_spi_write_nq+0x32c>
    am_hal_iom_status_e ui32Status = AM_HAL_IOM_SUCCESS;
    1ba4:	f011 0f10 	tst.w	r1, #16
    1ba8:	bf14      	ite	ne
    1baa:	2006      	movne	r0, #6
    1bac:	2000      	moveq	r0, #0
        g_iom_error_status[ui32Module] = ui32Status = internal_iom_get_int_err(ui32Module, 0);
    1bae:	9a00      	ldr	r2, [sp, #0]
    1bb0:	f809 0002 	strb.w	r0, [r9, r2]
    1bb4:	e7df      	b.n	1b76 <am_hal_iom_spi_write_nq+0x2aa>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    1bb6:	4a0d      	ldr	r2, [pc, #52]	; (1bec <am_hal_iom_spi_write_nq+0x320>)
    1bb8:	480d      	ldr	r0, [pc, #52]	; (1bf0 <am_hal_iom_spi_write_nq+0x324>)
    1bba:	f640 7145 	movw	r1, #3909	; 0xf45
    1bbe:	f7fe fec7 	bl	950 <am_hal_debug_error>
    1bc2:	e6db      	b.n	197c <am_hal_iom_spi_write_nq+0xb0>
        ui32TransferSize = (ui32NumBytes <= (ui32MaxFifoSize - 4) ? ui32NumBytes :
    1bc4:	45c6      	cmp	lr, r8
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
    1bc6:	4658      	mov	r0, fp
    1bc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1bca:	4642      	mov	r2, r8
    1bcc:	4639      	mov	r1, r7
        ui32TransferSize = (ui32NumBytes <= (ui32MaxFifoSize - 4) ? ui32NumBytes :
    1bce:	4676      	mov	r6, lr
    1bd0:	bf28      	it	cs
    1bd2:	4646      	movcs	r6, r8
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
    1bd4:	f7ff f93c 	bl	e50 <am_hal_iom_workaround_word_write>
    1bd8:	e732      	b.n	1a40 <am_hal_iom_spi_write_nq+0x174>
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
    1bda:	2005      	movs	r0, #5
    1bdc:	e7e7      	b.n	1bae <am_hal_iom_spi_write_nq+0x2e2>
    1bde:	bf00      	nop
    1be0:	10001004 	.word	0x10001004
    1be4:	4002000c 	.word	0x4002000c
    1be8:	1000130c 	.word	0x1000130c
    1bec:	0000458c 	.word	0x0000458c
    1bf0:	000045c0 	.word	0x000045c0
    1bf4:	1000100c 	.word	0x1000100c
        ui32Status = AM_HAL_IOM_ERR_I2C_ARB;
    1bf8:	2007      	movs	r0, #7
    1bfa:	e7d8      	b.n	1bae <am_hal_iom_spi_write_nq+0x2e2>

00001bfc <am_hal_iom_spi_write>:
{
    1bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    1c00:	2805      	cmp	r0, #5
{
    1c02:	b08d      	sub	sp, #52	; 0x34
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    1c04:	d904      	bls.n	1c10 <am_hal_iom_spi_write+0x14>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    1c06:	2502      	movs	r5, #2
}
    1c08:	4628      	mov	r0, r5
    1c0a:	b00d      	add	sp, #52	; 0x34
    1c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    1c10:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 1cec <am_hal_iom_spi_write+0xf0>
    1c14:	f04f 0e00 	mov.w	lr, #0
    1c18:	4604      	mov	r4, r0
    1c1a:	461d      	mov	r5, r3
    1c1c:	f808 e000 	strb.w	lr, [r8, r0]
    if (ui32NumBytes == 0)
    1c20:	b933      	cbnz	r3, 1c30 <am_hal_iom_spi_write+0x34>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    1c22:	2503      	movs	r5, #3
    1c24:	f808 5000 	strb.w	r5, [r8, r0]
}
    1c28:	4628      	mov	r0, r5
    1c2a:	b00d      	add	sp, #52	; 0x34
    1c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
    1c30:	ea4f 0a40 	mov.w	sl, r0, lsl #1
    1c34:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 1cf0 <am_hal_iom_spi_write+0xf4>
    1c38:	9103      	str	r1, [sp, #12]
    1c3a:	eb0a 0700 	add.w	r7, sl, r0
    1c3e:	eb0b 09c7 	add.w	r9, fp, r7, lsl #3
    1c42:	f8d9 6014 	ldr.w	r6, [r9, #20]
    1c46:	2e00      	cmp	r6, #0
    1c48:	d045      	beq.n	1cd6 <am_hal_iom_spi_write+0xda>
    1c4a:	4617      	mov	r7, r2
    ui32Critical = am_hal_interrupt_master_disable();
    1c4c:	f7fe ff66 	bl	b1c <am_hal_interrupt_master_disable>
    if ( (g_bIomBusy[ui32Module] == false) &&
    1c50:	4b24      	ldr	r3, [pc, #144]	; (1ce4 <am_hal_iom_spi_write+0xe8>)
    1c52:	5d1a      	ldrb	r2, [r3, r4]
    ui32Critical = am_hal_interrupt_master_disable();
    1c54:	4606      	mov	r6, r0
    if ( (g_bIomBusy[ui32Module] == false) &&
    1c56:	b912      	cbnz	r2, 1c5e <am_hal_iom_spi_write+0x62>
    1c58:	f8d9 0008 	ldr.w	r0, [r9, #8]
    1c5c:	b1c8      	cbz	r0, 1c92 <am_hal_iom_spi_write+0x96>
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    1c5e:	eb0a 0104 	add.w	r1, sl, r4
    1c62:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
        sIOMTransaction.ui32ChipSelect = ui32ChipSelect;
    1c66:	9903      	ldr	r1, [sp, #12]
    1c68:	9107      	str	r1, [sp, #28]
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_WRITE;
    1c6a:	2300      	movs	r3, #0
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
    1c6c:	9509      	str	r5, [sp, #36]	; 0x24
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    1c6e:	2201      	movs	r2, #1
        sIOMTransaction.ui32Options = ui32Options;
    1c70:	9d16      	ldr	r5, [sp, #88]	; 0x58
        sIOMTransaction.ui32Module = ui32Module;
    1c72:	9406      	str	r4, [sp, #24]
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    1c74:	a905      	add	r1, sp, #20
        sIOMTransaction.pui32Data = pui32Data;
    1c76:	9708      	str	r7, [sp, #32]
        sIOMTransaction.ui32Options = ui32Options;
    1c78:	950a      	str	r5, [sp, #40]	; 0x28
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_WRITE;
    1c7a:	9305      	str	r3, [sp, #20]
        sIOMTransaction.pfnCallback = pfnCallback;
    1c7c:	930b      	str	r3, [sp, #44]	; 0x2c
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    1c7e:	f000 fc63 	bl	2548 <am_hal_queue_item_add>
    1c82:	b9f0      	cbnz	r0, 1cc2 <am_hal_iom_spi_write+0xc6>
            ui32Status = AM_HAL_IOM_ERR_RESOURCE_ERR;
    1c84:	2508      	movs	r5, #8
    am_hal_interrupt_master_set(ui32Critical);
    1c86:	4630      	mov	r0, r6
        g_iom_error_status[ui32Module] = ui32Status;
    1c88:	f808 5004 	strb.w	r5, [r8, r4]
    am_hal_interrupt_master_set(ui32Critical);
    1c8c:	f7fe ff4a 	bl	b24 <am_hal_interrupt_master_set>
    1c90:	e7ba      	b.n	1c08 <am_hal_iom_spi_write+0xc>
    while ( g_bIomBusy[ui32Module] );
    1c92:	5d1a      	ldrb	r2, [r3, r4]
    1c94:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    1c98:	2a00      	cmp	r2, #0
    1c9a:	d1fa      	bne.n	1c92 <am_hal_iom_spi_write+0x96>
    if (ui32NumBytes >= 4096)
    1c9c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    1ca0:	f808 0004 	strb.w	r0, [r8, r4]
    if (ui32NumBytes >= 4096)
    1ca4:	d301      	bcc.n	1caa <am_hal_iom_spi_write+0xae>
        return ui32Status;
    1ca6:	2503      	movs	r5, #3
    1ca8:	e7ed      	b.n	1c86 <am_hal_iom_spi_write+0x8a>
    1caa:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1cac:	9001      	str	r0, [sp, #4]
    1cae:	9300      	str	r3, [sp, #0]
    1cb0:	463a      	mov	r2, r7
    1cb2:	462b      	mov	r3, r5
    1cb4:	9903      	ldr	r1, [sp, #12]
    1cb6:	4620      	mov	r0, r4
    1cb8:	f7ff fc96 	bl	15e8 <am_hal_iom_spi_write_nb.part.6>
    if (ui32Status != AM_HAL_IOM_SUCCESS)
    1cbc:	4605      	mov	r5, r0
    1cbe:	2800      	cmp	r0, #0
    1cc0:	d1e1      	bne.n	1c86 <am_hal_iom_spi_write+0x8a>
            am_hal_iom_queue_flush(ui32Module);
    1cc2:	4f09      	ldr	r7, [pc, #36]	; (1ce8 <am_hal_iom_spi_write+0xec>)
    am_hal_interrupt_master_set(ui32Critical);
    1cc4:	4630      	mov	r0, r6
    1cc6:	f7fe ff2d 	bl	b24 <am_hal_interrupt_master_set>
            am_hal_iom_queue_flush(ui32Module);
    1cca:	4620      	mov	r0, r4
    1ccc:	683e      	ldr	r6, [r7, #0]
    1cce:	47b0      	blx	r6
            ui32Status = g_iom_error_status[ui32Module];
    1cd0:	f818 5004 	ldrb.w	r5, [r8, r4]
    1cd4:	e798      	b.n	1c08 <am_hal_iom_spi_write+0xc>
        ui32Status = am_hal_iom_spi_write_nq(ui32Module, ui32ChipSelect, pui32Data,
    1cd6:	9c16      	ldr	r4, [sp, #88]	; 0x58
    1cd8:	9400      	str	r4, [sp, #0]
    1cda:	f7ff fdf7 	bl	18cc <am_hal_iom_spi_write_nq>
    1cde:	4605      	mov	r5, r0
    1ce0:	e792      	b.n	1c08 <am_hal_iom_spi_write+0xc>
    1ce2:	bf00      	nop
    1ce4:	10001004 	.word	0x10001004
    1ce8:	10001000 	.word	0x10001000
    1cec:	1000100c 	.word	0x1000100c
    1cf0:	1000139c 	.word	0x1000139c

00001cf4 <am_hal_iom_spi_read_nq>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    1cf4:	2805      	cmp	r0, #5
    1cf6:	d901      	bls.n	1cfc <am_hal_iom_spi_read_nq+0x8>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    1cf8:	2002      	movs	r0, #2
    1cfa:	4770      	bx	lr
{
    1cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d00:	4688      	mov	r8, r1
    1d02:	49b9      	ldr	r1, [pc, #740]	; (1fe8 <am_hal_iom_spi_read_nq+0x2f4>)
    1d04:	b085      	sub	sp, #20
    1d06:	4604      	mov	r4, r0
    1d08:	4617      	mov	r7, r2
    1d0a:	461e      	mov	r6, r3
    while ( g_bIomBusy[ui32Module] );
    1d0c:	5d0b      	ldrb	r3, [r1, r4]
    1d0e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    1d12:	2b00      	cmp	r3, #0
    1d14:	d1fa      	bne.n	1d0c <am_hal_iom_spi_read_nq+0x18>
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    1d16:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 1ff8 <am_hal_iom_spi_read_nq+0x304>
    if (ui32NumBytes == 0)
    1d1a:	1e70      	subs	r0, r6, #1
    1d1c:	f640 75fe 	movw	r5, #4094	; 0xffe
    1d20:	42a8      	cmp	r0, r5
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    1d22:	f809 2004 	strb.w	r2, [r9, r4]
    if (ui32NumBytes == 0)
    1d26:	d905      	bls.n	1d34 <am_hal_iom_spi_read_nq+0x40>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    1d28:	2003      	movs	r0, #3
    1d2a:	f809 0004 	strb.w	r0, [r9, r4]
}
    1d2e:	b005      	add	sp, #20
    1d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    1d34:	f504 21a0 	add.w	r1, r4, #327680	; 0x50000
    1d38:	3104      	adds	r1, #4
    1d3a:	030b      	lsls	r3, r1, #12
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    1d3c:	f240 7bff 	movw	fp, #2047	; 0x7ff
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    1d40:	f8d3 5200 	ldr.w	r5, [r3, #512]	; 0x200
    1d44:	9300      	str	r3, [sp, #0]
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
    1d46:	2c04      	cmp	r4, #4
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    1d48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    1d4c:	4618      	mov	r0, r3
    1d4e:	9501      	str	r5, [sp, #4]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    1d50:	f8c3 b208 	str.w	fp, [r3, #520]	; 0x208
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
    1d54:	f000 8152 	beq.w	1ffc <am_hal_iom_spi_read_nq+0x308>
    1d58:	4aa4      	ldr	r2, [pc, #656]	; (1fec <am_hal_iom_spi_read_nq+0x2f8>)
    1d5a:	9202      	str	r2, [sp, #8]
    1d5c:	f503 7a01 	add.w	sl, r3, #516	; 0x204
    1d60:	461d      	mov	r5, r3
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    1d62:	ea4f 4108 	mov.w	r1, r8, lsl #16
    1d66:	f401 20e0 	and.w	r0, r1, #458752	; 0x70000
    1d6a:	f040 4200 	orr.w	r2, r0, #2147483648	; 0x80000000
    ui32Command |= (ui32NumBytes & 0xFF);
    1d6e:	b2f3      	uxtb	r3, r6
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    1d70:	4313      	orrs	r3, r2
    ui32Command |= ui32Options & 0x5C00FF00;
    1d72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    1d74:	03f1      	lsls	r1, r6, #15
    1d76:	f001 60f0 	and.w	r0, r1, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
    1d7a:	f022 4123 	bic.w	r1, r2, #2734686208	; 0xa3000000
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    1d7e:	4303      	orrs	r3, r0
    ui32Command |= ui32Options & 0x5C00FF00;
    1d80:	f001 20ff 	and.w	r0, r1, #4278255360	; 0xff00ff00
    1d84:	4303      	orrs	r3, r0
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    1d86:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    1d8a:	f505 7b80 	add.w	fp, r5, #256	; 0x100
    uint32_t bCmdCmp = false;
    1d8e:	2300      	movs	r3, #0
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    1d90:	f8db 2000 	ldr.w	r2, [fp]
    1d94:	fa5f f882 	uxtb.w	r8, r2
        if ( ui32BytesInFifo >= ui32NumBytes )
    1d98:	4546      	cmp	r6, r8
    1d9a:	d910      	bls.n	1dbe <am_hal_iom_spi_read_nq+0xca>
        else if ( ui32BytesInFifo >= 4 )
    1d9c:	f1b8 0f03 	cmp.w	r8, #3
    1da0:	f200 809f 	bhi.w	1ee2 <am_hal_iom_spi_read_nq+0x1ee>
        if ( bCmdCmp == true )
    1da4:	2b00      	cmp	r3, #0
    1da6:	f040 80ff 	bne.w	1fa8 <am_hal_iom_spi_read_nq+0x2b4>
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    1daa:	f8da 3000 	ldr.w	r3, [sl]
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    1dae:	f8db 2000 	ldr.w	r2, [fp]
    1db2:	fa5f f882 	uxtb.w	r8, r2
        if ( ui32BytesInFifo >= ui32NumBytes )
    1db6:	4546      	cmp	r6, r8
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    1db8:	f003 0301 	and.w	r3, r3, #1
        if ( ui32BytesInFifo >= ui32NumBytes )
    1dbc:	d8ee      	bhi.n	1d9c <am_hal_iom_spi_read_nq+0xa8>
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    1dbe:	f8d5 211c 	ldr.w	r2, [r5, #284]	; 0x11c
    1dc2:	9500      	str	r5, [sp, #0]
    1dc4:	0710      	lsls	r0, r2, #28
    1dc6:	f140 80f1 	bpl.w	1fac <am_hal_iom_spi_read_nq+0x2b8>
    1dca:	f006 0003 	and.w	r0, r6, #3
    for ( i = 0; i < ui32NumWords; i++ )
    1dce:	08b6      	lsrs	r6, r6, #2
    1dd0:	d05a      	beq.n	1e88 <am_hal_iom_spi_read_nq+0x194>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1dd2:	9d00      	ldr	r5, [sp, #0]
    1dd4:	463a      	mov	r2, r7
    1dd6:	6829      	ldr	r1, [r5, #0]
    1dd8:	f842 1b04 	str.w	r1, [r2], #4
    1ddc:	eb07 0b86 	add.w	fp, r7, r6, lsl #2
    1de0:	ebab 0807 	sub.w	r8, fp, r7
    1de4:	f1a8 0504 	sub.w	r5, r8, #4
    for ( i = 0; i < ui32NumWords; i++ )
    1de8:	455a      	cmp	r2, fp
    1dea:	f3c5 0182 	ubfx	r1, r5, #2, #3
    1dee:	d04b      	beq.n	1e88 <am_hal_iom_spi_read_nq+0x194>
    1df0:	b349      	cbz	r1, 1e46 <am_hal_iom_spi_read_nq+0x152>
    1df2:	2901      	cmp	r1, #1
    1df4:	d021      	beq.n	1e3a <am_hal_iom_spi_read_nq+0x146>
    1df6:	2902      	cmp	r1, #2
    1df8:	d01b      	beq.n	1e32 <am_hal_iom_spi_read_nq+0x13e>
    1dfa:	2903      	cmp	r1, #3
    1dfc:	d015      	beq.n	1e2a <am_hal_iom_spi_read_nq+0x136>
    1dfe:	2904      	cmp	r1, #4
    1e00:	d00f      	beq.n	1e22 <am_hal_iom_spi_read_nq+0x12e>
    1e02:	2905      	cmp	r1, #5
    1e04:	d009      	beq.n	1e1a <am_hal_iom_spi_read_nq+0x126>
    1e06:	2906      	cmp	r1, #6
    1e08:	d003      	beq.n	1e12 <am_hal_iom_spi_read_nq+0x11e>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1e0a:	9d00      	ldr	r5, [sp, #0]
    1e0c:	6829      	ldr	r1, [r5, #0]
    1e0e:	f842 1b04 	str.w	r1, [r2], #4
    1e12:	9d00      	ldr	r5, [sp, #0]
    1e14:	6829      	ldr	r1, [r5, #0]
    1e16:	f842 1b04 	str.w	r1, [r2], #4
    1e1a:	9d00      	ldr	r5, [sp, #0]
    1e1c:	6829      	ldr	r1, [r5, #0]
    1e1e:	f842 1b04 	str.w	r1, [r2], #4
    1e22:	9d00      	ldr	r5, [sp, #0]
    1e24:	6829      	ldr	r1, [r5, #0]
    1e26:	f842 1b04 	str.w	r1, [r2], #4
    1e2a:	9d00      	ldr	r5, [sp, #0]
    1e2c:	6829      	ldr	r1, [r5, #0]
    1e2e:	f842 1b04 	str.w	r1, [r2], #4
    1e32:	9d00      	ldr	r5, [sp, #0]
    1e34:	6829      	ldr	r1, [r5, #0]
    1e36:	f842 1b04 	str.w	r1, [r2], #4
    1e3a:	9d00      	ldr	r5, [sp, #0]
    1e3c:	6829      	ldr	r1, [r5, #0]
    1e3e:	f842 1b04 	str.w	r1, [r2], #4
    for ( i = 0; i < ui32NumWords; i++ )
    1e42:	455a      	cmp	r2, fp
    1e44:	d020      	beq.n	1e88 <am_hal_iom_spi_read_nq+0x194>
    1e46:	9d00      	ldr	r5, [sp, #0]
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1e48:	f8d5 c000 	ldr.w	ip, [r5]
    1e4c:	4696      	mov	lr, r2
    1e4e:	3220      	adds	r2, #32
    1e50:	f84e cb04 	str.w	ip, [lr], #4
    1e54:	f8d5 8000 	ldr.w	r8, [r5]
    1e58:	f842 8c1c 	str.w	r8, [r2, #-28]
    1e5c:	f8d5 c000 	ldr.w	ip, [r5]
    1e60:	f8ce c004 	str.w	ip, [lr, #4]
    1e64:	6829      	ldr	r1, [r5, #0]
    1e66:	f842 1c14 	str.w	r1, [r2, #-20]
    1e6a:	6829      	ldr	r1, [r5, #0]
    1e6c:	f842 1c10 	str.w	r1, [r2, #-16]
    1e70:	6829      	ldr	r1, [r5, #0]
    1e72:	f842 1c0c 	str.w	r1, [r2, #-12]
    1e76:	6829      	ldr	r1, [r5, #0]
    1e78:	f842 1c08 	str.w	r1, [r2, #-8]
    1e7c:	6829      	ldr	r1, [r5, #0]
    1e7e:	f842 1c04 	str.w	r1, [r2, #-4]
    for ( i = 0; i < ui32NumWords; i++ )
    1e82:	455a      	cmp	r2, fp
    1e84:	d1e0      	bne.n	1e48 <am_hal_iom_spi_read_nq+0x154>
    1e86:	9500      	str	r5, [sp, #0]
    if ( ui32Leftovers )
    1e88:	b188      	cbz	r0, 1eae <am_hal_iom_spi_read_nq+0x1ba>
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1e8a:	9a00      	ldr	r2, [sp, #0]
        for ( j = 0; j < ui32Leftovers; j++ )
    1e8c:	2801      	cmp	r0, #1
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1e8e:	6815      	ldr	r5, [r2, #0]
            pui8Data[j] = sTempBuffer.bytes[j];
    1e90:	f807 5026 	strb.w	r5, [r7, r6, lsl #2]
        pui8Data = (uint8_t *) (&pui32Data[i]);
    1e94:	ea4f 0686 	mov.w	r6, r6, lsl #2
        for ( j = 0; j < ui32Leftovers; j++ )
    1e98:	d009      	beq.n	1eae <am_hal_iom_spi_read_nq+0x1ba>
            pui8Data[j] = sTempBuffer.bytes[j];
    1e9a:	4437      	add	r7, r6
        for ( j = 0; j < ui32Leftovers; j++ )
    1e9c:	2803      	cmp	r0, #3
            pui8Data[j] = sTempBuffer.bytes[j];
    1e9e:	f3c5 2107 	ubfx	r1, r5, #8, #8
    1ea2:	bf08      	it	eq
    1ea4:	f3c5 4507 	ubfxeq	r5, r5, #16, #8
    1ea8:	7079      	strb	r1, [r7, #1]
    1eaa:	bf08      	it	eq
    1eac:	70bd      	strbeq	r5, [r7, #2]
        if ( bCmdCmp == true )
    1eae:	b90b      	cbnz	r3, 1eb4 <am_hal_iom_spi_read_nq+0x1c0>
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    1eb0:	f8da 3000 	ldr.w	r3, [sl]
    waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    1eb4:	9f02      	ldr	r7, [sp, #8]
    1eb6:	2301      	movs	r3, #1
    1eb8:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
    1ebc:	461a      	mov	r2, r3
    1ebe:	4651      	mov	r1, sl
    1ec0:	f7fe fd4c 	bl	95c <am_hal_flash_delay_status_change>
    if (waitStatus != 1)
    1ec4:	2801      	cmp	r0, #1
    1ec6:	f000 80a8 	beq.w	201a <am_hal_iom_spi_read_nq+0x326>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    1eca:	2001      	movs	r0, #1
    1ecc:	f809 0004 	strb.w	r0, [r9, r4]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    1ed0:	9a00      	ldr	r2, [sp, #0]
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    1ed2:	9d01      	ldr	r5, [sp, #4]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    1ed4:	f240 74ff 	movw	r4, #2047	; 0x7ff
    1ed8:	f8c2 4208 	str.w	r4, [r2, #520]	; 0x208
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    1edc:	f8c2 5200 	str.w	r5, [r2, #512]	; 0x200
    1ee0:	e725      	b.n	1d2e <am_hal_iom_spi_read_nq+0x3a>
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    1ee2:	f8d5 111c 	ldr.w	r1, [r5, #284]	; 0x11c
            am_hal_iom_fifo_read(ui32Module, pui32Data, ui32BytesInFifo & ~0x3);
    1ee6:	f002 00fc 	and.w	r0, r2, #252	; 0xfc
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    1eea:	0709      	lsls	r1, r1, #28
            am_hal_iom_fifo_read(ui32Module, pui32Data, ui32BytesInFifo & ~0x3);
    1eec:	9000      	str	r0, [sp, #0]
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    1eee:	d56c      	bpl.n	1fca <am_hal_iom_spi_read_nq+0x2d6>
    for ( i = 0; i < ui32NumWords; i++ )
    1ef0:	9a00      	ldr	r2, [sp, #0]
    1ef2:	0890      	lsrs	r0, r2, #2
    1ef4:	2a00      	cmp	r2, #0
    1ef6:	d04b      	beq.n	1f90 <am_hal_iom_spi_read_nq+0x29c>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1ef8:	463a      	mov	r2, r7
    1efa:	6829      	ldr	r1, [r5, #0]
    1efc:	f842 1b04 	str.w	r1, [r2], #4
    1f00:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    1f04:	1bc1      	subs	r1, r0, r7
    1f06:	f1a1 0c04 	sub.w	ip, r1, #4
    for ( i = 0; i < ui32NumWords; i++ )
    1f0a:	4290      	cmp	r0, r2
    1f0c:	f3cc 0182 	ubfx	r1, ip, #2, #3
    1f10:	d03d      	beq.n	1f8e <am_hal_iom_spi_read_nq+0x29a>
    1f12:	b311      	cbz	r1, 1f5a <am_hal_iom_spi_read_nq+0x266>
    1f14:	2901      	cmp	r1, #1
    1f16:	d01b      	beq.n	1f50 <am_hal_iom_spi_read_nq+0x25c>
    1f18:	2902      	cmp	r1, #2
    1f1a:	d016      	beq.n	1f4a <am_hal_iom_spi_read_nq+0x256>
    1f1c:	2903      	cmp	r1, #3
    1f1e:	d011      	beq.n	1f44 <am_hal_iom_spi_read_nq+0x250>
    1f20:	2904      	cmp	r1, #4
    1f22:	d00c      	beq.n	1f3e <am_hal_iom_spi_read_nq+0x24a>
    1f24:	2905      	cmp	r1, #5
    1f26:	d007      	beq.n	1f38 <am_hal_iom_spi_read_nq+0x244>
    1f28:	2906      	cmp	r1, #6
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1f2a:	bf1c      	itt	ne
    1f2c:	6829      	ldrne	r1, [r5, #0]
    1f2e:	f842 1b04 	strne.w	r1, [r2], #4
    1f32:	6829      	ldr	r1, [r5, #0]
    1f34:	f842 1b04 	str.w	r1, [r2], #4
    1f38:	6829      	ldr	r1, [r5, #0]
    1f3a:	f842 1b04 	str.w	r1, [r2], #4
    1f3e:	6829      	ldr	r1, [r5, #0]
    1f40:	f842 1b04 	str.w	r1, [r2], #4
    1f44:	6829      	ldr	r1, [r5, #0]
    1f46:	f842 1b04 	str.w	r1, [r2], #4
    1f4a:	6829      	ldr	r1, [r5, #0]
    1f4c:	f842 1b04 	str.w	r1, [r2], #4
    1f50:	6829      	ldr	r1, [r5, #0]
    1f52:	f842 1b04 	str.w	r1, [r2], #4
    for ( i = 0; i < ui32NumWords; i++ )
    1f56:	4290      	cmp	r0, r2
    1f58:	d019      	beq.n	1f8e <am_hal_iom_spi_read_nq+0x29a>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1f5a:	4694      	mov	ip, r2
    1f5c:	f8d5 e000 	ldr.w	lr, [r5]
    1f60:	f84c eb04 	str.w	lr, [ip], #4
    1f64:	f8d5 e000 	ldr.w	lr, [r5]
    1f68:	f8c2 e004 	str.w	lr, [r2, #4]
    1f6c:	f8d5 e000 	ldr.w	lr, [r5]
    1f70:	f8cc e004 	str.w	lr, [ip, #4]
    1f74:	6829      	ldr	r1, [r5, #0]
    1f76:	60d1      	str	r1, [r2, #12]
    1f78:	6829      	ldr	r1, [r5, #0]
    1f7a:	6111      	str	r1, [r2, #16]
    1f7c:	6829      	ldr	r1, [r5, #0]
    1f7e:	6151      	str	r1, [r2, #20]
    1f80:	6829      	ldr	r1, [r5, #0]
    1f82:	6191      	str	r1, [r2, #24]
    1f84:	6829      	ldr	r1, [r5, #0]
    1f86:	61d1      	str	r1, [r2, #28]
    1f88:	3220      	adds	r2, #32
    for ( i = 0; i < ui32NumWords; i++ )
    1f8a:	4290      	cmp	r0, r2
    1f8c:	d1e5      	bne.n	1f5a <am_hal_iom_spi_read_nq+0x266>
    1f8e:	9a00      	ldr	r2, [sp, #0]
            pui32Data += ui32BytesInFifo >> 2;
    1f90:	f008 00fc 	and.w	r0, r8, #252	; 0xfc
    1f94:	4407      	add	r7, r0
            ui32NumBytes -= ui32BytesInFifo & ~0x3;
    1f96:	1ab6      	subs	r6, r6, r2
        if ( bCmdCmp == true )
    1f98:	b933      	cbnz	r3, 1fa8 <am_hal_iom_spi_read_nq+0x2b4>
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    1f9a:	f8da 3000 	ldr.w	r3, [sl]
    1f9e:	f003 0301 	and.w	r3, r3, #1
    while ( ui32NumBytes )
    1fa2:	2e00      	cmp	r6, #0
    1fa4:	f47f aef4 	bne.w	1d90 <am_hal_iom_spi_read_nq+0x9c>
    1fa8:	9500      	str	r5, [sp, #0]
    1faa:	e783      	b.n	1eb4 <am_hal_iom_spi_read_nq+0x1c0>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    1fac:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    1fb0:	b2c1      	uxtb	r1, r0
    1fb2:	42b1      	cmp	r1, r6
    1fb4:	f4bf af09 	bcs.w	1dca <am_hal_iom_spi_read_nq+0xd6>
    1fb8:	4a0d      	ldr	r2, [pc, #52]	; (1ff0 <am_hal_iom_spi_read_nq+0x2fc>)
    1fba:	480e      	ldr	r0, [pc, #56]	; (1ff4 <am_hal_iom_spi_read_nq+0x300>)
    1fbc:	9303      	str	r3, [sp, #12]
    1fbe:	f44f 6178 	mov.w	r1, #3968	; 0xf80
    1fc2:	f7fe fcc5 	bl	950 <am_hal_debug_error>
    1fc6:	9b03      	ldr	r3, [sp, #12]
    1fc8:	e6ff      	b.n	1dca <am_hal_iom_spi_read_nq+0xd6>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    1fca:	f8db 2000 	ldr.w	r2, [fp]
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    1fce:	b2d1      	uxtb	r1, r2
    1fd0:	4288      	cmp	r0, r1
    1fd2:	d98d      	bls.n	1ef0 <am_hal_iom_spi_read_nq+0x1fc>
    1fd4:	4a06      	ldr	r2, [pc, #24]	; (1ff0 <am_hal_iom_spi_read_nq+0x2fc>)
    1fd6:	4807      	ldr	r0, [pc, #28]	; (1ff4 <am_hal_iom_spi_read_nq+0x300>)
    1fd8:	9303      	str	r3, [sp, #12]
    1fda:	f44f 6178 	mov.w	r1, #3968	; 0xf80
    1fde:	f7fe fcb7 	bl	950 <am_hal_debug_error>
    1fe2:	9b03      	ldr	r3, [sp, #12]
    1fe4:	e784      	b.n	1ef0 <am_hal_iom_spi_read_nq+0x1fc>
    1fe6:	bf00      	nop
    1fe8:	10001004 	.word	0x10001004
    1fec:	1000130c 	.word	0x1000130c
    1ff0:	000045d4 	.word	0x000045d4
    1ff4:	000045c0 	.word	0x000045c0
    1ff8:	1000100c 	.word	0x1000100c
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
    1ffc:	990e      	ldr	r1, [sp, #56]	; 0x38
    1ffe:	f011 4280 	ands.w	r2, r1, #1073741824	; 0x40000000
    2002:	d104      	bne.n	200e <am_hal_iom_spi_read_nq+0x31a>
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B )
    2004:	4b24      	ldr	r3, [pc, #144]	; (2098 <am_hal_iom_spi_read_nq+0x3a4>)
    2006:	681d      	ldr	r5, [r3, #0]
    2008:	b2e9      	uxtb	r1, r5
    200a:	2920      	cmp	r1, #32
    200c:	d017      	beq.n	203e <am_hal_iom_spi_read_nq+0x34a>
    200e:	f500 7a01 	add.w	sl, r0, #516	; 0x204
    2012:	4822      	ldr	r0, [pc, #136]	; (209c <am_hal_iom_spi_read_nq+0x3a8>)
    2014:	9002      	str	r0, [sp, #8]
    2016:	9d00      	ldr	r5, [sp, #0]
    2018:	e6a3      	b.n	1d62 <am_hal_iom_spi_read_nq+0x6e>
        return AM_REGn(IOMSTR, ui32Module, INTSTAT);
    201a:	f8da 3000 	ldr.w	r3, [sl]
    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    201e:	f013 0fcc 	tst.w	r3, #204	; 0xcc
    2022:	d10a      	bne.n	203a <am_hal_iom_spi_read_nq+0x346>
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
    2024:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    2028:	d127      	bne.n	207a <am_hal_iom_spi_read_nq+0x386>
    am_hal_iom_status_e ui32Status = AM_HAL_IOM_SUCCESS;
    202a:	f013 0f10 	tst.w	r3, #16
    202e:	bf14      	ite	ne
    2030:	2006      	movne	r0, #6
    2032:	2000      	moveq	r0, #0
        g_iom_error_status[ui32Module] = ui32Status = internal_iom_get_int_err(ui32Module, 0);
    2034:	f809 0004 	strb.w	r0, [r9, r4]
    2038:	e74a      	b.n	1ed0 <am_hal_iom_spi_read_nq+0x1dc>
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
    203a:	2005      	movs	r0, #5
    203c:	e7fa      	b.n	2034 <am_hal_iom_spi_read_nq+0x340>
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data, 0,
    203e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    2040:	4d16      	ldr	r5, [pc, #88]	; (209c <am_hal_iom_spi_read_nq+0x3a8>)
    2042:	9502      	str	r5, [sp, #8]
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data, 0,
    2044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2048:	4639      	mov	r1, r7
    204a:	4640      	mov	r0, r8
    204c:	f7fe ff00 	bl	e50 <am_hal_iom_workaround_word_write>
        waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    2050:	9a00      	ldr	r2, [sp, #0]
    2052:	6928      	ldr	r0, [r5, #16]
    2054:	f502 7a01 	add.w	sl, r2, #516	; 0x204
    2058:	2301      	movs	r3, #1
    205a:	4651      	mov	r1, sl
    205c:	461a      	mov	r2, r3
    205e:	f7fe fc7d 	bl	95c <am_hal_flash_delay_status_change>
        if (waitStatus != 1)
    2062:	2801      	cmp	r0, #1
    2064:	d00b      	beq.n	207e <am_hal_iom_spi_read_nq+0x38a>
            AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    2066:	9e00      	ldr	r6, [sp, #0]
            AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    2068:	9901      	ldr	r1, [sp, #4]
            AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    206a:	f8c6 b208 	str.w	fp, [r6, #520]	; 0x208
            g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    206e:	2001      	movs	r0, #1
    2070:	f889 0004 	strb.w	r0, [r9, #4]
            AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    2074:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    2078:	e659      	b.n	1d2e <am_hal_iom_spi_read_nq+0x3a>
        ui32Status = AM_HAL_IOM_ERR_I2C_ARB;
    207a:	2007      	movs	r0, #7
    207c:	e7da      	b.n	2034 <am_hal_iom_spi_read_nq+0x340>
        AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    207e:	9d00      	ldr	r5, [sp, #0]
        ui32Options |= AM_HAL_IOM_RAW;
    2080:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    2082:	f8d5 1208 	ldr.w	r1, [r5, #520]	; 0x208
        ui32Options |= AM_HAL_IOM_RAW;
    2086:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
        AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    208a:	f041 0001 	orr.w	r0, r1, #1
        ui32Options |= AM_HAL_IOM_RAW;
    208e:	920e      	str	r2, [sp, #56]	; 0x38
        AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    2090:	f8c5 0208 	str.w	r0, [r5, #520]	; 0x208
    2094:	e665      	b.n	1d62 <am_hal_iom_spi_read_nq+0x6e>
    2096:	bf00      	nop
    2098:	4002000c 	.word	0x4002000c
    209c:	1000130c 	.word	0x1000130c

000020a0 <am_hal_iom_spi_read>:
{
    20a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    20a4:	2805      	cmp	r0, #5
{
    20a6:	b08d      	sub	sp, #52	; 0x34
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    20a8:	d904      	bls.n	20b4 <am_hal_iom_spi_read+0x14>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    20aa:	2602      	movs	r6, #2
}
    20ac:	4630      	mov	r0, r6
    20ae:	b00d      	add	sp, #52	; 0x34
    20b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    20b4:	f500 27a0 	add.w	r7, r0, #327680	; 0x50000
    20b8:	3704      	adds	r7, #4
    20ba:	033d      	lsls	r5, r7, #12
    20bc:	f240 7cff 	movw	ip, #2047	; 0x7ff
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    20c0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 21a0 <am_hal_iom_spi_read+0x100>
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    20c4:	f8c5 c208 	str.w	ip, [r5, #520]	; 0x208
    if (ui32NumBytes == 0)
    20c8:	f640 79fe 	movw	r9, #4094	; 0xffe
    20cc:	1e5d      	subs	r5, r3, #1
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    20ce:	2600      	movs	r6, #0
    if (ui32NumBytes == 0)
    20d0:	454d      	cmp	r5, r9
    20d2:	4604      	mov	r4, r0
    20d4:	469e      	mov	lr, r3
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    20d6:	f808 6000 	strb.w	r6, [r8, r0]
    if (ui32NumBytes == 0)
    20da:	d906      	bls.n	20ea <am_hal_iom_spi_read+0x4a>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    20dc:	2603      	movs	r6, #3
    20de:	f808 6000 	strb.w	r6, [r8, r0]
}
    20e2:	4630      	mov	r0, r6
    20e4:	b00d      	add	sp, #52	; 0x34
    20e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
    20ea:	ea4f 0a40 	mov.w	sl, r0, lsl #1
    20ee:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 21a4 <am_hal_iom_spi_read+0x104>
    20f2:	9202      	str	r2, [sp, #8]
    20f4:	eb0a 0500 	add.w	r5, sl, r0
    20f8:	eb0b 09c5 	add.w	r9, fp, r5, lsl #3
    20fc:	461f      	mov	r7, r3
    20fe:	f8d9 6014 	ldr.w	r6, [r9, #20]
    2102:	2e00      	cmp	r6, #0
    2104:	d042      	beq.n	218c <am_hal_iom_spi_read+0xec>
    2106:	460d      	mov	r5, r1
    ui32Critical = am_hal_interrupt_master_disable();
    2108:	f7fe fd08 	bl	b1c <am_hal_interrupt_master_disable>
    if ( (g_bIomBusy[ui32Module] == false) &&
    210c:	4b22      	ldr	r3, [pc, #136]	; (2198 <am_hal_iom_spi_read+0xf8>)
    ui32Critical = am_hal_interrupt_master_disable();
    210e:	9003      	str	r0, [sp, #12]
    if ( (g_bIomBusy[ui32Module] == false) &&
    2110:	5d1a      	ldrb	r2, [r3, r4]
    2112:	b912      	cbnz	r2, 211a <am_hal_iom_spi_read+0x7a>
    2114:	f8d9 0008 	ldr.w	r0, [r9, #8]
    2118:	b1d0      	cbz	r0, 2150 <am_hal_iom_spi_read+0xb0>
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    211a:	eb0a 0104 	add.w	r1, sl, r4
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_READ;
    211e:	2301      	movs	r3, #1
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    2120:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
        sIOMTransaction.ui32ChipSelect = ui32ChipSelect;
    2124:	9507      	str	r5, [sp, #28]
        sIOMTransaction.pfnCallback = pfnCallback;
    2126:	2600      	movs	r6, #0
        sIOMTransaction.pui32Data = pui32Data;
    2128:	9d02      	ldr	r5, [sp, #8]
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
    212a:	9709      	str	r7, [sp, #36]	; 0x24
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    212c:	461a      	mov	r2, r3
        sIOMTransaction.ui32Options = ui32Options;
    212e:	9f16      	ldr	r7, [sp, #88]	; 0x58
        sIOMTransaction.ui32Module = ui32Module;
    2130:	9406      	str	r4, [sp, #24]
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    2132:	a905      	add	r1, sp, #20
        sIOMTransaction.pui32Data = pui32Data;
    2134:	9508      	str	r5, [sp, #32]
        sIOMTransaction.ui32Options = ui32Options;
    2136:	970a      	str	r7, [sp, #40]	; 0x28
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_READ;
    2138:	9305      	str	r3, [sp, #20]
        sIOMTransaction.pfnCallback = pfnCallback;
    213a:	960b      	str	r6, [sp, #44]	; 0x2c
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    213c:	f000 fa04 	bl	2548 <am_hal_queue_item_add>
    2140:	b9d0      	cbnz	r0, 2178 <am_hal_iom_spi_read+0xd8>
            ui32Status = AM_HAL_IOM_ERR_RESOURCE_ERR;
    2142:	2608      	movs	r6, #8
    am_hal_interrupt_master_set(ui32Critical);
    2144:	9803      	ldr	r0, [sp, #12]
        g_iom_error_status[ui32Module] = ui32Status;
    2146:	f808 6004 	strb.w	r6, [r8, r4]
    am_hal_interrupt_master_set(ui32Critical);
    214a:	f7fe fceb 	bl	b24 <am_hal_interrupt_master_set>
    214e:	e7ad      	b.n	20ac <am_hal_iom_spi_read+0xc>
    while ( g_bIomBusy[ui32Module] );
    2150:	5d1a      	ldrb	r2, [r3, r4]
    2152:	f002 0eff 	and.w	lr, r2, #255	; 0xff
    2156:	2a00      	cmp	r2, #0
    2158:	d1fa      	bne.n	2150 <am_hal_iom_spi_read+0xb0>
    215a:	9816      	ldr	r0, [sp, #88]	; 0x58
    215c:	9000      	str	r0, [sp, #0]
    215e:	f8cd e004 	str.w	lr, [sp, #4]
    2162:	463b      	mov	r3, r7
    2164:	9a02      	ldr	r2, [sp, #8]
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    2166:	f808 e004 	strb.w	lr, [r8, r4]
    216a:	4629      	mov	r1, r5
    216c:	4620      	mov	r0, r4
    216e:	f7ff fb27 	bl	17c0 <am_hal_iom_spi_read_nb.part.7>
    if (ui32Status != AM_HAL_IOM_SUCCESS)
    2172:	4606      	mov	r6, r0
    2174:	2800      	cmp	r0, #0
    2176:	d1e5      	bne.n	2144 <am_hal_iom_spi_read+0xa4>
    am_hal_interrupt_master_set(ui32Critical);
    2178:	9803      	ldr	r0, [sp, #12]
    217a:	f7fe fcd3 	bl	b24 <am_hal_interrupt_master_set>
            am_hal_iom_queue_flush(ui32Module);
    217e:	4907      	ldr	r1, [pc, #28]	; (219c <am_hal_iom_spi_read+0xfc>)
    2180:	4620      	mov	r0, r4
    2182:	680b      	ldr	r3, [r1, #0]
    2184:	4798      	blx	r3
            ui32Status = g_iom_error_status[ui32Module];
    2186:	f818 6004 	ldrb.w	r6, [r8, r4]
    218a:	e78f      	b.n	20ac <am_hal_iom_spi_read+0xc>
        ui32Status = am_hal_iom_spi_read_nq(ui32Module, ui32ChipSelect, pui32Data,
    218c:	9c16      	ldr	r4, [sp, #88]	; 0x58
    218e:	9400      	str	r4, [sp, #0]
    2190:	f7ff fdb0 	bl	1cf4 <am_hal_iom_spi_read_nq>
    2194:	4606      	mov	r6, r0
    2196:	e789      	b.n	20ac <am_hal_iom_spi_read+0xc>
    2198:	10001004 	.word	0x10001004
    219c:	10001000 	.word	0x10001000
    21a0:	1000100c 	.word	0x1000100c
    21a4:	1000139c 	.word	0x1000139c

000021a8 <am_hal_iom_int_clear>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    21a8:	2805      	cmp	r0, #5
    21aa:	d805      	bhi.n	21b8 <am_hal_iom_int_clear+0x10>
    AM_REGn(IOMSTR, ui32Module, INTCLR) = ui32Interrupt;
    21ac:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
    21b0:	3004      	adds	r0, #4
    21b2:	0302      	lsls	r2, r0, #12
    21b4:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    21b8:	4770      	bx	lr
    21ba:	bf00      	nop

000021bc <am_hal_pwrctrl_periph_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    21bc:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    21be:	4604      	mov	r4, r0
{
    21c0:	b082      	sub	sp, #8
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    21c2:	b1b8      	cbz	r0, 21f4 <am_hal_pwrctrl_periph_enable+0x38>
    21c4:	1e43      	subs	r3, r0, #1
    21c6:	4203      	tst	r3, r0
    21c8:	d114      	bne.n	21f4 <am_hal_pwrctrl_periph_enable+0x38>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    21ca:	f7fe fca7 	bl	b1c <am_hal_interrupt_master_disable>

    //
    // Enable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    21ce:	4a18      	ldr	r2, [pc, #96]	; (2230 <am_hal_pwrctrl_periph_enable+0x74>)
    AM_CRITICAL_BEGIN_ASM
    21d0:	9001      	str	r0, [sp, #4]
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    21d2:	6810      	ldr	r0, [r2, #0]
    21d4:	4320      	orrs	r0, r4
    21d6:	6010      	str	r0, [r2, #0]

    //
    // End Critical Section.
    //
    AM_CRITICAL_END_ASM
    21d8:	9801      	ldr	r0, [sp, #4]
    21da:	f7fe fca3 	bl	b24 <am_hal_interrupt_master_set>

    //
    // Wait for the power to stablize.  Using a simple delay loop is more
    // power efficient than a polling loop.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);
    21de:	200e      	movs	r0, #14
    21e0:	f7fe fbb8 	bl	954 <am_hal_flash_delay>

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    21e4:	f014 0f0e 	tst.w	r4, #14
    21e8:	d10a      	bne.n	2200 <am_hal_pwrctrl_periph_enable+0x44>
    21ea:	f014 0f70 	tst.w	r4, #112	; 0x70
    21ee:	d00e      	beq.n	220e <am_hal_pwrctrl_periph_enable+0x52>
    21f0:	2408      	movs	r4, #8
    21f2:	e006      	b.n	2202 <am_hal_pwrctrl_periph_enable+0x46>
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    21f4:	4a0f      	ldr	r2, [pc, #60]	; (2234 <am_hal_pwrctrl_periph_enable+0x78>)
    21f6:	4810      	ldr	r0, [pc, #64]	; (2238 <am_hal_pwrctrl_periph_enable+0x7c>)
    21f8:	2160      	movs	r1, #96	; 0x60
    21fa:	f7fe fba9 	bl	950 <am_hal_debug_error>
    21fe:	e7e4      	b.n	21ca <am_hal_pwrctrl_periph_enable+0xe>
    POLL_PWRSTATUS(ui32Peripheral);
    2200:	2404      	movs	r4, #4
    2202:	4a0e      	ldr	r2, [pc, #56]	; (223c <am_hal_pwrctrl_periph_enable+0x80>)
    2204:	6813      	ldr	r3, [r2, #0]
    2206:	421c      	tst	r4, r3
    2208:	d0fc      	beq.n	2204 <am_hal_pwrctrl_periph_enable+0x48>
}
    220a:	b002      	add	sp, #8
    220c:	bd10      	pop	{r4, pc}
    POLL_PWRSTATUS(ui32Peripheral);
    220e:	f240 1181 	movw	r1, #385	; 0x181
    2212:	420c      	tst	r4, r1
    2214:	d108      	bne.n	2228 <am_hal_pwrctrl_periph_enable+0x6c>
    2216:	05a3      	lsls	r3, r4, #22
    2218:	d408      	bmi.n	222c <am_hal_pwrctrl_periph_enable+0x70>
    221a:	f414 6f80 	tst.w	r4, #1024	; 0x400
    221e:	bf14      	ite	ne
    2220:	2410      	movne	r4, #16
    2222:	f04f 34ff 	moveq.w	r4, #4294967295
    2226:	e7ec      	b.n	2202 <am_hal_pwrctrl_periph_enable+0x46>
    2228:	2402      	movs	r4, #2
    222a:	e7ea      	b.n	2202 <am_hal_pwrctrl_periph_enable+0x46>
    222c:	2480      	movs	r4, #128	; 0x80
    222e:	e7e8      	b.n	2202 <am_hal_pwrctrl_periph_enable+0x46>
    2230:	40021008 	.word	0x40021008
    2234:	0000469c 	.word	0x0000469c
    2238:	000046d0 	.word	0x000046d0
    223c:	40021014 	.word	0x40021014

00002240 <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    2240:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
{
    2244:	b430      	push	{r4, r5}
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    2246:	d03a      	beq.n	22be <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    2248:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    224c:	f000 809d 	beq.w	238a <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    2250:	2801      	cmp	r0, #1
    2252:	f000 809d 	beq.w	2390 <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    2256:	2803      	cmp	r0, #3
    2258:	f000 80a6 	beq.w	23a8 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    225c:	2807      	cmp	r0, #7
    225e:	f000 809c 	beq.w	239a <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    2262:	280f      	cmp	r0, #15
    2264:	f000 80a5 	beq.w	23b2 <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    2268:	281f      	cmp	r0, #31
    226a:	f000 80b0 	beq.w	23ce <am_hal_pwrctrl_memory_enable+0x18e>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    226e:	283f      	cmp	r0, #63	; 0x3f
    2270:	f000 80b4 	beq.w	23dc <am_hal_pwrctrl_memory_enable+0x19c>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    2274:	287f      	cmp	r0, #127	; 0x7f
    2276:	f000 80b8 	beq.w	23ea <am_hal_pwrctrl_memory_enable+0x1aa>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    227a:	28ff      	cmp	r0, #255	; 0xff
    227c:	f000 80a0 	beq.w	23c0 <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    2280:	f240 13ff 	movw	r3, #511	; 0x1ff
    2284:	4298      	cmp	r0, r3
    2286:	f000 80b7 	beq.w	23f8 <am_hal_pwrctrl_memory_enable+0x1b8>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    228a:	f240 31ff 	movw	r1, #1023	; 0x3ff
    228e:	4288      	cmp	r0, r1
    2290:	f000 80b8 	beq.w	2404 <am_hal_pwrctrl_memory_enable+0x1c4>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    2294:	f240 72ff 	movw	r2, #2047	; 0x7ff
    2298:	4290      	cmp	r0, r2
    229a:	d00e      	beq.n	22ba <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    229c:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    22a0:	f000 80b6 	beq.w	2410 <am_hal_pwrctrl_memory_enable+0x1d0>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    22a4:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    22a8:	42a0      	cmp	r0, r4
    22aa:	f000 80b4 	beq.w	2416 <am_hal_pwrctrl_memory_enable+0x1d6>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    22ae:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    22b2:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    22b6:	4560      	cmp	r0, ip
    22b8:	d132      	bne.n	2320 <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    22ba:	495b      	ldr	r1, [pc, #364]	; (2428 <am_hal_pwrctrl_memory_enable+0x1e8>)
    22bc:	e066      	b.n	238c <am_hal_pwrctrl_memory_enable+0x14c>
    22be:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    22c2:	2340      	movs	r3, #64	; 0x40
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    22c4:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    22c6:	4c59      	ldr	r4, [pc, #356]	; (242c <am_hal_pwrctrl_memory_enable+0x1ec>)
    22c8:	6825      	ldr	r5, [r4, #0]
    22ca:	402a      	ands	r2, r5
    22cc:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    22ce:	4a57      	ldr	r2, [pc, #348]	; (242c <am_hal_pwrctrl_memory_enable+0x1ec>)
    22d0:	6814      	ldr	r4, [r2, #0]
    22d2:	4320      	orrs	r0, r4
    22d4:	6010      	str	r0, [r2, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    22d6:	2b00      	cmp	r3, #0
    22d8:	d029      	beq.n	232e <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    22da:	4d55      	ldr	r5, [pc, #340]	; (2430 <am_hal_pwrctrl_memory_enable+0x1f0>)
    22dc:	6828      	ldr	r0, [r5, #0]
        while ( --i32TOcnt              &&
    22de:	4218      	tst	r0, r3
    22e0:	bf18      	it	ne
    22e2:	20c6      	movne	r0, #198	; 0xc6
    22e4:	d01f      	beq.n	2326 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    22e6:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    22e8:	421a      	tst	r2, r3
    22ea:	d01c      	beq.n	2326 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    22ec:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    22ee:	421c      	tst	r4, r3
    22f0:	d019      	beq.n	2326 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    22f2:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    22f4:	421a      	tst	r2, r3
    22f6:	d016      	beq.n	2326 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    22f8:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    22fa:	421c      	tst	r4, r3
    22fc:	d013      	beq.n	2326 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    22fe:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    2300:	421a      	tst	r2, r3
    2302:	d010      	beq.n	2326 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2304:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    2306:	421c      	tst	r4, r3
    2308:	d00d      	beq.n	2326 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    230a:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    230c:	421a      	tst	r2, r3
    230e:	d00a      	beq.n	2326 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2310:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    2312:	421c      	tst	r4, r3
    2314:	d007      	beq.n	2326 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2316:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    2318:	421a      	tst	r2, r3
    231a:	d004      	beq.n	2326 <am_hal_pwrctrl_memory_enable+0xe6>
    231c:	3809      	subs	r0, #9
    231e:	d1e2      	bne.n	22e6 <am_hal_pwrctrl_memory_enable+0xa6>
        return false;
    2320:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    2322:	bc30      	pop	{r4, r5}
    2324:	4770      	bx	lr
    if ( ui32PwrStatEnMask )
    2326:	b911      	cbnz	r1, 232e <am_hal_pwrctrl_memory_enable+0xee>
    return true;
    2328:	2001      	movs	r0, #1
}
    232a:	bc30      	pop	{r4, r5}
    232c:	4770      	bx	lr
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    232e:	4b40      	ldr	r3, [pc, #256]	; (2430 <am_hal_pwrctrl_memory_enable+0x1f0>)
    2330:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    2332:	ea31 0405 	bics.w	r4, r1, r5
    2336:	bf18      	it	ne
    2338:	24c6      	movne	r4, #198	; 0xc6
    233a:	d0f5      	beq.n	2328 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    233c:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    233e:	ea31 0000 	bics.w	r0, r1, r0
    2342:	d0f1      	beq.n	2328 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2344:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    2346:	ea31 0002 	bics.w	r0, r1, r2
    234a:	d0ed      	beq.n	2328 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    234c:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    234e:	ea31 0005 	bics.w	r0, r1, r5
    2352:	d0e9      	beq.n	2328 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2354:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    2356:	ea31 0000 	bics.w	r0, r1, r0
    235a:	d0e5      	beq.n	2328 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    235c:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    235e:	ea31 0002 	bics.w	r0, r1, r2
    2362:	d0e1      	beq.n	2328 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2364:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    2366:	ea31 0005 	bics.w	r0, r1, r5
    236a:	d0dd      	beq.n	2328 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    236c:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    236e:	ea31 0000 	bics.w	r0, r1, r0
    2372:	d0d9      	beq.n	2328 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2374:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    2376:	ea31 0002 	bics.w	r0, r1, r2
    237a:	d0d5      	beq.n	2328 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    237c:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    237e:	ea31 0005 	bics.w	r0, r1, r5
    2382:	d0d1      	beq.n	2328 <am_hal_pwrctrl_memory_enable+0xe8>
    2384:	3c09      	subs	r4, #9
    2386:	d1d9      	bne.n	233c <am_hal_pwrctrl_memory_enable+0xfc>
    2388:	e7ca      	b.n	2320 <am_hal_pwrctrl_memory_enable+0xe0>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    238a:	2160      	movs	r1, #96	; 0x60
{
    238c:	2300      	movs	r3, #0
    238e:	e79e      	b.n	22ce <am_hal_pwrctrl_memory_enable+0x8e>
    2390:	4a28      	ldr	r2, [pc, #160]	; (2434 <am_hal_pwrctrl_memory_enable+0x1f4>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2392:	4b29      	ldr	r3, [pc, #164]	; (2438 <am_hal_pwrctrl_memory_enable+0x1f8>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    2394:	f44f 7180 	mov.w	r1, #256	; 0x100
    2398:	e795      	b.n	22c6 <am_hal_pwrctrl_memory_enable+0x86>
    239a:	f46f 62ff 	mvn.w	r2, #2040	; 0x7f8
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    239e:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    23a2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    23a6:	e78e      	b.n	22c6 <am_hal_pwrctrl_memory_enable+0x86>
    23a8:	4a24      	ldr	r2, [pc, #144]	; (243c <am_hal_pwrctrl_memory_enable+0x1fc>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    23aa:	4b25      	ldr	r3, [pc, #148]	; (2440 <am_hal_pwrctrl_memory_enable+0x200>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    23ac:	f44f 7140 	mov.w	r1, #768	; 0x300
    23b0:	e789      	b.n	22c6 <am_hal_pwrctrl_memory_enable+0x86>
    23b2:	f46f 62fe 	mvn.w	r2, #2032	; 0x7f0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    23b6:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    23ba:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    23be:	e782      	b.n	22c6 <am_hal_pwrctrl_memory_enable+0x86>
    23c0:	f46f 62e0 	mvn.w	r2, #1792	; 0x700
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    23c4:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    23c8:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    23cc:	e77b      	b.n	22c6 <am_hal_pwrctrl_memory_enable+0x86>
    23ce:	f46f 62fc 	mvn.w	r2, #2016	; 0x7e0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    23d2:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    23d6:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    23da:	e774      	b.n	22c6 <am_hal_pwrctrl_memory_enable+0x86>
    23dc:	f46f 62f8 	mvn.w	r2, #1984	; 0x7c0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    23e0:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    23e4:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    23e8:	e76d      	b.n	22c6 <am_hal_pwrctrl_memory_enable+0x86>
    23ea:	f46f 62f0 	mvn.w	r2, #1920	; 0x780
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    23ee:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    23f2:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    23f6:	e766      	b.n	22c6 <am_hal_pwrctrl_memory_enable+0x86>
    23f8:	f46f 62c0 	mvn.w	r2, #1536	; 0x600
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    23fc:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    2400:	4910      	ldr	r1, [pc, #64]	; (2444 <am_hal_pwrctrl_memory_enable+0x204>)
    2402:	e760      	b.n	22c6 <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    2404:	4910      	ldr	r1, [pc, #64]	; (2448 <am_hal_pwrctrl_memory_enable+0x208>)
    2406:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    240a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    240e:	e75a      	b.n	22c6 <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    2410:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    2414:	e7ba      	b.n	238c <am_hal_pwrctrl_memory_enable+0x14c>
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    2416:	4805      	ldr	r0, [pc, #20]	; (242c <am_hal_pwrctrl_memory_enable+0x1ec>)
    2418:	6803      	ldr	r3, [r0, #0]
    241a:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    241e:	6001      	str	r1, [r0, #0]
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    2420:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
        ui32PwrStatEnMask  = 0;
    2424:	2100      	movs	r1, #0
    2426:	e758      	b.n	22da <am_hal_pwrctrl_memory_enable+0x9a>
    2428:	0007ff00 	.word	0x0007ff00
    242c:	40021010 	.word	0x40021010
    2430:	40021014 	.word	0x40021014
    2434:	fffff801 	.word	0xfffff801
    2438:	0007fe00 	.word	0x0007fe00
    243c:	fffff803 	.word	0xfffff803
    2440:	0007fc00 	.word	0x0007fc00
    2444:	0001ff00 	.word	0x0001ff00
    2448:	0003ff00 	.word	0x0003ff00

0000244c <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    244c:	4b0f      	ldr	r3, [pc, #60]	; (248c <am_hal_pwrctrl_bucks_init+0x40>)
    244e:	681a      	ldr	r2, [r3, #0]
    2450:	0792      	lsls	r2, r2, #30
    2452:	d502      	bpl.n	245a <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    2454:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    2456:	07c3      	lsls	r3, r0, #31
    2458:	d40e      	bmi.n	2478 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    245a:	4b0d      	ldr	r3, [pc, #52]	; (2490 <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    245c:	4a0b      	ldr	r2, [pc, #44]	; (248c <am_hal_pwrctrl_bucks_init+0x40>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    245e:	6819      	ldr	r1, [r3, #0]
    2460:	f041 0002 	orr.w	r0, r1, #2
    2464:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    2466:	6819      	ldr	r1, [r3, #0]
    2468:	f041 0001 	orr.w	r0, r1, #1
    246c:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    246e:	6813      	ldr	r3, [r2, #0]
    2470:	f003 0103 	and.w	r1, r3, #3
    2474:	2903      	cmp	r1, #3
    2476:	d1fa      	bne.n	246e <am_hal_pwrctrl_bucks_init+0x22>
    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    2478:	4a04      	ldr	r2, [pc, #16]	; (248c <am_hal_pwrctrl_bucks_init+0x40>)
    247a:	6810      	ldr	r0, [r2, #0]
    247c:	f000 0303 	and.w	r3, r0, #3
    2480:	2b03      	cmp	r3, #3
    2482:	d1fa      	bne.n	247a <am_hal_pwrctrl_bucks_init+0x2e>
    am_hal_flash_delay(200 / 3);
    2484:	2042      	movs	r0, #66	; 0x42
    2486:	f7fe ba65 	b.w	954 <am_hal_flash_delay>
    248a:	bf00      	nop
    248c:	40021004 	.word	0x40021004
    2490:	40021000 	.word	0x40021000

00002494 <am_hal_pwrctrl_bucks_enable>:
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    2494:	4b0b      	ldr	r3, [pc, #44]	; (24c4 <am_hal_pwrctrl_bucks_enable+0x30>)
    2496:	681a      	ldr	r2, [r3, #0]
    2498:	0792      	lsls	r2, r2, #30
    249a:	d502      	bpl.n	24a2 <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    249c:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    249e:	07c3      	lsls	r3, r0, #31
    24a0:	d40e      	bmi.n	24c0 <am_hal_pwrctrl_bucks_enable+0x2c>
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    24a2:	4b09      	ldr	r3, [pc, #36]	; (24c8 <am_hal_pwrctrl_bucks_enable+0x34>)
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    24a4:	4a07      	ldr	r2, [pc, #28]	; (24c4 <am_hal_pwrctrl_bucks_enable+0x30>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    24a6:	6819      	ldr	r1, [r3, #0]
    24a8:	f041 0002 	orr.w	r0, r1, #2
    24ac:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    24ae:	6819      	ldr	r1, [r3, #0]
    24b0:	f041 0001 	orr.w	r0, r1, #1
    24b4:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    24b6:	6813      	ldr	r3, [r2, #0]
    24b8:	f003 0103 	and.w	r1, r3, #3
    24bc:	2903      	cmp	r1, #3
    24be:	d1fa      	bne.n	24b6 <am_hal_pwrctrl_bucks_enable+0x22>
    24c0:	4770      	bx	lr
    24c2:	bf00      	nop
    24c4:	40021004 	.word	0x40021004
    24c8:	40021000 	.word	0x40021000

000024cc <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    24cc:	4b12      	ldr	r3, [pc, #72]	; (2518 <am_hal_pwrctrl_bucks_disable+0x4c>)
    24ce:	681a      	ldr	r2, [r3, #0]
    24d0:	0792      	lsls	r2, r2, #30
    24d2:	d402      	bmi.n	24da <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    24d4:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    24d6:	07c3      	lsls	r3, r0, #31
    24d8:	d51c      	bpl.n	2514 <am_hal_pwrctrl_bucks_disable+0x48>
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    24da:	4910      	ldr	r1, [pc, #64]	; (251c <am_hal_pwrctrl_bucks_disable+0x50>)
    24dc:	680b      	ldr	r3, [r1, #0]
    24de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    24e2:	2a20      	cmp	r2, #32
    24e4:	d00b      	beq.n	24fe <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    24e6:	4b0e      	ldr	r3, [pc, #56]	; (2520 <am_hal_pwrctrl_bucks_disable+0x54>)
    24e8:	681a      	ldr	r2, [r3, #0]
    24ea:	f022 0002 	bic.w	r0, r2, #2
    24ee:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    24f0:	6819      	ldr	r1, [r3, #0]
    24f2:	f021 0201 	bic.w	r2, r1, #1
    24f6:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    24f8:	200a      	movs	r0, #10
    24fa:	f7fe ba2b 	b.w	954 <am_hal_flash_delay>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_PWRADC_EN) )
    24fe:	4809      	ldr	r0, [pc, #36]	; (2524 <am_hal_pwrctrl_bucks_disable+0x58>)
    2500:	6801      	ldr	r1, [r0, #0]
    if ( isRev_ADC()  &&
    2502:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    2506:	d1ee      	bne.n	24e6 <am_hal_pwrctrl_bucks_disable+0x1a>
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    2508:	4805      	ldr	r0, [pc, #20]	; (2520 <am_hal_pwrctrl_bucks_disable+0x54>)
    250a:	6803      	ldr	r3, [r0, #0]
    250c:	f003 0105 	and.w	r1, r3, #5
    2510:	6001      	str	r1, [r0, #0]
    2512:	e7f1      	b.n	24f8 <am_hal_pwrctrl_bucks_disable+0x2c>
    2514:	4770      	bx	lr
    2516:	bf00      	nop
    2518:	40021004 	.word	0x40021004
    251c:	4002000c 	.word	0x4002000c
    2520:	40021000 	.word	0x40021000
    2524:	40021008 	.word	0x40021008

00002528 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    2528:	4905      	ldr	r1, [pc, #20]	; (2540 <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    252a:	4a06      	ldr	r2, [pc, #24]	; (2544 <am_hal_pwrctrl_low_power_init+0x1c>)
    AM_REG(PWRCTRL, SRAMCTRL) |=
    252c:	680b      	ldr	r3, [r1, #0]
    252e:	f043 0006 	orr.w	r0, r3, #6
    2532:	6008      	str	r0, [r1, #0]
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    2534:	6811      	ldr	r1, [r2, #0]
    2536:	f021 0304 	bic.w	r3, r1, #4
    253a:	6013      	str	r3, [r2, #0]
    253c:	4770      	bx	lr
    253e:	bf00      	nop
    2540:	40021018 	.word	0x40021018
    2544:	40021000 	.word	0x40021000

00002548 <am_hal_queue_item_add>:
//! didn't have enough space.
//
//*****************************************************************************
bool
am_hal_queue_item_add(am_hal_queue_t *psQueue, const void *pvSource, uint32_t ui32NumItems)
{
    2548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    254a:	4604      	mov	r4, r0
    uint32_t i;
    uint8_t *pui8Source;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    254c:	6907      	ldr	r7, [r0, #16]
{
    254e:	460e      	mov	r6, r1
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    2550:	fb07 f702 	mul.w	r7, r7, r2
    bool bSuccess = false;
    uint32_t ui32Primask;

    pui8Source = (uint8_t *) pvSource;

    ui32Primask = am_hal_interrupt_master_disable();
    2554:	f7fe fae2 	bl	b1c <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't already full
    //
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    2558:	68a5      	ldr	r5, [r4, #8]
    255a:	68e3      	ldr	r3, [r4, #12]
    255c:	1b59      	subs	r1, r3, r5
    255e:	428f      	cmp	r7, r1
    2560:	d87c      	bhi.n	265c <am_hal_queue_item_add+0x114>
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    2562:	2f00      	cmp	r7, #0
    2564:	d073      	beq.n	264e <am_hal_queue_item_add+0x106>
        {
            //
            // Write the value to the buffer.
            //
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    2566:	4635      	mov	r5, r6
    2568:	6823      	ldr	r3, [r4, #0]
    256a:	6962      	ldr	r2, [r4, #20]
    256c:	f815 1b01 	ldrb.w	r1, [r5], #1
    2570:	54d1      	strb	r1, [r2, r3]

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    2572:	6823      	ldr	r3, [r4, #0]
    2574:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    2578:	1c5a      	adds	r2, r3, #1
    257a:	19f1      	adds	r1, r6, r7
    257c:	f107 3cff 	add.w	ip, r7, #4294967295
    2580:	fbb2 f6fe 	udiv	r6, r2, lr
        for ( i = 0; i < ui32Bytes; i++ )
    2584:	42a9      	cmp	r1, r5
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    2586:	fb0e 2316 	mls	r3, lr, r6, r2
    258a:	6023      	str	r3, [r4, #0]
    258c:	f00c 0203 	and.w	r2, ip, #3
        for ( i = 0; i < ui32Bytes; i++ )
    2590:	d05c      	beq.n	264c <am_hal_queue_item_add+0x104>
    2592:	b34a      	cbz	r2, 25e8 <am_hal_queue_item_add+0xa0>
    2594:	2a01      	cmp	r2, #1
    2596:	d019      	beq.n	25cc <am_hal_queue_item_add+0x84>
    2598:	2a02      	cmp	r2, #2
    259a:	d00b      	beq.n	25b4 <am_hal_queue_item_add+0x6c>
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    259c:	6962      	ldr	r2, [r4, #20]
    259e:	f815 6b01 	ldrb.w	r6, [r5], #1
    25a2:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    25a4:	6823      	ldr	r3, [r4, #0]
    25a6:	68e6      	ldr	r6, [r4, #12]
    25a8:	1c5a      	adds	r2, r3, #1
    25aa:	fbb2 fef6 	udiv	lr, r2, r6
    25ae:	fb06 231e 	mls	r3, r6, lr, r2
    25b2:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    25b4:	6962      	ldr	r2, [r4, #20]
    25b6:	f815 6b01 	ldrb.w	r6, [r5], #1
    25ba:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    25bc:	6823      	ldr	r3, [r4, #0]
    25be:	68e6      	ldr	r6, [r4, #12]
    25c0:	1c5a      	adds	r2, r3, #1
    25c2:	fbb2 fcf6 	udiv	ip, r2, r6
    25c6:	fb06 231c 	mls	r3, r6, ip, r2
    25ca:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    25cc:	6962      	ldr	r2, [r4, #20]
    25ce:	f815 6b01 	ldrb.w	r6, [r5], #1
    25d2:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    25d4:	6823      	ldr	r3, [r4, #0]
    25d6:	68e6      	ldr	r6, [r4, #12]
    25d8:	1c5a      	adds	r2, r3, #1
        for ( i = 0; i < ui32Bytes; i++ )
    25da:	42a9      	cmp	r1, r5
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    25dc:	fbb2 fef6 	udiv	lr, r2, r6
    25e0:	fb06 231e 	mls	r3, r6, lr, r2
    25e4:	6023      	str	r3, [r4, #0]
        for ( i = 0; i < ui32Bytes; i++ )
    25e6:	d031      	beq.n	264c <am_hal_queue_item_add+0x104>
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    25e8:	46ac      	mov	ip, r5
    25ea:	6962      	ldr	r2, [r4, #20]
    25ec:	f81c 6b01 	ldrb.w	r6, [ip], #1
    25f0:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    25f2:	6823      	ldr	r3, [r4, #0]
    25f4:	68e2      	ldr	r2, [r4, #12]
    25f6:	1c5e      	adds	r6, r3, #1
    25f8:	fbb6 fef2 	udiv	lr, r6, r2
    25fc:	fb02 631e 	mls	r3, r2, lr, r6
    2600:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    2602:	6962      	ldr	r2, [r4, #20]
    2604:	786e      	ldrb	r6, [r5, #1]
    2606:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    2608:	6823      	ldr	r3, [r4, #0]
    260a:	68e2      	ldr	r2, [r4, #12]
    260c:	1c5e      	adds	r6, r3, #1
    260e:	fbb6 fef2 	udiv	lr, r6, r2
    2612:	fb02 631e 	mls	r3, r2, lr, r6
    2616:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    2618:	6962      	ldr	r2, [r4, #20]
    261a:	f89c 6001 	ldrb.w	r6, [ip, #1]
    261e:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    2620:	6823      	ldr	r3, [r4, #0]
    2622:	68e2      	ldr	r2, [r4, #12]
    2624:	1c5e      	adds	r6, r3, #1
    2626:	fbb6 fcf2 	udiv	ip, r6, r2
    262a:	fb02 631c 	mls	r3, r2, ip, r6
    262e:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    2630:	6962      	ldr	r2, [r4, #20]
    2632:	78ee      	ldrb	r6, [r5, #3]
    2634:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    2636:	6823      	ldr	r3, [r4, #0]
    2638:	68e2      	ldr	r2, [r4, #12]
    263a:	1c5e      	adds	r6, r3, #1
    263c:	3504      	adds	r5, #4
    263e:	fbb6 fef2 	udiv	lr, r6, r2
        for ( i = 0; i < ui32Bytes; i++ )
    2642:	42a9      	cmp	r1, r5
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    2644:	fb02 631e 	mls	r3, r2, lr, r6
    2648:	6023      	str	r3, [r4, #0]
        for ( i = 0; i < ui32Bytes; i++ )
    264a:	d1cd      	bne.n	25e8 <am_hal_queue_item_add+0xa0>
    264c:	68a5      	ldr	r5, [r4, #8]
        }

        //
        // Update the length value appropriately.
        //
        psQueue->ui32Length += ui32Bytes;
    264e:	443d      	add	r5, r7
    2650:	60a5      	str	r5, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
    2652:	2401      	movs	r4, #1
        // failure.
        //
        bSuccess = false;
    }

    am_hal_interrupt_master_set(ui32Primask);
    2654:	f7fe fa66 	bl	b24 <am_hal_interrupt_master_set>

    return bSuccess;
}
    2658:	4620      	mov	r0, r4
    265a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        bSuccess = false;
    265c:	2400      	movs	r4, #0
    am_hal_interrupt_master_set(ui32Primask);
    265e:	f7fe fa61 	bl	b24 <am_hal_interrupt_master_set>
}
    2662:	4620      	mov	r0, r4
    2664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2666:	bf00      	nop

00002668 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    2668:	4a05      	ldr	r2, [pc, #20]	; (2680 <am_hal_rtc_osc_select+0x18>)
    266a:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    266c:	b918      	cbnz	r0, 2676 <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    266e:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    2672:	6010      	str	r0, [r2, #0]
    2674:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    2676:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    267a:	6011      	str	r1, [r2, #0]
    267c:	4770      	bx	lr
    267e:	bf00      	nop
    2680:	4000400c 	.word	0x4000400c

00002684 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    2684:	4a02      	ldr	r2, [pc, #8]	; (2690 <am_hal_rtc_osc_disable+0xc>)
    2686:	6813      	ldr	r3, [r2, #0]
    2688:	f043 0010 	orr.w	r0, r3, #16
    268c:	6010      	str	r0, [r2, #0]
    268e:	4770      	bx	lr
    2690:	40004050 	.word	0x40004050

00002694 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    2694:	b5f0      	push	{r4, r5, r6, r7, lr}
    2696:	b083      	sub	sp, #12
    2698:	4604      	mov	r4, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    269a:	f7fe fa3f 	bl	b1c <am_hal_interrupt_master_disable>
    269e:	4605      	mov	r5, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    26a0:	b124      	cbz	r4, 26ac <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    26a2:	4b42      	ldr	r3, [pc, #264]	; (27ac <am_hal_sysctrl_sleep+0x118>)
    26a4:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    26a6:	f010 0c01 	ands.w	ip, r0, #1
    26aa:	d00a      	beq.n	26c2 <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    26ac:	4a40      	ldr	r2, [pc, #256]	; (27b0 <am_hal_sysctrl_sleep+0x11c>)
    26ae:	6811      	ldr	r1, [r2, #0]
    26b0:	f021 0604 	bic.w	r6, r1, #4
    26b4:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    26b6:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    26b8:	4628      	mov	r0, r5
    26ba:	f7fe fa33 	bl	b24 <am_hal_interrupt_master_set>
}
    26be:	b003      	add	sp, #12
    26c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    26c2:	4c3b      	ldr	r4, [pc, #236]	; (27b0 <am_hal_sysctrl_sleep+0x11c>)
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    26c4:	4b3b      	ldr	r3, [pc, #236]	; (27b4 <am_hal_sysctrl_sleep+0x120>)
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    26c6:	6820      	ldr	r0, [r4, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    26c8:	4e3b      	ldr	r6, [pc, #236]	; (27b8 <am_hal_sysctrl_sleep+0x124>)
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    26ca:	4f3c      	ldr	r7, [pc, #240]	; (27bc <am_hal_sysctrl_sleep+0x128>)
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    26cc:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 27cc <am_hal_sysctrl_sleep+0x138>
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    26d0:	f040 0204 	orr.w	r2, r0, #4
    26d4:	6022      	str	r2, [r4, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    26d6:	681c      	ldr	r4, [r3, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    26d8:	6833      	ldr	r3, [r6, #0]
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    26da:	f8de 2000 	ldr.w	r2, [lr]
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    26de:	6839      	ldr	r1, [r7, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    26e0:	f004 07f0 	and.w	r7, r4, #240	; 0xf0
                   CHKBUCKZX_REV : 0x0;
    26e4:	2f20      	cmp	r7, #32
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    26e6:	f103 30ff 	add.w	r0, r3, #4294967295
                   CHKBUCKZX_REV : 0x0;
    26ea:	bf14      	ite	ne
    26ec:	2700      	movne	r7, #0
    26ee:	2702      	moveq	r7, #2
                    CHKBUCKZX_TIMER : 0x0;
    26f0:	2803      	cmp	r0, #3
    26f2:	bf98      	it	ls
    26f4:	f04f 0c04 	movls.w	ip, #4
                     CHKBUCKZX_BUCKS : 0x0;
    26f8:	f012 0403 	ands.w	r4, r2, #3
    26fc:	bf18      	it	ne
    26fe:	2401      	movne	r4, #1
    g_buckZX_chk |= ( ui32SupplySrc &
    2700:	f240 53ff 	movw	r3, #1535	; 0x5ff
    g_buckZX_chk |= (ui32SupplySrc &
    2704:	433c      	orrs	r4, r7
                0x0 : CHKBUCKZX_DEVEN;
    2706:	ea11 0703 	ands.w	r7, r1, r3
    g_buckZX_chk |= (ui32SupplySrc &
    270a:	ea44 040c 	orr.w	r4, r4, ip
                0x0 : CHKBUCKZX_DEVEN;
    270e:	d103      	bne.n	2718 <am_hal_sysctrl_sleep+0x84>
    g_buckZX_chk |= ( ui32SupplySrc &
    2710:	f044 0408 	orr.w	r4, r4, #8
        if ( bBuckZX_chk )
    2714:	2c0f      	cmp	r4, #15
    2716:	d00a      	beq.n	272e <am_hal_sysctrl_sleep+0x9a>
        AM_ASM_WFI;
    2718:	bf30      	wfi
        if ( bBuckZX_chk )
    271a:	2c0f      	cmp	r4, #15
    271c:	d01a      	beq.n	2754 <am_hal_sysctrl_sleep+0xc0>
            g_bBuckRestoreComplete = true;
    271e:	4e28      	ldr	r6, [pc, #160]	; (27c0 <am_hal_sysctrl_sleep+0x12c>)
    2720:	2001      	movs	r0, #1
    2722:	7030      	strb	r0, [r6, #0]
    am_hal_interrupt_master_set(ui32Critical);
    2724:	4628      	mov	r0, r5
    2726:	f7fe f9fd 	bl	b24 <am_hal_interrupt_master_set>
}
    272a:	b003      	add	sp, #12
    272c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ui32BuckTimer = g_ui32BuckTimer - 1;
    272e:	6832      	ldr	r2, [r6, #0]
    2730:	1e51      	subs	r1, r2, #1
    2732:	9100      	str	r1, [sp, #0]
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    2734:	9800      	ldr	r0, [sp, #0]
    2736:	f04f 31ff 	mov.w	r1, #4294967295
    273a:	f000 f867 	bl	280c <am_hal_ctimer_clear>
            am_hal_ctimer_period_set(ui32BuckTimer,
    273e:	9800      	ldr	r0, [sp, #0]
    2740:	463b      	mov	r3, r7
    2742:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    2746:	f04f 31ff 	mov.w	r1, #4294967295
    274a:	f000 f873 	bl	2834 <am_hal_ctimer_period_set>
            am_hal_pwrctrl_bucks_disable();
    274e:	f7ff febd 	bl	24cc <am_hal_pwrctrl_bucks_disable>
    2752:	e7e1      	b.n	2718 <am_hal_sysctrl_sleep+0x84>
    AM_CRITICAL_BEGIN_ASM
    2754:	f7fe f9e2 	bl	b1c <am_hal_interrupt_master_disable>
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    2758:	4b1a      	ldr	r3, [pc, #104]	; (27c4 <am_hal_sysctrl_sleep+0x130>)
    AM_CRITICAL_BEGIN_ASM
    275a:	9001      	str	r0, [sp, #4]
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    275c:	681a      	ldr	r2, [r3, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    275e:	681a      	ldr	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    2760:	681f      	ldr	r7, [r3, #0]
    2762:	f027 043c 	bic.w	r4, r7, #60	; 0x3c
    2766:	f044 021c 	orr.w	r2, r4, #28
    276a:	601a      	str	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    276c:	6819      	ldr	r1, [r3, #0]
            g_bBuckRestoreComplete = false;
    276e:	4c14      	ldr	r4, [pc, #80]	; (27c0 <am_hal_sysctrl_sleep+0x12c>)
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    2770:	f421 30f0 	bic.w	r0, r1, #122880	; 0x1e000
    2774:	f440 4760 	orr.w	r7, r0, #57344	; 0xe000
    2778:	601f      	str	r7, [r3, #0]
    AM_CRITICAL_END_ASM
    277a:	9801      	ldr	r0, [sp, #4]
    277c:	f7fe f9d2 	bl	b24 <am_hal_interrupt_master_set>
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    2780:	201c      	movs	r0, #28
    2782:	f7fe f8e7 	bl	954 <am_hal_flash_delay>
            am_hal_pwrctrl_bucks_enable();
    2786:	f7ff fe85 	bl	2494 <am_hal_pwrctrl_bucks_enable>
            ui32BuckTimer = g_ui32BuckTimer - 1;
    278a:	6836      	ldr	r6, [r6, #0]
            g_ui32BuckInputs = 0;
    278c:	490e      	ldr	r1, [pc, #56]	; (27c8 <am_hal_sysctrl_sleep+0x134>)
            g_bBuckRestoreComplete = false;
    278e:	2200      	movs	r2, #0
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2790:	1e73      	subs	r3, r6, #1
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    2792:	204c      	movs	r0, #76	; 0x4c
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2794:	9300      	str	r3, [sp, #0]
            g_bBuckRestoreComplete = false;
    2796:	7022      	strb	r2, [r4, #0]
            g_ui32BuckInputs = 0;
    2798:	600a      	str	r2, [r1, #0]
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    279a:	f7fe f8db 	bl	954 <am_hal_flash_delay>
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    279e:	9800      	ldr	r0, [sp, #0]
    27a0:	f04f 31ff 	mov.w	r1, #4294967295
    27a4:	f000 f81a 	bl	27dc <am_hal_ctimer_start>
    27a8:	e786      	b.n	26b8 <am_hal_sysctrl_sleep+0x24>
    27aa:	bf00      	nop
    27ac:	40020250 	.word	0x40020250
    27b0:	e000ed10 	.word	0xe000ed10
    27b4:	4002000c 	.word	0x4002000c
    27b8:	10001018 	.word	0x10001018
    27bc:	40021008 	.word	0x40021008
    27c0:	10001013 	.word	0x10001013
    27c4:	40020068 	.word	0x40020068
    27c8:	10001014 	.word	0x10001014
    27cc:	40021000 	.word	0x40021000

000027d0 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    27d0:	4b01      	ldr	r3, [pc, #4]	; (27d8 <am_hal_vcomp_disable+0x8>)
    27d2:	2237      	movs	r2, #55	; 0x37
    27d4:	601a      	str	r2, [r3, #0]
    27d6:	4770      	bx	lr
    27d8:	4000c008 	.word	0x4000c008

000027dc <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    27dc:	b570      	push	{r4, r5, r6, lr}
    27de:	b082      	sub	sp, #8
    27e0:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    27e2:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    27e4:	f7fe f99a 	bl	b1c <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    27e8:	4d07      	ldr	r5, [pc, #28]	; (2808 <am_hal_ctimer_start+0x2c>)
    AM_CRITICAL_BEGIN_ASM
    27ea:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    27ec:	5971      	ldr	r1, [r6, r5]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    27ee:	f004 2308 	and.w	r3, r4, #134219776	; 0x8000800
    27f2:	ea21 0003 	bic.w	r0, r1, r3
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    27f6:	f004 1201 	and.w	r2, r4, #65537	; 0x10001
    27fa:	4302      	orrs	r2, r0
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    27fc:	5172      	str	r2, [r6, r5]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    27fe:	9801      	ldr	r0, [sp, #4]
    2800:	f7fe f990 	bl	b24 <am_hal_interrupt_master_set>
} // am_hal_ctimer_start()
    2804:	b002      	add	sp, #8
    2806:	bd70      	pop	{r4, r5, r6, pc}
    2808:	4000800c 	.word	0x4000800c

0000280c <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    280c:	b570      	push	{r4, r5, r6, lr}
    280e:	b082      	sub	sp, #8
    2810:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    2812:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    2814:	f7fe f982 	bl	b1c <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    2818:	4d05      	ldr	r5, [pc, #20]	; (2830 <am_hal_ctimer_clear+0x24>)
    AM_CRITICAL_BEGIN_ASM
    281a:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    281c:	5971      	ldr	r1, [r6, r5]
    281e:	f004 2008 	and.w	r0, r4, #134219776	; 0x8000800
    2822:	4308      	orrs	r0, r1
    2824:	5170      	str	r0, [r6, r5]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    2826:	9801      	ldr	r0, [sp, #4]
    2828:	f7fe f97c 	bl	b24 <am_hal_interrupt_master_set>
} // am_hal_ctimer_clear()
    282c:	b002      	add	sp, #8
    282e:	bd70      	pop	{r4, r5, r6, pc}
    2830:	4000800c 	.word	0x4000800c

00002834 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    2834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2838:	b082      	sub	sp, #8
    283a:	4688      	mov	r8, r1
    283c:	461f      	mov	r7, r3
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    283e:	ea4f 1900 	mov.w	r9, r0, lsl #4
{
    2842:	4614      	mov	r4, r2
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    2844:	f7fe f96a 	bl	b1c <am_hal_interrupt_master_disable>
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    2848:	f8df a098 	ldr.w	sl, [pc, #152]	; 28e4 <am_hal_ctimer_period_set+0xb0>
    AM_CRITICAL_BEGIN_ASM
    284c:	9001      	str	r0, [sp, #4]
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    284e:	f518 3f80 	cmn.w	r8, #65536	; 0x10000
                                    AM_REG_CTIMER_CMPRA0_O +
    2852:	4d21      	ldr	r5, [pc, #132]	; (28d8 <am_hal_ctimer_period_set+0xa4>)
                                    AM_REG_CTIMER_CMPRB0_O +
    2854:	4e21      	ldr	r6, [pc, #132]	; (28dc <am_hal_ctimer_period_set+0xa8>)
    ui32Mode = *pui32ControlReg;
    2856:	f859 300a 	ldr.w	r3, [r9, sl]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    285a:	d01b      	beq.n	2894 <am_hal_ctimer_period_set+0x60>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    285c:	f403 70c0 	and.w	r0, r3, #384	; 0x180
    2860:	2880      	cmp	r0, #128	; 0x80
    2862:	d01c      	beq.n	289e <am_hal_ctimer_period_set+0x6a>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    2864:	f64f 77ff 	movw	r7, #65535	; 0xffff
    2868:	2300      	movs	r3, #0
    286a:	45b8      	cmp	r8, r7
        ui32Comp1 = 0;
    286c:	461a      	mov	r2, r3
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    286e:	d01d      	beq.n	28ac <am_hal_ctimer_period_set+0x78>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    2870:	491b      	ldr	r1, [pc, #108]	; (28e0 <am_hal_ctimer_period_set+0xac>)
    2872:	4588      	cmp	r8, r1
    2874:	d025      	beq.n	28c2 <am_hal_ctimer_period_set+0x8e>
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1 >> 16));
    2876:	400a      	ands	r2, r1
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    2878:	b2a0      	uxth	r0, r4
    287a:	4303      	orrs	r3, r0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    287c:	ea42 4414 	orr.w	r4, r2, r4, lsr #16
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    2880:	f849 3005 	str.w	r3, [r9, r5]
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    2884:	f849 4006 	str.w	r4, [r9, r6]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    2888:	9801      	ldr	r0, [sp, #4]
    288a:	f7fe f94b 	bl	b24 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    288e:	b002      	add	sp, #8
    2890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ui32Mode = ui32Mode >> 16;
    2894:	0c19      	lsrs	r1, r3, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    2896:	f401 70c0 	and.w	r0, r1, #384	; 0x180
    289a:	2880      	cmp	r0, #128	; 0x80
    289c:	d110      	bne.n	28c0 <am_hal_ctimer_period_set+0x8c>
    289e:	0423      	lsls	r3, r4, #16
        ui32Comp1 = ui32Period;
    28a0:	4622      	mov	r2, r4
        ui32Comp0 = ui32Period - ui32OnTime;
    28a2:	1be4      	subs	r4, r4, r7
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    28a4:	f64f 77ff 	movw	r7, #65535	; 0xffff
    28a8:	45b8      	cmp	r8, r7
    28aa:	d1e1      	bne.n	2870 <am_hal_ctimer_period_set+0x3c>
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    28ac:	b2a6      	uxth	r6, r4
    28ae:	4333      	orrs	r3, r6
    28b0:	f849 3005 	str.w	r3, [r9, r5]
    AM_CRITICAL_END_ASM
    28b4:	9801      	ldr	r0, [sp, #4]
    28b6:	f7fe f935 	bl	b24 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    28ba:	b002      	add	sp, #8
    28bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    28c0:	2300      	movs	r3, #0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    28c2:	b2a5      	uxth	r5, r4
    28c4:	432b      	orrs	r3, r5
    28c6:	f849 3006 	str.w	r3, [r9, r6]
    AM_CRITICAL_END_ASM
    28ca:	9801      	ldr	r0, [sp, #4]
    28cc:	f7fe f92a 	bl	b24 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    28d0:	b002      	add	sp, #8
    28d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    28d6:	bf00      	nop
    28d8:	40008004 	.word	0x40008004
    28dc:	40008008 	.word	0x40008008
    28e0:	ffff0000 	.word	0xffff0000
    28e4:	4000800c 	.word	0x4000800c

000028e8 <g_pui8Apollo2BootDemo>:
    28e8:	10001000 00009c01 00009c09 000098dd     ................
    28f8:	000098dd 000098dd 000098dd 00000000     ................
	...
    2914:	00009c07 00009c07 00000000 00009c07     ................
    2924:	00009c07 00009c07 00009c07 00009c07     ................
    2934:	00009c07 00009c07 00009c07 00009c07     ................
    2944:	00009c07 00009c07 00009c07 00009c07     ................
    2954:	00009c07 00009c07 000093a7 00009c07     ................
    2964:	00009c07 00009c07 00009c07 00009c07     ................
    2974:	00009c07 00009c07 00009c07 00009c07     ................
    2984:	00009c07 00009c07 00009c07 00009c07     ................
    2994:	00009c07 00009c07 00009c07 00009c07     ................
    29a4:	00009c07 18a0f8df 47706008 0ff0e92d     .........`pG-...
    29b4:	000d0004 d04d2d00 00290020 ea5f0849     .....-M. .).I._.
    29c4:	46800030 00204689 08800029 7081ea40     0..F.F .)...@..p
    29d4:	eb180889 eb590000 00060101 0030000f     ......Y.......0.
    29e4:	09000039 7001ea40 18360909 0030414f     9...@..p..6.OA0.
    29f4:	0a000039 6001ea40 18360a09 0030414f     9...@..`..6.OA0.
    2a04:	0c000039 4001ea40 18360c09 0030414f     9...@..@..6.OA0.
    2a14:	00080039 18362100 08f6414f 7647ea46     9....!6.OA..F.Gv
    2a24:	200a08ff fba02100 fb008906 fb019907     ... .!..........
    2a34:	ebb49906 eb750008 46820109 f11a468b     ......u....F.F..
    2a44:	f15b0006 09000100 7001ea40 18300909     ..[.....@..p..0.
    2a54:	e0154179 466046a4 eb100880 0002005c     yA...F`F....\...
    2a64:	1212eb12 2212eb12 4212eb12 200a08d2     ......."...B... 
    2a74:	c012fb00 1d9b0003 1213eb12 21000010     ...............!
    2a84:	0ff0e8bd b5104770 000b0002 21002000     ....pG....... .!
    2a94:	d101428b d0014282 e0002400 20002401     .B...B...$...$. 
    2aa4:	428b2100 4282d101 0010d007 f7ff0019     .!.B...B........
    2ab4:	0002ff7d 1c64000b 0020e7f1 b580bd10     }.....d... .....
    2ac4:	23002200 dc054299 4290db01 4240d202     .".#.B.....B..@B
    2ad4:	0141eb71 ffd7f7ff b430bd02 000b0002     q.A.......0.....
    2ae4:	21002000 d101428b d0014282 e0002000     . .!.B...B... ..
    2af4:	24002001 42ab2500 42a2d101 0912d005     . .$.%.B...B....
    2b04:	7203ea42 1c40091b bc30e7f3 b4304770     B..r..@...0.pG0.
    2b14:	22000003 25002000 2c2d781c 2401d103     ...". .%.x-,...$
    2b24:	1c5b0022 781c1c6d db0a2c30 2c3a781c     ".[.m..x0,...x:,
    2b34:	1c6dda07 4360240a 3c30781c 1c5b1820     ..m..$`C.x0< .[.
    2b44:	2900e7f1 600dd000 2a00b2d2 4240d001     ...)...`...*..@B
    2b54:	bc30e7ff e92d4770 b0874ff0 000f0006     ..0.pG-..O......
    2b64:	f05f4690 f05f0900 00300a00 f7ff0039     .F_..._...0.9...
    2b74:	0004ff1d 200a000d fba02100 fb002304     ....... .!...#..
    2b84:	fb013305 1ab03304 0103eb77 f11b4683     .3...3..w....F..
    2b94:	46690030 0009f801 0901f119 002f0026     0.iF........&./.
    2ba4:	21002000 d1e0428f d1de4286 f1b846ca     . .!.B...B...F..
    2bb4:	d00f0f00 f1b04648 28000901 4668d007     ....HF.....(..hF
    2bc4:	0009f810 0000f888 0801f118 2000e7f2     ............... 
    2bd4:	0000f888 b0074650 8ff0e8bd b085b5f0     ....PF..........
    2be4:	000d0004 0c00f05f 27002600 d10742bd     ...._....&.'.B..
    2bf4:	d10542b4 466e2030 000cf806 0c01f11c     .B..0 nF........
    2c04:	27002600 d10142bd d01c42b4 f0100020     .&.'.B...B.. ...
    2c14:	4686000f fe8efa5f 0f0af1be b2dbdb07     ...F_...........
    2c24:	d0012b00 e0002027 eb102007 f11e0e0e     .+..' ... ......
    2c34:	466e0030 000cf806 0c01f11c ea440924     0.nF........$.D.
    2c44:	092d7405 4661e7dc d00c2a00 f1b04660     .t-...aF.*..`F..
    2c54:	28000c01 4668d005 000cf810 1c527010     ...(..hF.....pR.
    2c64:	2000e7f4 00087010 bdf0b005 20000002     ... .p......... 
    2c74:	d0062a00 1c4a0011 29007809 1c40d001     .*....J..x.)..@.
    2c84:	4770e7f8 0004b410 2a012000 0013db09     ..pG..... .*....
    2c94:	2b001e5a 2c00d005 7021d001 1c401c64     Z..+...,..!pd.@.
    2ca4:	bc10e7f5 e92d4770 ed2d4ff8 b0828b02     ....pG-..O-.....
    2cb4:	8a40eeb0 000f0006 46836830 0f04f1bb     ..@.....0h.F....
    2cc4:	f07fda02 e09a0002 8a40eeb5 fa10eef1     ..........@.....
    2cd4:	f8dfd104 6030057c e0902003 ed8d46b1     ....|.0`. ...F..
    2ce4:	98008a00 50c7f3c0 4680387f f0209800     .......P.8.F.. .
    2cf4:	f450407f 46820000 00052000 00042000     .@P....F. ... ..
    2d04:	0f1ff1b8 f07fdb02 e0780001 0f17f118     ..........x.....
    2d14:	f05fda02 e07230ff 0f17f1b8 4640db05     .._..0r.......@F
    2d24:	fa1a3817 0004f000 f1b8e016 d40c0f00     .8..............
    2d34:	0017f1d8 41014651 f118000c fa1a0001     ....QF.A........
    2d44:	f020f000 0005407f f02ae006 f118407f     .. ..@....*..@..
    2d54:	42490101 00054108 28009800 202dd502     ..IB.A.....(..- 
    2d64:	1c767030 d1032c00 70302030 e0141c76     0pv..,..0 0pv...
    2d74:	db052c01 00200032 f7ff17e1 e007feec     .,..2. .........
    2d84:	7030202d 00321c76 17c14260 fee3f7ff     - 0pv.2.`B......
    2d94:	28007830 1c76d001 202ee7fa 1c767030     0x.(..v.... 0pv.
    2da4:	d1032d00 70302030 e0231c76 0009ebb6     .-..0 0pv.#.....
    2db4:	0000ebbb 00011e40 da01428f e7ff0039     ....@....B..9...
    2dc4:	00022000 da0a428a 4345200a 16000028     . ...B... EC(...
    2dd4:	70303030 f0251c76 1c52457f 1e76e7f2     000pv.%..ER...v.
    2de4:	28307830 f816d105 282e0c01 1e76d001     0x0(.......(..v.
    2df4:	1c76e7f6 70302000 0609ebb6 b0020030     ..v.. 0p....0...
    2e04:	8b02ecbd 8ff2e8bd 4ff8e92d 8b02ed2d     ........-..O-...
    2e14:	0004b088 00174688 20002600 f8989002     .....F...&. ....
    2e24:	28000000 81edf000 90052006 0000f898     ...(..... ......
    2e34:	d0162825 d0102c00 0000f898 d108280a     %(...,.......(..
    2e44:	0408f8df 28007800 200dd003 1c647020     .....x.(...  pd.
    2e54:	f8981c76 70200000 f1181c64 1c760801     v..... pd.....v.
    2e64:	f118e7dd 20000801 0001f88d 0001f89d     ....... ........
    2e74:	0003f88d f88d2020 f8980000 28300000     ....  ........0(
    2e84:	2030d104 0000f88d 0801f118 4640a904     ..0 ..........@F
    2e94:	fe3df7ff 98040005 f8984480 28730000     ..=......D....s(
    2ea4:	2d00d002 426dd500 0000f898 d108282e     ...-..mB.....(..
    2eb4:	0801f118 4640a904 fe29f7ff 98049005     ......@F..).....
    2ec4:	f8984480 286c0000 f118d10a f8980801     .D....l(........
    2ed4:	286c0000 f118d104 20010801 0001f88d     ..l(....... ....
    2ee4:	0000f898 f0002846 28588153 2863d067     ....F(..S.X(g.c(
    2ef4:	2864d010 80d1f000 f0002866 28698149     ..d(....f(..I.i(
    2f04:	80cbf000 d0112873 f0002875 28788090     ....s(..u(....x(
    2f14:	e16cd052 1d3f6838 0004f88d d0032c00     R.l.8h?......,..
    2f24:	0004f89d 1c647020 e1671c76 1d3f6838     .... pd.v.g.8h?.
    2f34:	98039003 fe9af7ff 2d019002 9802db14     ...........-....
    2f44:	d21142a8 1a2d9802 f89d002a 00201000     .B....-.*..... .
    2f54:	fe98f7ff 2c000005 0028d001 2000e000     .......,..(.... 
    2f64:	19ae4404 00052000 78009803 d00a2800     .D... .....x.(..
    2f74:	d0032c00 78009803 1c647020 1c409803     .,.....x pd...@.
    2f84:	1c769003 2d00e7f0 426dd015 42a89802     ..v....-..mB...B
    2f94:	9802d211 002a1a2d 1000f89d f7ff0020     ....-.*..... ...
    2fa4:	0005fe71 d0012c00 e0000028 44042000     q....,..(.... .D
    2fb4:	200019ae e1210005 f88d2001 f89d0003     ... ..!.. ......
    2fc4:	28000001 1dffd008 0707f037 0100e9d7     ...(....7.......
    2fd4:	46823708 e004468b 1d3f6838 46822100     .7.F.F..8h?..!.F
    2fe4:	2d00468b 4650d015 f7ff4659 1a28fd76     .F.-..PFYF..v.(.
    2ff4:	002a0005 1000f89d f7ff0020 0005fe43     ..*..... ...C...
    3004:	d0012c00 e0000028 44042000 200019ae     .,..(.... .D... 
    3014:	f89d0005 00223003 46594650 fddef7ff     .....0".PFYF....
    3024:	2c004681 444cd000 0606eb19 f89de0e6     .F.,..LD........
    3034:	28000001 1dffd008 0707f037 0100e9d7     ...(....7.......
    3044:	46823708 e004468b 1d3f6838 46822100     .7.F.F..8h?..!.F
    3054:	2d00468b 4650d015 f7ff4659 1a28fd14     .F.-..PFYF....(.
    3064:	002a0005 1000f89d f7ff0020 0005fe0b     ..*..... .......
    3074:	d0012c00 e0000028 44042000 200019ae     .,..(.... .D... 
    3084:	00220005 46594650 fd65f7ff 2c004681     ..".PFYF..e..F.,
    3094:	444cd000 0606eb19 f89de0b0 28000001     ..LD...........(
    30a4:	1dffd008 0707f037 0100e9d7 e9cd3708     ....7........7..
    30b4:	e0040106 1d3f6838 e9cd17c1 e9dd0106     ....8h?.........
    30c4:	00020106 2000000b 428b2100 db01dc0d     ....... .!.B....
    30d4:	d20a4282 0106e9dd eb714240 46820141     .B......@Bq.A..F
    30e4:	2001468b 0002f88d e9dde006 46820106     .F. ...........F
    30f4:	2000468b 0002f88d d0332d00 46594650     .F. .....-3.PFYF
    3104:	fcddf7ff 00051a28 0002f89d d00a2800     ....(........(..
    3114:	f89d1e6d 28300000 2c00d105 202dd002     m.....0(...,..- 
    3124:	1c647020 002a1c76 1000f89d f7ff0020      pd.v.*..... ...
    3134:	0005fda9 d0012c00 e0000028 44042000     .....,..(.... .D
    3144:	200019ae f89d0005 28000002 f89dd014     ... .......(....
    3154:	28200000 2c00d110 202dd002 1c647020     .. (...,..-  pd.
    3164:	e0091c76 0002f89d d0052800 d0022c00     v........(...,..
    3174:	7020202d 1c761c64 46500022 f7ff4659     -  pd.v.".PFYF..
    3184:	4681fcea d0002c00 eb19444c e0350606     ...F.,..LD....5.
    3194:	d02b2c00 f0371dff ed970707 37080b00     .,+...7........7
    31a4:	0b10ec51 f85ef000 0a10ee08 60202014     Q.....^......  `
    31b4:	00209905 0a48eeb0 fd75f7ff f1b94681     .. ...H...u..F..
    31c4:	d5100f00 0f01f119 4921d102 e0070008     ..........!I....
    31d4:	0f02f119 491fd102 e0010008 0008491e     .......I.....I..
    31e4:	21036020 eb194689 444c0606 2c00e006      `.!.F....LD...,
    31f4:	f898d003 70200000 1c761c64 0801f118     ...... pd.v.....
    3204:	2c00e60d 2000d001 00307020 ecbdb008     ...,...  p0.....
    3214:	e8bd8b02 b40e8ff2 0004b578 0006a805     ........x.......
    3224:	00210032 f7ff480d 0005fdef 4906480b     2.!..H.......H.I
    3234:	47886809 bc720028 fb10f85d 4808b580     .h.G(.r.]......H
    3244:	ffe9f7ff 0000bd01 1000119c 100011a8     ................
    3254:	00302e30 00232e23 003f2e3f 10001084     0.0.#.#.?.?.....
    3264:	00009bd4 4200f001 f1a31a8b f5b15160     .......B....`Q..
    3274:	db0a1f80 6f7ff1b1 ea42d21f 00c102c1     .......o..B.....
    3284:	4100f171 7050eb42 150b4770 0309f1c3     q..AB.PppG......
    3294:	d2102b21 ea410289 02805190 41492801     !+....A..Q...(IA
    32a4:	4100f041 f003fa21 0320f1c3 f1714099     A..A!..... ..@q.
    32b4:	41504100 00104770 f06f4770 eb130000     .APApG..pGo.....
    32c4:	bf5c3f10 ea420e00 477050c0 7901b418     .?\...B..PpG...y
    32d4:	f1400789 6801808d d25d2932 8110f3ef     ..@....h2)].....
    32e4:	b6729100 f8df2173 60112314 68012202     ..r.s!...#.`.".h
    32f4:	f0110089 408a011c 085b6803 037cf013     .......@.h[...|.
    3304:	12fcf8df 681918cb 68042307 f01400a4     .......h.#.h....
    3314:	40a3041c 430a4399 085b6803 037cf013     ...@.C.C.h[...|.
    3324:	12dcf8df 601a18cb 68012218 f01100c9     .......`.".h....
    3334:	408a0118 f0137803 f8df03fc 18cb12c8     ...@.x..........
    3344:	23ff6819 00e46804 0418f014 439940a3     .h.#.h.......@.C
    3354:	7803430a 03fcf013 12a8f8df 601a18cb     .C.x...........`
    3364:	f0127802 f8df02fc 188a12a0 21ff6812     .x...........h.!
    3374:	00db6803 0318f013 438a4099 f0137803     .h.......@.C.x..
    3384:	f8df03fc 18cb1284 2100601a 226cf8df     .........`.!..l"
    3394:	99006011 8810f381 78012201 011ff011     .`.......".x....
    33a4:	6803408a f01308db f8df0304 18cb1260     .@.h........`...
    33b4:	7901601a d50d07c9 78012201 011ff011     .`.y.....".x....
    33c4:	6803408a f01308db f8df0304 18cb1244     .@.h........D...
    33d4:	e08e601a 78012201 011ff011 6803408a     .`...".x.....@.h
    33e4:	f01308db f8df0304 18cb122c e080601a     ........,....`..
    33f4:	29326801 f3efd255 91008110 2173b672     .h2)U.......r.s!
    3404:	60114a7e 68012206 f0110089 408a011c     ~J.`.".h.......@
    3414:	085b6803 037cf013 18cb4979 23076819     .h[...|.yI...h.#
    3424:	00a46804 041cf014 439940a3 6803430a     .h.......@.C.C.h
    3434:	f013085b 4972037c 601a18cb 68012218     [...|.rI...`.".h
    3444:	f01100c9 408a0118 f0137803 496d03fc     .......@.x....mI
    3454:	681918cb 680423ff f01400e4 40a30418     ...h.#.h.......@
    3464:	430a4399 f0137803 496603fc 601a18cb     .C.C.x....fI...`
    3474:	f0127802 496402fc 6812188a 680321ff     .x....dI...h.!.h
    3484:	f01300db 40990318 7803438a 03fcf013     .......@.C.x....
    3494:	18cb495d 2100601a 60114a58 f3819900     ]I...`.!XJ.`....
    34a4:	22018810 f0117801 408a011f 08db6803     ...".x.....@.h..
    34b4:	0304f013 18cb4958 7901601a d50c07c9     ....XI...`.y....
    34c4:	78012201 011ff011 6803408a f01308db     .".x.....@.h....
    34d4:	494f0304 601a18cb 2201e00b f0117801     ..OI...`...".x..
    34e4:	408a011f 08db6803 0304f013 18cb4949     ...@.h......II..
    34f4:	bc11601a 00004770 0004b570 2000000d     .`..pG..p...... 
    3504:	42ae0006 eb04d205 f7ff00c6 1c76fedf     ...B..........v.
    3514:	bd70e7f7 eb00b410 791202c1 d5220792     ..p........y..".
    3524:	02c1eb00 07d27912 f850d50e 08db3031     .....y....P.10..
    3534:	0304f013 18d34a36 f8102201 f0144031     ....6J..."..1@..
    3544:	40a2041f e01c601a 3031f850 f01308db     ...@.`..P.10....
    3554:	4a300304 220118d3 4031f810 041ff014     ..0J..."..1@....
    3564:	601a40a2 f850e00d 08db3031 0304f013     .@.`..P.10......
    3574:	18d34a26 f8102201 f0144031 40a2041f     &J..."..1@.....@
    3584:	bc10601a b4104770 02c1eb00 07927912     .`..pG.......y..
    3594:	eb00d522 791202c1 d40e07d2 3031f850     "......y....P.10
    35a4:	f01308db 4a1a0304 220118d3 4031f810     .......J..."..1@
    35b4:	041ff014 601a40a2 f850e01c 08db3031     .....@.`..P.10..
    35c4:	0304f013 18d34a13 f8102201 f0144031     .....J..."..1@..
    35d4:	40a2041f e00d601a 3031f850 f01308db     ...@.`..P.10....
    35e4:	4a0d0304 220118d3 4031f810 041ff014     ...J..."..1@....
    35f4:	601a40a2 4770bc10 00000000 40010060     .@.`..pG....`..@
    3604:	40010040 40010000 400100e0 400100a8     @..@...@...@...@
    3614:	40010090 40010098 400100b4 0004b5f8     ...@...@...@....
    3624:	0016000d 00072000 d20e42af 40f80030     ..... ...B..0..@
    3634:	d50407c0 00200039 ff6cf7ff 0039e003     ....9. ...l...9.
    3644:	f7ff0020 1c7fffa0 bdf1e7ee f5b0b430      ...........0...
    3654:	d1276f00 6300f44f 5080f44f 21402220     .o'.O..cO..P "@!
    3664:	68254c8d 0000ea25 60202b00 80a0f040     .L%h%....+ `@...
    3674:	1e4020c8 4b88d013 420c685c 2800d1f9     . @....K\h.B...(
    3684:	20c8dd0d f0002a00 1e40809c 4982d007     ... .*....@....I
    3694:	4013684b d1f84293 f3002800 bc308092     Kh.@.B...(....0.
    36a4:	47702000 5fc0f5b0 f44fd103 226053c0     . pG..._..O..S`"
    36b4:	2801e07d 2301d106 70fef240 7280f44f     }..(...#@..pO..r
    36c4:	e7cd4976 d1062803 f2402303 f44f70fc     vI...(...#@..pO.
    36d4:	49737240 2807e7c4 2307d107 60fff44f     @rsI...(...#O..`
    36e4:	62e0f44f 21fff44f 280fe7ba 230fd107     O..bO..!...(...#
    36f4:	60fef44f 6270f44f 21fef44f 281fe7b0     O..`O.pbO..!...(
    3704:	231fd107 60fcf44f 52f8f44f 21fcf44f     ...#O..`O..RO..!
    3714:	283fe7a6 233fd107 60f8f44f 527cf44f     ..?(..?#O..`O.|R
    3724:	21f8f44f 287fe79c 237fd107 60f0f44f     O..!...(...#O..`
    3734:	42fef44f 21f0f44f 28ffe792 23ffd107     O..BO..!...(...#
    3744:	60e0f44f 427ff44f 21e0f44f f240e788     O..`O..BO..!..@.
    3754:	429813ff f44fd105 4a5260c0 21c0f44f     ...B..O..`RJO..!
    3764:	f240e77e 429833ff f44fd105 4a4e6080     ~.@..3.B..O..`NJ
    3774:	2180f44f f240e774 429873ff f1b0d016     O..!t.@..s.B....
    3784:	d1044f20 4320f04f 1220f44f f06fe00f      O..O. CO. ...o.
    3794:	42884120 2300d106 4020f04f f44f2200      A.B...#O. @."O.
    37a4:	e75d1120 42984b41 af79f47f 21004a40      .].AK.B..y.@J.!
    37b4:	68204c39 20c84303 60232900 af61f43f     9L h.C. .)#`?.a.
    37c4:	bc30e757 47702001 6848493a 0040f3c0     W.0.. pG:IHh..@.
    37d4:	6848b110 d40c07c2 f042680a 600a0202     ..Hh.....hB....`
    37e4:	f0406808 60080001 f002684a 2a030203     .h@....`Jh.....*
    37f4:	6848d1fa 0003f000 d1fa2803 f0002042     ..Hh.....(..B ..
    3804:	492cb85d f3c06848 b1100040 07c26848     ].,IHh..@...Hh..
    3814:	680ad40c 0202f042 6808600a 0001f040     ...hB....`.h@...
    3824:	684a6008 0203f002 d1fa2a03 49224770     .`Jh.....*..pG"I
    3834:	0ff8f8d1 0040f3c0 f8d1b918 07c20ff8     ......@.........
    3844:	680ad51f 02f0f002 bf042a20 0ffcf8d1     ...h.... *......
    3854:	7f00f5b0 f8d1d106 f0022ff4 f8c10205     ........./......
    3864:	e00b2ff4 0ff4f8d1 0002f020 0ff4f8c1     ./...... .......
    3874:	0ff4f8d1 00400840 0ff4f8c1 f000200a     ....@.@...... ..
    3884:	4770b81d 6981480b 0106f041 68026181     ..pG.H.iA....a.h
    3894:	0204f022 47706002 40021010 0007fe00     "....`pG...@....
    38a4:	0007fc00 0001ff00 0003ff00 a0001fff     ................
    38b4:	0007ff00 40021000 4002000c 1004f8df     .......@...@....
    38c4:	47106b4a 1000100c 684ab081 6809688b     Jk.G......Jh.h.h
    38d4:	4203ea42 bf182900 4200f052 8110f3ef     B..B.)..R..B....
    38e4:	b6729100 117cf8df 1100eb01 0174f8df     ..r...|.......t.
    38f4:	f8d0600a f00110f4 2901010f 2902bf18     .`.........)...)
    3904:	6801d036 0244f3c1 2a041e52 f3c1bf82     6..h..D.R..*....
    3914:	1e494144 d92b2904 f3c16901 1e520244     DAI..)+..i..D.R.
    3924:	bf822a04 4144f3c1 29041e49 6a01d920     .*....DAI..) ..j
    3934:	0244f3c1 2a041e52 f3c1bf82 1e494144     ..D.R..*....DAI.
    3944:	d9152904 f3c06b00 1e490144 bf822904     .)...k..D.I..)..
    3954:	4044f3c0 28041e40 f8dfd90a 6801010c     ..D@@..(.......h
    3964:	0104f041 98006001 8810f380 4770b001     A....`........pG
    3974:	00f4f8df f0226802 60020204 f3809800     .....h"....`....
    3984:	b0018810 00004770 b0814a36 1200eb12     ....pG..6J......
    3994:	8010f3ef b6729000 f0016813 43832008     ......r..h... .C
    39a4:	1101f001 60114319 f3809800 b0018810     .....C.`........
    39b4:	00004770 b0814a2b 1200eb12 8010f3ef     pG..+J..........
    39c4:	b6729000 f0016810 43012108 98006011     ..r..h...!.C.`..
    39d4:	8810f380 4770b001 b081b4f0 4e254d24     ......pG....$M%N
    39e4:	1500eb05 8410f3ef 1600eb16 b6729400     ..............r.
    39f4:	eb044c1c 4c1d1000 42a16800 0c00bf08     .L.....L.h.B....
    3a04:	70e0f400 bf172880 1ad328c0 22004613     ...p.(...(...F."
    3a14:	77fff64f 4002eac3 bf0842b9 d0096028     O..w...@.B..(`..
    3a24:	bf0842a1 d0056030 04120c12 ea426028     .B..0`......(`B.
    3a34:	60324213 f3809800 b0018810 4770bcf0     .B2`..........pG
    3a44:	f3efb081 91008110 490bb672 4310680a     ........r..I.h.C
    3a54:	98006008 8810f380 4770b001 60084907     .`........pG.I.`
    3a64:	00004770 4000800c 40021020 ffff0000     pG.....@ ..@....
    3a74:	40008004 40008008 40008200 40008208     ...@...@...@...@
    3a84:	b081b470 8310f3ef b6729300 681c4b51     p.........r.QK.h
    3a94:	0796681d 0483f3c4 3543f3c5 494ed503     .h........C5..NI
    3aa4:	68496808 07d6e001 06d6d513 681ed507     .hIh...........h
    3ab4:	f0000080 f026003c 4330063c 06906018     ....<.&.<.0C.`..
    3ac4:	6818d507 f4010349 f42031f0 430130f0     ...hI....1 ..0.C
    3ad4:	07516019 06d0d507 483fbf44 06906004     .`Q.....D.?H.`..
    3ae4:	483dbf44 98006045 8810f380 bc70b001     D.=HE`........p.
    3af4:	00004770 b082b570 f0004604 2c01f8a1     pG..p....F.....,
    3b04:	d15a4605 f8d04835 07ca1244 4934d455     .FZ.5H..D...U.4I
    3b14:	680a4e34 0204f042 6801600a f0016872     4N.hB....`.hrh..
    3b24:	292001f0 2102bf0c 1e522100 f8d02a04     .. )...!.!R..*..
    3b34:	f8d02ff4 bf380ffc 0104f041 0f03f012     ./....8.A.......
    3b44:	f041bf18 f2400101 421052ff f041bf08     ..A...@..R.B..A.
    3b54:	290f0108 6870d112 90001e40 31fff04f     ...)..ph@...O..1
    3b64:	f7ff9800 9800ff27 f04f2300 f04f1201     ....'....#O...O.
    3b74:	f7ff31ff f7ffff31 e000fe5a bf302400     .1..1...Z....$0.
    3b84:	2231b1c4 20072107 ff7af7ff f7ff201c     ..1".!. ..z.. ..
    3b94:	f7fffe95 6870fe36 90001e40 70312100     ....6.ph@....!1p
    3ba4:	204c60b1 fe8af7ff f04f9800 f7ff31ff     .`L ......O..1..
    3bb4:	e008feeb 70302001 4909e005 f0306808     ..... 0p...I.h0.
    3bc4:	60080004 4628bf30 e8bdb002 f0004070     ...`0.(F....p@..
    3bd4:	0000b83d 40020068 10001194 4002000c     =...h..@.......@
    3be4:	e000ed10 10001184 d3072810 21013810     .........(...8.!
    3bf4:	001ff000 40814a0e 47706011 d00f2804     .....J.@.`pG.(..
    3c04:	2806d315 d212d006 f8d04809 f4411c24     ...(.....H..$.A.
    3c14:	e00a3100 f8d04806 f4411c24 e0042180     .1...H..$.A..!..
    3c24:	f8d04803 f4411c24 f8c03180 47701c24     .H..$.A..1..$.pG
    3c34:	e000e100 8010f3ef 4770b662 00004770     ........b.pGpG..
    3c44:	8010f3ef 4770b672 00004770 8810f380     ....r.pGpG......
    3c54:	47704770 2002b510 f8aff000 71fff64f     pGpG... ....O..q
    3c64:	f7ff2000 493bfea7 f7ff2000 2008fe2d     . ....;I. ..-.. 
    3c74:	00230004 0022085b 71fff64f f7ff2000     ..#.[.".O..q. ..
    3c84:	2001feab feeaf7ff b580bd10 f7ff2001     ... ......... ..
    3c94:	4831fee5 1c406800 6008492f d3022820     ..1H.h@./I.` (..
    3ca4:	492d2000 bd016008 2000b580 f866f000     . -I.`..... ..f.
    3cb4:	f000482a f000f8db 4829f937 fe72f7fe     *H......7.)H..r.
    3cc4:	8010f3ef b6729000 49262073 48266008     ......r.s &I.`&H
    3cd4:	f0306800 49240070 48246008 f4306800     .h0.p.$I.`$H.h0.
    3ce4:	f450407f 49215080 48216008 f4306800     .@P..P!I.`!H.h0.
    3cf4:	491f407f 20006008 6008491a f3809800     .@.I.`. .I.`....
    3d04:	21058810 f7ff481b f000fbf7 f000f996     ...!.H..........
    3d14:	f7fff91f 4818fa93 fa7df7ff ff9af7ff     .......H..}.....
    3d24:	f7ff2001 201dfe8d ff5ef7ff ff82f7ff     . ..... ..^.....
    3d34:	71fff64f f7ff2000 f000fe27 2001f937     O..q. ..'...7.. 
    3d44:	fed8f7ff 68024804 480a2105 fc66f7ff     .....H.h.!.H..f.
    3d54:	0000e7f5 10001000 100011a0 00009be8     ................
    3d64:	00009739 40010060 40010054 40010028     9...`..@T..@(..@
    3d74:	40010108 1000105c 00009bbc 0004b510     ...@\...........
    3d84:	f20fd006 f20f02b0 2150005c f9aff000     ........\.P!....
    3d94:	2147480f 60446001 60012100 480dbd10     .HG!.`D`.!.`...H
    3da4:	f0106800 d0040001 d0042801 30fff04f     .h.......(..O..0
    3db4:	48094770 48094770 49094770 ea22680a     pG.HpG.HpG.I.h".
    3dc4:	60080000 49064770 4310680a 47706008     ...`pG.I.h.C.`pG
    3dd4:	40004014 40004018 02dc6c00 016e3600     .@.@.@.@.l...6n.
    3de4:	4000400c 6a5c3a43 615c7376 7169626d     .@.@C:\jvs\ambiq
    3df4:	726f775c 65745c6b 6e697473 65525c67     \work\testing\Re
    3e04:	2e312d6c 5c392e32 69626d41 69755371     l-1.2.9\AmbiqSui
    3e14:	6d5c6574 615c7563 6c6c6f70 685c326f     te\mcu\apollo2\h
    3e24:	615c6c61 61685f6d 6c635f6c 6e65676b     al\am_hal_clkgen
    3e34:	0000632e 685f6d61 635f6c61 65676b6c     .c..am_hal_clkge
    3e44:	79735f6e 6b6c6373 6c65735f 28746365     n_sysclk_select(
    3e54:	69203a29 6c61766e 63206469 6b636f6c     ): invalid clock
    3e64:	74657320 676e6974 0000002e 4605b530      setting....0..F
    3e74:	78acb081 00407868 086400a1 0002f000     ...xhx@...d.....
    3e84:	0104f001 430800e4 0408f004 78e84304     .......C.....C.x
    3e94:	79284304 f00001c0 43040080 028079a8     .C(y.......C.y..
    3ea4:	6080f400 79e84304 f40002c0 43046000     ...`.C.y.....`.C
    3eb4:	03007a28 4070f400 7a684304 f4000400     (z....p@.Chz....
    3ec4:	43042070 05007aa8 1080f400 7ae84304     p .C.z.......C.z
    3ed4:	f0000600 43047080 4020f04f fbb6f7ff     .....p.CO. @....
    3ee4:	f0444910 600c0401 688a2032 d4010753     .ID....`2 .hS...
    3ef4:	d1fa1e40 f0406888 60880001 688a2032     @....h@....`2 .h
    3f04:	d4010753 d1fa1e40 02027968 f4020840     S...@...hy..@...
    3f14:	02407280 f4004314 43047000 b001600c     .r@..C...p.C.`..
    3f24:	0000bd30 40018000 b081b500 fc4cf7ff     0......@......L.
    3f34:	fca8f7ff f8dcf000 f0002001 2001f8df     ......... ..... 
    3f44:	ff41f7ff f85db001 f000eb04 0000b8e4     ..A...].........
    3f54:	6801482d d50007ca b5004770 482c492b     -H.h....pG..+I,H
    3f64:	6008b087 492ba801 f0009101 f3eff8df     ...`..+I........
    3f74:	90008010 4828b672 63812173 f0216ac1     ....r.(Hs!.c.j!.
    3f84:	62c10170 f4226802 f442427f 60025280     p..b.h"..BB..R.`
    3f94:	f8d02200 f42110e0 f8c0417f 638210e0     ."....!..A.....c
    3fa4:	f3809800 b0078810 0000bd00 4816b500     ...............H
    3fb4:	6801b081 d42407ca f858f000 8010f3ef     ...h..$...X.....
    3fc4:	b6729000 21734814 22006381 f0216ac1     ..r..Hs!.c.".j!.
    3fd4:	f0410170 62c10120 f4216801 f441417f     p.A. ..b.h!..AA.
    3fe4:	600151c0 10e0f8d0 417ff421 10e0f8c0     .Q.`....!..A....
    3ff4:	98006382 8810f380 f85db001 f000eb04     .c........].....
    4004:	b001b8d2 0000bd00 100011a4 e0000e80     ................
    4014:	00150511 000f4240 40010028 b848f000     ....@B..(..@..H.
    4024:	4604b510 febbf7ff fba04a1a 0d482102     ...F.....J...!H.
    4034:	e8bd4360 f7ff4010 4817bc41 07ca6801     `C...@..A..H.h..
    4044:	4816d413 f0416801 60017180 01d16802     ...H.hA..q.`.h..
    4054:	4813d5fc f8c04913 210f11b0 f04f6401     ...H.I.....!.dO.
    4064:	600131ff f8c04910 47701080 b081b500     .1.`.I....pG....
    4074:	6801480e d4fc020a fe91f7ff fba04b05     .H.h.........K..
    4084:	b0013203 21320d50 eb04f85d f000fb11     .2..P.2!].......
    4094:	bc14f7ff b2f4fc08 100011a4 e000edfc     ................
    40a4:	e0000e00 c5acce55 00150511 e0000e80     ....U...........
    40b4:	22007801 1c52b1d1 b1535c83 5c811c52     .x."..R..\S.R..\
    40c4:	1c52b139 2b005c83 1c52d003 29005c81     9.R..\.+..R..\.)
    40d4:	b15ad1f1 4360f04f c000f890 29006819     ..Z.O.`C.....h.)
    40e4:	1c40d0fc f8831e52 d1f5c000 e7fe4770     ..@.R.......pG..
    40f4:	20374901 47706008 4000c008 1024f8df     .I7 .`pG...@..$.
    4104:	6808b120 0080f040 47706008 f022680a      ..h@....`pG.h".
    4114:	600a0280 f8df4770 68010010 0110f041     ...`pG.....hA...
    4124:	47706001 4000400c 40004050 b081b530     .`pG.@.@P@.@0...
    4134:	4d206804 f8c52100 b1fc1300 60282001     .h M.!....... (`
    4144:	4061f5a4 4288491c 4c1cbf28 fe27f7ff     ..a@.I.B(..L..'.
    4154:	0f01f110 08c0d005 f0f4fbb0 b2801e40     ............@...
    4164:	2005e000 200260e8 00ecf8c5 f8c52000     ... .`. ..... ..
    4174:	f2400efc 490e2001 e00e6008 60e96901     ..@.. .I.`...i.`
    4184:	68812201 10ecf8c5 1e5968c3 602a408a     .".h.....hY..@*`
    4194:	680a4907 43026840 b001600a 4030e8bd     .I.h@h.C.`....0@
    41a4:	f7ff2032 4902bf3d 60082000 00004770     2 ..=..I. .`pG..
    41b4:	40020250 e0040004 001da381 000f4240     P..@........@B..
    41c4:	4668b580 f0003008 bd01f808 00004770     ..hF.0......pG..
    41d4:	18400080 47706800 b5304770 0004b093     ..@..hpGpG0.....
    41e4:	2118a80c f852f000 950a2500 68004825     ...!..R..%..%H.h
    41f4:	980a900a 002cf88d 0a00980a 002df88d     ......,.......-.
    4204:	0c00980a 002ef8ad 6800481f f89d9009     .........H.h....
    4214:	0780002d 0021d504 f7ff2006 e001ffd9     -.....!.. ......
    4224:	30fff05f 00219008 f7ff2000 9000ffd1     _..0..!.. ......
    4234:	20010021 ffccf7ff 00219001 f7ff2002     !.. ......!.. ..
    4244:	9002ffc7 20030021 ffc2f7ff 00219003     ....!.. ......!.
    4254:	f7ff2004 9004ffbd 20050021 ffb8f7ff     . ......!.. ....
    4264:	00219005 f7ff2006 9006ffb3 20070021     ..!.. ......!.. 
    4274:	ffaef7ff a80c9007 f80cf000 00052000     ............. ..
    4284:	0000e7fe e000ed28 e000ed38 f0002200     ....(...8...."..
    4294:	0000b81b 68d14a0b 0301f001 084b7003     .....J.h.....pK.
    42a4:	f0010889 f0030101 74010301 68517203     ...........t.rQh
    42b4:	60c16843 430b6811 69436043 430b6891     Ch.`.h.CC`Ci.h.C
    42c4:	47706143 400201c0 bf00b500 46960013     CapG...@.......F
    42d4:	39104694 e8a0bf28 d8fa500c 7c41ea5f     .F.9(....P.._.A|
    42e4:	c00cbf28 f840bf48 07c92b04 f820bf28     (...H.@..+..(. .
    42f4:	bf482b02 2b01f800 0000bd00 00000000     .+H....+........
    4304:	00000256 00000000 0800004d 08000051     V.......M...Q...
    4314:	08000055 08000059 0800006d 08000071     U...Y...m...q...
    4324:	0800007d 08000081 08000089 08000091     }...............
    4334:	08000099 08000075 08000079 0800009d     ....u...y.......
    4344:	0800005d 08000061 08000065 08000069     ]...a...e...i...
    4354:	08000085 0800008d 00000011 00000003     ................
    4364:	0000000e 00000003 0000000f 00000003     ................
    4374:	0000001e 00000003 0000000a 00000003     ................
    4384:	f850e019 07d32b04 f1a9bf44 189a0301     ..P..+..D.......
    4394:	23001f09 f8422904 d2f93b04 7c81ea5f     ...#.)B..;.._..|
    43a4:	d5044613 0c00f04f c000f8a2 07c91c9b     .F..O...........
    43b4:	2100bf44 f8507019 29001b04 4770d1e1     D..!.pP....)..pG
    43c4:	f850b410 b1791b04 68436802 30084402     ..P...y..hCh.D.0
    43d4:	bf4407dc 0401f1a9 f85218e3 f8434b04     ..D.......R..KC.
    43e4:	1f094b04 e7ecd1f9 4770bc10 4907b510     .K........pG...I
    43f4:	31184479 447c4c06 e0043416 1d08680a     yD.1.L|D.4...h..
    4404:	47884411 42a14601 bd10d1f8 0000002c     .D.G.F.B....,...
    4414:	0000004c 5188f64e 0100f2ce f4406808     L...N..Q.....h@.
    4424:	60080070 8f4ff3bf 8f6ff3bf 7000f04f     p..`..O...o.O..p
    4434:	0a10eee1 00004770 ffffff49 00000128     ....pG..I...(...
    4444:	10001084 00000000 ffffff79 00000084     ........y.......
    4454:	fffffeac 10001000 00000000 f80bf000     ................
    4464:	d0012800 ffc2f7ff f3af2000 f7ff8000     .(....... ......
    4474:	f000fc1b 2001f802 f0004770 0000b801     ....... pG......
    4484:	46384607 f802f000 0000e7fb f3afb580     .F8F............
    4494:	4a028000 20180011 e7fbbeab 00020026     ...J... ....&...
    44a4:	616e6942 43207972 746e756f 45207265     Binary Counter E
    44b4:	706d6178 000a656c 0a0a0a0a 0a0a0a0a     xample..........
    44c4:	0a0a0a0a 0a0a0a0a 00000a0a 50000001     ...............P
    44d4:	00010300 00010101 8000f3af ff9af7ff     ................
    44e4:	ffbcf7ff fff8f7ff e7fe4770 0000e7fe     ........pG......

000044f4 <g_sIOMConfig>:
    44f4:	00000001 000186a0 3c040000              ...........<

00004500 <g_SPIpins>:
    4500:	00000006 0000000a 00000009 0000000a     ................
    4510:	00000019 0000002a 0000002b 0000002a     ....*...+...*...
    4520:	00000028 0000002a 00000031 0000002a     (...*...1...*...

00004530 <am_hal_cachectrl_defaults>:
    4530:	50000001 00010300 00010101 685f6d61     ...P........am_h
    4540:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    4550:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    4560:	63206469 6b636f6c 74657320 676e6974     id clock setting
    4570:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    4580:	6b6c635f 2e6e6567 00000063 20656854     _clkgen.c...The 
    4590:	6f666966 756f6320 276e646c 69662074     fifo couldn't fi
    45a0:	68742074 65722065 73657571 20646574     t the requested 
    45b0:	626d756e 6f207265 79622066 00736574     number of bytes.
    45c0:	2e5c2e2e 6d615c2e 6c61685f 6d6f695f     ..\..\am_hal_iom
    45d0:	0000632e 20656854 6f666966 656f6420     .c..The fifo doe
    45e0:	74276e73 6e6f6320 6e696174 65687420     sn't contain the
    45f0:	71657220 74736575 6e206465 65626d75      requested numbe
    4600:	666f2072 74796220 002e7365 69797254     r of bytes..Tryi
    4610:	7420676e 6e65206f 656c6261 206e6120     ng to enable an 
    4620:	204d4f49 75646f6d 7420656c 20746168     IOM module that 
    4630:	73656f64 2074276e 73697865 00002e74     doesn't exist...
    4640:	69797254 7420676e 6f64206f 30206120     Trying to do a 0
    4650:	74796220 72742065 61736e61 6f697463      byte transactio
    4660:	0000006e 20495053 6e617274 72656673     n...SPI transfer
    4670:	6f6f7420 67696220 0000002e 61766e49      too big....Inva
    4680:	2064696c 46206948 75716572 79636e65     lid Hi Frequency
    4690:	726f6620 4d4f4920 0000002e 6e6e6143      for IOM....Cann
    46a0:	6520746f 6c62616e 6f6d2065 74206572     ot enable more t
    46b0:	206e6168 20656e6f 69726570 72656870     han one peripher
    46c0:	61206c61 20612074 656d6974 0000002e     al at a time....
    46d0:	2e5c2e2e 6d615c2e 6c61685f 7277705f     ..\..\am_hal_pwr
    46e0:	6c727463 0000632e                       ctrl.c..
