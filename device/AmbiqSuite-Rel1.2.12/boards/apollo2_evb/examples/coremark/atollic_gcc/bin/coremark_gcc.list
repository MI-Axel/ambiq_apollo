
coremark_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005f60  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000048  10001000  00005f60  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000528  10001048  00005fa8  00021048  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021048  2**0
                  CONTENTS, READONLY
  5 .debug_info   000153db  00000000  00000000  0002107f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003b1e  00000000  00000000  0003645a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    0000afe2  00000000  00000000  00039f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000009a0  00000000  00000000  00044f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00001fe0  00000000  00000000  000458fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000075a8  00000000  00000000  000478da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003a08  00000000  00000000  0004ee82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000007c  00000000  00000000  0005288a  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00001d44  00000000  00000000  00052908  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 bd 3a 00 00 b5 3a 00 00 45 3b 00 00     .....:...:..E;..
      10:	45 3b 00 00 45 3b 00 00 45 3b 00 00 00 00 00 00     E;..E;..E;......
	...
      2c:	b9 3a 00 00 b9 3a 00 00 00 00 00 00 b9 3a 00 00     .:...:.......:..
      3c:	61 0c 00 00 b9 3a 00 00 b9 3a 00 00 b9 3a 00 00     a....:...:...:..
      4c:	b9 3a 00 00 b9 3a 00 00 b9 3a 00 00 b9 3a 00 00     .:...:...:...:..
      5c:	b9 3a 00 00 b9 3a 00 00 b9 3a 00 00 b9 3a 00 00     .:...:...:...:..
      6c:	b9 3a 00 00 b9 3a 00 00 b9 3a 00 00 b9 3a 00 00     .:...:...:...:..
      7c:	b9 3a 00 00 b9 3a 00 00 b9 3a 00 00 b9 3a 00 00     .:...:...:...:..
      8c:	b9 3a 00 00 b9 3a 00 00 b9 3a 00 00 b9 3a 00 00     .:...:...:...:..
      9c:	b9 3a 00 00 b9 3a 00 00 b9 3a 00 00 b9 3a 00 00     .:...:...:...:..
      ac:	b9 3a 00 00 b9 3a 00 00 b9 3a 00 00 b9 3a 00 00     .:...:...:...:..
      bc:	b9 3a 00 00                                         .:..

000000c0 <__aeabi_drsub>:
      c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
      c4:	e002      	b.n	cc <__adddf3>
      c6:	bf00      	nop

000000c8 <__aeabi_dsub>:
      c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000000cc <__adddf3>:
      cc:	b530      	push	{r4, r5, lr}
      ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
      d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
      d6:	ea94 0f05 	teq	r4, r5
      da:	bf08      	it	eq
      dc:	ea90 0f02 	teqeq	r0, r2
      e0:	bf1f      	itttt	ne
      e2:	ea54 0c00 	orrsne.w	ip, r4, r0
      e6:	ea55 0c02 	orrsne.w	ip, r5, r2
      ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
      ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
      f2:	f000 80e2 	beq.w	2ba <__adddf3+0x1ee>
      f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
      fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
      fe:	bfb8      	it	lt
     100:	426d      	neglt	r5, r5
     102:	dd0c      	ble.n	11e <__adddf3+0x52>
     104:	442c      	add	r4, r5
     106:	ea80 0202 	eor.w	r2, r0, r2
     10a:	ea81 0303 	eor.w	r3, r1, r3
     10e:	ea82 0000 	eor.w	r0, r2, r0
     112:	ea83 0101 	eor.w	r1, r3, r1
     116:	ea80 0202 	eor.w	r2, r0, r2
     11a:	ea81 0303 	eor.w	r3, r1, r3
     11e:	2d36      	cmp	r5, #54	; 0x36
     120:	bf88      	it	hi
     122:	bd30      	pophi	{r4, r5, pc}
     124:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     128:	ea4f 3101 	mov.w	r1, r1, lsl #12
     12c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     130:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     134:	d002      	beq.n	13c <__adddf3+0x70>
     136:	4240      	negs	r0, r0
     138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     13c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     140:	ea4f 3303 	mov.w	r3, r3, lsl #12
     144:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     148:	d002      	beq.n	150 <__adddf3+0x84>
     14a:	4252      	negs	r2, r2
     14c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     150:	ea94 0f05 	teq	r4, r5
     154:	f000 80a7 	beq.w	2a6 <__adddf3+0x1da>
     158:	f1a4 0401 	sub.w	r4, r4, #1
     15c:	f1d5 0e20 	rsbs	lr, r5, #32
     160:	db0d      	blt.n	17e <__adddf3+0xb2>
     162:	fa02 fc0e 	lsl.w	ip, r2, lr
     166:	fa22 f205 	lsr.w	r2, r2, r5
     16a:	1880      	adds	r0, r0, r2
     16c:	f141 0100 	adc.w	r1, r1, #0
     170:	fa03 f20e 	lsl.w	r2, r3, lr
     174:	1880      	adds	r0, r0, r2
     176:	fa43 f305 	asr.w	r3, r3, r5
     17a:	4159      	adcs	r1, r3
     17c:	e00e      	b.n	19c <__adddf3+0xd0>
     17e:	f1a5 0520 	sub.w	r5, r5, #32
     182:	f10e 0e20 	add.w	lr, lr, #32
     186:	2a01      	cmp	r2, #1
     188:	fa03 fc0e 	lsl.w	ip, r3, lr
     18c:	bf28      	it	cs
     18e:	f04c 0c02 	orrcs.w	ip, ip, #2
     192:	fa43 f305 	asr.w	r3, r3, r5
     196:	18c0      	adds	r0, r0, r3
     198:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     19c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1a0:	d507      	bpl.n	1b2 <__adddf3+0xe6>
     1a2:	f04f 0e00 	mov.w	lr, #0
     1a6:	f1dc 0c00 	rsbs	ip, ip, #0
     1aa:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ae:	eb6e 0101 	sbc.w	r1, lr, r1
     1b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1b6:	d31b      	bcc.n	1f0 <__adddf3+0x124>
     1b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1bc:	d30c      	bcc.n	1d8 <__adddf3+0x10c>
     1be:	0849      	lsrs	r1, r1, #1
     1c0:	ea5f 0030 	movs.w	r0, r0, rrx
     1c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     1c8:	f104 0401 	add.w	r4, r4, #1
     1cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
     1d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     1d4:	f080 809a 	bcs.w	30c <__adddf3+0x240>
     1d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     1dc:	bf08      	it	eq
     1de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     1e2:	f150 0000 	adcs.w	r0, r0, #0
     1e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     1ea:	ea41 0105 	orr.w	r1, r1, r5
     1ee:	bd30      	pop	{r4, r5, pc}
     1f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     1f4:	4140      	adcs	r0, r0
     1f6:	eb41 0101 	adc.w	r1, r1, r1
     1fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     1fe:	f1a4 0401 	sub.w	r4, r4, #1
     202:	d1e9      	bne.n	1d8 <__adddf3+0x10c>
     204:	f091 0f00 	teq	r1, #0
     208:	bf04      	itt	eq
     20a:	4601      	moveq	r1, r0
     20c:	2000      	moveq	r0, #0
     20e:	fab1 f381 	clz	r3, r1
     212:	bf08      	it	eq
     214:	3320      	addeq	r3, #32
     216:	f1a3 030b 	sub.w	r3, r3, #11
     21a:	f1b3 0220 	subs.w	r2, r3, #32
     21e:	da0c      	bge.n	23a <__adddf3+0x16e>
     220:	320c      	adds	r2, #12
     222:	dd08      	ble.n	236 <__adddf3+0x16a>
     224:	f102 0c14 	add.w	ip, r2, #20
     228:	f1c2 020c 	rsb	r2, r2, #12
     22c:	fa01 f00c 	lsl.w	r0, r1, ip
     230:	fa21 f102 	lsr.w	r1, r1, r2
     234:	e00c      	b.n	250 <__adddf3+0x184>
     236:	f102 0214 	add.w	r2, r2, #20
     23a:	bfd8      	it	le
     23c:	f1c2 0c20 	rsble	ip, r2, #32
     240:	fa01 f102 	lsl.w	r1, r1, r2
     244:	fa20 fc0c 	lsr.w	ip, r0, ip
     248:	bfdc      	itt	le
     24a:	ea41 010c 	orrle.w	r1, r1, ip
     24e:	4090      	lslle	r0, r2
     250:	1ae4      	subs	r4, r4, r3
     252:	bfa2      	ittt	ge
     254:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     258:	4329      	orrge	r1, r5
     25a:	bd30      	popge	{r4, r5, pc}
     25c:	ea6f 0404 	mvn.w	r4, r4
     260:	3c1f      	subs	r4, #31
     262:	da1c      	bge.n	29e <__adddf3+0x1d2>
     264:	340c      	adds	r4, #12
     266:	dc0e      	bgt.n	286 <__adddf3+0x1ba>
     268:	f104 0414 	add.w	r4, r4, #20
     26c:	f1c4 0220 	rsb	r2, r4, #32
     270:	fa20 f004 	lsr.w	r0, r0, r4
     274:	fa01 f302 	lsl.w	r3, r1, r2
     278:	ea40 0003 	orr.w	r0, r0, r3
     27c:	fa21 f304 	lsr.w	r3, r1, r4
     280:	ea45 0103 	orr.w	r1, r5, r3
     284:	bd30      	pop	{r4, r5, pc}
     286:	f1c4 040c 	rsb	r4, r4, #12
     28a:	f1c4 0220 	rsb	r2, r4, #32
     28e:	fa20 f002 	lsr.w	r0, r0, r2
     292:	fa01 f304 	lsl.w	r3, r1, r4
     296:	ea40 0003 	orr.w	r0, r0, r3
     29a:	4629      	mov	r1, r5
     29c:	bd30      	pop	{r4, r5, pc}
     29e:	fa21 f004 	lsr.w	r0, r1, r4
     2a2:	4629      	mov	r1, r5
     2a4:	bd30      	pop	{r4, r5, pc}
     2a6:	f094 0f00 	teq	r4, #0
     2aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ae:	bf06      	itte	eq
     2b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2b4:	3401      	addeq	r4, #1
     2b6:	3d01      	subne	r5, #1
     2b8:	e74e      	b.n	158 <__adddf3+0x8c>
     2ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2be:	bf18      	it	ne
     2c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     2c4:	d029      	beq.n	31a <__adddf3+0x24e>
     2c6:	ea94 0f05 	teq	r4, r5
     2ca:	bf08      	it	eq
     2cc:	ea90 0f02 	teqeq	r0, r2
     2d0:	d005      	beq.n	2de <__adddf3+0x212>
     2d2:	ea54 0c00 	orrs.w	ip, r4, r0
     2d6:	bf04      	itt	eq
     2d8:	4619      	moveq	r1, r3
     2da:	4610      	moveq	r0, r2
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	ea91 0f03 	teq	r1, r3
     2e2:	bf1e      	ittt	ne
     2e4:	2100      	movne	r1, #0
     2e6:	2000      	movne	r0, #0
     2e8:	bd30      	popne	{r4, r5, pc}
     2ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     2ee:	d105      	bne.n	2fc <__adddf3+0x230>
     2f0:	0040      	lsls	r0, r0, #1
     2f2:	4149      	adcs	r1, r1
     2f4:	bf28      	it	cs
     2f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     2fa:	bd30      	pop	{r4, r5, pc}
     2fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     300:	bf3c      	itt	cc
     302:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     306:	bd30      	popcc	{r4, r5, pc}
     308:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     30c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     310:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     314:	f04f 0000 	mov.w	r0, #0
     318:	bd30      	pop	{r4, r5, pc}
     31a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     31e:	bf1a      	itte	ne
     320:	4619      	movne	r1, r3
     322:	4610      	movne	r0, r2
     324:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     328:	bf1c      	itt	ne
     32a:	460b      	movne	r3, r1
     32c:	4602      	movne	r2, r0
     32e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     332:	bf06      	itte	eq
     334:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     338:	ea91 0f03 	teqeq	r1, r3
     33c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     340:	bd30      	pop	{r4, r5, pc}
     342:	bf00      	nop

00000344 <__aeabi_ui2d>:
     344:	f090 0f00 	teq	r0, #0
     348:	bf04      	itt	eq
     34a:	2100      	moveq	r1, #0
     34c:	4770      	bxeq	lr
     34e:	b530      	push	{r4, r5, lr}
     350:	f44f 6480 	mov.w	r4, #1024	; 0x400
     354:	f104 0432 	add.w	r4, r4, #50	; 0x32
     358:	f04f 0500 	mov.w	r5, #0
     35c:	f04f 0100 	mov.w	r1, #0
     360:	e750      	b.n	204 <__adddf3+0x138>
     362:	bf00      	nop

00000364 <__aeabi_i2d>:
     364:	f090 0f00 	teq	r0, #0
     368:	bf04      	itt	eq
     36a:	2100      	moveq	r1, #0
     36c:	4770      	bxeq	lr
     36e:	b530      	push	{r4, r5, lr}
     370:	f44f 6480 	mov.w	r4, #1024	; 0x400
     374:	f104 0432 	add.w	r4, r4, #50	; 0x32
     378:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     37c:	bf48      	it	mi
     37e:	4240      	negmi	r0, r0
     380:	f04f 0100 	mov.w	r1, #0
     384:	e73e      	b.n	204 <__adddf3+0x138>
     386:	bf00      	nop

00000388 <__aeabi_f2d>:
     388:	0042      	lsls	r2, r0, #1
     38a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     38e:	ea4f 0131 	mov.w	r1, r1, rrx
     392:	ea4f 7002 	mov.w	r0, r2, lsl #28
     396:	bf1f      	itttt	ne
     398:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     39c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3a4:	4770      	bxne	lr
     3a6:	f092 0f00 	teq	r2, #0
     3aa:	bf14      	ite	ne
     3ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3b0:	4770      	bxeq	lr
     3b2:	b530      	push	{r4, r5, lr}
     3b4:	f44f 7460 	mov.w	r4, #896	; 0x380
     3b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     3c0:	e720      	b.n	204 <__adddf3+0x138>
     3c2:	bf00      	nop

000003c4 <__aeabi_ul2d>:
     3c4:	ea50 0201 	orrs.w	r2, r0, r1
     3c8:	bf08      	it	eq
     3ca:	4770      	bxeq	lr
     3cc:	b530      	push	{r4, r5, lr}
     3ce:	f04f 0500 	mov.w	r5, #0
     3d2:	e00a      	b.n	3ea <__aeabi_l2d+0x16>

000003d4 <__aeabi_l2d>:
     3d4:	ea50 0201 	orrs.w	r2, r0, r1
     3d8:	bf08      	it	eq
     3da:	4770      	bxeq	lr
     3dc:	b530      	push	{r4, r5, lr}
     3de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     3e2:	d502      	bpl.n	3ea <__aeabi_l2d+0x16>
     3e4:	4240      	negs	r0, r0
     3e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     3ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     3f6:	f43f aedc 	beq.w	1b2 <__adddf3+0xe6>
     3fa:	f04f 0203 	mov.w	r2, #3
     3fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     402:	bf18      	it	ne
     404:	3203      	addne	r2, #3
     406:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     40a:	bf18      	it	ne
     40c:	3203      	addne	r2, #3
     40e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     412:	f1c2 0320 	rsb	r3, r2, #32
     416:	fa00 fc03 	lsl.w	ip, r0, r3
     41a:	fa20 f002 	lsr.w	r0, r0, r2
     41e:	fa01 fe03 	lsl.w	lr, r1, r3
     422:	ea40 000e 	orr.w	r0, r0, lr
     426:	fa21 f102 	lsr.w	r1, r1, r2
     42a:	4414      	add	r4, r2
     42c:	e6c1      	b.n	1b2 <__adddf3+0xe6>
     42e:	bf00      	nop

00000430 <__aeabi_dmul>:
     430:	b570      	push	{r4, r5, r6, lr}
     432:	f04f 0cff 	mov.w	ip, #255	; 0xff
     436:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     43a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     43e:	bf1d      	ittte	ne
     440:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     444:	ea94 0f0c 	teqne	r4, ip
     448:	ea95 0f0c 	teqne	r5, ip
     44c:	f000 f8de 	bleq	60c <__aeabi_dmul+0x1dc>
     450:	442c      	add	r4, r5
     452:	ea81 0603 	eor.w	r6, r1, r3
     456:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     45a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     45e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     462:	bf18      	it	ne
     464:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     468:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     46c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     470:	d038      	beq.n	4e4 <__aeabi_dmul+0xb4>
     472:	fba0 ce02 	umull	ip, lr, r0, r2
     476:	f04f 0500 	mov.w	r5, #0
     47a:	fbe1 e502 	umlal	lr, r5, r1, r2
     47e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     482:	fbe0 e503 	umlal	lr, r5, r0, r3
     486:	f04f 0600 	mov.w	r6, #0
     48a:	fbe1 5603 	umlal	r5, r6, r1, r3
     48e:	f09c 0f00 	teq	ip, #0
     492:	bf18      	it	ne
     494:	f04e 0e01 	orrne.w	lr, lr, #1
     498:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     49c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4a4:	d204      	bcs.n	4b0 <__aeabi_dmul+0x80>
     4a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4aa:	416d      	adcs	r5, r5
     4ac:	eb46 0606 	adc.w	r6, r6, r6
     4b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     4b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     4bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     4c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     4c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     4c8:	bf88      	it	hi
     4ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     4ce:	d81e      	bhi.n	50e <__aeabi_dmul+0xde>
     4d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     4d4:	bf08      	it	eq
     4d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     4da:	f150 0000 	adcs.w	r0, r0, #0
     4de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     4e2:	bd70      	pop	{r4, r5, r6, pc}
     4e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     4e8:	ea46 0101 	orr.w	r1, r6, r1
     4ec:	ea40 0002 	orr.w	r0, r0, r2
     4f0:	ea81 0103 	eor.w	r1, r1, r3
     4f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     4f8:	bfc2      	ittt	gt
     4fa:	ebd4 050c 	rsbsgt	r5, r4, ip
     4fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     502:	bd70      	popgt	{r4, r5, r6, pc}
     504:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     508:	f04f 0e00 	mov.w	lr, #0
     50c:	3c01      	subs	r4, #1
     50e:	f300 80ab 	bgt.w	668 <__aeabi_dmul+0x238>
     512:	f114 0f36 	cmn.w	r4, #54	; 0x36
     516:	bfde      	ittt	le
     518:	2000      	movle	r0, #0
     51a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     51e:	bd70      	pople	{r4, r5, r6, pc}
     520:	f1c4 0400 	rsb	r4, r4, #0
     524:	3c20      	subs	r4, #32
     526:	da35      	bge.n	594 <__aeabi_dmul+0x164>
     528:	340c      	adds	r4, #12
     52a:	dc1b      	bgt.n	564 <__aeabi_dmul+0x134>
     52c:	f104 0414 	add.w	r4, r4, #20
     530:	f1c4 0520 	rsb	r5, r4, #32
     534:	fa00 f305 	lsl.w	r3, r0, r5
     538:	fa20 f004 	lsr.w	r0, r0, r4
     53c:	fa01 f205 	lsl.w	r2, r1, r5
     540:	ea40 0002 	orr.w	r0, r0, r2
     544:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     548:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     54c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     550:	fa21 f604 	lsr.w	r6, r1, r4
     554:	eb42 0106 	adc.w	r1, r2, r6
     558:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     55c:	bf08      	it	eq
     55e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     562:	bd70      	pop	{r4, r5, r6, pc}
     564:	f1c4 040c 	rsb	r4, r4, #12
     568:	f1c4 0520 	rsb	r5, r4, #32
     56c:	fa00 f304 	lsl.w	r3, r0, r4
     570:	fa20 f005 	lsr.w	r0, r0, r5
     574:	fa01 f204 	lsl.w	r2, r1, r4
     578:	ea40 0002 	orr.w	r0, r0, r2
     57c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     580:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     584:	f141 0100 	adc.w	r1, r1, #0
     588:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     58c:	bf08      	it	eq
     58e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     592:	bd70      	pop	{r4, r5, r6, pc}
     594:	f1c4 0520 	rsb	r5, r4, #32
     598:	fa00 f205 	lsl.w	r2, r0, r5
     59c:	ea4e 0e02 	orr.w	lr, lr, r2
     5a0:	fa20 f304 	lsr.w	r3, r0, r4
     5a4:	fa01 f205 	lsl.w	r2, r1, r5
     5a8:	ea43 0302 	orr.w	r3, r3, r2
     5ac:	fa21 f004 	lsr.w	r0, r1, r4
     5b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5b4:	fa21 f204 	lsr.w	r2, r1, r4
     5b8:	ea20 0002 	bic.w	r0, r0, r2
     5bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     5c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5c4:	bf08      	it	eq
     5c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f094 0f00 	teq	r4, #0
     5d0:	d10f      	bne.n	5f2 <__aeabi_dmul+0x1c2>
     5d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     5d6:	0040      	lsls	r0, r0, #1
     5d8:	eb41 0101 	adc.w	r1, r1, r1
     5dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     5e0:	bf08      	it	eq
     5e2:	3c01      	subeq	r4, #1
     5e4:	d0f7      	beq.n	5d6 <__aeabi_dmul+0x1a6>
     5e6:	ea41 0106 	orr.w	r1, r1, r6
     5ea:	f095 0f00 	teq	r5, #0
     5ee:	bf18      	it	ne
     5f0:	4770      	bxne	lr
     5f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     5f6:	0052      	lsls	r2, r2, #1
     5f8:	eb43 0303 	adc.w	r3, r3, r3
     5fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     600:	bf08      	it	eq
     602:	3d01      	subeq	r5, #1
     604:	d0f7      	beq.n	5f6 <__aeabi_dmul+0x1c6>
     606:	ea43 0306 	orr.w	r3, r3, r6
     60a:	4770      	bx	lr
     60c:	ea94 0f0c 	teq	r4, ip
     610:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     614:	bf18      	it	ne
     616:	ea95 0f0c 	teqne	r5, ip
     61a:	d00c      	beq.n	636 <__aeabi_dmul+0x206>
     61c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     620:	bf18      	it	ne
     622:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     626:	d1d1      	bne.n	5cc <__aeabi_dmul+0x19c>
     628:	ea81 0103 	eor.w	r1, r1, r3
     62c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     630:	f04f 0000 	mov.w	r0, #0
     634:	bd70      	pop	{r4, r5, r6, pc}
     636:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     63a:	bf06      	itte	eq
     63c:	4610      	moveq	r0, r2
     63e:	4619      	moveq	r1, r3
     640:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     644:	d019      	beq.n	67a <__aeabi_dmul+0x24a>
     646:	ea94 0f0c 	teq	r4, ip
     64a:	d102      	bne.n	652 <__aeabi_dmul+0x222>
     64c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     650:	d113      	bne.n	67a <__aeabi_dmul+0x24a>
     652:	ea95 0f0c 	teq	r5, ip
     656:	d105      	bne.n	664 <__aeabi_dmul+0x234>
     658:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     65c:	bf1c      	itt	ne
     65e:	4610      	movne	r0, r2
     660:	4619      	movne	r1, r3
     662:	d10a      	bne.n	67a <__aeabi_dmul+0x24a>
     664:	ea81 0103 	eor.w	r1, r1, r3
     668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     66c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     670:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     674:	f04f 0000 	mov.w	r0, #0
     678:	bd70      	pop	{r4, r5, r6, pc}
     67a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     67e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     682:	bd70      	pop	{r4, r5, r6, pc}

00000684 <__aeabi_ddiv>:
     684:	b570      	push	{r4, r5, r6, lr}
     686:	f04f 0cff 	mov.w	ip, #255	; 0xff
     68a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     68e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     692:	bf1d      	ittte	ne
     694:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     698:	ea94 0f0c 	teqne	r4, ip
     69c:	ea95 0f0c 	teqne	r5, ip
     6a0:	f000 f8a7 	bleq	7f2 <__aeabi_ddiv+0x16e>
     6a4:	eba4 0405 	sub.w	r4, r4, r5
     6a8:	ea81 0e03 	eor.w	lr, r1, r3
     6ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6b4:	f000 8088 	beq.w	7c8 <__aeabi_ddiv+0x144>
     6b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
     6bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     6c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     6c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     6c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
     6cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     6d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     6d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
     6d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     6dc:	429d      	cmp	r5, r3
     6de:	bf08      	it	eq
     6e0:	4296      	cmpeq	r6, r2
     6e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     6e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
     6ea:	d202      	bcs.n	6f2 <__aeabi_ddiv+0x6e>
     6ec:	085b      	lsrs	r3, r3, #1
     6ee:	ea4f 0232 	mov.w	r2, r2, rrx
     6f2:	1ab6      	subs	r6, r6, r2
     6f4:	eb65 0503 	sbc.w	r5, r5, r3
     6f8:	085b      	lsrs	r3, r3, #1
     6fa:	ea4f 0232 	mov.w	r2, r2, rrx
     6fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     702:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     706:	ebb6 0e02 	subs.w	lr, r6, r2
     70a:	eb75 0e03 	sbcs.w	lr, r5, r3
     70e:	bf22      	ittt	cs
     710:	1ab6      	subcs	r6, r6, r2
     712:	4675      	movcs	r5, lr
     714:	ea40 000c 	orrcs.w	r0, r0, ip
     718:	085b      	lsrs	r3, r3, #1
     71a:	ea4f 0232 	mov.w	r2, r2, rrx
     71e:	ebb6 0e02 	subs.w	lr, r6, r2
     722:	eb75 0e03 	sbcs.w	lr, r5, r3
     726:	bf22      	ittt	cs
     728:	1ab6      	subcs	r6, r6, r2
     72a:	4675      	movcs	r5, lr
     72c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     730:	085b      	lsrs	r3, r3, #1
     732:	ea4f 0232 	mov.w	r2, r2, rrx
     736:	ebb6 0e02 	subs.w	lr, r6, r2
     73a:	eb75 0e03 	sbcs.w	lr, r5, r3
     73e:	bf22      	ittt	cs
     740:	1ab6      	subcs	r6, r6, r2
     742:	4675      	movcs	r5, lr
     744:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     748:	085b      	lsrs	r3, r3, #1
     74a:	ea4f 0232 	mov.w	r2, r2, rrx
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     760:	ea55 0e06 	orrs.w	lr, r5, r6
     764:	d018      	beq.n	798 <__aeabi_ddiv+0x114>
     766:	ea4f 1505 	mov.w	r5, r5, lsl #4
     76a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     76e:	ea4f 1606 	mov.w	r6, r6, lsl #4
     772:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     776:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     77a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     77e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     782:	d1c0      	bne.n	706 <__aeabi_ddiv+0x82>
     784:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     788:	d10b      	bne.n	7a2 <__aeabi_ddiv+0x11e>
     78a:	ea41 0100 	orr.w	r1, r1, r0
     78e:	f04f 0000 	mov.w	r0, #0
     792:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     796:	e7b6      	b.n	706 <__aeabi_ddiv+0x82>
     798:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     79c:	bf04      	itt	eq
     79e:	4301      	orreq	r1, r0
     7a0:	2000      	moveq	r0, #0
     7a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7a6:	bf88      	it	hi
     7a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7ac:	f63f aeaf 	bhi.w	50e <__aeabi_dmul+0xde>
     7b0:	ebb5 0c03 	subs.w	ip, r5, r3
     7b4:	bf04      	itt	eq
     7b6:	ebb6 0c02 	subseq.w	ip, r6, r2
     7ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     7be:	f150 0000 	adcs.w	r0, r0, #0
     7c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     7c6:	bd70      	pop	{r4, r5, r6, pc}
     7c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     7cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     7d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     7d4:	bfc2      	ittt	gt
     7d6:	ebd4 050c 	rsbsgt	r5, r4, ip
     7da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     7de:	bd70      	popgt	{r4, r5, r6, pc}
     7e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     7e4:	f04f 0e00 	mov.w	lr, #0
     7e8:	3c01      	subs	r4, #1
     7ea:	e690      	b.n	50e <__aeabi_dmul+0xde>
     7ec:	ea45 0e06 	orr.w	lr, r5, r6
     7f0:	e68d      	b.n	50e <__aeabi_dmul+0xde>
     7f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     7f6:	ea94 0f0c 	teq	r4, ip
     7fa:	bf08      	it	eq
     7fc:	ea95 0f0c 	teqeq	r5, ip
     800:	f43f af3b 	beq.w	67a <__aeabi_dmul+0x24a>
     804:	ea94 0f0c 	teq	r4, ip
     808:	d10a      	bne.n	820 <__aeabi_ddiv+0x19c>
     80a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     80e:	f47f af34 	bne.w	67a <__aeabi_dmul+0x24a>
     812:	ea95 0f0c 	teq	r5, ip
     816:	f47f af25 	bne.w	664 <__aeabi_dmul+0x234>
     81a:	4610      	mov	r0, r2
     81c:	4619      	mov	r1, r3
     81e:	e72c      	b.n	67a <__aeabi_dmul+0x24a>
     820:	ea95 0f0c 	teq	r5, ip
     824:	d106      	bne.n	834 <__aeabi_ddiv+0x1b0>
     826:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     82a:	f43f aefd 	beq.w	628 <__aeabi_dmul+0x1f8>
     82e:	4610      	mov	r0, r2
     830:	4619      	mov	r1, r3
     832:	e722      	b.n	67a <__aeabi_dmul+0x24a>
     834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     838:	bf18      	it	ne
     83a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     83e:	f47f aec5 	bne.w	5cc <__aeabi_dmul+0x19c>
     842:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     846:	f47f af0d 	bne.w	664 <__aeabi_dmul+0x234>
     84a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     84e:	f47f aeeb 	bne.w	628 <__aeabi_dmul+0x1f8>
     852:	e712      	b.n	67a <__aeabi_dmul+0x24a>

00000854 <__gedf2>:
     854:	f04f 3cff 	mov.w	ip, #4294967295
     858:	e006      	b.n	868 <__cmpdf2+0x4>
     85a:	bf00      	nop

0000085c <__ledf2>:
     85c:	f04f 0c01 	mov.w	ip, #1
     860:	e002      	b.n	868 <__cmpdf2+0x4>
     862:	bf00      	nop

00000864 <__cmpdf2>:
     864:	f04f 0c01 	mov.w	ip, #1
     868:	f84d cd04 	str.w	ip, [sp, #-4]!
     86c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     870:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     874:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     878:	bf18      	it	ne
     87a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     87e:	d01b      	beq.n	8b8 <__cmpdf2+0x54>
     880:	b001      	add	sp, #4
     882:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     886:	bf0c      	ite	eq
     888:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     88c:	ea91 0f03 	teqne	r1, r3
     890:	bf02      	ittt	eq
     892:	ea90 0f02 	teqeq	r0, r2
     896:	2000      	moveq	r0, #0
     898:	4770      	bxeq	lr
     89a:	f110 0f00 	cmn.w	r0, #0
     89e:	ea91 0f03 	teq	r1, r3
     8a2:	bf58      	it	pl
     8a4:	4299      	cmppl	r1, r3
     8a6:	bf08      	it	eq
     8a8:	4290      	cmpeq	r0, r2
     8aa:	bf2c      	ite	cs
     8ac:	17d8      	asrcs	r0, r3, #31
     8ae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     8b2:	f040 0001 	orr.w	r0, r0, #1
     8b6:	4770      	bx	lr
     8b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     8bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8c0:	d102      	bne.n	8c8 <__cmpdf2+0x64>
     8c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     8c6:	d107      	bne.n	8d8 <__cmpdf2+0x74>
     8c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     8cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8d0:	d1d6      	bne.n	880 <__cmpdf2+0x1c>
     8d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     8d6:	d0d3      	beq.n	880 <__cmpdf2+0x1c>
     8d8:	f85d 0b04 	ldr.w	r0, [sp], #4
     8dc:	4770      	bx	lr
     8de:	bf00      	nop

000008e0 <__aeabi_cdrcmple>:
     8e0:	4684      	mov	ip, r0
     8e2:	4610      	mov	r0, r2
     8e4:	4662      	mov	r2, ip
     8e6:	468c      	mov	ip, r1
     8e8:	4619      	mov	r1, r3
     8ea:	4663      	mov	r3, ip
     8ec:	e000      	b.n	8f0 <__aeabi_cdcmpeq>
     8ee:	bf00      	nop

000008f0 <__aeabi_cdcmpeq>:
     8f0:	b501      	push	{r0, lr}
     8f2:	f7ff ffb7 	bl	864 <__cmpdf2>
     8f6:	2800      	cmp	r0, #0
     8f8:	bf48      	it	mi
     8fa:	f110 0f00 	cmnmi.w	r0, #0
     8fe:	bd01      	pop	{r0, pc}

00000900 <__aeabi_dcmpeq>:
     900:	f84d ed08 	str.w	lr, [sp, #-8]!
     904:	f7ff fff4 	bl	8f0 <__aeabi_cdcmpeq>
     908:	bf0c      	ite	eq
     90a:	2001      	moveq	r0, #1
     90c:	2000      	movne	r0, #0
     90e:	f85d fb08 	ldr.w	pc, [sp], #8
     912:	bf00      	nop

00000914 <__aeabi_dcmplt>:
     914:	f84d ed08 	str.w	lr, [sp, #-8]!
     918:	f7ff ffea 	bl	8f0 <__aeabi_cdcmpeq>
     91c:	bf34      	ite	cc
     91e:	2001      	movcc	r0, #1
     920:	2000      	movcs	r0, #0
     922:	f85d fb08 	ldr.w	pc, [sp], #8
     926:	bf00      	nop

00000928 <__aeabi_dcmple>:
     928:	f84d ed08 	str.w	lr, [sp, #-8]!
     92c:	f7ff ffe0 	bl	8f0 <__aeabi_cdcmpeq>
     930:	bf94      	ite	ls
     932:	2001      	movls	r0, #1
     934:	2000      	movhi	r0, #0
     936:	f85d fb08 	ldr.w	pc, [sp], #8
     93a:	bf00      	nop

0000093c <__aeabi_dcmpge>:
     93c:	f84d ed08 	str.w	lr, [sp, #-8]!
     940:	f7ff ffce 	bl	8e0 <__aeabi_cdrcmple>
     944:	bf94      	ite	ls
     946:	2001      	movls	r0, #1
     948:	2000      	movhi	r0, #0
     94a:	f85d fb08 	ldr.w	pc, [sp], #8
     94e:	bf00      	nop

00000950 <__aeabi_dcmpgt>:
     950:	f84d ed08 	str.w	lr, [sp, #-8]!
     954:	f7ff ffc4 	bl	8e0 <__aeabi_cdrcmple>
     958:	bf34      	ite	cc
     95a:	2001      	movcc	r0, #1
     95c:	2000      	movcs	r0, #0
     95e:	f85d fb08 	ldr.w	pc, [sp], #8
     962:	bf00      	nop

00000964 <__aeabi_d2uiz>:
     964:	004a      	lsls	r2, r1, #1
     966:	d211      	bcs.n	98c <__aeabi_d2uiz+0x28>
     968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     96c:	d211      	bcs.n	992 <__aeabi_d2uiz+0x2e>
     96e:	d50d      	bpl.n	98c <__aeabi_d2uiz+0x28>
     970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     978:	d40e      	bmi.n	998 <__aeabi_d2uiz+0x34>
     97a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     97e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     986:	fa23 f002 	lsr.w	r0, r3, r2
     98a:	4770      	bx	lr
     98c:	f04f 0000 	mov.w	r0, #0
     990:	4770      	bx	lr
     992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     996:	d102      	bne.n	99e <__aeabi_d2uiz+0x3a>
     998:	f04f 30ff 	mov.w	r0, #4294967295
     99c:	4770      	bx	lr
     99e:	f04f 0000 	mov.w	r0, #0
     9a2:	4770      	bx	lr

000009a4 <__aeabi_d2f>:
     9a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
     9a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     9ac:	bf24      	itt	cs
     9ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     9b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     9b6:	d90d      	bls.n	9d4 <__aeabi_d2f+0x30>
     9b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     9bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     9c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     9c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     9c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     9cc:	bf08      	it	eq
     9ce:	f020 0001 	biceq.w	r0, r0, #1
     9d2:	4770      	bx	lr
     9d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     9d8:	d121      	bne.n	a1e <__aeabi_d2f+0x7a>
     9da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     9de:	bfbc      	itt	lt
     9e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     9e4:	4770      	bxlt	lr
     9e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     9ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
     9ee:	f1c2 0218 	rsb	r2, r2, #24
     9f2:	f1c2 0c20 	rsb	ip, r2, #32
     9f6:	fa10 f30c 	lsls.w	r3, r0, ip
     9fa:	fa20 f002 	lsr.w	r0, r0, r2
     9fe:	bf18      	it	ne
     a00:	f040 0001 	orrne.w	r0, r0, #1
     a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
     a10:	ea40 000c 	orr.w	r0, r0, ip
     a14:	fa23 f302 	lsr.w	r3, r3, r2
     a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
     a1c:	e7cc      	b.n	9b8 <__aeabi_d2f+0x14>
     a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
     a22:	d107      	bne.n	a34 <__aeabi_d2f+0x90>
     a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     a28:	bf1e      	ittt	ne
     a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     a32:	4770      	bxne	lr
     a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     a40:	4770      	bx	lr
     a42:	bf00      	nop

00000a44 <am_devices_led_array_init>:
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
     a44:	2800      	cmp	r0, #0
     a46:	f000 80cd 	beq.w	be4 <am_devices_led_array_init+0x1a0>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     a4a:	1e4b      	subs	r3, r1, #1
     a4c:	2b1e      	cmp	r3, #30
     a4e:	f200 80c9 	bhi.w	be4 <am_devices_led_array_init+0x1a0>
{
     a52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     a56:	f8df 81a0 	ldr.w	r8, [pc, #416]	; bf8 <am_devices_led_array_init+0x1b4>
     a5a:	4f63      	ldr	r7, [pc, #396]	; (be8 <am_devices_led_array_init+0x1a4>)
     a5c:	4e63      	ldr	r6, [pc, #396]	; (bec <am_devices_led_array_init+0x1a8>)
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     a5e:	f8df 919c 	ldr.w	r9, [pc, #412]	; bfc <am_devices_led_array_init+0x1b8>
{
     a62:	b083      	sub	sp, #12
     a64:	4604      	mov	r4, r0
     a66:	eb00 0ac1 	add.w	sl, r0, r1, lsl #3
     a6a:	1d05      	adds	r5, r0, #4
    if ( (psLED == NULL)    ||
     a6c:	b11c      	cbz	r4, a76 <am_devices_led_array_init+0x32>
     a6e:	f855 0c04 	ldr.w	r0, [r5, #-4]
     a72:	2831      	cmp	r0, #49	; 0x31
     a74:	d907      	bls.n	a86 <am_devices_led_array_init+0x42>
     a76:	3408      	adds	r4, #8
    for ( i = 0; i < ui32NumLEDs; i++ )
     a78:	45a2      	cmp	sl, r4
     a7a:	f105 0508 	add.w	r5, r5, #8
     a7e:	d1f5      	bne.n	a6c <am_devices_led_array_init+0x28>
    {
        am_devices_led_init(psLEDs + i);
    }
}
     a80:	b003      	add	sp, #12
     a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
     a86:	6861      	ldr	r1, [r4, #4]
     a88:	f011 0b02 	ands.w	fp, r1, #2
     a8c:	d066      	beq.n	b5c <am_devices_led_array_init+0x118>
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT);
     a8e:	f004 fbed 	bl	526c <am_hal_interrupt_master_disable>
     a92:	2273      	movs	r2, #115	; 0x73
     a94:	9000      	str	r0, [sp, #0]
     a96:	f8c8 2000 	str.w	r2, [r8]
     a9a:	f855 0c04 	ldr.w	r0, [r5, #-4]
     a9e:	0841      	lsrs	r1, r0, #1
     aa0:	f001 0b7c 	and.w	fp, r1, #124	; 0x7c
     aa4:	0083      	lsls	r3, r0, #2
     aa6:	f85b 2007 	ldr.w	r2, [fp, r7]
     aaa:	f003 011c 	and.w	r1, r3, #28
     aae:	2007      	movs	r0, #7
     ab0:	fa00 f301 	lsl.w	r3, r0, r1
     ab4:	f04f 0e02 	mov.w	lr, #2
     ab8:	ea22 0203 	bic.w	r2, r2, r3
     abc:	fa0e f101 	lsl.w	r1, lr, r1
     ac0:	4311      	orrs	r1, r2
     ac2:	f84b 1007 	str.w	r1, [fp, r7]
     ac6:	f855 0c04 	ldr.w	r0, [r5, #-4]
     aca:	f000 0cfc 	and.w	ip, r0, #252	; 0xfc
     ace:	f10c 4b80 	add.w	fp, ip, #1073741824	; 0x40000000
     ad2:	f50b 3280 	add.w	r2, fp, #65536	; 0x10000
     ad6:	00c3      	lsls	r3, r0, #3
     ad8:	6811      	ldr	r1, [r2, #0]
     ada:	f003 0b18 	and.w	fp, r3, #24
     ade:	20ff      	movs	r0, #255	; 0xff
     ae0:	fa00 f30b 	lsl.w	r3, r0, fp
     ae4:	f04f 0e18 	mov.w	lr, #24
     ae8:	ea21 0103 	bic.w	r1, r1, r3
     aec:	fa0e f30b 	lsl.w	r3, lr, fp
     af0:	4319      	orrs	r1, r3
     af2:	6011      	str	r1, [r2, #0]
     af4:	f855 1c04 	ldr.w	r1, [r5, #-4]
     af8:	f001 0cfc 	and.w	ip, r1, #252	; 0xfc
     afc:	00ca      	lsls	r2, r1, #3
     afe:	ea02 0b0e 	and.w	fp, r2, lr
     b02:	f85c 1006 	ldr.w	r1, [ip, r6]
     b06:	fa00 f00b 	lsl.w	r0, r0, fp
     b0a:	ea21 0300 	bic.w	r3, r1, r0
     b0e:	2200      	movs	r2, #0
     b10:	f84c 3006 	str.w	r3, [ip, r6]
     b14:	f8c8 2000 	str.w	r2, [r8]
     b18:	9800      	ldr	r0, [sp, #0]
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     b1a:	f004 fbab 	bl	5274 <am_hal_interrupt_master_set>
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     b1e:	f855 0c04 	ldr.w	r0, [r5, #-4]
     b22:	08c1      	lsrs	r1, r0, #3
     b24:	f001 0c04 	and.w	ip, r1, #4
     b28:	f000 0b1f 	and.w	fp, r0, #31
     b2c:	2201      	movs	r2, #1
     b2e:	fa02 f30b 	lsl.w	r3, r2, fp
     b32:	f84c 3009 	str.w	r3, [ip, r9]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     b36:	6860      	ldr	r0, [r4, #4]
     b38:	f855 3c04 	ldr.w	r3, [r5, #-4]
     b3c:	f010 0f01 	tst.w	r0, #1
     b40:	ea4f 01d3 	mov.w	r1, r3, lsr #3
     b44:	f003 001f 	and.w	r0, r3, #31
     b48:	fa02 f200 	lsl.w	r2, r2, r0
     b4c:	f001 0c04 	and.w	ip, r1, #4
     b50:	bf14      	ite	ne
     b52:	4827      	ldrne	r0, [pc, #156]	; (bf0 <am_devices_led_array_init+0x1ac>)
     b54:	4827      	ldreq	r0, [pc, #156]	; (bf4 <am_devices_led_array_init+0x1b0>)
     b56:	f84c 2000 	str.w	r2, [ip, r0]
     b5a:	e78c      	b.n	a76 <am_devices_led_array_init+0x32>
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     b5c:	f004 fb86 	bl	526c <am_hal_interrupt_master_disable>
     b60:	2273      	movs	r2, #115	; 0x73
     b62:	9001      	str	r0, [sp, #4]
     b64:	f8c8 2000 	str.w	r2, [r8]
     b68:	f855 3c04 	ldr.w	r3, [r5, #-4]
     b6c:	0858      	lsrs	r0, r3, #1
     b6e:	f000 0c7c 	and.w	ip, r0, #124	; 0x7c
     b72:	0099      	lsls	r1, r3, #2
     b74:	f001 021c 	and.w	r2, r1, #28
     b78:	f85c 3007 	ldr.w	r3, [ip, r7]
     b7c:	2007      	movs	r0, #7
     b7e:	fa00 f102 	lsl.w	r1, r0, r2
     b82:	f04f 0e06 	mov.w	lr, #6
     b86:	fa0e f202 	lsl.w	r2, lr, r2
     b8a:	ea23 0301 	bic.w	r3, r3, r1
     b8e:	4313      	orrs	r3, r2
     b90:	f84c 3007 	str.w	r3, [ip, r7]
     b94:	f855 0c04 	ldr.w	r0, [r5, #-4]
     b98:	f000 0cfc 	and.w	ip, r0, #252	; 0xfc
     b9c:	f10c 4180 	add.w	r1, ip, #1073741824	; 0x40000000
     ba0:	f501 3280 	add.w	r2, r1, #65536	; 0x10000
     ba4:	00c3      	lsls	r3, r0, #3
     ba6:	f003 0318 	and.w	r3, r3, #24
     baa:	6810      	ldr	r0, [r2, #0]
     bac:	21ff      	movs	r1, #255	; 0xff
     bae:	fa01 fc03 	lsl.w	ip, r1, r3
     bb2:	f04f 0e18 	mov.w	lr, #24
     bb6:	ea20 000c 	bic.w	r0, r0, ip
     bba:	fa0e f303 	lsl.w	r3, lr, r3
     bbe:	4303      	orrs	r3, r0
     bc0:	6013      	str	r3, [r2, #0]
     bc2:	f855 0c04 	ldr.w	r0, [r5, #-4]
     bc6:	f000 02fc 	and.w	r2, r0, #252	; 0xfc
     bca:	00c3      	lsls	r3, r0, #3
     bcc:	ea03 0c0e 	and.w	ip, r3, lr
     bd0:	5990      	ldr	r0, [r2, r6]
     bd2:	fa01 f10c 	lsl.w	r1, r1, ip
     bd6:	ea20 0301 	bic.w	r3, r0, r1
     bda:	5193      	str	r3, [r2, r6]
     bdc:	f8c8 b000 	str.w	fp, [r8]
     be0:	9801      	ldr	r0, [sp, #4]
     be2:	e79a      	b.n	b1a <am_devices_led_array_init+0xd6>
     be4:	4770      	bx	lr
     be6:	bf00      	nop
     be8:	40010040 	.word	0x40010040
     bec:	400100e0 	.word	0x400100e0
     bf0:	40010090 	.word	0x40010090
     bf4:	40010098 	.word	0x40010098
     bf8:	40010060 	.word	0x40010060
     bfc:	400100b4 	.word	0x400100b4

00000c00 <am_devices_led_on>:
//
//*****************************************************************************
void
am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    if ( (psLEDs == NULL)                       ||
     c00:	b338      	cbz	r0, c52 <am_devices_led_on+0x52>
     c02:	291e      	cmp	r1, #30
     c04:	d825      	bhi.n	c52 <am_devices_led_on+0x52>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
     c06:	f850 3031 	ldr.w	r3, [r0, r1, lsl #3]
         (ui32LEDNum >= MAX_LEDS)               ||
     c0a:	2b31      	cmp	r3, #49	; 0x31
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
     c0c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
         (ui32LEDNum >= MAX_LEDS)               ||
     c10:	d81f      	bhi.n	c52 <am_devices_led_on+0x52>
    }
#else // AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     c12:	6842      	ldr	r2, [r0, #4]
     c14:	0791      	lsls	r1, r2, #30
     c16:	d511      	bpl.n	c3c <am_devices_led_on+0x3c>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     c18:	f012 0f01 	tst.w	r2, #1
     c1c:	ea4f 02d3 	mov.w	r2, r3, lsr #3
     c20:	f002 0c04 	and.w	ip, r2, #4
     c24:	f003 031f 	and.w	r3, r3, #31
     c28:	f04f 0101 	mov.w	r1, #1
     c2c:	bf14      	ite	ne
     c2e:	4809      	ldrne	r0, [pc, #36]	; (c54 <am_devices_led_on+0x54>)
     c30:	4809      	ldreq	r0, [pc, #36]	; (c58 <am_devices_led_on+0x58>)
     c32:	fa01 f203 	lsl.w	r2, r1, r3
     c36:	f84c 2000 	str.w	r2, [ip, r0]
     c3a:	4770      	bx	lr
    else
    {
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
     c3c:	08d9      	lsrs	r1, r3, #3
     c3e:	f001 0c04 	and.w	ip, r1, #4
     c42:	f003 031f 	and.w	r3, r3, #31
     c46:	2201      	movs	r2, #1
     c48:	4804      	ldr	r0, [pc, #16]	; (c5c <am_devices_led_on+0x5c>)
     c4a:	fa02 f103 	lsl.w	r1, r2, r3
     c4e:	f84c 1000 	str.w	r1, [ip, r0]
     c52:	4770      	bx	lr
     c54:	40010090 	.word	0x40010090
     c58:	40010098 	.word	0x40010098
     c5c:	400100a8 	.word	0x400100a8

00000c60 <am_systick_isr>:
am_systick_isr(void)
{
    //
    // Add enough cycles to account for one full cycle of systick.
    //
    g_ui32SysTickWrappedTime += 0x01000000;
     c60:	4a02      	ldr	r2, [pc, #8]	; (c6c <am_systick_isr+0xc>)
     c62:	6813      	ldr	r3, [r2, #0]
     c64:	f103 7080 	add.w	r0, r3, #16777216	; 0x1000000
     c68:	6010      	str	r0, [r2, #0]
     c6a:	4770      	bx	lr
     c6c:	10001048 	.word	0x10001048

00000c70 <core_list_mergesort.constprop.2>:
    Note:
    We have a special header for the list that will always be first,
    but the algorithm could theoretically modify where the list starts.

 */
list_head *core_list_mergesort(list_head *list, list_cmp cmp, core_results *res) {
     c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    list_head *p, *q, *e, *tail;
    ee_s32 insize, nmerges, psize, qsize, i;

    insize = 1;
     c74:	f04f 0c01 	mov.w	ip, #1
        list = NULL;
        tail = NULL;

        nmerges = 0;  /* count number of merges we do in this pass */

        while (p) {
     c78:	f04f 0900 	mov.w	r9, #0
     c7c:	2800      	cmp	r0, #0
     c7e:	f000 8099 	beq.w	db4 <core_list_mergesort.constprop.2+0x144>
     c82:	f04f 0e00 	mov.w	lr, #0
     c86:	4671      	mov	r1, lr
     c88:	46f0      	mov	r8, lr
            /* step `insize' places along from p */
            q = p;
            psize = 0;
            for (i = 0; i < insize; i++) {
                psize++;
                q = q->next;
     c8a:	6803      	ldr	r3, [r0, #0]
     c8c:	f10c 32ff 	add.w	r2, ip, #4294967295
            nmerges++;  /* there exists a merge to be done */
     c90:	f108 0801 	add.w	r8, r8, #1
     c94:	f002 0507 	and.w	r5, r2, #7
                psize++;
     c98:	2401      	movs	r4, #1
                if (!q) break;
     c9a:	2b00      	cmp	r3, #0
     c9c:	d03f      	beq.n	d1e <core_list_mergesort.constprop.2+0xae>
            for (i = 0; i < insize; i++) {
     c9e:	4564      	cmp	r4, ip
     ca0:	d03d      	beq.n	d1e <core_list_mergesort.constprop.2+0xae>
     ca2:	b315      	cbz	r5, cea <core_list_mergesort.constprop.2+0x7a>
     ca4:	2d01      	cmp	r5, #1
     ca6:	d01b      	beq.n	ce0 <core_list_mergesort.constprop.2+0x70>
     ca8:	2d02      	cmp	r5, #2
     caa:	d016      	beq.n	cda <core_list_mergesort.constprop.2+0x6a>
     cac:	2d03      	cmp	r5, #3
     cae:	d011      	beq.n	cd4 <core_list_mergesort.constprop.2+0x64>
     cb0:	2d04      	cmp	r5, #4
     cb2:	d00c      	beq.n	cce <core_list_mergesort.constprop.2+0x5e>
     cb4:	2d05      	cmp	r5, #5
     cb6:	d007      	beq.n	cc8 <core_list_mergesort.constprop.2+0x58>
     cb8:	2d06      	cmp	r5, #6
     cba:	d002      	beq.n	cc2 <core_list_mergesort.constprop.2+0x52>
                q = q->next;
     cbc:	681b      	ldr	r3, [r3, #0]
                psize++;
     cbe:	2402      	movs	r4, #2
                if (!q) break;
     cc0:	b36b      	cbz	r3, d1e <core_list_mergesort.constprop.2+0xae>
                q = q->next;
     cc2:	681b      	ldr	r3, [r3, #0]
                psize++;
     cc4:	3401      	adds	r4, #1
                if (!q) break;
     cc6:	b353      	cbz	r3, d1e <core_list_mergesort.constprop.2+0xae>
                q = q->next;
     cc8:	681b      	ldr	r3, [r3, #0]
                psize++;
     cca:	3401      	adds	r4, #1
                if (!q) break;
     ccc:	b33b      	cbz	r3, d1e <core_list_mergesort.constprop.2+0xae>
                q = q->next;
     cce:	681b      	ldr	r3, [r3, #0]
                psize++;
     cd0:	3401      	adds	r4, #1
                if (!q) break;
     cd2:	b323      	cbz	r3, d1e <core_list_mergesort.constprop.2+0xae>
                q = q->next;
     cd4:	681b      	ldr	r3, [r3, #0]
                psize++;
     cd6:	3401      	adds	r4, #1
                if (!q) break;
     cd8:	b30b      	cbz	r3, d1e <core_list_mergesort.constprop.2+0xae>
                q = q->next;
     cda:	681b      	ldr	r3, [r3, #0]
                psize++;
     cdc:	3401      	adds	r4, #1
                if (!q) break;
     cde:	b1f3      	cbz	r3, d1e <core_list_mergesort.constprop.2+0xae>
                q = q->next;
     ce0:	681b      	ldr	r3, [r3, #0]
                psize++;
     ce2:	3401      	adds	r4, #1
                if (!q) break;
     ce4:	b1db      	cbz	r3, d1e <core_list_mergesort.constprop.2+0xae>
            for (i = 0; i < insize; i++) {
     ce6:	4564      	cmp	r4, ip
     ce8:	d019      	beq.n	d1e <core_list_mergesort.constprop.2+0xae>
                q = q->next;
     cea:	681b      	ldr	r3, [r3, #0]
                psize++;
     cec:	3401      	adds	r4, #1
     cee:	4626      	mov	r6, r4
                if (!q) break;
     cf0:	b1ab      	cbz	r3, d1e <core_list_mergesort.constprop.2+0xae>
                q = q->next;
     cf2:	681b      	ldr	r3, [r3, #0]
                psize++;
     cf4:	3401      	adds	r4, #1
                if (!q) break;
     cf6:	b193      	cbz	r3, d1e <core_list_mergesort.constprop.2+0xae>
                q = q->next;
     cf8:	681b      	ldr	r3, [r3, #0]
                psize++;
     cfa:	1cb4      	adds	r4, r6, #2
                if (!q) break;
     cfc:	b17b      	cbz	r3, d1e <core_list_mergesort.constprop.2+0xae>
                q = q->next;
     cfe:	681b      	ldr	r3, [r3, #0]
                psize++;
     d00:	1cf4      	adds	r4, r6, #3
                if (!q) break;
     d02:	b163      	cbz	r3, d1e <core_list_mergesort.constprop.2+0xae>
                q = q->next;
     d04:	681b      	ldr	r3, [r3, #0]
                psize++;
     d06:	1d34      	adds	r4, r6, #4
                if (!q) break;
     d08:	b14b      	cbz	r3, d1e <core_list_mergesort.constprop.2+0xae>
                q = q->next;
     d0a:	681b      	ldr	r3, [r3, #0]
                psize++;
     d0c:	1d74      	adds	r4, r6, #5
                if (!q) break;
     d0e:	b133      	cbz	r3, d1e <core_list_mergesort.constprop.2+0xae>
                q = q->next;
     d10:	681b      	ldr	r3, [r3, #0]
                psize++;
     d12:	1db4      	adds	r4, r6, #6
                if (!q) break;
     d14:	b11b      	cbz	r3, d1e <core_list_mergesort.constprop.2+0xae>
                q = q->next;
     d16:	681b      	ldr	r3, [r3, #0]
                psize++;
     d18:	1df4      	adds	r4, r6, #7
                if (!q) break;
     d1a:	2b00      	cmp	r3, #0
     d1c:	d1e3      	bne.n	ce6 <core_list_mergesort.constprop.2+0x76>

                /* add the next element to the merged list */
                if (tail) {
                    tail->next = e;
                } else {
                    list = e;
     d1e:	4665      	mov	r5, ip
            while (psize > 0 || (qsize > 0 && q)) {
     d20:	b344      	cbz	r4, d74 <core_list_mergesort.constprop.2+0x104>
                } else if (qsize == 0 || !q) {
     d22:	b38d      	cbz	r5, d88 <core_list_mergesort.constprop.2+0x118>
     d24:	b383      	cbz	r3, d88 <core_list_mergesort.constprop.2+0x118>
                } else if (cmp(p->info,q->info,res) <= 0) {
     d26:	f8d0 a004 	ldr.w	sl, [r0, #4]
     d2a:	685f      	ldr	r7, [r3, #4]
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
     d2c:	f9ba 2000 	ldrsh.w	r2, [sl]
    return a->idx - b->idx;
     d30:	f9ba 6002 	ldrsh.w	r6, [sl, #2]
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
     d34:	f022 0bff 	bic.w	fp, r2, #255	; 0xff
     d38:	f3c2 2207 	ubfx	r2, r2, #8, #8
     d3c:	ea4b 0b02 	orr.w	fp, fp, r2
     d40:	f8aa b000 	strh.w	fp, [sl]
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
     d44:	f9b7 2000 	ldrsh.w	r2, [r7]
    return a->idx - b->idx;
     d48:	f9b7 b002 	ldrsh.w	fp, [r7, #2]
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
     d4c:	f022 0aff 	bic.w	sl, r2, #255	; 0xff
    return a->idx - b->idx;
     d50:	eba6 060b 	sub.w	r6, r6, fp
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
     d54:	f3c2 2207 	ubfx	r2, r2, #8, #8
     d58:	ea4a 0b02 	orr.w	fp, sl, r2
                } else if (cmp(p->info,q->info,res) <= 0) {
     d5c:	2e00      	cmp	r6, #0
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
     d5e:	f8a7 b000 	strh.w	fp, [r7]
                } else if (cmp(p->info,q->info,res) <= 0) {
     d62:	dd11      	ble.n	d88 <core_list_mergesort.constprop.2+0x118>
                    e = q; q = q->next; qsize--;
     d64:	461f      	mov	r7, r3
     d66:	681b      	ldr	r3, [r3, #0]
     d68:	3d01      	subs	r5, #1
                if (tail) {
     d6a:	b151      	cbz	r1, d82 <core_list_mergesort.constprop.2+0x112>
                    tail->next = e;
     d6c:	600f      	str	r7, [r1, #0]
                    list = e;
     d6e:	4639      	mov	r1, r7
            while (psize > 0 || (qsize > 0 && q)) {
     d70:	2c00      	cmp	r4, #0
     d72:	d1d6      	bne.n	d22 <core_list_mergesort.constprop.2+0xb2>
     d74:	b165      	cbz	r5, d90 <core_list_mergesort.constprop.2+0x120>
     d76:	b17b      	cbz	r3, d98 <core_list_mergesort.constprop.2+0x128>
                    e = q; q = q->next; qsize--;
     d78:	461f      	mov	r7, r3
     d7a:	3d01      	subs	r5, #1
     d7c:	681b      	ldr	r3, [r3, #0]
                if (tail) {
     d7e:	2900      	cmp	r1, #0
     d80:	d1f4      	bne.n	d6c <core_list_mergesort.constprop.2+0xfc>
                    list = e;
     d82:	46be      	mov	lr, r7
     d84:	4639      	mov	r1, r7
     d86:	e7f3      	b.n	d70 <core_list_mergesort.constprop.2+0x100>
                    e = p; p = p->next; psize--;
     d88:	4607      	mov	r7, r0
     d8a:	3c01      	subs	r4, #1
     d8c:	6800      	ldr	r0, [r0, #0]
     d8e:	e7ec      	b.n	d6a <core_list_mergesort.constprop.2+0xfa>
        while (p) {
     d90:	4618      	mov	r0, r3
     d92:	2b00      	cmp	r3, #0
     d94:	f47f af79 	bne.w	c8a <core_list_mergesort.constprop.2+0x1a>
        }

        tail->next = NULL;

        /* If we have done only one merge, we're finished. */
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
     d98:	f1b8 0f01 	cmp.w	r8, #1
        tail->next = NULL;
     d9c:	f8c1 9000 	str.w	r9, [r1]
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
     da0:	d102      	bne.n	da8 <core_list_mergesort.constprop.2+0x138>
        insize *= 2;
    }
#if COMPILER_REQUIRES_SORT_RETURN
    return list;
#endif
}
     da2:	4670      	mov	r0, lr
     da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        insize *= 2;
     da8:	4670      	mov	r0, lr
     daa:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
        while (p) {
     dae:	2800      	cmp	r0, #0
     db0:	f47f af67 	bne.w	c82 <core_list_mergesort.constprop.2+0x12>
        tail->next = NULL;
     db4:	6000      	str	r0, [r0, #0]
     db6:	deff      	udf	#255	; 0xff

00000db8 <core_bench_list>:
ee_u16 core_bench_list(core_results *res, ee_s16 finder_idx) {
     db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee_s16 find_num=res->seed3;
     dbc:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
    list_head *list=res->list;
     dc0:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
ee_u16 core_bench_list(core_results *res, ee_s16 finder_idx) {
     dc4:	b08d      	sub	sp, #52	; 0x34
    for (i=0; i<find_num; i++) {
     dc6:	2d00      	cmp	r5, #0
ee_u16 core_bench_list(core_results *res, ee_s16 finder_idx) {
     dc8:	9003      	str	r0, [sp, #12]
     dca:	468c      	mov	ip, r1
    for (i=0; i<find_num; i++) {
     dcc:	f340 8215 	ble.w	11fa <core_bench_list+0x442>
     dd0:	2000      	movs	r0, #0
     dd2:	4604      	mov	r4, r0
     dd4:	4602      	mov	r2, r0
        while (list && (list->info->idx != info->idx))
     dd6:	4686      	mov	lr, r0
    for (i=0; i<find_num; i++) {
     dd8:	460f      	mov	r7, r1
     dda:	4681      	mov	r9, r0
     ddc:	46aa      	mov	sl, r5
     dde:	465b      	mov	r3, fp
     de0:	4688      	mov	r8, r1
    if (info->idx>=0) {
     de2:	2f00      	cmp	r7, #0
        info.data16= (i & 0xff) ;
     de4:	fa5f fc80 	uxtb.w	ip, r0
    if (info->idx>=0) {
     de8:	f2c0 81d5 	blt.w	1196 <core_bench_list+0x3de>
        while (list && (list->info->idx != info->idx))
     dec:	2b00      	cmp	r3, #0
     dee:	f000 81e2 	beq.w	11b6 <core_bench_list+0x3fe>
     df2:	685d      	ldr	r5, [r3, #4]
     df4:	f9b5 b002 	ldrsh.w	fp, [r5, #2]
     df8:	45bb      	cmp	fp, r7
     dfa:	461d      	mov	r5, r3
     dfc:	d105      	bne.n	e0a <core_bench_list+0x52>
     dfe:	e007      	b.n	e10 <core_bench_list+0x58>
     e00:	6869      	ldr	r1, [r5, #4]
     e02:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
     e06:	42be      	cmp	r6, r7
     e08:	d002      	beq.n	e10 <core_bench_list+0x58>
            list=list->next;
     e0a:	682d      	ldr	r5, [r5, #0]
        while (list && (list->info->idx != info->idx))
     e0c:	2d00      	cmp	r5, #0
     e0e:	d1f7      	bne.n	e00 <core_bench_list+0x48>
     e10:	2600      	movs	r6, #0
     e12:	e001      	b.n	e18 <core_bench_list+0x60>
    while (list) {
     e14:	461e      	mov	r6, r3
     e16:	460b      	mov	r3, r1
        tmp=list->next;
     e18:	6819      	ldr	r1, [r3, #0]
        list->next=next;
     e1a:	601e      	str	r6, [r3, #0]
    while (list) {
     e1c:	2900      	cmp	r1, #0
     e1e:	d1f9      	bne.n	e14 <core_bench_list+0x5c>
        if (this_find==NULL) {
     e20:	2d00      	cmp	r5, #0
     e22:	f000 81cb 	beq.w	11bc <core_bench_list+0x404>
            if (this_find->info->data16 & 0x1) /* use found value */
     e26:	686e      	ldr	r6, [r5, #4]
     e28:	f9b6 b000 	ldrsh.w	fp, [r6]
            found++;
     e2c:	3401      	adds	r4, #1
            if (this_find->info->data16 & 0x1) /* use found value */
     e2e:	ea5f 76cb 	movs.w	r6, fp, lsl #31
            found++;
     e32:	b2a4      	uxth	r4, r4
            if (this_find->info->data16 & 0x1) /* use found value */
     e34:	d503      	bpl.n	e3e <core_bench_list+0x86>
                retval+=(this_find->info->data16 >> 9) & 1;
     e36:	f3cb 2140 	ubfx	r1, fp, #9, #1
     e3a:	440a      	add	r2, r1
     e3c:	b292      	uxth	r2, r2
            if (this_find->next != NULL) {
     e3e:	6829      	ldr	r1, [r5, #0]
     e40:	b121      	cbz	r1, e4c <core_bench_list+0x94>
                this_find->next = finder->next;
     e42:	680e      	ldr	r6, [r1, #0]
     e44:	602e      	str	r6, [r5, #0]
                finder->next=list->next;
     e46:	681d      	ldr	r5, [r3, #0]
     e48:	600d      	str	r5, [r1, #0]
                list->next=finder;
     e4a:	6019      	str	r1, [r3, #0]
        if (info.idx>=0)
     e4c:	2f00      	cmp	r7, #0
     e4e:	f100 0001 	add.w	r0, r0, #1
            info.idx++;
     e52:	bfa8      	it	ge
     e54:	3701      	addge	r7, #1
    for (i=0; i<find_num; i++) {
     e56:	b201      	sxth	r1, r0
            info.idx++;
     e58:	bfa8      	it	ge
     e5a:	b23f      	sxthge	r7, r7
    for (i=0; i<find_num; i++) {
     e5c:	458a      	cmp	sl, r1
     e5e:	dcc0      	bgt.n	de2 <core_bench_list+0x2a>
     e60:	ebc9 0084 	rsb	r0, r9, r4, lsl #2
     e64:	4402      	add	r2, r0
     e66:	970a      	str	r7, [sp, #40]	; 0x28
     e68:	b297      	uxth	r7, r2
     e6a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
     e6e:	469b      	mov	fp, r3
     e70:	46c4      	mov	ip, r8
     e72:	9709      	str	r7, [sp, #36]	; 0x24
    if (finder_idx>0)
     e74:	f1bc 0f00 	cmp.w	ip, #0
     e78:	f340 8146 	ble.w	1108 <core_bench_list+0x350>
                retval=core_bench_matrix(&(res->mat),dtype,res->crc);
     e7c:	9c03      	ldr	r4, [sp, #12]
     e7e:	f8cd b014 	str.w	fp, [sp, #20]
     e82:	2301      	movs	r3, #1
     e84:	4622      	mov	r2, r4
     e86:	9306      	str	r3, [sp, #24]
     e88:	3228      	adds	r2, #40	; 0x28
     e8a:	9b05      	ldr	r3, [sp, #20]
     e8c:	9207      	str	r2, [sp, #28]
    if (finder_idx>0)
     e8e:	46da      	mov	sl, fp
                retval=core_bench_matrix(&(res->mat),dtype,res->crc);
     e90:	46a3      	mov	fp, r4
        while (p) {
     e92:	2b00      	cmp	r3, #0
     e94:	f000 81b5 	beq.w	1202 <core_bench_list+0x44a>
     e98:	2600      	movs	r6, #0
     e9a:	9605      	str	r6, [sp, #20]
     e9c:	4637      	mov	r7, r6
     e9e:	9608      	str	r6, [sp, #32]
            nmerges++;  /* there exists a merge to be done */
     ea0:	9808      	ldr	r0, [sp, #32]
     ea2:	9d06      	ldr	r5, [sp, #24]
                q = q->next;
     ea4:	f8da 4000 	ldr.w	r4, [sl]
     ea8:	1e69      	subs	r1, r5, #1
            nmerges++;  /* there exists a merge to be done */
     eaa:	3001      	adds	r0, #1
     eac:	9008      	str	r0, [sp, #32]
     eae:	f001 0307 	and.w	r3, r1, #7
                psize++;
     eb2:	f04f 0c01 	mov.w	ip, #1
                if (!q) break;
     eb6:	2c00      	cmp	r4, #0
     eb8:	d053      	beq.n	f62 <core_bench_list+0x1aa>
            for (i = 0; i < insize; i++) {
     eba:	9a06      	ldr	r2, [sp, #24]
     ebc:	4594      	cmp	ip, r2
     ebe:	d050      	beq.n	f62 <core_bench_list+0x1aa>
     ec0:	b36b      	cbz	r3, f1e <core_bench_list+0x166>
     ec2:	2b01      	cmp	r3, #1
     ec4:	d024      	beq.n	f10 <core_bench_list+0x158>
     ec6:	2b02      	cmp	r3, #2
     ec8:	d01e      	beq.n	f08 <core_bench_list+0x150>
     eca:	2b03      	cmp	r3, #3
     ecc:	d018      	beq.n	f00 <core_bench_list+0x148>
     ece:	2b04      	cmp	r3, #4
     ed0:	d012      	beq.n	ef8 <core_bench_list+0x140>
     ed2:	2b05      	cmp	r3, #5
     ed4:	d00b      	beq.n	eee <core_bench_list+0x136>
     ed6:	2b06      	cmp	r3, #6
     ed8:	d004      	beq.n	ee4 <core_bench_list+0x12c>
                q = q->next;
     eda:	6824      	ldr	r4, [r4, #0]
                psize++;
     edc:	f04f 0c02 	mov.w	ip, #2
                if (!q) break;
     ee0:	2c00      	cmp	r4, #0
     ee2:	d03e      	beq.n	f62 <core_bench_list+0x1aa>
                q = q->next;
     ee4:	6824      	ldr	r4, [r4, #0]
                psize++;
     ee6:	f10c 0c01 	add.w	ip, ip, #1
                if (!q) break;
     eea:	2c00      	cmp	r4, #0
     eec:	d039      	beq.n	f62 <core_bench_list+0x1aa>
                q = q->next;
     eee:	6824      	ldr	r4, [r4, #0]
                psize++;
     ef0:	f10c 0c01 	add.w	ip, ip, #1
                if (!q) break;
     ef4:	2c00      	cmp	r4, #0
     ef6:	d034      	beq.n	f62 <core_bench_list+0x1aa>
                q = q->next;
     ef8:	6824      	ldr	r4, [r4, #0]
                psize++;
     efa:	f10c 0c01 	add.w	ip, ip, #1
                if (!q) break;
     efe:	b384      	cbz	r4, f62 <core_bench_list+0x1aa>
                q = q->next;
     f00:	6824      	ldr	r4, [r4, #0]
                psize++;
     f02:	f10c 0c01 	add.w	ip, ip, #1
                if (!q) break;
     f06:	b364      	cbz	r4, f62 <core_bench_list+0x1aa>
                q = q->next;
     f08:	6824      	ldr	r4, [r4, #0]
                psize++;
     f0a:	f10c 0c01 	add.w	ip, ip, #1
                if (!q) break;
     f0e:	b344      	cbz	r4, f62 <core_bench_list+0x1aa>
                q = q->next;
     f10:	6824      	ldr	r4, [r4, #0]
                psize++;
     f12:	f10c 0c01 	add.w	ip, ip, #1
                if (!q) break;
     f16:	b324      	cbz	r4, f62 <core_bench_list+0x1aa>
            for (i = 0; i < insize; i++) {
     f18:	9e06      	ldr	r6, [sp, #24]
     f1a:	45b4      	cmp	ip, r6
     f1c:	d021      	beq.n	f62 <core_bench_list+0x1aa>
                q = q->next;
     f1e:	6824      	ldr	r4, [r4, #0]
                psize++;
     f20:	f10c 0c01 	add.w	ip, ip, #1
     f24:	46e6      	mov	lr, ip
                if (!q) break;
     f26:	b1e4      	cbz	r4, f62 <core_bench_list+0x1aa>
                q = q->next;
     f28:	6824      	ldr	r4, [r4, #0]
                psize++;
     f2a:	f10c 0c01 	add.w	ip, ip, #1
                if (!q) break;
     f2e:	b1c4      	cbz	r4, f62 <core_bench_list+0x1aa>
                q = q->next;
     f30:	6824      	ldr	r4, [r4, #0]
                psize++;
     f32:	f10e 0c02 	add.w	ip, lr, #2
                if (!q) break;
     f36:	b1a4      	cbz	r4, f62 <core_bench_list+0x1aa>
                q = q->next;
     f38:	6824      	ldr	r4, [r4, #0]
                psize++;
     f3a:	f10e 0c03 	add.w	ip, lr, #3
                if (!q) break;
     f3e:	b184      	cbz	r4, f62 <core_bench_list+0x1aa>
                q = q->next;
     f40:	6824      	ldr	r4, [r4, #0]
                psize++;
     f42:	f10e 0c04 	add.w	ip, lr, #4
                if (!q) break;
     f46:	b164      	cbz	r4, f62 <core_bench_list+0x1aa>
                q = q->next;
     f48:	6824      	ldr	r4, [r4, #0]
                psize++;
     f4a:	f10e 0c05 	add.w	ip, lr, #5
                if (!q) break;
     f4e:	b144      	cbz	r4, f62 <core_bench_list+0x1aa>
                q = q->next;
     f50:	6824      	ldr	r4, [r4, #0]
                psize++;
     f52:	f10e 0c06 	add.w	ip, lr, #6
                if (!q) break;
     f56:	b124      	cbz	r4, f62 <core_bench_list+0x1aa>
                q = q->next;
     f58:	6824      	ldr	r4, [r4, #0]
                psize++;
     f5a:	f10e 0c07 	add.w	ip, lr, #7
                if (!q) break;
     f5e:	2c00      	cmp	r4, #0
     f60:	d1da      	bne.n	f18 <core_bench_list+0x160>
                    list = e;
     f62:	f8dd 9018 	ldr.w	r9, [sp, #24]
     f66:	4666      	mov	r6, ip
     f68:	464d      	mov	r5, r9
            while (psize > 0 || (qsize > 0 && q)) {
     f6a:	2e00      	cmp	r6, #0
     f6c:	d06b      	beq.n	1046 <core_bench_list+0x28e>
                } else if (qsize == 0 || !q) {
     f6e:	2d00      	cmp	r5, #0
     f70:	d075      	beq.n	105e <core_bench_list+0x2a6>
     f72:	2c00      	cmp	r4, #0
     f74:	d073      	beq.n	105e <core_bench_list+0x2a6>
                } else if (cmp(p->info,q->info,res) <= 0) {
     f76:	f8da 9004 	ldr.w	r9, [sl, #4]
     f7a:	6860      	ldr	r0, [r4, #4]
    ee_s16 data=*pdata;
     f7c:	f9b9 8000 	ldrsh.w	r8, [r9]
                } else if (cmp(p->info,q->info,res) <= 0) {
     f80:	9003      	str	r0, [sp, #12]
    if (optype) /* if cached, use cache */
     f82:	f018 0f80 	tst.w	r8, #128	; 0x80
     f86:	d16f      	bne.n	1068 <core_bench_list+0x2b0>
        ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
     f88:	f3c8 02c3 	ubfx	r2, r8, #3, #4
        switch (flag) {
     f8c:	f018 0007 	ands.w	r0, r8, #7
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
     f90:	ea42 1102 	orr.w	r1, r2, r2, lsl #4
        switch (flag) {
     f94:	d074      	beq.n	1080 <core_bench_list+0x2c8>
     f96:	2801      	cmp	r0, #1
     f98:	d170      	bne.n	107c <core_bench_list+0x2c4>
                retval=core_bench_matrix(&(res->mat),dtype,res->crc);
     f9a:	f8bb 2038 	ldrh.w	r2, [fp, #56]	; 0x38
     f9e:	9807      	ldr	r0, [sp, #28]
     fa0:	f001 fe24 	bl	2bec <core_bench_matrix>
                if (res->crcmatrix==0)
     fa4:	f8bb 303c 	ldrh.w	r3, [fp, #60]	; 0x3c
                retval=core_bench_matrix(&(res->mat),dtype,res->crc);
     fa8:	b202      	sxth	r2, r0
                if (res->crcmatrix==0)
     faa:	b90b      	cbnz	r3, fb0 <core_bench_list+0x1f8>
                    res->crcmatrix=retval;
     fac:	f8ab 003c 	strh.w	r0, [fp, #60]	; 0x3c
        res->crc=crcu16(retval,res->crc);
     fb0:	f8bb 1038 	ldrh.w	r1, [fp, #56]	; 0x38
     fb4:	9204      	str	r2, [sp, #16]
     fb6:	b290      	uxth	r0, r2
     fb8:	f002 fb18 	bl	35ec <crcu16>
        retval &= 0x007f;
     fbc:	9904      	ldr	r1, [sp, #16]
        res->crc=crcu16(retval,res->crc);
     fbe:	f8ab 0038 	strh.w	r0, [fp, #56]	; 0x38
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     fc2:	f028 02ff 	bic.w	r2, r8, #255	; 0xff
     fc6:	f042 0380 	orr.w	r3, r2, #128	; 0x80
        retval &= 0x007f;
     fca:	f001 087f 	and.w	r8, r1, #127	; 0x7f
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
     fce:	ea48 0203 	orr.w	r2, r8, r3
     fd2:	9803      	ldr	r0, [sp, #12]
     fd4:	f8a9 2000 	strh.w	r2, [r9]
    ee_s16 data=*pdata;
     fd8:	f9b0 9000 	ldrsh.w	r9, [r0]
    if (optype) /* if cached, use cache */
     fdc:	f019 0f80 	tst.w	r9, #128	; 0x80
     fe0:	d149      	bne.n	1076 <core_bench_list+0x2be>
        ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
     fe2:	f3c9 03c3 	ubfx	r3, r9, #3, #4
        switch (flag) {
     fe6:	f019 0207 	ands.w	r2, r9, #7
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
     fea:	ea43 1103 	orr.w	r1, r3, r3, lsl #4
        switch (flag) {
     fee:	d065      	beq.n	10bc <core_bench_list+0x304>
     ff0:	2a01      	cmp	r2, #1
     ff2:	d161      	bne.n	10b8 <core_bench_list+0x300>
                retval=core_bench_matrix(&(res->mat),dtype,res->crc);
     ff4:	f8bb 2038 	ldrh.w	r2, [fp, #56]	; 0x38
     ff8:	9807      	ldr	r0, [sp, #28]
     ffa:	f001 fdf7 	bl	2bec <core_bench_matrix>
                if (res->crcmatrix==0)
     ffe:	f8bb 103c 	ldrh.w	r1, [fp, #60]	; 0x3c
                retval=core_bench_matrix(&(res->mat),dtype,res->crc);
    1002:	b202      	sxth	r2, r0
                if (res->crcmatrix==0)
    1004:	b909      	cbnz	r1, 100a <core_bench_list+0x252>
                    res->crcmatrix=retval;
    1006:	f8ab 003c 	strh.w	r0, [fp, #60]	; 0x3c
        res->crc=crcu16(retval,res->crc);
    100a:	f8bb 1038 	ldrh.w	r1, [fp, #56]	; 0x38
    100e:	9204      	str	r2, [sp, #16]
    1010:	b290      	uxth	r0, r2
    1012:	f002 faeb 	bl	35ec <crcu16>
        retval &= 0x007f;
    1016:	9904      	ldr	r1, [sp, #16]
        res->crc=crcu16(retval,res->crc);
    1018:	f8ab 0038 	strh.w	r0, [fp, #56]	; 0x38
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
    101c:	f029 02ff 	bic.w	r2, r9, #255	; 0xff
    1020:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    1024:	9803      	ldr	r0, [sp, #12]
        retval &= 0x007f;
    1026:	f001 027f 	and.w	r2, r1, #127	; 0x7f
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
    102a:	4313      	orrs	r3, r2
    102c:	8003      	strh	r3, [r0, #0]
    return val1 - val2;
    102e:	eba8 0302 	sub.w	r3, r8, r2
                } else if (cmp(p->info,q->info,res) <= 0) {
    1032:	2b00      	cmp	r3, #0
    1034:	dd13      	ble.n	105e <core_bench_list+0x2a6>
                    e = q; q = q->next; qsize--;
    1036:	4621      	mov	r1, r4
    1038:	6824      	ldr	r4, [r4, #0]
    103a:	3d01      	subs	r5, #1
                if (tail) {
    103c:	b167      	cbz	r7, 1058 <core_bench_list+0x2a0>
                    tail->next = e;
    103e:	6039      	str	r1, [r7, #0]
                    list = e;
    1040:	460f      	mov	r7, r1
            while (psize > 0 || (qsize > 0 && q)) {
    1042:	2e00      	cmp	r6, #0
    1044:	d193      	bne.n	f6e <core_bench_list+0x1b6>
    1046:	2d00      	cmp	r5, #0
    1048:	d053      	beq.n	10f2 <core_bench_list+0x33a>
    104a:	2c00      	cmp	r4, #0
    104c:	d055      	beq.n	10fa <core_bench_list+0x342>
                    e = q; q = q->next; qsize--;
    104e:	4621      	mov	r1, r4
    1050:	3d01      	subs	r5, #1
    1052:	6824      	ldr	r4, [r4, #0]
                if (tail) {
    1054:	2f00      	cmp	r7, #0
    1056:	d1f2      	bne.n	103e <core_bench_list+0x286>
                    list = e;
    1058:	9105      	str	r1, [sp, #20]
    105a:	460f      	mov	r7, r1
    105c:	e7f1      	b.n	1042 <core_bench_list+0x28a>
                    e = p; p = p->next; psize--;
    105e:	4651      	mov	r1, sl
    1060:	3e01      	subs	r6, #1
    1062:	f8da a000 	ldr.w	sl, [sl]
    1066:	e7e9      	b.n	103c <core_bench_list+0x284>
    ee_s16 data=*pdata;
    1068:	f9b0 9000 	ldrsh.w	r9, [r0]
    if (optype) /* if cached, use cache */
    106c:	f019 0f80 	tst.w	r9, #128	; 0x80
        return (data & 0x007f);
    1070:	f008 087f 	and.w	r8, r8, #127	; 0x7f
    if (optype) /* if cached, use cache */
    1074:	d0b5      	beq.n	fe2 <core_bench_list+0x22a>
        return (data & 0x007f);
    1076:	f009 027f 	and.w	r2, r9, #127	; 0x7f
    107a:	e7d8      	b.n	102e <core_bench_list+0x276>
        switch (flag) {
    107c:	4642      	mov	r2, r8
    107e:	e797      	b.n	fb0 <core_bench_list+0x1f8>
                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
    1080:	f8db e014 	ldr.w	lr, [fp, #20]
    1084:	f8bb c038 	ldrh.w	ip, [fp, #56]	; 0x38
    1088:	f9bb 2000 	ldrsh.w	r2, [fp]
    108c:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
    1090:	f8db 0018 	ldr.w	r0, [fp, #24]
    1094:	f8cd c004 	str.w	ip, [sp, #4]
    1098:	2922      	cmp	r1, #34	; 0x22
    109a:	bfb8      	it	lt
    109c:	2122      	movlt	r1, #34	; 0x22
    109e:	9100      	str	r1, [sp, #0]
    10a0:	4671      	mov	r1, lr
    10a2:	f002 fa03 	bl	34ac <core_bench_state>
                if (res->crcstate==0)
    10a6:	f8bb 103e 	ldrh.w	r1, [fp, #62]	; 0x3e
                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
    10aa:	b202      	sxth	r2, r0
                if (res->crcstate==0)
    10ac:	2900      	cmp	r1, #0
    10ae:	f47f af7f 	bne.w	fb0 <core_bench_list+0x1f8>
                    res->crcstate=retval;
    10b2:	f8ab 003e 	strh.w	r0, [fp, #62]	; 0x3e
    10b6:	e77b      	b.n	fb0 <core_bench_list+0x1f8>
        switch (flag) {
    10b8:	464a      	mov	r2, r9
    10ba:	e7a6      	b.n	100a <core_bench_list+0x252>
                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
    10bc:	f8db e014 	ldr.w	lr, [fp, #20]
    10c0:	f8bb c038 	ldrh.w	ip, [fp, #56]	; 0x38
    10c4:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
    10c8:	f9bb 2000 	ldrsh.w	r2, [fp]
    10cc:	f8db 0018 	ldr.w	r0, [fp, #24]
    10d0:	f8cd c004 	str.w	ip, [sp, #4]
    10d4:	2922      	cmp	r1, #34	; 0x22
    10d6:	bfb8      	it	lt
    10d8:	2122      	movlt	r1, #34	; 0x22
    10da:	9100      	str	r1, [sp, #0]
    10dc:	4671      	mov	r1, lr
    10de:	f002 f9e5 	bl	34ac <core_bench_state>
                if (res->crcstate==0)
    10e2:	f8bb 303e 	ldrh.w	r3, [fp, #62]	; 0x3e
                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
    10e6:	b202      	sxth	r2, r0
                if (res->crcstate==0)
    10e8:	2b00      	cmp	r3, #0
    10ea:	d18e      	bne.n	100a <core_bench_list+0x252>
                    res->crcstate=retval;
    10ec:	f8ab 003e 	strh.w	r0, [fp, #62]	; 0x3e
    10f0:	e78b      	b.n	100a <core_bench_list+0x252>
        while (p) {
    10f2:	46a2      	mov	sl, r4
    10f4:	2c00      	cmp	r4, #0
    10f6:	f47f aed3 	bne.w	ea0 <core_bench_list+0xe8>
        tail->next = NULL;
    10fa:	2500      	movs	r5, #0
    10fc:	603d      	str	r5, [r7, #0]
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
    10fe:	9f08      	ldr	r7, [sp, #32]
    1100:	2f01      	cmp	r7, #1
    1102:	d173      	bne.n	11ec <core_bench_list+0x434>
    1104:	f8dd b014 	ldr.w	fp, [sp, #20]
    remover=core_list_remove(list->next);
    1108:	f8db 6000 	ldr.w	r6, [fp]
    if (info->idx>=0) {
    110c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    list_head *ret=item->next;
    110e:	6835      	ldr	r5, [r6, #0]
    tmp=item->info;
    1110:	6872      	ldr	r2, [r6, #4]
    item->next=item->next->next;
    1112:	e895 0003 	ldmia.w	r5, {r0, r1}
    ret->next=NULL;
    1116:	2400      	movs	r4, #0
    if (info->idx>=0) {
    1118:	42a7      	cmp	r7, r4
    item->info=ret->info;
    111a:	6071      	str	r1, [r6, #4]
    ret->info=tmp;
    111c:	606a      	str	r2, [r5, #4]
    item->next=item->next->next;
    111e:	6030      	str	r0, [r6, #0]
    ret->next=NULL;
    1120:	602c      	str	r4, [r5, #0]
    if (info->idx>=0) {
    1122:	db57      	blt.n	11d4 <core_bench_list+0x41c>
    1124:	46be      	mov	lr, r7
    1126:	465c      	mov	r4, fp
        while (list && (list->info->idx != info->idx))
    1128:	6863      	ldr	r3, [r4, #4]
    112a:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
    112e:	4576      	cmp	r6, lr
    1130:	d006      	beq.n	1140 <core_bench_list+0x388>
            list=list->next;
    1132:	6824      	ldr	r4, [r4, #0]
        while (list && (list->info->idx != info->idx))
    1134:	2c00      	cmp	r4, #0
    1136:	d1f7      	bne.n	1128 <core_bench_list+0x370>
        finder=list->next;
    1138:	f8db 7000 	ldr.w	r7, [fp]
    113c:	463c      	mov	r4, r7
    while (finder) {
    113e:	b177      	cbz	r7, 115e <core_bench_list+0x3a6>
    1140:	9909      	ldr	r1, [sp, #36]	; 0x24
        retval=crc16(list->info->data16,retval);
    1142:	f8db 0004 	ldr.w	r0, [fp, #4]
    1146:	f9b0 0000 	ldrsh.w	r0, [r0]
    114a:	f002 fc17 	bl	397c <crc16>
        finder=finder->next;
    114e:	6824      	ldr	r4, [r4, #0]
        retval=crc16(list->info->data16,retval);
    1150:	4601      	mov	r1, r0
    while (finder) {
    1152:	2c00      	cmp	r4, #0
    1154:	d1f5      	bne.n	1142 <core_bench_list+0x38a>
    1156:	686a      	ldr	r2, [r5, #4]
    1158:	f8db 7000 	ldr.w	r7, [fp]
    115c:	9009      	str	r0, [sp, #36]	; 0x24
    item_removed->info=item_modified->info;
    115e:	687b      	ldr	r3, [r7, #4]
    item_removed->next=item_modified->next;
    1160:	6839      	ldr	r1, [r7, #0]
    item_removed->info=item_modified->info;
    1162:	606b      	str	r3, [r5, #4]
    list=core_list_mergesort(list,cmp_idx,NULL);
    1164:	4658      	mov	r0, fp
    item_modified->info=tmp;
    1166:	607a      	str	r2, [r7, #4]
    item_removed->next=item_modified->next;
    1168:	6029      	str	r1, [r5, #0]
    item_modified->next=item_removed;
    116a:	603d      	str	r5, [r7, #0]
    list=core_list_mergesort(list,cmp_idx,NULL);
    116c:	f7ff fd80 	bl	c70 <core_list_mergesort.constprop.2>
    finder=list->next;
    1170:	6805      	ldr	r5, [r0, #0]
    list=core_list_mergesort(list,cmp_idx,NULL);
    1172:	4681      	mov	r9, r0
    while (finder) {
    1174:	b15d      	cbz	r5, 118e <core_bench_list+0x3d6>
    1176:	9909      	ldr	r1, [sp, #36]	; 0x24
        retval=crc16(list->info->data16,retval);
    1178:	f8d9 6004 	ldr.w	r6, [r9, #4]
    117c:	f9b6 0000 	ldrsh.w	r0, [r6]
    1180:	f002 fbfc 	bl	397c <crc16>
        finder=finder->next;
    1184:	682d      	ldr	r5, [r5, #0]
        retval=crc16(list->info->data16,retval);
    1186:	4601      	mov	r1, r0
    while (finder) {
    1188:	2d00      	cmp	r5, #0
    118a:	d1f5      	bne.n	1178 <core_bench_list+0x3c0>
    118c:	9009      	str	r0, [sp, #36]	; 0x24
}
    118e:	9809      	ldr	r0, [sp, #36]	; 0x24
    1190:	b00d      	add	sp, #52	; 0x34
    1192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while (list && ((list->info->data16 & 0xff) != info->data16))
    1196:	b173      	cbz	r3, 11b6 <core_bench_list+0x3fe>
    1198:	6859      	ldr	r1, [r3, #4]
    119a:	780e      	ldrb	r6, [r1, #0]
    119c:	45b4      	cmp	ip, r6
    119e:	461d      	mov	r5, r3
    11a0:	d105      	bne.n	11ae <core_bench_list+0x3f6>
    11a2:	e635      	b.n	e10 <core_bench_list+0x58>
    11a4:	6869      	ldr	r1, [r5, #4]
    11a6:	780e      	ldrb	r6, [r1, #0]
    11a8:	4566      	cmp	r6, ip
    11aa:	f43f ae31 	beq.w	e10 <core_bench_list+0x58>
            list=list->next;
    11ae:	682d      	ldr	r5, [r5, #0]
        while (list && ((list->info->data16 & 0xff) != info->data16))
    11b0:	2d00      	cmp	r5, #0
    11b2:	d1f7      	bne.n	11a4 <core_bench_list+0x3ec>
    11b4:	e62c      	b.n	e10 <core_bench_list+0x58>
    11b6:	f8de 6000 	ldr.w	r6, [lr]
    list_head *next=NULL, *tmp;
    11ba:	2300      	movs	r3, #0
            retval+=(list->next->info->data16 >> 8) & 1;
    11bc:	6871      	ldr	r1, [r6, #4]
    11be:	f991 6001 	ldrsb.w	r6, [r1, #1]
    11c2:	f006 0b01 	and.w	fp, r6, #1
    11c6:	445a      	add	r2, fp
            missed++;
    11c8:	f109 0501 	add.w	r5, r9, #1
            retval+=(list->next->info->data16 >> 8) & 1;
    11cc:	b292      	uxth	r2, r2
            missed++;
    11ce:	fa1f f985 	uxth.w	r9, r5
    11d2:	e63b      	b.n	e4c <core_bench_list+0x94>
    if (info->idx>=0) {
    11d4:	465c      	mov	r4, fp
    11d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    11d8:	e002      	b.n	11e0 <core_bench_list+0x428>
            list=list->next;
    11da:	6824      	ldr	r4, [r4, #0]
        while (list && ((list->info->data16 & 0xff) != info->data16))
    11dc:	2c00      	cmp	r4, #0
    11de:	d0ab      	beq.n	1138 <core_bench_list+0x380>
    11e0:	6860      	ldr	r0, [r4, #4]
    11e2:	f890 8000 	ldrb.w	r8, [r0]
    11e6:	4588      	cmp	r8, r1
    11e8:	d1f7      	bne.n	11da <core_bench_list+0x422>
    11ea:	e7a9      	b.n	1140 <core_bench_list+0x388>
        insize *= 2;
    11ec:	9906      	ldr	r1, [sp, #24]
    11ee:	f8dd a014 	ldr.w	sl, [sp, #20]
    11f2:	0048      	lsls	r0, r1, #1
    11f4:	9006      	str	r0, [sp, #24]
    11f6:	4653      	mov	r3, sl
    11f8:	e64b      	b.n	e92 <core_bench_list+0xda>
    for (i=0; i<find_num; i++) {
    11fa:	2300      	movs	r3, #0
    info.idx=finder_idx;
    11fc:	910a      	str	r1, [sp, #40]	; 0x28
    for (i=0; i<find_num; i++) {
    11fe:	9309      	str	r3, [sp, #36]	; 0x24
    1200:	e638      	b.n	e74 <core_bench_list+0xbc>
    1202:	4698      	mov	r8, r3
        tail->next = NULL;
    1204:	f8c8 3000 	str.w	r3, [r8]
    1208:	deff      	udf	#255	; 0xff
    120a:	bf00      	nop

0000120c <core_list_init>:
    ee_u32 size=(blksize/per_item)-2; /* to accomodate systems with 64b pointers, and make sure same code is executed, set max list elements */
    120c:	4bb2      	ldr	r3, [pc, #712]	; (14d8 <core_list_init+0x2cc>)
list_head *core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed) {
    120e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee_u32 size=(blksize/per_item)-2; /* to accomodate systems with 64b pointers, and make sure same code is executed, set max list elements */
    1212:	fba3 3000 	umull	r3, r0, r3, r0
    1216:	ea4f 1e10 	mov.w	lr, r0, lsr #4
    121a:	f1ae 0e02 	sub.w	lr, lr, #2
    list_head *memblock_end=memblock+size;
    121e:	eb01 07ce 	add.w	r7, r1, lr, lsl #3
    if ((*memblock+1) >= memblock_end)
    1222:	f101 0910 	add.w	r9, r1, #16
    list->info->data16=(ee_s16)0x8080;
    1226:	f248 0480 	movw	r4, #32896	; 0x8080
    list->next=NULL;
    122a:	2300      	movs	r3, #0
    if ((*memblock+1) >= memblock_end)
    122c:	454f      	cmp	r7, r9
    list->info=datablock;
    122e:	e881 0088 	stmia.w	r1, {r3, r7}
list_head *core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed) {
    1232:	b083      	sub	sp, #12
    list->info->data16=(ee_s16)0x8080;
    1234:	f841 403e 	str.w	r4, [r1, lr, lsl #3]
    list_data *datablock_end=datablock+size;
    1238:	eb07 088e 	add.w	r8, r7, lr, lsl #2
    datablock++;
    123c:	f107 0604 	add.w	r6, r7, #4
    memblock++;
    1240:	f101 0408 	add.w	r4, r1, #8
    if ((*memblock+1) >= memblock_end)
    1244:	d904      	bls.n	1250 <core_list_init+0x44>
    if ((*datablock+1) >= datablock_end)
    1246:	f107 0508 	add.w	r5, r7, #8
    124a:	45a8      	cmp	r8, r5
    124c:	f200 8139 	bhi.w	14c2 <core_list_init+0x2b6>
    for (i=0; i<size; i++) {
    1250:	f1be 0f00 	cmp.w	lr, #0
    1254:	f000 80cb 	beq.w	13ee <core_list_init+0x1e2>
    1258:	f10e 35ff 	add.w	r5, lr, #4294967295
    if ((*memblock+1) >= memblock_end)
    125c:	f104 0b08 	add.w	fp, r4, #8
    1260:	f005 0003 	and.w	r0, r5, #3
    1264:	455f      	cmp	r7, fp
    1266:	b295      	uxth	r5, r2
    1268:	9501      	str	r5, [sp, #4]
    to->idx=from->idx;
    126a:	f647 79ff 	movw	r9, #32767	; 0x7fff
    if ((*memblock+1) >= memblock_end)
    126e:	f200 80df 	bhi.w	1430 <core_list_init+0x224>
    for (i=0; i<size; i++) {
    1272:	2501      	movs	r5, #1
    1274:	45ae      	cmp	lr, r5
    1276:	f000 80ba 	beq.w	13ee <core_list_init+0x1e2>
    127a:	b390      	cbz	r0, 12e2 <core_list_init+0xd6>
    127c:	42a8      	cmp	r0, r5
    127e:	d00d      	beq.n	129c <core_list_init+0x90>
    1280:	2802      	cmp	r0, #2
    1282:	d005      	beq.n	1290 <core_list_init+0x84>
    if ((*memblock+1) >= memblock_end)
    1284:	f104 0c08 	add.w	ip, r4, #8
    1288:	4567      	cmp	r7, ip
    128a:	f200 8102 	bhi.w	1492 <core_list_init+0x286>
    for (i=0; i<size; i++) {
    128e:	3501      	adds	r5, #1
    if ((*memblock+1) >= memblock_end)
    1290:	f104 0c08 	add.w	ip, r4, #8
    1294:	4567      	cmp	r7, ip
    1296:	f200 80df 	bhi.w	1458 <core_list_init+0x24c>
    for (i=0; i<size; i++) {
    129a:	3501      	adds	r5, #1
    if ((*memblock+1) >= memblock_end)
    129c:	f104 0c08 	add.w	ip, r4, #8
    12a0:	4567      	cmp	r7, ip
    12a2:	d91a      	bls.n	12da <core_list_init+0xce>
    if ((*datablock+1) >= datablock_end)
    12a4:	f106 0a04 	add.w	sl, r6, #4
    12a8:	45d0      	cmp	r8, sl
    12aa:	d916      	bls.n	12da <core_list_init+0xce>
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
    12ac:	9801      	ldr	r0, [sp, #4]
    newitem->next=insert_point->next;
    12ae:	6023      	str	r3, [r4, #0]
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
    12b0:	fa1f fb85 	uxth.w	fp, r5
    12b4:	ea8b 0000 	eor.w	r0, fp, r0
        ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
    12b8:	00c0      	lsls	r0, r0, #3
    12ba:	f000 0078 	and.w	r0, r0, #120	; 0x78
    12be:	f00b 0b07 	and.w	fp, fp, #7
    12c2:	ea40 000b 	orr.w	r0, r0, fp
        info.data16=(dat<<8) | dat;     /* fill the data with actual data and upper bits with rebuild value */
    12c6:	ea40 2000 	orr.w	r0, r0, r0, lsl #8
    insert_point->next=newitem;
    12ca:	600c      	str	r4, [r1, #0]
    to->idx=from->idx;
    12cc:	4623      	mov	r3, r4
    newitem->info=*datablock;
    12ce:	6066      	str	r6, [r4, #4]
    to->idx=from->idx;
    12d0:	f8a6 9002 	strh.w	r9, [r6, #2]
    to->data16=from->data16;
    12d4:	8030      	strh	r0, [r6, #0]
    to->idx=from->idx;
    12d6:	4664      	mov	r4, ip
    12d8:	4656      	mov	r6, sl
    for (i=0; i<size; i++) {
    12da:	3501      	adds	r5, #1
    12dc:	45ae      	cmp	lr, r5
    12de:	f000 8086 	beq.w	13ee <core_list_init+0x1e2>
    if ((*memblock+1) >= memblock_end)
    12e2:	f104 0c08 	add.w	ip, r4, #8
    12e6:	4567      	cmp	r7, ip
    12e8:	d91a      	bls.n	1320 <core_list_init+0x114>
    if ((*datablock+1) >= datablock_end)
    12ea:	f106 0a04 	add.w	sl, r6, #4
    12ee:	45d0      	cmp	r8, sl
    12f0:	d916      	bls.n	1320 <core_list_init+0x114>
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
    12f2:	9801      	ldr	r0, [sp, #4]
    newitem->next=insert_point->next;
    12f4:	6023      	str	r3, [r4, #0]
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
    12f6:	fa1f fb85 	uxth.w	fp, r5
    12fa:	ea8b 0000 	eor.w	r0, fp, r0
        ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
    12fe:	00c0      	lsls	r0, r0, #3
    1300:	f000 0078 	and.w	r0, r0, #120	; 0x78
    1304:	f00b 0b07 	and.w	fp, fp, #7
    1308:	ea40 000b 	orr.w	r0, r0, fp
        info.data16=(dat<<8) | dat;     /* fill the data with actual data and upper bits with rebuild value */
    130c:	ea40 2000 	orr.w	r0, r0, r0, lsl #8
    insert_point->next=newitem;
    1310:	600c      	str	r4, [r1, #0]
    to->idx=from->idx;
    1312:	4623      	mov	r3, r4
    newitem->info=*datablock;
    1314:	6066      	str	r6, [r4, #4]
    to->idx=from->idx;
    1316:	f8a6 9002 	strh.w	r9, [r6, #2]
    to->data16=from->data16;
    131a:	8030      	strh	r0, [r6, #0]
    to->idx=from->idx;
    131c:	4664      	mov	r4, ip
    131e:	4656      	mov	r6, sl
    if ((*memblock+1) >= memblock_end)
    1320:	f104 0c08 	add.w	ip, r4, #8
    1324:	4567      	cmp	r7, ip
    for (i=0; i<size; i++) {
    1326:	f105 0501 	add.w	r5, r5, #1
    if ((*memblock+1) >= memblock_end)
    132a:	d91a      	bls.n	1362 <core_list_init+0x156>
    if ((*datablock+1) >= datablock_end)
    132c:	f106 0a04 	add.w	sl, r6, #4
    1330:	45d0      	cmp	r8, sl
    1332:	d916      	bls.n	1362 <core_list_init+0x156>
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
    1334:	9801      	ldr	r0, [sp, #4]
    newitem->next=insert_point->next;
    1336:	6023      	str	r3, [r4, #0]
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
    1338:	fa1f fb85 	uxth.w	fp, r5
    133c:	ea8b 0000 	eor.w	r0, fp, r0
        ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
    1340:	00c0      	lsls	r0, r0, #3
    1342:	f000 0078 	and.w	r0, r0, #120	; 0x78
    1346:	f00b 0b07 	and.w	fp, fp, #7
    134a:	ea40 000b 	orr.w	r0, r0, fp
        info.data16=(dat<<8) | dat;     /* fill the data with actual data and upper bits with rebuild value */
    134e:	ea40 2000 	orr.w	r0, r0, r0, lsl #8
    insert_point->next=newitem;
    1352:	600c      	str	r4, [r1, #0]
    to->idx=from->idx;
    1354:	4623      	mov	r3, r4
    newitem->info=*datablock;
    1356:	6066      	str	r6, [r4, #4]
    to->idx=from->idx;
    1358:	f8a6 9002 	strh.w	r9, [r6, #2]
    to->data16=from->data16;
    135c:	8030      	strh	r0, [r6, #0]
    to->idx=from->idx;
    135e:	4664      	mov	r4, ip
    1360:	4656      	mov	r6, sl
    if ((*memblock+1) >= memblock_end)
    1362:	f104 0a08 	add.w	sl, r4, #8
    1366:	4557      	cmp	r7, sl
    for (i=0; i<size; i++) {
    1368:	f105 0001 	add.w	r0, r5, #1
    if ((*memblock+1) >= memblock_end)
    136c:	d91a      	bls.n	13a4 <core_list_init+0x198>
    if ((*datablock+1) >= datablock_end)
    136e:	f106 0b04 	add.w	fp, r6, #4
    1372:	45d8      	cmp	r8, fp
    1374:	d916      	bls.n	13a4 <core_list_init+0x198>
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
    1376:	fa1f fc80 	uxth.w	ip, r0
    137a:	9801      	ldr	r0, [sp, #4]
    newitem->next=insert_point->next;
    137c:	6023      	str	r3, [r4, #0]
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
    137e:	ea8c 0000 	eor.w	r0, ip, r0
        ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
    1382:	00c0      	lsls	r0, r0, #3
    1384:	f000 0078 	and.w	r0, r0, #120	; 0x78
    1388:	f00c 0c07 	and.w	ip, ip, #7
    138c:	ea40 000c 	orr.w	r0, r0, ip
        info.data16=(dat<<8) | dat;     /* fill the data with actual data and upper bits with rebuild value */
    1390:	ea40 2000 	orr.w	r0, r0, r0, lsl #8
    insert_point->next=newitem;
    1394:	600c      	str	r4, [r1, #0]
    to->idx=from->idx;
    1396:	4623      	mov	r3, r4
    newitem->info=*datablock;
    1398:	6066      	str	r6, [r4, #4]
    to->idx=from->idx;
    139a:	f8a6 9002 	strh.w	r9, [r6, #2]
    to->data16=from->data16;
    139e:	8030      	strh	r0, [r6, #0]
    to->idx=from->idx;
    13a0:	4654      	mov	r4, sl
    13a2:	465e      	mov	r6, fp
    if ((*memblock+1) >= memblock_end)
    13a4:	f104 0a08 	add.w	sl, r4, #8
    13a8:	4557      	cmp	r7, sl
    for (i=0; i<size; i++) {
    13aa:	f105 0002 	add.w	r0, r5, #2
    if ((*memblock+1) >= memblock_end)
    13ae:	d91a      	bls.n	13e6 <core_list_init+0x1da>
    if ((*datablock+1) >= datablock_end)
    13b0:	f106 0b04 	add.w	fp, r6, #4
    13b4:	45d8      	cmp	r8, fp
    13b6:	d916      	bls.n	13e6 <core_list_init+0x1da>
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
    13b8:	fa1f fc80 	uxth.w	ip, r0
    13bc:	9801      	ldr	r0, [sp, #4]
    newitem->next=insert_point->next;
    13be:	6023      	str	r3, [r4, #0]
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
    13c0:	ea8c 0000 	eor.w	r0, ip, r0
        ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
    13c4:	00c0      	lsls	r0, r0, #3
    13c6:	f000 0078 	and.w	r0, r0, #120	; 0x78
    13ca:	f00c 0c07 	and.w	ip, ip, #7
    13ce:	ea40 000c 	orr.w	r0, r0, ip
        info.data16=(dat<<8) | dat;     /* fill the data with actual data and upper bits with rebuild value */
    13d2:	ea40 2000 	orr.w	r0, r0, r0, lsl #8
    insert_point->next=newitem;
    13d6:	600c      	str	r4, [r1, #0]
    to->idx=from->idx;
    13d8:	4623      	mov	r3, r4
    newitem->info=*datablock;
    13da:	6066      	str	r6, [r4, #4]
    to->idx=from->idx;
    13dc:	f8a6 9002 	strh.w	r9, [r6, #2]
    to->data16=from->data16;
    13e0:	8030      	strh	r0, [r6, #0]
    to->idx=from->idx;
    13e2:	4654      	mov	r4, sl
    13e4:	465e      	mov	r6, fp
    for (i=0; i<size; i++) {
    13e6:	3503      	adds	r5, #3
    13e8:	45ae      	cmp	lr, r5
    13ea:	f47f af7a 	bne.w	12e2 <core_list_init+0xd6>
        if (i<size/5) /* first 20% of the list in order */
    13ee:	4f3a      	ldr	r7, [pc, #232]	; (14d8 <core_list_init+0x2cc>)
    13f0:	fba7 050e 	umull	r0, r5, r7, lr
    13f4:	ea4f 0e95 	mov.w	lr, r5, lsr #2
    while (finder->next!=NULL) {
    13f8:	2602      	movs	r6, #2
    13fa:	2501      	movs	r5, #1
    13fc:	e00a      	b.n	1414 <core_list_init+0x208>
        if (i<size/5) /* first 20% of the list in order */
    13fe:	4575      	cmp	r5, lr
            finder->info->idx=i++;
    1400:	685b      	ldr	r3, [r3, #4]
            finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
    1402:	bf25      	ittet	cs
    1404:	4338      	orrcs	r0, r7
    1406:	f3c0 000d 	ubfxcs	r0, r0, #0, #14
            finder->info->idx=i++;
    140a:	805d      	strhcc	r5, [r3, #2]
            finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
    140c:	8058      	strhcs	r0, [r3, #2]
    140e:	3601      	adds	r6, #1
    1410:	3501      	adds	r5, #1
    to->idx=from->idx;
    1412:	4623      	mov	r3, r4
    while (finder->next!=NULL) {
    1414:	681c      	ldr	r4, [r3, #0]
            finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
    1416:	0230      	lsls	r0, r6, #8
            ee_u16 pat=(ee_u16)(i++ ^ seed); /* get a pseudo random number */
    1418:	ea85 0702 	eor.w	r7, r5, r2
            finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
    141c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
    while (finder->next!=NULL) {
    1420:	2c00      	cmp	r4, #0
    1422:	d1ec      	bne.n	13fe <core_list_init+0x1f2>
    list = core_list_mergesort(list,cmp_idx,NULL);
    1424:	4608      	mov	r0, r1
}
    1426:	b003      	add	sp, #12
    1428:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    list = core_list_mergesort(list,cmp_idx,NULL);
    142c:	f7ff bc20 	b.w	c70 <core_list_mergesort.constprop.2>
    if ((*datablock+1) >= datablock_end)
    1430:	f106 0a04 	add.w	sl, r6, #4
    1434:	45d0      	cmp	r8, sl
    1436:	f67f af1c 	bls.w	1272 <core_list_init+0x66>
        ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
    143a:	00ed      	lsls	r5, r5, #3
    143c:	f005 0578 	and.w	r5, r5, #120	; 0x78
        info.data16=(dat<<8) | dat;     /* fill the data with actual data and upper bits with rebuild value */
    1440:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    newitem->next=insert_point->next;
    1444:	6023      	str	r3, [r4, #0]
    insert_point->next=newitem;
    1446:	600c      	str	r4, [r1, #0]
    to->idx=from->idx;
    1448:	4623      	mov	r3, r4
    newitem->info=*datablock;
    144a:	6066      	str	r6, [r4, #4]
    to->idx=from->idx;
    144c:	f8a6 9002 	strh.w	r9, [r6, #2]
    to->data16=from->data16;
    1450:	8035      	strh	r5, [r6, #0]
    to->idx=from->idx;
    1452:	465c      	mov	r4, fp
    1454:	4656      	mov	r6, sl
    1456:	e70c      	b.n	1272 <core_list_init+0x66>
    if ((*datablock+1) >= datablock_end)
    1458:	f106 0a04 	add.w	sl, r6, #4
    145c:	45d0      	cmp	r8, sl
    145e:	f67f af1c 	bls.w	129a <core_list_init+0x8e>
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
    1462:	9801      	ldr	r0, [sp, #4]
    newitem->next=insert_point->next;
    1464:	6023      	str	r3, [r4, #0]
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
    1466:	fa1f fb85 	uxth.w	fp, r5
    146a:	ea8b 0000 	eor.w	r0, fp, r0
        ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
    146e:	00c0      	lsls	r0, r0, #3
    1470:	f000 0078 	and.w	r0, r0, #120	; 0x78
    1474:	f00b 0b07 	and.w	fp, fp, #7
    1478:	ea40 000b 	orr.w	r0, r0, fp
        info.data16=(dat<<8) | dat;     /* fill the data with actual data and upper bits with rebuild value */
    147c:	ea40 2000 	orr.w	r0, r0, r0, lsl #8
    insert_point->next=newitem;
    1480:	600c      	str	r4, [r1, #0]
    to->idx=from->idx;
    1482:	4623      	mov	r3, r4
    newitem->info=*datablock;
    1484:	6066      	str	r6, [r4, #4]
    to->idx=from->idx;
    1486:	f8a6 9002 	strh.w	r9, [r6, #2]
    to->data16=from->data16;
    148a:	8030      	strh	r0, [r6, #0]
    to->idx=from->idx;
    148c:	4664      	mov	r4, ip
    148e:	4656      	mov	r6, sl
    1490:	e703      	b.n	129a <core_list_init+0x8e>
    if ((*datablock+1) >= datablock_end)
    1492:	f106 0b04 	add.w	fp, r6, #4
    1496:	45d8      	cmp	r8, fp
    1498:	f67f aef9 	bls.w	128e <core_list_init+0x82>
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
    149c:	9801      	ldr	r0, [sp, #4]
    newitem->next=insert_point->next;
    149e:	6023      	str	r3, [r4, #0]
        ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
    14a0:	4068      	eors	r0, r5
        ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
    14a2:	00c0      	lsls	r0, r0, #3
    14a4:	f000 0078 	and.w	r0, r0, #120	; 0x78
    14a8:	4328      	orrs	r0, r5
        info.data16=(dat<<8) | dat;     /* fill the data with actual data and upper bits with rebuild value */
    14aa:	ea40 2a00 	orr.w	sl, r0, r0, lsl #8
    insert_point->next=newitem;
    14ae:	600c      	str	r4, [r1, #0]
    to->idx=from->idx;
    14b0:	4623      	mov	r3, r4
    newitem->info=*datablock;
    14b2:	6066      	str	r6, [r4, #4]
    to->idx=from->idx;
    14b4:	f8a6 9002 	strh.w	r9, [r6, #2]
    to->data16=from->data16;
    14b8:	f8a6 a000 	strh.w	sl, [r6]
    to->idx=from->idx;
    14bc:	4664      	mov	r4, ip
    14be:	465e      	mov	r6, fp
    14c0:	e6e5      	b.n	128e <core_list_init+0x82>
    to->data16=from->data16;
    14c2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    newitem->next=insert_point->next;
    14c6:	608b      	str	r3, [r1, #8]
    insert_point->next=newitem;
    14c8:	600c      	str	r4, [r1, #0]
    newitem->info=*datablock;
    14ca:	60ce      	str	r6, [r1, #12]
    to->data16=from->data16;
    14cc:	4623      	mov	r3, r4
    14ce:	462e      	mov	r6, r5
    14d0:	464c      	mov	r4, r9
    14d2:	6078      	str	r0, [r7, #4]
    14d4:	e6bc      	b.n	1250 <core_list_init+0x44>
    14d6:	bf00      	nop
    14d8:	cccccccd 	.word	0xcccccccd

000014dc <iterate>:
    NULL.
*/
static ee_u16 list_known_crc[]   =      {(ee_u16)0xd4b0,(ee_u16)0x3340,(ee_u16)0x6a79,(ee_u16)0xe714,(ee_u16)0xe3c1};
static ee_u16 matrix_known_crc[] =      {(ee_u16)0xbe52,(ee_u16)0x1199,(ee_u16)0x5608,(ee_u16)0x1fd7,(ee_u16)0x0747};
static ee_u16 state_known_crc[]  =      {(ee_u16)0x5e47,(ee_u16)0x39bf,(ee_u16)0xe5a4,(ee_u16)0x8e3a,(ee_u16)0x8d84};
void *iterate(void *pres) {
    14dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ee_u32 i;
    ee_u16 crc;
    core_results *res=(core_results *)pres;
    ee_u32 iterations=res->iterations;
    14de:	69c7      	ldr	r7, [r0, #28]
    res->crc=0;
    14e0:	2300      	movs	r3, #0
    14e2:	6383      	str	r3, [r0, #56]	; 0x38
    14e4:	63c3      	str	r3, [r0, #60]	; 0x3c
    res->crclist=0;
    res->crcmatrix=0;
    res->crcstate=0;

    for (i=0; i<iterations; i++) {
    14e6:	2f00      	cmp	r7, #0
    14e8:	d056      	beq.n	1598 <iterate+0xbc>
    14ea:	4604      	mov	r4, r0
    14ec:	1e7a      	subs	r2, r7, #1
        crc=core_bench_list(res,1);
    14ee:	2101      	movs	r1, #1
    14f0:	ea02 0601 	and.w	r6, r2, r1
    14f4:	f7ff fc60 	bl	db8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    14f8:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    14fa:	f002 f877 	bl	35ec <crcu16>
        crc=core_bench_list(res,-1);
    14fe:	f04f 31ff 	mov.w	r1, #4294967295
        res->crc=crcu16(crc,res->crc);
    1502:	8720      	strh	r0, [r4, #56]	; 0x38
        crc=core_bench_list(res,-1);
    1504:	4620      	mov	r0, r4
    1506:	f7ff fc57 	bl	db8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    150a:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    150c:	f002 f86e 	bl	35ec <crcu16>
    for (i=0; i<iterations; i++) {
    1510:	2501      	movs	r5, #1
    1512:	42af      	cmp	r7, r5
        res->crc=crcu16(crc,res->crc);
    1514:	8720      	strh	r0, [r4, #56]	; 0x38
        if (i==0) res->crclist=res->crc;
    1516:	8760      	strh	r0, [r4, #58]	; 0x3a
    for (i=0; i<iterations; i++) {
    1518:	d03e      	beq.n	1598 <iterate+0xbc>
    151a:	b19e      	cbz	r6, 1544 <iterate+0x68>
        crc=core_bench_list(res,1);
    151c:	4629      	mov	r1, r5
    151e:	4620      	mov	r0, r4
    1520:	f7ff fc4a 	bl	db8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    1524:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    1526:	f002 f861 	bl	35ec <crcu16>
        crc=core_bench_list(res,-1);
    152a:	f04f 31ff 	mov.w	r1, #4294967295
        res->crc=crcu16(crc,res->crc);
    152e:	8720      	strh	r0, [r4, #56]	; 0x38
        crc=core_bench_list(res,-1);
    1530:	4620      	mov	r0, r4
    1532:	f7ff fc41 	bl	db8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    1536:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    1538:	f002 f858 	bl	35ec <crcu16>
    for (i=0; i<iterations; i++) {
    153c:	3501      	adds	r5, #1
    153e:	42af      	cmp	r7, r5
        res->crc=crcu16(crc,res->crc);
    1540:	8720      	strh	r0, [r4, #56]	; 0x38
    for (i=0; i<iterations; i++) {
    1542:	d029      	beq.n	1598 <iterate+0xbc>
        crc=core_bench_list(res,1);
    1544:	2101      	movs	r1, #1
    1546:	4620      	mov	r0, r4
    1548:	f7ff fc36 	bl	db8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    154c:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    154e:	f002 f84d 	bl	35ec <crcu16>
        crc=core_bench_list(res,-1);
    1552:	f04f 31ff 	mov.w	r1, #4294967295
        res->crc=crcu16(crc,res->crc);
    1556:	8720      	strh	r0, [r4, #56]	; 0x38
        crc=core_bench_list(res,-1);
    1558:	4620      	mov	r0, r4
    155a:	f7ff fc2d 	bl	db8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    155e:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    1560:	f002 f844 	bl	35ec <crcu16>
        crc=core_bench_list(res,1);
    1564:	2101      	movs	r1, #1
        res->crc=crcu16(crc,res->crc);
    1566:	4684      	mov	ip, r0
    for (i=0; i<iterations; i++) {
    1568:	186e      	adds	r6, r5, r1
        crc=core_bench_list(res,1);
    156a:	4620      	mov	r0, r4
        res->crc=crcu16(crc,res->crc);
    156c:	f8a4 c038 	strh.w	ip, [r4, #56]	; 0x38
        if (i==0) res->crclist=res->crc;
    1570:	b1a5      	cbz	r5, 159c <iterate+0xc0>
        crc=core_bench_list(res,1);
    1572:	f7ff fc21 	bl	db8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    1576:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    1578:	f002 f838 	bl	35ec <crcu16>
        crc=core_bench_list(res,-1);
    157c:	f04f 31ff 	mov.w	r1, #4294967295
        res->crc=crcu16(crc,res->crc);
    1580:	8720      	strh	r0, [r4, #56]	; 0x38
        crc=core_bench_list(res,-1);
    1582:	4620      	mov	r0, r4
    1584:	f7ff fc18 	bl	db8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    1588:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    158a:	f002 f82f 	bl	35ec <crcu16>
    158e:	8720      	strh	r0, [r4, #56]	; 0x38
        if (i==0) res->crclist=res->crc;
    1590:	b13e      	cbz	r6, 15a2 <iterate+0xc6>
    for (i=0; i<iterations; i++) {
    1592:	1c75      	adds	r5, r6, #1
    1594:	42af      	cmp	r7, r5
    1596:	d1d5      	bne.n	1544 <iterate+0x68>
    }
    return NULL;
}
    1598:	2000      	movs	r0, #0
    159a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (i==0) res->crclist=res->crc;
    159c:	f8a4 c03a 	strh.w	ip, [r4, #58]	; 0x3a
    15a0:	e7e7      	b.n	1572 <iterate+0x96>
    15a2:	8760      	strh	r0, [r4, #58]	; 0x3a
    15a4:	e7f5      	b.n	1592 <iterate+0xb6>
    15a6:	bf00      	nop

000015a8 <main>:
    4 - Iterations  : Special, if set to 0, iterations will be automatically determined such that the benchmark will run between 10 to 100 secs

*/

#if MAIN_HAS_NOARGC
MAIN_RETURN_TYPE main(void) {
    15a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15ac:	f6ad 0d44 	subw	sp, sp, #2116	; 0x844
    int argc=0;
    15b0:	2300      	movs	r3, #0
    core_results results[MULTITHREAD];
#if (MEM_METHOD==MEM_STACK)
    ee_u8 stack_memblock[TOTAL_DATA_SIZE*MULTITHREAD];
#endif
    /* first call any initializations needed */
    portable_init(&(results[0].port), &argc, argv);
    15b2:	a909      	add	r1, sp, #36	; 0x24
    15b4:	aa0a      	add	r2, sp, #40	; 0x28
    15b6:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
    int argc=0;
    15ba:	9309      	str	r3, [sp, #36]	; 0x24
    portable_init(&(results[0].port), &argc, argv);
    15bc:	f001 fd44 	bl	3048 <portable_init>
    /* First some checks to make sure benchmark will run ok */
    if (sizeof(struct list_head_s)>128) {
        ee_printf("list_head structure too big for comparable data!\n");
        return MAIN_RETURN_VAL;
    }
    results[0].seed1=get_seed(1);
    15c0:	2001      	movs	r0, #1
    15c2:	f001 ffef 	bl	35a4 <get_seed_32>
    15c6:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    results[0].seed2=get_seed(2);
    15ca:	2002      	movs	r0, #2
    15cc:	f001 ffea 	bl	35a4 <get_seed_32>
    15d0:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
    results[0].seed3=get_seed(3);
    15d4:	2003      	movs	r0, #3
    15d6:	f001 ffe5 	bl	35a4 <get_seed_32>
    15da:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
    results[0].iterations=get_seed_32(4);
    15de:	2004      	movs	r0, #4
    15e0:	f001 ffe0 	bl	35a4 <get_seed_32>
    15e4:	9012      	str	r0, [sp, #72]	; 0x48
#if CORE_DEBUG
    results[0].iterations=1;
#endif
    results[0].execs=get_seed_32(5);
    15e6:	2005      	movs	r0, #5
    15e8:	f001 ffdc 	bl	35a4 <get_seed_32>
    if (results[0].execs==0) { /* if not supplied, execute all algorithms */
    15ec:	2800      	cmp	r0, #0
    15ee:	f000 814a 	beq.w	1886 <main+0x2de>
    results[0].execs=get_seed_32(5);
    15f2:	9013      	str	r0, [sp, #76]	; 0x4c
        results[0].execs=ALL_ALGORITHMS_MASK;
    }
        /* put in some default values based on one seed only for easy testing */
    if ((results[0].seed1==0) && (results[0].seed2==0) && (results[0].seed3==0)) { /* validation run */
    15f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    15f6:	2900      	cmp	r1, #0
    15f8:	f040 81c3 	bne.w	1982 <main+0x3da>
    15fc:	f9bd 4030 	ldrsh.w	r4, [sp, #48]	; 0x30
    1600:	2c00      	cmp	r4, #0
    1602:	f000 81c8 	beq.w	1996 <main+0x3ee>
        results[i].size=TOTAL_DATA_SIZE;
        results[i].seed1=results[0].seed1;
        results[i].seed2=results[0].seed2;
        results[i].seed3=results[0].seed3;
        results[i].err=0;
        results[i].execs=results[0].execs;
    1606:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        results[i].seed1=results[0].seed1;
    1608:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
        results[i].memblock[0]=stack_memblock+i*TOTAL_DATA_SIZE;
    160c:	a91c      	add	r1, sp, #112	; 0x70
        results[i].err=0;
    160e:	2500      	movs	r5, #0
    1610:	f3c3 0640 	ubfx	r6, r3, #1, #1
    1614:	f003 0701 	and.w	r7, r3, #1
        results[i].memblock[0]=stack_memblock+i*TOTAL_DATA_SIZE;
    1618:	910d      	str	r1, [sp, #52]	; 0x34
    for (i=0 ; i<MULTITHREAD; i++)
        results[i].size=results[i].size/num_algorithms;
    /* Assign pointers */
    for (i=0; i<NUM_ALGORITHMS; i++) {
        ee_u32 ctx;
        if ((1<<(ee_u32)i) & results[0].execs) {
    161a:	f013 0101 	ands.w	r1, r3, #1
        results[i].err=0;
    161e:	f8ad 506c 	strh.w	r5, [sp, #108]	; 0x6c
        results[i].size=results[i].size/num_algorithms;
    1622:	443e      	add	r6, r7
            for (ctx=0 ; ctx<MULTITHREAD; ctx++)
                results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
    1624:	bf18      	it	ne
    1626:	ad1c      	addne	r5, sp, #112	; 0x70
        results[i].size=results[i].size/num_algorithms;
    1628:	f3c3 0880 	ubfx	r8, r3, #2, #1
    162c:	f003 0402 	and.w	r4, r3, #2
    1630:	4446      	add	r6, r8
    1632:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
                results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
    1636:	bf18      	it	ne
    1638:	950e      	strne	r5, [sp, #56]	; 0x38
        results[i].size=results[i].size/num_algorithms;
    163a:	fbb0 f0f6 	udiv	r0, r0, r6
            j++;
    163e:	bf18      	it	ne
    1640:	2501      	movne	r5, #1
        results[i].size=results[i].size/num_algorithms;
    1642:	f003 0604 	and.w	r6, r3, #4
    1646:	9011      	str	r0, [sp, #68]	; 0x44
        if ((1<<(ee_u32)i) & results[0].execs) {
    1648:	bf08      	it	eq
    164a:	460d      	moveq	r5, r1
    164c:	b134      	cbz	r4, 165c <main+0xb4>
                results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
    164e:	f10d 0970 	add.w	r9, sp, #112	; 0x70
    1652:	fb00 9705 	mla	r7, r0, r5, r9
            j++;
    1656:	3501      	adds	r5, #1
                results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
    1658:	970f      	str	r7, [sp, #60]	; 0x3c
            j++;
    165a:	b2ad      	uxth	r5, r5
        if ((1<<(ee_u32)i) & results[0].execs) {
    165c:	b126      	cbz	r6, 1668 <main+0xc0>
                results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
    165e:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
    1662:	fb00 a605 	mla	r6, r0, r5, sl
    1666:	9610      	str	r6, [sp, #64]	; 0x40
        }
    }
    /* call inits */
    for (i=0 ; i<MULTITHREAD; i++) {
        if (results[i].execs & ID_LIST) {
    1668:	2900      	cmp	r1, #0
    166a:	f040 80ec 	bne.w	1846 <main+0x29e>
            results[i].list=core_list_init(results[0].size,results[i].memblock[1],results[i].seed1);
        }
        if (results[i].execs & ID_MATRIX) {
    166e:	2c00      	cmp	r4, #0
    1670:	f040 80f3 	bne.w	185a <main+0x2b2>
            core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat) );
        }
        if (results[i].execs & ID_STATE) {
    1674:	075a      	lsls	r2, r3, #29
    1676:	f100 80ff 	bmi.w	1878 <main+0x2d0>
            core_init_state(results[0].size,results[i].seed1,results[i].memblock[3]);
        }
    }

    /* automatically determine number of iterations if not set */
    if (results[0].iterations==0) {
    167a:	9812      	ldr	r0, [sp, #72]	; 0x48
    167c:	2800      	cmp	r0, #0
    167e:	f040 809f 	bne.w	17c0 <main+0x218>
        secs_ret secs_passed=0;
        ee_u32 divisor;
        results[0].iterations=1;
    1682:	2201      	movs	r2, #1
        while (secs_passed < (secs_ret)1) {
    1684:	4fc8      	ldr	r7, [pc, #800]	; (19a8 <main+0x400>)
        results[0].iterations=1;
    1686:	9212      	str	r2, [sp, #72]	; 0x48
        while (secs_passed < (secs_ret)1) {
    1688:	f04f 0a00 	mov.w	sl, #0
    res->crc=0;
    168c:	4681      	mov	r9, r0
            results[0].iterations*=10;
    168e:	9912      	ldr	r1, [sp, #72]	; 0x48
    1690:	eb01 0581 	add.w	r5, r1, r1, lsl #2
    1694:	006e      	lsls	r6, r5, #1
    1696:	9612      	str	r6, [sp, #72]	; 0x48
            start_time();
    1698:	f001 fbda 	bl	2e50 <start_time>
    ee_u32 iterations=res->iterations;
    169c:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    res->crc=0;
    16a0:	f8cd 9064 	str.w	r9, [sp, #100]	; 0x64
    16a4:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
    for (i=0; i<iterations; i++) {
    16a8:	f1b8 0f00 	cmp.w	r8, #0
    16ac:	d06b      	beq.n	1786 <main+0x1de>
        crc=core_bench_list(res,1);
    16ae:	2101      	movs	r1, #1
    16b0:	f108 34ff 	add.w	r4, r8, #4294967295
    16b4:	a80b      	add	r0, sp, #44	; 0x2c
    16b6:	ea04 0501 	and.w	r5, r4, r1
    16ba:	f7ff fb7d 	bl	db8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    16be:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
    16c2:	f001 ff93 	bl	35ec <crcu16>
        crc=core_bench_list(res,-1);
    16c6:	f04f 31ff 	mov.w	r1, #4294967295
        res->crc=crcu16(crc,res->crc);
    16ca:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
        crc=core_bench_list(res,-1);
    16ce:	a80b      	add	r0, sp, #44	; 0x2c
    16d0:	f7ff fb72 	bl	db8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    16d4:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
    16d8:	f001 ff88 	bl	35ec <crcu16>
    for (i=0; i<iterations; i++) {
    16dc:	2401      	movs	r4, #1
    16de:	45a0      	cmp	r8, r4
        res->crc=crcu16(crc,res->crc);
    16e0:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
        if (i==0) res->crclist=res->crc;
    16e4:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
    for (i=0; i<iterations; i++) {
    16e8:	d04d      	beq.n	1786 <main+0x1de>
    16ea:	b1bd      	cbz	r5, 171c <main+0x174>
        crc=core_bench_list(res,1);
    16ec:	4621      	mov	r1, r4
    16ee:	a80b      	add	r0, sp, #44	; 0x2c
    16f0:	f7ff fb62 	bl	db8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    16f4:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
    16f8:	f001 ff78 	bl	35ec <crcu16>
        crc=core_bench_list(res,-1);
    16fc:	f04f 31ff 	mov.w	r1, #4294967295
        res->crc=crcu16(crc,res->crc);
    1700:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
        crc=core_bench_list(res,-1);
    1704:	a80b      	add	r0, sp, #44	; 0x2c
    1706:	f7ff fb57 	bl	db8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    170a:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
    170e:	f001 ff6d 	bl	35ec <crcu16>
    for (i=0; i<iterations; i++) {
    1712:	3401      	adds	r4, #1
    1714:	45a0      	cmp	r8, r4
        res->crc=crcu16(crc,res->crc);
    1716:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
    for (i=0; i<iterations; i++) {
    171a:	d034      	beq.n	1786 <main+0x1de>
        crc=core_bench_list(res,1);
    171c:	2101      	movs	r1, #1
    171e:	a80b      	add	r0, sp, #44	; 0x2c
    1720:	f7ff fb4a 	bl	db8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    1724:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
    1728:	f001 ff60 	bl	35ec <crcu16>
        crc=core_bench_list(res,-1);
    172c:	f04f 31ff 	mov.w	r1, #4294967295
        res->crc=crcu16(crc,res->crc);
    1730:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
        crc=core_bench_list(res,-1);
    1734:	a80b      	add	r0, sp, #44	; 0x2c
    1736:	f7ff fb3f 	bl	db8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    173a:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
    173e:	f001 ff55 	bl	35ec <crcu16>
        crc=core_bench_list(res,1);
    1742:	2101      	movs	r1, #1
        res->crc=crcu16(crc,res->crc);
    1744:	4683      	mov	fp, r0
    for (i=0; i<iterations; i++) {
    1746:	1866      	adds	r6, r4, r1
        crc=core_bench_list(res,1);
    1748:	a80b      	add	r0, sp, #44	; 0x2c
        res->crc=crcu16(crc,res->crc);
    174a:	f8ad b064 	strh.w	fp, [sp, #100]	; 0x64
        if (i==0) res->crclist=res->crc;
    174e:	2c00      	cmp	r4, #0
    1750:	f000 8294 	beq.w	1c7c <main+0x6d4>
        crc=core_bench_list(res,1);
    1754:	f7ff fb30 	bl	db8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    1758:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
    175c:	f001 ff46 	bl	35ec <crcu16>
        crc=core_bench_list(res,-1);
    1760:	f04f 31ff 	mov.w	r1, #4294967295
        res->crc=crcu16(crc,res->crc);
    1764:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
        crc=core_bench_list(res,-1);
    1768:	a80b      	add	r0, sp, #44	; 0x2c
    176a:	f7ff fb25 	bl	db8 <core_bench_list>
        res->crc=crcu16(crc,res->crc);
    176e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
    1772:	f001 ff3b 	bl	35ec <crcu16>
    1776:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
        if (i==0) res->crclist=res->crc;
    177a:	2e00      	cmp	r6, #0
    177c:	f000 8281 	beq.w	1c82 <main+0x6da>
    for (i=0; i<iterations; i++) {
    1780:	1c74      	adds	r4, r6, #1
    1782:	45a0      	cmp	r8, r4
    1784:	d1ca      	bne.n	171c <main+0x174>
            iterate(&results[0]);
            stop_time();
    1786:	f001 fb7d 	bl	2e84 <stop_time>
            secs_passed=time_in_secs(get_time());
    178a:	f001 fb8f 	bl	2eac <get_time>
    178e:	f001 fb97 	bl	2ec0 <time_in_secs>
        while (secs_passed < (secs_ret)1) {
    1792:	4652      	mov	r2, sl
    1794:	463b      	mov	r3, r7
            secs_passed=time_in_secs(get_time());
    1796:	4680      	mov	r8, r0
    1798:	460d      	mov	r5, r1
        while (secs_passed < (secs_ret)1) {
    179a:	f7ff f8bb 	bl	914 <__aeabi_dcmplt>
    179e:	2800      	cmp	r0, #0
    17a0:	f47f af75 	bne.w	168e <main+0xe6>
        }
        /* now we know it executes for at least 1 sec, set actual run time at about 10 secs */
        divisor=(ee_u32)secs_passed;
    17a4:	4640      	mov	r0, r8
    17a6:	4629      	mov	r1, r5
    17a8:	f7ff f8dc 	bl	964 <__aeabi_d2uiz>
        if (divisor==0) /* some machines cast float to int as 0 since this conversion is not defined by ANSI, but we know at least one second passed */
            divisor=1;
        results[0].iterations*=1+10/divisor;
    17ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
            divisor=1;
    17ae:	2800      	cmp	r0, #0
    17b0:	bf08      	it	eq
    17b2:	2001      	moveq	r0, #1
        results[0].iterations*=1+10/divisor;
    17b4:	270a      	movs	r7, #10
    17b6:	fbb7 f0f0 	udiv	r0, r7, r0
    17ba:	fb00 3203 	mla	r2, r0, r3, r3
    17be:	9212      	str	r2, [sp, #72]	; 0x48
    }
    /* perform actual benchmark */
    start_time();
    17c0:	f001 fb46 	bl	2e50 <start_time>
    }
    for (i=0 ; i<default_num_contexts; i++) {
        core_stop_parallel(&results[i]);
    }
#else
    iterate(&results[0]);
    17c4:	a80b      	add	r0, sp, #44	; 0x2c
    17c6:	f7ff fe89 	bl	14dc <iterate>
#endif
    stop_time();
    17ca:	f001 fb5b 	bl	2e84 <stop_time>
    total_time=get_time();
    17ce:	f001 fb6d 	bl	2eac <get_time>
    /* get a function of the input to report */
    seedcrc=crc16(results[0].seed1,seedcrc);
    17d2:	2100      	movs	r1, #0
    total_time=get_time();
    17d4:	4681      	mov	r9, r0
    seedcrc=crc16(results[0].seed1,seedcrc);
    17d6:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	; 0x2c
    17da:	f002 f8cf 	bl	397c <crc16>
    seedcrc=crc16(results[0].seed2,seedcrc);
    17de:	4601      	mov	r1, r0
    17e0:	f9bd 002e 	ldrsh.w	r0, [sp, #46]	; 0x2e
    17e4:	f002 f8ca 	bl	397c <crc16>
    seedcrc=crc16(results[0].seed3,seedcrc);
    17e8:	4601      	mov	r1, r0
    17ea:	f9bd 0030 	ldrsh.w	r0, [sp, #48]	; 0x30
    17ee:	f002 f8c5 	bl	397c <crc16>
    seedcrc=crc16(results[0].size,seedcrc);
    17f2:	4601      	mov	r1, r0
    17f4:	f9bd 0044 	ldrsh.w	r0, [sp, #68]	; 0x44
    17f8:	f002 f8c0 	bl	397c <crc16>

    switch (seedcrc) { /* test known output for common seeds */
    17fc:	f647 3605 	movw	r6, #31493	; 0x7b05
    1800:	42b0      	cmp	r0, r6
    seedcrc=crc16(results[0].size,seedcrc);
    1802:	9005      	str	r0, [sp, #20]
    switch (seedcrc) { /* test known output for common seeds */
    1804:	f000 8222 	beq.w	1c4c <main+0x6a4>
    1808:	d840      	bhi.n	188c <main+0x2e4>
    180a:	f641 04f2 	movw	r4, #6386	; 0x18f2
    180e:	42a0      	cmp	r0, r4
    1810:	f000 8208 	beq.w	1c24 <main+0x67c>
    1814:	f644 65af 	movw	r5, #20143	; 0x4eaf
    1818:	42a8      	cmp	r0, r5
    181a:	f040 80d3 	bne.w	19c4 <main+0x41c>
            ee_printf("6k validation run parameters for coremark.\n");
            break;
        case 0x4eaf: /* seed1=0x8, seed2=0x8, seed3=0x8, size 400 per algorithm */
            known_id=2;
            ee_printf("Profile generation run parameters for coremark.\n");
            break;
    181e:	f24e 54a4 	movw	r4, #58788	; 0xe5a4
    1822:	f245 6508 	movw	r5, #22024	; 0x5608
    1826:	f646 2679 	movw	r6, #27257	; 0x6a79
            ee_printf("Profile generation run parameters for coremark.\n");
    182a:	4860      	ldr	r0, [pc, #384]	; (19ac <main+0x404>)
            break;
    182c:	9404      	str	r4, [sp, #16]
    182e:	4627      	mov	r7, r4
    1830:	9503      	str	r5, [sp, #12]
    1832:	462c      	mov	r4, r5
    1834:	9602      	str	r6, [sp, #8]
            ee_printf("Profile generation run parameters for coremark.\n");
    1836:	f001 fc99 	bl	316c <am_sprintf>
            known_id=2;
    183a:	2302      	movs	r3, #2
            break;
    183c:	46bb      	mov	fp, r7
    183e:	46a2      	mov	sl, r4
    1840:	4630      	mov	r0, r6
            known_id=2;
    1842:	9307      	str	r3, [sp, #28]
            break;
    1844:	e040      	b.n	18c8 <main+0x320>
            results[i].list=core_list_init(results[0].size,results[i].memblock[1],results[i].seed1);
    1846:	990e      	ldr	r1, [sp, #56]	; 0x38
    1848:	f7ff fce0 	bl	120c <core_list_init>
    184c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    184e:	9014      	str	r0, [sp, #80]	; 0x50
    1850:	f003 0402 	and.w	r4, r3, #2
        if (results[i].execs & ID_MATRIX) {
    1854:	2c00      	cmp	r4, #0
    1856:	f43f af0d 	beq.w	1674 <main+0xcc>
            core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat) );
    185a:	f9bd b02e 	ldrsh.w	fp, [sp, #46]	; 0x2e
    185e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
    1862:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1864:	9811      	ldr	r0, [sp, #68]	; 0x44
    1866:	ea4c 420b 	orr.w	r2, ip, fp, lsl #16
    186a:	ab15      	add	r3, sp, #84	; 0x54
    186c:	f001 f9cc 	bl	2c08 <core_init_matrix>
    1870:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        if (results[i].execs & ID_STATE) {
    1872:	075a      	lsls	r2, r3, #29
    1874:	f57f af01 	bpl.w	167a <main+0xd2>
            core_init_state(results[0].size,results[i].seed1,results[i].memblock[3]);
    1878:	9a10      	ldr	r2, [sp, #64]	; 0x40
    187a:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
    187e:	9811      	ldr	r0, [sp, #68]	; 0x44
    1880:	f001 fcb6 	bl	31f0 <core_init_state>
    1884:	e6f9      	b.n	167a <main+0xd2>
        results[0].execs=ALL_ALGORITHMS_MASK;
    1886:	2007      	movs	r0, #7
    1888:	9013      	str	r0, [sp, #76]	; 0x4c
    188a:	e6b3      	b.n	15f4 <main+0x4c>
    switch (seedcrc) { /* test known output for common seeds */
    188c:	9a05      	ldr	r2, [sp, #20]
    188e:	f648 2e02 	movw	lr, #35330	; 0x8a02
    1892:	4572      	cmp	r2, lr
    1894:	f000 81b2 	beq.w	1bfc <main+0x654>
    1898:	f64e 1cf5 	movw	ip, #59893	; 0xe9f5
    189c:	4562      	cmp	r2, ip
    189e:	f040 8091 	bne.w	19c4 <main+0x41c>
        case 0xe9f5: /* seed1=0, seed2=0, seed3=0x66, size 666 per algorithm */
            known_id=3;
            ee_printf("2K performance run parameters for coremark.\n");
            break;
    18a2:	f648 643a 	movw	r4, #36410	; 0x8e3a
    18a6:	f641 75d7 	movw	r5, #8151	; 0x1fd7
    18aa:	f24e 7614 	movw	r6, #59156	; 0xe714
            ee_printf("2K performance run parameters for coremark.\n");
    18ae:	4840      	ldr	r0, [pc, #256]	; (19b0 <main+0x408>)
            break;
    18b0:	9404      	str	r4, [sp, #16]
    18b2:	4627      	mov	r7, r4
    18b4:	9503      	str	r5, [sp, #12]
    18b6:	462c      	mov	r4, r5
    18b8:	9602      	str	r6, [sp, #8]
            ee_printf("2K performance run parameters for coremark.\n");
    18ba:	f001 fc57 	bl	316c <am_sprintf>
            known_id=3;
    18be:	2303      	movs	r3, #3
            break;
    18c0:	46bb      	mov	fp, r7
    18c2:	46a2      	mov	sl, r4
    18c4:	4630      	mov	r0, r6
            known_id=3;
    18c6:	9307      	str	r3, [sp, #28]
        default:
            total_errors=-1;
            break;
    }
    if (known_id>=0) {
        for (i=0 ; i<default_num_contexts; i++) {
    18c8:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 19c0 <main+0x418>
    18cc:	f8d8 6000 	ldr.w	r6, [r8]
    18d0:	2e00      	cmp	r6, #0
    18d2:	d07c      	beq.n	19ce <main+0x426>
    18d4:	2600      	movs	r6, #0
    18d6:	f8cd 9018 	str.w	r9, [sp, #24]
    18da:	4634      	mov	r4, r6
    18dc:	4681      	mov	r9, r0
    18de:	e016      	b.n	190e <main+0x366>
                (results[i].crcmatrix!=matrix_known_crc[known_id])) {
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",i,results[i].crcmatrix,matrix_known_crc[known_id]);
                results[i].err++;
            }
            if ((results[i].execs & ID_STATE) &&
                (results[i].crcstate!=state_known_crc[known_id])) {
    18e0:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
            if ((results[i].execs & ID_STATE) &&
    18e2:	455a      	cmp	r2, fp
    18e4:	d04a      	beq.n	197c <main+0x3d4>
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",i,results[i].crcstate,state_known_crc[known_id]);
    18e6:	9b04      	ldr	r3, [sp, #16]
    18e8:	4832      	ldr	r0, [pc, #200]	; (19b4 <main+0x40c>)
    18ea:	4621      	mov	r1, r4
    18ec:	f001 fc3e 	bl	316c <am_sprintf>
                results[i].err++;
    18f0:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
    18f4:	3201      	adds	r2, #1
    18f6:	b210      	sxth	r0, r2
    18f8:	f8a5 0040 	strh.w	r0, [r5, #64]	; 0x40
        for (i=0 ; i<default_num_contexts; i++) {
    18fc:	3401      	adds	r4, #1
    18fe:	f8d8 7000 	ldr.w	r7, [r8]
    1902:	b2a4      	uxth	r4, r4
            }
            total_errors+=results[i].err;
    1904:	4406      	add	r6, r0
        for (i=0 ; i<default_num_contexts; i++) {
    1906:	42bc      	cmp	r4, r7
            total_errors+=results[i].err;
    1908:	b236      	sxth	r6, r6
        for (i=0 ; i<default_num_contexts; i++) {
    190a:	f080 8145 	bcs.w	1b98 <main+0x5f0>
            results[i].err=0;
    190e:	0125      	lsls	r5, r4, #4
    1910:	1928      	adds	r0, r5, r4
    1912:	f10d 0e2c 	add.w	lr, sp, #44	; 0x2c
    1916:	eb0e 0780 	add.w	r7, lr, r0, lsl #2
    191a:	2100      	movs	r1, #0
            if ((results[i].execs & ID_LIST) &&
    191c:	6a3a      	ldr	r2, [r7, #32]
            results[i].err=0;
    191e:	f8a7 1040 	strh.w	r1, [r7, #64]	; 0x40
            if ((results[i].execs & ID_LIST) &&
    1922:	07d3      	lsls	r3, r2, #31
    1924:	d50c      	bpl.n	1940 <main+0x398>
                (results[i].crclist!=list_known_crc[known_id])) {
    1926:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
            if ((results[i].execs & ID_LIST) &&
    1928:	454a      	cmp	r2, r9
    192a:	d009      	beq.n	1940 <main+0x398>
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",i,results[i].crclist,list_known_crc[known_id]);
    192c:	9b02      	ldr	r3, [sp, #8]
    192e:	4822      	ldr	r0, [pc, #136]	; (19b8 <main+0x410>)
    1930:	4621      	mov	r1, r4
    1932:	f001 fc1b 	bl	316c <am_sprintf>
                results[i].err++;
    1936:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
    193a:	3301      	adds	r3, #1
    193c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            if ((results[i].execs & ID_MATRIX) &&
    1940:	1928      	adds	r0, r5, r4
    1942:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    1946:	eb0c 0780 	add.w	r7, ip, r0, lsl #2
    194a:	6a3b      	ldr	r3, [r7, #32]
    194c:	0798      	lsls	r0, r3, #30
    194e:	d50d      	bpl.n	196c <main+0x3c4>
                (results[i].crcmatrix!=matrix_known_crc[known_id])) {
    1950:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
            if ((results[i].execs & ID_MATRIX) &&
    1952:	4552      	cmp	r2, sl
    1954:	d00a      	beq.n	196c <main+0x3c4>
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",i,results[i].crcmatrix,matrix_known_crc[known_id]);
    1956:	9b03      	ldr	r3, [sp, #12]
    1958:	4818      	ldr	r0, [pc, #96]	; (19bc <main+0x414>)
    195a:	4621      	mov	r1, r4
    195c:	f001 fc06 	bl	316c <am_sprintf>
                results[i].err++;
    1960:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
    1964:	6a3b      	ldr	r3, [r7, #32]
    1966:	3101      	adds	r1, #1
    1968:	f8a7 1040 	strh.w	r1, [r7, #64]	; 0x40
                (results[i].crcstate!=state_known_crc[known_id])) {
    196c:	4425      	add	r5, r4
    196e:	f10d 0e2c 	add.w	lr, sp, #44	; 0x2c
            if ((results[i].execs & ID_STATE) &&
    1972:	f013 0f04 	tst.w	r3, #4
                (results[i].crcstate!=state_known_crc[known_id])) {
    1976:	eb0e 0585 	add.w	r5, lr, r5, lsl #2
            if ((results[i].execs & ID_STATE) &&
    197a:	d1b1      	bne.n	18e0 <main+0x338>
    197c:	f9b5 0040 	ldrsh.w	r0, [r5, #64]	; 0x40
    1980:	e7bc      	b.n	18fc <main+0x354>
    if ((results[0].seed1==1) && (results[0].seed2==0) && (results[0].seed3==0)) { /* perfromance run */
    1982:	2901      	cmp	r1, #1
    1984:	f47f ae3f 	bne.w	1606 <main+0x5e>
    1988:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
    198c:	2a00      	cmp	r2, #0
    198e:	f47f ae3a 	bne.w	1606 <main+0x5e>
        results[0].seed1=0x3415;
    1992:	f243 4415 	movw	r4, #13333	; 0x3415
        results[0].seed3=0x66;
    1996:	2566      	movs	r5, #102	; 0x66
        results[0].seed1=0x3415;
    1998:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
        results[0].seed2=0x3415;
    199c:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
        results[0].seed3=0x66;
    19a0:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
    19a4:	e62f      	b.n	1606 <main+0x5e>
    19a6:	bf00      	nop
    19a8:	3ff00000 	.word	0x3ff00000
    19ac:	000058dc 	.word	0x000058dc
    19b0:	00005910 	.word	0x00005910
    19b4:	000059d0 	.word	0x000059d0
    19b8:	0000596c 	.word	0x0000596c
    19bc:	0000599c 	.word	0x0000599c
    19c0:	10001000 	.word	0x10001000
    ee_s16 known_id=-1,total_errors=0;
    19c4:	f04f 36ff 	mov.w	r6, #4294967295
    19c8:	f8df 832c 	ldr.w	r8, [pc, #812]	; 1cf8 <main+0x750>
    19cc:	9607      	str	r6, [sp, #28]
        }
    }
    total_errors+=check_data_types();
    19ce:	f002 f86f 	bl	3ab0 <check_data_types>
    /* and report results */
    ee_printf("CoreMark Size    : %lu\n",(ee_u32)results[0].size);
    19d2:	9911      	ldr	r1, [sp, #68]	; 0x44
    total_errors+=check_data_types();
    19d4:	4406      	add	r6, r0
    ee_printf("CoreMark Size    : %lu\n",(ee_u32)results[0].size);
    19d6:	48ac      	ldr	r0, [pc, #688]	; (1c88 <main+0x6e0>)
    19d8:	f001 fbc8 	bl	316c <am_sprintf>
    ee_printf("Total ticks      : %lu\n",(ee_u32)total_time);
    19dc:	4649      	mov	r1, r9
    19de:	48ab      	ldr	r0, [pc, #684]	; (1c8c <main+0x6e4>)
    19e0:	f001 fbc4 	bl	316c <am_sprintf>
#if HAS_FLOAT
    ee_printf("Total time (secs): %f\n",time_in_secs(total_time));
    19e4:	4648      	mov	r0, r9
    19e6:	f001 fa6b 	bl	2ec0 <time_in_secs>
    19ea:	4602      	mov	r2, r0
    19ec:	460b      	mov	r3, r1
    19ee:	48a8      	ldr	r0, [pc, #672]	; (1c90 <main+0x6e8>)
    19f0:	f001 fbbc 	bl	316c <am_sprintf>
    if (time_in_secs(total_time) > 0)
    19f4:	4648      	mov	r0, r9
    19f6:	f001 fa63 	bl	2ec0 <time_in_secs>
    19fa:	2200      	movs	r2, #0
    19fc:	2300      	movs	r3, #0
    total_errors+=check_data_types();
    19fe:	b2b6      	uxth	r6, r6
    if (time_in_secs(total_time) > 0)
    1a00:	f7fe ffa6 	bl	950 <__aeabi_dcmpgt>
    1a04:	b1b0      	cbz	r0, 1a34 <main+0x48c>
        ee_printf("Iterations/Sec   : %f\n",default_num_contexts*results[0].iterations/time_in_secs(total_time));
    1a06:	9912      	ldr	r1, [sp, #72]	; 0x48
    1a08:	f8d8 0000 	ldr.w	r0, [r8]
    1a0c:	fb00 f001 	mul.w	r0, r0, r1
    1a10:	f7fe fc98 	bl	344 <__aeabi_ui2d>
    1a14:	4683      	mov	fp, r0
    1a16:	4648      	mov	r0, r9
    1a18:	468a      	mov	sl, r1
    1a1a:	f001 fa51 	bl	2ec0 <time_in_secs>
    1a1e:	4602      	mov	r2, r0
    1a20:	460b      	mov	r3, r1
    1a22:	4658      	mov	r0, fp
    1a24:	4651      	mov	r1, sl
    1a26:	f7fe fe2d 	bl	684 <__aeabi_ddiv>
    1a2a:	4602      	mov	r2, r0
    1a2c:	460b      	mov	r3, r1
    1a2e:	4899      	ldr	r0, [pc, #612]	; (1c94 <main+0x6ec>)
    1a30:	f001 fb9c 	bl	316c <am_sprintf>
#else
    ee_printf("Total time (secs): %d\n",time_in_secs(total_time));
    if (time_in_secs(total_time) > 0)
        ee_printf("Iterations/Sec   : %d\n",default_num_contexts*results[0].iterations/time_in_secs(total_time));
#endif
    if (time_in_secs(total_time) < 10) {
    1a34:	4648      	mov	r0, r9
    1a36:	f001 fa43 	bl	2ec0 <time_in_secs>
    1a3a:	2200      	movs	r2, #0
    1a3c:	4b96      	ldr	r3, [pc, #600]	; (1c98 <main+0x6f0>)
    1a3e:	f7fe ff69 	bl	914 <__aeabi_dcmplt>
    1a42:	2800      	cmp	r0, #0
    1a44:	f040 80ab 	bne.w	1b9e <main+0x5f6>
    total_errors+=check_data_types();
    1a48:	b235      	sxth	r5, r6
        ee_printf("ERROR! Must execute for at least 10 secs for a valid result!\n");
        total_errors++;
    }

    ee_printf("Iterations       : %lu\n",(ee_u32)default_num_contexts*results[0].iterations);
    1a4a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1a4c:	f8d8 1000 	ldr.w	r1, [r8]
    1a50:	4892      	ldr	r0, [pc, #584]	; (1c9c <main+0x6f4>)
    1a52:	fb01 f102 	mul.w	r1, r1, r2
    1a56:	f001 fb89 	bl	316c <am_sprintf>
    ee_printf("Compiler version : %s\n",COMPILER_VERSION);
    1a5a:	4991      	ldr	r1, [pc, #580]	; (1ca0 <main+0x6f8>)
    1a5c:	4891      	ldr	r0, [pc, #580]	; (1ca4 <main+0x6fc>)
    1a5e:	f001 fb85 	bl	316c <am_sprintf>
//  ee_printf("Compiler flags   : %s\n",COMPILER_FLAGS);
#if (MULTITHREAD>1)
    ee_printf("Parallel %s : %d\n",PARALLEL_METHOD,default_num_contexts);
#endif
    ee_printf("Memory location  : %s\n",MEM_LOCATION);
    1a62:	4991      	ldr	r1, [pc, #580]	; (1ca8 <main+0x700>)
    1a64:	4891      	ldr	r0, [pc, #580]	; (1cac <main+0x704>)
    1a66:	f001 fb81 	bl	316c <am_sprintf>
    /* output for verification */
    ee_printf("seedcrc          : 0x%04x\n",seedcrc);
    1a6a:	9905      	ldr	r1, [sp, #20]
    1a6c:	4890      	ldr	r0, [pc, #576]	; (1cb0 <main+0x708>)
    1a6e:	f001 fb7d 	bl	316c <am_sprintf>
    if (results[0].execs & ID_LIST)
    1a72:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    1a74:	07f9      	lsls	r1, r7, #31
    1a76:	d516      	bpl.n	1aa6 <main+0x4fe>
        for (i=0 ; i<default_num_contexts; i++)
    1a78:	f8d8 4000 	ldr.w	r4, [r8]
    1a7c:	b19c      	cbz	r4, 1aa6 <main+0x4fe>
            ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
    1a7e:	4e8d      	ldr	r6, [pc, #564]	; (1cb4 <main+0x70c>)
        for (i=0 ; i<default_num_contexts; i++)
    1a80:	2700      	movs	r7, #0
            ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
    1a82:	eb07 1007 	add.w	r0, r7, r7, lsl #4
    1a86:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    1a8a:	eb0c 0e80 	add.w	lr, ip, r0, lsl #2
    1a8e:	4639      	mov	r1, r7
    1a90:	f8be 203a 	ldrh.w	r2, [lr, #58]	; 0x3a
    1a94:	4630      	mov	r0, r6
    1a96:	f001 fb69 	bl	316c <am_sprintf>
        for (i=0 ; i<default_num_contexts; i++)
    1a9a:	3701      	adds	r7, #1
    1a9c:	f8d8 1000 	ldr.w	r1, [r8]
    1aa0:	b2bf      	uxth	r7, r7
    1aa2:	428f      	cmp	r7, r1
    1aa4:	d3ed      	bcc.n	1a82 <main+0x4da>
    if (results[0].execs & ID_MATRIX)
    1aa6:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    1aa8:	07ba      	lsls	r2, r7, #30
    1aaa:	d518      	bpl.n	1ade <main+0x536>
        for (i=0 ; i<default_num_contexts; i++)
    1aac:	f8d8 2000 	ldr.w	r2, [r8]
    1ab0:	2a00      	cmp	r2, #0
    1ab2:	f000 80df 	beq.w	1c74 <main+0x6cc>
            ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
    1ab6:	4e80      	ldr	r6, [pc, #512]	; (1cb8 <main+0x710>)
        for (i=0 ; i<default_num_contexts; i++)
    1ab8:	2400      	movs	r4, #0
            ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
    1aba:	eb04 1b04 	add.w	fp, r4, r4, lsl #4
    1abe:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
    1ac2:	eb0a 038b 	add.w	r3, sl, fp, lsl #2
    1ac6:	4621      	mov	r1, r4
    1ac8:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    1aca:	4630      	mov	r0, r6
    1acc:	f001 fb4e 	bl	316c <am_sprintf>
        for (i=0 ; i<default_num_contexts; i++)
    1ad0:	3401      	adds	r4, #1
    1ad2:	f8d8 1000 	ldr.w	r1, [r8]
    1ad6:	b2a4      	uxth	r4, r4
    1ad8:	428c      	cmp	r4, r1
    1ada:	d3ee      	bcc.n	1aba <main+0x512>
    1adc:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    if (results[0].execs & ID_STATE)
        for (i=0 ; i<default_num_contexts; i++)
    1ade:	f8d8 2000 	ldr.w	r2, [r8]
    if (results[0].execs & ID_STATE)
    1ae2:	f017 0f04 	tst.w	r7, #4
    1ae6:	d014      	beq.n	1b12 <main+0x56a>
        for (i=0 ; i<default_num_contexts; i++)
    1ae8:	b33a      	cbz	r2, 1b3a <main+0x592>
            ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
    1aea:	4e74      	ldr	r6, [pc, #464]	; (1cbc <main+0x714>)
        for (i=0 ; i<default_num_contexts; i++)
    1aec:	2400      	movs	r4, #0
            ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
    1aee:	eb04 1004 	add.w	r0, r4, r4, lsl #4
    1af2:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    1af6:	eb0c 0e80 	add.w	lr, ip, r0, lsl #2
    1afa:	4621      	mov	r1, r4
    1afc:	f8be 203e 	ldrh.w	r2, [lr, #62]	; 0x3e
    1b00:	4630      	mov	r0, r6
    1b02:	f001 fb33 	bl	316c <am_sprintf>
        for (i=0 ; i<default_num_contexts; i++)
    1b06:	3401      	adds	r4, #1
    1b08:	f8d8 2000 	ldr.w	r2, [r8]
    1b0c:	b2a4      	uxth	r4, r4
    1b0e:	4294      	cmp	r4, r2
    1b10:	d3ed      	bcc.n	1aee <main+0x546>
    for (i=0 ; i<default_num_contexts; i++)
    1b12:	b192      	cbz	r2, 1b3a <main+0x592>
        ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
    1b14:	4f6a      	ldr	r7, [pc, #424]	; (1cc0 <main+0x718>)
    for (i=0 ; i<default_num_contexts; i++)
    1b16:	2600      	movs	r6, #0
        ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
    1b18:	eb06 1b06 	add.w	fp, r6, r6, lsl #4
    1b1c:	aa0b      	add	r2, sp, #44	; 0x2c
    1b1e:	eb02 0a8b 	add.w	sl, r2, fp, lsl #2
    1b22:	4631      	mov	r1, r6
    1b24:	f8ba 2038 	ldrh.w	r2, [sl, #56]	; 0x38
    1b28:	4638      	mov	r0, r7
    1b2a:	f001 fb1f 	bl	316c <am_sprintf>
    for (i=0 ; i<default_num_contexts; i++)
    1b2e:	3601      	adds	r6, #1
    1b30:	f8d8 3000 	ldr.w	r3, [r8]
    1b34:	b2b6      	uxth	r6, r6
    1b36:	429e      	cmp	r6, r3
    1b38:	d3ee      	bcc.n	1b18 <main+0x570>
    if (total_errors==0) {
    1b3a:	2d00      	cmp	r5, #0
    1b3c:	d035      	beq.n	1baa <main+0x602>
            ee_printf("\n");
        }
#endif
    }
    if (total_errors>0)
        ee_printf("Errors detected\n");
    1b3e:	bfcc      	ite	gt
    1b40:	4860      	ldrgt	r0, [pc, #384]	; (1cc4 <main+0x71c>)
    if (total_errors<0)
        ee_printf("Cannot validate operation for these seed values, please compare with results on a known platform.\n");
    1b42:	4861      	ldrle	r0, [pc, #388]	; (1cc8 <main+0x720>)
    1b44:	f001 fb12 	bl	316c <am_sprintf>
        portable_free(results[i].memblock[0]);
#endif


#if AM_PRINT_RESULTS
    float CMResult = default_num_contexts*results[0].iterations/time_in_secs(total_time) / (double)AM_CORECLK_MHZ;
    1b48:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1b4a:	f8d8 0000 	ldr.w	r0, [r8]
    1b4e:	fb00 f003 	mul.w	r0, r0, r3
    1b52:	f7fe fbf7 	bl	344 <__aeabi_ui2d>
    1b56:	4680      	mov	r8, r0
    1b58:	4648      	mov	r0, r9
    1b5a:	468b      	mov	fp, r1
    1b5c:	f001 f9b0 	bl	2ec0 <time_in_secs>
    1b60:	4602      	mov	r2, r0
    1b62:	460b      	mov	r3, r1
    1b64:	4640      	mov	r0, r8
    1b66:	4659      	mov	r1, fp
    1b68:	f7fe fd8c 	bl	684 <__aeabi_ddiv>
    1b6c:	2200      	movs	r2, #0
    1b6e:	4b57      	ldr	r3, [pc, #348]	; (1ccc <main+0x724>)
    1b70:	f7fe fd88 	bl	684 <__aeabi_ddiv>
    1b74:	f7fe ff16 	bl	9a4 <__aeabi_d2f>
    ee_printf("CM/MHz=%.3f.\n", CMResult);
    1b78:	f7fe fc06 	bl	388 <__aeabi_f2d>
    1b7c:	4602      	mov	r2, r0
    1b7e:	460b      	mov	r3, r1
    1b80:	4853      	ldr	r0, [pc, #332]	; (1cd0 <main+0x728>)
    1b82:	f001 faf3 	bl	316c <am_sprintf>

#endif //AM_PRINT_RESULTS

    /* And last call any target specific code for finalizing */
    portable_fini(&(results[0].port));
    1b86:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
    1b8a:	f001 faad 	bl	30e8 <portable_fini>

    return MAIN_RETURN_VAL;
}
    1b8e:	2000      	movs	r0, #0
    1b90:	f60d 0d44 	addw	sp, sp, #2116	; 0x844
    1b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b98:	f8dd 9018 	ldr.w	r9, [sp, #24]
    1b9c:	e717      	b.n	19ce <main+0x426>
        ee_printf("ERROR! Must execute for at least 10 secs for a valid result!\n");
    1b9e:	484d      	ldr	r0, [pc, #308]	; (1cd4 <main+0x72c>)
    1ba0:	f001 fae4 	bl	316c <am_sprintf>
        total_errors++;
    1ba4:	1c73      	adds	r3, r6, #1
    1ba6:	b21d      	sxth	r5, r3
    1ba8:	e74f      	b.n	1a4a <main+0x4a2>
        ee_printf("Correct operation validated. See readme.txt for run and reporting rules.\n");
    1baa:	484b      	ldr	r0, [pc, #300]	; (1cd8 <main+0x730>)
    1bac:	f001 fade 	bl	316c <am_sprintf>
        if (known_id==3) {
    1bb0:	9d07      	ldr	r5, [sp, #28]
    1bb2:	2d03      	cmp	r5, #3
    1bb4:	d1c8      	bne.n	1b48 <main+0x5a0>
            ee_printf("CoreMark 1.0 : %f / %s %s",default_num_contexts*results[0].iterations/time_in_secs(total_time),COMPILER_VERSION,COMPILER_FLAGS);
    1bb6:	9912      	ldr	r1, [sp, #72]	; 0x48
    1bb8:	f8d8 0000 	ldr.w	r0, [r8]
    1bbc:	4e38      	ldr	r6, [pc, #224]	; (1ca0 <main+0x6f8>)
    1bbe:	fb00 f001 	mul.w	r0, r0, r1
    1bc2:	f7fe fbbf 	bl	344 <__aeabi_ui2d>
    1bc6:	4604      	mov	r4, r0
    1bc8:	4648      	mov	r0, r9
    1bca:	460f      	mov	r7, r1
    1bcc:	f001 f978 	bl	2ec0 <time_in_secs>
    1bd0:	4602      	mov	r2, r0
    1bd2:	460b      	mov	r3, r1
    1bd4:	4620      	mov	r0, r4
    1bd6:	4639      	mov	r1, r7
    1bd8:	f7fe fd54 	bl	684 <__aeabi_ddiv>
    1bdc:	4a3f      	ldr	r2, [pc, #252]	; (1cdc <main+0x734>)
    1bde:	9201      	str	r2, [sp, #4]
    1be0:	460b      	mov	r3, r1
    1be2:	4602      	mov	r2, r0
    1be4:	9600      	str	r6, [sp, #0]
    1be6:	483e      	ldr	r0, [pc, #248]	; (1ce0 <main+0x738>)
    1be8:	f001 fac0 	bl	316c <am_sprintf>
            ee_printf(" / %s",MEM_LOCATION);
    1bec:	492e      	ldr	r1, [pc, #184]	; (1ca8 <main+0x700>)
    1bee:	483d      	ldr	r0, [pc, #244]	; (1ce4 <main+0x73c>)
    1bf0:	f001 fabc 	bl	316c <am_sprintf>
            ee_printf("\n");
    1bf4:	483c      	ldr	r0, [pc, #240]	; (1ce8 <main+0x740>)
    1bf6:	f001 fab9 	bl	316c <am_sprintf>
    1bfa:	e7a5      	b.n	1b48 <main+0x5a0>
            break;
    1bfc:	f645 6447 	movw	r4, #24135	; 0x5e47
    1c00:	f64b 6552 	movw	r5, #48722	; 0xbe52
    1c04:	f24d 46b0 	movw	r6, #54448	; 0xd4b0
            ee_printf("6k performance run parameters for coremark.\n");
    1c08:	4838      	ldr	r0, [pc, #224]	; (1cec <main+0x744>)
            break;
    1c0a:	9404      	str	r4, [sp, #16]
    1c0c:	4627      	mov	r7, r4
    1c0e:	9503      	str	r5, [sp, #12]
    1c10:	462c      	mov	r4, r5
    1c12:	9602      	str	r6, [sp, #8]
            ee_printf("6k performance run parameters for coremark.\n");
    1c14:	f001 faaa 	bl	316c <am_sprintf>
            known_id=0;
    1c18:	2100      	movs	r1, #0
            break;
    1c1a:	46bb      	mov	fp, r7
    1c1c:	46a2      	mov	sl, r4
    1c1e:	4630      	mov	r0, r6
            known_id=0;
    1c20:	9107      	str	r1, [sp, #28]
            break;
    1c22:	e651      	b.n	18c8 <main+0x320>
            break;
    1c24:	f648 5484 	movw	r4, #36228	; 0x8d84
    1c28:	f240 7547 	movw	r5, #1863	; 0x747
    1c2c:	f24e 36c1 	movw	r6, #58305	; 0xe3c1
            ee_printf("2K validation run parameters for coremark.\n");
    1c30:	482f      	ldr	r0, [pc, #188]	; (1cf0 <main+0x748>)
            break;
    1c32:	9404      	str	r4, [sp, #16]
    1c34:	4627      	mov	r7, r4
    1c36:	9503      	str	r5, [sp, #12]
    1c38:	462c      	mov	r4, r5
    1c3a:	9602      	str	r6, [sp, #8]
            ee_printf("2K validation run parameters for coremark.\n");
    1c3c:	f001 fa96 	bl	316c <am_sprintf>
            known_id=4;
    1c40:	2104      	movs	r1, #4
            break;
    1c42:	46bb      	mov	fp, r7
    1c44:	46a2      	mov	sl, r4
    1c46:	4630      	mov	r0, r6
            known_id=4;
    1c48:	9107      	str	r1, [sp, #28]
            break;
    1c4a:	e63d      	b.n	18c8 <main+0x320>
            break;
    1c4c:	f643 14bf 	movw	r4, #14783	; 0x39bf
    1c50:	f241 1599 	movw	r5, #4505	; 0x1199
    1c54:	f44f 564d 	mov.w	r6, #13120	; 0x3340
            ee_printf("6k validation run parameters for coremark.\n");
    1c58:	4826      	ldr	r0, [pc, #152]	; (1cf4 <main+0x74c>)
            break;
    1c5a:	9404      	str	r4, [sp, #16]
    1c5c:	4627      	mov	r7, r4
    1c5e:	9503      	str	r5, [sp, #12]
    1c60:	462c      	mov	r4, r5
    1c62:	9602      	str	r6, [sp, #8]
            ee_printf("6k validation run parameters for coremark.\n");
    1c64:	f001 fa82 	bl	316c <am_sprintf>
            known_id=1;
    1c68:	2301      	movs	r3, #1
            break;
    1c6a:	46bb      	mov	fp, r7
    1c6c:	46a2      	mov	sl, r4
    1c6e:	4630      	mov	r0, r6
            known_id=1;
    1c70:	9307      	str	r3, [sp, #28]
            break;
    1c72:	e629      	b.n	18c8 <main+0x320>
    if (results[0].execs & ID_STATE)
    1c74:	077b      	lsls	r3, r7, #29
    1c76:	f53f af60 	bmi.w	1b3a <main+0x592>
    1c7a:	e74a      	b.n	1b12 <main+0x56a>
        if (i==0) res->crclist=res->crc;
    1c7c:	f8ad b066 	strh.w	fp, [sp, #102]	; 0x66
    1c80:	e568      	b.n	1754 <main+0x1ac>
    1c82:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
    1c86:	e57b      	b.n	1780 <main+0x1d8>
    1c88:	00005a00 	.word	0x00005a00
    1c8c:	00005a18 	.word	0x00005a18
    1c90:	00005a30 	.word	0x00005a30
    1c94:	00005a48 	.word	0x00005a48
    1c98:	40240000 	.word	0x40240000
    1c9c:	00005aa0 	.word	0x00005aa0
    1ca0:	00005ab8 	.word	0x00005ab8
    1ca4:	00005b00 	.word	0x00005b00
    1ca8:	00005b18 	.word	0x00005b18
    1cac:	00005b20 	.word	0x00005b20
    1cb0:	00005b38 	.word	0x00005b38
    1cb4:	00005b54 	.word	0x00005b54
    1cb8:	00005b70 	.word	0x00005b70
    1cbc:	00005b8c 	.word	0x00005b8c
    1cc0:	00005ba8 	.word	0x00005ba8
    1cc4:	00005c40 	.word	0x00005c40
    1cc8:	00005c54 	.word	0x00005c54
    1ccc:	40480000 	.word	0x40480000
    1cd0:	00005cb8 	.word	0x00005cb8
    1cd4:	00005a60 	.word	0x00005a60
    1cd8:	00005bc4 	.word	0x00005bc4
    1cdc:	00005c2c 	.word	0x00005c2c
    1ce0:	00005c10 	.word	0x00005c10
    1ce4:	00005c38 	.word	0x00005c38
    1ce8:	00005d14 	.word	0x00005d14
    1cec:	00005880 	.word	0x00005880
    1cf0:	00005940 	.word	0x00005940
    1cf4:	000058b0 	.word	0x000058b0
    1cf8:	10001000 	.word	0x10001000

00001cfc <matrix_test>:
    4 - Multiply a matrix by a matrix.
    5 - Add a constant value to all elements of a matrix.

    After the last step, matrix A is back to original contents.
*/
ee_s16 matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val) {
    1cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d00:	b091      	sub	sp, #68	; 0x44
    1d02:	9303      	str	r3, [sp, #12]
    1d04:	f9bd a068 	ldrsh.w	sl, [sp, #104]	; 0x68
    1d08:	9109      	str	r1, [sp, #36]	; 0x24
    1d0a:	920b      	str	r2, [sp, #44]	; 0x2c
/* Function: matrix_add_const
    Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
    1d0c:	4603      	mov	r3, r0
    1d0e:	9008      	str	r0, [sp, #32]
    1d10:	2800      	cmp	r0, #0
    1d12:	f000 8754 	beq.w	2bbe <matrix_test+0xec2>
    1d16:	ea6f 500a 	mvn.w	r0, sl, lsl #20
    1d1a:	ea6f 5910 	mvn.w	r9, r0, lsr #20
    1d1e:	f04f 0e00 	mov.w	lr, #0
    1d22:	fa1f f18a 	uxth.w	r1, sl
    1d26:	005e      	lsls	r6, r3, #1
    1d28:	1e5f      	subs	r7, r3, #1
    1d2a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
    1d2e:	910c      	str	r1, [sp, #48]	; 0x30
    1d30:	4694      	mov	ip, r2
    1d32:	4618      	mov	r0, r3
    1d34:	970a      	str	r7, [sp, #40]	; 0x28
    1d36:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
    1d3a:	920e      	str	r2, [sp, #56]	; 0x38
    1d3c:	46f3      	mov	fp, lr
    1d3e:	46f2      	mov	sl, lr
    1d40:	9605      	str	r6, [sp, #20]
    1d42:	4614      	mov	r4, r2
    1d44:	e0d7      	b.n	1ef6 <matrix_test+0x1fa>
        for (j=0; j<N; j++) {
            A[i*N+j] += val;
    1d46:	f8bc 8000 	ldrh.w	r8, [ip]
    for (i=0; i<N; i++) {
    1d4a:	4602      	mov	r2, r0
            A[i*N+j] += val;
    1d4c:	4488      	add	r8, r1
    1d4e:	2a01      	cmp	r2, #1
    1d50:	f8ac 8000 	strh.w	r8, [ip]
    1d54:	f000 80e6 	beq.w	1f24 <matrix_test+0x228>
    1d58:	f8bc 9002 	ldrh.w	r9, [ip, #2]
    1d5c:	2a02      	cmp	r2, #2
    1d5e:	4489      	add	r9, r1
    1d60:	f8ac 9002 	strh.w	r9, [ip, #2]
    1d64:	f000 80de 	beq.w	1f24 <matrix_test+0x228>
    1d68:	f8bc e004 	ldrh.w	lr, [ip, #4]
    1d6c:	2a04      	cmp	r2, #4
    1d6e:	448e      	add	lr, r1
    1d70:	f8ac e004 	strh.w	lr, [ip, #4]
    1d74:	f040 80d8 	bne.w	1f28 <matrix_test+0x22c>
    1d78:	f8bc 5006 	ldrh.w	r5, [ip, #6]
    1d7c:	440d      	add	r5, r1
    1d7e:	f8ac 5006 	strh.w	r5, [ip, #6]
        for (j=0; j<N; j++) {
    1d82:	4613      	mov	r3, r2
    1d84:	4290      	cmp	r0, r2
    1d86:	f000 80af 	beq.w	1ee8 <matrix_test+0x1ec>
    1d8a:	1a86      	subs	r6, r0, r2
    1d8c:	1f37      	subs	r7, r6, #4
    1d8e:	9604      	str	r6, [sp, #16]
    1d90:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    1d92:	08bd      	lsrs	r5, r7, #2
    1d94:	1c6f      	adds	r7, r5, #1
    1d96:	1ab6      	subs	r6, r6, r2
    1d98:	9701      	str	r7, [sp, #4]
    1d9a:	2e02      	cmp	r6, #2
    1d9c:	ea4f 0787 	mov.w	r7, r7, lsl #2
    1da0:	9702      	str	r7, [sp, #8]
    1da2:	f240 8088 	bls.w	1eb6 <matrix_test+0x1ba>
    1da6:	445a      	add	r2, fp
    1da8:	eb04 0642 	add.w	r6, r4, r2, lsl #1
            A[i*N+j] += val;
    1dac:	f854 8012 	ldr.w	r8, [r4, r2, lsl #1]
    1db0:	9206      	str	r2, [sp, #24]
    1db2:	eb01 0208 	add.w	r2, r1, r8
    1db6:	9207      	str	r2, [sp, #28]
    1db8:	6872      	ldr	r2, [r6, #4]
    1dba:	2700      	movs	r7, #0
    1dbc:	eb01 0e02 	add.w	lr, r1, r2
    1dc0:	9a07      	ldr	r2, [sp, #28]
    1dc2:	46b9      	mov	r9, r7
    1dc4:	f36e 090f 	bfi	r9, lr, #0, #16
    1dc8:	f362 070f 	bfi	r7, r2, #0, #16
    1dcc:	eb01 4818 	add.w	r8, r1, r8, lsr #16
    1dd0:	f005 0e01 	and.w	lr, r5, #1
    1dd4:	9d06      	ldr	r5, [sp, #24]
    1dd6:	6872      	ldr	r2, [r6, #4]
    1dd8:	f368 471f 	bfi	r7, r8, #16, #16
    1ddc:	f844 7015 	str.w	r7, [r4, r5, lsl #1]
    1de0:	9d01      	ldr	r5, [sp, #4]
    1de2:	eb01 4212 	add.w	r2, r1, r2, lsr #16
    1de6:	2701      	movs	r7, #1
    1de8:	f362 491f 	bfi	r9, r2, #16, #16
    1dec:	42bd      	cmp	r5, r7
    1dee:	f106 0208 	add.w	r2, r6, #8
    1df2:	f8c6 9004 	str.w	r9, [r6, #4]
    1df6:	d959      	bls.n	1eac <matrix_test+0x1b0>
    1df8:	f1be 0f00 	cmp.w	lr, #0
    1dfc:	d01c      	beq.n	1e38 <matrix_test+0x13c>
    1dfe:	6817      	ldr	r7, [r2, #0]
    1e00:	6856      	ldr	r6, [r2, #4]
    1e02:	2500      	movs	r5, #0
    1e04:	eb01 0907 	add.w	r9, r1, r7
    1e08:	46ae      	mov	lr, r5
    1e0a:	eb01 0806 	add.w	r8, r1, r6
    1e0e:	eb01 4717 	add.w	r7, r1, r7, lsr #16
    1e12:	eb01 4616 	add.w	r6, r1, r6, lsr #16
    1e16:	f369 050f 	bfi	r5, r9, #0, #16
    1e1a:	f368 0e0f 	bfi	lr, r8, #0, #16
    1e1e:	f367 451f 	bfi	r5, r7, #16, #16
    1e22:	f366 4e1f 	bfi	lr, r6, #16, #16
    1e26:	e882 4020 	stmia.w	r2, {r5, lr}
    1e2a:	9d01      	ldr	r5, [sp, #4]
    1e2c:	2702      	movs	r7, #2
    1e2e:	42bd      	cmp	r5, r7
    1e30:	4616      	mov	r6, r2
    1e32:	f102 0208 	add.w	r2, r2, #8
    1e36:	d939      	bls.n	1eac <matrix_test+0x1b0>
    1e38:	9306      	str	r3, [sp, #24]
    1e3a:	9007      	str	r0, [sp, #28]
    1e3c:	68b5      	ldr	r5, [r6, #8]
    1e3e:	f106 0e08 	add.w	lr, r6, #8
    1e42:	68f6      	ldr	r6, [r6, #12]
    1e44:	2300      	movs	r3, #0
    1e46:	1988      	adds	r0, r1, r6
    1e48:	eb01 0905 	add.w	r9, r1, r5
    1e4c:	4698      	mov	r8, r3
    1e4e:	eb01 4616 	add.w	r6, r1, r6, lsr #16
    1e52:	f360 080f 	bfi	r8, r0, #0, #16
    1e56:	f369 030f 	bfi	r3, r9, #0, #16
    1e5a:	eb01 4515 	add.w	r5, r1, r5, lsr #16
    1e5e:	f366 481f 	bfi	r8, r6, #16, #16
    1e62:	f365 431f 	bfi	r3, r5, #16, #16
    1e66:	e882 0108 	stmia.w	r2, {r3, r8}
    1e6a:	f10e 0608 	add.w	r6, lr, #8
    1e6e:	f8de e008 	ldr.w	lr, [lr, #8]
    1e72:	6870      	ldr	r0, [r6, #4]
    1e74:	2300      	movs	r3, #0
    1e76:	eb01 090e 	add.w	r9, r1, lr
    1e7a:	4698      	mov	r8, r3
    1e7c:	eb01 4e1e 	add.w	lr, r1, lr, lsr #16
    1e80:	f369 030f 	bfi	r3, r9, #0, #16
    1e84:	f36e 431f 	bfi	r3, lr, #16, #16
    1e88:	180d      	adds	r5, r1, r0
    1e8a:	6093      	str	r3, [r2, #8]
    1e8c:	9b01      	ldr	r3, [sp, #4]
    1e8e:	f365 080f 	bfi	r8, r5, #0, #16
    1e92:	eb01 4010 	add.w	r0, r1, r0, lsr #16
    1e96:	3702      	adds	r7, #2
    1e98:	f360 481f 	bfi	r8, r0, #16, #16
    1e9c:	42bb      	cmp	r3, r7
    1e9e:	f8c2 800c 	str.w	r8, [r2, #12]
    1ea2:	f102 0210 	add.w	r2, r2, #16
    1ea6:	d8c9      	bhi.n	1e3c <matrix_test+0x140>
    1ea8:	9b06      	ldr	r3, [sp, #24]
    1eaa:	9807      	ldr	r0, [sp, #28]
    1eac:	9a02      	ldr	r2, [sp, #8]
    1eae:	9e04      	ldr	r6, [sp, #16]
    1eb0:	42b2      	cmp	r2, r6
    1eb2:	4413      	add	r3, r2
    1eb4:	d018      	beq.n	1ee8 <matrix_test+0x1ec>
    1eb6:	eb03 090b 	add.w	r9, r3, fp
        for (j=0; j<N; j++) {
    1eba:	1c5a      	adds	r2, r3, #1
            A[i*N+j] += val;
    1ebc:	f834 8019 	ldrh.w	r8, [r4, r9, lsl #1]
        for (j=0; j<N; j++) {
    1ec0:	4290      	cmp	r0, r2
            A[i*N+j] += val;
    1ec2:	4488      	add	r8, r1
    1ec4:	f824 8019 	strh.w	r8, [r4, r9, lsl #1]
        for (j=0; j<N; j++) {
    1ec8:	d90e      	bls.n	1ee8 <matrix_test+0x1ec>
            A[i*N+j] += val;
    1eca:	445a      	add	r2, fp
        for (j=0; j<N; j++) {
    1ecc:	3302      	adds	r3, #2
            A[i*N+j] += val;
    1ece:	f834 5012 	ldrh.w	r5, [r4, r2, lsl #1]
        for (j=0; j<N; j++) {
    1ed2:	4298      	cmp	r0, r3
            A[i*N+j] += val;
    1ed4:	440d      	add	r5, r1
    1ed6:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
        for (j=0; j<N; j++) {
    1eda:	d905      	bls.n	1ee8 <matrix_test+0x1ec>
            A[i*N+j] += val;
    1edc:	445b      	add	r3, fp
    1ede:	f834 e013 	ldrh.w	lr, [r4, r3, lsl #1]
    1ee2:	448e      	add	lr, r1
    1ee4:	f824 e013 	strh.w	lr, [r4, r3, lsl #1]
    for (i=0; i<N; i++) {
    1ee8:	f10a 0a01 	add.w	sl, sl, #1
    1eec:	9b05      	ldr	r3, [sp, #20]
    1eee:	4550      	cmp	r0, sl
    1ef0:	449c      	add	ip, r3
    1ef2:	4483      	add	fp, r0
    1ef4:	d01a      	beq.n	1f2c <matrix_test+0x230>
    1ef6:	ea4f 025c 	mov.w	r2, ip, lsr #1
    1efa:	4253      	negs	r3, r2
    1efc:	f003 0303 	and.w	r3, r3, #3
    1f00:	4283      	cmp	r3, r0
    1f02:	bf28      	it	cs
    1f04:	4603      	movcs	r3, r0
    1f06:	2804      	cmp	r0, #4
    1f08:	f67f af1d 	bls.w	1d46 <matrix_test+0x4a>
    1f0c:	461a      	mov	r2, r3
    1f0e:	2b00      	cmp	r3, #0
    1f10:	f43f af3b 	beq.w	1d8a <matrix_test+0x8e>
            A[i*N+j] += val;
    1f14:	f8bc 8000 	ldrh.w	r8, [ip]
    1f18:	2a01      	cmp	r2, #1
    1f1a:	4488      	add	r8, r1
    1f1c:	f8ac 8000 	strh.w	r8, [ip]
    1f20:	f47f af1a 	bne.w	1d58 <matrix_test+0x5c>
        for (j=0; j<N; j++) {
    1f24:	4613      	mov	r3, r2
    1f26:	e72d      	b.n	1d84 <matrix_test+0x88>
    1f28:	2303      	movs	r3, #3
    1f2a:	e72b      	b.n	1d84 <matrix_test+0x88>
    1f2c:	9c08      	ldr	r4, [sp, #32]
    1f2e:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
    1f32:	f8cd a004 	str.w	sl, [sp, #4]
    1f36:	00a0      	lsls	r0, r4, #2
    for (i=0; i<N; i++) {
    1f38:	2700      	movs	r7, #0
    1f3a:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    1f3e:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    1f42:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    1f46:	f8cd c010 	str.w	ip, [sp, #16]
    1f4a:	9002      	str	r0, [sp, #8]
    1f4c:	46bc      	mov	ip, r7
    1f4e:	4699      	mov	r9, r3
    1f50:	eb0b 0e09 	add.w	lr, fp, r9
            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    1f54:	f93b 6b02 	ldrsh.w	r6, [fp], #2
    1f58:	4643      	mov	r3, r8
    1f5a:	fb06 f50a 	mul.w	r5, r6, sl
    1f5e:	f1a9 0202 	sub.w	r2, r9, #2
        for (j=0; j<N; j++) {
    1f62:	45f3      	cmp	fp, lr
            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    1f64:	f843 5b04 	str.w	r5, [r3], #4
    1f68:	f3c2 0142 	ubfx	r1, r2, #1, #3
        for (j=0; j<N; j++) {
    1f6c:	d069      	beq.n	2042 <matrix_test+0x346>
    1f6e:	b3b9      	cbz	r1, 1fe0 <matrix_test+0x2e4>
    1f70:	2901      	cmp	r1, #1
    1f72:	d02d      	beq.n	1fd0 <matrix_test+0x2d4>
    1f74:	2902      	cmp	r1, #2
    1f76:	d025      	beq.n	1fc4 <matrix_test+0x2c8>
    1f78:	2903      	cmp	r1, #3
    1f7a:	d01d      	beq.n	1fb8 <matrix_test+0x2bc>
    1f7c:	2904      	cmp	r1, #4
    1f7e:	d015      	beq.n	1fac <matrix_test+0x2b0>
    1f80:	2905      	cmp	r1, #5
    1f82:	d00d      	beq.n	1fa0 <matrix_test+0x2a4>
    1f84:	2906      	cmp	r1, #6
    1f86:	d005      	beq.n	1f94 <matrix_test+0x298>
            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    1f88:	f93b 4b02 	ldrsh.w	r4, [fp], #2
    1f8c:	fb04 f00a 	mul.w	r0, r4, sl
    1f90:	f843 0b04 	str.w	r0, [r3], #4
    1f94:	f93b 7b02 	ldrsh.w	r7, [fp], #2
    1f98:	fb07 f60a 	mul.w	r6, r7, sl
    1f9c:	f843 6b04 	str.w	r6, [r3], #4
    1fa0:	f93b 5b02 	ldrsh.w	r5, [fp], #2
    1fa4:	fb05 f20a 	mul.w	r2, r5, sl
    1fa8:	f843 2b04 	str.w	r2, [r3], #4
    1fac:	f93b 1b02 	ldrsh.w	r1, [fp], #2
    1fb0:	fb01 f40a 	mul.w	r4, r1, sl
    1fb4:	f843 4b04 	str.w	r4, [r3], #4
    1fb8:	f93b 0b02 	ldrsh.w	r0, [fp], #2
    1fbc:	fb00 f70a 	mul.w	r7, r0, sl
    1fc0:	f843 7b04 	str.w	r7, [r3], #4
    1fc4:	f93b 6b02 	ldrsh.w	r6, [fp], #2
    1fc8:	fb06 f50a 	mul.w	r5, r6, sl
    1fcc:	f843 5b04 	str.w	r5, [r3], #4
    1fd0:	f93b 2b02 	ldrsh.w	r2, [fp], #2
    1fd4:	fb02 f10a 	mul.w	r1, r2, sl
        for (j=0; j<N; j++) {
    1fd8:	45f3      	cmp	fp, lr
            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    1fda:	f843 1b04 	str.w	r1, [r3], #4
        for (j=0; j<N; j++) {
    1fde:	d030      	beq.n	2042 <matrix_test+0x346>
            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    1fe0:	465c      	mov	r4, fp
    1fe2:	461a      	mov	r2, r3
    1fe4:	f934 0b02 	ldrsh.w	r0, [r4], #2
    1fe8:	f9bb 7002 	ldrsh.w	r7, [fp, #2]
    1fec:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
    1ff0:	f9bb 5006 	ldrsh.w	r5, [fp, #6]
    1ff4:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
    1ff8:	fb00 f10a 	mul.w	r1, r0, sl
    1ffc:	f842 1b04 	str.w	r1, [r2], #4
    2000:	fb06 f60a 	mul.w	r6, r6, sl
    2004:	fb07 f70a 	mul.w	r7, r7, sl
    2008:	f9bb 000a 	ldrsh.w	r0, [fp, #10]
    200c:	f9bb 100c 	ldrsh.w	r1, [fp, #12]
    2010:	605f      	str	r7, [r3, #4]
    2012:	6056      	str	r6, [r2, #4]
    2014:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
    2018:	f10b 0b10 	add.w	fp, fp, #16
    201c:	fb05 f50a 	mul.w	r5, r5, sl
    2020:	fb04 f40a 	mul.w	r4, r4, sl
    2024:	fb00 f00a 	mul.w	r0, r0, sl
    2028:	fb01 f10a 	mul.w	r1, r1, sl
    202c:	fb02 f60a 	mul.w	r6, r2, sl
        for (j=0; j<N; j++) {
    2030:	45f3      	cmp	fp, lr
            C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
    2032:	60dd      	str	r5, [r3, #12]
    2034:	611c      	str	r4, [r3, #16]
    2036:	6158      	str	r0, [r3, #20]
    2038:	6199      	str	r1, [r3, #24]
    203a:	61de      	str	r6, [r3, #28]
    203c:	f103 0320 	add.w	r3, r3, #32
        for (j=0; j<N; j++) {
    2040:	d1ce      	bne.n	1fe0 <matrix_test+0x2e4>
    for (i=0; i<N; i++) {
    2042:	9f01      	ldr	r7, [sp, #4]
    2044:	9b02      	ldr	r3, [sp, #8]
    2046:	f10c 0c01 	add.w	ip, ip, #1
    204a:	45bc      	cmp	ip, r7
    204c:	4498      	add	r8, r3
    204e:	f47f af7f 	bne.w	1f50 <matrix_test+0x254>
    2052:	f04f 0c00 	mov.w	ip, #0
    2056:	464c      	mov	r4, r9
    2058:	9e09      	ldr	r6, [sp, #36]	; 0x24
    205a:	f8dd 9010 	ldr.w	r9, [sp, #16]
    205e:	f8dd b020 	ldr.w	fp, [sp, #32]
    2062:	f8dd a008 	ldr.w	sl, [sp, #8]
    2066:	9601      	str	r6, [sp, #4]
    2068:	4660      	mov	r0, ip
    206a:	4665      	mov	r5, ip
    206c:	46e0      	mov	r8, ip
    206e:	eb06 0e0a 	add.w	lr, r6, sl
            cur=C[i*N+j];
    2072:	f856 3b04 	ldr.w	r3, [r6], #4
                ret+=10;
    2076:	b280      	uxth	r0, r0
    2078:	f100 010a 	add.w	r1, r0, #10
            tmp+=cur;
    207c:	4498      	add	r8, r3
                ret += (cur>prev) ? 1 : 0;
    207e:	42ab      	cmp	r3, r5
    2080:	bfc8      	it	gt
    2082:	3001      	addgt	r0, #1
    2084:	45c8      	cmp	r8, r9
                ret+=10;
    2086:	b20d      	sxth	r5, r1
                ret += (cur>prev) ? 1 : 0;
    2088:	b200      	sxth	r0, r0
    208a:	f1aa 0204 	sub.w	r2, sl, #4
    208e:	bfc4      	itt	gt
    2090:	4628      	movgt	r0, r5
    2092:	f04f 0800 	movgt.w	r8, #0
        for (j=0; j<N; j++) {
    2096:	4576      	cmp	r6, lr
            cur=C[i*N+j];
    2098:	461d      	mov	r5, r3
    209a:	f3c2 0781 	ubfx	r7, r2, #2, #2
        for (j=0; j<N; j++) {
    209e:	f000 8086 	beq.w	21ae <matrix_test+0x4b2>
    20a2:	2f00      	cmp	r7, #0
    20a4:	d038      	beq.n	2118 <matrix_test+0x41c>
    20a6:	2f01      	cmp	r7, #1
    20a8:	d023      	beq.n	20f2 <matrix_test+0x3f6>
    20aa:	2f02      	cmp	r7, #2
    20ac:	d010      	beq.n	20d0 <matrix_test+0x3d4>
            cur=C[i*N+j];
    20ae:	f856 3b04 	ldr.w	r3, [r6], #4
                ret+=10;
    20b2:	b280      	uxth	r0, r0
    20b4:	f100 010a 	add.w	r1, r0, #10
            tmp+=cur;
    20b8:	4498      	add	r8, r3
                ret += (cur>prev) ? 1 : 0;
    20ba:	42ab      	cmp	r3, r5
    20bc:	bfc8      	it	gt
    20be:	3001      	addgt	r0, #1
                ret+=10;
    20c0:	b20d      	sxth	r5, r1
    20c2:	45c8      	cmp	r8, r9
                ret += (cur>prev) ? 1 : 0;
    20c4:	b200      	sxth	r0, r0
    20c6:	bfc4      	itt	gt
    20c8:	f04f 0800 	movgt.w	r8, #0
    20cc:	4628      	movgt	r0, r5
            cur=C[i*N+j];
    20ce:	461d      	mov	r5, r3
    20d0:	f856 7b04 	ldr.w	r7, [r6], #4
                ret+=10;
    20d4:	b283      	uxth	r3, r0
    20d6:	f103 020a 	add.w	r2, r3, #10
            tmp+=cur;
    20da:	44b8      	add	r8, r7
                ret += (cur>prev) ? 1 : 0;
    20dc:	42af      	cmp	r7, r5
    20de:	bfc8      	it	gt
    20e0:	3301      	addgt	r3, #1
                ret+=10;
    20e2:	b211      	sxth	r1, r2
    20e4:	45c8      	cmp	r8, r9
                ret += (cur>prev) ? 1 : 0;
    20e6:	b218      	sxth	r0, r3
    20e8:	bfc4      	itt	gt
    20ea:	f04f 0800 	movgt.w	r8, #0
    20ee:	4608      	movgt	r0, r1
            cur=C[i*N+j];
    20f0:	463d      	mov	r5, r7
    20f2:	f856 7b04 	ldr.w	r7, [r6], #4
                ret+=10;
    20f6:	b280      	uxth	r0, r0
    20f8:	f100 030a 	add.w	r3, r0, #10
            tmp+=cur;
    20fc:	44b8      	add	r8, r7
                ret += (cur>prev) ? 1 : 0;
    20fe:	42af      	cmp	r7, r5
    2100:	bfc8      	it	gt
    2102:	3001      	addgt	r0, #1
    2104:	45c8      	cmp	r8, r9
                ret+=10;
    2106:	b21d      	sxth	r5, r3
                ret += (cur>prev) ? 1 : 0;
    2108:	b200      	sxth	r0, r0
    210a:	bfc4      	itt	gt
    210c:	f04f 0800 	movgt.w	r8, #0
    2110:	4628      	movgt	r0, r5
        for (j=0; j<N; j++) {
    2112:	4576      	cmp	r6, lr
            cur=C[i*N+j];
    2114:	463d      	mov	r5, r7
        for (j=0; j<N; j++) {
    2116:	d04a      	beq.n	21ae <matrix_test+0x4b2>
    2118:	4642      	mov	r2, r8
            cur=C[i*N+j];
    211a:	4631      	mov	r1, r6
                ret+=10;
    211c:	b280      	uxth	r0, r0
            cur=C[i*N+j];
    211e:	f851 8b04 	ldr.w	r8, [r1], #4
    2122:	6873      	ldr	r3, [r6, #4]
    2124:	684f      	ldr	r7, [r1, #4]
    2126:	68f1      	ldr	r1, [r6, #12]
            tmp+=cur;
    2128:	4442      	add	r2, r8
                ret += (cur>prev) ? 1 : 0;
    212a:	45a8      	cmp	r8, r5
    212c:	bfd4      	ite	le
    212e:	4605      	movle	r5, r0
    2130:	1c45      	addgt	r5, r0, #1
    2132:	b22d      	sxth	r5, r5
    2134:	454a      	cmp	r2, r9
                ret+=10;
    2136:	f100 000a 	add.w	r0, r0, #10
    213a:	b200      	sxth	r0, r0
    213c:	bfd6      	itet	le
    213e:	4628      	movle	r0, r5
    2140:	2500      	movgt	r5, #0
    2142:	4615      	movle	r5, r2
    2144:	b282      	uxth	r2, r0
            tmp+=cur;
    2146:	441d      	add	r5, r3
                ret+=10;
    2148:	f102 000a 	add.w	r0, r2, #10
                ret += (cur>prev) ? 1 : 0;
    214c:	4543      	cmp	r3, r8
    214e:	bfc8      	it	gt
    2150:	3201      	addgt	r2, #1
    2152:	b212      	sxth	r2, r2
    2154:	454d      	cmp	r5, r9
                ret+=10;
    2156:	fa0f f880 	sxth.w	r8, r0
    215a:	bfd4      	ite	le
    215c:	4690      	movle	r8, r2
    215e:	2500      	movgt	r5, #0
    2160:	fa1f f088 	uxth.w	r0, r8
    2164:	f100 080a 	add.w	r8, r0, #10
                ret += (cur>prev) ? 1 : 0;
    2168:	429f      	cmp	r7, r3
    216a:	bfc8      	it	gt
    216c:	3001      	addgt	r0, #1
            tmp+=cur;
    216e:	197b      	adds	r3, r7, r5
    2170:	454b      	cmp	r3, r9
                ret += (cur>prev) ? 1 : 0;
    2172:	b205      	sxth	r5, r0
                ret+=10;
    2174:	fa0f f288 	sxth.w	r2, r8
    2178:	bfd8      	it	le
    217a:	462a      	movle	r2, r5
    217c:	fa1f f882 	uxth.w	r8, r2
    2180:	bfc8      	it	gt
    2182:	2300      	movgt	r3, #0
    2184:	f108 000a 	add.w	r0, r8, #10
            tmp+=cur;
    2188:	440b      	add	r3, r1
                ret += (cur>prev) ? 1 : 0;
    218a:	42b9      	cmp	r1, r7
    218c:	bfc8      	it	gt
    218e:	f108 0801 	addgt.w	r8, r8, #1
    2192:	fa0f f288 	sxth.w	r2, r8
    2196:	454b      	cmp	r3, r9
    2198:	f106 0610 	add.w	r6, r6, #16
                ret+=10;
    219c:	b200      	sxth	r0, r0
    219e:	bfce      	itee	gt
    21a0:	2200      	movgt	r2, #0
    21a2:	4610      	movle	r0, r2
    21a4:	461a      	movle	r2, r3
        for (j=0; j<N; j++) {
    21a6:	4576      	cmp	r6, lr
            cur=C[i*N+j];
    21a8:	460d      	mov	r5, r1
        for (j=0; j<N; j++) {
    21aa:	d1b6      	bne.n	211a <matrix_test+0x41e>
    21ac:	4690      	mov	r8, r2
    for (i=0; i<N; i++) {
    21ae:	f10c 0c01 	add.w	ip, ip, #1
    21b2:	45e3      	cmp	fp, ip
    21b4:	f47f af5b 	bne.w	206e <matrix_test+0x372>
    crc=crc16(matrix_sum(N,C,clipval),crc);
    21b8:	2100      	movs	r1, #0
    21ba:	f8dd b004 	ldr.w	fp, [sp, #4]
    21be:	f001 fbdd 	bl	397c <crc16>
    21c2:	9e09      	ldr	r6, [sp, #36]	; 0x24
    21c4:	9f02      	ldr	r7, [sp, #8]
    21c6:	9903      	ldr	r1, [sp, #12]
    21c8:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    21cc:	f8cd 9014 	str.w	r9, [sp, #20]
    21d0:	443e      	add	r6, r7
    21d2:	9004      	str	r0, [sp, #16]
    21d4:	9601      	str	r6, [sp, #4]
    21d6:	eb01 0804 	add.w	r8, r1, r4
    21da:	4689      	mov	r9, r1
void matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
    ee_u32 i,j;
    for (i=0; i<N; i++) {
        C[i]=0;
        for (j=0; j<N; j++) {
            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    21dc:	46ce      	mov	lr, r9
    21de:	46d4      	mov	ip, sl
    21e0:	f93e 3b02 	ldrsh.w	r3, [lr], #2
    21e4:	f93c 5b02 	ldrsh.w	r5, [ip], #2
    21e8:	eba8 0009 	sub.w	r0, r8, r9
    21ec:	1e82      	subs	r2, r0, #2
        for (j=0; j<N; j++) {
    21ee:	45f0      	cmp	r8, lr
            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    21f0:	fb05 f303 	mul.w	r3, r5, r3
    21f4:	f3c2 0642 	ubfx	r6, r2, #1, #3
        for (j=0; j<N; j++) {
    21f8:	d072      	beq.n	22e0 <matrix_test+0x5e4>
    21fa:	b3ce      	cbz	r6, 2270 <matrix_test+0x574>
    21fc:	2e01      	cmp	r6, #1
    21fe:	d02f      	beq.n	2260 <matrix_test+0x564>
    2200:	2e02      	cmp	r6, #2
    2202:	d027      	beq.n	2254 <matrix_test+0x558>
    2204:	2e03      	cmp	r6, #3
    2206:	d01f      	beq.n	2248 <matrix_test+0x54c>
    2208:	2e04      	cmp	r6, #4
    220a:	d017      	beq.n	223c <matrix_test+0x540>
    220c:	2e05      	cmp	r6, #5
    220e:	d00f      	beq.n	2230 <matrix_test+0x534>
    2210:	2e06      	cmp	r6, #6
    2212:	d007      	beq.n	2224 <matrix_test+0x528>
            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    2214:	f93c 7b02 	ldrsh.w	r7, [ip], #2
    2218:	f9b9 1002 	ldrsh.w	r1, [r9, #2]
    221c:	f10e 0e02 	add.w	lr, lr, #2
    2220:	fb07 3301 	mla	r3, r7, r1, r3
    2224:	f93c 5b02 	ldrsh.w	r5, [ip], #2
    2228:	f93e 0b02 	ldrsh.w	r0, [lr], #2
    222c:	fb05 3300 	mla	r3, r5, r0, r3
    2230:	f93c 6b02 	ldrsh.w	r6, [ip], #2
    2234:	f93e 2b02 	ldrsh.w	r2, [lr], #2
    2238:	fb06 3302 	mla	r3, r6, r2, r3
    223c:	f93c 7b02 	ldrsh.w	r7, [ip], #2
    2240:	f93e 1b02 	ldrsh.w	r1, [lr], #2
    2244:	fb07 3301 	mla	r3, r7, r1, r3
    2248:	f93c 5b02 	ldrsh.w	r5, [ip], #2
    224c:	f93e 0b02 	ldrsh.w	r0, [lr], #2
    2250:	fb05 3300 	mla	r3, r5, r0, r3
    2254:	f93c 6b02 	ldrsh.w	r6, [ip], #2
    2258:	f93e 2b02 	ldrsh.w	r2, [lr], #2
    225c:	fb06 3302 	mla	r3, r6, r2, r3
    2260:	f93e 1b02 	ldrsh.w	r1, [lr], #2
    2264:	f93c 7b02 	ldrsh.w	r7, [ip], #2
        for (j=0; j<N; j++) {
    2268:	45f0      	cmp	r8, lr
            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    226a:	fb07 3301 	mla	r3, r7, r1, r3
        for (j=0; j<N; j++) {
    226e:	d037      	beq.n	22e0 <matrix_test+0x5e4>
            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    2270:	4666      	mov	r6, ip
    2272:	4672      	mov	r2, lr
    2274:	f936 7b02 	ldrsh.w	r7, [r6], #2
    2278:	f932 0b02 	ldrsh.w	r0, [r2], #2
    227c:	f9be 1002 	ldrsh.w	r1, [lr, #2]
    2280:	f9bc 5002 	ldrsh.w	r5, [ip, #2]
    2284:	f9b6 6002 	ldrsh.w	r6, [r6, #2]
    2288:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
    228c:	fb07 3300 	mla	r3, r7, r0, r3
    2290:	fb05 3701 	mla	r7, r5, r1, r3
    2294:	f9be 3006 	ldrsh.w	r3, [lr, #6]
    2298:	f9bc 5006 	ldrsh.w	r5, [ip, #6]
    229c:	f9bc 0008 	ldrsh.w	r0, [ip, #8]
    22a0:	f9be 1008 	ldrsh.w	r1, [lr, #8]
    22a4:	fb06 7202 	mla	r2, r6, r2, r7
    22a8:	fb05 2703 	mla	r7, r5, r3, r2
    22ac:	f9bc 600a 	ldrsh.w	r6, [ip, #10]
    22b0:	f9be 200a 	ldrsh.w	r2, [lr, #10]
    22b4:	f9be 300c 	ldrsh.w	r3, [lr, #12]
    22b8:	f9bc 500c 	ldrsh.w	r5, [ip, #12]
    22bc:	fb00 7101 	mla	r1, r0, r1, r7
    22c0:	fb06 1602 	mla	r6, r6, r2, r1
    22c4:	f9be 700e 	ldrsh.w	r7, [lr, #14]
    22c8:	f9bc 000e 	ldrsh.w	r0, [ip, #14]
    22cc:	f10e 0e10 	add.w	lr, lr, #16
    22d0:	fb05 6203 	mla	r2, r5, r3, r6
        for (j=0; j<N; j++) {
    22d4:	45f0      	cmp	r8, lr
    22d6:	f10c 0c10 	add.w	ip, ip, #16
            C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
    22da:	fb00 2307 	mla	r3, r0, r7, r2
        for (j=0; j<N; j++) {
    22de:	d1c7      	bne.n	2270 <matrix_test+0x574>
    22e0:	f84b 3b04 	str.w	r3, [fp], #4
    for (i=0; i<N; i++) {
    22e4:	9d01      	ldr	r5, [sp, #4]
    22e6:	45ab      	cmp	fp, r5
    22e8:	44a2      	add	sl, r4
    22ea:	f47f af77 	bne.w	21dc <matrix_test+0x4e0>
    22ee:	f04f 0800 	mov.w	r8, #0
    22f2:	9e09      	ldr	r6, [sp, #36]	; 0x24
    22f4:	f8dd 9014 	ldr.w	r9, [sp, #20]
    22f8:	f8dd b020 	ldr.w	fp, [sp, #32]
    22fc:	f8dd a008 	ldr.w	sl, [sp, #8]
    2300:	9601      	str	r6, [sp, #4]
    2302:	4645      	mov	r5, r8
    2304:	4640      	mov	r0, r8
    2306:	46c4      	mov	ip, r8
    2308:	eb06 0e0a 	add.w	lr, r6, sl
            cur=C[i*N+j];
    230c:	f856 7b04 	ldr.w	r7, [r6], #4
                ret+=10;
    2310:	b283      	uxth	r3, r0
            tmp+=cur;
    2312:	44bc      	add	ip, r7
                ret+=10;
    2314:	f103 010a 	add.w	r1, r3, #10
    2318:	b20a      	sxth	r2, r1
                ret += (cur>prev) ? 1 : 0;
    231a:	42af      	cmp	r7, r5
    231c:	bfc8      	it	gt
    231e:	3301      	addgt	r3, #1
    2320:	45cc      	cmp	ip, r9
    2322:	b218      	sxth	r0, r3
    2324:	bfc8      	it	gt
    2326:	f04f 0c00 	movgt.w	ip, #0
    232a:	f1aa 0304 	sub.w	r3, sl, #4
    232e:	bfc8      	it	gt
    2330:	4610      	movgt	r0, r2
        for (j=0; j<N; j++) {
    2332:	45b6      	cmp	lr, r6
            cur=C[i*N+j];
    2334:	463d      	mov	r5, r7
    2336:	f3c3 0781 	ubfx	r7, r3, #2, #2
        for (j=0; j<N; j++) {
    233a:	f000 8086 	beq.w	244a <matrix_test+0x74e>
    233e:	2f00      	cmp	r7, #0
    2340:	d038      	beq.n	23b4 <matrix_test+0x6b8>
    2342:	2f01      	cmp	r7, #1
    2344:	d023      	beq.n	238e <matrix_test+0x692>
    2346:	2f02      	cmp	r7, #2
    2348:	d010      	beq.n	236c <matrix_test+0x670>
            cur=C[i*N+j];
    234a:	f856 1b04 	ldr.w	r1, [r6], #4
                ret+=10;
    234e:	b280      	uxth	r0, r0
    2350:	f100 020a 	add.w	r2, r0, #10
            tmp+=cur;
    2354:	448c      	add	ip, r1
                ret += (cur>prev) ? 1 : 0;
    2356:	42a9      	cmp	r1, r5
    2358:	bfc8      	it	gt
    235a:	3001      	addgt	r0, #1
                ret+=10;
    235c:	b215      	sxth	r5, r2
    235e:	45cc      	cmp	ip, r9
                ret += (cur>prev) ? 1 : 0;
    2360:	b200      	sxth	r0, r0
    2362:	bfc4      	itt	gt
    2364:	f04f 0c00 	movgt.w	ip, #0
    2368:	4628      	movgt	r0, r5
            cur=C[i*N+j];
    236a:	460d      	mov	r5, r1
    236c:	f856 3b04 	ldr.w	r3, [r6], #4
                ret+=10;
    2370:	b287      	uxth	r7, r0
    2372:	f107 010a 	add.w	r1, r7, #10
            tmp+=cur;
    2376:	449c      	add	ip, r3
                ret += (cur>prev) ? 1 : 0;
    2378:	42ab      	cmp	r3, r5
    237a:	bfc8      	it	gt
    237c:	3701      	addgt	r7, #1
                ret+=10;
    237e:	b20a      	sxth	r2, r1
    2380:	45cc      	cmp	ip, r9
                ret += (cur>prev) ? 1 : 0;
    2382:	b238      	sxth	r0, r7
    2384:	bfc4      	itt	gt
    2386:	f04f 0c00 	movgt.w	ip, #0
    238a:	4610      	movgt	r0, r2
            cur=C[i*N+j];
    238c:	461d      	mov	r5, r3
    238e:	f856 3b04 	ldr.w	r3, [r6], #4
                ret+=10;
    2392:	b280      	uxth	r0, r0
    2394:	f100 070a 	add.w	r7, r0, #10
            tmp+=cur;
    2398:	449c      	add	ip, r3
                ret += (cur>prev) ? 1 : 0;
    239a:	42ab      	cmp	r3, r5
    239c:	bfc8      	it	gt
    239e:	3001      	addgt	r0, #1
    23a0:	45cc      	cmp	ip, r9
                ret+=10;
    23a2:	b23d      	sxth	r5, r7
                ret += (cur>prev) ? 1 : 0;
    23a4:	b200      	sxth	r0, r0
    23a6:	bfc4      	itt	gt
    23a8:	f04f 0c00 	movgt.w	ip, #0
    23ac:	4628      	movgt	r0, r5
        for (j=0; j<N; j++) {
    23ae:	45b6      	cmp	lr, r6
            cur=C[i*N+j];
    23b0:	461d      	mov	r5, r3
        for (j=0; j<N; j++) {
    23b2:	d04a      	beq.n	244a <matrix_test+0x74e>
    23b4:	4662      	mov	r2, ip
            cur=C[i*N+j];
    23b6:	4631      	mov	r1, r6
                ret+=10;
    23b8:	b280      	uxth	r0, r0
            cur=C[i*N+j];
    23ba:	f851 cb04 	ldr.w	ip, [r1], #4
    23be:	6873      	ldr	r3, [r6, #4]
    23c0:	684f      	ldr	r7, [r1, #4]
    23c2:	68f1      	ldr	r1, [r6, #12]
            tmp+=cur;
    23c4:	4462      	add	r2, ip
                ret += (cur>prev) ? 1 : 0;
    23c6:	45ac      	cmp	ip, r5
    23c8:	bfd4      	ite	le
    23ca:	4605      	movle	r5, r0
    23cc:	1c45      	addgt	r5, r0, #1
    23ce:	b22d      	sxth	r5, r5
    23d0:	454a      	cmp	r2, r9
                ret+=10;
    23d2:	f100 000a 	add.w	r0, r0, #10
    23d6:	b200      	sxth	r0, r0
    23d8:	bfd6      	itet	le
    23da:	4628      	movle	r0, r5
    23dc:	2500      	movgt	r5, #0
    23de:	4615      	movle	r5, r2
    23e0:	b282      	uxth	r2, r0
            tmp+=cur;
    23e2:	441d      	add	r5, r3
                ret+=10;
    23e4:	f102 000a 	add.w	r0, r2, #10
                ret += (cur>prev) ? 1 : 0;
    23e8:	4563      	cmp	r3, ip
    23ea:	bfc8      	it	gt
    23ec:	3201      	addgt	r2, #1
    23ee:	b212      	sxth	r2, r2
    23f0:	454d      	cmp	r5, r9
                ret+=10;
    23f2:	fa0f fc80 	sxth.w	ip, r0
    23f6:	bfd4      	ite	le
    23f8:	4694      	movle	ip, r2
    23fa:	2500      	movgt	r5, #0
    23fc:	fa1f f08c 	uxth.w	r0, ip
    2400:	f100 0c0a 	add.w	ip, r0, #10
                ret += (cur>prev) ? 1 : 0;
    2404:	429f      	cmp	r7, r3
    2406:	bfc8      	it	gt
    2408:	3001      	addgt	r0, #1
            tmp+=cur;
    240a:	197b      	adds	r3, r7, r5
    240c:	454b      	cmp	r3, r9
                ret += (cur>prev) ? 1 : 0;
    240e:	b205      	sxth	r5, r0
                ret+=10;
    2410:	fa0f f28c 	sxth.w	r2, ip
    2414:	bfd8      	it	le
    2416:	462a      	movle	r2, r5
    2418:	fa1f fc82 	uxth.w	ip, r2
    241c:	bfc8      	it	gt
    241e:	2300      	movgt	r3, #0
    2420:	f10c 000a 	add.w	r0, ip, #10
            tmp+=cur;
    2424:	440b      	add	r3, r1
                ret += (cur>prev) ? 1 : 0;
    2426:	42b9      	cmp	r1, r7
    2428:	bfc8      	it	gt
    242a:	f10c 0c01 	addgt.w	ip, ip, #1
    242e:	fa0f f28c 	sxth.w	r2, ip
    2432:	454b      	cmp	r3, r9
    2434:	f106 0610 	add.w	r6, r6, #16
                ret+=10;
    2438:	b200      	sxth	r0, r0
    243a:	bfce      	itee	gt
    243c:	2200      	movgt	r2, #0
    243e:	4610      	movle	r0, r2
    2440:	461a      	movle	r2, r3
        for (j=0; j<N; j++) {
    2442:	45b6      	cmp	lr, r6
            cur=C[i*N+j];
    2444:	460d      	mov	r5, r1
        for (j=0; j<N; j++) {
    2446:	d1b6      	bne.n	23b6 <matrix_test+0x6ba>
    2448:	4694      	mov	ip, r2
    for (i=0; i<N; i++) {
    244a:	f108 0801 	add.w	r8, r8, #1
    244e:	45c3      	cmp	fp, r8
    2450:	f47f af5a 	bne.w	2308 <matrix_test+0x60c>
    crc=crc16(matrix_sum(N,C,clipval),crc);
    2454:	9904      	ldr	r1, [sp, #16]
    2456:	f8cd 8014 	str.w	r8, [sp, #20]
    245a:	f001 fa8f 	bl	397c <crc16>
    245e:	9e03      	ldr	r6, [sp, #12]
    2460:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
    2464:	f8dd a004 	ldr.w	sl, [sp, #4]
    2468:	f8cd 901c 	str.w	r9, [sp, #28]
    246c:	4426      	add	r6, r4
    246e:	2700      	movs	r7, #0
    2470:	9006      	str	r0, [sp, #24]
    2472:	9704      	str	r7, [sp, #16]
    2474:	46b1      	mov	r9, r6
    2476:	9f03      	ldr	r7, [sp, #12]
    2478:	eb04 0e0c 	add.w	lr, r4, ip
    247c:	46d0      	mov	r8, sl
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            C[i*N+j]=0;
            for(k=0;k<N;k++)
            {
                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    247e:	46e3      	mov	fp, ip
    2480:	883b      	ldrh	r3, [r7, #0]
    2482:	f93b 1b02 	ldrsh.w	r1, [fp], #2
    2486:	ebae 050c 	sub.w	r5, lr, ip
    248a:	1ea8      	subs	r0, r5, #2
            for(k=0;k<N;k++)
    248c:	45de      	cmp	lr, fp
                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    248e:	fb11 f303 	smulbb	r3, r1, r3
    2492:	f3c0 0242 	ubfx	r2, r0, #1, #3
    2496:	eb07 0604 	add.w	r6, r7, r4
            for(k=0;k<N;k++)
    249a:	d075      	beq.n	2588 <matrix_test+0x88c>
    249c:	b3ba      	cbz	r2, 250e <matrix_test+0x812>
    249e:	2a01      	cmp	r2, #1
    24a0:	d02d      	beq.n	24fe <matrix_test+0x802>
    24a2:	2a02      	cmp	r2, #2
    24a4:	d025      	beq.n	24f2 <matrix_test+0x7f6>
    24a6:	2a03      	cmp	r2, #3
    24a8:	d01d      	beq.n	24e6 <matrix_test+0x7ea>
    24aa:	2a04      	cmp	r2, #4
    24ac:	d015      	beq.n	24da <matrix_test+0x7de>
    24ae:	2a05      	cmp	r2, #5
    24b0:	d00d      	beq.n	24ce <matrix_test+0x7d2>
    24b2:	2a06      	cmp	r2, #6
    24b4:	d005      	beq.n	24c2 <matrix_test+0x7c6>
                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    24b6:	8835      	ldrh	r5, [r6, #0]
    24b8:	f93b 1b02 	ldrsh.w	r1, [fp], #2
    24bc:	4426      	add	r6, r4
    24be:	fb11 3305 	smlabb	r3, r1, r5, r3
    24c2:	8832      	ldrh	r2, [r6, #0]
    24c4:	f93b 0b02 	ldrsh.w	r0, [fp], #2
    24c8:	4426      	add	r6, r4
    24ca:	fb10 3302 	smlabb	r3, r0, r2, r3
    24ce:	8835      	ldrh	r5, [r6, #0]
    24d0:	f93b 1b02 	ldrsh.w	r1, [fp], #2
    24d4:	4426      	add	r6, r4
    24d6:	fb11 3305 	smlabb	r3, r1, r5, r3
    24da:	8832      	ldrh	r2, [r6, #0]
    24dc:	f93b 0b02 	ldrsh.w	r0, [fp], #2
    24e0:	4426      	add	r6, r4
    24e2:	fb10 3302 	smlabb	r3, r0, r2, r3
    24e6:	8835      	ldrh	r5, [r6, #0]
    24e8:	f93b 1b02 	ldrsh.w	r1, [fp], #2
    24ec:	4426      	add	r6, r4
    24ee:	fb11 3305 	smlabb	r3, r1, r5, r3
    24f2:	8832      	ldrh	r2, [r6, #0]
    24f4:	f93b 0b02 	ldrsh.w	r0, [fp], #2
    24f8:	4426      	add	r6, r4
    24fa:	fb10 3302 	smlabb	r3, r0, r2, r3
    24fe:	f93b 1b02 	ldrsh.w	r1, [fp], #2
    2502:	8835      	ldrh	r5, [r6, #0]
            for(k=0;k<N;k++)
    2504:	45de      	cmp	lr, fp
    2506:	4426      	add	r6, r4
                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2508:	fb11 3305 	smlabb	r3, r1, r5, r3
            for(k=0;k<N;k++)
    250c:	d03c      	beq.n	2588 <matrix_test+0x88c>
    250e:	9701      	str	r7, [sp, #4]
                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2510:	465f      	mov	r7, fp
    2512:	f9bb 0002 	ldrsh.w	r0, [fp, #2]
    2516:	f937 5b02 	ldrsh.w	r5, [r7], #2
    251a:	5b31      	ldrh	r1, [r6, r4]
    251c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
    2520:	8837      	ldrh	r7, [r6, #0]
    2522:	fb15 3307 	smlabb	r3, r5, r7, r3
    2526:	1935      	adds	r5, r6, r4
    2528:	fb10 3701 	smlabb	r7, r0, r1, r3
    252c:	f836 6014 	ldrh.w	r6, [r6, r4, lsl #1]
    2530:	f9bb 1006 	ldrsh.w	r1, [fp, #6]
    2534:	1928      	adds	r0, r5, r4
    2536:	f835 5014 	ldrh.w	r5, [r5, r4, lsl #1]
    253a:	fb12 7306 	smlabb	r3, r2, r6, r7
    253e:	f9bb 6008 	ldrsh.w	r6, [fp, #8]
    2542:	f830 7014 	ldrh.w	r7, [r0, r4, lsl #1]
    2546:	1902      	adds	r2, r0, r4
    2548:	fb11 3005 	smlabb	r0, r1, r5, r3
    254c:	1911      	adds	r1, r2, r4
    254e:	fb16 0307 	smlabb	r3, r6, r7, r0
    2552:	f9bb 500a 	ldrsh.w	r5, [fp, #10]
    2556:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
    255a:	f831 6014 	ldrh.w	r6, [r1, r4, lsl #1]
    255e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
    2562:	190f      	adds	r7, r1, r4
    2564:	f10b 0b10 	add.w	fp, fp, #16
    2568:	fb15 3102 	smlabb	r1, r5, r2, r3
    256c:	f93b 5c02 	ldrsh.w	r5, [fp, #-2]
    2570:	f837 2014 	ldrh.w	r2, [r7, r4, lsl #1]
    2574:	fb10 1306 	smlabb	r3, r0, r6, r1
            for(k=0;k<N;k++)
    2578:	45de      	cmp	lr, fp
    257a:	eb07 0644 	add.w	r6, r7, r4, lsl #1
    257e:	4426      	add	r6, r4
                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2580:	fb15 3302 	smlabb	r3, r5, r2, r3
            for(k=0;k<N;k++)
    2584:	d1c4      	bne.n	2510 <matrix_test+0x814>
    2586:	9f01      	ldr	r7, [sp, #4]
    2588:	f848 3b04 	str.w	r3, [r8], #4
    258c:	3702      	adds	r7, #2
        for (j=0; j<N; j++) {
    258e:	45b9      	cmp	r9, r7
    2590:	f47f af75 	bne.w	247e <matrix_test+0x782>
    for (i=0; i<N; i++) {
    2594:	9e04      	ldr	r6, [sp, #16]
    2596:	9905      	ldr	r1, [sp, #20]
    2598:	9802      	ldr	r0, [sp, #8]
    259a:	3601      	adds	r6, #1
    259c:	42b1      	cmp	r1, r6
    259e:	9604      	str	r6, [sp, #16]
    25a0:	4482      	add	sl, r0
    25a2:	46f4      	mov	ip, lr
    25a4:	f47f af67 	bne.w	2476 <matrix_test+0x77a>
    25a8:	f04f 0800 	mov.w	r8, #0
    25ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
    25ae:	f8dd 901c 	ldr.w	r9, [sp, #28]
    25b2:	f8dd b020 	ldr.w	fp, [sp, #32]
    25b6:	f8dd a008 	ldr.w	sl, [sp, #8]
    25ba:	9601      	str	r6, [sp, #4]
    25bc:	4645      	mov	r5, r8
    25be:	4640      	mov	r0, r8
    25c0:	46c4      	mov	ip, r8
    25c2:	eb0a 0e06 	add.w	lr, sl, r6
            cur=C[i*N+j];
    25c6:	f856 2b04 	ldr.w	r2, [r6], #4
                ret+=10;
    25ca:	b283      	uxth	r3, r0
            tmp+=cur;
    25cc:	4494      	add	ip, r2
                ret+=10;
    25ce:	f103 070a 	add.w	r7, r3, #10
                ret += (cur>prev) ? 1 : 0;
    25d2:	42aa      	cmp	r2, r5
    25d4:	bfc8      	it	gt
    25d6:	3301      	addgt	r3, #1
    25d8:	45cc      	cmp	ip, r9
                ret+=10;
    25da:	b23d      	sxth	r5, r7
                ret += (cur>prev) ? 1 : 0;
    25dc:	b218      	sxth	r0, r3
    25de:	f1aa 0104 	sub.w	r1, sl, #4
    25e2:	bfc4      	itt	gt
    25e4:	4628      	movgt	r0, r5
    25e6:	f04f 0c00 	movgt.w	ip, #0
        for (j=0; j<N; j++) {
    25ea:	4576      	cmp	r6, lr
            cur=C[i*N+j];
    25ec:	4615      	mov	r5, r2
    25ee:	f3c1 0281 	ubfx	r2, r1, #2, #2
        for (j=0; j<N; j++) {
    25f2:	f000 8086 	beq.w	2702 <matrix_test+0xa06>
    25f6:	2a00      	cmp	r2, #0
    25f8:	d038      	beq.n	266c <matrix_test+0x970>
    25fa:	2a01      	cmp	r2, #1
    25fc:	d023      	beq.n	2646 <matrix_test+0x94a>
    25fe:	2a02      	cmp	r2, #2
    2600:	d010      	beq.n	2624 <matrix_test+0x928>
            cur=C[i*N+j];
    2602:	f856 3b04 	ldr.w	r3, [r6], #4
                ret+=10;
    2606:	b280      	uxth	r0, r0
    2608:	f100 070a 	add.w	r7, r0, #10
            tmp+=cur;
    260c:	449c      	add	ip, r3
                ret += (cur>prev) ? 1 : 0;
    260e:	42ab      	cmp	r3, r5
    2610:	bfc8      	it	gt
    2612:	3001      	addgt	r0, #1
                ret+=10;
    2614:	b23d      	sxth	r5, r7
    2616:	45cc      	cmp	ip, r9
                ret += (cur>prev) ? 1 : 0;
    2618:	b200      	sxth	r0, r0
    261a:	bfc4      	itt	gt
    261c:	f04f 0c00 	movgt.w	ip, #0
    2620:	4628      	movgt	r0, r5
            cur=C[i*N+j];
    2622:	461d      	mov	r5, r3
    2624:	f856 1b04 	ldr.w	r1, [r6], #4
                ret+=10;
    2628:	b283      	uxth	r3, r0
    262a:	f103 020a 	add.w	r2, r3, #10
            tmp+=cur;
    262e:	448c      	add	ip, r1
                ret += (cur>prev) ? 1 : 0;
    2630:	42a9      	cmp	r1, r5
    2632:	bfc8      	it	gt
    2634:	3301      	addgt	r3, #1
                ret+=10;
    2636:	b217      	sxth	r7, r2
    2638:	45cc      	cmp	ip, r9
                ret += (cur>prev) ? 1 : 0;
    263a:	b218      	sxth	r0, r3
    263c:	bfc4      	itt	gt
    263e:	f04f 0c00 	movgt.w	ip, #0
    2642:	4638      	movgt	r0, r7
            cur=C[i*N+j];
    2644:	460d      	mov	r5, r1
    2646:	f856 1b04 	ldr.w	r1, [r6], #4
                ret+=10;
    264a:	b280      	uxth	r0, r0
    264c:	f100 030a 	add.w	r3, r0, #10
            tmp+=cur;
    2650:	448c      	add	ip, r1
                ret += (cur>prev) ? 1 : 0;
    2652:	42a9      	cmp	r1, r5
    2654:	bfc8      	it	gt
    2656:	3001      	addgt	r0, #1
    2658:	45cc      	cmp	ip, r9
                ret+=10;
    265a:	b21d      	sxth	r5, r3
                ret += (cur>prev) ? 1 : 0;
    265c:	b200      	sxth	r0, r0
    265e:	bfc4      	itt	gt
    2660:	f04f 0c00 	movgt.w	ip, #0
    2664:	4628      	movgt	r0, r5
        for (j=0; j<N; j++) {
    2666:	4576      	cmp	r6, lr
            cur=C[i*N+j];
    2668:	460d      	mov	r5, r1
        for (j=0; j<N; j++) {
    266a:	d04a      	beq.n	2702 <matrix_test+0xa06>
    266c:	4662      	mov	r2, ip
            cur=C[i*N+j];
    266e:	4637      	mov	r7, r6
                ret+=10;
    2670:	b280      	uxth	r0, r0
            cur=C[i*N+j];
    2672:	f857 cb04 	ldr.w	ip, [r7], #4
    2676:	6873      	ldr	r3, [r6, #4]
    2678:	687f      	ldr	r7, [r7, #4]
    267a:	68f1      	ldr	r1, [r6, #12]
            tmp+=cur;
    267c:	4462      	add	r2, ip
                ret += (cur>prev) ? 1 : 0;
    267e:	45ac      	cmp	ip, r5
    2680:	bfd4      	ite	le
    2682:	4605      	movle	r5, r0
    2684:	1c45      	addgt	r5, r0, #1
    2686:	b22d      	sxth	r5, r5
    2688:	454a      	cmp	r2, r9
                ret+=10;
    268a:	f100 000a 	add.w	r0, r0, #10
    268e:	b200      	sxth	r0, r0
    2690:	bfd6      	itet	le
    2692:	4628      	movle	r0, r5
    2694:	2500      	movgt	r5, #0
    2696:	4615      	movle	r5, r2
    2698:	b282      	uxth	r2, r0
            tmp+=cur;
    269a:	441d      	add	r5, r3
                ret+=10;
    269c:	f102 000a 	add.w	r0, r2, #10
                ret += (cur>prev) ? 1 : 0;
    26a0:	4563      	cmp	r3, ip
    26a2:	bfc8      	it	gt
    26a4:	3201      	addgt	r2, #1
    26a6:	b212      	sxth	r2, r2
    26a8:	454d      	cmp	r5, r9
                ret+=10;
    26aa:	fa0f fc80 	sxth.w	ip, r0
    26ae:	bfd4      	ite	le
    26b0:	4694      	movle	ip, r2
    26b2:	2500      	movgt	r5, #0
    26b4:	fa1f f08c 	uxth.w	r0, ip
    26b8:	f100 0c0a 	add.w	ip, r0, #10
                ret += (cur>prev) ? 1 : 0;
    26bc:	429f      	cmp	r7, r3
    26be:	bfc8      	it	gt
    26c0:	3001      	addgt	r0, #1
            tmp+=cur;
    26c2:	197b      	adds	r3, r7, r5
    26c4:	454b      	cmp	r3, r9
                ret += (cur>prev) ? 1 : 0;
    26c6:	b205      	sxth	r5, r0
                ret+=10;
    26c8:	fa0f f28c 	sxth.w	r2, ip
    26cc:	bfd8      	it	le
    26ce:	462a      	movle	r2, r5
    26d0:	fa1f fc82 	uxth.w	ip, r2
    26d4:	bfc8      	it	gt
    26d6:	2300      	movgt	r3, #0
    26d8:	f10c 000a 	add.w	r0, ip, #10
            tmp+=cur;
    26dc:	440b      	add	r3, r1
                ret += (cur>prev) ? 1 : 0;
    26de:	42b9      	cmp	r1, r7
    26e0:	bfc8      	it	gt
    26e2:	f10c 0c01 	addgt.w	ip, ip, #1
    26e6:	fa0f f28c 	sxth.w	r2, ip
    26ea:	454b      	cmp	r3, r9
    26ec:	f106 0610 	add.w	r6, r6, #16
                ret+=10;
    26f0:	b200      	sxth	r0, r0
    26f2:	bfce      	itee	gt
    26f4:	2200      	movgt	r2, #0
    26f6:	4610      	movle	r0, r2
    26f8:	461a      	movle	r2, r3
        for (j=0; j<N; j++) {
    26fa:	4576      	cmp	r6, lr
            cur=C[i*N+j];
    26fc:	460d      	mov	r5, r1
        for (j=0; j<N; j++) {
    26fe:	d1b6      	bne.n	266e <matrix_test+0x972>
    2700:	4694      	mov	ip, r2
    for (i=0; i<N; i++) {
    2702:	f108 0801 	add.w	r8, r8, #1
    2706:	45c3      	cmp	fp, r8
    2708:	f47f af5b 	bne.w	25c2 <matrix_test+0x8c6>
    crc=crc16(matrix_sum(N,C,clipval),crc);
    270c:	9906      	ldr	r1, [sp, #24]
    270e:	f8cd 8014 	str.w	r8, [sp, #20]
    2712:	f001 f933 	bl	397c <crc16>
    2716:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    2718:	9f03      	ldr	r7, [sp, #12]
    271a:	f8cd 901c 	str.w	r9, [sp, #28]
    271e:	2100      	movs	r1, #0
    2720:	9006      	str	r0, [sp, #24]
    2722:	eb07 0b04 	add.w	fp, r7, r4
    2726:	9104      	str	r1, [sp, #16]
    2728:	46b1      	mov	r9, r6
    272a:	f8dd 800c 	ldr.w	r8, [sp, #12]
    272e:	f8dd a004 	ldr.w	sl, [sp, #4]
    2732:	eb04 0c09 	add.w	ip, r4, r9
    for (i=0; i<N; i++) {
        for (j=0; j<N; j++) {
            C[i*N+j]=0;
            for(k=0;k<N;k++)
            {
                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2736:	464f      	mov	r7, r9
    2738:	f8b8 e000 	ldrh.w	lr, [r8]
    273c:	f937 3b02 	ldrsh.w	r3, [r7], #2
    2740:	ebac 0509 	sub.w	r5, ip, r9
    2744:	fb1e f003 	smulbb	r0, lr, r3
                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    2748:	f3c0 0683 	ubfx	r6, r0, #2, #4
    274c:	f3c0 1346 	ubfx	r3, r0, #5, #7
    2750:	1eaa      	subs	r2, r5, #2
            for(k=0;k<N;k++)
    2752:	45bc      	cmp	ip, r7
                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    2754:	fb03 f306 	mul.w	r3, r3, r6
    2758:	f3c2 0141 	ubfx	r1, r2, #1, #2
    275c:	eb08 0604 	add.w	r6, r8, r4
            for(k=0;k<N;k++)
    2760:	d060      	beq.n	2824 <matrix_test+0xb28>
    2762:	b349      	cbz	r1, 27b8 <matrix_test+0xabc>
    2764:	2901      	cmp	r1, #1
    2766:	d019      	beq.n	279c <matrix_test+0xaa0>
    2768:	2902      	cmp	r1, #2
    276a:	d00b      	beq.n	2784 <matrix_test+0xa88>
                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    276c:	8830      	ldrh	r0, [r6, #0]
    276e:	f937 5b02 	ldrsh.w	r5, [r7], #2
    2772:	fb10 fe05 	smulbb	lr, r0, r5
                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    2776:	f3ce 0183 	ubfx	r1, lr, #2, #4
    277a:	f3ce 1246 	ubfx	r2, lr, #5, #7
    277e:	4426      	add	r6, r4
    2780:	fb02 3301 	mla	r3, r2, r1, r3
                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2784:	8830      	ldrh	r0, [r6, #0]
    2786:	f937 5b02 	ldrsh.w	r5, [r7], #2
    278a:	fb10 fe05 	smulbb	lr, r0, r5
                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    278e:	f3ce 0183 	ubfx	r1, lr, #2, #4
    2792:	f3ce 1246 	ubfx	r2, lr, #5, #7
    2796:	4426      	add	r6, r4
    2798:	fb02 3301 	mla	r3, r2, r1, r3
                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    279c:	f937 5b02 	ldrsh.w	r5, [r7], #2
    27a0:	8830      	ldrh	r0, [r6, #0]
    27a2:	fb10 fe05 	smulbb	lr, r0, r5
                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    27a6:	f3ce 0183 	ubfx	r1, lr, #2, #4
    27aa:	f3ce 1246 	ubfx	r2, lr, #5, #7
            for(k=0;k<N;k++)
    27ae:	45bc      	cmp	ip, r7
    27b0:	4426      	add	r6, r4
                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    27b2:	fb02 3301 	mla	r3, r2, r1, r3
            for(k=0;k<N;k++)
    27b6:	d035      	beq.n	2824 <matrix_test+0xb28>
                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    27b8:	463d      	mov	r5, r7
    27ba:	8830      	ldrh	r0, [r6, #0]
    27bc:	f935 2b02 	ldrsh.w	r2, [r5], #2
    27c0:	f9b7 e002 	ldrsh.w	lr, [r7, #2]
    27c4:	f9b5 5002 	ldrsh.w	r5, [r5, #2]
    27c8:	5b31      	ldrh	r1, [r6, r4]
    27ca:	fb10 f002 	smulbb	r0, r0, r2
    27ce:	f836 2014 	ldrh.w	r2, [r6, r4, lsl #1]
    27d2:	fb11 f10e 	smulbb	r1, r1, lr
    27d6:	fb12 f205 	smulbb	r2, r2, r5
                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    27da:	f3c0 1e46 	ubfx	lr, r0, #5, #7
    27de:	f3c0 0583 	ubfx	r5, r0, #2, #4
    27e2:	4426      	add	r6, r4
    27e4:	fb0e 3305 	mla	r3, lr, r5, r3
    27e8:	f3c1 0583 	ubfx	r5, r1, #2, #4
    27ec:	f3c1 1146 	ubfx	r1, r1, #5, #7
                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    27f0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    27f4:	fb01 3505 	mla	r5, r1, r5, r3
                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    27f8:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    27fc:	f3c2 0e83 	ubfx	lr, r2, #2, #4
                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
    2800:	fb13 f000 	smulbb	r0, r3, r0
                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    2804:	f3c2 1246 	ubfx	r2, r2, #5, #7
    2808:	3708      	adds	r7, #8
    280a:	fb02 550e 	mla	r5, r2, lr, r5
    280e:	eb06 0644 	add.w	r6, r6, r4, lsl #1
    2812:	f3c0 0283 	ubfx	r2, r0, #2, #4
    2816:	f3c0 1146 	ubfx	r1, r0, #5, #7
            for(k=0;k<N;k++)
    281a:	45bc      	cmp	ip, r7
    281c:	4426      	add	r6, r4
                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
    281e:	fb01 5302 	mla	r3, r1, r2, r5
            for(k=0;k<N;k++)
    2822:	d1c9      	bne.n	27b8 <matrix_test+0xabc>
    2824:	f108 0802 	add.w	r8, r8, #2
        for (j=0; j<N; j++) {
    2828:	45c3      	cmp	fp, r8
    282a:	f84a 3b04 	str.w	r3, [sl], #4
    282e:	d182      	bne.n	2736 <matrix_test+0xa3a>
    for (i=0; i<N; i++) {
    2830:	9f04      	ldr	r7, [sp, #16]
    2832:	9e01      	ldr	r6, [sp, #4]
    2834:	9d02      	ldr	r5, [sp, #8]
    2836:	9b05      	ldr	r3, [sp, #20]
    2838:	3701      	adds	r7, #1
    283a:	442e      	add	r6, r5
    283c:	42bb      	cmp	r3, r7
    283e:	9704      	str	r7, [sp, #16]
    2840:	9601      	str	r6, [sp, #4]
    2842:	46e1      	mov	r9, ip
    2844:	f47f af71 	bne.w	272a <matrix_test+0xa2e>
    2848:	f04f 0e00 	mov.w	lr, #0
    284c:	f8dd 901c 	ldr.w	r9, [sp, #28]
    2850:	9f09      	ldr	r7, [sp, #36]	; 0x24
    2852:	f8dd 8020 	ldr.w	r8, [sp, #32]
    2856:	4676      	mov	r6, lr
    2858:	4670      	mov	r0, lr
    285a:	46f2      	mov	sl, lr
    285c:	46ac      	mov	ip, r5
            cur=C[i*N+j];
    285e:	463c      	mov	r4, r7
                ret+=10;
    2860:	b280      	uxth	r0, r0
            cur=C[i*N+j];
    2862:	f854 2b04 	ldr.w	r2, [r4], #4
                ret += (cur>prev) ? 1 : 0;
    2866:	4552      	cmp	r2, sl
    2868:	bfd4      	ite	le
    286a:	4601      	movle	r1, r0
    286c:	1c41      	addgt	r1, r0, #1
            tmp+=cur;
    286e:	4416      	add	r6, r2
    2870:	454e      	cmp	r6, r9
                ret += (cur>prev) ? 1 : 0;
    2872:	fa0f fa81 	sxth.w	sl, r1
                ret+=10;
    2876:	f100 000a 	add.w	r0, r0, #10
    287a:	4467      	add	r7, ip
    287c:	b200      	sxth	r0, r0
    287e:	f1ac 0504 	sub.w	r5, ip, #4
    2882:	bfd4      	ite	le
    2884:	4650      	movle	r0, sl
    2886:	2600      	movgt	r6, #0
        for (j=0; j<N; j++) {
    2888:	42a7      	cmp	r7, r4
            cur=C[i*N+j];
    288a:	4692      	mov	sl, r2
    288c:	f3c5 0381 	ubfx	r3, r5, #2, #2
        for (j=0; j<N; j++) {
    2890:	f000 808b 	beq.w	29aa <matrix_test+0xcae>
    2894:	2b00      	cmp	r3, #0
    2896:	d03c      	beq.n	2912 <matrix_test+0xc16>
    2898:	2b01      	cmp	r3, #1
    289a:	d025      	beq.n	28e8 <matrix_test+0xbec>
    289c:	2b02      	cmp	r3, #2
    289e:	d012      	beq.n	28c6 <matrix_test+0xbca>
            cur=C[i*N+j];
    28a0:	f854 1b04 	ldr.w	r1, [r4], #4
                ret+=10;
    28a4:	fa1f fb80 	uxth.w	fp, r0
    28a8:	f10b 000a 	add.w	r0, fp, #10
            tmp+=cur;
    28ac:	440e      	add	r6, r1
                ret += (cur>prev) ? 1 : 0;
    28ae:	4291      	cmp	r1, r2
    28b0:	bfc8      	it	gt
    28b2:	f10b 0b01 	addgt.w	fp, fp, #1
                ret+=10;
    28b6:	b202      	sxth	r2, r0
    28b8:	454e      	cmp	r6, r9
                ret += (cur>prev) ? 1 : 0;
    28ba:	fa0f f08b 	sxth.w	r0, fp
    28be:	bfc4      	itt	gt
    28c0:	2600      	movgt	r6, #0
    28c2:	4610      	movgt	r0, r2
            cur=C[i*N+j];
    28c4:	468a      	mov	sl, r1
    28c6:	f854 5b04 	ldr.w	r5, [r4], #4
                ret+=10;
    28ca:	b283      	uxth	r3, r0
    28cc:	f103 010a 	add.w	r1, r3, #10
            tmp+=cur;
    28d0:	442e      	add	r6, r5
                ret += (cur>prev) ? 1 : 0;
    28d2:	4555      	cmp	r5, sl
    28d4:	bfc8      	it	gt
    28d6:	3301      	addgt	r3, #1
                ret+=10;
    28d8:	fa0f fa81 	sxth.w	sl, r1
    28dc:	454e      	cmp	r6, r9
                ret += (cur>prev) ? 1 : 0;
    28de:	b218      	sxth	r0, r3
    28e0:	bfc4      	itt	gt
    28e2:	2600      	movgt	r6, #0
    28e4:	4650      	movgt	r0, sl
            cur=C[i*N+j];
    28e6:	46aa      	mov	sl, r5
    28e8:	f854 5b04 	ldr.w	r5, [r4], #4
                ret+=10;
    28ec:	fa1f fb80 	uxth.w	fp, r0
    28f0:	f10b 000a 	add.w	r0, fp, #10
            tmp+=cur;
    28f4:	442e      	add	r6, r5
                ret += (cur>prev) ? 1 : 0;
    28f6:	4555      	cmp	r5, sl
    28f8:	bfc8      	it	gt
    28fa:	f10b 0b01 	addgt.w	fp, fp, #1
                ret+=10;
    28fe:	b202      	sxth	r2, r0
    2900:	454e      	cmp	r6, r9
                ret += (cur>prev) ? 1 : 0;
    2902:	fa0f f08b 	sxth.w	r0, fp
    2906:	bfc4      	itt	gt
    2908:	2600      	movgt	r6, #0
    290a:	4610      	movgt	r0, r2
        for (j=0; j<N; j++) {
    290c:	42a7      	cmp	r7, r4
            cur=C[i*N+j];
    290e:	46aa      	mov	sl, r5
        for (j=0; j<N; j++) {
    2910:	d04b      	beq.n	29aa <matrix_test+0xcae>
            cur=C[i*N+j];
    2912:	4621      	mov	r1, r4
                ret+=10;
    2914:	b283      	uxth	r3, r0
            cur=C[i*N+j];
    2916:	f851 5b04 	ldr.w	r5, [r1], #4
    291a:	6860      	ldr	r0, [r4, #4]
    291c:	6849      	ldr	r1, [r1, #4]
    291e:	68e2      	ldr	r2, [r4, #12]
                ret += (cur>prev) ? 1 : 0;
    2920:	4555      	cmp	r5, sl
    2922:	bfd4      	ite	le
    2924:	469b      	movle	fp, r3
    2926:	f103 0b01 	addgt.w	fp, r3, #1
            tmp+=cur;
    292a:	442e      	add	r6, r5
    292c:	454e      	cmp	r6, r9
                ret += (cur>prev) ? 1 : 0;
    292e:	fa0f fa8b 	sxth.w	sl, fp
                ret+=10;
    2932:	f103 030a 	add.w	r3, r3, #10
    2936:	b21b      	sxth	r3, r3
    2938:	bfd4      	ite	le
    293a:	4653      	movle	r3, sl
    293c:	2600      	movgt	r6, #0
    293e:	fa1f fb83 	uxth.w	fp, r3
            tmp+=cur;
    2942:	4406      	add	r6, r0
                ret+=10;
    2944:	f10b 030a 	add.w	r3, fp, #10
                ret += (cur>prev) ? 1 : 0;
    2948:	42a8      	cmp	r0, r5
    294a:	bfc8      	it	gt
    294c:	f10b 0b01 	addgt.w	fp, fp, #1
    2950:	454e      	cmp	r6, r9
                ret+=10;
    2952:	b21d      	sxth	r5, r3
                ret += (cur>prev) ? 1 : 0;
    2954:	fa0f fa8b 	sxth.w	sl, fp
    2958:	bfc4      	itt	gt
    295a:	46aa      	movgt	sl, r5
    295c:	2600      	movgt	r6, #0
                ret+=10;
    295e:	fa1f fb8a 	uxth.w	fp, sl
                ret += (cur>prev) ? 1 : 0;
    2962:	4281      	cmp	r1, r0
    2964:	bfd4      	ite	le
    2966:	4658      	movle	r0, fp
    2968:	f10b 0001 	addgt.w	r0, fp, #1
            tmp+=cur;
    296c:	198b      	adds	r3, r1, r6
    296e:	454b      	cmp	r3, r9
                ret += (cur>prev) ? 1 : 0;
    2970:	fa0f fa80 	sxth.w	sl, r0
                ret+=10;
    2974:	f10b 050a 	add.w	r5, fp, #10
    2978:	fa0f fb85 	sxth.w	fp, r5
    297c:	bfda      	itte	le
    297e:	46d3      	movle	fp, sl
    2980:	461e      	movle	r6, r3
    2982:	2600      	movgt	r6, #0
    2984:	fa1f f58b 	uxth.w	r5, fp
    2988:	f105 000a 	add.w	r0, r5, #10
            tmp+=cur;
    298c:	4416      	add	r6, r2
                ret += (cur>prev) ? 1 : 0;
    298e:	428a      	cmp	r2, r1
    2990:	bfc8      	it	gt
    2992:	3501      	addgt	r5, #1
    2994:	3410      	adds	r4, #16
    2996:	454e      	cmp	r6, r9
                ret+=10;
    2998:	b201      	sxth	r1, r0
    299a:	bfc8      	it	gt
    299c:	2600      	movgt	r6, #0
                ret += (cur>prev) ? 1 : 0;
    299e:	b228      	sxth	r0, r5
    29a0:	bfc8      	it	gt
    29a2:	4608      	movgt	r0, r1
        for (j=0; j<N; j++) {
    29a4:	42a7      	cmp	r7, r4
            cur=C[i*N+j];
    29a6:	4692      	mov	sl, r2
        for (j=0; j<N; j++) {
    29a8:	d1b3      	bne.n	2912 <matrix_test+0xc16>
    for (i=0; i<N; i++) {
    29aa:	f10e 0401 	add.w	r4, lr, #1
    29ae:	45a0      	cmp	r8, r4
    29b0:	d001      	beq.n	29b6 <matrix_test+0xcba>
    29b2:	46a6      	mov	lr, r4
    29b4:	e753      	b.n	285e <matrix_test+0xb62>
    crc=crc16(matrix_sum(N,C,clipval),crc);
    29b6:	9906      	ldr	r1, [sp, #24]
    29b8:	f8cd e01c 	str.w	lr, [sp, #28]
    29bc:	f000 ffde 	bl	397c <crc16>
    29c0:	9008      	str	r0, [sp, #32]
    29c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    29c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    matrix_add_const(N,A,-val); /* return matrix to initial value */
    29c6:	f04f 0a00 	mov.w	sl, #0
    29ca:	0066      	lsls	r6, r4, #1
    29cc:	46d1      	mov	r9, sl
    29ce:	9604      	str	r6, [sp, #16]
    29d0:	4683      	mov	fp, r0
    29d2:	e0da      	b.n	2b8a <matrix_test+0xe8e>
            A[i*N+j] += val;
    29d4:	f8bb 5000 	ldrh.w	r5, [fp]
    matrix_add_const(N,A,-val); /* return matrix to initial value */
    29d8:	4621      	mov	r1, r4
            A[i*N+j] += val;
    29da:	1aae      	subs	r6, r5, r2
    29dc:	2901      	cmp	r1, #1
    29de:	f8ab 6000 	strh.w	r6, [fp]
    29e2:	f000 80ea 	beq.w	2bba <matrix_test+0xebe>
    29e6:	f8bb 7002 	ldrh.w	r7, [fp, #2]
    29ea:	2902      	cmp	r1, #2
    29ec:	eba7 0302 	sub.w	r3, r7, r2
    29f0:	f8ab 3002 	strh.w	r3, [fp, #2]
    29f4:	f000 80e1 	beq.w	2bba <matrix_test+0xebe>
    29f8:	f8bb 5004 	ldrh.w	r5, [fp, #4]
    29fc:	2903      	cmp	r1, #3
    29fe:	eba5 0602 	sub.w	r6, r5, r2
    2a02:	f8ab 6004 	strh.w	r6, [fp, #4]
    2a06:	f000 80d8 	beq.w	2bba <matrix_test+0xebe>
    2a0a:	f8bb 7006 	ldrh.w	r7, [fp, #6]
    2a0e:	1abb      	subs	r3, r7, r2
    2a10:	f8ab 3006 	strh.w	r3, [fp, #6]
        for (j=0; j<N; j++) {
    2a14:	2304      	movs	r3, #4
    2a16:	428c      	cmp	r4, r1
    2a18:	f000 80b0 	beq.w	2b7c <matrix_test+0xe80>
    2a1c:	1a65      	subs	r5, r4, r1
    2a1e:	1f2e      	subs	r6, r5, #4
    2a20:	9503      	str	r5, [sp, #12]
    2a22:	08b5      	lsrs	r5, r6, #2
    2a24:	9e07      	ldr	r6, [sp, #28]
    2a26:	1c6f      	adds	r7, r5, #1
    2a28:	1a76      	subs	r6, r6, r1
    2a2a:	9701      	str	r7, [sp, #4]
    2a2c:	2e02      	cmp	r6, #2
    2a2e:	ea4f 0787 	mov.w	r7, r7, lsl #2
    2a32:	9702      	str	r7, [sp, #8]
    2a34:	f240 8087 	bls.w	2b46 <matrix_test+0xe4a>
    2a38:	4451      	add	r1, sl
    2a3a:	eb00 0641 	add.w	r6, r0, r1, lsl #1
            A[i*N+j] += val;
    2a3e:	f850 e011 	ldr.w	lr, [r0, r1, lsl #1]
    2a42:	9105      	str	r1, [sp, #20]
    2a44:	ebae 0102 	sub.w	r1, lr, r2
    2a48:	9106      	str	r1, [sp, #24]
    2a4a:	6871      	ldr	r1, [r6, #4]
    2a4c:	eba1 0802 	sub.w	r8, r1, r2
    2a50:	9906      	ldr	r1, [sp, #24]
    2a52:	2700      	movs	r7, #0
    2a54:	46bc      	mov	ip, r7
    2a56:	ebc2 4e1e 	rsb	lr, r2, lr, lsr #16
    2a5a:	f361 070f 	bfi	r7, r1, #0, #16
    2a5e:	f36e 471f 	bfi	r7, lr, #16, #16
    2a62:	f005 0e01 	and.w	lr, r5, #1
    2a66:	9d05      	ldr	r5, [sp, #20]
    2a68:	6871      	ldr	r1, [r6, #4]
    2a6a:	f840 7015 	str.w	r7, [r0, r5, lsl #1]
    2a6e:	9d01      	ldr	r5, [sp, #4]
    2a70:	ebc2 4111 	rsb	r1, r2, r1, lsr #16
    2a74:	f368 0c0f 	bfi	ip, r8, #0, #16
    2a78:	2701      	movs	r7, #1
    2a7a:	f361 4c1f 	bfi	ip, r1, #16, #16
    2a7e:	42bd      	cmp	r5, r7
    2a80:	f106 0108 	add.w	r1, r6, #8
    2a84:	f8c6 c004 	str.w	ip, [r6, #4]
    2a88:	d958      	bls.n	2b3c <matrix_test+0xe40>
    2a8a:	f1be 0f00 	cmp.w	lr, #0
    2a8e:	d01b      	beq.n	2ac8 <matrix_test+0xdcc>
    2a90:	680f      	ldr	r7, [r1, #0]
    2a92:	684e      	ldr	r6, [r1, #4]
    2a94:	2500      	movs	r5, #0
    2a96:	eba7 0c02 	sub.w	ip, r7, r2
    2a9a:	46ae      	mov	lr, r5
    2a9c:	ebc2 4817 	rsb	r8, r2, r7, lsr #16
    2aa0:	1ab7      	subs	r7, r6, r2
    2aa2:	f367 0e0f 	bfi	lr, r7, #0, #16
    2aa6:	ebc2 4616 	rsb	r6, r2, r6, lsr #16
    2aaa:	f36c 050f 	bfi	r5, ip, #0, #16
    2aae:	f368 451f 	bfi	r5, r8, #16, #16
    2ab2:	f366 4e1f 	bfi	lr, r6, #16, #16
    2ab6:	e881 4020 	stmia.w	r1, {r5, lr}
    2aba:	9d01      	ldr	r5, [sp, #4]
    2abc:	2702      	movs	r7, #2
    2abe:	42bd      	cmp	r5, r7
    2ac0:	460e      	mov	r6, r1
    2ac2:	f101 0108 	add.w	r1, r1, #8
    2ac6:	d939      	bls.n	2b3c <matrix_test+0xe40>
    2ac8:	9405      	str	r4, [sp, #20]
    2aca:	9306      	str	r3, [sp, #24]
    2acc:	68b5      	ldr	r5, [r6, #8]
    2ace:	f106 0e08 	add.w	lr, r6, #8
    2ad2:	68f6      	ldr	r6, [r6, #12]
    2ad4:	2400      	movs	r4, #0
    2ad6:	1ab3      	subs	r3, r6, r2
    2ad8:	eba5 0802 	sub.w	r8, r5, r2
    2adc:	46a4      	mov	ip, r4
    2ade:	ebc2 4616 	rsb	r6, r2, r6, lsr #16
    2ae2:	f363 0c0f 	bfi	ip, r3, #0, #16
    2ae6:	f368 040f 	bfi	r4, r8, #0, #16
    2aea:	ebc2 4515 	rsb	r5, r2, r5, lsr #16
    2aee:	f366 4c1f 	bfi	ip, r6, #16, #16
    2af2:	f365 441f 	bfi	r4, r5, #16, #16
    2af6:	e881 1010 	stmia.w	r1, {r4, ip}
    2afa:	f10e 0608 	add.w	r6, lr, #8
    2afe:	f8de e008 	ldr.w	lr, [lr, #8]
    2b02:	6873      	ldr	r3, [r6, #4]
    2b04:	2400      	movs	r4, #0
    2b06:	ebae 0802 	sub.w	r8, lr, r2
    2b0a:	46a4      	mov	ip, r4
    2b0c:	ebc2 4e1e 	rsb	lr, r2, lr, lsr #16
    2b10:	f368 040f 	bfi	r4, r8, #0, #16
    2b14:	f36e 441f 	bfi	r4, lr, #16, #16
    2b18:	1a9d      	subs	r5, r3, r2
    2b1a:	608c      	str	r4, [r1, #8]
    2b1c:	9c01      	ldr	r4, [sp, #4]
    2b1e:	f365 0c0f 	bfi	ip, r5, #0, #16
    2b22:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
    2b26:	3702      	adds	r7, #2
    2b28:	f363 4c1f 	bfi	ip, r3, #16, #16
    2b2c:	42bc      	cmp	r4, r7
    2b2e:	f8c1 c00c 	str.w	ip, [r1, #12]
    2b32:	f101 0110 	add.w	r1, r1, #16
    2b36:	d8c9      	bhi.n	2acc <matrix_test+0xdd0>
    2b38:	9c05      	ldr	r4, [sp, #20]
    2b3a:	9b06      	ldr	r3, [sp, #24]
    2b3c:	9902      	ldr	r1, [sp, #8]
    2b3e:	9e03      	ldr	r6, [sp, #12]
    2b40:	42b1      	cmp	r1, r6
    2b42:	440b      	add	r3, r1
    2b44:	d01a      	beq.n	2b7c <matrix_test+0xe80>
    2b46:	eb0a 0803 	add.w	r8, sl, r3
        for (j=0; j<N; j++) {
    2b4a:	1c59      	adds	r1, r3, #1
            A[i*N+j] += val;
    2b4c:	f830 5018 	ldrh.w	r5, [r0, r8, lsl #1]
        for (j=0; j<N; j++) {
    2b50:	428c      	cmp	r4, r1
            A[i*N+j] += val;
    2b52:	eba5 0702 	sub.w	r7, r5, r2
    2b56:	f820 7018 	strh.w	r7, [r0, r8, lsl #1]
        for (j=0; j<N; j++) {
    2b5a:	d90f      	bls.n	2b7c <matrix_test+0xe80>
            A[i*N+j] += val;
    2b5c:	4451      	add	r1, sl
        for (j=0; j<N; j++) {
    2b5e:	3302      	adds	r3, #2
            A[i*N+j] += val;
    2b60:	f830 6011 	ldrh.w	r6, [r0, r1, lsl #1]
        for (j=0; j<N; j++) {
    2b64:	429c      	cmp	r4, r3
            A[i*N+j] += val;
    2b66:	eba6 0502 	sub.w	r5, r6, r2
    2b6a:	f820 5011 	strh.w	r5, [r0, r1, lsl #1]
        for (j=0; j<N; j++) {
    2b6e:	d905      	bls.n	2b7c <matrix_test+0xe80>
            A[i*N+j] += val;
    2b70:	4453      	add	r3, sl
    2b72:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
    2b76:	1a8f      	subs	r7, r1, r2
    2b78:	f820 7013 	strh.w	r7, [r0, r3, lsl #1]
    for (i=0; i<N; i++) {
    2b7c:	f109 0901 	add.w	r9, r9, #1
    2b80:	9b04      	ldr	r3, [sp, #16]
    2b82:	45a1      	cmp	r9, r4
    2b84:	449b      	add	fp, r3
    2b86:	44a2      	add	sl, r4
    2b88:	d02a      	beq.n	2be0 <matrix_test+0xee4>
    2b8a:	ea4f 075b 	mov.w	r7, fp, lsr #1
    2b8e:	427b      	negs	r3, r7
    2b90:	f003 0303 	and.w	r3, r3, #3
    2b94:	42a3      	cmp	r3, r4
    2b96:	bf28      	it	cs
    2b98:	4623      	movcs	r3, r4
    2b9a:	2c04      	cmp	r4, #4
    2b9c:	f67f af1a 	bls.w	29d4 <matrix_test+0xcd8>
    matrix_add_const(N,A,-val); /* return matrix to initial value */
    2ba0:	4619      	mov	r1, r3
    2ba2:	2b00      	cmp	r3, #0
    2ba4:	f43f af3a 	beq.w	2a1c <matrix_test+0xd20>
            A[i*N+j] += val;
    2ba8:	f8bb 5000 	ldrh.w	r5, [fp]
    2bac:	2901      	cmp	r1, #1
    2bae:	eba5 0602 	sub.w	r6, r5, r2
    2bb2:	f8ab 6000 	strh.w	r6, [fp]
    2bb6:	f47f af16 	bne.w	29e6 <matrix_test+0xcea>
        for (j=0; j<N; j++) {
    2bba:	460b      	mov	r3, r1
    2bbc:	e72b      	b.n	2a16 <matrix_test+0xd1a>
    crc=crc16(matrix_sum(N,C,clipval),crc);
    2bbe:	4601      	mov	r1, r0
    2bc0:	4604      	mov	r4, r0
    2bc2:	f000 fedb 	bl	397c <crc16>
    crc=crc16(matrix_sum(N,C,clipval),crc);
    2bc6:	4601      	mov	r1, r0
    2bc8:	4620      	mov	r0, r4
    2bca:	f000 fed7 	bl	397c <crc16>
    crc=crc16(matrix_sum(N,C,clipval),crc);
    2bce:	4601      	mov	r1, r0
    2bd0:	4620      	mov	r0, r4
    2bd2:	f000 fed3 	bl	397c <crc16>
    crc=crc16(matrix_sum(N,C,clipval),crc);
    2bd6:	4601      	mov	r1, r0
    2bd8:	4620      	mov	r0, r4
    2bda:	f000 fecf 	bl	397c <crc16>
    2bde:	9008      	str	r0, [sp, #32]
    return crc;
    2be0:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
}
    2be4:	b011      	add	sp, #68	; 0x44
    2be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bea:	bf00      	nop

00002bec <core_bench_matrix>:
ee_u16 core_bench_matrix(mat_params *p, ee_s16 seed, ee_u16 crc) {
    2bec:	b530      	push	{r4, r5, lr}
    2bee:	4614      	mov	r4, r2
    crc=crc16(matrix_test(N,C,A,B,val),crc);
    2bf0:	c82d      	ldmia	r0, {r0, r2, r3, r5}
ee_u16 core_bench_matrix(mat_params *p, ee_s16 seed, ee_u16 crc) {
    2bf2:	b083      	sub	sp, #12
    crc=crc16(matrix_test(N,C,A,B,val),crc);
    2bf4:	9100      	str	r1, [sp, #0]
    2bf6:	4629      	mov	r1, r5
    2bf8:	f7ff f880 	bl	1cfc <matrix_test>
    2bfc:	4621      	mov	r1, r4
}
    2bfe:	b003      	add	sp, #12
    2c00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    crc=crc16(matrix_test(N,C,A,B,val),crc);
    2c04:	f000 beba 	b.w	397c <crc16>

00002c08 <core_init_matrix>:
ee_u32 core_init_matrix(ee_u32 blksize, void *memblk, ee_s32 seed, mat_params *p) {
    2c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c0c:	b087      	sub	sp, #28
        seed=1;
    2c0e:	2a00      	cmp	r2, #0
    2c10:	bf08      	it	eq
    2c12:	2201      	moveq	r2, #1
ee_u32 core_init_matrix(ee_u32 blksize, void *memblk, ee_s32 seed, mat_params *p) {
    2c14:	9305      	str	r3, [sp, #20]
    while (j<blksize) {
    2c16:	2800      	cmp	r0, #0
    2c18:	f000 810c 	beq.w	2e34 <core_init_matrix+0x22c>
    2c1c:	4684      	mov	ip, r0
    2c1e:	2000      	movs	r0, #0
    2c20:	e000      	b.n	2c24 <core_init_matrix+0x1c>
        i++;
    2c22:	4630      	mov	r0, r6
    2c24:	1c46      	adds	r6, r0, #1
        j=i*i*2*4;
    2c26:	fb06 f706 	mul.w	r7, r6, r6
    while (j<blksize) {
    2c2a:	ebbc 0fc7 	cmp.w	ip, r7, lsl #3
    2c2e:	d8f8      	bhi.n	2c22 <core_init_matrix+0x1a>
    A=(MATDAT *)align_mem(memblk);
    2c30:	f101 38ff 	add.w	r8, r1, #4294967295
    2c34:	f028 0403 	bic.w	r4, r8, #3
    2c38:	3404      	adds	r4, #4
    B=A+N*N;
    2c3a:	fb00 f300 	mul.w	r3, r0, r0
    2c3e:	0059      	lsls	r1, r3, #1
    2c40:	4627      	mov	r7, r4
    2c42:	440f      	add	r7, r1
    A=(MATDAT *)align_mem(memblk);
    2c44:	9401      	str	r4, [sp, #4]
    B=A+N*N;
    2c46:	9103      	str	r1, [sp, #12]
    2c48:	9702      	str	r7, [sp, #8]
    2c4a:	9004      	str	r0, [sp, #16]
    for (i=0; i<N; i++) {
    2c4c:	2800      	cmp	r0, #0
    2c4e:	f000 80de 	beq.w	2e0e <core_init_matrix+0x206>
    N=i-1;
    2c52:	2400      	movs	r4, #0
    2c54:	9400      	str	r4, [sp, #0]
    2c56:	2601      	movs	r6, #1
            seed = ( ( order * seed ) % 65536 );
    2c58:	fb06 f202 	mul.w	r2, r6, r2
    2c5c:	f1d2 0900 	rsbs	r9, r2, #0
    2c60:	fa1f f389 	uxth.w	r3, r9
    2c64:	9f00      	ldr	r7, [sp, #0]
    2c66:	9901      	ldr	r1, [sp, #4]
            val = (seed + order);
    2c68:	fa1f fa86 	uxth.w	sl, r6
            seed = ( ( order * seed ) % 65536 );
    2c6c:	b292      	uxth	r2, r2
    2c6e:	bf58      	it	pl
    2c70:	425a      	negpl	r2, r3
            val = (seed + order);
    2c72:	eb0a 0502 	add.w	r5, sl, r2
    2c76:	fb00 f707 	mul.w	r7, r0, r7
    2c7a:	9b02      	ldr	r3, [sp, #8]
    2c7c:	fa1f fe85 	uxth.w	lr, r5
    2c80:	007c      	lsls	r4, r7, #1
    2c82:	191d      	adds	r5, r3, r4
        for (j=0; j<N; j++) {
    2c84:	f04f 0b01 	mov.w	fp, #1
            B[i*N+j] = val;
    2c88:	f823 e017 	strh.w	lr, [r3, r7, lsl #1]
            val =  (val + order);
    2c8c:	44f2      	add	sl, lr
            A[i*N+j] = val;
    2c8e:	9b01      	ldr	r3, [sp, #4]
    2c90:	440c      	add	r4, r1
    2c92:	f100 38ff 	add.w	r8, r0, #4294967295
            val=matrix_clip(val,1);
    2c96:	fa5f fc8a 	uxtb.w	ip, sl
        for (j=0; j<N; j++) {
    2c9a:	4583      	cmp	fp, r0
    2c9c:	f008 0103 	and.w	r1, r8, #3
            order++;
    2ca0:	445e      	add	r6, fp
            A[i*N+j] = val;
    2ca2:	f823 c017 	strh.w	ip, [r3, r7, lsl #1]
    2ca6:	f105 0902 	add.w	r9, r5, #2
    2caa:	f104 0802 	add.w	r8, r4, #2
        for (j=0; j<N; j++) {
    2cae:	f080 80a7 	bcs.w	2e00 <core_init_matrix+0x1f8>
    2cb2:	2900      	cmp	r1, #0
    2cb4:	d045      	beq.n	2d42 <core_init_matrix+0x13a>
    2cb6:	2901      	cmp	r1, #1
    2cb8:	d02c      	beq.n	2d14 <core_init_matrix+0x10c>
    2cba:	2902      	cmp	r1, #2
    2cbc:	d016      	beq.n	2cec <core_init_matrix+0xe4>
            seed = ( ( order * seed ) % 65536 );
    2cbe:	fb06 f202 	mul.w	r2, r6, r2
    2cc2:	4257      	negs	r7, r2
    2cc4:	b2b9      	uxth	r1, r7
            val = (seed + order);
    2cc6:	b2b3      	uxth	r3, r6
            seed = ( ( order * seed ) % 65536 );
    2cc8:	b292      	uxth	r2, r2
    2cca:	bf58      	it	pl
    2ccc:	424a      	negpl	r2, r1
            val = (seed + order);
    2cce:	189f      	adds	r7, r3, r2
    2cd0:	fa1f fb87 	uxth.w	fp, r7
            val =  (val + order);
    2cd4:	445b      	add	r3, fp
            val=matrix_clip(val,1);
    2cd6:	b2d9      	uxtb	r1, r3
            B[i*N+j] = val;
    2cd8:	f8a5 b002 	strh.w	fp, [r5, #2]
    2cdc:	f109 0902 	add.w	r9, r9, #2
    2ce0:	f108 0802 	add.w	r8, r8, #2
            order++;
    2ce4:	3601      	adds	r6, #1
        for (j=0; j<N; j++) {
    2ce6:	f04f 0b02 	mov.w	fp, #2
            A[i*N+j] = val;
    2cea:	8061      	strh	r1, [r4, #2]
            seed = ( ( order * seed ) % 65536 );
    2cec:	fb06 f202 	mul.w	r2, r6, r2
    2cf0:	4254      	negs	r4, r2
    2cf2:	b2a5      	uxth	r5, r4
            val = (seed + order);
    2cf4:	b2b3      	uxth	r3, r6
            seed = ( ( order * seed ) % 65536 );
    2cf6:	b292      	uxth	r2, r2
    2cf8:	bf58      	it	pl
    2cfa:	426a      	negpl	r2, r5
            val = (seed + order);
    2cfc:	189f      	adds	r7, r3, r2
    2cfe:	fa1f fa87 	uxth.w	sl, r7
            val =  (val + order);
    2d02:	4453      	add	r3, sl
            val=matrix_clip(val,1);
    2d04:	b2d9      	uxtb	r1, r3
            B[i*N+j] = val;
    2d06:	f829 ab02 	strh.w	sl, [r9], #2
            A[i*N+j] = val;
    2d0a:	f828 1b02 	strh.w	r1, [r8], #2
        for (j=0; j<N; j++) {
    2d0e:	f10b 0b01 	add.w	fp, fp, #1
            order++;
    2d12:	3601      	adds	r6, #1
            seed = ( ( order * seed ) % 65536 );
    2d14:	fb06 f202 	mul.w	r2, r6, r2
    2d18:	4254      	negs	r4, r2
    2d1a:	b2a5      	uxth	r5, r4
            val = (seed + order);
    2d1c:	b2b3      	uxth	r3, r6
            seed = ( ( order * seed ) % 65536 );
    2d1e:	b292      	uxth	r2, r2
    2d20:	bf58      	it	pl
    2d22:	426a      	negpl	r2, r5
            val = (seed + order);
    2d24:	189f      	adds	r7, r3, r2
    2d26:	fa1f fc87 	uxth.w	ip, r7
            val =  (val + order);
    2d2a:	4463      	add	r3, ip
        for (j=0; j<N; j++) {
    2d2c:	f10b 0b01 	add.w	fp, fp, #1
            val=matrix_clip(val,1);
    2d30:	b2d9      	uxtb	r1, r3
        for (j=0; j<N; j++) {
    2d32:	4583      	cmp	fp, r0
            B[i*N+j] = val;
    2d34:	f829 cb02 	strh.w	ip, [r9], #2
            order++;
    2d38:	f106 0601 	add.w	r6, r6, #1
            A[i*N+j] = val;
    2d3c:	f828 1b02 	strh.w	r1, [r8], #2
        for (j=0; j<N; j++) {
    2d40:	d25e      	bcs.n	2e00 <core_init_matrix+0x1f8>
            seed = ( ( order * seed ) % 65536 );
    2d42:	fb06 f202 	mul.w	r2, r6, r2
    2d46:	4254      	negs	r4, r2
    2d48:	b2a5      	uxth	r5, r4
    2d4a:	fa1f fe82 	uxth.w	lr, r2
            order++;
    2d4e:	f106 0401 	add.w	r4, r6, #1
            seed = ( ( order * seed ) % 65536 );
    2d52:	bf58      	it	pl
    2d54:	f1c5 0e00 	rsbpl	lr, r5, #0
    2d58:	fb04 f20e 	mul.w	r2, r4, lr
    2d5c:	f1d2 0a00 	rsbs	sl, r2, #0
    2d60:	fa1f f38a 	uxth.w	r3, sl
    2d64:	b291      	uxth	r1, r2
            order++;
    2d66:	f106 0702 	add.w	r7, r6, #2
            seed = ( ( order * seed ) % 65536 );
    2d6a:	bf58      	it	pl
    2d6c:	4259      	negpl	r1, r3
    2d6e:	fb07 f501 	mul.w	r5, r7, r1
    2d72:	f1d5 0c00 	rsbs	ip, r5, #0
    2d76:	fa1f f28c 	uxth.w	r2, ip
    2d7a:	b2ab      	uxth	r3, r5
    2d7c:	bf58      	it	pl
    2d7e:	4253      	negpl	r3, r2
            order++;
    2d80:	1cf5      	adds	r5, r6, #3
            seed = ( ( order * seed ) % 65536 );
    2d82:	fb05 f203 	mul.w	r2, r5, r3
    2d86:	f1d2 0a00 	rsbs	sl, r2, #0
            val = (seed + order);
    2d8a:	fa1f fc86 	uxth.w	ip, r6
            seed = ( ( order * seed ) % 65536 );
    2d8e:	fa1f fa8a 	uxth.w	sl, sl
            val = (seed + order);
    2d92:	44e6      	add	lr, ip
            seed = ( ( order * seed ) % 65536 );
    2d94:	b292      	uxth	r2, r2
    2d96:	bf58      	it	pl
    2d98:	f1ca 0200 	rsbpl	r2, sl, #0
            B[i*N+j] = val;
    2d9c:	46ca      	mov	sl, r9
            val = (seed + order);
    2d9e:	fa1f fe8e 	uxth.w	lr, lr
            B[i*N+j] = val;
    2da2:	f82a eb02 	strh.w	lr, [sl], #2
            val =  (val + order);
    2da6:	44f4      	add	ip, lr
            A[i*N+j] = val;
    2da8:	46c6      	mov	lr, r8
            val = (seed + order);
    2daa:	b2a4      	uxth	r4, r4
    2dac:	b2bf      	uxth	r7, r7
    2dae:	b2ad      	uxth	r5, r5
            val=matrix_clip(val,1);
    2db0:	fa5f fc8c 	uxtb.w	ip, ip
            A[i*N+j] = val;
    2db4:	f82e cb02 	strh.w	ip, [lr], #2
            val = (seed + order);
    2db8:	4421      	add	r1, r4
    2dba:	443b      	add	r3, r7
    2dbc:	eb05 0c02 	add.w	ip, r5, r2
    2dc0:	b289      	uxth	r1, r1
    2dc2:	b29b      	uxth	r3, r3
    2dc4:	fa1f fc8c 	uxth.w	ip, ip
            val =  (val + order);
    2dc8:	440c      	add	r4, r1
    2dca:	441f      	add	r7, r3
    2dcc:	4465      	add	r5, ip
        for (j=0; j<N; j++) {
    2dce:	f10b 0b04 	add.w	fp, fp, #4
            val=matrix_clip(val,1);
    2dd2:	b2e4      	uxtb	r4, r4
    2dd4:	b2ff      	uxtb	r7, r7
    2dd6:	b2ed      	uxtb	r5, r5
        for (j=0; j<N; j++) {
    2dd8:	4583      	cmp	fp, r0
            B[i*N+j] = val;
    2dda:	f8a9 1002 	strh.w	r1, [r9, #2]
            order++;
    2dde:	f106 0604 	add.w	r6, r6, #4
            A[i*N+j] = val;
    2de2:	f8a8 4002 	strh.w	r4, [r8, #2]
    2de6:	f109 0908 	add.w	r9, r9, #8
            B[i*N+j] = val;
    2dea:	f8aa 3002 	strh.w	r3, [sl, #2]
    2dee:	f108 0808 	add.w	r8, r8, #8
            A[i*N+j] = val;
    2df2:	f8ae 7002 	strh.w	r7, [lr, #2]
            B[i*N+j] = val;
    2df6:	f829 cc02 	strh.w	ip, [r9, #-2]
            A[i*N+j] = val;
    2dfa:	f828 5c02 	strh.w	r5, [r8, #-2]
        for (j=0; j<N; j++) {
    2dfe:	d3a0      	bcc.n	2d42 <core_init_matrix+0x13a>
    for (i=0; i<N; i++) {
    2e00:	9900      	ldr	r1, [sp, #0]
    2e02:	3101      	adds	r1, #1
    2e04:	4281      	cmp	r1, r0
    2e06:	9100      	str	r1, [sp, #0]
    2e08:	f4ff af26 	bcc.w	2c58 <core_init_matrix+0x50>
    2e0c:	9903      	ldr	r1, [sp, #12]
    p->C=(MATRES *)align_mem(B+N*N);
    2e0e:	9e02      	ldr	r6, [sp, #8]
    p->A=A;
    2e10:	9c01      	ldr	r4, [sp, #4]
    p->N=N;
    2e12:	9d04      	ldr	r5, [sp, #16]
    p->C=(MATRES *)align_mem(B+N*N);
    2e14:	4431      	add	r1, r6
    2e16:	1e4a      	subs	r2, r1, #1
    2e18:	f022 0303 	bic.w	r3, r2, #3
    2e1c:	9a05      	ldr	r2, [sp, #20]
    2e1e:	4690      	mov	r8, r2
    p->B=B;
    2e20:	46c2      	mov	sl, r8
    p->C=(MATRES *)align_mem(B+N*N);
    2e22:	3304      	adds	r3, #4
    2e24:	60d3      	str	r3, [r2, #12]
    p->A=A;
    2e26:	6054      	str	r4, [r2, #4]
    p->B=B;
    2e28:	f8ca 6008 	str.w	r6, [sl, #8]
    p->N=N;
    2e2c:	6015      	str	r5, [r2, #0]
}
    2e2e:	b007      	add	sp, #28
    2e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    A=(MATDAT *)align_mem(memblk);
    2e34:	1e4b      	subs	r3, r1, #1
    2e36:	f023 0403 	bic.w	r4, r3, #3
    2e3a:	1d20      	adds	r0, r4, #4
    B=A+N*N;
    2e3c:	f04f 31ff 	mov.w	r1, #4294967295
    2e40:	3406      	adds	r4, #6
    2e42:	2502      	movs	r5, #2
    A=(MATDAT *)align_mem(memblk);
    2e44:	9001      	str	r0, [sp, #4]
    B=A+N*N;
    2e46:	9104      	str	r1, [sp, #16]
    2e48:	9402      	str	r4, [sp, #8]
    N=i-1;
    2e4a:	4608      	mov	r0, r1
    B=A+N*N;
    2e4c:	9503      	str	r5, [sp, #12]
    2e4e:	e700      	b.n	2c52 <core_init_matrix+0x4a>

00002e50 <start_time>:
    This function will be called right before starting the timed portion of the benchmark.

    Implementation may be capturing a system timer (as implemented in the example code)
    or zeroing some system parameters - e.g. setting the cpu clocks cycles to 0.
*/
void start_time(void) {
    2e50:	b508      	push	{r3, lr}
    am_hal_systick_load(0x00FFFFFF);
    2e52:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    2e56:	f002 fc33 	bl	56c0 <am_hal_systick_load>
    am_hal_systick_int_enable();
    2e5a:	f002 fc29 	bl	56b0 <am_hal_systick_int_enable>
    am_hal_systick_start();
    2e5e:	f002 fc17 	bl	5690 <am_hal_systick_start>
    start_time_val = GETMYTIME;
    2e62:	f002 fc33 	bl	56cc <am_hal_systick_count>
    2e66:	4b04      	ldr	r3, [pc, #16]	; (2e78 <start_time+0x28>)
    2e68:	4904      	ldr	r1, [pc, #16]	; (2e7c <start_time+0x2c>)
    2e6a:	681b      	ldr	r3, [r3, #0]
    START_PA_DUMP = 0x1;
    2e6c:	4a04      	ldr	r2, [pc, #16]	; (2e80 <start_time+0x30>)
    start_time_val = GETMYTIME;
    2e6e:	4418      	add	r0, r3
    START_PA_DUMP = 0x1;
    2e70:	2301      	movs	r3, #1
    start_time_val = GETMYTIME;
    2e72:	6008      	str	r0, [r1, #0]
    START_PA_DUMP = 0x1;
    2e74:	6013      	str	r3, [r2, #0]
    2e76:	bd08      	pop	{r3, pc}
    2e78:	10001048 	.word	0x10001048
    2e7c:	1000105c 	.word	0x1000105c
    2e80:	4ffff014 	.word	0x4ffff014

00002e84 <stop_time>:
    This function will be called right after ending the timed portion of the benchmark.

    Implementation may be capturing a system timer (as implemented in the example code)
    or other system parameters - e.g. reading the current value of cpu cycles counter.
*/
void stop_time(void) {
    2e84:	b508      	push	{r3, lr}
    am_hal_systick_stop();
    2e86:	f002 fc0b 	bl	56a0 <am_hal_systick_stop>
    stop_time_val = GETMYTIME;
    2e8a:	f002 fc1f 	bl	56cc <am_hal_systick_count>
    2e8e:	4b04      	ldr	r3, [pc, #16]	; (2ea0 <stop_time+0x1c>)
    2e90:	4904      	ldr	r1, [pc, #16]	; (2ea4 <stop_time+0x20>)
    2e92:	681b      	ldr	r3, [r3, #0]
    START_PA_DUMP = 0x0;
    2e94:	4a04      	ldr	r2, [pc, #16]	; (2ea8 <stop_time+0x24>)
    stop_time_val = GETMYTIME;
    2e96:	4418      	add	r0, r3
    START_PA_DUMP = 0x0;
    2e98:	2300      	movs	r3, #0
    stop_time_val = GETMYTIME;
    2e9a:	6008      	str	r0, [r1, #0]
    START_PA_DUMP = 0x0;
    2e9c:	6013      	str	r3, [r2, #0]
    2e9e:	bd08      	pop	{r3, pc}
    2ea0:	10001048 	.word	0x10001048
    2ea4:	10001060 	.word	0x10001060
    2ea8:	4ffff014 	.word	0x4ffff014

00002eac <get_time>:
    This methodology is taken to accomodate any hardware or simulated platform.
    The sample implementation returns millisecs by default,
    and the resolution is controlled by <TIMER_RES_DIVIDER>
*/
CORE_TICKS get_time(void) {
    CORE_TICKS elapsed=(CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
    2eac:	4a02      	ldr	r2, [pc, #8]	; (2eb8 <get_time+0xc>)
    2eae:	4b03      	ldr	r3, [pc, #12]	; (2ebc <get_time+0x10>)
    2eb0:	6810      	ldr	r0, [r2, #0]
    2eb2:	6819      	ldr	r1, [r3, #0]
    return elapsed;
}
    2eb4:	1a40      	subs	r0, r0, r1
    2eb6:	4770      	bx	lr
    2eb8:	10001060 	.word	0x10001060
    2ebc:	1000105c 	.word	0x1000105c

00002ec0 <time_in_secs>:
    Convert the value returned by get_time to seconds.

    The <secs_ret> type is used to accomodate systems with no support for floating point.
    Default implementation implemented by the EE_TICKS_PER_SEC macro above.
*/
secs_ret time_in_secs(CORE_TICKS ticks) {
    2ec0:	b508      	push	{r3, lr}
    secs_ret retval=((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
    2ec2:	f7fd fa3f 	bl	344 <__aeabi_ui2d>
    2ec6:	a304      	add	r3, pc, #16	; (adr r3, 2ed8 <time_in_secs+0x18>)
    2ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
    2ecc:	f7fd fbda 	bl	684 <__aeabi_ddiv>
    return retval;
}
    2ed0:	bd08      	pop	{r3, pc}
    2ed2:	bf00      	nop
    2ed4:	f3af 8000 	nop.w
    2ed8:	00000000 	.word	0x00000000
    2edc:	4186e360 	.word	0x4186e360

00002ee0 <uart_init>:
// Initialize the UART
//
//*****************************************************************************
void
uart_init(uint32_t ui32UartModule)
{
    2ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2ee4:	b082      	sub	sp, #8
    2ee6:	4604      	mov	r4, r0
    //
    // Make sure the UART RX and TX pins are enabled.
    //
    am_bsp_pin_enable(COM_UART_TX);
    2ee8:	f002 f9c0 	bl	526c <am_hal_interrupt_master_disable>
    2eec:	4d27      	ldr	r5, [pc, #156]	; (2f8c <uart_init+0xac>)
    2eee:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 2f9c <uart_init+0xbc>
    2ef2:	9000      	str	r0, [sp, #0]
    2ef4:	f04f 0a73 	mov.w	sl, #115	; 0x73
    2ef8:	f8c5 a000 	str.w	sl, [r5]
    2efc:	f8d8 3000 	ldr.w	r3, [r8]
    2f00:	4f23      	ldr	r7, [pc, #140]	; (2f90 <uart_init+0xb0>)
    2f02:	4e24      	ldr	r6, [pc, #144]	; (2f94 <uart_init+0xb4>)
    2f04:	f023 60e0 	bic.w	r0, r3, #117440512	; 0x7000000
    2f08:	f8c8 0000 	str.w	r0, [r8]
    2f0c:	6839      	ldr	r1, [r7, #0]
    2f0e:	f421 027f 	bic.w	r2, r1, #16711680	; 0xff0000
    2f12:	603a      	str	r2, [r7, #0]
    2f14:	6833      	ldr	r3, [r6, #0]
    2f16:	f04f 0900 	mov.w	r9, #0
    2f1a:	f423 007f 	bic.w	r0, r3, #16711680	; 0xff0000
    2f1e:	6030      	str	r0, [r6, #0]
    2f20:	f8c5 9000 	str.w	r9, [r5]
    2f24:	9800      	ldr	r0, [sp, #0]
    2f26:	f002 f9a5 	bl	5274 <am_hal_interrupt_master_set>
    am_bsp_pin_enable(COM_UART_RX);
    2f2a:	f002 f99f 	bl	526c <am_hal_interrupt_master_disable>
    2f2e:	9001      	str	r0, [sp, #4]
    2f30:	f8c5 a000 	str.w	sl, [r5]
    2f34:	f8d8 1000 	ldr.w	r1, [r8]
    2f38:	f021 42e0 	bic.w	r2, r1, #1879048192	; 0x70000000
    2f3c:	f8c8 2000 	str.w	r2, [r8]
    2f40:	683b      	ldr	r3, [r7, #0]
    2f42:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
    2f46:	f040 7100 	orr.w	r1, r0, #33554432	; 0x2000000
    2f4a:	6039      	str	r1, [r7, #0]
    2f4c:	6837      	ldr	r7, [r6, #0]
    2f4e:	f027 427f 	bic.w	r2, r7, #4278190080	; 0xff000000
    2f52:	6032      	str	r2, [r6, #0]
    2f54:	f8c5 9000 	str.w	r9, [r5]
    2f58:	9801      	ldr	r0, [sp, #4]
    2f5a:	f002 f98b 	bl	5274 <am_hal_interrupt_master_set>

    //
    // Power on the selected UART
    //
    am_hal_uart_pwrctrl_enable(ui32UartModule);
    2f5e:	4620      	mov	r0, r4
    2f60:	f002 fc1c 	bl	579c <am_hal_uart_pwrctrl_enable>

    //
    // Start the UART interface, apply the desired configuration settings, and
    // enable the FIFOs.
    //
    am_hal_uart_clock_enable(ui32UartModule);
    2f64:	4620      	mov	r0, r4
    2f66:	f002 fc41 	bl	57ec <am_hal_uart_clock_enable>

    //
    // Disable the UART before configuring it.
    //
    am_hal_uart_disable(ui32UartModule);
    2f6a:	4620      	mov	r0, r4
    2f6c:	f002 fc00 	bl	5770 <am_hal_uart_disable>

    //
    // Configure the UART.
    //
    am_hal_uart_config(ui32UartModule, &g_sUartConfig);
    2f70:	4620      	mov	r0, r4
    2f72:	4909      	ldr	r1, [pc, #36]	; (2f98 <uart_init+0xb8>)
    2f74:	f002 fbb0 	bl	56d8 <am_hal_uart_config>

    //
    // Enable the UART FIFO.
    //
    am_hal_uart_fifo_config(ui32UartModule, AM_HAL_UART_TX_FIFO_1_2 | AM_HAL_UART_RX_FIFO_1_2);
    2f78:	4620      	mov	r0, r4
    2f7a:	2112      	movs	r1, #18
    2f7c:	f002 fc54 	bl	5828 <am_hal_uart_fifo_config>

    //
    // Enable the UART.
    //
    am_hal_uart_enable(ui32UartModule);
    2f80:	4620      	mov	r0, r4
    2f82:	f002 fbdf 	bl	5744 <am_hal_uart_enable>
}
    2f86:	b002      	add	sp, #8
    2f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2f8c:	40010060 	.word	0x40010060
    2f90:	40010014 	.word	0x40010014
    2f94:	400100f4 	.word	0x400100f4
    2f98:	10001004 	.word	0x10001004
    2f9c:	40010048 	.word	0x40010048

00002fa0 <uart_disable>:
// Disable the UART
//
//*****************************************************************************
void
uart_disable(uint32_t ui32UartModule)
{
    2fa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2fa4:	4604      	mov	r4, r0
    2fa6:	b083      	sub	sp, #12
    //
    // Before disabling the UART, wait a little time to be sure all
    // printing has completed.
    //
    am_util_delay_ms(10);
    2fa8:	200a      	movs	r0, #10
    2faa:	f000 fdbb 	bl	3b24 <am_util_delay_ms>

    //
    // Disable and power down the UART.
    //
    am_hal_uart_disable(ui32UartModule);
    2fae:	4620      	mov	r0, r4
    2fb0:	f002 fbde 	bl	5770 <am_hal_uart_disable>
    am_hal_uart_pwrctrl_disable(ui32UartModule);
    2fb4:	4620      	mov	r0, r4
    2fb6:	f002 fc05 	bl	57c4 <am_hal_uart_pwrctrl_disable>

    //
    // Turn off UART clock.
    // Note - this is automatically handled in hardware on Apollo2.
    //
    am_hal_uart_clock_disable(ui32UartModule);
    2fba:	4620      	mov	r0, r4
    2fbc:	f002 fc28 	bl	5810 <am_hal_uart_clock_disable>

    //
    // Disable the UART pins.
    //
    am_bsp_pin_disable(COM_UART_TX);
    2fc0:	f002 f954 	bl	526c <am_hal_interrupt_master_disable>
    2fc4:	4c1c      	ldr	r4, [pc, #112]	; (3038 <uart_disable+0x98>)
    2fc6:	4f1d      	ldr	r7, [pc, #116]	; (303c <uart_disable+0x9c>)
    2fc8:	9000      	str	r0, [sp, #0]
    2fca:	f04f 0873 	mov.w	r8, #115	; 0x73
    2fce:	f8c4 8000 	str.w	r8, [r4]
    2fd2:	683b      	ldr	r3, [r7, #0]
    2fd4:	4e1a      	ldr	r6, [pc, #104]	; (3040 <uart_disable+0xa0>)
    2fd6:	4d1b      	ldr	r5, [pc, #108]	; (3044 <uart_disable+0xa4>)
    2fd8:	f023 60e0 	bic.w	r0, r3, #117440512	; 0x7000000
    2fdc:	6038      	str	r0, [r7, #0]
    2fde:	6831      	ldr	r1, [r6, #0]
    2fe0:	f421 027f 	bic.w	r2, r1, #16711680	; 0xff0000
    2fe4:	f442 13c0 	orr.w	r3, r2, #1572864	; 0x180000
    2fe8:	6033      	str	r3, [r6, #0]
    2fea:	6828      	ldr	r0, [r5, #0]
    2fec:	f04f 0900 	mov.w	r9, #0
    2ff0:	f420 017f 	bic.w	r1, r0, #16711680	; 0xff0000
    2ff4:	6029      	str	r1, [r5, #0]
    2ff6:	f8c4 9000 	str.w	r9, [r4]
    2ffa:	9800      	ldr	r0, [sp, #0]
    2ffc:	f002 f93a 	bl	5274 <am_hal_interrupt_master_set>
    am_bsp_pin_disable(COM_UART_RX);
    3000:	f002 f934 	bl	526c <am_hal_interrupt_master_disable>
    3004:	9001      	str	r0, [sp, #4]
    3006:	f8c4 8000 	str.w	r8, [r4]
    300a:	683a      	ldr	r2, [r7, #0]
    300c:	f022 43e0 	bic.w	r3, r2, #1879048192	; 0x70000000
    3010:	603b      	str	r3, [r7, #0]
    3012:	6837      	ldr	r7, [r6, #0]
    3014:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    3018:	f040 51c0 	orr.w	r1, r0, #402653184	; 0x18000000
    301c:	6031      	str	r1, [r6, #0]
    301e:	682e      	ldr	r6, [r5, #0]
    3020:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    3024:	602a      	str	r2, [r5, #0]
    3026:	f8c4 9000 	str.w	r9, [r4]
    302a:	9801      	ldr	r0, [sp, #4]
    302c:	f002 f922 	bl	5274 <am_hal_interrupt_master_set>
}
    3030:	b003      	add	sp, #12
    3032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3036:	bf00      	nop
    3038:	40010060 	.word	0x40010060
    303c:	40010048 	.word	0x40010048
    3040:	40010014 	.word	0x40010014
    3044:	400100f4 	.word	0x400100f4

00003048 <portable_init>:
    Target specific initialization code
    Test for some common mistakes.
*/

void portable_init(core_portable *p, int *argc, char *argv[])
{
    3048:	b570      	push	{r4, r5, r6, lr}
    304a:	4e1f      	ldr	r6, [pc, #124]	; (30c8 <portable_init+0x80>)
        ee_printf("ERROR! Please define ee_ptr_int to a type that holds a pointer!\n");
    }
    if (sizeof(ee_u32) != 4) {
        ee_printf("ERROR! Please define ee_u32 to a 32b unsigned type!\n");
    }
    p->portable_id=1;
    304c:	2501      	movs	r5, #1
    304e:	2100      	movs	r1, #0
    3050:	7005      	strb	r5, [r0, #0]
    3052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3056:	4630      	mov	r0, r6
    3058:	f002 fc0a 	bl	5870 <memset>
    for(i = 0; i < PRTBUFSIZE; i++)
    {
        am_prtbuf[i] = 0x00;
    }
    am_pcBuf = am_prtbuf;
    am_bufcnt = 0;
    305c:	2400      	movs	r4, #0
    am_pcBuf = am_prtbuf;
    305e:	4a1b      	ldr	r2, [pc, #108]	; (30cc <portable_init+0x84>)
    am_bufcnt = 0;
    3060:	4b1b      	ldr	r3, [pc, #108]	; (30d0 <portable_init+0x88>)
    am_pcBuf = am_prtbuf;
    3062:	6016      	str	r6, [r2, #0]
#endif // AM_PRINT_RESULTS

    //
    // Set the system clock to maximum frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
    3064:	4620      	mov	r0, r4
    am_bufcnt = 0;
    3066:	601c      	str	r4, [r3, #0]
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
    3068:	f002 f8a4 	bl	51b4 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
    306c:	4819      	ldr	r0, [pc, #100]	; (30d4 <portable_init+0x8c>)
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_SRAM8K);

    //
    // Switch the RTC off of the XTAL
    //
    AM_BFW(CLKGEN, OCTRL, OSEL, 1);
    306e:	4e1a      	ldr	r6, [pc, #104]	; (30d8 <portable_init+0x90>)
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
    3070:	f002 f80a 	bl	5088 <am_hal_cachectrl_enable>
    am_hal_sysctrl_fpu_enable();
    3074:	f002 faf6 	bl	5664 <am_hal_sysctrl_fpu_enable>
    am_hal_sysctrl_fpu_stacking_enable(true);
    3078:	4628      	mov	r0, r5
    307a:	f002 fafb 	bl	5674 <am_hal_sysctrl_fpu_stacking_enable>
    am_bsp_low_power_init();
    307e:	f001 ffed 	bl	505c <am_bsp_low_power_init>
    am_hal_pwrctrl_bucks_enable();
    3082:	f002 faad 	bl	55e0 <am_hal_pwrctrl_bucks_enable>
    am_hal_pwrctrl_low_power_init();
    3086:	f002 fac7 	bl	5618 <am_hal_pwrctrl_low_power_init>
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_FLASH512K);
    308a:	f44f 6000 	mov.w	r0, #2048	; 0x800
    308e:	f002 f97d 	bl	538c <am_hal_pwrctrl_memory_enable>
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_SRAM8K);
    3092:	4628      	mov	r0, r5
    3094:	f002 f97a 	bl	538c <am_hal_pwrctrl_memory_enable>
    AM_BFW(CLKGEN, OCTRL, OSEL, 1);
    3098:	6835      	ldr	r5, [r6, #0]

    //
    // Turn off the voltage comparator
    //
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    309a:	4910      	ldr	r1, [pc, #64]	; (30dc <portable_init+0x94>)

#if !AM_PRINT_SKIP_BANNER
    //
    // Initialize the printf interface for UART output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t)am_bsp_uart_string_print);
    309c:	4810      	ldr	r0, [pc, #64]	; (30e0 <portable_init+0x98>)
    AM_BFW(CLKGEN, OCTRL, OSEL, 1);
    309e:	f045 0280 	orr.w	r2, r5, #128	; 0x80
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    30a2:	2337      	movs	r3, #55	; 0x37
    AM_BFW(CLKGEN, OCTRL, OSEL, 1);
    30a4:	6032      	str	r2, [r6, #0]
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    30a6:	600b      	str	r3, [r1, #0]
    am_util_stdio_printf_init((am_util_stdio_print_char_t)am_bsp_uart_string_print);
    30a8:	f000 feae 	bl	3e08 <am_util_stdio_printf_init>

    //
    // Initialize the UART
    //
    uart_init(ui32UartModule);
    30ac:	4620      	mov	r0, r4
    30ae:	f7ff ff17 	bl	2ee0 <uart_init>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
    30b2:	f001 ffcd 	bl	5050 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Ambiq Micro Coremark test...\n\n");
    30b6:	480b      	ldr	r0, [pc, #44]	; (30e4 <portable_init+0x9c>)
    30b8:	f001 ffb0 	bl	501c <am_util_stdio_printf>

    //
    // To minimize power during the run, disable the UART.
    //
    uart_disable(ui32UartModule);
    30bc:	4620      	mov	r0, r4
#endif
}
    30be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    uart_disable(ui32UartModule);
    30c2:	f7ff bf6d 	b.w	2fa0 <uart_disable>
    30c6:	bf00      	nop
    30c8:	10001168 	.word	0x10001168
    30cc:	10001568 	.word	0x10001568
    30d0:	1000104c 	.word	0x1000104c
    30d4:	00005e3c 	.word	0x00005e3c
    30d8:	4000400c 	.word	0x4000400c
    30dc:	4000c008 	.word	0x4000c008
    30e0:	00005081 	.word	0x00005081
    30e4:	00005d18 	.word	0x00005d18

000030e8 <portable_fini>:

/* Function : portable_fini
    Target specific final code
*/
void portable_fini(core_portable *p)
{
    30e8:	b538      	push	{r3, r4, r5, lr}
    p->portable_id=0;
    30ea:	2500      	movs	r5, #0
    30ec:	7005      	strb	r5, [r0, #0]
    uint32_t ui32UartModule = AM_BSP_UART_PRINT_INST;

    //
    // Initialize the printf interface for UART output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t)am_bsp_uart_string_print);
    30ee:	481a      	ldr	r0, [pc, #104]	; (3158 <portable_fini+0x70>)
    //
    // Now, let's go parse the buffer and print it out!
    //
    pcBuf = am_prtbuf;
    iCnt = 0;
    while ( (*pcBuf != 0x00)  &&  (iCnt<PRTBUFSIZE) )
    30f0:	4c1a      	ldr	r4, [pc, #104]	; (315c <portable_fini+0x74>)
    am_util_stdio_printf_init((am_util_stdio_print_char_t)am_bsp_uart_string_print);
    30f2:	f000 fe89 	bl	3e08 <am_util_stdio_printf_init>
    uart_init(ui32UartModule);
    30f6:	4628      	mov	r0, r5
    30f8:	f7ff fef2 	bl	2ee0 <uart_init>
    am_util_stdio_terminal_clear();
    30fc:	f001 ffa8 	bl	5050 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("\nAmbiq Micro Coremark run finished!\n\n");
    3100:	4817      	ldr	r0, [pc, #92]	; (3160 <portable_fini+0x78>)
    3102:	f001 ff8b 	bl	501c <am_util_stdio_printf>
    while ( (*pcBuf != 0x00)  &&  (iCnt<PRTBUFSIZE) )
    3106:	7823      	ldrb	r3, [r4, #0]
    3108:	b19b      	cbz	r3, 3132 <portable_fini+0x4a>
    {
        am_util_stdio_printf(pcBuf);
    310a:	4620      	mov	r0, r4
    310c:	f001 ff86 	bl	501c <am_util_stdio_printf>
        while ( *pcBuf != 0x00 )
    3110:	7820      	ldrb	r0, [r4, #0]
    3112:	b1f0      	cbz	r0, 3152 <portable_fini+0x6a>
    3114:	1b2d      	subs	r5, r5, r4
    3116:	1c63      	adds	r3, r4, #1
    3118:	7819      	ldrb	r1, [r3, #0]
        {
            pcBuf++;
    311a:	461c      	mov	r4, r3
    311c:	18ea      	adds	r2, r5, r3
    311e:	3301      	adds	r3, #1
        while ( *pcBuf != 0x00 )
    3120:	2900      	cmp	r1, #0
    3122:	d1f9      	bne.n	3118 <portable_fini+0x30>
    while ( (*pcBuf != 0x00)  &&  (iCnt<PRTBUFSIZE) )
    3124:	7860      	ldrb	r0, [r4, #1]
            iCnt++;
        }
        iCnt++;     // Account for the NULL terminator
    3126:	1c55      	adds	r5, r2, #1
        pcBuf++;    // Point after the NULL terminator to the next string
    3128:	3401      	adds	r4, #1
    while ( (*pcBuf != 0x00)  &&  (iCnt<PRTBUFSIZE) )
    312a:	b110      	cbz	r0, 3132 <portable_fini+0x4a>
    312c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    3130:	dbeb      	blt.n	310a <portable_fini+0x22>
    }

    //
    // Disable the UART.
    //
    uart_disable(ui32UartModule);
    3132:	2000      	movs	r0, #0
    3134:	f7ff ff34 	bl	2fa0 <uart_disable>
#endif // AM_PRINT_RESULTS

    //
    // Enable the LEDs.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
    3138:	2105      	movs	r1, #5
    313a:	480a      	ldr	r0, [pc, #40]	; (3164 <portable_fini+0x7c>)
    313c:	f7fd fc82 	bl	a44 <am_devices_led_array_init>

    //
    // Turn on an LED.
    //
    am_devices_led_on(am_bsp_psLEDs, 0);
    3140:	4808      	ldr	r0, [pc, #32]	; (3164 <portable_fini+0x7c>)
    3142:	2100      	movs	r1, #0
    3144:	f7fd fd5c 	bl	c00 <am_devices_led_on>

#ifdef AM_PART_APOLLO2
    //
    // Re-enable flash and SRAM.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_ALL);
    3148:	4807      	ldr	r0, [pc, #28]	; (3168 <portable_fini+0x80>)
#endif // AM_PART_APOLLO2
}
    314a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_ALL);
    314e:	f002 b91d 	b.w	538c <am_hal_pwrctrl_memory_enable>
        while ( *pcBuf != 0x00 )
    3152:	462a      	mov	r2, r5
    3154:	e7e6      	b.n	3124 <portable_fini+0x3c>
    3156:	bf00      	nop
    3158:	00005081 	.word	0x00005081
    315c:	10001168 	.word	0x10001168
    3160:	00005cf0 	.word	0x00005cf0
    3164:	10001020 	.word	0x10001020
    3168:	a0001fff 	.word	0xa0001fff

0000316c <am_sprintf>:

#if AM_PRINT_RESULTS
int am_sprintf(char *pcFmt, ...)
{
    316c:	b40f      	push	{r0, r1, r2, r3}
    316e:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;
    int iRet = 0;

    va_list pArgs;

    if ( am_bufcnt < PRTBUFSIZE )
    3170:	4c1a      	ldr	r4, [pc, #104]	; (31dc <am_sprintf+0x70>)
    3172:	6823      	ldr	r3, [r4, #0]
    3174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
{
    3178:	b083      	sub	sp, #12
    if ( am_bufcnt < PRTBUFSIZE )
    317a:	d305      	bcc.n	3188 <am_sprintf+0x1c>
    int iRet = 0;
    317c:	2000      	movs	r0, #0
        }
    } // if (am_bufcnt)

    return iRet;

} // am_sprintf()
    317e:	b003      	add	sp, #12
    3180:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    3184:	b004      	add	sp, #16
    3186:	4770      	bx	lr
        ui32NumChars = am_util_stdio_vsprintf(am_pcBuf, pcFmt, pArgs);
    3188:	4d15      	ldr	r5, [pc, #84]	; (31e0 <am_sprintf+0x74>)
    318a:	9906      	ldr	r1, [sp, #24]
    318c:	6828      	ldr	r0, [r5, #0]
        va_start(pArgs, pcFmt);
    318e:	aa07      	add	r2, sp, #28
    3190:	9201      	str	r2, [sp, #4]
        ui32NumChars = am_util_stdio_vsprintf(am_pcBuf, pcFmt, pArgs);
    3192:	f000 fe3f 	bl	3e14 <am_util_stdio_vsprintf>
        if ( (am_bufcnt+ui32NumChars) >= PRTBUFSIZE )
    3196:	6821      	ldr	r1, [r4, #0]
    3198:	4401      	add	r1, r0
    319a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    319e:	d20e      	bcs.n	31be <am_sprintf+0x52>
            am_bufcnt += ui32NumChars;
    31a0:	6822      	ldr	r2, [r4, #0]
            am_pcBuf++;                 // Skip NULL terminator
    31a2:	682b      	ldr	r3, [r5, #0]
            am_bufcnt += ui32NumChars;
    31a4:	4402      	add	r2, r0
    31a6:	6022      	str	r2, [r4, #0]
            am_bufcnt++;                // Include NULL terminator
    31a8:	6822      	ldr	r2, [r4, #0]
            am_pcBuf++;                 // Skip NULL terminator
    31aa:	1c41      	adds	r1, r0, #1
            am_bufcnt++;                // Include NULL terminator
    31ac:	3201      	adds	r2, #1
            am_pcBuf++;                 // Skip NULL terminator
    31ae:	440b      	add	r3, r1
            am_bufcnt++;                // Include NULL terminator
    31b0:	6022      	str	r2, [r4, #0]
            am_pcBuf++;                 // Skip NULL terminator
    31b2:	602b      	str	r3, [r5, #0]
} // am_sprintf()
    31b4:	b003      	add	sp, #12
    31b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    31ba:	b004      	add	sp, #16
    31bc:	4770      	bx	lr
            am_util_stdio_sprintf(&am_prtbuf[PRTBUFSIZE-(40+1)], "BUFFER OVERFLOWED! Increase PRTBUFSIZE\n");
    31be:	4909      	ldr	r1, [pc, #36]	; (31e4 <am_sprintf+0x78>)
    31c0:	4809      	ldr	r0, [pc, #36]	; (31e8 <am_sprintf+0x7c>)
    31c2:	f001 ff1d 	bl	5000 <am_util_stdio_sprintf>
            am_prtbuf[PRTBUFSIZE-1] = 0x00;     // Double terminate the buffer
    31c6:	4b09      	ldr	r3, [pc, #36]	; (31ec <am_sprintf+0x80>)
    31c8:	2000      	movs	r0, #0
            am_pcBuf = &am_prtbuf[PRTBUFSIZE];  // Don't allow any further printing
    31ca:	f503 6180 	add.w	r1, r3, #1024	; 0x400
            am_bufcnt = PRTBUFSIZE;             //  "
    31ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
            am_pcBuf = &am_prtbuf[PRTBUFSIZE];  // Don't allow any further printing
    31d2:	6029      	str	r1, [r5, #0]
            am_prtbuf[PRTBUFSIZE-1] = 0x00;     // Double terminate the buffer
    31d4:	f883 03ff 	strb.w	r0, [r3, #1023]	; 0x3ff
            am_bufcnt = PRTBUFSIZE;             //  "
    31d8:	6022      	str	r2, [r4, #0]
    31da:	e7d0      	b.n	317e <am_sprintf+0x12>
    31dc:	1000104c 	.word	0x1000104c
    31e0:	10001568 	.word	0x10001568
    31e4:	00005cc8 	.word	0x00005cc8
    31e8:	1000153f 	.word	0x1000153f
    31ec:	10001168 	.word	0x10001168

000031f0 <core_init_state>:
    Actual patterns chosen depend on the seed parameter.

    Note:
    The seed parameter MUST be supplied from a source that cannot be determined at compile time
*/
void core_init_state(ee_u32 size, ee_s16 seed, ee_u8 *p) {
    31f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee_u8 *buf=0;
#if CORE_DEBUG
    ee_u8 *start=p;
    ee_printf("State: %d,%d\n",size,seed);
#endif
    size--;
    31f4:	1e46      	subs	r6, r0, #1
    next=0;
    while ((total+next+1)<size) {
    31f6:	2e01      	cmp	r6, #1
void core_init_state(ee_u32 size, ee_s16 seed, ee_u8 *p) {
    31f8:	4684      	mov	ip, r0
    31fa:	4615      	mov	r5, r2
    while ((total+next+1)<size) {
    31fc:	d966      	bls.n	32cc <core_init_state+0xdc>
    31fe:	1c4c      	adds	r4, r1, #1
            case 6: /* scientific */
                buf=scipat[(seed>>3) & 0x3];
                next=8;
            break;
            case 7: /* invalid */
                buf=errpat[(seed>>3) & 0x3];
    3200:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 32d8 <core_init_state+0xe8>
                buf=scipat[(seed>>3) & 0x3];
    3204:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 32dc <core_init_state+0xec>
                buf=floatpat[(seed>>3) & 0x3];
    3208:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 32e0 <core_init_state+0xf0>
                buf=intpat[(seed>>3) & 0x3];
    320c:	4831      	ldr	r0, [pc, #196]	; (32d4 <core_init_state+0xe4>)
    320e:	b2a4      	uxth	r4, r4
    while ((total+next+1)<size) {
    3210:	2100      	movs	r1, #0
            *(p+total+i)=',';
    3212:	272c      	movs	r7, #44	; 0x2c
        switch (seed & 0x7) {
    3214:	f004 0307 	and.w	r3, r4, #7
    3218:	f1a3 0b03 	sub.w	fp, r3, #3
        seed++;
    321c:	b222      	sxth	r2, r4
                buf=errpat[(seed>>3) & 0x3];
    321e:	f3c2 03c1 	ubfx	r3, r2, #3, #2
        switch (seed & 0x7) {
    3222:	f1bb 0f04 	cmp.w	fp, #4
    3226:	d831      	bhi.n	328c <core_init_state+0x9c>
    3228:	e8df f00b 	tbb	[pc, fp]
    322c:	39390303 	.word	0x39390303
    3230:	49          	.byte	0x49
    3231:	00          	.byte	0x00
    while ((total+next+1)<size) {
    3232:	f101 0b09 	add.w	fp, r1, #9
    3236:	455e      	cmp	r6, fp
                buf=floatpat[(seed>>3) & 0x3];
    3238:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
    while ((total+next+1)<size) {
    323c:	d935      	bls.n	32aa <core_init_state+0xba>
                next=8;
    323e:	f04f 0a08 	mov.w	sl, #8
                *(p+total+i)=buf[i];
    3242:	781a      	ldrb	r2, [r3, #0]
    3244:	546a      	strb	r2, [r5, r1]
    3246:	186a      	adds	r2, r5, r1
    3248:	7859      	ldrb	r1, [r3, #1]
    324a:	7051      	strb	r1, [r2, #1]
    324c:	7899      	ldrb	r1, [r3, #2]
    324e:	7091      	strb	r1, [r2, #2]
    3250:	78d9      	ldrb	r1, [r3, #3]
    3252:	70d1      	strb	r1, [r2, #3]
            for(i=0;i<next;i++)
    3254:	f1ba 0f04 	cmp.w	sl, #4
    3258:	d012      	beq.n	3280 <core_init_state+0x90>
                *(p+total+i)=buf[i];
    325a:	7919      	ldrb	r1, [r3, #4]
    325c:	7111      	strb	r1, [r2, #4]
            for(i=0;i<next;i++)
    325e:	f1ba 0f05 	cmp.w	sl, #5
    3262:	d00d      	beq.n	3280 <core_init_state+0x90>
                *(p+total+i)=buf[i];
    3264:	7959      	ldrb	r1, [r3, #5]
    3266:	7151      	strb	r1, [r2, #5]
            for(i=0;i<next;i++)
    3268:	f1ba 0f06 	cmp.w	sl, #6
    326c:	d008      	beq.n	3280 <core_init_state+0x90>
                *(p+total+i)=buf[i];
    326e:	7999      	ldrb	r1, [r3, #6]
    3270:	7191      	strb	r1, [r2, #6]
            for(i=0;i<next;i++)
    3272:	f1ba 0f08 	cmp.w	sl, #8
                *(p+total+i)=buf[i];
    3276:	bf06      	itte	eq
    3278:	79db      	ldrbeq	r3, [r3, #7]
    327a:	71d3      	strbeq	r3, [r2, #7]
            for(i=0;i<next;i++)
    327c:	f04f 0a07 	movne.w	sl, #7
    3280:	3401      	adds	r4, #1
            *(p+total+i)=',';
    3282:	f802 700a 	strb.w	r7, [r2, sl]
    3286:	b2a4      	uxth	r4, r4
    3288:	4659      	mov	r1, fp
    328a:	e7c3      	b.n	3214 <core_init_state+0x24>
    while ((total+next+1)<size) {
    328c:	f101 0b05 	add.w	fp, r1, #5
    3290:	455e      	cmp	r6, fp
                buf=intpat[(seed>>3) & 0x3];
    3292:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    while ((total+next+1)<size) {
    3296:	d908      	bls.n	32aa <core_init_state+0xba>
                next=4;
    3298:	f04f 0a04 	mov.w	sl, #4
    329c:	e7d1      	b.n	3242 <core_init_state+0x52>
    while ((total+next+1)<size) {
    329e:	f101 0b09 	add.w	fp, r1, #9
    32a2:	455e      	cmp	r6, fp
                buf=scipat[(seed>>3) & 0x3];
    32a4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
    while ((total+next+1)<size) {
    32a8:	d8c9      	bhi.n	323e <core_init_state+0x4e>
            default: /* Never happen, just to make some compilers happy */
            break;
        }
    }
    size++;
    while (total<size) { /* fill the rest with 0 */
    32aa:	4561      	cmp	r1, ip
    32ac:	d210      	bcs.n	32d0 <core_init_state+0xe0>
    32ae:	1868      	adds	r0, r5, r1
    32b0:	ebac 0201 	sub.w	r2, ip, r1
        total++;
    }
#if CORE_DEBUG
    ee_printf("State Input: %s\n",start);
#endif
}
    32b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32b8:	2100      	movs	r1, #0
    32ba:	f002 bad9 	b.w	5870 <memset>
    while ((total+next+1)<size) {
    32be:	f101 0b09 	add.w	fp, r1, #9
    32c2:	455e      	cmp	r6, fp
                buf=errpat[(seed>>3) & 0x3];
    32c4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
    while ((total+next+1)<size) {
    32c8:	d8b9      	bhi.n	323e <core_init_state+0x4e>
    32ca:	e7ee      	b.n	32aa <core_init_state+0xba>
    ee_u32 total=0,next=0,i;
    32cc:	2100      	movs	r1, #0
    32ce:	e7ee      	b.n	32ae <core_init_state+0xbe>
    32d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    32d4:	00005d58 	.word	0x00005d58
    32d8:	00005d38 	.word	0x00005d38
    32dc:	00005d68 	.word	0x00005d68
    32e0:	00005d48 	.word	0x00005d48

000032e4 <core_state_transition>:

    The input pointer is updated to point to the end of the token, and the end state is returned (either specific format determined or invalid).
*/

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    ee_u8 *str=*instr;
    32e4:	6803      	ldr	r3, [r0, #0]
    ee_u8 NEXT_SYMBOL;
    enum CORE_STATE state=CORE_START;
    for( ; *str && state != CORE_INVALID; str++ ) {
    32e6:	781a      	ldrb	r2, [r3, #0]
    32e8:	b392      	cbz	r2, 3350 <core_state_transition+0x6c>
        NEXT_SYMBOL = *str;
        if (NEXT_SYMBOL==',') /* end of this input */ {
    32ea:	2a2c      	cmp	r2, #44	; 0x2c
    32ec:	d02e      	beq.n	334c <core_state_transition+0x68>
enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
    32ee:	b410      	push	{r4}
    retval = ((c>='0') & (c<='9')) ? 1 : 0;
    32f0:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
    32f4:	2c09      	cmp	r4, #9
    32f6:	d90f      	bls.n	3318 <core_state_transition+0x34>
        switch(state) {
        case CORE_START:
            if(ee_isdigit(NEXT_SYMBOL)) {
                state = CORE_INT;
            }
            else if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
    32f8:	2a2b      	cmp	r2, #43	; 0x2b
    32fa:	d02c      	beq.n	3356 <core_state_transition+0x72>
    32fc:	2a2d      	cmp	r2, #45	; 0x2d
    32fe:	d02a      	beq.n	3356 <core_state_transition+0x72>
                state = CORE_S1;
            }
            else if( NEXT_SYMBOL == '.' ) {
    3300:	2a2e      	cmp	r2, #46	; 0x2e
    3302:	f000 80b1 	beq.w	3468 <core_state_transition+0x184>
            }
            else {
                state = CORE_INVALID;
                transition_count[CORE_INVALID]++;
            }
            transition_count[CORE_START]++;
    3306:	e891 0014 	ldmia.w	r1, {r2, r4}
                transition_count[CORE_INVALID]++;
    330a:	3401      	adds	r4, #1
            transition_count[CORE_START]++;
    330c:	3201      	adds	r2, #1
    330e:	e881 0014 	stmia.w	r1, {r2, r4}
    for( ; *str && state != CORE_INVALID; str++ ) {
    3312:	3301      	adds	r3, #1
                state = CORE_INVALID;
    3314:	2101      	movs	r1, #1
    3316:	e014      	b.n	3342 <core_state_transition+0x5e>
            transition_count[CORE_START]++;
    3318:	680c      	ldr	r4, [r1, #0]
    331a:	3401      	adds	r4, #1
    331c:	600c      	str	r4, [r1, #0]
    for( ; *str && state != CORE_INVALID; str++ ) {
    331e:	785a      	ldrb	r2, [r3, #1]
    3320:	3301      	adds	r3, #1
    3322:	b372      	cbz	r2, 3382 <core_state_transition+0x9e>
        if (NEXT_SYMBOL==',') /* end of this input */ {
    3324:	2a2c      	cmp	r2, #44	; 0x2c
    3326:	f000 8092 	beq.w	344e <core_state_transition+0x16a>
                state = CORE_INVALID;
                transition_count[CORE_S1]++;
            }
            break;
        case CORE_INT:
            if( NEXT_SYMBOL == '.' ) {
    332a:	2a2e      	cmp	r2, #46	; 0x2e
    retval = ((c>='0') & (c<='9')) ? 1 : 0;
    332c:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
            if( NEXT_SYMBOL == '.' ) {
    3330:	d031      	beq.n	3396 <core_state_transition+0xb2>
    retval = ((c>='0') & (c<='9')) ? 1 : 0;
    3332:	2c09      	cmp	r4, #9
    3334:	f240 80a0 	bls.w	3478 <core_state_transition+0x194>
                state = CORE_FLOAT;
                transition_count[CORE_INT]++;
            }
            else if(!ee_isdigit(NEXT_SYMBOL)) {
                state = CORE_INVALID;
                transition_count[CORE_INT]++;
    3338:	690a      	ldr	r2, [r1, #16]
    333a:	3201      	adds	r2, #1
    333c:	610a      	str	r2, [r1, #16]
    for( ; *str && state != CORE_INVALID; str++ ) {
    333e:	3301      	adds	r3, #1
                state = CORE_INVALID;
    3340:	2101      	movs	r1, #1
            break;
        default:
            break;
        }
    }
    *instr=str;
    3342:	6003      	str	r3, [r0, #0]
    return state;
}
    3344:	f85d 4b04 	ldr.w	r4, [sp], #4
    3348:	4608      	mov	r0, r1
    334a:	4770      	bx	lr
        if (NEXT_SYMBOL==',') /* end of this input */ {
    334c:	2200      	movs	r2, #0
            str++;
    334e:	3301      	adds	r3, #1
    *instr=str;
    3350:	6003      	str	r3, [r0, #0]
}
    3352:	4610      	mov	r0, r2
    3354:	4770      	bx	lr
            transition_count[CORE_START]++;
    3356:	680c      	ldr	r4, [r1, #0]
    3358:	3401      	adds	r4, #1
    335a:	600c      	str	r4, [r1, #0]
    for( ; *str && state != CORE_INVALID; str++ ) {
    335c:	785a      	ldrb	r2, [r3, #1]
    335e:	3301      	adds	r3, #1
    3360:	2a00      	cmp	r2, #0
    3362:	f000 809c 	beq.w	349e <core_state_transition+0x1ba>
        if (NEXT_SYMBOL==',') /* end of this input */ {
    3366:	2a2c      	cmp	r2, #44	; 0x2c
    3368:	f000 809b 	beq.w	34a2 <core_state_transition+0x1be>
    retval = ((c>='0') & (c<='9')) ? 1 : 0;
    336c:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
    3370:	2c09      	cmp	r4, #9
    3372:	d808      	bhi.n	3386 <core_state_transition+0xa2>
                transition_count[CORE_S1]++;
    3374:	688a      	ldr	r2, [r1, #8]
    3376:	3201      	adds	r2, #1
    3378:	608a      	str	r2, [r1, #8]
    for( ; *str && state != CORE_INVALID; str++ ) {
    337a:	785a      	ldrb	r2, [r3, #1]
    337c:	3301      	adds	r3, #1
    337e:	2a00      	cmp	r2, #0
    3380:	d1d0      	bne.n	3324 <core_state_transition+0x40>
                state = CORE_INT;
    3382:	2104      	movs	r1, #4
    3384:	e7dd      	b.n	3342 <core_state_transition+0x5e>
            else if( NEXT_SYMBOL == '.' ) {
    3386:	2a2e      	cmp	r2, #46	; 0x2e
    3388:	d064      	beq.n	3454 <core_state_transition+0x170>
                transition_count[CORE_S1]++;
    338a:	688a      	ldr	r2, [r1, #8]
    338c:	3201      	adds	r2, #1
    338e:	608a      	str	r2, [r1, #8]
    for( ; *str && state != CORE_INVALID; str++ ) {
    3390:	3301      	adds	r3, #1
                state = CORE_INVALID;
    3392:	2101      	movs	r1, #1
    3394:	e7d5      	b.n	3342 <core_state_transition+0x5e>
                transition_count[CORE_INT]++;
    3396:	690c      	ldr	r4, [r1, #16]
    3398:	3401      	adds	r4, #1
    339a:	610c      	str	r4, [r1, #16]
    for( ; *str && state != CORE_INVALID; str++ ) {
    339c:	785a      	ldrb	r2, [r3, #1]
    339e:	1c5c      	adds	r4, r3, #1
    33a0:	2a00      	cmp	r2, #0
    33a2:	d05e      	beq.n	3462 <core_state_transition+0x17e>
        if (NEXT_SYMBOL==',') /* end of this input */ {
    33a4:	2a2c      	cmp	r2, #44	; 0x2c
    33a6:	d075      	beq.n	3494 <core_state_transition+0x1b0>
            if( NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e' ) {
    33a8:	f002 03df 	and.w	r3, r2, #223	; 0xdf
    33ac:	2b45      	cmp	r3, #69	; 0x45
    retval = ((c>='0') & (c<='9')) ? 1 : 0;
    33ae:	f1a2 0230 	sub.w	r2, r2, #48	; 0x30
            if( NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e' ) {
    33b2:	d009      	beq.n	33c8 <core_state_transition+0xe4>
    retval = ((c>='0') & (c<='9')) ? 1 : 0;
    33b4:	2a09      	cmp	r2, #9
    33b6:	d844      	bhi.n	3442 <core_state_transition+0x15e>
    for( ; *str && state != CORE_INVALID; str++ ) {
    33b8:	7862      	ldrb	r2, [r4, #1]
    33ba:	1c63      	adds	r3, r4, #1
    33bc:	2a00      	cmp	r2, #0
    33be:	d072      	beq.n	34a6 <core_state_transition+0x1c2>
        if (NEXT_SYMBOL==',') /* end of this input */ {
    33c0:	2a2c      	cmp	r2, #44	; 0x2c
    33c2:	d068      	beq.n	3496 <core_state_transition+0x1b2>
    33c4:	461c      	mov	r4, r3
    33c6:	e7ef      	b.n	33a8 <core_state_transition+0xc4>
                transition_count[CORE_FLOAT]++;
    33c8:	694b      	ldr	r3, [r1, #20]
    33ca:	3301      	adds	r3, #1
    33cc:	614b      	str	r3, [r1, #20]
    for( ; *str && state != CORE_INVALID; str++ ) {
    33ce:	7862      	ldrb	r2, [r4, #1]
    33d0:	1c63      	adds	r3, r4, #1
    33d2:	2a00      	cmp	r2, #0
    33d4:	d05a      	beq.n	348c <core_state_transition+0x1a8>
        if (NEXT_SYMBOL==',') /* end of this input */ {
    33d6:	2a2c      	cmp	r2, #44	; 0x2c
    33d8:	d05a      	beq.n	3490 <core_state_transition+0x1ac>
            if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
    33da:	2a2b      	cmp	r2, #43	; 0x2b
                transition_count[CORE_S2]++;
    33dc:	68cb      	ldr	r3, [r1, #12]
            if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
    33de:	d006      	beq.n	33ee <core_state_transition+0x10a>
    33e0:	2a2d      	cmp	r2, #45	; 0x2d
    33e2:	d004      	beq.n	33ee <core_state_transition+0x10a>
                transition_count[CORE_S2]++;
    33e4:	1c5a      	adds	r2, r3, #1
    33e6:	60ca      	str	r2, [r1, #12]
    for( ; *str && state != CORE_INVALID; str++ ) {
    33e8:	1ca3      	adds	r3, r4, #2
                state = CORE_INVALID;
    33ea:	2101      	movs	r1, #1
    33ec:	e7a9      	b.n	3342 <core_state_transition+0x5e>
                transition_count[CORE_S2]++;
    33ee:	3301      	adds	r3, #1
    33f0:	60cb      	str	r3, [r1, #12]
    for( ; *str && state != CORE_INVALID; str++ ) {
    33f2:	78a2      	ldrb	r2, [r4, #2]
    33f4:	1ca3      	adds	r3, r4, #2
    33f6:	2a00      	cmp	r2, #0
    33f8:	d046      	beq.n	3488 <core_state_transition+0x1a4>
        if (NEXT_SYMBOL==',') /* end of this input */ {
    33fa:	2a2c      	cmp	r2, #44	; 0x2c
    33fc:	d04d      	beq.n	349a <core_state_transition+0x1b6>
    retval = ((c>='0') & (c<='9')) ? 1 : 0;
    33fe:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    3402:	2b09      	cmp	r3, #9
    3404:	d811      	bhi.n	342a <core_state_transition+0x146>
                transition_count[CORE_EXPONENT]++;
    3406:	698b      	ldr	r3, [r1, #24]
    3408:	3301      	adds	r3, #1
    340a:	618b      	str	r3, [r1, #24]
    for( ; *str && state != CORE_INVALID; str++ ) {
    340c:	78e2      	ldrb	r2, [r4, #3]
    340e:	1ce3      	adds	r3, r4, #3
    3410:	b14a      	cbz	r2, 3426 <core_state_transition+0x142>
        if (NEXT_SYMBOL==',') /* end of this input */ {
    3412:	2a2c      	cmp	r2, #44	; 0x2c
    3414:	d036      	beq.n	3484 <core_state_transition+0x1a0>
    retval = ((c>='0') & (c<='9')) ? 1 : 0;
    3416:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
    341a:	2c09      	cmp	r4, #9
    341c:	d80b      	bhi.n	3436 <core_state_transition+0x152>
    for( ; *str && state != CORE_INVALID; str++ ) {
    341e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3422:	2a00      	cmp	r2, #0
    3424:	d1f5      	bne.n	3412 <core_state_transition+0x12e>
                state = CORE_SCIENTIFIC;
    3426:	2107      	movs	r1, #7
    3428:	e78b      	b.n	3342 <core_state_transition+0x5e>
                transition_count[CORE_EXPONENT]++;
    342a:	698a      	ldr	r2, [r1, #24]
    342c:	3201      	adds	r2, #1
    342e:	618a      	str	r2, [r1, #24]
    for( ; *str && state != CORE_INVALID; str++ ) {
    3430:	1ce3      	adds	r3, r4, #3
                state = CORE_INVALID;
    3432:	2101      	movs	r1, #1
    3434:	e785      	b.n	3342 <core_state_transition+0x5e>
                transition_count[CORE_INVALID]++;
    3436:	684a      	ldr	r2, [r1, #4]
    3438:	3201      	adds	r2, #1
    343a:	604a      	str	r2, [r1, #4]
    for( ; *str && state != CORE_INVALID; str++ ) {
    343c:	3301      	adds	r3, #1
                state = CORE_INVALID;
    343e:	2101      	movs	r1, #1
    3440:	e77f      	b.n	3342 <core_state_transition+0x5e>
                transition_count[CORE_FLOAT]++;
    3442:	694b      	ldr	r3, [r1, #20]
    3444:	1c5a      	adds	r2, r3, #1
    3446:	614a      	str	r2, [r1, #20]
    for( ; *str && state != CORE_INVALID; str++ ) {
    3448:	1c63      	adds	r3, r4, #1
                state = CORE_INVALID;
    344a:	2101      	movs	r1, #1
    344c:	e779      	b.n	3342 <core_state_transition+0x5e>
        if (NEXT_SYMBOL==',') /* end of this input */ {
    344e:	2104      	movs	r1, #4
            str++;
    3450:	3301      	adds	r3, #1
            break;
    3452:	e776      	b.n	3342 <core_state_transition+0x5e>
                transition_count[CORE_S1]++;
    3454:	688c      	ldr	r4, [r1, #8]
    3456:	3401      	adds	r4, #1
    3458:	608c      	str	r4, [r1, #8]
    for( ; *str && state != CORE_INVALID; str++ ) {
    345a:	785a      	ldrb	r2, [r3, #1]
    345c:	1c5c      	adds	r4, r3, #1
    345e:	2a00      	cmp	r2, #0
    3460:	d1a0      	bne.n	33a4 <core_state_transition+0xc0>
    3462:	4623      	mov	r3, r4
                state = CORE_FLOAT;
    3464:	2105      	movs	r1, #5
    3466:	e76c      	b.n	3342 <core_state_transition+0x5e>
            transition_count[CORE_START]++;
    3468:	680a      	ldr	r2, [r1, #0]
    346a:	3201      	adds	r2, #1
    346c:	600a      	str	r2, [r1, #0]
    for( ; *str && state != CORE_INVALID; str++ ) {
    346e:	785a      	ldrb	r2, [r3, #1]
    3470:	1c5c      	adds	r4, r3, #1
    3472:	2a00      	cmp	r2, #0
    3474:	d196      	bne.n	33a4 <core_state_transition+0xc0>
    3476:	e7f4      	b.n	3462 <core_state_transition+0x17e>
    3478:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    347c:	2a00      	cmp	r2, #0
    347e:	f47f af51 	bne.w	3324 <core_state_transition+0x40>
    3482:	e77e      	b.n	3382 <core_state_transition+0x9e>
                state = CORE_SCIENTIFIC;
    3484:	2107      	movs	r1, #7
    3486:	e7e3      	b.n	3450 <core_state_transition+0x16c>
                state = CORE_EXPONENT;
    3488:	2106      	movs	r1, #6
    348a:	e75a      	b.n	3342 <core_state_transition+0x5e>
                state = CORE_S2;
    348c:	2103      	movs	r1, #3
    348e:	e758      	b.n	3342 <core_state_transition+0x5e>
    3490:	2103      	movs	r1, #3
    3492:	e7dd      	b.n	3450 <core_state_transition+0x16c>
    for( ; *str && state != CORE_INVALID; str++ ) {
    3494:	4623      	mov	r3, r4
                state = CORE_FLOAT;
    3496:	2105      	movs	r1, #5
    3498:	e7da      	b.n	3450 <core_state_transition+0x16c>
                state = CORE_EXPONENT;
    349a:	2106      	movs	r1, #6
    349c:	e7d8      	b.n	3450 <core_state_transition+0x16c>
                state = CORE_S1;
    349e:	2102      	movs	r1, #2
    34a0:	e74f      	b.n	3342 <core_state_transition+0x5e>
    34a2:	2102      	movs	r1, #2
    34a4:	e7d4      	b.n	3450 <core_state_transition+0x16c>
    for( ; *str && state != CORE_INVALID; str++ ) {
    34a6:	2105      	movs	r1, #5
    34a8:	e74b      	b.n	3342 <core_state_transition+0x5e>
    34aa:	bf00      	nop

000034ac <core_bench_state>:
{
    34ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    34b0:	b092      	sub	sp, #72	; 0x48
    34b2:	460c      	mov	r4, r1
    34b4:	4682      	mov	sl, r0
    34b6:	2100      	movs	r1, #0
    34b8:	4691      	mov	r9, r2
    34ba:	a80a      	add	r0, sp, #40	; 0x28
    34bc:	2220      	movs	r2, #32
    34be:	4698      	mov	r8, r3
    ee_u8 *p=memblock;
    34c0:	9401      	str	r4, [sp, #4]
{
    34c2:	f9bd 6068 	ldrsh.w	r6, [sp, #104]	; 0x68
    34c6:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
    34ca:	f002 f9d1 	bl	5870 <memset>
    34ce:	2220      	movs	r2, #32
    34d0:	2100      	movs	r1, #0
    34d2:	a802      	add	r0, sp, #8
    34d4:	f002 f9cc 	bl	5870 <memset>
    while (*p!=0) {
    34d8:	7822      	ldrb	r2, [r4, #0]
    34da:	2a00      	cmp	r2, #0
    34dc:	d05a      	beq.n	3594 <core_bench_state+0xe8>
    34de:	ad01      	add	r5, sp, #4
        enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    34e0:	a90a      	add	r1, sp, #40	; 0x28
    34e2:	4628      	mov	r0, r5
    34e4:	f7ff fefe 	bl	32e4 <core_state_transition>
        final_counts[fstate]++;
    34e8:	ab12      	add	r3, sp, #72	; 0x48
    34ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    while (*p!=0) {
    34ee:	9901      	ldr	r1, [sp, #4]
        final_counts[fstate]++;
    34f0:	f850 3c40 	ldr.w	r3, [r0, #-64]
    while (*p!=0) {
    34f4:	780a      	ldrb	r2, [r1, #0]
        final_counts[fstate]++;
    34f6:	3301      	adds	r3, #1
    34f8:	f840 3c40 	str.w	r3, [r0, #-64]
    while (*p!=0) {
    34fc:	2a00      	cmp	r2, #0
    34fe:	d1ef      	bne.n	34e0 <core_bench_state+0x34>
    while (p < (memblock+blksize)) { /* insert some corruption */
    3500:	44a2      	add	sl, r4
    3502:	4554      	cmp	r4, sl
    p=memblock;
    3504:	9401      	str	r4, [sp, #4]
    3506:	7822      	ldrb	r2, [r4, #0]
    while (p < (memblock+blksize)) { /* insert some corruption */
    3508:	d241      	bcs.n	358e <core_bench_state+0xe2>
{
    350a:	4620      	mov	r0, r4
    350c:	e000      	b.n	3510 <core_bench_state+0x64>
    350e:	7802      	ldrb	r2, [r0, #0]
        if (*p!=',')
    3510:	2a2c      	cmp	r2, #44	; 0x2c
            *p^=(ee_u8)seed1;
    3512:	ea82 0109 	eor.w	r1, r2, r9
    3516:	bf1c      	itt	ne
    3518:	7001      	strbne	r1, [r0, #0]
    351a:	9801      	ldrne	r0, [sp, #4]
        p+=step;
    351c:	4430      	add	r0, r6
    while (p < (memblock+blksize)) { /* insert some corruption */
    351e:	4550      	cmp	r0, sl
        p+=step;
    3520:	9001      	str	r0, [sp, #4]
    while (p < (memblock+blksize)) { /* insert some corruption */
    3522:	d3f4      	bcc.n	350e <core_bench_state+0x62>
    while (*p!=0) {
    3524:	7823      	ldrb	r3, [r4, #0]
    p=memblock;
    3526:	9401      	str	r4, [sp, #4]
    while (*p!=0) {
    3528:	2b00      	cmp	r3, #0
    352a:	d039      	beq.n	35a0 <core_bench_state+0xf4>
        enum CORE_STATE fstate=core_state_transition(&p,track_counts);
    352c:	a90a      	add	r1, sp, #40	; 0x28
    352e:	4628      	mov	r0, r5
    3530:	f7ff fed8 	bl	32e4 <core_state_transition>
        final_counts[fstate]++;
    3534:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
    3538:	eb0c 0980 	add.w	r9, ip, r0, lsl #2
    while (*p!=0) {
    353c:	9a01      	ldr	r2, [sp, #4]
        final_counts[fstate]++;
    353e:	f859 0c40 	ldr.w	r0, [r9, #-64]
    while (*p!=0) {
    3542:	7811      	ldrb	r1, [r2, #0]
        final_counts[fstate]++;
    3544:	3001      	adds	r0, #1
    3546:	f849 0c40 	str.w	r0, [r9, #-64]
    while (*p!=0) {
    354a:	2900      	cmp	r1, #0
    354c:	d1ee      	bne.n	352c <core_bench_state+0x80>
    while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
    354e:	4554      	cmp	r4, sl
        p+=step;
    3550:	9401      	str	r4, [sp, #4]
    while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
    3552:	d20a      	bcs.n	356a <core_bench_state+0xbe>
        if (*p!=',')
    3554:	7823      	ldrb	r3, [r4, #0]
    3556:	2b2c      	cmp	r3, #44	; 0x2c
            *p^=(ee_u8)seed2;
    3558:	ea83 0208 	eor.w	r2, r3, r8
    355c:	bf1c      	itt	ne
    355e:	7022      	strbne	r2, [r4, #0]
    3560:	9c01      	ldrne	r4, [sp, #4]
        p+=step;
    3562:	4434      	add	r4, r6
    while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
    3564:	4554      	cmp	r4, sl
        p+=step;
    3566:	9401      	str	r4, [sp, #4]
    while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
    3568:	d3f4      	bcc.n	3554 <core_bench_state+0xa8>
    356a:	ac09      	add	r4, sp, #36	; 0x24
    356c:	4626      	mov	r6, r4
        crc=crcu32(final_counts[i],crc);
    356e:	4639      	mov	r1, r7
    3570:	f855 0f04 	ldr.w	r0, [r5, #4]!
    3574:	f000 f8d4 	bl	3720 <crcu32>
        crc=crcu32(track_counts[i],crc);
    3578:	4601      	mov	r1, r0
    357a:	f854 0f04 	ldr.w	r0, [r4, #4]!
    357e:	f000 f8cf 	bl	3720 <crcu32>
    for (i=0; i<NUM_CORE_STATES; i++) {
    3582:	42b5      	cmp	r5, r6
        crc=crcu32(track_counts[i],crc);
    3584:	4607      	mov	r7, r0
    for (i=0; i<NUM_CORE_STATES; i++) {
    3586:	d1f2      	bne.n	356e <core_bench_state+0xc2>
}
    3588:	b012      	add	sp, #72	; 0x48
    358a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while (*p!=0) {
    358e:	2a00      	cmp	r2, #0
    3590:	d1cc      	bne.n	352c <core_bench_state+0x80>
    3592:	e7ea      	b.n	356a <core_bench_state+0xbe>
    while (p < (memblock+blksize)) { /* insert some corruption */
    3594:	44a2      	add	sl, r4
    3596:	4554      	cmp	r4, sl
    p=memblock;
    3598:	9401      	str	r4, [sp, #4]
    359a:	ad01      	add	r5, sp, #4
    while (p < (memblock+blksize)) { /* insert some corruption */
    359c:	d3b5      	bcc.n	350a <core_bench_state+0x5e>
    359e:	e7e4      	b.n	356a <core_bench_state+0xbe>
    p=memblock;
    35a0:	9401      	str	r4, [sp, #4]
    35a2:	e7d7      	b.n	3554 <core_bench_state+0xa8>

000035a4 <get_seed_32>:
    extern volatile ee_s32 seed3_volatile;
    extern volatile ee_s32 seed4_volatile;
    extern volatile ee_s32 seed5_volatile;
    ee_s32 get_seed_32(int i) {
        ee_s32 retval;
        switch (i) {
    35a4:	3801      	subs	r0, #1
    35a6:	2804      	cmp	r0, #4
    35a8:	d813      	bhi.n	35d2 <get_seed_32+0x2e>
    35aa:	e8df f000 	tbb	[pc, r0]
    35ae:	0906      	.short	0x0906
    35b0:	0f0c      	.short	0x0f0c
    35b2:	03          	.byte	0x03
    35b3:	00          	.byte	0x00
                break;
            case 4:
                retval=seed4_volatile;
                break;
            case 5:
                retval=seed5_volatile;
    35b4:	4b08      	ldr	r3, [pc, #32]	; (35d8 <get_seed_32+0x34>)
    35b6:	6818      	ldr	r0, [r3, #0]
                break;
    35b8:	4770      	bx	lr
                retval=seed1_volatile;
    35ba:	4b08      	ldr	r3, [pc, #32]	; (35dc <get_seed_32+0x38>)
    35bc:	6818      	ldr	r0, [r3, #0]
                break;
    35be:	4770      	bx	lr
                retval=seed2_volatile;
    35c0:	4807      	ldr	r0, [pc, #28]	; (35e0 <get_seed_32+0x3c>)
    35c2:	6800      	ldr	r0, [r0, #0]
                break;
    35c4:	4770      	bx	lr
                retval=seed3_volatile;
    35c6:	4a07      	ldr	r2, [pc, #28]	; (35e4 <get_seed_32+0x40>)
    35c8:	6810      	ldr	r0, [r2, #0]
                break;
    35ca:	4770      	bx	lr
                retval=seed4_volatile;
    35cc:	4906      	ldr	r1, [pc, #24]	; (35e8 <get_seed_32+0x44>)
    35ce:	6808      	ldr	r0, [r1, #0]
                break;
    35d0:	4770      	bx	lr
            default:
                retval=0;
    35d2:	2000      	movs	r0, #0
                break;
        }
        return retval;
    }
    35d4:	4770      	bx	lr
    35d6:	bf00      	nop
    35d8:	10001058 	.word	0x10001058
    35dc:	10001050 	.word	0x10001050
    35e0:	10001054 	.word	0x10001054
    35e4:	10001018 	.word	0x10001018
    35e8:	1000101c 	.word	0x1000101c

000035ec <crcu16>:
        }
        else
            carry = 0;
        crc >>= 1;
        if (carry)
           crc |= 0x8000;
    35ec:	f24a 0201 	movw	r2, #40961	; 0xa001
    35f0:	084b      	lsrs	r3, r1, #1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    35f2:	4041      	eors	r1, r0
    35f4:	f011 0f01 	tst.w	r1, #1
           crc |= 0x8000;
    35f8:	ea83 0102 	eor.w	r1, r3, r2
           crc &= 0x7fff;
    }
    return crc;
}
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
    crc=crcu8( (ee_u8) (newval)             ,crc);
    35fc:	fa5f fc80 	uxtb.w	ip, r0
    3600:	bf18      	it	ne
    3602:	460b      	movne	r3, r1
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
    3604:	b410      	push	{r4}
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3606:	ea83 045c 	eor.w	r4, r3, ip, lsr #1
    360a:	085b      	lsrs	r3, r3, #1
    360c:	f014 0f01 	tst.w	r4, #1
           crc |= 0x8000;
    3610:	ea83 0102 	eor.w	r1, r3, r2
    3614:	bf18      	it	ne
    3616:	460b      	movne	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3618:	ea83 049c 	eor.w	r4, r3, ip, lsr #2
    361c:	085b      	lsrs	r3, r3, #1
    361e:	f014 0f01 	tst.w	r4, #1
           crc |= 0x8000;
    3622:	ea83 0102 	eor.w	r1, r3, r2
    3626:	bf18      	it	ne
    3628:	460b      	movne	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    362a:	ea83 04dc 	eor.w	r4, r3, ip, lsr #3
    362e:	085b      	lsrs	r3, r3, #1
    3630:	f014 0f01 	tst.w	r4, #1
           crc |= 0x8000;
    3634:	ea83 0102 	eor.w	r1, r3, r2
    3638:	bf18      	it	ne
    363a:	460b      	movne	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    363c:	ea83 141c 	eor.w	r4, r3, ip, lsr #4
    3640:	085b      	lsrs	r3, r3, #1
    3642:	f014 0f01 	tst.w	r4, #1
           crc |= 0x8000;
    3646:	ea83 0102 	eor.w	r1, r3, r2
    364a:	bf18      	it	ne
    364c:	460b      	movne	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    364e:	ea83 145c 	eor.w	r4, r3, ip, lsr #5
    3652:	085b      	lsrs	r3, r3, #1
    3654:	f014 0f01 	tst.w	r4, #1
           crc |= 0x8000;
    3658:	ea83 0102 	eor.w	r1, r3, r2
    365c:	bf18      	it	ne
    365e:	460b      	movne	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3660:	ea83 149c 	eor.w	r4, r3, ip, lsr #6
    3664:	085b      	lsrs	r3, r3, #1
    3666:	f014 0f01 	tst.w	r4, #1
           crc |= 0x8000;
    366a:	ea83 0102 	eor.w	r1, r3, r2
    366e:	bf18      	it	ne
    3670:	460b      	movne	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3672:	ea83 14dc 	eor.w	r4, r3, ip, lsr #7
    3676:	085b      	lsrs	r3, r3, #1
    3678:	f014 0f01 	tst.w	r4, #1
           crc |= 0x8000;
    367c:	ea83 0c02 	eor.w	ip, r3, r2
    3680:	bf18      	it	ne
    3682:	4663      	movne	r3, ip
    crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    3684:	0a00      	lsrs	r0, r0, #8
    3686:	0859      	lsrs	r1, r3, #1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3688:	4043      	eors	r3, r0
    368a:	f013 0f01 	tst.w	r3, #1
    crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    368e:	fa5f fc80 	uxtb.w	ip, r0
           crc |= 0x8000;
    3692:	ea81 0302 	eor.w	r3, r1, r2
    3696:	bf08      	it	eq
    3698:	460b      	moveq	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    369a:	ea83 045c 	eor.w	r4, r3, ip, lsr #1
    369e:	0858      	lsrs	r0, r3, #1
    36a0:	f014 0f01 	tst.w	r4, #1
           crc |= 0x8000;
    36a4:	ea80 0302 	eor.w	r3, r0, r2
    36a8:	bf08      	it	eq
    36aa:	4603      	moveq	r3, r0
    36ac:	085c      	lsrs	r4, r3, #1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    36ae:	ea83 019c 	eor.w	r1, r3, ip, lsr #2
    36b2:	f011 0f01 	tst.w	r1, #1
           crc |= 0x8000;
    36b6:	ea84 0002 	eor.w	r0, r4, r2
    36ba:	bf18      	it	ne
    36bc:	4604      	movne	r4, r0
    36be:	0863      	lsrs	r3, r4, #1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    36c0:	ea84 01dc 	eor.w	r1, r4, ip, lsr #3
    36c4:	f011 0f01 	tst.w	r1, #1
           crc |= 0x8000;
    36c8:	ea83 0402 	eor.w	r4, r3, r2
    36cc:	bf18      	it	ne
    36ce:	4623      	movne	r3, r4
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    36d0:	ea83 101c 	eor.w	r0, r3, ip, lsr #4
    36d4:	085b      	lsrs	r3, r3, #1
    36d6:	f010 0f01 	tst.w	r0, #1
           crc |= 0x8000;
    36da:	ea83 0102 	eor.w	r1, r3, r2
    36de:	bf18      	it	ne
    36e0:	460b      	movne	r3, r1
    36e2:	0858      	lsrs	r0, r3, #1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    36e4:	ea83 145c 	eor.w	r4, r3, ip, lsr #5
    36e8:	f014 0f01 	tst.w	r4, #1
           crc |= 0x8000;
    36ec:	ea80 0302 	eor.w	r3, r0, r2
    36f0:	bf18      	it	ne
    36f2:	4618      	movne	r0, r3
    36f4:	0844      	lsrs	r4, r0, #1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    36f6:	ea80 119c 	eor.w	r1, r0, ip, lsr #6
    36fa:	f011 0f01 	tst.w	r1, #1
           crc |= 0x8000;
    36fe:	ea84 0002 	eor.w	r0, r4, r2
    3702:	bf18      	it	ne
    3704:	4604      	movne	r4, r0
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3706:	ea84 11dc 	eor.w	r1, r4, ip, lsr #7
    370a:	0863      	lsrs	r3, r4, #1
    return crc;
    370c:	f011 0f01 	tst.w	r1, #1
           crc |= 0x8000;
    3710:	ea83 0002 	eor.w	r0, r3, r2
}
    3714:	f85d 4b04 	ldr.w	r4, [sp], #4
    3718:	bf08      	it	eq
    371a:	4618      	moveq	r0, r3
    371c:	4770      	bx	lr
    371e:	bf00      	nop

00003720 <crcu32>:
           crc |= 0x8000;
    3720:	f24a 0201 	movw	r2, #40961	; 0xa001
    3724:	084b      	lsrs	r3, r1, #1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3726:	4041      	eors	r1, r0
    3728:	f011 0f01 	tst.w	r1, #1
           crc |= 0x8000;
    372c:	ea83 0102 	eor.w	r1, r3, r2
    3730:	bf18      	it	ne
    3732:	460b      	movne	r3, r1
ee_u16 crcu32(ee_u32 newval, ee_u16 crc) {
    3734:	b430      	push	{r4, r5}
    crc=crcu8( (ee_u8) (newval)             ,crc);
    3736:	b2c5      	uxtb	r5, r0
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3738:	ea83 0455 	eor.w	r4, r3, r5, lsr #1
    373c:	085b      	lsrs	r3, r3, #1
           crc |= 0x8000;
    373e:	ea83 0c02 	eor.w	ip, r3, r2
    3742:	f014 0f01 	tst.w	r4, #1
    3746:	bf18      	it	ne
    3748:	4663      	movne	r3, ip
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    374a:	ea83 0195 	eor.w	r1, r3, r5, lsr #2
    374e:	085b      	lsrs	r3, r3, #1
           crc |= 0x8000;
    3750:	ea83 0402 	eor.w	r4, r3, r2
    3754:	f011 0f01 	tst.w	r1, #1
    3758:	bf18      	it	ne
    375a:	4623      	movne	r3, r4
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    375c:	ea83 01d5 	eor.w	r1, r3, r5, lsr #3
    3760:	085b      	lsrs	r3, r3, #1
           crc |= 0x8000;
    3762:	ea83 0c02 	eor.w	ip, r3, r2
    3766:	f011 0f01 	tst.w	r1, #1
    376a:	bf18      	it	ne
    376c:	4663      	movne	r3, ip
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    376e:	ea83 1415 	eor.w	r4, r3, r5, lsr #4
    3772:	0859      	lsrs	r1, r3, #1
           crc |= 0x8000;
    3774:	ea81 0302 	eor.w	r3, r1, r2
    3778:	f014 0f01 	tst.w	r4, #1
    377c:	bf18      	it	ne
    377e:	4619      	movne	r1, r3
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3780:	ea81 1c55 	eor.w	ip, r1, r5, lsr #5
    3784:	0849      	lsrs	r1, r1, #1
           crc |= 0x8000;
    3786:	ea81 0402 	eor.w	r4, r1, r2
    378a:	f01c 0f01 	tst.w	ip, #1
    378e:	bf18      	it	ne
    3790:	4621      	movne	r1, r4
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3792:	ea81 1c95 	eor.w	ip, r1, r5, lsr #6
    3796:	084b      	lsrs	r3, r1, #1
           crc |= 0x8000;
    3798:	ea83 0102 	eor.w	r1, r3, r2
    379c:	f01c 0f01 	tst.w	ip, #1
    37a0:	bf18      	it	ne
    37a2:	460b      	movne	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    37a4:	ea83 15d5 	eor.w	r5, r3, r5, lsr #7
    37a8:	f015 0f01 	tst.w	r5, #1
    37ac:	ea4f 0353 	mov.w	r3, r3, lsr #1
           crc |= 0x8000;
    37b0:	ea83 0402 	eor.w	r4, r3, r2
    crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    37b4:	f3c0 2107 	ubfx	r1, r0, #8, #8
    37b8:	bf08      	it	eq
    37ba:	461c      	moveq	r4, r3
    37bc:	0863      	lsrs	r3, r4, #1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    37be:	404c      	eors	r4, r1
           crc |= 0x8000;
    37c0:	ea83 0c02 	eor.w	ip, r3, r2
    37c4:	f014 0f01 	tst.w	r4, #1
    crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    37c8:	b2cd      	uxtb	r5, r1
    37ca:	bf18      	it	ne
    37cc:	4663      	movne	r3, ip
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    37ce:	ea83 0455 	eor.w	r4, r3, r5, lsr #1
    37d2:	0859      	lsrs	r1, r3, #1
           crc |= 0x8000;
    37d4:	ea81 0302 	eor.w	r3, r1, r2
    37d8:	f014 0f01 	tst.w	r4, #1
    37dc:	bf18      	it	ne
    37de:	4619      	movne	r1, r3
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    37e0:	ea81 0c95 	eor.w	ip, r1, r5, lsr #2
    37e4:	0849      	lsrs	r1, r1, #1
           crc |= 0x8000;
    37e6:	ea81 0402 	eor.w	r4, r1, r2
    37ea:	f01c 0f01 	tst.w	ip, #1
    37ee:	bf18      	it	ne
    37f0:	4621      	movne	r1, r4
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    37f2:	ea81 0cd5 	eor.w	ip, r1, r5, lsr #3
    37f6:	084b      	lsrs	r3, r1, #1
           crc |= 0x8000;
    37f8:	ea83 0102 	eor.w	r1, r3, r2
    37fc:	f01c 0f01 	tst.w	ip, #1
    3800:	bf18      	it	ne
    3802:	460b      	movne	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3804:	ea83 1415 	eor.w	r4, r3, r5, lsr #4
    3808:	085b      	lsrs	r3, r3, #1
           crc |= 0x8000;
    380a:	ea83 0c02 	eor.w	ip, r3, r2
    380e:	f014 0f01 	tst.w	r4, #1
    3812:	bf18      	it	ne
    3814:	4663      	movne	r3, ip
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3816:	ea83 1155 	eor.w	r1, r3, r5, lsr #5
    381a:	085b      	lsrs	r3, r3, #1
           crc |= 0x8000;
    381c:	ea83 0402 	eor.w	r4, r3, r2
    3820:	f011 0f01 	tst.w	r1, #1
    3824:	bf18      	it	ne
    3826:	4623      	movne	r3, r4
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3828:	ea83 1195 	eor.w	r1, r3, r5, lsr #6
    382c:	085b      	lsrs	r3, r3, #1
           crc |= 0x8000;
    382e:	ea83 0c02 	eor.w	ip, r3, r2
    3832:	f011 0f01 	tst.w	r1, #1
    3836:	bf18      	it	ne
    3838:	4663      	movne	r3, ip
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    383a:	ea83 15d5 	eor.w	r5, r3, r5, lsr #7
    383e:	085c      	lsrs	r4, r3, #1
    3840:	f015 0f01 	tst.w	r5, #1
           crc |= 0x8000;
    3844:	ea84 0102 	eor.w	r1, r4, r2
    crc=crc16((ee_s16) newval       ,crc);
    crc=crc16((ee_s16) (newval>>16) ,crc);
    3848:	ea4f 4010 	mov.w	r0, r0, lsr #16
    384c:	bf08      	it	eq
    384e:	4621      	moveq	r1, r4
    3850:	084b      	lsrs	r3, r1, #1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3852:	4041      	eors	r1, r0
           crc |= 0x8000;
    3854:	ea83 0c02 	eor.w	ip, r3, r2
    3858:	f011 0f01 	tst.w	r1, #1
    crc=crcu8( (ee_u8) (newval)             ,crc);
    385c:	b2c5      	uxtb	r5, r0
    385e:	bf18      	it	ne
    3860:	4663      	movne	r3, ip
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3862:	ea83 0455 	eor.w	r4, r3, r5, lsr #1
    3866:	0859      	lsrs	r1, r3, #1
           crc |= 0x8000;
    3868:	ea81 0302 	eor.w	r3, r1, r2
    386c:	f014 0f01 	tst.w	r4, #1
    3870:	bf18      	it	ne
    3872:	4619      	movne	r1, r3
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3874:	ea81 0c95 	eor.w	ip, r1, r5, lsr #2
    3878:	0849      	lsrs	r1, r1, #1
           crc |= 0x8000;
    387a:	ea81 0402 	eor.w	r4, r1, r2
    387e:	f01c 0f01 	tst.w	ip, #1
    3882:	bf18      	it	ne
    3884:	4621      	movne	r1, r4
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3886:	ea81 0cd5 	eor.w	ip, r1, r5, lsr #3
    388a:	084b      	lsrs	r3, r1, #1
           crc |= 0x8000;
    388c:	ea83 0102 	eor.w	r1, r3, r2
    3890:	f01c 0f01 	tst.w	ip, #1
    3894:	bf18      	it	ne
    3896:	460b      	movne	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3898:	ea83 1415 	eor.w	r4, r3, r5, lsr #4
    389c:	085b      	lsrs	r3, r3, #1
           crc |= 0x8000;
    389e:	ea83 0c02 	eor.w	ip, r3, r2
    38a2:	f014 0f01 	tst.w	r4, #1
    38a6:	bf18      	it	ne
    38a8:	4663      	movne	r3, ip
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    38aa:	ea83 1155 	eor.w	r1, r3, r5, lsr #5
    38ae:	085b      	lsrs	r3, r3, #1
           crc |= 0x8000;
    38b0:	ea83 0402 	eor.w	r4, r3, r2
    38b4:	f011 0f01 	tst.w	r1, #1
    38b8:	bf18      	it	ne
    38ba:	4623      	movne	r3, r4
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    38bc:	ea83 1195 	eor.w	r1, r3, r5, lsr #6
    38c0:	085b      	lsrs	r3, r3, #1
           crc |= 0x8000;
    38c2:	ea83 0c02 	eor.w	ip, r3, r2
    38c6:	f011 0f01 	tst.w	r1, #1
    38ca:	bf18      	it	ne
    38cc:	4663      	movne	r3, ip
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    38ce:	ea83 15d5 	eor.w	r5, r3, r5, lsr #7
    38d2:	085b      	lsrs	r3, r3, #1
           crc |= 0x8000;
    38d4:	ea83 0402 	eor.w	r4, r3, r2
    38d8:	f015 0f01 	tst.w	r5, #1
    crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    38dc:	ea4f 2010 	mov.w	r0, r0, lsr #8
    38e0:	bf18      	it	ne
    38e2:	4623      	movne	r3, r4
    38e4:	085d      	lsrs	r5, r3, #1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    38e6:	4043      	eors	r3, r0
    38e8:	f013 0f01 	tst.w	r3, #1
           crc |= 0x8000;
    38ec:	ea85 0102 	eor.w	r1, r5, r2
    crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    38f0:	fa5f fc80 	uxtb.w	ip, r0
    38f4:	bf14      	ite	ne
    38f6:	4608      	movne	r0, r1
    38f8:	4628      	moveq	r0, r5
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    38fa:	ea80 035c 	eor.w	r3, r0, ip, lsr #1
    38fe:	0844      	lsrs	r4, r0, #1
    3900:	f013 0f01 	tst.w	r3, #1
           crc |= 0x8000;
    3904:	ea84 0002 	eor.w	r0, r4, r2
    3908:	bf08      	it	eq
    390a:	4620      	moveq	r0, r4
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    390c:	ea80 059c 	eor.w	r5, r0, ip, lsr #2
    3910:	0843      	lsrs	r3, r0, #1
    3912:	f015 0f01 	tst.w	r5, #1
           crc |= 0x8000;
    3916:	ea83 0102 	eor.w	r1, r3, r2
    391a:	bf08      	it	eq
    391c:	4619      	moveq	r1, r3
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    391e:	ea81 04dc 	eor.w	r4, r1, ip, lsr #3
    3922:	084d      	lsrs	r5, r1, #1
    3924:	f014 0f01 	tst.w	r4, #1
           crc |= 0x8000;
    3928:	ea85 0002 	eor.w	r0, r5, r2
    392c:	bf08      	it	eq
    392e:	4628      	moveq	r0, r5
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3930:	ea80 131c 	eor.w	r3, r0, ip, lsr #4
    3934:	0841      	lsrs	r1, r0, #1
    3936:	f013 0f01 	tst.w	r3, #1
           crc |= 0x8000;
    393a:	ea81 0402 	eor.w	r4, r1, r2
    393e:	bf08      	it	eq
    3940:	460c      	moveq	r4, r1
    3942:	0860      	lsrs	r0, r4, #1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3944:	ea84 155c 	eor.w	r5, r4, ip, lsr #5
    3948:	f015 0f01 	tst.w	r5, #1
           crc |= 0x8000;
    394c:	ea80 0302 	eor.w	r3, r0, r2
    3950:	bf18      	it	ne
    3952:	4618      	movne	r0, r3
    3954:	0844      	lsrs	r4, r0, #1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3956:	ea80 119c 	eor.w	r1, r0, ip, lsr #6
           crc |= 0x8000;
    395a:	ea84 0502 	eor.w	r5, r4, r2
    395e:	f011 0f01 	tst.w	r1, #1
    3962:	bf18      	it	ne
    3964:	462c      	movne	r4, r5
    3966:	0860      	lsrs	r0, r4, #1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3968:	ea84 1cdc 	eor.w	ip, r4, ip, lsr #7
    return crc;
    396c:	f01c 0f01 	tst.w	ip, #1
           crc |= 0x8000;
    3970:	ea82 0200 	eor.w	r2, r2, r0
}
    3974:	bf18      	it	ne
    3976:	4610      	movne	r0, r2
    3978:	bc30      	pop	{r4, r5}
    397a:	4770      	bx	lr

0000397c <crc16>:
           crc |= 0x8000;
    397c:	f24a 0201 	movw	r2, #40961	; 0xa001
    3980:	084b      	lsrs	r3, r1, #1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3982:	4041      	eors	r1, r0
    3984:	f011 0f01 	tst.w	r1, #1
           crc |= 0x8000;
    3988:	ea83 0102 	eor.w	r1, r3, r2
    crc=crcu8( (ee_u8) (newval)             ,crc);
    398c:	fa5f fc80 	uxtb.w	ip, r0
    3990:	bf18      	it	ne
    3992:	460b      	movne	r3, r1
ee_u16 crc16(ee_s16 newval, ee_u16 crc) {
    3994:	b410      	push	{r4}
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3996:	ea83 045c 	eor.w	r4, r3, ip, lsr #1
    399a:	085b      	lsrs	r3, r3, #1
    399c:	f014 0f01 	tst.w	r4, #1
           crc |= 0x8000;
    39a0:	ea83 0102 	eor.w	r1, r3, r2
    39a4:	bf18      	it	ne
    39a6:	460b      	movne	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    39a8:	ea83 049c 	eor.w	r4, r3, ip, lsr #2
    39ac:	085b      	lsrs	r3, r3, #1
    39ae:	f014 0f01 	tst.w	r4, #1
           crc |= 0x8000;
    39b2:	ea83 0102 	eor.w	r1, r3, r2
    39b6:	bf18      	it	ne
    39b8:	460b      	movne	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    39ba:	ea83 04dc 	eor.w	r4, r3, ip, lsr #3
    39be:	085b      	lsrs	r3, r3, #1
    39c0:	f014 0f01 	tst.w	r4, #1
           crc |= 0x8000;
    39c4:	ea83 0102 	eor.w	r1, r3, r2
    39c8:	bf18      	it	ne
    39ca:	460b      	movne	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    39cc:	ea83 141c 	eor.w	r4, r3, ip, lsr #4
    39d0:	085b      	lsrs	r3, r3, #1
    39d2:	f014 0f01 	tst.w	r4, #1
           crc |= 0x8000;
    39d6:	ea83 0102 	eor.w	r1, r3, r2
    39da:	bf18      	it	ne
    39dc:	460b      	movne	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    39de:	ea83 145c 	eor.w	r4, r3, ip, lsr #5
    39e2:	085b      	lsrs	r3, r3, #1
    39e4:	f014 0f01 	tst.w	r4, #1
           crc |= 0x8000;
    39e8:	ea83 0102 	eor.w	r1, r3, r2
    39ec:	bf18      	it	ne
    39ee:	460b      	movne	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    39f0:	ea83 149c 	eor.w	r4, r3, ip, lsr #6
    39f4:	085b      	lsrs	r3, r3, #1
    39f6:	f014 0f01 	tst.w	r4, #1
           crc |= 0x8000;
    39fa:	ea83 0102 	eor.w	r1, r3, r2
    39fe:	bf18      	it	ne
    3a00:	460b      	movne	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3a02:	ea83 14dc 	eor.w	r4, r3, ip, lsr #7
    3a06:	085b      	lsrs	r3, r3, #1
    3a08:	f014 0f01 	tst.w	r4, #1
           crc |= 0x8000;
    3a0c:	ea83 0c02 	eor.w	ip, r3, r2
    3a10:	bf18      	it	ne
    3a12:	4663      	movne	r3, ip
    crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    3a14:	f3c0 2007 	ubfx	r0, r0, #8, #8
    3a18:	0859      	lsrs	r1, r3, #1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3a1a:	4043      	eors	r3, r0
    3a1c:	f013 0f01 	tst.w	r3, #1
    crc=crcu8( (ee_u8) ((newval)>>8)    ,crc);
    3a20:	fa5f fc80 	uxtb.w	ip, r0
           crc |= 0x8000;
    3a24:	ea81 0302 	eor.w	r3, r1, r2
    3a28:	bf08      	it	eq
    3a2a:	460b      	moveq	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3a2c:	ea83 045c 	eor.w	r4, r3, ip, lsr #1
    3a30:	0858      	lsrs	r0, r3, #1
    3a32:	f014 0f01 	tst.w	r4, #1
           crc |= 0x8000;
    3a36:	ea80 0302 	eor.w	r3, r0, r2
    3a3a:	bf08      	it	eq
    3a3c:	4603      	moveq	r3, r0
    3a3e:	085c      	lsrs	r4, r3, #1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3a40:	ea83 019c 	eor.w	r1, r3, ip, lsr #2
    3a44:	f011 0f01 	tst.w	r1, #1
           crc |= 0x8000;
    3a48:	ea84 0002 	eor.w	r0, r4, r2
    3a4c:	bf18      	it	ne
    3a4e:	4604      	movne	r4, r0
    3a50:	0863      	lsrs	r3, r4, #1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3a52:	ea84 01dc 	eor.w	r1, r4, ip, lsr #3
    3a56:	f011 0f01 	tst.w	r1, #1
           crc |= 0x8000;
    3a5a:	ea83 0402 	eor.w	r4, r3, r2
    3a5e:	bf18      	it	ne
    3a60:	4623      	movne	r3, r4
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3a62:	ea83 101c 	eor.w	r0, r3, ip, lsr #4
    3a66:	085b      	lsrs	r3, r3, #1
    3a68:	f010 0f01 	tst.w	r0, #1
           crc |= 0x8000;
    3a6c:	ea83 0102 	eor.w	r1, r3, r2
    3a70:	bf18      	it	ne
    3a72:	460b      	movne	r3, r1
    3a74:	0858      	lsrs	r0, r3, #1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3a76:	ea83 145c 	eor.w	r4, r3, ip, lsr #5
    3a7a:	f014 0f01 	tst.w	r4, #1
           crc |= 0x8000;
    3a7e:	ea80 0302 	eor.w	r3, r0, r2
    3a82:	bf18      	it	ne
    3a84:	4618      	movne	r0, r3
    3a86:	0844      	lsrs	r4, r0, #1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3a88:	ea80 119c 	eor.w	r1, r0, ip, lsr #6
    3a8c:	f011 0f01 	tst.w	r1, #1
           crc |= 0x8000;
    3a90:	ea84 0002 	eor.w	r0, r4, r2
    3a94:	bf18      	it	ne
    3a96:	4604      	movne	r4, r0
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
    3a98:	ea84 11dc 	eor.w	r1, r4, ip, lsr #7
    3a9c:	0863      	lsrs	r3, r4, #1
    return crcu16((ee_u16)newval, crc);
    3a9e:	f011 0f01 	tst.w	r1, #1
           crc |= 0x8000;
    3aa2:	ea83 0002 	eor.w	r0, r3, r2
}
    3aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
    3aaa:	bf08      	it	eq
    3aac:	4618      	moveq	r0, r3
    3aae:	4770      	bx	lr

00003ab0 <check_data_types>:
    }
    if (retval>0) {
        ee_printf("ERROR: Please modify the datatypes in core_portme.h!\n");
    }
    return retval;
}
    3ab0:	2000      	movs	r0, #0
    3ab2:	4770      	bx	lr

00003ab4 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
    3ab4:	e7fe      	b.n	3ab4 <am_nmi_isr>
    3ab6:	bf00      	nop

00003ab8 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    3ab8:	e7fe      	b.n	3ab8 <am_adc_isr>
    3aba:	bf00      	nop

00003abc <am_reset_isr>:
    __asm("    ldr    r0, =0xE000ED08\n"
    3abc:	4811      	ldr	r0, [pc, #68]	; (3b04 <zero_loop+0x12>)
    3abe:	4912      	ldr	r1, [pc, #72]	; (3b08 <zero_loop+0x16>)
    3ac0:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
    3ac2:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
    3ac6:	4811      	ldr	r0, [pc, #68]	; (3b0c <zero_loop+0x1a>)
    3ac8:	6801      	ldr	r1, [r0, #0]
    3aca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    3ace:	6001      	str	r1, [r0, #0]
    3ad0:	f3bf 8f4f 	dsb	sy
    3ad4:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
    3ad8:	480d      	ldr	r0, [pc, #52]	; (3b10 <zero_loop+0x1e>)
    3ada:	490e      	ldr	r1, [pc, #56]	; (3b14 <zero_loop+0x22>)
    3adc:	4a0e      	ldr	r2, [pc, #56]	; (3b18 <zero_loop+0x26>)

00003ade <copy_loop>:
    3ade:	f850 3b04 	ldr.w	r3, [r0], #4
    3ae2:	f841 3b04 	str.w	r3, [r1], #4
    3ae6:	4291      	cmp	r1, r2
    3ae8:	dbf9      	blt.n	3ade <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
    3aea:	480c      	ldr	r0, [pc, #48]	; (3b1c <zero_loop+0x2a>)
    3aec:	490c      	ldr	r1, [pc, #48]	; (3b20 <zero_loop+0x2e>)
    3aee:	f04f 0200 	mov.w	r2, #0

00003af2 <zero_loop>:
    3af2:	4288      	cmp	r0, r1
    3af4:	bfb8      	it	lt
    3af6:	f840 2b04 	strlt.w	r2, [r0], #4
    3afa:	dbfa      	blt.n	3af2 <zero_loop>
    main();
    3afc:	f7fd fd54 	bl	15a8 <main>
    __asm("    bkpt     ");
    3b00:	be00      	bkpt	0x0000
    3b02:	0000      	.short	0x0000
    3b04:	e000ed08 	.word	0xe000ed08
    3b08:	00000000 	.word	0x00000000
    3b0c:	e000ed88 	.word	0xe000ed88
    3b10:	00005f60 	.word	0x00005f60
    3b14:	10001000 	.word	0x10001000
    3b18:	10001048 	.word	0x10001048
    3b1c:	10001048 	.word	0x10001048
    3b20:	10001570 	.word	0x10001570

00003b24 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    3b24:	b510      	push	{r4, lr}
    3b26:	4604      	mov	r4, r0
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
    3b28:	f001 fb5c 	bl	51e4 <am_hal_clkgen_sysclk_get>
#endif
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    3b2c:	4b04      	ldr	r3, [pc, #16]	; (3b40 <am_util_delay_ms+0x1c>)
    3b2e:	fba3 3000 	umull	r3, r0, r3, r0
    3b32:	0980      	lsrs	r0, r0, #6

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    3b34:	fb04 f000 	mul.w	r0, r4, r0
}
    3b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_flash_delay(ui32Loops);
    3b3c:	f001 bb92 	b.w	5264 <am_hal_flash_delay>
    3b40:	057619f1 	.word	0x057619f1

00003b44 <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
    3b44:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
    3b46:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
    3b48:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    3b4a:	f000 f805 	bl	3b58 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
    3b4e:	bd01      	pop	{r0, pc}

00003b50 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    3b50:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    3b52:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    3b54:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    3b56:	4770      	bx	lr

00003b58 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    3b58:	b500      	push	{lr}
    3b5a:	b093      	sub	sp, #76	; 0x4c
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    3b5c:	2300      	movs	r3, #0
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    3b5e:	4a2d      	ldr	r2, [pc, #180]	; (3c14 <am_util_faultisr_collect_data+0xbc>)
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    3b60:	9310      	str	r3, [sp, #64]	; 0x40
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    3b62:	9301      	str	r3, [sp, #4]
    3b64:	9300      	str	r3, [sp, #0]
    3b66:	9302      	str	r3, [sp, #8]
    3b68:	9303      	str	r3, [sp, #12]
    3b6a:	9304      	str	r3, [sp, #16]
    3b6c:	9305      	str	r3, [sp, #20]
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    3b6e:	6811      	ldr	r1, [r2, #0]
    3b70:	9110      	str	r1, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    3b72:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3b74:	b2d9      	uxtb	r1, r3
    3b76:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    3b7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3b7c:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3b80:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    3b84:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3b86:	0c19      	lsrs	r1, r3, #16
    3b88:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    3b8c:	6912      	ldr	r2, [r2, #16]
    3b8e:	920f      	str	r2, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    3b90:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
    3b94:	078a      	lsls	r2, r1, #30
{
    3b96:	4603      	mov	r3, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    3b98:	d436      	bmi.n	3c08 <am_util_faultisr_collect_data+0xb0>
    3b9a:	f04f 32ff 	mov.w	r2, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    3b9e:	4619      	mov	r1, r3
    3ba0:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    3ba2:	920e      	str	r2, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    3ba4:	f7ff ffd4 	bl	3b50 <getStackedReg>
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    3ba8:	4619      	mov	r1, r3
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    3baa:	4602      	mov	r2, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    3bac:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    3bae:	9206      	str	r2, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    3bb0:	f7ff ffce 	bl	3b50 <getStackedReg>
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    3bb4:	4619      	mov	r1, r3
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    3bb6:	4602      	mov	r2, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    3bb8:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    3bba:	9207      	str	r2, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    3bbc:	f7ff ffc8 	bl	3b50 <getStackedReg>
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    3bc0:	4619      	mov	r1, r3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    3bc2:	4602      	mov	r2, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    3bc4:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    3bc6:	9208      	str	r2, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    3bc8:	f7ff ffc2 	bl	3b50 <getStackedReg>
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    3bcc:	4619      	mov	r1, r3
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    3bce:	4602      	mov	r2, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    3bd0:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    3bd2:	9209      	str	r2, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    3bd4:	f7ff ffbc 	bl	3b50 <getStackedReg>
    3bd8:	4602      	mov	r2, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    3bda:	4619      	mov	r1, r3
    3bdc:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    3bde:	920a      	str	r2, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    3be0:	f7ff ffb6 	bl	3b50 <getStackedReg>
    3be4:	4602      	mov	r2, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    3be6:	4619      	mov	r1, r3
    3be8:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    3bea:	920b      	str	r2, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    3bec:	f7ff ffb0 	bl	3b50 <getStackedReg>
    3bf0:	4602      	mov	r2, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    3bf2:	4619      	mov	r1, r3
    3bf4:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    3bf6:	920c      	str	r2, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    3bf8:	f7ff ffaa 	bl	3b50 <getStackedReg>
    3bfc:	4601      	mov	r1, r0
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
    3bfe:	4668      	mov	r0, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    3c00:	910d      	str	r1, [sp, #52]	; 0x34
    am_hal_mcuctrl_fault_status(&sHalFaultData);
    3c02:	f001 fb3b 	bl	527c <am_hal_mcuctrl_fault_status>
    3c06:	e7fe      	b.n	3c06 <am_util_faultisr_collect_data+0xae>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    3c08:	4601      	mov	r1, r0
    3c0a:	2006      	movs	r0, #6
    3c0c:	f7ff ffa0 	bl	3b50 <getStackedReg>
    3c10:	4602      	mov	r2, r0
    3c12:	e7c4      	b.n	3b9e <am_util_faultisr_collect_data+0x46>
    3c14:	e000ed28 	.word	0xe000ed28

00003c18 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    3c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c1c:	b095      	sub	sp, #84	; 0x54
    3c1e:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
    3c22:	4604      	mov	r4, r0
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    3c24:	2001      	movs	r0, #1
{
    3c26:	460d      	mov	r5, r1
    3c28:	920b      	str	r2, [sp, #44]	; 0x2c
    3c2a:	46f4      	mov	ip, lr
    3c2c:	900a      	str	r0, [sp, #40]	; 0x28
    3c2e:	e00b      	b.n	3c48 <uint64_to_str+0x30>
        tbuf[ix++] = uMod + '0';
    3c30:	f88c 3000 	strb.w	r3, [ip]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    3c34:	4604      	mov	r4, r0
    3c36:	2500      	movs	r5, #0
        ui64Val = u64Tmp;
    } while ( ui64Val );
    3c38:	2800      	cmp	r0, #0
    3c3a:	f000 8083 	beq.w	3d44 <uint64_to_str+0x12c>
    3c3e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3c40:	3101      	adds	r1, #1
    3c42:	910a      	str	r1, [sp, #40]	; 0x28
    3c44:	f10c 0c01 	add.w	ip, ip, #1
        q32 = (ui32Val>>1) + (ui32Val>>2);
    3c48:	08a3      	lsrs	r3, r4, #2
    3c4a:	eb03 0154 	add.w	r1, r3, r4, lsr #1
        q32 += (q32 >> 4);
    3c4e:	eb01 1211 	add.w	r2, r1, r1, lsr #4
        q32 += (q32 >> 8);
    3c52:	eb02 2612 	add.w	r6, r2, r2, lsr #8
        q32 += (q32 >> 16);
    3c56:	eb06 4716 	add.w	r7, r6, r6, lsr #16
        q32 >>= 3;
    3c5a:	08f8      	lsrs	r0, r7, #3
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    3c5c:	1da3      	adds	r3, r4, #6
        r32 = ui32Val - q32*10;
    3c5e:	eb00 0880 	add.w	r8, r0, r0, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    3c62:	eba3 0148 	sub.w	r1, r3, r8, lsl #1
    3c66:	eb00 1011 	add.w	r0, r0, r1, lsr #4
    if ( ui64Val >> 32 )
    3c6a:	462e      	mov	r6, r5
        uMod = ui64Val - (u64Tmp * 10);
    3c6c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    if ( ui64Val >> 32 )
    3c70:	2700      	movs	r7, #0
        uMod = ui64Val - (u64Tmp * 10);
    3c72:	eba4 0342 	sub.w	r3, r4, r2, lsl #1
    if ( ui64Val >> 32 )
    3c76:	ea56 0107 	orrs.w	r1, r6, r7
        tbuf[ix++] = uMod + '0';
    3c7a:	f103 0330 	add.w	r3, r3, #48	; 0x30
    if ( ui64Val >> 32 )
    3c7e:	d0d7      	beq.n	3c30 <uint64_to_str+0x18>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    3c80:	08a0      	lsrs	r0, r4, #2
    3c82:	ea40 7385 	orr.w	r3, r0, r5, lsl #30
    3c86:	08ae      	lsrs	r6, r5, #2
    3c88:	9304      	str	r3, [sp, #16]
    3c8a:	9605      	str	r6, [sp, #20]
    3c8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3c90:	086b      	lsrs	r3, r5, #1
    3c92:	ea4f 0234 	mov.w	r2, r4, rrx
    3c96:	1882      	adds	r2, r0, r2
    3c98:	eb41 0303 	adc.w	r3, r1, r3
        q64 += (q64 >> 4);
    3c9c:	0911      	lsrs	r1, r2, #4
    3c9e:	ea41 7003 	orr.w	r0, r1, r3, lsl #28
    3ca2:	1812      	adds	r2, r2, r0
    3ca4:	ea4f 1613 	mov.w	r6, r3, lsr #4
    3ca8:	4173      	adcs	r3, r6
        q64 += (q64 >> 8);
    3caa:	0a11      	lsrs	r1, r2, #8
    3cac:	ea41 6003 	orr.w	r0, r1, r3, lsl #24
    3cb0:	0a1e      	lsrs	r6, r3, #8
    3cb2:	9601      	str	r6, [sp, #4]
    3cb4:	9000      	str	r0, [sp, #0]
    3cb6:	e9dd 0100 	ldrd	r0, r1, [sp]
    3cba:	1882      	adds	r2, r0, r2
    3cbc:	4616      	mov	r6, r2
    3cbe:	eb41 0303 	adc.w	r3, r1, r3
        q64 += (q64 >> 16);
    3cc2:	0c31      	lsrs	r1, r6, #16
        q64 += (q64 >> 8);
    3cc4:	461a      	mov	r2, r3
        q64 += (q64 >> 16);
    3cc6:	ea41 4003 	orr.w	r0, r1, r3, lsl #16
    3cca:	0c1b      	lsrs	r3, r3, #16
    3ccc:	9303      	str	r3, [sp, #12]
    3cce:	9002      	str	r0, [sp, #8]
    3cd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3cd4:	eb10 0806 	adds.w	r8, r0, r6
    3cd8:	eb41 0302 	adc.w	r3, r1, r2
        q64 += (q64 >> 32);
    3cdc:	9308      	str	r3, [sp, #32]
    3cde:	9709      	str	r7, [sp, #36]	; 0x24
    3ce0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    3ce4:	eb10 0208 	adds.w	r2, r0, r8
    3ce8:	eb41 0303 	adc.w	r3, r1, r3
        q64 >>= 3;
    3cec:	08d1      	lsrs	r1, r2, #3
    3cee:	ea41 7643 	orr.w	r6, r1, r3, lsl #29
    3cf2:	08df      	lsrs	r7, r3, #3
        r64 = ui64Val - q64*10;
    3cf4:	00b8      	lsls	r0, r7, #2
    3cf6:	ea4f 0a86 	mov.w	sl, r6, lsl #2
    3cfa:	eb1a 0906 	adds.w	r9, sl, r6
    3cfe:	ea40 7896 	orr.w	r8, r0, r6, lsr #30
    3d02:	eb48 0307 	adc.w	r3, r8, r7
    3d06:	eb19 0209 	adds.w	r2, r9, r9
    3d0a:	415b      	adcs	r3, r3
        return q64 + ((r64 + 6) >> 4);
    3d0c:	f114 0b06 	adds.w	fp, r4, #6
    3d10:	f145 0500 	adc.w	r5, r5, #0
    3d14:	ebbb 0202 	subs.w	r2, fp, r2
    3d18:	eb65 0303 	sbc.w	r3, r5, r3
    3d1c:	0915      	lsrs	r5, r2, #4
    3d1e:	ea45 7203 	orr.w	r2, r5, r3, lsl #28
    3d22:	091b      	lsrs	r3, r3, #4
    3d24:	9206      	str	r2, [sp, #24]
    3d26:	9307      	str	r3, [sp, #28]
    3d28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    3d2c:	1996      	adds	r6, r2, r6
    3d2e:	eb43 0507 	adc.w	r5, r3, r7
        uMod = ui64Val - (u64Tmp * 10);
    3d32:	eb06 0786 	add.w	r7, r6, r6, lsl #2
    3d36:	eba4 0447 	sub.w	r4, r4, r7, lsl #1
        tbuf[ix++] = uMod + '0';
    3d3a:	3430      	adds	r4, #48	; 0x30
    3d3c:	f88c 4000 	strb.w	r4, [ip]
    3d40:	4634      	mov	r4, r6
    3d42:	e77c      	b.n	3c3e <uint64_to_str+0x26>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    3d44:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3d46:	980a      	ldr	r0, [sp, #40]	; 0x28
    3d48:	2e00      	cmp	r6, #0
    3d4a:	d059      	beq.n	3e00 <uint64_to_str+0x1e8>
    3d4c:	eb0e 0a00 	add.w	sl, lr, r0
    3d50:	46d3      	mov	fp, sl
    3d52:	ea6f 0c0e 	mvn.w	ip, lr
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
    3d56:	f81b 7d01 	ldrb.w	r7, [fp, #-1]!
    3d5a:	7037      	strb	r7, [r6, #0]
    3d5c:	44d4      	add	ip, sl
        while ( ix-- )
    3d5e:	45de      	cmp	lr, fp
    3d60:	4632      	mov	r2, r6
    3d62:	f00c 0107 	and.w	r1, ip, #7
    3d66:	bf08      	it	eq
    3d68:	4632      	moveq	r2, r6
    3d6a:	d047      	beq.n	3dfc <uint64_to_str+0x1e4>
    3d6c:	b349      	cbz	r1, 3dc2 <uint64_to_str+0x1aa>
    3d6e:	2901      	cmp	r1, #1
    3d70:	d021      	beq.n	3db6 <uint64_to_str+0x19e>
    3d72:	2902      	cmp	r1, #2
    3d74:	d01b      	beq.n	3dae <uint64_to_str+0x196>
    3d76:	2903      	cmp	r1, #3
    3d78:	d015      	beq.n	3da6 <uint64_to_str+0x18e>
    3d7a:	2904      	cmp	r1, #4
    3d7c:	d00f      	beq.n	3d9e <uint64_to_str+0x186>
    3d7e:	2905      	cmp	r1, #5
    3d80:	d009      	beq.n	3d96 <uint64_to_str+0x17e>
    3d82:	2906      	cmp	r1, #6
            *pcBuf++ = tbuf[ix];
    3d84:	bf1c      	itt	ne
    3d86:	f81b 1d01 	ldrbne.w	r1, [fp, #-1]!
    3d8a:	f802 1f01 	strbne.w	r1, [r2, #1]!
    3d8e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    3d92:	f802 3f01 	strb.w	r3, [r2, #1]!
    3d96:	f81b 6d01 	ldrb.w	r6, [fp, #-1]!
    3d9a:	f802 6f01 	strb.w	r6, [r2, #1]!
    3d9e:	f81b 4d01 	ldrb.w	r4, [fp, #-1]!
    3da2:	f802 4f01 	strb.w	r4, [r2, #1]!
    3da6:	f81b 7d01 	ldrb.w	r7, [fp, #-1]!
    3daa:	f802 7f01 	strb.w	r7, [r2, #1]!
    3dae:	f81b 5d01 	ldrb.w	r5, [fp, #-1]!
    3db2:	f802 5f01 	strb.w	r5, [r2, #1]!
    3db6:	f81b 8d01 	ldrb.w	r8, [fp, #-1]!
    3dba:	f802 8f01 	strb.w	r8, [r2, #1]!
        while ( ix-- )
    3dbe:	45de      	cmp	lr, fp
    3dc0:	d01b      	beq.n	3dfa <uint64_to_str+0x1e2>
            *pcBuf++ = tbuf[ix];
    3dc2:	f81b 1c01 	ldrb.w	r1, [fp, #-1]
    3dc6:	f81b 3c02 	ldrb.w	r3, [fp, #-2]
    3dca:	f81b 9c03 	ldrb.w	r9, [fp, #-3]
    3dce:	f81b 7c04 	ldrb.w	r7, [fp, #-4]
    3dd2:	f81b 6c05 	ldrb.w	r6, [fp, #-5]
    3dd6:	f81b 5c06 	ldrb.w	r5, [fp, #-6]
    3dda:	f81b 4c07 	ldrb.w	r4, [fp, #-7]
    3dde:	f81b ad08 	ldrb.w	sl, [fp, #-8]!
    3de2:	7051      	strb	r1, [r2, #1]
        while ( ix-- )
    3de4:	45de      	cmp	lr, fp
            *pcBuf++ = tbuf[ix];
    3de6:	7093      	strb	r3, [r2, #2]
    3de8:	f882 9003 	strb.w	r9, [r2, #3]
    3dec:	7117      	strb	r7, [r2, #4]
    3dee:	7156      	strb	r6, [r2, #5]
    3df0:	7195      	strb	r5, [r2, #6]
    3df2:	71d4      	strb	r4, [r2, #7]
    3df4:	f802 af08 	strb.w	sl, [r2, #8]!
        while ( ix-- )
    3df8:	d1e3      	bne.n	3dc2 <uint64_to_str+0x1aa>
    3dfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    3dfc:	2100      	movs	r1, #0
    3dfe:	5411      	strb	r1, [r2, r0]
    }

    return iNumDig;
}
    3e00:	b015      	add	sp, #84	; 0x54
    3e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e06:	bf00      	nop

00003e08 <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
    3e08:	4b01      	ldr	r3, [pc, #4]	; (3e10 <am_util_stdio_printf_init+0x8>)
    3e0a:	6018      	str	r0, [r3, #0]
    3e0c:	4770      	bx	lr
    3e0e:	bf00      	nop
    3e10:	1000156c 	.word	0x1000156c

00003e14 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    3e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e18:	4680      	mov	r8, r0
    3e1a:	b0b1      	sub	sp, #196	; 0xc4
    3e1c:	4693      	mov	fp, r2
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    3e1e:	f04f 0900 	mov.w	r9, #0
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    3e22:	780b      	ldrb	r3, [r1, #0]
    3e24:	b183      	cbz	r3, 3e48 <am_util_stdio_vsprintf+0x34>
    {
        iPrecision = 6;             // printf() default precision for %f is 6

        if ( *pcFmt != '%' )
    3e26:	2b25      	cmp	r3, #37	; 0x25
    3e28:	d017      	beq.n	3e5a <am_util_stdio_vsprintf+0x46>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    3e2a:	f1b8 0f00 	cmp.w	r8, #0
    3e2e:	d005      	beq.n	3e3c <am_util_stdio_vsprintf+0x28>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    3e30:	2b0a      	cmp	r3, #10
    3e32:	d038      	beq.n	3ea6 <am_util_stdio_vsprintf+0x92>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
    3e34:	f888 3000 	strb.w	r3, [r8]
    3e38:	f108 0801 	add.w	r8, r8, #1
            }

            ++pcFmt;
    3e3c:	3101      	adds	r1, #1
    while ( *pcFmt != 0x0 )
    3e3e:	780b      	ldrb	r3, [r1, #0]
            ++ui32CharCnt;
    3e40:	f109 0901 	add.w	r9, r9, #1
    while ( *pcFmt != 0x0 )
    3e44:	2b00      	cmp	r3, #0
    3e46:	d1ee      	bne.n	3e26 <am_util_stdio_vsprintf+0x12>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    3e48:	f1b8 0f00 	cmp.w	r8, #0
    3e4c:	d001      	beq.n	3e52 <am_util_stdio_vsprintf+0x3e>
    {
        *pcBuf = 0x0;
    3e4e:	f888 3000 	strb.w	r3, [r8]
    }

    return (ui32CharCnt);
}
    3e52:	4648      	mov	r0, r9
    3e54:	b031      	add	sp, #196	; 0xc4
    3e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( *pcFmt == '0' )
    3e5a:	784a      	ldrb	r2, [r1, #1]
    3e5c:	2a30      	cmp	r2, #48	; 0x30
    3e5e:	d03b      	beq.n	3ed8 <am_util_stdio_vsprintf+0xc4>
        ++pcFmt;
    3e60:	1c4e      	adds	r6, r1, #1
        ui8PadChar = ' ';
    3e62:	2520      	movs	r5, #32
    if ( *pcStr == '-')
    3e64:	2a2d      	cmp	r2, #45	; 0x2d
    3e66:	d02c      	beq.n	3ec2 <am_util_stdio_vsprintf+0xae>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    3e68:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    3e6c:	2809      	cmp	r0, #9
    3e6e:	d837      	bhi.n	3ee0 <am_util_stdio_vsprintf+0xcc>
    uint32_t ui32Val = 0, uCnt = 0;
    3e70:	2100      	movs	r1, #0
    bool bNeg = false;
    3e72:	468e      	mov	lr, r1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    3e74:	4630      	mov	r0, r6
        bNeg = true;
    3e76:	f04f 0c00 	mov.w	ip, #0
        ui32Val *= 10;
    3e7a:	eb0c 078c 	add.w	r7, ip, ip, lsl #2
        ui32Val += (*pcStr - '0');
    3e7e:	eb02 0a47 	add.w	sl, r2, r7, lsl #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    3e82:	f810 2f01 	ldrb.w	r2, [r0, #1]!
    3e86:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
    3e8a:	2c09      	cmp	r4, #9
        ++uCnt;
    3e8c:	f101 0101 	add.w	r1, r1, #1
        ui32Val += (*pcStr - '0');
    3e90:	f1aa 0c30 	sub.w	ip, sl, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    3e94:	d9f1      	bls.n	3e7a <am_util_stdio_vsprintf+0x66>
    3e96:	440e      	add	r6, r1
    return bNeg ? -ui32Val : ui32Val;
    3e98:	f1be 0f00 	cmp.w	lr, #0
    3e9c:	f041 80a1 	bne.w	4fe2 <am_util_stdio_vsprintf+0x11ce>
    3ea0:	4664      	mov	r4, ip
    3ea2:	7832      	ldrb	r2, [r6, #0]
    3ea4:	e01e      	b.n	3ee4 <am_util_stdio_vsprintf+0xd0>
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    3ea6:	4ebd      	ldr	r6, [pc, #756]	; (419c <am_util_stdio_vsprintf+0x388>)
    3ea8:	7837      	ldrb	r7, [r6, #0]
    3eaa:	2f00      	cmp	r7, #0
    3eac:	d0c2      	beq.n	3e34 <am_util_stdio_vsprintf+0x20>
                    *pcBuf++ = '\r';
    3eae:	f04f 0c0d 	mov.w	ip, #13
    3eb2:	f888 c000 	strb.w	ip, [r8]
    3eb6:	780b      	ldrb	r3, [r1, #0]
                    ++ui32CharCnt;
    3eb8:	f109 0901 	add.w	r9, r9, #1
                    *pcBuf++ = '\r';
    3ebc:	f108 0801 	add.w	r8, r8, #1
    3ec0:	e7b8      	b.n	3e34 <am_util_stdio_vsprintf+0x20>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    3ec2:	7872      	ldrb	r2, [r6, #1]
    3ec4:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
    3ec8:	2c09      	cmp	r4, #9
        pcStr++;
    3eca:	f106 0001 	add.w	r0, r6, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    3ece:	f200 8611 	bhi.w	4af4 <am_util_stdio_vsprintf+0xce0>
        uCnt++;
    3ed2:	2101      	movs	r1, #1
        bNeg = true;
    3ed4:	468e      	mov	lr, r1
    3ed6:	e7ce      	b.n	3e76 <am_util_stdio_vsprintf+0x62>
    3ed8:	788a      	ldrb	r2, [r1, #2]
            ++pcFmt;
    3eda:	1c8e      	adds	r6, r1, #2
            ui8PadChar = '0';
    3edc:	2530      	movs	r5, #48	; 0x30
    3ede:	e7c1      	b.n	3e64 <am_util_stdio_vsprintf+0x50>
    3ee0:	7832      	ldrb	r2, [r6, #0]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    3ee2:	2400      	movs	r4, #0
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    3ee4:	2a73      	cmp	r2, #115	; 0x73
    3ee6:	f000 8304 	beq.w	44f2 <am_util_stdio_vsprintf+0x6de>
    3eea:	ea84 73e4 	eor.w	r3, r4, r4, asr #31
        if (*pcFmt == '.')
    3eee:	2a2e      	cmp	r2, #46	; 0x2e
    3ef0:	eba3 77e4 	sub.w	r7, r3, r4, asr #31
    3ef4:	f000 82ae 	beq.w	4454 <am_util_stdio_vsprintf+0x640>
        iPrecision = 6;             // printf() default precision for %f is 6
    3ef8:	f04f 0a06 	mov.w	sl, #6
        if ( *pcFmt == 'l' )
    3efc:	2a6c      	cmp	r2, #108	; 0x6c
    3efe:	f000 82a3 	beq.w	4448 <am_util_stdio_vsprintf+0x634>
        switch ( *pcFmt )
    3f02:	f1a2 0046 	sub.w	r0, r2, #70	; 0x46
    3f06:	2832      	cmp	r0, #50	; 0x32
    3f08:	f200 8294 	bhi.w	4434 <am_util_stdio_vsprintf+0x620>
    3f0c:	e8df f010 	tbh	[pc, r0, lsl #1]
    3f10:	02920115 	.word	0x02920115
    3f14:	02920292 	.word	0x02920292
    3f18:	02920292 	.word	0x02920292
    3f1c:	02920292 	.word	0x02920292
    3f20:	02920292 	.word	0x02920292
    3f24:	02920292 	.word	0x02920292
    3f28:	02920292 	.word	0x02920292
    3f2c:	02920292 	.word	0x02920292
    3f30:	02920292 	.word	0x02920292
    3f34:	02920033 	.word	0x02920033
    3f38:	02920292 	.word	0x02920292
    3f3c:	02920292 	.word	0x02920292
    3f40:	02920292 	.word	0x02920292
    3f44:	02920292 	.word	0x02920292
    3f48:	01360292 	.word	0x01360292
    3f4c:	0292014a 	.word	0x0292014a
    3f50:	02920115 	.word	0x02920115
    3f54:	014a0292 	.word	0x014a0292
    3f58:	02920292 	.word	0x02920292
    3f5c:	02920292 	.word	0x02920292
    3f60:	02920292 	.word	0x02920292
    3f64:	02920292 	.word	0x02920292
    3f68:	02f00292 	.word	0x02f00292
    3f6c:	01f20292 	.word	0x01f20292
    3f70:	02920292 	.word	0x02920292
    3f74:	01ef      	.short	0x01ef
        bLower = bLongLong = false;
    3f76:	f04f 0c00 	mov.w	ip, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    3f7a:	f8db 2000 	ldr.w	r2, [fp]
    3f7e:	2300      	movs	r3, #0
                                      va_arg(pArgs, uint32_t);
    3f80:	f10b 0b04 	add.w	fp, fp, #4
                if ( iWidth )
    3f84:	2c00      	cmp	r4, #0
    3f86:	d06d      	beq.n	4064 <am_util_stdio_vsprintf+0x250>
    int iDigits = ui64Val ? 0 : 1;
    3f88:	ea52 0103 	orrs.w	r1, r2, r3
    3f8c:	bf0c      	ite	eq
    3f8e:	f04f 0e01 	moveq.w	lr, #1
    3f92:	f04f 0e00 	movne.w	lr, #0
    while ( ui64Val )
    3f96:	ea52 0103 	orrs.w	r1, r2, r3
    3f9a:	d00b      	beq.n	3fb4 <am_util_stdio_vsprintf+0x1a0>
    3f9c:	4610      	mov	r0, r2
    3f9e:	4619      	mov	r1, r3
        ui64Val >>= 4;
    3fa0:	090c      	lsrs	r4, r1, #4
    3fa2:	0900      	lsrs	r0, r0, #4
    3fa4:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
    3fa8:	4621      	mov	r1, r4
    while ( ui64Val )
    3faa:	ea50 0401 	orrs.w	r4, r0, r1
        ++iDigits;
    3fae:	f10e 0e01 	add.w	lr, lr, #1
    while ( ui64Val )
    3fb2:	d1f5      	bne.n	3fa0 <am_util_stdio_vsprintf+0x18c>
                    iWidth -= ndigits_in_hex(ui64Val);
    3fb4:	eba7 070e 	sub.w	r7, r7, lr
    if ( i32NumChars <= 0 )
    3fb8:	2f00      	cmp	r7, #0
    3fba:	f340 855f 	ble.w	4a7c <am_util_stdio_vsprintf+0xc68>
    while ( i32NumChars-- )
    3fbe:	f107 3aff 	add.w	sl, r7, #4294967295
        if ( pcBuf )
    3fc2:	f1b8 0f00 	cmp.w	r8, #0
    3fc6:	f000 855a 	beq.w	4a7e <am_util_stdio_vsprintf+0xc6a>
            *pcBuf++ = cPadChar;
    3fca:	4641      	mov	r1, r8
    3fcc:	f00a 0707 	and.w	r7, sl, #7
    3fd0:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    3fd4:	f10a 30ff 	add.w	r0, sl, #4294967295
    3fd8:	eba1 0408 	sub.w	r4, r1, r8
    3fdc:	f1ba 0f00 	cmp.w	sl, #0
    3fe0:	d03d      	beq.n	405e <am_util_stdio_vsprintf+0x24a>
    3fe2:	b32f      	cbz	r7, 4030 <am_util_stdio_vsprintf+0x21c>
    3fe4:	2f01      	cmp	r7, #1
    3fe6:	d01c      	beq.n	4022 <am_util_stdio_vsprintf+0x20e>
    3fe8:	2f02      	cmp	r7, #2
    3fea:	d017      	beq.n	401c <am_util_stdio_vsprintf+0x208>
    3fec:	2f03      	cmp	r7, #3
    3fee:	d012      	beq.n	4016 <am_util_stdio_vsprintf+0x202>
    3ff0:	2f04      	cmp	r7, #4
    3ff2:	d00d      	beq.n	4010 <am_util_stdio_vsprintf+0x1fc>
    3ff4:	2f05      	cmp	r7, #5
    3ff6:	d008      	beq.n	400a <am_util_stdio_vsprintf+0x1f6>
    3ff8:	2f06      	cmp	r7, #6
            *pcBuf++ = cPadChar;
    3ffa:	bf1c      	itt	ne
    3ffc:	f801 5b01 	strbne.w	r5, [r1], #1
    while ( i32NumChars-- )
    4000:	f100 30ff 	addne.w	r0, r0, #4294967295
            *pcBuf++ = cPadChar;
    4004:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    4008:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
    400a:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    400e:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
    4010:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    4014:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
    4016:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    401a:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
    401c:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    4020:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
    4022:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
    4026:	3801      	subs	r0, #1
    4028:	1c47      	adds	r7, r0, #1
    402a:	eba1 0408 	sub.w	r4, r1, r8
    402e:	d016      	beq.n	405e <am_util_stdio_vsprintf+0x24a>
            *pcBuf++ = cPadChar;
    4030:	468a      	mov	sl, r1
    while ( i32NumChars-- )
    4032:	3808      	subs	r0, #8
            *pcBuf++ = cPadChar;
    4034:	f80a 5b01 	strb.w	r5, [sl], #1
    4038:	3108      	adds	r1, #8
    403a:	f88a 5000 	strb.w	r5, [sl]
    403e:	f801 5c06 	strb.w	r5, [r1, #-6]
    4042:	f801 5c05 	strb.w	r5, [r1, #-5]
    4046:	f801 5c04 	strb.w	r5, [r1, #-4]
    404a:	f801 5c03 	strb.w	r5, [r1, #-3]
    404e:	f801 5c02 	strb.w	r5, [r1, #-2]
    while ( i32NumChars-- )
    4052:	1c47      	adds	r7, r0, #1
    4054:	eba1 0408 	sub.w	r4, r1, r8
            *pcBuf++ = cPadChar;
    4058:	f801 5c01 	strb.w	r5, [r1, #-1]
    while ( i32NumChars-- )
    405c:	d1e8      	bne.n	4030 <am_util_stdio_vsprintf+0x21c>
    405e:	4627      	mov	r7, r4
                    pcBuf += pcBuf ? iWidth : 0;
    4060:	44a0      	add	r8, r4
                    ui32CharCnt += iWidth;
    4062:	44b9      	add	r9, r7
    if ( ui64Val == 0 )
    4064:	ea52 0103 	orrs.w	r1, r2, r3
    4068:	f040 821a 	bne.w	44a0 <am_util_stdio_vsprintf+0x68c>
        tbuf[ix++] = '0';   // Print a '0'
    406c:	f04f 0530 	mov.w	r5, #48	; 0x30
    4070:	f88d 50ac 	strb.w	r5, [sp, #172]	; 0xac
    if (pcBuf)
    4074:	2701      	movs	r7, #1
    4076:	f1b8 0f00 	cmp.w	r8, #0
    407a:	f000 8235 	beq.w	44e8 <am_util_stdio_vsprintf+0x6d4>
    407e:	4639      	mov	r1, r7
        while (ix--)
    4080:	2000      	movs	r0, #0
    4082:	ac2b      	add	r4, sp, #172	; 0xac
    4084:	1863      	adds	r3, r4, r1
    4086:	f103 3aff 	add.w	sl, r3, #4294967295
            *pcBuf++ = tbuf[ix];
    408a:	f813 cc01 	ldrb.w	ip, [r3, #-1]
    408e:	f888 c000 	strb.w	ip, [r8]
    4092:	1e4d      	subs	r5, r1, #1
        while (ix--)
    4094:	45a2      	cmp	sl, r4
    4096:	f005 0107 	and.w	r1, r5, #7
    409a:	4643      	mov	r3, r8
    409c:	d047      	beq.n	412e <am_util_stdio_vsprintf+0x31a>
    409e:	b359      	cbz	r1, 40f8 <am_util_stdio_vsprintf+0x2e4>
    40a0:	2901      	cmp	r1, #1
    40a2:	d023      	beq.n	40ec <am_util_stdio_vsprintf+0x2d8>
    40a4:	2902      	cmp	r1, #2
    40a6:	d01d      	beq.n	40e4 <am_util_stdio_vsprintf+0x2d0>
    40a8:	2903      	cmp	r1, #3
    40aa:	d017      	beq.n	40dc <am_util_stdio_vsprintf+0x2c8>
    40ac:	2904      	cmp	r1, #4
    40ae:	d011      	beq.n	40d4 <am_util_stdio_vsprintf+0x2c0>
    40b0:	2905      	cmp	r1, #5
    40b2:	d00b      	beq.n	40cc <am_util_stdio_vsprintf+0x2b8>
    40b4:	2906      	cmp	r1, #6
    40b6:	d005      	beq.n	40c4 <am_util_stdio_vsprintf+0x2b0>
            *pcBuf++ = tbuf[ix];
    40b8:	f81a 2d01 	ldrb.w	r2, [sl, #-1]!
    40bc:	f888 2001 	strb.w	r2, [r8, #1]
    40c0:	f108 0301 	add.w	r3, r8, #1
    40c4:	f81a 5d01 	ldrb.w	r5, [sl, #-1]!
    40c8:	f803 5f01 	strb.w	r5, [r3, #1]!
    40cc:	f81a cd01 	ldrb.w	ip, [sl, #-1]!
    40d0:	f803 cf01 	strb.w	ip, [r3, #1]!
    40d4:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
    40d8:	f803 1f01 	strb.w	r1, [r3, #1]!
    40dc:	f81a 2d01 	ldrb.w	r2, [sl, #-1]!
    40e0:	f803 2f01 	strb.w	r2, [r3, #1]!
    40e4:	f81a 5d01 	ldrb.w	r5, [sl, #-1]!
    40e8:	f803 5f01 	strb.w	r5, [r3, #1]!
    40ec:	f81a cd01 	ldrb.w	ip, [sl, #-1]!
    40f0:	f803 cf01 	strb.w	ip, [r3, #1]!
        while (ix--)
    40f4:	45a2      	cmp	sl, r4
    40f6:	d01a      	beq.n	412e <am_util_stdio_vsprintf+0x31a>
            *pcBuf++ = tbuf[ix];
    40f8:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
    40fc:	f81a 5c03 	ldrb.w	r5, [sl, #-3]
    4100:	f81a 1c02 	ldrb.w	r1, [sl, #-2]
    4104:	705a      	strb	r2, [r3, #1]
    4106:	70dd      	strb	r5, [r3, #3]
    4108:	f81a 2c04 	ldrb.w	r2, [sl, #-4]
    410c:	f81a 5c05 	ldrb.w	r5, [sl, #-5]
    4110:	7099      	strb	r1, [r3, #2]
    4112:	711a      	strb	r2, [r3, #4]
    4114:	f81a 1c06 	ldrb.w	r1, [sl, #-6]
    4118:	715d      	strb	r5, [r3, #5]
    411a:	f81a 2c07 	ldrb.w	r2, [sl, #-7]
    411e:	f81a 5d08 	ldrb.w	r5, [sl, #-8]!
    4122:	7199      	strb	r1, [r3, #6]
        while (ix--)
    4124:	45a2      	cmp	sl, r4
            *pcBuf++ = tbuf[ix];
    4126:	71da      	strb	r2, [r3, #7]
    4128:	f803 5f08 	strb.w	r5, [r3, #8]!
        while (ix--)
    412c:	d1e4      	bne.n	40f8 <am_util_stdio_vsprintf+0x2e4>
        *pcBuf = 0;
    412e:	4440      	add	r0, r8
    4130:	2400      	movs	r4, #0
                    pcBuf += iVal;
    4132:	44b8      	add	r8, r7
        *pcBuf = 0;
    4134:	7044      	strb	r4, [r0, #1]
                ui32CharCnt += iVal;
    4136:	44b9      	add	r9, r7
                break;
    4138:	e01e      	b.n	4178 <am_util_stdio_vsprintf+0x364>
                if ( pcBuf )
    413a:	f1b8 0f00 	cmp.w	r8, #0
    413e:	d01b      	beq.n	4178 <am_util_stdio_vsprintf+0x364>
                    float fValue = va_arg(pArgs, double);
    4140:	f10b 0307 	add.w	r3, fp, #7
    4144:	f023 0b07 	bic.w	fp, r3, #7
    4148:	e9db 0100 	ldrd	r0, r1, [fp]
    414c:	f7fc fc2a 	bl	9a4 <__aeabi_d2f>
    4150:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
    4154:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
    4158:	2014      	movs	r0, #20
    if (fValue == 0.0f)
    415a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    float fValue = va_arg(pArgs, double);
    415e:	f10b 0b08 	add.w	fp, fp, #8
                    *(uint32_t*)pcBuf = 20;
    4162:	f8c8 0000 	str.w	r0, [r8]
    if (fValue == 0.0f)
    4166:	f040 848d 	bne.w	4a84 <am_util_stdio_vsprintf+0xc70>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    416a:	490d      	ldr	r1, [pc, #52]	; (41a0 <am_util_stdio_vsprintf+0x38c>)
    416c:	f8c8 1000 	str.w	r1, [r8]
    4170:	f04f 0a03 	mov.w	sl, #3
                    ui32CharCnt += iVal;
    4174:	44d1      	add	r9, sl
                    pcBuf += iVal;
    4176:	44d0      	add	r8, sl
        ++pcFmt;
    4178:	1c71      	adds	r1, r6, #1
    417a:	e652      	b.n	3e22 <am_util_stdio_vsprintf+0xe>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    417c:	f10b 0404 	add.w	r4, fp, #4
    4180:	f89b 1000 	ldrb.w	r1, [fp]
                if ( pcBuf )
    4184:	f1b8 0f00 	cmp.w	r8, #0
    4188:	d003      	beq.n	4192 <am_util_stdio_vsprintf+0x37e>
                    *pcBuf++ = ui8CharSpecifier;
    418a:	f888 1000 	strb.w	r1, [r8]
    418e:	f108 0801 	add.w	r8, r8, #1
                ++ui32CharCnt;
    4192:	f109 0901 	add.w	r9, r9, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    4196:	46a3      	mov	fp, r4
                break;
    4198:	e7ee      	b.n	4178 <am_util_stdio_vsprintf+0x364>
    419a:	bf00      	nop
    419c:	10001064 	.word	0x10001064
    41a0:	00302e30 	.word	0x00302e30
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    41a4:	f8db 0000 	ldr.w	r0, [fp]
                                     va_arg(pArgs, int32_t);
    41a8:	f10b 0b04 	add.w	fp, fp, #4
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    41ac:	17c1      	asrs	r1, r0, #31
                if ( i64Val < 0 )
    41ae:	2800      	cmp	r0, #0
    41b0:	f171 0300 	sbcs.w	r3, r1, #0
    41b4:	f2c0 83ac 	blt.w	4910 <am_util_stdio_vsprintf+0xafc>
                    ui64Val = i64Val;
    41b8:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
                if ( iWidth )
    41bc:	2c00      	cmp	r4, #0
    41be:	f000 83ba 	beq.w	4936 <am_util_stdio_vsprintf+0xb22>
    int iNDigits = ui64Val ? 0 : 1;
    41c2:	ea50 0301 	orrs.w	r3, r0, r1
    return ndigits_in_u64((uint64_t) i64Val);
    41c6:	4602      	mov	r2, r0
    int iNDigits = ui64Val ? 0 : 1;
    41c8:	bf0c      	ite	eq
    41ca:	2401      	moveq	r4, #1
    41cc:	2400      	movne	r4, #0
    while ( ui64Val )
    41ce:	4308      	orrs	r0, r1
    return ndigits_in_u64((uint64_t) i64Val);
    41d0:	460b      	mov	r3, r1
                    bNeg = false;
    41d2:	bf18      	it	ne
    41d4:	2000      	movne	r0, #0
    while ( ui64Val )
    41d6:	f000 86ba 	beq.w	4f4e <am_util_stdio_vsprintf+0x113a>
                    bNeg = false;
    41da:	901b      	str	r0, [sp, #108]	; 0x6c
    41dc:	9620      	str	r6, [sp, #128]	; 0x80
    41de:	9521      	str	r5, [sp, #132]	; 0x84
    41e0:	9722      	str	r7, [sp, #136]	; 0x88
    41e2:	941a      	str	r4, [sp, #104]	; 0x68
    41e4:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
    41e8:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
    41ec:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
    41f0:	e009      	b.n	4206 <am_util_stdio_vsprintf+0x3f2>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    41f2:	464a      	mov	r2, r9
    41f4:	2300      	movs	r3, #0
        ++iNDigits;
    41f6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    while ( ui64Val )
    41f8:	ea52 0103 	orrs.w	r1, r2, r3
        ++iNDigits;
    41fc:	f105 0501 	add.w	r5, r5, #1
    4200:	951a      	str	r5, [sp, #104]	; 0x68
    while ( ui64Val )
    4202:	f000 83a5 	beq.w	4950 <am_util_stdio_vsprintf+0xb3c>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    4206:	0896      	lsrs	r6, r2, #2
    4208:	ea46 7583 	orr.w	r5, r6, r3, lsl #30
    420c:	089f      	lsrs	r7, r3, #2
    420e:	970b      	str	r7, [sp, #44]	; 0x2c
    4210:	950a      	str	r5, [sp, #40]	; 0x28
    4212:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
    4216:	0859      	lsrs	r1, r3, #1
    4218:	ea4f 0032 	mov.w	r0, r2, rrx
    421c:	1820      	adds	r0, r4, r0
    421e:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 4);
    4222:	0904      	lsrs	r4, r0, #4
        q64 = (ui64Val>>1) + (ui64Val>>2);
    4224:	4606      	mov	r6, r0
        q64 += (q64 >> 4);
    4226:	ea44 7501 	orr.w	r5, r4, r1, lsl #28
    422a:	0908      	lsrs	r0, r1, #4
    422c:	9005      	str	r0, [sp, #20]
    422e:	9504      	str	r5, [sp, #16]
    4230:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    4234:	19a0      	adds	r0, r4, r6
    4236:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 8);
    423a:	0a04      	lsrs	r4, r0, #8
        q64 += (q64 >> 4);
    423c:	4606      	mov	r6, r0
        q64 += (q64 >> 8);
    423e:	ea44 6501 	orr.w	r5, r4, r1, lsl #24
    4242:	0a08      	lsrs	r0, r1, #8
    4244:	9007      	str	r0, [sp, #28]
    4246:	9506      	str	r5, [sp, #24]
    4248:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
    424c:	19a0      	adds	r0, r4, r6
    424e:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 16);
    4252:	0c06      	lsrs	r6, r0, #16
    4254:	ea46 4a01 	orr.w	sl, r6, r1, lsl #16
    4258:	eb10 070a 	adds.w	r7, r0, sl
    425c:	ea4f 4b11 	mov.w	fp, r1, lsr #16
    4260:	eb41 000b 	adc.w	r0, r1, fp
        q64 += (q64 >> 32);
    4264:	2400      	movs	r4, #0
    4266:	900e      	str	r0, [sp, #56]	; 0x38
    4268:	940f      	str	r4, [sp, #60]	; 0x3c
    426a:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
        q32 = (ui32Val>>1) + (ui32Val>>2);
    426e:	0895      	lsrs	r5, r2, #2
        q64 += (q64 >> 32);
    4270:	eb18 0807 	adds.w	r8, r8, r7
    4274:	eb49 0100 	adc.w	r1, r9, r0
        q32 = (ui32Val>>1) + (ui32Val>>2);
    4278:	eb05 0c52 	add.w	ip, r5, r2, lsr #1
        q64 += (q64 >> 32);
    427c:	4646      	mov	r6, r8
        q32 += (q32 >> 4);
    427e:	eb0c 101c 	add.w	r0, ip, ip, lsr #4
        q64 += (q64 >> 32);
    4282:	460f      	mov	r7, r1
        q32 += (q32 >> 8);
    4284:	eb00 2510 	add.w	r5, r0, r0, lsr #8
        q64 >>= 3;
    4288:	08f4      	lsrs	r4, r6, #3
    if ( ui64Val >> 32 )
    428a:	9312      	str	r3, [sp, #72]	; 0x48
    428c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
        q64 >>= 3;
    4290:	08ff      	lsrs	r7, r7, #3
    4292:	ea44 7641 	orr.w	r6, r4, r1, lsl #29
    4296:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
        q32 += (q32 >> 16);
    429a:	eb05 4415 	add.w	r4, r5, r5, lsr #16
        r64 = ui64Val - q64*10;
    429e:	00bd      	lsls	r5, r7, #2
    42a0:	ea45 7196 	orr.w	r1, r5, r6, lsr #30
        q32 >>= 3;
    42a4:	08e5      	lsrs	r5, r4, #3
        r32 = ui32Val - q32*10;
    42a6:	eb05 0485 	add.w	r4, r5, r5, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    42aa:	f102 0e06 	add.w	lr, r2, #6
    42ae:	ebae 0c44 	sub.w	ip, lr, r4, lsl #1
    42b2:	ea58 0409 	orrs.w	r4, r8, r9
        r64 = ui64Val - q64*10;
    42b6:	ea4f 0086 	mov.w	r0, r6, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    42ba:	eb05 191c 	add.w	r9, r5, ip, lsr #4
    42be:	d098      	beq.n	41f2 <am_util_stdio_vsprintf+0x3de>
        r64 = ui64Val - q64*10;
    42c0:	eb10 0e06 	adds.w	lr, r0, r6
    42c4:	4179      	adcs	r1, r7
    42c6:	eb1e 000e 	adds.w	r0, lr, lr
    42ca:	4149      	adcs	r1, r1
        return q64 + ((r64 + 6) >> 4);
    42cc:	3206      	adds	r2, #6
    42ce:	f143 0300 	adc.w	r3, r3, #0
    42d2:	1a15      	subs	r5, r2, r0
    42d4:	eb63 0401 	sbc.w	r4, r3, r1
    42d8:	0929      	lsrs	r1, r5, #4
    42da:	0922      	lsrs	r2, r4, #4
    42dc:	ea41 7004 	orr.w	r0, r1, r4, lsl #28
    42e0:	9016      	str	r0, [sp, #88]	; 0x58
    42e2:	9217      	str	r2, [sp, #92]	; 0x5c
    42e4:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    42e8:	1992      	adds	r2, r2, r6
    42ea:	417b      	adcs	r3, r7
    42ec:	e783      	b.n	41f6 <am_util_stdio_vsprintf+0x3e2>
        switch ( *pcFmt )
    42ee:	f04f 0c01 	mov.w	ip, #1
    42f2:	e642      	b.n	3f7a <am_util_stdio_vsprintf+0x166>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    42f4:	f8db 1000 	ldr.w	r1, [fp]
    42f8:	2200      	movs	r2, #0
    42fa:	e9cd 1218 	strd	r1, r2, [sp, #96]	; 0x60
                                      va_arg(pArgs, uint32_t);
    42fe:	f10b 0b04 	add.w	fp, fp, #4
                if ( iWidth )
    4302:	2c00      	cmp	r4, #0
    4304:	f000 8269 	beq.w	47da <am_util_stdio_vsprintf+0x9c6>
    int iNDigits = ui64Val ? 0 : 1;
    4308:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    430c:	ea50 0301 	orrs.w	r3, r0, r1
    while ( ui64Val )
    4310:	4602      	mov	r2, r0
    4312:	460b      	mov	r3, r1
    int iNDigits = ui64Val ? 0 : 1;
    4314:	bf0c      	ite	eq
    4316:	2401      	moveq	r4, #1
    4318:	2400      	movne	r4, #0
    while ( ui64Val )
    431a:	ea52 0103 	orrs.w	r1, r2, r3
    431e:	f000 81fe 	beq.w	471e <am_util_stdio_vsprintf+0x90a>
    4322:	961b      	str	r6, [sp, #108]	; 0x6c
    4324:	9520      	str	r5, [sp, #128]	; 0x80
    4326:	9721      	str	r7, [sp, #132]	; 0x84
    4328:	941a      	str	r4, [sp, #104]	; 0x68
    432a:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
    432e:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    4332:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
    4336:	e009      	b.n	434c <am_util_stdio_vsprintf+0x538>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    4338:	464a      	mov	r2, r9
    433a:	2300      	movs	r3, #0
        ++iNDigits;
    433c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    while ( ui64Val )
    433e:	ea52 0103 	orrs.w	r1, r2, r3
        ++iNDigits;
    4342:	f105 0501 	add.w	r5, r5, #1
    4346:	951a      	str	r5, [sp, #104]	; 0x68
    while ( ui64Val )
    4348:	f000 81db 	beq.w	4702 <am_util_stdio_vsprintf+0x8ee>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    434c:	0895      	lsrs	r5, r2, #2
    434e:	ea45 7783 	orr.w	r7, r5, r3, lsl #30
    4352:	089c      	lsrs	r4, r3, #2
    4354:	9708      	str	r7, [sp, #32]
    4356:	9409      	str	r4, [sp, #36]	; 0x24
    4358:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    435c:	0859      	lsrs	r1, r3, #1
    435e:	ea4f 0032 	mov.w	r0, r2, rrx
    4362:	1820      	adds	r0, r4, r0
    4364:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 4);
    4368:	0905      	lsrs	r5, r0, #4
        q64 = (ui64Val>>1) + (ui64Val>>2);
    436a:	4606      	mov	r6, r0
        q64 += (q64 >> 4);
    436c:	ea45 7401 	orr.w	r4, r5, r1, lsl #28
    4370:	0908      	lsrs	r0, r1, #4
    4372:	9001      	str	r0, [sp, #4]
    4374:	9400      	str	r4, [sp, #0]
    4376:	e9dd 4500 	ldrd	r4, r5, [sp]
    437a:	19a0      	adds	r0, r4, r6
    437c:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 8);
    4380:	0a05      	lsrs	r5, r0, #8
        q64 += (q64 >> 4);
    4382:	4606      	mov	r6, r0
        q64 += (q64 >> 8);
    4384:	ea45 6401 	orr.w	r4, r5, r1, lsl #24
    4388:	0a08      	lsrs	r0, r1, #8
    438a:	9003      	str	r0, [sp, #12]
    438c:	9402      	str	r4, [sp, #8]
    438e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    4392:	19a0      	adds	r0, r4, r6
    4394:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 16);
    4398:	0c06      	lsrs	r6, r0, #16
    439a:	ea46 4a01 	orr.w	sl, r6, r1, lsl #16
    439e:	eb10 070a 	adds.w	r7, r0, sl
    43a2:	ea4f 4b11 	mov.w	fp, r1, lsr #16
    43a6:	eb41 000b 	adc.w	r0, r1, fp
        q64 += (q64 >> 32);
    43aa:	2400      	movs	r4, #0
    43ac:	900c      	str	r0, [sp, #48]	; 0x30
    43ae:	940d      	str	r4, [sp, #52]	; 0x34
    43b0:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
        q32 = (ui32Val>>1) + (ui32Val>>2);
    43b4:	0895      	lsrs	r5, r2, #2
        q64 += (q64 >> 32);
    43b6:	eb18 0807 	adds.w	r8, r8, r7
    43ba:	eb49 0100 	adc.w	r1, r9, r0
        q32 = (ui32Val>>1) + (ui32Val>>2);
    43be:	eb05 0c52 	add.w	ip, r5, r2, lsr #1
        q64 += (q64 >> 32);
    43c2:	4646      	mov	r6, r8
        q32 += (q32 >> 4);
    43c4:	eb0c 101c 	add.w	r0, ip, ip, lsr #4
        q64 += (q64 >> 32);
    43c8:	460f      	mov	r7, r1
        q32 += (q32 >> 8);
    43ca:	eb00 2510 	add.w	r5, r0, r0, lsr #8
        q64 >>= 3;
    43ce:	08f4      	lsrs	r4, r6, #3
    if ( ui64Val >> 32 )
    43d0:	9310      	str	r3, [sp, #64]	; 0x40
    43d2:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
        q64 >>= 3;
    43d6:	08ff      	lsrs	r7, r7, #3
    43d8:	ea44 7641 	orr.w	r6, r4, r1, lsl #29
    43dc:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
        q32 += (q32 >> 16);
    43e0:	eb05 4415 	add.w	r4, r5, r5, lsr #16
        r64 = ui64Val - q64*10;
    43e4:	00bd      	lsls	r5, r7, #2
    43e6:	ea45 7196 	orr.w	r1, r5, r6, lsr #30
        q32 >>= 3;
    43ea:	08e5      	lsrs	r5, r4, #3
        r32 = ui32Val - q32*10;
    43ec:	eb05 0485 	add.w	r4, r5, r5, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    43f0:	f102 0e06 	add.w	lr, r2, #6
    43f4:	ebae 0c44 	sub.w	ip, lr, r4, lsl #1
    43f8:	ea58 0409 	orrs.w	r4, r8, r9
        r64 = ui64Val - q64*10;
    43fc:	ea4f 0086 	mov.w	r0, r6, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    4400:	eb05 191c 	add.w	r9, r5, ip, lsr #4
    4404:	d098      	beq.n	4338 <am_util_stdio_vsprintf+0x524>
        r64 = ui64Val - q64*10;
    4406:	eb10 0e06 	adds.w	lr, r0, r6
    440a:	4179      	adcs	r1, r7
    440c:	eb1e 000e 	adds.w	r0, lr, lr
    4410:	4149      	adcs	r1, r1
        return q64 + ((r64 + 6) >> 4);
    4412:	3206      	adds	r2, #6
    4414:	f143 0300 	adc.w	r3, r3, #0
    4418:	1a15      	subs	r5, r2, r0
    441a:	eb63 0401 	sbc.w	r4, r3, r1
    441e:	0929      	lsrs	r1, r5, #4
    4420:	0922      	lsrs	r2, r4, #4
    4422:	ea41 7004 	orr.w	r0, r1, r4, lsl #28
    4426:	9014      	str	r0, [sp, #80]	; 0x50
    4428:	9215      	str	r2, [sp, #84]	; 0x54
    442a:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    442e:	1992      	adds	r2, r2, r6
    4430:	417b      	adcs	r3, r7
    4432:	e783      	b.n	433c <am_util_stdio_vsprintf+0x528>
                if ( pcBuf )
    4434:	f1b8 0f00 	cmp.w	r8, #0
    4438:	d003      	beq.n	4442 <am_util_stdio_vsprintf+0x62e>
                    *pcBuf++ = *pcFmt;
    443a:	f888 2000 	strb.w	r2, [r8]
    443e:	f108 0801 	add.w	r8, r8, #1
                ++ui32CharCnt;
    4442:	f109 0901 	add.w	r9, r9, #1
                break;
    4446:	e697      	b.n	4178 <am_util_stdio_vsprintf+0x364>
            if ( *pcFmt == 'l' )    // "ll" (long long)
    4448:	7872      	ldrb	r2, [r6, #1]
    444a:	2a6c      	cmp	r2, #108	; 0x6c
    444c:	f000 81db 	beq.w	4806 <am_util_stdio_vsprintf+0x9f2>
            pcFmt++;
    4450:	3601      	adds	r6, #1
    4452:	e556      	b.n	3f02 <am_util_stdio_vsprintf+0xee>
    if ( *pcStr == '-')
    4454:	7873      	ldrb	r3, [r6, #1]
    4456:	2b2d      	cmp	r3, #45	; 0x2d
            ++pcFmt;
    4458:	f106 0001 	add.w	r0, r6, #1
    if ( *pcStr == '-')
    445c:	f000 81c8 	beq.w	47f0 <am_util_stdio_vsprintf+0x9dc>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    4460:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
    4464:	2e09      	cmp	r6, #9
    4466:	f200 8349 	bhi.w	4afc <am_util_stdio_vsprintf+0xce8>
    uint32_t ui32Val = 0, uCnt = 0;
    446a:	2200      	movs	r2, #0
    bool bNeg = false;
    446c:	4694      	mov	ip, r2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    446e:	4606      	mov	r6, r0
    bool bNeg = false;
    4470:	f04f 0a00 	mov.w	sl, #0
        ui32Val *= 10;
    4474:	eb0a 018a 	add.w	r1, sl, sl, lsl #2
        ui32Val += (*pcStr - '0');
    4478:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    447c:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    4480:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
    4484:	f1be 0f09 	cmp.w	lr, #9
        ++uCnt;
    4488:	f102 0201 	add.w	r2, r2, #1
        ui32Val += (*pcStr - '0');
    448c:	f1a1 0a30 	sub.w	sl, r1, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    4490:	d9f0      	bls.n	4474 <am_util_stdio_vsprintf+0x660>
    return bNeg ? -ui32Val : ui32Val;
    4492:	f1bc 0f00 	cmp.w	ip, #0
    4496:	f000 8334 	beq.w	4b02 <am_util_stdio_vsprintf+0xcee>
    449a:	f1c1 0a30 	rsb	sl, r1, #48	; 0x30
    449e:	e330      	b.n	4b02 <am_util_stdio_vsprintf+0xcee>
    44a0:	f1bc 0f00 	cmp.w	ip, #0
    44a4:	bf14      	ite	ne
    44a6:	2727      	movne	r7, #39	; 0x27
    44a8:	2707      	moveq	r7, #7
    44aa:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
    if ( ui64Val == 0 )
    44ae:	2000      	movs	r0, #0
    44b0:	e000      	b.n	44b4 <am_util_stdio_vsprintf+0x6a0>
        tbuf[ix++] = cCh + '0';
    44b2:	4608      	mov	r0, r1
        cCh = ui64Val & 0xf;
    44b4:	f002 010f 	and.w	r1, r2, #15
            cCh += bLower ? 0x27 : 0x7;
    44b8:	eb01 0e07 	add.w	lr, r1, r7
        tbuf[ix++] = cCh + '0';
    44bc:	2909      	cmp	r1, #9
    44be:	bf88      	it	hi
    44c0:	4671      	movhi	r1, lr
        ui64Val >>= 4;
    44c2:	0912      	lsrs	r2, r2, #4
    44c4:	ea4f 1e13 	mov.w	lr, r3, lsr #4
    44c8:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
    44cc:	4673      	mov	r3, lr
        tbuf[ix++] = cCh + '0';
    44ce:	3130      	adds	r1, #48	; 0x30
    while ( ui64Val )
    44d0:	ea52 0503 	orrs.w	r5, r2, r3
        tbuf[ix++] = cCh + '0';
    44d4:	f804 1f01 	strb.w	r1, [r4, #1]!
    44d8:	f100 0101 	add.w	r1, r0, #1
    while ( ui64Val )
    44dc:	d1e9      	bne.n	44b2 <am_util_stdio_vsprintf+0x69e>
    44de:	460f      	mov	r7, r1
    if (pcBuf)
    44e0:	f1b8 0f00 	cmp.w	r8, #0
    44e4:	f47f adcd 	bne.w	4082 <am_util_stdio_vsprintf+0x26e>
    44e8:	f04f 0800 	mov.w	r8, #0
                ui32CharCnt += iVal;
    44ec:	44b9      	add	r9, r7
    44ee:	e643      	b.n	4178 <am_util_stdio_vsprintf+0x364>
        switch ( *pcFmt )
    44f0:	463c      	mov	r4, r7
                pcStr = va_arg(pArgs, char *);
    44f2:	f8db 0000 	ldr.w	r0, [fp]
    44f6:	f10b 0b04 	add.w	fp, fp, #4
    if ( !pcBuf )
    44fa:	2800      	cmp	r0, #0
    44fc:	f000 8085 	beq.w	460a <am_util_stdio_vsprintf+0x7f6>
    while ( *pcBuf++ )
    4500:	7801      	ldrb	r1, [r0, #0]
    4502:	1c42      	adds	r2, r0, #1
    4504:	4613      	mov	r3, r2
    4506:	2900      	cmp	r1, #0
    4508:	f000 84f3 	beq.w	4ef2 <am_util_stdio_vsprintf+0x10de>
    450c:	eba3 0e00 	sub.w	lr, r3, r0
    4510:	f813 7b01 	ldrb.w	r7, [r3], #1
    4514:	2f00      	cmp	r7, #0
    4516:	d1f9      	bne.n	450c <am_util_stdio_vsprintf+0x6f8>
                if ( iWidth > 0 )
    4518:	2c00      	cmp	r4, #0
    451a:	4677      	mov	r7, lr
    451c:	dd01      	ble.n	4522 <am_util_stdio_vsprintf+0x70e>
                    if ( ui32strlen < iWidth )
    451e:	4574      	cmp	r4, lr
    4520:	d877      	bhi.n	4612 <am_util_stdio_vsprintf+0x7fe>
                    if ( pcBuf )
    4522:	f1b8 0f00 	cmp.w	r8, #0
    4526:	f000 80e1 	beq.w	46ec <am_util_stdio_vsprintf+0x8d8>
    452a:	eba9 0a00 	sub.w	sl, r9, r0
                        *pcBuf++ = *pcStr;
    452e:	f808 1b01 	strb.w	r1, [r8], #1
    4532:	eb0a 0902 	add.w	r9, sl, r2
                while (*pcStr != 0x0)
    4536:	f812 1b01 	ldrb.w	r1, [r2], #1
    453a:	2900      	cmp	r1, #0
    453c:	d1f7      	bne.n	452e <am_util_stdio_vsprintf+0x71a>
                if ( iWidth )
    453e:	2c00      	cmp	r4, #0
    4540:	f43f ae1a 	beq.w	4178 <am_util_stdio_vsprintf+0x364>
                    iWidth = -iWidth;
    4544:	4263      	negs	r3, r4
                    if ( ui32strlen < iWidth )
    4546:	42bb      	cmp	r3, r7
    4548:	f67f ae16 	bls.w	4178 <am_util_stdio_vsprintf+0x364>
                        iWidth -= ui32strlen;
    454c:	1bda      	subs	r2, r3, r7
    if ( i32NumChars <= 0 )
    454e:	2a00      	cmp	r2, #0
    4550:	f340 84c3 	ble.w	4eda <am_util_stdio_vsprintf+0x10c6>
    while ( i32NumChars-- )
    4554:	1e57      	subs	r7, r2, #1
        if ( pcBuf )
    4556:	f1b8 0f00 	cmp.w	r8, #0
    455a:	f000 84bf 	beq.w	4edc <am_util_stdio_vsprintf+0x10c8>
            *pcBuf++ = cPadChar;
    455e:	4643      	mov	r3, r8
    4560:	f007 0407 	and.w	r4, r7, #7
    4564:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    4568:	f107 3cff 	add.w	ip, r7, #4294967295
    456c:	eba3 0108 	sub.w	r1, r3, r8
    4570:	2f00      	cmp	r7, #0
    4572:	d045      	beq.n	4600 <am_util_stdio_vsprintf+0x7ec>
    4574:	b364      	cbz	r4, 45d0 <am_util_stdio_vsprintf+0x7bc>
    4576:	2c01      	cmp	r4, #1
    4578:	d021      	beq.n	45be <am_util_stdio_vsprintf+0x7aa>
    457a:	2c02      	cmp	r4, #2
    457c:	d01b      	beq.n	45b6 <am_util_stdio_vsprintf+0x7a2>
    457e:	2c03      	cmp	r4, #3
    4580:	d015      	beq.n	45ae <am_util_stdio_vsprintf+0x79a>
    4582:	2c04      	cmp	r4, #4
    4584:	d00f      	beq.n	45a6 <am_util_stdio_vsprintf+0x792>
    4586:	2c05      	cmp	r4, #5
    4588:	d009      	beq.n	459e <am_util_stdio_vsprintf+0x78a>
    458a:	2c06      	cmp	r4, #6
            *pcBuf++ = cPadChar;
    458c:	bf1c      	itt	ne
    458e:	f803 5b01 	strbne.w	r5, [r3], #1
    while ( i32NumChars-- )
    4592:	f10c 3cff 	addne.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    4596:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    459a:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    459e:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    45a2:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    45a6:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    45aa:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    45ae:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    45b2:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    45b6:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    45ba:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
    45be:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    45c2:	f10c 3cff 	add.w	ip, ip, #4294967295
    45c6:	f11c 0701 	adds.w	r7, ip, #1
    45ca:	eba3 0108 	sub.w	r1, r3, r8
    45ce:	d017      	beq.n	4600 <am_util_stdio_vsprintf+0x7ec>
            *pcBuf++ = cPadChar;
    45d0:	4618      	mov	r0, r3
    while ( i32NumChars-- )
    45d2:	f1ac 0c08 	sub.w	ip, ip, #8
            *pcBuf++ = cPadChar;
    45d6:	f800 5b01 	strb.w	r5, [r0], #1
    45da:	3308      	adds	r3, #8
    45dc:	7005      	strb	r5, [r0, #0]
    45de:	f803 5c06 	strb.w	r5, [r3, #-6]
    45e2:	f803 5c05 	strb.w	r5, [r3, #-5]
    45e6:	f803 5c04 	strb.w	r5, [r3, #-4]
    45ea:	f803 5c03 	strb.w	r5, [r3, #-3]
    45ee:	f803 5c02 	strb.w	r5, [r3, #-2]
    while ( i32NumChars-- )
    45f2:	f11c 0001 	adds.w	r0, ip, #1
    45f6:	eba3 0108 	sub.w	r1, r3, r8
            *pcBuf++ = cPadChar;
    45fa:	f803 5c01 	strb.w	r5, [r3, #-1]
    while ( i32NumChars-- )
    45fe:	d1e7      	bne.n	45d0 <am_util_stdio_vsprintf+0x7bc>
    4600:	460d      	mov	r5, r1
    4602:	460a      	mov	r2, r1
                        pcBuf += pcBuf ? iWidth : 0;
    4604:	44a8      	add	r8, r5
                        ui32CharCnt += iWidth;
    4606:	4491      	add	r9, r2
    4608:	e5b6      	b.n	4178 <am_util_stdio_vsprintf+0x364>
                if ( iWidth > 0 )
    460a:	2c00      	cmp	r4, #0
    460c:	f340 8443 	ble.w	4e96 <am_util_stdio_vsprintf+0x1082>
        return ui32RetVal;
    4610:	4607      	mov	r7, r0
                        iWidth -= ui32strlen;
    4612:	1be2      	subs	r2, r4, r7
    if ( i32NumChars <= 0 )
    4614:	2a00      	cmp	r2, #0
    4616:	f340 8464 	ble.w	4ee2 <am_util_stdio_vsprintf+0x10ce>
    while ( i32NumChars-- )
    461a:	f102 3eff 	add.w	lr, r2, #4294967295
        if ( pcBuf )
    461e:	f1b8 0f00 	cmp.w	r8, #0
    4622:	d05c      	beq.n	46de <am_util_stdio_vsprintf+0x8ca>
            *pcBuf++ = cPadChar;
    4624:	4643      	mov	r3, r8
    4626:	f00e 0407 	and.w	r4, lr, #7
    462a:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    462e:	f10e 3aff 	add.w	sl, lr, #4294967295
    4632:	eba3 0c08 	sub.w	ip, r3, r8
    4636:	f1be 0f00 	cmp.w	lr, #0
    463a:	d045      	beq.n	46c8 <am_util_stdio_vsprintf+0x8b4>
    463c:	b364      	cbz	r4, 4698 <am_util_stdio_vsprintf+0x884>
    463e:	2c01      	cmp	r4, #1
    4640:	d021      	beq.n	4686 <am_util_stdio_vsprintf+0x872>
    4642:	2c02      	cmp	r4, #2
    4644:	d01b      	beq.n	467e <am_util_stdio_vsprintf+0x86a>
    4646:	2c03      	cmp	r4, #3
    4648:	d015      	beq.n	4676 <am_util_stdio_vsprintf+0x862>
    464a:	2c04      	cmp	r4, #4
    464c:	d00f      	beq.n	466e <am_util_stdio_vsprintf+0x85a>
    464e:	2c05      	cmp	r4, #5
    4650:	d009      	beq.n	4666 <am_util_stdio_vsprintf+0x852>
    4652:	2c06      	cmp	r4, #6
            *pcBuf++ = cPadChar;
    4654:	bf1c      	itt	ne
    4656:	f803 5b01 	strbne.w	r5, [r3], #1
    while ( i32NumChars-- )
    465a:	f10a 3aff 	addne.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    465e:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    4662:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    4666:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    466a:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    466e:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    4672:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    4676:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    467a:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    467e:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    4682:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    4686:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    468a:	f10a 3aff 	add.w	sl, sl, #4294967295
    468e:	f11a 0401 	adds.w	r4, sl, #1
    4692:	eba3 0c08 	sub.w	ip, r3, r8
    4696:	d017      	beq.n	46c8 <am_util_stdio_vsprintf+0x8b4>
            *pcBuf++ = cPadChar;
    4698:	4619      	mov	r1, r3
    while ( i32NumChars-- )
    469a:	f1aa 0a08 	sub.w	sl, sl, #8
            *pcBuf++ = cPadChar;
    469e:	f801 5b01 	strb.w	r5, [r1], #1
    46a2:	3308      	adds	r3, #8
    46a4:	700d      	strb	r5, [r1, #0]
    46a6:	f803 5c06 	strb.w	r5, [r3, #-6]
    46aa:	f803 5c05 	strb.w	r5, [r3, #-5]
    46ae:	f803 5c04 	strb.w	r5, [r3, #-4]
    46b2:	f803 5c03 	strb.w	r5, [r3, #-3]
    46b6:	f803 5c02 	strb.w	r5, [r3, #-2]
    while ( i32NumChars-- )
    46ba:	f11a 0401 	adds.w	r4, sl, #1
    46be:	eba3 0c08 	sub.w	ip, r3, r8
            *pcBuf++ = cPadChar;
    46c2:	f803 5c01 	strb.w	r5, [r3, #-1]
    while ( i32NumChars-- )
    46c6:	d1e7      	bne.n	4698 <am_util_stdio_vsprintf+0x884>
    46c8:	4664      	mov	r4, ip
    46ca:	4662      	mov	r2, ip
                while (*pcStr != 0x0)
    46cc:	7801      	ldrb	r1, [r0, #0]
                        pcBuf += pcBuf ? iWidth : 0;
    46ce:	44a0      	add	r8, r4
                        ui32CharCnt += iWidth;
    46d0:	4491      	add	r9, r2
                while (*pcStr != 0x0)
    46d2:	2900      	cmp	r1, #0
    46d4:	f43f ad50 	beq.w	4178 <am_util_stdio_vsprintf+0x364>
                        iWidth = 0;
    46d8:	2400      	movs	r4, #0
    46da:	1c42      	adds	r2, r0, #1
    46dc:	e721      	b.n	4522 <am_util_stdio_vsprintf+0x70e>
                while (*pcStr != 0x0)
    46de:	7803      	ldrb	r3, [r0, #0]
                        ui32CharCnt += iWidth;
    46e0:	4491      	add	r9, r2
                while (*pcStr != 0x0)
    46e2:	2b00      	cmp	r3, #0
    46e4:	f43f ad48 	beq.w	4178 <am_util_stdio_vsprintf+0x364>
                        iWidth = 0;
    46e8:	2400      	movs	r4, #0
    46ea:	1c42      	adds	r2, r0, #1
    46ec:	4690      	mov	r8, r2
    46ee:	eba9 0000 	sub.w	r0, r9, r0
    46f2:	eb00 0908 	add.w	r9, r0, r8
                while (*pcStr != 0x0)
    46f6:	f818 1b01 	ldrb.w	r1, [r8], #1
    46fa:	2900      	cmp	r1, #0
    46fc:	d1f9      	bne.n	46f2 <am_util_stdio_vsprintf+0x8de>
    46fe:	4688      	mov	r8, r1
    4700:	e71d      	b.n	453e <am_util_stdio_vsprintf+0x72a>
    4702:	e9cd 6728 	strd	r6, r7, [sp, #160]	; 0xa0
    4706:	e9cd ab26 	strd	sl, fp, [sp, #152]	; 0x98
    470a:	9d20      	ldr	r5, [sp, #128]	; 0x80
    470c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    470e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
    4710:	9f21      	ldr	r7, [sp, #132]	; 0x84
    4712:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
    4716:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    471a:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
                    iWidth -= ndigits_in_u64(ui64Val);
    471e:	1b3c      	subs	r4, r7, r4
    if ( i32NumChars <= 0 )
    4720:	2c00      	cmp	r4, #0
    4722:	f340 81e3 	ble.w	4aec <am_util_stdio_vsprintf+0xcd8>
    while ( i32NumChars-- )
    4726:	1e67      	subs	r7, r4, #1
        if ( pcBuf )
    4728:	f1b8 0f00 	cmp.w	r8, #0
    472c:	f000 81df 	beq.w	4aee <am_util_stdio_vsprintf+0xcda>
            *pcBuf++ = cPadChar;
    4730:	4643      	mov	r3, r8
    4732:	f007 0007 	and.w	r0, r7, #7
    4736:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    473a:	f1a4 0a02 	sub.w	sl, r4, #2
    473e:	eba3 0c08 	sub.w	ip, r3, r8
    4742:	2f00      	cmp	r7, #0
    4744:	d046      	beq.n	47d4 <am_util_stdio_vsprintf+0x9c0>
    4746:	b360      	cbz	r0, 47a2 <am_util_stdio_vsprintf+0x98e>
    4748:	2801      	cmp	r0, #1
    474a:	d021      	beq.n	4790 <am_util_stdio_vsprintf+0x97c>
    474c:	2802      	cmp	r0, #2
    474e:	d01b      	beq.n	4788 <am_util_stdio_vsprintf+0x974>
    4750:	2803      	cmp	r0, #3
    4752:	d015      	beq.n	4780 <am_util_stdio_vsprintf+0x96c>
    4754:	2804      	cmp	r0, #4
    4756:	d00f      	beq.n	4778 <am_util_stdio_vsprintf+0x964>
    4758:	2805      	cmp	r0, #5
    475a:	d009      	beq.n	4770 <am_util_stdio_vsprintf+0x95c>
    475c:	2806      	cmp	r0, #6
            *pcBuf++ = cPadChar;
    475e:	bf1c      	itt	ne
    4760:	f803 5b01 	strbne.w	r5, [r3], #1
    while ( i32NumChars-- )
    4764:	f10a 3aff 	addne.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    4768:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    476c:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    4770:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    4774:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    4778:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    477c:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    4780:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    4784:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    4788:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    478c:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    4790:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    4794:	f10a 3aff 	add.w	sl, sl, #4294967295
    4798:	f11a 0001 	adds.w	r0, sl, #1
    479c:	eba3 0c08 	sub.w	ip, r3, r8
    47a0:	d018      	beq.n	47d4 <am_util_stdio_vsprintf+0x9c0>
            *pcBuf++ = cPadChar;
    47a2:	469e      	mov	lr, r3
    while ( i32NumChars-- )
    47a4:	f1aa 0a08 	sub.w	sl, sl, #8
            *pcBuf++ = cPadChar;
    47a8:	f80e 5b01 	strb.w	r5, [lr], #1
    47ac:	3308      	adds	r3, #8
    47ae:	f88e 5000 	strb.w	r5, [lr]
    47b2:	f803 5c06 	strb.w	r5, [r3, #-6]
    47b6:	f803 5c05 	strb.w	r5, [r3, #-5]
    47ba:	f803 5c04 	strb.w	r5, [r3, #-4]
    47be:	f803 5c03 	strb.w	r5, [r3, #-3]
    47c2:	f803 5c02 	strb.w	r5, [r3, #-2]
    while ( i32NumChars-- )
    47c6:	f11a 0701 	adds.w	r7, sl, #1
    47ca:	eba3 0c08 	sub.w	ip, r3, r8
            *pcBuf++ = cPadChar;
    47ce:	f803 5c01 	strb.w	r5, [r3, #-1]
    while ( i32NumChars-- )
    47d2:	d1e6      	bne.n	47a2 <am_util_stdio_vsprintf+0x98e>
    47d4:	4664      	mov	r4, ip
                    pcBuf += pcBuf ? iWidth : 0;
    47d6:	44e0      	add	r8, ip
                    ui32CharCnt += iWidth;
    47d8:	44a1      	add	r9, r4
                iVal = uint64_to_str(ui64Val, pcBuf);
    47da:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    47de:	4642      	mov	r2, r8
    47e0:	f7ff fa1a 	bl	3c18 <uint64_to_str>
                if ( pcBuf )
    47e4:	f1b8 0f00 	cmp.w	r8, #0
    47e8:	d000      	beq.n	47ec <am_util_stdio_vsprintf+0x9d8>
                    pcBuf += iVal;
    47ea:	4480      	add	r8, r0
                ui32CharCnt += iVal;
    47ec:	4481      	add	r9, r0
                break;
    47ee:	e4c3      	b.n	4178 <am_util_stdio_vsprintf+0x364>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    47f0:	78b3      	ldrb	r3, [r6, #2]
    47f2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    47f6:	2909      	cmp	r1, #9
        pcStr++;
    47f8:	f106 0602 	add.w	r6, r6, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    47fc:	f200 8391 	bhi.w	4f22 <am_util_stdio_vsprintf+0x110e>
        uCnt++;
    4800:	2201      	movs	r2, #1
        bNeg = true;
    4802:	4694      	mov	ip, r2
    4804:	e634      	b.n	4470 <am_util_stdio_vsprintf+0x65c>
        switch ( *pcFmt )
    4806:	78b2      	ldrb	r2, [r6, #2]
    4808:	f1a2 0c46 	sub.w	ip, r2, #70	; 0x46
                pcFmt++;
    480c:	3602      	adds	r6, #2
        switch ( *pcFmt )
    480e:	f1bc 0f32 	cmp.w	ip, #50	; 0x32
    4812:	f63f ae0f 	bhi.w	4434 <am_util_stdio_vsprintf+0x620>
    4816:	a101      	add	r1, pc, #4	; (adr r1, 481c <am_util_stdio_vsprintf+0xa08>)
    4818:	f851 f02c 	ldr.w	pc, [r1, ip, lsl #2]
    481c:	0000413b 	.word	0x0000413b
    4820:	00004435 	.word	0x00004435
    4824:	00004435 	.word	0x00004435
    4828:	00004435 	.word	0x00004435
    482c:	00004435 	.word	0x00004435
    4830:	00004435 	.word	0x00004435
    4834:	00004435 	.word	0x00004435
    4838:	00004435 	.word	0x00004435
    483c:	00004435 	.word	0x00004435
    4840:	00004435 	.word	0x00004435
    4844:	00004435 	.word	0x00004435
    4848:	00004435 	.word	0x00004435
    484c:	00004435 	.word	0x00004435
    4850:	00004435 	.word	0x00004435
    4854:	00004435 	.word	0x00004435
    4858:	00004435 	.word	0x00004435
    485c:	00004435 	.word	0x00004435
    4860:	00004435 	.word	0x00004435
    4864:	00004fed 	.word	0x00004fed
    4868:	00004435 	.word	0x00004435
    486c:	00004435 	.word	0x00004435
    4870:	00004435 	.word	0x00004435
    4874:	00004435 	.word	0x00004435
    4878:	00004435 	.word	0x00004435
    487c:	00004435 	.word	0x00004435
    4880:	00004435 	.word	0x00004435
    4884:	00004435 	.word	0x00004435
    4888:	00004435 	.word	0x00004435
    488c:	00004435 	.word	0x00004435
    4890:	0000417d 	.word	0x0000417d
    4894:	000048ff 	.word	0x000048ff
    4898:	00004435 	.word	0x00004435
    489c:	0000413b 	.word	0x0000413b
    48a0:	00004435 	.word	0x00004435
    48a4:	00004435 	.word	0x00004435
    48a8:	000048ff 	.word	0x000048ff
    48ac:	00004435 	.word	0x00004435
    48b0:	00004435 	.word	0x00004435
    48b4:	00004435 	.word	0x00004435
    48b8:	00004435 	.word	0x00004435
    48bc:	00004435 	.word	0x00004435
    48c0:	00004435 	.word	0x00004435
    48c4:	00004435 	.word	0x00004435
    48c8:	00004435 	.word	0x00004435
    48cc:	00004435 	.word	0x00004435
    48d0:	000044f1 	.word	0x000044f1
    48d4:	00004435 	.word	0x00004435
    48d8:	000048e9 	.word	0x000048e9
    48dc:	00004435 	.word	0x00004435
    48e0:	00004435 	.word	0x00004435
    48e4:	00004e7f 	.word	0x00004e7f
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    48e8:	f10b 0207 	add.w	r2, fp, #7
    48ec:	f022 0b07 	bic.w	fp, r2, #7
    48f0:	e9db 0100 	ldrd	r0, r1, [fp]
    48f4:	f10b 0b08 	add.w	fp, fp, #8
    48f8:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    48fc:	e501      	b.n	4302 <am_util_stdio_vsprintf+0x4ee>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    48fe:	f10b 0307 	add.w	r3, fp, #7
    4902:	f023 0b07 	bic.w	fp, r3, #7
    4906:	e9db 0100 	ldrd	r0, r1, [fp]
    490a:	f10b 0b08 	add.w	fp, fp, #8
    490e:	e44e      	b.n	41ae <am_util_stdio_vsprintf+0x39a>
                    ui64Val = -i64Val;          // Get absolute value
    4910:	4240      	negs	r0, r0
    4912:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4916:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
                if ( iWidth )
    491a:	2c00      	cmp	r4, #0
    491c:	f040 834e 	bne.w	4fbc <am_util_stdio_vsprintf+0x11a8>
                        if ( pcBuf )
    4920:	f1b8 0f00 	cmp.w	r8, #0
    4924:	f000 82d1 	beq.w	4eca <am_util_stdio_vsprintf+0x10b6>
                            *pcBuf++ = '-';
    4928:	252d      	movs	r5, #45	; 0x2d
    492a:	f888 5000 	strb.w	r5, [r8]
                        ++ui32CharCnt;
    492e:	f109 0901 	add.w	r9, r9, #1
                            *pcBuf++ = '-';
    4932:	f108 0801 	add.w	r8, r8, #1
                iVal = uint64_to_str(ui64Val, pcBuf);
    4936:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    493a:	4642      	mov	r2, r8
    493c:	f7ff f96c 	bl	3c18 <uint64_to_str>
                if ( pcBuf )
    4940:	f1b8 0f00 	cmp.w	r8, #0
    4944:	f47f af51 	bne.w	47ea <am_util_stdio_vsprintf+0x9d6>
                    pcBuf += iVal;
    4948:	f04f 0800 	mov.w	r8, #0
                ui32CharCnt += iVal;
    494c:	4481      	add	r9, r0
    494e:	e413      	b.n	4178 <am_util_stdio_vsprintf+0x364>
    4950:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
    4954:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4956:	9f22      	ldr	r7, [sp, #136]	; 0x88
                    if ( bNeg )
    4958:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    495a:	9d21      	ldr	r5, [sp, #132]	; 0x84
    495c:	9e20      	ldr	r6, [sp, #128]	; 0x80
    495e:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
    4962:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    4966:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
                    iWidth -= ndigits_in_i64(ui64Val);
    496a:	1aff      	subs	r7, r7, r3
    496c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
                    if ( bNeg )
    4970:	b13c      	cbz	r4, 4982 <am_util_stdio_vsprintf+0xb6e>
                        if ( ui8PadChar == '0' )
    4972:	2d30      	cmp	r5, #48	; 0x30
                        --iWidth;
    4974:	f107 31ff 	add.w	r1, r7, #4294967295
                        if ( ui8PadChar == '0' )
    4978:	f000 82c3 	beq.w	4f02 <am_util_stdio_vsprintf+0x10ee>
    497c:	2001      	movs	r0, #1
                        --iWidth;
    497e:	460f      	mov	r7, r1
    4980:	901b      	str	r0, [sp, #108]	; 0x6c
    if ( i32NumChars <= 0 )
    4982:	2f00      	cmp	r7, #0
    4984:	f340 82d3 	ble.w	4f2e <am_util_stdio_vsprintf+0x111a>
    while ( i32NumChars-- )
    4988:	1e78      	subs	r0, r7, #1
        if ( pcBuf )
    498a:	f1b8 0f00 	cmp.w	r8, #0
    498e:	d067      	beq.n	4a60 <am_util_stdio_vsprintf+0xc4c>
    4990:	f010 0107 	ands.w	r1, r0, #7
    4994:	f1a7 0a02 	sub.w	sl, r7, #2
    4998:	4643      	mov	r3, r8
    499a:	d03a      	beq.n	4a12 <am_util_stdio_vsprintf+0xbfe>
            *pcBuf++ = cPadChar;
    499c:	4643      	mov	r3, r8
    499e:	2901      	cmp	r1, #1
    49a0:	f1a7 0a03 	sub.w	sl, r7, #3
    49a4:	f803 5b01 	strb.w	r5, [r3], #1
    49a8:	d033      	beq.n	4a12 <am_util_stdio_vsprintf+0xbfe>
    49aa:	2902      	cmp	r1, #2
    49ac:	d01b      	beq.n	49e6 <am_util_stdio_vsprintf+0xbd2>
    49ae:	2903      	cmp	r1, #3
    49b0:	d015      	beq.n	49de <am_util_stdio_vsprintf+0xbca>
    49b2:	2904      	cmp	r1, #4
    49b4:	d00f      	beq.n	49d6 <am_util_stdio_vsprintf+0xbc2>
    49b6:	2905      	cmp	r1, #5
    49b8:	d009      	beq.n	49ce <am_util_stdio_vsprintf+0xbba>
    49ba:	2906      	cmp	r1, #6
    49bc:	bf1c      	itt	ne
    49be:	f803 5b01 	strbne.w	r5, [r3], #1
    49c2:	f1a7 0a04 	subne.w	sl, r7, #4
    49c6:	f803 5b01 	strb.w	r5, [r3], #1
    49ca:	f10a 3aff 	add.w	sl, sl, #4294967295
    49ce:	f803 5b01 	strb.w	r5, [r3], #1
    49d2:	f10a 3aff 	add.w	sl, sl, #4294967295
    49d6:	f803 5b01 	strb.w	r5, [r3], #1
    49da:	f10a 3aff 	add.w	sl, sl, #4294967295
    49de:	f803 5b01 	strb.w	r5, [r3], #1
    49e2:	f10a 3aff 	add.w	sl, sl, #4294967295
    49e6:	f803 5b01 	strb.w	r5, [r3], #1
    49ea:	f10a 3aff 	add.w	sl, sl, #4294967295
    49ee:	e010      	b.n	4a12 <am_util_stdio_vsprintf+0xbfe>
    49f0:	f88c 5000 	strb.w	r5, [ip]
    49f4:	3308      	adds	r3, #8
    49f6:	f803 5c06 	strb.w	r5, [r3, #-6]
    49fa:	f803 5c05 	strb.w	r5, [r3, #-5]
    49fe:	f803 5c04 	strb.w	r5, [r3, #-4]
    4a02:	f803 5c03 	strb.w	r5, [r3, #-3]
    4a06:	f803 5c02 	strb.w	r5, [r3, #-2]
    4a0a:	f1aa 0a08 	sub.w	sl, sl, #8
    4a0e:	f803 5c01 	strb.w	r5, [r3, #-1]
    4a12:	469c      	mov	ip, r3
    while ( i32NumChars-- )
    4a14:	f11a 0401 	adds.w	r4, sl, #1
            *pcBuf++ = cPadChar;
    4a18:	f80c 5b01 	strb.w	r5, [ip], #1
    4a1c:	ebac 0e08 	sub.w	lr, ip, r8
    while ( i32NumChars-- )
    4a20:	d1e6      	bne.n	49f0 <am_util_stdio_vsprintf+0xbdc>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    4a22:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    4a24:	44f0      	add	r8, lr
                    ui32CharCnt += iWidth;
    4a26:	44f1      	add	r9, lr
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    4a28:	2a00      	cmp	r2, #0
    4a2a:	d084      	beq.n	4936 <am_util_stdio_vsprintf+0xb22>
    4a2c:	2d20      	cmp	r5, #32
    4a2e:	d182      	bne.n	4936 <am_util_stdio_vsprintf+0xb22>
                        if ( pcBuf )
    4a30:	f1b8 0f00 	cmp.w	r8, #0
    4a34:	f47f af78 	bne.w	4928 <am_util_stdio_vsprintf+0xb14>
                iVal = uint64_to_str(ui64Val, pcBuf);
    4a38:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    4a3c:	2200      	movs	r2, #0
    4a3e:	f7ff f8eb 	bl	3c18 <uint64_to_str>
                        ++ui32CharCnt;
    4a42:	f109 0901 	add.w	r9, r9, #1
                iVal = uint64_to_str(ui64Val, pcBuf);
    4a46:	f04f 0800 	mov.w	r8, #0
                ui32CharCnt += iVal;
    4a4a:	4481      	add	r9, r0
    4a4c:	f7ff bb94 	b.w	4178 <am_util_stdio_vsprintf+0x364>
    if ( i32NumChars <= 0 )
    4a50:	2900      	cmp	r1, #0
                            ++ui32CharCnt;
    4a52:	f109 0901 	add.w	r9, r9, #1
    if ( i32NumChars <= 0 )
    4a56:	f340 82bc 	ble.w	4fd2 <am_util_stdio_vsprintf+0x11be>
    while ( i32NumChars-- )
    4a5a:	2201      	movs	r2, #1
    4a5c:	1eb8      	subs	r0, r7, #2
    4a5e:	921b      	str	r2, [sp, #108]	; 0x6c
    4a60:	3001      	adds	r0, #1
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    4a62:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
                    ui32CharCnt += iWidth;
    4a64:	4481      	add	r9, r0
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    4a66:	2f00      	cmp	r7, #0
    4a68:	f000 821b 	beq.w	4ea2 <am_util_stdio_vsprintf+0x108e>
    4a6c:	2d20      	cmp	r5, #32
    4a6e:	d0e3      	beq.n	4a38 <am_util_stdio_vsprintf+0xc24>
                iVal = uint64_to_str(ui64Val, pcBuf);
    4a70:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    4a74:	2200      	movs	r2, #0
    4a76:	f7ff f8cf 	bl	3c18 <uint64_to_str>
    4a7a:	e765      	b.n	4948 <am_util_stdio_vsprintf+0xb34>
    if ( i32NumChars <= 0 )
    4a7c:	2700      	movs	r7, #0
    4a7e:	2400      	movs	r4, #0
    4a80:	f7ff baee 	b.w	4060 <am_util_stdio_vsprintf+0x24c>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    4a84:	ee17 7a90 	vmov	r7, s15
    4a88:	f3c7 5ec7 	ubfx	lr, r7, #23, #8
    4a8c:	f1ae 017f 	sub.w	r1, lr, #127	; 0x7f
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    4a90:	f3c7 0216 	ubfx	r2, r7, #0, #23
    if (iExp2 >= 31)
    4a94:	291e      	cmp	r1, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    4a96:	f442 0000 	orr.w	r0, r2, #8388608	; 0x800000
    if (iExp2 >= 31)
    4a9a:	f300 8246 	bgt.w	4f2a <am_util_stdio_vsprintf+0x1116>
    else if (iExp2 < -23)
    4a9e:	f111 0f17 	cmn.w	r1, #23
    4aa2:	f2c0 823c 	blt.w	4f1e <am_util_stdio_vsprintf+0x110a>
    else if (iExp2 >= 23)
    4aa6:	2916      	cmp	r1, #22
    4aa8:	dd2f      	ble.n	4b0a <am_util_stdio_vsprintf+0xcf6>
        i32IntPart = i32Significand << (iExp2 - 23);
    4aaa:	f1ae 0296 	sub.w	r2, lr, #150	; 0x96
    if (unFloatValue.I32 < 0)
    4aae:	2f00      	cmp	r7, #0
        i32IntPart = i32Significand << (iExp2 - 23);
    4ab0:	fa00 f002 	lsl.w	r0, r0, r2
    if (unFloatValue.I32 < 0)
    4ab4:	f2c0 825c 	blt.w	4f70 <am_util_stdio_vsprintf+0x115c>
    if (i32IntPart == 0)
    4ab8:	2800      	cmp	r0, #0
    4aba:	f040 824c 	bne.w	4f56 <am_util_stdio_vsprintf+0x1142>
    *pcBuf++ = '.';
    4abe:	252e      	movs	r5, #46	; 0x2e
        *pcBuf++ = '0';
    4ac0:	f04f 0430 	mov.w	r4, #48	; 0x30
    *pcBuf++ = '.';
    4ac4:	f888 5001 	strb.w	r5, [r8, #1]
        *pcBuf++ = '0';
    4ac8:	f888 4000 	strb.w	r4, [r8]
    4acc:	f108 0501 	add.w	r5, r8, #1
        *pcBuf++ = '0';
    4ad0:	1caa      	adds	r2, r5, #2
    4ad2:	f04f 0430 	mov.w	r4, #48	; 0x30
    4ad6:	706c      	strb	r4, [r5, #1]
    4ad8:	eba2 0008 	sub.w	r0, r2, r8
    *pcBuf = 0x00;
    4adc:	2500      	movs	r5, #0
                    if ( iVal < 0 )
    4ade:	42a8      	cmp	r0, r5
    *pcBuf = 0x00;
    4ae0:	7015      	strb	r5, [r2, #0]
                    if ( iVal < 0 )
    4ae2:	f2c0 81e7 	blt.w	4eb4 <am_util_stdio_vsprintf+0x10a0>
    4ae6:	4682      	mov	sl, r0
    4ae8:	f7ff bb44 	b.w	4174 <am_util_stdio_vsprintf+0x360>
    if ( i32NumChars <= 0 )
    4aec:	2400      	movs	r4, #0
    4aee:	f04f 0c00 	mov.w	ip, #0
    4af2:	e670      	b.n	47d6 <am_util_stdio_vsprintf+0x9c2>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    4af4:	4606      	mov	r6, r0
    4af6:	2400      	movs	r4, #0
    4af8:	f7ff b9f4 	b.w	3ee4 <am_util_stdio_vsprintf+0xd0>
    4afc:	f04f 0a00 	mov.w	sl, #0
    uint32_t ui32Val = 0, uCnt = 0;
    4b00:	4652      	mov	r2, sl
            pcFmt += ui32NumChars;
    4b02:	1886      	adds	r6, r0, r2
    4b04:	5c82      	ldrb	r2, [r0, r2]
    4b06:	f7ff b9f9 	b.w	3efc <am_util_stdio_vsprintf+0xe8>
    else if (iExp2 >= 0)
    4b0a:	2900      	cmp	r1, #0
    4b0c:	f2c0 8214 	blt.w	4f38 <am_util_stdio_vsprintf+0x1124>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    4b10:	f1ae 047e 	sub.w	r4, lr, #126	; 0x7e
    4b14:	fa00 f304 	lsl.w	r3, r0, r4
        i32IntPart = i32Significand >> (23 - iExp2);
    4b18:	f1c1 0117 	rsb	r1, r1, #23
    if (unFloatValue.I32 < 0)
    4b1c:	2f00      	cmp	r7, #0
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    4b1e:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
        i32IntPart = i32Significand >> (23 - iExp2);
    4b22:	fa40 f001 	asr.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
    4b26:	f2c0 823b 	blt.w	4fa0 <am_util_stdio_vsprintf+0x118c>
    4b2a:	4645      	mov	r5, r8
            uint64_to_str(i32IntPart, pcBuf);
    4b2c:	462a      	mov	r2, r5
    4b2e:	17c1      	asrs	r1, r0, #31
    4b30:	f7ff f872 	bl	3c18 <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
    4b34:	7829      	ldrb	r1, [r5, #0]
    4b36:	b119      	cbz	r1, 4b40 <am_util_stdio_vsprintf+0xd2c>
    4b38:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    4b3c:	2800      	cmp	r0, #0
    4b3e:	d1fb      	bne.n	4b38 <am_util_stdio_vsprintf+0xd24>
    *pcBuf++ = '.';
    4b40:	222e      	movs	r2, #46	; 0x2e
    4b42:	702a      	strb	r2, [r5, #0]
    if (i32FracPart == 0)
    4b44:	2c00      	cmp	r4, #0
    4b46:	d0c3      	beq.n	4ad0 <am_util_stdio_vsprintf+0xcbc>
    *pcBuf++ = '.';
    4b48:	1c6a      	adds	r2, r5, #1
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    4b4a:	eba2 0008 	sub.w	r0, r2, r8
    4b4e:	f1c0 0c13 	rsb	ip, r0, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    4b52:	45e2      	cmp	sl, ip
    4b54:	bfa8      	it	ge
    4b56:	46e2      	movge	sl, ip
        for (jx = 0; jx < iMax; jx++)
    4b58:	f1ba 0f00 	cmp.w	sl, #0
    4b5c:	f340 80b2 	ble.w	4cc4 <am_util_stdio_vsprintf+0xeb0>
            i32FracPart *= 10;
    4b60:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    4b64:	0067      	lsls	r7, r4, #1
    4b66:	eb05 000a 	add.w	r0, r5, sl
            *pcBuf++ = (i32FracPart >> 24) + '0';
    4b6a:	1639      	asrs	r1, r7, #24
    4b6c:	3130      	adds	r1, #48	; 0x30
    4b6e:	f10a 3eff 	add.w	lr, sl, #4294967295
        for (jx = 0; jx < iMax; jx++)
    4b72:	4290      	cmp	r0, r2
            *pcBuf++ = (i32FracPart >> 24) + '0';
    4b74:	7069      	strb	r1, [r5, #1]
    4b76:	901a      	str	r0, [sp, #104]	; 0x68
            i32FracPart &= 0x00FFFFFF;
    4b78:	f027 447f 	bic.w	r4, r7, #4278190080	; 0xff000000
    4b7c:	f00e 0507 	and.w	r5, lr, #7
    4b80:	4613      	mov	r3, r2
        for (jx = 0; jx < iMax; jx++)
    4b82:	f000 809c 	beq.w	4cbe <am_util_stdio_vsprintf+0xeaa>
    4b86:	2d00      	cmp	r5, #0
    4b88:	d04d      	beq.n	4c26 <am_util_stdio_vsprintf+0xe12>
    4b8a:	2d01      	cmp	r5, #1
    4b8c:	d03f      	beq.n	4c0e <am_util_stdio_vsprintf+0xdfa>
    4b8e:	2d02      	cmp	r5, #2
    4b90:	d034      	beq.n	4bfc <am_util_stdio_vsprintf+0xde8>
    4b92:	2d03      	cmp	r5, #3
    4b94:	d029      	beq.n	4bea <am_util_stdio_vsprintf+0xdd6>
    4b96:	2d04      	cmp	r5, #4
    4b98:	d01e      	beq.n	4bd8 <am_util_stdio_vsprintf+0xdc4>
    4b9a:	2d05      	cmp	r5, #5
    4b9c:	d013      	beq.n	4bc6 <am_util_stdio_vsprintf+0xdb2>
    4b9e:	2d06      	cmp	r5, #6
    4ba0:	d008      	beq.n	4bb4 <am_util_stdio_vsprintf+0xda0>
            i32FracPart *= 10;
    4ba2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    4ba6:	0067      	lsls	r7, r4, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    4ba8:	1639      	asrs	r1, r7, #24
    4baa:	3130      	adds	r1, #48	; 0x30
    4bac:	f803 1f01 	strb.w	r1, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    4bb0:	f027 447f 	bic.w	r4, r7, #4278190080	; 0xff000000
            i32FracPart *= 10;
    4bb4:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    4bb8:	0045      	lsls	r5, r0, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    4bba:	162c      	asrs	r4, r5, #24
    4bbc:	3430      	adds	r4, #48	; 0x30
    4bbe:	f803 4f01 	strb.w	r4, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    4bc2:	f025 447f 	bic.w	r4, r5, #4278190080	; 0xff000000
            i32FracPart *= 10;
    4bc6:	eb04 0784 	add.w	r7, r4, r4, lsl #2
    4bca:	0078      	lsls	r0, r7, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    4bcc:	1601      	asrs	r1, r0, #24
    4bce:	3130      	adds	r1, #48	; 0x30
    4bd0:	f803 1f01 	strb.w	r1, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    4bd4:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
            i32FracPart *= 10;
    4bd8:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    4bdc:	006c      	lsls	r4, r5, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    4bde:	1627      	asrs	r7, r4, #24
    4be0:	3730      	adds	r7, #48	; 0x30
    4be2:	f803 7f01 	strb.w	r7, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    4be6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
            i32FracPart *= 10;
    4bea:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    4bee:	0045      	lsls	r5, r0, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    4bf0:	1629      	asrs	r1, r5, #24
    4bf2:	3130      	adds	r1, #48	; 0x30
    4bf4:	f803 1f01 	strb.w	r1, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    4bf8:	f025 447f 	bic.w	r4, r5, #4278190080	; 0xff000000
            i32FracPart *= 10;
    4bfc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    4c00:	0067      	lsls	r7, r4, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    4c02:	1638      	asrs	r0, r7, #24
    4c04:	3030      	adds	r0, #48	; 0x30
    4c06:	f803 0f01 	strb.w	r0, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    4c0a:	f027 447f 	bic.w	r4, r7, #4278190080	; 0xff000000
            i32FracPart *= 10;
    4c0e:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    4c12:	006c      	lsls	r4, r5, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    4c14:	1621      	asrs	r1, r4, #24
    4c16:	3130      	adds	r1, #48	; 0x30
    4c18:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (jx = 0; jx < iMax; jx++)
    4c1c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
    4c1e:	429f      	cmp	r7, r3
            i32FracPart &= 0x00FFFFFF;
    4c20:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    4c24:	d04b      	beq.n	4cbe <am_util_stdio_vsprintf+0xeaa>
            i32FracPart *= 10;
    4c26:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    4c2a:	0041      	lsls	r1, r0, #1
            i32FracPart &= 0x00FFFFFF;
    4c2c:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
            i32FracPart *= 10;
    4c30:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    4c34:	006c      	lsls	r4, r5, #1
            i32FracPart &= 0x00FFFFFF;
    4c36:	f024 4e7f 	bic.w	lr, r4, #4278190080	; 0xff000000
            i32FracPart *= 10;
    4c3a:	eb0e 078e 	add.w	r7, lr, lr, lsl #2
    4c3e:	ea4f 0c47 	mov.w	ip, r7, lsl #1
            i32FracPart &= 0x00FFFFFF;
    4c42:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
            i32FracPart *= 10;
    4c46:	eb00 0580 	add.w	r5, r0, r0, lsl #2
    4c4a:	ea4f 0e45 	mov.w	lr, r5, lsl #1
            i32FracPart &= 0x00FFFFFF;
    4c4e:	f02e 477f 	bic.w	r7, lr, #4278190080	; 0xff000000
            i32FracPart *= 10;
    4c52:	eb07 0087 	add.w	r0, r7, r7, lsl #2
    4c56:	0047      	lsls	r7, r0, #1
            i32FracPart &= 0x00FFFFFF;
    4c58:	f027 457f 	bic.w	r5, r7, #4278190080	; 0xff000000
            i32FracPart *= 10;
    4c5c:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    4c60:	0045      	lsls	r5, r0, #1
            i32FracPart &= 0x00FFFFFF;
    4c62:	f025 407f 	bic.w	r0, r5, #4278190080	; 0xff000000
            i32FracPart *= 10;
    4c66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
            *pcBuf++ = (i32FracPart >> 24) + '0';
    4c6a:	1609      	asrs	r1, r1, #24
            i32FracPart *= 10;
    4c6c:	0040      	lsls	r0, r0, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    4c6e:	3130      	adds	r1, #48	; 0x30
    4c70:	1624      	asrs	r4, r4, #24
    4c72:	3430      	adds	r4, #48	; 0x30
    4c74:	7059      	strb	r1, [r3, #1]
            i32FracPart &= 0x00FFFFFF;
    4c76:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
            *pcBuf++ = (i32FracPart >> 24) + '0';
    4c7a:	709c      	strb	r4, [r3, #2]
            i32FracPart *= 10;
    4c7c:	eb01 0481 	add.w	r4, r1, r1, lsl #2
    4c80:	0064      	lsls	r4, r4, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    4c82:	1601      	asrs	r1, r0, #24
    4c84:	ea4f 6c2c 	mov.w	ip, ip, asr #24
    4c88:	1620      	asrs	r0, r4, #24
    4c8a:	ea4f 6e2e 	mov.w	lr, lr, asr #24
    4c8e:	163f      	asrs	r7, r7, #24
    4c90:	162d      	asrs	r5, r5, #24
    4c92:	3730      	adds	r7, #48	; 0x30
    4c94:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    4c98:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
    4c9c:	3530      	adds	r5, #48	; 0x30
    4c9e:	3130      	adds	r1, #48	; 0x30
    4ca0:	3030      	adds	r0, #48	; 0x30
    4ca2:	715f      	strb	r7, [r3, #5]
    4ca4:	f883 c003 	strb.w	ip, [r3, #3]
    4ca8:	f883 e004 	strb.w	lr, [r3, #4]
    4cac:	719d      	strb	r5, [r3, #6]
    4cae:	71d9      	strb	r1, [r3, #7]
        for (jx = 0; jx < iMax; jx++)
    4cb0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
            *pcBuf++ = (i32FracPart >> 24) + '0';
    4cb2:	f803 0f08 	strb.w	r0, [r3, #8]!
        for (jx = 0; jx < iMax; jx++)
    4cb6:	429f      	cmp	r7, r3
            i32FracPart &= 0x00FFFFFF;
    4cb8:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    4cbc:	d1b3      	bne.n	4c26 <am_util_stdio_vsprintf+0xe12>
    4cbe:	4452      	add	r2, sl
    4cc0:	eba2 0008 	sub.w	r0, r2, r8
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    4cc4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    4cc8:	f343 55c7 	sbfx	r5, r3, #23, #8
    4ccc:	2d04      	cmp	r5, #4
    4cce:	f77f af05 	ble.w	4adc <am_util_stdio_vsprintf+0xcc8>
            pcBuftmp = pcBuf - 1;
    4cd2:	1e53      	subs	r3, r2, #1
            while ( pcBuftmp >= pcBufInitial )
    4cd4:	4598      	cmp	r8, r3
    4cd6:	f63f af01 	bhi.w	4adc <am_util_stdio_vsprintf+0xcc8>
    4cda:	f108 37ff 	add.w	r7, r8, #4294967295
                if ( *pcBuftmp == '.' )
    4cde:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    4ce2:	1afc      	subs	r4, r7, r3
    4ce4:	43e5      	mvns	r5, r4
    4ce6:	292e      	cmp	r1, #46	; 0x2e
    4ce8:	f005 0407 	and.w	r4, r5, #7
    4cec:	d005      	beq.n	4cfa <am_util_stdio_vsprintf+0xee6>
                else if ( *pcBuftmp == '9' )
    4cee:	2939      	cmp	r1, #57	; 0x39
    4cf0:	f040 8161 	bne.w	4fb6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    4cf4:	f04f 0130 	mov.w	r1, #48	; 0x30
    4cf8:	7019      	strb	r1, [r3, #0]
                pcBuftmp--;
    4cfa:	3b01      	subs	r3, #1
            while ( pcBuftmp >= pcBufInitial )
    4cfc:	42bb      	cmp	r3, r7
    4cfe:	f43f aeed 	beq.w	4adc <am_util_stdio_vsprintf+0xcc8>
    4d02:	2c00      	cmp	r4, #0
    4d04:	d054      	beq.n	4db0 <am_util_stdio_vsprintf+0xf9c>
    4d06:	2c01      	cmp	r4, #1
    4d08:	d045      	beq.n	4d96 <am_util_stdio_vsprintf+0xf82>
    4d0a:	2c02      	cmp	r4, #2
    4d0c:	d039      	beq.n	4d82 <am_util_stdio_vsprintf+0xf6e>
    4d0e:	2c03      	cmp	r4, #3
    4d10:	d02d      	beq.n	4d6e <am_util_stdio_vsprintf+0xf5a>
    4d12:	2c04      	cmp	r4, #4
    4d14:	d021      	beq.n	4d5a <am_util_stdio_vsprintf+0xf46>
    4d16:	2c05      	cmp	r4, #5
    4d18:	d015      	beq.n	4d46 <am_util_stdio_vsprintf+0xf32>
    4d1a:	2c06      	cmp	r4, #6
    4d1c:	d009      	beq.n	4d32 <am_util_stdio_vsprintf+0xf1e>
                if ( *pcBuftmp == '.' )
    4d1e:	7819      	ldrb	r1, [r3, #0]
    4d20:	292e      	cmp	r1, #46	; 0x2e
    4d22:	d005      	beq.n	4d30 <am_util_stdio_vsprintf+0xf1c>
                else if ( *pcBuftmp == '9' )
    4d24:	2939      	cmp	r1, #57	; 0x39
    4d26:	f040 8146 	bne.w	4fb6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    4d2a:	f04f 0530 	mov.w	r5, #48	; 0x30
    4d2e:	701d      	strb	r5, [r3, #0]
                pcBuftmp--;
    4d30:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    4d32:	7819      	ldrb	r1, [r3, #0]
    4d34:	292e      	cmp	r1, #46	; 0x2e
    4d36:	d005      	beq.n	4d44 <am_util_stdio_vsprintf+0xf30>
                else if ( *pcBuftmp == '9' )
    4d38:	2939      	cmp	r1, #57	; 0x39
    4d3a:	f040 813c 	bne.w	4fb6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    4d3e:	f04f 0430 	mov.w	r4, #48	; 0x30
    4d42:	701c      	strb	r4, [r3, #0]
                pcBuftmp--;
    4d44:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    4d46:	7819      	ldrb	r1, [r3, #0]
    4d48:	292e      	cmp	r1, #46	; 0x2e
    4d4a:	d005      	beq.n	4d58 <am_util_stdio_vsprintf+0xf44>
                else if ( *pcBuftmp == '9' )
    4d4c:	2939      	cmp	r1, #57	; 0x39
    4d4e:	f040 8132 	bne.w	4fb6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    4d52:	f04f 0130 	mov.w	r1, #48	; 0x30
    4d56:	7019      	strb	r1, [r3, #0]
                pcBuftmp--;
    4d58:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    4d5a:	7819      	ldrb	r1, [r3, #0]
    4d5c:	292e      	cmp	r1, #46	; 0x2e
    4d5e:	d005      	beq.n	4d6c <am_util_stdio_vsprintf+0xf58>
                else if ( *pcBuftmp == '9' )
    4d60:	2939      	cmp	r1, #57	; 0x39
    4d62:	f040 8128 	bne.w	4fb6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    4d66:	f04f 0530 	mov.w	r5, #48	; 0x30
    4d6a:	701d      	strb	r5, [r3, #0]
                pcBuftmp--;
    4d6c:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    4d6e:	7819      	ldrb	r1, [r3, #0]
    4d70:	292e      	cmp	r1, #46	; 0x2e
    4d72:	d005      	beq.n	4d80 <am_util_stdio_vsprintf+0xf6c>
                else if ( *pcBuftmp == '9' )
    4d74:	2939      	cmp	r1, #57	; 0x39
    4d76:	f040 811e 	bne.w	4fb6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    4d7a:	f04f 0430 	mov.w	r4, #48	; 0x30
    4d7e:	701c      	strb	r4, [r3, #0]
                pcBuftmp--;
    4d80:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    4d82:	7819      	ldrb	r1, [r3, #0]
    4d84:	292e      	cmp	r1, #46	; 0x2e
    4d86:	d005      	beq.n	4d94 <am_util_stdio_vsprintf+0xf80>
                else if ( *pcBuftmp == '9' )
    4d88:	2939      	cmp	r1, #57	; 0x39
    4d8a:	f040 8114 	bne.w	4fb6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    4d8e:	f04f 0130 	mov.w	r1, #48	; 0x30
    4d92:	7019      	strb	r1, [r3, #0]
                pcBuftmp--;
    4d94:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    4d96:	7819      	ldrb	r1, [r3, #0]
    4d98:	292e      	cmp	r1, #46	; 0x2e
    4d9a:	d005      	beq.n	4da8 <am_util_stdio_vsprintf+0xf94>
                else if ( *pcBuftmp == '9' )
    4d9c:	2939      	cmp	r1, #57	; 0x39
    4d9e:	f040 810a 	bne.w	4fb6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    4da2:	f04f 0530 	mov.w	r5, #48	; 0x30
    4da6:	701d      	strb	r5, [r3, #0]
                pcBuftmp--;
    4da8:	3b01      	subs	r3, #1
            while ( pcBuftmp >= pcBufInitial )
    4daa:	42bb      	cmp	r3, r7
    4dac:	f43f ae96 	beq.w	4adc <am_util_stdio_vsprintf+0xcc8>
                if ( *pcBuftmp == '.' )
    4db0:	7819      	ldrb	r1, [r3, #0]
    4db2:	292e      	cmp	r1, #46	; 0x2e
    4db4:	d005      	beq.n	4dc2 <am_util_stdio_vsprintf+0xfae>
                else if ( *pcBuftmp == '9' )
    4db6:	2939      	cmp	r1, #57	; 0x39
    4db8:	f040 80fd 	bne.w	4fb6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    4dbc:	f04f 0430 	mov.w	r4, #48	; 0x30
    4dc0:	701c      	strb	r4, [r3, #0]
                pcBuftmp--;
    4dc2:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    4dc4:	7819      	ldrb	r1, [r3, #0]
    4dc6:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    4dc8:	469a      	mov	sl, r3
                if ( *pcBuftmp == '.' )
    4dca:	d005      	beq.n	4dd8 <am_util_stdio_vsprintf+0xfc4>
                else if ( *pcBuftmp == '9' )
    4dcc:	2939      	cmp	r1, #57	; 0x39
    4dce:	f040 80f2 	bne.w	4fb6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    4dd2:	f04f 0130 	mov.w	r1, #48	; 0x30
    4dd6:	7019      	strb	r1, [r3, #0]
                if ( *pcBuftmp == '.' )
    4dd8:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
    4ddc:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    4dde:	f10a 33ff 	add.w	r3, sl, #4294967295
                if ( *pcBuftmp == '.' )
    4de2:	d006      	beq.n	4df2 <am_util_stdio_vsprintf+0xfde>
                else if ( *pcBuftmp == '9' )
    4de4:	2939      	cmp	r1, #57	; 0x39
    4de6:	f040 80e6 	bne.w	4fb6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    4dea:	f04f 0c30 	mov.w	ip, #48	; 0x30
    4dee:	f80a cc01 	strb.w	ip, [sl, #-1]
                if ( *pcBuftmp == '.' )
    4df2:	f81a 1c02 	ldrb.w	r1, [sl, #-2]
    4df6:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    4df8:	f1aa 0302 	sub.w	r3, sl, #2
                if ( *pcBuftmp == '.' )
    4dfc:	d006      	beq.n	4e0c <am_util_stdio_vsprintf+0xff8>
                else if ( *pcBuftmp == '9' )
    4dfe:	2939      	cmp	r1, #57	; 0x39
    4e00:	f040 80d9 	bne.w	4fb6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    4e04:	f04f 0330 	mov.w	r3, #48	; 0x30
    4e08:	f80a 3c02 	strb.w	r3, [sl, #-2]
                if ( *pcBuftmp == '.' )
    4e0c:	f81a 1c03 	ldrb.w	r1, [sl, #-3]
    4e10:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    4e12:	f1aa 0303 	sub.w	r3, sl, #3
                if ( *pcBuftmp == '.' )
    4e16:	d006      	beq.n	4e26 <am_util_stdio_vsprintf+0x1012>
                else if ( *pcBuftmp == '9' )
    4e18:	2939      	cmp	r1, #57	; 0x39
    4e1a:	f040 80cc 	bne.w	4fb6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    4e1e:	f04f 0530 	mov.w	r5, #48	; 0x30
    4e22:	f80a 5c03 	strb.w	r5, [sl, #-3]
                if ( *pcBuftmp == '.' )
    4e26:	f81a 1c04 	ldrb.w	r1, [sl, #-4]
    4e2a:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    4e2c:	f1aa 0304 	sub.w	r3, sl, #4
                if ( *pcBuftmp == '.' )
    4e30:	d006      	beq.n	4e40 <am_util_stdio_vsprintf+0x102c>
                else if ( *pcBuftmp == '9' )
    4e32:	2939      	cmp	r1, #57	; 0x39
    4e34:	f040 80bf 	bne.w	4fb6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    4e38:	f04f 0430 	mov.w	r4, #48	; 0x30
    4e3c:	f80a 4c04 	strb.w	r4, [sl, #-4]
                if ( *pcBuftmp == '.' )
    4e40:	f81a 1c05 	ldrb.w	r1, [sl, #-5]
    4e44:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    4e46:	f1aa 0305 	sub.w	r3, sl, #5
                if ( *pcBuftmp == '.' )
    4e4a:	d006      	beq.n	4e5a <am_util_stdio_vsprintf+0x1046>
                else if ( *pcBuftmp == '9' )
    4e4c:	2939      	cmp	r1, #57	; 0x39
    4e4e:	f040 80b2 	bne.w	4fb6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    4e52:	f04f 0130 	mov.w	r1, #48	; 0x30
    4e56:	f80a 1c05 	strb.w	r1, [sl, #-5]
                if ( *pcBuftmp == '.' )
    4e5a:	f81a 1c06 	ldrb.w	r1, [sl, #-6]
    4e5e:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    4e60:	f1aa 0306 	sub.w	r3, sl, #6
                if ( *pcBuftmp == '.' )
    4e64:	d006      	beq.n	4e74 <am_util_stdio_vsprintf+0x1060>
                else if ( *pcBuftmp == '9' )
    4e66:	2939      	cmp	r1, #57	; 0x39
    4e68:	f040 80a5 	bne.w	4fb6 <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    4e6c:	f04f 0c30 	mov.w	ip, #48	; 0x30
    4e70:	f80a cc06 	strb.w	ip, [sl, #-6]
                pcBuftmp--;
    4e74:	f1aa 0307 	sub.w	r3, sl, #7
            while ( pcBuftmp >= pcBufInitial )
    4e78:	42bb      	cmp	r3, r7
    4e7a:	d199      	bne.n	4db0 <am_util_stdio_vsprintf+0xf9c>
    4e7c:	e62e      	b.n	4adc <am_util_stdio_vsprintf+0xcc8>
        switch ( *pcFmt )
    4e7e:	f04f 0c01 	mov.w	ip, #1
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    4e82:	f10b 0307 	add.w	r3, fp, #7
    4e86:	f023 0a07 	bic.w	sl, r3, #7
    4e8a:	f10a 0b08 	add.w	fp, sl, #8
    4e8e:	e9da 2300 	ldrd	r2, r3, [sl]
    4e92:	f7ff b877 	b.w	3f84 <am_util_stdio_vsprintf+0x170>
                while (*pcStr != 0x0)
    4e96:	7801      	ldrb	r1, [r0, #0]
    4e98:	b369      	cbz	r1, 4ef6 <am_util_stdio_vsprintf+0x10e2>
        return ui32RetVal;
    4e9a:	4607      	mov	r7, r0
    4e9c:	2201      	movs	r2, #1
    4e9e:	f7ff bb40 	b.w	4522 <am_util_stdio_vsprintf+0x70e>
                iVal = uint64_to_str(ui64Val, pcBuf);
    4ea2:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    4ea6:	463a      	mov	r2, r7
    4ea8:	f7fe feb6 	bl	3c18 <uint64_to_str>
    4eac:	46b8      	mov	r8, r7
                ui32CharCnt += iVal;
    4eae:	4481      	add	r9, r0
    4eb0:	f7ff b962 	b.w	4178 <am_util_stdio_vsprintf+0x364>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    4eb4:	1c43      	adds	r3, r0, #1
    4eb6:	d032      	beq.n	4f1e <am_util_stdio_vsprintf+0x110a>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    4eb8:	3002      	adds	r0, #2
    4eba:	d036      	beq.n	4f2a <am_util_stdio_vsprintf+0x1116>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    4ebc:	4a4d      	ldr	r2, [pc, #308]	; (4ff4 <am_util_stdio_vsprintf+0x11e0>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    4ebe:	f8c8 2000 	str.w	r2, [r8]
    4ec2:	f04f 0a03 	mov.w	sl, #3
    4ec6:	f7ff b955 	b.w	4174 <am_util_stdio_vsprintf+0x360>
                iVal = uint64_to_str(ui64Val, pcBuf);
    4eca:	4642      	mov	r2, r8
    4ecc:	f7fe fea4 	bl	3c18 <uint64_to_str>
                        ++ui32CharCnt;
    4ed0:	f109 0901 	add.w	r9, r9, #1
                ui32CharCnt += iVal;
    4ed4:	4481      	add	r9, r0
    4ed6:	f7ff b94f 	b.w	4178 <am_util_stdio_vsprintf+0x364>
    if ( i32NumChars <= 0 )
    4eda:	2200      	movs	r2, #0
    4edc:	2500      	movs	r5, #0
    4ede:	f7ff bb91 	b.w	4604 <am_util_stdio_vsprintf+0x7f0>
    4ee2:	2200      	movs	r2, #0
                        pcBuf += pcBuf ? iWidth : 0;
    4ee4:	f1b8 0f00 	cmp.w	r8, #0
    4ee8:	f43f abf9 	beq.w	46de <am_util_stdio_vsprintf+0x8ca>
    4eec:	4614      	mov	r4, r2
    4eee:	f7ff bbed 	b.w	46cc <am_util_stdio_vsprintf+0x8b8>
                if ( iWidth > 0 )
    4ef2:	2c00      	cmp	r4, #0
    4ef4:	dc02      	bgt.n	4efc <am_util_stdio_vsprintf+0x10e8>
        return ui32RetVal;
    4ef6:	460f      	mov	r7, r1
    4ef8:	f7ff bb21 	b.w	453e <am_util_stdio_vsprintf+0x72a>
                    if ( ui32strlen < iWidth )
    4efc:	460f      	mov	r7, r1
    4efe:	f7ff bb88 	b.w	4612 <am_util_stdio_vsprintf+0x7fe>
                            if ( pcBuf )
    4f02:	f1b8 0f00 	cmp.w	r8, #0
    4f06:	f43f ada3 	beq.w	4a50 <am_util_stdio_vsprintf+0xc3c>
                            ++ui32CharCnt;
    4f0a:	2401      	movs	r4, #1
                                *pcBuf++ = '-';
    4f0c:	232d      	movs	r3, #45	; 0x2d
    4f0e:	f888 3000 	strb.w	r3, [r8]
                            ++ui32CharCnt;
    4f12:	f109 0901 	add.w	r9, r9, #1
                        --iWidth;
    4f16:	460f      	mov	r7, r1
                            ++ui32CharCnt;
    4f18:	941b      	str	r4, [sp, #108]	; 0x6c
                                *pcBuf++ = '-';
    4f1a:	44a0      	add	r8, r4
    4f1c:	e531      	b.n	4982 <am_util_stdio_vsprintf+0xb6e>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    4f1e:	4a36      	ldr	r2, [pc, #216]	; (4ff8 <am_util_stdio_vsprintf+0x11e4>)
    4f20:	e7cd      	b.n	4ebe <am_util_stdio_vsprintf+0x10aa>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    4f22:	f04f 0a00 	mov.w	sl, #0
        uCnt++;
    4f26:	2201      	movs	r2, #1
    4f28:	e5eb      	b.n	4b02 <am_util_stdio_vsprintf+0xcee>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    4f2a:	4a34      	ldr	r2, [pc, #208]	; (4ffc <am_util_stdio_vsprintf+0x11e8>)
    4f2c:	e7c7      	b.n	4ebe <am_util_stdio_vsprintf+0x10aa>
                    pcBuf += pcBuf ? iWidth : 0;
    4f2e:	f1b8 0f00 	cmp.w	r8, #0
    4f32:	d13d      	bne.n	4fb0 <am_util_stdio_vsprintf+0x119c>
    4f34:	4640      	mov	r0, r8
    4f36:	e594      	b.n	4a62 <am_util_stdio_vsprintf+0xc4e>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    4f38:	43cd      	mvns	r5, r1
    if (unFloatValue.I32 < 0)
    4f3a:	2f00      	cmp	r7, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    4f3c:	fa40 f405 	asr.w	r4, r0, r5
    if (unFloatValue.I32 < 0)
    4f40:	db27      	blt.n	4f92 <am_util_stdio_vsprintf+0x117e>
    4f42:	4643      	mov	r3, r8
        *pcBuf++ = '0';
    4f44:	f04f 0030 	mov.w	r0, #48	; 0x30
    4f48:	7018      	strb	r0, [r3, #0]
    4f4a:	1c5d      	adds	r5, r3, #1
    4f4c:	e5f8      	b.n	4b40 <am_util_stdio_vsprintf+0xd2c>
                    iWidth -= ndigits_in_i64(ui64Val);
    4f4e:	1b3f      	subs	r7, r7, r4
                    bNeg = false;
    4f50:	2400      	movs	r4, #0
    4f52:	941b      	str	r4, [sp, #108]	; 0x6c
    4f54:	e515      	b.n	4982 <am_util_stdio_vsprintf+0xb6e>
    if (i32IntPart == 0)
    4f56:	4643      	mov	r3, r8
    i32FracPart = 0;
    4f58:	2400      	movs	r4, #0
        if (i32IntPart > 0)
    4f5a:	2800      	cmp	r0, #0
    4f5c:	dc37      	bgt.n	4fce <am_util_stdio_vsprintf+0x11ba>
            *pcBuf++ = '-';
    4f5e:	1c5d      	adds	r5, r3, #1
    4f60:	272d      	movs	r7, #45	; 0x2d
            uint64_to_str(-i32IntPart, pcBuf);
    4f62:	4240      	negs	r0, r0
    4f64:	17c1      	asrs	r1, r0, #31
    4f66:	462a      	mov	r2, r5
            *pcBuf++ = '-';
    4f68:	701f      	strb	r7, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    4f6a:	f7fe fe55 	bl	3c18 <uint64_to_str>
    4f6e:	e5e1      	b.n	4b34 <am_util_stdio_vsprintf+0xd20>
        *pcBuf++ = '-';
    4f70:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
    4f74:	f888 e000 	strb.w	lr, [r8]
    4f78:	f108 0301 	add.w	r3, r8, #1
    if (i32IntPart == 0)
    4f7c:	bb78      	cbnz	r0, 4fde <am_util_stdio_vsprintf+0x11ca>
    *pcBuf++ = '.';
    4f7e:	272e      	movs	r7, #46	; 0x2e
        *pcBuf++ = '0';
    4f80:	f04f 0030 	mov.w	r0, #48	; 0x30
    4f84:	f888 0001 	strb.w	r0, [r8, #1]
    *pcBuf++ = '.';
    4f88:	f888 7002 	strb.w	r7, [r8, #2]
        *pcBuf++ = '0';
    4f8c:	f108 0502 	add.w	r5, r8, #2
    4f90:	e59e      	b.n	4ad0 <am_util_stdio_vsprintf+0xcbc>
        *pcBuf++ = '-';
    4f92:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
    4f96:	f888 c000 	strb.w	ip, [r8]
    4f9a:	f108 0301 	add.w	r3, r8, #1
    4f9e:	e7d1      	b.n	4f44 <am_util_stdio_vsprintf+0x1130>
    4fa0:	272d      	movs	r7, #45	; 0x2d
    4fa2:	f888 7000 	strb.w	r7, [r8]
    4fa6:	f108 0301 	add.w	r3, r8, #1
    if (i32IntPart == 0)
    4faa:	2800      	cmp	r0, #0
    4fac:	d0ca      	beq.n	4f44 <am_util_stdio_vsprintf+0x1130>
    4fae:	e7d4      	b.n	4f5a <am_util_stdio_vsprintf+0x1146>
    4fb0:	f04f 0e00 	mov.w	lr, #0
    4fb4:	e535      	b.n	4a22 <am_util_stdio_vsprintf+0xc0e>
                    *pcBuftmp += 1;
    4fb6:	3101      	adds	r1, #1
    4fb8:	7019      	strb	r1, [r3, #0]
    4fba:	e58f      	b.n	4adc <am_util_stdio_vsprintf+0xcc8>
    int iNDigits = ui64Val ? 0 : 1;
    4fbc:	460b      	mov	r3, r1
    4fbe:	4301      	orrs	r1, r0
    4fc0:	4602      	mov	r2, r0
    4fc2:	bf0c      	ite	eq
    4fc4:	2401      	moveq	r4, #1
    4fc6:	2400      	movne	r4, #0
                    bNeg = true;
    4fc8:	2001      	movs	r0, #1
    4fca:	f7ff b906 	b.w	41da <am_util_stdio_vsprintf+0x3c6>
        if (i32IntPart > 0)
    4fce:	461d      	mov	r5, r3
    4fd0:	e5ac      	b.n	4b2c <am_util_stdio_vsprintf+0xd18>
                iVal = uint64_to_str(ui64Val, pcBuf);
    4fd2:	4642      	mov	r2, r8
    4fd4:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    4fd8:	f7fe fe1e 	bl	3c18 <uint64_to_str>
    4fdc:	e4b4      	b.n	4948 <am_util_stdio_vsprintf+0xb34>
    i32FracPart = 0;
    4fde:	2400      	movs	r4, #0
    4fe0:	e7bb      	b.n	4f5a <am_util_stdio_vsprintf+0x1146>
    4fe2:	f1ca 0430 	rsb	r4, sl, #48	; 0x30
    4fe6:	7832      	ldrb	r2, [r6, #0]
    4fe8:	f7fe bf7c 	b.w	3ee4 <am_util_stdio_vsprintf+0xd0>
        bLower = bLongLong = false;
    4fec:	f04f 0c00 	mov.w	ip, #0
    4ff0:	e747      	b.n	4e82 <am_util_stdio_vsprintf+0x106e>
    4ff2:	bf00      	nop
    4ff4:	003f2e3f 	.word	0x003f2e3f
    4ff8:	00302e30 	.word	0x00302e30
    4ffc:	00232e23 	.word	0x00232e23

00005000 <am_util_stdio_sprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_sprintf(char *pcBuf, const char *pcFmt, ...)
{
    5000:	b40e      	push	{r1, r2, r3}
    5002:	b500      	push	{lr}
    5004:	b082      	sub	sp, #8
    5006:	aa03      	add	r2, sp, #12
    5008:	f852 1b04 	ldr.w	r1, [r2], #4
    uint32_t ui32CharCnt;

    va_list pArgs;
    va_start(pArgs, pcFmt);
    500c:	9201      	str	r2, [sp, #4]
    ui32CharCnt = am_util_stdio_vsprintf(pcBuf, pcFmt, pArgs);
    500e:	f7fe ff01 	bl	3e14 <am_util_stdio_vsprintf>
    va_end(pArgs);

    return ui32CharCnt;
}
    5012:	b002      	add	sp, #8
    5014:	f85d eb04 	ldr.w	lr, [sp], #4
    5018:	b003      	add	sp, #12
    501a:	4770      	bx	lr

0000501c <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    501c:	b40f      	push	{r0, r1, r2, r3}
    501e:	b530      	push	{r4, r5, lr}
    5020:	b083      	sub	sp, #12
    5022:	aa06      	add	r2, sp, #24
    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    5024:	4c08      	ldr	r4, [pc, #32]	; (5048 <am_util_stdio_printf+0x2c>)
{
    5026:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(pArgs, pcFmt);
    502a:	9201      	str	r2, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    502c:	4620      	mov	r0, r4
    502e:	f7fe fef1 	bl	3e14 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    5032:	4b06      	ldr	r3, [pc, #24]	; (504c <am_util_stdio_printf+0x30>)
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    5034:	4605      	mov	r5, r0
    g_pfnCharPrint(g_prfbuf);
    5036:	6819      	ldr	r1, [r3, #0]
    5038:	4620      	mov	r0, r4
    503a:	4788      	blx	r1

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    503c:	4628      	mov	r0, r5
    503e:	b003      	add	sp, #12
    5040:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    5044:	b004      	add	sp, #16
    5046:	4770      	bx	lr
    5048:	10001068 	.word	0x10001068
    504c:	1000156c 	.word	0x1000156c

00005050 <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    5050:	4801      	ldr	r0, [pc, #4]	; (5058 <am_util_stdio_terminal_clear+0x8>)
    5052:	f7ff bfe3 	b.w	501c <am_util_stdio_printf>
    5056:	bf00      	nop
    5058:	00005e28 	.word	0x00005e28

0000505c <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    505c:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    505e:	f000 fa9b 	bl	5598 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    5062:	f000 fad9 	bl	5618 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    5066:	f000 fbfd 	bl	5864 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    506a:	2001      	movs	r0, #1
    506c:	f000 fae4 	bl	5638 <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    5070:	2001      	movs	r0, #1
    5072:	f000 f8c7 	bl	5204 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    5076:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    507a:	f000 baeb 	b.w	5654 <am_hal_rtc_osc_disable>
    507e:	bf00      	nop

00005080 <am_bsp_uart_string_print>:
//
//*****************************************************************************
void
am_bsp_uart_string_print(char *pcString)
{
    am_hal_uart_string_transmit_polled(AM_BSP_UART_PRINT_INST, pcString);
    5080:	4601      	mov	r1, r0
    5082:	2000      	movs	r0, #0
    5084:	f000 bbda 	b.w	583c <am_hal_uart_string_transmit_polled>

00005088 <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    5088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    508a:	4605      	mov	r5, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    508c:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    5090:	78ab      	ldrb	r3, [r5, #2]
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    5092:	786c      	ldrb	r4, [r5, #1]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    5094:	78ef      	ldrb	r7, [r5, #3]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    5096:	792e      	ldrb	r6, [r5, #4]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    5098:	79a9      	ldrb	r1, [r5, #6]
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    509a:	009a      	lsls	r2, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    509c:	0064      	lsls	r4, r4, #1
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    509e:	f002 0204 	and.w	r2, r2, #4
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    50a2:	f004 0402 	and.w	r4, r4, #2
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    50a6:	4314      	orrs	r4, r2
    50a8:	f047 0701 	orr.w	r7, r7, #1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    50ac:	79ea      	ldrb	r2, [r5, #7]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    50ae:	01f6      	lsls	r6, r6, #7
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    50b0:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    50b2:	b2f6      	uxtb	r6, r6
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    50b4:	7a2f      	ldrb	r7, [r5, #8]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    50b6:	0289      	lsls	r1, r1, #10
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    50b8:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    50ba:	f401 6180 	and.w	r1, r1, #1024	; 0x400
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    50be:	7a6e      	ldrb	r6, [r5, #9]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    50c0:	02d2      	lsls	r2, r2, #11
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    50c2:	430c      	orrs	r4, r1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    50c4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    50c8:	7aa9      	ldrb	r1, [r5, #10]
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    50ca:	033f      	lsls	r7, r7, #12
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    50cc:	4314      	orrs	r4, r2
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    50ce:	b2bf      	uxth	r7, r7
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    50d0:	0436      	lsls	r6, r6, #16
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    50d2:	7aea      	ldrb	r2, [r5, #11]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    50d4:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    50d6:	0509      	lsls	r1, r1, #20
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    50d8:	f406 2770 	and.w	r7, r6, #983040	; 0xf0000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    50dc:	0612      	lsls	r2, r2, #24
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    50de:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    50e0:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    50e4:	009b      	lsls	r3, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    50e6:	f002 7780 	and.w	r7, r2, #16777216	; 0x1000000
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    50ea:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    50ec:	f003 0108 	and.w	r1, r3, #8
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    50f0:	433c      	orrs	r4, r7
    50f2:	430c      	orrs	r4, r1
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    50f4:	f000 f94a 	bl	538c <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    50f8:	482c      	ldr	r0, [pc, #176]	; (51ac <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    50fa:	4b2d      	ldr	r3, [pc, #180]	; (51b0 <am_hal_cachectrl_enable+0x128>)
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    50fc:	6004      	str	r4, [r0, #0]
    50fe:	2232      	movs	r2, #50	; 0x32
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    5100:	681e      	ldr	r6, [r3, #0]
    5102:	0777      	lsls	r7, r6, #29
    5104:	d41e      	bmi.n	5144 <am_hal_cachectrl_enable+0xbc>
    5106:	681f      	ldr	r7, [r3, #0]
    5108:	077e      	lsls	r6, r7, #29
    510a:	f102 32ff 	add.w	r2, r2, #4294967295
    510e:	d419      	bmi.n	5144 <am_hal_cachectrl_enable+0xbc>
    5110:	6819      	ldr	r1, [r3, #0]
    5112:	074f      	lsls	r7, r1, #29
    5114:	d416      	bmi.n	5144 <am_hal_cachectrl_enable+0xbc>
    5116:	6818      	ldr	r0, [r3, #0]
    5118:	0746      	lsls	r6, r0, #29
    511a:	d413      	bmi.n	5144 <am_hal_cachectrl_enable+0xbc>
    511c:	681e      	ldr	r6, [r3, #0]
    511e:	0770      	lsls	r0, r6, #29
    5120:	d410      	bmi.n	5144 <am_hal_cachectrl_enable+0xbc>
    5122:	681f      	ldr	r7, [r3, #0]
    5124:	0779      	lsls	r1, r7, #29
    5126:	d40d      	bmi.n	5144 <am_hal_cachectrl_enable+0xbc>
    5128:	6819      	ldr	r1, [r3, #0]
    512a:	074f      	lsls	r7, r1, #29
    512c:	d40a      	bmi.n	5144 <am_hal_cachectrl_enable+0xbc>
    512e:	6818      	ldr	r0, [r3, #0]
    5130:	0746      	lsls	r6, r0, #29
    5132:	d407      	bmi.n	5144 <am_hal_cachectrl_enable+0xbc>
    5134:	681e      	ldr	r6, [r3, #0]
    5136:	0770      	lsls	r0, r6, #29
    5138:	d404      	bmi.n	5144 <am_hal_cachectrl_enable+0xbc>
    513a:	681f      	ldr	r7, [r3, #0]
    513c:	0779      	lsls	r1, r7, #29
    513e:	d401      	bmi.n	5144 <am_hal_cachectrl_enable+0xbc>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    5140:	3a09      	subs	r2, #9
    5142:	d1dd      	bne.n	5100 <am_hal_cachectrl_enable+0x78>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    5144:	4b1a      	ldr	r3, [pc, #104]	; (51b0 <am_hal_cachectrl_enable+0x128>)
    5146:	681a      	ldr	r2, [r3, #0]
    5148:	f042 0101 	orr.w	r1, r2, #1
    514c:	6019      	str	r1, [r3, #0]
    514e:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    5150:	6818      	ldr	r0, [r3, #0]
    5152:	0740      	lsls	r0, r0, #29
    5154:	d41e      	bmi.n	5194 <am_hal_cachectrl_enable+0x10c>
    5156:	681e      	ldr	r6, [r3, #0]
    5158:	0771      	lsls	r1, r6, #29
    515a:	f102 32ff 	add.w	r2, r2, #4294967295
    515e:	d419      	bmi.n	5194 <am_hal_cachectrl_enable+0x10c>
    5160:	681f      	ldr	r7, [r3, #0]
    5162:	077f      	lsls	r7, r7, #29
    5164:	d416      	bmi.n	5194 <am_hal_cachectrl_enable+0x10c>
    5166:	6819      	ldr	r1, [r3, #0]
    5168:	074e      	lsls	r6, r1, #29
    516a:	d413      	bmi.n	5194 <am_hal_cachectrl_enable+0x10c>
    516c:	6818      	ldr	r0, [r3, #0]
    516e:	0740      	lsls	r0, r0, #29
    5170:	d410      	bmi.n	5194 <am_hal_cachectrl_enable+0x10c>
    5172:	681e      	ldr	r6, [r3, #0]
    5174:	0771      	lsls	r1, r6, #29
    5176:	d40d      	bmi.n	5194 <am_hal_cachectrl_enable+0x10c>
    5178:	681f      	ldr	r7, [r3, #0]
    517a:	077f      	lsls	r7, r7, #29
    517c:	d40a      	bmi.n	5194 <am_hal_cachectrl_enable+0x10c>
    517e:	6819      	ldr	r1, [r3, #0]
    5180:	074e      	lsls	r6, r1, #29
    5182:	d407      	bmi.n	5194 <am_hal_cachectrl_enable+0x10c>
    5184:	6818      	ldr	r0, [r3, #0]
    5186:	0740      	lsls	r0, r0, #29
    5188:	d404      	bmi.n	5194 <am_hal_cachectrl_enable+0x10c>
    518a:	681e      	ldr	r6, [r3, #0]
    518c:	0771      	lsls	r1, r6, #29
    518e:	d401      	bmi.n	5194 <am_hal_cachectrl_enable+0x10c>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    5190:	3a09      	subs	r2, #9
    5192:	d1dd      	bne.n	5150 <am_hal_cachectrl_enable+0xc8>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    5194:	796d      	ldrb	r5, [r5, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    5196:	4f05      	ldr	r7, [pc, #20]	; (51ac <am_hal_cachectrl_enable+0x124>)
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );
    5198:	022b      	lsls	r3, r5, #8
    519a:	f403 7100 	and.w	r1, r3, #512	; 0x200
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    519e:	f403 7280 	and.w	r2, r3, #256	; 0x100
    51a2:	4311      	orrs	r1, r2
    51a4:	430c      	orrs	r4, r1
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    51a6:	603c      	str	r4, [r7, #0]
    51a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    51aa:	bf00      	nop
    51ac:	40018000 	.word	0x40018000
    51b0:	40018008 	.word	0x40018008

000051b4 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    51b4:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    51b6:	4604      	mov	r4, r0
    51b8:	b120      	cbz	r0, 51c4 <am_hal_clkgen_sysclk_select+0x10>
    51ba:	4a06      	ldr	r2, [pc, #24]	; (51d4 <am_hal_clkgen_sysclk_select+0x20>)
    51bc:	4806      	ldr	r0, [pc, #24]	; (51d8 <am_hal_clkgen_sysclk_select+0x24>)
    51be:	2153      	movs	r1, #83	; 0x53
    51c0:	f000 f84e 	bl	5260 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    51c4:	4b05      	ldr	r3, [pc, #20]	; (51dc <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the required operating value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    51c6:	4906      	ldr	r1, [pc, #24]	; (51e0 <am_hal_clkgen_sysclk_select+0x2c>)
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    51c8:	2047      	movs	r0, #71	; 0x47

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    51ca:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    51cc:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    51ce:	600c      	str	r4, [r1, #0]
    AM_REG(CLKGEN, CLKKEY) = 0;
    51d0:	601a      	str	r2, [r3, #0]
    51d2:	bd10      	pop	{r4, pc}
    51d4:	00005e48 	.word	0x00005e48
    51d8:	00005e80 	.word	0x00005e80
    51dc:	40004014 	.word	0x40004014
    51e0:	40004018 	.word	0x40004018

000051e4 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    51e4:	4b04      	ldr	r3, [pc, #16]	; (51f8 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    51e6:	4905      	ldr	r1, [pc, #20]	; (51fc <am_hal_clkgen_sysclk_get+0x18>)
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    51e8:	681a      	ldr	r2, [r3, #0]
            return 48000000;
    51ea:	4805      	ldr	r0, [pc, #20]	; (5200 <am_hal_clkgen_sysclk_get+0x1c>)
    switch ( ui32ClockSetting )
    51ec:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    51f0:	bf08      	it	eq
    51f2:	4608      	moveq	r0, r1
    51f4:	4770      	bx	lr
    51f6:	bf00      	nop
    51f8:	40004018 	.word	0x40004018
    51fc:	02dc6c00 	.word	0x02dc6c00
    5200:	016e3600 	.word	0x016e3600

00005204 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    5204:	0783      	lsls	r3, r0, #30
    5206:	d003      	beq.n	5210 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    5208:	4b02      	ldr	r3, [pc, #8]	; (5214 <am_hal_clkgen_osc_stop+0x10>)
    520a:	681a      	ldr	r2, [r3, #0]
    520c:	4310      	orrs	r0, r2
    520e:	6018      	str	r0, [r3, #0]
    5210:	4770      	bx	lr
    5212:	bf00      	nop
    5214:	4000400c 	.word	0x4000400c

00005218 <am_hal_clkgen_uarten_set>:
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    uint32_t ui32Mask;

    if ( (ui32Module >= AM_REG_UART_NUM_MODULES)        ||
    5218:	2801      	cmp	r0, #1
    521a:	d900      	bls.n	521e <am_hal_clkgen_uarten_set+0x6>
    521c:	4770      	bx	lr
    521e:	2903      	cmp	r1, #3
    5220:	d8fc      	bhi.n	521c <am_hal_clkgen_uarten_set+0x4>
{
    5222:	b530      	push	{r4, r5, lr}
         (ui32UartEn > AM_HAL_CLKGEN_UARTEN_EN_POWER_SAV) )
    {
        return;
    }

    ui32UartEn <<= (ui32Module * AM_HAL_CLKGEN_UARTEN_UARTENn_S(ui32Module));
    5224:	fb00 f500 	mul.w	r5, r0, r0
{
    5228:	b083      	sub	sp, #12
    522a:	4604      	mov	r4, r0
    ui32UartEn <<= (ui32Module * AM_HAL_CLKGEN_UARTEN_UARTENn_S(ui32Module));
    522c:	00e8      	lsls	r0, r5, #3
    522e:	fa01 f500 	lsl.w	r5, r1, r0
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    5232:	f000 f81b 	bl	526c <am_hal_interrupt_master_disable>

    //
    // Set the UART clock
    //
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    5236:	4b09      	ldr	r3, [pc, #36]	; (525c <am_hal_clkgen_uarten_set+0x44>)
    AM_CRITICAL_BEGIN_ASM
    5238:	9001      	str	r0, [sp, #4]
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    523a:	681a      	ldr	r2, [r3, #0]
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));
    523c:	f04f 0c03 	mov.w	ip, #3
    5240:	00e1      	lsls	r1, r4, #3
    5242:	fa0c f401 	lsl.w	r4, ip, r1
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    5246:	ea22 0004 	bic.w	r0, r2, r4
    524a:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, UARTEN) |= ui32UartEn;
    524c:	6819      	ldr	r1, [r3, #0]
    524e:	430d      	orrs	r5, r1
    5250:	601d      	str	r5, [r3, #0]

    //
    // Begin critical section.
    //
    AM_CRITICAL_END_ASM
    5252:	9801      	ldr	r0, [sp, #4]
    5254:	f000 f80e 	bl	5274 <am_hal_interrupt_master_set>
}
    5258:	b003      	add	sp, #12
    525a:	bd30      	pop	{r4, r5, pc}
    525c:	40004034 	.word	0x40004034

00005260 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    5260:	e7fe      	b.n	5260 <am_hal_debug_error>
    5262:	bf00      	nop

00005264 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    5264:	4b00      	ldr	r3, [pc, #0]	; (5268 <am_hal_flash_delay+0x4>)
    5266:	4718      	bx	r3
    5268:	0800009d 	.word	0x0800009d

0000526c <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    526c:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    5270:	b672      	cpsid	i
    __asm("    bx lr");
    5272:	4770      	bx	lr

00005274 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    5274:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    5278:	4770      	bx	lr
    527a:	bf00      	nop

0000527c <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    527c:	490d      	ldr	r1, [pc, #52]	; (52b4 <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    527e:	4b0e      	ldr	r3, [pc, #56]	; (52b8 <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    5280:	4a0e      	ldr	r2, [pc, #56]	; (52bc <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    5282:	681b      	ldr	r3, [r3, #0]
{
    5284:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    5286:	680d      	ldr	r5, [r1, #0]
    5288:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    528a:	6815      	ldr	r5, [r2, #0]
    528c:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    528e:	4c0c      	ldr	r4, [pc, #48]	; (52c0 <am_hal_mcuctrl_fault_status+0x44>)
    5290:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    5292:	4329      	orrs	r1, r5
    5294:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    5296:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    5298:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    529c:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    529e:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    52a0:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    52a4:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    52a8:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    52aa:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    52ac:	6142      	str	r2, [r0, #20]
}
    52ae:	bc70      	pop	{r4, r5, r6}
    52b0:	4770      	bx	lr
    52b2:	bf00      	nop
    52b4:	400201c4 	.word	0x400201c4
    52b8:	400201cc 	.word	0x400201cc
    52bc:	400201c0 	.word	0x400201c0
    52c0:	400201c8 	.word	0x400201c8

000052c4 <am_hal_pwrctrl_periph_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    52c4:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    52c6:	4604      	mov	r4, r0
{
    52c8:	b082      	sub	sp, #8
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    52ca:	b1b8      	cbz	r0, 52fc <am_hal_pwrctrl_periph_enable+0x38>
    52cc:	1e43      	subs	r3, r0, #1
    52ce:	4203      	tst	r3, r0
    52d0:	d114      	bne.n	52fc <am_hal_pwrctrl_periph_enable+0x38>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    52d2:	f7ff ffcb 	bl	526c <am_hal_interrupt_master_disable>

    //
    // Enable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    52d6:	4a18      	ldr	r2, [pc, #96]	; (5338 <am_hal_pwrctrl_periph_enable+0x74>)
    AM_CRITICAL_BEGIN_ASM
    52d8:	9001      	str	r0, [sp, #4]
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    52da:	6810      	ldr	r0, [r2, #0]
    52dc:	4320      	orrs	r0, r4
    52de:	6010      	str	r0, [r2, #0]

    //
    // End Critical Section.
    //
    AM_CRITICAL_END_ASM
    52e0:	9801      	ldr	r0, [sp, #4]
    52e2:	f7ff ffc7 	bl	5274 <am_hal_interrupt_master_set>

    //
    // Wait for the power to stablize.  Using a simple delay loop is more
    // power efficient than a polling loop.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);
    52e6:	200e      	movs	r0, #14
    52e8:	f7ff ffbc 	bl	5264 <am_hal_flash_delay>

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    52ec:	f014 0f0e 	tst.w	r4, #14
    52f0:	d10a      	bne.n	5308 <am_hal_pwrctrl_periph_enable+0x44>
    52f2:	f014 0f70 	tst.w	r4, #112	; 0x70
    52f6:	d00e      	beq.n	5316 <am_hal_pwrctrl_periph_enable+0x52>
    52f8:	2408      	movs	r4, #8
    52fa:	e006      	b.n	530a <am_hal_pwrctrl_periph_enable+0x46>
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    52fc:	4a0f      	ldr	r2, [pc, #60]	; (533c <am_hal_pwrctrl_periph_enable+0x78>)
    52fe:	4810      	ldr	r0, [pc, #64]	; (5340 <am_hal_pwrctrl_periph_enable+0x7c>)
    5300:	2160      	movs	r1, #96	; 0x60
    5302:	f7ff ffad 	bl	5260 <am_hal_debug_error>
    5306:	e7e4      	b.n	52d2 <am_hal_pwrctrl_periph_enable+0xe>
    POLL_PWRSTATUS(ui32Peripheral);
    5308:	2404      	movs	r4, #4
    530a:	4a0e      	ldr	r2, [pc, #56]	; (5344 <am_hal_pwrctrl_periph_enable+0x80>)
    530c:	6813      	ldr	r3, [r2, #0]
    530e:	421c      	tst	r4, r3
    5310:	d0fc      	beq.n	530c <am_hal_pwrctrl_periph_enable+0x48>
}
    5312:	b002      	add	sp, #8
    5314:	bd10      	pop	{r4, pc}
    POLL_PWRSTATUS(ui32Peripheral);
    5316:	f240 1181 	movw	r1, #385	; 0x181
    531a:	420c      	tst	r4, r1
    531c:	d108      	bne.n	5330 <am_hal_pwrctrl_periph_enable+0x6c>
    531e:	05a3      	lsls	r3, r4, #22
    5320:	d408      	bmi.n	5334 <am_hal_pwrctrl_periph_enable+0x70>
    5322:	f414 6f80 	tst.w	r4, #1024	; 0x400
    5326:	bf14      	ite	ne
    5328:	2410      	movne	r4, #16
    532a:	f04f 34ff 	moveq.w	r4, #4294967295
    532e:	e7ec      	b.n	530a <am_hal_pwrctrl_periph_enable+0x46>
    5330:	2402      	movs	r4, #2
    5332:	e7ea      	b.n	530a <am_hal_pwrctrl_periph_enable+0x46>
    5334:	2480      	movs	r4, #128	; 0x80
    5336:	e7e8      	b.n	530a <am_hal_pwrctrl_periph_enable+0x46>
    5338:	40021008 	.word	0x40021008
    533c:	00005e98 	.word	0x00005e98
    5340:	00005ecc 	.word	0x00005ecc
    5344:	40021014 	.word	0x40021014

00005348 <am_hal_pwrctrl_periph_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_disable(uint32_t ui32Peripheral)
{
    5348:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    534a:	4604      	mov	r4, r0
{
    534c:	b082      	sub	sp, #8
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    534e:	b110      	cbz	r0, 5356 <am_hal_pwrctrl_periph_disable+0xe>
    5350:	1e43      	subs	r3, r0, #1
    5352:	4203      	tst	r3, r0
    5354:	d004      	beq.n	5360 <am_hal_pwrctrl_periph_disable+0x18>
    5356:	4a0a      	ldr	r2, [pc, #40]	; (5380 <am_hal_pwrctrl_periph_disable+0x38>)
    5358:	480a      	ldr	r0, [pc, #40]	; (5384 <am_hal_pwrctrl_periph_disable+0x3c>)
    535a:	2190      	movs	r1, #144	; 0x90
    535c:	f7ff ff80 	bl	5260 <am_hal_debug_error>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    5360:	f7ff ff84 	bl	526c <am_hal_interrupt_master_disable>

    //
    // Disable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) &= ~ui32Peripheral;
    5364:	4a08      	ldr	r2, [pc, #32]	; (5388 <am_hal_pwrctrl_periph_disable+0x40>)
    AM_CRITICAL_BEGIN_ASM
    5366:	9001      	str	r0, [sp, #4]
    AM_REG(PWRCTRL, DEVICEEN) &= ~ui32Peripheral;
    5368:	6810      	ldr	r0, [r2, #0]
    536a:	ea20 0104 	bic.w	r1, r0, r4
    536e:	6011      	str	r1, [r2, #0]

    //
    // End critical section.
    //
    AM_CRITICAL_END_ASM
    5370:	9801      	ldr	r0, [sp, #4]
    5372:	f7ff ff7f 	bl	5274 <am_hal_interrupt_master_set>

    //
    // Wait for the power to stablize
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEDIS_DELAYCYCLES / 3);
    5376:	200e      	movs	r0, #14
    5378:	f7ff ff74 	bl	5264 <am_hal_flash_delay>
}
    537c:	b002      	add	sp, #8
    537e:	bd10      	pop	{r4, pc}
    5380:	00005e98 	.word	0x00005e98
    5384:	00005ecc 	.word	0x00005ecc
    5388:	40021008 	.word	0x40021008

0000538c <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    538c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
{
    5390:	b430      	push	{r4, r5}
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    5392:	d03a      	beq.n	540a <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    5394:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    5398:	f000 809d 	beq.w	54d6 <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    539c:	2801      	cmp	r0, #1
    539e:	f000 809d 	beq.w	54dc <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    53a2:	2803      	cmp	r0, #3
    53a4:	f000 80a6 	beq.w	54f4 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    53a8:	2807      	cmp	r0, #7
    53aa:	f000 809c 	beq.w	54e6 <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    53ae:	280f      	cmp	r0, #15
    53b0:	f000 80a5 	beq.w	54fe <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    53b4:	281f      	cmp	r0, #31
    53b6:	f000 80b0 	beq.w	551a <am_hal_pwrctrl_memory_enable+0x18e>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    53ba:	283f      	cmp	r0, #63	; 0x3f
    53bc:	f000 80b4 	beq.w	5528 <am_hal_pwrctrl_memory_enable+0x19c>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    53c0:	287f      	cmp	r0, #127	; 0x7f
    53c2:	f000 80b8 	beq.w	5536 <am_hal_pwrctrl_memory_enable+0x1aa>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    53c6:	28ff      	cmp	r0, #255	; 0xff
    53c8:	f000 80a0 	beq.w	550c <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    53cc:	f240 13ff 	movw	r3, #511	; 0x1ff
    53d0:	4298      	cmp	r0, r3
    53d2:	f000 80b7 	beq.w	5544 <am_hal_pwrctrl_memory_enable+0x1b8>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    53d6:	f240 31ff 	movw	r1, #1023	; 0x3ff
    53da:	4288      	cmp	r0, r1
    53dc:	f000 80b8 	beq.w	5550 <am_hal_pwrctrl_memory_enable+0x1c4>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    53e0:	f240 72ff 	movw	r2, #2047	; 0x7ff
    53e4:	4290      	cmp	r0, r2
    53e6:	d00e      	beq.n	5406 <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    53e8:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    53ec:	f000 80b6 	beq.w	555c <am_hal_pwrctrl_memory_enable+0x1d0>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    53f0:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    53f4:	42a0      	cmp	r0, r4
    53f6:	f000 80b4 	beq.w	5562 <am_hal_pwrctrl_memory_enable+0x1d6>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    53fa:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    53fe:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    5402:	4560      	cmp	r0, ip
    5404:	d132      	bne.n	546c <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    5406:	495b      	ldr	r1, [pc, #364]	; (5574 <am_hal_pwrctrl_memory_enable+0x1e8>)
    5408:	e066      	b.n	54d8 <am_hal_pwrctrl_memory_enable+0x14c>
    540a:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    540e:	2340      	movs	r3, #64	; 0x40
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    5410:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    5412:	4c59      	ldr	r4, [pc, #356]	; (5578 <am_hal_pwrctrl_memory_enable+0x1ec>)
    5414:	6825      	ldr	r5, [r4, #0]
    5416:	402a      	ands	r2, r5
    5418:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    541a:	4a57      	ldr	r2, [pc, #348]	; (5578 <am_hal_pwrctrl_memory_enable+0x1ec>)
    541c:	6814      	ldr	r4, [r2, #0]
    541e:	4320      	orrs	r0, r4
    5420:	6010      	str	r0, [r2, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    5422:	2b00      	cmp	r3, #0
    5424:	d029      	beq.n	547a <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    5426:	4d55      	ldr	r5, [pc, #340]	; (557c <am_hal_pwrctrl_memory_enable+0x1f0>)
    5428:	6828      	ldr	r0, [r5, #0]
        while ( --i32TOcnt              &&
    542a:	4218      	tst	r0, r3
    542c:	bf18      	it	ne
    542e:	20c6      	movne	r0, #198	; 0xc6
    5430:	d01f      	beq.n	5472 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    5432:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    5434:	421a      	tst	r2, r3
    5436:	d01c      	beq.n	5472 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    5438:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    543a:	421c      	tst	r4, r3
    543c:	d019      	beq.n	5472 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    543e:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    5440:	421a      	tst	r2, r3
    5442:	d016      	beq.n	5472 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    5444:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    5446:	421c      	tst	r4, r3
    5448:	d013      	beq.n	5472 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    544a:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    544c:	421a      	tst	r2, r3
    544e:	d010      	beq.n	5472 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    5450:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    5452:	421c      	tst	r4, r3
    5454:	d00d      	beq.n	5472 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    5456:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    5458:	421a      	tst	r2, r3
    545a:	d00a      	beq.n	5472 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    545c:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    545e:	421c      	tst	r4, r3
    5460:	d007      	beq.n	5472 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    5462:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    5464:	421a      	tst	r2, r3
    5466:	d004      	beq.n	5472 <am_hal_pwrctrl_memory_enable+0xe6>
    5468:	3809      	subs	r0, #9
    546a:	d1e2      	bne.n	5432 <am_hal_pwrctrl_memory_enable+0xa6>
        return false;
    546c:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    546e:	bc30      	pop	{r4, r5}
    5470:	4770      	bx	lr
    if ( ui32PwrStatEnMask )
    5472:	b911      	cbnz	r1, 547a <am_hal_pwrctrl_memory_enable+0xee>
    return true;
    5474:	2001      	movs	r0, #1
}
    5476:	bc30      	pop	{r4, r5}
    5478:	4770      	bx	lr
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    547a:	4b40      	ldr	r3, [pc, #256]	; (557c <am_hal_pwrctrl_memory_enable+0x1f0>)
    547c:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    547e:	ea31 0405 	bics.w	r4, r1, r5
    5482:	bf18      	it	ne
    5484:	24c6      	movne	r4, #198	; 0xc6
    5486:	d0f5      	beq.n	5474 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    5488:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    548a:	ea31 0000 	bics.w	r0, r1, r0
    548e:	d0f1      	beq.n	5474 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    5490:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    5492:	ea31 0002 	bics.w	r0, r1, r2
    5496:	d0ed      	beq.n	5474 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    5498:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    549a:	ea31 0005 	bics.w	r0, r1, r5
    549e:	d0e9      	beq.n	5474 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    54a0:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    54a2:	ea31 0000 	bics.w	r0, r1, r0
    54a6:	d0e5      	beq.n	5474 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    54a8:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    54aa:	ea31 0002 	bics.w	r0, r1, r2
    54ae:	d0e1      	beq.n	5474 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    54b0:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    54b2:	ea31 0005 	bics.w	r0, r1, r5
    54b6:	d0dd      	beq.n	5474 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    54b8:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    54ba:	ea31 0000 	bics.w	r0, r1, r0
    54be:	d0d9      	beq.n	5474 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    54c0:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    54c2:	ea31 0002 	bics.w	r0, r1, r2
    54c6:	d0d5      	beq.n	5474 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    54c8:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    54ca:	ea31 0005 	bics.w	r0, r1, r5
    54ce:	d0d1      	beq.n	5474 <am_hal_pwrctrl_memory_enable+0xe8>
    54d0:	3c09      	subs	r4, #9
    54d2:	d1d9      	bne.n	5488 <am_hal_pwrctrl_memory_enable+0xfc>
    54d4:	e7ca      	b.n	546c <am_hal_pwrctrl_memory_enable+0xe0>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    54d6:	2160      	movs	r1, #96	; 0x60
{
    54d8:	2300      	movs	r3, #0
    54da:	e79e      	b.n	541a <am_hal_pwrctrl_memory_enable+0x8e>
    54dc:	4a28      	ldr	r2, [pc, #160]	; (5580 <am_hal_pwrctrl_memory_enable+0x1f4>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    54de:	4b29      	ldr	r3, [pc, #164]	; (5584 <am_hal_pwrctrl_memory_enable+0x1f8>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    54e0:	f44f 7180 	mov.w	r1, #256	; 0x100
    54e4:	e795      	b.n	5412 <am_hal_pwrctrl_memory_enable+0x86>
    54e6:	f46f 62ff 	mvn.w	r2, #2040	; 0x7f8
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    54ea:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    54ee:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    54f2:	e78e      	b.n	5412 <am_hal_pwrctrl_memory_enable+0x86>
    54f4:	4a24      	ldr	r2, [pc, #144]	; (5588 <am_hal_pwrctrl_memory_enable+0x1fc>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    54f6:	4b25      	ldr	r3, [pc, #148]	; (558c <am_hal_pwrctrl_memory_enable+0x200>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    54f8:	f44f 7140 	mov.w	r1, #768	; 0x300
    54fc:	e789      	b.n	5412 <am_hal_pwrctrl_memory_enable+0x86>
    54fe:	f46f 62fe 	mvn.w	r2, #2032	; 0x7f0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    5502:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    5506:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    550a:	e782      	b.n	5412 <am_hal_pwrctrl_memory_enable+0x86>
    550c:	f46f 62e0 	mvn.w	r2, #1792	; 0x700
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    5510:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    5514:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    5518:	e77b      	b.n	5412 <am_hal_pwrctrl_memory_enable+0x86>
    551a:	f46f 62fc 	mvn.w	r2, #2016	; 0x7e0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    551e:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    5522:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    5526:	e774      	b.n	5412 <am_hal_pwrctrl_memory_enable+0x86>
    5528:	f46f 62f8 	mvn.w	r2, #1984	; 0x7c0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    552c:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    5530:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    5534:	e76d      	b.n	5412 <am_hal_pwrctrl_memory_enable+0x86>
    5536:	f46f 62f0 	mvn.w	r2, #1920	; 0x780
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    553a:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    553e:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    5542:	e766      	b.n	5412 <am_hal_pwrctrl_memory_enable+0x86>
    5544:	f46f 62c0 	mvn.w	r2, #1536	; 0x600
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    5548:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    554c:	4910      	ldr	r1, [pc, #64]	; (5590 <am_hal_pwrctrl_memory_enable+0x204>)
    554e:	e760      	b.n	5412 <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    5550:	4910      	ldr	r1, [pc, #64]	; (5594 <am_hal_pwrctrl_memory_enable+0x208>)
    5552:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    5556:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    555a:	e75a      	b.n	5412 <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    555c:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    5560:	e7ba      	b.n	54d8 <am_hal_pwrctrl_memory_enable+0x14c>
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    5562:	4805      	ldr	r0, [pc, #20]	; (5578 <am_hal_pwrctrl_memory_enable+0x1ec>)
    5564:	6803      	ldr	r3, [r0, #0]
    5566:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    556a:	6001      	str	r1, [r0, #0]
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    556c:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
        ui32PwrStatEnMask  = 0;
    5570:	2100      	movs	r1, #0
    5572:	e758      	b.n	5426 <am_hal_pwrctrl_memory_enable+0x9a>
    5574:	0007ff00 	.word	0x0007ff00
    5578:	40021010 	.word	0x40021010
    557c:	40021014 	.word	0x40021014
    5580:	fffff801 	.word	0xfffff801
    5584:	0007fe00 	.word	0x0007fe00
    5588:	fffff803 	.word	0xfffff803
    558c:	0007fc00 	.word	0x0007fc00
    5590:	0001ff00 	.word	0x0001ff00
    5594:	0003ff00 	.word	0x0003ff00

00005598 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    5598:	4b0f      	ldr	r3, [pc, #60]	; (55d8 <am_hal_pwrctrl_bucks_init+0x40>)
    559a:	681a      	ldr	r2, [r3, #0]
    559c:	0792      	lsls	r2, r2, #30
    559e:	d502      	bpl.n	55a6 <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    55a0:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    55a2:	07c3      	lsls	r3, r0, #31
    55a4:	d40e      	bmi.n	55c4 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    55a6:	4b0d      	ldr	r3, [pc, #52]	; (55dc <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    55a8:	4a0b      	ldr	r2, [pc, #44]	; (55d8 <am_hal_pwrctrl_bucks_init+0x40>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    55aa:	6819      	ldr	r1, [r3, #0]
    55ac:	f041 0002 	orr.w	r0, r1, #2
    55b0:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    55b2:	6819      	ldr	r1, [r3, #0]
    55b4:	f041 0001 	orr.w	r0, r1, #1
    55b8:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    55ba:	6813      	ldr	r3, [r2, #0]
    55bc:	f003 0103 	and.w	r1, r3, #3
    55c0:	2903      	cmp	r1, #3
    55c2:	d1fa      	bne.n	55ba <am_hal_pwrctrl_bucks_init+0x22>
    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    55c4:	4a04      	ldr	r2, [pc, #16]	; (55d8 <am_hal_pwrctrl_bucks_init+0x40>)
    55c6:	6810      	ldr	r0, [r2, #0]
    55c8:	f000 0303 	and.w	r3, r0, #3
    55cc:	2b03      	cmp	r3, #3
    55ce:	d1fa      	bne.n	55c6 <am_hal_pwrctrl_bucks_init+0x2e>
    am_hal_flash_delay(200 / 3);
    55d0:	2042      	movs	r0, #66	; 0x42
    55d2:	f7ff be47 	b.w	5264 <am_hal_flash_delay>
    55d6:	bf00      	nop
    55d8:	40021004 	.word	0x40021004
    55dc:	40021000 	.word	0x40021000

000055e0 <am_hal_pwrctrl_bucks_enable>:
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    55e0:	4b0b      	ldr	r3, [pc, #44]	; (5610 <am_hal_pwrctrl_bucks_enable+0x30>)
    55e2:	681a      	ldr	r2, [r3, #0]
    55e4:	0792      	lsls	r2, r2, #30
    55e6:	d502      	bpl.n	55ee <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    55e8:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    55ea:	07c3      	lsls	r3, r0, #31
    55ec:	d40e      	bmi.n	560c <am_hal_pwrctrl_bucks_enable+0x2c>
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    55ee:	4b09      	ldr	r3, [pc, #36]	; (5614 <am_hal_pwrctrl_bucks_enable+0x34>)
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    55f0:	4a07      	ldr	r2, [pc, #28]	; (5610 <am_hal_pwrctrl_bucks_enable+0x30>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    55f2:	6819      	ldr	r1, [r3, #0]
    55f4:	f041 0002 	orr.w	r0, r1, #2
    55f8:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    55fa:	6819      	ldr	r1, [r3, #0]
    55fc:	f041 0001 	orr.w	r0, r1, #1
    5600:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    5602:	6813      	ldr	r3, [r2, #0]
    5604:	f003 0103 	and.w	r1, r3, #3
    5608:	2903      	cmp	r1, #3
    560a:	d1fa      	bne.n	5602 <am_hal_pwrctrl_bucks_enable+0x22>
    560c:	4770      	bx	lr
    560e:	bf00      	nop
    5610:	40021004 	.word	0x40021004
    5614:	40021000 	.word	0x40021000

00005618 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    5618:	4905      	ldr	r1, [pc, #20]	; (5630 <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    561a:	4a06      	ldr	r2, [pc, #24]	; (5634 <am_hal_pwrctrl_low_power_init+0x1c>)
    AM_REG(PWRCTRL, SRAMCTRL) |=
    561c:	680b      	ldr	r3, [r1, #0]
    561e:	f043 0006 	orr.w	r0, r3, #6
    5622:	6008      	str	r0, [r1, #0]
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    5624:	6811      	ldr	r1, [r2, #0]
    5626:	f021 0304 	bic.w	r3, r1, #4
    562a:	6013      	str	r3, [r2, #0]
    562c:	4770      	bx	lr
    562e:	bf00      	nop
    5630:	40021018 	.word	0x40021018
    5634:	40021000 	.word	0x40021000

00005638 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    5638:	4a05      	ldr	r2, [pc, #20]	; (5650 <am_hal_rtc_osc_select+0x18>)
    563a:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    563c:	b918      	cbnz	r0, 5646 <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    563e:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    5642:	6010      	str	r0, [r2, #0]
    5644:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    5646:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    564a:	6011      	str	r1, [r2, #0]
    564c:	4770      	bx	lr
    564e:	bf00      	nop
    5650:	4000400c 	.word	0x4000400c

00005654 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    5654:	4a02      	ldr	r2, [pc, #8]	; (5660 <am_hal_rtc_osc_disable+0xc>)
    5656:	6813      	ldr	r3, [r2, #0]
    5658:	f043 0010 	orr.w	r0, r3, #16
    565c:	6010      	str	r0, [r2, #0]
    565e:	4770      	bx	lr
    5660:	40004050 	.word	0x40004050

00005664 <am_hal_sysctrl_fpu_enable>:
{
    //
    // Enable access to the FPU in both privileged and user modes.
    // NOTE: Write 0s to all reserved fields in this register.
    //
    AM_REG(SYSCTRL, CPACR) = (AM_REG_SYSCTRL_CPACR_CP11(0x3) |
    5664:	4b02      	ldr	r3, [pc, #8]	; (5670 <am_hal_sysctrl_fpu_enable+0xc>)
    5666:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
    566a:	601a      	str	r2, [r3, #0]
    566c:	4770      	bx	lr
    566e:	bf00      	nop
    5670:	e000ed88 	.word	0xe000ed88

00005674 <am_hal_sysctrl_fpu_stacking_enable>:
    {
        //
        // Enable automatic saving of FPU registers on exception entry, using lazy
        // context saving.
        //
        AM_REG(SYSCTRL, FPCCR) |= (AM_REG_SYSCTRL_FPCCR_ASPEN(0x1) |
    5674:	4a05      	ldr	r2, [pc, #20]	; (568c <am_hal_sysctrl_fpu_stacking_enable+0x18>)
    5676:	6813      	ldr	r3, [r2, #0]
    if ( bLazy )
    5678:	b918      	cbnz	r0, 5682 <am_hal_sysctrl_fpu_stacking_enable+0xe>
    else
    {
        //
        // Enable automatic saving of FPU registers on exception entry.
        //
        AM_REG(SYSCTRL, FPCCR) |= AM_REG_SYSCTRL_FPCCR_ASPEN(0x1);
    567a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
    567e:	6010      	str	r0, [r2, #0]
    5680:	4770      	bx	lr
        AM_REG(SYSCTRL, FPCCR) |= (AM_REG_SYSCTRL_FPCCR_ASPEN(0x1) |
    5682:	f043 4140 	orr.w	r1, r3, #3221225472	; 0xc0000000
    5686:	6011      	str	r1, [r2, #0]
    5688:	4770      	bx	lr
    568a:	bf00      	nop
    568c:	e000ef34 	.word	0xe000ef34

00005690 <am_hal_systick_start>:
am_hal_systick_start(void)
{
    //
    // Start the systick timer.
    //
    AM_REG(SYSTICK, SYSTCSR) |= AM_REG_SYSTICK_SYSTCSR_ENABLE_M;
    5690:	4a02      	ldr	r2, [pc, #8]	; (569c <am_hal_systick_start+0xc>)
    5692:	6813      	ldr	r3, [r2, #0]
    5694:	f043 0001 	orr.w	r0, r3, #1
    5698:	6010      	str	r0, [r2, #0]
    569a:	4770      	bx	lr
    569c:	e000e010 	.word	0xe000e010

000056a0 <am_hal_systick_stop>:
am_hal_systick_stop(void)
{
    //
    // Stop the systick timer.
    //
    AM_REG(SYSTICK, SYSTCSR) &= ~AM_REG_SYSTICK_SYSTCSR_ENABLE_M;
    56a0:	4a02      	ldr	r2, [pc, #8]	; (56ac <am_hal_systick_stop+0xc>)
    56a2:	6813      	ldr	r3, [r2, #0]
    56a4:	f023 0001 	bic.w	r0, r3, #1
    56a8:	6010      	str	r0, [r2, #0]
    56aa:	4770      	bx	lr
    56ac:	e000e010 	.word	0xe000e010

000056b0 <am_hal_systick_int_enable>:
am_hal_systick_int_enable(void)
{
    //
    // Enable the systick timer interrupt.
    //
    AM_REG(SYSTICK, SYSTCSR) |= AM_REG_SYSTICK_SYSTCSR_TICKINT_M;
    56b0:	4a02      	ldr	r2, [pc, #8]	; (56bc <am_hal_systick_int_enable+0xc>)
    56b2:	6813      	ldr	r3, [r2, #0]
    56b4:	f043 0002 	orr.w	r0, r3, #2
    56b8:	6010      	str	r0, [r2, #0]
    56ba:	4770      	bx	lr
    56bc:	e000e010 	.word	0xe000e010

000056c0 <am_hal_systick_load>:
am_hal_systick_load(uint32_t ui32LoadVal)
{
    //
    // Write the reload register.
    //
    AM_REG(SYSTICK, SYSTRVR) = ui32LoadVal;
    56c0:	4b01      	ldr	r3, [pc, #4]	; (56c8 <am_hal_systick_load+0x8>)
    56c2:	6018      	str	r0, [r3, #0]
    56c4:	4770      	bx	lr
    56c6:	bf00      	nop
    56c8:	e000e014 	.word	0xe000e014

000056cc <am_hal_systick_count>:
am_hal_systick_count(void)
{
    //
    // Return the current systick timer count value.
    //
    return AM_REG(SYSTICK, SYSTCVR);
    56cc:	4b01      	ldr	r3, [pc, #4]	; (56d4 <am_hal_systick_count+0x8>)
    56ce:	6818      	ldr	r0, [r3, #0]
}
    56d0:	4770      	bx	lr
    56d2:	bf00      	nop
    56d4:	e000e018 	.word	0xe000e018

000056d8 <am_hal_uart_config>:
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    56d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56da:	460d      	mov	r5, r1
    56dc:	4607      	mov	r7, r0
    uint32_t ui32HFRC;

    //
    // Configure the Baudrate.
    //
    ui32HFRC = am_hal_clkgen_sysclk_get();
    56de:	f7ff fd81 	bl	51e4 <am_hal_clkgen_sysclk_get>
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    56e2:	682b      	ldr	r3, [r5, #0]
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    56e4:	0186      	lsls	r6, r0, #6
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    56e6:	0159      	lsls	r1, r3, #5
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    56e8:	fbb0 f4f1 	udiv	r4, r0, r1
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    56ec:	fbb6 f0f1 	udiv	r0, r6, r1
    56f0:	eba0 1684 	sub.w	r6, r0, r4, lsl #6
    am_hal_debug_assert_msg(ui32IntegerDivisor > 0, "Integer divisor MUST be greater than or equal to 1.");
    56f4:	b924      	cbnz	r4, 5700 <am_hal_uart_config+0x28>
    56f6:	4a11      	ldr	r2, [pc, #68]	; (573c <am_hal_uart_config+0x64>)
    56f8:	4811      	ldr	r0, [pc, #68]	; (5740 <am_hal_uart_config+0x68>)
    56fa:	2164      	movs	r1, #100	; 0x64
    56fc:	f7ff fdb0 	bl	5260 <am_hal_debug_error>
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    5700:	f507 2280 	add.w	r2, r7, #262144	; 0x40000
    5704:	321c      	adds	r2, #28
    5706:	0317      	lsls	r7, r2, #12
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    5708:	7a2b      	ldrb	r3, [r5, #8]
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    570a:	627c      	str	r4, [r7, #36]	; 0x24
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    570c:	627c      	str	r4, [r7, #36]	; 0x24
    AM_REGn(UART, ui32Module, FBRD) = ui32FractionDivisor;
    570e:	62be      	str	r6, [r7, #40]	; 0x28
    ui32ConfigVal |= psConfig->ui32DataBits;
    5710:	6868      	ldr	r0, [r5, #4]
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    5712:	68ec      	ldr	r4, [r5, #12]
    5714:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    5716:	2b00      	cmp	r3, #0
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    5718:	ea40 0004 	orr.w	r0, r0, r4
    571c:	ea40 0001 	orr.w	r0, r0, r1
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    5720:	bf14      	ite	ne
    5722:	2108      	movne	r1, #8
    5724:	2100      	moveq	r1, #0
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    5726:	4308      	orrs	r0, r1
    5728:	62f8      	str	r0, [r7, #44]	; 0x2c

    //
    // Write the flow control settings to the control register.
    //
    AM_REGn(UART, ui32Module, CR) |= psConfig->ui32FlowCtrl;
    572a:	6b3e      	ldr	r6, [r7, #48]	; 0x30
    572c:	692d      	ldr	r5, [r5, #16]
    572e:	432e      	orrs	r6, r5
    5730:	633e      	str	r6, [r7, #48]	; 0x30

    //
    // Set the clock select field for 24MHz from the HFRC
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    5732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5734:	f042 0310 	orr.w	r3, r2, #16
    5738:	633b      	str	r3, [r7, #48]	; 0x30
    573a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    573c:	00005ee4 	.word	0x00005ee4
    5740:	00005f18 	.word	0x00005f18

00005744 <am_hal_uart_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_enable(uint32_t ui32Module)
{
    5744:	b510      	push	{r4, lr}
    5746:	4604      	mov	r4, r0
    5748:	b082      	sub	sp, #8
    //
    // Enable the UART, RX, and TX.
    //
    AM_REGan_SET(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    574a:	f7ff fd8f 	bl	526c <am_hal_interrupt_master_disable>
    574e:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
    5752:	331c      	adds	r3, #28
    5754:	0319      	lsls	r1, r3, #12
    5756:	9001      	str	r0, [sp, #4]
    5758:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    575a:	f442 7040 	orr.w	r0, r2, #768	; 0x300
    575e:	f040 0401 	orr.w	r4, r0, #1
    5762:	630c      	str	r4, [r1, #48]	; 0x30
    5764:	9801      	ldr	r0, [sp, #4]
    5766:	f7ff fd85 	bl	5274 <am_hal_interrupt_master_set>
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    576a:	b002      	add	sp, #8
    576c:	bd10      	pop	{r4, pc}
    576e:	bf00      	nop

00005770 <am_hal_uart_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_disable(uint32_t ui32Module)
{
    5770:	b510      	push	{r4, lr}
    5772:	4604      	mov	r4, r0
    5774:	b082      	sub	sp, #8
    //
    // Disable the UART.
    //
    AM_REGan_CLR(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    5776:	f7ff fd79 	bl	526c <am_hal_interrupt_master_disable>
    577a:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
    577e:	331c      	adds	r3, #28
    5780:	0319      	lsls	r1, r3, #12
    5782:	9001      	str	r0, [sp, #4]
    5784:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    5786:	f422 7040 	bic.w	r0, r2, #768	; 0x300
    578a:	f020 0401 	bic.w	r4, r0, #1
    578e:	630c      	str	r4, [r1, #48]	; 0x30
    5790:	9801      	ldr	r0, [sp, #4]
    5792:	f7ff fd6f 	bl	5274 <am_hal_interrupt_master_set>
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    5796:	b002      	add	sp, #8
    5798:	bd10      	pop	{r4, pc}
    579a:	bf00      	nop

0000579c <am_hal_uart_pwrctrl_enable>:
am_hal_uart_pwrctrl_enable(uint32_t ui32Module)
{
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    579c:	2801      	cmp	r0, #1
{
    579e:	b510      	push	{r4, lr}
    57a0:	4604      	mov	r4, r0
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    57a2:	d905      	bls.n	57b0 <am_hal_uart_pwrctrl_enable+0x14>
    57a4:	4a05      	ldr	r2, [pc, #20]	; (57bc <am_hal_uart_pwrctrl_enable+0x20>)
    57a6:	4806      	ldr	r0, [pc, #24]	; (57c0 <am_hal_uart_pwrctrl_enable+0x24>)
    57a8:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    57ac:	f7ff fd58 	bl	5260 <am_hal_debug_error>
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    57b0:	2080      	movs	r0, #128	; 0x80
    57b2:	40a0      	lsls	r0, r4
}
    57b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    57b8:	f7ff bd84 	b.w	52c4 <am_hal_pwrctrl_periph_enable>
    57bc:	00005f2c 	.word	0x00005f2c
    57c0:	00005f18 	.word	0x00005f18

000057c4 <am_hal_uart_pwrctrl_disable>:
am_hal_uart_pwrctrl_disable(uint32_t ui32Module)
{
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    57c4:	2801      	cmp	r0, #1
{
    57c6:	b510      	push	{r4, lr}
    57c8:	4604      	mov	r4, r0
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    57ca:	d905      	bls.n	57d8 <am_hal_uart_pwrctrl_disable+0x14>
    57cc:	4a05      	ldr	r2, [pc, #20]	; (57e4 <am_hal_uart_pwrctrl_disable+0x20>)
    57ce:	4806      	ldr	r0, [pc, #24]	; (57e8 <am_hal_uart_pwrctrl_disable+0x24>)
    57d0:	f240 11bd 	movw	r1, #445	; 0x1bd
    57d4:	f7ff fd44 	bl	5260 <am_hal_debug_error>
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    57d8:	2080      	movs	r0, #128	; 0x80
    57da:	40a0      	lsls	r0, r4
}
    57dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    57e0:	f7ff bdb2 	b.w	5348 <am_hal_pwrctrl_periph_disable>
    57e4:	00005f2c 	.word	0x00005f2c
    57e8:	00005f18 	.word	0x00005f18

000057ec <am_hal_uart_clock_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    57ec:	b510      	push	{r4, lr}
    //
    // Set CLKGEN.UARTEN, clear the field then write the desired enable value
    // Valid enable values are DIS, EN, REDUCE_FREQ, EN_POWER_SAV.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    57ee:	2101      	movs	r1, #1
{
    57f0:	4604      	mov	r4, r0
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    57f2:	f7ff fd11 	bl	5218 <am_hal_clkgen_uarten_set>

    //
    // Enable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKEN_M;
    57f6:	f504 2080 	add.w	r0, r4, #262144	; 0x40000
    57fa:	301c      	adds	r0, #28
    57fc:	0301      	lsls	r1, r0, #12
    57fe:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    5800:	f043 0208 	orr.w	r2, r3, #8
    5804:	630a      	str	r2, [r1, #48]	; 0x30

    //
    // Select default UART clock source
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    5806:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    5808:	f044 0010 	orr.w	r0, r4, #16
    580c:	6308      	str	r0, [r1, #48]	; 0x30
    580e:	bd10      	pop	{r4, pc}

00005810 <am_hal_uart_clock_disable>:
am_hal_uart_clock_disable(uint32_t ui32Module)
{
    //
    // Disable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) &= ~AM_REG_UART_CR_CLKEN_M;
    5810:	f500 2380 	add.w	r3, r0, #262144	; 0x40000
    5814:	331c      	adds	r3, #28
    5816:	031b      	lsls	r3, r3, #12

    //
    // Disable the UART clock in the CLKGEN module.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_DIS);
    5818:	2100      	movs	r1, #0
    AM_REGn(UART, ui32Module, CR) &= ~AM_REG_UART_CR_CLKEN_M;
    581a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    581c:	f022 0208 	bic.w	r2, r2, #8
    5820:	631a      	str	r2, [r3, #48]	; 0x30
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_DIS);
    5822:	f7ff bcf9 	b.w	5218 <am_hal_clkgen_uarten_set>
    5826:	bf00      	nop

00005828 <am_hal_uart_fifo_config>:
am_hal_uart_fifo_config(uint32_t ui32Module, uint32_t ui32LvlCfg)
{
    //
    // Enable the use of FIFOs.
    //
    AM_REGn(UART, ui32Module, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    5828:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    582c:	301c      	adds	r0, #28
    582e:	0302      	lsls	r2, r0, #12
    5830:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    5832:	f043 0010 	orr.w	r0, r3, #16
    5836:	62d0      	str	r0, [r2, #44]	; 0x2c

    //
    // Write the FIFO level register.
    //
    AM_REGn(UART, ui32Module, IFLS) = ui32LvlCfg;
    5838:	6351      	str	r1, [r2, #52]	; 0x34
    583a:	4770      	bx	lr

0000583c <am_hal_uart_string_transmit_polled>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_string_transmit_polled(uint32_t ui32Module, char *pcString)
{
    583c:	b410      	push	{r4}
    while (*pcString)
    583e:	780c      	ldrb	r4, [r1, #0]
    5840:	b16c      	cbz	r4, 585e <am_hal_uart_string_transmit_polled+0x22>
    5842:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    5846:	301c      	adds	r0, #28
    5848:	0300      	lsls	r0, r0, #12
    584a:	f100 0218 	add.w	r2, r0, #24
    {
        //
        // Wait for space, i.e.  TX FIFO EMPTY.
        //
        while (AM_BFRn(UART, ui32Module, FR, TXFF));
    584e:	6813      	ldr	r3, [r2, #0]
    5850:	069b      	lsls	r3, r3, #26
    5852:	d4fc      	bmi.n	584e <am_hal_uart_string_transmit_polled+0x12>

        //
        // Write the char.
        //
        AM_REGn(UART, ui32Module, DR) = *pcString++;
    5854:	6004      	str	r4, [r0, #0]
    while (*pcString)
    5856:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    585a:	2c00      	cmp	r4, #0
    585c:	d1f7      	bne.n	584e <am_hal_uart_string_transmit_polled+0x12>
    }
}
    585e:	f85d 4b04 	ldr.w	r4, [sp], #4
    5862:	4770      	bx	lr

00005864 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    5864:	4b01      	ldr	r3, [pc, #4]	; (586c <am_hal_vcomp_disable+0x8>)
    5866:	2237      	movs	r2, #55	; 0x37
    5868:	601a      	str	r2, [r3, #0]
    586a:	4770      	bx	lr
    586c:	4000c008 	.word	0x4000c008

00005870 <memset>:
    5870:	4402      	add	r2, r0
    5872:	4603      	mov	r3, r0
    5874:	4293      	cmp	r3, r2
    5876:	d100      	bne.n	587a <memset+0xa>
    5878:	4770      	bx	lr
    587a:	f803 1b01 	strb.w	r1, [r3], #1
    587e:	e7f9      	b.n	5874 <memset+0x4>
    5880:	70206b36 	.word	0x70206b36
    5884:	6f667265 	.word	0x6f667265
    5888:	6e616d72 	.word	0x6e616d72
    588c:	72206563 	.word	0x72206563
    5890:	70206e75 	.word	0x70206e75
    5894:	6d617261 	.word	0x6d617261
    5898:	72657465 	.word	0x72657465
    589c:	6f662073 	.word	0x6f662073
    58a0:	6f632072 	.word	0x6f632072
    58a4:	616d6572 	.word	0x616d6572
    58a8:	0a2e6b72 	.word	0x0a2e6b72
    58ac:	00000000 	.word	0x00000000
    58b0:	76206b36 	.word	0x76206b36
    58b4:	64696c61 	.word	0x64696c61
    58b8:	6f697461 	.word	0x6f697461
    58bc:	7572206e 	.word	0x7572206e
    58c0:	6170206e 	.word	0x6170206e
    58c4:	656d6172 	.word	0x656d6172
    58c8:	73726574 	.word	0x73726574
    58cc:	726f6620 	.word	0x726f6620
    58d0:	726f6320 	.word	0x726f6320
    58d4:	72616d65 	.word	0x72616d65
    58d8:	000a2e6b 	.word	0x000a2e6b
    58dc:	666f7250 	.word	0x666f7250
    58e0:	20656c69 	.word	0x20656c69
    58e4:	656e6567 	.word	0x656e6567
    58e8:	69746172 	.word	0x69746172
    58ec:	72206e6f 	.word	0x72206e6f
    58f0:	70206e75 	.word	0x70206e75
    58f4:	6d617261 	.word	0x6d617261
    58f8:	72657465 	.word	0x72657465
    58fc:	6f662073 	.word	0x6f662073
    5900:	6f632072 	.word	0x6f632072
    5904:	616d6572 	.word	0x616d6572
    5908:	0a2e6b72 	.word	0x0a2e6b72
    590c:	00000000 	.word	0x00000000
    5910:	70204b32 	.word	0x70204b32
    5914:	6f667265 	.word	0x6f667265
    5918:	6e616d72 	.word	0x6e616d72
    591c:	72206563 	.word	0x72206563
    5920:	70206e75 	.word	0x70206e75
    5924:	6d617261 	.word	0x6d617261
    5928:	72657465 	.word	0x72657465
    592c:	6f662073 	.word	0x6f662073
    5930:	6f632072 	.word	0x6f632072
    5934:	616d6572 	.word	0x616d6572
    5938:	0a2e6b72 	.word	0x0a2e6b72
    593c:	00000000 	.word	0x00000000
    5940:	76204b32 	.word	0x76204b32
    5944:	64696c61 	.word	0x64696c61
    5948:	6f697461 	.word	0x6f697461
    594c:	7572206e 	.word	0x7572206e
    5950:	6170206e 	.word	0x6170206e
    5954:	656d6172 	.word	0x656d6172
    5958:	73726574 	.word	0x73726574
    595c:	726f6620 	.word	0x726f6620
    5960:	726f6320 	.word	0x726f6320
    5964:	72616d65 	.word	0x72616d65
    5968:	000a2e6b 	.word	0x000a2e6b
    596c:	5d75255b 	.word	0x5d75255b
    5970:	4f525245 	.word	0x4f525245
    5974:	6c202152 	.word	0x6c202152
    5978:	20747369 	.word	0x20747369
    597c:	20637263 	.word	0x20637263
    5980:	30257830 	.word	0x30257830
    5984:	2d207834 	.word	0x2d207834
    5988:	6f687320 	.word	0x6f687320
    598c:	20646c75 	.word	0x20646c75
    5990:	30206562 	.word	0x30206562
    5994:	34302578 	.word	0x34302578
    5998:	00000a78 	.word	0x00000a78
    599c:	5d75255b 	.word	0x5d75255b
    59a0:	4f525245 	.word	0x4f525245
    59a4:	6d202152 	.word	0x6d202152
    59a8:	69727461 	.word	0x69727461
    59ac:	72632078 	.word	0x72632078
    59b0:	78302063 	.word	0x78302063
    59b4:	78343025 	.word	0x78343025
    59b8:	73202d20 	.word	0x73202d20
    59bc:	6c756f68 	.word	0x6c756f68
    59c0:	65622064 	.word	0x65622064
    59c4:	25783020 	.word	0x25783020
    59c8:	0a783430 	.word	0x0a783430
    59cc:	00000000 	.word	0x00000000
    59d0:	5d75255b 	.word	0x5d75255b
    59d4:	4f525245 	.word	0x4f525245
    59d8:	73202152 	.word	0x73202152
    59dc:	65746174 	.word	0x65746174
    59e0:	63726320 	.word	0x63726320
    59e4:	25783020 	.word	0x25783020
    59e8:	20783430 	.word	0x20783430
    59ec:	6873202d 	.word	0x6873202d
    59f0:	646c756f 	.word	0x646c756f
    59f4:	20656220 	.word	0x20656220
    59f8:	30257830 	.word	0x30257830
    59fc:	000a7834 	.word	0x000a7834
    5a00:	65726f43 	.word	0x65726f43
    5a04:	6b72614d 	.word	0x6b72614d
    5a08:	7a695320 	.word	0x7a695320
    5a0c:	20202065 	.word	0x20202065
    5a10:	25203a20 	.word	0x25203a20
    5a14:	000a756c 	.word	0x000a756c
    5a18:	61746f54 	.word	0x61746f54
    5a1c:	6974206c 	.word	0x6974206c
    5a20:	20736b63 	.word	0x20736b63
    5a24:	20202020 	.word	0x20202020
    5a28:	25203a20 	.word	0x25203a20
    5a2c:	000a756c 	.word	0x000a756c
    5a30:	61746f54 	.word	0x61746f54
    5a34:	6974206c 	.word	0x6974206c
    5a38:	2820656d 	.word	0x2820656d
    5a3c:	73636573 	.word	0x73636573
    5a40:	25203a29 	.word	0x25203a29
    5a44:	00000a66 	.word	0x00000a66
    5a48:	72657449 	.word	0x72657449
    5a4c:	6f697461 	.word	0x6f697461
    5a50:	532f736e 	.word	0x532f736e
    5a54:	20206365 	.word	0x20206365
    5a58:	25203a20 	.word	0x25203a20
    5a5c:	00000a66 	.word	0x00000a66
    5a60:	4f525245 	.word	0x4f525245
    5a64:	4d202152 	.word	0x4d202152
    5a68:	20747375 	.word	0x20747375
    5a6c:	63657865 	.word	0x63657865
    5a70:	20657475 	.word	0x20657475
    5a74:	20726f66 	.word	0x20726f66
    5a78:	6c207461 	.word	0x6c207461
    5a7c:	74736165 	.word	0x74736165
    5a80:	20303120 	.word	0x20303120
    5a84:	73636573 	.word	0x73636573
    5a88:	726f6620 	.word	0x726f6620
    5a8c:	76206120 	.word	0x76206120
    5a90:	64696c61 	.word	0x64696c61
    5a94:	73657220 	.word	0x73657220
    5a98:	21746c75 	.word	0x21746c75
    5a9c:	0000000a 	.word	0x0000000a
    5aa0:	72657449 	.word	0x72657449
    5aa4:	6f697461 	.word	0x6f697461
    5aa8:	2020736e 	.word	0x2020736e
    5aac:	20202020 	.word	0x20202020
    5ab0:	25203a20 	.word	0x25203a20
    5ab4:	000a756c 	.word	0x000a756c
    5ab8:	20434347 	.word	0x20434347
    5abc:	2e332e36 	.word	0x2e332e36
    5ac0:	30322031 	.word	0x30322031
    5ac4:	32303731 	.word	0x32303731
    5ac8:	28203531 	.word	0x28203531
    5acc:	656c6572 	.word	0x656c6572
    5ad0:	29657361 	.word	0x29657361
    5ad4:	52415b20 	.word	0x52415b20
    5ad8:	6d652f4d 	.word	0x6d652f4d
    5adc:	64646562 	.word	0x64646562
    5ae0:	362d6465 	.word	0x362d6465
    5ae4:	6172622d 	.word	0x6172622d
    5ae8:	2068636e 	.word	0x2068636e
    5aec:	69766572 	.word	0x69766572
    5af0:	6e6f6973 	.word	0x6e6f6973
    5af4:	35343220 	.word	0x35343220
    5af8:	5d323135 	.word	0x5d323135
    5afc:	00000000 	.word	0x00000000
    5b00:	706d6f43 	.word	0x706d6f43
    5b04:	72656c69 	.word	0x72656c69
    5b08:	72657620 	.word	0x72657620
    5b0c:	6e6f6973 	.word	0x6e6f6973
    5b10:	25203a20 	.word	0x25203a20
    5b14:	00000a73 	.word	0x00000a73
    5b18:	43415453 	.word	0x43415453
    5b1c:	0000004b 	.word	0x0000004b
    5b20:	6f6d654d 	.word	0x6f6d654d
    5b24:	6c207972 	.word	0x6c207972
    5b28:	7461636f 	.word	0x7461636f
    5b2c:	206e6f69 	.word	0x206e6f69
    5b30:	25203a20 	.word	0x25203a20
    5b34:	00000a73 	.word	0x00000a73
    5b38:	64656573 	.word	0x64656573
    5b3c:	20637263 	.word	0x20637263
    5b40:	20202020 	.word	0x20202020
    5b44:	20202020 	.word	0x20202020
    5b48:	30203a20 	.word	0x30203a20
    5b4c:	34302578 	.word	0x34302578
    5b50:	00000a78 	.word	0x00000a78
    5b54:	5d64255b 	.word	0x5d64255b
    5b58:	6c637263 	.word	0x6c637263
    5b5c:	20747369 	.word	0x20747369
    5b60:	20202020 	.word	0x20202020
    5b64:	203a2020 	.word	0x203a2020
    5b68:	30257830 	.word	0x30257830
    5b6c:	000a7834 	.word	0x000a7834
    5b70:	5d64255b 	.word	0x5d64255b
    5b74:	6d637263 	.word	0x6d637263
    5b78:	69727461 	.word	0x69727461
    5b7c:	20202078 	.word	0x20202078
    5b80:	203a2020 	.word	0x203a2020
    5b84:	30257830 	.word	0x30257830
    5b88:	000a7834 	.word	0x000a7834
    5b8c:	5d64255b 	.word	0x5d64255b
    5b90:	73637263 	.word	0x73637263
    5b94:	65746174 	.word	0x65746174
    5b98:	20202020 	.word	0x20202020
    5b9c:	203a2020 	.word	0x203a2020
    5ba0:	30257830 	.word	0x30257830
    5ba4:	000a7834 	.word	0x000a7834
    5ba8:	5d64255b 	.word	0x5d64255b
    5bac:	66637263 	.word	0x66637263
    5bb0:	6c616e69 	.word	0x6c616e69
    5bb4:	20202020 	.word	0x20202020
    5bb8:	203a2020 	.word	0x203a2020
    5bbc:	30257830 	.word	0x30257830
    5bc0:	000a7834 	.word	0x000a7834
    5bc4:	72726f43 	.word	0x72726f43
    5bc8:	20746365 	.word	0x20746365
    5bcc:	7265706f 	.word	0x7265706f
    5bd0:	6f697461 	.word	0x6f697461
    5bd4:	6176206e 	.word	0x6176206e
    5bd8:	6164696c 	.word	0x6164696c
    5bdc:	2e646574 	.word	0x2e646574
    5be0:	65655320 	.word	0x65655320
    5be4:	61657220 	.word	0x61657220
    5be8:	2e656d64 	.word	0x2e656d64
    5bec:	20747874 	.word	0x20747874
    5bf0:	20726f66 	.word	0x20726f66
    5bf4:	206e7572 	.word	0x206e7572
    5bf8:	20646e61 	.word	0x20646e61
    5bfc:	6f706572 	.word	0x6f706572
    5c00:	6e697472 	.word	0x6e697472
    5c04:	75722067 	.word	0x75722067
    5c08:	2e73656c 	.word	0x2e73656c
    5c0c:	0000000a 	.word	0x0000000a
    5c10:	65726f43 	.word	0x65726f43
    5c14:	6b72614d 	.word	0x6b72614d
    5c18:	302e3120 	.word	0x302e3120
    5c1c:	25203a20 	.word	0x25203a20
    5c20:	202f2066 	.word	0x202f2066
    5c24:	25207325 	.word	0x25207325
    5c28:	00000073 	.word	0x00000073
    5c2c:	67616c66 	.word	0x67616c66
    5c30:	2d203a73 	.word	0x2d203a73
    5c34:	0000336f 	.word	0x0000336f
    5c38:	25202f20 	.word	0x25202f20
    5c3c:	00000073 	.word	0x00000073
    5c40:	6f727245 	.word	0x6f727245
    5c44:	64207372 	.word	0x64207372
    5c48:	63657465 	.word	0x63657465
    5c4c:	0a646574 	.word	0x0a646574
    5c50:	00000000 	.word	0x00000000
    5c54:	6e6e6143 	.word	0x6e6e6143
    5c58:	7620746f 	.word	0x7620746f
    5c5c:	64696c61 	.word	0x64696c61
    5c60:	20657461 	.word	0x20657461
    5c64:	7265706f 	.word	0x7265706f
    5c68:	6f697461 	.word	0x6f697461
    5c6c:	6f66206e 	.word	0x6f66206e
    5c70:	68742072 	.word	0x68742072
    5c74:	20657365 	.word	0x20657365
    5c78:	64656573 	.word	0x64656573
    5c7c:	6c617620 	.word	0x6c617620
    5c80:	2c736575 	.word	0x2c736575
    5c84:	656c7020 	.word	0x656c7020
    5c88:	20657361 	.word	0x20657361
    5c8c:	706d6f63 	.word	0x706d6f63
    5c90:	20657261 	.word	0x20657261
    5c94:	68746977 	.word	0x68746977
    5c98:	73657220 	.word	0x73657220
    5c9c:	73746c75 	.word	0x73746c75
    5ca0:	206e6f20 	.word	0x206e6f20
    5ca4:	6e6b2061 	.word	0x6e6b2061
    5ca8:	206e776f 	.word	0x206e776f
    5cac:	74616c70 	.word	0x74616c70
    5cb0:	6d726f66 	.word	0x6d726f66
    5cb4:	00000a2e 	.word	0x00000a2e
    5cb8:	4d2f4d43 	.word	0x4d2f4d43
    5cbc:	253d7a48 	.word	0x253d7a48
    5cc0:	2e66332e 	.word	0x2e66332e
    5cc4:	0000000a 	.word	0x0000000a
    5cc8:	46465542 	.word	0x46465542
    5ccc:	4f205245 	.word	0x4f205245
    5cd0:	46524556 	.word	0x46524556
    5cd4:	45574f4c 	.word	0x45574f4c
    5cd8:	49202144 	.word	0x49202144
    5cdc:	6572636e 	.word	0x6572636e
    5ce0:	20657361 	.word	0x20657361
    5ce4:	42545250 	.word	0x42545250
    5ce8:	49534655 	.word	0x49534655
    5cec:	000a455a 	.word	0x000a455a
    5cf0:	626d410a 	.word	0x626d410a
    5cf4:	4d207169 	.word	0x4d207169
    5cf8:	6f726369 	.word	0x6f726369
    5cfc:	726f4320 	.word	0x726f4320
    5d00:	72616d65 	.word	0x72616d65
    5d04:	7572206b 	.word	0x7572206b
    5d08:	6966206e 	.word	0x6966206e
    5d0c:	6873696e 	.word	0x6873696e
    5d10:	0a216465 	.word	0x0a216465
    5d14:	0000000a 	.word	0x0000000a
    5d18:	69626d41 	.word	0x69626d41
    5d1c:	694d2071 	.word	0x694d2071
    5d20:	206f7263 	.word	0x206f7263
    5d24:	65726f43 	.word	0x65726f43
    5d28:	6b72616d 	.word	0x6b72616d
    5d2c:	73657420 	.word	0x73657420
    5d30:	2e2e2e74 	.word	0x2e2e2e74
    5d34:	00000a0a 	.word	0x00000a0a

00005d38 <errpat>:
    5d38:	00005d78 00005d84 00005d90 00005d9c     x]...]...]...]..

00005d48 <floatpat>:
    5d48:	00005dd8 00005de4 00005df0 00005dfc     .]...]...]...]..

00005d58 <intpat>:
    5d58:	00005e08 00005e10 00005e18 00005e20     .^...^...^.. ^..

00005d68 <scipat>:
    5d68:	00005da8 00005db4 00005dc0 00005dcc     .]...]...]...]..
    5d78:	332e3054 46312d65 00000000 542e542d     T0.3e-1F....-T.T
    5d88:	71542b2b 00000000 2e335431 7a346534     ++Tq....1T3.4e4z
    5d98:	00000000 302e3433 5e542d65 00000000     ....34.0e-T^....
    5da8:	30352e35 332b6530 00000000 32312e2d     5.500e+3....-.12
    5db8:	322d6533 00000000 6537382d 3233382b     3e-2....-87e+832
    5dc8:	00000000 362e302b 32312d65 00000000     ....+0.6e-12....
    5dd8:	352e3533 30303434 00000000 3332312e     35.54400.....123
    5de8:	30303534 00000000 3031312d 3030372e     4500....-110.700
    5df8:	00000000 362e302b 30303434 00000000     ....+0.64400....
    5e08:	32313035 00000000 34333231 00000000     5012....1234....
    5e18:	3437382d 00000000 3232312b 00000000     -874....+122....
    5e28:	0a0a0a0a 0a0a0a0a 0a0a0a0a 0a0a0a0a     ................
    5e38:	00000a0a                                ....

00005e3c <am_hal_cachectrl_defaults>:
    5e3c:	50000001 00010300 00010101 685f6d61     ...P........am_h
    5e4c:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    5e5c:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    5e6c:	63206469 6b636f6c 74657320 676e6974     id clock setting
    5e7c:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    5e8c:	6b6c635f 2e6e6567 00000063 6e6e6143     _clkgen.c...Cann
    5e9c:	6520746f 6c62616e 6f6d2065 74206572     ot enable more t
    5eac:	206e6168 20656e6f 69726570 72656870     han one peripher
    5ebc:	61206c61 20612074 656d6974 0000002e     al at a time....
    5ecc:	2e5c2e2e 6d615c2e 6c61685f 7277705f     ..\..\am_hal_pwr
    5edc:	6c727463 0000632e 65746e49 20726567     ctrl.c..Integer 
    5eec:	69766964 20726f73 5453554d 20656220     divisor MUST be 
    5efc:	61657267 20726574 6e616874 20726f20     greater than or 
    5f0c:	61757165 6f74206c 002e3120 2e5c2e2e     equal to 1....\.
    5f1c:	6d615c2e 6c61685f 7261755f 00632e74     .\am_hal_uart.c.
    5f2c:	69797254 7420676e 6964206f 6c626173     Trying to disabl
    5f3c:	20612065 54524155 646f6d20 20656c75     e a UART module 
    5f4c:	74616874 656f6420 74276e73 69786520     that doesn't exi
    5f5c:	00007473                                st..
