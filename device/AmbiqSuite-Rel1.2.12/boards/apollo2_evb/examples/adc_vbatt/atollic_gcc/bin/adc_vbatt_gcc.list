
adc_vbatt_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f54  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00004000  10000000  10000000  00020000  2**2
                  ALLOC
  2 .data         0000004c  10004000  00002f54  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000130  1000404c  00002fa0  0001404c  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  0001404c  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000d3ff  00000000  00000000  00014083  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002e3a  00000000  00000000  00021482  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000960  00000000  00000000  000242bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 000013c8  00000000  00000000  00024c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005560  00000000  00000000  00025fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000338a  00000000  00000000  0002b544  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  0002e8ce  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001ab8  00000000  00000000  0002e94c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003c3c  00000000  00000000  00030404  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 40 00 10 39 10 00 00 a1 10 00 00 ad 10 00 00     .@..9...........
      10:	ad 10 00 00 ad 10 00 00 ad 10 00 00 00 00 00 00     ................
	...
      2c:	a7 10 00 00 a7 10 00 00 00 00 00 00 a7 10 00 00     ................
      3c:	a7 10 00 00 a7 10 00 00 a7 10 00 00 a7 10 00 00     ................
      4c:	a7 10 00 00 a7 10 00 00 a7 10 00 00 a7 10 00 00     ................
      5c:	a7 10 00 00 a7 10 00 00 a7 10 00 00 a7 10 00 00     ................
      6c:	a7 10 00 00 a7 10 00 00 a7 10 00 00 a7 10 00 00     ................
      7c:	a7 10 00 00 f5 0a 00 00 a7 10 00 00 a7 10 00 00     ................
      8c:	a7 10 00 00 a7 10 00 00 a7 10 00 00 a7 10 00 00     ................
      9c:	a7 10 00 00 a7 10 00 00 a7 10 00 00 a7 10 00 00     ................
      ac:	a7 10 00 00 a7 10 00 00 a7 10 00 00 a7 10 00 00     ................
      bc:	a7 10 00 00                                         ....

000000c0 <__aeabi_drsub>:
      c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
      c4:	e002      	b.n	cc <__adddf3>
      c6:	bf00      	nop

000000c8 <__aeabi_dsub>:
      c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000000cc <__adddf3>:
      cc:	b530      	push	{r4, r5, lr}
      ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
      d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
      d6:	ea94 0f05 	teq	r4, r5
      da:	bf08      	it	eq
      dc:	ea90 0f02 	teqeq	r0, r2
      e0:	bf1f      	itttt	ne
      e2:	ea54 0c00 	orrsne.w	ip, r4, r0
      e6:	ea55 0c02 	orrsne.w	ip, r5, r2
      ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
      ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
      f2:	f000 80e2 	beq.w	2ba <__adddf3+0x1ee>
      f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
      fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
      fe:	bfb8      	it	lt
     100:	426d      	neglt	r5, r5
     102:	dd0c      	ble.n	11e <__adddf3+0x52>
     104:	442c      	add	r4, r5
     106:	ea80 0202 	eor.w	r2, r0, r2
     10a:	ea81 0303 	eor.w	r3, r1, r3
     10e:	ea82 0000 	eor.w	r0, r2, r0
     112:	ea83 0101 	eor.w	r1, r3, r1
     116:	ea80 0202 	eor.w	r2, r0, r2
     11a:	ea81 0303 	eor.w	r3, r1, r3
     11e:	2d36      	cmp	r5, #54	; 0x36
     120:	bf88      	it	hi
     122:	bd30      	pophi	{r4, r5, pc}
     124:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     128:	ea4f 3101 	mov.w	r1, r1, lsl #12
     12c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     130:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     134:	d002      	beq.n	13c <__adddf3+0x70>
     136:	4240      	negs	r0, r0
     138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     13c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     140:	ea4f 3303 	mov.w	r3, r3, lsl #12
     144:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     148:	d002      	beq.n	150 <__adddf3+0x84>
     14a:	4252      	negs	r2, r2
     14c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     150:	ea94 0f05 	teq	r4, r5
     154:	f000 80a7 	beq.w	2a6 <__adddf3+0x1da>
     158:	f1a4 0401 	sub.w	r4, r4, #1
     15c:	f1d5 0e20 	rsbs	lr, r5, #32
     160:	db0d      	blt.n	17e <__adddf3+0xb2>
     162:	fa02 fc0e 	lsl.w	ip, r2, lr
     166:	fa22 f205 	lsr.w	r2, r2, r5
     16a:	1880      	adds	r0, r0, r2
     16c:	f141 0100 	adc.w	r1, r1, #0
     170:	fa03 f20e 	lsl.w	r2, r3, lr
     174:	1880      	adds	r0, r0, r2
     176:	fa43 f305 	asr.w	r3, r3, r5
     17a:	4159      	adcs	r1, r3
     17c:	e00e      	b.n	19c <__adddf3+0xd0>
     17e:	f1a5 0520 	sub.w	r5, r5, #32
     182:	f10e 0e20 	add.w	lr, lr, #32
     186:	2a01      	cmp	r2, #1
     188:	fa03 fc0e 	lsl.w	ip, r3, lr
     18c:	bf28      	it	cs
     18e:	f04c 0c02 	orrcs.w	ip, ip, #2
     192:	fa43 f305 	asr.w	r3, r3, r5
     196:	18c0      	adds	r0, r0, r3
     198:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     19c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1a0:	d507      	bpl.n	1b2 <__adddf3+0xe6>
     1a2:	f04f 0e00 	mov.w	lr, #0
     1a6:	f1dc 0c00 	rsbs	ip, ip, #0
     1aa:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ae:	eb6e 0101 	sbc.w	r1, lr, r1
     1b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1b6:	d31b      	bcc.n	1f0 <__adddf3+0x124>
     1b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1bc:	d30c      	bcc.n	1d8 <__adddf3+0x10c>
     1be:	0849      	lsrs	r1, r1, #1
     1c0:	ea5f 0030 	movs.w	r0, r0, rrx
     1c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     1c8:	f104 0401 	add.w	r4, r4, #1
     1cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
     1d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     1d4:	f080 809a 	bcs.w	30c <__adddf3+0x240>
     1d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     1dc:	bf08      	it	eq
     1de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     1e2:	f150 0000 	adcs.w	r0, r0, #0
     1e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     1ea:	ea41 0105 	orr.w	r1, r1, r5
     1ee:	bd30      	pop	{r4, r5, pc}
     1f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     1f4:	4140      	adcs	r0, r0
     1f6:	eb41 0101 	adc.w	r1, r1, r1
     1fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     1fe:	f1a4 0401 	sub.w	r4, r4, #1
     202:	d1e9      	bne.n	1d8 <__adddf3+0x10c>
     204:	f091 0f00 	teq	r1, #0
     208:	bf04      	itt	eq
     20a:	4601      	moveq	r1, r0
     20c:	2000      	moveq	r0, #0
     20e:	fab1 f381 	clz	r3, r1
     212:	bf08      	it	eq
     214:	3320      	addeq	r3, #32
     216:	f1a3 030b 	sub.w	r3, r3, #11
     21a:	f1b3 0220 	subs.w	r2, r3, #32
     21e:	da0c      	bge.n	23a <__adddf3+0x16e>
     220:	320c      	adds	r2, #12
     222:	dd08      	ble.n	236 <__adddf3+0x16a>
     224:	f102 0c14 	add.w	ip, r2, #20
     228:	f1c2 020c 	rsb	r2, r2, #12
     22c:	fa01 f00c 	lsl.w	r0, r1, ip
     230:	fa21 f102 	lsr.w	r1, r1, r2
     234:	e00c      	b.n	250 <__adddf3+0x184>
     236:	f102 0214 	add.w	r2, r2, #20
     23a:	bfd8      	it	le
     23c:	f1c2 0c20 	rsble	ip, r2, #32
     240:	fa01 f102 	lsl.w	r1, r1, r2
     244:	fa20 fc0c 	lsr.w	ip, r0, ip
     248:	bfdc      	itt	le
     24a:	ea41 010c 	orrle.w	r1, r1, ip
     24e:	4090      	lslle	r0, r2
     250:	1ae4      	subs	r4, r4, r3
     252:	bfa2      	ittt	ge
     254:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     258:	4329      	orrge	r1, r5
     25a:	bd30      	popge	{r4, r5, pc}
     25c:	ea6f 0404 	mvn.w	r4, r4
     260:	3c1f      	subs	r4, #31
     262:	da1c      	bge.n	29e <__adddf3+0x1d2>
     264:	340c      	adds	r4, #12
     266:	dc0e      	bgt.n	286 <__adddf3+0x1ba>
     268:	f104 0414 	add.w	r4, r4, #20
     26c:	f1c4 0220 	rsb	r2, r4, #32
     270:	fa20 f004 	lsr.w	r0, r0, r4
     274:	fa01 f302 	lsl.w	r3, r1, r2
     278:	ea40 0003 	orr.w	r0, r0, r3
     27c:	fa21 f304 	lsr.w	r3, r1, r4
     280:	ea45 0103 	orr.w	r1, r5, r3
     284:	bd30      	pop	{r4, r5, pc}
     286:	f1c4 040c 	rsb	r4, r4, #12
     28a:	f1c4 0220 	rsb	r2, r4, #32
     28e:	fa20 f002 	lsr.w	r0, r0, r2
     292:	fa01 f304 	lsl.w	r3, r1, r4
     296:	ea40 0003 	orr.w	r0, r0, r3
     29a:	4629      	mov	r1, r5
     29c:	bd30      	pop	{r4, r5, pc}
     29e:	fa21 f004 	lsr.w	r0, r1, r4
     2a2:	4629      	mov	r1, r5
     2a4:	bd30      	pop	{r4, r5, pc}
     2a6:	f094 0f00 	teq	r4, #0
     2aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ae:	bf06      	itte	eq
     2b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2b4:	3401      	addeq	r4, #1
     2b6:	3d01      	subne	r5, #1
     2b8:	e74e      	b.n	158 <__adddf3+0x8c>
     2ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2be:	bf18      	it	ne
     2c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     2c4:	d029      	beq.n	31a <__adddf3+0x24e>
     2c6:	ea94 0f05 	teq	r4, r5
     2ca:	bf08      	it	eq
     2cc:	ea90 0f02 	teqeq	r0, r2
     2d0:	d005      	beq.n	2de <__adddf3+0x212>
     2d2:	ea54 0c00 	orrs.w	ip, r4, r0
     2d6:	bf04      	itt	eq
     2d8:	4619      	moveq	r1, r3
     2da:	4610      	moveq	r0, r2
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	ea91 0f03 	teq	r1, r3
     2e2:	bf1e      	ittt	ne
     2e4:	2100      	movne	r1, #0
     2e6:	2000      	movne	r0, #0
     2e8:	bd30      	popne	{r4, r5, pc}
     2ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     2ee:	d105      	bne.n	2fc <__adddf3+0x230>
     2f0:	0040      	lsls	r0, r0, #1
     2f2:	4149      	adcs	r1, r1
     2f4:	bf28      	it	cs
     2f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     2fa:	bd30      	pop	{r4, r5, pc}
     2fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     300:	bf3c      	itt	cc
     302:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     306:	bd30      	popcc	{r4, r5, pc}
     308:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     30c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     310:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     314:	f04f 0000 	mov.w	r0, #0
     318:	bd30      	pop	{r4, r5, pc}
     31a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     31e:	bf1a      	itte	ne
     320:	4619      	movne	r1, r3
     322:	4610      	movne	r0, r2
     324:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     328:	bf1c      	itt	ne
     32a:	460b      	movne	r3, r1
     32c:	4602      	movne	r2, r0
     32e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     332:	bf06      	itte	eq
     334:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     338:	ea91 0f03 	teqeq	r1, r3
     33c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     340:	bd30      	pop	{r4, r5, pc}
     342:	bf00      	nop

00000344 <__aeabi_ui2d>:
     344:	f090 0f00 	teq	r0, #0
     348:	bf04      	itt	eq
     34a:	2100      	moveq	r1, #0
     34c:	4770      	bxeq	lr
     34e:	b530      	push	{r4, r5, lr}
     350:	f44f 6480 	mov.w	r4, #1024	; 0x400
     354:	f104 0432 	add.w	r4, r4, #50	; 0x32
     358:	f04f 0500 	mov.w	r5, #0
     35c:	f04f 0100 	mov.w	r1, #0
     360:	e750      	b.n	204 <__adddf3+0x138>
     362:	bf00      	nop

00000364 <__aeabi_i2d>:
     364:	f090 0f00 	teq	r0, #0
     368:	bf04      	itt	eq
     36a:	2100      	moveq	r1, #0
     36c:	4770      	bxeq	lr
     36e:	b530      	push	{r4, r5, lr}
     370:	f44f 6480 	mov.w	r4, #1024	; 0x400
     374:	f104 0432 	add.w	r4, r4, #50	; 0x32
     378:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     37c:	bf48      	it	mi
     37e:	4240      	negmi	r0, r0
     380:	f04f 0100 	mov.w	r1, #0
     384:	e73e      	b.n	204 <__adddf3+0x138>
     386:	bf00      	nop

00000388 <__aeabi_f2d>:
     388:	0042      	lsls	r2, r0, #1
     38a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     38e:	ea4f 0131 	mov.w	r1, r1, rrx
     392:	ea4f 7002 	mov.w	r0, r2, lsl #28
     396:	bf1f      	itttt	ne
     398:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     39c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3a4:	4770      	bxne	lr
     3a6:	f092 0f00 	teq	r2, #0
     3aa:	bf14      	ite	ne
     3ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3b0:	4770      	bxeq	lr
     3b2:	b530      	push	{r4, r5, lr}
     3b4:	f44f 7460 	mov.w	r4, #896	; 0x380
     3b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     3c0:	e720      	b.n	204 <__adddf3+0x138>
     3c2:	bf00      	nop

000003c4 <__aeabi_ul2d>:
     3c4:	ea50 0201 	orrs.w	r2, r0, r1
     3c8:	bf08      	it	eq
     3ca:	4770      	bxeq	lr
     3cc:	b530      	push	{r4, r5, lr}
     3ce:	f04f 0500 	mov.w	r5, #0
     3d2:	e00a      	b.n	3ea <__aeabi_l2d+0x16>

000003d4 <__aeabi_l2d>:
     3d4:	ea50 0201 	orrs.w	r2, r0, r1
     3d8:	bf08      	it	eq
     3da:	4770      	bxeq	lr
     3dc:	b530      	push	{r4, r5, lr}
     3de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     3e2:	d502      	bpl.n	3ea <__aeabi_l2d+0x16>
     3e4:	4240      	negs	r0, r0
     3e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     3ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     3f6:	f43f aedc 	beq.w	1b2 <__adddf3+0xe6>
     3fa:	f04f 0203 	mov.w	r2, #3
     3fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     402:	bf18      	it	ne
     404:	3203      	addne	r2, #3
     406:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     40a:	bf18      	it	ne
     40c:	3203      	addne	r2, #3
     40e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     412:	f1c2 0320 	rsb	r3, r2, #32
     416:	fa00 fc03 	lsl.w	ip, r0, r3
     41a:	fa20 f002 	lsr.w	r0, r0, r2
     41e:	fa01 fe03 	lsl.w	lr, r1, r3
     422:	ea40 000e 	orr.w	r0, r0, lr
     426:	fa21 f102 	lsr.w	r1, r1, r2
     42a:	4414      	add	r4, r2
     42c:	e6c1      	b.n	1b2 <__adddf3+0xe6>
     42e:	bf00      	nop

00000430 <__aeabi_d2f>:
     430:	ea4f 0241 	mov.w	r2, r1, lsl #1
     434:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     438:	bf24      	itt	cs
     43a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     43e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     442:	d90d      	bls.n	460 <__aeabi_d2f+0x30>
     444:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     448:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     44c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     450:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     454:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     458:	bf08      	it	eq
     45a:	f020 0001 	biceq.w	r0, r0, #1
     45e:	4770      	bx	lr
     460:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     464:	d121      	bne.n	4aa <__aeabi_d2f+0x7a>
     466:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     46a:	bfbc      	itt	lt
     46c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     470:	4770      	bxlt	lr
     472:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     476:	ea4f 5252 	mov.w	r2, r2, lsr #21
     47a:	f1c2 0218 	rsb	r2, r2, #24
     47e:	f1c2 0c20 	rsb	ip, r2, #32
     482:	fa10 f30c 	lsls.w	r3, r0, ip
     486:	fa20 f002 	lsr.w	r0, r0, r2
     48a:	bf18      	it	ne
     48c:	f040 0001 	orrne.w	r0, r0, #1
     490:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     494:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     498:	fa03 fc0c 	lsl.w	ip, r3, ip
     49c:	ea40 000c 	orr.w	r0, r0, ip
     4a0:	fa23 f302 	lsr.w	r3, r3, r2
     4a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
     4a8:	e7cc      	b.n	444 <__aeabi_d2f+0x14>
     4aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
     4ae:	d107      	bne.n	4c0 <__aeabi_d2f+0x90>
     4b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     4b4:	bf1e      	ittt	ne
     4b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     4ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     4be:	4770      	bxne	lr
     4c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     4c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     4c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     4cc:	4770      	bx	lr
     4ce:	bf00      	nop

000004d0 <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
     4d0:	b590      	push	{r4, r7, lr}
     4d2:	b085      	sub	sp, #20
     4d4:	af00      	add	r7, sp, #0
     4d6:	6078      	str	r0, [r7, #4]
    if ( (psLED == NULL)    ||
     4d8:	687b      	ldr	r3, [r7, #4]
     4da:	2b00      	cmp	r3, #0
     4dc:	f000 8162 	beq.w	7a4 <am_devices_led_init+0x2d4>
         (psLED->ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
     4e0:	687b      	ldr	r3, [r7, #4]
     4e2:	681b      	ldr	r3, [r3, #0]
    if ( (psLED == NULL)    ||
     4e4:	2b31      	cmp	r3, #49	; 0x31
     4e6:	f200 815d 	bhi.w	7a4 <am_devices_led_init+0x2d4>
    }
#else
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
     4ea:	687b      	ldr	r3, [r7, #4]
     4ec:	685b      	ldr	r3, [r3, #4]
     4ee:	f003 0302 	and.w	r3, r3, #2
     4f2:	2b00      	cmp	r3, #0
     4f4:	f000 80ab 	beq.w	64e <am_devices_led_init+0x17e>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT);
     4f8:	687b      	ldr	r3, [r7, #4]
     4fa:	681b      	ldr	r3, [r3, #0]
     4fc:	2b31      	cmp	r3, #49	; 0x31
     4fe:	d86e      	bhi.n	5de <am_devices_led_init+0x10e>
     500:	f002 f850 	bl	25a4 <am_hal_interrupt_master_disable>
     504:	4603      	mov	r3, r0
     506:	60fb      	str	r3, [r7, #12]
     508:	4ba8      	ldr	r3, [pc, #672]	; (7ac <am_devices_led_init+0x2dc>)
     50a:	2273      	movs	r2, #115	; 0x73
     50c:	601a      	str	r2, [r3, #0]
     50e:	687b      	ldr	r3, [r7, #4]
     510:	681b      	ldr	r3, [r3, #0]
     512:	085b      	lsrs	r3, r3, #1
     514:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     518:	4ba5      	ldr	r3, [pc, #660]	; (7b0 <am_devices_led_init+0x2e0>)
     51a:	4413      	add	r3, r2
     51c:	461c      	mov	r4, r3
     51e:	687b      	ldr	r3, [r7, #4]
     520:	681b      	ldr	r3, [r3, #0]
     522:	009b      	lsls	r3, r3, #2
     524:	f003 031c 	and.w	r3, r3, #28
     528:	2202      	movs	r2, #2
     52a:	409a      	lsls	r2, r3
     52c:	687b      	ldr	r3, [r7, #4]
     52e:	681b      	ldr	r3, [r3, #0]
     530:	085b      	lsrs	r3, r3, #1
     532:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     536:	4b9e      	ldr	r3, [pc, #632]	; (7b0 <am_devices_led_init+0x2e0>)
     538:	440b      	add	r3, r1
     53a:	6819      	ldr	r1, [r3, #0]
     53c:	687b      	ldr	r3, [r7, #4]
     53e:	681b      	ldr	r3, [r3, #0]
     540:	009b      	lsls	r3, r3, #2
     542:	f003 031c 	and.w	r3, r3, #28
     546:	2007      	movs	r0, #7
     548:	fa00 f303 	lsl.w	r3, r0, r3
     54c:	43db      	mvns	r3, r3
     54e:	400b      	ands	r3, r1
     550:	4313      	orrs	r3, r2
     552:	6023      	str	r3, [r4, #0]
     554:	687b      	ldr	r3, [r7, #4]
     556:	681b      	ldr	r3, [r3, #0]
     558:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     55c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     560:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     564:	461c      	mov	r4, r3
     566:	687b      	ldr	r3, [r7, #4]
     568:	681b      	ldr	r3, [r3, #0]
     56a:	00db      	lsls	r3, r3, #3
     56c:	f003 0318 	and.w	r3, r3, #24
     570:	2218      	movs	r2, #24
     572:	409a      	lsls	r2, r3
     574:	687b      	ldr	r3, [r7, #4]
     576:	681b      	ldr	r3, [r3, #0]
     578:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     57c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     580:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     584:	6819      	ldr	r1, [r3, #0]
     586:	687b      	ldr	r3, [r7, #4]
     588:	681b      	ldr	r3, [r3, #0]
     58a:	00db      	lsls	r3, r3, #3
     58c:	f003 0318 	and.w	r3, r3, #24
     590:	20ff      	movs	r0, #255	; 0xff
     592:	fa00 f303 	lsl.w	r3, r0, r3
     596:	43db      	mvns	r3, r3
     598:	400b      	ands	r3, r1
     59a:	4313      	orrs	r3, r2
     59c:	6023      	str	r3, [r4, #0]
     59e:	687b      	ldr	r3, [r7, #4]
     5a0:	681b      	ldr	r3, [r3, #0]
     5a2:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     5a6:	4b83      	ldr	r3, [pc, #524]	; (7b4 <am_devices_led_init+0x2e4>)
     5a8:	4413      	add	r3, r2
     5aa:	4618      	mov	r0, r3
     5ac:	687b      	ldr	r3, [r7, #4]
     5ae:	681b      	ldr	r3, [r3, #0]
     5b0:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     5b4:	4b7f      	ldr	r3, [pc, #508]	; (7b4 <am_devices_led_init+0x2e4>)
     5b6:	4413      	add	r3, r2
     5b8:	681a      	ldr	r2, [r3, #0]
     5ba:	687b      	ldr	r3, [r7, #4]
     5bc:	681b      	ldr	r3, [r3, #0]
     5be:	00db      	lsls	r3, r3, #3
     5c0:	f003 0318 	and.w	r3, r3, #24
     5c4:	21ff      	movs	r1, #255	; 0xff
     5c6:	fa01 f303 	lsl.w	r3, r1, r3
     5ca:	43db      	mvns	r3, r3
     5cc:	4013      	ands	r3, r2
     5ce:	6003      	str	r3, [r0, #0]
     5d0:	4b76      	ldr	r3, [pc, #472]	; (7ac <am_devices_led_init+0x2dc>)
     5d2:	2200      	movs	r2, #0
     5d4:	601a      	str	r2, [r3, #0]
     5d6:	68fb      	ldr	r3, [r7, #12]
     5d8:	4618      	mov	r0, r3
     5da:	f001 ffe7 	bl	25ac <am_hal_interrupt_master_set>

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     5de:	687b      	ldr	r3, [r7, #4]
     5e0:	681b      	ldr	r3, [r3, #0]
     5e2:	08db      	lsrs	r3, r3, #3
     5e4:	f003 0204 	and.w	r2, r3, #4
     5e8:	4b73      	ldr	r3, [pc, #460]	; (7b8 <am_devices_led_init+0x2e8>)
     5ea:	4413      	add	r3, r2
     5ec:	4619      	mov	r1, r3
     5ee:	687b      	ldr	r3, [r7, #4]
     5f0:	681b      	ldr	r3, [r3, #0]
     5f2:	f003 031f 	and.w	r3, r3, #31
     5f6:	2201      	movs	r2, #1
     5f8:	fa02 f303 	lsl.w	r3, r2, r3
     5fc:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     5fe:	687b      	ldr	r3, [r7, #4]
     600:	685b      	ldr	r3, [r3, #4]
     602:	f003 0301 	and.w	r3, r3, #1
     606:	2b00      	cmp	r3, #0
     608:	d010      	beq.n	62c <am_devices_led_init+0x15c>
     60a:	687b      	ldr	r3, [r7, #4]
     60c:	681b      	ldr	r3, [r3, #0]
     60e:	08db      	lsrs	r3, r3, #3
     610:	f003 0204 	and.w	r2, r3, #4
     614:	4b69      	ldr	r3, [pc, #420]	; (7bc <am_devices_led_init+0x2ec>)
     616:	4413      	add	r3, r2
     618:	4619      	mov	r1, r3
     61a:	687b      	ldr	r3, [r7, #4]
     61c:	681b      	ldr	r3, [r3, #0]
     61e:	f003 031f 	and.w	r3, r3, #31
     622:	2201      	movs	r2, #1
     624:	fa02 f303 	lsl.w	r3, r2, r3
     628:	600b      	str	r3, [r1, #0]
     62a:	e0bc      	b.n	7a6 <am_devices_led_init+0x2d6>
     62c:	687b      	ldr	r3, [r7, #4]
     62e:	681b      	ldr	r3, [r3, #0]
     630:	08db      	lsrs	r3, r3, #3
     632:	f003 0204 	and.w	r2, r3, #4
     636:	4b62      	ldr	r3, [pc, #392]	; (7c0 <am_devices_led_init+0x2f0>)
     638:	4413      	add	r3, r2
     63a:	4619      	mov	r1, r3
     63c:	687b      	ldr	r3, [r7, #4]
     63e:	681b      	ldr	r3, [r3, #0]
     640:	f003 031f 	and.w	r3, r3, #31
     644:	2201      	movs	r2, #1
     646:	fa02 f303 	lsl.w	r3, r2, r3
     64a:	600b      	str	r3, [r1, #0]
     64c:	e0ab      	b.n	7a6 <am_devices_led_init+0x2d6>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     64e:	687b      	ldr	r3, [r7, #4]
     650:	681b      	ldr	r3, [r3, #0]
     652:	2b31      	cmp	r3, #49	; 0x31
     654:	d86e      	bhi.n	734 <am_devices_led_init+0x264>
     656:	f001 ffa5 	bl	25a4 <am_hal_interrupt_master_disable>
     65a:	4603      	mov	r3, r0
     65c:	60bb      	str	r3, [r7, #8]
     65e:	4b53      	ldr	r3, [pc, #332]	; (7ac <am_devices_led_init+0x2dc>)
     660:	2273      	movs	r2, #115	; 0x73
     662:	601a      	str	r2, [r3, #0]
     664:	687b      	ldr	r3, [r7, #4]
     666:	681b      	ldr	r3, [r3, #0]
     668:	085b      	lsrs	r3, r3, #1
     66a:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     66e:	4b50      	ldr	r3, [pc, #320]	; (7b0 <am_devices_led_init+0x2e0>)
     670:	4413      	add	r3, r2
     672:	461c      	mov	r4, r3
     674:	687b      	ldr	r3, [r7, #4]
     676:	681b      	ldr	r3, [r3, #0]
     678:	009b      	lsls	r3, r3, #2
     67a:	f003 031c 	and.w	r3, r3, #28
     67e:	2206      	movs	r2, #6
     680:	409a      	lsls	r2, r3
     682:	687b      	ldr	r3, [r7, #4]
     684:	681b      	ldr	r3, [r3, #0]
     686:	085b      	lsrs	r3, r3, #1
     688:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     68c:	4b48      	ldr	r3, [pc, #288]	; (7b0 <am_devices_led_init+0x2e0>)
     68e:	440b      	add	r3, r1
     690:	6819      	ldr	r1, [r3, #0]
     692:	687b      	ldr	r3, [r7, #4]
     694:	681b      	ldr	r3, [r3, #0]
     696:	009b      	lsls	r3, r3, #2
     698:	f003 031c 	and.w	r3, r3, #28
     69c:	2007      	movs	r0, #7
     69e:	fa00 f303 	lsl.w	r3, r0, r3
     6a2:	43db      	mvns	r3, r3
     6a4:	400b      	ands	r3, r1
     6a6:	4313      	orrs	r3, r2
     6a8:	6023      	str	r3, [r4, #0]
     6aa:	687b      	ldr	r3, [r7, #4]
     6ac:	681b      	ldr	r3, [r3, #0]
     6ae:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     6b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     6b6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     6ba:	461c      	mov	r4, r3
     6bc:	687b      	ldr	r3, [r7, #4]
     6be:	681b      	ldr	r3, [r3, #0]
     6c0:	00db      	lsls	r3, r3, #3
     6c2:	f003 0318 	and.w	r3, r3, #24
     6c6:	2218      	movs	r2, #24
     6c8:	409a      	lsls	r2, r3
     6ca:	687b      	ldr	r3, [r7, #4]
     6cc:	681b      	ldr	r3, [r3, #0]
     6ce:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     6d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     6d6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     6da:	6819      	ldr	r1, [r3, #0]
     6dc:	687b      	ldr	r3, [r7, #4]
     6de:	681b      	ldr	r3, [r3, #0]
     6e0:	00db      	lsls	r3, r3, #3
     6e2:	f003 0318 	and.w	r3, r3, #24
     6e6:	20ff      	movs	r0, #255	; 0xff
     6e8:	fa00 f303 	lsl.w	r3, r0, r3
     6ec:	43db      	mvns	r3, r3
     6ee:	400b      	ands	r3, r1
     6f0:	4313      	orrs	r3, r2
     6f2:	6023      	str	r3, [r4, #0]
     6f4:	687b      	ldr	r3, [r7, #4]
     6f6:	681b      	ldr	r3, [r3, #0]
     6f8:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     6fc:	4b2d      	ldr	r3, [pc, #180]	; (7b4 <am_devices_led_init+0x2e4>)
     6fe:	4413      	add	r3, r2
     700:	4618      	mov	r0, r3
     702:	687b      	ldr	r3, [r7, #4]
     704:	681b      	ldr	r3, [r3, #0]
     706:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     70a:	4b2a      	ldr	r3, [pc, #168]	; (7b4 <am_devices_led_init+0x2e4>)
     70c:	4413      	add	r3, r2
     70e:	681a      	ldr	r2, [r3, #0]
     710:	687b      	ldr	r3, [r7, #4]
     712:	681b      	ldr	r3, [r3, #0]
     714:	00db      	lsls	r3, r3, #3
     716:	f003 0318 	and.w	r3, r3, #24
     71a:	21ff      	movs	r1, #255	; 0xff
     71c:	fa01 f303 	lsl.w	r3, r1, r3
     720:	43db      	mvns	r3, r3
     722:	4013      	ands	r3, r2
     724:	6003      	str	r3, [r0, #0]
     726:	4b21      	ldr	r3, [pc, #132]	; (7ac <am_devices_led_init+0x2dc>)
     728:	2200      	movs	r2, #0
     72a:	601a      	str	r2, [r3, #0]
     72c:	68bb      	ldr	r3, [r7, #8]
     72e:	4618      	mov	r0, r3
     730:	f001 ff3c 	bl	25ac <am_hal_interrupt_master_set>

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     734:	687b      	ldr	r3, [r7, #4]
     736:	681b      	ldr	r3, [r3, #0]
     738:	08db      	lsrs	r3, r3, #3
     73a:	f003 0204 	and.w	r2, r3, #4
     73e:	4b1e      	ldr	r3, [pc, #120]	; (7b8 <am_devices_led_init+0x2e8>)
     740:	4413      	add	r3, r2
     742:	4619      	mov	r1, r3
     744:	687b      	ldr	r3, [r7, #4]
     746:	681b      	ldr	r3, [r3, #0]
     748:	f003 031f 	and.w	r3, r3, #31
     74c:	2201      	movs	r2, #1
     74e:	fa02 f303 	lsl.w	r3, r2, r3
     752:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     754:	687b      	ldr	r3, [r7, #4]
     756:	685b      	ldr	r3, [r3, #4]
     758:	f003 0301 	and.w	r3, r3, #1
     75c:	2b00      	cmp	r3, #0
     75e:	d010      	beq.n	782 <am_devices_led_init+0x2b2>
     760:	687b      	ldr	r3, [r7, #4]
     762:	681b      	ldr	r3, [r3, #0]
     764:	08db      	lsrs	r3, r3, #3
     766:	f003 0204 	and.w	r2, r3, #4
     76a:	4b14      	ldr	r3, [pc, #80]	; (7bc <am_devices_led_init+0x2ec>)
     76c:	4413      	add	r3, r2
     76e:	4619      	mov	r1, r3
     770:	687b      	ldr	r3, [r7, #4]
     772:	681b      	ldr	r3, [r3, #0]
     774:	f003 031f 	and.w	r3, r3, #31
     778:	2201      	movs	r2, #1
     77a:	fa02 f303 	lsl.w	r3, r2, r3
     77e:	600b      	str	r3, [r1, #0]
     780:	e011      	b.n	7a6 <am_devices_led_init+0x2d6>
     782:	687b      	ldr	r3, [r7, #4]
     784:	681b      	ldr	r3, [r3, #0]
     786:	08db      	lsrs	r3, r3, #3
     788:	f003 0204 	and.w	r2, r3, #4
     78c:	4b0c      	ldr	r3, [pc, #48]	; (7c0 <am_devices_led_init+0x2f0>)
     78e:	4413      	add	r3, r2
     790:	4619      	mov	r1, r3
     792:	687b      	ldr	r3, [r7, #4]
     794:	681b      	ldr	r3, [r3, #0]
     796:	f003 031f 	and.w	r3, r3, #31
     79a:	2201      	movs	r2, #1
     79c:	fa02 f303 	lsl.w	r3, r2, r3
     7a0:	600b      	str	r3, [r1, #0]
     7a2:	e000      	b.n	7a6 <am_devices_led_init+0x2d6>
        return;
     7a4:	bf00      	nop
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
#endif
}
     7a6:	3714      	adds	r7, #20
     7a8:	46bd      	mov	sp, r7
     7aa:	bd90      	pop	{r4, r7, pc}
     7ac:	40010060 	.word	0x40010060
     7b0:	40010040 	.word	0x40010040
     7b4:	400100e0 	.word	0x400100e0
     7b8:	400100b4 	.word	0x400100b4
     7bc:	40010090 	.word	0x40010090
     7c0:	40010098 	.word	0x40010098

000007c4 <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
     7c4:	b580      	push	{r7, lr}
     7c6:	b084      	sub	sp, #16
     7c8:	af00      	add	r7, sp, #0
     7ca:	6078      	str	r0, [r7, #4]
     7cc:	6039      	str	r1, [r7, #0]
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
     7ce:	687b      	ldr	r3, [r7, #4]
     7d0:	2b00      	cmp	r3, #0
     7d2:	d014      	beq.n	7fe <am_devices_led_array_init+0x3a>
     7d4:	683b      	ldr	r3, [r7, #0]
     7d6:	2b1f      	cmp	r3, #31
     7d8:	d811      	bhi.n	7fe <am_devices_led_array_init+0x3a>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     7da:	2300      	movs	r3, #0
     7dc:	60fb      	str	r3, [r7, #12]
     7de:	e009      	b.n	7f4 <am_devices_led_array_init+0x30>
    {
        am_devices_led_init(psLEDs + i);
     7e0:	68fb      	ldr	r3, [r7, #12]
     7e2:	00db      	lsls	r3, r3, #3
     7e4:	687a      	ldr	r2, [r7, #4]
     7e6:	4413      	add	r3, r2
     7e8:	4618      	mov	r0, r3
     7ea:	f7ff fe71 	bl	4d0 <am_devices_led_init>
    for ( i = 0; i < ui32NumLEDs; i++ )
     7ee:	68fb      	ldr	r3, [r7, #12]
     7f0:	3301      	adds	r3, #1
     7f2:	60fb      	str	r3, [r7, #12]
     7f4:	68fa      	ldr	r2, [r7, #12]
     7f6:	683b      	ldr	r3, [r7, #0]
     7f8:	429a      	cmp	r2, r3
     7fa:	d3f1      	bcc.n	7e0 <am_devices_led_array_init+0x1c>
     7fc:	e000      	b.n	800 <am_devices_led_array_init+0x3c>
        return;
     7fe:	bf00      	nop
    }
}
     800:	3710      	adds	r7, #16
     802:	46bd      	mov	sp, r7
     804:	bd80      	pop	{r7, pc}
	...

00000808 <am_devices_led_on>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     808:	b480      	push	{r7}
     80a:	b083      	sub	sp, #12
     80c:	af00      	add	r7, sp, #0
     80e:	6078      	str	r0, [r7, #4]
     810:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
     812:	687b      	ldr	r3, [r7, #4]
     814:	2b00      	cmp	r3, #0
     816:	d060      	beq.n	8da <am_devices_led_on+0xd2>
     818:	683b      	ldr	r3, [r7, #0]
     81a:	2b1e      	cmp	r3, #30
     81c:	d85d      	bhi.n	8da <am_devices_led_on+0xd2>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
     81e:	683b      	ldr	r3, [r7, #0]
     820:	00db      	lsls	r3, r3, #3
     822:	687a      	ldr	r2, [r7, #4]
     824:	4413      	add	r3, r2
     826:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
     828:	2b31      	cmp	r3, #49	; 0x31
     82a:	d856      	bhi.n	8da <am_devices_led_on+0xd2>
    }
#else // AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     82c:	683b      	ldr	r3, [r7, #0]
     82e:	00db      	lsls	r3, r3, #3
     830:	687a      	ldr	r2, [r7, #4]
     832:	4413      	add	r3, r2
     834:	685b      	ldr	r3, [r3, #4]
     836:	f003 0302 	and.w	r3, r3, #2
     83a:	2b00      	cmp	r3, #0
     83c:	d036      	beq.n	8ac <am_devices_led_on+0xa4>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     83e:	683b      	ldr	r3, [r7, #0]
     840:	00db      	lsls	r3, r3, #3
     842:	687a      	ldr	r2, [r7, #4]
     844:	4413      	add	r3, r2
     846:	685b      	ldr	r3, [r3, #4]
     848:	f003 0301 	and.w	r3, r3, #1
     84c:	2b00      	cmp	r3, #0
     84e:	d016      	beq.n	87e <am_devices_led_on+0x76>
     850:	683b      	ldr	r3, [r7, #0]
     852:	00db      	lsls	r3, r3, #3
     854:	687a      	ldr	r2, [r7, #4]
     856:	4413      	add	r3, r2
     858:	681b      	ldr	r3, [r3, #0]
     85a:	08db      	lsrs	r3, r3, #3
     85c:	f003 0204 	and.w	r2, r3, #4
     860:	4b21      	ldr	r3, [pc, #132]	; (8e8 <am_devices_led_on+0xe0>)
     862:	4413      	add	r3, r2
     864:	4619      	mov	r1, r3
     866:	683b      	ldr	r3, [r7, #0]
     868:	00db      	lsls	r3, r3, #3
     86a:	687a      	ldr	r2, [r7, #4]
     86c:	4413      	add	r3, r2
     86e:	681b      	ldr	r3, [r3, #0]
     870:	f003 031f 	and.w	r3, r3, #31
     874:	2201      	movs	r2, #1
     876:	fa02 f303 	lsl.w	r3, r2, r3
     87a:	600b      	str	r3, [r1, #0]
     87c:	e02e      	b.n	8dc <am_devices_led_on+0xd4>
     87e:	683b      	ldr	r3, [r7, #0]
     880:	00db      	lsls	r3, r3, #3
     882:	687a      	ldr	r2, [r7, #4]
     884:	4413      	add	r3, r2
     886:	681b      	ldr	r3, [r3, #0]
     888:	08db      	lsrs	r3, r3, #3
     88a:	f003 0204 	and.w	r2, r3, #4
     88e:	4b17      	ldr	r3, [pc, #92]	; (8ec <am_devices_led_on+0xe4>)
     890:	4413      	add	r3, r2
     892:	4619      	mov	r1, r3
     894:	683b      	ldr	r3, [r7, #0]
     896:	00db      	lsls	r3, r3, #3
     898:	687a      	ldr	r2, [r7, #4]
     89a:	4413      	add	r3, r2
     89c:	681b      	ldr	r3, [r3, #0]
     89e:	f003 031f 	and.w	r3, r3, #31
     8a2:	2201      	movs	r2, #1
     8a4:	fa02 f303 	lsl.w	r3, r2, r3
     8a8:	600b      	str	r3, [r1, #0]
     8aa:	e017      	b.n	8dc <am_devices_led_on+0xd4>
    else
    {
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
     8ac:	683b      	ldr	r3, [r7, #0]
     8ae:	00db      	lsls	r3, r3, #3
     8b0:	687a      	ldr	r2, [r7, #4]
     8b2:	4413      	add	r3, r2
     8b4:	681b      	ldr	r3, [r3, #0]
     8b6:	08db      	lsrs	r3, r3, #3
     8b8:	f003 0204 	and.w	r2, r3, #4
     8bc:	4b0c      	ldr	r3, [pc, #48]	; (8f0 <am_devices_led_on+0xe8>)
     8be:	4413      	add	r3, r2
     8c0:	4619      	mov	r1, r3
     8c2:	683b      	ldr	r3, [r7, #0]
     8c4:	00db      	lsls	r3, r3, #3
     8c6:	687a      	ldr	r2, [r7, #4]
     8c8:	4413      	add	r3, r2
     8ca:	681b      	ldr	r3, [r3, #0]
     8cc:	f003 031f 	and.w	r3, r3, #31
     8d0:	2201      	movs	r2, #1
     8d2:	fa02 f303 	lsl.w	r3, r2, r3
     8d6:	600b      	str	r3, [r1, #0]
     8d8:	e000      	b.n	8dc <am_devices_led_on+0xd4>
        return;
     8da:	bf00      	nop
    }
#endif //AM_APOLLO3_GPIO
}
     8dc:	370c      	adds	r7, #12
     8de:	46bd      	mov	sp, r7
     8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8e4:	4770      	bx	lr
     8e6:	bf00      	nop
     8e8:	40010090 	.word	0x40010090
     8ec:	40010098 	.word	0x40010098
     8f0:	400100a8 	.word	0x400100a8

000008f4 <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     8f4:	b480      	push	{r7}
     8f6:	b083      	sub	sp, #12
     8f8:	af00      	add	r7, sp, #0
     8fa:	6078      	str	r0, [r7, #4]
     8fc:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
     8fe:	687b      	ldr	r3, [r7, #4]
     900:	2b00      	cmp	r3, #0
     902:	d060      	beq.n	9c6 <am_devices_led_off+0xd2>
     904:	683b      	ldr	r3, [r7, #0]
     906:	2b1e      	cmp	r3, #30
     908:	d85d      	bhi.n	9c6 <am_devices_led_off+0xd2>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
     90a:	683b      	ldr	r3, [r7, #0]
     90c:	00db      	lsls	r3, r3, #3
     90e:	687a      	ldr	r2, [r7, #4]
     910:	4413      	add	r3, r2
     912:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
     914:	2b31      	cmp	r3, #49	; 0x31
     916:	d856      	bhi.n	9c6 <am_devices_led_off+0xd2>
    }
#else
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     918:	683b      	ldr	r3, [r7, #0]
     91a:	00db      	lsls	r3, r3, #3
     91c:	687a      	ldr	r2, [r7, #4]
     91e:	4413      	add	r3, r2
     920:	685b      	ldr	r3, [r3, #4]
     922:	f003 0302 	and.w	r3, r3, #2
     926:	2b00      	cmp	r3, #0
     928:	d036      	beq.n	998 <am_devices_led_off+0xa4>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     92a:	683b      	ldr	r3, [r7, #0]
     92c:	00db      	lsls	r3, r3, #3
     92e:	687a      	ldr	r2, [r7, #4]
     930:	4413      	add	r3, r2
     932:	685b      	ldr	r3, [r3, #4]
     934:	f003 0301 	and.w	r3, r3, #1
     938:	2b00      	cmp	r3, #0
     93a:	d116      	bne.n	96a <am_devices_led_off+0x76>
     93c:	683b      	ldr	r3, [r7, #0]
     93e:	00db      	lsls	r3, r3, #3
     940:	687a      	ldr	r2, [r7, #4]
     942:	4413      	add	r3, r2
     944:	681b      	ldr	r3, [r3, #0]
     946:	08db      	lsrs	r3, r3, #3
     948:	f003 0204 	and.w	r2, r3, #4
     94c:	4b21      	ldr	r3, [pc, #132]	; (9d4 <am_devices_led_off+0xe0>)
     94e:	4413      	add	r3, r2
     950:	4619      	mov	r1, r3
     952:	683b      	ldr	r3, [r7, #0]
     954:	00db      	lsls	r3, r3, #3
     956:	687a      	ldr	r2, [r7, #4]
     958:	4413      	add	r3, r2
     95a:	681b      	ldr	r3, [r3, #0]
     95c:	f003 031f 	and.w	r3, r3, #31
     960:	2201      	movs	r2, #1
     962:	fa02 f303 	lsl.w	r3, r2, r3
     966:	600b      	str	r3, [r1, #0]
     968:	e02e      	b.n	9c8 <am_devices_led_off+0xd4>
     96a:	683b      	ldr	r3, [r7, #0]
     96c:	00db      	lsls	r3, r3, #3
     96e:	687a      	ldr	r2, [r7, #4]
     970:	4413      	add	r3, r2
     972:	681b      	ldr	r3, [r3, #0]
     974:	08db      	lsrs	r3, r3, #3
     976:	f003 0204 	and.w	r2, r3, #4
     97a:	4b17      	ldr	r3, [pc, #92]	; (9d8 <am_devices_led_off+0xe4>)
     97c:	4413      	add	r3, r2
     97e:	4619      	mov	r1, r3
     980:	683b      	ldr	r3, [r7, #0]
     982:	00db      	lsls	r3, r3, #3
     984:	687a      	ldr	r2, [r7, #4]
     986:	4413      	add	r3, r2
     988:	681b      	ldr	r3, [r3, #0]
     98a:	f003 031f 	and.w	r3, r3, #31
     98e:	2201      	movs	r2, #1
     990:	fa02 f303 	lsl.w	r3, r2, r3
     994:	600b      	str	r3, [r1, #0]
     996:	e017      	b.n	9c8 <am_devices_led_off+0xd4>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
     998:	683b      	ldr	r3, [r7, #0]
     99a:	00db      	lsls	r3, r3, #3
     99c:	687a      	ldr	r2, [r7, #4]
     99e:	4413      	add	r3, r2
     9a0:	681b      	ldr	r3, [r3, #0]
     9a2:	08db      	lsrs	r3, r3, #3
     9a4:	f003 0204 	and.w	r2, r3, #4
     9a8:	4b0c      	ldr	r3, [pc, #48]	; (9dc <am_devices_led_off+0xe8>)
     9aa:	4413      	add	r3, r2
     9ac:	4619      	mov	r1, r3
     9ae:	683b      	ldr	r3, [r7, #0]
     9b0:	00db      	lsls	r3, r3, #3
     9b2:	687a      	ldr	r2, [r7, #4]
     9b4:	4413      	add	r3, r2
     9b6:	681b      	ldr	r3, [r3, #0]
     9b8:	f003 031f 	and.w	r3, r3, #31
     9bc:	2201      	movs	r2, #1
     9be:	fa02 f303 	lsl.w	r3, r2, r3
     9c2:	600b      	str	r3, [r1, #0]
     9c4:	e000      	b.n	9c8 <am_devices_led_off+0xd4>
        return;
     9c6:	bf00      	nop
    }
#endif
}
     9c8:	370c      	adds	r7, #12
     9ca:	46bd      	mov	sp, r7
     9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
     9d0:	4770      	bx	lr
     9d2:	bf00      	nop
     9d4:	40010090 	.word	0x40010090
     9d8:	40010098 	.word	0x40010098
     9dc:	400100b4 	.word	0x400100b4

000009e0 <am_devices_led_toggle>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     9e0:	b580      	push	{r7, lr}
     9e2:	b084      	sub	sp, #16
     9e4:	af00      	add	r7, sp, #0
     9e6:	6078      	str	r0, [r7, #4]
     9e8:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
     9ea:	687b      	ldr	r3, [r7, #4]
     9ec:	2b00      	cmp	r3, #0
     9ee:	d076      	beq.n	ade <am_devices_led_toggle+0xfe>
     9f0:	683b      	ldr	r3, [r7, #0]
     9f2:	2b1e      	cmp	r3, #30
     9f4:	d873      	bhi.n	ade <am_devices_led_toggle+0xfe>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
     9f6:	683b      	ldr	r3, [r7, #0]
     9f8:	00db      	lsls	r3, r3, #3
     9fa:	687a      	ldr	r2, [r7, #4]
     9fc:	4413      	add	r3, r2
     9fe:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
     a00:	2b31      	cmp	r3, #49	; 0x31
     a02:	d86c      	bhi.n	ade <am_devices_led_toggle+0xfe>
    }
#else
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     a04:	683b      	ldr	r3, [r7, #0]
     a06:	00db      	lsls	r3, r3, #3
     a08:	687a      	ldr	r2, [r7, #4]
     a0a:	4413      	add	r3, r2
     a0c:	685b      	ldr	r3, [r3, #4]
     a0e:	f003 0302 	and.w	r3, r3, #2
     a12:	2b00      	cmp	r3, #0
     a14:	d02a      	beq.n	a6c <am_devices_led_toggle+0x8c>
    {
        am_hal_gpio_out_bit_toggle(psLEDs[ui32LEDNum].ui32GPIONumber);
     a16:	f001 fdc5 	bl	25a4 <am_hal_interrupt_master_disable>
     a1a:	4603      	mov	r3, r0
     a1c:	60fb      	str	r3, [r7, #12]
     a1e:	683b      	ldr	r3, [r7, #0]
     a20:	00db      	lsls	r3, r3, #3
     a22:	687a      	ldr	r2, [r7, #4]
     a24:	4413      	add	r3, r2
     a26:	681b      	ldr	r3, [r3, #0]
     a28:	08db      	lsrs	r3, r3, #3
     a2a:	f003 0204 	and.w	r2, r3, #4
     a2e:	4b2e      	ldr	r3, [pc, #184]	; (ae8 <am_devices_led_toggle+0x108>)
     a30:	4413      	add	r3, r2
     a32:	4618      	mov	r0, r3
     a34:	683b      	ldr	r3, [r7, #0]
     a36:	00db      	lsls	r3, r3, #3
     a38:	687a      	ldr	r2, [r7, #4]
     a3a:	4413      	add	r3, r2
     a3c:	681b      	ldr	r3, [r3, #0]
     a3e:	08db      	lsrs	r3, r3, #3
     a40:	f003 0204 	and.w	r2, r3, #4
     a44:	4b28      	ldr	r3, [pc, #160]	; (ae8 <am_devices_led_toggle+0x108>)
     a46:	4413      	add	r3, r2
     a48:	681a      	ldr	r2, [r3, #0]
     a4a:	683b      	ldr	r3, [r7, #0]
     a4c:	00db      	lsls	r3, r3, #3
     a4e:	6879      	ldr	r1, [r7, #4]
     a50:	440b      	add	r3, r1
     a52:	681b      	ldr	r3, [r3, #0]
     a54:	f003 031f 	and.w	r3, r3, #31
     a58:	2101      	movs	r1, #1
     a5a:	fa01 f303 	lsl.w	r3, r1, r3
     a5e:	4053      	eors	r3, r2
     a60:	6003      	str	r3, [r0, #0]
     a62:	68fb      	ldr	r3, [r7, #12]
     a64:	4618      	mov	r0, r3
     a66:	f001 fda1 	bl	25ac <am_hal_interrupt_master_set>
     a6a:	e039      	b.n	ae0 <am_devices_led_toggle+0x100>
    else
    {
        //
        // Check to see if the LED pin is enabled.
        //
        if ( am_hal_gpio_out_enable_bit_get(psLEDs[ui32LEDNum].ui32GPIONumber) )
     a6c:	683b      	ldr	r3, [r7, #0]
     a6e:	00db      	lsls	r3, r3, #3
     a70:	687a      	ldr	r2, [r7, #4]
     a72:	4413      	add	r3, r2
     a74:	681b      	ldr	r3, [r3, #0]
     a76:	4618      	mov	r0, r3
     a78:	f001 fd5a 	bl	2530 <am_hal_gpio_out_enable_bit_get>
     a7c:	4603      	mov	r3, r0
     a7e:	2b00      	cmp	r3, #0
     a80:	d016      	beq.n	ab0 <am_devices_led_toggle+0xd0>
        {
            //
            // If it was enabled, turn if off.
            //
            am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
     a82:	683b      	ldr	r3, [r7, #0]
     a84:	00db      	lsls	r3, r3, #3
     a86:	687a      	ldr	r2, [r7, #4]
     a88:	4413      	add	r3, r2
     a8a:	681b      	ldr	r3, [r3, #0]
     a8c:	08db      	lsrs	r3, r3, #3
     a8e:	f003 0204 	and.w	r2, r3, #4
     a92:	4b16      	ldr	r3, [pc, #88]	; (aec <am_devices_led_toggle+0x10c>)
     a94:	4413      	add	r3, r2
     a96:	4619      	mov	r1, r3
     a98:	683b      	ldr	r3, [r7, #0]
     a9a:	00db      	lsls	r3, r3, #3
     a9c:	687a      	ldr	r2, [r7, #4]
     a9e:	4413      	add	r3, r2
     aa0:	681b      	ldr	r3, [r3, #0]
     aa2:	f003 031f 	and.w	r3, r3, #31
     aa6:	2201      	movs	r2, #1
     aa8:	fa02 f303 	lsl.w	r3, r2, r3
     aac:	600b      	str	r3, [r1, #0]
     aae:	e017      	b.n	ae0 <am_devices_led_toggle+0x100>
        else
        {
            //
            // If it was not enabled, turn if on.
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
     ab0:	683b      	ldr	r3, [r7, #0]
     ab2:	00db      	lsls	r3, r3, #3
     ab4:	687a      	ldr	r2, [r7, #4]
     ab6:	4413      	add	r3, r2
     ab8:	681b      	ldr	r3, [r3, #0]
     aba:	08db      	lsrs	r3, r3, #3
     abc:	f003 0204 	and.w	r2, r3, #4
     ac0:	4b0b      	ldr	r3, [pc, #44]	; (af0 <am_devices_led_toggle+0x110>)
     ac2:	4413      	add	r3, r2
     ac4:	4619      	mov	r1, r3
     ac6:	683b      	ldr	r3, [r7, #0]
     ac8:	00db      	lsls	r3, r3, #3
     aca:	687a      	ldr	r2, [r7, #4]
     acc:	4413      	add	r3, r2
     ace:	681b      	ldr	r3, [r3, #0]
     ad0:	f003 031f 	and.w	r3, r3, #31
     ad4:	2201      	movs	r2, #1
     ad6:	fa02 f303 	lsl.w	r3, r2, r3
     ada:	600b      	str	r3, [r1, #0]
     adc:	e000      	b.n	ae0 <am_devices_led_toggle+0x100>
        return;
     ade:	bf00      	nop
        }
    }
#endif
}
     ae0:	3710      	adds	r7, #16
     ae2:	46bd      	mov	sp, r7
     ae4:	bd80      	pop	{r7, pc}
     ae6:	bf00      	nop
     ae8:	40010088 	.word	0x40010088
     aec:	400100b4 	.word	0x400100b4
     af0:	400100a8 	.word	0x400100a8

00000af4 <am_adc_isr>:
// ADC Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_adc_isr(void)
{
     af4:	b580      	push	{r7, lr}
     af6:	b084      	sub	sp, #16
     af8:	af00      	add	r7, sp, #0
    volatile uint32_t ui32Status;

    //
    // Clear timer 3 interrupt.
    //
    ui32Status = am_hal_adc_int_status_get(true);
     afa:	2001      	movs	r0, #1
     afc:	f001 faf4 	bl	20e8 <am_hal_adc_int_status_get>
     b00:	4603      	mov	r3, r0
     b02:	60bb      	str	r3, [r7, #8]
    am_hal_adc_int_clear(ui32Status);
     b04:	68bb      	ldr	r3, [r7, #8]
     b06:	4618      	mov	r0, r3
     b08:	f001 fae8 	bl	20dc <am_hal_adc_int_clear>

    //
    // Toggle LED 3.
    //
    am_devices_led_toggle(am_bsp_psLEDs, 3);
     b0c:	2103      	movs	r1, #3
     b0e:	4816      	ldr	r0, [pc, #88]	; (b68 <am_adc_isr+0x74>)
     b10:	f7ff ff66 	bl	9e0 <am_devices_led_toggle>

    //
    // Keep grabbing value from the ADC FIFO until it goes empty.
    //
    while ( AM_HAL_ADC_FIFO_COUNT(am_hal_adc_fifo_peek()) )
     b14:	e018      	b.n	b48 <am_adc_isr+0x54>
    {
        volatile uint32_t ui32cnt;
        ui32fifodata = am_hal_adc_fifo_pop();
     b16:	f001 fac3 	bl	20a0 <am_hal_adc_fifo_pop>
     b1a:	60f8      	str	r0, [r7, #12]
        ui32cnt = AM_HAL_ADC_FIFO_COUNT(ui32fifodata);
     b1c:	68fb      	ldr	r3, [r7, #12]
     b1e:	0d1b      	lsrs	r3, r3, #20
     b20:	b2db      	uxtb	r3, r3
     b22:	607b      	str	r3, [r7, #4]

        //
        // Select which one of the two enabled slots is here right now.
        //
        if ( AM_HAL_ADC_FIFO_SLOT(ui32fifodata) == 5)
     b24:	68fb      	ldr	r3, [r7, #12]
     b26:	0f1b      	lsrs	r3, r3, #28
     b28:	f003 0307 	and.w	r3, r3, #7
     b2c:	2b05      	cmp	r3, #5
     b2e:	d104      	bne.n	b3a <am_adc_isr+0x46>
        {
            //
            // Just grab the ADC code for the battery voltage divider.
            //
            g_ui16ADCVDD_code = AM_HAL_ADC_FIFO_FULL_SAMPLE(ui32fifodata);
     b30:	68fb      	ldr	r3, [r7, #12]
     b32:	b29a      	uxth	r2, r3
     b34:	4b0d      	ldr	r3, [pc, #52]	; (b6c <am_adc_isr+0x78>)
     b36:	801a      	strh	r2, [r3, #0]
     b38:	e006      	b.n	b48 <am_adc_isr+0x54>
        {
            //
            // Just grab the ADC code for the temperature sensor.
            // We need the integer part in the low 16-bits.
            //
            g_ui16ADCTEMP_code = AM_HAL_ADC_FIFO_FULL_SAMPLE(ui32fifodata) & 0xFFC0;
     b3a:	68fb      	ldr	r3, [r7, #12]
     b3c:	b29b      	uxth	r3, r3
     b3e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
     b42:	b29a      	uxth	r2, r3
     b44:	4b0a      	ldr	r3, [pc, #40]	; (b70 <am_adc_isr+0x7c>)
     b46:	801a      	strh	r2, [r3, #0]
    while ( AM_HAL_ADC_FIFO_COUNT(am_hal_adc_fifo_peek()) )
     b48:	f001 faa4 	bl	2094 <am_hal_adc_fifo_peek>
     b4c:	4603      	mov	r3, r0
     b4e:	0d1b      	lsrs	r3, r3, #20
     b50:	b2db      	uxtb	r3, r3
     b52:	2b00      	cmp	r3, #0
     b54:	d1df      	bne.n	b16 <am_adc_isr+0x22>
#endif // AM_PART_APOLLO2

    //
    // Signal interrupt arrival to base level.
    //
    g_ui32SampleCount++;
     b56:	4b07      	ldr	r3, [pc, #28]	; (b74 <am_adc_isr+0x80>)
     b58:	681b      	ldr	r3, [r3, #0]
     b5a:	3301      	adds	r3, #1
     b5c:	4a05      	ldr	r2, [pc, #20]	; (b74 <am_adc_isr+0x80>)
     b5e:	6013      	str	r3, [r2, #0]
}
     b60:	bf00      	nop
     b62:	3710      	adds	r7, #16
     b64:	46bd      	mov	sp, r7
     b66:	bd80      	pop	{r7, pc}
     b68:	10004024 	.word	0x10004024
     b6c:	10004176 	.word	0x10004176
     b70:	10004174 	.word	0x10004174
     b74:	10004170 	.word	0x10004170

00000b78 <adc_init>:
// ADC INIT Function
//
//*****************************************************************************
void
adc_init(void)
{
     b78:	b580      	push	{r7, lr}
     b7a:	af00      	add	r7, sp, #0

#if AM_PART_APOLLO2
    //
    // Enable the ADC power domain.
    //
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_ADC);
     b7c:	f44f 7000 	mov.w	r0, #512	; 0x200
     b80:	f001 fd82 	bl	2688 <am_hal_pwrctrl_periph_enable>
#endif

    //
    // Configure the ADC.
    //
    am_hal_adc_config(&g_sADC_CfgA);
     b84:	4813      	ldr	r0, [pc, #76]	; (bd4 <adc_init+0x5c>)
     b86:	f001 fa11 	bl	1fac <am_hal_adc_config>

    //
    // Initialize the slot control registers.
    //
    am_hal_adc_slot_config(0, 0); // unused slot
     b8a:	2100      	movs	r1, #0
     b8c:	2000      	movs	r0, #0
     b8e:	f001 fa6b 	bl	2068 <am_hal_adc_slot_config>
    am_hal_adc_slot_config(1, 0); // unused slot
     b92:	2100      	movs	r1, #0
     b94:	2001      	movs	r0, #1
     b96:	f001 fa67 	bl	2068 <am_hal_adc_slot_config>
    am_hal_adc_slot_config(2, 0); // unused slot
     b9a:	2100      	movs	r1, #0
     b9c:	2002      	movs	r0, #2
     b9e:	f001 fa63 	bl	2068 <am_hal_adc_slot_config>
    am_hal_adc_slot_config(3, 0); // unused slot
     ba2:	2100      	movs	r1, #0
     ba4:	2003      	movs	r0, #3
     ba6:	f001 fa5f 	bl	2068 <am_hal_adc_slot_config>
    am_hal_adc_slot_config(4, 0); // unused slot
     baa:	2100      	movs	r1, #0
     bac:	2004      	movs	r0, #4
     bae:	f001 fa5b 	bl	2068 <am_hal_adc_slot_config>
    am_hal_adc_slot_config(5, (AM_HAL_ADC_SLOT_AVG_1        |
     bb2:	f640 5103 	movw	r1, #3331	; 0xd03
     bb6:	2005      	movs	r0, #5
     bb8:	f001 fa56 	bl	2068 <am_hal_adc_slot_config>
                               AM_HAL_ADC_SLOT_CHSEL_VBATT  |
                               AM_HAL_ADC_SLOT_WINDOW_EN    |
                               AM_HAL_ADC_SLOT_ENABLE));

    am_hal_adc_slot_config(6, 0); // unused slot
     bbc:	2100      	movs	r1, #0
     bbe:	2006      	movs	r0, #6
     bc0:	f001 fa52 	bl	2068 <am_hal_adc_slot_config>
                               AM_HAL_ADC_SLOT_CHSEL_TEMP       |
                               AM_HAL_ADC_SLOT_WINDOW_EN        |
                               AM_HAL_ADC_SLOT_ENABLE));
#endif
#if AM_PART_APOLLO2
    am_hal_adc_slot_config(7, (AM_HAL_ADC_SLOT_AVG_1            |
     bc4:	4904      	ldr	r1, [pc, #16]	; (bd8 <adc_init+0x60>)
     bc6:	2007      	movs	r0, #7
     bc8:	f001 fa4e 	bl	2068 <am_hal_adc_slot_config>
#endif

    //
    // Enable the ADC.
    //
    am_hal_adc_enable();
     bcc:	f001 fa76 	bl	20bc <am_hal_adc_enable>
}
     bd0:	bf00      	nop
     bd2:	bd80      	pop	{r7, pc}
     bd4:	10004000 	.word	0x10004000
     bd8:	00020c03 	.word	0x00020c03

00000bdc <adc_init_timer3A>:
// Enable the ADC INIT TIMER 3A function and set for 0.5 second period.
//
//*****************************************************************************
void
adc_init_timer3A(void)
{
     bdc:	b580      	push	{r7, lr}
     bde:	b082      	sub	sp, #8
     be0:	af00      	add	r7, sp, #0
    uint32_t ui32Period = 2000; // Set for 2 second (2000ms) period
     be2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
     be6:	607b      	str	r3, [r7, #4]

    //
    // LFRC has to be turned on for this example because we are running this
    // timer off of the LFRC.
    //
    am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_LFRC);
     be8:	2002      	movs	r0, #2
     bea:	f001 fb65 	bl	22b8 <am_hal_clkgen_osc_start>

    //
    // Set up timer 3A so start by clearing it.
    //
    am_hal_ctimer_clear(3, AM_HAL_CTIMER_TIMERA);
     bee:	f64f 71ff 	movw	r1, #65535	; 0xffff
     bf2:	2003      	movs	r0, #3
     bf4:	f001 fbfe 	bl	23f4 <am_hal_ctimer_clear>

    //
    // Configure the timer to count 32Hz LFRC clocks but don't start it yet.
    //
    am_hal_ctimer_config(3, &g_sTimer3);
     bf8:	4911      	ldr	r1, [pc, #68]	; (c40 <adc_init_timer3A+0x64>)
     bfa:	2003      	movs	r0, #3
     bfc:	f001 fb70 	bl	22e0 <am_hal_ctimer_config>

    //
    // Compute CMPR value needed for desired period based on a 32HZ clock.
    //
    ui32Period = ui32Period * 32 / 1000;
     c00:	687b      	ldr	r3, [r7, #4]
     c02:	015b      	lsls	r3, r3, #5
     c04:	4a0f      	ldr	r2, [pc, #60]	; (c44 <adc_init_timer3A+0x68>)
     c06:	fba2 2303 	umull	r2, r3, r2, r3
     c0a:	099b      	lsrs	r3, r3, #6
     c0c:	607b      	str	r3, [r7, #4]
    am_hal_ctimer_period_set(3, AM_HAL_CTIMER_TIMERA,
     c0e:	687b      	ldr	r3, [r7, #4]
     c10:	085b      	lsrs	r3, r3, #1
     c12:	687a      	ldr	r2, [r7, #4]
     c14:	f64f 71ff 	movw	r1, #65535	; 0xffff
     c18:	2003      	movs	r0, #3
     c1a:	f001 fc13 	bl	2444 <am_hal_ctimer_period_set>

    //
    // Enable the timer output "pin". This refers to the pin as seen from
    // inside the timer. The actual GPIO pin is neither enabled nor driven.
    //
    am_hal_ctimer_pin_enable(3, AM_HAL_CTIMER_TIMERA);
     c1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
     c22:	2003      	movs	r0, #3
     c24:	f001 fbfa 	bl	241c <am_hal_ctimer_pin_enable>

    //
    // Set up timer 3A as the trigger source for the ADC.
    //
    am_hal_ctimer_adc_trigger_enable();
     c28:	f001 fc66 	bl	24f8 <am_hal_ctimer_adc_trigger_enable>

    //
    // Start timer 3A.
    //
    am_hal_ctimer_start(3, AM_HAL_CTIMER_TIMERA);
     c2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     c30:	2003      	movs	r0, #3
     c32:	f001 fbc7 	bl	23c4 <am_hal_ctimer_start>
}
     c36:	bf00      	nop
     c38:	3708      	adds	r7, #8
     c3a:	46bd      	mov	sp, r7
     c3c:	bd80      	pop	{r7, pc}
     c3e:	bf00      	nop
     c40:	10004018 	.word	0x10004018
     c44:	10624dd3 	.word	0x10624dd3

00000c48 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     c48:	b590      	push	{r4, r7, lr}
     c4a:	b08f      	sub	sp, #60	; 0x3c
     c4c:	af02      	add	r7, sp, #8
    bool  bMeasured;
    float fTempF;
    int32_t i32BaseLevelCount;
    const float fReferenceVoltage = 1.5;
     c4e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
     c52:	62bb      	str	r3, [r7, #40]	; 0x28
    float fTemp, fVoltage, fOffset;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     c54:	2000      	movs	r0, #0
     c56:	f001 fb07 	bl	2268 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     c5a:	487a      	ldr	r0, [pc, #488]	; (e44 <main+0x1fc>)
     c5c:	f001 fa6e 	bl	213c <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     c60:	f001 f950 	bl	1f04 <am_bsp_low_power_init>

    //
    // Initialize device drivers for the LEDs on the board.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
     c64:	2105      	movs	r1, #5
     c66:	4878      	ldr	r0, [pc, #480]	; (e48 <main+0x200>)
     c68:	f7ff fdac 	bl	7c4 <am_devices_led_array_init>

    //
    // Configure the Button 0 pin as a simple GPIO input.
    //
    am_hal_gpio_pin_config(AM_BSP_GPIO_BUTTON0, AM_HAL_PIN_INPUT);
     c6c:	f001 fc9a 	bl	25a4 <am_hal_interrupt_master_disable>
     c70:	4603      	mov	r3, r0
     c72:	607b      	str	r3, [r7, #4]
     c74:	4b75      	ldr	r3, [pc, #468]	; (e4c <main+0x204>)
     c76:	2273      	movs	r2, #115	; 0x73
     c78:	601a      	str	r2, [r3, #0]
     c7a:	4a75      	ldr	r2, [pc, #468]	; (e50 <main+0x208>)
     c7c:	4b74      	ldr	r3, [pc, #464]	; (e50 <main+0x208>)
     c7e:	681b      	ldr	r3, [r3, #0]
     c80:	f023 0307 	bic.w	r3, r3, #7
     c84:	6013      	str	r3, [r2, #0]
     c86:	4a73      	ldr	r2, [pc, #460]	; (e54 <main+0x20c>)
     c88:	4b72      	ldr	r3, [pc, #456]	; (e54 <main+0x20c>)
     c8a:	681b      	ldr	r3, [r3, #0]
     c8c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     c90:	f043 031a 	orr.w	r3, r3, #26
     c94:	6013      	str	r3, [r2, #0]
     c96:	4a70      	ldr	r2, [pc, #448]	; (e58 <main+0x210>)
     c98:	4b6f      	ldr	r3, [pc, #444]	; (e58 <main+0x210>)
     c9a:	681b      	ldr	r3, [r3, #0]
     c9c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     ca0:	6013      	str	r3, [r2, #0]
     ca2:	4b6a      	ldr	r3, [pc, #424]	; (e4c <main+0x204>)
     ca4:	2200      	movs	r2, #0
     ca6:	601a      	str	r2, [r3, #0]
     ca8:	687b      	ldr	r3, [r7, #4]
     caa:	4618      	mov	r0, r3
     cac:	f001 fc7e 	bl	25ac <am_hal_interrupt_master_set>

    //
    // Initialize the SWO GPIO pin.
    //
    am_bsp_pin_enable(ITM_SWO);
     cb0:	f001 fc78 	bl	25a4 <am_hal_interrupt_master_disable>
     cb4:	4603      	mov	r3, r0
     cb6:	603b      	str	r3, [r7, #0]
     cb8:	4b64      	ldr	r3, [pc, #400]	; (e4c <main+0x204>)
     cba:	2273      	movs	r2, #115	; 0x73
     cbc:	601a      	str	r2, [r3, #0]
     cbe:	4a67      	ldr	r2, [pc, #412]	; (e5c <main+0x214>)
     cc0:	4b66      	ldr	r3, [pc, #408]	; (e5c <main+0x214>)
     cc2:	681b      	ldr	r3, [r3, #0]
     cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     cc8:	6013      	str	r3, [r2, #0]
     cca:	4a65      	ldr	r2, [pc, #404]	; (e60 <main+0x218>)
     ccc:	4b64      	ldr	r3, [pc, #400]	; (e60 <main+0x218>)
     cce:	681b      	ldr	r3, [r3, #0]
     cd0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     cd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     cd8:	6013      	str	r3, [r2, #0]
     cda:	4a62      	ldr	r2, [pc, #392]	; (e64 <main+0x21c>)
     cdc:	4b61      	ldr	r3, [pc, #388]	; (e64 <main+0x21c>)
     cde:	681b      	ldr	r3, [r3, #0]
     ce0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     ce4:	6013      	str	r3, [r2, #0]
     ce6:	4b59      	ldr	r3, [pc, #356]	; (e4c <main+0x204>)
     ce8:	2200      	movs	r2, #0
     cea:	601a      	str	r2, [r3, #0]
     cec:	683b      	ldr	r3, [r7, #0]
     cee:	4618      	mov	r0, r3
     cf0:	f001 fc5c 	bl	25ac <am_hal_interrupt_master_set>

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     cf4:	f001 fc5e 	bl	25b4 <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     cf8:	f001 f916 	bl	1f28 <am_bsp_debug_printf_enable>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     cfc:	485a      	ldr	r0, [pc, #360]	; (e68 <main+0x220>)
     cfe:	f000 fa55 	bl	11ac <am_util_stdio_printf_init>

    //
    // Clear the terminal screen, and print a quick message to show that we're
    // alive.
    //
    am_util_stdio_terminal_clear();
     d02:	f001 f8f5 	bl	1ef0 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("ADC VBATT and Temperature Sensing Example.\n");
     d06:	4859      	ldr	r0, [pc, #356]	; (e6c <main+0x224>)
     d08:	f001 f8d4 	bl	1eb4 <am_util_stdio_printf>

    //
    // Enable floating point.
    //
    am_hal_sysctrl_fpu_enable();
     d0c:	f001 ff36 	bl	2b7c <am_hal_sysctrl_fpu_enable>
    am_hal_sysctrl_fpu_stacking_enable(true);
     d10:	2001      	movs	r0, #1
     d12:	f001 ff3b 	bl	2b8c <am_hal_sysctrl_fpu_stacking_enable>

    //
    // Initialize CTIMER 3A to trigger the ADC every 0.5 seconds.
    //
    adc_init_timer3A();
     d16:	f7ff ff61 	bl	bdc <adc_init_timer3A>

    //
    // Print out ctimer initial register state.
    //
    am_util_stdio_printf("\n");
     d1a:	4855      	ldr	r0, [pc, #340]	; (e70 <main+0x228>)
     d1c:	f001 f8ca 	bl	1eb4 <am_util_stdio_printf>
    am_util_stdio_printf("CTIMER3=0x%08X @ 0x%08X\n",
     d20:	4b54      	ldr	r3, [pc, #336]	; (e74 <main+0x22c>)
     d22:	681b      	ldr	r3, [r3, #0]
     d24:	4a53      	ldr	r2, [pc, #332]	; (e74 <main+0x22c>)
     d26:	4619      	mov	r1, r3
     d28:	4853      	ldr	r0, [pc, #332]	; (e78 <main+0x230>)
     d2a:	f001 f8c3 	bl	1eb4 <am_util_stdio_printf>
                         AM_REGVAL(REG_CTIMER_BASEADDR + AM_REG_CTIMER_TMR3_O),
                         REG_CTIMER_BASEADDR + AM_REG_CTIMER_TMR3_O);
    am_util_stdio_printf("CTIMER3=0x%08X @ 0x%08X\n",
     d2e:	4b53      	ldr	r3, [pc, #332]	; (e7c <main+0x234>)
     d30:	681b      	ldr	r3, [r3, #0]
     d32:	4a52      	ldr	r2, [pc, #328]	; (e7c <main+0x234>)
     d34:	4619      	mov	r1, r3
     d36:	4850      	ldr	r0, [pc, #320]	; (e78 <main+0x230>)
     d38:	f001 f8bc 	bl	1eb4 <am_util_stdio_printf>
                         AM_REGVAL(REG_CTIMER_BASEADDR + AM_REG_CTIMER_CMPRA3_O),
                         REG_CTIMER_BASEADDR + AM_REG_CTIMER_CMPRA3_O);
    am_util_stdio_printf("CTIMER3=0x%08X @ 0x%08X\n",
     d3c:	4b50      	ldr	r3, [pc, #320]	; (e80 <main+0x238>)
     d3e:	681b      	ldr	r3, [r3, #0]
     d40:	4a4f      	ldr	r2, [pc, #316]	; (e80 <main+0x238>)
     d42:	4619      	mov	r1, r3
     d44:	484c      	ldr	r0, [pc, #304]	; (e78 <main+0x230>)
     d46:	f001 f8b5 	bl	1eb4 <am_util_stdio_printf>
                         AM_REGVAL(REG_CTIMER_BASEADDR + AM_REG_CTIMER_CMPRB3_O),
                         REG_CTIMER_BASEADDR + AM_REG_CTIMER_CMPRB3_O);
    am_util_stdio_printf("CTIMER3=0x%08X @ 0x%08X\n",
     d4a:	4b4e      	ldr	r3, [pc, #312]	; (e84 <main+0x23c>)
     d4c:	681b      	ldr	r3, [r3, #0]
     d4e:	4a4d      	ldr	r2, [pc, #308]	; (e84 <main+0x23c>)
     d50:	4619      	mov	r1, r3
     d52:	4849      	ldr	r0, [pc, #292]	; (e78 <main+0x230>)
     d54:	f001 f8ae 	bl	1eb4 <am_util_stdio_printf>
                         REG_CTIMER_BASEADDR + AM_REG_CTIMER_CTRL3_O);

    //
    // Initialize the ADC.
    //
    adc_init();
     d58:	f7ff ff0e 	bl	b78 <adc_init>

    //
    // Print out ADC initial register state.
    //
    am_util_stdio_printf("\n");
     d5c:	4844      	ldr	r0, [pc, #272]	; (e70 <main+0x228>)
     d5e:	f001 f8a9 	bl	1eb4 <am_util_stdio_printf>
    am_util_stdio_printf("ADC REGISTERS @ 0x%08X\n", (uint32_t)REG_ADC_BASEADDR);
     d62:	4949      	ldr	r1, [pc, #292]	; (e88 <main+0x240>)
     d64:	4849      	ldr	r0, [pc, #292]	; (e8c <main+0x244>)
     d66:	f001 f8a5 	bl	1eb4 <am_util_stdio_printf>
    am_util_stdio_printf("ADC CFG   = 0x%08X\n", AM_REG(ADC, CFG));
     d6a:	4b47      	ldr	r3, [pc, #284]	; (e88 <main+0x240>)
     d6c:	681b      	ldr	r3, [r3, #0]
     d6e:	4619      	mov	r1, r3
     d70:	4847      	ldr	r0, [pc, #284]	; (e90 <main+0x248>)
     d72:	f001 f89f 	bl	1eb4 <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT0 = 0x%08X\n", AM_REG(ADC, SL0CFG));
     d76:	4b47      	ldr	r3, [pc, #284]	; (e94 <main+0x24c>)
     d78:	681b      	ldr	r3, [r3, #0]
     d7a:	4619      	mov	r1, r3
     d7c:	4846      	ldr	r0, [pc, #280]	; (e98 <main+0x250>)
     d7e:	f001 f899 	bl	1eb4 <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT1 = 0x%08X\n", AM_REG(ADC, SL1CFG));
     d82:	4b46      	ldr	r3, [pc, #280]	; (e9c <main+0x254>)
     d84:	681b      	ldr	r3, [r3, #0]
     d86:	4619      	mov	r1, r3
     d88:	4845      	ldr	r0, [pc, #276]	; (ea0 <main+0x258>)
     d8a:	f001 f893 	bl	1eb4 <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT2 = 0x%08X\n", AM_REG(ADC, SL2CFG));
     d8e:	4b45      	ldr	r3, [pc, #276]	; (ea4 <main+0x25c>)
     d90:	681b      	ldr	r3, [r3, #0]
     d92:	4619      	mov	r1, r3
     d94:	4844      	ldr	r0, [pc, #272]	; (ea8 <main+0x260>)
     d96:	f001 f88d 	bl	1eb4 <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT3 = 0x%08X\n", AM_REG(ADC, SL3CFG));
     d9a:	4b44      	ldr	r3, [pc, #272]	; (eac <main+0x264>)
     d9c:	681b      	ldr	r3, [r3, #0]
     d9e:	4619      	mov	r1, r3
     da0:	4843      	ldr	r0, [pc, #268]	; (eb0 <main+0x268>)
     da2:	f001 f887 	bl	1eb4 <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT4 = 0x%08X\n", AM_REG(ADC, SL4CFG));
     da6:	4b43      	ldr	r3, [pc, #268]	; (eb4 <main+0x26c>)
     da8:	681b      	ldr	r3, [r3, #0]
     daa:	4619      	mov	r1, r3
     dac:	4842      	ldr	r0, [pc, #264]	; (eb8 <main+0x270>)
     dae:	f001 f881 	bl	1eb4 <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT5 = 0x%08X\n", AM_REG(ADC, SL5CFG));
     db2:	4b42      	ldr	r3, [pc, #264]	; (ebc <main+0x274>)
     db4:	681b      	ldr	r3, [r3, #0]
     db6:	4619      	mov	r1, r3
     db8:	4841      	ldr	r0, [pc, #260]	; (ec0 <main+0x278>)
     dba:	f001 f87b 	bl	1eb4 <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT6 = 0x%08X\n", AM_REG(ADC, SL6CFG));
     dbe:	4b41      	ldr	r3, [pc, #260]	; (ec4 <main+0x27c>)
     dc0:	681b      	ldr	r3, [r3, #0]
     dc2:	4619      	mov	r1, r3
     dc4:	4840      	ldr	r0, [pc, #256]	; (ec8 <main+0x280>)
     dc6:	f001 f875 	bl	1eb4 <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT7 = 0x%08X\n", AM_REG(ADC, SL7CFG));
     dca:	4b40      	ldr	r3, [pc, #256]	; (ecc <main+0x284>)
     dcc:	681b      	ldr	r3, [r3, #0]
     dce:	4619      	mov	r1, r3
     dd0:	483f      	ldr	r0, [pc, #252]	; (ed0 <main+0x288>)
     dd2:	f001 f86f 	bl	1eb4 <am_util_stdio_printf>
#endif

    //
    // Print out the temperature trim values as recorded in OTP.
    //
    bMeasured = am_hal_adc_temp_trims_get(&fTemp, &fVoltage, &fOffset);
     dd6:	f107 0208 	add.w	r2, r7, #8
     dda:	f107 010c 	add.w	r1, r7, #12
     dde:	f107 0310 	add.w	r3, r7, #16
     de2:	4618      	mov	r0, r3
     de4:	f001 f924 	bl	2030 <am_hal_adc_temp_trims_get>
     de8:	4603      	mov	r3, r0
     dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    am_util_stdio_printf("\n");
     dee:	4820      	ldr	r0, [pc, #128]	; (e70 <main+0x228>)
     df0:	f001 f860 	bl	1eb4 <am_util_stdio_printf>
    am_util_stdio_printf("TRIMMED TEMP    = %.3f\n", fTemp);
     df4:	693b      	ldr	r3, [r7, #16]
     df6:	4618      	mov	r0, r3
     df8:	f7ff fac6 	bl	388 <__aeabi_f2d>
     dfc:	4603      	mov	r3, r0
     dfe:	460c      	mov	r4, r1
     e00:	461a      	mov	r2, r3
     e02:	4623      	mov	r3, r4
     e04:	4833      	ldr	r0, [pc, #204]	; (ed4 <main+0x28c>)
     e06:	f001 f855 	bl	1eb4 <am_util_stdio_printf>
    am_util_stdio_printf("TRIMMED VOLTAGE = %.3f\n", fVoltage);
     e0a:	68fb      	ldr	r3, [r7, #12]
     e0c:	4618      	mov	r0, r3
     e0e:	f7ff fabb 	bl	388 <__aeabi_f2d>
     e12:	4603      	mov	r3, r0
     e14:	460c      	mov	r4, r1
     e16:	461a      	mov	r2, r3
     e18:	4623      	mov	r3, r4
     e1a:	482f      	ldr	r0, [pc, #188]	; (ed8 <main+0x290>)
     e1c:	f001 f84a 	bl	1eb4 <am_util_stdio_printf>
    am_util_stdio_printf("TRIMMED Offset  = %.3f\n", fOffset);
     e20:	68bb      	ldr	r3, [r7, #8]
     e22:	4618      	mov	r0, r3
     e24:	f7ff fab0 	bl	388 <__aeabi_f2d>
     e28:	4603      	mov	r3, r0
     e2a:	460c      	mov	r4, r1
     e2c:	461a      	mov	r2, r3
     e2e:	4623      	mov	r3, r4
     e30:	482a      	ldr	r0, [pc, #168]	; (edc <main+0x294>)
     e32:	f001 f83f 	bl	1eb4 <am_util_stdio_printf>
    am_util_stdio_printf("Note - these trim values are '%s' values.\n",
     e36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
     e3a:	2b00      	cmp	r3, #0
     e3c:	d052      	beq.n	ee4 <main+0x29c>
     e3e:	4b28      	ldr	r3, [pc, #160]	; (ee0 <main+0x298>)
     e40:	e051      	b.n	ee6 <main+0x29e>
     e42:	bf00      	nop
     e44:	00002eac 	.word	0x00002eac
     e48:	10004024 	.word	0x10004024
     e4c:	40010060 	.word	0x40010060
     e50:	40010048 	.word	0x40010048
     e54:	40010010 	.word	0x40010010
     e58:	400100f0 	.word	0x400100f0
     e5c:	40010054 	.word	0x40010054
     e60:	40010028 	.word	0x40010028
     e64:	40010108 	.word	0x40010108
     e68:	00001fa9 	.word	0x00001fa9
     e6c:	00002c64 	.word	0x00002c64
     e70:	00002c90 	.word	0x00002c90
     e74:	40008030 	.word	0x40008030
     e78:	00002c94 	.word	0x00002c94
     e7c:	40008034 	.word	0x40008034
     e80:	40008038 	.word	0x40008038
     e84:	4000803c 	.word	0x4000803c
     e88:	50010000 	.word	0x50010000
     e8c:	00002cb0 	.word	0x00002cb0
     e90:	00002cc8 	.word	0x00002cc8
     e94:	5001000c 	.word	0x5001000c
     e98:	00002cdc 	.word	0x00002cdc
     e9c:	50010010 	.word	0x50010010
     ea0:	00002cf0 	.word	0x00002cf0
     ea4:	50010014 	.word	0x50010014
     ea8:	00002d04 	.word	0x00002d04
     eac:	50010018 	.word	0x50010018
     eb0:	00002d18 	.word	0x00002d18
     eb4:	5001001c 	.word	0x5001001c
     eb8:	00002d2c 	.word	0x00002d2c
     ebc:	50010020 	.word	0x50010020
     ec0:	00002d40 	.word	0x00002d40
     ec4:	50010024 	.word	0x50010024
     ec8:	00002d54 	.word	0x00002d54
     ecc:	50010028 	.word	0x50010028
     ed0:	00002d68 	.word	0x00002d68
     ed4:	00002d7c 	.word	0x00002d7c
     ed8:	00002d94 	.word	0x00002d94
     edc:	00002dac 	.word	0x00002dac
     ee0:	00002dc4 	.word	0x00002dc4
     ee4:	4b45      	ldr	r3, [pc, #276]	; (ffc <main+0x3b4>)
     ee6:	4619      	mov	r1, r3
     ee8:	4845      	ldr	r0, [pc, #276]	; (1000 <main+0x3b8>)
     eea:	f000 ffe3 	bl	1eb4 <am_util_stdio_printf>
                         bMeasured ? "calibrated" : "uncalibrated default");
    am_util_stdio_printf("\n");
     eee:	4845      	ldr	r0, [pc, #276]	; (1004 <main+0x3bc>)
     ef0:	f000 ffe0 	bl	1eb4 <am_util_stdio_printf>

    //
    // Enable the ADC interrupt in the NVIC.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_ADC);
     ef4:	2020      	movs	r0, #32
     ef6:	f001 fb29 	bl	254c <am_hal_interrupt_enable>
    am_hal_interrupt_master_enable();
     efa:	f001 fb4f 	bl	259c <am_hal_interrupt_master_enable>

    //
    // Enable the ADC interrupts in the ADC.
    //
    am_hal_adc_int_enable(AM_REG_ADC_INTEN_WCINC(1)     |
     efe:	203f      	movs	r0, #63	; 0x3f
     f00:	f001 f8e4 	bl	20cc <am_hal_adc_int_enable>
                          AM_REG_ADC_INTEN_CNVCMP(1));

    //
    // Reset the sample count which will be incremented by the ISR.
    //
    g_ui32SampleCount = 0;
     f04:	4b40      	ldr	r3, [pc, #256]	; (1008 <main+0x3c0>)
     f06:	2200      	movs	r2, #0
     f08:	601a      	str	r2, [r3, #0]

    //
    // Kick Start Timer 3 with an ADC software trigger in REPEAT used.
    //
    am_hal_adc_trigger();
     f0a:	f001 f8d1 	bl	20b0 <am_hal_adc_trigger>

    //
    // Track buffer depth for progress messages.
    //
    i32BaseLevelCount = g_ui32SampleCount;
     f0e:	4b3e      	ldr	r3, [pc, #248]	; (1008 <main+0x3c0>)
     f10:	681b      	ldr	r3, [r3, #0]
     f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (1)
    {
        //
        // Print the battery voltage and temperature for each interrupt
        //
        if (g_ui32SampleCount > i32BaseLevelCount)
     f14:	4b3c      	ldr	r3, [pc, #240]	; (1008 <main+0x3c0>)
     f16:	681a      	ldr	r2, [r3, #0]
     f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f1a:	429a      	cmp	r2, r3
     f1c:	d961      	bls.n	fe2 <main+0x39a>
        {
            i32BaseLevelCount = g_ui32SampleCount;
     f1e:	4b3a      	ldr	r3, [pc, #232]	; (1008 <main+0x3c0>)
     f20:	681b      	ldr	r3, [r3, #0]
     f22:	62fb      	str	r3, [r7, #44]	; 0x2c

            //
            // Compute the voltage divider output.
            //
            fVBATT = ((float)g_ui16ADCVDD_code) * 3.0f * fReferenceVoltage
     f24:	4b39      	ldr	r3, [pc, #228]	; (100c <main+0x3c4>)
     f26:	881b      	ldrh	r3, [r3, #0]
     f28:	ee07 3a90 	vmov	s15, r3
     f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
     f30:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
     f34:	ee27 7a87 	vmul.f32	s14, s15, s14
     f38:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
     f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
                    / 1024.0f / 64.0f;
     f40:	eddf 6a33 	vldr	s13, [pc, #204]	; 1010 <main+0x3c8>
     f44:	ee87 7aa6 	vdiv.f32	s14, s15, s13
            fVBATT = ((float)g_ui16ADCVDD_code) * 3.0f * fReferenceVoltage
     f48:	eddf 6a32 	vldr	s13, [pc, #200]	; 1014 <main+0x3cc>
     f4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
     f50:	edc7 7a08 	vstr	s15, [r7, #32]

            //
            // Print the voltage divider output.
            //
            am_util_stdio_printf("VBATT = <%.3f> (0x%04X) ",
     f54:	6a38      	ldr	r0, [r7, #32]
     f56:	f7ff fa17 	bl	388 <__aeabi_f2d>
     f5a:	460a      	mov	r2, r1
     f5c:	4601      	mov	r1, r0
     f5e:	4b2b      	ldr	r3, [pc, #172]	; (100c <main+0x3c4>)
     f60:	881b      	ldrh	r3, [r3, #0]
     f62:	9300      	str	r3, [sp, #0]
     f64:	4613      	mov	r3, r2
     f66:	460a      	mov	r2, r1
     f68:	482b      	ldr	r0, [pc, #172]	; (1018 <main+0x3d0>)
     f6a:	f000 ffa3 	bl	1eb4 <am_util_stdio_printf>
            // Convert and scale the temperature.
            // Temperatures are in Fahrenheit range -40 to 225 degrees.
            // Voltage range is 0.825V to 1.283V
            // First get the ADC voltage corresponding to temperature.
            //
            fADCTempVolts = ((float)g_ui16ADCTEMP_code) * fReferenceVoltage
     f6e:	4b2b      	ldr	r3, [pc, #172]	; (101c <main+0x3d4>)
     f70:	881b      	ldrh	r3, [r3, #0]
     f72:	ee07 3a90 	vmov	s15, r3
     f76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
     f7a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
     f7e:	ee27 7a27 	vmul.f32	s14, s14, s15
     f82:	eddf 6a27 	vldr	s13, [pc, #156]	; 1020 <main+0x3d8>
     f86:	eec7 7a26 	vdiv.f32	s15, s14, s13
     f8a:	edc7 7a07 	vstr	s15, [r7, #28]
                          / (1024.0f * 64.0f);

            //
            // Now call the HAL routine to convert volts to degrees Celsius.
            //
            fADCTempDegreesC = am_hal_adc_volts_to_celsius(fADCTempVolts);
     f8e:	69f8      	ldr	r0, [r7, #28]
     f90:	f001 f8b8 	bl	2104 <am_hal_adc_volts_to_celsius>
     f94:	61b8      	str	r0, [r7, #24]

            //
            // print the temperature value in Celsius.
            //
            am_util_stdio_printf("TEMP = %.2f C (0x%04X) ",
     f96:	69b8      	ldr	r0, [r7, #24]
     f98:	f7ff f9f6 	bl	388 <__aeabi_f2d>
     f9c:	460a      	mov	r2, r1
     f9e:	4601      	mov	r1, r0
     fa0:	4b1e      	ldr	r3, [pc, #120]	; (101c <main+0x3d4>)
     fa2:	881b      	ldrh	r3, [r3, #0]
     fa4:	9300      	str	r3, [sp, #0]
     fa6:	4613      	mov	r3, r2
     fa8:	460a      	mov	r2, r1
     faa:	481e      	ldr	r0, [pc, #120]	; (1024 <main+0x3dc>)
     fac:	f000 ff82 	bl	1eb4 <am_util_stdio_printf>
                                 fADCTempDegreesC, g_ui16ADCTEMP_code);

            //
            // Print the temperature value in Fahrenheit.
            //
            fTempF = (fADCTempDegreesC * (9.0f / 5.0f)) + 32.0f;
     fb0:	edd7 7a06 	vldr	s15, [r7, #24]
     fb4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 1028 <main+0x3e0>
     fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
     fbc:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 102c <main+0x3e4>
     fc0:	ee77 7a87 	vadd.f32	s15, s15, s14
     fc4:	edc7 7a05 	vstr	s15, [r7, #20]
            am_util_stdio_printf(" %.2f F", fTempF);
     fc8:	6978      	ldr	r0, [r7, #20]
     fca:	f7ff f9dd 	bl	388 <__aeabi_f2d>
     fce:	4603      	mov	r3, r0
     fd0:	460c      	mov	r4, r1
     fd2:	461a      	mov	r2, r3
     fd4:	4623      	mov	r3, r4
     fd6:	4816      	ldr	r0, [pc, #88]	; (1030 <main+0x3e8>)
     fd8:	f000 ff6c 	bl	1eb4 <am_util_stdio_printf>
                am_util_stdio_printf("\n");
                am_hal_adc_batt_load_disable();
                am_devices_led_off(am_bsp_psLEDs, 2);
            }
#else
            am_util_stdio_printf("\n");
     fdc:	4809      	ldr	r0, [pc, #36]	; (1004 <main+0x3bc>)
     fde:	f000 ff69 	bl	1eb4 <am_util_stdio_printf>
        }

        //
        // Sleep here until the next ADC interrupt comes along.
        //
        am_devices_led_off(am_bsp_psLEDs, 0);
     fe2:	2100      	movs	r1, #0
     fe4:	4813      	ldr	r0, [pc, #76]	; (1034 <main+0x3ec>)
     fe6:	f7ff fc85 	bl	8f4 <am_devices_led_off>
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     fea:	2001      	movs	r0, #1
     fec:	f001 fd28 	bl	2a40 <am_hal_sysctrl_sleep>
        am_devices_led_on(am_bsp_psLEDs, 0);
     ff0:	2100      	movs	r1, #0
     ff2:	4810      	ldr	r0, [pc, #64]	; (1034 <main+0x3ec>)
     ff4:	f7ff fc08 	bl	808 <am_devices_led_on>
        if (g_ui32SampleCount > i32BaseLevelCount)
     ff8:	e78c      	b.n	f14 <main+0x2cc>
     ffa:	bf00      	nop
     ffc:	00002dd0 	.word	0x00002dd0
    1000:	00002de8 	.word	0x00002de8
    1004:	00002c90 	.word	0x00002c90
    1008:	10004170 	.word	0x10004170
    100c:	10004176 	.word	0x10004176
    1010:	44800000 	.word	0x44800000
    1014:	42800000 	.word	0x42800000
    1018:	00002e14 	.word	0x00002e14
    101c:	10004174 	.word	0x10004174
    1020:	47800000 	.word	0x47800000
    1024:	00002e30 	.word	0x00002e30
    1028:	3fe66666 	.word	0x3fe66666
    102c:	42000000 	.word	0x42000000
    1030:	00002e48 	.word	0x00002e48
    1034:	10004024 	.word	0x10004024

00001038 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    1038:	4811      	ldr	r0, [pc, #68]	; (1080 <zero_loop+0x12>)
    103a:	4912      	ldr	r1, [pc, #72]	; (1084 <zero_loop+0x16>)
    103c:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    103e:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    1042:	4811      	ldr	r0, [pc, #68]	; (1088 <zero_loop+0x1a>)
    1044:	6801      	ldr	r1, [r0, #0]
    1046:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    104a:	6001      	str	r1, [r0, #0]
    104c:	f3bf 8f4f 	dsb	sy
    1050:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    1054:	480d      	ldr	r0, [pc, #52]	; (108c <zero_loop+0x1e>)
    1056:	490e      	ldr	r1, [pc, #56]	; (1090 <zero_loop+0x22>)
    1058:	4a0e      	ldr	r2, [pc, #56]	; (1094 <zero_loop+0x26>)

0000105a <copy_loop>:
    105a:	f850 3b04 	ldr.w	r3, [r0], #4
    105e:	f841 3b04 	str.w	r3, [r1], #4
    1062:	4291      	cmp	r1, r2
    1064:	dbf9      	blt.n	105a <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    1066:	480c      	ldr	r0, [pc, #48]	; (1098 <zero_loop+0x2a>)
    1068:	490c      	ldr	r1, [pc, #48]	; (109c <zero_loop+0x2e>)
    106a:	f04f 0200 	mov.w	r2, #0

0000106e <zero_loop>:
    106e:	4288      	cmp	r0, r1
    1070:	bfb8      	it	lt
    1072:	f840 2b04 	strlt.w	r2, [r0], #4
    1076:	dbfa      	blt.n	106e <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    1078:	f7ff fde6 	bl	c48 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    107c:	be00      	bkpt	0x0000
}
    107e:	bf00      	nop
    1080:	e000ed08 	.word	0xe000ed08
    1084:	00000000 	.word	0x00000000
    1088:	e000ed88 	.word	0xe000ed88
    108c:	00002f54 	.word	0x00002f54
    1090:	10004000 	.word	0x10004000
    1094:	1000404c 	.word	0x1000404c
    1098:	1000404c 	.word	0x1000404c
    109c:	1000417c 	.word	0x1000417c

000010a0 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
    10a0:	b480      	push	{r7}
    10a2:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    10a4:	e7fe      	b.n	10a4 <am_nmi_isr+0x4>

000010a6 <am_brownout_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    10a6:	b480      	push	{r7}
    10a8:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    10aa:	e7fe      	b.n	10aa <am_brownout_isr+0x4>

000010ac <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
    10ac:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
    10ae:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
    10b0:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    10b2:	f000 f809 	bl	10c8 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
    10b6:	bd01      	pop	{r0, pc}
}
    10b8:	bf00      	nop
    10ba:	4618      	mov	r0, r3

000010bc <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    10bc:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    10be:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    10c0:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    10c2:	4770      	bx	lr
}
    10c4:	bf00      	nop
    10c6:	4618      	mov	r0, r3

000010c8 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    10c8:	b580      	push	{r7, lr}
    10ca:	b096      	sub	sp, #88	; 0x58
    10cc:	af00      	add	r7, sp, #0
    10ce:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    10d0:	f107 030c 	add.w	r3, r7, #12
    10d4:	2200      	movs	r2, #0
    10d6:	601a      	str	r2, [r3, #0]
    10d8:	605a      	str	r2, [r3, #4]
    10da:	609a      	str	r2, [r3, #8]
    10dc:	60da      	str	r2, [r3, #12]
    10de:	611a      	str	r2, [r3, #16]
    10e0:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    10e2:	2300      	movs	r3, #0
    10e4:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    10e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    10e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    10ea:	4b2e      	ldr	r3, [pc, #184]	; (11a4 <am_util_faultisr_collect_data+0xdc>)
    10ec:	681b      	ldr	r3, [r3, #0]
    10ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    10f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    10f2:	b2db      	uxtb	r3, r3
    10f4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    10f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    10fa:	0a1b      	lsrs	r3, r3, #8
    10fc:	b2db      	uxtb	r3, r3
    10fe:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    1102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1104:	0c1b      	lsrs	r3, r3, #16
    1106:	b29b      	uxth	r3, r3
    1108:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    110c:	4b26      	ldr	r3, [pc, #152]	; (11a8 <am_util_faultisr_collect_data+0xe0>)
    110e:	681b      	ldr	r3, [r3, #0]
    1110:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    1112:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    1116:	b2db      	uxtb	r3, r3
    1118:	f003 0302 	and.w	r3, r3, #2
    111c:	2b00      	cmp	r3, #0
    111e:	d005      	beq.n	112c <am_util_faultisr_collect_data+0x64>
    1120:	6879      	ldr	r1, [r7, #4]
    1122:	2006      	movs	r0, #6
    1124:	f7ff ffca 	bl	10bc <getStackedReg>
    1128:	4603      	mov	r3, r0
    112a:	e001      	b.n	1130 <am_util_faultisr_collect_data+0x68>
    112c:	f04f 33ff 	mov.w	r3, #4294967295
    1130:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    1132:	6879      	ldr	r1, [r7, #4]
    1134:	2000      	movs	r0, #0
    1136:	f7ff ffc1 	bl	10bc <getStackedReg>
    113a:	4603      	mov	r3, r0
    113c:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    113e:	6879      	ldr	r1, [r7, #4]
    1140:	2001      	movs	r0, #1
    1142:	f7ff ffbb 	bl	10bc <getStackedReg>
    1146:	4603      	mov	r3, r0
    1148:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    114a:	6879      	ldr	r1, [r7, #4]
    114c:	2002      	movs	r0, #2
    114e:	f7ff ffb5 	bl	10bc <getStackedReg>
    1152:	4603      	mov	r3, r0
    1154:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    1156:	6879      	ldr	r1, [r7, #4]
    1158:	2003      	movs	r0, #3
    115a:	f7ff ffaf 	bl	10bc <getStackedReg>
    115e:	4603      	mov	r3, r0
    1160:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    1162:	6879      	ldr	r1, [r7, #4]
    1164:	2004      	movs	r0, #4
    1166:	f7ff ffa9 	bl	10bc <getStackedReg>
    116a:	4603      	mov	r3, r0
    116c:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    116e:	6879      	ldr	r1, [r7, #4]
    1170:	2005      	movs	r0, #5
    1172:	f7ff ffa3 	bl	10bc <getStackedReg>
    1176:	4603      	mov	r3, r0
    1178:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    117a:	6879      	ldr	r1, [r7, #4]
    117c:	2006      	movs	r0, #6
    117e:	f7ff ff9d 	bl	10bc <getStackedReg>
    1182:	4603      	mov	r3, r0
    1184:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    1186:	6879      	ldr	r1, [r7, #4]
    1188:	2007      	movs	r0, #7
    118a:	f7ff ff97 	bl	10bc <getStackedReg>
    118e:	4603      	mov	r3, r0
    1190:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
    1192:	f107 030c 	add.w	r3, r7, #12
    1196:	4618      	mov	r0, r3
    1198:	f001 fa52 	bl	2640 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
    119c:	2300      	movs	r3, #0
    119e:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    11a0:	e7fe      	b.n	11a0 <am_util_faultisr_collect_data+0xd8>
    11a2:	bf00      	nop
    11a4:	e000ed28 	.word	0xe000ed28
    11a8:	e000ed38 	.word	0xe000ed38

000011ac <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    11ac:	b480      	push	{r7}
    11ae:	b083      	sub	sp, #12
    11b0:	af00      	add	r7, sp, #0
    11b2:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    11b4:	4a04      	ldr	r2, [pc, #16]	; (11c8 <am_util_stdio_printf_init+0x1c>)
    11b6:	687b      	ldr	r3, [r7, #4]
    11b8:	6013      	str	r3, [r2, #0]
}
    11ba:	bf00      	nop
    11bc:	370c      	adds	r7, #12
    11be:	46bd      	mov	sp, r7
    11c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    11c4:	4770      	bx	lr
    11c6:	bf00      	nop
    11c8:	10004178 	.word	0x10004178

000011cc <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    11cc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    11d0:	b096      	sub	sp, #88	; 0x58
    11d2:	af00      	add	r7, sp, #0
    11d4:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    11d8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    11dc:	0025      	movs	r5, r4
    11de:	2600      	movs	r6, #0
    11e0:	ea55 0306 	orrs.w	r3, r5, r6
    11e4:	f000 80a0 	beq.w	1328 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    11e8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    11ec:	0862      	lsrs	r2, r4, #1
    11ee:	ea4f 0133 	mov.w	r1, r3, rrx
    11f2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    11f6:	ea4f 0893 	mov.w	r8, r3, lsr #2
    11fa:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
    11fe:	ea4f 0994 	mov.w	r9, r4, lsr #2
    1202:	eb11 0308 	adds.w	r3, r1, r8
    1206:	eb42 0409 	adc.w	r4, r2, r9
    120a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
    120e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    1212:	ea4f 1a13 	mov.w	sl, r3, lsr #4
    1216:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
    121a:	ea4f 1b14 	mov.w	fp, r4, lsr #4
    121e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    1222:	eb13 030a 	adds.w	r3, r3, sl
    1226:	eb44 040b 	adc.w	r4, r4, fp
    122a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
    122e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    1232:	0a1a      	lsrs	r2, r3, #8
    1234:	62ba      	str	r2, [r7, #40]	; 0x28
    1236:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1238:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    123c:	62ba      	str	r2, [r7, #40]	; 0x28
    123e:	0a23      	lsrs	r3, r4, #8
    1240:	62fb      	str	r3, [r7, #44]	; 0x2c
    1242:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    1246:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
    124a:	18c9      	adds	r1, r1, r3
    124c:	eb42 0204 	adc.w	r2, r2, r4
    1250:	460b      	mov	r3, r1
    1252:	4614      	mov	r4, r2
    1254:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
    1258:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    125c:	0c1a      	lsrs	r2, r3, #16
    125e:	623a      	str	r2, [r7, #32]
    1260:	6a3a      	ldr	r2, [r7, #32]
    1262:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    1266:	623a      	str	r2, [r7, #32]
    1268:	0c23      	lsrs	r3, r4, #16
    126a:	627b      	str	r3, [r7, #36]	; 0x24
    126c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    1270:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
    1274:	18c9      	adds	r1, r1, r3
    1276:	eb42 0204 	adc.w	r2, r2, r4
    127a:	460b      	mov	r3, r1
    127c:	4614      	mov	r4, r2
    127e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
    1282:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    1286:	0023      	movs	r3, r4
    1288:	603b      	str	r3, [r7, #0]
    128a:	2300      	movs	r3, #0
    128c:	607b      	str	r3, [r7, #4]
    128e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    1292:	e897 0006 	ldmia.w	r7, {r1, r2}
    1296:	18c9      	adds	r1, r1, r3
    1298:	eb42 0204 	adc.w	r2, r2, r4
    129c:	460b      	mov	r3, r1
    129e:	4614      	mov	r4, r2
    12a0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
    12a4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    12a8:	08da      	lsrs	r2, r3, #3
    12aa:	613a      	str	r2, [r7, #16]
    12ac:	693a      	ldr	r2, [r7, #16]
    12ae:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
    12b2:	613a      	str	r2, [r7, #16]
    12b4:	08e3      	lsrs	r3, r4, #3
    12b6:	617b      	str	r3, [r7, #20]
    12b8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    12bc:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
    12c0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    12c4:	460b      	mov	r3, r1
    12c6:	4614      	mov	r4, r2
    12c8:	00a0      	lsls	r0, r4, #2
    12ca:	60f8      	str	r0, [r7, #12]
    12cc:	68f8      	ldr	r0, [r7, #12]
    12ce:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    12d2:	60f8      	str	r0, [r7, #12]
    12d4:	009b      	lsls	r3, r3, #2
    12d6:	60bb      	str	r3, [r7, #8]
    12d8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    12dc:	185b      	adds	r3, r3, r1
    12de:	eb44 0402 	adc.w	r4, r4, r2
    12e2:	18db      	adds	r3, r3, r3
    12e4:	eb44 0404 	adc.w	r4, r4, r4
    12e8:	4619      	mov	r1, r3
    12ea:	4622      	mov	r2, r4
    12ec:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    12f0:	1a5b      	subs	r3, r3, r1
    12f2:	eb64 0402 	sbc.w	r4, r4, r2
    12f6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
    12fa:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    12fe:	3306      	adds	r3, #6
    1300:	f144 0400 	adc.w	r4, r4, #0
    1304:	091a      	lsrs	r2, r3, #4
    1306:	61ba      	str	r2, [r7, #24]
    1308:	69ba      	ldr	r2, [r7, #24]
    130a:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
    130e:	61ba      	str	r2, [r7, #24]
    1310:	0923      	lsrs	r3, r4, #4
    1312:	61fb      	str	r3, [r7, #28]
    1314:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    1318:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    131c:	18c9      	adds	r1, r1, r3
    131e:	eb42 0204 	adc.w	r2, r2, r4
    1322:	460b      	mov	r3, r1
    1324:	4614      	mov	r4, r2
    1326:	e029      	b.n	137c <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    1328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    132a:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
    132c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    132e:	085a      	lsrs	r2, r3, #1
    1330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1332:	089b      	lsrs	r3, r3, #2
    1334:	4413      	add	r3, r2
    1336:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
    1338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    133a:	091b      	lsrs	r3, r3, #4
    133c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    133e:	4413      	add	r3, r2
    1340:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
    1342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1344:	0a1b      	lsrs	r3, r3, #8
    1346:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1348:	4413      	add	r3, r2
    134a:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
    134c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    134e:	0c1b      	lsrs	r3, r3, #16
    1350:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1352:	4413      	add	r3, r2
    1354:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
    1356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1358:	08db      	lsrs	r3, r3, #3
    135a:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
    135c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    135e:	4613      	mov	r3, r2
    1360:	009b      	lsls	r3, r3, #2
    1362:	4413      	add	r3, r2
    1364:	005b      	lsls	r3, r3, #1
    1366:	461a      	mov	r2, r3
    1368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    136a:	1a9b      	subs	r3, r3, r2
    136c:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    136e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1370:	3306      	adds	r3, #6
    1372:	091a      	lsrs	r2, r3, #4
    1374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1376:	4413      	add	r3, r2
    1378:	f04f 0400 	mov.w	r4, #0
    }
}
    137c:	4618      	mov	r0, r3
    137e:	4621      	mov	r1, r4
    1380:	3758      	adds	r7, #88	; 0x58
    1382:	46bd      	mov	sp, r7
    1384:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    1388:	4770      	bx	lr

0000138a <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    138a:	b590      	push	{r4, r7, lr}
    138c:	b085      	sub	sp, #20
    138e:	af00      	add	r7, sp, #0
    1390:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    1394:	683a      	ldr	r2, [r7, #0]
    1396:	687b      	ldr	r3, [r7, #4]
    1398:	4313      	orrs	r3, r2
    139a:	2b00      	cmp	r3, #0
    139c:	bf0c      	ite	eq
    139e:	2301      	moveq	r3, #1
    13a0:	2300      	movne	r3, #0
    13a2:	b2db      	uxtb	r3, r3
    13a4:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    13a6:	e008      	b.n	13ba <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    13a8:	e9d7 0100 	ldrd	r0, r1, [r7]
    13ac:	f7ff ff0e 	bl	11cc <divu64_10>
    13b0:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    13b4:	68fb      	ldr	r3, [r7, #12]
    13b6:	3301      	adds	r3, #1
    13b8:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    13ba:	e897 0018 	ldmia.w	r7, {r3, r4}
    13be:	4323      	orrs	r3, r4
    13c0:	d1f2      	bne.n	13a8 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    13c2:	68fb      	ldr	r3, [r7, #12]
}
    13c4:	4618      	mov	r0, r3
    13c6:	3714      	adds	r7, #20
    13c8:	46bd      	mov	sp, r7
    13ca:	bd90      	pop	{r4, r7, pc}

000013cc <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    13cc:	b590      	push	{r4, r7, lr}
    13ce:	b083      	sub	sp, #12
    13d0:	af00      	add	r7, sp, #0
    13d2:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    13d6:	e897 0018 	ldmia.w	r7, {r3, r4}
    13da:	2b00      	cmp	r3, #0
    13dc:	f174 0300 	sbcs.w	r3, r4, #0
    13e0:	da06      	bge.n	13f0 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    13e2:	e897 0018 	ldmia.w	r7, {r3, r4}
    13e6:	425b      	negs	r3, r3
    13e8:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    13ec:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
    13f0:	e897 0018 	ldmia.w	r7, {r3, r4}
    13f4:	4618      	mov	r0, r3
    13f6:	4621      	mov	r1, r4
    13f8:	f7ff ffc7 	bl	138a <ndigits_in_u64>
    13fc:	4603      	mov	r3, r0
}
    13fe:	4618      	mov	r0, r3
    1400:	370c      	adds	r7, #12
    1402:	46bd      	mov	sp, r7
    1404:	bd90      	pop	{r4, r7, pc}

00001406 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    1406:	b490      	push	{r4, r7}
    1408:	b084      	sub	sp, #16
    140a:	af00      	add	r7, sp, #0
    140c:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    1410:	6839      	ldr	r1, [r7, #0]
    1412:	687a      	ldr	r2, [r7, #4]
    1414:	430a      	orrs	r2, r1
    1416:	2a00      	cmp	r2, #0
    1418:	bf0c      	ite	eq
    141a:	2201      	moveq	r2, #1
    141c:	2200      	movne	r2, #0
    141e:	b2d2      	uxtb	r2, r2
    1420:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
    1422:	e00a      	b.n	143a <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
    1424:	e897 0006 	ldmia.w	r7, {r1, r2}
    1428:	090b      	lsrs	r3, r1, #4
    142a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    142e:	0914      	lsrs	r4, r2, #4
    1430:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
    1434:	68fa      	ldr	r2, [r7, #12]
    1436:	3201      	adds	r2, #1
    1438:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
    143a:	e897 0006 	ldmia.w	r7, {r1, r2}
    143e:	430a      	orrs	r2, r1
    1440:	d1f0      	bne.n	1424 <ndigits_in_hex+0x1e>
    }

    return iDigits;
    1442:	68fb      	ldr	r3, [r7, #12]
}
    1444:	4618      	mov	r0, r3
    1446:	3710      	adds	r7, #16
    1448:	46bd      	mov	sp, r7
    144a:	bc90      	pop	{r4, r7}
    144c:	4770      	bx	lr

0000144e <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    144e:	b480      	push	{r7}
    1450:	b087      	sub	sp, #28
    1452:	af00      	add	r7, sp, #0
    1454:	6078      	str	r0, [r7, #4]
    1456:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    1458:	2300      	movs	r3, #0
    145a:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    145c:	2300      	movs	r3, #0
    145e:	613b      	str	r3, [r7, #16]
    1460:	2300      	movs	r3, #0
    1462:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    1464:	687b      	ldr	r3, [r7, #4]
    1466:	781b      	ldrb	r3, [r3, #0]
    1468:	2b2d      	cmp	r3, #45	; 0x2d
    146a:	d11b      	bne.n	14a4 <decstr_to_int+0x56>
    {
        bNeg = true;
    146c:	2301      	movs	r3, #1
    146e:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    1470:	687b      	ldr	r3, [r7, #4]
    1472:	3301      	adds	r3, #1
    1474:	607b      	str	r3, [r7, #4]
        uCnt++;
    1476:	68fb      	ldr	r3, [r7, #12]
    1478:	3301      	adds	r3, #1
    147a:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    147c:	e012      	b.n	14a4 <decstr_to_int+0x56>
    {
        ++uCnt;
    147e:	68fb      	ldr	r3, [r7, #12]
    1480:	3301      	adds	r3, #1
    1482:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    1484:	693a      	ldr	r2, [r7, #16]
    1486:	4613      	mov	r3, r2
    1488:	009b      	lsls	r3, r3, #2
    148a:	4413      	add	r3, r2
    148c:	005b      	lsls	r3, r3, #1
    148e:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    1490:	687b      	ldr	r3, [r7, #4]
    1492:	781b      	ldrb	r3, [r3, #0]
    1494:	461a      	mov	r2, r3
    1496:	693b      	ldr	r3, [r7, #16]
    1498:	4413      	add	r3, r2
    149a:	3b30      	subs	r3, #48	; 0x30
    149c:	613b      	str	r3, [r7, #16]
        pcStr++;
    149e:	687b      	ldr	r3, [r7, #4]
    14a0:	3301      	adds	r3, #1
    14a2:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    14a4:	687b      	ldr	r3, [r7, #4]
    14a6:	781b      	ldrb	r3, [r3, #0]
    14a8:	2b2f      	cmp	r3, #47	; 0x2f
    14aa:	d903      	bls.n	14b4 <decstr_to_int+0x66>
    14ac:	687b      	ldr	r3, [r7, #4]
    14ae:	781b      	ldrb	r3, [r3, #0]
    14b0:	2b39      	cmp	r3, #57	; 0x39
    14b2:	d9e4      	bls.n	147e <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    14b4:	683b      	ldr	r3, [r7, #0]
    14b6:	2b00      	cmp	r3, #0
    14b8:	d002      	beq.n	14c0 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    14ba:	683b      	ldr	r3, [r7, #0]
    14bc:	68fa      	ldr	r2, [r7, #12]
    14be:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    14c0:	7dfb      	ldrb	r3, [r7, #23]
    14c2:	2b00      	cmp	r3, #0
    14c4:	d002      	beq.n	14cc <decstr_to_int+0x7e>
    14c6:	693b      	ldr	r3, [r7, #16]
    14c8:	425b      	negs	r3, r3
    14ca:	e000      	b.n	14ce <decstr_to_int+0x80>
    14cc:	693b      	ldr	r3, [r7, #16]
}
    14ce:	4618      	mov	r0, r3
    14d0:	371c      	adds	r7, #28
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr

000014da <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    14da:	b590      	push	{r4, r7, lr}
    14dc:	b091      	sub	sp, #68	; 0x44
    14de:	af00      	add	r7, sp, #0
    14e0:	e9c7 0102 	strd	r0, r1, [r7, #8]
    14e4:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    14e6:	2300      	movs	r3, #0
    14e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    14ea:	2300      	movs	r3, #0
    14ec:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    14ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    14f2:	f7ff fe6b 	bl	11cc <divu64_10>
    14f6:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    14fa:	68b9      	ldr	r1, [r7, #8]
    14fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    14fe:	4613      	mov	r3, r2
    1500:	009b      	lsls	r3, r3, #2
    1502:	4413      	add	r3, r2
    1504:	005b      	lsls	r3, r3, #1
    1506:	1acb      	subs	r3, r1, r3
    1508:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    150a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    150c:	1c5a      	adds	r2, r3, #1
    150e:	63fa      	str	r2, [r7, #60]	; 0x3c
    1510:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1512:	b2d2      	uxtb	r2, r2
    1514:	3230      	adds	r2, #48	; 0x30
    1516:	b2d2      	uxtb	r2, r2
    1518:	f107 0140 	add.w	r1, r7, #64	; 0x40
    151c:	440b      	add	r3, r1
    151e:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    1522:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    1526:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    152a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    152e:	4323      	orrs	r3, r4
    1530:	d1dd      	bne.n	14ee <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    1532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1534:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    1536:	687b      	ldr	r3, [r7, #4]
    1538:	2b00      	cmp	r3, #0
    153a:	d011      	beq.n	1560 <uint64_to_str+0x86>
    {
        while ( ix-- )
    153c:	e008      	b.n	1550 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    153e:	687b      	ldr	r3, [r7, #4]
    1540:	1c5a      	adds	r2, r3, #1
    1542:	607a      	str	r2, [r7, #4]
    1544:	f107 0110 	add.w	r1, r7, #16
    1548:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    154a:	440a      	add	r2, r1
    154c:	7812      	ldrb	r2, [r2, #0]
    154e:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    1550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1552:	1e5a      	subs	r2, r3, #1
    1554:	63fa      	str	r2, [r7, #60]	; 0x3c
    1556:	2b00      	cmp	r3, #0
    1558:	d1f1      	bne.n	153e <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    155a:	687b      	ldr	r3, [r7, #4]
    155c:	2200      	movs	r2, #0
    155e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    1560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    1562:	4618      	mov	r0, r3
    1564:	3744      	adds	r7, #68	; 0x44
    1566:	46bd      	mov	sp, r7
    1568:	bd90      	pop	{r4, r7, pc}

0000156a <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    156a:	b4b0      	push	{r4, r5, r7}
    156c:	b08d      	sub	sp, #52	; 0x34
    156e:	af00      	add	r7, sp, #0
    1570:	e9c7 0102 	strd	r0, r1, [r7, #8]
    1574:	607a      	str	r2, [r7, #4]
    1576:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    1578:	2300      	movs	r3, #0
    157a:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    157c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    1580:	4313      	orrs	r3, r2
    1582:	d131      	bne.n	15e8 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
    1584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1586:	1c5a      	adds	r2, r3, #1
    1588:	62fa      	str	r2, [r7, #44]	; 0x2c
    158a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    158e:	4413      	add	r3, r2
    1590:	2230      	movs	r2, #48	; 0x30
    1592:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    1596:	e027      	b.n	15e8 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
    1598:	7a3b      	ldrb	r3, [r7, #8]
    159a:	f003 030f 	and.w	r3, r3, #15
    159e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    15a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    15a6:	2b09      	cmp	r3, #9
    15a8:	d90a      	bls.n	15c0 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    15aa:	78fb      	ldrb	r3, [r7, #3]
    15ac:	2b00      	cmp	r3, #0
    15ae:	d001      	beq.n	15b4 <uint64_to_hexstr+0x4a>
    15b0:	2227      	movs	r2, #39	; 0x27
    15b2:	e000      	b.n	15b6 <uint64_to_hexstr+0x4c>
    15b4:	2207      	movs	r2, #7
    15b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    15ba:	4413      	add	r3, r2
    15bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    15c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    15c2:	1c5a      	adds	r2, r3, #1
    15c4:	62fa      	str	r2, [r7, #44]	; 0x2c
    15c6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    15ca:	3230      	adds	r2, #48	; 0x30
    15cc:	b2d2      	uxtb	r2, r2
    15ce:	f107 0130 	add.w	r1, r7, #48	; 0x30
    15d2:	440b      	add	r3, r1
    15d4:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    15d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    15dc:	0914      	lsrs	r4, r2, #4
    15de:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    15e2:	091d      	lsrs	r5, r3, #4
    15e4:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
    15e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    15ec:	4313      	orrs	r3, r2
    15ee:	d1d3      	bne.n	1598 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    15f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    15f2:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    15f4:	687b      	ldr	r3, [r7, #4]
    15f6:	2b00      	cmp	r3, #0
    15f8:	d011      	beq.n	161e <uint64_to_hexstr+0xb4>
    {
        while (ix--)
    15fa:	e008      	b.n	160e <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
    15fc:	687b      	ldr	r3, [r7, #4]
    15fe:	1c5a      	adds	r2, r3, #1
    1600:	607a      	str	r2, [r7, #4]
    1602:	f107 0110 	add.w	r1, r7, #16
    1606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1608:	440a      	add	r2, r1
    160a:	7812      	ldrb	r2, [r2, #0]
    160c:	701a      	strb	r2, [r3, #0]
        while (ix--)
    160e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1610:	1e5a      	subs	r2, r3, #1
    1612:	62fa      	str	r2, [r7, #44]	; 0x2c
    1614:	2b00      	cmp	r3, #0
    1616:	d1f1      	bne.n	15fc <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    1618:	687b      	ldr	r3, [r7, #4]
    161a:	2200      	movs	r2, #0
    161c:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    1620:	4618      	mov	r0, r3
    1622:	3734      	adds	r7, #52	; 0x34
    1624:	46bd      	mov	sp, r7
    1626:	bcb0      	pop	{r4, r5, r7}
    1628:	4770      	bx	lr

0000162a <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    162a:	b480      	push	{r7}
    162c:	b085      	sub	sp, #20
    162e:	af00      	add	r7, sp, #0
    1630:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    1632:	2300      	movs	r3, #0
    1634:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    1636:	687b      	ldr	r3, [r7, #4]
    1638:	2b00      	cmp	r3, #0
    163a:	d104      	bne.n	1646 <simple_strlen+0x1c>
    {
        return ui32RetVal;
    163c:	68fb      	ldr	r3, [r7, #12]
    163e:	e009      	b.n	1654 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    1640:	68fb      	ldr	r3, [r7, #12]
    1642:	3301      	adds	r3, #1
    1644:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    1646:	687b      	ldr	r3, [r7, #4]
    1648:	1c5a      	adds	r2, r3, #1
    164a:	607a      	str	r2, [r7, #4]
    164c:	781b      	ldrb	r3, [r3, #0]
    164e:	2b00      	cmp	r3, #0
    1650:	d1f6      	bne.n	1640 <simple_strlen+0x16>
    }
    return ui32RetVal;
    1652:	68fb      	ldr	r3, [r7, #12]
}
    1654:	4618      	mov	r0, r3
    1656:	3714      	adds	r7, #20
    1658:	46bd      	mov	sp, r7
    165a:	f85d 7b04 	ldr.w	r7, [sp], #4
    165e:	4770      	bx	lr

00001660 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    1660:	b480      	push	{r7}
    1662:	b087      	sub	sp, #28
    1664:	af00      	add	r7, sp, #0
    1666:	60f8      	str	r0, [r7, #12]
    1668:	460b      	mov	r3, r1
    166a:	607a      	str	r2, [r7, #4]
    166c:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    166e:	2300      	movs	r3, #0
    1670:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    1672:	687b      	ldr	r3, [r7, #4]
    1674:	2b00      	cmp	r3, #0
    1676:	dc0c      	bgt.n	1692 <padbuffer+0x32>
    {
        return i32Cnt;
    1678:	697b      	ldr	r3, [r7, #20]
    167a:	e010      	b.n	169e <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    167c:	68fb      	ldr	r3, [r7, #12]
    167e:	2b00      	cmp	r3, #0
    1680:	d004      	beq.n	168c <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    1682:	68fb      	ldr	r3, [r7, #12]
    1684:	1c5a      	adds	r2, r3, #1
    1686:	60fa      	str	r2, [r7, #12]
    1688:	7afa      	ldrb	r2, [r7, #11]
    168a:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    168c:	697b      	ldr	r3, [r7, #20]
    168e:	3301      	adds	r3, #1
    1690:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    1692:	687b      	ldr	r3, [r7, #4]
    1694:	1e5a      	subs	r2, r3, #1
    1696:	607a      	str	r2, [r7, #4]
    1698:	2b00      	cmp	r3, #0
    169a:	d1ef      	bne.n	167c <padbuffer+0x1c>
    }

    return i32Cnt;
    169c:	697b      	ldr	r3, [r7, #20]
}
    169e:	4618      	mov	r0, r3
    16a0:	371c      	adds	r7, #28
    16a2:	46bd      	mov	sp, r7
    16a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    16a8:	4770      	bx	lr
	...

000016ac <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    16ac:	b590      	push	{r4, r7, lr}
    16ae:	b08f      	sub	sp, #60	; 0x3c
    16b0:	af00      	add	r7, sp, #0
    16b2:	60f8      	str	r0, [r7, #12]
    16b4:	60b9      	str	r1, [r7, #8]
    16b6:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    16b8:	68bb      	ldr	r3, [r7, #8]
    16ba:	681b      	ldr	r3, [r3, #0]
    16bc:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    16be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    16c0:	2b03      	cmp	r3, #3
    16c2:	dc02      	bgt.n	16ca <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    16c4:	f06f 0302 	mvn.w	r3, #2
    16c8:	e0e7      	b.n	189a <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
    16ca:	edd7 7a03 	vldr	s15, [r7, #12]
    16ce:	eef5 7a40 	vcmp.f32	s15, #0.0
    16d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    16d6:	d104      	bne.n	16e2 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    16d8:	68bb      	ldr	r3, [r7, #8]
    16da:	4a72      	ldr	r2, [pc, #456]	; (18a4 <ftoa+0x1f8>)
    16dc:	601a      	str	r2, [r3, #0]
        return 3;
    16de:	2303      	movs	r3, #3
    16e0:	e0db      	b.n	189a <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
    16e2:	68bb      	ldr	r3, [r7, #8]
    16e4:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    16e6:	68fb      	ldr	r3, [r7, #12]
    16e8:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    16ea:	693b      	ldr	r3, [r7, #16]
    16ec:	15db      	asrs	r3, r3, #23
    16ee:	b2db      	uxtb	r3, r3
    16f0:	3b7f      	subs	r3, #127	; 0x7f
    16f2:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    16f4:	693b      	ldr	r3, [r7, #16]
    16f6:	f3c3 0316 	ubfx	r3, r3, #0, #23
    16fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    16fe:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    1700:	2300      	movs	r3, #0
    1702:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    1704:	2300      	movs	r3, #0
    1706:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    1708:	69fb      	ldr	r3, [r7, #28]
    170a:	2b1e      	cmp	r3, #30
    170c:	dd02      	ble.n	1714 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    170e:	f06f 0301 	mvn.w	r3, #1
    1712:	e0c2      	b.n	189a <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
    1714:	69fb      	ldr	r3, [r7, #28]
    1716:	f113 0f17 	cmn.w	r3, #23
    171a:	da02      	bge.n	1722 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    171c:	f04f 33ff 	mov.w	r3, #4294967295
    1720:	e0bb      	b.n	189a <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
    1722:	69fb      	ldr	r3, [r7, #28]
    1724:	2b16      	cmp	r3, #22
    1726:	dd06      	ble.n	1736 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    1728:	69fb      	ldr	r3, [r7, #28]
    172a:	3b17      	subs	r3, #23
    172c:	69ba      	ldr	r2, [r7, #24]
    172e:	fa02 f303 	lsl.w	r3, r2, r3
    1732:	637b      	str	r3, [r7, #52]	; 0x34
    1734:	e01a      	b.n	176c <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    1736:	69fb      	ldr	r3, [r7, #28]
    1738:	2b00      	cmp	r3, #0
    173a:	db0f      	blt.n	175c <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    173c:	69fb      	ldr	r3, [r7, #28]
    173e:	f1c3 0317 	rsb	r3, r3, #23
    1742:	69ba      	ldr	r2, [r7, #24]
    1744:	fa42 f303 	asr.w	r3, r2, r3
    1748:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    174a:	69fb      	ldr	r3, [r7, #28]
    174c:	3301      	adds	r3, #1
    174e:	69ba      	ldr	r2, [r7, #24]
    1750:	fa02 f303 	lsl.w	r3, r2, r3
    1754:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1758:	633b      	str	r3, [r7, #48]	; 0x30
    175a:	e007      	b.n	176c <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    175c:	69bb      	ldr	r3, [r7, #24]
    175e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    1762:	69fb      	ldr	r3, [r7, #28]
    1764:	43db      	mvns	r3, r3
    1766:	fa42 f303 	asr.w	r3, r2, r3
    176a:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    176c:	693b      	ldr	r3, [r7, #16]
    176e:	2b00      	cmp	r3, #0
    1770:	da04      	bge.n	177c <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    1772:	68bb      	ldr	r3, [r7, #8]
    1774:	1c5a      	adds	r2, r3, #1
    1776:	60ba      	str	r2, [r7, #8]
    1778:	222d      	movs	r2, #45	; 0x2d
    177a:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    177c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    177e:	2b00      	cmp	r3, #0
    1780:	d105      	bne.n	178e <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    1782:	68bb      	ldr	r3, [r7, #8]
    1784:	1c5a      	adds	r2, r3, #1
    1786:	60ba      	str	r2, [r7, #8]
    1788:	2230      	movs	r2, #48	; 0x30
    178a:	701a      	strb	r2, [r3, #0]
    178c:	e021      	b.n	17d2 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    178e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1790:	2b00      	cmp	r3, #0
    1792:	dd08      	ble.n	17a6 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    1794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1796:	ea4f 74e3 	mov.w	r4, r3, asr #31
    179a:	68ba      	ldr	r2, [r7, #8]
    179c:	4618      	mov	r0, r3
    179e:	4621      	mov	r1, r4
    17a0:	f7ff fe9b 	bl	14da <uint64_to_str>
    17a4:	e011      	b.n	17ca <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    17a6:	68bb      	ldr	r3, [r7, #8]
    17a8:	1c5a      	adds	r2, r3, #1
    17aa:	60ba      	str	r2, [r7, #8]
    17ac:	222d      	movs	r2, #45	; 0x2d
    17ae:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    17b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    17b2:	425b      	negs	r3, r3
    17b4:	ea4f 74e3 	mov.w	r4, r3, asr #31
    17b8:	68ba      	ldr	r2, [r7, #8]
    17ba:	4618      	mov	r0, r3
    17bc:	4621      	mov	r1, r4
    17be:	f7ff fe8c 	bl	14da <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    17c2:	e002      	b.n	17ca <ftoa+0x11e>
        {
            pcBuf++;
    17c4:	68bb      	ldr	r3, [r7, #8]
    17c6:	3301      	adds	r3, #1
    17c8:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    17ca:	68bb      	ldr	r3, [r7, #8]
    17cc:	781b      	ldrb	r3, [r3, #0]
    17ce:	2b00      	cmp	r3, #0
    17d0:	d1f8      	bne.n	17c4 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    17d2:	68bb      	ldr	r3, [r7, #8]
    17d4:	1c5a      	adds	r2, r3, #1
    17d6:	60ba      	str	r2, [r7, #8]
    17d8:	222e      	movs	r2, #46	; 0x2e
    17da:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    17dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    17de:	2b00      	cmp	r3, #0
    17e0:	d105      	bne.n	17ee <ftoa+0x142>
    {
        *pcBuf++ = '0';
    17e2:	68bb      	ldr	r3, [r7, #8]
    17e4:	1c5a      	adds	r2, r3, #1
    17e6:	60ba      	str	r2, [r7, #8]
    17e8:	2230      	movs	r2, #48	; 0x30
    17ea:	701a      	strb	r2, [r3, #0]
    17ec:	e04f      	b.n	188e <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    17ee:	68ba      	ldr	r2, [r7, #8]
    17f0:	6a3b      	ldr	r3, [r7, #32]
    17f2:	1ad3      	subs	r3, r2, r3
    17f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    17f6:	1ad3      	subs	r3, r2, r3
    17f8:	3b01      	subs	r3, #1
    17fa:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    17fc:	697a      	ldr	r2, [r7, #20]
    17fe:	687b      	ldr	r3, [r7, #4]
    1800:	4293      	cmp	r3, r2
    1802:	bfa8      	it	ge
    1804:	4613      	movge	r3, r2
    1806:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    1808:	2300      	movs	r3, #0
    180a:	62bb      	str	r3, [r7, #40]	; 0x28
    180c:	e015      	b.n	183a <ftoa+0x18e>
        {
            i32FracPart *= 10;
    180e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1810:	4613      	mov	r3, r2
    1812:	009b      	lsls	r3, r3, #2
    1814:	4413      	add	r3, r2
    1816:	005b      	lsls	r3, r3, #1
    1818:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    181a:	68bb      	ldr	r3, [r7, #8]
    181c:	1c5a      	adds	r2, r3, #1
    181e:	60ba      	str	r2, [r7, #8]
    1820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1822:	1612      	asrs	r2, r2, #24
    1824:	b2d2      	uxtb	r2, r2
    1826:	3230      	adds	r2, #48	; 0x30
    1828:	b2d2      	uxtb	r2, r2
    182a:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    182c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    182e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1832:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    1834:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1836:	3301      	adds	r3, #1
    1838:	62bb      	str	r3, [r7, #40]	; 0x28
    183a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    183c:	697b      	ldr	r3, [r7, #20]
    183e:	429a      	cmp	r2, r3
    1840:	dbe5      	blt.n	180e <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    1842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1844:	4613      	mov	r3, r2
    1846:	009b      	lsls	r3, r3, #2
    1848:	4413      	add	r3, r2
    184a:	005b      	lsls	r3, r3, #1
    184c:	161b      	asrs	r3, r3, #24
    184e:	2b04      	cmp	r3, #4
    1850:	dd1d      	ble.n	188e <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    1852:	68bb      	ldr	r3, [r7, #8]
    1854:	3b01      	subs	r3, #1
    1856:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    1858:	e015      	b.n	1886 <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
    185a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    185c:	781b      	ldrb	r3, [r3, #0]
    185e:	2b2e      	cmp	r3, #46	; 0x2e
    1860:	d00e      	beq.n	1880 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
    1862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1864:	781b      	ldrb	r3, [r3, #0]
    1866:	2b39      	cmp	r3, #57	; 0x39
    1868:	d103      	bne.n	1872 <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
    186a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    186c:	2230      	movs	r2, #48	; 0x30
    186e:	701a      	strb	r2, [r3, #0]
    1870:	e006      	b.n	1880 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
    1872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1874:	781b      	ldrb	r3, [r3, #0]
    1876:	3301      	adds	r3, #1
    1878:	b2da      	uxtb	r2, r3
    187a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    187c:	701a      	strb	r2, [r3, #0]
                    break;
    187e:	e006      	b.n	188e <ftoa+0x1e2>
                }
                pcBuftmp--;
    1880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1882:	3b01      	subs	r3, #1
    1884:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    1886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1888:	6a3b      	ldr	r3, [r7, #32]
    188a:	429a      	cmp	r2, r3
    188c:	d2e5      	bcs.n	185a <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    188e:	68bb      	ldr	r3, [r7, #8]
    1890:	2200      	movs	r2, #0
    1892:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    1894:	68ba      	ldr	r2, [r7, #8]
    1896:	6a3b      	ldr	r3, [r7, #32]
    1898:	1ad3      	subs	r3, r2, r3
} // ftoa()
    189a:	4618      	mov	r0, r3
    189c:	373c      	adds	r7, #60	; 0x3c
    189e:	46bd      	mov	sp, r7
    18a0:	bd90      	pop	{r4, r7, pc}
    18a2:	bf00      	nop
    18a4:	00302e30 	.word	0x00302e30

000018a8 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    18a8:	b590      	push	{r4, r7, lr}
    18aa:	b095      	sub	sp, #84	; 0x54
    18ac:	af00      	add	r7, sp, #0
    18ae:	60f8      	str	r0, [r7, #12]
    18b0:	60b9      	str	r1, [r7, #8]
    18b2:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    18b4:	2300      	movs	r3, #0
    18b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    18b8:	2300      	movs	r3, #0
    18ba:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    18bc:	e2e3      	b.n	1e86 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    18be:	2306      	movs	r3, #6
    18c0:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    18c2:	68bb      	ldr	r3, [r7, #8]
    18c4:	781b      	ldrb	r3, [r3, #0]
    18c6:	2b25      	cmp	r3, #37	; 0x25
    18c8:	d01f      	beq.n	190a <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    18ca:	68fb      	ldr	r3, [r7, #12]
    18cc:	2b00      	cmp	r3, #0
    18ce:	d015      	beq.n	18fc <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    18d0:	68bb      	ldr	r3, [r7, #8]
    18d2:	781b      	ldrb	r3, [r3, #0]
    18d4:	2b0a      	cmp	r3, #10
    18d6:	d10b      	bne.n	18f0 <am_util_stdio_vsprintf+0x48>
    18d8:	4bb1      	ldr	r3, [pc, #708]	; (1ba0 <am_util_stdio_vsprintf+0x2f8>)
    18da:	781b      	ldrb	r3, [r3, #0]
    18dc:	2b00      	cmp	r3, #0
    18de:	d007      	beq.n	18f0 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    18e0:	68fb      	ldr	r3, [r7, #12]
    18e2:	1c5a      	adds	r2, r3, #1
    18e4:	60fa      	str	r2, [r7, #12]
    18e6:	220d      	movs	r2, #13
    18e8:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    18ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    18ec:	3301      	adds	r3, #1
    18ee:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    18f0:	68fb      	ldr	r3, [r7, #12]
    18f2:	1c5a      	adds	r2, r3, #1
    18f4:	60fa      	str	r2, [r7, #12]
    18f6:	68ba      	ldr	r2, [r7, #8]
    18f8:	7812      	ldrb	r2, [r2, #0]
    18fa:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    18fc:	68bb      	ldr	r3, [r7, #8]
    18fe:	3301      	adds	r3, #1
    1900:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    1902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1904:	3301      	adds	r3, #1
    1906:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    1908:	e2bd      	b.n	1e86 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    190a:	68bb      	ldr	r3, [r7, #8]
    190c:	3301      	adds	r3, #1
    190e:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    1910:	2300      	movs	r3, #0
    1912:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    1916:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    191a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    191e:	2320      	movs	r3, #32
    1920:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    1924:	68bb      	ldr	r3, [r7, #8]
    1926:	781b      	ldrb	r3, [r3, #0]
    1928:	2b30      	cmp	r3, #48	; 0x30
    192a:	d105      	bne.n	1938 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    192c:	2330      	movs	r3, #48	; 0x30
    192e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    1932:	68bb      	ldr	r3, [r7, #8]
    1934:	3301      	adds	r3, #1
    1936:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    1938:	f107 0310 	add.w	r3, r7, #16
    193c:	4619      	mov	r1, r3
    193e:	68b8      	ldr	r0, [r7, #8]
    1940:	f7ff fd85 	bl	144e <decstr_to_int>
    1944:	4603      	mov	r3, r0
    1946:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    1948:	693b      	ldr	r3, [r7, #16]
    194a:	68ba      	ldr	r2, [r7, #8]
    194c:	4413      	add	r3, r2
    194e:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    1950:	68bb      	ldr	r3, [r7, #8]
    1952:	781b      	ldrb	r3, [r3, #0]
    1954:	2b73      	cmp	r3, #115	; 0x73
    1956:	d005      	beq.n	1964 <am_util_stdio_vsprintf+0xbc>
    1958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    195a:	2b00      	cmp	r3, #0
    195c:	da02      	bge.n	1964 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    195e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1960:	425b      	negs	r3, r3
    1962:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    1964:	68bb      	ldr	r3, [r7, #8]
    1966:	781b      	ldrb	r3, [r3, #0]
    1968:	2b2e      	cmp	r3, #46	; 0x2e
    196a:	d10e      	bne.n	198a <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    196c:	68bb      	ldr	r3, [r7, #8]
    196e:	3301      	adds	r3, #1
    1970:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    1972:	f107 0310 	add.w	r3, r7, #16
    1976:	4619      	mov	r1, r3
    1978:	68b8      	ldr	r0, [r7, #8]
    197a:	f7ff fd68 	bl	144e <decstr_to_int>
    197e:	4603      	mov	r3, r0
    1980:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    1982:	693b      	ldr	r3, [r7, #16]
    1984:	68ba      	ldr	r2, [r7, #8]
    1986:	4413      	add	r3, r2
    1988:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    198a:	68bb      	ldr	r3, [r7, #8]
    198c:	781b      	ldrb	r3, [r3, #0]
    198e:	2b6c      	cmp	r3, #108	; 0x6c
    1990:	d10c      	bne.n	19ac <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    1992:	68bb      	ldr	r3, [r7, #8]
    1994:	3301      	adds	r3, #1
    1996:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    1998:	68bb      	ldr	r3, [r7, #8]
    199a:	781b      	ldrb	r3, [r3, #0]
    199c:	2b6c      	cmp	r3, #108	; 0x6c
    199e:	d105      	bne.n	19ac <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    19a0:	68bb      	ldr	r3, [r7, #8]
    19a2:	3301      	adds	r3, #1
    19a4:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    19a6:	2301      	movs	r3, #1
    19a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    19ac:	68bb      	ldr	r3, [r7, #8]
    19ae:	781b      	ldrb	r3, [r3, #0]
    19b0:	3b46      	subs	r3, #70	; 0x46
    19b2:	2b32      	cmp	r3, #50	; 0x32
    19b4:	f200 8254 	bhi.w	1e60 <am_util_stdio_vsprintf+0x5b8>
    19b8:	a201      	add	r2, pc, #4	; (adr r2, 19c0 <am_util_stdio_vsprintf+0x118>)
    19ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    19be:	bf00      	nop
    19c0:	00001deb 	.word	0x00001deb
    19c4:	00001e61 	.word	0x00001e61
    19c8:	00001e61 	.word	0x00001e61
    19cc:	00001e61 	.word	0x00001e61
    19d0:	00001e61 	.word	0x00001e61
    19d4:	00001e61 	.word	0x00001e61
    19d8:	00001e61 	.word	0x00001e61
    19dc:	00001e61 	.word	0x00001e61
    19e0:	00001e61 	.word	0x00001e61
    19e4:	00001e61 	.word	0x00001e61
    19e8:	00001e61 	.word	0x00001e61
    19ec:	00001e61 	.word	0x00001e61
    19f0:	00001e61 	.word	0x00001e61
    19f4:	00001e61 	.word	0x00001e61
    19f8:	00001e61 	.word	0x00001e61
    19fc:	00001e61 	.word	0x00001e61
    1a00:	00001e61 	.word	0x00001e61
    1a04:	00001e61 	.word	0x00001e61
    1a08:	00001b87 	.word	0x00001b87
    1a0c:	00001e61 	.word	0x00001e61
    1a10:	00001e61 	.word	0x00001e61
    1a14:	00001e61 	.word	0x00001e61
    1a18:	00001e61 	.word	0x00001e61
    1a1c:	00001e61 	.word	0x00001e61
    1a20:	00001e61 	.word	0x00001e61
    1a24:	00001e61 	.word	0x00001e61
    1a28:	00001e61 	.word	0x00001e61
    1a2c:	00001e61 	.word	0x00001e61
    1a30:	00001e61 	.word	0x00001e61
    1a34:	00001a8d 	.word	0x00001a8d
    1a38:	00001cb3 	.word	0x00001cb3
    1a3c:	00001e61 	.word	0x00001e61
    1a40:	00001deb 	.word	0x00001deb
    1a44:	00001e61 	.word	0x00001e61
    1a48:	00001e61 	.word	0x00001e61
    1a4c:	00001cb3 	.word	0x00001cb3
    1a50:	00001e61 	.word	0x00001e61
    1a54:	00001e61 	.word	0x00001e61
    1a58:	00001e61 	.word	0x00001e61
    1a5c:	00001e61 	.word	0x00001e61
    1a60:	00001e61 	.word	0x00001e61
    1a64:	00001e61 	.word	0x00001e61
    1a68:	00001e61 	.word	0x00001e61
    1a6c:	00001e61 	.word	0x00001e61
    1a70:	00001e61 	.word	0x00001e61
    1a74:	00001ab3 	.word	0x00001ab3
    1a78:	00001e61 	.word	0x00001e61
    1a7c:	00001c21 	.word	0x00001c21
    1a80:	00001e61 	.word	0x00001e61
    1a84:	00001e61 	.word	0x00001e61
    1a88:	00001b81 	.word	0x00001b81
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    1a8c:	687b      	ldr	r3, [r7, #4]
    1a8e:	1d1a      	adds	r2, r3, #4
    1a90:	607a      	str	r2, [r7, #4]
    1a92:	681b      	ldr	r3, [r3, #0]
    1a94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    1a98:	68fb      	ldr	r3, [r7, #12]
    1a9a:	2b00      	cmp	r3, #0
    1a9c:	d005      	beq.n	1aaa <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    1a9e:	68fb      	ldr	r3, [r7, #12]
    1aa0:	1c5a      	adds	r2, r3, #1
    1aa2:	60fa      	str	r2, [r7, #12]
    1aa4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    1aa8:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    1aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1aac:	3301      	adds	r3, #1
    1aae:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1ab0:	e1e6      	b.n	1e80 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    1ab2:	687b      	ldr	r3, [r7, #4]
    1ab4:	1d1a      	adds	r2, r3, #4
    1ab6:	607a      	str	r2, [r7, #4]
    1ab8:	681b      	ldr	r3, [r3, #0]
    1aba:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    1abc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    1abe:	f7ff fdb4 	bl	162a <simple_strlen>
    1ac2:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    1ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1ac6:	2b00      	cmp	r3, #0
    1ac8:	dd2e      	ble.n	1b28 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    1aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1ace:	429a      	cmp	r2, r3
    1ad0:	d22a      	bcs.n	1b28 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1ad2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1ad6:	1ad3      	subs	r3, r2, r3
    1ad8:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1ada:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1ade:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1ae0:	4619      	mov	r1, r3
    1ae2:	68f8      	ldr	r0, [r7, #12]
    1ae4:	f7ff fdbc 	bl	1660 <padbuffer>
    1ae8:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    1aea:	68fb      	ldr	r3, [r7, #12]
    1aec:	2b00      	cmp	r3, #0
    1aee:	d001      	beq.n	1af4 <am_util_stdio_vsprintf+0x24c>
    1af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1af2:	e000      	b.n	1af6 <am_util_stdio_vsprintf+0x24e>
    1af4:	2300      	movs	r3, #0
    1af6:	68fa      	ldr	r2, [r7, #12]
    1af8:	4413      	add	r3, r2
    1afa:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    1afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1afe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1b00:	4413      	add	r3, r2
    1b02:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1b04:	2300      	movs	r3, #0
    1b06:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    1b08:	e00e      	b.n	1b28 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    1b0a:	68fb      	ldr	r3, [r7, #12]
    1b0c:	2b00      	cmp	r3, #0
    1b0e:	d005      	beq.n	1b1c <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    1b10:	68fb      	ldr	r3, [r7, #12]
    1b12:	1c5a      	adds	r2, r3, #1
    1b14:	60fa      	str	r2, [r7, #12]
    1b16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1b18:	7812      	ldrb	r2, [r2, #0]
    1b1a:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    1b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1b1e:	3301      	adds	r3, #1
    1b20:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    1b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1b24:	3301      	adds	r3, #1
    1b26:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    1b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1b2a:	781b      	ldrb	r3, [r3, #0]
    1b2c:	2b00      	cmp	r3, #0
    1b2e:	d1ec      	bne.n	1b0a <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    1b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1b32:	2b00      	cmp	r3, #0
    1b34:	f000 81a1 	beq.w	1e7a <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    1b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1b3a:	425b      	negs	r3, r3
    1b3c:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    1b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1b42:	429a      	cmp	r2, r3
    1b44:	f080 8199 	bcs.w	1e7a <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1b48:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b4c:	1ad3      	subs	r3, r2, r3
    1b4e:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1b50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1b54:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1b56:	4619      	mov	r1, r3
    1b58:	68f8      	ldr	r0, [r7, #12]
    1b5a:	f7ff fd81 	bl	1660 <padbuffer>
    1b5e:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    1b60:	68fb      	ldr	r3, [r7, #12]
    1b62:	2b00      	cmp	r3, #0
    1b64:	d001      	beq.n	1b6a <am_util_stdio_vsprintf+0x2c2>
    1b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1b68:	e000      	b.n	1b6c <am_util_stdio_vsprintf+0x2c4>
    1b6a:	2300      	movs	r3, #0
    1b6c:	68fa      	ldr	r2, [r7, #12]
    1b6e:	4413      	add	r3, r2
    1b70:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    1b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1b74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1b76:	4413      	add	r3, r2
    1b78:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1b7a:	2300      	movs	r3, #0
    1b7c:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    1b7e:	e17c      	b.n	1e7a <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    1b80:	2301      	movs	r3, #1
    1b82:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1b86:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1b8a:	2b00      	cmp	r3, #0
    1b8c:	d00a      	beq.n	1ba4 <am_util_stdio_vsprintf+0x2fc>
    1b8e:	687b      	ldr	r3, [r7, #4]
    1b90:	3307      	adds	r3, #7
    1b92:	f023 0307 	bic.w	r3, r3, #7
    1b96:	f103 0208 	add.w	r2, r3, #8
    1b9a:	607a      	str	r2, [r7, #4]
    1b9c:	cb18      	ldmia	r3, {r3, r4}
    1b9e:	e007      	b.n	1bb0 <am_util_stdio_vsprintf+0x308>
    1ba0:	1000414c 	.word	0x1000414c
                                      va_arg(pArgs, uint32_t);
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	1d1a      	adds	r2, r3, #4
    1ba8:	607a      	str	r2, [r7, #4]
    1baa:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1bac:	f04f 0400 	mov.w	r4, #0
    1bb0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    1bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	d01e      	beq.n	1bf8 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    1bba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1bbe:	f7ff fc22 	bl	1406 <ndigits_in_hex>
    1bc2:	4602      	mov	r2, r0
    1bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1bc6:	1a9b      	subs	r3, r3, r2
    1bc8:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1bca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1bce:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1bd0:	4619      	mov	r1, r3
    1bd2:	68f8      	ldr	r0, [r7, #12]
    1bd4:	f7ff fd44 	bl	1660 <padbuffer>
    1bd8:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1bda:	68fb      	ldr	r3, [r7, #12]
    1bdc:	2b00      	cmp	r3, #0
    1bde:	d001      	beq.n	1be4 <am_util_stdio_vsprintf+0x33c>
    1be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1be2:	e000      	b.n	1be6 <am_util_stdio_vsprintf+0x33e>
    1be4:	2300      	movs	r3, #0
    1be6:	68fa      	ldr	r2, [r7, #12]
    1be8:	4413      	add	r3, r2
    1bea:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1bee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1bf0:	4413      	add	r3, r2
    1bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1bf4:	2300      	movs	r3, #0
    1bf6:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    1bf8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    1bfc:	68fa      	ldr	r2, [r7, #12]
    1bfe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1c02:	f7ff fcb2 	bl	156a <uint64_to_hexstr>
    1c06:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1c08:	68fb      	ldr	r3, [r7, #12]
    1c0a:	2b00      	cmp	r3, #0
    1c0c:	d003      	beq.n	1c16 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    1c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1c10:	68fa      	ldr	r2, [r7, #12]
    1c12:	4413      	add	r3, r2
    1c14:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1c18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1c1a:	4413      	add	r3, r2
    1c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1c1e:	e12f      	b.n	1e80 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1c20:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1c24:	2b00      	cmp	r3, #0
    1c26:	d008      	beq.n	1c3a <am_util_stdio_vsprintf+0x392>
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	3307      	adds	r3, #7
    1c2c:	f023 0307 	bic.w	r3, r3, #7
    1c30:	f103 0208 	add.w	r2, r3, #8
    1c34:	607a      	str	r2, [r7, #4]
    1c36:	cb18      	ldmia	r3, {r3, r4}
    1c38:	e005      	b.n	1c46 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    1c3a:	687b      	ldr	r3, [r7, #4]
    1c3c:	1d1a      	adds	r2, r3, #4
    1c3e:	607a      	str	r2, [r7, #4]
    1c40:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1c42:	f04f 0400 	mov.w	r4, #0
    1c46:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    1c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1c4c:	2b00      	cmp	r3, #0
    1c4e:	d01e      	beq.n	1c8e <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    1c50:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1c54:	f7ff fb99 	bl	138a <ndigits_in_u64>
    1c58:	4602      	mov	r2, r0
    1c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1c5c:	1a9b      	subs	r3, r3, r2
    1c5e:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1c60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1c64:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1c66:	4619      	mov	r1, r3
    1c68:	68f8      	ldr	r0, [r7, #12]
    1c6a:	f7ff fcf9 	bl	1660 <padbuffer>
    1c6e:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1c70:	68fb      	ldr	r3, [r7, #12]
    1c72:	2b00      	cmp	r3, #0
    1c74:	d001      	beq.n	1c7a <am_util_stdio_vsprintf+0x3d2>
    1c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1c78:	e000      	b.n	1c7c <am_util_stdio_vsprintf+0x3d4>
    1c7a:	2300      	movs	r3, #0
    1c7c:	68fa      	ldr	r2, [r7, #12]
    1c7e:	4413      	add	r3, r2
    1c80:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1c84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1c86:	4413      	add	r3, r2
    1c88:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1c8a:	2300      	movs	r3, #0
    1c8c:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1c8e:	68fa      	ldr	r2, [r7, #12]
    1c90:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1c94:	f7ff fc21 	bl	14da <uint64_to_str>
    1c98:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1c9a:	68fb      	ldr	r3, [r7, #12]
    1c9c:	2b00      	cmp	r3, #0
    1c9e:	d003      	beq.n	1ca8 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    1ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1ca2:	68fa      	ldr	r2, [r7, #12]
    1ca4:	4413      	add	r3, r2
    1ca6:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1caa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1cac:	4413      	add	r3, r2
    1cae:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1cb0:	e0e6      	b.n	1e80 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1cb2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1cb6:	2b00      	cmp	r3, #0
    1cb8:	d008      	beq.n	1ccc <am_util_stdio_vsprintf+0x424>
    1cba:	687b      	ldr	r3, [r7, #4]
    1cbc:	3307      	adds	r3, #7
    1cbe:	f023 0307 	bic.w	r3, r3, #7
    1cc2:	f103 0208 	add.w	r2, r3, #8
    1cc6:	607a      	str	r2, [r7, #4]
    1cc8:	cb18      	ldmia	r3, {r3, r4}
    1cca:	e005      	b.n	1cd8 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    1ccc:	687b      	ldr	r3, [r7, #4]
    1cce:	1d1a      	adds	r2, r3, #4
    1cd0:	607a      	str	r2, [r7, #4]
    1cd2:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1cd4:	ea4f 74e3 	mov.w	r4, r3, asr #31
    1cd8:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    1cdc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1ce0:	2b00      	cmp	r3, #0
    1ce2:	f174 0300 	sbcs.w	r3, r4, #0
    1ce6:	da0a      	bge.n	1cfe <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    1ce8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1cec:	425b      	negs	r3, r3
    1cee:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    1cf2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    1cf6:	2301      	movs	r3, #1
    1cf8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    1cfc:	e006      	b.n	1d0c <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    1cfe:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1d02:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    1d06:	2300      	movs	r3, #0
    1d08:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    1d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1d0e:	2b00      	cmp	r3, #0
    1d10:	d04a      	beq.n	1da8 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    1d12:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    1d16:	4618      	mov	r0, r3
    1d18:	4621      	mov	r1, r4
    1d1a:	f7ff fb57 	bl	13cc <ndigits_in_i64>
    1d1e:	4602      	mov	r2, r0
    1d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1d22:	1a9b      	subs	r3, r3, r2
    1d24:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    1d26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1d2a:	2b00      	cmp	r3, #0
    1d2c:	d011      	beq.n	1d52 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    1d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1d30:	3b01      	subs	r3, #1
    1d32:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    1d34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1d38:	2b30      	cmp	r3, #48	; 0x30
    1d3a:	d10a      	bne.n	1d52 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    1d3c:	68fb      	ldr	r3, [r7, #12]
    1d3e:	2b00      	cmp	r3, #0
    1d40:	d004      	beq.n	1d4c <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    1d42:	68fb      	ldr	r3, [r7, #12]
    1d44:	1c5a      	adds	r2, r3, #1
    1d46:	60fa      	str	r2, [r7, #12]
    1d48:	222d      	movs	r2, #45	; 0x2d
    1d4a:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    1d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1d4e:	3301      	adds	r3, #1
    1d50:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1d52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1d56:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1d58:	4619      	mov	r1, r3
    1d5a:	68f8      	ldr	r0, [r7, #12]
    1d5c:	f7ff fc80 	bl	1660 <padbuffer>
    1d60:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1d62:	68fb      	ldr	r3, [r7, #12]
    1d64:	2b00      	cmp	r3, #0
    1d66:	d001      	beq.n	1d6c <am_util_stdio_vsprintf+0x4c4>
    1d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1d6a:	e000      	b.n	1d6e <am_util_stdio_vsprintf+0x4c6>
    1d6c:	2300      	movs	r3, #0
    1d6e:	68fa      	ldr	r2, [r7, #12]
    1d70:	4413      	add	r3, r2
    1d72:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1d76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1d78:	4413      	add	r3, r2
    1d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1d7c:	2300      	movs	r3, #0
    1d7e:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    1d80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1d84:	2b00      	cmp	r3, #0
    1d86:	d01e      	beq.n	1dc6 <am_util_stdio_vsprintf+0x51e>
    1d88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1d8c:	2b20      	cmp	r3, #32
    1d8e:	d11a      	bne.n	1dc6 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    1d90:	68fb      	ldr	r3, [r7, #12]
    1d92:	2b00      	cmp	r3, #0
    1d94:	d004      	beq.n	1da0 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    1d96:	68fb      	ldr	r3, [r7, #12]
    1d98:	1c5a      	adds	r2, r3, #1
    1d9a:	60fa      	str	r2, [r7, #12]
    1d9c:	222d      	movs	r2, #45	; 0x2d
    1d9e:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    1da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1da2:	3301      	adds	r3, #1
    1da4:	63fb      	str	r3, [r7, #60]	; 0x3c
    1da6:	e00e      	b.n	1dc6 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    1da8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1dac:	2b00      	cmp	r3, #0
    1dae:	d00a      	beq.n	1dc6 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    1db0:	68fb      	ldr	r3, [r7, #12]
    1db2:	2b00      	cmp	r3, #0
    1db4:	d004      	beq.n	1dc0 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    1db6:	68fb      	ldr	r3, [r7, #12]
    1db8:	1c5a      	adds	r2, r3, #1
    1dba:	60fa      	str	r2, [r7, #12]
    1dbc:	222d      	movs	r2, #45	; 0x2d
    1dbe:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    1dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1dc2:	3301      	adds	r3, #1
    1dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1dc6:	68fa      	ldr	r2, [r7, #12]
    1dc8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1dcc:	f7ff fb85 	bl	14da <uint64_to_str>
    1dd0:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1dd2:	68fb      	ldr	r3, [r7, #12]
    1dd4:	2b00      	cmp	r3, #0
    1dd6:	d003      	beq.n	1de0 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    1dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1dda:	68fa      	ldr	r2, [r7, #12]
    1ddc:	4413      	add	r3, r2
    1dde:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1de2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1de4:	4413      	add	r3, r2
    1de6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1de8:	e04a      	b.n	1e80 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    1dea:	68fb      	ldr	r3, [r7, #12]
    1dec:	2b00      	cmp	r3, #0
    1dee:	d046      	beq.n	1e7e <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	3307      	adds	r3, #7
    1df4:	f023 0307 	bic.w	r3, r3, #7
    1df8:	f103 0208 	add.w	r2, r3, #8
    1dfc:	607a      	str	r2, [r7, #4]
    1dfe:	cb18      	ldmia	r3, {r3, r4}
    1e00:	4618      	mov	r0, r3
    1e02:	4621      	mov	r1, r4
    1e04:	f7fe fb14 	bl	430 <__aeabi_d2f>
    1e08:	4603      	mov	r3, r0
    1e0a:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    1e0c:	68fb      	ldr	r3, [r7, #12]
    1e0e:	2214      	movs	r2, #20
    1e10:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    1e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1e14:	68f9      	ldr	r1, [r7, #12]
    1e16:	6978      	ldr	r0, [r7, #20]
    1e18:	f7ff fc48 	bl	16ac <ftoa>
    1e1c:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    1e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1e20:	2b00      	cmp	r3, #0
    1e22:	da14      	bge.n	1e4e <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    1e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1e26:	f1b3 3fff 	cmp.w	r3, #4294967295
    1e2a:	d102      	bne.n	1e32 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    1e2c:	4b1e      	ldr	r3, [pc, #120]	; (1ea8 <am_util_stdio_vsprintf+0x600>)
    1e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    1e30:	e008      	b.n	1e44 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    1e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1e34:	f113 0f02 	cmn.w	r3, #2
    1e38:	d102      	bne.n	1e40 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    1e3a:	4b1c      	ldr	r3, [pc, #112]	; (1eac <am_util_stdio_vsprintf+0x604>)
    1e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    1e3e:	e001      	b.n	1e44 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    1e40:	4b1b      	ldr	r3, [pc, #108]	; (1eb0 <am_util_stdio_vsprintf+0x608>)
    1e42:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    1e44:	68fb      	ldr	r3, [r7, #12]
    1e46:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1e48:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    1e4a:	2303      	movs	r3, #3
    1e4c:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    1e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1e50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1e52:	4413      	add	r3, r2
    1e54:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    1e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1e58:	68fa      	ldr	r2, [r7, #12]
    1e5a:	4413      	add	r3, r2
    1e5c:	60fb      	str	r3, [r7, #12]
                }
                break;
    1e5e:	e00e      	b.n	1e7e <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    1e60:	68fb      	ldr	r3, [r7, #12]
    1e62:	2b00      	cmp	r3, #0
    1e64:	d005      	beq.n	1e72 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    1e66:	68fb      	ldr	r3, [r7, #12]
    1e68:	1c5a      	adds	r2, r3, #1
    1e6a:	60fa      	str	r2, [r7, #12]
    1e6c:	68ba      	ldr	r2, [r7, #8]
    1e6e:	7812      	ldrb	r2, [r2, #0]
    1e70:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    1e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1e74:	3301      	adds	r3, #1
    1e76:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1e78:	e002      	b.n	1e80 <am_util_stdio_vsprintf+0x5d8>
                break;
    1e7a:	bf00      	nop
    1e7c:	e000      	b.n	1e80 <am_util_stdio_vsprintf+0x5d8>
                break;
    1e7e:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    1e80:	68bb      	ldr	r3, [r7, #8]
    1e82:	3301      	adds	r3, #1
    1e84:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    1e86:	68bb      	ldr	r3, [r7, #8]
    1e88:	781b      	ldrb	r3, [r3, #0]
    1e8a:	2b00      	cmp	r3, #0
    1e8c:	f47f ad17 	bne.w	18be <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    1e90:	68fb      	ldr	r3, [r7, #12]
    1e92:	2b00      	cmp	r3, #0
    1e94:	d002      	beq.n	1e9c <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    1e96:	68fb      	ldr	r3, [r7, #12]
    1e98:	2200      	movs	r2, #0
    1e9a:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    1e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1e9e:	4618      	mov	r0, r3
    1ea0:	3754      	adds	r7, #84	; 0x54
    1ea2:	46bd      	mov	sp, r7
    1ea4:	bd90      	pop	{r4, r7, pc}
    1ea6:	bf00      	nop
    1ea8:	00302e30 	.word	0x00302e30
    1eac:	00232e23 	.word	0x00232e23
    1eb0:	003f2e3f 	.word	0x003f2e3f

00001eb4 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    1eb4:	b40f      	push	{r0, r1, r2, r3}
    1eb6:	b580      	push	{r7, lr}
    1eb8:	b082      	sub	sp, #8
    1eba:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    1ebc:	f107 0314 	add.w	r3, r7, #20
    1ec0:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    1ec2:	683a      	ldr	r2, [r7, #0]
    1ec4:	6939      	ldr	r1, [r7, #16]
    1ec6:	4808      	ldr	r0, [pc, #32]	; (1ee8 <am_util_stdio_printf+0x34>)
    1ec8:	f7ff fcee 	bl	18a8 <am_util_stdio_vsprintf>
    1ecc:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    1ece:	4b07      	ldr	r3, [pc, #28]	; (1eec <am_util_stdio_printf+0x38>)
    1ed0:	681b      	ldr	r3, [r3, #0]
    1ed2:	4805      	ldr	r0, [pc, #20]	; (1ee8 <am_util_stdio_printf+0x34>)
    1ed4:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    1ed6:	687b      	ldr	r3, [r7, #4]
}
    1ed8:	4618      	mov	r0, r3
    1eda:	3708      	adds	r7, #8
    1edc:	46bd      	mov	sp, r7
    1ede:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    1ee2:	b004      	add	sp, #16
    1ee4:	4770      	bx	lr
    1ee6:	bf00      	nop
    1ee8:	1000404c 	.word	0x1000404c
    1eec:	10004178 	.word	0x10004178

00001ef0 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    1ef0:	b580      	push	{r7, lr}
    1ef2:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    1ef4:	4802      	ldr	r0, [pc, #8]	; (1f00 <am_util_stdio_terminal_clear+0x10>)
    1ef6:	f7ff ffdd 	bl	1eb4 <am_util_stdio_printf>
}
    1efa:	bf00      	nop
    1efc:	bd80      	pop	{r7, pc}
    1efe:	bf00      	nop
    1f00:	00002e50 	.word	0x00002e50

00001f04 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1f04:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    1f06:	f000 fd07 	bl	2918 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    1f0a:	f000 fd73 	bl	29f4 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    1f0e:	f000 fea3 	bl	2c58 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    1f12:	2001      	movs	r0, #1
    1f14:	f000 fd7e 	bl	2a14 <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1f18:	2001      	movs	r0, #1
    1f1a:	f000 f9d7 	bl	22cc <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    1f1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    1f22:	f000 bd85 	b.w	2a30 <am_hal_rtc_osc_disable>
    1f26:	bf00      	nop

00001f28 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    1f28:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1f2a:	4b17      	ldr	r3, [pc, #92]	; (1f88 <am_bsp_debug_printf_enable+0x60>)
    1f2c:	681c      	ldr	r4, [r3, #0]
    1f2e:	f014 0401 	ands.w	r4, r4, #1
{
    1f32:	b087      	sub	sp, #28
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1f34:	d001      	beq.n	1f3a <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    1f36:	b007      	add	sp, #28
    1f38:	bd30      	pop	{r4, r5, pc}
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1f3a:	4a14      	ldr	r2, [pc, #80]	; (1f8c <am_bsp_debug_printf_enable+0x64>)
    1f3c:	4914      	ldr	r1, [pc, #80]	; (1f90 <am_bsp_debug_printf_enable+0x68>)
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    1f3e:	4d15      	ldr	r5, [pc, #84]	; (1f94 <am_bsp_debug_printf_enable+0x6c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1f40:	6011      	str	r1, [r2, #0]
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    1f42:	a806      	add	r0, sp, #24
    1f44:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    1f48:	f000 fe2e 	bl	2ba8 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    1f4c:	f000 fb2a 	bl	25a4 <am_hal_interrupt_master_disable>
    1f50:	4a11      	ldr	r2, [pc, #68]	; (1f98 <am_bsp_debug_printf_enable+0x70>)
    1f52:	9000      	str	r0, [sp, #0]
    1f54:	4d11      	ldr	r5, [pc, #68]	; (1f9c <am_bsp_debug_printf_enable+0x74>)
    1f56:	4912      	ldr	r1, [pc, #72]	; (1fa0 <am_bsp_debug_printf_enable+0x78>)
    1f58:	2073      	movs	r0, #115	; 0x73
    1f5a:	6010      	str	r0, [r2, #0]
    1f5c:	682b      	ldr	r3, [r5, #0]
    1f5e:	4811      	ldr	r0, [pc, #68]	; (1fa4 <am_bsp_debug_printf_enable+0x7c>)
    1f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    1f64:	602b      	str	r3, [r5, #0]
    1f66:	6805      	ldr	r5, [r0, #0]
    1f68:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    1f6c:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    1f70:	6003      	str	r3, [r0, #0]
    1f72:	6808      	ldr	r0, [r1, #0]
    1f74:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    1f78:	600d      	str	r5, [r1, #0]
    1f7a:	6014      	str	r4, [r2, #0]
    1f7c:	9800      	ldr	r0, [sp, #0]
    1f7e:	f000 fb15 	bl	25ac <am_hal_interrupt_master_set>
}
    1f82:	b007      	add	sp, #28
    1f84:	bd30      	pop	{r4, r5, pc}
    1f86:	bf00      	nop
    1f88:	10004160 	.word	0x10004160
    1f8c:	e0000e80 	.word	0xe0000e80
    1f90:	00150511 	.word	0x00150511
    1f94:	000f4240 	.word	0x000f4240
    1f98:	40010060 	.word	0x40010060
    1f9c:	40010054 	.word	0x40010054
    1fa0:	40010108 	.word	0x40010108
    1fa4:	40010028 	.word	0x40010028

00001fa8 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    1fa8:	f000 bb30 	b.w	260c <am_hal_itm_print>

00001fac <am_hal_adc_config>:
//! @return None.
//
//*****************************************************************************
void
am_hal_adc_config(am_hal_adc_config_t *psConfig)
{
    1fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //
    // Set general ADC configuration parameters.
    //
    AM_REG(ADC, CFG) = (psConfig->ui32Clock |
    1fae:	e890 0088 	ldmia.w	r0, {r3, r7}
                        psConfig->ui32TriggerConfig |
                        psConfig->ui32Reference |
                        psConfig->ui32ClockMode |
                        psConfig->ui32PowerMode |
                        psConfig->ui32Repeat |
    1fb2:	6886      	ldr	r6, [r0, #8]
    1fb4:	68c5      	ldr	r5, [r0, #12]
    1fb6:	6904      	ldr	r4, [r0, #16]
    1fb8:	6941      	ldr	r1, [r0, #20]
    AM_REG(ADC, CFG) = (psConfig->ui32Clock |
    1fba:	4a15      	ldr	r2, [pc, #84]	; (2010 <am_hal_adc_config+0x64>)

    //
    // Grab the temperature trims.
    //
    priv_temp_trims.ui32.ui32CalibrationTemperature =
                  am_hal_flash_load_ui32(AM_HAL_ADC_CALIB_TEMP_ADDR);
    1fbc:	4815      	ldr	r0, [pc, #84]	; (2014 <am_hal_adc_config+0x68>)
    AM_REG(ADC, CFG) = (psConfig->ui32Clock |
    1fbe:	433b      	orrs	r3, r7
                        psConfig->ui32Repeat |
    1fc0:	f043 0301 	orr.w	r3, r3, #1
    1fc4:	4333      	orrs	r3, r6
    1fc6:	432b      	orrs	r3, r5
    1fc8:	4323      	orrs	r3, r4
    1fca:	430b      	orrs	r3, r1
    AM_REG(ADC, CFG) = (psConfig->ui32Clock |
    1fcc:	6013      	str	r3, [r2, #0]
                  am_hal_flash_load_ui32(AM_HAL_ADC_CALIB_TEMP_ADDR);
    1fce:	f000 faa7 	bl	2520 <am_hal_flash_load_ui32>
    priv_temp_trims.ui32.ui32CalibrationTemperature =
    1fd2:	4f11      	ldr	r7, [pc, #68]	; (2018 <am_hal_adc_config+0x6c>)
    1fd4:	6038      	str	r0, [r7, #0]
    priv_temp_trims.ui32.ui32CalibrationVoltage     =
                  am_hal_flash_load_ui32(AM_HAL_ADC_CALIB_AMBIENT_ADDR);
    1fd6:	4811      	ldr	r0, [pc, #68]	; (201c <am_hal_adc_config+0x70>)
    1fd8:	f000 faa2 	bl	2520 <am_hal_flash_load_ui32>
    priv_temp_trims.ui32.ui32CalibrationVoltage     =
    1fdc:	6078      	str	r0, [r7, #4]
    priv_temp_trims.ui32.ui32CalibrationOffset      =
                  am_hal_flash_load_ui32(AM_HAL_ADC_CALIB_ADC_OFFSET_ADDR);
    1fde:	4810      	ldr	r0, [pc, #64]	; (2020 <am_hal_adc_config+0x74>)
    1fe0:	f000 fa9e 	bl	2520 <am_hal_flash_load_ui32>

    if ( (priv_temp_trims.ui32.ui32CalibrationTemperature == 0xffffffff)    ||
    1fe4:	683a      	ldr	r2, [r7, #0]
    priv_temp_trims.ui32.ui32CalibrationOffset      =
    1fe6:	60b8      	str	r0, [r7, #8]
    if ( (priv_temp_trims.ui32.ui32CalibrationTemperature == 0xffffffff)    ||
    1fe8:	1c53      	adds	r3, r2, #1
    1fea:	d007      	beq.n	1ffc <am_hal_adc_config+0x50>
    1fec:	687e      	ldr	r6, [r7, #4]
    1fee:	1c73      	adds	r3, r6, #1
    1ff0:	d004      	beq.n	1ffc <am_hal_adc_config+0x50>
         (priv_temp_trims.ui32.ui32CalibrationVoltage     == 0xffffffff)    ||
    1ff2:	3001      	adds	r0, #1
    1ff4:	d002      	beq.n	1ffc <am_hal_adc_config+0x50>
        priv_temp_trims.flt.fCalibrationOffset      = AM_HAL_ADC_CALIB_ADC_OFFSET_DEFAULT;
        priv_temp_trims.ui32.bMeasured = false;
    }
    else
    {
        priv_temp_trims.ui32.bMeasured = true;
    1ff6:	2001      	movs	r0, #1
    1ff8:	7338      	strb	r0, [r7, #12]
    1ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        priv_temp_trims.flt.fCalibrationTemperature = AM_HAL_ADC_CALIB_TEMP_DEFAULT;
    1ffc:	4d09      	ldr	r5, [pc, #36]	; (2024 <am_hal_adc_config+0x78>)
        priv_temp_trims.flt.fCalibrationVoltage     = AM_HAL_ADC_CALIB_AMBIENT_DEFAULT;
    1ffe:	4c0a      	ldr	r4, [pc, #40]	; (2028 <am_hal_adc_config+0x7c>)
        priv_temp_trims.flt.fCalibrationOffset      = AM_HAL_ADC_CALIB_ADC_OFFSET_DEFAULT;
    2000:	490a      	ldr	r1, [pc, #40]	; (202c <am_hal_adc_config+0x80>)
        priv_temp_trims.flt.fCalibrationTemperature = AM_HAL_ADC_CALIB_TEMP_DEFAULT;
    2002:	603d      	str	r5, [r7, #0]
        priv_temp_trims.ui32.bMeasured = false;
    2004:	2000      	movs	r0, #0
        priv_temp_trims.flt.fCalibrationVoltage     = AM_HAL_ADC_CALIB_AMBIENT_DEFAULT;
    2006:	607c      	str	r4, [r7, #4]
        priv_temp_trims.flt.fCalibrationOffset      = AM_HAL_ADC_CALIB_ADC_OFFSET_DEFAULT;
    2008:	60b9      	str	r1, [r7, #8]
    200a:	7338      	strb	r0, [r7, #12]
    200c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    200e:	bf00      	nop
    2010:	50010000 	.word	0x50010000
    2014:	50023010 	.word	0x50023010
    2018:	10004150 	.word	0x10004150
    201c:	50023014 	.word	0x50023014
    2020:	50023018 	.word	0x50023018
    2024:	4395c000 	.word	0x4395c000
    2028:	3f839874 	.word	0x3f839874
    202c:	bb8c47a1 	.word	0xbb8c47a1

00002030 <am_hal_adc_temp_trims_get>:
am_hal_adc_temp_trims_get(float * pfTemp, float * pfVoltage, float * pfOffsetV)
{
    //
    // Return trim temperature as a float, if you can.
    //
    if ( pfTemp != NULL )
    2030:	b178      	cbz	r0, 2052 <am_hal_adc_temp_trims_get+0x22>
{
    2032:	b410      	push	{r4}
    {
        *pfTemp = priv_temp_trims.flt.fCalibrationTemperature;
    2034:	4b0b      	ldr	r3, [pc, #44]	; (2064 <am_hal_adc_temp_trims_get+0x34>)
    2036:	681c      	ldr	r4, [r3, #0]
    2038:	6004      	str	r4, [r0, #0]
    }

    //
    // Return trim voltage as a float, if you can.
    //
    if ( pfVoltage != NULL )
    203a:	b119      	cbz	r1, 2044 <am_hal_adc_temp_trims_get+0x14>
    {
        *pfVoltage = priv_temp_trims.flt.fCalibrationVoltage;
    203c:	f8d3 c004 	ldr.w	ip, [r3, #4]
    2040:	f8c1 c000 	str.w	ip, [r1]
    }

    //
    // Return trim ADC offset voltage as a float, if you can.
    //
    if ( pfOffsetV != NULL )
    2044:	b10a      	cbz	r2, 204a <am_hal_adc_temp_trims_get+0x1a>
    {
        *pfOffsetV = priv_temp_trims.flt.fCalibrationOffset;
    2046:	6898      	ldr	r0, [r3, #8]
    2048:	6010      	str	r0, [r2, #0]
    }

    return priv_temp_trims.ui32.bMeasured;
}
    204a:	7b18      	ldrb	r0, [r3, #12]
    204c:	f85d 4b04 	ldr.w	r4, [sp], #4
    2050:	4770      	bx	lr
    2052:	4b04      	ldr	r3, [pc, #16]	; (2064 <am_hal_adc_temp_trims_get+0x34>)
    if ( pfVoltage != NULL )
    2054:	b109      	cbz	r1, 205a <am_hal_adc_temp_trims_get+0x2a>
        *pfVoltage = priv_temp_trims.flt.fCalibrationVoltage;
    2056:	6858      	ldr	r0, [r3, #4]
    2058:	6008      	str	r0, [r1, #0]
    if ( pfOffsetV != NULL )
    205a:	b10a      	cbz	r2, 2060 <am_hal_adc_temp_trims_get+0x30>
        *pfOffsetV = priv_temp_trims.flt.fCalibrationOffset;
    205c:	6899      	ldr	r1, [r3, #8]
    205e:	6011      	str	r1, [r2, #0]
}
    2060:	7b18      	ldrb	r0, [r3, #12]
    2062:	4770      	bx	lr
    2064:	10004150 	.word	0x10004150

00002068 <am_hal_adc_slot_config>:
//! @return None.
//
//*****************************************************************************
void
am_hal_adc_slot_config(uint32_t ui32SlotNumber, uint32_t ui32SlotConfig)
{
    2068:	b538      	push	{r3, r4, r5, lr}
    uint32_t ui32RegOffset;

    //
    // Make sure we're accessing a real slot.
    //
    am_hal_debug_assert_msg((ui32SlotNumber & 0xFFFFFFFF0) == 0,
    206a:	f030 030f 	bics.w	r3, r0, #15
{
    206e:	4604      	mov	r4, r0
    2070:	460d      	mov	r5, r1
    am_hal_debug_assert_msg((ui32SlotNumber & 0xFFFFFFFF0) == 0,
    2072:	d004      	beq.n	207e <am_hal_adc_slot_config+0x16>
    2074:	4a04      	ldr	r2, [pc, #16]	; (2088 <am_hal_adc_slot_config+0x20>)
    2076:	4805      	ldr	r0, [pc, #20]	; (208c <am_hal_adc_slot_config+0x24>)
    2078:	21f7      	movs	r1, #247	; 0xf7
    207a:	f000 fa4f 	bl	251c <am_hal_debug_error>
                            "Trying to configure an ADC slot that doesn't exist.");

    //
    // Locate the correct register for this ADC slot.
    //
    ui32RegOffset = (AM_REG_ADCn(0) + AM_REG_ADC_SL0CFG_O + (4 * ui32SlotNumber));
    207e:	4b04      	ldr	r3, [pc, #16]	; (2090 <am_hal_adc_slot_config+0x28>)
    2080:	4423      	add	r3, r4
    2082:	0098      	lsls	r0, r3, #2

    //
    // Write the register with the caller's configuration value.
    //
    AM_REGVAL(ui32RegOffset) = ui32SlotConfig;
    2084:	6005      	str	r5, [r0, #0]
    2086:	bd38      	pop	{r3, r4, r5, pc}
    2088:	00002e64 	.word	0x00002e64
    208c:	00002e98 	.word	0x00002e98
    2090:	14004003 	.word	0x14004003

00002094 <am_hal_adc_fifo_peek>:
    uint32_t ui32FIFOValue;

    //
    // Grab a value from the ADC FIFO.
    //
    ui32FIFOValue = AM_REG(ADC, FIFO);
    2094:	4b01      	ldr	r3, [pc, #4]	; (209c <am_hal_adc_fifo_peek+0x8>)
    2096:	6818      	ldr	r0, [r3, #0]

    //
    // Return FIFO entry.
    //
    return ui32FIFOValue;
}
    2098:	4770      	bx	lr
    209a:	bf00      	nop
    209c:	50010038 	.word	0x50010038

000020a0 <am_hal_adc_fifo_pop>:
    uint32_t ui32FIFOValue;

    //
    // Grab a value from the ADC FIFO.
    //
    ui32FIFOValue = AM_REG(ADC, FIFO);
    20a0:	4b02      	ldr	r3, [pc, #8]	; (20ac <am_hal_adc_fifo_pop+0xc>)

    //
    // Pop the FIFO.
    //
    AM_REG(ADC, FIFO) = 0;
    20a2:	2200      	movs	r2, #0
    ui32FIFOValue = AM_REG(ADC, FIFO);
    20a4:	6818      	ldr	r0, [r3, #0]
    AM_REG(ADC, FIFO) = 0;
    20a6:	601a      	str	r2, [r3, #0]

    //
    // Return FIFO valid bits.
    //
    return ui32FIFOValue;
}
    20a8:	4770      	bx	lr
    20aa:	bf00      	nop
    20ac:	50010038 	.word	0x50010038

000020b0 <am_hal_adc_trigger>:
am_hal_adc_trigger(void)
{
    //
    // Write to the Software trigger register in the ADC.
    //
    AM_REG(ADC, SWT) = 0x37;
    20b0:	4b01      	ldr	r3, [pc, #4]	; (20b8 <am_hal_adc_trigger+0x8>)
    20b2:	2237      	movs	r2, #55	; 0x37
    20b4:	601a      	str	r2, [r3, #0]
    20b6:	4770      	bx	lr
    20b8:	50010008 	.word	0x50010008

000020bc <am_hal_adc_enable>:
am_hal_adc_enable(void)
{
    //
    // Enable the ADC.
    //
    AM_BFW(ADC, CFG, ADCEN, 0x1);
    20bc:	4a02      	ldr	r2, [pc, #8]	; (20c8 <am_hal_adc_enable+0xc>)
    20be:	6813      	ldr	r3, [r2, #0]
    20c0:	f043 0001 	orr.w	r0, r3, #1
    20c4:	6010      	str	r0, [r2, #0]
    20c6:	4770      	bx	lr
    20c8:	50010000 	.word	0x50010000

000020cc <am_hal_adc_int_enable>:
am_hal_adc_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupts.
    //
    AM_REG(ADC, INTEN) |= ui32Interrupt;
    20cc:	4a02      	ldr	r2, [pc, #8]	; (20d8 <am_hal_adc_int_enable+0xc>)
    20ce:	6813      	ldr	r3, [r2, #0]
    20d0:	4318      	orrs	r0, r3
    20d2:	6010      	str	r0, [r2, #0]
    20d4:	4770      	bx	lr
    20d6:	bf00      	nop
    20d8:	50010200 	.word	0x50010200

000020dc <am_hal_adc_int_clear>:
am_hal_adc_int_clear(uint32_t ui32Interrupt)
{
    //
    // Clear the interrupts.
    //
    AM_REG(ADC, INTCLR) = ui32Interrupt;
    20dc:	4b01      	ldr	r3, [pc, #4]	; (20e4 <am_hal_adc_int_clear+0x8>)
    20de:	6018      	str	r0, [r3, #0]
    20e0:	4770      	bx	lr
    20e2:	bf00      	nop
    20e4:	50010208 	.word	0x50010208

000020e8 <am_hal_adc_int_status_get>:
am_hal_adc_int_status_get(bool bEnabledOnly)
{
    //
    // Return the status.
    //
    if (bEnabledOnly)
    20e8:	b910      	cbnz	r0, 20f0 <am_hal_adc_int_status_get+0x8>
        u32RetVal &= AM_REG(ADC, INTSTAT);
        return u32RetVal;
    }
    else
    {
        return AM_REG(ADC, INTSTAT);
    20ea:	4b04      	ldr	r3, [pc, #16]	; (20fc <am_hal_adc_int_status_get+0x14>)
    20ec:	6818      	ldr	r0, [r3, #0]
    }
}
    20ee:	4770      	bx	lr
        uint32_t u32RetVal = AM_REG(ADC, INTEN);
    20f0:	4a03      	ldr	r2, [pc, #12]	; (2100 <am_hal_adc_int_status_get+0x18>)
        u32RetVal &= AM_REG(ADC, INTSTAT);
    20f2:	4902      	ldr	r1, [pc, #8]	; (20fc <am_hal_adc_int_status_get+0x14>)
        uint32_t u32RetVal = AM_REG(ADC, INTEN);
    20f4:	6810      	ldr	r0, [r2, #0]
        u32RetVal &= AM_REG(ADC, INTSTAT);
    20f6:	680b      	ldr	r3, [r1, #0]
    20f8:	4018      	ands	r0, r3
        return u32RetVal;
    20fa:	4770      	bx	lr
    20fc:	50010204 	.word	0x50010204
    2100:	50010200 	.word	0x50010200

00002104 <am_hal_adc_volts_to_celsius>:

    //
    // Get remaining trimmed values.
    //
    float fCalibration_voltage = priv_temp_trims.flt.fCalibrationVoltage;
    float fCalibration_offset  = priv_temp_trims.flt.fCalibrationOffset;
    2104:	4b0b      	ldr	r3, [pc, #44]	; (2134 <am_hal_adc_volts_to_celsius+0x30>)
    fTemp *= (fVoltage - fCalibration_offset);

    //
    // Give it back to the caller in Celsius.
    //
    return fTemp - 273.15f;
    2106:	eddf 6a0c 	vldr	s13, [pc, #48]	; 2138 <am_hal_adc_volts_to_celsius+0x34>
    float fCalibration_offset  = priv_temp_trims.flt.fCalibrationOffset;
    210a:	edd3 7a02 	vldr	s15, [r3, #8]
    fTemp /= (fCalibration_voltage - fCalibration_offset);
    210e:	ed93 7a01 	vldr	s14, [r3, #4]
    2112:	edd3 5a00 	vldr	s11, [r3]
    2116:	ee37 0a67 	vsub.f32	s0, s14, s15
    fTemp *= (fVoltage - fCalibration_offset);
    211a:	ee06 0a10 	vmov	s12, r0
    fTemp /= (fCalibration_voltage - fCalibration_offset);
    211e:	ee85 1a80 	vdiv.f32	s2, s11, s0
    fTemp *= (fVoltage - fCalibration_offset);
    2122:	ee76 0a67 	vsub.f32	s1, s12, s15
    2126:	ee60 1a81 	vmul.f32	s3, s1, s2
}
    212a:	ee31 2ae6 	vsub.f32	s4, s3, s13
    212e:	ee12 0a10 	vmov	r0, s4
    2132:	4770      	bx	lr
    2134:	10004150 	.word	0x10004150
    2138:	43889333 	.word	0x43889333

0000213c <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    213c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    213e:	4605      	mov	r5, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    2140:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    2144:	78ab      	ldrb	r3, [r5, #2]
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    2146:	786c      	ldrb	r4, [r5, #1]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    2148:	78ef      	ldrb	r7, [r5, #3]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    214a:	792e      	ldrb	r6, [r5, #4]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    214c:	79a9      	ldrb	r1, [r5, #6]
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    214e:	009a      	lsls	r2, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    2150:	0064      	lsls	r4, r4, #1
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    2152:	f002 0204 	and.w	r2, r2, #4
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    2156:	f004 0402 	and.w	r4, r4, #2
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    215a:	4314      	orrs	r4, r2
    215c:	f047 0701 	orr.w	r7, r7, #1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    2160:	79ea      	ldrb	r2, [r5, #7]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    2162:	01f6      	lsls	r6, r6, #7
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    2164:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    2166:	b2f6      	uxtb	r6, r6
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    2168:	7a2f      	ldrb	r7, [r5, #8]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    216a:	0289      	lsls	r1, r1, #10
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    216c:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    216e:	f401 6180 	and.w	r1, r1, #1024	; 0x400
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    2172:	7a6e      	ldrb	r6, [r5, #9]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    2174:	02d2      	lsls	r2, r2, #11
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    2176:	430c      	orrs	r4, r1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    2178:	f402 6200 	and.w	r2, r2, #2048	; 0x800
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    217c:	7aa9      	ldrb	r1, [r5, #10]
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    217e:	033f      	lsls	r7, r7, #12
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    2180:	4314      	orrs	r4, r2
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    2182:	b2bf      	uxth	r7, r7
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    2184:	0436      	lsls	r6, r6, #16
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    2186:	7aea      	ldrb	r2, [r5, #11]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    2188:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    218a:	0509      	lsls	r1, r1, #20
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    218c:	f406 2770 	and.w	r7, r6, #983040	; 0xf0000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    2190:	0612      	lsls	r2, r2, #24
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    2192:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    2194:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    2198:	009b      	lsls	r3, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    219a:	f002 7780 	and.w	r7, r2, #16777216	; 0x1000000
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    219e:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    21a0:	f003 0108 	and.w	r1, r3, #8
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    21a4:	433c      	orrs	r4, r7
    21a6:	430c      	orrs	r4, r1
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    21a8:	f000 fab0 	bl	270c <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    21ac:	482c      	ldr	r0, [pc, #176]	; (2260 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    21ae:	4b2d      	ldr	r3, [pc, #180]	; (2264 <am_hal_cachectrl_enable+0x128>)
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    21b0:	6004      	str	r4, [r0, #0]
    21b2:	2232      	movs	r2, #50	; 0x32
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    21b4:	681e      	ldr	r6, [r3, #0]
    21b6:	0777      	lsls	r7, r6, #29
    21b8:	d41e      	bmi.n	21f8 <am_hal_cachectrl_enable+0xbc>
    21ba:	681f      	ldr	r7, [r3, #0]
    21bc:	077e      	lsls	r6, r7, #29
    21be:	f102 32ff 	add.w	r2, r2, #4294967295
    21c2:	d419      	bmi.n	21f8 <am_hal_cachectrl_enable+0xbc>
    21c4:	6819      	ldr	r1, [r3, #0]
    21c6:	074f      	lsls	r7, r1, #29
    21c8:	d416      	bmi.n	21f8 <am_hal_cachectrl_enable+0xbc>
    21ca:	6818      	ldr	r0, [r3, #0]
    21cc:	0746      	lsls	r6, r0, #29
    21ce:	d413      	bmi.n	21f8 <am_hal_cachectrl_enable+0xbc>
    21d0:	681e      	ldr	r6, [r3, #0]
    21d2:	0770      	lsls	r0, r6, #29
    21d4:	d410      	bmi.n	21f8 <am_hal_cachectrl_enable+0xbc>
    21d6:	681f      	ldr	r7, [r3, #0]
    21d8:	0779      	lsls	r1, r7, #29
    21da:	d40d      	bmi.n	21f8 <am_hal_cachectrl_enable+0xbc>
    21dc:	6819      	ldr	r1, [r3, #0]
    21de:	074f      	lsls	r7, r1, #29
    21e0:	d40a      	bmi.n	21f8 <am_hal_cachectrl_enable+0xbc>
    21e2:	6818      	ldr	r0, [r3, #0]
    21e4:	0746      	lsls	r6, r0, #29
    21e6:	d407      	bmi.n	21f8 <am_hal_cachectrl_enable+0xbc>
    21e8:	681e      	ldr	r6, [r3, #0]
    21ea:	0770      	lsls	r0, r6, #29
    21ec:	d404      	bmi.n	21f8 <am_hal_cachectrl_enable+0xbc>
    21ee:	681f      	ldr	r7, [r3, #0]
    21f0:	0779      	lsls	r1, r7, #29
    21f2:	d401      	bmi.n	21f8 <am_hal_cachectrl_enable+0xbc>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    21f4:	3a09      	subs	r2, #9
    21f6:	d1dd      	bne.n	21b4 <am_hal_cachectrl_enable+0x78>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    21f8:	4b1a      	ldr	r3, [pc, #104]	; (2264 <am_hal_cachectrl_enable+0x128>)
    21fa:	681a      	ldr	r2, [r3, #0]
    21fc:	f042 0101 	orr.w	r1, r2, #1
    2200:	6019      	str	r1, [r3, #0]
    2202:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    2204:	6818      	ldr	r0, [r3, #0]
    2206:	0740      	lsls	r0, r0, #29
    2208:	d41e      	bmi.n	2248 <am_hal_cachectrl_enable+0x10c>
    220a:	681e      	ldr	r6, [r3, #0]
    220c:	0771      	lsls	r1, r6, #29
    220e:	f102 32ff 	add.w	r2, r2, #4294967295
    2212:	d419      	bmi.n	2248 <am_hal_cachectrl_enable+0x10c>
    2214:	681f      	ldr	r7, [r3, #0]
    2216:	077f      	lsls	r7, r7, #29
    2218:	d416      	bmi.n	2248 <am_hal_cachectrl_enable+0x10c>
    221a:	6819      	ldr	r1, [r3, #0]
    221c:	074e      	lsls	r6, r1, #29
    221e:	d413      	bmi.n	2248 <am_hal_cachectrl_enable+0x10c>
    2220:	6818      	ldr	r0, [r3, #0]
    2222:	0740      	lsls	r0, r0, #29
    2224:	d410      	bmi.n	2248 <am_hal_cachectrl_enable+0x10c>
    2226:	681e      	ldr	r6, [r3, #0]
    2228:	0771      	lsls	r1, r6, #29
    222a:	d40d      	bmi.n	2248 <am_hal_cachectrl_enable+0x10c>
    222c:	681f      	ldr	r7, [r3, #0]
    222e:	077f      	lsls	r7, r7, #29
    2230:	d40a      	bmi.n	2248 <am_hal_cachectrl_enable+0x10c>
    2232:	6819      	ldr	r1, [r3, #0]
    2234:	074e      	lsls	r6, r1, #29
    2236:	d407      	bmi.n	2248 <am_hal_cachectrl_enable+0x10c>
    2238:	6818      	ldr	r0, [r3, #0]
    223a:	0740      	lsls	r0, r0, #29
    223c:	d404      	bmi.n	2248 <am_hal_cachectrl_enable+0x10c>
    223e:	681e      	ldr	r6, [r3, #0]
    2240:	0771      	lsls	r1, r6, #29
    2242:	d401      	bmi.n	2248 <am_hal_cachectrl_enable+0x10c>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    2244:	3a09      	subs	r2, #9
    2246:	d1dd      	bne.n	2204 <am_hal_cachectrl_enable+0xc8>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    2248:	796d      	ldrb	r5, [r5, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    224a:	4f05      	ldr	r7, [pc, #20]	; (2260 <am_hal_cachectrl_enable+0x124>)
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );
    224c:	022b      	lsls	r3, r5, #8
    224e:	f403 7100 	and.w	r1, r3, #512	; 0x200
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    2252:	f403 7280 	and.w	r2, r3, #256	; 0x100
    2256:	4311      	orrs	r1, r2
    2258:	430c      	orrs	r4, r1
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    225a:	603c      	str	r4, [r7, #0]
    225c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    225e:	bf00      	nop
    2260:	40018000 	.word	0x40018000
    2264:	40018008 	.word	0x40018008

00002268 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    2268:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    226a:	4604      	mov	r4, r0
    226c:	b120      	cbz	r0, 2278 <am_hal_clkgen_sysclk_select+0x10>
    226e:	4a06      	ldr	r2, [pc, #24]	; (2288 <am_hal_clkgen_sysclk_select+0x20>)
    2270:	4806      	ldr	r0, [pc, #24]	; (228c <am_hal_clkgen_sysclk_select+0x24>)
    2272:	2153      	movs	r1, #83	; 0x53
    2274:	f000 f952 	bl	251c <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    2278:	4b05      	ldr	r3, [pc, #20]	; (2290 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the required operating value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    227a:	4906      	ldr	r1, [pc, #24]	; (2294 <am_hal_clkgen_sysclk_select+0x2c>)
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    227c:	2047      	movs	r0, #71	; 0x47

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    227e:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    2280:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    2282:	600c      	str	r4, [r1, #0]
    AM_REG(CLKGEN, CLKKEY) = 0;
    2284:	601a      	str	r2, [r3, #0]
    2286:	bd10      	pop	{r4, pc}
    2288:	00002eb8 	.word	0x00002eb8
    228c:	00002ef0 	.word	0x00002ef0
    2290:	40004014 	.word	0x40004014
    2294:	40004018 	.word	0x40004018

00002298 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    2298:	4b04      	ldr	r3, [pc, #16]	; (22ac <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    229a:	4905      	ldr	r1, [pc, #20]	; (22b0 <am_hal_clkgen_sysclk_get+0x18>)
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    229c:	681a      	ldr	r2, [r3, #0]
            return 48000000;
    229e:	4805      	ldr	r0, [pc, #20]	; (22b4 <am_hal_clkgen_sysclk_get+0x1c>)
    switch ( ui32ClockSetting )
    22a0:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    22a4:	bf08      	it	eq
    22a6:	4608      	moveq	r0, r1
    22a8:	4770      	bx	lr
    22aa:	bf00      	nop
    22ac:	40004018 	.word	0x40004018
    22b0:	02dc6c00 	.word	0x02dc6c00
    22b4:	016e3600 	.word	0x016e3600

000022b8 <am_hal_clkgen_osc_start>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_start(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    22b8:	0783      	lsls	r3, r0, #30
    22ba:	d004      	beq.n	22c6 <am_hal_clkgen_osc_start+0xe>
    {
        //
        // Start the oscillator(s).
        // Note that these bits are cleared in order to enable the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) &= ~ui32OscFlags;
    22bc:	4a02      	ldr	r2, [pc, #8]	; (22c8 <am_hal_clkgen_osc_start+0x10>)
    22be:	6813      	ldr	r3, [r2, #0]
    22c0:	ea23 0000 	bic.w	r0, r3, r0
    22c4:	6010      	str	r0, [r2, #0]
    22c6:	4770      	bx	lr
    22c8:	4000400c 	.word	0x4000400c

000022cc <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    22cc:	0783      	lsls	r3, r0, #30
    22ce:	d003      	beq.n	22d8 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    22d0:	4b02      	ldr	r3, [pc, #8]	; (22dc <am_hal_clkgen_osc_stop+0x10>)
    22d2:	681a      	ldr	r2, [r3, #0]
    22d4:	4310      	orrs	r0, r2
    22d6:	6018      	str	r0, [r3, #0]
    22d8:	4770      	bx	lr
    22da:	bf00      	nop
    22dc:	4000400c 	.word	0x4000400c

000022e0 <am_hal_ctimer_config>:
//
//*****************************************************************************
void
am_hal_ctimer_config(uint32_t ui32TimerNumber,
                     am_hal_ctimer_config_t *psConfig)
{
    22e0:	b530      	push	{r4, r5, lr}
    22e2:	4604      	mov	r4, r0
                      (psConfig->ui32TimerBConfig << 16) );

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    22e4:	6808      	ldr	r0, [r1, #0]
                      (psConfig->ui32TimerBConfig << 16) );
    22e6:	688a      	ldr	r2, [r1, #8]
    ui32ConfigVal = ( (psConfig->ui32TimerAConfig)  |
    22e8:	684b      	ldr	r3, [r1, #4]
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    22ea:	2800      	cmp	r0, #0
    ui32ConfigVal = ( (psConfig->ui32TimerAConfig)  |
    22ec:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    22f0:	bf14      	ite	ne
    22f2:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
    22f6:	2500      	moveq	r5, #0
{
    22f8:	b083      	sub	sp, #12
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    22fa:	430d      	orrs	r5, r1

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    22fc:	f000 f952 	bl	25a4 <am_hal_interrupt_master_disable>

    //
    // Find the correct register to write.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    2300:	0124      	lsls	r4, r4, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    2302:	4a2a      	ldr	r2, [pc, #168]	; (23ac <am_hal_ctimer_config+0xcc>)
    AM_CRITICAL_BEGIN_ASM
    2304:	9001      	str	r0, [sp, #4]
    ui32TimerASrc = AM_BFR(CTIMER, STCFG, CLKSEL);
    2306:	482a      	ldr	r0, [pc, #168]	; (23b0 <am_hal_ctimer_config+0xd0>)

    //
    // Write our configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    2308:	50a5      	str	r5, [r4, r2]
    ui32TimerASrc = AM_BFR(CTIMER, STCFG, CLKSEL);
    230a:	6805      	ldr	r5, [r0, #0]
    230c:	f005 0c0f 	and.w	ip, r5, #15
    if ( (ui32TimerASrc == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV16)   ||
    2310:	f10c 33ff 	add.w	r3, ip, #4294967295
    2314:	2b01      	cmp	r3, #1
    2316:	d93f      	bls.n	2398 <am_hal_ctimer_config+0xb8>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    2318:	6811      	ldr	r1, [r2, #0]
    231a:	f3c1 0e44 	ubfx	lr, r1, #1, #5
    231e:	f10e 34ff 	add.w	r4, lr, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    2322:	f3c1 4244 	ubfx	r2, r1, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    2326:	2c04      	cmp	r4, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    2328:	f102 30ff 	add.w	r0, r2, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    232c:	d934      	bls.n	2398 <am_hal_ctimer_config+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    232e:	2804      	cmp	r0, #4
    2330:	d932      	bls.n	2398 <am_hal_ctimer_config+0xb8>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    2332:	4d20      	ldr	r5, [pc, #128]	; (23b4 <am_hal_ctimer_config+0xd4>)
    2334:	682b      	ldr	r3, [r5, #0]
    2336:	f3c3 0c44 	ubfx	ip, r3, #1, #5
    233a:	f10c 31ff 	add.w	r1, ip, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    233e:	f3c3 4e44 	ubfx	lr, r3, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    2342:	2904      	cmp	r1, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    2344:	f10e 34ff 	add.w	r4, lr, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    2348:	d926      	bls.n	2398 <am_hal_ctimer_config+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    234a:	2c04      	cmp	r4, #4
    234c:	d924      	bls.n	2398 <am_hal_ctimer_config+0xb8>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    234e:	4a1a      	ldr	r2, [pc, #104]	; (23b8 <am_hal_ctimer_config+0xd8>)
    2350:	6810      	ldr	r0, [r2, #0]
    2352:	f3c0 0544 	ubfx	r5, r0, #1, #5
    2356:	1e69      	subs	r1, r5, #1
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    2358:	f3c0 4344 	ubfx	r3, r0, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    235c:	2904      	cmp	r1, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    235e:	f103 34ff 	add.w	r4, r3, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    2362:	d919      	bls.n	2398 <am_hal_ctimer_config+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    2364:	2c04      	cmp	r4, #4
    2366:	d917      	bls.n	2398 <am_hal_ctimer_config+0xb8>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    2368:	4a14      	ldr	r2, [pc, #80]	; (23bc <am_hal_ctimer_config+0xdc>)
    236a:	6810      	ldr	r0, [r2, #0]
    236c:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    2370:	f10c 35ff 	add.w	r5, ip, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    2374:	f3c0 4e44 	ubfx	lr, r0, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    2378:	2d04      	cmp	r5, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    237a:	f10e 31ff 	add.w	r1, lr, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    237e:	d90b      	bls.n	2398 <am_hal_ctimer_config+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    2380:	2904      	cmp	r1, #4
    2382:	d909      	bls.n	2398 <am_hal_ctimer_config+0xb8>
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    }
    else
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 1);
    2384:	4c0e      	ldr	r4, [pc, #56]	; (23c0 <am_hal_ctimer_config+0xe0>)
    2386:	6823      	ldr	r3, [r4, #0]
    2388:	f043 0204 	orr.w	r2, r3, #4
    238c:	6022      	str	r2, [r4, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    238e:	9801      	ldr	r0, [sp, #4]
    2390:	f000 f90c 	bl	25ac <am_hal_interrupt_master_set>

} // am_hal_ctimer_config()
    2394:	b003      	add	sp, #12
    2396:	bd30      	pop	{r4, r5, pc}
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    2398:	4809      	ldr	r0, [pc, #36]	; (23c0 <am_hal_ctimer_config+0xe0>)
    239a:	6805      	ldr	r5, [r0, #0]
    239c:	f025 0104 	bic.w	r1, r5, #4
    23a0:	6001      	str	r1, [r0, #0]
    AM_CRITICAL_END_ASM
    23a2:	9801      	ldr	r0, [sp, #4]
    23a4:	f000 f902 	bl	25ac <am_hal_interrupt_master_set>
} // am_hal_ctimer_config()
    23a8:	b003      	add	sp, #12
    23aa:	bd30      	pop	{r4, r5, pc}
    23ac:	4000800c 	.word	0x4000800c
    23b0:	40008100 	.word	0x40008100
    23b4:	4000801c 	.word	0x4000801c
    23b8:	4000802c 	.word	0x4000802c
    23bc:	4000803c 	.word	0x4000803c
    23c0:	40021020 	.word	0x40021020

000023c4 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    23c4:	b570      	push	{r4, r5, r6, lr}
    23c6:	b082      	sub	sp, #8
    23c8:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    23ca:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    23cc:	f000 f8ea 	bl	25a4 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    23d0:	4d07      	ldr	r5, [pc, #28]	; (23f0 <am_hal_ctimer_start+0x2c>)
    AM_CRITICAL_BEGIN_ASM
    23d2:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    23d4:	5971      	ldr	r1, [r6, r5]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    23d6:	f004 2308 	and.w	r3, r4, #134219776	; 0x8000800
    23da:	ea21 0003 	bic.w	r0, r1, r3
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    23de:	f004 1201 	and.w	r2, r4, #65537	; 0x10001
    23e2:	4302      	orrs	r2, r0
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    23e4:	5172      	str	r2, [r6, r5]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    23e6:	9801      	ldr	r0, [sp, #4]
    23e8:	f000 f8e0 	bl	25ac <am_hal_interrupt_master_set>
} // am_hal_ctimer_start()
    23ec:	b002      	add	sp, #8
    23ee:	bd70      	pop	{r4, r5, r6, pc}
    23f0:	4000800c 	.word	0x4000800c

000023f4 <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    23f4:	b570      	push	{r4, r5, r6, lr}
    23f6:	b082      	sub	sp, #8
    23f8:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    23fa:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    23fc:	f000 f8d2 	bl	25a4 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    2400:	4d05      	ldr	r5, [pc, #20]	; (2418 <am_hal_ctimer_clear+0x24>)
    AM_CRITICAL_BEGIN_ASM
    2402:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    2404:	5971      	ldr	r1, [r6, r5]
    2406:	f004 2008 	and.w	r0, r4, #134219776	; 0x8000800
    240a:	4308      	orrs	r0, r1
    240c:	5170      	str	r0, [r6, r5]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    240e:	9801      	ldr	r0, [sp, #4]
    2410:	f000 f8cc 	bl	25ac <am_hal_interrupt_master_set>
} // am_hal_ctimer_clear()
    2414:	b002      	add	sp, #8
    2416:	bd70      	pop	{r4, r5, r6, pc}
    2418:	4000800c 	.word	0x4000800c

0000241c <am_hal_ctimer_pin_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_pin_enable(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    241c:	b570      	push	{r4, r5, r6, lr}
    241e:	b082      	sub	sp, #8
    2420:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    2422:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    2424:	f000 f8be 	bl	25a4 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    2428:	4d05      	ldr	r5, [pc, #20]	; (2440 <am_hal_ctimer_pin_enable+0x24>)
    AM_CRITICAL_BEGIN_ASM
    242a:	9001      	str	r0, [sp, #4]

    //
    // Set the pin enable bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    242c:	5971      	ldr	r1, [r6, r5]
    242e:	f004 2020 	and.w	r0, r4, #536879104	; 0x20002000
    2432:	4308      	orrs	r0, r1
    2434:	5170      	str	r0, [r6, r5]
                                   AM_REG_CTIMER_CTRL0_TMRB0PE_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    2436:	9801      	ldr	r0, [sp, #4]
    2438:	f000 f8b8 	bl	25ac <am_hal_interrupt_master_set>
} // am_hal_ctimer_pin_enable()
    243c:	b002      	add	sp, #8
    243e:	bd70      	pop	{r4, r5, r6, pc}
    2440:	4000800c 	.word	0x4000800c

00002444 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    2444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2448:	b082      	sub	sp, #8
    244a:	4688      	mov	r8, r1
    244c:	461f      	mov	r7, r3
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    244e:	ea4f 1900 	mov.w	r9, r0, lsl #4
{
    2452:	4614      	mov	r4, r2
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    2454:	f000 f8a6 	bl	25a4 <am_hal_interrupt_master_disable>
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    2458:	f8df a098 	ldr.w	sl, [pc, #152]	; 24f4 <am_hal_ctimer_period_set+0xb0>
    AM_CRITICAL_BEGIN_ASM
    245c:	9001      	str	r0, [sp, #4]
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    245e:	f518 3f80 	cmn.w	r8, #65536	; 0x10000
                                    AM_REG_CTIMER_CMPRA0_O +
    2462:	4d21      	ldr	r5, [pc, #132]	; (24e8 <am_hal_ctimer_period_set+0xa4>)
                                    AM_REG_CTIMER_CMPRB0_O +
    2464:	4e21      	ldr	r6, [pc, #132]	; (24ec <am_hal_ctimer_period_set+0xa8>)
    ui32Mode = *pui32ControlReg;
    2466:	f859 300a 	ldr.w	r3, [r9, sl]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    246a:	d01b      	beq.n	24a4 <am_hal_ctimer_period_set+0x60>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    246c:	f403 70c0 	and.w	r0, r3, #384	; 0x180
    2470:	2880      	cmp	r0, #128	; 0x80
    2472:	d01c      	beq.n	24ae <am_hal_ctimer_period_set+0x6a>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    2474:	f64f 77ff 	movw	r7, #65535	; 0xffff
    2478:	2300      	movs	r3, #0
    247a:	45b8      	cmp	r8, r7
        ui32Comp1 = 0;
    247c:	461a      	mov	r2, r3
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    247e:	d01d      	beq.n	24bc <am_hal_ctimer_period_set+0x78>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    2480:	491b      	ldr	r1, [pc, #108]	; (24f0 <am_hal_ctimer_period_set+0xac>)
    2482:	4588      	cmp	r8, r1
    2484:	d025      	beq.n	24d2 <am_hal_ctimer_period_set+0x8e>
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1 >> 16));
    2486:	400a      	ands	r2, r1
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    2488:	b2a0      	uxth	r0, r4
    248a:	4303      	orrs	r3, r0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    248c:	ea42 4414 	orr.w	r4, r2, r4, lsr #16
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    2490:	f849 3005 	str.w	r3, [r9, r5]
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    2494:	f849 4006 	str.w	r4, [r9, r6]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    2498:	9801      	ldr	r0, [sp, #4]
    249a:	f000 f887 	bl	25ac <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    249e:	b002      	add	sp, #8
    24a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ui32Mode = ui32Mode >> 16;
    24a4:	0c19      	lsrs	r1, r3, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    24a6:	f401 70c0 	and.w	r0, r1, #384	; 0x180
    24aa:	2880      	cmp	r0, #128	; 0x80
    24ac:	d110      	bne.n	24d0 <am_hal_ctimer_period_set+0x8c>
    24ae:	0423      	lsls	r3, r4, #16
        ui32Comp1 = ui32Period;
    24b0:	4622      	mov	r2, r4
        ui32Comp0 = ui32Period - ui32OnTime;
    24b2:	1be4      	subs	r4, r4, r7
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    24b4:	f64f 77ff 	movw	r7, #65535	; 0xffff
    24b8:	45b8      	cmp	r8, r7
    24ba:	d1e1      	bne.n	2480 <am_hal_ctimer_period_set+0x3c>
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    24bc:	b2a6      	uxth	r6, r4
    24be:	4333      	orrs	r3, r6
    24c0:	f849 3005 	str.w	r3, [r9, r5]
    AM_CRITICAL_END_ASM
    24c4:	9801      	ldr	r0, [sp, #4]
    24c6:	f000 f871 	bl	25ac <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    24ca:	b002      	add	sp, #8
    24cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    24d0:	2300      	movs	r3, #0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    24d2:	b2a5      	uxth	r5, r4
    24d4:	432b      	orrs	r3, r5
    24d6:	f849 3006 	str.w	r3, [r9, r6]
    AM_CRITICAL_END_ASM
    24da:	9801      	ldr	r0, [sp, #4]
    24dc:	f000 f866 	bl	25ac <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    24e0:	b002      	add	sp, #8
    24e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    24e6:	bf00      	nop
    24e8:	40008004 	.word	0x40008004
    24ec:	40008008 	.word	0x40008008
    24f0:	ffff0000 	.word	0xffff0000
    24f4:	4000800c 	.word	0x4000800c

000024f8 <am_hal_ctimer_adc_trigger_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_adc_trigger_enable(void)
{
    24f8:	b500      	push	{lr}
    24fa:	b083      	sub	sp, #12
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    24fc:	f000 f852 	bl	25a4 <am_hal_interrupt_master_disable>

    //
    // Enable the ADC trigger.
    //
    AM_REGn(CTIMER, 0, CTRL3) |= AM_REG_CTIMER_CTRL3_ADCEN_M;
    2500:	4a05      	ldr	r2, [pc, #20]	; (2518 <am_hal_ctimer_adc_trigger_enable+0x20>)
    AM_CRITICAL_BEGIN_ASM
    2502:	9001      	str	r0, [sp, #4]
    AM_REGn(CTIMER, 0, CTRL3) |= AM_REG_CTIMER_CTRL3_ADCEN_M;
    2504:	6813      	ldr	r3, [r2, #0]
    2506:	f443 4000 	orr.w	r0, r3, #32768	; 0x8000
    250a:	6010      	str	r0, [r2, #0]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    250c:	9801      	ldr	r0, [sp, #4]
    250e:	f000 f84d 	bl	25ac <am_hal_interrupt_master_set>
} // am_hal_ctimer_adc_trigger_enable()
    2512:	b003      	add	sp, #12
    2514:	f85d fb04 	ldr.w	pc, [sp], #4
    2518:	4000803c 	.word	0x4000803c

0000251c <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    251c:	e7fe      	b.n	251c <am_hal_debug_error>
    251e:	bf00      	nop

00002520 <am_hal_flash_load_ui32>:
//
//*****************************************************************************
uint32_t
am_hal_flash_load_ui32(uint32_t ui32Address)
{
    return g_am_hal_flash.flash_util_read_word((uint32_t*)ui32Address);
    2520:	4b00      	ldr	r3, [pc, #0]	; (2524 <am_hal_flash_load_ui32+0x4>)
    2522:	4718      	bx	r3
    2524:	08000075 	.word	0x08000075

00002528 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    2528:	4b00      	ldr	r3, [pc, #0]	; (252c <am_hal_flash_delay+0x4>)
    252a:	4718      	bx	r3
    252c:	0800009d 	.word	0x0800009d

00002530 <am_hal_gpio_out_enable_bit_get>:
{
    //
    // Return 0 or 1.
    //

    return (AM_HAL_GPIO_EN(ui32BitNum) & AM_HAL_GPIO_EN_M(ui32BitNum)) ? 1 : 0;
    2530:	08c3      	lsrs	r3, r0, #3
    2532:	f003 0104 	and.w	r1, r3, #4
    2536:	4a04      	ldr	r2, [pc, #16]	; (2548 <am_hal_gpio_out_enable_bit_get+0x18>)
    2538:	588b      	ldr	r3, [r1, r2]
    253a:	f000 001f 	and.w	r0, r0, #31
    253e:	fa23 f100 	lsr.w	r1, r3, r0
}
    2542:	f001 0001 	and.w	r0, r1, #1
    2546:	4770      	bx	lr
    2548:	400100a0 	.word	0x400100a0

0000254c <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    254c:	280f      	cmp	r0, #15
    254e:	d80b      	bhi.n	2568 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    2550:	2805      	cmp	r0, #5
    2552:	d013      	beq.n	257c <am_hal_interrupt_enable+0x30>
    2554:	2806      	cmp	r0, #6
    2556:	d017      	beq.n	2588 <am_hal_interrupt_enable+0x3c>
    2558:	2804      	cmp	r0, #4
    255a:	d104      	bne.n	2566 <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    255c:	4a0d      	ldr	r2, [pc, #52]	; (2594 <am_hal_interrupt_enable+0x48>)
    255e:	6813      	ldr	r3, [r2, #0]
    2560:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    2564:	6010      	str	r0, [r2, #0]
    2566:	4770      	bx	lr
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    2568:	f1a0 0310 	sub.w	r3, r0, #16
    256c:	f003 0c1f 	and.w	ip, r3, #31
    2570:	2001      	movs	r0, #1
    2572:	4909      	ldr	r1, [pc, #36]	; (2598 <am_hal_interrupt_enable+0x4c>)
    2574:	fa00 f20c 	lsl.w	r2, r0, ip
    2578:	600a      	str	r2, [r1, #0]
    257a:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    257c:	4805      	ldr	r0, [pc, #20]	; (2594 <am_hal_interrupt_enable+0x48>)
    257e:	6801      	ldr	r1, [r0, #0]
    2580:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    2584:	6002      	str	r2, [r0, #0]
            break;
    2586:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    2588:	4902      	ldr	r1, [pc, #8]	; (2594 <am_hal_interrupt_enable+0x48>)
    258a:	680a      	ldr	r2, [r1, #0]
    258c:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    2590:	600b      	str	r3, [r1, #0]
            break;
    2592:	4770      	bx	lr
    2594:	e000ed24 	.word	0xe000ed24
    2598:	e000e100 	.word	0xe000e100

0000259c <am_hal_interrupt_master_enable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    259c:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    25a0:	b662      	cpsie	i
    __asm("    bx lr");
    25a2:	4770      	bx	lr

000025a4 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    25a4:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    25a8:	b672      	cpsid	i
    __asm("    bx lr");
    25aa:	4770      	bx	lr

000025ac <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    25ac:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    25b0:	4770      	bx	lr
    25b2:	bf00      	nop

000025b4 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    25b4:	4b0d      	ldr	r3, [pc, #52]	; (25ec <am_hal_itm_enable+0x38>)
    25b6:	6818      	ldr	r0, [r3, #0]
    25b8:	07c2      	lsls	r2, r0, #31
    25ba:	d416      	bmi.n	25ea <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    25bc:	4a0c      	ldr	r2, [pc, #48]	; (25f0 <am_hal_itm_enable+0x3c>)
    25be:	6811      	ldr	r1, [r2, #0]
{
    25c0:	b430      	push	{r4, r5}
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    25c2:	f041 7480 	orr.w	r4, r1, #16777216	; 0x1000000
    25c6:	6014      	str	r4, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    25c8:	6815      	ldr	r5, [r2, #0]
    25ca:	01eb      	lsls	r3, r5, #7
    25cc:	d5fc      	bpl.n	25c8 <am_hal_itm_enable+0x14>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    25ce:	4809      	ldr	r0, [pc, #36]	; (25f4 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    25d0:	4c09      	ldr	r4, [pc, #36]	; (25f8 <am_hal_itm_enable+0x44>)
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    25d2:	4d0a      	ldr	r5, [pc, #40]	; (25fc <am_hal_itm_enable+0x48>)
    25d4:	6005      	str	r5, [r0, #0]
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    25d6:	250f      	movs	r5, #15
    25d8:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    25da:	bc30      	pop	{r4, r5}
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    25dc:	4908      	ldr	r1, [pc, #32]	; (2600 <am_hal_itm_enable+0x4c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    25de:	4b09      	ldr	r3, [pc, #36]	; (2604 <am_hal_itm_enable+0x50>)
    25e0:	4a09      	ldr	r2, [pc, #36]	; (2608 <am_hal_itm_enable+0x54>)
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    25e2:	f04f 30ff 	mov.w	r0, #4294967295
    25e6:	6008      	str	r0, [r1, #0]
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    25e8:	601a      	str	r2, [r3, #0]
}
    25ea:	4770      	bx	lr
    25ec:	10004160 	.word	0x10004160
    25f0:	e000edfc 	.word	0xe000edfc
    25f4:	e0000fb0 	.word	0xe0000fb0
    25f8:	e0000e40 	.word	0xe0000e40
    25fc:	c5acce55 	.word	0xc5acce55
    2600:	e0000e00 	.word	0xe0000e00
    2604:	e0000e80 	.word	0xe0000e80
    2608:	00150511 	.word	0x00150511

0000260c <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    260c:	7803      	ldrb	r3, [r0, #0]
    260e:	b1b3      	cbz	r3, 263e <am_hal_itm_print+0x32>
{
    2610:	b410      	push	{r4}
    2612:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    2614:	2400      	movs	r4, #0
    2616:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    261a:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    261c:	2900      	cmp	r1, #0
    261e:	d1fa      	bne.n	2616 <am_hal_itm_print+0xa>
    2620:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    2622:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    2626:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    262a:	f8dc 3000 	ldr.w	r3, [ip]
    262e:	2b00      	cmp	r3, #0
    2630:	d0fb      	beq.n	262a <am_hal_itm_print+0x1e>
    while (ui32Length)
    2632:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    2634:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    2638:	d1f5      	bne.n	2626 <am_hal_itm_print+0x1a>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    263a:	f85d 4b04 	ldr.w	r4, [sp], #4
    263e:	4770      	bx	lr

00002640 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    2640:	490d      	ldr	r1, [pc, #52]	; (2678 <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    2642:	4b0e      	ldr	r3, [pc, #56]	; (267c <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    2644:	4a0e      	ldr	r2, [pc, #56]	; (2680 <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    2646:	681b      	ldr	r3, [r3, #0]
{
    2648:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    264a:	680d      	ldr	r5, [r1, #0]
    264c:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    264e:	6815      	ldr	r5, [r2, #0]
    2650:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    2652:	4c0c      	ldr	r4, [pc, #48]	; (2684 <am_hal_mcuctrl_fault_status+0x44>)
    2654:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    2656:	4329      	orrs	r1, r5
    2658:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    265a:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    265c:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    2660:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    2662:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    2664:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    2668:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    266c:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    266e:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    2670:	6142      	str	r2, [r0, #20]
}
    2672:	bc70      	pop	{r4, r5, r6}
    2674:	4770      	bx	lr
    2676:	bf00      	nop
    2678:	400201c4 	.word	0x400201c4
    267c:	400201cc 	.word	0x400201cc
    2680:	400201c0 	.word	0x400201c0
    2684:	400201c8 	.word	0x400201c8

00002688 <am_hal_pwrctrl_periph_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    2688:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    268a:	4604      	mov	r4, r0
{
    268c:	b082      	sub	sp, #8
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    268e:	b1b8      	cbz	r0, 26c0 <am_hal_pwrctrl_periph_enable+0x38>
    2690:	1e43      	subs	r3, r0, #1
    2692:	4203      	tst	r3, r0
    2694:	d114      	bne.n	26c0 <am_hal_pwrctrl_periph_enable+0x38>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    2696:	f7ff ff85 	bl	25a4 <am_hal_interrupt_master_disable>

    //
    // Enable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    269a:	4a18      	ldr	r2, [pc, #96]	; (26fc <am_hal_pwrctrl_periph_enable+0x74>)
    AM_CRITICAL_BEGIN_ASM
    269c:	9001      	str	r0, [sp, #4]
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    269e:	6810      	ldr	r0, [r2, #0]
    26a0:	4320      	orrs	r0, r4
    26a2:	6010      	str	r0, [r2, #0]

    //
    // End Critical Section.
    //
    AM_CRITICAL_END_ASM
    26a4:	9801      	ldr	r0, [sp, #4]
    26a6:	f7ff ff81 	bl	25ac <am_hal_interrupt_master_set>

    //
    // Wait for the power to stablize.  Using a simple delay loop is more
    // power efficient than a polling loop.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);
    26aa:	200e      	movs	r0, #14
    26ac:	f7ff ff3c 	bl	2528 <am_hal_flash_delay>

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    26b0:	f014 0f0e 	tst.w	r4, #14
    26b4:	d10a      	bne.n	26cc <am_hal_pwrctrl_periph_enable+0x44>
    26b6:	f014 0f70 	tst.w	r4, #112	; 0x70
    26ba:	d00e      	beq.n	26da <am_hal_pwrctrl_periph_enable+0x52>
    26bc:	2408      	movs	r4, #8
    26be:	e006      	b.n	26ce <am_hal_pwrctrl_periph_enable+0x46>
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    26c0:	4a0f      	ldr	r2, [pc, #60]	; (2700 <am_hal_pwrctrl_periph_enable+0x78>)
    26c2:	4810      	ldr	r0, [pc, #64]	; (2704 <am_hal_pwrctrl_periph_enable+0x7c>)
    26c4:	2160      	movs	r1, #96	; 0x60
    26c6:	f7ff ff29 	bl	251c <am_hal_debug_error>
    26ca:	e7e4      	b.n	2696 <am_hal_pwrctrl_periph_enable+0xe>
    POLL_PWRSTATUS(ui32Peripheral);
    26cc:	2404      	movs	r4, #4
    26ce:	4a0e      	ldr	r2, [pc, #56]	; (2708 <am_hal_pwrctrl_periph_enable+0x80>)
    26d0:	6813      	ldr	r3, [r2, #0]
    26d2:	421c      	tst	r4, r3
    26d4:	d0fc      	beq.n	26d0 <am_hal_pwrctrl_periph_enable+0x48>
}
    26d6:	b002      	add	sp, #8
    26d8:	bd10      	pop	{r4, pc}
    POLL_PWRSTATUS(ui32Peripheral);
    26da:	f240 1181 	movw	r1, #385	; 0x181
    26de:	420c      	tst	r4, r1
    26e0:	d108      	bne.n	26f4 <am_hal_pwrctrl_periph_enable+0x6c>
    26e2:	05a3      	lsls	r3, r4, #22
    26e4:	d408      	bmi.n	26f8 <am_hal_pwrctrl_periph_enable+0x70>
    26e6:	f414 6f80 	tst.w	r4, #1024	; 0x400
    26ea:	bf14      	ite	ne
    26ec:	2410      	movne	r4, #16
    26ee:	f04f 34ff 	moveq.w	r4, #4294967295
    26f2:	e7ec      	b.n	26ce <am_hal_pwrctrl_periph_enable+0x46>
    26f4:	2402      	movs	r4, #2
    26f6:	e7ea      	b.n	26ce <am_hal_pwrctrl_periph_enable+0x46>
    26f8:	2480      	movs	r4, #128	; 0x80
    26fa:	e7e8      	b.n	26ce <am_hal_pwrctrl_periph_enable+0x46>
    26fc:	40021008 	.word	0x40021008
    2700:	00002f08 	.word	0x00002f08
    2704:	00002f3c 	.word	0x00002f3c
    2708:	40021014 	.word	0x40021014

0000270c <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    270c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
{
    2710:	b430      	push	{r4, r5}
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    2712:	d03a      	beq.n	278a <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    2714:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    2718:	f000 809d 	beq.w	2856 <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    271c:	2801      	cmp	r0, #1
    271e:	f000 809d 	beq.w	285c <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    2722:	2803      	cmp	r0, #3
    2724:	f000 80a6 	beq.w	2874 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    2728:	2807      	cmp	r0, #7
    272a:	f000 809c 	beq.w	2866 <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    272e:	280f      	cmp	r0, #15
    2730:	f000 80a5 	beq.w	287e <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    2734:	281f      	cmp	r0, #31
    2736:	f000 80b0 	beq.w	289a <am_hal_pwrctrl_memory_enable+0x18e>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    273a:	283f      	cmp	r0, #63	; 0x3f
    273c:	f000 80b4 	beq.w	28a8 <am_hal_pwrctrl_memory_enable+0x19c>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    2740:	287f      	cmp	r0, #127	; 0x7f
    2742:	f000 80b8 	beq.w	28b6 <am_hal_pwrctrl_memory_enable+0x1aa>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    2746:	28ff      	cmp	r0, #255	; 0xff
    2748:	f000 80a0 	beq.w	288c <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    274c:	f240 13ff 	movw	r3, #511	; 0x1ff
    2750:	4298      	cmp	r0, r3
    2752:	f000 80b7 	beq.w	28c4 <am_hal_pwrctrl_memory_enable+0x1b8>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    2756:	f240 31ff 	movw	r1, #1023	; 0x3ff
    275a:	4288      	cmp	r0, r1
    275c:	f000 80b8 	beq.w	28d0 <am_hal_pwrctrl_memory_enable+0x1c4>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    2760:	f240 72ff 	movw	r2, #2047	; 0x7ff
    2764:	4290      	cmp	r0, r2
    2766:	d00e      	beq.n	2786 <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    2768:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    276c:	f000 80b6 	beq.w	28dc <am_hal_pwrctrl_memory_enable+0x1d0>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    2770:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    2774:	42a0      	cmp	r0, r4
    2776:	f000 80b4 	beq.w	28e2 <am_hal_pwrctrl_memory_enable+0x1d6>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    277a:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    277e:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    2782:	4560      	cmp	r0, ip
    2784:	d132      	bne.n	27ec <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    2786:	495b      	ldr	r1, [pc, #364]	; (28f4 <am_hal_pwrctrl_memory_enable+0x1e8>)
    2788:	e066      	b.n	2858 <am_hal_pwrctrl_memory_enable+0x14c>
    278a:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    278e:	2340      	movs	r3, #64	; 0x40
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    2790:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    2792:	4c59      	ldr	r4, [pc, #356]	; (28f8 <am_hal_pwrctrl_memory_enable+0x1ec>)
    2794:	6825      	ldr	r5, [r4, #0]
    2796:	402a      	ands	r2, r5
    2798:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    279a:	4a57      	ldr	r2, [pc, #348]	; (28f8 <am_hal_pwrctrl_memory_enable+0x1ec>)
    279c:	6814      	ldr	r4, [r2, #0]
    279e:	4320      	orrs	r0, r4
    27a0:	6010      	str	r0, [r2, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    27a2:	2b00      	cmp	r3, #0
    27a4:	d029      	beq.n	27fa <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    27a6:	4d55      	ldr	r5, [pc, #340]	; (28fc <am_hal_pwrctrl_memory_enable+0x1f0>)
    27a8:	6828      	ldr	r0, [r5, #0]
        while ( --i32TOcnt              &&
    27aa:	4218      	tst	r0, r3
    27ac:	bf18      	it	ne
    27ae:	20c6      	movne	r0, #198	; 0xc6
    27b0:	d01f      	beq.n	27f2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    27b2:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    27b4:	421a      	tst	r2, r3
    27b6:	d01c      	beq.n	27f2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    27b8:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    27ba:	421c      	tst	r4, r3
    27bc:	d019      	beq.n	27f2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    27be:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    27c0:	421a      	tst	r2, r3
    27c2:	d016      	beq.n	27f2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    27c4:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    27c6:	421c      	tst	r4, r3
    27c8:	d013      	beq.n	27f2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    27ca:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    27cc:	421a      	tst	r2, r3
    27ce:	d010      	beq.n	27f2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    27d0:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    27d2:	421c      	tst	r4, r3
    27d4:	d00d      	beq.n	27f2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    27d6:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    27d8:	421a      	tst	r2, r3
    27da:	d00a      	beq.n	27f2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    27dc:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    27de:	421c      	tst	r4, r3
    27e0:	d007      	beq.n	27f2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    27e2:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    27e4:	421a      	tst	r2, r3
    27e6:	d004      	beq.n	27f2 <am_hal_pwrctrl_memory_enable+0xe6>
    27e8:	3809      	subs	r0, #9
    27ea:	d1e2      	bne.n	27b2 <am_hal_pwrctrl_memory_enable+0xa6>
        return false;
    27ec:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    27ee:	bc30      	pop	{r4, r5}
    27f0:	4770      	bx	lr
    if ( ui32PwrStatEnMask )
    27f2:	b911      	cbnz	r1, 27fa <am_hal_pwrctrl_memory_enable+0xee>
    return true;
    27f4:	2001      	movs	r0, #1
}
    27f6:	bc30      	pop	{r4, r5}
    27f8:	4770      	bx	lr
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    27fa:	4b40      	ldr	r3, [pc, #256]	; (28fc <am_hal_pwrctrl_memory_enable+0x1f0>)
    27fc:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    27fe:	ea31 0405 	bics.w	r4, r1, r5
    2802:	bf18      	it	ne
    2804:	24c6      	movne	r4, #198	; 0xc6
    2806:	d0f5      	beq.n	27f4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2808:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    280a:	ea31 0000 	bics.w	r0, r1, r0
    280e:	d0f1      	beq.n	27f4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2810:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    2812:	ea31 0002 	bics.w	r0, r1, r2
    2816:	d0ed      	beq.n	27f4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2818:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    281a:	ea31 0005 	bics.w	r0, r1, r5
    281e:	d0e9      	beq.n	27f4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2820:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    2822:	ea31 0000 	bics.w	r0, r1, r0
    2826:	d0e5      	beq.n	27f4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2828:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    282a:	ea31 0002 	bics.w	r0, r1, r2
    282e:	d0e1      	beq.n	27f4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2830:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    2832:	ea31 0005 	bics.w	r0, r1, r5
    2836:	d0dd      	beq.n	27f4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2838:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    283a:	ea31 0000 	bics.w	r0, r1, r0
    283e:	d0d9      	beq.n	27f4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2840:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    2842:	ea31 0002 	bics.w	r0, r1, r2
    2846:	d0d5      	beq.n	27f4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2848:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    284a:	ea31 0005 	bics.w	r0, r1, r5
    284e:	d0d1      	beq.n	27f4 <am_hal_pwrctrl_memory_enable+0xe8>
    2850:	3c09      	subs	r4, #9
    2852:	d1d9      	bne.n	2808 <am_hal_pwrctrl_memory_enable+0xfc>
    2854:	e7ca      	b.n	27ec <am_hal_pwrctrl_memory_enable+0xe0>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    2856:	2160      	movs	r1, #96	; 0x60
{
    2858:	2300      	movs	r3, #0
    285a:	e79e      	b.n	279a <am_hal_pwrctrl_memory_enable+0x8e>
    285c:	4a28      	ldr	r2, [pc, #160]	; (2900 <am_hal_pwrctrl_memory_enable+0x1f4>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    285e:	4b29      	ldr	r3, [pc, #164]	; (2904 <am_hal_pwrctrl_memory_enable+0x1f8>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    2860:	f44f 7180 	mov.w	r1, #256	; 0x100
    2864:	e795      	b.n	2792 <am_hal_pwrctrl_memory_enable+0x86>
    2866:	f46f 62ff 	mvn.w	r2, #2040	; 0x7f8
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    286a:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    286e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    2872:	e78e      	b.n	2792 <am_hal_pwrctrl_memory_enable+0x86>
    2874:	4a24      	ldr	r2, [pc, #144]	; (2908 <am_hal_pwrctrl_memory_enable+0x1fc>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2876:	4b25      	ldr	r3, [pc, #148]	; (290c <am_hal_pwrctrl_memory_enable+0x200>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    2878:	f44f 7140 	mov.w	r1, #768	; 0x300
    287c:	e789      	b.n	2792 <am_hal_pwrctrl_memory_enable+0x86>
    287e:	f46f 62fe 	mvn.w	r2, #2032	; 0x7f0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2882:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    2886:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    288a:	e782      	b.n	2792 <am_hal_pwrctrl_memory_enable+0x86>
    288c:	f46f 62e0 	mvn.w	r2, #1792	; 0x700
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2890:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    2894:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    2898:	e77b      	b.n	2792 <am_hal_pwrctrl_memory_enable+0x86>
    289a:	f46f 62fc 	mvn.w	r2, #2016	; 0x7e0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    289e:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    28a2:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    28a6:	e774      	b.n	2792 <am_hal_pwrctrl_memory_enable+0x86>
    28a8:	f46f 62f8 	mvn.w	r2, #1984	; 0x7c0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    28ac:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    28b0:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    28b4:	e76d      	b.n	2792 <am_hal_pwrctrl_memory_enable+0x86>
    28b6:	f46f 62f0 	mvn.w	r2, #1920	; 0x780
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    28ba:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    28be:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    28c2:	e766      	b.n	2792 <am_hal_pwrctrl_memory_enable+0x86>
    28c4:	f46f 62c0 	mvn.w	r2, #1536	; 0x600
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    28c8:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    28cc:	4910      	ldr	r1, [pc, #64]	; (2910 <am_hal_pwrctrl_memory_enable+0x204>)
    28ce:	e760      	b.n	2792 <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    28d0:	4910      	ldr	r1, [pc, #64]	; (2914 <am_hal_pwrctrl_memory_enable+0x208>)
    28d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    28d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    28da:	e75a      	b.n	2792 <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    28dc:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    28e0:	e7ba      	b.n	2858 <am_hal_pwrctrl_memory_enable+0x14c>
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    28e2:	4805      	ldr	r0, [pc, #20]	; (28f8 <am_hal_pwrctrl_memory_enable+0x1ec>)
    28e4:	6803      	ldr	r3, [r0, #0]
    28e6:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    28ea:	6001      	str	r1, [r0, #0]
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    28ec:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
        ui32PwrStatEnMask  = 0;
    28f0:	2100      	movs	r1, #0
    28f2:	e758      	b.n	27a6 <am_hal_pwrctrl_memory_enable+0x9a>
    28f4:	0007ff00 	.word	0x0007ff00
    28f8:	40021010 	.word	0x40021010
    28fc:	40021014 	.word	0x40021014
    2900:	fffff801 	.word	0xfffff801
    2904:	0007fe00 	.word	0x0007fe00
    2908:	fffff803 	.word	0xfffff803
    290c:	0007fc00 	.word	0x0007fc00
    2910:	0001ff00 	.word	0x0001ff00
    2914:	0003ff00 	.word	0x0003ff00

00002918 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    2918:	4b0f      	ldr	r3, [pc, #60]	; (2958 <am_hal_pwrctrl_bucks_init+0x40>)
    291a:	681a      	ldr	r2, [r3, #0]
    291c:	0792      	lsls	r2, r2, #30
    291e:	d502      	bpl.n	2926 <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    2920:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    2922:	07c3      	lsls	r3, r0, #31
    2924:	d40e      	bmi.n	2944 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    2926:	4b0d      	ldr	r3, [pc, #52]	; (295c <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    2928:	4a0b      	ldr	r2, [pc, #44]	; (2958 <am_hal_pwrctrl_bucks_init+0x40>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    292a:	6819      	ldr	r1, [r3, #0]
    292c:	f041 0002 	orr.w	r0, r1, #2
    2930:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    2932:	6819      	ldr	r1, [r3, #0]
    2934:	f041 0001 	orr.w	r0, r1, #1
    2938:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    293a:	6813      	ldr	r3, [r2, #0]
    293c:	f003 0103 	and.w	r1, r3, #3
    2940:	2903      	cmp	r1, #3
    2942:	d1fa      	bne.n	293a <am_hal_pwrctrl_bucks_init+0x22>
    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    2944:	4a04      	ldr	r2, [pc, #16]	; (2958 <am_hal_pwrctrl_bucks_init+0x40>)
    2946:	6810      	ldr	r0, [r2, #0]
    2948:	f000 0303 	and.w	r3, r0, #3
    294c:	2b03      	cmp	r3, #3
    294e:	d1fa      	bne.n	2946 <am_hal_pwrctrl_bucks_init+0x2e>
    am_hal_flash_delay(200 / 3);
    2950:	2042      	movs	r0, #66	; 0x42
    2952:	f7ff bde9 	b.w	2528 <am_hal_flash_delay>
    2956:	bf00      	nop
    2958:	40021004 	.word	0x40021004
    295c:	40021000 	.word	0x40021000

00002960 <am_hal_pwrctrl_bucks_enable>:
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    2960:	4b0b      	ldr	r3, [pc, #44]	; (2990 <am_hal_pwrctrl_bucks_enable+0x30>)
    2962:	681a      	ldr	r2, [r3, #0]
    2964:	0792      	lsls	r2, r2, #30
    2966:	d502      	bpl.n	296e <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    2968:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    296a:	07c3      	lsls	r3, r0, #31
    296c:	d40e      	bmi.n	298c <am_hal_pwrctrl_bucks_enable+0x2c>
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    296e:	4b09      	ldr	r3, [pc, #36]	; (2994 <am_hal_pwrctrl_bucks_enable+0x34>)
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    2970:	4a07      	ldr	r2, [pc, #28]	; (2990 <am_hal_pwrctrl_bucks_enable+0x30>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    2972:	6819      	ldr	r1, [r3, #0]
    2974:	f041 0002 	orr.w	r0, r1, #2
    2978:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    297a:	6819      	ldr	r1, [r3, #0]
    297c:	f041 0001 	orr.w	r0, r1, #1
    2980:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    2982:	6813      	ldr	r3, [r2, #0]
    2984:	f003 0103 	and.w	r1, r3, #3
    2988:	2903      	cmp	r1, #3
    298a:	d1fa      	bne.n	2982 <am_hal_pwrctrl_bucks_enable+0x22>
    298c:	4770      	bx	lr
    298e:	bf00      	nop
    2990:	40021004 	.word	0x40021004
    2994:	40021000 	.word	0x40021000

00002998 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    2998:	4b12      	ldr	r3, [pc, #72]	; (29e4 <am_hal_pwrctrl_bucks_disable+0x4c>)
    299a:	681a      	ldr	r2, [r3, #0]
    299c:	0792      	lsls	r2, r2, #30
    299e:	d402      	bmi.n	29a6 <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    29a0:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    29a2:	07c3      	lsls	r3, r0, #31
    29a4:	d51c      	bpl.n	29e0 <am_hal_pwrctrl_bucks_disable+0x48>
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    29a6:	4910      	ldr	r1, [pc, #64]	; (29e8 <am_hal_pwrctrl_bucks_disable+0x50>)
    29a8:	680b      	ldr	r3, [r1, #0]
    29aa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    29ae:	2a20      	cmp	r2, #32
    29b0:	d00b      	beq.n	29ca <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    29b2:	4b0e      	ldr	r3, [pc, #56]	; (29ec <am_hal_pwrctrl_bucks_disable+0x54>)
    29b4:	681a      	ldr	r2, [r3, #0]
    29b6:	f022 0002 	bic.w	r0, r2, #2
    29ba:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    29bc:	6819      	ldr	r1, [r3, #0]
    29be:	f021 0201 	bic.w	r2, r1, #1
    29c2:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    29c4:	200a      	movs	r0, #10
    29c6:	f7ff bdaf 	b.w	2528 <am_hal_flash_delay>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_PWRADC_EN) )
    29ca:	4809      	ldr	r0, [pc, #36]	; (29f0 <am_hal_pwrctrl_bucks_disable+0x58>)
    29cc:	6801      	ldr	r1, [r0, #0]
    if ( isRev_ADC()  &&
    29ce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    29d2:	d1ee      	bne.n	29b2 <am_hal_pwrctrl_bucks_disable+0x1a>
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    29d4:	4805      	ldr	r0, [pc, #20]	; (29ec <am_hal_pwrctrl_bucks_disable+0x54>)
    29d6:	6803      	ldr	r3, [r0, #0]
    29d8:	f003 0105 	and.w	r1, r3, #5
    29dc:	6001      	str	r1, [r0, #0]
    29de:	e7f1      	b.n	29c4 <am_hal_pwrctrl_bucks_disable+0x2c>
    29e0:	4770      	bx	lr
    29e2:	bf00      	nop
    29e4:	40021004 	.word	0x40021004
    29e8:	4002000c 	.word	0x4002000c
    29ec:	40021000 	.word	0x40021000
    29f0:	40021008 	.word	0x40021008

000029f4 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    29f4:	4905      	ldr	r1, [pc, #20]	; (2a0c <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    29f6:	4a06      	ldr	r2, [pc, #24]	; (2a10 <am_hal_pwrctrl_low_power_init+0x1c>)
    AM_REG(PWRCTRL, SRAMCTRL) |=
    29f8:	680b      	ldr	r3, [r1, #0]
    29fa:	f043 0006 	orr.w	r0, r3, #6
    29fe:	6008      	str	r0, [r1, #0]
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    2a00:	6811      	ldr	r1, [r2, #0]
    2a02:	f021 0304 	bic.w	r3, r1, #4
    2a06:	6013      	str	r3, [r2, #0]
    2a08:	4770      	bx	lr
    2a0a:	bf00      	nop
    2a0c:	40021018 	.word	0x40021018
    2a10:	40021000 	.word	0x40021000

00002a14 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    2a14:	4a05      	ldr	r2, [pc, #20]	; (2a2c <am_hal_rtc_osc_select+0x18>)
    2a16:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    2a18:	b918      	cbnz	r0, 2a22 <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    2a1a:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    2a1e:	6010      	str	r0, [r2, #0]
    2a20:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    2a22:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    2a26:	6011      	str	r1, [r2, #0]
    2a28:	4770      	bx	lr
    2a2a:	bf00      	nop
    2a2c:	4000400c 	.word	0x4000400c

00002a30 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    2a30:	4a02      	ldr	r2, [pc, #8]	; (2a3c <am_hal_rtc_osc_disable+0xc>)
    2a32:	6813      	ldr	r3, [r2, #0]
    2a34:	f043 0010 	orr.w	r0, r3, #16
    2a38:	6010      	str	r0, [r2, #0]
    2a3a:	4770      	bx	lr
    2a3c:	40004050 	.word	0x40004050

00002a40 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    2a40:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a42:	b083      	sub	sp, #12
    2a44:	4604      	mov	r4, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    2a46:	f7ff fdad 	bl	25a4 <am_hal_interrupt_master_disable>
    2a4a:	4605      	mov	r5, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    2a4c:	b124      	cbz	r4, 2a58 <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    2a4e:	4b42      	ldr	r3, [pc, #264]	; (2b58 <am_hal_sysctrl_sleep+0x118>)
    2a50:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    2a52:	f010 0c01 	ands.w	ip, r0, #1
    2a56:	d00a      	beq.n	2a6e <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    2a58:	4a40      	ldr	r2, [pc, #256]	; (2b5c <am_hal_sysctrl_sleep+0x11c>)
    2a5a:	6811      	ldr	r1, [r2, #0]
    2a5c:	f021 0604 	bic.w	r6, r1, #4
    2a60:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    2a62:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    2a64:	4628      	mov	r0, r5
    2a66:	f7ff fda1 	bl	25ac <am_hal_interrupt_master_set>
}
    2a6a:	b003      	add	sp, #12
    2a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    2a6e:	4c3b      	ldr	r4, [pc, #236]	; (2b5c <am_hal_sysctrl_sleep+0x11c>)
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    2a70:	4b3b      	ldr	r3, [pc, #236]	; (2b60 <am_hal_sysctrl_sleep+0x120>)
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    2a72:	6820      	ldr	r0, [r4, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    2a74:	4e3b      	ldr	r6, [pc, #236]	; (2b64 <am_hal_sysctrl_sleep+0x124>)
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    2a76:	4f3c      	ldr	r7, [pc, #240]	; (2b68 <am_hal_sysctrl_sleep+0x128>)
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    2a78:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 2b78 <am_hal_sysctrl_sleep+0x138>
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    2a7c:	f040 0204 	orr.w	r2, r0, #4
    2a80:	6022      	str	r2, [r4, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    2a82:	681c      	ldr	r4, [r3, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    2a84:	6833      	ldr	r3, [r6, #0]
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    2a86:	f8de 2000 	ldr.w	r2, [lr]
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    2a8a:	6839      	ldr	r1, [r7, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    2a8c:	f004 07f0 	and.w	r7, r4, #240	; 0xf0
                   CHKBUCKZX_REV : 0x0;
    2a90:	2f20      	cmp	r7, #32
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    2a92:	f103 30ff 	add.w	r0, r3, #4294967295
                   CHKBUCKZX_REV : 0x0;
    2a96:	bf14      	ite	ne
    2a98:	2700      	movne	r7, #0
    2a9a:	2702      	moveq	r7, #2
                    CHKBUCKZX_TIMER : 0x0;
    2a9c:	2803      	cmp	r0, #3
    2a9e:	bf98      	it	ls
    2aa0:	f04f 0c04 	movls.w	ip, #4
                     CHKBUCKZX_BUCKS : 0x0;
    2aa4:	f012 0403 	ands.w	r4, r2, #3
    2aa8:	bf18      	it	ne
    2aaa:	2401      	movne	r4, #1
    g_buckZX_chk |= ( ui32SupplySrc &
    2aac:	f240 53ff 	movw	r3, #1535	; 0x5ff
    g_buckZX_chk |= (ui32SupplySrc &
    2ab0:	433c      	orrs	r4, r7
                0x0 : CHKBUCKZX_DEVEN;
    2ab2:	ea11 0703 	ands.w	r7, r1, r3
    g_buckZX_chk |= (ui32SupplySrc &
    2ab6:	ea44 040c 	orr.w	r4, r4, ip
                0x0 : CHKBUCKZX_DEVEN;
    2aba:	d103      	bne.n	2ac4 <am_hal_sysctrl_sleep+0x84>
    g_buckZX_chk |= ( ui32SupplySrc &
    2abc:	f044 0408 	orr.w	r4, r4, #8
        if ( bBuckZX_chk )
    2ac0:	2c0f      	cmp	r4, #15
    2ac2:	d00a      	beq.n	2ada <am_hal_sysctrl_sleep+0x9a>
        AM_ASM_WFI;
    2ac4:	bf30      	wfi
        if ( bBuckZX_chk )
    2ac6:	2c0f      	cmp	r4, #15
    2ac8:	d01a      	beq.n	2b00 <am_hal_sysctrl_sleep+0xc0>
            g_bBuckRestoreComplete = true;
    2aca:	4e28      	ldr	r6, [pc, #160]	; (2b6c <am_hal_sysctrl_sleep+0x12c>)
    2acc:	2001      	movs	r0, #1
    2ace:	7030      	strb	r0, [r6, #0]
    am_hal_interrupt_master_set(ui32Critical);
    2ad0:	4628      	mov	r0, r5
    2ad2:	f7ff fd6b 	bl	25ac <am_hal_interrupt_master_set>
}
    2ad6:	b003      	add	sp, #12
    2ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2ada:	6832      	ldr	r2, [r6, #0]
    2adc:	1e51      	subs	r1, r2, #1
    2ade:	9100      	str	r1, [sp, #0]
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    2ae0:	9800      	ldr	r0, [sp, #0]
    2ae2:	f04f 31ff 	mov.w	r1, #4294967295
    2ae6:	f7ff fc85 	bl	23f4 <am_hal_ctimer_clear>
            am_hal_ctimer_period_set(ui32BuckTimer,
    2aea:	9800      	ldr	r0, [sp, #0]
    2aec:	463b      	mov	r3, r7
    2aee:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    2af2:	f04f 31ff 	mov.w	r1, #4294967295
    2af6:	f7ff fca5 	bl	2444 <am_hal_ctimer_period_set>
            am_hal_pwrctrl_bucks_disable();
    2afa:	f7ff ff4d 	bl	2998 <am_hal_pwrctrl_bucks_disable>
    2afe:	e7e1      	b.n	2ac4 <am_hal_sysctrl_sleep+0x84>
    AM_CRITICAL_BEGIN_ASM
    2b00:	f7ff fd50 	bl	25a4 <am_hal_interrupt_master_disable>
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    2b04:	4b1a      	ldr	r3, [pc, #104]	; (2b70 <am_hal_sysctrl_sleep+0x130>)
    AM_CRITICAL_BEGIN_ASM
    2b06:	9001      	str	r0, [sp, #4]
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    2b08:	681a      	ldr	r2, [r3, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    2b0a:	681a      	ldr	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    2b0c:	681f      	ldr	r7, [r3, #0]
    2b0e:	f027 043c 	bic.w	r4, r7, #60	; 0x3c
    2b12:	f044 021c 	orr.w	r2, r4, #28
    2b16:	601a      	str	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    2b18:	6819      	ldr	r1, [r3, #0]
            g_bBuckRestoreComplete = false;
    2b1a:	4c14      	ldr	r4, [pc, #80]	; (2b6c <am_hal_sysctrl_sleep+0x12c>)
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    2b1c:	f421 30f0 	bic.w	r0, r1, #122880	; 0x1e000
    2b20:	f440 4760 	orr.w	r7, r0, #57344	; 0xe000
    2b24:	601f      	str	r7, [r3, #0]
    AM_CRITICAL_END_ASM
    2b26:	9801      	ldr	r0, [sp, #4]
    2b28:	f7ff fd40 	bl	25ac <am_hal_interrupt_master_set>
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    2b2c:	201c      	movs	r0, #28
    2b2e:	f7ff fcfb 	bl	2528 <am_hal_flash_delay>
            am_hal_pwrctrl_bucks_enable();
    2b32:	f7ff ff15 	bl	2960 <am_hal_pwrctrl_bucks_enable>
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2b36:	6836      	ldr	r6, [r6, #0]
            g_ui32BuckInputs = 0;
    2b38:	490e      	ldr	r1, [pc, #56]	; (2b74 <am_hal_sysctrl_sleep+0x134>)
            g_bBuckRestoreComplete = false;
    2b3a:	2200      	movs	r2, #0
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2b3c:	1e73      	subs	r3, r6, #1
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    2b3e:	204c      	movs	r0, #76	; 0x4c
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2b40:	9300      	str	r3, [sp, #0]
            g_bBuckRestoreComplete = false;
    2b42:	7022      	strb	r2, [r4, #0]
            g_ui32BuckInputs = 0;
    2b44:	600a      	str	r2, [r1, #0]
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    2b46:	f7ff fcef 	bl	2528 <am_hal_flash_delay>
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    2b4a:	9800      	ldr	r0, [sp, #0]
    2b4c:	f04f 31ff 	mov.w	r1, #4294967295
    2b50:	f7ff fc38 	bl	23c4 <am_hal_ctimer_start>
    2b54:	e786      	b.n	2a64 <am_hal_sysctrl_sleep+0x24>
    2b56:	bf00      	nop
    2b58:	40020250 	.word	0x40020250
    2b5c:	e000ed10 	.word	0xe000ed10
    2b60:	4002000c 	.word	0x4002000c
    2b64:	1000416c 	.word	0x1000416c
    2b68:	40021008 	.word	0x40021008
    2b6c:	10004164 	.word	0x10004164
    2b70:	40020068 	.word	0x40020068
    2b74:	10004168 	.word	0x10004168
    2b78:	40021000 	.word	0x40021000

00002b7c <am_hal_sysctrl_fpu_enable>:
{
    //
    // Enable access to the FPU in both privileged and user modes.
    // NOTE: Write 0s to all reserved fields in this register.
    //
    AM_REG(SYSCTRL, CPACR) = (AM_REG_SYSCTRL_CPACR_CP11(0x3) |
    2b7c:	4b02      	ldr	r3, [pc, #8]	; (2b88 <am_hal_sysctrl_fpu_enable+0xc>)
    2b7e:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
    2b82:	601a      	str	r2, [r3, #0]
    2b84:	4770      	bx	lr
    2b86:	bf00      	nop
    2b88:	e000ed88 	.word	0xe000ed88

00002b8c <am_hal_sysctrl_fpu_stacking_enable>:
    {
        //
        // Enable automatic saving of FPU registers on exception entry, using lazy
        // context saving.
        //
        AM_REG(SYSCTRL, FPCCR) |= (AM_REG_SYSCTRL_FPCCR_ASPEN(0x1) |
    2b8c:	4a05      	ldr	r2, [pc, #20]	; (2ba4 <am_hal_sysctrl_fpu_stacking_enable+0x18>)
    2b8e:	6813      	ldr	r3, [r2, #0]
    if ( bLazy )
    2b90:	b918      	cbnz	r0, 2b9a <am_hal_sysctrl_fpu_stacking_enable+0xe>
    else
    {
        //
        // Enable automatic saving of FPU registers on exception entry.
        //
        AM_REG(SYSCTRL, FPCCR) |= AM_REG_SYSCTRL_FPCCR_ASPEN(0x1);
    2b92:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
    2b96:	6010      	str	r0, [r2, #0]
    2b98:	4770      	bx	lr
        AM_REG(SYSCTRL, FPCCR) |= (AM_REG_SYSCTRL_FPCCR_ASPEN(0x1) |
    2b9a:	f043 4140 	orr.w	r1, r3, #3221225472	; 0xc0000000
    2b9e:	6011      	str	r1, [r2, #0]
    2ba0:	4770      	bx	lr
    2ba2:	bf00      	nop
    2ba4:	e000ef34 	.word	0xe000ef34

00002ba8 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    2ba8:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    2baa:	4a23      	ldr	r2, [pc, #140]	; (2c38 <am_hal_tpiu_enable+0x90>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    2bac:	6803      	ldr	r3, [r0, #0]
    AM_REG(TPIU, FFCR) = 0;
    2bae:	2100      	movs	r1, #0
    2bb0:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    2bb2:	b33b      	cbz	r3, 2c04 <am_hal_tpiu_enable+0x5c>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    2bb4:	f5a2 7c40 	sub.w	ip, r2, #768	; 0x300
    2bb8:	2101      	movs	r1, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    2bba:	4c20      	ldr	r4, [pc, #128]	; (2c3c <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    2bbc:	4d20      	ldr	r5, [pc, #128]	; (2c40 <am_hal_tpiu_enable+0x98>)
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    2bbe:	f8cc 1000 	str.w	r1, [ip]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    2bc2:	f5a3 4e61 	sub.w	lr, r3, #57600	; 0xe100
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    2bc6:	45a6      	cmp	lr, r4
    2bc8:	bf94      	ite	ls
    2bca:	461c      	movls	r4, r3
    2bcc:	462c      	movhi	r4, r5
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    2bce:	f7ff fb63 	bl	2298 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    2bd2:	1c43      	adds	r3, r0, #1
    2bd4:	d02d      	beq.n	2c32 <am_hal_tpiu_enable+0x8a>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    2bd6:	08c2      	lsrs	r2, r0, #3
    2bd8:	fbb2 f3f4 	udiv	r3, r2, r4
    2bdc:	1e5d      	subs	r5, r3, #1
    2bde:	b2a8      	uxth	r0, r5
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    2be0:	4a18      	ldr	r2, [pc, #96]	; (2c44 <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    2be2:	4c19      	ldr	r4, [pc, #100]	; (2c48 <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    2be4:	4b19      	ldr	r3, [pc, #100]	; (2c4c <am_hal_tpiu_enable+0xa4>)
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    2be6:	491a      	ldr	r1, [pc, #104]	; (2c50 <am_hal_tpiu_enable+0xa8>)
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    2be8:	6010      	str	r0, [r2, #0]
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    2bea:	2502      	movs	r5, #2
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    2bec:	2000      	movs	r0, #0
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    2bee:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    2bf2:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    2bf4:	6008      	str	r0, [r1, #0]
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    2bf6:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    2bf8:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    2bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    2c00:	f7ff bc92 	b.w	2528 <am_hal_flash_delay>
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    2c04:	4c0f      	ldr	r4, [pc, #60]	; (2c44 <am_hal_tpiu_enable+0x9c>)
    2c06:	6905      	ldr	r5, [r0, #16]
    2c08:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    2c0a:	6882      	ldr	r2, [r0, #8]
    2c0c:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    2c10:	68c3      	ldr	r3, [r0, #12]
    2c12:	4c10      	ldr	r4, [pc, #64]	; (2c54 <am_hal_tpiu_enable+0xac>)
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    2c14:	490d      	ldr	r1, [pc, #52]	; (2c4c <am_hal_tpiu_enable+0xa4>)
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    2c16:	1e5d      	subs	r5, r3, #1
    2c18:	2201      	movs	r2, #1
    2c1a:	40aa      	lsls	r2, r5
    2c1c:	6022      	str	r2, [r4, #0]
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    2c1e:	6840      	ldr	r0, [r0, #4]
    2c20:	680b      	ldr	r3, [r1, #0]
    2c22:	4303      	orrs	r3, r0
    2c24:	600b      	str	r3, [r1, #0]
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    2c26:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    2c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    2c2e:	f7ff bc7b 	b.w	2528 <am_hal_flash_delay>
    2c32:	2005      	movs	r0, #5
    2c34:	e7d4      	b.n	2be0 <am_hal_tpiu_enable+0x38>
    2c36:	bf00      	nop
    2c38:	e0040304 	.word	0xe0040304
    2c3c:	001da380 	.word	0x001da380
    2c40:	000f4240 	.word	0x000f4240
    2c44:	e0040010 	.word	0xe0040010
    2c48:	e00400f0 	.word	0xe00400f0
    2c4c:	40020250 	.word	0x40020250
    2c50:	e0040f00 	.word	0xe0040f00
    2c54:	e0040004 	.word	0xe0040004

00002c58 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    2c58:	4b01      	ldr	r3, [pc, #4]	; (2c60 <am_hal_vcomp_disable+0x8>)
    2c5a:	2237      	movs	r2, #55	; 0x37
    2c5c:	601a      	str	r2, [r3, #0]
    2c5e:	4770      	bx	lr
    2c60:	4000c008 	.word	0x4000c008
    2c64:	20434441 	.word	0x20434441
    2c68:	54414256 	.word	0x54414256
    2c6c:	6e612054 	.word	0x6e612054
    2c70:	65542064 	.word	0x65542064
    2c74:	7265706d 	.word	0x7265706d
    2c78:	72757461 	.word	0x72757461
    2c7c:	65532065 	.word	0x65532065
    2c80:	6e69736e 	.word	0x6e69736e
    2c84:	78452067 	.word	0x78452067
    2c88:	6c706d61 	.word	0x6c706d61
    2c8c:	000a2e65 	.word	0x000a2e65
    2c90:	0000000a 	.word	0x0000000a
    2c94:	4d495443 	.word	0x4d495443
    2c98:	3d335245 	.word	0x3d335245
    2c9c:	30257830 	.word	0x30257830
    2ca0:	40205838 	.word	0x40205838
    2ca4:	25783020 	.word	0x25783020
    2ca8:	0a583830 	.word	0x0a583830
    2cac:	00000000 	.word	0x00000000
    2cb0:	20434441 	.word	0x20434441
    2cb4:	49474552 	.word	0x49474552
    2cb8:	52455453 	.word	0x52455453
    2cbc:	20402053 	.word	0x20402053
    2cc0:	30257830 	.word	0x30257830
    2cc4:	000a5838 	.word	0x000a5838
    2cc8:	20434441 	.word	0x20434441
    2ccc:	20474643 	.word	0x20474643
    2cd0:	203d2020 	.word	0x203d2020
    2cd4:	30257830 	.word	0x30257830
    2cd8:	000a5838 	.word	0x000a5838
    2cdc:	20434441 	.word	0x20434441
    2ce0:	544f4c53 	.word	0x544f4c53
    2ce4:	203d2030 	.word	0x203d2030
    2ce8:	30257830 	.word	0x30257830
    2cec:	000a5838 	.word	0x000a5838
    2cf0:	20434441 	.word	0x20434441
    2cf4:	544f4c53 	.word	0x544f4c53
    2cf8:	203d2031 	.word	0x203d2031
    2cfc:	30257830 	.word	0x30257830
    2d00:	000a5838 	.word	0x000a5838
    2d04:	20434441 	.word	0x20434441
    2d08:	544f4c53 	.word	0x544f4c53
    2d0c:	203d2032 	.word	0x203d2032
    2d10:	30257830 	.word	0x30257830
    2d14:	000a5838 	.word	0x000a5838
    2d18:	20434441 	.word	0x20434441
    2d1c:	544f4c53 	.word	0x544f4c53
    2d20:	203d2033 	.word	0x203d2033
    2d24:	30257830 	.word	0x30257830
    2d28:	000a5838 	.word	0x000a5838
    2d2c:	20434441 	.word	0x20434441
    2d30:	544f4c53 	.word	0x544f4c53
    2d34:	203d2034 	.word	0x203d2034
    2d38:	30257830 	.word	0x30257830
    2d3c:	000a5838 	.word	0x000a5838
    2d40:	20434441 	.word	0x20434441
    2d44:	544f4c53 	.word	0x544f4c53
    2d48:	203d2035 	.word	0x203d2035
    2d4c:	30257830 	.word	0x30257830
    2d50:	000a5838 	.word	0x000a5838
    2d54:	20434441 	.word	0x20434441
    2d58:	544f4c53 	.word	0x544f4c53
    2d5c:	203d2036 	.word	0x203d2036
    2d60:	30257830 	.word	0x30257830
    2d64:	000a5838 	.word	0x000a5838
    2d68:	20434441 	.word	0x20434441
    2d6c:	544f4c53 	.word	0x544f4c53
    2d70:	203d2037 	.word	0x203d2037
    2d74:	30257830 	.word	0x30257830
    2d78:	000a5838 	.word	0x000a5838
    2d7c:	4d495254 	.word	0x4d495254
    2d80:	2044454d 	.word	0x2044454d
    2d84:	504d4554 	.word	0x504d4554
    2d88:	20202020 	.word	0x20202020
    2d8c:	2e25203d 	.word	0x2e25203d
    2d90:	000a6633 	.word	0x000a6633
    2d94:	4d495254 	.word	0x4d495254
    2d98:	2044454d 	.word	0x2044454d
    2d9c:	544c4f56 	.word	0x544c4f56
    2da0:	20454741 	.word	0x20454741
    2da4:	2e25203d 	.word	0x2e25203d
    2da8:	000a6633 	.word	0x000a6633
    2dac:	4d495254 	.word	0x4d495254
    2db0:	2044454d 	.word	0x2044454d
    2db4:	7366664f 	.word	0x7366664f
    2db8:	20207465 	.word	0x20207465
    2dbc:	2e25203d 	.word	0x2e25203d
    2dc0:	000a6633 	.word	0x000a6633
    2dc4:	696c6163 	.word	0x696c6163
    2dc8:	74617262 	.word	0x74617262
    2dcc:	00006465 	.word	0x00006465
    2dd0:	61636e75 	.word	0x61636e75
    2dd4:	7262696c 	.word	0x7262696c
    2dd8:	64657461 	.word	0x64657461
    2ddc:	66656420 	.word	0x66656420
    2de0:	746c7561 	.word	0x746c7561
    2de4:	00000000 	.word	0x00000000
    2de8:	65746f4e 	.word	0x65746f4e
    2dec:	74202d20 	.word	0x74202d20
    2df0:	65736568 	.word	0x65736568
    2df4:	69727420 	.word	0x69727420
    2df8:	6176206d 	.word	0x6176206d
    2dfc:	7365756c 	.word	0x7365756c
    2e00:	65726120 	.word	0x65726120
    2e04:	73252720 	.word	0x73252720
    2e08:	61762027 	.word	0x61762027
    2e0c:	7365756c 	.word	0x7365756c
    2e10:	00000a2e 	.word	0x00000a2e
    2e14:	54414256 	.word	0x54414256
    2e18:	203d2054 	.word	0x203d2054
    2e1c:	332e253c 	.word	0x332e253c
    2e20:	28203e66 	.word	0x28203e66
    2e24:	30257830 	.word	0x30257830
    2e28:	20295834 	.word	0x20295834
    2e2c:	00000000 	.word	0x00000000
    2e30:	504d4554 	.word	0x504d4554
    2e34:	25203d20 	.word	0x25203d20
    2e38:	2066322e 	.word	0x2066322e
    2e3c:	30282043 	.word	0x30282043
    2e40:	34302578 	.word	0x34302578
    2e44:	00202958 	.word	0x00202958
    2e48:	322e2520 	.word	0x322e2520
    2e4c:	00462066 	.word	0x00462066
    2e50:	0a0a0a0a 	.word	0x0a0a0a0a
    2e54:	0a0a0a0a 	.word	0x0a0a0a0a
    2e58:	0a0a0a0a 	.word	0x0a0a0a0a
    2e5c:	0a0a0a0a 	.word	0x0a0a0a0a
    2e60:	00000a0a 	.word	0x00000a0a
    2e64:	69797254 	.word	0x69797254
    2e68:	7420676e 	.word	0x7420676e
    2e6c:	6f63206f 	.word	0x6f63206f
    2e70:	6769666e 	.word	0x6769666e
    2e74:	20657275 	.word	0x20657275
    2e78:	41206e61 	.word	0x41206e61
    2e7c:	73204344 	.word	0x73204344
    2e80:	20746f6c 	.word	0x20746f6c
    2e84:	74616874 	.word	0x74616874
    2e88:	656f6420 	.word	0x656f6420
    2e8c:	74276e73 	.word	0x74276e73
    2e90:	69786520 	.word	0x69786520
    2e94:	002e7473 	.word	0x002e7473
    2e98:	2e5c2e2e 	.word	0x2e5c2e2e
    2e9c:	6d615c2e 	.word	0x6d615c2e
    2ea0:	6c61685f 	.word	0x6c61685f
    2ea4:	6364615f 	.word	0x6364615f
    2ea8:	0000632e 	.word	0x0000632e

00002eac <am_hal_cachectrl_defaults>:
    2eac:	50000001 00010300 00010101 685f6d61     ...P........am_h
    2ebc:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    2ecc:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    2edc:	63206469 6b636f6c 74657320 676e6974     id clock setting
    2eec:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    2efc:	6b6c635f 2e6e6567 00000063 6e6e6143     _clkgen.c...Cann
    2f0c:	6520746f 6c62616e 6f6d2065 74206572     ot enable more t
    2f1c:	206e6168 20656e6f 69726570 72656870     han one peripher
    2f2c:	61206c61 20612074 656d6974 0000002e     al at a time....
    2f3c:	2e5c2e2e 6d615c2e 6c61685f 7277705f     ..\..\am_hal_pwr
    2f4c:	6c727463 0000632e                       ctrl.c..
