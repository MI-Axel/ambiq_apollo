
freertos_lowpower_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000050d0  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00002300  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000030  10002300  000050d0  00022300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000043a0  10002330  00005100  00022330  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00022330  2**0
                  CONTENTS, READONLY
  5 .debug_info   00017619  00000000  00000000  00022367  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000044b2  00000000  00000000  00039980  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000e90  00000000  00000000  0003de32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001858  00000000  00000000  0003ecc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00008af9  00000000  00000000  0004051a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005251  00000000  00000000  00049013  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  0004e264  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00002df8  00000000  00000000  0004e2e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003d92  00000000  00000000  000510d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 23 00 10 11 33 00 00 79 33 00 00 b9 33 00 00     .#...3..y3...3..
      10:	b9 33 00 00 b9 33 00 00 b9 33 00 00 00 00 00 00     .3...3...3......
	...
      2c:	01 02 00 00 7f 33 00 00 00 00 00 00 f1 03 00 00     .....3..........
      3c:	59 04 00 00 7f 33 00 00 7f 33 00 00 7f 33 00 00     Y....3...3...3..
      4c:	7f 33 00 00 7f 33 00 00 7f 33 00 00 7f 33 00 00     .3...3...3...3..
      5c:	7f 33 00 00 7f 33 00 00 7f 33 00 00 7f 33 00 00     .3...3...3...3..
      6c:	7f 33 00 00 39 2e 00 00 39 32 00 00 7f 33 00 00     .3..9...92...3..
      7c:	7f 33 00 00 7f 33 00 00 7f 33 00 00 7f 33 00 00     .3...3...3...3..
      8c:	95 06 00 00 7f 33 00 00 7f 33 00 00 7f 33 00 00     .....3...3...3..
      9c:	7f 33 00 00 7f 33 00 00 7f 33 00 00 7f 33 00 00     .3...3...3...3..
      ac:	7f 33 00 00 7f 33 00 00 7f 33 00 00 7f 33 00 00     .3...3...3...3..
      bc:	7f 33 00 00                                         .3..

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
     160:	b480      	push	{r7}
     162:	b085      	sub	sp, #20
     164:	af00      	add	r7, sp, #0
     166:	60f8      	str	r0, [r7, #12]
     168:	60b9      	str	r1, [r7, #8]
     16a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
     16c:	68fb      	ldr	r3, [r7, #12]
     16e:	3b04      	subs	r3, #4
     170:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
     172:	68fb      	ldr	r3, [r7, #12]
     174:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     178:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
     17a:	68fb      	ldr	r3, [r7, #12]
     17c:	3b04      	subs	r3, #4
     17e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
     180:	68bb      	ldr	r3, [r7, #8]
     182:	f023 0201 	bic.w	r2, r3, #1
     186:	68fb      	ldr	r3, [r7, #12]
     188:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
     18a:	68fb      	ldr	r3, [r7, #12]
     18c:	3b04      	subs	r3, #4
     18e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
     190:	4a0c      	ldr	r2, [pc, #48]	; (1c4 <pxPortInitialiseStack+0x64>)
     192:	68fb      	ldr	r3, [r7, #12]
     194:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
     196:	68fb      	ldr	r3, [r7, #12]
     198:	3b14      	subs	r3, #20
     19a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
     19c:	687a      	ldr	r2, [r7, #4]
     19e:	68fb      	ldr	r3, [r7, #12]
     1a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
     1a2:	68fb      	ldr	r3, [r7, #12]
     1a4:	3b04      	subs	r3, #4
     1a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
     1a8:	68fb      	ldr	r3, [r7, #12]
     1aa:	f06f 0202 	mvn.w	r2, #2
     1ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
     1b0:	68fb      	ldr	r3, [r7, #12]
     1b2:	3b20      	subs	r3, #32
     1b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
     1b6:	68fb      	ldr	r3, [r7, #12]
}
     1b8:	4618      	mov	r0, r3
     1ba:	3714      	adds	r7, #20
     1bc:	46bd      	mov	sp, r7
     1be:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c2:	4770      	bx	lr
     1c4:	000001c9 	.word	0x000001c9

000001c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
     1c8:	b480      	push	{r7}
     1ca:	b083      	sub	sp, #12
     1cc:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
     1ce:	4b08      	ldr	r3, [pc, #32]	; (1f0 <prvTaskExitError+0x28>)
     1d0:	681b      	ldr	r3, [r3, #0]
     1d2:	f1b3 3fff 	cmp.w	r3, #4294967295
     1d6:	d000      	beq.n	1da <prvTaskExitError+0x12>
     1d8:	e7fe      	b.n	1d8 <prvTaskExitError+0x10>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
     1da:	f04f 0380 	mov.w	r3, #128	; 0x80
     1de:	f383 8811 	msr	BASEPRI, r3
     1e2:	f3bf 8f6f 	isb	sy
     1e6:	f3bf 8f4f 	dsb	sy
     1ea:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	for( ;; );
     1ec:	e7fe      	b.n	1ec <prvTaskExitError+0x24>
     1ee:	bf00      	nop
     1f0:	10002300 	.word	0x10002300
	...

00000200 <am_svcall_isr>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
     200:	4b07      	ldr	r3, [pc, #28]	; (220 <pxCurrentTCBConst2>)
     202:	6819      	ldr	r1, [r3, #0]
     204:	6808      	ldr	r0, [r1, #0]
     206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     20a:	f380 8809 	msr	PSP, r0
     20e:	f3bf 8f6f 	isb	sy
     212:	f04f 0000 	mov.w	r0, #0
     216:	f380 8811 	msr	BASEPRI, r0
     21a:	4770      	bx	lr
     21c:	f3af 8000 	nop.w

00000220 <pxCurrentTCBConst2>:
     220:	10006358 	.word	0x10006358
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
     224:	bf00      	nop
     226:	bf00      	nop

00000228 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
     228:	4806      	ldr	r0, [pc, #24]	; (244 <prvPortStartFirstTask+0x1c>)
     22a:	6800      	ldr	r0, [r0, #0]
     22c:	6800      	ldr	r0, [r0, #0]
     22e:	f380 8808 	msr	MSP, r0
     232:	b662      	cpsie	i
     234:	b661      	cpsie	f
     236:	f3bf 8f4f 	dsb	sy
     23a:	f3bf 8f6f 	isb	sy
     23e:	df00      	svc	0
     240:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
     242:	bf00      	nop
     244:	e000ed08 	.word	0xe000ed08

00000248 <vPortEnableVFP>:
/*-----------------------------------------------------------*/
/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
     248:	f8df 000c 	ldr.w	r0, [pc, #12]	; 258 <vPortEnableVFP+0x10>
     24c:	6801      	ldr	r1, [r0, #0]
     24e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     252:	6001      	str	r1, [r0, #0]
     254:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
     256:	bf00      	nop
     258:	e000ed88 	.word	0xe000ed88

0000025c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
     25c:	b580      	push	{r7, lr}
     25e:	b084      	sub	sp, #16
     260:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
     262:	4b37      	ldr	r3, [pc, #220]	; (340 <xPortStartScheduler+0xe4>)
     264:	681b      	ldr	r3, [r3, #0]
     266:	4a37      	ldr	r2, [pc, #220]	; (344 <xPortStartScheduler+0xe8>)
     268:	4293      	cmp	r3, r2
     26a:	d100      	bne.n	26e <xPortStartScheduler+0x12>
     26c:	e7fe      	b.n	26c <xPortStartScheduler+0x10>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
     26e:	4b34      	ldr	r3, [pc, #208]	; (340 <xPortStartScheduler+0xe4>)
     270:	681b      	ldr	r3, [r3, #0]
     272:	4a35      	ldr	r2, [pc, #212]	; (348 <xPortStartScheduler+0xec>)
     274:	4293      	cmp	r3, r2
     276:	d100      	bne.n	27a <xPortStartScheduler+0x1e>
     278:	e7fe      	b.n	278 <xPortStartScheduler+0x1c>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
     27a:	4b34      	ldr	r3, [pc, #208]	; (34c <xPortStartScheduler+0xf0>)
     27c:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
     27e:	68fb      	ldr	r3, [r7, #12]
     280:	781b      	ldrb	r3, [r3, #0]
     282:	b2db      	uxtb	r3, r3
     284:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
     286:	68fb      	ldr	r3, [r7, #12]
     288:	22ff      	movs	r2, #255	; 0xff
     28a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
     28c:	68fb      	ldr	r3, [r7, #12]
     28e:	781b      	ldrb	r3, [r3, #0]
     290:	b2db      	uxtb	r3, r3
     292:	71fb      	strb	r3, [r7, #7]

		/* The kernel interrupt priority should be set to the lowest
		priority. */
		configASSERT( ucMaxPriorityValue == ( configKERNEL_INTERRUPT_PRIORITY & ucMaxPriorityValue ) );
     294:	79fb      	ldrb	r3, [r7, #7]
     296:	b2db      	uxtb	r3, r3
     298:	f023 031f 	bic.w	r3, r3, #31
     29c:	b2da      	uxtb	r2, r3
     29e:	79fb      	ldrb	r3, [r7, #7]
     2a0:	b2db      	uxtb	r3, r3
     2a2:	429a      	cmp	r2, r3
     2a4:	d000      	beq.n	2a8 <xPortStartScheduler+0x4c>
     2a6:	e7fe      	b.n	2a6 <xPortStartScheduler+0x4a>

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
     2a8:	79fb      	ldrb	r3, [r7, #7]
     2aa:	b2db      	uxtb	r3, r3
     2ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     2b0:	b2da      	uxtb	r2, r3
     2b2:	4b27      	ldr	r3, [pc, #156]	; (350 <xPortStartScheduler+0xf4>)
     2b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
     2b6:	4b27      	ldr	r3, [pc, #156]	; (354 <xPortStartScheduler+0xf8>)
     2b8:	2207      	movs	r2, #7
     2ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
     2bc:	e009      	b.n	2d2 <xPortStartScheduler+0x76>
		{
			ulMaxPRIGROUPValue--;
     2be:	4b25      	ldr	r3, [pc, #148]	; (354 <xPortStartScheduler+0xf8>)
     2c0:	681b      	ldr	r3, [r3, #0]
     2c2:	3b01      	subs	r3, #1
     2c4:	4a23      	ldr	r2, [pc, #140]	; (354 <xPortStartScheduler+0xf8>)
     2c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
     2c8:	79fb      	ldrb	r3, [r7, #7]
     2ca:	b2db      	uxtb	r3, r3
     2cc:	005b      	lsls	r3, r3, #1
     2ce:	b2db      	uxtb	r3, r3
     2d0:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
     2d2:	79fb      	ldrb	r3, [r7, #7]
     2d4:	b2db      	uxtb	r3, r3
     2d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
     2da:	2b80      	cmp	r3, #128	; 0x80
     2dc:	d0ef      	beq.n	2be <xPortStartScheduler+0x62>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
     2de:	4b1d      	ldr	r3, [pc, #116]	; (354 <xPortStartScheduler+0xf8>)
     2e0:	681b      	ldr	r3, [r3, #0]
     2e2:	021b      	lsls	r3, r3, #8
     2e4:	4a1b      	ldr	r2, [pc, #108]	; (354 <xPortStartScheduler+0xf8>)
     2e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
     2e8:	4b1a      	ldr	r3, [pc, #104]	; (354 <xPortStartScheduler+0xf8>)
     2ea:	681b      	ldr	r3, [r3, #0]
     2ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     2f0:	4a18      	ldr	r2, [pc, #96]	; (354 <xPortStartScheduler+0xf8>)
     2f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
     2f4:	68bb      	ldr	r3, [r7, #8]
     2f6:	b2da      	uxtb	r2, r3
     2f8:	68fb      	ldr	r3, [r7, #12]
     2fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
     2fc:	4a16      	ldr	r2, [pc, #88]	; (358 <xPortStartScheduler+0xfc>)
     2fe:	4b16      	ldr	r3, [pc, #88]	; (358 <xPortStartScheduler+0xfc>)
     300:	681b      	ldr	r3, [r3, #0]
     302:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
     306:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
     308:	4a13      	ldr	r2, [pc, #76]	; (358 <xPortStartScheduler+0xfc>)
     30a:	4b13      	ldr	r3, [pc, #76]	; (358 <xPortStartScheduler+0xfc>)
     30c:	681b      	ldr	r3, [r3, #0]
     30e:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
     312:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
     314:	f000 f9d4 	bl	6c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
     318:	4b10      	ldr	r3, [pc, #64]	; (35c <xPortStartScheduler+0x100>)
     31a:	2200      	movs	r2, #0
     31c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
     31e:	f7ff ff93 	bl	248 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
     322:	4a0f      	ldr	r2, [pc, #60]	; (360 <xPortStartScheduler+0x104>)
     324:	4b0e      	ldr	r3, [pc, #56]	; (360 <xPortStartScheduler+0x104>)
     326:	681b      	ldr	r3, [r3, #0]
     328:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     32c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
     32e:	f7ff ff7b 	bl	228 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
     332:	f7ff ff49 	bl	1c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
     336:	2300      	movs	r3, #0
}
     338:	4618      	mov	r0, r3
     33a:	3710      	adds	r7, #16
     33c:	46bd      	mov	sp, r7
     33e:	bd80      	pop	{r7, pc}
     340:	e000ed00 	.word	0xe000ed00
     344:	410fc271 	.word	0x410fc271
     348:	410fc270 	.word	0x410fc270
     34c:	e000e400 	.word	0xe000e400
     350:	10002334 	.word	0x10002334
     354:	10002338 	.word	0x10002338
     358:	e000ed20 	.word	0xe000ed20
     35c:	10002300 	.word	0x10002300
     360:	e000ef34 	.word	0xe000ef34

00000364 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
     364:	b480      	push	{r7}
     366:	b083      	sub	sp, #12
     368:	af00      	add	r7, sp, #0
     36a:	f04f 0380 	mov.w	r3, #128	; 0x80
     36e:	f383 8811 	msr	BASEPRI, r3
     372:	f3bf 8f6f 	isb	sy
     376:	f3bf 8f4f 	dsb	sy
     37a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
     37c:	4b0a      	ldr	r3, [pc, #40]	; (3a8 <vPortEnterCritical+0x44>)
     37e:	681b      	ldr	r3, [r3, #0]
     380:	3301      	adds	r3, #1
     382:	4a09      	ldr	r2, [pc, #36]	; (3a8 <vPortEnterCritical+0x44>)
     384:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
     386:	4b08      	ldr	r3, [pc, #32]	; (3a8 <vPortEnterCritical+0x44>)
     388:	681b      	ldr	r3, [r3, #0]
     38a:	2b01      	cmp	r3, #1
     38c:	d105      	bne.n	39a <vPortEnterCritical+0x36>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
     38e:	4b07      	ldr	r3, [pc, #28]	; (3ac <vPortEnterCritical+0x48>)
     390:	681b      	ldr	r3, [r3, #0]
     392:	b2db      	uxtb	r3, r3
     394:	2b00      	cmp	r3, #0
     396:	d000      	beq.n	39a <vPortEnterCritical+0x36>
     398:	e7fe      	b.n	398 <vPortEnterCritical+0x34>
	}
}
     39a:	bf00      	nop
     39c:	370c      	adds	r7, #12
     39e:	46bd      	mov	sp, r7
     3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     3a4:	4770      	bx	lr
     3a6:	bf00      	nop
     3a8:	10002300 	.word	0x10002300
     3ac:	e000ed04 	.word	0xe000ed04

000003b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
     3b0:	b480      	push	{r7}
     3b2:	b083      	sub	sp, #12
     3b4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
     3b6:	4b0c      	ldr	r3, [pc, #48]	; (3e8 <vPortExitCritical+0x38>)
     3b8:	681b      	ldr	r3, [r3, #0]
     3ba:	2b00      	cmp	r3, #0
     3bc:	d100      	bne.n	3c0 <vPortExitCritical+0x10>
     3be:	e7fe      	b.n	3be <vPortExitCritical+0xe>
	uxCriticalNesting--;
     3c0:	4b09      	ldr	r3, [pc, #36]	; (3e8 <vPortExitCritical+0x38>)
     3c2:	681b      	ldr	r3, [r3, #0]
     3c4:	3b01      	subs	r3, #1
     3c6:	4a08      	ldr	r2, [pc, #32]	; (3e8 <vPortExitCritical+0x38>)
     3c8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
     3ca:	4b07      	ldr	r3, [pc, #28]	; (3e8 <vPortExitCritical+0x38>)
     3cc:	681b      	ldr	r3, [r3, #0]
     3ce:	2b00      	cmp	r3, #0
     3d0:	d104      	bne.n	3dc <vPortExitCritical+0x2c>
     3d2:	2300      	movs	r3, #0
     3d4:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
     3d6:	687b      	ldr	r3, [r7, #4]
     3d8:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
     3dc:	bf00      	nop
     3de:	370c      	adds	r7, #12
     3e0:	46bd      	mov	sp, r7
     3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3e6:	4770      	bx	lr
     3e8:	10002300 	.word	0x10002300
     3ec:	00000000 	.word	0x00000000

000003f0 <am_pendsv_isr>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
     3f0:	f3ef 8009 	mrs	r0, PSP
     3f4:	f3bf 8f6f 	isb	sy
     3f8:	4b15      	ldr	r3, [pc, #84]	; (450 <pxCurrentTCBConst>)
     3fa:	681a      	ldr	r2, [r3, #0]
     3fc:	f01e 0f10 	tst.w	lr, #16
     400:	bf08      	it	eq
     402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
     406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     40a:	6010      	str	r0, [r2, #0]
     40c:	f84d 3d04 	str.w	r3, [sp, #-4]!
     410:	f04f 0080 	mov.w	r0, #128	; 0x80
     414:	f380 8811 	msr	BASEPRI, r0
     418:	f3bf 8f4f 	dsb	sy
     41c:	f3bf 8f6f 	isb	sy
     420:	f001 fc24 	bl	1c6c <vTaskSwitchContext>
     424:	f04f 0000 	mov.w	r0, #0
     428:	f380 8811 	msr	BASEPRI, r0
     42c:	bc08      	pop	{r3}
     42e:	6819      	ldr	r1, [r3, #0]
     430:	6808      	ldr	r0, [r1, #0]
     432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     436:	f01e 0f10 	tst.w	lr, #16
     43a:	bf08      	it	eq
     43c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
     440:	f380 8809 	msr	PSP, r0
     444:	f3bf 8f6f 	isb	sy
     448:	4770      	bx	lr
     44a:	bf00      	nop
     44c:	f3af 8000 	nop.w

00000450 <pxCurrentTCBConst>:
     450:	10006358 	.word	0x10006358
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
     454:	bf00      	nop
     456:	bf00      	nop

00000458 <am_systick_isr>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
     458:	b580      	push	{r7, lr}
     45a:	b082      	sub	sp, #8
     45c:	af00      	add	r7, sp, #0
	__asm volatile
     45e:	f04f 0380 	mov.w	r3, #128	; 0x80
     462:	f383 8811 	msr	BASEPRI, r3
     466:	f3bf 8f6f 	isb	sy
     46a:	f3bf 8f4f 	dsb	sy
     46e:	607b      	str	r3, [r7, #4]
	// Addition for support of SystemView Profiler
	traceISR_ENTER();
	// End addition
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
     470:	f001 fb58 	bl	1b24 <xTaskIncrementTick>
     474:	4603      	mov	r3, r0
     476:	2b00      	cmp	r3, #0
     478:	d003      	beq.n	482 <am_systick_isr+0x2a>
		  traceISR_EXIT_TO_SCHEDULER();
		  // End addition

			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
     47a:	4b06      	ldr	r3, [pc, #24]	; (494 <am_systick_isr+0x3c>)
     47c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     480:	601a      	str	r2, [r3, #0]
     482:	2300      	movs	r3, #0
     484:	603b      	str	r3, [r7, #0]
	__asm volatile
     486:	683b      	ldr	r3, [r7, #0]
     488:	f383 8811 	msr	BASEPRI, r3
		  traceISR_EXIT();
		}
		// End addition
	}
	portENABLE_INTERRUPTS();
}
     48c:	bf00      	nop
     48e:	3708      	adds	r7, #8
     490:	46bd      	mov	sp, r7
     492:	bd80      	pop	{r7, pc}
     494:	e000ed04 	.word	0xe000ed04

00000498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
     498:	b480      	push	{r7}
     49a:	b083      	sub	sp, #12
     49c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
     49e:	f3ef 8305 	mrs	r3, IPSR
     4a2:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
     4a4:	687b      	ldr	r3, [r7, #4]
     4a6:	2b0f      	cmp	r3, #15
     4a8:	d90a      	bls.n	4c0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
     4aa:	4a0d      	ldr	r2, [pc, #52]	; (4e0 <vPortValidateInterruptPriority+0x48>)
     4ac:	687b      	ldr	r3, [r7, #4]
     4ae:	4413      	add	r3, r2
     4b0:	781b      	ldrb	r3, [r3, #0]
     4b2:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
     4b4:	4b0b      	ldr	r3, [pc, #44]	; (4e4 <vPortValidateInterruptPriority+0x4c>)
     4b6:	781b      	ldrb	r3, [r3, #0]
     4b8:	78fa      	ldrb	r2, [r7, #3]
     4ba:	429a      	cmp	r2, r3
     4bc:	d200      	bcs.n	4c0 <vPortValidateInterruptPriority+0x28>
     4be:	e7fe      	b.n	4be <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
     4c0:	4b09      	ldr	r3, [pc, #36]	; (4e8 <vPortValidateInterruptPriority+0x50>)
     4c2:	681b      	ldr	r3, [r3, #0]
     4c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
     4c8:	4b08      	ldr	r3, [pc, #32]	; (4ec <vPortValidateInterruptPriority+0x54>)
     4ca:	681b      	ldr	r3, [r3, #0]
     4cc:	429a      	cmp	r2, r3
     4ce:	d900      	bls.n	4d2 <vPortValidateInterruptPriority+0x3a>
     4d0:	e7fe      	b.n	4d0 <vPortValidateInterruptPriority+0x38>
	}
     4d2:	bf00      	nop
     4d4:	370c      	adds	r7, #12
     4d6:	46bd      	mov	sp, r7
     4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
     4dc:	4770      	bx	lr
     4de:	bf00      	nop
     4e0:	e000e3f0 	.word	0xe000e3f0
     4e4:	10002334 	.word	0x10002334
     4e8:	e000ed0c 	.word	0xe000ed0c
     4ec:	10002338 	.word	0x10002338

000004f0 <vPortSuppressTicksAndSleep>:
 * resolution of the Tick timer.
 */
	static uint32_t xMaximumPossibleSuppressedTicks = 0;

void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
     4f0:	b580      	push	{r7, lr}
     4f2:	b088      	sub	sp, #32
     4f4:	af00      	add	r7, sp, #0
     4f6:	6078      	str	r0, [r7, #4]
    uint32_t New_Timer, Delta_Sleep;
	TickType_t xModifiableIdleTime;
    uint32_t elapsed_time;

	/* Make sure the SysTick reload value does not overflow the counter. */
	if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
     4f8:	4b36      	ldr	r3, [pc, #216]	; (5d4 <vPortSuppressTicksAndSleep+0xe4>)
     4fa:	681b      	ldr	r3, [r3, #0]
     4fc:	687a      	ldr	r2, [r7, #4]
     4fe:	429a      	cmp	r2, r3
     500:	d902      	bls.n	508 <vPortSuppressTicksAndSleep+0x18>
	{
		xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
     502:	4b34      	ldr	r3, [pc, #208]	; (5d4 <vPortSuppressTicksAndSleep+0xe4>)
     504:	681b      	ldr	r3, [r3, #0]
     506:	607b      	str	r3, [r7, #4]


	/* Calculate the reload value required to wait xExpectedIdleTime
	tick periods.  -1 is used because this code will execute part way
	through one of the tick periods. */
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
     508:	687b      	ldr	r3, [r7, #4]
     50a:	3b01      	subs	r3, #1
     50c:	4a32      	ldr	r2, [pc, #200]	; (5d8 <vPortSuppressTicksAndSleep+0xe8>)
     50e:	6812      	ldr	r2, [r2, #0]
     510:	fb02 f303 	mul.w	r3, r2, r3
     514:	61fb      	str	r3, [r7, #28]

	/* Enter a critical section but don't use the taskENTER_CRITICAL()
	method as that will mask interrupts that should exit sleep mode. */
	__asm volatile( "cpsid i" );
     516:	b672      	cpsid	i
	__asm volatile( "dsb" );
     518:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     51c:	f3bf 8f6f 	isb	sy
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    // Adjust for the time already elapsed
    elapsed_time = am_hal_stimer_counter_get() - g_lastSTimerVal;
     520:	f004 fbd4 	bl	4ccc <am_hal_stimer_counter_get>
     524:	4602      	mov	r2, r0
     526:	4b2d      	ldr	r3, [pc, #180]	; (5dc <vPortSuppressTicksAndSleep+0xec>)
     528:	681b      	ldr	r3, [r3, #0]
     52a:	1ad3      	subs	r3, r2, r3
     52c:	61bb      	str	r3, [r7, #24]


	/* If a context switch is pending or a task is waiting for the scheduler
	to be unsuspended then abandon the low power entry. */
    /* Abandon low power entry if the sleep time is too short */
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
     52e:	f001 fdd1 	bl	20d4 <eTaskConfirmSleepModeStatus>
     532:	4603      	mov	r3, r0
     534:	2b00      	cmp	r3, #0
     536:	d006      	beq.n	546 <vPortSuppressTicksAndSleep+0x56>
     538:	4b27      	ldr	r3, [pc, #156]	; (5d8 <vPortSuppressTicksAndSleep+0xe8>)
     53a:	681a      	ldr	r2, [r3, #0]
     53c:	69bb      	ldr	r3, [r7, #24]
     53e:	441a      	add	r2, r3
     540:	69fb      	ldr	r3, [r7, #28]
     542:	429a      	cmp	r2, r3
     544:	d901      	bls.n	54a <vPortSuppressTicksAndSleep+0x5a>
#ifndef AM_FREERTOS_USE_STIMER_FOR_TICK
        am_hal_ctimer_start(AM_FREERTOS_CTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
     546:	b662      	cpsie	i
     548:	e03f      	b.n	5ca <vPortSuppressTicksAndSleep+0xda>
	}
	else
	{
        // Adjust for the time already elapsed
        ulReloadValue -= elapsed_time;
     54a:	69fa      	ldr	r2, [r7, #28]
     54c:	69bb      	ldr	r3, [r7, #24]
     54e:	1ad3      	subs	r3, r2, r3
     550:	61fb      	str	r3, [r7, #28]
        // Initialize new timeout value
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
        am_hal_stimer_compare_delta_set(0, ulReloadValue);
     552:	69f9      	ldr	r1, [r7, #28]
     554:	2000      	movs	r0, #0
     556:	f004 fbbf 	bl	4cd8 <am_hal_stimer_compare_delta_set>
		/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
		set its parameter to 0 to indicate that its implementation contains
		its own wait for interrupt or wait for event instruction, and so wfi
		should not be executed again.  However, the original expected idle
		time variable must remain unmodified, so a copy is taken. */
		xModifiableIdleTime = xExpectedIdleTime;
     55a:	687b      	ldr	r3, [r7, #4]
     55c:	617b      	str	r3, [r7, #20]

		configPRE_SLEEP_PROCESSING( xModifiableIdleTime );       // Turn OFF all Periphials in this function
     55e:	6978      	ldr	r0, [r7, #20]
     560:	f002 fe7b 	bl	325a <am_freertos_sleep>
     564:	6178      	str	r0, [r7, #20]

		if( xModifiableIdleTime > 0 )
     566:	697b      	ldr	r3, [r7, #20]
     568:	2b00      	cmp	r3, #0
     56a:	d004      	beq.n	576 <vPortSuppressTicksAndSleep+0x86>
		{
			__asm volatile( "dsb" );
     56c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "wfi" );
     570:	bf30      	wfi
			__asm volatile( "isb" );
     572:	f3bf 8f6f 	isb	sy
		}

		configPOST_SLEEP_PROCESSING( xExpectedIdleTime );       // Turn ON all Periphials in this function
     576:	6878      	ldr	r0, [r7, #4]
     578:	f002 fe7b 	bl	3272 <am_freertos_wakeup>
        // Before renable interrupts, check how many ticks the processor has been in SLEEP
        // Adjust xTickCount via vTaskStepTick( Delta_Sleep )
        // to keep xTickCount up to date, as if ticks have been running all along

#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
        New_Timer = am_hal_stimer_counter_get();
     57c:	f004 fba6 	bl	4ccc <am_hal_stimer_counter_get>
     580:	6138      	str	r0, [r7, #16]
        Delta_Sleep = (signed long) New_Timer - (signed long) g_lastSTimerVal;
     582:	693b      	ldr	r3, [r7, #16]
     584:	4a15      	ldr	r2, [pc, #84]	; (5dc <vPortSuppressTicksAndSleep+0xec>)
     586:	6812      	ldr	r2, [r2, #0]
     588:	1a9b      	subs	r3, r3, r2
     58a:	60fb      	str	r3, [r7, #12]
        g_lastSTimerVal = New_Timer - Delta_Sleep%ulTimerCountsForOneTick;
     58c:	4b12      	ldr	r3, [pc, #72]	; (5d8 <vPortSuppressTicksAndSleep+0xe8>)
     58e:	681a      	ldr	r2, [r3, #0]
     590:	68fb      	ldr	r3, [r7, #12]
     592:	fbb3 f1f2 	udiv	r1, r3, r2
     596:	fb02 f201 	mul.w	r2, r2, r1
     59a:	1a9b      	subs	r3, r3, r2
     59c:	693a      	ldr	r2, [r7, #16]
     59e:	1ad3      	subs	r3, r2, r3
     5a0:	4a0e      	ldr	r2, [pc, #56]	; (5dc <vPortSuppressTicksAndSleep+0xec>)
     5a2:	6013      	str	r3, [r2, #0]
        {
            Delta_Sleep = New_Timer; // Indicates the time elapsed since we slept
        }
#endif

        Delta_Sleep /= ulTimerCountsForOneTick;
     5a4:	4b0c      	ldr	r3, [pc, #48]	; (5d8 <vPortSuppressTicksAndSleep+0xe8>)
     5a6:	681b      	ldr	r3, [r3, #0]
     5a8:	68fa      	ldr	r2, [r7, #12]
     5aa:	fbb2 f3f3 	udiv	r3, r2, r3
     5ae:	60fb      	str	r3, [r7, #12]

        // Correct System Tick after Sleep
        vTaskStepTick( Delta_Sleep );
     5b0:	68f8      	ldr	r0, [r7, #12]
     5b2:	f001 fa99 	bl	1ae8 <vTaskStepTick>

		/* Restart System Tick */
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK

        // Clear the interrupt - to avoid extra tick counting in ISR
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
     5b6:	2001      	movs	r0, #1
     5b8:	f004 fbba 	bl	4d30 <am_hal_stimer_int_clear>
        am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
     5bc:	4b06      	ldr	r3, [pc, #24]	; (5d8 <vPortSuppressTicksAndSleep+0xe8>)
     5be:	681b      	ldr	r3, [r3, #0]
     5c0:	4619      	mov	r1, r3
     5c2:	2000      	movs	r0, #0
     5c4:	f004 fb88 	bl	4cd8 <am_hal_stimer_compare_delta_set>

        am_hal_ctimer_start(AM_FREERTOS_CTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
     5c8:	b662      	cpsie	i

	}
}
     5ca:	bf00      	nop
     5cc:	3720      	adds	r7, #32
     5ce:	46bd      	mov	sp, r7
     5d0:	bd80      	pop	{r7, pc}
     5d2:	bf00      	nop
     5d4:	10002340 	.word	0x10002340
     5d8:	1000233c 	.word	0x1000233c
     5dc:	10002330 	.word	0x10002330

000005e0 <xPortStimerTickHandler>:
//
//
//*****************************************************************************
void
xPortStimerTickHandler(void)
{
     5e0:	b580      	push	{r7, lr}
     5e2:	b088      	sub	sp, #32
     5e4:	af00      	add	r7, sp, #0
    uint32_t remainder = 0;
     5e6:	2300      	movs	r3, #0
     5e8:	617b      	str	r3, [r7, #20]
    uint32_t curSTimer;
    uint32_t timerCounts;
    uint32_t numTicksElapsed;
    BaseType_t ctxtSwitchReqd = pdFALSE;
     5ea:	2300      	movs	r3, #0
     5ec:	61bb      	str	r3, [r7, #24]

    curSTimer = am_hal_stimer_counter_get();
     5ee:	f004 fb6d 	bl	4ccc <am_hal_stimer_counter_get>
     5f2:	6138      	str	r0, [r7, #16]
    //
    // Configure the STIMER->COMPARE_0
    //
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
     5f4:	4b24      	ldr	r3, [pc, #144]	; (688 <xPortStimerTickHandler+0xa8>)
     5f6:	681b      	ldr	r3, [r3, #0]
     5f8:	4619      	mov	r1, r3
     5fa:	2000      	movs	r0, #0
     5fc:	f004 fb6c 	bl	4cd8 <am_hal_stimer_compare_delta_set>

    timerCounts = curSTimer - g_lastSTimerVal;
     600:	4b22      	ldr	r3, [pc, #136]	; (68c <xPortStimerTickHandler+0xac>)
     602:	681b      	ldr	r3, [r3, #0]
     604:	693a      	ldr	r2, [r7, #16]
     606:	1ad3      	subs	r3, r2, r3
     608:	60fb      	str	r3, [r7, #12]
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
     60a:	4b1f      	ldr	r3, [pc, #124]	; (688 <xPortStimerTickHandler+0xa8>)
     60c:	681b      	ldr	r3, [r3, #0]
     60e:	68fa      	ldr	r2, [r7, #12]
     610:	fbb2 f3f3 	udiv	r3, r2, r3
     614:	61fb      	str	r3, [r7, #28]
    remainder = timerCounts % ulTimerCountsForOneTick;
     616:	4b1c      	ldr	r3, [pc, #112]	; (688 <xPortStimerTickHandler+0xa8>)
     618:	681a      	ldr	r2, [r3, #0]
     61a:	68fb      	ldr	r3, [r7, #12]
     61c:	fbb3 f1f2 	udiv	r1, r3, r2
     620:	fb02 f201 	mul.w	r2, r2, r1
     624:	1a9b      	subs	r3, r3, r2
     626:	617b      	str	r3, [r7, #20]
    g_lastSTimerVal = curSTimer - remainder;
     628:	693a      	ldr	r2, [r7, #16]
     62a:	697b      	ldr	r3, [r7, #20]
     62c:	1ad3      	subs	r3, r2, r3
     62e:	4a17      	ldr	r2, [pc, #92]	; (68c <xPortStimerTickHandler+0xac>)
     630:	6013      	str	r3, [r2, #0]
	__asm volatile
     632:	f3ef 8211 	mrs	r2, BASEPRI
     636:	f04f 0380 	mov.w	r3, #128	; 0x80
     63a:	f383 8811 	msr	BASEPRI, r3
     63e:	f3bf 8f6f 	isb	sy
     642:	f3bf 8f4f 	dsb	sy
     646:	60ba      	str	r2, [r7, #8]
     648:	607b      	str	r3, [r7, #4]
        //
        // Increment RTOS tick
        // Allowing for need to increment the tick more than one... to avoid accumulation of
        // error in case of interrupt latencies
        //
        while (numTicksElapsed--)
     64a:	e008      	b.n	65e <xPortStimerTickHandler+0x7e>
        {
            ctxtSwitchReqd = (( xTaskIncrementTick() != pdFALSE ) ? pdTRUE : ctxtSwitchReqd);
     64c:	f001 fa6a 	bl	1b24 <xTaskIncrementTick>
     650:	4603      	mov	r3, r0
     652:	2b00      	cmp	r3, #0
     654:	d101      	bne.n	65a <xPortStimerTickHandler+0x7a>
     656:	69bb      	ldr	r3, [r7, #24]
     658:	e000      	b.n	65c <xPortStimerTickHandler+0x7c>
     65a:	2301      	movs	r3, #1
     65c:	61bb      	str	r3, [r7, #24]
        while (numTicksElapsed--)
     65e:	69fb      	ldr	r3, [r7, #28]
     660:	1e5a      	subs	r2, r3, #1
     662:	61fa      	str	r2, [r7, #28]
     664:	2b00      	cmp	r3, #0
     666:	d1f1      	bne.n	64c <xPortStimerTickHandler+0x6c>
        }
        if ( ctxtSwitchReqd != pdFALSE )
     668:	69bb      	ldr	r3, [r7, #24]
     66a:	2b00      	cmp	r3, #0
     66c:	d003      	beq.n	676 <xPortStimerTickHandler+0x96>
            //
            // A context switch is required.  Context switching is
            // performed in the PendSV interrupt. Pend the PendSV
            // interrupt.
            //
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
     66e:	4b08      	ldr	r3, [pc, #32]	; (690 <xPortStimerTickHandler+0xb0>)
     670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     674:	601a      	str	r2, [r3, #0]
     676:	2300      	movs	r3, #0
     678:	603b      	str	r3, [r7, #0]
	__asm volatile
     67a:	683b      	ldr	r3, [r7, #0]
     67c:	f383 8811 	msr	BASEPRI, r3
        	traceISR_EXIT();
        }
		// End addition
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(0);
}
     680:	bf00      	nop
     682:	3720      	adds	r7, #32
     684:	46bd      	mov	sp, r7
     686:	bd80      	pop	{r7, pc}
     688:	1000233c 	.word	0x1000233c
     68c:	10002330 	.word	0x10002330
     690:	e000ed04 	.word	0xe000ed04

00000694 <am_stimer_cmpr0_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr0_isr(void)
{
     694:	b580      	push	{r7, lr}
     696:	b082      	sub	sp, #8
     698:	af00      	add	r7, sp, #0

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
     69a:	2000      	movs	r0, #0
     69c:	f004 fb4e 	bl	4d3c <am_hal_stimer_int_status_get>
     6a0:	6078      	str	r0, [r7, #4]
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREA)
     6a2:	687b      	ldr	r3, [r7, #4]
     6a4:	f003 0301 	and.w	r3, r3, #1
     6a8:	2b00      	cmp	r3, #0
     6aa:	d004      	beq.n	6b6 <am_stimer_cmpr0_isr+0x22>
    {
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
     6ac:	2001      	movs	r0, #1
     6ae:	f004 fb3f 	bl	4d30 <am_hal_stimer_int_clear>

        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler();
     6b2:	f7ff ff95 	bl	5e0 <xPortStimerTickHandler>
    }
}
     6b6:	bf00      	nop
     6b8:	3708      	adds	r7, #8
     6ba:	46bd      	mov	sp, r7
     6bc:	bd80      	pop	{r7, pc}
	...

000006c0 <vPortSetupTimerInterrupt>:

#endif // AM_FREERTOS_USE_STIMER_FOR_TICK


void vPortSetupTimerInterrupt( void )
{
     6c0:	b580      	push	{r7, lr}
     6c2:	b082      	sub	sp, #8
     6c4:	af00      	add	r7, sp, #0
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    uint32_t oldCfg;
    /* Calculate the constants required to configure the tick interrupt. */
    #if configUSE_TICKLESS_IDLE == 2
    {
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
     6c6:	4b19      	ldr	r3, [pc, #100]	; (72c <vPortSetupTimerInterrupt+0x6c>)
     6c8:	2220      	movs	r2, #32
     6ca:	601a      	str	r2, [r3, #0]
        xMaximumPossibleSuppressedTicks = portMAX_32_BIT_NUMBER / ulTimerCountsForOneTick;
     6cc:	4b17      	ldr	r3, [pc, #92]	; (72c <vPortSetupTimerInterrupt+0x6c>)
     6ce:	681b      	ldr	r3, [r3, #0]
     6d0:	f04f 32ff 	mov.w	r2, #4294967295
     6d4:	fbb2 f3f3 	udiv	r3, r2, r3
     6d8:	4a15      	ldr	r2, [pc, #84]	; (730 <vPortSetupTimerInterrupt+0x70>)
     6da:	6013      	str	r3, [r2, #0]
    }
    #endif /* configUSE_TICKLESS_IDLE */
    //
    //
    //
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA);
     6dc:	2001      	movs	r0, #1
     6de:	f004 fb1f 	bl	4d20 <am_hal_stimer_int_enable>

    //
    // Enable the timer interrupt in the NVIC, making sure to use the
    // appropriate priority level.
    //
    am_hal_interrupt_priority_set(AM_HAL_INTERRUPT_STIMER_CMPR0, configKERNEL_INTERRUPT_PRIORITY);
     6e2:	21e0      	movs	r1, #224	; 0xe0
     6e4:	2023      	movs	r0, #35	; 0x23
     6e6:	f004 f86b 	bl	47c0 <am_hal_interrupt_priority_set>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_STIMER_CMPR0);
     6ea:	2023      	movs	r0, #35	; 0x23
     6ec:	f004 f840 	bl	4770 <am_hal_interrupt_enable>

    //
    // Configure the STIMER
    //
    oldCfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
     6f0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
     6f4:	f004 facc 	bl	4c90 <am_hal_stimer_config>
     6f8:	6078      	str	r0, [r7, #4]
    g_lastSTimerVal = am_hal_stimer_counter_get();
     6fa:	f004 fae7 	bl	4ccc <am_hal_stimer_counter_get>
     6fe:	4602      	mov	r2, r0
     700:	4b0c      	ldr	r3, [pc, #48]	; (734 <vPortSetupTimerInterrupt+0x74>)
     702:	601a      	str	r2, [r3, #0]
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
     704:	4b09      	ldr	r3, [pc, #36]	; (72c <vPortSetupTimerInterrupt+0x6c>)
     706:	681b      	ldr	r3, [r3, #0]
     708:	4619      	mov	r1, r3
     70a:	2000      	movs	r0, #0
     70c:	f004 fae4 	bl	4cd8 <am_hal_stimer_compare_delta_set>
    am_hal_stimer_config((oldCfg & ~(AM_HAL_STIMER_CFG_FREEZE|AM_REG_CTIMER_STCFG_CLKSEL_M)) | AM_STIMER_CLOCK | AM_HAL_STIMER_CFG_COMPARE_A_ENABLE);
     710:	687a      	ldr	r2, [r7, #4]
     712:	4b09      	ldr	r3, [pc, #36]	; (738 <vPortSetupTimerInterrupt+0x78>)
     714:	4013      	ands	r3, r2
     716:	f443 7381 	orr.w	r3, r3, #258	; 0x102
     71a:	f043 0301 	orr.w	r3, r3, #1
     71e:	4618      	mov	r0, r3
     720:	f004 fab6 	bl	4c90 <am_hal_stimer_config>
    //
    am_hal_ctimer_start(AM_FREERTOS_CTIMER_NUM, AM_HAL_CTIMER_BOTH);


#endif // AM_FREERTOS_USE_STIMER_FOR_TICK
}
     724:	bf00      	nop
     726:	3708      	adds	r7, #8
     728:	46bd      	mov	sp, r7
     72a:	bd80      	pop	{r7, pc}
     72c:	1000233c 	.word	0x1000233c
     730:	10002340 	.word	0x10002340
     734:	10002330 	.word	0x10002330
     738:	7ffffef0 	.word	0x7ffffef0

0000073c <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     73c:	b580      	push	{r7, lr}
     73e:	b088      	sub	sp, #32
     740:	af00      	add	r7, sp, #0
     742:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
     744:	2300      	movs	r3, #0
     746:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
     748:	f001 f8e4 	bl	1914 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     74c:	4b40      	ldr	r3, [pc, #256]	; (850 <pvPortMalloc+0x114>)
     74e:	681b      	ldr	r3, [r3, #0]
     750:	2b00      	cmp	r3, #0
     752:	d104      	bne.n	75e <pvPortMalloc+0x22>
		{
			prvHeapInit();
     754:	f000 f8be 	bl	8d4 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
     758:	4b3d      	ldr	r3, [pc, #244]	; (850 <pvPortMalloc+0x114>)
     75a:	2201      	movs	r2, #1
     75c:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     75e:	687b      	ldr	r3, [r7, #4]
     760:	2b00      	cmp	r3, #0
     762:	d00e      	beq.n	782 <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
     764:	2308      	movs	r3, #8
     766:	461a      	mov	r2, r3
     768:	687b      	ldr	r3, [r7, #4]
     76a:	4413      	add	r3, r2
     76c:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
     76e:	687b      	ldr	r3, [r7, #4]
     770:	f003 0307 	and.w	r3, r3, #7
     774:	2b00      	cmp	r3, #0
     776:	d004      	beq.n	782 <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     778:	687b      	ldr	r3, [r7, #4]
     77a:	f023 0307 	bic.w	r3, r3, #7
     77e:	3308      	adds	r3, #8
     780:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     782:	687b      	ldr	r3, [r7, #4]
     784:	2b00      	cmp	r3, #0
     786:	d057      	beq.n	838 <pvPortMalloc+0xfc>
     788:	687b      	ldr	r3, [r7, #4]
     78a:	f643 72f7 	movw	r2, #16375	; 0x3ff7
     78e:	4293      	cmp	r3, r2
     790:	d852      	bhi.n	838 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
     792:	4b30      	ldr	r3, [pc, #192]	; (854 <pvPortMalloc+0x118>)
     794:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
     796:	4b2f      	ldr	r3, [pc, #188]	; (854 <pvPortMalloc+0x118>)
     798:	681b      	ldr	r3, [r3, #0]
     79a:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     79c:	e004      	b.n	7a8 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
     79e:	69fb      	ldr	r3, [r7, #28]
     7a0:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
     7a2:	69fb      	ldr	r3, [r7, #28]
     7a4:	681b      	ldr	r3, [r3, #0]
     7a6:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     7a8:	69fb      	ldr	r3, [r7, #28]
     7aa:	685a      	ldr	r2, [r3, #4]
     7ac:	687b      	ldr	r3, [r7, #4]
     7ae:	429a      	cmp	r2, r3
     7b0:	d203      	bcs.n	7ba <pvPortMalloc+0x7e>
     7b2:	69fb      	ldr	r3, [r7, #28]
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	2b00      	cmp	r3, #0
     7b8:	d1f1      	bne.n	79e <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
     7ba:	69fb      	ldr	r3, [r7, #28]
     7bc:	4a26      	ldr	r2, [pc, #152]	; (858 <pvPortMalloc+0x11c>)
     7be:	4293      	cmp	r3, r2
     7c0:	d03a      	beq.n	838 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     7c2:	69bb      	ldr	r3, [r7, #24]
     7c4:	681b      	ldr	r3, [r3, #0]
     7c6:	2208      	movs	r2, #8
     7c8:	4413      	add	r3, r2
     7ca:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     7cc:	69fb      	ldr	r3, [r7, #28]
     7ce:	681a      	ldr	r2, [r3, #0]
     7d0:	69bb      	ldr	r3, [r7, #24]
     7d2:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     7d4:	69fb      	ldr	r3, [r7, #28]
     7d6:	685a      	ldr	r2, [r3, #4]
     7d8:	687b      	ldr	r3, [r7, #4]
     7da:	1ad3      	subs	r3, r2, r3
     7dc:	2208      	movs	r2, #8
     7de:	0052      	lsls	r2, r2, #1
     7e0:	4293      	cmp	r3, r2
     7e2:	d922      	bls.n	82a <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     7e4:	69fa      	ldr	r2, [r7, #28]
     7e6:	687b      	ldr	r3, [r7, #4]
     7e8:	4413      	add	r3, r2
     7ea:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     7ec:	69fb      	ldr	r3, [r7, #28]
     7ee:	685a      	ldr	r2, [r3, #4]
     7f0:	687b      	ldr	r3, [r7, #4]
     7f2:	1ad2      	subs	r2, r2, r3
     7f4:	68fb      	ldr	r3, [r7, #12]
     7f6:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
     7f8:	69fb      	ldr	r3, [r7, #28]
     7fa:	687a      	ldr	r2, [r7, #4]
     7fc:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     7fe:	68fb      	ldr	r3, [r7, #12]
     800:	685b      	ldr	r3, [r3, #4]
     802:	60bb      	str	r3, [r7, #8]
     804:	4b13      	ldr	r3, [pc, #76]	; (854 <pvPortMalloc+0x118>)
     806:	613b      	str	r3, [r7, #16]
     808:	e002      	b.n	810 <pvPortMalloc+0xd4>
     80a:	693b      	ldr	r3, [r7, #16]
     80c:	681b      	ldr	r3, [r3, #0]
     80e:	613b      	str	r3, [r7, #16]
     810:	693b      	ldr	r3, [r7, #16]
     812:	681b      	ldr	r3, [r3, #0]
     814:	685a      	ldr	r2, [r3, #4]
     816:	68bb      	ldr	r3, [r7, #8]
     818:	429a      	cmp	r2, r3
     81a:	d3f6      	bcc.n	80a <pvPortMalloc+0xce>
     81c:	693b      	ldr	r3, [r7, #16]
     81e:	681a      	ldr	r2, [r3, #0]
     820:	68fb      	ldr	r3, [r7, #12]
     822:	601a      	str	r2, [r3, #0]
     824:	693b      	ldr	r3, [r7, #16]
     826:	68fa      	ldr	r2, [r7, #12]
     828:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
     82a:	4b0c      	ldr	r3, [pc, #48]	; (85c <pvPortMalloc+0x120>)
     82c:	681a      	ldr	r2, [r3, #0]
     82e:	69fb      	ldr	r3, [r7, #28]
     830:	685b      	ldr	r3, [r3, #4]
     832:	1ad3      	subs	r3, r2, r3
     834:	4a09      	ldr	r2, [pc, #36]	; (85c <pvPortMalloc+0x120>)
     836:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     838:	f001 f8b2 	bl	19a0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     83c:	697b      	ldr	r3, [r7, #20]
     83e:	2b00      	cmp	r3, #0
     840:	d101      	bne.n	846 <pvPortMalloc+0x10a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     842:	f002 fd20 	bl	3286 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
     846:	697b      	ldr	r3, [r7, #20]
}
     848:	4618      	mov	r0, r3
     84a:	3720      	adds	r7, #32
     84c:	46bd      	mov	sp, r7
     84e:	bd80      	pop	{r7, pc}
     850:	10006354 	.word	0x10006354
     854:	10006344 	.word	0x10006344
     858:	1000634c 	.word	0x1000634c
     85c:	10002304 	.word	0x10002304

00000860 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     860:	b580      	push	{r7, lr}
     862:	b086      	sub	sp, #24
     864:	af00      	add	r7, sp, #0
     866:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
     868:	687b      	ldr	r3, [r7, #4]
     86a:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
     86c:	687b      	ldr	r3, [r7, #4]
     86e:	2b00      	cmp	r3, #0
     870:	d027      	beq.n	8c2 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
     872:	2308      	movs	r3, #8
     874:	425b      	negs	r3, r3
     876:	693a      	ldr	r2, [r7, #16]
     878:	4413      	add	r3, r2
     87a:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
     87c:	693b      	ldr	r3, [r7, #16]
     87e:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
     880:	f001 f848 	bl	1914 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     884:	68fb      	ldr	r3, [r7, #12]
     886:	685b      	ldr	r3, [r3, #4]
     888:	60bb      	str	r3, [r7, #8]
     88a:	4b10      	ldr	r3, [pc, #64]	; (8cc <vPortFree+0x6c>)
     88c:	617b      	str	r3, [r7, #20]
     88e:	e002      	b.n	896 <vPortFree+0x36>
     890:	697b      	ldr	r3, [r7, #20]
     892:	681b      	ldr	r3, [r3, #0]
     894:	617b      	str	r3, [r7, #20]
     896:	697b      	ldr	r3, [r7, #20]
     898:	681b      	ldr	r3, [r3, #0]
     89a:	685a      	ldr	r2, [r3, #4]
     89c:	68bb      	ldr	r3, [r7, #8]
     89e:	429a      	cmp	r2, r3
     8a0:	d3f6      	bcc.n	890 <vPortFree+0x30>
     8a2:	697b      	ldr	r3, [r7, #20]
     8a4:	681a      	ldr	r2, [r3, #0]
     8a6:	68fb      	ldr	r3, [r7, #12]
     8a8:	601a      	str	r2, [r3, #0]
     8aa:	697b      	ldr	r3, [r7, #20]
     8ac:	68fa      	ldr	r2, [r7, #12]
     8ae:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
     8b0:	68fb      	ldr	r3, [r7, #12]
     8b2:	685a      	ldr	r2, [r3, #4]
     8b4:	4b06      	ldr	r3, [pc, #24]	; (8d0 <vPortFree+0x70>)
     8b6:	681b      	ldr	r3, [r3, #0]
     8b8:	4413      	add	r3, r2
     8ba:	4a05      	ldr	r2, [pc, #20]	; (8d0 <vPortFree+0x70>)
     8bc:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
     8be:	f001 f86f 	bl	19a0 <xTaskResumeAll>
	}
}
     8c2:	bf00      	nop
     8c4:	3718      	adds	r7, #24
     8c6:	46bd      	mov	sp, r7
     8c8:	bd80      	pop	{r7, pc}
     8ca:	bf00      	nop
     8cc:	10006344 	.word	0x10006344
     8d0:	10002304 	.word	0x10002304

000008d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
     8d4:	b480      	push	{r7}
     8d6:	b083      	sub	sp, #12
     8d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     8da:	4b10      	ldr	r3, [pc, #64]	; (91c <prvHeapInit+0x48>)
     8dc:	f023 0307 	bic.w	r3, r3, #7
     8e0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     8e2:	4a0f      	ldr	r2, [pc, #60]	; (920 <prvHeapInit+0x4c>)
     8e4:	687b      	ldr	r3, [r7, #4]
     8e6:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
     8e8:	4b0d      	ldr	r3, [pc, #52]	; (920 <prvHeapInit+0x4c>)
     8ea:	2200      	movs	r2, #0
     8ec:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     8ee:	4b0d      	ldr	r3, [pc, #52]	; (924 <prvHeapInit+0x50>)
     8f0:	f643 72f8 	movw	r2, #16376	; 0x3ff8
     8f4:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
     8f6:	4b0b      	ldr	r3, [pc, #44]	; (924 <prvHeapInit+0x50>)
     8f8:	2200      	movs	r2, #0
     8fa:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
     8fc:	687b      	ldr	r3, [r7, #4]
     8fe:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     900:	683b      	ldr	r3, [r7, #0]
     902:	f643 72f8 	movw	r2, #16376	; 0x3ff8
     906:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     908:	683b      	ldr	r3, [r7, #0]
     90a:	4a06      	ldr	r2, [pc, #24]	; (924 <prvHeapInit+0x50>)
     90c:	601a      	str	r2, [r3, #0]
}
     90e:	bf00      	nop
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop
     91c:	1000234c 	.word	0x1000234c
     920:	10006344 	.word	0x10006344
     924:	1000634c 	.word	0x1000634c

00000928 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
     928:	b580      	push	{r7, lr}
     92a:	b082      	sub	sp, #8
     92c:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
     92e:	2018      	movs	r0, #24
     930:	f7ff ff04 	bl	73c <pvPortMalloc>
     934:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
     936:	687b      	ldr	r3, [r7, #4]
     938:	2b00      	cmp	r3, #0
     93a:	d007      	beq.n	94c <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
     93c:	687b      	ldr	r3, [r7, #4]
     93e:	2200      	movs	r2, #0
     940:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
     942:	687b      	ldr	r3, [r7, #4]
     944:	3304      	adds	r3, #4
     946:	4618      	mov	r0, r3
     948:	f000 f950 	bl	bec <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
     94c:	687b      	ldr	r3, [r7, #4]
	}
     94e:	4618      	mov	r0, r3
     950:	3708      	adds	r7, #8
     952:	46bd      	mov	sp, r7
     954:	bd80      	pop	{r7, pc}
	...

00000958 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
     958:	b580      	push	{r7, lr}
     95a:	b08c      	sub	sp, #48	; 0x30
     95c:	af00      	add	r7, sp, #0
     95e:	60f8      	str	r0, [r7, #12]
     960:	60b9      	str	r1, [r7, #8]
     962:	607a      	str	r2, [r7, #4]
     964:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     966:	68fb      	ldr	r3, [r7, #12]
     968:	627b      	str	r3, [r7, #36]	; 0x24
EventBits_t uxReturn, uxControlBits = 0;
     96a:	2300      	movs	r3, #0
     96c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
     96e:	2300      	movs	r3, #0
     970:	623b      	str	r3, [r7, #32]

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
     972:	68fb      	ldr	r3, [r7, #12]
     974:	2b00      	cmp	r3, #0
     976:	d100      	bne.n	97a <xEventGroupWaitBits+0x22>
     978:	e7fe      	b.n	978 <xEventGroupWaitBits+0x20>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
     97a:	68bb      	ldr	r3, [r7, #8]
     97c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
     980:	2b00      	cmp	r3, #0
     982:	d000      	beq.n	986 <xEventGroupWaitBits+0x2e>
     984:	e7fe      	b.n	984 <xEventGroupWaitBits+0x2c>
	configASSERT( uxBitsToWaitFor != 0 );
     986:	68bb      	ldr	r3, [r7, #8]
     988:	2b00      	cmp	r3, #0
     98a:	d100      	bne.n	98e <xEventGroupWaitBits+0x36>
     98c:	e7fe      	b.n	98c <xEventGroupWaitBits+0x34>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     98e:	f001 fc37 	bl	2200 <xTaskGetSchedulerState>
     992:	4603      	mov	r3, r0
     994:	2b00      	cmp	r3, #0
     996:	d102      	bne.n	99e <xEventGroupWaitBits+0x46>
     998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     99a:	2b00      	cmp	r3, #0
     99c:	d101      	bne.n	9a2 <xEventGroupWaitBits+0x4a>
     99e:	2301      	movs	r3, #1
     9a0:	e000      	b.n	9a4 <xEventGroupWaitBits+0x4c>
     9a2:	2300      	movs	r3, #0
     9a4:	2b00      	cmp	r3, #0
     9a6:	d100      	bne.n	9aa <xEventGroupWaitBits+0x52>
     9a8:	e7fe      	b.n	9a8 <xEventGroupWaitBits+0x50>
	}
	#endif

	vTaskSuspendAll();
     9aa:	f000 ffb3 	bl	1914 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
     9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9b0:	681b      	ldr	r3, [r3, #0]
     9b2:	61fb      	str	r3, [r7, #28]

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
     9b4:	683a      	ldr	r2, [r7, #0]
     9b6:	68b9      	ldr	r1, [r7, #8]
     9b8:	69f8      	ldr	r0, [r7, #28]
     9ba:	f000 f8f5 	bl	ba8 <prvTestWaitCondition>
     9be:	61b8      	str	r0, [r7, #24]

		if( xWaitConditionMet != pdFALSE )
     9c0:	69bb      	ldr	r3, [r7, #24]
     9c2:	2b00      	cmp	r3, #0
     9c4:	d00e      	beq.n	9e4 <xEventGroupWaitBits+0x8c>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
     9c6:	69fb      	ldr	r3, [r7, #28]
     9c8:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTicksToWait = ( TickType_t ) 0;
     9ca:	2300      	movs	r3, #0
     9cc:	63bb      	str	r3, [r7, #56]	; 0x38

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
     9ce:	687b      	ldr	r3, [r7, #4]
     9d0:	2b00      	cmp	r3, #0
     9d2:	d026      	beq.n	a22 <xEventGroupWaitBits+0xca>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9d6:	681a      	ldr	r2, [r3, #0]
     9d8:	68bb      	ldr	r3, [r7, #8]
     9da:	43db      	mvns	r3, r3
     9dc:	401a      	ands	r2, r3
     9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9e0:	601a      	str	r2, [r3, #0]
     9e2:	e01e      	b.n	a22 <xEventGroupWaitBits+0xca>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
     9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     9e6:	2b00      	cmp	r3, #0
     9e8:	d102      	bne.n	9f0 <xEventGroupWaitBits+0x98>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
     9ea:	69fb      	ldr	r3, [r7, #28]
     9ec:	62fb      	str	r3, [r7, #44]	; 0x2c
     9ee:	e018      	b.n	a22 <xEventGroupWaitBits+0xca>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
     9f0:	687b      	ldr	r3, [r7, #4]
     9f2:	2b00      	cmp	r3, #0
     9f4:	d003      	beq.n	9fe <xEventGroupWaitBits+0xa6>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
     9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
     9f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
     9fc:	62bb      	str	r3, [r7, #40]	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
     9fe:	683b      	ldr	r3, [r7, #0]
     a00:	2b00      	cmp	r3, #0
     a02:	d003      	beq.n	a0c <xEventGroupWaitBits+0xb4>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
     a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
     a06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
     a0a:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
     a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a0e:	1d18      	adds	r0, r3, #4
     a10:	68ba      	ldr	r2, [r7, #8]
     a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
     a14:	4313      	orrs	r3, r2
     a16:	6bba      	ldr	r2, [r7, #56]	; 0x38
     a18:	4619      	mov	r1, r3
     a1a:	f001 f9b9 	bl	1d90 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
     a1e:	2300      	movs	r3, #0
     a20:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     a22:	f000 ffbd 	bl	19a0 <xTaskResumeAll>
     a26:	6178      	str	r0, [r7, #20]

	if( xTicksToWait != ( TickType_t ) 0 )
     a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     a2a:	2b00      	cmp	r3, #0
     a2c:	d031      	beq.n	a92 <xEventGroupWaitBits+0x13a>
	{
		if( xAlreadyYielded == pdFALSE )
     a2e:	697b      	ldr	r3, [r7, #20]
     a30:	2b00      	cmp	r3, #0
     a32:	d107      	bne.n	a44 <xEventGroupWaitBits+0xec>
		{
			portYIELD_WITHIN_API();
     a34:	4b19      	ldr	r3, [pc, #100]	; (a9c <xEventGroupWaitBits+0x144>)
     a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     a3a:	601a      	str	r2, [r3, #0]
     a3c:	f3bf 8f4f 	dsb	sy
     a40:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     a44:	f001 fbfa 	bl	223c <uxTaskResetEventItemValue>
     a48:	62f8      	str	r0, [r7, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     a50:	2b00      	cmp	r3, #0
     a52:	d11a      	bne.n	a8a <xEventGroupWaitBits+0x132>
		{
			taskENTER_CRITICAL();
     a54:	f7ff fc86 	bl	364 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a5a:	681b      	ldr	r3, [r3, #0]
     a5c:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
     a5e:	683a      	ldr	r2, [r7, #0]
     a60:	68b9      	ldr	r1, [r7, #8]
     a62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
     a64:	f000 f8a0 	bl	ba8 <prvTestWaitCondition>
     a68:	4603      	mov	r3, r0
     a6a:	2b00      	cmp	r3, #0
     a6c:	d009      	beq.n	a82 <xEventGroupWaitBits+0x12a>
				{
					if( xClearOnExit != pdFALSE )
     a6e:	687b      	ldr	r3, [r7, #4]
     a70:	2b00      	cmp	r3, #0
     a72:	d006      	beq.n	a82 <xEventGroupWaitBits+0x12a>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a76:	681a      	ldr	r2, [r3, #0]
     a78:	68bb      	ldr	r3, [r7, #8]
     a7a:	43db      	mvns	r3, r3
     a7c:	401a      	ands	r2, r3
     a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a80:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     a82:	f7ff fc95 	bl	3b0 <vPortExitCritical>

			/* Prevent compiler warnings when trace macros are not used. */
			xTimeoutOccurred = pdFALSE;
     a86:	2300      	movs	r3, #0
     a88:	623b      	str	r3, [r7, #32]
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     a90:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
     a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
     a94:	4618      	mov	r0, r3
     a96:	3730      	adds	r7, #48	; 0x30
     a98:	46bd      	mov	sp, r7
     a9a:	bd80      	pop	{r7, pc}
     a9c:	e000ed04 	.word	0xe000ed04

00000aa0 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     aa0:	b580      	push	{r7, lr}
     aa2:	b08c      	sub	sp, #48	; 0x30
     aa4:	af00      	add	r7, sp, #0
     aa6:	6078      	str	r0, [r7, #4]
     aa8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     aaa:	2300      	movs	r3, #0
     aac:	62bb      	str	r3, [r7, #40]	; 0x28
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     aae:	687b      	ldr	r3, [r7, #4]
     ab0:	623b      	str	r3, [r7, #32]
BaseType_t xMatchFound = pdFALSE;
     ab2:	2300      	movs	r3, #0
     ab4:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
     ab6:	687b      	ldr	r3, [r7, #4]
     ab8:	2b00      	cmp	r3, #0
     aba:	d100      	bne.n	abe <xEventGroupSetBits+0x1e>
     abc:	e7fe      	b.n	abc <xEventGroupSetBits+0x1c>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
     abe:	683b      	ldr	r3, [r7, #0]
     ac0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
     ac4:	2b00      	cmp	r3, #0
     ac6:	d000      	beq.n	aca <xEventGroupSetBits+0x2a>
     ac8:	e7fe      	b.n	ac8 <xEventGroupSetBits+0x28>

	pxList = &( pxEventBits->xTasksWaitingForBits );
     aca:	6a3b      	ldr	r3, [r7, #32]
     acc:	3304      	adds	r3, #4
     ace:	61fb      	str	r3, [r7, #28]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     ad0:	69fb      	ldr	r3, [r7, #28]
     ad2:	3308      	adds	r3, #8
     ad4:	61bb      	str	r3, [r7, #24]
	vTaskSuspendAll();
     ad6:	f000 ff1d 	bl	1914 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
     ada:	69fb      	ldr	r3, [r7, #28]
     adc:	68db      	ldr	r3, [r3, #12]
     ade:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
     ae0:	6a3b      	ldr	r3, [r7, #32]
     ae2:	681a      	ldr	r2, [r3, #0]
     ae4:	683b      	ldr	r3, [r7, #0]
     ae6:	431a      	orrs	r2, r3
     ae8:	6a3b      	ldr	r3, [r7, #32]
     aea:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     aec:	e03c      	b.n	b68 <xEventGroupSetBits+0xc8>
		{
			pxNext = listGET_NEXT( pxListItem );
     aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     af0:	685b      	ldr	r3, [r3, #4]
     af2:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     af6:	681b      	ldr	r3, [r3, #0]
     af8:	613b      	str	r3, [r7, #16]
			xMatchFound = pdFALSE;
     afa:	2300      	movs	r3, #0
     afc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
     afe:	693b      	ldr	r3, [r7, #16]
     b00:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
     b04:	60fb      	str	r3, [r7, #12]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     b06:	693b      	ldr	r3, [r7, #16]
     b08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     b0c:	613b      	str	r3, [r7, #16]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     b0e:	68fb      	ldr	r3, [r7, #12]
     b10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
     b14:	2b00      	cmp	r3, #0
     b16:	d108      	bne.n	b2a <xEventGroupSetBits+0x8a>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     b18:	6a3b      	ldr	r3, [r7, #32]
     b1a:	681a      	ldr	r2, [r3, #0]
     b1c:	693b      	ldr	r3, [r7, #16]
     b1e:	4013      	ands	r3, r2
     b20:	2b00      	cmp	r3, #0
     b22:	d00b      	beq.n	b3c <xEventGroupSetBits+0x9c>
				{
					xMatchFound = pdTRUE;
     b24:	2301      	movs	r3, #1
     b26:	627b      	str	r3, [r7, #36]	; 0x24
     b28:	e008      	b.n	b3c <xEventGroupSetBits+0x9c>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     b2a:	6a3b      	ldr	r3, [r7, #32]
     b2c:	681a      	ldr	r2, [r3, #0]
     b2e:	693b      	ldr	r3, [r7, #16]
     b30:	401a      	ands	r2, r3
     b32:	693b      	ldr	r3, [r7, #16]
     b34:	429a      	cmp	r2, r3
     b36:	d101      	bne.n	b3c <xEventGroupSetBits+0x9c>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
     b38:	2301      	movs	r3, #1
     b3a:	627b      	str	r3, [r7, #36]	; 0x24
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
     b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     b3e:	2b00      	cmp	r3, #0
     b40:	d010      	beq.n	b64 <xEventGroupSetBits+0xc4>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     b42:	68fb      	ldr	r3, [r7, #12]
     b44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
     b48:	2b00      	cmp	r3, #0
     b4a:	d003      	beq.n	b54 <xEventGroupSetBits+0xb4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
     b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
     b4e:	693b      	ldr	r3, [r7, #16]
     b50:	4313      	orrs	r3, r2
     b52:	62bb      	str	r3, [r7, #40]	; 0x28
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     b54:	6a3b      	ldr	r3, [r7, #32]
     b56:	681b      	ldr	r3, [r3, #0]
     b58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     b5c:	4619      	mov	r1, r3
     b5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
     b60:	f001 f9bc 	bl	1edc <xTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
     b64:	697b      	ldr	r3, [r7, #20]
     b66:	62fb      	str	r3, [r7, #44]	; 0x2c
		while( pxListItem != pxListEnd )
     b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     b6a:	69bb      	ldr	r3, [r7, #24]
     b6c:	429a      	cmp	r2, r3
     b6e:	d1be      	bne.n	aee <xEventGroupSetBits+0x4e>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     b70:	6a3b      	ldr	r3, [r7, #32]
     b72:	681a      	ldr	r2, [r3, #0]
     b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
     b76:	43db      	mvns	r3, r3
     b78:	401a      	ands	r2, r3
     b7a:	6a3b      	ldr	r3, [r7, #32]
     b7c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
     b7e:	f000 ff0f 	bl	19a0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
     b82:	6a3b      	ldr	r3, [r7, #32]
     b84:	681b      	ldr	r3, [r3, #0]
}
     b86:	4618      	mov	r0, r3
     b88:	3730      	adds	r7, #48	; 0x30
     b8a:	46bd      	mov	sp, r7
     b8c:	bd80      	pop	{r7, pc}

00000b8e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
     b8e:	b580      	push	{r7, lr}
     b90:	b082      	sub	sp, #8
     b92:	af00      	add	r7, sp, #0
     b94:	6078      	str	r0, [r7, #4]
     b96:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
     b98:	6839      	ldr	r1, [r7, #0]
     b9a:	6878      	ldr	r0, [r7, #4]
     b9c:	f7ff ff80 	bl	aa0 <xEventGroupSetBits>
}
     ba0:	bf00      	nop
     ba2:	3708      	adds	r7, #8
     ba4:	46bd      	mov	sp, r7
     ba6:	bd80      	pop	{r7, pc}

00000ba8 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
     ba8:	b480      	push	{r7}
     baa:	b087      	sub	sp, #28
     bac:	af00      	add	r7, sp, #0
     bae:	60f8      	str	r0, [r7, #12]
     bb0:	60b9      	str	r1, [r7, #8]
     bb2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
     bb4:	2300      	movs	r3, #0
     bb6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
     bb8:	687b      	ldr	r3, [r7, #4]
     bba:	2b00      	cmp	r3, #0
     bbc:	d107      	bne.n	bce <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     bbe:	68fa      	ldr	r2, [r7, #12]
     bc0:	68bb      	ldr	r3, [r7, #8]
     bc2:	4013      	ands	r3, r2
     bc4:	2b00      	cmp	r3, #0
     bc6:	d00a      	beq.n	bde <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
     bc8:	2301      	movs	r3, #1
     bca:	617b      	str	r3, [r7, #20]
     bcc:	e007      	b.n	bde <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     bce:	68fa      	ldr	r2, [r7, #12]
     bd0:	68bb      	ldr	r3, [r7, #8]
     bd2:	401a      	ands	r2, r3
     bd4:	68bb      	ldr	r3, [r7, #8]
     bd6:	429a      	cmp	r2, r3
     bd8:	d101      	bne.n	bde <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
     bda:	2301      	movs	r3, #1
     bdc:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
     bde:	697b      	ldr	r3, [r7, #20]
}
     be0:	4618      	mov	r0, r3
     be2:	371c      	adds	r7, #28
     be4:	46bd      	mov	sp, r7
     be6:	f85d 7b04 	ldr.w	r7, [sp], #4
     bea:	4770      	bx	lr

00000bec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     bec:	b480      	push	{r7}
     bee:	b083      	sub	sp, #12
     bf0:	af00      	add	r7, sp, #0
     bf2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     bf4:	687b      	ldr	r3, [r7, #4]
     bf6:	f103 0208 	add.w	r2, r3, #8
     bfa:	687b      	ldr	r3, [r7, #4]
     bfc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     bfe:	687b      	ldr	r3, [r7, #4]
     c00:	f04f 32ff 	mov.w	r2, #4294967295
     c04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c06:	687b      	ldr	r3, [r7, #4]
     c08:	f103 0208 	add.w	r2, r3, #8
     c0c:	687b      	ldr	r3, [r7, #4]
     c0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c10:	687b      	ldr	r3, [r7, #4]
     c12:	f103 0208 	add.w	r2, r3, #8
     c16:	687b      	ldr	r3, [r7, #4]
     c18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     c1a:	687b      	ldr	r3, [r7, #4]
     c1c:	2200      	movs	r2, #0
     c1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     c20:	bf00      	nop
     c22:	370c      	adds	r7, #12
     c24:	46bd      	mov	sp, r7
     c26:	f85d 7b04 	ldr.w	r7, [sp], #4
     c2a:	4770      	bx	lr

00000c2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     c2c:	b480      	push	{r7}
     c2e:	b083      	sub	sp, #12
     c30:	af00      	add	r7, sp, #0
     c32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     c34:	687b      	ldr	r3, [r7, #4]
     c36:	2200      	movs	r2, #0
     c38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     c3a:	bf00      	nop
     c3c:	370c      	adds	r7, #12
     c3e:	46bd      	mov	sp, r7
     c40:	f85d 7b04 	ldr.w	r7, [sp], #4
     c44:	4770      	bx	lr

00000c46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     c46:	b480      	push	{r7}
     c48:	b085      	sub	sp, #20
     c4a:	af00      	add	r7, sp, #0
     c4c:	6078      	str	r0, [r7, #4]
     c4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
     c50:	687b      	ldr	r3, [r7, #4]
     c52:	685b      	ldr	r3, [r3, #4]
     c54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     c56:	683b      	ldr	r3, [r7, #0]
     c58:	68fa      	ldr	r2, [r7, #12]
     c5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     c5c:	68fb      	ldr	r3, [r7, #12]
     c5e:	689a      	ldr	r2, [r3, #8]
     c60:	683b      	ldr	r3, [r7, #0]
     c62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     c64:	68fb      	ldr	r3, [r7, #12]
     c66:	689b      	ldr	r3, [r3, #8]
     c68:	683a      	ldr	r2, [r7, #0]
     c6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
     c6c:	68fb      	ldr	r3, [r7, #12]
     c6e:	683a      	ldr	r2, [r7, #0]
     c70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     c72:	683b      	ldr	r3, [r7, #0]
     c74:	687a      	ldr	r2, [r7, #4]
     c76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
     c78:	687b      	ldr	r3, [r7, #4]
     c7a:	681b      	ldr	r3, [r3, #0]
     c7c:	1c5a      	adds	r2, r3, #1
     c7e:	687b      	ldr	r3, [r7, #4]
     c80:	601a      	str	r2, [r3, #0]
}
     c82:	bf00      	nop
     c84:	3714      	adds	r7, #20
     c86:	46bd      	mov	sp, r7
     c88:	f85d 7b04 	ldr.w	r7, [sp], #4
     c8c:	4770      	bx	lr

00000c8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     c8e:	b480      	push	{r7}
     c90:	b085      	sub	sp, #20
     c92:	af00      	add	r7, sp, #0
     c94:	6078      	str	r0, [r7, #4]
     c96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     c98:	683b      	ldr	r3, [r7, #0]
     c9a:	681b      	ldr	r3, [r3, #0]
     c9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     c9e:	68bb      	ldr	r3, [r7, #8]
     ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
     ca4:	d103      	bne.n	cae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     ca6:	687b      	ldr	r3, [r7, #4]
     ca8:	691b      	ldr	r3, [r3, #16]
     caa:	60fb      	str	r3, [r7, #12]
     cac:	e00c      	b.n	cc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     cae:	687b      	ldr	r3, [r7, #4]
     cb0:	3308      	adds	r3, #8
     cb2:	60fb      	str	r3, [r7, #12]
     cb4:	e002      	b.n	cbc <vListInsert+0x2e>
     cb6:	68fb      	ldr	r3, [r7, #12]
     cb8:	685b      	ldr	r3, [r3, #4]
     cba:	60fb      	str	r3, [r7, #12]
     cbc:	68fb      	ldr	r3, [r7, #12]
     cbe:	685b      	ldr	r3, [r3, #4]
     cc0:	681a      	ldr	r2, [r3, #0]
     cc2:	68bb      	ldr	r3, [r7, #8]
     cc4:	429a      	cmp	r2, r3
     cc6:	d9f6      	bls.n	cb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     cc8:	68fb      	ldr	r3, [r7, #12]
     cca:	685a      	ldr	r2, [r3, #4]
     ccc:	683b      	ldr	r3, [r7, #0]
     cce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     cd0:	683b      	ldr	r3, [r7, #0]
     cd2:	685b      	ldr	r3, [r3, #4]
     cd4:	683a      	ldr	r2, [r7, #0]
     cd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
     cd8:	683b      	ldr	r3, [r7, #0]
     cda:	68fa      	ldr	r2, [r7, #12]
     cdc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
     cde:	68fb      	ldr	r3, [r7, #12]
     ce0:	683a      	ldr	r2, [r7, #0]
     ce2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     ce4:	683b      	ldr	r3, [r7, #0]
     ce6:	687a      	ldr	r2, [r7, #4]
     ce8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
     cea:	687b      	ldr	r3, [r7, #4]
     cec:	681b      	ldr	r3, [r3, #0]
     cee:	1c5a      	adds	r2, r3, #1
     cf0:	687b      	ldr	r3, [r7, #4]
     cf2:	601a      	str	r2, [r3, #0]
}
     cf4:	bf00      	nop
     cf6:	3714      	adds	r7, #20
     cf8:	46bd      	mov	sp, r7
     cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
     cfe:	4770      	bx	lr

00000d00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     d00:	b480      	push	{r7}
     d02:	b085      	sub	sp, #20
     d04:	af00      	add	r7, sp, #0
     d06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     d08:	687b      	ldr	r3, [r7, #4]
     d0a:	691b      	ldr	r3, [r3, #16]
     d0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     d0e:	687b      	ldr	r3, [r7, #4]
     d10:	685b      	ldr	r3, [r3, #4]
     d12:	687a      	ldr	r2, [r7, #4]
     d14:	6892      	ldr	r2, [r2, #8]
     d16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     d18:	687b      	ldr	r3, [r7, #4]
     d1a:	689b      	ldr	r3, [r3, #8]
     d1c:	687a      	ldr	r2, [r7, #4]
     d1e:	6852      	ldr	r2, [r2, #4]
     d20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     d22:	68fb      	ldr	r3, [r7, #12]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	687b      	ldr	r3, [r7, #4]
     d28:	429a      	cmp	r2, r3
     d2a:	d103      	bne.n	d34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     d2c:	687b      	ldr	r3, [r7, #4]
     d2e:	689a      	ldr	r2, [r3, #8]
     d30:	68fb      	ldr	r3, [r7, #12]
     d32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     d34:	687b      	ldr	r3, [r7, #4]
     d36:	2200      	movs	r2, #0
     d38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
     d3a:	68fb      	ldr	r3, [r7, #12]
     d3c:	681b      	ldr	r3, [r3, #0]
     d3e:	1e5a      	subs	r2, r3, #1
     d40:	68fb      	ldr	r3, [r7, #12]
     d42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
     d44:	68fb      	ldr	r3, [r7, #12]
     d46:	681b      	ldr	r3, [r3, #0]
}
     d48:	4618      	mov	r0, r3
     d4a:	3714      	adds	r7, #20
     d4c:	46bd      	mov	sp, r7
     d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
     d52:	4770      	bx	lr

00000d54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
     d54:	b580      	push	{r7, lr}
     d56:	b084      	sub	sp, #16
     d58:	af00      	add	r7, sp, #0
     d5a:	6078      	str	r0, [r7, #4]
     d5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
     d5e:	687b      	ldr	r3, [r7, #4]
     d60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
     d62:	68fb      	ldr	r3, [r7, #12]
     d64:	2b00      	cmp	r3, #0
     d66:	d100      	bne.n	d6a <xQueueGenericReset+0x16>
     d68:	e7fe      	b.n	d68 <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
     d6a:	f7ff fafb 	bl	364 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     d6e:	68fb      	ldr	r3, [r7, #12]
     d70:	681a      	ldr	r2, [r3, #0]
     d72:	68fb      	ldr	r3, [r7, #12]
     d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     d76:	68f9      	ldr	r1, [r7, #12]
     d78:	6c09      	ldr	r1, [r1, #64]	; 0x40
     d7a:	fb01 f303 	mul.w	r3, r1, r3
     d7e:	441a      	add	r2, r3
     d80:	68fb      	ldr	r3, [r7, #12]
     d82:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     d84:	68fb      	ldr	r3, [r7, #12]
     d86:	2200      	movs	r2, #0
     d88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
     d8a:	68fb      	ldr	r3, [r7, #12]
     d8c:	681a      	ldr	r2, [r3, #0]
     d8e:	68fb      	ldr	r3, [r7, #12]
     d90:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     d92:	68fb      	ldr	r3, [r7, #12]
     d94:	681a      	ldr	r2, [r3, #0]
     d96:	68fb      	ldr	r3, [r7, #12]
     d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     d9a:	3b01      	subs	r3, #1
     d9c:	68f9      	ldr	r1, [r7, #12]
     d9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
     da0:	fb01 f303 	mul.w	r3, r1, r3
     da4:	441a      	add	r2, r3
     da6:	68fb      	ldr	r3, [r7, #12]
     da8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
     daa:	68fb      	ldr	r3, [r7, #12]
     dac:	22ff      	movs	r2, #255	; 0xff
     dae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
     db2:	68fb      	ldr	r3, [r7, #12]
     db4:	22ff      	movs	r2, #255	; 0xff
     db6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
     dba:	683b      	ldr	r3, [r7, #0]
     dbc:	2b00      	cmp	r3, #0
     dbe:	d114      	bne.n	dea <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     dc0:	68fb      	ldr	r3, [r7, #12]
     dc2:	691b      	ldr	r3, [r3, #16]
     dc4:	2b00      	cmp	r3, #0
     dc6:	d01a      	beq.n	dfe <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     dc8:	68fb      	ldr	r3, [r7, #12]
     dca:	3310      	adds	r3, #16
     dcc:	4618      	mov	r0, r3
     dce:	f001 f829 	bl	1e24 <xTaskRemoveFromEventList>
     dd2:	4603      	mov	r3, r0
     dd4:	2b00      	cmp	r3, #0
     dd6:	d012      	beq.n	dfe <xQueueGenericReset+0xaa>
				{
					queueYIELD_IF_USING_PREEMPTION();
     dd8:	4b0c      	ldr	r3, [pc, #48]	; (e0c <xQueueGenericReset+0xb8>)
     dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     dde:	601a      	str	r2, [r3, #0]
     de0:	f3bf 8f4f 	dsb	sy
     de4:	f3bf 8f6f 	isb	sy
     de8:	e009      	b.n	dfe <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     dea:	68fb      	ldr	r3, [r7, #12]
     dec:	3310      	adds	r3, #16
     dee:	4618      	mov	r0, r3
     df0:	f7ff fefc 	bl	bec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     df4:	68fb      	ldr	r3, [r7, #12]
     df6:	3324      	adds	r3, #36	; 0x24
     df8:	4618      	mov	r0, r3
     dfa:	f7ff fef7 	bl	bec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
     dfe:	f7ff fad7 	bl	3b0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
     e02:	2301      	movs	r3, #1
}
     e04:	4618      	mov	r0, r3
     e06:	3710      	adds	r7, #16
     e08:	46bd      	mov	sp, r7
     e0a:	bd80      	pop	{r7, pc}
     e0c:	e000ed04 	.word	0xe000ed04

00000e10 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
     e10:	b580      	push	{r7, lr}
     e12:	b08a      	sub	sp, #40	; 0x28
     e14:	af02      	add	r7, sp, #8
     e16:	60f8      	str	r0, [r7, #12]
     e18:	60b9      	str	r1, [r7, #8]
     e1a:	4613      	mov	r3, r2
     e1c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
     e1e:	68fb      	ldr	r3, [r7, #12]
     e20:	2b00      	cmp	r3, #0
     e22:	d100      	bne.n	e26 <xQueueGenericCreate+0x16>
     e24:	e7fe      	b.n	e24 <xQueueGenericCreate+0x14>

		if( uxItemSize == ( UBaseType_t ) 0 )
     e26:	68bb      	ldr	r3, [r7, #8]
     e28:	2b00      	cmp	r3, #0
     e2a:	d102      	bne.n	e32 <xQueueGenericCreate+0x22>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
     e2c:	2300      	movs	r3, #0
     e2e:	61fb      	str	r3, [r7, #28]
     e30:	e004      	b.n	e3c <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     e32:	68fb      	ldr	r3, [r7, #12]
     e34:	68ba      	ldr	r2, [r7, #8]
     e36:	fb02 f303 	mul.w	r3, r2, r3
     e3a:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
     e3c:	69fb      	ldr	r3, [r7, #28]
     e3e:	3348      	adds	r3, #72	; 0x48
     e40:	4618      	mov	r0, r3
     e42:	f7ff fc7b 	bl	73c <pvPortMalloc>
     e46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
     e48:	69bb      	ldr	r3, [r7, #24]
     e4a:	2b00      	cmp	r3, #0
     e4c:	d00b      	beq.n	e66 <xQueueGenericCreate+0x56>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
     e4e:	69bb      	ldr	r3, [r7, #24]
     e50:	3348      	adds	r3, #72	; 0x48
     e52:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
     e54:	79fa      	ldrb	r2, [r7, #7]
     e56:	69bb      	ldr	r3, [r7, #24]
     e58:	9300      	str	r3, [sp, #0]
     e5a:	4613      	mov	r3, r2
     e5c:	697a      	ldr	r2, [r7, #20]
     e5e:	68b9      	ldr	r1, [r7, #8]
     e60:	68f8      	ldr	r0, [r7, #12]
     e62:	f000 f805 	bl	e70 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
     e66:	69bb      	ldr	r3, [r7, #24]
	}
     e68:	4618      	mov	r0, r3
     e6a:	3720      	adds	r7, #32
     e6c:	46bd      	mov	sp, r7
     e6e:	bd80      	pop	{r7, pc}

00000e70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
     e70:	b580      	push	{r7, lr}
     e72:	b084      	sub	sp, #16
     e74:	af00      	add	r7, sp, #0
     e76:	60f8      	str	r0, [r7, #12]
     e78:	60b9      	str	r1, [r7, #8]
     e7a:	607a      	str	r2, [r7, #4]
     e7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
     e7e:	68bb      	ldr	r3, [r7, #8]
     e80:	2b00      	cmp	r3, #0
     e82:	d103      	bne.n	e8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
     e84:	69bb      	ldr	r3, [r7, #24]
     e86:	69ba      	ldr	r2, [r7, #24]
     e88:	601a      	str	r2, [r3, #0]
     e8a:	e002      	b.n	e92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
     e8c:	69bb      	ldr	r3, [r7, #24]
     e8e:	687a      	ldr	r2, [r7, #4]
     e90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
     e92:	69bb      	ldr	r3, [r7, #24]
     e94:	68fa      	ldr	r2, [r7, #12]
     e96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
     e98:	69bb      	ldr	r3, [r7, #24]
     e9a:	68ba      	ldr	r2, [r7, #8]
     e9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
     e9e:	2101      	movs	r1, #1
     ea0:	69b8      	ldr	r0, [r7, #24]
     ea2:	f7ff ff57 	bl	d54 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
     ea6:	bf00      	nop
     ea8:	3710      	adds	r7, #16
     eaa:	46bd      	mov	sp, r7
     eac:	bd80      	pop	{r7, pc}
	...

00000eb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
     eb0:	b580      	push	{r7, lr}
     eb2:	b08a      	sub	sp, #40	; 0x28
     eb4:	af00      	add	r7, sp, #0
     eb6:	60f8      	str	r0, [r7, #12]
     eb8:	60b9      	str	r1, [r7, #8]
     eba:	607a      	str	r2, [r7, #4]
     ebc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
     ebe:	2300      	movs	r3, #0
     ec0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
     ec2:	68fb      	ldr	r3, [r7, #12]
     ec4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
     ec6:	6a3b      	ldr	r3, [r7, #32]
     ec8:	2b00      	cmp	r3, #0
     eca:	d100      	bne.n	ece <xQueueGenericSend+0x1e>
     ecc:	e7fe      	b.n	ecc <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     ece:	68bb      	ldr	r3, [r7, #8]
     ed0:	2b00      	cmp	r3, #0
     ed2:	d103      	bne.n	edc <xQueueGenericSend+0x2c>
     ed4:	6a3b      	ldr	r3, [r7, #32]
     ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     ed8:	2b00      	cmp	r3, #0
     eda:	d101      	bne.n	ee0 <xQueueGenericSend+0x30>
     edc:	2301      	movs	r3, #1
     ede:	e000      	b.n	ee2 <xQueueGenericSend+0x32>
     ee0:	2300      	movs	r3, #0
     ee2:	2b00      	cmp	r3, #0
     ee4:	d100      	bne.n	ee8 <xQueueGenericSend+0x38>
     ee6:	e7fe      	b.n	ee6 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     ee8:	683b      	ldr	r3, [r7, #0]
     eea:	2b02      	cmp	r3, #2
     eec:	d103      	bne.n	ef6 <xQueueGenericSend+0x46>
     eee:	6a3b      	ldr	r3, [r7, #32]
     ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     ef2:	2b01      	cmp	r3, #1
     ef4:	d101      	bne.n	efa <xQueueGenericSend+0x4a>
     ef6:	2301      	movs	r3, #1
     ef8:	e000      	b.n	efc <xQueueGenericSend+0x4c>
     efa:	2300      	movs	r3, #0
     efc:	2b00      	cmp	r3, #0
     efe:	d100      	bne.n	f02 <xQueueGenericSend+0x52>
     f00:	e7fe      	b.n	f00 <xQueueGenericSend+0x50>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     f02:	f001 f97d 	bl	2200 <xTaskGetSchedulerState>
     f06:	4603      	mov	r3, r0
     f08:	2b00      	cmp	r3, #0
     f0a:	d102      	bne.n	f12 <xQueueGenericSend+0x62>
     f0c:	687b      	ldr	r3, [r7, #4]
     f0e:	2b00      	cmp	r3, #0
     f10:	d101      	bne.n	f16 <xQueueGenericSend+0x66>
     f12:	2301      	movs	r3, #1
     f14:	e000      	b.n	f18 <xQueueGenericSend+0x68>
     f16:	2300      	movs	r3, #0
     f18:	2b00      	cmp	r3, #0
     f1a:	d100      	bne.n	f1e <xQueueGenericSend+0x6e>
     f1c:	e7fe      	b.n	f1c <xQueueGenericSend+0x6c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
     f1e:	f7ff fa21 	bl	364 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     f22:	6a3b      	ldr	r3, [r7, #32]
     f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
     f26:	6a3b      	ldr	r3, [r7, #32]
     f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     f2a:	429a      	cmp	r2, r3
     f2c:	d302      	bcc.n	f34 <xQueueGenericSend+0x84>
     f2e:	683b      	ldr	r3, [r7, #0]
     f30:	2b02      	cmp	r3, #2
     f32:	d129      	bne.n	f88 <xQueueGenericSend+0xd8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     f34:	683a      	ldr	r2, [r7, #0]
     f36:	68b9      	ldr	r1, [r7, #8]
     f38:	6a38      	ldr	r0, [r7, #32]
     f3a:	f000 f9eb 	bl	1314 <prvCopyDataToQueue>
     f3e:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     f40:	6a3b      	ldr	r3, [r7, #32]
     f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     f44:	2b00      	cmp	r3, #0
     f46:	d010      	beq.n	f6a <xQueueGenericSend+0xba>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     f48:	6a3b      	ldr	r3, [r7, #32]
     f4a:	3324      	adds	r3, #36	; 0x24
     f4c:	4618      	mov	r0, r3
     f4e:	f000 ff69 	bl	1e24 <xTaskRemoveFromEventList>
     f52:	4603      	mov	r3, r0
     f54:	2b00      	cmp	r3, #0
     f56:	d013      	beq.n	f80 <xQueueGenericSend+0xd0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
     f58:	4b3f      	ldr	r3, [pc, #252]	; (1058 <xQueueGenericSend+0x1a8>)
     f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     f5e:	601a      	str	r2, [r3, #0]
     f60:	f3bf 8f4f 	dsb	sy
     f64:	f3bf 8f6f 	isb	sy
     f68:	e00a      	b.n	f80 <xQueueGenericSend+0xd0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
     f6a:	69fb      	ldr	r3, [r7, #28]
     f6c:	2b00      	cmp	r3, #0
     f6e:	d007      	beq.n	f80 <xQueueGenericSend+0xd0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
     f70:	4b39      	ldr	r3, [pc, #228]	; (1058 <xQueueGenericSend+0x1a8>)
     f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     f76:	601a      	str	r2, [r3, #0]
     f78:	f3bf 8f4f 	dsb	sy
     f7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
     f80:	f7ff fa16 	bl	3b0 <vPortExitCritical>
				return pdPASS;
     f84:	2301      	movs	r3, #1
     f86:	e063      	b.n	1050 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
     f88:	687b      	ldr	r3, [r7, #4]
     f8a:	2b00      	cmp	r3, #0
     f8c:	d103      	bne.n	f96 <xQueueGenericSend+0xe6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     f8e:	f7ff fa0f 	bl	3b0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
     f92:	2300      	movs	r3, #0
     f94:	e05c      	b.n	1050 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
     f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f98:	2b00      	cmp	r3, #0
     f9a:	d106      	bne.n	faa <xQueueGenericSend+0xfa>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     f9c:	f107 0314 	add.w	r3, r7, #20
     fa0:	4618      	mov	r0, r3
     fa2:	f000 ffef 	bl	1f84 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
     fa6:	2301      	movs	r3, #1
     fa8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
     faa:	f7ff fa01 	bl	3b0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     fae:	f000 fcb1 	bl	1914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
     fb2:	f7ff f9d7 	bl	364 <vPortEnterCritical>
     fb6:	6a3b      	ldr	r3, [r7, #32]
     fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
     fbc:	b25b      	sxtb	r3, r3
     fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
     fc2:	d103      	bne.n	fcc <xQueueGenericSend+0x11c>
     fc4:	6a3b      	ldr	r3, [r7, #32]
     fc6:	2200      	movs	r2, #0
     fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
     fcc:	6a3b      	ldr	r3, [r7, #32]
     fce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
     fd2:	b25b      	sxtb	r3, r3
     fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
     fd8:	d103      	bne.n	fe2 <xQueueGenericSend+0x132>
     fda:	6a3b      	ldr	r3, [r7, #32]
     fdc:	2200      	movs	r2, #0
     fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
     fe2:	f7ff f9e5 	bl	3b0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     fe6:	1d3a      	adds	r2, r7, #4
     fe8:	f107 0314 	add.w	r3, r7, #20
     fec:	4611      	mov	r1, r2
     fee:	4618      	mov	r0, r3
     ff0:	f000 ffe2 	bl	1fb8 <xTaskCheckForTimeOut>
     ff4:	4603      	mov	r3, r0
     ff6:	2b00      	cmp	r3, #0
     ff8:	d124      	bne.n	1044 <xQueueGenericSend+0x194>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
     ffa:	6a38      	ldr	r0, [r7, #32]
     ffc:	f000 fa74 	bl	14e8 <prvIsQueueFull>
    1000:	4603      	mov	r3, r0
    1002:	2b00      	cmp	r3, #0
    1004:	d018      	beq.n	1038 <xQueueGenericSend+0x188>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1006:	6a3b      	ldr	r3, [r7, #32]
    1008:	3310      	adds	r3, #16
    100a:	687a      	ldr	r2, [r7, #4]
    100c:	4611      	mov	r1, r2
    100e:	4618      	mov	r0, r3
    1010:	f000 fea4 	bl	1d5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    1014:	6a38      	ldr	r0, [r7, #32]
    1016:	f000 f9ff 	bl	1418 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    101a:	f000 fcc1 	bl	19a0 <xTaskResumeAll>
    101e:	4603      	mov	r3, r0
    1020:	2b00      	cmp	r3, #0
    1022:	f47f af7c 	bne.w	f1e <xQueueGenericSend+0x6e>
				{
					portYIELD_WITHIN_API();
    1026:	4b0c      	ldr	r3, [pc, #48]	; (1058 <xQueueGenericSend+0x1a8>)
    1028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    102c:	601a      	str	r2, [r3, #0]
    102e:	f3bf 8f4f 	dsb	sy
    1032:	f3bf 8f6f 	isb	sy
    1036:	e772      	b.n	f1e <xQueueGenericSend+0x6e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1038:	6a38      	ldr	r0, [r7, #32]
    103a:	f000 f9ed 	bl	1418 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    103e:	f000 fcaf 	bl	19a0 <xTaskResumeAll>
    1042:	e76c      	b.n	f1e <xQueueGenericSend+0x6e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    1044:	6a38      	ldr	r0, [r7, #32]
    1046:	f000 f9e7 	bl	1418 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    104a:	f000 fca9 	bl	19a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    104e:	2300      	movs	r3, #0
		}
	}
}
    1050:	4618      	mov	r0, r3
    1052:	3728      	adds	r7, #40	; 0x28
    1054:	46bd      	mov	sp, r7
    1056:	bd80      	pop	{r7, pc}
    1058:	e000ed04 	.word	0xe000ed04

0000105c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    105c:	b580      	push	{r7, lr}
    105e:	b08c      	sub	sp, #48	; 0x30
    1060:	af00      	add	r7, sp, #0
    1062:	60f8      	str	r0, [r7, #12]
    1064:	60b9      	str	r1, [r7, #8]
    1066:	607a      	str	r2, [r7, #4]
    1068:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    106a:	68fb      	ldr	r3, [r7, #12]
    106c:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
    106e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1070:	2b00      	cmp	r3, #0
    1072:	d100      	bne.n	1076 <xQueueGenericSendFromISR+0x1a>
    1074:	e7fe      	b.n	1074 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1076:	68bb      	ldr	r3, [r7, #8]
    1078:	2b00      	cmp	r3, #0
    107a:	d103      	bne.n	1084 <xQueueGenericSendFromISR+0x28>
    107c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1080:	2b00      	cmp	r3, #0
    1082:	d101      	bne.n	1088 <xQueueGenericSendFromISR+0x2c>
    1084:	2301      	movs	r3, #1
    1086:	e000      	b.n	108a <xQueueGenericSendFromISR+0x2e>
    1088:	2300      	movs	r3, #0
    108a:	2b00      	cmp	r3, #0
    108c:	d100      	bne.n	1090 <xQueueGenericSendFromISR+0x34>
    108e:	e7fe      	b.n	108e <xQueueGenericSendFromISR+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    1090:	683b      	ldr	r3, [r7, #0]
    1092:	2b02      	cmp	r3, #2
    1094:	d103      	bne.n	109e <xQueueGenericSendFromISR+0x42>
    1096:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    109a:	2b01      	cmp	r3, #1
    109c:	d101      	bne.n	10a2 <xQueueGenericSendFromISR+0x46>
    109e:	2301      	movs	r3, #1
    10a0:	e000      	b.n	10a4 <xQueueGenericSendFromISR+0x48>
    10a2:	2300      	movs	r3, #0
    10a4:	2b00      	cmp	r3, #0
    10a6:	d100      	bne.n	10aa <xQueueGenericSendFromISR+0x4e>
    10a8:	e7fe      	b.n	10a8 <xQueueGenericSendFromISR+0x4c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    10aa:	f7ff f9f5 	bl	498 <vPortValidateInterruptPriority>
	__asm volatile
    10ae:	f3ef 8211 	mrs	r2, BASEPRI
    10b2:	f04f 0380 	mov.w	r3, #128	; 0x80
    10b6:	f383 8811 	msr	BASEPRI, r3
    10ba:	f3bf 8f6f 	isb	sy
    10be:	f3bf 8f4f 	dsb	sy
    10c2:	61fa      	str	r2, [r7, #28]
    10c4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
    10c6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    10c8:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    10ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    10cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    10ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    10d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    10d2:	429a      	cmp	r2, r3
    10d4:	d302      	bcc.n	10dc <xQueueGenericSendFromISR+0x80>
    10d6:	683b      	ldr	r3, [r7, #0]
    10d8:	2b02      	cmp	r3, #2
    10da:	d12c      	bne.n	1136 <xQueueGenericSendFromISR+0xda>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    10dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    10de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    10e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    10e6:	683a      	ldr	r2, [r7, #0]
    10e8:	68b9      	ldr	r1, [r7, #8]
    10ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    10ec:	f000 f912 	bl	1314 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    10f0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
    10f4:	f1b3 3fff 	cmp.w	r3, #4294967295
    10f8:	d112      	bne.n	1120 <xQueueGenericSendFromISR+0xc4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    10fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    10fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    10fe:	2b00      	cmp	r3, #0
    1100:	d016      	beq.n	1130 <xQueueGenericSendFromISR+0xd4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1102:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1104:	3324      	adds	r3, #36	; 0x24
    1106:	4618      	mov	r0, r3
    1108:	f000 fe8c 	bl	1e24 <xTaskRemoveFromEventList>
    110c:	4603      	mov	r3, r0
    110e:	2b00      	cmp	r3, #0
    1110:	d00e      	beq.n	1130 <xQueueGenericSendFromISR+0xd4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    1112:	687b      	ldr	r3, [r7, #4]
    1114:	2b00      	cmp	r3, #0
    1116:	d00b      	beq.n	1130 <xQueueGenericSendFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    1118:	687b      	ldr	r3, [r7, #4]
    111a:	2201      	movs	r2, #1
    111c:	601a      	str	r2, [r3, #0]
    111e:	e007      	b.n	1130 <xQueueGenericSendFromISR+0xd4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    1120:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    1124:	3301      	adds	r3, #1
    1126:	b2db      	uxtb	r3, r3
    1128:	b25a      	sxtb	r2, r3
    112a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    112c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
    1130:	2301      	movs	r3, #1
    1132:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
    1134:	e001      	b.n	113a <xQueueGenericSendFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1136:	2300      	movs	r3, #0
    1138:	62fb      	str	r3, [r7, #44]	; 0x2c
    113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    113c:	617b      	str	r3, [r7, #20]
	__asm volatile
    113e:	697b      	ldr	r3, [r7, #20]
    1140:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    1146:	4618      	mov	r0, r3
    1148:	3730      	adds	r7, #48	; 0x30
    114a:	46bd      	mov	sp, r7
    114c:	bd80      	pop	{r7, pc}
	...

00001150 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    1150:	b580      	push	{r7, lr}
    1152:	b08a      	sub	sp, #40	; 0x28
    1154:	af00      	add	r7, sp, #0
    1156:	60f8      	str	r0, [r7, #12]
    1158:	60b9      	str	r1, [r7, #8]
    115a:	607a      	str	r2, [r7, #4]
    115c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    115e:	2300      	movs	r3, #0
    1160:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1162:	68fb      	ldr	r3, [r7, #12]
    1164:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    1166:	6a3b      	ldr	r3, [r7, #32]
    1168:	2b00      	cmp	r3, #0
    116a:	d100      	bne.n	116e <xQueueGenericReceive+0x1e>
    116c:	e7fe      	b.n	116c <xQueueGenericReceive+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    116e:	68bb      	ldr	r3, [r7, #8]
    1170:	2b00      	cmp	r3, #0
    1172:	d103      	bne.n	117c <xQueueGenericReceive+0x2c>
    1174:	6a3b      	ldr	r3, [r7, #32]
    1176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1178:	2b00      	cmp	r3, #0
    117a:	d101      	bne.n	1180 <xQueueGenericReceive+0x30>
    117c:	2301      	movs	r3, #1
    117e:	e000      	b.n	1182 <xQueueGenericReceive+0x32>
    1180:	2300      	movs	r3, #0
    1182:	2b00      	cmp	r3, #0
    1184:	d100      	bne.n	1188 <xQueueGenericReceive+0x38>
    1186:	e7fe      	b.n	1186 <xQueueGenericReceive+0x36>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1188:	f001 f83a 	bl	2200 <xTaskGetSchedulerState>
    118c:	4603      	mov	r3, r0
    118e:	2b00      	cmp	r3, #0
    1190:	d102      	bne.n	1198 <xQueueGenericReceive+0x48>
    1192:	687b      	ldr	r3, [r7, #4]
    1194:	2b00      	cmp	r3, #0
    1196:	d101      	bne.n	119c <xQueueGenericReceive+0x4c>
    1198:	2301      	movs	r3, #1
    119a:	e000      	b.n	119e <xQueueGenericReceive+0x4e>
    119c:	2300      	movs	r3, #0
    119e:	2b00      	cmp	r3, #0
    11a0:	d100      	bne.n	11a4 <xQueueGenericReceive+0x54>
    11a2:	e7fe      	b.n	11a2 <xQueueGenericReceive+0x52>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    11a4:	f7ff f8de 	bl	364 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    11a8:	6a3b      	ldr	r3, [r7, #32]
    11aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    11ac:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    11ae:	69fb      	ldr	r3, [r7, #28]
    11b0:	2b00      	cmp	r3, #0
    11b2:	d03d      	beq.n	1230 <xQueueGenericReceive+0xe0>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    11b4:	6a3b      	ldr	r3, [r7, #32]
    11b6:	68db      	ldr	r3, [r3, #12]
    11b8:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    11ba:	68b9      	ldr	r1, [r7, #8]
    11bc:	6a38      	ldr	r0, [r7, #32]
    11be:	f000 f905 	bl	13cc <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    11c2:	683b      	ldr	r3, [r7, #0]
    11c4:	2b00      	cmp	r3, #0
    11c6:	d118      	bne.n	11fa <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    11c8:	69fb      	ldr	r3, [r7, #28]
    11ca:	1e5a      	subs	r2, r3, #1
    11cc:	6a3b      	ldr	r3, [r7, #32]
    11ce:	639a      	str	r2, [r3, #56]	; 0x38
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    11d0:	6a3b      	ldr	r3, [r7, #32]
    11d2:	691b      	ldr	r3, [r3, #16]
    11d4:	2b00      	cmp	r3, #0
    11d6:	d027      	beq.n	1228 <xQueueGenericReceive+0xd8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    11d8:	6a3b      	ldr	r3, [r7, #32]
    11da:	3310      	adds	r3, #16
    11dc:	4618      	mov	r0, r3
    11de:	f000 fe21 	bl	1e24 <xTaskRemoveFromEventList>
    11e2:	4603      	mov	r3, r0
    11e4:	2b00      	cmp	r3, #0
    11e6:	d01f      	beq.n	1228 <xQueueGenericReceive+0xd8>
						{
							queueYIELD_IF_USING_PREEMPTION();
    11e8:	4b49      	ldr	r3, [pc, #292]	; (1310 <xQueueGenericReceive+0x1c0>)
    11ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    11ee:	601a      	str	r2, [r3, #0]
    11f0:	f3bf 8f4f 	dsb	sy
    11f4:	f3bf 8f6f 	isb	sy
    11f8:	e016      	b.n	1228 <xQueueGenericReceive+0xd8>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    11fa:	6a3b      	ldr	r3, [r7, #32]
    11fc:	69ba      	ldr	r2, [r7, #24]
    11fe:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1200:	6a3b      	ldr	r3, [r7, #32]
    1202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1204:	2b00      	cmp	r3, #0
    1206:	d00f      	beq.n	1228 <xQueueGenericReceive+0xd8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1208:	6a3b      	ldr	r3, [r7, #32]
    120a:	3324      	adds	r3, #36	; 0x24
    120c:	4618      	mov	r0, r3
    120e:	f000 fe09 	bl	1e24 <xTaskRemoveFromEventList>
    1212:	4603      	mov	r3, r0
    1214:	2b00      	cmp	r3, #0
    1216:	d007      	beq.n	1228 <xQueueGenericReceive+0xd8>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    1218:	4b3d      	ldr	r3, [pc, #244]	; (1310 <xQueueGenericReceive+0x1c0>)
    121a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    121e:	601a      	str	r2, [r3, #0]
    1220:	f3bf 8f4f 	dsb	sy
    1224:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    1228:	f7ff f8c2 	bl	3b0 <vPortExitCritical>
				return pdPASS;
    122c:	2301      	movs	r3, #1
    122e:	e06a      	b.n	1306 <xQueueGenericReceive+0x1b6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1230:	687b      	ldr	r3, [r7, #4]
    1232:	2b00      	cmp	r3, #0
    1234:	d103      	bne.n	123e <xQueueGenericReceive+0xee>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1236:	f7ff f8bb 	bl	3b0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    123a:	2300      	movs	r3, #0
    123c:	e063      	b.n	1306 <xQueueGenericReceive+0x1b6>
				}
				else if( xEntryTimeSet == pdFALSE )
    123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1240:	2b00      	cmp	r3, #0
    1242:	d106      	bne.n	1252 <xQueueGenericReceive+0x102>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1244:	f107 0310 	add.w	r3, r7, #16
    1248:	4618      	mov	r0, r3
    124a:	f000 fe9b 	bl	1f84 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    124e:	2301      	movs	r3, #1
    1250:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1252:	f7ff f8ad 	bl	3b0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1256:	f000 fb5d 	bl	1914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    125a:	f7ff f883 	bl	364 <vPortEnterCritical>
    125e:	6a3b      	ldr	r3, [r7, #32]
    1260:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    1264:	b25b      	sxtb	r3, r3
    1266:	f1b3 3fff 	cmp.w	r3, #4294967295
    126a:	d103      	bne.n	1274 <xQueueGenericReceive+0x124>
    126c:	6a3b      	ldr	r3, [r7, #32]
    126e:	2200      	movs	r2, #0
    1270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    1274:	6a3b      	ldr	r3, [r7, #32]
    1276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    127a:	b25b      	sxtb	r3, r3
    127c:	f1b3 3fff 	cmp.w	r3, #4294967295
    1280:	d103      	bne.n	128a <xQueueGenericReceive+0x13a>
    1282:	6a3b      	ldr	r3, [r7, #32]
    1284:	2200      	movs	r2, #0
    1286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    128a:	f7ff f891 	bl	3b0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    128e:	1d3a      	adds	r2, r7, #4
    1290:	f107 0310 	add.w	r3, r7, #16
    1294:	4611      	mov	r1, r2
    1296:	4618      	mov	r0, r3
    1298:	f000 fe8e 	bl	1fb8 <xTaskCheckForTimeOut>
    129c:	4603      	mov	r3, r0
    129e:	2b00      	cmp	r3, #0
    12a0:	d124      	bne.n	12ec <xQueueGenericReceive+0x19c>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    12a2:	6a38      	ldr	r0, [r7, #32]
    12a4:	f000 f90a 	bl	14bc <prvIsQueueEmpty>
    12a8:	4603      	mov	r3, r0
    12aa:	2b00      	cmp	r3, #0
    12ac:	d018      	beq.n	12e0 <xQueueGenericReceive+0x190>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    12ae:	6a3b      	ldr	r3, [r7, #32]
    12b0:	3324      	adds	r3, #36	; 0x24
    12b2:	687a      	ldr	r2, [r7, #4]
    12b4:	4611      	mov	r1, r2
    12b6:	4618      	mov	r0, r3
    12b8:	f000 fd50 	bl	1d5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    12bc:	6a38      	ldr	r0, [r7, #32]
    12be:	f000 f8ab 	bl	1418 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    12c2:	f000 fb6d 	bl	19a0 <xTaskResumeAll>
    12c6:	4603      	mov	r3, r0
    12c8:	2b00      	cmp	r3, #0
    12ca:	f47f af6b 	bne.w	11a4 <xQueueGenericReceive+0x54>
				{
					portYIELD_WITHIN_API();
    12ce:	4b10      	ldr	r3, [pc, #64]	; (1310 <xQueueGenericReceive+0x1c0>)
    12d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    12d4:	601a      	str	r2, [r3, #0]
    12d6:	f3bf 8f4f 	dsb	sy
    12da:	f3bf 8f6f 	isb	sy
    12de:	e761      	b.n	11a4 <xQueueGenericReceive+0x54>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    12e0:	6a38      	ldr	r0, [r7, #32]
    12e2:	f000 f899 	bl	1418 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    12e6:	f000 fb5b 	bl	19a0 <xTaskResumeAll>
    12ea:	e75b      	b.n	11a4 <xQueueGenericReceive+0x54>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    12ec:	6a38      	ldr	r0, [r7, #32]
    12ee:	f000 f893 	bl	1418 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    12f2:	f000 fb55 	bl	19a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    12f6:	6a38      	ldr	r0, [r7, #32]
    12f8:	f000 f8e0 	bl	14bc <prvIsQueueEmpty>
    12fc:	4603      	mov	r3, r0
    12fe:	2b00      	cmp	r3, #0
    1300:	f43f af50 	beq.w	11a4 <xQueueGenericReceive+0x54>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    1304:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    1306:	4618      	mov	r0, r3
    1308:	3728      	adds	r7, #40	; 0x28
    130a:	46bd      	mov	sp, r7
    130c:	bd80      	pop	{r7, pc}
    130e:	bf00      	nop
    1310:	e000ed04 	.word	0xe000ed04

00001314 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    1314:	b580      	push	{r7, lr}
    1316:	b086      	sub	sp, #24
    1318:	af00      	add	r7, sp, #0
    131a:	60f8      	str	r0, [r7, #12]
    131c:	60b9      	str	r1, [r7, #8]
    131e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    1320:	2300      	movs	r3, #0
    1322:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1324:	68fb      	ldr	r3, [r7, #12]
    1326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1328:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    132a:	68fb      	ldr	r3, [r7, #12]
    132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    132e:	2b00      	cmp	r3, #0
    1330:	d043      	beq.n	13ba <prvCopyDataToQueue+0xa6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    1332:	687b      	ldr	r3, [r7, #4]
    1334:	2b00      	cmp	r3, #0
    1336:	d119      	bne.n	136c <prvCopyDataToQueue+0x58>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    1338:	68fb      	ldr	r3, [r7, #12]
    133a:	6898      	ldr	r0, [r3, #8]
    133c:	68fb      	ldr	r3, [r7, #12]
    133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1340:	461a      	mov	r2, r3
    1342:	68b9      	ldr	r1, [r7, #8]
    1344:	f003 fe1e 	bl	4f84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1348:	68fb      	ldr	r3, [r7, #12]
    134a:	689a      	ldr	r2, [r3, #8]
    134c:	68fb      	ldr	r3, [r7, #12]
    134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1350:	441a      	add	r2, r3
    1352:	68fb      	ldr	r3, [r7, #12]
    1354:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1356:	68fb      	ldr	r3, [r7, #12]
    1358:	689a      	ldr	r2, [r3, #8]
    135a:	68fb      	ldr	r3, [r7, #12]
    135c:	685b      	ldr	r3, [r3, #4]
    135e:	429a      	cmp	r2, r3
    1360:	d32b      	bcc.n	13ba <prvCopyDataToQueue+0xa6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    1362:	68fb      	ldr	r3, [r7, #12]
    1364:	681a      	ldr	r2, [r3, #0]
    1366:	68fb      	ldr	r3, [r7, #12]
    1368:	609a      	str	r2, [r3, #8]
    136a:	e026      	b.n	13ba <prvCopyDataToQueue+0xa6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    136c:	68fb      	ldr	r3, [r7, #12]
    136e:	68d8      	ldr	r0, [r3, #12]
    1370:	68fb      	ldr	r3, [r7, #12]
    1372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1374:	461a      	mov	r2, r3
    1376:	68b9      	ldr	r1, [r7, #8]
    1378:	f003 fe04 	bl	4f84 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    137c:	68fb      	ldr	r3, [r7, #12]
    137e:	68da      	ldr	r2, [r3, #12]
    1380:	68fb      	ldr	r3, [r7, #12]
    1382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1384:	425b      	negs	r3, r3
    1386:	441a      	add	r2, r3
    1388:	68fb      	ldr	r3, [r7, #12]
    138a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    138c:	68fb      	ldr	r3, [r7, #12]
    138e:	68da      	ldr	r2, [r3, #12]
    1390:	68fb      	ldr	r3, [r7, #12]
    1392:	681b      	ldr	r3, [r3, #0]
    1394:	429a      	cmp	r2, r3
    1396:	d207      	bcs.n	13a8 <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1398:	68fb      	ldr	r3, [r7, #12]
    139a:	685a      	ldr	r2, [r3, #4]
    139c:	68fb      	ldr	r3, [r7, #12]
    139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    13a0:	425b      	negs	r3, r3
    13a2:	441a      	add	r2, r3
    13a4:	68fb      	ldr	r3, [r7, #12]
    13a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    13a8:	687b      	ldr	r3, [r7, #4]
    13aa:	2b02      	cmp	r3, #2
    13ac:	d105      	bne.n	13ba <prvCopyDataToQueue+0xa6>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    13ae:	697b      	ldr	r3, [r7, #20]
    13b0:	2b00      	cmp	r3, #0
    13b2:	d002      	beq.n	13ba <prvCopyDataToQueue+0xa6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    13b4:	697b      	ldr	r3, [r7, #20]
    13b6:	3b01      	subs	r3, #1
    13b8:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    13ba:	697b      	ldr	r3, [r7, #20]
    13bc:	1c5a      	adds	r2, r3, #1
    13be:	68fb      	ldr	r3, [r7, #12]
    13c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    13c2:	693b      	ldr	r3, [r7, #16]
}
    13c4:	4618      	mov	r0, r3
    13c6:	3718      	adds	r7, #24
    13c8:	46bd      	mov	sp, r7
    13ca:	bd80      	pop	{r7, pc}

000013cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    13cc:	b580      	push	{r7, lr}
    13ce:	b082      	sub	sp, #8
    13d0:	af00      	add	r7, sp, #0
    13d2:	6078      	str	r0, [r7, #4]
    13d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    13d6:	687b      	ldr	r3, [r7, #4]
    13d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    13da:	2b00      	cmp	r3, #0
    13dc:	d018      	beq.n	1410 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    13de:	687b      	ldr	r3, [r7, #4]
    13e0:	68da      	ldr	r2, [r3, #12]
    13e2:	687b      	ldr	r3, [r7, #4]
    13e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    13e6:	441a      	add	r2, r3
    13e8:	687b      	ldr	r3, [r7, #4]
    13ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    13ec:	687b      	ldr	r3, [r7, #4]
    13ee:	68da      	ldr	r2, [r3, #12]
    13f0:	687b      	ldr	r3, [r7, #4]
    13f2:	685b      	ldr	r3, [r3, #4]
    13f4:	429a      	cmp	r2, r3
    13f6:	d303      	bcc.n	1400 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	681a      	ldr	r2, [r3, #0]
    13fc:	687b      	ldr	r3, [r7, #4]
    13fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	68d9      	ldr	r1, [r3, #12]
    1404:	687b      	ldr	r3, [r7, #4]
    1406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1408:	461a      	mov	r2, r3
    140a:	6838      	ldr	r0, [r7, #0]
    140c:	f003 fdba 	bl	4f84 <memcpy>
	}
}
    1410:	bf00      	nop
    1412:	3708      	adds	r7, #8
    1414:	46bd      	mov	sp, r7
    1416:	bd80      	pop	{r7, pc}

00001418 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    1418:	b580      	push	{r7, lr}
    141a:	b084      	sub	sp, #16
    141c:	af00      	add	r7, sp, #0
    141e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1420:	f7fe ffa0 	bl	364 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
    1424:	687b      	ldr	r3, [r7, #4]
    1426:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    142a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    142c:	e011      	b.n	1452 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    142e:	687b      	ldr	r3, [r7, #4]
    1430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1432:	2b00      	cmp	r3, #0
    1434:	d012      	beq.n	145c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1436:	687b      	ldr	r3, [r7, #4]
    1438:	3324      	adds	r3, #36	; 0x24
    143a:	4618      	mov	r0, r3
    143c:	f000 fcf2 	bl	1e24 <xTaskRemoveFromEventList>
    1440:	4603      	mov	r3, r0
    1442:	2b00      	cmp	r3, #0
    1444:	d001      	beq.n	144a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    1446:	f000 fe03 	bl	2050 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    144a:	7bfb      	ldrb	r3, [r7, #15]
    144c:	3b01      	subs	r3, #1
    144e:	b2db      	uxtb	r3, r3
    1450:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    1452:	f997 300f 	ldrsb.w	r3, [r7, #15]
    1456:	2b00      	cmp	r3, #0
    1458:	dce9      	bgt.n	142e <prvUnlockQueue+0x16>
    145a:	e000      	b.n	145e <prvUnlockQueue+0x46>
					break;
    145c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	22ff      	movs	r2, #255	; 0xff
    1462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
    1466:	f7fe ffa3 	bl	3b0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    146a:	f7fe ff7b 	bl	364 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
    146e:	687b      	ldr	r3, [r7, #4]
    1470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    1474:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    1476:	e011      	b.n	149c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1478:	687b      	ldr	r3, [r7, #4]
    147a:	691b      	ldr	r3, [r3, #16]
    147c:	2b00      	cmp	r3, #0
    147e:	d012      	beq.n	14a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1480:	687b      	ldr	r3, [r7, #4]
    1482:	3310      	adds	r3, #16
    1484:	4618      	mov	r0, r3
    1486:	f000 fccd 	bl	1e24 <xTaskRemoveFromEventList>
    148a:	4603      	mov	r3, r0
    148c:	2b00      	cmp	r3, #0
    148e:	d001      	beq.n	1494 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
    1490:	f000 fdde 	bl	2050 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    1494:	7bbb      	ldrb	r3, [r7, #14]
    1496:	3b01      	subs	r3, #1
    1498:	b2db      	uxtb	r3, r3
    149a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    149c:	f997 300e 	ldrsb.w	r3, [r7, #14]
    14a0:	2b00      	cmp	r3, #0
    14a2:	dce9      	bgt.n	1478 <prvUnlockQueue+0x60>
    14a4:	e000      	b.n	14a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
    14a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    14a8:	687b      	ldr	r3, [r7, #4]
    14aa:	22ff      	movs	r2, #255	; 0xff
    14ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    14b0:	f7fe ff7e 	bl	3b0 <vPortExitCritical>
}
    14b4:	bf00      	nop
    14b6:	3710      	adds	r7, #16
    14b8:	46bd      	mov	sp, r7
    14ba:	bd80      	pop	{r7, pc}

000014bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    14bc:	b580      	push	{r7, lr}
    14be:	b084      	sub	sp, #16
    14c0:	af00      	add	r7, sp, #0
    14c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    14c4:	f7fe ff4e 	bl	364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    14c8:	687b      	ldr	r3, [r7, #4]
    14ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    14cc:	2b00      	cmp	r3, #0
    14ce:	d102      	bne.n	14d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    14d0:	2301      	movs	r3, #1
    14d2:	60fb      	str	r3, [r7, #12]
    14d4:	e001      	b.n	14da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    14d6:	2300      	movs	r3, #0
    14d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    14da:	f7fe ff69 	bl	3b0 <vPortExitCritical>

	return xReturn;
    14de:	68fb      	ldr	r3, [r7, #12]
}
    14e0:	4618      	mov	r0, r3
    14e2:	3710      	adds	r7, #16
    14e4:	46bd      	mov	sp, r7
    14e6:	bd80      	pop	{r7, pc}

000014e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    14e8:	b580      	push	{r7, lr}
    14ea:	b084      	sub	sp, #16
    14ec:	af00      	add	r7, sp, #0
    14ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    14f0:	f7fe ff38 	bl	364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    14f4:	687b      	ldr	r3, [r7, #4]
    14f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    14fc:	429a      	cmp	r2, r3
    14fe:	d102      	bne.n	1506 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    1500:	2301      	movs	r3, #1
    1502:	60fb      	str	r3, [r7, #12]
    1504:	e001      	b.n	150a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    1506:	2300      	movs	r3, #0
    1508:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    150a:	f7fe ff51 	bl	3b0 <vPortExitCritical>

	return xReturn;
    150e:	68fb      	ldr	r3, [r7, #12]
}
    1510:	4618      	mov	r0, r3
    1512:	3710      	adds	r7, #16
    1514:	46bd      	mov	sp, r7
    1516:	bd80      	pop	{r7, pc}

00001518 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    1518:	b580      	push	{r7, lr}
    151a:	b086      	sub	sp, #24
    151c:	af00      	add	r7, sp, #0
    151e:	60f8      	str	r0, [r7, #12]
    1520:	60b9      	str	r1, [r7, #8]
    1522:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1524:	68fb      	ldr	r3, [r7, #12]
    1526:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    1528:	f7fe ff1c 	bl	364 <vPortEnterCritical>
    152c:	697b      	ldr	r3, [r7, #20]
    152e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    1532:	b25b      	sxtb	r3, r3
    1534:	f1b3 3fff 	cmp.w	r3, #4294967295
    1538:	d103      	bne.n	1542 <vQueueWaitForMessageRestricted+0x2a>
    153a:	697b      	ldr	r3, [r7, #20]
    153c:	2200      	movs	r2, #0
    153e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    1542:	697b      	ldr	r3, [r7, #20]
    1544:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    1548:	b25b      	sxtb	r3, r3
    154a:	f1b3 3fff 	cmp.w	r3, #4294967295
    154e:	d103      	bne.n	1558 <vQueueWaitForMessageRestricted+0x40>
    1550:	697b      	ldr	r3, [r7, #20]
    1552:	2200      	movs	r2, #0
    1554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    1558:	f7fe ff2a 	bl	3b0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    155c:	697b      	ldr	r3, [r7, #20]
    155e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1560:	2b00      	cmp	r3, #0
    1562:	d106      	bne.n	1572 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1564:	697b      	ldr	r3, [r7, #20]
    1566:	3324      	adds	r3, #36	; 0x24
    1568:	687a      	ldr	r2, [r7, #4]
    156a:	68b9      	ldr	r1, [r7, #8]
    156c:	4618      	mov	r0, r3
    156e:	f000 fc37 	bl	1de0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    1572:	6978      	ldr	r0, [r7, #20]
    1574:	f7ff ff50 	bl	1418 <prvUnlockQueue>
	}
    1578:	bf00      	nop
    157a:	3718      	adds	r7, #24
    157c:	46bd      	mov	sp, r7
    157e:	bd80      	pop	{r7, pc}

00001580 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    1580:	b580      	push	{r7, lr}
    1582:	b08c      	sub	sp, #48	; 0x30
    1584:	af04      	add	r7, sp, #16
    1586:	60f8      	str	r0, [r7, #12]
    1588:	60b9      	str	r1, [r7, #8]
    158a:	603b      	str	r3, [r7, #0]
    158c:	4613      	mov	r3, r2
    158e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */ // Stack grows DOWN on M4F
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1590:	88fb      	ldrh	r3, [r7, #6]
    1592:	009b      	lsls	r3, r3, #2
    1594:	4618      	mov	r0, r3
    1596:	f7ff f8d1 	bl	73c <pvPortMalloc>
    159a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
    159c:	697b      	ldr	r3, [r7, #20]
    159e:	2b00      	cmp	r3, #0
    15a0:	d00e      	beq.n	15c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    15a2:	204c      	movs	r0, #76	; 0x4c
    15a4:	f7ff f8ca 	bl	73c <pvPortMalloc>
    15a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
    15aa:	69fb      	ldr	r3, [r7, #28]
    15ac:	2b00      	cmp	r3, #0
    15ae:	d003      	beq.n	15b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    15b0:	69fb      	ldr	r3, [r7, #28]
    15b2:	697a      	ldr	r2, [r7, #20]
    15b4:	631a      	str	r2, [r3, #48]	; 0x30
    15b6:	e005      	b.n	15c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    15b8:	6978      	ldr	r0, [r7, #20]
    15ba:	f7ff f951 	bl	860 <vPortFree>
    15be:	e001      	b.n	15c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
    15c0:	2300      	movs	r3, #0
    15c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    15c4:	69fb      	ldr	r3, [r7, #28]
    15c6:	2b00      	cmp	r3, #0
    15c8:	d013      	beq.n	15f2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    15ca:	88fa      	ldrh	r2, [r7, #6]
    15cc:	2300      	movs	r3, #0
    15ce:	9303      	str	r3, [sp, #12]
    15d0:	69fb      	ldr	r3, [r7, #28]
    15d2:	9302      	str	r3, [sp, #8]
    15d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    15d6:	9301      	str	r3, [sp, #4]
    15d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    15da:	9300      	str	r3, [sp, #0]
    15dc:	683b      	ldr	r3, [r7, #0]
    15de:	68b9      	ldr	r1, [r7, #8]
    15e0:	68f8      	ldr	r0, [r7, #12]
    15e2:	f000 f80e 	bl	1602 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    15e6:	69f8      	ldr	r0, [r7, #28]
    15e8:	f000 f882 	bl	16f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    15ec:	2301      	movs	r3, #1
    15ee:	61bb      	str	r3, [r7, #24]
    15f0:	e002      	b.n	15f8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    15f2:	f04f 33ff 	mov.w	r3, #4294967295
    15f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    15f8:	69bb      	ldr	r3, [r7, #24]
	}
    15fa:	4618      	mov	r0, r3
    15fc:	3720      	adds	r7, #32
    15fe:	46bd      	mov	sp, r7
    1600:	bd80      	pop	{r7, pc}

00001602 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    1602:	b580      	push	{r7, lr}
    1604:	b086      	sub	sp, #24
    1606:	af00      	add	r7, sp, #0
    1608:	60f8      	str	r0, [r7, #12]
    160a:	60b9      	str	r1, [r7, #8]
    160c:	607a      	str	r2, [r7, #4]
    160e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    1610:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1612:	6b18      	ldr	r0, [r3, #48]	; 0x30
    1614:	687b      	ldr	r3, [r7, #4]
    1616:	009b      	lsls	r3, r3, #2
    1618:	461a      	mov	r2, r3
    161a:	21a5      	movs	r1, #165	; 0xa5
    161c:	f003 fcbd 	bl	4f9a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    1620:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1624:	687b      	ldr	r3, [r7, #4]
    1626:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    162a:	3b01      	subs	r3, #1
    162c:	009b      	lsls	r3, r3, #2
    162e:	4413      	add	r3, r2
    1630:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    1632:	693b      	ldr	r3, [r7, #16]
    1634:	f023 0307 	bic.w	r3, r3, #7
    1638:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    163a:	693b      	ldr	r3, [r7, #16]
    163c:	f003 0307 	and.w	r3, r3, #7
    1640:	2b00      	cmp	r3, #0
    1642:	d000      	beq.n	1646 <prvInitialiseNewTask+0x44>
    1644:	e7fe      	b.n	1644 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    1646:	2300      	movs	r3, #0
    1648:	617b      	str	r3, [r7, #20]
    164a:	e012      	b.n	1672 <prvInitialiseNewTask+0x70>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    164c:	68ba      	ldr	r2, [r7, #8]
    164e:	697b      	ldr	r3, [r7, #20]
    1650:	4413      	add	r3, r2
    1652:	7819      	ldrb	r1, [r3, #0]
    1654:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1656:	697b      	ldr	r3, [r7, #20]
    1658:	4413      	add	r3, r2
    165a:	3334      	adds	r3, #52	; 0x34
    165c:	460a      	mov	r2, r1
    165e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    1660:	68ba      	ldr	r2, [r7, #8]
    1662:	697b      	ldr	r3, [r7, #20]
    1664:	4413      	add	r3, r2
    1666:	781b      	ldrb	r3, [r3, #0]
    1668:	2b00      	cmp	r3, #0
    166a:	d006      	beq.n	167a <prvInitialiseNewTask+0x78>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    166c:	697b      	ldr	r3, [r7, #20]
    166e:	3301      	adds	r3, #1
    1670:	617b      	str	r3, [r7, #20]
    1672:	697b      	ldr	r3, [r7, #20]
    1674:	2b0f      	cmp	r3, #15
    1676:	d9e9      	bls.n	164c <prvInitialiseNewTask+0x4a>
    1678:	e000      	b.n	167c <prvInitialiseNewTask+0x7a>
		{
			break;
    167a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    167c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    167e:	2200      	movs	r2, #0
    1680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    1684:	6a3b      	ldr	r3, [r7, #32]
    1686:	2b03      	cmp	r3, #3
    1688:	d901      	bls.n	168e <prvInitialiseNewTask+0x8c>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    168a:	2303      	movs	r3, #3
    168c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    168e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1690:	6a3a      	ldr	r2, [r7, #32]
    1692:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    1694:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1696:	3304      	adds	r3, #4
    1698:	4618      	mov	r0, r3
    169a:	f7ff fac7 	bl	c2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    169e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    16a0:	3318      	adds	r3, #24
    16a2:	4618      	mov	r0, r3
    16a4:	f7ff fac2 	bl	c2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    16a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    16aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    16ac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    16ae:	6a3b      	ldr	r3, [r7, #32]
    16b0:	f1c3 0204 	rsb	r2, r3, #4
    16b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    16b6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    16b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    16ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
    16bc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    16be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    16c0:	2200      	movs	r2, #0
    16c2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    16c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    16c6:	2200      	movs	r2, #0
    16c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    16cc:	683a      	ldr	r2, [r7, #0]
    16ce:	68f9      	ldr	r1, [r7, #12]
    16d0:	6938      	ldr	r0, [r7, #16]
    16d2:	f7fe fd45 	bl	160 <pxPortInitialiseStack>
    16d6:	4602      	mov	r2, r0
    16d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    16da:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    16dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    16de:	2b00      	cmp	r3, #0
    16e0:	d002      	beq.n	16e8 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    16e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    16e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    16e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    16e8:	bf00      	nop
    16ea:	3718      	adds	r7, #24
    16ec:	46bd      	mov	sp, r7
    16ee:	bd80      	pop	{r7, pc}

000016f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    16f0:	b580      	push	{r7, lr}
    16f2:	b082      	sub	sp, #8
    16f4:	af00      	add	r7, sp, #0
    16f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    16f8:	f7fe fe34 	bl	364 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
    16fc:	4b2b      	ldr	r3, [pc, #172]	; (17ac <prvAddNewTaskToReadyList+0xbc>)
    16fe:	681b      	ldr	r3, [r3, #0]
    1700:	3301      	adds	r3, #1
    1702:	4a2a      	ldr	r2, [pc, #168]	; (17ac <prvAddNewTaskToReadyList+0xbc>)
    1704:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    1706:	4b2a      	ldr	r3, [pc, #168]	; (17b0 <prvAddNewTaskToReadyList+0xc0>)
    1708:	681b      	ldr	r3, [r3, #0]
    170a:	2b00      	cmp	r3, #0
    170c:	d109      	bne.n	1722 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    170e:	4a28      	ldr	r2, [pc, #160]	; (17b0 <prvAddNewTaskToReadyList+0xc0>)
    1710:	687b      	ldr	r3, [r7, #4]
    1712:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    1714:	4b25      	ldr	r3, [pc, #148]	; (17ac <prvAddNewTaskToReadyList+0xbc>)
    1716:	681b      	ldr	r3, [r3, #0]
    1718:	2b01      	cmp	r3, #1
    171a:	d110      	bne.n	173e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    171c:	f000 fd08 	bl	2130 <prvInitialiseTaskLists>
    1720:	e00d      	b.n	173e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    1722:	4b24      	ldr	r3, [pc, #144]	; (17b4 <prvAddNewTaskToReadyList+0xc4>)
    1724:	681b      	ldr	r3, [r3, #0]
    1726:	2b00      	cmp	r3, #0
    1728:	d109      	bne.n	173e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    172a:	4b21      	ldr	r3, [pc, #132]	; (17b0 <prvAddNewTaskToReadyList+0xc0>)
    172c:	681b      	ldr	r3, [r3, #0]
    172e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1730:	687b      	ldr	r3, [r7, #4]
    1732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1734:	429a      	cmp	r2, r3
    1736:	d802      	bhi.n	173e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    1738:	4a1d      	ldr	r2, [pc, #116]	; (17b0 <prvAddNewTaskToReadyList+0xc0>)
    173a:	687b      	ldr	r3, [r7, #4]
    173c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    173e:	4b1e      	ldr	r3, [pc, #120]	; (17b8 <prvAddNewTaskToReadyList+0xc8>)
    1740:	681b      	ldr	r3, [r3, #0]
    1742:	3301      	adds	r3, #1
    1744:	4a1c      	ldr	r2, [pc, #112]	; (17b8 <prvAddNewTaskToReadyList+0xc8>)
    1746:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		//prvAddTaskToReadyList( pxNewTCB );
		prvReaddTaskToReadyList( pxNewTCB );
    1748:	687b      	ldr	r3, [r7, #4]
    174a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    174c:	4b1b      	ldr	r3, [pc, #108]	; (17bc <prvAddNewTaskToReadyList+0xcc>)
    174e:	681b      	ldr	r3, [r3, #0]
    1750:	429a      	cmp	r2, r3
    1752:	d903      	bls.n	175c <prvAddNewTaskToReadyList+0x6c>
    1754:	687b      	ldr	r3, [r7, #4]
    1756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1758:	4a18      	ldr	r2, [pc, #96]	; (17bc <prvAddNewTaskToReadyList+0xcc>)
    175a:	6013      	str	r3, [r2, #0]
    175c:	687b      	ldr	r3, [r7, #4]
    175e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1760:	4613      	mov	r3, r2
    1762:	009b      	lsls	r3, r3, #2
    1764:	4413      	add	r3, r2
    1766:	009b      	lsls	r3, r3, #2
    1768:	4a15      	ldr	r2, [pc, #84]	; (17c0 <prvAddNewTaskToReadyList+0xd0>)
    176a:	441a      	add	r2, r3
    176c:	687b      	ldr	r3, [r7, #4]
    176e:	3304      	adds	r3, #4
    1770:	4619      	mov	r1, r3
    1772:	4610      	mov	r0, r2
    1774:	f7ff fa67 	bl	c46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    1778:	f7fe fe1a 	bl	3b0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
    177c:	4b0d      	ldr	r3, [pc, #52]	; (17b4 <prvAddNewTaskToReadyList+0xc4>)
    177e:	681b      	ldr	r3, [r3, #0]
    1780:	2b00      	cmp	r3, #0
    1782:	d00e      	beq.n	17a2 <prvAddNewTaskToReadyList+0xb2>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    1784:	4b0a      	ldr	r3, [pc, #40]	; (17b0 <prvAddNewTaskToReadyList+0xc0>)
    1786:	681b      	ldr	r3, [r3, #0]
    1788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    178a:	687b      	ldr	r3, [r7, #4]
    178c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    178e:	429a      	cmp	r2, r3
    1790:	d207      	bcs.n	17a2 <prvAddNewTaskToReadyList+0xb2>
		{
			taskYIELD_IF_USING_PREEMPTION();    /* Set a PendSV to request a context switch. */                             \
    1792:	4b0c      	ldr	r3, [pc, #48]	; (17c4 <prvAddNewTaskToReadyList+0xd4>)
    1794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1798:	601a      	str	r2, [r3, #0]
    179a:	f3bf 8f4f 	dsb	sy
    179e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    17a2:	bf00      	nop
    17a4:	3708      	adds	r7, #8
    17a6:	46bd      	mov	sp, r7
    17a8:	bd80      	pop	{r7, pc}
    17aa:	bf00      	nop
    17ac:	10006404 	.word	0x10006404
    17b0:	10006358 	.word	0x10006358
    17b4:	10006410 	.word	0x10006410
    17b8:	10006420 	.word	0x10006420
    17bc:	1000640c 	.word	0x1000640c
    17c0:	1000635c 	.word	0x1000635c
    17c4:	e000ed04 	.word	0xe000ed04

000017c8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    17c8:	b580      	push	{r7, lr}
    17ca:	b084      	sub	sp, #16
    17cc:	af00      	add	r7, sp, #0
    17ce:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    17d0:	f7fe fdc8 	bl	364 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    17d4:	687b      	ldr	r3, [r7, #4]
    17d6:	2b00      	cmp	r3, #0
    17d8:	d102      	bne.n	17e0 <vTaskSuspend+0x18>
    17da:	4b26      	ldr	r3, [pc, #152]	; (1874 <vTaskSuspend+0xac>)
    17dc:	681b      	ldr	r3, [r3, #0]
    17de:	e000      	b.n	17e2 <vTaskSuspend+0x1a>
    17e0:	687b      	ldr	r3, [r7, #4]
    17e2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    17e4:	68fb      	ldr	r3, [r7, #12]
    17e6:	3304      	adds	r3, #4
    17e8:	4618      	mov	r0, r3
    17ea:	f7ff fa89 	bl	d00 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    17ee:	68fb      	ldr	r3, [r7, #12]
    17f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17f2:	2b00      	cmp	r3, #0
    17f4:	d004      	beq.n	1800 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    17f6:	68fb      	ldr	r3, [r7, #12]
    17f8:	3318      	adds	r3, #24
    17fa:	4618      	mov	r0, r3
    17fc:	f7ff fa80 	bl	d00 <uxListRemove>
				mtCOVERAGE_TEST_MARKER();
			}
			//GEO: addition for support of SystemView Profiler
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
			//GEO: end modification
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    1800:	68fb      	ldr	r3, [r7, #12]
    1802:	3304      	adds	r3, #4
    1804:	4619      	mov	r1, r3
    1806:	481c      	ldr	r0, [pc, #112]	; (1878 <vTaskSuspend+0xb0>)
    1808:	f7ff fa1d 	bl	c46 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    180c:	f7fe fdd0 	bl	3b0 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
    1810:	4b1a      	ldr	r3, [pc, #104]	; (187c <vTaskSuspend+0xb4>)
    1812:	681b      	ldr	r3, [r3, #0]
    1814:	2b00      	cmp	r3, #0
    1816:	d005      	beq.n	1824 <vTaskSuspend+0x5c>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    1818:	f7fe fda4 	bl	364 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
    181c:	f000 fcca 	bl	21b4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
    1820:	f7fe fdc6 	bl	3b0 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    1824:	4b13      	ldr	r3, [pc, #76]	; (1874 <vTaskSuspend+0xac>)
    1826:	681b      	ldr	r3, [r3, #0]
    1828:	68fa      	ldr	r2, [r7, #12]
    182a:	429a      	cmp	r2, r3
    182c:	d11d      	bne.n	186a <vTaskSuspend+0xa2>
		{
			if( xSchedulerRunning != pdFALSE )
    182e:	4b13      	ldr	r3, [pc, #76]	; (187c <vTaskSuspend+0xb4>)
    1830:	681b      	ldr	r3, [r3, #0]
    1832:	2b00      	cmp	r3, #0
    1834:	d00d      	beq.n	1852 <vTaskSuspend+0x8a>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
    1836:	4b12      	ldr	r3, [pc, #72]	; (1880 <vTaskSuspend+0xb8>)
    1838:	681b      	ldr	r3, [r3, #0]
    183a:	2b00      	cmp	r3, #0
    183c:	d000      	beq.n	1840 <vTaskSuspend+0x78>
    183e:	e7fe      	b.n	183e <vTaskSuspend+0x76>
				portYIELD_WITHIN_API();
    1840:	4b10      	ldr	r3, [pc, #64]	; (1884 <vTaskSuspend+0xbc>)
    1842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1846:	601a      	str	r2, [r3, #0]
    1848:	f3bf 8f4f 	dsb	sy
    184c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1850:	e00b      	b.n	186a <vTaskSuspend+0xa2>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    1852:	4b09      	ldr	r3, [pc, #36]	; (1878 <vTaskSuspend+0xb0>)
    1854:	681a      	ldr	r2, [r3, #0]
    1856:	4b0c      	ldr	r3, [pc, #48]	; (1888 <vTaskSuspend+0xc0>)
    1858:	681b      	ldr	r3, [r3, #0]
    185a:	429a      	cmp	r2, r3
    185c:	d103      	bne.n	1866 <vTaskSuspend+0x9e>
					pxCurrentTCB = NULL;
    185e:	4b05      	ldr	r3, [pc, #20]	; (1874 <vTaskSuspend+0xac>)
    1860:	2200      	movs	r2, #0
    1862:	601a      	str	r2, [r3, #0]
	}
    1864:	e001      	b.n	186a <vTaskSuspend+0xa2>
					vTaskSwitchContext();
    1866:	f000 fa01 	bl	1c6c <vTaskSwitchContext>
	}
    186a:	bf00      	nop
    186c:	3710      	adds	r7, #16
    186e:	46bd      	mov	sp, r7
    1870:	bd80      	pop	{r7, pc}
    1872:	bf00      	nop
    1874:	10006358 	.word	0x10006358
    1878:	100063f0 	.word	0x100063f0
    187c:	10006410 	.word	0x10006410
    1880:	1000642c 	.word	0x1000642c
    1884:	e000ed04 	.word	0xe000ed04
    1888:	10006404 	.word	0x10006404

0000188c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    188c:	b580      	push	{r7, lr}
    188e:	b084      	sub	sp, #16
    1890:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    1892:	4b1a      	ldr	r3, [pc, #104]	; (18fc <vTaskStartScheduler+0x70>)
    1894:	9301      	str	r3, [sp, #4]
    1896:	2300      	movs	r3, #0
    1898:	9300      	str	r3, [sp, #0]
    189a:	2300      	movs	r3, #0
    189c:	f44f 7280 	mov.w	r2, #256	; 0x100
    18a0:	4917      	ldr	r1, [pc, #92]	; (1900 <vTaskStartScheduler+0x74>)
    18a2:	4818      	ldr	r0, [pc, #96]	; (1904 <vTaskStartScheduler+0x78>)
    18a4:	f7ff fe6c 	bl	1580 <xTaskCreate>
    18a8:	6078      	str	r0, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    18aa:	687b      	ldr	r3, [r7, #4]
    18ac:	2b01      	cmp	r3, #1
    18ae:	d102      	bne.n	18b6 <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
    18b0:	f000 fd30 	bl	2314 <xTimerCreateTimerTask>
    18b4:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    18b6:	687b      	ldr	r3, [r7, #4]
    18b8:	2b01      	cmp	r3, #1
    18ba:	d115      	bne.n	18e8 <vTaskStartScheduler+0x5c>
	__asm volatile
    18bc:	f04f 0380 	mov.w	r3, #128	; 0x80
    18c0:	f383 8811 	msr	BASEPRI, r3
    18c4:	f3bf 8f6f 	isb	sy
    18c8:	f3bf 8f4f 	dsb	sy
    18cc:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    18ce:	4b0e      	ldr	r3, [pc, #56]	; (1908 <vTaskStartScheduler+0x7c>)
    18d0:	f04f 32ff 	mov.w	r2, #4294967295
    18d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    18d6:	4b0d      	ldr	r3, [pc, #52]	; (190c <vTaskStartScheduler+0x80>)
    18d8:	2201      	movs	r2, #1
    18da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    18dc:	4b0c      	ldr	r3, [pc, #48]	; (1910 <vTaskStartScheduler+0x84>)
    18de:	2200      	movs	r2, #0
    18e0:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    18e2:	f7fe fcbb 	bl	25c <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    18e6:	e004      	b.n	18f2 <vTaskStartScheduler+0x66>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    18e8:	687b      	ldr	r3, [r7, #4]
    18ea:	f1b3 3fff 	cmp.w	r3, #4294967295
    18ee:	d100      	bne.n	18f2 <vTaskStartScheduler+0x66>
    18f0:	e7fe      	b.n	18f0 <vTaskStartScheduler+0x64>
}
    18f2:	bf00      	nop
    18f4:	3708      	adds	r7, #8
    18f6:	46bd      	mov	sp, r7
    18f8:	bd80      	pop	{r7, pc}
    18fa:	bf00      	nop
    18fc:	10006428 	.word	0x10006428
    1900:	00004fac 	.word	0x00004fac
    1904:	00002069 	.word	0x00002069
    1908:	10006424 	.word	0x10006424
    190c:	10006410 	.word	0x10006410
    1910:	10006408 	.word	0x10006408

00001914 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    1914:	b480      	push	{r7}
    1916:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    1918:	4b04      	ldr	r3, [pc, #16]	; (192c <vTaskSuspendAll+0x18>)
    191a:	681b      	ldr	r3, [r3, #0]
    191c:	3301      	adds	r3, #1
    191e:	4a03      	ldr	r2, [pc, #12]	; (192c <vTaskSuspendAll+0x18>)
    1920:	6013      	str	r3, [r2, #0]
}
    1922:	bf00      	nop
    1924:	46bd      	mov	sp, r7
    1926:	f85d 7b04 	ldr.w	r7, [sp], #4
    192a:	4770      	bx	lr
    192c:	1000642c 	.word	0x1000642c

00001930 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
    1930:	b480      	push	{r7}
    1932:	b083      	sub	sp, #12
    1934:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
    1936:	2300      	movs	r3, #0
    1938:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
    193a:	4b14      	ldr	r3, [pc, #80]	; (198c <prvGetExpectedIdleTime+0x5c>)
    193c:	681b      	ldr	r3, [r3, #0]
    193e:	2b00      	cmp	r3, #0
    1940:	d001      	beq.n	1946 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
    1942:	2301      	movs	r3, #1
    1944:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
    1946:	4b12      	ldr	r3, [pc, #72]	; (1990 <prvGetExpectedIdleTime+0x60>)
    1948:	681b      	ldr	r3, [r3, #0]
    194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    194c:	2b00      	cmp	r3, #0
    194e:	d002      	beq.n	1956 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
    1950:	2300      	movs	r3, #0
    1952:	607b      	str	r3, [r7, #4]
    1954:	e012      	b.n	197c <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
    1956:	4b0f      	ldr	r3, [pc, #60]	; (1994 <prvGetExpectedIdleTime+0x64>)
    1958:	681b      	ldr	r3, [r3, #0]
    195a:	2b01      	cmp	r3, #1
    195c:	d902      	bls.n	1964 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
    195e:	2300      	movs	r3, #0
    1960:	607b      	str	r3, [r7, #4]
    1962:	e00b      	b.n	197c <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
    1964:	683b      	ldr	r3, [r7, #0]
    1966:	2b00      	cmp	r3, #0
    1968:	d002      	beq.n	1970 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
    196a:	2300      	movs	r3, #0
    196c:	607b      	str	r3, [r7, #4]
    196e:	e005      	b.n	197c <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
    1970:	4b09      	ldr	r3, [pc, #36]	; (1998 <prvGetExpectedIdleTime+0x68>)
    1972:	681a      	ldr	r2, [r3, #0]
    1974:	4b09      	ldr	r3, [pc, #36]	; (199c <prvGetExpectedIdleTime+0x6c>)
    1976:	681b      	ldr	r3, [r3, #0]
    1978:	1ad3      	subs	r3, r2, r3
    197a:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
    197c:	687b      	ldr	r3, [r7, #4]
	}
    197e:	4618      	mov	r0, r3
    1980:	370c      	adds	r7, #12
    1982:	46bd      	mov	sp, r7
    1984:	f85d 7b04 	ldr.w	r7, [sp], #4
    1988:	4770      	bx	lr
    198a:	bf00      	nop
    198c:	1000640c 	.word	0x1000640c
    1990:	10006358 	.word	0x10006358
    1994:	1000635c 	.word	0x1000635c
    1998:	10006424 	.word	0x10006424
    199c:	10006408 	.word	0x10006408

000019a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    19a0:	b580      	push	{r7, lr}
    19a2:	b084      	sub	sp, #16
    19a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    19a6:	2300      	movs	r3, #0
    19a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    19aa:	2300      	movs	r3, #0
    19ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    19ae:	4b3d      	ldr	r3, [pc, #244]	; (1aa4 <xTaskResumeAll+0x104>)
    19b0:	681b      	ldr	r3, [r3, #0]
    19b2:	2b00      	cmp	r3, #0
    19b4:	d100      	bne.n	19b8 <xTaskResumeAll+0x18>
    19b6:	e7fe      	b.n	19b6 <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    19b8:	f7fe fcd4 	bl	364 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    19bc:	4b39      	ldr	r3, [pc, #228]	; (1aa4 <xTaskResumeAll+0x104>)
    19be:	681b      	ldr	r3, [r3, #0]
    19c0:	3b01      	subs	r3, #1
    19c2:	4a38      	ldr	r2, [pc, #224]	; (1aa4 <xTaskResumeAll+0x104>)
    19c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    19c6:	4b37      	ldr	r3, [pc, #220]	; (1aa4 <xTaskResumeAll+0x104>)
    19c8:	681b      	ldr	r3, [r3, #0]
    19ca:	2b00      	cmp	r3, #0
    19cc:	d162      	bne.n	1a94 <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    19ce:	4b36      	ldr	r3, [pc, #216]	; (1aa8 <xTaskResumeAll+0x108>)
    19d0:	681b      	ldr	r3, [r3, #0]
    19d2:	2b00      	cmp	r3, #0
    19d4:	d05e      	beq.n	1a94 <xTaskResumeAll+0xf4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    19d6:	e02f      	b.n	1a38 <xTaskResumeAll+0x98>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    19d8:	4b34      	ldr	r3, [pc, #208]	; (1aac <xTaskResumeAll+0x10c>)
    19da:	68db      	ldr	r3, [r3, #12]
    19dc:	68db      	ldr	r3, [r3, #12]
    19de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    19e0:	68fb      	ldr	r3, [r7, #12]
    19e2:	3318      	adds	r3, #24
    19e4:	4618      	mov	r0, r3
    19e6:	f7ff f98b 	bl	d00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	3304      	adds	r3, #4
    19ee:	4618      	mov	r0, r3
    19f0:	f7ff f986 	bl	d00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    19f4:	68fb      	ldr	r3, [r7, #12]
    19f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    19f8:	4b2d      	ldr	r3, [pc, #180]	; (1ab0 <xTaskResumeAll+0x110>)
    19fa:	681b      	ldr	r3, [r3, #0]
    19fc:	429a      	cmp	r2, r3
    19fe:	d903      	bls.n	1a08 <xTaskResumeAll+0x68>
    1a00:	68fb      	ldr	r3, [r7, #12]
    1a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1a04:	4a2a      	ldr	r2, [pc, #168]	; (1ab0 <xTaskResumeAll+0x110>)
    1a06:	6013      	str	r3, [r2, #0]
    1a08:	68fb      	ldr	r3, [r7, #12]
    1a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1a0c:	4613      	mov	r3, r2
    1a0e:	009b      	lsls	r3, r3, #2
    1a10:	4413      	add	r3, r2
    1a12:	009b      	lsls	r3, r3, #2
    1a14:	4a27      	ldr	r2, [pc, #156]	; (1ab4 <xTaskResumeAll+0x114>)
    1a16:	441a      	add	r2, r3
    1a18:	68fb      	ldr	r3, [r7, #12]
    1a1a:	3304      	adds	r3, #4
    1a1c:	4619      	mov	r1, r3
    1a1e:	4610      	mov	r0, r2
    1a20:	f7ff f911 	bl	c46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1a24:	68fb      	ldr	r3, [r7, #12]
    1a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1a28:	4b23      	ldr	r3, [pc, #140]	; (1ab8 <xTaskResumeAll+0x118>)
    1a2a:	681b      	ldr	r3, [r3, #0]
    1a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1a2e:	429a      	cmp	r2, r3
    1a30:	d302      	bcc.n	1a38 <xTaskResumeAll+0x98>
					{
						xYieldPending = pdTRUE;
    1a32:	4b22      	ldr	r3, [pc, #136]	; (1abc <xTaskResumeAll+0x11c>)
    1a34:	2201      	movs	r2, #1
    1a36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1a38:	4b1c      	ldr	r3, [pc, #112]	; (1aac <xTaskResumeAll+0x10c>)
    1a3a:	681b      	ldr	r3, [r3, #0]
    1a3c:	2b00      	cmp	r3, #0
    1a3e:	d1cb      	bne.n	19d8 <xTaskResumeAll+0x38>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    1a40:	68fb      	ldr	r3, [r7, #12]
    1a42:	2b00      	cmp	r3, #0
    1a44:	d001      	beq.n	1a4a <xTaskResumeAll+0xaa>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    1a46:	f000 fbb5 	bl	21b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    1a4a:	4b1d      	ldr	r3, [pc, #116]	; (1ac0 <xTaskResumeAll+0x120>)
    1a4c:	681b      	ldr	r3, [r3, #0]
    1a4e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    1a50:	687b      	ldr	r3, [r7, #4]
    1a52:	2b00      	cmp	r3, #0
    1a54:	d010      	beq.n	1a78 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    1a56:	f000 f865 	bl	1b24 <xTaskIncrementTick>
    1a5a:	4603      	mov	r3, r0
    1a5c:	2b00      	cmp	r3, #0
    1a5e:	d002      	beq.n	1a66 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
    1a60:	4b16      	ldr	r3, [pc, #88]	; (1abc <xTaskResumeAll+0x11c>)
    1a62:	2201      	movs	r2, #1
    1a64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	3b01      	subs	r3, #1
    1a6a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	2b00      	cmp	r3, #0
    1a70:	d1f1      	bne.n	1a56 <xTaskResumeAll+0xb6>

						uxPendedTicks = 0;
    1a72:	4b13      	ldr	r3, [pc, #76]	; (1ac0 <xTaskResumeAll+0x120>)
    1a74:	2200      	movs	r2, #0
    1a76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    1a78:	4b10      	ldr	r3, [pc, #64]	; (1abc <xTaskResumeAll+0x11c>)
    1a7a:	681b      	ldr	r3, [r3, #0]
    1a7c:	2b00      	cmp	r3, #0
    1a7e:	d009      	beq.n	1a94 <xTaskResumeAll+0xf4>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    1a80:	2301      	movs	r3, #1
    1a82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    1a84:	4b0f      	ldr	r3, [pc, #60]	; (1ac4 <xTaskResumeAll+0x124>)
    1a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1a8a:	601a      	str	r2, [r3, #0]
    1a8c:	f3bf 8f4f 	dsb	sy
    1a90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    1a94:	f7fe fc8c 	bl	3b0 <vPortExitCritical>

	return xAlreadyYielded;
    1a98:	68bb      	ldr	r3, [r7, #8]
}
    1a9a:	4618      	mov	r0, r3
    1a9c:	3710      	adds	r7, #16
    1a9e:	46bd      	mov	sp, r7
    1aa0:	bd80      	pop	{r7, pc}
    1aa2:	bf00      	nop
    1aa4:	1000642c 	.word	0x1000642c
    1aa8:	10006404 	.word	0x10006404
    1aac:	100063dc 	.word	0x100063dc
    1ab0:	1000640c 	.word	0x1000640c
    1ab4:	1000635c 	.word	0x1000635c
    1ab8:	10006358 	.word	0x10006358
    1abc:	10006418 	.word	0x10006418
    1ac0:	10006414 	.word	0x10006414
    1ac4:	e000ed04 	.word	0xe000ed04

00001ac8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    1ac8:	b480      	push	{r7}
    1aca:	b083      	sub	sp, #12
    1acc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    1ace:	4b05      	ldr	r3, [pc, #20]	; (1ae4 <xTaskGetTickCount+0x1c>)
    1ad0:	681b      	ldr	r3, [r3, #0]
    1ad2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    1ad4:	687b      	ldr	r3, [r7, #4]
}
    1ad6:	4618      	mov	r0, r3
    1ad8:	370c      	adds	r7, #12
    1ada:	46bd      	mov	sp, r7
    1adc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ae0:	4770      	bx	lr
    1ae2:	bf00      	nop
    1ae4:	10006408 	.word	0x10006408

00001ae8 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
    1ae8:	b480      	push	{r7}
    1aea:	b083      	sub	sp, #12
    1aec:	af00      	add	r7, sp, #0
    1aee:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
    1af0:	4b0a      	ldr	r3, [pc, #40]	; (1b1c <vTaskStepTick+0x34>)
    1af2:	681a      	ldr	r2, [r3, #0]
    1af4:	687b      	ldr	r3, [r7, #4]
    1af6:	441a      	add	r2, r3
    1af8:	4b09      	ldr	r3, [pc, #36]	; (1b20 <vTaskStepTick+0x38>)
    1afa:	681b      	ldr	r3, [r3, #0]
    1afc:	429a      	cmp	r2, r3
    1afe:	d900      	bls.n	1b02 <vTaskStepTick+0x1a>
    1b00:	e7fe      	b.n	1b00 <vTaskStepTick+0x18>
		xTickCount += xTicksToJump;
    1b02:	4b06      	ldr	r3, [pc, #24]	; (1b1c <vTaskStepTick+0x34>)
    1b04:	681a      	ldr	r2, [r3, #0]
    1b06:	687b      	ldr	r3, [r7, #4]
    1b08:	4413      	add	r3, r2
    1b0a:	4a04      	ldr	r2, [pc, #16]	; (1b1c <vTaskStepTick+0x34>)
    1b0c:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
    1b0e:	bf00      	nop
    1b10:	370c      	adds	r7, #12
    1b12:	46bd      	mov	sp, r7
    1b14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b18:	4770      	bx	lr
    1b1a:	bf00      	nop
    1b1c:	10006408 	.word	0x10006408
    1b20:	10006424 	.word	0x10006424

00001b24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    1b24:	b580      	push	{r7, lr}
    1b26:	b086      	sub	sp, #24
    1b28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    1b2a:	2300      	movs	r3, #0
    1b2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1b2e:	4b44      	ldr	r3, [pc, #272]	; (1c40 <xTaskIncrementTick+0x11c>)
    1b30:	681b      	ldr	r3, [r3, #0]
    1b32:	2b00      	cmp	r3, #0
    1b34:	d174      	bne.n	1c20 <xTaskIncrementTick+0xfc>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
    1b36:	4b43      	ldr	r3, [pc, #268]	; (1c44 <xTaskIncrementTick+0x120>)
    1b38:	681b      	ldr	r3, [r3, #0]
    1b3a:	3301      	adds	r3, #1
    1b3c:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    1b3e:	4a41      	ldr	r2, [pc, #260]	; (1c44 <xTaskIncrementTick+0x120>)
    1b40:	693b      	ldr	r3, [r7, #16]
    1b42:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
    1b44:	693b      	ldr	r3, [r7, #16]
    1b46:	2b00      	cmp	r3, #0
    1b48:	d116      	bne.n	1b78 <xTaskIncrementTick+0x54>
		{
			taskSWITCH_DELAYED_LISTS();
    1b4a:	4b3f      	ldr	r3, [pc, #252]	; (1c48 <xTaskIncrementTick+0x124>)
    1b4c:	681b      	ldr	r3, [r3, #0]
    1b4e:	681b      	ldr	r3, [r3, #0]
    1b50:	2b00      	cmp	r3, #0
    1b52:	d000      	beq.n	1b56 <xTaskIncrementTick+0x32>
    1b54:	e7fe      	b.n	1b54 <xTaskIncrementTick+0x30>
    1b56:	4b3c      	ldr	r3, [pc, #240]	; (1c48 <xTaskIncrementTick+0x124>)
    1b58:	681b      	ldr	r3, [r3, #0]
    1b5a:	60fb      	str	r3, [r7, #12]
    1b5c:	4b3b      	ldr	r3, [pc, #236]	; (1c4c <xTaskIncrementTick+0x128>)
    1b5e:	681b      	ldr	r3, [r3, #0]
    1b60:	4a39      	ldr	r2, [pc, #228]	; (1c48 <xTaskIncrementTick+0x124>)
    1b62:	6013      	str	r3, [r2, #0]
    1b64:	4a39      	ldr	r2, [pc, #228]	; (1c4c <xTaskIncrementTick+0x128>)
    1b66:	68fb      	ldr	r3, [r7, #12]
    1b68:	6013      	str	r3, [r2, #0]
    1b6a:	4b39      	ldr	r3, [pc, #228]	; (1c50 <xTaskIncrementTick+0x12c>)
    1b6c:	681b      	ldr	r3, [r3, #0]
    1b6e:	3301      	adds	r3, #1
    1b70:	4a37      	ldr	r2, [pc, #220]	; (1c50 <xTaskIncrementTick+0x12c>)
    1b72:	6013      	str	r3, [r2, #0]
    1b74:	f000 fb1e 	bl	21b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    1b78:	4b36      	ldr	r3, [pc, #216]	; (1c54 <xTaskIncrementTick+0x130>)
    1b7a:	681b      	ldr	r3, [r3, #0]
    1b7c:	693a      	ldr	r2, [r7, #16]
    1b7e:	429a      	cmp	r2, r3
    1b80:	d353      	bcc.n	1c2a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1b82:	4b31      	ldr	r3, [pc, #196]	; (1c48 <xTaskIncrementTick+0x124>)
    1b84:	681b      	ldr	r3, [r3, #0]
    1b86:	681b      	ldr	r3, [r3, #0]
    1b88:	2b00      	cmp	r3, #0
    1b8a:	d101      	bne.n	1b90 <xTaskIncrementTick+0x6c>
    1b8c:	2301      	movs	r3, #1
    1b8e:	e000      	b.n	1b92 <xTaskIncrementTick+0x6e>
    1b90:	2300      	movs	r3, #0
    1b92:	2b00      	cmp	r3, #0
    1b94:	d004      	beq.n	1ba0 <xTaskIncrementTick+0x7c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1b96:	4b2f      	ldr	r3, [pc, #188]	; (1c54 <xTaskIncrementTick+0x130>)
    1b98:	f04f 32ff 	mov.w	r2, #4294967295
    1b9c:	601a      	str	r2, [r3, #0]
					break;
    1b9e:	e044      	b.n	1c2a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1ba0:	4b29      	ldr	r3, [pc, #164]	; (1c48 <xTaskIncrementTick+0x124>)
    1ba2:	681b      	ldr	r3, [r3, #0]
    1ba4:	68db      	ldr	r3, [r3, #12]
    1ba6:	68db      	ldr	r3, [r3, #12]
    1ba8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    1baa:	68bb      	ldr	r3, [r7, #8]
    1bac:	685b      	ldr	r3, [r3, #4]
    1bae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    1bb0:	693a      	ldr	r2, [r7, #16]
    1bb2:	687b      	ldr	r3, [r7, #4]
    1bb4:	429a      	cmp	r2, r3
    1bb6:	d203      	bcs.n	1bc0 <xTaskIncrementTick+0x9c>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    1bb8:	4a26      	ldr	r2, [pc, #152]	; (1c54 <xTaskIncrementTick+0x130>)
    1bba:	687b      	ldr	r3, [r7, #4]
    1bbc:	6013      	str	r3, [r2, #0]
						break;
    1bbe:	e034      	b.n	1c2a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1bc0:	68bb      	ldr	r3, [r7, #8]
    1bc2:	3304      	adds	r3, #4
    1bc4:	4618      	mov	r0, r3
    1bc6:	f7ff f89b 	bl	d00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1bca:	68bb      	ldr	r3, [r7, #8]
    1bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1bce:	2b00      	cmp	r3, #0
    1bd0:	d004      	beq.n	1bdc <xTaskIncrementTick+0xb8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1bd2:	68bb      	ldr	r3, [r7, #8]
    1bd4:	3318      	adds	r3, #24
    1bd6:	4618      	mov	r0, r3
    1bd8:	f7ff f892 	bl	d00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    1bdc:	68bb      	ldr	r3, [r7, #8]
    1bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1be0:	4b1d      	ldr	r3, [pc, #116]	; (1c58 <xTaskIncrementTick+0x134>)
    1be2:	681b      	ldr	r3, [r3, #0]
    1be4:	429a      	cmp	r2, r3
    1be6:	d903      	bls.n	1bf0 <xTaskIncrementTick+0xcc>
    1be8:	68bb      	ldr	r3, [r7, #8]
    1bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1bec:	4a1a      	ldr	r2, [pc, #104]	; (1c58 <xTaskIncrementTick+0x134>)
    1bee:	6013      	str	r3, [r2, #0]
    1bf0:	68bb      	ldr	r3, [r7, #8]
    1bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1bf4:	4613      	mov	r3, r2
    1bf6:	009b      	lsls	r3, r3, #2
    1bf8:	4413      	add	r3, r2
    1bfa:	009b      	lsls	r3, r3, #2
    1bfc:	4a17      	ldr	r2, [pc, #92]	; (1c5c <xTaskIncrementTick+0x138>)
    1bfe:	441a      	add	r2, r3
    1c00:	68bb      	ldr	r3, [r7, #8]
    1c02:	3304      	adds	r3, #4
    1c04:	4619      	mov	r1, r3
    1c06:	4610      	mov	r0, r2
    1c08:	f7ff f81d 	bl	c46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1c0c:	68bb      	ldr	r3, [r7, #8]
    1c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1c10:	4b13      	ldr	r3, [pc, #76]	; (1c60 <xTaskIncrementTick+0x13c>)
    1c12:	681b      	ldr	r3, [r3, #0]
    1c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1c16:	429a      	cmp	r2, r3
    1c18:	d3b3      	bcc.n	1b82 <xTaskIncrementTick+0x5e>
						{
							xSwitchRequired = pdTRUE;
    1c1a:	2301      	movs	r3, #1
    1c1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1c1e:	e7b0      	b.n	1b82 <xTaskIncrementTick+0x5e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    1c20:	4b10      	ldr	r3, [pc, #64]	; (1c64 <xTaskIncrementTick+0x140>)
    1c22:	681b      	ldr	r3, [r3, #0]
    1c24:	3301      	adds	r3, #1
    1c26:	4a0f      	ldr	r2, [pc, #60]	; (1c64 <xTaskIncrementTick+0x140>)
    1c28:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    1c2a:	4b0f      	ldr	r3, [pc, #60]	; (1c68 <xTaskIncrementTick+0x144>)
    1c2c:	681b      	ldr	r3, [r3, #0]
    1c2e:	2b00      	cmp	r3, #0
    1c30:	d001      	beq.n	1c36 <xTaskIncrementTick+0x112>
		{
			xSwitchRequired = pdTRUE;
    1c32:	2301      	movs	r3, #1
    1c34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    1c36:	697b      	ldr	r3, [r7, #20]
}
    1c38:	4618      	mov	r0, r3
    1c3a:	3718      	adds	r7, #24
    1c3c:	46bd      	mov	sp, r7
    1c3e:	bd80      	pop	{r7, pc}
    1c40:	1000642c 	.word	0x1000642c
    1c44:	10006408 	.word	0x10006408
    1c48:	100063d4 	.word	0x100063d4
    1c4c:	100063d8 	.word	0x100063d8
    1c50:	1000641c 	.word	0x1000641c
    1c54:	10006424 	.word	0x10006424
    1c58:	1000640c 	.word	0x1000640c
    1c5c:	1000635c 	.word	0x1000635c
    1c60:	10006358 	.word	0x10006358
    1c64:	10006414 	.word	0x10006414
    1c68:	10006418 	.word	0x10006418

00001c6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    1c6c:	b580      	push	{r7, lr}
    1c6e:	b084      	sub	sp, #16
    1c70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1c72:	4b35      	ldr	r3, [pc, #212]	; (1d48 <vTaskSwitchContext+0xdc>)
    1c74:	681b      	ldr	r3, [r3, #0]
    1c76:	2b00      	cmp	r3, #0
    1c78:	d003      	beq.n	1c82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    1c7a:	4b34      	ldr	r3, [pc, #208]	; (1d4c <vTaskSwitchContext+0xe0>)
    1c7c:	2201      	movs	r2, #1
    1c7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    1c80:	e05e      	b.n	1d40 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
    1c82:	4b32      	ldr	r3, [pc, #200]	; (1d4c <vTaskSwitchContext+0xe0>)
    1c84:	2200      	movs	r2, #0
    1c86:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    1c88:	4b31      	ldr	r3, [pc, #196]	; (1d50 <vTaskSwitchContext+0xe4>)
    1c8a:	681b      	ldr	r3, [r3, #0]
    1c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1c8e:	60bb      	str	r3, [r7, #8]
    1c90:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
    1c94:	607b      	str	r3, [r7, #4]
    1c96:	68bb      	ldr	r3, [r7, #8]
    1c98:	681a      	ldr	r2, [r3, #0]
    1c9a:	687b      	ldr	r3, [r7, #4]
    1c9c:	429a      	cmp	r2, r3
    1c9e:	d111      	bne.n	1cc4 <vTaskSwitchContext+0x58>
    1ca0:	68bb      	ldr	r3, [r7, #8]
    1ca2:	3304      	adds	r3, #4
    1ca4:	681a      	ldr	r2, [r3, #0]
    1ca6:	687b      	ldr	r3, [r7, #4]
    1ca8:	429a      	cmp	r2, r3
    1caa:	d10b      	bne.n	1cc4 <vTaskSwitchContext+0x58>
    1cac:	68bb      	ldr	r3, [r7, #8]
    1cae:	3308      	adds	r3, #8
    1cb0:	681a      	ldr	r2, [r3, #0]
    1cb2:	687b      	ldr	r3, [r7, #4]
    1cb4:	429a      	cmp	r2, r3
    1cb6:	d105      	bne.n	1cc4 <vTaskSwitchContext+0x58>
    1cb8:	68bb      	ldr	r3, [r7, #8]
    1cba:	330c      	adds	r3, #12
    1cbc:	681a      	ldr	r2, [r3, #0]
    1cbe:	687b      	ldr	r3, [r7, #4]
    1cc0:	429a      	cmp	r2, r3
    1cc2:	d008      	beq.n	1cd6 <vTaskSwitchContext+0x6a>
    1cc4:	4b22      	ldr	r3, [pc, #136]	; (1d50 <vTaskSwitchContext+0xe4>)
    1cc6:	681a      	ldr	r2, [r3, #0]
    1cc8:	4b21      	ldr	r3, [pc, #132]	; (1d50 <vTaskSwitchContext+0xe4>)
    1cca:	681b      	ldr	r3, [r3, #0]
    1ccc:	3334      	adds	r3, #52	; 0x34
    1cce:	4619      	mov	r1, r3
    1cd0:	4610      	mov	r0, r2
    1cd2:	f001 fadb 	bl	328c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1cd6:	4b1f      	ldr	r3, [pc, #124]	; (1d54 <vTaskSwitchContext+0xe8>)
    1cd8:	681b      	ldr	r3, [r3, #0]
    1cda:	60fb      	str	r3, [r7, #12]
    1cdc:	e006      	b.n	1cec <vTaskSwitchContext+0x80>
    1cde:	68fb      	ldr	r3, [r7, #12]
    1ce0:	2b00      	cmp	r3, #0
    1ce2:	d100      	bne.n	1ce6 <vTaskSwitchContext+0x7a>
    1ce4:	e7fe      	b.n	1ce4 <vTaskSwitchContext+0x78>
    1ce6:	68fb      	ldr	r3, [r7, #12]
    1ce8:	3b01      	subs	r3, #1
    1cea:	60fb      	str	r3, [r7, #12]
    1cec:	491a      	ldr	r1, [pc, #104]	; (1d58 <vTaskSwitchContext+0xec>)
    1cee:	68fa      	ldr	r2, [r7, #12]
    1cf0:	4613      	mov	r3, r2
    1cf2:	009b      	lsls	r3, r3, #2
    1cf4:	4413      	add	r3, r2
    1cf6:	009b      	lsls	r3, r3, #2
    1cf8:	440b      	add	r3, r1
    1cfa:	681b      	ldr	r3, [r3, #0]
    1cfc:	2b00      	cmp	r3, #0
    1cfe:	d0ee      	beq.n	1cde <vTaskSwitchContext+0x72>
    1d00:	68fa      	ldr	r2, [r7, #12]
    1d02:	4613      	mov	r3, r2
    1d04:	009b      	lsls	r3, r3, #2
    1d06:	4413      	add	r3, r2
    1d08:	009b      	lsls	r3, r3, #2
    1d0a:	4a13      	ldr	r2, [pc, #76]	; (1d58 <vTaskSwitchContext+0xec>)
    1d0c:	4413      	add	r3, r2
    1d0e:	603b      	str	r3, [r7, #0]
    1d10:	683b      	ldr	r3, [r7, #0]
    1d12:	685b      	ldr	r3, [r3, #4]
    1d14:	685a      	ldr	r2, [r3, #4]
    1d16:	683b      	ldr	r3, [r7, #0]
    1d18:	605a      	str	r2, [r3, #4]
    1d1a:	683b      	ldr	r3, [r7, #0]
    1d1c:	685a      	ldr	r2, [r3, #4]
    1d1e:	683b      	ldr	r3, [r7, #0]
    1d20:	3308      	adds	r3, #8
    1d22:	429a      	cmp	r2, r3
    1d24:	d104      	bne.n	1d30 <vTaskSwitchContext+0xc4>
    1d26:	683b      	ldr	r3, [r7, #0]
    1d28:	685b      	ldr	r3, [r3, #4]
    1d2a:	685a      	ldr	r2, [r3, #4]
    1d2c:	683b      	ldr	r3, [r7, #0]
    1d2e:	605a      	str	r2, [r3, #4]
    1d30:	683b      	ldr	r3, [r7, #0]
    1d32:	685b      	ldr	r3, [r3, #4]
    1d34:	68db      	ldr	r3, [r3, #12]
    1d36:	4a06      	ldr	r2, [pc, #24]	; (1d50 <vTaskSwitchContext+0xe4>)
    1d38:	6013      	str	r3, [r2, #0]
    1d3a:	4a06      	ldr	r2, [pc, #24]	; (1d54 <vTaskSwitchContext+0xe8>)
    1d3c:	68fb      	ldr	r3, [r7, #12]
    1d3e:	6013      	str	r3, [r2, #0]
}
    1d40:	bf00      	nop
    1d42:	3710      	adds	r7, #16
    1d44:	46bd      	mov	sp, r7
    1d46:	bd80      	pop	{r7, pc}
    1d48:	1000642c 	.word	0x1000642c
    1d4c:	10006418 	.word	0x10006418
    1d50:	10006358 	.word	0x10006358
    1d54:	1000640c 	.word	0x1000640c
    1d58:	1000635c 	.word	0x1000635c

00001d5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    1d5c:	b580      	push	{r7, lr}
    1d5e:	b082      	sub	sp, #8
    1d60:	af00      	add	r7, sp, #0
    1d62:	6078      	str	r0, [r7, #4]
    1d64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    1d66:	687b      	ldr	r3, [r7, #4]
    1d68:	2b00      	cmp	r3, #0
    1d6a:	d100      	bne.n	1d6e <vTaskPlaceOnEventList+0x12>
    1d6c:	e7fe      	b.n	1d6c <vTaskPlaceOnEventList+0x10>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1d6e:	4b07      	ldr	r3, [pc, #28]	; (1d8c <vTaskPlaceOnEventList+0x30>)
    1d70:	681b      	ldr	r3, [r3, #0]
    1d72:	3318      	adds	r3, #24
    1d74:	4619      	mov	r1, r3
    1d76:	6878      	ldr	r0, [r7, #4]
    1d78:	f7fe ff89 	bl	c8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1d7c:	2101      	movs	r1, #1
    1d7e:	6838      	ldr	r0, [r7, #0]
    1d80:	f000 fa74 	bl	226c <prvAddCurrentTaskToDelayedList>
}
    1d84:	bf00      	nop
    1d86:	3708      	adds	r7, #8
    1d88:	46bd      	mov	sp, r7
    1d8a:	bd80      	pop	{r7, pc}
    1d8c:	10006358 	.word	0x10006358

00001d90 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    1d90:	b580      	push	{r7, lr}
    1d92:	b084      	sub	sp, #16
    1d94:	af00      	add	r7, sp, #0
    1d96:	60f8      	str	r0, [r7, #12]
    1d98:	60b9      	str	r1, [r7, #8]
    1d9a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
    1d9c:	68fb      	ldr	r3, [r7, #12]
    1d9e:	2b00      	cmp	r3, #0
    1da0:	d100      	bne.n	1da4 <vTaskPlaceOnUnorderedEventList+0x14>
    1da2:	e7fe      	b.n	1da2 <vTaskPlaceOnUnorderedEventList+0x12>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
    1da4:	4b0c      	ldr	r3, [pc, #48]	; (1dd8 <vTaskPlaceOnUnorderedEventList+0x48>)
    1da6:	681b      	ldr	r3, [r3, #0]
    1da8:	2b00      	cmp	r3, #0
    1daa:	d100      	bne.n	1dae <vTaskPlaceOnUnorderedEventList+0x1e>
    1dac:	e7fe      	b.n	1dac <vTaskPlaceOnUnorderedEventList+0x1c>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    1dae:	4b0b      	ldr	r3, [pc, #44]	; (1ddc <vTaskPlaceOnUnorderedEventList+0x4c>)
    1db0:	681b      	ldr	r3, [r3, #0]
    1db2:	68ba      	ldr	r2, [r7, #8]
    1db4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    1db8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1dba:	4b08      	ldr	r3, [pc, #32]	; (1ddc <vTaskPlaceOnUnorderedEventList+0x4c>)
    1dbc:	681b      	ldr	r3, [r3, #0]
    1dbe:	3318      	adds	r3, #24
    1dc0:	4619      	mov	r1, r3
    1dc2:	68f8      	ldr	r0, [r7, #12]
    1dc4:	f7fe ff3f 	bl	c46 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1dc8:	2101      	movs	r1, #1
    1dca:	6878      	ldr	r0, [r7, #4]
    1dcc:	f000 fa4e 	bl	226c <prvAddCurrentTaskToDelayedList>
}
    1dd0:	bf00      	nop
    1dd2:	3710      	adds	r7, #16
    1dd4:	46bd      	mov	sp, r7
    1dd6:	bd80      	pop	{r7, pc}
    1dd8:	1000642c 	.word	0x1000642c
    1ddc:	10006358 	.word	0x10006358

00001de0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    1de0:	b580      	push	{r7, lr}
    1de2:	b084      	sub	sp, #16
    1de4:	af00      	add	r7, sp, #0
    1de6:	60f8      	str	r0, [r7, #12]
    1de8:	60b9      	str	r1, [r7, #8]
    1dea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    1dec:	68fb      	ldr	r3, [r7, #12]
    1dee:	2b00      	cmp	r3, #0
    1df0:	d100      	bne.n	1df4 <vTaskPlaceOnEventListRestricted+0x14>
    1df2:	e7fe      	b.n	1df2 <vTaskPlaceOnEventListRestricted+0x12>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1df4:	4b0a      	ldr	r3, [pc, #40]	; (1e20 <vTaskPlaceOnEventListRestricted+0x40>)
    1df6:	681b      	ldr	r3, [r3, #0]
    1df8:	3318      	adds	r3, #24
    1dfa:	4619      	mov	r1, r3
    1dfc:	68f8      	ldr	r0, [r7, #12]
    1dfe:	f7fe ff22 	bl	c46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    1e02:	687b      	ldr	r3, [r7, #4]
    1e04:	2b00      	cmp	r3, #0
    1e06:	d002      	beq.n	1e0e <vTaskPlaceOnEventListRestricted+0x2e>
		{
			xTicksToWait = portMAX_DELAY;
    1e08:	f04f 33ff 	mov.w	r3, #4294967295
    1e0c:	60bb      	str	r3, [r7, #8]
		}

//		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    1e0e:	6879      	ldr	r1, [r7, #4]
    1e10:	68b8      	ldr	r0, [r7, #8]
    1e12:	f000 fa2b 	bl	226c <prvAddCurrentTaskToDelayedList>
	}
    1e16:	bf00      	nop
    1e18:	3710      	adds	r7, #16
    1e1a:	46bd      	mov	sp, r7
    1e1c:	bd80      	pop	{r7, pc}
    1e1e:	bf00      	nop
    1e20:	10006358 	.word	0x10006358

00001e24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    1e24:	b580      	push	{r7, lr}
    1e26:	b084      	sub	sp, #16
    1e28:	af00      	add	r7, sp, #0
    1e2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    1e2c:	687b      	ldr	r3, [r7, #4]
    1e2e:	68db      	ldr	r3, [r3, #12]
    1e30:	68db      	ldr	r3, [r3, #12]
    1e32:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    1e34:	68bb      	ldr	r3, [r7, #8]
    1e36:	2b00      	cmp	r3, #0
    1e38:	d100      	bne.n	1e3c <xTaskRemoveFromEventList+0x18>
    1e3a:	e7fe      	b.n	1e3a <xTaskRemoveFromEventList+0x16>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    1e3c:	68bb      	ldr	r3, [r7, #8]
    1e3e:	3318      	adds	r3, #24
    1e40:	4618      	mov	r0, r3
    1e42:	f7fe ff5d 	bl	d00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1e46:	4b1f      	ldr	r3, [pc, #124]	; (1ec4 <xTaskRemoveFromEventList+0xa0>)
    1e48:	681b      	ldr	r3, [r3, #0]
    1e4a:	2b00      	cmp	r3, #0
    1e4c:	d11d      	bne.n	1e8a <xTaskRemoveFromEventList+0x66>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    1e4e:	68bb      	ldr	r3, [r7, #8]
    1e50:	3304      	adds	r3, #4
    1e52:	4618      	mov	r0, r3
    1e54:	f7fe ff54 	bl	d00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    1e58:	68bb      	ldr	r3, [r7, #8]
    1e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1e5c:	4b1a      	ldr	r3, [pc, #104]	; (1ec8 <xTaskRemoveFromEventList+0xa4>)
    1e5e:	681b      	ldr	r3, [r3, #0]
    1e60:	429a      	cmp	r2, r3
    1e62:	d903      	bls.n	1e6c <xTaskRemoveFromEventList+0x48>
    1e64:	68bb      	ldr	r3, [r7, #8]
    1e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1e68:	4a17      	ldr	r2, [pc, #92]	; (1ec8 <xTaskRemoveFromEventList+0xa4>)
    1e6a:	6013      	str	r3, [r2, #0]
    1e6c:	68bb      	ldr	r3, [r7, #8]
    1e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1e70:	4613      	mov	r3, r2
    1e72:	009b      	lsls	r3, r3, #2
    1e74:	4413      	add	r3, r2
    1e76:	009b      	lsls	r3, r3, #2
    1e78:	4a14      	ldr	r2, [pc, #80]	; (1ecc <xTaskRemoveFromEventList+0xa8>)
    1e7a:	441a      	add	r2, r3
    1e7c:	68bb      	ldr	r3, [r7, #8]
    1e7e:	3304      	adds	r3, #4
    1e80:	4619      	mov	r1, r3
    1e82:	4610      	mov	r0, r2
    1e84:	f7fe fedf 	bl	c46 <vListInsertEnd>
    1e88:	e005      	b.n	1e96 <xTaskRemoveFromEventList+0x72>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    1e8a:	68bb      	ldr	r3, [r7, #8]
    1e8c:	3318      	adds	r3, #24
    1e8e:	4619      	mov	r1, r3
    1e90:	480f      	ldr	r0, [pc, #60]	; (1ed0 <xTaskRemoveFromEventList+0xac>)
    1e92:	f7fe fed8 	bl	c46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1e96:	68bb      	ldr	r3, [r7, #8]
    1e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1e9a:	4b0e      	ldr	r3, [pc, #56]	; (1ed4 <xTaskRemoveFromEventList+0xb0>)
    1e9c:	681b      	ldr	r3, [r3, #0]
    1e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1ea0:	429a      	cmp	r2, r3
    1ea2:	d905      	bls.n	1eb0 <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    1ea4:	2301      	movs	r3, #1
    1ea6:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    1ea8:	4b0b      	ldr	r3, [pc, #44]	; (1ed8 <xTaskRemoveFromEventList+0xb4>)
    1eaa:	2201      	movs	r2, #1
    1eac:	601a      	str	r2, [r3, #0]
    1eae:	e001      	b.n	1eb4 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
    1eb4:	f000 f97e 	bl	21b4 <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
    1eb8:	68fb      	ldr	r3, [r7, #12]
}
    1eba:	4618      	mov	r0, r3
    1ebc:	3710      	adds	r7, #16
    1ebe:	46bd      	mov	sp, r7
    1ec0:	bd80      	pop	{r7, pc}
    1ec2:	bf00      	nop
    1ec4:	1000642c 	.word	0x1000642c
    1ec8:	1000640c 	.word	0x1000640c
    1ecc:	1000635c 	.word	0x1000635c
    1ed0:	100063dc 	.word	0x100063dc
    1ed4:	10006358 	.word	0x10006358
    1ed8:	10006418 	.word	0x10006418

00001edc <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    1edc:	b580      	push	{r7, lr}
    1ede:	b084      	sub	sp, #16
    1ee0:	af00      	add	r7, sp, #0
    1ee2:	6078      	str	r0, [r7, #4]
    1ee4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;
BaseType_t xReturn;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
    1ee6:	4b22      	ldr	r3, [pc, #136]	; (1f70 <xTaskRemoveFromUnorderedEventList+0x94>)
    1ee8:	681b      	ldr	r3, [r3, #0]
    1eea:	2b00      	cmp	r3, #0
    1eec:	d100      	bne.n	1ef0 <xTaskRemoveFromUnorderedEventList+0x14>
    1eee:	e7fe      	b.n	1eee <xTaskRemoveFromUnorderedEventList+0x12>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    1ef0:	683b      	ldr	r3, [r7, #0]
    1ef2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    1efa:	687b      	ldr	r3, [r7, #4]
    1efc:	68db      	ldr	r3, [r3, #12]
    1efe:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    1f00:	68bb      	ldr	r3, [r7, #8]
    1f02:	2b00      	cmp	r3, #0
    1f04:	d100      	bne.n	1f08 <xTaskRemoveFromUnorderedEventList+0x2c>
    1f06:	e7fe      	b.n	1f06 <xTaskRemoveFromUnorderedEventList+0x2a>
	( void ) uxListRemove( pxEventListItem );
    1f08:	6878      	ldr	r0, [r7, #4]
    1f0a:	f7fe fef9 	bl	d00 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    1f0e:	68bb      	ldr	r3, [r7, #8]
    1f10:	3304      	adds	r3, #4
    1f12:	4618      	mov	r0, r3
    1f14:	f7fe fef4 	bl	d00 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    1f18:	68bb      	ldr	r3, [r7, #8]
    1f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1f1c:	4b15      	ldr	r3, [pc, #84]	; (1f74 <xTaskRemoveFromUnorderedEventList+0x98>)
    1f1e:	681b      	ldr	r3, [r3, #0]
    1f20:	429a      	cmp	r2, r3
    1f22:	d903      	bls.n	1f2c <xTaskRemoveFromUnorderedEventList+0x50>
    1f24:	68bb      	ldr	r3, [r7, #8]
    1f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1f28:	4a12      	ldr	r2, [pc, #72]	; (1f74 <xTaskRemoveFromUnorderedEventList+0x98>)
    1f2a:	6013      	str	r3, [r2, #0]
    1f2c:	68bb      	ldr	r3, [r7, #8]
    1f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1f30:	4613      	mov	r3, r2
    1f32:	009b      	lsls	r3, r3, #2
    1f34:	4413      	add	r3, r2
    1f36:	009b      	lsls	r3, r3, #2
    1f38:	4a0f      	ldr	r2, [pc, #60]	; (1f78 <xTaskRemoveFromUnorderedEventList+0x9c>)
    1f3a:	441a      	add	r2, r3
    1f3c:	68bb      	ldr	r3, [r7, #8]
    1f3e:	3304      	adds	r3, #4
    1f40:	4619      	mov	r1, r3
    1f42:	4610      	mov	r0, r2
    1f44:	f7fe fe7f 	bl	c46 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1f48:	68bb      	ldr	r3, [r7, #8]
    1f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1f4c:	4b0b      	ldr	r3, [pc, #44]	; (1f7c <xTaskRemoveFromUnorderedEventList+0xa0>)
    1f4e:	681b      	ldr	r3, [r3, #0]
    1f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1f52:	429a      	cmp	r2, r3
    1f54:	d905      	bls.n	1f62 <xTaskRemoveFromUnorderedEventList+0x86>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    1f56:	2301      	movs	r3, #1
    1f58:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    1f5a:	4b09      	ldr	r3, [pc, #36]	; (1f80 <xTaskRemoveFromUnorderedEventList+0xa4>)
    1f5c:	2201      	movs	r2, #1
    1f5e:	601a      	str	r2, [r3, #0]
    1f60:	e001      	b.n	1f66 <xTaskRemoveFromUnorderedEventList+0x8a>
	}
	else
	{
		xReturn = pdFALSE;
    1f62:	2300      	movs	r3, #0
    1f64:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    1f66:	68fb      	ldr	r3, [r7, #12]
}
    1f68:	4618      	mov	r0, r3
    1f6a:	3710      	adds	r7, #16
    1f6c:	46bd      	mov	sp, r7
    1f6e:	bd80      	pop	{r7, pc}
    1f70:	1000642c 	.word	0x1000642c
    1f74:	1000640c 	.word	0x1000640c
    1f78:	1000635c 	.word	0x1000635c
    1f7c:	10006358 	.word	0x10006358
    1f80:	10006418 	.word	0x10006418

00001f84 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    1f84:	b480      	push	{r7}
    1f86:	b083      	sub	sp, #12
    1f88:	af00      	add	r7, sp, #0
    1f8a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
    1f8c:	687b      	ldr	r3, [r7, #4]
    1f8e:	2b00      	cmp	r3, #0
    1f90:	d100      	bne.n	1f94 <vTaskSetTimeOutState+0x10>
    1f92:	e7fe      	b.n	1f92 <vTaskSetTimeOutState+0xe>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    1f94:	4b06      	ldr	r3, [pc, #24]	; (1fb0 <vTaskSetTimeOutState+0x2c>)
    1f96:	681a      	ldr	r2, [r3, #0]
    1f98:	687b      	ldr	r3, [r7, #4]
    1f9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    1f9c:	4b05      	ldr	r3, [pc, #20]	; (1fb4 <vTaskSetTimeOutState+0x30>)
    1f9e:	681a      	ldr	r2, [r3, #0]
    1fa0:	687b      	ldr	r3, [r7, #4]
    1fa2:	605a      	str	r2, [r3, #4]
}
    1fa4:	bf00      	nop
    1fa6:	370c      	adds	r7, #12
    1fa8:	46bd      	mov	sp, r7
    1faa:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fae:	4770      	bx	lr
    1fb0:	1000641c 	.word	0x1000641c
    1fb4:	10006408 	.word	0x10006408

00001fb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    1fb8:	b580      	push	{r7, lr}
    1fba:	b084      	sub	sp, #16
    1fbc:	af00      	add	r7, sp, #0
    1fbe:	6078      	str	r0, [r7, #4]
    1fc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    1fc2:	687b      	ldr	r3, [r7, #4]
    1fc4:	2b00      	cmp	r3, #0
    1fc6:	d100      	bne.n	1fca <xTaskCheckForTimeOut+0x12>
    1fc8:	e7fe      	b.n	1fc8 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTicksToWait );
    1fca:	683b      	ldr	r3, [r7, #0]
    1fcc:	2b00      	cmp	r3, #0
    1fce:	d100      	bne.n	1fd2 <xTaskCheckForTimeOut+0x1a>
    1fd0:	e7fe      	b.n	1fd0 <xTaskCheckForTimeOut+0x18>

	taskENTER_CRITICAL();
    1fd2:	f7fe f9c7 	bl	364 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    1fd6:	4b1c      	ldr	r3, [pc, #112]	; (2048 <xTaskCheckForTimeOut+0x90>)
    1fd8:	681b      	ldr	r3, [r3, #0]
    1fda:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    1fdc:	683b      	ldr	r3, [r7, #0]
    1fde:	681b      	ldr	r3, [r3, #0]
    1fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
    1fe4:	d102      	bne.n	1fec <xTaskCheckForTimeOut+0x34>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    1fe6:	2300      	movs	r3, #0
    1fe8:	60fb      	str	r3, [r7, #12]
    1fea:	e026      	b.n	203a <xTaskCheckForTimeOut+0x82>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1fec:	687b      	ldr	r3, [r7, #4]
    1fee:	681a      	ldr	r2, [r3, #0]
    1ff0:	4b16      	ldr	r3, [pc, #88]	; (204c <xTaskCheckForTimeOut+0x94>)
    1ff2:	681b      	ldr	r3, [r3, #0]
    1ff4:	429a      	cmp	r2, r3
    1ff6:	d007      	beq.n	2008 <xTaskCheckForTimeOut+0x50>
    1ff8:	687b      	ldr	r3, [r7, #4]
    1ffa:	685a      	ldr	r2, [r3, #4]
    1ffc:	68bb      	ldr	r3, [r7, #8]
    1ffe:	429a      	cmp	r2, r3
    2000:	d802      	bhi.n	2008 <xTaskCheckForTimeOut+0x50>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    2002:	2301      	movs	r3, #1
    2004:	60fb      	str	r3, [r7, #12]
    2006:	e018      	b.n	203a <xTaskCheckForTimeOut+0x82>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    2008:	687b      	ldr	r3, [r7, #4]
    200a:	685b      	ldr	r3, [r3, #4]
    200c:	68ba      	ldr	r2, [r7, #8]
    200e:	1ad2      	subs	r2, r2, r3
    2010:	683b      	ldr	r3, [r7, #0]
    2012:	681b      	ldr	r3, [r3, #0]
    2014:	429a      	cmp	r2, r3
    2016:	d20e      	bcs.n	2036 <xTaskCheckForTimeOut+0x7e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    2018:	683b      	ldr	r3, [r7, #0]
    201a:	681a      	ldr	r2, [r3, #0]
    201c:	687b      	ldr	r3, [r7, #4]
    201e:	6859      	ldr	r1, [r3, #4]
    2020:	68bb      	ldr	r3, [r7, #8]
    2022:	1acb      	subs	r3, r1, r3
    2024:	441a      	add	r2, r3
    2026:	683b      	ldr	r3, [r7, #0]
    2028:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    202a:	6878      	ldr	r0, [r7, #4]
    202c:	f7ff ffaa 	bl	1f84 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    2030:	2300      	movs	r3, #0
    2032:	60fb      	str	r3, [r7, #12]
    2034:	e001      	b.n	203a <xTaskCheckForTimeOut+0x82>
		}
		else
		{
			xReturn = pdTRUE;
    2036:	2301      	movs	r3, #1
    2038:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    203a:	f7fe f9b9 	bl	3b0 <vPortExitCritical>

	return xReturn;
    203e:	68fb      	ldr	r3, [r7, #12]
}
    2040:	4618      	mov	r0, r3
    2042:	3710      	adds	r7, #16
    2044:	46bd      	mov	sp, r7
    2046:	bd80      	pop	{r7, pc}
    2048:	10006408 	.word	0x10006408
    204c:	1000641c 	.word	0x1000641c

00002050 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    2050:	b480      	push	{r7}
    2052:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    2054:	4b03      	ldr	r3, [pc, #12]	; (2064 <vTaskMissedYield+0x14>)
    2056:	2201      	movs	r2, #1
    2058:	601a      	str	r2, [r3, #0]
}
    205a:	bf00      	nop
    205c:	46bd      	mov	sp, r7
    205e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2062:	4770      	bx	lr
    2064:	10006418 	.word	0x10006418

00002068 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    2068:	b580      	push	{r7, lr}
    206a:	b084      	sub	sp, #16
    206c:	af00      	add	r7, sp, #0
    206e:	6078      	str	r0, [r7, #4]
	for( ;; )
	{
	
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    2070:	f000 f898 	bl	21a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    2074:	4b13      	ldr	r3, [pc, #76]	; (20c4 <prvIdleTask+0x5c>)
    2076:	681b      	ldr	r3, [r3, #0]
    2078:	2b01      	cmp	r3, #1
    207a:	d907      	bls.n	208c <prvIdleTask+0x24>
			{
				taskYIELD();
    207c:	4b12      	ldr	r3, [pc, #72]	; (20c8 <prvIdleTask+0x60>)
    207e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2082:	601a      	str	r2, [r3, #0]
    2084:	f3bf 8f4f 	dsb	sy
    2088:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
    208c:	f7ff fc50 	bl	1930 <prvGetExpectedIdleTime>
    2090:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
    2092:	68fb      	ldr	r3, [r7, #12]
    2094:	2b01      	cmp	r3, #1
    2096:	d9eb      	bls.n	2070 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
    2098:	f7ff fc3c 	bl	1914 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
    209c:	4b0b      	ldr	r3, [pc, #44]	; (20cc <prvIdleTask+0x64>)
    209e:	681a      	ldr	r2, [r3, #0]
    20a0:	4b0b      	ldr	r3, [pc, #44]	; (20d0 <prvIdleTask+0x68>)
    20a2:	681b      	ldr	r3, [r3, #0]
    20a4:	429a      	cmp	r2, r3
    20a6:	d200      	bcs.n	20aa <prvIdleTask+0x42>
    20a8:	e7fe      	b.n	20a8 <prvIdleTask+0x40>
					xExpectedIdleTime = prvGetExpectedIdleTime();
    20aa:	f7ff fc41 	bl	1930 <prvGetExpectedIdleTime>
    20ae:	60f8      	str	r0, [r7, #12]

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
    20b0:	68fb      	ldr	r3, [r7, #12]
    20b2:	2b01      	cmp	r3, #1
    20b4:	d902      	bls.n	20bc <prvIdleTask+0x54>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
    20b6:	68f8      	ldr	r0, [r7, #12]
    20b8:	f7fe fa1a 	bl	4f0 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
    20bc:	f7ff fc70 	bl	19a0 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
    20c0:	e7d6      	b.n	2070 <prvIdleTask+0x8>
    20c2:	bf00      	nop
    20c4:	1000635c 	.word	0x1000635c
    20c8:	e000ed04 	.word	0xe000ed04
    20cc:	10006424 	.word	0x10006424
    20d0:	10006408 	.word	0x10006408

000020d4 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
    20d4:	b480      	push	{r7}
    20d6:	b083      	sub	sp, #12
    20d8:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
    20da:	2301      	movs	r3, #1
    20dc:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
    20de:	2301      	movs	r3, #1
    20e0:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
    20e2:	4b0f      	ldr	r3, [pc, #60]	; (2120 <eTaskConfirmSleepModeStatus+0x4c>)
    20e4:	681b      	ldr	r3, [r3, #0]
    20e6:	2b00      	cmp	r3, #0
    20e8:	d002      	beq.n	20f0 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
    20ea:	2300      	movs	r3, #0
    20ec:	71fb      	strb	r3, [r7, #7]
    20ee:	e010      	b.n	2112 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
    20f0:	4b0c      	ldr	r3, [pc, #48]	; (2124 <eTaskConfirmSleepModeStatus+0x50>)
    20f2:	681b      	ldr	r3, [r3, #0]
    20f4:	2b00      	cmp	r3, #0
    20f6:	d002      	beq.n	20fe <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
    20f8:	2300      	movs	r3, #0
    20fa:	71fb      	strb	r3, [r7, #7]
    20fc:	e009      	b.n	2112 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
    20fe:	4b0a      	ldr	r3, [pc, #40]	; (2128 <eTaskConfirmSleepModeStatus+0x54>)
    2100:	681a      	ldr	r2, [r3, #0]
    2102:	4b0a      	ldr	r3, [pc, #40]	; (212c <eTaskConfirmSleepModeStatus+0x58>)
    2104:	6819      	ldr	r1, [r3, #0]
    2106:	683b      	ldr	r3, [r7, #0]
    2108:	1acb      	subs	r3, r1, r3
    210a:	429a      	cmp	r2, r3
    210c:	d101      	bne.n	2112 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
    210e:	2302      	movs	r3, #2
    2110:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
    2112:	79fb      	ldrb	r3, [r7, #7]
	}
    2114:	4618      	mov	r0, r3
    2116:	370c      	adds	r7, #12
    2118:	46bd      	mov	sp, r7
    211a:	f85d 7b04 	ldr.w	r7, [sp], #4
    211e:	4770      	bx	lr
    2120:	100063dc 	.word	0x100063dc
    2124:	10006418 	.word	0x10006418
    2128:	100063f0 	.word	0x100063f0
    212c:	10006404 	.word	0x10006404

00002130 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    2130:	b580      	push	{r7, lr}
    2132:	b082      	sub	sp, #8
    2134:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    2136:	2300      	movs	r3, #0
    2138:	607b      	str	r3, [r7, #4]
    213a:	e00c      	b.n	2156 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    213c:	687a      	ldr	r2, [r7, #4]
    213e:	4613      	mov	r3, r2
    2140:	009b      	lsls	r3, r3, #2
    2142:	4413      	add	r3, r2
    2144:	009b      	lsls	r3, r3, #2
    2146:	4a10      	ldr	r2, [pc, #64]	; (2188 <prvInitialiseTaskLists+0x58>)
    2148:	4413      	add	r3, r2
    214a:	4618      	mov	r0, r3
    214c:	f7fe fd4e 	bl	bec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    2150:	687b      	ldr	r3, [r7, #4]
    2152:	3301      	adds	r3, #1
    2154:	607b      	str	r3, [r7, #4]
    2156:	687b      	ldr	r3, [r7, #4]
    2158:	2b03      	cmp	r3, #3
    215a:	d9ef      	bls.n	213c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    215c:	480b      	ldr	r0, [pc, #44]	; (218c <prvInitialiseTaskLists+0x5c>)
    215e:	f7fe fd45 	bl	bec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    2162:	480b      	ldr	r0, [pc, #44]	; (2190 <prvInitialiseTaskLists+0x60>)
    2164:	f7fe fd42 	bl	bec <vListInitialise>
	vListInitialise( &xPendingReadyList );
    2168:	480a      	ldr	r0, [pc, #40]	; (2194 <prvInitialiseTaskLists+0x64>)
    216a:	f7fe fd3f 	bl	bec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    216e:	480a      	ldr	r0, [pc, #40]	; (2198 <prvInitialiseTaskLists+0x68>)
    2170:	f7fe fd3c 	bl	bec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    2174:	4b09      	ldr	r3, [pc, #36]	; (219c <prvInitialiseTaskLists+0x6c>)
    2176:	4a05      	ldr	r2, [pc, #20]	; (218c <prvInitialiseTaskLists+0x5c>)
    2178:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    217a:	4b09      	ldr	r3, [pc, #36]	; (21a0 <prvInitialiseTaskLists+0x70>)
    217c:	4a04      	ldr	r2, [pc, #16]	; (2190 <prvInitialiseTaskLists+0x60>)
    217e:	601a      	str	r2, [r3, #0]
}
    2180:	bf00      	nop
    2182:	3708      	adds	r7, #8
    2184:	46bd      	mov	sp, r7
    2186:	bd80      	pop	{r7, pc}
    2188:	1000635c 	.word	0x1000635c
    218c:	100063ac 	.word	0x100063ac
    2190:	100063c0 	.word	0x100063c0
    2194:	100063dc 	.word	0x100063dc
    2198:	100063f0 	.word	0x100063f0
    219c:	100063d4 	.word	0x100063d4
    21a0:	100063d8 	.word	0x100063d8

000021a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    21a4:	b480      	push	{r7}
    21a6:	af00      	add	r7, sp, #0
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    21a8:	bf00      	nop
    21aa:	46bd      	mov	sp, r7
    21ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b0:	4770      	bx	lr
	...

000021b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    21b4:	b480      	push	{r7}
    21b6:	b083      	sub	sp, #12
    21b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    21ba:	4b0f      	ldr	r3, [pc, #60]	; (21f8 <prvResetNextTaskUnblockTime+0x44>)
    21bc:	681b      	ldr	r3, [r3, #0]
    21be:	681b      	ldr	r3, [r3, #0]
    21c0:	2b00      	cmp	r3, #0
    21c2:	d101      	bne.n	21c8 <prvResetNextTaskUnblockTime+0x14>
    21c4:	2301      	movs	r3, #1
    21c6:	e000      	b.n	21ca <prvResetNextTaskUnblockTime+0x16>
    21c8:	2300      	movs	r3, #0
    21ca:	2b00      	cmp	r3, #0
    21cc:	d004      	beq.n	21d8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    21ce:	4b0b      	ldr	r3, [pc, #44]	; (21fc <prvResetNextTaskUnblockTime+0x48>)
    21d0:	f04f 32ff 	mov.w	r2, #4294967295
    21d4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    21d6:	e008      	b.n	21ea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    21d8:	4b07      	ldr	r3, [pc, #28]	; (21f8 <prvResetNextTaskUnblockTime+0x44>)
    21da:	681b      	ldr	r3, [r3, #0]
    21dc:	68db      	ldr	r3, [r3, #12]
    21de:	68db      	ldr	r3, [r3, #12]
    21e0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	685b      	ldr	r3, [r3, #4]
    21e6:	4a05      	ldr	r2, [pc, #20]	; (21fc <prvResetNextTaskUnblockTime+0x48>)
    21e8:	6013      	str	r3, [r2, #0]
}
    21ea:	bf00      	nop
    21ec:	370c      	adds	r7, #12
    21ee:	46bd      	mov	sp, r7
    21f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21f4:	4770      	bx	lr
    21f6:	bf00      	nop
    21f8:	100063d4 	.word	0x100063d4
    21fc:	10006424 	.word	0x10006424

00002200 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    2200:	b480      	push	{r7}
    2202:	b083      	sub	sp, #12
    2204:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    2206:	4b0b      	ldr	r3, [pc, #44]	; (2234 <xTaskGetSchedulerState+0x34>)
    2208:	681b      	ldr	r3, [r3, #0]
    220a:	2b00      	cmp	r3, #0
    220c:	d102      	bne.n	2214 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    220e:	2301      	movs	r3, #1
    2210:	607b      	str	r3, [r7, #4]
    2212:	e008      	b.n	2226 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2214:	4b08      	ldr	r3, [pc, #32]	; (2238 <xTaskGetSchedulerState+0x38>)
    2216:	681b      	ldr	r3, [r3, #0]
    2218:	2b00      	cmp	r3, #0
    221a:	d102      	bne.n	2222 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    221c:	2302      	movs	r3, #2
    221e:	607b      	str	r3, [r7, #4]
    2220:	e001      	b.n	2226 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    2222:	2300      	movs	r3, #0
    2224:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    2226:	687b      	ldr	r3, [r7, #4]
	}
    2228:	4618      	mov	r0, r3
    222a:	370c      	adds	r7, #12
    222c:	46bd      	mov	sp, r7
    222e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2232:	4770      	bx	lr
    2234:	10006410 	.word	0x10006410
    2238:	1000642c 	.word	0x1000642c

0000223c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    223c:	b480      	push	{r7}
    223e:	b083      	sub	sp, #12
    2240:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    2242:	4b09      	ldr	r3, [pc, #36]	; (2268 <uxTaskResetEventItemValue+0x2c>)
    2244:	681b      	ldr	r3, [r3, #0]
    2246:	699b      	ldr	r3, [r3, #24]
    2248:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    224a:	4b07      	ldr	r3, [pc, #28]	; (2268 <uxTaskResetEventItemValue+0x2c>)
    224c:	681b      	ldr	r3, [r3, #0]
    224e:	4a06      	ldr	r2, [pc, #24]	; (2268 <uxTaskResetEventItemValue+0x2c>)
    2250:	6812      	ldr	r2, [r2, #0]
    2252:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    2254:	f1c2 0204 	rsb	r2, r2, #4
    2258:	619a      	str	r2, [r3, #24]

	return uxReturn;
    225a:	687b      	ldr	r3, [r7, #4]
}
    225c:	4618      	mov	r0, r3
    225e:	370c      	adds	r7, #12
    2260:	46bd      	mov	sp, r7
    2262:	f85d 7b04 	ldr.w	r7, [sp], #4
    2266:	4770      	bx	lr
    2268:	10006358 	.word	0x10006358

0000226c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    226c:	b580      	push	{r7, lr}
    226e:	b084      	sub	sp, #16
    2270:	af00      	add	r7, sp, #0
    2272:	6078      	str	r0, [r7, #4]
    2274:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    2276:	4b21      	ldr	r3, [pc, #132]	; (22fc <prvAddCurrentTaskToDelayedList+0x90>)
    2278:	681b      	ldr	r3, [r3, #0]
    227a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    227c:	4b20      	ldr	r3, [pc, #128]	; (2300 <prvAddCurrentTaskToDelayedList+0x94>)
    227e:	681b      	ldr	r3, [r3, #0]
    2280:	3304      	adds	r3, #4
    2282:	4618      	mov	r0, r3
    2284:	f7fe fd3c 	bl	d00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    2288:	687b      	ldr	r3, [r7, #4]
    228a:	f1b3 3fff 	cmp.w	r3, #4294967295
    228e:	d10a      	bne.n	22a6 <prvAddCurrentTaskToDelayedList+0x3a>
    2290:	683b      	ldr	r3, [r7, #0]
    2292:	2b00      	cmp	r3, #0
    2294:	d007      	beq.n	22a6 <prvAddCurrentTaskToDelayedList+0x3a>
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
		  //GEO: addition for support of SystemView Profiler
		  traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
		  //GEO: end addition
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2296:	4b1a      	ldr	r3, [pc, #104]	; (2300 <prvAddCurrentTaskToDelayedList+0x94>)
    2298:	681b      	ldr	r3, [r3, #0]
    229a:	3304      	adds	r3, #4
    229c:	4619      	mov	r1, r3
    229e:	4819      	ldr	r0, [pc, #100]	; (2304 <prvAddCurrentTaskToDelayedList+0x98>)
    22a0:	f7fe fcd1 	bl	c46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    22a4:	e026      	b.n	22f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
    22a6:	68fa      	ldr	r2, [r7, #12]
    22a8:	687b      	ldr	r3, [r7, #4]
    22aa:	4413      	add	r3, r2
    22ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    22ae:	4b14      	ldr	r3, [pc, #80]	; (2300 <prvAddCurrentTaskToDelayedList+0x94>)
    22b0:	681b      	ldr	r3, [r3, #0]
    22b2:	68ba      	ldr	r2, [r7, #8]
    22b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    22b6:	68ba      	ldr	r2, [r7, #8]
    22b8:	68fb      	ldr	r3, [r7, #12]
    22ba:	429a      	cmp	r2, r3
    22bc:	d209      	bcs.n	22d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    22be:	4b12      	ldr	r3, [pc, #72]	; (2308 <prvAddCurrentTaskToDelayedList+0x9c>)
    22c0:	681a      	ldr	r2, [r3, #0]
    22c2:	4b0f      	ldr	r3, [pc, #60]	; (2300 <prvAddCurrentTaskToDelayedList+0x94>)
    22c4:	681b      	ldr	r3, [r3, #0]
    22c6:	3304      	adds	r3, #4
    22c8:	4619      	mov	r1, r3
    22ca:	4610      	mov	r0, r2
    22cc:	f7fe fcdf 	bl	c8e <vListInsert>
}
    22d0:	e010      	b.n	22f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    22d2:	4b0e      	ldr	r3, [pc, #56]	; (230c <prvAddCurrentTaskToDelayedList+0xa0>)
    22d4:	681a      	ldr	r2, [r3, #0]
    22d6:	4b0a      	ldr	r3, [pc, #40]	; (2300 <prvAddCurrentTaskToDelayedList+0x94>)
    22d8:	681b      	ldr	r3, [r3, #0]
    22da:	3304      	adds	r3, #4
    22dc:	4619      	mov	r1, r3
    22de:	4610      	mov	r0, r2
    22e0:	f7fe fcd5 	bl	c8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
    22e4:	4b0a      	ldr	r3, [pc, #40]	; (2310 <prvAddCurrentTaskToDelayedList+0xa4>)
    22e6:	681b      	ldr	r3, [r3, #0]
    22e8:	68ba      	ldr	r2, [r7, #8]
    22ea:	429a      	cmp	r2, r3
    22ec:	d202      	bcs.n	22f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
    22ee:	4a08      	ldr	r2, [pc, #32]	; (2310 <prvAddCurrentTaskToDelayedList+0xa4>)
    22f0:	68bb      	ldr	r3, [r7, #8]
    22f2:	6013      	str	r3, [r2, #0]
}
    22f4:	bf00      	nop
    22f6:	3710      	adds	r7, #16
    22f8:	46bd      	mov	sp, r7
    22fa:	bd80      	pop	{r7, pc}
    22fc:	10006408 	.word	0x10006408
    2300:	10006358 	.word	0x10006358
    2304:	100063f0 	.word	0x100063f0
    2308:	100063d8 	.word	0x100063d8
    230c:	100063d4 	.word	0x100063d4
    2310:	10006424 	.word	0x10006424

00002314 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    2314:	b580      	push	{r7, lr}
    2316:	b084      	sub	sp, #16
    2318:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    231a:	2300      	movs	r3, #0
    231c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    231e:	f000 fa6b 	bl	27f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
    2322:	4b0c      	ldr	r3, [pc, #48]	; (2354 <xTimerCreateTimerTask+0x40>)
    2324:	681b      	ldr	r3, [r3, #0]
    2326:	2b00      	cmp	r3, #0
    2328:	d00b      	beq.n	2342 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    232a:	4b0b      	ldr	r3, [pc, #44]	; (2358 <xTimerCreateTimerTask+0x44>)
    232c:	9301      	str	r3, [sp, #4]
    232e:	2303      	movs	r3, #3
    2330:	9300      	str	r3, [sp, #0]
    2332:	2300      	movs	r3, #0
    2334:	f44f 7280 	mov.w	r2, #256	; 0x100
    2338:	4908      	ldr	r1, [pc, #32]	; (235c <xTimerCreateTimerTask+0x48>)
    233a:	4809      	ldr	r0, [pc, #36]	; (2360 <xTimerCreateTimerTask+0x4c>)
    233c:	f7ff f920 	bl	1580 <xTaskCreate>
    2340:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    2342:	687b      	ldr	r3, [r7, #4]
    2344:	2b00      	cmp	r3, #0
    2346:	d100      	bne.n	234a <xTimerCreateTimerTask+0x36>
    2348:	e7fe      	b.n	2348 <xTimerCreateTimerTask+0x34>
	return xReturn;
    234a:	687b      	ldr	r3, [r7, #4]
}
    234c:	4618      	mov	r0, r3
    234e:	3708      	adds	r7, #8
    2350:	46bd      	mov	sp, r7
    2352:	bd80      	pop	{r7, pc}
    2354:	10006460 	.word	0x10006460
    2358:	10006464 	.word	0x10006464
    235c:	00004fb4 	.word	0x00004fb4
    2360:	00002459 	.word	0x00002459

00002364 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2364:	b580      	push	{r7, lr}
    2366:	b08a      	sub	sp, #40	; 0x28
    2368:	af00      	add	r7, sp, #0
    236a:	60f8      	str	r0, [r7, #12]
    236c:	60b9      	str	r1, [r7, #8]
    236e:	607a      	str	r2, [r7, #4]
    2370:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    2372:	2300      	movs	r3, #0
    2374:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    2376:	68fb      	ldr	r3, [r7, #12]
    2378:	2b00      	cmp	r3, #0
    237a:	d100      	bne.n	237e <xTimerGenericCommand+0x1a>
    237c:	e7fe      	b.n	237c <xTimerGenericCommand+0x18>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    237e:	4b1a      	ldr	r3, [pc, #104]	; (23e8 <xTimerGenericCommand+0x84>)
    2380:	681b      	ldr	r3, [r3, #0]
    2382:	2b00      	cmp	r3, #0
    2384:	d02a      	beq.n	23dc <xTimerGenericCommand+0x78>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    2386:	68bb      	ldr	r3, [r7, #8]
    2388:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    238a:	687b      	ldr	r3, [r7, #4]
    238c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    238e:	68fb      	ldr	r3, [r7, #12]
    2390:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2392:	68bb      	ldr	r3, [r7, #8]
    2394:	2b05      	cmp	r3, #5
    2396:	dc18      	bgt.n	23ca <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2398:	f7ff ff32 	bl	2200 <xTaskGetSchedulerState>
    239c:	4603      	mov	r3, r0
    239e:	2b02      	cmp	r3, #2
    23a0:	d109      	bne.n	23b6 <xTimerGenericCommand+0x52>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    23a2:	4b11      	ldr	r3, [pc, #68]	; (23e8 <xTimerGenericCommand+0x84>)
    23a4:	6818      	ldr	r0, [r3, #0]
    23a6:	f107 0114 	add.w	r1, r7, #20
    23aa:	2300      	movs	r3, #0
    23ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    23ae:	f7fe fd7f 	bl	eb0 <xQueueGenericSend>
    23b2:	6278      	str	r0, [r7, #36]	; 0x24
    23b4:	e012      	b.n	23dc <xTimerGenericCommand+0x78>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    23b6:	4b0c      	ldr	r3, [pc, #48]	; (23e8 <xTimerGenericCommand+0x84>)
    23b8:	6818      	ldr	r0, [r3, #0]
    23ba:	f107 0114 	add.w	r1, r7, #20
    23be:	2300      	movs	r3, #0
    23c0:	2200      	movs	r2, #0
    23c2:	f7fe fd75 	bl	eb0 <xQueueGenericSend>
    23c6:	6278      	str	r0, [r7, #36]	; 0x24
    23c8:	e008      	b.n	23dc <xTimerGenericCommand+0x78>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    23ca:	4b07      	ldr	r3, [pc, #28]	; (23e8 <xTimerGenericCommand+0x84>)
    23cc:	6818      	ldr	r0, [r3, #0]
    23ce:	f107 0114 	add.w	r1, r7, #20
    23d2:	2300      	movs	r3, #0
    23d4:	683a      	ldr	r2, [r7, #0]
    23d6:	f7fe fe41 	bl	105c <xQueueGenericSendFromISR>
    23da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    23dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    23de:	4618      	mov	r0, r3
    23e0:	3728      	adds	r7, #40	; 0x28
    23e2:	46bd      	mov	sp, r7
    23e4:	bd80      	pop	{r7, pc}
    23e6:	bf00      	nop
    23e8:	10006460 	.word	0x10006460

000023ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af02      	add	r7, sp, #8
    23f2:	6078      	str	r0, [r7, #4]
    23f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    23f6:	4b17      	ldr	r3, [pc, #92]	; (2454 <prvProcessExpiredTimer+0x68>)
    23f8:	681b      	ldr	r3, [r3, #0]
    23fa:	68db      	ldr	r3, [r3, #12]
    23fc:	68db      	ldr	r3, [r3, #12]
    23fe:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2400:	68fb      	ldr	r3, [r7, #12]
    2402:	3304      	adds	r3, #4
    2404:	4618      	mov	r0, r3
    2406:	f7fe fc7b 	bl	d00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    240a:	68fb      	ldr	r3, [r7, #12]
    240c:	69db      	ldr	r3, [r3, #28]
    240e:	2b01      	cmp	r3, #1
    2410:	d118      	bne.n	2444 <prvProcessExpiredTimer+0x58>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2412:	68fb      	ldr	r3, [r7, #12]
    2414:	699a      	ldr	r2, [r3, #24]
    2416:	687b      	ldr	r3, [r7, #4]
    2418:	18d1      	adds	r1, r2, r3
    241a:	687b      	ldr	r3, [r7, #4]
    241c:	683a      	ldr	r2, [r7, #0]
    241e:	68f8      	ldr	r0, [r7, #12]
    2420:	f000 f8be 	bl	25a0 <prvInsertTimerInActiveList>
    2424:	4603      	mov	r3, r0
    2426:	2b00      	cmp	r3, #0
    2428:	d00c      	beq.n	2444 <prvProcessExpiredTimer+0x58>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    242a:	2300      	movs	r3, #0
    242c:	9300      	str	r3, [sp, #0]
    242e:	2300      	movs	r3, #0
    2430:	687a      	ldr	r2, [r7, #4]
    2432:	2100      	movs	r1, #0
    2434:	68f8      	ldr	r0, [r7, #12]
    2436:	f7ff ff95 	bl	2364 <xTimerGenericCommand>
    243a:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
    243c:	68bb      	ldr	r3, [r7, #8]
    243e:	2b00      	cmp	r3, #0
    2440:	d100      	bne.n	2444 <prvProcessExpiredTimer+0x58>
    2442:	e7fe      	b.n	2442 <prvProcessExpiredTimer+0x56>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2444:	68fb      	ldr	r3, [r7, #12]
    2446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2448:	68f8      	ldr	r0, [r7, #12]
    244a:	4798      	blx	r3
}
    244c:	bf00      	nop
    244e:	3710      	adds	r7, #16
    2450:	46bd      	mov	sp, r7
    2452:	bd80      	pop	{r7, pc}
    2454:	10006458 	.word	0x10006458

00002458 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    2458:	b580      	push	{r7, lr}
    245a:	b084      	sub	sp, #16
    245c:	af00      	add	r7, sp, #0
    245e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    2460:	f107 0308 	add.w	r3, r7, #8
    2464:	4618      	mov	r0, r3
    2466:	f000 f857 	bl	2518 <prvGetNextExpireTime>
    246a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    246c:	68bb      	ldr	r3, [r7, #8]
    246e:	4619      	mov	r1, r3
    2470:	68f8      	ldr	r0, [r7, #12]
    2472:	f000 f803 	bl	247c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    2476:	f000 f8d5 	bl	2624 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    247a:	e7f1      	b.n	2460 <prvTimerTask+0x8>

0000247c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    247c:	b580      	push	{r7, lr}
    247e:	b084      	sub	sp, #16
    2480:	af00      	add	r7, sp, #0
    2482:	6078      	str	r0, [r7, #4]
    2484:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    2486:	f7ff fa45 	bl	1914 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    248a:	f107 0308 	add.w	r3, r7, #8
    248e:	4618      	mov	r0, r3
    2490:	f000 f866 	bl	2560 <prvSampleTimeNow>
    2494:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    2496:	68bb      	ldr	r3, [r7, #8]
    2498:	2b00      	cmp	r3, #0
    249a:	d130      	bne.n	24fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    249c:	683b      	ldr	r3, [r7, #0]
    249e:	2b00      	cmp	r3, #0
    24a0:	d10a      	bne.n	24b8 <prvProcessTimerOrBlockTask+0x3c>
    24a2:	687a      	ldr	r2, [r7, #4]
    24a4:	68fb      	ldr	r3, [r7, #12]
    24a6:	429a      	cmp	r2, r3
    24a8:	d806      	bhi.n	24b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
    24aa:	f7ff fa79 	bl	19a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    24ae:	68f9      	ldr	r1, [r7, #12]
    24b0:	6878      	ldr	r0, [r7, #4]
    24b2:	f7ff ff9b 	bl	23ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    24b6:	e024      	b.n	2502 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
    24b8:	683b      	ldr	r3, [r7, #0]
    24ba:	2b00      	cmp	r3, #0
    24bc:	d008      	beq.n	24d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    24be:	4b13      	ldr	r3, [pc, #76]	; (250c <prvProcessTimerOrBlockTask+0x90>)
    24c0:	681b      	ldr	r3, [r3, #0]
    24c2:	681b      	ldr	r3, [r3, #0]
    24c4:	2b00      	cmp	r3, #0
    24c6:	bf0c      	ite	eq
    24c8:	2301      	moveq	r3, #1
    24ca:	2300      	movne	r3, #0
    24cc:	b2db      	uxtb	r3, r3
    24ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    24d0:	4b0f      	ldr	r3, [pc, #60]	; (2510 <prvProcessTimerOrBlockTask+0x94>)
    24d2:	6818      	ldr	r0, [r3, #0]
    24d4:	687a      	ldr	r2, [r7, #4]
    24d6:	68fb      	ldr	r3, [r7, #12]
    24d8:	1ad3      	subs	r3, r2, r3
    24da:	683a      	ldr	r2, [r7, #0]
    24dc:	4619      	mov	r1, r3
    24de:	f7ff f81b 	bl	1518 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
    24e2:	f7ff fa5d 	bl	19a0 <xTaskResumeAll>
    24e6:	4603      	mov	r3, r0
    24e8:	2b00      	cmp	r3, #0
    24ea:	d10a      	bne.n	2502 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
    24ec:	4b09      	ldr	r3, [pc, #36]	; (2514 <prvProcessTimerOrBlockTask+0x98>)
    24ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    24f2:	601a      	str	r2, [r3, #0]
    24f4:	f3bf 8f4f 	dsb	sy
    24f8:	f3bf 8f6f 	isb	sy
}
    24fc:	e001      	b.n	2502 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
    24fe:	f7ff fa4f 	bl	19a0 <xTaskResumeAll>
}
    2502:	bf00      	nop
    2504:	3710      	adds	r7, #16
    2506:	46bd      	mov	sp, r7
    2508:	bd80      	pop	{r7, pc}
    250a:	bf00      	nop
    250c:	1000645c 	.word	0x1000645c
    2510:	10006460 	.word	0x10006460
    2514:	e000ed04 	.word	0xe000ed04

00002518 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    2518:	b480      	push	{r7}
    251a:	b085      	sub	sp, #20
    251c:	af00      	add	r7, sp, #0
    251e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2520:	4b0e      	ldr	r3, [pc, #56]	; (255c <prvGetNextExpireTime+0x44>)
    2522:	681b      	ldr	r3, [r3, #0]
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	2b00      	cmp	r3, #0
    2528:	bf0c      	ite	eq
    252a:	2301      	moveq	r3, #1
    252c:	2300      	movne	r3, #0
    252e:	b2db      	uxtb	r3, r3
    2530:	461a      	mov	r2, r3
    2532:	687b      	ldr	r3, [r7, #4]
    2534:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    2536:	687b      	ldr	r3, [r7, #4]
    2538:	681b      	ldr	r3, [r3, #0]
    253a:	2b00      	cmp	r3, #0
    253c:	d105      	bne.n	254a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    253e:	4b07      	ldr	r3, [pc, #28]	; (255c <prvGetNextExpireTime+0x44>)
    2540:	681b      	ldr	r3, [r3, #0]
    2542:	68db      	ldr	r3, [r3, #12]
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	60fb      	str	r3, [r7, #12]
    2548:	e001      	b.n	254e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    254a:	2300      	movs	r3, #0
    254c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    254e:	68fb      	ldr	r3, [r7, #12]
}
    2550:	4618      	mov	r0, r3
    2552:	3714      	adds	r7, #20
    2554:	46bd      	mov	sp, r7
    2556:	f85d 7b04 	ldr.w	r7, [sp], #4
    255a:	4770      	bx	lr
    255c:	10006458 	.word	0x10006458

00002560 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2560:	b580      	push	{r7, lr}
    2562:	b084      	sub	sp, #16
    2564:	af00      	add	r7, sp, #0
    2566:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    2568:	f7ff faae 	bl	1ac8 <xTaskGetTickCount>
    256c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
    256e:	4b0b      	ldr	r3, [pc, #44]	; (259c <prvSampleTimeNow+0x3c>)
    2570:	681b      	ldr	r3, [r3, #0]
    2572:	68fa      	ldr	r2, [r7, #12]
    2574:	429a      	cmp	r2, r3
    2576:	d205      	bcs.n	2584 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
    2578:	f000 f8e6 	bl	2748 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
    257c:	687b      	ldr	r3, [r7, #4]
    257e:	2201      	movs	r2, #1
    2580:	601a      	str	r2, [r3, #0]
    2582:	e002      	b.n	258a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    2584:	687b      	ldr	r3, [r7, #4]
    2586:	2200      	movs	r2, #0
    2588:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    258a:	4a04      	ldr	r2, [pc, #16]	; (259c <prvSampleTimeNow+0x3c>)
    258c:	68fb      	ldr	r3, [r7, #12]
    258e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
    2590:	68fb      	ldr	r3, [r7, #12]
}
    2592:	4618      	mov	r0, r3
    2594:	3710      	adds	r7, #16
    2596:	46bd      	mov	sp, r7
    2598:	bd80      	pop	{r7, pc}
    259a:	bf00      	nop
    259c:	10006468 	.word	0x10006468

000025a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    25a0:	b580      	push	{r7, lr}
    25a2:	b086      	sub	sp, #24
    25a4:	af00      	add	r7, sp, #0
    25a6:	60f8      	str	r0, [r7, #12]
    25a8:	60b9      	str	r1, [r7, #8]
    25aa:	607a      	str	r2, [r7, #4]
    25ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    25ae:	2300      	movs	r3, #0
    25b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    25b2:	68fb      	ldr	r3, [r7, #12]
    25b4:	68ba      	ldr	r2, [r7, #8]
    25b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    25b8:	68fb      	ldr	r3, [r7, #12]
    25ba:	68fa      	ldr	r2, [r7, #12]
    25bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    25be:	68ba      	ldr	r2, [r7, #8]
    25c0:	687b      	ldr	r3, [r7, #4]
    25c2:	429a      	cmp	r2, r3
    25c4:	d812      	bhi.n	25ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    25c6:	687a      	ldr	r2, [r7, #4]
    25c8:	683b      	ldr	r3, [r7, #0]
    25ca:	1ad2      	subs	r2, r2, r3
    25cc:	68fb      	ldr	r3, [r7, #12]
    25ce:	699b      	ldr	r3, [r3, #24]
    25d0:	429a      	cmp	r2, r3
    25d2:	d302      	bcc.n	25da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    25d4:	2301      	movs	r3, #1
    25d6:	617b      	str	r3, [r7, #20]
    25d8:	e01b      	b.n	2612 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    25da:	4b10      	ldr	r3, [pc, #64]	; (261c <prvInsertTimerInActiveList+0x7c>)
    25dc:	681a      	ldr	r2, [r3, #0]
    25de:	68fb      	ldr	r3, [r7, #12]
    25e0:	3304      	adds	r3, #4
    25e2:	4619      	mov	r1, r3
    25e4:	4610      	mov	r0, r2
    25e6:	f7fe fb52 	bl	c8e <vListInsert>
    25ea:	e012      	b.n	2612 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    25ec:	687a      	ldr	r2, [r7, #4]
    25ee:	683b      	ldr	r3, [r7, #0]
    25f0:	429a      	cmp	r2, r3
    25f2:	d206      	bcs.n	2602 <prvInsertTimerInActiveList+0x62>
    25f4:	68ba      	ldr	r2, [r7, #8]
    25f6:	683b      	ldr	r3, [r7, #0]
    25f8:	429a      	cmp	r2, r3
    25fa:	d302      	bcc.n	2602 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    25fc:	2301      	movs	r3, #1
    25fe:	617b      	str	r3, [r7, #20]
    2600:	e007      	b.n	2612 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2602:	4b07      	ldr	r3, [pc, #28]	; (2620 <prvInsertTimerInActiveList+0x80>)
    2604:	681a      	ldr	r2, [r3, #0]
    2606:	68fb      	ldr	r3, [r7, #12]
    2608:	3304      	adds	r3, #4
    260a:	4619      	mov	r1, r3
    260c:	4610      	mov	r0, r2
    260e:	f7fe fb3e 	bl	c8e <vListInsert>
		}
	}

	return xProcessTimerNow;
    2612:	697b      	ldr	r3, [r7, #20]
}
    2614:	4618      	mov	r0, r3
    2616:	3718      	adds	r7, #24
    2618:	46bd      	mov	sp, r7
    261a:	bd80      	pop	{r7, pc}
    261c:	1000645c 	.word	0x1000645c
    2620:	10006458 	.word	0x10006458

00002624 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    2624:	b580      	push	{r7, lr}
    2626:	b08c      	sub	sp, #48	; 0x30
    2628:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    262a:	e07a      	b.n	2722 <prvProcessReceivedCommands+0xfe>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
    262c:	68bb      	ldr	r3, [r7, #8]
    262e:	2b00      	cmp	r3, #0
    2630:	da0f      	bge.n	2652 <prvProcessReceivedCommands+0x2e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
    2632:	f107 0308 	add.w	r3, r7, #8
    2636:	3304      	adds	r3, #4
    2638:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
    263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    263c:	2b00      	cmp	r3, #0
    263e:	d100      	bne.n	2642 <prvProcessReceivedCommands+0x1e>
    2640:	e7fe      	b.n	2640 <prvProcessReceivedCommands+0x1c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
    2642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2644:	681b      	ldr	r3, [r3, #0]
    2646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2648:	6850      	ldr	r0, [r2, #4]
    264a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    264c:	6892      	ldr	r2, [r2, #8]
    264e:	4611      	mov	r1, r2
    2650:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2652:	68bb      	ldr	r3, [r7, #8]
    2654:	2b00      	cmp	r3, #0
    2656:	db64      	blt.n	2722 <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2658:	693b      	ldr	r3, [r7, #16]
    265a:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    265c:	6a3b      	ldr	r3, [r7, #32]
    265e:	695b      	ldr	r3, [r3, #20]
    2660:	2b00      	cmp	r3, #0
    2662:	d004      	beq.n	266e <prvProcessReceivedCommands+0x4a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2664:	6a3b      	ldr	r3, [r7, #32]
    2666:	3304      	adds	r3, #4
    2668:	4618      	mov	r0, r3
    266a:	f7fe fb49 	bl	d00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    266e:	1d3b      	adds	r3, r7, #4
    2670:	4618      	mov	r0, r3
    2672:	f7ff ff75 	bl	2560 <prvSampleTimeNow>
    2676:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
    2678:	68bb      	ldr	r3, [r7, #8]
    267a:	2b09      	cmp	r3, #9
    267c:	d850      	bhi.n	2720 <prvProcessReceivedCommands+0xfc>
    267e:	a201      	add	r2, pc, #4	; (adr r2, 2684 <prvProcessReceivedCommands+0x60>)
    2680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2684:	000026ad 	.word	0x000026ad
    2688:	000026ad 	.word	0x000026ad
    268c:	000026ad 	.word	0x000026ad
    2690:	00002723 	.word	0x00002723
    2694:	000026f5 	.word	0x000026f5
    2698:	00002719 	.word	0x00002719
    269c:	000026ad 	.word	0x000026ad
    26a0:	000026ad 	.word	0x000026ad
    26a4:	00002723 	.word	0x00002723
    26a8:	000026f5 	.word	0x000026f5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    26ac:	68fa      	ldr	r2, [r7, #12]
    26ae:	6a3b      	ldr	r3, [r7, #32]
    26b0:	699b      	ldr	r3, [r3, #24]
    26b2:	18d1      	adds	r1, r2, r3
    26b4:	68fb      	ldr	r3, [r7, #12]
    26b6:	69fa      	ldr	r2, [r7, #28]
    26b8:	6a38      	ldr	r0, [r7, #32]
    26ba:	f7ff ff71 	bl	25a0 <prvInsertTimerInActiveList>
    26be:	4603      	mov	r3, r0
    26c0:	2b00      	cmp	r3, #0
    26c2:	d02e      	beq.n	2722 <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    26c4:	6a3b      	ldr	r3, [r7, #32]
    26c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    26c8:	6a38      	ldr	r0, [r7, #32]
    26ca:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    26cc:	6a3b      	ldr	r3, [r7, #32]
    26ce:	69db      	ldr	r3, [r3, #28]
    26d0:	2b01      	cmp	r3, #1
    26d2:	d126      	bne.n	2722 <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    26d4:	68fa      	ldr	r2, [r7, #12]
    26d6:	6a3b      	ldr	r3, [r7, #32]
    26d8:	699b      	ldr	r3, [r3, #24]
    26da:	441a      	add	r2, r3
    26dc:	2300      	movs	r3, #0
    26de:	9300      	str	r3, [sp, #0]
    26e0:	2300      	movs	r3, #0
    26e2:	2100      	movs	r1, #0
    26e4:	6a38      	ldr	r0, [r7, #32]
    26e6:	f7ff fe3d 	bl	2364 <xTimerGenericCommand>
    26ea:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
    26ec:	69bb      	ldr	r3, [r7, #24]
    26ee:	2b00      	cmp	r3, #0
    26f0:	d117      	bne.n	2722 <prvProcessReceivedCommands+0xfe>
    26f2:	e7fe      	b.n	26f2 <prvProcessReceivedCommands+0xce>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    26f4:	68fa      	ldr	r2, [r7, #12]
    26f6:	6a3b      	ldr	r3, [r7, #32]
    26f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    26fa:	6a3b      	ldr	r3, [r7, #32]
    26fc:	699b      	ldr	r3, [r3, #24]
    26fe:	2b00      	cmp	r3, #0
    2700:	d100      	bne.n	2704 <prvProcessReceivedCommands+0xe0>
    2702:	e7fe      	b.n	2702 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2704:	6a3b      	ldr	r3, [r7, #32]
    2706:	699a      	ldr	r2, [r3, #24]
    2708:	69fb      	ldr	r3, [r7, #28]
    270a:	18d1      	adds	r1, r2, r3
    270c:	69fb      	ldr	r3, [r7, #28]
    270e:	69fa      	ldr	r2, [r7, #28]
    2710:	6a38      	ldr	r0, [r7, #32]
    2712:	f7ff ff45 	bl	25a0 <prvInsertTimerInActiveList>
					break;
    2716:	e004      	b.n	2722 <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    2718:	6a38      	ldr	r0, [r7, #32]
    271a:	f7fe f8a1 	bl	860 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    271e:	e000      	b.n	2722 <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
    2720:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2722:	4b08      	ldr	r3, [pc, #32]	; (2744 <prvProcessReceivedCommands+0x120>)
    2724:	6818      	ldr	r0, [r3, #0]
    2726:	f107 0108 	add.w	r1, r7, #8
    272a:	2300      	movs	r3, #0
    272c:	2200      	movs	r2, #0
    272e:	f7fe fd0f 	bl	1150 <xQueueGenericReceive>
    2732:	4603      	mov	r3, r0
    2734:	2b00      	cmp	r3, #0
    2736:	f47f af79 	bne.w	262c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
    273a:	bf00      	nop
    273c:	3728      	adds	r7, #40	; 0x28
    273e:	46bd      	mov	sp, r7
    2740:	bd80      	pop	{r7, pc}
    2742:	bf00      	nop
    2744:	10006460 	.word	0x10006460

00002748 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    2748:	b580      	push	{r7, lr}
    274a:	b088      	sub	sp, #32
    274c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    274e:	e03b      	b.n	27c8 <prvSwitchTimerLists+0x80>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2750:	4b27      	ldr	r3, [pc, #156]	; (27f0 <prvSwitchTimerLists+0xa8>)
    2752:	681b      	ldr	r3, [r3, #0]
    2754:	68db      	ldr	r3, [r3, #12]
    2756:	681b      	ldr	r3, [r3, #0]
    2758:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    275a:	4b25      	ldr	r3, [pc, #148]	; (27f0 <prvSwitchTimerLists+0xa8>)
    275c:	681b      	ldr	r3, [r3, #0]
    275e:	68db      	ldr	r3, [r3, #12]
    2760:	68db      	ldr	r3, [r3, #12]
    2762:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2764:	693b      	ldr	r3, [r7, #16]
    2766:	3304      	adds	r3, #4
    2768:	4618      	mov	r0, r3
    276a:	f7fe fac9 	bl	d00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    276e:	693b      	ldr	r3, [r7, #16]
    2770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2772:	6938      	ldr	r0, [r7, #16]
    2774:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2776:	693b      	ldr	r3, [r7, #16]
    2778:	69db      	ldr	r3, [r3, #28]
    277a:	2b01      	cmp	r3, #1
    277c:	d124      	bne.n	27c8 <prvSwitchTimerLists+0x80>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    277e:	693b      	ldr	r3, [r7, #16]
    2780:	699a      	ldr	r2, [r3, #24]
    2782:	697b      	ldr	r3, [r7, #20]
    2784:	4413      	add	r3, r2
    2786:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    2788:	68fa      	ldr	r2, [r7, #12]
    278a:	697b      	ldr	r3, [r7, #20]
    278c:	429a      	cmp	r2, r3
    278e:	d90e      	bls.n	27ae <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2790:	693b      	ldr	r3, [r7, #16]
    2792:	68fa      	ldr	r2, [r7, #12]
    2794:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2796:	693b      	ldr	r3, [r7, #16]
    2798:	693a      	ldr	r2, [r7, #16]
    279a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    279c:	4b14      	ldr	r3, [pc, #80]	; (27f0 <prvSwitchTimerLists+0xa8>)
    279e:	681a      	ldr	r2, [r3, #0]
    27a0:	693b      	ldr	r3, [r7, #16]
    27a2:	3304      	adds	r3, #4
    27a4:	4619      	mov	r1, r3
    27a6:	4610      	mov	r0, r2
    27a8:	f7fe fa71 	bl	c8e <vListInsert>
    27ac:	e00c      	b.n	27c8 <prvSwitchTimerLists+0x80>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    27ae:	2300      	movs	r3, #0
    27b0:	9300      	str	r3, [sp, #0]
    27b2:	2300      	movs	r3, #0
    27b4:	697a      	ldr	r2, [r7, #20]
    27b6:	2100      	movs	r1, #0
    27b8:	6938      	ldr	r0, [r7, #16]
    27ba:	f7ff fdd3 	bl	2364 <xTimerGenericCommand>
    27be:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
    27c0:	68bb      	ldr	r3, [r7, #8]
    27c2:	2b00      	cmp	r3, #0
    27c4:	d100      	bne.n	27c8 <prvSwitchTimerLists+0x80>
    27c6:	e7fe      	b.n	27c6 <prvSwitchTimerLists+0x7e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    27c8:	4b09      	ldr	r3, [pc, #36]	; (27f0 <prvSwitchTimerLists+0xa8>)
    27ca:	681b      	ldr	r3, [r3, #0]
    27cc:	681b      	ldr	r3, [r3, #0]
    27ce:	2b00      	cmp	r3, #0
    27d0:	d1be      	bne.n	2750 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    27d2:	4b07      	ldr	r3, [pc, #28]	; (27f0 <prvSwitchTimerLists+0xa8>)
    27d4:	681b      	ldr	r3, [r3, #0]
    27d6:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    27d8:	4b06      	ldr	r3, [pc, #24]	; (27f4 <prvSwitchTimerLists+0xac>)
    27da:	681b      	ldr	r3, [r3, #0]
    27dc:	4a04      	ldr	r2, [pc, #16]	; (27f0 <prvSwitchTimerLists+0xa8>)
    27de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
    27e0:	4a04      	ldr	r2, [pc, #16]	; (27f4 <prvSwitchTimerLists+0xac>)
    27e2:	687b      	ldr	r3, [r7, #4]
    27e4:	6013      	str	r3, [r2, #0]
}
    27e6:	bf00      	nop
    27e8:	3718      	adds	r7, #24
    27ea:	46bd      	mov	sp, r7
    27ec:	bd80      	pop	{r7, pc}
    27ee:	bf00      	nop
    27f0:	10006458 	.word	0x10006458
    27f4:	1000645c 	.word	0x1000645c

000027f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    27f8:	b580      	push	{r7, lr}
    27fa:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    27fc:	f7fd fdb2 	bl	364 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
    2800:	4b0d      	ldr	r3, [pc, #52]	; (2838 <prvCheckForValidListAndQueue+0x40>)
    2802:	681b      	ldr	r3, [r3, #0]
    2804:	2b00      	cmp	r3, #0
    2806:	d113      	bne.n	2830 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
    2808:	480c      	ldr	r0, [pc, #48]	; (283c <prvCheckForValidListAndQueue+0x44>)
    280a:	f7fe f9ef 	bl	bec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
    280e:	480c      	ldr	r0, [pc, #48]	; (2840 <prvCheckForValidListAndQueue+0x48>)
    2810:	f7fe f9ec 	bl	bec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
    2814:	4b0b      	ldr	r3, [pc, #44]	; (2844 <prvCheckForValidListAndQueue+0x4c>)
    2816:	4a09      	ldr	r2, [pc, #36]	; (283c <prvCheckForValidListAndQueue+0x44>)
    2818:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    281a:	4b0b      	ldr	r3, [pc, #44]	; (2848 <prvCheckForValidListAndQueue+0x50>)
    281c:	4a08      	ldr	r2, [pc, #32]	; (2840 <prvCheckForValidListAndQueue+0x48>)
    281e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    2820:	2200      	movs	r2, #0
    2822:	2110      	movs	r1, #16
    2824:	2005      	movs	r0, #5
    2826:	f7fe faf3 	bl	e10 <xQueueGenericCreate>
    282a:	4602      	mov	r2, r0
    282c:	4b02      	ldr	r3, [pc, #8]	; (2838 <prvCheckForValidListAndQueue+0x40>)
    282e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    2830:	f7fd fdbe 	bl	3b0 <vPortExitCritical>
}
    2834:	bf00      	nop
    2836:	bd80      	pop	{r7, pc}
    2838:	10006460 	.word	0x10006460
    283c:	10006430 	.word	0x10006430
    2840:	10006444 	.word	0x10006444
    2844:	10006458 	.word	0x10006458
    2848:	1000645c 	.word	0x1000645c

0000284c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    284c:	b580      	push	{r7, lr}
    284e:	b08a      	sub	sp, #40	; 0x28
    2850:	af00      	add	r7, sp, #0
    2852:	60f8      	str	r0, [r7, #12]
    2854:	60b9      	str	r1, [r7, #8]
    2856:	607a      	str	r2, [r7, #4]
    2858:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    285a:	f06f 0301 	mvn.w	r3, #1
    285e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    2860:	68fb      	ldr	r3, [r7, #12]
    2862:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    2864:	68bb      	ldr	r3, [r7, #8]
    2866:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    2868:	687b      	ldr	r3, [r7, #4]
    286a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    286c:	4b06      	ldr	r3, [pc, #24]	; (2888 <xTimerPendFunctionCallFromISR+0x3c>)
    286e:	6818      	ldr	r0, [r3, #0]
    2870:	f107 0114 	add.w	r1, r7, #20
    2874:	2300      	movs	r3, #0
    2876:	683a      	ldr	r2, [r7, #0]
    2878:	f7fe fbf0 	bl	105c <xQueueGenericSendFromISR>
    287c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
    287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
    2880:	4618      	mov	r0, r3
    2882:	3728      	adds	r7, #40	; 0x28
    2884:	46bd      	mov	sp, r7
    2886:	bd80      	pop	{r7, pc}
    2888:	10006460 	.word	0x10006460

0000288c <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
    288c:	b590      	push	{r4, r7, lr}
    288e:	b085      	sub	sp, #20
    2890:	af00      	add	r7, sp, #0
    2892:	6078      	str	r0, [r7, #4]
    if ( (psLED == NULL)    ||
    2894:	687b      	ldr	r3, [r7, #4]
    2896:	2b00      	cmp	r3, #0
    2898:	f000 8162 	beq.w	2b60 <am_devices_led_init+0x2d4>
         (psLED->ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    289c:	687b      	ldr	r3, [r7, #4]
    289e:	681b      	ldr	r3, [r3, #0]
    if ( (psLED == NULL)    ||
    28a0:	2b31      	cmp	r3, #49	; 0x31
    28a2:	f200 815d 	bhi.w	2b60 <am_devices_led_init+0x2d4>
    }
#else
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    28a6:	687b      	ldr	r3, [r7, #4]
    28a8:	685b      	ldr	r3, [r3, #4]
    28aa:	f003 0302 	and.w	r3, r3, #2
    28ae:	2b00      	cmp	r3, #0
    28b0:	f000 80ab 	beq.w	2a0a <am_devices_led_init+0x17e>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT);
    28b4:	687b      	ldr	r3, [r7, #4]
    28b6:	681b      	ldr	r3, [r3, #0]
    28b8:	2b31      	cmp	r3, #49	; 0x31
    28ba:	d86e      	bhi.n	299a <am_devices_led_init+0x10e>
    28bc:	f001 ffa4 	bl	4808 <am_hal_interrupt_master_disable>
    28c0:	4603      	mov	r3, r0
    28c2:	60fb      	str	r3, [r7, #12]
    28c4:	4ba8      	ldr	r3, [pc, #672]	; (2b68 <am_devices_led_init+0x2dc>)
    28c6:	2273      	movs	r2, #115	; 0x73
    28c8:	601a      	str	r2, [r3, #0]
    28ca:	687b      	ldr	r3, [r7, #4]
    28cc:	681b      	ldr	r3, [r3, #0]
    28ce:	085b      	lsrs	r3, r3, #1
    28d0:	f003 027c 	and.w	r2, r3, #124	; 0x7c
    28d4:	4ba5      	ldr	r3, [pc, #660]	; (2b6c <am_devices_led_init+0x2e0>)
    28d6:	4413      	add	r3, r2
    28d8:	461c      	mov	r4, r3
    28da:	687b      	ldr	r3, [r7, #4]
    28dc:	681b      	ldr	r3, [r3, #0]
    28de:	009b      	lsls	r3, r3, #2
    28e0:	f003 031c 	and.w	r3, r3, #28
    28e4:	2202      	movs	r2, #2
    28e6:	409a      	lsls	r2, r3
    28e8:	687b      	ldr	r3, [r7, #4]
    28ea:	681b      	ldr	r3, [r3, #0]
    28ec:	085b      	lsrs	r3, r3, #1
    28ee:	f003 017c 	and.w	r1, r3, #124	; 0x7c
    28f2:	4b9e      	ldr	r3, [pc, #632]	; (2b6c <am_devices_led_init+0x2e0>)
    28f4:	440b      	add	r3, r1
    28f6:	6819      	ldr	r1, [r3, #0]
    28f8:	687b      	ldr	r3, [r7, #4]
    28fa:	681b      	ldr	r3, [r3, #0]
    28fc:	009b      	lsls	r3, r3, #2
    28fe:	f003 031c 	and.w	r3, r3, #28
    2902:	2007      	movs	r0, #7
    2904:	fa00 f303 	lsl.w	r3, r0, r3
    2908:	43db      	mvns	r3, r3
    290a:	400b      	ands	r3, r1
    290c:	4313      	orrs	r3, r2
    290e:	6023      	str	r3, [r4, #0]
    2910:	687b      	ldr	r3, [r7, #4]
    2912:	681b      	ldr	r3, [r3, #0]
    2914:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    2918:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    291c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    2920:	461c      	mov	r4, r3
    2922:	687b      	ldr	r3, [r7, #4]
    2924:	681b      	ldr	r3, [r3, #0]
    2926:	00db      	lsls	r3, r3, #3
    2928:	f003 0318 	and.w	r3, r3, #24
    292c:	2218      	movs	r2, #24
    292e:	409a      	lsls	r2, r3
    2930:	687b      	ldr	r3, [r7, #4]
    2932:	681b      	ldr	r3, [r3, #0]
    2934:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    2938:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    293c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    2940:	6819      	ldr	r1, [r3, #0]
    2942:	687b      	ldr	r3, [r7, #4]
    2944:	681b      	ldr	r3, [r3, #0]
    2946:	00db      	lsls	r3, r3, #3
    2948:	f003 0318 	and.w	r3, r3, #24
    294c:	20ff      	movs	r0, #255	; 0xff
    294e:	fa00 f303 	lsl.w	r3, r0, r3
    2952:	43db      	mvns	r3, r3
    2954:	400b      	ands	r3, r1
    2956:	4313      	orrs	r3, r2
    2958:	6023      	str	r3, [r4, #0]
    295a:	687b      	ldr	r3, [r7, #4]
    295c:	681b      	ldr	r3, [r3, #0]
    295e:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
    2962:	4b83      	ldr	r3, [pc, #524]	; (2b70 <am_devices_led_init+0x2e4>)
    2964:	4413      	add	r3, r2
    2966:	4618      	mov	r0, r3
    2968:	687b      	ldr	r3, [r7, #4]
    296a:	681b      	ldr	r3, [r3, #0]
    296c:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
    2970:	4b7f      	ldr	r3, [pc, #508]	; (2b70 <am_devices_led_init+0x2e4>)
    2972:	4413      	add	r3, r2
    2974:	681a      	ldr	r2, [r3, #0]
    2976:	687b      	ldr	r3, [r7, #4]
    2978:	681b      	ldr	r3, [r3, #0]
    297a:	00db      	lsls	r3, r3, #3
    297c:	f003 0318 	and.w	r3, r3, #24
    2980:	21ff      	movs	r1, #255	; 0xff
    2982:	fa01 f303 	lsl.w	r3, r1, r3
    2986:	43db      	mvns	r3, r3
    2988:	4013      	ands	r3, r2
    298a:	6003      	str	r3, [r0, #0]
    298c:	4b76      	ldr	r3, [pc, #472]	; (2b68 <am_devices_led_init+0x2dc>)
    298e:	2200      	movs	r2, #0
    2990:	601a      	str	r2, [r3, #0]
    2992:	68fb      	ldr	r3, [r7, #12]
    2994:	4618      	mov	r0, r3
    2996:	f001 ff3b 	bl	4810 <am_hal_interrupt_master_set>

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
    299a:	687b      	ldr	r3, [r7, #4]
    299c:	681b      	ldr	r3, [r3, #0]
    299e:	08db      	lsrs	r3, r3, #3
    29a0:	f003 0204 	and.w	r2, r3, #4
    29a4:	4b73      	ldr	r3, [pc, #460]	; (2b74 <am_devices_led_init+0x2e8>)
    29a6:	4413      	add	r3, r2
    29a8:	4619      	mov	r1, r3
    29aa:	687b      	ldr	r3, [r7, #4]
    29ac:	681b      	ldr	r3, [r3, #0]
    29ae:	f003 031f 	and.w	r3, r3, #31
    29b2:	2201      	movs	r2, #1
    29b4:	fa02 f303 	lsl.w	r3, r2, r3
    29b8:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
    29ba:	687b      	ldr	r3, [r7, #4]
    29bc:	685b      	ldr	r3, [r3, #4]
    29be:	f003 0301 	and.w	r3, r3, #1
    29c2:	2b00      	cmp	r3, #0
    29c4:	d010      	beq.n	29e8 <am_devices_led_init+0x15c>
    29c6:	687b      	ldr	r3, [r7, #4]
    29c8:	681b      	ldr	r3, [r3, #0]
    29ca:	08db      	lsrs	r3, r3, #3
    29cc:	f003 0204 	and.w	r2, r3, #4
    29d0:	4b69      	ldr	r3, [pc, #420]	; (2b78 <am_devices_led_init+0x2ec>)
    29d2:	4413      	add	r3, r2
    29d4:	4619      	mov	r1, r3
    29d6:	687b      	ldr	r3, [r7, #4]
    29d8:	681b      	ldr	r3, [r3, #0]
    29da:	f003 031f 	and.w	r3, r3, #31
    29de:	2201      	movs	r2, #1
    29e0:	fa02 f303 	lsl.w	r3, r2, r3
    29e4:	600b      	str	r3, [r1, #0]
    29e6:	e0bc      	b.n	2b62 <am_devices_led_init+0x2d6>
    29e8:	687b      	ldr	r3, [r7, #4]
    29ea:	681b      	ldr	r3, [r3, #0]
    29ec:	08db      	lsrs	r3, r3, #3
    29ee:	f003 0204 	and.w	r2, r3, #4
    29f2:	4b62      	ldr	r3, [pc, #392]	; (2b7c <am_devices_led_init+0x2f0>)
    29f4:	4413      	add	r3, r2
    29f6:	4619      	mov	r1, r3
    29f8:	687b      	ldr	r3, [r7, #4]
    29fa:	681b      	ldr	r3, [r3, #0]
    29fc:	f003 031f 	and.w	r3, r3, #31
    2a00:	2201      	movs	r2, #1
    2a02:	fa02 f303 	lsl.w	r3, r2, r3
    2a06:	600b      	str	r3, [r1, #0]
    2a08:	e0ab      	b.n	2b62 <am_devices_led_init+0x2d6>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
    2a0a:	687b      	ldr	r3, [r7, #4]
    2a0c:	681b      	ldr	r3, [r3, #0]
    2a0e:	2b31      	cmp	r3, #49	; 0x31
    2a10:	d86e      	bhi.n	2af0 <am_devices_led_init+0x264>
    2a12:	f001 fef9 	bl	4808 <am_hal_interrupt_master_disable>
    2a16:	4603      	mov	r3, r0
    2a18:	60bb      	str	r3, [r7, #8]
    2a1a:	4b53      	ldr	r3, [pc, #332]	; (2b68 <am_devices_led_init+0x2dc>)
    2a1c:	2273      	movs	r2, #115	; 0x73
    2a1e:	601a      	str	r2, [r3, #0]
    2a20:	687b      	ldr	r3, [r7, #4]
    2a22:	681b      	ldr	r3, [r3, #0]
    2a24:	085b      	lsrs	r3, r3, #1
    2a26:	f003 027c 	and.w	r2, r3, #124	; 0x7c
    2a2a:	4b50      	ldr	r3, [pc, #320]	; (2b6c <am_devices_led_init+0x2e0>)
    2a2c:	4413      	add	r3, r2
    2a2e:	461c      	mov	r4, r3
    2a30:	687b      	ldr	r3, [r7, #4]
    2a32:	681b      	ldr	r3, [r3, #0]
    2a34:	009b      	lsls	r3, r3, #2
    2a36:	f003 031c 	and.w	r3, r3, #28
    2a3a:	2206      	movs	r2, #6
    2a3c:	409a      	lsls	r2, r3
    2a3e:	687b      	ldr	r3, [r7, #4]
    2a40:	681b      	ldr	r3, [r3, #0]
    2a42:	085b      	lsrs	r3, r3, #1
    2a44:	f003 017c 	and.w	r1, r3, #124	; 0x7c
    2a48:	4b48      	ldr	r3, [pc, #288]	; (2b6c <am_devices_led_init+0x2e0>)
    2a4a:	440b      	add	r3, r1
    2a4c:	6819      	ldr	r1, [r3, #0]
    2a4e:	687b      	ldr	r3, [r7, #4]
    2a50:	681b      	ldr	r3, [r3, #0]
    2a52:	009b      	lsls	r3, r3, #2
    2a54:	f003 031c 	and.w	r3, r3, #28
    2a58:	2007      	movs	r0, #7
    2a5a:	fa00 f303 	lsl.w	r3, r0, r3
    2a5e:	43db      	mvns	r3, r3
    2a60:	400b      	ands	r3, r1
    2a62:	4313      	orrs	r3, r2
    2a64:	6023      	str	r3, [r4, #0]
    2a66:	687b      	ldr	r3, [r7, #4]
    2a68:	681b      	ldr	r3, [r3, #0]
    2a6a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    2a6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2a72:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    2a76:	461c      	mov	r4, r3
    2a78:	687b      	ldr	r3, [r7, #4]
    2a7a:	681b      	ldr	r3, [r3, #0]
    2a7c:	00db      	lsls	r3, r3, #3
    2a7e:	f003 0318 	and.w	r3, r3, #24
    2a82:	2218      	movs	r2, #24
    2a84:	409a      	lsls	r2, r3
    2a86:	687b      	ldr	r3, [r7, #4]
    2a88:	681b      	ldr	r3, [r3, #0]
    2a8a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    2a8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2a92:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    2a96:	6819      	ldr	r1, [r3, #0]
    2a98:	687b      	ldr	r3, [r7, #4]
    2a9a:	681b      	ldr	r3, [r3, #0]
    2a9c:	00db      	lsls	r3, r3, #3
    2a9e:	f003 0318 	and.w	r3, r3, #24
    2aa2:	20ff      	movs	r0, #255	; 0xff
    2aa4:	fa00 f303 	lsl.w	r3, r0, r3
    2aa8:	43db      	mvns	r3, r3
    2aaa:	400b      	ands	r3, r1
    2aac:	4313      	orrs	r3, r2
    2aae:	6023      	str	r3, [r4, #0]
    2ab0:	687b      	ldr	r3, [r7, #4]
    2ab2:	681b      	ldr	r3, [r3, #0]
    2ab4:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
    2ab8:	4b2d      	ldr	r3, [pc, #180]	; (2b70 <am_devices_led_init+0x2e4>)
    2aba:	4413      	add	r3, r2
    2abc:	4618      	mov	r0, r3
    2abe:	687b      	ldr	r3, [r7, #4]
    2ac0:	681b      	ldr	r3, [r3, #0]
    2ac2:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
    2ac6:	4b2a      	ldr	r3, [pc, #168]	; (2b70 <am_devices_led_init+0x2e4>)
    2ac8:	4413      	add	r3, r2
    2aca:	681a      	ldr	r2, [r3, #0]
    2acc:	687b      	ldr	r3, [r7, #4]
    2ace:	681b      	ldr	r3, [r3, #0]
    2ad0:	00db      	lsls	r3, r3, #3
    2ad2:	f003 0318 	and.w	r3, r3, #24
    2ad6:	21ff      	movs	r1, #255	; 0xff
    2ad8:	fa01 f303 	lsl.w	r3, r1, r3
    2adc:	43db      	mvns	r3, r3
    2ade:	4013      	ands	r3, r2
    2ae0:	6003      	str	r3, [r0, #0]
    2ae2:	4b21      	ldr	r3, [pc, #132]	; (2b68 <am_devices_led_init+0x2dc>)
    2ae4:	2200      	movs	r2, #0
    2ae6:	601a      	str	r2, [r3, #0]
    2ae8:	68bb      	ldr	r3, [r7, #8]
    2aea:	4618      	mov	r0, r3
    2aec:	f001 fe90 	bl	4810 <am_hal_interrupt_master_set>

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
    2af0:	687b      	ldr	r3, [r7, #4]
    2af2:	681b      	ldr	r3, [r3, #0]
    2af4:	08db      	lsrs	r3, r3, #3
    2af6:	f003 0204 	and.w	r2, r3, #4
    2afa:	4b1e      	ldr	r3, [pc, #120]	; (2b74 <am_devices_led_init+0x2e8>)
    2afc:	4413      	add	r3, r2
    2afe:	4619      	mov	r1, r3
    2b00:	687b      	ldr	r3, [r7, #4]
    2b02:	681b      	ldr	r3, [r3, #0]
    2b04:	f003 031f 	and.w	r3, r3, #31
    2b08:	2201      	movs	r2, #1
    2b0a:	fa02 f303 	lsl.w	r3, r2, r3
    2b0e:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
    2b10:	687b      	ldr	r3, [r7, #4]
    2b12:	685b      	ldr	r3, [r3, #4]
    2b14:	f003 0301 	and.w	r3, r3, #1
    2b18:	2b00      	cmp	r3, #0
    2b1a:	d010      	beq.n	2b3e <am_devices_led_init+0x2b2>
    2b1c:	687b      	ldr	r3, [r7, #4]
    2b1e:	681b      	ldr	r3, [r3, #0]
    2b20:	08db      	lsrs	r3, r3, #3
    2b22:	f003 0204 	and.w	r2, r3, #4
    2b26:	4b14      	ldr	r3, [pc, #80]	; (2b78 <am_devices_led_init+0x2ec>)
    2b28:	4413      	add	r3, r2
    2b2a:	4619      	mov	r1, r3
    2b2c:	687b      	ldr	r3, [r7, #4]
    2b2e:	681b      	ldr	r3, [r3, #0]
    2b30:	f003 031f 	and.w	r3, r3, #31
    2b34:	2201      	movs	r2, #1
    2b36:	fa02 f303 	lsl.w	r3, r2, r3
    2b3a:	600b      	str	r3, [r1, #0]
    2b3c:	e011      	b.n	2b62 <am_devices_led_init+0x2d6>
    2b3e:	687b      	ldr	r3, [r7, #4]
    2b40:	681b      	ldr	r3, [r3, #0]
    2b42:	08db      	lsrs	r3, r3, #3
    2b44:	f003 0204 	and.w	r2, r3, #4
    2b48:	4b0c      	ldr	r3, [pc, #48]	; (2b7c <am_devices_led_init+0x2f0>)
    2b4a:	4413      	add	r3, r2
    2b4c:	4619      	mov	r1, r3
    2b4e:	687b      	ldr	r3, [r7, #4]
    2b50:	681b      	ldr	r3, [r3, #0]
    2b52:	f003 031f 	and.w	r3, r3, #31
    2b56:	2201      	movs	r2, #1
    2b58:	fa02 f303 	lsl.w	r3, r2, r3
    2b5c:	600b      	str	r3, [r1, #0]
    2b5e:	e000      	b.n	2b62 <am_devices_led_init+0x2d6>
        return;
    2b60:	bf00      	nop
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
#endif
}
    2b62:	3714      	adds	r7, #20
    2b64:	46bd      	mov	sp, r7
    2b66:	bd90      	pop	{r4, r7, pc}
    2b68:	40010060 	.word	0x40010060
    2b6c:	40010040 	.word	0x40010040
    2b70:	400100e0 	.word	0x400100e0
    2b74:	400100b4 	.word	0x400100b4
    2b78:	40010090 	.word	0x40010090
    2b7c:	40010098 	.word	0x40010098

00002b80 <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
    2b80:	b580      	push	{r7, lr}
    2b82:	b084      	sub	sp, #16
    2b84:	af00      	add	r7, sp, #0
    2b86:	6078      	str	r0, [r7, #4]
    2b88:	6039      	str	r1, [r7, #0]
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
    2b8a:	687b      	ldr	r3, [r7, #4]
    2b8c:	2b00      	cmp	r3, #0
    2b8e:	d014      	beq.n	2bba <am_devices_led_array_init+0x3a>
    2b90:	683b      	ldr	r3, [r7, #0]
    2b92:	2b1f      	cmp	r3, #31
    2b94:	d811      	bhi.n	2bba <am_devices_led_array_init+0x3a>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
    2b96:	2300      	movs	r3, #0
    2b98:	60fb      	str	r3, [r7, #12]
    2b9a:	e009      	b.n	2bb0 <am_devices_led_array_init+0x30>
    {
        am_devices_led_init(psLEDs + i);
    2b9c:	68fb      	ldr	r3, [r7, #12]
    2b9e:	00db      	lsls	r3, r3, #3
    2ba0:	687a      	ldr	r2, [r7, #4]
    2ba2:	4413      	add	r3, r2
    2ba4:	4618      	mov	r0, r3
    2ba6:	f7ff fe71 	bl	288c <am_devices_led_init>
    for ( i = 0; i < ui32NumLEDs; i++ )
    2baa:	68fb      	ldr	r3, [r7, #12]
    2bac:	3301      	adds	r3, #1
    2bae:	60fb      	str	r3, [r7, #12]
    2bb0:	68fa      	ldr	r2, [r7, #12]
    2bb2:	683b      	ldr	r3, [r7, #0]
    2bb4:	429a      	cmp	r2, r3
    2bb6:	d3f1      	bcc.n	2b9c <am_devices_led_array_init+0x1c>
    2bb8:	e000      	b.n	2bbc <am_devices_led_array_init+0x3c>
        return;
    2bba:	bf00      	nop
    }
}
    2bbc:	3710      	adds	r7, #16
    2bbe:	46bd      	mov	sp, r7
    2bc0:	bd80      	pop	{r7, pc}
	...

00002bc4 <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    2bc4:	b480      	push	{r7}
    2bc6:	b083      	sub	sp, #12
    2bc8:	af00      	add	r7, sp, #0
    2bca:	6078      	str	r0, [r7, #4]
    2bcc:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    2bce:	687b      	ldr	r3, [r7, #4]
    2bd0:	2b00      	cmp	r3, #0
    2bd2:	d060      	beq.n	2c96 <am_devices_led_off+0xd2>
    2bd4:	683b      	ldr	r3, [r7, #0]
    2bd6:	2b1e      	cmp	r3, #30
    2bd8:	d85d      	bhi.n	2c96 <am_devices_led_off+0xd2>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    2bda:	683b      	ldr	r3, [r7, #0]
    2bdc:	00db      	lsls	r3, r3, #3
    2bde:	687a      	ldr	r2, [r7, #4]
    2be0:	4413      	add	r3, r2
    2be2:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    2be4:	2b31      	cmp	r3, #49	; 0x31
    2be6:	d856      	bhi.n	2c96 <am_devices_led_off+0xd2>
    }
#else
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    2be8:	683b      	ldr	r3, [r7, #0]
    2bea:	00db      	lsls	r3, r3, #3
    2bec:	687a      	ldr	r2, [r7, #4]
    2bee:	4413      	add	r3, r2
    2bf0:	685b      	ldr	r3, [r3, #4]
    2bf2:	f003 0302 	and.w	r3, r3, #2
    2bf6:	2b00      	cmp	r3, #0
    2bf8:	d036      	beq.n	2c68 <am_devices_led_off+0xa4>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
    2bfa:	683b      	ldr	r3, [r7, #0]
    2bfc:	00db      	lsls	r3, r3, #3
    2bfe:	687a      	ldr	r2, [r7, #4]
    2c00:	4413      	add	r3, r2
    2c02:	685b      	ldr	r3, [r3, #4]
    2c04:	f003 0301 	and.w	r3, r3, #1
    2c08:	2b00      	cmp	r3, #0
    2c0a:	d116      	bne.n	2c3a <am_devices_led_off+0x76>
    2c0c:	683b      	ldr	r3, [r7, #0]
    2c0e:	00db      	lsls	r3, r3, #3
    2c10:	687a      	ldr	r2, [r7, #4]
    2c12:	4413      	add	r3, r2
    2c14:	681b      	ldr	r3, [r3, #0]
    2c16:	08db      	lsrs	r3, r3, #3
    2c18:	f003 0204 	and.w	r2, r3, #4
    2c1c:	4b21      	ldr	r3, [pc, #132]	; (2ca4 <am_devices_led_off+0xe0>)
    2c1e:	4413      	add	r3, r2
    2c20:	4619      	mov	r1, r3
    2c22:	683b      	ldr	r3, [r7, #0]
    2c24:	00db      	lsls	r3, r3, #3
    2c26:	687a      	ldr	r2, [r7, #4]
    2c28:	4413      	add	r3, r2
    2c2a:	681b      	ldr	r3, [r3, #0]
    2c2c:	f003 031f 	and.w	r3, r3, #31
    2c30:	2201      	movs	r2, #1
    2c32:	fa02 f303 	lsl.w	r3, r2, r3
    2c36:	600b      	str	r3, [r1, #0]
    2c38:	e02e      	b.n	2c98 <am_devices_led_off+0xd4>
    2c3a:	683b      	ldr	r3, [r7, #0]
    2c3c:	00db      	lsls	r3, r3, #3
    2c3e:	687a      	ldr	r2, [r7, #4]
    2c40:	4413      	add	r3, r2
    2c42:	681b      	ldr	r3, [r3, #0]
    2c44:	08db      	lsrs	r3, r3, #3
    2c46:	f003 0204 	and.w	r2, r3, #4
    2c4a:	4b17      	ldr	r3, [pc, #92]	; (2ca8 <am_devices_led_off+0xe4>)
    2c4c:	4413      	add	r3, r2
    2c4e:	4619      	mov	r1, r3
    2c50:	683b      	ldr	r3, [r7, #0]
    2c52:	00db      	lsls	r3, r3, #3
    2c54:	687a      	ldr	r2, [r7, #4]
    2c56:	4413      	add	r3, r2
    2c58:	681b      	ldr	r3, [r3, #0]
    2c5a:	f003 031f 	and.w	r3, r3, #31
    2c5e:	2201      	movs	r2, #1
    2c60:	fa02 f303 	lsl.w	r3, r2, r3
    2c64:	600b      	str	r3, [r1, #0]
    2c66:	e017      	b.n	2c98 <am_devices_led_off+0xd4>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    2c68:	683b      	ldr	r3, [r7, #0]
    2c6a:	00db      	lsls	r3, r3, #3
    2c6c:	687a      	ldr	r2, [r7, #4]
    2c6e:	4413      	add	r3, r2
    2c70:	681b      	ldr	r3, [r3, #0]
    2c72:	08db      	lsrs	r3, r3, #3
    2c74:	f003 0204 	and.w	r2, r3, #4
    2c78:	4b0c      	ldr	r3, [pc, #48]	; (2cac <am_devices_led_off+0xe8>)
    2c7a:	4413      	add	r3, r2
    2c7c:	4619      	mov	r1, r3
    2c7e:	683b      	ldr	r3, [r7, #0]
    2c80:	00db      	lsls	r3, r3, #3
    2c82:	687a      	ldr	r2, [r7, #4]
    2c84:	4413      	add	r3, r2
    2c86:	681b      	ldr	r3, [r3, #0]
    2c88:	f003 031f 	and.w	r3, r3, #31
    2c8c:	2201      	movs	r2, #1
    2c8e:	fa02 f303 	lsl.w	r3, r2, r3
    2c92:	600b      	str	r3, [r1, #0]
    2c94:	e000      	b.n	2c98 <am_devices_led_off+0xd4>
        return;
    2c96:	bf00      	nop
    }
#endif
}
    2c98:	370c      	adds	r7, #12
    2c9a:	46bd      	mov	sp, r7
    2c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ca0:	4770      	bx	lr
    2ca2:	bf00      	nop
    2ca4:	40010090 	.word	0x40010090
    2ca8:	40010098 	.word	0x40010098
    2cac:	400100b4 	.word	0x400100b4

00002cb0 <am_devices_led_toggle>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    2cb0:	b580      	push	{r7, lr}
    2cb2:	b084      	sub	sp, #16
    2cb4:	af00      	add	r7, sp, #0
    2cb6:	6078      	str	r0, [r7, #4]
    2cb8:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    2cba:	687b      	ldr	r3, [r7, #4]
    2cbc:	2b00      	cmp	r3, #0
    2cbe:	d076      	beq.n	2dae <am_devices_led_toggle+0xfe>
    2cc0:	683b      	ldr	r3, [r7, #0]
    2cc2:	2b1e      	cmp	r3, #30
    2cc4:	d873      	bhi.n	2dae <am_devices_led_toggle+0xfe>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    2cc6:	683b      	ldr	r3, [r7, #0]
    2cc8:	00db      	lsls	r3, r3, #3
    2cca:	687a      	ldr	r2, [r7, #4]
    2ccc:	4413      	add	r3, r2
    2cce:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    2cd0:	2b31      	cmp	r3, #49	; 0x31
    2cd2:	d86c      	bhi.n	2dae <am_devices_led_toggle+0xfe>
    }
#else
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    2cd4:	683b      	ldr	r3, [r7, #0]
    2cd6:	00db      	lsls	r3, r3, #3
    2cd8:	687a      	ldr	r2, [r7, #4]
    2cda:	4413      	add	r3, r2
    2cdc:	685b      	ldr	r3, [r3, #4]
    2cde:	f003 0302 	and.w	r3, r3, #2
    2ce2:	2b00      	cmp	r3, #0
    2ce4:	d02a      	beq.n	2d3c <am_devices_led_toggle+0x8c>
    {
        am_hal_gpio_out_bit_toggle(psLEDs[ui32LEDNum].ui32GPIONumber);
    2ce6:	f001 fd8f 	bl	4808 <am_hal_interrupt_master_disable>
    2cea:	4603      	mov	r3, r0
    2cec:	60fb      	str	r3, [r7, #12]
    2cee:	683b      	ldr	r3, [r7, #0]
    2cf0:	00db      	lsls	r3, r3, #3
    2cf2:	687a      	ldr	r2, [r7, #4]
    2cf4:	4413      	add	r3, r2
    2cf6:	681b      	ldr	r3, [r3, #0]
    2cf8:	08db      	lsrs	r3, r3, #3
    2cfa:	f003 0204 	and.w	r2, r3, #4
    2cfe:	4b2e      	ldr	r3, [pc, #184]	; (2db8 <am_devices_led_toggle+0x108>)
    2d00:	4413      	add	r3, r2
    2d02:	4618      	mov	r0, r3
    2d04:	683b      	ldr	r3, [r7, #0]
    2d06:	00db      	lsls	r3, r3, #3
    2d08:	687a      	ldr	r2, [r7, #4]
    2d0a:	4413      	add	r3, r2
    2d0c:	681b      	ldr	r3, [r3, #0]
    2d0e:	08db      	lsrs	r3, r3, #3
    2d10:	f003 0204 	and.w	r2, r3, #4
    2d14:	4b28      	ldr	r3, [pc, #160]	; (2db8 <am_devices_led_toggle+0x108>)
    2d16:	4413      	add	r3, r2
    2d18:	681a      	ldr	r2, [r3, #0]
    2d1a:	683b      	ldr	r3, [r7, #0]
    2d1c:	00db      	lsls	r3, r3, #3
    2d1e:	6879      	ldr	r1, [r7, #4]
    2d20:	440b      	add	r3, r1
    2d22:	681b      	ldr	r3, [r3, #0]
    2d24:	f003 031f 	and.w	r3, r3, #31
    2d28:	2101      	movs	r1, #1
    2d2a:	fa01 f303 	lsl.w	r3, r1, r3
    2d2e:	4053      	eors	r3, r2
    2d30:	6003      	str	r3, [r0, #0]
    2d32:	68fb      	ldr	r3, [r7, #12]
    2d34:	4618      	mov	r0, r3
    2d36:	f001 fd6b 	bl	4810 <am_hal_interrupt_master_set>
    2d3a:	e039      	b.n	2db0 <am_devices_led_toggle+0x100>
    else
    {
        //
        // Check to see if the LED pin is enabled.
        //
        if ( am_hal_gpio_out_enable_bit_get(psLEDs[ui32LEDNum].ui32GPIONumber) )
    2d3c:	683b      	ldr	r3, [r7, #0]
    2d3e:	00db      	lsls	r3, r3, #3
    2d40:	687a      	ldr	r2, [r7, #4]
    2d42:	4413      	add	r3, r2
    2d44:	681b      	ldr	r3, [r3, #0]
    2d46:	4618      	mov	r0, r3
    2d48:	f001 fc74 	bl	4634 <am_hal_gpio_out_enable_bit_get>
    2d4c:	4603      	mov	r3, r0
    2d4e:	2b00      	cmp	r3, #0
    2d50:	d016      	beq.n	2d80 <am_devices_led_toggle+0xd0>
        {
            //
            // If it was enabled, turn if off.
            //
            am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    2d52:	683b      	ldr	r3, [r7, #0]
    2d54:	00db      	lsls	r3, r3, #3
    2d56:	687a      	ldr	r2, [r7, #4]
    2d58:	4413      	add	r3, r2
    2d5a:	681b      	ldr	r3, [r3, #0]
    2d5c:	08db      	lsrs	r3, r3, #3
    2d5e:	f003 0204 	and.w	r2, r3, #4
    2d62:	4b16      	ldr	r3, [pc, #88]	; (2dbc <am_devices_led_toggle+0x10c>)
    2d64:	4413      	add	r3, r2
    2d66:	4619      	mov	r1, r3
    2d68:	683b      	ldr	r3, [r7, #0]
    2d6a:	00db      	lsls	r3, r3, #3
    2d6c:	687a      	ldr	r2, [r7, #4]
    2d6e:	4413      	add	r3, r2
    2d70:	681b      	ldr	r3, [r3, #0]
    2d72:	f003 031f 	and.w	r3, r3, #31
    2d76:	2201      	movs	r2, #1
    2d78:	fa02 f303 	lsl.w	r3, r2, r3
    2d7c:	600b      	str	r3, [r1, #0]
    2d7e:	e017      	b.n	2db0 <am_devices_led_toggle+0x100>
        else
        {
            //
            // If it was not enabled, turn if on.
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
    2d80:	683b      	ldr	r3, [r7, #0]
    2d82:	00db      	lsls	r3, r3, #3
    2d84:	687a      	ldr	r2, [r7, #4]
    2d86:	4413      	add	r3, r2
    2d88:	681b      	ldr	r3, [r3, #0]
    2d8a:	08db      	lsrs	r3, r3, #3
    2d8c:	f003 0204 	and.w	r2, r3, #4
    2d90:	4b0b      	ldr	r3, [pc, #44]	; (2dc0 <am_devices_led_toggle+0x110>)
    2d92:	4413      	add	r3, r2
    2d94:	4619      	mov	r1, r3
    2d96:	683b      	ldr	r3, [r7, #0]
    2d98:	00db      	lsls	r3, r3, #3
    2d9a:	687a      	ldr	r2, [r7, #4]
    2d9c:	4413      	add	r3, r2
    2d9e:	681b      	ldr	r3, [r3, #0]
    2da0:	f003 031f 	and.w	r3, r3, #31
    2da4:	2201      	movs	r2, #1
    2da6:	fa02 f303 	lsl.w	r3, r2, r3
    2daa:	600b      	str	r3, [r1, #0]
    2dac:	e000      	b.n	2db0 <am_devices_led_toggle+0x100>
        return;
    2dae:	bf00      	nop
        }
    }
#endif
}
    2db0:	3710      	adds	r7, #16
    2db2:	46bd      	mov	sp, r7
    2db4:	bd80      	pop	{r7, pc}
    2db6:	bf00      	nop
    2db8:	40010088 	.word	0x40010088
    2dbc:	400100b4 	.word	0x400100b4
    2dc0:	400100a8 	.word	0x400100a8

00002dc4 <enable_print_interface>:
// Enable printing to the console.
//
//*****************************************************************************
void
enable_print_interface(void)
{
    2dc4:	b580      	push	{r7, lr}
    2dc6:	af00      	add	r7, sp, #0
    //
    // Initialize a debug printing interface.
    //
    am_hal_itm_enable();
    2dc8:	f001 fd26 	bl	4818 <am_hal_itm_enable>
    am_bsp_debug_printf_enable();
    2dcc:	f001 fa32 	bl	4234 <am_bsp_debug_printf_enable>
    am_util_debug_printf_init(am_hal_itm_print);
    2dd0:	4803      	ldr	r0, [pc, #12]	; (2de0 <enable_print_interface+0x1c>)
    2dd2:	f000 fb71 	bl	34b8 <am_util_stdio_printf_init>
    am_util_stdio_terminal_clear();
    2dd6:	f001 fa11 	bl	41fc <am_util_stdio_terminal_clear>
}
    2dda:	bf00      	nop
    2ddc:	bd80      	pop	{r7, pc}
    2dde:	bf00      	nop
    2de0:	000048e1 	.word	0x000048e1

00002de4 <disable_print_interface>:
// Enable printing to the console.
//
//*****************************************************************************
void
disable_print_interface(void)
{
    2de4:	b580      	push	{r7, lr}
    2de6:	af00      	add	r7, sp, #0
    //
    // Initialize a debug printing interface.
    //
    am_bsp_debug_printf_disable();
    2de8:	f001 fa64 	bl	42b4 <am_bsp_debug_printf_disable>
    am_hal_itm_disable();
    2dec:	f001 fd40 	bl	4870 <am_hal_itm_disable>
}
    2df0:	bf00      	nop
    2df2:	bd80      	pop	{r7, pc}

00002df4 <main>:
// Main Function
//
//*****************************************************************************
int
main(void)
{
    2df4:	b580      	push	{r7, lr}
    2df6:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
    2df8:	2000      	movs	r0, #0
    2dfa:	f001 fb25 	bl	4448 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
    2dfe:	480c      	ldr	r0, [pc, #48]	; (2e30 <main+0x3c>)
    2e00:	f001 fa8c 	bl	431c <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    2e04:	f001 fa04 	bl	4210 <am_bsp_low_power_init>
#ifndef NOFPU
    //
    // Enable the floating point module, and configure the core for lazy
    // stacking.
    //
    am_hal_sysctrl_fpu_enable();
    2e08:	f002 f842 	bl	4e90 <am_hal_sysctrl_fpu_enable>
    am_hal_sysctrl_fpu_stacking_enable(true);
    2e0c:	2001      	movs	r0, #1
    2e0e:	f002 f847 	bl	4ea0 <am_hal_sysctrl_fpu_stacking_enable>
    // Flash bank power set.
    //
    am_hal_mcuctrl_flash_power_set(AM_HAL_MCUCTRL_FLASH_POWER_DOWN_1);
#endif // AM_PART_APOLLO
#ifdef AM_PART_APOLLO2
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_FLASH512K);
    2e12:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2e16:	f001 fda1 	bl	495c <am_hal_pwrctrl_memory_enable>
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_SRAM32K);
    2e1a:	200f      	movs	r0, #15
    2e1c:	f001 fd9e 	bl	495c <am_hal_pwrctrl_memory_enable>

    //
    // Enable printing to the console.
    //
#ifdef AM_DEBUG_PRINTF
    enable_print_interface();
    2e20:	f7ff ffd0 	bl	2dc4 <enable_print_interface>
#endif

    //
    // Initialize plotting interface.
    //
    am_util_debug_printf("FreeRTOS Low Power Example\n");
    2e24:	4803      	ldr	r0, [pc, #12]	; (2e34 <main+0x40>)
    2e26:	f001 f9cb 	bl	41c0 <am_util_stdio_printf>

    //
    // Run the application.
    //
    run_tasks();
    2e2a:	f000 fa59 	bl	32e0 <run_tasks>

    //
    // We shouldn't ever get here.
    //
    while (1)
    2e2e:	e7fe      	b.n	2e2e <main+0x3a>
    2e30:	0000502c 	.word	0x0000502c
    2e34:	00004fbc 	.word	0x00004fbc

00002e38 <am_gpio_isr>:
// Interrupt handler for the GPIO pins.
//
//*****************************************************************************
void
am_gpio_isr(void)
{
    2e38:	b580      	push	{r7, lr}
    2e3a:	b082      	sub	sp, #8
    2e3c:	af00      	add	r7, sp, #0
    uint64_t ui64Status;

    //
    // Read and clear the GPIO interrupt status.
    //
    ui64Status = am_hal_gpio_int_status_get(false);
    2e3e:	2000      	movs	r0, #0
    2e40:	f001 fc2a 	bl	4698 <am_hal_gpio_int_status_get>
    2e44:	e9c7 0100 	strd	r0, r1, [r7]
    am_hal_gpio_int_clear(ui64Status);
    2e48:	e9d7 0100 	ldrd	r0, r1, [r7]
    2e4c:	f001 fc10 	bl	4670 <am_hal_gpio_int_clear>

    //
    // Call the individual pin interrupt handlers for any pin that triggered an
    // interrupt.
    //
    am_hal_gpio_int_service(ui64Status);
    2e50:	e9d7 0100 	ldrd	r0, r1, [r7]
    2e54:	f001 fc4a 	bl	46ec <am_hal_gpio_int_service>
}
    2e58:	bf00      	nop
    2e5a:	3708      	adds	r7, #8
    2e5c:	46bd      	mov	sp, r7
    2e5e:	bd80      	pop	{r7, pc}

00002e60 <button_handler>:
// Interrupt handler for the Buttons
//
//*****************************************************************************
void
button_handler(uint32_t buttonId)
{
    2e60:	b580      	push	{r7, lr}
    2e62:	b084      	sub	sp, #16
    2e64:	af00      	add	r7, sp, #0
    2e66:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken, xResult;
    //
    // Send an event to the main LED task
    //
    xHigherPriorityTaskWoken = pdFALSE;
    2e68:	2300      	movs	r3, #0
    2e6a:	60bb      	str	r3, [r7, #8]

    xResult = xEventGroupSetBitsFromISR(xLedEventHandle, (1 << buttonId),
    2e6c:	4b0f      	ldr	r3, [pc, #60]	; (2eac <button_handler+0x4c>)
    2e6e:	6819      	ldr	r1, [r3, #0]
    2e70:	2201      	movs	r2, #1
    2e72:	687b      	ldr	r3, [r7, #4]
    2e74:	fa02 f303 	lsl.w	r3, r2, r3
    2e78:	461a      	mov	r2, r3
    2e7a:	f107 0308 	add.w	r3, r7, #8
    2e7e:	480c      	ldr	r0, [pc, #48]	; (2eb0 <button_handler+0x50>)
    2e80:	f7ff fce4 	bl	284c <xTimerPendFunctionCallFromISR>
    2e84:	60f8      	str	r0, [r7, #12]

    //
    // If the LED task is higher-priority than the context we're currently
    // running from, we should yield now and run the radio task.
    //
    if (xResult != pdFAIL)
    2e86:	68fb      	ldr	r3, [r7, #12]
    2e88:	2b00      	cmp	r3, #0
    2e8a:	d00a      	beq.n	2ea2 <button_handler+0x42>
    {
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    2e8c:	68bb      	ldr	r3, [r7, #8]
    2e8e:	2b00      	cmp	r3, #0
    2e90:	d007      	beq.n	2ea2 <button_handler+0x42>
    2e92:	4b08      	ldr	r3, [pc, #32]	; (2eb4 <button_handler+0x54>)
    2e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2e98:	601a      	str	r2, [r3, #0]
    2e9a:	f3bf 8f4f 	dsb	sy
    2e9e:	f3bf 8f6f 	isb	sy
    }
}
    2ea2:	bf00      	nop
    2ea4:	3710      	adds	r7, #16
    2ea6:	46bd      	mov	sp, r7
    2ea8:	bd80      	pop	{r7, pc}
    2eaa:	bf00      	nop
    2eac:	10006580 	.word	0x10006580
    2eb0:	00000b8f 	.word	0x00000b8f
    2eb4:	e000ed04 	.word	0xe000ed04

00002eb8 <button0_handler>:

void
button0_handler(void)
{
    2eb8:	b580      	push	{r7, lr}
    2eba:	b082      	sub	sp, #8
    2ebc:	af00      	add	r7, sp, #0

    //
    // Debounce for 20 ms.
    // We're triggered for rising edge - so we expect a consistent HIGH here
    //
    for (count = 0; count < 10; count++)
    2ebe:	2300      	movs	r3, #0
    2ec0:	607b      	str	r3, [r7, #4]
    2ec2:	e012      	b.n	2eea <button0_handler+0x32>
    {
        val = am_hal_gpio_input_bit_read(AM_BSP_GPIO_BUTTON0);
    2ec4:	4b0e      	ldr	r3, [pc, #56]	; (2f00 <button0_handler+0x48>)
    2ec6:	681b      	ldr	r3, [r3, #0]
    2ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    2ecc:	2b00      	cmp	r3, #0
    2ece:	bf14      	ite	ne
    2ed0:	2301      	movne	r3, #1
    2ed2:	2300      	moveq	r3, #0
    2ed4:	b2db      	uxtb	r3, r3
    2ed6:	603b      	str	r3, [r7, #0]
        if (!val)
    2ed8:	683b      	ldr	r3, [r7, #0]
    2eda:	2b00      	cmp	r3, #0
    2edc:	d00c      	beq.n	2ef8 <button0_handler+0x40>
        {
            return; // State not high...must be result of debounce
        }
        am_util_delay_ms(2);
    2ede:	2002      	movs	r0, #2
    2ee0:	f000 fa50 	bl	3384 <am_util_delay_ms>
    for (count = 0; count < 10; count++)
    2ee4:	687b      	ldr	r3, [r7, #4]
    2ee6:	3301      	adds	r3, #1
    2ee8:	607b      	str	r3, [r7, #4]
    2eea:	687b      	ldr	r3, [r7, #4]
    2eec:	2b09      	cmp	r3, #9
    2eee:	d9e9      	bls.n	2ec4 <button0_handler+0xc>
    }

    button_handler(0);
    2ef0:	2000      	movs	r0, #0
    2ef2:	f7ff ffb5 	bl	2e60 <button_handler>
    2ef6:	e000      	b.n	2efa <button0_handler+0x42>
            return; // State not high...must be result of debounce
    2ef8:	bf00      	nop
}
    2efa:	3708      	adds	r7, #8
    2efc:	46bd      	mov	sp, r7
    2efe:	bd80      	pop	{r7, pc}
    2f00:	40010080 	.word	0x40010080

00002f04 <button1_handler>:

void
button1_handler(void)
{
    2f04:	b580      	push	{r7, lr}
    2f06:	b082      	sub	sp, #8
    2f08:	af00      	add	r7, sp, #0

    //
    // Debounce for 20 ms.
    // We're triggered for rising edge - so we expect a consistent HIGH here
    //
    for (count = 0; count < 10; count++)
    2f0a:	2300      	movs	r3, #0
    2f0c:	607b      	str	r3, [r7, #4]
    2f0e:	e012      	b.n	2f36 <button1_handler+0x32>
    {
        val = am_hal_gpio_input_bit_read(AM_BSP_GPIO_BUTTON1);
    2f10:	4b0e      	ldr	r3, [pc, #56]	; (2f4c <button1_handler+0x48>)
    2f12:	681b      	ldr	r3, [r3, #0]
    2f14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    2f18:	2b00      	cmp	r3, #0
    2f1a:	bf14      	ite	ne
    2f1c:	2301      	movne	r3, #1
    2f1e:	2300      	moveq	r3, #0
    2f20:	b2db      	uxtb	r3, r3
    2f22:	603b      	str	r3, [r7, #0]
        if (!val)
    2f24:	683b      	ldr	r3, [r7, #0]
    2f26:	2b00      	cmp	r3, #0
    2f28:	d00c      	beq.n	2f44 <button1_handler+0x40>
        {
            return; // State not high...must be result of debounce
        }
        am_util_delay_ms(2);
    2f2a:	2002      	movs	r0, #2
    2f2c:	f000 fa2a 	bl	3384 <am_util_delay_ms>
    for (count = 0; count < 10; count++)
    2f30:	687b      	ldr	r3, [r7, #4]
    2f32:	3301      	adds	r3, #1
    2f34:	607b      	str	r3, [r7, #4]
    2f36:	687b      	ldr	r3, [r7, #4]
    2f38:	2b09      	cmp	r3, #9
    2f3a:	d9e9      	bls.n	2f10 <button1_handler+0xc>
    }

    button_handler(1);
    2f3c:	2001      	movs	r0, #1
    2f3e:	f7ff ff8f 	bl	2e60 <button_handler>
    2f42:	e000      	b.n	2f46 <button1_handler+0x42>
            return; // State not high...must be result of debounce
    2f44:	bf00      	nop
}
    2f46:	3708      	adds	r7, #8
    2f48:	46bd      	mov	sp, r7
    2f4a:	bd80      	pop	{r7, pc}
    2f4c:	40010080 	.word	0x40010080

00002f50 <button2_handler>:

void
button2_handler(void)
{
    2f50:	b580      	push	{r7, lr}
    2f52:	b082      	sub	sp, #8
    2f54:	af00      	add	r7, sp, #0

    //
    // Debounce for 20 ms.
    // We're triggered for rising edge - so we expect a consistent HIGH here
    //
    for (count = 0; count < 10; count++)
    2f56:	2300      	movs	r3, #0
    2f58:	607b      	str	r3, [r7, #4]
    2f5a:	e012      	b.n	2f82 <button2_handler+0x32>
    {
        val = am_hal_gpio_input_bit_read(AM_BSP_GPIO_BUTTON2);
    2f5c:	4b0e      	ldr	r3, [pc, #56]	; (2f98 <button2_handler+0x48>)
    2f5e:	681b      	ldr	r3, [r3, #0]
    2f60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    2f64:	2b00      	cmp	r3, #0
    2f66:	bf14      	ite	ne
    2f68:	2301      	movne	r3, #1
    2f6a:	2300      	moveq	r3, #0
    2f6c:	b2db      	uxtb	r3, r3
    2f6e:	603b      	str	r3, [r7, #0]
        if (!val)
    2f70:	683b      	ldr	r3, [r7, #0]
    2f72:	2b00      	cmp	r3, #0
    2f74:	d00c      	beq.n	2f90 <button2_handler+0x40>
        {
            return; // State not high...must be result of debounce
        }
        am_util_delay_ms(2);
    2f76:	2002      	movs	r0, #2
    2f78:	f000 fa04 	bl	3384 <am_util_delay_ms>
    for (count = 0; count < 10; count++)
    2f7c:	687b      	ldr	r3, [r7, #4]
    2f7e:	3301      	adds	r3, #1
    2f80:	607b      	str	r3, [r7, #4]
    2f82:	687b      	ldr	r3, [r7, #4]
    2f84:	2b09      	cmp	r3, #9
    2f86:	d9e9      	bls.n	2f5c <button2_handler+0xc>
    }

    button_handler(2);
    2f88:	2002      	movs	r0, #2
    2f8a:	f7ff ff69 	bl	2e60 <button_handler>
    2f8e:	e000      	b.n	2f92 <button2_handler+0x42>
            return; // State not high...must be result of debounce
    2f90:	bf00      	nop
}
    2f92:	3708      	adds	r7, #8
    2f94:	46bd      	mov	sp, r7
    2f96:	bd80      	pop	{r7, pc}
    2f98:	40010080 	.word	0x40010080

00002f9c <LedTaskSetup>:
// Perform initial setup for the LED task.
//
//*****************************************************************************
void
LedTaskSetup(void)
{
    2f9c:	b580      	push	{r7, lr}
    2f9e:	b086      	sub	sp, #24
    2fa0:	af00      	add	r7, sp, #0
    am_util_debug_printf("LEDTask: setup\r\n");
    2fa2:	4882      	ldr	r0, [pc, #520]	; (31ac <LedTaskSetup+0x210>)
    2fa4:	f001 f90c 	bl	41c0 <am_util_stdio_printf>

    //
    // Create an event handle for our wake-up events.
    //
    xLedEventHandle = xEventGroupCreate();
    2fa8:	f7fd fcbe 	bl	928 <xEventGroupCreate>
    2fac:	4602      	mov	r2, r0
    2fae:	4b80      	ldr	r3, [pc, #512]	; (31b0 <LedTaskSetup+0x214>)
    2fb0:	601a      	str	r2, [r3, #0]

    //
    // Make sure we actually allocated space for the events we need.
    //
    while (xLedEventHandle == NULL);
    2fb2:	bf00      	nop
    2fb4:	4b7e      	ldr	r3, [pc, #504]	; (31b0 <LedTaskSetup+0x214>)
    2fb6:	681b      	ldr	r3, [r3, #0]
    2fb8:	2b00      	cmp	r3, #0
    2fba:	d0fb      	beq.n	2fb4 <LedTaskSetup+0x18>

    // Initialize the LEDs
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
    2fbc:	2105      	movs	r1, #5
    2fbe:	487d      	ldr	r0, [pc, #500]	; (31b4 <LedTaskSetup+0x218>)
    2fc0:	f7ff fdde 	bl	2b80 <am_devices_led_array_init>
    am_devices_led_off(am_bsp_psLEDs, 0);
    2fc4:	2100      	movs	r1, #0
    2fc6:	487b      	ldr	r0, [pc, #492]	; (31b4 <LedTaskSetup+0x218>)
    2fc8:	f7ff fdfc 	bl	2bc4 <am_devices_led_off>
    am_devices_led_off(am_bsp_psLEDs, 1);
    2fcc:	2101      	movs	r1, #1
    2fce:	4879      	ldr	r0, [pc, #484]	; (31b4 <LedTaskSetup+0x218>)
    2fd0:	f7ff fdf8 	bl	2bc4 <am_devices_led_off>
    am_devices_led_off(am_bsp_psLEDs, 2);
    2fd4:	2102      	movs	r1, #2
    2fd6:	4877      	ldr	r0, [pc, #476]	; (31b4 <LedTaskSetup+0x218>)
    2fd8:	f7ff fdf4 	bl	2bc4 <am_devices_led_off>
    am_devices_led_off(am_bsp_psLEDs, 3);
    2fdc:	2103      	movs	r1, #3
    2fde:	4875      	ldr	r0, [pc, #468]	; (31b4 <LedTaskSetup+0x218>)
    2fe0:	f7ff fdf0 	bl	2bc4 <am_devices_led_off>
    am_devices_led_off(am_bsp_psLEDs, 4);
    2fe4:	2104      	movs	r1, #4
    2fe6:	4873      	ldr	r0, [pc, #460]	; (31b4 <LedTaskSetup+0x218>)
    2fe8:	f7ff fdec 	bl	2bc4 <am_devices_led_off>
    am_hal_interrupt_priority_set(AM_HAL_INTERRUPT_GPIO, configMAX_SYSCALL_INTERRUPT_PRIORITY);
    2fec:	2180      	movs	r1, #128	; 0x80
    2fee:	201c      	movs	r0, #28
    2ff0:	f001 fbe6 	bl	47c0 <am_hal_interrupt_priority_set>
    //
    // Register interrupt handler for button presses
    //
    am_hal_gpio_int_register(AM_BSP_GPIO_BUTTON0, button0_handler);
    2ff4:	4970      	ldr	r1, [pc, #448]	; (31b8 <LedTaskSetup+0x21c>)
    2ff6:	2010      	movs	r0, #16
    2ff8:	f001 fba4 	bl	4744 <am_hal_gpio_int_register>
    am_hal_gpio_int_register(AM_BSP_GPIO_BUTTON1, button1_handler);
    2ffc:	496f      	ldr	r1, [pc, #444]	; (31bc <LedTaskSetup+0x220>)
    2ffe:	2012      	movs	r0, #18
    3000:	f001 fba0 	bl	4744 <am_hal_gpio_int_register>
    am_hal_gpio_int_register(AM_BSP_GPIO_BUTTON2, button2_handler);
    3004:	496e      	ldr	r1, [pc, #440]	; (31c0 <LedTaskSetup+0x224>)
    3006:	2013      	movs	r0, #19
    3008:	f001 fb9c 	bl	4744 <am_hal_gpio_int_register>

    am_hal_gpio_pin_config(AM_BSP_GPIO_BUTTON0, AM_HAL_GPIO_INPUT);
    300c:	f001 fbfc 	bl	4808 <am_hal_interrupt_master_disable>
    3010:	4603      	mov	r3, r0
    3012:	617b      	str	r3, [r7, #20]
    3014:	4b6b      	ldr	r3, [pc, #428]	; (31c4 <LedTaskSetup+0x228>)
    3016:	2273      	movs	r2, #115	; 0x73
    3018:	601a      	str	r2, [r3, #0]
    301a:	4a6b      	ldr	r2, [pc, #428]	; (31c8 <LedTaskSetup+0x22c>)
    301c:	4b6a      	ldr	r3, [pc, #424]	; (31c8 <LedTaskSetup+0x22c>)
    301e:	681b      	ldr	r3, [r3, #0]
    3020:	f023 0307 	bic.w	r3, r3, #7
    3024:	6013      	str	r3, [r2, #0]
    3026:	4a69      	ldr	r2, [pc, #420]	; (31cc <LedTaskSetup+0x230>)
    3028:	4b68      	ldr	r3, [pc, #416]	; (31cc <LedTaskSetup+0x230>)
    302a:	681b      	ldr	r3, [r3, #0]
    302c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    3030:	f043 031a 	orr.w	r3, r3, #26
    3034:	6013      	str	r3, [r2, #0]
    3036:	4a66      	ldr	r2, [pc, #408]	; (31d0 <LedTaskSetup+0x234>)
    3038:	4b65      	ldr	r3, [pc, #404]	; (31d0 <LedTaskSetup+0x234>)
    303a:	681b      	ldr	r3, [r3, #0]
    303c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    3040:	6013      	str	r3, [r2, #0]
    3042:	4b60      	ldr	r3, [pc, #384]	; (31c4 <LedTaskSetup+0x228>)
    3044:	2200      	movs	r2, #0
    3046:	601a      	str	r2, [r3, #0]
    3048:	697b      	ldr	r3, [r7, #20]
    304a:	4618      	mov	r0, r3
    304c:	f001 fbe0 	bl	4810 <am_hal_interrupt_master_set>
    am_hal_gpio_pin_config(AM_BSP_GPIO_BUTTON1, AM_HAL_GPIO_INPUT);
    3050:	f001 fbda 	bl	4808 <am_hal_interrupt_master_disable>
    3054:	4603      	mov	r3, r0
    3056:	613b      	str	r3, [r7, #16]
    3058:	4b5a      	ldr	r3, [pc, #360]	; (31c4 <LedTaskSetup+0x228>)
    305a:	2273      	movs	r2, #115	; 0x73
    305c:	601a      	str	r2, [r3, #0]
    305e:	4a5a      	ldr	r2, [pc, #360]	; (31c8 <LedTaskSetup+0x22c>)
    3060:	4b59      	ldr	r3, [pc, #356]	; (31c8 <LedTaskSetup+0x22c>)
    3062:	681b      	ldr	r3, [r3, #0]
    3064:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3068:	6013      	str	r3, [r2, #0]
    306a:	4a58      	ldr	r2, [pc, #352]	; (31cc <LedTaskSetup+0x230>)
    306c:	4b57      	ldr	r3, [pc, #348]	; (31cc <LedTaskSetup+0x230>)
    306e:	681b      	ldr	r3, [r3, #0]
    3070:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    3074:	f443 13d0 	orr.w	r3, r3, #1703936	; 0x1a0000
    3078:	6013      	str	r3, [r2, #0]
    307a:	4a55      	ldr	r2, [pc, #340]	; (31d0 <LedTaskSetup+0x234>)
    307c:	4b54      	ldr	r3, [pc, #336]	; (31d0 <LedTaskSetup+0x234>)
    307e:	681b      	ldr	r3, [r3, #0]
    3080:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    3084:	6013      	str	r3, [r2, #0]
    3086:	4b4f      	ldr	r3, [pc, #316]	; (31c4 <LedTaskSetup+0x228>)
    3088:	2200      	movs	r2, #0
    308a:	601a      	str	r2, [r3, #0]
    308c:	693b      	ldr	r3, [r7, #16]
    308e:	4618      	mov	r0, r3
    3090:	f001 fbbe 	bl	4810 <am_hal_interrupt_master_set>
    am_hal_gpio_pin_config(AM_BSP_GPIO_BUTTON2, AM_HAL_GPIO_INPUT);
    3094:	f001 fbb8 	bl	4808 <am_hal_interrupt_master_disable>
    3098:	4603      	mov	r3, r0
    309a:	60fb      	str	r3, [r7, #12]
    309c:	4b49      	ldr	r3, [pc, #292]	; (31c4 <LedTaskSetup+0x228>)
    309e:	2273      	movs	r2, #115	; 0x73
    30a0:	601a      	str	r2, [r3, #0]
    30a2:	4a49      	ldr	r2, [pc, #292]	; (31c8 <LedTaskSetup+0x22c>)
    30a4:	4b48      	ldr	r3, [pc, #288]	; (31c8 <LedTaskSetup+0x22c>)
    30a6:	681b      	ldr	r3, [r3, #0]
    30a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    30ac:	6013      	str	r3, [r2, #0]
    30ae:	4a47      	ldr	r2, [pc, #284]	; (31cc <LedTaskSetup+0x230>)
    30b0:	4b46      	ldr	r3, [pc, #280]	; (31cc <LedTaskSetup+0x230>)
    30b2:	681b      	ldr	r3, [r3, #0]
    30b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    30b8:	f043 53d0 	orr.w	r3, r3, #436207616	; 0x1a000000
    30bc:	6013      	str	r3, [r2, #0]
    30be:	4a44      	ldr	r2, [pc, #272]	; (31d0 <LedTaskSetup+0x234>)
    30c0:	4b43      	ldr	r3, [pc, #268]	; (31d0 <LedTaskSetup+0x234>)
    30c2:	681b      	ldr	r3, [r3, #0]
    30c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    30c8:	6013      	str	r3, [r2, #0]
    30ca:	4b3e      	ldr	r3, [pc, #248]	; (31c4 <LedTaskSetup+0x228>)
    30cc:	2200      	movs	r2, #0
    30ce:	601a      	str	r2, [r3, #0]
    30d0:	68fb      	ldr	r3, [r7, #12]
    30d2:	4618      	mov	r0, r3
    30d4:	f001 fb9c 	bl	4810 <am_hal_interrupt_master_set>

    //
    // Configure the GPIO/button interrupt polarity.
    //
    am_hal_gpio_int_polarity_bit_set(AM_BSP_GPIO_BUTTON0, AM_HAL_GPIO_RISING);
    30d8:	f001 fb96 	bl	4808 <am_hal_interrupt_master_disable>
    30dc:	4603      	mov	r3, r0
    30de:	60bb      	str	r3, [r7, #8]
    30e0:	4b38      	ldr	r3, [pc, #224]	; (31c4 <LedTaskSetup+0x228>)
    30e2:	2273      	movs	r2, #115	; 0x73
    30e4:	601a      	str	r2, [r3, #0]
    30e6:	4a38      	ldr	r2, [pc, #224]	; (31c8 <LedTaskSetup+0x22c>)
    30e8:	4b37      	ldr	r3, [pc, #220]	; (31c8 <LedTaskSetup+0x22c>)
    30ea:	681b      	ldr	r3, [r3, #0]
    30ec:	f023 0308 	bic.w	r3, r3, #8
    30f0:	6013      	str	r3, [r2, #0]
    30f2:	4b34      	ldr	r3, [pc, #208]	; (31c4 <LedTaskSetup+0x228>)
    30f4:	2200      	movs	r2, #0
    30f6:	601a      	str	r2, [r3, #0]
    30f8:	68bb      	ldr	r3, [r7, #8]
    30fa:	4618      	mov	r0, r3
    30fc:	f001 fb88 	bl	4810 <am_hal_interrupt_master_set>
    am_hal_gpio_int_polarity_bit_set(AM_BSP_GPIO_BUTTON1, AM_HAL_GPIO_RISING);
    3100:	f001 fb82 	bl	4808 <am_hal_interrupt_master_disable>
    3104:	4603      	mov	r3, r0
    3106:	607b      	str	r3, [r7, #4]
    3108:	4b2e      	ldr	r3, [pc, #184]	; (31c4 <LedTaskSetup+0x228>)
    310a:	2273      	movs	r2, #115	; 0x73
    310c:	601a      	str	r2, [r3, #0]
    310e:	4a2e      	ldr	r2, [pc, #184]	; (31c8 <LedTaskSetup+0x22c>)
    3110:	4b2d      	ldr	r3, [pc, #180]	; (31c8 <LedTaskSetup+0x22c>)
    3112:	681b      	ldr	r3, [r3, #0]
    3114:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3118:	6013      	str	r3, [r2, #0]
    311a:	4b2a      	ldr	r3, [pc, #168]	; (31c4 <LedTaskSetup+0x228>)
    311c:	2200      	movs	r2, #0
    311e:	601a      	str	r2, [r3, #0]
    3120:	687b      	ldr	r3, [r7, #4]
    3122:	4618      	mov	r0, r3
    3124:	f001 fb74 	bl	4810 <am_hal_interrupt_master_set>
    am_hal_gpio_int_polarity_bit_set(AM_BSP_GPIO_BUTTON2, AM_HAL_GPIO_RISING);
    3128:	f001 fb6e 	bl	4808 <am_hal_interrupt_master_disable>
    312c:	4603      	mov	r3, r0
    312e:	603b      	str	r3, [r7, #0]
    3130:	4b24      	ldr	r3, [pc, #144]	; (31c4 <LedTaskSetup+0x228>)
    3132:	2273      	movs	r2, #115	; 0x73
    3134:	601a      	str	r2, [r3, #0]
    3136:	4a24      	ldr	r2, [pc, #144]	; (31c8 <LedTaskSetup+0x22c>)
    3138:	4b23      	ldr	r3, [pc, #140]	; (31c8 <LedTaskSetup+0x22c>)
    313a:	681b      	ldr	r3, [r3, #0]
    313c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3140:	6013      	str	r3, [r2, #0]
    3142:	4b20      	ldr	r3, [pc, #128]	; (31c4 <LedTaskSetup+0x228>)
    3144:	2200      	movs	r2, #0
    3146:	601a      	str	r2, [r3, #0]
    3148:	683b      	ldr	r3, [r7, #0]
    314a:	4618      	mov	r0, r3
    314c:	f001 fb60 	bl	4810 <am_hal_interrupt_master_set>

    //
    // Clear the GPIO Interrupt (write to clear).
    //
    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    3150:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3154:	f04f 0100 	mov.w	r1, #0
    3158:	f001 fa8a 	bl	4670 <am_hal_gpio_int_clear>
    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON1));
    315c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3160:	f04f 0100 	mov.w	r1, #0
    3164:	f001 fa84 	bl	4670 <am_hal_gpio_int_clear>
    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON2));
    3168:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    316c:	f04f 0100 	mov.w	r1, #0
    3170:	f001 fa7e 	bl	4670 <am_hal_gpio_int_clear>

    //
    // Enable the GPIO/button interrupt.
    //
    am_hal_gpio_int_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    3174:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3178:	f04f 0100 	mov.w	r1, #0
    317c:	f001 fa68 	bl	4650 <am_hal_gpio_int_enable>
    am_hal_gpio_int_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON1));
    3180:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3184:	f04f 0100 	mov.w	r1, #0
    3188:	f001 fa62 	bl	4650 <am_hal_gpio_int_enable>
    am_hal_gpio_int_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON2));
    318c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    3190:	f04f 0100 	mov.w	r1, #0
    3194:	f001 fa5c 	bl	4650 <am_hal_gpio_int_enable>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_GPIO);
    3198:	201c      	movs	r0, #28
    319a:	f001 fae9 	bl	4770 <am_hal_interrupt_enable>


    //
    // Enable interrupts to the core.
    //
    am_hal_interrupt_master_enable();
    319e:	f001 fb2f 	bl	4800 <am_hal_interrupt_master_enable>

}
    31a2:	bf00      	nop
    31a4:	3718      	adds	r7, #24
    31a6:	46bd      	mov	sp, r7
    31a8:	bd80      	pop	{r7, pc}
    31aa:	bf00      	nop
    31ac:	00004fd8 	.word	0x00004fd8
    31b0:	10006580 	.word	0x10006580
    31b4:	10002308 	.word	0x10002308
    31b8:	00002eb9 	.word	0x00002eb9
    31bc:	00002f05 	.word	0x00002f05
    31c0:	00002f51 	.word	0x00002f51
    31c4:	40010060 	.word	0x40010060
    31c8:	40010048 	.word	0x40010048
    31cc:	40010010 	.word	0x40010010
    31d0:	400100f0 	.word	0x400100f0

000031d4 <LedTask>:
// Short Description.
//
//*****************************************************************************
void
LedTask(void *pvParameters)
{
    31d4:	b580      	push	{r7, lr}
    31d6:	b086      	sub	sp, #24
    31d8:	af02      	add	r7, sp, #8
    31da:	6078      	str	r0, [r7, #4]
    while (1)
    {
        //
        // Wait for an event to be posted to the LED Event Handle.
        //
        bitSet = xEventGroupWaitBits(xLedEventHandle, 0x7, pdTRUE,
    31dc:	4b14      	ldr	r3, [pc, #80]	; (3230 <LedTask+0x5c>)
    31de:	6818      	ldr	r0, [r3, #0]
    31e0:	f04f 33ff 	mov.w	r3, #4294967295
    31e4:	9300      	str	r3, [sp, #0]
    31e6:	2300      	movs	r3, #0
    31e8:	2201      	movs	r2, #1
    31ea:	2107      	movs	r1, #7
    31ec:	f7fd fbb4 	bl	958 <xEventGroupWaitBits>
    31f0:	60f8      	str	r0, [r7, #12]
                            pdFALSE, portMAX_DELAY);
        if (bitSet != 0)
    31f2:	68fb      	ldr	r3, [r7, #12]
    31f4:	2b00      	cmp	r3, #0
    31f6:	d0f1      	beq.n	31dc <LedTask+0x8>
        {
            // Button Press Event received
            // Toggle respective LED(s)
            if (bitSet & (1 << 0))
    31f8:	68fb      	ldr	r3, [r7, #12]
    31fa:	f003 0301 	and.w	r3, r3, #1
    31fe:	2b00      	cmp	r3, #0
    3200:	d003      	beq.n	320a <LedTask+0x36>
            {
                am_devices_led_toggle(am_bsp_psLEDs, 0);
    3202:	2100      	movs	r1, #0
    3204:	480b      	ldr	r0, [pc, #44]	; (3234 <LedTask+0x60>)
    3206:	f7ff fd53 	bl	2cb0 <am_devices_led_toggle>
            }
            if (bitSet & (1 << 1))
    320a:	68fb      	ldr	r3, [r7, #12]
    320c:	f003 0302 	and.w	r3, r3, #2
    3210:	2b00      	cmp	r3, #0
    3212:	d003      	beq.n	321c <LedTask+0x48>
            {
                am_devices_led_toggle(am_bsp_psLEDs, 1);
    3214:	2101      	movs	r1, #1
    3216:	4807      	ldr	r0, [pc, #28]	; (3234 <LedTask+0x60>)
    3218:	f7ff fd4a 	bl	2cb0 <am_devices_led_toggle>
            }
            if (bitSet & (1 << 2))
    321c:	68fb      	ldr	r3, [r7, #12]
    321e:	f003 0304 	and.w	r3, r3, #4
    3222:	2b00      	cmp	r3, #0
    3224:	d0da      	beq.n	31dc <LedTask+0x8>
            {
                am_devices_led_toggle(am_bsp_psLEDs, 2);
    3226:	2102      	movs	r1, #2
    3228:	4802      	ldr	r0, [pc, #8]	; (3234 <LedTask+0x60>)
    322a:	f7ff fd41 	bl	2cb0 <am_devices_led_toggle>
        bitSet = xEventGroupWaitBits(xLedEventHandle, 0x7, pdTRUE,
    322e:	e7d5      	b.n	31dc <LedTask+0x8>
    3230:	10006580 	.word	0x10006580
    3234:	10002308 	.word	0x10002308

00003238 <am_ctimer_isr>:
// Interrupt handler for the CTIMER module.
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
    3238:	b580      	push	{r7, lr}
    323a:	b082      	sub	sp, #8
    323c:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    //
    // Check the timer interrupt status.
    //
    ui32Status = am_hal_ctimer_int_status_get(false);
    323e:	2000      	movs	r0, #0
    3240:	f001 f9d8 	bl	45f4 <am_hal_ctimer_int_status_get>
    3244:	6078      	str	r0, [r7, #4]
    am_hal_ctimer_int_clear(ui32Status);
    3246:	6878      	ldr	r0, [r7, #4]
    3248:	f001 f9ce 	bl	45e8 <am_hal_ctimer_int_clear>

    //
    // Run handlers for the various possible timer events.
    //
    am_hal_ctimer_int_service(ui32Status);
    324c:	6878      	ldr	r0, [r7, #4]
    324e:	f001 f92d 	bl	44ac <am_hal_ctimer_int_service>
}
    3252:	bf00      	nop
    3254:	3708      	adds	r7, #8
    3256:	46bd      	mov	sp, r7
    3258:	bd80      	pop	{r7, pc}

0000325a <am_freertos_sleep>:
// Return 0 if this function also incorporates the WFI, else return value same
// as idleTime
//
//*****************************************************************************
uint32_t am_freertos_sleep(uint32_t idleTime)
{
    325a:	b580      	push	{r7, lr}
    325c:	b082      	sub	sp, #8
    325e:	af00      	add	r7, sp, #0
    3260:	6078      	str	r0, [r7, #4]
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    3262:	2001      	movs	r0, #1
    3264:	f001 fd76 	bl	4d54 <am_hal_sysctrl_sleep>
    return 0;
    3268:	2300      	movs	r3, #0
}
    326a:	4618      	mov	r0, r3
    326c:	3708      	adds	r7, #8
    326e:	46bd      	mov	sp, r7
    3270:	bd80      	pop	{r7, pc}

00003272 <am_freertos_wakeup>:
// Recovery function called from FreeRTOS IDLE task, after waking up from Sleep
// Do necessary 'wakeup' operations here, e.g. to power up/enable peripherals etc.
//
//*****************************************************************************
void am_freertos_wakeup(uint32_t idleTime)
{
    3272:	b480      	push	{r7}
    3274:	b083      	sub	sp, #12
    3276:	af00      	add	r7, sp, #0
    3278:	6078      	str	r0, [r7, #4]
    return;
    327a:	bf00      	nop
}
    327c:	370c      	adds	r7, #12
    327e:	46bd      	mov	sp, r7
    3280:	f85d 7b04 	ldr.w	r7, [sp], #4
    3284:	4770      	bx	lr

00003286 <vApplicationMallocFailedHook>:
// FreeRTOS debugging functions.
//
//*****************************************************************************
void
vApplicationMallocFailedHook(void)
{
    3286:	b480      	push	{r7}
    3288:	af00      	add	r7, sp, #0
    // free memory available in the FreeRTOS heap.  pvPortMalloc() is called
    // internally by FreeRTOS API functions that create tasks, queues, software
    // timers, and semaphores.  The size of the FreeRTOS heap is set by the
    // configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h.
    //
    while (1);
    328a:	e7fe      	b.n	328a <vApplicationMallocFailedHook+0x4>

0000328c <vApplicationStackOverflowHook>:
}

void
vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
    328c:	b480      	push	{r7}
    328e:	b083      	sub	sp, #12
    3290:	af00      	add	r7, sp, #0
    3292:	6078      	str	r0, [r7, #4]
    3294:	6039      	str	r1, [r7, #0]
    // configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
    // function is called if a stack overflow is detected.
    //
    while (1)
    {
        __asm("BKPT #0\n") ; // Break into the debugger
    3296:	be00      	bkpt	0x0000
    3298:	e7fd      	b.n	3296 <vApplicationStackOverflowHook+0xa>
	...

0000329c <setup_task>:
// features.
//
//*****************************************************************************
void
setup_task(void *pvParameters)
{
    329c:	b580      	push	{r7, lr}
    329e:	b084      	sub	sp, #16
    32a0:	af02      	add	r7, sp, #8
    32a2:	6078      	str	r0, [r7, #4]
    //
    // Print a debug message.
    //
    am_util_debug_printf("Running setup tasks...\r\n");
    32a4:	480a      	ldr	r0, [pc, #40]	; (32d0 <setup_task+0x34>)
    32a6:	f000 ff8b 	bl	41c0 <am_util_stdio_printf>

    //
    // Run setup functions.
    //
    LedTaskSetup();
    32aa:	f7ff fe77 	bl	2f9c <LedTaskSetup>
    disable_print_interface();
    32ae:	f7ff fd99 	bl	2de4 <disable_print_interface>
    //
    // Create the functional tasks
    //
    xTaskCreate(LedTask, "LEDTask", 512, 0, 3, &led_task_handle);
    32b2:	4b08      	ldr	r3, [pc, #32]	; (32d4 <setup_task+0x38>)
    32b4:	9301      	str	r3, [sp, #4]
    32b6:	2303      	movs	r3, #3
    32b8:	9300      	str	r3, [sp, #0]
    32ba:	2300      	movs	r3, #0
    32bc:	f44f 7200 	mov.w	r2, #512	; 0x200
    32c0:	4905      	ldr	r1, [pc, #20]	; (32d8 <setup_task+0x3c>)
    32c2:	4806      	ldr	r0, [pc, #24]	; (32dc <setup_task+0x40>)
    32c4:	f7fe f95c 	bl	1580 <xTaskCreate>
    //
    // The setup operations are complete, so suspend the setup task now.
    //
    vTaskSuspend(NULL);
    32c8:	2000      	movs	r0, #0
    32ca:	f7fe fa7d 	bl	17c8 <vTaskSuspend>

    while (1);
    32ce:	e7fe      	b.n	32ce <setup_task+0x32>
    32d0:	00004fec 	.word	0x00004fec
    32d4:	10006584 	.word	0x10006584
    32d8:	00005008 	.word	0x00005008
    32dc:	000031d5 	.word	0x000031d5

000032e0 <run_tasks>:
// Initializes all tasks
//
//*****************************************************************************
void
run_tasks(void)
{
    32e0:	b580      	push	{r7, lr}
    32e2:	b082      	sub	sp, #8
    32e4:	af02      	add	r7, sp, #8
    //

    //
    // Create essential tasks.
    //
    xTaskCreate(setup_task, "Setup", 128, 0, 3, &xSetupTask);
    32e6:	4b07      	ldr	r3, [pc, #28]	; (3304 <run_tasks+0x24>)
    32e8:	9301      	str	r3, [sp, #4]
    32ea:	2303      	movs	r3, #3
    32ec:	9300      	str	r3, [sp, #0]
    32ee:	2300      	movs	r3, #0
    32f0:	2280      	movs	r2, #128	; 0x80
    32f2:	4905      	ldr	r1, [pc, #20]	; (3308 <run_tasks+0x28>)
    32f4:	4805      	ldr	r0, [pc, #20]	; (330c <run_tasks+0x2c>)
    32f6:	f7fe f943 	bl	1580 <xTaskCreate>


    //
    // Start the scheduler.
    //
    vTaskStartScheduler();
    32fa:	f7fe fac7 	bl	188c <vTaskStartScheduler>
}
    32fe:	bf00      	nop
    3300:	46bd      	mov	sp, r7
    3302:	bd80      	pop	{r7, pc}
    3304:	10006588 	.word	0x10006588
    3308:	00005010 	.word	0x00005010
    330c:	0000329d 	.word	0x0000329d

00003310 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    3310:	4811      	ldr	r0, [pc, #68]	; (3358 <zero_loop+0x12>)
    3312:	4912      	ldr	r1, [pc, #72]	; (335c <zero_loop+0x16>)
    3314:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    3316:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    331a:	4811      	ldr	r0, [pc, #68]	; (3360 <zero_loop+0x1a>)
    331c:	6801      	ldr	r1, [r0, #0]
    331e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    3322:	6001      	str	r1, [r0, #0]
    3324:	f3bf 8f4f 	dsb	sy
    3328:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    332c:	480d      	ldr	r0, [pc, #52]	; (3364 <zero_loop+0x1e>)
    332e:	490e      	ldr	r1, [pc, #56]	; (3368 <zero_loop+0x22>)
    3330:	4a0e      	ldr	r2, [pc, #56]	; (336c <zero_loop+0x26>)

00003332 <copy_loop>:
    3332:	f850 3b04 	ldr.w	r3, [r0], #4
    3336:	f841 3b04 	str.w	r3, [r1], #4
    333a:	4291      	cmp	r1, r2
    333c:	dbf9      	blt.n	3332 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    333e:	480c      	ldr	r0, [pc, #48]	; (3370 <zero_loop+0x2a>)
    3340:	490c      	ldr	r1, [pc, #48]	; (3374 <zero_loop+0x2e>)
    3342:	f04f 0200 	mov.w	r2, #0

00003346 <zero_loop>:
    3346:	4288      	cmp	r0, r1
    3348:	bfb8      	it	lt
    334a:	f840 2b04 	strlt.w	r2, [r0], #4
    334e:	dbfa      	blt.n	3346 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    3350:	f7ff fd50 	bl	2df4 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    3354:	be00      	bkpt	0x0000
}
    3356:	bf00      	nop
    3358:	e000ed08 	.word	0xe000ed08
    335c:	00000000 	.word	0x00000000
    3360:	e000ed88 	.word	0xe000ed88
    3364:	000050d0 	.word	0x000050d0
    3368:	10002300 	.word	0x10002300
    336c:	10002330 	.word	0x10002330
    3370:	10002330 	.word	0x10002330
    3374:	100066d0 	.word	0x100066d0

00003378 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
    3378:	b480      	push	{r7}
    337a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    337c:	e7fe      	b.n	337c <am_nmi_isr+0x4>

0000337e <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    337e:	b480      	push	{r7}
    3380:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    3382:	e7fe      	b.n	3382 <am_adc_isr+0x4>

00003384 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    3384:	b580      	push	{r7, lr}
    3386:	b084      	sub	sp, #16
    3388:	af00      	add	r7, sp, #0
    338a:	6078      	str	r0, [r7, #4]
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
    338c:	f001 f874 	bl	4478 <am_hal_clkgen_sysclk_get>
    3390:	60f8      	str	r0, [r7, #12]
#endif
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    3392:	68fb      	ldr	r3, [r7, #12]
    3394:	4a07      	ldr	r2, [pc, #28]	; (33b4 <am_util_delay_ms+0x30>)
    3396:	fba2 2303 	umull	r2, r3, r2, r3
    339a:	099b      	lsrs	r3, r3, #6
    339c:	687a      	ldr	r2, [r7, #4]
    339e:	fb02 f303 	mul.w	r3, r2, r3
    33a2:	60bb      	str	r3, [r7, #8]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    33a4:	68b8      	ldr	r0, [r7, #8]
    33a6:	f001 f941 	bl	462c <am_hal_flash_delay>
}
    33aa:	bf00      	nop
    33ac:	3710      	adds	r7, #16
    33ae:	46bd      	mov	sp, r7
    33b0:	bd80      	pop	{r7, pc}
    33b2:	bf00      	nop
    33b4:	057619f1 	.word	0x057619f1

000033b8 <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
    33b8:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
    33ba:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
    33bc:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    33be:	f000 f809 	bl	33d4 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
    33c2:	bd01      	pop	{r0, pc}
}
    33c4:	bf00      	nop
    33c6:	4618      	mov	r0, r3

000033c8 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    33c8:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    33ca:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    33cc:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    33ce:	4770      	bx	lr
}
    33d0:	bf00      	nop
    33d2:	4618      	mov	r0, r3

000033d4 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    33d4:	b580      	push	{r7, lr}
    33d6:	b096      	sub	sp, #88	; 0x58
    33d8:	af00      	add	r7, sp, #0
    33da:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    33dc:	f107 030c 	add.w	r3, r7, #12
    33e0:	2200      	movs	r2, #0
    33e2:	601a      	str	r2, [r3, #0]
    33e4:	605a      	str	r2, [r3, #4]
    33e6:	609a      	str	r2, [r3, #8]
    33e8:	60da      	str	r2, [r3, #12]
    33ea:	611a      	str	r2, [r3, #16]
    33ec:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    33ee:	2300      	movs	r3, #0
    33f0:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    33f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    33f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    33f6:	4b2e      	ldr	r3, [pc, #184]	; (34b0 <am_util_faultisr_collect_data+0xdc>)
    33f8:	681b      	ldr	r3, [r3, #0]
    33fa:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    33fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    33fe:	b2db      	uxtb	r3, r3
    3400:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    3404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3406:	0a1b      	lsrs	r3, r3, #8
    3408:	b2db      	uxtb	r3, r3
    340a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    340e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3410:	0c1b      	lsrs	r3, r3, #16
    3412:	b29b      	uxth	r3, r3
    3414:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    3418:	4b26      	ldr	r3, [pc, #152]	; (34b4 <am_util_faultisr_collect_data+0xe0>)
    341a:	681b      	ldr	r3, [r3, #0]
    341c:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    341e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    3422:	b2db      	uxtb	r3, r3
    3424:	f003 0302 	and.w	r3, r3, #2
    3428:	2b00      	cmp	r3, #0
    342a:	d005      	beq.n	3438 <am_util_faultisr_collect_data+0x64>
    342c:	6879      	ldr	r1, [r7, #4]
    342e:	2006      	movs	r0, #6
    3430:	f7ff ffca 	bl	33c8 <getStackedReg>
    3434:	4603      	mov	r3, r0
    3436:	e001      	b.n	343c <am_util_faultisr_collect_data+0x68>
    3438:	f04f 33ff 	mov.w	r3, #4294967295
    343c:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    343e:	6879      	ldr	r1, [r7, #4]
    3440:	2000      	movs	r0, #0
    3442:	f7ff ffc1 	bl	33c8 <getStackedReg>
    3446:	4603      	mov	r3, r0
    3448:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    344a:	6879      	ldr	r1, [r7, #4]
    344c:	2001      	movs	r0, #1
    344e:	f7ff ffbb 	bl	33c8 <getStackedReg>
    3452:	4603      	mov	r3, r0
    3454:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    3456:	6879      	ldr	r1, [r7, #4]
    3458:	2002      	movs	r0, #2
    345a:	f7ff ffb5 	bl	33c8 <getStackedReg>
    345e:	4603      	mov	r3, r0
    3460:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    3462:	6879      	ldr	r1, [r7, #4]
    3464:	2003      	movs	r0, #3
    3466:	f7ff ffaf 	bl	33c8 <getStackedReg>
    346a:	4603      	mov	r3, r0
    346c:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    346e:	6879      	ldr	r1, [r7, #4]
    3470:	2004      	movs	r0, #4
    3472:	f7ff ffa9 	bl	33c8 <getStackedReg>
    3476:	4603      	mov	r3, r0
    3478:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    347a:	6879      	ldr	r1, [r7, #4]
    347c:	2005      	movs	r0, #5
    347e:	f7ff ffa3 	bl	33c8 <getStackedReg>
    3482:	4603      	mov	r3, r0
    3484:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    3486:	6879      	ldr	r1, [r7, #4]
    3488:	2006      	movs	r0, #6
    348a:	f7ff ff9d 	bl	33c8 <getStackedReg>
    348e:	4603      	mov	r3, r0
    3490:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    3492:	6879      	ldr	r1, [r7, #4]
    3494:	2007      	movs	r0, #7
    3496:	f7ff ff97 	bl	33c8 <getStackedReg>
    349a:	4603      	mov	r3, r0
    349c:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
    349e:	f107 030c 	add.w	r3, r7, #12
    34a2:	4618      	mov	r0, r3
    34a4:	f001 fa36 	bl	4914 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
    34a8:	2300      	movs	r3, #0
    34aa:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    34ac:	e7fe      	b.n	34ac <am_util_faultisr_collect_data+0xd8>
    34ae:	bf00      	nop
    34b0:	e000ed28 	.word	0xe000ed28
    34b4:	e000ed38 	.word	0xe000ed38

000034b8 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    34b8:	b480      	push	{r7}
    34ba:	b083      	sub	sp, #12
    34bc:	af00      	add	r7, sp, #0
    34be:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    34c0:	4a04      	ldr	r2, [pc, #16]	; (34d4 <am_util_stdio_printf_init+0x1c>)
    34c2:	687b      	ldr	r3, [r7, #4]
    34c4:	6013      	str	r3, [r2, #0]
}
    34c6:	bf00      	nop
    34c8:	370c      	adds	r7, #12
    34ca:	46bd      	mov	sp, r7
    34cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    34d0:	4770      	bx	lr
    34d2:	bf00      	nop
    34d4:	1000658c 	.word	0x1000658c

000034d8 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    34d8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    34dc:	b096      	sub	sp, #88	; 0x58
    34de:	af00      	add	r7, sp, #0
    34e0:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    34e4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    34e8:	0025      	movs	r5, r4
    34ea:	2600      	movs	r6, #0
    34ec:	ea55 0306 	orrs.w	r3, r5, r6
    34f0:	f000 80a0 	beq.w	3634 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    34f4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    34f8:	0862      	lsrs	r2, r4, #1
    34fa:	ea4f 0133 	mov.w	r1, r3, rrx
    34fe:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    3502:	ea4f 0893 	mov.w	r8, r3, lsr #2
    3506:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
    350a:	ea4f 0994 	mov.w	r9, r4, lsr #2
    350e:	eb11 0308 	adds.w	r3, r1, r8
    3512:	eb42 0409 	adc.w	r4, r2, r9
    3516:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
    351a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    351e:	ea4f 1a13 	mov.w	sl, r3, lsr #4
    3522:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
    3526:	ea4f 1b14 	mov.w	fp, r4, lsr #4
    352a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    352e:	eb13 030a 	adds.w	r3, r3, sl
    3532:	eb44 040b 	adc.w	r4, r4, fp
    3536:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
    353a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    353e:	0a1a      	lsrs	r2, r3, #8
    3540:	62ba      	str	r2, [r7, #40]	; 0x28
    3542:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3544:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    3548:	62ba      	str	r2, [r7, #40]	; 0x28
    354a:	0a23      	lsrs	r3, r4, #8
    354c:	62fb      	str	r3, [r7, #44]	; 0x2c
    354e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    3552:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
    3556:	18c9      	adds	r1, r1, r3
    3558:	eb42 0204 	adc.w	r2, r2, r4
    355c:	460b      	mov	r3, r1
    355e:	4614      	mov	r4, r2
    3560:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
    3564:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    3568:	0c1a      	lsrs	r2, r3, #16
    356a:	623a      	str	r2, [r7, #32]
    356c:	6a3a      	ldr	r2, [r7, #32]
    356e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    3572:	623a      	str	r2, [r7, #32]
    3574:	0c23      	lsrs	r3, r4, #16
    3576:	627b      	str	r3, [r7, #36]	; 0x24
    3578:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    357c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
    3580:	18c9      	adds	r1, r1, r3
    3582:	eb42 0204 	adc.w	r2, r2, r4
    3586:	460b      	mov	r3, r1
    3588:	4614      	mov	r4, r2
    358a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
    358e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    3592:	0023      	movs	r3, r4
    3594:	603b      	str	r3, [r7, #0]
    3596:	2300      	movs	r3, #0
    3598:	607b      	str	r3, [r7, #4]
    359a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    359e:	e897 0006 	ldmia.w	r7, {r1, r2}
    35a2:	18c9      	adds	r1, r1, r3
    35a4:	eb42 0204 	adc.w	r2, r2, r4
    35a8:	460b      	mov	r3, r1
    35aa:	4614      	mov	r4, r2
    35ac:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
    35b0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    35b4:	08da      	lsrs	r2, r3, #3
    35b6:	613a      	str	r2, [r7, #16]
    35b8:	693a      	ldr	r2, [r7, #16]
    35ba:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
    35be:	613a      	str	r2, [r7, #16]
    35c0:	08e3      	lsrs	r3, r4, #3
    35c2:	617b      	str	r3, [r7, #20]
    35c4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    35c8:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
    35cc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    35d0:	460b      	mov	r3, r1
    35d2:	4614      	mov	r4, r2
    35d4:	00a0      	lsls	r0, r4, #2
    35d6:	60f8      	str	r0, [r7, #12]
    35d8:	68f8      	ldr	r0, [r7, #12]
    35da:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    35de:	60f8      	str	r0, [r7, #12]
    35e0:	009b      	lsls	r3, r3, #2
    35e2:	60bb      	str	r3, [r7, #8]
    35e4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    35e8:	185b      	adds	r3, r3, r1
    35ea:	eb44 0402 	adc.w	r4, r4, r2
    35ee:	18db      	adds	r3, r3, r3
    35f0:	eb44 0404 	adc.w	r4, r4, r4
    35f4:	4619      	mov	r1, r3
    35f6:	4622      	mov	r2, r4
    35f8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    35fc:	1a5b      	subs	r3, r3, r1
    35fe:	eb64 0402 	sbc.w	r4, r4, r2
    3602:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
    3606:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    360a:	3306      	adds	r3, #6
    360c:	f144 0400 	adc.w	r4, r4, #0
    3610:	091a      	lsrs	r2, r3, #4
    3612:	61ba      	str	r2, [r7, #24]
    3614:	69ba      	ldr	r2, [r7, #24]
    3616:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
    361a:	61ba      	str	r2, [r7, #24]
    361c:	0923      	lsrs	r3, r4, #4
    361e:	61fb      	str	r3, [r7, #28]
    3620:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    3624:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    3628:	18c9      	adds	r1, r1, r3
    362a:	eb42 0204 	adc.w	r2, r2, r4
    362e:	460b      	mov	r3, r1
    3630:	4614      	mov	r4, r2
    3632:	e029      	b.n	3688 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    3634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3636:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
    3638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    363a:	085a      	lsrs	r2, r3, #1
    363c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    363e:	089b      	lsrs	r3, r3, #2
    3640:	4413      	add	r3, r2
    3642:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
    3644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3646:	091b      	lsrs	r3, r3, #4
    3648:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    364a:	4413      	add	r3, r2
    364c:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
    364e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3650:	0a1b      	lsrs	r3, r3, #8
    3652:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3654:	4413      	add	r3, r2
    3656:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
    3658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    365a:	0c1b      	lsrs	r3, r3, #16
    365c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    365e:	4413      	add	r3, r2
    3660:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
    3662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3664:	08db      	lsrs	r3, r3, #3
    3666:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
    3668:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    366a:	4613      	mov	r3, r2
    366c:	009b      	lsls	r3, r3, #2
    366e:	4413      	add	r3, r2
    3670:	005b      	lsls	r3, r3, #1
    3672:	461a      	mov	r2, r3
    3674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3676:	1a9b      	subs	r3, r3, r2
    3678:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    367a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    367c:	3306      	adds	r3, #6
    367e:	091a      	lsrs	r2, r3, #4
    3680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3682:	4413      	add	r3, r2
    3684:	f04f 0400 	mov.w	r4, #0
    }
}
    3688:	4618      	mov	r0, r3
    368a:	4621      	mov	r1, r4
    368c:	3758      	adds	r7, #88	; 0x58
    368e:	46bd      	mov	sp, r7
    3690:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    3694:	4770      	bx	lr

00003696 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    3696:	b590      	push	{r4, r7, lr}
    3698:	b085      	sub	sp, #20
    369a:	af00      	add	r7, sp, #0
    369c:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    36a0:	683a      	ldr	r2, [r7, #0]
    36a2:	687b      	ldr	r3, [r7, #4]
    36a4:	4313      	orrs	r3, r2
    36a6:	2b00      	cmp	r3, #0
    36a8:	bf0c      	ite	eq
    36aa:	2301      	moveq	r3, #1
    36ac:	2300      	movne	r3, #0
    36ae:	b2db      	uxtb	r3, r3
    36b0:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    36b2:	e008      	b.n	36c6 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    36b4:	e9d7 0100 	ldrd	r0, r1, [r7]
    36b8:	f7ff ff0e 	bl	34d8 <divu64_10>
    36bc:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    36c0:	68fb      	ldr	r3, [r7, #12]
    36c2:	3301      	adds	r3, #1
    36c4:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    36c6:	e897 0018 	ldmia.w	r7, {r3, r4}
    36ca:	4323      	orrs	r3, r4
    36cc:	d1f2      	bne.n	36b4 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    36ce:	68fb      	ldr	r3, [r7, #12]
}
    36d0:	4618      	mov	r0, r3
    36d2:	3714      	adds	r7, #20
    36d4:	46bd      	mov	sp, r7
    36d6:	bd90      	pop	{r4, r7, pc}

000036d8 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    36d8:	b590      	push	{r4, r7, lr}
    36da:	b083      	sub	sp, #12
    36dc:	af00      	add	r7, sp, #0
    36de:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    36e2:	e897 0018 	ldmia.w	r7, {r3, r4}
    36e6:	2b00      	cmp	r3, #0
    36e8:	f174 0300 	sbcs.w	r3, r4, #0
    36ec:	da06      	bge.n	36fc <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    36ee:	e897 0018 	ldmia.w	r7, {r3, r4}
    36f2:	425b      	negs	r3, r3
    36f4:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    36f8:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
    36fc:	e897 0018 	ldmia.w	r7, {r3, r4}
    3700:	4618      	mov	r0, r3
    3702:	4621      	mov	r1, r4
    3704:	f7ff ffc7 	bl	3696 <ndigits_in_u64>
    3708:	4603      	mov	r3, r0
}
    370a:	4618      	mov	r0, r3
    370c:	370c      	adds	r7, #12
    370e:	46bd      	mov	sp, r7
    3710:	bd90      	pop	{r4, r7, pc}

00003712 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    3712:	b490      	push	{r4, r7}
    3714:	b084      	sub	sp, #16
    3716:	af00      	add	r7, sp, #0
    3718:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    371c:	6839      	ldr	r1, [r7, #0]
    371e:	687a      	ldr	r2, [r7, #4]
    3720:	430a      	orrs	r2, r1
    3722:	2a00      	cmp	r2, #0
    3724:	bf0c      	ite	eq
    3726:	2201      	moveq	r2, #1
    3728:	2200      	movne	r2, #0
    372a:	b2d2      	uxtb	r2, r2
    372c:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
    372e:	e00a      	b.n	3746 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
    3730:	e897 0006 	ldmia.w	r7, {r1, r2}
    3734:	090b      	lsrs	r3, r1, #4
    3736:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    373a:	0914      	lsrs	r4, r2, #4
    373c:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
    3740:	68fa      	ldr	r2, [r7, #12]
    3742:	3201      	adds	r2, #1
    3744:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
    3746:	e897 0006 	ldmia.w	r7, {r1, r2}
    374a:	430a      	orrs	r2, r1
    374c:	d1f0      	bne.n	3730 <ndigits_in_hex+0x1e>
    }

    return iDigits;
    374e:	68fb      	ldr	r3, [r7, #12]
}
    3750:	4618      	mov	r0, r3
    3752:	3710      	adds	r7, #16
    3754:	46bd      	mov	sp, r7
    3756:	bc90      	pop	{r4, r7}
    3758:	4770      	bx	lr

0000375a <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    375a:	b480      	push	{r7}
    375c:	b087      	sub	sp, #28
    375e:	af00      	add	r7, sp, #0
    3760:	6078      	str	r0, [r7, #4]
    3762:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    3764:	2300      	movs	r3, #0
    3766:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    3768:	2300      	movs	r3, #0
    376a:	613b      	str	r3, [r7, #16]
    376c:	2300      	movs	r3, #0
    376e:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    3770:	687b      	ldr	r3, [r7, #4]
    3772:	781b      	ldrb	r3, [r3, #0]
    3774:	2b2d      	cmp	r3, #45	; 0x2d
    3776:	d11b      	bne.n	37b0 <decstr_to_int+0x56>
    {
        bNeg = true;
    3778:	2301      	movs	r3, #1
    377a:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    377c:	687b      	ldr	r3, [r7, #4]
    377e:	3301      	adds	r3, #1
    3780:	607b      	str	r3, [r7, #4]
        uCnt++;
    3782:	68fb      	ldr	r3, [r7, #12]
    3784:	3301      	adds	r3, #1
    3786:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    3788:	e012      	b.n	37b0 <decstr_to_int+0x56>
    {
        ++uCnt;
    378a:	68fb      	ldr	r3, [r7, #12]
    378c:	3301      	adds	r3, #1
    378e:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    3790:	693a      	ldr	r2, [r7, #16]
    3792:	4613      	mov	r3, r2
    3794:	009b      	lsls	r3, r3, #2
    3796:	4413      	add	r3, r2
    3798:	005b      	lsls	r3, r3, #1
    379a:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    379c:	687b      	ldr	r3, [r7, #4]
    379e:	781b      	ldrb	r3, [r3, #0]
    37a0:	461a      	mov	r2, r3
    37a2:	693b      	ldr	r3, [r7, #16]
    37a4:	4413      	add	r3, r2
    37a6:	3b30      	subs	r3, #48	; 0x30
    37a8:	613b      	str	r3, [r7, #16]
        pcStr++;
    37aa:	687b      	ldr	r3, [r7, #4]
    37ac:	3301      	adds	r3, #1
    37ae:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    37b0:	687b      	ldr	r3, [r7, #4]
    37b2:	781b      	ldrb	r3, [r3, #0]
    37b4:	2b2f      	cmp	r3, #47	; 0x2f
    37b6:	d903      	bls.n	37c0 <decstr_to_int+0x66>
    37b8:	687b      	ldr	r3, [r7, #4]
    37ba:	781b      	ldrb	r3, [r3, #0]
    37bc:	2b39      	cmp	r3, #57	; 0x39
    37be:	d9e4      	bls.n	378a <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    37c0:	683b      	ldr	r3, [r7, #0]
    37c2:	2b00      	cmp	r3, #0
    37c4:	d002      	beq.n	37cc <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    37c6:	683b      	ldr	r3, [r7, #0]
    37c8:	68fa      	ldr	r2, [r7, #12]
    37ca:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    37cc:	7dfb      	ldrb	r3, [r7, #23]
    37ce:	2b00      	cmp	r3, #0
    37d0:	d002      	beq.n	37d8 <decstr_to_int+0x7e>
    37d2:	693b      	ldr	r3, [r7, #16]
    37d4:	425b      	negs	r3, r3
    37d6:	e000      	b.n	37da <decstr_to_int+0x80>
    37d8:	693b      	ldr	r3, [r7, #16]
}
    37da:	4618      	mov	r0, r3
    37dc:	371c      	adds	r7, #28
    37de:	46bd      	mov	sp, r7
    37e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    37e4:	4770      	bx	lr

000037e6 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    37e6:	b590      	push	{r4, r7, lr}
    37e8:	b091      	sub	sp, #68	; 0x44
    37ea:	af00      	add	r7, sp, #0
    37ec:	e9c7 0102 	strd	r0, r1, [r7, #8]
    37f0:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    37f2:	2300      	movs	r3, #0
    37f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    37f6:	2300      	movs	r3, #0
    37f8:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    37fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    37fe:	f7ff fe6b 	bl	34d8 <divu64_10>
    3802:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    3806:	68b9      	ldr	r1, [r7, #8]
    3808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    380a:	4613      	mov	r3, r2
    380c:	009b      	lsls	r3, r3, #2
    380e:	4413      	add	r3, r2
    3810:	005b      	lsls	r3, r3, #1
    3812:	1acb      	subs	r3, r1, r3
    3814:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    3816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3818:	1c5a      	adds	r2, r3, #1
    381a:	63fa      	str	r2, [r7, #60]	; 0x3c
    381c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    381e:	b2d2      	uxtb	r2, r2
    3820:	3230      	adds	r2, #48	; 0x30
    3822:	b2d2      	uxtb	r2, r2
    3824:	f107 0140 	add.w	r1, r7, #64	; 0x40
    3828:	440b      	add	r3, r1
    382a:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    382e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    3832:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    3836:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    383a:	4323      	orrs	r3, r4
    383c:	d1dd      	bne.n	37fa <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    383e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3840:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    3842:	687b      	ldr	r3, [r7, #4]
    3844:	2b00      	cmp	r3, #0
    3846:	d011      	beq.n	386c <uint64_to_str+0x86>
    {
        while ( ix-- )
    3848:	e008      	b.n	385c <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    384a:	687b      	ldr	r3, [r7, #4]
    384c:	1c5a      	adds	r2, r3, #1
    384e:	607a      	str	r2, [r7, #4]
    3850:	f107 0110 	add.w	r1, r7, #16
    3854:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3856:	440a      	add	r2, r1
    3858:	7812      	ldrb	r2, [r2, #0]
    385a:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    385c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    385e:	1e5a      	subs	r2, r3, #1
    3860:	63fa      	str	r2, [r7, #60]	; 0x3c
    3862:	2b00      	cmp	r3, #0
    3864:	d1f1      	bne.n	384a <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    3866:	687b      	ldr	r3, [r7, #4]
    3868:	2200      	movs	r2, #0
    386a:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    386c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    386e:	4618      	mov	r0, r3
    3870:	3744      	adds	r7, #68	; 0x44
    3872:	46bd      	mov	sp, r7
    3874:	bd90      	pop	{r4, r7, pc}

00003876 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    3876:	b4b0      	push	{r4, r5, r7}
    3878:	b08d      	sub	sp, #52	; 0x34
    387a:	af00      	add	r7, sp, #0
    387c:	e9c7 0102 	strd	r0, r1, [r7, #8]
    3880:	607a      	str	r2, [r7, #4]
    3882:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    3884:	2300      	movs	r3, #0
    3886:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    3888:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    388c:	4313      	orrs	r3, r2
    388e:	d131      	bne.n	38f4 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
    3890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3892:	1c5a      	adds	r2, r3, #1
    3894:	62fa      	str	r2, [r7, #44]	; 0x2c
    3896:	f107 0230 	add.w	r2, r7, #48	; 0x30
    389a:	4413      	add	r3, r2
    389c:	2230      	movs	r2, #48	; 0x30
    389e:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    38a2:	e027      	b.n	38f4 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
    38a4:	7a3b      	ldrb	r3, [r7, #8]
    38a6:	f003 030f 	and.w	r3, r3, #15
    38aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    38ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    38b2:	2b09      	cmp	r3, #9
    38b4:	d90a      	bls.n	38cc <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    38b6:	78fb      	ldrb	r3, [r7, #3]
    38b8:	2b00      	cmp	r3, #0
    38ba:	d001      	beq.n	38c0 <uint64_to_hexstr+0x4a>
    38bc:	2227      	movs	r2, #39	; 0x27
    38be:	e000      	b.n	38c2 <uint64_to_hexstr+0x4c>
    38c0:	2207      	movs	r2, #7
    38c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    38c6:	4413      	add	r3, r2
    38c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    38cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38ce:	1c5a      	adds	r2, r3, #1
    38d0:	62fa      	str	r2, [r7, #44]	; 0x2c
    38d2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    38d6:	3230      	adds	r2, #48	; 0x30
    38d8:	b2d2      	uxtb	r2, r2
    38da:	f107 0130 	add.w	r1, r7, #48	; 0x30
    38de:	440b      	add	r3, r1
    38e0:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    38e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    38e8:	0914      	lsrs	r4, r2, #4
    38ea:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    38ee:	091d      	lsrs	r5, r3, #4
    38f0:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
    38f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    38f8:	4313      	orrs	r3, r2
    38fa:	d1d3      	bne.n	38a4 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    38fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38fe:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    3900:	687b      	ldr	r3, [r7, #4]
    3902:	2b00      	cmp	r3, #0
    3904:	d011      	beq.n	392a <uint64_to_hexstr+0xb4>
    {
        while (ix--)
    3906:	e008      	b.n	391a <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
    3908:	687b      	ldr	r3, [r7, #4]
    390a:	1c5a      	adds	r2, r3, #1
    390c:	607a      	str	r2, [r7, #4]
    390e:	f107 0110 	add.w	r1, r7, #16
    3912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3914:	440a      	add	r2, r1
    3916:	7812      	ldrb	r2, [r2, #0]
    3918:	701a      	strb	r2, [r3, #0]
        while (ix--)
    391a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    391c:	1e5a      	subs	r2, r3, #1
    391e:	62fa      	str	r2, [r7, #44]	; 0x2c
    3920:	2b00      	cmp	r3, #0
    3922:	d1f1      	bne.n	3908 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    3924:	687b      	ldr	r3, [r7, #4]
    3926:	2200      	movs	r2, #0
    3928:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    392c:	4618      	mov	r0, r3
    392e:	3734      	adds	r7, #52	; 0x34
    3930:	46bd      	mov	sp, r7
    3932:	bcb0      	pop	{r4, r5, r7}
    3934:	4770      	bx	lr

00003936 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    3936:	b480      	push	{r7}
    3938:	b085      	sub	sp, #20
    393a:	af00      	add	r7, sp, #0
    393c:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    393e:	2300      	movs	r3, #0
    3940:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    3942:	687b      	ldr	r3, [r7, #4]
    3944:	2b00      	cmp	r3, #0
    3946:	d104      	bne.n	3952 <simple_strlen+0x1c>
    {
        return ui32RetVal;
    3948:	68fb      	ldr	r3, [r7, #12]
    394a:	e009      	b.n	3960 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    394c:	68fb      	ldr	r3, [r7, #12]
    394e:	3301      	adds	r3, #1
    3950:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    3952:	687b      	ldr	r3, [r7, #4]
    3954:	1c5a      	adds	r2, r3, #1
    3956:	607a      	str	r2, [r7, #4]
    3958:	781b      	ldrb	r3, [r3, #0]
    395a:	2b00      	cmp	r3, #0
    395c:	d1f6      	bne.n	394c <simple_strlen+0x16>
    }
    return ui32RetVal;
    395e:	68fb      	ldr	r3, [r7, #12]
}
    3960:	4618      	mov	r0, r3
    3962:	3714      	adds	r7, #20
    3964:	46bd      	mov	sp, r7
    3966:	f85d 7b04 	ldr.w	r7, [sp], #4
    396a:	4770      	bx	lr

0000396c <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    396c:	b480      	push	{r7}
    396e:	b087      	sub	sp, #28
    3970:	af00      	add	r7, sp, #0
    3972:	60f8      	str	r0, [r7, #12]
    3974:	460b      	mov	r3, r1
    3976:	607a      	str	r2, [r7, #4]
    3978:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    397a:	2300      	movs	r3, #0
    397c:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    397e:	687b      	ldr	r3, [r7, #4]
    3980:	2b00      	cmp	r3, #0
    3982:	dc0c      	bgt.n	399e <padbuffer+0x32>
    {
        return i32Cnt;
    3984:	697b      	ldr	r3, [r7, #20]
    3986:	e010      	b.n	39aa <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    3988:	68fb      	ldr	r3, [r7, #12]
    398a:	2b00      	cmp	r3, #0
    398c:	d004      	beq.n	3998 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    398e:	68fb      	ldr	r3, [r7, #12]
    3990:	1c5a      	adds	r2, r3, #1
    3992:	60fa      	str	r2, [r7, #12]
    3994:	7afa      	ldrb	r2, [r7, #11]
    3996:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    3998:	697b      	ldr	r3, [r7, #20]
    399a:	3301      	adds	r3, #1
    399c:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    399e:	687b      	ldr	r3, [r7, #4]
    39a0:	1e5a      	subs	r2, r3, #1
    39a2:	607a      	str	r2, [r7, #4]
    39a4:	2b00      	cmp	r3, #0
    39a6:	d1ef      	bne.n	3988 <padbuffer+0x1c>
    }

    return i32Cnt;
    39a8:	697b      	ldr	r3, [r7, #20]
}
    39aa:	4618      	mov	r0, r3
    39ac:	371c      	adds	r7, #28
    39ae:	46bd      	mov	sp, r7
    39b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    39b4:	4770      	bx	lr
	...

000039b8 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    39b8:	b590      	push	{r4, r7, lr}
    39ba:	b08f      	sub	sp, #60	; 0x3c
    39bc:	af00      	add	r7, sp, #0
    39be:	60f8      	str	r0, [r7, #12]
    39c0:	60b9      	str	r1, [r7, #8]
    39c2:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    39c4:	68bb      	ldr	r3, [r7, #8]
    39c6:	681b      	ldr	r3, [r3, #0]
    39c8:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    39ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    39cc:	2b03      	cmp	r3, #3
    39ce:	dc02      	bgt.n	39d6 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    39d0:	f06f 0302 	mvn.w	r3, #2
    39d4:	e0e7      	b.n	3ba6 <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
    39d6:	edd7 7a03 	vldr	s15, [r7, #12]
    39da:	eef5 7a40 	vcmp.f32	s15, #0.0
    39de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    39e2:	d104      	bne.n	39ee <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    39e4:	68bb      	ldr	r3, [r7, #8]
    39e6:	4a72      	ldr	r2, [pc, #456]	; (3bb0 <ftoa+0x1f8>)
    39e8:	601a      	str	r2, [r3, #0]
        return 3;
    39ea:	2303      	movs	r3, #3
    39ec:	e0db      	b.n	3ba6 <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
    39ee:	68bb      	ldr	r3, [r7, #8]
    39f0:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    39f2:	68fb      	ldr	r3, [r7, #12]
    39f4:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    39f6:	693b      	ldr	r3, [r7, #16]
    39f8:	15db      	asrs	r3, r3, #23
    39fa:	b2db      	uxtb	r3, r3
    39fc:	3b7f      	subs	r3, #127	; 0x7f
    39fe:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    3a00:	693b      	ldr	r3, [r7, #16]
    3a02:	f3c3 0316 	ubfx	r3, r3, #0, #23
    3a06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    3a0a:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    3a0c:	2300      	movs	r3, #0
    3a0e:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    3a10:	2300      	movs	r3, #0
    3a12:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    3a14:	69fb      	ldr	r3, [r7, #28]
    3a16:	2b1e      	cmp	r3, #30
    3a18:	dd02      	ble.n	3a20 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    3a1a:	f06f 0301 	mvn.w	r3, #1
    3a1e:	e0c2      	b.n	3ba6 <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
    3a20:	69fb      	ldr	r3, [r7, #28]
    3a22:	f113 0f17 	cmn.w	r3, #23
    3a26:	da02      	bge.n	3a2e <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    3a28:	f04f 33ff 	mov.w	r3, #4294967295
    3a2c:	e0bb      	b.n	3ba6 <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
    3a2e:	69fb      	ldr	r3, [r7, #28]
    3a30:	2b16      	cmp	r3, #22
    3a32:	dd06      	ble.n	3a42 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    3a34:	69fb      	ldr	r3, [r7, #28]
    3a36:	3b17      	subs	r3, #23
    3a38:	69ba      	ldr	r2, [r7, #24]
    3a3a:	fa02 f303 	lsl.w	r3, r2, r3
    3a3e:	637b      	str	r3, [r7, #52]	; 0x34
    3a40:	e01a      	b.n	3a78 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    3a42:	69fb      	ldr	r3, [r7, #28]
    3a44:	2b00      	cmp	r3, #0
    3a46:	db0f      	blt.n	3a68 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    3a48:	69fb      	ldr	r3, [r7, #28]
    3a4a:	f1c3 0317 	rsb	r3, r3, #23
    3a4e:	69ba      	ldr	r2, [r7, #24]
    3a50:	fa42 f303 	asr.w	r3, r2, r3
    3a54:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    3a56:	69fb      	ldr	r3, [r7, #28]
    3a58:	3301      	adds	r3, #1
    3a5a:	69ba      	ldr	r2, [r7, #24]
    3a5c:	fa02 f303 	lsl.w	r3, r2, r3
    3a60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3a64:	633b      	str	r3, [r7, #48]	; 0x30
    3a66:	e007      	b.n	3a78 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    3a68:	69bb      	ldr	r3, [r7, #24]
    3a6a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    3a6e:	69fb      	ldr	r3, [r7, #28]
    3a70:	43db      	mvns	r3, r3
    3a72:	fa42 f303 	asr.w	r3, r2, r3
    3a76:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    3a78:	693b      	ldr	r3, [r7, #16]
    3a7a:	2b00      	cmp	r3, #0
    3a7c:	da04      	bge.n	3a88 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    3a7e:	68bb      	ldr	r3, [r7, #8]
    3a80:	1c5a      	adds	r2, r3, #1
    3a82:	60ba      	str	r2, [r7, #8]
    3a84:	222d      	movs	r2, #45	; 0x2d
    3a86:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    3a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a8a:	2b00      	cmp	r3, #0
    3a8c:	d105      	bne.n	3a9a <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    3a8e:	68bb      	ldr	r3, [r7, #8]
    3a90:	1c5a      	adds	r2, r3, #1
    3a92:	60ba      	str	r2, [r7, #8]
    3a94:	2230      	movs	r2, #48	; 0x30
    3a96:	701a      	strb	r2, [r3, #0]
    3a98:	e021      	b.n	3ade <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    3a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a9c:	2b00      	cmp	r3, #0
    3a9e:	dd08      	ble.n	3ab2 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    3aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3aa2:	ea4f 74e3 	mov.w	r4, r3, asr #31
    3aa6:	68ba      	ldr	r2, [r7, #8]
    3aa8:	4618      	mov	r0, r3
    3aaa:	4621      	mov	r1, r4
    3aac:	f7ff fe9b 	bl	37e6 <uint64_to_str>
    3ab0:	e011      	b.n	3ad6 <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    3ab2:	68bb      	ldr	r3, [r7, #8]
    3ab4:	1c5a      	adds	r2, r3, #1
    3ab6:	60ba      	str	r2, [r7, #8]
    3ab8:	222d      	movs	r2, #45	; 0x2d
    3aba:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    3abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3abe:	425b      	negs	r3, r3
    3ac0:	ea4f 74e3 	mov.w	r4, r3, asr #31
    3ac4:	68ba      	ldr	r2, [r7, #8]
    3ac6:	4618      	mov	r0, r3
    3ac8:	4621      	mov	r1, r4
    3aca:	f7ff fe8c 	bl	37e6 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    3ace:	e002      	b.n	3ad6 <ftoa+0x11e>
        {
            pcBuf++;
    3ad0:	68bb      	ldr	r3, [r7, #8]
    3ad2:	3301      	adds	r3, #1
    3ad4:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    3ad6:	68bb      	ldr	r3, [r7, #8]
    3ad8:	781b      	ldrb	r3, [r3, #0]
    3ada:	2b00      	cmp	r3, #0
    3adc:	d1f8      	bne.n	3ad0 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    3ade:	68bb      	ldr	r3, [r7, #8]
    3ae0:	1c5a      	adds	r2, r3, #1
    3ae2:	60ba      	str	r2, [r7, #8]
    3ae4:	222e      	movs	r2, #46	; 0x2e
    3ae6:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    3ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3aea:	2b00      	cmp	r3, #0
    3aec:	d105      	bne.n	3afa <ftoa+0x142>
    {
        *pcBuf++ = '0';
    3aee:	68bb      	ldr	r3, [r7, #8]
    3af0:	1c5a      	adds	r2, r3, #1
    3af2:	60ba      	str	r2, [r7, #8]
    3af4:	2230      	movs	r2, #48	; 0x30
    3af6:	701a      	strb	r2, [r3, #0]
    3af8:	e04f      	b.n	3b9a <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    3afa:	68ba      	ldr	r2, [r7, #8]
    3afc:	6a3b      	ldr	r3, [r7, #32]
    3afe:	1ad3      	subs	r3, r2, r3
    3b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3b02:	1ad3      	subs	r3, r2, r3
    3b04:	3b01      	subs	r3, #1
    3b06:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    3b08:	697a      	ldr	r2, [r7, #20]
    3b0a:	687b      	ldr	r3, [r7, #4]
    3b0c:	4293      	cmp	r3, r2
    3b0e:	bfa8      	it	ge
    3b10:	4613      	movge	r3, r2
    3b12:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    3b14:	2300      	movs	r3, #0
    3b16:	62bb      	str	r3, [r7, #40]	; 0x28
    3b18:	e015      	b.n	3b46 <ftoa+0x18e>
        {
            i32FracPart *= 10;
    3b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3b1c:	4613      	mov	r3, r2
    3b1e:	009b      	lsls	r3, r3, #2
    3b20:	4413      	add	r3, r2
    3b22:	005b      	lsls	r3, r3, #1
    3b24:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    3b26:	68bb      	ldr	r3, [r7, #8]
    3b28:	1c5a      	adds	r2, r3, #1
    3b2a:	60ba      	str	r2, [r7, #8]
    3b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3b2e:	1612      	asrs	r2, r2, #24
    3b30:	b2d2      	uxtb	r2, r2
    3b32:	3230      	adds	r2, #48	; 0x30
    3b34:	b2d2      	uxtb	r2, r2
    3b36:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    3b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3b3a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3b3e:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    3b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3b42:	3301      	adds	r3, #1
    3b44:	62bb      	str	r3, [r7, #40]	; 0x28
    3b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3b48:	697b      	ldr	r3, [r7, #20]
    3b4a:	429a      	cmp	r2, r3
    3b4c:	dbe5      	blt.n	3b1a <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    3b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3b50:	4613      	mov	r3, r2
    3b52:	009b      	lsls	r3, r3, #2
    3b54:	4413      	add	r3, r2
    3b56:	005b      	lsls	r3, r3, #1
    3b58:	161b      	asrs	r3, r3, #24
    3b5a:	2b04      	cmp	r3, #4
    3b5c:	dd1d      	ble.n	3b9a <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    3b5e:	68bb      	ldr	r3, [r7, #8]
    3b60:	3b01      	subs	r3, #1
    3b62:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    3b64:	e015      	b.n	3b92 <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
    3b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b68:	781b      	ldrb	r3, [r3, #0]
    3b6a:	2b2e      	cmp	r3, #46	; 0x2e
    3b6c:	d00e      	beq.n	3b8c <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
    3b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b70:	781b      	ldrb	r3, [r3, #0]
    3b72:	2b39      	cmp	r3, #57	; 0x39
    3b74:	d103      	bne.n	3b7e <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
    3b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b78:	2230      	movs	r2, #48	; 0x30
    3b7a:	701a      	strb	r2, [r3, #0]
    3b7c:	e006      	b.n	3b8c <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
    3b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b80:	781b      	ldrb	r3, [r3, #0]
    3b82:	3301      	adds	r3, #1
    3b84:	b2da      	uxtb	r2, r3
    3b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b88:	701a      	strb	r2, [r3, #0]
                    break;
    3b8a:	e006      	b.n	3b9a <ftoa+0x1e2>
                }
                pcBuftmp--;
    3b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b8e:	3b01      	subs	r3, #1
    3b90:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    3b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3b94:	6a3b      	ldr	r3, [r7, #32]
    3b96:	429a      	cmp	r2, r3
    3b98:	d2e5      	bcs.n	3b66 <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    3b9a:	68bb      	ldr	r3, [r7, #8]
    3b9c:	2200      	movs	r2, #0
    3b9e:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    3ba0:	68ba      	ldr	r2, [r7, #8]
    3ba2:	6a3b      	ldr	r3, [r7, #32]
    3ba4:	1ad3      	subs	r3, r2, r3
} // ftoa()
    3ba6:	4618      	mov	r0, r3
    3ba8:	373c      	adds	r7, #60	; 0x3c
    3baa:	46bd      	mov	sp, r7
    3bac:	bd90      	pop	{r4, r7, pc}
    3bae:	bf00      	nop
    3bb0:	00302e30 	.word	0x00302e30

00003bb4 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    3bb4:	b590      	push	{r4, r7, lr}
    3bb6:	b095      	sub	sp, #84	; 0x54
    3bb8:	af00      	add	r7, sp, #0
    3bba:	60f8      	str	r0, [r7, #12]
    3bbc:	60b9      	str	r1, [r7, #8]
    3bbe:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    3bc0:	2300      	movs	r3, #0
    3bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    3bc4:	2300      	movs	r3, #0
    3bc6:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    3bc8:	e2e3      	b.n	4192 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    3bca:	2306      	movs	r3, #6
    3bcc:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    3bce:	68bb      	ldr	r3, [r7, #8]
    3bd0:	781b      	ldrb	r3, [r3, #0]
    3bd2:	2b25      	cmp	r3, #37	; 0x25
    3bd4:	d01f      	beq.n	3c16 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    3bd6:	68fb      	ldr	r3, [r7, #12]
    3bd8:	2b00      	cmp	r3, #0
    3bda:	d015      	beq.n	3c08 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    3bdc:	68bb      	ldr	r3, [r7, #8]
    3bde:	781b      	ldrb	r3, [r3, #0]
    3be0:	2b0a      	cmp	r3, #10
    3be2:	d10b      	bne.n	3bfc <am_util_stdio_vsprintf+0x48>
    3be4:	4bb1      	ldr	r3, [pc, #708]	; (3eac <am_util_stdio_vsprintf+0x2f8>)
    3be6:	781b      	ldrb	r3, [r3, #0]
    3be8:	2b00      	cmp	r3, #0
    3bea:	d007      	beq.n	3bfc <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    3bec:	68fb      	ldr	r3, [r7, #12]
    3bee:	1c5a      	adds	r2, r3, #1
    3bf0:	60fa      	str	r2, [r7, #12]
    3bf2:	220d      	movs	r2, #13
    3bf4:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    3bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3bf8:	3301      	adds	r3, #1
    3bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    3bfc:	68fb      	ldr	r3, [r7, #12]
    3bfe:	1c5a      	adds	r2, r3, #1
    3c00:	60fa      	str	r2, [r7, #12]
    3c02:	68ba      	ldr	r2, [r7, #8]
    3c04:	7812      	ldrb	r2, [r2, #0]
    3c06:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    3c08:	68bb      	ldr	r3, [r7, #8]
    3c0a:	3301      	adds	r3, #1
    3c0c:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    3c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3c10:	3301      	adds	r3, #1
    3c12:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    3c14:	e2bd      	b.n	4192 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    3c16:	68bb      	ldr	r3, [r7, #8]
    3c18:	3301      	adds	r3, #1
    3c1a:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    3c1c:	2300      	movs	r3, #0
    3c1e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    3c22:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    3c26:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    3c2a:	2320      	movs	r3, #32
    3c2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    3c30:	68bb      	ldr	r3, [r7, #8]
    3c32:	781b      	ldrb	r3, [r3, #0]
    3c34:	2b30      	cmp	r3, #48	; 0x30
    3c36:	d105      	bne.n	3c44 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    3c38:	2330      	movs	r3, #48	; 0x30
    3c3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    3c3e:	68bb      	ldr	r3, [r7, #8]
    3c40:	3301      	adds	r3, #1
    3c42:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    3c44:	f107 0310 	add.w	r3, r7, #16
    3c48:	4619      	mov	r1, r3
    3c4a:	68b8      	ldr	r0, [r7, #8]
    3c4c:	f7ff fd85 	bl	375a <decstr_to_int>
    3c50:	4603      	mov	r3, r0
    3c52:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    3c54:	693b      	ldr	r3, [r7, #16]
    3c56:	68ba      	ldr	r2, [r7, #8]
    3c58:	4413      	add	r3, r2
    3c5a:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    3c5c:	68bb      	ldr	r3, [r7, #8]
    3c5e:	781b      	ldrb	r3, [r3, #0]
    3c60:	2b73      	cmp	r3, #115	; 0x73
    3c62:	d005      	beq.n	3c70 <am_util_stdio_vsprintf+0xbc>
    3c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3c66:	2b00      	cmp	r3, #0
    3c68:	da02      	bge.n	3c70 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    3c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3c6c:	425b      	negs	r3, r3
    3c6e:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    3c70:	68bb      	ldr	r3, [r7, #8]
    3c72:	781b      	ldrb	r3, [r3, #0]
    3c74:	2b2e      	cmp	r3, #46	; 0x2e
    3c76:	d10e      	bne.n	3c96 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    3c78:	68bb      	ldr	r3, [r7, #8]
    3c7a:	3301      	adds	r3, #1
    3c7c:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    3c7e:	f107 0310 	add.w	r3, r7, #16
    3c82:	4619      	mov	r1, r3
    3c84:	68b8      	ldr	r0, [r7, #8]
    3c86:	f7ff fd68 	bl	375a <decstr_to_int>
    3c8a:	4603      	mov	r3, r0
    3c8c:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    3c8e:	693b      	ldr	r3, [r7, #16]
    3c90:	68ba      	ldr	r2, [r7, #8]
    3c92:	4413      	add	r3, r2
    3c94:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    3c96:	68bb      	ldr	r3, [r7, #8]
    3c98:	781b      	ldrb	r3, [r3, #0]
    3c9a:	2b6c      	cmp	r3, #108	; 0x6c
    3c9c:	d10c      	bne.n	3cb8 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    3c9e:	68bb      	ldr	r3, [r7, #8]
    3ca0:	3301      	adds	r3, #1
    3ca2:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    3ca4:	68bb      	ldr	r3, [r7, #8]
    3ca6:	781b      	ldrb	r3, [r3, #0]
    3ca8:	2b6c      	cmp	r3, #108	; 0x6c
    3caa:	d105      	bne.n	3cb8 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    3cac:	68bb      	ldr	r3, [r7, #8]
    3cae:	3301      	adds	r3, #1
    3cb0:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    3cb2:	2301      	movs	r3, #1
    3cb4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    3cb8:	68bb      	ldr	r3, [r7, #8]
    3cba:	781b      	ldrb	r3, [r3, #0]
    3cbc:	3b46      	subs	r3, #70	; 0x46
    3cbe:	2b32      	cmp	r3, #50	; 0x32
    3cc0:	f200 8254 	bhi.w	416c <am_util_stdio_vsprintf+0x5b8>
    3cc4:	a201      	add	r2, pc, #4	; (adr r2, 3ccc <am_util_stdio_vsprintf+0x118>)
    3cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3cca:	bf00      	nop
    3ccc:	000040f7 	.word	0x000040f7
    3cd0:	0000416d 	.word	0x0000416d
    3cd4:	0000416d 	.word	0x0000416d
    3cd8:	0000416d 	.word	0x0000416d
    3cdc:	0000416d 	.word	0x0000416d
    3ce0:	0000416d 	.word	0x0000416d
    3ce4:	0000416d 	.word	0x0000416d
    3ce8:	0000416d 	.word	0x0000416d
    3cec:	0000416d 	.word	0x0000416d
    3cf0:	0000416d 	.word	0x0000416d
    3cf4:	0000416d 	.word	0x0000416d
    3cf8:	0000416d 	.word	0x0000416d
    3cfc:	0000416d 	.word	0x0000416d
    3d00:	0000416d 	.word	0x0000416d
    3d04:	0000416d 	.word	0x0000416d
    3d08:	0000416d 	.word	0x0000416d
    3d0c:	0000416d 	.word	0x0000416d
    3d10:	0000416d 	.word	0x0000416d
    3d14:	00003e93 	.word	0x00003e93
    3d18:	0000416d 	.word	0x0000416d
    3d1c:	0000416d 	.word	0x0000416d
    3d20:	0000416d 	.word	0x0000416d
    3d24:	0000416d 	.word	0x0000416d
    3d28:	0000416d 	.word	0x0000416d
    3d2c:	0000416d 	.word	0x0000416d
    3d30:	0000416d 	.word	0x0000416d
    3d34:	0000416d 	.word	0x0000416d
    3d38:	0000416d 	.word	0x0000416d
    3d3c:	0000416d 	.word	0x0000416d
    3d40:	00003d99 	.word	0x00003d99
    3d44:	00003fbf 	.word	0x00003fbf
    3d48:	0000416d 	.word	0x0000416d
    3d4c:	000040f7 	.word	0x000040f7
    3d50:	0000416d 	.word	0x0000416d
    3d54:	0000416d 	.word	0x0000416d
    3d58:	00003fbf 	.word	0x00003fbf
    3d5c:	0000416d 	.word	0x0000416d
    3d60:	0000416d 	.word	0x0000416d
    3d64:	0000416d 	.word	0x0000416d
    3d68:	0000416d 	.word	0x0000416d
    3d6c:	0000416d 	.word	0x0000416d
    3d70:	0000416d 	.word	0x0000416d
    3d74:	0000416d 	.word	0x0000416d
    3d78:	0000416d 	.word	0x0000416d
    3d7c:	0000416d 	.word	0x0000416d
    3d80:	00003dbf 	.word	0x00003dbf
    3d84:	0000416d 	.word	0x0000416d
    3d88:	00003f2d 	.word	0x00003f2d
    3d8c:	0000416d 	.word	0x0000416d
    3d90:	0000416d 	.word	0x0000416d
    3d94:	00003e8d 	.word	0x00003e8d
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    3d98:	687b      	ldr	r3, [r7, #4]
    3d9a:	1d1a      	adds	r2, r3, #4
    3d9c:	607a      	str	r2, [r7, #4]
    3d9e:	681b      	ldr	r3, [r3, #0]
    3da0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    3da4:	68fb      	ldr	r3, [r7, #12]
    3da6:	2b00      	cmp	r3, #0
    3da8:	d005      	beq.n	3db6 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    3daa:	68fb      	ldr	r3, [r7, #12]
    3dac:	1c5a      	adds	r2, r3, #1
    3dae:	60fa      	str	r2, [r7, #12]
    3db0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    3db4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    3db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3db8:	3301      	adds	r3, #1
    3dba:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    3dbc:	e1e6      	b.n	418c <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    3dbe:	687b      	ldr	r3, [r7, #4]
    3dc0:	1d1a      	adds	r2, r3, #4
    3dc2:	607a      	str	r2, [r7, #4]
    3dc4:	681b      	ldr	r3, [r3, #0]
    3dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    3dc8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    3dca:	f7ff fdb4 	bl	3936 <simple_strlen>
    3dce:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    3dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3dd2:	2b00      	cmp	r3, #0
    3dd4:	dd2e      	ble.n	3e34 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    3dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3dda:	429a      	cmp	r2, r3
    3ddc:	d22a      	bcs.n	3e34 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    3dde:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3de2:	1ad3      	subs	r3, r2, r3
    3de4:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    3de6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    3dea:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3dec:	4619      	mov	r1, r3
    3dee:	68f8      	ldr	r0, [r7, #12]
    3df0:	f7ff fdbc 	bl	396c <padbuffer>
    3df4:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    3df6:	68fb      	ldr	r3, [r7, #12]
    3df8:	2b00      	cmp	r3, #0
    3dfa:	d001      	beq.n	3e00 <am_util_stdio_vsprintf+0x24c>
    3dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3dfe:	e000      	b.n	3e02 <am_util_stdio_vsprintf+0x24e>
    3e00:	2300      	movs	r3, #0
    3e02:	68fa      	ldr	r2, [r7, #12]
    3e04:	4413      	add	r3, r2
    3e06:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    3e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3e0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3e0c:	4413      	add	r3, r2
    3e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    3e10:	2300      	movs	r3, #0
    3e12:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    3e14:	e00e      	b.n	3e34 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    3e16:	68fb      	ldr	r3, [r7, #12]
    3e18:	2b00      	cmp	r3, #0
    3e1a:	d005      	beq.n	3e28 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    3e1c:	68fb      	ldr	r3, [r7, #12]
    3e1e:	1c5a      	adds	r2, r3, #1
    3e20:	60fa      	str	r2, [r7, #12]
    3e22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3e24:	7812      	ldrb	r2, [r2, #0]
    3e26:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    3e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3e2a:	3301      	adds	r3, #1
    3e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    3e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3e30:	3301      	adds	r3, #1
    3e32:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    3e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3e36:	781b      	ldrb	r3, [r3, #0]
    3e38:	2b00      	cmp	r3, #0
    3e3a:	d1ec      	bne.n	3e16 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    3e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3e3e:	2b00      	cmp	r3, #0
    3e40:	f000 81a1 	beq.w	4186 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    3e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3e46:	425b      	negs	r3, r3
    3e48:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    3e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3e4e:	429a      	cmp	r2, r3
    3e50:	f080 8199 	bcs.w	4186 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    3e54:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e58:	1ad3      	subs	r3, r2, r3
    3e5a:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    3e5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    3e60:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3e62:	4619      	mov	r1, r3
    3e64:	68f8      	ldr	r0, [r7, #12]
    3e66:	f7ff fd81 	bl	396c <padbuffer>
    3e6a:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    3e6c:	68fb      	ldr	r3, [r7, #12]
    3e6e:	2b00      	cmp	r3, #0
    3e70:	d001      	beq.n	3e76 <am_util_stdio_vsprintf+0x2c2>
    3e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3e74:	e000      	b.n	3e78 <am_util_stdio_vsprintf+0x2c4>
    3e76:	2300      	movs	r3, #0
    3e78:	68fa      	ldr	r2, [r7, #12]
    3e7a:	4413      	add	r3, r2
    3e7c:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    3e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3e80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3e82:	4413      	add	r3, r2
    3e84:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    3e86:	2300      	movs	r3, #0
    3e88:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    3e8a:	e17c      	b.n	4186 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    3e8c:	2301      	movs	r3, #1
    3e8e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    3e92:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    3e96:	2b00      	cmp	r3, #0
    3e98:	d00a      	beq.n	3eb0 <am_util_stdio_vsprintf+0x2fc>
    3e9a:	687b      	ldr	r3, [r7, #4]
    3e9c:	3307      	adds	r3, #7
    3e9e:	f023 0307 	bic.w	r3, r3, #7
    3ea2:	f103 0208 	add.w	r2, r3, #8
    3ea6:	607a      	str	r2, [r7, #4]
    3ea8:	cb18      	ldmia	r3, {r3, r4}
    3eaa:	e007      	b.n	3ebc <am_util_stdio_vsprintf+0x308>
    3eac:	1000656c 	.word	0x1000656c
                                      va_arg(pArgs, uint32_t);
    3eb0:	687b      	ldr	r3, [r7, #4]
    3eb2:	1d1a      	adds	r2, r3, #4
    3eb4:	607a      	str	r2, [r7, #4]
    3eb6:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    3eb8:	f04f 0400 	mov.w	r4, #0
    3ebc:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    3ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3ec2:	2b00      	cmp	r3, #0
    3ec4:	d01e      	beq.n	3f04 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    3ec6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    3eca:	f7ff fc22 	bl	3712 <ndigits_in_hex>
    3ece:	4602      	mov	r2, r0
    3ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3ed2:	1a9b      	subs	r3, r3, r2
    3ed4:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    3ed6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    3eda:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3edc:	4619      	mov	r1, r3
    3ede:	68f8      	ldr	r0, [r7, #12]
    3ee0:	f7ff fd44 	bl	396c <padbuffer>
    3ee4:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    3ee6:	68fb      	ldr	r3, [r7, #12]
    3ee8:	2b00      	cmp	r3, #0
    3eea:	d001      	beq.n	3ef0 <am_util_stdio_vsprintf+0x33c>
    3eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3eee:	e000      	b.n	3ef2 <am_util_stdio_vsprintf+0x33e>
    3ef0:	2300      	movs	r3, #0
    3ef2:	68fa      	ldr	r2, [r7, #12]
    3ef4:	4413      	add	r3, r2
    3ef6:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    3ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3efa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3efc:	4413      	add	r3, r2
    3efe:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    3f00:	2300      	movs	r3, #0
    3f02:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    3f04:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    3f08:	68fa      	ldr	r2, [r7, #12]
    3f0a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    3f0e:	f7ff fcb2 	bl	3876 <uint64_to_hexstr>
    3f12:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    3f14:	68fb      	ldr	r3, [r7, #12]
    3f16:	2b00      	cmp	r3, #0
    3f18:	d003      	beq.n	3f22 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    3f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3f1c:	68fa      	ldr	r2, [r7, #12]
    3f1e:	4413      	add	r3, r2
    3f20:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    3f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3f24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3f26:	4413      	add	r3, r2
    3f28:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    3f2a:	e12f      	b.n	418c <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    3f2c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    3f30:	2b00      	cmp	r3, #0
    3f32:	d008      	beq.n	3f46 <am_util_stdio_vsprintf+0x392>
    3f34:	687b      	ldr	r3, [r7, #4]
    3f36:	3307      	adds	r3, #7
    3f38:	f023 0307 	bic.w	r3, r3, #7
    3f3c:	f103 0208 	add.w	r2, r3, #8
    3f40:	607a      	str	r2, [r7, #4]
    3f42:	cb18      	ldmia	r3, {r3, r4}
    3f44:	e005      	b.n	3f52 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    3f46:	687b      	ldr	r3, [r7, #4]
    3f48:	1d1a      	adds	r2, r3, #4
    3f4a:	607a      	str	r2, [r7, #4]
    3f4c:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    3f4e:	f04f 0400 	mov.w	r4, #0
    3f52:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    3f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3f58:	2b00      	cmp	r3, #0
    3f5a:	d01e      	beq.n	3f9a <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    3f5c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    3f60:	f7ff fb99 	bl	3696 <ndigits_in_u64>
    3f64:	4602      	mov	r2, r0
    3f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3f68:	1a9b      	subs	r3, r3, r2
    3f6a:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    3f6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    3f70:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3f72:	4619      	mov	r1, r3
    3f74:	68f8      	ldr	r0, [r7, #12]
    3f76:	f7ff fcf9 	bl	396c <padbuffer>
    3f7a:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    3f7c:	68fb      	ldr	r3, [r7, #12]
    3f7e:	2b00      	cmp	r3, #0
    3f80:	d001      	beq.n	3f86 <am_util_stdio_vsprintf+0x3d2>
    3f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3f84:	e000      	b.n	3f88 <am_util_stdio_vsprintf+0x3d4>
    3f86:	2300      	movs	r3, #0
    3f88:	68fa      	ldr	r2, [r7, #12]
    3f8a:	4413      	add	r3, r2
    3f8c:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    3f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3f90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3f92:	4413      	add	r3, r2
    3f94:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    3f96:	2300      	movs	r3, #0
    3f98:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    3f9a:	68fa      	ldr	r2, [r7, #12]
    3f9c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    3fa0:	f7ff fc21 	bl	37e6 <uint64_to_str>
    3fa4:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    3fa6:	68fb      	ldr	r3, [r7, #12]
    3fa8:	2b00      	cmp	r3, #0
    3faa:	d003      	beq.n	3fb4 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    3fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3fae:	68fa      	ldr	r2, [r7, #12]
    3fb0:	4413      	add	r3, r2
    3fb2:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    3fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3fb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3fb8:	4413      	add	r3, r2
    3fba:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    3fbc:	e0e6      	b.n	418c <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    3fbe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    3fc2:	2b00      	cmp	r3, #0
    3fc4:	d008      	beq.n	3fd8 <am_util_stdio_vsprintf+0x424>
    3fc6:	687b      	ldr	r3, [r7, #4]
    3fc8:	3307      	adds	r3, #7
    3fca:	f023 0307 	bic.w	r3, r3, #7
    3fce:	f103 0208 	add.w	r2, r3, #8
    3fd2:	607a      	str	r2, [r7, #4]
    3fd4:	cb18      	ldmia	r3, {r3, r4}
    3fd6:	e005      	b.n	3fe4 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    3fd8:	687b      	ldr	r3, [r7, #4]
    3fda:	1d1a      	adds	r2, r3, #4
    3fdc:	607a      	str	r2, [r7, #4]
    3fde:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    3fe0:	ea4f 74e3 	mov.w	r4, r3, asr #31
    3fe4:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    3fe8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    3fec:	2b00      	cmp	r3, #0
    3fee:	f174 0300 	sbcs.w	r3, r4, #0
    3ff2:	da0a      	bge.n	400a <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    3ff4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    3ff8:	425b      	negs	r3, r3
    3ffa:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    3ffe:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    4002:	2301      	movs	r3, #1
    4004:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    4008:	e006      	b.n	4018 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    400a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    400e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    4012:	2300      	movs	r3, #0
    4014:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    4018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    401a:	2b00      	cmp	r3, #0
    401c:	d04a      	beq.n	40b4 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    401e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    4022:	4618      	mov	r0, r3
    4024:	4621      	mov	r1, r4
    4026:	f7ff fb57 	bl	36d8 <ndigits_in_i64>
    402a:	4602      	mov	r2, r0
    402c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    402e:	1a9b      	subs	r3, r3, r2
    4030:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    4032:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    4036:	2b00      	cmp	r3, #0
    4038:	d011      	beq.n	405e <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    403c:	3b01      	subs	r3, #1
    403e:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    4040:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    4044:	2b30      	cmp	r3, #48	; 0x30
    4046:	d10a      	bne.n	405e <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    4048:	68fb      	ldr	r3, [r7, #12]
    404a:	2b00      	cmp	r3, #0
    404c:	d004      	beq.n	4058 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    404e:	68fb      	ldr	r3, [r7, #12]
    4050:	1c5a      	adds	r2, r3, #1
    4052:	60fa      	str	r2, [r7, #12]
    4054:	222d      	movs	r2, #45	; 0x2d
    4056:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    4058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    405a:	3301      	adds	r3, #1
    405c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    405e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    4062:	6bba      	ldr	r2, [r7, #56]	; 0x38
    4064:	4619      	mov	r1, r3
    4066:	68f8      	ldr	r0, [r7, #12]
    4068:	f7ff fc80 	bl	396c <padbuffer>
    406c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    406e:	68fb      	ldr	r3, [r7, #12]
    4070:	2b00      	cmp	r3, #0
    4072:	d001      	beq.n	4078 <am_util_stdio_vsprintf+0x4c4>
    4074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4076:	e000      	b.n	407a <am_util_stdio_vsprintf+0x4c6>
    4078:	2300      	movs	r3, #0
    407a:	68fa      	ldr	r2, [r7, #12]
    407c:	4413      	add	r3, r2
    407e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    4080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4082:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4084:	4413      	add	r3, r2
    4086:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    4088:	2300      	movs	r3, #0
    408a:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    408c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    4090:	2b00      	cmp	r3, #0
    4092:	d01e      	beq.n	40d2 <am_util_stdio_vsprintf+0x51e>
    4094:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    4098:	2b20      	cmp	r3, #32
    409a:	d11a      	bne.n	40d2 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    409c:	68fb      	ldr	r3, [r7, #12]
    409e:	2b00      	cmp	r3, #0
    40a0:	d004      	beq.n	40ac <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    40a2:	68fb      	ldr	r3, [r7, #12]
    40a4:	1c5a      	adds	r2, r3, #1
    40a6:	60fa      	str	r2, [r7, #12]
    40a8:	222d      	movs	r2, #45	; 0x2d
    40aa:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    40ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    40ae:	3301      	adds	r3, #1
    40b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    40b2:	e00e      	b.n	40d2 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    40b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    40b8:	2b00      	cmp	r3, #0
    40ba:	d00a      	beq.n	40d2 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    40bc:	68fb      	ldr	r3, [r7, #12]
    40be:	2b00      	cmp	r3, #0
    40c0:	d004      	beq.n	40cc <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    40c2:	68fb      	ldr	r3, [r7, #12]
    40c4:	1c5a      	adds	r2, r3, #1
    40c6:	60fa      	str	r2, [r7, #12]
    40c8:	222d      	movs	r2, #45	; 0x2d
    40ca:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    40cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    40ce:	3301      	adds	r3, #1
    40d0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    40d2:	68fa      	ldr	r2, [r7, #12]
    40d4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    40d8:	f7ff fb85 	bl	37e6 <uint64_to_str>
    40dc:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    40de:	68fb      	ldr	r3, [r7, #12]
    40e0:	2b00      	cmp	r3, #0
    40e2:	d003      	beq.n	40ec <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    40e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    40e6:	68fa      	ldr	r2, [r7, #12]
    40e8:	4413      	add	r3, r2
    40ea:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    40ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    40ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    40f0:	4413      	add	r3, r2
    40f2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    40f4:	e04a      	b.n	418c <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    40f6:	68fb      	ldr	r3, [r7, #12]
    40f8:	2b00      	cmp	r3, #0
    40fa:	d046      	beq.n	418a <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    40fc:	687b      	ldr	r3, [r7, #4]
    40fe:	3307      	adds	r3, #7
    4100:	f023 0307 	bic.w	r3, r3, #7
    4104:	f103 0208 	add.w	r2, r3, #8
    4108:	607a      	str	r2, [r7, #4]
    410a:	cb18      	ldmia	r3, {r3, r4}
    410c:	4618      	mov	r0, r3
    410e:	4621      	mov	r1, r4
    4110:	f7fb ffd6 	bl	c0 <__aeabi_d2f>
    4114:	4603      	mov	r3, r0
    4116:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    4118:	68fb      	ldr	r3, [r7, #12]
    411a:	2214      	movs	r2, #20
    411c:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    411e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    4120:	68f9      	ldr	r1, [r7, #12]
    4122:	6978      	ldr	r0, [r7, #20]
    4124:	f7ff fc48 	bl	39b8 <ftoa>
    4128:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    412a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    412c:	2b00      	cmp	r3, #0
    412e:	da14      	bge.n	415a <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    4130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4132:	f1b3 3fff 	cmp.w	r3, #4294967295
    4136:	d102      	bne.n	413e <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    4138:	4b1e      	ldr	r3, [pc, #120]	; (41b4 <am_util_stdio_vsprintf+0x600>)
    413a:	62bb      	str	r3, [r7, #40]	; 0x28
    413c:	e008      	b.n	4150 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    413e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4140:	f113 0f02 	cmn.w	r3, #2
    4144:	d102      	bne.n	414c <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    4146:	4b1c      	ldr	r3, [pc, #112]	; (41b8 <am_util_stdio_vsprintf+0x604>)
    4148:	62bb      	str	r3, [r7, #40]	; 0x28
    414a:	e001      	b.n	4150 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    414c:	4b1b      	ldr	r3, [pc, #108]	; (41bc <am_util_stdio_vsprintf+0x608>)
    414e:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    4150:	68fb      	ldr	r3, [r7, #12]
    4152:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4154:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    4156:	2303      	movs	r3, #3
    4158:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    415a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    415c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    415e:	4413      	add	r3, r2
    4160:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    4162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4164:	68fa      	ldr	r2, [r7, #12]
    4166:	4413      	add	r3, r2
    4168:	60fb      	str	r3, [r7, #12]
                }
                break;
    416a:	e00e      	b.n	418a <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    416c:	68fb      	ldr	r3, [r7, #12]
    416e:	2b00      	cmp	r3, #0
    4170:	d005      	beq.n	417e <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    4172:	68fb      	ldr	r3, [r7, #12]
    4174:	1c5a      	adds	r2, r3, #1
    4176:	60fa      	str	r2, [r7, #12]
    4178:	68ba      	ldr	r2, [r7, #8]
    417a:	7812      	ldrb	r2, [r2, #0]
    417c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    417e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4180:	3301      	adds	r3, #1
    4182:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    4184:	e002      	b.n	418c <am_util_stdio_vsprintf+0x5d8>
                break;
    4186:	bf00      	nop
    4188:	e000      	b.n	418c <am_util_stdio_vsprintf+0x5d8>
                break;
    418a:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    418c:	68bb      	ldr	r3, [r7, #8]
    418e:	3301      	adds	r3, #1
    4190:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    4192:	68bb      	ldr	r3, [r7, #8]
    4194:	781b      	ldrb	r3, [r3, #0]
    4196:	2b00      	cmp	r3, #0
    4198:	f47f ad17 	bne.w	3bca <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    419c:	68fb      	ldr	r3, [r7, #12]
    419e:	2b00      	cmp	r3, #0
    41a0:	d002      	beq.n	41a8 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    41a2:	68fb      	ldr	r3, [r7, #12]
    41a4:	2200      	movs	r2, #0
    41a6:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    41a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    41aa:	4618      	mov	r0, r3
    41ac:	3754      	adds	r7, #84	; 0x54
    41ae:	46bd      	mov	sp, r7
    41b0:	bd90      	pop	{r4, r7, pc}
    41b2:	bf00      	nop
    41b4:	00302e30 	.word	0x00302e30
    41b8:	00232e23 	.word	0x00232e23
    41bc:	003f2e3f 	.word	0x003f2e3f

000041c0 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    41c0:	b40f      	push	{r0, r1, r2, r3}
    41c2:	b580      	push	{r7, lr}
    41c4:	b082      	sub	sp, #8
    41c6:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    41c8:	f107 0314 	add.w	r3, r7, #20
    41cc:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    41ce:	683a      	ldr	r2, [r7, #0]
    41d0:	6939      	ldr	r1, [r7, #16]
    41d2:	4808      	ldr	r0, [pc, #32]	; (41f4 <am_util_stdio_printf+0x34>)
    41d4:	f7ff fcee 	bl	3bb4 <am_util_stdio_vsprintf>
    41d8:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    41da:	4b07      	ldr	r3, [pc, #28]	; (41f8 <am_util_stdio_printf+0x38>)
    41dc:	681b      	ldr	r3, [r3, #0]
    41de:	4805      	ldr	r0, [pc, #20]	; (41f4 <am_util_stdio_printf+0x34>)
    41e0:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    41e2:	687b      	ldr	r3, [r7, #4]
}
    41e4:	4618      	mov	r0, r3
    41e6:	3708      	adds	r7, #8
    41e8:	46bd      	mov	sp, r7
    41ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    41ee:	b004      	add	sp, #16
    41f0:	4770      	bx	lr
    41f2:	bf00      	nop
    41f4:	1000646c 	.word	0x1000646c
    41f8:	1000658c 	.word	0x1000658c

000041fc <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    41fc:	b580      	push	{r7, lr}
    41fe:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    4200:	4802      	ldr	r0, [pc, #8]	; (420c <am_util_stdio_terminal_clear+0x10>)
    4202:	f7ff ffdd 	bl	41c0 <am_util_stdio_printf>
}
    4206:	bf00      	nop
    4208:	bd80      	pop	{r7, pc}
    420a:	bf00      	nop
    420c:	00005018 	.word	0x00005018

00004210 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    4210:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    4212:	f000 fca9 	bl	4b68 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    4216:	f000 fd15 	bl	4c44 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    421a:	f000 fead 	bl	4f78 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    421e:	2001      	movs	r0, #1
    4220:	f000 fd20 	bl	4c64 <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    4224:	2001      	movs	r0, #1
    4226:	f000 f937 	bl	4498 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    422a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    422e:	f000 bd27 	b.w	4c80 <am_hal_rtc_osc_disable>
    4232:	bf00      	nop

00004234 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    4234:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    4236:	4b17      	ldr	r3, [pc, #92]	; (4294 <am_bsp_debug_printf_enable+0x60>)
    4238:	681c      	ldr	r4, [r3, #0]
    423a:	f014 0401 	ands.w	r4, r4, #1
{
    423e:	b087      	sub	sp, #28
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    4240:	d001      	beq.n	4246 <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    4242:	b007      	add	sp, #28
    4244:	bd30      	pop	{r4, r5, pc}
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    4246:	4a14      	ldr	r2, [pc, #80]	; (4298 <am_bsp_debug_printf_enable+0x64>)
    4248:	4914      	ldr	r1, [pc, #80]	; (429c <am_bsp_debug_printf_enable+0x68>)
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    424a:	4d15      	ldr	r5, [pc, #84]	; (42a0 <am_bsp_debug_printf_enable+0x6c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    424c:	6011      	str	r1, [r2, #0]
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    424e:	a806      	add	r0, sp, #24
    4250:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    4254:	f000 fe32 	bl	4ebc <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    4258:	f000 fad6 	bl	4808 <am_hal_interrupt_master_disable>
    425c:	4a11      	ldr	r2, [pc, #68]	; (42a4 <am_bsp_debug_printf_enable+0x70>)
    425e:	9000      	str	r0, [sp, #0]
    4260:	4d11      	ldr	r5, [pc, #68]	; (42a8 <am_bsp_debug_printf_enable+0x74>)
    4262:	4912      	ldr	r1, [pc, #72]	; (42ac <am_bsp_debug_printf_enable+0x78>)
    4264:	2073      	movs	r0, #115	; 0x73
    4266:	6010      	str	r0, [r2, #0]
    4268:	682b      	ldr	r3, [r5, #0]
    426a:	4811      	ldr	r0, [pc, #68]	; (42b0 <am_bsp_debug_printf_enable+0x7c>)
    426c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    4270:	602b      	str	r3, [r5, #0]
    4272:	6805      	ldr	r5, [r0, #0]
    4274:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    4278:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    427c:	6003      	str	r3, [r0, #0]
    427e:	6808      	ldr	r0, [r1, #0]
    4280:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    4284:	600d      	str	r5, [r1, #0]
    4286:	6014      	str	r4, [r2, #0]
    4288:	9800      	ldr	r0, [sp, #0]
    428a:	f000 fac1 	bl	4810 <am_hal_interrupt_master_set>
}
    428e:	b007      	add	sp, #28
    4290:	bd30      	pop	{r4, r5, pc}
    4292:	bf00      	nop
    4294:	10006570 	.word	0x10006570
    4298:	e0000e80 	.word	0xe0000e80
    429c:	00150511 	.word	0x00150511
    42a0:	000f4240 	.word	0x000f4240
    42a4:	40010060 	.word	0x40010060
    42a8:	40010054 	.word	0x40010054
    42ac:	40010108 	.word	0x40010108
    42b0:	40010028 	.word	0x40010028

000042b4 <am_bsp_debug_printf_disable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    42b4:	b530      	push	{r4, r5, lr}
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    42b6:	4b14      	ldr	r3, [pc, #80]	; (4308 <am_bsp_debug_printf_disable+0x54>)
    42b8:	681c      	ldr	r4, [r3, #0]
    42ba:	f014 0401 	ands.w	r4, r4, #1
{
    42be:	b083      	sub	sp, #12
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    42c0:	d120      	bne.n	4304 <am_bsp_debug_printf_disable+0x50>
    }

    //
    // Disable the TPIU
    //
    am_hal_itm_not_busy();
    42c2:	f000 fb03 	bl	48cc <am_hal_itm_not_busy>
    am_hal_gpio_pin_config(AM_BSP_GPIO_ITM_SWO, AM_HAL_GPIO_OUTPUT);
    42c6:	f000 fa9f 	bl	4808 <am_hal_interrupt_master_disable>
    42ca:	4a10      	ldr	r2, [pc, #64]	; (430c <am_bsp_debug_printf_disable+0x58>)
    42cc:	9001      	str	r0, [sp, #4]
    42ce:	4d10      	ldr	r5, [pc, #64]	; (4310 <am_bsp_debug_printf_disable+0x5c>)
    42d0:	4910      	ldr	r1, [pc, #64]	; (4314 <am_bsp_debug_printf_disable+0x60>)
    42d2:	2073      	movs	r0, #115	; 0x73
    42d4:	6010      	str	r0, [r2, #0]
    42d6:	682b      	ldr	r3, [r5, #0]
    42d8:	480f      	ldr	r0, [pc, #60]	; (4318 <am_bsp_debug_printf_disable+0x64>)
    42da:	f023 0c70 	bic.w	ip, r3, #112	; 0x70
    42de:	f04c 0320 	orr.w	r3, ip, #32
    42e2:	602b      	str	r3, [r5, #0]
    42e4:	6805      	ldr	r5, [r0, #0]
    42e6:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    42ea:	f44c 53c0 	orr.w	r3, ip, #6144	; 0x1800
    42ee:	6003      	str	r3, [r0, #0]
    42f0:	6808      	ldr	r0, [r1, #0]
    42f2:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    42f6:	600d      	str	r5, [r1, #0]
    42f8:	6014      	str	r4, [r2, #0]
    42fa:	9801      	ldr	r0, [sp, #4]
    42fc:	f000 fa88 	bl	4810 <am_hal_interrupt_master_set>
    am_hal_tpiu_disable();
    4300:	f000 fe34 	bl	4f6c <am_hal_tpiu_disable>
}
    4304:	b003      	add	sp, #12
    4306:	bd30      	pop	{r4, r5, pc}
    4308:	10006570 	.word	0x10006570
    430c:	40010060 	.word	0x40010060
    4310:	40010054 	.word	0x40010054
    4314:	40010108 	.word	0x40010108
    4318:	40010028 	.word	0x40010028

0000431c <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    431e:	4605      	mov	r5, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    4320:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    4324:	78ab      	ldrb	r3, [r5, #2]
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    4326:	786c      	ldrb	r4, [r5, #1]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    4328:	78ef      	ldrb	r7, [r5, #3]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    432a:	792e      	ldrb	r6, [r5, #4]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    432c:	79a9      	ldrb	r1, [r5, #6]
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    432e:	009a      	lsls	r2, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    4330:	0064      	lsls	r4, r4, #1
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    4332:	f002 0204 	and.w	r2, r2, #4
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    4336:	f004 0402 	and.w	r4, r4, #2
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    433a:	4314      	orrs	r4, r2
    433c:	f047 0701 	orr.w	r7, r7, #1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    4340:	79ea      	ldrb	r2, [r5, #7]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    4342:	01f6      	lsls	r6, r6, #7
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    4344:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    4346:	b2f6      	uxtb	r6, r6
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    4348:	7a2f      	ldrb	r7, [r5, #8]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    434a:	0289      	lsls	r1, r1, #10
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    434c:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    434e:	f401 6180 	and.w	r1, r1, #1024	; 0x400
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    4352:	7a6e      	ldrb	r6, [r5, #9]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    4354:	02d2      	lsls	r2, r2, #11
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    4356:	430c      	orrs	r4, r1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    4358:	f402 6200 	and.w	r2, r2, #2048	; 0x800
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    435c:	7aa9      	ldrb	r1, [r5, #10]
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    435e:	033f      	lsls	r7, r7, #12
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    4360:	4314      	orrs	r4, r2
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    4362:	b2bf      	uxth	r7, r7
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    4364:	0436      	lsls	r6, r6, #16
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    4366:	7aea      	ldrb	r2, [r5, #11]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    4368:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    436a:	0509      	lsls	r1, r1, #20
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    436c:	f406 2770 	and.w	r7, r6, #983040	; 0xf0000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    4370:	0612      	lsls	r2, r2, #24
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    4372:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    4374:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    4378:	009b      	lsls	r3, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    437a:	f002 7780 	and.w	r7, r2, #16777216	; 0x1000000
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    437e:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    4380:	f003 0108 	and.w	r1, r3, #8
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    4384:	433c      	orrs	r4, r7
    4386:	430c      	orrs	r4, r1
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    4388:	f000 fae8 	bl	495c <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    438c:	482c      	ldr	r0, [pc, #176]	; (4440 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    438e:	4b2d      	ldr	r3, [pc, #180]	; (4444 <am_hal_cachectrl_enable+0x128>)
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    4390:	6004      	str	r4, [r0, #0]
    4392:	2232      	movs	r2, #50	; 0x32
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    4394:	681e      	ldr	r6, [r3, #0]
    4396:	0777      	lsls	r7, r6, #29
    4398:	d41e      	bmi.n	43d8 <am_hal_cachectrl_enable+0xbc>
    439a:	681f      	ldr	r7, [r3, #0]
    439c:	077e      	lsls	r6, r7, #29
    439e:	f102 32ff 	add.w	r2, r2, #4294967295
    43a2:	d419      	bmi.n	43d8 <am_hal_cachectrl_enable+0xbc>
    43a4:	6819      	ldr	r1, [r3, #0]
    43a6:	074f      	lsls	r7, r1, #29
    43a8:	d416      	bmi.n	43d8 <am_hal_cachectrl_enable+0xbc>
    43aa:	6818      	ldr	r0, [r3, #0]
    43ac:	0746      	lsls	r6, r0, #29
    43ae:	d413      	bmi.n	43d8 <am_hal_cachectrl_enable+0xbc>
    43b0:	681e      	ldr	r6, [r3, #0]
    43b2:	0770      	lsls	r0, r6, #29
    43b4:	d410      	bmi.n	43d8 <am_hal_cachectrl_enable+0xbc>
    43b6:	681f      	ldr	r7, [r3, #0]
    43b8:	0779      	lsls	r1, r7, #29
    43ba:	d40d      	bmi.n	43d8 <am_hal_cachectrl_enable+0xbc>
    43bc:	6819      	ldr	r1, [r3, #0]
    43be:	074f      	lsls	r7, r1, #29
    43c0:	d40a      	bmi.n	43d8 <am_hal_cachectrl_enable+0xbc>
    43c2:	6818      	ldr	r0, [r3, #0]
    43c4:	0746      	lsls	r6, r0, #29
    43c6:	d407      	bmi.n	43d8 <am_hal_cachectrl_enable+0xbc>
    43c8:	681e      	ldr	r6, [r3, #0]
    43ca:	0770      	lsls	r0, r6, #29
    43cc:	d404      	bmi.n	43d8 <am_hal_cachectrl_enable+0xbc>
    43ce:	681f      	ldr	r7, [r3, #0]
    43d0:	0779      	lsls	r1, r7, #29
    43d2:	d401      	bmi.n	43d8 <am_hal_cachectrl_enable+0xbc>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    43d4:	3a09      	subs	r2, #9
    43d6:	d1dd      	bne.n	4394 <am_hal_cachectrl_enable+0x78>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    43d8:	4b1a      	ldr	r3, [pc, #104]	; (4444 <am_hal_cachectrl_enable+0x128>)
    43da:	681a      	ldr	r2, [r3, #0]
    43dc:	f042 0101 	orr.w	r1, r2, #1
    43e0:	6019      	str	r1, [r3, #0]
    43e2:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    43e4:	6818      	ldr	r0, [r3, #0]
    43e6:	0740      	lsls	r0, r0, #29
    43e8:	d41e      	bmi.n	4428 <am_hal_cachectrl_enable+0x10c>
    43ea:	681e      	ldr	r6, [r3, #0]
    43ec:	0771      	lsls	r1, r6, #29
    43ee:	f102 32ff 	add.w	r2, r2, #4294967295
    43f2:	d419      	bmi.n	4428 <am_hal_cachectrl_enable+0x10c>
    43f4:	681f      	ldr	r7, [r3, #0]
    43f6:	077f      	lsls	r7, r7, #29
    43f8:	d416      	bmi.n	4428 <am_hal_cachectrl_enable+0x10c>
    43fa:	6819      	ldr	r1, [r3, #0]
    43fc:	074e      	lsls	r6, r1, #29
    43fe:	d413      	bmi.n	4428 <am_hal_cachectrl_enable+0x10c>
    4400:	6818      	ldr	r0, [r3, #0]
    4402:	0740      	lsls	r0, r0, #29
    4404:	d410      	bmi.n	4428 <am_hal_cachectrl_enable+0x10c>
    4406:	681e      	ldr	r6, [r3, #0]
    4408:	0771      	lsls	r1, r6, #29
    440a:	d40d      	bmi.n	4428 <am_hal_cachectrl_enable+0x10c>
    440c:	681f      	ldr	r7, [r3, #0]
    440e:	077f      	lsls	r7, r7, #29
    4410:	d40a      	bmi.n	4428 <am_hal_cachectrl_enable+0x10c>
    4412:	6819      	ldr	r1, [r3, #0]
    4414:	074e      	lsls	r6, r1, #29
    4416:	d407      	bmi.n	4428 <am_hal_cachectrl_enable+0x10c>
    4418:	6818      	ldr	r0, [r3, #0]
    441a:	0740      	lsls	r0, r0, #29
    441c:	d404      	bmi.n	4428 <am_hal_cachectrl_enable+0x10c>
    441e:	681e      	ldr	r6, [r3, #0]
    4420:	0771      	lsls	r1, r6, #29
    4422:	d401      	bmi.n	4428 <am_hal_cachectrl_enable+0x10c>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    4424:	3a09      	subs	r2, #9
    4426:	d1dd      	bne.n	43e4 <am_hal_cachectrl_enable+0xc8>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    4428:	796d      	ldrb	r5, [r5, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    442a:	4f05      	ldr	r7, [pc, #20]	; (4440 <am_hal_cachectrl_enable+0x124>)
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );
    442c:	022b      	lsls	r3, r5, #8
    442e:	f403 7100 	and.w	r1, r3, #512	; 0x200
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    4432:	f403 7280 	and.w	r2, r3, #256	; 0x100
    4436:	4311      	orrs	r1, r2
    4438:	430c      	orrs	r4, r1
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    443a:	603c      	str	r4, [r7, #0]
    443c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    443e:	bf00      	nop
    4440:	40018000 	.word	0x40018000
    4444:	40018008 	.word	0x40018008

00004448 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    4448:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    444a:	4604      	mov	r4, r0
    444c:	b120      	cbz	r0, 4458 <am_hal_clkgen_sysclk_select+0x10>
    444e:	4a06      	ldr	r2, [pc, #24]	; (4468 <am_hal_clkgen_sysclk_select+0x20>)
    4450:	4806      	ldr	r0, [pc, #24]	; (446c <am_hal_clkgen_sysclk_select+0x24>)
    4452:	2153      	movs	r1, #83	; 0x53
    4454:	f000 f8e8 	bl	4628 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    4458:	4b05      	ldr	r3, [pc, #20]	; (4470 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the required operating value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    445a:	4906      	ldr	r1, [pc, #24]	; (4474 <am_hal_clkgen_sysclk_select+0x2c>)
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    445c:	2047      	movs	r0, #71	; 0x47

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    445e:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    4460:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    4462:	600c      	str	r4, [r1, #0]
    AM_REG(CLKGEN, CLKKEY) = 0;
    4464:	601a      	str	r2, [r3, #0]
    4466:	bd10      	pop	{r4, pc}
    4468:	00005038 	.word	0x00005038
    446c:	00005070 	.word	0x00005070
    4470:	40004014 	.word	0x40004014
    4474:	40004018 	.word	0x40004018

00004478 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    4478:	4b04      	ldr	r3, [pc, #16]	; (448c <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    447a:	4905      	ldr	r1, [pc, #20]	; (4490 <am_hal_clkgen_sysclk_get+0x18>)
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    447c:	681a      	ldr	r2, [r3, #0]
            return 48000000;
    447e:	4805      	ldr	r0, [pc, #20]	; (4494 <am_hal_clkgen_sysclk_get+0x1c>)
    switch ( ui32ClockSetting )
    4480:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    4484:	bf08      	it	eq
    4486:	4608      	moveq	r0, r1
    4488:	4770      	bx	lr
    448a:	bf00      	nop
    448c:	40004018 	.word	0x40004018
    4490:	02dc6c00 	.word	0x02dc6c00
    4494:	016e3600 	.word	0x016e3600

00004498 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    4498:	0783      	lsls	r3, r0, #30
    449a:	d003      	beq.n	44a4 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    449c:	4b02      	ldr	r3, [pc, #8]	; (44a8 <am_hal_clkgen_osc_stop+0x10>)
    449e:	681a      	ldr	r2, [r3, #0]
    44a0:	4310      	orrs	r0, r2
    44a2:	6018      	str	r0, [r3, #0]
    44a4:	4770      	bx	lr
    44a6:	bf00      	nop
    44a8:	4000400c 	.word	0x4000400c

000044ac <am_hal_ctimer_int_service>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_service(uint32_t ui32Status)
{
    44ac:	b570      	push	{r4, r5, r6, lr}
    uint32_t ui32Clz;

    am_hal_ctimer_handler_t pfnHandler;

    ui32Status &= 0xFFFF;
    44ae:	b284      	uxth	r4, r0

    while ( ui32Status )
    44b0:	b184      	cbz	r4, 44d4 <am_hal_ctimer_int_service+0x28>
    44b2:	4e09      	ldr	r6, [pc, #36]	; (44d8 <am_hal_ctimer_int_service+0x2c>)
#endif

        //
        // Turn off the bit we picked in the working copy
        //
        ui32Status &= ~(0x80000000 >> ui32Clz);
    44b4:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
        ui32Clz = __builtin_clz(ui32Status);
    44b8:	fab4 f384 	clz	r3, r4

        //
        // Check the bit handler table to see if there is an interrupt handler
        // registered for this particular bit.
        //
        pfnHandler = am_hal_ctimer_ppfnHandlers[31 - ui32Clz];
    44bc:	f1c3 021f 	rsb	r2, r3, #31
        ui32Status &= ~(0x80000000 >> ui32Clz);
    44c0:	fa25 f003 	lsr.w	r0, r5, r3
        pfnHandler = am_hal_ctimer_ppfnHandlers[31 - ui32Clz];
    44c4:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
        ui32Status &= ~(0x80000000 >> ui32Clz);
    44c8:	ea24 0400 	bic.w	r4, r4, r0
        if ( pfnHandler )
    44cc:	b101      	cbz	r1, 44d0 <am_hal_ctimer_int_service+0x24>
        {
            //
            // If we found an interrupt handler routine, call it now.
            //
            pfnHandler();
    44ce:	4788      	blx	r1
    while ( ui32Status )
    44d0:	2c00      	cmp	r4, #0
    44d2:	d1f1      	bne.n	44b8 <am_hal_ctimer_int_service+0xc>
    44d4:	bd70      	pop	{r4, r5, r6, pc}
    44d6:	bf00      	nop
    44d8:	10006590 	.word	0x10006590

000044dc <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    44dc:	b570      	push	{r4, r5, r6, lr}
    44de:	b082      	sub	sp, #8
    44e0:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    44e2:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    44e4:	f000 f990 	bl	4808 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    44e8:	4d07      	ldr	r5, [pc, #28]	; (4508 <am_hal_ctimer_start+0x2c>)
    AM_CRITICAL_BEGIN_ASM
    44ea:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    44ec:	5971      	ldr	r1, [r6, r5]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    44ee:	f004 2308 	and.w	r3, r4, #134219776	; 0x8000800
    44f2:	ea21 0003 	bic.w	r0, r1, r3
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    44f6:	f004 1201 	and.w	r2, r4, #65537	; 0x10001
    44fa:	4302      	orrs	r2, r0
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    44fc:	5172      	str	r2, [r6, r5]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    44fe:	9801      	ldr	r0, [sp, #4]
    4500:	f000 f986 	bl	4810 <am_hal_interrupt_master_set>
} // am_hal_ctimer_start()
    4504:	b002      	add	sp, #8
    4506:	bd70      	pop	{r4, r5, r6, pc}
    4508:	4000800c 	.word	0x4000800c

0000450c <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    450c:	b570      	push	{r4, r5, r6, lr}
    450e:	b082      	sub	sp, #8
    4510:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    4512:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    4514:	f000 f978 	bl	4808 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    4518:	4d05      	ldr	r5, [pc, #20]	; (4530 <am_hal_ctimer_clear+0x24>)
    AM_CRITICAL_BEGIN_ASM
    451a:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    451c:	5971      	ldr	r1, [r6, r5]
    451e:	f004 2008 	and.w	r0, r4, #134219776	; 0x8000800
    4522:	4308      	orrs	r0, r1
    4524:	5170      	str	r0, [r6, r5]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    4526:	9801      	ldr	r0, [sp, #4]
    4528:	f000 f972 	bl	4810 <am_hal_interrupt_master_set>
} // am_hal_ctimer_clear()
    452c:	b002      	add	sp, #8
    452e:	bd70      	pop	{r4, r5, r6, pc}
    4530:	4000800c 	.word	0x4000800c

00004534 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    4534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4538:	b082      	sub	sp, #8
    453a:	4688      	mov	r8, r1
    453c:	461f      	mov	r7, r3
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    453e:	ea4f 1900 	mov.w	r9, r0, lsl #4
{
    4542:	4614      	mov	r4, r2
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    4544:	f000 f960 	bl	4808 <am_hal_interrupt_master_disable>
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    4548:	f8df a098 	ldr.w	sl, [pc, #152]	; 45e4 <am_hal_ctimer_period_set+0xb0>
    AM_CRITICAL_BEGIN_ASM
    454c:	9001      	str	r0, [sp, #4]
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    454e:	f518 3f80 	cmn.w	r8, #65536	; 0x10000
                                    AM_REG_CTIMER_CMPRA0_O +
    4552:	4d21      	ldr	r5, [pc, #132]	; (45d8 <am_hal_ctimer_period_set+0xa4>)
                                    AM_REG_CTIMER_CMPRB0_O +
    4554:	4e21      	ldr	r6, [pc, #132]	; (45dc <am_hal_ctimer_period_set+0xa8>)
    ui32Mode = *pui32ControlReg;
    4556:	f859 300a 	ldr.w	r3, [r9, sl]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    455a:	d01b      	beq.n	4594 <am_hal_ctimer_period_set+0x60>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    455c:	f403 70c0 	and.w	r0, r3, #384	; 0x180
    4560:	2880      	cmp	r0, #128	; 0x80
    4562:	d01c      	beq.n	459e <am_hal_ctimer_period_set+0x6a>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    4564:	f64f 77ff 	movw	r7, #65535	; 0xffff
    4568:	2300      	movs	r3, #0
    456a:	45b8      	cmp	r8, r7
        ui32Comp1 = 0;
    456c:	461a      	mov	r2, r3
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    456e:	d01d      	beq.n	45ac <am_hal_ctimer_period_set+0x78>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    4570:	491b      	ldr	r1, [pc, #108]	; (45e0 <am_hal_ctimer_period_set+0xac>)
    4572:	4588      	cmp	r8, r1
    4574:	d025      	beq.n	45c2 <am_hal_ctimer_period_set+0x8e>
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1 >> 16));
    4576:	400a      	ands	r2, r1
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    4578:	b2a0      	uxth	r0, r4
    457a:	4303      	orrs	r3, r0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    457c:	ea42 4414 	orr.w	r4, r2, r4, lsr #16
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    4580:	f849 3005 	str.w	r3, [r9, r5]
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    4584:	f849 4006 	str.w	r4, [r9, r6]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    4588:	9801      	ldr	r0, [sp, #4]
    458a:	f000 f941 	bl	4810 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    458e:	b002      	add	sp, #8
    4590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ui32Mode = ui32Mode >> 16;
    4594:	0c19      	lsrs	r1, r3, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    4596:	f401 70c0 	and.w	r0, r1, #384	; 0x180
    459a:	2880      	cmp	r0, #128	; 0x80
    459c:	d110      	bne.n	45c0 <am_hal_ctimer_period_set+0x8c>
    459e:	0423      	lsls	r3, r4, #16
        ui32Comp1 = ui32Period;
    45a0:	4622      	mov	r2, r4
        ui32Comp0 = ui32Period - ui32OnTime;
    45a2:	1be4      	subs	r4, r4, r7
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    45a4:	f64f 77ff 	movw	r7, #65535	; 0xffff
    45a8:	45b8      	cmp	r8, r7
    45aa:	d1e1      	bne.n	4570 <am_hal_ctimer_period_set+0x3c>
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    45ac:	b2a6      	uxth	r6, r4
    45ae:	4333      	orrs	r3, r6
    45b0:	f849 3005 	str.w	r3, [r9, r5]
    AM_CRITICAL_END_ASM
    45b4:	9801      	ldr	r0, [sp, #4]
    45b6:	f000 f92b 	bl	4810 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    45ba:	b002      	add	sp, #8
    45bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    45c0:	2300      	movs	r3, #0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    45c2:	b2a5      	uxth	r5, r4
    45c4:	432b      	orrs	r3, r5
    45c6:	f849 3006 	str.w	r3, [r9, r6]
    AM_CRITICAL_END_ASM
    45ca:	9801      	ldr	r0, [sp, #4]
    45cc:	f000 f920 	bl	4810 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    45d0:	b002      	add	sp, #8
    45d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    45d6:	bf00      	nop
    45d8:	40008004 	.word	0x40008004
    45dc:	40008008 	.word	0x40008008
    45e0:	ffff0000 	.word	0xffff0000
    45e4:	4000800c 	.word	0x4000800c

000045e8 <am_hal_ctimer_int_clear>:
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTCLR) = ui32Interrupt;
    45e8:	4b01      	ldr	r3, [pc, #4]	; (45f0 <am_hal_ctimer_int_clear+0x8>)
    45ea:	6018      	str	r0, [r3, #0]
    45ec:	4770      	bx	lr
    45ee:	bf00      	nop
    45f0:	40008208 	.word	0x40008208

000045f4 <am_hal_ctimer_int_status_get>:
//! @return Returns either the timer interrupt status.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_int_status_get(bool bEnabledOnly)
{
    45f4:	b510      	push	{r4, lr}
    45f6:	b082      	sub	sp, #8
    //
    // Return the desired status.
    //

    if ( bEnabledOnly )
    45f8:	b920      	cbnz	r0, 4604 <am_hal_ctimer_int_status_get+0x10>

        return u32RetVal;
    }
    else
    {
        return AM_REGn(CTIMER, 0, INTSTAT);
    45fa:	4b09      	ldr	r3, [pc, #36]	; (4620 <am_hal_ctimer_int_status_get+0x2c>)
    45fc:	681c      	ldr	r4, [r3, #0]
    }
} // am_hal_ctimer_int_status_get()
    45fe:	4620      	mov	r0, r4
    4600:	b002      	add	sp, #8
    4602:	bd10      	pop	{r4, pc}
        AM_CRITICAL_BEGIN_ASM
    4604:	f000 f900 	bl	4808 <am_hal_interrupt_master_disable>
        u32RetVal  = AM_REGn(CTIMER, 0, INTSTAT);
    4608:	4a05      	ldr	r2, [pc, #20]	; (4620 <am_hal_ctimer_int_status_get+0x2c>)
        u32RetVal &= AM_REGn(CTIMER, 0, INTEN);
    460a:	4906      	ldr	r1, [pc, #24]	; (4624 <am_hal_ctimer_int_status_get+0x30>)
        AM_CRITICAL_BEGIN_ASM
    460c:	9001      	str	r0, [sp, #4]
        u32RetVal  = AM_REGn(CTIMER, 0, INTSTAT);
    460e:	6814      	ldr	r4, [r2, #0]
        u32RetVal &= AM_REGn(CTIMER, 0, INTEN);
    4610:	680b      	ldr	r3, [r1, #0]
        AM_CRITICAL_END_ASM
    4612:	9801      	ldr	r0, [sp, #4]
        u32RetVal &= AM_REGn(CTIMER, 0, INTEN);
    4614:	401c      	ands	r4, r3
        AM_CRITICAL_END_ASM
    4616:	f000 f8fb 	bl	4810 <am_hal_interrupt_master_set>
} // am_hal_ctimer_int_status_get()
    461a:	4620      	mov	r0, r4
    461c:	b002      	add	sp, #8
    461e:	bd10      	pop	{r4, pc}
    4620:	40008204 	.word	0x40008204
    4624:	40008200 	.word	0x40008200

00004628 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    4628:	e7fe      	b.n	4628 <am_hal_debug_error>
    462a:	bf00      	nop

0000462c <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    462c:	4b00      	ldr	r3, [pc, #0]	; (4630 <am_hal_flash_delay+0x4>)
    462e:	4718      	bx	r3
    4630:	0800009d 	.word	0x0800009d

00004634 <am_hal_gpio_out_enable_bit_get>:
{
    //
    // Return 0 or 1.
    //

    return (AM_HAL_GPIO_EN(ui32BitNum) & AM_HAL_GPIO_EN_M(ui32BitNum)) ? 1 : 0;
    4634:	08c3      	lsrs	r3, r0, #3
    4636:	f003 0104 	and.w	r1, r3, #4
    463a:	4a04      	ldr	r2, [pc, #16]	; (464c <am_hal_gpio_out_enable_bit_get+0x18>)
    463c:	588b      	ldr	r3, [r1, r2]
    463e:	f000 001f 	and.w	r0, r0, #31
    4642:	fa23 f100 	lsr.w	r1, r3, r0
}
    4646:	f001 0001 	and.w	r0, r1, #1
    464a:	4770      	bx	lr
    464c:	400100a0 	.word	0x400100a0

00004650 <am_hal_gpio_int_enable>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_enable(uint64_t ui64InterruptMask)
{
    4650:	b410      	push	{r4}
    //
    // Enable the interrupts.
    //
    AM_REG(GPIO, INT1EN) |= (ui64InterruptMask >> 32);
    4652:	4c05      	ldr	r4, [pc, #20]	; (4668 <am_hal_gpio_int_enable+0x18>)
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    4654:	4a05      	ldr	r2, [pc, #20]	; (466c <am_hal_gpio_int_enable+0x1c>)
    AM_REG(GPIO, INT1EN) |= (ui64InterruptMask >> 32);
    4656:	6823      	ldr	r3, [r4, #0]
    4658:	4319      	orrs	r1, r3
    465a:	6021      	str	r1, [r4, #0]
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    465c:	6811      	ldr	r1, [r2, #0]
}
    465e:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    4662:	4308      	orrs	r0, r1
    4664:	6010      	str	r0, [r2, #0]
}
    4666:	4770      	bx	lr
    4668:	40010210 	.word	0x40010210
    466c:	40010200 	.word	0x40010200

00004670 <am_hal_gpio_int_clear>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_clear(uint64_t ui64InterruptMask)
{
    4670:	b530      	push	{r4, r5, lr}
    4672:	b083      	sub	sp, #12
    4674:	460d      	mov	r5, r1
    4676:	4604      	mov	r4, r0
    //
    // Clear the interrupts.
    //
    AM_CRITICAL_BEGIN_ASM
    4678:	f000 f8c6 	bl	4808 <am_hal_interrupt_master_disable>
    AM_REG(GPIO, INT1CLR) = (ui64InterruptMask >> 32);
    467c:	4a04      	ldr	r2, [pc, #16]	; (4690 <am_hal_gpio_int_clear+0x20>)
    AM_REG(GPIO, INT0CLR) = (ui64InterruptMask & 0xFFFFFFFF);
    467e:	4b05      	ldr	r3, [pc, #20]	; (4694 <am_hal_gpio_int_clear+0x24>)
    AM_CRITICAL_BEGIN_ASM
    4680:	9001      	str	r0, [sp, #4]
    AM_REG(GPIO, INT1CLR) = (ui64InterruptMask >> 32);
    4682:	6015      	str	r5, [r2, #0]
    AM_REG(GPIO, INT0CLR) = (ui64InterruptMask & 0xFFFFFFFF);
    4684:	601c      	str	r4, [r3, #0]
    AM_CRITICAL_END_ASM
    4686:	9801      	ldr	r0, [sp, #4]
    4688:	f000 f8c2 	bl	4810 <am_hal_interrupt_master_set>
}
    468c:	b003      	add	sp, #12
    468e:	bd30      	pop	{r4, r5, pc}
    4690:	40010218 	.word	0x40010218
    4694:	40010208 	.word	0x40010208

00004698 <am_hal_gpio_int_status_get>:
//! @return None
//
//*****************************************************************************
uint64_t
am_hal_gpio_int_status_get(bool bEnabledOnly)
{
    4698:	b570      	push	{r4, r5, r6, lr}
    469a:	b082      	sub	sp, #8
    469c:	4606      	mov	r6, r0
    //
    // Combine upper or lower GPIO words into one 64 bit return value.
    //
    ui64Mask   = 0xFFFFFFFFFFFFFFFF;

    AM_CRITICAL_BEGIN_ASM
    469e:	f000 f8b3 	bl	4808 <am_hal_interrupt_master_disable>
    ui64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    46a2:	4b0f      	ldr	r3, [pc, #60]	; (46e0 <am_hal_gpio_int_status_get+0x48>)
    AM_CRITICAL_BEGIN_ASM
    46a4:	9001      	str	r0, [sp, #4]
    ui64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    46a6:	f1a3 0110 	sub.w	r1, r3, #16
    ui64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    46aa:	681d      	ldr	r5, [r3, #0]
    ui64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    46ac:	680a      	ldr	r2, [r1, #0]
    ui64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    46ae:	2000      	movs	r0, #0
    ui64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    46b0:	ea40 0402 	orr.w	r4, r0, r2

    if ( bEnabledOnly )
    46b4:	b176      	cbz	r6, 46d4 <am_hal_gpio_int_status_get+0x3c>
    {
        ui64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
    46b6:	490b      	ldr	r1, [pc, #44]	; (46e4 <am_hal_gpio_int_status_get+0x4c>)
        ui64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
    46b8:	4a0b      	ldr	r2, [pc, #44]	; (46e8 <am_hal_gpio_int_status_get+0x50>)
        ui64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
    46ba:	680b      	ldr	r3, [r1, #0]
        ui64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
    46bc:	6811      	ldr	r1, [r2, #0]
        ui64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
    46be:	4606      	mov	r6, r0
        ui64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
    46c0:	430e      	orrs	r6, r1
    }

    ui64RetVal &= ui64Mask;
    AM_CRITICAL_END_ASM
    46c2:	9801      	ldr	r0, [sp, #4]
    ui64RetVal &= ui64Mask;
    46c4:	401d      	ands	r5, r3
    AM_CRITICAL_END_ASM
    46c6:	f000 f8a3 	bl	4810 <am_hal_interrupt_master_set>
    ui64RetVal &= ui64Mask;
    46ca:	4034      	ands	r4, r6

    return ui64RetVal;
}
    46cc:	4620      	mov	r0, r4
    46ce:	4629      	mov	r1, r5
    46d0:	b002      	add	sp, #8
    46d2:	bd70      	pop	{r4, r5, r6, pc}
    ui64Mask   = 0xFFFFFFFFFFFFFFFF;
    46d4:	f04f 36ff 	mov.w	r6, #4294967295
    46d8:	f04f 33ff 	mov.w	r3, #4294967295
    46dc:	e7f1      	b.n	46c2 <am_hal_gpio_int_status_get+0x2a>
    46de:	bf00      	nop
    46e0:	40010214 	.word	0x40010214
    46e4:	40010210 	.word	0x40010210
    46e8:	40010200 	.word	0x40010200

000046ec <am_hal_gpio_int_service>:
//! @return None.
//
//*****************************************************************************
void
am_hal_gpio_int_service(uint64_t ui64Status)
{
    46ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46ee:	460c      	mov	r4, r1

    //
    // Handle any active interrupts in the lower 32 bits
    //
    ui32Status = (uint32_t) ui64Status;
    while ( ui32Status )
    46f0:	b188      	cbz	r0, 4716 <am_hal_gpio_int_service+0x2a>
    46f2:	4f13      	ldr	r7, [pc, #76]	; (4740 <am_hal_gpio_int_service+0x54>)
    46f4:	4605      	mov	r5, r0
#endif

        //
        // Turn off the bit we picked in the working copy
        //
        ui32Status &= ~(0x80000000 >> ui32Clz);
    46f6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
        ui32Clz = __builtin_clz(ui32Status);
    46fa:	fab5 f385 	clz	r3, r5

        //
        // Check the bit handler table to see if there is an interrupt handler
        // registered for this particular bit.
        //
        pfnHandler = am_hal_gpio_ppfnHandlers[31 - ui32Clz];
    46fe:	f1c3 021f 	rsb	r2, r3, #31
        ui32Status &= ~(0x80000000 >> ui32Clz);
    4702:	fa26 f003 	lsr.w	r0, r6, r3
        pfnHandler = am_hal_gpio_ppfnHandlers[31 - ui32Clz];
    4706:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
        ui32Status &= ~(0x80000000 >> ui32Clz);
    470a:	ea25 0500 	bic.w	r5, r5, r0
        if ( pfnHandler )
    470e:	b101      	cbz	r1, 4712 <am_hal_gpio_int_service+0x26>
        {
            //
            // If we found an interrupt handler routine, call it now.
            //
            pfnHandler();
    4710:	4788      	blx	r1
    while ( ui32Status )
    4712:	2d00      	cmp	r5, #0
    4714:	d1f1      	bne.n	46fa <am_hal_gpio_int_service+0xe>

    //
    // Handle any active interrupts in the upper 32 bits
    //
    ui32Status = (uint32_t) (ui64Status >> 32);
    while ( ui32Status )
    4716:	b18c      	cbz	r4, 473c <am_hal_gpio_int_service+0x50>
    4718:	4f09      	ldr	r7, [pc, #36]	; (4740 <am_hal_gpio_int_service+0x54>)
#endif

        //
        // Turn off the bit we picked in the working copy
        //
        ui32Status &= ~(0x80000000 >> ui32Clz);
    471a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
        ui32Clz = __builtin_clz(ui32Status);
    471e:	fab4 fc84 	clz	ip, r4

        //
        // Check the bit handler table to see if there is an interrupt handler
        // registered for this particular bit.
        //
        pfnHandler = am_hal_gpio_ppfnHandlers[63 - ui32Clz];
    4722:	f1cc 023f 	rsb	r2, ip, #63	; 0x3f
        ui32Status &= ~(0x80000000 >> ui32Clz);
    4726:	fa26 f30c 	lsr.w	r3, r6, ip
        pfnHandler = am_hal_gpio_ppfnHandlers[63 - ui32Clz];
    472a:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
        ui32Status &= ~(0x80000000 >> ui32Clz);
    472e:	ea24 0403 	bic.w	r4, r4, r3
        if ( pfnHandler )
    4732:	b100      	cbz	r0, 4736 <am_hal_gpio_int_service+0x4a>
        {
            //
            // If we found an interrupt handler routine, call it now.
            //
            pfnHandler();
    4734:	4780      	blx	r0
    while ( ui32Status )
    4736:	2c00      	cmp	r4, #0
    4738:	d1f1      	bne.n	471e <am_hal_gpio_int_service+0x32>
    473a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    473c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    473e:	bf00      	nop
    4740:	100065d0 	.word	0x100065d0

00004744 <am_hal_gpio_int_register>:
                         am_hal_gpio_handler_t pfnHandler)
{
    //
    // Check to make sure the GPIO number is valid. (Debug builds only)
    //
    am_hal_debug_assert_msg(ui32GPIONumber < 64, "GPIO number out of range.");
    4744:	283f      	cmp	r0, #63	; 0x3f
{
    4746:	b538      	push	{r3, r4, r5, lr}
    4748:	4604      	mov	r4, r0
    474a:	460d      	mov	r5, r1
    am_hal_debug_assert_msg(ui32GPIONumber < 64, "GPIO number out of range.");
    474c:	d905      	bls.n	475a <am_hal_gpio_int_register+0x16>
    474e:	4a05      	ldr	r2, [pc, #20]	; (4764 <am_hal_gpio_int_register+0x20>)
    4750:	4805      	ldr	r0, [pc, #20]	; (4768 <am_hal_gpio_int_register+0x24>)
    4752:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    4756:	f7ff ff67 	bl	4628 <am_hal_debug_error>

    am_hal_gpio_ppfnHandlers[ui32GPIONumber] = pfnHandler;
    475a:	4b04      	ldr	r3, [pc, #16]	; (476c <am_hal_gpio_int_register+0x28>)
    475c:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
    4760:	bd38      	pop	{r3, r4, r5, pc}
    4762:	bf00      	nop
    4764:	00005088 	.word	0x00005088
    4768:	000050bc 	.word	0x000050bc
    476c:	100065d0 	.word	0x100065d0

00004770 <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    4770:	280f      	cmp	r0, #15
    4772:	d80b      	bhi.n	478c <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    4774:	2805      	cmp	r0, #5
    4776:	d013      	beq.n	47a0 <am_hal_interrupt_enable+0x30>
    4778:	2806      	cmp	r0, #6
    477a:	d017      	beq.n	47ac <am_hal_interrupt_enable+0x3c>
    477c:	2804      	cmp	r0, #4
    477e:	d104      	bne.n	478a <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    4780:	4a0d      	ldr	r2, [pc, #52]	; (47b8 <am_hal_interrupt_enable+0x48>)
    4782:	6813      	ldr	r3, [r2, #0]
    4784:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    4788:	6010      	str	r0, [r2, #0]
    478a:	4770      	bx	lr
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    478c:	f1a0 0310 	sub.w	r3, r0, #16
    4790:	f003 0c1f 	and.w	ip, r3, #31
    4794:	2001      	movs	r0, #1
    4796:	4909      	ldr	r1, [pc, #36]	; (47bc <am_hal_interrupt_enable+0x4c>)
    4798:	fa00 f20c 	lsl.w	r2, r0, ip
    479c:	600a      	str	r2, [r1, #0]
    479e:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    47a0:	4805      	ldr	r0, [pc, #20]	; (47b8 <am_hal_interrupt_enable+0x48>)
    47a2:	6801      	ldr	r1, [r0, #0]
    47a4:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    47a8:	6002      	str	r2, [r0, #0]
            break;
    47aa:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    47ac:	4902      	ldr	r1, [pc, #8]	; (47b8 <am_hal_interrupt_enable+0x48>)
    47ae:	680a      	ldr	r2, [r1, #0]
    47b0:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    47b4:	600b      	str	r3, [r1, #0]
            break;
    47b6:	4770      	bx	lr
    47b8:	e000ed24 	.word	0xe000ed24
    47bc:	e000e100 	.word	0xe000e100

000047c0 <am_hal_interrupt_priority_set>:
//! @return None
//
//*****************************************************************************
void
am_hal_interrupt_priority_set(uint32_t ui32Interrupt, uint32_t ui32Priority)
{
    47c0:	b410      	push	{r4}

    //
    // Find the correct priority register.
    //
    pui32PriorityReg = (volatile uint32_t *) AM_REG_NVIC_IPR0_O;
    pui32PriorityReg += ((ui32Interrupt - 16) >> 2);
    47c2:	f1a0 0310 	sub.w	r3, r0, #16
    47c6:	f023 0203 	bic.w	r2, r3, #3
    47ca:	f102 4460 	add.w	r4, r2, #3758096384	; 0xe0000000
    47ce:	f504 4c64 	add.w	ip, r4, #58368	; 0xe400
{
    47d2:	b083      	sub	sp, #12
    ui32Shift = (((ui32Interrupt - 16) & 0x3) * 8);

    //
    // Mask out the old priority.
    //
    ui32OldPriority = *pui32PriorityReg;
    47d4:	f8dc 3000 	ldr.w	r3, [ip]
    47d8:	9301      	str	r3, [sp, #4]
    ui32Shift = (((ui32Interrupt - 16) & 0x3) * 8);
    47da:	f000 0003 	and.w	r0, r0, #3
    ui32OldPriority &= ~(0xFF << ui32Shift);
    47de:	9a01      	ldr	r2, [sp, #4]
    ui32Shift = (((ui32Interrupt - 16) & 0x3) * 8);
    47e0:	00c0      	lsls	r0, r0, #3
    ui32OldPriority &= ~(0xFF << ui32Shift);
    47e2:	24ff      	movs	r4, #255	; 0xff
    47e4:	4084      	lsls	r4, r0
    47e6:	ea22 0304 	bic.w	r3, r2, r4
    47ea:	9301      	str	r3, [sp, #4]

    //
    // OR in the new priority.
    //
    *pui32PriorityReg = ui32OldPriority | (ui32Priority << ui32Shift);
    47ec:	9c01      	ldr	r4, [sp, #4]
    47ee:	4081      	lsls	r1, r0
    47f0:	4321      	orrs	r1, r4
    47f2:	f8cc 1000 	str.w	r1, [ip]
}
    47f6:	b003      	add	sp, #12
    47f8:	f85d 4b04 	ldr.w	r4, [sp], #4
    47fc:	4770      	bx	lr
    47fe:	bf00      	nop

00004800 <am_hal_interrupt_master_enable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    4800:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    4804:	b662      	cpsie	i
    __asm("    bx lr");
    4806:	4770      	bx	lr

00004808 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    4808:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    480c:	b672      	cpsid	i
    __asm("    bx lr");
    480e:	4770      	bx	lr

00004810 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    4810:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    4814:	4770      	bx	lr
    4816:	bf00      	nop

00004818 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    4818:	4b0d      	ldr	r3, [pc, #52]	; (4850 <am_hal_itm_enable+0x38>)
    481a:	6818      	ldr	r0, [r3, #0]
    481c:	07c2      	lsls	r2, r0, #31
    481e:	d416      	bmi.n	484e <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    4820:	4a0c      	ldr	r2, [pc, #48]	; (4854 <am_hal_itm_enable+0x3c>)
    4822:	6811      	ldr	r1, [r2, #0]
{
    4824:	b430      	push	{r4, r5}
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    4826:	f041 7480 	orr.w	r4, r1, #16777216	; 0x1000000
    482a:	6014      	str	r4, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    482c:	6815      	ldr	r5, [r2, #0]
    482e:	01eb      	lsls	r3, r5, #7
    4830:	d5fc      	bpl.n	482c <am_hal_itm_enable+0x14>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    4832:	4809      	ldr	r0, [pc, #36]	; (4858 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    4834:	4c09      	ldr	r4, [pc, #36]	; (485c <am_hal_itm_enable+0x44>)
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    4836:	4d0a      	ldr	r5, [pc, #40]	; (4860 <am_hal_itm_enable+0x48>)
    4838:	6005      	str	r5, [r0, #0]
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    483a:	250f      	movs	r5, #15
    483c:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    483e:	bc30      	pop	{r4, r5}
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    4840:	4908      	ldr	r1, [pc, #32]	; (4864 <am_hal_itm_enable+0x4c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    4842:	4b09      	ldr	r3, [pc, #36]	; (4868 <am_hal_itm_enable+0x50>)
    4844:	4a09      	ldr	r2, [pc, #36]	; (486c <am_hal_itm_enable+0x54>)
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    4846:	f04f 30ff 	mov.w	r0, #4294967295
    484a:	6008      	str	r0, [r1, #0]
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    484c:	601a      	str	r2, [r3, #0]
}
    484e:	4770      	bx	lr
    4850:	10006570 	.word	0x10006570
    4854:	e000edfc 	.word	0xe000edfc
    4858:	e0000fb0 	.word	0xe0000fb0
    485c:	e0000e40 	.word	0xe0000e40
    4860:	c5acce55 	.word	0xc5acce55
    4864:	e0000e00 	.word	0xe0000e00
    4868:	e0000e80 	.word	0xe0000e80
    486c:	00150511 	.word	0x00150511

00004870 <am_hal_itm_disable>:
//*****************************************************************************
void
am_hal_itm_disable(void)
{

    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    4870:	4b0f      	ldr	r3, [pc, #60]	; (48b0 <am_hal_itm_disable+0x40>)
    4872:	6818      	ldr	r0, [r3, #0]
    4874:	07c2      	lsls	r2, r0, #31
    4876:	d419      	bmi.n	48ac <am_hal_itm_disable+0x3c>
    }

    //
    // Make sure the ITM_TCR is unlocked.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    4878:	4b0e      	ldr	r3, [pc, #56]	; (48b4 <am_hal_itm_disable+0x44>)
    487a:	490f      	ldr	r1, [pc, #60]	; (48b8 <am_hal_itm_disable+0x48>)

    //
    // Make sure the ITM/TPIU is not busy.
    //
    while ( AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1) );
    487c:	4a0f      	ldr	r2, [pc, #60]	; (48bc <am_hal_itm_disable+0x4c>)
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    487e:	6019      	str	r1, [r3, #0]
    while ( AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1) );
    4880:	6810      	ldr	r0, [r2, #0]
    4882:	0203      	lsls	r3, r0, #8
    4884:	d4fc      	bmi.n	4880 <am_hal_itm_disable+0x10>
    //
    // Disable the ITM.
    //
    for (int ix = 0; ix < 100; ix++)
    {
        AM_REG(ITM, TCR) &= ~AM_REG_ITM_TCR_ITM_ENABLE(1);
    4886:	4a0d      	ldr	r2, [pc, #52]	; (48bc <am_hal_itm_disable+0x4c>)
        while ( AM_REG(ITM, TCR) & (AM_REG_ITM_TCR_ITM_ENABLE(1) | AM_REG_ITM_TCR_BUSY(1)) );
    4888:	490d      	ldr	r1, [pc, #52]	; (48c0 <am_hal_itm_disable+0x50>)
    488a:	2064      	movs	r0, #100	; 0x64
        AM_REG(ITM, TCR) &= ~AM_REG_ITM_TCR_ITM_ENABLE(1);
    488c:	6813      	ldr	r3, [r2, #0]
    488e:	f023 0301 	bic.w	r3, r3, #1
    4892:	6013      	str	r3, [r2, #0]
        while ( AM_REG(ITM, TCR) & (AM_REG_ITM_TCR_ITM_ENABLE(1) | AM_REG_ITM_TCR_BUSY(1)) );
    4894:	6813      	ldr	r3, [r2, #0]
    4896:	420b      	tst	r3, r1
    4898:	d1fc      	bne.n	4894 <am_hal_itm_disable+0x24>
    for (int ix = 0; ix < 100; ix++)
    489a:	3801      	subs	r0, #1
    489c:	d1f6      	bne.n	488c <am_hal_itm_disable+0x1c>

    //
    // Reset the TRCENA bit in the DEMCR register, which should disable the ITM
    // for operation.
    //
    AM_REG(SYSCTRL, DEMCR) &= ~AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    489e:	4a09      	ldr	r2, [pc, #36]	; (48c4 <am_hal_itm_disable+0x54>)

    //
    // Disable the TPIU clock source in MCU control.
    //
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    48a0:	4909      	ldr	r1, [pc, #36]	; (48c8 <am_hal_itm_disable+0x58>)
    AM_REG(SYSCTRL, DEMCR) &= ~AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    48a2:	6813      	ldr	r3, [r2, #0]
    48a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    48a8:	6013      	str	r3, [r2, #0]
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    48aa:	6008      	str	r0, [r1, #0]
    48ac:	4770      	bx	lr
    48ae:	bf00      	nop
    48b0:	10006570 	.word	0x10006570
    48b4:	e0000fb0 	.word	0xe0000fb0
    48b8:	c5acce55 	.word	0xc5acce55
    48bc:	e0000e80 	.word	0xe0000e80
    48c0:	00800001 	.word	0x00800001
    48c4:	e000edfc 	.word	0xe000edfc
    48c8:	40020250 	.word	0x40020250

000048cc <am_hal_itm_not_busy>:
am_hal_itm_not_busy(void)
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
    while (AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1));
    48cc:	4a03      	ldr	r2, [pc, #12]	; (48dc <am_hal_itm_not_busy+0x10>)
    48ce:	6813      	ldr	r3, [r2, #0]
    48d0:	021b      	lsls	r3, r3, #8
    48d2:	d4fc      	bmi.n	48ce <am_hal_itm_not_busy+0x2>

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    48d4:	f44f 7047 	mov.w	r0, #796	; 0x31c
    48d8:	f7ff bea8 	b.w	462c <am_hal_flash_delay>
    48dc:	e0000e80 	.word	0xe0000e80

000048e0 <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    48e0:	7803      	ldrb	r3, [r0, #0]
    48e2:	b1b3      	cbz	r3, 4912 <am_hal_itm_print+0x32>
{
    48e4:	b410      	push	{r4}
    48e6:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    48e8:	2400      	movs	r4, #0
    48ea:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    48ee:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    48f0:	2900      	cmp	r1, #0
    48f2:	d1fa      	bne.n	48ea <am_hal_itm_print+0xa>
    48f4:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    48f6:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    48fa:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    48fe:	f8dc 3000 	ldr.w	r3, [ip]
    4902:	2b00      	cmp	r3, #0
    4904:	d0fb      	beq.n	48fe <am_hal_itm_print+0x1e>
    while (ui32Length)
    4906:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    4908:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    490c:	d1f5      	bne.n	48fa <am_hal_itm_print+0x1a>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    490e:	f85d 4b04 	ldr.w	r4, [sp], #4
    4912:	4770      	bx	lr

00004914 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    4914:	490d      	ldr	r1, [pc, #52]	; (494c <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    4916:	4b0e      	ldr	r3, [pc, #56]	; (4950 <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    4918:	4a0e      	ldr	r2, [pc, #56]	; (4954 <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    491a:	681b      	ldr	r3, [r3, #0]
{
    491c:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    491e:	680d      	ldr	r5, [r1, #0]
    4920:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    4922:	6815      	ldr	r5, [r2, #0]
    4924:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    4926:	4c0c      	ldr	r4, [pc, #48]	; (4958 <am_hal_mcuctrl_fault_status+0x44>)
    4928:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    492a:	4329      	orrs	r1, r5
    492c:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    492e:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    4930:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    4934:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    4936:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    4938:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    493c:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    4940:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    4942:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    4944:	6142      	str	r2, [r0, #20]
}
    4946:	bc70      	pop	{r4, r5, r6}
    4948:	4770      	bx	lr
    494a:	bf00      	nop
    494c:	400201c4 	.word	0x400201c4
    4950:	400201cc 	.word	0x400201cc
    4954:	400201c0 	.word	0x400201c0
    4958:	400201c8 	.word	0x400201c8

0000495c <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    495c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
{
    4960:	b430      	push	{r4, r5}
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    4962:	d03a      	beq.n	49da <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    4964:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    4968:	f000 809d 	beq.w	4aa6 <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    496c:	2801      	cmp	r0, #1
    496e:	f000 809d 	beq.w	4aac <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    4972:	2803      	cmp	r0, #3
    4974:	f000 80a6 	beq.w	4ac4 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    4978:	2807      	cmp	r0, #7
    497a:	f000 809c 	beq.w	4ab6 <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    497e:	280f      	cmp	r0, #15
    4980:	f000 80a5 	beq.w	4ace <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    4984:	281f      	cmp	r0, #31
    4986:	f000 80b0 	beq.w	4aea <am_hal_pwrctrl_memory_enable+0x18e>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    498a:	283f      	cmp	r0, #63	; 0x3f
    498c:	f000 80b4 	beq.w	4af8 <am_hal_pwrctrl_memory_enable+0x19c>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    4990:	287f      	cmp	r0, #127	; 0x7f
    4992:	f000 80b8 	beq.w	4b06 <am_hal_pwrctrl_memory_enable+0x1aa>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    4996:	28ff      	cmp	r0, #255	; 0xff
    4998:	f000 80a0 	beq.w	4adc <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    499c:	f240 13ff 	movw	r3, #511	; 0x1ff
    49a0:	4298      	cmp	r0, r3
    49a2:	f000 80b7 	beq.w	4b14 <am_hal_pwrctrl_memory_enable+0x1b8>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    49a6:	f240 31ff 	movw	r1, #1023	; 0x3ff
    49aa:	4288      	cmp	r0, r1
    49ac:	f000 80b8 	beq.w	4b20 <am_hal_pwrctrl_memory_enable+0x1c4>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    49b0:	f240 72ff 	movw	r2, #2047	; 0x7ff
    49b4:	4290      	cmp	r0, r2
    49b6:	d00e      	beq.n	49d6 <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    49b8:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    49bc:	f000 80b6 	beq.w	4b2c <am_hal_pwrctrl_memory_enable+0x1d0>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    49c0:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    49c4:	42a0      	cmp	r0, r4
    49c6:	f000 80b4 	beq.w	4b32 <am_hal_pwrctrl_memory_enable+0x1d6>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    49ca:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    49ce:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    49d2:	4560      	cmp	r0, ip
    49d4:	d132      	bne.n	4a3c <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    49d6:	495b      	ldr	r1, [pc, #364]	; (4b44 <am_hal_pwrctrl_memory_enable+0x1e8>)
    49d8:	e066      	b.n	4aa8 <am_hal_pwrctrl_memory_enable+0x14c>
    49da:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    49de:	2340      	movs	r3, #64	; 0x40
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    49e0:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    49e2:	4c59      	ldr	r4, [pc, #356]	; (4b48 <am_hal_pwrctrl_memory_enable+0x1ec>)
    49e4:	6825      	ldr	r5, [r4, #0]
    49e6:	402a      	ands	r2, r5
    49e8:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    49ea:	4a57      	ldr	r2, [pc, #348]	; (4b48 <am_hal_pwrctrl_memory_enable+0x1ec>)
    49ec:	6814      	ldr	r4, [r2, #0]
    49ee:	4320      	orrs	r0, r4
    49f0:	6010      	str	r0, [r2, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    49f2:	2b00      	cmp	r3, #0
    49f4:	d029      	beq.n	4a4a <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    49f6:	4d55      	ldr	r5, [pc, #340]	; (4b4c <am_hal_pwrctrl_memory_enable+0x1f0>)
    49f8:	6828      	ldr	r0, [r5, #0]
        while ( --i32TOcnt              &&
    49fa:	4218      	tst	r0, r3
    49fc:	bf18      	it	ne
    49fe:	20c6      	movne	r0, #198	; 0xc6
    4a00:	d01f      	beq.n	4a42 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    4a02:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    4a04:	421a      	tst	r2, r3
    4a06:	d01c      	beq.n	4a42 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    4a08:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    4a0a:	421c      	tst	r4, r3
    4a0c:	d019      	beq.n	4a42 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    4a0e:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    4a10:	421a      	tst	r2, r3
    4a12:	d016      	beq.n	4a42 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    4a14:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    4a16:	421c      	tst	r4, r3
    4a18:	d013      	beq.n	4a42 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    4a1a:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    4a1c:	421a      	tst	r2, r3
    4a1e:	d010      	beq.n	4a42 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    4a20:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    4a22:	421c      	tst	r4, r3
    4a24:	d00d      	beq.n	4a42 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    4a26:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    4a28:	421a      	tst	r2, r3
    4a2a:	d00a      	beq.n	4a42 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    4a2c:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    4a2e:	421c      	tst	r4, r3
    4a30:	d007      	beq.n	4a42 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    4a32:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    4a34:	421a      	tst	r2, r3
    4a36:	d004      	beq.n	4a42 <am_hal_pwrctrl_memory_enable+0xe6>
    4a38:	3809      	subs	r0, #9
    4a3a:	d1e2      	bne.n	4a02 <am_hal_pwrctrl_memory_enable+0xa6>
        return false;
    4a3c:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    4a3e:	bc30      	pop	{r4, r5}
    4a40:	4770      	bx	lr
    if ( ui32PwrStatEnMask )
    4a42:	b911      	cbnz	r1, 4a4a <am_hal_pwrctrl_memory_enable+0xee>
    return true;
    4a44:	2001      	movs	r0, #1
}
    4a46:	bc30      	pop	{r4, r5}
    4a48:	4770      	bx	lr
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4a4a:	4b40      	ldr	r3, [pc, #256]	; (4b4c <am_hal_pwrctrl_memory_enable+0x1f0>)
    4a4c:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    4a4e:	ea31 0405 	bics.w	r4, r1, r5
    4a52:	bf18      	it	ne
    4a54:	24c6      	movne	r4, #198	; 0xc6
    4a56:	d0f5      	beq.n	4a44 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4a58:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    4a5a:	ea31 0000 	bics.w	r0, r1, r0
    4a5e:	d0f1      	beq.n	4a44 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4a60:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    4a62:	ea31 0002 	bics.w	r0, r1, r2
    4a66:	d0ed      	beq.n	4a44 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4a68:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    4a6a:	ea31 0005 	bics.w	r0, r1, r5
    4a6e:	d0e9      	beq.n	4a44 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4a70:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    4a72:	ea31 0000 	bics.w	r0, r1, r0
    4a76:	d0e5      	beq.n	4a44 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4a78:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    4a7a:	ea31 0002 	bics.w	r0, r1, r2
    4a7e:	d0e1      	beq.n	4a44 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4a80:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    4a82:	ea31 0005 	bics.w	r0, r1, r5
    4a86:	d0dd      	beq.n	4a44 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4a88:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    4a8a:	ea31 0000 	bics.w	r0, r1, r0
    4a8e:	d0d9      	beq.n	4a44 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4a90:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    4a92:	ea31 0002 	bics.w	r0, r1, r2
    4a96:	d0d5      	beq.n	4a44 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4a98:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    4a9a:	ea31 0005 	bics.w	r0, r1, r5
    4a9e:	d0d1      	beq.n	4a44 <am_hal_pwrctrl_memory_enable+0xe8>
    4aa0:	3c09      	subs	r4, #9
    4aa2:	d1d9      	bne.n	4a58 <am_hal_pwrctrl_memory_enable+0xfc>
    4aa4:	e7ca      	b.n	4a3c <am_hal_pwrctrl_memory_enable+0xe0>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    4aa6:	2160      	movs	r1, #96	; 0x60
{
    4aa8:	2300      	movs	r3, #0
    4aaa:	e79e      	b.n	49ea <am_hal_pwrctrl_memory_enable+0x8e>
    4aac:	4a28      	ldr	r2, [pc, #160]	; (4b50 <am_hal_pwrctrl_memory_enable+0x1f4>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    4aae:	4b29      	ldr	r3, [pc, #164]	; (4b54 <am_hal_pwrctrl_memory_enable+0x1f8>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    4ab0:	f44f 7180 	mov.w	r1, #256	; 0x100
    4ab4:	e795      	b.n	49e2 <am_hal_pwrctrl_memory_enable+0x86>
    4ab6:	f46f 62ff 	mvn.w	r2, #2040	; 0x7f8
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    4aba:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    4abe:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    4ac2:	e78e      	b.n	49e2 <am_hal_pwrctrl_memory_enable+0x86>
    4ac4:	4a24      	ldr	r2, [pc, #144]	; (4b58 <am_hal_pwrctrl_memory_enable+0x1fc>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    4ac6:	4b25      	ldr	r3, [pc, #148]	; (4b5c <am_hal_pwrctrl_memory_enable+0x200>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    4ac8:	f44f 7140 	mov.w	r1, #768	; 0x300
    4acc:	e789      	b.n	49e2 <am_hal_pwrctrl_memory_enable+0x86>
    4ace:	f46f 62fe 	mvn.w	r2, #2032	; 0x7f0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    4ad2:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    4ad6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    4ada:	e782      	b.n	49e2 <am_hal_pwrctrl_memory_enable+0x86>
    4adc:	f46f 62e0 	mvn.w	r2, #1792	; 0x700
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    4ae0:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    4ae4:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    4ae8:	e77b      	b.n	49e2 <am_hal_pwrctrl_memory_enable+0x86>
    4aea:	f46f 62fc 	mvn.w	r2, #2016	; 0x7e0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    4aee:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    4af2:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    4af6:	e774      	b.n	49e2 <am_hal_pwrctrl_memory_enable+0x86>
    4af8:	f46f 62f8 	mvn.w	r2, #1984	; 0x7c0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    4afc:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    4b00:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    4b04:	e76d      	b.n	49e2 <am_hal_pwrctrl_memory_enable+0x86>
    4b06:	f46f 62f0 	mvn.w	r2, #1920	; 0x780
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    4b0a:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    4b0e:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    4b12:	e766      	b.n	49e2 <am_hal_pwrctrl_memory_enable+0x86>
    4b14:	f46f 62c0 	mvn.w	r2, #1536	; 0x600
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    4b18:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    4b1c:	4910      	ldr	r1, [pc, #64]	; (4b60 <am_hal_pwrctrl_memory_enable+0x204>)
    4b1e:	e760      	b.n	49e2 <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    4b20:	4910      	ldr	r1, [pc, #64]	; (4b64 <am_hal_pwrctrl_memory_enable+0x208>)
    4b22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    4b26:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    4b2a:	e75a      	b.n	49e2 <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    4b2c:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    4b30:	e7ba      	b.n	4aa8 <am_hal_pwrctrl_memory_enable+0x14c>
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    4b32:	4805      	ldr	r0, [pc, #20]	; (4b48 <am_hal_pwrctrl_memory_enable+0x1ec>)
    4b34:	6803      	ldr	r3, [r0, #0]
    4b36:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    4b3a:	6001      	str	r1, [r0, #0]
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    4b3c:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
        ui32PwrStatEnMask  = 0;
    4b40:	2100      	movs	r1, #0
    4b42:	e758      	b.n	49f6 <am_hal_pwrctrl_memory_enable+0x9a>
    4b44:	0007ff00 	.word	0x0007ff00
    4b48:	40021010 	.word	0x40021010
    4b4c:	40021014 	.word	0x40021014
    4b50:	fffff801 	.word	0xfffff801
    4b54:	0007fe00 	.word	0x0007fe00
    4b58:	fffff803 	.word	0xfffff803
    4b5c:	0007fc00 	.word	0x0007fc00
    4b60:	0001ff00 	.word	0x0001ff00
    4b64:	0003ff00 	.word	0x0003ff00

00004b68 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    4b68:	4b0f      	ldr	r3, [pc, #60]	; (4ba8 <am_hal_pwrctrl_bucks_init+0x40>)
    4b6a:	681a      	ldr	r2, [r3, #0]
    4b6c:	0792      	lsls	r2, r2, #30
    4b6e:	d502      	bpl.n	4b76 <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    4b70:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    4b72:	07c3      	lsls	r3, r0, #31
    4b74:	d40e      	bmi.n	4b94 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    4b76:	4b0d      	ldr	r3, [pc, #52]	; (4bac <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    4b78:	4a0b      	ldr	r2, [pc, #44]	; (4ba8 <am_hal_pwrctrl_bucks_init+0x40>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    4b7a:	6819      	ldr	r1, [r3, #0]
    4b7c:	f041 0002 	orr.w	r0, r1, #2
    4b80:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    4b82:	6819      	ldr	r1, [r3, #0]
    4b84:	f041 0001 	orr.w	r0, r1, #1
    4b88:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    4b8a:	6813      	ldr	r3, [r2, #0]
    4b8c:	f003 0103 	and.w	r1, r3, #3
    4b90:	2903      	cmp	r1, #3
    4b92:	d1fa      	bne.n	4b8a <am_hal_pwrctrl_bucks_init+0x22>
    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    4b94:	4a04      	ldr	r2, [pc, #16]	; (4ba8 <am_hal_pwrctrl_bucks_init+0x40>)
    4b96:	6810      	ldr	r0, [r2, #0]
    4b98:	f000 0303 	and.w	r3, r0, #3
    4b9c:	2b03      	cmp	r3, #3
    4b9e:	d1fa      	bne.n	4b96 <am_hal_pwrctrl_bucks_init+0x2e>
    am_hal_flash_delay(200 / 3);
    4ba0:	2042      	movs	r0, #66	; 0x42
    4ba2:	f7ff bd43 	b.w	462c <am_hal_flash_delay>
    4ba6:	bf00      	nop
    4ba8:	40021004 	.word	0x40021004
    4bac:	40021000 	.word	0x40021000

00004bb0 <am_hal_pwrctrl_bucks_enable>:
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    4bb0:	4b0b      	ldr	r3, [pc, #44]	; (4be0 <am_hal_pwrctrl_bucks_enable+0x30>)
    4bb2:	681a      	ldr	r2, [r3, #0]
    4bb4:	0792      	lsls	r2, r2, #30
    4bb6:	d502      	bpl.n	4bbe <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    4bb8:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    4bba:	07c3      	lsls	r3, r0, #31
    4bbc:	d40e      	bmi.n	4bdc <am_hal_pwrctrl_bucks_enable+0x2c>
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    4bbe:	4b09      	ldr	r3, [pc, #36]	; (4be4 <am_hal_pwrctrl_bucks_enable+0x34>)
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    4bc0:	4a07      	ldr	r2, [pc, #28]	; (4be0 <am_hal_pwrctrl_bucks_enable+0x30>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    4bc2:	6819      	ldr	r1, [r3, #0]
    4bc4:	f041 0002 	orr.w	r0, r1, #2
    4bc8:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    4bca:	6819      	ldr	r1, [r3, #0]
    4bcc:	f041 0001 	orr.w	r0, r1, #1
    4bd0:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    4bd2:	6813      	ldr	r3, [r2, #0]
    4bd4:	f003 0103 	and.w	r1, r3, #3
    4bd8:	2903      	cmp	r1, #3
    4bda:	d1fa      	bne.n	4bd2 <am_hal_pwrctrl_bucks_enable+0x22>
    4bdc:	4770      	bx	lr
    4bde:	bf00      	nop
    4be0:	40021004 	.word	0x40021004
    4be4:	40021000 	.word	0x40021000

00004be8 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    4be8:	4b12      	ldr	r3, [pc, #72]	; (4c34 <am_hal_pwrctrl_bucks_disable+0x4c>)
    4bea:	681a      	ldr	r2, [r3, #0]
    4bec:	0792      	lsls	r2, r2, #30
    4bee:	d402      	bmi.n	4bf6 <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    4bf0:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    4bf2:	07c3      	lsls	r3, r0, #31
    4bf4:	d51c      	bpl.n	4c30 <am_hal_pwrctrl_bucks_disable+0x48>
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    4bf6:	4910      	ldr	r1, [pc, #64]	; (4c38 <am_hal_pwrctrl_bucks_disable+0x50>)
    4bf8:	680b      	ldr	r3, [r1, #0]
    4bfa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    4bfe:	2a20      	cmp	r2, #32
    4c00:	d00b      	beq.n	4c1a <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    4c02:	4b0e      	ldr	r3, [pc, #56]	; (4c3c <am_hal_pwrctrl_bucks_disable+0x54>)
    4c04:	681a      	ldr	r2, [r3, #0]
    4c06:	f022 0002 	bic.w	r0, r2, #2
    4c0a:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    4c0c:	6819      	ldr	r1, [r3, #0]
    4c0e:	f021 0201 	bic.w	r2, r1, #1
    4c12:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    4c14:	200a      	movs	r0, #10
    4c16:	f7ff bd09 	b.w	462c <am_hal_flash_delay>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_PWRADC_EN) )
    4c1a:	4809      	ldr	r0, [pc, #36]	; (4c40 <am_hal_pwrctrl_bucks_disable+0x58>)
    4c1c:	6801      	ldr	r1, [r0, #0]
    if ( isRev_ADC()  &&
    4c1e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    4c22:	d1ee      	bne.n	4c02 <am_hal_pwrctrl_bucks_disable+0x1a>
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    4c24:	4805      	ldr	r0, [pc, #20]	; (4c3c <am_hal_pwrctrl_bucks_disable+0x54>)
    4c26:	6803      	ldr	r3, [r0, #0]
    4c28:	f003 0105 	and.w	r1, r3, #5
    4c2c:	6001      	str	r1, [r0, #0]
    4c2e:	e7f1      	b.n	4c14 <am_hal_pwrctrl_bucks_disable+0x2c>
    4c30:	4770      	bx	lr
    4c32:	bf00      	nop
    4c34:	40021004 	.word	0x40021004
    4c38:	4002000c 	.word	0x4002000c
    4c3c:	40021000 	.word	0x40021000
    4c40:	40021008 	.word	0x40021008

00004c44 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    4c44:	4905      	ldr	r1, [pc, #20]	; (4c5c <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    4c46:	4a06      	ldr	r2, [pc, #24]	; (4c60 <am_hal_pwrctrl_low_power_init+0x1c>)
    AM_REG(PWRCTRL, SRAMCTRL) |=
    4c48:	680b      	ldr	r3, [r1, #0]
    4c4a:	f043 0006 	orr.w	r0, r3, #6
    4c4e:	6008      	str	r0, [r1, #0]
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    4c50:	6811      	ldr	r1, [r2, #0]
    4c52:	f021 0304 	bic.w	r3, r1, #4
    4c56:	6013      	str	r3, [r2, #0]
    4c58:	4770      	bx	lr
    4c5a:	bf00      	nop
    4c5c:	40021018 	.word	0x40021018
    4c60:	40021000 	.word	0x40021000

00004c64 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    4c64:	4a05      	ldr	r2, [pc, #20]	; (4c7c <am_hal_rtc_osc_select+0x18>)
    4c66:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    4c68:	b918      	cbnz	r0, 4c72 <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    4c6a:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    4c6e:	6010      	str	r0, [r2, #0]
    4c70:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    4c72:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    4c76:	6011      	str	r1, [r2, #0]
    4c78:	4770      	bx	lr
    4c7a:	bf00      	nop
    4c7c:	4000400c 	.word	0x4000400c

00004c80 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    4c80:	4a02      	ldr	r2, [pc, #8]	; (4c8c <am_hal_rtc_osc_disable+0xc>)
    4c82:	6813      	ldr	r3, [r2, #0]
    4c84:	f043 0010 	orr.w	r0, r3, #16
    4c88:	6010      	str	r0, [r2, #0]
    4c8a:	4770      	bx	lr
    4c8c:	40004050 	.word	0x40004050

00004c90 <am_hal_stimer_config>:
    uint32_t ui32CurrVal;

    //
    // Read the current config
    //
    ui32CurrVal = AM_REG(CTIMER, STCFG);
    4c90:	4b0c      	ldr	r3, [pc, #48]	; (4cc4 <am_hal_stimer_config+0x34>)
    4c92:	6819      	ldr	r1, [r3, #0]

    //
    // Write our configuration value.
    //
    AM_REG(CTIMER, STCFG) = ui32STimerConfig;
    4c94:	6018      	str	r0, [r3, #0]

    //
    // If all of the clock sources are not HFRC, disable LDO when sleeping if timers are enabled.
    //
    if ( (AM_BFR(CTIMER, STCFG, CLKSEL) == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV16)   ||
    4c96:	681a      	ldr	r2, [r3, #0]
    4c98:	f002 000f 	and.w	r0, r2, #15
    4c9c:	2801      	cmp	r0, #1
         (AM_BFR(CTIMER, STCFG, CLKSEL) == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV256) )
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    4c9e:	4a0a      	ldr	r2, [pc, #40]	; (4cc8 <am_hal_stimer_config+0x38>)
    if ( (AM_BFR(CTIMER, STCFG, CLKSEL) == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV16)   ||
    4ca0:	d00a      	beq.n	4cb8 <am_hal_stimer_config+0x28>
         (AM_BFR(CTIMER, STCFG, CLKSEL) == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV256) )
    4ca2:	681b      	ldr	r3, [r3, #0]
    4ca4:	f003 000f 	and.w	r0, r3, #15
    if ( (AM_BFR(CTIMER, STCFG, CLKSEL) == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV16)   ||
    4ca8:	2802      	cmp	r0, #2
    4caa:	d005      	beq.n	4cb8 <am_hal_stimer_config+0x28>
    }
    else
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 1);
    4cac:	6813      	ldr	r3, [r2, #0]
    4cae:	f043 0004 	orr.w	r0, r3, #4
    4cb2:	6010      	str	r0, [r2, #0]
    }
    return ui32CurrVal;
}
    4cb4:	4608      	mov	r0, r1
    4cb6:	4770      	bx	lr
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    4cb8:	6813      	ldr	r3, [r2, #0]
    4cba:	f023 0004 	bic.w	r0, r3, #4
    4cbe:	6010      	str	r0, [r2, #0]
}
    4cc0:	4608      	mov	r0, r1
    4cc2:	4770      	bx	lr
    4cc4:	40008100 	.word	0x40008100
    4cc8:	40021020 	.word	0x40021020

00004ccc <am_hal_stimer_counter_get>:
//
//*****************************************************************************
uint32_t
am_hal_stimer_counter_get(void)
{
    return AM_REG(CTIMER, STTMR);
    4ccc:	4b01      	ldr	r3, [pc, #4]	; (4cd4 <am_hal_stimer_counter_get+0x8>)
    4cce:	6818      	ldr	r0, [r3, #0]
}
    4cd0:	4770      	bx	lr
    4cd2:	bf00      	nop
    4cd4:	40008104 	.word	0x40008104

00004cd8 <am_hal_stimer_compare_delta_set>:
void
am_hal_stimer_compare_delta_set(uint32_t ui32CmprInstance, uint32_t ui32Delta)
{
    uint32_t cfgVal;
    uint32_t ui32Critical = 0;
    if ( ui32CmprInstance > 7 )
    4cd8:	2807      	cmp	r0, #7
    4cda:	d900      	bls.n	4cde <am_hal_stimer_compare_delta_set+0x6>
    4cdc:	4770      	bx	lr
{
    4cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    {
        return;
    }

    cfgVal = AM_REG(CTIMER, STCFG);
    4ce2:	4e0d      	ldr	r6, [pc, #52]	; (4d18 <am_hal_stimer_compare_delta_set+0x40>)
    // That leaves a corner case where we could miss the trigger if setting a very
    // small delta. To avoid this, we take critical section, and we should ensure
    // that delta value is at least > 1

    // Disable the compare if already enabled, when setting the new value
    AM_REG(CTIMER, STCFG) &= ~((AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance));
    4ce4:	f44f 7580 	mov.w	r5, #256	; 0x100
    cfgVal = AM_REG(CTIMER, STCFG);
    4ce8:	f8d6 8000 	ldr.w	r8, [r6]
    AM_REG(CTIMER, STCFG) &= ~((AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance));
    4cec:	6833      	ldr	r3, [r6, #0]
    4cee:	4085      	lsls	r5, r0
    4cf0:	4604      	mov	r4, r0
    4cf2:	ea23 0005 	bic.w	r0, r3, r5
    4cf6:	6030      	str	r0, [r6, #0]
    4cf8:	460f      	mov	r7, r1
    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    4cfa:	f7ff fd85 	bl	4808 <am_hal_interrupt_master_disable>
    AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance)) = ui32Delta;
    4cfe:	4907      	ldr	r1, [pc, #28]	; (4d1c <am_hal_stimer_compare_delta_set+0x44>)
    4d00:	4421      	add	r1, r4
    4d02:	008a      	lsls	r2, r1, #2
    // Restore Compare Enable bit
    AM_REG(CTIMER, STCFG) |= cfgVal & (AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance);
    4d04:	ea05 0408 	and.w	r4, r5, r8
    AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance)) = ui32Delta;
    4d08:	6017      	str	r7, [r2, #0]
    AM_REG(CTIMER, STCFG) |= cfgVal & (AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance);
    4d0a:	6837      	ldr	r7, [r6, #0]
    4d0c:	433c      	orrs	r4, r7
    4d0e:	6034      	str	r4, [r6, #0]
    //
    // End the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
}
    4d10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    am_hal_interrupt_master_set(ui32Critical);
    4d14:	f7ff bd7c 	b.w	4810 <am_hal_interrupt_master_set>
    4d18:	40008100 	.word	0x40008100
    4d1c:	10002044 	.word	0x10002044

00004d20 <am_hal_stimer_int_enable>:
am_hal_stimer_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, STMINTEN) |= ui32Interrupt;
    4d20:	4a02      	ldr	r2, [pc, #8]	; (4d2c <am_hal_stimer_int_enable+0xc>)
    4d22:	6813      	ldr	r3, [r2, #0]
    4d24:	4318      	orrs	r0, r3
    4d26:	6010      	str	r0, [r2, #0]
    4d28:	4770      	bx	lr
    4d2a:	bf00      	nop
    4d2c:	40008300 	.word	0x40008300

00004d30 <am_hal_stimer_int_clear>:
am_hal_stimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, STMINTCLR) = ui32Interrupt;
    4d30:	4b01      	ldr	r3, [pc, #4]	; (4d38 <am_hal_stimer_int_clear+0x8>)
    4d32:	6018      	str	r0, [r3, #0]
    4d34:	4770      	bx	lr
    4d36:	bf00      	nop
    4d38:	40008308 	.word	0x40008308

00004d3c <am_hal_stimer_int_status_get>:
am_hal_stimer_int_status_get(bool bEnabledOnly)
{
    //
    // Return the desired status.
    //
    uint32_t ui32RetVal = AM_REGn(CTIMER, 0, STMINTSTAT);
    4d3c:	4b03      	ldr	r3, [pc, #12]	; (4d4c <am_hal_stimer_int_status_get+0x10>)
    4d3e:	6819      	ldr	r1, [r3, #0]

    if ( bEnabledOnly )
    4d40:	b110      	cbz	r0, 4d48 <am_hal_stimer_int_status_get+0xc>
    {
        ui32RetVal &= AM_REGn(CTIMER, 0, STMINTEN);
    4d42:	4a03      	ldr	r2, [pc, #12]	; (4d50 <am_hal_stimer_int_status_get+0x14>)
    4d44:	6810      	ldr	r0, [r2, #0]
    4d46:	4001      	ands	r1, r0
    }

    return ui32RetVal;
}
    4d48:	4608      	mov	r0, r1
    4d4a:	4770      	bx	lr
    4d4c:	40008304 	.word	0x40008304
    4d50:	40008300 	.word	0x40008300

00004d54 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    4d54:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d56:	b083      	sub	sp, #12
    4d58:	4604      	mov	r4, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    4d5a:	f7ff fd55 	bl	4808 <am_hal_interrupt_master_disable>
    4d5e:	4605      	mov	r5, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    4d60:	b124      	cbz	r4, 4d6c <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    4d62:	4b42      	ldr	r3, [pc, #264]	; (4e6c <am_hal_sysctrl_sleep+0x118>)
    4d64:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    4d66:	f010 0c01 	ands.w	ip, r0, #1
    4d6a:	d00a      	beq.n	4d82 <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    4d6c:	4a40      	ldr	r2, [pc, #256]	; (4e70 <am_hal_sysctrl_sleep+0x11c>)
    4d6e:	6811      	ldr	r1, [r2, #0]
    4d70:	f021 0604 	bic.w	r6, r1, #4
    4d74:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    4d76:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    4d78:	4628      	mov	r0, r5
    4d7a:	f7ff fd49 	bl	4810 <am_hal_interrupt_master_set>
}
    4d7e:	b003      	add	sp, #12
    4d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    4d82:	4c3b      	ldr	r4, [pc, #236]	; (4e70 <am_hal_sysctrl_sleep+0x11c>)
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    4d84:	4b3b      	ldr	r3, [pc, #236]	; (4e74 <am_hal_sysctrl_sleep+0x120>)
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    4d86:	6820      	ldr	r0, [r4, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    4d88:	4e3b      	ldr	r6, [pc, #236]	; (4e78 <am_hal_sysctrl_sleep+0x124>)
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    4d8a:	4f3c      	ldr	r7, [pc, #240]	; (4e7c <am_hal_sysctrl_sleep+0x128>)
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    4d8c:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 4e8c <am_hal_sysctrl_sleep+0x138>
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    4d90:	f040 0204 	orr.w	r2, r0, #4
    4d94:	6022      	str	r2, [r4, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    4d96:	681c      	ldr	r4, [r3, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    4d98:	6833      	ldr	r3, [r6, #0]
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    4d9a:	f8de 2000 	ldr.w	r2, [lr]
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    4d9e:	6839      	ldr	r1, [r7, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    4da0:	f004 07f0 	and.w	r7, r4, #240	; 0xf0
                   CHKBUCKZX_REV : 0x0;
    4da4:	2f20      	cmp	r7, #32
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    4da6:	f103 30ff 	add.w	r0, r3, #4294967295
                   CHKBUCKZX_REV : 0x0;
    4daa:	bf14      	ite	ne
    4dac:	2700      	movne	r7, #0
    4dae:	2702      	moveq	r7, #2
                    CHKBUCKZX_TIMER : 0x0;
    4db0:	2803      	cmp	r0, #3
    4db2:	bf98      	it	ls
    4db4:	f04f 0c04 	movls.w	ip, #4
                     CHKBUCKZX_BUCKS : 0x0;
    4db8:	f012 0403 	ands.w	r4, r2, #3
    4dbc:	bf18      	it	ne
    4dbe:	2401      	movne	r4, #1
    g_buckZX_chk |= ( ui32SupplySrc &
    4dc0:	f240 53ff 	movw	r3, #1535	; 0x5ff
    g_buckZX_chk |= (ui32SupplySrc &
    4dc4:	433c      	orrs	r4, r7
                0x0 : CHKBUCKZX_DEVEN;
    4dc6:	ea11 0703 	ands.w	r7, r1, r3
    g_buckZX_chk |= (ui32SupplySrc &
    4dca:	ea44 040c 	orr.w	r4, r4, ip
                0x0 : CHKBUCKZX_DEVEN;
    4dce:	d103      	bne.n	4dd8 <am_hal_sysctrl_sleep+0x84>
    g_buckZX_chk |= ( ui32SupplySrc &
    4dd0:	f044 0408 	orr.w	r4, r4, #8
        if ( bBuckZX_chk )
    4dd4:	2c0f      	cmp	r4, #15
    4dd6:	d00a      	beq.n	4dee <am_hal_sysctrl_sleep+0x9a>
        AM_ASM_WFI;
    4dd8:	bf30      	wfi
        if ( bBuckZX_chk )
    4dda:	2c0f      	cmp	r4, #15
    4ddc:	d01a      	beq.n	4e14 <am_hal_sysctrl_sleep+0xc0>
            g_bBuckRestoreComplete = true;
    4dde:	4e28      	ldr	r6, [pc, #160]	; (4e80 <am_hal_sysctrl_sleep+0x12c>)
    4de0:	2001      	movs	r0, #1
    4de2:	7030      	strb	r0, [r6, #0]
    am_hal_interrupt_master_set(ui32Critical);
    4de4:	4628      	mov	r0, r5
    4de6:	f7ff fd13 	bl	4810 <am_hal_interrupt_master_set>
}
    4dea:	b003      	add	sp, #12
    4dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ui32BuckTimer = g_ui32BuckTimer - 1;
    4dee:	6832      	ldr	r2, [r6, #0]
    4df0:	1e51      	subs	r1, r2, #1
    4df2:	9100      	str	r1, [sp, #0]
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    4df4:	9800      	ldr	r0, [sp, #0]
    4df6:	f04f 31ff 	mov.w	r1, #4294967295
    4dfa:	f7ff fb87 	bl	450c <am_hal_ctimer_clear>
            am_hal_ctimer_period_set(ui32BuckTimer,
    4dfe:	9800      	ldr	r0, [sp, #0]
    4e00:	463b      	mov	r3, r7
    4e02:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    4e06:	f04f 31ff 	mov.w	r1, #4294967295
    4e0a:	f7ff fb93 	bl	4534 <am_hal_ctimer_period_set>
            am_hal_pwrctrl_bucks_disable();
    4e0e:	f7ff feeb 	bl	4be8 <am_hal_pwrctrl_bucks_disable>
    4e12:	e7e1      	b.n	4dd8 <am_hal_sysctrl_sleep+0x84>
    AM_CRITICAL_BEGIN_ASM
    4e14:	f7ff fcf8 	bl	4808 <am_hal_interrupt_master_disable>
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    4e18:	4b1a      	ldr	r3, [pc, #104]	; (4e84 <am_hal_sysctrl_sleep+0x130>)
    AM_CRITICAL_BEGIN_ASM
    4e1a:	9001      	str	r0, [sp, #4]
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    4e1c:	681a      	ldr	r2, [r3, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    4e1e:	681a      	ldr	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    4e20:	681f      	ldr	r7, [r3, #0]
    4e22:	f027 043c 	bic.w	r4, r7, #60	; 0x3c
    4e26:	f044 021c 	orr.w	r2, r4, #28
    4e2a:	601a      	str	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    4e2c:	6819      	ldr	r1, [r3, #0]
            g_bBuckRestoreComplete = false;
    4e2e:	4c14      	ldr	r4, [pc, #80]	; (4e80 <am_hal_sysctrl_sleep+0x12c>)
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    4e30:	f421 30f0 	bic.w	r0, r1, #122880	; 0x1e000
    4e34:	f440 4760 	orr.w	r7, r0, #57344	; 0xe000
    4e38:	601f      	str	r7, [r3, #0]
    AM_CRITICAL_END_ASM
    4e3a:	9801      	ldr	r0, [sp, #4]
    4e3c:	f7ff fce8 	bl	4810 <am_hal_interrupt_master_set>
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    4e40:	201c      	movs	r0, #28
    4e42:	f7ff fbf3 	bl	462c <am_hal_flash_delay>
            am_hal_pwrctrl_bucks_enable();
    4e46:	f7ff feb3 	bl	4bb0 <am_hal_pwrctrl_bucks_enable>
            ui32BuckTimer = g_ui32BuckTimer - 1;
    4e4a:	6836      	ldr	r6, [r6, #0]
            g_ui32BuckInputs = 0;
    4e4c:	490e      	ldr	r1, [pc, #56]	; (4e88 <am_hal_sysctrl_sleep+0x134>)
            g_bBuckRestoreComplete = false;
    4e4e:	2200      	movs	r2, #0
            ui32BuckTimer = g_ui32BuckTimer - 1;
    4e50:	1e73      	subs	r3, r6, #1
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    4e52:	204c      	movs	r0, #76	; 0x4c
            ui32BuckTimer = g_ui32BuckTimer - 1;
    4e54:	9300      	str	r3, [sp, #0]
            g_bBuckRestoreComplete = false;
    4e56:	7022      	strb	r2, [r4, #0]
            g_ui32BuckInputs = 0;
    4e58:	600a      	str	r2, [r1, #0]
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    4e5a:	f7ff fbe7 	bl	462c <am_hal_flash_delay>
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    4e5e:	9800      	ldr	r0, [sp, #0]
    4e60:	f04f 31ff 	mov.w	r1, #4294967295
    4e64:	f7ff fb3a 	bl	44dc <am_hal_ctimer_start>
    4e68:	e786      	b.n	4d78 <am_hal_sysctrl_sleep+0x24>
    4e6a:	bf00      	nop
    4e6c:	40020250 	.word	0x40020250
    4e70:	e000ed10 	.word	0xe000ed10
    4e74:	4002000c 	.word	0x4002000c
    4e78:	1000657c 	.word	0x1000657c
    4e7c:	40021008 	.word	0x40021008
    4e80:	10006574 	.word	0x10006574
    4e84:	40020068 	.word	0x40020068
    4e88:	10006578 	.word	0x10006578
    4e8c:	40021000 	.word	0x40021000

00004e90 <am_hal_sysctrl_fpu_enable>:
{
    //
    // Enable access to the FPU in both privileged and user modes.
    // NOTE: Write 0s to all reserved fields in this register.
    //
    AM_REG(SYSCTRL, CPACR) = (AM_REG_SYSCTRL_CPACR_CP11(0x3) |
    4e90:	4b02      	ldr	r3, [pc, #8]	; (4e9c <am_hal_sysctrl_fpu_enable+0xc>)
    4e92:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
    4e96:	601a      	str	r2, [r3, #0]
    4e98:	4770      	bx	lr
    4e9a:	bf00      	nop
    4e9c:	e000ed88 	.word	0xe000ed88

00004ea0 <am_hal_sysctrl_fpu_stacking_enable>:
    {
        //
        // Enable automatic saving of FPU registers on exception entry, using lazy
        // context saving.
        //
        AM_REG(SYSCTRL, FPCCR) |= (AM_REG_SYSCTRL_FPCCR_ASPEN(0x1) |
    4ea0:	4a05      	ldr	r2, [pc, #20]	; (4eb8 <am_hal_sysctrl_fpu_stacking_enable+0x18>)
    4ea2:	6813      	ldr	r3, [r2, #0]
    if ( bLazy )
    4ea4:	b918      	cbnz	r0, 4eae <am_hal_sysctrl_fpu_stacking_enable+0xe>
    else
    {
        //
        // Enable automatic saving of FPU registers on exception entry.
        //
        AM_REG(SYSCTRL, FPCCR) |= AM_REG_SYSCTRL_FPCCR_ASPEN(0x1);
    4ea6:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
    4eaa:	6010      	str	r0, [r2, #0]
    4eac:	4770      	bx	lr
        AM_REG(SYSCTRL, FPCCR) |= (AM_REG_SYSCTRL_FPCCR_ASPEN(0x1) |
    4eae:	f043 4140 	orr.w	r1, r3, #3221225472	; 0xc0000000
    4eb2:	6011      	str	r1, [r2, #0]
    4eb4:	4770      	bx	lr
    4eb6:	bf00      	nop
    4eb8:	e000ef34 	.word	0xe000ef34

00004ebc <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    4ebc:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    4ebe:	4a23      	ldr	r2, [pc, #140]	; (4f4c <am_hal_tpiu_enable+0x90>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    4ec0:	6803      	ldr	r3, [r0, #0]
    AM_REG(TPIU, FFCR) = 0;
    4ec2:	2100      	movs	r1, #0
    4ec4:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    4ec6:	b33b      	cbz	r3, 4f18 <am_hal_tpiu_enable+0x5c>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    4ec8:	f5a2 7c40 	sub.w	ip, r2, #768	; 0x300
    4ecc:	2101      	movs	r1, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    4ece:	4c20      	ldr	r4, [pc, #128]	; (4f50 <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    4ed0:	4d20      	ldr	r5, [pc, #128]	; (4f54 <am_hal_tpiu_enable+0x98>)
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    4ed2:	f8cc 1000 	str.w	r1, [ip]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    4ed6:	f5a3 4e61 	sub.w	lr, r3, #57600	; 0xe100
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    4eda:	45a6      	cmp	lr, r4
    4edc:	bf94      	ite	ls
    4ede:	461c      	movls	r4, r3
    4ee0:	462c      	movhi	r4, r5
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    4ee2:	f7ff fac9 	bl	4478 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    4ee6:	1c43      	adds	r3, r0, #1
    4ee8:	d02d      	beq.n	4f46 <am_hal_tpiu_enable+0x8a>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    4eea:	08c2      	lsrs	r2, r0, #3
    4eec:	fbb2 f3f4 	udiv	r3, r2, r4
    4ef0:	1e5d      	subs	r5, r3, #1
    4ef2:	b2a8      	uxth	r0, r5
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    4ef4:	4a18      	ldr	r2, [pc, #96]	; (4f58 <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    4ef6:	4c19      	ldr	r4, [pc, #100]	; (4f5c <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    4ef8:	4b19      	ldr	r3, [pc, #100]	; (4f60 <am_hal_tpiu_enable+0xa4>)
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    4efa:	491a      	ldr	r1, [pc, #104]	; (4f64 <am_hal_tpiu_enable+0xa8>)
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    4efc:	6010      	str	r0, [r2, #0]
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    4efe:	2502      	movs	r5, #2
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    4f00:	2000      	movs	r0, #0
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    4f02:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    4f06:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    4f08:	6008      	str	r0, [r1, #0]
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    4f0a:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    4f0c:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    4f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    4f14:	f7ff bb8a 	b.w	462c <am_hal_flash_delay>
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    4f18:	4c0f      	ldr	r4, [pc, #60]	; (4f58 <am_hal_tpiu_enable+0x9c>)
    4f1a:	6905      	ldr	r5, [r0, #16]
    4f1c:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    4f1e:	6882      	ldr	r2, [r0, #8]
    4f20:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    4f24:	68c3      	ldr	r3, [r0, #12]
    4f26:	4c10      	ldr	r4, [pc, #64]	; (4f68 <am_hal_tpiu_enable+0xac>)
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    4f28:	490d      	ldr	r1, [pc, #52]	; (4f60 <am_hal_tpiu_enable+0xa4>)
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    4f2a:	1e5d      	subs	r5, r3, #1
    4f2c:	2201      	movs	r2, #1
    4f2e:	40aa      	lsls	r2, r5
    4f30:	6022      	str	r2, [r4, #0]
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    4f32:	6840      	ldr	r0, [r0, #4]
    4f34:	680b      	ldr	r3, [r1, #0]
    4f36:	4303      	orrs	r3, r0
    4f38:	600b      	str	r3, [r1, #0]
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    4f3a:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    4f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    4f42:	f7ff bb73 	b.w	462c <am_hal_flash_delay>
    4f46:	2005      	movs	r0, #5
    4f48:	e7d4      	b.n	4ef4 <am_hal_tpiu_enable+0x38>
    4f4a:	bf00      	nop
    4f4c:	e0040304 	.word	0xe0040304
    4f50:	001da380 	.word	0x001da380
    4f54:	000f4240 	.word	0x000f4240
    4f58:	e0040010 	.word	0xe0040010
    4f5c:	e00400f0 	.word	0xe00400f0
    4f60:	40020250 	.word	0x40020250
    4f64:	e0040f00 	.word	0xe0040f00
    4f68:	e0040004 	.word	0xe0040004

00004f6c <am_hal_tpiu_disable>:
am_hal_tpiu_disable(void)
{
    //
    // Disable the TPIU clock source in MCU control.
    //
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    4f6c:	4b01      	ldr	r3, [pc, #4]	; (4f74 <am_hal_tpiu_disable+0x8>)
    4f6e:	2200      	movs	r2, #0
    4f70:	601a      	str	r2, [r3, #0]
    4f72:	4770      	bx	lr
    4f74:	40020250 	.word	0x40020250

00004f78 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    4f78:	4b01      	ldr	r3, [pc, #4]	; (4f80 <am_hal_vcomp_disable+0x8>)
    4f7a:	2237      	movs	r2, #55	; 0x37
    4f7c:	601a      	str	r2, [r3, #0]
    4f7e:	4770      	bx	lr
    4f80:	4000c008 	.word	0x4000c008

00004f84 <memcpy>:
    4f84:	b510      	push	{r4, lr}
    4f86:	1e43      	subs	r3, r0, #1
    4f88:	440a      	add	r2, r1
    4f8a:	4291      	cmp	r1, r2
    4f8c:	d100      	bne.n	4f90 <memcpy+0xc>
    4f8e:	bd10      	pop	{r4, pc}
    4f90:	f811 4b01 	ldrb.w	r4, [r1], #1
    4f94:	f803 4f01 	strb.w	r4, [r3, #1]!
    4f98:	e7f7      	b.n	4f8a <memcpy+0x6>

00004f9a <memset>:
    4f9a:	4402      	add	r2, r0
    4f9c:	4603      	mov	r3, r0
    4f9e:	4293      	cmp	r3, r2
    4fa0:	d100      	bne.n	4fa4 <memset+0xa>
    4fa2:	4770      	bx	lr
    4fa4:	f803 1b01 	strb.w	r1, [r3], #1
    4fa8:	e7f9      	b.n	4f9e <memset+0x4>
    4faa:	0000      	movs	r0, r0
    4fac:	454c4449 	.word	0x454c4449
    4fb0:	00000000 	.word	0x00000000
    4fb4:	20726d54 	.word	0x20726d54
    4fb8:	00637653 	.word	0x00637653
    4fbc:	65657246 	.word	0x65657246
    4fc0:	534f5452 	.word	0x534f5452
    4fc4:	776f4c20 	.word	0x776f4c20
    4fc8:	776f5020 	.word	0x776f5020
    4fcc:	45207265 	.word	0x45207265
    4fd0:	706d6178 	.word	0x706d6178
    4fd4:	000a656c 	.word	0x000a656c
    4fd8:	5444454c 	.word	0x5444454c
    4fdc:	3a6b7361 	.word	0x3a6b7361
    4fe0:	74657320 	.word	0x74657320
    4fe4:	0a0d7075 	.word	0x0a0d7075
    4fe8:	00000000 	.word	0x00000000
    4fec:	6e6e7552 	.word	0x6e6e7552
    4ff0:	20676e69 	.word	0x20676e69
    4ff4:	75746573 	.word	0x75746573
    4ff8:	61742070 	.word	0x61742070
    4ffc:	2e736b73 	.word	0x2e736b73
    5000:	0a0d2e2e 	.word	0x0a0d2e2e
    5004:	00000000 	.word	0x00000000
    5008:	5444454c 	.word	0x5444454c
    500c:	006b7361 	.word	0x006b7361
    5010:	75746553 	.word	0x75746553
    5014:	00000070 	.word	0x00000070
    5018:	0a0a0a0a 	.word	0x0a0a0a0a
    501c:	0a0a0a0a 	.word	0x0a0a0a0a
    5020:	0a0a0a0a 	.word	0x0a0a0a0a
    5024:	0a0a0a0a 	.word	0x0a0a0a0a
    5028:	00000a0a 	.word	0x00000a0a

0000502c <am_hal_cachectrl_defaults>:
    502c:	50000001 00010300 00010101 685f6d61     ...P........am_h
    503c:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    504c:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    505c:	63206469 6b636f6c 74657320 676e6974     id clock setting
    506c:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    507c:	6b6c635f 2e6e6567 00000063 4f495047     _clkgen.c...GPIO
    508c:	6d756e20 20726562 2074756f 7220666f      number out of r
    509c:	65676e61 0000002e 61766e49 2064696c     ange....Invalid 
    50ac:	4f495047 6d756e20 2e726562 00000000     GPIO number.....
    50bc:	2e5c2e2e 6d615c2e 6c61685f 6970675f     ..\..\am_hal_gpi
    50cc:	00632e6f                                o.c.
