
i2c_boot_host_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000050d0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000004  10001000  000050d0  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000004cc  10001004  000050d4  00021004  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021004  2**0
                  CONTENTS, READONLY
  5 .debug_info   00012bc2  00000000  00000000  0002103b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002873  00000000  00000000  00033bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000908  00000000  00000000  00036470  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001ee8  00000000  00000000  00036d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006286  00000000  00000000  00038c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000036ad  00000000  00000000  0003eee6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  00042593  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001c30  00000000  00000000  00042610  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000fa87  00000000  00000000  00044240  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 a1 05 00 00 09 06 00 00 0f 06 00 00     ................
      10:	0f 06 00 00 0f 06 00 00 0f 06 00 00 00 00 00 00     ................
	...
      2c:	15 06 00 00 15 06 00 00 00 00 00 00 15 06 00 00     ................
      3c:	15 06 00 00 15 06 00 00 15 06 00 00 15 06 00 00     ................
      4c:	15 06 00 00 15 06 00 00 15 06 00 00 15 06 00 00     ................
      5c:	15 06 00 00 15 06 00 00 15 06 00 00 15 06 00 00     ................
      6c:	15 06 00 00 bd 01 00 00 15 06 00 00 15 06 00 00     ................
      7c:	15 06 00 00 15 06 00 00 15 06 00 00 15 06 00 00     ................
      8c:	15 06 00 00 15 06 00 00 15 06 00 00 15 06 00 00     ................
      9c:	15 06 00 00 15 06 00 00 15 06 00 00 15 06 00 00     ................
      ac:	15 06 00 00 15 06 00 00 15 06 00 00 15 06 00 00     ................
      bc:	15 06 00 00                                         ....

000000c0 <configure_pins>:
// Configure GPIOs for this example
//
//*****************************************************************************
void
configure_pins(void)
{
      c0:	b580      	push	{r7, lr}
      c2:	b084      	sub	sp, #16
      c4:	af00      	add	r7, sp, #0
    //
    // Configure I/O Master 0 as I2C
    //
    am_hal_gpio_pin_config(5, AM_HAL_PIN_5_M0SCL | AM_HAL_GPIO_PULLUP);
      c6:	f000 fce7 	bl	a98 <am_hal_interrupt_master_disable>
      ca:	4603      	mov	r3, r0
      cc:	60fb      	str	r3, [r7, #12]
      ce:	4b35      	ldr	r3, [pc, #212]	; (1a4 <configure_pins+0xe4>)
      d0:	2273      	movs	r2, #115	; 0x73
      d2:	601a      	str	r2, [r3, #0]
      d4:	4a34      	ldr	r2, [pc, #208]	; (1a8 <configure_pins+0xe8>)
      d6:	4b34      	ldr	r3, [pc, #208]	; (1a8 <configure_pins+0xe8>)
      d8:	681b      	ldr	r3, [r3, #0]
      da:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
      de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
      e2:	6013      	str	r3, [r2, #0]
      e4:	4a31      	ldr	r2, [pc, #196]	; (1ac <configure_pins+0xec>)
      e6:	4b31      	ldr	r3, [pc, #196]	; (1ac <configure_pins+0xec>)
      e8:	681b      	ldr	r3, [r3, #0]
      ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
      ee:	f443 7340 	orr.w	r3, r3, #768	; 0x300
      f2:	6013      	str	r3, [r2, #0]
      f4:	4a2e      	ldr	r2, [pc, #184]	; (1b0 <configure_pins+0xf0>)
      f6:	4b2e      	ldr	r3, [pc, #184]	; (1b0 <configure_pins+0xf0>)
      f8:	681b      	ldr	r3, [r3, #0]
      fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
      fe:	6013      	str	r3, [r2, #0]
     100:	4b28      	ldr	r3, [pc, #160]	; (1a4 <configure_pins+0xe4>)
     102:	2200      	movs	r2, #0
     104:	601a      	str	r2, [r3, #0]
     106:	68fb      	ldr	r3, [r7, #12]
     108:	4618      	mov	r0, r3
     10a:	f000 fcc9 	bl	aa0 <am_hal_interrupt_master_set>
    am_hal_gpio_pin_config(6, AM_HAL_PIN_6_M0SDA | AM_HAL_GPIO_PULLUP);
     10e:	f000 fcc3 	bl	a98 <am_hal_interrupt_master_disable>
     112:	4603      	mov	r3, r0
     114:	60bb      	str	r3, [r7, #8]
     116:	4b23      	ldr	r3, [pc, #140]	; (1a4 <configure_pins+0xe4>)
     118:	2273      	movs	r2, #115	; 0x73
     11a:	601a      	str	r2, [r3, #0]
     11c:	4a22      	ldr	r2, [pc, #136]	; (1a8 <configure_pins+0xe8>)
     11e:	4b22      	ldr	r3, [pc, #136]	; (1a8 <configure_pins+0xe8>)
     120:	681b      	ldr	r3, [r3, #0]
     122:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     126:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
     12a:	6013      	str	r3, [r2, #0]
     12c:	4a1f      	ldr	r2, [pc, #124]	; (1ac <configure_pins+0xec>)
     12e:	4b1f      	ldr	r3, [pc, #124]	; (1ac <configure_pins+0xec>)
     130:	681b      	ldr	r3, [r3, #0]
     132:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     136:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
     13a:	6013      	str	r3, [r2, #0]
     13c:	4a1c      	ldr	r2, [pc, #112]	; (1b0 <configure_pins+0xf0>)
     13e:	4b1c      	ldr	r3, [pc, #112]	; (1b0 <configure_pins+0xf0>)
     140:	681b      	ldr	r3, [r3, #0]
     142:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     146:	6013      	str	r3, [r2, #0]
     148:	4b16      	ldr	r3, [pc, #88]	; (1a4 <configure_pins+0xe4>)
     14a:	2200      	movs	r2, #0
     14c:	601a      	str	r2, [r3, #0]
     14e:	68bb      	ldr	r3, [r7, #8]
     150:	4618      	mov	r0, r3
     152:	f000 fca5 	bl	aa0 <am_hal_interrupt_master_set>

    //
    // Configure the I/O Slave interrupt pin
    //
    am_hal_gpio_pin_config(BOOTLOADER_HANDSHAKE_PIN, AM_HAL_PIN_INPUT | AM_HAL_GPIO_PULLUP);
     156:	f000 fc9f 	bl	a98 <am_hal_interrupt_master_disable>
     15a:	4603      	mov	r3, r0
     15c:	607b      	str	r3, [r7, #4]
     15e:	4b11      	ldr	r3, [pc, #68]	; (1a4 <configure_pins+0xe4>)
     160:	2273      	movs	r2, #115	; 0x73
     162:	601a      	str	r2, [r3, #0]
     164:	4a10      	ldr	r2, [pc, #64]	; (1a8 <configure_pins+0xe8>)
     166:	4b10      	ldr	r3, [pc, #64]	; (1a8 <configure_pins+0xe8>)
     168:	681b      	ldr	r3, [r3, #0]
     16a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     16e:	6013      	str	r3, [r2, #0]
     170:	4a10      	ldr	r2, [pc, #64]	; (1b4 <configure_pins+0xf4>)
     172:	4b10      	ldr	r3, [pc, #64]	; (1b4 <configure_pins+0xf4>)
     174:	681b      	ldr	r3, [r3, #0]
     176:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     17a:	f443 13d8 	orr.w	r3, r3, #1769472	; 0x1b0000
     17e:	6013      	str	r3, [r2, #0]
     180:	4a0d      	ldr	r2, [pc, #52]	; (1b8 <configure_pins+0xf8>)
     182:	4b0d      	ldr	r3, [pc, #52]	; (1b8 <configure_pins+0xf8>)
     184:	681b      	ldr	r3, [r3, #0]
     186:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     18a:	6013      	str	r3, [r2, #0]
     18c:	4b05      	ldr	r3, [pc, #20]	; (1a4 <configure_pins+0xe4>)
     18e:	2200      	movs	r2, #0
     190:	601a      	str	r2, [r3, #0]
     192:	687b      	ldr	r3, [r7, #4]
     194:	4618      	mov	r0, r3
     196:	f000 fc83 	bl	aa0 <am_hal_interrupt_master_set>
}
     19a:	bf00      	nop
     19c:	3710      	adds	r7, #16
     19e:	46bd      	mov	sp, r7
     1a0:	bd80      	pop	{r7, pc}
     1a2:	bf00      	nop
     1a4:	40010060 	.word	0x40010060
     1a8:	40010040 	.word	0x40010040
     1ac:	40010004 	.word	0x40010004
     1b0:	400100e4 	.word	0x400100e4
     1b4:	40010000 	.word	0x40010000
     1b8:	400100e0 	.word	0x400100e0

000001bc <am_gpio_isr>:
// Interrupt handler for the GPIO pins.
//
//*****************************************************************************
void
am_gpio_isr(void)
{
     1bc:	b580      	push	{r7, lr}
     1be:	b082      	sub	sp, #8
     1c0:	af00      	add	r7, sp, #0
    uint64_t ui64Status;

    //
    // Read and clear the GPIO interrupt status.
    //
    ui64Status = am_hal_gpio_int_status_get(false);
     1c2:	2000      	movs	r0, #0
     1c4:	f000 fc3e 	bl	a44 <am_hal_gpio_int_status_get>
     1c8:	e9c7 0100 	strd	r0, r1, [r7]
    am_hal_gpio_int_clear(ui64Status);
     1cc:	e9d7 0100 	ldrd	r0, r1, [r7]
     1d0:	f000 fc24 	bl	a1c <am_hal_gpio_int_clear>
}
     1d4:	bf00      	nop
     1d6:	3708      	adds	r7, #8
     1d8:	46bd      	mov	sp, r7
     1da:	bd80      	pop	{r7, pc}

000001dc <start_boot_mode>:
// Reset the slave device and force it into boot mode.
//
//*****************************************************************************
void
start_boot_mode(void)
{
     1dc:	b580      	push	{r7, lr}
     1de:	b082      	sub	sp, #8
     1e0:	af00      	add	r7, sp, #0
    //
    // Drive RESET low.
    //
    am_hal_gpio_out_bit_clear(DRIVE_SLAVE_RESET_PIN);
     1e2:	4b30      	ldr	r3, [pc, #192]	; (2a4 <start_boot_mode+0xc8>)
     1e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     1e8:	601a      	str	r2, [r3, #0]
    am_hal_gpio_pin_config(DRIVE_SLAVE_RESET_PIN, AM_HAL_PIN_OUTPUT);
     1ea:	f000 fc55 	bl	a98 <am_hal_interrupt_master_disable>
     1ee:	4603      	mov	r3, r0
     1f0:	607b      	str	r3, [r7, #4]
     1f2:	4b2d      	ldr	r3, [pc, #180]	; (2a8 <start_boot_mode+0xcc>)
     1f4:	2273      	movs	r2, #115	; 0x73
     1f6:	601a      	str	r2, [r3, #0]
     1f8:	4a2c      	ldr	r2, [pc, #176]	; (2ac <start_boot_mode+0xd0>)
     1fa:	4b2c      	ldr	r3, [pc, #176]	; (2ac <start_boot_mode+0xd0>)
     1fc:	681b      	ldr	r3, [r3, #0]
     1fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     202:	f043 0320 	orr.w	r3, r3, #32
     206:	6013      	str	r3, [r2, #0]
     208:	4a29      	ldr	r2, [pc, #164]	; (2b0 <start_boot_mode+0xd4>)
     20a:	4b29      	ldr	r3, [pc, #164]	; (2b0 <start_boot_mode+0xd4>)
     20c:	681b      	ldr	r3, [r3, #0]
     20e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     212:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
     216:	6013      	str	r3, [r2, #0]
     218:	4a26      	ldr	r2, [pc, #152]	; (2b4 <start_boot_mode+0xd8>)
     21a:	4b26      	ldr	r3, [pc, #152]	; (2b4 <start_boot_mode+0xd8>)
     21c:	681b      	ldr	r3, [r3, #0]
     21e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     222:	6013      	str	r3, [r2, #0]
     224:	4b20      	ldr	r3, [pc, #128]	; (2a8 <start_boot_mode+0xcc>)
     226:	2200      	movs	r2, #0
     228:	601a      	str	r2, [r3, #0]
     22a:	687b      	ldr	r3, [r7, #4]
     22c:	4618      	mov	r0, r3
     22e:	f000 fc37 	bl	aa0 <am_hal_interrupt_master_set>

    //
    // Drive the override pin low to force the slave into boot mode.
    //
    am_hal_gpio_out_bit_clear(DRIVE_SLAVE_OVERRIDE_PIN);
     232:	4b1c      	ldr	r3, [pc, #112]	; (2a4 <start_boot_mode+0xc8>)
     234:	2210      	movs	r2, #16
     236:	601a      	str	r2, [r3, #0]
    am_hal_gpio_pin_config(DRIVE_SLAVE_OVERRIDE_PIN, AM_HAL_PIN_OUTPUT);
     238:	f000 fc2e 	bl	a98 <am_hal_interrupt_master_disable>
     23c:	4603      	mov	r3, r0
     23e:	603b      	str	r3, [r7, #0]
     240:	4b19      	ldr	r3, [pc, #100]	; (2a8 <start_boot_mode+0xcc>)
     242:	2273      	movs	r2, #115	; 0x73
     244:	601a      	str	r2, [r3, #0]
     246:	4a1c      	ldr	r2, [pc, #112]	; (2b8 <start_boot_mode+0xdc>)
     248:	4b1b      	ldr	r3, [pc, #108]	; (2b8 <start_boot_mode+0xdc>)
     24a:	681b      	ldr	r3, [r3, #0]
     24c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
     250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     254:	6013      	str	r3, [r2, #0]
     256:	4a19      	ldr	r2, [pc, #100]	; (2bc <start_boot_mode+0xe0>)
     258:	4b18      	ldr	r3, [pc, #96]	; (2bc <start_boot_mode+0xe0>)
     25a:	681b      	ldr	r3, [r3, #0]
     25c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     260:	f043 0318 	orr.w	r3, r3, #24
     264:	6013      	str	r3, [r2, #0]
     266:	4a16      	ldr	r2, [pc, #88]	; (2c0 <start_boot_mode+0xe4>)
     268:	4b15      	ldr	r3, [pc, #84]	; (2c0 <start_boot_mode+0xe4>)
     26a:	681b      	ldr	r3, [r3, #0]
     26c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     270:	6013      	str	r3, [r2, #0]
     272:	4b0d      	ldr	r3, [pc, #52]	; (2a8 <start_boot_mode+0xcc>)
     274:	2200      	movs	r2, #0
     276:	601a      	str	r2, [r3, #0]
     278:	683b      	ldr	r3, [r7, #0]
     27a:	4618      	mov	r0, r3
     27c:	f000 fc10 	bl	aa0 <am_hal_interrupt_master_set>

    //
    // Short delay.
    //
    am_util_delay_us(5);
     280:	2005      	movs	r0, #5
     282:	f000 f9cb 	bl	61c <am_util_delay_us>

    //
    // Release RESET.
    //
    am_hal_gpio_out_bit_set(DRIVE_SLAVE_RESET_PIN);
     286:	4b0f      	ldr	r3, [pc, #60]	; (2c4 <start_boot_mode+0xe8>)
     288:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     28c:	601a      	str	r2, [r3, #0]

    //
    // Wait for the slave to Set the handshake pin
    //
    while ( !am_hal_gpio_input_bit_read(BOOTLOADER_HANDSHAKE_PIN) );
     28e:	bf00      	nop
     290:	4b0d      	ldr	r3, [pc, #52]	; (2c8 <start_boot_mode+0xec>)
     292:	681b      	ldr	r3, [r3, #0]
     294:	f003 0304 	and.w	r3, r3, #4
     298:	2b00      	cmp	r3, #0
     29a:	d0f9      	beq.n	290 <start_boot_mode+0xb4>
}
     29c:	bf00      	nop
     29e:	3708      	adds	r7, #8
     2a0:	46bd      	mov	sp, r7
     2a2:	bd80      	pop	{r7, pc}
     2a4:	40010098 	.word	0x40010098
     2a8:	40010060 	.word	0x40010060
     2ac:	40010048 	.word	0x40010048
     2b0:	40010010 	.word	0x40010010
     2b4:	400100f0 	.word	0x400100f0
     2b8:	40010040 	.word	0x40010040
     2bc:	40010004 	.word	0x40010004
     2c0:	400100e4 	.word	0x400100e4
     2c4:	40010090 	.word	0x40010090
     2c8:	40010080 	.word	0x40010080

000002cc <start_new_image>:
// Send the commands to start a new boot download.
//
//*****************************************************************************
void
start_new_image(void)
{
     2cc:	b580      	push	{r7, lr}
     2ce:	b082      	sub	sp, #8
     2d0:	af02      	add	r7, sp, #8
    //
    // Wait for the slave to send the ready signal
    //
    while ( am_hal_gpio_input_bit_read(BOOTLOADER_HANDSHAKE_PIN) );
     2d2:	bf00      	nop
     2d4:	4b25      	ldr	r3, [pc, #148]	; (36c <start_new_image+0xa0>)
     2d6:	681b      	ldr	r3, [r3, #0]
     2d8:	f003 0304 	and.w	r3, r3, #4
     2dc:	2b00      	cmp	r3, #0
     2de:	d1f9      	bne.n	2d4 <start_new_image+0x8>
    //
    // Make sure the override pin is high so the slave will reboot into
    // application mode when our boot procedure is complete.
    //
    am_hal_gpio_out_bit_set(DRIVE_SLAVE_OVERRIDE_PIN);
     2e0:	4b23      	ldr	r3, [pc, #140]	; (370 <start_new_image+0xa4>)
     2e2:	2210      	movs	r2, #16
     2e4:	601a      	str	r2, [r3, #0]
    // Clear any interrupts that may have happened while Slave is coming up
    am_hal_iom_int_clear(0, 0xFFFFFFFF);
     2e6:	f04f 31ff 	mov.w	r1, #4294967295
     2ea:	2000      	movs	r0, #0
     2ec:	f001 fcaa 	bl	1c44 <am_hal_iom_int_clear>
    am_hal_iom_i2c_read(0, SLAVE_ADDRESS, g_psRxBuffer.words, 4, AM_HAL_IOM_OFFSET(0x0));
     2f0:	2300      	movs	r3, #0
     2f2:	9300      	str	r3, [sp, #0]
     2f4:	2304      	movs	r3, #4
     2f6:	4a1f      	ldr	r2, [pc, #124]	; (374 <start_new_image+0xa8>)
     2f8:	2110      	movs	r1, #16
     2fa:	2000      	movs	r0, #0
     2fc:	f001 fbf4 	bl	1ae8 <am_hal_iom_i2c_read>

    //
    // ACK the ready signal to have slave pull the interrupt line high.
    //
    g_psTxBuffer.words[0] = AM_BOOTLOADER_ACK_CMD;
     300:	4b1d      	ldr	r3, [pc, #116]	; (378 <start_new_image+0xac>)
     302:	2200      	movs	r2, #0
     304:	601a      	str	r2, [r3, #0]
    am_hal_iom_i2c_write(0, SLAVE_ADDRESS, g_psTxBuffer.words, 4, AM_HAL_IOM_OFFSET(0x80));
     306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     30a:	9300      	str	r3, [sp, #0]
     30c:	2304      	movs	r3, #4
     30e:	4a1a      	ldr	r2, [pc, #104]	; (378 <start_new_image+0xac>)
     310:	2110      	movs	r1, #16
     312:	2000      	movs	r0, #0
     314:	f001 fb3e 	bl	1994 <am_hal_iom_i2c_write>
    //
    // Wait for the slave to read the ACK
    //
    while ( !am_hal_gpio_input_bit_read(BOOTLOADER_HANDSHAKE_PIN) );
     318:	bf00      	nop
     31a:	4b14      	ldr	r3, [pc, #80]	; (36c <start_new_image+0xa0>)
     31c:	681b      	ldr	r3, [r3, #0]
     31e:	f003 0304 	and.w	r3, r3, #4
     322:	2b00      	cmp	r3, #0
     324:	d0f9      	beq.n	31a <start_new_image+0x4e>

    //
    // Write the image parameters to the I2C FIFO
    //
    g_psTxBuffer.words[0] = IMAGE_LINK_ADDRESS;
     326:	4b14      	ldr	r3, [pc, #80]	; (378 <start_new_image+0xac>)
     328:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     32c:	601a      	str	r2, [r3, #0]
    g_psTxBuffer.words[1] = IMAGE_SIZE;
     32e:	4b12      	ldr	r3, [pc, #72]	; (378 <start_new_image+0xac>)
     330:	f641 420a 	movw	r2, #7178	; 0x1c0a
     334:	605a      	str	r2, [r3, #4]
    g_psTxBuffer.words[2] = IMAGE_CRC;
     336:	4b10      	ldr	r3, [pc, #64]	; (378 <start_new_image+0xac>)
     338:	4a10      	ldr	r2, [pc, #64]	; (37c <start_new_image+0xb0>)
     33a:	609a      	str	r2, [r3, #8]

    //
    // Send the image parameters to the slave.
    //
    am_hal_iom_i2c_write(0, SLAVE_ADDRESS, g_psTxBuffer.words, 12, AM_HAL_IOM_OFFSET(0x84));
     33c:	f44f 4304 	mov.w	r3, #33792	; 0x8400
     340:	9300      	str	r3, [sp, #0]
     342:	230c      	movs	r3, #12
     344:	4a0c      	ldr	r2, [pc, #48]	; (378 <start_new_image+0xac>)
     346:	2110      	movs	r1, #16
     348:	2000      	movs	r0, #0
     34a:	f001 fb23 	bl	1994 <am_hal_iom_i2c_write>

    //
    // Finish out the image start routine with the "New Image" packet.
    //
    g_psTxBuffer.words[0] = AM_BOOTLOADER_NEW_IMAGE;
     34e:	4b0a      	ldr	r3, [pc, #40]	; (378 <start_new_image+0xac>)
     350:	2202      	movs	r2, #2
     352:	601a      	str	r2, [r3, #0]
    am_hal_iom_i2c_write(0, SLAVE_ADDRESS, g_psTxBuffer.words, 4, AM_HAL_IOM_OFFSET(0x80));
     354:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     358:	9300      	str	r3, [sp, #0]
     35a:	2304      	movs	r3, #4
     35c:	4a06      	ldr	r2, [pc, #24]	; (378 <start_new_image+0xac>)
     35e:	2110      	movs	r1, #16
     360:	2000      	movs	r0, #0
     362:	f001 fb17 	bl	1994 <am_hal_iom_i2c_write>
}
     366:	bf00      	nop
     368:	46bd      	mov	sp, r7
     36a:	bd80      	pop	{r7, pc}
     36c:	40010080 	.word	0x40010080
     370:	40010090 	.word	0x40010090
     374:	10001238 	.word	0x10001238
     378:	10001048 	.word	0x10001048
     37c:	160b7b17 	.word	0x160b7b17

00000380 <override_pin_set>:
// Set override pin.
//
//*****************************************************************************
void
override_pin_set(uint32_t ui32OverridePin, uint32_t ui32OverridePolarity)
{
     380:	b580      	push	{r7, lr}
     382:	b084      	sub	sp, #16
     384:	af02      	add	r7, sp, #8
     386:	6078      	str	r0, [r7, #4]
     388:	6039      	str	r1, [r7, #0]
    //
    // Wait for the slave to send the ready signal
    //
    while ( am_hal_gpio_input_bit_read(BOOTLOADER_HANDSHAKE_PIN) );
     38a:	bf00      	nop
     38c:	4b1f      	ldr	r3, [pc, #124]	; (40c <override_pin_set+0x8c>)
     38e:	681b      	ldr	r3, [r3, #0]
     390:	f003 0304 	and.w	r3, r3, #4
     394:	2b00      	cmp	r3, #0
     396:	d1f9      	bne.n	38c <override_pin_set+0xc>
    am_hal_iom_i2c_read(0, SLAVE_ADDRESS, g_psRxBuffer.words, 4, AM_HAL_IOM_OFFSET(0x0));
     398:	2300      	movs	r3, #0
     39a:	9300      	str	r3, [sp, #0]
     39c:	2304      	movs	r3, #4
     39e:	4a1c      	ldr	r2, [pc, #112]	; (410 <override_pin_set+0x90>)
     3a0:	2110      	movs	r1, #16
     3a2:	2000      	movs	r0, #0
     3a4:	f001 fba0 	bl	1ae8 <am_hal_iom_i2c_read>

    //
    // ACK the ready signal to have slave pull the interrupt line high.
    //
    g_psTxBuffer.words[0] = AM_BOOTLOADER_ACK_CMD;
     3a8:	4b1a      	ldr	r3, [pc, #104]	; (414 <override_pin_set+0x94>)
     3aa:	2200      	movs	r2, #0
     3ac:	601a      	str	r2, [r3, #0]
    am_hal_iom_i2c_write(0, SLAVE_ADDRESS, g_psTxBuffer.words, 4, AM_HAL_IOM_OFFSET(0x80));
     3ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     3b2:	9300      	str	r3, [sp, #0]
     3b4:	2304      	movs	r3, #4
     3b6:	4a17      	ldr	r2, [pc, #92]	; (414 <override_pin_set+0x94>)
     3b8:	2110      	movs	r1, #16
     3ba:	2000      	movs	r0, #0
     3bc:	f001 faea 	bl	1994 <am_hal_iom_i2c_write>
    //
    // Wait for the slave to read the ACK
    //
    while ( !am_hal_gpio_input_bit_read(BOOTLOADER_HANDSHAKE_PIN) );
     3c0:	bf00      	nop
     3c2:	4b12      	ldr	r3, [pc, #72]	; (40c <override_pin_set+0x8c>)
     3c4:	681b      	ldr	r3, [r3, #0]
     3c6:	f003 0304 	and.w	r3, r3, #4
     3ca:	2b00      	cmp	r3, #0
     3cc:	d0f9      	beq.n	3c2 <override_pin_set+0x42>

    //
    // Write the image parameters to the I2C FIFO
    //
    g_psTxBuffer.words[0] = ui32OverridePin;
     3ce:	4a11      	ldr	r2, [pc, #68]	; (414 <override_pin_set+0x94>)
     3d0:	687b      	ldr	r3, [r7, #4]
     3d2:	6013      	str	r3, [r2, #0]
    g_psTxBuffer.words[1] = ui32OverridePolarity;
     3d4:	4a0f      	ldr	r2, [pc, #60]	; (414 <override_pin_set+0x94>)
     3d6:	683b      	ldr	r3, [r7, #0]
     3d8:	6053      	str	r3, [r2, #4]

    //
    // Send the image parameters to the slave.
    //
    am_hal_iom_i2c_write(0, SLAVE_ADDRESS, g_psTxBuffer.words, 8, AM_HAL_IOM_OFFSET(0x84));
     3da:	f44f 4304 	mov.w	r3, #33792	; 0x8400
     3de:	9300      	str	r3, [sp, #0]
     3e0:	2308      	movs	r3, #8
     3e2:	4a0c      	ldr	r2, [pc, #48]	; (414 <override_pin_set+0x94>)
     3e4:	2110      	movs	r1, #16
     3e6:	2000      	movs	r0, #0
     3e8:	f001 fad4 	bl	1994 <am_hal_iom_i2c_write>

    //
    // Finish out the image start routine with the "New Image" packet.
    //
    g_psTxBuffer.words[0] = AM_BOOTLOADER_SET_OVERRIDE_CMD;
     3ec:	4b09      	ldr	r3, [pc, #36]	; (414 <override_pin_set+0x94>)
     3ee:	2205      	movs	r2, #5
     3f0:	601a      	str	r2, [r3, #0]
    am_hal_iom_i2c_write(0, SLAVE_ADDRESS, g_psTxBuffer.words, 4, AM_HAL_IOM_OFFSET(0x80));
     3f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     3f6:	9300      	str	r3, [sp, #0]
     3f8:	2304      	movs	r3, #4
     3fa:	4a06      	ldr	r2, [pc, #24]	; (414 <override_pin_set+0x94>)
     3fc:	2110      	movs	r1, #16
     3fe:	2000      	movs	r0, #0
     400:	f001 fac8 	bl	1994 <am_hal_iom_i2c_write>
}
     404:	bf00      	nop
     406:	3708      	adds	r7, #8
     408:	46bd      	mov	sp, r7
     40a:	bd80      	pop	{r7, pc}
     40c:	40010080 	.word	0x40010080
     410:	10001238 	.word	0x10001238
     414:	10001048 	.word	0x10001048

00000418 <transfer_image>:
// Send the actual firmware image over to the boot slave.
//
//*****************************************************************************
void
transfer_image(void)
{
     418:	b580      	push	{r7, lr}
     41a:	b086      	sub	sp, #24
     41c:	af02      	add	r7, sp, #8
    uint32_t i;

    //
    // Send the firmware image across.
    //
    ui32BytesRemaining = IMAGE_SIZE;
     41e:	f641 430a 	movw	r3, #7178	; 0x1c0a
     422:	60fb      	str	r3, [r7, #12]
    ui32Offset = 0;
     424:	2300      	movs	r3, #0
     426:	60bb      	str	r3, [r7, #8]

    while ( ui32BytesRemaining )
     428:	e05b      	b.n	4e2 <transfer_image+0xca>
    {
        //
        // Wait for another ready signal.
        //
        while ( am_hal_gpio_input_bit_read(BOOTLOADER_HANDSHAKE_PIN) );
     42a:	bf00      	nop
     42c:	4b30      	ldr	r3, [pc, #192]	; (4f0 <transfer_image+0xd8>)
     42e:	681b      	ldr	r3, [r3, #0]
     430:	f003 0304 	and.w	r3, r3, #4
     434:	2b00      	cmp	r3, #0
     436:	d1f9      	bne.n	42c <transfer_image+0x14>
        am_hal_iom_i2c_read(0, SLAVE_ADDRESS, g_psRxBuffer.words, 4, AM_HAL_IOM_OFFSET(0x0));
     438:	2300      	movs	r3, #0
     43a:	9300      	str	r3, [sp, #0]
     43c:	2304      	movs	r3, #4
     43e:	4a2d      	ldr	r2, [pc, #180]	; (4f4 <transfer_image+0xdc>)
     440:	2110      	movs	r1, #16
     442:	2000      	movs	r0, #0
     444:	f001 fb50 	bl	1ae8 <am_hal_iom_i2c_read>
        //
        // ACK the ready signal to have slave pull the interrupt line high.
        //
        g_psTxBuffer.words[0] = AM_BOOTLOADER_ACK_CMD;
     448:	4b2b      	ldr	r3, [pc, #172]	; (4f8 <transfer_image+0xe0>)
     44a:	2200      	movs	r2, #0
     44c:	601a      	str	r2, [r3, #0]
        am_hal_iom_i2c_write(0, SLAVE_ADDRESS, g_psTxBuffer.words, 4, AM_HAL_IOM_OFFSET(0x80));
     44e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     452:	9300      	str	r3, [sp, #0]
     454:	2304      	movs	r3, #4
     456:	4a28      	ldr	r2, [pc, #160]	; (4f8 <transfer_image+0xe0>)
     458:	2110      	movs	r1, #16
     45a:	2000      	movs	r0, #0
     45c:	f001 fa9a 	bl	1994 <am_hal_iom_i2c_write>
        //
        // Wait for the slave to read the ACK
        //
        while ( !am_hal_gpio_input_bit_read(BOOTLOADER_HANDSHAKE_PIN) );
     460:	bf00      	nop
     462:	4b23      	ldr	r3, [pc, #140]	; (4f0 <transfer_image+0xd8>)
     464:	681b      	ldr	r3, [r3, #0]
     466:	f003 0304 	and.w	r3, r3, #4
     46a:	2b00      	cmp	r3, #0
     46c:	d0f9      	beq.n	462 <transfer_image+0x4a>

        //
        // We can't transfer more than a few bytes at a time. Limit the
        // transaction to 112 bytes max.
        //
        ui32TransferSize = ui32BytesRemaining > 112 ? 112 : ui32BytesRemaining;
     46e:	68fb      	ldr	r3, [r7, #12]
     470:	2b70      	cmp	r3, #112	; 0x70
     472:	bf28      	it	cs
     474:	2370      	movcs	r3, #112	; 0x70
     476:	603b      	str	r3, [r7, #0]

        //
        // Start the packet with the packet length.
        //
        g_psTxBuffer.words[0] = ui32TransferSize;
     478:	4a1f      	ldr	r2, [pc, #124]	; (4f8 <transfer_image+0xe0>)
     47a:	683b      	ldr	r3, [r7, #0]
     47c:	6013      	str	r3, [r2, #0]

        //
        // Fill in the packet contents.
        //
        for ( i = 0; i < ui32TransferSize; i++ )
     47e:	2300      	movs	r3, #0
     480:	607b      	str	r3, [r7, #4]
     482:	e00b      	b.n	49c <transfer_image+0x84>
        {
            g_psTxBuffer.bytes[4 + i] = IMAGE_ARRAY[ui32Offset + i];
     484:	687b      	ldr	r3, [r7, #4]
     486:	3304      	adds	r3, #4
     488:	68b9      	ldr	r1, [r7, #8]
     48a:	687a      	ldr	r2, [r7, #4]
     48c:	440a      	add	r2, r1
     48e:	491b      	ldr	r1, [pc, #108]	; (4fc <transfer_image+0xe4>)
     490:	5c89      	ldrb	r1, [r1, r2]
     492:	4a19      	ldr	r2, [pc, #100]	; (4f8 <transfer_image+0xe0>)
     494:	54d1      	strb	r1, [r2, r3]
        for ( i = 0; i < ui32TransferSize; i++ )
     496:	687b      	ldr	r3, [r7, #4]
     498:	3301      	adds	r3, #1
     49a:	607b      	str	r3, [r7, #4]
     49c:	687a      	ldr	r2, [r7, #4]
     49e:	683b      	ldr	r3, [r7, #0]
     4a0:	429a      	cmp	r2, r3
     4a2:	d3ef      	bcc.n	484 <transfer_image+0x6c>
        }

        //
        // Send the data over to the slave.
        //
        am_hal_iom_i2c_write(0, SLAVE_ADDRESS, g_psTxBuffer.words, ui32TransferSize + 4,
     4a4:	683b      	ldr	r3, [r7, #0]
     4a6:	1d1a      	adds	r2, r3, #4
     4a8:	f44f 4304 	mov.w	r3, #33792	; 0x8400
     4ac:	9300      	str	r3, [sp, #0]
     4ae:	4613      	mov	r3, r2
     4b0:	4a11      	ldr	r2, [pc, #68]	; (4f8 <transfer_image+0xe0>)
     4b2:	2110      	movs	r1, #16
     4b4:	2000      	movs	r0, #0
     4b6:	f001 fa6d 	bl	1994 <am_hal_iom_i2c_write>
                             AM_HAL_IOM_OFFSET(0x84));

        //
        // Finish with the "New Packet" boot command.
        //
        g_psTxBuffer.words[0] = AM_BOOTLOADER_NEW_PACKET;
     4ba:	4b0f      	ldr	r3, [pc, #60]	; (4f8 <transfer_image+0xe0>)
     4bc:	2203      	movs	r2, #3
     4be:	601a      	str	r2, [r3, #0]
        am_hal_iom_i2c_write(0, SLAVE_ADDRESS, g_psTxBuffer.words, 4, AM_HAL_IOM_OFFSET(0x80));
     4c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     4c4:	9300      	str	r3, [sp, #0]
     4c6:	2304      	movs	r3, #4
     4c8:	4a0b      	ldr	r2, [pc, #44]	; (4f8 <transfer_image+0xe0>)
     4ca:	2110      	movs	r1, #16
     4cc:	2000      	movs	r0, #0
     4ce:	f001 fa61 	bl	1994 <am_hal_iom_i2c_write>

        //
        // Update the loop variables.
        //
        ui32BytesRemaining -= ui32TransferSize;
     4d2:	68fa      	ldr	r2, [r7, #12]
     4d4:	683b      	ldr	r3, [r7, #0]
     4d6:	1ad3      	subs	r3, r2, r3
     4d8:	60fb      	str	r3, [r7, #12]
        ui32Offset += ui32TransferSize;
     4da:	68ba      	ldr	r2, [r7, #8]
     4dc:	683b      	ldr	r3, [r7, #0]
     4de:	4413      	add	r3, r2
     4e0:	60bb      	str	r3, [r7, #8]
    while ( ui32BytesRemaining )
     4e2:	68fb      	ldr	r3, [r7, #12]
     4e4:	2b00      	cmp	r3, #0
     4e6:	d1a0      	bne.n	42a <transfer_image+0x12>
    }
}
     4e8:	bf00      	nop
     4ea:	3710      	adds	r7, #16
     4ec:	46bd      	mov	sp, r7
     4ee:	bd80      	pop	{r7, pc}
     4f0:	40010080 	.word	0x40010080
     4f4:	10001238 	.word	0x10001238
     4f8:	10001048 	.word	0x10001048
     4fc:	00003324 	.word	0x00003324

00000500 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     500:	b580      	push	{r7, lr}
     502:	b082      	sub	sp, #8
     504:	af02      	add	r7, sp, #8
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     506:	2000      	movs	r0, #0
     508:	f000 f9ae 	bl	868 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     50c:	481e      	ldr	r0, [pc, #120]	; (588 <main+0x88>)
     50e:	f000 f915 	bl	73c <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     512:	f000 f901 	bl	718 <am_bsp_low_power_init>

    //
    // Setup the pins for IO Master Example.
    //
    configure_pins();
     516:	f7ff fdd3 	bl	c0 <configure_pins>

    //
    // Initialize IOM 0 in I2C mode at 100KHz
    //
#ifndef AM_PART_APOLLO
    am_hal_iom_pwrctrl_enable(0);
     51a:	2000      	movs	r0, #0
     51c:	f000 fd40 	bl	fa0 <am_hal_iom_pwrctrl_enable>
#endif
    am_hal_iom_config(0, &g_sIOMConfig);
     520:	491a      	ldr	r1, [pc, #104]	; (58c <main+0x8c>)
     522:	2000      	movs	r0, #0
     524:	f000 fd66 	bl	ff4 <am_hal_iom_config>
    //
    // Turn on the IOM for this operation.
    //
    am_bsp_iom_enable(0);
     528:	2000      	movs	r0, #0
     52a:	f000 f891 	bl	650 <am_bsp_iom_enable>

    //
    // Force the slave into boot mode.
    //
    start_boot_mode();
     52e:	f7ff fe55 	bl	1dc <start_boot_mode>

    //
    // Wait for the 'READY' from the boot slave, and then send the packet
    // information.
    //
    start_new_image();
     532:	f7ff fecb 	bl	2cc <start_new_image>

    //
    // Change the override pin to correspond to a button on the Apollo EVK
    //
    override_pin_set(TARGET_BOARD_OVERRIDE_PIN, 0);
     536:	2100      	movs	r1, #0
     538:	2012      	movs	r0, #18
     53a:	f7ff ff21 	bl	380 <override_pin_set>

    //
    // Wait for another 'READY', and send the actual image across.
    //
    transfer_image();
     53e:	f7ff ff6b 	bl	418 <transfer_image>
    //
    // At this point, the slave should send back a either 'CRC OK' or some sort
    // of error. If the CRC was good, we should tell the slave to reset itself
    // and run the new image.
    //
    while ( am_hal_gpio_input_bit_read(BOOTLOADER_HANDSHAKE_PIN) );
     542:	bf00      	nop
     544:	4b12      	ldr	r3, [pc, #72]	; (590 <main+0x90>)
     546:	681b      	ldr	r3, [r3, #0]
     548:	f003 0304 	and.w	r3, r3, #4
     54c:	2b00      	cmp	r3, #0
     54e:	d1f9      	bne.n	544 <main+0x44>
    am_hal_iom_i2c_read(0, SLAVE_ADDRESS, g_psRxBuffer.words, 4, AM_HAL_IOM_OFFSET(0x0));
     550:	2300      	movs	r3, #0
     552:	9300      	str	r3, [sp, #0]
     554:	2304      	movs	r3, #4
     556:	4a0f      	ldr	r2, [pc, #60]	; (594 <main+0x94>)
     558:	2110      	movs	r1, #16
     55a:	2000      	movs	r0, #0
     55c:	f001 fac4 	bl	1ae8 <am_hal_iom_i2c_read>

    if ( g_psRxBuffer.words[0] == AM_BOOTLOADER_IMAGE_COMPLETE )
     560:	4b0c      	ldr	r3, [pc, #48]	; (594 <main+0x94>)
     562:	681b      	ldr	r3, [r3, #0]
     564:	2b03      	cmp	r3, #3
     566:	d10e      	bne.n	586 <main+0x86>
    {
        //
        // Make sure the override pin is high so the slave will reboot into
        // application mode when our boot procedure is complete.
        //
        am_hal_gpio_out_bit_set(DRIVE_SLAVE_OVERRIDE_PIN);
     568:	4b0b      	ldr	r3, [pc, #44]	; (598 <main+0x98>)
     56a:	2210      	movs	r2, #16
     56c:	601a      	str	r2, [r3, #0]
        //
        // If the CRC is correct, send a RESET command.
        //
        g_psTxBuffer.words[0] = AM_BOOTLOADER_RESET;
     56e:	4b0b      	ldr	r3, [pc, #44]	; (59c <main+0x9c>)
     570:	2204      	movs	r2, #4
     572:	601a      	str	r2, [r3, #0]
        am_hal_iom_i2c_write(0, SLAVE_ADDRESS, g_psTxBuffer.words, 4, AM_HAL_IOM_OFFSET(0x80));
     574:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     578:	9300      	str	r3, [sp, #0]
     57a:	2304      	movs	r3, #4
     57c:	4a07      	ldr	r2, [pc, #28]	; (59c <main+0x9c>)
     57e:	2110      	movs	r1, #16
     580:	2000      	movs	r0, #0
     582:	f001 fa07 	bl	1994 <am_hal_iom_i2c_write>
    }

    //
    // Loop forever.
    //
    while (1)
     586:	e7fe      	b.n	586 <main+0x86>
     588:	00004f6c 	.word	0x00004f6c
     58c:	00004f30 	.word	0x00004f30
     590:	40010080 	.word	0x40010080
     594:	10001238 	.word	0x10001238
     598:	40010090 	.word	0x40010090
     59c:	10001048 	.word	0x10001048

000005a0 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     5a0:	4811      	ldr	r0, [pc, #68]	; (5e8 <zero_loop+0x12>)
     5a2:	4912      	ldr	r1, [pc, #72]	; (5ec <zero_loop+0x16>)
     5a4:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     5a6:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     5aa:	4811      	ldr	r0, [pc, #68]	; (5f0 <zero_loop+0x1a>)
     5ac:	6801      	ldr	r1, [r0, #0]
     5ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     5b2:	6001      	str	r1, [r0, #0]
     5b4:	f3bf 8f4f 	dsb	sy
     5b8:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     5bc:	480d      	ldr	r0, [pc, #52]	; (5f4 <zero_loop+0x1e>)
     5be:	490e      	ldr	r1, [pc, #56]	; (5f8 <zero_loop+0x22>)
     5c0:	4a0e      	ldr	r2, [pc, #56]	; (5fc <zero_loop+0x26>)

000005c2 <copy_loop>:
     5c2:	f850 3b04 	ldr.w	r3, [r0], #4
     5c6:	f841 3b04 	str.w	r3, [r1], #4
     5ca:	4291      	cmp	r1, r2
     5cc:	dbf9      	blt.n	5c2 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     5ce:	480c      	ldr	r0, [pc, #48]	; (600 <zero_loop+0x2a>)
     5d0:	490c      	ldr	r1, [pc, #48]	; (604 <zero_loop+0x2e>)
     5d2:	f04f 0200 	mov.w	r2, #0

000005d6 <zero_loop>:
     5d6:	4288      	cmp	r0, r1
     5d8:	bfb8      	it	lt
     5da:	f840 2b04 	strlt.w	r2, [r0], #4
     5de:	dbfa      	blt.n	5d6 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     5e0:	f7ff ff8e 	bl	500 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     5e4:	be00      	bkpt	0x0000
}
     5e6:	bf00      	nop
     5e8:	e000ed08 	.word	0xe000ed08
     5ec:	00000000 	.word	0x00000000
     5f0:	e000ed88 	.word	0xe000ed88
     5f4:	000050d0 	.word	0x000050d0
     5f8:	10001000 	.word	0x10001000
     5fc:	10001004 	.word	0x10001004
     600:	10001004 	.word	0x10001004
     604:	100014d0 	.word	0x100014d0

00000608 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     608:	b480      	push	{r7}
     60a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     60c:	e7fe      	b.n	60c <am_nmi_isr+0x4>

0000060e <am_busfault_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_fault_isr(void)
{
     60e:	b480      	push	{r7}
     610:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     612:	e7fe      	b.n	612 <am_busfault_isr+0x4>

00000614 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     614:	b480      	push	{r7}
     616:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     618:	e7fe      	b.n	618 <am_adc_isr+0x4>
	...

0000061c <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
     61c:	b580      	push	{r7, lr}
     61e:	b084      	sub	sp, #16
     620:	af00      	add	r7, sp, #0
     622:	6078      	str	r0, [r7, #4]
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
     624:	f000 f938 	bl	898 <am_hal_clkgen_sysclk_get>
     628:	60f8      	str	r0, [r7, #12]
#endif
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
     62a:	68fb      	ldr	r3, [r7, #12]
     62c:	4a07      	ldr	r2, [pc, #28]	; (64c <am_util_delay_us+0x30>)
     62e:	fba2 2303 	umull	r2, r3, r2, r3
     632:	0c9b      	lsrs	r3, r3, #18
     634:	687a      	ldr	r2, [r7, #4]
     636:	fb02 f303 	mul.w	r3, r2, r3
     63a:	60bb      	str	r3, [r7, #8]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
     63c:	68b8      	ldr	r0, [r7, #8]
     63e:	f000 f947 	bl	8d0 <am_hal_flash_delay>
}
     642:	bf00      	nop
     644:	3710      	adds	r7, #16
     646:	46bd      	mov	sp, r7
     648:	bd80      	pop	{r7, pc}
     64a:	bf00      	nop
     64c:	165e9f81 	.word	0x165e9f81

00000650 <am_bsp_iom_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_iom_enable(uint32_t ui32Module)
{
     650:	b5f0      	push	{r4, r5, r6, r7, lr}
     652:	4605      	mov	r5, r0
    am_hal_iom_enable(ui32Module);

    //
    // Check that the MISO pin is defined in BSP and we are in SPI mode.
    //
    if ( (AM_BSP_GPIO_UNDEF != g_SPIpins[ui32Module][0] ) &&
     654:	4e2b      	ldr	r6, [pc, #172]	; (704 <am_bsp_iom_enable+0xb4>)
{
     656:	b083      	sub	sp, #12
    am_hal_iom_enable(ui32Module);
     658:	f000 fcb6 	bl	fc8 <am_hal_iom_enable>
    if ( (AM_BSP_GPIO_UNDEF != g_SPIpins[ui32Module][0] ) &&
     65c:	f856 4035 	ldr.w	r4, [r6, r5, lsl #3]
     660:	4b29      	ldr	r3, [pc, #164]	; (708 <am_bsp_iom_enable+0xb8>)
     662:	429c      	cmp	r4, r3
     664:	d009      	beq.n	67a <am_bsp_iom_enable+0x2a>
         (1 == AM_BFRn(IOMSTR, ui32Module, CFG, IFCSEL) ) )
     666:	f505 20a0 	add.w	r0, r5, #327680	; 0x50000
     66a:	3004      	adds	r0, #4
     66c:	0301      	lsls	r1, r0, #12
     66e:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    if ( (AM_BSP_GPIO_UNDEF != g_SPIpins[ui32Module][0] ) &&
     672:	07d3      	lsls	r3, r2, #31
     674:	d501      	bpl.n	67a <am_bsp_iom_enable+0x2a>
    {
        am_hal_gpio_pin_config(g_SPIpins[ui32Module][0],
     676:	2c31      	cmp	r4, #49	; 0x31
     678:	d901      	bls.n	67e <am_bsp_iom_enable+0x2e>
                               g_SPIpins[ui32Module][1]);
    }
}
     67a:	b003      	add	sp, #12
     67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        am_hal_gpio_pin_config(g_SPIpins[ui32Module][0],
     67e:	f000 fa0b 	bl	a98 <am_hal_interrupt_master_disable>
     682:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
     686:	4e21      	ldr	r6, [pc, #132]	; (70c <am_bsp_iom_enable+0xbc>)
     688:	9001      	str	r0, [sp, #4]
     68a:	0865      	lsrs	r5, r4, #1
     68c:	f005 0e7c 	and.w	lr, r5, #124	; 0x7c
     690:	f8df c080 	ldr.w	ip, [pc, #128]	; 714 <am_bsp_iom_enable+0xc4>
     694:	687b      	ldr	r3, [r7, #4]
     696:	4d1e      	ldr	r5, [pc, #120]	; (710 <am_bsp_iom_enable+0xc0>)
     698:	2073      	movs	r0, #115	; 0x73
     69a:	6030      	str	r0, [r6, #0]
     69c:	00a1      	lsls	r1, r4, #2
     69e:	f85e 700c 	ldr.w	r7, [lr, ip]
     6a2:	f001 001c 	and.w	r0, r1, #28
     6a6:	2207      	movs	r2, #7
     6a8:	4082      	lsls	r2, r0
     6aa:	ea27 0102 	bic.w	r1, r7, r2
     6ae:	f3c3 2202 	ubfx	r2, r3, #8, #3
     6b2:	4082      	lsls	r2, r0
     6b4:	f004 00fc 	and.w	r0, r4, #252	; 0xfc
     6b8:	430a      	orrs	r2, r1
     6ba:	f100 4780 	add.w	r7, r0, #1073741824	; 0x40000000
     6be:	f84e 200c 	str.w	r2, [lr, ip]
     6c2:	00e4      	lsls	r4, r4, #3
     6c4:	f507 3c80 	add.w	ip, r7, #65536	; 0x10000
     6c8:	21ff      	movs	r1, #255	; 0xff
     6ca:	f004 0718 	and.w	r7, r4, #24
     6ce:	f8dc e000 	ldr.w	lr, [ip]
     6d2:	40b9      	lsls	r1, r7
     6d4:	43ca      	mvns	r2, r1
     6d6:	b2dc      	uxtb	r4, r3
     6d8:	ea0e 0102 	and.w	r1, lr, r2
     6dc:	40bc      	lsls	r4, r7
     6de:	430c      	orrs	r4, r1
     6e0:	f8cc 4000 	str.w	r4, [ip]
     6e4:	5941      	ldr	r1, [r0, r5]
     6e6:	f3c3 4307 	ubfx	r3, r3, #16, #8
     6ea:	400a      	ands	r2, r1
     6ec:	fa03 f707 	lsl.w	r7, r3, r7
     6f0:	4317      	orrs	r7, r2
     6f2:	2200      	movs	r2, #0
     6f4:	5147      	str	r7, [r0, r5]
     6f6:	6032      	str	r2, [r6, #0]
     6f8:	9801      	ldr	r0, [sp, #4]
     6fa:	f000 f9d1 	bl	aa0 <am_hal_interrupt_master_set>
}
     6fe:	b003      	add	sp, #12
     700:	bdf0      	pop	{r4, r5, r6, r7, pc}
     702:	bf00      	nop
     704:	00004f3c 	.word	0x00004f3c
     708:	deadbeef 	.word	0xdeadbeef
     70c:	40010060 	.word	0x40010060
     710:	400100e0 	.word	0x400100e0
     714:	40010040 	.word	0x40010040

00000718 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
     718:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
     71a:	f001 fbe5 	bl	1ee8 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
     71e:	f001 fc51 	bl	1fc4 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
     722:	f001 fda3 	bl	226c <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
     726:	2001      	movs	r0, #1
     728:	f001 fcec 	bl	2104 <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
     72c:	2001      	movs	r0, #1
     72e:	f000 f8c3 	bl	8b8 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
     732:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
     736:	f001 bcf3 	b.w	2120 <am_hal_rtc_osc_disable>
     73a:	bf00      	nop

0000073c <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
     73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     73e:	4605      	mov	r5, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
     740:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
     744:	78ab      	ldrb	r3, [r5, #2]
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
     746:	786c      	ldrb	r4, [r5, #1]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
     748:	78ef      	ldrb	r7, [r5, #3]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
     74a:	792e      	ldrb	r6, [r5, #4]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
     74c:	79a9      	ldrb	r1, [r5, #6]
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
     74e:	009a      	lsls	r2, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
     750:	0064      	lsls	r4, r4, #1
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
     752:	f002 0204 	and.w	r2, r2, #4
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
     756:	f004 0402 	and.w	r4, r4, #2
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
     75a:	4314      	orrs	r4, r2
     75c:	f047 0701 	orr.w	r7, r7, #1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
     760:	79ea      	ldrb	r2, [r5, #7]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
     762:	01f6      	lsls	r6, r6, #7
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
     764:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
     766:	b2f6      	uxtb	r6, r6
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
     768:	7a2f      	ldrb	r7, [r5, #8]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
     76a:	0289      	lsls	r1, r1, #10
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
     76c:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
     76e:	f401 6180 	and.w	r1, r1, #1024	; 0x400
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
     772:	7a6e      	ldrb	r6, [r5, #9]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
     774:	02d2      	lsls	r2, r2, #11
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
     776:	430c      	orrs	r4, r1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
     778:	f402 6200 	and.w	r2, r2, #2048	; 0x800
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
     77c:	7aa9      	ldrb	r1, [r5, #10]
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
     77e:	033f      	lsls	r7, r7, #12
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
     780:	4314      	orrs	r4, r2
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
     782:	b2bf      	uxth	r7, r7
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
     784:	0436      	lsls	r6, r6, #16
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
     786:	7aea      	ldrb	r2, [r5, #11]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
     788:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
     78a:	0509      	lsls	r1, r1, #20
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
     78c:	f406 2770 	and.w	r7, r6, #983040	; 0xf0000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
     790:	0612      	lsls	r2, r2, #24
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
     792:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
     794:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
     798:	009b      	lsls	r3, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
     79a:	f002 7780 	and.w	r7, r2, #16777216	; 0x1000000
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
     79e:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
     7a0:	f003 0108 	and.w	r1, r3, #8
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
     7a4:	433c      	orrs	r4, r7
     7a6:	430c      	orrs	r4, r1
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
     7a8:	f001 fa98 	bl	1cdc <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
     7ac:	482c      	ldr	r0, [pc, #176]	; (860 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
     7ae:	4b2d      	ldr	r3, [pc, #180]	; (864 <am_hal_cachectrl_enable+0x128>)
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
     7b0:	6004      	str	r4, [r0, #0]
     7b2:	2232      	movs	r2, #50	; 0x32
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
     7b4:	681e      	ldr	r6, [r3, #0]
     7b6:	0777      	lsls	r7, r6, #29
     7b8:	d41e      	bmi.n	7f8 <am_hal_cachectrl_enable+0xbc>
     7ba:	681f      	ldr	r7, [r3, #0]
     7bc:	077e      	lsls	r6, r7, #29
     7be:	f102 32ff 	add.w	r2, r2, #4294967295
     7c2:	d419      	bmi.n	7f8 <am_hal_cachectrl_enable+0xbc>
     7c4:	6819      	ldr	r1, [r3, #0]
     7c6:	074f      	lsls	r7, r1, #29
     7c8:	d416      	bmi.n	7f8 <am_hal_cachectrl_enable+0xbc>
     7ca:	6818      	ldr	r0, [r3, #0]
     7cc:	0746      	lsls	r6, r0, #29
     7ce:	d413      	bmi.n	7f8 <am_hal_cachectrl_enable+0xbc>
     7d0:	681e      	ldr	r6, [r3, #0]
     7d2:	0770      	lsls	r0, r6, #29
     7d4:	d410      	bmi.n	7f8 <am_hal_cachectrl_enable+0xbc>
     7d6:	681f      	ldr	r7, [r3, #0]
     7d8:	0779      	lsls	r1, r7, #29
     7da:	d40d      	bmi.n	7f8 <am_hal_cachectrl_enable+0xbc>
     7dc:	6819      	ldr	r1, [r3, #0]
     7de:	074f      	lsls	r7, r1, #29
     7e0:	d40a      	bmi.n	7f8 <am_hal_cachectrl_enable+0xbc>
     7e2:	6818      	ldr	r0, [r3, #0]
     7e4:	0746      	lsls	r6, r0, #29
     7e6:	d407      	bmi.n	7f8 <am_hal_cachectrl_enable+0xbc>
     7e8:	681e      	ldr	r6, [r3, #0]
     7ea:	0770      	lsls	r0, r6, #29
     7ec:	d404      	bmi.n	7f8 <am_hal_cachectrl_enable+0xbc>
     7ee:	681f      	ldr	r7, [r3, #0]
     7f0:	0779      	lsls	r1, r7, #29
     7f2:	d401      	bmi.n	7f8 <am_hal_cachectrl_enable+0xbc>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
     7f4:	3a09      	subs	r2, #9
     7f6:	d1dd      	bne.n	7b4 <am_hal_cachectrl_enable+0x78>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
     7f8:	4b1a      	ldr	r3, [pc, #104]	; (864 <am_hal_cachectrl_enable+0x128>)
     7fa:	681a      	ldr	r2, [r3, #0]
     7fc:	f042 0101 	orr.w	r1, r2, #1
     800:	6019      	str	r1, [r3, #0]
     802:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
     804:	6818      	ldr	r0, [r3, #0]
     806:	0740      	lsls	r0, r0, #29
     808:	d41e      	bmi.n	848 <am_hal_cachectrl_enable+0x10c>
     80a:	681e      	ldr	r6, [r3, #0]
     80c:	0771      	lsls	r1, r6, #29
     80e:	f102 32ff 	add.w	r2, r2, #4294967295
     812:	d419      	bmi.n	848 <am_hal_cachectrl_enable+0x10c>
     814:	681f      	ldr	r7, [r3, #0]
     816:	077f      	lsls	r7, r7, #29
     818:	d416      	bmi.n	848 <am_hal_cachectrl_enable+0x10c>
     81a:	6819      	ldr	r1, [r3, #0]
     81c:	074e      	lsls	r6, r1, #29
     81e:	d413      	bmi.n	848 <am_hal_cachectrl_enable+0x10c>
     820:	6818      	ldr	r0, [r3, #0]
     822:	0740      	lsls	r0, r0, #29
     824:	d410      	bmi.n	848 <am_hal_cachectrl_enable+0x10c>
     826:	681e      	ldr	r6, [r3, #0]
     828:	0771      	lsls	r1, r6, #29
     82a:	d40d      	bmi.n	848 <am_hal_cachectrl_enable+0x10c>
     82c:	681f      	ldr	r7, [r3, #0]
     82e:	077f      	lsls	r7, r7, #29
     830:	d40a      	bmi.n	848 <am_hal_cachectrl_enable+0x10c>
     832:	6819      	ldr	r1, [r3, #0]
     834:	074e      	lsls	r6, r1, #29
     836:	d407      	bmi.n	848 <am_hal_cachectrl_enable+0x10c>
     838:	6818      	ldr	r0, [r3, #0]
     83a:	0740      	lsls	r0, r0, #29
     83c:	d404      	bmi.n	848 <am_hal_cachectrl_enable+0x10c>
     83e:	681e      	ldr	r6, [r3, #0]
     840:	0771      	lsls	r1, r6, #29
     842:	d401      	bmi.n	848 <am_hal_cachectrl_enable+0x10c>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
     844:	3a09      	subs	r2, #9
     846:	d1dd      	bne.n	804 <am_hal_cachectrl_enable+0xc8>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
     848:	796d      	ldrb	r5, [r5, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
     84a:	4f05      	ldr	r7, [pc, #20]	; (860 <am_hal_cachectrl_enable+0x124>)
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );
     84c:	022b      	lsls	r3, r5, #8
     84e:	f403 7100 	and.w	r1, r3, #512	; 0x200
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
     852:	f403 7280 	and.w	r2, r3, #256	; 0x100
     856:	4311      	orrs	r1, r2
     858:	430c      	orrs	r4, r1
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
     85a:	603c      	str	r4, [r7, #0]
     85c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     85e:	bf00      	nop
     860:	40018000 	.word	0x40018000
     864:	40018008 	.word	0x40018008

00000868 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
     868:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
     86a:	4604      	mov	r4, r0
     86c:	b120      	cbz	r0, 878 <am_hal_clkgen_sysclk_select+0x10>
     86e:	4a06      	ldr	r2, [pc, #24]	; (888 <am_hal_clkgen_sysclk_select+0x20>)
     870:	4806      	ldr	r0, [pc, #24]	; (88c <am_hal_clkgen_sysclk_select+0x24>)
     872:	2153      	movs	r1, #83	; 0x53
     874:	f000 f82a 	bl	8cc <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
     878:	4b05      	ldr	r3, [pc, #20]	; (890 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the required operating value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
     87a:	4906      	ldr	r1, [pc, #24]	; (894 <am_hal_clkgen_sysclk_select+0x2c>)
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
     87c:	2047      	movs	r0, #71	; 0x47

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
     87e:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
     880:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
     882:	600c      	str	r4, [r1, #0]
    AM_REG(CLKGEN, CLKKEY) = 0;
     884:	601a      	str	r2, [r3, #0]
     886:	bd10      	pop	{r4, pc}
     888:	00004f78 	.word	0x00004f78
     88c:	00004fb0 	.word	0x00004fb0
     890:	40004014 	.word	0x40004014
     894:	40004018 	.word	0x40004018

00000898 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
     898:	4b04      	ldr	r3, [pc, #16]	; (8ac <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
     89a:	4905      	ldr	r1, [pc, #20]	; (8b0 <am_hal_clkgen_sysclk_get+0x18>)
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
     89c:	681a      	ldr	r2, [r3, #0]
            return 48000000;
     89e:	4805      	ldr	r0, [pc, #20]	; (8b4 <am_hal_clkgen_sysclk_get+0x1c>)
    switch ( ui32ClockSetting )
     8a0:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
     8a4:	bf08      	it	eq
     8a6:	4608      	moveq	r0, r1
     8a8:	4770      	bx	lr
     8aa:	bf00      	nop
     8ac:	40004018 	.word	0x40004018
     8b0:	02dc6c00 	.word	0x02dc6c00
     8b4:	016e3600 	.word	0x016e3600

000008b8 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
     8b8:	0783      	lsls	r3, r0, #30
     8ba:	d003      	beq.n	8c4 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
     8bc:	4b02      	ldr	r3, [pc, #8]	; (8c8 <am_hal_clkgen_osc_stop+0x10>)
     8be:	681a      	ldr	r2, [r3, #0]
     8c0:	4310      	orrs	r0, r2
     8c2:	6018      	str	r0, [r3, #0]
     8c4:	4770      	bx	lr
     8c6:	bf00      	nop
     8c8:	4000400c 	.word	0x4000400c

000008cc <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
     8cc:	e7fe      	b.n	8cc <am_hal_debug_error>
     8ce:	bf00      	nop

000008d0 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
     8d0:	4b00      	ldr	r3, [pc, #0]	; (8d4 <am_hal_flash_delay+0x4>)
     8d2:	4718      	bx	r3
     8d4:	0800009d 	.word	0x0800009d

000008d8 <am_hal_flash_delay_status_change>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_change(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                 uint32_t ui32Mask, uint32_t ui32Value)
{
    while ( ui32usMaxDelay-- )
     8d8:	2800      	cmp	r0, #0
     8da:	f000 809a 	beq.w	a12 <am_hal_flash_delay_status_change+0x13a>
{
     8de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     8e2:	1e44      	subs	r4, r0, #1
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     8e4:	6808      	ldr	r0, [r1, #0]
     8e6:	4010      	ands	r0, r2
     8e8:	4283      	cmp	r3, r0
     8ea:	f000 808c 	beq.w	a06 <am_hal_flash_delay_status_change+0x12e>
     8ee:	f014 0907 	ands.w	r9, r4, #7
     8f2:	461d      	mov	r5, r3
     8f4:	4616      	mov	r6, r2
     8f6:	460f      	mov	r7, r1
    g_am_hal_flash.delay_cycles(ui32Iterations);
     8f8:	f8df 811c 	ldr.w	r8, [pc, #284]	; a18 <am_hal_flash_delay_status_change+0x140>
     8fc:	d049      	beq.n	992 <am_hal_flash_delay_status_change+0xba>
     8fe:	200c      	movs	r0, #12
     900:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     902:	683b      	ldr	r3, [r7, #0]
     904:	4033      	ands	r3, r6
     906:	42ab      	cmp	r3, r5
    while ( ui32usMaxDelay-- )
     908:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     90c:	d07b      	beq.n	a06 <am_hal_flash_delay_status_change+0x12e>
     90e:	f1b9 0f01 	cmp.w	r9, #1
     912:	d03e      	beq.n	992 <am_hal_flash_delay_status_change+0xba>
     914:	f1b9 0f02 	cmp.w	r9, #2
     918:	d033      	beq.n	982 <am_hal_flash_delay_status_change+0xaa>
     91a:	f1b9 0f03 	cmp.w	r9, #3
     91e:	d028      	beq.n	972 <am_hal_flash_delay_status_change+0x9a>
     920:	f1b9 0f04 	cmp.w	r9, #4
     924:	d01d      	beq.n	962 <am_hal_flash_delay_status_change+0x8a>
     926:	f1b9 0f05 	cmp.w	r9, #5
     92a:	d012      	beq.n	952 <am_hal_flash_delay_status_change+0x7a>
     92c:	f1b9 0f06 	cmp.w	r9, #6
     930:	d007      	beq.n	942 <am_hal_flash_delay_status_change+0x6a>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     932:	200c      	movs	r0, #12
     934:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     936:	6839      	ldr	r1, [r7, #0]
     938:	4031      	ands	r1, r6
     93a:	42a9      	cmp	r1, r5
    while ( ui32usMaxDelay-- )
     93c:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     940:	d061      	beq.n	a06 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     942:	200c      	movs	r0, #12
     944:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     946:	683a      	ldr	r2, [r7, #0]
     948:	4032      	ands	r2, r6
     94a:	42aa      	cmp	r2, r5
    while ( ui32usMaxDelay-- )
     94c:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     950:	d059      	beq.n	a06 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     952:	200c      	movs	r0, #12
     954:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     956:	6838      	ldr	r0, [r7, #0]
     958:	4030      	ands	r0, r6
     95a:	42a8      	cmp	r0, r5
    while ( ui32usMaxDelay-- )
     95c:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     960:	d051      	beq.n	a06 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     962:	200c      	movs	r0, #12
     964:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     966:	683b      	ldr	r3, [r7, #0]
     968:	4033      	ands	r3, r6
     96a:	42ab      	cmp	r3, r5
    while ( ui32usMaxDelay-- )
     96c:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     970:	d049      	beq.n	a06 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     972:	200c      	movs	r0, #12
     974:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     976:	6839      	ldr	r1, [r7, #0]
     978:	4031      	ands	r1, r6
     97a:	42a9      	cmp	r1, r5
    while ( ui32usMaxDelay-- )
     97c:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     980:	d041      	beq.n	a06 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     982:	200c      	movs	r0, #12
     984:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     986:	683a      	ldr	r2, [r7, #0]
     988:	4032      	ands	r2, r6
     98a:	42aa      	cmp	r2, r5
    while ( ui32usMaxDelay-- )
     98c:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     990:	d039      	beq.n	a06 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     992:	200c      	movs	r0, #12
     994:	47c0      	blx	r8
     996:	200c      	movs	r0, #12
    while ( ui32usMaxDelay-- )
     998:	2c00      	cmp	r4, #0
     99a:	d037      	beq.n	a0c <am_hal_flash_delay_status_change+0x134>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     99c:	683b      	ldr	r3, [r7, #0]
     99e:	4033      	ands	r3, r6
     9a0:	42ab      	cmp	r3, r5
    while ( ui32usMaxDelay-- )
     9a2:	f1a4 0408 	sub.w	r4, r4, #8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     9a6:	d02e      	beq.n	a06 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     9a8:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     9aa:	6839      	ldr	r1, [r7, #0]
     9ac:	4031      	ands	r1, r6
     9ae:	42a9      	cmp	r1, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
     9b0:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     9b4:	d027      	beq.n	a06 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     9b6:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     9b8:	683a      	ldr	r2, [r7, #0]
     9ba:	4032      	ands	r2, r6
     9bc:	42aa      	cmp	r2, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
     9be:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     9c2:	d020      	beq.n	a06 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     9c4:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     9c6:	683b      	ldr	r3, [r7, #0]
     9c8:	4033      	ands	r3, r6
     9ca:	42ab      	cmp	r3, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
     9cc:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     9d0:	d019      	beq.n	a06 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     9d2:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     9d4:	6839      	ldr	r1, [r7, #0]
     9d6:	4031      	ands	r1, r6
     9d8:	42a9      	cmp	r1, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
     9da:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     9de:	d012      	beq.n	a06 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     9e0:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     9e2:	683a      	ldr	r2, [r7, #0]
     9e4:	4032      	ands	r2, r6
     9e6:	42aa      	cmp	r2, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
     9e8:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     9ec:	d00b      	beq.n	a06 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     9ee:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     9f0:	683b      	ldr	r3, [r7, #0]
     9f2:	4033      	ands	r3, r6
     9f4:	42ab      	cmp	r3, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
     9f6:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     9fa:	d004      	beq.n	a06 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
     9fc:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
     9fe:	6838      	ldr	r0, [r7, #0]
     a00:	4030      	ands	r0, r6
     a02:	42a8      	cmp	r0, r5
     a04:	d1c5      	bne.n	992 <am_hal_flash_delay_status_change+0xba>
        {
            return 1;
     a06:	2001      	movs	r0, #1
     a08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        // Call the BOOTROM cycle function to delay for about 1 microsecond.
        //
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    }

    return 0;
     a0c:	2000      	movs	r0, #0
     a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     a12:	2000      	movs	r0, #0
} // am_hal_flash_delay_status_change()
     a14:	4770      	bx	lr
     a16:	bf00      	nop
     a18:	0800009d 	.word	0x0800009d

00000a1c <am_hal_gpio_int_clear>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_clear(uint64_t ui64InterruptMask)
{
     a1c:	b530      	push	{r4, r5, lr}
     a1e:	b083      	sub	sp, #12
     a20:	460d      	mov	r5, r1
     a22:	4604      	mov	r4, r0
    //
    // Clear the interrupts.
    //
    AM_CRITICAL_BEGIN_ASM
     a24:	f000 f838 	bl	a98 <am_hal_interrupt_master_disable>
    AM_REG(GPIO, INT1CLR) = (ui64InterruptMask >> 32);
     a28:	4a04      	ldr	r2, [pc, #16]	; (a3c <am_hal_gpio_int_clear+0x20>)
    AM_REG(GPIO, INT0CLR) = (ui64InterruptMask & 0xFFFFFFFF);
     a2a:	4b05      	ldr	r3, [pc, #20]	; (a40 <am_hal_gpio_int_clear+0x24>)
    AM_CRITICAL_BEGIN_ASM
     a2c:	9001      	str	r0, [sp, #4]
    AM_REG(GPIO, INT1CLR) = (ui64InterruptMask >> 32);
     a2e:	6015      	str	r5, [r2, #0]
    AM_REG(GPIO, INT0CLR) = (ui64InterruptMask & 0xFFFFFFFF);
     a30:	601c      	str	r4, [r3, #0]
    AM_CRITICAL_END_ASM
     a32:	9801      	ldr	r0, [sp, #4]
     a34:	f000 f834 	bl	aa0 <am_hal_interrupt_master_set>
}
     a38:	b003      	add	sp, #12
     a3a:	bd30      	pop	{r4, r5, pc}
     a3c:	40010218 	.word	0x40010218
     a40:	40010208 	.word	0x40010208

00000a44 <am_hal_gpio_int_status_get>:
//! @return None
//
//*****************************************************************************
uint64_t
am_hal_gpio_int_status_get(bool bEnabledOnly)
{
     a44:	b570      	push	{r4, r5, r6, lr}
     a46:	b082      	sub	sp, #8
     a48:	4606      	mov	r6, r0
    //
    // Combine upper or lower GPIO words into one 64 bit return value.
    //
    ui64Mask   = 0xFFFFFFFFFFFFFFFF;

    AM_CRITICAL_BEGIN_ASM
     a4a:	f000 f825 	bl	a98 <am_hal_interrupt_master_disable>
    ui64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
     a4e:	4b0f      	ldr	r3, [pc, #60]	; (a8c <am_hal_gpio_int_status_get+0x48>)
    AM_CRITICAL_BEGIN_ASM
     a50:	9001      	str	r0, [sp, #4]
    ui64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
     a52:	f1a3 0110 	sub.w	r1, r3, #16
    ui64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
     a56:	681d      	ldr	r5, [r3, #0]
    ui64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
     a58:	680a      	ldr	r2, [r1, #0]
    ui64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
     a5a:	2000      	movs	r0, #0
    ui64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
     a5c:	ea40 0402 	orr.w	r4, r0, r2

    if ( bEnabledOnly )
     a60:	b176      	cbz	r6, a80 <am_hal_gpio_int_status_get+0x3c>
    {
        ui64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
     a62:	490b      	ldr	r1, [pc, #44]	; (a90 <am_hal_gpio_int_status_get+0x4c>)
        ui64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
     a64:	4a0b      	ldr	r2, [pc, #44]	; (a94 <am_hal_gpio_int_status_get+0x50>)
        ui64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
     a66:	680b      	ldr	r3, [r1, #0]
        ui64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
     a68:	6811      	ldr	r1, [r2, #0]
        ui64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
     a6a:	4606      	mov	r6, r0
        ui64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
     a6c:	430e      	orrs	r6, r1
    }

    ui64RetVal &= ui64Mask;
    AM_CRITICAL_END_ASM
     a6e:	9801      	ldr	r0, [sp, #4]
    ui64RetVal &= ui64Mask;
     a70:	401d      	ands	r5, r3
    AM_CRITICAL_END_ASM
     a72:	f000 f815 	bl	aa0 <am_hal_interrupt_master_set>
    ui64RetVal &= ui64Mask;
     a76:	4034      	ands	r4, r6

    return ui64RetVal;
}
     a78:	4620      	mov	r0, r4
     a7a:	4629      	mov	r1, r5
     a7c:	b002      	add	sp, #8
     a7e:	bd70      	pop	{r4, r5, r6, pc}
    ui64Mask   = 0xFFFFFFFFFFFFFFFF;
     a80:	f04f 36ff 	mov.w	r6, #4294967295
     a84:	f04f 33ff 	mov.w	r3, #4294967295
     a88:	e7f1      	b.n	a6e <am_hal_gpio_int_status_get+0x2a>
     a8a:	bf00      	nop
     a8c:	40010214 	.word	0x40010214
     a90:	40010210 	.word	0x40010210
     a94:	40010200 	.word	0x40010200

00000a98 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
     a98:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
     a9c:	b672      	cpsid	i
    __asm("    bx lr");
     a9e:	4770      	bx	lr

00000aa0 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
     aa0:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
     aa4:	4770      	bx	lr
     aa6:	bf00      	nop

00000aa8 <am_hal_iom_sleeping_queue_flush>:
    uint32_t ui32Critical;

    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
     aa8:	2805      	cmp	r0, #5
     aaa:	d819      	bhi.n	ae0 <am_hal_iom_sleeping_queue_flush+0x38>
{
     aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     aae:	4f0d      	ldr	r7, [pc, #52]	; (ae4 <am_hal_iom_sleeping_queue_flush+0x3c>)
     ab0:	4e0d      	ldr	r6, [pc, #52]	; (ae8 <am_hal_iom_sleeping_queue_flush+0x40>)

        //
        // Check the queue and the IOM itself.
        //
        if ( (g_bIomBusy[ui32Module] == false) &&
            am_hal_queue_empty(&g_psIOMQueue[ui32Module]) )
     ab2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     ab6:	4604      	mov	r4, r0
     ab8:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
        ui32Critical = am_hal_interrupt_master_disable();
     abc:	f7ff ffec 	bl	a98 <am_hal_interrupt_master_disable>
        if ( (g_bIomBusy[ui32Module] == false) &&
     ac0:	5d31      	ldrb	r1, [r6, r4]
        ui32Critical = am_hal_interrupt_master_disable();
     ac2:	4605      	mov	r5, r0
        if ( (g_bIomBusy[ui32Module] == false) &&
     ac4:	b929      	cbnz	r1, ad2 <am_hal_iom_sleeping_queue_flush+0x2a>
     ac6:	68ba      	ldr	r2, [r7, #8]
     ac8:	b91a      	cbnz	r2, ad2 <am_hal_iom_sleeping_queue_flush+0x2a>
        //
        // End the critical section.
        //
        am_hal_interrupt_master_set(ui32Critical);
    }
}
     aca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        am_hal_interrupt_master_set(ui32Critical);
     ace:	f7ff bfe7 	b.w	aa0 <am_hal_interrupt_master_set>
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_NORMAL);
     ad2:	2000      	movs	r0, #0
     ad4:	f001 fb2c 	bl	2130 <am_hal_sysctrl_sleep>
        am_hal_interrupt_master_set(ui32Critical);
     ad8:	4628      	mov	r0, r5
     ada:	f7ff ffe1 	bl	aa0 <am_hal_interrupt_master_set>
     ade:	e7ed      	b.n	abc <am_hal_iom_sleeping_queue_flush+0x14>
     ae0:	4770      	bx	lr
     ae2:	bf00      	nop
     ae4:	100013c8 	.word	0x100013c8
     ae8:	10001004 	.word	0x10001004

00000aec <am_hal_iom_i2c_cmd_run.part.1>:
am_hal_iom_i2c_cmd_run(uint32_t ui32Operation, uint32_t ui32Module,
     aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     af0:	b089      	sub	sp, #36	; 0x24
        if ( g_I2CPads[index].module == ui32Module )
     af2:	2900      	cmp	r1, #0
     af4:	d064      	beq.n	bc0 <am_hal_iom_i2c_cmd_run.part.1+0xd4>
     af6:	2901      	cmp	r1, #1
     af8:	d00d      	beq.n	b16 <am_hal_iom_i2c_cmd_run.part.1+0x2a>
     afa:	2902      	cmp	r1, #2
     afc:	d01a      	beq.n	b34 <am_hal_iom_i2c_cmd_run.part.1+0x48>
     afe:	2903      	cmp	r1, #3
     b00:	d02e      	beq.n	b60 <am_hal_iom_i2c_cmd_run.part.1+0x74>
     b02:	2904      	cmp	r1, #4
     b04:	d03c      	beq.n	b80 <am_hal_iom_i2c_cmd_run.part.1+0x94>
     b06:	2905      	cmp	r1, #5
     b08:	d04a      	beq.n	ba0 <am_hal_iom_i2c_cmd_run.part.1+0xb4>
     b0a:	2902      	cmp	r1, #2
     b0c:	d019      	beq.n	b42 <am_hal_iom_i2c_cmd_run.part.1+0x56>
        return AM_HAL_IOM_ERR_INVALID_CFG;
     b0e:	2004      	movs	r0, #4
}
     b10:	b009      	add	sp, #36	; 0x24
     b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
     b16:	4d6b      	ldr	r5, [pc, #428]	; (cc4 <am_hal_iom_i2c_cmd_run.part.1+0x1d8>)
     b18:	682f      	ldr	r7, [r5, #0]
            if ( ui8FncSelVal == g_I2CPads[index].funcsel )
     b1a:	f3c7 04c2 	ubfx	r4, r7, #3, #3
     b1e:	2c00      	cmp	r4, #0
     b20:	d1f5      	bne.n	b0e <am_hal_iom_i2c_cmd_run.part.1+0x22>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
     b22:	f04f 0b08 	mov.w	fp, #8
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
     b26:	26ff      	movs	r6, #255	; 0xff
     b28:	9403      	str	r4, [sp, #12]
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
     b2a:	465f      	mov	r7, fp
     b2c:	f8cd b014 	str.w	fp, [sp, #20]
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
     b30:	9604      	str	r6, [sp, #16]
     b32:	e053      	b.n	bdc <am_hal_iom_i2c_cmd_run.part.1+0xf0>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
     b34:	4d64      	ldr	r5, [pc, #400]	; (cc8 <am_hal_iom_i2c_cmd_run.part.1+0x1dc>)
     b36:	682f      	ldr	r7, [r5, #0]
            if ( ui8FncSelVal == g_I2CPads[index].funcsel )
     b38:	f3c7 04c2 	ubfx	r4, r7, #3, #3
     b3c:	2c07      	cmp	r4, #7
     b3e:	f000 80b9 	beq.w	cb4 <am_hal_iom_i2c_cmd_run.part.1+0x1c8>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
     b42:	4d62      	ldr	r5, [pc, #392]	; (ccc <am_hal_iom_i2c_cmd_run.part.1+0x1e0>)
     b44:	682e      	ldr	r6, [r5, #0]
            if ( ui8FncSelVal == g_I2CPads[index].funcsel )
     b46:	f3c6 67c2 	ubfx	r7, r6, #27, #3
     b4a:	2f04      	cmp	r7, #4
     b4c:	d1df      	bne.n	b0e <am_hal_iom_i2c_cmd_run.part.1+0x22>
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
     b4e:	2418      	movs	r4, #24
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
     b50:	271b      	movs	r7, #27
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
     b52:	f04f 467f 	mov.w	r6, #4278190080	; 0xff000000
     b56:	9403      	str	r4, [sp, #12]
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
     b58:	46a3      	mov	fp, r4
     b5a:	9705      	str	r7, [sp, #20]
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
     b5c:	9604      	str	r6, [sp, #16]
     b5e:	e03d      	b.n	bdc <am_hal_iom_i2c_cmd_run.part.1+0xf0>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
     b60:	4d5b      	ldr	r5, [pc, #364]	; (cd0 <am_hal_iom_i2c_cmd_run.part.1+0x1e4>)
     b62:	682f      	ldr	r7, [r5, #0]
            if ( ui8FncSelVal == g_I2CPads[index].funcsel )
     b64:	f3c7 46c2 	ubfx	r6, r7, #19, #3
     b68:	2e04      	cmp	r6, #4
     b6a:	d1d0      	bne.n	b0e <am_hal_iom_i2c_cmd_run.part.1+0x22>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
     b6c:	272a      	movs	r7, #42	; 0x2a
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
     b6e:	f44f 047f 	mov.w	r4, #16711680	; 0xff0000
     b72:	2610      	movs	r6, #16
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
     b74:	9705      	str	r7, [sp, #20]
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
     b76:	9404      	str	r4, [sp, #16]
     b78:	9603      	str	r6, [sp, #12]
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
     b7a:	f04f 0b28 	mov.w	fp, #40	; 0x28
     b7e:	e02d      	b.n	bdc <am_hal_iom_i2c_cmd_run.part.1+0xf0>
     b80:	4d54      	ldr	r5, [pc, #336]	; (cd4 <am_hal_iom_i2c_cmd_run.part.1+0x1e8>)
     b82:	682f      	ldr	r7, [r5, #0]
            if ( ui8FncSelVal == g_I2CPads[index].funcsel )
     b84:	f3c7 64c2 	ubfx	r4, r7, #27, #3
     b88:	2c04      	cmp	r4, #4
     b8a:	d1c0      	bne.n	b0e <am_hal_iom_i2c_cmd_run.part.1+0x22>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
     b8c:	2727      	movs	r7, #39	; 0x27
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
     b8e:	f04f 467f 	mov.w	r6, #4278190080	; 0xff000000
     b92:	2418      	movs	r4, #24
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
     b94:	9705      	str	r7, [sp, #20]
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
     b96:	9604      	str	r6, [sp, #16]
     b98:	9403      	str	r4, [sp, #12]
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
     b9a:	f04f 0b24 	mov.w	fp, #36	; 0x24
     b9e:	e01d      	b.n	bdc <am_hal_iom_i2c_cmd_run.part.1+0xf0>
     ba0:	4d4d      	ldr	r5, [pc, #308]	; (cd8 <am_hal_iom_i2c_cmd_run.part.1+0x1ec>)
     ba2:	682c      	ldr	r4, [r5, #0]
            if ( ui8FncSelVal == g_I2CPads[index].funcsel )
     ba4:	f3c4 06c2 	ubfx	r6, r4, #3, #3
     ba8:	2e04      	cmp	r6, #4
     baa:	d1b0      	bne.n	b0e <am_hal_iom_i2c_cmd_run.part.1+0x22>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
     bac:	f04f 0b30 	mov.w	fp, #48	; 0x30
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
     bb0:	24ff      	movs	r4, #255	; 0xff
     bb2:	2600      	movs	r6, #0
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
     bb4:	465f      	mov	r7, fp
     bb6:	f8cd b014 	str.w	fp, [sp, #20]
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
     bba:	9404      	str	r4, [sp, #16]
     bbc:	9603      	str	r6, [sp, #12]
     bbe:	e00d      	b.n	bdc <am_hal_iom_i2c_cmd_run.part.1+0xf0>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
     bc0:	4d46      	ldr	r5, [pc, #280]	; (cdc <am_hal_iom_i2c_cmd_run.part.1+0x1f0>)
     bc2:	682f      	ldr	r7, [r5, #0]
            if ( ui8FncSelVal == g_I2CPads[index].funcsel )
     bc4:	f417 5f60 	tst.w	r7, #14336	; 0x3800
     bc8:	d1a1      	bne.n	b0e <am_hal_iom_i2c_cmd_run.part.1+0x22>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
     bca:	2705      	movs	r7, #5
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
     bcc:	f44f 447f 	mov.w	r4, #65280	; 0xff00
     bd0:	2608      	movs	r6, #8
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
     bd2:	9705      	str	r7, [sp, #20]
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
     bd4:	9404      	str	r4, [sp, #16]
     bd6:	9603      	str	r6, [sp, #12]
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
     bd8:	f04f 0b04 	mov.w	fp, #4
     bdc:	4698      	mov	r8, r3
    ui32SCLPadregVal = *pui32SCLPadreg;
     bde:	682b      	ldr	r3, [r5, #0]
     be0:	9302      	str	r3, [sp, #8]
     be2:	460c      	mov	r4, r1
     be4:	e88d 0005 	stmia.w	sp, {r0, r2}
    am_hal_gpio_pin_config(ui32IOMGPIO, AM_HAL_PIN_INPUT);
     be8:	f7ff ff56 	bl	a98 <am_hal_interrupt_master_disable>
     bec:	f8df 9100 	ldr.w	r9, [pc, #256]	; cf0 <am_hal_iom_i2c_cmd_run.part.1+0x204>
     bf0:	4e3b      	ldr	r6, [pc, #236]	; (ce0 <am_hal_iom_i2c_cmd_run.part.1+0x1f4>)
     bf2:	9007      	str	r0, [sp, #28]
     bf4:	0879      	lsrs	r1, r7, #1
     bf6:	f001 0c7c 	and.w	ip, r1, #124	; 0x7c
     bfa:	f04f 0a73 	mov.w	sl, #115	; 0x73
     bfe:	f8c9 a000 	str.w	sl, [r9]
     c02:	00b8      	lsls	r0, r7, #2
     c04:	f85c 2006 	ldr.w	r2, [ip, r6]
     c08:	f8df e0e8 	ldr.w	lr, [pc, #232]	; cf4 <am_hal_iom_i2c_cmd_run.part.1+0x208>
     c0c:	f000 031c 	and.w	r3, r0, #28
     c10:	2107      	movs	r1, #7
     c12:	4099      	lsls	r1, r3
     c14:	ea22 0001 	bic.w	r0, r2, r1
     c18:	f84c 0006 	str.w	r0, [ip, r6]
     c1c:	9a04      	ldr	r2, [sp, #16]
     c1e:	682e      	ldr	r6, [r5, #0]
     c20:	9803      	ldr	r0, [sp, #12]
     c22:	43d1      	mvns	r1, r2
     c24:	231a      	movs	r3, #26
     c26:	400e      	ands	r6, r1
     c28:	4083      	lsls	r3, r0
     c2a:	4333      	orrs	r3, r6
     c2c:	602b      	str	r3, [r5, #0]
     c2e:	f85b 200e 	ldr.w	r2, [fp, lr]
     c32:	2600      	movs	r6, #0
     c34:	4011      	ands	r1, r2
     c36:	f84b 100e 	str.w	r1, [fp, lr]
     c3a:	f8c9 6000 	str.w	r6, [r9]
     c3e:	9807      	ldr	r0, [sp, #28]
     c40:	f7ff ff2e 	bl	aa0 <am_hal_interrupt_master_set>
                 AM_HAL_GPIO_RD_REG(ui32IOMGPIO), AM_HAL_GPIO_RD_M(ui32IOMGPIO),
     c44:	9905      	ldr	r1, [sp, #20]
    waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
     c46:	4827      	ldr	r0, [pc, #156]	; (ce4 <am_hal_iom_i2c_cmd_run.part.1+0x1f8>)
                 AM_HAL_GPIO_RD_REG(ui32IOMGPIO), AM_HAL_GPIO_RD_M(ui32IOMGPIO),
     c48:	f001 0c1f 	and.w	ip, r1, #31
    waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
     c4c:	f04f 0b01 	mov.w	fp, #1
                 AM_HAL_GPIO_RD_REG(ui32IOMGPIO), AM_HAL_GPIO_RD_M(ui32IOMGPIO),
     c50:	08ff      	lsrs	r7, r7, #3
    waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
     c52:	4925      	ldr	r1, [pc, #148]	; (ce8 <am_hal_iom_i2c_cmd_run.part.1+0x1fc>)
     c54:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
     c58:	fa0b f30c 	lsl.w	r3, fp, ip
                 AM_HAL_GPIO_RD_REG(ui32IOMGPIO), AM_HAL_GPIO_RD_M(ui32IOMGPIO),
     c5c:	f007 0204 	and.w	r2, r7, #4
    waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
     c60:	4411      	add	r1, r2
     c62:	461a      	mov	r2, r3
     c64:	f7ff fe38 	bl	8d8 <am_hal_flash_delay_status_change>
    *pui32SCLPadreg = ui32SCLPadregVal;
     c68:	9b02      	ldr	r3, [sp, #8]
    AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
     c6a:	f8c9 a000 	str.w	sl, [r9]
    if (waitStatus != 1)
     c6e:	4558      	cmp	r0, fp
    *pui32SCLPadreg = ui32SCLPadregVal;
     c70:	602b      	str	r3, [r5, #0]
    AM_REGn(GPIO, 0, PADKEY) = 0;
     c72:	f8c9 6000 	str.w	r6, [r9]
    if (waitStatus != 1)
     c76:	d003      	beq.n	c80 <am_hal_iom_i2c_cmd_run.part.1+0x194>
        return AM_HAL_IOM_ERR_TIMEOUT;
     c78:	4658      	mov	r0, fp
}
     c7a:	b009      	add	sp, #36	; 0x24
     c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ui32Command |= (ui32Options & 0x5C00FF00);
     c80:	9d12      	ldr	r5, [sp, #72]	; 0x48
    ui32Command |= ((ui32BusAddress << 16) & 0x03FF0000);
     c82:	4f1a      	ldr	r7, [pc, #104]	; (cec <am_hal_iom_i2c_cmd_run.part.1+0x200>)
    ui32Command |= (ui32Options & 0x5C00FF00);
     c84:	9a00      	ldr	r2, [sp, #0]
    ui32Command |= ((ui32BusAddress << 16) & 0x03FF0000);
     c86:	9b01      	ldr	r3, [sp, #4]
    ui32Command |= (ui32Options & 0x5C00FF00);
     c88:	f025 4123 	bic.w	r1, r5, #2734686208	; 0xa3000000
     c8c:	f001 20ff 	and.w	r0, r1, #4278255360	; 0xff00ff00
        AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
     c90:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
    ui32Command |= (ui32Options & 0x5C00FF00);
     c94:	4310      	orrs	r0, r2
    ui32Command |= ((ui32BusAddress << 16) & 0x03FF0000);
     c96:	ea07 4503 	and.w	r5, r7, r3, lsl #16
        AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
     c9a:	3404      	adds	r4, #4
     c9c:	0321      	lsls	r1, r4, #12
    ui32Command |= (ui32Options & 0x5C00FF00);
     c9e:	4305      	orrs	r5, r0
    ui32Command |= (ui32NumBytes & 0xFF);
     ca0:	fa5f f788 	uxtb.w	r7, r8
    ui32Command |= (ui32Options & 0x5C00FF00);
     ca4:	ea45 0407 	orr.w	r4, r5, r7
        AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
     ca8:	4630      	mov	r0, r6
     caa:	f8c1 4110 	str.w	r4, [r1, #272]	; 0x110
}
     cae:	b009      	add	sp, #36	; 0x24
     cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
     cb4:	2400      	movs	r4, #0
     cb6:	26ff      	movs	r6, #255	; 0xff
     cb8:	9403      	str	r4, [sp, #12]
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
     cba:	46a3      	mov	fp, r4
     cbc:	4627      	mov	r7, r4
     cbe:	9405      	str	r4, [sp, #20]
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
     cc0:	9604      	str	r6, [sp, #16]
     cc2:	e78b      	b.n	bdc <am_hal_iom_i2c_cmd_run.part.1+0xf0>
     cc4:	40010008 	.word	0x40010008
     cc8:	40010000 	.word	0x40010000
     ccc:	40010018 	.word	0x40010018
     cd0:	40010028 	.word	0x40010028
     cd4:	40010024 	.word	0x40010024
     cd8:	40010030 	.word	0x40010030
     cdc:	40010004 	.word	0x40010004
     ce0:	40010040 	.word	0x40010040
     ce4:	10001338 	.word	0x10001338
     ce8:	40010080 	.word	0x40010080
     cec:	03ff0000 	.word	0x03ff0000
     cf0:	40010060 	.word	0x40010060
     cf4:	400100e0 	.word	0x400100e0

00000cf8 <am_hal_iom_i2c_read_nb.part.9>:
am_hal_iom_i2c_read_nb(uint32_t ui32Module, uint32_t ui32BusAddress,
     cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
     cfa:	2806      	cmp	r0, #6
am_hal_iom_i2c_read_nb(uint32_t ui32Module, uint32_t ui32BusAddress,
     cfc:	b085      	sub	sp, #20
     cfe:	461d      	mov	r5, r3
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
     d00:	d027      	beq.n	d52 <am_hal_iom_i2c_read_nb.part.9+0x5a>
    if (ui32NumBytes >= 256)
     d02:	2bff      	cmp	r3, #255	; 0xff
     d04:	4604      	mov	r4, r0
     d06:	d904      	bls.n	d12 <am_hal_iom_i2c_read_nb.part.9+0x1a>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
     d08:	492b      	ldr	r1, [pc, #172]	; (db8 <am_hal_iom_i2c_read_nb.part.9+0xc0>)
     d0a:	2003      	movs	r0, #3
     d0c:	5508      	strb	r0, [r1, r4]
}
     d0e:	b005      	add	sp, #20
     d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
     d12:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
    g_bIomBusy[ui32Module] = true;
     d16:	4e29      	ldr	r6, [pc, #164]	; (dbc <am_hal_iom_i2c_read_nb.part.9+0xc4>)
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
     d18:	4f29      	ldr	r7, [pc, #164]	; (dc0 <am_hal_iom_i2c_read_nb.part.9+0xc8>)
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
     d1a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
     d1c:	3004      	adds	r0, #4
     d1e:	4696      	mov	lr, r2
     d20:	0300      	lsls	r0, r0, #12
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
     d22:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    g_bIomBusy[ui32Module] = true;
     d26:	f04f 0c01 	mov.w	ip, #1
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
     d2a:	0092      	lsls	r2, r2, #2
    g_bIomBusy[ui32Module] = true;
     d2c:	f806 c004 	strb.w	ip, [r6, r4]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
     d30:	f240 76ff 	movw	r6, #2047	; 0x7ff
     d34:	f8c0 6208 	str.w	r6, [r0, #520]	; 0x208
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
     d38:	18be      	adds	r6, r7, r2
     d3a:	2002      	movs	r0, #2
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
     d3c:	2c05      	cmp	r4, #5
    g_psIOMBuffers[ui32Module].pui32Data = pui32Data;
     d3e:	f8c6 e004 	str.w	lr, [r6, #4]
    g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes;
     d42:	60b3      	str	r3, [r6, #8]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
     d44:	6135      	str	r5, [r6, #16]
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
     d46:	50b8      	str	r0, [r7, r2]
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
     d48:	d92b      	bls.n	da2 <am_hal_iom_i2c_read_nb.part.9+0xaa>
        g_iom_error_status[ui32Module] = ui32Status;
     d4a:	4b1b      	ldr	r3, [pc, #108]	; (db8 <am_hal_iom_i2c_read_nb.part.9+0xc0>)
     d4c:	5518      	strb	r0, [r3, r4]
}
     d4e:	b005      	add	sp, #20
     d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( ui32Options & AM_HAL_IOM_RAW )
     d52:	9f0a      	ldr	r7, [sp, #40]	; 0x28
            i2cBBStatus = am_hal_i2c_bit_bang_receive((ui32BusAddress << 1) | 1, ui32NumBytes,
     d54:	004c      	lsls	r4, r1, #1
        if ( ui32Options & AM_HAL_IOM_RAW )
     d56:	007b      	lsls	r3, r7, #1
            i2cBBStatus = am_hal_i2c_bit_bang_receive((ui32BusAddress << 1) | 1, ui32NumBytes,
     d58:	f044 0e01 	orr.w	lr, r4, #1
     d5c:	f3c7 7400 	ubfx	r4, r7, #28, #1
        if ( ui32Options & AM_HAL_IOM_RAW )
     d60:	d416      	bmi.n	d90 <am_hal_iom_i2c_read_nb.part.9+0x98>
            i2cBBStatus = am_hal_i2c_bit_bang_receive((ui32BusAddress << 1) | 1, ui32NumBytes,
     d62:	9e0a      	ldr	r6, [sp, #40]	; 0x28
     d64:	2301      	movs	r3, #1
     d66:	e88d 0018 	stmia.w	sp, {r3, r4}
     d6a:	fa5f f08e 	uxtb.w	r0, lr
     d6e:	4629      	mov	r1, r5
     d70:	f3c6 2307 	ubfx	r3, r6, #8, #8
     d74:	f001 fb06 	bl	2384 <am_hal_i2c_bit_bang_receive>
        g_iom_error_status[ui32Module] = ui32Status = i2c_bb_errmap[i2cBBStatus];
     d78:	4d12      	ldr	r5, [pc, #72]	; (dc4 <am_hal_iom_i2c_read_nb.part.9+0xcc>)
     d7a:	4a0f      	ldr	r2, [pc, #60]	; (db8 <am_hal_iom_i2c_read_nb.part.9+0xc0>)
        if ( pfnCallback )
     d7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        g_iom_error_status[ui32Module] = ui32Status = i2c_bb_errmap[i2cBBStatus];
     d7e:	5c28      	ldrb	r0, [r5, r0]
     d80:	7190      	strb	r0, [r2, #6]
        if ( pfnCallback )
     d82:	2b00      	cmp	r3, #0
     d84:	d0c3      	beq.n	d0e <am_hal_iom_i2c_read_nb.part.9+0x16>
     d86:	9003      	str	r0, [sp, #12]
            pfnCallback();
     d88:	4798      	blx	r3
     d8a:	9803      	ldr	r0, [sp, #12]
}
     d8c:	b005      	add	sp, #20
     d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i2cBBStatus = am_hal_i2c_bit_bang_receive((ui32BusAddress << 1) | 1, ui32NumBytes,
     d90:	2300      	movs	r3, #0
     d92:	fa5f f08e 	uxtb.w	r0, lr
     d96:	4629      	mov	r1, r5
     d98:	e88d 0018 	stmia.w	sp, {r3, r4}
     d9c:	f001 faf2 	bl	2384 <am_hal_i2c_bit_bang_receive>
     da0:	e7ea      	b.n	d78 <am_hal_iom_i2c_read_nb.part.9+0x80>
     da2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     da4:	9200      	str	r2, [sp, #0]
     da6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
     daa:	460a      	mov	r2, r1
     dac:	4621      	mov	r1, r4
     dae:	f7ff fe9d 	bl	aec <am_hal_iom_i2c_cmd_run.part.1>
    if (ui32Status != AM_HAL_IOM_SUCCESS)
     db2:	2800      	cmp	r0, #0
     db4:	d0ab      	beq.n	d0e <am_hal_iom_i2c_read_nb.part.9+0x16>
     db6:	e7c8      	b.n	d4a <am_hal_iom_i2c_read_nb.part.9+0x52>
     db8:	1000100c 	.word	0x1000100c
     dbc:	10001004 	.word	0x10001004
     dc0:	10001350 	.word	0x10001350
     dc4:	0000507c 	.word	0x0000507c

00000dc8 <am_hal_iom_i2c_write_nb.part.8>:
am_hal_iom_i2c_write_nb(uint32_t ui32Module, uint32_t ui32BusAddress,
     dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
     dcc:	2806      	cmp	r0, #6
am_hal_iom_i2c_write_nb(uint32_t ui32Module, uint32_t ui32BusAddress,
     dce:	b084      	sub	sp, #16
     dd0:	460f      	mov	r7, r1
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
     dd2:	d022      	beq.n	e1a <am_hal_iom_i2c_write_nb.part.8+0x52>
    if (ui32NumBytes >= 256)
     dd4:	2bff      	cmp	r3, #255	; 0xff
     dd6:	4605      	mov	r5, r0
     dd8:	d905      	bls.n	de6 <am_hal_iom_i2c_write_nb.part.8+0x1e>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
     dda:	4a6b      	ldr	r2, [pc, #428]	; (f88 <am_hal_iom_i2c_write_nb.part.8+0x1c0>)
     ddc:	2003      	movs	r0, #3
     dde:	5550      	strb	r0, [r2, r5]
}
     de0:	b004      	add	sp, #16
     de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
     de6:	f500 26a0 	add.w	r6, r0, #327680	; 0x50000
     dea:	3604      	adds	r6, #4
     dec:	0336      	lsls	r6, r6, #12
     dee:	4690      	mov	r8, r2
     df0:	f8d6 211c 	ldr.w	r2, [r6, #284]	; 0x11c
    g_bIomBusy[ui32Module] = true;
     df4:	4965      	ldr	r1, [pc, #404]	; (f8c <am_hal_iom_i2c_write_nb.part.8+0x1c4>)
                       AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
     df6:	f012 0f08 	tst.w	r2, #8
    g_bIomBusy[ui32Module] = true;
     dfa:	f04f 0001 	mov.w	r0, #1
     dfe:	5548      	strb	r0, [r1, r5]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
     e00:	f240 74ff 	movw	r4, #2047	; 0x7ff
                       AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
     e04:	bf14      	ite	ne
     e06:	2040      	movne	r0, #64	; 0x40
     e08:	2080      	moveq	r0, #128	; 0x80
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
     e0a:	2d05      	cmp	r5, #5
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
     e0c:	f8c6 4208 	str.w	r4, [r6, #520]	; 0x208
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
     e10:	d92c      	bls.n	e6c <am_hal_iom_i2c_write_nb.part.8+0xa4>
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
     e12:	2000      	movs	r0, #0
}
     e14:	b004      	add	sp, #16
     e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ( ui32Options & AM_HAL_IOM_RAW )
     e1a:	990a      	ldr	r1, [sp, #40]	; 0x28
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
     e1c:	f3c1 7500 	ubfx	r5, r1, #28, #1
        if ( ui32Options & AM_HAL_IOM_RAW )
     e20:	0049      	lsls	r1, r1, #1
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
     e22:	ea4f 0047 	mov.w	r0, r7, lsl #1
        if ( ui32Options & AM_HAL_IOM_RAW )
     e26:	d417      	bmi.n	e58 <am_hal_iom_i2c_write_nb.part.8+0x90>
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
     e28:	2401      	movs	r4, #1
     e2a:	e88d 0030 	stmia.w	sp, {r4, r5}
     e2e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
     e30:	4619      	mov	r1, r3
     e32:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
     e36:	f3c5 2307 	ubfx	r3, r5, #8, #8
     e3a:	f001 fef5 	bl	2c28 <am_hal_i2c_bit_bang_send>
        g_iom_error_status[ui32Module] = ui32Status = i2c_bb_errmap[i2cBBStatus];
     e3e:	4e54      	ldr	r6, [pc, #336]	; (f90 <am_hal_iom_i2c_write_nb.part.8+0x1c8>)
     e40:	4f51      	ldr	r7, [pc, #324]	; (f88 <am_hal_iom_i2c_write_nb.part.8+0x1c0>)
        if ( pfnCallback )
     e42:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
        g_iom_error_status[ui32Module] = ui32Status = i2c_bb_errmap[i2cBBStatus];
     e44:	5c30      	ldrb	r0, [r6, r0]
     e46:	71b8      	strb	r0, [r7, #6]
        if ( pfnCallback )
     e48:	2c00      	cmp	r4, #0
     e4a:	d0c9      	beq.n	de0 <am_hal_iom_i2c_write_nb.part.8+0x18>
     e4c:	9003      	str	r0, [sp, #12]
            pfnCallback();
     e4e:	47a0      	blx	r4
     e50:	9803      	ldr	r0, [sp, #12]
}
     e52:	b004      	add	sp, #16
     e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
     e58:	2400      	movs	r4, #0
     e5a:	4619      	mov	r1, r3
     e5c:	e88d 0030 	stmia.w	sp, {r4, r5}
     e60:	4623      	mov	r3, r4
     e62:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
     e66:	f001 fedf 	bl	2c28 <am_hal_i2c_bit_bang_send>
     e6a:	e7e8      	b.n	e3e <am_hal_iom_i2c_write_nb.part.8+0x76>
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
     e6c:	f8d6 211c 	ldr.w	r2, [r6, #284]	; 0x11c
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
     e70:	f8d6 1100 	ldr.w	r1, [r6, #256]	; 0x100
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
     e74:	f012 0f08 	tst.w	r2, #8
     e78:	bf14      	ite	ne
     e7a:	2240      	movne	r2, #64	; 0x40
     e7c:	2280      	moveq	r2, #128	; 0x80
    ui32TransferSize = (ui32NumBytes <= ui32MaxFifoSize ? ui32NumBytes :
     e7e:	4298      	cmp	r0, r3
     e80:	bf28      	it	cs
     e82:	4618      	movcs	r0, r3
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
     e84:	1a52      	subs	r2, r2, r1
    ui32TransferSize = (ui32NumBytes <= ui32MaxFifoSize ? ui32NumBytes :
     e86:	4604      	mov	r4, r0
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
     e88:	f002 00fc 	and.w	r0, r2, #252	; 0xfc
     e8c:	4284      	cmp	r4, r0
     e8e:	d871      	bhi.n	f74 <am_hal_iom_i2c_write_nb.part.8+0x1ac>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
     e90:	2c00      	cmp	r4, #0
     e92:	d0be      	beq.n	e12 <am_hal_iom_i2c_write_nb.part.8+0x4a>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
     e94:	4642      	mov	r2, r8
     e96:	ea6f 0c08 	mvn.w	ip, r8
     e9a:	f852 1b04 	ldr.w	r1, [r2], #4
     e9e:	6031      	str	r1, [r6, #0]
     ea0:	44c4      	add	ip, r8
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
     ea2:	eba2 0e08 	sub.w	lr, r2, r8
     ea6:	44a4      	add	ip, r4
     ea8:	4574      	cmp	r4, lr
     eaa:	f3cc 0082 	ubfx	r0, ip, #2, #3
     eae:	d943      	bls.n	f38 <am_hal_iom_i2c_write_nb.part.8+0x170>
     eb0:	b320      	cbz	r0, efc <am_hal_iom_i2c_write_nb.part.8+0x134>
     eb2:	2801      	cmp	r0, #1
     eb4:	d01b      	beq.n	eee <am_hal_iom_i2c_write_nb.part.8+0x126>
     eb6:	2802      	cmp	r0, #2
     eb8:	d016      	beq.n	ee8 <am_hal_iom_i2c_write_nb.part.8+0x120>
     eba:	2803      	cmp	r0, #3
     ebc:	d011      	beq.n	ee2 <am_hal_iom_i2c_write_nb.part.8+0x11a>
     ebe:	2804      	cmp	r0, #4
     ec0:	d00c      	beq.n	edc <am_hal_iom_i2c_write_nb.part.8+0x114>
     ec2:	2805      	cmp	r0, #5
     ec4:	d007      	beq.n	ed6 <am_hal_iom_i2c_write_nb.part.8+0x10e>
     ec6:	2806      	cmp	r0, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
     ec8:	bf1c      	itt	ne
     eca:	f852 0b04 	ldrne.w	r0, [r2], #4
     ece:	6030      	strne	r0, [r6, #0]
     ed0:	f852 1b04 	ldr.w	r1, [r2], #4
     ed4:	6031      	str	r1, [r6, #0]
     ed6:	f852 0b04 	ldr.w	r0, [r2], #4
     eda:	6030      	str	r0, [r6, #0]
     edc:	f852 1b04 	ldr.w	r1, [r2], #4
     ee0:	6031      	str	r1, [r6, #0]
     ee2:	f852 0b04 	ldr.w	r0, [r2], #4
     ee6:	6030      	str	r0, [r6, #0]
     ee8:	f852 1b04 	ldr.w	r1, [r2], #4
     eec:	6031      	str	r1, [r6, #0]
     eee:	f852 0b04 	ldr.w	r0, [r2], #4
     ef2:	6030      	str	r0, [r6, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
     ef4:	eba2 0c08 	sub.w	ip, r2, r8
     ef8:	4564      	cmp	r4, ip
     efa:	d91d      	bls.n	f38 <am_hal_iom_i2c_write_nb.part.8+0x170>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
     efc:	4696      	mov	lr, r2
     efe:	3220      	adds	r2, #32
     f00:	f85e 1b04 	ldr.w	r1, [lr], #4
     f04:	6031      	str	r1, [r6, #0]
     f06:	f852 0c1c 	ldr.w	r0, [r2, #-28]
     f0a:	6030      	str	r0, [r6, #0]
     f0c:	f8de 1004 	ldr.w	r1, [lr, #4]
     f10:	6031      	str	r1, [r6, #0]
     f12:	f852 0c14 	ldr.w	r0, [r2, #-20]
     f16:	6030      	str	r0, [r6, #0]
     f18:	f852 1c10 	ldr.w	r1, [r2, #-16]
     f1c:	6031      	str	r1, [r6, #0]
     f1e:	f852 0c0c 	ldr.w	r0, [r2, #-12]
     f22:	6030      	str	r0, [r6, #0]
     f24:	f852 1c08 	ldr.w	r1, [r2, #-8]
     f28:	6031      	str	r1, [r6, #0]
     f2a:	f852 0c04 	ldr.w	r0, [r2, #-4]
     f2e:	6030      	str	r0, [r6, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
     f30:	eba2 0c08 	sub.w	ip, r2, r8
     f34:	4564      	cmp	r4, ip
     f36:	d8e1      	bhi.n	efc <am_hal_iom_i2c_write_nb.part.8+0x134>
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
     f38:	eb05 0685 	add.w	r6, r5, r5, lsl #2
     f3c:	4815      	ldr	r0, [pc, #84]	; (f94 <am_hal_iom_i2c_write_nb.part.8+0x1cc>)
     f3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     f40:	9200      	str	r2, [sp, #0]
     f42:	00b1      	lsls	r1, r6, #2
     f44:	463a      	mov	r2, r7
     f46:	2701      	movs	r7, #1
     f48:	1846      	adds	r6, r0, r1
     f4a:	5047      	str	r7, [r0, r1]
        g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
     f4c:	f024 0703 	bic.w	r7, r4, #3
        g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
     f50:	eba3 0e04 	sub.w	lr, r3, r4
        g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
     f54:	4447      	add	r7, r8
        g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
     f56:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
     f58:	6134      	str	r4, [r6, #16]
     f5a:	4629      	mov	r1, r5
     f5c:	2000      	movs	r0, #0
        g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
     f5e:	f8c6 e008 	str.w	lr, [r6, #8]
        g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
     f62:	6077      	str	r7, [r6, #4]
     f64:	f7ff fdc2 	bl	aec <am_hal_iom_i2c_cmd_run.part.1>
        if (ui32Status != AM_HAL_IOM_SUCCESS)
     f68:	2800      	cmp	r0, #0
     f6a:	f43f af39 	beq.w	de0 <am_hal_iom_i2c_write_nb.part.8+0x18>
            g_iom_error_status[ui32Module] = ui32Status;
     f6e:	4b06      	ldr	r3, [pc, #24]	; (f88 <am_hal_iom_i2c_write_nb.part.8+0x1c0>)
     f70:	5558      	strb	r0, [r3, r5]
     f72:	e735      	b.n	de0 <am_hal_iom_i2c_write_nb.part.8+0x18>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
     f74:	4a08      	ldr	r2, [pc, #32]	; (f98 <am_hal_iom_i2c_write_nb.part.8+0x1d0>)
     f76:	4809      	ldr	r0, [pc, #36]	; (f9c <am_hal_iom_i2c_write_nb.part.8+0x1d4>)
     f78:	9303      	str	r3, [sp, #12]
     f7a:	f640 7145 	movw	r1, #3909	; 0xf45
     f7e:	f7ff fca5 	bl	8cc <am_hal_debug_error>
     f82:	9b03      	ldr	r3, [sp, #12]
     f84:	e786      	b.n	e94 <am_hal_iom_i2c_write_nb.part.8+0xcc>
     f86:	bf00      	nop
     f88:	1000100c 	.word	0x1000100c
     f8c:	10001004 	.word	0x10001004
     f90:	0000507c 	.word	0x0000507c
     f94:	10001350 	.word	0x10001350
     f98:	00004fc8 	.word	0x00004fc8
     f9c:	00004ffc 	.word	0x00004ffc

00000fa0 <am_hal_iom_pwrctrl_enable>:
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
     fa0:	2805      	cmp	r0, #5
{
     fa2:	b510      	push	{r4, lr}
     fa4:	4604      	mov	r4, r0
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
     fa6:	d905      	bls.n	fb4 <am_hal_iom_pwrctrl_enable+0x14>
     fa8:	4a05      	ldr	r2, [pc, #20]	; (fc0 <am_hal_iom_pwrctrl_enable+0x20>)
     faa:	4806      	ldr	r0, [pc, #24]	; (fc4 <am_hal_iom_pwrctrl_enable+0x24>)
     fac:	f240 21d5 	movw	r1, #725	; 0x2d5
     fb0:	f7ff fc8c 	bl	8cc <am_hal_debug_error>
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_IOM0 << ui32Module);
     fb4:	2002      	movs	r0, #2
     fb6:	40a0      	lsls	r0, r4
}
     fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_IOM0 << ui32Module);
     fbc:	f000 be4c 	b.w	1c58 <am_hal_pwrctrl_periph_enable>
     fc0:	00005048 	.word	0x00005048
     fc4:	00004ffc 	.word	0x00004ffc

00000fc8 <am_hal_iom_enable>:
    if ( ui32Module < AM_REG_IOMSTR_NUM_MODULES )
     fc8:	2805      	cmp	r0, #5
     fca:	d80f      	bhi.n	fec <am_hal_iom_enable+0x24>
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
     fcc:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
     fd0:	3304      	adds	r3, #4
     fd2:	031b      	lsls	r3, r3, #12
        g_bIomBusy[ui32Module] = false;
     fd4:	4906      	ldr	r1, [pc, #24]	; (ff0 <am_hal_iom_enable+0x28>)
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
     fd6:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
{
     fda:	b410      	push	{r4}
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
     fdc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
        g_bIomBusy[ui32Module] = false;
     fe0:	2400      	movs	r4, #0
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
     fe2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        g_bIomBusy[ui32Module] = false;
     fe6:	540c      	strb	r4, [r1, r0]
}
     fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
     fec:	4770      	bx	lr
     fee:	bf00      	nop
     ff0:	10001004 	.word	0x10001004

00000ff4 <am_hal_iom_config>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
     ff4:	2805      	cmp	r0, #5
     ff6:	f200 80e0 	bhi.w	11ba <am_hal_iom_config+0x1c6>
{
     ffa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ( psConfig->bSPHA )
     ffe:	7a0d      	ldrb	r5, [r1, #8]
    ui32Config = psConfig->ui32InterfaceMode;
    1000:	680b      	ldr	r3, [r1, #0]
    if ( psConfig->bSPHA )
    1002:	b10d      	cbz	r5, 1008 <am_hal_iom_config+0x14>
        ui32Config |= AM_REG_IOMSTR_CFG_SPHA(1);
    1004:	f043 0304 	orr.w	r3, r3, #4
    if ( psConfig->bSPOL )
    1008:	7a4a      	ldrb	r2, [r1, #9]
    100a:	b10a      	cbz	r2, 1010 <am_hal_iom_config+0x1c>
        ui32Config |= AM_REG_IOMSTR_CFG_SPOL(1);
    100c:	f043 0302 	orr.w	r3, r3, #2
    if ( psConfig->ui32ClockFrequency >= 16000000UL)
    1010:	684c      	ldr	r4, [r1, #4]
    1012:	4e83      	ldr	r6, [pc, #524]	; (1220 <am_hal_iom_config+0x22c>)
    AM_REGn(IOMSTR, ui32Module, CFG) = ui32Config;
    1014:	f500 27a0 	add.w	r7, r0, #327680	; 0x50000
    1018:	3704      	adds	r7, #4
    if ( psConfig->ui32ClockFrequency >= 16000000UL)
    101a:	42b4      	cmp	r4, r6
    AM_REGn(IOMSTR, ui32Module, CFG) = ui32Config;
    101c:	ea4f 3407 	mov.w	r4, r7, lsl #12
        ui32Config |= AM_REG_IOMSTR_CFG_STARTRD(2);
    1020:	bf88      	it	hi
    1022:	f043 0320 	orrhi.w	r3, r3, #32
    AM_REGn(IOMSTR, ui32Module, CFG) = ui32Config;
    1026:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(check_iom_threshold(psConfig->ui8WriteThreshold)) |
    102a:	7a8a      	ldrb	r2, [r1, #10]
         AM_REG_IOMSTR_FIFOTHR_FIFORTHR(check_iom_threshold(psConfig->ui8ReadThreshold)));
    102c:	7acb      	ldrb	r3, [r1, #11]
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(check_iom_threshold(psConfig->ui8WriteThreshold)) |
    102e:	2a7c      	cmp	r2, #124	; 0x7c
    1030:	bf28      	it	cs
    1032:	227c      	movcs	r2, #124	; 0x7c
    1034:	2a04      	cmp	r2, #4
    1036:	bf38      	it	cc
    1038:	2204      	movcc	r2, #4
    103a:	0216      	lsls	r6, r2, #8
         AM_REG_IOMSTR_FIFOTHR_FIFORTHR(check_iom_threshold(psConfig->ui8ReadThreshold)));
    103c:	2b7c      	cmp	r3, #124	; 0x7c
    103e:	bf28      	it	cs
    1040:	237c      	movcs	r3, #124	; 0x7c
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(check_iom_threshold(psConfig->ui8WriteThreshold)) |
    1042:	f406 47fe 	and.w	r7, r6, #32512	; 0x7f00
    1046:	2b04      	cmp	r3, #4
    1048:	bf2c      	ite	cs
    104a:	ea47 0203 	orrcs.w	r2, r7, r3
    104e:	f047 0204 	orrcc.w	r2, r7, #4
    if ((0 != ui32Module) && (4 != ui32Module) && (6 != ui32Module) &&
    1052:	f030 0304 	bics.w	r3, r0, #4
    AM_REGn(IOMSTR, ui32Module, FIFOTHR) =
    1056:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    if ((0 != ui32Module) && (4 != ui32Module) && (6 != ui32Module) &&
    105a:	d005      	beq.n	1068 <am_hal_iom_config+0x74>
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) ==
    105c:	4b71      	ldr	r3, [pc, #452]	; (1224 <am_hal_iom_config+0x230>)
    105e:	681e      	ldr	r6, [r3, #0]
    1060:	b2f7      	uxtb	r7, r6
    1062:	2f22      	cmp	r7, #34	; 0x22
    1064:	f000 80ae 	beq.w	11c4 <am_hal_iom_config+0x1d0>
      ui32ClkCfg = iom_get_interface_clock_cfg(psConfig->ui32ClockFrequency,
    1068:	f8d1 e004 	ldr.w	lr, [r1, #4]
    if ( ui32FreqHz == 0 )
    106c:	f1be 0f00 	cmp.w	lr, #0
    1070:	f000 8093 	beq.w	119a <am_hal_iom_config+0x1a6>
    i32Div = (ui32HFRCfreqHz / ui32FreqHz) + ((ui32HFRCfreqHz % ui32FreqHz) ? 1 : 0);    // Round up (ceiling)
    1074:	4b6c      	ldr	r3, [pc, #432]	; (1228 <am_hal_iom_config+0x234>)
    1076:	fbb3 f7fe 	udiv	r7, r3, lr
    107a:	fb0e 3617 	mls	r6, lr, r7, r3
    107e:	2e00      	cmp	r6, #0
    1080:	bf18      	it	ne
    1082:	3701      	addne	r7, #1
    i32N = 31 - AM_INSTR_CLZ((i32Div & (-i32Div)));
    1084:	427a      	negs	r2, r7
    1086:	403a      	ands	r2, r7
    1088:	fab2 f882 	clz	r8, r2
    108c:	f1c8 031f 	rsb	r3, r8, #31
    1090:	2b06      	cmp	r3, #6
    1092:	bfa8      	it	ge
    1094:	2306      	movge	r3, #6
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
    1096:	f5be 6f37 	cmp.w	lr, #2928	; 0xb70
    109a:	f240 808f 	bls.w	11bc <am_hal_iom_config+0x1c8>
    109e:	f5ae 0974 	sub.w	r9, lr, #15990784	; 0xf40000
    10a2:	4e62      	ldr	r6, [pc, #392]	; (122c <am_hal_iom_config+0x238>)
    10a4:	f5a9 5210 	sub.w	r2, r9, #9216	; 0x2400
    10a8:	42b2      	cmp	r2, r6
    10aa:	bf8b      	itete	hi
    10ac:	f04f 0c00 	movhi.w	ip, #0
    10b0:	f44f 6c00 	movls.w	ip, #2048	; 0x800
    10b4:	2201      	movhi	r2, #1
    10b6:	2203      	movls	r2, #3
    ui32Denom = ( 1 << i32N ) * ( 1 + (ui32Div3 * 2) );
    10b8:	fa02 fa03 	lsl.w	sl, r2, r3
    ui32TotPer = i32Div / ui32Denom;
    10bc:	fbb7 f6fa 	udiv	r6, r7, sl
    ui32TotPer += (i32Div % ui32Denom) ? 1 : 0;
    10c0:	fb0a 7b16 	mls	fp, sl, r6, r7
    10c4:	f1bb 0f00 	cmp.w	fp, #0
    10c8:	bf18      	it	ne
    10ca:	3601      	addne	r6, #1
    ui32v1 = 31 - AM_INSTR_CLZ(ui32TotPer);     // v1 = log2(TotPer)
    10cc:	fab6 f886 	clz	r8, r6
    10d0:	f1c8 091f 	rsb	r9, r8, #31
    ui32Fsel = (ui32v1 > 7) ? ui32v1 + i32N - 7 : i32N;
    10d4:	f1b9 0f07 	cmp.w	r9, #7
    10d8:	f240 808f 	bls.w	11fa <am_hal_iom_config+0x206>
    10dc:	3b07      	subs	r3, #7
    10de:	444b      	add	r3, r9
    ui32Fsel++;
    10e0:	f103 0b01 	add.w	fp, r3, #1
    if ( ui32Fsel > 7 )
    10e4:	f1bb 0f07 	cmp.w	fp, #7
    10e8:	d857      	bhi.n	119a <am_hal_iom_config+0x1a6>
        ui32TotPer = ui32TotPer>>(ui32v1-7);
    10ea:	f1a9 0807 	sub.w	r8, r9, #7
        ui32TotPer += ((ui32DivEn) % (1 << (ui32v1 - 7))) ? 1 : 0;
    10ee:	f04f 0a01 	mov.w	sl, #1
    10f2:	fa0a f908 	lsl.w	r9, sl, r8
    10f6:	f109 3aff 	add.w	sl, r9, #4294967295
    10fa:	ea0a 0906 	and.w	r9, sl, r6
        ui32TotPer = ui32TotPer>>(ui32v1-7);
    10fe:	fa26 f608 	lsr.w	r6, r6, r8
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
    1102:	f8df 814c 	ldr.w	r8, [pc, #332]	; 1250 <am_hal_iom_config+0x25c>
        ui32TotPer += ((ui32DivEn) % (1 << (ui32v1 - 7))) ? 1 : 0;
    1106:	f1b9 0f00 	cmp.w	r9, #0
    110a:	bf18      	it	ne
    110c:	3601      	addne	r6, #1
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
    110e:	45c6      	cmp	lr, r8
    1110:	d879      	bhi.n	1206 <am_hal_iom_config+0x212>
    1112:	f04f 0e01 	mov.w	lr, #1
    1116:	fa0e fa03 	lsl.w	sl, lr, r3
    111a:	4557      	cmp	r7, sl
    111c:	d073      	beq.n	1206 <am_hal_iom_config+0x212>
    111e:	1e77      	subs	r7, r6, #1
    1120:	46b1      	mov	r9, r6
    1122:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
    if (ui32Phase == 1)
    1126:	2d00      	cmp	r5, #0
    1128:	d173      	bne.n	1212 <am_hal_iom_config+0x21e>
        ui32LowPer = (ui32TotPer - 1) / 2;          // Longer low phase
    112a:	087e      	lsrs	r6, r7, #1
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    112c:	409a      	lsls	r2, r3
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    112e:	4b3e      	ldr	r3, [pc, #248]	; (1228 <am_hal_iom_config+0x234>)
    if ( (ui32ClkFreq % 250000) == 0 )
    1130:	f8df 8120 	ldr.w	r8, [pc, #288]	; 1254 <am_hal_iom_config+0x260>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    1134:	fb09 f202 	mul.w	r2, r9, r2
    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
    1138:	ea4f 250b 	mov.w	r5, fp, lsl #8
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    113c:	fbb3 fbf2 	udiv	fp, r3, r2
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    1140:	fb02 331b 	mls	r3, r2, fp, r3
    1144:	0852      	lsrs	r2, r2, #1
    1146:	429a      	cmp	r2, r3
    1148:	bf2c      	ite	cs
    114a:	465b      	movcs	r3, fp
    114c:	f10b 0301 	addcc.w	r3, fp, #1
    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
    1150:	f405 65e0 	and.w	r5, r5, #1792	; 0x700
    1154:	ea45 020c 	orr.w	r2, r5, ip
    if ( (ui32ClkFreq % 250000) == 0 )
    1158:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 1258 <am_hal_iom_config+0x264>
    115c:	fba8 ba03 	umull	fp, sl, r8, r3
    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
    1160:	ea42 020e 	orr.w	r2, r2, lr
                 AM_REG_IOMSTR_CLKCFG_LOWPER(ui32LowPer)            |
    1164:	0436      	lsls	r6, r6, #16
    if ( (ui32ClkFreq % 250000) == 0 )
    1166:	ea4f 4e1a 	mov.w	lr, sl, lsr #16
    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
    116a:	ea42 6207 	orr.w	r2, r2, r7, lsl #24
                 AM_REG_IOMSTR_CLKCFG_LOWPER(ui32LowPer)            |
    116e:	f406 0c7f 	and.w	ip, r6, #16711680	; 0xff0000
    if ( (ui32ClkFreq % 250000) == 0 )
    1172:	fb09 371e 	mls	r7, r9, lr, r3
    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
    1176:	ea42 020c 	orr.w	r2, r2, ip
    if ( (ui32ClkFreq % 250000) == 0 )
    117a:	b93f      	cbnz	r7, 118c <am_hal_iom_config+0x198>
    return ui32Value  &&  !(ui32Value & (ui32Value - 1));
    117c:	f1be 0f00 	cmp.w	lr, #0
    1180:	d004      	beq.n	118c <am_hal_iom_config+0x198>
    1182:	f10e 33ff 	add.w	r3, lr, #4294967295
    1186:	ea13 0f0e 	tst.w	r3, lr
    118a:	d033      	beq.n	11f4 <am_hal_iom_config+0x200>
    return ( ((uint64_t)ui32ClkFreq) << 32) | (uint64_t)ui32ClkCfg;
    118c:	2500      	movs	r5, #0
    118e:	ea45 0602 	orr.w	r6, r5, r2
      ui32ClkCfg = iom_get_interface_clock_cfg(psConfig->ui32ClockFrequency,
    1192:	4637      	mov	r7, r6
    if ( ui32ClkCfg )
    1194:	b10e      	cbz	r6, 119a <am_hal_iom_config+0x1a6>
        AM_REGn(IOMSTR, ui32Module, CLKCFG) = (uint32_t)ui32ClkCfg;
    1196:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    119a:	468b      	mov	fp, r1
    119c:	4604      	mov	r4, r0
    ui32HFRC = am_hal_clkgen_sysclk_get();
    119e:	f7ff fb7b 	bl	898 <am_hal_clkgen_sysclk_get>
    ui32StatusTimeout[ui32Module] = MAX_IOM_BITS * AM_HAL_IOM_MAX_FIFO_SIZE *
    11a2:	4f23      	ldr	r7, [pc, #140]	; (1230 <am_hal_iom_config+0x23c>)
      IOM_OVERHEAD_FACTOR * (ui32HFRC / psConfig->ui32ClockFrequency);
    11a4:	f8db 1004 	ldr.w	r1, [fp, #4]
    11a8:	fbb0 f0f1 	udiv	r0, r0, r1
    11ac:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
    11b0:	0216      	lsls	r6, r2, #8
    ui32StatusTimeout[ui32Module] = MAX_IOM_BITS * AM_HAL_IOM_MAX_FIFO_SIZE *
    11b2:	f847 6024 	str.w	r6, [r7, r4, lsl #2]
    11b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11ba:	4770      	bx	lr
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
    11bc:	f44f 6c00 	mov.w	ip, #2048	; 0x800
    11c0:	2203      	movs	r2, #3
    11c2:	e779      	b.n	10b8 <am_hal_iom_config+0xc4>
            isRevB2() && (AM_HAL_IOM_I2CMODE == psConfig->ui32InterfaceMode))
    11c4:	680a      	ldr	r2, [r1, #0]
    11c6:	2a00      	cmp	r2, #0
    11c8:	f47f af4e 	bne.w	1068 <am_hal_iom_config+0x74>
      AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_SPHA_M;
    11cc:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
  if (ui32FreqHz == AM_HAL_IOM_800KHZ)
    11d0:	4d18      	ldr	r5, [pc, #96]	; (1234 <am_hal_iom_config+0x240>)
      AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_SPHA_M;
    11d2:	f043 0204 	orr.w	r2, r3, #4
    11d6:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
      ui32ClkCfg = iom_get_i2c_workaround_clock_cfg(psConfig->ui32ClockFrequency);
    11da:	684a      	ldr	r2, [r1, #4]
  if (ui32FreqHz == AM_HAL_IOM_800KHZ)
    11dc:	42aa      	cmp	r2, r5
    11de:	d01b      	beq.n	1218 <am_hal_iom_config+0x224>
  else if (ui32FreqHz == AM_HAL_IOM_400KHZ)
    11e0:	4e15      	ldr	r6, [pc, #84]	; (1238 <am_hal_iom_config+0x244>)
    11e2:	42b2      	cmp	r2, r6
    11e4:	d01a      	beq.n	121c <am_hal_iom_config+0x228>
  else if (ui32FreqHz == AM_HAL_IOM_200KHZ)
    11e6:	4b15      	ldr	r3, [pc, #84]	; (123c <am_hal_iom_config+0x248>)
    11e8:	4f15      	ldr	r7, [pc, #84]	; (1240 <am_hal_iom_config+0x24c>)
    11ea:	4d16      	ldr	r5, [pc, #88]	; (1244 <am_hal_iom_config+0x250>)
    11ec:	429a      	cmp	r2, r3
    11ee:	bf08      	it	eq
    11f0:	462f      	moveq	r7, r5
    11f2:	e7d0      	b.n	1196 <am_hal_iom_config+0x1a2>
            ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)    |
    11f4:	f445 6200 	orr.w	r2, r5, #2048	; 0x800
    11f8:	e7c8      	b.n	118c <am_hal_iom_config+0x198>
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
    11fa:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1250 <am_hal_iom_config+0x25c>
    11fe:	45c6      	cmp	lr, r8
    ui32Fsel++;
    1200:	f103 0b01 	add.w	fp, r3, #1
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
    1204:	d985      	bls.n	1112 <am_hal_iom_config+0x11e>
    1206:	1e77      	subs	r7, r6, #1
    1208:	f04f 0901 	mov.w	r9, #1
    120c:	f04f 0e00 	mov.w	lr, #0
    1210:	e789      	b.n	1126 <am_hal_iom_config+0x132>
        ui32LowPer = (ui32TotPer - 2) / 2;          // Longer high phase
    1212:	1eb5      	subs	r5, r6, #2
    1214:	086e      	lsrs	r6, r5, #1
    1216:	e789      	b.n	112c <am_hal_iom_config+0x138>
  if (ui32FreqHz == AM_HAL_IOM_800KHZ)
    1218:	4f0b      	ldr	r7, [pc, #44]	; (1248 <am_hal_iom_config+0x254>)
    121a:	e7bc      	b.n	1196 <am_hal_iom_config+0x1a2>
  else if (ui32FreqHz == AM_HAL_IOM_400KHZ)
    121c:	4f0b      	ldr	r7, [pc, #44]	; (124c <am_hal_iom_config+0x258>)
    121e:	e7ba      	b.n	1196 <am_hal_iom_config+0x1a2>
    1220:	00f423ff 	.word	0x00f423ff
    1224:	4002000c 	.word	0x4002000c
    1228:	02dc6c00 	.word	0x02dc6c00
    122c:	007a11ff 	.word	0x007a11ff
    1230:	10001338 	.word	0x10001338
    1234:	000c3500 	.word	0x000c3500
    1238:	00061a80 	.word	0x00061a80
    123c:	00030d40 	.word	0x00030d40
    1240:	1d0e1500 	.word	0x1d0e1500
    1244:	1d0e1400 	.word	0x1d0e1400
    1248:	1d0e1200 	.word	0x1d0e1200
    124c:	1d0e1300 	.word	0x1d0e1300
    1250:	00b71aff 	.word	0x00b71aff
    1254:	431bde83 	.word	0x431bde83
    1258:	0003d090 	.word	0x0003d090

0000125c <am_hal_iom_i2c_write_nq>:
{
    125c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ( ui32Module > AM_REG_IOMSTR_NUM_MODULES )
    1260:	2806      	cmp	r0, #6
{
    1262:	b087      	sub	sp, #28
    if ( ui32Module > AM_REG_IOMSTR_NUM_MODULES )
    1264:	d904      	bls.n	1270 <am_hal_iom_i2c_write_nq+0x14>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    1266:	2502      	movs	r5, #2
}
    1268:	4628      	mov	r0, r5
    126a:	b007      	add	sp, #28
    126c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1270:	461f      	mov	r7, r3
    1272:	460d      	mov	r5, r1
    1274:	4604      	mov	r4, r0
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    1276:	d014      	beq.n	12a2 <am_hal_iom_i2c_write_nq+0x46>
    1278:	49d0      	ldr	r1, [pc, #832]	; (15bc <am_hal_iom_i2c_write_nq+0x360>)
    127a:	4616      	mov	r6, r2
    while ( g_bIomBusy[ui32Module] );
    127c:	5d0b      	ldrb	r3, [r1, r4]
    127e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    1282:	2b00      	cmp	r3, #0
    1284:	d1fa      	bne.n	127c <am_hal_iom_i2c_write_nq+0x20>
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    1286:	f8df 9348 	ldr.w	r9, [pc, #840]	; 15d0 <am_hal_iom_i2c_write_nq+0x374>
    128a:	f809 2004 	strb.w	r2, [r9, r4]
    if (ui32NumBytes == 0)
    128e:	b10f      	cbz	r7, 1294 <am_hal_iom_i2c_write_nq+0x38>
    if (ui32NumBytes >= 256)
    1290:	2fff      	cmp	r7, #255	; 0xff
    1292:	d920      	bls.n	12d6 <am_hal_iom_i2c_write_nq+0x7a>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    1294:	2503      	movs	r5, #3
}
    1296:	4628      	mov	r0, r5
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    1298:	f809 5004 	strb.w	r5, [r9, r4]
}
    129c:	b007      	add	sp, #28
    129e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    12a2:	f8df 932c 	ldr.w	r9, [pc, #812]	; 15d0 <am_hal_iom_i2c_write_nq+0x374>
    12a6:	2300      	movs	r3, #0
    12a8:	f889 3006 	strb.w	r3, [r9, #6]
    if (ui32NumBytes == 0)
    12ac:	2f00      	cmp	r7, #0
    12ae:	d0f1      	beq.n	1294 <am_hal_iom_i2c_write_nq+0x38>
        if ( ui32Options & AM_HAL_IOM_RAW )
    12b0:	9e10      	ldr	r6, [sp, #64]	; 0x40
    12b2:	0070      	lsls	r0, r6, #1
    12b4:	f140 8158 	bpl.w	1568 <am_hal_iom_i2c_write_nq+0x30c>
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    12b8:	0068      	lsls	r0, r5, #1
    12ba:	f3c6 7400 	ubfx	r4, r6, #28, #1
    12be:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    12c2:	9300      	str	r3, [sp, #0]
    12c4:	4639      	mov	r1, r7
    12c6:	9401      	str	r4, [sp, #4]
    12c8:	f001 fcae 	bl	2c28 <am_hal_i2c_bit_bang_send>
        g_iom_error_status[ui32Module] = ui32Status = i2c_bb_errmap[i2cBBStatus];
    12cc:	4abc      	ldr	r2, [pc, #752]	; (15c0 <am_hal_iom_i2c_write_nq+0x364>)
    12ce:	5c15      	ldrb	r5, [r2, r0]
    12d0:	f889 5006 	strb.w	r5, [r9, #6]
    12d4:	e7c8      	b.n	1268 <am_hal_iom_i2c_write_nq+0xc>
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    12d6:	f504 28a0 	add.w	r8, r4, #327680	; 0x50000
    12da:	f108 0004 	add.w	r0, r8, #4
    12de:	ea4f 3800 	mov.w	r8, r0, lsl #12
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    12e2:	f240 73ff 	movw	r3, #2047	; 0x7ff
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    12e6:	f8d8 111c 	ldr.w	r1, [r8, #284]	; 0x11c
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    12ea:	f8d8 0200 	ldr.w	r0, [r8, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    12ee:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    12f2:	f8c8 3208 	str.w	r3, [r8, #520]	; 0x208
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    12f6:	f8d8 311c 	ldr.w	r3, [r8, #284]	; 0x11c
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    12fa:	f8d8 2100 	ldr.w	r2, [r8, #256]	; 0x100
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    12fe:	9003      	str	r0, [sp, #12]
                      AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    1300:	f011 0f08 	tst.w	r1, #8
    1304:	bf14      	ite	ne
    1306:	f04f 0a40 	movne.w	sl, #64	; 0x40
    130a:	f04f 0a80 	moveq.w	sl, #128	; 0x80
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    130e:	f013 0f08 	tst.w	r3, #8
    1312:	bf14      	ite	ne
    1314:	2340      	movne	r3, #64	; 0x40
    1316:	2380      	moveq	r3, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1318:	1a99      	subs	r1, r3, r2
    ui32TransferSize = (ui32NumBytes <= ui32MaxFifoSize ? ui32NumBytes :
    131a:	45ba      	cmp	sl, r7
    131c:	bf28      	it	cs
    131e:	46ba      	movcs	sl, r7
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    1320:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    1324:	f508 738e 	add.w	r3, r8, #284	; 0x11c
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    1328:	4582      	cmp	sl, r0
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    132a:	9304      	str	r3, [sp, #16]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    132c:	f508 7b80 	add.w	fp, r8, #256	; 0x100
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    1330:	f200 813c 	bhi.w	15ac <am_hal_iom_i2c_write_nq+0x350>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1334:	4630      	mov	r0, r6
    1336:	43f2      	mvns	r2, r6
    1338:	f850 1b04 	ldr.w	r1, [r0], #4
    133c:	f8c8 1000 	str.w	r1, [r8]
    1340:	4432      	add	r2, r6
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1342:	1b83      	subs	r3, r0, r6
    1344:	4452      	add	r2, sl
    1346:	459a      	cmp	sl, r3
    1348:	f3c2 0282 	ubfx	r2, r2, #2, #3
    134c:	d950      	bls.n	13f0 <am_hal_iom_i2c_write_nq+0x194>
    134e:	b352      	cbz	r2, 13a6 <am_hal_iom_i2c_write_nq+0x14a>
    1350:	2a01      	cmp	r2, #1
    1352:	d021      	beq.n	1398 <am_hal_iom_i2c_write_nq+0x13c>
    1354:	2a02      	cmp	r2, #2
    1356:	d01b      	beq.n	1390 <am_hal_iom_i2c_write_nq+0x134>
    1358:	2a03      	cmp	r2, #3
    135a:	d015      	beq.n	1388 <am_hal_iom_i2c_write_nq+0x12c>
    135c:	2a04      	cmp	r2, #4
    135e:	d00f      	beq.n	1380 <am_hal_iom_i2c_write_nq+0x124>
    1360:	2a05      	cmp	r2, #5
    1362:	d009      	beq.n	1378 <am_hal_iom_i2c_write_nq+0x11c>
    1364:	2a06      	cmp	r2, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1366:	bf1c      	itt	ne
    1368:	f850 2b04 	ldrne.w	r2, [r0], #4
    136c:	f8c8 2000 	strne.w	r2, [r8]
    1370:	f850 1b04 	ldr.w	r1, [r0], #4
    1374:	f8c8 1000 	str.w	r1, [r8]
    1378:	f850 3b04 	ldr.w	r3, [r0], #4
    137c:	f8c8 3000 	str.w	r3, [r8]
    1380:	f850 2b04 	ldr.w	r2, [r0], #4
    1384:	f8c8 2000 	str.w	r2, [r8]
    1388:	f850 1b04 	ldr.w	r1, [r0], #4
    138c:	f8c8 1000 	str.w	r1, [r8]
    1390:	f850 3b04 	ldr.w	r3, [r0], #4
    1394:	f8c8 3000 	str.w	r3, [r8]
    1398:	f850 2b04 	ldr.w	r2, [r0], #4
    139c:	f8c8 2000 	str.w	r2, [r8]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    13a0:	1b81      	subs	r1, r0, r6
    13a2:	458a      	cmp	sl, r1
    13a4:	d924      	bls.n	13f0 <am_hal_iom_i2c_write_nq+0x194>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    13a6:	4684      	mov	ip, r0
    13a8:	3020      	adds	r0, #32
    13aa:	f85c 3b04 	ldr.w	r3, [ip], #4
    13ae:	f8c8 3000 	str.w	r3, [r8]
    13b2:	f850 2c1c 	ldr.w	r2, [r0, #-28]
    13b6:	f8c8 2000 	str.w	r2, [r8]
    13ba:	f8dc 1004 	ldr.w	r1, [ip, #4]
    13be:	f8c8 1000 	str.w	r1, [r8]
    13c2:	f850 3c14 	ldr.w	r3, [r0, #-20]
    13c6:	f8c8 3000 	str.w	r3, [r8]
    13ca:	f850 2c10 	ldr.w	r2, [r0, #-16]
    13ce:	f8c8 2000 	str.w	r2, [r8]
    13d2:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    13d6:	f8c8 1000 	str.w	r1, [r8]
    13da:	f850 3c08 	ldr.w	r3, [r0, #-8]
    13de:	f8c8 3000 	str.w	r3, [r8]
    13e2:	f850 2c04 	ldr.w	r2, [r0, #-4]
    13e6:	f8c8 2000 	str.w	r2, [r8]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    13ea:	1b81      	subs	r1, r0, r6
    13ec:	458a      	cmp	sl, r1
    13ee:	d8da      	bhi.n	13a6 <am_hal_iom_i2c_write_nq+0x14a>
    13f0:	9810      	ldr	r0, [sp, #64]	; 0x40
    13f2:	9000      	str	r0, [sp, #0]
    13f4:	462a      	mov	r2, r5
    13f6:	463b      	mov	r3, r7
    13f8:	4621      	mov	r1, r4
    13fa:	2000      	movs	r0, #0
    13fc:	f7ff fb76 	bl	aec <am_hal_iom_i2c_cmd_run.part.1>
    if (ui32Status != AM_HAL_IOM_SUCCESS)
    1400:	4605      	mov	r5, r0
    1402:	2800      	cmp	r0, #0
    1404:	f040 80c8 	bne.w	1598 <am_hal_iom_i2c_write_nq+0x33c>
    pui32Data += ui32TransferSize >> 2;
    1408:	f02a 0e03 	bic.w	lr, sl, #3
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    140c:	ebb7 070a 	subs.w	r7, r7, sl
    pui32Data += ui32TransferSize >> 2;
    1410:	4476      	add	r6, lr
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    1412:	f000 80f3 	beq.w	15fc <am_hal_iom_i2c_write_nq+0x3a0>
    1416:	f8d8 3204 	ldr.w	r3, [r8, #516]	; 0x204
    141a:	07d9      	lsls	r1, r3, #31
    141c:	f508 7a01 	add.w	sl, r8, #516	; 0x204
    1420:	f100 808d 	bmi.w	153e <am_hal_iom_i2c_write_nq+0x2e2>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    1424:	4623      	mov	r3, r4
    1426:	465c      	mov	r4, fp
    1428:	f8dd b010 	ldr.w	fp, [sp, #16]
    142c:	9005      	str	r0, [sp, #20]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    142e:	f8db 5000 	ldr.w	r5, [fp]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1432:	6822      	ldr	r2, [r4, #0]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    1434:	f8db 0000 	ldr.w	r0, [fp]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1438:	6821      	ldr	r1, [r4, #0]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    143a:	f015 0f08 	tst.w	r5, #8
    143e:	bf14      	ite	ne
    1440:	2540      	movne	r5, #64	; 0x40
    1442:	2580      	moveq	r5, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1444:	1aad      	subs	r5, r5, r2
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    1446:	f010 0f08 	tst.w	r0, #8
        ui32SpaceInFifo =  am_hal_iom_fifo_empty_slots(ui32Module);
    144a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    144e:	bf14      	ite	ne
    1450:	2240      	movne	r2, #64	; 0x40
    1452:	2280      	moveq	r2, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1454:	1a52      	subs	r2, r2, r1
    1456:	42bd      	cmp	r5, r7
    1458:	bf28      	it	cs
    145a:	463d      	movcs	r5, r7
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    145c:	f002 00fc 	and.w	r0, r2, #252	; 0xfc
    1460:	4285      	cmp	r5, r0
    1462:	f200 8090 	bhi.w	1586 <am_hal_iom_i2c_write_nq+0x32a>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1466:	2d00      	cmp	r5, #0
    1468:	d05d      	beq.n	1526 <am_hal_iom_i2c_write_nq+0x2ca>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    146a:	4632      	mov	r2, r6
    146c:	43f1      	mvns	r1, r6
    146e:	f852 0b04 	ldr.w	r0, [r2], #4
    1472:	f8c8 0000 	str.w	r0, [r8]
    1476:	4431      	add	r1, r6
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1478:	1b90      	subs	r0, r2, r6
    147a:	4429      	add	r1, r5
    147c:	4285      	cmp	r5, r0
    147e:	f3c1 0182 	ubfx	r1, r1, #2, #3
    1482:	d950      	bls.n	1526 <am_hal_iom_i2c_write_nq+0x2ca>
    1484:	b351      	cbz	r1, 14dc <am_hal_iom_i2c_write_nq+0x280>
    1486:	2901      	cmp	r1, #1
    1488:	d021      	beq.n	14ce <am_hal_iom_i2c_write_nq+0x272>
    148a:	2902      	cmp	r1, #2
    148c:	d01b      	beq.n	14c6 <am_hal_iom_i2c_write_nq+0x26a>
    148e:	2903      	cmp	r1, #3
    1490:	d015      	beq.n	14be <am_hal_iom_i2c_write_nq+0x262>
    1492:	2904      	cmp	r1, #4
    1494:	d00f      	beq.n	14b6 <am_hal_iom_i2c_write_nq+0x25a>
    1496:	2905      	cmp	r1, #5
    1498:	d009      	beq.n	14ae <am_hal_iom_i2c_write_nq+0x252>
    149a:	2906      	cmp	r1, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    149c:	bf1c      	itt	ne
    149e:	f852 1b04 	ldrne.w	r1, [r2], #4
    14a2:	f8c8 1000 	strne.w	r1, [r8]
    14a6:	f852 0b04 	ldr.w	r0, [r2], #4
    14aa:	f8c8 0000 	str.w	r0, [r8]
    14ae:	f852 1b04 	ldr.w	r1, [r2], #4
    14b2:	f8c8 1000 	str.w	r1, [r8]
    14b6:	f852 0b04 	ldr.w	r0, [r2], #4
    14ba:	f8c8 0000 	str.w	r0, [r8]
    14be:	f852 1b04 	ldr.w	r1, [r2], #4
    14c2:	f8c8 1000 	str.w	r1, [r8]
    14c6:	f852 0b04 	ldr.w	r0, [r2], #4
    14ca:	f8c8 0000 	str.w	r0, [r8]
    14ce:	f852 1b04 	ldr.w	r1, [r2], #4
    14d2:	f8c8 1000 	str.w	r1, [r8]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    14d6:	1b90      	subs	r0, r2, r6
    14d8:	4285      	cmp	r5, r0
    14da:	d924      	bls.n	1526 <am_hal_iom_i2c_write_nq+0x2ca>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    14dc:	4694      	mov	ip, r2
    14de:	3220      	adds	r2, #32
    14e0:	f85c 1b04 	ldr.w	r1, [ip], #4
    14e4:	f8c8 1000 	str.w	r1, [r8]
    14e8:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    14ec:	f8c8 0000 	str.w	r0, [r8]
    14f0:	f8dc 1004 	ldr.w	r1, [ip, #4]
    14f4:	f8c8 1000 	str.w	r1, [r8]
    14f8:	f852 0c14 	ldr.w	r0, [r2, #-20]
    14fc:	f8c8 0000 	str.w	r0, [r8]
    1500:	f852 1c10 	ldr.w	r1, [r2, #-16]
    1504:	f8c8 1000 	str.w	r1, [r8]
    1508:	f852 0c0c 	ldr.w	r0, [r2, #-12]
    150c:	f8c8 0000 	str.w	r0, [r8]
    1510:	f852 1c08 	ldr.w	r1, [r2, #-8]
    1514:	f8c8 1000 	str.w	r1, [r8]
    1518:	f852 0c04 	ldr.w	r0, [r2, #-4]
    151c:	f8c8 0000 	str.w	r0, [r8]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1520:	1b91      	subs	r1, r2, r6
    1522:	428d      	cmp	r5, r1
    1524:	d8da      	bhi.n	14dc <am_hal_iom_i2c_write_nq+0x280>
        pui32Data += ui32TransferSize >> 2;
    1526:	f025 0e03 	bic.w	lr, r5, #3
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    152a:	1b7f      	subs	r7, r7, r5
        pui32Data += ui32TransferSize >> 2;
    152c:	4476      	add	r6, lr
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    152e:	d004      	beq.n	153a <am_hal_iom_i2c_write_nq+0x2de>
    1530:	f8da 2000 	ldr.w	r2, [sl]
    1534:	07d2      	lsls	r2, r2, #31
    1536:	f57f af7a 	bpl.w	142e <am_hal_iom_i2c_write_nq+0x1d2>
    153a:	9d05      	ldr	r5, [sp, #20]
    153c:	461c      	mov	r4, r3
    waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    153e:	4e21      	ldr	r6, [pc, #132]	; (15c4 <am_hal_iom_i2c_write_nq+0x368>)
    1540:	2301      	movs	r3, #1
    1542:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    1546:	461a      	mov	r2, r3
    1548:	4651      	mov	r1, sl
    154a:	f7ff f9c5 	bl	8d8 <am_hal_flash_delay_status_change>
    if (waitStatus != 1)
    154e:	2801      	cmp	r0, #1
    1550:	d040      	beq.n	15d4 <am_hal_iom_i2c_write_nq+0x378>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    1552:	2501      	movs	r5, #1
    1554:	f809 5004 	strb.w	r5, [r9, r4]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    1558:	f240 74ff 	movw	r4, #2047	; 0x7ff
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    155c:	9803      	ldr	r0, [sp, #12]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    155e:	f8c8 4208 	str.w	r4, [r8, #520]	; 0x208
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    1562:	f8c8 0200 	str.w	r0, [r8, #512]	; 0x200
    1566:	e67f      	b.n	1268 <am_hal_iom_i2c_write_nq+0xc>
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    1568:	f3c6 7400 	ubfx	r4, r6, #28, #1
    156c:	2301      	movs	r3, #1
    156e:	e88d 0018 	stmia.w	sp, {r3, r4}
    1572:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1574:	006d      	lsls	r5, r5, #1
    1576:	f005 00fe 	and.w	r0, r5, #254	; 0xfe
    157a:	4639      	mov	r1, r7
    157c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    1580:	f001 fb52 	bl	2c28 <am_hal_i2c_bit_bang_send>
    1584:	e6a2      	b.n	12cc <am_hal_iom_i2c_write_nq+0x70>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    1586:	4a10      	ldr	r2, [pc, #64]	; (15c8 <am_hal_iom_i2c_write_nq+0x36c>)
    1588:	4810      	ldr	r0, [pc, #64]	; (15cc <am_hal_iom_i2c_write_nq+0x370>)
    158a:	9304      	str	r3, [sp, #16]
    158c:	f640 7145 	movw	r1, #3909	; 0xf45
    1590:	f7ff f99c 	bl	8cc <am_hal_debug_error>
    1594:	9b04      	ldr	r3, [sp, #16]
    1596:	e768      	b.n	146a <am_hal_iom_i2c_write_nq+0x20e>
        AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    1598:	f240 71ff 	movw	r1, #2047	; 0x7ff
        AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    159c:	9f03      	ldr	r7, [sp, #12]
        g_iom_error_status[ui32Module] = ui32Status = ui32Status;
    159e:	f809 0004 	strb.w	r0, [r9, r4]
        AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    15a2:	f8c8 1208 	str.w	r1, [r8, #520]	; 0x208
        AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    15a6:	f8c8 7200 	str.w	r7, [r8, #512]	; 0x200
    15aa:	e65d      	b.n	1268 <am_hal_iom_i2c_write_nq+0xc>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    15ac:	4a06      	ldr	r2, [pc, #24]	; (15c8 <am_hal_iom_i2c_write_nq+0x36c>)
    15ae:	4807      	ldr	r0, [pc, #28]	; (15cc <am_hal_iom_i2c_write_nq+0x370>)
    15b0:	f640 7145 	movw	r1, #3909	; 0xf45
    15b4:	f7ff f98a 	bl	8cc <am_hal_debug_error>
    15b8:	e6bc      	b.n	1334 <am_hal_iom_i2c_write_nq+0xd8>
    15ba:	bf00      	nop
    15bc:	10001004 	.word	0x10001004
    15c0:	0000507c 	.word	0x0000507c
    15c4:	10001338 	.word	0x10001338
    15c8:	00004fc8 	.word	0x00004fc8
    15cc:	00004ffc 	.word	0x00004ffc
    15d0:	1000100c 	.word	0x1000100c
        uint32_t u32RetVal = AM_REGn(IOMSTR, ui32Module, INTSTAT);
        return u32RetVal & AM_REGn(IOMSTR, ui32Module, INTEN);
    }
    else
    {
        return AM_REGn(IOMSTR, ui32Module, INTSTAT);
    15d4:	f8da 3000 	ldr.w	r3, [sl]
    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    15d8:	f013 0fcc 	tst.w	r3, #204	; 0xcc
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
    15dc:	bf18      	it	ne
    15de:	2505      	movne	r5, #5
    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    15e0:	d002      	beq.n	15e8 <am_hal_iom_i2c_write_nq+0x38c>
        g_iom_error_status[ui32Module] = ui32Status = internal_iom_get_int_err(ui32Module, 0);
    15e2:	f809 5004 	strb.w	r5, [r9, r4]
    15e6:	e7b7      	b.n	1558 <am_hal_iom_i2c_write_nq+0x2fc>
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
    15e8:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    15ec:	d104      	bne.n	15f8 <am_hal_iom_i2c_write_nq+0x39c>
        ui32Status = AM_HAL_IOM_ERR_I2C_NAK;
    15ee:	f013 0f10 	tst.w	r3, #16
    15f2:	bf18      	it	ne
    15f4:	2506      	movne	r5, #6
    15f6:	e7f4      	b.n	15e2 <am_hal_iom_i2c_write_nq+0x386>
        ui32Status = AM_HAL_IOM_ERR_I2C_ARB;
    15f8:	2507      	movs	r5, #7
    15fa:	e7f2      	b.n	15e2 <am_hal_iom_i2c_write_nq+0x386>
    15fc:	f508 7a01 	add.w	sl, r8, #516	; 0x204
    1600:	e79d      	b.n	153e <am_hal_iom_i2c_write_nq+0x2e2>
    1602:	bf00      	nop

00001604 <am_hal_iom_i2c_read_nq>:
{
    1604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ( ui32Module > AM_REG_IOMSTR_NUM_MODULES )
    1608:	2806      	cmp	r0, #6
{
    160a:	b087      	sub	sp, #28
    if ( ui32Module > AM_REG_IOMSTR_NUM_MODULES )
    160c:	d904      	bls.n	1618 <am_hal_iom_i2c_read_nq+0x14>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    160e:	2502      	movs	r5, #2
}
    1610:	4628      	mov	r0, r5
    1612:	b007      	add	sp, #28
    1614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1618:	4604      	mov	r4, r0
    161a:	461e      	mov	r6, r3
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    161c:	d014      	beq.n	1648 <am_hal_iom_i2c_read_nq+0x44>
    161e:	4617      	mov	r7, r2
    1620:	4ac2      	ldr	r2, [pc, #776]	; (192c <am_hal_iom_i2c_read_nq+0x328>)
    while ( g_bIomBusy[ui32Module] );
    1622:	5d13      	ldrb	r3, [r2, r4]
    1624:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    1628:	2b00      	cmp	r3, #0
    162a:	d1fa      	bne.n	1622 <am_hal_iom_i2c_read_nq+0x1e>
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    162c:	f8df 8310 	ldr.w	r8, [pc, #784]	; 1940 <am_hal_iom_i2c_read_nq+0x33c>
    1630:	f808 0004 	strb.w	r0, [r8, r4]
    if (ui32NumBytes == 0)
    1634:	b10e      	cbz	r6, 163a <am_hal_iom_i2c_read_nq+0x36>
    if (ui32NumBytes >= 256)
    1636:	2eff      	cmp	r6, #255	; 0xff
    1638:	d923      	bls.n	1682 <am_hal_iom_i2c_read_nq+0x7e>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    163a:	2503      	movs	r5, #3
}
    163c:	4628      	mov	r0, r5
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    163e:	f808 5004 	strb.w	r5, [r8, r4]
}
    1642:	b007      	add	sp, #28
    1644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    1648:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 1940 <am_hal_iom_i2c_read_nq+0x33c>
    164c:	2300      	movs	r3, #0
    164e:	f888 3006 	strb.w	r3, [r8, #6]
    if (ui32NumBytes == 0)
    1652:	2e00      	cmp	r6, #0
    1654:	d0f1      	beq.n	163a <am_hal_iom_i2c_read_nq+0x36>
        if ( ui32Options & AM_HAL_IOM_RAW )
    1656:	9d10      	ldr	r5, [sp, #64]	; 0x40
    1658:	006c      	lsls	r4, r5, #1
    165a:	f140 8140 	bpl.w	18de <am_hal_iom_i2c_read_nq+0x2da>
            i2cBBStatus = am_hal_i2c_bit_bang_receive((ui32BusAddress << 1) | 1, ui32NumBytes,
    165e:	9810      	ldr	r0, [sp, #64]	; 0x40
    1660:	9300      	str	r3, [sp, #0]
    1662:	004c      	lsls	r4, r1, #1
    1664:	f3c0 7500 	ubfx	r5, r0, #28, #1
    1668:	f044 0a01 	orr.w	sl, r4, #1
    166c:	fa5f f08a 	uxtb.w	r0, sl
    1670:	4631      	mov	r1, r6
    1672:	9501      	str	r5, [sp, #4]
    1674:	f000 fe86 	bl	2384 <am_hal_i2c_bit_bang_receive>
        g_iom_error_status[ui32Module] = ui32Status = i2c_bb_errmap[i2cBBStatus];
    1678:	4bad      	ldr	r3, [pc, #692]	; (1930 <am_hal_iom_i2c_read_nq+0x32c>)
    167a:	5c1d      	ldrb	r5, [r3, r0]
    167c:	f888 5006 	strb.w	r5, [r8, #6]
    1680:	e7c6      	b.n	1610 <am_hal_iom_i2c_read_nq+0xc>
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    1682:	f504 29a0 	add.w	r9, r4, #327680	; 0x50000
    1686:	f109 0504 	add.w	r5, r9, #4
    168a:	ea4f 3905 	mov.w	r9, r5, lsl #12
    168e:	460a      	mov	r2, r1
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    1690:	f240 7aff 	movw	sl, #2047	; 0x7ff
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    1694:	f8d9 1200 	ldr.w	r1, [r9, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    1698:	f8c9 0200 	str.w	r0, [r9, #512]	; 0x200
    169c:	9810      	ldr	r0, [sp, #64]	; 0x40
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    169e:	9104      	str	r1, [sp, #16]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    16a0:	f8c9 a208 	str.w	sl, [r9, #520]	; 0x208
    16a4:	4633      	mov	r3, r6
    16a6:	9000      	str	r0, [sp, #0]
    16a8:	4621      	mov	r1, r4
    16aa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    16ae:	f7ff fa1d 	bl	aec <am_hal_iom_i2c_cmd_run.part.1>
    if (ui32Status != AM_HAL_IOM_SUCCESS)
    16b2:	4605      	mov	r5, r0
    16b4:	2800      	cmp	r0, #0
    16b6:	f040 8122 	bne.w	18fe <am_hal_iom_i2c_read_nq+0x2fa>
    16ba:	f509 7201 	add.w	r2, r9, #516	; 0x204
    16be:	9202      	str	r2, [sp, #8]
    16c0:	f509 7a80 	add.w	sl, r9, #256	; 0x100
    16c4:	4603      	mov	r3, r0
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    16c6:	f8da 0000 	ldr.w	r0, [sl]
    16ca:	fa5f fb80 	uxtb.w	fp, r0
        if ( ui32BytesInFifo >= ui32NumBytes )
    16ce:	45b3      	cmp	fp, r6
    16d0:	f080 808a 	bcs.w	17e8 <am_hal_iom_i2c_read_nq+0x1e4>
        else if ( ui32BytesInFifo >= 4 )
    16d4:	f1bb 0f03 	cmp.w	fp, #3
    16d8:	d97f      	bls.n	17da <am_hal_iom_i2c_read_nq+0x1d6>
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    16da:	f8d9 111c 	ldr.w	r1, [r9, #284]	; 0x11c
            am_hal_iom_fifo_read(ui32Module, pui32Data, ui32BytesInFifo & ~0x3);
    16de:	f000 02fc 	and.w	r2, r0, #252	; 0xfc
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    16e2:	0709      	lsls	r1, r1, #28
            am_hal_iom_fifo_read(ui32Module, pui32Data, ui32BytesInFifo & ~0x3);
    16e4:	9203      	str	r2, [sp, #12]
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    16e6:	f140 812d 	bpl.w	1944 <am_hal_iom_i2c_read_nq+0x340>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    16ea:	463a      	mov	r2, r7
    16ec:	f00b 0efc 	and.w	lr, fp, #252	; 0xfc
    16f0:	f8d9 1000 	ldr.w	r1, [r9]
    16f4:	f842 1b04 	str.w	r1, [r2], #4
    16f8:	4638      	mov	r0, r7
    16fa:	4477      	add	r7, lr
    16fc:	1a39      	subs	r1, r7, r0
    16fe:	f1a1 0b04 	sub.w	fp, r1, #4
    for ( i = 0; i < ui32NumWords; i++ )
    1702:	42ba      	cmp	r2, r7
    1704:	f3cb 0182 	ubfx	r1, fp, #2, #3
    1708:	d048      	beq.n	179c <am_hal_iom_i2c_read_nq+0x198>
    170a:	b349      	cbz	r1, 1760 <am_hal_iom_i2c_read_nq+0x15c>
    170c:	2901      	cmp	r1, #1
    170e:	d021      	beq.n	1754 <am_hal_iom_i2c_read_nq+0x150>
    1710:	2902      	cmp	r1, #2
    1712:	d01b      	beq.n	174c <am_hal_iom_i2c_read_nq+0x148>
    1714:	2903      	cmp	r1, #3
    1716:	d015      	beq.n	1744 <am_hal_iom_i2c_read_nq+0x140>
    1718:	2904      	cmp	r1, #4
    171a:	d00f      	beq.n	173c <am_hal_iom_i2c_read_nq+0x138>
    171c:	2905      	cmp	r1, #5
    171e:	d009      	beq.n	1734 <am_hal_iom_i2c_read_nq+0x130>
    1720:	2906      	cmp	r1, #6
    1722:	d003      	beq.n	172c <am_hal_iom_i2c_read_nq+0x128>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1724:	f8d9 1000 	ldr.w	r1, [r9]
    1728:	6041      	str	r1, [r0, #4]
    172a:	3204      	adds	r2, #4
    172c:	f8d9 0000 	ldr.w	r0, [r9]
    1730:	f842 0b04 	str.w	r0, [r2], #4
    1734:	f8d9 1000 	ldr.w	r1, [r9]
    1738:	f842 1b04 	str.w	r1, [r2], #4
    173c:	f8d9 0000 	ldr.w	r0, [r9]
    1740:	f842 0b04 	str.w	r0, [r2], #4
    1744:	f8d9 1000 	ldr.w	r1, [r9]
    1748:	f842 1b04 	str.w	r1, [r2], #4
    174c:	f8d9 0000 	ldr.w	r0, [r9]
    1750:	f842 0b04 	str.w	r0, [r2], #4
    1754:	f8d9 1000 	ldr.w	r1, [r9]
    1758:	f842 1b04 	str.w	r1, [r2], #4
    for ( i = 0; i < ui32NumWords; i++ )
    175c:	42ba      	cmp	r2, r7
    175e:	d01d      	beq.n	179c <am_hal_iom_i2c_read_nq+0x198>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1760:	4694      	mov	ip, r2
    1762:	f8d9 0000 	ldr.w	r0, [r9]
    1766:	f84c 0b04 	str.w	r0, [ip], #4
    176a:	f8d9 1000 	ldr.w	r1, [r9]
    176e:	6051      	str	r1, [r2, #4]
    1770:	f8d9 0000 	ldr.w	r0, [r9]
    1774:	f8cc 0004 	str.w	r0, [ip, #4]
    1778:	f8d9 1000 	ldr.w	r1, [r9]
    177c:	60d1      	str	r1, [r2, #12]
    177e:	f8d9 0000 	ldr.w	r0, [r9]
    1782:	6110      	str	r0, [r2, #16]
    1784:	f8d9 1000 	ldr.w	r1, [r9]
    1788:	6151      	str	r1, [r2, #20]
    178a:	f8d9 0000 	ldr.w	r0, [r9]
    178e:	6190      	str	r0, [r2, #24]
    1790:	f8d9 1000 	ldr.w	r1, [r9]
    1794:	61d1      	str	r1, [r2, #28]
    1796:	3220      	adds	r2, #32
    for ( i = 0; i < ui32NumWords; i++ )
    1798:	42ba      	cmp	r2, r7
    179a:	d1e1      	bne.n	1760 <am_hal_iom_i2c_read_nq+0x15c>
            ui32NumBytes -= ui32BytesInFifo & ~0x3;
    179c:	9a03      	ldr	r2, [sp, #12]
    179e:	1ab6      	subs	r6, r6, r2
        if ( bCmdCmp == true )
    17a0:	b92b      	cbnz	r3, 17ae <am_hal_iom_i2c_read_nq+0x1aa>
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    17a2:	9b02      	ldr	r3, [sp, #8]
    17a4:	6818      	ldr	r0, [r3, #0]
    17a6:	f000 0301 	and.w	r3, r0, #1
    while ( ui32NumBytes )
    17aa:	2e00      	cmp	r6, #0
    17ac:	d18b      	bne.n	16c6 <am_hal_iom_i2c_read_nq+0xc2>
    waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    17ae:	4f61      	ldr	r7, [pc, #388]	; (1934 <am_hal_iom_i2c_read_nq+0x330>)
    17b0:	9902      	ldr	r1, [sp, #8]
    17b2:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
    17b6:	2301      	movs	r3, #1
    17b8:	461a      	mov	r2, r3
    17ba:	f7ff f88d 	bl	8d8 <am_hal_flash_delay_status_change>
    if (waitStatus != 1)
    17be:	2801      	cmp	r0, #1
    17c0:	f000 80cf 	beq.w	1962 <am_hal_iom_i2c_read_nq+0x35e>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    17c4:	2501      	movs	r5, #1
    17c6:	f808 5004 	strb.w	r5, [r8, r4]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    17ca:	f240 74ff 	movw	r4, #2047	; 0x7ff
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    17ce:	9804      	ldr	r0, [sp, #16]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    17d0:	f8c9 4208 	str.w	r4, [r9, #520]	; 0x208
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    17d4:	f8c9 0200 	str.w	r0, [r9, #512]	; 0x200
    17d8:	e71a      	b.n	1610 <am_hal_iom_i2c_read_nq+0xc>
        if ( bCmdCmp == true )
    17da:	2b00      	cmp	r3, #0
    17dc:	d1e7      	bne.n	17ae <am_hal_iom_i2c_read_nq+0x1aa>
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    17de:	9b02      	ldr	r3, [sp, #8]
    17e0:	6819      	ldr	r1, [r3, #0]
    17e2:	f001 0301 	and.w	r3, r1, #1
    17e6:	e76e      	b.n	16c6 <am_hal_iom_i2c_read_nq+0xc2>
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    17e8:	f8d9 111c 	ldr.w	r1, [r9, #284]	; 0x11c
    17ec:	0708      	lsls	r0, r1, #28
    17ee:	f140 808e 	bpl.w	190e <am_hal_iom_i2c_read_nq+0x30a>
    17f2:	f006 0003 	and.w	r0, r6, #3
    for ( i = 0; i < ui32NumWords; i++ )
    17f6:	08b6      	lsrs	r6, r6, #2
    17f8:	d058      	beq.n	18ac <am_hal_iom_i2c_read_nq+0x2a8>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    17fa:	463a      	mov	r2, r7
    17fc:	f8d9 1000 	ldr.w	r1, [r9]
    1800:	f842 1b04 	str.w	r1, [r2], #4
    1804:	eb07 0a86 	add.w	sl, r7, r6, lsl #2
    1808:	ebaa 0e07 	sub.w	lr, sl, r7
    180c:	f1ae 0b04 	sub.w	fp, lr, #4
    for ( i = 0; i < ui32NumWords; i++ )
    1810:	4552      	cmp	r2, sl
    1812:	f3cb 0182 	ubfx	r1, fp, #2, #3
    1816:	d049      	beq.n	18ac <am_hal_iom_i2c_read_nq+0x2a8>
    1818:	b349      	cbz	r1, 186e <am_hal_iom_i2c_read_nq+0x26a>
    181a:	2901      	cmp	r1, #1
    181c:	d021      	beq.n	1862 <am_hal_iom_i2c_read_nq+0x25e>
    181e:	2902      	cmp	r1, #2
    1820:	d01b      	beq.n	185a <am_hal_iom_i2c_read_nq+0x256>
    1822:	2903      	cmp	r1, #3
    1824:	d015      	beq.n	1852 <am_hal_iom_i2c_read_nq+0x24e>
    1826:	2904      	cmp	r1, #4
    1828:	d00f      	beq.n	184a <am_hal_iom_i2c_read_nq+0x246>
    182a:	2905      	cmp	r1, #5
    182c:	d009      	beq.n	1842 <am_hal_iom_i2c_read_nq+0x23e>
    182e:	2906      	cmp	r1, #6
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1830:	bf1c      	itt	ne
    1832:	f8d9 1000 	ldrne.w	r1, [r9]
    1836:	f842 1b04 	strne.w	r1, [r2], #4
    183a:	f8d9 1000 	ldr.w	r1, [r9]
    183e:	f842 1b04 	str.w	r1, [r2], #4
    1842:	f8d9 1000 	ldr.w	r1, [r9]
    1846:	f842 1b04 	str.w	r1, [r2], #4
    184a:	f8d9 1000 	ldr.w	r1, [r9]
    184e:	f842 1b04 	str.w	r1, [r2], #4
    1852:	f8d9 1000 	ldr.w	r1, [r9]
    1856:	f842 1b04 	str.w	r1, [r2], #4
    185a:	f8d9 1000 	ldr.w	r1, [r9]
    185e:	f842 1b04 	str.w	r1, [r2], #4
    1862:	f8d9 1000 	ldr.w	r1, [r9]
    1866:	f842 1b04 	str.w	r1, [r2], #4
    for ( i = 0; i < ui32NumWords; i++ )
    186a:	4552      	cmp	r2, sl
    186c:	d01e      	beq.n	18ac <am_hal_iom_i2c_read_nq+0x2a8>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    186e:	4696      	mov	lr, r2
    1870:	f8d9 c000 	ldr.w	ip, [r9]
    1874:	f84e cb04 	str.w	ip, [lr], #4
    1878:	f8d9 b000 	ldr.w	fp, [r9]
    187c:	f8c2 b004 	str.w	fp, [r2, #4]
    1880:	f8d9 c000 	ldr.w	ip, [r9]
    1884:	f8ce c004 	str.w	ip, [lr, #4]
    1888:	f8d9 1000 	ldr.w	r1, [r9]
    188c:	60d1      	str	r1, [r2, #12]
    188e:	f8d9 1000 	ldr.w	r1, [r9]
    1892:	6111      	str	r1, [r2, #16]
    1894:	f8d9 1000 	ldr.w	r1, [r9]
    1898:	6151      	str	r1, [r2, #20]
    189a:	f8d9 1000 	ldr.w	r1, [r9]
    189e:	6191      	str	r1, [r2, #24]
    18a0:	f8d9 1000 	ldr.w	r1, [r9]
    18a4:	61d1      	str	r1, [r2, #28]
    18a6:	3220      	adds	r2, #32
    for ( i = 0; i < ui32NumWords; i++ )
    18a8:	4552      	cmp	r2, sl
    18aa:	d1e0      	bne.n	186e <am_hal_iom_i2c_read_nq+0x26a>
    if ( ui32Leftovers )
    18ac:	b188      	cbz	r0, 18d2 <am_hal_iom_i2c_read_nq+0x2ce>
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
    18ae:	f8d9 2000 	ldr.w	r2, [r9]
            pui8Data[j] = sTempBuffer.bytes[j];
    18b2:	f807 2026 	strb.w	r2, [r7, r6, lsl #2]
        for ( j = 0; j < ui32Leftovers; j++ )
    18b6:	2801      	cmp	r0, #1
        pui8Data = (uint8_t *) (&pui32Data[i]);
    18b8:	ea4f 0686 	mov.w	r6, r6, lsl #2
        for ( j = 0; j < ui32Leftovers; j++ )
    18bc:	d009      	beq.n	18d2 <am_hal_iom_i2c_read_nq+0x2ce>
            pui8Data[j] = sTempBuffer.bytes[j];
    18be:	4437      	add	r7, r6
        for ( j = 0; j < ui32Leftovers; j++ )
    18c0:	2803      	cmp	r0, #3
            pui8Data[j] = sTempBuffer.bytes[j];
    18c2:	f3c2 2107 	ubfx	r1, r2, #8, #8
    18c6:	bf08      	it	eq
    18c8:	f3c2 4207 	ubfxeq	r2, r2, #16, #8
    18cc:	7079      	strb	r1, [r7, #1]
    18ce:	bf08      	it	eq
    18d0:	70ba      	strbeq	r2, [r7, #2]
        if ( bCmdCmp == true )
    18d2:	2b00      	cmp	r3, #0
    18d4:	f47f af6b 	bne.w	17ae <am_hal_iom_i2c_read_nq+0x1aa>
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    18d8:	f8d9 3204 	ldr.w	r3, [r9, #516]	; 0x204
    18dc:	e767      	b.n	17ae <am_hal_iom_i2c_read_nq+0x1aa>
            i2cBBStatus = am_hal_i2c_bit_bang_receive((ui32BusAddress << 1) | 1, ui32NumBytes,
    18de:	0049      	lsls	r1, r1, #1
    18e0:	f041 0701 	orr.w	r7, r1, #1
    18e4:	4631      	mov	r1, r6
    18e6:	9e10      	ldr	r6, [sp, #64]	; 0x40
    18e8:	f3c5 7400 	ubfx	r4, r5, #28, #1
    18ec:	2301      	movs	r3, #1
    18ee:	e88d 0018 	stmia.w	sp, {r3, r4}
    18f2:	b2f8      	uxtb	r0, r7
    18f4:	f3c6 2307 	ubfx	r3, r6, #8, #8
    18f8:	f000 fd44 	bl	2384 <am_hal_i2c_bit_bang_receive>
    18fc:	e6bc      	b.n	1678 <am_hal_iom_i2c_read_nq+0x74>
        AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    18fe:	9a04      	ldr	r2, [sp, #16]
        AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    1900:	f8c9 a208 	str.w	sl, [r9, #520]	; 0x208
        g_iom_error_status[ui32Module] = ui32Status = ui32Status;
    1904:	f808 0004 	strb.w	r0, [r8, r4]
        AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    1908:	f8c9 2200 	str.w	r2, [r9, #512]	; 0x200
    190c:	e680      	b.n	1610 <am_hal_iom_i2c_read_nq+0xc>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    190e:	f8d9 2100 	ldr.w	r2, [r9, #256]	; 0x100
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    1912:	b2d0      	uxtb	r0, r2
    1914:	42b0      	cmp	r0, r6
    1916:	f4bf af6c 	bcs.w	17f2 <am_hal_iom_i2c_read_nq+0x1ee>
    191a:	4a07      	ldr	r2, [pc, #28]	; (1938 <am_hal_iom_i2c_read_nq+0x334>)
    191c:	4807      	ldr	r0, [pc, #28]	; (193c <am_hal_iom_i2c_read_nq+0x338>)
    191e:	9303      	str	r3, [sp, #12]
    1920:	f44f 6178 	mov.w	r1, #3968	; 0xf80
    1924:	f7fe ffd2 	bl	8cc <am_hal_debug_error>
    1928:	9b03      	ldr	r3, [sp, #12]
    192a:	e762      	b.n	17f2 <am_hal_iom_i2c_read_nq+0x1ee>
    192c:	10001004 	.word	0x10001004
    1930:	0000507c 	.word	0x0000507c
    1934:	10001338 	.word	0x10001338
    1938:	00005010 	.word	0x00005010
    193c:	00004ffc 	.word	0x00004ffc
    1940:	1000100c 	.word	0x1000100c
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    1944:	f8da 0000 	ldr.w	r0, [sl]
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    1948:	b2c1      	uxtb	r1, r0
    194a:	428a      	cmp	r2, r1
    194c:	f67f aecd 	bls.w	16ea <am_hal_iom_i2c_read_nq+0xe6>
    1950:	4a0e      	ldr	r2, [pc, #56]	; (198c <am_hal_iom_i2c_read_nq+0x388>)
    1952:	480f      	ldr	r0, [pc, #60]	; (1990 <am_hal_iom_i2c_read_nq+0x38c>)
    1954:	9305      	str	r3, [sp, #20]
    1956:	f44f 6178 	mov.w	r1, #3968	; 0xf80
    195a:	f7fe ffb7 	bl	8cc <am_hal_debug_error>
    195e:	9b05      	ldr	r3, [sp, #20]
    1960:	e6c3      	b.n	16ea <am_hal_iom_i2c_read_nq+0xe6>
        return AM_REGn(IOMSTR, ui32Module, INTSTAT);
    1962:	f8d9 3204 	ldr.w	r3, [r9, #516]	; 0x204
    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    1966:	f013 0fcc 	tst.w	r3, #204	; 0xcc
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
    196a:	bf18      	it	ne
    196c:	2505      	movne	r5, #5
    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    196e:	d002      	beq.n	1976 <am_hal_iom_i2c_read_nq+0x372>
        g_iom_error_status[ui32Module] = ui32Status = internal_iom_get_int_err(ui32Module, 0);
    1970:	f808 5004 	strb.w	r5, [r8, r4]
    1974:	e729      	b.n	17ca <am_hal_iom_i2c_read_nq+0x1c6>
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
    1976:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    197a:	d104      	bne.n	1986 <am_hal_iom_i2c_read_nq+0x382>
        ui32Status = AM_HAL_IOM_ERR_I2C_NAK;
    197c:	f013 0f10 	tst.w	r3, #16
    1980:	bf18      	it	ne
    1982:	2506      	movne	r5, #6
    1984:	e7f4      	b.n	1970 <am_hal_iom_i2c_read_nq+0x36c>
        ui32Status = AM_HAL_IOM_ERR_I2C_ARB;
    1986:	2507      	movs	r5, #7
    1988:	e7f2      	b.n	1970 <am_hal_iom_i2c_read_nq+0x36c>
    198a:	bf00      	nop
    198c:	00005010 	.word	0x00005010
    1990:	00004ffc 	.word	0x00004ffc

00001994 <am_hal_iom_i2c_write>:
{
    1994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ( ui32Module > AM_REG_IOMSTR_NUM_MODULES )
    1998:	2806      	cmp	r0, #6
{
    199a:	b08d      	sub	sp, #52	; 0x34
    if ( ui32Module > AM_REG_IOMSTR_NUM_MODULES )
    199c:	d904      	bls.n	19a8 <am_hal_iom_i2c_write+0x14>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    199e:	2602      	movs	r6, #2
}
    19a0:	4630      	mov	r0, r6
    19a2:	b00d      	add	sp, #52	; 0x34
    19a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19a8:	461e      	mov	r6, r3
    19aa:	4605      	mov	r5, r0
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    19ac:	d014      	beq.n	19d8 <am_hal_iom_i2c_write+0x44>
    19ae:	4f49      	ldr	r7, [pc, #292]	; (1ad4 <am_hal_iom_i2c_write+0x140>)
    19b0:	4690      	mov	r8, r2
    while ( g_bIomBusy[ui32Module] );
    19b2:	5d7c      	ldrb	r4, [r7, r5]
    19b4:	f004 03ff 	and.w	r3, r4, #255	; 0xff
    19b8:	2c00      	cmp	r4, #0
    19ba:	d1fa      	bne.n	19b2 <am_hal_iom_i2c_write+0x1e>
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    19bc:	f8df 9124 	ldr.w	r9, [pc, #292]	; 1ae4 <am_hal_iom_i2c_write+0x150>
    19c0:	f809 3005 	strb.w	r3, [r9, r5]
    if (ui32NumBytes == 0)
    19c4:	b10e      	cbz	r6, 19ca <am_hal_iom_i2c_write+0x36>
    if (ui32NumBytes >= 256)
    19c6:	2eff      	cmp	r6, #255	; 0xff
    19c8:	d91f      	bls.n	1a0a <am_hal_iom_i2c_write+0x76>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    19ca:	2603      	movs	r6, #3
}
    19cc:	4630      	mov	r0, r6
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    19ce:	f809 6005 	strb.w	r6, [r9, r5]
}
    19d2:	b00d      	add	sp, #52	; 0x34
    19d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    19d8:	f8df 9108 	ldr.w	r9, [pc, #264]	; 1ae4 <am_hal_iom_i2c_write+0x150>
    19dc:	2300      	movs	r3, #0
    19de:	f889 3006 	strb.w	r3, [r9, #6]
    if (ui32NumBytes == 0)
    19e2:	2e00      	cmp	r6, #0
    19e4:	d0f1      	beq.n	19ca <am_hal_iom_i2c_write+0x36>
        if ( ui32Options & AM_HAL_IOM_RAW )
    19e6:	9d16      	ldr	r5, [sp, #88]	; 0x58
    19e8:	006c      	lsls	r4, r5, #1
    19ea:	d55a      	bpl.n	1aa2 <am_hal_iom_i2c_write+0x10e>
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    19ec:	004f      	lsls	r7, r1, #1
    19ee:	f3c5 7400 	ubfx	r4, r5, #28, #1
    19f2:	f007 00fe 	and.w	r0, r7, #254	; 0xfe
    19f6:	9300      	str	r3, [sp, #0]
    19f8:	4631      	mov	r1, r6
    19fa:	9401      	str	r4, [sp, #4]
    19fc:	f001 f914 	bl	2c28 <am_hal_i2c_bit_bang_send>
        g_iom_error_status[ui32Module] = ui32Status = i2c_bb_errmap[i2cBBStatus];
    1a00:	4a35      	ldr	r2, [pc, #212]	; (1ad8 <am_hal_iom_i2c_write+0x144>)
    1a02:	5c16      	ldrb	r6, [r2, r0]
    1a04:	f889 6006 	strb.w	r6, [r9, #6]
        return ui32Status;
    1a08:	e7ca      	b.n	19a0 <am_hal_iom_i2c_write+0xc>
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
    1a0a:	4834      	ldr	r0, [pc, #208]	; (1adc <am_hal_iom_i2c_write+0x148>)
    1a0c:	9002      	str	r0, [sp, #8]
    1a0e:	ea4f 0b45 	mov.w	fp, r5, lsl #1
    1a12:	eb0b 0205 	add.w	r2, fp, r5
    1a16:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
    1a1a:	6963      	ldr	r3, [r4, #20]
    1a1c:	2b00      	cmp	r3, #0
    1a1e:	d04f      	beq.n	1ac0 <am_hal_iom_i2c_write+0x12c>
    1a20:	9103      	str	r1, [sp, #12]
    ui32Critical = am_hal_interrupt_master_disable();
    1a22:	f7ff f839 	bl	a98 <am_hal_interrupt_master_disable>
    1a26:	4682      	mov	sl, r0
    if ( (g_bIomBusy[ui32Module] == false) &&
    1a28:	5d78      	ldrb	r0, [r7, r5]
    1a2a:	9903      	ldr	r1, [sp, #12]
    1a2c:	9b02      	ldr	r3, [sp, #8]
    1a2e:	b908      	cbnz	r0, 1a34 <am_hal_iom_i2c_write+0xa0>
    1a30:	68a2      	ldr	r2, [r4, #8]
    1a32:	b1d2      	cbz	r2, 1a6a <am_hal_iom_i2c_write+0xd6>
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    1a34:	eb0b 0405 	add.w	r4, fp, r5
    1a38:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_I2C_WRITE;
    1a3c:	2702      	movs	r7, #2
        sIOMTransaction.pfnCallback = pfnCallback;
    1a3e:	2300      	movs	r3, #0
        sIOMTransaction.ui32ChipSelect = ui32BusAddress;
    1a40:	9107      	str	r1, [sp, #28]
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
    1a42:	9609      	str	r6, [sp, #36]	; 0x24
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    1a44:	2201      	movs	r2, #1
        sIOMTransaction.ui32Options = ui32Options;
    1a46:	9e16      	ldr	r6, [sp, #88]	; 0x58
        sIOMTransaction.ui32Module = ui32Module;
    1a48:	9506      	str	r5, [sp, #24]
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    1a4a:	a905      	add	r1, sp, #20
        sIOMTransaction.pui32Data = pui32Data;
    1a4c:	f8cd 8020 	str.w	r8, [sp, #32]
        sIOMTransaction.ui32Options = ui32Options;
    1a50:	960a      	str	r6, [sp, #40]	; 0x28
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_I2C_WRITE;
    1a52:	9705      	str	r7, [sp, #20]
        sIOMTransaction.pfnCallback = pfnCallback;
    1a54:	930b      	str	r3, [sp, #44]	; 0x2c
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    1a56:	f000 fac5 	bl	1fe4 <am_hal_queue_item_add>
    1a5a:	b9c0      	cbnz	r0, 1a8e <am_hal_iom_i2c_write+0xfa>
            ui32Status = AM_HAL_IOM_ERR_RESOURCE_ERR;
    1a5c:	2608      	movs	r6, #8
    am_hal_interrupt_master_set(ui32Critical);
    1a5e:	4650      	mov	r0, sl
        g_iom_error_status[ui32Module] = ui32Status;
    1a60:	f809 6005 	strb.w	r6, [r9, r5]
    am_hal_interrupt_master_set(ui32Critical);
    1a64:	f7ff f81c 	bl	aa0 <am_hal_interrupt_master_set>
    1a68:	e79a      	b.n	19a0 <am_hal_iom_i2c_write+0xc>
    while ( g_bIomBusy[ui32Module] );
    1a6a:	5d78      	ldrb	r0, [r7, r5]
    1a6c:	f000 04ff 	and.w	r4, r0, #255	; 0xff
    1a70:	2800      	cmp	r0, #0
    1a72:	d1fa      	bne.n	1a6a <am_hal_iom_i2c_write+0xd6>
    1a74:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1a76:	9200      	str	r2, [sp, #0]
    1a78:	4633      	mov	r3, r6
    1a7a:	9401      	str	r4, [sp, #4]
    1a7c:	4642      	mov	r2, r8
    1a7e:	4628      	mov	r0, r5
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    1a80:	f809 4005 	strb.w	r4, [r9, r5]
    1a84:	f7ff f9a0 	bl	dc8 <am_hal_iom_i2c_write_nb.part.8>
    if (ui32Status != AM_HAL_IOM_SUCCESS)
    1a88:	4606      	mov	r6, r0
    1a8a:	2800      	cmp	r0, #0
    1a8c:	d1e7      	bne.n	1a5e <am_hal_iom_i2c_write+0xca>
    am_hal_interrupt_master_set(ui32Critical);
    1a8e:	4650      	mov	r0, sl
    1a90:	f7ff f806 	bl	aa0 <am_hal_interrupt_master_set>
            am_hal_iom_queue_flush(ui32Module);
    1a94:	4912      	ldr	r1, [pc, #72]	; (1ae0 <am_hal_iom_i2c_write+0x14c>)
    1a96:	4628      	mov	r0, r5
    1a98:	680f      	ldr	r7, [r1, #0]
    1a9a:	47b8      	blx	r7
            ui32Status = g_iom_error_status[ui32Module];
    1a9c:	f819 6005 	ldrb.w	r6, [r9, r5]
    1aa0:	e77e      	b.n	19a0 <am_hal_iom_i2c_write+0xc>
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    1aa2:	f3c5 7400 	ubfx	r4, r5, #28, #1
    1aa6:	2301      	movs	r3, #1
    1aa8:	e88d 0018 	stmia.w	sp, {r3, r4}
    1aac:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1aae:	0049      	lsls	r1, r1, #1
    1ab0:	f001 00fe 	and.w	r0, r1, #254	; 0xfe
    1ab4:	f3c3 2307 	ubfx	r3, r3, #8, #8
    1ab8:	4631      	mov	r1, r6
    1aba:	f001 f8b5 	bl	2c28 <am_hal_i2c_bit_bang_send>
    1abe:	e79f      	b.n	1a00 <am_hal_iom_i2c_write+0x6c>
        ui32Status = am_hal_iom_i2c_write_nq(ui32Module, ui32BusAddress, pui32Data,
    1ac0:	9f16      	ldr	r7, [sp, #88]	; 0x58
    1ac2:	9700      	str	r7, [sp, #0]
    1ac4:	4633      	mov	r3, r6
    1ac6:	4642      	mov	r2, r8
    1ac8:	4628      	mov	r0, r5
    1aca:	f7ff fbc7 	bl	125c <am_hal_iom_i2c_write_nq>
    1ace:	4606      	mov	r6, r0
    1ad0:	e766      	b.n	19a0 <am_hal_iom_i2c_write+0xc>
    1ad2:	bf00      	nop
    1ad4:	10001004 	.word	0x10001004
    1ad8:	0000507c 	.word	0x0000507c
    1adc:	100013c8 	.word	0x100013c8
    1ae0:	10001000 	.word	0x10001000
    1ae4:	1000100c 	.word	0x1000100c

00001ae8 <am_hal_iom_i2c_read>:
{
    1ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ( ui32Module > AM_REG_IOMSTR_NUM_MODULES )
    1aec:	2806      	cmp	r0, #6
{
    1aee:	b08d      	sub	sp, #52	; 0x34
    if ( ui32Module > AM_REG_IOMSTR_NUM_MODULES )
    1af0:	d904      	bls.n	1afc <am_hal_iom_i2c_read+0x14>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    1af2:	2602      	movs	r6, #2
}
    1af4:	4630      	mov	r0, r6
    1af6:	b00d      	add	sp, #52	; 0x34
    1af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1afc:	461e      	mov	r6, r3
    1afe:	4605      	mov	r5, r0
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    1b00:	d014      	beq.n	1b2c <am_hal_iom_i2c_read+0x44>
    1b02:	4f4b      	ldr	r7, [pc, #300]	; (1c30 <am_hal_iom_i2c_read+0x148>)
    1b04:	4690      	mov	r8, r2
    while ( g_bIomBusy[ui32Module] );
    1b06:	5d7c      	ldrb	r4, [r7, r5]
    1b08:	f004 03ff 	and.w	r3, r4, #255	; 0xff
    1b0c:	2c00      	cmp	r4, #0
    1b0e:	d1fa      	bne.n	1b06 <am_hal_iom_i2c_read+0x1e>
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    1b10:	f8df 912c 	ldr.w	r9, [pc, #300]	; 1c40 <am_hal_iom_i2c_read+0x158>
    1b14:	f809 3005 	strb.w	r3, [r9, r5]
    if (ui32NumBytes == 0)
    1b18:	b10e      	cbz	r6, 1b1e <am_hal_iom_i2c_read+0x36>
    if (ui32NumBytes >= 256)
    1b1a:	2eff      	cmp	r6, #255	; 0xff
    1b1c:	d921      	bls.n	1b62 <am_hal_iom_i2c_read+0x7a>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    1b1e:	2603      	movs	r6, #3
}
    1b20:	4630      	mov	r0, r6
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    1b22:	f809 6005 	strb.w	r6, [r9, r5]
}
    1b26:	b00d      	add	sp, #52	; 0x34
    1b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    1b2c:	f8df 9110 	ldr.w	r9, [pc, #272]	; 1c40 <am_hal_iom_i2c_read+0x158>
    1b30:	2300      	movs	r3, #0
    1b32:	f889 3006 	strb.w	r3, [r9, #6]
    if (ui32NumBytes == 0)
    1b36:	2e00      	cmp	r6, #0
    1b38:	d0f1      	beq.n	1b1e <am_hal_iom_i2c_read+0x36>
        if ( ui32Options & AM_HAL_IOM_RAW )
    1b3a:	9d16      	ldr	r5, [sp, #88]	; 0x58
    1b3c:	006c      	lsls	r4, r5, #1
    1b3e:	d55c      	bpl.n	1bfa <am_hal_iom_i2c_read+0x112>
            i2cBBStatus = am_hal_i2c_bit_bang_receive((ui32BusAddress << 1) | 1, ui32NumBytes,
    1b40:	0048      	lsls	r0, r1, #1
    1b42:	9916      	ldr	r1, [sp, #88]	; 0x58
    1b44:	9300      	str	r3, [sp, #0]
    1b46:	f3c1 7500 	ubfx	r5, r1, #28, #1
    1b4a:	f040 0701 	orr.w	r7, r0, #1
    1b4e:	b2f8      	uxtb	r0, r7
    1b50:	4631      	mov	r1, r6
    1b52:	9501      	str	r5, [sp, #4]
    1b54:	f000 fc16 	bl	2384 <am_hal_i2c_bit_bang_receive>
        g_iom_error_status[ui32Module] = ui32Status = i2c_bb_errmap[i2cBBStatus];
    1b58:	4a36      	ldr	r2, [pc, #216]	; (1c34 <am_hal_iom_i2c_read+0x14c>)
    1b5a:	5c16      	ldrb	r6, [r2, r0]
    1b5c:	f889 6006 	strb.w	r6, [r9, #6]
        return ui32Status;
    1b60:	e7c8      	b.n	1af4 <am_hal_iom_i2c_read+0xc>
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
    1b62:	4835      	ldr	r0, [pc, #212]	; (1c38 <am_hal_iom_i2c_read+0x150>)
    1b64:	9002      	str	r0, [sp, #8]
    1b66:	ea4f 0b45 	mov.w	fp, r5, lsl #1
    1b6a:	eb0b 0205 	add.w	r2, fp, r5
    1b6e:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
    1b72:	6963      	ldr	r3, [r4, #20]
    1b74:	2b00      	cmp	r3, #0
    1b76:	d051      	beq.n	1c1c <am_hal_iom_i2c_read+0x134>
    1b78:	9103      	str	r1, [sp, #12]
    ui32Critical = am_hal_interrupt_master_disable();
    1b7a:	f7fe ff8d 	bl	a98 <am_hal_interrupt_master_disable>
    1b7e:	4682      	mov	sl, r0
    if ( (g_bIomBusy[ui32Module] == false) &&
    1b80:	5d78      	ldrb	r0, [r7, r5]
    1b82:	9903      	ldr	r1, [sp, #12]
    1b84:	9b02      	ldr	r3, [sp, #8]
    1b86:	b908      	cbnz	r0, 1b8c <am_hal_iom_i2c_read+0xa4>
    1b88:	68a2      	ldr	r2, [r4, #8]
    1b8a:	b1d2      	cbz	r2, 1bc2 <am_hal_iom_i2c_read+0xda>
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    1b8c:	eb0b 0405 	add.w	r4, fp, r5
    1b90:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_I2C_READ;
    1b94:	2703      	movs	r7, #3
        sIOMTransaction.pfnCallback = pfnCallback;
    1b96:	2300      	movs	r3, #0
        sIOMTransaction.ui32ChipSelect = ui32BusAddress;
    1b98:	9107      	str	r1, [sp, #28]
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
    1b9a:	9609      	str	r6, [sp, #36]	; 0x24
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    1b9c:	2201      	movs	r2, #1
        sIOMTransaction.ui32Options = ui32Options;
    1b9e:	9e16      	ldr	r6, [sp, #88]	; 0x58
        sIOMTransaction.ui32Module = ui32Module;
    1ba0:	9506      	str	r5, [sp, #24]
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    1ba2:	a905      	add	r1, sp, #20
        sIOMTransaction.pui32Data = pui32Data;
    1ba4:	f8cd 8020 	str.w	r8, [sp, #32]
        sIOMTransaction.ui32Options = ui32Options;
    1ba8:	960a      	str	r6, [sp, #40]	; 0x28
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_I2C_READ;
    1baa:	9705      	str	r7, [sp, #20]
        sIOMTransaction.pfnCallback = pfnCallback;
    1bac:	930b      	str	r3, [sp, #44]	; 0x2c
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    1bae:	f000 fa19 	bl	1fe4 <am_hal_queue_item_add>
    1bb2:	b9c0      	cbnz	r0, 1be6 <am_hal_iom_i2c_read+0xfe>
            ui32Status = AM_HAL_IOM_ERR_RESOURCE_ERR;
    1bb4:	2608      	movs	r6, #8
    am_hal_interrupt_master_set(ui32Critical);
    1bb6:	4650      	mov	r0, sl
        g_iom_error_status[ui32Module] = ui32Status;
    1bb8:	f809 6005 	strb.w	r6, [r9, r5]
    am_hal_interrupt_master_set(ui32Critical);
    1bbc:	f7fe ff70 	bl	aa0 <am_hal_interrupt_master_set>
    1bc0:	e798      	b.n	1af4 <am_hal_iom_i2c_read+0xc>
    while ( g_bIomBusy[ui32Module] );
    1bc2:	5d78      	ldrb	r0, [r7, r5]
    1bc4:	f000 04ff 	and.w	r4, r0, #255	; 0xff
    1bc8:	2800      	cmp	r0, #0
    1bca:	d1fa      	bne.n	1bc2 <am_hal_iom_i2c_read+0xda>
    1bcc:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1bce:	9200      	str	r2, [sp, #0]
    1bd0:	4633      	mov	r3, r6
    1bd2:	9401      	str	r4, [sp, #4]
    1bd4:	4642      	mov	r2, r8
    1bd6:	4628      	mov	r0, r5
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    1bd8:	f809 4005 	strb.w	r4, [r9, r5]
    1bdc:	f7ff f88c 	bl	cf8 <am_hal_iom_i2c_read_nb.part.9>
    if (ui32Status != AM_HAL_IOM_SUCCESS)
    1be0:	4606      	mov	r6, r0
    1be2:	2800      	cmp	r0, #0
    1be4:	d1e7      	bne.n	1bb6 <am_hal_iom_i2c_read+0xce>
    am_hal_interrupt_master_set(ui32Critical);
    1be6:	4650      	mov	r0, sl
    1be8:	f7fe ff5a 	bl	aa0 <am_hal_interrupt_master_set>
            am_hal_iom_queue_flush(ui32Module);
    1bec:	4913      	ldr	r1, [pc, #76]	; (1c3c <am_hal_iom_i2c_read+0x154>)
    1bee:	4628      	mov	r0, r5
    1bf0:	680f      	ldr	r7, [r1, #0]
    1bf2:	47b8      	blx	r7
            ui32Status = g_iom_error_status[ui32Module];
    1bf4:	f819 6005 	ldrb.w	r6, [r9, r5]
    1bf8:	e77c      	b.n	1af4 <am_hal_iom_i2c_read+0xc>
            i2cBBStatus = am_hal_i2c_bit_bang_receive((ui32BusAddress << 1) | 1, ui32NumBytes,
    1bfa:	004b      	lsls	r3, r1, #1
    1bfc:	f043 0e01 	orr.w	lr, r3, #1
    1c00:	f3c5 7400 	ubfx	r4, r5, #28, #1
    1c04:	2301      	movs	r3, #1
    1c06:	e88d 0018 	stmia.w	sp, {r3, r4}
    1c0a:	9c16      	ldr	r4, [sp, #88]	; 0x58
    1c0c:	fa5f f08e 	uxtb.w	r0, lr
    1c10:	4631      	mov	r1, r6
    1c12:	f3c4 2307 	ubfx	r3, r4, #8, #8
    1c16:	f000 fbb5 	bl	2384 <am_hal_i2c_bit_bang_receive>
    1c1a:	e79d      	b.n	1b58 <am_hal_iom_i2c_read+0x70>
        ui32Status = am_hal_iom_i2c_read_nq(ui32Module, ui32BusAddress, pui32Data,
    1c1c:	9f16      	ldr	r7, [sp, #88]	; 0x58
    1c1e:	9700      	str	r7, [sp, #0]
    1c20:	4633      	mov	r3, r6
    1c22:	4642      	mov	r2, r8
    1c24:	4628      	mov	r0, r5
    1c26:	f7ff fced 	bl	1604 <am_hal_iom_i2c_read_nq>
    1c2a:	4606      	mov	r6, r0
    1c2c:	e762      	b.n	1af4 <am_hal_iom_i2c_read+0xc>
    1c2e:	bf00      	nop
    1c30:	10001004 	.word	0x10001004
    1c34:	0000507c 	.word	0x0000507c
    1c38:	100013c8 	.word	0x100013c8
    1c3c:	10001000 	.word	0x10001000
    1c40:	1000100c 	.word	0x1000100c

00001c44 <am_hal_iom_int_clear>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    1c44:	2805      	cmp	r0, #5
    1c46:	d805      	bhi.n	1c54 <am_hal_iom_int_clear+0x10>
    AM_REGn(IOMSTR, ui32Module, INTCLR) = ui32Interrupt;
    1c48:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
    1c4c:	3004      	adds	r0, #4
    1c4e:	0302      	lsls	r2, r0, #12
    1c50:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <am_hal_pwrctrl_periph_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    1c58:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1c5a:	4604      	mov	r4, r0
{
    1c5c:	b082      	sub	sp, #8
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1c5e:	b1b8      	cbz	r0, 1c90 <am_hal_pwrctrl_periph_enable+0x38>
    1c60:	1e43      	subs	r3, r0, #1
    1c62:	4203      	tst	r3, r0
    1c64:	d114      	bne.n	1c90 <am_hal_pwrctrl_periph_enable+0x38>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1c66:	f7fe ff17 	bl	a98 <am_hal_interrupt_master_disable>

    //
    // Enable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    1c6a:	4a18      	ldr	r2, [pc, #96]	; (1ccc <am_hal_pwrctrl_periph_enable+0x74>)
    AM_CRITICAL_BEGIN_ASM
    1c6c:	9001      	str	r0, [sp, #4]
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    1c6e:	6810      	ldr	r0, [r2, #0]
    1c70:	4320      	orrs	r0, r4
    1c72:	6010      	str	r0, [r2, #0]

    //
    // End Critical Section.
    //
    AM_CRITICAL_END_ASM
    1c74:	9801      	ldr	r0, [sp, #4]
    1c76:	f7fe ff13 	bl	aa0 <am_hal_interrupt_master_set>

    //
    // Wait for the power to stablize.  Using a simple delay loop is more
    // power efficient than a polling loop.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);
    1c7a:	200e      	movs	r0, #14
    1c7c:	f7fe fe28 	bl	8d0 <am_hal_flash_delay>

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    1c80:	f014 0f0e 	tst.w	r4, #14
    1c84:	d10a      	bne.n	1c9c <am_hal_pwrctrl_periph_enable+0x44>
    1c86:	f014 0f70 	tst.w	r4, #112	; 0x70
    1c8a:	d00e      	beq.n	1caa <am_hal_pwrctrl_periph_enable+0x52>
    1c8c:	2408      	movs	r4, #8
    1c8e:	e006      	b.n	1c9e <am_hal_pwrctrl_periph_enable+0x46>
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1c90:	4a0f      	ldr	r2, [pc, #60]	; (1cd0 <am_hal_pwrctrl_periph_enable+0x78>)
    1c92:	4810      	ldr	r0, [pc, #64]	; (1cd4 <am_hal_pwrctrl_periph_enable+0x7c>)
    1c94:	2160      	movs	r1, #96	; 0x60
    1c96:	f7fe fe19 	bl	8cc <am_hal_debug_error>
    1c9a:	e7e4      	b.n	1c66 <am_hal_pwrctrl_periph_enable+0xe>
    POLL_PWRSTATUS(ui32Peripheral);
    1c9c:	2404      	movs	r4, #4
    1c9e:	4a0e      	ldr	r2, [pc, #56]	; (1cd8 <am_hal_pwrctrl_periph_enable+0x80>)
    1ca0:	6813      	ldr	r3, [r2, #0]
    1ca2:	421c      	tst	r4, r3
    1ca4:	d0fc      	beq.n	1ca0 <am_hal_pwrctrl_periph_enable+0x48>
}
    1ca6:	b002      	add	sp, #8
    1ca8:	bd10      	pop	{r4, pc}
    POLL_PWRSTATUS(ui32Peripheral);
    1caa:	f240 1181 	movw	r1, #385	; 0x181
    1cae:	420c      	tst	r4, r1
    1cb0:	d108      	bne.n	1cc4 <am_hal_pwrctrl_periph_enable+0x6c>
    1cb2:	05a3      	lsls	r3, r4, #22
    1cb4:	d408      	bmi.n	1cc8 <am_hal_pwrctrl_periph_enable+0x70>
    1cb6:	f414 6f80 	tst.w	r4, #1024	; 0x400
    1cba:	bf14      	ite	ne
    1cbc:	2410      	movne	r4, #16
    1cbe:	f04f 34ff 	moveq.w	r4, #4294967295
    1cc2:	e7ec      	b.n	1c9e <am_hal_pwrctrl_periph_enable+0x46>
    1cc4:	2402      	movs	r4, #2
    1cc6:	e7ea      	b.n	1c9e <am_hal_pwrctrl_periph_enable+0x46>
    1cc8:	2480      	movs	r4, #128	; 0x80
    1cca:	e7e8      	b.n	1c9e <am_hal_pwrctrl_periph_enable+0x46>
    1ccc:	40021008 	.word	0x40021008
    1cd0:	00005084 	.word	0x00005084
    1cd4:	000050b8 	.word	0x000050b8
    1cd8:	40021014 	.word	0x40021014

00001cdc <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1cdc:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
{
    1ce0:	b430      	push	{r4, r5}
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1ce2:	d03a      	beq.n	1d5a <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    1ce4:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    1ce8:	f000 809d 	beq.w	1e26 <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    1cec:	2801      	cmp	r0, #1
    1cee:	f000 809d 	beq.w	1e2c <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    1cf2:	2803      	cmp	r0, #3
    1cf4:	f000 80a6 	beq.w	1e44 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    1cf8:	2807      	cmp	r0, #7
    1cfa:	f000 809c 	beq.w	1e36 <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    1cfe:	280f      	cmp	r0, #15
    1d00:	f000 80a5 	beq.w	1e4e <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    1d04:	281f      	cmp	r0, #31
    1d06:	f000 80b0 	beq.w	1e6a <am_hal_pwrctrl_memory_enable+0x18e>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    1d0a:	283f      	cmp	r0, #63	; 0x3f
    1d0c:	f000 80b4 	beq.w	1e78 <am_hal_pwrctrl_memory_enable+0x19c>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    1d10:	287f      	cmp	r0, #127	; 0x7f
    1d12:	f000 80b8 	beq.w	1e86 <am_hal_pwrctrl_memory_enable+0x1aa>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    1d16:	28ff      	cmp	r0, #255	; 0xff
    1d18:	f000 80a0 	beq.w	1e5c <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    1d1c:	f240 13ff 	movw	r3, #511	; 0x1ff
    1d20:	4298      	cmp	r0, r3
    1d22:	f000 80b7 	beq.w	1e94 <am_hal_pwrctrl_memory_enable+0x1b8>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    1d26:	f240 31ff 	movw	r1, #1023	; 0x3ff
    1d2a:	4288      	cmp	r0, r1
    1d2c:	f000 80b8 	beq.w	1ea0 <am_hal_pwrctrl_memory_enable+0x1c4>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    1d30:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1d34:	4290      	cmp	r0, r2
    1d36:	d00e      	beq.n	1d56 <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    1d38:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    1d3c:	f000 80b6 	beq.w	1eac <am_hal_pwrctrl_memory_enable+0x1d0>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    1d40:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    1d44:	42a0      	cmp	r0, r4
    1d46:	f000 80b4 	beq.w	1eb2 <am_hal_pwrctrl_memory_enable+0x1d6>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    1d4a:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    1d4e:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    1d52:	4560      	cmp	r0, ip
    1d54:	d132      	bne.n	1dbc <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    1d56:	495b      	ldr	r1, [pc, #364]	; (1ec4 <am_hal_pwrctrl_memory_enable+0x1e8>)
    1d58:	e066      	b.n	1e28 <am_hal_pwrctrl_memory_enable+0x14c>
    1d5a:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    1d5e:	2340      	movs	r3, #64	; 0x40
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    1d60:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1d62:	4c59      	ldr	r4, [pc, #356]	; (1ec8 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1d64:	6825      	ldr	r5, [r4, #0]
    1d66:	402a      	ands	r2, r5
    1d68:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    1d6a:	4a57      	ldr	r2, [pc, #348]	; (1ec8 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1d6c:	6814      	ldr	r4, [r2, #0]
    1d6e:	4320      	orrs	r0, r4
    1d70:	6010      	str	r0, [r2, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    1d72:	2b00      	cmp	r3, #0
    1d74:	d029      	beq.n	1dca <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d76:	4d55      	ldr	r5, [pc, #340]	; (1ecc <am_hal_pwrctrl_memory_enable+0x1f0>)
    1d78:	6828      	ldr	r0, [r5, #0]
        while ( --i32TOcnt              &&
    1d7a:	4218      	tst	r0, r3
    1d7c:	bf18      	it	ne
    1d7e:	20c6      	movne	r0, #198	; 0xc6
    1d80:	d01f      	beq.n	1dc2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d82:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1d84:	421a      	tst	r2, r3
    1d86:	d01c      	beq.n	1dc2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d88:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1d8a:	421c      	tst	r4, r3
    1d8c:	d019      	beq.n	1dc2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d8e:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1d90:	421a      	tst	r2, r3
    1d92:	d016      	beq.n	1dc2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d94:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1d96:	421c      	tst	r4, r3
    1d98:	d013      	beq.n	1dc2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d9a:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1d9c:	421a      	tst	r2, r3
    1d9e:	d010      	beq.n	1dc2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1da0:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1da2:	421c      	tst	r4, r3
    1da4:	d00d      	beq.n	1dc2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1da6:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1da8:	421a      	tst	r2, r3
    1daa:	d00a      	beq.n	1dc2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1dac:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1dae:	421c      	tst	r4, r3
    1db0:	d007      	beq.n	1dc2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1db2:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1db4:	421a      	tst	r2, r3
    1db6:	d004      	beq.n	1dc2 <am_hal_pwrctrl_memory_enable+0xe6>
    1db8:	3809      	subs	r0, #9
    1dba:	d1e2      	bne.n	1d82 <am_hal_pwrctrl_memory_enable+0xa6>
        return false;
    1dbc:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    1dbe:	bc30      	pop	{r4, r5}
    1dc0:	4770      	bx	lr
    if ( ui32PwrStatEnMask )
    1dc2:	b911      	cbnz	r1, 1dca <am_hal_pwrctrl_memory_enable+0xee>
    return true;
    1dc4:	2001      	movs	r0, #1
}
    1dc6:	bc30      	pop	{r4, r5}
    1dc8:	4770      	bx	lr
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1dca:	4b40      	ldr	r3, [pc, #256]	; (1ecc <am_hal_pwrctrl_memory_enable+0x1f0>)
    1dcc:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1dce:	ea31 0405 	bics.w	r4, r1, r5
    1dd2:	bf18      	it	ne
    1dd4:	24c6      	movne	r4, #198	; 0xc6
    1dd6:	d0f5      	beq.n	1dc4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1dd8:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1dda:	ea31 0000 	bics.w	r0, r1, r0
    1dde:	d0f1      	beq.n	1dc4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1de0:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1de2:	ea31 0002 	bics.w	r0, r1, r2
    1de6:	d0ed      	beq.n	1dc4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1de8:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1dea:	ea31 0005 	bics.w	r0, r1, r5
    1dee:	d0e9      	beq.n	1dc4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1df0:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1df2:	ea31 0000 	bics.w	r0, r1, r0
    1df6:	d0e5      	beq.n	1dc4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1df8:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1dfa:	ea31 0002 	bics.w	r0, r1, r2
    1dfe:	d0e1      	beq.n	1dc4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e00:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1e02:	ea31 0005 	bics.w	r0, r1, r5
    1e06:	d0dd      	beq.n	1dc4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e08:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1e0a:	ea31 0000 	bics.w	r0, r1, r0
    1e0e:	d0d9      	beq.n	1dc4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e10:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1e12:	ea31 0002 	bics.w	r0, r1, r2
    1e16:	d0d5      	beq.n	1dc4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e18:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1e1a:	ea31 0005 	bics.w	r0, r1, r5
    1e1e:	d0d1      	beq.n	1dc4 <am_hal_pwrctrl_memory_enable+0xe8>
    1e20:	3c09      	subs	r4, #9
    1e22:	d1d9      	bne.n	1dd8 <am_hal_pwrctrl_memory_enable+0xfc>
    1e24:	e7ca      	b.n	1dbc <am_hal_pwrctrl_memory_enable+0xe0>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    1e26:	2160      	movs	r1, #96	; 0x60
{
    1e28:	2300      	movs	r3, #0
    1e2a:	e79e      	b.n	1d6a <am_hal_pwrctrl_memory_enable+0x8e>
    1e2c:	4a28      	ldr	r2, [pc, #160]	; (1ed0 <am_hal_pwrctrl_memory_enable+0x1f4>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e2e:	4b29      	ldr	r3, [pc, #164]	; (1ed4 <am_hal_pwrctrl_memory_enable+0x1f8>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    1e30:	f44f 7180 	mov.w	r1, #256	; 0x100
    1e34:	e795      	b.n	1d62 <am_hal_pwrctrl_memory_enable+0x86>
    1e36:	f46f 62ff 	mvn.w	r2, #2040	; 0x7f8
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e3a:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    1e3e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    1e42:	e78e      	b.n	1d62 <am_hal_pwrctrl_memory_enable+0x86>
    1e44:	4a24      	ldr	r2, [pc, #144]	; (1ed8 <am_hal_pwrctrl_memory_enable+0x1fc>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e46:	4b25      	ldr	r3, [pc, #148]	; (1edc <am_hal_pwrctrl_memory_enable+0x200>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    1e48:	f44f 7140 	mov.w	r1, #768	; 0x300
    1e4c:	e789      	b.n	1d62 <am_hal_pwrctrl_memory_enable+0x86>
    1e4e:	f46f 62fe 	mvn.w	r2, #2032	; 0x7f0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e52:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    1e56:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    1e5a:	e782      	b.n	1d62 <am_hal_pwrctrl_memory_enable+0x86>
    1e5c:	f46f 62e0 	mvn.w	r2, #1792	; 0x700
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e60:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    1e64:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    1e68:	e77b      	b.n	1d62 <am_hal_pwrctrl_memory_enable+0x86>
    1e6a:	f46f 62fc 	mvn.w	r2, #2016	; 0x7e0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e6e:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    1e72:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    1e76:	e774      	b.n	1d62 <am_hal_pwrctrl_memory_enable+0x86>
    1e78:	f46f 62f8 	mvn.w	r2, #1984	; 0x7c0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e7c:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    1e80:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    1e84:	e76d      	b.n	1d62 <am_hal_pwrctrl_memory_enable+0x86>
    1e86:	f46f 62f0 	mvn.w	r2, #1920	; 0x780
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e8a:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    1e8e:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    1e92:	e766      	b.n	1d62 <am_hal_pwrctrl_memory_enable+0x86>
    1e94:	f46f 62c0 	mvn.w	r2, #1536	; 0x600
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e98:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    1e9c:	4910      	ldr	r1, [pc, #64]	; (1ee0 <am_hal_pwrctrl_memory_enable+0x204>)
    1e9e:	e760      	b.n	1d62 <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    1ea0:	4910      	ldr	r1, [pc, #64]	; (1ee4 <am_hal_pwrctrl_memory_enable+0x208>)
    1ea2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1ea6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1eaa:	e75a      	b.n	1d62 <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1eac:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1eb0:	e7ba      	b.n	1e28 <am_hal_pwrctrl_memory_enable+0x14c>
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1eb2:	4805      	ldr	r0, [pc, #20]	; (1ec8 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1eb4:	6803      	ldr	r3, [r0, #0]
    1eb6:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    1eba:	6001      	str	r1, [r0, #0]
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1ebc:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
        ui32PwrStatEnMask  = 0;
    1ec0:	2100      	movs	r1, #0
    1ec2:	e758      	b.n	1d76 <am_hal_pwrctrl_memory_enable+0x9a>
    1ec4:	0007ff00 	.word	0x0007ff00
    1ec8:	40021010 	.word	0x40021010
    1ecc:	40021014 	.word	0x40021014
    1ed0:	fffff801 	.word	0xfffff801
    1ed4:	0007fe00 	.word	0x0007fe00
    1ed8:	fffff803 	.word	0xfffff803
    1edc:	0007fc00 	.word	0x0007fc00
    1ee0:	0001ff00 	.word	0x0001ff00
    1ee4:	0003ff00 	.word	0x0003ff00

00001ee8 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1ee8:	4b0f      	ldr	r3, [pc, #60]	; (1f28 <am_hal_pwrctrl_bucks_init+0x40>)
    1eea:	681a      	ldr	r2, [r3, #0]
    1eec:	0792      	lsls	r2, r2, #30
    1eee:	d502      	bpl.n	1ef6 <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1ef0:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1ef2:	07c3      	lsls	r3, r0, #31
    1ef4:	d40e      	bmi.n	1f14 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1ef6:	4b0d      	ldr	r3, [pc, #52]	; (1f2c <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1ef8:	4a0b      	ldr	r2, [pc, #44]	; (1f28 <am_hal_pwrctrl_bucks_init+0x40>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1efa:	6819      	ldr	r1, [r3, #0]
    1efc:	f041 0002 	orr.w	r0, r1, #2
    1f00:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1f02:	6819      	ldr	r1, [r3, #0]
    1f04:	f041 0001 	orr.w	r0, r1, #1
    1f08:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1f0a:	6813      	ldr	r3, [r2, #0]
    1f0c:	f003 0103 	and.w	r1, r3, #3
    1f10:	2903      	cmp	r1, #3
    1f12:	d1fa      	bne.n	1f0a <am_hal_pwrctrl_bucks_init+0x22>
    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    1f14:	4a04      	ldr	r2, [pc, #16]	; (1f28 <am_hal_pwrctrl_bucks_init+0x40>)
    1f16:	6810      	ldr	r0, [r2, #0]
    1f18:	f000 0303 	and.w	r3, r0, #3
    1f1c:	2b03      	cmp	r3, #3
    1f1e:	d1fa      	bne.n	1f16 <am_hal_pwrctrl_bucks_init+0x2e>
    am_hal_flash_delay(200 / 3);
    1f20:	2042      	movs	r0, #66	; 0x42
    1f22:	f7fe bcd5 	b.w	8d0 <am_hal_flash_delay>
    1f26:	bf00      	nop
    1f28:	40021004 	.word	0x40021004
    1f2c:	40021000 	.word	0x40021000

00001f30 <am_hal_pwrctrl_bucks_enable>:
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1f30:	4b0b      	ldr	r3, [pc, #44]	; (1f60 <am_hal_pwrctrl_bucks_enable+0x30>)
    1f32:	681a      	ldr	r2, [r3, #0]
    1f34:	0792      	lsls	r2, r2, #30
    1f36:	d502      	bpl.n	1f3e <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1f38:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1f3a:	07c3      	lsls	r3, r0, #31
    1f3c:	d40e      	bmi.n	1f5c <am_hal_pwrctrl_bucks_enable+0x2c>
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1f3e:	4b09      	ldr	r3, [pc, #36]	; (1f64 <am_hal_pwrctrl_bucks_enable+0x34>)
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1f40:	4a07      	ldr	r2, [pc, #28]	; (1f60 <am_hal_pwrctrl_bucks_enable+0x30>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1f42:	6819      	ldr	r1, [r3, #0]
    1f44:	f041 0002 	orr.w	r0, r1, #2
    1f48:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1f4a:	6819      	ldr	r1, [r3, #0]
    1f4c:	f041 0001 	orr.w	r0, r1, #1
    1f50:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1f52:	6813      	ldr	r3, [r2, #0]
    1f54:	f003 0103 	and.w	r1, r3, #3
    1f58:	2903      	cmp	r1, #3
    1f5a:	d1fa      	bne.n	1f52 <am_hal_pwrctrl_bucks_enable+0x22>
    1f5c:	4770      	bx	lr
    1f5e:	bf00      	nop
    1f60:	40021004 	.word	0x40021004
    1f64:	40021000 	.word	0x40021000

00001f68 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1f68:	4b12      	ldr	r3, [pc, #72]	; (1fb4 <am_hal_pwrctrl_bucks_disable+0x4c>)
    1f6a:	681a      	ldr	r2, [r3, #0]
    1f6c:	0792      	lsls	r2, r2, #30
    1f6e:	d402      	bmi.n	1f76 <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    1f70:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1f72:	07c3      	lsls	r3, r0, #31
    1f74:	d51c      	bpl.n	1fb0 <am_hal_pwrctrl_bucks_disable+0x48>
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1f76:	4910      	ldr	r1, [pc, #64]	; (1fb8 <am_hal_pwrctrl_bucks_disable+0x50>)
    1f78:	680b      	ldr	r3, [r1, #0]
    1f7a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1f7e:	2a20      	cmp	r2, #32
    1f80:	d00b      	beq.n	1f9a <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    1f82:	4b0e      	ldr	r3, [pc, #56]	; (1fbc <am_hal_pwrctrl_bucks_disable+0x54>)
    1f84:	681a      	ldr	r2, [r3, #0]
    1f86:	f022 0002 	bic.w	r0, r2, #2
    1f8a:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    1f8c:	6819      	ldr	r1, [r3, #0]
    1f8e:	f021 0201 	bic.w	r2, r1, #1
    1f92:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    1f94:	200a      	movs	r0, #10
    1f96:	f7fe bc9b 	b.w	8d0 <am_hal_flash_delay>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_PWRADC_EN) )
    1f9a:	4809      	ldr	r0, [pc, #36]	; (1fc0 <am_hal_pwrctrl_bucks_disable+0x58>)
    1f9c:	6801      	ldr	r1, [r0, #0]
    if ( isRev_ADC()  &&
    1f9e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1fa2:	d1ee      	bne.n	1f82 <am_hal_pwrctrl_bucks_disable+0x1a>
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    1fa4:	4805      	ldr	r0, [pc, #20]	; (1fbc <am_hal_pwrctrl_bucks_disable+0x54>)
    1fa6:	6803      	ldr	r3, [r0, #0]
    1fa8:	f003 0105 	and.w	r1, r3, #5
    1fac:	6001      	str	r1, [r0, #0]
    1fae:	e7f1      	b.n	1f94 <am_hal_pwrctrl_bucks_disable+0x2c>
    1fb0:	4770      	bx	lr
    1fb2:	bf00      	nop
    1fb4:	40021004 	.word	0x40021004
    1fb8:	4002000c 	.word	0x4002000c
    1fbc:	40021000 	.word	0x40021000
    1fc0:	40021008 	.word	0x40021008

00001fc4 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1fc4:	4905      	ldr	r1, [pc, #20]	; (1fdc <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1fc6:	4a06      	ldr	r2, [pc, #24]	; (1fe0 <am_hal_pwrctrl_low_power_init+0x1c>)
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1fc8:	680b      	ldr	r3, [r1, #0]
    1fca:	f043 0006 	orr.w	r0, r3, #6
    1fce:	6008      	str	r0, [r1, #0]
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1fd0:	6811      	ldr	r1, [r2, #0]
    1fd2:	f021 0304 	bic.w	r3, r1, #4
    1fd6:	6013      	str	r3, [r2, #0]
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop
    1fdc:	40021018 	.word	0x40021018
    1fe0:	40021000 	.word	0x40021000

00001fe4 <am_hal_queue_item_add>:
//! didn't have enough space.
//
//*****************************************************************************
bool
am_hal_queue_item_add(am_hal_queue_t *psQueue, const void *pvSource, uint32_t ui32NumItems)
{
    1fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fe6:	4604      	mov	r4, r0
    uint32_t i;
    uint8_t *pui8Source;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    1fe8:	6907      	ldr	r7, [r0, #16]
{
    1fea:	460e      	mov	r6, r1
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    1fec:	fb07 f702 	mul.w	r7, r7, r2
    bool bSuccess = false;
    uint32_t ui32Primask;

    pui8Source = (uint8_t *) pvSource;

    ui32Primask = am_hal_interrupt_master_disable();
    1ff0:	f7fe fd52 	bl	a98 <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't already full
    //
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    1ff4:	68a5      	ldr	r5, [r4, #8]
    1ff6:	68e3      	ldr	r3, [r4, #12]
    1ff8:	1b59      	subs	r1, r3, r5
    1ffa:	428f      	cmp	r7, r1
    1ffc:	d87c      	bhi.n	20f8 <am_hal_queue_item_add+0x114>
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    1ffe:	2f00      	cmp	r7, #0
    2000:	d073      	beq.n	20ea <am_hal_queue_item_add+0x106>
        {
            //
            // Write the value to the buffer.
            //
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    2002:	4635      	mov	r5, r6
    2004:	6823      	ldr	r3, [r4, #0]
    2006:	6962      	ldr	r2, [r4, #20]
    2008:	f815 1b01 	ldrb.w	r1, [r5], #1
    200c:	54d1      	strb	r1, [r2, r3]

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    200e:	6823      	ldr	r3, [r4, #0]
    2010:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    2014:	1c5a      	adds	r2, r3, #1
    2016:	19f1      	adds	r1, r6, r7
    2018:	f107 3cff 	add.w	ip, r7, #4294967295
    201c:	fbb2 f6fe 	udiv	r6, r2, lr
        for ( i = 0; i < ui32Bytes; i++ )
    2020:	42a9      	cmp	r1, r5
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    2022:	fb0e 2316 	mls	r3, lr, r6, r2
    2026:	6023      	str	r3, [r4, #0]
    2028:	f00c 0203 	and.w	r2, ip, #3
        for ( i = 0; i < ui32Bytes; i++ )
    202c:	d05c      	beq.n	20e8 <am_hal_queue_item_add+0x104>
    202e:	b34a      	cbz	r2, 2084 <am_hal_queue_item_add+0xa0>
    2030:	2a01      	cmp	r2, #1
    2032:	d019      	beq.n	2068 <am_hal_queue_item_add+0x84>
    2034:	2a02      	cmp	r2, #2
    2036:	d00b      	beq.n	2050 <am_hal_queue_item_add+0x6c>
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    2038:	6962      	ldr	r2, [r4, #20]
    203a:	f815 6b01 	ldrb.w	r6, [r5], #1
    203e:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    2040:	6823      	ldr	r3, [r4, #0]
    2042:	68e6      	ldr	r6, [r4, #12]
    2044:	1c5a      	adds	r2, r3, #1
    2046:	fbb2 fef6 	udiv	lr, r2, r6
    204a:	fb06 231e 	mls	r3, r6, lr, r2
    204e:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    2050:	6962      	ldr	r2, [r4, #20]
    2052:	f815 6b01 	ldrb.w	r6, [r5], #1
    2056:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    2058:	6823      	ldr	r3, [r4, #0]
    205a:	68e6      	ldr	r6, [r4, #12]
    205c:	1c5a      	adds	r2, r3, #1
    205e:	fbb2 fcf6 	udiv	ip, r2, r6
    2062:	fb06 231c 	mls	r3, r6, ip, r2
    2066:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    2068:	6962      	ldr	r2, [r4, #20]
    206a:	f815 6b01 	ldrb.w	r6, [r5], #1
    206e:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    2070:	6823      	ldr	r3, [r4, #0]
    2072:	68e6      	ldr	r6, [r4, #12]
    2074:	1c5a      	adds	r2, r3, #1
        for ( i = 0; i < ui32Bytes; i++ )
    2076:	42a9      	cmp	r1, r5
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    2078:	fbb2 fef6 	udiv	lr, r2, r6
    207c:	fb06 231e 	mls	r3, r6, lr, r2
    2080:	6023      	str	r3, [r4, #0]
        for ( i = 0; i < ui32Bytes; i++ )
    2082:	d031      	beq.n	20e8 <am_hal_queue_item_add+0x104>
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    2084:	46ac      	mov	ip, r5
    2086:	6962      	ldr	r2, [r4, #20]
    2088:	f81c 6b01 	ldrb.w	r6, [ip], #1
    208c:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    208e:	6823      	ldr	r3, [r4, #0]
    2090:	68e2      	ldr	r2, [r4, #12]
    2092:	1c5e      	adds	r6, r3, #1
    2094:	fbb6 fef2 	udiv	lr, r6, r2
    2098:	fb02 631e 	mls	r3, r2, lr, r6
    209c:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    209e:	6962      	ldr	r2, [r4, #20]
    20a0:	786e      	ldrb	r6, [r5, #1]
    20a2:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    20a4:	6823      	ldr	r3, [r4, #0]
    20a6:	68e2      	ldr	r2, [r4, #12]
    20a8:	1c5e      	adds	r6, r3, #1
    20aa:	fbb6 fef2 	udiv	lr, r6, r2
    20ae:	fb02 631e 	mls	r3, r2, lr, r6
    20b2:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    20b4:	6962      	ldr	r2, [r4, #20]
    20b6:	f89c 6001 	ldrb.w	r6, [ip, #1]
    20ba:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    20bc:	6823      	ldr	r3, [r4, #0]
    20be:	68e2      	ldr	r2, [r4, #12]
    20c0:	1c5e      	adds	r6, r3, #1
    20c2:	fbb6 fcf2 	udiv	ip, r6, r2
    20c6:	fb02 631c 	mls	r3, r2, ip, r6
    20ca:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    20cc:	6962      	ldr	r2, [r4, #20]
    20ce:	78ee      	ldrb	r6, [r5, #3]
    20d0:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    20d2:	6823      	ldr	r3, [r4, #0]
    20d4:	68e2      	ldr	r2, [r4, #12]
    20d6:	1c5e      	adds	r6, r3, #1
    20d8:	3504      	adds	r5, #4
    20da:	fbb6 fef2 	udiv	lr, r6, r2
        for ( i = 0; i < ui32Bytes; i++ )
    20de:	42a9      	cmp	r1, r5
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    20e0:	fb02 631e 	mls	r3, r2, lr, r6
    20e4:	6023      	str	r3, [r4, #0]
        for ( i = 0; i < ui32Bytes; i++ )
    20e6:	d1cd      	bne.n	2084 <am_hal_queue_item_add+0xa0>
    20e8:	68a5      	ldr	r5, [r4, #8]
        }

        //
        // Update the length value appropriately.
        //
        psQueue->ui32Length += ui32Bytes;
    20ea:	443d      	add	r5, r7
    20ec:	60a5      	str	r5, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
    20ee:	2401      	movs	r4, #1
        // failure.
        //
        bSuccess = false;
    }

    am_hal_interrupt_master_set(ui32Primask);
    20f0:	f7fe fcd6 	bl	aa0 <am_hal_interrupt_master_set>

    return bSuccess;
}
    20f4:	4620      	mov	r0, r4
    20f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        bSuccess = false;
    20f8:	2400      	movs	r4, #0
    am_hal_interrupt_master_set(ui32Primask);
    20fa:	f7fe fcd1 	bl	aa0 <am_hal_interrupt_master_set>
}
    20fe:	4620      	mov	r0, r4
    2100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2102:	bf00      	nop

00002104 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    2104:	4a05      	ldr	r2, [pc, #20]	; (211c <am_hal_rtc_osc_select+0x18>)
    2106:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    2108:	b918      	cbnz	r0, 2112 <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    210a:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    210e:	6010      	str	r0, [r2, #0]
    2110:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    2112:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    2116:	6011      	str	r1, [r2, #0]
    2118:	4770      	bx	lr
    211a:	bf00      	nop
    211c:	4000400c 	.word	0x4000400c

00002120 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    2120:	4a02      	ldr	r2, [pc, #8]	; (212c <am_hal_rtc_osc_disable+0xc>)
    2122:	6813      	ldr	r3, [r2, #0]
    2124:	f043 0010 	orr.w	r0, r3, #16
    2128:	6010      	str	r0, [r2, #0]
    212a:	4770      	bx	lr
    212c:	40004050 	.word	0x40004050

00002130 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    2130:	b5f0      	push	{r4, r5, r6, r7, lr}
    2132:	b083      	sub	sp, #12
    2134:	4604      	mov	r4, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    2136:	f7fe fcaf 	bl	a98 <am_hal_interrupt_master_disable>
    213a:	4605      	mov	r5, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    213c:	b124      	cbz	r4, 2148 <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    213e:	4b42      	ldr	r3, [pc, #264]	; (2248 <am_hal_sysctrl_sleep+0x118>)
    2140:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    2142:	f010 0c01 	ands.w	ip, r0, #1
    2146:	d00a      	beq.n	215e <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    2148:	4a40      	ldr	r2, [pc, #256]	; (224c <am_hal_sysctrl_sleep+0x11c>)
    214a:	6811      	ldr	r1, [r2, #0]
    214c:	f021 0604 	bic.w	r6, r1, #4
    2150:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    2152:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    2154:	4628      	mov	r0, r5
    2156:	f7fe fca3 	bl	aa0 <am_hal_interrupt_master_set>
}
    215a:	b003      	add	sp, #12
    215c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    215e:	4c3b      	ldr	r4, [pc, #236]	; (224c <am_hal_sysctrl_sleep+0x11c>)
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    2160:	4b3b      	ldr	r3, [pc, #236]	; (2250 <am_hal_sysctrl_sleep+0x120>)
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    2162:	6820      	ldr	r0, [r4, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    2164:	4e3b      	ldr	r6, [pc, #236]	; (2254 <am_hal_sysctrl_sleep+0x124>)
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    2166:	4f3c      	ldr	r7, [pc, #240]	; (2258 <am_hal_sysctrl_sleep+0x128>)
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    2168:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 2268 <am_hal_sysctrl_sleep+0x138>
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    216c:	f040 0204 	orr.w	r2, r0, #4
    2170:	6022      	str	r2, [r4, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    2172:	681c      	ldr	r4, [r3, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    2174:	6833      	ldr	r3, [r6, #0]
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    2176:	f8de 2000 	ldr.w	r2, [lr]
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    217a:	6839      	ldr	r1, [r7, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    217c:	f004 07f0 	and.w	r7, r4, #240	; 0xf0
                   CHKBUCKZX_REV : 0x0;
    2180:	2f20      	cmp	r7, #32
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    2182:	f103 30ff 	add.w	r0, r3, #4294967295
                   CHKBUCKZX_REV : 0x0;
    2186:	bf14      	ite	ne
    2188:	2700      	movne	r7, #0
    218a:	2702      	moveq	r7, #2
                    CHKBUCKZX_TIMER : 0x0;
    218c:	2803      	cmp	r0, #3
    218e:	bf98      	it	ls
    2190:	f04f 0c04 	movls.w	ip, #4
                     CHKBUCKZX_BUCKS : 0x0;
    2194:	f012 0403 	ands.w	r4, r2, #3
    2198:	bf18      	it	ne
    219a:	2401      	movne	r4, #1
    g_buckZX_chk |= ( ui32SupplySrc &
    219c:	f240 53ff 	movw	r3, #1535	; 0x5ff
    g_buckZX_chk |= (ui32SupplySrc &
    21a0:	433c      	orrs	r4, r7
                0x0 : CHKBUCKZX_DEVEN;
    21a2:	ea11 0703 	ands.w	r7, r1, r3
    g_buckZX_chk |= (ui32SupplySrc &
    21a6:	ea44 040c 	orr.w	r4, r4, ip
                0x0 : CHKBUCKZX_DEVEN;
    21aa:	d103      	bne.n	21b4 <am_hal_sysctrl_sleep+0x84>
    g_buckZX_chk |= ( ui32SupplySrc &
    21ac:	f044 0408 	orr.w	r4, r4, #8
        if ( bBuckZX_chk )
    21b0:	2c0f      	cmp	r4, #15
    21b2:	d00a      	beq.n	21ca <am_hal_sysctrl_sleep+0x9a>
        AM_ASM_WFI;
    21b4:	bf30      	wfi
        if ( bBuckZX_chk )
    21b6:	2c0f      	cmp	r4, #15
    21b8:	d01a      	beq.n	21f0 <am_hal_sysctrl_sleep+0xc0>
            g_bBuckRestoreComplete = true;
    21ba:	4e28      	ldr	r6, [pc, #160]	; (225c <am_hal_sysctrl_sleep+0x12c>)
    21bc:	2001      	movs	r0, #1
    21be:	7030      	strb	r0, [r6, #0]
    am_hal_interrupt_master_set(ui32Critical);
    21c0:	4628      	mov	r0, r5
    21c2:	f7fe fc6d 	bl	aa0 <am_hal_interrupt_master_set>
}
    21c6:	b003      	add	sp, #12
    21c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ui32BuckTimer = g_ui32BuckTimer - 1;
    21ca:	6832      	ldr	r2, [r6, #0]
    21cc:	1e51      	subs	r1, r2, #1
    21ce:	9100      	str	r1, [sp, #0]
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    21d0:	9800      	ldr	r0, [sp, #0]
    21d2:	f04f 31ff 	mov.w	r1, #4294967295
    21d6:	f000 f867 	bl	22a8 <am_hal_ctimer_clear>
            am_hal_ctimer_period_set(ui32BuckTimer,
    21da:	9800      	ldr	r0, [sp, #0]
    21dc:	463b      	mov	r3, r7
    21de:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    21e2:	f04f 31ff 	mov.w	r1, #4294967295
    21e6:	f000 f873 	bl	22d0 <am_hal_ctimer_period_set>
            am_hal_pwrctrl_bucks_disable();
    21ea:	f7ff febd 	bl	1f68 <am_hal_pwrctrl_bucks_disable>
    21ee:	e7e1      	b.n	21b4 <am_hal_sysctrl_sleep+0x84>
    AM_CRITICAL_BEGIN_ASM
    21f0:	f7fe fc52 	bl	a98 <am_hal_interrupt_master_disable>
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    21f4:	4b1a      	ldr	r3, [pc, #104]	; (2260 <am_hal_sysctrl_sleep+0x130>)
    AM_CRITICAL_BEGIN_ASM
    21f6:	9001      	str	r0, [sp, #4]
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    21f8:	681a      	ldr	r2, [r3, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    21fa:	681a      	ldr	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    21fc:	681f      	ldr	r7, [r3, #0]
    21fe:	f027 043c 	bic.w	r4, r7, #60	; 0x3c
    2202:	f044 021c 	orr.w	r2, r4, #28
    2206:	601a      	str	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    2208:	6819      	ldr	r1, [r3, #0]
            g_bBuckRestoreComplete = false;
    220a:	4c14      	ldr	r4, [pc, #80]	; (225c <am_hal_sysctrl_sleep+0x12c>)
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    220c:	f421 30f0 	bic.w	r0, r1, #122880	; 0x1e000
    2210:	f440 4760 	orr.w	r7, r0, #57344	; 0xe000
    2214:	601f      	str	r7, [r3, #0]
    AM_CRITICAL_END_ASM
    2216:	9801      	ldr	r0, [sp, #4]
    2218:	f7fe fc42 	bl	aa0 <am_hal_interrupt_master_set>
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    221c:	201c      	movs	r0, #28
    221e:	f7fe fb57 	bl	8d0 <am_hal_flash_delay>
            am_hal_pwrctrl_bucks_enable();
    2222:	f7ff fe85 	bl	1f30 <am_hal_pwrctrl_bucks_enable>
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2226:	6836      	ldr	r6, [r6, #0]
            g_ui32BuckInputs = 0;
    2228:	490e      	ldr	r1, [pc, #56]	; (2264 <am_hal_sysctrl_sleep+0x134>)
            g_bBuckRestoreComplete = false;
    222a:	2200      	movs	r2, #0
            ui32BuckTimer = g_ui32BuckTimer - 1;
    222c:	1e73      	subs	r3, r6, #1
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    222e:	204c      	movs	r0, #76	; 0x4c
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2230:	9300      	str	r3, [sp, #0]
            g_bBuckRestoreComplete = false;
    2232:	7022      	strb	r2, [r4, #0]
            g_ui32BuckInputs = 0;
    2234:	600a      	str	r2, [r1, #0]
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    2236:	f7fe fb4b 	bl	8d0 <am_hal_flash_delay>
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    223a:	9800      	ldr	r0, [sp, #0]
    223c:	f04f 31ff 	mov.w	r1, #4294967295
    2240:	f000 f81a 	bl	2278 <am_hal_ctimer_start>
    2244:	e786      	b.n	2154 <am_hal_sysctrl_sleep+0x24>
    2246:	bf00      	nop
    2248:	40020250 	.word	0x40020250
    224c:	e000ed10 	.word	0xe000ed10
    2250:	4002000c 	.word	0x4002000c
    2254:	10001018 	.word	0x10001018
    2258:	40021008 	.word	0x40021008
    225c:	10001013 	.word	0x10001013
    2260:	40020068 	.word	0x40020068
    2264:	10001014 	.word	0x10001014
    2268:	40021000 	.word	0x40021000

0000226c <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    226c:	4b01      	ldr	r3, [pc, #4]	; (2274 <am_hal_vcomp_disable+0x8>)
    226e:	2237      	movs	r2, #55	; 0x37
    2270:	601a      	str	r2, [r3, #0]
    2272:	4770      	bx	lr
    2274:	4000c008 	.word	0x4000c008

00002278 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    2278:	b570      	push	{r4, r5, r6, lr}
    227a:	b082      	sub	sp, #8
    227c:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    227e:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    2280:	f7fe fc0a 	bl	a98 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    2284:	4d07      	ldr	r5, [pc, #28]	; (22a4 <am_hal_ctimer_start+0x2c>)
    AM_CRITICAL_BEGIN_ASM
    2286:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    2288:	5971      	ldr	r1, [r6, r5]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    228a:	f004 2308 	and.w	r3, r4, #134219776	; 0x8000800
    228e:	ea21 0003 	bic.w	r0, r1, r3
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    2292:	f004 1201 	and.w	r2, r4, #65537	; 0x10001
    2296:	4302      	orrs	r2, r0
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    2298:	5172      	str	r2, [r6, r5]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    229a:	9801      	ldr	r0, [sp, #4]
    229c:	f7fe fc00 	bl	aa0 <am_hal_interrupt_master_set>
} // am_hal_ctimer_start()
    22a0:	b002      	add	sp, #8
    22a2:	bd70      	pop	{r4, r5, r6, pc}
    22a4:	4000800c 	.word	0x4000800c

000022a8 <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    22a8:	b570      	push	{r4, r5, r6, lr}
    22aa:	b082      	sub	sp, #8
    22ac:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    22ae:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    22b0:	f7fe fbf2 	bl	a98 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    22b4:	4d05      	ldr	r5, [pc, #20]	; (22cc <am_hal_ctimer_clear+0x24>)
    AM_CRITICAL_BEGIN_ASM
    22b6:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    22b8:	5971      	ldr	r1, [r6, r5]
    22ba:	f004 2008 	and.w	r0, r4, #134219776	; 0x8000800
    22be:	4308      	orrs	r0, r1
    22c0:	5170      	str	r0, [r6, r5]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    22c2:	9801      	ldr	r0, [sp, #4]
    22c4:	f7fe fbec 	bl	aa0 <am_hal_interrupt_master_set>
} // am_hal_ctimer_clear()
    22c8:	b002      	add	sp, #8
    22ca:	bd70      	pop	{r4, r5, r6, pc}
    22cc:	4000800c 	.word	0x4000800c

000022d0 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    22d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    22d4:	b082      	sub	sp, #8
    22d6:	4688      	mov	r8, r1
    22d8:	461f      	mov	r7, r3
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    22da:	ea4f 1900 	mov.w	r9, r0, lsl #4
{
    22de:	4614      	mov	r4, r2
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    22e0:	f7fe fbda 	bl	a98 <am_hal_interrupt_master_disable>
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    22e4:	f8df a098 	ldr.w	sl, [pc, #152]	; 2380 <am_hal_ctimer_period_set+0xb0>
    AM_CRITICAL_BEGIN_ASM
    22e8:	9001      	str	r0, [sp, #4]
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    22ea:	f518 3f80 	cmn.w	r8, #65536	; 0x10000
                                    AM_REG_CTIMER_CMPRA0_O +
    22ee:	4d21      	ldr	r5, [pc, #132]	; (2374 <am_hal_ctimer_period_set+0xa4>)
                                    AM_REG_CTIMER_CMPRB0_O +
    22f0:	4e21      	ldr	r6, [pc, #132]	; (2378 <am_hal_ctimer_period_set+0xa8>)
    ui32Mode = *pui32ControlReg;
    22f2:	f859 300a 	ldr.w	r3, [r9, sl]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    22f6:	d01b      	beq.n	2330 <am_hal_ctimer_period_set+0x60>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    22f8:	f403 70c0 	and.w	r0, r3, #384	; 0x180
    22fc:	2880      	cmp	r0, #128	; 0x80
    22fe:	d01c      	beq.n	233a <am_hal_ctimer_period_set+0x6a>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    2300:	f64f 77ff 	movw	r7, #65535	; 0xffff
    2304:	2300      	movs	r3, #0
    2306:	45b8      	cmp	r8, r7
        ui32Comp1 = 0;
    2308:	461a      	mov	r2, r3
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    230a:	d01d      	beq.n	2348 <am_hal_ctimer_period_set+0x78>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    230c:	491b      	ldr	r1, [pc, #108]	; (237c <am_hal_ctimer_period_set+0xac>)
    230e:	4588      	cmp	r8, r1
    2310:	d025      	beq.n	235e <am_hal_ctimer_period_set+0x8e>
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1 >> 16));
    2312:	400a      	ands	r2, r1
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    2314:	b2a0      	uxth	r0, r4
    2316:	4303      	orrs	r3, r0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    2318:	ea42 4414 	orr.w	r4, r2, r4, lsr #16
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    231c:	f849 3005 	str.w	r3, [r9, r5]
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    2320:	f849 4006 	str.w	r4, [r9, r6]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    2324:	9801      	ldr	r0, [sp, #4]
    2326:	f7fe fbbb 	bl	aa0 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    232a:	b002      	add	sp, #8
    232c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ui32Mode = ui32Mode >> 16;
    2330:	0c19      	lsrs	r1, r3, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    2332:	f401 70c0 	and.w	r0, r1, #384	; 0x180
    2336:	2880      	cmp	r0, #128	; 0x80
    2338:	d110      	bne.n	235c <am_hal_ctimer_period_set+0x8c>
    233a:	0423      	lsls	r3, r4, #16
        ui32Comp1 = ui32Period;
    233c:	4622      	mov	r2, r4
        ui32Comp0 = ui32Period - ui32OnTime;
    233e:	1be4      	subs	r4, r4, r7
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    2340:	f64f 77ff 	movw	r7, #65535	; 0xffff
    2344:	45b8      	cmp	r8, r7
    2346:	d1e1      	bne.n	230c <am_hal_ctimer_period_set+0x3c>
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    2348:	b2a6      	uxth	r6, r4
    234a:	4333      	orrs	r3, r6
    234c:	f849 3005 	str.w	r3, [r9, r5]
    AM_CRITICAL_END_ASM
    2350:	9801      	ldr	r0, [sp, #4]
    2352:	f7fe fba5 	bl	aa0 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    2356:	b002      	add	sp, #8
    2358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    235c:	2300      	movs	r3, #0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    235e:	b2a5      	uxth	r5, r4
    2360:	432b      	orrs	r3, r5
    2362:	f849 3006 	str.w	r3, [r9, r6]
    AM_CRITICAL_END_ASM
    2366:	9801      	ldr	r0, [sp, #4]
    2368:	f7fe fb9a 	bl	aa0 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    236c:	b002      	add	sp, #8
    236e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2372:	bf00      	nop
    2374:	40008004 	.word	0x40008004
    2378:	40008008 	.word	0x40008008
    237c:	ffff0000 	.word	0xffff0000
    2380:	4000800c 	.word	0x4000800c

00002384 <am_hal_i2c_bit_bang_receive>:
//*****************************************************************************
am_hal_i2c_bit_bang_enum_e
am_hal_i2c_bit_bang_receive(uint8_t address, uint32_t number_of_bytes,
                            uint8_t *pData, uint8_t ui8Offset,
                            bool bUseOffset, bool bNoStop)
{
    2384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    PULL_SCL_HI();
    2388:	4c9b      	ldr	r4, [pc, #620]	; (25f8 <am_hal_i2c_bit_bang_receive+0x274>)
{
    238a:	b083      	sub	sp, #12
    PULL_SCL_HI();
    238c:	68e7      	ldr	r7, [r4, #12]
{
    238e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
    PULL_SCL_HI();
    2392:	69a6      	ldr	r6, [r4, #24]
{
    2394:	9501      	str	r5, [sp, #4]
    while (!GET_SCL())
    2396:	6965      	ldr	r5, [r4, #20]
    PULL_SCL_HI();
    2398:	603e      	str	r6, [r7, #0]
    while (!GET_SCL())
    239a:	682d      	ldr	r5, [r5, #0]
{
    239c:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
    23a0:	9300      	str	r3, [sp, #0]
    while (!GET_SCL())
    23a2:	422e      	tst	r6, r5
{
    23a4:	4607      	mov	r7, r0
    23a6:	468b      	mov	fp, r1
    23a8:	4690      	mov	r8, r2
    while (!GET_SCL())
    23aa:	bf08      	it	eq
    23ac:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    23b0:	d14c      	bne.n	244c <am_hal_i2c_bit_bang_receive+0xc8>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    23b2:	2004      	movs	r0, #4
    23b4:	f7fe fa8c 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    23b8:	6962      	ldr	r2, [r4, #20]
    23ba:	69a3      	ldr	r3, [r4, #24]
    23bc:	6811      	ldr	r1, [r2, #0]
    23be:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    23c0:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    23c4:	d142      	bne.n	244c <am_hal_i2c_bit_bang_receive+0xc8>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    23c6:	f7fe fa83 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    23ca:	6966      	ldr	r6, [r4, #20]
    23cc:	69a3      	ldr	r3, [r4, #24]
    23ce:	6832      	ldr	r2, [r6, #0]
    23d0:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    23d2:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    23d6:	d139      	bne.n	244c <am_hal_i2c_bit_bang_receive+0xc8>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    23d8:	f7fe fa7a 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    23dc:	6961      	ldr	r1, [r4, #20]
    23de:	69a6      	ldr	r6, [r4, #24]
    23e0:	680b      	ldr	r3, [r1, #0]
    23e2:	4233      	tst	r3, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    23e4:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    23e8:	d130      	bne.n	244c <am_hal_i2c_bit_bang_receive+0xc8>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    23ea:	f7fe fa71 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    23ee:	6962      	ldr	r2, [r4, #20]
    23f0:	69a1      	ldr	r1, [r4, #24]
    23f2:	6816      	ldr	r6, [r2, #0]
    23f4:	420e      	tst	r6, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    23f6:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    23fa:	d127      	bne.n	244c <am_hal_i2c_bit_bang_receive+0xc8>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    23fc:	f7fe fa68 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2400:	6962      	ldr	r2, [r4, #20]
    2402:	69a3      	ldr	r3, [r4, #24]
    2404:	6811      	ldr	r1, [r2, #0]
    2406:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2408:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    240c:	d11e      	bne.n	244c <am_hal_i2c_bit_bang_receive+0xc8>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    240e:	f7fe fa5f 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2412:	6966      	ldr	r6, [r4, #20]
    2414:	69a3      	ldr	r3, [r4, #24]
    2416:	6832      	ldr	r2, [r6, #0]
    2418:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    241a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    241e:	d115      	bne.n	244c <am_hal_i2c_bit_bang_receive+0xc8>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2420:	f7fe fa56 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2424:	6961      	ldr	r1, [r4, #20]
    2426:	69a6      	ldr	r6, [r4, #24]
    2428:	680b      	ldr	r3, [r1, #0]
    242a:	4233      	tst	r3, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    242c:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2430:	d10c      	bne.n	244c <am_hal_i2c_bit_bang_receive+0xc8>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2432:	f7fe fa4d 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2436:	6960      	ldr	r0, [r4, #20]
    2438:	69a1      	ldr	r1, [r4, #24]
    243a:	6802      	ldr	r2, [r0, #0]
    243c:	420a      	tst	r2, r1
    243e:	d105      	bne.n	244c <am_hal_i2c_bit_bang_receive+0xc8>
        if (--maxLoop == 0)
    2440:	3d08      	subs	r5, #8
    2442:	d1b6      	bne.n	23b2 <am_hal_i2c_bit_bang_receive+0x2e>
    status = i2c_send_byte(address);
    if ( status != AM_HAL_I2C_BIT_BANG_SUCCESS )
    {
        if ( status == AM_HAL_I2C_BIT_BANG_DATA_NAKED)
        {
            return AM_HAL_I2C_BIT_BANG_ADDRESS_NAKED;
    2444:	2003      	movs	r0, #3

    //
    // message successfully received (how could we fail???)
    //
    return AM_HAL_I2C_BIT_BANG_SUCCESS;
}
    2446:	b003      	add	sp, #12
    2448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    WRITE_SDA_LO();
    244c:	6a26      	ldr	r6, [r4, #32]
    244e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2450:	6033      	str	r3, [r6, #0]
    WAIT_I2C_CLOCK_HI_PERIOD();
    2452:	2005      	movs	r0, #5
    2454:	f7fe fa3c 	bl	8d0 <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    2458:	2600      	movs	r6, #0
        if ( one_byte & (0x80 >> i) )
    245a:	f04f 0980 	mov.w	r9, #128	; 0x80
    245e:	fa49 f306 	asr.w	r3, r9, r6
    2462:	423b      	tst	r3, r7
        WRITE_SCL_LO();
    2464:	6920      	ldr	r0, [r4, #16]
            PULL_SDA_HI();
    2466:	bf14      	ite	ne
    2468:	69e3      	ldrne	r3, [r4, #28]
            WRITE_SDA_LO();
    246a:	6a23      	ldreq	r3, [r4, #32]
        WRITE_SCL_LO();
    246c:	69a1      	ldr	r1, [r4, #24]
            WRITE_SDA_LO();
    246e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        WRITE_SCL_LO();
    2470:	6001      	str	r1, [r0, #0]
            WRITE_SDA_LO();
    2472:	601a      	str	r2, [r3, #0]
        WAIT_I2C_CLOCK_LOW_PERIOD();
    2474:	2007      	movs	r0, #7
    2476:	f7fe fa2b 	bl	8d0 <am_hal_flash_delay>
    PULL_SCL_HI();
    247a:	68e0      	ldr	r0, [r4, #12]
    247c:	69a1      	ldr	r1, [r4, #24]
    while (!GET_SCL())
    247e:	6963      	ldr	r3, [r4, #20]
    PULL_SCL_HI();
    2480:	6001      	str	r1, [r0, #0]
    while (!GET_SCL())
    2482:	681a      	ldr	r2, [r3, #0]
    2484:	4211      	tst	r1, r2
    2486:	bf08      	it	eq
    2488:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    248c:	d149      	bne.n	2522 <am_hal_i2c_bit_bang_receive+0x19e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    248e:	2004      	movs	r0, #4
    2490:	f7fe fa1e 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2494:	6961      	ldr	r1, [r4, #20]
    2496:	69a3      	ldr	r3, [r4, #24]
    2498:	680a      	ldr	r2, [r1, #0]
    249a:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    249c:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    24a0:	d13f      	bne.n	2522 <am_hal_i2c_bit_bang_receive+0x19e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    24a2:	f7fe fa15 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    24a6:	6961      	ldr	r1, [r4, #20]
    24a8:	69a3      	ldr	r3, [r4, #24]
    24aa:	680a      	ldr	r2, [r1, #0]
    24ac:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    24ae:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    24b2:	d136      	bne.n	2522 <am_hal_i2c_bit_bang_receive+0x19e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    24b4:	f7fe fa0c 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    24b8:	6961      	ldr	r1, [r4, #20]
    24ba:	69a3      	ldr	r3, [r4, #24]
    24bc:	680a      	ldr	r2, [r1, #0]
    24be:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    24c0:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    24c4:	d12d      	bne.n	2522 <am_hal_i2c_bit_bang_receive+0x19e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    24c6:	f7fe fa03 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    24ca:	6961      	ldr	r1, [r4, #20]
    24cc:	69a3      	ldr	r3, [r4, #24]
    24ce:	680a      	ldr	r2, [r1, #0]
    24d0:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    24d2:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    24d6:	d124      	bne.n	2522 <am_hal_i2c_bit_bang_receive+0x19e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    24d8:	f7fe f9fa 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    24dc:	6961      	ldr	r1, [r4, #20]
    24de:	69a3      	ldr	r3, [r4, #24]
    24e0:	680a      	ldr	r2, [r1, #0]
    24e2:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    24e4:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    24e8:	d11b      	bne.n	2522 <am_hal_i2c_bit_bang_receive+0x19e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    24ea:	f7fe f9f1 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    24ee:	6961      	ldr	r1, [r4, #20]
    24f0:	69a3      	ldr	r3, [r4, #24]
    24f2:	680a      	ldr	r2, [r1, #0]
    24f4:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    24f6:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    24fa:	d112      	bne.n	2522 <am_hal_i2c_bit_bang_receive+0x19e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    24fc:	f7fe f9e8 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2500:	6961      	ldr	r1, [r4, #20]
    2502:	69a3      	ldr	r3, [r4, #24]
    2504:	680a      	ldr	r2, [r1, #0]
    2506:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2508:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    250c:	d109      	bne.n	2522 <am_hal_i2c_bit_bang_receive+0x19e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    250e:	f7fe f9df 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2512:	6960      	ldr	r0, [r4, #20]
    2514:	69a1      	ldr	r1, [r4, #24]
    2516:	6803      	ldr	r3, [r0, #0]
    2518:	420b      	tst	r3, r1
    251a:	d102      	bne.n	2522 <am_hal_i2c_bit_bang_receive+0x19e>
        if (--maxLoop == 0)
    251c:	3d08      	subs	r5, #8
    251e:	d1b6      	bne.n	248e <am_hal_i2c_bit_bang_receive+0x10a>
    2520:	e790      	b.n	2444 <am_hal_i2c_bit_bang_receive+0xc0>
    for (i = 0; i < 8; i++)
    2522:	3601      	adds	r6, #1
        WAIT_I2C_CLOCK_HI_PERIOD();
    2524:	2005      	movs	r0, #5
    2526:	f7fe f9d3 	bl	8d0 <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    252a:	2e08      	cmp	r6, #8
    252c:	d197      	bne.n	245e <am_hal_i2c_bit_bang_receive+0xda>
    WRITE_SCL_LO();
    252e:	6927      	ldr	r7, [r4, #16]
    2530:	69a2      	ldr	r2, [r4, #24]
    2532:	603a      	str	r2, [r7, #0]
    WAIT_I2C_CLOCK_LOW_PERIOD();
    2534:	2007      	movs	r0, #7
    2536:	f7fe f9cb 	bl	8d0 <am_hal_flash_delay>
    PULL_SCL_HI();
    253a:	68e0      	ldr	r0, [r4, #12]
    253c:	69a1      	ldr	r1, [r4, #24]
    while (!GET_SCL())
    253e:	6963      	ldr	r3, [r4, #20]
    PULL_SCL_HI();
    2540:	6001      	str	r1, [r0, #0]
    while (!GET_SCL())
    2542:	681f      	ldr	r7, [r3, #0]
    2544:	4239      	tst	r1, r7
    2546:	bf08      	it	eq
    2548:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    254c:	d149      	bne.n	25e2 <am_hal_i2c_bit_bang_receive+0x25e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    254e:	2004      	movs	r0, #4
    2550:	f7fe f9be 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2554:	6962      	ldr	r2, [r4, #20]
    2556:	69a1      	ldr	r1, [r4, #24]
    2558:	6813      	ldr	r3, [r2, #0]
    255a:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    255c:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2560:	d13f      	bne.n	25e2 <am_hal_i2c_bit_bang_receive+0x25e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2562:	f7fe f9b5 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2566:	6967      	ldr	r7, [r4, #20]
    2568:	69a1      	ldr	r1, [r4, #24]
    256a:	683a      	ldr	r2, [r7, #0]
    256c:	420a      	tst	r2, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    256e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2572:	d136      	bne.n	25e2 <am_hal_i2c_bit_bang_receive+0x25e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2574:	f7fe f9ac 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2578:	6967      	ldr	r7, [r4, #20]
    257a:	69a3      	ldr	r3, [r4, #24]
    257c:	6839      	ldr	r1, [r7, #0]
    257e:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2580:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2584:	d12d      	bne.n	25e2 <am_hal_i2c_bit_bang_receive+0x25e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2586:	f7fe f9a3 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    258a:	6962      	ldr	r2, [r4, #20]
    258c:	69a7      	ldr	r7, [r4, #24]
    258e:	6813      	ldr	r3, [r2, #0]
    2590:	423b      	tst	r3, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2592:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2596:	d124      	bne.n	25e2 <am_hal_i2c_bit_bang_receive+0x25e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2598:	f7fe f99a 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    259c:	6961      	ldr	r1, [r4, #20]
    259e:	69a7      	ldr	r7, [r4, #24]
    25a0:	680a      	ldr	r2, [r1, #0]
    25a2:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    25a4:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    25a8:	d11b      	bne.n	25e2 <am_hal_i2c_bit_bang_receive+0x25e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    25aa:	f7fe f991 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    25ae:	6961      	ldr	r1, [r4, #20]
    25b0:	69a3      	ldr	r3, [r4, #24]
    25b2:	680f      	ldr	r7, [r1, #0]
    25b4:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    25b6:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    25ba:	d112      	bne.n	25e2 <am_hal_i2c_bit_bang_receive+0x25e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    25bc:	f7fe f988 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    25c0:	6962      	ldr	r2, [r4, #20]
    25c2:	69a1      	ldr	r1, [r4, #24]
    25c4:	6813      	ldr	r3, [r2, #0]
    25c6:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    25c8:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    25cc:	d109      	bne.n	25e2 <am_hal_i2c_bit_bang_receive+0x25e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    25ce:	f7fe f97f 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    25d2:	6960      	ldr	r0, [r4, #20]
    25d4:	69a7      	ldr	r7, [r4, #24]
    25d6:	6802      	ldr	r2, [r0, #0]
    25d8:	423a      	tst	r2, r7
    25da:	d102      	bne.n	25e2 <am_hal_i2c_bit_bang_receive+0x25e>
        if (--maxLoop == 0)
    25dc:	3d08      	subs	r5, #8
    25de:	d1b6      	bne.n	254e <am_hal_i2c_bit_bang_receive+0x1ca>
    25e0:	e730      	b.n	2444 <am_hal_i2c_bit_bang_receive+0xc0>
    data_naked = GET_SDA();
    25e2:	6a65      	ldr	r5, [r4, #36]	; 0x24
    25e4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    25e6:	682d      	ldr	r5, [r5, #0]
    WAIT_I2C_CLOCK_HI_PERIOD();
    25e8:	2005      	movs	r0, #5
    data_naked = GET_SDA();
    25ea:	400d      	ands	r5, r1
    WAIT_I2C_CLOCK_HI_PERIOD();
    25ec:	f7fe f970 	bl	8d0 <am_hal_flash_delay>
    if ( data_naked )
    25f0:	b125      	cbz	r5, 25fc <am_hal_i2c_bit_bang_receive+0x278>
            return AM_HAL_I2C_BIT_BANG_ADDRESS_NAKED;
    25f2:	2001      	movs	r0, #1
    25f4:	e727      	b.n	2446 <am_hal_i2c_bit_bang_receive+0xc2>
    25f6:	bf00      	nop
    25f8:	1000101c 	.word	0x1000101c
    if ( bUseOffset )
    25fc:	9b01      	ldr	r3, [sp, #4]
    25fe:	2b00      	cmp	r3, #0
    2600:	f040 81b4 	bne.w	296c <am_hal_i2c_bit_bang_receive+0x5e8>
    for (ui32I = 0; ui32I < number_of_bytes - 1; ui32I++)
    2604:	f1bb 0b01 	subs.w	fp, fp, #1
    2608:	f000 80d8 	beq.w	27bc <am_hal_i2c_bit_bang_receive+0x438>
    260c:	46c1      	mov	r9, r8
    260e:	44c3      	add	fp, r8
    while (!GET_SCL())
    2610:	2700      	movs	r7, #0
    2612:	463e      	mov	r6, r7
            data_byte |=  (0x80 >> i);
    2614:	f04f 0880 	mov.w	r8, #128	; 0x80
        WRITE_SCL_LO();
    2618:	6921      	ldr	r1, [r4, #16]
        PULL_SDA_HI();
    261a:	69e3      	ldr	r3, [r4, #28]
        WRITE_SCL_LO();
    261c:	69a0      	ldr	r0, [r4, #24]
        PULL_SDA_HI();
    261e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        WRITE_SCL_LO();
    2620:	6008      	str	r0, [r1, #0]
        PULL_SDA_HI();
    2622:	601a      	str	r2, [r3, #0]
        WAIT_I2C_CLOCK_LOW_PERIOD();
    2624:	2007      	movs	r0, #7
    2626:	f7fe f953 	bl	8d0 <am_hal_flash_delay>
    PULL_SCL_HI();
    262a:	68e1      	ldr	r1, [r4, #12]
    262c:	69a3      	ldr	r3, [r4, #24]
    while (!GET_SCL())
    262e:	6960      	ldr	r0, [r4, #20]
    PULL_SCL_HI();
    2630:	600b      	str	r3, [r1, #0]
    while (!GET_SCL())
    2632:	6802      	ldr	r2, [r0, #0]
    2634:	4213      	tst	r3, r2
    2636:	bf08      	it	eq
    2638:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    263c:	d149      	bne.n	26d2 <am_hal_i2c_bit_bang_receive+0x34e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    263e:	2004      	movs	r0, #4
    2640:	f7fe f946 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2644:	6961      	ldr	r1, [r4, #20]
    2646:	69a3      	ldr	r3, [r4, #24]
    2648:	680a      	ldr	r2, [r1, #0]
    264a:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    264c:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2650:	d13f      	bne.n	26d2 <am_hal_i2c_bit_bang_receive+0x34e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2652:	f7fe f93d 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2656:	6961      	ldr	r1, [r4, #20]
    2658:	69a3      	ldr	r3, [r4, #24]
    265a:	680a      	ldr	r2, [r1, #0]
    265c:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    265e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2662:	d136      	bne.n	26d2 <am_hal_i2c_bit_bang_receive+0x34e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2664:	f7fe f934 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2668:	6961      	ldr	r1, [r4, #20]
    266a:	69a3      	ldr	r3, [r4, #24]
    266c:	680a      	ldr	r2, [r1, #0]
    266e:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2670:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2674:	d12d      	bne.n	26d2 <am_hal_i2c_bit_bang_receive+0x34e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2676:	f7fe f92b 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    267a:	6961      	ldr	r1, [r4, #20]
    267c:	69a3      	ldr	r3, [r4, #24]
    267e:	680a      	ldr	r2, [r1, #0]
    2680:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2682:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2686:	d124      	bne.n	26d2 <am_hal_i2c_bit_bang_receive+0x34e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2688:	f7fe f922 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    268c:	6961      	ldr	r1, [r4, #20]
    268e:	69a3      	ldr	r3, [r4, #24]
    2690:	680a      	ldr	r2, [r1, #0]
    2692:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2694:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2698:	d11b      	bne.n	26d2 <am_hal_i2c_bit_bang_receive+0x34e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    269a:	f7fe f919 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    269e:	6961      	ldr	r1, [r4, #20]
    26a0:	69a3      	ldr	r3, [r4, #24]
    26a2:	680a      	ldr	r2, [r1, #0]
    26a4:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    26a6:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    26aa:	d112      	bne.n	26d2 <am_hal_i2c_bit_bang_receive+0x34e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    26ac:	f7fe f910 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    26b0:	6961      	ldr	r1, [r4, #20]
    26b2:	69a3      	ldr	r3, [r4, #24]
    26b4:	680a      	ldr	r2, [r1, #0]
    26b6:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    26b8:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    26bc:	d109      	bne.n	26d2 <am_hal_i2c_bit_bang_receive+0x34e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    26be:	f7fe f907 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    26c2:	6960      	ldr	r0, [r4, #20]
    26c4:	69a1      	ldr	r1, [r4, #24]
    26c6:	6803      	ldr	r3, [r0, #0]
    26c8:	420b      	tst	r3, r1
    26ca:	d102      	bne.n	26d2 <am_hal_i2c_bit_bang_receive+0x34e>
        if (--maxLoop == 0)
    26cc:	3d08      	subs	r5, #8
    26ce:	d1b6      	bne.n	263e <am_hal_i2c_bit_bang_receive+0x2ba>
    26d0:	e6b8      	b.n	2444 <am_hal_i2c_bit_bang_receive+0xc0>
        if ( GET_SDA() )
    26d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    26d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    26d6:	6811      	ldr	r1, [r2, #0]
    26d8:	4201      	tst	r1, r0
    26da:	d003      	beq.n	26e4 <am_hal_i2c_bit_bang_receive+0x360>
            data_byte |=  (0x80 >> i);
    26dc:	fa48 f306 	asr.w	r3, r8, r6
    26e0:	431f      	orrs	r7, r3
    26e2:	b2ff      	uxtb	r7, r7
    for (i = 0; i < 8; i++)
    26e4:	3601      	adds	r6, #1
        WAIT_I2C_CLOCK_HI_PERIOD();
    26e6:	2005      	movs	r0, #5
    26e8:	f7fe f8f2 	bl	8d0 <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    26ec:	2e08      	cmp	r6, #8
    26ee:	d193      	bne.n	2618 <am_hal_i2c_bit_bang_receive+0x294>
    WRITE_SCL_LO();
    26f0:	6921      	ldr	r1, [r4, #16]
        WRITE_SDA_LO();
    26f2:	6a26      	ldr	r6, [r4, #32]
    WRITE_SCL_LO();
    26f4:	69a0      	ldr	r0, [r4, #24]
        WRITE_SDA_LO();
    26f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    *pRxByte = data_byte;
    26f8:	f809 7b01 	strb.w	r7, [r9], #1
    WRITE_SCL_LO();
    26fc:	6008      	str	r0, [r1, #0]
        WRITE_SDA_LO();
    26fe:	6032      	str	r2, [r6, #0]
    WAIT_I2C_CLOCK_LOW_PERIOD();
    2700:	2007      	movs	r0, #7
    2702:	f7fe f8e5 	bl	8d0 <am_hal_flash_delay>
    PULL_SCL_HI();
    2706:	68e7      	ldr	r7, [r4, #12]
    2708:	69a3      	ldr	r3, [r4, #24]
    while (!GET_SCL())
    270a:	6961      	ldr	r1, [r4, #20]
    PULL_SCL_HI();
    270c:	603b      	str	r3, [r7, #0]
    while (!GET_SCL())
    270e:	680e      	ldr	r6, [r1, #0]
    2710:	4233      	tst	r3, r6
    2712:	bf08      	it	eq
    2714:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    2718:	d149      	bne.n	27ae <am_hal_i2c_bit_bang_receive+0x42a>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    271a:	2004      	movs	r0, #4
    271c:	f7fe f8d8 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2720:	6962      	ldr	r2, [r4, #20]
    2722:	69a7      	ldr	r7, [r4, #24]
    2724:	6813      	ldr	r3, [r2, #0]
    2726:	423b      	tst	r3, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2728:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    272c:	d13f      	bne.n	27ae <am_hal_i2c_bit_bang_receive+0x42a>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    272e:	f7fe f8cf 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2732:	6961      	ldr	r1, [r4, #20]
    2734:	69a6      	ldr	r6, [r4, #24]
    2736:	680a      	ldr	r2, [r1, #0]
    2738:	4232      	tst	r2, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    273a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    273e:	d136      	bne.n	27ae <am_hal_i2c_bit_bang_receive+0x42a>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2740:	f7fe f8c6 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2744:	6967      	ldr	r7, [r4, #20]
    2746:	69a3      	ldr	r3, [r4, #24]
    2748:	6839      	ldr	r1, [r7, #0]
    274a:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    274c:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2750:	d12d      	bne.n	27ae <am_hal_i2c_bit_bang_receive+0x42a>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2752:	f7fe f8bd 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2756:	6966      	ldr	r6, [r4, #20]
    2758:	69a7      	ldr	r7, [r4, #24]
    275a:	6832      	ldr	r2, [r6, #0]
    275c:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    275e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2762:	d124      	bne.n	27ae <am_hal_i2c_bit_bang_receive+0x42a>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2764:	f7fe f8b4 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2768:	6961      	ldr	r1, [r4, #20]
    276a:	69a3      	ldr	r3, [r4, #24]
    276c:	680e      	ldr	r6, [r1, #0]
    276e:	421e      	tst	r6, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2770:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2774:	d11b      	bne.n	27ae <am_hal_i2c_bit_bang_receive+0x42a>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2776:	f7fe f8ab 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    277a:	6967      	ldr	r7, [r4, #20]
    277c:	69a1      	ldr	r1, [r4, #24]
    277e:	683a      	ldr	r2, [r7, #0]
    2780:	420a      	tst	r2, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2782:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2786:	d112      	bne.n	27ae <am_hal_i2c_bit_bang_receive+0x42a>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2788:	f7fe f8a2 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    278c:	6966      	ldr	r6, [r4, #20]
    278e:	69a3      	ldr	r3, [r4, #24]
    2790:	6837      	ldr	r7, [r6, #0]
    2792:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2794:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2798:	d109      	bne.n	27ae <am_hal_i2c_bit_bang_receive+0x42a>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    279a:	f7fe f899 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    279e:	6960      	ldr	r0, [r4, #20]
    27a0:	69a1      	ldr	r1, [r4, #24]
    27a2:	6802      	ldr	r2, [r0, #0]
    27a4:	420a      	tst	r2, r1
    27a6:	d102      	bne.n	27ae <am_hal_i2c_bit_bang_receive+0x42a>
        if (--maxLoop == 0)
    27a8:	3d08      	subs	r5, #8
    27aa:	d1b6      	bne.n	271a <am_hal_i2c_bit_bang_receive+0x396>
    27ac:	e64a      	b.n	2444 <am_hal_i2c_bit_bang_receive+0xc0>
    WAIT_I2C_CLOCK_HI_PERIOD();
    27ae:	2005      	movs	r0, #5
    27b0:	f7fe f88e 	bl	8d0 <am_hal_flash_delay>
    for (ui32I = 0; ui32I < number_of_bytes - 1; ui32I++)
    27b4:	45d9      	cmp	r9, fp
        pData++;
    27b6:	46c8      	mov	r8, r9
    for (ui32I = 0; ui32I < number_of_bytes - 1; ui32I++)
    27b8:	f47f af2a 	bne.w	2610 <am_hal_i2c_bit_bang_receive+0x28c>
    while (!GET_SCL())
    27bc:	2600      	movs	r6, #0
    27be:	4637      	mov	r7, r6
            data_byte |=  (0x80 >> i);
    27c0:	f04f 0980 	mov.w	r9, #128	; 0x80
        WRITE_SCL_LO();
    27c4:	6920      	ldr	r0, [r4, #16]
        PULL_SDA_HI();
    27c6:	69e3      	ldr	r3, [r4, #28]
        WRITE_SCL_LO();
    27c8:	69a1      	ldr	r1, [r4, #24]
        PULL_SDA_HI();
    27ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        WRITE_SCL_LO();
    27cc:	6001      	str	r1, [r0, #0]
        PULL_SDA_HI();
    27ce:	601a      	str	r2, [r3, #0]
        WAIT_I2C_CLOCK_LOW_PERIOD();
    27d0:	2007      	movs	r0, #7
    27d2:	f7fe f87d 	bl	8d0 <am_hal_flash_delay>
    PULL_SCL_HI();
    27d6:	68e0      	ldr	r0, [r4, #12]
    27d8:	69a3      	ldr	r3, [r4, #24]
    while (!GET_SCL())
    27da:	6961      	ldr	r1, [r4, #20]
    PULL_SCL_HI();
    27dc:	6003      	str	r3, [r0, #0]
    while (!GET_SCL())
    27de:	680a      	ldr	r2, [r1, #0]
    27e0:	4213      	tst	r3, r2
    27e2:	bf08      	it	eq
    27e4:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    27e8:	d149      	bne.n	287e <am_hal_i2c_bit_bang_receive+0x4fa>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    27ea:	2004      	movs	r0, #4
    27ec:	f7fe f870 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    27f0:	6961      	ldr	r1, [r4, #20]
    27f2:	69a3      	ldr	r3, [r4, #24]
    27f4:	680a      	ldr	r2, [r1, #0]
    27f6:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    27f8:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    27fc:	d13f      	bne.n	287e <am_hal_i2c_bit_bang_receive+0x4fa>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    27fe:	f7fe f867 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2802:	6961      	ldr	r1, [r4, #20]
    2804:	69a3      	ldr	r3, [r4, #24]
    2806:	680a      	ldr	r2, [r1, #0]
    2808:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    280a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    280e:	d136      	bne.n	287e <am_hal_i2c_bit_bang_receive+0x4fa>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2810:	f7fe f85e 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2814:	6961      	ldr	r1, [r4, #20]
    2816:	69a3      	ldr	r3, [r4, #24]
    2818:	680a      	ldr	r2, [r1, #0]
    281a:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    281c:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2820:	d12d      	bne.n	287e <am_hal_i2c_bit_bang_receive+0x4fa>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2822:	f7fe f855 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2826:	6961      	ldr	r1, [r4, #20]
    2828:	69a3      	ldr	r3, [r4, #24]
    282a:	680a      	ldr	r2, [r1, #0]
    282c:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    282e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2832:	d124      	bne.n	287e <am_hal_i2c_bit_bang_receive+0x4fa>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2834:	f7fe f84c 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2838:	6961      	ldr	r1, [r4, #20]
    283a:	69a3      	ldr	r3, [r4, #24]
    283c:	680a      	ldr	r2, [r1, #0]
    283e:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2840:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2844:	d11b      	bne.n	287e <am_hal_i2c_bit_bang_receive+0x4fa>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2846:	f7fe f843 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    284a:	6961      	ldr	r1, [r4, #20]
    284c:	69a3      	ldr	r3, [r4, #24]
    284e:	680a      	ldr	r2, [r1, #0]
    2850:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2852:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2856:	d112      	bne.n	287e <am_hal_i2c_bit_bang_receive+0x4fa>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2858:	f7fe f83a 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    285c:	6961      	ldr	r1, [r4, #20]
    285e:	69a3      	ldr	r3, [r4, #24]
    2860:	680a      	ldr	r2, [r1, #0]
    2862:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2864:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2868:	d109      	bne.n	287e <am_hal_i2c_bit_bang_receive+0x4fa>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    286a:	f7fe f831 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    286e:	6960      	ldr	r0, [r4, #20]
    2870:	69a1      	ldr	r1, [r4, #24]
    2872:	6803      	ldr	r3, [r0, #0]
    2874:	420b      	tst	r3, r1
    2876:	d102      	bne.n	287e <am_hal_i2c_bit_bang_receive+0x4fa>
        if (--maxLoop == 0)
    2878:	3d08      	subs	r5, #8
    287a:	d1b6      	bne.n	27ea <am_hal_i2c_bit_bang_receive+0x466>
    287c:	e5e2      	b.n	2444 <am_hal_i2c_bit_bang_receive+0xc0>
        if ( GET_SDA() )
    287e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    2880:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    2882:	6811      	ldr	r1, [r2, #0]
    2884:	4201      	tst	r1, r0
    2886:	d003      	beq.n	2890 <am_hal_i2c_bit_bang_receive+0x50c>
            data_byte |=  (0x80 >> i);
    2888:	fa49 f307 	asr.w	r3, r9, r7
    288c:	431e      	orrs	r6, r3
    288e:	b2f6      	uxtb	r6, r6
    for (i = 0; i < 8; i++)
    2890:	3701      	adds	r7, #1
        WAIT_I2C_CLOCK_HI_PERIOD();
    2892:	2005      	movs	r0, #5
    2894:	f7fe f81c 	bl	8d0 <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    2898:	2f08      	cmp	r7, #8
    289a:	d193      	bne.n	27c4 <am_hal_i2c_bit_bang_receive+0x440>
    WRITE_SCL_LO();
    289c:	6921      	ldr	r1, [r4, #16]
        PULL_SDA_HI();
    289e:	69e7      	ldr	r7, [r4, #28]
    WRITE_SCL_LO();
    28a0:	69a5      	ldr	r5, [r4, #24]
        PULL_SDA_HI();
    28a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    *pRxByte = data_byte;
    28a4:	f888 6000 	strb.w	r6, [r8]
    WAIT_I2C_CLOCK_LOW_PERIOD();
    28a8:	2007      	movs	r0, #7
    WRITE_SCL_LO();
    28aa:	600d      	str	r5, [r1, #0]
        PULL_SDA_HI();
    28ac:	603a      	str	r2, [r7, #0]
    WAIT_I2C_CLOCK_LOW_PERIOD();
    28ae:	f7fe f80f 	bl	8d0 <am_hal_flash_delay>
    PULL_SCL_HI();
    28b2:	68e0      	ldr	r0, [r4, #12]
    28b4:	69a3      	ldr	r3, [r4, #24]
    while (!GET_SCL())
    28b6:	6966      	ldr	r6, [r4, #20]
    PULL_SCL_HI();
    28b8:	6003      	str	r3, [r0, #0]
    while (!GET_SCL())
    28ba:	6831      	ldr	r1, [r6, #0]
    28bc:	4219      	tst	r1, r3
    28be:	bf08      	it	eq
    28c0:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    28c4:	f040 811d 	bne.w	2b02 <am_hal_i2c_bit_bang_receive+0x77e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    28c8:	2004      	movs	r0, #4
    28ca:	f7fe f801 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    28ce:	6967      	ldr	r7, [r4, #20]
    28d0:	69a3      	ldr	r3, [r4, #24]
    28d2:	683a      	ldr	r2, [r7, #0]
    28d4:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    28d6:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    28da:	f040 8112 	bne.w	2b02 <am_hal_i2c_bit_bang_receive+0x77e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    28de:	f7fd fff7 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    28e2:	6966      	ldr	r6, [r4, #20]
    28e4:	69a1      	ldr	r1, [r4, #24]
    28e6:	6837      	ldr	r7, [r6, #0]
    28e8:	420f      	tst	r7, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    28ea:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    28ee:	f040 8108 	bne.w	2b02 <am_hal_i2c_bit_bang_receive+0x77e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    28f2:	f7fd ffed 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    28f6:	6962      	ldr	r2, [r4, #20]
    28f8:	69a3      	ldr	r3, [r4, #24]
    28fa:	6816      	ldr	r6, [r2, #0]
    28fc:	421e      	tst	r6, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    28fe:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2902:	f040 80fe 	bne.w	2b02 <am_hal_i2c_bit_bang_receive+0x77e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2906:	f7fd ffe3 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    290a:	6961      	ldr	r1, [r4, #20]
    290c:	69a7      	ldr	r7, [r4, #24]
    290e:	680a      	ldr	r2, [r1, #0]
    2910:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2912:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2916:	f040 80f4 	bne.w	2b02 <am_hal_i2c_bit_bang_receive+0x77e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    291a:	f7fd ffd9 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    291e:	6966      	ldr	r6, [r4, #20]
    2920:	69a3      	ldr	r3, [r4, #24]
    2922:	6831      	ldr	r1, [r6, #0]
    2924:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2926:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    292a:	f040 80ea 	bne.w	2b02 <am_hal_i2c_bit_bang_receive+0x77e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    292e:	f7fd ffcf 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2932:	6967      	ldr	r7, [r4, #20]
    2934:	69a6      	ldr	r6, [r4, #24]
    2936:	683a      	ldr	r2, [r7, #0]
    2938:	4232      	tst	r2, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    293a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    293e:	f040 80e0 	bne.w	2b02 <am_hal_i2c_bit_bang_receive+0x77e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2942:	f7fd ffc5 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2946:	6961      	ldr	r1, [r4, #20]
    2948:	69a3      	ldr	r3, [r4, #24]
    294a:	680f      	ldr	r7, [r1, #0]
    294c:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    294e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2952:	f040 80d6 	bne.w	2b02 <am_hal_i2c_bit_bang_receive+0x77e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2956:	f7fd ffbb 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    295a:	6960      	ldr	r0, [r4, #20]
    295c:	69a6      	ldr	r6, [r4, #24]
    295e:	6802      	ldr	r2, [r0, #0]
    2960:	4232      	tst	r2, r6
    2962:	f040 80ce 	bne.w	2b02 <am_hal_i2c_bit_bang_receive+0x77e>
        if (--maxLoop == 0)
    2966:	3d08      	subs	r5, #8
    2968:	d1ae      	bne.n	28c8 <am_hal_i2c_bit_bang_receive+0x544>
    296a:	e56b      	b.n	2444 <am_hal_i2c_bit_bang_receive+0xc0>
        if ( one_byte & (0x80 >> i) )
    296c:	f04f 0980 	mov.w	r9, #128	; 0x80
    2970:	9b00      	ldr	r3, [sp, #0]
        WRITE_SCL_LO();
    2972:	6920      	ldr	r0, [r4, #16]
    2974:	69a2      	ldr	r2, [r4, #24]
    2976:	6002      	str	r2, [r0, #0]
        if ( one_byte & (0x80 >> i) )
    2978:	fa49 f105 	asr.w	r1, r9, r5
    297c:	4219      	tst	r1, r3
            PULL_SDA_HI();
    297e:	bf14      	ite	ne
    2980:	69e1      	ldrne	r1, [r4, #28]
            WRITE_SDA_LO();
    2982:	6a21      	ldreq	r1, [r4, #32]
    2984:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    2986:	6008      	str	r0, [r1, #0]
        WAIT_I2C_CLOCK_LOW_PERIOD();
    2988:	2007      	movs	r0, #7
    298a:	f7fd ffa1 	bl	8d0 <am_hal_flash_delay>
    PULL_SCL_HI();
    298e:	68e1      	ldr	r1, [r4, #12]
    2990:	69a3      	ldr	r3, [r4, #24]
    while (!GET_SCL())
    2992:	6962      	ldr	r2, [r4, #20]
    PULL_SCL_HI();
    2994:	600b      	str	r3, [r1, #0]
    while (!GET_SCL())
    2996:	6810      	ldr	r0, [r2, #0]
    2998:	4203      	tst	r3, r0
    299a:	bf08      	it	eq
    299c:	f44f 76c8 	moveq.w	r6, #400	; 0x190
    29a0:	d149      	bne.n	2a36 <am_hal_i2c_bit_bang_receive+0x6b2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    29a2:	2004      	movs	r0, #4
    29a4:	f7fd ff94 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    29a8:	6961      	ldr	r1, [r4, #20]
    29aa:	69a3      	ldr	r3, [r4, #24]
    29ac:	680a      	ldr	r2, [r1, #0]
    29ae:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    29b0:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    29b4:	d13f      	bne.n	2a36 <am_hal_i2c_bit_bang_receive+0x6b2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    29b6:	f7fd ff8b 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    29ba:	6967      	ldr	r7, [r4, #20]
    29bc:	69a1      	ldr	r1, [r4, #24]
    29be:	683b      	ldr	r3, [r7, #0]
    29c0:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    29c2:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    29c6:	d136      	bne.n	2a36 <am_hal_i2c_bit_bang_receive+0x6b2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    29c8:	f7fd ff82 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    29cc:	6962      	ldr	r2, [r4, #20]
    29ce:	69a7      	ldr	r7, [r4, #24]
    29d0:	6811      	ldr	r1, [r2, #0]
    29d2:	4239      	tst	r1, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    29d4:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    29d8:	d12d      	bne.n	2a36 <am_hal_i2c_bit_bang_receive+0x6b2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    29da:	f7fd ff79 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    29de:	6962      	ldr	r2, [r4, #20]
    29e0:	69a3      	ldr	r3, [r4, #24]
    29e2:	6817      	ldr	r7, [r2, #0]
    29e4:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    29e6:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    29ea:	d124      	bne.n	2a36 <am_hal_i2c_bit_bang_receive+0x6b2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    29ec:	f7fd ff70 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    29f0:	6961      	ldr	r1, [r4, #20]
    29f2:	69a3      	ldr	r3, [r4, #24]
    29f4:	680a      	ldr	r2, [r1, #0]
    29f6:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    29f8:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    29fc:	d11b      	bne.n	2a36 <am_hal_i2c_bit_bang_receive+0x6b2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    29fe:	f7fd ff67 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2a02:	6967      	ldr	r7, [r4, #20]
    2a04:	69a1      	ldr	r1, [r4, #24]
    2a06:	683b      	ldr	r3, [r7, #0]
    2a08:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2a0a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2a0e:	d112      	bne.n	2a36 <am_hal_i2c_bit_bang_receive+0x6b2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2a10:	f7fd ff5e 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2a14:	6962      	ldr	r2, [r4, #20]
    2a16:	69a7      	ldr	r7, [r4, #24]
    2a18:	6811      	ldr	r1, [r2, #0]
    2a1a:	4239      	tst	r1, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2a1c:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2a20:	d109      	bne.n	2a36 <am_hal_i2c_bit_bang_receive+0x6b2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2a22:	f7fd ff55 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2a26:	6960      	ldr	r0, [r4, #20]
    2a28:	69a3      	ldr	r3, [r4, #24]
    2a2a:	6802      	ldr	r2, [r0, #0]
    2a2c:	421a      	tst	r2, r3
    2a2e:	d102      	bne.n	2a36 <am_hal_i2c_bit_bang_receive+0x6b2>
        if (--maxLoop == 0)
    2a30:	3e08      	subs	r6, #8
    2a32:	d1b6      	bne.n	29a2 <am_hal_i2c_bit_bang_receive+0x61e>
    2a34:	e506      	b.n	2444 <am_hal_i2c_bit_bang_receive+0xc0>
    for (i = 0; i < 8; i++)
    2a36:	3501      	adds	r5, #1
        WAIT_I2C_CLOCK_HI_PERIOD();
    2a38:	2005      	movs	r0, #5
    2a3a:	f7fd ff49 	bl	8d0 <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    2a3e:	2d08      	cmp	r5, #8
    2a40:	d196      	bne.n	2970 <am_hal_i2c_bit_bang_receive+0x5ec>
    WRITE_SCL_LO();
    2a42:	6926      	ldr	r6, [r4, #16]
    2a44:	69a7      	ldr	r7, [r4, #24]
    2a46:	6037      	str	r7, [r6, #0]
    WAIT_I2C_CLOCK_LOW_PERIOD();
    2a48:	2007      	movs	r0, #7
    2a4a:	f7fd ff41 	bl	8d0 <am_hal_flash_delay>
    PULL_SCL_HI();
    2a4e:	68e1      	ldr	r1, [r4, #12]
    2a50:	69a0      	ldr	r0, [r4, #24]
    while (!GET_SCL())
    2a52:	6963      	ldr	r3, [r4, #20]
    PULL_SCL_HI();
    2a54:	6008      	str	r0, [r1, #0]
    while (!GET_SCL())
    2a56:	681a      	ldr	r2, [r3, #0]
    2a58:	4202      	tst	r2, r0
    2a5a:	bf08      	it	eq
    2a5c:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    2a60:	f040 80b4 	bne.w	2bcc <am_hal_i2c_bit_bang_receive+0x848>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2a64:	2004      	movs	r0, #4
    2a66:	f7fd ff33 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2a6a:	6966      	ldr	r6, [r4, #20]
    2a6c:	69a7      	ldr	r7, [r4, #24]
    2a6e:	6831      	ldr	r1, [r6, #0]
    2a70:	4239      	tst	r1, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2a72:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2a76:	f040 80a9 	bne.w	2bcc <am_hal_i2c_bit_bang_receive+0x848>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2a7a:	f7fd ff29 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2a7e:	6962      	ldr	r2, [r4, #20]
    2a80:	69a3      	ldr	r3, [r4, #24]
    2a82:	6816      	ldr	r6, [r2, #0]
    2a84:	421e      	tst	r6, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2a86:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2a8a:	f040 809f 	bne.w	2bcc <am_hal_i2c_bit_bang_receive+0x848>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2a8e:	f7fd ff1f 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2a92:	6967      	ldr	r7, [r4, #20]
    2a94:	69a1      	ldr	r1, [r4, #24]
    2a96:	683a      	ldr	r2, [r7, #0]
    2a98:	420a      	tst	r2, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2a9a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2a9e:	f040 8095 	bne.w	2bcc <am_hal_i2c_bit_bang_receive+0x848>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2aa2:	f7fd ff15 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2aa6:	6966      	ldr	r6, [r4, #20]
    2aa8:	69a3      	ldr	r3, [r4, #24]
    2aaa:	6837      	ldr	r7, [r6, #0]
    2aac:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2aae:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2ab2:	f040 808b 	bne.w	2bcc <am_hal_i2c_bit_bang_receive+0x848>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2ab6:	f7fd ff0b 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2aba:	6961      	ldr	r1, [r4, #20]
    2abc:	69a6      	ldr	r6, [r4, #24]
    2abe:	680a      	ldr	r2, [r1, #0]
    2ac0:	4232      	tst	r2, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2ac2:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2ac6:	f040 8081 	bne.w	2bcc <am_hal_i2c_bit_bang_receive+0x848>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2aca:	f7fd ff01 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2ace:	6967      	ldr	r7, [r4, #20]
    2ad0:	69a3      	ldr	r3, [r4, #24]
    2ad2:	6839      	ldr	r1, [r7, #0]
    2ad4:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2ad6:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2ada:	d177      	bne.n	2bcc <am_hal_i2c_bit_bang_receive+0x848>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2adc:	f7fd fef8 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2ae0:	6966      	ldr	r6, [r4, #20]
    2ae2:	69a7      	ldr	r7, [r4, #24]
    2ae4:	6832      	ldr	r2, [r6, #0]
    2ae6:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2ae8:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2aec:	d16e      	bne.n	2bcc <am_hal_i2c_bit_bang_receive+0x848>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2aee:	f7fd feef 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2af2:	6960      	ldr	r0, [r4, #20]
    2af4:	69a3      	ldr	r3, [r4, #24]
    2af6:	6801      	ldr	r1, [r0, #0]
    2af8:	4219      	tst	r1, r3
    2afa:	d167      	bne.n	2bcc <am_hal_i2c_bit_bang_receive+0x848>
        if (--maxLoop == 0)
    2afc:	3d08      	subs	r5, #8
    2afe:	d1b1      	bne.n	2a64 <am_hal_i2c_bit_bang_receive+0x6e0>
    2b00:	e4a0      	b.n	2444 <am_hal_i2c_bit_bang_receive+0xc0>
    WAIT_I2C_CLOCK_HI_PERIOD();
    2b02:	2005      	movs	r0, #5
    2b04:	f7fd fee4 	bl	8d0 <am_hal_flash_delay>
    WRITE_SCL_LO();
    2b08:	6925      	ldr	r5, [r4, #16]
    2b0a:	69a1      	ldr	r1, [r4, #24]
    2b0c:	6029      	str	r1, [r5, #0]
    WAIT_FOR_QUARTER_I2C_CLOCK();
    2b0e:	2004      	movs	r0, #4
    2b10:	f7fd fede 	bl	8d0 <am_hal_flash_delay>
    if (!bNoStop)
    2b14:	f1ba 0f00 	cmp.w	sl, #0
    2b18:	d16f      	bne.n	2bfa <am_hal_i2c_bit_bang_receive+0x876>
        WRITE_SDA_LO();
    2b1a:	6a21      	ldr	r1, [r4, #32]
    2b1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b1e:	600b      	str	r3, [r1, #0]
    WAIT_FOR_QUARTER_I2C_CLOCK();
    2b20:	2004      	movs	r0, #4
    2b22:	f7fd fed5 	bl	8d0 <am_hal_flash_delay>
    PULL_SCL_HI();
    2b26:	68e7      	ldr	r7, [r4, #12]
    2b28:	69a0      	ldr	r0, [r4, #24]
    while (!GET_SCL())
    2b2a:	6966      	ldr	r6, [r4, #20]
    PULL_SCL_HI();
    2b2c:	6038      	str	r0, [r7, #0]
    while (!GET_SCL())
    2b2e:	6832      	ldr	r2, [r6, #0]
    2b30:	4202      	tst	r2, r0
    2b32:	d174      	bne.n	2c1e <am_hal_i2c_bit_bang_receive+0x89a>
    2b34:	f44f 75c8 	mov.w	r5, #400	; 0x190
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2b38:	2004      	movs	r0, #4
    2b3a:	f7fd fec9 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2b3e:	6961      	ldr	r1, [r4, #20]
    2b40:	69a3      	ldr	r3, [r4, #24]
    2b42:	680f      	ldr	r7, [r1, #0]
    2b44:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2b46:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2b4a:	d14b      	bne.n	2be4 <am_hal_i2c_bit_bang_receive+0x860>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2b4c:	f7fd fec0 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2b50:	6966      	ldr	r6, [r4, #20]
    2b52:	69a1      	ldr	r1, [r4, #24]
    2b54:	6832      	ldr	r2, [r6, #0]
    2b56:	420a      	tst	r2, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2b58:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2b5c:	d142      	bne.n	2be4 <am_hal_i2c_bit_bang_receive+0x860>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2b5e:	f7fd feb7 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2b62:	6967      	ldr	r7, [r4, #20]
    2b64:	69a3      	ldr	r3, [r4, #24]
    2b66:	683e      	ldr	r6, [r7, #0]
    2b68:	421e      	tst	r6, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2b6a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2b6e:	d139      	bne.n	2be4 <am_hal_i2c_bit_bang_receive+0x860>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2b70:	f7fd feae 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2b74:	6961      	ldr	r1, [r4, #20]
    2b76:	69a7      	ldr	r7, [r4, #24]
    2b78:	680a      	ldr	r2, [r1, #0]
    2b7a:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2b7c:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2b80:	d130      	bne.n	2be4 <am_hal_i2c_bit_bang_receive+0x860>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2b82:	f7fd fea5 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2b86:	6966      	ldr	r6, [r4, #20]
    2b88:	69a3      	ldr	r3, [r4, #24]
    2b8a:	6831      	ldr	r1, [r6, #0]
    2b8c:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2b8e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2b92:	d127      	bne.n	2be4 <am_hal_i2c_bit_bang_receive+0x860>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2b94:	f7fd fe9c 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2b98:	6967      	ldr	r7, [r4, #20]
    2b9a:	69a6      	ldr	r6, [r4, #24]
    2b9c:	683a      	ldr	r2, [r7, #0]
    2b9e:	4232      	tst	r2, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2ba0:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2ba4:	d11e      	bne.n	2be4 <am_hal_i2c_bit_bang_receive+0x860>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2ba6:	f7fd fe93 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2baa:	6961      	ldr	r1, [r4, #20]
    2bac:	69a3      	ldr	r3, [r4, #24]
    2bae:	680f      	ldr	r7, [r1, #0]
    2bb0:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2bb2:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2bb6:	d115      	bne.n	2be4 <am_hal_i2c_bit_bang_receive+0x860>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2bb8:	f7fd fe8a 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2bbc:	6960      	ldr	r0, [r4, #20]
    2bbe:	69a6      	ldr	r6, [r4, #24]
    2bc0:	6802      	ldr	r2, [r0, #0]
    2bc2:	4232      	tst	r2, r6
    2bc4:	d10e      	bne.n	2be4 <am_hal_i2c_bit_bang_receive+0x860>
        if (--maxLoop == 0)
    2bc6:	3d08      	subs	r5, #8
    2bc8:	d1b6      	bne.n	2b38 <am_hal_i2c_bit_bang_receive+0x7b4>
    2bca:	e43b      	b.n	2444 <am_hal_i2c_bit_bang_receive+0xc0>
    data_naked = GET_SDA();
    2bcc:	6a65      	ldr	r5, [r4, #36]	; 0x24
    2bce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2bd0:	682d      	ldr	r5, [r5, #0]
    WAIT_I2C_CLOCK_HI_PERIOD();
    2bd2:	2005      	movs	r0, #5
    data_naked = GET_SDA();
    2bd4:	4035      	ands	r5, r6
    WAIT_I2C_CLOCK_HI_PERIOD();
    2bd6:	f7fd fe7b 	bl	8d0 <am_hal_flash_delay>
    if ( data_naked )
    2bda:	2d00      	cmp	r5, #0
    2bdc:	f43f ad12 	beq.w	2604 <am_hal_i2c_bit_bang_receive+0x280>
        return AM_HAL_I2C_BIT_BANG_DATA_NAKED;
    2be0:	2002      	movs	r0, #2
    2be2:	e430      	b.n	2446 <am_hal_i2c_bit_bang_receive+0xc2>
    WAIT_I2C_CLOCK_HI_PERIOD();
    2be4:	2005      	movs	r0, #5
    2be6:	f7fd fe73 	bl	8d0 <am_hal_flash_delay>
    if (!bNoStop)
    2bea:	f1ba 0f00 	cmp.w	sl, #0
    2bee:	d114      	bne.n	2c1a <am_hal_i2c_bit_bang_receive+0x896>
        PULL_SDA_HI();
    2bf0:	69e5      	ldr	r5, [r4, #28]
    2bf2:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    2bf4:	602c      	str	r4, [r5, #0]
    return AM_HAL_I2C_BIT_BANG_SUCCESS;
    2bf6:	2000      	movs	r0, #0
    2bf8:	e425      	b.n	2446 <am_hal_i2c_bit_bang_receive+0xc2>
        PULL_SDA_HI();
    2bfa:	69e3      	ldr	r3, [r4, #28]
    2bfc:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    2bfe:	601f      	str	r7, [r3, #0]
    WAIT_FOR_QUARTER_I2C_CLOCK();
    2c00:	2004      	movs	r0, #4
    2c02:	f7fd fe65 	bl	8d0 <am_hal_flash_delay>
    PULL_SCL_HI();
    2c06:	68e0      	ldr	r0, [r4, #12]
    2c08:	69a6      	ldr	r6, [r4, #24]
    while (!GET_SCL())
    2c0a:	6962      	ldr	r2, [r4, #20]
    PULL_SCL_HI();
    2c0c:	6006      	str	r6, [r0, #0]
    while (!GET_SCL())
    2c0e:	6815      	ldr	r5, [r2, #0]
    2c10:	422e      	tst	r6, r5
    2c12:	d08f      	beq.n	2b34 <am_hal_i2c_bit_bang_receive+0x7b0>
    WAIT_I2C_CLOCK_HI_PERIOD();
    2c14:	2005      	movs	r0, #5
    2c16:	f7fd fe5b 	bl	8d0 <am_hal_flash_delay>
    return AM_HAL_I2C_BIT_BANG_SUCCESS;
    2c1a:	2000      	movs	r0, #0
    2c1c:	e413      	b.n	2446 <am_hal_i2c_bit_bang_receive+0xc2>
    WAIT_I2C_CLOCK_HI_PERIOD();
    2c1e:	2005      	movs	r0, #5
    2c20:	f7fd fe56 	bl	8d0 <am_hal_flash_delay>
    2c24:	e7e4      	b.n	2bf0 <am_hal_i2c_bit_bang_receive+0x86c>
    2c26:	bf00      	nop

00002c28 <am_hal_i2c_bit_bang_send>:
//*****************************************************************************
am_hal_i2c_bit_bang_enum_e
am_hal_i2c_bit_bang_send(uint8_t address, uint32_t number_of_bytes,
                         uint8_t *pData, uint8_t ui8Offset,
                         bool bUseOffset, bool bNoStop)
{
    2c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    PULL_SCL_HI();
    2c2c:	4c9b      	ldr	r4, [pc, #620]	; (2e9c <am_hal_i2c_bit_bang_send+0x274>)
{
    2c2e:	b083      	sub	sp, #12
    PULL_SCL_HI();
    2c30:	68e7      	ldr	r7, [r4, #12]
{
    2c32:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
    PULL_SCL_HI();
    2c36:	69a6      	ldr	r6, [r4, #24]
{
    2c38:	9501      	str	r5, [sp, #4]
    while (!GET_SCL())
    2c3a:	6965      	ldr	r5, [r4, #20]
    PULL_SCL_HI();
    2c3c:	603e      	str	r6, [r7, #0]
    while (!GET_SCL())
    2c3e:	682d      	ldr	r5, [r5, #0]
{
    2c40:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
    2c44:	9700      	str	r7, [sp, #0]
    while (!GET_SCL())
    2c46:	422e      	tst	r6, r5
{
    2c48:	4607      	mov	r7, r0
    2c4a:	468a      	mov	sl, r1
    2c4c:	4691      	mov	r9, r2
    2c4e:	469b      	mov	fp, r3
    while (!GET_SCL())
    2c50:	bf08      	it	eq
    2c52:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    2c56:	d14c      	bne.n	2cf2 <am_hal_i2c_bit_bang_send+0xca>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2c58:	2004      	movs	r0, #4
    2c5a:	f7fd fe39 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2c5e:	6962      	ldr	r2, [r4, #20]
    2c60:	69a3      	ldr	r3, [r4, #24]
    2c62:	6811      	ldr	r1, [r2, #0]
    2c64:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2c66:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2c6a:	d142      	bne.n	2cf2 <am_hal_i2c_bit_bang_send+0xca>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2c6c:	f7fd fe30 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2c70:	6966      	ldr	r6, [r4, #20]
    2c72:	69a3      	ldr	r3, [r4, #24]
    2c74:	6832      	ldr	r2, [r6, #0]
    2c76:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2c78:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2c7c:	d139      	bne.n	2cf2 <am_hal_i2c_bit_bang_send+0xca>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2c7e:	f7fd fe27 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2c82:	6961      	ldr	r1, [r4, #20]
    2c84:	69a6      	ldr	r6, [r4, #24]
    2c86:	680b      	ldr	r3, [r1, #0]
    2c88:	4233      	tst	r3, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2c8a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2c8e:	d130      	bne.n	2cf2 <am_hal_i2c_bit_bang_send+0xca>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2c90:	f7fd fe1e 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2c94:	6962      	ldr	r2, [r4, #20]
    2c96:	69a1      	ldr	r1, [r4, #24]
    2c98:	6816      	ldr	r6, [r2, #0]
    2c9a:	420e      	tst	r6, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2c9c:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2ca0:	d127      	bne.n	2cf2 <am_hal_i2c_bit_bang_send+0xca>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2ca2:	f7fd fe15 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2ca6:	6962      	ldr	r2, [r4, #20]
    2ca8:	69a3      	ldr	r3, [r4, #24]
    2caa:	6811      	ldr	r1, [r2, #0]
    2cac:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2cae:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2cb2:	d11e      	bne.n	2cf2 <am_hal_i2c_bit_bang_send+0xca>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2cb4:	f7fd fe0c 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2cb8:	6966      	ldr	r6, [r4, #20]
    2cba:	69a3      	ldr	r3, [r4, #24]
    2cbc:	6832      	ldr	r2, [r6, #0]
    2cbe:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2cc0:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2cc4:	d115      	bne.n	2cf2 <am_hal_i2c_bit_bang_send+0xca>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2cc6:	f7fd fe03 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2cca:	6961      	ldr	r1, [r4, #20]
    2ccc:	69a6      	ldr	r6, [r4, #24]
    2cce:	680b      	ldr	r3, [r1, #0]
    2cd0:	4233      	tst	r3, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2cd2:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2cd6:	d10c      	bne.n	2cf2 <am_hal_i2c_bit_bang_send+0xca>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2cd8:	f7fd fdfa 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2cdc:	6960      	ldr	r0, [r4, #20]
    2cde:	69a1      	ldr	r1, [r4, #24]
    2ce0:	6802      	ldr	r2, [r0, #0]
    2ce2:	420a      	tst	r2, r1
    2ce4:	d105      	bne.n	2cf2 <am_hal_i2c_bit_bang_send+0xca>
        if (--maxLoop == 0)
    2ce6:	3d08      	subs	r5, #8
    2ce8:	d1b6      	bne.n	2c58 <am_hal_i2c_bit_bang_send+0x30>
    }

    //
    // message successfully sent
    //
    return AM_HAL_I2C_BIT_BANG_SUCCESS;
    2cea:	2003      	movs	r0, #3
}
    2cec:	b003      	add	sp, #12
    2cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    WRITE_SDA_LO();
    2cf2:	6a26      	ldr	r6, [r4, #32]
    2cf4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2cf6:	6033      	str	r3, [r6, #0]
    WAIT_I2C_CLOCK_HI_PERIOD();
    2cf8:	2005      	movs	r0, #5
    2cfa:	f7fd fde9 	bl	8d0 <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    2cfe:	2600      	movs	r6, #0
        if ( one_byte & (0x80 >> i) )
    2d00:	f04f 0880 	mov.w	r8, #128	; 0x80
    2d04:	fa48 f306 	asr.w	r3, r8, r6
    2d08:	423b      	tst	r3, r7
        WRITE_SCL_LO();
    2d0a:	6920      	ldr	r0, [r4, #16]
            PULL_SDA_HI();
    2d0c:	bf14      	ite	ne
    2d0e:	69e3      	ldrne	r3, [r4, #28]
            WRITE_SDA_LO();
    2d10:	6a23      	ldreq	r3, [r4, #32]
        WRITE_SCL_LO();
    2d12:	69a1      	ldr	r1, [r4, #24]
            WRITE_SDA_LO();
    2d14:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        WRITE_SCL_LO();
    2d16:	6001      	str	r1, [r0, #0]
            WRITE_SDA_LO();
    2d18:	601a      	str	r2, [r3, #0]
        WAIT_I2C_CLOCK_LOW_PERIOD();
    2d1a:	2007      	movs	r0, #7
    2d1c:	f7fd fdd8 	bl	8d0 <am_hal_flash_delay>
    PULL_SCL_HI();
    2d20:	68e0      	ldr	r0, [r4, #12]
    2d22:	69a1      	ldr	r1, [r4, #24]
    while (!GET_SCL())
    2d24:	6963      	ldr	r3, [r4, #20]
    PULL_SCL_HI();
    2d26:	6001      	str	r1, [r0, #0]
    while (!GET_SCL())
    2d28:	681a      	ldr	r2, [r3, #0]
    2d2a:	4211      	tst	r1, r2
    2d2c:	bf08      	it	eq
    2d2e:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    2d32:	d149      	bne.n	2dc8 <am_hal_i2c_bit_bang_send+0x1a0>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2d34:	2004      	movs	r0, #4
    2d36:	f7fd fdcb 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2d3a:	6961      	ldr	r1, [r4, #20]
    2d3c:	69a3      	ldr	r3, [r4, #24]
    2d3e:	680a      	ldr	r2, [r1, #0]
    2d40:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2d42:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2d46:	d13f      	bne.n	2dc8 <am_hal_i2c_bit_bang_send+0x1a0>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2d48:	f7fd fdc2 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2d4c:	6961      	ldr	r1, [r4, #20]
    2d4e:	69a3      	ldr	r3, [r4, #24]
    2d50:	680a      	ldr	r2, [r1, #0]
    2d52:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2d54:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2d58:	d136      	bne.n	2dc8 <am_hal_i2c_bit_bang_send+0x1a0>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2d5a:	f7fd fdb9 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2d5e:	6961      	ldr	r1, [r4, #20]
    2d60:	69a3      	ldr	r3, [r4, #24]
    2d62:	680a      	ldr	r2, [r1, #0]
    2d64:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2d66:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2d6a:	d12d      	bne.n	2dc8 <am_hal_i2c_bit_bang_send+0x1a0>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2d6c:	f7fd fdb0 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2d70:	6961      	ldr	r1, [r4, #20]
    2d72:	69a3      	ldr	r3, [r4, #24]
    2d74:	680a      	ldr	r2, [r1, #0]
    2d76:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2d78:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2d7c:	d124      	bne.n	2dc8 <am_hal_i2c_bit_bang_send+0x1a0>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2d7e:	f7fd fda7 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2d82:	6961      	ldr	r1, [r4, #20]
    2d84:	69a3      	ldr	r3, [r4, #24]
    2d86:	680a      	ldr	r2, [r1, #0]
    2d88:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2d8a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2d8e:	d11b      	bne.n	2dc8 <am_hal_i2c_bit_bang_send+0x1a0>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2d90:	f7fd fd9e 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2d94:	6961      	ldr	r1, [r4, #20]
    2d96:	69a3      	ldr	r3, [r4, #24]
    2d98:	680a      	ldr	r2, [r1, #0]
    2d9a:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2d9c:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2da0:	d112      	bne.n	2dc8 <am_hal_i2c_bit_bang_send+0x1a0>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2da2:	f7fd fd95 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2da6:	6961      	ldr	r1, [r4, #20]
    2da8:	69a3      	ldr	r3, [r4, #24]
    2daa:	680a      	ldr	r2, [r1, #0]
    2dac:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2dae:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2db2:	d109      	bne.n	2dc8 <am_hal_i2c_bit_bang_send+0x1a0>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2db4:	f7fd fd8c 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2db8:	6960      	ldr	r0, [r4, #20]
    2dba:	69a1      	ldr	r1, [r4, #24]
    2dbc:	6803      	ldr	r3, [r0, #0]
    2dbe:	420b      	tst	r3, r1
    2dc0:	d102      	bne.n	2dc8 <am_hal_i2c_bit_bang_send+0x1a0>
        if (--maxLoop == 0)
    2dc2:	3d08      	subs	r5, #8
    2dc4:	d1b6      	bne.n	2d34 <am_hal_i2c_bit_bang_send+0x10c>
    2dc6:	e790      	b.n	2cea <am_hal_i2c_bit_bang_send+0xc2>
    for (i = 0; i < 8; i++)
    2dc8:	3601      	adds	r6, #1
        WAIT_I2C_CLOCK_HI_PERIOD();
    2dca:	2005      	movs	r0, #5
    2dcc:	f7fd fd80 	bl	8d0 <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    2dd0:	2e08      	cmp	r6, #8
    2dd2:	d197      	bne.n	2d04 <am_hal_i2c_bit_bang_send+0xdc>
    WRITE_SCL_LO();
    2dd4:	6927      	ldr	r7, [r4, #16]
    2dd6:	69a2      	ldr	r2, [r4, #24]
    2dd8:	603a      	str	r2, [r7, #0]
    WAIT_I2C_CLOCK_LOW_PERIOD();
    2dda:	2007      	movs	r0, #7
    2ddc:	f7fd fd78 	bl	8d0 <am_hal_flash_delay>
    PULL_SCL_HI();
    2de0:	68e0      	ldr	r0, [r4, #12]
    2de2:	69a1      	ldr	r1, [r4, #24]
    while (!GET_SCL())
    2de4:	6963      	ldr	r3, [r4, #20]
    PULL_SCL_HI();
    2de6:	6001      	str	r1, [r0, #0]
    while (!GET_SCL())
    2de8:	681f      	ldr	r7, [r3, #0]
    2dea:	4239      	tst	r1, r7
    2dec:	bf08      	it	eq
    2dee:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    2df2:	d149      	bne.n	2e88 <am_hal_i2c_bit_bang_send+0x260>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2df4:	2004      	movs	r0, #4
    2df6:	f7fd fd6b 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2dfa:	6962      	ldr	r2, [r4, #20]
    2dfc:	69a1      	ldr	r1, [r4, #24]
    2dfe:	6813      	ldr	r3, [r2, #0]
    2e00:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2e02:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2e06:	d13f      	bne.n	2e88 <am_hal_i2c_bit_bang_send+0x260>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2e08:	f7fd fd62 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2e0c:	6967      	ldr	r7, [r4, #20]
    2e0e:	69a1      	ldr	r1, [r4, #24]
    2e10:	683a      	ldr	r2, [r7, #0]
    2e12:	420a      	tst	r2, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2e14:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2e18:	d136      	bne.n	2e88 <am_hal_i2c_bit_bang_send+0x260>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2e1a:	f7fd fd59 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2e1e:	6967      	ldr	r7, [r4, #20]
    2e20:	69a3      	ldr	r3, [r4, #24]
    2e22:	6839      	ldr	r1, [r7, #0]
    2e24:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2e26:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2e2a:	d12d      	bne.n	2e88 <am_hal_i2c_bit_bang_send+0x260>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2e2c:	f7fd fd50 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2e30:	6962      	ldr	r2, [r4, #20]
    2e32:	69a7      	ldr	r7, [r4, #24]
    2e34:	6813      	ldr	r3, [r2, #0]
    2e36:	423b      	tst	r3, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2e38:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2e3c:	d124      	bne.n	2e88 <am_hal_i2c_bit_bang_send+0x260>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2e3e:	f7fd fd47 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2e42:	6961      	ldr	r1, [r4, #20]
    2e44:	69a7      	ldr	r7, [r4, #24]
    2e46:	680a      	ldr	r2, [r1, #0]
    2e48:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2e4a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2e4e:	d11b      	bne.n	2e88 <am_hal_i2c_bit_bang_send+0x260>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2e50:	f7fd fd3e 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2e54:	6961      	ldr	r1, [r4, #20]
    2e56:	69a3      	ldr	r3, [r4, #24]
    2e58:	680f      	ldr	r7, [r1, #0]
    2e5a:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2e5c:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2e60:	d112      	bne.n	2e88 <am_hal_i2c_bit_bang_send+0x260>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2e62:	f7fd fd35 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2e66:	6962      	ldr	r2, [r4, #20]
    2e68:	69a1      	ldr	r1, [r4, #24]
    2e6a:	6813      	ldr	r3, [r2, #0]
    2e6c:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2e6e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2e72:	d109      	bne.n	2e88 <am_hal_i2c_bit_bang_send+0x260>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2e74:	f7fd fd2c 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2e78:	6960      	ldr	r0, [r4, #20]
    2e7a:	69a7      	ldr	r7, [r4, #24]
    2e7c:	6802      	ldr	r2, [r0, #0]
    2e7e:	423a      	tst	r2, r7
    2e80:	d102      	bne.n	2e88 <am_hal_i2c_bit_bang_send+0x260>
        if (--maxLoop == 0)
    2e82:	3d08      	subs	r5, #8
    2e84:	d1b6      	bne.n	2df4 <am_hal_i2c_bit_bang_send+0x1cc>
    2e86:	e730      	b.n	2cea <am_hal_i2c_bit_bang_send+0xc2>
    data_naked = GET_SDA();
    2e88:	6a65      	ldr	r5, [r4, #36]	; 0x24
    2e8a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    2e8c:	682d      	ldr	r5, [r5, #0]
    WAIT_I2C_CLOCK_HI_PERIOD();
    2e8e:	2005      	movs	r0, #5
    data_naked = GET_SDA();
    2e90:	400d      	ands	r5, r1
    WAIT_I2C_CLOCK_HI_PERIOD();
    2e92:	f7fd fd1d 	bl	8d0 <am_hal_flash_delay>
    if ( data_naked )
    2e96:	b11d      	cbz	r5, 2ea0 <am_hal_i2c_bit_bang_send+0x278>
            return AM_HAL_I2C_BIT_BANG_ADDRESS_NAKED;
    2e98:	2001      	movs	r0, #1
    2e9a:	e727      	b.n	2cec <am_hal_i2c_bit_bang_send+0xc4>
    2e9c:	1000101c 	.word	0x1000101c
    if ( bUseOffset )
    2ea0:	9b01      	ldr	r3, [sp, #4]
    2ea2:	2b00      	cmp	r3, #0
    2ea4:	f040 8164 	bne.w	3170 <am_hal_i2c_bit_bang_send+0x548>
    for (ui32I = 0; ui32I < number_of_bytes; ui32I++)
    2ea8:	f1ba 0f00 	cmp.w	sl, #0
    2eac:	f000 80dd 	beq.w	306a <am_hal_i2c_bit_bang_send+0x442>
    2eb0:	f109 3bff 	add.w	fp, r9, #4294967295
        if ( one_byte & (0x80 >> i) )
    2eb4:	f04f 0880 	mov.w	r8, #128	; 0x80
    for (ui32I = 0; ui32I < number_of_bytes; ui32I++)
    2eb8:	f04f 0900 	mov.w	r9, #0
    2ebc:	f81b 7f01 	ldrb.w	r7, [fp, #1]!
    for (i = 0; i < 8; i++)
    2ec0:	2600      	movs	r6, #0
        if ( one_byte & (0x80 >> i) )
    2ec2:	fa48 f306 	asr.w	r3, r8, r6
    2ec6:	423b      	tst	r3, r7
        WRITE_SCL_LO();
    2ec8:	6920      	ldr	r0, [r4, #16]
            PULL_SDA_HI();
    2eca:	bf14      	ite	ne
    2ecc:	69e3      	ldrne	r3, [r4, #28]
            WRITE_SDA_LO();
    2ece:	6a23      	ldreq	r3, [r4, #32]
        WRITE_SCL_LO();
    2ed0:	69a2      	ldr	r2, [r4, #24]
            WRITE_SDA_LO();
    2ed2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        WRITE_SCL_LO();
    2ed4:	6002      	str	r2, [r0, #0]
            WRITE_SDA_LO();
    2ed6:	6019      	str	r1, [r3, #0]
        WAIT_I2C_CLOCK_LOW_PERIOD();
    2ed8:	2007      	movs	r0, #7
    2eda:	f7fd fcf9 	bl	8d0 <am_hal_flash_delay>
    PULL_SCL_HI();
    2ede:	68e0      	ldr	r0, [r4, #12]
    2ee0:	69a3      	ldr	r3, [r4, #24]
    while (!GET_SCL())
    2ee2:	6962      	ldr	r2, [r4, #20]
    PULL_SCL_HI();
    2ee4:	6003      	str	r3, [r0, #0]
    while (!GET_SCL())
    2ee6:	6811      	ldr	r1, [r2, #0]
    2ee8:	420b      	tst	r3, r1
    2eea:	bf08      	it	eq
    2eec:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    2ef0:	d149      	bne.n	2f86 <am_hal_i2c_bit_bang_send+0x35e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2ef2:	2004      	movs	r0, #4
    2ef4:	f7fd fcec 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2ef8:	6962      	ldr	r2, [r4, #20]
    2efa:	69a3      	ldr	r3, [r4, #24]
    2efc:	6811      	ldr	r1, [r2, #0]
    2efe:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2f00:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2f04:	d13f      	bne.n	2f86 <am_hal_i2c_bit_bang_send+0x35e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2f06:	f7fd fce3 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2f0a:	6962      	ldr	r2, [r4, #20]
    2f0c:	69a3      	ldr	r3, [r4, #24]
    2f0e:	6811      	ldr	r1, [r2, #0]
    2f10:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2f12:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2f16:	d136      	bne.n	2f86 <am_hal_i2c_bit_bang_send+0x35e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2f18:	f7fd fcda 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2f1c:	6962      	ldr	r2, [r4, #20]
    2f1e:	69a3      	ldr	r3, [r4, #24]
    2f20:	6811      	ldr	r1, [r2, #0]
    2f22:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2f24:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2f28:	d12d      	bne.n	2f86 <am_hal_i2c_bit_bang_send+0x35e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2f2a:	f7fd fcd1 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2f2e:	6962      	ldr	r2, [r4, #20]
    2f30:	69a3      	ldr	r3, [r4, #24]
    2f32:	6811      	ldr	r1, [r2, #0]
    2f34:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2f36:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2f3a:	d124      	bne.n	2f86 <am_hal_i2c_bit_bang_send+0x35e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2f3c:	f7fd fcc8 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2f40:	6962      	ldr	r2, [r4, #20]
    2f42:	69a3      	ldr	r3, [r4, #24]
    2f44:	6811      	ldr	r1, [r2, #0]
    2f46:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2f48:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2f4c:	d11b      	bne.n	2f86 <am_hal_i2c_bit_bang_send+0x35e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2f4e:	f7fd fcbf 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2f52:	6962      	ldr	r2, [r4, #20]
    2f54:	69a3      	ldr	r3, [r4, #24]
    2f56:	6811      	ldr	r1, [r2, #0]
    2f58:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2f5a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2f5e:	d112      	bne.n	2f86 <am_hal_i2c_bit_bang_send+0x35e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2f60:	f7fd fcb6 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2f64:	6962      	ldr	r2, [r4, #20]
    2f66:	69a3      	ldr	r3, [r4, #24]
    2f68:	6811      	ldr	r1, [r2, #0]
    2f6a:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2f6c:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2f70:	d109      	bne.n	2f86 <am_hal_i2c_bit_bang_send+0x35e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2f72:	f7fd fcad 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2f76:	6960      	ldr	r0, [r4, #20]
    2f78:	69a3      	ldr	r3, [r4, #24]
    2f7a:	6802      	ldr	r2, [r0, #0]
    2f7c:	421a      	tst	r2, r3
    2f7e:	d102      	bne.n	2f86 <am_hal_i2c_bit_bang_send+0x35e>
        if (--maxLoop == 0)
    2f80:	3d08      	subs	r5, #8
    2f82:	d1b6      	bne.n	2ef2 <am_hal_i2c_bit_bang_send+0x2ca>
    2f84:	e6b1      	b.n	2cea <am_hal_i2c_bit_bang_send+0xc2>
    for (i = 0; i < 8; i++)
    2f86:	3601      	adds	r6, #1
        WAIT_I2C_CLOCK_HI_PERIOD();
    2f88:	2005      	movs	r0, #5
    2f8a:	f7fd fca1 	bl	8d0 <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    2f8e:	2e08      	cmp	r6, #8
    2f90:	d197      	bne.n	2ec2 <am_hal_i2c_bit_bang_send+0x29a>
    WRITE_SCL_LO();
    2f92:	6926      	ldr	r6, [r4, #16]
    2f94:	69a7      	ldr	r7, [r4, #24]
    2f96:	6037      	str	r7, [r6, #0]
    WAIT_I2C_CLOCK_LOW_PERIOD();
    2f98:	2007      	movs	r0, #7
    2f9a:	f7fd fc99 	bl	8d0 <am_hal_flash_delay>
    PULL_SCL_HI();
    2f9e:	68e1      	ldr	r1, [r4, #12]
    2fa0:	69a0      	ldr	r0, [r4, #24]
    while (!GET_SCL())
    2fa2:	6963      	ldr	r3, [r4, #20]
    PULL_SCL_HI();
    2fa4:	6008      	str	r0, [r1, #0]
    while (!GET_SCL())
    2fa6:	681a      	ldr	r2, [r3, #0]
    2fa8:	4210      	tst	r0, r2
    2faa:	bf08      	it	eq
    2fac:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    2fb0:	d149      	bne.n	3046 <am_hal_i2c_bit_bang_send+0x41e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2fb2:	2004      	movs	r0, #4
    2fb4:	f7fd fc8c 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2fb8:	6966      	ldr	r6, [r4, #20]
    2fba:	69a7      	ldr	r7, [r4, #24]
    2fbc:	6831      	ldr	r1, [r6, #0]
    2fbe:	4239      	tst	r1, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2fc0:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2fc4:	d13f      	bne.n	3046 <am_hal_i2c_bit_bang_send+0x41e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2fc6:	f7fd fc83 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2fca:	6962      	ldr	r2, [r4, #20]
    2fcc:	69a3      	ldr	r3, [r4, #24]
    2fce:	6816      	ldr	r6, [r2, #0]
    2fd0:	421e      	tst	r6, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2fd2:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2fd6:	d136      	bne.n	3046 <am_hal_i2c_bit_bang_send+0x41e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2fd8:	f7fd fc7a 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2fdc:	6967      	ldr	r7, [r4, #20]
    2fde:	69a1      	ldr	r1, [r4, #24]
    2fe0:	683a      	ldr	r2, [r7, #0]
    2fe2:	420a      	tst	r2, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2fe4:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2fe8:	d12d      	bne.n	3046 <am_hal_i2c_bit_bang_send+0x41e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2fea:	f7fd fc71 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    2fee:	6966      	ldr	r6, [r4, #20]
    2ff0:	69a3      	ldr	r3, [r4, #24]
    2ff2:	6837      	ldr	r7, [r6, #0]
    2ff4:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2ff6:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    2ffa:	d124      	bne.n	3046 <am_hal_i2c_bit_bang_send+0x41e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    2ffc:	f7fd fc68 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    3000:	6961      	ldr	r1, [r4, #20]
    3002:	69a6      	ldr	r6, [r4, #24]
    3004:	680a      	ldr	r2, [r1, #0]
    3006:	4232      	tst	r2, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3008:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    300c:	d11b      	bne.n	3046 <am_hal_i2c_bit_bang_send+0x41e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    300e:	f7fd fc5f 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    3012:	6967      	ldr	r7, [r4, #20]
    3014:	69a3      	ldr	r3, [r4, #24]
    3016:	6839      	ldr	r1, [r7, #0]
    3018:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    301a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    301e:	d112      	bne.n	3046 <am_hal_i2c_bit_bang_send+0x41e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3020:	f7fd fc56 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    3024:	6966      	ldr	r6, [r4, #20]
    3026:	69a7      	ldr	r7, [r4, #24]
    3028:	6832      	ldr	r2, [r6, #0]
    302a:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    302c:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3030:	d109      	bne.n	3046 <am_hal_i2c_bit_bang_send+0x41e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3032:	f7fd fc4d 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    3036:	6960      	ldr	r0, [r4, #20]
    3038:	69a3      	ldr	r3, [r4, #24]
    303a:	6801      	ldr	r1, [r0, #0]
    303c:	4219      	tst	r1, r3
    303e:	d102      	bne.n	3046 <am_hal_i2c_bit_bang_send+0x41e>
        if (--maxLoop == 0)
    3040:	3d08      	subs	r5, #8
    3042:	d1b6      	bne.n	2fb2 <am_hal_i2c_bit_bang_send+0x38a>
    3044:	e651      	b.n	2cea <am_hal_i2c_bit_bang_send+0xc2>
    data_naked = GET_SDA();
    3046:	6a65      	ldr	r5, [r4, #36]	; 0x24
    3048:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    304a:	682d      	ldr	r5, [r5, #0]
    WAIT_I2C_CLOCK_HI_PERIOD();
    304c:	2005      	movs	r0, #5
    data_naked = GET_SDA();
    304e:	4035      	ands	r5, r6
    WAIT_I2C_CLOCK_HI_PERIOD();
    3050:	f7fd fc3e 	bl	8d0 <am_hal_flash_delay>
    if ( data_naked )
    3054:	b125      	cbz	r5, 3060 <am_hal_i2c_bit_bang_send+0x438>
                if (ui32I != (number_of_bytes-1))
    3056:	f10a 37ff 	add.w	r7, sl, #4294967295
    305a:	454f      	cmp	r7, r9
    305c:	f040 815d 	bne.w	331a <am_hal_i2c_bit_bang_send+0x6f2>
    for (ui32I = 0; ui32I < number_of_bytes; ui32I++)
    3060:	f109 0901 	add.w	r9, r9, #1
    3064:	45ca      	cmp	sl, r9
    3066:	f47f af29 	bne.w	2ebc <am_hal_i2c_bit_bang_send+0x294>
    bool data_naked = false;
    306a:	2500      	movs	r5, #0
    WRITE_SCL_LO();
    306c:	6920      	ldr	r0, [r4, #16]
    306e:	69a2      	ldr	r2, [r4, #24]
    3070:	6002      	str	r2, [r0, #0]
    WAIT_FOR_QUARTER_I2C_CLOCK();
    3072:	2004      	movs	r0, #4
    3074:	f7fd fc2c 	bl	8d0 <am_hal_flash_delay>
    if (!bNoStop)
    3078:	9b00      	ldr	r3, [sp, #0]
    307a:	2b00      	cmp	r3, #0
    307c:	d060      	beq.n	3140 <am_hal_i2c_bit_bang_send+0x518>
        PULL_SDA_HI();
    307e:	69e1      	ldr	r1, [r4, #28]
    3080:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3082:	600e      	str	r6, [r1, #0]
    WAIT_FOR_QUARTER_I2C_CLOCK();
    3084:	2004      	movs	r0, #4
    3086:	f7fd fc23 	bl	8d0 <am_hal_flash_delay>
    PULL_SCL_HI();
    308a:	68e7      	ldr	r7, [r4, #12]
    308c:	69a0      	ldr	r0, [r4, #24]
    while (!GET_SCL())
    308e:	6962      	ldr	r2, [r4, #20]
    PULL_SCL_HI();
    3090:	6038      	str	r0, [r7, #0]
    while (!GET_SCL())
    3092:	6813      	ldr	r3, [r2, #0]
    3094:	4218      	tst	r0, r3
    3096:	d163      	bne.n	3160 <am_hal_i2c_bit_bang_send+0x538>
    bool data_naked = false;
    3098:	f44f 76c8 	mov.w	r6, #400	; 0x190
        WAIT_FOR_QUARTER_I2C_CLOCK();
    309c:	2004      	movs	r0, #4
    309e:	f7fd fc17 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    30a2:	6961      	ldr	r1, [r4, #20]
    30a4:	69a7      	ldr	r7, [r4, #24]
    30a6:	680a      	ldr	r2, [r1, #0]
    30a8:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    30aa:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    30ae:	f040 8124 	bne.w	32fa <am_hal_i2c_bit_bang_send+0x6d2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    30b2:	f7fd fc0d 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    30b6:	6961      	ldr	r1, [r4, #20]
    30b8:	69a3      	ldr	r3, [r4, #24]
    30ba:	680f      	ldr	r7, [r1, #0]
    30bc:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    30be:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    30c2:	f040 811a 	bne.w	32fa <am_hal_i2c_bit_bang_send+0x6d2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    30c6:	f7fd fc03 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    30ca:	6962      	ldr	r2, [r4, #20]
    30cc:	69a1      	ldr	r1, [r4, #24]
    30ce:	6813      	ldr	r3, [r2, #0]
    30d0:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    30d2:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    30d6:	f040 8110 	bne.w	32fa <am_hal_i2c_bit_bang_send+0x6d2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    30da:	f7fd fbf9 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    30de:	6967      	ldr	r7, [r4, #20]
    30e0:	69a1      	ldr	r1, [r4, #24]
    30e2:	683a      	ldr	r2, [r7, #0]
    30e4:	420a      	tst	r2, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    30e6:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    30ea:	f040 8106 	bne.w	32fa <am_hal_i2c_bit_bang_send+0x6d2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    30ee:	f7fd fbef 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    30f2:	6967      	ldr	r7, [r4, #20]
    30f4:	69a3      	ldr	r3, [r4, #24]
    30f6:	6839      	ldr	r1, [r7, #0]
    30f8:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    30fa:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    30fe:	f040 80fc 	bne.w	32fa <am_hal_i2c_bit_bang_send+0x6d2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3102:	f7fd fbe5 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    3106:	6962      	ldr	r2, [r4, #20]
    3108:	69a7      	ldr	r7, [r4, #24]
    310a:	6813      	ldr	r3, [r2, #0]
    310c:	423b      	tst	r3, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    310e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3112:	f040 80f2 	bne.w	32fa <am_hal_i2c_bit_bang_send+0x6d2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3116:	f7fd fbdb 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    311a:	6961      	ldr	r1, [r4, #20]
    311c:	69a7      	ldr	r7, [r4, #24]
    311e:	680a      	ldr	r2, [r1, #0]
    3120:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3122:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3126:	f040 80e8 	bne.w	32fa <am_hal_i2c_bit_bang_send+0x6d2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    312a:	f7fd fbd1 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    312e:	6960      	ldr	r0, [r4, #20]
    3130:	69a3      	ldr	r3, [r4, #24]
    3132:	6801      	ldr	r1, [r0, #0]
    3134:	4219      	tst	r1, r3
    3136:	f040 80e0 	bne.w	32fa <am_hal_i2c_bit_bang_send+0x6d2>
        if (--maxLoop == 0)
    313a:	3e08      	subs	r6, #8
    313c:	d1ae      	bne.n	309c <am_hal_i2c_bit_bang_send+0x474>
    313e:	e5d4      	b.n	2cea <am_hal_i2c_bit_bang_send+0xc2>
        WRITE_SDA_LO();
    3140:	6a21      	ldr	r1, [r4, #32]
    3142:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3144:	600e      	str	r6, [r1, #0]
    WAIT_FOR_QUARTER_I2C_CLOCK();
    3146:	2004      	movs	r0, #4
    3148:	f7fd fbc2 	bl	8d0 <am_hal_flash_delay>
    PULL_SCL_HI();
    314c:	68e7      	ldr	r7, [r4, #12]
    314e:	69a0      	ldr	r0, [r4, #24]
    while (!GET_SCL())
    3150:	6962      	ldr	r2, [r4, #20]
    PULL_SCL_HI();
    3152:	6038      	str	r0, [r7, #0]
    while (!GET_SCL())
    3154:	6813      	ldr	r3, [r2, #0]
    3156:	4203      	tst	r3, r0
    3158:	d09e      	beq.n	3098 <am_hal_i2c_bit_bang_send+0x470>
        PULL_SDA_HI();
    315a:	69e7      	ldr	r7, [r4, #28]
    315c:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    315e:	603c      	str	r4, [r7, #0]
    WAIT_I2C_CLOCK_HI_PERIOD();
    3160:	2005      	movs	r0, #5
    3162:	f7fd fbb5 	bl	8d0 <am_hal_flash_delay>
    if ( data_naked )
    3166:	2d00      	cmp	r5, #0
    3168:	f000 80d9 	beq.w	331e <am_hal_i2c_bit_bang_send+0x6f6>
        return AM_HAL_I2C_BIT_BANG_DATA_NAKED;  // if it happens early
    316c:	2002      	movs	r0, #2
    316e:	e5bd      	b.n	2cec <am_hal_i2c_bit_bang_send+0xc4>
        if ( one_byte & (0x80 >> i) )
    3170:	f04f 0880 	mov.w	r8, #128	; 0x80
    3174:	fa48 f105 	asr.w	r1, r8, r5
    3178:	ea11 0f0b 	tst.w	r1, fp
        WRITE_SCL_LO();
    317c:	6920      	ldr	r0, [r4, #16]
            PULL_SDA_HI();
    317e:	bf14      	ite	ne
    3180:	69e1      	ldrne	r1, [r4, #28]
            WRITE_SDA_LO();
    3182:	6a21      	ldreq	r1, [r4, #32]
        WRITE_SCL_LO();
    3184:	69a2      	ldr	r2, [r4, #24]
            WRITE_SDA_LO();
    3186:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        WRITE_SCL_LO();
    3188:	6002      	str	r2, [r0, #0]
            WRITE_SDA_LO();
    318a:	600b      	str	r3, [r1, #0]
        WAIT_I2C_CLOCK_LOW_PERIOD();
    318c:	2007      	movs	r0, #7
    318e:	f7fd fb9f 	bl	8d0 <am_hal_flash_delay>
    PULL_SCL_HI();
    3192:	68e0      	ldr	r0, [r4, #12]
    3194:	69a1      	ldr	r1, [r4, #24]
    while (!GET_SCL())
    3196:	6962      	ldr	r2, [r4, #20]
    PULL_SCL_HI();
    3198:	6001      	str	r1, [r0, #0]
    while (!GET_SCL())
    319a:	6813      	ldr	r3, [r2, #0]
    319c:	4219      	tst	r1, r3
    319e:	bf08      	it	eq
    31a0:	f44f 76c8 	moveq.w	r6, #400	; 0x190
    31a4:	d149      	bne.n	323a <am_hal_i2c_bit_bang_send+0x612>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    31a6:	2004      	movs	r0, #4
    31a8:	f7fd fb92 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    31ac:	6961      	ldr	r1, [r4, #20]
    31ae:	69a3      	ldr	r3, [r4, #24]
    31b0:	680a      	ldr	r2, [r1, #0]
    31b2:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    31b4:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    31b8:	d13f      	bne.n	323a <am_hal_i2c_bit_bang_send+0x612>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    31ba:	f7fd fb89 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    31be:	6967      	ldr	r7, [r4, #20]
    31c0:	69a1      	ldr	r1, [r4, #24]
    31c2:	683b      	ldr	r3, [r7, #0]
    31c4:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    31c6:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    31ca:	d136      	bne.n	323a <am_hal_i2c_bit_bang_send+0x612>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    31cc:	f7fd fb80 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    31d0:	6962      	ldr	r2, [r4, #20]
    31d2:	69a7      	ldr	r7, [r4, #24]
    31d4:	6811      	ldr	r1, [r2, #0]
    31d6:	4239      	tst	r1, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    31d8:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    31dc:	d12d      	bne.n	323a <am_hal_i2c_bit_bang_send+0x612>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    31de:	f7fd fb77 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    31e2:	6962      	ldr	r2, [r4, #20]
    31e4:	69a3      	ldr	r3, [r4, #24]
    31e6:	6817      	ldr	r7, [r2, #0]
    31e8:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    31ea:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    31ee:	d124      	bne.n	323a <am_hal_i2c_bit_bang_send+0x612>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    31f0:	f7fd fb6e 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    31f4:	6961      	ldr	r1, [r4, #20]
    31f6:	69a3      	ldr	r3, [r4, #24]
    31f8:	680a      	ldr	r2, [r1, #0]
    31fa:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    31fc:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3200:	d11b      	bne.n	323a <am_hal_i2c_bit_bang_send+0x612>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3202:	f7fd fb65 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    3206:	6967      	ldr	r7, [r4, #20]
    3208:	69a1      	ldr	r1, [r4, #24]
    320a:	683b      	ldr	r3, [r7, #0]
    320c:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    320e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3212:	d112      	bne.n	323a <am_hal_i2c_bit_bang_send+0x612>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3214:	f7fd fb5c 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    3218:	6962      	ldr	r2, [r4, #20]
    321a:	69a7      	ldr	r7, [r4, #24]
    321c:	6811      	ldr	r1, [r2, #0]
    321e:	4239      	tst	r1, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3220:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3224:	d109      	bne.n	323a <am_hal_i2c_bit_bang_send+0x612>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3226:	f7fd fb53 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    322a:	6960      	ldr	r0, [r4, #20]
    322c:	69a3      	ldr	r3, [r4, #24]
    322e:	6802      	ldr	r2, [r0, #0]
    3230:	421a      	tst	r2, r3
    3232:	d102      	bne.n	323a <am_hal_i2c_bit_bang_send+0x612>
        if (--maxLoop == 0)
    3234:	3e08      	subs	r6, #8
    3236:	d1b6      	bne.n	31a6 <am_hal_i2c_bit_bang_send+0x57e>
    3238:	e557      	b.n	2cea <am_hal_i2c_bit_bang_send+0xc2>
    for (i = 0; i < 8; i++)
    323a:	3501      	adds	r5, #1
        WAIT_I2C_CLOCK_HI_PERIOD();
    323c:	2005      	movs	r0, #5
    323e:	f7fd fb47 	bl	8d0 <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    3242:	2d08      	cmp	r5, #8
    3244:	d196      	bne.n	3174 <am_hal_i2c_bit_bang_send+0x54c>
    WRITE_SCL_LO();
    3246:	6926      	ldr	r6, [r4, #16]
    3248:	69a7      	ldr	r7, [r4, #24]
    324a:	6037      	str	r7, [r6, #0]
    WAIT_I2C_CLOCK_LOW_PERIOD();
    324c:	2007      	movs	r0, #7
    324e:	f7fd fb3f 	bl	8d0 <am_hal_flash_delay>
    PULL_SCL_HI();
    3252:	68e1      	ldr	r1, [r4, #12]
    3254:	69a0      	ldr	r0, [r4, #24]
    while (!GET_SCL())
    3256:	6963      	ldr	r3, [r4, #20]
    PULL_SCL_HI();
    3258:	6008      	str	r0, [r1, #0]
    while (!GET_SCL())
    325a:	681a      	ldr	r2, [r3, #0]
    325c:	4210      	tst	r0, r2
    325e:	bf08      	it	eq
    3260:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    3264:	d14e      	bne.n	3304 <am_hal_i2c_bit_bang_send+0x6dc>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3266:	2004      	movs	r0, #4
    3268:	f7fd fb32 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    326c:	6966      	ldr	r6, [r4, #20]
    326e:	69a7      	ldr	r7, [r4, #24]
    3270:	6831      	ldr	r1, [r6, #0]
    3272:	4239      	tst	r1, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3274:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    3278:	d144      	bne.n	3304 <am_hal_i2c_bit_bang_send+0x6dc>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    327a:	f7fd fb29 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    327e:	6962      	ldr	r2, [r4, #20]
    3280:	69a3      	ldr	r3, [r4, #24]
    3282:	6816      	ldr	r6, [r2, #0]
    3284:	421e      	tst	r6, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3286:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    328a:	d13b      	bne.n	3304 <am_hal_i2c_bit_bang_send+0x6dc>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    328c:	f7fd fb20 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    3290:	6967      	ldr	r7, [r4, #20]
    3292:	69a1      	ldr	r1, [r4, #24]
    3294:	683a      	ldr	r2, [r7, #0]
    3296:	420a      	tst	r2, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    3298:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    329c:	d132      	bne.n	3304 <am_hal_i2c_bit_bang_send+0x6dc>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    329e:	f7fd fb17 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    32a2:	6966      	ldr	r6, [r4, #20]
    32a4:	69a3      	ldr	r3, [r4, #24]
    32a6:	6837      	ldr	r7, [r6, #0]
    32a8:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    32aa:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    32ae:	d129      	bne.n	3304 <am_hal_i2c_bit_bang_send+0x6dc>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    32b0:	f7fd fb0e 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    32b4:	6961      	ldr	r1, [r4, #20]
    32b6:	69a6      	ldr	r6, [r4, #24]
    32b8:	680a      	ldr	r2, [r1, #0]
    32ba:	4232      	tst	r2, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    32bc:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    32c0:	d120      	bne.n	3304 <am_hal_i2c_bit_bang_send+0x6dc>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    32c2:	f7fd fb05 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    32c6:	6967      	ldr	r7, [r4, #20]
    32c8:	69a3      	ldr	r3, [r4, #24]
    32ca:	6839      	ldr	r1, [r7, #0]
    32cc:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    32ce:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    32d2:	d117      	bne.n	3304 <am_hal_i2c_bit_bang_send+0x6dc>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    32d4:	f7fd fafc 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    32d8:	6966      	ldr	r6, [r4, #20]
    32da:	69a7      	ldr	r7, [r4, #24]
    32dc:	6832      	ldr	r2, [r6, #0]
    32de:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    32e0:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    32e4:	d10e      	bne.n	3304 <am_hal_i2c_bit_bang_send+0x6dc>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    32e6:	f7fd faf3 	bl	8d0 <am_hal_flash_delay>
    while (!GET_SCL())
    32ea:	6960      	ldr	r0, [r4, #20]
    32ec:	69a3      	ldr	r3, [r4, #24]
    32ee:	6801      	ldr	r1, [r0, #0]
    32f0:	4219      	tst	r1, r3
    32f2:	d107      	bne.n	3304 <am_hal_i2c_bit_bang_send+0x6dc>
        if (--maxLoop == 0)
    32f4:	3d08      	subs	r5, #8
    32f6:	d1b6      	bne.n	3266 <am_hal_i2c_bit_bang_send+0x63e>
    32f8:	e4f7      	b.n	2cea <am_hal_i2c_bit_bang_send+0xc2>
    if (!bNoStop)
    32fa:	9e00      	ldr	r6, [sp, #0]
    32fc:	2e00      	cmp	r6, #0
    32fe:	f43f af2c 	beq.w	315a <am_hal_i2c_bit_bang_send+0x532>
    3302:	e72d      	b.n	3160 <am_hal_i2c_bit_bang_send+0x538>
    data_naked = GET_SDA();
    3304:	6a65      	ldr	r5, [r4, #36]	; 0x24
    3306:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3308:	682d      	ldr	r5, [r5, #0]
    WAIT_I2C_CLOCK_HI_PERIOD();
    330a:	2005      	movs	r0, #5
    data_naked = GET_SDA();
    330c:	4035      	ands	r5, r6
    WAIT_I2C_CLOCK_HI_PERIOD();
    330e:	f7fd fadf 	bl	8d0 <am_hal_flash_delay>
    if ( data_naked )
    3312:	2d00      	cmp	r5, #0
    3314:	f47f af2a 	bne.w	316c <am_hal_i2c_bit_bang_send+0x544>
    3318:	e5c6      	b.n	2ea8 <am_hal_i2c_bit_bang_send+0x280>
                    data_naked = true;
    331a:	2501      	movs	r5, #1
    331c:	e6a6      	b.n	306c <am_hal_i2c_bit_bang_send+0x444>
    return AM_HAL_I2C_BIT_BANG_SUCCESS;
    331e:	4628      	mov	r0, r5
    3320:	e4e4      	b.n	2cec <am_hal_i2c_bit_bang_send+0xc4>
    3322:	bf00      	nop

00003324 <g_pui8Apollo2BootDemo>:
    3324:	1000 1000 9c01 0000 9c09 0000 98dd 0000     ................
    3334:	98dd 0000 98dd 0000 98dd 0000 0000 0000     ................
	...
    3350:	9c07 0000 9c07 0000 0000 0000 9c07 0000     ................
    3360:	9c07 0000 9c07 0000 9c07 0000 9c07 0000     ................
    3370:	9c07 0000 9c07 0000 9c07 0000 9c07 0000     ................
    3380:	9c07 0000 9c07 0000 9c07 0000 9c07 0000     ................
    3390:	9c07 0000 9c07 0000 93a7 0000 9c07 0000     ................
    33a0:	9c07 0000 9c07 0000 9c07 0000 9c07 0000     ................
    33b0:	9c07 0000 9c07 0000 9c07 0000 9c07 0000     ................
    33c0:	9c07 0000 9c07 0000 9c07 0000 9c07 0000     ................
    33d0:	9c07 0000 9c07 0000 9c07 0000 9c07 0000     ................
    33e0:	9c07 0000 f8df 18a0 6008 4770 e92d 0ff0     .........`pG-...
    33f0:	0004 000d 2d00 d04d 0020 0029 0849 ea5f     .....-M. .).I._.
    3400:	0030 4680 4689 0020 0029 0880 ea40 7081     0..F.F .)...@..p
    3410:	0889 eb18 0000 eb59 0101 0006 000f 0030     ......Y.......0.
    3420:	0039 0900 ea40 7001 0909 1836 414f 0030     9...@..p..6.OA0.
    3430:	0039 0a00 ea40 6001 0a09 1836 414f 0030     9...@..`..6.OA0.
    3440:	0039 0c00 ea40 4001 0c09 1836 414f 0030     9...@..@..6.OA0.
    3450:	0039 0008 2100 1836 414f 08f6 ea46 7647     9....!6.OA..F.Gv
    3460:	08ff 200a 2100 fba0 8906 fb00 9907 fb01     ... .!..........
    3470:	9906 ebb4 0008 eb75 0109 4682 468b f11a     ......u....F.F..
    3480:	0006 f15b 0100 0900 ea40 7001 0909 1830     ..[.....@..p..0.
    3490:	4179 e015 46a4 4660 0880 eb10 005c 0002     yA...F`F....\...
    34a0:	eb12 1212 eb12 2212 eb12 4212 08d2 200a     ......."...B... 
    34b0:	fb00 c012 0003 1d9b eb12 1213 0010 2100     ...............!
    34c0:	e8bd 0ff0 4770 b510 0002 000b 2000 2100     ....pG....... .!
    34d0:	428b d101 4282 d001 2400 e000 2401 2000     .B...B...$...$. 
    34e0:	2100 428b d101 4282 d007 0010 0019 f7ff     .!.B...B........
    34f0:	ff7d 0002 000b 1c64 e7f1 0020 bd10 b580     }.....d... .....
    3500:	2200 2300 4299 dc05 db01 4290 d202 4240     .".#.B.....B..@B
    3510:	eb71 0141 f7ff ffd7 bd02 b430 0002 000b     q.A.......0.....
    3520:	2000 2100 428b d101 4282 d001 2000 e000     . .!.B...B... ..
    3530:	2001 2400 2500 42ab d101 42a2 d005 0912     . .$.%.B...B....
    3540:	ea42 7203 091b 1c40 e7f3 bc30 4770 b430     B..r..@...0.pG0.
    3550:	0003 2200 2000 2500 781c 2c2d d103 2401     ...". .%.x-,...$
    3560:	0022 1c5b 1c6d 781c 2c30 db0a 781c 2c3a     ".[.m..x0,...x:,
    3570:	da07 1c6d 240a 4360 781c 3c30 1820 1c5b     ..m..$`C.x0< .[.
    3580:	e7f1 2900 d000 600d b2d2 2a00 d001 4240     ...)...`...*..@B
    3590:	e7ff bc30 4770 e92d 4ff0 b087 0006 000f     ..0.pG-..O......
    35a0:	4690 f05f 0900 f05f 0a00 0030 0039 f7ff     .F_..._...0.9...
    35b0:	ff1d 0004 000d 200a 2100 fba0 2304 fb00     ....... .!...#..
    35c0:	3305 fb01 3304 1ab0 eb77 0103 4683 f11b     .3...3..w....F..
    35d0:	0030 4669 f801 0009 f119 0901 0026 002f     0.iF........&./.
    35e0:	2000 2100 428f d1e0 4286 d1de 46ca f1b8     . .!.B...B...F..
    35f0:	0f00 d00f 4648 f1b0 0901 2800 d007 4668     ....HF.....(..hF
    3600:	f810 0009 f888 0000 f118 0801 e7f2 2000     ............... 
    3610:	f888 0000 4650 b007 e8bd 8ff0 b5f0 b085     ....PF..........
    3620:	0004 000d f05f 0c00 2600 2700 42bd d107     ...._....&.'.B..
    3630:	42b4 d105 2030 466e f806 000c f11c 0c01     .B..0 nF........
    3640:	2600 2700 42bd d101 42b4 d01c 0020 f010     .&.'.B...B.. ...
    3650:	000f 4686 fa5f fe8e f1be 0f0a db07 b2db     ...F_...........
    3660:	2b00 d001 2027 e000 2007 eb10 0e0e f11e     .+..' ... ......
    3670:	0030 466e f806 000c f11c 0c01 0924 ea44     0.nF........$.D.
    3680:	7405 092d e7dc 4661 2a00 d00c 4660 f1b0     .t-...aF.*..`F..
    3690:	0c01 2800 d005 4668 f810 000c 7010 1c52     ...(..hF.....pR.
    36a0:	e7f4 2000 7010 0008 b005 bdf0 0002 2000     ... .p......... 
    36b0:	2a00 d006 0011 1c4a 7809 2900 d001 1c40     .*....J..x.)..@.
    36c0:	e7f8 4770 b410 0004 2000 2a01 db09 0013     ..pG..... .*....
    36d0:	1e5a 2b00 d005 2c00 d001 7021 1c64 1c40     Z..+...,..!pd.@.
    36e0:	e7f5 bc10 4770 e92d 4ff8 ed2d 8b02 b082     ....pG-..O-.....
    36f0:	eeb0 8a40 0006 000f 6830 4683 f1bb 0f04     ..@.....0h.F....
    3700:	da02 f07f 0002 e09a eeb5 8a40 eef1 fa10     ..........@.....
    3710:	d104 f8df 057c 6030 2003 e090 46b1 ed8d     ....|.0`. ...F..
    3720:	8a00 9800 f3c0 50c7 387f 4680 9800 f020     .......P.8.F.. .
    3730:	407f f450 0000 4682 2000 0005 2000 0004     .@P....F. ... ..
    3740:	f1b8 0f1f db02 f07f 0001 e078 f118 0f17     ..........x.....
    3750:	da02 f05f 30ff e072 f1b8 0f17 db05 4640     .._..0r.......@F
    3760:	3817 fa1a f000 0004 e016 f1b8 0f00 d40c     .8..............
    3770:	f1d8 0017 4651 4101 000c f118 0001 fa1a     ....QF.A........
    3780:	f000 f020 407f 0005 e006 f02a 407f f118     .. ..@....*..@..
    3790:	0101 4249 4108 0005 9800 2800 d502 202d     ..IB.A.....(..- 
    37a0:	7030 1c76 2c00 d103 2030 7030 1c76 e014     0pv..,..0 0pv...
    37b0:	2c01 db05 0032 0020 17e1 f7ff feec e007     .,..2. .........
    37c0:	202d 7030 1c76 0032 4260 17c1 f7ff fee3     - 0pv.2.`B......
    37d0:	7830 2800 d001 1c76 e7fa 202e 7030 1c76     0x.(..v.... 0pv.
    37e0:	2d00 d103 2030 7030 1c76 e023 ebb6 0009     .-..0 0pv.#.....
    37f0:	ebbb 0000 1e40 0001 428f da01 0039 e7ff     ....@....B..9...
    3800:	2000 0002 428a da0a 200a 4345 0028 1600     . ...B... EC(...
    3810:	3030 7030 1c76 f025 457f 1c52 e7f2 1e76     000pv.%..ER...v.
    3820:	7830 2830 d105 f816 0c01 282e d001 1e76     0x0(.......(..v.
    3830:	e7f6 1c76 2000 7030 ebb6 0609 0030 b002     ..v.. 0p....0...
    3840:	ecbd 8b02 e8bd 8ff2 e92d 4ff8 ed2d 8b02     ........-..O-...
    3850:	b088 0004 4688 0017 2600 2000 9002 f898     .....F...&. ....
    3860:	0000 2800 f000 81ed 2006 9005 f898 0000     ...(..... ......
    3870:	2825 d016 2c00 d010 f898 0000 280a d108     %(...,.......(..
    3880:	f8df 0408 7800 2800 d003 200d 7020 1c64     .....x.(...  pd.
    3890:	1c76 f898 0000 7020 1c64 f118 0801 1c76     v..... pd.....v.
    38a0:	e7dd f118 0801 2000 f88d 0001 f89d 0001     ....... ........
    38b0:	f88d 0003 2020 f88d 0000 f898 0000 2830     ....  ........0(
    38c0:	d104 2030 f88d 0000 f118 0801 a904 4640     ..0 ..........@F
    38d0:	f7ff fe3d 0005 9804 4480 f898 0000 2873     ..=......D....s(
    38e0:	d002 2d00 d500 426d f898 0000 282e d108     ...-..mB.....(..
    38f0:	f118 0801 a904 4640 f7ff fe29 9005 9804     ......@F..).....
    3900:	4480 f898 0000 286c d10a f118 0801 f898     .D....l(........
    3910:	0000 286c d104 f118 0801 2001 f88d 0001     ..l(....... ....
    3920:	f898 0000 2846 f000 8153 2858 d067 2863     ....F(..S.X(g.c(
    3930:	d010 2864 f000 80d1 2866 f000 8149 2869     ..d(....f(..I.i(
    3940:	f000 80cb 2873 d011 2875 f000 8090 2878     ....s(..u(....x(
    3950:	d052 e16c 6838 1d3f f88d 0004 2c00 d003     R.l.8h?......,..
    3960:	f89d 0004 7020 1c64 1c76 e167 6838 1d3f     .... pd.v.g.8h?.
    3970:	9003 9803 f7ff fe9a 9002 2d01 db14 9802     ...........-....
    3980:	42a8 d211 9802 1a2d 002a f89d 1000 0020     .B....-.*..... .
    3990:	f7ff fe98 0005 2c00 d001 0028 e000 2000     .......,..(.... 
    39a0:	4404 19ae 2000 0005 9803 7800 2800 d00a     .D... .....x.(..
    39b0:	2c00 d003 9803 7800 7020 1c64 9803 1c40     .,.....x pd...@.
    39c0:	9003 1c76 e7f0 2d00 d015 426d 9802 42a8     ..v....-..mB...B
    39d0:	d211 9802 1a2d 002a f89d 1000 0020 f7ff     ....-.*..... ...
    39e0:	fe71 0005 2c00 d001 0028 e000 2000 4404     q....,..(.... .D
    39f0:	19ae 2000 0005 e121 2001 f88d 0003 f89d     ... ..!.. ......
    3a00:	0001 2800 d008 1dff f037 0707 e9d7 0100     ...(....7.......
    3a10:	3708 4682 468b e004 6838 1d3f 2100 4682     .7.F.F..8h?..!.F
    3a20:	468b 2d00 d015 4650 4659 f7ff fd76 1a28     .F.-..PFYF..v.(.
    3a30:	0005 002a f89d 1000 0020 f7ff fe43 0005     ..*..... ...C...
    3a40:	2c00 d001 0028 e000 2000 4404 19ae 2000     .,..(.... .D... 
    3a50:	0005 f89d 3003 0022 4650 4659 f7ff fdde     .....0".PFYF....
    3a60:	4681 2c00 d000 444c eb19 0606 e0e6 f89d     .F.,..LD........
    3a70:	0001 2800 d008 1dff f037 0707 e9d7 0100     ...(....7.......
    3a80:	3708 4682 468b e004 6838 1d3f 2100 4682     .7.F.F..8h?..!.F
    3a90:	468b 2d00 d015 4650 4659 f7ff fd14 1a28     .F.-..PFYF....(.
    3aa0:	0005 002a f89d 1000 0020 f7ff fe0b 0005     ..*..... .......
    3ab0:	2c00 d001 0028 e000 2000 4404 19ae 2000     .,..(.... .D... 
    3ac0:	0005 0022 4650 4659 f7ff fd65 4681 2c00     ..".PFYF..e..F.,
    3ad0:	d000 444c eb19 0606 e0b0 f89d 0001 2800     ..LD...........(
    3ae0:	d008 1dff f037 0707 e9d7 0100 3708 e9cd     ....7........7..
    3af0:	0106 e004 6838 1d3f 17c1 e9cd 0106 e9dd     ....8h?.........
    3b00:	0106 0002 000b 2000 2100 428b dc0d db01     ....... .!.B....
    3b10:	4282 d20a e9dd 0106 4240 eb71 0141 4682     .B......@Bq.A..F
    3b20:	468b 2001 f88d 0002 e006 e9dd 0106 4682     .F. ...........F
    3b30:	468b 2000 f88d 0002 2d00 d033 4650 4659     .F. .....-3.PFYF
    3b40:	f7ff fcdd 1a28 0005 f89d 0002 2800 d00a     ....(........(..
    3b50:	1e6d f89d 0000 2830 d105 2c00 d002 202d     m.....0(...,..- 
    3b60:	7020 1c64 1c76 002a f89d 1000 0020 f7ff      pd.v.*..... ...
    3b70:	fda9 0005 2c00 d001 0028 e000 2000 4404     .....,..(.... .D
    3b80:	19ae 2000 0005 f89d 0002 2800 d014 f89d     ... .......(....
    3b90:	0000 2820 d110 2c00 d002 202d 7020 1c64     .. (...,..-  pd.
    3ba0:	1c76 e009 f89d 0002 2800 d005 2c00 d002     v........(...,..
    3bb0:	202d 7020 1c64 1c76 0022 4650 4659 f7ff     -  pd.v.".PFYF..
    3bc0:	fcea 4681 2c00 d000 444c eb19 0606 e035     ...F.,..LD....5.
    3bd0:	2c00 d02b 1dff f037 0707 ed97 0b00 3708     .,+...7........7
    3be0:	ec51 0b10 f000 f85e ee08 0a10 2014 6020     Q.....^......  `
    3bf0:	9905 0020 eeb0 0a48 f7ff fd75 4681 f1b9     .. ...H...u..F..
    3c00:	0f00 d510 f119 0f01 d102 4921 0008 e007     ..........!I....
    3c10:	f119 0f02 d102 491f 0008 e001 491e 0008     .......I.....I..
    3c20:	6020 2103 4689 eb19 0606 444c e006 2c00      `.!.F....LD...,
    3c30:	d003 f898 0000 7020 1c64 1c76 f118 0801     ...... pd.v.....
    3c40:	e60d 2c00 d001 2000 7020 0030 b008 ecbd     ...,...  p0.....
    3c50:	8b02 e8bd 8ff2 b40e b578 0004 a805 0006     ........x.......
    3c60:	0032 0021 480d f7ff fdef 0005 480b 4906     2.!..H.......H.I
    3c70:	6809 4788 0028 bc72 f85d fb10 b580 4808     .h.G(.r.]......H
    3c80:	f7ff ffe9 bd01 0000 119c 1000 11a8 1000     ................
    3c90:	2e30 0030 2e23 0023 2e3f 003f 1084 1000     0.0.#.#.?.?.....
    3ca0:	9bd4 0000 f001 4200 1a8b f1a3 5160 f5b1     .......B....`Q..
    3cb0:	1f80 db0a f1b1 6f7f d21f ea42 02c1 00c1     .......o..B.....
    3cc0:	f171 4100 eb42 7050 4770 150b f1c3 0309     q..AB.PppG......
    3cd0:	2b21 d210 0289 ea41 5190 0280 2801 4149     !+....A..Q...(IA
    3ce0:	f041 4100 fa21 f003 f1c3 0320 4099 f171     A..A!..... ..@q.
    3cf0:	4100 4150 4770 0010 4770 f06f 0000 eb13     .APApG..pGo.....
    3d00:	3f10 bf5c 0e00 ea42 50c0 4770 b418 7901     .?\...B..PpG...y
    3d10:	0789 f140 808d 6801 2932 d25d f3ef 8110     ..@....h2)].....
    3d20:	9100 b672 2173 f8df 2314 6011 2202 6801     ..r.s!...#.`.".h
    3d30:	0089 f011 011c 408a 6803 085b f013 037c     .......@.h[...|.
    3d40:	f8df 12fc 18cb 6819 2307 6804 00a4 f014     .......h.#.h....
    3d50:	041c 40a3 4399 430a 6803 085b f013 037c     ...@.C.C.h[...|.
    3d60:	f8df 12dc 18cb 601a 2218 6801 00c9 f011     .......`.".h....
    3d70:	0118 408a 7803 f013 03fc f8df 12c8 18cb     ...@.x..........
    3d80:	6819 23ff 6804 00e4 f014 0418 40a3 4399     .h.#.h.......@.C
    3d90:	430a 7803 f013 03fc f8df 12a8 18cb 601a     .C.x...........`
    3da0:	7802 f012 02fc f8df 12a0 188a 6812 21ff     .x...........h.!
    3db0:	6803 00db f013 0318 4099 438a 7803 f013     .h.......@.C.x..
    3dc0:	03fc f8df 1284 18cb 601a 2100 f8df 226c     .........`.!..l"
    3dd0:	6011 9900 f381 8810 2201 7801 f011 011f     .`.......".x....
    3de0:	408a 6803 08db f013 0304 f8df 1260 18cb     .@.h........`...
    3df0:	601a 7901 07c9 d50d 2201 7801 f011 011f     .`.y.....".x....
    3e00:	408a 6803 08db f013 0304 f8df 1244 18cb     .@.h........D...
    3e10:	601a e08e 2201 7801 f011 011f 408a 6803     .`...".x.....@.h
    3e20:	08db f013 0304 f8df 122c 18cb 601a e080     ........,....`..
    3e30:	6801 2932 d255 f3ef 8110 9100 b672 2173     .h2)U.......r.s!
    3e40:	4a7e 6011 2206 6801 0089 f011 011c 408a     ~J.`.".h.......@
    3e50:	6803 085b f013 037c 4979 18cb 6819 2307     .h[...|.yI...h.#
    3e60:	6804 00a4 f014 041c 40a3 4399 430a 6803     .h.......@.C.C.h
    3e70:	085b f013 037c 4972 18cb 601a 2218 6801     [...|.rI...`.".h
    3e80:	00c9 f011 0118 408a 7803 f013 03fc 496d     .......@.x....mI
    3e90:	18cb 6819 23ff 6804 00e4 f014 0418 40a3     ...h.#.h.......@
    3ea0:	4399 430a 7803 f013 03fc 4966 18cb 601a     .C.C.x....fI...`
    3eb0:	7802 f012 02fc 4964 188a 6812 21ff 6803     .x....dI...h.!.h
    3ec0:	00db f013 0318 4099 438a 7803 f013 03fc     .......@.C.x....
    3ed0:	495d 18cb 601a 2100 4a58 6011 9900 f381     ]I...`.!XJ.`....
    3ee0:	8810 2201 7801 f011 011f 408a 6803 08db     ...".x.....@.h..
    3ef0:	f013 0304 4958 18cb 601a 7901 07c9 d50c     ....XI...`.y....
    3f00:	2201 7801 f011 011f 408a 6803 08db f013     .".x.....@.h....
    3f10:	0304 494f 18cb 601a e00b 2201 7801 f011     ..OI...`...".x..
    3f20:	011f 408a 6803 08db f013 0304 4949 18cb     ...@.h......II..
    3f30:	601a bc11 4770 0000 b570 0004 000d 2000     .`..pG..p...... 
    3f40:	0006 42ae d205 eb04 00c6 f7ff fedf 1c76     ...B..........v.
    3f50:	e7f7 bd70 b410 eb00 02c1 7912 0792 d522     ..p........y..".
    3f60:	eb00 02c1 7912 07d2 d50e f850 3031 08db     .....y....P.10..
    3f70:	f013 0304 4a36 18d3 2201 f810 4031 f014     ....6J..."..1@..
    3f80:	041f 40a2 601a e01c f850 3031 08db f013     ...@.`..P.10....
    3f90:	0304 4a30 18d3 2201 f810 4031 f014 041f     ..0J..."..1@....
    3fa0:	40a2 601a e00d f850 3031 08db f013 0304     .@.`..P.10......
    3fb0:	4a26 18d3 2201 f810 4031 f014 041f 40a2     &J..."..1@.....@
    3fc0:	601a bc10 4770 b410 eb00 02c1 7912 0792     .`..pG.......y..
    3fd0:	d522 eb00 02c1 7912 07d2 d40e f850 3031     "......y....P.10
    3fe0:	08db f013 0304 4a1a 18d3 2201 f810 4031     .......J..."..1@
    3ff0:	f014 041f 40a2 601a e01c f850 3031 08db     .....@.`..P.10..
    4000:	f013 0304 4a13 18d3 2201 f810 4031 f014     .....J..."..1@..
    4010:	041f 40a2 601a e00d f850 3031 08db f013     ...@.`..P.10....
    4020:	0304 4a0d 18d3 2201 f810 4031 f014 041f     ...J..."..1@....
    4030:	40a2 601a bc10 4770 0000 0000 0060 4001     .@.`..pG....`..@
    4040:	0040 4001 0000 4001 00e0 4001 00a8 4001     @..@...@...@...@
    4050:	0090 4001 0098 4001 00b4 4001 b5f8 0004     ...@...@...@....
    4060:	000d 0016 2000 0007 42af d20e 0030 40f8     ..... ...B..0..@
    4070:	07c0 d504 0039 0020 f7ff ff6c e003 0039     ....9. ...l...9.
    4080:	0020 f7ff ffa0 1c7f e7ee bdf1 b430 f5b0      ...........0...
    4090:	6f00 d127 f44f 6300 f44f 5080 2220 2140     .o'.O..cO..P "@!
    40a0:	4c8d 6825 ea25 0000 2b00 6020 f040 80a0     .L%h%....+ `@...
    40b0:	20c8 1e40 d013 4b88 685c 420c d1f9 2800     . @....K\h.B...(
    40c0:	dd0d 20c8 2a00 f000 809c 1e40 d007 4982     ... .*....@....I
    40d0:	684b 4013 4293 d1f8 2800 f300 8092 bc30     Kh.@.B...(....0.
    40e0:	2000 4770 f5b0 5fc0 d103 f44f 53c0 2260     . pG..._..O..S`"
    40f0:	e07d 2801 d106 2301 f240 70fe f44f 7280     }..(...#@..pO..r
    4100:	4976 e7cd 2803 d106 2303 f240 70fc f44f     vI...(...#@..pO.
    4110:	7240 4973 e7c4 2807 d107 2307 f44f 60ff     @rsI...(...#O..`
    4120:	f44f 62e0 f44f 21ff e7ba 280f d107 230f     O..bO..!...(...#
    4130:	f44f 60fe f44f 6270 f44f 21fe e7b0 281f     O..`O.pbO..!...(
    4140:	d107 231f f44f 60fc f44f 52f8 f44f 21fc     ...#O..`O..RO..!
    4150:	e7a6 283f d107 233f f44f 60f8 f44f 527c     ..?(..?#O..`O.|R
    4160:	f44f 21f8 e79c 287f d107 237f f44f 60f0     O..!...(...#O..`
    4170:	f44f 42fe f44f 21f0 e792 28ff d107 23ff     O..BO..!...(...#
    4180:	f44f 60e0 f44f 427f f44f 21e0 e788 f240     O..`O..BO..!..@.
    4190:	13ff 4298 d105 f44f 60c0 4a52 f44f 21c0     ...B..O..`RJO..!
    41a0:	e77e f240 33ff 4298 d105 f44f 6080 4a4e     ~.@..3.B..O..`NJ
    41b0:	f44f 2180 e774 f240 73ff 4298 d016 f1b0     O..!t.@..s.B....
    41c0:	4f20 d104 f04f 4320 f44f 1220 e00f f06f      O..O. CO. ...o.
    41d0:	4120 4288 d106 2300 f04f 4020 2200 f44f      A.B...#O. @."O.
    41e0:	1120 e75d 4b41 4298 f47f af79 4a40 2100      .].AK.B..y.@J.!
    41f0:	4c39 6820 4303 20c8 2900 6023 f43f af61     9L h.C. .)#`?.a.
    4200:	e757 bc30 2001 4770 493a 6848 f3c0 0040     W.0.. pG:IHh..@.
    4210:	b110 6848 07c2 d40c 680a f042 0202 600a     ..Hh.....hB....`
    4220:	6808 f040 0001 6008 684a f002 0203 2a03     .h@....`Jh.....*
    4230:	d1fa 6848 f000 0003 2803 d1fa 2042 f000     ..Hh.....(..B ..
    4240:	b85d 492c 6848 f3c0 0040 b110 6848 07c2     ].,IHh..@...Hh..
    4250:	d40c 680a f042 0202 600a 6808 f040 0001     ...hB....`.h@...
    4260:	6008 684a f002 0203 2a03 d1fa 4770 4922     .`Jh.....*..pG"I
    4270:	f8d1 0ff8 f3c0 0040 b918 f8d1 0ff8 07c2     ......@.........
    4280:	d51f 680a f002 02f0 2a20 bf04 f8d1 0ffc     ...h.... *......
    4290:	f5b0 7f00 d106 f8d1 2ff4 f002 0205 f8c1     ........./......
    42a0:	2ff4 e00b f8d1 0ff4 f020 0002 f8c1 0ff4     ./...... .......
    42b0:	f8d1 0ff4 0840 0040 f8c1 0ff4 200a f000     ....@.@...... ..
    42c0:	b81d 4770 480b 6981 f041 0106 6181 6802     ..pG.H.iA....a.h
    42d0:	f022 0204 6002 4770 1010 4002 fe00 0007     "....`pG...@....
    42e0:	fc00 0007 ff00 0001 ff00 0003 1fff a000     ................
    42f0:	ff00 0007 1000 4002 000c 4002 f8df 1004     .......@...@....
    4300:	6b4a 4710 100c 1000 b081 684a 688b 6809     Jk.G......Jh.h.h
    4310:	ea42 4203 2900 bf18 f052 4200 f3ef 8110     B..B.)..R..B....
    4320:	9100 b672 f8df 117c eb01 1100 f8df 0174     ..r...|.......t.
    4330:	600a f8d0 10f4 f001 010f 2901 bf18 2902     .`.........)...)
    4340:	d036 6801 f3c1 0244 1e52 2a04 bf82 f3c1     6..h..D.R..*....
    4350:	4144 1e49 2904 d92b 6901 f3c1 0244 1e52     DAI..)+..i..D.R.
    4360:	2a04 bf82 f3c1 4144 1e49 2904 d920 6a01     .*....DAI..) ..j
    4370:	f3c1 0244 1e52 2a04 bf82 f3c1 4144 1e49     ..D.R..*....DAI.
    4380:	2904 d915 6b00 f3c0 0144 1e49 2904 bf82     .)...k..D.I..)..
    4390:	f3c0 4044 1e40 2804 d90a f8df 010c 6801     ..D@@..(.......h
    43a0:	f041 0104 6001 9800 f380 8810 b001 4770     A....`........pG
    43b0:	f8df 00f4 6802 f022 0204 6002 9800 f380     .....h"....`....
    43c0:	8810 b001 4770 0000 4a36 b081 eb12 1200     ....pG..6J......
    43d0:	f3ef 8010 9000 b672 6813 f001 2008 4383     ......r..h... .C
    43e0:	f001 1101 4319 6011 9800 f380 8810 b001     .....C.`........
    43f0:	4770 0000 4a2b b081 eb12 1200 f3ef 8010     pG..+J..........
    4400:	9000 b672 6810 f001 2108 4301 6011 9800     ..r..h...!.C.`..
    4410:	f380 8810 b001 4770 b4f0 b081 4d24 4e25     ......pG....$M%N
    4420:	eb05 1500 f3ef 8410 eb16 1600 9400 b672     ..............r.
    4430:	4c1c eb04 1000 4c1d 6800 42a1 bf08 0c00     .L.....L.h.B....
    4440:	f400 70e0 2880 bf17 28c0 1ad3 4613 2200     ...p.(...(...F."
    4450:	f64f 77ff eac3 4002 42b9 bf08 6028 d009     O..w...@.B..(`..
    4460:	42a1 bf08 6030 d005 0c12 0412 6028 ea42     .B..0`......(`B.
    4470:	4213 6032 9800 f380 8810 b001 bcf0 4770     .B2`..........pG
    4480:	b081 f3ef 8110 9100 b672 490b 680a 4310     ........r..I.h.C
    4490:	6008 9800 f380 8810 b001 4770 4907 6008     .`........pG.I.`
    44a0:	4770 0000 800c 4000 1020 4002 0000 ffff     pG.....@ ..@....
    44b0:	8004 4000 8008 4000 8200 4000 8208 4000     ...@...@...@...@
    44c0:	b470 b081 f3ef 8310 9300 b672 4b51 681c     p.........r.QK.h
    44d0:	681d 0796 f3c4 0483 f3c5 3543 d503 494e     .h........C5..NI
    44e0:	6808 6849 e001 07d6 d513 06d6 d507 681e     .hIh...........h
    44f0:	0080 f000 003c f026 063c 4330 6018 0690     ....<.&.<.0C.`..
    4500:	d507 6818 0349 f401 31f0 f420 30f0 4301     ...hI....1 ..0.C
    4510:	6019 0751 d507 06d0 bf44 483f 6004 0690     .`Q.....D.?H.`..
    4520:	bf44 483d 6045 9800 f380 8810 b001 bc70     D.=HE`........p.
    4530:	4770 0000 b570 b082 4604 f000 f8a1 2c01     pG..p....F.....,
    4540:	4605 d15a 4835 f8d0 1244 07ca d455 4934     .FZ.5H..D...U.4I
    4550:	4e34 680a f042 0204 600a 6801 6872 f001     4N.hB....`.hrh..
    4560:	01f0 2920 bf0c 2102 2100 1e52 2a04 f8d0     .. )...!.!R..*..
    4570:	2ff4 f8d0 0ffc bf38 f041 0104 f012 0f03     ./....8.A.......
    4580:	bf18 f041 0101 f240 52ff 4210 bf08 f041     ..A...@..R.B..A.
    4590:	0108 290f d112 6870 1e40 9000 f04f 31ff     ...)..ph@...O..1
    45a0:	9800 f7ff ff27 9800 2300 f04f 1201 f04f     ....'....#O...O.
    45b0:	31ff f7ff ff31 f7ff fe5a e000 2400 bf30     .1..1...Z....$0.
    45c0:	b1c4 2231 2107 2007 f7ff ff7a 201c f7ff     ..1".!. ..z.. ..
    45d0:	fe95 f7ff fe36 6870 1e40 9000 2100 7031     ....6.ph@....!1p
    45e0:	60b1 204c f7ff fe8a 9800 f04f 31ff f7ff     .`L ......O..1..
    45f0:	feeb e008 2001 7030 e005 4909 6808 f030     ..... 0p...I.h0.
    4600:	0004 6008 bf30 4628 b002 e8bd 4070 f000     ...`0.(F....p@..
    4610:	b83d 0000 0068 4002 1194 1000 000c 4002     =...h..@.......@
    4620:	ed10 e000 1184 1000 2810 d307 3810 2101     .........(...8.!
    4630:	f000 001f 4a0e 4081 6011 4770 2804 d00f     .....J.@.`pG.(..
    4640:	d315 2806 d006 d212 4809 f8d0 1c24 f441     ...(.....H..$.A.
    4650:	3100 e00a 4806 f8d0 1c24 f441 2180 e004     .1...H..$.A..!..
    4660:	4803 f8d0 1c24 f441 3180 f8c0 1c24 4770     .H..$.A..1..$.pG
    4670:	e100 e000 f3ef 8010 b662 4770 4770 0000     ........b.pGpG..
    4680:	f3ef 8010 b672 4770 4770 0000 f380 8810     ....r.pGpG......
    4690:	4770 4770 b510 2002 f000 f8af f64f 71ff     pGpG... ....O..q
    46a0:	2000 f7ff fea7 493b 2000 f7ff fe2d 2008     . ....;I. ..-.. 
    46b0:	0004 0023 085b 0022 f64f 71ff 2000 f7ff     ..#.[.".O..q. ..
    46c0:	feab 2001 f7ff feea bd10 b580 2001 f7ff     ... ......... ..
    46d0:	fee5 4831 6800 1c40 492f 6008 2820 d302     ..1H.h@./I.` (..
    46e0:	2000 492d 6008 bd01 b580 2000 f000 f866     . -I.`..... ..f.
    46f0:	482a f000 f8db f000 f937 4829 f7fe fe72     *H......7.)H..r.
    4700:	f3ef 8010 9000 b672 2073 4926 6008 4826     ......r.s &I.`&H
    4710:	6800 f030 0070 4924 6008 4824 6800 f430     .h0.p.$I.`$H.h0.
    4720:	407f f450 5080 4921 6008 4821 6800 f430     .@P..P!I.`!H.h0.
    4730:	407f 491f 6008 2000 491a 6008 9800 f380     .@.I.`. .I.`....
    4740:	8810 2105 481b f7ff fbf7 f000 f996 f000     ...!.H..........
    4750:	f91f f7ff fa93 4818 f7ff fa7d f7ff ff9a     .......H..}.....
    4760:	2001 f7ff fe8d 201d f7ff ff5e f7ff ff82     . ..... ..^.....
    4770:	f64f 71ff 2000 f7ff fe27 f000 f937 2001     O..q. ..'...7.. 
    4780:	f7ff fed8 4804 6802 2105 480a f7ff fc66     .....H.h.!.H..f.
    4790:	e7f5 0000 1000 1000 11a0 1000 9be8 0000     ................
    47a0:	9739 0000 0060 4001 0054 4001 0028 4001     9...`..@T..@(..@
    47b0:	0108 4001 105c 1000 9bbc 0000 b510 0004     ...@\...........
    47c0:	d006 f20f 02b0 f20f 005c 2150 f000 f9af     ........\.P!....
    47d0:	480f 2147 6001 6044 2100 6001 bd10 480d     .HG!.`D`.!.`...H
    47e0:	6800 f010 0001 d004 2801 d004 f04f 30ff     .h.......(..O..0
    47f0:	4770 4809 4770 4809 4770 4909 680a ea22     pG.HpG.HpG.I.h".
    4800:	0000 6008 4770 4906 680a 4310 6008 4770     ...`pG.I.h.C.`pG
    4810:	4014 4000 4018 4000 6c00 02dc 3600 016e     .@.@.@.@.l...6n.
    4820:	400c 4000 3a43 6a5c 7376 615c 626d 7169     .@.@C:\jvs\ambiq
    4830:	775c 726f 5c6b 6574 7473 6e69 5c67 6552     \work\testing\Re
    4840:	2d6c 2e31 2e32 5c39 6d41 6962 5371 6975     l-1.2.9\AmbiqSui
    4850:	6574 6d5c 7563 615c 6f70 6c6c 326f 685c     te\mcu\apollo2\h
    4860:	6c61 615c 5f6d 6168 5f6c 6c63 676b 6e65     al\am_hal_clkgen
    4870:	632e 0000 6d61 685f 6c61 635f 6b6c 6567     .c..am_hal_clkge
    4880:	5f6e 7973 6373 6b6c 735f 6c65 6365 2874     n_sysclk_select(
    4890:	3a29 6920 766e 6c61 6469 6320 6f6c 6b63     ): invalid clock
    48a0:	7320 7465 6974 676e 002e 0000 b530 4605      setting....0..F
    48b0:	b081 78ac 7868 0040 00a1 0864 f000 0002     ...xhx@...d.....
    48c0:	f001 0104 00e4 4308 f004 0408 4304 78e8     .......C.....C.x
    48d0:	4304 7928 01c0 f000 0080 4304 79a8 0280     .C(y.......C.y..
    48e0:	f400 6080 4304 79e8 02c0 f400 6000 4304     ...`.C.y.....`.C
    48f0:	7a28 0300 f400 4070 4304 7a68 0400 f400     (z....p@.Chz....
    4900:	2070 4304 7aa8 0500 f400 1080 4304 7ae8     p .C.z.......C.z
    4910:	0600 f000 7080 4304 f04f 4020 f7ff fbb6     .....p.CO. @....
    4920:	4910 f044 0401 600c 2032 688a 0753 d401     .ID....`2 .hS...
    4930:	1e40 d1fa 6888 f040 0001 6088 2032 688a     @....h@....`2 .h
    4940:	0753 d401 1e40 d1fa 7968 0202 0840 f402     S...@...hy..@...
    4950:	7280 0240 4314 f400 7000 4304 600c b001     .r@..C...p.C.`..
    4960:	bd30 0000 8000 4001 b500 b081 f7ff fc4c     0......@......L.
    4970:	f7ff fca8 f000 f8dc 2001 f000 f8df 2001     ......... ..... 
    4980:	f7ff ff41 b001 f85d eb04 f000 b8e4 0000     ..A...].........
    4990:	482d 6801 07ca d500 4770 b500 492b 482c     -H.h....pG..+I,H
    49a0:	b087 6008 a801 492b 9101 f000 f8df f3ef     ...`..+I........
    49b0:	8010 9000 b672 4828 2173 6381 6ac1 f021     ....r.(Hs!.c.j!.
    49c0:	0170 62c1 6802 f422 427f f442 5280 6002     p..b.h"..BB..R.`
    49d0:	2200 f8d0 10e0 f421 417f f8c0 10e0 6382     ."....!..A.....c
    49e0:	9800 f380 8810 b007 bd00 0000 b500 4816     ...............H
    49f0:	b081 6801 07ca d424 f000 f858 f3ef 8010     ...h..$...X.....
    4a00:	9000 b672 4814 2173 6381 2200 6ac1 f021     ..r..Hs!.c.".j!.
    4a10:	0170 f041 0120 62c1 6801 f421 417f f441     p.A. ..b.h!..AA.
    4a20:	51c0 6001 f8d0 10e0 f421 417f f8c0 10e0     .Q.`....!..A....
    4a30:	6382 9800 f380 8810 b001 f85d eb04 f000     .c........].....
    4a40:	b8d2 b001 bd00 0000 11a4 1000 0e80 e000     ................
    4a50:	0511 0015 4240 000f 0028 4001 f000 b848     ....@B..(..@..H.
    4a60:	b510 4604 f7ff febb 4a1a fba0 2102 0d48     ...F.....J...!H.
    4a70:	4360 e8bd 4010 f7ff bc41 4817 6801 07ca     `C...@..A..H.h..
    4a80:	d413 4816 6801 f041 7180 6001 6802 01d1     ...H.hA..q.`.h..
    4a90:	d5fc 4813 4913 f8c0 11b0 210f 6401 f04f     ...H.I.....!.dO.
    4aa0:	31ff 6001 4910 f8c0 1080 4770 b500 b081     .1.`.I....pG....
    4ab0:	480e 6801 020a d4fc f7ff fe91 4b05 fba0     .H.h.........K..
    4ac0:	3203 b001 0d50 2132 f85d eb04 fb11 f000     .2..P.2!].......
    4ad0:	f7ff bc14 fc08 b2f4 11a4 1000 edfc e000     ................
    4ae0:	0e00 e000 ce55 c5ac 0511 0015 0e80 e000     ....U...........
    4af0:	7801 2200 b1d1 1c52 5c83 b153 1c52 5c81     .x."..R..\S.R..\
    4b00:	b139 1c52 5c83 2b00 d003 1c52 5c81 2900     9.R..\.+..R..\.)
    4b10:	d1f1 b15a f04f 4360 f890 c000 6819 2900     ..Z.O.`C.....h.)
    4b20:	d0fc 1c40 1e52 f883 c000 d1f5 4770 e7fe     ..@.R.......pG..
    4b30:	4901 2037 6008 4770 c008 4000 f8df 1024     .I7 .`pG...@..$.
    4b40:	b120 6808 f040 0080 6008 4770 680a f022      ..h@....`pG.h".
    4b50:	0280 600a 4770 f8df 0010 6801 f041 0110     ...`pG.....hA...
    4b60:	6001 4770 400c 4000 4050 4000 b530 b081     .`pG.@.@P@.@0...
    4b70:	6804 4d20 2100 f8c5 1300 b1fc 2001 6028     .h M.!....... (`
    4b80:	f5a4 4061 491c 4288 bf28 4c1c f7ff fe27     ..a@.I.B(..L..'.
    4b90:	f110 0f01 d005 08c0 fbb0 f0f4 1e40 b280     ............@...
    4ba0:	e000 2005 60e8 2002 f8c5 00ec 2000 f8c5     ... .`. ..... ..
    4bb0:	0efc f240 2001 490e 6008 e00e 6901 60e9     ..@.. .I.`...i.`
    4bc0:	2201 6881 f8c5 10ec 68c3 1e59 408a 602a     .".h.....hY..@*`
    4bd0:	4907 680a 6840 4302 600a b001 e8bd 4030     .I.h@h.C.`....0@
    4be0:	2032 f7ff bf3d 4902 2000 6008 4770 0000     2 ..=..I. .`pG..
    4bf0:	0250 4002 0004 e004 a381 001d 4240 000f     P..@........@B..
    4c00:	b580 4668 3008 f000 f808 bd01 4770 0000     ..hF.0......pG..
    4c10:	0080 1840 6800 4770 4770 b530 b093 0004     ..@..hpGpG0.....
    4c20:	a80c 2118 f000 f852 2500 950a 4825 6800     ...!..R..%..%H.h
    4c30:	900a 980a f88d 002c 980a 0a00 f88d 002d     ......,.......-.
    4c40:	980a 0c00 f8ad 002e 481f 6800 9009 f89d     .........H.h....
    4c50:	002d 0780 d504 0021 2006 f7ff ffd9 e001     -.....!.. ......
    4c60:	f05f 30ff 9008 0021 2000 f7ff ffd1 9000     _..0..!.. ......
    4c70:	0021 2001 f7ff ffcc 9001 0021 2002 f7ff     !.. ......!.. ..
    4c80:	ffc7 9002 0021 2003 f7ff ffc2 9003 0021     ....!.. ......!.
    4c90:	2004 f7ff ffbd 9004 0021 2005 f7ff ffb8     . ......!.. ....
    4ca0:	9005 0021 2006 f7ff ffb3 9006 0021 2007     ..!.. ......!.. 
    4cb0:	f7ff ffae 9007 a80c f000 f80c 2000 0005     ............. ..
    4cc0:	e7fe 0000 ed28 e000 ed38 e000 2200 f000     ....(...8...."..
    4cd0:	b81b 0000 4a0b 68d1 f001 0301 7003 084b     .....J.h.....pK.
    4ce0:	0889 f001 0101 f003 0301 7401 7203 6851     ...........t.rQh
    4cf0:	6843 60c1 6811 430b 6043 6943 6891 430b     Ch.`.h.CC`Ci.h.C
    4d00:	6143 4770 01c0 4002 b500 bf00 0013 4696     CapG...@.......F
    4d10:	4694 3910 bf28 e8a0 500c d8fa ea5f 7c41     .F.9(....P.._.A|
    4d20:	bf28 c00c bf48 f840 2b04 07c9 bf28 f820     (...H.@..+..(. .
    4d30:	2b02 bf48 f800 2b01 bd00 0000 0000 0000     .+H....+........
    4d40:	0256 0000 0000 0000 004d 0800 0051 0800     V.......M...Q...
    4d50:	0055 0800 0059 0800 006d 0800 0071 0800     U...Y...m...q...
    4d60:	007d 0800 0081 0800 0089 0800 0091 0800     }...............
    4d70:	0099 0800 0075 0800 0079 0800 009d 0800     ....u...y.......
    4d80:	005d 0800 0061 0800 0065 0800 0069 0800     ]...a...e...i...
    4d90:	0085 0800 008d 0800 0011 0000 0003 0000     ................
    4da0:	000e 0000 0003 0000 000f 0000 0003 0000     ................
    4db0:	001e 0000 0003 0000 000a 0000 0003 0000     ................
    4dc0:	e019 f850 2b04 07d3 bf44 f1a9 0301 189a     ..P..+..D.......
    4dd0:	1f09 2300 2904 f842 3b04 d2f9 ea5f 7c81     ...#.)B..;.._..|
    4de0:	4613 d504 f04f 0c00 f8a2 c000 1c9b 07c9     .F..O...........
    4df0:	bf44 2100 7019 f850 1b04 2900 d1e1 4770     D..!.pP....)..pG
    4e00:	b410 f850 1b04 b179 6802 6843 4402 3008     ..P...y..hCh.D.0
    4e10:	07dc bf44 f1a9 0401 18e3 f852 4b04 f843     ..D.......R..KC.
    4e20:	4b04 1f09 d1f9 e7ec bc10 4770 b510 4907     .K........pG...I
    4e30:	4479 3118 4c06 447c 3416 e004 680a 1d08     yD.1.L|D.4...h..
    4e40:	4411 4788 4601 42a1 d1f8 bd10 002c 0000     .D.G.F.B....,...
    4e50:	004c 0000 f64e 5188 f2ce 0100 6808 f440     L...N..Q.....h@.
    4e60:	0070 6008 f3bf 8f4f f3bf 8f6f f04f 7000     p..`..O...o.O..p
    4e70:	eee1 0a10 4770 0000 ff49 ffff 0128 0000     ....pG..I...(...
    4e80:	1084 1000 0000 0000 ff79 ffff 0084 0000     ........y.......
    4e90:	feac ffff 1000 1000 0000 0000 f000 f80b     ................
    4ea0:	2800 d001 f7ff ffc2 2000 f3af 8000 f7ff     .(....... ......
    4eb0:	fc1b f000 f802 2001 4770 f000 b801 0000     ....... pG......
    4ec0:	4607 4638 f000 f802 e7fb 0000 b580 f3af     .F8F............
    4ed0:	8000 4a02 0011 2018 beab e7fb 0026 0002     ...J... ....&...
    4ee0:	6942 616e 7972 4320 756f 746e 7265 4520     Binary Counter E
    4ef0:	6178 706d 656c 000a 0a0a 0a0a 0a0a 0a0a     xample..........
    4f00:	0a0a 0a0a 0a0a 0a0a 0a0a 0000 0001 5000     ...............P
    4f10:	0300 0001 0101 0001 f3af 8000 f7ff ff9a     ................
    4f20:	f7ff ffbc f7ff fff8 4770 e7fe e7fe 0000     ........pG......

00004f30 <g_sIOMConfig>:
    4f30:	0000 0000 86a0 0001 0000 3c04               ...........<

00004f3c <g_SPIpins>:
    4f3c:	0006 0000 000a 0000 0009 0000 000a 0000     ................
    4f4c:	0019 0000 002a 0000 002b 0000 002a 0000     ....*...+...*...
    4f5c:	0028 0000 002a 0000 0031 0000 002a 0000     (...*...1...*...

00004f6c <am_hal_cachectrl_defaults>:
    4f6c:	0001 5000 0300 0001 0101 0001 6d61 685f     ...P........am_h
    4f7c:	6c61 635f 6b6c 6567 5f6e 7973 6373 6b6c     al_clkgen_sysclk
    4f8c:	735f 6c65 6365 2874 3a29 6920 766e 6c61     _select(): inval
    4f9c:	6469 6320 6f6c 6b63 7320 7465 6974 676e     id clock setting
    4fac:	002e 0000 2e2e 2e5c 5c2e 6d61 685f 6c61     ......\..\am_hal
    4fbc:	635f 6b6c 6567 2e6e 0063 0000 6854 2065     _clkgen.c...The 
    4fcc:	6966 6f66 6320 756f 646c 276e 2074 6966     fifo couldn't fi
    4fdc:	2074 6874 2065 6572 7571 7365 6574 2064     t the requested 
    4fec:	756e 626d 7265 6f20 2066 7962 6574 0073     number of bytes.
    4ffc:	2e2e 2e5c 5c2e 6d61 685f 6c61 695f 6d6f     ..\..\am_hal_iom
    500c:	632e 0000 6854 2065 6966 6f66 6420 656f     .c..The fifo doe
    501c:	6e73 7427 6320 6e6f 6174 6e69 7420 6568     sn't contain the
    502c:	7220 7165 6575 7473 6465 6e20 6d75 6562      requested numbe
    503c:	2072 666f 6220 7479 7365 002e 7254 6979     r of bytes..Tryi
    504c:	676e 7420 206f 6e65 6261 656c 6120 206e     ng to enable an 
    505c:	4f49 204d 6f6d 7564 656c 7420 6168 2074     IOM module that 
    506c:	6f64 7365 276e 2074 7865 7369 2e74 0000     doesn't exist...

0000507c <i2c_bb_errmap>:
    507c:	0600 0106 0001 0000 6143 6e6e 746f 6520     ........Cannot e
    508c:	616e 6c62 2065 6f6d 6572 7420 6168 206e     nable more than 
    509c:	6e6f 2065 6570 6972 6870 7265 6c61 6120     one peripheral a
    50ac:	2074 2061 6974 656d 002e 0000 2e2e 2e5c     t a time......\.
    50bc:	5c2e 6d61 685f 6c61 705f 7277 7463 6c72     .\am_hal_pwrctrl
    50cc:	632e 0000                                   .c..
