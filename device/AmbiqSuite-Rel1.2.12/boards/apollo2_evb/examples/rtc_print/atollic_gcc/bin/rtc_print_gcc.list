
rtc_print_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002548  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000060  10001000  00002548  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000144  10001060  000025a8  00021060  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021060  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000bdd8  00000000  00000000  00021097  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002889  00000000  00000000  0002ce6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000868  00000000  00000000  0002f6f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 000012e0  00000000  00000000  0002ff60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004e01  00000000  00000000  00031240  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002e88  00000000  00000000  00036041  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  00038ec9  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000017cc  00000000  00000000  00038f48  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000036d9  00000000  00000000  0003a714  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 75 04 00 00 dd 04 00 00 e9 04 00 00     ....u...........
      10:	e9 04 00 00 e9 04 00 00 e9 04 00 00 00 00 00 00     ................
	...
      2c:	e3 04 00 00 e3 04 00 00 00 00 00 00 e3 04 00 00     ................
      3c:	e3 04 00 00 e3 04 00 00 e3 04 00 00 e3 04 00 00     ................
      4c:	e3 04 00 00 e3 04 00 00 e3 04 00 00 e3 04 00 00     ................
      5c:	e3 04 00 00 e3 04 00 00 e3 04 00 00 e3 04 00 00     ................
      6c:	e3 04 00 00 e3 04 00 00 99 01 00 00 e3 04 00 00     ................
      7c:	e3 04 00 00 e3 04 00 00 e3 04 00 00 e3 04 00 00     ................
      8c:	e3 04 00 00 e3 04 00 00 e3 04 00 00 e3 04 00 00     ................
      9c:	e3 04 00 00 e3 04 00 00 e3 04 00 00 e3 04 00 00     ................
      ac:	e3 04 00 00 e3 04 00 00 e3 04 00 00 e3 04 00 00     ................
      bc:	e3 04 00 00                                         ....

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <timerA0_init>:
// Init function for Timer A0.
//
//*****************************************************************************
void
timerA0_init(void)
{
     160:	b580      	push	{r7, lr}
     162:	af00      	add	r7, sp, #0
    //
    // Enable the LFRC.
    //
    am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_LFRC);
     164:	2002      	movs	r0, #2
     166:	f001 fb1d 	bl	17a4 <am_hal_clkgen_osc_start>

    //
    // Set up timer A0.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
     16a:	f64f 71ff 	movw	r1, #65535	; 0xffff
     16e:	2000      	movs	r0, #0
     170:	f001 fbb6 	bl	18e0 <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer0);
     174:	4907      	ldr	r1, [pc, #28]	; (194 <timerA0_init+0x34>)
     176:	2000      	movs	r0, #0
     178:	f001 fb28 	bl	17cc <am_hal_ctimer_config>

    //
    // Set the timing for timerA0.
    //
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, 31, 0);
     17c:	2300      	movs	r3, #0
     17e:	221f      	movs	r2, #31
     180:	f64f 71ff 	movw	r1, #65535	; 0xffff
     184:	2000      	movs	r0, #0
     186:	f001 fbbf 	bl	1908 <am_hal_ctimer_period_set>

    //
    // Clear the timer Interrupt
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
     18a:	2001      	movs	r0, #1
     18c:	f001 fc28 	bl	19e0 <am_hal_ctimer_int_clear>
}
     190:	bf00      	nop
     192:	bd80      	pop	{r7, pc}
     194:	10001054 	.word	0x10001054

00000198 <am_ctimer_isr>:
// Timer Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
     198:	b580      	push	{r7, lr}
     19a:	af00      	add	r7, sp, #0
    //
    // Clear TimerA0 Interrupt (write to clear).
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
     19c:	2001      	movs	r0, #1
     19e:	f001 fc1f 	bl	19e0 <am_hal_ctimer_int_clear>

    am_hal_rtc_time_get(&hal_time);
     1a2:	4802      	ldr	r0, [pc, #8]	; (1ac <am_ctimer_isr+0x14>)
     1a4:	f001 ff02 	bl	1fac <am_hal_rtc_time_get>

}
     1a8:	bf00      	nop
     1aa:	bd80      	pop	{r7, pc}
     1ac:	10001174 	.word	0x10001174

000001b0 <toVal>:
// toVal() converts a string to an ASCII value.
//
//*****************************************************************************
int
toVal(char *pcAsciiStr)
{
     1b0:	b480      	push	{r7}
     1b2:	b085      	sub	sp, #20
     1b4:	af00      	add	r7, sp, #0
     1b6:	6078      	str	r0, [r7, #4]
    int iRetVal = 0;
     1b8:	2300      	movs	r3, #0
     1ba:	60fb      	str	r3, [r7, #12]
    iRetVal += pcAsciiStr[1] - '0';
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	3301      	adds	r3, #1
     1c0:	781b      	ldrb	r3, [r3, #0]
     1c2:	3b30      	subs	r3, #48	; 0x30
     1c4:	68fa      	ldr	r2, [r7, #12]
     1c6:	4413      	add	r3, r2
     1c8:	60fb      	str	r3, [r7, #12]
    iRetVal += pcAsciiStr[0] == ' ' ? 0 : (pcAsciiStr[0] - '0') * 10;
     1ca:	687b      	ldr	r3, [r7, #4]
     1cc:	781b      	ldrb	r3, [r3, #0]
     1ce:	2b20      	cmp	r3, #32
     1d0:	d009      	beq.n	1e6 <toVal+0x36>
     1d2:	687b      	ldr	r3, [r7, #4]
     1d4:	781b      	ldrb	r3, [r3, #0]
     1d6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
     1da:	4613      	mov	r3, r2
     1dc:	009b      	lsls	r3, r3, #2
     1de:	4413      	add	r3, r2
     1e0:	005b      	lsls	r3, r3, #1
     1e2:	461a      	mov	r2, r3
     1e4:	e000      	b.n	1e8 <toVal+0x38>
     1e6:	2200      	movs	r2, #0
     1e8:	68fb      	ldr	r3, [r7, #12]
     1ea:	4413      	add	r3, r2
     1ec:	60fb      	str	r3, [r7, #12]
    return iRetVal;
     1ee:	68fb      	ldr	r3, [r7, #12]
}
     1f0:	4618      	mov	r0, r3
     1f2:	3714      	adds	r7, #20
     1f4:	46bd      	mov	sp, r7
     1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1fa:	4770      	bx	lr

000001fc <mthToIndex>:
// by the string, and 12 indicating that the string is not a month.
//
//*****************************************************************************
int
mthToIndex(char *pcMon)
{
     1fc:	b580      	push	{r7, lr}
     1fe:	b084      	sub	sp, #16
     200:	af00      	add	r7, sp, #0
     202:	6078      	str	r0, [r7, #4]
    int idx;
    for (idx = 0; idx < 12; idx++)
     204:	2300      	movs	r3, #0
     206:	60fb      	str	r3, [r7, #12]
     208:	e010      	b.n	22c <mthToIndex+0x30>
    {
        if ( am_util_string_strnicmp(pcMonth[idx], pcMon, 3) == 0 )
     20a:	4a0c      	ldr	r2, [pc, #48]	; (23c <mthToIndex+0x40>)
     20c:	68fb      	ldr	r3, [r7, #12]
     20e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     212:	2203      	movs	r2, #3
     214:	6879      	ldr	r1, [r7, #4]
     216:	4618      	mov	r0, r3
     218:	f001 f892 	bl	1340 <am_util_string_strnicmp>
     21c:	4603      	mov	r3, r0
     21e:	2b00      	cmp	r3, #0
     220:	d101      	bne.n	226 <mthToIndex+0x2a>
        {
            return idx;
     222:	68fb      	ldr	r3, [r7, #12]
     224:	e006      	b.n	234 <mthToIndex+0x38>
    for (idx = 0; idx < 12; idx++)
     226:	68fb      	ldr	r3, [r7, #12]
     228:	3301      	adds	r3, #1
     22a:	60fb      	str	r3, [r7, #12]
     22c:	68fb      	ldr	r3, [r7, #12]
     22e:	2b0b      	cmp	r3, #11
     230:	ddeb      	ble.n	20a <mthToIndex+0xe>
        }
    }
    return 12;
     232:	230c      	movs	r3, #12
}
     234:	4618      	mov	r0, r3
     236:	3710      	adds	r7, #16
     238:	46bd      	mov	sp, r7
     23a:	bd80      	pop	{r7, pc}
     23c:	10001020 	.word	0x10001020

00000240 <main>:
// Main
//
//*****************************************************************************
int
main(void)
{
     240:	b5b0      	push	{r4, r5, r7, lr}
     242:	b082      	sub	sp, #8
     244:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     246:	2000      	movs	r0, #0
     248:	f001 fa84 	bl	1754 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     24c:	4870      	ldr	r0, [pc, #448]	; (410 <main+0x1d0>)
     24e:	f001 f9eb 	bl	1628 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     252:	f001 f961 	bl	1518 <am_bsp_low_power_init>

#if RTC_CLK_SRC == XT
    //
    // Enable the XT for the RTC.
    //
    am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_XT);
     256:	2001      	movs	r0, #1
     258:	f001 faa4 	bl	17a4 <am_hal_clkgen_osc_start>

    //
    // Select XT for RTC clock source
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_XT);
     25c:	2000      	movs	r0, #0
     25e:	f001 fdf7 	bl	1e50 <am_hal_rtc_osc_select>
#endif

    //
    // Enable the RTC.
    //
    am_hal_rtc_osc_enable();
     262:	f001 fe03 	bl	1e6c <am_hal_rtc_osc_enable>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     266:	486b      	ldr	r0, [pc, #428]	; (414 <main+0x1d4>)
     268:	f000 f9be 	bl	5e8 <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     26c:	f001 fbf0 	bl	1a50 <am_hal_interrupt_master_disable>
     270:	4603      	mov	r3, r0
     272:	607b      	str	r3, [r7, #4]
     274:	4b68      	ldr	r3, [pc, #416]	; (418 <main+0x1d8>)
     276:	2273      	movs	r2, #115	; 0x73
     278:	601a      	str	r2, [r3, #0]
     27a:	4a68      	ldr	r2, [pc, #416]	; (41c <main+0x1dc>)
     27c:	4b67      	ldr	r3, [pc, #412]	; (41c <main+0x1dc>)
     27e:	681b      	ldr	r3, [r3, #0]
     280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     284:	6013      	str	r3, [r2, #0]
     286:	4a66      	ldr	r2, [pc, #408]	; (420 <main+0x1e0>)
     288:	4b65      	ldr	r3, [pc, #404]	; (420 <main+0x1e0>)
     28a:	681b      	ldr	r3, [r3, #0]
     28c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     290:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     294:	6013      	str	r3, [r2, #0]
     296:	4a63      	ldr	r2, [pc, #396]	; (424 <main+0x1e4>)
     298:	4b62      	ldr	r3, [pc, #392]	; (424 <main+0x1e4>)
     29a:	681b      	ldr	r3, [r3, #0]
     29c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     2a0:	6013      	str	r3, [r2, #0]
     2a2:	4b5d      	ldr	r3, [pc, #372]	; (418 <main+0x1d8>)
     2a4:	2200      	movs	r2, #0
     2a6:	601a      	str	r2, [r3, #0]
     2a8:	687b      	ldr	r3, [r7, #4]
     2aa:	4618      	mov	r0, r3
     2ac:	f001 fbd4 	bl	1a58 <am_hal_interrupt_master_set>

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     2b0:	f001 fbd6 	bl	1a60 <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     2b4:	f001 f942 	bl	153c <am_bsp_debug_printf_enable>
#if defined(__GNUC__)  ||  defined(__ARMCC_VERSION)  ||  defined(__IAR_SYSTEMS_ICC__)
    //
    // The RTC is initialized from the date and time strings that are
    // obtained from the compiler at compile time.
    //
    hal_time.ui32Hour = toVal(&__TIME__[0]);
     2b8:	485b      	ldr	r0, [pc, #364]	; (428 <main+0x1e8>)
     2ba:	f7ff ff79 	bl	1b0 <toVal>
     2be:	4603      	mov	r3, r0
     2c0:	461a      	mov	r2, r3
     2c2:	4b5a      	ldr	r3, [pc, #360]	; (42c <main+0x1ec>)
     2c4:	61da      	str	r2, [r3, #28]
    hal_time.ui32Minute = toVal(&__TIME__[3]);
     2c6:	485a      	ldr	r0, [pc, #360]	; (430 <main+0x1f0>)
     2c8:	f7ff ff72 	bl	1b0 <toVal>
     2cc:	4603      	mov	r3, r0
     2ce:	461a      	mov	r2, r3
     2d0:	4b56      	ldr	r3, [pc, #344]	; (42c <main+0x1ec>)
     2d2:	621a      	str	r2, [r3, #32]
    hal_time.ui32Second = toVal(&__TIME__[6]);
     2d4:	4857      	ldr	r0, [pc, #348]	; (434 <main+0x1f4>)
     2d6:	f7ff ff6b 	bl	1b0 <toVal>
     2da:	4603      	mov	r3, r0
     2dc:	461a      	mov	r2, r3
     2de:	4b53      	ldr	r3, [pc, #332]	; (42c <main+0x1ec>)
     2e0:	625a      	str	r2, [r3, #36]	; 0x24
    hal_time.ui32Hundredths = 00;
     2e2:	4b52      	ldr	r3, [pc, #328]	; (42c <main+0x1ec>)
     2e4:	2200      	movs	r2, #0
     2e6:	629a      	str	r2, [r3, #40]	; 0x28
    hal_time.ui32Weekday = am_util_time_computeDayofWeek(2000 + toVal(&__DATE__[9]), mthToIndex(&__DATE__[0]) + 1, toVal(&__DATE__[4]) );
     2e8:	4853      	ldr	r0, [pc, #332]	; (438 <main+0x1f8>)
     2ea:	f7ff ff61 	bl	1b0 <toVal>
     2ee:	4603      	mov	r3, r0
     2f0:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
     2f4:	4851      	ldr	r0, [pc, #324]	; (43c <main+0x1fc>)
     2f6:	f7ff ff81 	bl	1fc <mthToIndex>
     2fa:	4603      	mov	r3, r0
     2fc:	1c5d      	adds	r5, r3, #1
     2fe:	4850      	ldr	r0, [pc, #320]	; (440 <main+0x200>)
     300:	f7ff ff56 	bl	1b0 <toVal>
     304:	4603      	mov	r3, r0
     306:	461a      	mov	r2, r3
     308:	4629      	mov	r1, r5
     30a:	4620      	mov	r0, r4
     30c:	f001 f868 	bl	13e0 <am_util_time_computeDayofWeek>
     310:	4603      	mov	r3, r0
     312:	461a      	mov	r2, r3
     314:	4b45      	ldr	r3, [pc, #276]	; (42c <main+0x1ec>)
     316:	609a      	str	r2, [r3, #8]
    hal_time.ui32DayOfMonth = toVal(&__DATE__[4]);
     318:	4849      	ldr	r0, [pc, #292]	; (440 <main+0x200>)
     31a:	f7ff ff49 	bl	1b0 <toVal>
     31e:	4603      	mov	r3, r0
     320:	461a      	mov	r2, r3
     322:	4b42      	ldr	r3, [pc, #264]	; (42c <main+0x1ec>)
     324:	619a      	str	r2, [r3, #24]
    hal_time.ui32Month = mthToIndex(&__DATE__[0]);
     326:	4845      	ldr	r0, [pc, #276]	; (43c <main+0x1fc>)
     328:	f7ff ff68 	bl	1fc <mthToIndex>
     32c:	4603      	mov	r3, r0
     32e:	461a      	mov	r2, r3
     330:	4b3e      	ldr	r3, [pc, #248]	; (42c <main+0x1ec>)
     332:	615a      	str	r2, [r3, #20]
    hal_time.ui32Year = toVal(&__DATE__[9]);
     334:	4840      	ldr	r0, [pc, #256]	; (438 <main+0x1f8>)
     336:	f7ff ff3b 	bl	1b0 <toVal>
     33a:	4603      	mov	r3, r0
     33c:	461a      	mov	r2, r3
     33e:	4b3b      	ldr	r3, [pc, #236]	; (42c <main+0x1ec>)
     340:	611a      	str	r2, [r3, #16]
    hal_time.ui32Century = 0;
     342:	4b3a      	ldr	r3, [pc, #232]	; (42c <main+0x1ec>)
     344:	2200      	movs	r2, #0
     346:	60da      	str	r2, [r3, #12]
    hal_time.ui32DayOfMonth = 15;
    hal_time.ui32Month = 4;
    hal_time.ui32Year = 14;
    hal_time.ui32Century = 0;
#endif
    am_hal_rtc_time_set(&hal_time);
     348:	4838      	ldr	r0, [pc, #224]	; (42c <main+0x1ec>)
     34a:	f001 fd9f 	bl	1e8c <am_hal_rtc_time_set>

    //
    // TimerA0 init.
    //
    timerA0_init();
     34e:	f7ff ff07 	bl	160 <timerA0_init>

    //
    // Enable the timer Interrupt.
    //
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
     352:	2001      	movs	r0, #1
     354:	f001 fb32 	bl	19bc <am_hal_ctimer_int_enable>

    //
    // Enable the timer interrupt in the NVIC.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_CTIMER);
     358:	201d      	movs	r0, #29
     35a:	f001 fb4d 	bl	19f8 <am_hal_interrupt_enable>
    am_hal_interrupt_master_enable();
     35e:	f001 fb73 	bl	1a48 <am_hal_interrupt_master_enable>

    //
    // Enable the timer.
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
     362:	f64f 71ff 	movw	r1, #65535	; 0xffff
     366:	2000      	movs	r0, #0
     368:	f001 faa2 	bl	18b0 <am_hal_ctimer_start>
    while (1)
    {
        //
        // Enable debug printf messages using ITM on SWO pin
        //
        am_bsp_debug_printf_enable();
     36c:	f001 f8e6 	bl	153c <am_bsp_debug_printf_enable>

        //
        // Clear the terminal.
        //
        am_util_stdio_terminal_clear();
     370:	f000 ffdc 	bl	132c <am_util_stdio_terminal_clear>

        //
        // Print the banner.
        //
        am_util_stdio_printf("RTC Print Example\n");
     374:	4833      	ldr	r0, [pc, #204]	; (444 <main+0x204>)
     376:	f000 ffbb 	bl	12f0 <am_util_stdio_printf>
        am_util_stdio_printf("This example was built on %s at %s.\n\n", __DATE__, __TIME__);
     37a:	4a2b      	ldr	r2, [pc, #172]	; (428 <main+0x1e8>)
     37c:	492f      	ldr	r1, [pc, #188]	; (43c <main+0x1fc>)
     37e:	4832      	ldr	r0, [pc, #200]	; (448 <main+0x208>)
     380:	f000 ffb6 	bl	12f0 <am_util_stdio_printf>

        //
        // Print RTC time.
        //
        am_hal_rtc_time_get(&hal_time);
     384:	4829      	ldr	r0, [pc, #164]	; (42c <main+0x1ec>)
     386:	f001 fe11 	bl	1fac <am_hal_rtc_time_get>
        am_util_stdio_printf("\tIt is now ");
     38a:	4830      	ldr	r0, [pc, #192]	; (44c <main+0x20c>)
     38c:	f000 ffb0 	bl	12f0 <am_util_stdio_printf>
        am_util_stdio_printf("%d : ", hal_time.ui32Hour);
     390:	4b26      	ldr	r3, [pc, #152]	; (42c <main+0x1ec>)
     392:	69db      	ldr	r3, [r3, #28]
     394:	4619      	mov	r1, r3
     396:	482e      	ldr	r0, [pc, #184]	; (450 <main+0x210>)
     398:	f000 ffaa 	bl	12f0 <am_util_stdio_printf>
        am_util_stdio_printf("%02d : ", hal_time.ui32Minute);
     39c:	4b23      	ldr	r3, [pc, #140]	; (42c <main+0x1ec>)
     39e:	6a1b      	ldr	r3, [r3, #32]
     3a0:	4619      	mov	r1, r3
     3a2:	482c      	ldr	r0, [pc, #176]	; (454 <main+0x214>)
     3a4:	f000 ffa4 	bl	12f0 <am_util_stdio_printf>
        am_util_stdio_printf("%02d.", hal_time.ui32Second);
     3a8:	4b20      	ldr	r3, [pc, #128]	; (42c <main+0x1ec>)
     3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     3ac:	4619      	mov	r1, r3
     3ae:	482a      	ldr	r0, [pc, #168]	; (458 <main+0x218>)
     3b0:	f000 ff9e 	bl	12f0 <am_util_stdio_printf>
        am_util_stdio_printf("%02d ", hal_time.ui32Hundredths);
     3b4:	4b1d      	ldr	r3, [pc, #116]	; (42c <main+0x1ec>)
     3b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     3b8:	4619      	mov	r1, r3
     3ba:	4828      	ldr	r0, [pc, #160]	; (45c <main+0x21c>)
     3bc:	f000 ff98 	bl	12f0 <am_util_stdio_printf>
        am_util_stdio_printf(pcWeekday[hal_time.ui32Weekday]);
     3c0:	4b1a      	ldr	r3, [pc, #104]	; (42c <main+0x1ec>)
     3c2:	689b      	ldr	r3, [r3, #8]
     3c4:	4a26      	ldr	r2, [pc, #152]	; (460 <main+0x220>)
     3c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     3ca:	4618      	mov	r0, r3
     3cc:	f000 ff90 	bl	12f0 <am_util_stdio_printf>
        am_util_stdio_printf(" ");
     3d0:	4824      	ldr	r0, [pc, #144]	; (464 <main+0x224>)
     3d2:	f000 ff8d 	bl	12f0 <am_util_stdio_printf>
        am_util_stdio_printf(pcMonth[hal_time.ui32Month]);
     3d6:	4b15      	ldr	r3, [pc, #84]	; (42c <main+0x1ec>)
     3d8:	695b      	ldr	r3, [r3, #20]
     3da:	4a23      	ldr	r2, [pc, #140]	; (468 <main+0x228>)
     3dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     3e0:	4618      	mov	r0, r3
     3e2:	f000 ff85 	bl	12f0 <am_util_stdio_printf>
        am_util_stdio_printf(" ");
     3e6:	481f      	ldr	r0, [pc, #124]	; (464 <main+0x224>)
     3e8:	f000 ff82 	bl	12f0 <am_util_stdio_printf>
        am_util_stdio_printf("%d, ", hal_time.ui32DayOfMonth);
     3ec:	4b0f      	ldr	r3, [pc, #60]	; (42c <main+0x1ec>)
     3ee:	699b      	ldr	r3, [r3, #24]
     3f0:	4619      	mov	r1, r3
     3f2:	481e      	ldr	r0, [pc, #120]	; (46c <main+0x22c>)
     3f4:	f000 ff7c 	bl	12f0 <am_util_stdio_printf>
        am_util_stdio_printf("20%02d", hal_time.ui32Year);
     3f8:	4b0c      	ldr	r3, [pc, #48]	; (42c <main+0x1ec>)
     3fa:	691b      	ldr	r3, [r3, #16]
     3fc:	4619      	mov	r1, r3
     3fe:	481c      	ldr	r0, [pc, #112]	; (470 <main+0x230>)
     400:	f000 ff76 	bl	12f0 <am_util_stdio_printf>

        //
        // We are done printing. Disable debug printf messages on ITM.
        //
        am_bsp_debug_printf_disable();
     404:	f001 f8da 	bl	15bc <am_bsp_debug_printf_disable>

        //
        // Go to Deep Sleep and wait for a wake up.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     408:	2001      	movs	r0, #1
     40a:	f001 fe33 	bl	2074 <am_hal_sysctrl_sleep>
        am_bsp_debug_printf_enable();
     40e:	e7ad      	b.n	36c <main+0x12c>
     410:	000024ec 	.word	0x000024ec
     414:	00001625 	.word	0x00001625
     418:	40010060 	.word	0x40010060
     41c:	40010054 	.word	0x40010054
     420:	40010028 	.word	0x40010028
     424:	40010108 	.word	0x40010108
     428:	00002344 	.word	0x00002344
     42c:	10001174 	.word	0x10001174
     430:	00002347 	.word	0x00002347
     434:	0000234a 	.word	0x0000234a
     438:	00002359 	.word	0x00002359
     43c:	00002350 	.word	0x00002350
     440:	00002354 	.word	0x00002354
     444:	0000235c 	.word	0x0000235c
     448:	00002370 	.word	0x00002370
     44c:	00002398 	.word	0x00002398
     450:	000023a4 	.word	0x000023a4
     454:	000023ac 	.word	0x000023ac
     458:	000023b4 	.word	0x000023b4
     45c:	000023bc 	.word	0x000023bc
     460:	10001000 	.word	0x10001000
     464:	000023c4 	.word	0x000023c4
     468:	10001020 	.word	0x10001020
     46c:	000023c8 	.word	0x000023c8
     470:	000023d0 	.word	0x000023d0

00000474 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     474:	4811      	ldr	r0, [pc, #68]	; (4bc <zero_loop+0x12>)
     476:	4912      	ldr	r1, [pc, #72]	; (4c0 <zero_loop+0x16>)
     478:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     47a:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     47e:	4811      	ldr	r0, [pc, #68]	; (4c4 <zero_loop+0x1a>)
     480:	6801      	ldr	r1, [r0, #0]
     482:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     486:	6001      	str	r1, [r0, #0]
     488:	f3bf 8f4f 	dsb	sy
     48c:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     490:	480d      	ldr	r0, [pc, #52]	; (4c8 <zero_loop+0x1e>)
     492:	490e      	ldr	r1, [pc, #56]	; (4cc <zero_loop+0x22>)
     494:	4a0e      	ldr	r2, [pc, #56]	; (4d0 <zero_loop+0x26>)

00000496 <copy_loop>:
     496:	f850 3b04 	ldr.w	r3, [r0], #4
     49a:	f841 3b04 	str.w	r3, [r1], #4
     49e:	4291      	cmp	r1, r2
     4a0:	dbf9      	blt.n	496 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     4a2:	480c      	ldr	r0, [pc, #48]	; (4d4 <zero_loop+0x2a>)
     4a4:	490c      	ldr	r1, [pc, #48]	; (4d8 <zero_loop+0x2e>)
     4a6:	f04f 0200 	mov.w	r2, #0

000004aa <zero_loop>:
     4aa:	4288      	cmp	r0, r1
     4ac:	bfb8      	it	lt
     4ae:	f840 2b04 	strlt.w	r2, [r0], #4
     4b2:	dbfa      	blt.n	4aa <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     4b4:	f7ff fec4 	bl	240 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     4b8:	be00      	bkpt	0x0000
}
     4ba:	bf00      	nop
     4bc:	e000ed08 	.word	0xe000ed08
     4c0:	00000000 	.word	0x00000000
     4c4:	e000ed88 	.word	0xe000ed88
     4c8:	00002548 	.word	0x00002548
     4cc:	10001000 	.word	0x10001000
     4d0:	10001060 	.word	0x10001060
     4d4:	10001060 	.word	0x10001060
     4d8:	100011a4 	.word	0x100011a4

000004dc <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     4dc:	b480      	push	{r7}
     4de:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     4e0:	e7fe      	b.n	4e0 <am_nmi_isr+0x4>

000004e2 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     4e2:	b480      	push	{r7}
     4e4:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     4e6:	e7fe      	b.n	4e6 <am_adc_isr+0x4>

000004e8 <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     4e8:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     4ea:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     4ec:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     4ee:	f000 f809 	bl	504 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     4f2:	bd01      	pop	{r0, pc}
}
     4f4:	bf00      	nop
     4f6:	4618      	mov	r0, r3

000004f8 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     4f8:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     4fa:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     4fc:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     4fe:	4770      	bx	lr
}
     500:	bf00      	nop
     502:	4618      	mov	r0, r3

00000504 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     504:	b580      	push	{r7, lr}
     506:	b096      	sub	sp, #88	; 0x58
     508:	af00      	add	r7, sp, #0
     50a:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     50c:	f107 030c 	add.w	r3, r7, #12
     510:	2200      	movs	r2, #0
     512:	601a      	str	r2, [r3, #0]
     514:	605a      	str	r2, [r3, #4]
     516:	609a      	str	r2, [r3, #8]
     518:	60da      	str	r2, [r3, #12]
     51a:	611a      	str	r2, [r3, #16]
     51c:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
     51e:	2300      	movs	r3, #0
     520:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     524:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     526:	4b2e      	ldr	r3, [pc, #184]	; (5e0 <am_util_faultisr_collect_data+0xdc>)
     528:	681b      	ldr	r3, [r3, #0]
     52a:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     52c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     52e:	b2db      	uxtb	r3, r3
     530:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     536:	0a1b      	lsrs	r3, r3, #8
     538:	b2db      	uxtb	r3, r3
     53a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     53e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     540:	0c1b      	lsrs	r3, r3, #16
     542:	b29b      	uxth	r3, r3
     544:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     548:	4b26      	ldr	r3, [pc, #152]	; (5e4 <am_util_faultisr_collect_data+0xe0>)
     54a:	681b      	ldr	r3, [r3, #0]
     54c:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     54e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     552:	b2db      	uxtb	r3, r3
     554:	f003 0302 	and.w	r3, r3, #2
     558:	2b00      	cmp	r3, #0
     55a:	d005      	beq.n	568 <am_util_faultisr_collect_data+0x64>
     55c:	6879      	ldr	r1, [r7, #4]
     55e:	2006      	movs	r0, #6
     560:	f7ff ffca 	bl	4f8 <getStackedReg>
     564:	4603      	mov	r3, r0
     566:	e001      	b.n	56c <am_util_faultisr_collect_data+0x68>
     568:	f04f 33ff 	mov.w	r3, #4294967295
     56c:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     56e:	6879      	ldr	r1, [r7, #4]
     570:	2000      	movs	r0, #0
     572:	f7ff ffc1 	bl	4f8 <getStackedReg>
     576:	4603      	mov	r3, r0
     578:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     57a:	6879      	ldr	r1, [r7, #4]
     57c:	2001      	movs	r0, #1
     57e:	f7ff ffbb 	bl	4f8 <getStackedReg>
     582:	4603      	mov	r3, r0
     584:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     586:	6879      	ldr	r1, [r7, #4]
     588:	2002      	movs	r0, #2
     58a:	f7ff ffb5 	bl	4f8 <getStackedReg>
     58e:	4603      	mov	r3, r0
     590:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     592:	6879      	ldr	r1, [r7, #4]
     594:	2003      	movs	r0, #3
     596:	f7ff ffaf 	bl	4f8 <getStackedReg>
     59a:	4603      	mov	r3, r0
     59c:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     59e:	6879      	ldr	r1, [r7, #4]
     5a0:	2004      	movs	r0, #4
     5a2:	f7ff ffa9 	bl	4f8 <getStackedReg>
     5a6:	4603      	mov	r3, r0
     5a8:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     5aa:	6879      	ldr	r1, [r7, #4]
     5ac:	2005      	movs	r0, #5
     5ae:	f7ff ffa3 	bl	4f8 <getStackedReg>
     5b2:	4603      	mov	r3, r0
     5b4:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     5b6:	6879      	ldr	r1, [r7, #4]
     5b8:	2006      	movs	r0, #6
     5ba:	f7ff ff9d 	bl	4f8 <getStackedReg>
     5be:	4603      	mov	r3, r0
     5c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     5c2:	6879      	ldr	r1, [r7, #4]
     5c4:	2007      	movs	r0, #7
     5c6:	f7ff ff97 	bl	4f8 <getStackedReg>
     5ca:	4603      	mov	r3, r0
     5cc:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     5ce:	f107 030c 	add.w	r3, r7, #12
     5d2:	4618      	mov	r0, r3
     5d4:	f001 fa94 	bl	1b00 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     5d8:	2300      	movs	r3, #0
     5da:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
     5dc:	e7fe      	b.n	5dc <am_util_faultisr_collect_data+0xd8>
     5de:	bf00      	nop
     5e0:	e000ed28 	.word	0xe000ed28
     5e4:	e000ed38 	.word	0xe000ed38

000005e8 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     5e8:	b480      	push	{r7}
     5ea:	b083      	sub	sp, #12
     5ec:	af00      	add	r7, sp, #0
     5ee:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     5f0:	4a04      	ldr	r2, [pc, #16]	; (604 <am_util_stdio_printf_init+0x1c>)
     5f2:	687b      	ldr	r3, [r7, #4]
     5f4:	6013      	str	r3, [r2, #0]
}
     5f6:	bf00      	nop
     5f8:	370c      	adds	r7, #12
     5fa:	46bd      	mov	sp, r7
     5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     600:	4770      	bx	lr
     602:	bf00      	nop
     604:	100011a0 	.word	0x100011a0

00000608 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     608:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     60c:	b096      	sub	sp, #88	; 0x58
     60e:	af00      	add	r7, sp, #0
     610:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     614:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     618:	0025      	movs	r5, r4
     61a:	2600      	movs	r6, #0
     61c:	ea55 0306 	orrs.w	r3, r5, r6
     620:	f000 80a0 	beq.w	764 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     624:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     628:	0862      	lsrs	r2, r4, #1
     62a:	ea4f 0133 	mov.w	r1, r3, rrx
     62e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     632:	ea4f 0893 	mov.w	r8, r3, lsr #2
     636:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     63a:	ea4f 0994 	mov.w	r9, r4, lsr #2
     63e:	eb11 0308 	adds.w	r3, r1, r8
     642:	eb42 0409 	adc.w	r4, r2, r9
     646:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     64a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     64e:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     652:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     656:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     65a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     65e:	eb13 030a 	adds.w	r3, r3, sl
     662:	eb44 040b 	adc.w	r4, r4, fp
     666:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     66a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     66e:	0a1a      	lsrs	r2, r3, #8
     670:	62ba      	str	r2, [r7, #40]	; 0x28
     672:	6aba      	ldr	r2, [r7, #40]	; 0x28
     674:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     678:	62ba      	str	r2, [r7, #40]	; 0x28
     67a:	0a23      	lsrs	r3, r4, #8
     67c:	62fb      	str	r3, [r7, #44]	; 0x2c
     67e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     682:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     686:	18c9      	adds	r1, r1, r3
     688:	eb42 0204 	adc.w	r2, r2, r4
     68c:	460b      	mov	r3, r1
     68e:	4614      	mov	r4, r2
     690:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     694:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     698:	0c1a      	lsrs	r2, r3, #16
     69a:	623a      	str	r2, [r7, #32]
     69c:	6a3a      	ldr	r2, [r7, #32]
     69e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     6a2:	623a      	str	r2, [r7, #32]
     6a4:	0c23      	lsrs	r3, r4, #16
     6a6:	627b      	str	r3, [r7, #36]	; 0x24
     6a8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6ac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     6b0:	18c9      	adds	r1, r1, r3
     6b2:	eb42 0204 	adc.w	r2, r2, r4
     6b6:	460b      	mov	r3, r1
     6b8:	4614      	mov	r4, r2
     6ba:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     6be:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6c2:	0023      	movs	r3, r4
     6c4:	603b      	str	r3, [r7, #0]
     6c6:	2300      	movs	r3, #0
     6c8:	607b      	str	r3, [r7, #4]
     6ca:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6ce:	e897 0006 	ldmia.w	r7, {r1, r2}
     6d2:	18c9      	adds	r1, r1, r3
     6d4:	eb42 0204 	adc.w	r2, r2, r4
     6d8:	460b      	mov	r3, r1
     6da:	4614      	mov	r4, r2
     6dc:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     6e0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6e4:	08da      	lsrs	r2, r3, #3
     6e6:	613a      	str	r2, [r7, #16]
     6e8:	693a      	ldr	r2, [r7, #16]
     6ea:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     6ee:	613a      	str	r2, [r7, #16]
     6f0:	08e3      	lsrs	r3, r4, #3
     6f2:	617b      	str	r3, [r7, #20]
     6f4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     6f8:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     6fc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
     700:	460b      	mov	r3, r1
     702:	4614      	mov	r4, r2
     704:	00a0      	lsls	r0, r4, #2
     706:	60f8      	str	r0, [r7, #12]
     708:	68f8      	ldr	r0, [r7, #12]
     70a:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
     70e:	60f8      	str	r0, [r7, #12]
     710:	009b      	lsls	r3, r3, #2
     712:	60bb      	str	r3, [r7, #8]
     714:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     718:	185b      	adds	r3, r3, r1
     71a:	eb44 0402 	adc.w	r4, r4, r2
     71e:	18db      	adds	r3, r3, r3
     720:	eb44 0404 	adc.w	r4, r4, r4
     724:	4619      	mov	r1, r3
     726:	4622      	mov	r2, r4
     728:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     72c:	1a5b      	subs	r3, r3, r1
     72e:	eb64 0402 	sbc.w	r4, r4, r2
     732:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     736:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     73a:	3306      	adds	r3, #6
     73c:	f144 0400 	adc.w	r4, r4, #0
     740:	091a      	lsrs	r2, r3, #4
     742:	61ba      	str	r2, [r7, #24]
     744:	69ba      	ldr	r2, [r7, #24]
     746:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     74a:	61ba      	str	r2, [r7, #24]
     74c:	0923      	lsrs	r3, r4, #4
     74e:	61fb      	str	r3, [r7, #28]
     750:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     754:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     758:	18c9      	adds	r1, r1, r3
     75a:	eb42 0204 	adc.w	r2, r2, r4
     75e:	460b      	mov	r3, r1
     760:	4614      	mov	r4, r2
     762:	e029      	b.n	7b8 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     766:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     76a:	085a      	lsrs	r2, r3, #1
     76c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     76e:	089b      	lsrs	r3, r3, #2
     770:	4413      	add	r3, r2
     772:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     776:	091b      	lsrs	r3, r3, #4
     778:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     77a:	4413      	add	r3, r2
     77c:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     77e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     780:	0a1b      	lsrs	r3, r3, #8
     782:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     784:	4413      	add	r3, r2
     786:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     78a:	0c1b      	lsrs	r3, r3, #16
     78c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     78e:	4413      	add	r3, r2
     790:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     794:	08db      	lsrs	r3, r3, #3
     796:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     798:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     79a:	4613      	mov	r3, r2
     79c:	009b      	lsls	r3, r3, #2
     79e:	4413      	add	r3, r2
     7a0:	005b      	lsls	r3, r3, #1
     7a2:	461a      	mov	r2, r3
     7a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     7a6:	1a9b      	subs	r3, r3, r2
     7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     7aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     7ac:	3306      	adds	r3, #6
     7ae:	091a      	lsrs	r2, r3, #4
     7b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     7b2:	4413      	add	r3, r2
     7b4:	f04f 0400 	mov.w	r4, #0
    }
}
     7b8:	4618      	mov	r0, r3
     7ba:	4621      	mov	r1, r4
     7bc:	3758      	adds	r7, #88	; 0x58
     7be:	46bd      	mov	sp, r7
     7c0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     7c4:	4770      	bx	lr

000007c6 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     7c6:	b590      	push	{r4, r7, lr}
     7c8:	b085      	sub	sp, #20
     7ca:	af00      	add	r7, sp, #0
     7cc:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     7d0:	683a      	ldr	r2, [r7, #0]
     7d2:	687b      	ldr	r3, [r7, #4]
     7d4:	4313      	orrs	r3, r2
     7d6:	2b00      	cmp	r3, #0
     7d8:	bf0c      	ite	eq
     7da:	2301      	moveq	r3, #1
     7dc:	2300      	movne	r3, #0
     7de:	b2db      	uxtb	r3, r3
     7e0:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     7e2:	e008      	b.n	7f6 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     7e4:	e9d7 0100 	ldrd	r0, r1, [r7]
     7e8:	f7ff ff0e 	bl	608 <divu64_10>
     7ec:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     7f0:	68fb      	ldr	r3, [r7, #12]
     7f2:	3301      	adds	r3, #1
     7f4:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
     7f6:	e897 0018 	ldmia.w	r7, {r3, r4}
     7fa:	4323      	orrs	r3, r4
     7fc:	d1f2      	bne.n	7e4 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
     7fe:	68fb      	ldr	r3, [r7, #12]
}
     800:	4618      	mov	r0, r3
     802:	3714      	adds	r7, #20
     804:	46bd      	mov	sp, r7
     806:	bd90      	pop	{r4, r7, pc}

00000808 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     808:	b590      	push	{r4, r7, lr}
     80a:	b083      	sub	sp, #12
     80c:	af00      	add	r7, sp, #0
     80e:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     812:	e897 0018 	ldmia.w	r7, {r3, r4}
     816:	2b00      	cmp	r3, #0
     818:	f174 0300 	sbcs.w	r3, r4, #0
     81c:	da06      	bge.n	82c <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     81e:	e897 0018 	ldmia.w	r7, {r3, r4}
     822:	425b      	negs	r3, r3
     824:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     828:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     82c:	e897 0018 	ldmia.w	r7, {r3, r4}
     830:	4618      	mov	r0, r3
     832:	4621      	mov	r1, r4
     834:	f7ff ffc7 	bl	7c6 <ndigits_in_u64>
     838:	4603      	mov	r3, r0
}
     83a:	4618      	mov	r0, r3
     83c:	370c      	adds	r7, #12
     83e:	46bd      	mov	sp, r7
     840:	bd90      	pop	{r4, r7, pc}

00000842 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     842:	b490      	push	{r4, r7}
     844:	b084      	sub	sp, #16
     846:	af00      	add	r7, sp, #0
     848:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     84c:	6839      	ldr	r1, [r7, #0]
     84e:	687a      	ldr	r2, [r7, #4]
     850:	430a      	orrs	r2, r1
     852:	2a00      	cmp	r2, #0
     854:	bf0c      	ite	eq
     856:	2201      	moveq	r2, #1
     858:	2200      	movne	r2, #0
     85a:	b2d2      	uxtb	r2, r2
     85c:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     85e:	e00a      	b.n	876 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     860:	e897 0006 	ldmia.w	r7, {r1, r2}
     864:	090b      	lsrs	r3, r1, #4
     866:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     86a:	0914      	lsrs	r4, r2, #4
     86c:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     870:	68fa      	ldr	r2, [r7, #12]
     872:	3201      	adds	r2, #1
     874:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
     876:	e897 0006 	ldmia.w	r7, {r1, r2}
     87a:	430a      	orrs	r2, r1
     87c:	d1f0      	bne.n	860 <ndigits_in_hex+0x1e>
    }

    return iDigits;
     87e:	68fb      	ldr	r3, [r7, #12]
}
     880:	4618      	mov	r0, r3
     882:	3710      	adds	r7, #16
     884:	46bd      	mov	sp, r7
     886:	bc90      	pop	{r4, r7}
     888:	4770      	bx	lr

0000088a <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     88a:	b480      	push	{r7}
     88c:	b087      	sub	sp, #28
     88e:	af00      	add	r7, sp, #0
     890:	6078      	str	r0, [r7, #4]
     892:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     894:	2300      	movs	r3, #0
     896:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     898:	2300      	movs	r3, #0
     89a:	613b      	str	r3, [r7, #16]
     89c:	2300      	movs	r3, #0
     89e:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     8a0:	687b      	ldr	r3, [r7, #4]
     8a2:	781b      	ldrb	r3, [r3, #0]
     8a4:	2b2d      	cmp	r3, #45	; 0x2d
     8a6:	d11b      	bne.n	8e0 <decstr_to_int+0x56>
    {
        bNeg = true;
     8a8:	2301      	movs	r3, #1
     8aa:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     8ac:	687b      	ldr	r3, [r7, #4]
     8ae:	3301      	adds	r3, #1
     8b0:	607b      	str	r3, [r7, #4]
        uCnt++;
     8b2:	68fb      	ldr	r3, [r7, #12]
     8b4:	3301      	adds	r3, #1
     8b6:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     8b8:	e012      	b.n	8e0 <decstr_to_int+0x56>
    {
        ++uCnt;
     8ba:	68fb      	ldr	r3, [r7, #12]
     8bc:	3301      	adds	r3, #1
     8be:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     8c0:	693a      	ldr	r2, [r7, #16]
     8c2:	4613      	mov	r3, r2
     8c4:	009b      	lsls	r3, r3, #2
     8c6:	4413      	add	r3, r2
     8c8:	005b      	lsls	r3, r3, #1
     8ca:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     8cc:	687b      	ldr	r3, [r7, #4]
     8ce:	781b      	ldrb	r3, [r3, #0]
     8d0:	461a      	mov	r2, r3
     8d2:	693b      	ldr	r3, [r7, #16]
     8d4:	4413      	add	r3, r2
     8d6:	3b30      	subs	r3, #48	; 0x30
     8d8:	613b      	str	r3, [r7, #16]
        pcStr++;
     8da:	687b      	ldr	r3, [r7, #4]
     8dc:	3301      	adds	r3, #1
     8de:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     8e0:	687b      	ldr	r3, [r7, #4]
     8e2:	781b      	ldrb	r3, [r3, #0]
     8e4:	2b2f      	cmp	r3, #47	; 0x2f
     8e6:	d903      	bls.n	8f0 <decstr_to_int+0x66>
     8e8:	687b      	ldr	r3, [r7, #4]
     8ea:	781b      	ldrb	r3, [r3, #0]
     8ec:	2b39      	cmp	r3, #57	; 0x39
     8ee:	d9e4      	bls.n	8ba <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
     8f0:	683b      	ldr	r3, [r7, #0]
     8f2:	2b00      	cmp	r3, #0
     8f4:	d002      	beq.n	8fc <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     8f6:	683b      	ldr	r3, [r7, #0]
     8f8:	68fa      	ldr	r2, [r7, #12]
     8fa:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     8fc:	7dfb      	ldrb	r3, [r7, #23]
     8fe:	2b00      	cmp	r3, #0
     900:	d002      	beq.n	908 <decstr_to_int+0x7e>
     902:	693b      	ldr	r3, [r7, #16]
     904:	425b      	negs	r3, r3
     906:	e000      	b.n	90a <decstr_to_int+0x80>
     908:	693b      	ldr	r3, [r7, #16]
}
     90a:	4618      	mov	r0, r3
     90c:	371c      	adds	r7, #28
     90e:	46bd      	mov	sp, r7
     910:	f85d 7b04 	ldr.w	r7, [sp], #4
     914:	4770      	bx	lr

00000916 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     916:	b590      	push	{r4, r7, lr}
     918:	b091      	sub	sp, #68	; 0x44
     91a:	af00      	add	r7, sp, #0
     91c:	e9c7 0102 	strd	r0, r1, [r7, #8]
     920:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     922:	2300      	movs	r3, #0
     924:	63fb      	str	r3, [r7, #60]	; 0x3c
     926:	2300      	movs	r3, #0
     928:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     92a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     92e:	f7ff fe6b 	bl	608 <divu64_10>
     932:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     936:	68b9      	ldr	r1, [r7, #8]
     938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     93a:	4613      	mov	r3, r2
     93c:	009b      	lsls	r3, r3, #2
     93e:	4413      	add	r3, r2
     940:	005b      	lsls	r3, r3, #1
     942:	1acb      	subs	r3, r1, r3
     944:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     948:	1c5a      	adds	r2, r3, #1
     94a:	63fa      	str	r2, [r7, #60]	; 0x3c
     94c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     94e:	b2d2      	uxtb	r2, r2
     950:	3230      	adds	r2, #48	; 0x30
     952:	b2d2      	uxtb	r2, r2
     954:	f107 0140 	add.w	r1, r7, #64	; 0x40
     958:	440b      	add	r3, r1
     95a:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     95e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     962:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     966:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     96a:	4323      	orrs	r3, r4
     96c:	d1dd      	bne.n	92a <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     96e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     970:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     972:	687b      	ldr	r3, [r7, #4]
     974:	2b00      	cmp	r3, #0
     976:	d011      	beq.n	99c <uint64_to_str+0x86>
    {
        while ( ix-- )
     978:	e008      	b.n	98c <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     97a:	687b      	ldr	r3, [r7, #4]
     97c:	1c5a      	adds	r2, r3, #1
     97e:	607a      	str	r2, [r7, #4]
     980:	f107 0110 	add.w	r1, r7, #16
     984:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     986:	440a      	add	r2, r1
     988:	7812      	ldrb	r2, [r2, #0]
     98a:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
     98c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     98e:	1e5a      	subs	r2, r3, #1
     990:	63fa      	str	r2, [r7, #60]	; 0x3c
     992:	2b00      	cmp	r3, #0
     994:	d1f1      	bne.n	97a <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     996:	687b      	ldr	r3, [r7, #4]
     998:	2200      	movs	r2, #0
     99a:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     99e:	4618      	mov	r0, r3
     9a0:	3744      	adds	r7, #68	; 0x44
     9a2:	46bd      	mov	sp, r7
     9a4:	bd90      	pop	{r4, r7, pc}

000009a6 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     9a6:	b4b0      	push	{r4, r5, r7}
     9a8:	b08d      	sub	sp, #52	; 0x34
     9aa:	af00      	add	r7, sp, #0
     9ac:	e9c7 0102 	strd	r0, r1, [r7, #8]
     9b0:	607a      	str	r2, [r7, #4]
     9b2:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     9b4:	2300      	movs	r3, #0
     9b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     9b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     9bc:	4313      	orrs	r3, r2
     9be:	d131      	bne.n	a24 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     9c2:	1c5a      	adds	r2, r3, #1
     9c4:	62fa      	str	r2, [r7, #44]	; 0x2c
     9c6:	f107 0230 	add.w	r2, r7, #48	; 0x30
     9ca:	4413      	add	r3, r2
     9cc:	2230      	movs	r2, #48	; 0x30
     9ce:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     9d2:	e027      	b.n	a24 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     9d4:	7a3b      	ldrb	r3, [r7, #8]
     9d6:	f003 030f 	and.w	r3, r3, #15
     9da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     9de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     9e2:	2b09      	cmp	r3, #9
     9e4:	d90a      	bls.n	9fc <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     9e6:	78fb      	ldrb	r3, [r7, #3]
     9e8:	2b00      	cmp	r3, #0
     9ea:	d001      	beq.n	9f0 <uint64_to_hexstr+0x4a>
     9ec:	2227      	movs	r2, #39	; 0x27
     9ee:	e000      	b.n	9f2 <uint64_to_hexstr+0x4c>
     9f0:	2207      	movs	r2, #7
     9f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     9f6:	4413      	add	r3, r2
     9f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     9fe:	1c5a      	adds	r2, r3, #1
     a00:	62fa      	str	r2, [r7, #44]	; 0x2c
     a02:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     a06:	3230      	adds	r2, #48	; 0x30
     a08:	b2d2      	uxtb	r2, r2
     a0a:	f107 0130 	add.w	r1, r7, #48	; 0x30
     a0e:	440b      	add	r3, r1
     a10:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     a14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     a18:	0914      	lsrs	r4, r2, #4
     a1a:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     a1e:	091d      	lsrs	r5, r3, #4
     a20:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
     a24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     a28:	4313      	orrs	r3, r2
     a2a:	d1d3      	bne.n	9d4 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a2e:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     a30:	687b      	ldr	r3, [r7, #4]
     a32:	2b00      	cmp	r3, #0
     a34:	d011      	beq.n	a5a <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     a36:	e008      	b.n	a4a <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     a38:	687b      	ldr	r3, [r7, #4]
     a3a:	1c5a      	adds	r2, r3, #1
     a3c:	607a      	str	r2, [r7, #4]
     a3e:	f107 0110 	add.w	r1, r7, #16
     a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     a44:	440a      	add	r2, r1
     a46:	7812      	ldrb	r2, [r2, #0]
     a48:	701a      	strb	r2, [r3, #0]
        while (ix--)
     a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a4c:	1e5a      	subs	r2, r3, #1
     a4e:	62fa      	str	r2, [r7, #44]	; 0x2c
     a50:	2b00      	cmp	r3, #0
     a52:	d1f1      	bne.n	a38 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     a54:	687b      	ldr	r3, [r7, #4]
     a56:	2200      	movs	r2, #0
     a58:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     a5c:	4618      	mov	r0, r3
     a5e:	3734      	adds	r7, #52	; 0x34
     a60:	46bd      	mov	sp, r7
     a62:	bcb0      	pop	{r4, r5, r7}
     a64:	4770      	bx	lr

00000a66 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     a66:	b480      	push	{r7}
     a68:	b085      	sub	sp, #20
     a6a:	af00      	add	r7, sp, #0
     a6c:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     a6e:	2300      	movs	r3, #0
     a70:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     a72:	687b      	ldr	r3, [r7, #4]
     a74:	2b00      	cmp	r3, #0
     a76:	d104      	bne.n	a82 <simple_strlen+0x1c>
    {
        return ui32RetVal;
     a78:	68fb      	ldr	r3, [r7, #12]
     a7a:	e009      	b.n	a90 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     a7c:	68fb      	ldr	r3, [r7, #12]
     a7e:	3301      	adds	r3, #1
     a80:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
     a82:	687b      	ldr	r3, [r7, #4]
     a84:	1c5a      	adds	r2, r3, #1
     a86:	607a      	str	r2, [r7, #4]
     a88:	781b      	ldrb	r3, [r3, #0]
     a8a:	2b00      	cmp	r3, #0
     a8c:	d1f6      	bne.n	a7c <simple_strlen+0x16>
    }
    return ui32RetVal;
     a8e:	68fb      	ldr	r3, [r7, #12]
}
     a90:	4618      	mov	r0, r3
     a92:	3714      	adds	r7, #20
     a94:	46bd      	mov	sp, r7
     a96:	f85d 7b04 	ldr.w	r7, [sp], #4
     a9a:	4770      	bx	lr

00000a9c <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     a9c:	b480      	push	{r7}
     a9e:	b087      	sub	sp, #28
     aa0:	af00      	add	r7, sp, #0
     aa2:	60f8      	str	r0, [r7, #12]
     aa4:	460b      	mov	r3, r1
     aa6:	607a      	str	r2, [r7, #4]
     aa8:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     aaa:	2300      	movs	r3, #0
     aac:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     aae:	687b      	ldr	r3, [r7, #4]
     ab0:	2b00      	cmp	r3, #0
     ab2:	dc0c      	bgt.n	ace <padbuffer+0x32>
    {
        return i32Cnt;
     ab4:	697b      	ldr	r3, [r7, #20]
     ab6:	e010      	b.n	ada <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     ab8:	68fb      	ldr	r3, [r7, #12]
     aba:	2b00      	cmp	r3, #0
     abc:	d004      	beq.n	ac8 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     abe:	68fb      	ldr	r3, [r7, #12]
     ac0:	1c5a      	adds	r2, r3, #1
     ac2:	60fa      	str	r2, [r7, #12]
     ac4:	7afa      	ldrb	r2, [r7, #11]
     ac6:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     ac8:	697b      	ldr	r3, [r7, #20]
     aca:	3301      	adds	r3, #1
     acc:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
     ace:	687b      	ldr	r3, [r7, #4]
     ad0:	1e5a      	subs	r2, r3, #1
     ad2:	607a      	str	r2, [r7, #4]
     ad4:	2b00      	cmp	r3, #0
     ad6:	d1ef      	bne.n	ab8 <padbuffer+0x1c>
    }

    return i32Cnt;
     ad8:	697b      	ldr	r3, [r7, #20]
}
     ada:	4618      	mov	r0, r3
     adc:	371c      	adds	r7, #28
     ade:	46bd      	mov	sp, r7
     ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ae4:	4770      	bx	lr
	...

00000ae8 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     ae8:	b590      	push	{r4, r7, lr}
     aea:	b08f      	sub	sp, #60	; 0x3c
     aec:	af00      	add	r7, sp, #0
     aee:	60f8      	str	r0, [r7, #12]
     af0:	60b9      	str	r1, [r7, #8]
     af2:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
     af4:	68bb      	ldr	r3, [r7, #8]
     af6:	681b      	ldr	r3, [r3, #0]
     af8:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
     afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     afc:	2b03      	cmp	r3, #3
     afe:	dc02      	bgt.n	b06 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     b00:	f06f 0302 	mvn.w	r3, #2
     b04:	e0e7      	b.n	cd6 <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
     b06:	edd7 7a03 	vldr	s15, [r7, #12]
     b0a:	eef5 7a40 	vcmp.f32	s15, #0.0
     b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     b12:	d104      	bne.n	b1e <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     b14:	68bb      	ldr	r3, [r7, #8]
     b16:	4a72      	ldr	r2, [pc, #456]	; (ce0 <ftoa+0x1f8>)
     b18:	601a      	str	r2, [r3, #0]
        return 3;
     b1a:	2303      	movs	r3, #3
     b1c:	e0db      	b.n	cd6 <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
     b1e:	68bb      	ldr	r3, [r7, #8]
     b20:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
     b22:	68fb      	ldr	r3, [r7, #12]
     b24:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     b26:	693b      	ldr	r3, [r7, #16]
     b28:	15db      	asrs	r3, r3, #23
     b2a:	b2db      	uxtb	r3, r3
     b2c:	3b7f      	subs	r3, #127	; 0x7f
     b2e:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     b30:	693b      	ldr	r3, [r7, #16]
     b32:	f3c3 0316 	ubfx	r3, r3, #0, #23
     b36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     b3a:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
     b3c:	2300      	movs	r3, #0
     b3e:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     b40:	2300      	movs	r3, #0
     b42:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     b44:	69fb      	ldr	r3, [r7, #28]
     b46:	2b1e      	cmp	r3, #30
     b48:	dd02      	ble.n	b50 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     b4a:	f06f 0301 	mvn.w	r3, #1
     b4e:	e0c2      	b.n	cd6 <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
     b50:	69fb      	ldr	r3, [r7, #28]
     b52:	f113 0f17 	cmn.w	r3, #23
     b56:	da02      	bge.n	b5e <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     b58:	f04f 33ff 	mov.w	r3, #4294967295
     b5c:	e0bb      	b.n	cd6 <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
     b5e:	69fb      	ldr	r3, [r7, #28]
     b60:	2b16      	cmp	r3, #22
     b62:	dd06      	ble.n	b72 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
     b64:	69fb      	ldr	r3, [r7, #28]
     b66:	3b17      	subs	r3, #23
     b68:	69ba      	ldr	r2, [r7, #24]
     b6a:	fa02 f303 	lsl.w	r3, r2, r3
     b6e:	637b      	str	r3, [r7, #52]	; 0x34
     b70:	e01a      	b.n	ba8 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     b72:	69fb      	ldr	r3, [r7, #28]
     b74:	2b00      	cmp	r3, #0
     b76:	db0f      	blt.n	b98 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
     b78:	69fb      	ldr	r3, [r7, #28]
     b7a:	f1c3 0317 	rsb	r3, r3, #23
     b7e:	69ba      	ldr	r2, [r7, #24]
     b80:	fa42 f303 	asr.w	r3, r2, r3
     b84:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
     b86:	69fb      	ldr	r3, [r7, #28]
     b88:	3301      	adds	r3, #1
     b8a:	69ba      	ldr	r2, [r7, #24]
     b8c:	fa02 f303 	lsl.w	r3, r2, r3
     b90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     b94:	633b      	str	r3, [r7, #48]	; 0x30
     b96:	e007      	b.n	ba8 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
     b98:	69bb      	ldr	r3, [r7, #24]
     b9a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     b9e:	69fb      	ldr	r3, [r7, #28]
     ba0:	43db      	mvns	r3, r3
     ba2:	fa42 f303 	asr.w	r3, r2, r3
     ba6:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     ba8:	693b      	ldr	r3, [r7, #16]
     baa:	2b00      	cmp	r3, #0
     bac:	da04      	bge.n	bb8 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     bae:	68bb      	ldr	r3, [r7, #8]
     bb0:	1c5a      	adds	r2, r3, #1
     bb2:	60ba      	str	r2, [r7, #8]
     bb4:	222d      	movs	r2, #45	; 0x2d
     bb6:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bba:	2b00      	cmp	r3, #0
     bbc:	d105      	bne.n	bca <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     bbe:	68bb      	ldr	r3, [r7, #8]
     bc0:	1c5a      	adds	r2, r3, #1
     bc2:	60ba      	str	r2, [r7, #8]
     bc4:	2230      	movs	r2, #48	; 0x30
     bc6:	701a      	strb	r2, [r3, #0]
     bc8:	e021      	b.n	c0e <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bcc:	2b00      	cmp	r3, #0
     bce:	dd08      	ble.n	be2 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bd2:	ea4f 74e3 	mov.w	r4, r3, asr #31
     bd6:	68ba      	ldr	r2, [r7, #8]
     bd8:	4618      	mov	r0, r3
     bda:	4621      	mov	r1, r4
     bdc:	f7ff fe9b 	bl	916 <uint64_to_str>
     be0:	e011      	b.n	c06 <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     be2:	68bb      	ldr	r3, [r7, #8]
     be4:	1c5a      	adds	r2, r3, #1
     be6:	60ba      	str	r2, [r7, #8]
     be8:	222d      	movs	r2, #45	; 0x2d
     bea:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bee:	425b      	negs	r3, r3
     bf0:	ea4f 74e3 	mov.w	r4, r3, asr #31
     bf4:	68ba      	ldr	r2, [r7, #8]
     bf6:	4618      	mov	r0, r3
     bf8:	4621      	mov	r1, r4
     bfa:	f7ff fe8c 	bl	916 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     bfe:	e002      	b.n	c06 <ftoa+0x11e>
        {
            pcBuf++;
     c00:	68bb      	ldr	r3, [r7, #8]
     c02:	3301      	adds	r3, #1
     c04:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
     c06:	68bb      	ldr	r3, [r7, #8]
     c08:	781b      	ldrb	r3, [r3, #0]
     c0a:	2b00      	cmp	r3, #0
     c0c:	d1f8      	bne.n	c00 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     c0e:	68bb      	ldr	r3, [r7, #8]
     c10:	1c5a      	adds	r2, r3, #1
     c12:	60ba      	str	r2, [r7, #8]
     c14:	222e      	movs	r2, #46	; 0x2e
     c16:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     c1a:	2b00      	cmp	r3, #0
     c1c:	d105      	bne.n	c2a <ftoa+0x142>
    {
        *pcBuf++ = '0';
     c1e:	68bb      	ldr	r3, [r7, #8]
     c20:	1c5a      	adds	r2, r3, #1
     c22:	60ba      	str	r2, [r7, #8]
     c24:	2230      	movs	r2, #48	; 0x30
     c26:	701a      	strb	r2, [r3, #0]
     c28:	e04f      	b.n	cca <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     c2a:	68ba      	ldr	r2, [r7, #8]
     c2c:	6a3b      	ldr	r3, [r7, #32]
     c2e:	1ad3      	subs	r3, r2, r3
     c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     c32:	1ad3      	subs	r3, r2, r3
     c34:	3b01      	subs	r3, #1
     c36:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     c38:	697a      	ldr	r2, [r7, #20]
     c3a:	687b      	ldr	r3, [r7, #4]
     c3c:	4293      	cmp	r3, r2
     c3e:	bfa8      	it	ge
     c40:	4613      	movge	r3, r2
     c42:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
     c44:	2300      	movs	r3, #0
     c46:	62bb      	str	r3, [r7, #40]	; 0x28
     c48:	e015      	b.n	c76 <ftoa+0x18e>
        {
            i32FracPart *= 10;
     c4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     c4c:	4613      	mov	r3, r2
     c4e:	009b      	lsls	r3, r3, #2
     c50:	4413      	add	r3, r2
     c52:	005b      	lsls	r3, r3, #1
     c54:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     c56:	68bb      	ldr	r3, [r7, #8]
     c58:	1c5a      	adds	r2, r3, #1
     c5a:	60ba      	str	r2, [r7, #8]
     c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     c5e:	1612      	asrs	r2, r2, #24
     c60:	b2d2      	uxtb	r2, r2
     c62:	3230      	adds	r2, #48	; 0x30
     c64:	b2d2      	uxtb	r2, r2
     c66:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     c6a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     c6e:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
     c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
     c72:	3301      	adds	r3, #1
     c74:	62bb      	str	r3, [r7, #40]	; 0x28
     c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
     c78:	697b      	ldr	r3, [r7, #20]
     c7a:	429a      	cmp	r2, r3
     c7c:	dbe5      	blt.n	c4a <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
     c7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     c80:	4613      	mov	r3, r2
     c82:	009b      	lsls	r3, r3, #2
     c84:	4413      	add	r3, r2
     c86:	005b      	lsls	r3, r3, #1
     c88:	161b      	asrs	r3, r3, #24
     c8a:	2b04      	cmp	r3, #4
     c8c:	dd1d      	ble.n	cca <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
     c8e:	68bb      	ldr	r3, [r7, #8]
     c90:	3b01      	subs	r3, #1
     c92:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     c94:	e015      	b.n	cc2 <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
     c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c98:	781b      	ldrb	r3, [r3, #0]
     c9a:	2b2e      	cmp	r3, #46	; 0x2e
     c9c:	d00e      	beq.n	cbc <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
     c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ca0:	781b      	ldrb	r3, [r3, #0]
     ca2:	2b39      	cmp	r3, #57	; 0x39
     ca4:	d103      	bne.n	cae <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
     ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ca8:	2230      	movs	r2, #48	; 0x30
     caa:	701a      	strb	r2, [r3, #0]
     cac:	e006      	b.n	cbc <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
     cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     cb0:	781b      	ldrb	r3, [r3, #0]
     cb2:	3301      	adds	r3, #1
     cb4:	b2da      	uxtb	r2, r3
     cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     cb8:	701a      	strb	r2, [r3, #0]
                    break;
     cba:	e006      	b.n	cca <ftoa+0x1e2>
                }
                pcBuftmp--;
     cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     cbe:	3b01      	subs	r3, #1
     cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     cc4:	6a3b      	ldr	r3, [r7, #32]
     cc6:	429a      	cmp	r2, r3
     cc8:	d2e5      	bcs.n	c96 <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     cca:	68bb      	ldr	r3, [r7, #8]
     ccc:	2200      	movs	r2, #0
     cce:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     cd0:	68ba      	ldr	r2, [r7, #8]
     cd2:	6a3b      	ldr	r3, [r7, #32]
     cd4:	1ad3      	subs	r3, r2, r3
} // ftoa()
     cd6:	4618      	mov	r0, r3
     cd8:	373c      	adds	r7, #60	; 0x3c
     cda:	46bd      	mov	sp, r7
     cdc:	bd90      	pop	{r4, r7, pc}
     cde:	bf00      	nop
     ce0:	00302e30 	.word	0x00302e30

00000ce4 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     ce4:	b590      	push	{r4, r7, lr}
     ce6:	b095      	sub	sp, #84	; 0x54
     ce8:	af00      	add	r7, sp, #0
     cea:	60f8      	str	r0, [r7, #12]
     cec:	60b9      	str	r1, [r7, #8]
     cee:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     cf0:	2300      	movs	r3, #0
     cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     cf4:	2300      	movs	r3, #0
     cf6:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     cf8:	e2e3      	b.n	12c2 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     cfa:	2306      	movs	r3, #6
     cfc:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     cfe:	68bb      	ldr	r3, [r7, #8]
     d00:	781b      	ldrb	r3, [r3, #0]
     d02:	2b25      	cmp	r3, #37	; 0x25
     d04:	d01f      	beq.n	d46 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     d06:	68fb      	ldr	r3, [r7, #12]
     d08:	2b00      	cmp	r3, #0
     d0a:	d015      	beq.n	d38 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     d0c:	68bb      	ldr	r3, [r7, #8]
     d0e:	781b      	ldrb	r3, [r3, #0]
     d10:	2b0a      	cmp	r3, #10
     d12:	d10b      	bne.n	d2c <am_util_stdio_vsprintf+0x48>
     d14:	4bb1      	ldr	r3, [pc, #708]	; (fdc <am_util_stdio_vsprintf+0x2f8>)
     d16:	781b      	ldrb	r3, [r3, #0]
     d18:	2b00      	cmp	r3, #0
     d1a:	d007      	beq.n	d2c <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     d1c:	68fb      	ldr	r3, [r7, #12]
     d1e:	1c5a      	adds	r2, r3, #1
     d20:	60fa      	str	r2, [r7, #12]
     d22:	220d      	movs	r2, #13
     d24:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d28:	3301      	adds	r3, #1
     d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     d2c:	68fb      	ldr	r3, [r7, #12]
     d2e:	1c5a      	adds	r2, r3, #1
     d30:	60fa      	str	r2, [r7, #12]
     d32:	68ba      	ldr	r2, [r7, #8]
     d34:	7812      	ldrb	r2, [r2, #0]
     d36:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     d38:	68bb      	ldr	r3, [r7, #8]
     d3a:	3301      	adds	r3, #1
     d3c:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d40:	3301      	adds	r3, #1
     d42:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     d44:	e2bd      	b.n	12c2 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     d46:	68bb      	ldr	r3, [r7, #8]
     d48:	3301      	adds	r3, #1
     d4a:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     d4c:	2300      	movs	r3, #0
     d4e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     d52:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     d56:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     d5a:	2320      	movs	r3, #32
     d5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     d60:	68bb      	ldr	r3, [r7, #8]
     d62:	781b      	ldrb	r3, [r3, #0]
     d64:	2b30      	cmp	r3, #48	; 0x30
     d66:	d105      	bne.n	d74 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     d68:	2330      	movs	r3, #48	; 0x30
     d6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     d6e:	68bb      	ldr	r3, [r7, #8]
     d70:	3301      	adds	r3, #1
     d72:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     d74:	f107 0310 	add.w	r3, r7, #16
     d78:	4619      	mov	r1, r3
     d7a:	68b8      	ldr	r0, [r7, #8]
     d7c:	f7ff fd85 	bl	88a <decstr_to_int>
     d80:	4603      	mov	r3, r0
     d82:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     d84:	693b      	ldr	r3, [r7, #16]
     d86:	68ba      	ldr	r2, [r7, #8]
     d88:	4413      	add	r3, r2
     d8a:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     d8c:	68bb      	ldr	r3, [r7, #8]
     d8e:	781b      	ldrb	r3, [r3, #0]
     d90:	2b73      	cmp	r3, #115	; 0x73
     d92:	d005      	beq.n	da0 <am_util_stdio_vsprintf+0xbc>
     d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d96:	2b00      	cmp	r3, #0
     d98:	da02      	bge.n	da0 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d9c:	425b      	negs	r3, r3
     d9e:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     da0:	68bb      	ldr	r3, [r7, #8]
     da2:	781b      	ldrb	r3, [r3, #0]
     da4:	2b2e      	cmp	r3, #46	; 0x2e
     da6:	d10e      	bne.n	dc6 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     da8:	68bb      	ldr	r3, [r7, #8]
     daa:	3301      	adds	r3, #1
     dac:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     dae:	f107 0310 	add.w	r3, r7, #16
     db2:	4619      	mov	r1, r3
     db4:	68b8      	ldr	r0, [r7, #8]
     db6:	f7ff fd68 	bl	88a <decstr_to_int>
     dba:	4603      	mov	r3, r0
     dbc:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     dbe:	693b      	ldr	r3, [r7, #16]
     dc0:	68ba      	ldr	r2, [r7, #8]
     dc2:	4413      	add	r3, r2
     dc4:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     dc6:	68bb      	ldr	r3, [r7, #8]
     dc8:	781b      	ldrb	r3, [r3, #0]
     dca:	2b6c      	cmp	r3, #108	; 0x6c
     dcc:	d10c      	bne.n	de8 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     dce:	68bb      	ldr	r3, [r7, #8]
     dd0:	3301      	adds	r3, #1
     dd2:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     dd4:	68bb      	ldr	r3, [r7, #8]
     dd6:	781b      	ldrb	r3, [r3, #0]
     dd8:	2b6c      	cmp	r3, #108	; 0x6c
     dda:	d105      	bne.n	de8 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     ddc:	68bb      	ldr	r3, [r7, #8]
     dde:	3301      	adds	r3, #1
     de0:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     de2:	2301      	movs	r3, #1
     de4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     de8:	68bb      	ldr	r3, [r7, #8]
     dea:	781b      	ldrb	r3, [r3, #0]
     dec:	3b46      	subs	r3, #70	; 0x46
     dee:	2b32      	cmp	r3, #50	; 0x32
     df0:	f200 8254 	bhi.w	129c <am_util_stdio_vsprintf+0x5b8>
     df4:	a201      	add	r2, pc, #4	; (adr r2, dfc <am_util_stdio_vsprintf+0x118>)
     df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     dfa:	bf00      	nop
     dfc:	00001227 	.word	0x00001227
     e00:	0000129d 	.word	0x0000129d
     e04:	0000129d 	.word	0x0000129d
     e08:	0000129d 	.word	0x0000129d
     e0c:	0000129d 	.word	0x0000129d
     e10:	0000129d 	.word	0x0000129d
     e14:	0000129d 	.word	0x0000129d
     e18:	0000129d 	.word	0x0000129d
     e1c:	0000129d 	.word	0x0000129d
     e20:	0000129d 	.word	0x0000129d
     e24:	0000129d 	.word	0x0000129d
     e28:	0000129d 	.word	0x0000129d
     e2c:	0000129d 	.word	0x0000129d
     e30:	0000129d 	.word	0x0000129d
     e34:	0000129d 	.word	0x0000129d
     e38:	0000129d 	.word	0x0000129d
     e3c:	0000129d 	.word	0x0000129d
     e40:	0000129d 	.word	0x0000129d
     e44:	00000fc3 	.word	0x00000fc3
     e48:	0000129d 	.word	0x0000129d
     e4c:	0000129d 	.word	0x0000129d
     e50:	0000129d 	.word	0x0000129d
     e54:	0000129d 	.word	0x0000129d
     e58:	0000129d 	.word	0x0000129d
     e5c:	0000129d 	.word	0x0000129d
     e60:	0000129d 	.word	0x0000129d
     e64:	0000129d 	.word	0x0000129d
     e68:	0000129d 	.word	0x0000129d
     e6c:	0000129d 	.word	0x0000129d
     e70:	00000ec9 	.word	0x00000ec9
     e74:	000010ef 	.word	0x000010ef
     e78:	0000129d 	.word	0x0000129d
     e7c:	00001227 	.word	0x00001227
     e80:	0000129d 	.word	0x0000129d
     e84:	0000129d 	.word	0x0000129d
     e88:	000010ef 	.word	0x000010ef
     e8c:	0000129d 	.word	0x0000129d
     e90:	0000129d 	.word	0x0000129d
     e94:	0000129d 	.word	0x0000129d
     e98:	0000129d 	.word	0x0000129d
     e9c:	0000129d 	.word	0x0000129d
     ea0:	0000129d 	.word	0x0000129d
     ea4:	0000129d 	.word	0x0000129d
     ea8:	0000129d 	.word	0x0000129d
     eac:	0000129d 	.word	0x0000129d
     eb0:	00000eef 	.word	0x00000eef
     eb4:	0000129d 	.word	0x0000129d
     eb8:	0000105d 	.word	0x0000105d
     ebc:	0000129d 	.word	0x0000129d
     ec0:	0000129d 	.word	0x0000129d
     ec4:	00000fbd 	.word	0x00000fbd
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
     ec8:	687b      	ldr	r3, [r7, #4]
     eca:	1d1a      	adds	r2, r3, #4
     ecc:	607a      	str	r2, [r7, #4]
     ece:	681b      	ldr	r3, [r3, #0]
     ed0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
     ed4:	68fb      	ldr	r3, [r7, #12]
     ed6:	2b00      	cmp	r3, #0
     ed8:	d005      	beq.n	ee6 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
     eda:	68fb      	ldr	r3, [r7, #12]
     edc:	1c5a      	adds	r2, r3, #1
     ede:	60fa      	str	r2, [r7, #12]
     ee0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
     ee4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
     ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ee8:	3301      	adds	r3, #1
     eea:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     eec:	e1e6      	b.n	12bc <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
     eee:	687b      	ldr	r3, [r7, #4]
     ef0:	1d1a      	adds	r2, r3, #4
     ef2:	607a      	str	r2, [r7, #4]
     ef4:	681b      	ldr	r3, [r3, #0]
     ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
     ef8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
     efa:	f7ff fdb4 	bl	a66 <simple_strlen>
     efe:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
     f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f02:	2b00      	cmp	r3, #0
     f04:	dd2e      	ble.n	f64 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
     f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     f0a:	429a      	cmp	r2, r3
     f0c:	d22a      	bcs.n	f64 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     f0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f12:	1ad3      	subs	r3, r2, r3
     f14:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     f16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     f1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f1c:	4619      	mov	r1, r3
     f1e:	68f8      	ldr	r0, [r7, #12]
     f20:	f7ff fdbc 	bl	a9c <padbuffer>
     f24:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     f26:	68fb      	ldr	r3, [r7, #12]
     f28:	2b00      	cmp	r3, #0
     f2a:	d001      	beq.n	f30 <am_util_stdio_vsprintf+0x24c>
     f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f2e:	e000      	b.n	f32 <am_util_stdio_vsprintf+0x24e>
     f30:	2300      	movs	r3, #0
     f32:	68fa      	ldr	r2, [r7, #12]
     f34:	4413      	add	r3, r2
     f36:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f3c:	4413      	add	r3, r2
     f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     f40:	2300      	movs	r3, #0
     f42:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
     f44:	e00e      	b.n	f64 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
     f46:	68fb      	ldr	r3, [r7, #12]
     f48:	2b00      	cmp	r3, #0
     f4a:	d005      	beq.n	f58 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
     f4c:	68fb      	ldr	r3, [r7, #12]
     f4e:	1c5a      	adds	r2, r3, #1
     f50:	60fa      	str	r2, [r7, #12]
     f52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     f54:	7812      	ldrb	r2, [r2, #0]
     f56:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
     f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f5a:	3301      	adds	r3, #1
     f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
     f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f60:	3301      	adds	r3, #1
     f62:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
     f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f66:	781b      	ldrb	r3, [r3, #0]
     f68:	2b00      	cmp	r3, #0
     f6a:	d1ec      	bne.n	f46 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
     f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f6e:	2b00      	cmp	r3, #0
     f70:	f000 81a1 	beq.w	12b6 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
     f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f76:	425b      	negs	r3, r3
     f78:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
     f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     f7e:	429a      	cmp	r2, r3
     f80:	f080 8199 	bcs.w	12b6 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     f84:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f88:	1ad3      	subs	r3, r2, r3
     f8a:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     f8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     f90:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f92:	4619      	mov	r1, r3
     f94:	68f8      	ldr	r0, [r7, #12]
     f96:	f7ff fd81 	bl	a9c <padbuffer>
     f9a:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     f9c:	68fb      	ldr	r3, [r7, #12]
     f9e:	2b00      	cmp	r3, #0
     fa0:	d001      	beq.n	fa6 <am_util_stdio_vsprintf+0x2c2>
     fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fa4:	e000      	b.n	fa8 <am_util_stdio_vsprintf+0x2c4>
     fa6:	2300      	movs	r3, #0
     fa8:	68fa      	ldr	r2, [r7, #12]
     faa:	4413      	add	r3, r2
     fac:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     fb2:	4413      	add	r3, r2
     fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     fb6:	2300      	movs	r3, #0
     fb8:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
     fba:	e17c      	b.n	12b6 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
     fbc:	2301      	movs	r3, #1
     fbe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     fc2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     fc6:	2b00      	cmp	r3, #0
     fc8:	d00a      	beq.n	fe0 <am_util_stdio_vsprintf+0x2fc>
     fca:	687b      	ldr	r3, [r7, #4]
     fcc:	3307      	adds	r3, #7
     fce:	f023 0307 	bic.w	r3, r3, #7
     fd2:	f103 0208 	add.w	r2, r3, #8
     fd6:	607a      	str	r2, [r7, #4]
     fd8:	cb18      	ldmia	r3, {r3, r4}
     fda:	e007      	b.n	fec <am_util_stdio_vsprintf+0x308>
     fdc:	10001160 	.word	0x10001160
                                      va_arg(pArgs, uint32_t);
     fe0:	687b      	ldr	r3, [r7, #4]
     fe2:	1d1a      	adds	r2, r3, #4
     fe4:	607a      	str	r2, [r7, #4]
     fe6:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     fe8:	f04f 0400 	mov.w	r4, #0
     fec:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
     ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ff2:	2b00      	cmp	r3, #0
     ff4:	d01e      	beq.n	1034 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
     ff6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     ffa:	f7ff fc22 	bl	842 <ndigits_in_hex>
     ffe:	4602      	mov	r2, r0
    1000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1002:	1a9b      	subs	r3, r3, r2
    1004:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1006:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    100a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    100c:	4619      	mov	r1, r3
    100e:	68f8      	ldr	r0, [r7, #12]
    1010:	f7ff fd44 	bl	a9c <padbuffer>
    1014:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1016:	68fb      	ldr	r3, [r7, #12]
    1018:	2b00      	cmp	r3, #0
    101a:	d001      	beq.n	1020 <am_util_stdio_vsprintf+0x33c>
    101c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    101e:	e000      	b.n	1022 <am_util_stdio_vsprintf+0x33e>
    1020:	2300      	movs	r3, #0
    1022:	68fa      	ldr	r2, [r7, #12]
    1024:	4413      	add	r3, r2
    1026:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    102a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    102c:	4413      	add	r3, r2
    102e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1030:	2300      	movs	r3, #0
    1032:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    1034:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    1038:	68fa      	ldr	r2, [r7, #12]
    103a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    103e:	f7ff fcb2 	bl	9a6 <uint64_to_hexstr>
    1042:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1044:	68fb      	ldr	r3, [r7, #12]
    1046:	2b00      	cmp	r3, #0
    1048:	d003      	beq.n	1052 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    104a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    104c:	68fa      	ldr	r2, [r7, #12]
    104e:	4413      	add	r3, r2
    1050:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1054:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1056:	4413      	add	r3, r2
    1058:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    105a:	e12f      	b.n	12bc <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    105c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1060:	2b00      	cmp	r3, #0
    1062:	d008      	beq.n	1076 <am_util_stdio_vsprintf+0x392>
    1064:	687b      	ldr	r3, [r7, #4]
    1066:	3307      	adds	r3, #7
    1068:	f023 0307 	bic.w	r3, r3, #7
    106c:	f103 0208 	add.w	r2, r3, #8
    1070:	607a      	str	r2, [r7, #4]
    1072:	cb18      	ldmia	r3, {r3, r4}
    1074:	e005      	b.n	1082 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    1076:	687b      	ldr	r3, [r7, #4]
    1078:	1d1a      	adds	r2, r3, #4
    107a:	607a      	str	r2, [r7, #4]
    107c:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    107e:	f04f 0400 	mov.w	r4, #0
    1082:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    1086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1088:	2b00      	cmp	r3, #0
    108a:	d01e      	beq.n	10ca <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    108c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1090:	f7ff fb99 	bl	7c6 <ndigits_in_u64>
    1094:	4602      	mov	r2, r0
    1096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1098:	1a9b      	subs	r3, r3, r2
    109a:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    109c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    10a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    10a2:	4619      	mov	r1, r3
    10a4:	68f8      	ldr	r0, [r7, #12]
    10a6:	f7ff fcf9 	bl	a9c <padbuffer>
    10aa:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    10ac:	68fb      	ldr	r3, [r7, #12]
    10ae:	2b00      	cmp	r3, #0
    10b0:	d001      	beq.n	10b6 <am_util_stdio_vsprintf+0x3d2>
    10b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10b4:	e000      	b.n	10b8 <am_util_stdio_vsprintf+0x3d4>
    10b6:	2300      	movs	r3, #0
    10b8:	68fa      	ldr	r2, [r7, #12]
    10ba:	4413      	add	r3, r2
    10bc:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    10be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10c2:	4413      	add	r3, r2
    10c4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    10c6:	2300      	movs	r3, #0
    10c8:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    10ca:	68fa      	ldr	r2, [r7, #12]
    10cc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    10d0:	f7ff fc21 	bl	916 <uint64_to_str>
    10d4:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    10d6:	68fb      	ldr	r3, [r7, #12]
    10d8:	2b00      	cmp	r3, #0
    10da:	d003      	beq.n	10e4 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    10dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10de:	68fa      	ldr	r2, [r7, #12]
    10e0:	4413      	add	r3, r2
    10e2:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    10e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10e8:	4413      	add	r3, r2
    10ea:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    10ec:	e0e6      	b.n	12bc <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    10ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    10f2:	2b00      	cmp	r3, #0
    10f4:	d008      	beq.n	1108 <am_util_stdio_vsprintf+0x424>
    10f6:	687b      	ldr	r3, [r7, #4]
    10f8:	3307      	adds	r3, #7
    10fa:	f023 0307 	bic.w	r3, r3, #7
    10fe:	f103 0208 	add.w	r2, r3, #8
    1102:	607a      	str	r2, [r7, #4]
    1104:	cb18      	ldmia	r3, {r3, r4}
    1106:	e005      	b.n	1114 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    1108:	687b      	ldr	r3, [r7, #4]
    110a:	1d1a      	adds	r2, r3, #4
    110c:	607a      	str	r2, [r7, #4]
    110e:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1110:	ea4f 74e3 	mov.w	r4, r3, asr #31
    1114:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    1118:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    111c:	2b00      	cmp	r3, #0
    111e:	f174 0300 	sbcs.w	r3, r4, #0
    1122:	da0a      	bge.n	113a <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    1124:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1128:	425b      	negs	r3, r3
    112a:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    112e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    1132:	2301      	movs	r3, #1
    1134:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    1138:	e006      	b.n	1148 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    113a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    113e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    1142:	2300      	movs	r3, #0
    1144:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    1148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    114a:	2b00      	cmp	r3, #0
    114c:	d04a      	beq.n	11e4 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    114e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    1152:	4618      	mov	r0, r3
    1154:	4621      	mov	r1, r4
    1156:	f7ff fb57 	bl	808 <ndigits_in_i64>
    115a:	4602      	mov	r2, r0
    115c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    115e:	1a9b      	subs	r3, r3, r2
    1160:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    1162:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1166:	2b00      	cmp	r3, #0
    1168:	d011      	beq.n	118e <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    116a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    116c:	3b01      	subs	r3, #1
    116e:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    1170:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1174:	2b30      	cmp	r3, #48	; 0x30
    1176:	d10a      	bne.n	118e <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    1178:	68fb      	ldr	r3, [r7, #12]
    117a:	2b00      	cmp	r3, #0
    117c:	d004      	beq.n	1188 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    117e:	68fb      	ldr	r3, [r7, #12]
    1180:	1c5a      	adds	r2, r3, #1
    1182:	60fa      	str	r2, [r7, #12]
    1184:	222d      	movs	r2, #45	; 0x2d
    1186:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    1188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    118a:	3301      	adds	r3, #1
    118c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    118e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1192:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1194:	4619      	mov	r1, r3
    1196:	68f8      	ldr	r0, [r7, #12]
    1198:	f7ff fc80 	bl	a9c <padbuffer>
    119c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    119e:	68fb      	ldr	r3, [r7, #12]
    11a0:	2b00      	cmp	r3, #0
    11a2:	d001      	beq.n	11a8 <am_util_stdio_vsprintf+0x4c4>
    11a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11a6:	e000      	b.n	11aa <am_util_stdio_vsprintf+0x4c6>
    11a8:	2300      	movs	r3, #0
    11aa:	68fa      	ldr	r2, [r7, #12]
    11ac:	4413      	add	r3, r2
    11ae:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    11b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    11b4:	4413      	add	r3, r2
    11b6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    11b8:	2300      	movs	r3, #0
    11ba:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    11bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    11c0:	2b00      	cmp	r3, #0
    11c2:	d01e      	beq.n	1202 <am_util_stdio_vsprintf+0x51e>
    11c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    11c8:	2b20      	cmp	r3, #32
    11ca:	d11a      	bne.n	1202 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    11cc:	68fb      	ldr	r3, [r7, #12]
    11ce:	2b00      	cmp	r3, #0
    11d0:	d004      	beq.n	11dc <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    11d2:	68fb      	ldr	r3, [r7, #12]
    11d4:	1c5a      	adds	r2, r3, #1
    11d6:	60fa      	str	r2, [r7, #12]
    11d8:	222d      	movs	r2, #45	; 0x2d
    11da:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    11dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11de:	3301      	adds	r3, #1
    11e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    11e2:	e00e      	b.n	1202 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    11e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    11e8:	2b00      	cmp	r3, #0
    11ea:	d00a      	beq.n	1202 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    11ec:	68fb      	ldr	r3, [r7, #12]
    11ee:	2b00      	cmp	r3, #0
    11f0:	d004      	beq.n	11fc <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    11f2:	68fb      	ldr	r3, [r7, #12]
    11f4:	1c5a      	adds	r2, r3, #1
    11f6:	60fa      	str	r2, [r7, #12]
    11f8:	222d      	movs	r2, #45	; 0x2d
    11fa:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    11fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11fe:	3301      	adds	r3, #1
    1200:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1202:	68fa      	ldr	r2, [r7, #12]
    1204:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1208:	f7ff fb85 	bl	916 <uint64_to_str>
    120c:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    120e:	68fb      	ldr	r3, [r7, #12]
    1210:	2b00      	cmp	r3, #0
    1212:	d003      	beq.n	121c <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    1214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1216:	68fa      	ldr	r2, [r7, #12]
    1218:	4413      	add	r3, r2
    121a:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    121c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    121e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1220:	4413      	add	r3, r2
    1222:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1224:	e04a      	b.n	12bc <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    1226:	68fb      	ldr	r3, [r7, #12]
    1228:	2b00      	cmp	r3, #0
    122a:	d046      	beq.n	12ba <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    122c:	687b      	ldr	r3, [r7, #4]
    122e:	3307      	adds	r3, #7
    1230:	f023 0307 	bic.w	r3, r3, #7
    1234:	f103 0208 	add.w	r2, r3, #8
    1238:	607a      	str	r2, [r7, #4]
    123a:	cb18      	ldmia	r3, {r3, r4}
    123c:	4618      	mov	r0, r3
    123e:	4621      	mov	r1, r4
    1240:	f7fe ff3e 	bl	c0 <__aeabi_d2f>
    1244:	4603      	mov	r3, r0
    1246:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    1248:	68fb      	ldr	r3, [r7, #12]
    124a:	2214      	movs	r2, #20
    124c:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    124e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1250:	68f9      	ldr	r1, [r7, #12]
    1252:	6978      	ldr	r0, [r7, #20]
    1254:	f7ff fc48 	bl	ae8 <ftoa>
    1258:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    125a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    125c:	2b00      	cmp	r3, #0
    125e:	da14      	bge.n	128a <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    1260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1262:	f1b3 3fff 	cmp.w	r3, #4294967295
    1266:	d102      	bne.n	126e <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    1268:	4b1e      	ldr	r3, [pc, #120]	; (12e4 <am_util_stdio_vsprintf+0x600>)
    126a:	62bb      	str	r3, [r7, #40]	; 0x28
    126c:	e008      	b.n	1280 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    126e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1270:	f113 0f02 	cmn.w	r3, #2
    1274:	d102      	bne.n	127c <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    1276:	4b1c      	ldr	r3, [pc, #112]	; (12e8 <am_util_stdio_vsprintf+0x604>)
    1278:	62bb      	str	r3, [r7, #40]	; 0x28
    127a:	e001      	b.n	1280 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    127c:	4b1b      	ldr	r3, [pc, #108]	; (12ec <am_util_stdio_vsprintf+0x608>)
    127e:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    1280:	68fb      	ldr	r3, [r7, #12]
    1282:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1284:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    1286:	2303      	movs	r3, #3
    1288:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    128a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    128c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    128e:	4413      	add	r3, r2
    1290:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    1292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1294:	68fa      	ldr	r2, [r7, #12]
    1296:	4413      	add	r3, r2
    1298:	60fb      	str	r3, [r7, #12]
                }
                break;
    129a:	e00e      	b.n	12ba <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    129c:	68fb      	ldr	r3, [r7, #12]
    129e:	2b00      	cmp	r3, #0
    12a0:	d005      	beq.n	12ae <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    12a2:	68fb      	ldr	r3, [r7, #12]
    12a4:	1c5a      	adds	r2, r3, #1
    12a6:	60fa      	str	r2, [r7, #12]
    12a8:	68ba      	ldr	r2, [r7, #8]
    12aa:	7812      	ldrb	r2, [r2, #0]
    12ac:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    12ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    12b0:	3301      	adds	r3, #1
    12b2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    12b4:	e002      	b.n	12bc <am_util_stdio_vsprintf+0x5d8>
                break;
    12b6:	bf00      	nop
    12b8:	e000      	b.n	12bc <am_util_stdio_vsprintf+0x5d8>
                break;
    12ba:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    12bc:	68bb      	ldr	r3, [r7, #8]
    12be:	3301      	adds	r3, #1
    12c0:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    12c2:	68bb      	ldr	r3, [r7, #8]
    12c4:	781b      	ldrb	r3, [r3, #0]
    12c6:	2b00      	cmp	r3, #0
    12c8:	f47f ad17 	bne.w	cfa <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    12cc:	68fb      	ldr	r3, [r7, #12]
    12ce:	2b00      	cmp	r3, #0
    12d0:	d002      	beq.n	12d8 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    12d2:	68fb      	ldr	r3, [r7, #12]
    12d4:	2200      	movs	r2, #0
    12d6:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    12d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    12da:	4618      	mov	r0, r3
    12dc:	3754      	adds	r7, #84	; 0x54
    12de:	46bd      	mov	sp, r7
    12e0:	bd90      	pop	{r4, r7, pc}
    12e2:	bf00      	nop
    12e4:	00302e30 	.word	0x00302e30
    12e8:	00232e23 	.word	0x00232e23
    12ec:	003f2e3f 	.word	0x003f2e3f

000012f0 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    12f0:	b40f      	push	{r0, r1, r2, r3}
    12f2:	b580      	push	{r7, lr}
    12f4:	b082      	sub	sp, #8
    12f6:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    12f8:	f107 0314 	add.w	r3, r7, #20
    12fc:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    12fe:	683a      	ldr	r2, [r7, #0]
    1300:	6939      	ldr	r1, [r7, #16]
    1302:	4808      	ldr	r0, [pc, #32]	; (1324 <am_util_stdio_printf+0x34>)
    1304:	f7ff fcee 	bl	ce4 <am_util_stdio_vsprintf>
    1308:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    130a:	4b07      	ldr	r3, [pc, #28]	; (1328 <am_util_stdio_printf+0x38>)
    130c:	681b      	ldr	r3, [r3, #0]
    130e:	4805      	ldr	r0, [pc, #20]	; (1324 <am_util_stdio_printf+0x34>)
    1310:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    1312:	687b      	ldr	r3, [r7, #4]
}
    1314:	4618      	mov	r0, r3
    1316:	3708      	adds	r7, #8
    1318:	46bd      	mov	sp, r7
    131a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    131e:	b004      	add	sp, #16
    1320:	4770      	bx	lr
    1322:	bf00      	nop
    1324:	10001060 	.word	0x10001060
    1328:	100011a0 	.word	0x100011a0

0000132c <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    132c:	b580      	push	{r7, lr}
    132e:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    1330:	4802      	ldr	r0, [pc, #8]	; (133c <am_util_stdio_terminal_clear+0x10>)
    1332:	f7ff ffdd 	bl	12f0 <am_util_stdio_printf>
}
    1336:	bf00      	nop
    1338:	bd80      	pop	{r7, pc}
    133a:	bf00      	nop
    133c:	000023d8 	.word	0x000023d8

00001340 <am_util_string_strnicmp>:
//!  if str1>str2.
//
//*****************************************************************************
int32_t
am_util_string_strnicmp(const char *str1, const char *str2, int num)
{
    1340:	b480      	push	{r7}
    1342:	b087      	sub	sp, #28
    1344:	af00      	add	r7, sp, #0
    1346:	60f8      	str	r0, [r7, #12]
    1348:	60b9      	str	r1, [r7, #8]
    134a:	607a      	str	r2, [r7, #4]
    uint8_t cChar1, cChar2;

    while ( *str1 && *str2 && num )
    134c:	e034      	b.n	13b8 <am_util_string_strnicmp+0x78>
    {
        cChar1 = *str1;
    134e:	68fb      	ldr	r3, [r7, #12]
    1350:	781b      	ldrb	r3, [r3, #0]
    1352:	75fb      	strb	r3, [r7, #23]
        cChar2 = *str2;
    1354:	68bb      	ldr	r3, [r7, #8]
    1356:	781b      	ldrb	r3, [r3, #0]
    1358:	75bb      	strb	r3, [r7, #22]

        cChar1 |= ( am_cattr[cChar1] & AM_CATTR_UPPER ) ? 0x20 : 0x00;
    135a:	7dfb      	ldrb	r3, [r7, #23]
    135c:	4a1f      	ldr	r2, [pc, #124]	; (13dc <am_util_string_strnicmp+0x9c>)
    135e:	5cd3      	ldrb	r3, [r2, r3]
    1360:	f003 0304 	and.w	r3, r3, #4
    1364:	2b00      	cmp	r3, #0
    1366:	d001      	beq.n	136c <am_util_string_strnicmp+0x2c>
    1368:	2220      	movs	r2, #32
    136a:	e000      	b.n	136e <am_util_string_strnicmp+0x2e>
    136c:	2200      	movs	r2, #0
    136e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    1372:	4313      	orrs	r3, r2
    1374:	b25b      	sxtb	r3, r3
    1376:	75fb      	strb	r3, [r7, #23]
        cChar2 |= ( am_cattr[cChar2] & AM_CATTR_UPPER ) ? 0x20 : 0x00;
    1378:	7dbb      	ldrb	r3, [r7, #22]
    137a:	4a18      	ldr	r2, [pc, #96]	; (13dc <am_util_string_strnicmp+0x9c>)
    137c:	5cd3      	ldrb	r3, [r2, r3]
    137e:	f003 0304 	and.w	r3, r3, #4
    1382:	2b00      	cmp	r3, #0
    1384:	d001      	beq.n	138a <am_util_string_strnicmp+0x4a>
    1386:	2220      	movs	r2, #32
    1388:	e000      	b.n	138c <am_util_string_strnicmp+0x4c>
    138a:	2200      	movs	r2, #0
    138c:	f997 3016 	ldrsb.w	r3, [r7, #22]
    1390:	4313      	orrs	r3, r2
    1392:	b25b      	sxtb	r3, r3
    1394:	75bb      	strb	r3, [r7, #22]

        if ( cChar1 != cChar2 )
    1396:	7dfa      	ldrb	r2, [r7, #23]
    1398:	7dbb      	ldrb	r3, [r7, #22]
    139a:	429a      	cmp	r2, r3
    139c:	d003      	beq.n	13a6 <am_util_string_strnicmp+0x66>
        {
            return cChar1 - cChar2;
    139e:	7dfa      	ldrb	r2, [r7, #23]
    13a0:	7dbb      	ldrb	r3, [r7, #22]
    13a2:	1ad3      	subs	r3, r2, r3
    13a4:	e014      	b.n	13d0 <am_util_string_strnicmp+0x90>
        }

        str1++;
    13a6:	68fb      	ldr	r3, [r7, #12]
    13a8:	3301      	adds	r3, #1
    13aa:	60fb      	str	r3, [r7, #12]
        str2++;
    13ac:	68bb      	ldr	r3, [r7, #8]
    13ae:	3301      	adds	r3, #1
    13b0:	60bb      	str	r3, [r7, #8]
        num--;
    13b2:	687b      	ldr	r3, [r7, #4]
    13b4:	3b01      	subs	r3, #1
    13b6:	607b      	str	r3, [r7, #4]
    while ( *str1 && *str2 && num )
    13b8:	68fb      	ldr	r3, [r7, #12]
    13ba:	781b      	ldrb	r3, [r3, #0]
    13bc:	2b00      	cmp	r3, #0
    13be:	d006      	beq.n	13ce <am_util_string_strnicmp+0x8e>
    13c0:	68bb      	ldr	r3, [r7, #8]
    13c2:	781b      	ldrb	r3, [r3, #0]
    13c4:	2b00      	cmp	r3, #0
    13c6:	d002      	beq.n	13ce <am_util_string_strnicmp+0x8e>
    13c8:	687b      	ldr	r3, [r7, #4]
    13ca:	2b00      	cmp	r3, #0
    13cc:	d1bf      	bne.n	134e <am_util_string_strnicmp+0xe>
    }

    //
    // Since we made it here, the strings must be equal to n characters.
    //
    return 0;
    13ce:	2300      	movs	r3, #0
}
    13d0:	4618      	mov	r0, r3
    13d2:	371c      	adds	r7, #28
    13d4:	46bd      	mov	sp, r7
    13d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    13da:	4770      	bx	lr
    13dc:	000023ec 	.word	0x000023ec

000013e0 <am_util_time_computeDayofWeek>:
//! 7   indicates that the given date is invalid (e.g. 2/29/2015).
//
//*****************************************************************************
int
am_util_time_computeDayofWeek(int iYear, int iMonth, int iDay)
{
    13e0:	b480      	push	{r7}
    13e2:	b087      	sub	sp, #28
    13e4:	af00      	add	r7, sp, #0
    13e6:	60f8      	str	r0, [r7, #12]
    13e8:	60b9      	str	r1, [r7, #8]
    13ea:	607a      	str	r2, [r7, #4]
    //

    //
    // Validate inputs.  Return 7 if any are out-of-bounds.
    //
    if ( (iMonth < 1) || (iMonth > 12) || (iYear < 2000) || (iYear >= 2400) || (iDay < 1) )
    13ec:	68bb      	ldr	r3, [r7, #8]
    13ee:	2b00      	cmp	r3, #0
    13f0:	dd0d      	ble.n	140e <am_util_time_computeDayofWeek+0x2e>
    13f2:	68bb      	ldr	r3, [r7, #8]
    13f4:	2b0c      	cmp	r3, #12
    13f6:	dc0a      	bgt.n	140e <am_util_time_computeDayofWeek+0x2e>
    13f8:	68fb      	ldr	r3, [r7, #12]
    13fa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    13fe:	db06      	blt.n	140e <am_util_time_computeDayofWeek+0x2e>
    1400:	68fb      	ldr	r3, [r7, #12]
    1402:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    1406:	da02      	bge.n	140e <am_util_time_computeDayofWeek+0x2e>
    1408:	687b      	ldr	r3, [r7, #4]
    140a:	2b00      	cmp	r3, #0
    140c:	dc01      	bgt.n	1412 <am_util_time_computeDayofWeek+0x32>
    {
        return 7;
    140e:	2107      	movs	r1, #7
    1410:	e078      	b.n	1504 <am_util_time_computeDayofWeek+0x124>
    }

    if ( (iMonth == 2) && (iDay > 28) )
    1412:	68bb      	ldr	r3, [r7, #8]
    1414:	2b02      	cmp	r3, #2
    1416:	d10c      	bne.n	1432 <am_util_time_computeDayofWeek+0x52>
    1418:	687b      	ldr	r3, [r7, #4]
    141a:	2b1c      	cmp	r3, #28
    141c:	dd09      	ble.n	1432 <am_util_time_computeDayofWeek+0x52>
    {
        if ( (iDay > 29) || (iYear % 4) )
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	2b1d      	cmp	r3, #29
    1422:	dc04      	bgt.n	142e <am_util_time_computeDayofWeek+0x4e>
    1424:	68fb      	ldr	r3, [r7, #12]
    1426:	f003 0303 	and.w	r3, r3, #3
    142a:	2b00      	cmp	r3, #0
    142c:	d001      	beq.n	1432 <am_util_time_computeDayofWeek+0x52>
        {
            return 7;
    142e:	2107      	movs	r1, #7
    1430:	e068      	b.n	1504 <am_util_time_computeDayofWeek+0x124>
    }

    //
    // 0-base the month and date.
    //
    iMonth--;
    1432:	68bb      	ldr	r3, [r7, #8]
    1434:	3b01      	subs	r3, #1
    1436:	60bb      	str	r3, [r7, #8]
    iDay--;
    1438:	687b      	ldr	r3, [r7, #4]
    143a:	3b01      	subs	r3, #1
    143c:	607b      	str	r3, [r7, #4]

    //
    // First we'll count the number of days up to the the specified
    // month and date in the specified year.
    //
    iDayCnt = iDay;
    143e:	687b      	ldr	r3, [r7, #4]
    1440:	617b      	str	r3, [r7, #20]
    iCnt = 0;
    1442:	2300      	movs	r3, #0
    1444:	613b      	str	r3, [r7, #16]
    while ( iCnt < iMonth )
    1446:	e034      	b.n	14b2 <am_util_time_computeDayofWeek+0xd2>
    {
        switch ( iCnt )
    1448:	693b      	ldr	r3, [r7, #16]
    144a:	2b0b      	cmp	r3, #11
    144c:	d82e      	bhi.n	14ac <am_util_time_computeDayofWeek+0xcc>
    144e:	a201      	add	r2, pc, #4	; (adr r2, 1454 <am_util_time_computeDayofWeek+0x74>)
    1450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1454:	0000148d 	.word	0x0000148d
    1458:	00001495 	.word	0x00001495
    145c:	0000148d 	.word	0x0000148d
    1460:	00001485 	.word	0x00001485
    1464:	0000148d 	.word	0x0000148d
    1468:	00001485 	.word	0x00001485
    146c:	0000148d 	.word	0x0000148d
    1470:	0000148d 	.word	0x0000148d
    1474:	00001485 	.word	0x00001485
    1478:	0000148d 	.word	0x0000148d
    147c:	00001485 	.word	0x00001485
    1480:	0000148d 	.word	0x0000148d
        {
            case 3:
            case 5:
            case 8:
            case 10:
                iDayCnt += 30;
    1484:	697b      	ldr	r3, [r7, #20]
    1486:	331e      	adds	r3, #30
    1488:	617b      	str	r3, [r7, #20]
                break;
    148a:	e00f      	b.n	14ac <am_util_time_computeDayofWeek+0xcc>
            case 4:
            case 6:
            case 7:
            case 9:
            case 11:
                iDayCnt += 31;
    148c:	697b      	ldr	r3, [r7, #20]
    148e:	331f      	adds	r3, #31
    1490:	617b      	str	r3, [r7, #20]
                break;
    1492:	e00b      	b.n	14ac <am_util_time_computeDayofWeek+0xcc>
            case 1:
                iDayCnt += (iYear % 4) ? 28 : 29;
    1494:	68fb      	ldr	r3, [r7, #12]
    1496:	f003 0303 	and.w	r3, r3, #3
    149a:	2b00      	cmp	r3, #0
    149c:	d001      	beq.n	14a2 <am_util_time_computeDayofWeek+0xc2>
    149e:	231c      	movs	r3, #28
    14a0:	e000      	b.n	14a4 <am_util_time_computeDayofWeek+0xc4>
    14a2:	231d      	movs	r3, #29
    14a4:	697a      	ldr	r2, [r7, #20]
    14a6:	4413      	add	r3, r2
    14a8:	617b      	str	r3, [r7, #20]
                break;
    14aa:	bf00      	nop
        }
        iCnt++;
    14ac:	693b      	ldr	r3, [r7, #16]
    14ae:	3301      	adds	r3, #1
    14b0:	613b      	str	r3, [r7, #16]
    while ( iCnt < iMonth )
    14b2:	693a      	ldr	r2, [r7, #16]
    14b4:	68bb      	ldr	r3, [r7, #8]
    14b6:	429a      	cmp	r2, r3
    14b8:	dbc6      	blt.n	1448 <am_util_time_computeDayofWeek+0x68>

    //
    // Now, add in the number of days in the intervening years between
    // 2000 and the specified year.
    //
    iCnt = 2000;
    14ba:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    14be:	613b      	str	r3, [r7, #16]
    while ( iCnt < iYear )
    14c0:	e00f      	b.n	14e2 <am_util_time_computeDayofWeek+0x102>
    {
        iDayCnt += (iCnt % 4) ? 365 : 366;
    14c2:	693b      	ldr	r3, [r7, #16]
    14c4:	f003 0303 	and.w	r3, r3, #3
    14c8:	2b00      	cmp	r3, #0
    14ca:	d002      	beq.n	14d2 <am_util_time_computeDayofWeek+0xf2>
    14cc:	f240 136d 	movw	r3, #365	; 0x16d
    14d0:	e001      	b.n	14d6 <am_util_time_computeDayofWeek+0xf6>
    14d2:	f44f 73b7 	mov.w	r3, #366	; 0x16e
    14d6:	697a      	ldr	r2, [r7, #20]
    14d8:	4413      	add	r3, r2
    14da:	617b      	str	r3, [r7, #20]
        iCnt++;
    14dc:	693b      	ldr	r3, [r7, #16]
    14de:	3301      	adds	r3, #1
    14e0:	613b      	str	r3, [r7, #16]
    while ( iCnt < iYear )
    14e2:	693a      	ldr	r2, [r7, #16]
    14e4:	68fb      	ldr	r3, [r7, #12]
    14e6:	429a      	cmp	r2, r3
    14e8:	dbeb      	blt.n	14c2 <am_util_time_computeDayofWeek+0xe2>

    //
    // Offset the day count with the base day of the week.
    // For Saturday, this is 6.
    //
    return (iDayCnt + 6) % 7;
    14ea:	697b      	ldr	r3, [r7, #20]
    14ec:	1d9a      	adds	r2, r3, #6
    14ee:	4b09      	ldr	r3, [pc, #36]	; (1514 <am_util_time_computeDayofWeek+0x134>)
    14f0:	fb83 1302 	smull	r1, r3, r3, r2
    14f4:	4413      	add	r3, r2
    14f6:	1099      	asrs	r1, r3, #2
    14f8:	17d3      	asrs	r3, r2, #31
    14fa:	1ac9      	subs	r1, r1, r3
    14fc:	460b      	mov	r3, r1
    14fe:	00db      	lsls	r3, r3, #3
    1500:	1a5b      	subs	r3, r3, r1
    1502:	1ad1      	subs	r1, r2, r3
    1504:	460b      	mov	r3, r1
}
    1506:	4618      	mov	r0, r3
    1508:	371c      	adds	r7, #28
    150a:	46bd      	mov	sp, r7
    150c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1510:	4770      	bx	lr
    1512:	bf00      	nop
    1514:	92492493 	.word	0x92492493

00001518 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1518:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    151a:	f000 fc1b 	bl	1d54 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    151e:	f000 fc87 	bl	1e30 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    1522:	f000 fea3 	bl	226c <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    1526:	2001      	movs	r0, #1
    1528:	f000 fc92 	bl	1e50 <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    152c:	2001      	movs	r0, #1
    152e:	f000 f943 	bl	17b8 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    1532:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    1536:	f000 bca1 	b.w	1e7c <am_hal_rtc_osc_disable>
    153a:	bf00      	nop

0000153c <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    153c:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    153e:	4b17      	ldr	r3, [pc, #92]	; (159c <am_bsp_debug_printf_enable+0x60>)
    1540:	681c      	ldr	r4, [r3, #0]
    1542:	f014 0401 	ands.w	r4, r4, #1
{
    1546:	b087      	sub	sp, #28
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1548:	d001      	beq.n	154e <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    154a:	b007      	add	sp, #28
    154c:	bd30      	pop	{r4, r5, pc}
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    154e:	4a14      	ldr	r2, [pc, #80]	; (15a0 <am_bsp_debug_printf_enable+0x64>)
    1550:	4914      	ldr	r1, [pc, #80]	; (15a4 <am_bsp_debug_printf_enable+0x68>)
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    1552:	4d15      	ldr	r5, [pc, #84]	; (15a8 <am_bsp_debug_printf_enable+0x6c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1554:	6011      	str	r1, [r2, #0]
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    1556:	a806      	add	r0, sp, #24
    1558:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    155c:	f000 fe28 	bl	21b0 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    1560:	f000 fa76 	bl	1a50 <am_hal_interrupt_master_disable>
    1564:	4a11      	ldr	r2, [pc, #68]	; (15ac <am_bsp_debug_printf_enable+0x70>)
    1566:	9000      	str	r0, [sp, #0]
    1568:	4d11      	ldr	r5, [pc, #68]	; (15b0 <am_bsp_debug_printf_enable+0x74>)
    156a:	4912      	ldr	r1, [pc, #72]	; (15b4 <am_bsp_debug_printf_enable+0x78>)
    156c:	2073      	movs	r0, #115	; 0x73
    156e:	6010      	str	r0, [r2, #0]
    1570:	682b      	ldr	r3, [r5, #0]
    1572:	4811      	ldr	r0, [pc, #68]	; (15b8 <am_bsp_debug_printf_enable+0x7c>)
    1574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    1578:	602b      	str	r3, [r5, #0]
    157a:	6805      	ldr	r5, [r0, #0]
    157c:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    1580:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    1584:	6003      	str	r3, [r0, #0]
    1586:	6808      	ldr	r0, [r1, #0]
    1588:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    158c:	600d      	str	r5, [r1, #0]
    158e:	6014      	str	r4, [r2, #0]
    1590:	9800      	ldr	r0, [sp, #0]
    1592:	f000 fa61 	bl	1a58 <am_hal_interrupt_master_set>
}
    1596:	b007      	add	sp, #28
    1598:	bd30      	pop	{r4, r5, pc}
    159a:	bf00      	nop
    159c:	10001164 	.word	0x10001164
    15a0:	e0000e80 	.word	0xe0000e80
    15a4:	00150511 	.word	0x00150511
    15a8:	000f4240 	.word	0x000f4240
    15ac:	40010060 	.word	0x40010060
    15b0:	40010054 	.word	0x40010054
    15b4:	40010108 	.word	0x40010108
    15b8:	40010028 	.word	0x40010028

000015bc <am_bsp_debug_printf_disable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    15bc:	b530      	push	{r4, r5, lr}
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    15be:	4b14      	ldr	r3, [pc, #80]	; (1610 <am_bsp_debug_printf_disable+0x54>)
    15c0:	681c      	ldr	r4, [r3, #0]
    15c2:	f014 0401 	ands.w	r4, r4, #1
{
    15c6:	b083      	sub	sp, #12
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    15c8:	d120      	bne.n	160c <am_bsp_debug_printf_disable+0x50>
    }

    //
    // Disable the TPIU
    //
    am_hal_itm_not_busy();
    15ca:	f000 fa75 	bl	1ab8 <am_hal_itm_not_busy>
    am_hal_gpio_pin_config(AM_BSP_GPIO_ITM_SWO, AM_HAL_GPIO_OUTPUT);
    15ce:	f000 fa3f 	bl	1a50 <am_hal_interrupt_master_disable>
    15d2:	4a10      	ldr	r2, [pc, #64]	; (1614 <am_bsp_debug_printf_disable+0x58>)
    15d4:	9001      	str	r0, [sp, #4]
    15d6:	4d10      	ldr	r5, [pc, #64]	; (1618 <am_bsp_debug_printf_disable+0x5c>)
    15d8:	4910      	ldr	r1, [pc, #64]	; (161c <am_bsp_debug_printf_disable+0x60>)
    15da:	2073      	movs	r0, #115	; 0x73
    15dc:	6010      	str	r0, [r2, #0]
    15de:	682b      	ldr	r3, [r5, #0]
    15e0:	480f      	ldr	r0, [pc, #60]	; (1620 <am_bsp_debug_printf_disable+0x64>)
    15e2:	f023 0c70 	bic.w	ip, r3, #112	; 0x70
    15e6:	f04c 0320 	orr.w	r3, ip, #32
    15ea:	602b      	str	r3, [r5, #0]
    15ec:	6805      	ldr	r5, [r0, #0]
    15ee:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    15f2:	f44c 53c0 	orr.w	r3, ip, #6144	; 0x1800
    15f6:	6003      	str	r3, [r0, #0]
    15f8:	6808      	ldr	r0, [r1, #0]
    15fa:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    15fe:	600d      	str	r5, [r1, #0]
    1600:	6014      	str	r4, [r2, #0]
    1602:	9801      	ldr	r0, [sp, #4]
    1604:	f000 fa28 	bl	1a58 <am_hal_interrupt_master_set>
    am_hal_tpiu_disable();
    1608:	f000 fe2a 	bl	2260 <am_hal_tpiu_disable>
}
    160c:	b003      	add	sp, #12
    160e:	bd30      	pop	{r4, r5, pc}
    1610:	10001164 	.word	0x10001164
    1614:	40010060 	.word	0x40010060
    1618:	40010054 	.word	0x40010054
    161c:	40010108 	.word	0x40010108
    1620:	40010028 	.word	0x40010028

00001624 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    1624:	f000 ba52 	b.w	1acc <am_hal_itm_print>

00001628 <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    1628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    162a:	4605      	mov	r5, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    162c:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    1630:	78ab      	ldrb	r3, [r5, #2]
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    1632:	786c      	ldrb	r4, [r5, #1]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1634:	78ef      	ldrb	r7, [r5, #3]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    1636:	792e      	ldrb	r6, [r5, #4]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    1638:	79a9      	ldrb	r1, [r5, #6]
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    163a:	009a      	lsls	r2, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    163c:	0064      	lsls	r4, r4, #1
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    163e:	f002 0204 	and.w	r2, r2, #4
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    1642:	f004 0402 	and.w	r4, r4, #2
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1646:	4314      	orrs	r4, r2
    1648:	f047 0701 	orr.w	r7, r7, #1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    164c:	79ea      	ldrb	r2, [r5, #7]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    164e:	01f6      	lsls	r6, r6, #7
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1650:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    1652:	b2f6      	uxtb	r6, r6
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    1654:	7a2f      	ldrb	r7, [r5, #8]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    1656:	0289      	lsls	r1, r1, #10
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1658:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    165a:	f401 6180 	and.w	r1, r1, #1024	; 0x400
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    165e:	7a6e      	ldrb	r6, [r5, #9]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    1660:	02d2      	lsls	r2, r2, #11
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1662:	430c      	orrs	r4, r1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    1664:	f402 6200 	and.w	r2, r2, #2048	; 0x800
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    1668:	7aa9      	ldrb	r1, [r5, #10]
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    166a:	033f      	lsls	r7, r7, #12
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    166c:	4314      	orrs	r4, r2
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    166e:	b2bf      	uxth	r7, r7
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    1670:	0436      	lsls	r6, r6, #16
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    1672:	7aea      	ldrb	r2, [r5, #11]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1674:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    1676:	0509      	lsls	r1, r1, #20
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    1678:	f406 2770 	and.w	r7, r6, #983040	; 0xf0000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    167c:	0612      	lsls	r2, r2, #24
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    167e:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    1680:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    1684:	009b      	lsls	r3, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    1686:	f002 7780 	and.w	r7, r2, #16777216	; 0x1000000
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    168a:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    168c:	f003 0108 	and.w	r1, r3, #8
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1690:	433c      	orrs	r4, r7
    1692:	430c      	orrs	r4, r1
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1694:	f000 fa58 	bl	1b48 <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1698:	482c      	ldr	r0, [pc, #176]	; (174c <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    169a:	4b2d      	ldr	r3, [pc, #180]	; (1750 <am_hal_cachectrl_enable+0x128>)
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    169c:	6004      	str	r4, [r0, #0]
    169e:	2232      	movs	r2, #50	; 0x32
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    16a0:	681e      	ldr	r6, [r3, #0]
    16a2:	0777      	lsls	r7, r6, #29
    16a4:	d41e      	bmi.n	16e4 <am_hal_cachectrl_enable+0xbc>
    16a6:	681f      	ldr	r7, [r3, #0]
    16a8:	077e      	lsls	r6, r7, #29
    16aa:	f102 32ff 	add.w	r2, r2, #4294967295
    16ae:	d419      	bmi.n	16e4 <am_hal_cachectrl_enable+0xbc>
    16b0:	6819      	ldr	r1, [r3, #0]
    16b2:	074f      	lsls	r7, r1, #29
    16b4:	d416      	bmi.n	16e4 <am_hal_cachectrl_enable+0xbc>
    16b6:	6818      	ldr	r0, [r3, #0]
    16b8:	0746      	lsls	r6, r0, #29
    16ba:	d413      	bmi.n	16e4 <am_hal_cachectrl_enable+0xbc>
    16bc:	681e      	ldr	r6, [r3, #0]
    16be:	0770      	lsls	r0, r6, #29
    16c0:	d410      	bmi.n	16e4 <am_hal_cachectrl_enable+0xbc>
    16c2:	681f      	ldr	r7, [r3, #0]
    16c4:	0779      	lsls	r1, r7, #29
    16c6:	d40d      	bmi.n	16e4 <am_hal_cachectrl_enable+0xbc>
    16c8:	6819      	ldr	r1, [r3, #0]
    16ca:	074f      	lsls	r7, r1, #29
    16cc:	d40a      	bmi.n	16e4 <am_hal_cachectrl_enable+0xbc>
    16ce:	6818      	ldr	r0, [r3, #0]
    16d0:	0746      	lsls	r6, r0, #29
    16d2:	d407      	bmi.n	16e4 <am_hal_cachectrl_enable+0xbc>
    16d4:	681e      	ldr	r6, [r3, #0]
    16d6:	0770      	lsls	r0, r6, #29
    16d8:	d404      	bmi.n	16e4 <am_hal_cachectrl_enable+0xbc>
    16da:	681f      	ldr	r7, [r3, #0]
    16dc:	0779      	lsls	r1, r7, #29
    16de:	d401      	bmi.n	16e4 <am_hal_cachectrl_enable+0xbc>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    16e0:	3a09      	subs	r2, #9
    16e2:	d1dd      	bne.n	16a0 <am_hal_cachectrl_enable+0x78>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    16e4:	4b1a      	ldr	r3, [pc, #104]	; (1750 <am_hal_cachectrl_enable+0x128>)
    16e6:	681a      	ldr	r2, [r3, #0]
    16e8:	f042 0101 	orr.w	r1, r2, #1
    16ec:	6019      	str	r1, [r3, #0]
    16ee:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    16f0:	6818      	ldr	r0, [r3, #0]
    16f2:	0740      	lsls	r0, r0, #29
    16f4:	d41e      	bmi.n	1734 <am_hal_cachectrl_enable+0x10c>
    16f6:	681e      	ldr	r6, [r3, #0]
    16f8:	0771      	lsls	r1, r6, #29
    16fa:	f102 32ff 	add.w	r2, r2, #4294967295
    16fe:	d419      	bmi.n	1734 <am_hal_cachectrl_enable+0x10c>
    1700:	681f      	ldr	r7, [r3, #0]
    1702:	077f      	lsls	r7, r7, #29
    1704:	d416      	bmi.n	1734 <am_hal_cachectrl_enable+0x10c>
    1706:	6819      	ldr	r1, [r3, #0]
    1708:	074e      	lsls	r6, r1, #29
    170a:	d413      	bmi.n	1734 <am_hal_cachectrl_enable+0x10c>
    170c:	6818      	ldr	r0, [r3, #0]
    170e:	0740      	lsls	r0, r0, #29
    1710:	d410      	bmi.n	1734 <am_hal_cachectrl_enable+0x10c>
    1712:	681e      	ldr	r6, [r3, #0]
    1714:	0771      	lsls	r1, r6, #29
    1716:	d40d      	bmi.n	1734 <am_hal_cachectrl_enable+0x10c>
    1718:	681f      	ldr	r7, [r3, #0]
    171a:	077f      	lsls	r7, r7, #29
    171c:	d40a      	bmi.n	1734 <am_hal_cachectrl_enable+0x10c>
    171e:	6819      	ldr	r1, [r3, #0]
    1720:	074e      	lsls	r6, r1, #29
    1722:	d407      	bmi.n	1734 <am_hal_cachectrl_enable+0x10c>
    1724:	6818      	ldr	r0, [r3, #0]
    1726:	0740      	lsls	r0, r0, #29
    1728:	d404      	bmi.n	1734 <am_hal_cachectrl_enable+0x10c>
    172a:	681e      	ldr	r6, [r3, #0]
    172c:	0771      	lsls	r1, r6, #29
    172e:	d401      	bmi.n	1734 <am_hal_cachectrl_enable+0x10c>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    1730:	3a09      	subs	r2, #9
    1732:	d1dd      	bne.n	16f0 <am_hal_cachectrl_enable+0xc8>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1734:	796d      	ldrb	r5, [r5, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1736:	4f05      	ldr	r7, [pc, #20]	; (174c <am_hal_cachectrl_enable+0x124>)
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );
    1738:	022b      	lsls	r3, r5, #8
    173a:	f403 7100 	and.w	r1, r3, #512	; 0x200
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    173e:	f403 7280 	and.w	r2, r3, #256	; 0x100
    1742:	4311      	orrs	r1, r2
    1744:	430c      	orrs	r4, r1
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1746:	603c      	str	r4, [r7, #0]
    1748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    174a:	bf00      	nop
    174c:	40018000 	.word	0x40018000
    1750:	40018008 	.word	0x40018008

00001754 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    1754:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    1756:	4604      	mov	r4, r0
    1758:	b120      	cbz	r0, 1764 <am_hal_clkgen_sysclk_select+0x10>
    175a:	4a06      	ldr	r2, [pc, #24]	; (1774 <am_hal_clkgen_sysclk_select+0x20>)
    175c:	4806      	ldr	r0, [pc, #24]	; (1778 <am_hal_clkgen_sysclk_select+0x24>)
    175e:	2153      	movs	r1, #83	; 0x53
    1760:	f000 f944 	bl	19ec <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1764:	4b05      	ldr	r3, [pc, #20]	; (177c <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the required operating value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1766:	4906      	ldr	r1, [pc, #24]	; (1780 <am_hal_clkgen_sysclk_select+0x2c>)
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1768:	2047      	movs	r0, #71	; 0x47

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    176a:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    176c:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    176e:	600c      	str	r4, [r1, #0]
    AM_REG(CLKGEN, CLKKEY) = 0;
    1770:	601a      	str	r2, [r3, #0]
    1772:	bd10      	pop	{r4, pc}
    1774:	000024f8 	.word	0x000024f8
    1778:	00002530 	.word	0x00002530
    177c:	40004014 	.word	0x40004014
    1780:	40004018 	.word	0x40004018

00001784 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1784:	4b04      	ldr	r3, [pc, #16]	; (1798 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    1786:	4905      	ldr	r1, [pc, #20]	; (179c <am_hal_clkgen_sysclk_get+0x18>)
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1788:	681a      	ldr	r2, [r3, #0]
            return 48000000;
    178a:	4805      	ldr	r0, [pc, #20]	; (17a0 <am_hal_clkgen_sysclk_get+0x1c>)
    switch ( ui32ClockSetting )
    178c:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    1790:	bf08      	it	eq
    1792:	4608      	moveq	r0, r1
    1794:	4770      	bx	lr
    1796:	bf00      	nop
    1798:	40004018 	.word	0x40004018
    179c:	02dc6c00 	.word	0x02dc6c00
    17a0:	016e3600 	.word	0x016e3600

000017a4 <am_hal_clkgen_osc_start>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_start(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    17a4:	0783      	lsls	r3, r0, #30
    17a6:	d004      	beq.n	17b2 <am_hal_clkgen_osc_start+0xe>
    {
        //
        // Start the oscillator(s).
        // Note that these bits are cleared in order to enable the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) &= ~ui32OscFlags;
    17a8:	4a02      	ldr	r2, [pc, #8]	; (17b4 <am_hal_clkgen_osc_start+0x10>)
    17aa:	6813      	ldr	r3, [r2, #0]
    17ac:	ea23 0000 	bic.w	r0, r3, r0
    17b0:	6010      	str	r0, [r2, #0]
    17b2:	4770      	bx	lr
    17b4:	4000400c 	.word	0x4000400c

000017b8 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    17b8:	0783      	lsls	r3, r0, #30
    17ba:	d003      	beq.n	17c4 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    17bc:	4b02      	ldr	r3, [pc, #8]	; (17c8 <am_hal_clkgen_osc_stop+0x10>)
    17be:	681a      	ldr	r2, [r3, #0]
    17c0:	4310      	orrs	r0, r2
    17c2:	6018      	str	r0, [r3, #0]
    17c4:	4770      	bx	lr
    17c6:	bf00      	nop
    17c8:	4000400c 	.word	0x4000400c

000017cc <am_hal_ctimer_config>:
//
//*****************************************************************************
void
am_hal_ctimer_config(uint32_t ui32TimerNumber,
                     am_hal_ctimer_config_t *psConfig)
{
    17cc:	b530      	push	{r4, r5, lr}
    17ce:	4604      	mov	r4, r0
                      (psConfig->ui32TimerBConfig << 16) );

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    17d0:	6808      	ldr	r0, [r1, #0]
                      (psConfig->ui32TimerBConfig << 16) );
    17d2:	688a      	ldr	r2, [r1, #8]
    ui32ConfigVal = ( (psConfig->ui32TimerAConfig)  |
    17d4:	684b      	ldr	r3, [r1, #4]
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    17d6:	2800      	cmp	r0, #0
    ui32ConfigVal = ( (psConfig->ui32TimerAConfig)  |
    17d8:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    17dc:	bf14      	ite	ne
    17de:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
    17e2:	2500      	moveq	r5, #0
{
    17e4:	b083      	sub	sp, #12
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    17e6:	430d      	orrs	r5, r1

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    17e8:	f000 f932 	bl	1a50 <am_hal_interrupt_master_disable>

    //
    // Find the correct register to write.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    17ec:	0124      	lsls	r4, r4, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    17ee:	4a2a      	ldr	r2, [pc, #168]	; (1898 <am_hal_ctimer_config+0xcc>)
    AM_CRITICAL_BEGIN_ASM
    17f0:	9001      	str	r0, [sp, #4]
    ui32TimerASrc = AM_BFR(CTIMER, STCFG, CLKSEL);
    17f2:	482a      	ldr	r0, [pc, #168]	; (189c <am_hal_ctimer_config+0xd0>)

    //
    // Write our configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    17f4:	50a5      	str	r5, [r4, r2]
    ui32TimerASrc = AM_BFR(CTIMER, STCFG, CLKSEL);
    17f6:	6805      	ldr	r5, [r0, #0]
    17f8:	f005 0c0f 	and.w	ip, r5, #15
    if ( (ui32TimerASrc == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV16)   ||
    17fc:	f10c 33ff 	add.w	r3, ip, #4294967295
    1800:	2b01      	cmp	r3, #1
    1802:	d93f      	bls.n	1884 <am_hal_ctimer_config+0xb8>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    1804:	6811      	ldr	r1, [r2, #0]
    1806:	f3c1 0e44 	ubfx	lr, r1, #1, #5
    180a:	f10e 34ff 	add.w	r4, lr, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    180e:	f3c1 4244 	ubfx	r2, r1, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1812:	2c04      	cmp	r4, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1814:	f102 30ff 	add.w	r0, r2, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1818:	d934      	bls.n	1884 <am_hal_ctimer_config+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    181a:	2804      	cmp	r0, #4
    181c:	d932      	bls.n	1884 <am_hal_ctimer_config+0xb8>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    181e:	4d20      	ldr	r5, [pc, #128]	; (18a0 <am_hal_ctimer_config+0xd4>)
    1820:	682b      	ldr	r3, [r5, #0]
    1822:	f3c3 0c44 	ubfx	ip, r3, #1, #5
    1826:	f10c 31ff 	add.w	r1, ip, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    182a:	f3c3 4e44 	ubfx	lr, r3, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    182e:	2904      	cmp	r1, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1830:	f10e 34ff 	add.w	r4, lr, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1834:	d926      	bls.n	1884 <am_hal_ctimer_config+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    1836:	2c04      	cmp	r4, #4
    1838:	d924      	bls.n	1884 <am_hal_ctimer_config+0xb8>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    183a:	4a1a      	ldr	r2, [pc, #104]	; (18a4 <am_hal_ctimer_config+0xd8>)
    183c:	6810      	ldr	r0, [r2, #0]
    183e:	f3c0 0544 	ubfx	r5, r0, #1, #5
    1842:	1e69      	subs	r1, r5, #1
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1844:	f3c0 4344 	ubfx	r3, r0, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1848:	2904      	cmp	r1, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    184a:	f103 34ff 	add.w	r4, r3, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    184e:	d919      	bls.n	1884 <am_hal_ctimer_config+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    1850:	2c04      	cmp	r4, #4
    1852:	d917      	bls.n	1884 <am_hal_ctimer_config+0xb8>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    1854:	4a14      	ldr	r2, [pc, #80]	; (18a8 <am_hal_ctimer_config+0xdc>)
    1856:	6810      	ldr	r0, [r2, #0]
    1858:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    185c:	f10c 35ff 	add.w	r5, ip, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1860:	f3c0 4e44 	ubfx	lr, r0, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1864:	2d04      	cmp	r5, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1866:	f10e 31ff 	add.w	r1, lr, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    186a:	d90b      	bls.n	1884 <am_hal_ctimer_config+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    186c:	2904      	cmp	r1, #4
    186e:	d909      	bls.n	1884 <am_hal_ctimer_config+0xb8>
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    }
    else
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 1);
    1870:	4c0e      	ldr	r4, [pc, #56]	; (18ac <am_hal_ctimer_config+0xe0>)
    1872:	6823      	ldr	r3, [r4, #0]
    1874:	f043 0204 	orr.w	r2, r3, #4
    1878:	6022      	str	r2, [r4, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    187a:	9801      	ldr	r0, [sp, #4]
    187c:	f000 f8ec 	bl	1a58 <am_hal_interrupt_master_set>

} // am_hal_ctimer_config()
    1880:	b003      	add	sp, #12
    1882:	bd30      	pop	{r4, r5, pc}
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    1884:	4809      	ldr	r0, [pc, #36]	; (18ac <am_hal_ctimer_config+0xe0>)
    1886:	6805      	ldr	r5, [r0, #0]
    1888:	f025 0104 	bic.w	r1, r5, #4
    188c:	6001      	str	r1, [r0, #0]
    AM_CRITICAL_END_ASM
    188e:	9801      	ldr	r0, [sp, #4]
    1890:	f000 f8e2 	bl	1a58 <am_hal_interrupt_master_set>
} // am_hal_ctimer_config()
    1894:	b003      	add	sp, #12
    1896:	bd30      	pop	{r4, r5, pc}
    1898:	4000800c 	.word	0x4000800c
    189c:	40008100 	.word	0x40008100
    18a0:	4000801c 	.word	0x4000801c
    18a4:	4000802c 	.word	0x4000802c
    18a8:	4000803c 	.word	0x4000803c
    18ac:	40021020 	.word	0x40021020

000018b0 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    18b0:	b570      	push	{r4, r5, r6, lr}
    18b2:	b082      	sub	sp, #8
    18b4:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    18b6:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    18b8:	f000 f8ca 	bl	1a50 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    18bc:	4d07      	ldr	r5, [pc, #28]	; (18dc <am_hal_ctimer_start+0x2c>)
    AM_CRITICAL_BEGIN_ASM
    18be:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    18c0:	5971      	ldr	r1, [r6, r5]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    18c2:	f004 2308 	and.w	r3, r4, #134219776	; 0x8000800
    18c6:	ea21 0003 	bic.w	r0, r1, r3
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    18ca:	f004 1201 	and.w	r2, r4, #65537	; 0x10001
    18ce:	4302      	orrs	r2, r0
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    18d0:	5172      	str	r2, [r6, r5]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    18d2:	9801      	ldr	r0, [sp, #4]
    18d4:	f000 f8c0 	bl	1a58 <am_hal_interrupt_master_set>
} // am_hal_ctimer_start()
    18d8:	b002      	add	sp, #8
    18da:	bd70      	pop	{r4, r5, r6, pc}
    18dc:	4000800c 	.word	0x4000800c

000018e0 <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    18e0:	b570      	push	{r4, r5, r6, lr}
    18e2:	b082      	sub	sp, #8
    18e4:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    18e6:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    18e8:	f000 f8b2 	bl	1a50 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    18ec:	4d05      	ldr	r5, [pc, #20]	; (1904 <am_hal_ctimer_clear+0x24>)
    AM_CRITICAL_BEGIN_ASM
    18ee:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    18f0:	5971      	ldr	r1, [r6, r5]
    18f2:	f004 2008 	and.w	r0, r4, #134219776	; 0x8000800
    18f6:	4308      	orrs	r0, r1
    18f8:	5170      	str	r0, [r6, r5]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    18fa:	9801      	ldr	r0, [sp, #4]
    18fc:	f000 f8ac 	bl	1a58 <am_hal_interrupt_master_set>
} // am_hal_ctimer_clear()
    1900:	b002      	add	sp, #8
    1902:	bd70      	pop	{r4, r5, r6, pc}
    1904:	4000800c 	.word	0x4000800c

00001908 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    190c:	b082      	sub	sp, #8
    190e:	4688      	mov	r8, r1
    1910:	461f      	mov	r7, r3
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    1912:	ea4f 1900 	mov.w	r9, r0, lsl #4
{
    1916:	4614      	mov	r4, r2
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1918:	f000 f89a 	bl	1a50 <am_hal_interrupt_master_disable>
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    191c:	f8df a098 	ldr.w	sl, [pc, #152]	; 19b8 <am_hal_ctimer_period_set+0xb0>
    AM_CRITICAL_BEGIN_ASM
    1920:	9001      	str	r0, [sp, #4]
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1922:	f518 3f80 	cmn.w	r8, #65536	; 0x10000
                                    AM_REG_CTIMER_CMPRA0_O +
    1926:	4d21      	ldr	r5, [pc, #132]	; (19ac <am_hal_ctimer_period_set+0xa4>)
                                    AM_REG_CTIMER_CMPRB0_O +
    1928:	4e21      	ldr	r6, [pc, #132]	; (19b0 <am_hal_ctimer_period_set+0xa8>)
    ui32Mode = *pui32ControlReg;
    192a:	f859 300a 	ldr.w	r3, [r9, sl]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    192e:	d01b      	beq.n	1968 <am_hal_ctimer_period_set+0x60>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1930:	f403 70c0 	and.w	r0, r3, #384	; 0x180
    1934:	2880      	cmp	r0, #128	; 0x80
    1936:	d01c      	beq.n	1972 <am_hal_ctimer_period_set+0x6a>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1938:	f64f 77ff 	movw	r7, #65535	; 0xffff
    193c:	2300      	movs	r3, #0
    193e:	45b8      	cmp	r8, r7
        ui32Comp1 = 0;
    1940:	461a      	mov	r2, r3
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1942:	d01d      	beq.n	1980 <am_hal_ctimer_period_set+0x78>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1944:	491b      	ldr	r1, [pc, #108]	; (19b4 <am_hal_ctimer_period_set+0xac>)
    1946:	4588      	cmp	r8, r1
    1948:	d025      	beq.n	1996 <am_hal_ctimer_period_set+0x8e>
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1 >> 16));
    194a:	400a      	ands	r2, r1
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    194c:	b2a0      	uxth	r0, r4
    194e:	4303      	orrs	r3, r0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1950:	ea42 4414 	orr.w	r4, r2, r4, lsr #16
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1954:	f849 3005 	str.w	r3, [r9, r5]
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1958:	f849 4006 	str.w	r4, [r9, r6]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    195c:	9801      	ldr	r0, [sp, #4]
    195e:	f000 f87b 	bl	1a58 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    1962:	b002      	add	sp, #8
    1964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ui32Mode = ui32Mode >> 16;
    1968:	0c19      	lsrs	r1, r3, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    196a:	f401 70c0 	and.w	r0, r1, #384	; 0x180
    196e:	2880      	cmp	r0, #128	; 0x80
    1970:	d110      	bne.n	1994 <am_hal_ctimer_period_set+0x8c>
    1972:	0423      	lsls	r3, r4, #16
        ui32Comp1 = ui32Period;
    1974:	4622      	mov	r2, r4
        ui32Comp0 = ui32Period - ui32OnTime;
    1976:	1be4      	subs	r4, r4, r7
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1978:	f64f 77ff 	movw	r7, #65535	; 0xffff
    197c:	45b8      	cmp	r8, r7
    197e:	d1e1      	bne.n	1944 <am_hal_ctimer_period_set+0x3c>
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1980:	b2a6      	uxth	r6, r4
    1982:	4333      	orrs	r3, r6
    1984:	f849 3005 	str.w	r3, [r9, r5]
    AM_CRITICAL_END_ASM
    1988:	9801      	ldr	r0, [sp, #4]
    198a:	f000 f865 	bl	1a58 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    198e:	b002      	add	sp, #8
    1990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1994:	2300      	movs	r3, #0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1996:	b2a5      	uxth	r5, r4
    1998:	432b      	orrs	r3, r5
    199a:	f849 3006 	str.w	r3, [r9, r6]
    AM_CRITICAL_END_ASM
    199e:	9801      	ldr	r0, [sp, #4]
    19a0:	f000 f85a 	bl	1a58 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    19a4:	b002      	add	sp, #8
    19a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    19aa:	bf00      	nop
    19ac:	40008004 	.word	0x40008004
    19b0:	40008008 	.word	0x40008008
    19b4:	ffff0000 	.word	0xffff0000
    19b8:	4000800c 	.word	0x4000800c

000019bc <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    19bc:	b510      	push	{r4, lr}
    19be:	b082      	sub	sp, #8
    19c0:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    19c2:	f000 f845 	bl	1a50 <am_hal_interrupt_master_disable>

    //
    // Enable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    19c6:	4b05      	ldr	r3, [pc, #20]	; (19dc <am_hal_ctimer_int_enable+0x20>)
    AM_CRITICAL_BEGIN_ASM
    19c8:	9001      	str	r0, [sp, #4]
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    19ca:	6818      	ldr	r0, [r3, #0]
    19cc:	4320      	orrs	r0, r4
    19ce:	6018      	str	r0, [r3, #0]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    19d0:	9801      	ldr	r0, [sp, #4]
    19d2:	f000 f841 	bl	1a58 <am_hal_interrupt_master_set>
} // am_hal_ctimer_int_enable()
    19d6:	b002      	add	sp, #8
    19d8:	bd10      	pop	{r4, pc}
    19da:	bf00      	nop
    19dc:	40008200 	.word	0x40008200

000019e0 <am_hal_ctimer_int_clear>:
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTCLR) = ui32Interrupt;
    19e0:	4b01      	ldr	r3, [pc, #4]	; (19e8 <am_hal_ctimer_int_clear+0x8>)
    19e2:	6018      	str	r0, [r3, #0]
    19e4:	4770      	bx	lr
    19e6:	bf00      	nop
    19e8:	40008208 	.word	0x40008208

000019ec <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    19ec:	e7fe      	b.n	19ec <am_hal_debug_error>
    19ee:	bf00      	nop

000019f0 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    19f0:	4b00      	ldr	r3, [pc, #0]	; (19f4 <am_hal_flash_delay+0x4>)
    19f2:	4718      	bx	r3
    19f4:	0800009d 	.word	0x0800009d

000019f8 <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    19f8:	280f      	cmp	r0, #15
    19fa:	d80b      	bhi.n	1a14 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    19fc:	2805      	cmp	r0, #5
    19fe:	d013      	beq.n	1a28 <am_hal_interrupt_enable+0x30>
    1a00:	2806      	cmp	r0, #6
    1a02:	d017      	beq.n	1a34 <am_hal_interrupt_enable+0x3c>
    1a04:	2804      	cmp	r0, #4
    1a06:	d104      	bne.n	1a12 <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    1a08:	4a0d      	ldr	r2, [pc, #52]	; (1a40 <am_hal_interrupt_enable+0x48>)
    1a0a:	6813      	ldr	r3, [r2, #0]
    1a0c:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    1a10:	6010      	str	r0, [r2, #0]
    1a12:	4770      	bx	lr
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    1a14:	f1a0 0310 	sub.w	r3, r0, #16
    1a18:	f003 0c1f 	and.w	ip, r3, #31
    1a1c:	2001      	movs	r0, #1
    1a1e:	4909      	ldr	r1, [pc, #36]	; (1a44 <am_hal_interrupt_enable+0x4c>)
    1a20:	fa00 f20c 	lsl.w	r2, r0, ip
    1a24:	600a      	str	r2, [r1, #0]
    1a26:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    1a28:	4805      	ldr	r0, [pc, #20]	; (1a40 <am_hal_interrupt_enable+0x48>)
    1a2a:	6801      	ldr	r1, [r0, #0]
    1a2c:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    1a30:	6002      	str	r2, [r0, #0]
            break;
    1a32:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    1a34:	4902      	ldr	r1, [pc, #8]	; (1a40 <am_hal_interrupt_enable+0x48>)
    1a36:	680a      	ldr	r2, [r1, #0]
    1a38:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    1a3c:	600b      	str	r3, [r1, #0]
            break;
    1a3e:	4770      	bx	lr
    1a40:	e000ed24 	.word	0xe000ed24
    1a44:	e000e100 	.word	0xe000e100

00001a48 <am_hal_interrupt_master_enable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1a48:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    1a4c:	b662      	cpsie	i
    __asm("    bx lr");
    1a4e:	4770      	bx	lr

00001a50 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1a50:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    1a54:	b672      	cpsid	i
    __asm("    bx lr");
    1a56:	4770      	bx	lr

00001a58 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    1a58:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    1a5c:	4770      	bx	lr
    1a5e:	bf00      	nop

00001a60 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    1a60:	4b0d      	ldr	r3, [pc, #52]	; (1a98 <am_hal_itm_enable+0x38>)
    1a62:	6818      	ldr	r0, [r3, #0]
    1a64:	07c2      	lsls	r2, r0, #31
    1a66:	d416      	bmi.n	1a96 <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    1a68:	4a0c      	ldr	r2, [pc, #48]	; (1a9c <am_hal_itm_enable+0x3c>)
    1a6a:	6811      	ldr	r1, [r2, #0]
{
    1a6c:	b430      	push	{r4, r5}
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    1a6e:	f041 7480 	orr.w	r4, r1, #16777216	; 0x1000000
    1a72:	6014      	str	r4, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    1a74:	6815      	ldr	r5, [r2, #0]
    1a76:	01eb      	lsls	r3, r5, #7
    1a78:	d5fc      	bpl.n	1a74 <am_hal_itm_enable+0x14>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    1a7a:	4809      	ldr	r0, [pc, #36]	; (1aa0 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    1a7c:	4c09      	ldr	r4, [pc, #36]	; (1aa4 <am_hal_itm_enable+0x44>)
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    1a7e:	4d0a      	ldr	r5, [pc, #40]	; (1aa8 <am_hal_itm_enable+0x48>)
    1a80:	6005      	str	r5, [r0, #0]
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    1a82:	250f      	movs	r5, #15
    1a84:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    1a86:	bc30      	pop	{r4, r5}
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1a88:	4908      	ldr	r1, [pc, #32]	; (1aac <am_hal_itm_enable+0x4c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1a8a:	4b09      	ldr	r3, [pc, #36]	; (1ab0 <am_hal_itm_enable+0x50>)
    1a8c:	4a09      	ldr	r2, [pc, #36]	; (1ab4 <am_hal_itm_enable+0x54>)
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1a8e:	f04f 30ff 	mov.w	r0, #4294967295
    1a92:	6008      	str	r0, [r1, #0]
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1a94:	601a      	str	r2, [r3, #0]
}
    1a96:	4770      	bx	lr
    1a98:	10001164 	.word	0x10001164
    1a9c:	e000edfc 	.word	0xe000edfc
    1aa0:	e0000fb0 	.word	0xe0000fb0
    1aa4:	e0000e40 	.word	0xe0000e40
    1aa8:	c5acce55 	.word	0xc5acce55
    1aac:	e0000e00 	.word	0xe0000e00
    1ab0:	e0000e80 	.word	0xe0000e80
    1ab4:	00150511 	.word	0x00150511

00001ab8 <am_hal_itm_not_busy>:
am_hal_itm_not_busy(void)
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
    while (AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1));
    1ab8:	4a03      	ldr	r2, [pc, #12]	; (1ac8 <am_hal_itm_not_busy+0x10>)
    1aba:	6813      	ldr	r3, [r2, #0]
    1abc:	021b      	lsls	r3, r3, #8
    1abe:	d4fc      	bmi.n	1aba <am_hal_itm_not_busy+0x2>

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1ac0:	f44f 7047 	mov.w	r0, #796	; 0x31c
    1ac4:	f7ff bf94 	b.w	19f0 <am_hal_flash_delay>
    1ac8:	e0000e80 	.word	0xe0000e80

00001acc <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1acc:	7803      	ldrb	r3, [r0, #0]
    1ace:	b1b3      	cbz	r3, 1afe <am_hal_itm_print+0x32>
{
    1ad0:	b410      	push	{r4}
    1ad2:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    1ad4:	2400      	movs	r4, #0
    1ad6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    1ada:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    1adc:	2900      	cmp	r1, #0
    1ade:	d1fa      	bne.n	1ad6 <am_hal_itm_print+0xa>
    1ae0:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    1ae2:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    1ae6:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    1aea:	f8dc 3000 	ldr.w	r3, [ip]
    1aee:	2b00      	cmp	r3, #0
    1af0:	d0fb      	beq.n	1aea <am_hal_itm_print+0x1e>
    while (ui32Length)
    1af2:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    1af4:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    1af8:	d1f5      	bne.n	1ae6 <am_hal_itm_print+0x1a>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    1afa:	f85d 4b04 	ldr.w	r4, [sp], #4
    1afe:	4770      	bx	lr

00001b00 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1b00:	490d      	ldr	r1, [pc, #52]	; (1b38 <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1b02:	4b0e      	ldr	r3, [pc, #56]	; (1b3c <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1b04:	4a0e      	ldr	r2, [pc, #56]	; (1b40 <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1b06:	681b      	ldr	r3, [r3, #0]
{
    1b08:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1b0a:	680d      	ldr	r5, [r1, #0]
    1b0c:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1b0e:	6815      	ldr	r5, [r2, #0]
    1b10:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1b12:	4c0c      	ldr	r4, [pc, #48]	; (1b44 <am_hal_mcuctrl_fault_status+0x44>)
    1b14:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1b16:	4329      	orrs	r1, r5
    1b18:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1b1a:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1b1c:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1b20:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1b22:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1b24:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1b28:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1b2c:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1b2e:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1b30:	6142      	str	r2, [r0, #20]
}
    1b32:	bc70      	pop	{r4, r5, r6}
    1b34:	4770      	bx	lr
    1b36:	bf00      	nop
    1b38:	400201c4 	.word	0x400201c4
    1b3c:	400201cc 	.word	0x400201cc
    1b40:	400201c0 	.word	0x400201c0
    1b44:	400201c8 	.word	0x400201c8

00001b48 <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1b48:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
{
    1b4c:	b430      	push	{r4, r5}
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1b4e:	d03a      	beq.n	1bc6 <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    1b50:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    1b54:	f000 809d 	beq.w	1c92 <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    1b58:	2801      	cmp	r0, #1
    1b5a:	f000 809d 	beq.w	1c98 <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    1b5e:	2803      	cmp	r0, #3
    1b60:	f000 80a6 	beq.w	1cb0 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    1b64:	2807      	cmp	r0, #7
    1b66:	f000 809c 	beq.w	1ca2 <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    1b6a:	280f      	cmp	r0, #15
    1b6c:	f000 80a5 	beq.w	1cba <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    1b70:	281f      	cmp	r0, #31
    1b72:	f000 80b0 	beq.w	1cd6 <am_hal_pwrctrl_memory_enable+0x18e>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    1b76:	283f      	cmp	r0, #63	; 0x3f
    1b78:	f000 80b4 	beq.w	1ce4 <am_hal_pwrctrl_memory_enable+0x19c>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    1b7c:	287f      	cmp	r0, #127	; 0x7f
    1b7e:	f000 80b8 	beq.w	1cf2 <am_hal_pwrctrl_memory_enable+0x1aa>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    1b82:	28ff      	cmp	r0, #255	; 0xff
    1b84:	f000 80a0 	beq.w	1cc8 <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    1b88:	f240 13ff 	movw	r3, #511	; 0x1ff
    1b8c:	4298      	cmp	r0, r3
    1b8e:	f000 80b7 	beq.w	1d00 <am_hal_pwrctrl_memory_enable+0x1b8>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    1b92:	f240 31ff 	movw	r1, #1023	; 0x3ff
    1b96:	4288      	cmp	r0, r1
    1b98:	f000 80b8 	beq.w	1d0c <am_hal_pwrctrl_memory_enable+0x1c4>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    1b9c:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1ba0:	4290      	cmp	r0, r2
    1ba2:	d00e      	beq.n	1bc2 <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    1ba4:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    1ba8:	f000 80b6 	beq.w	1d18 <am_hal_pwrctrl_memory_enable+0x1d0>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    1bac:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    1bb0:	42a0      	cmp	r0, r4
    1bb2:	f000 80b4 	beq.w	1d1e <am_hal_pwrctrl_memory_enable+0x1d6>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    1bb6:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    1bba:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    1bbe:	4560      	cmp	r0, ip
    1bc0:	d132      	bne.n	1c28 <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    1bc2:	495b      	ldr	r1, [pc, #364]	; (1d30 <am_hal_pwrctrl_memory_enable+0x1e8>)
    1bc4:	e066      	b.n	1c94 <am_hal_pwrctrl_memory_enable+0x14c>
    1bc6:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    1bca:	2340      	movs	r3, #64	; 0x40
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    1bcc:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1bce:	4c59      	ldr	r4, [pc, #356]	; (1d34 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1bd0:	6825      	ldr	r5, [r4, #0]
    1bd2:	402a      	ands	r2, r5
    1bd4:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    1bd6:	4a57      	ldr	r2, [pc, #348]	; (1d34 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1bd8:	6814      	ldr	r4, [r2, #0]
    1bda:	4320      	orrs	r0, r4
    1bdc:	6010      	str	r0, [r2, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    1bde:	2b00      	cmp	r3, #0
    1be0:	d029      	beq.n	1c36 <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1be2:	4d55      	ldr	r5, [pc, #340]	; (1d38 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1be4:	6828      	ldr	r0, [r5, #0]
        while ( --i32TOcnt              &&
    1be6:	4218      	tst	r0, r3
    1be8:	bf18      	it	ne
    1bea:	20c6      	movne	r0, #198	; 0xc6
    1bec:	d01f      	beq.n	1c2e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1bee:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1bf0:	421a      	tst	r2, r3
    1bf2:	d01c      	beq.n	1c2e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1bf4:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1bf6:	421c      	tst	r4, r3
    1bf8:	d019      	beq.n	1c2e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1bfa:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1bfc:	421a      	tst	r2, r3
    1bfe:	d016      	beq.n	1c2e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1c00:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1c02:	421c      	tst	r4, r3
    1c04:	d013      	beq.n	1c2e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1c06:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1c08:	421a      	tst	r2, r3
    1c0a:	d010      	beq.n	1c2e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1c0c:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1c0e:	421c      	tst	r4, r3
    1c10:	d00d      	beq.n	1c2e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1c12:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1c14:	421a      	tst	r2, r3
    1c16:	d00a      	beq.n	1c2e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1c18:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1c1a:	421c      	tst	r4, r3
    1c1c:	d007      	beq.n	1c2e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1c1e:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1c20:	421a      	tst	r2, r3
    1c22:	d004      	beq.n	1c2e <am_hal_pwrctrl_memory_enable+0xe6>
    1c24:	3809      	subs	r0, #9
    1c26:	d1e2      	bne.n	1bee <am_hal_pwrctrl_memory_enable+0xa6>
        return false;
    1c28:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    1c2a:	bc30      	pop	{r4, r5}
    1c2c:	4770      	bx	lr
    if ( ui32PwrStatEnMask )
    1c2e:	b911      	cbnz	r1, 1c36 <am_hal_pwrctrl_memory_enable+0xee>
    return true;
    1c30:	2001      	movs	r0, #1
}
    1c32:	bc30      	pop	{r4, r5}
    1c34:	4770      	bx	lr
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c36:	4b40      	ldr	r3, [pc, #256]	; (1d38 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1c38:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1c3a:	ea31 0405 	bics.w	r4, r1, r5
    1c3e:	bf18      	it	ne
    1c40:	24c6      	movne	r4, #198	; 0xc6
    1c42:	d0f5      	beq.n	1c30 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c44:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1c46:	ea31 0000 	bics.w	r0, r1, r0
    1c4a:	d0f1      	beq.n	1c30 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c4c:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1c4e:	ea31 0002 	bics.w	r0, r1, r2
    1c52:	d0ed      	beq.n	1c30 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c54:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1c56:	ea31 0005 	bics.w	r0, r1, r5
    1c5a:	d0e9      	beq.n	1c30 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c5c:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1c5e:	ea31 0000 	bics.w	r0, r1, r0
    1c62:	d0e5      	beq.n	1c30 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c64:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1c66:	ea31 0002 	bics.w	r0, r1, r2
    1c6a:	d0e1      	beq.n	1c30 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c6c:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1c6e:	ea31 0005 	bics.w	r0, r1, r5
    1c72:	d0dd      	beq.n	1c30 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c74:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1c76:	ea31 0000 	bics.w	r0, r1, r0
    1c7a:	d0d9      	beq.n	1c30 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c7c:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1c7e:	ea31 0002 	bics.w	r0, r1, r2
    1c82:	d0d5      	beq.n	1c30 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c84:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1c86:	ea31 0005 	bics.w	r0, r1, r5
    1c8a:	d0d1      	beq.n	1c30 <am_hal_pwrctrl_memory_enable+0xe8>
    1c8c:	3c09      	subs	r4, #9
    1c8e:	d1d9      	bne.n	1c44 <am_hal_pwrctrl_memory_enable+0xfc>
    1c90:	e7ca      	b.n	1c28 <am_hal_pwrctrl_memory_enable+0xe0>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    1c92:	2160      	movs	r1, #96	; 0x60
{
    1c94:	2300      	movs	r3, #0
    1c96:	e79e      	b.n	1bd6 <am_hal_pwrctrl_memory_enable+0x8e>
    1c98:	4a28      	ldr	r2, [pc, #160]	; (1d3c <am_hal_pwrctrl_memory_enable+0x1f4>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1c9a:	4b29      	ldr	r3, [pc, #164]	; (1d40 <am_hal_pwrctrl_memory_enable+0x1f8>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    1c9c:	f44f 7180 	mov.w	r1, #256	; 0x100
    1ca0:	e795      	b.n	1bce <am_hal_pwrctrl_memory_enable+0x86>
    1ca2:	f46f 62ff 	mvn.w	r2, #2040	; 0x7f8
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1ca6:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    1caa:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    1cae:	e78e      	b.n	1bce <am_hal_pwrctrl_memory_enable+0x86>
    1cb0:	4a24      	ldr	r2, [pc, #144]	; (1d44 <am_hal_pwrctrl_memory_enable+0x1fc>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1cb2:	4b25      	ldr	r3, [pc, #148]	; (1d48 <am_hal_pwrctrl_memory_enable+0x200>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    1cb4:	f44f 7140 	mov.w	r1, #768	; 0x300
    1cb8:	e789      	b.n	1bce <am_hal_pwrctrl_memory_enable+0x86>
    1cba:	f46f 62fe 	mvn.w	r2, #2032	; 0x7f0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1cbe:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    1cc2:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    1cc6:	e782      	b.n	1bce <am_hal_pwrctrl_memory_enable+0x86>
    1cc8:	f46f 62e0 	mvn.w	r2, #1792	; 0x700
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1ccc:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    1cd0:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    1cd4:	e77b      	b.n	1bce <am_hal_pwrctrl_memory_enable+0x86>
    1cd6:	f46f 62fc 	mvn.w	r2, #2016	; 0x7e0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1cda:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    1cde:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    1ce2:	e774      	b.n	1bce <am_hal_pwrctrl_memory_enable+0x86>
    1ce4:	f46f 62f8 	mvn.w	r2, #1984	; 0x7c0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1ce8:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    1cec:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    1cf0:	e76d      	b.n	1bce <am_hal_pwrctrl_memory_enable+0x86>
    1cf2:	f46f 62f0 	mvn.w	r2, #1920	; 0x780
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1cf6:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    1cfa:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    1cfe:	e766      	b.n	1bce <am_hal_pwrctrl_memory_enable+0x86>
    1d00:	f46f 62c0 	mvn.w	r2, #1536	; 0x600
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1d04:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    1d08:	4910      	ldr	r1, [pc, #64]	; (1d4c <am_hal_pwrctrl_memory_enable+0x204>)
    1d0a:	e760      	b.n	1bce <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    1d0c:	4910      	ldr	r1, [pc, #64]	; (1d50 <am_hal_pwrctrl_memory_enable+0x208>)
    1d0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1d12:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1d16:	e75a      	b.n	1bce <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1d18:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1d1c:	e7ba      	b.n	1c94 <am_hal_pwrctrl_memory_enable+0x14c>
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1d1e:	4805      	ldr	r0, [pc, #20]	; (1d34 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1d20:	6803      	ldr	r3, [r0, #0]
    1d22:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    1d26:	6001      	str	r1, [r0, #0]
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1d28:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
        ui32PwrStatEnMask  = 0;
    1d2c:	2100      	movs	r1, #0
    1d2e:	e758      	b.n	1be2 <am_hal_pwrctrl_memory_enable+0x9a>
    1d30:	0007ff00 	.word	0x0007ff00
    1d34:	40021010 	.word	0x40021010
    1d38:	40021014 	.word	0x40021014
    1d3c:	fffff801 	.word	0xfffff801
    1d40:	0007fe00 	.word	0x0007fe00
    1d44:	fffff803 	.word	0xfffff803
    1d48:	0007fc00 	.word	0x0007fc00
    1d4c:	0001ff00 	.word	0x0001ff00
    1d50:	0003ff00 	.word	0x0003ff00

00001d54 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1d54:	4b0f      	ldr	r3, [pc, #60]	; (1d94 <am_hal_pwrctrl_bucks_init+0x40>)
    1d56:	681a      	ldr	r2, [r3, #0]
    1d58:	0792      	lsls	r2, r2, #30
    1d5a:	d502      	bpl.n	1d62 <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1d5c:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1d5e:	07c3      	lsls	r3, r0, #31
    1d60:	d40e      	bmi.n	1d80 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1d62:	4b0d      	ldr	r3, [pc, #52]	; (1d98 <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1d64:	4a0b      	ldr	r2, [pc, #44]	; (1d94 <am_hal_pwrctrl_bucks_init+0x40>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1d66:	6819      	ldr	r1, [r3, #0]
    1d68:	f041 0002 	orr.w	r0, r1, #2
    1d6c:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1d6e:	6819      	ldr	r1, [r3, #0]
    1d70:	f041 0001 	orr.w	r0, r1, #1
    1d74:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1d76:	6813      	ldr	r3, [r2, #0]
    1d78:	f003 0103 	and.w	r1, r3, #3
    1d7c:	2903      	cmp	r1, #3
    1d7e:	d1fa      	bne.n	1d76 <am_hal_pwrctrl_bucks_init+0x22>
    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    1d80:	4a04      	ldr	r2, [pc, #16]	; (1d94 <am_hal_pwrctrl_bucks_init+0x40>)
    1d82:	6810      	ldr	r0, [r2, #0]
    1d84:	f000 0303 	and.w	r3, r0, #3
    1d88:	2b03      	cmp	r3, #3
    1d8a:	d1fa      	bne.n	1d82 <am_hal_pwrctrl_bucks_init+0x2e>
    am_hal_flash_delay(200 / 3);
    1d8c:	2042      	movs	r0, #66	; 0x42
    1d8e:	f7ff be2f 	b.w	19f0 <am_hal_flash_delay>
    1d92:	bf00      	nop
    1d94:	40021004 	.word	0x40021004
    1d98:	40021000 	.word	0x40021000

00001d9c <am_hal_pwrctrl_bucks_enable>:
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1d9c:	4b0b      	ldr	r3, [pc, #44]	; (1dcc <am_hal_pwrctrl_bucks_enable+0x30>)
    1d9e:	681a      	ldr	r2, [r3, #0]
    1da0:	0792      	lsls	r2, r2, #30
    1da2:	d502      	bpl.n	1daa <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1da4:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1da6:	07c3      	lsls	r3, r0, #31
    1da8:	d40e      	bmi.n	1dc8 <am_hal_pwrctrl_bucks_enable+0x2c>
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1daa:	4b09      	ldr	r3, [pc, #36]	; (1dd0 <am_hal_pwrctrl_bucks_enable+0x34>)
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1dac:	4a07      	ldr	r2, [pc, #28]	; (1dcc <am_hal_pwrctrl_bucks_enable+0x30>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1dae:	6819      	ldr	r1, [r3, #0]
    1db0:	f041 0002 	orr.w	r0, r1, #2
    1db4:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1db6:	6819      	ldr	r1, [r3, #0]
    1db8:	f041 0001 	orr.w	r0, r1, #1
    1dbc:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1dbe:	6813      	ldr	r3, [r2, #0]
    1dc0:	f003 0103 	and.w	r1, r3, #3
    1dc4:	2903      	cmp	r1, #3
    1dc6:	d1fa      	bne.n	1dbe <am_hal_pwrctrl_bucks_enable+0x22>
    1dc8:	4770      	bx	lr
    1dca:	bf00      	nop
    1dcc:	40021004 	.word	0x40021004
    1dd0:	40021000 	.word	0x40021000

00001dd4 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1dd4:	4b12      	ldr	r3, [pc, #72]	; (1e20 <am_hal_pwrctrl_bucks_disable+0x4c>)
    1dd6:	681a      	ldr	r2, [r3, #0]
    1dd8:	0792      	lsls	r2, r2, #30
    1dda:	d402      	bmi.n	1de2 <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    1ddc:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1dde:	07c3      	lsls	r3, r0, #31
    1de0:	d51c      	bpl.n	1e1c <am_hal_pwrctrl_bucks_disable+0x48>
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1de2:	4910      	ldr	r1, [pc, #64]	; (1e24 <am_hal_pwrctrl_bucks_disable+0x50>)
    1de4:	680b      	ldr	r3, [r1, #0]
    1de6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1dea:	2a20      	cmp	r2, #32
    1dec:	d00b      	beq.n	1e06 <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    1dee:	4b0e      	ldr	r3, [pc, #56]	; (1e28 <am_hal_pwrctrl_bucks_disable+0x54>)
    1df0:	681a      	ldr	r2, [r3, #0]
    1df2:	f022 0002 	bic.w	r0, r2, #2
    1df6:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    1df8:	6819      	ldr	r1, [r3, #0]
    1dfa:	f021 0201 	bic.w	r2, r1, #1
    1dfe:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    1e00:	200a      	movs	r0, #10
    1e02:	f7ff bdf5 	b.w	19f0 <am_hal_flash_delay>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_PWRADC_EN) )
    1e06:	4809      	ldr	r0, [pc, #36]	; (1e2c <am_hal_pwrctrl_bucks_disable+0x58>)
    1e08:	6801      	ldr	r1, [r0, #0]
    if ( isRev_ADC()  &&
    1e0a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1e0e:	d1ee      	bne.n	1dee <am_hal_pwrctrl_bucks_disable+0x1a>
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    1e10:	4805      	ldr	r0, [pc, #20]	; (1e28 <am_hal_pwrctrl_bucks_disable+0x54>)
    1e12:	6803      	ldr	r3, [r0, #0]
    1e14:	f003 0105 	and.w	r1, r3, #5
    1e18:	6001      	str	r1, [r0, #0]
    1e1a:	e7f1      	b.n	1e00 <am_hal_pwrctrl_bucks_disable+0x2c>
    1e1c:	4770      	bx	lr
    1e1e:	bf00      	nop
    1e20:	40021004 	.word	0x40021004
    1e24:	4002000c 	.word	0x4002000c
    1e28:	40021000 	.word	0x40021000
    1e2c:	40021008 	.word	0x40021008

00001e30 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1e30:	4905      	ldr	r1, [pc, #20]	; (1e48 <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1e32:	4a06      	ldr	r2, [pc, #24]	; (1e4c <am_hal_pwrctrl_low_power_init+0x1c>)
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1e34:	680b      	ldr	r3, [r1, #0]
    1e36:	f043 0006 	orr.w	r0, r3, #6
    1e3a:	6008      	str	r0, [r1, #0]
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1e3c:	6811      	ldr	r1, [r2, #0]
    1e3e:	f021 0304 	bic.w	r3, r1, #4
    1e42:	6013      	str	r3, [r2, #0]
    1e44:	4770      	bx	lr
    1e46:	bf00      	nop
    1e48:	40021018 	.word	0x40021018
    1e4c:	40021000 	.word	0x40021000

00001e50 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1e50:	4a05      	ldr	r2, [pc, #20]	; (1e68 <am_hal_rtc_osc_select+0x18>)
    1e52:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    1e54:	b918      	cbnz	r0, 1e5e <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    1e56:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1e5a:	6010      	str	r0, [r2, #0]
    1e5c:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1e5e:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    1e62:	6011      	str	r1, [r2, #0]
    1e64:	4770      	bx	lr
    1e66:	bf00      	nop
    1e68:	4000400c 	.word	0x4000400c

00001e6c <am_hal_rtc_osc_enable>:
am_hal_rtc_osc_enable(void)
{
    //
    // Start the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) &= ~AM_REG_RTC_RTCCTL_RSTOP(1);
    1e6c:	4a02      	ldr	r2, [pc, #8]	; (1e78 <am_hal_rtc_osc_enable+0xc>)
    1e6e:	6813      	ldr	r3, [r2, #0]
    1e70:	f023 0010 	bic.w	r0, r3, #16
    1e74:	6010      	str	r0, [r2, #0]
    1e76:	4770      	bx	lr
    1e78:	40004050 	.word	0x40004050

00001e7c <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    1e7c:	4a02      	ldr	r2, [pc, #8]	; (1e88 <am_hal_rtc_osc_disable+0xc>)
    1e7e:	6813      	ldr	r3, [r2, #0]
    1e80:	f043 0010 	orr.w	r0, r3, #16
    1e84:	6010      	str	r0, [r2, #0]
    1e86:	4770      	bx	lr
    1e88:	40004050 	.word	0x40004050

00001e8c <am_hal_rtc_time_set>:
am_hal_rtc_time_set(am_hal_rtc_time_t *pTime)
{
    //
    // Enable writing to the counters.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_WRTC(1);
    1e8c:	4943      	ldr	r1, [pc, #268]	; (1f9c <am_hal_rtc_time_set+0x110>)
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    1e8e:	4a44      	ldr	r2, [pc, #272]	; (1fa0 <am_hal_rtc_time_set+0x114>)
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_WRTC(1);
    1e90:	680b      	ldr	r3, [r1, #0]
{
    1e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_WRTC(1);
    1e96:	f043 0401 	orr.w	r4, r3, #1
    1e9a:	600c      	str	r4, [r1, #0]

    //
    // Write the RTCLOW register.
    //
    AM_REG(RTC, CTRLOW) =
        AM_REG_RTC_CTRLOW_CTRHR(dec_to_bcd(pTime->ui32Hour))                |
    1e9c:	7f07      	ldrb	r7, [r0, #28]
        AM_REG_RTC_CTRLOW_CTRMIN(dec_to_bcd(pTime->ui32Minute))             |
    1e9e:	f890 8020 	ldrb.w	r8, [r0, #32]
        AM_REG_RTC_CTRLOW_CTRSEC(dec_to_bcd(pTime->ui32Second))             |
        AM_REG_RTC_CTRLOW_CTR100(dec_to_bcd(pTime->ui32Hundredths));
    1ea2:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
    AM_REG(RTC, CTRLOW) =
    1ea6:	4d3f      	ldr	r5, [pc, #252]	; (1fa4 <am_hal_rtc_time_set+0x118>)
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    1ea8:	fba2 3407 	umull	r3, r4, r2, r7
    1eac:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
    1eb0:	eb0c 0e8c 	add.w	lr, ip, ip, lsl #2
    1eb4:	fba2 3408 	umull	r3, r4, r2, r8
    1eb8:	eba7 074e 	sub.w	r7, r7, lr, lsl #1
    1ebc:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    1ec0:	eb0e 048e 	add.w	r4, lr, lr, lsl #2
        AM_REG_RTC_CTRLOW_CTRSEC(dec_to_bcd(pTime->ui32Second))             |
    1ec4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    1ec8:	eba8 0844 	sub.w	r8, r8, r4, lsl #1
    1ecc:	ea48 140e 	orr.w	r4, r8, lr, lsl #4
    1ed0:	ea47 170c 	orr.w	r7, r7, ip, lsl #4
        AM_REG_RTC_CTRLOW_CTRHR(dec_to_bcd(pTime->ui32Hour))                |
    1ed4:	063f      	lsls	r7, r7, #24
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    1ed6:	fba2 ec06 	umull	lr, ip, r2, r6
        AM_REG_RTC_CTRLOW_CTRMIN(dec_to_bcd(pTime->ui32Minute))             |
    1eda:	0424      	lsls	r4, r4, #16
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    1edc:	fba2 8e03 	umull	r8, lr, r2, r3
    1ee0:	ea4f 08de 	mov.w	r8, lr, lsr #3
    1ee4:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
        AM_REG_RTC_CTRLOW_CTRHR(dec_to_bcd(pTime->ui32Hour))                |
    1ee8:	f007 577c 	and.w	r7, r7, #1056964608	; 0x3f000000
        AM_REG_RTC_CTRLOW_CTRMIN(dec_to_bcd(pTime->ui32Minute))             |
    1eec:	f404 04fe 	and.w	r4, r4, #8323072	; 0x7f0000
        AM_REG_RTC_CTRLOW_CTRHR(dec_to_bcd(pTime->ui32Hour))                |
    1ef0:	433c      	orrs	r4, r7
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    1ef2:	eb0c 0e8c 	add.w	lr, ip, ip, lsl #2
    1ef6:	eb08 0788 	add.w	r7, r8, r8, lsl #2
    1efa:	eba6 064e 	sub.w	r6, r6, lr, lsl #1
    1efe:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
    1f02:	ea43 1708 	orr.w	r7, r3, r8, lsl #4
    1f06:	ea46 1c0c 	orr.w	ip, r6, ip, lsl #4
        AM_REG_RTC_CTRLOW_CTRSEC(dec_to_bcd(pTime->ui32Second))             |
    1f0a:	023b      	lsls	r3, r7, #8
        AM_REG_RTC_CTRLOW_CTR100(dec_to_bcd(pTime->ui32Hundredths));
    1f0c:	fa5f f68c 	uxtb.w	r6, ip
        AM_REG_RTC_CTRLOW_CTRSEC(dec_to_bcd(pTime->ui32Second))             |
    1f10:	4326      	orrs	r6, r4
    1f12:	f403 44fe 	and.w	r4, r3, #32512	; 0x7f00
    1f16:	4334      	orrs	r4, r6
    AM_REG(RTC, CTRLOW) =
    1f18:	602c      	str	r4, [r5, #0]
        AM_REG_RTC_CTRUP_CEB((pTime->ui32CenturyEnable))                   |
        AM_REG_RTC_CTRUP_CB((pTime->ui32Century))                          |
        AM_REG_RTC_CTRUP_CTRWKDY((pTime->ui32Weekday))                     |
        AM_REG_RTC_CTRUP_CTRYR(dec_to_bcd((pTime->ui32Year)))              |
        AM_REG_RTC_CTRUP_CTRMO(dec_to_bcd((pTime->ui32Month)))             |
        AM_REG_RTC_CTRUP_CTRDATE(dec_to_bcd((pTime->ui32DayOfMonth)));
    1f1a:	7e05      	ldrb	r5, [r0, #24]
        AM_REG_RTC_CTRUP_CTRYR(dec_to_bcd((pTime->ui32Year)))              |
    1f1c:	7c06      	ldrb	r6, [r0, #16]
        AM_REG_RTC_CTRUP_CTRMO(dec_to_bcd((pTime->ui32Month)))             |
    1f1e:	7d04      	ldrb	r4, [r0, #20]
        AM_REG_RTC_CTRUP_CEB((pTime->ui32CenturyEnable))                   |
    1f20:	6843      	ldr	r3, [r0, #4]
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    1f22:	fba2 7805 	umull	r7, r8, r2, r5
    1f26:	ea4f 0cd8 	mov.w	ip, r8, lsr #3
        AM_REG_RTC_CTRUP_CB((pTime->ui32Century))                          |
    1f2a:	68c7      	ldr	r7, [r0, #12]
        AM_REG_RTC_CTRUP_CTRWKDY((pTime->ui32Weekday))                     |
    1f2c:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    1f30:	eb0c 0e8c 	add.w	lr, ip, ip, lsl #2
        AM_REG_RTC_CTRUP_CB((pTime->ui32Century))                          |
    1f34:	06f8      	lsls	r0, r7, #27
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    1f36:	eba5 054e 	sub.w	r5, r5, lr, lsl #1
        AM_REG_RTC_CTRUP_CB((pTime->ui32Century))                          |
    1f3a:	f000 6700 	and.w	r7, r0, #134217728	; 0x8000000
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    1f3e:	ea45 150c 	orr.w	r5, r5, ip, lsl #4
        AM_REG_RTC_CTRUP_CEB((pTime->ui32CenturyEnable))                   |
    1f42:	071b      	lsls	r3, r3, #28
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    1f44:	fba2 0c06 	umull	r0, ip, r2, r6
    1f48:	fba2 2004 	umull	r2, r0, r2, r4
        AM_REG_RTC_CTRUP_CTRWKDY((pTime->ui32Weekday))                     |
    1f4c:	ea4f 6e08 	mov.w	lr, r8, lsl #24
        AM_REG_RTC_CTRUP_CEB((pTime->ui32CenturyEnable))                   |
    1f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    1f54:	ea4f 08dc 	mov.w	r8, ip, lsr #3
    1f58:	ea4f 0cd0 	mov.w	ip, r0, lsr #3
        AM_REG_RTC_CTRUP_CTRMO(dec_to_bcd((pTime->ui32Month)))             |
    1f5c:	433b      	orrs	r3, r7
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    1f5e:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
        AM_REG_RTC_CTRUP_CTRDATE(dec_to_bcd((pTime->ui32DayOfMonth)));
    1f62:	f005 073f 	and.w	r7, r5, #63	; 0x3f
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    1f66:	eb08 0588 	add.w	r5, r8, r8, lsl #2
    1f6a:	eba4 0440 	sub.w	r4, r4, r0, lsl #1
        AM_REG_RTC_CTRUP_CTRWKDY((pTime->ui32Weekday))                     |
    1f6e:	f00e 62e0 	and.w	r2, lr, #117440512	; 0x7000000
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    1f72:	eba6 0645 	sub.w	r6, r6, r5, lsl #1
    1f76:	ea46 1508 	orr.w	r5, r6, r8, lsl #4
        AM_REG_RTC_CTRUP_CTRMO(dec_to_bcd((pTime->ui32Month)))             |
    1f7a:	4313      	orrs	r3, r2
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    1f7c:	ea44 120c 	orr.w	r2, r4, ip, lsl #4
        AM_REG_RTC_CTRUP_CTRMO(dec_to_bcd((pTime->ui32Month)))             |
    1f80:	433b      	orrs	r3, r7
    1f82:	0216      	lsls	r6, r2, #8
        AM_REG_RTC_CTRUP_CTRYR(dec_to_bcd((pTime->ui32Year)))              |
    1f84:	b2ef      	uxtb	r7, r5
        AM_REG_RTC_CTRUP_CTRMO(dec_to_bcd((pTime->ui32Month)))             |
    1f86:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
    1f8a:	f406 54f8 	and.w	r4, r6, #7936	; 0x1f00
    AM_REG(RTC, CTRUP) =
    1f8e:	4806      	ldr	r0, [pc, #24]	; (1fa8 <am_hal_rtc_time_set+0x11c>)
        AM_REG_RTC_CTRUP_CTRMO(dec_to_bcd((pTime->ui32Month)))             |
    1f90:	4323      	orrs	r3, r4
    AM_REG(RTC, CTRUP) =
    1f92:	6003      	str	r3, [r0, #0]

    //
    // Disable writing to the counters.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_WRTC(0);
    1f94:	680d      	ldr	r5, [r1, #0]
    1f96:	600d      	str	r5, [r1, #0]
    1f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f9c:	40004050 	.word	0x40004050
    1fa0:	cccccccd 	.word	0xcccccccd
    1fa4:	40004040 	.word	0x40004040
    1fa8:	40004044 	.word	0x40004044

00001fac <am_hal_rtc_time_get>:
    uint32_t ui32RTCLow, ui32RTCUp, ui32Value;

    //
    // Read the upper and lower RTC registers.
    //
    ui32RTCLow = AM_REG(RTC, CTRLOW);
    1fac:	4a2f      	ldr	r2, [pc, #188]	; (206c <am_hal_rtc_time_get+0xc0>)
    ui32RTCUp = AM_REG(RTC, CTRUP);
    1fae:	4b30      	ldr	r3, [pc, #192]	; (2070 <am_hal_rtc_time_get+0xc4>)
    ui32RTCLow = AM_REG(RTC, CTRLOW);
    1fb0:	6812      	ldr	r2, [r2, #0]
    ui32RTCUp = AM_REG(RTC, CTRUP);
    1fb2:	6819      	ldr	r1, [r3, #0]
{
    1fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    //
    // Break out the lower word.
    //
    ui32Value =
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRHR_M) >> AM_REG_RTC_CTRLOW_CTRHR_S);
    pTime->ui32Hour = bcd_to_dec(ui32Value);
    1fb6:	f3c2 6e05 	ubfx	lr, r2, #24, #6
  return (((ui8BCDByte & 0xF0) >> 4) * 10) + (ui8BCDByte & 0x0F);
    1fba:	ea4f 1c1e 	mov.w	ip, lr, lsr #4
{
    1fbe:	4603      	mov	r3, r0
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRSEC_M) >> AM_REG_RTC_CTRLOW_CTRSEC_S);
    pTime->ui32Second = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTR100_M) >> AM_REG_RTC_CTRLOW_CTR100_S);
    pTime->ui32Hundredths = bcd_to_dec(ui32Value);
    1fc0:	b2d5      	uxtb	r5, r2
  return (((ui8BCDByte & 0xF0) >> 4) * 10) + (ui8BCDByte & 0x0F);
    1fc2:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
    1fc6:	f00e 0e0f 	and.w	lr, lr, #15
    pTime->ui32Hour = bcd_to_dec(ui32Value);
    1fca:	eb0e 0c40 	add.w	ip, lr, r0, lsl #1
    pTime->ui32Minute = bcd_to_dec(ui32Value);
    1fce:	f3c2 4706 	ubfx	r7, r2, #16, #7
  return (((ui8BCDByte & 0xF0) >> 4) * 10) + (ui8BCDByte & 0x0F);
    1fd2:	0928      	lsrs	r0, r5, #4
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRWKDY_M) >> AM_REG_RTC_CTRUP_CTRWKDY_S);
    pTime->ui32Weekday = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRYR_M) >> AM_REG_RTC_CTRUP_CTRYR_S);
    pTime->ui32Year = bcd_to_dec(ui32Value);
    1fd4:	f3c1 4407 	ubfx	r4, r1, #16, #8
  return (((ui8BCDByte & 0xF0) >> 4) * 10) + (ui8BCDByte & 0x0F);
    1fd8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1fdc:	f005 050f 	and.w	r5, r5, #15
    pTime->ui32Hour = bcd_to_dec(ui32Value);
    1fe0:	f8c3 c01c 	str.w	ip, [r3, #28]
  return (((ui8BCDByte & 0xF0) >> 4) * 10) + (ui8BCDByte & 0x0F);
    1fe4:	ea4f 1c17 	mov.w	ip, r7, lsr #4
    1fe8:	eb05 0e40 	add.w	lr, r5, r0, lsl #1
    1fec:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
    1ff0:	0920      	lsrs	r0, r4, #4
    1ff2:	f007 070f 	and.w	r7, r7, #15

    ui32Value =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRMO_M) >> AM_REG_RTC_CTRUP_CTRMO_S);
    pTime->ui32Month = bcd_to_dec(ui32Value);
    1ff6:	f3c1 2604 	ubfx	r6, r1, #8, #5
  return (((ui8BCDByte & 0xF0) >> 4) * 10) + (ui8BCDByte & 0x0F);
    1ffa:	eb00 0580 	add.w	r5, r0, r0, lsl #2
    pTime->ui32Minute = bcd_to_dec(ui32Value);
    1ffe:	eb07 074c 	add.w	r7, r7, ip, lsl #1
    pTime->ui32Second = bcd_to_dec(ui32Value);
    2002:	f3c2 2206 	ubfx	r2, r2, #8, #7
  return (((ui8BCDByte & 0xF0) >> 4) * 10) + (ui8BCDByte & 0x0F);
    2006:	f004 040f 	and.w	r4, r4, #15
    200a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    pTime->ui32Minute = bcd_to_dec(ui32Value);
    200e:	621f      	str	r7, [r3, #32]
  return (((ui8BCDByte & 0xF0) >> 4) * 10) + (ui8BCDByte & 0x0F);
    2010:	0935      	lsrs	r5, r6, #4
    2012:	0917      	lsrs	r7, r2, #4
    2014:	eb07 0c87 	add.w	ip, r7, r7, lsl #2
    2018:	00af      	lsls	r7, r5, #2

    ui32Value =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRDATE_M) >> AM_REG_RTC_CTRUP_CTRDATE_S);
    pTime->ui32DayOfMonth = bcd_to_dec(ui32Value);
    201a:	f001 003f 	and.w	r0, r1, #63	; 0x3f
  return (((ui8BCDByte & 0xF0) >> 4) * 10) + (ui8BCDByte & 0x0F);
    201e:	443d      	add	r5, r7
    2020:	f006 060f 	and.w	r6, r6, #15
    pTime->ui32Month = bcd_to_dec(ui32Value);
    2024:	eb06 0645 	add.w	r6, r6, r5, lsl #1
  return (((ui8BCDByte & 0xF0) >> 4) * 10) + (ui8BCDByte & 0x0F);
    2028:	f002 020f 	and.w	r2, r2, #15
    202c:	0905      	lsrs	r5, r0, #4
    pTime->ui32Second = bcd_to_dec(ui32Value);
    202e:	eb02 024c 	add.w	r2, r2, ip, lsl #1
  return (((ui8BCDByte & 0xF0) >> 4) * 10) + (ui8BCDByte & 0x0F);
    2032:	eb05 0785 	add.w	r7, r5, r5, lsl #2
    2036:	f000 000f 	and.w	r0, r0, #15
    pTime->ui32DayOfMonth = bcd_to_dec(ui32Value);
    203a:	eb00 0547 	add.w	r5, r0, r7, lsl #1
    pTime->ui32Hundredths = bcd_to_dec(ui32Value);
    203e:	fa5f fe8e 	uxtb.w	lr, lr
    pTime->ui32Year = bcd_to_dec(ui32Value);
    2042:	b2e4      	uxtb	r4, r4
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CEB_M) >> AM_REG_RTC_CTRUP_CEB_S);
    2044:	f3c1 7c00 	ubfx	ip, r1, #28, #1
    pTime->ui32Second = bcd_to_dec(ui32Value);
    2048:	625a      	str	r2, [r3, #36]	; 0x24
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CB_M) >> AM_REG_RTC_CTRUP_CB_S);
    204a:	f3c1 67c0 	ubfx	r7, r1, #27, #1
    ui32Value =
    204e:	f3c1 6202 	ubfx	r2, r1, #24, #3
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTERR_M) >> AM_REG_RTC_CTRUP_CTERR_S);
    2052:	0fc8      	lsrs	r0, r1, #31
    pTime->ui32Hundredths = bcd_to_dec(ui32Value);
    2054:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
    pTime->ui32CenturyEnable =
    2058:	f8c3 c004 	str.w	ip, [r3, #4]
    pTime->ui32Century =
    205c:	60df      	str	r7, [r3, #12]
    pTime->ui32Weekday = bcd_to_dec(ui32Value);
    205e:	609a      	str	r2, [r3, #8]
    pTime->ui32Year = bcd_to_dec(ui32Value);
    2060:	611c      	str	r4, [r3, #16]
    pTime->ui32Month = bcd_to_dec(ui32Value);
    2062:	615e      	str	r6, [r3, #20]
    pTime->ui32ReadError =
    2064:	6018      	str	r0, [r3, #0]
    pTime->ui32DayOfMonth = bcd_to_dec(ui32Value);
    2066:	619d      	str	r5, [r3, #24]
    }
    else
    {
        return 0;
    }
}
    2068:	bdf0      	pop	{r4, r5, r6, r7, pc}
    206a:	bf00      	nop
    206c:	40004040 	.word	0x40004040
    2070:	40004044 	.word	0x40004044

00002074 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    2074:	b5f0      	push	{r4, r5, r6, r7, lr}
    2076:	b083      	sub	sp, #12
    2078:	4604      	mov	r4, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    207a:	f7ff fce9 	bl	1a50 <am_hal_interrupt_master_disable>
    207e:	4605      	mov	r5, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    2080:	b124      	cbz	r4, 208c <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    2082:	4b42      	ldr	r3, [pc, #264]	; (218c <am_hal_sysctrl_sleep+0x118>)
    2084:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    2086:	f010 0c01 	ands.w	ip, r0, #1
    208a:	d00a      	beq.n	20a2 <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    208c:	4a40      	ldr	r2, [pc, #256]	; (2190 <am_hal_sysctrl_sleep+0x11c>)
    208e:	6811      	ldr	r1, [r2, #0]
    2090:	f021 0604 	bic.w	r6, r1, #4
    2094:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    2096:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    2098:	4628      	mov	r0, r5
    209a:	f7ff fcdd 	bl	1a58 <am_hal_interrupt_master_set>
}
    209e:	b003      	add	sp, #12
    20a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    20a2:	4c3b      	ldr	r4, [pc, #236]	; (2190 <am_hal_sysctrl_sleep+0x11c>)
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    20a4:	4b3b      	ldr	r3, [pc, #236]	; (2194 <am_hal_sysctrl_sleep+0x120>)
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    20a6:	6820      	ldr	r0, [r4, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    20a8:	4e3b      	ldr	r6, [pc, #236]	; (2198 <am_hal_sysctrl_sleep+0x124>)
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    20aa:	4f3c      	ldr	r7, [pc, #240]	; (219c <am_hal_sysctrl_sleep+0x128>)
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    20ac:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 21ac <am_hal_sysctrl_sleep+0x138>
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    20b0:	f040 0204 	orr.w	r2, r0, #4
    20b4:	6022      	str	r2, [r4, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    20b6:	681c      	ldr	r4, [r3, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    20b8:	6833      	ldr	r3, [r6, #0]
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    20ba:	f8de 2000 	ldr.w	r2, [lr]
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    20be:	6839      	ldr	r1, [r7, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    20c0:	f004 07f0 	and.w	r7, r4, #240	; 0xf0
                   CHKBUCKZX_REV : 0x0;
    20c4:	2f20      	cmp	r7, #32
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    20c6:	f103 30ff 	add.w	r0, r3, #4294967295
                   CHKBUCKZX_REV : 0x0;
    20ca:	bf14      	ite	ne
    20cc:	2700      	movne	r7, #0
    20ce:	2702      	moveq	r7, #2
                    CHKBUCKZX_TIMER : 0x0;
    20d0:	2803      	cmp	r0, #3
    20d2:	bf98      	it	ls
    20d4:	f04f 0c04 	movls.w	ip, #4
                     CHKBUCKZX_BUCKS : 0x0;
    20d8:	f012 0403 	ands.w	r4, r2, #3
    20dc:	bf18      	it	ne
    20de:	2401      	movne	r4, #1
    g_buckZX_chk |= ( ui32SupplySrc &
    20e0:	f240 53ff 	movw	r3, #1535	; 0x5ff
    g_buckZX_chk |= (ui32SupplySrc &
    20e4:	433c      	orrs	r4, r7
                0x0 : CHKBUCKZX_DEVEN;
    20e6:	ea11 0703 	ands.w	r7, r1, r3
    g_buckZX_chk |= (ui32SupplySrc &
    20ea:	ea44 040c 	orr.w	r4, r4, ip
                0x0 : CHKBUCKZX_DEVEN;
    20ee:	d103      	bne.n	20f8 <am_hal_sysctrl_sleep+0x84>
    g_buckZX_chk |= ( ui32SupplySrc &
    20f0:	f044 0408 	orr.w	r4, r4, #8
        if ( bBuckZX_chk )
    20f4:	2c0f      	cmp	r4, #15
    20f6:	d00a      	beq.n	210e <am_hal_sysctrl_sleep+0x9a>
        AM_ASM_WFI;
    20f8:	bf30      	wfi
        if ( bBuckZX_chk )
    20fa:	2c0f      	cmp	r4, #15
    20fc:	d01a      	beq.n	2134 <am_hal_sysctrl_sleep+0xc0>
            g_bBuckRestoreComplete = true;
    20fe:	4e28      	ldr	r6, [pc, #160]	; (21a0 <am_hal_sysctrl_sleep+0x12c>)
    2100:	2001      	movs	r0, #1
    2102:	7030      	strb	r0, [r6, #0]
    am_hal_interrupt_master_set(ui32Critical);
    2104:	4628      	mov	r0, r5
    2106:	f7ff fca7 	bl	1a58 <am_hal_interrupt_master_set>
}
    210a:	b003      	add	sp, #12
    210c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ui32BuckTimer = g_ui32BuckTimer - 1;
    210e:	6832      	ldr	r2, [r6, #0]
    2110:	1e51      	subs	r1, r2, #1
    2112:	9100      	str	r1, [sp, #0]
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    2114:	9800      	ldr	r0, [sp, #0]
    2116:	f04f 31ff 	mov.w	r1, #4294967295
    211a:	f7ff fbe1 	bl	18e0 <am_hal_ctimer_clear>
            am_hal_ctimer_period_set(ui32BuckTimer,
    211e:	9800      	ldr	r0, [sp, #0]
    2120:	463b      	mov	r3, r7
    2122:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    2126:	f04f 31ff 	mov.w	r1, #4294967295
    212a:	f7ff fbed 	bl	1908 <am_hal_ctimer_period_set>
            am_hal_pwrctrl_bucks_disable();
    212e:	f7ff fe51 	bl	1dd4 <am_hal_pwrctrl_bucks_disable>
    2132:	e7e1      	b.n	20f8 <am_hal_sysctrl_sleep+0x84>
    AM_CRITICAL_BEGIN_ASM
    2134:	f7ff fc8c 	bl	1a50 <am_hal_interrupt_master_disable>
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    2138:	4b1a      	ldr	r3, [pc, #104]	; (21a4 <am_hal_sysctrl_sleep+0x130>)
    AM_CRITICAL_BEGIN_ASM
    213a:	9001      	str	r0, [sp, #4]
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    213c:	681a      	ldr	r2, [r3, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    213e:	681a      	ldr	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    2140:	681f      	ldr	r7, [r3, #0]
    2142:	f027 043c 	bic.w	r4, r7, #60	; 0x3c
    2146:	f044 021c 	orr.w	r2, r4, #28
    214a:	601a      	str	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    214c:	6819      	ldr	r1, [r3, #0]
            g_bBuckRestoreComplete = false;
    214e:	4c14      	ldr	r4, [pc, #80]	; (21a0 <am_hal_sysctrl_sleep+0x12c>)
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    2150:	f421 30f0 	bic.w	r0, r1, #122880	; 0x1e000
    2154:	f440 4760 	orr.w	r7, r0, #57344	; 0xe000
    2158:	601f      	str	r7, [r3, #0]
    AM_CRITICAL_END_ASM
    215a:	9801      	ldr	r0, [sp, #4]
    215c:	f7ff fc7c 	bl	1a58 <am_hal_interrupt_master_set>
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    2160:	201c      	movs	r0, #28
    2162:	f7ff fc45 	bl	19f0 <am_hal_flash_delay>
            am_hal_pwrctrl_bucks_enable();
    2166:	f7ff fe19 	bl	1d9c <am_hal_pwrctrl_bucks_enable>
            ui32BuckTimer = g_ui32BuckTimer - 1;
    216a:	6836      	ldr	r6, [r6, #0]
            g_ui32BuckInputs = 0;
    216c:	490e      	ldr	r1, [pc, #56]	; (21a8 <am_hal_sysctrl_sleep+0x134>)
            g_bBuckRestoreComplete = false;
    216e:	2200      	movs	r2, #0
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2170:	1e73      	subs	r3, r6, #1
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    2172:	204c      	movs	r0, #76	; 0x4c
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2174:	9300      	str	r3, [sp, #0]
            g_bBuckRestoreComplete = false;
    2176:	7022      	strb	r2, [r4, #0]
            g_ui32BuckInputs = 0;
    2178:	600a      	str	r2, [r1, #0]
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    217a:	f7ff fc39 	bl	19f0 <am_hal_flash_delay>
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    217e:	9800      	ldr	r0, [sp, #0]
    2180:	f04f 31ff 	mov.w	r1, #4294967295
    2184:	f7ff fb94 	bl	18b0 <am_hal_ctimer_start>
    2188:	e786      	b.n	2098 <am_hal_sysctrl_sleep+0x24>
    218a:	bf00      	nop
    218c:	40020250 	.word	0x40020250
    2190:	e000ed10 	.word	0xe000ed10
    2194:	4002000c 	.word	0x4002000c
    2198:	10001170 	.word	0x10001170
    219c:	40021008 	.word	0x40021008
    21a0:	10001168 	.word	0x10001168
    21a4:	40020068 	.word	0x40020068
    21a8:	1000116c 	.word	0x1000116c
    21ac:	40021000 	.word	0x40021000

000021b0 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    21b0:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    21b2:	4a23      	ldr	r2, [pc, #140]	; (2240 <am_hal_tpiu_enable+0x90>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    21b4:	6803      	ldr	r3, [r0, #0]
    AM_REG(TPIU, FFCR) = 0;
    21b6:	2100      	movs	r1, #0
    21b8:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    21ba:	b33b      	cbz	r3, 220c <am_hal_tpiu_enable+0x5c>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    21bc:	f5a2 7c40 	sub.w	ip, r2, #768	; 0x300
    21c0:	2101      	movs	r1, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    21c2:	4c20      	ldr	r4, [pc, #128]	; (2244 <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    21c4:	4d20      	ldr	r5, [pc, #128]	; (2248 <am_hal_tpiu_enable+0x98>)
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    21c6:	f8cc 1000 	str.w	r1, [ip]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    21ca:	f5a3 4e61 	sub.w	lr, r3, #57600	; 0xe100
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    21ce:	45a6      	cmp	lr, r4
    21d0:	bf94      	ite	ls
    21d2:	461c      	movls	r4, r3
    21d4:	462c      	movhi	r4, r5
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    21d6:	f7ff fad5 	bl	1784 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    21da:	1c43      	adds	r3, r0, #1
    21dc:	d02d      	beq.n	223a <am_hal_tpiu_enable+0x8a>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    21de:	08c2      	lsrs	r2, r0, #3
    21e0:	fbb2 f3f4 	udiv	r3, r2, r4
    21e4:	1e5d      	subs	r5, r3, #1
    21e6:	b2a8      	uxth	r0, r5
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    21e8:	4a18      	ldr	r2, [pc, #96]	; (224c <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    21ea:	4c19      	ldr	r4, [pc, #100]	; (2250 <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    21ec:	4b19      	ldr	r3, [pc, #100]	; (2254 <am_hal_tpiu_enable+0xa4>)
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    21ee:	491a      	ldr	r1, [pc, #104]	; (2258 <am_hal_tpiu_enable+0xa8>)
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    21f0:	6010      	str	r0, [r2, #0]
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    21f2:	2502      	movs	r5, #2
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    21f4:	2000      	movs	r0, #0
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    21f6:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    21fa:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    21fc:	6008      	str	r0, [r1, #0]
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    21fe:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    2200:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    2204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    2208:	f7ff bbf2 	b.w	19f0 <am_hal_flash_delay>
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    220c:	4c0f      	ldr	r4, [pc, #60]	; (224c <am_hal_tpiu_enable+0x9c>)
    220e:	6905      	ldr	r5, [r0, #16]
    2210:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    2212:	6882      	ldr	r2, [r0, #8]
    2214:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    2218:	68c3      	ldr	r3, [r0, #12]
    221a:	4c10      	ldr	r4, [pc, #64]	; (225c <am_hal_tpiu_enable+0xac>)
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    221c:	490d      	ldr	r1, [pc, #52]	; (2254 <am_hal_tpiu_enable+0xa4>)
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    221e:	1e5d      	subs	r5, r3, #1
    2220:	2201      	movs	r2, #1
    2222:	40aa      	lsls	r2, r5
    2224:	6022      	str	r2, [r4, #0]
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    2226:	6840      	ldr	r0, [r0, #4]
    2228:	680b      	ldr	r3, [r1, #0]
    222a:	4303      	orrs	r3, r0
    222c:	600b      	str	r3, [r1, #0]
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    222e:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    2232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    2236:	f7ff bbdb 	b.w	19f0 <am_hal_flash_delay>
    223a:	2005      	movs	r0, #5
    223c:	e7d4      	b.n	21e8 <am_hal_tpiu_enable+0x38>
    223e:	bf00      	nop
    2240:	e0040304 	.word	0xe0040304
    2244:	001da380 	.word	0x001da380
    2248:	000f4240 	.word	0x000f4240
    224c:	e0040010 	.word	0xe0040010
    2250:	e00400f0 	.word	0xe00400f0
    2254:	40020250 	.word	0x40020250
    2258:	e0040f00 	.word	0xe0040f00
    225c:	e0040004 	.word	0xe0040004

00002260 <am_hal_tpiu_disable>:
am_hal_tpiu_disable(void)
{
    //
    // Disable the TPIU clock source in MCU control.
    //
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    2260:	4b01      	ldr	r3, [pc, #4]	; (2268 <am_hal_tpiu_disable+0x8>)
    2262:	2200      	movs	r2, #0
    2264:	601a      	str	r2, [r3, #0]
    2266:	4770      	bx	lr
    2268:	40020250 	.word	0x40020250

0000226c <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    226c:	4b01      	ldr	r3, [pc, #4]	; (2274 <am_hal_vcomp_disable+0x8>)
    226e:	2237      	movs	r2, #55	; 0x37
    2270:	601a      	str	r2, [r3, #0]
    2272:	4770      	bx	lr
    2274:	4000c008 	.word	0x4000c008
    2278:	646e7553 	.word	0x646e7553
    227c:	00007961 	.word	0x00007961
    2280:	646e6f4d 	.word	0x646e6f4d
    2284:	00007961 	.word	0x00007961
    2288:	73657554 	.word	0x73657554
    228c:	00796164 	.word	0x00796164
    2290:	6e646557 	.word	0x6e646557
    2294:	61647365 	.word	0x61647365
    2298:	00000079 	.word	0x00000079
    229c:	72756854 	.word	0x72756854
    22a0:	79616473 	.word	0x79616473
    22a4:	00000000 	.word	0x00000000
    22a8:	64697246 	.word	0x64697246
    22ac:	00007961 	.word	0x00007961
    22b0:	75746153 	.word	0x75746153
    22b4:	79616472 	.word	0x79616472
    22b8:	00000000 	.word	0x00000000
    22bc:	61766e49 	.word	0x61766e49
    22c0:	2064696c 	.word	0x2064696c
    22c4:	00796164 	.word	0x00796164
    22c8:	756e614a 	.word	0x756e614a
    22cc:	00797261 	.word	0x00797261
    22d0:	72626546 	.word	0x72626546
    22d4:	79726175 	.word	0x79726175
    22d8:	00000000 	.word	0x00000000
    22dc:	6372614d 	.word	0x6372614d
    22e0:	00000068 	.word	0x00000068
    22e4:	69727041 	.word	0x69727041
    22e8:	0000006c 	.word	0x0000006c
    22ec:	0079614d 	.word	0x0079614d
    22f0:	656e754a 	.word	0x656e754a
    22f4:	00000000 	.word	0x00000000
    22f8:	796c754a 	.word	0x796c754a
    22fc:	00000000 	.word	0x00000000
    2300:	75677541 	.word	0x75677541
    2304:	00007473 	.word	0x00007473
    2308:	74706553 	.word	0x74706553
    230c:	65626d65 	.word	0x65626d65
    2310:	00000072 	.word	0x00000072
    2314:	6f74634f 	.word	0x6f74634f
    2318:	00726562 	.word	0x00726562
    231c:	65766f4e 	.word	0x65766f4e
    2320:	7265626d 	.word	0x7265626d
    2324:	00000000 	.word	0x00000000
    2328:	65636544 	.word	0x65636544
    232c:	7265626d 	.word	0x7265626d
    2330:	00000000 	.word	0x00000000
    2334:	61766e49 	.word	0x61766e49
    2338:	2064696c 	.word	0x2064696c
    233c:	746e6f6d 	.word	0x746e6f6d
    2340:	00000068 	.word	0x00000068
    2344:	343a3531 	.word	0x343a3531
    2348:	39333a35 	.word	0x39333a35
    234c:	00000000 	.word	0x00000000
    2350:	2079614d 	.word	0x2079614d
    2354:	32203120 	.word	0x32203120
    2358:	00383130 	.word	0x00383130
    235c:	20435452 	.word	0x20435452
    2360:	6e697250 	.word	0x6e697250
    2364:	78452074 	.word	0x78452074
    2368:	6c706d61 	.word	0x6c706d61
    236c:	00000a65 	.word	0x00000a65
    2370:	73696854 	.word	0x73696854
    2374:	61786520 	.word	0x61786520
    2378:	656c706d 	.word	0x656c706d
    237c:	73617720 	.word	0x73617720
    2380:	69756220 	.word	0x69756220
    2384:	6f20746c 	.word	0x6f20746c
    2388:	7325206e 	.word	0x7325206e
    238c:	20746120 	.word	0x20746120
    2390:	0a2e7325 	.word	0x0a2e7325
    2394:	0000000a 	.word	0x0000000a
    2398:	20744909 	.word	0x20744909
    239c:	6e207369 	.word	0x6e207369
    23a0:	0020776f 	.word	0x0020776f
    23a4:	3a206425 	.word	0x3a206425
    23a8:	00000020 	.word	0x00000020
    23ac:	64323025 	.word	0x64323025
    23b0:	00203a20 	.word	0x00203a20
    23b4:	64323025 	.word	0x64323025
    23b8:	0000002e 	.word	0x0000002e
    23bc:	64323025 	.word	0x64323025
    23c0:	00000020 	.word	0x00000020
    23c4:	00000020 	.word	0x00000020
    23c8:	202c6425 	.word	0x202c6425
    23cc:	00000000 	.word	0x00000000
    23d0:	30253032 	.word	0x30253032
    23d4:	00006432 	.word	0x00006432
    23d8:	0a0a0a0a 	.word	0x0a0a0a0a
    23dc:	0a0a0a0a 	.word	0x0a0a0a0a
    23e0:	0a0a0a0a 	.word	0x0a0a0a0a
    23e4:	0a0a0a0a 	.word	0x0a0a0a0a
    23e8:	00000a0a 	.word	0x00000a0a

000023ec <am_cattr>:
	...
    23f4:	20202000 00002020 00000000 00000000     .     ..........
	...
    240c:	80008020 80808080 00008080 00808000      ...............
    241c:	98989898 98989898 00009898 00000000     ................
    242c:	95959580 85959595 85858585 85858585     ................
    243c:	85858585 85858585 00858585 80800000     ................
    244c:	93939380 83939393 83838383 83838383     ................
    245c:	83838383 83838383 80838383 00808000     ................
	...

000024ec <am_hal_cachectrl_defaults>:
    24ec:	50000001 00010300 00010101 685f6d61     ...P........am_h
    24fc:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    250c:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    251c:	63206469 6b636f6c 74657320 676e6974     id clock setting
    252c:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    253c:	6b6c635f 2e6e6567 00000063              _clkgen.c...
