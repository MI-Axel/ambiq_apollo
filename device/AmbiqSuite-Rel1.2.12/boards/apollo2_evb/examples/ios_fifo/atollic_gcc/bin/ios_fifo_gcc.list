
ios_fifo_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030f0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000048  10001000  000030f0  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000077c  10001048  00003138  00021048  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021048  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000c106  00000000  00000000  0002107f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000028a6  00000000  00000000  0002d185  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000008f0  00000000  00000000  0002fa2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001510  00000000  00000000  0003031b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004d72  00000000  00000000  0003182b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003151  00000000  00000000  0003659d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  000396ee  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001970  00000000  00000000  0003976c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000042db  00000000  00000000  0003b0dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 29 08 00 00 91 08 00 00 97 08 00 00     ....)...........
      10:	97 08 00 00 97 08 00 00 97 08 00 00 00 00 00 00     ................
	...
      2c:	9d 08 00 00 9d 08 00 00 00 00 00 00 9d 08 00 00     ................
      3c:	9d 08 00 00 9d 08 00 00 9d 08 00 00 9d 08 00 00     ................
      4c:	9d 08 00 00 89 05 00 00 15 05 00 00 9d 08 00 00     ................
      5c:	9d 08 00 00 9d 08 00 00 9d 08 00 00 9d 08 00 00     ................
      6c:	9d 08 00 00 9d 08 00 00 61 01 00 00 9d 08 00 00     ........a.......
      7c:	9d 08 00 00 9d 08 00 00 9d 08 00 00 9d 08 00 00     ................
      8c:	9d 08 00 00 9d 08 00 00 9d 08 00 00 9d 08 00 00     ................
      9c:	9d 08 00 00 9d 08 00 00 9d 08 00 00 9d 08 00 00     ................
      ac:	9d 08 00 00 9d 08 00 00 9d 08 00 00 9d 08 00 00     ................
      bc:	9d 08 00 00                                         ....

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <am_ctimer_isr>:
};

// Timer Interrupt Service Routine (ISR)
void
am_ctimer_isr(void)
{
     160:	b580      	push	{r7, lr}
     162:	b082      	sub	sp, #8
     164:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    ui32Status = am_hal_ctimer_int_status_get(false);
     166:	2000      	movs	r0, #0
     168:	f001 fd04 	bl	1b74 <am_hal_ctimer_int_status_get>
     16c:	6078      	str	r0, [r7, #4]
    am_hal_ctimer_int_clear(ui32Status);
     16e:	6878      	ldr	r0, [r7, #4]
     170:	f001 fcfa 	bl	1b68 <am_hal_ctimer_int_clear>

    am_hal_ctimer_int_service(ui32Status);
     174:	6878      	ldr	r0, [r7, #4]
     176:	f001 fb5d 	bl	1834 <am_hal_ctimer_int_service>
}
     17a:	bf00      	nop
     17c:	3708      	adds	r7, #8
     17e:	46bd      	mov	sp, r7
     180:	bd80      	pop	{r7, pc}
	...

00000184 <timer0_handler>:

// Emulate Sensor0 New Data
void
timer0_handler(void)
{
     184:	b480      	push	{r7}
     186:	af00      	add	r7, sp, #0

    // Inform main loop of sensor 0 Data availability
    g_bSensor0Data = true;
     188:	4b03      	ldr	r3, [pc, #12]	; (198 <timer0_handler+0x14>)
     18a:	2201      	movs	r2, #1
     18c:	701a      	strb	r2, [r3, #0]
}
     18e:	bf00      	nop
     190:	46bd      	mov	sp, r7
     192:	f85d 7b04 	ldr.w	r7, [sp], #4
     196:	4770      	bx	lr
     198:	10001165 	.word	0x10001165

0000019c <timer1_handler>:

// Emulate Sensor1 New Data
void
timer1_handler(void)
{
     19c:	b480      	push	{r7}
     19e:	af00      	add	r7, sp, #0
    // Inform main loop of sensor 1 Data availability
    g_bSensor1Data = true;
     1a0:	4b03      	ldr	r3, [pc, #12]	; (1b0 <timer1_handler+0x14>)
     1a2:	2201      	movs	r2, #1
     1a4:	701a      	strb	r2, [r3, #0]
}
     1a6:	bf00      	nop
     1a8:	46bd      	mov	sp, r7
     1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
     1ae:	4770      	bx	lr
     1b0:	10001767 	.word	0x10001767

000001b4 <stop_sensors>:

void
stop_sensors(void)
{
     1b4:	b580      	push	{r7, lr}
     1b6:	af00      	add	r7, sp, #0
    //
    // Stop timer A0
    //
    am_hal_ctimer_stop(0, AM_HAL_CTIMER_TIMERA);
     1b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
     1bc:	2000      	movs	r0, #0
     1be:	f001 fc3d 	bl	1a3c <am_hal_ctimer_stop>
    //
    // Stop timer A1
    //
    am_hal_ctimer_stop(1, AM_HAL_CTIMER_TIMERA);
     1c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
     1c6:	2001      	movs	r0, #1
     1c8:	f001 fc38 	bl	1a3c <am_hal_ctimer_stop>
}
     1cc:	bf00      	nop
     1ce:	bd80      	pop	{r7, pc}

000001d0 <start_sensors>:

void
start_sensors(void)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	af00      	add	r7, sp, #0
    stop_sensors(); // Just in case host died without sending STOP last time
     1d4:	f7ff ffee 	bl	1b4 <stop_sensors>
    // Initialize Data Buffer Index
    g_sendIdx = 0;
     1d8:	4b08      	ldr	r3, [pc, #32]	; (1fc <start_sensors+0x2c>)
     1da:	2200      	movs	r2, #0
     1dc:	601a      	str	r2, [r3, #0]
    //
    // Start timer A0
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
     1de:	f64f 71ff 	movw	r1, #65535	; 0xffff
     1e2:	2000      	movs	r0, #0
     1e4:	f001 fc12 	bl	1a0c <am_hal_ctimer_start>
    //
    // Start timer A1
    //
    am_hal_ctimer_start(1, AM_HAL_CTIMER_TIMERA);
     1e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
     1ec:	2001      	movs	r0, #1
     1ee:	f001 fc0d 	bl	1a0c <am_hal_ctimer_start>
    g_iosState = AM_IOSTEST_SLAVE_STATE_NODATA;
     1f2:	4b03      	ldr	r3, [pc, #12]	; (200 <start_sensors+0x30>)
     1f4:	2200      	movs	r2, #0
     1f6:	701a      	strb	r2, [r3, #0]
}
     1f8:	bf00      	nop
     1fa:	bd80      	pop	{r7, pc}
     1fc:	10001048 	.word	0x10001048
     200:	10001164 	.word	0x10001164

00000204 <init_sensors>:

void
init_sensors(void)
{
     204:	b580      	push	{r7, lr}
     206:	b082      	sub	sp, #8
     208:	af00      	add	r7, sp, #0
    uint32_t ui32Period;

    //
    // Set up timer A0 & A1.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
     20a:	f64f 71ff 	movw	r1, #65535	; 0xffff
     20e:	2000      	movs	r0, #0
     210:	f001 fc2a 	bl	1a68 <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer);
     214:	491f      	ldr	r1, [pc, #124]	; (294 <init_sensors+0x90>)
     216:	2000      	movs	r0, #0
     218:	f001 fb86 	bl	1928 <am_hal_ctimer_config>
    am_hal_ctimer_clear(1, AM_HAL_CTIMER_TIMERA);
     21c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     220:	2001      	movs	r0, #1
     222:	f001 fc21 	bl	1a68 <am_hal_ctimer_clear>
    am_hal_ctimer_config(1, &g_sTimer);
     226:	491b      	ldr	r1, [pc, #108]	; (294 <init_sensors+0x90>)
     228:	2001      	movs	r0, #1
     22a:	f001 fb7d 	bl	1928 <am_hal_ctimer_config>

    //
    // Set up timerA0 for Sensor 0 Freq
    //
    ui32Period = 12000 / SENSOR0_FREQ ;
     22e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     232:	607b      	str	r3, [r7, #4]
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ui32Period,
     234:	687b      	ldr	r3, [r7, #4]
     236:	085b      	lsrs	r3, r3, #1
     238:	687a      	ldr	r2, [r7, #4]
     23a:	f64f 71ff 	movw	r1, #65535	; 0xffff
     23e:	2000      	movs	r0, #0
     240:	f001 fc26 	bl	1a90 <am_hal_ctimer_period_set>
                             (ui32Period >> 1));
    //
    // Set up timerA1 for Sensor 1 Freq
    //
    ui32Period = 12000 / SENSOR1_FREQ ;
     244:	f240 63b2 	movw	r3, #1714	; 0x6b2
     248:	607b      	str	r3, [r7, #4]
    am_hal_ctimer_period_set(1, AM_HAL_CTIMER_TIMERA, ui32Period,
     24a:	687b      	ldr	r3, [r7, #4]
     24c:	085b      	lsrs	r3, r3, #1
     24e:	687a      	ldr	r2, [r7, #4]
     250:	f64f 71ff 	movw	r1, #65535	; 0xffff
     254:	2001      	movs	r0, #1
     256:	f001 fc1b 	bl	1a90 <am_hal_ctimer_period_set>
                             (ui32Period >> 1));

    //
    // Clear the timer Interrupt
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
     25a:	2001      	movs	r0, #1
     25c:	f001 fc84 	bl	1b68 <am_hal_ctimer_int_clear>
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA1);
     260:	2004      	movs	r0, #4
     262:	f001 fc81 	bl	1b68 <am_hal_ctimer_int_clear>

    //
    // Enable the timer Interrupt.
    //
    am_hal_ctimer_int_register(AM_HAL_CTIMER_INT_TIMERA0,
     266:	490c      	ldr	r1, [pc, #48]	; (298 <init_sensors+0x94>)
     268:	2001      	movs	r0, #1
     26a:	f001 fafb 	bl	1864 <am_hal_ctimer_int_register>
                               timer0_handler);
    am_hal_ctimer_int_register(AM_HAL_CTIMER_INT_TIMERA1,
     26e:	490b      	ldr	r1, [pc, #44]	; (29c <init_sensors+0x98>)
     270:	2004      	movs	r0, #4
     272:	f001 faf7 	bl	1864 <am_hal_ctimer_int_register>
                               timer1_handler);
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
     276:	2001      	movs	r0, #1
     278:	f001 fc64 	bl	1b44 <am_hal_ctimer_int_enable>
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA1);
     27c:	2004      	movs	r0, #4
     27e:	f001 fc61 	bl	1b44 <am_hal_ctimer_int_enable>

    //
    // Enable the timer interrupt in the NVIC.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_CTIMER);
     282:	201d      	movs	r0, #29
     284:	f001 fc96 	bl	1bb4 <am_hal_interrupt_enable>
    am_hal_interrupt_master_enable();
     288:	f001 fcbc 	bl	1c04 <am_hal_interrupt_master_enable>
}
     28c:	bf00      	nop
     28e:	3708      	adds	r7, #8
     290:	46bd      	mov	sp, r7
     292:	bd80      	pop	{r7, pc}
     294:	10001030 	.word	0x10001030
     298:	00000185 	.word	0x00000185
     29c:	0000019d 	.word	0x0000019d

000002a0 <ios_set_up>:
// Configure the SPI slave.
//
//*****************************************************************************
static void
ios_set_up(bool bSpi)
{
     2a0:	b580      	push	{r7, lr}
     2a2:	b08a      	sub	sp, #40	; 0x28
     2a4:	af00      	add	r7, sp, #0
     2a6:	4603      	mov	r3, r0
     2a8:	71fb      	strb	r3, [r7, #7]
    if (bSpi)
     2aa:	79fb      	ldrb	r3, [r7, #7]
     2ac:	2b00      	cmp	r3, #0
     2ae:	f000 808c 	beq.w	3ca <ios_set_up+0x12a>
    {
        // Configure SPI interface
        am_hal_gpio_pin_config(AM_BSP_GPIO_IOS_SCK, AM_BSP_GPIO_CFG_IOS_SCK);
     2b2:	f001 fcab 	bl	1c0c <am_hal_interrupt_master_disable>
     2b6:	4603      	mov	r3, r0
     2b8:	627b      	str	r3, [r7, #36]	; 0x24
     2ba:	4b88      	ldr	r3, [pc, #544]	; (4dc <ios_set_up+0x23c>)
     2bc:	2273      	movs	r2, #115	; 0x73
     2be:	601a      	str	r2, [r3, #0]
     2c0:	4a87      	ldr	r2, [pc, #540]	; (4e0 <ios_set_up+0x240>)
     2c2:	4b87      	ldr	r3, [pc, #540]	; (4e0 <ios_set_up+0x240>)
     2c4:	681b      	ldr	r3, [r3, #0]
     2c6:	f023 0307 	bic.w	r3, r3, #7
     2ca:	6013      	str	r3, [r2, #0]
     2cc:	4a85      	ldr	r2, [pc, #532]	; (4e4 <ios_set_up+0x244>)
     2ce:	4b85      	ldr	r3, [pc, #532]	; (4e4 <ios_set_up+0x244>)
     2d0:	681b      	ldr	r3, [r3, #0]
     2d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     2d6:	f043 030a 	orr.w	r3, r3, #10
     2da:	6013      	str	r3, [r2, #0]
     2dc:	4a82      	ldr	r2, [pc, #520]	; (4e8 <ios_set_up+0x248>)
     2de:	4b82      	ldr	r3, [pc, #520]	; (4e8 <ios_set_up+0x248>)
     2e0:	681b      	ldr	r3, [r3, #0]
     2e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     2e6:	6013      	str	r3, [r2, #0]
     2e8:	4b7c      	ldr	r3, [pc, #496]	; (4dc <ios_set_up+0x23c>)
     2ea:	2200      	movs	r2, #0
     2ec:	601a      	str	r2, [r3, #0]
     2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     2f0:	4618      	mov	r0, r3
     2f2:	f001 fc8f 	bl	1c14 <am_hal_interrupt_master_set>
        am_hal_gpio_pin_config(AM_BSP_GPIO_IOS_MISO, AM_BSP_GPIO_CFG_IOS_MISO);
     2f6:	f001 fc89 	bl	1c0c <am_hal_interrupt_master_disable>
     2fa:	4603      	mov	r3, r0
     2fc:	623b      	str	r3, [r7, #32]
     2fe:	4b77      	ldr	r3, [pc, #476]	; (4dc <ios_set_up+0x23c>)
     300:	2273      	movs	r2, #115	; 0x73
     302:	601a      	str	r2, [r3, #0]
     304:	4a76      	ldr	r2, [pc, #472]	; (4e0 <ios_set_up+0x240>)
     306:	4b76      	ldr	r3, [pc, #472]	; (4e0 <ios_set_up+0x240>)
     308:	681b      	ldr	r3, [r3, #0]
     30a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     30e:	6013      	str	r3, [r2, #0]
     310:	4a74      	ldr	r2, [pc, #464]	; (4e4 <ios_set_up+0x244>)
     312:	4b74      	ldr	r3, [pc, #464]	; (4e4 <ios_set_up+0x244>)
     314:	681b      	ldr	r3, [r3, #0]
     316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     31a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     31e:	6013      	str	r3, [r2, #0]
     320:	4a71      	ldr	r2, [pc, #452]	; (4e8 <ios_set_up+0x248>)
     322:	4b71      	ldr	r3, [pc, #452]	; (4e8 <ios_set_up+0x248>)
     324:	681b      	ldr	r3, [r3, #0]
     326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     32a:	6013      	str	r3, [r2, #0]
     32c:	4b6b      	ldr	r3, [pc, #428]	; (4dc <ios_set_up+0x23c>)
     32e:	2200      	movs	r2, #0
     330:	601a      	str	r2, [r3, #0]
     332:	6a3b      	ldr	r3, [r7, #32]
     334:	4618      	mov	r0, r3
     336:	f001 fc6d 	bl	1c14 <am_hal_interrupt_master_set>
        am_hal_gpio_pin_config(AM_BSP_GPIO_IOS_MOSI, AM_BSP_GPIO_CFG_IOS_MOSI);
     33a:	f001 fc67 	bl	1c0c <am_hal_interrupt_master_disable>
     33e:	4603      	mov	r3, r0
     340:	61fb      	str	r3, [r7, #28]
     342:	4b66      	ldr	r3, [pc, #408]	; (4dc <ios_set_up+0x23c>)
     344:	2273      	movs	r2, #115	; 0x73
     346:	601a      	str	r2, [r3, #0]
     348:	4a65      	ldr	r2, [pc, #404]	; (4e0 <ios_set_up+0x240>)
     34a:	4b65      	ldr	r3, [pc, #404]	; (4e0 <ios_set_up+0x240>)
     34c:	681b      	ldr	r3, [r3, #0]
     34e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     352:	6013      	str	r3, [r2, #0]
     354:	4a63      	ldr	r2, [pc, #396]	; (4e4 <ios_set_up+0x244>)
     356:	4b63      	ldr	r3, [pc, #396]	; (4e4 <ios_set_up+0x244>)
     358:	681b      	ldr	r3, [r3, #0]
     35a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     35e:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
     362:	6013      	str	r3, [r2, #0]
     364:	4a60      	ldr	r2, [pc, #384]	; (4e8 <ios_set_up+0x248>)
     366:	4b60      	ldr	r3, [pc, #384]	; (4e8 <ios_set_up+0x248>)
     368:	681b      	ldr	r3, [r3, #0]
     36a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     36e:	6013      	str	r3, [r2, #0]
     370:	4b5a      	ldr	r3, [pc, #360]	; (4dc <ios_set_up+0x23c>)
     372:	2200      	movs	r2, #0
     374:	601a      	str	r2, [r3, #0]
     376:	69fb      	ldr	r3, [r7, #28]
     378:	4618      	mov	r0, r3
     37a:	f001 fc4b 	bl	1c14 <am_hal_interrupt_master_set>
        am_hal_gpio_pin_config(AM_BSP_GPIO_IOS_nCE, AM_BSP_GPIO_CFG_IOS_nCE);
     37e:	f001 fc45 	bl	1c0c <am_hal_interrupt_master_disable>
     382:	4603      	mov	r3, r0
     384:	61bb      	str	r3, [r7, #24]
     386:	4b55      	ldr	r3, [pc, #340]	; (4dc <ios_set_up+0x23c>)
     388:	2273      	movs	r2, #115	; 0x73
     38a:	601a      	str	r2, [r3, #0]
     38c:	4a54      	ldr	r2, [pc, #336]	; (4e0 <ios_set_up+0x240>)
     38e:	4b54      	ldr	r3, [pc, #336]	; (4e0 <ios_set_up+0x240>)
     390:	681b      	ldr	r3, [r3, #0]
     392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
     396:	6013      	str	r3, [r2, #0]
     398:	4a52      	ldr	r2, [pc, #328]	; (4e4 <ios_set_up+0x244>)
     39a:	4b52      	ldr	r3, [pc, #328]	; (4e4 <ios_set_up+0x244>)
     39c:	681b      	ldr	r3, [r3, #0]
     39e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     3a2:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
     3a6:	6013      	str	r3, [r2, #0]
     3a8:	4a4f      	ldr	r2, [pc, #316]	; (4e8 <ios_set_up+0x248>)
     3aa:	4b4f      	ldr	r3, [pc, #316]	; (4e8 <ios_set_up+0x248>)
     3ac:	681b      	ldr	r3, [r3, #0]
     3ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     3b2:	6013      	str	r3, [r2, #0]
     3b4:	4b49      	ldr	r3, [pc, #292]	; (4dc <ios_set_up+0x23c>)
     3b6:	2200      	movs	r2, #0
     3b8:	601a      	str	r2, [r3, #0]
     3ba:	69bb      	ldr	r3, [r7, #24]
     3bc:	4618      	mov	r0, r3
     3be:	f001 fc29 	bl	1c14 <am_hal_interrupt_master_set>
        //
        // Configure the IOS interface and LRAM structure.
        //
        am_hal_ios_config(&g_sIOSSpiConfig);
     3c2:	484a      	ldr	r0, [pc, #296]	; (4ec <ios_set_up+0x24c>)
     3c4:	f001 fc38 	bl	1c38 <am_hal_ios_config>
     3c8:	e048      	b.n	45c <ios_set_up+0x1bc>
    }
    else
    {
        // Configure I2C interface
        am_hal_gpio_pin_config(AM_BSP_GPIO_IOS_SCL, AM_BSP_GPIO_CFG_IOS_SCL);
     3ca:	f001 fc1f 	bl	1c0c <am_hal_interrupt_master_disable>
     3ce:	4603      	mov	r3, r0
     3d0:	617b      	str	r3, [r7, #20]
     3d2:	4b42      	ldr	r3, [pc, #264]	; (4dc <ios_set_up+0x23c>)
     3d4:	2273      	movs	r2, #115	; 0x73
     3d6:	601a      	str	r2, [r3, #0]
     3d8:	4a41      	ldr	r2, [pc, #260]	; (4e0 <ios_set_up+0x240>)
     3da:	4b41      	ldr	r3, [pc, #260]	; (4e0 <ios_set_up+0x240>)
     3dc:	681b      	ldr	r3, [r3, #0]
     3de:	f023 0307 	bic.w	r3, r3, #7
     3e2:	6013      	str	r3, [r2, #0]
     3e4:	4a3f      	ldr	r2, [pc, #252]	; (4e4 <ios_set_up+0x244>)
     3e6:	4b3f      	ldr	r3, [pc, #252]	; (4e4 <ios_set_up+0x244>)
     3e8:	681b      	ldr	r3, [r3, #0]
     3ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     3ee:	f043 0302 	orr.w	r3, r3, #2
     3f2:	6013      	str	r3, [r2, #0]
     3f4:	4a3c      	ldr	r2, [pc, #240]	; (4e8 <ios_set_up+0x248>)
     3f6:	4b3c      	ldr	r3, [pc, #240]	; (4e8 <ios_set_up+0x248>)
     3f8:	681b      	ldr	r3, [r3, #0]
     3fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     3fe:	6013      	str	r3, [r2, #0]
     400:	4b36      	ldr	r3, [pc, #216]	; (4dc <ios_set_up+0x23c>)
     402:	2200      	movs	r2, #0
     404:	601a      	str	r2, [r3, #0]
     406:	697b      	ldr	r3, [r7, #20]
     408:	4618      	mov	r0, r3
     40a:	f001 fc03 	bl	1c14 <am_hal_interrupt_master_set>
        am_hal_gpio_pin_config(AM_BSP_GPIO_IOS_SDA, AM_BSP_GPIO_CFG_IOS_SDA);
     40e:	f001 fbfd 	bl	1c0c <am_hal_interrupt_master_disable>
     412:	4603      	mov	r3, r0
     414:	613b      	str	r3, [r7, #16]
     416:	4b31      	ldr	r3, [pc, #196]	; (4dc <ios_set_up+0x23c>)
     418:	2273      	movs	r2, #115	; 0x73
     41a:	601a      	str	r2, [r3, #0]
     41c:	4a30      	ldr	r2, [pc, #192]	; (4e0 <ios_set_up+0x240>)
     41e:	4b30      	ldr	r3, [pc, #192]	; (4e0 <ios_set_up+0x240>)
     420:	681b      	ldr	r3, [r3, #0]
     422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     42a:	6013      	str	r3, [r2, #0]
     42c:	4a2d      	ldr	r2, [pc, #180]	; (4e4 <ios_set_up+0x244>)
     42e:	4b2d      	ldr	r3, [pc, #180]	; (4e4 <ios_set_up+0x244>)
     430:	681b      	ldr	r3, [r3, #0]
     432:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     43a:	6013      	str	r3, [r2, #0]
     43c:	4a2a      	ldr	r2, [pc, #168]	; (4e8 <ios_set_up+0x248>)
     43e:	4b2a      	ldr	r3, [pc, #168]	; (4e8 <ios_set_up+0x248>)
     440:	681b      	ldr	r3, [r3, #0]
     442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     446:	6013      	str	r3, [r2, #0]
     448:	4b24      	ldr	r3, [pc, #144]	; (4dc <ios_set_up+0x23c>)
     44a:	2200      	movs	r2, #0
     44c:	601a      	str	r2, [r3, #0]
     44e:	693b      	ldr	r3, [r7, #16]
     450:	4618      	mov	r0, r3
     452:	f001 fbdf 	bl	1c14 <am_hal_interrupt_master_set>
        //
        // Configure the IOS interface and LRAM structure.
        //
        am_hal_ios_config(&g_sIOSI2cConfig);
     456:	4826      	ldr	r0, [pc, #152]	; (4f0 <ios_set_up+0x250>)
     458:	f001 fbee 	bl	1c38 <am_hal_ios_config>

    //
    // Clear out any IOS register-access interrupts that may be active, and
    // enable interrupts for the registers we're interested in.
    //
    am_hal_ios_access_int_clear(AM_HAL_IOS_ACCESS_INT_ALL);
     45c:	f04f 30ff 	mov.w	r0, #4294967295
     460:	f001 fc4a 	bl	1cf8 <am_hal_ios_access_int_clear>
    am_hal_ios_int_clear(AM_HAL_IOS_INT_ALL);
     464:	f04f 30ff 	mov.w	r0, #4294967295
     468:	f001 fc62 	bl	1d30 <am_hal_ios_int_clear>
    am_hal_ios_access_int_enable(AM_HAL_IOS_ACCESS_INT_00);
     46c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
     470:	f001 fc3a 	bl	1ce8 <am_hal_ios_access_int_enable>
    am_hal_ios_int_enable(AM_HAL_IOS_INT_ERR | AM_HAL_IOS_INT_FSIZE);
     474:	200f      	movs	r0, #15
     476:	f001 fc53 	bl	1d20 <am_hal_ios_int_enable>

    // Preparation of FIFO
    am_hal_ios_fifo_buffer_init( &g_pui8TxFifoBuffer[0], AM_IOS_TX_BUFSIZE_MAX);
     47a:	f240 31ff 	movw	r1, #1023	; 0x3ff
     47e:	481d      	ldr	r0, [pc, #116]	; (4f4 <ios_set_up+0x254>)
     480:	f002 f9f0 	bl	2864 <am_hal_ios_fifo_buffer_init>

    //
    // Set the bit in the NVIC to accept access interrupts from the IO Slave.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_IOSACC);
     484:	2015      	movs	r0, #21
     486:	f001 fb95 	bl	1bb4 <am_hal_interrupt_enable>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_IOSLAVE);
     48a:	2014      	movs	r0, #20
     48c:	f001 fb92 	bl	1bb4 <am_hal_interrupt_enable>

    // Set up the IOSINT interrupt pin
    am_hal_gpio_pin_config(AM_BSP_GPIO_IOS_INT, AM_BSP_GPIO_CFG_IOS_INT);
     490:	f001 fbbc 	bl	1c0c <am_hal_interrupt_master_disable>
     494:	4603      	mov	r3, r0
     496:	60fb      	str	r3, [r7, #12]
     498:	4b10      	ldr	r3, [pc, #64]	; (4dc <ios_set_up+0x23c>)
     49a:	2273      	movs	r2, #115	; 0x73
     49c:	601a      	str	r2, [r3, #0]
     49e:	4a10      	ldr	r2, [pc, #64]	; (4e0 <ios_set_up+0x240>)
     4a0:	4b0f      	ldr	r3, [pc, #60]	; (4e0 <ios_set_up+0x240>)
     4a2:	681b      	ldr	r3, [r3, #0]
     4a4:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
     4a8:	6013      	str	r3, [r2, #0]
     4aa:	4a13      	ldr	r2, [pc, #76]	; (4f8 <ios_set_up+0x258>)
     4ac:	4b12      	ldr	r3, [pc, #72]	; (4f8 <ios_set_up+0x258>)
     4ae:	681b      	ldr	r3, [r3, #0]
     4b0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     4b4:	f043 0308 	orr.w	r3, r3, #8
     4b8:	6013      	str	r3, [r2, #0]
     4ba:	4a10      	ldr	r2, [pc, #64]	; (4fc <ios_set_up+0x25c>)
     4bc:	4b0f      	ldr	r3, [pc, #60]	; (4fc <ios_set_up+0x25c>)
     4be:	681b      	ldr	r3, [r3, #0]
     4c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     4c4:	6013      	str	r3, [r2, #0]
     4c6:	4b05      	ldr	r3, [pc, #20]	; (4dc <ios_set_up+0x23c>)
     4c8:	2200      	movs	r2, #0
     4ca:	601a      	str	r2, [r3, #0]
     4cc:	68fb      	ldr	r3, [r7, #12]
     4ce:	4618      	mov	r0, r3
     4d0:	f001 fba0 	bl	1c14 <am_hal_interrupt_master_set>

}
     4d4:	bf00      	nop
     4d6:	3728      	adds	r7, #40	; 0x28
     4d8:	46bd      	mov	sp, r7
     4da:	bd80      	pop	{r7, pc}
     4dc:	40010060 	.word	0x40010060
     4e0:	40010040 	.word	0x40010040
     4e4:	40010000 	.word	0x40010000
     4e8:	400100e0 	.word	0x400100e0
     4ec:	10001000 	.word	0x10001000
     4f0:	10001018 	.word	0x10001018
     4f4:	10001368 	.word	0x10001368
     4f8:	40010004 	.word	0x40010004
     4fc:	400100e4 	.word	0x400100e4

00000500 <inform_host>:

// Inform host of new data available to read
void
inform_host(void)
{
     500:	b580      	push	{r7, lr}
     502:	af00      	add	r7, sp, #0
    // Update FIFOCTR for host to read
    am_hal_ios_update_fifoctr();
     504:	f002 f9ea 	bl	28dc <am_hal_ios_update_fifoctr>
    // Interrupt the host
    am_hal_ios_host_int_set(AM_IOSTEST_IOSTOHOST_DATAAVAIL_INTMASK);
     508:	2001      	movs	r0, #1
     50a:	f001 fbe7 	bl	1cdc <am_hal_ios_host_int_set>
}
     50e:	bf00      	nop
     510:	bd80      	pop	{r7, pc}
	...

00000514 <am_ioslave_acc_isr>:
// IO Slave Register Access ISR.
//
//*****************************************************************************
void
am_ioslave_acc_isr(void)
{
     514:	b580      	push	{r7, lr}
     516:	b082      	sub	sp, #8
     518:	af00      	add	r7, sp, #0

    //
    // Set up a pointer for writing 32-bit aligned packets through the IO slave
    // interface.
    //
    pui8Packet = (uint8_t *) am_hal_ios_pui8LRAM;
     51a:	4b19      	ldr	r3, [pc, #100]	; (580 <am_ioslave_acc_isr+0x6c>)
     51c:	681b      	ldr	r3, [r3, #0]
     51e:	607b      	str	r3, [r7, #4]

    //
    // Check to see what caused this interrupt, then clear the bit from the
    // interrupt register.
    //
    ui32Status = am_hal_ios_access_int_status_get(false);
     520:	2000      	movs	r0, #0
     522:	f001 fbef 	bl	1d04 <am_hal_ios_access_int_status_get>
     526:	6038      	str	r0, [r7, #0]
    am_hal_ios_access_int_clear(ui32Status);
     528:	6838      	ldr	r0, [r7, #0]
     52a:	f001 fbe5 	bl	1cf8 <am_hal_ios_access_int_clear>

    if ( ui32Status & AM_HAL_IOS_ACCESS_INT_00 )
     52e:	683b      	ldr	r3, [r7, #0]
     530:	2b00      	cmp	r3, #0
     532:	da20      	bge.n	576 <am_ioslave_acc_isr+0x62>
    {
        // Received command from Host
        // Figure out what to do next based on the command.
        //
        switch(pui8Packet[0])
     534:	687b      	ldr	r3, [r7, #4]
     536:	781b      	ldrb	r3, [r3, #0]
     538:	2b01      	cmp	r3, #1
     53a:	d007      	beq.n	54c <am_ioslave_acc_isr+0x38>
     53c:	2b02      	cmp	r3, #2
     53e:	d00b      	beq.n	558 <am_ioslave_acc_isr+0x44>
     540:	2b00      	cmp	r3, #0
     542:	d000      	beq.n	546 <am_ioslave_acc_isr+0x32>
                    g_iosState = AM_IOSTEST_SLAVE_STATE_NODATA;
                }
                break;

            default:
                break;
     544:	e017      	b.n	576 <am_ioslave_acc_isr+0x62>
                start_sensors();
     546:	f7ff fe43 	bl	1d0 <start_sensors>
                break;
     54a:	e014      	b.n	576 <am_ioslave_acc_isr+0x62>
                stop_sensors();
     54c:	f7ff fe32 	bl	1b4 <stop_sensors>
                g_iosState = AM_IOSTEST_SLAVE_STATE_NODATA;
     550:	4b0c      	ldr	r3, [pc, #48]	; (584 <am_ioslave_acc_isr+0x70>)
     552:	2200      	movs	r2, #0
     554:	701a      	strb	r2, [r3, #0]
                break;
     556:	e00e      	b.n	576 <am_ioslave_acc_isr+0x62>
                if (am_hal_ios_fifo_space_used())
     558:	f001 fbfe 	bl	1d58 <am_hal_ios_fifo_space_used>
     55c:	4603      	mov	r3, r0
     55e:	2b00      	cmp	r3, #0
     560:	d005      	beq.n	56e <am_ioslave_acc_isr+0x5a>
                    g_iosState = AM_IOSTEST_SLAVE_STATE_DATA;
     562:	4b08      	ldr	r3, [pc, #32]	; (584 <am_ioslave_acc_isr+0x70>)
     564:	2201      	movs	r2, #1
     566:	701a      	strb	r2, [r3, #0]
                    inform_host();
     568:	f7ff ffca 	bl	500 <inform_host>
                break;
     56c:	e002      	b.n	574 <am_ioslave_acc_isr+0x60>
                    g_iosState = AM_IOSTEST_SLAVE_STATE_NODATA;
     56e:	4b05      	ldr	r3, [pc, #20]	; (584 <am_ioslave_acc_isr+0x70>)
     570:	2200      	movs	r2, #0
     572:	701a      	strb	r2, [r3, #0]
                break;
     574:	bf00      	nop
        }
    }
}
     576:	bf00      	nop
     578:	3708      	adds	r7, #8
     57a:	46bd      	mov	sp, r7
     57c:	bd80      	pop	{r7, pc}
     57e:	bf00      	nop
     580:	000030a0 	.word	0x000030a0
     584:	10001164 	.word	0x10001164

00000588 <am_ioslave_ios_isr>:
// IO Slave Main ISR.
//
//*****************************************************************************
void
am_ioslave_ios_isr(void)
{
     588:	b580      	push	{r7, lr}
     58a:	b082      	sub	sp, #8
     58c:	af00      	add	r7, sp, #0

    //
    // Check to see what caused this interrupt, then clear the bit from the
    // interrupt register.
    //
    ui32Status = am_hal_ios_int_status_get(false);
     58e:	2000      	movs	r0, #0
     590:	f001 fbd4 	bl	1d3c <am_hal_ios_int_status_get>
     594:	6078      	str	r0, [r7, #4]
    am_hal_ios_int_clear(ui32Status);
     596:	6878      	ldr	r0, [r7, #4]
     598:	f001 fbca 	bl	1d30 <am_hal_ios_int_clear>

    if (ui32Status & AM_HAL_IOS_INT_FUNDFL)
     59c:	687b      	ldr	r3, [r7, #4]
     59e:	f003 0304 	and.w	r3, r3, #4
     5a2:	2b00      	cmp	r3, #0
     5a4:	d008      	beq.n	5b8 <am_ioslave_ios_isr+0x30>
    {
        am_util_stdio_printf("Hitting underflow for the requested IOS FIFO transfer\n");
     5a6:	4810      	ldr	r0, [pc, #64]	; (5e8 <am_ioslave_ios_isr+0x60>)
     5a8:	f001 f800 	bl	15ac <am_util_stdio_printf>
        // We should never hit this case unless the threshold has beeen set
        // incorrect, or we are unable to handle the data rate
        // ERROR!
        am_hal_debug_assert_msg(0,
     5ac:	4a0f      	ldr	r2, [pc, #60]	; (5ec <am_ioslave_ios_isr+0x64>)
     5ae:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
     5b2:	480f      	ldr	r0, [pc, #60]	; (5f0 <am_ioslave_ios_isr+0x68>)
     5b4:	f001 faf8 	bl	1ba8 <am_hal_debug_error>
            "Hitting underflow for the requested IOS FIFO transfer.");
    }

    if (ui32Status & AM_HAL_IOS_INT_ERR)
     5b8:	687b      	ldr	r3, [r7, #4]
     5ba:	f003 030e 	and.w	r3, r3, #14
     5be:	2b00      	cmp	r3, #0
     5c0:	d005      	beq.n	5ce <am_ioslave_ios_isr+0x46>
    {
        // We should never hit this case
        // ERROR!
        am_hal_debug_assert_msg(0,
     5c2:	4a0c      	ldr	r2, [pc, #48]	; (5f4 <am_ioslave_ios_isr+0x6c>)
     5c4:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
     5c8:	4809      	ldr	r0, [pc, #36]	; (5f0 <am_ioslave_ios_isr+0x68>)
     5ca:	f001 faed 	bl	1ba8 <am_hal_debug_error>
            "Hitting ERROR case.");
    }

    if (ui32Status & AM_HAL_IOS_INT_FSIZE)
     5ce:	687b      	ldr	r3, [r7, #4]
     5d0:	f003 0301 	and.w	r3, r3, #1
     5d4:	2b00      	cmp	r3, #0
     5d6:	d002      	beq.n	5de <am_ioslave_ios_isr+0x56>
    {
        //
        // Service the I2C slave FIFO if necessary.
        //
        am_hal_ios_fifo_service(ui32Status);
     5d8:	6878      	ldr	r0, [r7, #4]
     5da:	f001 fbcf 	bl	1d7c <am_hal_ios_fifo_service>
    }
}
     5de:	bf00      	nop
     5e0:	3708      	adds	r7, #8
     5e2:	46bd      	mov	sp, r7
     5e4:	bd80      	pop	{r7, pc}
     5e6:	bf00      	nop
     5e8:	00002f40 	.word	0x00002f40
     5ec:	00002f78 	.word	0x00002f78
     5f0:	00002fb0 	.word	0x00002fb0
     5f4:	00002fc8 	.word	0x00002fc8

000005f8 <itm_start>:
// Start up the ITM interface.
//
//*****************************************************************************
void
itm_start(void)
{
     5f8:	b580      	push	{r7, lr}
     5fa:	b082      	sub	sp, #8
     5fc:	af00      	add	r7, sp, #0
    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     5fe:	4817      	ldr	r0, [pc, #92]	; (65c <itm_start+0x64>)
     600:	f000 f950 	bl	8a4 <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     604:	f001 fb02 	bl	1c0c <am_hal_interrupt_master_disable>
     608:	4603      	mov	r3, r0
     60a:	607b      	str	r3, [r7, #4]
     60c:	4b14      	ldr	r3, [pc, #80]	; (660 <itm_start+0x68>)
     60e:	2273      	movs	r2, #115	; 0x73
     610:	601a      	str	r2, [r3, #0]
     612:	4a14      	ldr	r2, [pc, #80]	; (664 <itm_start+0x6c>)
     614:	4b13      	ldr	r3, [pc, #76]	; (664 <itm_start+0x6c>)
     616:	681b      	ldr	r3, [r3, #0]
     618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     61c:	6013      	str	r3, [r2, #0]
     61e:	4a12      	ldr	r2, [pc, #72]	; (668 <itm_start+0x70>)
     620:	4b11      	ldr	r3, [pc, #68]	; (668 <itm_start+0x70>)
     622:	681b      	ldr	r3, [r3, #0]
     624:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     628:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     62c:	6013      	str	r3, [r2, #0]
     62e:	4a0f      	ldr	r2, [pc, #60]	; (66c <itm_start+0x74>)
     630:	4b0e      	ldr	r3, [pc, #56]	; (66c <itm_start+0x74>)
     632:	681b      	ldr	r3, [r3, #0]
     634:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     638:	6013      	str	r3, [r2, #0]
     63a:	4b09      	ldr	r3, [pc, #36]	; (660 <itm_start+0x68>)
     63c:	2200      	movs	r2, #0
     63e:	601a      	str	r2, [r3, #0]
     640:	687b      	ldr	r3, [r7, #4]
     642:	4618      	mov	r0, r3
     644:	f001 fae6 	bl	1c14 <am_hal_interrupt_master_set>

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     648:	f002 f95c 	bl	2904 <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     64c:	f000 ffe8 	bl	1620 <am_bsp_debug_printf_enable>
    //
    // Clear the terminal.
    //
    am_util_stdio_terminal_clear();
     650:	f000 ffca 	bl	15e8 <am_util_stdio_terminal_clear>
}
     654:	bf00      	nop
     656:	3708      	adds	r7, #8
     658:	46bd      	mov	sp, r7
     65a:	bd80      	pop	{r7, pc}
     65c:	000016a1 	.word	0x000016a1
     660:	40010060 	.word	0x40010060
     664:	40010054 	.word	0x40010054
     668:	40010028 	.word	0x40010028
     66c:	40010108 	.word	0x40010108

00000670 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     670:	b580      	push	{r7, lr}
     672:	b084      	sub	sp, #16
     674:	af00      	add	r7, sp, #0
    int i;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     676:	2000      	movs	r0, #0
     678:	f001 f8aa 	bl	17d0 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     67c:	4864      	ldr	r0, [pc, #400]	; (810 <main+0x1a0>)
     67e:	f001 f811 	bl	16a4 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     682:	f000 ffbb 	bl	15fc <am_bsp_low_power_init>

    //
    //
    // Initialize the printf interface for ITM/SWO output.
    //
    itm_start();
     686:	f7ff ffb7 	bl	5f8 <itm_start>
    am_hal_gpio_out_bit_clear(43);
    am_hal_gpio_pin_config(43, AM_HAL_GPIO_OUTPUT);
#endif

    // Initialize Test Data
    for (i = 0; i < AM_TEST_REF_BUF_SIZE; i++)
     68a:	2300      	movs	r3, #0
     68c:	60fb      	str	r3, [r7, #12]
     68e:	e009      	b.n	6a4 <main+0x34>
    {
        g_pui8TestBuf[i] = (i & 0xFF) ^ XOR_BYTE;
     690:	68fb      	ldr	r3, [r7, #12]
     692:	b2d9      	uxtb	r1, r3
     694:	4a5f      	ldr	r2, [pc, #380]	; (814 <main+0x1a4>)
     696:	68fb      	ldr	r3, [r7, #12]
     698:	4413      	add	r3, r2
     69a:	460a      	mov	r2, r1
     69c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < AM_TEST_REF_BUF_SIZE; i++)
     69e:	68fb      	ldr	r3, [r7, #12]
     6a0:	3301      	adds	r3, #1
     6a2:	60fb      	str	r3, [r7, #12]
     6a4:	68fb      	ldr	r3, [r7, #12]
     6a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
     6aa:	dbf1      	blt.n	690 <main+0x20>
    }

    init_sensors();
     6ac:	f7ff fdaa 	bl	204 <init_sensors>
    //
    // Enable the IOS. Choose the correct protocol based on USE_SPI
    //
    ios_set_up(USE_SPI);
     6b0:	2001      	movs	r0, #1
     6b2:	f7ff fdf5 	bl	2a0 <ios_set_up>

    //
    // Enable interrupts so we can receive messages from the boot host.
    //
    am_hal_interrupt_master_enable();
     6b6:	f001 faa5 	bl	1c04 <am_hal_interrupt_master_enable>
    //
    // Loop forever.
    //
    while(1)
    {
        uint32_t numWritten = 0;
     6ba:	2300      	movs	r3, #0
     6bc:	60bb      	str	r3, [r7, #8]
        uint32_t chunk1;
        //
        uint32_t ui32IntStatus = am_hal_interrupt_master_disable();
     6be:	f001 faa5 	bl	1c0c <am_hal_interrupt_master_disable>
     6c2:	6078      	str	r0, [r7, #4]
        if (g_bSensor0Data || g_bSensor1Data)
     6c4:	4b54      	ldr	r3, [pc, #336]	; (818 <main+0x1a8>)
     6c6:	781b      	ldrb	r3, [r3, #0]
     6c8:	b2db      	uxtb	r3, r3
     6ca:	2b00      	cmp	r3, #0
     6cc:	d105      	bne.n	6da <main+0x6a>
     6ce:	4b53      	ldr	r3, [pc, #332]	; (81c <main+0x1ac>)
     6d0:	781b      	ldrb	r3, [r3, #0]
     6d2:	b2db      	uxtb	r3, r3
     6d4:	2b00      	cmp	r3, #0
     6d6:	f000 8091 	beq.w	7fc <main+0x18c>
        {
            // Enable the interrupts
            am_hal_interrupt_master_set(ui32IntStatus);
     6da:	6878      	ldr	r0, [r7, #4]
     6dc:	f001 fa9a 	bl	1c14 <am_hal_interrupt_master_set>
            if (g_bSensor0Data)
     6e0:	4b4d      	ldr	r3, [pc, #308]	; (818 <main+0x1a8>)
     6e2:	781b      	ldrb	r3, [r3, #0]
     6e4:	b2db      	uxtb	r3, r3
     6e6:	2b00      	cmp	r3, #0
     6e8:	d038      	beq.n	75c <main+0xec>
            {
                chunk1 = AM_TEST_REF_BUF_SIZE - g_sendIdx;
     6ea:	4b4d      	ldr	r3, [pc, #308]	; (820 <main+0x1b0>)
     6ec:	681b      	ldr	r3, [r3, #0]
     6ee:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
     6f2:	603b      	str	r3, [r7, #0]
                if (chunk1 > SENSOR0_DATA_SIZE)
     6f4:	683b      	ldr	r3, [r7, #0]
     6f6:	2bc8      	cmp	r3, #200	; 0xc8
     6f8:	d909      	bls.n	70e <main+0x9e>
                {
                    numWritten = am_hal_ios_fifo_write(&g_pui8TestBuf[g_sendIdx], SENSOR0_DATA_SIZE);
     6fa:	4b49      	ldr	r3, [pc, #292]	; (820 <main+0x1b0>)
     6fc:	681b      	ldr	r3, [r3, #0]
     6fe:	4a45      	ldr	r2, [pc, #276]	; (814 <main+0x1a4>)
     700:	4413      	add	r3, r2
     702:	21c8      	movs	r1, #200	; 0xc8
     704:	4618      	mov	r0, r3
     706:	f001 fe45 	bl	2394 <am_hal_ios_fifo_write>
     70a:	60b8      	str	r0, [r7, #8]
     70c:	e017      	b.n	73e <main+0xce>
                }
                else
                {
                    numWritten = am_hal_ios_fifo_write(&g_pui8TestBuf[g_sendIdx], chunk1);
     70e:	4b44      	ldr	r3, [pc, #272]	; (820 <main+0x1b0>)
     710:	681b      	ldr	r3, [r3, #0]
     712:	4a40      	ldr	r2, [pc, #256]	; (814 <main+0x1a4>)
     714:	4413      	add	r3, r2
     716:	6839      	ldr	r1, [r7, #0]
     718:	4618      	mov	r0, r3
     71a:	f001 fe3b 	bl	2394 <am_hal_ios_fifo_write>
     71e:	60b8      	str	r0, [r7, #8]
                    if (numWritten == chunk1)
     720:	68ba      	ldr	r2, [r7, #8]
     722:	683b      	ldr	r3, [r7, #0]
     724:	429a      	cmp	r2, r3
     726:	d10a      	bne.n	73e <main+0xce>
                    {
                        numWritten += am_hal_ios_fifo_write(&g_pui8TestBuf[0], SENSOR0_DATA_SIZE - chunk1);
     728:	683b      	ldr	r3, [r7, #0]
     72a:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
     72e:	4619      	mov	r1, r3
     730:	4838      	ldr	r0, [pc, #224]	; (814 <main+0x1a4>)
     732:	f001 fe2f 	bl	2394 <am_hal_ios_fifo_write>
     736:	4602      	mov	r2, r0
     738:	68bb      	ldr	r3, [r7, #8]
     73a:	4413      	add	r3, r2
     73c:	60bb      	str	r3, [r7, #8]
                    }
                }

                g_sendIdx += numWritten;
     73e:	4b38      	ldr	r3, [pc, #224]	; (820 <main+0x1b0>)
     740:	681a      	ldr	r2, [r3, #0]
     742:	68bb      	ldr	r3, [r7, #8]
     744:	4413      	add	r3, r2
     746:	4a36      	ldr	r2, [pc, #216]	; (820 <main+0x1b0>)
     748:	6013      	str	r3, [r2, #0]
                g_sendIdx %= AM_TEST_REF_BUF_SIZE;
     74a:	4b35      	ldr	r3, [pc, #212]	; (820 <main+0x1b0>)
     74c:	681b      	ldr	r3, [r3, #0]
     74e:	f3c3 0308 	ubfx	r3, r3, #0, #9
     752:	4a33      	ldr	r2, [pc, #204]	; (820 <main+0x1b0>)
     754:	6013      	str	r3, [r2, #0]
                g_bSensor0Data = false;
     756:	4b30      	ldr	r3, [pc, #192]	; (818 <main+0x1a8>)
     758:	2200      	movs	r2, #0
     75a:	701a      	strb	r2, [r3, #0]
            }
            if (g_bSensor1Data)
     75c:	4b2f      	ldr	r3, [pc, #188]	; (81c <main+0x1ac>)
     75e:	781b      	ldrb	r3, [r3, #0]
     760:	b2db      	uxtb	r3, r3
     762:	2b00      	cmp	r3, #0
     764:	d03a      	beq.n	7dc <main+0x16c>
            {
                chunk1 = AM_TEST_REF_BUF_SIZE - g_sendIdx;
     766:	4b2e      	ldr	r3, [pc, #184]	; (820 <main+0x1b0>)
     768:	681b      	ldr	r3, [r3, #0]
     76a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
     76e:	603b      	str	r3, [r7, #0]
                if (chunk1 > SENSOR1_DATA_SIZE)
     770:	683b      	ldr	r3, [r7, #0]
     772:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
     776:	d90a      	bls.n	78e <main+0x11e>
                {
                    numWritten = am_hal_ios_fifo_write(&g_pui8TestBuf[g_sendIdx], SENSOR1_DATA_SIZE);
     778:	4b29      	ldr	r3, [pc, #164]	; (820 <main+0x1b0>)
     77a:	681b      	ldr	r3, [r3, #0]
     77c:	4a25      	ldr	r2, [pc, #148]	; (814 <main+0x1a4>)
     77e:	4413      	add	r3, r2
     780:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     784:	4618      	mov	r0, r3
     786:	f001 fe05 	bl	2394 <am_hal_ios_fifo_write>
     78a:	60b8      	str	r0, [r7, #8]
     78c:	e017      	b.n	7be <main+0x14e>
                }
                else
                {
                    numWritten = am_hal_ios_fifo_write(&g_pui8TestBuf[g_sendIdx], chunk1);
     78e:	4b24      	ldr	r3, [pc, #144]	; (820 <main+0x1b0>)
     790:	681b      	ldr	r3, [r3, #0]
     792:	4a20      	ldr	r2, [pc, #128]	; (814 <main+0x1a4>)
     794:	4413      	add	r3, r2
     796:	6839      	ldr	r1, [r7, #0]
     798:	4618      	mov	r0, r3
     79a:	f001 fdfb 	bl	2394 <am_hal_ios_fifo_write>
     79e:	60b8      	str	r0, [r7, #8]
                    if (numWritten == chunk1)
     7a0:	68ba      	ldr	r2, [r7, #8]
     7a2:	683b      	ldr	r3, [r7, #0]
     7a4:	429a      	cmp	r2, r3
     7a6:	d10a      	bne.n	7be <main+0x14e>
                    {
                        numWritten += am_hal_ios_fifo_write(&g_pui8TestBuf[0], SENSOR1_DATA_SIZE - chunk1);
     7a8:	683b      	ldr	r3, [r7, #0]
     7aa:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
     7ae:	4619      	mov	r1, r3
     7b0:	4818      	ldr	r0, [pc, #96]	; (814 <main+0x1a4>)
     7b2:	f001 fdef 	bl	2394 <am_hal_ios_fifo_write>
     7b6:	4602      	mov	r2, r0
     7b8:	68bb      	ldr	r3, [r7, #8]
     7ba:	4413      	add	r3, r2
     7bc:	60bb      	str	r3, [r7, #8]
                    }
                }

                g_sendIdx += numWritten;
     7be:	4b18      	ldr	r3, [pc, #96]	; (820 <main+0x1b0>)
     7c0:	681a      	ldr	r2, [r3, #0]
     7c2:	68bb      	ldr	r3, [r7, #8]
     7c4:	4413      	add	r3, r2
     7c6:	4a16      	ldr	r2, [pc, #88]	; (820 <main+0x1b0>)
     7c8:	6013      	str	r3, [r2, #0]
                g_sendIdx %= AM_TEST_REF_BUF_SIZE;
     7ca:	4b15      	ldr	r3, [pc, #84]	; (820 <main+0x1b0>)
     7cc:	681b      	ldr	r3, [r3, #0]
     7ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
     7d2:	4a13      	ldr	r2, [pc, #76]	; (820 <main+0x1b0>)
     7d4:	6013      	str	r3, [r2, #0]
                g_bSensor1Data = false;
     7d6:	4b11      	ldr	r3, [pc, #68]	; (81c <main+0x1ac>)
     7d8:	2200      	movs	r2, #0
     7da:	701a      	strb	r2, [r3, #0]
            }
            // If we were Idle - need to inform Host if there is new data
            if (g_iosState == AM_IOSTEST_SLAVE_STATE_NODATA)
     7dc:	4b11      	ldr	r3, [pc, #68]	; (824 <main+0x1b4>)
     7de:	781b      	ldrb	r3, [r3, #0]
     7e0:	b2db      	uxtb	r3, r3
     7e2:	2b00      	cmp	r3, #0
     7e4:	d111      	bne.n	80a <main+0x19a>
            {
                if (am_hal_ios_fifo_space_used())
     7e6:	f001 fab7 	bl	1d58 <am_hal_ios_fifo_space_used>
     7ea:	4603      	mov	r3, r0
     7ec:	2b00      	cmp	r3, #0
     7ee:	d00c      	beq.n	80a <main+0x19a>
                {
                    g_iosState = AM_IOSTEST_SLAVE_STATE_DATA;
     7f0:	4b0c      	ldr	r3, [pc, #48]	; (824 <main+0x1b4>)
     7f2:	2201      	movs	r2, #1
     7f4:	701a      	strb	r2, [r3, #0]
                    inform_host();
     7f6:	f7ff fe83 	bl	500 <inform_host>
            if (g_iosState == AM_IOSTEST_SLAVE_STATE_NODATA)
     7fa:	e006      	b.n	80a <main+0x19a>
        else
        {
            //
            // Go to Deep Sleep.
            //
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_NORMAL);
     7fc:	2000      	movs	r0, #0
     7fe:	f002 faa3 	bl	2d48 <am_hal_sysctrl_sleep>
            // Enable the interrupts
            am_hal_interrupt_master_set(ui32IntStatus);
     802:	6878      	ldr	r0, [r7, #4]
     804:	f001 fa06 	bl	1c14 <am_hal_interrupt_master_set>
     808:	e757      	b.n	6ba <main+0x4a>
            if (g_iosState == AM_IOSTEST_SLAVE_STATE_NODATA)
     80a:	bf00      	nop
    {
     80c:	e755      	b.n	6ba <main+0x4a>
     80e:	bf00      	nop
     810:	00002ff0 	.word	0x00002ff0
     814:	10001168 	.word	0x10001168
     818:	10001165 	.word	0x10001165
     81c:	10001767 	.word	0x10001767
     820:	10001048 	.word	0x10001048
     824:	10001164 	.word	0x10001164

00000828 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     828:	4811      	ldr	r0, [pc, #68]	; (870 <zero_loop+0x12>)
     82a:	4912      	ldr	r1, [pc, #72]	; (874 <zero_loop+0x16>)
     82c:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     82e:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     832:	4811      	ldr	r0, [pc, #68]	; (878 <zero_loop+0x1a>)
     834:	6801      	ldr	r1, [r0, #0]
     836:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     83a:	6001      	str	r1, [r0, #0]
     83c:	f3bf 8f4f 	dsb	sy
     840:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     844:	480d      	ldr	r0, [pc, #52]	; (87c <zero_loop+0x1e>)
     846:	490e      	ldr	r1, [pc, #56]	; (880 <zero_loop+0x22>)
     848:	4a0e      	ldr	r2, [pc, #56]	; (884 <zero_loop+0x26>)

0000084a <copy_loop>:
     84a:	f850 3b04 	ldr.w	r3, [r0], #4
     84e:	f841 3b04 	str.w	r3, [r1], #4
     852:	4291      	cmp	r1, r2
     854:	dbf9      	blt.n	84a <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     856:	480c      	ldr	r0, [pc, #48]	; (888 <zero_loop+0x2a>)
     858:	490c      	ldr	r1, [pc, #48]	; (88c <zero_loop+0x2e>)
     85a:	f04f 0200 	mov.w	r2, #0

0000085e <zero_loop>:
     85e:	4288      	cmp	r0, r1
     860:	bfb8      	it	lt
     862:	f840 2b04 	strlt.w	r2, [r0], #4
     866:	dbfa      	blt.n	85e <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     868:	f7ff ff02 	bl	670 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     86c:	be00      	bkpt	0x0000
}
     86e:	bf00      	nop
     870:	e000ed08 	.word	0xe000ed08
     874:	00000000 	.word	0x00000000
     878:	e000ed88 	.word	0xe000ed88
     87c:	000030f0 	.word	0x000030f0
     880:	10001000 	.word	0x10001000
     884:	10001048 	.word	0x10001048
     888:	10001048 	.word	0x10001048
     88c:	100017c4 	.word	0x100017c4

00000890 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     890:	b480      	push	{r7}
     892:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     894:	e7fe      	b.n	894 <am_nmi_isr+0x4>

00000896 <am_busfault_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_fault_isr(void)
{
     896:	b480      	push	{r7}
     898:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     89a:	e7fe      	b.n	89a <am_busfault_isr+0x4>

0000089c <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     89c:	b480      	push	{r7}
     89e:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     8a0:	e7fe      	b.n	8a0 <am_adc_isr+0x4>
	...

000008a4 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     8a4:	b480      	push	{r7}
     8a6:	b083      	sub	sp, #12
     8a8:	af00      	add	r7, sp, #0
     8aa:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     8ac:	4a04      	ldr	r2, [pc, #16]	; (8c0 <am_util_stdio_printf_init+0x1c>)
     8ae:	687b      	ldr	r3, [r7, #4]
     8b0:	6013      	str	r3, [r2, #0]
}
     8b2:	bf00      	nop
     8b4:	370c      	adds	r7, #12
     8b6:	46bd      	mov	sp, r7
     8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
     8bc:	4770      	bx	lr
     8be:	bf00      	nop
     8c0:	10001768 	.word	0x10001768

000008c4 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     8c4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     8c8:	b096      	sub	sp, #88	; 0x58
     8ca:	af00      	add	r7, sp, #0
     8cc:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     8d0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     8d4:	0025      	movs	r5, r4
     8d6:	2600      	movs	r6, #0
     8d8:	ea55 0306 	orrs.w	r3, r5, r6
     8dc:	f000 80a0 	beq.w	a20 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     8e0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     8e4:	0862      	lsrs	r2, r4, #1
     8e6:	ea4f 0133 	mov.w	r1, r3, rrx
     8ea:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     8ee:	ea4f 0893 	mov.w	r8, r3, lsr #2
     8f2:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     8f6:	ea4f 0994 	mov.w	r9, r4, lsr #2
     8fa:	eb11 0308 	adds.w	r3, r1, r8
     8fe:	eb42 0409 	adc.w	r4, r2, r9
     902:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     906:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     90a:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     90e:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     912:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     916:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     91a:	eb13 030a 	adds.w	r3, r3, sl
     91e:	eb44 040b 	adc.w	r4, r4, fp
     922:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     926:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     92a:	0a1a      	lsrs	r2, r3, #8
     92c:	62ba      	str	r2, [r7, #40]	; 0x28
     92e:	6aba      	ldr	r2, [r7, #40]	; 0x28
     930:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     934:	62ba      	str	r2, [r7, #40]	; 0x28
     936:	0a23      	lsrs	r3, r4, #8
     938:	62fb      	str	r3, [r7, #44]	; 0x2c
     93a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     93e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     942:	18c9      	adds	r1, r1, r3
     944:	eb42 0204 	adc.w	r2, r2, r4
     948:	460b      	mov	r3, r1
     94a:	4614      	mov	r4, r2
     94c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     950:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     954:	0c1a      	lsrs	r2, r3, #16
     956:	623a      	str	r2, [r7, #32]
     958:	6a3a      	ldr	r2, [r7, #32]
     95a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     95e:	623a      	str	r2, [r7, #32]
     960:	0c23      	lsrs	r3, r4, #16
     962:	627b      	str	r3, [r7, #36]	; 0x24
     964:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     968:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     96c:	18c9      	adds	r1, r1, r3
     96e:	eb42 0204 	adc.w	r2, r2, r4
     972:	460b      	mov	r3, r1
     974:	4614      	mov	r4, r2
     976:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     97a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     97e:	0023      	movs	r3, r4
     980:	603b      	str	r3, [r7, #0]
     982:	2300      	movs	r3, #0
     984:	607b      	str	r3, [r7, #4]
     986:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     98a:	e897 0006 	ldmia.w	r7, {r1, r2}
     98e:	18c9      	adds	r1, r1, r3
     990:	eb42 0204 	adc.w	r2, r2, r4
     994:	460b      	mov	r3, r1
     996:	4614      	mov	r4, r2
     998:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     99c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     9a0:	08da      	lsrs	r2, r3, #3
     9a2:	613a      	str	r2, [r7, #16]
     9a4:	693a      	ldr	r2, [r7, #16]
     9a6:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     9aa:	613a      	str	r2, [r7, #16]
     9ac:	08e3      	lsrs	r3, r4, #3
     9ae:	617b      	str	r3, [r7, #20]
     9b0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     9b4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     9b8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
     9bc:	460b      	mov	r3, r1
     9be:	4614      	mov	r4, r2
     9c0:	00a0      	lsls	r0, r4, #2
     9c2:	60f8      	str	r0, [r7, #12]
     9c4:	68f8      	ldr	r0, [r7, #12]
     9c6:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
     9ca:	60f8      	str	r0, [r7, #12]
     9cc:	009b      	lsls	r3, r3, #2
     9ce:	60bb      	str	r3, [r7, #8]
     9d0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     9d4:	185b      	adds	r3, r3, r1
     9d6:	eb44 0402 	adc.w	r4, r4, r2
     9da:	18db      	adds	r3, r3, r3
     9dc:	eb44 0404 	adc.w	r4, r4, r4
     9e0:	4619      	mov	r1, r3
     9e2:	4622      	mov	r2, r4
     9e4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     9e8:	1a5b      	subs	r3, r3, r1
     9ea:	eb64 0402 	sbc.w	r4, r4, r2
     9ee:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     9f2:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     9f6:	3306      	adds	r3, #6
     9f8:	f144 0400 	adc.w	r4, r4, #0
     9fc:	091a      	lsrs	r2, r3, #4
     9fe:	61ba      	str	r2, [r7, #24]
     a00:	69ba      	ldr	r2, [r7, #24]
     a02:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     a06:	61ba      	str	r2, [r7, #24]
     a08:	0923      	lsrs	r3, r4, #4
     a0a:	61fb      	str	r3, [r7, #28]
     a0c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a10:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     a14:	18c9      	adds	r1, r1, r3
     a16:	eb42 0204 	adc.w	r2, r2, r4
     a1a:	460b      	mov	r3, r1
     a1c:	4614      	mov	r4, r2
     a1e:	e029      	b.n	a74 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     a22:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     a26:	085a      	lsrs	r2, r3, #1
     a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     a2a:	089b      	lsrs	r3, r3, #2
     a2c:	4413      	add	r3, r2
     a2e:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     a32:	091b      	lsrs	r3, r3, #4
     a34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     a36:	4413      	add	r3, r2
     a38:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     a3c:	0a1b      	lsrs	r3, r3, #8
     a3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     a40:	4413      	add	r3, r2
     a42:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     a46:	0c1b      	lsrs	r3, r3, #16
     a48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     a4a:	4413      	add	r3, r2
     a4c:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     a50:	08db      	lsrs	r3, r3, #3
     a52:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     a54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     a56:	4613      	mov	r3, r2
     a58:	009b      	lsls	r3, r3, #2
     a5a:	4413      	add	r3, r2
     a5c:	005b      	lsls	r3, r3, #1
     a5e:	461a      	mov	r2, r3
     a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     a62:	1a9b      	subs	r3, r3, r2
     a64:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a68:	3306      	adds	r3, #6
     a6a:	091a      	lsrs	r2, r3, #4
     a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     a6e:	4413      	add	r3, r2
     a70:	f04f 0400 	mov.w	r4, #0
    }
}
     a74:	4618      	mov	r0, r3
     a76:	4621      	mov	r1, r4
     a78:	3758      	adds	r7, #88	; 0x58
     a7a:	46bd      	mov	sp, r7
     a7c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     a80:	4770      	bx	lr

00000a82 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     a82:	b590      	push	{r4, r7, lr}
     a84:	b085      	sub	sp, #20
     a86:	af00      	add	r7, sp, #0
     a88:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     a8c:	683a      	ldr	r2, [r7, #0]
     a8e:	687b      	ldr	r3, [r7, #4]
     a90:	4313      	orrs	r3, r2
     a92:	2b00      	cmp	r3, #0
     a94:	bf0c      	ite	eq
     a96:	2301      	moveq	r3, #1
     a98:	2300      	movne	r3, #0
     a9a:	b2db      	uxtb	r3, r3
     a9c:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     a9e:	e008      	b.n	ab2 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     aa0:	e9d7 0100 	ldrd	r0, r1, [r7]
     aa4:	f7ff ff0e 	bl	8c4 <divu64_10>
     aa8:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     aac:	68fb      	ldr	r3, [r7, #12]
     aae:	3301      	adds	r3, #1
     ab0:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
     ab2:	e897 0018 	ldmia.w	r7, {r3, r4}
     ab6:	4323      	orrs	r3, r4
     ab8:	d1f2      	bne.n	aa0 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
     aba:	68fb      	ldr	r3, [r7, #12]
}
     abc:	4618      	mov	r0, r3
     abe:	3714      	adds	r7, #20
     ac0:	46bd      	mov	sp, r7
     ac2:	bd90      	pop	{r4, r7, pc}

00000ac4 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     ac4:	b590      	push	{r4, r7, lr}
     ac6:	b083      	sub	sp, #12
     ac8:	af00      	add	r7, sp, #0
     aca:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     ace:	e897 0018 	ldmia.w	r7, {r3, r4}
     ad2:	2b00      	cmp	r3, #0
     ad4:	f174 0300 	sbcs.w	r3, r4, #0
     ad8:	da06      	bge.n	ae8 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     ada:	e897 0018 	ldmia.w	r7, {r3, r4}
     ade:	425b      	negs	r3, r3
     ae0:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     ae4:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     ae8:	e897 0018 	ldmia.w	r7, {r3, r4}
     aec:	4618      	mov	r0, r3
     aee:	4621      	mov	r1, r4
     af0:	f7ff ffc7 	bl	a82 <ndigits_in_u64>
     af4:	4603      	mov	r3, r0
}
     af6:	4618      	mov	r0, r3
     af8:	370c      	adds	r7, #12
     afa:	46bd      	mov	sp, r7
     afc:	bd90      	pop	{r4, r7, pc}

00000afe <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     afe:	b490      	push	{r4, r7}
     b00:	b084      	sub	sp, #16
     b02:	af00      	add	r7, sp, #0
     b04:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     b08:	6839      	ldr	r1, [r7, #0]
     b0a:	687a      	ldr	r2, [r7, #4]
     b0c:	430a      	orrs	r2, r1
     b0e:	2a00      	cmp	r2, #0
     b10:	bf0c      	ite	eq
     b12:	2201      	moveq	r2, #1
     b14:	2200      	movne	r2, #0
     b16:	b2d2      	uxtb	r2, r2
     b18:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     b1a:	e00a      	b.n	b32 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     b1c:	e897 0006 	ldmia.w	r7, {r1, r2}
     b20:	090b      	lsrs	r3, r1, #4
     b22:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     b26:	0914      	lsrs	r4, r2, #4
     b28:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     b2c:	68fa      	ldr	r2, [r7, #12]
     b2e:	3201      	adds	r2, #1
     b30:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
     b32:	e897 0006 	ldmia.w	r7, {r1, r2}
     b36:	430a      	orrs	r2, r1
     b38:	d1f0      	bne.n	b1c <ndigits_in_hex+0x1e>
    }

    return iDigits;
     b3a:	68fb      	ldr	r3, [r7, #12]
}
     b3c:	4618      	mov	r0, r3
     b3e:	3710      	adds	r7, #16
     b40:	46bd      	mov	sp, r7
     b42:	bc90      	pop	{r4, r7}
     b44:	4770      	bx	lr

00000b46 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     b46:	b480      	push	{r7}
     b48:	b087      	sub	sp, #28
     b4a:	af00      	add	r7, sp, #0
     b4c:	6078      	str	r0, [r7, #4]
     b4e:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     b50:	2300      	movs	r3, #0
     b52:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     b54:	2300      	movs	r3, #0
     b56:	613b      	str	r3, [r7, #16]
     b58:	2300      	movs	r3, #0
     b5a:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     b5c:	687b      	ldr	r3, [r7, #4]
     b5e:	781b      	ldrb	r3, [r3, #0]
     b60:	2b2d      	cmp	r3, #45	; 0x2d
     b62:	d11b      	bne.n	b9c <decstr_to_int+0x56>
    {
        bNeg = true;
     b64:	2301      	movs	r3, #1
     b66:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     b68:	687b      	ldr	r3, [r7, #4]
     b6a:	3301      	adds	r3, #1
     b6c:	607b      	str	r3, [r7, #4]
        uCnt++;
     b6e:	68fb      	ldr	r3, [r7, #12]
     b70:	3301      	adds	r3, #1
     b72:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     b74:	e012      	b.n	b9c <decstr_to_int+0x56>
    {
        ++uCnt;
     b76:	68fb      	ldr	r3, [r7, #12]
     b78:	3301      	adds	r3, #1
     b7a:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     b7c:	693a      	ldr	r2, [r7, #16]
     b7e:	4613      	mov	r3, r2
     b80:	009b      	lsls	r3, r3, #2
     b82:	4413      	add	r3, r2
     b84:	005b      	lsls	r3, r3, #1
     b86:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     b88:	687b      	ldr	r3, [r7, #4]
     b8a:	781b      	ldrb	r3, [r3, #0]
     b8c:	461a      	mov	r2, r3
     b8e:	693b      	ldr	r3, [r7, #16]
     b90:	4413      	add	r3, r2
     b92:	3b30      	subs	r3, #48	; 0x30
     b94:	613b      	str	r3, [r7, #16]
        pcStr++;
     b96:	687b      	ldr	r3, [r7, #4]
     b98:	3301      	adds	r3, #1
     b9a:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     b9c:	687b      	ldr	r3, [r7, #4]
     b9e:	781b      	ldrb	r3, [r3, #0]
     ba0:	2b2f      	cmp	r3, #47	; 0x2f
     ba2:	d903      	bls.n	bac <decstr_to_int+0x66>
     ba4:	687b      	ldr	r3, [r7, #4]
     ba6:	781b      	ldrb	r3, [r3, #0]
     ba8:	2b39      	cmp	r3, #57	; 0x39
     baa:	d9e4      	bls.n	b76 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
     bac:	683b      	ldr	r3, [r7, #0]
     bae:	2b00      	cmp	r3, #0
     bb0:	d002      	beq.n	bb8 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     bb2:	683b      	ldr	r3, [r7, #0]
     bb4:	68fa      	ldr	r2, [r7, #12]
     bb6:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     bb8:	7dfb      	ldrb	r3, [r7, #23]
     bba:	2b00      	cmp	r3, #0
     bbc:	d002      	beq.n	bc4 <decstr_to_int+0x7e>
     bbe:	693b      	ldr	r3, [r7, #16]
     bc0:	425b      	negs	r3, r3
     bc2:	e000      	b.n	bc6 <decstr_to_int+0x80>
     bc4:	693b      	ldr	r3, [r7, #16]
}
     bc6:	4618      	mov	r0, r3
     bc8:	371c      	adds	r7, #28
     bca:	46bd      	mov	sp, r7
     bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
     bd0:	4770      	bx	lr

00000bd2 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     bd2:	b590      	push	{r4, r7, lr}
     bd4:	b091      	sub	sp, #68	; 0x44
     bd6:	af00      	add	r7, sp, #0
     bd8:	e9c7 0102 	strd	r0, r1, [r7, #8]
     bdc:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     bde:	2300      	movs	r3, #0
     be0:	63fb      	str	r3, [r7, #60]	; 0x3c
     be2:	2300      	movs	r3, #0
     be4:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     be6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     bea:	f7ff fe6b 	bl	8c4 <divu64_10>
     bee:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     bf2:	68b9      	ldr	r1, [r7, #8]
     bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     bf6:	4613      	mov	r3, r2
     bf8:	009b      	lsls	r3, r3, #2
     bfa:	4413      	add	r3, r2
     bfc:	005b      	lsls	r3, r3, #1
     bfe:	1acb      	subs	r3, r1, r3
     c00:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     c04:	1c5a      	adds	r2, r3, #1
     c06:	63fa      	str	r2, [r7, #60]	; 0x3c
     c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     c0a:	b2d2      	uxtb	r2, r2
     c0c:	3230      	adds	r2, #48	; 0x30
     c0e:	b2d2      	uxtb	r2, r2
     c10:	f107 0140 	add.w	r1, r7, #64	; 0x40
     c14:	440b      	add	r3, r1
     c16:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     c1a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     c1e:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     c22:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     c26:	4323      	orrs	r3, r4
     c28:	d1dd      	bne.n	be6 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     c2c:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     c2e:	687b      	ldr	r3, [r7, #4]
     c30:	2b00      	cmp	r3, #0
     c32:	d011      	beq.n	c58 <uint64_to_str+0x86>
    {
        while ( ix-- )
     c34:	e008      	b.n	c48 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     c36:	687b      	ldr	r3, [r7, #4]
     c38:	1c5a      	adds	r2, r3, #1
     c3a:	607a      	str	r2, [r7, #4]
     c3c:	f107 0110 	add.w	r1, r7, #16
     c40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     c42:	440a      	add	r2, r1
     c44:	7812      	ldrb	r2, [r2, #0]
     c46:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
     c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     c4a:	1e5a      	subs	r2, r3, #1
     c4c:	63fa      	str	r2, [r7, #60]	; 0x3c
     c4e:	2b00      	cmp	r3, #0
     c50:	d1f1      	bne.n	c36 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     c52:	687b      	ldr	r3, [r7, #4]
     c54:	2200      	movs	r2, #0
     c56:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     c5a:	4618      	mov	r0, r3
     c5c:	3744      	adds	r7, #68	; 0x44
     c5e:	46bd      	mov	sp, r7
     c60:	bd90      	pop	{r4, r7, pc}

00000c62 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     c62:	b4b0      	push	{r4, r5, r7}
     c64:	b08d      	sub	sp, #52	; 0x34
     c66:	af00      	add	r7, sp, #0
     c68:	e9c7 0102 	strd	r0, r1, [r7, #8]
     c6c:	607a      	str	r2, [r7, #4]
     c6e:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     c70:	2300      	movs	r3, #0
     c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     c74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     c78:	4313      	orrs	r3, r2
     c7a:	d131      	bne.n	ce0 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c7e:	1c5a      	adds	r2, r3, #1
     c80:	62fa      	str	r2, [r7, #44]	; 0x2c
     c82:	f107 0230 	add.w	r2, r7, #48	; 0x30
     c86:	4413      	add	r3, r2
     c88:	2230      	movs	r2, #48	; 0x30
     c8a:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     c8e:	e027      	b.n	ce0 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     c90:	7a3b      	ldrb	r3, [r7, #8]
     c92:	f003 030f 	and.w	r3, r3, #15
     c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     c9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     c9e:	2b09      	cmp	r3, #9
     ca0:	d90a      	bls.n	cb8 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     ca2:	78fb      	ldrb	r3, [r7, #3]
     ca4:	2b00      	cmp	r3, #0
     ca6:	d001      	beq.n	cac <uint64_to_hexstr+0x4a>
     ca8:	2227      	movs	r2, #39	; 0x27
     caa:	e000      	b.n	cae <uint64_to_hexstr+0x4c>
     cac:	2207      	movs	r2, #7
     cae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     cb2:	4413      	add	r3, r2
     cb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     cba:	1c5a      	adds	r2, r3, #1
     cbc:	62fa      	str	r2, [r7, #44]	; 0x2c
     cbe:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     cc2:	3230      	adds	r2, #48	; 0x30
     cc4:	b2d2      	uxtb	r2, r2
     cc6:	f107 0130 	add.w	r1, r7, #48	; 0x30
     cca:	440b      	add	r3, r1
     ccc:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     cd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     cd4:	0914      	lsrs	r4, r2, #4
     cd6:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     cda:	091d      	lsrs	r5, r3, #4
     cdc:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
     ce0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     ce4:	4313      	orrs	r3, r2
     ce6:	d1d3      	bne.n	c90 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     cea:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     cec:	687b      	ldr	r3, [r7, #4]
     cee:	2b00      	cmp	r3, #0
     cf0:	d011      	beq.n	d16 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     cf2:	e008      	b.n	d06 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     cf4:	687b      	ldr	r3, [r7, #4]
     cf6:	1c5a      	adds	r2, r3, #1
     cf8:	607a      	str	r2, [r7, #4]
     cfa:	f107 0110 	add.w	r1, r7, #16
     cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     d00:	440a      	add	r2, r1
     d02:	7812      	ldrb	r2, [r2, #0]
     d04:	701a      	strb	r2, [r3, #0]
        while (ix--)
     d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d08:	1e5a      	subs	r2, r3, #1
     d0a:	62fa      	str	r2, [r7, #44]	; 0x2c
     d0c:	2b00      	cmp	r3, #0
     d0e:	d1f1      	bne.n	cf4 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     d10:	687b      	ldr	r3, [r7, #4]
     d12:	2200      	movs	r2, #0
     d14:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     d18:	4618      	mov	r0, r3
     d1a:	3734      	adds	r7, #52	; 0x34
     d1c:	46bd      	mov	sp, r7
     d1e:	bcb0      	pop	{r4, r5, r7}
     d20:	4770      	bx	lr

00000d22 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     d22:	b480      	push	{r7}
     d24:	b085      	sub	sp, #20
     d26:	af00      	add	r7, sp, #0
     d28:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     d2a:	2300      	movs	r3, #0
     d2c:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     d2e:	687b      	ldr	r3, [r7, #4]
     d30:	2b00      	cmp	r3, #0
     d32:	d104      	bne.n	d3e <simple_strlen+0x1c>
    {
        return ui32RetVal;
     d34:	68fb      	ldr	r3, [r7, #12]
     d36:	e009      	b.n	d4c <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     d38:	68fb      	ldr	r3, [r7, #12]
     d3a:	3301      	adds	r3, #1
     d3c:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
     d3e:	687b      	ldr	r3, [r7, #4]
     d40:	1c5a      	adds	r2, r3, #1
     d42:	607a      	str	r2, [r7, #4]
     d44:	781b      	ldrb	r3, [r3, #0]
     d46:	2b00      	cmp	r3, #0
     d48:	d1f6      	bne.n	d38 <simple_strlen+0x16>
    }
    return ui32RetVal;
     d4a:	68fb      	ldr	r3, [r7, #12]
}
     d4c:	4618      	mov	r0, r3
     d4e:	3714      	adds	r7, #20
     d50:	46bd      	mov	sp, r7
     d52:	f85d 7b04 	ldr.w	r7, [sp], #4
     d56:	4770      	bx	lr

00000d58 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     d58:	b480      	push	{r7}
     d5a:	b087      	sub	sp, #28
     d5c:	af00      	add	r7, sp, #0
     d5e:	60f8      	str	r0, [r7, #12]
     d60:	460b      	mov	r3, r1
     d62:	607a      	str	r2, [r7, #4]
     d64:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     d66:	2300      	movs	r3, #0
     d68:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     d6a:	687b      	ldr	r3, [r7, #4]
     d6c:	2b00      	cmp	r3, #0
     d6e:	dc0c      	bgt.n	d8a <padbuffer+0x32>
    {
        return i32Cnt;
     d70:	697b      	ldr	r3, [r7, #20]
     d72:	e010      	b.n	d96 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     d74:	68fb      	ldr	r3, [r7, #12]
     d76:	2b00      	cmp	r3, #0
     d78:	d004      	beq.n	d84 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     d7a:	68fb      	ldr	r3, [r7, #12]
     d7c:	1c5a      	adds	r2, r3, #1
     d7e:	60fa      	str	r2, [r7, #12]
     d80:	7afa      	ldrb	r2, [r7, #11]
     d82:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     d84:	697b      	ldr	r3, [r7, #20]
     d86:	3301      	adds	r3, #1
     d88:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
     d8a:	687b      	ldr	r3, [r7, #4]
     d8c:	1e5a      	subs	r2, r3, #1
     d8e:	607a      	str	r2, [r7, #4]
     d90:	2b00      	cmp	r3, #0
     d92:	d1ef      	bne.n	d74 <padbuffer+0x1c>
    }

    return i32Cnt;
     d94:	697b      	ldr	r3, [r7, #20]
}
     d96:	4618      	mov	r0, r3
     d98:	371c      	adds	r7, #28
     d9a:	46bd      	mov	sp, r7
     d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
     da0:	4770      	bx	lr
	...

00000da4 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     da4:	b590      	push	{r4, r7, lr}
     da6:	b08f      	sub	sp, #60	; 0x3c
     da8:	af00      	add	r7, sp, #0
     daa:	60f8      	str	r0, [r7, #12]
     dac:	60b9      	str	r1, [r7, #8]
     dae:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
     db0:	68bb      	ldr	r3, [r7, #8]
     db2:	681b      	ldr	r3, [r3, #0]
     db4:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
     db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     db8:	2b03      	cmp	r3, #3
     dba:	dc02      	bgt.n	dc2 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     dbc:	f06f 0302 	mvn.w	r3, #2
     dc0:	e0e7      	b.n	f92 <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
     dc2:	edd7 7a03 	vldr	s15, [r7, #12]
     dc6:	eef5 7a40 	vcmp.f32	s15, #0.0
     dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     dce:	d104      	bne.n	dda <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     dd0:	68bb      	ldr	r3, [r7, #8]
     dd2:	4a72      	ldr	r2, [pc, #456]	; (f9c <ftoa+0x1f8>)
     dd4:	601a      	str	r2, [r3, #0]
        return 3;
     dd6:	2303      	movs	r3, #3
     dd8:	e0db      	b.n	f92 <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
     dda:	68bb      	ldr	r3, [r7, #8]
     ddc:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
     dde:	68fb      	ldr	r3, [r7, #12]
     de0:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     de2:	693b      	ldr	r3, [r7, #16]
     de4:	15db      	asrs	r3, r3, #23
     de6:	b2db      	uxtb	r3, r3
     de8:	3b7f      	subs	r3, #127	; 0x7f
     dea:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     dec:	693b      	ldr	r3, [r7, #16]
     dee:	f3c3 0316 	ubfx	r3, r3, #0, #23
     df2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     df6:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
     df8:	2300      	movs	r3, #0
     dfa:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     dfc:	2300      	movs	r3, #0
     dfe:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     e00:	69fb      	ldr	r3, [r7, #28]
     e02:	2b1e      	cmp	r3, #30
     e04:	dd02      	ble.n	e0c <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     e06:	f06f 0301 	mvn.w	r3, #1
     e0a:	e0c2      	b.n	f92 <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
     e0c:	69fb      	ldr	r3, [r7, #28]
     e0e:	f113 0f17 	cmn.w	r3, #23
     e12:	da02      	bge.n	e1a <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     e14:	f04f 33ff 	mov.w	r3, #4294967295
     e18:	e0bb      	b.n	f92 <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
     e1a:	69fb      	ldr	r3, [r7, #28]
     e1c:	2b16      	cmp	r3, #22
     e1e:	dd06      	ble.n	e2e <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
     e20:	69fb      	ldr	r3, [r7, #28]
     e22:	3b17      	subs	r3, #23
     e24:	69ba      	ldr	r2, [r7, #24]
     e26:	fa02 f303 	lsl.w	r3, r2, r3
     e2a:	637b      	str	r3, [r7, #52]	; 0x34
     e2c:	e01a      	b.n	e64 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     e2e:	69fb      	ldr	r3, [r7, #28]
     e30:	2b00      	cmp	r3, #0
     e32:	db0f      	blt.n	e54 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
     e34:	69fb      	ldr	r3, [r7, #28]
     e36:	f1c3 0317 	rsb	r3, r3, #23
     e3a:	69ba      	ldr	r2, [r7, #24]
     e3c:	fa42 f303 	asr.w	r3, r2, r3
     e40:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
     e42:	69fb      	ldr	r3, [r7, #28]
     e44:	3301      	adds	r3, #1
     e46:	69ba      	ldr	r2, [r7, #24]
     e48:	fa02 f303 	lsl.w	r3, r2, r3
     e4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     e50:	633b      	str	r3, [r7, #48]	; 0x30
     e52:	e007      	b.n	e64 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
     e54:	69bb      	ldr	r3, [r7, #24]
     e56:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     e5a:	69fb      	ldr	r3, [r7, #28]
     e5c:	43db      	mvns	r3, r3
     e5e:	fa42 f303 	asr.w	r3, r2, r3
     e62:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     e64:	693b      	ldr	r3, [r7, #16]
     e66:	2b00      	cmp	r3, #0
     e68:	da04      	bge.n	e74 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     e6a:	68bb      	ldr	r3, [r7, #8]
     e6c:	1c5a      	adds	r2, r3, #1
     e6e:	60ba      	str	r2, [r7, #8]
     e70:	222d      	movs	r2, #45	; 0x2d
     e72:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e76:	2b00      	cmp	r3, #0
     e78:	d105      	bne.n	e86 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     e7a:	68bb      	ldr	r3, [r7, #8]
     e7c:	1c5a      	adds	r2, r3, #1
     e7e:	60ba      	str	r2, [r7, #8]
     e80:	2230      	movs	r2, #48	; 0x30
     e82:	701a      	strb	r2, [r3, #0]
     e84:	e021      	b.n	eca <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e88:	2b00      	cmp	r3, #0
     e8a:	dd08      	ble.n	e9e <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e8e:	ea4f 74e3 	mov.w	r4, r3, asr #31
     e92:	68ba      	ldr	r2, [r7, #8]
     e94:	4618      	mov	r0, r3
     e96:	4621      	mov	r1, r4
     e98:	f7ff fe9b 	bl	bd2 <uint64_to_str>
     e9c:	e011      	b.n	ec2 <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     e9e:	68bb      	ldr	r3, [r7, #8]
     ea0:	1c5a      	adds	r2, r3, #1
     ea2:	60ba      	str	r2, [r7, #8]
     ea4:	222d      	movs	r2, #45	; 0x2d
     ea6:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     eaa:	425b      	negs	r3, r3
     eac:	ea4f 74e3 	mov.w	r4, r3, asr #31
     eb0:	68ba      	ldr	r2, [r7, #8]
     eb2:	4618      	mov	r0, r3
     eb4:	4621      	mov	r1, r4
     eb6:	f7ff fe8c 	bl	bd2 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     eba:	e002      	b.n	ec2 <ftoa+0x11e>
        {
            pcBuf++;
     ebc:	68bb      	ldr	r3, [r7, #8]
     ebe:	3301      	adds	r3, #1
     ec0:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
     ec2:	68bb      	ldr	r3, [r7, #8]
     ec4:	781b      	ldrb	r3, [r3, #0]
     ec6:	2b00      	cmp	r3, #0
     ec8:	d1f8      	bne.n	ebc <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     eca:	68bb      	ldr	r3, [r7, #8]
     ecc:	1c5a      	adds	r2, r3, #1
     ece:	60ba      	str	r2, [r7, #8]
     ed0:	222e      	movs	r2, #46	; 0x2e
     ed2:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ed6:	2b00      	cmp	r3, #0
     ed8:	d105      	bne.n	ee6 <ftoa+0x142>
    {
        *pcBuf++ = '0';
     eda:	68bb      	ldr	r3, [r7, #8]
     edc:	1c5a      	adds	r2, r3, #1
     ede:	60ba      	str	r2, [r7, #8]
     ee0:	2230      	movs	r2, #48	; 0x30
     ee2:	701a      	strb	r2, [r3, #0]
     ee4:	e04f      	b.n	f86 <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     ee6:	68ba      	ldr	r2, [r7, #8]
     ee8:	6a3b      	ldr	r3, [r7, #32]
     eea:	1ad3      	subs	r3, r2, r3
     eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     eee:	1ad3      	subs	r3, r2, r3
     ef0:	3b01      	subs	r3, #1
     ef2:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     ef4:	697a      	ldr	r2, [r7, #20]
     ef6:	687b      	ldr	r3, [r7, #4]
     ef8:	4293      	cmp	r3, r2
     efa:	bfa8      	it	ge
     efc:	4613      	movge	r3, r2
     efe:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
     f00:	2300      	movs	r3, #0
     f02:	62bb      	str	r3, [r7, #40]	; 0x28
     f04:	e015      	b.n	f32 <ftoa+0x18e>
        {
            i32FracPart *= 10;
     f06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     f08:	4613      	mov	r3, r2
     f0a:	009b      	lsls	r3, r3, #2
     f0c:	4413      	add	r3, r2
     f0e:	005b      	lsls	r3, r3, #1
     f10:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     f12:	68bb      	ldr	r3, [r7, #8]
     f14:	1c5a      	adds	r2, r3, #1
     f16:	60ba      	str	r2, [r7, #8]
     f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     f1a:	1612      	asrs	r2, r2, #24
     f1c:	b2d2      	uxtb	r2, r2
     f1e:	3230      	adds	r2, #48	; 0x30
     f20:	b2d2      	uxtb	r2, r2
     f22:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f26:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     f2a:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
     f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
     f2e:	3301      	adds	r3, #1
     f30:	62bb      	str	r3, [r7, #40]	; 0x28
     f32:	6aba      	ldr	r2, [r7, #40]	; 0x28
     f34:	697b      	ldr	r3, [r7, #20]
     f36:	429a      	cmp	r2, r3
     f38:	dbe5      	blt.n	f06 <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
     f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     f3c:	4613      	mov	r3, r2
     f3e:	009b      	lsls	r3, r3, #2
     f40:	4413      	add	r3, r2
     f42:	005b      	lsls	r3, r3, #1
     f44:	161b      	asrs	r3, r3, #24
     f46:	2b04      	cmp	r3, #4
     f48:	dd1d      	ble.n	f86 <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
     f4a:	68bb      	ldr	r3, [r7, #8]
     f4c:	3b01      	subs	r3, #1
     f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     f50:	e015      	b.n	f7e <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
     f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f54:	781b      	ldrb	r3, [r3, #0]
     f56:	2b2e      	cmp	r3, #46	; 0x2e
     f58:	d00e      	beq.n	f78 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
     f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f5c:	781b      	ldrb	r3, [r3, #0]
     f5e:	2b39      	cmp	r3, #57	; 0x39
     f60:	d103      	bne.n	f6a <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
     f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f64:	2230      	movs	r2, #48	; 0x30
     f66:	701a      	strb	r2, [r3, #0]
     f68:	e006      	b.n	f78 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
     f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f6c:	781b      	ldrb	r3, [r3, #0]
     f6e:	3301      	adds	r3, #1
     f70:	b2da      	uxtb	r2, r3
     f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f74:	701a      	strb	r2, [r3, #0]
                    break;
     f76:	e006      	b.n	f86 <ftoa+0x1e2>
                }
                pcBuftmp--;
     f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f7a:	3b01      	subs	r3, #1
     f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     f80:	6a3b      	ldr	r3, [r7, #32]
     f82:	429a      	cmp	r2, r3
     f84:	d2e5      	bcs.n	f52 <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     f86:	68bb      	ldr	r3, [r7, #8]
     f88:	2200      	movs	r2, #0
     f8a:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     f8c:	68ba      	ldr	r2, [r7, #8]
     f8e:	6a3b      	ldr	r3, [r7, #32]
     f90:	1ad3      	subs	r3, r2, r3
} // ftoa()
     f92:	4618      	mov	r0, r3
     f94:	373c      	adds	r7, #60	; 0x3c
     f96:	46bd      	mov	sp, r7
     f98:	bd90      	pop	{r4, r7, pc}
     f9a:	bf00      	nop
     f9c:	00302e30 	.word	0x00302e30

00000fa0 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     fa0:	b590      	push	{r4, r7, lr}
     fa2:	b095      	sub	sp, #84	; 0x54
     fa4:	af00      	add	r7, sp, #0
     fa6:	60f8      	str	r0, [r7, #12]
     fa8:	60b9      	str	r1, [r7, #8]
     faa:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     fac:	2300      	movs	r3, #0
     fae:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     fb0:	2300      	movs	r3, #0
     fb2:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     fb4:	e2e3      	b.n	157e <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     fb6:	2306      	movs	r3, #6
     fb8:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     fba:	68bb      	ldr	r3, [r7, #8]
     fbc:	781b      	ldrb	r3, [r3, #0]
     fbe:	2b25      	cmp	r3, #37	; 0x25
     fc0:	d01f      	beq.n	1002 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     fc2:	68fb      	ldr	r3, [r7, #12]
     fc4:	2b00      	cmp	r3, #0
     fc6:	d015      	beq.n	ff4 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     fc8:	68bb      	ldr	r3, [r7, #8]
     fca:	781b      	ldrb	r3, [r3, #0]
     fcc:	2b0a      	cmp	r3, #10
     fce:	d10b      	bne.n	fe8 <am_util_stdio_vsprintf+0x48>
     fd0:	4bb1      	ldr	r3, [pc, #708]	; (1298 <am_util_stdio_vsprintf+0x2f8>)
     fd2:	781b      	ldrb	r3, [r3, #0]
     fd4:	2b00      	cmp	r3, #0
     fd6:	d007      	beq.n	fe8 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     fd8:	68fb      	ldr	r3, [r7, #12]
     fda:	1c5a      	adds	r2, r3, #1
     fdc:	60fa      	str	r2, [r7, #12]
     fde:	220d      	movs	r2, #13
     fe0:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fe4:	3301      	adds	r3, #1
     fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     fe8:	68fb      	ldr	r3, [r7, #12]
     fea:	1c5a      	adds	r2, r3, #1
     fec:	60fa      	str	r2, [r7, #12]
     fee:	68ba      	ldr	r2, [r7, #8]
     ff0:	7812      	ldrb	r2, [r2, #0]
     ff2:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     ff4:	68bb      	ldr	r3, [r7, #8]
     ff6:	3301      	adds	r3, #1
     ff8:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ffc:	3301      	adds	r3, #1
     ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    1000:	e2bd      	b.n	157e <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    1002:	68bb      	ldr	r3, [r7, #8]
    1004:	3301      	adds	r3, #1
    1006:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    1008:	2300      	movs	r3, #0
    100a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    100e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1012:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    1016:	2320      	movs	r3, #32
    1018:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    101c:	68bb      	ldr	r3, [r7, #8]
    101e:	781b      	ldrb	r3, [r3, #0]
    1020:	2b30      	cmp	r3, #48	; 0x30
    1022:	d105      	bne.n	1030 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    1024:	2330      	movs	r3, #48	; 0x30
    1026:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    102a:	68bb      	ldr	r3, [r7, #8]
    102c:	3301      	adds	r3, #1
    102e:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    1030:	f107 0310 	add.w	r3, r7, #16
    1034:	4619      	mov	r1, r3
    1036:	68b8      	ldr	r0, [r7, #8]
    1038:	f7ff fd85 	bl	b46 <decstr_to_int>
    103c:	4603      	mov	r3, r0
    103e:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    1040:	693b      	ldr	r3, [r7, #16]
    1042:	68ba      	ldr	r2, [r7, #8]
    1044:	4413      	add	r3, r2
    1046:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    1048:	68bb      	ldr	r3, [r7, #8]
    104a:	781b      	ldrb	r3, [r3, #0]
    104c:	2b73      	cmp	r3, #115	; 0x73
    104e:	d005      	beq.n	105c <am_util_stdio_vsprintf+0xbc>
    1050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1052:	2b00      	cmp	r3, #0
    1054:	da02      	bge.n	105c <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    1056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1058:	425b      	negs	r3, r3
    105a:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    105c:	68bb      	ldr	r3, [r7, #8]
    105e:	781b      	ldrb	r3, [r3, #0]
    1060:	2b2e      	cmp	r3, #46	; 0x2e
    1062:	d10e      	bne.n	1082 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    1064:	68bb      	ldr	r3, [r7, #8]
    1066:	3301      	adds	r3, #1
    1068:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    106a:	f107 0310 	add.w	r3, r7, #16
    106e:	4619      	mov	r1, r3
    1070:	68b8      	ldr	r0, [r7, #8]
    1072:	f7ff fd68 	bl	b46 <decstr_to_int>
    1076:	4603      	mov	r3, r0
    1078:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    107a:	693b      	ldr	r3, [r7, #16]
    107c:	68ba      	ldr	r2, [r7, #8]
    107e:	4413      	add	r3, r2
    1080:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    1082:	68bb      	ldr	r3, [r7, #8]
    1084:	781b      	ldrb	r3, [r3, #0]
    1086:	2b6c      	cmp	r3, #108	; 0x6c
    1088:	d10c      	bne.n	10a4 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    108a:	68bb      	ldr	r3, [r7, #8]
    108c:	3301      	adds	r3, #1
    108e:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    1090:	68bb      	ldr	r3, [r7, #8]
    1092:	781b      	ldrb	r3, [r3, #0]
    1094:	2b6c      	cmp	r3, #108	; 0x6c
    1096:	d105      	bne.n	10a4 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    1098:	68bb      	ldr	r3, [r7, #8]
    109a:	3301      	adds	r3, #1
    109c:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    109e:	2301      	movs	r3, #1
    10a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    10a4:	68bb      	ldr	r3, [r7, #8]
    10a6:	781b      	ldrb	r3, [r3, #0]
    10a8:	3b46      	subs	r3, #70	; 0x46
    10aa:	2b32      	cmp	r3, #50	; 0x32
    10ac:	f200 8254 	bhi.w	1558 <am_util_stdio_vsprintf+0x5b8>
    10b0:	a201      	add	r2, pc, #4	; (adr r2, 10b8 <am_util_stdio_vsprintf+0x118>)
    10b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    10b6:	bf00      	nop
    10b8:	000014e3 	.word	0x000014e3
    10bc:	00001559 	.word	0x00001559
    10c0:	00001559 	.word	0x00001559
    10c4:	00001559 	.word	0x00001559
    10c8:	00001559 	.word	0x00001559
    10cc:	00001559 	.word	0x00001559
    10d0:	00001559 	.word	0x00001559
    10d4:	00001559 	.word	0x00001559
    10d8:	00001559 	.word	0x00001559
    10dc:	00001559 	.word	0x00001559
    10e0:	00001559 	.word	0x00001559
    10e4:	00001559 	.word	0x00001559
    10e8:	00001559 	.word	0x00001559
    10ec:	00001559 	.word	0x00001559
    10f0:	00001559 	.word	0x00001559
    10f4:	00001559 	.word	0x00001559
    10f8:	00001559 	.word	0x00001559
    10fc:	00001559 	.word	0x00001559
    1100:	0000127f 	.word	0x0000127f
    1104:	00001559 	.word	0x00001559
    1108:	00001559 	.word	0x00001559
    110c:	00001559 	.word	0x00001559
    1110:	00001559 	.word	0x00001559
    1114:	00001559 	.word	0x00001559
    1118:	00001559 	.word	0x00001559
    111c:	00001559 	.word	0x00001559
    1120:	00001559 	.word	0x00001559
    1124:	00001559 	.word	0x00001559
    1128:	00001559 	.word	0x00001559
    112c:	00001185 	.word	0x00001185
    1130:	000013ab 	.word	0x000013ab
    1134:	00001559 	.word	0x00001559
    1138:	000014e3 	.word	0x000014e3
    113c:	00001559 	.word	0x00001559
    1140:	00001559 	.word	0x00001559
    1144:	000013ab 	.word	0x000013ab
    1148:	00001559 	.word	0x00001559
    114c:	00001559 	.word	0x00001559
    1150:	00001559 	.word	0x00001559
    1154:	00001559 	.word	0x00001559
    1158:	00001559 	.word	0x00001559
    115c:	00001559 	.word	0x00001559
    1160:	00001559 	.word	0x00001559
    1164:	00001559 	.word	0x00001559
    1168:	00001559 	.word	0x00001559
    116c:	000011ab 	.word	0x000011ab
    1170:	00001559 	.word	0x00001559
    1174:	00001319 	.word	0x00001319
    1178:	00001559 	.word	0x00001559
    117c:	00001559 	.word	0x00001559
    1180:	00001279 	.word	0x00001279
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    1184:	687b      	ldr	r3, [r7, #4]
    1186:	1d1a      	adds	r2, r3, #4
    1188:	607a      	str	r2, [r7, #4]
    118a:	681b      	ldr	r3, [r3, #0]
    118c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    1190:	68fb      	ldr	r3, [r7, #12]
    1192:	2b00      	cmp	r3, #0
    1194:	d005      	beq.n	11a2 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    1196:	68fb      	ldr	r3, [r7, #12]
    1198:	1c5a      	adds	r2, r3, #1
    119a:	60fa      	str	r2, [r7, #12]
    119c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    11a0:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    11a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11a4:	3301      	adds	r3, #1
    11a6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    11a8:	e1e6      	b.n	1578 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    11aa:	687b      	ldr	r3, [r7, #4]
    11ac:	1d1a      	adds	r2, r3, #4
    11ae:	607a      	str	r2, [r7, #4]
    11b0:	681b      	ldr	r3, [r3, #0]
    11b2:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    11b4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    11b6:	f7ff fdb4 	bl	d22 <simple_strlen>
    11ba:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    11bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11be:	2b00      	cmp	r3, #0
    11c0:	dd2e      	ble.n	1220 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    11c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    11c6:	429a      	cmp	r2, r3
    11c8:	d22a      	bcs.n	1220 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    11ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
    11cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    11ce:	1ad3      	subs	r3, r2, r3
    11d0:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    11d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    11d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
    11d8:	4619      	mov	r1, r3
    11da:	68f8      	ldr	r0, [r7, #12]
    11dc:	f7ff fdbc 	bl	d58 <padbuffer>
    11e0:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    11e2:	68fb      	ldr	r3, [r7, #12]
    11e4:	2b00      	cmp	r3, #0
    11e6:	d001      	beq.n	11ec <am_util_stdio_vsprintf+0x24c>
    11e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11ea:	e000      	b.n	11ee <am_util_stdio_vsprintf+0x24e>
    11ec:	2300      	movs	r3, #0
    11ee:	68fa      	ldr	r2, [r7, #12]
    11f0:	4413      	add	r3, r2
    11f2:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    11f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    11f8:	4413      	add	r3, r2
    11fa:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    11fc:	2300      	movs	r3, #0
    11fe:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    1200:	e00e      	b.n	1220 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    1202:	68fb      	ldr	r3, [r7, #12]
    1204:	2b00      	cmp	r3, #0
    1206:	d005      	beq.n	1214 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    1208:	68fb      	ldr	r3, [r7, #12]
    120a:	1c5a      	adds	r2, r3, #1
    120c:	60fa      	str	r2, [r7, #12]
    120e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1210:	7812      	ldrb	r2, [r2, #0]
    1212:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    1214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1216:	3301      	adds	r3, #1
    1218:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    121a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    121c:	3301      	adds	r3, #1
    121e:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    1220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1222:	781b      	ldrb	r3, [r3, #0]
    1224:	2b00      	cmp	r3, #0
    1226:	d1ec      	bne.n	1202 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    1228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    122a:	2b00      	cmp	r3, #0
    122c:	f000 81a1 	beq.w	1572 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    1230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1232:	425b      	negs	r3, r3
    1234:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    1236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    123a:	429a      	cmp	r2, r3
    123c:	f080 8199 	bcs.w	1572 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1240:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1244:	1ad3      	subs	r3, r2, r3
    1246:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1248:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    124c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    124e:	4619      	mov	r1, r3
    1250:	68f8      	ldr	r0, [r7, #12]
    1252:	f7ff fd81 	bl	d58 <padbuffer>
    1256:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    1258:	68fb      	ldr	r3, [r7, #12]
    125a:	2b00      	cmp	r3, #0
    125c:	d001      	beq.n	1262 <am_util_stdio_vsprintf+0x2c2>
    125e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1260:	e000      	b.n	1264 <am_util_stdio_vsprintf+0x2c4>
    1262:	2300      	movs	r3, #0
    1264:	68fa      	ldr	r2, [r7, #12]
    1266:	4413      	add	r3, r2
    1268:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    126a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    126c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    126e:	4413      	add	r3, r2
    1270:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1272:	2300      	movs	r3, #0
    1274:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    1276:	e17c      	b.n	1572 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    1278:	2301      	movs	r3, #1
    127a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    127e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1282:	2b00      	cmp	r3, #0
    1284:	d00a      	beq.n	129c <am_util_stdio_vsprintf+0x2fc>
    1286:	687b      	ldr	r3, [r7, #4]
    1288:	3307      	adds	r3, #7
    128a:	f023 0307 	bic.w	r3, r3, #7
    128e:	f103 0208 	add.w	r2, r3, #8
    1292:	607a      	str	r2, [r7, #4]
    1294:	cb18      	ldmia	r3, {r3, r4}
    1296:	e007      	b.n	12a8 <am_util_stdio_vsprintf+0x308>
    1298:	1000114c 	.word	0x1000114c
                                      va_arg(pArgs, uint32_t);
    129c:	687b      	ldr	r3, [r7, #4]
    129e:	1d1a      	adds	r2, r3, #4
    12a0:	607a      	str	r2, [r7, #4]
    12a2:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    12a4:	f04f 0400 	mov.w	r4, #0
    12a8:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    12ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12ae:	2b00      	cmp	r3, #0
    12b0:	d01e      	beq.n	12f0 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    12b2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    12b6:	f7ff fc22 	bl	afe <ndigits_in_hex>
    12ba:	4602      	mov	r2, r0
    12bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12be:	1a9b      	subs	r3, r3, r2
    12c0:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    12c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    12c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
    12c8:	4619      	mov	r1, r3
    12ca:	68f8      	ldr	r0, [r7, #12]
    12cc:	f7ff fd44 	bl	d58 <padbuffer>
    12d0:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    12d2:	68fb      	ldr	r3, [r7, #12]
    12d4:	2b00      	cmp	r3, #0
    12d6:	d001      	beq.n	12dc <am_util_stdio_vsprintf+0x33c>
    12d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12da:	e000      	b.n	12de <am_util_stdio_vsprintf+0x33e>
    12dc:	2300      	movs	r3, #0
    12de:	68fa      	ldr	r2, [r7, #12]
    12e0:	4413      	add	r3, r2
    12e2:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    12e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    12e8:	4413      	add	r3, r2
    12ea:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    12ec:	2300      	movs	r3, #0
    12ee:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    12f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    12f4:	68fa      	ldr	r2, [r7, #12]
    12f6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    12fa:	f7ff fcb2 	bl	c62 <uint64_to_hexstr>
    12fe:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1300:	68fb      	ldr	r3, [r7, #12]
    1302:	2b00      	cmp	r3, #0
    1304:	d003      	beq.n	130e <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    1306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1308:	68fa      	ldr	r2, [r7, #12]
    130a:	4413      	add	r3, r2
    130c:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    130e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1310:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1312:	4413      	add	r3, r2
    1314:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1316:	e12f      	b.n	1578 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1318:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    131c:	2b00      	cmp	r3, #0
    131e:	d008      	beq.n	1332 <am_util_stdio_vsprintf+0x392>
    1320:	687b      	ldr	r3, [r7, #4]
    1322:	3307      	adds	r3, #7
    1324:	f023 0307 	bic.w	r3, r3, #7
    1328:	f103 0208 	add.w	r2, r3, #8
    132c:	607a      	str	r2, [r7, #4]
    132e:	cb18      	ldmia	r3, {r3, r4}
    1330:	e005      	b.n	133e <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    1332:	687b      	ldr	r3, [r7, #4]
    1334:	1d1a      	adds	r2, r3, #4
    1336:	607a      	str	r2, [r7, #4]
    1338:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    133a:	f04f 0400 	mov.w	r4, #0
    133e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    1342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1344:	2b00      	cmp	r3, #0
    1346:	d01e      	beq.n	1386 <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    1348:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    134c:	f7ff fb99 	bl	a82 <ndigits_in_u64>
    1350:	4602      	mov	r2, r0
    1352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1354:	1a9b      	subs	r3, r3, r2
    1356:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1358:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    135c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    135e:	4619      	mov	r1, r3
    1360:	68f8      	ldr	r0, [r7, #12]
    1362:	f7ff fcf9 	bl	d58 <padbuffer>
    1366:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1368:	68fb      	ldr	r3, [r7, #12]
    136a:	2b00      	cmp	r3, #0
    136c:	d001      	beq.n	1372 <am_util_stdio_vsprintf+0x3d2>
    136e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1370:	e000      	b.n	1374 <am_util_stdio_vsprintf+0x3d4>
    1372:	2300      	movs	r3, #0
    1374:	68fa      	ldr	r2, [r7, #12]
    1376:	4413      	add	r3, r2
    1378:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    137a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    137c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    137e:	4413      	add	r3, r2
    1380:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1382:	2300      	movs	r3, #0
    1384:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1386:	68fa      	ldr	r2, [r7, #12]
    1388:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    138c:	f7ff fc21 	bl	bd2 <uint64_to_str>
    1390:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1392:	68fb      	ldr	r3, [r7, #12]
    1394:	2b00      	cmp	r3, #0
    1396:	d003      	beq.n	13a0 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    1398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    139a:	68fa      	ldr	r2, [r7, #12]
    139c:	4413      	add	r3, r2
    139e:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    13a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    13a4:	4413      	add	r3, r2
    13a6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    13a8:	e0e6      	b.n	1578 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    13aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    13ae:	2b00      	cmp	r3, #0
    13b0:	d008      	beq.n	13c4 <am_util_stdio_vsprintf+0x424>
    13b2:	687b      	ldr	r3, [r7, #4]
    13b4:	3307      	adds	r3, #7
    13b6:	f023 0307 	bic.w	r3, r3, #7
    13ba:	f103 0208 	add.w	r2, r3, #8
    13be:	607a      	str	r2, [r7, #4]
    13c0:	cb18      	ldmia	r3, {r3, r4}
    13c2:	e005      	b.n	13d0 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    13c4:	687b      	ldr	r3, [r7, #4]
    13c6:	1d1a      	adds	r2, r3, #4
    13c8:	607a      	str	r2, [r7, #4]
    13ca:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    13cc:	ea4f 74e3 	mov.w	r4, r3, asr #31
    13d0:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    13d4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    13d8:	2b00      	cmp	r3, #0
    13da:	f174 0300 	sbcs.w	r3, r4, #0
    13de:	da0a      	bge.n	13f6 <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    13e0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    13e4:	425b      	negs	r3, r3
    13e6:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    13ea:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    13ee:	2301      	movs	r3, #1
    13f0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    13f4:	e006      	b.n	1404 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    13f6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    13fa:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    13fe:	2300      	movs	r3, #0
    1400:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    1404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1406:	2b00      	cmp	r3, #0
    1408:	d04a      	beq.n	14a0 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    140a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    140e:	4618      	mov	r0, r3
    1410:	4621      	mov	r1, r4
    1412:	f7ff fb57 	bl	ac4 <ndigits_in_i64>
    1416:	4602      	mov	r2, r0
    1418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    141a:	1a9b      	subs	r3, r3, r2
    141c:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    141e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1422:	2b00      	cmp	r3, #0
    1424:	d011      	beq.n	144a <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    1426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1428:	3b01      	subs	r3, #1
    142a:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    142c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1430:	2b30      	cmp	r3, #48	; 0x30
    1432:	d10a      	bne.n	144a <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    1434:	68fb      	ldr	r3, [r7, #12]
    1436:	2b00      	cmp	r3, #0
    1438:	d004      	beq.n	1444 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    143a:	68fb      	ldr	r3, [r7, #12]
    143c:	1c5a      	adds	r2, r3, #1
    143e:	60fa      	str	r2, [r7, #12]
    1440:	222d      	movs	r2, #45	; 0x2d
    1442:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    1444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1446:	3301      	adds	r3, #1
    1448:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    144a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    144e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1450:	4619      	mov	r1, r3
    1452:	68f8      	ldr	r0, [r7, #12]
    1454:	f7ff fc80 	bl	d58 <padbuffer>
    1458:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    145a:	68fb      	ldr	r3, [r7, #12]
    145c:	2b00      	cmp	r3, #0
    145e:	d001      	beq.n	1464 <am_util_stdio_vsprintf+0x4c4>
    1460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1462:	e000      	b.n	1466 <am_util_stdio_vsprintf+0x4c6>
    1464:	2300      	movs	r3, #0
    1466:	68fa      	ldr	r2, [r7, #12]
    1468:	4413      	add	r3, r2
    146a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    146c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    146e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1470:	4413      	add	r3, r2
    1472:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1474:	2300      	movs	r3, #0
    1476:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    1478:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    147c:	2b00      	cmp	r3, #0
    147e:	d01e      	beq.n	14be <am_util_stdio_vsprintf+0x51e>
    1480:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1484:	2b20      	cmp	r3, #32
    1486:	d11a      	bne.n	14be <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    1488:	68fb      	ldr	r3, [r7, #12]
    148a:	2b00      	cmp	r3, #0
    148c:	d004      	beq.n	1498 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    148e:	68fb      	ldr	r3, [r7, #12]
    1490:	1c5a      	adds	r2, r3, #1
    1492:	60fa      	str	r2, [r7, #12]
    1494:	222d      	movs	r2, #45	; 0x2d
    1496:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    1498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    149a:	3301      	adds	r3, #1
    149c:	63fb      	str	r3, [r7, #60]	; 0x3c
    149e:	e00e      	b.n	14be <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    14a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    14a4:	2b00      	cmp	r3, #0
    14a6:	d00a      	beq.n	14be <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    14a8:	68fb      	ldr	r3, [r7, #12]
    14aa:	2b00      	cmp	r3, #0
    14ac:	d004      	beq.n	14b8 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    14ae:	68fb      	ldr	r3, [r7, #12]
    14b0:	1c5a      	adds	r2, r3, #1
    14b2:	60fa      	str	r2, [r7, #12]
    14b4:	222d      	movs	r2, #45	; 0x2d
    14b6:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    14b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    14ba:	3301      	adds	r3, #1
    14bc:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    14be:	68fa      	ldr	r2, [r7, #12]
    14c0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    14c4:	f7ff fb85 	bl	bd2 <uint64_to_str>
    14c8:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    14ca:	68fb      	ldr	r3, [r7, #12]
    14cc:	2b00      	cmp	r3, #0
    14ce:	d003      	beq.n	14d8 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    14d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    14d2:	68fa      	ldr	r2, [r7, #12]
    14d4:	4413      	add	r3, r2
    14d6:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    14d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    14da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    14dc:	4413      	add	r3, r2
    14de:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    14e0:	e04a      	b.n	1578 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    14e2:	68fb      	ldr	r3, [r7, #12]
    14e4:	2b00      	cmp	r3, #0
    14e6:	d046      	beq.n	1576 <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    14e8:	687b      	ldr	r3, [r7, #4]
    14ea:	3307      	adds	r3, #7
    14ec:	f023 0307 	bic.w	r3, r3, #7
    14f0:	f103 0208 	add.w	r2, r3, #8
    14f4:	607a      	str	r2, [r7, #4]
    14f6:	cb18      	ldmia	r3, {r3, r4}
    14f8:	4618      	mov	r0, r3
    14fa:	4621      	mov	r1, r4
    14fc:	f7fe fde0 	bl	c0 <__aeabi_d2f>
    1500:	4603      	mov	r3, r0
    1502:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    1504:	68fb      	ldr	r3, [r7, #12]
    1506:	2214      	movs	r2, #20
    1508:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    150a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    150c:	68f9      	ldr	r1, [r7, #12]
    150e:	6978      	ldr	r0, [r7, #20]
    1510:	f7ff fc48 	bl	da4 <ftoa>
    1514:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    1516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1518:	2b00      	cmp	r3, #0
    151a:	da14      	bge.n	1546 <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    151c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    151e:	f1b3 3fff 	cmp.w	r3, #4294967295
    1522:	d102      	bne.n	152a <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    1524:	4b1e      	ldr	r3, [pc, #120]	; (15a0 <am_util_stdio_vsprintf+0x600>)
    1526:	62bb      	str	r3, [r7, #40]	; 0x28
    1528:	e008      	b.n	153c <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    152a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    152c:	f113 0f02 	cmn.w	r3, #2
    1530:	d102      	bne.n	1538 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    1532:	4b1c      	ldr	r3, [pc, #112]	; (15a4 <am_util_stdio_vsprintf+0x604>)
    1534:	62bb      	str	r3, [r7, #40]	; 0x28
    1536:	e001      	b.n	153c <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    1538:	4b1b      	ldr	r3, [pc, #108]	; (15a8 <am_util_stdio_vsprintf+0x608>)
    153a:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    153c:	68fb      	ldr	r3, [r7, #12]
    153e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1540:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    1542:	2303      	movs	r3, #3
    1544:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    1546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1548:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    154a:	4413      	add	r3, r2
    154c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    154e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1550:	68fa      	ldr	r2, [r7, #12]
    1552:	4413      	add	r3, r2
    1554:	60fb      	str	r3, [r7, #12]
                }
                break;
    1556:	e00e      	b.n	1576 <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    1558:	68fb      	ldr	r3, [r7, #12]
    155a:	2b00      	cmp	r3, #0
    155c:	d005      	beq.n	156a <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    155e:	68fb      	ldr	r3, [r7, #12]
    1560:	1c5a      	adds	r2, r3, #1
    1562:	60fa      	str	r2, [r7, #12]
    1564:	68ba      	ldr	r2, [r7, #8]
    1566:	7812      	ldrb	r2, [r2, #0]
    1568:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    156a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    156c:	3301      	adds	r3, #1
    156e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1570:	e002      	b.n	1578 <am_util_stdio_vsprintf+0x5d8>
                break;
    1572:	bf00      	nop
    1574:	e000      	b.n	1578 <am_util_stdio_vsprintf+0x5d8>
                break;
    1576:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    1578:	68bb      	ldr	r3, [r7, #8]
    157a:	3301      	adds	r3, #1
    157c:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    157e:	68bb      	ldr	r3, [r7, #8]
    1580:	781b      	ldrb	r3, [r3, #0]
    1582:	2b00      	cmp	r3, #0
    1584:	f47f ad17 	bne.w	fb6 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    1588:	68fb      	ldr	r3, [r7, #12]
    158a:	2b00      	cmp	r3, #0
    158c:	d002      	beq.n	1594 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    158e:	68fb      	ldr	r3, [r7, #12]
    1590:	2200      	movs	r2, #0
    1592:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    1594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1596:	4618      	mov	r0, r3
    1598:	3754      	adds	r7, #84	; 0x54
    159a:	46bd      	mov	sp, r7
    159c:	bd90      	pop	{r4, r7, pc}
    159e:	bf00      	nop
    15a0:	00302e30 	.word	0x00302e30
    15a4:	00232e23 	.word	0x00232e23
    15a8:	003f2e3f 	.word	0x003f2e3f

000015ac <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    15ac:	b40f      	push	{r0, r1, r2, r3}
    15ae:	b580      	push	{r7, lr}
    15b0:	b082      	sub	sp, #8
    15b2:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    15b4:	f107 0314 	add.w	r3, r7, #20
    15b8:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    15ba:	683a      	ldr	r2, [r7, #0]
    15bc:	6939      	ldr	r1, [r7, #16]
    15be:	4808      	ldr	r0, [pc, #32]	; (15e0 <am_util_stdio_printf+0x34>)
    15c0:	f7ff fcee 	bl	fa0 <am_util_stdio_vsprintf>
    15c4:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    15c6:	4b07      	ldr	r3, [pc, #28]	; (15e4 <am_util_stdio_printf+0x38>)
    15c8:	681b      	ldr	r3, [r3, #0]
    15ca:	4805      	ldr	r0, [pc, #20]	; (15e0 <am_util_stdio_printf+0x34>)
    15cc:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    15ce:	687b      	ldr	r3, [r7, #4]
}
    15d0:	4618      	mov	r0, r3
    15d2:	3708      	adds	r7, #8
    15d4:	46bd      	mov	sp, r7
    15d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    15da:	b004      	add	sp, #16
    15dc:	4770      	bx	lr
    15de:	bf00      	nop
    15e0:	1000104c 	.word	0x1000104c
    15e4:	10001768 	.word	0x10001768

000015e8 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    15e8:	b580      	push	{r7, lr}
    15ea:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    15ec:	4802      	ldr	r0, [pc, #8]	; (15f8 <am_util_stdio_terminal_clear+0x10>)
    15ee:	f7ff ffdd 	bl	15ac <am_util_stdio_printf>
}
    15f2:	bf00      	nop
    15f4:	bd80      	pop	{r7, pc}
    15f6:	bf00      	nop
    15f8:	00002fdc 	.word	0x00002fdc

000015fc <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    15fc:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    15fe:	f001 fb0f 	bl	2c20 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    1602:	f001 fb7b 	bl	2cfc <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    1606:	f001 fc95 	bl	2f34 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    160a:	2001      	movs	r0, #1
    160c:	f001 fb86 	bl	2d1c <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1610:	2001      	movs	r0, #1
    1612:	f000 f905 	bl	1820 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    1616:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    161a:	f001 bb8d 	b.w	2d38 <am_hal_rtc_osc_disable>
    161e:	bf00      	nop

00001620 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    1620:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1622:	4b17      	ldr	r3, [pc, #92]	; (1680 <am_bsp_debug_printf_enable+0x60>)
    1624:	681c      	ldr	r4, [r3, #0]
    1626:	f014 0401 	ands.w	r4, r4, #1
{
    162a:	b087      	sub	sp, #28
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    162c:	d001      	beq.n	1632 <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    162e:	b007      	add	sp, #28
    1630:	bd30      	pop	{r4, r5, pc}
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1632:	4a14      	ldr	r2, [pc, #80]	; (1684 <am_bsp_debug_printf_enable+0x64>)
    1634:	4914      	ldr	r1, [pc, #80]	; (1688 <am_bsp_debug_printf_enable+0x68>)
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    1636:	4d15      	ldr	r5, [pc, #84]	; (168c <am_bsp_debug_printf_enable+0x6c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1638:	6011      	str	r1, [r2, #0]
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    163a:	a806      	add	r0, sp, #24
    163c:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    1640:	f001 fc20 	bl	2e84 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    1644:	f000 fae2 	bl	1c0c <am_hal_interrupt_master_disable>
    1648:	4a11      	ldr	r2, [pc, #68]	; (1690 <am_bsp_debug_printf_enable+0x70>)
    164a:	9000      	str	r0, [sp, #0]
    164c:	4d11      	ldr	r5, [pc, #68]	; (1694 <am_bsp_debug_printf_enable+0x74>)
    164e:	4912      	ldr	r1, [pc, #72]	; (1698 <am_bsp_debug_printf_enable+0x78>)
    1650:	2073      	movs	r0, #115	; 0x73
    1652:	6010      	str	r0, [r2, #0]
    1654:	682b      	ldr	r3, [r5, #0]
    1656:	4811      	ldr	r0, [pc, #68]	; (169c <am_bsp_debug_printf_enable+0x7c>)
    1658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    165c:	602b      	str	r3, [r5, #0]
    165e:	6805      	ldr	r5, [r0, #0]
    1660:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    1664:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    1668:	6003      	str	r3, [r0, #0]
    166a:	6808      	ldr	r0, [r1, #0]
    166c:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    1670:	600d      	str	r5, [r1, #0]
    1672:	6014      	str	r4, [r2, #0]
    1674:	9800      	ldr	r0, [sp, #0]
    1676:	f000 facd 	bl	1c14 <am_hal_interrupt_master_set>
}
    167a:	b007      	add	sp, #28
    167c:	bd30      	pop	{r4, r5, pc}
    167e:	bf00      	nop
    1680:	10001150 	.word	0x10001150
    1684:	e0000e80 	.word	0xe0000e80
    1688:	00150511 	.word	0x00150511
    168c:	000f4240 	.word	0x000f4240
    1690:	40010060 	.word	0x40010060
    1694:	40010054 	.word	0x40010054
    1698:	40010108 	.word	0x40010108
    169c:	40010028 	.word	0x40010028

000016a0 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    16a0:	f001 b95c 	b.w	295c <am_hal_itm_print>

000016a4 <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    16a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16a6:	4605      	mov	r5, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    16a8:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    16ac:	78ab      	ldrb	r3, [r5, #2]
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    16ae:	786c      	ldrb	r4, [r5, #1]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    16b0:	78ef      	ldrb	r7, [r5, #3]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    16b2:	792e      	ldrb	r6, [r5, #4]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    16b4:	79a9      	ldrb	r1, [r5, #6]
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    16b6:	009a      	lsls	r2, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    16b8:	0064      	lsls	r4, r4, #1
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    16ba:	f002 0204 	and.w	r2, r2, #4
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    16be:	f004 0402 	and.w	r4, r4, #2
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    16c2:	4314      	orrs	r4, r2
    16c4:	f047 0701 	orr.w	r7, r7, #1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    16c8:	79ea      	ldrb	r2, [r5, #7]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    16ca:	01f6      	lsls	r6, r6, #7
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    16cc:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    16ce:	b2f6      	uxtb	r6, r6
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    16d0:	7a2f      	ldrb	r7, [r5, #8]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    16d2:	0289      	lsls	r1, r1, #10
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    16d4:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    16d6:	f401 6180 	and.w	r1, r1, #1024	; 0x400
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    16da:	7a6e      	ldrb	r6, [r5, #9]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    16dc:	02d2      	lsls	r2, r2, #11
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    16de:	430c      	orrs	r4, r1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    16e0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    16e4:	7aa9      	ldrb	r1, [r5, #10]
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    16e6:	033f      	lsls	r7, r7, #12
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    16e8:	4314      	orrs	r4, r2
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    16ea:	b2bf      	uxth	r7, r7
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    16ec:	0436      	lsls	r6, r6, #16
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    16ee:	7aea      	ldrb	r2, [r5, #11]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    16f0:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    16f2:	0509      	lsls	r1, r1, #20
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    16f4:	f406 2770 	and.w	r7, r6, #983040	; 0xf0000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    16f8:	0612      	lsls	r2, r2, #24
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    16fa:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    16fc:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    1700:	009b      	lsls	r3, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    1702:	f002 7780 	and.w	r7, r2, #16777216	; 0x1000000
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1706:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    1708:	f003 0108 	and.w	r1, r3, #8
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    170c:	433c      	orrs	r4, r7
    170e:	430c      	orrs	r4, r1
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1710:	f001 f980 	bl	2a14 <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1714:	482c      	ldr	r0, [pc, #176]	; (17c8 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1716:	4b2d      	ldr	r3, [pc, #180]	; (17cc <am_hal_cachectrl_enable+0x128>)
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1718:	6004      	str	r4, [r0, #0]
    171a:	2232      	movs	r2, #50	; 0x32
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    171c:	681e      	ldr	r6, [r3, #0]
    171e:	0777      	lsls	r7, r6, #29
    1720:	d41e      	bmi.n	1760 <am_hal_cachectrl_enable+0xbc>
    1722:	681f      	ldr	r7, [r3, #0]
    1724:	077e      	lsls	r6, r7, #29
    1726:	f102 32ff 	add.w	r2, r2, #4294967295
    172a:	d419      	bmi.n	1760 <am_hal_cachectrl_enable+0xbc>
    172c:	6819      	ldr	r1, [r3, #0]
    172e:	074f      	lsls	r7, r1, #29
    1730:	d416      	bmi.n	1760 <am_hal_cachectrl_enable+0xbc>
    1732:	6818      	ldr	r0, [r3, #0]
    1734:	0746      	lsls	r6, r0, #29
    1736:	d413      	bmi.n	1760 <am_hal_cachectrl_enable+0xbc>
    1738:	681e      	ldr	r6, [r3, #0]
    173a:	0770      	lsls	r0, r6, #29
    173c:	d410      	bmi.n	1760 <am_hal_cachectrl_enable+0xbc>
    173e:	681f      	ldr	r7, [r3, #0]
    1740:	0779      	lsls	r1, r7, #29
    1742:	d40d      	bmi.n	1760 <am_hal_cachectrl_enable+0xbc>
    1744:	6819      	ldr	r1, [r3, #0]
    1746:	074f      	lsls	r7, r1, #29
    1748:	d40a      	bmi.n	1760 <am_hal_cachectrl_enable+0xbc>
    174a:	6818      	ldr	r0, [r3, #0]
    174c:	0746      	lsls	r6, r0, #29
    174e:	d407      	bmi.n	1760 <am_hal_cachectrl_enable+0xbc>
    1750:	681e      	ldr	r6, [r3, #0]
    1752:	0770      	lsls	r0, r6, #29
    1754:	d404      	bmi.n	1760 <am_hal_cachectrl_enable+0xbc>
    1756:	681f      	ldr	r7, [r3, #0]
    1758:	0779      	lsls	r1, r7, #29
    175a:	d401      	bmi.n	1760 <am_hal_cachectrl_enable+0xbc>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    175c:	3a09      	subs	r2, #9
    175e:	d1dd      	bne.n	171c <am_hal_cachectrl_enable+0x78>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    1760:	4b1a      	ldr	r3, [pc, #104]	; (17cc <am_hal_cachectrl_enable+0x128>)
    1762:	681a      	ldr	r2, [r3, #0]
    1764:	f042 0101 	orr.w	r1, r2, #1
    1768:	6019      	str	r1, [r3, #0]
    176a:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    176c:	6818      	ldr	r0, [r3, #0]
    176e:	0740      	lsls	r0, r0, #29
    1770:	d41e      	bmi.n	17b0 <am_hal_cachectrl_enable+0x10c>
    1772:	681e      	ldr	r6, [r3, #0]
    1774:	0771      	lsls	r1, r6, #29
    1776:	f102 32ff 	add.w	r2, r2, #4294967295
    177a:	d419      	bmi.n	17b0 <am_hal_cachectrl_enable+0x10c>
    177c:	681f      	ldr	r7, [r3, #0]
    177e:	077f      	lsls	r7, r7, #29
    1780:	d416      	bmi.n	17b0 <am_hal_cachectrl_enable+0x10c>
    1782:	6819      	ldr	r1, [r3, #0]
    1784:	074e      	lsls	r6, r1, #29
    1786:	d413      	bmi.n	17b0 <am_hal_cachectrl_enable+0x10c>
    1788:	6818      	ldr	r0, [r3, #0]
    178a:	0740      	lsls	r0, r0, #29
    178c:	d410      	bmi.n	17b0 <am_hal_cachectrl_enable+0x10c>
    178e:	681e      	ldr	r6, [r3, #0]
    1790:	0771      	lsls	r1, r6, #29
    1792:	d40d      	bmi.n	17b0 <am_hal_cachectrl_enable+0x10c>
    1794:	681f      	ldr	r7, [r3, #0]
    1796:	077f      	lsls	r7, r7, #29
    1798:	d40a      	bmi.n	17b0 <am_hal_cachectrl_enable+0x10c>
    179a:	6819      	ldr	r1, [r3, #0]
    179c:	074e      	lsls	r6, r1, #29
    179e:	d407      	bmi.n	17b0 <am_hal_cachectrl_enable+0x10c>
    17a0:	6818      	ldr	r0, [r3, #0]
    17a2:	0740      	lsls	r0, r0, #29
    17a4:	d404      	bmi.n	17b0 <am_hal_cachectrl_enable+0x10c>
    17a6:	681e      	ldr	r6, [r3, #0]
    17a8:	0771      	lsls	r1, r6, #29
    17aa:	d401      	bmi.n	17b0 <am_hal_cachectrl_enable+0x10c>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    17ac:	3a09      	subs	r2, #9
    17ae:	d1dd      	bne.n	176c <am_hal_cachectrl_enable+0xc8>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    17b0:	796d      	ldrb	r5, [r5, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    17b2:	4f05      	ldr	r7, [pc, #20]	; (17c8 <am_hal_cachectrl_enable+0x124>)
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );
    17b4:	022b      	lsls	r3, r5, #8
    17b6:	f403 7100 	and.w	r1, r3, #512	; 0x200
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    17ba:	f403 7280 	and.w	r2, r3, #256	; 0x100
    17be:	4311      	orrs	r1, r2
    17c0:	430c      	orrs	r4, r1
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    17c2:	603c      	str	r4, [r7, #0]
    17c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17c6:	bf00      	nop
    17c8:	40018000 	.word	0x40018000
    17cc:	40018008 	.word	0x40018008

000017d0 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    17d0:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    17d2:	4604      	mov	r4, r0
    17d4:	b120      	cbz	r0, 17e0 <am_hal_clkgen_sysclk_select+0x10>
    17d6:	4a06      	ldr	r2, [pc, #24]	; (17f0 <am_hal_clkgen_sysclk_select+0x20>)
    17d8:	4806      	ldr	r0, [pc, #24]	; (17f4 <am_hal_clkgen_sysclk_select+0x24>)
    17da:	2153      	movs	r1, #83	; 0x53
    17dc:	f000 f9e4 	bl	1ba8 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    17e0:	4b05      	ldr	r3, [pc, #20]	; (17f8 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the required operating value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    17e2:	4906      	ldr	r1, [pc, #24]	; (17fc <am_hal_clkgen_sysclk_select+0x2c>)
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    17e4:	2047      	movs	r0, #71	; 0x47

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    17e6:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    17e8:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    17ea:	600c      	str	r4, [r1, #0]
    AM_REG(CLKGEN, CLKKEY) = 0;
    17ec:	601a      	str	r2, [r3, #0]
    17ee:	bd10      	pop	{r4, pc}
    17f0:	00002ffc 	.word	0x00002ffc
    17f4:	00003034 	.word	0x00003034
    17f8:	40004014 	.word	0x40004014
    17fc:	40004018 	.word	0x40004018

00001800 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1800:	4b04      	ldr	r3, [pc, #16]	; (1814 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    1802:	4905      	ldr	r1, [pc, #20]	; (1818 <am_hal_clkgen_sysclk_get+0x18>)
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1804:	681a      	ldr	r2, [r3, #0]
            return 48000000;
    1806:	4805      	ldr	r0, [pc, #20]	; (181c <am_hal_clkgen_sysclk_get+0x1c>)
    switch ( ui32ClockSetting )
    1808:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    180c:	bf08      	it	eq
    180e:	4608      	moveq	r0, r1
    1810:	4770      	bx	lr
    1812:	bf00      	nop
    1814:	40004018 	.word	0x40004018
    1818:	02dc6c00 	.word	0x02dc6c00
    181c:	016e3600 	.word	0x016e3600

00001820 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1820:	0783      	lsls	r3, r0, #30
    1822:	d003      	beq.n	182c <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    1824:	4b02      	ldr	r3, [pc, #8]	; (1830 <am_hal_clkgen_osc_stop+0x10>)
    1826:	681a      	ldr	r2, [r3, #0]
    1828:	4310      	orrs	r0, r2
    182a:	6018      	str	r0, [r3, #0]
    182c:	4770      	bx	lr
    182e:	bf00      	nop
    1830:	4000400c 	.word	0x4000400c

00001834 <am_hal_ctimer_int_service>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_service(uint32_t ui32Status)
{
    1834:	b570      	push	{r4, r5, r6, lr}
    uint32_t ui32Clz;

    am_hal_ctimer_handler_t pfnHandler;

    ui32Status &= 0xFFFF;
    1836:	b284      	uxth	r4, r0

    while ( ui32Status )
    1838:	b184      	cbz	r4, 185c <am_hal_ctimer_int_service+0x28>
    183a:	4e09      	ldr	r6, [pc, #36]	; (1860 <am_hal_ctimer_int_service+0x2c>)
#endif

        //
        // Turn off the bit we picked in the working copy
        //
        ui32Status &= ~(0x80000000 >> ui32Clz);
    183c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
        ui32Clz = __builtin_clz(ui32Status);
    1840:	fab4 f384 	clz	r3, r4

        //
        // Check the bit handler table to see if there is an interrupt handler
        // registered for this particular bit.
        //
        pfnHandler = am_hal_ctimer_ppfnHandlers[31 - ui32Clz];
    1844:	f1c3 021f 	rsb	r2, r3, #31
        ui32Status &= ~(0x80000000 >> ui32Clz);
    1848:	fa25 f003 	lsr.w	r0, r5, r3
        pfnHandler = am_hal_ctimer_ppfnHandlers[31 - ui32Clz];
    184c:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
        ui32Status &= ~(0x80000000 >> ui32Clz);
    1850:	ea24 0400 	bic.w	r4, r4, r0
        if ( pfnHandler )
    1854:	b101      	cbz	r1, 1858 <am_hal_ctimer_int_service+0x24>
        {
            //
            // If we found an interrupt handler routine, call it now.
            //
            pfnHandler();
    1856:	4788      	blx	r1
    while ( ui32Status )
    1858:	2c00      	cmp	r4, #0
    185a:	d1f1      	bne.n	1840 <am_hal_ctimer_int_service+0xc>
    185c:	bd70      	pop	{r4, r5, r6, pc}
    185e:	bf00      	nop
    1860:	1000176c 	.word	0x1000176c

00001864 <am_hal_ctimer_int_register>:
    uint32_t intIdx = 0;

    //
    // Check to make sure the interrupt number is valid. (Debug builds only)
    //
    switch (ui32Interrupt)
    1864:	2880      	cmp	r0, #128	; 0x80
{
    1866:	b510      	push	{r4, lr}
    1868:	460c      	mov	r4, r1
    switch (ui32Interrupt)
    186a:	d050      	beq.n	190e <am_hal_ctimer_int_register+0xaa>
    186c:	d913      	bls.n	1896 <am_hal_ctimer_int_register+0x32>
    186e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    1872:	d02b      	beq.n	18cc <am_hal_ctimer_int_register+0x68>
    1874:	d92e      	bls.n	18d4 <am_hal_ctimer_int_register+0x70>
    1876:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    187a:	d025      	beq.n	18c8 <am_hal_ctimer_int_register+0x64>
    187c:	d935      	bls.n	18ea <am_hal_ctimer_int_register+0x86>
    187e:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    1882:	d038      	beq.n	18f6 <am_hal_ctimer_int_register+0x92>
    1884:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        case AM_REG_CTIMER_INTEN_CTMRA3C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA3C1INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRB3C1INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB3C1INT_S;
    1888:	bf08      	it	eq
    188a:	220f      	moveq	r2, #15
    switch (ui32Interrupt)
    188c:	d10c      	bne.n	18a8 <am_hal_ctimer_int_register+0x44>

        default:
            am_hal_debug_assert_msg(false, "CTimer interrupt number out of range.");
    }

    am_hal_ctimer_ppfnHandlers[intIdx] = pfnHandler;
    188e:	4b23      	ldr	r3, [pc, #140]	; (191c <am_hal_ctimer_int_register+0xb8>)
    1890:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    1894:	bd10      	pop	{r4, pc}
    switch (ui32Interrupt)
    1896:	2808      	cmp	r0, #8
    1898:	d037      	beq.n	190a <am_hal_ctimer_int_register+0xa6>
    189a:	d90d      	bls.n	18b8 <am_hal_ctimer_int_register+0x54>
    189c:	2820      	cmp	r0, #32
    189e:	d032      	beq.n	1906 <am_hal_ctimer_int_register+0xa2>
    18a0:	2840      	cmp	r0, #64	; 0x40
    18a2:	d02e      	beq.n	1902 <am_hal_ctimer_int_register+0x9e>
    18a4:	2810      	cmp	r0, #16
    18a6:	d013      	beq.n	18d0 <am_hal_ctimer_int_register+0x6c>
            am_hal_debug_assert_msg(false, "CTimer interrupt number out of range.");
    18a8:	4a1d      	ldr	r2, [pc, #116]	; (1920 <am_hal_ctimer_int_register+0xbc>)
    18aa:	481e      	ldr	r0, [pc, #120]	; (1924 <am_hal_ctimer_int_register+0xc0>)
    18ac:	f240 11b1 	movw	r1, #433	; 0x1b1
    18b0:	f000 f97a 	bl	1ba8 <am_hal_debug_error>
    uint32_t intIdx = 0;
    18b4:	2200      	movs	r2, #0
    18b6:	e7ea      	b.n	188e <am_hal_ctimer_int_register+0x2a>
    switch (ui32Interrupt)
    18b8:	2802      	cmp	r0, #2
    18ba:	d02c      	beq.n	1916 <am_hal_ctimer_int_register+0xb2>
    18bc:	2804      	cmp	r0, #4
    18be:	d028      	beq.n	1912 <am_hal_ctimer_int_register+0xae>
    18c0:	2801      	cmp	r0, #1
    18c2:	d1f1      	bne.n	18a8 <am_hal_ctimer_int_register+0x44>
            intIdx = AM_REG_CTIMER_INTEN_CTMRA0C0INT_S;
    18c4:	2200      	movs	r2, #0
    18c6:	e7e2      	b.n	188e <am_hal_ctimer_int_register+0x2a>
            intIdx = AM_REG_CTIMER_INTEN_CTMRB2C1INT_S;
    18c8:	220d      	movs	r2, #13
            break;
    18ca:	e7e0      	b.n	188e <am_hal_ctimer_int_register+0x2a>
            intIdx = AM_REG_CTIMER_INTEN_CTMRB1C1INT_S;
    18cc:	220b      	movs	r2, #11
            break;
    18ce:	e7de      	b.n	188e <am_hal_ctimer_int_register+0x2a>
            intIdx = AM_REG_CTIMER_INTEN_CTMRA2C0INT_S;
    18d0:	2204      	movs	r2, #4
            break;
    18d2:	e7dc      	b.n	188e <am_hal_ctimer_int_register+0x2a>
    switch (ui32Interrupt)
    18d4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    18d8:	d011      	beq.n	18fe <am_hal_ctimer_int_register+0x9a>
    18da:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    18de:	d00c      	beq.n	18fa <am_hal_ctimer_int_register+0x96>
    18e0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    18e4:	d1e0      	bne.n	18a8 <am_hal_ctimer_int_register+0x44>
            intIdx = AM_REG_CTIMER_INTEN_CTMRA0C1INT_S;
    18e6:	2208      	movs	r2, #8
            break;
    18e8:	e7d1      	b.n	188e <am_hal_ctimer_int_register+0x2a>
    switch (ui32Interrupt)
    18ea:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
            intIdx = AM_REG_CTIMER_INTEN_CTMRA2C1INT_S;
    18ee:	bf08      	it	eq
    18f0:	220c      	moveq	r2, #12
    switch (ui32Interrupt)
    18f2:	d0cc      	beq.n	188e <am_hal_ctimer_int_register+0x2a>
    18f4:	e7d8      	b.n	18a8 <am_hal_ctimer_int_register+0x44>
            intIdx = AM_REG_CTIMER_INTEN_CTMRA3C1INT_S;
    18f6:	220e      	movs	r2, #14
            break;
    18f8:	e7c9      	b.n	188e <am_hal_ctimer_int_register+0x2a>
            intIdx = AM_REG_CTIMER_INTEN_CTMRA1C1INT_S;
    18fa:	220a      	movs	r2, #10
            break;
    18fc:	e7c7      	b.n	188e <am_hal_ctimer_int_register+0x2a>
            intIdx = AM_REG_CTIMER_INTEN_CTMRB0C1INT_S;
    18fe:	2209      	movs	r2, #9
            break;
    1900:	e7c5      	b.n	188e <am_hal_ctimer_int_register+0x2a>
            intIdx = AM_REG_CTIMER_INTEN_CTMRA3C0INT_S;
    1902:	2206      	movs	r2, #6
            break;
    1904:	e7c3      	b.n	188e <am_hal_ctimer_int_register+0x2a>
            intIdx = AM_REG_CTIMER_INTEN_CTMRB2C0INT_S;
    1906:	2205      	movs	r2, #5
            break;
    1908:	e7c1      	b.n	188e <am_hal_ctimer_int_register+0x2a>
            intIdx = AM_REG_CTIMER_INTEN_CTMRB1C0INT_S;
    190a:	2203      	movs	r2, #3
            break;
    190c:	e7bf      	b.n	188e <am_hal_ctimer_int_register+0x2a>
            intIdx = AM_REG_CTIMER_INTEN_CTMRB3C0INT_S;
    190e:	2207      	movs	r2, #7
            break;
    1910:	e7bd      	b.n	188e <am_hal_ctimer_int_register+0x2a>
            intIdx = AM_REG_CTIMER_INTEN_CTMRA1C0INT_S;
    1912:	2202      	movs	r2, #2
            break;
    1914:	e7bb      	b.n	188e <am_hal_ctimer_int_register+0x2a>
            intIdx = AM_REG_CTIMER_INTEN_CTMRB0C0INT_S;
    1916:	2201      	movs	r2, #1
    1918:	e7b9      	b.n	188e <am_hal_ctimer_int_register+0x2a>
    191a:	bf00      	nop
    191c:	1000176c 	.word	0x1000176c
    1920:	0000304c 	.word	0x0000304c
    1924:	00003074 	.word	0x00003074

00001928 <am_hal_ctimer_config>:
//
//*****************************************************************************
void
am_hal_ctimer_config(uint32_t ui32TimerNumber,
                     am_hal_ctimer_config_t *psConfig)
{
    1928:	b530      	push	{r4, r5, lr}
    192a:	4604      	mov	r4, r0
                      (psConfig->ui32TimerBConfig << 16) );

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    192c:	6808      	ldr	r0, [r1, #0]
                      (psConfig->ui32TimerBConfig << 16) );
    192e:	688a      	ldr	r2, [r1, #8]
    ui32ConfigVal = ( (psConfig->ui32TimerAConfig)  |
    1930:	684b      	ldr	r3, [r1, #4]
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    1932:	2800      	cmp	r0, #0
    ui32ConfigVal = ( (psConfig->ui32TimerAConfig)  |
    1934:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    1938:	bf14      	ite	ne
    193a:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
    193e:	2500      	moveq	r5, #0
{
    1940:	b083      	sub	sp, #12
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    1942:	430d      	orrs	r5, r1

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1944:	f000 f962 	bl	1c0c <am_hal_interrupt_master_disable>

    //
    // Find the correct register to write.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    1948:	0124      	lsls	r4, r4, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    194a:	4a2a      	ldr	r2, [pc, #168]	; (19f4 <am_hal_ctimer_config+0xcc>)
    AM_CRITICAL_BEGIN_ASM
    194c:	9001      	str	r0, [sp, #4]
    ui32TimerASrc = AM_BFR(CTIMER, STCFG, CLKSEL);
    194e:	482a      	ldr	r0, [pc, #168]	; (19f8 <am_hal_ctimer_config+0xd0>)

    //
    // Write our configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    1950:	50a5      	str	r5, [r4, r2]
    ui32TimerASrc = AM_BFR(CTIMER, STCFG, CLKSEL);
    1952:	6805      	ldr	r5, [r0, #0]
    1954:	f005 0c0f 	and.w	ip, r5, #15
    if ( (ui32TimerASrc == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV16)   ||
    1958:	f10c 33ff 	add.w	r3, ip, #4294967295
    195c:	2b01      	cmp	r3, #1
    195e:	d93f      	bls.n	19e0 <am_hal_ctimer_config+0xb8>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    1960:	6811      	ldr	r1, [r2, #0]
    1962:	f3c1 0e44 	ubfx	lr, r1, #1, #5
    1966:	f10e 34ff 	add.w	r4, lr, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    196a:	f3c1 4244 	ubfx	r2, r1, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    196e:	2c04      	cmp	r4, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1970:	f102 30ff 	add.w	r0, r2, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1974:	d934      	bls.n	19e0 <am_hal_ctimer_config+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    1976:	2804      	cmp	r0, #4
    1978:	d932      	bls.n	19e0 <am_hal_ctimer_config+0xb8>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    197a:	4d20      	ldr	r5, [pc, #128]	; (19fc <am_hal_ctimer_config+0xd4>)
    197c:	682b      	ldr	r3, [r5, #0]
    197e:	f3c3 0c44 	ubfx	ip, r3, #1, #5
    1982:	f10c 31ff 	add.w	r1, ip, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1986:	f3c3 4e44 	ubfx	lr, r3, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    198a:	2904      	cmp	r1, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    198c:	f10e 34ff 	add.w	r4, lr, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1990:	d926      	bls.n	19e0 <am_hal_ctimer_config+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    1992:	2c04      	cmp	r4, #4
    1994:	d924      	bls.n	19e0 <am_hal_ctimer_config+0xb8>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    1996:	4a1a      	ldr	r2, [pc, #104]	; (1a00 <am_hal_ctimer_config+0xd8>)
    1998:	6810      	ldr	r0, [r2, #0]
    199a:	f3c0 0544 	ubfx	r5, r0, #1, #5
    199e:	1e69      	subs	r1, r5, #1
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    19a0:	f3c0 4344 	ubfx	r3, r0, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    19a4:	2904      	cmp	r1, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    19a6:	f103 34ff 	add.w	r4, r3, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    19aa:	d919      	bls.n	19e0 <am_hal_ctimer_config+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    19ac:	2c04      	cmp	r4, #4
    19ae:	d917      	bls.n	19e0 <am_hal_ctimer_config+0xb8>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    19b0:	4a14      	ldr	r2, [pc, #80]	; (1a04 <am_hal_ctimer_config+0xdc>)
    19b2:	6810      	ldr	r0, [r2, #0]
    19b4:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    19b8:	f10c 35ff 	add.w	r5, ip, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    19bc:	f3c0 4e44 	ubfx	lr, r0, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    19c0:	2d04      	cmp	r5, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    19c2:	f10e 31ff 	add.w	r1, lr, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    19c6:	d90b      	bls.n	19e0 <am_hal_ctimer_config+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    19c8:	2904      	cmp	r1, #4
    19ca:	d909      	bls.n	19e0 <am_hal_ctimer_config+0xb8>
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    }
    else
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 1);
    19cc:	4c0e      	ldr	r4, [pc, #56]	; (1a08 <am_hal_ctimer_config+0xe0>)
    19ce:	6823      	ldr	r3, [r4, #0]
    19d0:	f043 0204 	orr.w	r2, r3, #4
    19d4:	6022      	str	r2, [r4, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    19d6:	9801      	ldr	r0, [sp, #4]
    19d8:	f000 f91c 	bl	1c14 <am_hal_interrupt_master_set>

} // am_hal_ctimer_config()
    19dc:	b003      	add	sp, #12
    19de:	bd30      	pop	{r4, r5, pc}
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    19e0:	4809      	ldr	r0, [pc, #36]	; (1a08 <am_hal_ctimer_config+0xe0>)
    19e2:	6805      	ldr	r5, [r0, #0]
    19e4:	f025 0104 	bic.w	r1, r5, #4
    19e8:	6001      	str	r1, [r0, #0]
    AM_CRITICAL_END_ASM
    19ea:	9801      	ldr	r0, [sp, #4]
    19ec:	f000 f912 	bl	1c14 <am_hal_interrupt_master_set>
} // am_hal_ctimer_config()
    19f0:	b003      	add	sp, #12
    19f2:	bd30      	pop	{r4, r5, pc}
    19f4:	4000800c 	.word	0x4000800c
    19f8:	40008100 	.word	0x40008100
    19fc:	4000801c 	.word	0x4000801c
    1a00:	4000802c 	.word	0x4000802c
    1a04:	4000803c 	.word	0x4000803c
    1a08:	40021020 	.word	0x40021020

00001a0c <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1a0c:	b570      	push	{r4, r5, r6, lr}
    1a0e:	b082      	sub	sp, #8
    1a10:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    1a12:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1a14:	f000 f8fa 	bl	1c0c <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1a18:	4d07      	ldr	r5, [pc, #28]	; (1a38 <am_hal_ctimer_start+0x2c>)
    AM_CRITICAL_BEGIN_ASM
    1a1a:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    1a1c:	5971      	ldr	r1, [r6, r5]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    1a1e:	f004 2308 	and.w	r3, r4, #134219776	; 0x8000800
    1a22:	ea21 0003 	bic.w	r0, r1, r3
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    1a26:	f004 1201 	and.w	r2, r4, #65537	; 0x10001
    1a2a:	4302      	orrs	r2, r0
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    1a2c:	5172      	str	r2, [r6, r5]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1a2e:	9801      	ldr	r0, [sp, #4]
    1a30:	f000 f8f0 	bl	1c14 <am_hal_interrupt_master_set>
} // am_hal_ctimer_start()
    1a34:	b002      	add	sp, #8
    1a36:	bd70      	pop	{r4, r5, r6, pc}
    1a38:	4000800c 	.word	0x4000800c

00001a3c <am_hal_ctimer_stop>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_stop(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1a3c:	b570      	push	{r4, r5, r6, lr}
    1a3e:	b082      	sub	sp, #8

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    1a40:	0106      	lsls	r6, r0, #4
{
    1a42:	460c      	mov	r4, r1

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1a44:	f000 f8e2 	bl	1c0c <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1a48:	4d06      	ldr	r5, [pc, #24]	; (1a64 <am_hal_ctimer_stop+0x28>)
    AM_CRITICAL_BEGIN_ASM
    1a4a:	9001      	str	r0, [sp, #4]

    //
    // Clear the "enable" bit
    //
    AM_REGVAL(pui32ConfigReg) &= ~(ui32TimerSegment &
    1a4c:	5973      	ldr	r3, [r6, r5]
    1a4e:	f004 1101 	and.w	r1, r4, #65537	; 0x10001
    1a52:	ea23 0001 	bic.w	r0, r3, r1
    1a56:	5170      	str	r0, [r6, r5]
                                    AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1a58:	9801      	ldr	r0, [sp, #4]
    1a5a:	f000 f8db 	bl	1c14 <am_hal_interrupt_master_set>
} // am_hal_ctimer_stop()
    1a5e:	b002      	add	sp, #8
    1a60:	bd70      	pop	{r4, r5, r6, pc}
    1a62:	bf00      	nop
    1a64:	4000800c 	.word	0x4000800c

00001a68 <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1a68:	b570      	push	{r4, r5, r6, lr}
    1a6a:	b082      	sub	sp, #8
    1a6c:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    1a6e:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1a70:	f000 f8cc 	bl	1c0c <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1a74:	4d05      	ldr	r5, [pc, #20]	; (1a8c <am_hal_ctimer_clear+0x24>)
    AM_CRITICAL_BEGIN_ASM
    1a76:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    1a78:	5971      	ldr	r1, [r6, r5]
    1a7a:	f004 2008 	and.w	r0, r4, #134219776	; 0x8000800
    1a7e:	4308      	orrs	r0, r1
    1a80:	5170      	str	r0, [r6, r5]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1a82:	9801      	ldr	r0, [sp, #4]
    1a84:	f000 f8c6 	bl	1c14 <am_hal_interrupt_master_set>
} // am_hal_ctimer_clear()
    1a88:	b002      	add	sp, #8
    1a8a:	bd70      	pop	{r4, r5, r6, pc}
    1a8c:	4000800c 	.word	0x4000800c

00001a90 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1a94:	b082      	sub	sp, #8
    1a96:	4688      	mov	r8, r1
    1a98:	461f      	mov	r7, r3
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    1a9a:	ea4f 1900 	mov.w	r9, r0, lsl #4
{
    1a9e:	4614      	mov	r4, r2
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1aa0:	f000 f8b4 	bl	1c0c <am_hal_interrupt_master_disable>
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1aa4:	f8df a098 	ldr.w	sl, [pc, #152]	; 1b40 <am_hal_ctimer_period_set+0xb0>
    AM_CRITICAL_BEGIN_ASM
    1aa8:	9001      	str	r0, [sp, #4]
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1aaa:	f518 3f80 	cmn.w	r8, #65536	; 0x10000
                                    AM_REG_CTIMER_CMPRA0_O +
    1aae:	4d21      	ldr	r5, [pc, #132]	; (1b34 <am_hal_ctimer_period_set+0xa4>)
                                    AM_REG_CTIMER_CMPRB0_O +
    1ab0:	4e21      	ldr	r6, [pc, #132]	; (1b38 <am_hal_ctimer_period_set+0xa8>)
    ui32Mode = *pui32ControlReg;
    1ab2:	f859 300a 	ldr.w	r3, [r9, sl]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1ab6:	d01b      	beq.n	1af0 <am_hal_ctimer_period_set+0x60>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1ab8:	f403 70c0 	and.w	r0, r3, #384	; 0x180
    1abc:	2880      	cmp	r0, #128	; 0x80
    1abe:	d01c      	beq.n	1afa <am_hal_ctimer_period_set+0x6a>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1ac0:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1ac4:	2300      	movs	r3, #0
    1ac6:	45b8      	cmp	r8, r7
        ui32Comp1 = 0;
    1ac8:	461a      	mov	r2, r3
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1aca:	d01d      	beq.n	1b08 <am_hal_ctimer_period_set+0x78>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1acc:	491b      	ldr	r1, [pc, #108]	; (1b3c <am_hal_ctimer_period_set+0xac>)
    1ace:	4588      	cmp	r8, r1
    1ad0:	d025      	beq.n	1b1e <am_hal_ctimer_period_set+0x8e>
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1 >> 16));
    1ad2:	400a      	ands	r2, r1
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1ad4:	b2a0      	uxth	r0, r4
    1ad6:	4303      	orrs	r3, r0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1ad8:	ea42 4414 	orr.w	r4, r2, r4, lsr #16
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1adc:	f849 3005 	str.w	r3, [r9, r5]
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1ae0:	f849 4006 	str.w	r4, [r9, r6]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1ae4:	9801      	ldr	r0, [sp, #4]
    1ae6:	f000 f895 	bl	1c14 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    1aea:	b002      	add	sp, #8
    1aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ui32Mode = ui32Mode >> 16;
    1af0:	0c19      	lsrs	r1, r3, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1af2:	f401 70c0 	and.w	r0, r1, #384	; 0x180
    1af6:	2880      	cmp	r0, #128	; 0x80
    1af8:	d110      	bne.n	1b1c <am_hal_ctimer_period_set+0x8c>
    1afa:	0423      	lsls	r3, r4, #16
        ui32Comp1 = ui32Period;
    1afc:	4622      	mov	r2, r4
        ui32Comp0 = ui32Period - ui32OnTime;
    1afe:	1be4      	subs	r4, r4, r7
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1b00:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1b04:	45b8      	cmp	r8, r7
    1b06:	d1e1      	bne.n	1acc <am_hal_ctimer_period_set+0x3c>
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1b08:	b2a6      	uxth	r6, r4
    1b0a:	4333      	orrs	r3, r6
    1b0c:	f849 3005 	str.w	r3, [r9, r5]
    AM_CRITICAL_END_ASM
    1b10:	9801      	ldr	r0, [sp, #4]
    1b12:	f000 f87f 	bl	1c14 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    1b16:	b002      	add	sp, #8
    1b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1b1c:	2300      	movs	r3, #0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1b1e:	b2a5      	uxth	r5, r4
    1b20:	432b      	orrs	r3, r5
    1b22:	f849 3006 	str.w	r3, [r9, r6]
    AM_CRITICAL_END_ASM
    1b26:	9801      	ldr	r0, [sp, #4]
    1b28:	f000 f874 	bl	1c14 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    1b2c:	b002      	add	sp, #8
    1b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1b32:	bf00      	nop
    1b34:	40008004 	.word	0x40008004
    1b38:	40008008 	.word	0x40008008
    1b3c:	ffff0000 	.word	0xffff0000
    1b40:	4000800c 	.word	0x4000800c

00001b44 <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    1b44:	b510      	push	{r4, lr}
    1b46:	b082      	sub	sp, #8
    1b48:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1b4a:	f000 f85f 	bl	1c0c <am_hal_interrupt_master_disable>

    //
    // Enable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    1b4e:	4b05      	ldr	r3, [pc, #20]	; (1b64 <am_hal_ctimer_int_enable+0x20>)
    AM_CRITICAL_BEGIN_ASM
    1b50:	9001      	str	r0, [sp, #4]
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    1b52:	6818      	ldr	r0, [r3, #0]
    1b54:	4320      	orrs	r0, r4
    1b56:	6018      	str	r0, [r3, #0]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1b58:	9801      	ldr	r0, [sp, #4]
    1b5a:	f000 f85b 	bl	1c14 <am_hal_interrupt_master_set>
} // am_hal_ctimer_int_enable()
    1b5e:	b002      	add	sp, #8
    1b60:	bd10      	pop	{r4, pc}
    1b62:	bf00      	nop
    1b64:	40008200 	.word	0x40008200

00001b68 <am_hal_ctimer_int_clear>:
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTCLR) = ui32Interrupt;
    1b68:	4b01      	ldr	r3, [pc, #4]	; (1b70 <am_hal_ctimer_int_clear+0x8>)
    1b6a:	6018      	str	r0, [r3, #0]
    1b6c:	4770      	bx	lr
    1b6e:	bf00      	nop
    1b70:	40008208 	.word	0x40008208

00001b74 <am_hal_ctimer_int_status_get>:
//! @return Returns either the timer interrupt status.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_int_status_get(bool bEnabledOnly)
{
    1b74:	b510      	push	{r4, lr}
    1b76:	b082      	sub	sp, #8
    //
    // Return the desired status.
    //

    if ( bEnabledOnly )
    1b78:	b920      	cbnz	r0, 1b84 <am_hal_ctimer_int_status_get+0x10>

        return u32RetVal;
    }
    else
    {
        return AM_REGn(CTIMER, 0, INTSTAT);
    1b7a:	4b09      	ldr	r3, [pc, #36]	; (1ba0 <am_hal_ctimer_int_status_get+0x2c>)
    1b7c:	681c      	ldr	r4, [r3, #0]
    }
} // am_hal_ctimer_int_status_get()
    1b7e:	4620      	mov	r0, r4
    1b80:	b002      	add	sp, #8
    1b82:	bd10      	pop	{r4, pc}
        AM_CRITICAL_BEGIN_ASM
    1b84:	f000 f842 	bl	1c0c <am_hal_interrupt_master_disable>
        u32RetVal  = AM_REGn(CTIMER, 0, INTSTAT);
    1b88:	4a05      	ldr	r2, [pc, #20]	; (1ba0 <am_hal_ctimer_int_status_get+0x2c>)
        u32RetVal &= AM_REGn(CTIMER, 0, INTEN);
    1b8a:	4906      	ldr	r1, [pc, #24]	; (1ba4 <am_hal_ctimer_int_status_get+0x30>)
        AM_CRITICAL_BEGIN_ASM
    1b8c:	9001      	str	r0, [sp, #4]
        u32RetVal  = AM_REGn(CTIMER, 0, INTSTAT);
    1b8e:	6814      	ldr	r4, [r2, #0]
        u32RetVal &= AM_REGn(CTIMER, 0, INTEN);
    1b90:	680b      	ldr	r3, [r1, #0]
        AM_CRITICAL_END_ASM
    1b92:	9801      	ldr	r0, [sp, #4]
        u32RetVal &= AM_REGn(CTIMER, 0, INTEN);
    1b94:	401c      	ands	r4, r3
        AM_CRITICAL_END_ASM
    1b96:	f000 f83d 	bl	1c14 <am_hal_interrupt_master_set>
} // am_hal_ctimer_int_status_get()
    1b9a:	4620      	mov	r0, r4
    1b9c:	b002      	add	sp, #8
    1b9e:	bd10      	pop	{r4, pc}
    1ba0:	40008204 	.word	0x40008204
    1ba4:	40008200 	.word	0x40008200

00001ba8 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    1ba8:	e7fe      	b.n	1ba8 <am_hal_debug_error>
    1baa:	bf00      	nop

00001bac <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1bac:	4b00      	ldr	r3, [pc, #0]	; (1bb0 <am_hal_flash_delay+0x4>)
    1bae:	4718      	bx	r3
    1bb0:	0800009d 	.word	0x0800009d

00001bb4 <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    1bb4:	280f      	cmp	r0, #15
    1bb6:	d80b      	bhi.n	1bd0 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    1bb8:	2805      	cmp	r0, #5
    1bba:	d013      	beq.n	1be4 <am_hal_interrupt_enable+0x30>
    1bbc:	2806      	cmp	r0, #6
    1bbe:	d017      	beq.n	1bf0 <am_hal_interrupt_enable+0x3c>
    1bc0:	2804      	cmp	r0, #4
    1bc2:	d104      	bne.n	1bce <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    1bc4:	4a0d      	ldr	r2, [pc, #52]	; (1bfc <am_hal_interrupt_enable+0x48>)
    1bc6:	6813      	ldr	r3, [r2, #0]
    1bc8:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    1bcc:	6010      	str	r0, [r2, #0]
    1bce:	4770      	bx	lr
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    1bd0:	f1a0 0310 	sub.w	r3, r0, #16
    1bd4:	f003 0c1f 	and.w	ip, r3, #31
    1bd8:	2001      	movs	r0, #1
    1bda:	4909      	ldr	r1, [pc, #36]	; (1c00 <am_hal_interrupt_enable+0x4c>)
    1bdc:	fa00 f20c 	lsl.w	r2, r0, ip
    1be0:	600a      	str	r2, [r1, #0]
    1be2:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    1be4:	4805      	ldr	r0, [pc, #20]	; (1bfc <am_hal_interrupt_enable+0x48>)
    1be6:	6801      	ldr	r1, [r0, #0]
    1be8:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    1bec:	6002      	str	r2, [r0, #0]
            break;
    1bee:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    1bf0:	4902      	ldr	r1, [pc, #8]	; (1bfc <am_hal_interrupt_enable+0x48>)
    1bf2:	680a      	ldr	r2, [r1, #0]
    1bf4:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    1bf8:	600b      	str	r3, [r1, #0]
            break;
    1bfa:	4770      	bx	lr
    1bfc:	e000ed24 	.word	0xe000ed24
    1c00:	e000e100 	.word	0xe000e100

00001c04 <am_hal_interrupt_master_enable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1c04:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    1c08:	b662      	cpsie	i
    __asm("    bx lr");
    1c0a:	4770      	bx	lr

00001c0c <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1c0c:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    1c10:	b672      	cpsid	i
    __asm("    bx lr");
    1c12:	4770      	bx	lr

00001c14 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    1c14:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <internal_resync_fifoSize>:
#endif
__attribute__((naked))
static void
internal_resync_fifoSize(uint32_t wrOffset, uint32_t maxFifoSize, uint32_t hwFifoPtrRegAddr)
{
    __asm
    1c1c:	b418      	push	{r3, r4}

00001c1e <__internal_resync_fifoSize_loop>:
    1c1e:	6814      	ldr	r4, [r2, #0]
    1c20:	f3c4 2307 	ubfx	r3, r4, #8, #8
    1c24:	b2e4      	uxtb	r4, r4
    1c26:	1b04      	subs	r4, r0, r4
    1c28:	bf38      	it	cc
    1c2a:	1864      	addcc	r4, r4, r1
    1c2c:	42a3      	cmp	r3, r4
    1c2e:	d001      	beq.n	1c34 <__internal_resync_fifosize_done>
    1c30:	7054      	strb	r4, [r2, #1]
    1c32:	e7f4      	b.n	1c1e <__internal_resync_fifoSize_loop>

00001c34 <__internal_resync_fifosize_done>:
    1c34:	bc18      	pop	{r3, r4}
    1c36:	4770      	bx	lr

00001c38 <am_hal_ios_config>:
{
    1c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c3a:	4604      	mov	r4, r0
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_IOS);
    1c3c:	2001      	movs	r0, #1
    1c3e:	f000 fea7 	bl	2990 <am_hal_pwrctrl_periph_enable>
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    1c42:	68a3      	ldr	r3, [r4, #8]
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    1c44:	68e1      	ldr	r1, [r4, #12]
    g_ui32FifoBaseOffset = psConfig->ui32FIFOBase;
    1c46:	4a1c      	ldr	r2, [pc, #112]	; (1cb8 <am_hal_ios_config+0x80>)
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    1c48:	481c      	ldr	r0, [pc, #112]	; (1cbc <am_hal_ios_config+0x84>)
    g_ui32FifoBaseOffset = psConfig->ui32FIFOBase;
    1c4a:	6013      	str	r3, [r2, #0]
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    1c4c:	f101 45a0 	add.w	r5, r1, #1342177280	; 0x50000000
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    1c50:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    g_ui32HwFifoSize = g_pui8FIFOEnd - g_pui8FIFOBase;
    1c54:	4f1a      	ldr	r7, [pc, #104]	; (1cc0 <am_hal_ios_config+0x88>)
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    1c56:	6002      	str	r2, [r0, #0]
    g_ui32HwFifoSize = g_pui8FIFOEnd - g_pui8FIFOBase;
    1c58:	1aa8      	subs	r0, r5, r2
    1c5a:	7038      	strb	r0, [r7, #0]
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    1c5c:	4e19      	ldr	r6, [pc, #100]	; (1cc4 <am_hal_ios_config+0x8c>)
    AM_REGn(IOSLAVE, ui32Module, CFG) &= ~(AM_REG_IOSLAVE_CFG_IFCEN(1));
    1c5e:	4f1a      	ldr	r7, [pc, #104]	; (1cc8 <am_hal_ios_config+0x90>)
    ui32LRAMConfig = AM_REG_IOSLAVE_FIFOCFG_ROBASE(psConfig->ui32ROBase >> 3);
    1c60:	6862      	ldr	r2, [r4, #4]
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    1c62:	6035      	str	r5, [r6, #0]
    AM_REGn(IOSLAVE, ui32Module, CFG) &= ~(AM_REG_IOSLAVE_CFG_IFCEN(1));
    1c64:	683d      	ldr	r5, [r7, #0]
    AM_REG(IOSLAVE, FIFOCFG) = ui32LRAMConfig;
    1c66:	4e19      	ldr	r6, [pc, #100]	; (1ccc <am_hal_ios_config+0x94>)
    ui32LRAMConfig = AM_REG_IOSLAVE_FIFOCFG_ROBASE(psConfig->ui32ROBase >> 3);
    1c68:	0550      	lsls	r0, r2, #21
    ui32LRAMConfig |= AM_REG_IOSLAVE_FIFOCFG_FIFOMAX(psConfig->ui32RAMBase >> 3);
    1c6a:	0149      	lsls	r1, r1, #5
    1c6c:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
    ui32LRAMConfig = AM_REG_IOSLAVE_FIFOCFG_ROBASE(psConfig->ui32ROBase >> 3);
    1c70:	f000 527c 	and.w	r2, r0, #1056964608	; 0x3f000000
    AM_REGn(IOSLAVE, ui32Module, CFG) &= ~(AM_REG_IOSLAVE_CFG_IFCEN(1));
    1c74:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
    1c78:	603d      	str	r5, [r7, #0]
    1c7a:	430a      	orrs	r2, r1
    ui32LRAMConfig |= AM_REG_IOSLAVE_FIFOCFG_FIFOBASE(psConfig->ui32FIFOBase >> 3);
    1c7c:	f3c3 03c4 	ubfx	r3, r3, #3, #5
    AM_REG(IOSLAVE, CFG) = psConfig->ui32InterfaceSelect;
    1c80:	6820      	ldr	r0, [r4, #0]
    1c82:	6038      	str	r0, [r7, #0]
    ui32LRAMConfig |= AM_REG_IOSLAVE_FIFOCFG_FIFOMAX(psConfig->ui32RAMBase >> 3);
    1c84:	4313      	orrs	r3, r2
    AM_REG(IOSLAVE, FIFOCFG) = ui32LRAMConfig;
    1c86:	6033      	str	r3, [r6, #0]
    AM_REGn(IOSLAVE, ui32Module, CFG) |= AM_REG_IOSLAVE_CFG_IFCEN(1);
    1c88:	6839      	ldr	r1, [r7, #0]
    1c8a:	f041 4200 	orr.w	r2, r1, #2147483648	; 0x80000000
    1c8e:	603a      	str	r2, [r7, #0]
    am_hal_ios_fifo_ptr_set(psConfig->ui32FIFOBase);
    1c90:	68a5      	ldr	r5, [r4, #8]
    uint32_t ui32Primask;

    //
    // Start a critical section for thread safety.
    //
    ui32Primask = am_hal_interrupt_master_disable();
    1c92:	f7ff ffbb 	bl	1c0c <am_hal_interrupt_master_disable>

    //
    // Set the FIFO Update bit.
    //
    AM_REG(IOSLAVE, FUPD) = 0x1;
    1c96:	4b0e      	ldr	r3, [pc, #56]	; (1cd0 <am_hal_ios_config+0x98>)
    AM_REG(IOSLAVE, FUPD) = 0x0;

    //
    // Set the global FIFO-pointer tracking variable.
    //
    g_pui8FIFOPtr = (uint8_t *) (REG_IOSLAVE_BASEADDR + ui32Offset);
    1c98:	4a0e      	ldr	r2, [pc, #56]	; (1cd4 <am_hal_ios_config+0x9c>)
    AM_REG(IOSLAVE, FUPD) = 0x0;
    1c9a:	2100      	movs	r1, #0
    AM_REG(IOSLAVE, FUPD) = 0x1;
    1c9c:	2701      	movs	r7, #1
    1c9e:	601f      	str	r7, [r3, #0]
    AM_REG(IOSLAVE, FIFOPTR) = ui32Offset;
    1ca0:	f846 5c04 	str.w	r5, [r6, #-4]
    AM_REG(IOSLAVE, FUPD) = 0x0;
    1ca4:	6019      	str	r1, [r3, #0]
    g_pui8FIFOPtr = (uint8_t *) (REG_IOSLAVE_BASEADDR + ui32Offset);
    1ca6:	f105 46a0 	add.w	r6, r5, #1342177280	; 0x50000000
    1caa:	6016      	str	r6, [r2, #0]

    //
    // End the critical section.
    //
    am_hal_interrupt_master_set(ui32Primask);
    1cac:	f7ff ffb2 	bl	1c14 <am_hal_interrupt_master_set>
    AM_REG(IOSLAVE, FIFOTHR) = psConfig->ui32FIFOThreshold;
    1cb0:	4809      	ldr	r0, [pc, #36]	; (1cd8 <am_hal_ios_config+0xa0>)
    1cb2:	6924      	ldr	r4, [r4, #16]
    1cb4:	6004      	str	r4, [r0, #0]
    1cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1cb8:	10001154 	.word	0x10001154
    1cbc:	1000103c 	.word	0x1000103c
    1cc0:	10001158 	.word	0x10001158
    1cc4:	10001040 	.word	0x10001040
    1cc8:	50000118 	.word	0x50000118
    1ccc:	50000104 	.word	0x50000104
    1cd0:	5000010c 	.word	0x5000010c
    1cd4:	10001044 	.word	0x10001044
    1cd8:	50000108 	.word	0x50000108

00001cdc <am_hal_ios_host_int_set>:
    AM_REG(IOSLAVE, IOINTCTL) = AM_REG_IOSLAVE_IOINTCTL_IOINTSET(ui32Interrupt);
    1cdc:	4b01      	ldr	r3, [pc, #4]	; (1ce4 <am_hal_ios_host_int_set+0x8>)
    1cde:	0600      	lsls	r0, r0, #24
    1ce0:	6018      	str	r0, [r3, #0]
    1ce2:	4770      	bx	lr
    1ce4:	50000120 	.word	0x50000120

00001ce8 <am_hal_ios_access_int_enable>:
    AM_REG(IOSLAVE, REGACCINTEN) |= ui32Interrupt;
    1ce8:	4a02      	ldr	r2, [pc, #8]	; (1cf4 <am_hal_ios_access_int_enable+0xc>)
    1cea:	6813      	ldr	r3, [r2, #0]
    1cec:	4318      	orrs	r0, r3
    1cee:	6010      	str	r0, [r2, #0]
    1cf0:	4770      	bx	lr
    1cf2:	bf00      	nop
    1cf4:	50000210 	.word	0x50000210

00001cf8 <am_hal_ios_access_int_clear>:
    AM_REG(IOSLAVE, REGACCINTCLR) = ui32Interrupt;
    1cf8:	4b01      	ldr	r3, [pc, #4]	; (1d00 <am_hal_ios_access_int_clear+0x8>)
    1cfa:	6018      	str	r0, [r3, #0]
    1cfc:	4770      	bx	lr
    1cfe:	bf00      	nop
    1d00:	50000218 	.word	0x50000218

00001d04 <am_hal_ios_access_int_status_get>:
    if ( bEnabledOnly )
    1d04:	b910      	cbnz	r0, 1d0c <am_hal_ios_access_int_status_get+0x8>
        return AM_REG(IOSLAVE, REGACCINTSTAT);
    1d06:	4b04      	ldr	r3, [pc, #16]	; (1d18 <am_hal_ios_access_int_status_get+0x14>)
    1d08:	6818      	ldr	r0, [r3, #0]
}
    1d0a:	4770      	bx	lr
        uint32_t u32RetVal = AM_REG(IOSLAVE, REGACCINTSTAT);
    1d0c:	4a02      	ldr	r2, [pc, #8]	; (1d18 <am_hal_ios_access_int_status_get+0x14>)
        return u32RetVal & AM_REG(IOSLAVE, REGACCINTEN);
    1d0e:	4903      	ldr	r1, [pc, #12]	; (1d1c <am_hal_ios_access_int_status_get+0x18>)
        uint32_t u32RetVal = AM_REG(IOSLAVE, REGACCINTSTAT);
    1d10:	6810      	ldr	r0, [r2, #0]
        return u32RetVal & AM_REG(IOSLAVE, REGACCINTEN);
    1d12:	680b      	ldr	r3, [r1, #0]
    1d14:	4018      	ands	r0, r3
    1d16:	4770      	bx	lr
    1d18:	50000214 	.word	0x50000214
    1d1c:	50000210 	.word	0x50000210

00001d20 <am_hal_ios_int_enable>:
    AM_REG(IOSLAVE, INTEN) |= ui32Interrupt;
    1d20:	4a02      	ldr	r2, [pc, #8]	; (1d2c <am_hal_ios_int_enable+0xc>)
    1d22:	6813      	ldr	r3, [r2, #0]
    1d24:	4318      	orrs	r0, r3
    1d26:	6010      	str	r0, [r2, #0]
    1d28:	4770      	bx	lr
    1d2a:	bf00      	nop
    1d2c:	50000200 	.word	0x50000200

00001d30 <am_hal_ios_int_clear>:
    AM_REG(IOSLAVE, INTCLR) = ui32Interrupt;
    1d30:	4b01      	ldr	r3, [pc, #4]	; (1d38 <am_hal_ios_int_clear+0x8>)
    1d32:	6018      	str	r0, [r3, #0]
    1d34:	4770      	bx	lr
    1d36:	bf00      	nop
    1d38:	50000208 	.word	0x50000208

00001d3c <am_hal_ios_int_status_get>:
    if ( bEnabledOnly )
    1d3c:	b910      	cbnz	r0, 1d44 <am_hal_ios_int_status_get+0x8>
        return AM_REG(IOSLAVE, INTSTAT);
    1d3e:	4b04      	ldr	r3, [pc, #16]	; (1d50 <am_hal_ios_int_status_get+0x14>)
    1d40:	6818      	ldr	r0, [r3, #0]
}
    1d42:	4770      	bx	lr
        uint32_t u32RetVal = AM_REG(IOSLAVE, INTSTAT);
    1d44:	4a02      	ldr	r2, [pc, #8]	; (1d50 <am_hal_ios_int_status_get+0x14>)
        return u32RetVal & AM_REG(IOSLAVE, INTEN);
    1d46:	4903      	ldr	r1, [pc, #12]	; (1d54 <am_hal_ios_int_status_get+0x18>)
        uint32_t u32RetVal = AM_REG(IOSLAVE, INTSTAT);
    1d48:	6810      	ldr	r0, [r2, #0]
        return u32RetVal & AM_REG(IOSLAVE, INTEN);
    1d4a:	680b      	ldr	r3, [r1, #0]
    1d4c:	4018      	ands	r0, r3
    1d4e:	4770      	bx	lr
    1d50:	50000204 	.word	0x50000204
    1d54:	50000200 	.word	0x50000200

00001d58 <am_hal_ios_fifo_space_used>:
{
    1d58:	b510      	push	{r4, lr}
    ui32Primask = am_hal_interrupt_master_disable();
    1d5a:	f7ff ff57 	bl	1c0c <am_hal_interrupt_master_disable>
    ui32Val = g_sSRAMBuffer.ui32Length;
    1d5e:	4b05      	ldr	r3, [pc, #20]	; (1d74 <am_hal_ios_fifo_space_used+0x1c>)
    ui32Val += AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ);
    1d60:	4a05      	ldr	r2, [pc, #20]	; (1d78 <am_hal_ios_fifo_space_used+0x20>)
    ui32Val = g_sSRAMBuffer.ui32Length;
    1d62:	68d9      	ldr	r1, [r3, #12]
    ui32Val += AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ);
    1d64:	6814      	ldr	r4, [r2, #0]
    1d66:	f3c4 2407 	ubfx	r4, r4, #8, #8
    1d6a:	440c      	add	r4, r1
    am_hal_interrupt_master_set(ui32Primask);
    1d6c:	f7ff ff52 	bl	1c14 <am_hal_interrupt_master_set>
}
    1d70:	4620      	mov	r0, r4
    1d72:	bd10      	pop	{r4, pc}
    1d74:	100017ac 	.word	0x100017ac
    1d78:	50000100 	.word	0x50000100

00001d7c <am_hal_ios_fifo_service>:
    if ( ui32Status & AM_HAL_IOS_INT_FSIZE )
    1d7c:	07c3      	lsls	r3, r0, #31
    1d7e:	f140 8304 	bpl.w	238a <am_hal_ios_fifo_service+0x60e>
{
    1d82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        thresh = AM_BFR(IOSLAVE, FIFOTHR, FIFOTHR);
    1d86:	4b77      	ldr	r3, [pc, #476]	; (1f64 <am_hal_ios_fifo_service+0x1e8>)
        while ( g_sSRAMBuffer.ui32Length &&
    1d88:	4d77      	ldr	r5, [pc, #476]	; (1f68 <am_hal_ios_fifo_service+0x1ec>)
        thresh = AM_BFR(IOSLAVE, FIFOTHR, FIFOTHR);
    1d8a:	681a      	ldr	r2, [r3, #0]
        while ( g_sSRAMBuffer.ui32Length &&
    1d8c:	68e8      	ldr	r0, [r5, #12]
{
    1d8e:	b083      	sub	sp, #12
        thresh = AM_BFR(IOSLAVE, FIFOTHR, FIFOTHR);
    1d90:	b2d4      	uxtb	r4, r2
    1d92:	9400      	str	r4, [sp, #0]
        while ( g_sSRAMBuffer.ui32Length &&
    1d94:	2800      	cmp	r0, #0
    1d96:	f000 80e1 	beq.w	1f5c <am_hal_ios_fifo_service+0x1e0>
                ((usedSpace = AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ)) <= thresh) )
    1d9a:	4974      	ldr	r1, [pc, #464]	; (1f6c <am_hal_ios_fifo_service+0x1f0>)
    1d9c:	680e      	ldr	r6, [r1, #0]
    1d9e:	f3c6 2307 	ubfx	r3, r6, #8, #8
        while ( g_sSRAMBuffer.ui32Length &&
    1da2:	429c      	cmp	r4, r3
    1da4:	f0c0 80da 	bcc.w	1f5c <am_hal_ios_fifo_service+0x1e0>
    1da8:	4f71      	ldr	r7, [pc, #452]	; (1f70 <am_hal_ios_fifo_service+0x1f4>)
    1daa:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 1f88 <am_hal_ios_fifo_service+0x20c>
    internal_resync_fifoSize(wrOffset, g_ui32HwFifoSize, AM_REG_IOS_FIFOPTR);
    1dae:	468b      	mov	fp, r1
            ui32WriteIndex = g_sSRAMBuffer.ui32WriteIndex;
    1db0:	6868      	ldr	r0, [r5, #4]
            chunk1 = ((ui32WriteIndex > (uint32_t)g_sSRAMBuffer.ui32ReadIndex) ?   \
    1db2:	68aa      	ldr	r2, [r5, #8]
            freeSpace = g_ui32HwFifoSize - usedSpace - 1;
    1db4:	f897 9000 	ldrb.w	r9, [r7]
                        (ui32WriteIndex - (uint32_t)g_sSRAMBuffer.ui32ReadIndex) : \
    1db8:	68ac      	ldr	r4, [r5, #8]
            chunk2 = g_sSRAMBuffer.ui32Length - chunk1;
    1dba:	f8d5 a00c 	ldr.w	sl, [r5, #12]
                        (ui32WriteIndex - (uint32_t)g_sSRAMBuffer.ui32ReadIndex) : \
    1dbe:	4290      	cmp	r0, r2
    1dc0:	bf98      	it	ls
    1dc2:	6968      	ldrls	r0, [r5, #20]
            freeSpace = g_ui32HwFifoSize - usedSpace - 1;
    1dc4:	f109 31ff 	add.w	r1, r9, #4294967295
                        (ui32WriteIndex - (uint32_t)g_sSRAMBuffer.ui32ReadIndex) : \
    1dc8:	1b00      	subs	r0, r0, r4
            freeSpace = g_ui32HwFifoSize - usedSpace - 1;
    1dca:	1ac9      	subs	r1, r1, r3
            if ( chunk1 > freeSpace )
    1dcc:	4288      	cmp	r0, r1
    1dce:	f240 80dd 	bls.w	1f8c <am_hal_ios_fifo_service+0x210>
                fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), freeSpace);
    1dd2:	68ae      	ldr	r6, [r5, #8]
    1dd4:	682b      	ldr	r3, [r5, #0]
    uint8_t *pFifoBase = g_pui8FIFOBase;
    1dd6:	4a67      	ldr	r2, [pc, #412]	; (1f74 <am_hal_ios_fifo_service+0x1f8>)
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    1dd8:	4867      	ldr	r0, [pc, #412]	; (1f78 <am_hal_ios_fifo_service+0x1fc>)
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    1dda:	f8d8 4000 	ldr.w	r4, [r8]
    uint8_t *pFifoBase = g_pui8FIFOBase;
    1dde:	6812      	ldr	r2, [r2, #0]
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    1de0:	6800      	ldr	r0, [r0, #0]
                fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), freeSpace);
    1de2:	eb03 0e06 	add.w	lr, r3, r6
    while ( ui32NumBytes )
    1de6:	2900      	cmp	r1, #0
    1de8:	f000 808d 	beq.w	1f06 <am_hal_ios_fifo_service+0x18a>
        *pFifoPtr++ = *pui8Data++;
    1dec:	4673      	mov	r3, lr
    1dee:	eb0e 0a01 	add.w	sl, lr, r1
    1df2:	f813 6b01 	ldrb.w	r6, [r3], #1
    1df6:	7026      	strb	r6, [r4, #0]
    1df8:	ea6f 090e 	mvn.w	r9, lr
    1dfc:	3401      	adds	r4, #1
    1dfe:	44d1      	add	r9, sl
    1e00:	42a0      	cmp	r0, r4
    1e02:	bf08      	it	eq
    1e04:	4614      	moveq	r4, r2
    while ( ui32NumBytes )
    1e06:	4553      	cmp	r3, sl
    1e08:	f009 0e07 	and.w	lr, r9, #7
    1e0c:	d07b      	beq.n	1f06 <am_hal_ios_fifo_service+0x18a>
    1e0e:	f1be 0f00 	cmp.w	lr, #0
    1e12:	d045      	beq.n	1ea0 <am_hal_ios_fifo_service+0x124>
    1e14:	f1be 0f01 	cmp.w	lr, #1
    1e18:	d038      	beq.n	1e8c <am_hal_ios_fifo_service+0x110>
    1e1a:	f1be 0f02 	cmp.w	lr, #2
    1e1e:	d02e      	beq.n	1e7e <am_hal_ios_fifo_service+0x102>
    1e20:	f1be 0f03 	cmp.w	lr, #3
    1e24:	d024      	beq.n	1e70 <am_hal_ios_fifo_service+0xf4>
    1e26:	f1be 0f04 	cmp.w	lr, #4
    1e2a:	d01a      	beq.n	1e62 <am_hal_ios_fifo_service+0xe6>
    1e2c:	f1be 0f05 	cmp.w	lr, #5
    1e30:	d010      	beq.n	1e54 <am_hal_ios_fifo_service+0xd8>
    1e32:	f1be 0f06 	cmp.w	lr, #6
    1e36:	d006      	beq.n	1e46 <am_hal_ios_fifo_service+0xca>
        *pFifoPtr++ = *pui8Data++;
    1e38:	f813 6b01 	ldrb.w	r6, [r3], #1
    1e3c:	7026      	strb	r6, [r4, #0]
    1e3e:	3401      	adds	r4, #1
    1e40:	42a0      	cmp	r0, r4
    1e42:	bf08      	it	eq
    1e44:	4614      	moveq	r4, r2
    1e46:	f813 6b01 	ldrb.w	r6, [r3], #1
    1e4a:	7026      	strb	r6, [r4, #0]
    1e4c:	3401      	adds	r4, #1
    1e4e:	42a0      	cmp	r0, r4
    1e50:	bf08      	it	eq
    1e52:	4614      	moveq	r4, r2
    1e54:	f813 6b01 	ldrb.w	r6, [r3], #1
    1e58:	7026      	strb	r6, [r4, #0]
    1e5a:	3401      	adds	r4, #1
    1e5c:	42a0      	cmp	r0, r4
    1e5e:	bf08      	it	eq
    1e60:	4614      	moveq	r4, r2
    1e62:	f813 6b01 	ldrb.w	r6, [r3], #1
    1e66:	7026      	strb	r6, [r4, #0]
    1e68:	3401      	adds	r4, #1
    1e6a:	42a0      	cmp	r0, r4
    1e6c:	bf08      	it	eq
    1e6e:	4614      	moveq	r4, r2
    1e70:	f813 6b01 	ldrb.w	r6, [r3], #1
    1e74:	7026      	strb	r6, [r4, #0]
    1e76:	3401      	adds	r4, #1
    1e78:	42a0      	cmp	r0, r4
    1e7a:	bf08      	it	eq
    1e7c:	4614      	moveq	r4, r2
    1e7e:	f813 6b01 	ldrb.w	r6, [r3], #1
    1e82:	7026      	strb	r6, [r4, #0]
    1e84:	3401      	adds	r4, #1
    1e86:	42a0      	cmp	r0, r4
    1e88:	bf08      	it	eq
    1e8a:	4614      	moveq	r4, r2
    1e8c:	f813 eb01 	ldrb.w	lr, [r3], #1
    1e90:	f884 e000 	strb.w	lr, [r4]
    1e94:	3401      	adds	r4, #1
    1e96:	42a0      	cmp	r0, r4
    1e98:	bf08      	it	eq
    1e9a:	4614      	moveq	r4, r2
    while ( ui32NumBytes )
    1e9c:	4553      	cmp	r3, sl
    1e9e:	d032      	beq.n	1f06 <am_hal_ios_fifo_service+0x18a>
        *pFifoPtr++ = *pui8Data++;
    1ea0:	469c      	mov	ip, r3
    1ea2:	1c66      	adds	r6, r4, #1
    1ea4:	f81c eb01 	ldrb.w	lr, [ip], #1
    1ea8:	f884 e000 	strb.w	lr, [r4]
    1eac:	42b0      	cmp	r0, r6
    1eae:	bf0c      	ite	eq
    1eb0:	4614      	moveq	r4, r2
    1eb2:	4634      	movne	r4, r6
    1eb4:	f89c 6000 	ldrb.w	r6, [ip]
    1eb8:	7026      	strb	r6, [r4, #0]
    1eba:	3401      	adds	r4, #1
    1ebc:	42a0      	cmp	r0, r4
    1ebe:	bf08      	it	eq
    1ec0:	4614      	moveq	r4, r2
    1ec2:	789e      	ldrb	r6, [r3, #2]
    1ec4:	7026      	strb	r6, [r4, #0]
    1ec6:	3401      	adds	r4, #1
    1ec8:	42a0      	cmp	r0, r4
    1eca:	bf08      	it	eq
    1ecc:	4614      	moveq	r4, r2
    1ece:	78de      	ldrb	r6, [r3, #3]
    1ed0:	7026      	strb	r6, [r4, #0]
    1ed2:	3401      	adds	r4, #1
    1ed4:	42a0      	cmp	r0, r4
    1ed6:	bf08      	it	eq
    1ed8:	4614      	moveq	r4, r2
    1eda:	791e      	ldrb	r6, [r3, #4]
    1edc:	7026      	strb	r6, [r4, #0]
    1ede:	3401      	adds	r4, #1
    1ee0:	42a0      	cmp	r0, r4
    1ee2:	bf08      	it	eq
    1ee4:	4614      	moveq	r4, r2
    1ee6:	795e      	ldrb	r6, [r3, #5]
    1ee8:	7026      	strb	r6, [r4, #0]
    1eea:	3401      	adds	r4, #1
    1eec:	42a0      	cmp	r0, r4
    1eee:	bf08      	it	eq
    1ef0:	4614      	moveq	r4, r2
    1ef2:	799e      	ldrb	r6, [r3, #6]
    1ef4:	7026      	strb	r6, [r4, #0]
    1ef6:	3308      	adds	r3, #8
    1ef8:	3401      	adds	r4, #1
    1efa:	42a0      	cmp	r0, r4
    1efc:	bf08      	it	eq
    1efe:	4614      	moveq	r4, r2
    1f00:	f813 ec01 	ldrb.w	lr, [r3, #-1]
    1f04:	e7c4      	b.n	1e90 <am_hal_ios_fifo_service+0x114>
                        g_sSRAMBuffer.ui32ReadIndex += freeSpace;
    1f06:	68aa      	ldr	r2, [r5, #8]
    g_pui8FIFOPtr = pFifoPtr;
    1f08:	f8c8 4000 	str.w	r4, [r8]
                        g_sSRAMBuffer.ui32ReadIndex += freeSpace;
    1f0c:	440a      	add	r2, r1
    1f0e:	60aa      	str	r2, [r5, #8]
                        g_sSRAMBuffer.ui32Length -= freeSpace;
    1f10:	68e8      	ldr	r0, [r5, #12]
    1f12:	1a41      	subs	r1, r0, r1
    1f14:	60e9      	str	r1, [r5, #12]
    return ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) ==   \
    1f16:	4b19      	ldr	r3, [pc, #100]	; (1f7c <am_hal_ios_fifo_service+0x200>)
    1f18:	681e      	ldr	r6, [r3, #0]
    1f1a:	b2f2      	uxtb	r2, r6
            if (!isRevB2())
    1f1c:	2a22      	cmp	r2, #34	; 0x22
    1f1e:	d00e      	beq.n	1f3e <am_hal_ios_fifo_service+0x1c2>
    ui32Primask = am_hal_interrupt_master_disable();
    1f20:	f7ff fe74 	bl	1c0c <am_hal_interrupt_master_disable>
    internal_resync_fifoSize(wrOffset, g_ui32HwFifoSize, AM_REG_IOS_FIFOPTR);
    1f24:	7839      	ldrb	r1, [r7, #0]
    ui32Primask = am_hal_interrupt_master_disable();
    1f26:	4682      	mov	sl, r0
    internal_resync_fifoSize(wrOffset, g_ui32HwFifoSize, AM_REG_IOS_FIFOPTR);
    1f28:	465a      	mov	r2, fp
    1f2a:	f104 4030 	add.w	r0, r4, #2952790016	; 0xb0000000
    1f2e:	f7ff fe75 	bl	1c1c <internal_resync_fifoSize>
    AM_REG(IOSLAVE, REGACCINTCLR) = (AM_HAL_IOS_INT_FSIZE | AM_HAL_IOS_INT_FOVFL | AM_HAL_IOS_INT_FUNDFL);
    1f32:	4913      	ldr	r1, [pc, #76]	; (1f80 <am_hal_ios_fifo_service+0x204>)
    1f34:	2407      	movs	r4, #7
    am_hal_interrupt_master_set(ui32Primask);
    1f36:	4650      	mov	r0, sl
    AM_REG(IOSLAVE, REGACCINTCLR) = (AM_HAL_IOS_INT_FSIZE | AM_HAL_IOS_INT_FOVFL | AM_HAL_IOS_INT_FUNDFL);
    1f38:	600c      	str	r4, [r1, #0]
    am_hal_interrupt_master_set(ui32Primask);
    1f3a:	f7ff fe6b 	bl	1c14 <am_hal_interrupt_master_set>
            AM_BFW(IOSLAVE, INTCLR, FSIZE, 1);
    1f3e:	4811      	ldr	r0, [pc, #68]	; (1f84 <am_hal_ios_fifo_service+0x208>)
    1f40:	6803      	ldr	r3, [r0, #0]
    1f42:	f043 0601 	orr.w	r6, r3, #1
    1f46:	6006      	str	r6, [r0, #0]
        while ( g_sSRAMBuffer.ui32Length &&
    1f48:	68ea      	ldr	r2, [r5, #12]
    1f4a:	b13a      	cbz	r2, 1f5c <am_hal_ios_fifo_service+0x1e0>
                ((usedSpace = AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ)) <= thresh) )
    1f4c:	f8db 4000 	ldr.w	r4, [fp]
        while ( g_sSRAMBuffer.ui32Length &&
    1f50:	9900      	ldr	r1, [sp, #0]
                ((usedSpace = AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ)) <= thresh) )
    1f52:	f3c4 2307 	ubfx	r3, r4, #8, #8
        while ( g_sSRAMBuffer.ui32Length &&
    1f56:	4299      	cmp	r1, r3
    1f58:	f4bf af2a 	bcs.w	1db0 <am_hal_ios_fifo_service+0x34>
}
    1f5c:	b003      	add	sp, #12
    1f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f62:	bf00      	nop
    1f64:	50000108 	.word	0x50000108
    1f68:	100017ac 	.word	0x100017ac
    1f6c:	50000100 	.word	0x50000100
    1f70:	10001158 	.word	0x10001158
    1f74:	1000103c 	.word	0x1000103c
    1f78:	10001040 	.word	0x10001040
    1f7c:	4002000c 	.word	0x4002000c
    1f80:	50000218 	.word	0x50000218
    1f84:	50000208 	.word	0x50000208
    1f88:	10001044 	.word	0x10001044
                fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), chunk1);
    1f8c:	682b      	ldr	r3, [r5, #0]
    1f8e:	9301      	str	r3, [sp, #4]
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    1f90:	4ba4      	ldr	r3, [pc, #656]	; (2224 <am_hal_ios_fifo_service+0x4a8>)
                fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), chunk1);
    1f92:	68aa      	ldr	r2, [r5, #8]
    uint8_t *pFifoBase = g_pui8FIFOBase;
    1f94:	4ea4      	ldr	r6, [pc, #656]	; (2228 <am_hal_ios_fifo_service+0x4ac>)
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    1f96:	f8d3 e000 	ldr.w	lr, [r3]
                fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), chunk1);
    1f9a:	9b01      	ldr	r3, [sp, #4]
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    1f9c:	f8d8 4000 	ldr.w	r4, [r8]
    uint8_t *pFifoBase = g_pui8FIFOBase;
    1fa0:	6836      	ldr	r6, [r6, #0]
                fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), chunk1);
    1fa2:	4413      	add	r3, r2
    while ( ui32NumBytes )
    1fa4:	2800      	cmp	r0, #0
    1fa6:	f000 808c 	beq.w	20c2 <am_hal_ios_fifo_service+0x346>
        *pFifoPtr++ = *pui8Data++;
    1faa:	461a      	mov	r2, r3
    1fac:	eb03 0c00 	add.w	ip, r3, r0
    1fb0:	f812 9b01 	ldrb.w	r9, [r2], #1
    1fb4:	f884 9000 	strb.w	r9, [r4]
    1fb8:	43db      	mvns	r3, r3
    1fba:	3401      	adds	r4, #1
    1fbc:	4463      	add	r3, ip
    1fbe:	45a6      	cmp	lr, r4
    1fc0:	bf08      	it	eq
    1fc2:	4634      	moveq	r4, r6
    while ( ui32NumBytes )
    1fc4:	4562      	cmp	r2, ip
    1fc6:	f003 0307 	and.w	r3, r3, #7
    1fca:	d07a      	beq.n	20c2 <am_hal_ios_fifo_service+0x346>
    1fcc:	2b00      	cmp	r3, #0
    1fce:	d03e      	beq.n	204e <am_hal_ios_fifo_service+0x2d2>
    1fd0:	2b01      	cmp	r3, #1
    1fd2:	d033      	beq.n	203c <am_hal_ios_fifo_service+0x2c0>
    1fd4:	2b02      	cmp	r3, #2
    1fd6:	d02a      	beq.n	202e <am_hal_ios_fifo_service+0x2b2>
    1fd8:	2b03      	cmp	r3, #3
    1fda:	d021      	beq.n	2020 <am_hal_ios_fifo_service+0x2a4>
    1fdc:	2b04      	cmp	r3, #4
    1fde:	d018      	beq.n	2012 <am_hal_ios_fifo_service+0x296>
    1fe0:	2b05      	cmp	r3, #5
    1fe2:	d00f      	beq.n	2004 <am_hal_ios_fifo_service+0x288>
    1fe4:	2b06      	cmp	r3, #6
    1fe6:	d006      	beq.n	1ff6 <am_hal_ios_fifo_service+0x27a>
        *pFifoPtr++ = *pui8Data++;
    1fe8:	f812 3b01 	ldrb.w	r3, [r2], #1
    1fec:	7023      	strb	r3, [r4, #0]
    1fee:	3401      	adds	r4, #1
    1ff0:	45a6      	cmp	lr, r4
    1ff2:	bf08      	it	eq
    1ff4:	4634      	moveq	r4, r6
    1ff6:	f812 3b01 	ldrb.w	r3, [r2], #1
    1ffa:	7023      	strb	r3, [r4, #0]
    1ffc:	3401      	adds	r4, #1
    1ffe:	45a6      	cmp	lr, r4
    2000:	bf08      	it	eq
    2002:	4634      	moveq	r4, r6
    2004:	f812 3b01 	ldrb.w	r3, [r2], #1
    2008:	7023      	strb	r3, [r4, #0]
    200a:	3401      	adds	r4, #1
    200c:	45a6      	cmp	lr, r4
    200e:	bf08      	it	eq
    2010:	4634      	moveq	r4, r6
    2012:	f812 3b01 	ldrb.w	r3, [r2], #1
    2016:	7023      	strb	r3, [r4, #0]
    2018:	3401      	adds	r4, #1
    201a:	45a6      	cmp	lr, r4
    201c:	bf08      	it	eq
    201e:	4634      	moveq	r4, r6
    2020:	f812 3b01 	ldrb.w	r3, [r2], #1
    2024:	7023      	strb	r3, [r4, #0]
    2026:	3401      	adds	r4, #1
    2028:	45a6      	cmp	lr, r4
    202a:	bf08      	it	eq
    202c:	4634      	moveq	r4, r6
    202e:	f812 3b01 	ldrb.w	r3, [r2], #1
    2032:	7023      	strb	r3, [r4, #0]
    2034:	3401      	adds	r4, #1
    2036:	45a6      	cmp	lr, r4
    2038:	bf08      	it	eq
    203a:	4634      	moveq	r4, r6
    203c:	f812 3b01 	ldrb.w	r3, [r2], #1
    2040:	7023      	strb	r3, [r4, #0]
    2042:	3401      	adds	r4, #1
    2044:	45a6      	cmp	lr, r4
    2046:	bf08      	it	eq
    2048:	4634      	moveq	r4, r6
    while ( ui32NumBytes )
    204a:	4562      	cmp	r2, ip
    204c:	d039      	beq.n	20c2 <am_hal_ios_fifo_service+0x346>
    204e:	9001      	str	r0, [sp, #4]
        *pFifoPtr++ = *pui8Data++;
    2050:	4610      	mov	r0, r2
    2052:	1c63      	adds	r3, r4, #1
    2054:	f810 9b01 	ldrb.w	r9, [r0], #1
    2058:	f884 9000 	strb.w	r9, [r4]
    205c:	459e      	cmp	lr, r3
    205e:	bf0c      	ite	eq
    2060:	4634      	moveq	r4, r6
    2062:	461c      	movne	r4, r3
    2064:	7800      	ldrb	r0, [r0, #0]
    2066:	7020      	strb	r0, [r4, #0]
    2068:	3401      	adds	r4, #1
    206a:	45a6      	cmp	lr, r4
    206c:	bf08      	it	eq
    206e:	4634      	moveq	r4, r6
    2070:	7893      	ldrb	r3, [r2, #2]
    2072:	7023      	strb	r3, [r4, #0]
    2074:	3401      	adds	r4, #1
    2076:	45a6      	cmp	lr, r4
    2078:	bf08      	it	eq
    207a:	4634      	moveq	r4, r6
    207c:	78d0      	ldrb	r0, [r2, #3]
    207e:	7020      	strb	r0, [r4, #0]
    2080:	3401      	adds	r4, #1
    2082:	45a6      	cmp	lr, r4
    2084:	bf08      	it	eq
    2086:	4634      	moveq	r4, r6
    2088:	7913      	ldrb	r3, [r2, #4]
    208a:	7023      	strb	r3, [r4, #0]
    208c:	3401      	adds	r4, #1
    208e:	45a6      	cmp	lr, r4
    2090:	bf08      	it	eq
    2092:	4634      	moveq	r4, r6
    2094:	7950      	ldrb	r0, [r2, #5]
    2096:	7020      	strb	r0, [r4, #0]
    2098:	3401      	adds	r4, #1
    209a:	45a6      	cmp	lr, r4
    209c:	bf08      	it	eq
    209e:	4634      	moveq	r4, r6
    20a0:	7993      	ldrb	r3, [r2, #6]
    20a2:	7023      	strb	r3, [r4, #0]
    20a4:	3208      	adds	r2, #8
    20a6:	3401      	adds	r4, #1
    20a8:	45a6      	cmp	lr, r4
    20aa:	bf08      	it	eq
    20ac:	4634      	moveq	r4, r6
    20ae:	f812 0c01 	ldrb.w	r0, [r2, #-1]
    20b2:	7020      	strb	r0, [r4, #0]
    20b4:	3401      	adds	r4, #1
    20b6:	45a6      	cmp	lr, r4
    20b8:	bf08      	it	eq
    20ba:	4634      	moveq	r4, r6
    while ( ui32NumBytes )
    20bc:	4562      	cmp	r2, ip
    20be:	d1c7      	bne.n	2050 <am_hal_ios_fifo_service+0x2d4>
    20c0:	9801      	ldr	r0, [sp, #4]
                g_sSRAMBuffer.ui32ReadIndex += chunk1;
    20c2:	68aa      	ldr	r2, [r5, #8]
                g_sSRAMBuffer.ui32ReadIndex %= g_sSRAMBuffer.ui32Capacity;
    20c4:	696e      	ldr	r6, [r5, #20]
    g_pui8FIFOPtr = pFifoPtr;
    20c6:	f8c8 4000 	str.w	r4, [r8]
                g_sSRAMBuffer.ui32ReadIndex += chunk1;
    20ca:	4402      	add	r2, r0
    20cc:	60aa      	str	r2, [r5, #8]
                g_sSRAMBuffer.ui32ReadIndex %= g_sSRAMBuffer.ui32Capacity;
    20ce:	68aa      	ldr	r2, [r5, #8]
    20d0:	fbb2 fcf6 	udiv	ip, r2, r6
    20d4:	fb06 231c 	mls	r3, r6, ip, r2
    20d8:	60ab      	str	r3, [r5, #8]
                g_sSRAMBuffer.ui32Length -= chunk1;
    20da:	68ee      	ldr	r6, [r5, #12]
                if ( freeSpace && chunk2 )
    20dc:	1a09      	subs	r1, r1, r0
                g_sSRAMBuffer.ui32Length -= chunk1;
    20de:	eba6 0200 	sub.w	r2, r6, r0
    20e2:	60ea      	str	r2, [r5, #12]
                if ( freeSpace && chunk2 )
    20e4:	f43f af17 	beq.w	1f16 <am_hal_ios_fifo_service+0x19a>
    20e8:	ebba 0000 	subs.w	r0, sl, r0
    20ec:	f43f af13 	beq.w	1f16 <am_hal_ios_fifo_service+0x19a>
                    if ( chunk2 > freeSpace )
    20f0:	4288      	cmp	r0, r1
    20f2:	f240 809b 	bls.w	222c <am_hal_ios_fifo_service+0x4b0>
                        fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), freeSpace);
    20f6:	68ae      	ldr	r6, [r5, #8]
    20f8:	682b      	ldr	r3, [r5, #0]
    uint8_t *pFifoBase = g_pui8FIFOBase;
    20fa:	4a4b      	ldr	r2, [pc, #300]	; (2228 <am_hal_ios_fifo_service+0x4ac>)
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    20fc:	4849      	ldr	r0, [pc, #292]	; (2224 <am_hal_ios_fifo_service+0x4a8>)
    uint8_t *pFifoBase = g_pui8FIFOBase;
    20fe:	6812      	ldr	r2, [r2, #0]
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    2100:	6800      	ldr	r0, [r0, #0]
                        fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), freeSpace);
    2102:	eb03 0e06 	add.w	lr, r3, r6
        *pFifoPtr++ = *pui8Data++;
    2106:	4673      	mov	r3, lr
    2108:	eb0e 0a01 	add.w	sl, lr, r1
    210c:	f813 6b01 	ldrb.w	r6, [r3], #1
    2110:	7026      	strb	r6, [r4, #0]
    2112:	ea6f 090e 	mvn.w	r9, lr
    2116:	3401      	adds	r4, #1
    2118:	44d1      	add	r9, sl
    211a:	42a0      	cmp	r0, r4
    211c:	bf08      	it	eq
    211e:	4614      	moveq	r4, r2
    while ( ui32NumBytes )
    2120:	4553      	cmp	r3, sl
    2122:	f009 0e07 	and.w	lr, r9, #7
    2126:	f43f aeee 	beq.w	1f06 <am_hal_ios_fifo_service+0x18a>
    212a:	f1be 0f00 	cmp.w	lr, #0
    212e:	d046      	beq.n	21be <am_hal_ios_fifo_service+0x442>
    2130:	f1be 0f01 	cmp.w	lr, #1
    2134:	d038      	beq.n	21a8 <am_hal_ios_fifo_service+0x42c>
    2136:	f1be 0f02 	cmp.w	lr, #2
    213a:	d02e      	beq.n	219a <am_hal_ios_fifo_service+0x41e>
    213c:	f1be 0f03 	cmp.w	lr, #3
    2140:	d024      	beq.n	218c <am_hal_ios_fifo_service+0x410>
    2142:	f1be 0f04 	cmp.w	lr, #4
    2146:	d01a      	beq.n	217e <am_hal_ios_fifo_service+0x402>
    2148:	f1be 0f05 	cmp.w	lr, #5
    214c:	d010      	beq.n	2170 <am_hal_ios_fifo_service+0x3f4>
    214e:	f1be 0f06 	cmp.w	lr, #6
    2152:	d006      	beq.n	2162 <am_hal_ios_fifo_service+0x3e6>
        *pFifoPtr++ = *pui8Data++;
    2154:	f813 6b01 	ldrb.w	r6, [r3], #1
    2158:	7026      	strb	r6, [r4, #0]
    215a:	3401      	adds	r4, #1
    215c:	42a0      	cmp	r0, r4
    215e:	bf08      	it	eq
    2160:	4614      	moveq	r4, r2
    2162:	f813 6b01 	ldrb.w	r6, [r3], #1
    2166:	7026      	strb	r6, [r4, #0]
    2168:	3401      	adds	r4, #1
    216a:	42a0      	cmp	r0, r4
    216c:	bf08      	it	eq
    216e:	4614      	moveq	r4, r2
    2170:	f813 6b01 	ldrb.w	r6, [r3], #1
    2174:	7026      	strb	r6, [r4, #0]
    2176:	3401      	adds	r4, #1
    2178:	42a0      	cmp	r0, r4
    217a:	bf08      	it	eq
    217c:	4614      	moveq	r4, r2
    217e:	f813 6b01 	ldrb.w	r6, [r3], #1
    2182:	7026      	strb	r6, [r4, #0]
    2184:	3401      	adds	r4, #1
    2186:	42a0      	cmp	r0, r4
    2188:	bf08      	it	eq
    218a:	4614      	moveq	r4, r2
    218c:	f813 6b01 	ldrb.w	r6, [r3], #1
    2190:	7026      	strb	r6, [r4, #0]
    2192:	3401      	adds	r4, #1
    2194:	42a0      	cmp	r0, r4
    2196:	bf08      	it	eq
    2198:	4614      	moveq	r4, r2
    219a:	f813 6b01 	ldrb.w	r6, [r3], #1
    219e:	7026      	strb	r6, [r4, #0]
    21a0:	3401      	adds	r4, #1
    21a2:	42a0      	cmp	r0, r4
    21a4:	bf08      	it	eq
    21a6:	4614      	moveq	r4, r2
    21a8:	f813 eb01 	ldrb.w	lr, [r3], #1
    21ac:	f884 e000 	strb.w	lr, [r4]
    21b0:	3401      	adds	r4, #1
    21b2:	42a0      	cmp	r0, r4
    21b4:	bf08      	it	eq
    21b6:	4614      	moveq	r4, r2
    while ( ui32NumBytes )
    21b8:	4553      	cmp	r3, sl
    21ba:	f43f aea4 	beq.w	1f06 <am_hal_ios_fifo_service+0x18a>
        *pFifoPtr++ = *pui8Data++;
    21be:	469c      	mov	ip, r3
    21c0:	1c66      	adds	r6, r4, #1
    21c2:	f81c eb01 	ldrb.w	lr, [ip], #1
    21c6:	f884 e000 	strb.w	lr, [r4]
    21ca:	42b0      	cmp	r0, r6
    21cc:	bf0c      	ite	eq
    21ce:	4614      	moveq	r4, r2
    21d0:	4634      	movne	r4, r6
    21d2:	f89c 6000 	ldrb.w	r6, [ip]
    21d6:	7026      	strb	r6, [r4, #0]
    21d8:	3401      	adds	r4, #1
    21da:	42a0      	cmp	r0, r4
    21dc:	bf08      	it	eq
    21de:	4614      	moveq	r4, r2
    21e0:	789e      	ldrb	r6, [r3, #2]
    21e2:	7026      	strb	r6, [r4, #0]
    21e4:	3401      	adds	r4, #1
    21e6:	42a0      	cmp	r0, r4
    21e8:	bf08      	it	eq
    21ea:	4614      	moveq	r4, r2
    21ec:	78de      	ldrb	r6, [r3, #3]
    21ee:	7026      	strb	r6, [r4, #0]
    21f0:	3401      	adds	r4, #1
    21f2:	42a0      	cmp	r0, r4
    21f4:	bf08      	it	eq
    21f6:	4614      	moveq	r4, r2
    21f8:	791e      	ldrb	r6, [r3, #4]
    21fa:	7026      	strb	r6, [r4, #0]
    21fc:	3401      	adds	r4, #1
    21fe:	42a0      	cmp	r0, r4
    2200:	bf08      	it	eq
    2202:	4614      	moveq	r4, r2
    2204:	795e      	ldrb	r6, [r3, #5]
    2206:	7026      	strb	r6, [r4, #0]
    2208:	3401      	adds	r4, #1
    220a:	42a0      	cmp	r0, r4
    220c:	bf08      	it	eq
    220e:	4614      	moveq	r4, r2
    2210:	799e      	ldrb	r6, [r3, #6]
    2212:	7026      	strb	r6, [r4, #0]
    2214:	3308      	adds	r3, #8
    2216:	3401      	adds	r4, #1
    2218:	42a0      	cmp	r0, r4
    221a:	bf08      	it	eq
    221c:	4614      	moveq	r4, r2
    221e:	f813 ec01 	ldrb.w	lr, [r3, #-1]
    2222:	e7c3      	b.n	21ac <am_hal_ios_fifo_service+0x430>
    2224:	10001040 	.word	0x10001040
    2228:	1000103c 	.word	0x1000103c
                        fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), chunk2);
    222c:	68ab      	ldr	r3, [r5, #8]
    222e:	682e      	ldr	r6, [r5, #0]
    uint8_t *pFifoBase = g_pui8FIFOBase;
    2230:	4a56      	ldr	r2, [pc, #344]	; (238c <am_hal_ios_fifo_service+0x610>)
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    2232:	4957      	ldr	r1, [pc, #348]	; (2390 <am_hal_ios_fifo_service+0x614>)
    uint8_t *pFifoBase = g_pui8FIFOBase;
    2234:	6812      	ldr	r2, [r2, #0]
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    2236:	6809      	ldr	r1, [r1, #0]
                        fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), chunk2);
    2238:	441e      	add	r6, r3
        *pFifoPtr++ = *pui8Data++;
    223a:	4633      	mov	r3, r6
    223c:	3401      	adds	r4, #1
    223e:	f813 eb01 	ldrb.w	lr, [r3], #1
    2242:	f804 ec01 	strb.w	lr, [r4, #-1]
    2246:	4406      	add	r6, r0
    2248:	f100 3aff 	add.w	sl, r0, #4294967295
    224c:	42a1      	cmp	r1, r4
    224e:	bf08      	it	eq
    2250:	4614      	moveq	r4, r2
    while ( ui32NumBytes )
    2252:	429e      	cmp	r6, r3
    2254:	f00a 0e07 	and.w	lr, sl, #7
    2258:	f000 808e 	beq.w	2378 <am_hal_ios_fifo_service+0x5fc>
    225c:	f1be 0f00 	cmp.w	lr, #0
    2260:	d04b      	beq.n	22fa <am_hal_ios_fifo_service+0x57e>
    2262:	f1be 0f01 	cmp.w	lr, #1
    2266:	d03e      	beq.n	22e6 <am_hal_ios_fifo_service+0x56a>
    2268:	f1be 0f02 	cmp.w	lr, #2
    226c:	d033      	beq.n	22d6 <am_hal_ios_fifo_service+0x55a>
    226e:	f1be 0f03 	cmp.w	lr, #3
    2272:	d028      	beq.n	22c6 <am_hal_ios_fifo_service+0x54a>
    2274:	f1be 0f04 	cmp.w	lr, #4
    2278:	d01d      	beq.n	22b6 <am_hal_ios_fifo_service+0x53a>
    227a:	f1be 0f05 	cmp.w	lr, #5
    227e:	d012      	beq.n	22a6 <am_hal_ios_fifo_service+0x52a>
    2280:	f1be 0f06 	cmp.w	lr, #6
    2284:	d007      	beq.n	2296 <am_hal_ios_fifo_service+0x51a>
        *pFifoPtr++ = *pui8Data++;
    2286:	f813 9b01 	ldrb.w	r9, [r3], #1
    228a:	f884 9000 	strb.w	r9, [r4]
    228e:	3401      	adds	r4, #1
    2290:	42a1      	cmp	r1, r4
    2292:	bf08      	it	eq
    2294:	4614      	moveq	r4, r2
    2296:	f813 cb01 	ldrb.w	ip, [r3], #1
    229a:	f884 c000 	strb.w	ip, [r4]
    229e:	3401      	adds	r4, #1
    22a0:	42a1      	cmp	r1, r4
    22a2:	bf08      	it	eq
    22a4:	4614      	moveq	r4, r2
    22a6:	f813 eb01 	ldrb.w	lr, [r3], #1
    22aa:	f884 e000 	strb.w	lr, [r4]
    22ae:	3401      	adds	r4, #1
    22b0:	42a1      	cmp	r1, r4
    22b2:	bf08      	it	eq
    22b4:	4614      	moveq	r4, r2
    22b6:	f813 ab01 	ldrb.w	sl, [r3], #1
    22ba:	f884 a000 	strb.w	sl, [r4]
    22be:	3401      	adds	r4, #1
    22c0:	42a1      	cmp	r1, r4
    22c2:	bf08      	it	eq
    22c4:	4614      	moveq	r4, r2
    22c6:	f813 9b01 	ldrb.w	r9, [r3], #1
    22ca:	f884 9000 	strb.w	r9, [r4]
    22ce:	3401      	adds	r4, #1
    22d0:	42a1      	cmp	r1, r4
    22d2:	bf08      	it	eq
    22d4:	4614      	moveq	r4, r2
    22d6:	f813 cb01 	ldrb.w	ip, [r3], #1
    22da:	f884 c000 	strb.w	ip, [r4]
    22de:	3401      	adds	r4, #1
    22e0:	42a1      	cmp	r1, r4
    22e2:	bf08      	it	eq
    22e4:	4614      	moveq	r4, r2
    22e6:	f813 eb01 	ldrb.w	lr, [r3], #1
    22ea:	f884 e000 	strb.w	lr, [r4]
    22ee:	3401      	adds	r4, #1
    22f0:	42a1      	cmp	r1, r4
    22f2:	bf08      	it	eq
    22f4:	4614      	moveq	r4, r2
    while ( ui32NumBytes )
    22f6:	429e      	cmp	r6, r3
    22f8:	d03e      	beq.n	2378 <am_hal_ios_fifo_service+0x5fc>
        *pFifoPtr++ = *pui8Data++;
    22fa:	469a      	mov	sl, r3
    22fc:	f104 0e01 	add.w	lr, r4, #1
    2300:	f81a 9b01 	ldrb.w	r9, [sl], #1
    2304:	f884 9000 	strb.w	r9, [r4]
    2308:	4571      	cmp	r1, lr
    230a:	bf0c      	ite	eq
    230c:	4614      	moveq	r4, r2
    230e:	4674      	movne	r4, lr
    2310:	f89a c000 	ldrb.w	ip, [sl]
    2314:	f884 c000 	strb.w	ip, [r4]
    2318:	3401      	adds	r4, #1
    231a:	42a1      	cmp	r1, r4
    231c:	bf08      	it	eq
    231e:	4614      	moveq	r4, r2
    2320:	f893 a002 	ldrb.w	sl, [r3, #2]
    2324:	f884 a000 	strb.w	sl, [r4]
    2328:	3401      	adds	r4, #1
    232a:	42a1      	cmp	r1, r4
    232c:	bf08      	it	eq
    232e:	4614      	moveq	r4, r2
    2330:	f893 e003 	ldrb.w	lr, [r3, #3]
    2334:	f884 e000 	strb.w	lr, [r4]
    2338:	3401      	adds	r4, #1
    233a:	42a1      	cmp	r1, r4
    233c:	bf08      	it	eq
    233e:	4614      	moveq	r4, r2
    2340:	f893 9004 	ldrb.w	r9, [r3, #4]
    2344:	f884 9000 	strb.w	r9, [r4]
    2348:	3401      	adds	r4, #1
    234a:	42a1      	cmp	r1, r4
    234c:	bf08      	it	eq
    234e:	4614      	moveq	r4, r2
    2350:	f893 c005 	ldrb.w	ip, [r3, #5]
    2354:	f884 c000 	strb.w	ip, [r4]
    2358:	3401      	adds	r4, #1
    235a:	42a1      	cmp	r1, r4
    235c:	bf08      	it	eq
    235e:	4614      	moveq	r4, r2
    2360:	f893 a006 	ldrb.w	sl, [r3, #6]
    2364:	f884 a000 	strb.w	sl, [r4]
    2368:	3308      	adds	r3, #8
    236a:	3401      	adds	r4, #1
    236c:	42a1      	cmp	r1, r4
    236e:	bf08      	it	eq
    2370:	4614      	moveq	r4, r2
    2372:	f813 ec01 	ldrb.w	lr, [r3, #-1]
    2376:	e7b8      	b.n	22ea <am_hal_ios_fifo_service+0x56e>
                        g_sSRAMBuffer.ui32ReadIndex += chunk2;
    2378:	68ae      	ldr	r6, [r5, #8]
    g_pui8FIFOPtr = pFifoPtr;
    237a:	f8c8 4000 	str.w	r4, [r8]
                        g_sSRAMBuffer.ui32ReadIndex += chunk2;
    237e:	4406      	add	r6, r0
    2380:	60ae      	str	r6, [r5, #8]
                        g_sSRAMBuffer.ui32Length -= chunk2;
    2382:	68ea      	ldr	r2, [r5, #12]
    2384:	1a10      	subs	r0, r2, r0
    2386:	60e8      	str	r0, [r5, #12]
    2388:	e5c5      	b.n	1f16 <am_hal_ios_fifo_service+0x19a>
    238a:	4770      	bx	lr
    238c:	1000103c 	.word	0x1000103c
    2390:	10001040 	.word	0x10001040

00002394 <am_hal_ios_fifo_write>:
{
    2394:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    am_hal_debug_assert(g_sSRAMBuffer.pui8Data != 0);
    2398:	4cc6      	ldr	r4, [pc, #792]	; (26b4 <am_hal_ios_fifo_write+0x320>)
    239a:	6822      	ldr	r2, [r4, #0]
{
    239c:	4681      	mov	r9, r0
    239e:	460e      	mov	r6, r1
    am_hal_debug_assert(g_sSRAMBuffer.pui8Data != 0);
    23a0:	2a00      	cmp	r2, #0
    23a2:	f000 8161 	beq.w	2668 <am_hal_ios_fifo_write+0x2d4>
    if ( ui32NumBytes == 0 )
    23a6:	b916      	cbnz	r6, 23ae <am_hal_ios_fifo_write+0x1a>
}
    23a8:	4630      	mov	r0, r6
    23aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ui32Primask = am_hal_interrupt_master_disable();
    23ae:	f7ff fc2d 	bl	1c0c <am_hal_interrupt_master_disable>
    ui32SRAMLength = g_sSRAMBuffer.ui32Length;
    23b2:	68e7      	ldr	r7, [r4, #12]
    am_hal_interrupt_master_set(ui32Primask);
    23b4:	f7ff fc2e 	bl	1c14 <am_hal_interrupt_master_set>
    if ( ui32SRAMLength == 0 )
    23b8:	2f00      	cmp	r7, #0
    23ba:	f000 809e 	beq.w	24fa <am_hal_ios_fifo_write+0x166>
    23be:	46b0      	mov	r8, r6
        ui32SRAMSpace = g_sSRAMBuffer.ui32Capacity - ui32SRAMLength;
    23c0:	6965      	ldr	r5, [r4, #20]
        writeIdx = g_sSRAMBuffer.ui32WriteIndex;
    23c2:	f8d4 a004 	ldr.w	sl, [r4, #4]
        ui32SRAMSpace = g_sSRAMBuffer.ui32Capacity - ui32SRAMLength;
    23c6:	1bef      	subs	r7, r5, r7
    23c8:	4547      	cmp	r7, r8
    23ca:	bf28      	it	cs
    23cc:	4647      	movcs	r7, r8
        for ( idx = 0; idx < ui32SRAMSpace; idx++ )
    23ce:	2f00      	cmp	r7, #0
    23d0:	d06f      	beq.n	24b2 <am_hal_ios_fifo_write+0x11e>
            g_sSRAMBuffer.pui8Data[(idx + writeIdx) % capacity] = pui8Data[idx];
    23d2:	464b      	mov	r3, r9
    23d4:	ebaa 0209 	sub.w	r2, sl, r9
    23d8:	eb09 0002 	add.w	r0, r9, r2
    23dc:	f813 bb01 	ldrb.w	fp, [r3], #1
    23e0:	fbb0 f1f5 	udiv	r1, r0, r5
    23e4:	fb05 0c11 	mls	ip, r5, r1, r0
    23e8:	6821      	ldr	r1, [r4, #0]
    23ea:	eb09 0007 	add.w	r0, r9, r7
    23ee:	f107 3eff 	add.w	lr, r7, #4294967295
        for ( idx = 0; idx < ui32SRAMSpace; idx++ )
    23f2:	4298      	cmp	r0, r3
            g_sSRAMBuffer.pui8Data[(idx + writeIdx) % capacity] = pui8Data[idx];
    23f4:	f801 b00c 	strb.w	fp, [r1, ip]
    23f8:	f00e 0103 	and.w	r1, lr, #3
        for ( idx = 0; idx < ui32SRAMSpace; idx++ )
    23fc:	d059      	beq.n	24b2 <am_hal_ios_fifo_write+0x11e>
    23fe:	b331      	cbz	r1, 244e <am_hal_ios_fifo_write+0xba>
    2400:	2901      	cmp	r1, #1
    2402:	d017      	beq.n	2434 <am_hal_ios_fifo_write+0xa0>
    2404:	2902      	cmp	r1, #2
    2406:	d00a      	beq.n	241e <am_hal_ios_fifo_write+0x8a>
            g_sSRAMBuffer.pui8Data[(idx + writeIdx) % capacity] = pui8Data[idx];
    2408:	eb02 0903 	add.w	r9, r2, r3
    240c:	6821      	ldr	r1, [r4, #0]
    240e:	fbb9 fbf5 	udiv	fp, r9, r5
    2412:	fb05 9e1b 	mls	lr, r5, fp, r9
    2416:	f813 cb01 	ldrb.w	ip, [r3], #1
    241a:	f801 c00e 	strb.w	ip, [r1, lr]
    241e:	eb02 0903 	add.w	r9, r2, r3
    2422:	6821      	ldr	r1, [r4, #0]
    2424:	fbb9 fbf5 	udiv	fp, r9, r5
    2428:	fb05 9e1b 	mls	lr, r5, fp, r9
    242c:	f813 cb01 	ldrb.w	ip, [r3], #1
    2430:	f801 c00e 	strb.w	ip, [r1, lr]
    2434:	eb02 0903 	add.w	r9, r2, r3
    2438:	f813 cb01 	ldrb.w	ip, [r3], #1
    243c:	6821      	ldr	r1, [r4, #0]
    243e:	fbb9 fbf5 	udiv	fp, r9, r5
    2442:	fb05 9e1b 	mls	lr, r5, fp, r9
        for ( idx = 0; idx < ui32SRAMSpace; idx++ )
    2446:	4298      	cmp	r0, r3
            g_sSRAMBuffer.pui8Data[(idx + writeIdx) % capacity] = pui8Data[idx];
    2448:	f801 c00e 	strb.w	ip, [r1, lr]
        for ( idx = 0; idx < ui32SRAMSpace; idx++ )
    244c:	d031      	beq.n	24b2 <am_hal_ios_fifo_write+0x11e>
            g_sSRAMBuffer.pui8Data[(idx + writeIdx) % capacity] = pui8Data[idx];
    244e:	469e      	mov	lr, r3
    2450:	eb02 0c03 	add.w	ip, r2, r3
    2454:	6821      	ldr	r1, [r4, #0]
    2456:	fbbc f9f5 	udiv	r9, ip, r5
    245a:	fb05 c919 	mls	r9, r5, r9, ip
    245e:	f81e bb01 	ldrb.w	fp, [lr], #1
    2462:	f801 b009 	strb.w	fp, [r1, r9]
    2466:	eb02 0c0e 	add.w	ip, r2, lr
    246a:	6821      	ldr	r1, [r4, #0]
    246c:	fbbc f9f5 	udiv	r9, ip, r5
    2470:	fb05 c919 	mls	r9, r5, r9, ip
    2474:	f893 b001 	ldrb.w	fp, [r3, #1]
    2478:	f801 b009 	strb.w	fp, [r1, r9]
    247c:	f10e 0c01 	add.w	ip, lr, #1
    2480:	4494      	add	ip, r2
    2482:	6821      	ldr	r1, [r4, #0]
    2484:	fbbc fbf5 	udiv	fp, ip, r5
    2488:	fb05 c91b 	mls	r9, r5, fp, ip
    248c:	f89e e001 	ldrb.w	lr, [lr, #1]
    2490:	f801 e009 	strb.w	lr, [r1, r9]
    2494:	f103 0b03 	add.w	fp, r3, #3
    2498:	4493      	add	fp, r2
    249a:	f893 e003 	ldrb.w	lr, [r3, #3]
    249e:	6821      	ldr	r1, [r4, #0]
    24a0:	fbbb fcf5 	udiv	ip, fp, r5
    24a4:	3304      	adds	r3, #4
    24a6:	fb05 b91c 	mls	r9, r5, ip, fp
        for ( idx = 0; idx < ui32SRAMSpace; idx++ )
    24aa:	4298      	cmp	r0, r3
            g_sSRAMBuffer.pui8Data[(idx + writeIdx) % capacity] = pui8Data[idx];
    24ac:	f801 e009 	strb.w	lr, [r1, r9]
        for ( idx = 0; idx < ui32SRAMSpace; idx++ )
    24b0:	d1cd      	bne.n	244e <am_hal_ios_fifo_write+0xba>
        g_sSRAMBuffer.ui32WriteIndex = (idx + writeIdx) % capacity;
    24b2:	44ba      	add	sl, r7
        ui32Primask = am_hal_interrupt_master_disable();
    24b4:	f7ff fbaa 	bl	1c0c <am_hal_interrupt_master_disable>
        g_sSRAMBuffer.ui32WriteIndex = (idx + writeIdx) % capacity;
    24b8:	fbba f2f5 	udiv	r2, sl, r5
    24bc:	fb05 a312 	mls	r3, r5, r2, sl
    24c0:	6063      	str	r3, [r4, #4]
        g_sSRAMBuffer.ui32Length += idx;
    24c2:	68e5      	ldr	r5, [r4, #12]
    24c4:	443d      	add	r5, r7
    24c6:	60e5      	str	r5, [r4, #12]
        am_hal_interrupt_master_set(ui32Primask);
    24c8:	f7ff fba4 	bl	1c14 <am_hal_interrupt_master_set>
        fifoSize = AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ);
    24cc:	487a      	ldr	r0, [pc, #488]	; (26b8 <am_hal_ios_fifo_write+0x324>)
        if ( fifoSize <= AM_BFR(IOSLAVE, FIFOTHR, FIFOTHR) )
    24ce:	497b      	ldr	r1, [pc, #492]	; (26bc <am_hal_ios_fifo_write+0x328>)
        fifoSize = AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ);
    24d0:	6802      	ldr	r2, [r0, #0]
        if ( fifoSize <= AM_BFR(IOSLAVE, FIFOTHR, FIFOTHR) )
    24d2:	680b      	ldr	r3, [r1, #0]
        fifoSize = AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ);
    24d4:	f3c2 2507 	ubfx	r5, r2, #8, #8
        if ( fifoSize <= AM_BFR(IOSLAVE, FIFOTHR, FIFOTHR) )
    24d8:	b2d8      	uxtb	r0, r3
    24da:	4285      	cmp	r5, r0
        ui32NumBytes -= idx;
    24dc:	eba8 0707 	sub.w	r7, r8, r7
        if ( fifoSize <= AM_BFR(IOSLAVE, FIFOTHR, FIFOTHR) )
    24e0:	d804      	bhi.n	24ec <am_hal_ios_fifo_write+0x158>
            AM_BFW(IOSLAVE, INTSET, FSIZE, 1);
    24e2:	4977      	ldr	r1, [pc, #476]	; (26c0 <am_hal_ios_fifo_write+0x32c>)
    24e4:	680a      	ldr	r2, [r1, #0]
    24e6:	f042 0301 	orr.w	r3, r2, #1
    24ea:	600b      	str	r3, [r1, #0]
    g_sSRAMBuffer.ui32FifoInc += totalBytes - ui32NumBytes;
    24ec:	6925      	ldr	r5, [r4, #16]
    24ee:	1bf6      	subs	r6, r6, r7
    24f0:	4435      	add	r5, r6
    24f2:	6125      	str	r5, [r4, #16]
}
    24f4:	4630      	mov	r0, r6
    24f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return ((uint32_t)g_ui32HwFifoSize- AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ) - 1);
    24fa:	4b6f      	ldr	r3, [pc, #444]	; (26b8 <am_hal_ios_fifo_write+0x324>)
    24fc:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 26d8 <am_hal_ios_fifo_write+0x344>
    2500:	6818      	ldr	r0, [r3, #0]
    2502:	f89a 8000 	ldrb.w	r8, [sl]
    2506:	f3c0 2107 	ubfx	r1, r0, #8, #8
    250a:	f108 32ff 	add.w	r2, r8, #4294967295
    250e:	1a50      	subs	r0, r2, r1
        if ( ui32NumBytes <= ui32FIFOSpace )
    2510:	4286      	cmp	r6, r0
    2512:	f200 80e5 	bhi.w	26e0 <am_hal_ios_fifo_write+0x34c>
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    2516:	f8df e1c4 	ldr.w	lr, [pc, #452]	; 26dc <am_hal_ios_fifo_write+0x348>
    uint8_t *pFifoBase = g_pui8FIFOBase;
    251a:	486a      	ldr	r0, [pc, #424]	; (26c4 <am_hal_ios_fifo_write+0x330>)
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    251c:	496a      	ldr	r1, [pc, #424]	; (26c8 <am_hal_ios_fifo_write+0x334>)
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    251e:	f8de 5000 	ldr.w	r5, [lr]
    uint8_t *pFifoBase = g_pui8FIFOBase;
    2522:	6802      	ldr	r2, [r0, #0]
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    2524:	6809      	ldr	r1, [r1, #0]
        *pFifoPtr++ = *pui8Data++;
    2526:	464b      	mov	r3, r9
    2528:	eb09 0006 	add.w	r0, r9, r6
    252c:	f813 cb01 	ldrb.w	ip, [r3], #1
    2530:	f885 c000 	strb.w	ip, [r5]
    2534:	ea6f 0809 	mvn.w	r8, r9
    2538:	3501      	adds	r5, #1
    253a:	4480      	add	r8, r0
    253c:	42a9      	cmp	r1, r5
    253e:	bf08      	it	eq
    2540:	4615      	moveq	r5, r2
    while ( ui32NumBytes )
    2542:	4283      	cmp	r3, r0
    2544:	f008 0b07 	and.w	fp, r8, #7
    2548:	f000 8094 	beq.w	2674 <am_hal_ios_fifo_write+0x2e0>
    254c:	f1bb 0f00 	cmp.w	fp, #0
    2550:	d04b      	beq.n	25ea <am_hal_ios_fifo_write+0x256>
    2552:	f1bb 0f01 	cmp.w	fp, #1
    2556:	d03e      	beq.n	25d6 <am_hal_ios_fifo_write+0x242>
    2558:	f1bb 0f02 	cmp.w	fp, #2
    255c:	d033      	beq.n	25c6 <am_hal_ios_fifo_write+0x232>
    255e:	f1bb 0f03 	cmp.w	fp, #3
    2562:	d028      	beq.n	25b6 <am_hal_ios_fifo_write+0x222>
    2564:	f1bb 0f04 	cmp.w	fp, #4
    2568:	d01d      	beq.n	25a6 <am_hal_ios_fifo_write+0x212>
    256a:	f1bb 0f05 	cmp.w	fp, #5
    256e:	d012      	beq.n	2596 <am_hal_ios_fifo_write+0x202>
    2570:	f1bb 0f06 	cmp.w	fp, #6
    2574:	d007      	beq.n	2586 <am_hal_ios_fifo_write+0x1f2>
        *pFifoPtr++ = *pui8Data++;
    2576:	f813 cb01 	ldrb.w	ip, [r3], #1
    257a:	f885 c000 	strb.w	ip, [r5]
    257e:	3501      	adds	r5, #1
    2580:	42a9      	cmp	r1, r5
    2582:	bf08      	it	eq
    2584:	4615      	moveq	r5, r2
    2586:	f813 8b01 	ldrb.w	r8, [r3], #1
    258a:	f885 8000 	strb.w	r8, [r5]
    258e:	3501      	adds	r5, #1
    2590:	42a9      	cmp	r1, r5
    2592:	bf08      	it	eq
    2594:	4615      	moveq	r5, r2
    2596:	f813 bb01 	ldrb.w	fp, [r3], #1
    259a:	f885 b000 	strb.w	fp, [r5]
    259e:	3501      	adds	r5, #1
    25a0:	42a9      	cmp	r1, r5
    25a2:	bf08      	it	eq
    25a4:	4615      	moveq	r5, r2
    25a6:	f813 cb01 	ldrb.w	ip, [r3], #1
    25aa:	f885 c000 	strb.w	ip, [r5]
    25ae:	3501      	adds	r5, #1
    25b0:	42a9      	cmp	r1, r5
    25b2:	bf08      	it	eq
    25b4:	4615      	moveq	r5, r2
    25b6:	f813 8b01 	ldrb.w	r8, [r3], #1
    25ba:	f885 8000 	strb.w	r8, [r5]
    25be:	3501      	adds	r5, #1
    25c0:	42a9      	cmp	r1, r5
    25c2:	bf08      	it	eq
    25c4:	4615      	moveq	r5, r2
    25c6:	f813 bb01 	ldrb.w	fp, [r3], #1
    25ca:	f885 b000 	strb.w	fp, [r5]
    25ce:	3501      	adds	r5, #1
    25d0:	42a9      	cmp	r1, r5
    25d2:	bf08      	it	eq
    25d4:	4615      	moveq	r5, r2
    25d6:	f813 cb01 	ldrb.w	ip, [r3], #1
    25da:	f885 c000 	strb.w	ip, [r5]
    25de:	3501      	adds	r5, #1
    25e0:	42a9      	cmp	r1, r5
    25e2:	bf08      	it	eq
    25e4:	4615      	moveq	r5, r2
    while ( ui32NumBytes )
    25e6:	4283      	cmp	r3, r0
    25e8:	d044      	beq.n	2674 <am_hal_ios_fifo_write+0x2e0>
        *pFifoPtr++ = *pui8Data++;
    25ea:	4698      	mov	r8, r3
    25ec:	f105 0c01 	add.w	ip, r5, #1
    25f0:	f818 bb01 	ldrb.w	fp, [r8], #1
    25f4:	f885 b000 	strb.w	fp, [r5]
    25f8:	4561      	cmp	r1, ip
    25fa:	bf0c      	ite	eq
    25fc:	4615      	moveq	r5, r2
    25fe:	4665      	movne	r5, ip
    2600:	f898 8000 	ldrb.w	r8, [r8]
    2604:	f885 8000 	strb.w	r8, [r5]
    2608:	3501      	adds	r5, #1
    260a:	42a9      	cmp	r1, r5
    260c:	bf08      	it	eq
    260e:	4615      	moveq	r5, r2
    2610:	f893 c002 	ldrb.w	ip, [r3, #2]
    2614:	f885 c000 	strb.w	ip, [r5]
    2618:	3501      	adds	r5, #1
    261a:	42a9      	cmp	r1, r5
    261c:	bf08      	it	eq
    261e:	4615      	moveq	r5, r2
    2620:	f893 b003 	ldrb.w	fp, [r3, #3]
    2624:	f885 b000 	strb.w	fp, [r5]
    2628:	3501      	adds	r5, #1
    262a:	42a9      	cmp	r1, r5
    262c:	bf08      	it	eq
    262e:	4615      	moveq	r5, r2
    2630:	f893 8004 	ldrb.w	r8, [r3, #4]
    2634:	f885 8000 	strb.w	r8, [r5]
    2638:	3501      	adds	r5, #1
    263a:	42a9      	cmp	r1, r5
    263c:	bf08      	it	eq
    263e:	4615      	moveq	r5, r2
    2640:	f893 c005 	ldrb.w	ip, [r3, #5]
    2644:	f885 c000 	strb.w	ip, [r5]
    2648:	3501      	adds	r5, #1
    264a:	42a9      	cmp	r1, r5
    264c:	bf08      	it	eq
    264e:	4615      	moveq	r5, r2
    2650:	f893 b006 	ldrb.w	fp, [r3, #6]
    2654:	f885 b000 	strb.w	fp, [r5]
    2658:	3308      	adds	r3, #8
    265a:	3501      	adds	r5, #1
    265c:	42a9      	cmp	r1, r5
    265e:	bf08      	it	eq
    2660:	4615      	moveq	r5, r2
    2662:	f813 cc01 	ldrb.w	ip, [r3, #-1]
    2666:	e7b8      	b.n	25da <am_hal_ios_fifo_write+0x246>
    am_hal_debug_assert(g_sSRAMBuffer.pui8Data != 0);
    2668:	f240 4105 	movw	r1, #1029	; 0x405
    266c:	4817      	ldr	r0, [pc, #92]	; (26cc <am_hal_ios_fifo_write+0x338>)
    266e:	f7ff fa9b 	bl	1ba8 <am_hal_debug_error>
    2672:	e698      	b.n	23a6 <am_hal_ios_fifo_write+0x12>
    return ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) ==   \
    2674:	4a16      	ldr	r2, [pc, #88]	; (26d0 <am_hal_ios_fifo_write+0x33c>)
    g_pui8FIFOPtr = pFifoPtr;
    2676:	f8ce 5000 	str.w	r5, [lr]
    return ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) ==   \
    267a:	6811      	ldr	r1, [r2, #0]
    267c:	b2cb      	uxtb	r3, r1
        if (!isRevB2())
    267e:	2b22      	cmp	r3, #34	; 0x22
    2680:	f43f af34 	beq.w	24ec <am_hal_ios_fifo_write+0x158>
            ui32NumBytes = 0;
    2684:	f04f 0800 	mov.w	r8, #0
    ui32Primask = am_hal_interrupt_master_disable();
    2688:	f7ff fac0 	bl	1c0c <am_hal_interrupt_master_disable>
    internal_resync_fifoSize(wrOffset, g_ui32HwFifoSize, AM_REG_IOS_FIFOPTR);
    268c:	4a0a      	ldr	r2, [pc, #40]	; (26b8 <am_hal_ios_fifo_write+0x324>)
    268e:	f89a 1000 	ldrb.w	r1, [sl]
    ui32Primask = am_hal_interrupt_master_disable();
    2692:	4683      	mov	fp, r0
    internal_resync_fifoSize(wrOffset, g_ui32HwFifoSize, AM_REG_IOS_FIFOPTR);
    2694:	f105 4030 	add.w	r0, r5, #2952790016	; 0xb0000000
    AM_REG(IOSLAVE, REGACCINTCLR) = (AM_HAL_IOS_INT_FSIZE | AM_HAL_IOS_INT_FOVFL | AM_HAL_IOS_INT_FUNDFL);
    2698:	4d0e      	ldr	r5, [pc, #56]	; (26d4 <am_hal_ios_fifo_write+0x340>)
    internal_resync_fifoSize(wrOffset, g_ui32HwFifoSize, AM_REG_IOS_FIFOPTR);
    269a:	f7ff fabf 	bl	1c1c <internal_resync_fifoSize>
    AM_REG(IOSLAVE, REGACCINTCLR) = (AM_HAL_IOS_INT_FSIZE | AM_HAL_IOS_INT_FOVFL | AM_HAL_IOS_INT_FUNDFL);
    269e:	2207      	movs	r2, #7
    am_hal_interrupt_master_set(ui32Primask);
    26a0:	4658      	mov	r0, fp
    AM_REG(IOSLAVE, REGACCINTCLR) = (AM_HAL_IOS_INT_FSIZE | AM_HAL_IOS_INT_FOVFL | AM_HAL_IOS_INT_FUNDFL);
    26a2:	602a      	str	r2, [r5, #0]
    am_hal_interrupt_master_set(ui32Primask);
    26a4:	f7ff fab6 	bl	1c14 <am_hal_interrupt_master_set>
    if ( ui32NumBytes )
    26a8:	f1b8 0f00 	cmp.w	r8, #0
    26ac:	f43f af1e 	beq.w	24ec <am_hal_ios_fifo_write+0x158>
    26b0:	e686      	b.n	23c0 <am_hal_ios_fifo_write+0x2c>
    26b2:	bf00      	nop
    26b4:	100017ac 	.word	0x100017ac
    26b8:	50000100 	.word	0x50000100
    26bc:	50000108 	.word	0x50000108
    26c0:	5000020c 	.word	0x5000020c
    26c4:	1000103c 	.word	0x1000103c
    26c8:	10001040 	.word	0x10001040
    26cc:	0000308c 	.word	0x0000308c
    26d0:	4002000c 	.word	0x4002000c
    26d4:	50000218 	.word	0x50000218
    26d8:	10001158 	.word	0x10001158
    26dc:	10001044 	.word	0x10001044
    uint8_t *pFifoBase = g_pui8FIFOBase;
    26e0:	495c      	ldr	r1, [pc, #368]	; (2854 <am_hal_ios_fifo_write+0x4c0>)
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    26e2:	f8df c17c 	ldr.w	ip, [pc, #380]	; 2860 <am_hal_ios_fifo_write+0x4cc>
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    26e6:	4b5c      	ldr	r3, [pc, #368]	; (2858 <am_hal_ios_fifo_write+0x4c4>)
    uint8_t *pFifoBase = g_pui8FIFOBase;
    26e8:	680a      	ldr	r2, [r1, #0]
    uint8_t *pFifoPtr = g_pui8FIFOPtr;
    26ea:	f8dc 5000 	ldr.w	r5, [ip]
    uint8_t *pFifoEnd = g_pui8FIFOEnd;
    26ee:	6819      	ldr	r1, [r3, #0]
    26f0:	46ce      	mov	lr, r9
    while ( ui32NumBytes )
    26f2:	2800      	cmp	r0, #0
    26f4:	f000 80a1 	beq.w	283a <am_hal_ios_fifo_write+0x4a6>
        *pFifoPtr++ = *pui8Data++;
    26f8:	464b      	mov	r3, r9
    26fa:	eb09 0e00 	add.w	lr, r9, r0
    26fe:	f813 bb01 	ldrb.w	fp, [r3], #1
    2702:	f885 b000 	strb.w	fp, [r5]
    2706:	ea6f 0909 	mvn.w	r9, r9
    270a:	3501      	adds	r5, #1
    270c:	44f1      	add	r9, lr
    270e:	42a9      	cmp	r1, r5
    2710:	bf08      	it	eq
    2712:	4615      	moveq	r5, r2
    while ( ui32NumBytes )
    2714:	4573      	cmp	r3, lr
    2716:	f009 0807 	and.w	r8, r9, #7
    271a:	f000 808e 	beq.w	283a <am_hal_ios_fifo_write+0x4a6>
    271e:	f1b8 0f00 	cmp.w	r8, #0
    2722:	d04b      	beq.n	27bc <am_hal_ios_fifo_write+0x428>
    2724:	f1b8 0f01 	cmp.w	r8, #1
    2728:	d03e      	beq.n	27a8 <am_hal_ios_fifo_write+0x414>
    272a:	f1b8 0f02 	cmp.w	r8, #2
    272e:	d033      	beq.n	2798 <am_hal_ios_fifo_write+0x404>
    2730:	f1b8 0f03 	cmp.w	r8, #3
    2734:	d028      	beq.n	2788 <am_hal_ios_fifo_write+0x3f4>
    2736:	f1b8 0f04 	cmp.w	r8, #4
    273a:	d01d      	beq.n	2778 <am_hal_ios_fifo_write+0x3e4>
    273c:	f1b8 0f05 	cmp.w	r8, #5
    2740:	d012      	beq.n	2768 <am_hal_ios_fifo_write+0x3d4>
    2742:	f1b8 0f06 	cmp.w	r8, #6
    2746:	d007      	beq.n	2758 <am_hal_ios_fifo_write+0x3c4>
        *pFifoPtr++ = *pui8Data++;
    2748:	f813 bb01 	ldrb.w	fp, [r3], #1
    274c:	f885 b000 	strb.w	fp, [r5]
    2750:	3501      	adds	r5, #1
    2752:	42a9      	cmp	r1, r5
    2754:	bf08      	it	eq
    2756:	4615      	moveq	r5, r2
    2758:	f813 9b01 	ldrb.w	r9, [r3], #1
    275c:	f885 9000 	strb.w	r9, [r5]
    2760:	3501      	adds	r5, #1
    2762:	42a9      	cmp	r1, r5
    2764:	bf08      	it	eq
    2766:	4615      	moveq	r5, r2
    2768:	f813 8b01 	ldrb.w	r8, [r3], #1
    276c:	f885 8000 	strb.w	r8, [r5]
    2770:	3501      	adds	r5, #1
    2772:	42a9      	cmp	r1, r5
    2774:	bf08      	it	eq
    2776:	4615      	moveq	r5, r2
    2778:	f813 bb01 	ldrb.w	fp, [r3], #1
    277c:	f885 b000 	strb.w	fp, [r5]
    2780:	3501      	adds	r5, #1
    2782:	42a9      	cmp	r1, r5
    2784:	bf08      	it	eq
    2786:	4615      	moveq	r5, r2
    2788:	f813 9b01 	ldrb.w	r9, [r3], #1
    278c:	f885 9000 	strb.w	r9, [r5]
    2790:	3501      	adds	r5, #1
    2792:	42a9      	cmp	r1, r5
    2794:	bf08      	it	eq
    2796:	4615      	moveq	r5, r2
    2798:	f813 8b01 	ldrb.w	r8, [r3], #1
    279c:	f885 8000 	strb.w	r8, [r5]
    27a0:	3501      	adds	r5, #1
    27a2:	42a9      	cmp	r1, r5
    27a4:	bf08      	it	eq
    27a6:	4615      	moveq	r5, r2
    27a8:	f813 bb01 	ldrb.w	fp, [r3], #1
    27ac:	f885 b000 	strb.w	fp, [r5]
    27b0:	3501      	adds	r5, #1
    27b2:	42a9      	cmp	r1, r5
    27b4:	bf08      	it	eq
    27b6:	4615      	moveq	r5, r2
    while ( ui32NumBytes )
    27b8:	4573      	cmp	r3, lr
    27ba:	d03e      	beq.n	283a <am_hal_ios_fifo_write+0x4a6>
        *pFifoPtr++ = *pui8Data++;
    27bc:	4699      	mov	r9, r3
    27be:	f105 0801 	add.w	r8, r5, #1
    27c2:	f819 bb01 	ldrb.w	fp, [r9], #1
    27c6:	f885 b000 	strb.w	fp, [r5]
    27ca:	4541      	cmp	r1, r8
    27cc:	bf0c      	ite	eq
    27ce:	4615      	moveq	r5, r2
    27d0:	4645      	movne	r5, r8
    27d2:	f899 9000 	ldrb.w	r9, [r9]
    27d6:	f885 9000 	strb.w	r9, [r5]
    27da:	3501      	adds	r5, #1
    27dc:	42a9      	cmp	r1, r5
    27de:	bf08      	it	eq
    27e0:	4615      	moveq	r5, r2
    27e2:	f893 8002 	ldrb.w	r8, [r3, #2]
    27e6:	f885 8000 	strb.w	r8, [r5]
    27ea:	3501      	adds	r5, #1
    27ec:	42a9      	cmp	r1, r5
    27ee:	bf08      	it	eq
    27f0:	4615      	moveq	r5, r2
    27f2:	f893 b003 	ldrb.w	fp, [r3, #3]
    27f6:	f885 b000 	strb.w	fp, [r5]
    27fa:	3501      	adds	r5, #1
    27fc:	42a9      	cmp	r1, r5
    27fe:	bf08      	it	eq
    2800:	4615      	moveq	r5, r2
    2802:	f893 9004 	ldrb.w	r9, [r3, #4]
    2806:	f885 9000 	strb.w	r9, [r5]
    280a:	3501      	adds	r5, #1
    280c:	42a9      	cmp	r1, r5
    280e:	bf08      	it	eq
    2810:	4615      	moveq	r5, r2
    2812:	f893 8005 	ldrb.w	r8, [r3, #5]
    2816:	f885 8000 	strb.w	r8, [r5]
    281a:	3501      	adds	r5, #1
    281c:	42a9      	cmp	r1, r5
    281e:	bf08      	it	eq
    2820:	4615      	moveq	r5, r2
    2822:	f893 b006 	ldrb.w	fp, [r3, #6]
    2826:	f885 b000 	strb.w	fp, [r5]
    282a:	3308      	adds	r3, #8
    282c:	3501      	adds	r5, #1
    282e:	42a9      	cmp	r1, r5
    2830:	bf08      	it	eq
    2832:	4615      	moveq	r5, r2
    2834:	f813 bc01 	ldrb.w	fp, [r3, #-1]
    2838:	e7b8      	b.n	27ac <am_hal_ios_fifo_write+0x418>
    return ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) ==   \
    283a:	4a08      	ldr	r2, [pc, #32]	; (285c <am_hal_ios_fifo_write+0x4c8>)
    g_pui8FIFOPtr = pFifoPtr;
    283c:	f8cc 5000 	str.w	r5, [ip]
    return ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) ==   \
    2840:	6811      	ldr	r1, [r2, #0]
    2842:	b2cb      	uxtb	r3, r1
        if (!isRevB2())
    2844:	2b22      	cmp	r3, #34	; 0x22
            ui32NumBytes -= ui32FIFOSpace;
    2846:	eba6 0800 	sub.w	r8, r6, r0
            pui8Data += ui32FIFOSpace;
    284a:	46f1      	mov	r9, lr
        if (!isRevB2())
    284c:	f47f af1c 	bne.w	2688 <am_hal_ios_fifo_write+0x2f4>
    2850:	e5b6      	b.n	23c0 <am_hal_ios_fifo_write+0x2c>
    2852:	bf00      	nop
    2854:	1000103c 	.word	0x1000103c
    2858:	10001040 	.word	0x10001040
    285c:	4002000c 	.word	0x4002000c
    2860:	10001044 	.word	0x10001044

00002864 <am_hal_ios_fifo_buffer_init>:
//*****************************************************************************
static void
am_hal_ios_buffer_init(am_hal_ios_buffer_t *psBuffer, void *pvArray,
                       uint32_t ui32Bytes)
{
    psBuffer->ui32WriteIndex = 0;
    2864:	4b16      	ldr	r3, [pc, #88]	; (28c0 <am_hal_ios_fifo_buffer_init+0x5c>)
    //
    // Initialize the global SRAM buffer
    // Total size, which is SRAM Buffer plus the hardware FIFO needs to be
    // limited to 1023
    //
    if ( ui32NumBytes > (1023 - g_ui32HwFifoSize + 1) )
    2866:	4a17      	ldr	r2, [pc, #92]	; (28c4 <am_hal_ios_fifo_buffer_init+0x60>)
{
    2868:	b570      	push	{r4, r5, r6, lr}
    psBuffer->ui32WriteIndex = 0;
    286a:	2400      	movs	r4, #0
    am_hal_ios_buffer_init(&g_sSRAMBuffer, pui8Buffer, ui32NumBytes);

    //
    // Clear the FIFO State
    //
    AM_BFW(IOSLAVE, FIFOCTR, FIFOCTR, 0x0);
    286c:	4e16      	ldr	r6, [pc, #88]	; (28c8 <am_hal_ios_fifo_buffer_init+0x64>)
    psBuffer->ui32WriteIndex = 0;
    286e:	605c      	str	r4, [r3, #4]
    psBuffer->ui32ReadIndex = 0;
    2870:	609c      	str	r4, [r3, #8]
    psBuffer->ui32Length = 0;
    2872:	60dc      	str	r4, [r3, #12]
    psBuffer->pui8Data = (uint8_t *)pvArray;
    2874:	6018      	str	r0, [r3, #0]
    AM_BFW(IOSLAVE, FIFOCTR, FIFOCTR, 0x0);
    2876:	6830      	ldr	r0, [r6, #0]
    AM_BFW(IOSLAVE, FIFOPTR, FIFOSIZ, 0x0);
    2878:	4d14      	ldr	r5, [pc, #80]	; (28cc <am_hal_ios_fifo_buffer_init+0x68>)
    psBuffer->ui32FifoInc = 0;
    287a:	611c      	str	r4, [r3, #16]
    AM_BFW(IOSLAVE, FIFOCTR, FIFOCTR, 0x0);
    287c:	f420 7e7f 	bic.w	lr, r0, #1020	; 0x3fc
    2880:	f02e 0003 	bic.w	r0, lr, #3
    if ( ui32NumBytes > (1023 - g_ui32HwFifoSize + 1) )
    2884:	f892 c000 	ldrb.w	ip, [r2]
    AM_BFW(IOSLAVE, FIFOCTR, FIFOCTR, 0x0);
    2888:	6030      	str	r0, [r6, #0]
    AM_BFW(IOSLAVE, FIFOPTR, FIFOSIZ, 0x0);
    288a:	6828      	ldr	r0, [r5, #0]

    am_hal_ios_fifo_ptr_set(g_ui32FifoBaseOffset);
    288c:	4e10      	ldr	r6, [pc, #64]	; (28d0 <am_hal_ios_fifo_buffer_init+0x6c>)
    if ( ui32NumBytes > (1023 - g_ui32HwFifoSize + 1) )
    288e:	f5cc 6280 	rsb	r2, ip, #1024	; 0x400
    2892:	4291      	cmp	r1, r2
    AM_BFW(IOSLAVE, FIFOPTR, FIFOSIZ, 0x0);
    2894:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
    2898:	bf28      	it	cs
    289a:	4611      	movcs	r1, r2
    289c:	6028      	str	r0, [r5, #0]
    am_hal_ios_fifo_ptr_set(g_ui32FifoBaseOffset);
    289e:	6836      	ldr	r6, [r6, #0]
    psBuffer->ui32Capacity = ui32Bytes;
    28a0:	6159      	str	r1, [r3, #20]
    ui32Primask = am_hal_interrupt_master_disable();
    28a2:	f7ff f9b3 	bl	1c0c <am_hal_interrupt_master_disable>
    AM_REG(IOSLAVE, FUPD) = 0x1;
    28a6:	4b0b      	ldr	r3, [pc, #44]	; (28d4 <am_hal_ios_fifo_buffer_init+0x70>)
    g_pui8FIFOPtr = (uint8_t *) (REG_IOSLAVE_BASEADDR + ui32Offset);
    28a8:	4a0b      	ldr	r2, [pc, #44]	; (28d8 <am_hal_ios_fifo_buffer_init+0x74>)
    AM_REG(IOSLAVE, FUPD) = 0x1;
    28aa:	2101      	movs	r1, #1
    28ac:	6019      	str	r1, [r3, #0]
    AM_REG(IOSLAVE, FIFOPTR) = ui32Offset;
    28ae:	602e      	str	r6, [r5, #0]
    g_pui8FIFOPtr = (uint8_t *) (REG_IOSLAVE_BASEADDR + ui32Offset);
    28b0:	f106 41a0 	add.w	r1, r6, #1342177280	; 0x50000000
    AM_REG(IOSLAVE, FUPD) = 0x0;
    28b4:	601c      	str	r4, [r3, #0]
}
    28b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    g_pui8FIFOPtr = (uint8_t *) (REG_IOSLAVE_BASEADDR + ui32Offset);
    28ba:	6011      	str	r1, [r2, #0]
    am_hal_interrupt_master_set(ui32Primask);
    28bc:	f7ff b9aa 	b.w	1c14 <am_hal_interrupt_master_set>
    28c0:	100017ac 	.word	0x100017ac
    28c4:	10001158 	.word	0x10001158
    28c8:	50000110 	.word	0x50000110
    28cc:	50000100 	.word	0x50000100
    28d0:	10001154 	.word	0x10001154
    28d4:	5000010c 	.word	0x5000010c
    28d8:	10001044 	.word	0x10001044

000028dc <am_hal_ios_update_fifoctr>:
//*****************************************************************************
void
am_hal_ios_update_fifoctr(void)
{
    // Write FIFOINC
    AM_BFW(IOSLAVE, FIFOINC, FIFOINC, g_sSRAMBuffer.ui32FifoInc);
    28dc:	4807      	ldr	r0, [pc, #28]	; (28fc <am_hal_ios_update_fifoctr+0x20>)
    28de:	4908      	ldr	r1, [pc, #32]	; (2900 <am_hal_ios_update_fifoctr+0x24>)
    28e0:	6802      	ldr	r2, [r0, #0]
    28e2:	690b      	ldr	r3, [r1, #16]
    28e4:	f422 7c7f 	bic.w	ip, r2, #1020	; 0x3fc
    28e8:	f02c 0203 	bic.w	r2, ip, #3
    28ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
    28f0:	4313      	orrs	r3, r2
    g_sSRAMBuffer.ui32FifoInc = 0;
    28f2:	2200      	movs	r2, #0
    AM_BFW(IOSLAVE, FIFOINC, FIFOINC, g_sSRAMBuffer.ui32FifoInc);
    28f4:	6003      	str	r3, [r0, #0]
    g_sSRAMBuffer.ui32FifoInc = 0;
    28f6:	610a      	str	r2, [r1, #16]
    28f8:	4770      	bx	lr
    28fa:	bf00      	nop
    28fc:	50000114 	.word	0x50000114
    2900:	100017ac 	.word	0x100017ac

00002904 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    2904:	4b0d      	ldr	r3, [pc, #52]	; (293c <am_hal_itm_enable+0x38>)
    2906:	6818      	ldr	r0, [r3, #0]
    2908:	07c2      	lsls	r2, r0, #31
    290a:	d416      	bmi.n	293a <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    290c:	4a0c      	ldr	r2, [pc, #48]	; (2940 <am_hal_itm_enable+0x3c>)
    290e:	6811      	ldr	r1, [r2, #0]
{
    2910:	b430      	push	{r4, r5}
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    2912:	f041 7480 	orr.w	r4, r1, #16777216	; 0x1000000
    2916:	6014      	str	r4, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    2918:	6815      	ldr	r5, [r2, #0]
    291a:	01eb      	lsls	r3, r5, #7
    291c:	d5fc      	bpl.n	2918 <am_hal_itm_enable+0x14>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    291e:	4809      	ldr	r0, [pc, #36]	; (2944 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    2920:	4c09      	ldr	r4, [pc, #36]	; (2948 <am_hal_itm_enable+0x44>)
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    2922:	4d0a      	ldr	r5, [pc, #40]	; (294c <am_hal_itm_enable+0x48>)
    2924:	6005      	str	r5, [r0, #0]
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    2926:	250f      	movs	r5, #15
    2928:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    292a:	bc30      	pop	{r4, r5}
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    292c:	4908      	ldr	r1, [pc, #32]	; (2950 <am_hal_itm_enable+0x4c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    292e:	4b09      	ldr	r3, [pc, #36]	; (2954 <am_hal_itm_enable+0x50>)
    2930:	4a09      	ldr	r2, [pc, #36]	; (2958 <am_hal_itm_enable+0x54>)
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    2932:	f04f 30ff 	mov.w	r0, #4294967295
    2936:	6008      	str	r0, [r1, #0]
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    2938:	601a      	str	r2, [r3, #0]
}
    293a:	4770      	bx	lr
    293c:	10001150 	.word	0x10001150
    2940:	e000edfc 	.word	0xe000edfc
    2944:	e0000fb0 	.word	0xe0000fb0
    2948:	e0000e40 	.word	0xe0000e40
    294c:	c5acce55 	.word	0xc5acce55
    2950:	e0000e00 	.word	0xe0000e00
    2954:	e0000e80 	.word	0xe0000e80
    2958:	00150511 	.word	0x00150511

0000295c <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    295c:	7803      	ldrb	r3, [r0, #0]
    295e:	b1b3      	cbz	r3, 298e <am_hal_itm_print+0x32>
{
    2960:	b410      	push	{r4}
    2962:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    2964:	2400      	movs	r4, #0
    2966:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    296a:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    296c:	2900      	cmp	r1, #0
    296e:	d1fa      	bne.n	2966 <am_hal_itm_print+0xa>
    2970:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    2972:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    2976:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    297a:	f8dc 3000 	ldr.w	r3, [ip]
    297e:	2b00      	cmp	r3, #0
    2980:	d0fb      	beq.n	297a <am_hal_itm_print+0x1e>
    while (ui32Length)
    2982:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    2984:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    2988:	d1f5      	bne.n	2976 <am_hal_itm_print+0x1a>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    298a:	f85d 4b04 	ldr.w	r4, [sp], #4
    298e:	4770      	bx	lr

00002990 <am_hal_pwrctrl_periph_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    2990:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    2992:	4604      	mov	r4, r0
{
    2994:	b082      	sub	sp, #8
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    2996:	b1b8      	cbz	r0, 29c8 <am_hal_pwrctrl_periph_enable+0x38>
    2998:	1e43      	subs	r3, r0, #1
    299a:	4203      	tst	r3, r0
    299c:	d114      	bne.n	29c8 <am_hal_pwrctrl_periph_enable+0x38>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    299e:	f7ff f935 	bl	1c0c <am_hal_interrupt_master_disable>

    //
    // Enable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    29a2:	4a18      	ldr	r2, [pc, #96]	; (2a04 <am_hal_pwrctrl_periph_enable+0x74>)
    AM_CRITICAL_BEGIN_ASM
    29a4:	9001      	str	r0, [sp, #4]
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    29a6:	6810      	ldr	r0, [r2, #0]
    29a8:	4320      	orrs	r0, r4
    29aa:	6010      	str	r0, [r2, #0]

    //
    // End Critical Section.
    //
    AM_CRITICAL_END_ASM
    29ac:	9801      	ldr	r0, [sp, #4]
    29ae:	f7ff f931 	bl	1c14 <am_hal_interrupt_master_set>

    //
    // Wait for the power to stablize.  Using a simple delay loop is more
    // power efficient than a polling loop.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);
    29b2:	200e      	movs	r0, #14
    29b4:	f7ff f8fa 	bl	1bac <am_hal_flash_delay>

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    29b8:	f014 0f0e 	tst.w	r4, #14
    29bc:	d10a      	bne.n	29d4 <am_hal_pwrctrl_periph_enable+0x44>
    29be:	f014 0f70 	tst.w	r4, #112	; 0x70
    29c2:	d00e      	beq.n	29e2 <am_hal_pwrctrl_periph_enable+0x52>
    29c4:	2408      	movs	r4, #8
    29c6:	e006      	b.n	29d6 <am_hal_pwrctrl_periph_enable+0x46>
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    29c8:	4a0f      	ldr	r2, [pc, #60]	; (2a08 <am_hal_pwrctrl_periph_enable+0x78>)
    29ca:	4810      	ldr	r0, [pc, #64]	; (2a0c <am_hal_pwrctrl_periph_enable+0x7c>)
    29cc:	2160      	movs	r1, #96	; 0x60
    29ce:	f7ff f8eb 	bl	1ba8 <am_hal_debug_error>
    29d2:	e7e4      	b.n	299e <am_hal_pwrctrl_periph_enable+0xe>
    POLL_PWRSTATUS(ui32Peripheral);
    29d4:	2404      	movs	r4, #4
    29d6:	4a0e      	ldr	r2, [pc, #56]	; (2a10 <am_hal_pwrctrl_periph_enable+0x80>)
    29d8:	6813      	ldr	r3, [r2, #0]
    29da:	421c      	tst	r4, r3
    29dc:	d0fc      	beq.n	29d8 <am_hal_pwrctrl_periph_enable+0x48>
}
    29de:	b002      	add	sp, #8
    29e0:	bd10      	pop	{r4, pc}
    POLL_PWRSTATUS(ui32Peripheral);
    29e2:	f240 1181 	movw	r1, #385	; 0x181
    29e6:	420c      	tst	r4, r1
    29e8:	d108      	bne.n	29fc <am_hal_pwrctrl_periph_enable+0x6c>
    29ea:	05a3      	lsls	r3, r4, #22
    29ec:	d408      	bmi.n	2a00 <am_hal_pwrctrl_periph_enable+0x70>
    29ee:	f414 6f80 	tst.w	r4, #1024	; 0x400
    29f2:	bf14      	ite	ne
    29f4:	2410      	movne	r4, #16
    29f6:	f04f 34ff 	moveq.w	r4, #4294967295
    29fa:	e7ec      	b.n	29d6 <am_hal_pwrctrl_periph_enable+0x46>
    29fc:	2402      	movs	r4, #2
    29fe:	e7ea      	b.n	29d6 <am_hal_pwrctrl_periph_enable+0x46>
    2a00:	2480      	movs	r4, #128	; 0x80
    2a02:	e7e8      	b.n	29d6 <am_hal_pwrctrl_periph_enable+0x46>
    2a04:	40021008 	.word	0x40021008
    2a08:	000030a4 	.word	0x000030a4
    2a0c:	000030d8 	.word	0x000030d8
    2a10:	40021014 	.word	0x40021014

00002a14 <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    2a14:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
{
    2a18:	b430      	push	{r4, r5}
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    2a1a:	d03a      	beq.n	2a92 <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    2a1c:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    2a20:	f000 809d 	beq.w	2b5e <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    2a24:	2801      	cmp	r0, #1
    2a26:	f000 809d 	beq.w	2b64 <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    2a2a:	2803      	cmp	r0, #3
    2a2c:	f000 80a6 	beq.w	2b7c <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    2a30:	2807      	cmp	r0, #7
    2a32:	f000 809c 	beq.w	2b6e <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    2a36:	280f      	cmp	r0, #15
    2a38:	f000 80a5 	beq.w	2b86 <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    2a3c:	281f      	cmp	r0, #31
    2a3e:	f000 80b0 	beq.w	2ba2 <am_hal_pwrctrl_memory_enable+0x18e>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    2a42:	283f      	cmp	r0, #63	; 0x3f
    2a44:	f000 80b4 	beq.w	2bb0 <am_hal_pwrctrl_memory_enable+0x19c>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    2a48:	287f      	cmp	r0, #127	; 0x7f
    2a4a:	f000 80b8 	beq.w	2bbe <am_hal_pwrctrl_memory_enable+0x1aa>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    2a4e:	28ff      	cmp	r0, #255	; 0xff
    2a50:	f000 80a0 	beq.w	2b94 <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    2a54:	f240 13ff 	movw	r3, #511	; 0x1ff
    2a58:	4298      	cmp	r0, r3
    2a5a:	f000 80b7 	beq.w	2bcc <am_hal_pwrctrl_memory_enable+0x1b8>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    2a5e:	f240 31ff 	movw	r1, #1023	; 0x3ff
    2a62:	4288      	cmp	r0, r1
    2a64:	f000 80b8 	beq.w	2bd8 <am_hal_pwrctrl_memory_enable+0x1c4>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    2a68:	f240 72ff 	movw	r2, #2047	; 0x7ff
    2a6c:	4290      	cmp	r0, r2
    2a6e:	d00e      	beq.n	2a8e <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    2a70:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    2a74:	f000 80b6 	beq.w	2be4 <am_hal_pwrctrl_memory_enable+0x1d0>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    2a78:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    2a7c:	42a0      	cmp	r0, r4
    2a7e:	f000 80b4 	beq.w	2bea <am_hal_pwrctrl_memory_enable+0x1d6>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    2a82:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    2a86:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    2a8a:	4560      	cmp	r0, ip
    2a8c:	d132      	bne.n	2af4 <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    2a8e:	495b      	ldr	r1, [pc, #364]	; (2bfc <am_hal_pwrctrl_memory_enable+0x1e8>)
    2a90:	e066      	b.n	2b60 <am_hal_pwrctrl_memory_enable+0x14c>
    2a92:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    2a96:	2340      	movs	r3, #64	; 0x40
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    2a98:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    2a9a:	4c59      	ldr	r4, [pc, #356]	; (2c00 <am_hal_pwrctrl_memory_enable+0x1ec>)
    2a9c:	6825      	ldr	r5, [r4, #0]
    2a9e:	402a      	ands	r2, r5
    2aa0:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    2aa2:	4a57      	ldr	r2, [pc, #348]	; (2c00 <am_hal_pwrctrl_memory_enable+0x1ec>)
    2aa4:	6814      	ldr	r4, [r2, #0]
    2aa6:	4320      	orrs	r0, r4
    2aa8:	6010      	str	r0, [r2, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    2aaa:	2b00      	cmp	r3, #0
    2aac:	d029      	beq.n	2b02 <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2aae:	4d55      	ldr	r5, [pc, #340]	; (2c04 <am_hal_pwrctrl_memory_enable+0x1f0>)
    2ab0:	6828      	ldr	r0, [r5, #0]
        while ( --i32TOcnt              &&
    2ab2:	4218      	tst	r0, r3
    2ab4:	bf18      	it	ne
    2ab6:	20c6      	movne	r0, #198	; 0xc6
    2ab8:	d01f      	beq.n	2afa <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2aba:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    2abc:	421a      	tst	r2, r3
    2abe:	d01c      	beq.n	2afa <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2ac0:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    2ac2:	421c      	tst	r4, r3
    2ac4:	d019      	beq.n	2afa <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2ac6:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    2ac8:	421a      	tst	r2, r3
    2aca:	d016      	beq.n	2afa <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2acc:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    2ace:	421c      	tst	r4, r3
    2ad0:	d013      	beq.n	2afa <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2ad2:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    2ad4:	421a      	tst	r2, r3
    2ad6:	d010      	beq.n	2afa <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2ad8:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    2ada:	421c      	tst	r4, r3
    2adc:	d00d      	beq.n	2afa <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2ade:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    2ae0:	421a      	tst	r2, r3
    2ae2:	d00a      	beq.n	2afa <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2ae4:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    2ae6:	421c      	tst	r4, r3
    2ae8:	d007      	beq.n	2afa <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    2aea:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    2aec:	421a      	tst	r2, r3
    2aee:	d004      	beq.n	2afa <am_hal_pwrctrl_memory_enable+0xe6>
    2af0:	3809      	subs	r0, #9
    2af2:	d1e2      	bne.n	2aba <am_hal_pwrctrl_memory_enable+0xa6>
        return false;
    2af4:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    2af6:	bc30      	pop	{r4, r5}
    2af8:	4770      	bx	lr
    if ( ui32PwrStatEnMask )
    2afa:	b911      	cbnz	r1, 2b02 <am_hal_pwrctrl_memory_enable+0xee>
    return true;
    2afc:	2001      	movs	r0, #1
}
    2afe:	bc30      	pop	{r4, r5}
    2b00:	4770      	bx	lr
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2b02:	4b40      	ldr	r3, [pc, #256]	; (2c04 <am_hal_pwrctrl_memory_enable+0x1f0>)
    2b04:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    2b06:	ea31 0405 	bics.w	r4, r1, r5
    2b0a:	bf18      	it	ne
    2b0c:	24c6      	movne	r4, #198	; 0xc6
    2b0e:	d0f5      	beq.n	2afc <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2b10:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    2b12:	ea31 0000 	bics.w	r0, r1, r0
    2b16:	d0f1      	beq.n	2afc <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2b18:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    2b1a:	ea31 0002 	bics.w	r0, r1, r2
    2b1e:	d0ed      	beq.n	2afc <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2b20:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    2b22:	ea31 0005 	bics.w	r0, r1, r5
    2b26:	d0e9      	beq.n	2afc <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2b28:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    2b2a:	ea31 0000 	bics.w	r0, r1, r0
    2b2e:	d0e5      	beq.n	2afc <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2b30:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    2b32:	ea31 0002 	bics.w	r0, r1, r2
    2b36:	d0e1      	beq.n	2afc <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2b38:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    2b3a:	ea31 0005 	bics.w	r0, r1, r5
    2b3e:	d0dd      	beq.n	2afc <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2b40:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    2b42:	ea31 0000 	bics.w	r0, r1, r0
    2b46:	d0d9      	beq.n	2afc <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2b48:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    2b4a:	ea31 0002 	bics.w	r0, r1, r2
    2b4e:	d0d5      	beq.n	2afc <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    2b50:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    2b52:	ea31 0005 	bics.w	r0, r1, r5
    2b56:	d0d1      	beq.n	2afc <am_hal_pwrctrl_memory_enable+0xe8>
    2b58:	3c09      	subs	r4, #9
    2b5a:	d1d9      	bne.n	2b10 <am_hal_pwrctrl_memory_enable+0xfc>
    2b5c:	e7ca      	b.n	2af4 <am_hal_pwrctrl_memory_enable+0xe0>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    2b5e:	2160      	movs	r1, #96	; 0x60
{
    2b60:	2300      	movs	r3, #0
    2b62:	e79e      	b.n	2aa2 <am_hal_pwrctrl_memory_enable+0x8e>
    2b64:	4a28      	ldr	r2, [pc, #160]	; (2c08 <am_hal_pwrctrl_memory_enable+0x1f4>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2b66:	4b29      	ldr	r3, [pc, #164]	; (2c0c <am_hal_pwrctrl_memory_enable+0x1f8>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    2b68:	f44f 7180 	mov.w	r1, #256	; 0x100
    2b6c:	e795      	b.n	2a9a <am_hal_pwrctrl_memory_enable+0x86>
    2b6e:	f46f 62ff 	mvn.w	r2, #2040	; 0x7f8
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2b72:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    2b76:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    2b7a:	e78e      	b.n	2a9a <am_hal_pwrctrl_memory_enable+0x86>
    2b7c:	4a24      	ldr	r2, [pc, #144]	; (2c10 <am_hal_pwrctrl_memory_enable+0x1fc>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2b7e:	4b25      	ldr	r3, [pc, #148]	; (2c14 <am_hal_pwrctrl_memory_enable+0x200>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    2b80:	f44f 7140 	mov.w	r1, #768	; 0x300
    2b84:	e789      	b.n	2a9a <am_hal_pwrctrl_memory_enable+0x86>
    2b86:	f46f 62fe 	mvn.w	r2, #2032	; 0x7f0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2b8a:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    2b8e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    2b92:	e782      	b.n	2a9a <am_hal_pwrctrl_memory_enable+0x86>
    2b94:	f46f 62e0 	mvn.w	r2, #1792	; 0x700
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2b98:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    2b9c:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    2ba0:	e77b      	b.n	2a9a <am_hal_pwrctrl_memory_enable+0x86>
    2ba2:	f46f 62fc 	mvn.w	r2, #2016	; 0x7e0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2ba6:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    2baa:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    2bae:	e774      	b.n	2a9a <am_hal_pwrctrl_memory_enable+0x86>
    2bb0:	f46f 62f8 	mvn.w	r2, #1984	; 0x7c0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2bb4:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    2bb8:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    2bbc:	e76d      	b.n	2a9a <am_hal_pwrctrl_memory_enable+0x86>
    2bbe:	f46f 62f0 	mvn.w	r2, #1920	; 0x780
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2bc2:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    2bc6:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    2bca:	e766      	b.n	2a9a <am_hal_pwrctrl_memory_enable+0x86>
    2bcc:	f46f 62c0 	mvn.w	r2, #1536	; 0x600
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2bd0:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    2bd4:	4910      	ldr	r1, [pc, #64]	; (2c18 <am_hal_pwrctrl_memory_enable+0x204>)
    2bd6:	e760      	b.n	2a9a <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    2bd8:	4910      	ldr	r1, [pc, #64]	; (2c1c <am_hal_pwrctrl_memory_enable+0x208>)
    2bda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    2bde:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    2be2:	e75a      	b.n	2a9a <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    2be4:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    2be8:	e7ba      	b.n	2b60 <am_hal_pwrctrl_memory_enable+0x14c>
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    2bea:	4805      	ldr	r0, [pc, #20]	; (2c00 <am_hal_pwrctrl_memory_enable+0x1ec>)
    2bec:	6803      	ldr	r3, [r0, #0]
    2bee:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    2bf2:	6001      	str	r1, [r0, #0]
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    2bf4:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
        ui32PwrStatEnMask  = 0;
    2bf8:	2100      	movs	r1, #0
    2bfa:	e758      	b.n	2aae <am_hal_pwrctrl_memory_enable+0x9a>
    2bfc:	0007ff00 	.word	0x0007ff00
    2c00:	40021010 	.word	0x40021010
    2c04:	40021014 	.word	0x40021014
    2c08:	fffff801 	.word	0xfffff801
    2c0c:	0007fe00 	.word	0x0007fe00
    2c10:	fffff803 	.word	0xfffff803
    2c14:	0007fc00 	.word	0x0007fc00
    2c18:	0001ff00 	.word	0x0001ff00
    2c1c:	0003ff00 	.word	0x0003ff00

00002c20 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    2c20:	4b0f      	ldr	r3, [pc, #60]	; (2c60 <am_hal_pwrctrl_bucks_init+0x40>)
    2c22:	681a      	ldr	r2, [r3, #0]
    2c24:	0792      	lsls	r2, r2, #30
    2c26:	d502      	bpl.n	2c2e <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    2c28:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    2c2a:	07c3      	lsls	r3, r0, #31
    2c2c:	d40e      	bmi.n	2c4c <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    2c2e:	4b0d      	ldr	r3, [pc, #52]	; (2c64 <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    2c30:	4a0b      	ldr	r2, [pc, #44]	; (2c60 <am_hal_pwrctrl_bucks_init+0x40>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    2c32:	6819      	ldr	r1, [r3, #0]
    2c34:	f041 0002 	orr.w	r0, r1, #2
    2c38:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    2c3a:	6819      	ldr	r1, [r3, #0]
    2c3c:	f041 0001 	orr.w	r0, r1, #1
    2c40:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    2c42:	6813      	ldr	r3, [r2, #0]
    2c44:	f003 0103 	and.w	r1, r3, #3
    2c48:	2903      	cmp	r1, #3
    2c4a:	d1fa      	bne.n	2c42 <am_hal_pwrctrl_bucks_init+0x22>
    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    2c4c:	4a04      	ldr	r2, [pc, #16]	; (2c60 <am_hal_pwrctrl_bucks_init+0x40>)
    2c4e:	6810      	ldr	r0, [r2, #0]
    2c50:	f000 0303 	and.w	r3, r0, #3
    2c54:	2b03      	cmp	r3, #3
    2c56:	d1fa      	bne.n	2c4e <am_hal_pwrctrl_bucks_init+0x2e>
    am_hal_flash_delay(200 / 3);
    2c58:	2042      	movs	r0, #66	; 0x42
    2c5a:	f7fe bfa7 	b.w	1bac <am_hal_flash_delay>
    2c5e:	bf00      	nop
    2c60:	40021004 	.word	0x40021004
    2c64:	40021000 	.word	0x40021000

00002c68 <am_hal_pwrctrl_bucks_enable>:
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    2c68:	4b0b      	ldr	r3, [pc, #44]	; (2c98 <am_hal_pwrctrl_bucks_enable+0x30>)
    2c6a:	681a      	ldr	r2, [r3, #0]
    2c6c:	0792      	lsls	r2, r2, #30
    2c6e:	d502      	bpl.n	2c76 <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    2c70:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    2c72:	07c3      	lsls	r3, r0, #31
    2c74:	d40e      	bmi.n	2c94 <am_hal_pwrctrl_bucks_enable+0x2c>
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    2c76:	4b09      	ldr	r3, [pc, #36]	; (2c9c <am_hal_pwrctrl_bucks_enable+0x34>)
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    2c78:	4a07      	ldr	r2, [pc, #28]	; (2c98 <am_hal_pwrctrl_bucks_enable+0x30>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    2c7a:	6819      	ldr	r1, [r3, #0]
    2c7c:	f041 0002 	orr.w	r0, r1, #2
    2c80:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    2c82:	6819      	ldr	r1, [r3, #0]
    2c84:	f041 0001 	orr.w	r0, r1, #1
    2c88:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    2c8a:	6813      	ldr	r3, [r2, #0]
    2c8c:	f003 0103 	and.w	r1, r3, #3
    2c90:	2903      	cmp	r1, #3
    2c92:	d1fa      	bne.n	2c8a <am_hal_pwrctrl_bucks_enable+0x22>
    2c94:	4770      	bx	lr
    2c96:	bf00      	nop
    2c98:	40021004 	.word	0x40021004
    2c9c:	40021000 	.word	0x40021000

00002ca0 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    2ca0:	4b12      	ldr	r3, [pc, #72]	; (2cec <am_hal_pwrctrl_bucks_disable+0x4c>)
    2ca2:	681a      	ldr	r2, [r3, #0]
    2ca4:	0792      	lsls	r2, r2, #30
    2ca6:	d402      	bmi.n	2cae <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    2ca8:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    2caa:	07c3      	lsls	r3, r0, #31
    2cac:	d51c      	bpl.n	2ce8 <am_hal_pwrctrl_bucks_disable+0x48>
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    2cae:	4910      	ldr	r1, [pc, #64]	; (2cf0 <am_hal_pwrctrl_bucks_disable+0x50>)
    2cb0:	680b      	ldr	r3, [r1, #0]
    2cb2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    2cb6:	2a20      	cmp	r2, #32
    2cb8:	d00b      	beq.n	2cd2 <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    2cba:	4b0e      	ldr	r3, [pc, #56]	; (2cf4 <am_hal_pwrctrl_bucks_disable+0x54>)
    2cbc:	681a      	ldr	r2, [r3, #0]
    2cbe:	f022 0002 	bic.w	r0, r2, #2
    2cc2:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    2cc4:	6819      	ldr	r1, [r3, #0]
    2cc6:	f021 0201 	bic.w	r2, r1, #1
    2cca:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    2ccc:	200a      	movs	r0, #10
    2cce:	f7fe bf6d 	b.w	1bac <am_hal_flash_delay>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_PWRADC_EN) )
    2cd2:	4809      	ldr	r0, [pc, #36]	; (2cf8 <am_hal_pwrctrl_bucks_disable+0x58>)
    2cd4:	6801      	ldr	r1, [r0, #0]
    if ( isRev_ADC()  &&
    2cd6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    2cda:	d1ee      	bne.n	2cba <am_hal_pwrctrl_bucks_disable+0x1a>
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    2cdc:	4805      	ldr	r0, [pc, #20]	; (2cf4 <am_hal_pwrctrl_bucks_disable+0x54>)
    2cde:	6803      	ldr	r3, [r0, #0]
    2ce0:	f003 0105 	and.w	r1, r3, #5
    2ce4:	6001      	str	r1, [r0, #0]
    2ce6:	e7f1      	b.n	2ccc <am_hal_pwrctrl_bucks_disable+0x2c>
    2ce8:	4770      	bx	lr
    2cea:	bf00      	nop
    2cec:	40021004 	.word	0x40021004
    2cf0:	4002000c 	.word	0x4002000c
    2cf4:	40021000 	.word	0x40021000
    2cf8:	40021008 	.word	0x40021008

00002cfc <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    2cfc:	4905      	ldr	r1, [pc, #20]	; (2d14 <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    2cfe:	4a06      	ldr	r2, [pc, #24]	; (2d18 <am_hal_pwrctrl_low_power_init+0x1c>)
    AM_REG(PWRCTRL, SRAMCTRL) |=
    2d00:	680b      	ldr	r3, [r1, #0]
    2d02:	f043 0006 	orr.w	r0, r3, #6
    2d06:	6008      	str	r0, [r1, #0]
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    2d08:	6811      	ldr	r1, [r2, #0]
    2d0a:	f021 0304 	bic.w	r3, r1, #4
    2d0e:	6013      	str	r3, [r2, #0]
    2d10:	4770      	bx	lr
    2d12:	bf00      	nop
    2d14:	40021018 	.word	0x40021018
    2d18:	40021000 	.word	0x40021000

00002d1c <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    2d1c:	4a05      	ldr	r2, [pc, #20]	; (2d34 <am_hal_rtc_osc_select+0x18>)
    2d1e:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    2d20:	b918      	cbnz	r0, 2d2a <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    2d22:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    2d26:	6010      	str	r0, [r2, #0]
    2d28:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    2d2a:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    2d2e:	6011      	str	r1, [r2, #0]
    2d30:	4770      	bx	lr
    2d32:	bf00      	nop
    2d34:	4000400c 	.word	0x4000400c

00002d38 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    2d38:	4a02      	ldr	r2, [pc, #8]	; (2d44 <am_hal_rtc_osc_disable+0xc>)
    2d3a:	6813      	ldr	r3, [r2, #0]
    2d3c:	f043 0010 	orr.w	r0, r3, #16
    2d40:	6010      	str	r0, [r2, #0]
    2d42:	4770      	bx	lr
    2d44:	40004050 	.word	0x40004050

00002d48 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    2d48:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d4a:	b083      	sub	sp, #12
    2d4c:	4604      	mov	r4, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    2d4e:	f7fe ff5d 	bl	1c0c <am_hal_interrupt_master_disable>
    2d52:	4605      	mov	r5, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    2d54:	b124      	cbz	r4, 2d60 <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    2d56:	4b42      	ldr	r3, [pc, #264]	; (2e60 <am_hal_sysctrl_sleep+0x118>)
    2d58:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    2d5a:	f010 0c01 	ands.w	ip, r0, #1
    2d5e:	d00a      	beq.n	2d76 <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    2d60:	4a40      	ldr	r2, [pc, #256]	; (2e64 <am_hal_sysctrl_sleep+0x11c>)
    2d62:	6811      	ldr	r1, [r2, #0]
    2d64:	f021 0604 	bic.w	r6, r1, #4
    2d68:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    2d6a:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    2d6c:	4628      	mov	r0, r5
    2d6e:	f7fe ff51 	bl	1c14 <am_hal_interrupt_master_set>
}
    2d72:	b003      	add	sp, #12
    2d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    2d76:	4c3b      	ldr	r4, [pc, #236]	; (2e64 <am_hal_sysctrl_sleep+0x11c>)
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    2d78:	4b3b      	ldr	r3, [pc, #236]	; (2e68 <am_hal_sysctrl_sleep+0x120>)
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    2d7a:	6820      	ldr	r0, [r4, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    2d7c:	4e3b      	ldr	r6, [pc, #236]	; (2e6c <am_hal_sysctrl_sleep+0x124>)
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    2d7e:	4f3c      	ldr	r7, [pc, #240]	; (2e70 <am_hal_sysctrl_sleep+0x128>)
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    2d80:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 2e80 <am_hal_sysctrl_sleep+0x138>
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    2d84:	f040 0204 	orr.w	r2, r0, #4
    2d88:	6022      	str	r2, [r4, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    2d8a:	681c      	ldr	r4, [r3, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    2d8c:	6833      	ldr	r3, [r6, #0]
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    2d8e:	f8de 2000 	ldr.w	r2, [lr]
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    2d92:	6839      	ldr	r1, [r7, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    2d94:	f004 07f0 	and.w	r7, r4, #240	; 0xf0
                   CHKBUCKZX_REV : 0x0;
    2d98:	2f20      	cmp	r7, #32
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    2d9a:	f103 30ff 	add.w	r0, r3, #4294967295
                   CHKBUCKZX_REV : 0x0;
    2d9e:	bf14      	ite	ne
    2da0:	2700      	movne	r7, #0
    2da2:	2702      	moveq	r7, #2
                    CHKBUCKZX_TIMER : 0x0;
    2da4:	2803      	cmp	r0, #3
    2da6:	bf98      	it	ls
    2da8:	f04f 0c04 	movls.w	ip, #4
                     CHKBUCKZX_BUCKS : 0x0;
    2dac:	f012 0403 	ands.w	r4, r2, #3
    2db0:	bf18      	it	ne
    2db2:	2401      	movne	r4, #1
    g_buckZX_chk |= ( ui32SupplySrc &
    2db4:	f240 53ff 	movw	r3, #1535	; 0x5ff
    g_buckZX_chk |= (ui32SupplySrc &
    2db8:	433c      	orrs	r4, r7
                0x0 : CHKBUCKZX_DEVEN;
    2dba:	ea11 0703 	ands.w	r7, r1, r3
    g_buckZX_chk |= (ui32SupplySrc &
    2dbe:	ea44 040c 	orr.w	r4, r4, ip
                0x0 : CHKBUCKZX_DEVEN;
    2dc2:	d103      	bne.n	2dcc <am_hal_sysctrl_sleep+0x84>
    g_buckZX_chk |= ( ui32SupplySrc &
    2dc4:	f044 0408 	orr.w	r4, r4, #8
        if ( bBuckZX_chk )
    2dc8:	2c0f      	cmp	r4, #15
    2dca:	d00a      	beq.n	2de2 <am_hal_sysctrl_sleep+0x9a>
        AM_ASM_WFI;
    2dcc:	bf30      	wfi
        if ( bBuckZX_chk )
    2dce:	2c0f      	cmp	r4, #15
    2dd0:	d01a      	beq.n	2e08 <am_hal_sysctrl_sleep+0xc0>
            g_bBuckRestoreComplete = true;
    2dd2:	4e28      	ldr	r6, [pc, #160]	; (2e74 <am_hal_sysctrl_sleep+0x12c>)
    2dd4:	2001      	movs	r0, #1
    2dd6:	7030      	strb	r0, [r6, #0]
    am_hal_interrupt_master_set(ui32Critical);
    2dd8:	4628      	mov	r0, r5
    2dda:	f7fe ff1b 	bl	1c14 <am_hal_interrupt_master_set>
}
    2dde:	b003      	add	sp, #12
    2de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2de2:	6832      	ldr	r2, [r6, #0]
    2de4:	1e51      	subs	r1, r2, #1
    2de6:	9100      	str	r1, [sp, #0]
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    2de8:	9800      	ldr	r0, [sp, #0]
    2dea:	f04f 31ff 	mov.w	r1, #4294967295
    2dee:	f7fe fe3b 	bl	1a68 <am_hal_ctimer_clear>
            am_hal_ctimer_period_set(ui32BuckTimer,
    2df2:	9800      	ldr	r0, [sp, #0]
    2df4:	463b      	mov	r3, r7
    2df6:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    2dfa:	f04f 31ff 	mov.w	r1, #4294967295
    2dfe:	f7fe fe47 	bl	1a90 <am_hal_ctimer_period_set>
            am_hal_pwrctrl_bucks_disable();
    2e02:	f7ff ff4d 	bl	2ca0 <am_hal_pwrctrl_bucks_disable>
    2e06:	e7e1      	b.n	2dcc <am_hal_sysctrl_sleep+0x84>
    AM_CRITICAL_BEGIN_ASM
    2e08:	f7fe ff00 	bl	1c0c <am_hal_interrupt_master_disable>
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    2e0c:	4b1a      	ldr	r3, [pc, #104]	; (2e78 <am_hal_sysctrl_sleep+0x130>)
    AM_CRITICAL_BEGIN_ASM
    2e0e:	9001      	str	r0, [sp, #4]
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    2e10:	681a      	ldr	r2, [r3, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    2e12:	681a      	ldr	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    2e14:	681f      	ldr	r7, [r3, #0]
    2e16:	f027 043c 	bic.w	r4, r7, #60	; 0x3c
    2e1a:	f044 021c 	orr.w	r2, r4, #28
    2e1e:	601a      	str	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    2e20:	6819      	ldr	r1, [r3, #0]
            g_bBuckRestoreComplete = false;
    2e22:	4c14      	ldr	r4, [pc, #80]	; (2e74 <am_hal_sysctrl_sleep+0x12c>)
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    2e24:	f421 30f0 	bic.w	r0, r1, #122880	; 0x1e000
    2e28:	f440 4760 	orr.w	r7, r0, #57344	; 0xe000
    2e2c:	601f      	str	r7, [r3, #0]
    AM_CRITICAL_END_ASM
    2e2e:	9801      	ldr	r0, [sp, #4]
    2e30:	f7fe fef0 	bl	1c14 <am_hal_interrupt_master_set>
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    2e34:	201c      	movs	r0, #28
    2e36:	f7fe feb9 	bl	1bac <am_hal_flash_delay>
            am_hal_pwrctrl_bucks_enable();
    2e3a:	f7ff ff15 	bl	2c68 <am_hal_pwrctrl_bucks_enable>
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2e3e:	6836      	ldr	r6, [r6, #0]
            g_ui32BuckInputs = 0;
    2e40:	490e      	ldr	r1, [pc, #56]	; (2e7c <am_hal_sysctrl_sleep+0x134>)
            g_bBuckRestoreComplete = false;
    2e42:	2200      	movs	r2, #0
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2e44:	1e73      	subs	r3, r6, #1
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    2e46:	204c      	movs	r0, #76	; 0x4c
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2e48:	9300      	str	r3, [sp, #0]
            g_bBuckRestoreComplete = false;
    2e4a:	7022      	strb	r2, [r4, #0]
            g_ui32BuckInputs = 0;
    2e4c:	600a      	str	r2, [r1, #0]
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    2e4e:	f7fe fead 	bl	1bac <am_hal_flash_delay>
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    2e52:	9800      	ldr	r0, [sp, #0]
    2e54:	f04f 31ff 	mov.w	r1, #4294967295
    2e58:	f7fe fdd8 	bl	1a0c <am_hal_ctimer_start>
    2e5c:	e786      	b.n	2d6c <am_hal_sysctrl_sleep+0x24>
    2e5e:	bf00      	nop
    2e60:	40020250 	.word	0x40020250
    2e64:	e000ed10 	.word	0xe000ed10
    2e68:	4002000c 	.word	0x4002000c
    2e6c:	10001160 	.word	0x10001160
    2e70:	40021008 	.word	0x40021008
    2e74:	10001159 	.word	0x10001159
    2e78:	40020068 	.word	0x40020068
    2e7c:	1000115c 	.word	0x1000115c
    2e80:	40021000 	.word	0x40021000

00002e84 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    2e84:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    2e86:	4a23      	ldr	r2, [pc, #140]	; (2f14 <am_hal_tpiu_enable+0x90>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    2e88:	6803      	ldr	r3, [r0, #0]
    AM_REG(TPIU, FFCR) = 0;
    2e8a:	2100      	movs	r1, #0
    2e8c:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    2e8e:	b33b      	cbz	r3, 2ee0 <am_hal_tpiu_enable+0x5c>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    2e90:	f5a2 7c40 	sub.w	ip, r2, #768	; 0x300
    2e94:	2101      	movs	r1, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    2e96:	4c20      	ldr	r4, [pc, #128]	; (2f18 <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    2e98:	4d20      	ldr	r5, [pc, #128]	; (2f1c <am_hal_tpiu_enable+0x98>)
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    2e9a:	f8cc 1000 	str.w	r1, [ip]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    2e9e:	f5a3 4e61 	sub.w	lr, r3, #57600	; 0xe100
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    2ea2:	45a6      	cmp	lr, r4
    2ea4:	bf94      	ite	ls
    2ea6:	461c      	movls	r4, r3
    2ea8:	462c      	movhi	r4, r5
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    2eaa:	f7fe fca9 	bl	1800 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    2eae:	1c43      	adds	r3, r0, #1
    2eb0:	d02d      	beq.n	2f0e <am_hal_tpiu_enable+0x8a>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    2eb2:	08c2      	lsrs	r2, r0, #3
    2eb4:	fbb2 f3f4 	udiv	r3, r2, r4
    2eb8:	1e5d      	subs	r5, r3, #1
    2eba:	b2a8      	uxth	r0, r5
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    2ebc:	4a18      	ldr	r2, [pc, #96]	; (2f20 <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    2ebe:	4c19      	ldr	r4, [pc, #100]	; (2f24 <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    2ec0:	4b19      	ldr	r3, [pc, #100]	; (2f28 <am_hal_tpiu_enable+0xa4>)
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    2ec2:	491a      	ldr	r1, [pc, #104]	; (2f2c <am_hal_tpiu_enable+0xa8>)
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    2ec4:	6010      	str	r0, [r2, #0]
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    2ec6:	2502      	movs	r5, #2
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    2ec8:	2000      	movs	r0, #0
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    2eca:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    2ece:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    2ed0:	6008      	str	r0, [r1, #0]
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    2ed2:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    2ed4:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    2ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    2edc:	f7fe be66 	b.w	1bac <am_hal_flash_delay>
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    2ee0:	4c0f      	ldr	r4, [pc, #60]	; (2f20 <am_hal_tpiu_enable+0x9c>)
    2ee2:	6905      	ldr	r5, [r0, #16]
    2ee4:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    2ee6:	6882      	ldr	r2, [r0, #8]
    2ee8:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    2eec:	68c3      	ldr	r3, [r0, #12]
    2eee:	4c10      	ldr	r4, [pc, #64]	; (2f30 <am_hal_tpiu_enable+0xac>)
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    2ef0:	490d      	ldr	r1, [pc, #52]	; (2f28 <am_hal_tpiu_enable+0xa4>)
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    2ef2:	1e5d      	subs	r5, r3, #1
    2ef4:	2201      	movs	r2, #1
    2ef6:	40aa      	lsls	r2, r5
    2ef8:	6022      	str	r2, [r4, #0]
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    2efa:	6840      	ldr	r0, [r0, #4]
    2efc:	680b      	ldr	r3, [r1, #0]
    2efe:	4303      	orrs	r3, r0
    2f00:	600b      	str	r3, [r1, #0]
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    2f02:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    2f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    2f0a:	f7fe be4f 	b.w	1bac <am_hal_flash_delay>
    2f0e:	2005      	movs	r0, #5
    2f10:	e7d4      	b.n	2ebc <am_hal_tpiu_enable+0x38>
    2f12:	bf00      	nop
    2f14:	e0040304 	.word	0xe0040304
    2f18:	001da380 	.word	0x001da380
    2f1c:	000f4240 	.word	0x000f4240
    2f20:	e0040010 	.word	0xe0040010
    2f24:	e00400f0 	.word	0xe00400f0
    2f28:	40020250 	.word	0x40020250
    2f2c:	e0040f00 	.word	0xe0040f00
    2f30:	e0040004 	.word	0xe0040004

00002f34 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    2f34:	4b01      	ldr	r3, [pc, #4]	; (2f3c <am_hal_vcomp_disable+0x8>)
    2f36:	2237      	movs	r2, #55	; 0x37
    2f38:	601a      	str	r2, [r3, #0]
    2f3a:	4770      	bx	lr
    2f3c:	4000c008 	.word	0x4000c008
    2f40:	74746948 	.word	0x74746948
    2f44:	20676e69 	.word	0x20676e69
    2f48:	65646e75 	.word	0x65646e75
    2f4c:	6f6c6672 	.word	0x6f6c6672
    2f50:	6f662077 	.word	0x6f662077
    2f54:	68742072 	.word	0x68742072
    2f58:	65722065 	.word	0x65722065
    2f5c:	73657571 	.word	0x73657571
    2f60:	20646574 	.word	0x20646574
    2f64:	20534f49 	.word	0x20534f49
    2f68:	4f464946 	.word	0x4f464946
    2f6c:	61727420 	.word	0x61727420
    2f70:	6566736e 	.word	0x6566736e
    2f74:	00000a72 	.word	0x00000a72
    2f78:	74746948 	.word	0x74746948
    2f7c:	20676e69 	.word	0x20676e69
    2f80:	65646e75 	.word	0x65646e75
    2f84:	6f6c6672 	.word	0x6f6c6672
    2f88:	6f662077 	.word	0x6f662077
    2f8c:	68742072 	.word	0x68742072
    2f90:	65722065 	.word	0x65722065
    2f94:	73657571 	.word	0x73657571
    2f98:	20646574 	.word	0x20646574
    2f9c:	20534f49 	.word	0x20534f49
    2fa0:	4f464946 	.word	0x4f464946
    2fa4:	61727420 	.word	0x61727420
    2fa8:	6566736e 	.word	0x6566736e
    2fac:	00002e72 	.word	0x00002e72
    2fb0:	2e5c2e2e 	.word	0x2e5c2e2e
    2fb4:	72735c2e 	.word	0x72735c2e
    2fb8:	6f695c63 	.word	0x6f695c63
    2fbc:	69665f73 	.word	0x69665f73
    2fc0:	632e6f66 	.word	0x632e6f66
    2fc4:	00000000 	.word	0x00000000
    2fc8:	74746948 	.word	0x74746948
    2fcc:	20676e69 	.word	0x20676e69
    2fd0:	4f525245 	.word	0x4f525245
    2fd4:	61632052 	.word	0x61632052
    2fd8:	002e6573 	.word	0x002e6573
    2fdc:	0a0a0a0a 	.word	0x0a0a0a0a
    2fe0:	0a0a0a0a 	.word	0x0a0a0a0a
    2fe4:	0a0a0a0a 	.word	0x0a0a0a0a
    2fe8:	0a0a0a0a 	.word	0x0a0a0a0a
    2fec:	00000a0a 	.word	0x00000a0a

00002ff0 <am_hal_cachectrl_defaults>:
    2ff0:	50000001 00010300 00010101 685f6d61     ...P........am_h
    3000:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    3010:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    3020:	63206469 6b636f6c 74657320 676e6974     id clock setting
    3030:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    3040:	6b6c635f 2e6e6567 00000063 6d695443     _clkgen.c...CTim
    3050:	69207265 7265746e 74707572 6d756e20     er interrupt num
    3060:	20726562 2074756f 7220666f 65676e61     ber out of range
    3070:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    3080:	6974635f 2e72656d 00000063 2e5c2e2e     _ctimer.c.....\.
    3090:	6d615c2e 6c61685f 736f695f 0000632e     .\am_hal_ios.c..

000030a0 <am_hal_ios_pui8LRAM>:
    30a0:	50000000 6e6e6143 6520746f 6c62616e     ...PCannot enabl
    30b0:	6f6d2065 74206572 206e6168 20656e6f     e more than one 
    30c0:	69726570 72656870 61206c61 20612074     peripheral at a 
    30d0:	656d6974 0000002e 2e5c2e2e 6d615c2e     time......\..\am
    30e0:	6c61685f 7277705f 6c727463 0000632e     _hal_pwrctrl.c..
