
adc_lpmode2_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000235c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000028  10001000  0000235c  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000128  10001028  00002384  00021028  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021028  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000c1c1  00000000  00000000  0002105f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002a6e  00000000  00000000  0002d220  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000890  00000000  00000000  0002fc8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000f98  00000000  00000000  0003051e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004e33  00000000  00000000  000314b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002f0a  00000000  00000000  000362e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  000391f3  2**0
                  CONTENTS, READONLY
 12 .debug_frame  0000183c  00000000  00000000  00039270  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000035fc  00000000  00000000  0003aaac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 a5 06 00 00 0d 07 00 00 4d 07 00 00     ............M...
      10:	4d 07 00 00 4d 07 00 00 4d 07 00 00 00 00 00 00     M...M...M.......
	...
      2c:	13 07 00 00 13 07 00 00 00 00 00 00 13 07 00 00     ................
      3c:	13 07 00 00 13 07 00 00 13 07 00 00 13 07 00 00     ................
      4c:	13 07 00 00 13 07 00 00 13 07 00 00 13 07 00 00     ................
      5c:	13 07 00 00 13 07 00 00 13 07 00 00 13 07 00 00     ................
      6c:	13 07 00 00 13 07 00 00 b1 05 00 00 13 07 00 00     ................
      7c:	13 07 00 00 c7 05 00 00 13 07 00 00 13 07 00 00     ................
      8c:	13 07 00 00 13 07 00 00 13 07 00 00 13 07 00 00     ................
      9c:	13 07 00 00 13 07 00 00 13 07 00 00 13 07 00 00     ................
      ac:	13 07 00 00 13 07 00 00 13 07 00 00 13 07 00 00     ................
      bc:	13 07 00 00                                         ....

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <am_devices_led_init>:
am_devices_led_array_disable(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
    if ( (psLEDs == NULL)                       ||
         (ui32NumLEDs > MAX_LEDS) )
    {
        return;
     160:	b590      	push	{r4, r7, lr}
        am_hal_gpio_pinconfig((psLEDs + i)->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
#else
        am_hal_gpio_pin_config((psLEDs + i)->ui32GPIONumber, AM_HAL_GPIO_DISABLE);
#endif
    }
}
     162:	b085      	sub	sp, #20
     164:	af00      	add	r7, sp, #0
     166:	6078      	str	r0, [r7, #4]
     168:	687b      	ldr	r3, [r7, #4]
     16a:	2b00      	cmp	r3, #0
     16c:	f000 8162 	beq.w	434 <am_devices_led_init+0x2d4>
     170:	687b      	ldr	r3, [r7, #4]
     172:	681b      	ldr	r3, [r3, #0]
    if ( (psLED == NULL)    ||
     174:	2b31      	cmp	r3, #49	; 0x31
     176:	f200 815d 	bhi.w	434 <am_devices_led_init+0x2d4>
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
     17a:	687b      	ldr	r3, [r7, #4]
     17c:	685b      	ldr	r3, [r3, #4]
     17e:	f003 0302 	and.w	r3, r3, #2
     182:	2b00      	cmp	r3, #0
     184:	f000 80ab 	beq.w	2de <am_devices_led_init+0x17e>
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT);
     188:	687b      	ldr	r3, [r7, #4]
     18a:	681b      	ldr	r3, [r3, #0]
     18c:	2b31      	cmp	r3, #49	; 0x31
     18e:	d86e      	bhi.n	26e <am_devices_led_init+0x10e>
     190:	f001 fd14 	bl	1bbc <am_hal_interrupt_master_disable>
     194:	4603      	mov	r3, r0
     196:	60fb      	str	r3, [r7, #12]
     198:	4ba8      	ldr	r3, [pc, #672]	; (43c <am_devices_led_init+0x2dc>)
     19a:	2273      	movs	r2, #115	; 0x73
     19c:	601a      	str	r2, [r3, #0]
     19e:	687b      	ldr	r3, [r7, #4]
     1a0:	681b      	ldr	r3, [r3, #0]
     1a2:	085b      	lsrs	r3, r3, #1
     1a4:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     1a8:	4ba5      	ldr	r3, [pc, #660]	; (440 <am_devices_led_init+0x2e0>)
     1aa:	4413      	add	r3, r2
     1ac:	461c      	mov	r4, r3
     1ae:	687b      	ldr	r3, [r7, #4]
     1b0:	681b      	ldr	r3, [r3, #0]
     1b2:	009b      	lsls	r3, r3, #2
     1b4:	f003 031c 	and.w	r3, r3, #28
     1b8:	2202      	movs	r2, #2
     1ba:	409a      	lsls	r2, r3
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	681b      	ldr	r3, [r3, #0]
     1c0:	085b      	lsrs	r3, r3, #1
     1c2:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     1c6:	4b9e      	ldr	r3, [pc, #632]	; (440 <am_devices_led_init+0x2e0>)
     1c8:	440b      	add	r3, r1
     1ca:	6819      	ldr	r1, [r3, #0]
     1cc:	687b      	ldr	r3, [r7, #4]
     1ce:	681b      	ldr	r3, [r3, #0]
     1d0:	009b      	lsls	r3, r3, #2
     1d2:	f003 031c 	and.w	r3, r3, #28
     1d6:	2007      	movs	r0, #7
     1d8:	fa00 f303 	lsl.w	r3, r0, r3
     1dc:	43db      	mvns	r3, r3
     1de:	400b      	ands	r3, r1
     1e0:	4313      	orrs	r3, r2
     1e2:	6023      	str	r3, [r4, #0]
     1e4:	687b      	ldr	r3, [r7, #4]
     1e6:	681b      	ldr	r3, [r3, #0]
     1e8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     1ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     1f0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     1f4:	461c      	mov	r4, r3
     1f6:	687b      	ldr	r3, [r7, #4]
     1f8:	681b      	ldr	r3, [r3, #0]
     1fa:	00db      	lsls	r3, r3, #3
     1fc:	f003 0318 	and.w	r3, r3, #24
     200:	2218      	movs	r2, #24
     202:	409a      	lsls	r2, r3
     204:	687b      	ldr	r3, [r7, #4]
     206:	681b      	ldr	r3, [r3, #0]
     208:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     20c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     210:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     214:	6819      	ldr	r1, [r3, #0]
     216:	687b      	ldr	r3, [r7, #4]
     218:	681b      	ldr	r3, [r3, #0]
     21a:	00db      	lsls	r3, r3, #3
     21c:	f003 0318 	and.w	r3, r3, #24
     220:	20ff      	movs	r0, #255	; 0xff
     222:	fa00 f303 	lsl.w	r3, r0, r3
     226:	43db      	mvns	r3, r3
     228:	400b      	ands	r3, r1
     22a:	4313      	orrs	r3, r2
     22c:	6023      	str	r3, [r4, #0]
     22e:	687b      	ldr	r3, [r7, #4]
     230:	681b      	ldr	r3, [r3, #0]
     232:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     236:	4b83      	ldr	r3, [pc, #524]	; (444 <am_devices_led_init+0x2e4>)
     238:	4413      	add	r3, r2
     23a:	4618      	mov	r0, r3
     23c:	687b      	ldr	r3, [r7, #4]
     23e:	681b      	ldr	r3, [r3, #0]
     240:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     244:	4b7f      	ldr	r3, [pc, #508]	; (444 <am_devices_led_init+0x2e4>)
     246:	4413      	add	r3, r2
     248:	681a      	ldr	r2, [r3, #0]
     24a:	687b      	ldr	r3, [r7, #4]
     24c:	681b      	ldr	r3, [r3, #0]
     24e:	00db      	lsls	r3, r3, #3
     250:	f003 0318 	and.w	r3, r3, #24
     254:	21ff      	movs	r1, #255	; 0xff
     256:	fa01 f303 	lsl.w	r3, r1, r3
     25a:	43db      	mvns	r3, r3
     25c:	4013      	ands	r3, r2
     25e:	6003      	str	r3, [r0, #0]
     260:	4b76      	ldr	r3, [pc, #472]	; (43c <am_devices_led_init+0x2dc>)
     262:	2200      	movs	r2, #0
     264:	601a      	str	r2, [r3, #0]
     266:	68fb      	ldr	r3, [r7, #12]
     268:	4618      	mov	r0, r3
     26a:	f001 fcab 	bl	1bc4 <am_hal_interrupt_master_set>
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     26e:	687b      	ldr	r3, [r7, #4]
     270:	681b      	ldr	r3, [r3, #0]
     272:	08db      	lsrs	r3, r3, #3
     274:	f003 0204 	and.w	r2, r3, #4
     278:	4b73      	ldr	r3, [pc, #460]	; (448 <am_devices_led_init+0x2e8>)
     27a:	4413      	add	r3, r2
     27c:	4619      	mov	r1, r3
     27e:	687b      	ldr	r3, [r7, #4]
     280:	681b      	ldr	r3, [r3, #0]
     282:	f003 031f 	and.w	r3, r3, #31
     286:	2201      	movs	r2, #1
     288:	fa02 f303 	lsl.w	r3, r2, r3
     28c:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     28e:	687b      	ldr	r3, [r7, #4]
     290:	685b      	ldr	r3, [r3, #4]
     292:	f003 0301 	and.w	r3, r3, #1
     296:	2b00      	cmp	r3, #0
     298:	d010      	beq.n	2bc <am_devices_led_init+0x15c>
     29a:	687b      	ldr	r3, [r7, #4]
     29c:	681b      	ldr	r3, [r3, #0]
     29e:	08db      	lsrs	r3, r3, #3
     2a0:	f003 0204 	and.w	r2, r3, #4
     2a4:	4b69      	ldr	r3, [pc, #420]	; (44c <am_devices_led_init+0x2ec>)
     2a6:	4413      	add	r3, r2
     2a8:	4619      	mov	r1, r3
     2aa:	687b      	ldr	r3, [r7, #4]
     2ac:	681b      	ldr	r3, [r3, #0]
     2ae:	f003 031f 	and.w	r3, r3, #31
     2b2:	2201      	movs	r2, #1
     2b4:	fa02 f303 	lsl.w	r3, r2, r3
     2b8:	600b      	str	r3, [r1, #0]
     2ba:	e0bc      	b.n	436 <am_devices_led_init+0x2d6>
     2bc:	687b      	ldr	r3, [r7, #4]
     2be:	681b      	ldr	r3, [r3, #0]
     2c0:	08db      	lsrs	r3, r3, #3
     2c2:	f003 0204 	and.w	r2, r3, #4
     2c6:	4b62      	ldr	r3, [pc, #392]	; (450 <am_devices_led_init+0x2f0>)
     2c8:	4413      	add	r3, r2
     2ca:	4619      	mov	r1, r3
     2cc:	687b      	ldr	r3, [r7, #4]
     2ce:	681b      	ldr	r3, [r3, #0]
     2d0:	f003 031f 	and.w	r3, r3, #31
     2d4:	2201      	movs	r2, #1
     2d6:	fa02 f303 	lsl.w	r3, r2, r3
     2da:	600b      	str	r3, [r1, #0]
     2dc:	e0ab      	b.n	436 <am_devices_led_init+0x2d6>
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     2de:	687b      	ldr	r3, [r7, #4]
     2e0:	681b      	ldr	r3, [r3, #0]
     2e2:	2b31      	cmp	r3, #49	; 0x31
     2e4:	d86e      	bhi.n	3c4 <am_devices_led_init+0x264>
     2e6:	f001 fc69 	bl	1bbc <am_hal_interrupt_master_disable>
     2ea:	4603      	mov	r3, r0
     2ec:	60bb      	str	r3, [r7, #8]
     2ee:	4b53      	ldr	r3, [pc, #332]	; (43c <am_devices_led_init+0x2dc>)
     2f0:	2273      	movs	r2, #115	; 0x73
     2f2:	601a      	str	r2, [r3, #0]
     2f4:	687b      	ldr	r3, [r7, #4]
     2f6:	681b      	ldr	r3, [r3, #0]
     2f8:	085b      	lsrs	r3, r3, #1
     2fa:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     2fe:	4b50      	ldr	r3, [pc, #320]	; (440 <am_devices_led_init+0x2e0>)
     300:	4413      	add	r3, r2
     302:	461c      	mov	r4, r3
     304:	687b      	ldr	r3, [r7, #4]
     306:	681b      	ldr	r3, [r3, #0]
     308:	009b      	lsls	r3, r3, #2
     30a:	f003 031c 	and.w	r3, r3, #28
     30e:	2206      	movs	r2, #6
     310:	409a      	lsls	r2, r3
     312:	687b      	ldr	r3, [r7, #4]
     314:	681b      	ldr	r3, [r3, #0]
     316:	085b      	lsrs	r3, r3, #1
     318:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     31c:	4b48      	ldr	r3, [pc, #288]	; (440 <am_devices_led_init+0x2e0>)
     31e:	440b      	add	r3, r1
     320:	6819      	ldr	r1, [r3, #0]
     322:	687b      	ldr	r3, [r7, #4]
     324:	681b      	ldr	r3, [r3, #0]
     326:	009b      	lsls	r3, r3, #2
     328:	f003 031c 	and.w	r3, r3, #28
     32c:	2007      	movs	r0, #7
     32e:	fa00 f303 	lsl.w	r3, r0, r3
     332:	43db      	mvns	r3, r3
     334:	400b      	ands	r3, r1
     336:	4313      	orrs	r3, r2
     338:	6023      	str	r3, [r4, #0]
     33a:	687b      	ldr	r3, [r7, #4]
     33c:	681b      	ldr	r3, [r3, #0]
     33e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     342:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     346:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     34a:	461c      	mov	r4, r3
     34c:	687b      	ldr	r3, [r7, #4]
     34e:	681b      	ldr	r3, [r3, #0]
     350:	00db      	lsls	r3, r3, #3
     352:	f003 0318 	and.w	r3, r3, #24
     356:	2218      	movs	r2, #24
     358:	409a      	lsls	r2, r3
     35a:	687b      	ldr	r3, [r7, #4]
     35c:	681b      	ldr	r3, [r3, #0]
     35e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     362:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     366:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     36a:	6819      	ldr	r1, [r3, #0]
     36c:	687b      	ldr	r3, [r7, #4]
     36e:	681b      	ldr	r3, [r3, #0]
     370:	00db      	lsls	r3, r3, #3
     372:	f003 0318 	and.w	r3, r3, #24
     376:	20ff      	movs	r0, #255	; 0xff
     378:	fa00 f303 	lsl.w	r3, r0, r3
     37c:	43db      	mvns	r3, r3
     37e:	400b      	ands	r3, r1
     380:	4313      	orrs	r3, r2
     382:	6023      	str	r3, [r4, #0]
     384:	687b      	ldr	r3, [r7, #4]
     386:	681b      	ldr	r3, [r3, #0]
     388:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     38c:	4b2d      	ldr	r3, [pc, #180]	; (444 <am_devices_led_init+0x2e4>)
     38e:	4413      	add	r3, r2
     390:	4618      	mov	r0, r3
     392:	687b      	ldr	r3, [r7, #4]
     394:	681b      	ldr	r3, [r3, #0]
     396:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     39a:	4b2a      	ldr	r3, [pc, #168]	; (444 <am_devices_led_init+0x2e4>)
     39c:	4413      	add	r3, r2
     39e:	681a      	ldr	r2, [r3, #0]
     3a0:	687b      	ldr	r3, [r7, #4]
     3a2:	681b      	ldr	r3, [r3, #0]
     3a4:	00db      	lsls	r3, r3, #3
     3a6:	f003 0318 	and.w	r3, r3, #24
     3aa:	21ff      	movs	r1, #255	; 0xff
     3ac:	fa01 f303 	lsl.w	r3, r1, r3
     3b0:	43db      	mvns	r3, r3
     3b2:	4013      	ands	r3, r2
     3b4:	6003      	str	r3, [r0, #0]
     3b6:	4b21      	ldr	r3, [pc, #132]	; (43c <am_devices_led_init+0x2dc>)
     3b8:	2200      	movs	r2, #0
     3ba:	601a      	str	r2, [r3, #0]
     3bc:	68bb      	ldr	r3, [r7, #8]
     3be:	4618      	mov	r0, r3
     3c0:	f001 fc00 	bl	1bc4 <am_hal_interrupt_master_set>
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     3c4:	687b      	ldr	r3, [r7, #4]
     3c6:	681b      	ldr	r3, [r3, #0]
     3c8:	08db      	lsrs	r3, r3, #3
     3ca:	f003 0204 	and.w	r2, r3, #4
     3ce:	4b1e      	ldr	r3, [pc, #120]	; (448 <am_devices_led_init+0x2e8>)
     3d0:	4413      	add	r3, r2
     3d2:	4619      	mov	r1, r3
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	681b      	ldr	r3, [r3, #0]
     3d8:	f003 031f 	and.w	r3, r3, #31
     3dc:	2201      	movs	r2, #1
     3de:	fa02 f303 	lsl.w	r3, r2, r3
     3e2:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     3e4:	687b      	ldr	r3, [r7, #4]
     3e6:	685b      	ldr	r3, [r3, #4]
     3e8:	f003 0301 	and.w	r3, r3, #1
     3ec:	2b00      	cmp	r3, #0
     3ee:	d010      	beq.n	412 <am_devices_led_init+0x2b2>
     3f0:	687b      	ldr	r3, [r7, #4]
     3f2:	681b      	ldr	r3, [r3, #0]
     3f4:	08db      	lsrs	r3, r3, #3
     3f6:	f003 0204 	and.w	r2, r3, #4
     3fa:	4b14      	ldr	r3, [pc, #80]	; (44c <am_devices_led_init+0x2ec>)
     3fc:	4413      	add	r3, r2
     3fe:	4619      	mov	r1, r3
     400:	687b      	ldr	r3, [r7, #4]
     402:	681b      	ldr	r3, [r3, #0]
     404:	f003 031f 	and.w	r3, r3, #31
     408:	2201      	movs	r2, #1
     40a:	fa02 f303 	lsl.w	r3, r2, r3
     40e:	600b      	str	r3, [r1, #0]
     410:	e011      	b.n	436 <am_devices_led_init+0x2d6>
     412:	687b      	ldr	r3, [r7, #4]
     414:	681b      	ldr	r3, [r3, #0]
     416:	08db      	lsrs	r3, r3, #3
     418:	f003 0204 	and.w	r2, r3, #4
     41c:	4b0c      	ldr	r3, [pc, #48]	; (450 <am_devices_led_init+0x2f0>)
     41e:	4413      	add	r3, r2
     420:	4619      	mov	r1, r3
     422:	687b      	ldr	r3, [r7, #4]
     424:	681b      	ldr	r3, [r3, #0]
     426:	f003 031f 	and.w	r3, r3, #31
     42a:	2201      	movs	r2, #1
     42c:	fa02 f303 	lsl.w	r3, r2, r3
     430:	600b      	str	r3, [r1, #0]
     432:	e000      	b.n	436 <am_devices_led_init+0x2d6>
        return;
     434:	bf00      	nop
}
     436:	3714      	adds	r7, #20
     438:	46bd      	mov	sp, r7
     43a:	bd90      	pop	{r4, r7, pc}
     43c:	40010060 	.word	0x40010060
     440:	40010040 	.word	0x40010040
     444:	400100e0 	.word	0x400100e0
     448:	400100b4 	.word	0x400100b4
     44c:	40010090 	.word	0x40010090
     450:	40010098 	.word	0x40010098

00000454 <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
     454:	b580      	push	{r7, lr}
     456:	b084      	sub	sp, #16
     458:	af00      	add	r7, sp, #0
     45a:	6078      	str	r0, [r7, #4]
     45c:	6039      	str	r1, [r7, #0]
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
     45e:	687b      	ldr	r3, [r7, #4]
     460:	2b00      	cmp	r3, #0
     462:	d014      	beq.n	48e <am_devices_led_array_init+0x3a>
     464:	683b      	ldr	r3, [r7, #0]
     466:	2b1f      	cmp	r3, #31
     468:	d811      	bhi.n	48e <am_devices_led_array_init+0x3a>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     46a:	2300      	movs	r3, #0
     46c:	60fb      	str	r3, [r7, #12]
     46e:	e009      	b.n	484 <am_devices_led_array_init+0x30>
    {
        am_devices_led_init(psLEDs + i);
     470:	68fb      	ldr	r3, [r7, #12]
     472:	00db      	lsls	r3, r3, #3
     474:	687a      	ldr	r2, [r7, #4]
     476:	4413      	add	r3, r2
     478:	4618      	mov	r0, r3
     47a:	f7ff fe71 	bl	160 <am_devices_led_init>
    for ( i = 0; i < ui32NumLEDs; i++ )
     47e:	68fb      	ldr	r3, [r7, #12]
     480:	3301      	adds	r3, #1
     482:	60fb      	str	r3, [r7, #12]
     484:	68fa      	ldr	r2, [r7, #12]
     486:	683b      	ldr	r3, [r7, #0]
     488:	429a      	cmp	r2, r3
     48a:	d3f1      	bcc.n	470 <am_devices_led_array_init+0x1c>
     48c:	e000      	b.n	490 <am_devices_led_array_init+0x3c>
        return;
     48e:	bf00      	nop
    }
}
     490:	3710      	adds	r7, #16
     492:	46bd      	mov	sp, r7
     494:	bd80      	pop	{r7, pc}
	...

00000498 <itm_start>:
// Start up the ITM interface.
//
//*****************************************************************************
void
itm_start(void)
{
     498:	b580      	push	{r7, lr}
     49a:	b082      	sub	sp, #8
     49c:	af00      	add	r7, sp, #0
    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     49e:	4818      	ldr	r0, [pc, #96]	; (500 <itm_start+0x68>)
     4a0:	f000 f9d4 	bl	84c <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     4a4:	f001 fb8a 	bl	1bbc <am_hal_interrupt_master_disable>
     4a8:	4603      	mov	r3, r0
     4aa:	607b      	str	r3, [r7, #4]
     4ac:	4b15      	ldr	r3, [pc, #84]	; (504 <itm_start+0x6c>)
     4ae:	2273      	movs	r2, #115	; 0x73
     4b0:	601a      	str	r2, [r3, #0]
     4b2:	4a15      	ldr	r2, [pc, #84]	; (508 <itm_start+0x70>)
     4b4:	4b14      	ldr	r3, [pc, #80]	; (508 <itm_start+0x70>)
     4b6:	681b      	ldr	r3, [r3, #0]
     4b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     4bc:	6013      	str	r3, [r2, #0]
     4be:	4a13      	ldr	r2, [pc, #76]	; (50c <itm_start+0x74>)
     4c0:	4b12      	ldr	r3, [pc, #72]	; (50c <itm_start+0x74>)
     4c2:	681b      	ldr	r3, [r3, #0]
     4c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     4c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     4cc:	6013      	str	r3, [r2, #0]
     4ce:	4a10      	ldr	r2, [pc, #64]	; (510 <itm_start+0x78>)
     4d0:	4b0f      	ldr	r3, [pc, #60]	; (510 <itm_start+0x78>)
     4d2:	681b      	ldr	r3, [r3, #0]
     4d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     4d8:	6013      	str	r3, [r2, #0]
     4da:	4b0a      	ldr	r3, [pc, #40]	; (504 <itm_start+0x6c>)
     4dc:	2200      	movs	r2, #0
     4de:	601a      	str	r2, [r3, #0]
     4e0:	687b      	ldr	r3, [r7, #4]
     4e2:	4618      	mov	r0, r3
     4e4:	f001 fb6e 	bl	1bc4 <am_hal_interrupt_master_set>
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
     4e8:	2105      	movs	r1, #5
     4ea:	480a      	ldr	r0, [pc, #40]	; (514 <itm_start+0x7c>)
     4ec:	f7ff ffb2 	bl	454 <am_devices_led_array_init>

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     4f0:	f001 fb6c 	bl	1bcc <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     4f4:	f001 f856 	bl	15a4 <am_bsp_debug_printf_enable>
}
     4f8:	bf00      	nop
     4fa:	3708      	adds	r7, #8
     4fc:	46bd      	mov	sp, r7
     4fe:	bd80      	pop	{r7, pc}
     500:	0000168d 	.word	0x0000168d
     504:	40010060 	.word	0x40010060
     508:	40010054 	.word	0x40010054
     50c:	40010028 	.word	0x40010028
     510:	40010108 	.word	0x40010108
     514:	10001000 	.word	0x10001000

00000518 <sleep>:
// Set up the core for sleeping, and then go to sleep.
//
//*****************************************************************************
void
sleep(void)
{
     518:	b580      	push	{r7, lr}
     51a:	af00      	add	r7, sp, #0
    //
    // Disable things that can't run in sleep mode.
    //
    am_bsp_debug_printf_disable();
     51c:	f001 f882 	bl	1624 <am_bsp_debug_printf_disable>

    //
    // Go to Deep Sleep.
    //
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     520:	2001      	movs	r0, #1
     522:	f001 fd7b 	bl	201c <am_hal_sysctrl_sleep>

    //
    // Re-enable peripherals for run mode.
    //
    am_bsp_debug_printf_enable();
     526:	f001 f83d 	bl	15a4 <am_bsp_debug_printf_enable>
}
     52a:	bf00      	nop
     52c:	bd80      	pop	{r7, pc}

0000052e <adc_config>:
// Configure the ADC.
//
//*****************************************************************************
void
adc_config(void)
{
     52e:	b580      	push	{r7, lr}
     530:	b086      	sub	sp, #24
     532:	af00      	add	r7, sp, #0
    am_hal_adc_config_t sADCConfig;

    //
    // Enable the ADC power domain.
    //
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_ADC);
     534:	f44f 7000 	mov.w	r0, #512	; 0x200
     538:	f001 fbbc 	bl	1cb4 <am_hal_pwrctrl_periph_enable>

    //
    // Set up the ADC configuration parameters. These settings are reasonable
    // for accurate measurements at a low sample rate.
    //
    sADCConfig.ui32Clock = AM_HAL_ADC_CLOCK_HFRC;
     53c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
     540:	603b      	str	r3, [r7, #0]
    sADCConfig.ui32TriggerConfig = AM_HAL_ADC_TRIGGER_SOFT;
     542:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
     546:	607b      	str	r3, [r7, #4]
    sADCConfig.ui32Reference = AM_HAL_ADC_REF_INT_2P0;
     548:	2300      	movs	r3, #0
     54a:	60bb      	str	r3, [r7, #8]
    sADCConfig.ui32ClockMode = AM_HAL_ADC_CK_LOW_POWER;
     54c:	2300      	movs	r3, #0
     54e:	60fb      	str	r3, [r7, #12]
    sADCConfig.ui32PowerMode = AM_HAL_ADC_LPMODE_0;
     550:	2300      	movs	r3, #0
     552:	613b      	str	r3, [r7, #16]
    sADCConfig.ui32Repeat = AM_HAL_ADC_NO_REPEAT;
     554:	2300      	movs	r3, #0
     556:	617b      	str	r3, [r7, #20]

    am_hal_adc_config(&sADCConfig);
     558:	463b      	mov	r3, r7
     55a:	4618      	mov	r0, r3
     55c:	f001 f898 	bl	1690 <am_hal_adc_config>

    //
    // For this example, the samples will be coming in slowly. This means we
    // can afford to wake up for every conversion.
    //
    am_hal_adc_int_enable(AM_HAL_ADC_INT_CNVCMP);
     560:	2001      	movs	r0, #1
     562:	f001 f903 	bl	176c <am_hal_adc_int_enable>

    //
    // Set up an ADC slot
    //
    am_hal_adc_slot_config(0, AM_HAL_ADC_SLOT_AVG_1 |
     566:	2101      	movs	r1, #1
     568:	2000      	movs	r0, #0
     56a:	f001 f8d3 	bl	1714 <am_hal_adc_slot_config>
                              AM_HAL_ADC_SLOT_CHSEL_SE0 |
                              AM_HAL_ADC_SLOT_ENABLE);
    //
    // Enable the ADC.
    //
    am_hal_adc_enable();
     56e:	f001 f8f5 	bl	175c <am_hal_adc_enable>
}
     572:	bf00      	nop
     574:	3718      	adds	r7, #24
     576:	46bd      	mov	sp, r7
     578:	bd80      	pop	{r7, pc}

0000057a <init_timerA1_for_ADC>:
// Start sampling
//
//*****************************************************************************
void
init_timerA1_for_ADC(void)
{
     57a:	b580      	push	{r7, lr}
     57c:	af00      	add	r7, sp, #0
    // Start a timer to trigger the ADC periodically. This timer won't actually
    // be connected to the ADC (as can be done with Timer 3). Instead, we'll
    // generate interrupts to the CPU, and then use the CPU to trigger the ADC
    // in the CTIMER interrupt handler.
    //
    am_hal_ctimer_config_single(0, AM_HAL_CTIMER_TIMERA,
     57e:	f44f 7215 	mov.w	r2, #596	; 0x254
     582:	f64f 71ff 	movw	r1, #65535	; 0xffff
     586:	2000      	movs	r0, #0
     588:	f001 f9ca 	bl	1920 <am_hal_ctimer_config_single>
                                   AM_HAL_CTIMER_LFRC_512HZ |
                                   AM_HAL_CTIMER_FN_REPEAT |
                                   AM_HAL_CTIMER_INT_ENABLE);

    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
     58c:	2001      	movs	r0, #1
     58e:	f001 fac7 	bl	1b20 <am_hal_ctimer_int_enable>

    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, 511, 0);
     592:	2300      	movs	r3, #0
     594:	f240 12ff 	movw	r2, #511	; 0x1ff
     598:	f64f 71ff 	movw	r1, #65535	; 0xffff
     59c:	2000      	movs	r0, #0
     59e:	f001 fa65 	bl	1a6c <am_hal_ctimer_period_set>


    //
    // Start the timer.
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
     5a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
     5a6:	2000      	movs	r0, #0
     5a8:	f001 fa34 	bl	1a14 <am_hal_ctimer_start>
}
     5ac:	bf00      	nop
     5ae:	bd80      	pop	{r7, pc}

000005b0 <am_ctimer_isr>:
// Interrupt handler for the CTIMER
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
     5b0:	b580      	push	{r7, lr}
     5b2:	af00      	add	r7, sp, #0
    //
    // Clear TimerA0 Interrupt.
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
     5b4:	2001      	movs	r0, #1
     5b6:	f001 fac5 	bl	1b44 <am_hal_ctimer_int_clear>
    //
    // Re-configure the ADC. We lose configuation data in the power-down, so
    // we'll reconfigure the ADC here. If you don't shut down the ADC, this
    // step is unnecessary.
    //
    adc_config();
     5ba:	f7ff ffb8 	bl	52e <adc_config>

    //
    // Trigger the ADC
    //
    am_hal_adc_trigger();
     5be:	f001 f8c7 	bl	1750 <am_hal_adc_trigger>
}
     5c2:	bf00      	nop
     5c4:	bd80      	pop	{r7, pc}

000005c6 <am_adc_isr>:
// Interrupt handler for the ADC.
//
//*****************************************************************************
void
am_adc_isr(void)
{
     5c6:	b580      	push	{r7, lr}
     5c8:	b082      	sub	sp, #8
     5ca:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    //
    // Read the interrupt status.
    //
    ui32Status = am_hal_adc_int_status_get(true);
     5cc:	2001      	movs	r0, #1
     5ce:	f001 f8db 	bl	1788 <am_hal_adc_int_status_get>
     5d2:	6078      	str	r0, [r7, #4]

    //
    // Clear the ADC interrupt.
    //
    am_hal_adc_int_clear(ui32Status);
     5d4:	6878      	ldr	r0, [r7, #4]
     5d6:	f001 f8d1 	bl	177c <am_hal_adc_int_clear>

    //
    // If we got a conversion completion interrupt (which should be our only
    // ADC interrupt), go ahead and read the data.
    //
    if (ui32Status & AM_HAL_ADC_INT_CNVCMP)
     5da:	687b      	ldr	r3, [r7, #4]
     5dc:	f003 0301 	and.w	r3, r3, #1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d001      	beq.n	5e8 <am_adc_isr+0x22>
    {
        am_hal_adc_fifo_pop();
     5e4:	f001 f8ac 	bl	1740 <am_hal_adc_fifo_pop>
    }

    //
    // Power down the ADC module
    //
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_ADC);
     5e8:	f44f 7000 	mov.w	r0, #512	; 0x200
     5ec:	f001 fba4 	bl	1d38 <am_hal_pwrctrl_periph_disable>
}
     5f0:	bf00      	nop
     5f2:	3708      	adds	r7, #8
     5f4:	46bd      	mov	sp, r7
     5f6:	bd80      	pop	{r7, pc}

000005f8 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     5f8:	b580      	push	{r7, lr}
     5fa:	b082      	sub	sp, #8
     5fc:	af00      	add	r7, sp, #0
    //
    // Set the system clock to maximum frequency, and set the default low-power
    // settings for this board.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     5fe:	2000      	movs	r0, #0
     600:	f001 f966 	bl	18d0 <am_hal_clkgen_sysclk_select>
    am_hal_pwrctrl_bucks_enable();
     604:	f001 fcc0 	bl	1f88 <am_hal_pwrctrl_bucks_enable>
    am_hal_vcomp_disable();
     608:	f001 fe04 	bl	2214 <am_hal_vcomp_disable>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     60c:	481f      	ldr	r0, [pc, #124]	; (68c <main+0x94>)
     60e:	f001 f8c9 	bl	17a4 <am_hal_cachectrl_enable>

    //
    // Start the ITM interface.
    //
    itm_start();
     612:	f7ff ff41 	bl	498 <itm_start>

    //
    // Set a pin to act as our ADC input
    //
    am_hal_gpio_pin_config(16, AM_HAL_PIN_16_ADCSE0);
     616:	f001 fad1 	bl	1bbc <am_hal_interrupt_master_disable>
     61a:	4603      	mov	r3, r0
     61c:	607b      	str	r3, [r7, #4]
     61e:	4b1c      	ldr	r3, [pc, #112]	; (690 <main+0x98>)
     620:	2273      	movs	r2, #115	; 0x73
     622:	601a      	str	r2, [r3, #0]
     624:	4a1b      	ldr	r2, [pc, #108]	; (694 <main+0x9c>)
     626:	4b1b      	ldr	r3, [pc, #108]	; (694 <main+0x9c>)
     628:	681b      	ldr	r3, [r3, #0]
     62a:	f023 0307 	bic.w	r3, r3, #7
     62e:	6013      	str	r3, [r2, #0]
     630:	4a19      	ldr	r2, [pc, #100]	; (698 <main+0xa0>)
     632:	4b19      	ldr	r3, [pc, #100]	; (698 <main+0xa0>)
     634:	681b      	ldr	r3, [r3, #0]
     636:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     63a:	6013      	str	r3, [r2, #0]
     63c:	4a17      	ldr	r2, [pc, #92]	; (69c <main+0xa4>)
     63e:	4b17      	ldr	r3, [pc, #92]	; (69c <main+0xa4>)
     640:	681b      	ldr	r3, [r3, #0]
     642:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     646:	6013      	str	r3, [r2, #0]
     648:	4b11      	ldr	r3, [pc, #68]	; (690 <main+0x98>)
     64a:	2200      	movs	r2, #0
     64c:	601a      	str	r2, [r3, #0]
     64e:	687b      	ldr	r3, [r7, #4]
     650:	4618      	mov	r0, r3
     652:	f001 fab7 	bl	1bc4 <am_hal_interrupt_master_set>

    //
    // Start the timer-based ADC measurements.
    //
    init_timerA1_for_ADC();
     656:	f7ff ff90 	bl	57a <init_timerA1_for_ADC>

    //
    // Enable interrupts.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_ADC);
     65a:	2020      	movs	r0, #32
     65c:	f001 fa82 	bl	1b64 <am_hal_interrupt_enable>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_CTIMER);
     660:	201d      	movs	r0, #29
     662:	f001 fa7f 	bl	1b64 <am_hal_interrupt_enable>

    am_hal_interrupt_master_enable();
     666:	f001 faa5 	bl	1bb4 <am_hal_interrupt_master_enable>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
     66a:	f000 ff91 	bl	1590 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("ADC Example at 1Hz with ADC disabled between samples\n");
     66e:	480c      	ldr	r0, [pc, #48]	; (6a0 <main+0xa8>)
     670:	f000 ff70 	bl	1554 <am_util_stdio_printf>

    //
    // Allow time for all printing to finish.
    //
    am_util_delay_ms(10);
     674:	200a      	movs	r0, #10
     676:	f000 f84f 	bl	718 <am_util_delay_ms>

    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
     67a:	f000 ffd3 	bl	1624 <am_bsp_debug_printf_disable>
    while(1)
    {
        //
        // Disable interrupts
        //
        am_hal_interrupt_master_disable();
     67e:	f001 fa9d 	bl	1bbc <am_hal_interrupt_master_disable>

        //
        // Put the core to sleep.
        //
        sleep();
     682:	f7ff ff49 	bl	518 <sleep>

        //
        // Enable interrupts.
        //
        am_hal_interrupt_master_enable();
     686:	f001 fa95 	bl	1bb4 <am_hal_interrupt_master_enable>
        am_hal_interrupt_master_disable();
     68a:	e7f8      	b.n	67e <main+0x86>
     68c:	000022b4 	.word	0x000022b4
     690:	40010060 	.word	0x40010060
     694:	40010048 	.word	0x40010048
     698:	40010010 	.word	0x40010010
     69c:	400100f0 	.word	0x400100f0
     6a0:	00002220 	.word	0x00002220

000006a4 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     6a4:	4811      	ldr	r0, [pc, #68]	; (6ec <zero_loop+0x12>)
     6a6:	4912      	ldr	r1, [pc, #72]	; (6f0 <zero_loop+0x16>)
     6a8:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     6aa:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     6ae:	4811      	ldr	r0, [pc, #68]	; (6f4 <zero_loop+0x1a>)
     6b0:	6801      	ldr	r1, [r0, #0]
     6b2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6b6:	6001      	str	r1, [r0, #0]
     6b8:	f3bf 8f4f 	dsb	sy
     6bc:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     6c0:	480d      	ldr	r0, [pc, #52]	; (6f8 <zero_loop+0x1e>)
     6c2:	490e      	ldr	r1, [pc, #56]	; (6fc <zero_loop+0x22>)
     6c4:	4a0e      	ldr	r2, [pc, #56]	; (700 <zero_loop+0x26>)

000006c6 <copy_loop>:
     6c6:	f850 3b04 	ldr.w	r3, [r0], #4
     6ca:	f841 3b04 	str.w	r3, [r1], #4
     6ce:	4291      	cmp	r1, r2
     6d0:	dbf9      	blt.n	6c6 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     6d2:	480c      	ldr	r0, [pc, #48]	; (704 <zero_loop+0x2a>)
     6d4:	490c      	ldr	r1, [pc, #48]	; (708 <zero_loop+0x2e>)
     6d6:	f04f 0200 	mov.w	r2, #0

000006da <zero_loop>:
     6da:	4288      	cmp	r0, r1
     6dc:	bfb8      	it	lt
     6de:	f840 2b04 	strlt.w	r2, [r0], #4
     6e2:	dbfa      	blt.n	6da <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     6e4:	f7ff ff88 	bl	5f8 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     6e8:	be00      	bkpt	0x0000
}
     6ea:	bf00      	nop
     6ec:	e000ed08 	.word	0xe000ed08
     6f0:	00000000 	.word	0x00000000
     6f4:	e000ed88 	.word	0xe000ed88
     6f8:	0000235c 	.word	0x0000235c
     6fc:	10001000 	.word	0x10001000
     700:	10001028 	.word	0x10001028
     704:	10001028 	.word	0x10001028
     708:	10001150 	.word	0x10001150

0000070c <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     70c:	b480      	push	{r7}
     70e:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     710:	e7fe      	b.n	710 <am_nmi_isr+0x4>

00000712 <am_brownout_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     712:	b480      	push	{r7}
     714:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     716:	e7fe      	b.n	716 <am_brownout_isr+0x4>

00000718 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
     718:	b580      	push	{r7, lr}
     71a:	b084      	sub	sp, #16
     71c:	af00      	add	r7, sp, #0
     71e:	6078      	str	r0, [r7, #4]
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
     720:	f001 f8ee 	bl	1900 <am_hal_clkgen_sysclk_get>
     724:	60f8      	str	r0, [r7, #12]
#endif
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
     726:	68fb      	ldr	r3, [r7, #12]
     728:	4a07      	ldr	r2, [pc, #28]	; (748 <am_util_delay_ms+0x30>)
     72a:	fba2 2303 	umull	r2, r3, r2, r3
     72e:	099b      	lsrs	r3, r3, #6
     730:	687a      	ldr	r2, [r7, #4]
     732:	fb02 f303 	mul.w	r3, r2, r3
     736:	60bb      	str	r3, [r7, #8]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
     738:	68b8      	ldr	r0, [r7, #8]
     73a:	f001 fa0f 	bl	1b5c <am_hal_flash_delay>
}
     73e:	bf00      	nop
     740:	3710      	adds	r7, #16
     742:	46bd      	mov	sp, r7
     744:	bd80      	pop	{r7, pc}
     746:	bf00      	nop
     748:	057619f1 	.word	0x057619f1

0000074c <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     74c:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     74e:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     750:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     752:	f000 f809 	bl	768 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     756:	bd01      	pop	{r0, pc}
}
     758:	bf00      	nop
     75a:	4618      	mov	r0, r3

0000075c <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     75c:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     75e:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     760:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     762:	4770      	bx	lr
}
     764:	bf00      	nop
     766:	4618      	mov	r0, r3

00000768 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     768:	b580      	push	{r7, lr}
     76a:	b096      	sub	sp, #88	; 0x58
     76c:	af00      	add	r7, sp, #0
     76e:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     770:	f107 030c 	add.w	r3, r7, #12
     774:	2200      	movs	r2, #0
     776:	601a      	str	r2, [r3, #0]
     778:	605a      	str	r2, [r3, #4]
     77a:	609a      	str	r2, [r3, #8]
     77c:	60da      	str	r2, [r3, #12]
     77e:	611a      	str	r2, [r3, #16]
     780:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
     782:	2300      	movs	r3, #0
     784:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     788:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     78a:	4b2e      	ldr	r3, [pc, #184]	; (844 <am_util_faultisr_collect_data+0xdc>)
     78c:	681b      	ldr	r3, [r3, #0]
     78e:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     792:	b2db      	uxtb	r3, r3
     794:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     79a:	0a1b      	lsrs	r3, r3, #8
     79c:	b2db      	uxtb	r3, r3
     79e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     7a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     7a4:	0c1b      	lsrs	r3, r3, #16
     7a6:	b29b      	uxth	r3, r3
     7a8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     7ac:	4b26      	ldr	r3, [pc, #152]	; (848 <am_util_faultisr_collect_data+0xe0>)
     7ae:	681b      	ldr	r3, [r3, #0]
     7b0:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     7b2:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     7b6:	b2db      	uxtb	r3, r3
     7b8:	f003 0302 	and.w	r3, r3, #2
     7bc:	2b00      	cmp	r3, #0
     7be:	d005      	beq.n	7cc <am_util_faultisr_collect_data+0x64>
     7c0:	6879      	ldr	r1, [r7, #4]
     7c2:	2006      	movs	r0, #6
     7c4:	f7ff ffca 	bl	75c <getStackedReg>
     7c8:	4603      	mov	r3, r0
     7ca:	e001      	b.n	7d0 <am_util_faultisr_collect_data+0x68>
     7cc:	f04f 33ff 	mov.w	r3, #4294967295
     7d0:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     7d2:	6879      	ldr	r1, [r7, #4]
     7d4:	2000      	movs	r0, #0
     7d6:	f7ff ffc1 	bl	75c <getStackedReg>
     7da:	4603      	mov	r3, r0
     7dc:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     7de:	6879      	ldr	r1, [r7, #4]
     7e0:	2001      	movs	r0, #1
     7e2:	f7ff ffbb 	bl	75c <getStackedReg>
     7e6:	4603      	mov	r3, r0
     7e8:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     7ea:	6879      	ldr	r1, [r7, #4]
     7ec:	2002      	movs	r0, #2
     7ee:	f7ff ffb5 	bl	75c <getStackedReg>
     7f2:	4603      	mov	r3, r0
     7f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     7f6:	6879      	ldr	r1, [r7, #4]
     7f8:	2003      	movs	r0, #3
     7fa:	f7ff ffaf 	bl	75c <getStackedReg>
     7fe:	4603      	mov	r3, r0
     800:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     802:	6879      	ldr	r1, [r7, #4]
     804:	2004      	movs	r0, #4
     806:	f7ff ffa9 	bl	75c <getStackedReg>
     80a:	4603      	mov	r3, r0
     80c:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     80e:	6879      	ldr	r1, [r7, #4]
     810:	2005      	movs	r0, #5
     812:	f7ff ffa3 	bl	75c <getStackedReg>
     816:	4603      	mov	r3, r0
     818:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     81a:	6879      	ldr	r1, [r7, #4]
     81c:	2006      	movs	r0, #6
     81e:	f7ff ff9d 	bl	75c <getStackedReg>
     822:	4603      	mov	r3, r0
     824:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     826:	6879      	ldr	r1, [r7, #4]
     828:	2007      	movs	r0, #7
     82a:	f7ff ff97 	bl	75c <getStackedReg>
     82e:	4603      	mov	r3, r0
     830:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     832:	f107 030c 	add.w	r3, r7, #12
     836:	4618      	mov	r0, r3
     838:	f001 fa18 	bl	1c6c <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     83c:	2300      	movs	r3, #0
     83e:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
     840:	e7fe      	b.n	840 <am_util_faultisr_collect_data+0xd8>
     842:	bf00      	nop
     844:	e000ed28 	.word	0xe000ed28
     848:	e000ed38 	.word	0xe000ed38

0000084c <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     84c:	b480      	push	{r7}
     84e:	b083      	sub	sp, #12
     850:	af00      	add	r7, sp, #0
     852:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     854:	4a04      	ldr	r2, [pc, #16]	; (868 <am_util_stdio_printf_init+0x1c>)
     856:	687b      	ldr	r3, [r7, #4]
     858:	6013      	str	r3, [r2, #0]
}
     85a:	bf00      	nop
     85c:	370c      	adds	r7, #12
     85e:	46bd      	mov	sp, r7
     860:	f85d 7b04 	ldr.w	r7, [sp], #4
     864:	4770      	bx	lr
     866:	bf00      	nop
     868:	1000114c 	.word	0x1000114c

0000086c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     86c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     870:	b096      	sub	sp, #88	; 0x58
     872:	af00      	add	r7, sp, #0
     874:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     878:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     87c:	0025      	movs	r5, r4
     87e:	2600      	movs	r6, #0
     880:	ea55 0306 	orrs.w	r3, r5, r6
     884:	f000 80a0 	beq.w	9c8 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     888:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     88c:	0862      	lsrs	r2, r4, #1
     88e:	ea4f 0133 	mov.w	r1, r3, rrx
     892:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     896:	ea4f 0893 	mov.w	r8, r3, lsr #2
     89a:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     89e:	ea4f 0994 	mov.w	r9, r4, lsr #2
     8a2:	eb11 0308 	adds.w	r3, r1, r8
     8a6:	eb42 0409 	adc.w	r4, r2, r9
     8aa:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     8ae:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     8b2:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     8b6:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     8ba:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     8be:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     8c2:	eb13 030a 	adds.w	r3, r3, sl
     8c6:	eb44 040b 	adc.w	r4, r4, fp
     8ca:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     8ce:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     8d2:	0a1a      	lsrs	r2, r3, #8
     8d4:	62ba      	str	r2, [r7, #40]	; 0x28
     8d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
     8d8:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     8dc:	62ba      	str	r2, [r7, #40]	; 0x28
     8de:	0a23      	lsrs	r3, r4, #8
     8e0:	62fb      	str	r3, [r7, #44]	; 0x2c
     8e2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     8e6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     8ea:	18c9      	adds	r1, r1, r3
     8ec:	eb42 0204 	adc.w	r2, r2, r4
     8f0:	460b      	mov	r3, r1
     8f2:	4614      	mov	r4, r2
     8f4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     8f8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     8fc:	0c1a      	lsrs	r2, r3, #16
     8fe:	623a      	str	r2, [r7, #32]
     900:	6a3a      	ldr	r2, [r7, #32]
     902:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     906:	623a      	str	r2, [r7, #32]
     908:	0c23      	lsrs	r3, r4, #16
     90a:	627b      	str	r3, [r7, #36]	; 0x24
     90c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     910:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     914:	18c9      	adds	r1, r1, r3
     916:	eb42 0204 	adc.w	r2, r2, r4
     91a:	460b      	mov	r3, r1
     91c:	4614      	mov	r4, r2
     91e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     922:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     926:	0023      	movs	r3, r4
     928:	603b      	str	r3, [r7, #0]
     92a:	2300      	movs	r3, #0
     92c:	607b      	str	r3, [r7, #4]
     92e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     932:	e897 0006 	ldmia.w	r7, {r1, r2}
     936:	18c9      	adds	r1, r1, r3
     938:	eb42 0204 	adc.w	r2, r2, r4
     93c:	460b      	mov	r3, r1
     93e:	4614      	mov	r4, r2
     940:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     944:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     948:	08da      	lsrs	r2, r3, #3
     94a:	613a      	str	r2, [r7, #16]
     94c:	693a      	ldr	r2, [r7, #16]
     94e:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     952:	613a      	str	r2, [r7, #16]
     954:	08e3      	lsrs	r3, r4, #3
     956:	617b      	str	r3, [r7, #20]
     958:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     95c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     960:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
     964:	460b      	mov	r3, r1
     966:	4614      	mov	r4, r2
     968:	00a0      	lsls	r0, r4, #2
     96a:	60f8      	str	r0, [r7, #12]
     96c:	68f8      	ldr	r0, [r7, #12]
     96e:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
     972:	60f8      	str	r0, [r7, #12]
     974:	009b      	lsls	r3, r3, #2
     976:	60bb      	str	r3, [r7, #8]
     978:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     97c:	185b      	adds	r3, r3, r1
     97e:	eb44 0402 	adc.w	r4, r4, r2
     982:	18db      	adds	r3, r3, r3
     984:	eb44 0404 	adc.w	r4, r4, r4
     988:	4619      	mov	r1, r3
     98a:	4622      	mov	r2, r4
     98c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     990:	1a5b      	subs	r3, r3, r1
     992:	eb64 0402 	sbc.w	r4, r4, r2
     996:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     99a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     99e:	3306      	adds	r3, #6
     9a0:	f144 0400 	adc.w	r4, r4, #0
     9a4:	091a      	lsrs	r2, r3, #4
     9a6:	61ba      	str	r2, [r7, #24]
     9a8:	69ba      	ldr	r2, [r7, #24]
     9aa:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     9ae:	61ba      	str	r2, [r7, #24]
     9b0:	0923      	lsrs	r3, r4, #4
     9b2:	61fb      	str	r3, [r7, #28]
     9b4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     9b8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     9bc:	18c9      	adds	r1, r1, r3
     9be:	eb42 0204 	adc.w	r2, r2, r4
     9c2:	460b      	mov	r3, r1
     9c4:	4614      	mov	r4, r2
     9c6:	e029      	b.n	a1c <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     9ca:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     9cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     9ce:	085a      	lsrs	r2, r3, #1
     9d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     9d2:	089b      	lsrs	r3, r3, #2
     9d4:	4413      	add	r3, r2
     9d6:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     9d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     9da:	091b      	lsrs	r3, r3, #4
     9dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     9de:	4413      	add	r3, r2
     9e0:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     9e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     9e4:	0a1b      	lsrs	r3, r3, #8
     9e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     9e8:	4413      	add	r3, r2
     9ea:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     9ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     9ee:	0c1b      	lsrs	r3, r3, #16
     9f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     9f2:	4413      	add	r3, r2
     9f4:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     9f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     9f8:	08db      	lsrs	r3, r3, #3
     9fa:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     9fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     9fe:	4613      	mov	r3, r2
     a00:	009b      	lsls	r3, r3, #2
     a02:	4413      	add	r3, r2
     a04:	005b      	lsls	r3, r3, #1
     a06:	461a      	mov	r2, r3
     a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     a0a:	1a9b      	subs	r3, r3, r2
     a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a10:	3306      	adds	r3, #6
     a12:	091a      	lsrs	r2, r3, #4
     a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     a16:	4413      	add	r3, r2
     a18:	f04f 0400 	mov.w	r4, #0
    }
}
     a1c:	4618      	mov	r0, r3
     a1e:	4621      	mov	r1, r4
     a20:	3758      	adds	r7, #88	; 0x58
     a22:	46bd      	mov	sp, r7
     a24:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     a28:	4770      	bx	lr

00000a2a <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     a2a:	b590      	push	{r4, r7, lr}
     a2c:	b085      	sub	sp, #20
     a2e:	af00      	add	r7, sp, #0
     a30:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     a34:	683a      	ldr	r2, [r7, #0]
     a36:	687b      	ldr	r3, [r7, #4]
     a38:	4313      	orrs	r3, r2
     a3a:	2b00      	cmp	r3, #0
     a3c:	bf0c      	ite	eq
     a3e:	2301      	moveq	r3, #1
     a40:	2300      	movne	r3, #0
     a42:	b2db      	uxtb	r3, r3
     a44:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     a46:	e008      	b.n	a5a <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     a48:	e9d7 0100 	ldrd	r0, r1, [r7]
     a4c:	f7ff ff0e 	bl	86c <divu64_10>
     a50:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     a54:	68fb      	ldr	r3, [r7, #12]
     a56:	3301      	adds	r3, #1
     a58:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
     a5a:	e897 0018 	ldmia.w	r7, {r3, r4}
     a5e:	4323      	orrs	r3, r4
     a60:	d1f2      	bne.n	a48 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
     a62:	68fb      	ldr	r3, [r7, #12]
}
     a64:	4618      	mov	r0, r3
     a66:	3714      	adds	r7, #20
     a68:	46bd      	mov	sp, r7
     a6a:	bd90      	pop	{r4, r7, pc}

00000a6c <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     a6c:	b590      	push	{r4, r7, lr}
     a6e:	b083      	sub	sp, #12
     a70:	af00      	add	r7, sp, #0
     a72:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     a76:	e897 0018 	ldmia.w	r7, {r3, r4}
     a7a:	2b00      	cmp	r3, #0
     a7c:	f174 0300 	sbcs.w	r3, r4, #0
     a80:	da06      	bge.n	a90 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     a82:	e897 0018 	ldmia.w	r7, {r3, r4}
     a86:	425b      	negs	r3, r3
     a88:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     a8c:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     a90:	e897 0018 	ldmia.w	r7, {r3, r4}
     a94:	4618      	mov	r0, r3
     a96:	4621      	mov	r1, r4
     a98:	f7ff ffc7 	bl	a2a <ndigits_in_u64>
     a9c:	4603      	mov	r3, r0
}
     a9e:	4618      	mov	r0, r3
     aa0:	370c      	adds	r7, #12
     aa2:	46bd      	mov	sp, r7
     aa4:	bd90      	pop	{r4, r7, pc}

00000aa6 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     aa6:	b490      	push	{r4, r7}
     aa8:	b084      	sub	sp, #16
     aaa:	af00      	add	r7, sp, #0
     aac:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     ab0:	6839      	ldr	r1, [r7, #0]
     ab2:	687a      	ldr	r2, [r7, #4]
     ab4:	430a      	orrs	r2, r1
     ab6:	2a00      	cmp	r2, #0
     ab8:	bf0c      	ite	eq
     aba:	2201      	moveq	r2, #1
     abc:	2200      	movne	r2, #0
     abe:	b2d2      	uxtb	r2, r2
     ac0:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     ac2:	e00a      	b.n	ada <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     ac4:	e897 0006 	ldmia.w	r7, {r1, r2}
     ac8:	090b      	lsrs	r3, r1, #4
     aca:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     ace:	0914      	lsrs	r4, r2, #4
     ad0:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	3201      	adds	r2, #1
     ad8:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
     ada:	e897 0006 	ldmia.w	r7, {r1, r2}
     ade:	430a      	orrs	r2, r1
     ae0:	d1f0      	bne.n	ac4 <ndigits_in_hex+0x1e>
    }

    return iDigits;
     ae2:	68fb      	ldr	r3, [r7, #12]
}
     ae4:	4618      	mov	r0, r3
     ae6:	3710      	adds	r7, #16
     ae8:	46bd      	mov	sp, r7
     aea:	bc90      	pop	{r4, r7}
     aec:	4770      	bx	lr

00000aee <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     aee:	b480      	push	{r7}
     af0:	b087      	sub	sp, #28
     af2:	af00      	add	r7, sp, #0
     af4:	6078      	str	r0, [r7, #4]
     af6:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     af8:	2300      	movs	r3, #0
     afa:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     afc:	2300      	movs	r3, #0
     afe:	613b      	str	r3, [r7, #16]
     b00:	2300      	movs	r3, #0
     b02:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     b04:	687b      	ldr	r3, [r7, #4]
     b06:	781b      	ldrb	r3, [r3, #0]
     b08:	2b2d      	cmp	r3, #45	; 0x2d
     b0a:	d11b      	bne.n	b44 <decstr_to_int+0x56>
    {
        bNeg = true;
     b0c:	2301      	movs	r3, #1
     b0e:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     b10:	687b      	ldr	r3, [r7, #4]
     b12:	3301      	adds	r3, #1
     b14:	607b      	str	r3, [r7, #4]
        uCnt++;
     b16:	68fb      	ldr	r3, [r7, #12]
     b18:	3301      	adds	r3, #1
     b1a:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     b1c:	e012      	b.n	b44 <decstr_to_int+0x56>
    {
        ++uCnt;
     b1e:	68fb      	ldr	r3, [r7, #12]
     b20:	3301      	adds	r3, #1
     b22:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     b24:	693a      	ldr	r2, [r7, #16]
     b26:	4613      	mov	r3, r2
     b28:	009b      	lsls	r3, r3, #2
     b2a:	4413      	add	r3, r2
     b2c:	005b      	lsls	r3, r3, #1
     b2e:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     b30:	687b      	ldr	r3, [r7, #4]
     b32:	781b      	ldrb	r3, [r3, #0]
     b34:	461a      	mov	r2, r3
     b36:	693b      	ldr	r3, [r7, #16]
     b38:	4413      	add	r3, r2
     b3a:	3b30      	subs	r3, #48	; 0x30
     b3c:	613b      	str	r3, [r7, #16]
        pcStr++;
     b3e:	687b      	ldr	r3, [r7, #4]
     b40:	3301      	adds	r3, #1
     b42:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     b44:	687b      	ldr	r3, [r7, #4]
     b46:	781b      	ldrb	r3, [r3, #0]
     b48:	2b2f      	cmp	r3, #47	; 0x2f
     b4a:	d903      	bls.n	b54 <decstr_to_int+0x66>
     b4c:	687b      	ldr	r3, [r7, #4]
     b4e:	781b      	ldrb	r3, [r3, #0]
     b50:	2b39      	cmp	r3, #57	; 0x39
     b52:	d9e4      	bls.n	b1e <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
     b54:	683b      	ldr	r3, [r7, #0]
     b56:	2b00      	cmp	r3, #0
     b58:	d002      	beq.n	b60 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     b5a:	683b      	ldr	r3, [r7, #0]
     b5c:	68fa      	ldr	r2, [r7, #12]
     b5e:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     b60:	7dfb      	ldrb	r3, [r7, #23]
     b62:	2b00      	cmp	r3, #0
     b64:	d002      	beq.n	b6c <decstr_to_int+0x7e>
     b66:	693b      	ldr	r3, [r7, #16]
     b68:	425b      	negs	r3, r3
     b6a:	e000      	b.n	b6e <decstr_to_int+0x80>
     b6c:	693b      	ldr	r3, [r7, #16]
}
     b6e:	4618      	mov	r0, r3
     b70:	371c      	adds	r7, #28
     b72:	46bd      	mov	sp, r7
     b74:	f85d 7b04 	ldr.w	r7, [sp], #4
     b78:	4770      	bx	lr

00000b7a <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     b7a:	b590      	push	{r4, r7, lr}
     b7c:	b091      	sub	sp, #68	; 0x44
     b7e:	af00      	add	r7, sp, #0
     b80:	e9c7 0102 	strd	r0, r1, [r7, #8]
     b84:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     b86:	2300      	movs	r3, #0
     b88:	63fb      	str	r3, [r7, #60]	; 0x3c
     b8a:	2300      	movs	r3, #0
     b8c:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     b8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     b92:	f7ff fe6b 	bl	86c <divu64_10>
     b96:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     b9a:	68b9      	ldr	r1, [r7, #8]
     b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     b9e:	4613      	mov	r3, r2
     ba0:	009b      	lsls	r3, r3, #2
     ba2:	4413      	add	r3, r2
     ba4:	005b      	lsls	r3, r3, #1
     ba6:	1acb      	subs	r3, r1, r3
     ba8:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     bac:	1c5a      	adds	r2, r3, #1
     bae:	63fa      	str	r2, [r7, #60]	; 0x3c
     bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     bb2:	b2d2      	uxtb	r2, r2
     bb4:	3230      	adds	r2, #48	; 0x30
     bb6:	b2d2      	uxtb	r2, r2
     bb8:	f107 0140 	add.w	r1, r7, #64	; 0x40
     bbc:	440b      	add	r3, r1
     bbe:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     bc2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     bc6:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     bca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     bce:	4323      	orrs	r3, r4
     bd0:	d1dd      	bne.n	b8e <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     bd4:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     bd6:	687b      	ldr	r3, [r7, #4]
     bd8:	2b00      	cmp	r3, #0
     bda:	d011      	beq.n	c00 <uint64_to_str+0x86>
    {
        while ( ix-- )
     bdc:	e008      	b.n	bf0 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     bde:	687b      	ldr	r3, [r7, #4]
     be0:	1c5a      	adds	r2, r3, #1
     be2:	607a      	str	r2, [r7, #4]
     be4:	f107 0110 	add.w	r1, r7, #16
     be8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     bea:	440a      	add	r2, r1
     bec:	7812      	ldrb	r2, [r2, #0]
     bee:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
     bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     bf2:	1e5a      	subs	r2, r3, #1
     bf4:	63fa      	str	r2, [r7, #60]	; 0x3c
     bf6:	2b00      	cmp	r3, #0
     bf8:	d1f1      	bne.n	bde <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     bfa:	687b      	ldr	r3, [r7, #4]
     bfc:	2200      	movs	r2, #0
     bfe:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     c02:	4618      	mov	r0, r3
     c04:	3744      	adds	r7, #68	; 0x44
     c06:	46bd      	mov	sp, r7
     c08:	bd90      	pop	{r4, r7, pc}

00000c0a <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     c0a:	b4b0      	push	{r4, r5, r7}
     c0c:	b08d      	sub	sp, #52	; 0x34
     c0e:	af00      	add	r7, sp, #0
     c10:	e9c7 0102 	strd	r0, r1, [r7, #8]
     c14:	607a      	str	r2, [r7, #4]
     c16:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     c18:	2300      	movs	r3, #0
     c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     c1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     c20:	4313      	orrs	r3, r2
     c22:	d131      	bne.n	c88 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c26:	1c5a      	adds	r2, r3, #1
     c28:	62fa      	str	r2, [r7, #44]	; 0x2c
     c2a:	f107 0230 	add.w	r2, r7, #48	; 0x30
     c2e:	4413      	add	r3, r2
     c30:	2230      	movs	r2, #48	; 0x30
     c32:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     c36:	e027      	b.n	c88 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     c38:	7a3b      	ldrb	r3, [r7, #8]
     c3a:	f003 030f 	and.w	r3, r3, #15
     c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     c42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     c46:	2b09      	cmp	r3, #9
     c48:	d90a      	bls.n	c60 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     c4a:	78fb      	ldrb	r3, [r7, #3]
     c4c:	2b00      	cmp	r3, #0
     c4e:	d001      	beq.n	c54 <uint64_to_hexstr+0x4a>
     c50:	2227      	movs	r2, #39	; 0x27
     c52:	e000      	b.n	c56 <uint64_to_hexstr+0x4c>
     c54:	2207      	movs	r2, #7
     c56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     c5a:	4413      	add	r3, r2
     c5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c62:	1c5a      	adds	r2, r3, #1
     c64:	62fa      	str	r2, [r7, #44]	; 0x2c
     c66:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     c6a:	3230      	adds	r2, #48	; 0x30
     c6c:	b2d2      	uxtb	r2, r2
     c6e:	f107 0130 	add.w	r1, r7, #48	; 0x30
     c72:	440b      	add	r3, r1
     c74:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     c78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     c7c:	0914      	lsrs	r4, r2, #4
     c7e:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     c82:	091d      	lsrs	r5, r3, #4
     c84:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
     c88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     c8c:	4313      	orrs	r3, r2
     c8e:	d1d3      	bne.n	c38 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c92:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     c94:	687b      	ldr	r3, [r7, #4]
     c96:	2b00      	cmp	r3, #0
     c98:	d011      	beq.n	cbe <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     c9a:	e008      	b.n	cae <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     c9c:	687b      	ldr	r3, [r7, #4]
     c9e:	1c5a      	adds	r2, r3, #1
     ca0:	607a      	str	r2, [r7, #4]
     ca2:	f107 0110 	add.w	r1, r7, #16
     ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     ca8:	440a      	add	r2, r1
     caa:	7812      	ldrb	r2, [r2, #0]
     cac:	701a      	strb	r2, [r3, #0]
        while (ix--)
     cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     cb0:	1e5a      	subs	r2, r3, #1
     cb2:	62fa      	str	r2, [r7, #44]	; 0x2c
     cb4:	2b00      	cmp	r3, #0
     cb6:	d1f1      	bne.n	c9c <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     cb8:	687b      	ldr	r3, [r7, #4]
     cba:	2200      	movs	r2, #0
     cbc:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     cc0:	4618      	mov	r0, r3
     cc2:	3734      	adds	r7, #52	; 0x34
     cc4:	46bd      	mov	sp, r7
     cc6:	bcb0      	pop	{r4, r5, r7}
     cc8:	4770      	bx	lr

00000cca <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     cca:	b480      	push	{r7}
     ccc:	b085      	sub	sp, #20
     cce:	af00      	add	r7, sp, #0
     cd0:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     cd2:	2300      	movs	r3, #0
     cd4:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     cd6:	687b      	ldr	r3, [r7, #4]
     cd8:	2b00      	cmp	r3, #0
     cda:	d104      	bne.n	ce6 <simple_strlen+0x1c>
    {
        return ui32RetVal;
     cdc:	68fb      	ldr	r3, [r7, #12]
     cde:	e009      	b.n	cf4 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     ce0:	68fb      	ldr	r3, [r7, #12]
     ce2:	3301      	adds	r3, #1
     ce4:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
     ce6:	687b      	ldr	r3, [r7, #4]
     ce8:	1c5a      	adds	r2, r3, #1
     cea:	607a      	str	r2, [r7, #4]
     cec:	781b      	ldrb	r3, [r3, #0]
     cee:	2b00      	cmp	r3, #0
     cf0:	d1f6      	bne.n	ce0 <simple_strlen+0x16>
    }
    return ui32RetVal;
     cf2:	68fb      	ldr	r3, [r7, #12]
}
     cf4:	4618      	mov	r0, r3
     cf6:	3714      	adds	r7, #20
     cf8:	46bd      	mov	sp, r7
     cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
     cfe:	4770      	bx	lr

00000d00 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     d00:	b480      	push	{r7}
     d02:	b087      	sub	sp, #28
     d04:	af00      	add	r7, sp, #0
     d06:	60f8      	str	r0, [r7, #12]
     d08:	460b      	mov	r3, r1
     d0a:	607a      	str	r2, [r7, #4]
     d0c:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     d0e:	2300      	movs	r3, #0
     d10:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     d12:	687b      	ldr	r3, [r7, #4]
     d14:	2b00      	cmp	r3, #0
     d16:	dc0c      	bgt.n	d32 <padbuffer+0x32>
    {
        return i32Cnt;
     d18:	697b      	ldr	r3, [r7, #20]
     d1a:	e010      	b.n	d3e <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     d1c:	68fb      	ldr	r3, [r7, #12]
     d1e:	2b00      	cmp	r3, #0
     d20:	d004      	beq.n	d2c <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     d22:	68fb      	ldr	r3, [r7, #12]
     d24:	1c5a      	adds	r2, r3, #1
     d26:	60fa      	str	r2, [r7, #12]
     d28:	7afa      	ldrb	r2, [r7, #11]
     d2a:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     d2c:	697b      	ldr	r3, [r7, #20]
     d2e:	3301      	adds	r3, #1
     d30:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
     d32:	687b      	ldr	r3, [r7, #4]
     d34:	1e5a      	subs	r2, r3, #1
     d36:	607a      	str	r2, [r7, #4]
     d38:	2b00      	cmp	r3, #0
     d3a:	d1ef      	bne.n	d1c <padbuffer+0x1c>
    }

    return i32Cnt;
     d3c:	697b      	ldr	r3, [r7, #20]
}
     d3e:	4618      	mov	r0, r3
     d40:	371c      	adds	r7, #28
     d42:	46bd      	mov	sp, r7
     d44:	f85d 7b04 	ldr.w	r7, [sp], #4
     d48:	4770      	bx	lr
	...

00000d4c <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     d4c:	b590      	push	{r4, r7, lr}
     d4e:	b08f      	sub	sp, #60	; 0x3c
     d50:	af00      	add	r7, sp, #0
     d52:	60f8      	str	r0, [r7, #12]
     d54:	60b9      	str	r1, [r7, #8]
     d56:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
     d58:	68bb      	ldr	r3, [r7, #8]
     d5a:	681b      	ldr	r3, [r3, #0]
     d5c:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
     d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d60:	2b03      	cmp	r3, #3
     d62:	dc02      	bgt.n	d6a <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     d64:	f06f 0302 	mvn.w	r3, #2
     d68:	e0e7      	b.n	f3a <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
     d6a:	edd7 7a03 	vldr	s15, [r7, #12]
     d6e:	eef5 7a40 	vcmp.f32	s15, #0.0
     d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     d76:	d104      	bne.n	d82 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     d78:	68bb      	ldr	r3, [r7, #8]
     d7a:	4a72      	ldr	r2, [pc, #456]	; (f44 <ftoa+0x1f8>)
     d7c:	601a      	str	r2, [r3, #0]
        return 3;
     d7e:	2303      	movs	r3, #3
     d80:	e0db      	b.n	f3a <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
     d82:	68bb      	ldr	r3, [r7, #8]
     d84:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
     d86:	68fb      	ldr	r3, [r7, #12]
     d88:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     d8a:	693b      	ldr	r3, [r7, #16]
     d8c:	15db      	asrs	r3, r3, #23
     d8e:	b2db      	uxtb	r3, r3
     d90:	3b7f      	subs	r3, #127	; 0x7f
     d92:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     d94:	693b      	ldr	r3, [r7, #16]
     d96:	f3c3 0316 	ubfx	r3, r3, #0, #23
     d9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     d9e:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
     da0:	2300      	movs	r3, #0
     da2:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     da4:	2300      	movs	r3, #0
     da6:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     da8:	69fb      	ldr	r3, [r7, #28]
     daa:	2b1e      	cmp	r3, #30
     dac:	dd02      	ble.n	db4 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     dae:	f06f 0301 	mvn.w	r3, #1
     db2:	e0c2      	b.n	f3a <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
     db4:	69fb      	ldr	r3, [r7, #28]
     db6:	f113 0f17 	cmn.w	r3, #23
     dba:	da02      	bge.n	dc2 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     dbc:	f04f 33ff 	mov.w	r3, #4294967295
     dc0:	e0bb      	b.n	f3a <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
     dc2:	69fb      	ldr	r3, [r7, #28]
     dc4:	2b16      	cmp	r3, #22
     dc6:	dd06      	ble.n	dd6 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
     dc8:	69fb      	ldr	r3, [r7, #28]
     dca:	3b17      	subs	r3, #23
     dcc:	69ba      	ldr	r2, [r7, #24]
     dce:	fa02 f303 	lsl.w	r3, r2, r3
     dd2:	637b      	str	r3, [r7, #52]	; 0x34
     dd4:	e01a      	b.n	e0c <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     dd6:	69fb      	ldr	r3, [r7, #28]
     dd8:	2b00      	cmp	r3, #0
     dda:	db0f      	blt.n	dfc <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
     ddc:	69fb      	ldr	r3, [r7, #28]
     dde:	f1c3 0317 	rsb	r3, r3, #23
     de2:	69ba      	ldr	r2, [r7, #24]
     de4:	fa42 f303 	asr.w	r3, r2, r3
     de8:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
     dea:	69fb      	ldr	r3, [r7, #28]
     dec:	3301      	adds	r3, #1
     dee:	69ba      	ldr	r2, [r7, #24]
     df0:	fa02 f303 	lsl.w	r3, r2, r3
     df4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     df8:	633b      	str	r3, [r7, #48]	; 0x30
     dfa:	e007      	b.n	e0c <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
     dfc:	69bb      	ldr	r3, [r7, #24]
     dfe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     e02:	69fb      	ldr	r3, [r7, #28]
     e04:	43db      	mvns	r3, r3
     e06:	fa42 f303 	asr.w	r3, r2, r3
     e0a:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     e0c:	693b      	ldr	r3, [r7, #16]
     e0e:	2b00      	cmp	r3, #0
     e10:	da04      	bge.n	e1c <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     e12:	68bb      	ldr	r3, [r7, #8]
     e14:	1c5a      	adds	r2, r3, #1
     e16:	60ba      	str	r2, [r7, #8]
     e18:	222d      	movs	r2, #45	; 0x2d
     e1a:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e1e:	2b00      	cmp	r3, #0
     e20:	d105      	bne.n	e2e <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     e22:	68bb      	ldr	r3, [r7, #8]
     e24:	1c5a      	adds	r2, r3, #1
     e26:	60ba      	str	r2, [r7, #8]
     e28:	2230      	movs	r2, #48	; 0x30
     e2a:	701a      	strb	r2, [r3, #0]
     e2c:	e021      	b.n	e72 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e30:	2b00      	cmp	r3, #0
     e32:	dd08      	ble.n	e46 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e36:	ea4f 74e3 	mov.w	r4, r3, asr #31
     e3a:	68ba      	ldr	r2, [r7, #8]
     e3c:	4618      	mov	r0, r3
     e3e:	4621      	mov	r1, r4
     e40:	f7ff fe9b 	bl	b7a <uint64_to_str>
     e44:	e011      	b.n	e6a <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     e46:	68bb      	ldr	r3, [r7, #8]
     e48:	1c5a      	adds	r2, r3, #1
     e4a:	60ba      	str	r2, [r7, #8]
     e4c:	222d      	movs	r2, #45	; 0x2d
     e4e:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e52:	425b      	negs	r3, r3
     e54:	ea4f 74e3 	mov.w	r4, r3, asr #31
     e58:	68ba      	ldr	r2, [r7, #8]
     e5a:	4618      	mov	r0, r3
     e5c:	4621      	mov	r1, r4
     e5e:	f7ff fe8c 	bl	b7a <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     e62:	e002      	b.n	e6a <ftoa+0x11e>
        {
            pcBuf++;
     e64:	68bb      	ldr	r3, [r7, #8]
     e66:	3301      	adds	r3, #1
     e68:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
     e6a:	68bb      	ldr	r3, [r7, #8]
     e6c:	781b      	ldrb	r3, [r3, #0]
     e6e:	2b00      	cmp	r3, #0
     e70:	d1f8      	bne.n	e64 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     e72:	68bb      	ldr	r3, [r7, #8]
     e74:	1c5a      	adds	r2, r3, #1
     e76:	60ba      	str	r2, [r7, #8]
     e78:	222e      	movs	r2, #46	; 0x2e
     e7a:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     e7e:	2b00      	cmp	r3, #0
     e80:	d105      	bne.n	e8e <ftoa+0x142>
    {
        *pcBuf++ = '0';
     e82:	68bb      	ldr	r3, [r7, #8]
     e84:	1c5a      	adds	r2, r3, #1
     e86:	60ba      	str	r2, [r7, #8]
     e88:	2230      	movs	r2, #48	; 0x30
     e8a:	701a      	strb	r2, [r3, #0]
     e8c:	e04f      	b.n	f2e <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     e8e:	68ba      	ldr	r2, [r7, #8]
     e90:	6a3b      	ldr	r3, [r7, #32]
     e92:	1ad3      	subs	r3, r2, r3
     e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     e96:	1ad3      	subs	r3, r2, r3
     e98:	3b01      	subs	r3, #1
     e9a:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     e9c:	697a      	ldr	r2, [r7, #20]
     e9e:	687b      	ldr	r3, [r7, #4]
     ea0:	4293      	cmp	r3, r2
     ea2:	bfa8      	it	ge
     ea4:	4613      	movge	r3, r2
     ea6:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
     ea8:	2300      	movs	r3, #0
     eaa:	62bb      	str	r3, [r7, #40]	; 0x28
     eac:	e015      	b.n	eda <ftoa+0x18e>
        {
            i32FracPart *= 10;
     eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     eb0:	4613      	mov	r3, r2
     eb2:	009b      	lsls	r3, r3, #2
     eb4:	4413      	add	r3, r2
     eb6:	005b      	lsls	r3, r3, #1
     eb8:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     eba:	68bb      	ldr	r3, [r7, #8]
     ebc:	1c5a      	adds	r2, r3, #1
     ebe:	60ba      	str	r2, [r7, #8]
     ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     ec2:	1612      	asrs	r2, r2, #24
     ec4:	b2d2      	uxtb	r2, r2
     ec6:	3230      	adds	r2, #48	; 0x30
     ec8:	b2d2      	uxtb	r2, r2
     eca:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ece:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     ed2:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
     ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
     ed6:	3301      	adds	r3, #1
     ed8:	62bb      	str	r3, [r7, #40]	; 0x28
     eda:	6aba      	ldr	r2, [r7, #40]	; 0x28
     edc:	697b      	ldr	r3, [r7, #20]
     ede:	429a      	cmp	r2, r3
     ee0:	dbe5      	blt.n	eae <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
     ee2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     ee4:	4613      	mov	r3, r2
     ee6:	009b      	lsls	r3, r3, #2
     ee8:	4413      	add	r3, r2
     eea:	005b      	lsls	r3, r3, #1
     eec:	161b      	asrs	r3, r3, #24
     eee:	2b04      	cmp	r3, #4
     ef0:	dd1d      	ble.n	f2e <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
     ef2:	68bb      	ldr	r3, [r7, #8]
     ef4:	3b01      	subs	r3, #1
     ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     ef8:	e015      	b.n	f26 <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
     efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     efc:	781b      	ldrb	r3, [r3, #0]
     efe:	2b2e      	cmp	r3, #46	; 0x2e
     f00:	d00e      	beq.n	f20 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
     f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f04:	781b      	ldrb	r3, [r3, #0]
     f06:	2b39      	cmp	r3, #57	; 0x39
     f08:	d103      	bne.n	f12 <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
     f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f0c:	2230      	movs	r2, #48	; 0x30
     f0e:	701a      	strb	r2, [r3, #0]
     f10:	e006      	b.n	f20 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
     f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f14:	781b      	ldrb	r3, [r3, #0]
     f16:	3301      	adds	r3, #1
     f18:	b2da      	uxtb	r2, r3
     f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f1c:	701a      	strb	r2, [r3, #0]
                    break;
     f1e:	e006      	b.n	f2e <ftoa+0x1e2>
                }
                pcBuftmp--;
     f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f22:	3b01      	subs	r3, #1
     f24:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     f28:	6a3b      	ldr	r3, [r7, #32]
     f2a:	429a      	cmp	r2, r3
     f2c:	d2e5      	bcs.n	efa <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     f2e:	68bb      	ldr	r3, [r7, #8]
     f30:	2200      	movs	r2, #0
     f32:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     f34:	68ba      	ldr	r2, [r7, #8]
     f36:	6a3b      	ldr	r3, [r7, #32]
     f38:	1ad3      	subs	r3, r2, r3
} // ftoa()
     f3a:	4618      	mov	r0, r3
     f3c:	373c      	adds	r7, #60	; 0x3c
     f3e:	46bd      	mov	sp, r7
     f40:	bd90      	pop	{r4, r7, pc}
     f42:	bf00      	nop
     f44:	00302e30 	.word	0x00302e30

00000f48 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     f48:	b590      	push	{r4, r7, lr}
     f4a:	b095      	sub	sp, #84	; 0x54
     f4c:	af00      	add	r7, sp, #0
     f4e:	60f8      	str	r0, [r7, #12]
     f50:	60b9      	str	r1, [r7, #8]
     f52:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     f54:	2300      	movs	r3, #0
     f56:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     f58:	2300      	movs	r3, #0
     f5a:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     f5c:	e2e3      	b.n	1526 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     f5e:	2306      	movs	r3, #6
     f60:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     f62:	68bb      	ldr	r3, [r7, #8]
     f64:	781b      	ldrb	r3, [r3, #0]
     f66:	2b25      	cmp	r3, #37	; 0x25
     f68:	d01f      	beq.n	faa <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     f6a:	68fb      	ldr	r3, [r7, #12]
     f6c:	2b00      	cmp	r3, #0
     f6e:	d015      	beq.n	f9c <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     f70:	68bb      	ldr	r3, [r7, #8]
     f72:	781b      	ldrb	r3, [r3, #0]
     f74:	2b0a      	cmp	r3, #10
     f76:	d10b      	bne.n	f90 <am_util_stdio_vsprintf+0x48>
     f78:	4bb1      	ldr	r3, [pc, #708]	; (1240 <am_util_stdio_vsprintf+0x2f8>)
     f7a:	781b      	ldrb	r3, [r3, #0]
     f7c:	2b00      	cmp	r3, #0
     f7e:	d007      	beq.n	f90 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     f80:	68fb      	ldr	r3, [r7, #12]
     f82:	1c5a      	adds	r2, r3, #1
     f84:	60fa      	str	r2, [r7, #12]
     f86:	220d      	movs	r2, #13
     f88:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f8c:	3301      	adds	r3, #1
     f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     f90:	68fb      	ldr	r3, [r7, #12]
     f92:	1c5a      	adds	r2, r3, #1
     f94:	60fa      	str	r2, [r7, #12]
     f96:	68ba      	ldr	r2, [r7, #8]
     f98:	7812      	ldrb	r2, [r2, #0]
     f9a:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     f9c:	68bb      	ldr	r3, [r7, #8]
     f9e:	3301      	adds	r3, #1
     fa0:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fa4:	3301      	adds	r3, #1
     fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     fa8:	e2bd      	b.n	1526 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     faa:	68bb      	ldr	r3, [r7, #8]
     fac:	3301      	adds	r3, #1
     fae:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     fb0:	2300      	movs	r3, #0
     fb2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     fb6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     fba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     fbe:	2320      	movs	r3, #32
     fc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     fc4:	68bb      	ldr	r3, [r7, #8]
     fc6:	781b      	ldrb	r3, [r3, #0]
     fc8:	2b30      	cmp	r3, #48	; 0x30
     fca:	d105      	bne.n	fd8 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     fcc:	2330      	movs	r3, #48	; 0x30
     fce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     fd2:	68bb      	ldr	r3, [r7, #8]
     fd4:	3301      	adds	r3, #1
     fd6:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     fd8:	f107 0310 	add.w	r3, r7, #16
     fdc:	4619      	mov	r1, r3
     fde:	68b8      	ldr	r0, [r7, #8]
     fe0:	f7ff fd85 	bl	aee <decstr_to_int>
     fe4:	4603      	mov	r3, r0
     fe6:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     fe8:	693b      	ldr	r3, [r7, #16]
     fea:	68ba      	ldr	r2, [r7, #8]
     fec:	4413      	add	r3, r2
     fee:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     ff0:	68bb      	ldr	r3, [r7, #8]
     ff2:	781b      	ldrb	r3, [r3, #0]
     ff4:	2b73      	cmp	r3, #115	; 0x73
     ff6:	d005      	beq.n	1004 <am_util_stdio_vsprintf+0xbc>
     ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ffa:	2b00      	cmp	r3, #0
     ffc:	da02      	bge.n	1004 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1000:	425b      	negs	r3, r3
    1002:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    1004:	68bb      	ldr	r3, [r7, #8]
    1006:	781b      	ldrb	r3, [r3, #0]
    1008:	2b2e      	cmp	r3, #46	; 0x2e
    100a:	d10e      	bne.n	102a <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    100c:	68bb      	ldr	r3, [r7, #8]
    100e:	3301      	adds	r3, #1
    1010:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    1012:	f107 0310 	add.w	r3, r7, #16
    1016:	4619      	mov	r1, r3
    1018:	68b8      	ldr	r0, [r7, #8]
    101a:	f7ff fd68 	bl	aee <decstr_to_int>
    101e:	4603      	mov	r3, r0
    1020:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    1022:	693b      	ldr	r3, [r7, #16]
    1024:	68ba      	ldr	r2, [r7, #8]
    1026:	4413      	add	r3, r2
    1028:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    102a:	68bb      	ldr	r3, [r7, #8]
    102c:	781b      	ldrb	r3, [r3, #0]
    102e:	2b6c      	cmp	r3, #108	; 0x6c
    1030:	d10c      	bne.n	104c <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    1032:	68bb      	ldr	r3, [r7, #8]
    1034:	3301      	adds	r3, #1
    1036:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    1038:	68bb      	ldr	r3, [r7, #8]
    103a:	781b      	ldrb	r3, [r3, #0]
    103c:	2b6c      	cmp	r3, #108	; 0x6c
    103e:	d105      	bne.n	104c <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    1040:	68bb      	ldr	r3, [r7, #8]
    1042:	3301      	adds	r3, #1
    1044:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    1046:	2301      	movs	r3, #1
    1048:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    104c:	68bb      	ldr	r3, [r7, #8]
    104e:	781b      	ldrb	r3, [r3, #0]
    1050:	3b46      	subs	r3, #70	; 0x46
    1052:	2b32      	cmp	r3, #50	; 0x32
    1054:	f200 8254 	bhi.w	1500 <am_util_stdio_vsprintf+0x5b8>
    1058:	a201      	add	r2, pc, #4	; (adr r2, 1060 <am_util_stdio_vsprintf+0x118>)
    105a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    105e:	bf00      	nop
    1060:	0000148b 	.word	0x0000148b
    1064:	00001501 	.word	0x00001501
    1068:	00001501 	.word	0x00001501
    106c:	00001501 	.word	0x00001501
    1070:	00001501 	.word	0x00001501
    1074:	00001501 	.word	0x00001501
    1078:	00001501 	.word	0x00001501
    107c:	00001501 	.word	0x00001501
    1080:	00001501 	.word	0x00001501
    1084:	00001501 	.word	0x00001501
    1088:	00001501 	.word	0x00001501
    108c:	00001501 	.word	0x00001501
    1090:	00001501 	.word	0x00001501
    1094:	00001501 	.word	0x00001501
    1098:	00001501 	.word	0x00001501
    109c:	00001501 	.word	0x00001501
    10a0:	00001501 	.word	0x00001501
    10a4:	00001501 	.word	0x00001501
    10a8:	00001227 	.word	0x00001227
    10ac:	00001501 	.word	0x00001501
    10b0:	00001501 	.word	0x00001501
    10b4:	00001501 	.word	0x00001501
    10b8:	00001501 	.word	0x00001501
    10bc:	00001501 	.word	0x00001501
    10c0:	00001501 	.word	0x00001501
    10c4:	00001501 	.word	0x00001501
    10c8:	00001501 	.word	0x00001501
    10cc:	00001501 	.word	0x00001501
    10d0:	00001501 	.word	0x00001501
    10d4:	0000112d 	.word	0x0000112d
    10d8:	00001353 	.word	0x00001353
    10dc:	00001501 	.word	0x00001501
    10e0:	0000148b 	.word	0x0000148b
    10e4:	00001501 	.word	0x00001501
    10e8:	00001501 	.word	0x00001501
    10ec:	00001353 	.word	0x00001353
    10f0:	00001501 	.word	0x00001501
    10f4:	00001501 	.word	0x00001501
    10f8:	00001501 	.word	0x00001501
    10fc:	00001501 	.word	0x00001501
    1100:	00001501 	.word	0x00001501
    1104:	00001501 	.word	0x00001501
    1108:	00001501 	.word	0x00001501
    110c:	00001501 	.word	0x00001501
    1110:	00001501 	.word	0x00001501
    1114:	00001153 	.word	0x00001153
    1118:	00001501 	.word	0x00001501
    111c:	000012c1 	.word	0x000012c1
    1120:	00001501 	.word	0x00001501
    1124:	00001501 	.word	0x00001501
    1128:	00001221 	.word	0x00001221
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    112c:	687b      	ldr	r3, [r7, #4]
    112e:	1d1a      	adds	r2, r3, #4
    1130:	607a      	str	r2, [r7, #4]
    1132:	681b      	ldr	r3, [r3, #0]
    1134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    1138:	68fb      	ldr	r3, [r7, #12]
    113a:	2b00      	cmp	r3, #0
    113c:	d005      	beq.n	114a <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    113e:	68fb      	ldr	r3, [r7, #12]
    1140:	1c5a      	adds	r2, r3, #1
    1142:	60fa      	str	r2, [r7, #12]
    1144:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    1148:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    114a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    114c:	3301      	adds	r3, #1
    114e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1150:	e1e6      	b.n	1520 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    1152:	687b      	ldr	r3, [r7, #4]
    1154:	1d1a      	adds	r2, r3, #4
    1156:	607a      	str	r2, [r7, #4]
    1158:	681b      	ldr	r3, [r3, #0]
    115a:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    115c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    115e:	f7ff fdb4 	bl	cca <simple_strlen>
    1162:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    1164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1166:	2b00      	cmp	r3, #0
    1168:	dd2e      	ble.n	11c8 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    116a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    116c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    116e:	429a      	cmp	r2, r3
    1170:	d22a      	bcs.n	11c8 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1172:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1176:	1ad3      	subs	r3, r2, r3
    1178:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    117a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    117e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1180:	4619      	mov	r1, r3
    1182:	68f8      	ldr	r0, [r7, #12]
    1184:	f7ff fdbc 	bl	d00 <padbuffer>
    1188:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    118a:	68fb      	ldr	r3, [r7, #12]
    118c:	2b00      	cmp	r3, #0
    118e:	d001      	beq.n	1194 <am_util_stdio_vsprintf+0x24c>
    1190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1192:	e000      	b.n	1196 <am_util_stdio_vsprintf+0x24e>
    1194:	2300      	movs	r3, #0
    1196:	68fa      	ldr	r2, [r7, #12]
    1198:	4413      	add	r3, r2
    119a:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    119c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    119e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    11a0:	4413      	add	r3, r2
    11a2:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    11a4:	2300      	movs	r3, #0
    11a6:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    11a8:	e00e      	b.n	11c8 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    11aa:	68fb      	ldr	r3, [r7, #12]
    11ac:	2b00      	cmp	r3, #0
    11ae:	d005      	beq.n	11bc <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    11b0:	68fb      	ldr	r3, [r7, #12]
    11b2:	1c5a      	adds	r2, r3, #1
    11b4:	60fa      	str	r2, [r7, #12]
    11b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    11b8:	7812      	ldrb	r2, [r2, #0]
    11ba:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    11bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    11be:	3301      	adds	r3, #1
    11c0:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    11c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11c4:	3301      	adds	r3, #1
    11c6:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    11c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    11ca:	781b      	ldrb	r3, [r3, #0]
    11cc:	2b00      	cmp	r3, #0
    11ce:	d1ec      	bne.n	11aa <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    11d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11d2:	2b00      	cmp	r3, #0
    11d4:	f000 81a1 	beq.w	151a <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    11d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11da:	425b      	negs	r3, r3
    11dc:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    11de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    11e2:	429a      	cmp	r2, r3
    11e4:	f080 8199 	bcs.w	151a <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    11e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
    11ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    11ec:	1ad3      	subs	r3, r2, r3
    11ee:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    11f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    11f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    11f6:	4619      	mov	r1, r3
    11f8:	68f8      	ldr	r0, [r7, #12]
    11fa:	f7ff fd81 	bl	d00 <padbuffer>
    11fe:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    1200:	68fb      	ldr	r3, [r7, #12]
    1202:	2b00      	cmp	r3, #0
    1204:	d001      	beq.n	120a <am_util_stdio_vsprintf+0x2c2>
    1206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1208:	e000      	b.n	120c <am_util_stdio_vsprintf+0x2c4>
    120a:	2300      	movs	r3, #0
    120c:	68fa      	ldr	r2, [r7, #12]
    120e:	4413      	add	r3, r2
    1210:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    1212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1214:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1216:	4413      	add	r3, r2
    1218:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    121a:	2300      	movs	r3, #0
    121c:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    121e:	e17c      	b.n	151a <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    1220:	2301      	movs	r3, #1
    1222:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1226:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    122a:	2b00      	cmp	r3, #0
    122c:	d00a      	beq.n	1244 <am_util_stdio_vsprintf+0x2fc>
    122e:	687b      	ldr	r3, [r7, #4]
    1230:	3307      	adds	r3, #7
    1232:	f023 0307 	bic.w	r3, r3, #7
    1236:	f103 0208 	add.w	r2, r3, #8
    123a:	607a      	str	r2, [r7, #4]
    123c:	cb18      	ldmia	r3, {r3, r4}
    123e:	e007      	b.n	1250 <am_util_stdio_vsprintf+0x308>
    1240:	10001128 	.word	0x10001128
                                      va_arg(pArgs, uint32_t);
    1244:	687b      	ldr	r3, [r7, #4]
    1246:	1d1a      	adds	r2, r3, #4
    1248:	607a      	str	r2, [r7, #4]
    124a:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    124c:	f04f 0400 	mov.w	r4, #0
    1250:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    1254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1256:	2b00      	cmp	r3, #0
    1258:	d01e      	beq.n	1298 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    125a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    125e:	f7ff fc22 	bl	aa6 <ndigits_in_hex>
    1262:	4602      	mov	r2, r0
    1264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1266:	1a9b      	subs	r3, r3, r2
    1268:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    126a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    126e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1270:	4619      	mov	r1, r3
    1272:	68f8      	ldr	r0, [r7, #12]
    1274:	f7ff fd44 	bl	d00 <padbuffer>
    1278:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    127a:	68fb      	ldr	r3, [r7, #12]
    127c:	2b00      	cmp	r3, #0
    127e:	d001      	beq.n	1284 <am_util_stdio_vsprintf+0x33c>
    1280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1282:	e000      	b.n	1286 <am_util_stdio_vsprintf+0x33e>
    1284:	2300      	movs	r3, #0
    1286:	68fa      	ldr	r2, [r7, #12]
    1288:	4413      	add	r3, r2
    128a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    128c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    128e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1290:	4413      	add	r3, r2
    1292:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1294:	2300      	movs	r3, #0
    1296:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    1298:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    129c:	68fa      	ldr	r2, [r7, #12]
    129e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    12a2:	f7ff fcb2 	bl	c0a <uint64_to_hexstr>
    12a6:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    12a8:	68fb      	ldr	r3, [r7, #12]
    12aa:	2b00      	cmp	r3, #0
    12ac:	d003      	beq.n	12b6 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    12ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12b0:	68fa      	ldr	r2, [r7, #12]
    12b2:	4413      	add	r3, r2
    12b4:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    12b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    12ba:	4413      	add	r3, r2
    12bc:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    12be:	e12f      	b.n	1520 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    12c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    12c4:	2b00      	cmp	r3, #0
    12c6:	d008      	beq.n	12da <am_util_stdio_vsprintf+0x392>
    12c8:	687b      	ldr	r3, [r7, #4]
    12ca:	3307      	adds	r3, #7
    12cc:	f023 0307 	bic.w	r3, r3, #7
    12d0:	f103 0208 	add.w	r2, r3, #8
    12d4:	607a      	str	r2, [r7, #4]
    12d6:	cb18      	ldmia	r3, {r3, r4}
    12d8:	e005      	b.n	12e6 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    12da:	687b      	ldr	r3, [r7, #4]
    12dc:	1d1a      	adds	r2, r3, #4
    12de:	607a      	str	r2, [r7, #4]
    12e0:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    12e2:	f04f 0400 	mov.w	r4, #0
    12e6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    12ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12ec:	2b00      	cmp	r3, #0
    12ee:	d01e      	beq.n	132e <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    12f0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    12f4:	f7ff fb99 	bl	a2a <ndigits_in_u64>
    12f8:	4602      	mov	r2, r0
    12fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12fc:	1a9b      	subs	r3, r3, r2
    12fe:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1300:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1304:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1306:	4619      	mov	r1, r3
    1308:	68f8      	ldr	r0, [r7, #12]
    130a:	f7ff fcf9 	bl	d00 <padbuffer>
    130e:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1310:	68fb      	ldr	r3, [r7, #12]
    1312:	2b00      	cmp	r3, #0
    1314:	d001      	beq.n	131a <am_util_stdio_vsprintf+0x3d2>
    1316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1318:	e000      	b.n	131c <am_util_stdio_vsprintf+0x3d4>
    131a:	2300      	movs	r3, #0
    131c:	68fa      	ldr	r2, [r7, #12]
    131e:	4413      	add	r3, r2
    1320:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1324:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1326:	4413      	add	r3, r2
    1328:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    132a:	2300      	movs	r3, #0
    132c:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    132e:	68fa      	ldr	r2, [r7, #12]
    1330:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1334:	f7ff fc21 	bl	b7a <uint64_to_str>
    1338:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    133a:	68fb      	ldr	r3, [r7, #12]
    133c:	2b00      	cmp	r3, #0
    133e:	d003      	beq.n	1348 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    1340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1342:	68fa      	ldr	r2, [r7, #12]
    1344:	4413      	add	r3, r2
    1346:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    134a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    134c:	4413      	add	r3, r2
    134e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1350:	e0e6      	b.n	1520 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1352:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1356:	2b00      	cmp	r3, #0
    1358:	d008      	beq.n	136c <am_util_stdio_vsprintf+0x424>
    135a:	687b      	ldr	r3, [r7, #4]
    135c:	3307      	adds	r3, #7
    135e:	f023 0307 	bic.w	r3, r3, #7
    1362:	f103 0208 	add.w	r2, r3, #8
    1366:	607a      	str	r2, [r7, #4]
    1368:	cb18      	ldmia	r3, {r3, r4}
    136a:	e005      	b.n	1378 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    136c:	687b      	ldr	r3, [r7, #4]
    136e:	1d1a      	adds	r2, r3, #4
    1370:	607a      	str	r2, [r7, #4]
    1372:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1374:	ea4f 74e3 	mov.w	r4, r3, asr #31
    1378:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    137c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1380:	2b00      	cmp	r3, #0
    1382:	f174 0300 	sbcs.w	r3, r4, #0
    1386:	da0a      	bge.n	139e <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    1388:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    138c:	425b      	negs	r3, r3
    138e:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    1392:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    1396:	2301      	movs	r3, #1
    1398:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    139c:	e006      	b.n	13ac <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    139e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    13a2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    13a6:	2300      	movs	r3, #0
    13a8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    13ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13ae:	2b00      	cmp	r3, #0
    13b0:	d04a      	beq.n	1448 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    13b2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    13b6:	4618      	mov	r0, r3
    13b8:	4621      	mov	r1, r4
    13ba:	f7ff fb57 	bl	a6c <ndigits_in_i64>
    13be:	4602      	mov	r2, r0
    13c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13c2:	1a9b      	subs	r3, r3, r2
    13c4:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    13c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    13ca:	2b00      	cmp	r3, #0
    13cc:	d011      	beq.n	13f2 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    13ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13d0:	3b01      	subs	r3, #1
    13d2:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    13d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    13d8:	2b30      	cmp	r3, #48	; 0x30
    13da:	d10a      	bne.n	13f2 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    13dc:	68fb      	ldr	r3, [r7, #12]
    13de:	2b00      	cmp	r3, #0
    13e0:	d004      	beq.n	13ec <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    13e2:	68fb      	ldr	r3, [r7, #12]
    13e4:	1c5a      	adds	r2, r3, #1
    13e6:	60fa      	str	r2, [r7, #12]
    13e8:	222d      	movs	r2, #45	; 0x2d
    13ea:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    13ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    13ee:	3301      	adds	r3, #1
    13f0:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    13f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    13f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
    13f8:	4619      	mov	r1, r3
    13fa:	68f8      	ldr	r0, [r7, #12]
    13fc:	f7ff fc80 	bl	d00 <padbuffer>
    1400:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1402:	68fb      	ldr	r3, [r7, #12]
    1404:	2b00      	cmp	r3, #0
    1406:	d001      	beq.n	140c <am_util_stdio_vsprintf+0x4c4>
    1408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    140a:	e000      	b.n	140e <am_util_stdio_vsprintf+0x4c6>
    140c:	2300      	movs	r3, #0
    140e:	68fa      	ldr	r2, [r7, #12]
    1410:	4413      	add	r3, r2
    1412:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1416:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1418:	4413      	add	r3, r2
    141a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    141c:	2300      	movs	r3, #0
    141e:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    1420:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1424:	2b00      	cmp	r3, #0
    1426:	d01e      	beq.n	1466 <am_util_stdio_vsprintf+0x51e>
    1428:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    142c:	2b20      	cmp	r3, #32
    142e:	d11a      	bne.n	1466 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    1430:	68fb      	ldr	r3, [r7, #12]
    1432:	2b00      	cmp	r3, #0
    1434:	d004      	beq.n	1440 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    1436:	68fb      	ldr	r3, [r7, #12]
    1438:	1c5a      	adds	r2, r3, #1
    143a:	60fa      	str	r2, [r7, #12]
    143c:	222d      	movs	r2, #45	; 0x2d
    143e:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    1440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1442:	3301      	adds	r3, #1
    1444:	63fb      	str	r3, [r7, #60]	; 0x3c
    1446:	e00e      	b.n	1466 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    1448:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    144c:	2b00      	cmp	r3, #0
    144e:	d00a      	beq.n	1466 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    1450:	68fb      	ldr	r3, [r7, #12]
    1452:	2b00      	cmp	r3, #0
    1454:	d004      	beq.n	1460 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    1456:	68fb      	ldr	r3, [r7, #12]
    1458:	1c5a      	adds	r2, r3, #1
    145a:	60fa      	str	r2, [r7, #12]
    145c:	222d      	movs	r2, #45	; 0x2d
    145e:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    1460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1462:	3301      	adds	r3, #1
    1464:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1466:	68fa      	ldr	r2, [r7, #12]
    1468:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    146c:	f7ff fb85 	bl	b7a <uint64_to_str>
    1470:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1472:	68fb      	ldr	r3, [r7, #12]
    1474:	2b00      	cmp	r3, #0
    1476:	d003      	beq.n	1480 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    1478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    147a:	68fa      	ldr	r2, [r7, #12]
    147c:	4413      	add	r3, r2
    147e:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1482:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1484:	4413      	add	r3, r2
    1486:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1488:	e04a      	b.n	1520 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    148a:	68fb      	ldr	r3, [r7, #12]
    148c:	2b00      	cmp	r3, #0
    148e:	d046      	beq.n	151e <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    1490:	687b      	ldr	r3, [r7, #4]
    1492:	3307      	adds	r3, #7
    1494:	f023 0307 	bic.w	r3, r3, #7
    1498:	f103 0208 	add.w	r2, r3, #8
    149c:	607a      	str	r2, [r7, #4]
    149e:	cb18      	ldmia	r3, {r3, r4}
    14a0:	4618      	mov	r0, r3
    14a2:	4621      	mov	r1, r4
    14a4:	f7fe fe0c 	bl	c0 <__aeabi_d2f>
    14a8:	4603      	mov	r3, r0
    14aa:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    14ac:	68fb      	ldr	r3, [r7, #12]
    14ae:	2214      	movs	r2, #20
    14b0:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    14b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    14b4:	68f9      	ldr	r1, [r7, #12]
    14b6:	6978      	ldr	r0, [r7, #20]
    14b8:	f7ff fc48 	bl	d4c <ftoa>
    14bc:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    14be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    14c0:	2b00      	cmp	r3, #0
    14c2:	da14      	bge.n	14ee <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    14c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    14c6:	f1b3 3fff 	cmp.w	r3, #4294967295
    14ca:	d102      	bne.n	14d2 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    14cc:	4b1e      	ldr	r3, [pc, #120]	; (1548 <am_util_stdio_vsprintf+0x600>)
    14ce:	62bb      	str	r3, [r7, #40]	; 0x28
    14d0:	e008      	b.n	14e4 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    14d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    14d4:	f113 0f02 	cmn.w	r3, #2
    14d8:	d102      	bne.n	14e0 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    14da:	4b1c      	ldr	r3, [pc, #112]	; (154c <am_util_stdio_vsprintf+0x604>)
    14dc:	62bb      	str	r3, [r7, #40]	; 0x28
    14de:	e001      	b.n	14e4 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    14e0:	4b1b      	ldr	r3, [pc, #108]	; (1550 <am_util_stdio_vsprintf+0x608>)
    14e2:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    14e4:	68fb      	ldr	r3, [r7, #12]
    14e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    14e8:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    14ea:	2303      	movs	r3, #3
    14ec:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    14ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    14f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    14f2:	4413      	add	r3, r2
    14f4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    14f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    14f8:	68fa      	ldr	r2, [r7, #12]
    14fa:	4413      	add	r3, r2
    14fc:	60fb      	str	r3, [r7, #12]
                }
                break;
    14fe:	e00e      	b.n	151e <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    1500:	68fb      	ldr	r3, [r7, #12]
    1502:	2b00      	cmp	r3, #0
    1504:	d005      	beq.n	1512 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    1506:	68fb      	ldr	r3, [r7, #12]
    1508:	1c5a      	adds	r2, r3, #1
    150a:	60fa      	str	r2, [r7, #12]
    150c:	68ba      	ldr	r2, [r7, #8]
    150e:	7812      	ldrb	r2, [r2, #0]
    1510:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    1512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1514:	3301      	adds	r3, #1
    1516:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1518:	e002      	b.n	1520 <am_util_stdio_vsprintf+0x5d8>
                break;
    151a:	bf00      	nop
    151c:	e000      	b.n	1520 <am_util_stdio_vsprintf+0x5d8>
                break;
    151e:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    1520:	68bb      	ldr	r3, [r7, #8]
    1522:	3301      	adds	r3, #1
    1524:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    1526:	68bb      	ldr	r3, [r7, #8]
    1528:	781b      	ldrb	r3, [r3, #0]
    152a:	2b00      	cmp	r3, #0
    152c:	f47f ad17 	bne.w	f5e <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    1530:	68fb      	ldr	r3, [r7, #12]
    1532:	2b00      	cmp	r3, #0
    1534:	d002      	beq.n	153c <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    1536:	68fb      	ldr	r3, [r7, #12]
    1538:	2200      	movs	r2, #0
    153a:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    153c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    153e:	4618      	mov	r0, r3
    1540:	3754      	adds	r7, #84	; 0x54
    1542:	46bd      	mov	sp, r7
    1544:	bd90      	pop	{r4, r7, pc}
    1546:	bf00      	nop
    1548:	00302e30 	.word	0x00302e30
    154c:	00232e23 	.word	0x00232e23
    1550:	003f2e3f 	.word	0x003f2e3f

00001554 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    1554:	b40f      	push	{r0, r1, r2, r3}
    1556:	b580      	push	{r7, lr}
    1558:	b082      	sub	sp, #8
    155a:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    155c:	f107 0314 	add.w	r3, r7, #20
    1560:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    1562:	683a      	ldr	r2, [r7, #0]
    1564:	6939      	ldr	r1, [r7, #16]
    1566:	4808      	ldr	r0, [pc, #32]	; (1588 <am_util_stdio_printf+0x34>)
    1568:	f7ff fcee 	bl	f48 <am_util_stdio_vsprintf>
    156c:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    156e:	4b07      	ldr	r3, [pc, #28]	; (158c <am_util_stdio_printf+0x38>)
    1570:	681b      	ldr	r3, [r3, #0]
    1572:	4805      	ldr	r0, [pc, #20]	; (1588 <am_util_stdio_printf+0x34>)
    1574:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    1576:	687b      	ldr	r3, [r7, #4]
}
    1578:	4618      	mov	r0, r3
    157a:	3708      	adds	r7, #8
    157c:	46bd      	mov	sp, r7
    157e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    1582:	b004      	add	sp, #16
    1584:	4770      	bx	lr
    1586:	bf00      	nop
    1588:	10001028 	.word	0x10001028
    158c:	1000114c 	.word	0x1000114c

00001590 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    1590:	b580      	push	{r7, lr}
    1592:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    1594:	4802      	ldr	r0, [pc, #8]	; (15a0 <am_util_stdio_terminal_clear+0x10>)
    1596:	f7ff ffdd 	bl	1554 <am_util_stdio_printf>
}
    159a:	bf00      	nop
    159c:	bd80      	pop	{r7, pc}
    159e:	bf00      	nop
    15a0:	00002258 	.word	0x00002258

000015a4 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    15a4:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    15a6:	4b17      	ldr	r3, [pc, #92]	; (1604 <am_bsp_debug_printf_enable+0x60>)
    15a8:	681c      	ldr	r4, [r3, #0]
    15aa:	f014 0401 	ands.w	r4, r4, #1
{
    15ae:	b087      	sub	sp, #28
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    15b0:	d001      	beq.n	15b6 <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    15b2:	b007      	add	sp, #28
    15b4:	bd30      	pop	{r4, r5, pc}
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    15b6:	4a14      	ldr	r2, [pc, #80]	; (1608 <am_bsp_debug_printf_enable+0x64>)
    15b8:	4914      	ldr	r1, [pc, #80]	; (160c <am_bsp_debug_printf_enable+0x68>)
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    15ba:	4d15      	ldr	r5, [pc, #84]	; (1610 <am_bsp_debug_printf_enable+0x6c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    15bc:	6011      	str	r1, [r2, #0]
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    15be:	a806      	add	r0, sp, #24
    15c0:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    15c4:	f000 fdc8 	bl	2158 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    15c8:	f000 faf8 	bl	1bbc <am_hal_interrupt_master_disable>
    15cc:	4a11      	ldr	r2, [pc, #68]	; (1614 <am_bsp_debug_printf_enable+0x70>)
    15ce:	9000      	str	r0, [sp, #0]
    15d0:	4d11      	ldr	r5, [pc, #68]	; (1618 <am_bsp_debug_printf_enable+0x74>)
    15d2:	4912      	ldr	r1, [pc, #72]	; (161c <am_bsp_debug_printf_enable+0x78>)
    15d4:	2073      	movs	r0, #115	; 0x73
    15d6:	6010      	str	r0, [r2, #0]
    15d8:	682b      	ldr	r3, [r5, #0]
    15da:	4811      	ldr	r0, [pc, #68]	; (1620 <am_bsp_debug_printf_enable+0x7c>)
    15dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    15e0:	602b      	str	r3, [r5, #0]
    15e2:	6805      	ldr	r5, [r0, #0]
    15e4:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    15e8:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    15ec:	6003      	str	r3, [r0, #0]
    15ee:	6808      	ldr	r0, [r1, #0]
    15f0:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    15f4:	600d      	str	r5, [r1, #0]
    15f6:	6014      	str	r4, [r2, #0]
    15f8:	9800      	ldr	r0, [sp, #0]
    15fa:	f000 fae3 	bl	1bc4 <am_hal_interrupt_master_set>
}
    15fe:	b007      	add	sp, #28
    1600:	bd30      	pop	{r4, r5, pc}
    1602:	bf00      	nop
    1604:	1000113c 	.word	0x1000113c
    1608:	e0000e80 	.word	0xe0000e80
    160c:	00150511 	.word	0x00150511
    1610:	000f4240 	.word	0x000f4240
    1614:	40010060 	.word	0x40010060
    1618:	40010054 	.word	0x40010054
    161c:	40010108 	.word	0x40010108
    1620:	40010028 	.word	0x40010028

00001624 <am_bsp_debug_printf_disable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    1624:	b530      	push	{r4, r5, lr}
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1626:	4b14      	ldr	r3, [pc, #80]	; (1678 <am_bsp_debug_printf_disable+0x54>)
    1628:	681c      	ldr	r4, [r3, #0]
    162a:	f014 0401 	ands.w	r4, r4, #1
{
    162e:	b083      	sub	sp, #12
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1630:	d120      	bne.n	1674 <am_bsp_debug_printf_disable+0x50>
    }

    //
    // Disable the TPIU
    //
    am_hal_itm_not_busy();
    1632:	f000 faf7 	bl	1c24 <am_hal_itm_not_busy>
    am_hal_gpio_pin_config(AM_BSP_GPIO_ITM_SWO, AM_HAL_GPIO_OUTPUT);
    1636:	f000 fac1 	bl	1bbc <am_hal_interrupt_master_disable>
    163a:	4a10      	ldr	r2, [pc, #64]	; (167c <am_bsp_debug_printf_disable+0x58>)
    163c:	9001      	str	r0, [sp, #4]
    163e:	4d10      	ldr	r5, [pc, #64]	; (1680 <am_bsp_debug_printf_disable+0x5c>)
    1640:	4910      	ldr	r1, [pc, #64]	; (1684 <am_bsp_debug_printf_disable+0x60>)
    1642:	2073      	movs	r0, #115	; 0x73
    1644:	6010      	str	r0, [r2, #0]
    1646:	682b      	ldr	r3, [r5, #0]
    1648:	480f      	ldr	r0, [pc, #60]	; (1688 <am_bsp_debug_printf_disable+0x64>)
    164a:	f023 0c70 	bic.w	ip, r3, #112	; 0x70
    164e:	f04c 0320 	orr.w	r3, ip, #32
    1652:	602b      	str	r3, [r5, #0]
    1654:	6805      	ldr	r5, [r0, #0]
    1656:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    165a:	f44c 53c0 	orr.w	r3, ip, #6144	; 0x1800
    165e:	6003      	str	r3, [r0, #0]
    1660:	6808      	ldr	r0, [r1, #0]
    1662:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    1666:	600d      	str	r5, [r1, #0]
    1668:	6014      	str	r4, [r2, #0]
    166a:	9801      	ldr	r0, [sp, #4]
    166c:	f000 faaa 	bl	1bc4 <am_hal_interrupt_master_set>
    am_hal_tpiu_disable();
    1670:	f000 fdca 	bl	2208 <am_hal_tpiu_disable>
}
    1674:	b003      	add	sp, #12
    1676:	bd30      	pop	{r4, r5, pc}
    1678:	1000113c 	.word	0x1000113c
    167c:	40010060 	.word	0x40010060
    1680:	40010054 	.word	0x40010054
    1684:	40010108 	.word	0x40010108
    1688:	40010028 	.word	0x40010028

0000168c <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    168c:	f000 bad4 	b.w	1c38 <am_hal_itm_print>

00001690 <am_hal_adc_config>:
//! @return None.
//
//*****************************************************************************
void
am_hal_adc_config(am_hal_adc_config_t *psConfig)
{
    1690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //
    // Set general ADC configuration parameters.
    //
    AM_REG(ADC, CFG) = (psConfig->ui32Clock |
    1692:	e890 0088 	ldmia.w	r0, {r3, r7}
                        psConfig->ui32TriggerConfig |
                        psConfig->ui32Reference |
                        psConfig->ui32ClockMode |
                        psConfig->ui32PowerMode |
                        psConfig->ui32Repeat |
    1696:	6886      	ldr	r6, [r0, #8]
    1698:	68c5      	ldr	r5, [r0, #12]
    169a:	6904      	ldr	r4, [r0, #16]
    169c:	6941      	ldr	r1, [r0, #20]
    AM_REG(ADC, CFG) = (psConfig->ui32Clock |
    169e:	4a15      	ldr	r2, [pc, #84]	; (16f4 <am_hal_adc_config+0x64>)

    //
    // Grab the temperature trims.
    //
    priv_temp_trims.ui32.ui32CalibrationTemperature =
                  am_hal_flash_load_ui32(AM_HAL_ADC_CALIB_TEMP_ADDR);
    16a0:	4815      	ldr	r0, [pc, #84]	; (16f8 <am_hal_adc_config+0x68>)
    AM_REG(ADC, CFG) = (psConfig->ui32Clock |
    16a2:	433b      	orrs	r3, r7
                        psConfig->ui32Repeat |
    16a4:	f043 0301 	orr.w	r3, r3, #1
    16a8:	4333      	orrs	r3, r6
    16aa:	432b      	orrs	r3, r5
    16ac:	4323      	orrs	r3, r4
    16ae:	430b      	orrs	r3, r1
    AM_REG(ADC, CFG) = (psConfig->ui32Clock |
    16b0:	6013      	str	r3, [r2, #0]
                  am_hal_flash_load_ui32(AM_HAL_ADC_CALIB_TEMP_ADDR);
    16b2:	f000 fa4f 	bl	1b54 <am_hal_flash_load_ui32>
    priv_temp_trims.ui32.ui32CalibrationTemperature =
    16b6:	4f11      	ldr	r7, [pc, #68]	; (16fc <am_hal_adc_config+0x6c>)
    16b8:	6038      	str	r0, [r7, #0]
    priv_temp_trims.ui32.ui32CalibrationVoltage     =
                  am_hal_flash_load_ui32(AM_HAL_ADC_CALIB_AMBIENT_ADDR);
    16ba:	4811      	ldr	r0, [pc, #68]	; (1700 <am_hal_adc_config+0x70>)
    16bc:	f000 fa4a 	bl	1b54 <am_hal_flash_load_ui32>
    priv_temp_trims.ui32.ui32CalibrationVoltage     =
    16c0:	6078      	str	r0, [r7, #4]
    priv_temp_trims.ui32.ui32CalibrationOffset      =
                  am_hal_flash_load_ui32(AM_HAL_ADC_CALIB_ADC_OFFSET_ADDR);
    16c2:	4810      	ldr	r0, [pc, #64]	; (1704 <am_hal_adc_config+0x74>)
    16c4:	f000 fa46 	bl	1b54 <am_hal_flash_load_ui32>

    if ( (priv_temp_trims.ui32.ui32CalibrationTemperature == 0xffffffff)    ||
    16c8:	683a      	ldr	r2, [r7, #0]
    priv_temp_trims.ui32.ui32CalibrationOffset      =
    16ca:	60b8      	str	r0, [r7, #8]
    if ( (priv_temp_trims.ui32.ui32CalibrationTemperature == 0xffffffff)    ||
    16cc:	1c53      	adds	r3, r2, #1
    16ce:	d007      	beq.n	16e0 <am_hal_adc_config+0x50>
    16d0:	687e      	ldr	r6, [r7, #4]
    16d2:	1c73      	adds	r3, r6, #1
    16d4:	d004      	beq.n	16e0 <am_hal_adc_config+0x50>
         (priv_temp_trims.ui32.ui32CalibrationVoltage     == 0xffffffff)    ||
    16d6:	3001      	adds	r0, #1
    16d8:	d002      	beq.n	16e0 <am_hal_adc_config+0x50>
        priv_temp_trims.flt.fCalibrationOffset      = AM_HAL_ADC_CALIB_ADC_OFFSET_DEFAULT;
        priv_temp_trims.ui32.bMeasured = false;
    }
    else
    {
        priv_temp_trims.ui32.bMeasured = true;
    16da:	2001      	movs	r0, #1
    16dc:	7338      	strb	r0, [r7, #12]
    16de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        priv_temp_trims.flt.fCalibrationTemperature = AM_HAL_ADC_CALIB_TEMP_DEFAULT;
    16e0:	4d09      	ldr	r5, [pc, #36]	; (1708 <am_hal_adc_config+0x78>)
        priv_temp_trims.flt.fCalibrationVoltage     = AM_HAL_ADC_CALIB_AMBIENT_DEFAULT;
    16e2:	4c0a      	ldr	r4, [pc, #40]	; (170c <am_hal_adc_config+0x7c>)
        priv_temp_trims.flt.fCalibrationOffset      = AM_HAL_ADC_CALIB_ADC_OFFSET_DEFAULT;
    16e4:	490a      	ldr	r1, [pc, #40]	; (1710 <am_hal_adc_config+0x80>)
        priv_temp_trims.flt.fCalibrationTemperature = AM_HAL_ADC_CALIB_TEMP_DEFAULT;
    16e6:	603d      	str	r5, [r7, #0]
        priv_temp_trims.ui32.bMeasured = false;
    16e8:	2000      	movs	r0, #0
        priv_temp_trims.flt.fCalibrationVoltage     = AM_HAL_ADC_CALIB_AMBIENT_DEFAULT;
    16ea:	607c      	str	r4, [r7, #4]
        priv_temp_trims.flt.fCalibrationOffset      = AM_HAL_ADC_CALIB_ADC_OFFSET_DEFAULT;
    16ec:	60b9      	str	r1, [r7, #8]
    16ee:	7338      	strb	r0, [r7, #12]
    16f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    16f2:	bf00      	nop
    16f4:	50010000 	.word	0x50010000
    16f8:	50023010 	.word	0x50023010
    16fc:	1000112c 	.word	0x1000112c
    1700:	50023014 	.word	0x50023014
    1704:	50023018 	.word	0x50023018
    1708:	4395c000 	.word	0x4395c000
    170c:	3f839874 	.word	0x3f839874
    1710:	bb8c47a1 	.word	0xbb8c47a1

00001714 <am_hal_adc_slot_config>:
//! @return None.
//
//*****************************************************************************
void
am_hal_adc_slot_config(uint32_t ui32SlotNumber, uint32_t ui32SlotConfig)
{
    1714:	b538      	push	{r3, r4, r5, lr}
    uint32_t ui32RegOffset;

    //
    // Make sure we're accessing a real slot.
    //
    am_hal_debug_assert_msg((ui32SlotNumber & 0xFFFFFFFF0) == 0,
    1716:	f030 030f 	bics.w	r3, r0, #15
{
    171a:	4604      	mov	r4, r0
    171c:	460d      	mov	r5, r1
    am_hal_debug_assert_msg((ui32SlotNumber & 0xFFFFFFFF0) == 0,
    171e:	d004      	beq.n	172a <am_hal_adc_slot_config+0x16>
    1720:	4a04      	ldr	r2, [pc, #16]	; (1734 <am_hal_adc_slot_config+0x20>)
    1722:	4805      	ldr	r0, [pc, #20]	; (1738 <am_hal_adc_slot_config+0x24>)
    1724:	21f7      	movs	r1, #247	; 0xf7
    1726:	f000 fa13 	bl	1b50 <am_hal_debug_error>
                            "Trying to configure an ADC slot that doesn't exist.");

    //
    // Locate the correct register for this ADC slot.
    //
    ui32RegOffset = (AM_REG_ADCn(0) + AM_REG_ADC_SL0CFG_O + (4 * ui32SlotNumber));
    172a:	4b04      	ldr	r3, [pc, #16]	; (173c <am_hal_adc_slot_config+0x28>)
    172c:	4423      	add	r3, r4
    172e:	0098      	lsls	r0, r3, #2

    //
    // Write the register with the caller's configuration value.
    //
    AM_REGVAL(ui32RegOffset) = ui32SlotConfig;
    1730:	6005      	str	r5, [r0, #0]
    1732:	bd38      	pop	{r3, r4, r5, pc}
    1734:	0000226c 	.word	0x0000226c
    1738:	000022a0 	.word	0x000022a0
    173c:	14004003 	.word	0x14004003

00001740 <am_hal_adc_fifo_pop>:
    uint32_t ui32FIFOValue;

    //
    // Grab a value from the ADC FIFO.
    //
    ui32FIFOValue = AM_REG(ADC, FIFO);
    1740:	4b02      	ldr	r3, [pc, #8]	; (174c <am_hal_adc_fifo_pop+0xc>)

    //
    // Pop the FIFO.
    //
    AM_REG(ADC, FIFO) = 0;
    1742:	2200      	movs	r2, #0
    ui32FIFOValue = AM_REG(ADC, FIFO);
    1744:	6818      	ldr	r0, [r3, #0]
    AM_REG(ADC, FIFO) = 0;
    1746:	601a      	str	r2, [r3, #0]

    //
    // Return FIFO valid bits.
    //
    return ui32FIFOValue;
}
    1748:	4770      	bx	lr
    174a:	bf00      	nop
    174c:	50010038 	.word	0x50010038

00001750 <am_hal_adc_trigger>:
am_hal_adc_trigger(void)
{
    //
    // Write to the Software trigger register in the ADC.
    //
    AM_REG(ADC, SWT) = 0x37;
    1750:	4b01      	ldr	r3, [pc, #4]	; (1758 <am_hal_adc_trigger+0x8>)
    1752:	2237      	movs	r2, #55	; 0x37
    1754:	601a      	str	r2, [r3, #0]
    1756:	4770      	bx	lr
    1758:	50010008 	.word	0x50010008

0000175c <am_hal_adc_enable>:
am_hal_adc_enable(void)
{
    //
    // Enable the ADC.
    //
    AM_BFW(ADC, CFG, ADCEN, 0x1);
    175c:	4a02      	ldr	r2, [pc, #8]	; (1768 <am_hal_adc_enable+0xc>)
    175e:	6813      	ldr	r3, [r2, #0]
    1760:	f043 0001 	orr.w	r0, r3, #1
    1764:	6010      	str	r0, [r2, #0]
    1766:	4770      	bx	lr
    1768:	50010000 	.word	0x50010000

0000176c <am_hal_adc_int_enable>:
am_hal_adc_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupts.
    //
    AM_REG(ADC, INTEN) |= ui32Interrupt;
    176c:	4a02      	ldr	r2, [pc, #8]	; (1778 <am_hal_adc_int_enable+0xc>)
    176e:	6813      	ldr	r3, [r2, #0]
    1770:	4318      	orrs	r0, r3
    1772:	6010      	str	r0, [r2, #0]
    1774:	4770      	bx	lr
    1776:	bf00      	nop
    1778:	50010200 	.word	0x50010200

0000177c <am_hal_adc_int_clear>:
am_hal_adc_int_clear(uint32_t ui32Interrupt)
{
    //
    // Clear the interrupts.
    //
    AM_REG(ADC, INTCLR) = ui32Interrupt;
    177c:	4b01      	ldr	r3, [pc, #4]	; (1784 <am_hal_adc_int_clear+0x8>)
    177e:	6018      	str	r0, [r3, #0]
    1780:	4770      	bx	lr
    1782:	bf00      	nop
    1784:	50010208 	.word	0x50010208

00001788 <am_hal_adc_int_status_get>:
am_hal_adc_int_status_get(bool bEnabledOnly)
{
    //
    // Return the status.
    //
    if (bEnabledOnly)
    1788:	b910      	cbnz	r0, 1790 <am_hal_adc_int_status_get+0x8>
        u32RetVal &= AM_REG(ADC, INTSTAT);
        return u32RetVal;
    }
    else
    {
        return AM_REG(ADC, INTSTAT);
    178a:	4b04      	ldr	r3, [pc, #16]	; (179c <am_hal_adc_int_status_get+0x14>)
    178c:	6818      	ldr	r0, [r3, #0]
    }
}
    178e:	4770      	bx	lr
        uint32_t u32RetVal = AM_REG(ADC, INTEN);
    1790:	4a03      	ldr	r2, [pc, #12]	; (17a0 <am_hal_adc_int_status_get+0x18>)
        u32RetVal &= AM_REG(ADC, INTSTAT);
    1792:	4902      	ldr	r1, [pc, #8]	; (179c <am_hal_adc_int_status_get+0x14>)
        uint32_t u32RetVal = AM_REG(ADC, INTEN);
    1794:	6810      	ldr	r0, [r2, #0]
        u32RetVal &= AM_REG(ADC, INTSTAT);
    1796:	680b      	ldr	r3, [r1, #0]
    1798:	4018      	ands	r0, r3
        return u32RetVal;
    179a:	4770      	bx	lr
    179c:	50010204 	.word	0x50010204
    17a0:	50010200 	.word	0x50010200

000017a4 <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    17a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17a6:	4605      	mov	r5, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    17a8:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    17ac:	78ab      	ldrb	r3, [r5, #2]
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    17ae:	786c      	ldrb	r4, [r5, #1]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    17b0:	78ef      	ldrb	r7, [r5, #3]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    17b2:	792e      	ldrb	r6, [r5, #4]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    17b4:	79a9      	ldrb	r1, [r5, #6]
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    17b6:	009a      	lsls	r2, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    17b8:	0064      	lsls	r4, r4, #1
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    17ba:	f002 0204 	and.w	r2, r2, #4
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    17be:	f004 0402 	and.w	r4, r4, #2
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    17c2:	4314      	orrs	r4, r2
    17c4:	f047 0701 	orr.w	r7, r7, #1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    17c8:	79ea      	ldrb	r2, [r5, #7]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    17ca:	01f6      	lsls	r6, r6, #7
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    17cc:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    17ce:	b2f6      	uxtb	r6, r6
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    17d0:	7a2f      	ldrb	r7, [r5, #8]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    17d2:	0289      	lsls	r1, r1, #10
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    17d4:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    17d6:	f401 6180 	and.w	r1, r1, #1024	; 0x400
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    17da:	7a6e      	ldrb	r6, [r5, #9]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    17dc:	02d2      	lsls	r2, r2, #11
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    17de:	430c      	orrs	r4, r1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    17e0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    17e4:	7aa9      	ldrb	r1, [r5, #10]
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    17e6:	033f      	lsls	r7, r7, #12
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    17e8:	4314      	orrs	r4, r2
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    17ea:	b2bf      	uxth	r7, r7
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    17ec:	0436      	lsls	r6, r6, #16
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    17ee:	7aea      	ldrb	r2, [r5, #11]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    17f0:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    17f2:	0509      	lsls	r1, r1, #20
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    17f4:	f406 2770 	and.w	r7, r6, #983040	; 0xf0000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    17f8:	0612      	lsls	r2, r2, #24
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    17fa:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    17fc:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    1800:	009b      	lsls	r3, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    1802:	f002 7780 	and.w	r7, r2, #16777216	; 0x1000000
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1806:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    1808:	f003 0108 	and.w	r1, r3, #8
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    180c:	433c      	orrs	r4, r7
    180e:	430c      	orrs	r4, r1
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1810:	f000 fab4 	bl	1d7c <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1814:	482c      	ldr	r0, [pc, #176]	; (18c8 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1816:	4b2d      	ldr	r3, [pc, #180]	; (18cc <am_hal_cachectrl_enable+0x128>)
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1818:	6004      	str	r4, [r0, #0]
    181a:	2232      	movs	r2, #50	; 0x32
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    181c:	681e      	ldr	r6, [r3, #0]
    181e:	0777      	lsls	r7, r6, #29
    1820:	d41e      	bmi.n	1860 <am_hal_cachectrl_enable+0xbc>
    1822:	681f      	ldr	r7, [r3, #0]
    1824:	077e      	lsls	r6, r7, #29
    1826:	f102 32ff 	add.w	r2, r2, #4294967295
    182a:	d419      	bmi.n	1860 <am_hal_cachectrl_enable+0xbc>
    182c:	6819      	ldr	r1, [r3, #0]
    182e:	074f      	lsls	r7, r1, #29
    1830:	d416      	bmi.n	1860 <am_hal_cachectrl_enable+0xbc>
    1832:	6818      	ldr	r0, [r3, #0]
    1834:	0746      	lsls	r6, r0, #29
    1836:	d413      	bmi.n	1860 <am_hal_cachectrl_enable+0xbc>
    1838:	681e      	ldr	r6, [r3, #0]
    183a:	0770      	lsls	r0, r6, #29
    183c:	d410      	bmi.n	1860 <am_hal_cachectrl_enable+0xbc>
    183e:	681f      	ldr	r7, [r3, #0]
    1840:	0779      	lsls	r1, r7, #29
    1842:	d40d      	bmi.n	1860 <am_hal_cachectrl_enable+0xbc>
    1844:	6819      	ldr	r1, [r3, #0]
    1846:	074f      	lsls	r7, r1, #29
    1848:	d40a      	bmi.n	1860 <am_hal_cachectrl_enable+0xbc>
    184a:	6818      	ldr	r0, [r3, #0]
    184c:	0746      	lsls	r6, r0, #29
    184e:	d407      	bmi.n	1860 <am_hal_cachectrl_enable+0xbc>
    1850:	681e      	ldr	r6, [r3, #0]
    1852:	0770      	lsls	r0, r6, #29
    1854:	d404      	bmi.n	1860 <am_hal_cachectrl_enable+0xbc>
    1856:	681f      	ldr	r7, [r3, #0]
    1858:	0779      	lsls	r1, r7, #29
    185a:	d401      	bmi.n	1860 <am_hal_cachectrl_enable+0xbc>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    185c:	3a09      	subs	r2, #9
    185e:	d1dd      	bne.n	181c <am_hal_cachectrl_enable+0x78>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    1860:	4b1a      	ldr	r3, [pc, #104]	; (18cc <am_hal_cachectrl_enable+0x128>)
    1862:	681a      	ldr	r2, [r3, #0]
    1864:	f042 0101 	orr.w	r1, r2, #1
    1868:	6019      	str	r1, [r3, #0]
    186a:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    186c:	6818      	ldr	r0, [r3, #0]
    186e:	0740      	lsls	r0, r0, #29
    1870:	d41e      	bmi.n	18b0 <am_hal_cachectrl_enable+0x10c>
    1872:	681e      	ldr	r6, [r3, #0]
    1874:	0771      	lsls	r1, r6, #29
    1876:	f102 32ff 	add.w	r2, r2, #4294967295
    187a:	d419      	bmi.n	18b0 <am_hal_cachectrl_enable+0x10c>
    187c:	681f      	ldr	r7, [r3, #0]
    187e:	077f      	lsls	r7, r7, #29
    1880:	d416      	bmi.n	18b0 <am_hal_cachectrl_enable+0x10c>
    1882:	6819      	ldr	r1, [r3, #0]
    1884:	074e      	lsls	r6, r1, #29
    1886:	d413      	bmi.n	18b0 <am_hal_cachectrl_enable+0x10c>
    1888:	6818      	ldr	r0, [r3, #0]
    188a:	0740      	lsls	r0, r0, #29
    188c:	d410      	bmi.n	18b0 <am_hal_cachectrl_enable+0x10c>
    188e:	681e      	ldr	r6, [r3, #0]
    1890:	0771      	lsls	r1, r6, #29
    1892:	d40d      	bmi.n	18b0 <am_hal_cachectrl_enable+0x10c>
    1894:	681f      	ldr	r7, [r3, #0]
    1896:	077f      	lsls	r7, r7, #29
    1898:	d40a      	bmi.n	18b0 <am_hal_cachectrl_enable+0x10c>
    189a:	6819      	ldr	r1, [r3, #0]
    189c:	074e      	lsls	r6, r1, #29
    189e:	d407      	bmi.n	18b0 <am_hal_cachectrl_enable+0x10c>
    18a0:	6818      	ldr	r0, [r3, #0]
    18a2:	0740      	lsls	r0, r0, #29
    18a4:	d404      	bmi.n	18b0 <am_hal_cachectrl_enable+0x10c>
    18a6:	681e      	ldr	r6, [r3, #0]
    18a8:	0771      	lsls	r1, r6, #29
    18aa:	d401      	bmi.n	18b0 <am_hal_cachectrl_enable+0x10c>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    18ac:	3a09      	subs	r2, #9
    18ae:	d1dd      	bne.n	186c <am_hal_cachectrl_enable+0xc8>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    18b0:	796d      	ldrb	r5, [r5, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    18b2:	4f05      	ldr	r7, [pc, #20]	; (18c8 <am_hal_cachectrl_enable+0x124>)
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );
    18b4:	022b      	lsls	r3, r5, #8
    18b6:	f403 7100 	and.w	r1, r3, #512	; 0x200
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    18ba:	f403 7280 	and.w	r2, r3, #256	; 0x100
    18be:	4311      	orrs	r1, r2
    18c0:	430c      	orrs	r4, r1
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    18c2:	603c      	str	r4, [r7, #0]
    18c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18c6:	bf00      	nop
    18c8:	40018000 	.word	0x40018000
    18cc:	40018008 	.word	0x40018008

000018d0 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    18d0:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    18d2:	4604      	mov	r4, r0
    18d4:	b120      	cbz	r0, 18e0 <am_hal_clkgen_sysclk_select+0x10>
    18d6:	4a06      	ldr	r2, [pc, #24]	; (18f0 <am_hal_clkgen_sysclk_select+0x20>)
    18d8:	4806      	ldr	r0, [pc, #24]	; (18f4 <am_hal_clkgen_sysclk_select+0x24>)
    18da:	2153      	movs	r1, #83	; 0x53
    18dc:	f000 f938 	bl	1b50 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    18e0:	4b05      	ldr	r3, [pc, #20]	; (18f8 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the required operating value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    18e2:	4906      	ldr	r1, [pc, #24]	; (18fc <am_hal_clkgen_sysclk_select+0x2c>)
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    18e4:	2047      	movs	r0, #71	; 0x47

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    18e6:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    18e8:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    18ea:	600c      	str	r4, [r1, #0]
    AM_REG(CLKGEN, CLKKEY) = 0;
    18ec:	601a      	str	r2, [r3, #0]
    18ee:	bd10      	pop	{r4, pc}
    18f0:	000022c0 	.word	0x000022c0
    18f4:	000022f8 	.word	0x000022f8
    18f8:	40004014 	.word	0x40004014
    18fc:	40004018 	.word	0x40004018

00001900 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1900:	4b04      	ldr	r3, [pc, #16]	; (1914 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    1902:	4905      	ldr	r1, [pc, #20]	; (1918 <am_hal_clkgen_sysclk_get+0x18>)
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1904:	681a      	ldr	r2, [r3, #0]
            return 48000000;
    1906:	4805      	ldr	r0, [pc, #20]	; (191c <am_hal_clkgen_sysclk_get+0x1c>)
    switch ( ui32ClockSetting )
    1908:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    190c:	bf08      	it	eq
    190e:	4608      	moveq	r0, r1
    1910:	4770      	bx	lr
    1912:	bf00      	nop
    1914:	40004018 	.word	0x40004018
    1918:	02dc6c00 	.word	0x02dc6c00
    191c:	016e3600 	.word	0x016e3600

00001920 <am_hal_ctimer_config_single>:
//*****************************************************************************
void
am_hal_ctimer_config_single(uint32_t ui32TimerNumber,
                            uint32_t ui32TimerSegment,
                            uint32_t ui32ConfigVal)
{
    1920:	b5f0      	push	{r4, r5, r6, r7, lr}
    1922:	b083      	sub	sp, #12
    1924:	460d      	mov	r5, r1
    1926:	4614      	mov	r4, r2

    //
    // Find the correct register to write based on the timer number.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    1928:	0107      	lsls	r7, r0, #4

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    192a:	f000 f947 	bl	1bbc <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    192e:	4e33      	ldr	r6, [pc, #204]	; (19fc <am_hal_ctimer_config_single+0xdc>)
    AM_CRITICAL_BEGIN_ASM
    1930:	9001      	str	r0, [sp, #4]
    //
    // If we're working with TIMERB, we need to shift our configuration value
    // up by 16 bits.
    //

    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1932:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
    ui32WriteVal = AM_REGVAL(pui32ConfigReg);
    1936:	59ba      	ldr	r2, [r7, r6]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1938:	d05b      	beq.n	19f2 <am_hal_ctimer_config_single+0xd2>

    //
    // Replace part of the saved register value with the configuration value
    // from the caller.
    //
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
    193a:	ea22 0005 	bic.w	r0, r2, r5
    193e:	4320      	orrs	r0, r4

    //
    // If we're configuring both timers, we need to set the "link" bit.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_BOTH )
    1940:	3501      	adds	r5, #1
    {
        ui32WriteVal |= AM_HAL_CTIMER_LINK;
    1942:	bf08      	it	eq
    1944:	f040 4000 	orreq.w	r0, r0, #2147483648	; 0x80000000
    }

    //
    // Write our completed configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
    1948:	51b8      	str	r0, [r7, r6]
    ui32TimerASrc = AM_BFR(CTIMER, STCFG, CLKSEL);
    194a:	4b2d      	ldr	r3, [pc, #180]	; (1a00 <am_hal_ctimer_config_single+0xe0>)
    194c:	681d      	ldr	r5, [r3, #0]
    194e:	f005 0c0f 	and.w	ip, r5, #15
    if ( (ui32TimerASrc == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV16)   ||
    1952:	f10c 34ff 	add.w	r4, ip, #4294967295
    1956:	2c01      	cmp	r4, #1
    1958:	d941      	bls.n	19de <am_hal_ctimer_config_single+0xbe>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    195a:	4f28      	ldr	r7, [pc, #160]	; (19fc <am_hal_ctimer_config_single+0xdc>)
    195c:	683e      	ldr	r6, [r7, #0]
    195e:	f3c6 0e44 	ubfx	lr, r6, #1, #5
    1962:	f10e 32ff 	add.w	r2, lr, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1966:	f3c6 4044 	ubfx	r0, r6, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    196a:	2a04      	cmp	r2, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    196c:	f100 31ff 	add.w	r1, r0, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1970:	d935      	bls.n	19de <am_hal_ctimer_config_single+0xbe>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    1972:	2904      	cmp	r1, #4
    1974:	d933      	bls.n	19de <am_hal_ctimer_config_single+0xbe>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    1976:	4b23      	ldr	r3, [pc, #140]	; (1a04 <am_hal_ctimer_config_single+0xe4>)
    1978:	681d      	ldr	r5, [r3, #0]
    197a:	f3c5 0c44 	ubfx	ip, r5, #1, #5
    197e:	f10c 34ff 	add.w	r4, ip, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1982:	f3c5 4744 	ubfx	r7, r5, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1986:	2c04      	cmp	r4, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1988:	f107 36ff 	add.w	r6, r7, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    198c:	d927      	bls.n	19de <am_hal_ctimer_config_single+0xbe>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    198e:	2e04      	cmp	r6, #4
    1990:	d925      	bls.n	19de <am_hal_ctimer_config_single+0xbe>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    1992:	4a1d      	ldr	r2, [pc, #116]	; (1a08 <am_hal_ctimer_config_single+0xe8>)
    1994:	6810      	ldr	r0, [r2, #0]
    1996:	f3c0 0e44 	ubfx	lr, r0, #1, #5
    199a:	f10e 31ff 	add.w	r1, lr, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    199e:	f3c0 4344 	ubfx	r3, r0, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    19a2:	2904      	cmp	r1, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    19a4:	f103 35ff 	add.w	r5, r3, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    19a8:	d919      	bls.n	19de <am_hal_ctimer_config_single+0xbe>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    19aa:	2d04      	cmp	r5, #4
    19ac:	d917      	bls.n	19de <am_hal_ctimer_config_single+0xbe>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    19ae:	4c17      	ldr	r4, [pc, #92]	; (1a0c <am_hal_ctimer_config_single+0xec>)
    19b0:	6827      	ldr	r7, [r4, #0]
    19b2:	f3c7 0c44 	ubfx	ip, r7, #1, #5
    19b6:	f10c 36ff 	add.w	r6, ip, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    19ba:	f3c7 4244 	ubfx	r2, r7, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    19be:	2e04      	cmp	r6, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    19c0:	f102 30ff 	add.w	r0, r2, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    19c4:	d90b      	bls.n	19de <am_hal_ctimer_config_single+0xbe>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    19c6:	2804      	cmp	r0, #4
    19c8:	d909      	bls.n	19de <am_hal_ctimer_config_single+0xbe>
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    }
    else
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 1);
    19ca:	4911      	ldr	r1, [pc, #68]	; (1a10 <am_hal_ctimer_config_single+0xf0>)
    19cc:	680b      	ldr	r3, [r1, #0]
    19ce:	f043 0504 	orr.w	r5, r3, #4
    19d2:	600d      	str	r5, [r1, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    19d4:	9801      	ldr	r0, [sp, #4]
    19d6:	f000 f8f5 	bl	1bc4 <am_hal_interrupt_master_set>

} // am_hal_ctimer_config_single()
    19da:	b003      	add	sp, #12
    19dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    19de:	4c0c      	ldr	r4, [pc, #48]	; (1a10 <am_hal_ctimer_config_single+0xf0>)
    19e0:	6827      	ldr	r7, [r4, #0]
    19e2:	f027 0604 	bic.w	r6, r7, #4
    19e6:	6026      	str	r6, [r4, #0]
    AM_CRITICAL_END_ASM
    19e8:	9801      	ldr	r0, [sp, #4]
    19ea:	f000 f8eb 	bl	1bc4 <am_hal_interrupt_master_set>
} // am_hal_ctimer_config_single()
    19ee:	b003      	add	sp, #12
    19f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
    19f2:	b291      	uxth	r1, r2
    19f4:	ea41 4004 	orr.w	r0, r1, r4, lsl #16
    19f8:	e7a6      	b.n	1948 <am_hal_ctimer_config_single+0x28>
    19fa:	bf00      	nop
    19fc:	4000800c 	.word	0x4000800c
    1a00:	40008100 	.word	0x40008100
    1a04:	4000801c 	.word	0x4000801c
    1a08:	4000802c 	.word	0x4000802c
    1a0c:	4000803c 	.word	0x4000803c
    1a10:	40021020 	.word	0x40021020

00001a14 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1a14:	b570      	push	{r4, r5, r6, lr}
    1a16:	b082      	sub	sp, #8
    1a18:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    1a1a:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1a1c:	f000 f8ce 	bl	1bbc <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1a20:	4d07      	ldr	r5, [pc, #28]	; (1a40 <am_hal_ctimer_start+0x2c>)
    AM_CRITICAL_BEGIN_ASM
    1a22:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    1a24:	5971      	ldr	r1, [r6, r5]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    1a26:	f004 2308 	and.w	r3, r4, #134219776	; 0x8000800
    1a2a:	ea21 0003 	bic.w	r0, r1, r3
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    1a2e:	f004 1201 	and.w	r2, r4, #65537	; 0x10001
    1a32:	4302      	orrs	r2, r0
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    1a34:	5172      	str	r2, [r6, r5]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1a36:	9801      	ldr	r0, [sp, #4]
    1a38:	f000 f8c4 	bl	1bc4 <am_hal_interrupt_master_set>
} // am_hal_ctimer_start()
    1a3c:	b002      	add	sp, #8
    1a3e:	bd70      	pop	{r4, r5, r6, pc}
    1a40:	4000800c 	.word	0x4000800c

00001a44 <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1a44:	b570      	push	{r4, r5, r6, lr}
    1a46:	b082      	sub	sp, #8
    1a48:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    1a4a:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1a4c:	f000 f8b6 	bl	1bbc <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1a50:	4d05      	ldr	r5, [pc, #20]	; (1a68 <am_hal_ctimer_clear+0x24>)
    AM_CRITICAL_BEGIN_ASM
    1a52:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    1a54:	5971      	ldr	r1, [r6, r5]
    1a56:	f004 2008 	and.w	r0, r4, #134219776	; 0x8000800
    1a5a:	4308      	orrs	r0, r1
    1a5c:	5170      	str	r0, [r6, r5]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1a5e:	9801      	ldr	r0, [sp, #4]
    1a60:	f000 f8b0 	bl	1bc4 <am_hal_interrupt_master_set>
} // am_hal_ctimer_clear()
    1a64:	b002      	add	sp, #8
    1a66:	bd70      	pop	{r4, r5, r6, pc}
    1a68:	4000800c 	.word	0x4000800c

00001a6c <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1a70:	b082      	sub	sp, #8
    1a72:	4688      	mov	r8, r1
    1a74:	461f      	mov	r7, r3
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    1a76:	ea4f 1900 	mov.w	r9, r0, lsl #4
{
    1a7a:	4614      	mov	r4, r2
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1a7c:	f000 f89e 	bl	1bbc <am_hal_interrupt_master_disable>
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1a80:	f8df a098 	ldr.w	sl, [pc, #152]	; 1b1c <am_hal_ctimer_period_set+0xb0>
    AM_CRITICAL_BEGIN_ASM
    1a84:	9001      	str	r0, [sp, #4]
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1a86:	f518 3f80 	cmn.w	r8, #65536	; 0x10000
                                    AM_REG_CTIMER_CMPRA0_O +
    1a8a:	4d21      	ldr	r5, [pc, #132]	; (1b10 <am_hal_ctimer_period_set+0xa4>)
                                    AM_REG_CTIMER_CMPRB0_O +
    1a8c:	4e21      	ldr	r6, [pc, #132]	; (1b14 <am_hal_ctimer_period_set+0xa8>)
    ui32Mode = *pui32ControlReg;
    1a8e:	f859 300a 	ldr.w	r3, [r9, sl]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1a92:	d01b      	beq.n	1acc <am_hal_ctimer_period_set+0x60>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1a94:	f403 70c0 	and.w	r0, r3, #384	; 0x180
    1a98:	2880      	cmp	r0, #128	; 0x80
    1a9a:	d01c      	beq.n	1ad6 <am_hal_ctimer_period_set+0x6a>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1a9c:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1aa0:	2300      	movs	r3, #0
    1aa2:	45b8      	cmp	r8, r7
        ui32Comp1 = 0;
    1aa4:	461a      	mov	r2, r3
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1aa6:	d01d      	beq.n	1ae4 <am_hal_ctimer_period_set+0x78>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1aa8:	491b      	ldr	r1, [pc, #108]	; (1b18 <am_hal_ctimer_period_set+0xac>)
    1aaa:	4588      	cmp	r8, r1
    1aac:	d025      	beq.n	1afa <am_hal_ctimer_period_set+0x8e>
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1 >> 16));
    1aae:	400a      	ands	r2, r1
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1ab0:	b2a0      	uxth	r0, r4
    1ab2:	4303      	orrs	r3, r0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1ab4:	ea42 4414 	orr.w	r4, r2, r4, lsr #16
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1ab8:	f849 3005 	str.w	r3, [r9, r5]
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1abc:	f849 4006 	str.w	r4, [r9, r6]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1ac0:	9801      	ldr	r0, [sp, #4]
    1ac2:	f000 f87f 	bl	1bc4 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    1ac6:	b002      	add	sp, #8
    1ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ui32Mode = ui32Mode >> 16;
    1acc:	0c19      	lsrs	r1, r3, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1ace:	f401 70c0 	and.w	r0, r1, #384	; 0x180
    1ad2:	2880      	cmp	r0, #128	; 0x80
    1ad4:	d110      	bne.n	1af8 <am_hal_ctimer_period_set+0x8c>
    1ad6:	0423      	lsls	r3, r4, #16
        ui32Comp1 = ui32Period;
    1ad8:	4622      	mov	r2, r4
        ui32Comp0 = ui32Period - ui32OnTime;
    1ada:	1be4      	subs	r4, r4, r7
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1adc:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1ae0:	45b8      	cmp	r8, r7
    1ae2:	d1e1      	bne.n	1aa8 <am_hal_ctimer_period_set+0x3c>
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1ae4:	b2a6      	uxth	r6, r4
    1ae6:	4333      	orrs	r3, r6
    1ae8:	f849 3005 	str.w	r3, [r9, r5]
    AM_CRITICAL_END_ASM
    1aec:	9801      	ldr	r0, [sp, #4]
    1aee:	f000 f869 	bl	1bc4 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    1af2:	b002      	add	sp, #8
    1af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1af8:	2300      	movs	r3, #0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1afa:	b2a5      	uxth	r5, r4
    1afc:	432b      	orrs	r3, r5
    1afe:	f849 3006 	str.w	r3, [r9, r6]
    AM_CRITICAL_END_ASM
    1b02:	9801      	ldr	r0, [sp, #4]
    1b04:	f000 f85e 	bl	1bc4 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    1b08:	b002      	add	sp, #8
    1b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1b0e:	bf00      	nop
    1b10:	40008004 	.word	0x40008004
    1b14:	40008008 	.word	0x40008008
    1b18:	ffff0000 	.word	0xffff0000
    1b1c:	4000800c 	.word	0x4000800c

00001b20 <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    1b20:	b510      	push	{r4, lr}
    1b22:	b082      	sub	sp, #8
    1b24:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1b26:	f000 f849 	bl	1bbc <am_hal_interrupt_master_disable>

    //
    // Enable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    1b2a:	4b05      	ldr	r3, [pc, #20]	; (1b40 <am_hal_ctimer_int_enable+0x20>)
    AM_CRITICAL_BEGIN_ASM
    1b2c:	9001      	str	r0, [sp, #4]
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    1b2e:	6818      	ldr	r0, [r3, #0]
    1b30:	4320      	orrs	r0, r4
    1b32:	6018      	str	r0, [r3, #0]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1b34:	9801      	ldr	r0, [sp, #4]
    1b36:	f000 f845 	bl	1bc4 <am_hal_interrupt_master_set>
} // am_hal_ctimer_int_enable()
    1b3a:	b002      	add	sp, #8
    1b3c:	bd10      	pop	{r4, pc}
    1b3e:	bf00      	nop
    1b40:	40008200 	.word	0x40008200

00001b44 <am_hal_ctimer_int_clear>:
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTCLR) = ui32Interrupt;
    1b44:	4b01      	ldr	r3, [pc, #4]	; (1b4c <am_hal_ctimer_int_clear+0x8>)
    1b46:	6018      	str	r0, [r3, #0]
    1b48:	4770      	bx	lr
    1b4a:	bf00      	nop
    1b4c:	40008208 	.word	0x40008208

00001b50 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    1b50:	e7fe      	b.n	1b50 <am_hal_debug_error>
    1b52:	bf00      	nop

00001b54 <am_hal_flash_load_ui32>:
//
//*****************************************************************************
uint32_t
am_hal_flash_load_ui32(uint32_t ui32Address)
{
    return g_am_hal_flash.flash_util_read_word((uint32_t*)ui32Address);
    1b54:	4b00      	ldr	r3, [pc, #0]	; (1b58 <am_hal_flash_load_ui32+0x4>)
    1b56:	4718      	bx	r3
    1b58:	08000075 	.word	0x08000075

00001b5c <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1b5c:	4b00      	ldr	r3, [pc, #0]	; (1b60 <am_hal_flash_delay+0x4>)
    1b5e:	4718      	bx	r3
    1b60:	0800009d 	.word	0x0800009d

00001b64 <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    1b64:	280f      	cmp	r0, #15
    1b66:	d80b      	bhi.n	1b80 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    1b68:	2805      	cmp	r0, #5
    1b6a:	d013      	beq.n	1b94 <am_hal_interrupt_enable+0x30>
    1b6c:	2806      	cmp	r0, #6
    1b6e:	d017      	beq.n	1ba0 <am_hal_interrupt_enable+0x3c>
    1b70:	2804      	cmp	r0, #4
    1b72:	d104      	bne.n	1b7e <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    1b74:	4a0d      	ldr	r2, [pc, #52]	; (1bac <am_hal_interrupt_enable+0x48>)
    1b76:	6813      	ldr	r3, [r2, #0]
    1b78:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    1b7c:	6010      	str	r0, [r2, #0]
    1b7e:	4770      	bx	lr
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    1b80:	f1a0 0310 	sub.w	r3, r0, #16
    1b84:	f003 0c1f 	and.w	ip, r3, #31
    1b88:	2001      	movs	r0, #1
    1b8a:	4909      	ldr	r1, [pc, #36]	; (1bb0 <am_hal_interrupt_enable+0x4c>)
    1b8c:	fa00 f20c 	lsl.w	r2, r0, ip
    1b90:	600a      	str	r2, [r1, #0]
    1b92:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    1b94:	4805      	ldr	r0, [pc, #20]	; (1bac <am_hal_interrupt_enable+0x48>)
    1b96:	6801      	ldr	r1, [r0, #0]
    1b98:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    1b9c:	6002      	str	r2, [r0, #0]
            break;
    1b9e:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    1ba0:	4902      	ldr	r1, [pc, #8]	; (1bac <am_hal_interrupt_enable+0x48>)
    1ba2:	680a      	ldr	r2, [r1, #0]
    1ba4:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    1ba8:	600b      	str	r3, [r1, #0]
            break;
    1baa:	4770      	bx	lr
    1bac:	e000ed24 	.word	0xe000ed24
    1bb0:	e000e100 	.word	0xe000e100

00001bb4 <am_hal_interrupt_master_enable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1bb4:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    1bb8:	b662      	cpsie	i
    __asm("    bx lr");
    1bba:	4770      	bx	lr

00001bbc <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1bbc:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    1bc0:	b672      	cpsid	i
    __asm("    bx lr");
    1bc2:	4770      	bx	lr

00001bc4 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    1bc4:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    1bc8:	4770      	bx	lr
    1bca:	bf00      	nop

00001bcc <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    1bcc:	4b0d      	ldr	r3, [pc, #52]	; (1c04 <am_hal_itm_enable+0x38>)
    1bce:	6818      	ldr	r0, [r3, #0]
    1bd0:	07c2      	lsls	r2, r0, #31
    1bd2:	d416      	bmi.n	1c02 <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    1bd4:	4a0c      	ldr	r2, [pc, #48]	; (1c08 <am_hal_itm_enable+0x3c>)
    1bd6:	6811      	ldr	r1, [r2, #0]
{
    1bd8:	b430      	push	{r4, r5}
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    1bda:	f041 7480 	orr.w	r4, r1, #16777216	; 0x1000000
    1bde:	6014      	str	r4, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    1be0:	6815      	ldr	r5, [r2, #0]
    1be2:	01eb      	lsls	r3, r5, #7
    1be4:	d5fc      	bpl.n	1be0 <am_hal_itm_enable+0x14>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    1be6:	4809      	ldr	r0, [pc, #36]	; (1c0c <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    1be8:	4c09      	ldr	r4, [pc, #36]	; (1c10 <am_hal_itm_enable+0x44>)
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    1bea:	4d0a      	ldr	r5, [pc, #40]	; (1c14 <am_hal_itm_enable+0x48>)
    1bec:	6005      	str	r5, [r0, #0]
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    1bee:	250f      	movs	r5, #15
    1bf0:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    1bf2:	bc30      	pop	{r4, r5}
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1bf4:	4908      	ldr	r1, [pc, #32]	; (1c18 <am_hal_itm_enable+0x4c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1bf6:	4b09      	ldr	r3, [pc, #36]	; (1c1c <am_hal_itm_enable+0x50>)
    1bf8:	4a09      	ldr	r2, [pc, #36]	; (1c20 <am_hal_itm_enable+0x54>)
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1bfa:	f04f 30ff 	mov.w	r0, #4294967295
    1bfe:	6008      	str	r0, [r1, #0]
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1c00:	601a      	str	r2, [r3, #0]
}
    1c02:	4770      	bx	lr
    1c04:	1000113c 	.word	0x1000113c
    1c08:	e000edfc 	.word	0xe000edfc
    1c0c:	e0000fb0 	.word	0xe0000fb0
    1c10:	e0000e40 	.word	0xe0000e40
    1c14:	c5acce55 	.word	0xc5acce55
    1c18:	e0000e00 	.word	0xe0000e00
    1c1c:	e0000e80 	.word	0xe0000e80
    1c20:	00150511 	.word	0x00150511

00001c24 <am_hal_itm_not_busy>:
am_hal_itm_not_busy(void)
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
    while (AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1));
    1c24:	4a03      	ldr	r2, [pc, #12]	; (1c34 <am_hal_itm_not_busy+0x10>)
    1c26:	6813      	ldr	r3, [r2, #0]
    1c28:	021b      	lsls	r3, r3, #8
    1c2a:	d4fc      	bmi.n	1c26 <am_hal_itm_not_busy+0x2>

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1c2c:	f44f 7047 	mov.w	r0, #796	; 0x31c
    1c30:	f7ff bf94 	b.w	1b5c <am_hal_flash_delay>
    1c34:	e0000e80 	.word	0xe0000e80

00001c38 <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1c38:	7803      	ldrb	r3, [r0, #0]
    1c3a:	b1b3      	cbz	r3, 1c6a <am_hal_itm_print+0x32>
{
    1c3c:	b410      	push	{r4}
    1c3e:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    1c40:	2400      	movs	r4, #0
    1c42:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    1c46:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    1c48:	2900      	cmp	r1, #0
    1c4a:	d1fa      	bne.n	1c42 <am_hal_itm_print+0xa>
    1c4c:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    1c4e:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    1c52:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    1c56:	f8dc 3000 	ldr.w	r3, [ip]
    1c5a:	2b00      	cmp	r3, #0
    1c5c:	d0fb      	beq.n	1c56 <am_hal_itm_print+0x1e>
    while (ui32Length)
    1c5e:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    1c60:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    1c64:	d1f5      	bne.n	1c52 <am_hal_itm_print+0x1a>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    1c66:	f85d 4b04 	ldr.w	r4, [sp], #4
    1c6a:	4770      	bx	lr

00001c6c <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1c6c:	490d      	ldr	r1, [pc, #52]	; (1ca4 <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1c6e:	4b0e      	ldr	r3, [pc, #56]	; (1ca8 <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1c70:	4a0e      	ldr	r2, [pc, #56]	; (1cac <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1c72:	681b      	ldr	r3, [r3, #0]
{
    1c74:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1c76:	680d      	ldr	r5, [r1, #0]
    1c78:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1c7a:	6815      	ldr	r5, [r2, #0]
    1c7c:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1c7e:	4c0c      	ldr	r4, [pc, #48]	; (1cb0 <am_hal_mcuctrl_fault_status+0x44>)
    1c80:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1c82:	4329      	orrs	r1, r5
    1c84:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1c86:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1c88:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1c8c:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1c8e:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1c90:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1c94:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1c98:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1c9a:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1c9c:	6142      	str	r2, [r0, #20]
}
    1c9e:	bc70      	pop	{r4, r5, r6}
    1ca0:	4770      	bx	lr
    1ca2:	bf00      	nop
    1ca4:	400201c4 	.word	0x400201c4
    1ca8:	400201cc 	.word	0x400201cc
    1cac:	400201c0 	.word	0x400201c0
    1cb0:	400201c8 	.word	0x400201c8

00001cb4 <am_hal_pwrctrl_periph_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    1cb4:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1cb6:	4604      	mov	r4, r0
{
    1cb8:	b082      	sub	sp, #8
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1cba:	b1b8      	cbz	r0, 1cec <am_hal_pwrctrl_periph_enable+0x38>
    1cbc:	1e43      	subs	r3, r0, #1
    1cbe:	4203      	tst	r3, r0
    1cc0:	d114      	bne.n	1cec <am_hal_pwrctrl_periph_enable+0x38>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1cc2:	f7ff ff7b 	bl	1bbc <am_hal_interrupt_master_disable>

    //
    // Enable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    1cc6:	4a18      	ldr	r2, [pc, #96]	; (1d28 <am_hal_pwrctrl_periph_enable+0x74>)
    AM_CRITICAL_BEGIN_ASM
    1cc8:	9001      	str	r0, [sp, #4]
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    1cca:	6810      	ldr	r0, [r2, #0]
    1ccc:	4320      	orrs	r0, r4
    1cce:	6010      	str	r0, [r2, #0]

    //
    // End Critical Section.
    //
    AM_CRITICAL_END_ASM
    1cd0:	9801      	ldr	r0, [sp, #4]
    1cd2:	f7ff ff77 	bl	1bc4 <am_hal_interrupt_master_set>

    //
    // Wait for the power to stablize.  Using a simple delay loop is more
    // power efficient than a polling loop.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);
    1cd6:	200e      	movs	r0, #14
    1cd8:	f7ff ff40 	bl	1b5c <am_hal_flash_delay>

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    1cdc:	f014 0f0e 	tst.w	r4, #14
    1ce0:	d10a      	bne.n	1cf8 <am_hal_pwrctrl_periph_enable+0x44>
    1ce2:	f014 0f70 	tst.w	r4, #112	; 0x70
    1ce6:	d00e      	beq.n	1d06 <am_hal_pwrctrl_periph_enable+0x52>
    1ce8:	2408      	movs	r4, #8
    1cea:	e006      	b.n	1cfa <am_hal_pwrctrl_periph_enable+0x46>
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1cec:	4a0f      	ldr	r2, [pc, #60]	; (1d2c <am_hal_pwrctrl_periph_enable+0x78>)
    1cee:	4810      	ldr	r0, [pc, #64]	; (1d30 <am_hal_pwrctrl_periph_enable+0x7c>)
    1cf0:	2160      	movs	r1, #96	; 0x60
    1cf2:	f7ff ff2d 	bl	1b50 <am_hal_debug_error>
    1cf6:	e7e4      	b.n	1cc2 <am_hal_pwrctrl_periph_enable+0xe>
    POLL_PWRSTATUS(ui32Peripheral);
    1cf8:	2404      	movs	r4, #4
    1cfa:	4a0e      	ldr	r2, [pc, #56]	; (1d34 <am_hal_pwrctrl_periph_enable+0x80>)
    1cfc:	6813      	ldr	r3, [r2, #0]
    1cfe:	421c      	tst	r4, r3
    1d00:	d0fc      	beq.n	1cfc <am_hal_pwrctrl_periph_enable+0x48>
}
    1d02:	b002      	add	sp, #8
    1d04:	bd10      	pop	{r4, pc}
    POLL_PWRSTATUS(ui32Peripheral);
    1d06:	f240 1181 	movw	r1, #385	; 0x181
    1d0a:	420c      	tst	r4, r1
    1d0c:	d108      	bne.n	1d20 <am_hal_pwrctrl_periph_enable+0x6c>
    1d0e:	05a3      	lsls	r3, r4, #22
    1d10:	d408      	bmi.n	1d24 <am_hal_pwrctrl_periph_enable+0x70>
    1d12:	f414 6f80 	tst.w	r4, #1024	; 0x400
    1d16:	bf14      	ite	ne
    1d18:	2410      	movne	r4, #16
    1d1a:	f04f 34ff 	moveq.w	r4, #4294967295
    1d1e:	e7ec      	b.n	1cfa <am_hal_pwrctrl_periph_enable+0x46>
    1d20:	2402      	movs	r4, #2
    1d22:	e7ea      	b.n	1cfa <am_hal_pwrctrl_periph_enable+0x46>
    1d24:	2480      	movs	r4, #128	; 0x80
    1d26:	e7e8      	b.n	1cfa <am_hal_pwrctrl_periph_enable+0x46>
    1d28:	40021008 	.word	0x40021008
    1d2c:	00002310 	.word	0x00002310
    1d30:	00002344 	.word	0x00002344
    1d34:	40021014 	.word	0x40021014

00001d38 <am_hal_pwrctrl_periph_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_disable(uint32_t ui32Peripheral)
{
    1d38:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1d3a:	4604      	mov	r4, r0
{
    1d3c:	b082      	sub	sp, #8
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1d3e:	b110      	cbz	r0, 1d46 <am_hal_pwrctrl_periph_disable+0xe>
    1d40:	1e43      	subs	r3, r0, #1
    1d42:	4203      	tst	r3, r0
    1d44:	d004      	beq.n	1d50 <am_hal_pwrctrl_periph_disable+0x18>
    1d46:	4a0a      	ldr	r2, [pc, #40]	; (1d70 <am_hal_pwrctrl_periph_disable+0x38>)
    1d48:	480a      	ldr	r0, [pc, #40]	; (1d74 <am_hal_pwrctrl_periph_disable+0x3c>)
    1d4a:	2190      	movs	r1, #144	; 0x90
    1d4c:	f7ff ff00 	bl	1b50 <am_hal_debug_error>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1d50:	f7ff ff34 	bl	1bbc <am_hal_interrupt_master_disable>

    //
    // Disable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) &= ~ui32Peripheral;
    1d54:	4a08      	ldr	r2, [pc, #32]	; (1d78 <am_hal_pwrctrl_periph_disable+0x40>)
    AM_CRITICAL_BEGIN_ASM
    1d56:	9001      	str	r0, [sp, #4]
    AM_REG(PWRCTRL, DEVICEEN) &= ~ui32Peripheral;
    1d58:	6810      	ldr	r0, [r2, #0]
    1d5a:	ea20 0104 	bic.w	r1, r0, r4
    1d5e:	6011      	str	r1, [r2, #0]

    //
    // End critical section.
    //
    AM_CRITICAL_END_ASM
    1d60:	9801      	ldr	r0, [sp, #4]
    1d62:	f7ff ff2f 	bl	1bc4 <am_hal_interrupt_master_set>

    //
    // Wait for the power to stablize
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEDIS_DELAYCYCLES / 3);
    1d66:	200e      	movs	r0, #14
    1d68:	f7ff fef8 	bl	1b5c <am_hal_flash_delay>
}
    1d6c:	b002      	add	sp, #8
    1d6e:	bd10      	pop	{r4, pc}
    1d70:	00002310 	.word	0x00002310
    1d74:	00002344 	.word	0x00002344
    1d78:	40021008 	.word	0x40021008

00001d7c <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1d7c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
{
    1d80:	b430      	push	{r4, r5}
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1d82:	d03a      	beq.n	1dfa <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    1d84:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    1d88:	f000 809d 	beq.w	1ec6 <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    1d8c:	2801      	cmp	r0, #1
    1d8e:	f000 809d 	beq.w	1ecc <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    1d92:	2803      	cmp	r0, #3
    1d94:	f000 80a6 	beq.w	1ee4 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    1d98:	2807      	cmp	r0, #7
    1d9a:	f000 809c 	beq.w	1ed6 <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    1d9e:	280f      	cmp	r0, #15
    1da0:	f000 80a5 	beq.w	1eee <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    1da4:	281f      	cmp	r0, #31
    1da6:	f000 80b0 	beq.w	1f0a <am_hal_pwrctrl_memory_enable+0x18e>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    1daa:	283f      	cmp	r0, #63	; 0x3f
    1dac:	f000 80b4 	beq.w	1f18 <am_hal_pwrctrl_memory_enable+0x19c>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    1db0:	287f      	cmp	r0, #127	; 0x7f
    1db2:	f000 80b8 	beq.w	1f26 <am_hal_pwrctrl_memory_enable+0x1aa>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    1db6:	28ff      	cmp	r0, #255	; 0xff
    1db8:	f000 80a0 	beq.w	1efc <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    1dbc:	f240 13ff 	movw	r3, #511	; 0x1ff
    1dc0:	4298      	cmp	r0, r3
    1dc2:	f000 80b7 	beq.w	1f34 <am_hal_pwrctrl_memory_enable+0x1b8>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    1dc6:	f240 31ff 	movw	r1, #1023	; 0x3ff
    1dca:	4288      	cmp	r0, r1
    1dcc:	f000 80b8 	beq.w	1f40 <am_hal_pwrctrl_memory_enable+0x1c4>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    1dd0:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1dd4:	4290      	cmp	r0, r2
    1dd6:	d00e      	beq.n	1df6 <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    1dd8:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    1ddc:	f000 80b6 	beq.w	1f4c <am_hal_pwrctrl_memory_enable+0x1d0>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    1de0:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    1de4:	42a0      	cmp	r0, r4
    1de6:	f000 80b4 	beq.w	1f52 <am_hal_pwrctrl_memory_enable+0x1d6>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    1dea:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    1dee:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    1df2:	4560      	cmp	r0, ip
    1df4:	d132      	bne.n	1e5c <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    1df6:	495b      	ldr	r1, [pc, #364]	; (1f64 <am_hal_pwrctrl_memory_enable+0x1e8>)
    1df8:	e066      	b.n	1ec8 <am_hal_pwrctrl_memory_enable+0x14c>
    1dfa:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    1dfe:	2340      	movs	r3, #64	; 0x40
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    1e00:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1e02:	4c59      	ldr	r4, [pc, #356]	; (1f68 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1e04:	6825      	ldr	r5, [r4, #0]
    1e06:	402a      	ands	r2, r5
    1e08:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    1e0a:	4a57      	ldr	r2, [pc, #348]	; (1f68 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1e0c:	6814      	ldr	r4, [r2, #0]
    1e0e:	4320      	orrs	r0, r4
    1e10:	6010      	str	r0, [r2, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    1e12:	2b00      	cmp	r3, #0
    1e14:	d029      	beq.n	1e6a <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1e16:	4d55      	ldr	r5, [pc, #340]	; (1f6c <am_hal_pwrctrl_memory_enable+0x1f0>)
    1e18:	6828      	ldr	r0, [r5, #0]
        while ( --i32TOcnt              &&
    1e1a:	4218      	tst	r0, r3
    1e1c:	bf18      	it	ne
    1e1e:	20c6      	movne	r0, #198	; 0xc6
    1e20:	d01f      	beq.n	1e62 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1e22:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1e24:	421a      	tst	r2, r3
    1e26:	d01c      	beq.n	1e62 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1e28:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1e2a:	421c      	tst	r4, r3
    1e2c:	d019      	beq.n	1e62 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1e2e:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1e30:	421a      	tst	r2, r3
    1e32:	d016      	beq.n	1e62 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1e34:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1e36:	421c      	tst	r4, r3
    1e38:	d013      	beq.n	1e62 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1e3a:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1e3c:	421a      	tst	r2, r3
    1e3e:	d010      	beq.n	1e62 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1e40:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1e42:	421c      	tst	r4, r3
    1e44:	d00d      	beq.n	1e62 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1e46:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1e48:	421a      	tst	r2, r3
    1e4a:	d00a      	beq.n	1e62 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1e4c:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1e4e:	421c      	tst	r4, r3
    1e50:	d007      	beq.n	1e62 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1e52:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1e54:	421a      	tst	r2, r3
    1e56:	d004      	beq.n	1e62 <am_hal_pwrctrl_memory_enable+0xe6>
    1e58:	3809      	subs	r0, #9
    1e5a:	d1e2      	bne.n	1e22 <am_hal_pwrctrl_memory_enable+0xa6>
        return false;
    1e5c:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    1e5e:	bc30      	pop	{r4, r5}
    1e60:	4770      	bx	lr
    if ( ui32PwrStatEnMask )
    1e62:	b911      	cbnz	r1, 1e6a <am_hal_pwrctrl_memory_enable+0xee>
    return true;
    1e64:	2001      	movs	r0, #1
}
    1e66:	bc30      	pop	{r4, r5}
    1e68:	4770      	bx	lr
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e6a:	4b40      	ldr	r3, [pc, #256]	; (1f6c <am_hal_pwrctrl_memory_enable+0x1f0>)
    1e6c:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1e6e:	ea31 0405 	bics.w	r4, r1, r5
    1e72:	bf18      	it	ne
    1e74:	24c6      	movne	r4, #198	; 0xc6
    1e76:	d0f5      	beq.n	1e64 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e78:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1e7a:	ea31 0000 	bics.w	r0, r1, r0
    1e7e:	d0f1      	beq.n	1e64 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e80:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1e82:	ea31 0002 	bics.w	r0, r1, r2
    1e86:	d0ed      	beq.n	1e64 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e88:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1e8a:	ea31 0005 	bics.w	r0, r1, r5
    1e8e:	d0e9      	beq.n	1e64 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e90:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1e92:	ea31 0000 	bics.w	r0, r1, r0
    1e96:	d0e5      	beq.n	1e64 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e98:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1e9a:	ea31 0002 	bics.w	r0, r1, r2
    1e9e:	d0e1      	beq.n	1e64 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1ea0:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1ea2:	ea31 0005 	bics.w	r0, r1, r5
    1ea6:	d0dd      	beq.n	1e64 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1ea8:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1eaa:	ea31 0000 	bics.w	r0, r1, r0
    1eae:	d0d9      	beq.n	1e64 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1eb0:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1eb2:	ea31 0002 	bics.w	r0, r1, r2
    1eb6:	d0d5      	beq.n	1e64 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1eb8:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1eba:	ea31 0005 	bics.w	r0, r1, r5
    1ebe:	d0d1      	beq.n	1e64 <am_hal_pwrctrl_memory_enable+0xe8>
    1ec0:	3c09      	subs	r4, #9
    1ec2:	d1d9      	bne.n	1e78 <am_hal_pwrctrl_memory_enable+0xfc>
    1ec4:	e7ca      	b.n	1e5c <am_hal_pwrctrl_memory_enable+0xe0>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    1ec6:	2160      	movs	r1, #96	; 0x60
{
    1ec8:	2300      	movs	r3, #0
    1eca:	e79e      	b.n	1e0a <am_hal_pwrctrl_memory_enable+0x8e>
    1ecc:	4a28      	ldr	r2, [pc, #160]	; (1f70 <am_hal_pwrctrl_memory_enable+0x1f4>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1ece:	4b29      	ldr	r3, [pc, #164]	; (1f74 <am_hal_pwrctrl_memory_enable+0x1f8>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    1ed0:	f44f 7180 	mov.w	r1, #256	; 0x100
    1ed4:	e795      	b.n	1e02 <am_hal_pwrctrl_memory_enable+0x86>
    1ed6:	f46f 62ff 	mvn.w	r2, #2040	; 0x7f8
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1eda:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    1ede:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    1ee2:	e78e      	b.n	1e02 <am_hal_pwrctrl_memory_enable+0x86>
    1ee4:	4a24      	ldr	r2, [pc, #144]	; (1f78 <am_hal_pwrctrl_memory_enable+0x1fc>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1ee6:	4b25      	ldr	r3, [pc, #148]	; (1f7c <am_hal_pwrctrl_memory_enable+0x200>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    1ee8:	f44f 7140 	mov.w	r1, #768	; 0x300
    1eec:	e789      	b.n	1e02 <am_hal_pwrctrl_memory_enable+0x86>
    1eee:	f46f 62fe 	mvn.w	r2, #2032	; 0x7f0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1ef2:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    1ef6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    1efa:	e782      	b.n	1e02 <am_hal_pwrctrl_memory_enable+0x86>
    1efc:	f46f 62e0 	mvn.w	r2, #1792	; 0x700
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1f00:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    1f04:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    1f08:	e77b      	b.n	1e02 <am_hal_pwrctrl_memory_enable+0x86>
    1f0a:	f46f 62fc 	mvn.w	r2, #2016	; 0x7e0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1f0e:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    1f12:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    1f16:	e774      	b.n	1e02 <am_hal_pwrctrl_memory_enable+0x86>
    1f18:	f46f 62f8 	mvn.w	r2, #1984	; 0x7c0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1f1c:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    1f20:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    1f24:	e76d      	b.n	1e02 <am_hal_pwrctrl_memory_enable+0x86>
    1f26:	f46f 62f0 	mvn.w	r2, #1920	; 0x780
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1f2a:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    1f2e:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    1f32:	e766      	b.n	1e02 <am_hal_pwrctrl_memory_enable+0x86>
    1f34:	f46f 62c0 	mvn.w	r2, #1536	; 0x600
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1f38:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    1f3c:	4910      	ldr	r1, [pc, #64]	; (1f80 <am_hal_pwrctrl_memory_enable+0x204>)
    1f3e:	e760      	b.n	1e02 <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    1f40:	4910      	ldr	r1, [pc, #64]	; (1f84 <am_hal_pwrctrl_memory_enable+0x208>)
    1f42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1f46:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1f4a:	e75a      	b.n	1e02 <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1f4c:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1f50:	e7ba      	b.n	1ec8 <am_hal_pwrctrl_memory_enable+0x14c>
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1f52:	4805      	ldr	r0, [pc, #20]	; (1f68 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1f54:	6803      	ldr	r3, [r0, #0]
    1f56:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    1f5a:	6001      	str	r1, [r0, #0]
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1f5c:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
        ui32PwrStatEnMask  = 0;
    1f60:	2100      	movs	r1, #0
    1f62:	e758      	b.n	1e16 <am_hal_pwrctrl_memory_enable+0x9a>
    1f64:	0007ff00 	.word	0x0007ff00
    1f68:	40021010 	.word	0x40021010
    1f6c:	40021014 	.word	0x40021014
    1f70:	fffff801 	.word	0xfffff801
    1f74:	0007fe00 	.word	0x0007fe00
    1f78:	fffff803 	.word	0xfffff803
    1f7c:	0007fc00 	.word	0x0007fc00
    1f80:	0001ff00 	.word	0x0001ff00
    1f84:	0003ff00 	.word	0x0003ff00

00001f88 <am_hal_pwrctrl_bucks_enable>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1f88:	4b0b      	ldr	r3, [pc, #44]	; (1fb8 <am_hal_pwrctrl_bucks_enable+0x30>)
    1f8a:	681a      	ldr	r2, [r3, #0]
    1f8c:	0792      	lsls	r2, r2, #30
    1f8e:	d502      	bpl.n	1f96 <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1f90:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1f92:	07c3      	lsls	r3, r0, #31
    1f94:	d40e      	bmi.n	1fb4 <am_hal_pwrctrl_bucks_enable+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1f96:	4b09      	ldr	r3, [pc, #36]	; (1fbc <am_hal_pwrctrl_bucks_enable+0x34>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1f98:	4a07      	ldr	r2, [pc, #28]	; (1fb8 <am_hal_pwrctrl_bucks_enable+0x30>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1f9a:	6819      	ldr	r1, [r3, #0]
    1f9c:	f041 0002 	orr.w	r0, r1, #2
    1fa0:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1fa2:	6819      	ldr	r1, [r3, #0]
    1fa4:	f041 0001 	orr.w	r0, r1, #1
    1fa8:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1faa:	6813      	ldr	r3, [r2, #0]
    1fac:	f003 0103 	and.w	r1, r3, #3
    1fb0:	2903      	cmp	r1, #3
    1fb2:	d1fa      	bne.n	1faa <am_hal_pwrctrl_bucks_enable+0x22>
    1fb4:	4770      	bx	lr
    1fb6:	bf00      	nop
    1fb8:	40021004 	.word	0x40021004
    1fbc:	40021000 	.word	0x40021000

00001fc0 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1fc0:	4b12      	ldr	r3, [pc, #72]	; (200c <am_hal_pwrctrl_bucks_disable+0x4c>)
    1fc2:	681a      	ldr	r2, [r3, #0]
    1fc4:	0792      	lsls	r2, r2, #30
    1fc6:	d402      	bmi.n	1fce <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    1fc8:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1fca:	07c3      	lsls	r3, r0, #31
    1fcc:	d51c      	bpl.n	2008 <am_hal_pwrctrl_bucks_disable+0x48>
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1fce:	4910      	ldr	r1, [pc, #64]	; (2010 <am_hal_pwrctrl_bucks_disable+0x50>)
    1fd0:	680b      	ldr	r3, [r1, #0]
    1fd2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1fd6:	2a20      	cmp	r2, #32
    1fd8:	d00b      	beq.n	1ff2 <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    1fda:	4b0e      	ldr	r3, [pc, #56]	; (2014 <am_hal_pwrctrl_bucks_disable+0x54>)
    1fdc:	681a      	ldr	r2, [r3, #0]
    1fde:	f022 0002 	bic.w	r0, r2, #2
    1fe2:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    1fe4:	6819      	ldr	r1, [r3, #0]
    1fe6:	f021 0201 	bic.w	r2, r1, #1
    1fea:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    1fec:	200a      	movs	r0, #10
    1fee:	f7ff bdb5 	b.w	1b5c <am_hal_flash_delay>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_PWRADC_EN) )
    1ff2:	4809      	ldr	r0, [pc, #36]	; (2018 <am_hal_pwrctrl_bucks_disable+0x58>)
    1ff4:	6801      	ldr	r1, [r0, #0]
    if ( isRev_ADC()  &&
    1ff6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1ffa:	d1ee      	bne.n	1fda <am_hal_pwrctrl_bucks_disable+0x1a>
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    1ffc:	4805      	ldr	r0, [pc, #20]	; (2014 <am_hal_pwrctrl_bucks_disable+0x54>)
    1ffe:	6803      	ldr	r3, [r0, #0]
    2000:	f003 0105 	and.w	r1, r3, #5
    2004:	6001      	str	r1, [r0, #0]
    2006:	e7f1      	b.n	1fec <am_hal_pwrctrl_bucks_disable+0x2c>
    2008:	4770      	bx	lr
    200a:	bf00      	nop
    200c:	40021004 	.word	0x40021004
    2010:	4002000c 	.word	0x4002000c
    2014:	40021000 	.word	0x40021000
    2018:	40021008 	.word	0x40021008

0000201c <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    201c:	b5f0      	push	{r4, r5, r6, r7, lr}
    201e:	b083      	sub	sp, #12
    2020:	4604      	mov	r4, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    2022:	f7ff fdcb 	bl	1bbc <am_hal_interrupt_master_disable>
    2026:	4605      	mov	r5, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    2028:	b124      	cbz	r4, 2034 <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    202a:	4b42      	ldr	r3, [pc, #264]	; (2134 <am_hal_sysctrl_sleep+0x118>)
    202c:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    202e:	f010 0c01 	ands.w	ip, r0, #1
    2032:	d00a      	beq.n	204a <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    2034:	4a40      	ldr	r2, [pc, #256]	; (2138 <am_hal_sysctrl_sleep+0x11c>)
    2036:	6811      	ldr	r1, [r2, #0]
    2038:	f021 0604 	bic.w	r6, r1, #4
    203c:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    203e:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    2040:	4628      	mov	r0, r5
    2042:	f7ff fdbf 	bl	1bc4 <am_hal_interrupt_master_set>
}
    2046:	b003      	add	sp, #12
    2048:	bdf0      	pop	{r4, r5, r6, r7, pc}
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    204a:	4c3b      	ldr	r4, [pc, #236]	; (2138 <am_hal_sysctrl_sleep+0x11c>)
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    204c:	4b3b      	ldr	r3, [pc, #236]	; (213c <am_hal_sysctrl_sleep+0x120>)
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    204e:	6820      	ldr	r0, [r4, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    2050:	4e3b      	ldr	r6, [pc, #236]	; (2140 <am_hal_sysctrl_sleep+0x124>)
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    2052:	4f3c      	ldr	r7, [pc, #240]	; (2144 <am_hal_sysctrl_sleep+0x128>)
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    2054:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 2154 <am_hal_sysctrl_sleep+0x138>
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    2058:	f040 0204 	orr.w	r2, r0, #4
    205c:	6022      	str	r2, [r4, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    205e:	681c      	ldr	r4, [r3, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    2060:	6833      	ldr	r3, [r6, #0]
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    2062:	f8de 2000 	ldr.w	r2, [lr]
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    2066:	6839      	ldr	r1, [r7, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    2068:	f004 07f0 	and.w	r7, r4, #240	; 0xf0
                   CHKBUCKZX_REV : 0x0;
    206c:	2f20      	cmp	r7, #32
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    206e:	f103 30ff 	add.w	r0, r3, #4294967295
                   CHKBUCKZX_REV : 0x0;
    2072:	bf14      	ite	ne
    2074:	2700      	movne	r7, #0
    2076:	2702      	moveq	r7, #2
                    CHKBUCKZX_TIMER : 0x0;
    2078:	2803      	cmp	r0, #3
    207a:	bf98      	it	ls
    207c:	f04f 0c04 	movls.w	ip, #4
                     CHKBUCKZX_BUCKS : 0x0;
    2080:	f012 0403 	ands.w	r4, r2, #3
    2084:	bf18      	it	ne
    2086:	2401      	movne	r4, #1
    g_buckZX_chk |= ( ui32SupplySrc &
    2088:	f240 53ff 	movw	r3, #1535	; 0x5ff
    g_buckZX_chk |= (ui32SupplySrc &
    208c:	433c      	orrs	r4, r7
                0x0 : CHKBUCKZX_DEVEN;
    208e:	ea11 0703 	ands.w	r7, r1, r3
    g_buckZX_chk |= (ui32SupplySrc &
    2092:	ea44 040c 	orr.w	r4, r4, ip
                0x0 : CHKBUCKZX_DEVEN;
    2096:	d103      	bne.n	20a0 <am_hal_sysctrl_sleep+0x84>
    g_buckZX_chk |= ( ui32SupplySrc &
    2098:	f044 0408 	orr.w	r4, r4, #8
        if ( bBuckZX_chk )
    209c:	2c0f      	cmp	r4, #15
    209e:	d00a      	beq.n	20b6 <am_hal_sysctrl_sleep+0x9a>
        AM_ASM_WFI;
    20a0:	bf30      	wfi
        if ( bBuckZX_chk )
    20a2:	2c0f      	cmp	r4, #15
    20a4:	d01a      	beq.n	20dc <am_hal_sysctrl_sleep+0xc0>
            g_bBuckRestoreComplete = true;
    20a6:	4e28      	ldr	r6, [pc, #160]	; (2148 <am_hal_sysctrl_sleep+0x12c>)
    20a8:	2001      	movs	r0, #1
    20aa:	7030      	strb	r0, [r6, #0]
    am_hal_interrupt_master_set(ui32Critical);
    20ac:	4628      	mov	r0, r5
    20ae:	f7ff fd89 	bl	1bc4 <am_hal_interrupt_master_set>
}
    20b2:	b003      	add	sp, #12
    20b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ui32BuckTimer = g_ui32BuckTimer - 1;
    20b6:	6832      	ldr	r2, [r6, #0]
    20b8:	1e51      	subs	r1, r2, #1
    20ba:	9100      	str	r1, [sp, #0]
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    20bc:	9800      	ldr	r0, [sp, #0]
    20be:	f04f 31ff 	mov.w	r1, #4294967295
    20c2:	f7ff fcbf 	bl	1a44 <am_hal_ctimer_clear>
            am_hal_ctimer_period_set(ui32BuckTimer,
    20c6:	9800      	ldr	r0, [sp, #0]
    20c8:	463b      	mov	r3, r7
    20ca:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    20ce:	f04f 31ff 	mov.w	r1, #4294967295
    20d2:	f7ff fccb 	bl	1a6c <am_hal_ctimer_period_set>
            am_hal_pwrctrl_bucks_disable();
    20d6:	f7ff ff73 	bl	1fc0 <am_hal_pwrctrl_bucks_disable>
    20da:	e7e1      	b.n	20a0 <am_hal_sysctrl_sleep+0x84>
    AM_CRITICAL_BEGIN_ASM
    20dc:	f7ff fd6e 	bl	1bbc <am_hal_interrupt_master_disable>
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    20e0:	4b1a      	ldr	r3, [pc, #104]	; (214c <am_hal_sysctrl_sleep+0x130>)
    AM_CRITICAL_BEGIN_ASM
    20e2:	9001      	str	r0, [sp, #4]
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    20e4:	681a      	ldr	r2, [r3, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    20e6:	681a      	ldr	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    20e8:	681f      	ldr	r7, [r3, #0]
    20ea:	f027 043c 	bic.w	r4, r7, #60	; 0x3c
    20ee:	f044 021c 	orr.w	r2, r4, #28
    20f2:	601a      	str	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    20f4:	6819      	ldr	r1, [r3, #0]
            g_bBuckRestoreComplete = false;
    20f6:	4c14      	ldr	r4, [pc, #80]	; (2148 <am_hal_sysctrl_sleep+0x12c>)
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    20f8:	f421 30f0 	bic.w	r0, r1, #122880	; 0x1e000
    20fc:	f440 4760 	orr.w	r7, r0, #57344	; 0xe000
    2100:	601f      	str	r7, [r3, #0]
    AM_CRITICAL_END_ASM
    2102:	9801      	ldr	r0, [sp, #4]
    2104:	f7ff fd5e 	bl	1bc4 <am_hal_interrupt_master_set>
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    2108:	201c      	movs	r0, #28
    210a:	f7ff fd27 	bl	1b5c <am_hal_flash_delay>
            am_hal_pwrctrl_bucks_enable();
    210e:	f7ff ff3b 	bl	1f88 <am_hal_pwrctrl_bucks_enable>
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2112:	6836      	ldr	r6, [r6, #0]
            g_ui32BuckInputs = 0;
    2114:	490e      	ldr	r1, [pc, #56]	; (2150 <am_hal_sysctrl_sleep+0x134>)
            g_bBuckRestoreComplete = false;
    2116:	2200      	movs	r2, #0
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2118:	1e73      	subs	r3, r6, #1
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    211a:	204c      	movs	r0, #76	; 0x4c
            ui32BuckTimer = g_ui32BuckTimer - 1;
    211c:	9300      	str	r3, [sp, #0]
            g_bBuckRestoreComplete = false;
    211e:	7022      	strb	r2, [r4, #0]
            g_ui32BuckInputs = 0;
    2120:	600a      	str	r2, [r1, #0]
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    2122:	f7ff fd1b 	bl	1b5c <am_hal_flash_delay>
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    2126:	9800      	ldr	r0, [sp, #0]
    2128:	f04f 31ff 	mov.w	r1, #4294967295
    212c:	f7ff fc72 	bl	1a14 <am_hal_ctimer_start>
    2130:	e786      	b.n	2040 <am_hal_sysctrl_sleep+0x24>
    2132:	bf00      	nop
    2134:	40020250 	.word	0x40020250
    2138:	e000ed10 	.word	0xe000ed10
    213c:	4002000c 	.word	0x4002000c
    2140:	10001148 	.word	0x10001148
    2144:	40021008 	.word	0x40021008
    2148:	10001140 	.word	0x10001140
    214c:	40020068 	.word	0x40020068
    2150:	10001144 	.word	0x10001144
    2154:	40021000 	.word	0x40021000

00002158 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    2158:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    215a:	4a23      	ldr	r2, [pc, #140]	; (21e8 <am_hal_tpiu_enable+0x90>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    215c:	6803      	ldr	r3, [r0, #0]
    AM_REG(TPIU, FFCR) = 0;
    215e:	2100      	movs	r1, #0
    2160:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    2162:	b33b      	cbz	r3, 21b4 <am_hal_tpiu_enable+0x5c>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    2164:	f5a2 7c40 	sub.w	ip, r2, #768	; 0x300
    2168:	2101      	movs	r1, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    216a:	4c20      	ldr	r4, [pc, #128]	; (21ec <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    216c:	4d20      	ldr	r5, [pc, #128]	; (21f0 <am_hal_tpiu_enable+0x98>)
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    216e:	f8cc 1000 	str.w	r1, [ip]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    2172:	f5a3 4e61 	sub.w	lr, r3, #57600	; 0xe100
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    2176:	45a6      	cmp	lr, r4
    2178:	bf94      	ite	ls
    217a:	461c      	movls	r4, r3
    217c:	462c      	movhi	r4, r5
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    217e:	f7ff fbbf 	bl	1900 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    2182:	1c43      	adds	r3, r0, #1
    2184:	d02d      	beq.n	21e2 <am_hal_tpiu_enable+0x8a>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    2186:	08c2      	lsrs	r2, r0, #3
    2188:	fbb2 f3f4 	udiv	r3, r2, r4
    218c:	1e5d      	subs	r5, r3, #1
    218e:	b2a8      	uxth	r0, r5
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    2190:	4a18      	ldr	r2, [pc, #96]	; (21f4 <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    2192:	4c19      	ldr	r4, [pc, #100]	; (21f8 <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    2194:	4b19      	ldr	r3, [pc, #100]	; (21fc <am_hal_tpiu_enable+0xa4>)
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    2196:	491a      	ldr	r1, [pc, #104]	; (2200 <am_hal_tpiu_enable+0xa8>)
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    2198:	6010      	str	r0, [r2, #0]
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    219a:	2502      	movs	r5, #2
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    219c:	2000      	movs	r0, #0
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    219e:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    21a2:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    21a4:	6008      	str	r0, [r1, #0]
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    21a6:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    21a8:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    21ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    21b0:	f7ff bcd4 	b.w	1b5c <am_hal_flash_delay>
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    21b4:	4c0f      	ldr	r4, [pc, #60]	; (21f4 <am_hal_tpiu_enable+0x9c>)
    21b6:	6905      	ldr	r5, [r0, #16]
    21b8:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    21ba:	6882      	ldr	r2, [r0, #8]
    21bc:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    21c0:	68c3      	ldr	r3, [r0, #12]
    21c2:	4c10      	ldr	r4, [pc, #64]	; (2204 <am_hal_tpiu_enable+0xac>)
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    21c4:	490d      	ldr	r1, [pc, #52]	; (21fc <am_hal_tpiu_enable+0xa4>)
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    21c6:	1e5d      	subs	r5, r3, #1
    21c8:	2201      	movs	r2, #1
    21ca:	40aa      	lsls	r2, r5
    21cc:	6022      	str	r2, [r4, #0]
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    21ce:	6840      	ldr	r0, [r0, #4]
    21d0:	680b      	ldr	r3, [r1, #0]
    21d2:	4303      	orrs	r3, r0
    21d4:	600b      	str	r3, [r1, #0]
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    21d6:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    21da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    21de:	f7ff bcbd 	b.w	1b5c <am_hal_flash_delay>
    21e2:	2005      	movs	r0, #5
    21e4:	e7d4      	b.n	2190 <am_hal_tpiu_enable+0x38>
    21e6:	bf00      	nop
    21e8:	e0040304 	.word	0xe0040304
    21ec:	001da380 	.word	0x001da380
    21f0:	000f4240 	.word	0x000f4240
    21f4:	e0040010 	.word	0xe0040010
    21f8:	e00400f0 	.word	0xe00400f0
    21fc:	40020250 	.word	0x40020250
    2200:	e0040f00 	.word	0xe0040f00
    2204:	e0040004 	.word	0xe0040004

00002208 <am_hal_tpiu_disable>:
am_hal_tpiu_disable(void)
{
    //
    // Disable the TPIU clock source in MCU control.
    //
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    2208:	4b01      	ldr	r3, [pc, #4]	; (2210 <am_hal_tpiu_disable+0x8>)
    220a:	2200      	movs	r2, #0
    220c:	601a      	str	r2, [r3, #0]
    220e:	4770      	bx	lr
    2210:	40020250 	.word	0x40020250

00002214 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    2214:	4b01      	ldr	r3, [pc, #4]	; (221c <am_hal_vcomp_disable+0x8>)
    2216:	2237      	movs	r2, #55	; 0x37
    2218:	601a      	str	r2, [r3, #0]
    221a:	4770      	bx	lr
    221c:	4000c008 	.word	0x4000c008
    2220:	20434441 	.word	0x20434441
    2224:	6d617845 	.word	0x6d617845
    2228:	20656c70 	.word	0x20656c70
    222c:	31207461 	.word	0x31207461
    2230:	77207a48 	.word	0x77207a48
    2234:	20687469 	.word	0x20687469
    2238:	20434441 	.word	0x20434441
    223c:	61736964 	.word	0x61736964
    2240:	64656c62 	.word	0x64656c62
    2244:	74656220 	.word	0x74656220
    2248:	6e656577 	.word	0x6e656577
    224c:	6d617320 	.word	0x6d617320
    2250:	73656c70 	.word	0x73656c70
    2254:	0000000a 	.word	0x0000000a
    2258:	0a0a0a0a 	.word	0x0a0a0a0a
    225c:	0a0a0a0a 	.word	0x0a0a0a0a
    2260:	0a0a0a0a 	.word	0x0a0a0a0a
    2264:	0a0a0a0a 	.word	0x0a0a0a0a
    2268:	00000a0a 	.word	0x00000a0a
    226c:	69797254 	.word	0x69797254
    2270:	7420676e 	.word	0x7420676e
    2274:	6f63206f 	.word	0x6f63206f
    2278:	6769666e 	.word	0x6769666e
    227c:	20657275 	.word	0x20657275
    2280:	41206e61 	.word	0x41206e61
    2284:	73204344 	.word	0x73204344
    2288:	20746f6c 	.word	0x20746f6c
    228c:	74616874 	.word	0x74616874
    2290:	656f6420 	.word	0x656f6420
    2294:	74276e73 	.word	0x74276e73
    2298:	69786520 	.word	0x69786520
    229c:	002e7473 	.word	0x002e7473
    22a0:	2e5c2e2e 	.word	0x2e5c2e2e
    22a4:	6d615c2e 	.word	0x6d615c2e
    22a8:	6c61685f 	.word	0x6c61685f
    22ac:	6364615f 	.word	0x6364615f
    22b0:	0000632e 	.word	0x0000632e

000022b4 <am_hal_cachectrl_defaults>:
    22b4:	50000001 00010300 00010101 685f6d61     ...P........am_h
    22c4:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    22d4:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    22e4:	63206469 6b636f6c 74657320 676e6974     id clock setting
    22f4:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    2304:	6b6c635f 2e6e6567 00000063 6e6e6143     _clkgen.c...Cann
    2314:	6520746f 6c62616e 6f6d2065 74206572     ot enable more t
    2324:	206e6168 20656e6f 69726570 72656870     han one peripher
    2334:	61206c61 20612074 656d6974 0000002e     al at a time....
    2344:	2e5c2e2e 6d615c2e 6c61685f 7277705f     ..\..\am_hal_pwr
    2354:	6c727463 0000632e                       ctrl.c..
