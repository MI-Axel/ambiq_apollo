
itm_printf_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001da0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         0000000c  10001000  00001da0  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000118  1000100c  00001dac  0002100c  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  0002100c  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000b859  00000000  00000000  00021043  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002704  00000000  00000000  0002c89c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000007e0  00000000  00000000  0002efa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001278  00000000  00000000  0002f780  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004a05  00000000  00000000  000309f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002cbb  00000000  00000000  000353fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  000380b8  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001604  00000000  00000000  00038134  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000036d9  00000000  00000000  00039738  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 b9 02 00 00 21 03 00 00 2d 03 00 00     ........!...-...
      10:	2d 03 00 00 2d 03 00 00 2d 03 00 00 00 00 00 00     -...-...-.......
	...
      2c:	27 03 00 00 27 03 00 00 00 00 00 00 27 03 00 00     '...'.......'...
      3c:	27 03 00 00 27 03 00 00 27 03 00 00 27 03 00 00     '...'...'...'...
      4c:	27 03 00 00 27 03 00 00 27 03 00 00 27 03 00 00     '...'...'...'...
      5c:	27 03 00 00 27 03 00 00 27 03 00 00 27 03 00 00     '...'...'...'...
      6c:	27 03 00 00 27 03 00 00 a5 01 00 00 27 03 00 00     '...'.......'...
      7c:	27 03 00 00 27 03 00 00 27 03 00 00 27 03 00 00     '...'...'...'...
      8c:	27 03 00 00 27 03 00 00 27 03 00 00 27 03 00 00     '...'...'...'...
      9c:	27 03 00 00 27 03 00 00 27 03 00 00 27 03 00 00     '...'...'...'...
      ac:	27 03 00 00 27 03 00 00 27 03 00 00 27 03 00 00     '...'...'...'...
      bc:	27 03 00 00                                         '...

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <timerA0_init>:
// Init function for Timer A0.
//
//*****************************************************************************
void
timerA0_init(void)
{
     160:	b580      	push	{r7, lr}
     162:	b082      	sub	sp, #8
     164:	af00      	add	r7, sp, #0
    uint32_t ui32Period;

    //
    // Enable the LFRC.
    //
    am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_LFRC);
     166:	2002      	movs	r0, #2
     168:	f001 f952 	bl	1410 <am_hal_clkgen_osc_start>

    //
    // Set up timer A0.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
     16c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     170:	2000      	movs	r0, #0
     172:	f001 f9eb 	bl	154c <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer3);
     176:	490a      	ldr	r1, [pc, #40]	; (1a0 <timerA0_init+0x40>)
     178:	2000      	movs	r0, #0
     17a:	f001 f95d 	bl	1438 <am_hal_ctimer_config>
    // With LFRC running at 512 Hz, set up a print rate of 32 Hz.
    //  ui32Period = 8:  ~64 Hz print rate
    //  ui32Period = 16: ~32 Hz print rate
    //  ui32Period = 32: ~16 Hz print rate
    //
    ui32Period = 16;
     17e:	2310      	movs	r3, #16
     180:	607b      	str	r3, [r7, #4]
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ui32Period,
     182:	687b      	ldr	r3, [r7, #4]
     184:	085b      	lsrs	r3, r3, #1
     186:	687a      	ldr	r2, [r7, #4]
     188:	f64f 71ff 	movw	r1, #65535	; 0xffff
     18c:	2000      	movs	r0, #0
     18e:	f001 f9f1 	bl	1574 <am_hal_ctimer_period_set>
                             (ui32Period >> 1));

    //
    // Clear the timer Interrupt
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
     192:	2001      	movs	r0, #1
     194:	f001 fa5a 	bl	164c <am_hal_ctimer_int_clear>
}
     198:	bf00      	nop
     19a:	3708      	adds	r7, #8
     19c:	46bd      	mov	sp, r7
     19e:	bd80      	pop	{r7, pc}
     1a0:	10001000 	.word	0x10001000

000001a4 <am_ctimer_isr>:
// Timer Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
     1a4:	b580      	push	{r7, lr}
     1a6:	af00      	add	r7, sp, #0
    //
    // Clear TimerA0 Interrupt (write to clear).
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
     1a8:	2001      	movs	r0, #1
     1aa:	f001 fa4f 	bl	164c <am_hal_ctimer_int_clear>
}
     1ae:	bf00      	nop
     1b0:	bd80      	pop	{r7, pc}
	...

000001b4 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     1b4:	b580      	push	{r7, lr}
     1b6:	b082      	sub	sp, #8
     1b8:	af00      	add	r7, sp, #0
    uint32_t i;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     1ba:	2000      	movs	r0, #0
     1bc:	f001 f900 	bl	13c0 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     1c0:	4832      	ldr	r0, [pc, #200]	; (28c <main+0xd8>)
     1c2:	f001 f867 	bl	1294 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     1c6:	f000 ffdd 	bl	1184 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     1ca:	4831      	ldr	r0, [pc, #196]	; (290 <main+0xdc>)
     1cc:	f000 f92e 	bl	42c <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     1d0:	f001 fa74 	bl	16bc <am_hal_interrupt_master_disable>
     1d4:	4603      	mov	r3, r0
     1d6:	603b      	str	r3, [r7, #0]
     1d8:	4b2e      	ldr	r3, [pc, #184]	; (294 <main+0xe0>)
     1da:	2273      	movs	r2, #115	; 0x73
     1dc:	601a      	str	r2, [r3, #0]
     1de:	4a2e      	ldr	r2, [pc, #184]	; (298 <main+0xe4>)
     1e0:	4b2d      	ldr	r3, [pc, #180]	; (298 <main+0xe4>)
     1e2:	681b      	ldr	r3, [r3, #0]
     1e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     1e8:	6013      	str	r3, [r2, #0]
     1ea:	4a2c      	ldr	r2, [pc, #176]	; (29c <main+0xe8>)
     1ec:	4b2b      	ldr	r3, [pc, #172]	; (29c <main+0xe8>)
     1ee:	681b      	ldr	r3, [r3, #0]
     1f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     1f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     1f8:	6013      	str	r3, [r2, #0]
     1fa:	4a29      	ldr	r2, [pc, #164]	; (2a0 <main+0xec>)
     1fc:	4b28      	ldr	r3, [pc, #160]	; (2a0 <main+0xec>)
     1fe:	681b      	ldr	r3, [r3, #0]
     200:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     204:	6013      	str	r3, [r2, #0]
     206:	4b23      	ldr	r3, [pc, #140]	; (294 <main+0xe0>)
     208:	2200      	movs	r2, #0
     20a:	601a      	str	r2, [r3, #0]
     20c:	683b      	ldr	r3, [r7, #0]
     20e:	4618      	mov	r0, r3
     210:	f001 fa58 	bl	16c4 <am_hal_interrupt_master_set>

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     214:	f001 fa5a 	bl	16cc <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     218:	f000 ffc6 	bl	11a8 <am_bsp_debug_printf_enable>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
     21c:	f000 ffa8 	bl	1170 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("ITM Printf Example\n");
     220:	4820      	ldr	r0, [pc, #128]	; (2a4 <main+0xf0>)
     222:	f000 ff87 	bl	1134 <am_util_stdio_printf>

    //
    // Introduce the string of characters.
    //
    am_util_stdio_printf("\n\tBeginning ASCII walk through:\n");
     226:	4820      	ldr	r0, [pc, #128]	; (2a8 <main+0xf4>)
     228:	f000 ff84 	bl	1134 <am_util_stdio_printf>
    am_util_stdio_printf("\t");
     22c:	481f      	ldr	r0, [pc, #124]	; (2ac <main+0xf8>)
     22e:	f000 ff81 	bl	1134 <am_util_stdio_printf>

    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
     232:	f000 fff9 	bl	1228 <am_bsp_debug_printf_disable>

    //
    // TimerA0 init.
    //
    timerA0_init();
     236:	f7ff ff93 	bl	160 <timerA0_init>

    //
    // Enable the timer Interrupt.
    //
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
     23a:	2001      	movs	r0, #1
     23c:	f001 f9f4 	bl	1628 <am_hal_ctimer_int_enable>

    //
    // Enable the timer interrupt in the NVIC.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_CTIMER);
     240:	201d      	movs	r0, #29
     242:	f001 fa0f 	bl	1664 <am_hal_interrupt_enable>
    am_hal_interrupt_master_enable();
     246:	f001 fa35 	bl	16b4 <am_hal_interrupt_master_enable>

    //
    // Enable the timer.
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
     24a:	f64f 71ff 	movw	r1, #65535	; 0xffff
     24e:	2000      	movs	r0, #0
     250:	f001 f964 	bl	151c <am_hal_ctimer_start>
    //
    // Loop forever writing chars to the stimulus register.
    //
    while (1)
    {
        for (i = '!'; i <= '~'; i++)
     254:	2321      	movs	r3, #33	; 0x21
     256:	607b      	str	r3, [r7, #4]
     258:	e00d      	b.n	276 <main+0xc2>
        {
            //
            // Enable debug printf messages using ITM on SWO pin
            //
            am_bsp_debug_printf_enable();
     25a:	f000 ffa5 	bl	11a8 <am_bsp_debug_printf_enable>

            //
            // Walk through the ASCII table.
            //
            am_util_stdio_printf("%c", i);
     25e:	6879      	ldr	r1, [r7, #4]
     260:	4813      	ldr	r0, [pc, #76]	; (2b0 <main+0xfc>)
     262:	f000 ff67 	bl	1134 <am_util_stdio_printf>

            //
            // Disable debug printf messages using ITM on SWO pin
            //
            am_bsp_debug_printf_disable();
     266:	f000 ffdf 	bl	1228 <am_bsp_debug_printf_disable>

            //
            // Go to Deep Sleep to delay.
            //
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     26a:	2001      	movs	r0, #1
     26c:	f001 fc3c 	bl	1ae8 <am_hal_sysctrl_sleep>
        for (i = '!'; i <= '~'; i++)
     270:	687b      	ldr	r3, [r7, #4]
     272:	3301      	adds	r3, #1
     274:	607b      	str	r3, [r7, #4]
     276:	687b      	ldr	r3, [r7, #4]
     278:	2b7e      	cmp	r3, #126	; 0x7e
     27a:	d9ee      	bls.n	25a <main+0xa6>
        }

        //
        // Enable debug printf messages using ITM on SWO pin
        //
        am_bsp_debug_printf_enable();
     27c:	f000 ff94 	bl	11a8 <am_bsp_debug_printf_enable>

        //
        // New line.
        //
        am_util_stdio_printf("\n\t");
     280:	480c      	ldr	r0, [pc, #48]	; (2b4 <main+0x100>)
     282:	f000 ff57 	bl	1134 <am_util_stdio_printf>

        //
        // Disable debug printf messages using ITM on SWO pin
        //
        am_bsp_debug_printf_disable();
     286:	f000 ffcf 	bl	1228 <am_bsp_debug_printf_disable>
        for (i = '!'; i <= '~'; i++)
     28a:	e7e3      	b.n	254 <main+0xa0>
     28c:	00001d44 	.word	0x00001d44
     290:	00001291 	.word	0x00001291
     294:	40010060 	.word	0x40010060
     298:	40010054 	.word	0x40010054
     29c:	40010028 	.word	0x40010028
     2a0:	40010108 	.word	0x40010108
     2a4:	00001cec 	.word	0x00001cec
     2a8:	00001d00 	.word	0x00001d00
     2ac:	00001d24 	.word	0x00001d24
     2b0:	00001d28 	.word	0x00001d28
     2b4:	00001d2c 	.word	0x00001d2c

000002b8 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     2b8:	4811      	ldr	r0, [pc, #68]	; (300 <zero_loop+0x12>)
     2ba:	4912      	ldr	r1, [pc, #72]	; (304 <zero_loop+0x16>)
     2bc:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     2be:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     2c2:	4811      	ldr	r0, [pc, #68]	; (308 <zero_loop+0x1a>)
     2c4:	6801      	ldr	r1, [r0, #0]
     2c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     2ca:	6001      	str	r1, [r0, #0]
     2cc:	f3bf 8f4f 	dsb	sy
     2d0:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     2d4:	480d      	ldr	r0, [pc, #52]	; (30c <zero_loop+0x1e>)
     2d6:	490e      	ldr	r1, [pc, #56]	; (310 <zero_loop+0x22>)
     2d8:	4a0e      	ldr	r2, [pc, #56]	; (314 <zero_loop+0x26>)

000002da <copy_loop>:
     2da:	f850 3b04 	ldr.w	r3, [r0], #4
     2de:	f841 3b04 	str.w	r3, [r1], #4
     2e2:	4291      	cmp	r1, r2
     2e4:	dbf9      	blt.n	2da <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     2e6:	480c      	ldr	r0, [pc, #48]	; (318 <zero_loop+0x2a>)
     2e8:	490c      	ldr	r1, [pc, #48]	; (31c <zero_loop+0x2e>)
     2ea:	f04f 0200 	mov.w	r2, #0

000002ee <zero_loop>:
     2ee:	4288      	cmp	r0, r1
     2f0:	bfb8      	it	lt
     2f2:	f840 2b04 	strlt.w	r2, [r0], #4
     2f6:	dbfa      	blt.n	2ee <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     2f8:	f7ff ff5c 	bl	1b4 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     2fc:	be00      	bkpt	0x0000
}
     2fe:	bf00      	nop
     300:	e000ed08 	.word	0xe000ed08
     304:	00000000 	.word	0x00000000
     308:	e000ed88 	.word	0xe000ed88
     30c:	00001da0 	.word	0x00001da0
     310:	10001000 	.word	0x10001000
     314:	1000100c 	.word	0x1000100c
     318:	1000100c 	.word	0x1000100c
     31c:	10001124 	.word	0x10001124

00000320 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     320:	b480      	push	{r7}
     322:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     324:	e7fe      	b.n	324 <am_nmi_isr+0x4>

00000326 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     326:	b480      	push	{r7}
     328:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     32a:	e7fe      	b.n	32a <am_adc_isr+0x4>

0000032c <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     32c:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     32e:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     330:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     332:	f000 f809 	bl	348 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     336:	bd01      	pop	{r0, pc}
}
     338:	bf00      	nop
     33a:	4618      	mov	r0, r3

0000033c <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     33c:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     33e:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     340:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     342:	4770      	bx	lr
}
     344:	bf00      	nop
     346:	4618      	mov	r0, r3

00000348 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     348:	b580      	push	{r7, lr}
     34a:	b096      	sub	sp, #88	; 0x58
     34c:	af00      	add	r7, sp, #0
     34e:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     350:	f107 030c 	add.w	r3, r7, #12
     354:	2200      	movs	r2, #0
     356:	601a      	str	r2, [r3, #0]
     358:	605a      	str	r2, [r3, #4]
     35a:	609a      	str	r2, [r3, #8]
     35c:	60da      	str	r2, [r3, #12]
     35e:	611a      	str	r2, [r3, #16]
     360:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
     362:	2300      	movs	r3, #0
     364:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     368:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     36a:	4b2e      	ldr	r3, [pc, #184]	; (424 <am_util_faultisr_collect_data+0xdc>)
     36c:	681b      	ldr	r3, [r3, #0]
     36e:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     372:	b2db      	uxtb	r3, r3
     374:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     37a:	0a1b      	lsrs	r3, r3, #8
     37c:	b2db      	uxtb	r3, r3
     37e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     384:	0c1b      	lsrs	r3, r3, #16
     386:	b29b      	uxth	r3, r3
     388:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     38c:	4b26      	ldr	r3, [pc, #152]	; (428 <am_util_faultisr_collect_data+0xe0>)
     38e:	681b      	ldr	r3, [r3, #0]
     390:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     392:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     396:	b2db      	uxtb	r3, r3
     398:	f003 0302 	and.w	r3, r3, #2
     39c:	2b00      	cmp	r3, #0
     39e:	d005      	beq.n	3ac <am_util_faultisr_collect_data+0x64>
     3a0:	6879      	ldr	r1, [r7, #4]
     3a2:	2006      	movs	r0, #6
     3a4:	f7ff ffca 	bl	33c <getStackedReg>
     3a8:	4603      	mov	r3, r0
     3aa:	e001      	b.n	3b0 <am_util_faultisr_collect_data+0x68>
     3ac:	f04f 33ff 	mov.w	r3, #4294967295
     3b0:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     3b2:	6879      	ldr	r1, [r7, #4]
     3b4:	2000      	movs	r0, #0
     3b6:	f7ff ffc1 	bl	33c <getStackedReg>
     3ba:	4603      	mov	r3, r0
     3bc:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     3be:	6879      	ldr	r1, [r7, #4]
     3c0:	2001      	movs	r0, #1
     3c2:	f7ff ffbb 	bl	33c <getStackedReg>
     3c6:	4603      	mov	r3, r0
     3c8:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     3ca:	6879      	ldr	r1, [r7, #4]
     3cc:	2002      	movs	r0, #2
     3ce:	f7ff ffb5 	bl	33c <getStackedReg>
     3d2:	4603      	mov	r3, r0
     3d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     3d6:	6879      	ldr	r1, [r7, #4]
     3d8:	2003      	movs	r0, #3
     3da:	f7ff ffaf 	bl	33c <getStackedReg>
     3de:	4603      	mov	r3, r0
     3e0:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     3e2:	6879      	ldr	r1, [r7, #4]
     3e4:	2004      	movs	r0, #4
     3e6:	f7ff ffa9 	bl	33c <getStackedReg>
     3ea:	4603      	mov	r3, r0
     3ec:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     3ee:	6879      	ldr	r1, [r7, #4]
     3f0:	2005      	movs	r0, #5
     3f2:	f7ff ffa3 	bl	33c <getStackedReg>
     3f6:	4603      	mov	r3, r0
     3f8:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     3fa:	6879      	ldr	r1, [r7, #4]
     3fc:	2006      	movs	r0, #6
     3fe:	f7ff ff9d 	bl	33c <getStackedReg>
     402:	4603      	mov	r3, r0
     404:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     406:	6879      	ldr	r1, [r7, #4]
     408:	2007      	movs	r0, #7
     40a:	f7ff ff97 	bl	33c <getStackedReg>
     40e:	4603      	mov	r3, r0
     410:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     412:	f107 030c 	add.w	r3, r7, #12
     416:	4618      	mov	r0, r3
     418:	f001 f9a8 	bl	176c <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     41c:	2300      	movs	r3, #0
     41e:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
     420:	e7fe      	b.n	420 <am_util_faultisr_collect_data+0xd8>
     422:	bf00      	nop
     424:	e000ed28 	.word	0xe000ed28
     428:	e000ed38 	.word	0xe000ed38

0000042c <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     42c:	b480      	push	{r7}
     42e:	b083      	sub	sp, #12
     430:	af00      	add	r7, sp, #0
     432:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     434:	4a04      	ldr	r2, [pc, #16]	; (448 <am_util_stdio_printf_init+0x1c>)
     436:	687b      	ldr	r3, [r7, #4]
     438:	6013      	str	r3, [r2, #0]
}
     43a:	bf00      	nop
     43c:	370c      	adds	r7, #12
     43e:	46bd      	mov	sp, r7
     440:	f85d 7b04 	ldr.w	r7, [sp], #4
     444:	4770      	bx	lr
     446:	bf00      	nop
     448:	10001120 	.word	0x10001120

0000044c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     44c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     450:	b096      	sub	sp, #88	; 0x58
     452:	af00      	add	r7, sp, #0
     454:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     458:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     45c:	0025      	movs	r5, r4
     45e:	2600      	movs	r6, #0
     460:	ea55 0306 	orrs.w	r3, r5, r6
     464:	f000 80a0 	beq.w	5a8 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     468:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     46c:	0862      	lsrs	r2, r4, #1
     46e:	ea4f 0133 	mov.w	r1, r3, rrx
     472:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     476:	ea4f 0893 	mov.w	r8, r3, lsr #2
     47a:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     47e:	ea4f 0994 	mov.w	r9, r4, lsr #2
     482:	eb11 0308 	adds.w	r3, r1, r8
     486:	eb42 0409 	adc.w	r4, r2, r9
     48a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     48e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     492:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     496:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     49a:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     49e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     4a2:	eb13 030a 	adds.w	r3, r3, sl
     4a6:	eb44 040b 	adc.w	r4, r4, fp
     4aa:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     4ae:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     4b2:	0a1a      	lsrs	r2, r3, #8
     4b4:	62ba      	str	r2, [r7, #40]	; 0x28
     4b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
     4b8:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     4bc:	62ba      	str	r2, [r7, #40]	; 0x28
     4be:	0a23      	lsrs	r3, r4, #8
     4c0:	62fb      	str	r3, [r7, #44]	; 0x2c
     4c2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     4c6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     4ca:	18c9      	adds	r1, r1, r3
     4cc:	eb42 0204 	adc.w	r2, r2, r4
     4d0:	460b      	mov	r3, r1
     4d2:	4614      	mov	r4, r2
     4d4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     4d8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     4dc:	0c1a      	lsrs	r2, r3, #16
     4de:	623a      	str	r2, [r7, #32]
     4e0:	6a3a      	ldr	r2, [r7, #32]
     4e2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     4e6:	623a      	str	r2, [r7, #32]
     4e8:	0c23      	lsrs	r3, r4, #16
     4ea:	627b      	str	r3, [r7, #36]	; 0x24
     4ec:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     4f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     4f4:	18c9      	adds	r1, r1, r3
     4f6:	eb42 0204 	adc.w	r2, r2, r4
     4fa:	460b      	mov	r3, r1
     4fc:	4614      	mov	r4, r2
     4fe:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     502:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     506:	0023      	movs	r3, r4
     508:	603b      	str	r3, [r7, #0]
     50a:	2300      	movs	r3, #0
     50c:	607b      	str	r3, [r7, #4]
     50e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     512:	e897 0006 	ldmia.w	r7, {r1, r2}
     516:	18c9      	adds	r1, r1, r3
     518:	eb42 0204 	adc.w	r2, r2, r4
     51c:	460b      	mov	r3, r1
     51e:	4614      	mov	r4, r2
     520:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     524:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     528:	08da      	lsrs	r2, r3, #3
     52a:	613a      	str	r2, [r7, #16]
     52c:	693a      	ldr	r2, [r7, #16]
     52e:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     532:	613a      	str	r2, [r7, #16]
     534:	08e3      	lsrs	r3, r4, #3
     536:	617b      	str	r3, [r7, #20]
     538:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     53c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     540:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
     544:	460b      	mov	r3, r1
     546:	4614      	mov	r4, r2
     548:	00a0      	lsls	r0, r4, #2
     54a:	60f8      	str	r0, [r7, #12]
     54c:	68f8      	ldr	r0, [r7, #12]
     54e:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
     552:	60f8      	str	r0, [r7, #12]
     554:	009b      	lsls	r3, r3, #2
     556:	60bb      	str	r3, [r7, #8]
     558:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     55c:	185b      	adds	r3, r3, r1
     55e:	eb44 0402 	adc.w	r4, r4, r2
     562:	18db      	adds	r3, r3, r3
     564:	eb44 0404 	adc.w	r4, r4, r4
     568:	4619      	mov	r1, r3
     56a:	4622      	mov	r2, r4
     56c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     570:	1a5b      	subs	r3, r3, r1
     572:	eb64 0402 	sbc.w	r4, r4, r2
     576:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     57a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     57e:	3306      	adds	r3, #6
     580:	f144 0400 	adc.w	r4, r4, #0
     584:	091a      	lsrs	r2, r3, #4
     586:	61ba      	str	r2, [r7, #24]
     588:	69ba      	ldr	r2, [r7, #24]
     58a:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     58e:	61ba      	str	r2, [r7, #24]
     590:	0923      	lsrs	r3, r4, #4
     592:	61fb      	str	r3, [r7, #28]
     594:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     598:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     59c:	18c9      	adds	r1, r1, r3
     59e:	eb42 0204 	adc.w	r2, r2, r4
     5a2:	460b      	mov	r3, r1
     5a4:	4614      	mov	r4, r2
     5a6:	e029      	b.n	5fc <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     5aa:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     5ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     5ae:	085a      	lsrs	r2, r3, #1
     5b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     5b2:	089b      	lsrs	r3, r3, #2
     5b4:	4413      	add	r3, r2
     5b6:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     5b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     5ba:	091b      	lsrs	r3, r3, #4
     5bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     5be:	4413      	add	r3, r2
     5c0:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     5c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     5c4:	0a1b      	lsrs	r3, r3, #8
     5c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     5c8:	4413      	add	r3, r2
     5ca:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     5cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     5ce:	0c1b      	lsrs	r3, r3, #16
     5d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     5d2:	4413      	add	r3, r2
     5d4:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     5d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     5d8:	08db      	lsrs	r3, r3, #3
     5da:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     5dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     5de:	4613      	mov	r3, r2
     5e0:	009b      	lsls	r3, r3, #2
     5e2:	4413      	add	r3, r2
     5e4:	005b      	lsls	r3, r3, #1
     5e6:	461a      	mov	r2, r3
     5e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     5ea:	1a9b      	subs	r3, r3, r2
     5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     5ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     5f0:	3306      	adds	r3, #6
     5f2:	091a      	lsrs	r2, r3, #4
     5f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     5f6:	4413      	add	r3, r2
     5f8:	f04f 0400 	mov.w	r4, #0
    }
}
     5fc:	4618      	mov	r0, r3
     5fe:	4621      	mov	r1, r4
     600:	3758      	adds	r7, #88	; 0x58
     602:	46bd      	mov	sp, r7
     604:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     608:	4770      	bx	lr

0000060a <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     60a:	b590      	push	{r4, r7, lr}
     60c:	b085      	sub	sp, #20
     60e:	af00      	add	r7, sp, #0
     610:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     614:	683a      	ldr	r2, [r7, #0]
     616:	687b      	ldr	r3, [r7, #4]
     618:	4313      	orrs	r3, r2
     61a:	2b00      	cmp	r3, #0
     61c:	bf0c      	ite	eq
     61e:	2301      	moveq	r3, #1
     620:	2300      	movne	r3, #0
     622:	b2db      	uxtb	r3, r3
     624:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     626:	e008      	b.n	63a <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     628:	e9d7 0100 	ldrd	r0, r1, [r7]
     62c:	f7ff ff0e 	bl	44c <divu64_10>
     630:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     634:	68fb      	ldr	r3, [r7, #12]
     636:	3301      	adds	r3, #1
     638:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
     63a:	e897 0018 	ldmia.w	r7, {r3, r4}
     63e:	4323      	orrs	r3, r4
     640:	d1f2      	bne.n	628 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
     642:	68fb      	ldr	r3, [r7, #12]
}
     644:	4618      	mov	r0, r3
     646:	3714      	adds	r7, #20
     648:	46bd      	mov	sp, r7
     64a:	bd90      	pop	{r4, r7, pc}

0000064c <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     64c:	b590      	push	{r4, r7, lr}
     64e:	b083      	sub	sp, #12
     650:	af00      	add	r7, sp, #0
     652:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     656:	e897 0018 	ldmia.w	r7, {r3, r4}
     65a:	2b00      	cmp	r3, #0
     65c:	f174 0300 	sbcs.w	r3, r4, #0
     660:	da06      	bge.n	670 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     662:	e897 0018 	ldmia.w	r7, {r3, r4}
     666:	425b      	negs	r3, r3
     668:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     66c:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     670:	e897 0018 	ldmia.w	r7, {r3, r4}
     674:	4618      	mov	r0, r3
     676:	4621      	mov	r1, r4
     678:	f7ff ffc7 	bl	60a <ndigits_in_u64>
     67c:	4603      	mov	r3, r0
}
     67e:	4618      	mov	r0, r3
     680:	370c      	adds	r7, #12
     682:	46bd      	mov	sp, r7
     684:	bd90      	pop	{r4, r7, pc}

00000686 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     686:	b490      	push	{r4, r7}
     688:	b084      	sub	sp, #16
     68a:	af00      	add	r7, sp, #0
     68c:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     690:	6839      	ldr	r1, [r7, #0]
     692:	687a      	ldr	r2, [r7, #4]
     694:	430a      	orrs	r2, r1
     696:	2a00      	cmp	r2, #0
     698:	bf0c      	ite	eq
     69a:	2201      	moveq	r2, #1
     69c:	2200      	movne	r2, #0
     69e:	b2d2      	uxtb	r2, r2
     6a0:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     6a2:	e00a      	b.n	6ba <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     6a4:	e897 0006 	ldmia.w	r7, {r1, r2}
     6a8:	090b      	lsrs	r3, r1, #4
     6aa:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     6ae:	0914      	lsrs	r4, r2, #4
     6b0:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     6b4:	68fa      	ldr	r2, [r7, #12]
     6b6:	3201      	adds	r2, #1
     6b8:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
     6ba:	e897 0006 	ldmia.w	r7, {r1, r2}
     6be:	430a      	orrs	r2, r1
     6c0:	d1f0      	bne.n	6a4 <ndigits_in_hex+0x1e>
    }

    return iDigits;
     6c2:	68fb      	ldr	r3, [r7, #12]
}
     6c4:	4618      	mov	r0, r3
     6c6:	3710      	adds	r7, #16
     6c8:	46bd      	mov	sp, r7
     6ca:	bc90      	pop	{r4, r7}
     6cc:	4770      	bx	lr

000006ce <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     6ce:	b480      	push	{r7}
     6d0:	b087      	sub	sp, #28
     6d2:	af00      	add	r7, sp, #0
     6d4:	6078      	str	r0, [r7, #4]
     6d6:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     6d8:	2300      	movs	r3, #0
     6da:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     6dc:	2300      	movs	r3, #0
     6de:	613b      	str	r3, [r7, #16]
     6e0:	2300      	movs	r3, #0
     6e2:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     6e4:	687b      	ldr	r3, [r7, #4]
     6e6:	781b      	ldrb	r3, [r3, #0]
     6e8:	2b2d      	cmp	r3, #45	; 0x2d
     6ea:	d11b      	bne.n	724 <decstr_to_int+0x56>
    {
        bNeg = true;
     6ec:	2301      	movs	r3, #1
     6ee:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     6f0:	687b      	ldr	r3, [r7, #4]
     6f2:	3301      	adds	r3, #1
     6f4:	607b      	str	r3, [r7, #4]
        uCnt++;
     6f6:	68fb      	ldr	r3, [r7, #12]
     6f8:	3301      	adds	r3, #1
     6fa:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     6fc:	e012      	b.n	724 <decstr_to_int+0x56>
    {
        ++uCnt;
     6fe:	68fb      	ldr	r3, [r7, #12]
     700:	3301      	adds	r3, #1
     702:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     704:	693a      	ldr	r2, [r7, #16]
     706:	4613      	mov	r3, r2
     708:	009b      	lsls	r3, r3, #2
     70a:	4413      	add	r3, r2
     70c:	005b      	lsls	r3, r3, #1
     70e:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     710:	687b      	ldr	r3, [r7, #4]
     712:	781b      	ldrb	r3, [r3, #0]
     714:	461a      	mov	r2, r3
     716:	693b      	ldr	r3, [r7, #16]
     718:	4413      	add	r3, r2
     71a:	3b30      	subs	r3, #48	; 0x30
     71c:	613b      	str	r3, [r7, #16]
        pcStr++;
     71e:	687b      	ldr	r3, [r7, #4]
     720:	3301      	adds	r3, #1
     722:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     724:	687b      	ldr	r3, [r7, #4]
     726:	781b      	ldrb	r3, [r3, #0]
     728:	2b2f      	cmp	r3, #47	; 0x2f
     72a:	d903      	bls.n	734 <decstr_to_int+0x66>
     72c:	687b      	ldr	r3, [r7, #4]
     72e:	781b      	ldrb	r3, [r3, #0]
     730:	2b39      	cmp	r3, #57	; 0x39
     732:	d9e4      	bls.n	6fe <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
     734:	683b      	ldr	r3, [r7, #0]
     736:	2b00      	cmp	r3, #0
     738:	d002      	beq.n	740 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     73a:	683b      	ldr	r3, [r7, #0]
     73c:	68fa      	ldr	r2, [r7, #12]
     73e:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     740:	7dfb      	ldrb	r3, [r7, #23]
     742:	2b00      	cmp	r3, #0
     744:	d002      	beq.n	74c <decstr_to_int+0x7e>
     746:	693b      	ldr	r3, [r7, #16]
     748:	425b      	negs	r3, r3
     74a:	e000      	b.n	74e <decstr_to_int+0x80>
     74c:	693b      	ldr	r3, [r7, #16]
}
     74e:	4618      	mov	r0, r3
     750:	371c      	adds	r7, #28
     752:	46bd      	mov	sp, r7
     754:	f85d 7b04 	ldr.w	r7, [sp], #4
     758:	4770      	bx	lr

0000075a <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     75a:	b590      	push	{r4, r7, lr}
     75c:	b091      	sub	sp, #68	; 0x44
     75e:	af00      	add	r7, sp, #0
     760:	e9c7 0102 	strd	r0, r1, [r7, #8]
     764:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     766:	2300      	movs	r3, #0
     768:	63fb      	str	r3, [r7, #60]	; 0x3c
     76a:	2300      	movs	r3, #0
     76c:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     76e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     772:	f7ff fe6b 	bl	44c <divu64_10>
     776:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     77a:	68b9      	ldr	r1, [r7, #8]
     77c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     77e:	4613      	mov	r3, r2
     780:	009b      	lsls	r3, r3, #2
     782:	4413      	add	r3, r2
     784:	005b      	lsls	r3, r3, #1
     786:	1acb      	subs	r3, r1, r3
     788:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     78a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     78c:	1c5a      	adds	r2, r3, #1
     78e:	63fa      	str	r2, [r7, #60]	; 0x3c
     790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     792:	b2d2      	uxtb	r2, r2
     794:	3230      	adds	r2, #48	; 0x30
     796:	b2d2      	uxtb	r2, r2
     798:	f107 0140 	add.w	r1, r7, #64	; 0x40
     79c:	440b      	add	r3, r1
     79e:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     7a2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     7a6:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     7aa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     7ae:	4323      	orrs	r3, r4
     7b0:	d1dd      	bne.n	76e <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     7b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     7b4:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     7b6:	687b      	ldr	r3, [r7, #4]
     7b8:	2b00      	cmp	r3, #0
     7ba:	d011      	beq.n	7e0 <uint64_to_str+0x86>
    {
        while ( ix-- )
     7bc:	e008      	b.n	7d0 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     7be:	687b      	ldr	r3, [r7, #4]
     7c0:	1c5a      	adds	r2, r3, #1
     7c2:	607a      	str	r2, [r7, #4]
     7c4:	f107 0110 	add.w	r1, r7, #16
     7c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     7ca:	440a      	add	r2, r1
     7cc:	7812      	ldrb	r2, [r2, #0]
     7ce:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
     7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     7d2:	1e5a      	subs	r2, r3, #1
     7d4:	63fa      	str	r2, [r7, #60]	; 0x3c
     7d6:	2b00      	cmp	r3, #0
     7d8:	d1f1      	bne.n	7be <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     7da:	687b      	ldr	r3, [r7, #4]
     7dc:	2200      	movs	r2, #0
     7de:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     7e2:	4618      	mov	r0, r3
     7e4:	3744      	adds	r7, #68	; 0x44
     7e6:	46bd      	mov	sp, r7
     7e8:	bd90      	pop	{r4, r7, pc}

000007ea <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     7ea:	b4b0      	push	{r4, r5, r7}
     7ec:	b08d      	sub	sp, #52	; 0x34
     7ee:	af00      	add	r7, sp, #0
     7f0:	e9c7 0102 	strd	r0, r1, [r7, #8]
     7f4:	607a      	str	r2, [r7, #4]
     7f6:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     7f8:	2300      	movs	r3, #0
     7fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     7fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     800:	4313      	orrs	r3, r2
     802:	d131      	bne.n	868 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     806:	1c5a      	adds	r2, r3, #1
     808:	62fa      	str	r2, [r7, #44]	; 0x2c
     80a:	f107 0230 	add.w	r2, r7, #48	; 0x30
     80e:	4413      	add	r3, r2
     810:	2230      	movs	r2, #48	; 0x30
     812:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     816:	e027      	b.n	868 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     818:	7a3b      	ldrb	r3, [r7, #8]
     81a:	f003 030f 	and.w	r3, r3, #15
     81e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     822:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     826:	2b09      	cmp	r3, #9
     828:	d90a      	bls.n	840 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     82a:	78fb      	ldrb	r3, [r7, #3]
     82c:	2b00      	cmp	r3, #0
     82e:	d001      	beq.n	834 <uint64_to_hexstr+0x4a>
     830:	2227      	movs	r2, #39	; 0x27
     832:	e000      	b.n	836 <uint64_to_hexstr+0x4c>
     834:	2207      	movs	r2, #7
     836:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     83a:	4413      	add	r3, r2
     83c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     842:	1c5a      	adds	r2, r3, #1
     844:	62fa      	str	r2, [r7, #44]	; 0x2c
     846:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     84a:	3230      	adds	r2, #48	; 0x30
     84c:	b2d2      	uxtb	r2, r2
     84e:	f107 0130 	add.w	r1, r7, #48	; 0x30
     852:	440b      	add	r3, r1
     854:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     858:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     85c:	0914      	lsrs	r4, r2, #4
     85e:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     862:	091d      	lsrs	r5, r3, #4
     864:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
     868:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     86c:	4313      	orrs	r3, r2
     86e:	d1d3      	bne.n	818 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     872:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     874:	687b      	ldr	r3, [r7, #4]
     876:	2b00      	cmp	r3, #0
     878:	d011      	beq.n	89e <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     87a:	e008      	b.n	88e <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     87c:	687b      	ldr	r3, [r7, #4]
     87e:	1c5a      	adds	r2, r3, #1
     880:	607a      	str	r2, [r7, #4]
     882:	f107 0110 	add.w	r1, r7, #16
     886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     888:	440a      	add	r2, r1
     88a:	7812      	ldrb	r2, [r2, #0]
     88c:	701a      	strb	r2, [r3, #0]
        while (ix--)
     88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     890:	1e5a      	subs	r2, r3, #1
     892:	62fa      	str	r2, [r7, #44]	; 0x2c
     894:	2b00      	cmp	r3, #0
     896:	d1f1      	bne.n	87c <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     898:	687b      	ldr	r3, [r7, #4]
     89a:	2200      	movs	r2, #0
     89c:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     8a0:	4618      	mov	r0, r3
     8a2:	3734      	adds	r7, #52	; 0x34
     8a4:	46bd      	mov	sp, r7
     8a6:	bcb0      	pop	{r4, r5, r7}
     8a8:	4770      	bx	lr

000008aa <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     8aa:	b480      	push	{r7}
     8ac:	b085      	sub	sp, #20
     8ae:	af00      	add	r7, sp, #0
     8b0:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     8b2:	2300      	movs	r3, #0
     8b4:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     8b6:	687b      	ldr	r3, [r7, #4]
     8b8:	2b00      	cmp	r3, #0
     8ba:	d104      	bne.n	8c6 <simple_strlen+0x1c>
    {
        return ui32RetVal;
     8bc:	68fb      	ldr	r3, [r7, #12]
     8be:	e009      	b.n	8d4 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     8c0:	68fb      	ldr	r3, [r7, #12]
     8c2:	3301      	adds	r3, #1
     8c4:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
     8c6:	687b      	ldr	r3, [r7, #4]
     8c8:	1c5a      	adds	r2, r3, #1
     8ca:	607a      	str	r2, [r7, #4]
     8cc:	781b      	ldrb	r3, [r3, #0]
     8ce:	2b00      	cmp	r3, #0
     8d0:	d1f6      	bne.n	8c0 <simple_strlen+0x16>
    }
    return ui32RetVal;
     8d2:	68fb      	ldr	r3, [r7, #12]
}
     8d4:	4618      	mov	r0, r3
     8d6:	3714      	adds	r7, #20
     8d8:	46bd      	mov	sp, r7
     8da:	f85d 7b04 	ldr.w	r7, [sp], #4
     8de:	4770      	bx	lr

000008e0 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     8e0:	b480      	push	{r7}
     8e2:	b087      	sub	sp, #28
     8e4:	af00      	add	r7, sp, #0
     8e6:	60f8      	str	r0, [r7, #12]
     8e8:	460b      	mov	r3, r1
     8ea:	607a      	str	r2, [r7, #4]
     8ec:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     8ee:	2300      	movs	r3, #0
     8f0:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     8f2:	687b      	ldr	r3, [r7, #4]
     8f4:	2b00      	cmp	r3, #0
     8f6:	dc0c      	bgt.n	912 <padbuffer+0x32>
    {
        return i32Cnt;
     8f8:	697b      	ldr	r3, [r7, #20]
     8fa:	e010      	b.n	91e <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     8fc:	68fb      	ldr	r3, [r7, #12]
     8fe:	2b00      	cmp	r3, #0
     900:	d004      	beq.n	90c <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     902:	68fb      	ldr	r3, [r7, #12]
     904:	1c5a      	adds	r2, r3, #1
     906:	60fa      	str	r2, [r7, #12]
     908:	7afa      	ldrb	r2, [r7, #11]
     90a:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     90c:	697b      	ldr	r3, [r7, #20]
     90e:	3301      	adds	r3, #1
     910:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
     912:	687b      	ldr	r3, [r7, #4]
     914:	1e5a      	subs	r2, r3, #1
     916:	607a      	str	r2, [r7, #4]
     918:	2b00      	cmp	r3, #0
     91a:	d1ef      	bne.n	8fc <padbuffer+0x1c>
    }

    return i32Cnt;
     91c:	697b      	ldr	r3, [r7, #20]
}
     91e:	4618      	mov	r0, r3
     920:	371c      	adds	r7, #28
     922:	46bd      	mov	sp, r7
     924:	f85d 7b04 	ldr.w	r7, [sp], #4
     928:	4770      	bx	lr
	...

0000092c <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     92c:	b590      	push	{r4, r7, lr}
     92e:	b08f      	sub	sp, #60	; 0x3c
     930:	af00      	add	r7, sp, #0
     932:	60f8      	str	r0, [r7, #12]
     934:	60b9      	str	r1, [r7, #8]
     936:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
     938:	68bb      	ldr	r3, [r7, #8]
     93a:	681b      	ldr	r3, [r3, #0]
     93c:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
     93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     940:	2b03      	cmp	r3, #3
     942:	dc02      	bgt.n	94a <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     944:	f06f 0302 	mvn.w	r3, #2
     948:	e0e7      	b.n	b1a <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
     94a:	edd7 7a03 	vldr	s15, [r7, #12]
     94e:	eef5 7a40 	vcmp.f32	s15, #0.0
     952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     956:	d104      	bne.n	962 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     958:	68bb      	ldr	r3, [r7, #8]
     95a:	4a72      	ldr	r2, [pc, #456]	; (b24 <ftoa+0x1f8>)
     95c:	601a      	str	r2, [r3, #0]
        return 3;
     95e:	2303      	movs	r3, #3
     960:	e0db      	b.n	b1a <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
     962:	68bb      	ldr	r3, [r7, #8]
     964:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
     966:	68fb      	ldr	r3, [r7, #12]
     968:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     96a:	693b      	ldr	r3, [r7, #16]
     96c:	15db      	asrs	r3, r3, #23
     96e:	b2db      	uxtb	r3, r3
     970:	3b7f      	subs	r3, #127	; 0x7f
     972:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     974:	693b      	ldr	r3, [r7, #16]
     976:	f3c3 0316 	ubfx	r3, r3, #0, #23
     97a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     97e:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
     980:	2300      	movs	r3, #0
     982:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     984:	2300      	movs	r3, #0
     986:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     988:	69fb      	ldr	r3, [r7, #28]
     98a:	2b1e      	cmp	r3, #30
     98c:	dd02      	ble.n	994 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     98e:	f06f 0301 	mvn.w	r3, #1
     992:	e0c2      	b.n	b1a <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
     994:	69fb      	ldr	r3, [r7, #28]
     996:	f113 0f17 	cmn.w	r3, #23
     99a:	da02      	bge.n	9a2 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     99c:	f04f 33ff 	mov.w	r3, #4294967295
     9a0:	e0bb      	b.n	b1a <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
     9a2:	69fb      	ldr	r3, [r7, #28]
     9a4:	2b16      	cmp	r3, #22
     9a6:	dd06      	ble.n	9b6 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
     9a8:	69fb      	ldr	r3, [r7, #28]
     9aa:	3b17      	subs	r3, #23
     9ac:	69ba      	ldr	r2, [r7, #24]
     9ae:	fa02 f303 	lsl.w	r3, r2, r3
     9b2:	637b      	str	r3, [r7, #52]	; 0x34
     9b4:	e01a      	b.n	9ec <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     9b6:	69fb      	ldr	r3, [r7, #28]
     9b8:	2b00      	cmp	r3, #0
     9ba:	db0f      	blt.n	9dc <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
     9bc:	69fb      	ldr	r3, [r7, #28]
     9be:	f1c3 0317 	rsb	r3, r3, #23
     9c2:	69ba      	ldr	r2, [r7, #24]
     9c4:	fa42 f303 	asr.w	r3, r2, r3
     9c8:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
     9ca:	69fb      	ldr	r3, [r7, #28]
     9cc:	3301      	adds	r3, #1
     9ce:	69ba      	ldr	r2, [r7, #24]
     9d0:	fa02 f303 	lsl.w	r3, r2, r3
     9d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     9d8:	633b      	str	r3, [r7, #48]	; 0x30
     9da:	e007      	b.n	9ec <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
     9dc:	69bb      	ldr	r3, [r7, #24]
     9de:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     9e2:	69fb      	ldr	r3, [r7, #28]
     9e4:	43db      	mvns	r3, r3
     9e6:	fa42 f303 	asr.w	r3, r2, r3
     9ea:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     9ec:	693b      	ldr	r3, [r7, #16]
     9ee:	2b00      	cmp	r3, #0
     9f0:	da04      	bge.n	9fc <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     9f2:	68bb      	ldr	r3, [r7, #8]
     9f4:	1c5a      	adds	r2, r3, #1
     9f6:	60ba      	str	r2, [r7, #8]
     9f8:	222d      	movs	r2, #45	; 0x2d
     9fa:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     9fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     9fe:	2b00      	cmp	r3, #0
     a00:	d105      	bne.n	a0e <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     a02:	68bb      	ldr	r3, [r7, #8]
     a04:	1c5a      	adds	r2, r3, #1
     a06:	60ba      	str	r2, [r7, #8]
     a08:	2230      	movs	r2, #48	; 0x30
     a0a:	701a      	strb	r2, [r3, #0]
     a0c:	e021      	b.n	a52 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     a10:	2b00      	cmp	r3, #0
     a12:	dd08      	ble.n	a26 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     a16:	ea4f 74e3 	mov.w	r4, r3, asr #31
     a1a:	68ba      	ldr	r2, [r7, #8]
     a1c:	4618      	mov	r0, r3
     a1e:	4621      	mov	r1, r4
     a20:	f7ff fe9b 	bl	75a <uint64_to_str>
     a24:	e011      	b.n	a4a <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     a26:	68bb      	ldr	r3, [r7, #8]
     a28:	1c5a      	adds	r2, r3, #1
     a2a:	60ba      	str	r2, [r7, #8]
     a2c:	222d      	movs	r2, #45	; 0x2d
     a2e:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     a32:	425b      	negs	r3, r3
     a34:	ea4f 74e3 	mov.w	r4, r3, asr #31
     a38:	68ba      	ldr	r2, [r7, #8]
     a3a:	4618      	mov	r0, r3
     a3c:	4621      	mov	r1, r4
     a3e:	f7ff fe8c 	bl	75a <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     a42:	e002      	b.n	a4a <ftoa+0x11e>
        {
            pcBuf++;
     a44:	68bb      	ldr	r3, [r7, #8]
     a46:	3301      	adds	r3, #1
     a48:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
     a4a:	68bb      	ldr	r3, [r7, #8]
     a4c:	781b      	ldrb	r3, [r3, #0]
     a4e:	2b00      	cmp	r3, #0
     a50:	d1f8      	bne.n	a44 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     a52:	68bb      	ldr	r3, [r7, #8]
     a54:	1c5a      	adds	r2, r3, #1
     a56:	60ba      	str	r2, [r7, #8]
     a58:	222e      	movs	r2, #46	; 0x2e
     a5a:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     a5e:	2b00      	cmp	r3, #0
     a60:	d105      	bne.n	a6e <ftoa+0x142>
    {
        *pcBuf++ = '0';
     a62:	68bb      	ldr	r3, [r7, #8]
     a64:	1c5a      	adds	r2, r3, #1
     a66:	60ba      	str	r2, [r7, #8]
     a68:	2230      	movs	r2, #48	; 0x30
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e04f      	b.n	b0e <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     a6e:	68ba      	ldr	r2, [r7, #8]
     a70:	6a3b      	ldr	r3, [r7, #32]
     a72:	1ad3      	subs	r3, r2, r3
     a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a76:	1ad3      	subs	r3, r2, r3
     a78:	3b01      	subs	r3, #1
     a7a:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     a7c:	697a      	ldr	r2, [r7, #20]
     a7e:	687b      	ldr	r3, [r7, #4]
     a80:	4293      	cmp	r3, r2
     a82:	bfa8      	it	ge
     a84:	4613      	movge	r3, r2
     a86:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
     a88:	2300      	movs	r3, #0
     a8a:	62bb      	str	r3, [r7, #40]	; 0x28
     a8c:	e015      	b.n	aba <ftoa+0x18e>
        {
            i32FracPart *= 10;
     a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     a90:	4613      	mov	r3, r2
     a92:	009b      	lsls	r3, r3, #2
     a94:	4413      	add	r3, r2
     a96:	005b      	lsls	r3, r3, #1
     a98:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     a9a:	68bb      	ldr	r3, [r7, #8]
     a9c:	1c5a      	adds	r2, r3, #1
     a9e:	60ba      	str	r2, [r7, #8]
     aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     aa2:	1612      	asrs	r2, r2, #24
     aa4:	b2d2      	uxtb	r2, r2
     aa6:	3230      	adds	r2, #48	; 0x30
     aa8:	b2d2      	uxtb	r2, r2
     aaa:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     aae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     ab2:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
     ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
     ab6:	3301      	adds	r3, #1
     ab8:	62bb      	str	r3, [r7, #40]	; 0x28
     aba:	6aba      	ldr	r2, [r7, #40]	; 0x28
     abc:	697b      	ldr	r3, [r7, #20]
     abe:	429a      	cmp	r2, r3
     ac0:	dbe5      	blt.n	a8e <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
     ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     ac4:	4613      	mov	r3, r2
     ac6:	009b      	lsls	r3, r3, #2
     ac8:	4413      	add	r3, r2
     aca:	005b      	lsls	r3, r3, #1
     acc:	161b      	asrs	r3, r3, #24
     ace:	2b04      	cmp	r3, #4
     ad0:	dd1d      	ble.n	b0e <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
     ad2:	68bb      	ldr	r3, [r7, #8]
     ad4:	3b01      	subs	r3, #1
     ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     ad8:	e015      	b.n	b06 <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
     ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     adc:	781b      	ldrb	r3, [r3, #0]
     ade:	2b2e      	cmp	r3, #46	; 0x2e
     ae0:	d00e      	beq.n	b00 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
     ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ae4:	781b      	ldrb	r3, [r3, #0]
     ae6:	2b39      	cmp	r3, #57	; 0x39
     ae8:	d103      	bne.n	af2 <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
     aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     aec:	2230      	movs	r2, #48	; 0x30
     aee:	701a      	strb	r2, [r3, #0]
     af0:	e006      	b.n	b00 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
     af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     af4:	781b      	ldrb	r3, [r3, #0]
     af6:	3301      	adds	r3, #1
     af8:	b2da      	uxtb	r2, r3
     afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     afc:	701a      	strb	r2, [r3, #0]
                    break;
     afe:	e006      	b.n	b0e <ftoa+0x1e2>
                }
                pcBuftmp--;
     b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     b02:	3b01      	subs	r3, #1
     b04:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     b08:	6a3b      	ldr	r3, [r7, #32]
     b0a:	429a      	cmp	r2, r3
     b0c:	d2e5      	bcs.n	ada <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     b0e:	68bb      	ldr	r3, [r7, #8]
     b10:	2200      	movs	r2, #0
     b12:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     b14:	68ba      	ldr	r2, [r7, #8]
     b16:	6a3b      	ldr	r3, [r7, #32]
     b18:	1ad3      	subs	r3, r2, r3
} // ftoa()
     b1a:	4618      	mov	r0, r3
     b1c:	373c      	adds	r7, #60	; 0x3c
     b1e:	46bd      	mov	sp, r7
     b20:	bd90      	pop	{r4, r7, pc}
     b22:	bf00      	nop
     b24:	00302e30 	.word	0x00302e30

00000b28 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     b28:	b590      	push	{r4, r7, lr}
     b2a:	b095      	sub	sp, #84	; 0x54
     b2c:	af00      	add	r7, sp, #0
     b2e:	60f8      	str	r0, [r7, #12]
     b30:	60b9      	str	r1, [r7, #8]
     b32:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     b34:	2300      	movs	r3, #0
     b36:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     b38:	2300      	movs	r3, #0
     b3a:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     b3c:	e2e3      	b.n	1106 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     b3e:	2306      	movs	r3, #6
     b40:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     b42:	68bb      	ldr	r3, [r7, #8]
     b44:	781b      	ldrb	r3, [r3, #0]
     b46:	2b25      	cmp	r3, #37	; 0x25
     b48:	d01f      	beq.n	b8a <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     b4a:	68fb      	ldr	r3, [r7, #12]
     b4c:	2b00      	cmp	r3, #0
     b4e:	d015      	beq.n	b7c <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     b50:	68bb      	ldr	r3, [r7, #8]
     b52:	781b      	ldrb	r3, [r3, #0]
     b54:	2b0a      	cmp	r3, #10
     b56:	d10b      	bne.n	b70 <am_util_stdio_vsprintf+0x48>
     b58:	4bb1      	ldr	r3, [pc, #708]	; (e20 <am_util_stdio_vsprintf+0x2f8>)
     b5a:	781b      	ldrb	r3, [r3, #0]
     b5c:	2b00      	cmp	r3, #0
     b5e:	d007      	beq.n	b70 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     b60:	68fb      	ldr	r3, [r7, #12]
     b62:	1c5a      	adds	r2, r3, #1
     b64:	60fa      	str	r2, [r7, #12]
     b66:	220d      	movs	r2, #13
     b68:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b6c:	3301      	adds	r3, #1
     b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     b70:	68fb      	ldr	r3, [r7, #12]
     b72:	1c5a      	adds	r2, r3, #1
     b74:	60fa      	str	r2, [r7, #12]
     b76:	68ba      	ldr	r2, [r7, #8]
     b78:	7812      	ldrb	r2, [r2, #0]
     b7a:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     b7c:	68bb      	ldr	r3, [r7, #8]
     b7e:	3301      	adds	r3, #1
     b80:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b84:	3301      	adds	r3, #1
     b86:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     b88:	e2bd      	b.n	1106 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     b8a:	68bb      	ldr	r3, [r7, #8]
     b8c:	3301      	adds	r3, #1
     b8e:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     b90:	2300      	movs	r3, #0
     b92:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     b96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     b9a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     b9e:	2320      	movs	r3, #32
     ba0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     ba4:	68bb      	ldr	r3, [r7, #8]
     ba6:	781b      	ldrb	r3, [r3, #0]
     ba8:	2b30      	cmp	r3, #48	; 0x30
     baa:	d105      	bne.n	bb8 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     bac:	2330      	movs	r3, #48	; 0x30
     bae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     bb2:	68bb      	ldr	r3, [r7, #8]
     bb4:	3301      	adds	r3, #1
     bb6:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     bb8:	f107 0310 	add.w	r3, r7, #16
     bbc:	4619      	mov	r1, r3
     bbe:	68b8      	ldr	r0, [r7, #8]
     bc0:	f7ff fd85 	bl	6ce <decstr_to_int>
     bc4:	4603      	mov	r3, r0
     bc6:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     bc8:	693b      	ldr	r3, [r7, #16]
     bca:	68ba      	ldr	r2, [r7, #8]
     bcc:	4413      	add	r3, r2
     bce:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     bd0:	68bb      	ldr	r3, [r7, #8]
     bd2:	781b      	ldrb	r3, [r3, #0]
     bd4:	2b73      	cmp	r3, #115	; 0x73
     bd6:	d005      	beq.n	be4 <am_util_stdio_vsprintf+0xbc>
     bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     bda:	2b00      	cmp	r3, #0
     bdc:	da02      	bge.n	be4 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     be0:	425b      	negs	r3, r3
     be2:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     be4:	68bb      	ldr	r3, [r7, #8]
     be6:	781b      	ldrb	r3, [r3, #0]
     be8:	2b2e      	cmp	r3, #46	; 0x2e
     bea:	d10e      	bne.n	c0a <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     bec:	68bb      	ldr	r3, [r7, #8]
     bee:	3301      	adds	r3, #1
     bf0:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     bf2:	f107 0310 	add.w	r3, r7, #16
     bf6:	4619      	mov	r1, r3
     bf8:	68b8      	ldr	r0, [r7, #8]
     bfa:	f7ff fd68 	bl	6ce <decstr_to_int>
     bfe:	4603      	mov	r3, r0
     c00:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     c02:	693b      	ldr	r3, [r7, #16]
     c04:	68ba      	ldr	r2, [r7, #8]
     c06:	4413      	add	r3, r2
     c08:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     c0a:	68bb      	ldr	r3, [r7, #8]
     c0c:	781b      	ldrb	r3, [r3, #0]
     c0e:	2b6c      	cmp	r3, #108	; 0x6c
     c10:	d10c      	bne.n	c2c <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     c12:	68bb      	ldr	r3, [r7, #8]
     c14:	3301      	adds	r3, #1
     c16:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     c18:	68bb      	ldr	r3, [r7, #8]
     c1a:	781b      	ldrb	r3, [r3, #0]
     c1c:	2b6c      	cmp	r3, #108	; 0x6c
     c1e:	d105      	bne.n	c2c <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     c20:	68bb      	ldr	r3, [r7, #8]
     c22:	3301      	adds	r3, #1
     c24:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     c26:	2301      	movs	r3, #1
     c28:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     c2c:	68bb      	ldr	r3, [r7, #8]
     c2e:	781b      	ldrb	r3, [r3, #0]
     c30:	3b46      	subs	r3, #70	; 0x46
     c32:	2b32      	cmp	r3, #50	; 0x32
     c34:	f200 8254 	bhi.w	10e0 <am_util_stdio_vsprintf+0x5b8>
     c38:	a201      	add	r2, pc, #4	; (adr r2, c40 <am_util_stdio_vsprintf+0x118>)
     c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     c3e:	bf00      	nop
     c40:	0000106b 	.word	0x0000106b
     c44:	000010e1 	.word	0x000010e1
     c48:	000010e1 	.word	0x000010e1
     c4c:	000010e1 	.word	0x000010e1
     c50:	000010e1 	.word	0x000010e1
     c54:	000010e1 	.word	0x000010e1
     c58:	000010e1 	.word	0x000010e1
     c5c:	000010e1 	.word	0x000010e1
     c60:	000010e1 	.word	0x000010e1
     c64:	000010e1 	.word	0x000010e1
     c68:	000010e1 	.word	0x000010e1
     c6c:	000010e1 	.word	0x000010e1
     c70:	000010e1 	.word	0x000010e1
     c74:	000010e1 	.word	0x000010e1
     c78:	000010e1 	.word	0x000010e1
     c7c:	000010e1 	.word	0x000010e1
     c80:	000010e1 	.word	0x000010e1
     c84:	000010e1 	.word	0x000010e1
     c88:	00000e07 	.word	0x00000e07
     c8c:	000010e1 	.word	0x000010e1
     c90:	000010e1 	.word	0x000010e1
     c94:	000010e1 	.word	0x000010e1
     c98:	000010e1 	.word	0x000010e1
     c9c:	000010e1 	.word	0x000010e1
     ca0:	000010e1 	.word	0x000010e1
     ca4:	000010e1 	.word	0x000010e1
     ca8:	000010e1 	.word	0x000010e1
     cac:	000010e1 	.word	0x000010e1
     cb0:	000010e1 	.word	0x000010e1
     cb4:	00000d0d 	.word	0x00000d0d
     cb8:	00000f33 	.word	0x00000f33
     cbc:	000010e1 	.word	0x000010e1
     cc0:	0000106b 	.word	0x0000106b
     cc4:	000010e1 	.word	0x000010e1
     cc8:	000010e1 	.word	0x000010e1
     ccc:	00000f33 	.word	0x00000f33
     cd0:	000010e1 	.word	0x000010e1
     cd4:	000010e1 	.word	0x000010e1
     cd8:	000010e1 	.word	0x000010e1
     cdc:	000010e1 	.word	0x000010e1
     ce0:	000010e1 	.word	0x000010e1
     ce4:	000010e1 	.word	0x000010e1
     ce8:	000010e1 	.word	0x000010e1
     cec:	000010e1 	.word	0x000010e1
     cf0:	000010e1 	.word	0x000010e1
     cf4:	00000d33 	.word	0x00000d33
     cf8:	000010e1 	.word	0x000010e1
     cfc:	00000ea1 	.word	0x00000ea1
     d00:	000010e1 	.word	0x000010e1
     d04:	000010e1 	.word	0x000010e1
     d08:	00000e01 	.word	0x00000e01
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
     d0c:	687b      	ldr	r3, [r7, #4]
     d0e:	1d1a      	adds	r2, r3, #4
     d10:	607a      	str	r2, [r7, #4]
     d12:	681b      	ldr	r3, [r3, #0]
     d14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
     d18:	68fb      	ldr	r3, [r7, #12]
     d1a:	2b00      	cmp	r3, #0
     d1c:	d005      	beq.n	d2a <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
     d1e:	68fb      	ldr	r3, [r7, #12]
     d20:	1c5a      	adds	r2, r3, #1
     d22:	60fa      	str	r2, [r7, #12]
     d24:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
     d28:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
     d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d2c:	3301      	adds	r3, #1
     d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     d30:	e1e6      	b.n	1100 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
     d32:	687b      	ldr	r3, [r7, #4]
     d34:	1d1a      	adds	r2, r3, #4
     d36:	607a      	str	r2, [r7, #4]
     d38:	681b      	ldr	r3, [r3, #0]
     d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
     d3c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
     d3e:	f7ff fdb4 	bl	8aa <simple_strlen>
     d42:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
     d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d46:	2b00      	cmp	r3, #0
     d48:	dd2e      	ble.n	da8 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
     d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     d4e:	429a      	cmp	r2, r3
     d50:	d22a      	bcs.n	da8 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     d52:	6bba      	ldr	r2, [r7, #56]	; 0x38
     d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d56:	1ad3      	subs	r3, r2, r3
     d58:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     d5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
     d60:	4619      	mov	r1, r3
     d62:	68f8      	ldr	r0, [r7, #12]
     d64:	f7ff fdbc 	bl	8e0 <padbuffer>
     d68:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     d6a:	68fb      	ldr	r3, [r7, #12]
     d6c:	2b00      	cmp	r3, #0
     d6e:	d001      	beq.n	d74 <am_util_stdio_vsprintf+0x24c>
     d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d72:	e000      	b.n	d76 <am_util_stdio_vsprintf+0x24e>
     d74:	2300      	movs	r3, #0
     d76:	68fa      	ldr	r2, [r7, #12]
     d78:	4413      	add	r3, r2
     d7a:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     d80:	4413      	add	r3, r2
     d82:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     d84:	2300      	movs	r3, #0
     d86:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
     d88:	e00e      	b.n	da8 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
     d8a:	68fb      	ldr	r3, [r7, #12]
     d8c:	2b00      	cmp	r3, #0
     d8e:	d005      	beq.n	d9c <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
     d90:	68fb      	ldr	r3, [r7, #12]
     d92:	1c5a      	adds	r2, r3, #1
     d94:	60fa      	str	r2, [r7, #12]
     d96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     d98:	7812      	ldrb	r2, [r2, #0]
     d9a:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
     d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     d9e:	3301      	adds	r3, #1
     da0:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
     da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     da4:	3301      	adds	r3, #1
     da6:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
     da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     daa:	781b      	ldrb	r3, [r3, #0]
     dac:	2b00      	cmp	r3, #0
     dae:	d1ec      	bne.n	d8a <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
     db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     db2:	2b00      	cmp	r3, #0
     db4:	f000 81a1 	beq.w	10fa <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
     db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     dba:	425b      	negs	r3, r3
     dbc:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
     dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     dc2:	429a      	cmp	r2, r3
     dc4:	f080 8199 	bcs.w	10fa <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     dc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
     dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     dcc:	1ad3      	subs	r3, r2, r3
     dce:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     dd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     dd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
     dd6:	4619      	mov	r1, r3
     dd8:	68f8      	ldr	r0, [r7, #12]
     dda:	f7ff fd81 	bl	8e0 <padbuffer>
     dde:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     de0:	68fb      	ldr	r3, [r7, #12]
     de2:	2b00      	cmp	r3, #0
     de4:	d001      	beq.n	dea <am_util_stdio_vsprintf+0x2c2>
     de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     de8:	e000      	b.n	dec <am_util_stdio_vsprintf+0x2c4>
     dea:	2300      	movs	r3, #0
     dec:	68fa      	ldr	r2, [r7, #12]
     dee:	4413      	add	r3, r2
     df0:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     df4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     df6:	4413      	add	r3, r2
     df8:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     dfa:	2300      	movs	r3, #0
     dfc:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
     dfe:	e17c      	b.n	10fa <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
     e00:	2301      	movs	r3, #1
     e02:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     e06:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     e0a:	2b00      	cmp	r3, #0
     e0c:	d00a      	beq.n	e24 <am_util_stdio_vsprintf+0x2fc>
     e0e:	687b      	ldr	r3, [r7, #4]
     e10:	3307      	adds	r3, #7
     e12:	f023 0307 	bic.w	r3, r3, #7
     e16:	f103 0208 	add.w	r2, r3, #8
     e1a:	607a      	str	r2, [r7, #4]
     e1c:	cb18      	ldmia	r3, {r3, r4}
     e1e:	e007      	b.n	e30 <am_util_stdio_vsprintf+0x308>
     e20:	1000110c 	.word	0x1000110c
                                      va_arg(pArgs, uint32_t);
     e24:	687b      	ldr	r3, [r7, #4]
     e26:	1d1a      	adds	r2, r3, #4
     e28:	607a      	str	r2, [r7, #4]
     e2a:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     e2c:	f04f 0400 	mov.w	r4, #0
     e30:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
     e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e36:	2b00      	cmp	r3, #0
     e38:	d01e      	beq.n	e78 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
     e3a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     e3e:	f7ff fc22 	bl	686 <ndigits_in_hex>
     e42:	4602      	mov	r2, r0
     e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e46:	1a9b      	subs	r3, r3, r2
     e48:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     e4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     e4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
     e50:	4619      	mov	r1, r3
     e52:	68f8      	ldr	r0, [r7, #12]
     e54:	f7ff fd44 	bl	8e0 <padbuffer>
     e58:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
     e5a:	68fb      	ldr	r3, [r7, #12]
     e5c:	2b00      	cmp	r3, #0
     e5e:	d001      	beq.n	e64 <am_util_stdio_vsprintf+0x33c>
     e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e62:	e000      	b.n	e66 <am_util_stdio_vsprintf+0x33e>
     e64:	2300      	movs	r3, #0
     e66:	68fa      	ldr	r2, [r7, #12]
     e68:	4413      	add	r3, r2
     e6a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
     e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     e70:	4413      	add	r3, r2
     e72:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
     e74:	2300      	movs	r3, #0
     e76:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
     e78:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
     e7c:	68fa      	ldr	r2, [r7, #12]
     e7e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     e82:	f7ff fcb2 	bl	7ea <uint64_to_hexstr>
     e86:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
     e88:	68fb      	ldr	r3, [r7, #12]
     e8a:	2b00      	cmp	r3, #0
     e8c:	d003      	beq.n	e96 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
     e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e90:	68fa      	ldr	r2, [r7, #12]
     e92:	4413      	add	r3, r2
     e94:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
     e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     e9a:	4413      	add	r3, r2
     e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     e9e:	e12f      	b.n	1100 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     ea0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     ea4:	2b00      	cmp	r3, #0
     ea6:	d008      	beq.n	eba <am_util_stdio_vsprintf+0x392>
     ea8:	687b      	ldr	r3, [r7, #4]
     eaa:	3307      	adds	r3, #7
     eac:	f023 0307 	bic.w	r3, r3, #7
     eb0:	f103 0208 	add.w	r2, r3, #8
     eb4:	607a      	str	r2, [r7, #4]
     eb6:	cb18      	ldmia	r3, {r3, r4}
     eb8:	e005      	b.n	ec6 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
     eba:	687b      	ldr	r3, [r7, #4]
     ebc:	1d1a      	adds	r2, r3, #4
     ebe:	607a      	str	r2, [r7, #4]
     ec0:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     ec2:	f04f 0400 	mov.w	r4, #0
     ec6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
     eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ecc:	2b00      	cmp	r3, #0
     ece:	d01e      	beq.n	f0e <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
     ed0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     ed4:	f7ff fb99 	bl	60a <ndigits_in_u64>
     ed8:	4602      	mov	r2, r0
     eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     edc:	1a9b      	subs	r3, r3, r2
     ede:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     ee0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     ee4:	6bba      	ldr	r2, [r7, #56]	; 0x38
     ee6:	4619      	mov	r1, r3
     ee8:	68f8      	ldr	r0, [r7, #12]
     eea:	f7ff fcf9 	bl	8e0 <padbuffer>
     eee:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
     ef0:	68fb      	ldr	r3, [r7, #12]
     ef2:	2b00      	cmp	r3, #0
     ef4:	d001      	beq.n	efa <am_util_stdio_vsprintf+0x3d2>
     ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ef8:	e000      	b.n	efc <am_util_stdio_vsprintf+0x3d4>
     efa:	2300      	movs	r3, #0
     efc:	68fa      	ldr	r2, [r7, #12]
     efe:	4413      	add	r3, r2
     f00:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
     f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f06:	4413      	add	r3, r2
     f08:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
     f0a:	2300      	movs	r3, #0
     f0c:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
     f0e:	68fa      	ldr	r2, [r7, #12]
     f10:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     f14:	f7ff fc21 	bl	75a <uint64_to_str>
     f18:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
     f1a:	68fb      	ldr	r3, [r7, #12]
     f1c:	2b00      	cmp	r3, #0
     f1e:	d003      	beq.n	f28 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
     f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f22:	68fa      	ldr	r2, [r7, #12]
     f24:	4413      	add	r3, r2
     f26:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
     f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f2c:	4413      	add	r3, r2
     f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     f30:	e0e6      	b.n	1100 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
     f32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     f36:	2b00      	cmp	r3, #0
     f38:	d008      	beq.n	f4c <am_util_stdio_vsprintf+0x424>
     f3a:	687b      	ldr	r3, [r7, #4]
     f3c:	3307      	adds	r3, #7
     f3e:	f023 0307 	bic.w	r3, r3, #7
     f42:	f103 0208 	add.w	r2, r3, #8
     f46:	607a      	str	r2, [r7, #4]
     f48:	cb18      	ldmia	r3, {r3, r4}
     f4a:	e005      	b.n	f58 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
     f4c:	687b      	ldr	r3, [r7, #4]
     f4e:	1d1a      	adds	r2, r3, #4
     f50:	607a      	str	r2, [r7, #4]
     f52:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
     f54:	ea4f 74e3 	mov.w	r4, r3, asr #31
     f58:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
     f5c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
     f60:	2b00      	cmp	r3, #0
     f62:	f174 0300 	sbcs.w	r3, r4, #0
     f66:	da0a      	bge.n	f7e <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
     f68:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
     f6c:	425b      	negs	r3, r3
     f6e:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     f72:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
     f76:	2301      	movs	r3, #1
     f78:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
     f7c:	e006      	b.n	f8c <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
     f7e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
     f82:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
     f86:	2300      	movs	r3, #0
     f88:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
     f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f8e:	2b00      	cmp	r3, #0
     f90:	d04a      	beq.n	1028 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
     f92:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
     f96:	4618      	mov	r0, r3
     f98:	4621      	mov	r1, r4
     f9a:	f7ff fb57 	bl	64c <ndigits_in_i64>
     f9e:	4602      	mov	r2, r0
     fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fa2:	1a9b      	subs	r3, r3, r2
     fa4:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
     fa6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
     faa:	2b00      	cmp	r3, #0
     fac:	d011      	beq.n	fd2 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
     fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fb0:	3b01      	subs	r3, #1
     fb2:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
     fb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     fb8:	2b30      	cmp	r3, #48	; 0x30
     fba:	d10a      	bne.n	fd2 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
     fbc:	68fb      	ldr	r3, [r7, #12]
     fbe:	2b00      	cmp	r3, #0
     fc0:	d004      	beq.n	fcc <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
     fc2:	68fb      	ldr	r3, [r7, #12]
     fc4:	1c5a      	adds	r2, r3, #1
     fc6:	60fa      	str	r2, [r7, #12]
     fc8:	222d      	movs	r2, #45	; 0x2d
     fca:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
     fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fce:	3301      	adds	r3, #1
     fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     fd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     fd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
     fd8:	4619      	mov	r1, r3
     fda:	68f8      	ldr	r0, [r7, #12]
     fdc:	f7ff fc80 	bl	8e0 <padbuffer>
     fe0:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
     fe2:	68fb      	ldr	r3, [r7, #12]
     fe4:	2b00      	cmp	r3, #0
     fe6:	d001      	beq.n	fec <am_util_stdio_vsprintf+0x4c4>
     fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fea:	e000      	b.n	fee <am_util_stdio_vsprintf+0x4c6>
     fec:	2300      	movs	r3, #0
     fee:	68fa      	ldr	r2, [r7, #12]
     ff0:	4413      	add	r3, r2
     ff2:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
     ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ff6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     ff8:	4413      	add	r3, r2
     ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
     ffc:	2300      	movs	r3, #0
     ffe:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    1000:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1004:	2b00      	cmp	r3, #0
    1006:	d01e      	beq.n	1046 <am_util_stdio_vsprintf+0x51e>
    1008:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    100c:	2b20      	cmp	r3, #32
    100e:	d11a      	bne.n	1046 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    1010:	68fb      	ldr	r3, [r7, #12]
    1012:	2b00      	cmp	r3, #0
    1014:	d004      	beq.n	1020 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    1016:	68fb      	ldr	r3, [r7, #12]
    1018:	1c5a      	adds	r2, r3, #1
    101a:	60fa      	str	r2, [r7, #12]
    101c:	222d      	movs	r2, #45	; 0x2d
    101e:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    1020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1022:	3301      	adds	r3, #1
    1024:	63fb      	str	r3, [r7, #60]	; 0x3c
    1026:	e00e      	b.n	1046 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    1028:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    102c:	2b00      	cmp	r3, #0
    102e:	d00a      	beq.n	1046 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    1030:	68fb      	ldr	r3, [r7, #12]
    1032:	2b00      	cmp	r3, #0
    1034:	d004      	beq.n	1040 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    1036:	68fb      	ldr	r3, [r7, #12]
    1038:	1c5a      	adds	r2, r3, #1
    103a:	60fa      	str	r2, [r7, #12]
    103c:	222d      	movs	r2, #45	; 0x2d
    103e:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    1040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1042:	3301      	adds	r3, #1
    1044:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1046:	68fa      	ldr	r2, [r7, #12]
    1048:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    104c:	f7ff fb85 	bl	75a <uint64_to_str>
    1050:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1052:	68fb      	ldr	r3, [r7, #12]
    1054:	2b00      	cmp	r3, #0
    1056:	d003      	beq.n	1060 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    1058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    105a:	68fa      	ldr	r2, [r7, #12]
    105c:	4413      	add	r3, r2
    105e:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1062:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1064:	4413      	add	r3, r2
    1066:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1068:	e04a      	b.n	1100 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    106a:	68fb      	ldr	r3, [r7, #12]
    106c:	2b00      	cmp	r3, #0
    106e:	d046      	beq.n	10fe <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    1070:	687b      	ldr	r3, [r7, #4]
    1072:	3307      	adds	r3, #7
    1074:	f023 0307 	bic.w	r3, r3, #7
    1078:	f103 0208 	add.w	r2, r3, #8
    107c:	607a      	str	r2, [r7, #4]
    107e:	cb18      	ldmia	r3, {r3, r4}
    1080:	4618      	mov	r0, r3
    1082:	4621      	mov	r1, r4
    1084:	f7ff f81c 	bl	c0 <__aeabi_d2f>
    1088:	4603      	mov	r3, r0
    108a:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    108c:	68fb      	ldr	r3, [r7, #12]
    108e:	2214      	movs	r2, #20
    1090:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    1092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1094:	68f9      	ldr	r1, [r7, #12]
    1096:	6978      	ldr	r0, [r7, #20]
    1098:	f7ff fc48 	bl	92c <ftoa>
    109c:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    109e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10a0:	2b00      	cmp	r3, #0
    10a2:	da14      	bge.n	10ce <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    10a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10a6:	f1b3 3fff 	cmp.w	r3, #4294967295
    10aa:	d102      	bne.n	10b2 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    10ac:	4b1e      	ldr	r3, [pc, #120]	; (1128 <am_util_stdio_vsprintf+0x600>)
    10ae:	62bb      	str	r3, [r7, #40]	; 0x28
    10b0:	e008      	b.n	10c4 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    10b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10b4:	f113 0f02 	cmn.w	r3, #2
    10b8:	d102      	bne.n	10c0 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    10ba:	4b1c      	ldr	r3, [pc, #112]	; (112c <am_util_stdio_vsprintf+0x604>)
    10bc:	62bb      	str	r3, [r7, #40]	; 0x28
    10be:	e001      	b.n	10c4 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    10c0:	4b1b      	ldr	r3, [pc, #108]	; (1130 <am_util_stdio_vsprintf+0x608>)
    10c2:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    10c4:	68fb      	ldr	r3, [r7, #12]
    10c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    10c8:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    10ca:	2303      	movs	r3, #3
    10cc:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    10ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10d2:	4413      	add	r3, r2
    10d4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    10d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10d8:	68fa      	ldr	r2, [r7, #12]
    10da:	4413      	add	r3, r2
    10dc:	60fb      	str	r3, [r7, #12]
                }
                break;
    10de:	e00e      	b.n	10fe <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    10e0:	68fb      	ldr	r3, [r7, #12]
    10e2:	2b00      	cmp	r3, #0
    10e4:	d005      	beq.n	10f2 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    10e6:	68fb      	ldr	r3, [r7, #12]
    10e8:	1c5a      	adds	r2, r3, #1
    10ea:	60fa      	str	r2, [r7, #12]
    10ec:	68ba      	ldr	r2, [r7, #8]
    10ee:	7812      	ldrb	r2, [r2, #0]
    10f0:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    10f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10f4:	3301      	adds	r3, #1
    10f6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    10f8:	e002      	b.n	1100 <am_util_stdio_vsprintf+0x5d8>
                break;
    10fa:	bf00      	nop
    10fc:	e000      	b.n	1100 <am_util_stdio_vsprintf+0x5d8>
                break;
    10fe:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    1100:	68bb      	ldr	r3, [r7, #8]
    1102:	3301      	adds	r3, #1
    1104:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    1106:	68bb      	ldr	r3, [r7, #8]
    1108:	781b      	ldrb	r3, [r3, #0]
    110a:	2b00      	cmp	r3, #0
    110c:	f47f ad17 	bne.w	b3e <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    1110:	68fb      	ldr	r3, [r7, #12]
    1112:	2b00      	cmp	r3, #0
    1114:	d002      	beq.n	111c <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    1116:	68fb      	ldr	r3, [r7, #12]
    1118:	2200      	movs	r2, #0
    111a:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    111c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    111e:	4618      	mov	r0, r3
    1120:	3754      	adds	r7, #84	; 0x54
    1122:	46bd      	mov	sp, r7
    1124:	bd90      	pop	{r4, r7, pc}
    1126:	bf00      	nop
    1128:	00302e30 	.word	0x00302e30
    112c:	00232e23 	.word	0x00232e23
    1130:	003f2e3f 	.word	0x003f2e3f

00001134 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    1134:	b40f      	push	{r0, r1, r2, r3}
    1136:	b580      	push	{r7, lr}
    1138:	b082      	sub	sp, #8
    113a:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    113c:	f107 0314 	add.w	r3, r7, #20
    1140:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    1142:	683a      	ldr	r2, [r7, #0]
    1144:	6939      	ldr	r1, [r7, #16]
    1146:	4808      	ldr	r0, [pc, #32]	; (1168 <am_util_stdio_printf+0x34>)
    1148:	f7ff fcee 	bl	b28 <am_util_stdio_vsprintf>
    114c:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    114e:	4b07      	ldr	r3, [pc, #28]	; (116c <am_util_stdio_printf+0x38>)
    1150:	681b      	ldr	r3, [r3, #0]
    1152:	4805      	ldr	r0, [pc, #20]	; (1168 <am_util_stdio_printf+0x34>)
    1154:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    1156:	687b      	ldr	r3, [r7, #4]
}
    1158:	4618      	mov	r0, r3
    115a:	3708      	adds	r7, #8
    115c:	46bd      	mov	sp, r7
    115e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    1162:	b004      	add	sp, #16
    1164:	4770      	bx	lr
    1166:	bf00      	nop
    1168:	1000100c 	.word	0x1000100c
    116c:	10001120 	.word	0x10001120

00001170 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    1170:	b580      	push	{r7, lr}
    1172:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    1174:	4802      	ldr	r0, [pc, #8]	; (1180 <am_util_stdio_terminal_clear+0x10>)
    1176:	f7ff ffdd 	bl	1134 <am_util_stdio_printf>
}
    117a:	bf00      	nop
    117c:	bd80      	pop	{r7, pc}
    117e:	bf00      	nop
    1180:	00001d30 	.word	0x00001d30

00001184 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1184:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    1186:	f000 fc1b 	bl	19c0 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    118a:	f000 fc87 	bl	1a9c <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    118e:	f000 fda7 	bl	1ce0 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    1192:	2001      	movs	r0, #1
    1194:	f000 fc92 	bl	1abc <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1198:	2001      	movs	r0, #1
    119a:	f000 f943 	bl	1424 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    119e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    11a2:	f000 bc99 	b.w	1ad8 <am_hal_rtc_osc_disable>
    11a6:	bf00      	nop

000011a8 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    11a8:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    11aa:	4b17      	ldr	r3, [pc, #92]	; (1208 <am_bsp_debug_printf_enable+0x60>)
    11ac:	681c      	ldr	r4, [r3, #0]
    11ae:	f014 0401 	ands.w	r4, r4, #1
{
    11b2:	b087      	sub	sp, #28
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    11b4:	d001      	beq.n	11ba <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    11b6:	b007      	add	sp, #28
    11b8:	bd30      	pop	{r4, r5, pc}
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    11ba:	4a14      	ldr	r2, [pc, #80]	; (120c <am_bsp_debug_printf_enable+0x64>)
    11bc:	4914      	ldr	r1, [pc, #80]	; (1210 <am_bsp_debug_printf_enable+0x68>)
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    11be:	4d15      	ldr	r5, [pc, #84]	; (1214 <am_bsp_debug_printf_enable+0x6c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    11c0:	6011      	str	r1, [r2, #0]
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    11c2:	a806      	add	r0, sp, #24
    11c4:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    11c8:	f000 fd2c 	bl	1c24 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    11cc:	f000 fa76 	bl	16bc <am_hal_interrupt_master_disable>
    11d0:	4a11      	ldr	r2, [pc, #68]	; (1218 <am_bsp_debug_printf_enable+0x70>)
    11d2:	9000      	str	r0, [sp, #0]
    11d4:	4d11      	ldr	r5, [pc, #68]	; (121c <am_bsp_debug_printf_enable+0x74>)
    11d6:	4912      	ldr	r1, [pc, #72]	; (1220 <am_bsp_debug_printf_enable+0x78>)
    11d8:	2073      	movs	r0, #115	; 0x73
    11da:	6010      	str	r0, [r2, #0]
    11dc:	682b      	ldr	r3, [r5, #0]
    11de:	4811      	ldr	r0, [pc, #68]	; (1224 <am_bsp_debug_printf_enable+0x7c>)
    11e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    11e4:	602b      	str	r3, [r5, #0]
    11e6:	6805      	ldr	r5, [r0, #0]
    11e8:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    11ec:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    11f0:	6003      	str	r3, [r0, #0]
    11f2:	6808      	ldr	r0, [r1, #0]
    11f4:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    11f8:	600d      	str	r5, [r1, #0]
    11fa:	6014      	str	r4, [r2, #0]
    11fc:	9800      	ldr	r0, [sp, #0]
    11fe:	f000 fa61 	bl	16c4 <am_hal_interrupt_master_set>
}
    1202:	b007      	add	sp, #28
    1204:	bd30      	pop	{r4, r5, pc}
    1206:	bf00      	nop
    1208:	10001110 	.word	0x10001110
    120c:	e0000e80 	.word	0xe0000e80
    1210:	00150511 	.word	0x00150511
    1214:	000f4240 	.word	0x000f4240
    1218:	40010060 	.word	0x40010060
    121c:	40010054 	.word	0x40010054
    1220:	40010108 	.word	0x40010108
    1224:	40010028 	.word	0x40010028

00001228 <am_bsp_debug_printf_disable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    1228:	b530      	push	{r4, r5, lr}
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    122a:	4b14      	ldr	r3, [pc, #80]	; (127c <am_bsp_debug_printf_disable+0x54>)
    122c:	681c      	ldr	r4, [r3, #0]
    122e:	f014 0401 	ands.w	r4, r4, #1
{
    1232:	b083      	sub	sp, #12
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1234:	d120      	bne.n	1278 <am_bsp_debug_printf_disable+0x50>
    }

    //
    // Disable the TPIU
    //
    am_hal_itm_not_busy();
    1236:	f000 fa75 	bl	1724 <am_hal_itm_not_busy>
    am_hal_gpio_pin_config(AM_BSP_GPIO_ITM_SWO, AM_HAL_GPIO_OUTPUT);
    123a:	f000 fa3f 	bl	16bc <am_hal_interrupt_master_disable>
    123e:	4a10      	ldr	r2, [pc, #64]	; (1280 <am_bsp_debug_printf_disable+0x58>)
    1240:	9001      	str	r0, [sp, #4]
    1242:	4d10      	ldr	r5, [pc, #64]	; (1284 <am_bsp_debug_printf_disable+0x5c>)
    1244:	4910      	ldr	r1, [pc, #64]	; (1288 <am_bsp_debug_printf_disable+0x60>)
    1246:	2073      	movs	r0, #115	; 0x73
    1248:	6010      	str	r0, [r2, #0]
    124a:	682b      	ldr	r3, [r5, #0]
    124c:	480f      	ldr	r0, [pc, #60]	; (128c <am_bsp_debug_printf_disable+0x64>)
    124e:	f023 0c70 	bic.w	ip, r3, #112	; 0x70
    1252:	f04c 0320 	orr.w	r3, ip, #32
    1256:	602b      	str	r3, [r5, #0]
    1258:	6805      	ldr	r5, [r0, #0]
    125a:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    125e:	f44c 53c0 	orr.w	r3, ip, #6144	; 0x1800
    1262:	6003      	str	r3, [r0, #0]
    1264:	6808      	ldr	r0, [r1, #0]
    1266:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    126a:	600d      	str	r5, [r1, #0]
    126c:	6014      	str	r4, [r2, #0]
    126e:	9801      	ldr	r0, [sp, #4]
    1270:	f000 fa28 	bl	16c4 <am_hal_interrupt_master_set>
    am_hal_tpiu_disable();
    1274:	f000 fd2e 	bl	1cd4 <am_hal_tpiu_disable>
}
    1278:	b003      	add	sp, #12
    127a:	bd30      	pop	{r4, r5, pc}
    127c:	10001110 	.word	0x10001110
    1280:	40010060 	.word	0x40010060
    1284:	40010054 	.word	0x40010054
    1288:	40010108 	.word	0x40010108
    128c:	40010028 	.word	0x40010028

00001290 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    1290:	f000 ba52 	b.w	1738 <am_hal_itm_print>

00001294 <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    1294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1296:	4605      	mov	r5, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1298:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    129c:	78ab      	ldrb	r3, [r5, #2]
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    129e:	786c      	ldrb	r4, [r5, #1]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    12a0:	78ef      	ldrb	r7, [r5, #3]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    12a2:	792e      	ldrb	r6, [r5, #4]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    12a4:	79a9      	ldrb	r1, [r5, #6]
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    12a6:	009a      	lsls	r2, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    12a8:	0064      	lsls	r4, r4, #1
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    12aa:	f002 0204 	and.w	r2, r2, #4
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    12ae:	f004 0402 	and.w	r4, r4, #2
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    12b2:	4314      	orrs	r4, r2
    12b4:	f047 0701 	orr.w	r7, r7, #1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    12b8:	79ea      	ldrb	r2, [r5, #7]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    12ba:	01f6      	lsls	r6, r6, #7
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    12bc:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    12be:	b2f6      	uxtb	r6, r6
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    12c0:	7a2f      	ldrb	r7, [r5, #8]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    12c2:	0289      	lsls	r1, r1, #10
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    12c4:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    12c6:	f401 6180 	and.w	r1, r1, #1024	; 0x400
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    12ca:	7a6e      	ldrb	r6, [r5, #9]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    12cc:	02d2      	lsls	r2, r2, #11
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    12ce:	430c      	orrs	r4, r1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    12d0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    12d4:	7aa9      	ldrb	r1, [r5, #10]
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    12d6:	033f      	lsls	r7, r7, #12
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    12d8:	4314      	orrs	r4, r2
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    12da:	b2bf      	uxth	r7, r7
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    12dc:	0436      	lsls	r6, r6, #16
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    12de:	7aea      	ldrb	r2, [r5, #11]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    12e0:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    12e2:	0509      	lsls	r1, r1, #20
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    12e4:	f406 2770 	and.w	r7, r6, #983040	; 0xf0000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    12e8:	0612      	lsls	r2, r2, #24
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    12ea:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    12ec:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    12f0:	009b      	lsls	r3, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    12f2:	f002 7780 	and.w	r7, r2, #16777216	; 0x1000000
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    12f6:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    12f8:	f003 0108 	and.w	r1, r3, #8
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    12fc:	433c      	orrs	r4, r7
    12fe:	430c      	orrs	r4, r1
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1300:	f000 fa58 	bl	17b4 <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1304:	482c      	ldr	r0, [pc, #176]	; (13b8 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1306:	4b2d      	ldr	r3, [pc, #180]	; (13bc <am_hal_cachectrl_enable+0x128>)
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1308:	6004      	str	r4, [r0, #0]
    130a:	2232      	movs	r2, #50	; 0x32
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    130c:	681e      	ldr	r6, [r3, #0]
    130e:	0777      	lsls	r7, r6, #29
    1310:	d41e      	bmi.n	1350 <am_hal_cachectrl_enable+0xbc>
    1312:	681f      	ldr	r7, [r3, #0]
    1314:	077e      	lsls	r6, r7, #29
    1316:	f102 32ff 	add.w	r2, r2, #4294967295
    131a:	d419      	bmi.n	1350 <am_hal_cachectrl_enable+0xbc>
    131c:	6819      	ldr	r1, [r3, #0]
    131e:	074f      	lsls	r7, r1, #29
    1320:	d416      	bmi.n	1350 <am_hal_cachectrl_enable+0xbc>
    1322:	6818      	ldr	r0, [r3, #0]
    1324:	0746      	lsls	r6, r0, #29
    1326:	d413      	bmi.n	1350 <am_hal_cachectrl_enable+0xbc>
    1328:	681e      	ldr	r6, [r3, #0]
    132a:	0770      	lsls	r0, r6, #29
    132c:	d410      	bmi.n	1350 <am_hal_cachectrl_enable+0xbc>
    132e:	681f      	ldr	r7, [r3, #0]
    1330:	0779      	lsls	r1, r7, #29
    1332:	d40d      	bmi.n	1350 <am_hal_cachectrl_enable+0xbc>
    1334:	6819      	ldr	r1, [r3, #0]
    1336:	074f      	lsls	r7, r1, #29
    1338:	d40a      	bmi.n	1350 <am_hal_cachectrl_enable+0xbc>
    133a:	6818      	ldr	r0, [r3, #0]
    133c:	0746      	lsls	r6, r0, #29
    133e:	d407      	bmi.n	1350 <am_hal_cachectrl_enable+0xbc>
    1340:	681e      	ldr	r6, [r3, #0]
    1342:	0770      	lsls	r0, r6, #29
    1344:	d404      	bmi.n	1350 <am_hal_cachectrl_enable+0xbc>
    1346:	681f      	ldr	r7, [r3, #0]
    1348:	0779      	lsls	r1, r7, #29
    134a:	d401      	bmi.n	1350 <am_hal_cachectrl_enable+0xbc>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    134c:	3a09      	subs	r2, #9
    134e:	d1dd      	bne.n	130c <am_hal_cachectrl_enable+0x78>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    1350:	4b1a      	ldr	r3, [pc, #104]	; (13bc <am_hal_cachectrl_enable+0x128>)
    1352:	681a      	ldr	r2, [r3, #0]
    1354:	f042 0101 	orr.w	r1, r2, #1
    1358:	6019      	str	r1, [r3, #0]
    135a:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    135c:	6818      	ldr	r0, [r3, #0]
    135e:	0740      	lsls	r0, r0, #29
    1360:	d41e      	bmi.n	13a0 <am_hal_cachectrl_enable+0x10c>
    1362:	681e      	ldr	r6, [r3, #0]
    1364:	0771      	lsls	r1, r6, #29
    1366:	f102 32ff 	add.w	r2, r2, #4294967295
    136a:	d419      	bmi.n	13a0 <am_hal_cachectrl_enable+0x10c>
    136c:	681f      	ldr	r7, [r3, #0]
    136e:	077f      	lsls	r7, r7, #29
    1370:	d416      	bmi.n	13a0 <am_hal_cachectrl_enable+0x10c>
    1372:	6819      	ldr	r1, [r3, #0]
    1374:	074e      	lsls	r6, r1, #29
    1376:	d413      	bmi.n	13a0 <am_hal_cachectrl_enable+0x10c>
    1378:	6818      	ldr	r0, [r3, #0]
    137a:	0740      	lsls	r0, r0, #29
    137c:	d410      	bmi.n	13a0 <am_hal_cachectrl_enable+0x10c>
    137e:	681e      	ldr	r6, [r3, #0]
    1380:	0771      	lsls	r1, r6, #29
    1382:	d40d      	bmi.n	13a0 <am_hal_cachectrl_enable+0x10c>
    1384:	681f      	ldr	r7, [r3, #0]
    1386:	077f      	lsls	r7, r7, #29
    1388:	d40a      	bmi.n	13a0 <am_hal_cachectrl_enable+0x10c>
    138a:	6819      	ldr	r1, [r3, #0]
    138c:	074e      	lsls	r6, r1, #29
    138e:	d407      	bmi.n	13a0 <am_hal_cachectrl_enable+0x10c>
    1390:	6818      	ldr	r0, [r3, #0]
    1392:	0740      	lsls	r0, r0, #29
    1394:	d404      	bmi.n	13a0 <am_hal_cachectrl_enable+0x10c>
    1396:	681e      	ldr	r6, [r3, #0]
    1398:	0771      	lsls	r1, r6, #29
    139a:	d401      	bmi.n	13a0 <am_hal_cachectrl_enable+0x10c>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    139c:	3a09      	subs	r2, #9
    139e:	d1dd      	bne.n	135c <am_hal_cachectrl_enable+0xc8>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    13a0:	796d      	ldrb	r5, [r5, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    13a2:	4f05      	ldr	r7, [pc, #20]	; (13b8 <am_hal_cachectrl_enable+0x124>)
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );
    13a4:	022b      	lsls	r3, r5, #8
    13a6:	f403 7100 	and.w	r1, r3, #512	; 0x200
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    13aa:	f403 7280 	and.w	r2, r3, #256	; 0x100
    13ae:	4311      	orrs	r1, r2
    13b0:	430c      	orrs	r4, r1
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    13b2:	603c      	str	r4, [r7, #0]
    13b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13b6:	bf00      	nop
    13b8:	40018000 	.word	0x40018000
    13bc:	40018008 	.word	0x40018008

000013c0 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    13c0:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    13c2:	4604      	mov	r4, r0
    13c4:	b120      	cbz	r0, 13d0 <am_hal_clkgen_sysclk_select+0x10>
    13c6:	4a06      	ldr	r2, [pc, #24]	; (13e0 <am_hal_clkgen_sysclk_select+0x20>)
    13c8:	4806      	ldr	r0, [pc, #24]	; (13e4 <am_hal_clkgen_sysclk_select+0x24>)
    13ca:	2153      	movs	r1, #83	; 0x53
    13cc:	f000 f944 	bl	1658 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    13d0:	4b05      	ldr	r3, [pc, #20]	; (13e8 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the required operating value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    13d2:	4906      	ldr	r1, [pc, #24]	; (13ec <am_hal_clkgen_sysclk_select+0x2c>)
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    13d4:	2047      	movs	r0, #71	; 0x47

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    13d6:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    13d8:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    13da:	600c      	str	r4, [r1, #0]
    AM_REG(CLKGEN, CLKKEY) = 0;
    13dc:	601a      	str	r2, [r3, #0]
    13de:	bd10      	pop	{r4, pc}
    13e0:	00001d50 	.word	0x00001d50
    13e4:	00001d88 	.word	0x00001d88
    13e8:	40004014 	.word	0x40004014
    13ec:	40004018 	.word	0x40004018

000013f0 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    13f0:	4b04      	ldr	r3, [pc, #16]	; (1404 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    13f2:	4905      	ldr	r1, [pc, #20]	; (1408 <am_hal_clkgen_sysclk_get+0x18>)
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    13f4:	681a      	ldr	r2, [r3, #0]
            return 48000000;
    13f6:	4805      	ldr	r0, [pc, #20]	; (140c <am_hal_clkgen_sysclk_get+0x1c>)
    switch ( ui32ClockSetting )
    13f8:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    13fc:	bf08      	it	eq
    13fe:	4608      	moveq	r0, r1
    1400:	4770      	bx	lr
    1402:	bf00      	nop
    1404:	40004018 	.word	0x40004018
    1408:	02dc6c00 	.word	0x02dc6c00
    140c:	016e3600 	.word	0x016e3600

00001410 <am_hal_clkgen_osc_start>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_start(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1410:	0783      	lsls	r3, r0, #30
    1412:	d004      	beq.n	141e <am_hal_clkgen_osc_start+0xe>
    {
        //
        // Start the oscillator(s).
        // Note that these bits are cleared in order to enable the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) &= ~ui32OscFlags;
    1414:	4a02      	ldr	r2, [pc, #8]	; (1420 <am_hal_clkgen_osc_start+0x10>)
    1416:	6813      	ldr	r3, [r2, #0]
    1418:	ea23 0000 	bic.w	r0, r3, r0
    141c:	6010      	str	r0, [r2, #0]
    141e:	4770      	bx	lr
    1420:	4000400c 	.word	0x4000400c

00001424 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1424:	0783      	lsls	r3, r0, #30
    1426:	d003      	beq.n	1430 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    1428:	4b02      	ldr	r3, [pc, #8]	; (1434 <am_hal_clkgen_osc_stop+0x10>)
    142a:	681a      	ldr	r2, [r3, #0]
    142c:	4310      	orrs	r0, r2
    142e:	6018      	str	r0, [r3, #0]
    1430:	4770      	bx	lr
    1432:	bf00      	nop
    1434:	4000400c 	.word	0x4000400c

00001438 <am_hal_ctimer_config>:
//
//*****************************************************************************
void
am_hal_ctimer_config(uint32_t ui32TimerNumber,
                     am_hal_ctimer_config_t *psConfig)
{
    1438:	b530      	push	{r4, r5, lr}
    143a:	4604      	mov	r4, r0
                      (psConfig->ui32TimerBConfig << 16) );

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    143c:	6808      	ldr	r0, [r1, #0]
                      (psConfig->ui32TimerBConfig << 16) );
    143e:	688a      	ldr	r2, [r1, #8]
    ui32ConfigVal = ( (psConfig->ui32TimerAConfig)  |
    1440:	684b      	ldr	r3, [r1, #4]
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    1442:	2800      	cmp	r0, #0
    ui32ConfigVal = ( (psConfig->ui32TimerAConfig)  |
    1444:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    1448:	bf14      	ite	ne
    144a:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
    144e:	2500      	moveq	r5, #0
{
    1450:	b083      	sub	sp, #12
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    1452:	430d      	orrs	r5, r1

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1454:	f000 f932 	bl	16bc <am_hal_interrupt_master_disable>

    //
    // Find the correct register to write.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    1458:	0124      	lsls	r4, r4, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    145a:	4a2a      	ldr	r2, [pc, #168]	; (1504 <am_hal_ctimer_config+0xcc>)
    AM_CRITICAL_BEGIN_ASM
    145c:	9001      	str	r0, [sp, #4]
    ui32TimerASrc = AM_BFR(CTIMER, STCFG, CLKSEL);
    145e:	482a      	ldr	r0, [pc, #168]	; (1508 <am_hal_ctimer_config+0xd0>)

    //
    // Write our configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    1460:	50a5      	str	r5, [r4, r2]
    ui32TimerASrc = AM_BFR(CTIMER, STCFG, CLKSEL);
    1462:	6805      	ldr	r5, [r0, #0]
    1464:	f005 0c0f 	and.w	ip, r5, #15
    if ( (ui32TimerASrc == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV16)   ||
    1468:	f10c 33ff 	add.w	r3, ip, #4294967295
    146c:	2b01      	cmp	r3, #1
    146e:	d93f      	bls.n	14f0 <am_hal_ctimer_config+0xb8>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    1470:	6811      	ldr	r1, [r2, #0]
    1472:	f3c1 0e44 	ubfx	lr, r1, #1, #5
    1476:	f10e 34ff 	add.w	r4, lr, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    147a:	f3c1 4244 	ubfx	r2, r1, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    147e:	2c04      	cmp	r4, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1480:	f102 30ff 	add.w	r0, r2, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1484:	d934      	bls.n	14f0 <am_hal_ctimer_config+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    1486:	2804      	cmp	r0, #4
    1488:	d932      	bls.n	14f0 <am_hal_ctimer_config+0xb8>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    148a:	4d20      	ldr	r5, [pc, #128]	; (150c <am_hal_ctimer_config+0xd4>)
    148c:	682b      	ldr	r3, [r5, #0]
    148e:	f3c3 0c44 	ubfx	ip, r3, #1, #5
    1492:	f10c 31ff 	add.w	r1, ip, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1496:	f3c3 4e44 	ubfx	lr, r3, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    149a:	2904      	cmp	r1, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    149c:	f10e 34ff 	add.w	r4, lr, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    14a0:	d926      	bls.n	14f0 <am_hal_ctimer_config+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    14a2:	2c04      	cmp	r4, #4
    14a4:	d924      	bls.n	14f0 <am_hal_ctimer_config+0xb8>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    14a6:	4a1a      	ldr	r2, [pc, #104]	; (1510 <am_hal_ctimer_config+0xd8>)
    14a8:	6810      	ldr	r0, [r2, #0]
    14aa:	f3c0 0544 	ubfx	r5, r0, #1, #5
    14ae:	1e69      	subs	r1, r5, #1
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    14b0:	f3c0 4344 	ubfx	r3, r0, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    14b4:	2904      	cmp	r1, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    14b6:	f103 34ff 	add.w	r4, r3, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    14ba:	d919      	bls.n	14f0 <am_hal_ctimer_config+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    14bc:	2c04      	cmp	r4, #4
    14be:	d917      	bls.n	14f0 <am_hal_ctimer_config+0xb8>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    14c0:	4a14      	ldr	r2, [pc, #80]	; (1514 <am_hal_ctimer_config+0xdc>)
    14c2:	6810      	ldr	r0, [r2, #0]
    14c4:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    14c8:	f10c 35ff 	add.w	r5, ip, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    14cc:	f3c0 4e44 	ubfx	lr, r0, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    14d0:	2d04      	cmp	r5, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    14d2:	f10e 31ff 	add.w	r1, lr, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    14d6:	d90b      	bls.n	14f0 <am_hal_ctimer_config+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    14d8:	2904      	cmp	r1, #4
    14da:	d909      	bls.n	14f0 <am_hal_ctimer_config+0xb8>
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    }
    else
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 1);
    14dc:	4c0e      	ldr	r4, [pc, #56]	; (1518 <am_hal_ctimer_config+0xe0>)
    14de:	6823      	ldr	r3, [r4, #0]
    14e0:	f043 0204 	orr.w	r2, r3, #4
    14e4:	6022      	str	r2, [r4, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    14e6:	9801      	ldr	r0, [sp, #4]
    14e8:	f000 f8ec 	bl	16c4 <am_hal_interrupt_master_set>

} // am_hal_ctimer_config()
    14ec:	b003      	add	sp, #12
    14ee:	bd30      	pop	{r4, r5, pc}
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    14f0:	4809      	ldr	r0, [pc, #36]	; (1518 <am_hal_ctimer_config+0xe0>)
    14f2:	6805      	ldr	r5, [r0, #0]
    14f4:	f025 0104 	bic.w	r1, r5, #4
    14f8:	6001      	str	r1, [r0, #0]
    AM_CRITICAL_END_ASM
    14fa:	9801      	ldr	r0, [sp, #4]
    14fc:	f000 f8e2 	bl	16c4 <am_hal_interrupt_master_set>
} // am_hal_ctimer_config()
    1500:	b003      	add	sp, #12
    1502:	bd30      	pop	{r4, r5, pc}
    1504:	4000800c 	.word	0x4000800c
    1508:	40008100 	.word	0x40008100
    150c:	4000801c 	.word	0x4000801c
    1510:	4000802c 	.word	0x4000802c
    1514:	4000803c 	.word	0x4000803c
    1518:	40021020 	.word	0x40021020

0000151c <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    151c:	b570      	push	{r4, r5, r6, lr}
    151e:	b082      	sub	sp, #8
    1520:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    1522:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1524:	f000 f8ca 	bl	16bc <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1528:	4d07      	ldr	r5, [pc, #28]	; (1548 <am_hal_ctimer_start+0x2c>)
    AM_CRITICAL_BEGIN_ASM
    152a:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    152c:	5971      	ldr	r1, [r6, r5]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    152e:	f004 2308 	and.w	r3, r4, #134219776	; 0x8000800
    1532:	ea21 0003 	bic.w	r0, r1, r3
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    1536:	f004 1201 	and.w	r2, r4, #65537	; 0x10001
    153a:	4302      	orrs	r2, r0
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    153c:	5172      	str	r2, [r6, r5]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    153e:	9801      	ldr	r0, [sp, #4]
    1540:	f000 f8c0 	bl	16c4 <am_hal_interrupt_master_set>
} // am_hal_ctimer_start()
    1544:	b002      	add	sp, #8
    1546:	bd70      	pop	{r4, r5, r6, pc}
    1548:	4000800c 	.word	0x4000800c

0000154c <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    154c:	b570      	push	{r4, r5, r6, lr}
    154e:	b082      	sub	sp, #8
    1550:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    1552:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1554:	f000 f8b2 	bl	16bc <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1558:	4d05      	ldr	r5, [pc, #20]	; (1570 <am_hal_ctimer_clear+0x24>)
    AM_CRITICAL_BEGIN_ASM
    155a:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    155c:	5971      	ldr	r1, [r6, r5]
    155e:	f004 2008 	and.w	r0, r4, #134219776	; 0x8000800
    1562:	4308      	orrs	r0, r1
    1564:	5170      	str	r0, [r6, r5]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1566:	9801      	ldr	r0, [sp, #4]
    1568:	f000 f8ac 	bl	16c4 <am_hal_interrupt_master_set>
} // am_hal_ctimer_clear()
    156c:	b002      	add	sp, #8
    156e:	bd70      	pop	{r4, r5, r6, pc}
    1570:	4000800c 	.word	0x4000800c

00001574 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1578:	b082      	sub	sp, #8
    157a:	4688      	mov	r8, r1
    157c:	461f      	mov	r7, r3
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    157e:	ea4f 1900 	mov.w	r9, r0, lsl #4
{
    1582:	4614      	mov	r4, r2
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1584:	f000 f89a 	bl	16bc <am_hal_interrupt_master_disable>
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1588:	f8df a098 	ldr.w	sl, [pc, #152]	; 1624 <am_hal_ctimer_period_set+0xb0>
    AM_CRITICAL_BEGIN_ASM
    158c:	9001      	str	r0, [sp, #4]
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    158e:	f518 3f80 	cmn.w	r8, #65536	; 0x10000
                                    AM_REG_CTIMER_CMPRA0_O +
    1592:	4d21      	ldr	r5, [pc, #132]	; (1618 <am_hal_ctimer_period_set+0xa4>)
                                    AM_REG_CTIMER_CMPRB0_O +
    1594:	4e21      	ldr	r6, [pc, #132]	; (161c <am_hal_ctimer_period_set+0xa8>)
    ui32Mode = *pui32ControlReg;
    1596:	f859 300a 	ldr.w	r3, [r9, sl]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    159a:	d01b      	beq.n	15d4 <am_hal_ctimer_period_set+0x60>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    159c:	f403 70c0 	and.w	r0, r3, #384	; 0x180
    15a0:	2880      	cmp	r0, #128	; 0x80
    15a2:	d01c      	beq.n	15de <am_hal_ctimer_period_set+0x6a>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    15a4:	f64f 77ff 	movw	r7, #65535	; 0xffff
    15a8:	2300      	movs	r3, #0
    15aa:	45b8      	cmp	r8, r7
        ui32Comp1 = 0;
    15ac:	461a      	mov	r2, r3
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    15ae:	d01d      	beq.n	15ec <am_hal_ctimer_period_set+0x78>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    15b0:	491b      	ldr	r1, [pc, #108]	; (1620 <am_hal_ctimer_period_set+0xac>)
    15b2:	4588      	cmp	r8, r1
    15b4:	d025      	beq.n	1602 <am_hal_ctimer_period_set+0x8e>
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1 >> 16));
    15b6:	400a      	ands	r2, r1
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    15b8:	b2a0      	uxth	r0, r4
    15ba:	4303      	orrs	r3, r0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    15bc:	ea42 4414 	orr.w	r4, r2, r4, lsr #16
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    15c0:	f849 3005 	str.w	r3, [r9, r5]
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    15c4:	f849 4006 	str.w	r4, [r9, r6]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    15c8:	9801      	ldr	r0, [sp, #4]
    15ca:	f000 f87b 	bl	16c4 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    15ce:	b002      	add	sp, #8
    15d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ui32Mode = ui32Mode >> 16;
    15d4:	0c19      	lsrs	r1, r3, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    15d6:	f401 70c0 	and.w	r0, r1, #384	; 0x180
    15da:	2880      	cmp	r0, #128	; 0x80
    15dc:	d110      	bne.n	1600 <am_hal_ctimer_period_set+0x8c>
    15de:	0423      	lsls	r3, r4, #16
        ui32Comp1 = ui32Period;
    15e0:	4622      	mov	r2, r4
        ui32Comp0 = ui32Period - ui32OnTime;
    15e2:	1be4      	subs	r4, r4, r7
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    15e4:	f64f 77ff 	movw	r7, #65535	; 0xffff
    15e8:	45b8      	cmp	r8, r7
    15ea:	d1e1      	bne.n	15b0 <am_hal_ctimer_period_set+0x3c>
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    15ec:	b2a6      	uxth	r6, r4
    15ee:	4333      	orrs	r3, r6
    15f0:	f849 3005 	str.w	r3, [r9, r5]
    AM_CRITICAL_END_ASM
    15f4:	9801      	ldr	r0, [sp, #4]
    15f6:	f000 f865 	bl	16c4 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    15fa:	b002      	add	sp, #8
    15fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1600:	2300      	movs	r3, #0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1602:	b2a5      	uxth	r5, r4
    1604:	432b      	orrs	r3, r5
    1606:	f849 3006 	str.w	r3, [r9, r6]
    AM_CRITICAL_END_ASM
    160a:	9801      	ldr	r0, [sp, #4]
    160c:	f000 f85a 	bl	16c4 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    1610:	b002      	add	sp, #8
    1612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1616:	bf00      	nop
    1618:	40008004 	.word	0x40008004
    161c:	40008008 	.word	0x40008008
    1620:	ffff0000 	.word	0xffff0000
    1624:	4000800c 	.word	0x4000800c

00001628 <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    1628:	b510      	push	{r4, lr}
    162a:	b082      	sub	sp, #8
    162c:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    162e:	f000 f845 	bl	16bc <am_hal_interrupt_master_disable>

    //
    // Enable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    1632:	4b05      	ldr	r3, [pc, #20]	; (1648 <am_hal_ctimer_int_enable+0x20>)
    AM_CRITICAL_BEGIN_ASM
    1634:	9001      	str	r0, [sp, #4]
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    1636:	6818      	ldr	r0, [r3, #0]
    1638:	4320      	orrs	r0, r4
    163a:	6018      	str	r0, [r3, #0]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    163c:	9801      	ldr	r0, [sp, #4]
    163e:	f000 f841 	bl	16c4 <am_hal_interrupt_master_set>
} // am_hal_ctimer_int_enable()
    1642:	b002      	add	sp, #8
    1644:	bd10      	pop	{r4, pc}
    1646:	bf00      	nop
    1648:	40008200 	.word	0x40008200

0000164c <am_hal_ctimer_int_clear>:
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTCLR) = ui32Interrupt;
    164c:	4b01      	ldr	r3, [pc, #4]	; (1654 <am_hal_ctimer_int_clear+0x8>)
    164e:	6018      	str	r0, [r3, #0]
    1650:	4770      	bx	lr
    1652:	bf00      	nop
    1654:	40008208 	.word	0x40008208

00001658 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    1658:	e7fe      	b.n	1658 <am_hal_debug_error>
    165a:	bf00      	nop

0000165c <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    165c:	4b00      	ldr	r3, [pc, #0]	; (1660 <am_hal_flash_delay+0x4>)
    165e:	4718      	bx	r3
    1660:	0800009d 	.word	0x0800009d

00001664 <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    1664:	280f      	cmp	r0, #15
    1666:	d80b      	bhi.n	1680 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    1668:	2805      	cmp	r0, #5
    166a:	d013      	beq.n	1694 <am_hal_interrupt_enable+0x30>
    166c:	2806      	cmp	r0, #6
    166e:	d017      	beq.n	16a0 <am_hal_interrupt_enable+0x3c>
    1670:	2804      	cmp	r0, #4
    1672:	d104      	bne.n	167e <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    1674:	4a0d      	ldr	r2, [pc, #52]	; (16ac <am_hal_interrupt_enable+0x48>)
    1676:	6813      	ldr	r3, [r2, #0]
    1678:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    167c:	6010      	str	r0, [r2, #0]
    167e:	4770      	bx	lr
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    1680:	f1a0 0310 	sub.w	r3, r0, #16
    1684:	f003 0c1f 	and.w	ip, r3, #31
    1688:	2001      	movs	r0, #1
    168a:	4909      	ldr	r1, [pc, #36]	; (16b0 <am_hal_interrupt_enable+0x4c>)
    168c:	fa00 f20c 	lsl.w	r2, r0, ip
    1690:	600a      	str	r2, [r1, #0]
    1692:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    1694:	4805      	ldr	r0, [pc, #20]	; (16ac <am_hal_interrupt_enable+0x48>)
    1696:	6801      	ldr	r1, [r0, #0]
    1698:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    169c:	6002      	str	r2, [r0, #0]
            break;
    169e:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    16a0:	4902      	ldr	r1, [pc, #8]	; (16ac <am_hal_interrupt_enable+0x48>)
    16a2:	680a      	ldr	r2, [r1, #0]
    16a4:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    16a8:	600b      	str	r3, [r1, #0]
            break;
    16aa:	4770      	bx	lr
    16ac:	e000ed24 	.word	0xe000ed24
    16b0:	e000e100 	.word	0xe000e100

000016b4 <am_hal_interrupt_master_enable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    16b4:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    16b8:	b662      	cpsie	i
    __asm("    bx lr");
    16ba:	4770      	bx	lr

000016bc <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    16bc:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    16c0:	b672      	cpsid	i
    __asm("    bx lr");
    16c2:	4770      	bx	lr

000016c4 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    16c4:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    16c8:	4770      	bx	lr
    16ca:	bf00      	nop

000016cc <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    16cc:	4b0d      	ldr	r3, [pc, #52]	; (1704 <am_hal_itm_enable+0x38>)
    16ce:	6818      	ldr	r0, [r3, #0]
    16d0:	07c2      	lsls	r2, r0, #31
    16d2:	d416      	bmi.n	1702 <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    16d4:	4a0c      	ldr	r2, [pc, #48]	; (1708 <am_hal_itm_enable+0x3c>)
    16d6:	6811      	ldr	r1, [r2, #0]
{
    16d8:	b430      	push	{r4, r5}
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    16da:	f041 7480 	orr.w	r4, r1, #16777216	; 0x1000000
    16de:	6014      	str	r4, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    16e0:	6815      	ldr	r5, [r2, #0]
    16e2:	01eb      	lsls	r3, r5, #7
    16e4:	d5fc      	bpl.n	16e0 <am_hal_itm_enable+0x14>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    16e6:	4809      	ldr	r0, [pc, #36]	; (170c <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    16e8:	4c09      	ldr	r4, [pc, #36]	; (1710 <am_hal_itm_enable+0x44>)
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    16ea:	4d0a      	ldr	r5, [pc, #40]	; (1714 <am_hal_itm_enable+0x48>)
    16ec:	6005      	str	r5, [r0, #0]
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    16ee:	250f      	movs	r5, #15
    16f0:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    16f2:	bc30      	pop	{r4, r5}
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    16f4:	4908      	ldr	r1, [pc, #32]	; (1718 <am_hal_itm_enable+0x4c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    16f6:	4b09      	ldr	r3, [pc, #36]	; (171c <am_hal_itm_enable+0x50>)
    16f8:	4a09      	ldr	r2, [pc, #36]	; (1720 <am_hal_itm_enable+0x54>)
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    16fa:	f04f 30ff 	mov.w	r0, #4294967295
    16fe:	6008      	str	r0, [r1, #0]
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1700:	601a      	str	r2, [r3, #0]
}
    1702:	4770      	bx	lr
    1704:	10001110 	.word	0x10001110
    1708:	e000edfc 	.word	0xe000edfc
    170c:	e0000fb0 	.word	0xe0000fb0
    1710:	e0000e40 	.word	0xe0000e40
    1714:	c5acce55 	.word	0xc5acce55
    1718:	e0000e00 	.word	0xe0000e00
    171c:	e0000e80 	.word	0xe0000e80
    1720:	00150511 	.word	0x00150511

00001724 <am_hal_itm_not_busy>:
am_hal_itm_not_busy(void)
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
    while (AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1));
    1724:	4a03      	ldr	r2, [pc, #12]	; (1734 <am_hal_itm_not_busy+0x10>)
    1726:	6813      	ldr	r3, [r2, #0]
    1728:	021b      	lsls	r3, r3, #8
    172a:	d4fc      	bmi.n	1726 <am_hal_itm_not_busy+0x2>

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    172c:	f44f 7047 	mov.w	r0, #796	; 0x31c
    1730:	f7ff bf94 	b.w	165c <am_hal_flash_delay>
    1734:	e0000e80 	.word	0xe0000e80

00001738 <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1738:	7803      	ldrb	r3, [r0, #0]
    173a:	b1b3      	cbz	r3, 176a <am_hal_itm_print+0x32>
{
    173c:	b410      	push	{r4}
    173e:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    1740:	2400      	movs	r4, #0
    1742:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    1746:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    1748:	2900      	cmp	r1, #0
    174a:	d1fa      	bne.n	1742 <am_hal_itm_print+0xa>
    174c:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    174e:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    1752:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    1756:	f8dc 3000 	ldr.w	r3, [ip]
    175a:	2b00      	cmp	r3, #0
    175c:	d0fb      	beq.n	1756 <am_hal_itm_print+0x1e>
    while (ui32Length)
    175e:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    1760:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    1764:	d1f5      	bne.n	1752 <am_hal_itm_print+0x1a>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    1766:	f85d 4b04 	ldr.w	r4, [sp], #4
    176a:	4770      	bx	lr

0000176c <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    176c:	490d      	ldr	r1, [pc, #52]	; (17a4 <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    176e:	4b0e      	ldr	r3, [pc, #56]	; (17a8 <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1770:	4a0e      	ldr	r2, [pc, #56]	; (17ac <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1772:	681b      	ldr	r3, [r3, #0]
{
    1774:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1776:	680d      	ldr	r5, [r1, #0]
    1778:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    177a:	6815      	ldr	r5, [r2, #0]
    177c:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    177e:	4c0c      	ldr	r4, [pc, #48]	; (17b0 <am_hal_mcuctrl_fault_status+0x44>)
    1780:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1782:	4329      	orrs	r1, r5
    1784:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1786:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1788:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    178c:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    178e:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1790:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1794:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1798:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    179a:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    179c:	6142      	str	r2, [r0, #20]
}
    179e:	bc70      	pop	{r4, r5, r6}
    17a0:	4770      	bx	lr
    17a2:	bf00      	nop
    17a4:	400201c4 	.word	0x400201c4
    17a8:	400201cc 	.word	0x400201cc
    17ac:	400201c0 	.word	0x400201c0
    17b0:	400201c8 	.word	0x400201c8

000017b4 <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    17b4:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
{
    17b8:	b430      	push	{r4, r5}
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    17ba:	d03a      	beq.n	1832 <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    17bc:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    17c0:	f000 809d 	beq.w	18fe <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    17c4:	2801      	cmp	r0, #1
    17c6:	f000 809d 	beq.w	1904 <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    17ca:	2803      	cmp	r0, #3
    17cc:	f000 80a6 	beq.w	191c <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    17d0:	2807      	cmp	r0, #7
    17d2:	f000 809c 	beq.w	190e <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    17d6:	280f      	cmp	r0, #15
    17d8:	f000 80a5 	beq.w	1926 <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    17dc:	281f      	cmp	r0, #31
    17de:	f000 80b0 	beq.w	1942 <am_hal_pwrctrl_memory_enable+0x18e>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    17e2:	283f      	cmp	r0, #63	; 0x3f
    17e4:	f000 80b4 	beq.w	1950 <am_hal_pwrctrl_memory_enable+0x19c>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    17e8:	287f      	cmp	r0, #127	; 0x7f
    17ea:	f000 80b8 	beq.w	195e <am_hal_pwrctrl_memory_enable+0x1aa>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    17ee:	28ff      	cmp	r0, #255	; 0xff
    17f0:	f000 80a0 	beq.w	1934 <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    17f4:	f240 13ff 	movw	r3, #511	; 0x1ff
    17f8:	4298      	cmp	r0, r3
    17fa:	f000 80b7 	beq.w	196c <am_hal_pwrctrl_memory_enable+0x1b8>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    17fe:	f240 31ff 	movw	r1, #1023	; 0x3ff
    1802:	4288      	cmp	r0, r1
    1804:	f000 80b8 	beq.w	1978 <am_hal_pwrctrl_memory_enable+0x1c4>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    1808:	f240 72ff 	movw	r2, #2047	; 0x7ff
    180c:	4290      	cmp	r0, r2
    180e:	d00e      	beq.n	182e <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    1810:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    1814:	f000 80b6 	beq.w	1984 <am_hal_pwrctrl_memory_enable+0x1d0>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    1818:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    181c:	42a0      	cmp	r0, r4
    181e:	f000 80b4 	beq.w	198a <am_hal_pwrctrl_memory_enable+0x1d6>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    1822:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    1826:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    182a:	4560      	cmp	r0, ip
    182c:	d132      	bne.n	1894 <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    182e:	495b      	ldr	r1, [pc, #364]	; (199c <am_hal_pwrctrl_memory_enable+0x1e8>)
    1830:	e066      	b.n	1900 <am_hal_pwrctrl_memory_enable+0x14c>
    1832:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    1836:	2340      	movs	r3, #64	; 0x40
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    1838:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    183a:	4c59      	ldr	r4, [pc, #356]	; (19a0 <am_hal_pwrctrl_memory_enable+0x1ec>)
    183c:	6825      	ldr	r5, [r4, #0]
    183e:	402a      	ands	r2, r5
    1840:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    1842:	4a57      	ldr	r2, [pc, #348]	; (19a0 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1844:	6814      	ldr	r4, [r2, #0]
    1846:	4320      	orrs	r0, r4
    1848:	6010      	str	r0, [r2, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    184a:	2b00      	cmp	r3, #0
    184c:	d029      	beq.n	18a2 <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    184e:	4d55      	ldr	r5, [pc, #340]	; (19a4 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1850:	6828      	ldr	r0, [r5, #0]
        while ( --i32TOcnt              &&
    1852:	4218      	tst	r0, r3
    1854:	bf18      	it	ne
    1856:	20c6      	movne	r0, #198	; 0xc6
    1858:	d01f      	beq.n	189a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    185a:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    185c:	421a      	tst	r2, r3
    185e:	d01c      	beq.n	189a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1860:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1862:	421c      	tst	r4, r3
    1864:	d019      	beq.n	189a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1866:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1868:	421a      	tst	r2, r3
    186a:	d016      	beq.n	189a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    186c:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    186e:	421c      	tst	r4, r3
    1870:	d013      	beq.n	189a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1872:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1874:	421a      	tst	r2, r3
    1876:	d010      	beq.n	189a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1878:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    187a:	421c      	tst	r4, r3
    187c:	d00d      	beq.n	189a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    187e:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1880:	421a      	tst	r2, r3
    1882:	d00a      	beq.n	189a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1884:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1886:	421c      	tst	r4, r3
    1888:	d007      	beq.n	189a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    188a:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    188c:	421a      	tst	r2, r3
    188e:	d004      	beq.n	189a <am_hal_pwrctrl_memory_enable+0xe6>
    1890:	3809      	subs	r0, #9
    1892:	d1e2      	bne.n	185a <am_hal_pwrctrl_memory_enable+0xa6>
        return false;
    1894:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    1896:	bc30      	pop	{r4, r5}
    1898:	4770      	bx	lr
    if ( ui32PwrStatEnMask )
    189a:	b911      	cbnz	r1, 18a2 <am_hal_pwrctrl_memory_enable+0xee>
    return true;
    189c:	2001      	movs	r0, #1
}
    189e:	bc30      	pop	{r4, r5}
    18a0:	4770      	bx	lr
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18a2:	4b40      	ldr	r3, [pc, #256]	; (19a4 <am_hal_pwrctrl_memory_enable+0x1f0>)
    18a4:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    18a6:	ea31 0405 	bics.w	r4, r1, r5
    18aa:	bf18      	it	ne
    18ac:	24c6      	movne	r4, #198	; 0xc6
    18ae:	d0f5      	beq.n	189c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18b0:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    18b2:	ea31 0000 	bics.w	r0, r1, r0
    18b6:	d0f1      	beq.n	189c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18b8:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    18ba:	ea31 0002 	bics.w	r0, r1, r2
    18be:	d0ed      	beq.n	189c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18c0:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    18c2:	ea31 0005 	bics.w	r0, r1, r5
    18c6:	d0e9      	beq.n	189c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18c8:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    18ca:	ea31 0000 	bics.w	r0, r1, r0
    18ce:	d0e5      	beq.n	189c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18d0:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    18d2:	ea31 0002 	bics.w	r0, r1, r2
    18d6:	d0e1      	beq.n	189c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18d8:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    18da:	ea31 0005 	bics.w	r0, r1, r5
    18de:	d0dd      	beq.n	189c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18e0:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    18e2:	ea31 0000 	bics.w	r0, r1, r0
    18e6:	d0d9      	beq.n	189c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18e8:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    18ea:	ea31 0002 	bics.w	r0, r1, r2
    18ee:	d0d5      	beq.n	189c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18f0:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    18f2:	ea31 0005 	bics.w	r0, r1, r5
    18f6:	d0d1      	beq.n	189c <am_hal_pwrctrl_memory_enable+0xe8>
    18f8:	3c09      	subs	r4, #9
    18fa:	d1d9      	bne.n	18b0 <am_hal_pwrctrl_memory_enable+0xfc>
    18fc:	e7ca      	b.n	1894 <am_hal_pwrctrl_memory_enable+0xe0>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    18fe:	2160      	movs	r1, #96	; 0x60
{
    1900:	2300      	movs	r3, #0
    1902:	e79e      	b.n	1842 <am_hal_pwrctrl_memory_enable+0x8e>
    1904:	4a28      	ldr	r2, [pc, #160]	; (19a8 <am_hal_pwrctrl_memory_enable+0x1f4>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1906:	4b29      	ldr	r3, [pc, #164]	; (19ac <am_hal_pwrctrl_memory_enable+0x1f8>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    1908:	f44f 7180 	mov.w	r1, #256	; 0x100
    190c:	e795      	b.n	183a <am_hal_pwrctrl_memory_enable+0x86>
    190e:	f46f 62ff 	mvn.w	r2, #2040	; 0x7f8
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1912:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    1916:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    191a:	e78e      	b.n	183a <am_hal_pwrctrl_memory_enable+0x86>
    191c:	4a24      	ldr	r2, [pc, #144]	; (19b0 <am_hal_pwrctrl_memory_enable+0x1fc>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    191e:	4b25      	ldr	r3, [pc, #148]	; (19b4 <am_hal_pwrctrl_memory_enable+0x200>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    1920:	f44f 7140 	mov.w	r1, #768	; 0x300
    1924:	e789      	b.n	183a <am_hal_pwrctrl_memory_enable+0x86>
    1926:	f46f 62fe 	mvn.w	r2, #2032	; 0x7f0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    192a:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    192e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    1932:	e782      	b.n	183a <am_hal_pwrctrl_memory_enable+0x86>
    1934:	f46f 62e0 	mvn.w	r2, #1792	; 0x700
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1938:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    193c:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    1940:	e77b      	b.n	183a <am_hal_pwrctrl_memory_enable+0x86>
    1942:	f46f 62fc 	mvn.w	r2, #2016	; 0x7e0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1946:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    194a:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    194e:	e774      	b.n	183a <am_hal_pwrctrl_memory_enable+0x86>
    1950:	f46f 62f8 	mvn.w	r2, #1984	; 0x7c0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1954:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    1958:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    195c:	e76d      	b.n	183a <am_hal_pwrctrl_memory_enable+0x86>
    195e:	f46f 62f0 	mvn.w	r2, #1920	; 0x780
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1962:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    1966:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    196a:	e766      	b.n	183a <am_hal_pwrctrl_memory_enable+0x86>
    196c:	f46f 62c0 	mvn.w	r2, #1536	; 0x600
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1970:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    1974:	4910      	ldr	r1, [pc, #64]	; (19b8 <am_hal_pwrctrl_memory_enable+0x204>)
    1976:	e760      	b.n	183a <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    1978:	4910      	ldr	r1, [pc, #64]	; (19bc <am_hal_pwrctrl_memory_enable+0x208>)
    197a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    197e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1982:	e75a      	b.n	183a <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1984:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1988:	e7ba      	b.n	1900 <am_hal_pwrctrl_memory_enable+0x14c>
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    198a:	4805      	ldr	r0, [pc, #20]	; (19a0 <am_hal_pwrctrl_memory_enable+0x1ec>)
    198c:	6803      	ldr	r3, [r0, #0]
    198e:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    1992:	6001      	str	r1, [r0, #0]
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1994:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
        ui32PwrStatEnMask  = 0;
    1998:	2100      	movs	r1, #0
    199a:	e758      	b.n	184e <am_hal_pwrctrl_memory_enable+0x9a>
    199c:	0007ff00 	.word	0x0007ff00
    19a0:	40021010 	.word	0x40021010
    19a4:	40021014 	.word	0x40021014
    19a8:	fffff801 	.word	0xfffff801
    19ac:	0007fe00 	.word	0x0007fe00
    19b0:	fffff803 	.word	0xfffff803
    19b4:	0007fc00 	.word	0x0007fc00
    19b8:	0001ff00 	.word	0x0001ff00
    19bc:	0003ff00 	.word	0x0003ff00

000019c0 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    19c0:	4b0f      	ldr	r3, [pc, #60]	; (1a00 <am_hal_pwrctrl_bucks_init+0x40>)
    19c2:	681a      	ldr	r2, [r3, #0]
    19c4:	0792      	lsls	r2, r2, #30
    19c6:	d502      	bpl.n	19ce <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    19c8:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    19ca:	07c3      	lsls	r3, r0, #31
    19cc:	d40e      	bmi.n	19ec <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    19ce:	4b0d      	ldr	r3, [pc, #52]	; (1a04 <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    19d0:	4a0b      	ldr	r2, [pc, #44]	; (1a00 <am_hal_pwrctrl_bucks_init+0x40>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    19d2:	6819      	ldr	r1, [r3, #0]
    19d4:	f041 0002 	orr.w	r0, r1, #2
    19d8:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    19da:	6819      	ldr	r1, [r3, #0]
    19dc:	f041 0001 	orr.w	r0, r1, #1
    19e0:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    19e2:	6813      	ldr	r3, [r2, #0]
    19e4:	f003 0103 	and.w	r1, r3, #3
    19e8:	2903      	cmp	r1, #3
    19ea:	d1fa      	bne.n	19e2 <am_hal_pwrctrl_bucks_init+0x22>
    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    19ec:	4a04      	ldr	r2, [pc, #16]	; (1a00 <am_hal_pwrctrl_bucks_init+0x40>)
    19ee:	6810      	ldr	r0, [r2, #0]
    19f0:	f000 0303 	and.w	r3, r0, #3
    19f4:	2b03      	cmp	r3, #3
    19f6:	d1fa      	bne.n	19ee <am_hal_pwrctrl_bucks_init+0x2e>
    am_hal_flash_delay(200 / 3);
    19f8:	2042      	movs	r0, #66	; 0x42
    19fa:	f7ff be2f 	b.w	165c <am_hal_flash_delay>
    19fe:	bf00      	nop
    1a00:	40021004 	.word	0x40021004
    1a04:	40021000 	.word	0x40021000

00001a08 <am_hal_pwrctrl_bucks_enable>:
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1a08:	4b0b      	ldr	r3, [pc, #44]	; (1a38 <am_hal_pwrctrl_bucks_enable+0x30>)
    1a0a:	681a      	ldr	r2, [r3, #0]
    1a0c:	0792      	lsls	r2, r2, #30
    1a0e:	d502      	bpl.n	1a16 <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1a10:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1a12:	07c3      	lsls	r3, r0, #31
    1a14:	d40e      	bmi.n	1a34 <am_hal_pwrctrl_bucks_enable+0x2c>
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1a16:	4b09      	ldr	r3, [pc, #36]	; (1a3c <am_hal_pwrctrl_bucks_enable+0x34>)
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1a18:	4a07      	ldr	r2, [pc, #28]	; (1a38 <am_hal_pwrctrl_bucks_enable+0x30>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1a1a:	6819      	ldr	r1, [r3, #0]
    1a1c:	f041 0002 	orr.w	r0, r1, #2
    1a20:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1a22:	6819      	ldr	r1, [r3, #0]
    1a24:	f041 0001 	orr.w	r0, r1, #1
    1a28:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1a2a:	6813      	ldr	r3, [r2, #0]
    1a2c:	f003 0103 	and.w	r1, r3, #3
    1a30:	2903      	cmp	r1, #3
    1a32:	d1fa      	bne.n	1a2a <am_hal_pwrctrl_bucks_enable+0x22>
    1a34:	4770      	bx	lr
    1a36:	bf00      	nop
    1a38:	40021004 	.word	0x40021004
    1a3c:	40021000 	.word	0x40021000

00001a40 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1a40:	4b12      	ldr	r3, [pc, #72]	; (1a8c <am_hal_pwrctrl_bucks_disable+0x4c>)
    1a42:	681a      	ldr	r2, [r3, #0]
    1a44:	0792      	lsls	r2, r2, #30
    1a46:	d402      	bmi.n	1a4e <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    1a48:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1a4a:	07c3      	lsls	r3, r0, #31
    1a4c:	d51c      	bpl.n	1a88 <am_hal_pwrctrl_bucks_disable+0x48>
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1a4e:	4910      	ldr	r1, [pc, #64]	; (1a90 <am_hal_pwrctrl_bucks_disable+0x50>)
    1a50:	680b      	ldr	r3, [r1, #0]
    1a52:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1a56:	2a20      	cmp	r2, #32
    1a58:	d00b      	beq.n	1a72 <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    1a5a:	4b0e      	ldr	r3, [pc, #56]	; (1a94 <am_hal_pwrctrl_bucks_disable+0x54>)
    1a5c:	681a      	ldr	r2, [r3, #0]
    1a5e:	f022 0002 	bic.w	r0, r2, #2
    1a62:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    1a64:	6819      	ldr	r1, [r3, #0]
    1a66:	f021 0201 	bic.w	r2, r1, #1
    1a6a:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    1a6c:	200a      	movs	r0, #10
    1a6e:	f7ff bdf5 	b.w	165c <am_hal_flash_delay>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_PWRADC_EN) )
    1a72:	4809      	ldr	r0, [pc, #36]	; (1a98 <am_hal_pwrctrl_bucks_disable+0x58>)
    1a74:	6801      	ldr	r1, [r0, #0]
    if ( isRev_ADC()  &&
    1a76:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1a7a:	d1ee      	bne.n	1a5a <am_hal_pwrctrl_bucks_disable+0x1a>
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    1a7c:	4805      	ldr	r0, [pc, #20]	; (1a94 <am_hal_pwrctrl_bucks_disable+0x54>)
    1a7e:	6803      	ldr	r3, [r0, #0]
    1a80:	f003 0105 	and.w	r1, r3, #5
    1a84:	6001      	str	r1, [r0, #0]
    1a86:	e7f1      	b.n	1a6c <am_hal_pwrctrl_bucks_disable+0x2c>
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop
    1a8c:	40021004 	.word	0x40021004
    1a90:	4002000c 	.word	0x4002000c
    1a94:	40021000 	.word	0x40021000
    1a98:	40021008 	.word	0x40021008

00001a9c <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1a9c:	4905      	ldr	r1, [pc, #20]	; (1ab4 <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1a9e:	4a06      	ldr	r2, [pc, #24]	; (1ab8 <am_hal_pwrctrl_low_power_init+0x1c>)
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1aa0:	680b      	ldr	r3, [r1, #0]
    1aa2:	f043 0006 	orr.w	r0, r3, #6
    1aa6:	6008      	str	r0, [r1, #0]
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1aa8:	6811      	ldr	r1, [r2, #0]
    1aaa:	f021 0304 	bic.w	r3, r1, #4
    1aae:	6013      	str	r3, [r2, #0]
    1ab0:	4770      	bx	lr
    1ab2:	bf00      	nop
    1ab4:	40021018 	.word	0x40021018
    1ab8:	40021000 	.word	0x40021000

00001abc <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1abc:	4a05      	ldr	r2, [pc, #20]	; (1ad4 <am_hal_rtc_osc_select+0x18>)
    1abe:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    1ac0:	b918      	cbnz	r0, 1aca <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    1ac2:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1ac6:	6010      	str	r0, [r2, #0]
    1ac8:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1aca:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    1ace:	6011      	str	r1, [r2, #0]
    1ad0:	4770      	bx	lr
    1ad2:	bf00      	nop
    1ad4:	4000400c 	.word	0x4000400c

00001ad8 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    1ad8:	4a02      	ldr	r2, [pc, #8]	; (1ae4 <am_hal_rtc_osc_disable+0xc>)
    1ada:	6813      	ldr	r3, [r2, #0]
    1adc:	f043 0010 	orr.w	r0, r3, #16
    1ae0:	6010      	str	r0, [r2, #0]
    1ae2:	4770      	bx	lr
    1ae4:	40004050 	.word	0x40004050

00001ae8 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    1ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aea:	b083      	sub	sp, #12
    1aec:	4604      	mov	r4, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    1aee:	f7ff fde5 	bl	16bc <am_hal_interrupt_master_disable>
    1af2:	4605      	mov	r5, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1af4:	b124      	cbz	r4, 1b00 <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    1af6:	4b42      	ldr	r3, [pc, #264]	; (1c00 <am_hal_sysctrl_sleep+0x118>)
    1af8:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1afa:	f010 0c01 	ands.w	ip, r0, #1
    1afe:	d00a      	beq.n	1b16 <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    1b00:	4a40      	ldr	r2, [pc, #256]	; (1c04 <am_hal_sysctrl_sleep+0x11c>)
    1b02:	6811      	ldr	r1, [r2, #0]
    1b04:	f021 0604 	bic.w	r6, r1, #4
    1b08:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    1b0a:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1b0c:	4628      	mov	r0, r5
    1b0e:	f7ff fdd9 	bl	16c4 <am_hal_interrupt_master_set>
}
    1b12:	b003      	add	sp, #12
    1b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1b16:	4c3b      	ldr	r4, [pc, #236]	; (1c04 <am_hal_sysctrl_sleep+0x11c>)
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1b18:	4b3b      	ldr	r3, [pc, #236]	; (1c08 <am_hal_sysctrl_sleep+0x120>)
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1b1a:	6820      	ldr	r0, [r4, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1b1c:	4e3b      	ldr	r6, [pc, #236]	; (1c0c <am_hal_sysctrl_sleep+0x124>)
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1b1e:	4f3c      	ldr	r7, [pc, #240]	; (1c10 <am_hal_sysctrl_sleep+0x128>)
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1b20:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 1c20 <am_hal_sysctrl_sleep+0x138>
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1b24:	f040 0204 	orr.w	r2, r0, #4
    1b28:	6022      	str	r2, [r4, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1b2a:	681c      	ldr	r4, [r3, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1b2c:	6833      	ldr	r3, [r6, #0]
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1b2e:	f8de 2000 	ldr.w	r2, [lr]
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1b32:	6839      	ldr	r1, [r7, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1b34:	f004 07f0 	and.w	r7, r4, #240	; 0xf0
                   CHKBUCKZX_REV : 0x0;
    1b38:	2f20      	cmp	r7, #32
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1b3a:	f103 30ff 	add.w	r0, r3, #4294967295
                   CHKBUCKZX_REV : 0x0;
    1b3e:	bf14      	ite	ne
    1b40:	2700      	movne	r7, #0
    1b42:	2702      	moveq	r7, #2
                    CHKBUCKZX_TIMER : 0x0;
    1b44:	2803      	cmp	r0, #3
    1b46:	bf98      	it	ls
    1b48:	f04f 0c04 	movls.w	ip, #4
                     CHKBUCKZX_BUCKS : 0x0;
    1b4c:	f012 0403 	ands.w	r4, r2, #3
    1b50:	bf18      	it	ne
    1b52:	2401      	movne	r4, #1
    g_buckZX_chk |= ( ui32SupplySrc &
    1b54:	f240 53ff 	movw	r3, #1535	; 0x5ff
    g_buckZX_chk |= (ui32SupplySrc &
    1b58:	433c      	orrs	r4, r7
                0x0 : CHKBUCKZX_DEVEN;
    1b5a:	ea11 0703 	ands.w	r7, r1, r3
    g_buckZX_chk |= (ui32SupplySrc &
    1b5e:	ea44 040c 	orr.w	r4, r4, ip
                0x0 : CHKBUCKZX_DEVEN;
    1b62:	d103      	bne.n	1b6c <am_hal_sysctrl_sleep+0x84>
    g_buckZX_chk |= ( ui32SupplySrc &
    1b64:	f044 0408 	orr.w	r4, r4, #8
        if ( bBuckZX_chk )
    1b68:	2c0f      	cmp	r4, #15
    1b6a:	d00a      	beq.n	1b82 <am_hal_sysctrl_sleep+0x9a>
        AM_ASM_WFI;
    1b6c:	bf30      	wfi
        if ( bBuckZX_chk )
    1b6e:	2c0f      	cmp	r4, #15
    1b70:	d01a      	beq.n	1ba8 <am_hal_sysctrl_sleep+0xc0>
            g_bBuckRestoreComplete = true;
    1b72:	4e28      	ldr	r6, [pc, #160]	; (1c14 <am_hal_sysctrl_sleep+0x12c>)
    1b74:	2001      	movs	r0, #1
    1b76:	7030      	strb	r0, [r6, #0]
    am_hal_interrupt_master_set(ui32Critical);
    1b78:	4628      	mov	r0, r5
    1b7a:	f7ff fda3 	bl	16c4 <am_hal_interrupt_master_set>
}
    1b7e:	b003      	add	sp, #12
    1b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1b82:	6832      	ldr	r2, [r6, #0]
    1b84:	1e51      	subs	r1, r2, #1
    1b86:	9100      	str	r1, [sp, #0]
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    1b88:	9800      	ldr	r0, [sp, #0]
    1b8a:	f04f 31ff 	mov.w	r1, #4294967295
    1b8e:	f7ff fcdd 	bl	154c <am_hal_ctimer_clear>
            am_hal_ctimer_period_set(ui32BuckTimer,
    1b92:	9800      	ldr	r0, [sp, #0]
    1b94:	463b      	mov	r3, r7
    1b96:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    1b9a:	f04f 31ff 	mov.w	r1, #4294967295
    1b9e:	f7ff fce9 	bl	1574 <am_hal_ctimer_period_set>
            am_hal_pwrctrl_bucks_disable();
    1ba2:	f7ff ff4d 	bl	1a40 <am_hal_pwrctrl_bucks_disable>
    1ba6:	e7e1      	b.n	1b6c <am_hal_sysctrl_sleep+0x84>
    AM_CRITICAL_BEGIN_ASM
    1ba8:	f7ff fd88 	bl	16bc <am_hal_interrupt_master_disable>
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    1bac:	4b1a      	ldr	r3, [pc, #104]	; (1c18 <am_hal_sysctrl_sleep+0x130>)
    AM_CRITICAL_BEGIN_ASM
    1bae:	9001      	str	r0, [sp, #4]
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    1bb0:	681a      	ldr	r2, [r3, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    1bb2:	681a      	ldr	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    1bb4:	681f      	ldr	r7, [r3, #0]
    1bb6:	f027 043c 	bic.w	r4, r7, #60	; 0x3c
    1bba:	f044 021c 	orr.w	r2, r4, #28
    1bbe:	601a      	str	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    1bc0:	6819      	ldr	r1, [r3, #0]
            g_bBuckRestoreComplete = false;
    1bc2:	4c14      	ldr	r4, [pc, #80]	; (1c14 <am_hal_sysctrl_sleep+0x12c>)
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    1bc4:	f421 30f0 	bic.w	r0, r1, #122880	; 0x1e000
    1bc8:	f440 4760 	orr.w	r7, r0, #57344	; 0xe000
    1bcc:	601f      	str	r7, [r3, #0]
    AM_CRITICAL_END_ASM
    1bce:	9801      	ldr	r0, [sp, #4]
    1bd0:	f7ff fd78 	bl	16c4 <am_hal_interrupt_master_set>
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    1bd4:	201c      	movs	r0, #28
    1bd6:	f7ff fd41 	bl	165c <am_hal_flash_delay>
            am_hal_pwrctrl_bucks_enable();
    1bda:	f7ff ff15 	bl	1a08 <am_hal_pwrctrl_bucks_enable>
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1bde:	6836      	ldr	r6, [r6, #0]
            g_ui32BuckInputs = 0;
    1be0:	490e      	ldr	r1, [pc, #56]	; (1c1c <am_hal_sysctrl_sleep+0x134>)
            g_bBuckRestoreComplete = false;
    1be2:	2200      	movs	r2, #0
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1be4:	1e73      	subs	r3, r6, #1
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    1be6:	204c      	movs	r0, #76	; 0x4c
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1be8:	9300      	str	r3, [sp, #0]
            g_bBuckRestoreComplete = false;
    1bea:	7022      	strb	r2, [r4, #0]
            g_ui32BuckInputs = 0;
    1bec:	600a      	str	r2, [r1, #0]
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    1bee:	f7ff fd35 	bl	165c <am_hal_flash_delay>
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    1bf2:	9800      	ldr	r0, [sp, #0]
    1bf4:	f04f 31ff 	mov.w	r1, #4294967295
    1bf8:	f7ff fc90 	bl	151c <am_hal_ctimer_start>
    1bfc:	e786      	b.n	1b0c <am_hal_sysctrl_sleep+0x24>
    1bfe:	bf00      	nop
    1c00:	40020250 	.word	0x40020250
    1c04:	e000ed10 	.word	0xe000ed10
    1c08:	4002000c 	.word	0x4002000c
    1c0c:	1000111c 	.word	0x1000111c
    1c10:	40021008 	.word	0x40021008
    1c14:	10001114 	.word	0x10001114
    1c18:	40020068 	.word	0x40020068
    1c1c:	10001118 	.word	0x10001118
    1c20:	40021000 	.word	0x40021000

00001c24 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    1c24:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    1c26:	4a23      	ldr	r2, [pc, #140]	; (1cb4 <am_hal_tpiu_enable+0x90>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    1c28:	6803      	ldr	r3, [r0, #0]
    AM_REG(TPIU, FFCR) = 0;
    1c2a:	2100      	movs	r1, #0
    1c2c:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    1c2e:	b33b      	cbz	r3, 1c80 <am_hal_tpiu_enable+0x5c>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1c30:	f5a2 7c40 	sub.w	ip, r2, #768	; 0x300
    1c34:	2101      	movs	r1, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1c36:	4c20      	ldr	r4, [pc, #128]	; (1cb8 <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1c38:	4d20      	ldr	r5, [pc, #128]	; (1cbc <am_hal_tpiu_enable+0x98>)
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1c3a:	f8cc 1000 	str.w	r1, [ip]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1c3e:	f5a3 4e61 	sub.w	lr, r3, #57600	; 0xe100
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1c42:	45a6      	cmp	lr, r4
    1c44:	bf94      	ite	ls
    1c46:	461c      	movls	r4, r3
    1c48:	462c      	movhi	r4, r5
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    1c4a:	f7ff fbd1 	bl	13f0 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    1c4e:	1c43      	adds	r3, r0, #1
    1c50:	d02d      	beq.n	1cae <am_hal_tpiu_enable+0x8a>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    1c52:	08c2      	lsrs	r2, r0, #3
    1c54:	fbb2 f3f4 	udiv	r3, r2, r4
    1c58:	1e5d      	subs	r5, r3, #1
    1c5a:	b2a8      	uxth	r0, r5
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1c5c:	4a18      	ldr	r2, [pc, #96]	; (1cc0 <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1c5e:	4c19      	ldr	r4, [pc, #100]	; (1cc4 <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1c60:	4b19      	ldr	r3, [pc, #100]	; (1cc8 <am_hal_tpiu_enable+0xa4>)
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1c62:	491a      	ldr	r1, [pc, #104]	; (1ccc <am_hal_tpiu_enable+0xa8>)
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1c64:	6010      	str	r0, [r2, #0]
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1c66:	2502      	movs	r5, #2
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1c68:	2000      	movs	r0, #0
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1c6a:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1c6e:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1c70:	6008      	str	r0, [r1, #0]
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1c72:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1c74:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    1c78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1c7c:	f7ff bcee 	b.w	165c <am_hal_flash_delay>
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    1c80:	4c0f      	ldr	r4, [pc, #60]	; (1cc0 <am_hal_tpiu_enable+0x9c>)
    1c82:	6905      	ldr	r5, [r0, #16]
    1c84:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    1c86:	6882      	ldr	r2, [r0, #8]
    1c88:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    1c8c:	68c3      	ldr	r3, [r0, #12]
    1c8e:	4c10      	ldr	r4, [pc, #64]	; (1cd0 <am_hal_tpiu_enable+0xac>)
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    1c90:	490d      	ldr	r1, [pc, #52]	; (1cc8 <am_hal_tpiu_enable+0xa4>)
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    1c92:	1e5d      	subs	r5, r3, #1
    1c94:	2201      	movs	r2, #1
    1c96:	40aa      	lsls	r2, r5
    1c98:	6022      	str	r2, [r4, #0]
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    1c9a:	6840      	ldr	r0, [r0, #4]
    1c9c:	680b      	ldr	r3, [r1, #0]
    1c9e:	4303      	orrs	r3, r0
    1ca0:	600b      	str	r3, [r1, #0]
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1ca2:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    1ca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1caa:	f7ff bcd7 	b.w	165c <am_hal_flash_delay>
    1cae:	2005      	movs	r0, #5
    1cb0:	e7d4      	b.n	1c5c <am_hal_tpiu_enable+0x38>
    1cb2:	bf00      	nop
    1cb4:	e0040304 	.word	0xe0040304
    1cb8:	001da380 	.word	0x001da380
    1cbc:	000f4240 	.word	0x000f4240
    1cc0:	e0040010 	.word	0xe0040010
    1cc4:	e00400f0 	.word	0xe00400f0
    1cc8:	40020250 	.word	0x40020250
    1ccc:	e0040f00 	.word	0xe0040f00
    1cd0:	e0040004 	.word	0xe0040004

00001cd4 <am_hal_tpiu_disable>:
am_hal_tpiu_disable(void)
{
    //
    // Disable the TPIU clock source in MCU control.
    //
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    1cd4:	4b01      	ldr	r3, [pc, #4]	; (1cdc <am_hal_tpiu_disable+0x8>)
    1cd6:	2200      	movs	r2, #0
    1cd8:	601a      	str	r2, [r3, #0]
    1cda:	4770      	bx	lr
    1cdc:	40020250 	.word	0x40020250

00001ce0 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    1ce0:	4b01      	ldr	r3, [pc, #4]	; (1ce8 <am_hal_vcomp_disable+0x8>)
    1ce2:	2237      	movs	r2, #55	; 0x37
    1ce4:	601a      	str	r2, [r3, #0]
    1ce6:	4770      	bx	lr
    1ce8:	4000c008 	.word	0x4000c008
    1cec:	204d5449 	.word	0x204d5449
    1cf0:	6e697250 	.word	0x6e697250
    1cf4:	45206674 	.word	0x45206674
    1cf8:	706d6178 	.word	0x706d6178
    1cfc:	000a656c 	.word	0x000a656c
    1d00:	6542090a 	.word	0x6542090a
    1d04:	6e6e6967 	.word	0x6e6e6967
    1d08:	20676e69 	.word	0x20676e69
    1d0c:	49435341 	.word	0x49435341
    1d10:	61772049 	.word	0x61772049
    1d14:	74206b6c 	.word	0x74206b6c
    1d18:	756f7268 	.word	0x756f7268
    1d1c:	0a3a6867 	.word	0x0a3a6867
    1d20:	00000000 	.word	0x00000000
    1d24:	00000009 	.word	0x00000009
    1d28:	00006325 	.word	0x00006325
    1d2c:	0000090a 	.word	0x0000090a
    1d30:	0a0a0a0a 	.word	0x0a0a0a0a
    1d34:	0a0a0a0a 	.word	0x0a0a0a0a
    1d38:	0a0a0a0a 	.word	0x0a0a0a0a
    1d3c:	0a0a0a0a 	.word	0x0a0a0a0a
    1d40:	00000a0a 	.word	0x00000a0a

00001d44 <am_hal_cachectrl_defaults>:
    1d44:	50000001 00010300 00010101 685f6d61     ...P........am_h
    1d54:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    1d64:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    1d74:	63206469 6b636f6c 74657320 676e6974     id clock setting
    1d84:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    1d94:	6b6c635f 2e6e6567 00000063              _clkgen.c...
