
i2c_loopback_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000054dc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000044  10001000  000054dc  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000680  10001044  00005520  00021044  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021044  2**0
                  CONTENTS, READONLY
  5 .debug_info   00015283  00000000  00000000  0002107b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000031c5  00000000  00000000  000362fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000b28  00000000  00000000  000394c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00002270  00000000  00000000  00039feb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007416  00000000  00000000  0003c25b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003f20  00000000  00000000  00043671  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  00047591  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00002274  00000000  00000000  00047610  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001073e  00000000  00000000  00049884  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 31 05 00 00 99 05 00 00 9f 05 00 00     ....1...........
      10:	9f 05 00 00 9f 05 00 00 9f 05 00 00 00 00 00 00     ................
	...
      2c:	a5 05 00 00 a5 05 00 00 00 00 00 00 a5 05 00 00     ................
      3c:	a5 05 00 00 a5 05 00 00 a5 05 00 00 a5 05 00 00     ................
      4c:	a5 05 00 00 a5 05 00 00 a5 05 00 00 61 01 00 00     ............a...
      5c:	a5 05 00 00 a5 05 00 00 a5 05 00 00 a5 05 00 00     ................
      6c:	a5 05 00 00 a5 05 00 00 a5 05 00 00 a5 05 00 00     ................
      7c:	a5 05 00 00 a5 05 00 00 a5 05 00 00 a5 05 00 00     ................
      8c:	a5 05 00 00 a5 05 00 00 a5 05 00 00 a5 05 00 00     ................
      9c:	a5 05 00 00 a5 05 00 00 a5 05 00 00 a5 05 00 00     ................
      ac:	a5 05 00 00 a5 05 00 00 a5 05 00 00 a5 05 00 00     ................
      bc:	a5 05 00 00                                         ....

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <am_iomaster0_isr>:
//
//! Take over default ISR for IOM 0. (Queue mode service)
//
void
am_iomaster0_isr(void)
{
     160:	b580      	push	{r7, lr}
     162:	b082      	sub	sp, #8
     164:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    ui32Status = am_hal_iom_int_status_get(IOM_MODULE, true);
     166:	2101      	movs	r1, #1
     168:	2000      	movs	r0, #0
     16a:	f003 fb43 	bl	37f4 <am_hal_iom_int_status_get>
     16e:	6078      	str	r0, [r7, #4]

    am_hal_iom_int_clear(IOM_MODULE, ui32Status);
     170:	6879      	ldr	r1, [r7, #4]
     172:	2000      	movs	r0, #0
     174:	f003 fb34 	bl	37e0 <am_hal_iom_int_clear>

    am_hal_iom_queue_service(IOM_MODULE, ui32Status);
     178:	6879      	ldr	r1, [r7, #4]
     17a:	2000      	movs	r0, #0
     17c:	f003 fa98 	bl	36b0 <am_hal_iom_queue_service>
}
     180:	bf00      	nop
     182:	3708      	adds	r7, #8
     184:	46bd      	mov	sp, r7
     186:	bd80      	pop	{r7, pc}

00000188 <itm_start>:
// Start up the ITM interface.
//
//*****************************************************************************
void
itm_start(void)
{
     188:	b580      	push	{r7, lr}
     18a:	b082      	sub	sp, #8
     18c:	af00      	add	r7, sp, #0
    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     18e:	4817      	ldr	r0, [pc, #92]	; (1ec <itm_start+0x64>)
     190:	f000 fa26 	bl	5e0 <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     194:	f001 fb24 	bl	17e0 <am_hal_interrupt_master_disable>
     198:	4603      	mov	r3, r0
     19a:	607b      	str	r3, [r7, #4]
     19c:	4b14      	ldr	r3, [pc, #80]	; (1f0 <itm_start+0x68>)
     19e:	2273      	movs	r2, #115	; 0x73
     1a0:	601a      	str	r2, [r3, #0]
     1a2:	4a14      	ldr	r2, [pc, #80]	; (1f4 <itm_start+0x6c>)
     1a4:	4b13      	ldr	r3, [pc, #76]	; (1f4 <itm_start+0x6c>)
     1a6:	681b      	ldr	r3, [r3, #0]
     1a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     1ac:	6013      	str	r3, [r2, #0]
     1ae:	4a12      	ldr	r2, [pc, #72]	; (1f8 <itm_start+0x70>)
     1b0:	4b11      	ldr	r3, [pc, #68]	; (1f8 <itm_start+0x70>)
     1b2:	681b      	ldr	r3, [r3, #0]
     1b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     1b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     1bc:	6013      	str	r3, [r2, #0]
     1be:	4a0f      	ldr	r2, [pc, #60]	; (1fc <itm_start+0x74>)
     1c0:	4b0e      	ldr	r3, [pc, #56]	; (1fc <itm_start+0x74>)
     1c2:	681b      	ldr	r3, [r3, #0]
     1c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     1c8:	6013      	str	r3, [r2, #0]
     1ca:	4b09      	ldr	r3, [pc, #36]	; (1f0 <itm_start+0x68>)
     1cc:	2200      	movs	r2, #0
     1ce:	601a      	str	r2, [r3, #0]
     1d0:	687b      	ldr	r3, [r7, #4]
     1d2:	4618      	mov	r0, r3
     1d4:	f001 fb08 	bl	17e8 <am_hal_interrupt_master_set>

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     1d8:	f003 fb80 	bl	38dc <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     1dc:	f001 f922 	bl	1424 <am_bsp_debug_printf_enable>

    //
    // Clear the terminal.
    //
    am_util_stdio_terminal_clear();
     1e0:	f001 f8a0 	bl	1324 <am_util_stdio_terminal_clear>
}
     1e4:	bf00      	nop
     1e6:	3708      	adds	r7, #8
     1e8:	46bd      	mov	sp, r7
     1ea:	bd80      	pop	{r7, pc}
     1ec:	000014a5 	.word	0x000014a5
     1f0:	40010060 	.word	0x40010060
     1f4:	40010054 	.word	0x40010054
     1f8:	40010028 	.word	0x40010028
     1fc:	40010108 	.word	0x40010108

00000200 <ios_set_up>:
// Configure the IOS as I2C slave.
//
//*****************************************************************************
static void
ios_set_up(void)
{
     200:	b580      	push	{r7, lr}
     202:	b084      	sub	sp, #16
     204:	af00      	add	r7, sp, #0
  // Configure I2C interface
    am_hal_gpio_pin_config(0, AM_HAL_PIN_0_SLSCL);
     206:	f001 faeb 	bl	17e0 <am_hal_interrupt_master_disable>
     20a:	4603      	mov	r3, r0
     20c:	60fb      	str	r3, [r7, #12]
     20e:	4b3c      	ldr	r3, [pc, #240]	; (300 <ios_set_up+0x100>)
     210:	2273      	movs	r2, #115	; 0x73
     212:	601a      	str	r2, [r3, #0]
     214:	4a3b      	ldr	r2, [pc, #236]	; (304 <ios_set_up+0x104>)
     216:	4b3b      	ldr	r3, [pc, #236]	; (304 <ios_set_up+0x104>)
     218:	681b      	ldr	r3, [r3, #0]
     21a:	f023 0307 	bic.w	r3, r3, #7
     21e:	6013      	str	r3, [r2, #0]
     220:	4a39      	ldr	r2, [pc, #228]	; (308 <ios_set_up+0x108>)
     222:	4b39      	ldr	r3, [pc, #228]	; (308 <ios_set_up+0x108>)
     224:	681b      	ldr	r3, [r3, #0]
     226:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     22a:	f043 0302 	orr.w	r3, r3, #2
     22e:	6013      	str	r3, [r2, #0]
     230:	4a36      	ldr	r2, [pc, #216]	; (30c <ios_set_up+0x10c>)
     232:	4b36      	ldr	r3, [pc, #216]	; (30c <ios_set_up+0x10c>)
     234:	681b      	ldr	r3, [r3, #0]
     236:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     23a:	6013      	str	r3, [r2, #0]
     23c:	4b30      	ldr	r3, [pc, #192]	; (300 <ios_set_up+0x100>)
     23e:	2200      	movs	r2, #0
     240:	601a      	str	r2, [r3, #0]
     242:	68fb      	ldr	r3, [r7, #12]
     244:	4618      	mov	r0, r3
     246:	f001 facf 	bl	17e8 <am_hal_interrupt_master_set>
    am_hal_gpio_pin_config(1, AM_HAL_PIN_1_SLSDA);
     24a:	f001 fac9 	bl	17e0 <am_hal_interrupt_master_disable>
     24e:	4603      	mov	r3, r0
     250:	60bb      	str	r3, [r7, #8]
     252:	4b2b      	ldr	r3, [pc, #172]	; (300 <ios_set_up+0x100>)
     254:	2273      	movs	r2, #115	; 0x73
     256:	601a      	str	r2, [r3, #0]
     258:	4a2a      	ldr	r2, [pc, #168]	; (304 <ios_set_up+0x104>)
     25a:	4b2a      	ldr	r3, [pc, #168]	; (304 <ios_set_up+0x104>)
     25c:	681b      	ldr	r3, [r3, #0]
     25e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     266:	6013      	str	r3, [r2, #0]
     268:	4a27      	ldr	r2, [pc, #156]	; (308 <ios_set_up+0x108>)
     26a:	4b27      	ldr	r3, [pc, #156]	; (308 <ios_set_up+0x108>)
     26c:	681b      	ldr	r3, [r3, #0]
     26e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     276:	6013      	str	r3, [r2, #0]
     278:	4a24      	ldr	r2, [pc, #144]	; (30c <ios_set_up+0x10c>)
     27a:	4b24      	ldr	r3, [pc, #144]	; (30c <ios_set_up+0x10c>)
     27c:	681b      	ldr	r3, [r3, #0]
     27e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     282:	6013      	str	r3, [r2, #0]
     284:	4b1e      	ldr	r3, [pc, #120]	; (300 <ios_set_up+0x100>)
     286:	2200      	movs	r2, #0
     288:	601a      	str	r2, [r3, #0]
     28a:	68bb      	ldr	r3, [r7, #8]
     28c:	4618      	mov	r0, r3
     28e:	f001 faab 	bl	17e8 <am_hal_interrupt_master_set>

    //
    // Configure the IOS interface and LRAM structure.
    //
    am_hal_ios_config(&g_sIOSI2cConfig);
     292:	481f      	ldr	r0, [pc, #124]	; (310 <ios_set_up+0x110>)
     294:	f003 fac0 	bl	3818 <am_hal_ios_config>

    //
    // Clear out any IOS register-access interrupts that may be active, and
    // enable interrupts for the registers we're interested in.
    //
    am_hal_ios_access_int_clear(AM_HAL_IOS_ACCESS_INT_ALL);
     298:	f04f 30ff 	mov.w	r0, #4294967295
     29c:	f003 fb0e 	bl	38bc <am_hal_ios_access_int_clear>
    am_hal_ios_int_clear(AM_HAL_IOS_INT_ALL);
     2a0:	f04f 30ff 	mov.w	r0, #4294967295
     2a4:	f003 fb10 	bl	38c8 <am_hal_ios_int_clear>

    //
    // Set the bit in the NVIC to accept access interrupts from the IO Slave.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_IOSACC);
     2a8:	2015      	movs	r0, #21
     2aa:	f001 fa6d 	bl	1788 <am_hal_interrupt_enable>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_IOSLAVE);
     2ae:	2014      	movs	r0, #20
     2b0:	f001 fa6a 	bl	1788 <am_hal_interrupt_enable>

    // Set up the IOSINT interrupt pin
    am_hal_gpio_pin_config(4, AM_HAL_PIN_4_SLINT);
     2b4:	f001 fa94 	bl	17e0 <am_hal_interrupt_master_disable>
     2b8:	4603      	mov	r3, r0
     2ba:	607b      	str	r3, [r7, #4]
     2bc:	4b10      	ldr	r3, [pc, #64]	; (300 <ios_set_up+0x100>)
     2be:	2273      	movs	r2, #115	; 0x73
     2c0:	601a      	str	r2, [r3, #0]
     2c2:	4a10      	ldr	r2, [pc, #64]	; (304 <ios_set_up+0x104>)
     2c4:	4b0f      	ldr	r3, [pc, #60]	; (304 <ios_set_up+0x104>)
     2c6:	681b      	ldr	r3, [r3, #0]
     2c8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
     2cc:	6013      	str	r3, [r2, #0]
     2ce:	4a11      	ldr	r2, [pc, #68]	; (314 <ios_set_up+0x114>)
     2d0:	4b10      	ldr	r3, [pc, #64]	; (314 <ios_set_up+0x114>)
     2d2:	681b      	ldr	r3, [r3, #0]
     2d4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     2d8:	f043 0308 	orr.w	r3, r3, #8
     2dc:	6013      	str	r3, [r2, #0]
     2de:	4a0e      	ldr	r2, [pc, #56]	; (318 <ios_set_up+0x118>)
     2e0:	4b0d      	ldr	r3, [pc, #52]	; (318 <ios_set_up+0x118>)
     2e2:	681b      	ldr	r3, [r3, #0]
     2e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     2e8:	6013      	str	r3, [r2, #0]
     2ea:	4b05      	ldr	r3, [pc, #20]	; (300 <ios_set_up+0x100>)
     2ec:	2200      	movs	r2, #0
     2ee:	601a      	str	r2, [r3, #0]
     2f0:	687b      	ldr	r3, [r7, #4]
     2f2:	4618      	mov	r0, r3
     2f4:	f001 fa78 	bl	17e8 <am_hal_interrupt_master_set>
}
     2f8:	bf00      	nop
     2fa:	3710      	adds	r7, #16
     2fc:	46bd      	mov	sp, r7
     2fe:	bd80      	pop	{r7, pc}
     300:	40010060 	.word	0x40010060
     304:	40010040 	.word	0x40010040
     308:	40010000 	.word	0x40010000
     30c:	400100e0 	.word	0x400100e0
     310:	10001010 	.word	0x10001010
     314:	40010004 	.word	0x40010004
     318:	400100e4 	.word	0x400100e4

0000031c <iom_set_up>:
// Configure the IOM as I2C master.
//
//*****************************************************************************
static void
iom_set_up(void)
{
     31c:	b580      	push	{r7, lr}
     31e:	b082      	sub	sp, #8
     320:	af00      	add	r7, sp, #0
    //
    // Enable power to IOM.
    //
    am_hal_iom_pwrctrl_enable(IOM_MODULE);
     322:	2000      	movs	r0, #0
     324:	f001 ff16 	bl	2154 <am_hal_iom_pwrctrl_enable>

    //
    // Set the required configuration settings for the IOM.
    //
    am_hal_iom_config(IOM_MODULE, &g_sIOMI2cConfig);
     328:	492f      	ldr	r1, [pc, #188]	; (3e8 <iom_set_up+0xcc>)
     32a:	2000      	movs	r0, #0
     32c:	f001 ff3c 	bl	21a8 <am_hal_iom_config>

    //
    // Set pins high to prevent bus dips.
    //
    am_hal_gpio_out_bit_set(5);
     330:	4b2e      	ldr	r3, [pc, #184]	; (3ec <iom_set_up+0xd0>)
     332:	2220      	movs	r2, #32
     334:	601a      	str	r2, [r3, #0]
    am_hal_gpio_out_bit_set(6);
     336:	4b2d      	ldr	r3, [pc, #180]	; (3ec <iom_set_up+0xd0>)
     338:	2240      	movs	r2, #64	; 0x40
     33a:	601a      	str	r2, [r3, #0]
#ifdef INTERNAL_LOOPBACK
    am_hal_gpio_pin_config(5, AM_HAL_PIN_5_M0SCLLB | AM_HAL_GPIO_PULLUP);
    am_hal_gpio_pin_config(6, AM_HAL_PIN_6_SLSDALB | AM_HAL_GPIO_PULLUP);
    AM_REG(GPIO, LOOPBACK) = IOM_MODULE;
#else
    am_hal_gpio_pin_config(5, AM_HAL_PIN_5_M0SCL | AM_HAL_GPIO_PULLUP);
     33c:	f001 fa50 	bl	17e0 <am_hal_interrupt_master_disable>
     340:	4603      	mov	r3, r0
     342:	607b      	str	r3, [r7, #4]
     344:	4b2a      	ldr	r3, [pc, #168]	; (3f0 <iom_set_up+0xd4>)
     346:	2273      	movs	r2, #115	; 0x73
     348:	601a      	str	r2, [r3, #0]
     34a:	4a2a      	ldr	r2, [pc, #168]	; (3f4 <iom_set_up+0xd8>)
     34c:	4b29      	ldr	r3, [pc, #164]	; (3f4 <iom_set_up+0xd8>)
     34e:	681b      	ldr	r3, [r3, #0]
     350:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
     354:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
     358:	6013      	str	r3, [r2, #0]
     35a:	4a27      	ldr	r2, [pc, #156]	; (3f8 <iom_set_up+0xdc>)
     35c:	4b26      	ldr	r3, [pc, #152]	; (3f8 <iom_set_up+0xdc>)
     35e:	681b      	ldr	r3, [r3, #0]
     360:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     364:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     368:	6013      	str	r3, [r2, #0]
     36a:	4a24      	ldr	r2, [pc, #144]	; (3fc <iom_set_up+0xe0>)
     36c:	4b23      	ldr	r3, [pc, #140]	; (3fc <iom_set_up+0xe0>)
     36e:	681b      	ldr	r3, [r3, #0]
     370:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     374:	6013      	str	r3, [r2, #0]
     376:	4b1e      	ldr	r3, [pc, #120]	; (3f0 <iom_set_up+0xd4>)
     378:	2200      	movs	r2, #0
     37a:	601a      	str	r2, [r3, #0]
     37c:	687b      	ldr	r3, [r7, #4]
     37e:	4618      	mov	r0, r3
     380:	f001 fa32 	bl	17e8 <am_hal_interrupt_master_set>
    am_hal_gpio_pin_config(6, AM_HAL_PIN_6_M0SDA | AM_HAL_GPIO_PULLUP);
     384:	f001 fa2c 	bl	17e0 <am_hal_interrupt_master_disable>
     388:	4603      	mov	r3, r0
     38a:	603b      	str	r3, [r7, #0]
     38c:	4b18      	ldr	r3, [pc, #96]	; (3f0 <iom_set_up+0xd4>)
     38e:	2273      	movs	r2, #115	; 0x73
     390:	601a      	str	r2, [r3, #0]
     392:	4a18      	ldr	r2, [pc, #96]	; (3f4 <iom_set_up+0xd8>)
     394:	4b17      	ldr	r3, [pc, #92]	; (3f4 <iom_set_up+0xd8>)
     396:	681b      	ldr	r3, [r3, #0]
     398:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     39c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
     3a0:	6013      	str	r3, [r2, #0]
     3a2:	4a15      	ldr	r2, [pc, #84]	; (3f8 <iom_set_up+0xdc>)
     3a4:	4b14      	ldr	r3, [pc, #80]	; (3f8 <iom_set_up+0xdc>)
     3a6:	681b      	ldr	r3, [r3, #0]
     3a8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     3ac:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
     3b0:	6013      	str	r3, [r2, #0]
     3b2:	4a12      	ldr	r2, [pc, #72]	; (3fc <iom_set_up+0xe0>)
     3b4:	4b11      	ldr	r3, [pc, #68]	; (3fc <iom_set_up+0xe0>)
     3b6:	681b      	ldr	r3, [r3, #0]
     3b8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     3bc:	6013      	str	r3, [r2, #0]
     3be:	4b0c      	ldr	r3, [pc, #48]	; (3f0 <iom_set_up+0xd4>)
     3c0:	2200      	movs	r2, #0
     3c2:	601a      	str	r2, [r3, #0]
     3c4:	683b      	ldr	r3, [r7, #0]
     3c6:	4618      	mov	r0, r3
     3c8:	f001 fa0e 	bl	17e8 <am_hal_interrupt_master_set>
#endif

    am_hal_iom_int_enable(IOM_MODULE, 0xFF);
     3cc:	21ff      	movs	r1, #255	; 0xff
     3ce:	2000      	movs	r0, #0
     3d0:	f003 f9fa 	bl	37c8 <am_hal_iom_int_enable>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_IOMASTER0);
     3d4:	2016      	movs	r0, #22
     3d6:	f001 f9d7 	bl	1788 <am_hal_interrupt_enable>

    //
    // Turn on the IOM for this operation.
    //
    am_bsp_iom_enable(IOM_MODULE);
     3da:	2000      	movs	r0, #0
     3dc:	f000 ffac 	bl	1338 <am_bsp_iom_enable>
}
     3e0:	bf00      	nop
     3e2:	3708      	adds	r7, #8
     3e4:	46bd      	mov	sp, r7
     3e6:	bd80      	pop	{r7, pc}
     3e8:	10001028 	.word	0x10001028
     3ec:	40010090 	.word	0x40010090
     3f0:	40010060 	.word	0x40010060
     3f4:	40010040 	.word	0x40010040
     3f8:	40010004 	.word	0x40010004
     3fc:	400100e4 	.word	0x400100e4

00000400 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     400:	b590      	push	{r4, r7, lr}
     402:	b087      	sub	sp, #28
     404:	af02      	add	r7, sp, #8
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     406:	2000      	movs	r0, #0
     408:	f001 f8e4 	bl	15d4 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     40c:	4840      	ldr	r0, [pc, #256]	; (510 <main+0x110>)
     40e:	f001 f84b 	bl	14a8 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     412:	f000 fff5 	bl	1400 <am_bsp_low_power_init>

    //
    //
    // Initialize the printf interface for ITM/SWO output.
    //
    itm_start();
     416:	f7ff feb7 	bl	188 <itm_start>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
     41a:	f000 ff83 	bl	1324 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("I2C Loopback Example using IOMSTR #4 and IOSLAVE");
     41e:	483d      	ldr	r0, [pc, #244]	; (514 <main+0x114>)
     420:	f000 ff62 	bl	12e8 <am_util_stdio_printf>

    //
    // Allow time for all printing to finish.
    //
    am_util_delay_ms(10);
     424:	200a      	movs	r0, #10
     426:	f000 f8c1 	bl	5ac <am_util_delay_ms>

    //
    // Enable Interrupts.
    //
    am_hal_interrupt_master_enable();
     42a:	f001 f9d5 	bl	17d8 <am_hal_interrupt_master_enable>

    //
    // Set up the IOS
    //
    ios_set_up();
     42e:	f7ff fee7 	bl	200 <ios_set_up>

    //
    // Set up the IOM
    //
    iom_set_up();
     432:	f7ff ff73 	bl	31c <iom_set_up>

    //
    // Perform a 16-byte transfer as a blocking operation.
    //
    am_hal_iom_i2c_write(IOM_MODULE, GET_I2CADDR(g_sIOSI2cConfig.ui32InterfaceSelect),
     436:	4b38      	ldr	r3, [pc, #224]	; (518 <main+0x118>)
     438:	681b      	ldr	r3, [r3, #0]
     43a:	0a5b      	lsrs	r3, r3, #9
     43c:	f3c3 010a 	ubfx	r1, r3, #0, #11
     440:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     444:	9300      	str	r3, [sp, #0]
     446:	2310      	movs	r3, #16
     448:	4a34      	ldr	r2, [pc, #208]	; (51c <main+0x11c>)
     44a:	2000      	movs	r0, #0
     44c:	f002 fef2 	bl	3234 <am_hal_iom_i2c_write>
                       (uint32_t *)&g_testdata, 16, AM_HAL_IOM_OFFSET(0x80));
    am_util_stdio_printf("\nBlocking Transfer Complete\n");
     450:	4833      	ldr	r0, [pc, #204]	; (520 <main+0x120>)
     452:	f000 ff49 	bl	12e8 <am_util_stdio_printf>

    for ( uint32_t i = 0; i < 16; i++ )
     456:	2300      	movs	r3, #0
     458:	60fb      	str	r3, [r7, #12]
     45a:	e010      	b.n	47e <main+0x7e>
    {
        if ( g_testdata[i] != am_hal_ios_lram_read(i) )
     45c:	4a2f      	ldr	r2, [pc, #188]	; (51c <main+0x11c>)
     45e:	68fb      	ldr	r3, [r7, #12]
     460:	4413      	add	r3, r2
     462:	781c      	ldrb	r4, [r3, #0]
     464:	68f8      	ldr	r0, [r7, #12]
     466:	f003 fa35 	bl	38d4 <am_hal_ios_lram_read>
     46a:	4603      	mov	r3, r0
     46c:	429c      	cmp	r4, r3
     46e:	d003      	beq.n	478 <main+0x78>
        {
            am_util_stdio_printf("\nIOS Data did not match IOM data sent!!!\n");
     470:	482c      	ldr	r0, [pc, #176]	; (524 <main+0x124>)
     472:	f000 ff39 	bl	12e8 <am_util_stdio_printf>
            break;
     476:	e005      	b.n	484 <main+0x84>
    for ( uint32_t i = 0; i < 16; i++ )
     478:	68fb      	ldr	r3, [r7, #12]
     47a:	3301      	adds	r3, #1
     47c:	60fb      	str	r3, [r7, #12]
     47e:	68fb      	ldr	r3, [r7, #12]
     480:	2b0f      	cmp	r3, #15
     482:	d9eb      	bls.n	45c <main+0x5c>
    }

    //
    // Set up the IOM transaction queue.
    //
    am_hal_iom_queue_init(IOM_MODULE, g_psQueueMemory, sizeof(g_psQueueMemory));
     484:	f44f 7260 	mov.w	r2, #896	; 0x380
     488:	4927      	ldr	r1, [pc, #156]	; (528 <main+0x128>)
     48a:	2000      	movs	r0, #0
     48c:	f003 f8fe 	bl	368c <am_hal_iom_queue_init>

    //
    // Perform a 16-byte transfer as a blocking operation.
    //
    for ( uint32_t i = 0; i < sizeof(g_testdata); i++ )
     490:	2300      	movs	r3, #0
     492:	60bb      	str	r3, [r7, #8]
     494:	e014      	b.n	4c0 <main+0xc0>
    {
        am_hal_iom_i2c_write(IOM_MODULE, GET_I2CADDR(g_sIOSI2cConfig.ui32InterfaceSelect),
     496:	4b20      	ldr	r3, [pc, #128]	; (518 <main+0x118>)
     498:	681b      	ldr	r3, [r3, #0]
     49a:	0a5b      	lsrs	r3, r3, #9
     49c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                             (uint32_t *)&g_testdata[i], 1, AM_HAL_IOM_OFFSET(0x80 | i));
     4a0:	68bb      	ldr	r3, [r7, #8]
     4a2:	4a1e      	ldr	r2, [pc, #120]	; (51c <main+0x11c>)
     4a4:	441a      	add	r2, r3
     4a6:	68bb      	ldr	r3, [r7, #8]
     4a8:	021b      	lsls	r3, r3, #8
     4aa:	b29b      	uxth	r3, r3
        am_hal_iom_i2c_write(IOM_MODULE, GET_I2CADDR(g_sIOSI2cConfig.ui32InterfaceSelect),
     4ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     4b0:	9300      	str	r3, [sp, #0]
     4b2:	2301      	movs	r3, #1
     4b4:	2000      	movs	r0, #0
     4b6:	f002 febd 	bl	3234 <am_hal_iom_i2c_write>
    for ( uint32_t i = 0; i < sizeof(g_testdata); i++ )
     4ba:	68bb      	ldr	r3, [r7, #8]
     4bc:	3301      	adds	r3, #1
     4be:	60bb      	str	r3, [r7, #8]
     4c0:	68bb      	ldr	r3, [r7, #8]
     4c2:	2b0f      	cmp	r3, #15
     4c4:	d9e7      	bls.n	496 <main+0x96>
    }

    am_util_delay_ms(10);
     4c6:	200a      	movs	r0, #10
     4c8:	f000 f870 	bl	5ac <am_util_delay_ms>
    am_util_stdio_printf("\nNon-Blocking Transfer Complete\n");
     4cc:	4817      	ldr	r0, [pc, #92]	; (52c <main+0x12c>)
     4ce:	f000 ff0b 	bl	12e8 <am_util_stdio_printf>

    for ( uint32_t i = 0; i < 16; i++ )
     4d2:	2300      	movs	r3, #0
     4d4:	607b      	str	r3, [r7, #4]
     4d6:	e010      	b.n	4fa <main+0xfa>
    {
        if ( g_testdata[i] != am_hal_ios_lram_read(i) )
     4d8:	4a10      	ldr	r2, [pc, #64]	; (51c <main+0x11c>)
     4da:	687b      	ldr	r3, [r7, #4]
     4dc:	4413      	add	r3, r2
     4de:	781c      	ldrb	r4, [r3, #0]
     4e0:	6878      	ldr	r0, [r7, #4]
     4e2:	f003 f9f7 	bl	38d4 <am_hal_ios_lram_read>
     4e6:	4603      	mov	r3, r0
     4e8:	429c      	cmp	r4, r3
     4ea:	d003      	beq.n	4f4 <main+0xf4>
        {
            am_util_stdio_printf("\nIOS Data did not match IOM data sent!!!\n");
     4ec:	480d      	ldr	r0, [pc, #52]	; (524 <main+0x124>)
     4ee:	f000 fefb 	bl	12e8 <am_util_stdio_printf>
            break;
     4f2:	e005      	b.n	500 <main+0x100>
    for ( uint32_t i = 0; i < 16; i++ )
     4f4:	687b      	ldr	r3, [r7, #4]
     4f6:	3301      	adds	r3, #1
     4f8:	607b      	str	r3, [r7, #4]
     4fa:	687b      	ldr	r3, [r7, #4]
     4fc:	2b0f      	cmp	r3, #15
     4fe:	d9eb      	bls.n	4d8 <main+0xd8>
        }
    }

    // Make sure the print is complete
    am_util_delay_ms(100);
     500:	2064      	movs	r0, #100	; 0x64
     502:	f000 f853 	bl	5ac <am_util_delay_ms>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     506:	2001      	movs	r0, #1
     508:	f003 fd36 	bl	3f78 <am_hal_sysctrl_sleep>
     50c:	e7fb      	b.n	506 <main+0x106>
     50e:	bf00      	nop
     510:	0000531c 	.word	0x0000531c
     514:	00005234 	.word	0x00005234
     518:	10001010 	.word	0x10001010
     51c:	10001000 	.word	0x10001000
     520:	00005268 	.word	0x00005268
     524:	00005288 	.word	0x00005288
     528:	10001198 	.word	0x10001198
     52c:	000052b4 	.word	0x000052b4

00000530 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     530:	4811      	ldr	r0, [pc, #68]	; (578 <zero_loop+0x12>)
     532:	4912      	ldr	r1, [pc, #72]	; (57c <zero_loop+0x16>)
     534:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     536:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     53a:	4811      	ldr	r0, [pc, #68]	; (580 <zero_loop+0x1a>)
     53c:	6801      	ldr	r1, [r0, #0]
     53e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     542:	6001      	str	r1, [r0, #0]
     544:	f3bf 8f4f 	dsb	sy
     548:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     54c:	480d      	ldr	r0, [pc, #52]	; (584 <zero_loop+0x1e>)
     54e:	490e      	ldr	r1, [pc, #56]	; (588 <zero_loop+0x22>)
     550:	4a0e      	ldr	r2, [pc, #56]	; (58c <zero_loop+0x26>)

00000552 <copy_loop>:
     552:	f850 3b04 	ldr.w	r3, [r0], #4
     556:	f841 3b04 	str.w	r3, [r1], #4
     55a:	4291      	cmp	r1, r2
     55c:	dbf9      	blt.n	552 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     55e:	480c      	ldr	r0, [pc, #48]	; (590 <zero_loop+0x2a>)
     560:	490c      	ldr	r1, [pc, #48]	; (594 <zero_loop+0x2e>)
     562:	f04f 0200 	mov.w	r2, #0

00000566 <zero_loop>:
     566:	4288      	cmp	r0, r1
     568:	bfb8      	it	lt
     56a:	f840 2b04 	strlt.w	r2, [r0], #4
     56e:	dbfa      	blt.n	566 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     570:	f7ff ff46 	bl	400 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     574:	be00      	bkpt	0x0000
}
     576:	bf00      	nop
     578:	e000ed08 	.word	0xe000ed08
     57c:	00000000 	.word	0x00000000
     580:	e000ed88 	.word	0xe000ed88
     584:	000054dc 	.word	0x000054dc
     588:	10001000 	.word	0x10001000
     58c:	10001044 	.word	0x10001044
     590:	10001044 	.word	0x10001044
     594:	100016c4 	.word	0x100016c4

00000598 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     598:	b480      	push	{r7}
     59a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     59c:	e7fe      	b.n	59c <am_nmi_isr+0x4>

0000059e <am_busfault_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_fault_isr(void)
{
     59e:	b480      	push	{r7}
     5a0:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     5a2:	e7fe      	b.n	5a2 <am_busfault_isr+0x4>

000005a4 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     5a4:	b480      	push	{r7}
     5a6:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     5a8:	e7fe      	b.n	5a8 <am_adc_isr+0x4>
	...

000005ac <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
     5ac:	b580      	push	{r7, lr}
     5ae:	b084      	sub	sp, #16
     5b0:	af00      	add	r7, sp, #0
     5b2:	6078      	str	r0, [r7, #4]
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
     5b4:	f001 f826 	bl	1604 <am_hal_clkgen_sysclk_get>
     5b8:	60f8      	str	r0, [r7, #12]
#endif
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
     5ba:	68fb      	ldr	r3, [r7, #12]
     5bc:	4a07      	ldr	r2, [pc, #28]	; (5dc <am_util_delay_ms+0x30>)
     5be:	fba2 2303 	umull	r2, r3, r2, r3
     5c2:	099b      	lsrs	r3, r3, #6
     5c4:	687a      	ldr	r2, [r7, #4]
     5c6:	fb02 f303 	mul.w	r3, r2, r3
     5ca:	60bb      	str	r3, [r7, #8]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
     5cc:	68b8      	ldr	r0, [r7, #8]
     5ce:	f001 f835 	bl	163c <am_hal_flash_delay>
}
     5d2:	bf00      	nop
     5d4:	3710      	adds	r7, #16
     5d6:	46bd      	mov	sp, r7
     5d8:	bd80      	pop	{r7, pc}
     5da:	bf00      	nop
     5dc:	057619f1 	.word	0x057619f1

000005e0 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     5e0:	b480      	push	{r7}
     5e2:	b083      	sub	sp, #12
     5e4:	af00      	add	r7, sp, #0
     5e6:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     5e8:	4a04      	ldr	r2, [pc, #16]	; (5fc <am_util_stdio_printf_init+0x1c>)
     5ea:	687b      	ldr	r3, [r7, #4]
     5ec:	6013      	str	r3, [r2, #0]
}
     5ee:	bf00      	nop
     5f0:	370c      	adds	r7, #12
     5f2:	46bd      	mov	sp, r7
     5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     5f8:	4770      	bx	lr
     5fa:	bf00      	nop
     5fc:	10001528 	.word	0x10001528

00000600 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     600:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     604:	b096      	sub	sp, #88	; 0x58
     606:	af00      	add	r7, sp, #0
     608:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     60c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     610:	0025      	movs	r5, r4
     612:	2600      	movs	r6, #0
     614:	ea55 0306 	orrs.w	r3, r5, r6
     618:	f000 80a0 	beq.w	75c <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     61c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     620:	0862      	lsrs	r2, r4, #1
     622:	ea4f 0133 	mov.w	r1, r3, rrx
     626:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     62a:	ea4f 0893 	mov.w	r8, r3, lsr #2
     62e:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     632:	ea4f 0994 	mov.w	r9, r4, lsr #2
     636:	eb11 0308 	adds.w	r3, r1, r8
     63a:	eb42 0409 	adc.w	r4, r2, r9
     63e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     642:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     646:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     64a:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     64e:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     652:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     656:	eb13 030a 	adds.w	r3, r3, sl
     65a:	eb44 040b 	adc.w	r4, r4, fp
     65e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     662:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     666:	0a1a      	lsrs	r2, r3, #8
     668:	62ba      	str	r2, [r7, #40]	; 0x28
     66a:	6aba      	ldr	r2, [r7, #40]	; 0x28
     66c:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     670:	62ba      	str	r2, [r7, #40]	; 0x28
     672:	0a23      	lsrs	r3, r4, #8
     674:	62fb      	str	r3, [r7, #44]	; 0x2c
     676:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     67a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     67e:	18c9      	adds	r1, r1, r3
     680:	eb42 0204 	adc.w	r2, r2, r4
     684:	460b      	mov	r3, r1
     686:	4614      	mov	r4, r2
     688:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     68c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     690:	0c1a      	lsrs	r2, r3, #16
     692:	623a      	str	r2, [r7, #32]
     694:	6a3a      	ldr	r2, [r7, #32]
     696:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     69a:	623a      	str	r2, [r7, #32]
     69c:	0c23      	lsrs	r3, r4, #16
     69e:	627b      	str	r3, [r7, #36]	; 0x24
     6a0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6a4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     6a8:	18c9      	adds	r1, r1, r3
     6aa:	eb42 0204 	adc.w	r2, r2, r4
     6ae:	460b      	mov	r3, r1
     6b0:	4614      	mov	r4, r2
     6b2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     6b6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6ba:	0023      	movs	r3, r4
     6bc:	603b      	str	r3, [r7, #0]
     6be:	2300      	movs	r3, #0
     6c0:	607b      	str	r3, [r7, #4]
     6c2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6c6:	e897 0006 	ldmia.w	r7, {r1, r2}
     6ca:	18c9      	adds	r1, r1, r3
     6cc:	eb42 0204 	adc.w	r2, r2, r4
     6d0:	460b      	mov	r3, r1
     6d2:	4614      	mov	r4, r2
     6d4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     6d8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6dc:	08da      	lsrs	r2, r3, #3
     6de:	613a      	str	r2, [r7, #16]
     6e0:	693a      	ldr	r2, [r7, #16]
     6e2:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     6e6:	613a      	str	r2, [r7, #16]
     6e8:	08e3      	lsrs	r3, r4, #3
     6ea:	617b      	str	r3, [r7, #20]
     6ec:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     6f0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     6f4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
     6f8:	460b      	mov	r3, r1
     6fa:	4614      	mov	r4, r2
     6fc:	00a0      	lsls	r0, r4, #2
     6fe:	60f8      	str	r0, [r7, #12]
     700:	68f8      	ldr	r0, [r7, #12]
     702:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
     706:	60f8      	str	r0, [r7, #12]
     708:	009b      	lsls	r3, r3, #2
     70a:	60bb      	str	r3, [r7, #8]
     70c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     710:	185b      	adds	r3, r3, r1
     712:	eb44 0402 	adc.w	r4, r4, r2
     716:	18db      	adds	r3, r3, r3
     718:	eb44 0404 	adc.w	r4, r4, r4
     71c:	4619      	mov	r1, r3
     71e:	4622      	mov	r2, r4
     720:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     724:	1a5b      	subs	r3, r3, r1
     726:	eb64 0402 	sbc.w	r4, r4, r2
     72a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     72e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     732:	3306      	adds	r3, #6
     734:	f144 0400 	adc.w	r4, r4, #0
     738:	091a      	lsrs	r2, r3, #4
     73a:	61ba      	str	r2, [r7, #24]
     73c:	69ba      	ldr	r2, [r7, #24]
     73e:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     742:	61ba      	str	r2, [r7, #24]
     744:	0923      	lsrs	r3, r4, #4
     746:	61fb      	str	r3, [r7, #28]
     748:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     74c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     750:	18c9      	adds	r1, r1, r3
     752:	eb42 0204 	adc.w	r2, r2, r4
     756:	460b      	mov	r3, r1
     758:	4614      	mov	r4, r2
     75a:	e029      	b.n	7b0 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     75e:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     762:	085a      	lsrs	r2, r3, #1
     764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     766:	089b      	lsrs	r3, r3, #2
     768:	4413      	add	r3, r2
     76a:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     76c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     76e:	091b      	lsrs	r3, r3, #4
     770:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     772:	4413      	add	r3, r2
     774:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     778:	0a1b      	lsrs	r3, r3, #8
     77a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     77c:	4413      	add	r3, r2
     77e:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     782:	0c1b      	lsrs	r3, r3, #16
     784:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     786:	4413      	add	r3, r2
     788:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     78a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     78c:	08db      	lsrs	r3, r3, #3
     78e:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     790:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     792:	4613      	mov	r3, r2
     794:	009b      	lsls	r3, r3, #2
     796:	4413      	add	r3, r2
     798:	005b      	lsls	r3, r3, #1
     79a:	461a      	mov	r2, r3
     79c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     79e:	1a9b      	subs	r3, r3, r2
     7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     7a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     7a4:	3306      	adds	r3, #6
     7a6:	091a      	lsrs	r2, r3, #4
     7a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     7aa:	4413      	add	r3, r2
     7ac:	f04f 0400 	mov.w	r4, #0
    }
}
     7b0:	4618      	mov	r0, r3
     7b2:	4621      	mov	r1, r4
     7b4:	3758      	adds	r7, #88	; 0x58
     7b6:	46bd      	mov	sp, r7
     7b8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     7bc:	4770      	bx	lr

000007be <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     7be:	b590      	push	{r4, r7, lr}
     7c0:	b085      	sub	sp, #20
     7c2:	af00      	add	r7, sp, #0
     7c4:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     7c8:	683a      	ldr	r2, [r7, #0]
     7ca:	687b      	ldr	r3, [r7, #4]
     7cc:	4313      	orrs	r3, r2
     7ce:	2b00      	cmp	r3, #0
     7d0:	bf0c      	ite	eq
     7d2:	2301      	moveq	r3, #1
     7d4:	2300      	movne	r3, #0
     7d6:	b2db      	uxtb	r3, r3
     7d8:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     7da:	e008      	b.n	7ee <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     7dc:	e9d7 0100 	ldrd	r0, r1, [r7]
     7e0:	f7ff ff0e 	bl	600 <divu64_10>
     7e4:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     7e8:	68fb      	ldr	r3, [r7, #12]
     7ea:	3301      	adds	r3, #1
     7ec:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
     7ee:	e897 0018 	ldmia.w	r7, {r3, r4}
     7f2:	4323      	orrs	r3, r4
     7f4:	d1f2      	bne.n	7dc <ndigits_in_u64+0x1e>
    }

    return iNDigits;
     7f6:	68fb      	ldr	r3, [r7, #12]
}
     7f8:	4618      	mov	r0, r3
     7fa:	3714      	adds	r7, #20
     7fc:	46bd      	mov	sp, r7
     7fe:	bd90      	pop	{r4, r7, pc}

00000800 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     800:	b590      	push	{r4, r7, lr}
     802:	b083      	sub	sp, #12
     804:	af00      	add	r7, sp, #0
     806:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     80a:	e897 0018 	ldmia.w	r7, {r3, r4}
     80e:	2b00      	cmp	r3, #0
     810:	f174 0300 	sbcs.w	r3, r4, #0
     814:	da06      	bge.n	824 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     816:	e897 0018 	ldmia.w	r7, {r3, r4}
     81a:	425b      	negs	r3, r3
     81c:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     820:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     824:	e897 0018 	ldmia.w	r7, {r3, r4}
     828:	4618      	mov	r0, r3
     82a:	4621      	mov	r1, r4
     82c:	f7ff ffc7 	bl	7be <ndigits_in_u64>
     830:	4603      	mov	r3, r0
}
     832:	4618      	mov	r0, r3
     834:	370c      	adds	r7, #12
     836:	46bd      	mov	sp, r7
     838:	bd90      	pop	{r4, r7, pc}

0000083a <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     83a:	b490      	push	{r4, r7}
     83c:	b084      	sub	sp, #16
     83e:	af00      	add	r7, sp, #0
     840:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     844:	6839      	ldr	r1, [r7, #0]
     846:	687a      	ldr	r2, [r7, #4]
     848:	430a      	orrs	r2, r1
     84a:	2a00      	cmp	r2, #0
     84c:	bf0c      	ite	eq
     84e:	2201      	moveq	r2, #1
     850:	2200      	movne	r2, #0
     852:	b2d2      	uxtb	r2, r2
     854:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     856:	e00a      	b.n	86e <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     858:	e897 0006 	ldmia.w	r7, {r1, r2}
     85c:	090b      	lsrs	r3, r1, #4
     85e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     862:	0914      	lsrs	r4, r2, #4
     864:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     868:	68fa      	ldr	r2, [r7, #12]
     86a:	3201      	adds	r2, #1
     86c:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
     86e:	e897 0006 	ldmia.w	r7, {r1, r2}
     872:	430a      	orrs	r2, r1
     874:	d1f0      	bne.n	858 <ndigits_in_hex+0x1e>
    }

    return iDigits;
     876:	68fb      	ldr	r3, [r7, #12]
}
     878:	4618      	mov	r0, r3
     87a:	3710      	adds	r7, #16
     87c:	46bd      	mov	sp, r7
     87e:	bc90      	pop	{r4, r7}
     880:	4770      	bx	lr

00000882 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     882:	b480      	push	{r7}
     884:	b087      	sub	sp, #28
     886:	af00      	add	r7, sp, #0
     888:	6078      	str	r0, [r7, #4]
     88a:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     88c:	2300      	movs	r3, #0
     88e:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     890:	2300      	movs	r3, #0
     892:	613b      	str	r3, [r7, #16]
     894:	2300      	movs	r3, #0
     896:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     898:	687b      	ldr	r3, [r7, #4]
     89a:	781b      	ldrb	r3, [r3, #0]
     89c:	2b2d      	cmp	r3, #45	; 0x2d
     89e:	d11b      	bne.n	8d8 <decstr_to_int+0x56>
    {
        bNeg = true;
     8a0:	2301      	movs	r3, #1
     8a2:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     8a4:	687b      	ldr	r3, [r7, #4]
     8a6:	3301      	adds	r3, #1
     8a8:	607b      	str	r3, [r7, #4]
        uCnt++;
     8aa:	68fb      	ldr	r3, [r7, #12]
     8ac:	3301      	adds	r3, #1
     8ae:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     8b0:	e012      	b.n	8d8 <decstr_to_int+0x56>
    {
        ++uCnt;
     8b2:	68fb      	ldr	r3, [r7, #12]
     8b4:	3301      	adds	r3, #1
     8b6:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     8b8:	693a      	ldr	r2, [r7, #16]
     8ba:	4613      	mov	r3, r2
     8bc:	009b      	lsls	r3, r3, #2
     8be:	4413      	add	r3, r2
     8c0:	005b      	lsls	r3, r3, #1
     8c2:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     8c4:	687b      	ldr	r3, [r7, #4]
     8c6:	781b      	ldrb	r3, [r3, #0]
     8c8:	461a      	mov	r2, r3
     8ca:	693b      	ldr	r3, [r7, #16]
     8cc:	4413      	add	r3, r2
     8ce:	3b30      	subs	r3, #48	; 0x30
     8d0:	613b      	str	r3, [r7, #16]
        pcStr++;
     8d2:	687b      	ldr	r3, [r7, #4]
     8d4:	3301      	adds	r3, #1
     8d6:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     8d8:	687b      	ldr	r3, [r7, #4]
     8da:	781b      	ldrb	r3, [r3, #0]
     8dc:	2b2f      	cmp	r3, #47	; 0x2f
     8de:	d903      	bls.n	8e8 <decstr_to_int+0x66>
     8e0:	687b      	ldr	r3, [r7, #4]
     8e2:	781b      	ldrb	r3, [r3, #0]
     8e4:	2b39      	cmp	r3, #57	; 0x39
     8e6:	d9e4      	bls.n	8b2 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
     8e8:	683b      	ldr	r3, [r7, #0]
     8ea:	2b00      	cmp	r3, #0
     8ec:	d002      	beq.n	8f4 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     8ee:	683b      	ldr	r3, [r7, #0]
     8f0:	68fa      	ldr	r2, [r7, #12]
     8f2:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     8f4:	7dfb      	ldrb	r3, [r7, #23]
     8f6:	2b00      	cmp	r3, #0
     8f8:	d002      	beq.n	900 <decstr_to_int+0x7e>
     8fa:	693b      	ldr	r3, [r7, #16]
     8fc:	425b      	negs	r3, r3
     8fe:	e000      	b.n	902 <decstr_to_int+0x80>
     900:	693b      	ldr	r3, [r7, #16]
}
     902:	4618      	mov	r0, r3
     904:	371c      	adds	r7, #28
     906:	46bd      	mov	sp, r7
     908:	f85d 7b04 	ldr.w	r7, [sp], #4
     90c:	4770      	bx	lr

0000090e <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     90e:	b590      	push	{r4, r7, lr}
     910:	b091      	sub	sp, #68	; 0x44
     912:	af00      	add	r7, sp, #0
     914:	e9c7 0102 	strd	r0, r1, [r7, #8]
     918:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     91a:	2300      	movs	r3, #0
     91c:	63fb      	str	r3, [r7, #60]	; 0x3c
     91e:	2300      	movs	r3, #0
     920:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     922:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     926:	f7ff fe6b 	bl	600 <divu64_10>
     92a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     92e:	68b9      	ldr	r1, [r7, #8]
     930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     932:	4613      	mov	r3, r2
     934:	009b      	lsls	r3, r3, #2
     936:	4413      	add	r3, r2
     938:	005b      	lsls	r3, r3, #1
     93a:	1acb      	subs	r3, r1, r3
     93c:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     93e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     940:	1c5a      	adds	r2, r3, #1
     942:	63fa      	str	r2, [r7, #60]	; 0x3c
     944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     946:	b2d2      	uxtb	r2, r2
     948:	3230      	adds	r2, #48	; 0x30
     94a:	b2d2      	uxtb	r2, r2
     94c:	f107 0140 	add.w	r1, r7, #64	; 0x40
     950:	440b      	add	r3, r1
     952:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     956:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     95a:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     95e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     962:	4323      	orrs	r3, r4
     964:	d1dd      	bne.n	922 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     968:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     96a:	687b      	ldr	r3, [r7, #4]
     96c:	2b00      	cmp	r3, #0
     96e:	d011      	beq.n	994 <uint64_to_str+0x86>
    {
        while ( ix-- )
     970:	e008      	b.n	984 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     972:	687b      	ldr	r3, [r7, #4]
     974:	1c5a      	adds	r2, r3, #1
     976:	607a      	str	r2, [r7, #4]
     978:	f107 0110 	add.w	r1, r7, #16
     97c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     97e:	440a      	add	r2, r1
     980:	7812      	ldrb	r2, [r2, #0]
     982:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
     984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     986:	1e5a      	subs	r2, r3, #1
     988:	63fa      	str	r2, [r7, #60]	; 0x3c
     98a:	2b00      	cmp	r3, #0
     98c:	d1f1      	bne.n	972 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     98e:	687b      	ldr	r3, [r7, #4]
     990:	2200      	movs	r2, #0
     992:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     996:	4618      	mov	r0, r3
     998:	3744      	adds	r7, #68	; 0x44
     99a:	46bd      	mov	sp, r7
     99c:	bd90      	pop	{r4, r7, pc}

0000099e <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     99e:	b4b0      	push	{r4, r5, r7}
     9a0:	b08d      	sub	sp, #52	; 0x34
     9a2:	af00      	add	r7, sp, #0
     9a4:	e9c7 0102 	strd	r0, r1, [r7, #8]
     9a8:	607a      	str	r2, [r7, #4]
     9aa:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     9ac:	2300      	movs	r3, #0
     9ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     9b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     9b4:	4313      	orrs	r3, r2
     9b6:	d131      	bne.n	a1c <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     9ba:	1c5a      	adds	r2, r3, #1
     9bc:	62fa      	str	r2, [r7, #44]	; 0x2c
     9be:	f107 0230 	add.w	r2, r7, #48	; 0x30
     9c2:	4413      	add	r3, r2
     9c4:	2230      	movs	r2, #48	; 0x30
     9c6:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     9ca:	e027      	b.n	a1c <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     9cc:	7a3b      	ldrb	r3, [r7, #8]
     9ce:	f003 030f 	and.w	r3, r3, #15
     9d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     9d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     9da:	2b09      	cmp	r3, #9
     9dc:	d90a      	bls.n	9f4 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     9de:	78fb      	ldrb	r3, [r7, #3]
     9e0:	2b00      	cmp	r3, #0
     9e2:	d001      	beq.n	9e8 <uint64_to_hexstr+0x4a>
     9e4:	2227      	movs	r2, #39	; 0x27
     9e6:	e000      	b.n	9ea <uint64_to_hexstr+0x4c>
     9e8:	2207      	movs	r2, #7
     9ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     9ee:	4413      	add	r3, r2
     9f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     9f6:	1c5a      	adds	r2, r3, #1
     9f8:	62fa      	str	r2, [r7, #44]	; 0x2c
     9fa:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     9fe:	3230      	adds	r2, #48	; 0x30
     a00:	b2d2      	uxtb	r2, r2
     a02:	f107 0130 	add.w	r1, r7, #48	; 0x30
     a06:	440b      	add	r3, r1
     a08:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     a0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     a10:	0914      	lsrs	r4, r2, #4
     a12:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     a16:	091d      	lsrs	r5, r3, #4
     a18:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
     a1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     a20:	4313      	orrs	r3, r2
     a22:	d1d3      	bne.n	9cc <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a26:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     a28:	687b      	ldr	r3, [r7, #4]
     a2a:	2b00      	cmp	r3, #0
     a2c:	d011      	beq.n	a52 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     a2e:	e008      	b.n	a42 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     a30:	687b      	ldr	r3, [r7, #4]
     a32:	1c5a      	adds	r2, r3, #1
     a34:	607a      	str	r2, [r7, #4]
     a36:	f107 0110 	add.w	r1, r7, #16
     a3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     a3c:	440a      	add	r2, r1
     a3e:	7812      	ldrb	r2, [r2, #0]
     a40:	701a      	strb	r2, [r3, #0]
        while (ix--)
     a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a44:	1e5a      	subs	r2, r3, #1
     a46:	62fa      	str	r2, [r7, #44]	; 0x2c
     a48:	2b00      	cmp	r3, #0
     a4a:	d1f1      	bne.n	a30 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     a4c:	687b      	ldr	r3, [r7, #4]
     a4e:	2200      	movs	r2, #0
     a50:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     a54:	4618      	mov	r0, r3
     a56:	3734      	adds	r7, #52	; 0x34
     a58:	46bd      	mov	sp, r7
     a5a:	bcb0      	pop	{r4, r5, r7}
     a5c:	4770      	bx	lr

00000a5e <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     a5e:	b480      	push	{r7}
     a60:	b085      	sub	sp, #20
     a62:	af00      	add	r7, sp, #0
     a64:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     a66:	2300      	movs	r3, #0
     a68:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     a6a:	687b      	ldr	r3, [r7, #4]
     a6c:	2b00      	cmp	r3, #0
     a6e:	d104      	bne.n	a7a <simple_strlen+0x1c>
    {
        return ui32RetVal;
     a70:	68fb      	ldr	r3, [r7, #12]
     a72:	e009      	b.n	a88 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     a74:	68fb      	ldr	r3, [r7, #12]
     a76:	3301      	adds	r3, #1
     a78:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
     a7a:	687b      	ldr	r3, [r7, #4]
     a7c:	1c5a      	adds	r2, r3, #1
     a7e:	607a      	str	r2, [r7, #4]
     a80:	781b      	ldrb	r3, [r3, #0]
     a82:	2b00      	cmp	r3, #0
     a84:	d1f6      	bne.n	a74 <simple_strlen+0x16>
    }
    return ui32RetVal;
     a86:	68fb      	ldr	r3, [r7, #12]
}
     a88:	4618      	mov	r0, r3
     a8a:	3714      	adds	r7, #20
     a8c:	46bd      	mov	sp, r7
     a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
     a92:	4770      	bx	lr

00000a94 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     a94:	b480      	push	{r7}
     a96:	b087      	sub	sp, #28
     a98:	af00      	add	r7, sp, #0
     a9a:	60f8      	str	r0, [r7, #12]
     a9c:	460b      	mov	r3, r1
     a9e:	607a      	str	r2, [r7, #4]
     aa0:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     aa2:	2300      	movs	r3, #0
     aa4:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     aa6:	687b      	ldr	r3, [r7, #4]
     aa8:	2b00      	cmp	r3, #0
     aaa:	dc0c      	bgt.n	ac6 <padbuffer+0x32>
    {
        return i32Cnt;
     aac:	697b      	ldr	r3, [r7, #20]
     aae:	e010      	b.n	ad2 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     ab0:	68fb      	ldr	r3, [r7, #12]
     ab2:	2b00      	cmp	r3, #0
     ab4:	d004      	beq.n	ac0 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     ab6:	68fb      	ldr	r3, [r7, #12]
     ab8:	1c5a      	adds	r2, r3, #1
     aba:	60fa      	str	r2, [r7, #12]
     abc:	7afa      	ldrb	r2, [r7, #11]
     abe:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     ac0:	697b      	ldr	r3, [r7, #20]
     ac2:	3301      	adds	r3, #1
     ac4:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	1e5a      	subs	r2, r3, #1
     aca:	607a      	str	r2, [r7, #4]
     acc:	2b00      	cmp	r3, #0
     ace:	d1ef      	bne.n	ab0 <padbuffer+0x1c>
    }

    return i32Cnt;
     ad0:	697b      	ldr	r3, [r7, #20]
}
     ad2:	4618      	mov	r0, r3
     ad4:	371c      	adds	r7, #28
     ad6:	46bd      	mov	sp, r7
     ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
     adc:	4770      	bx	lr
	...

00000ae0 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     ae0:	b590      	push	{r4, r7, lr}
     ae2:	b08f      	sub	sp, #60	; 0x3c
     ae4:	af00      	add	r7, sp, #0
     ae6:	60f8      	str	r0, [r7, #12]
     ae8:	60b9      	str	r1, [r7, #8]
     aea:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
     aec:	68bb      	ldr	r3, [r7, #8]
     aee:	681b      	ldr	r3, [r3, #0]
     af0:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
     af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     af4:	2b03      	cmp	r3, #3
     af6:	dc02      	bgt.n	afe <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     af8:	f06f 0302 	mvn.w	r3, #2
     afc:	e0e7      	b.n	cce <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
     afe:	edd7 7a03 	vldr	s15, [r7, #12]
     b02:	eef5 7a40 	vcmp.f32	s15, #0.0
     b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     b0a:	d104      	bne.n	b16 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     b0c:	68bb      	ldr	r3, [r7, #8]
     b0e:	4a72      	ldr	r2, [pc, #456]	; (cd8 <ftoa+0x1f8>)
     b10:	601a      	str	r2, [r3, #0]
        return 3;
     b12:	2303      	movs	r3, #3
     b14:	e0db      	b.n	cce <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
     b16:	68bb      	ldr	r3, [r7, #8]
     b18:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
     b1a:	68fb      	ldr	r3, [r7, #12]
     b1c:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     b1e:	693b      	ldr	r3, [r7, #16]
     b20:	15db      	asrs	r3, r3, #23
     b22:	b2db      	uxtb	r3, r3
     b24:	3b7f      	subs	r3, #127	; 0x7f
     b26:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     b28:	693b      	ldr	r3, [r7, #16]
     b2a:	f3c3 0316 	ubfx	r3, r3, #0, #23
     b2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     b32:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
     b34:	2300      	movs	r3, #0
     b36:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     b38:	2300      	movs	r3, #0
     b3a:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     b3c:	69fb      	ldr	r3, [r7, #28]
     b3e:	2b1e      	cmp	r3, #30
     b40:	dd02      	ble.n	b48 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     b42:	f06f 0301 	mvn.w	r3, #1
     b46:	e0c2      	b.n	cce <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
     b48:	69fb      	ldr	r3, [r7, #28]
     b4a:	f113 0f17 	cmn.w	r3, #23
     b4e:	da02      	bge.n	b56 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     b50:	f04f 33ff 	mov.w	r3, #4294967295
     b54:	e0bb      	b.n	cce <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
     b56:	69fb      	ldr	r3, [r7, #28]
     b58:	2b16      	cmp	r3, #22
     b5a:	dd06      	ble.n	b6a <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
     b5c:	69fb      	ldr	r3, [r7, #28]
     b5e:	3b17      	subs	r3, #23
     b60:	69ba      	ldr	r2, [r7, #24]
     b62:	fa02 f303 	lsl.w	r3, r2, r3
     b66:	637b      	str	r3, [r7, #52]	; 0x34
     b68:	e01a      	b.n	ba0 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     b6a:	69fb      	ldr	r3, [r7, #28]
     b6c:	2b00      	cmp	r3, #0
     b6e:	db0f      	blt.n	b90 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
     b70:	69fb      	ldr	r3, [r7, #28]
     b72:	f1c3 0317 	rsb	r3, r3, #23
     b76:	69ba      	ldr	r2, [r7, #24]
     b78:	fa42 f303 	asr.w	r3, r2, r3
     b7c:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
     b7e:	69fb      	ldr	r3, [r7, #28]
     b80:	3301      	adds	r3, #1
     b82:	69ba      	ldr	r2, [r7, #24]
     b84:	fa02 f303 	lsl.w	r3, r2, r3
     b88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     b8c:	633b      	str	r3, [r7, #48]	; 0x30
     b8e:	e007      	b.n	ba0 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
     b90:	69bb      	ldr	r3, [r7, #24]
     b92:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     b96:	69fb      	ldr	r3, [r7, #28]
     b98:	43db      	mvns	r3, r3
     b9a:	fa42 f303 	asr.w	r3, r2, r3
     b9e:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     ba0:	693b      	ldr	r3, [r7, #16]
     ba2:	2b00      	cmp	r3, #0
     ba4:	da04      	bge.n	bb0 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     ba6:	68bb      	ldr	r3, [r7, #8]
     ba8:	1c5a      	adds	r2, r3, #1
     baa:	60ba      	str	r2, [r7, #8]
     bac:	222d      	movs	r2, #45	; 0x2d
     bae:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bb2:	2b00      	cmp	r3, #0
     bb4:	d105      	bne.n	bc2 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     bb6:	68bb      	ldr	r3, [r7, #8]
     bb8:	1c5a      	adds	r2, r3, #1
     bba:	60ba      	str	r2, [r7, #8]
     bbc:	2230      	movs	r2, #48	; 0x30
     bbe:	701a      	strb	r2, [r3, #0]
     bc0:	e021      	b.n	c06 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bc4:	2b00      	cmp	r3, #0
     bc6:	dd08      	ble.n	bda <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bca:	ea4f 74e3 	mov.w	r4, r3, asr #31
     bce:	68ba      	ldr	r2, [r7, #8]
     bd0:	4618      	mov	r0, r3
     bd2:	4621      	mov	r1, r4
     bd4:	f7ff fe9b 	bl	90e <uint64_to_str>
     bd8:	e011      	b.n	bfe <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     bda:	68bb      	ldr	r3, [r7, #8]
     bdc:	1c5a      	adds	r2, r3, #1
     bde:	60ba      	str	r2, [r7, #8]
     be0:	222d      	movs	r2, #45	; 0x2d
     be2:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     be6:	425b      	negs	r3, r3
     be8:	ea4f 74e3 	mov.w	r4, r3, asr #31
     bec:	68ba      	ldr	r2, [r7, #8]
     bee:	4618      	mov	r0, r3
     bf0:	4621      	mov	r1, r4
     bf2:	f7ff fe8c 	bl	90e <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     bf6:	e002      	b.n	bfe <ftoa+0x11e>
        {
            pcBuf++;
     bf8:	68bb      	ldr	r3, [r7, #8]
     bfa:	3301      	adds	r3, #1
     bfc:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
     bfe:	68bb      	ldr	r3, [r7, #8]
     c00:	781b      	ldrb	r3, [r3, #0]
     c02:	2b00      	cmp	r3, #0
     c04:	d1f8      	bne.n	bf8 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     c06:	68bb      	ldr	r3, [r7, #8]
     c08:	1c5a      	adds	r2, r3, #1
     c0a:	60ba      	str	r2, [r7, #8]
     c0c:	222e      	movs	r2, #46	; 0x2e
     c0e:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     c12:	2b00      	cmp	r3, #0
     c14:	d105      	bne.n	c22 <ftoa+0x142>
    {
        *pcBuf++ = '0';
     c16:	68bb      	ldr	r3, [r7, #8]
     c18:	1c5a      	adds	r2, r3, #1
     c1a:	60ba      	str	r2, [r7, #8]
     c1c:	2230      	movs	r2, #48	; 0x30
     c1e:	701a      	strb	r2, [r3, #0]
     c20:	e04f      	b.n	cc2 <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     c22:	68ba      	ldr	r2, [r7, #8]
     c24:	6a3b      	ldr	r3, [r7, #32]
     c26:	1ad3      	subs	r3, r2, r3
     c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     c2a:	1ad3      	subs	r3, r2, r3
     c2c:	3b01      	subs	r3, #1
     c2e:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     c30:	697a      	ldr	r2, [r7, #20]
     c32:	687b      	ldr	r3, [r7, #4]
     c34:	4293      	cmp	r3, r2
     c36:	bfa8      	it	ge
     c38:	4613      	movge	r3, r2
     c3a:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
     c3c:	2300      	movs	r3, #0
     c3e:	62bb      	str	r3, [r7, #40]	; 0x28
     c40:	e015      	b.n	c6e <ftoa+0x18e>
        {
            i32FracPart *= 10;
     c42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     c44:	4613      	mov	r3, r2
     c46:	009b      	lsls	r3, r3, #2
     c48:	4413      	add	r3, r2
     c4a:	005b      	lsls	r3, r3, #1
     c4c:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     c4e:	68bb      	ldr	r3, [r7, #8]
     c50:	1c5a      	adds	r2, r3, #1
     c52:	60ba      	str	r2, [r7, #8]
     c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     c56:	1612      	asrs	r2, r2, #24
     c58:	b2d2      	uxtb	r2, r2
     c5a:	3230      	adds	r2, #48	; 0x30
     c5c:	b2d2      	uxtb	r2, r2
     c5e:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     c62:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     c66:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
     c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
     c6a:	3301      	adds	r3, #1
     c6c:	62bb      	str	r3, [r7, #40]	; 0x28
     c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
     c70:	697b      	ldr	r3, [r7, #20]
     c72:	429a      	cmp	r2, r3
     c74:	dbe5      	blt.n	c42 <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
     c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     c78:	4613      	mov	r3, r2
     c7a:	009b      	lsls	r3, r3, #2
     c7c:	4413      	add	r3, r2
     c7e:	005b      	lsls	r3, r3, #1
     c80:	161b      	asrs	r3, r3, #24
     c82:	2b04      	cmp	r3, #4
     c84:	dd1d      	ble.n	cc2 <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
     c86:	68bb      	ldr	r3, [r7, #8]
     c88:	3b01      	subs	r3, #1
     c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     c8c:	e015      	b.n	cba <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
     c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c90:	781b      	ldrb	r3, [r3, #0]
     c92:	2b2e      	cmp	r3, #46	; 0x2e
     c94:	d00e      	beq.n	cb4 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
     c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c98:	781b      	ldrb	r3, [r3, #0]
     c9a:	2b39      	cmp	r3, #57	; 0x39
     c9c:	d103      	bne.n	ca6 <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
     c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ca0:	2230      	movs	r2, #48	; 0x30
     ca2:	701a      	strb	r2, [r3, #0]
     ca4:	e006      	b.n	cb4 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
     ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ca8:	781b      	ldrb	r3, [r3, #0]
     caa:	3301      	adds	r3, #1
     cac:	b2da      	uxtb	r2, r3
     cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     cb0:	701a      	strb	r2, [r3, #0]
                    break;
     cb2:	e006      	b.n	cc2 <ftoa+0x1e2>
                }
                pcBuftmp--;
     cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     cb6:	3b01      	subs	r3, #1
     cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     cba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     cbc:	6a3b      	ldr	r3, [r7, #32]
     cbe:	429a      	cmp	r2, r3
     cc0:	d2e5      	bcs.n	c8e <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     cc2:	68bb      	ldr	r3, [r7, #8]
     cc4:	2200      	movs	r2, #0
     cc6:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     cc8:	68ba      	ldr	r2, [r7, #8]
     cca:	6a3b      	ldr	r3, [r7, #32]
     ccc:	1ad3      	subs	r3, r2, r3
} // ftoa()
     cce:	4618      	mov	r0, r3
     cd0:	373c      	adds	r7, #60	; 0x3c
     cd2:	46bd      	mov	sp, r7
     cd4:	bd90      	pop	{r4, r7, pc}
     cd6:	bf00      	nop
     cd8:	00302e30 	.word	0x00302e30

00000cdc <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     cdc:	b590      	push	{r4, r7, lr}
     cde:	b095      	sub	sp, #84	; 0x54
     ce0:	af00      	add	r7, sp, #0
     ce2:	60f8      	str	r0, [r7, #12]
     ce4:	60b9      	str	r1, [r7, #8]
     ce6:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     ce8:	2300      	movs	r3, #0
     cea:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     cec:	2300      	movs	r3, #0
     cee:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     cf0:	e2e3      	b.n	12ba <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     cf2:	2306      	movs	r3, #6
     cf4:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     cf6:	68bb      	ldr	r3, [r7, #8]
     cf8:	781b      	ldrb	r3, [r3, #0]
     cfa:	2b25      	cmp	r3, #37	; 0x25
     cfc:	d01f      	beq.n	d3e <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     cfe:	68fb      	ldr	r3, [r7, #12]
     d00:	2b00      	cmp	r3, #0
     d02:	d015      	beq.n	d30 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     d04:	68bb      	ldr	r3, [r7, #8]
     d06:	781b      	ldrb	r3, [r3, #0]
     d08:	2b0a      	cmp	r3, #10
     d0a:	d10b      	bne.n	d24 <am_util_stdio_vsprintf+0x48>
     d0c:	4bb1      	ldr	r3, [pc, #708]	; (fd4 <am_util_stdio_vsprintf+0x2f8>)
     d0e:	781b      	ldrb	r3, [r3, #0]
     d10:	2b00      	cmp	r3, #0
     d12:	d007      	beq.n	d24 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     d14:	68fb      	ldr	r3, [r7, #12]
     d16:	1c5a      	adds	r2, r3, #1
     d18:	60fa      	str	r2, [r7, #12]
     d1a:	220d      	movs	r2, #13
     d1c:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d20:	3301      	adds	r3, #1
     d22:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     d24:	68fb      	ldr	r3, [r7, #12]
     d26:	1c5a      	adds	r2, r3, #1
     d28:	60fa      	str	r2, [r7, #12]
     d2a:	68ba      	ldr	r2, [r7, #8]
     d2c:	7812      	ldrb	r2, [r2, #0]
     d2e:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     d30:	68bb      	ldr	r3, [r7, #8]
     d32:	3301      	adds	r3, #1
     d34:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d38:	3301      	adds	r3, #1
     d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     d3c:	e2bd      	b.n	12ba <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     d3e:	68bb      	ldr	r3, [r7, #8]
     d40:	3301      	adds	r3, #1
     d42:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     d44:	2300      	movs	r3, #0
     d46:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     d4a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     d4e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     d52:	2320      	movs	r3, #32
     d54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     d58:	68bb      	ldr	r3, [r7, #8]
     d5a:	781b      	ldrb	r3, [r3, #0]
     d5c:	2b30      	cmp	r3, #48	; 0x30
     d5e:	d105      	bne.n	d6c <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     d60:	2330      	movs	r3, #48	; 0x30
     d62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     d66:	68bb      	ldr	r3, [r7, #8]
     d68:	3301      	adds	r3, #1
     d6a:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     d6c:	f107 0310 	add.w	r3, r7, #16
     d70:	4619      	mov	r1, r3
     d72:	68b8      	ldr	r0, [r7, #8]
     d74:	f7ff fd85 	bl	882 <decstr_to_int>
     d78:	4603      	mov	r3, r0
     d7a:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     d7c:	693b      	ldr	r3, [r7, #16]
     d7e:	68ba      	ldr	r2, [r7, #8]
     d80:	4413      	add	r3, r2
     d82:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     d84:	68bb      	ldr	r3, [r7, #8]
     d86:	781b      	ldrb	r3, [r3, #0]
     d88:	2b73      	cmp	r3, #115	; 0x73
     d8a:	d005      	beq.n	d98 <am_util_stdio_vsprintf+0xbc>
     d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d8e:	2b00      	cmp	r3, #0
     d90:	da02      	bge.n	d98 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d94:	425b      	negs	r3, r3
     d96:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     d98:	68bb      	ldr	r3, [r7, #8]
     d9a:	781b      	ldrb	r3, [r3, #0]
     d9c:	2b2e      	cmp	r3, #46	; 0x2e
     d9e:	d10e      	bne.n	dbe <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     da0:	68bb      	ldr	r3, [r7, #8]
     da2:	3301      	adds	r3, #1
     da4:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     da6:	f107 0310 	add.w	r3, r7, #16
     daa:	4619      	mov	r1, r3
     dac:	68b8      	ldr	r0, [r7, #8]
     dae:	f7ff fd68 	bl	882 <decstr_to_int>
     db2:	4603      	mov	r3, r0
     db4:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     db6:	693b      	ldr	r3, [r7, #16]
     db8:	68ba      	ldr	r2, [r7, #8]
     dba:	4413      	add	r3, r2
     dbc:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     dbe:	68bb      	ldr	r3, [r7, #8]
     dc0:	781b      	ldrb	r3, [r3, #0]
     dc2:	2b6c      	cmp	r3, #108	; 0x6c
     dc4:	d10c      	bne.n	de0 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     dc6:	68bb      	ldr	r3, [r7, #8]
     dc8:	3301      	adds	r3, #1
     dca:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     dcc:	68bb      	ldr	r3, [r7, #8]
     dce:	781b      	ldrb	r3, [r3, #0]
     dd0:	2b6c      	cmp	r3, #108	; 0x6c
     dd2:	d105      	bne.n	de0 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     dd4:	68bb      	ldr	r3, [r7, #8]
     dd6:	3301      	adds	r3, #1
     dd8:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     dda:	2301      	movs	r3, #1
     ddc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     de0:	68bb      	ldr	r3, [r7, #8]
     de2:	781b      	ldrb	r3, [r3, #0]
     de4:	3b46      	subs	r3, #70	; 0x46
     de6:	2b32      	cmp	r3, #50	; 0x32
     de8:	f200 8254 	bhi.w	1294 <am_util_stdio_vsprintf+0x5b8>
     dec:	a201      	add	r2, pc, #4	; (adr r2, df4 <am_util_stdio_vsprintf+0x118>)
     dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     df2:	bf00      	nop
     df4:	0000121f 	.word	0x0000121f
     df8:	00001295 	.word	0x00001295
     dfc:	00001295 	.word	0x00001295
     e00:	00001295 	.word	0x00001295
     e04:	00001295 	.word	0x00001295
     e08:	00001295 	.word	0x00001295
     e0c:	00001295 	.word	0x00001295
     e10:	00001295 	.word	0x00001295
     e14:	00001295 	.word	0x00001295
     e18:	00001295 	.word	0x00001295
     e1c:	00001295 	.word	0x00001295
     e20:	00001295 	.word	0x00001295
     e24:	00001295 	.word	0x00001295
     e28:	00001295 	.word	0x00001295
     e2c:	00001295 	.word	0x00001295
     e30:	00001295 	.word	0x00001295
     e34:	00001295 	.word	0x00001295
     e38:	00001295 	.word	0x00001295
     e3c:	00000fbb 	.word	0x00000fbb
     e40:	00001295 	.word	0x00001295
     e44:	00001295 	.word	0x00001295
     e48:	00001295 	.word	0x00001295
     e4c:	00001295 	.word	0x00001295
     e50:	00001295 	.word	0x00001295
     e54:	00001295 	.word	0x00001295
     e58:	00001295 	.word	0x00001295
     e5c:	00001295 	.word	0x00001295
     e60:	00001295 	.word	0x00001295
     e64:	00001295 	.word	0x00001295
     e68:	00000ec1 	.word	0x00000ec1
     e6c:	000010e7 	.word	0x000010e7
     e70:	00001295 	.word	0x00001295
     e74:	0000121f 	.word	0x0000121f
     e78:	00001295 	.word	0x00001295
     e7c:	00001295 	.word	0x00001295
     e80:	000010e7 	.word	0x000010e7
     e84:	00001295 	.word	0x00001295
     e88:	00001295 	.word	0x00001295
     e8c:	00001295 	.word	0x00001295
     e90:	00001295 	.word	0x00001295
     e94:	00001295 	.word	0x00001295
     e98:	00001295 	.word	0x00001295
     e9c:	00001295 	.word	0x00001295
     ea0:	00001295 	.word	0x00001295
     ea4:	00001295 	.word	0x00001295
     ea8:	00000ee7 	.word	0x00000ee7
     eac:	00001295 	.word	0x00001295
     eb0:	00001055 	.word	0x00001055
     eb4:	00001295 	.word	0x00001295
     eb8:	00001295 	.word	0x00001295
     ebc:	00000fb5 	.word	0x00000fb5
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
     ec0:	687b      	ldr	r3, [r7, #4]
     ec2:	1d1a      	adds	r2, r3, #4
     ec4:	607a      	str	r2, [r7, #4]
     ec6:	681b      	ldr	r3, [r3, #0]
     ec8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
     ecc:	68fb      	ldr	r3, [r7, #12]
     ece:	2b00      	cmp	r3, #0
     ed0:	d005      	beq.n	ede <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
     ed2:	68fb      	ldr	r3, [r7, #12]
     ed4:	1c5a      	adds	r2, r3, #1
     ed6:	60fa      	str	r2, [r7, #12]
     ed8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
     edc:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
     ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ee0:	3301      	adds	r3, #1
     ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     ee4:	e1e6      	b.n	12b4 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
     ee6:	687b      	ldr	r3, [r7, #4]
     ee8:	1d1a      	adds	r2, r3, #4
     eea:	607a      	str	r2, [r7, #4]
     eec:	681b      	ldr	r3, [r3, #0]
     eee:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
     ef0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
     ef2:	f7ff fdb4 	bl	a5e <simple_strlen>
     ef6:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
     ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     efa:	2b00      	cmp	r3, #0
     efc:	dd2e      	ble.n	f5c <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
     efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     f02:	429a      	cmp	r2, r3
     f04:	d22a      	bcs.n	f5c <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     f06:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f0a:	1ad3      	subs	r3, r2, r3
     f0c:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     f0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     f12:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f14:	4619      	mov	r1, r3
     f16:	68f8      	ldr	r0, [r7, #12]
     f18:	f7ff fdbc 	bl	a94 <padbuffer>
     f1c:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     f1e:	68fb      	ldr	r3, [r7, #12]
     f20:	2b00      	cmp	r3, #0
     f22:	d001      	beq.n	f28 <am_util_stdio_vsprintf+0x24c>
     f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f26:	e000      	b.n	f2a <am_util_stdio_vsprintf+0x24e>
     f28:	2300      	movs	r3, #0
     f2a:	68fa      	ldr	r2, [r7, #12]
     f2c:	4413      	add	r3, r2
     f2e:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f34:	4413      	add	r3, r2
     f36:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     f38:	2300      	movs	r3, #0
     f3a:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
     f3c:	e00e      	b.n	f5c <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
     f3e:	68fb      	ldr	r3, [r7, #12]
     f40:	2b00      	cmp	r3, #0
     f42:	d005      	beq.n	f50 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
     f44:	68fb      	ldr	r3, [r7, #12]
     f46:	1c5a      	adds	r2, r3, #1
     f48:	60fa      	str	r2, [r7, #12]
     f4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     f4c:	7812      	ldrb	r2, [r2, #0]
     f4e:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
     f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f52:	3301      	adds	r3, #1
     f54:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
     f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f58:	3301      	adds	r3, #1
     f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
     f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f5e:	781b      	ldrb	r3, [r3, #0]
     f60:	2b00      	cmp	r3, #0
     f62:	d1ec      	bne.n	f3e <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
     f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f66:	2b00      	cmp	r3, #0
     f68:	f000 81a1 	beq.w	12ae <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
     f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f6e:	425b      	negs	r3, r3
     f70:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
     f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     f76:	429a      	cmp	r2, r3
     f78:	f080 8199 	bcs.w	12ae <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     f7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f80:	1ad3      	subs	r3, r2, r3
     f82:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     f84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     f88:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f8a:	4619      	mov	r1, r3
     f8c:	68f8      	ldr	r0, [r7, #12]
     f8e:	f7ff fd81 	bl	a94 <padbuffer>
     f92:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     f94:	68fb      	ldr	r3, [r7, #12]
     f96:	2b00      	cmp	r3, #0
     f98:	d001      	beq.n	f9e <am_util_stdio_vsprintf+0x2c2>
     f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f9c:	e000      	b.n	fa0 <am_util_stdio_vsprintf+0x2c4>
     f9e:	2300      	movs	r3, #0
     fa0:	68fa      	ldr	r2, [r7, #12]
     fa2:	4413      	add	r3, r2
     fa4:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     faa:	4413      	add	r3, r2
     fac:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     fae:	2300      	movs	r3, #0
     fb0:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
     fb2:	e17c      	b.n	12ae <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
     fb4:	2301      	movs	r3, #1
     fb6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     fba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     fbe:	2b00      	cmp	r3, #0
     fc0:	d00a      	beq.n	fd8 <am_util_stdio_vsprintf+0x2fc>
     fc2:	687b      	ldr	r3, [r7, #4]
     fc4:	3307      	adds	r3, #7
     fc6:	f023 0307 	bic.w	r3, r3, #7
     fca:	f103 0208 	add.w	r2, r3, #8
     fce:	607a      	str	r2, [r7, #4]
     fd0:	cb18      	ldmia	r3, {r3, r4}
     fd2:	e007      	b.n	fe4 <am_util_stdio_vsprintf+0x308>
     fd4:	10001144 	.word	0x10001144
                                      va_arg(pArgs, uint32_t);
     fd8:	687b      	ldr	r3, [r7, #4]
     fda:	1d1a      	adds	r2, r3, #4
     fdc:	607a      	str	r2, [r7, #4]
     fde:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     fe0:	f04f 0400 	mov.w	r4, #0
     fe4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
     fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fea:	2b00      	cmp	r3, #0
     fec:	d01e      	beq.n	102c <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
     fee:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     ff2:	f7ff fc22 	bl	83a <ndigits_in_hex>
     ff6:	4602      	mov	r2, r0
     ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ffa:	1a9b      	subs	r3, r3, r2
     ffc:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     ffe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1002:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1004:	4619      	mov	r1, r3
    1006:	68f8      	ldr	r0, [r7, #12]
    1008:	f7ff fd44 	bl	a94 <padbuffer>
    100c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    100e:	68fb      	ldr	r3, [r7, #12]
    1010:	2b00      	cmp	r3, #0
    1012:	d001      	beq.n	1018 <am_util_stdio_vsprintf+0x33c>
    1014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1016:	e000      	b.n	101a <am_util_stdio_vsprintf+0x33e>
    1018:	2300      	movs	r3, #0
    101a:	68fa      	ldr	r2, [r7, #12]
    101c:	4413      	add	r3, r2
    101e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1022:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1024:	4413      	add	r3, r2
    1026:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1028:	2300      	movs	r3, #0
    102a:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    102c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    1030:	68fa      	ldr	r2, [r7, #12]
    1032:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1036:	f7ff fcb2 	bl	99e <uint64_to_hexstr>
    103a:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    103c:	68fb      	ldr	r3, [r7, #12]
    103e:	2b00      	cmp	r3, #0
    1040:	d003      	beq.n	104a <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    1042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1044:	68fa      	ldr	r2, [r7, #12]
    1046:	4413      	add	r3, r2
    1048:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    104a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    104c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    104e:	4413      	add	r3, r2
    1050:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1052:	e12f      	b.n	12b4 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1054:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1058:	2b00      	cmp	r3, #0
    105a:	d008      	beq.n	106e <am_util_stdio_vsprintf+0x392>
    105c:	687b      	ldr	r3, [r7, #4]
    105e:	3307      	adds	r3, #7
    1060:	f023 0307 	bic.w	r3, r3, #7
    1064:	f103 0208 	add.w	r2, r3, #8
    1068:	607a      	str	r2, [r7, #4]
    106a:	cb18      	ldmia	r3, {r3, r4}
    106c:	e005      	b.n	107a <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    106e:	687b      	ldr	r3, [r7, #4]
    1070:	1d1a      	adds	r2, r3, #4
    1072:	607a      	str	r2, [r7, #4]
    1074:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1076:	f04f 0400 	mov.w	r4, #0
    107a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    107e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1080:	2b00      	cmp	r3, #0
    1082:	d01e      	beq.n	10c2 <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    1084:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1088:	f7ff fb99 	bl	7be <ndigits_in_u64>
    108c:	4602      	mov	r2, r0
    108e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1090:	1a9b      	subs	r3, r3, r2
    1092:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1094:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1098:	6bba      	ldr	r2, [r7, #56]	; 0x38
    109a:	4619      	mov	r1, r3
    109c:	68f8      	ldr	r0, [r7, #12]
    109e:	f7ff fcf9 	bl	a94 <padbuffer>
    10a2:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    10a4:	68fb      	ldr	r3, [r7, #12]
    10a6:	2b00      	cmp	r3, #0
    10a8:	d001      	beq.n	10ae <am_util_stdio_vsprintf+0x3d2>
    10aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10ac:	e000      	b.n	10b0 <am_util_stdio_vsprintf+0x3d4>
    10ae:	2300      	movs	r3, #0
    10b0:	68fa      	ldr	r2, [r7, #12]
    10b2:	4413      	add	r3, r2
    10b4:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    10b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10ba:	4413      	add	r3, r2
    10bc:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    10be:	2300      	movs	r3, #0
    10c0:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    10c2:	68fa      	ldr	r2, [r7, #12]
    10c4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    10c8:	f7ff fc21 	bl	90e <uint64_to_str>
    10cc:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    10ce:	68fb      	ldr	r3, [r7, #12]
    10d0:	2b00      	cmp	r3, #0
    10d2:	d003      	beq.n	10dc <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    10d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10d6:	68fa      	ldr	r2, [r7, #12]
    10d8:	4413      	add	r3, r2
    10da:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    10dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10e0:	4413      	add	r3, r2
    10e2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    10e4:	e0e6      	b.n	12b4 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    10e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    10ea:	2b00      	cmp	r3, #0
    10ec:	d008      	beq.n	1100 <am_util_stdio_vsprintf+0x424>
    10ee:	687b      	ldr	r3, [r7, #4]
    10f0:	3307      	adds	r3, #7
    10f2:	f023 0307 	bic.w	r3, r3, #7
    10f6:	f103 0208 	add.w	r2, r3, #8
    10fa:	607a      	str	r2, [r7, #4]
    10fc:	cb18      	ldmia	r3, {r3, r4}
    10fe:	e005      	b.n	110c <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    1100:	687b      	ldr	r3, [r7, #4]
    1102:	1d1a      	adds	r2, r3, #4
    1104:	607a      	str	r2, [r7, #4]
    1106:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1108:	ea4f 74e3 	mov.w	r4, r3, asr #31
    110c:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    1110:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1114:	2b00      	cmp	r3, #0
    1116:	f174 0300 	sbcs.w	r3, r4, #0
    111a:	da0a      	bge.n	1132 <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    111c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1120:	425b      	negs	r3, r3
    1122:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    1126:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    112a:	2301      	movs	r3, #1
    112c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    1130:	e006      	b.n	1140 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    1132:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1136:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    113a:	2300      	movs	r3, #0
    113c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    1140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1142:	2b00      	cmp	r3, #0
    1144:	d04a      	beq.n	11dc <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    1146:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    114a:	4618      	mov	r0, r3
    114c:	4621      	mov	r1, r4
    114e:	f7ff fb57 	bl	800 <ndigits_in_i64>
    1152:	4602      	mov	r2, r0
    1154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1156:	1a9b      	subs	r3, r3, r2
    1158:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    115a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    115e:	2b00      	cmp	r3, #0
    1160:	d011      	beq.n	1186 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    1162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1164:	3b01      	subs	r3, #1
    1166:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    1168:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    116c:	2b30      	cmp	r3, #48	; 0x30
    116e:	d10a      	bne.n	1186 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    1170:	68fb      	ldr	r3, [r7, #12]
    1172:	2b00      	cmp	r3, #0
    1174:	d004      	beq.n	1180 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    1176:	68fb      	ldr	r3, [r7, #12]
    1178:	1c5a      	adds	r2, r3, #1
    117a:	60fa      	str	r2, [r7, #12]
    117c:	222d      	movs	r2, #45	; 0x2d
    117e:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    1180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1182:	3301      	adds	r3, #1
    1184:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1186:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    118a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    118c:	4619      	mov	r1, r3
    118e:	68f8      	ldr	r0, [r7, #12]
    1190:	f7ff fc80 	bl	a94 <padbuffer>
    1194:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1196:	68fb      	ldr	r3, [r7, #12]
    1198:	2b00      	cmp	r3, #0
    119a:	d001      	beq.n	11a0 <am_util_stdio_vsprintf+0x4c4>
    119c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    119e:	e000      	b.n	11a2 <am_util_stdio_vsprintf+0x4c6>
    11a0:	2300      	movs	r3, #0
    11a2:	68fa      	ldr	r2, [r7, #12]
    11a4:	4413      	add	r3, r2
    11a6:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    11a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    11ac:	4413      	add	r3, r2
    11ae:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    11b0:	2300      	movs	r3, #0
    11b2:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    11b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    11b8:	2b00      	cmp	r3, #0
    11ba:	d01e      	beq.n	11fa <am_util_stdio_vsprintf+0x51e>
    11bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    11c0:	2b20      	cmp	r3, #32
    11c2:	d11a      	bne.n	11fa <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    11c4:	68fb      	ldr	r3, [r7, #12]
    11c6:	2b00      	cmp	r3, #0
    11c8:	d004      	beq.n	11d4 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    11ca:	68fb      	ldr	r3, [r7, #12]
    11cc:	1c5a      	adds	r2, r3, #1
    11ce:	60fa      	str	r2, [r7, #12]
    11d0:	222d      	movs	r2, #45	; 0x2d
    11d2:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    11d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11d6:	3301      	adds	r3, #1
    11d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    11da:	e00e      	b.n	11fa <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    11dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    11e0:	2b00      	cmp	r3, #0
    11e2:	d00a      	beq.n	11fa <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	2b00      	cmp	r3, #0
    11e8:	d004      	beq.n	11f4 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    11ea:	68fb      	ldr	r3, [r7, #12]
    11ec:	1c5a      	adds	r2, r3, #1
    11ee:	60fa      	str	r2, [r7, #12]
    11f0:	222d      	movs	r2, #45	; 0x2d
    11f2:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    11f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11f6:	3301      	adds	r3, #1
    11f8:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    11fa:	68fa      	ldr	r2, [r7, #12]
    11fc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1200:	f7ff fb85 	bl	90e <uint64_to_str>
    1204:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1206:	68fb      	ldr	r3, [r7, #12]
    1208:	2b00      	cmp	r3, #0
    120a:	d003      	beq.n	1214 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    120c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    120e:	68fa      	ldr	r2, [r7, #12]
    1210:	4413      	add	r3, r2
    1212:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1216:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1218:	4413      	add	r3, r2
    121a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    121c:	e04a      	b.n	12b4 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    121e:	68fb      	ldr	r3, [r7, #12]
    1220:	2b00      	cmp	r3, #0
    1222:	d046      	beq.n	12b2 <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    1224:	687b      	ldr	r3, [r7, #4]
    1226:	3307      	adds	r3, #7
    1228:	f023 0307 	bic.w	r3, r3, #7
    122c:	f103 0208 	add.w	r2, r3, #8
    1230:	607a      	str	r2, [r7, #4]
    1232:	cb18      	ldmia	r3, {r3, r4}
    1234:	4618      	mov	r0, r3
    1236:	4621      	mov	r1, r4
    1238:	f7fe ff42 	bl	c0 <__aeabi_d2f>
    123c:	4603      	mov	r3, r0
    123e:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    1240:	68fb      	ldr	r3, [r7, #12]
    1242:	2214      	movs	r2, #20
    1244:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    1246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1248:	68f9      	ldr	r1, [r7, #12]
    124a:	6978      	ldr	r0, [r7, #20]
    124c:	f7ff fc48 	bl	ae0 <ftoa>
    1250:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    1252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1254:	2b00      	cmp	r3, #0
    1256:	da14      	bge.n	1282 <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    1258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    125a:	f1b3 3fff 	cmp.w	r3, #4294967295
    125e:	d102      	bne.n	1266 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    1260:	4b1e      	ldr	r3, [pc, #120]	; (12dc <am_util_stdio_vsprintf+0x600>)
    1262:	62bb      	str	r3, [r7, #40]	; 0x28
    1264:	e008      	b.n	1278 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    1266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1268:	f113 0f02 	cmn.w	r3, #2
    126c:	d102      	bne.n	1274 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    126e:	4b1c      	ldr	r3, [pc, #112]	; (12e0 <am_util_stdio_vsprintf+0x604>)
    1270:	62bb      	str	r3, [r7, #40]	; 0x28
    1272:	e001      	b.n	1278 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    1274:	4b1b      	ldr	r3, [pc, #108]	; (12e4 <am_util_stdio_vsprintf+0x608>)
    1276:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    127c:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    127e:	2303      	movs	r3, #3
    1280:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    1282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1284:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1286:	4413      	add	r3, r2
    1288:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    128a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    128c:	68fa      	ldr	r2, [r7, #12]
    128e:	4413      	add	r3, r2
    1290:	60fb      	str	r3, [r7, #12]
                }
                break;
    1292:	e00e      	b.n	12b2 <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    1294:	68fb      	ldr	r3, [r7, #12]
    1296:	2b00      	cmp	r3, #0
    1298:	d005      	beq.n	12a6 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    129a:	68fb      	ldr	r3, [r7, #12]
    129c:	1c5a      	adds	r2, r3, #1
    129e:	60fa      	str	r2, [r7, #12]
    12a0:	68ba      	ldr	r2, [r7, #8]
    12a2:	7812      	ldrb	r2, [r2, #0]
    12a4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    12a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    12a8:	3301      	adds	r3, #1
    12aa:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    12ac:	e002      	b.n	12b4 <am_util_stdio_vsprintf+0x5d8>
                break;
    12ae:	bf00      	nop
    12b0:	e000      	b.n	12b4 <am_util_stdio_vsprintf+0x5d8>
                break;
    12b2:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    12b4:	68bb      	ldr	r3, [r7, #8]
    12b6:	3301      	adds	r3, #1
    12b8:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    12ba:	68bb      	ldr	r3, [r7, #8]
    12bc:	781b      	ldrb	r3, [r3, #0]
    12be:	2b00      	cmp	r3, #0
    12c0:	f47f ad17 	bne.w	cf2 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    12c4:	68fb      	ldr	r3, [r7, #12]
    12c6:	2b00      	cmp	r3, #0
    12c8:	d002      	beq.n	12d0 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    12ca:	68fb      	ldr	r3, [r7, #12]
    12cc:	2200      	movs	r2, #0
    12ce:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    12d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    12d2:	4618      	mov	r0, r3
    12d4:	3754      	adds	r7, #84	; 0x54
    12d6:	46bd      	mov	sp, r7
    12d8:	bd90      	pop	{r4, r7, pc}
    12da:	bf00      	nop
    12dc:	00302e30 	.word	0x00302e30
    12e0:	00232e23 	.word	0x00232e23
    12e4:	003f2e3f 	.word	0x003f2e3f

000012e8 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    12e8:	b40f      	push	{r0, r1, r2, r3}
    12ea:	b580      	push	{r7, lr}
    12ec:	b082      	sub	sp, #8
    12ee:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    12f0:	f107 0314 	add.w	r3, r7, #20
    12f4:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    12f6:	683a      	ldr	r2, [r7, #0]
    12f8:	6939      	ldr	r1, [r7, #16]
    12fa:	4808      	ldr	r0, [pc, #32]	; (131c <am_util_stdio_printf+0x34>)
    12fc:	f7ff fcee 	bl	cdc <am_util_stdio_vsprintf>
    1300:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    1302:	4b07      	ldr	r3, [pc, #28]	; (1320 <am_util_stdio_printf+0x38>)
    1304:	681b      	ldr	r3, [r3, #0]
    1306:	4805      	ldr	r0, [pc, #20]	; (131c <am_util_stdio_printf+0x34>)
    1308:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    130a:	687b      	ldr	r3, [r7, #4]
}
    130c:	4618      	mov	r0, r3
    130e:	3708      	adds	r7, #8
    1310:	46bd      	mov	sp, r7
    1312:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    1316:	b004      	add	sp, #16
    1318:	4770      	bx	lr
    131a:	bf00      	nop
    131c:	10001044 	.word	0x10001044
    1320:	10001528 	.word	0x10001528

00001324 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    1324:	b580      	push	{r7, lr}
    1326:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    1328:	4802      	ldr	r0, [pc, #8]	; (1334 <am_util_stdio_terminal_clear+0x10>)
    132a:	f7ff ffdd 	bl	12e8 <am_util_stdio_printf>
}
    132e:	bf00      	nop
    1330:	bd80      	pop	{r7, pc}
    1332:	bf00      	nop
    1334:	000052d8 	.word	0x000052d8

00001338 <am_bsp_iom_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_iom_enable(uint32_t ui32Module)
{
    1338:	b5f0      	push	{r4, r5, r6, r7, lr}
    133a:	4605      	mov	r5, r0
    am_hal_iom_enable(ui32Module);

    //
    // Check that the MISO pin is defined in BSP and we are in SPI mode.
    //
    if ( (AM_BSP_GPIO_UNDEF != g_SPIpins[ui32Module][0] ) &&
    133c:	4e2b      	ldr	r6, [pc, #172]	; (13ec <am_bsp_iom_enable+0xb4>)
{
    133e:	b083      	sub	sp, #12
    am_hal_iom_enable(ui32Module);
    1340:	f000 ff1c 	bl	217c <am_hal_iom_enable>
    if ( (AM_BSP_GPIO_UNDEF != g_SPIpins[ui32Module][0] ) &&
    1344:	f856 4035 	ldr.w	r4, [r6, r5, lsl #3]
    1348:	4b29      	ldr	r3, [pc, #164]	; (13f0 <am_bsp_iom_enable+0xb8>)
    134a:	429c      	cmp	r4, r3
    134c:	d009      	beq.n	1362 <am_bsp_iom_enable+0x2a>
         (1 == AM_BFRn(IOMSTR, ui32Module, CFG, IFCSEL) ) )
    134e:	f505 20a0 	add.w	r0, r5, #327680	; 0x50000
    1352:	3004      	adds	r0, #4
    1354:	0301      	lsls	r1, r0, #12
    1356:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    if ( (AM_BSP_GPIO_UNDEF != g_SPIpins[ui32Module][0] ) &&
    135a:	07d3      	lsls	r3, r2, #31
    135c:	d501      	bpl.n	1362 <am_bsp_iom_enable+0x2a>
    {
        am_hal_gpio_pin_config(g_SPIpins[ui32Module][0],
    135e:	2c31      	cmp	r4, #49	; 0x31
    1360:	d901      	bls.n	1366 <am_bsp_iom_enable+0x2e>
                               g_SPIpins[ui32Module][1]);
    }
}
    1362:	b003      	add	sp, #12
    1364:	bdf0      	pop	{r4, r5, r6, r7, pc}
        am_hal_gpio_pin_config(g_SPIpins[ui32Module][0],
    1366:	f000 fa3b 	bl	17e0 <am_hal_interrupt_master_disable>
    136a:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    136e:	4e21      	ldr	r6, [pc, #132]	; (13f4 <am_bsp_iom_enable+0xbc>)
    1370:	9001      	str	r0, [sp, #4]
    1372:	0865      	lsrs	r5, r4, #1
    1374:	f005 0e7c 	and.w	lr, r5, #124	; 0x7c
    1378:	f8df c080 	ldr.w	ip, [pc, #128]	; 13fc <am_bsp_iom_enable+0xc4>
    137c:	687b      	ldr	r3, [r7, #4]
    137e:	4d1e      	ldr	r5, [pc, #120]	; (13f8 <am_bsp_iom_enable+0xc0>)
    1380:	2073      	movs	r0, #115	; 0x73
    1382:	6030      	str	r0, [r6, #0]
    1384:	00a1      	lsls	r1, r4, #2
    1386:	f85e 700c 	ldr.w	r7, [lr, ip]
    138a:	f001 001c 	and.w	r0, r1, #28
    138e:	2207      	movs	r2, #7
    1390:	4082      	lsls	r2, r0
    1392:	ea27 0102 	bic.w	r1, r7, r2
    1396:	f3c3 2202 	ubfx	r2, r3, #8, #3
    139a:	4082      	lsls	r2, r0
    139c:	f004 00fc 	and.w	r0, r4, #252	; 0xfc
    13a0:	430a      	orrs	r2, r1
    13a2:	f100 4780 	add.w	r7, r0, #1073741824	; 0x40000000
    13a6:	f84e 200c 	str.w	r2, [lr, ip]
    13aa:	00e4      	lsls	r4, r4, #3
    13ac:	f507 3c80 	add.w	ip, r7, #65536	; 0x10000
    13b0:	21ff      	movs	r1, #255	; 0xff
    13b2:	f004 0718 	and.w	r7, r4, #24
    13b6:	f8dc e000 	ldr.w	lr, [ip]
    13ba:	40b9      	lsls	r1, r7
    13bc:	43ca      	mvns	r2, r1
    13be:	b2dc      	uxtb	r4, r3
    13c0:	ea0e 0102 	and.w	r1, lr, r2
    13c4:	40bc      	lsls	r4, r7
    13c6:	430c      	orrs	r4, r1
    13c8:	f8cc 4000 	str.w	r4, [ip]
    13cc:	5941      	ldr	r1, [r0, r5]
    13ce:	f3c3 4307 	ubfx	r3, r3, #16, #8
    13d2:	400a      	ands	r2, r1
    13d4:	fa03 f707 	lsl.w	r7, r3, r7
    13d8:	4317      	orrs	r7, r2
    13da:	2200      	movs	r2, #0
    13dc:	5147      	str	r7, [r0, r5]
    13de:	6032      	str	r2, [r6, #0]
    13e0:	9801      	ldr	r0, [sp, #4]
    13e2:	f000 fa01 	bl	17e8 <am_hal_interrupt_master_set>
}
    13e6:	b003      	add	sp, #12
    13e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13ea:	bf00      	nop
    13ec:	000052ec 	.word	0x000052ec
    13f0:	deadbeef 	.word	0xdeadbeef
    13f4:	40010060 	.word	0x40010060
    13f8:	400100e0 	.word	0x400100e0
    13fc:	40010040 	.word	0x40010040

00001400 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1400:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    1402:	f002 fbf9 	bl	3bf8 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    1406:	f002 fc65 	bl	3cd4 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    140a:	f002 feab 	bl	4164 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    140e:	2001      	movs	r0, #1
    1410:	f002 fd9c 	bl	3f4c <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1414:	2001      	movs	r0, #1
    1416:	f000 f905 	bl	1624 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    141a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    141e:	f002 bda3 	b.w	3f68 <am_hal_rtc_osc_disable>
    1422:	bf00      	nop

00001424 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    1424:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1426:	4b17      	ldr	r3, [pc, #92]	; (1484 <am_bsp_debug_printf_enable+0x60>)
    1428:	681c      	ldr	r4, [r3, #0]
    142a:	f014 0401 	ands.w	r4, r4, #1
{
    142e:	b087      	sub	sp, #28
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1430:	d001      	beq.n	1436 <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    1432:	b007      	add	sp, #28
    1434:	bd30      	pop	{r4, r5, pc}
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1436:	4a14      	ldr	r2, [pc, #80]	; (1488 <am_bsp_debug_printf_enable+0x64>)
    1438:	4914      	ldr	r1, [pc, #80]	; (148c <am_bsp_debug_printf_enable+0x68>)
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    143a:	4d15      	ldr	r5, [pc, #84]	; (1490 <am_bsp_debug_printf_enable+0x6c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    143c:	6011      	str	r1, [r2, #0]
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    143e:	a806      	add	r0, sp, #24
    1440:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    1444:	f002 fe36 	bl	40b4 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    1448:	f000 f9ca 	bl	17e0 <am_hal_interrupt_master_disable>
    144c:	4a11      	ldr	r2, [pc, #68]	; (1494 <am_bsp_debug_printf_enable+0x70>)
    144e:	9000      	str	r0, [sp, #0]
    1450:	4d11      	ldr	r5, [pc, #68]	; (1498 <am_bsp_debug_printf_enable+0x74>)
    1452:	4912      	ldr	r1, [pc, #72]	; (149c <am_bsp_debug_printf_enable+0x78>)
    1454:	2073      	movs	r0, #115	; 0x73
    1456:	6010      	str	r0, [r2, #0]
    1458:	682b      	ldr	r3, [r5, #0]
    145a:	4811      	ldr	r0, [pc, #68]	; (14a0 <am_bsp_debug_printf_enable+0x7c>)
    145c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    1460:	602b      	str	r3, [r5, #0]
    1462:	6805      	ldr	r5, [r0, #0]
    1464:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    1468:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    146c:	6003      	str	r3, [r0, #0]
    146e:	6808      	ldr	r0, [r1, #0]
    1470:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    1474:	600d      	str	r5, [r1, #0]
    1476:	6014      	str	r4, [r2, #0]
    1478:	9800      	ldr	r0, [sp, #0]
    147a:	f000 f9b5 	bl	17e8 <am_hal_interrupt_master_set>
}
    147e:	b007      	add	sp, #28
    1480:	bd30      	pop	{r4, r5, pc}
    1482:	bf00      	nop
    1484:	10001148 	.word	0x10001148
    1488:	e0000e80 	.word	0xe0000e80
    148c:	00150511 	.word	0x00150511
    1490:	000f4240 	.word	0x000f4240
    1494:	40010060 	.word	0x40010060
    1498:	40010054 	.word	0x40010054
    149c:	40010108 	.word	0x40010108
    14a0:	40010028 	.word	0x40010028

000014a4 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    14a4:	f002 ba46 	b.w	3934 <am_hal_itm_print>

000014a8 <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    14a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14aa:	4605      	mov	r5, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    14ac:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    14b0:	78ab      	ldrb	r3, [r5, #2]
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    14b2:	786c      	ldrb	r4, [r5, #1]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    14b4:	78ef      	ldrb	r7, [r5, #3]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    14b6:	792e      	ldrb	r6, [r5, #4]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    14b8:	79a9      	ldrb	r1, [r5, #6]
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    14ba:	009a      	lsls	r2, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    14bc:	0064      	lsls	r4, r4, #1
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    14be:	f002 0204 	and.w	r2, r2, #4
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    14c2:	f004 0402 	and.w	r4, r4, #2
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    14c6:	4314      	orrs	r4, r2
    14c8:	f047 0701 	orr.w	r7, r7, #1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    14cc:	79ea      	ldrb	r2, [r5, #7]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    14ce:	01f6      	lsls	r6, r6, #7
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    14d0:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    14d2:	b2f6      	uxtb	r6, r6
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    14d4:	7a2f      	ldrb	r7, [r5, #8]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    14d6:	0289      	lsls	r1, r1, #10
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    14d8:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    14da:	f401 6180 	and.w	r1, r1, #1024	; 0x400
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    14de:	7a6e      	ldrb	r6, [r5, #9]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    14e0:	02d2      	lsls	r2, r2, #11
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    14e2:	430c      	orrs	r4, r1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    14e4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    14e8:	7aa9      	ldrb	r1, [r5, #10]
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    14ea:	033f      	lsls	r7, r7, #12
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    14ec:	4314      	orrs	r4, r2
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    14ee:	b2bf      	uxth	r7, r7
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    14f0:	0436      	lsls	r6, r6, #16
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    14f2:	7aea      	ldrb	r2, [r5, #11]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    14f4:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    14f6:	0509      	lsls	r1, r1, #20
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    14f8:	f406 2770 	and.w	r7, r6, #983040	; 0xf0000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    14fc:	0612      	lsls	r2, r2, #24
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    14fe:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    1500:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    1504:	009b      	lsls	r3, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    1506:	f002 7780 	and.w	r7, r2, #16777216	; 0x1000000
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    150a:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    150c:	f003 0108 	and.w	r1, r3, #8
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1510:	433c      	orrs	r4, r7
    1512:	430c      	orrs	r4, r1
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1514:	f002 fa6a 	bl	39ec <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1518:	482c      	ldr	r0, [pc, #176]	; (15cc <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    151a:	4b2d      	ldr	r3, [pc, #180]	; (15d0 <am_hal_cachectrl_enable+0x128>)
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    151c:	6004      	str	r4, [r0, #0]
    151e:	2232      	movs	r2, #50	; 0x32
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1520:	681e      	ldr	r6, [r3, #0]
    1522:	0777      	lsls	r7, r6, #29
    1524:	d41e      	bmi.n	1564 <am_hal_cachectrl_enable+0xbc>
    1526:	681f      	ldr	r7, [r3, #0]
    1528:	077e      	lsls	r6, r7, #29
    152a:	f102 32ff 	add.w	r2, r2, #4294967295
    152e:	d419      	bmi.n	1564 <am_hal_cachectrl_enable+0xbc>
    1530:	6819      	ldr	r1, [r3, #0]
    1532:	074f      	lsls	r7, r1, #29
    1534:	d416      	bmi.n	1564 <am_hal_cachectrl_enable+0xbc>
    1536:	6818      	ldr	r0, [r3, #0]
    1538:	0746      	lsls	r6, r0, #29
    153a:	d413      	bmi.n	1564 <am_hal_cachectrl_enable+0xbc>
    153c:	681e      	ldr	r6, [r3, #0]
    153e:	0770      	lsls	r0, r6, #29
    1540:	d410      	bmi.n	1564 <am_hal_cachectrl_enable+0xbc>
    1542:	681f      	ldr	r7, [r3, #0]
    1544:	0779      	lsls	r1, r7, #29
    1546:	d40d      	bmi.n	1564 <am_hal_cachectrl_enable+0xbc>
    1548:	6819      	ldr	r1, [r3, #0]
    154a:	074f      	lsls	r7, r1, #29
    154c:	d40a      	bmi.n	1564 <am_hal_cachectrl_enable+0xbc>
    154e:	6818      	ldr	r0, [r3, #0]
    1550:	0746      	lsls	r6, r0, #29
    1552:	d407      	bmi.n	1564 <am_hal_cachectrl_enable+0xbc>
    1554:	681e      	ldr	r6, [r3, #0]
    1556:	0770      	lsls	r0, r6, #29
    1558:	d404      	bmi.n	1564 <am_hal_cachectrl_enable+0xbc>
    155a:	681f      	ldr	r7, [r3, #0]
    155c:	0779      	lsls	r1, r7, #29
    155e:	d401      	bmi.n	1564 <am_hal_cachectrl_enable+0xbc>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    1560:	3a09      	subs	r2, #9
    1562:	d1dd      	bne.n	1520 <am_hal_cachectrl_enable+0x78>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    1564:	4b1a      	ldr	r3, [pc, #104]	; (15d0 <am_hal_cachectrl_enable+0x128>)
    1566:	681a      	ldr	r2, [r3, #0]
    1568:	f042 0101 	orr.w	r1, r2, #1
    156c:	6019      	str	r1, [r3, #0]
    156e:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1570:	6818      	ldr	r0, [r3, #0]
    1572:	0740      	lsls	r0, r0, #29
    1574:	d41e      	bmi.n	15b4 <am_hal_cachectrl_enable+0x10c>
    1576:	681e      	ldr	r6, [r3, #0]
    1578:	0771      	lsls	r1, r6, #29
    157a:	f102 32ff 	add.w	r2, r2, #4294967295
    157e:	d419      	bmi.n	15b4 <am_hal_cachectrl_enable+0x10c>
    1580:	681f      	ldr	r7, [r3, #0]
    1582:	077f      	lsls	r7, r7, #29
    1584:	d416      	bmi.n	15b4 <am_hal_cachectrl_enable+0x10c>
    1586:	6819      	ldr	r1, [r3, #0]
    1588:	074e      	lsls	r6, r1, #29
    158a:	d413      	bmi.n	15b4 <am_hal_cachectrl_enable+0x10c>
    158c:	6818      	ldr	r0, [r3, #0]
    158e:	0740      	lsls	r0, r0, #29
    1590:	d410      	bmi.n	15b4 <am_hal_cachectrl_enable+0x10c>
    1592:	681e      	ldr	r6, [r3, #0]
    1594:	0771      	lsls	r1, r6, #29
    1596:	d40d      	bmi.n	15b4 <am_hal_cachectrl_enable+0x10c>
    1598:	681f      	ldr	r7, [r3, #0]
    159a:	077f      	lsls	r7, r7, #29
    159c:	d40a      	bmi.n	15b4 <am_hal_cachectrl_enable+0x10c>
    159e:	6819      	ldr	r1, [r3, #0]
    15a0:	074e      	lsls	r6, r1, #29
    15a2:	d407      	bmi.n	15b4 <am_hal_cachectrl_enable+0x10c>
    15a4:	6818      	ldr	r0, [r3, #0]
    15a6:	0740      	lsls	r0, r0, #29
    15a8:	d404      	bmi.n	15b4 <am_hal_cachectrl_enable+0x10c>
    15aa:	681e      	ldr	r6, [r3, #0]
    15ac:	0771      	lsls	r1, r6, #29
    15ae:	d401      	bmi.n	15b4 <am_hal_cachectrl_enable+0x10c>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    15b0:	3a09      	subs	r2, #9
    15b2:	d1dd      	bne.n	1570 <am_hal_cachectrl_enable+0xc8>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    15b4:	796d      	ldrb	r5, [r5, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    15b6:	4f05      	ldr	r7, [pc, #20]	; (15cc <am_hal_cachectrl_enable+0x124>)
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );
    15b8:	022b      	lsls	r3, r5, #8
    15ba:	f403 7100 	and.w	r1, r3, #512	; 0x200
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    15be:	f403 7280 	and.w	r2, r3, #256	; 0x100
    15c2:	4311      	orrs	r1, r2
    15c4:	430c      	orrs	r4, r1
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    15c6:	603c      	str	r4, [r7, #0]
    15c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15ca:	bf00      	nop
    15cc:	40018000 	.word	0x40018000
    15d0:	40018008 	.word	0x40018008

000015d4 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    15d4:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    15d6:	4604      	mov	r4, r0
    15d8:	b120      	cbz	r0, 15e4 <am_hal_clkgen_sysclk_select+0x10>
    15da:	4a06      	ldr	r2, [pc, #24]	; (15f4 <am_hal_clkgen_sysclk_select+0x20>)
    15dc:	4806      	ldr	r0, [pc, #24]	; (15f8 <am_hal_clkgen_sysclk_select+0x24>)
    15de:	2153      	movs	r1, #83	; 0x53
    15e0:	f000 f82a 	bl	1638 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    15e4:	4b05      	ldr	r3, [pc, #20]	; (15fc <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the required operating value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    15e6:	4906      	ldr	r1, [pc, #24]	; (1600 <am_hal_clkgen_sysclk_select+0x2c>)
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    15e8:	2047      	movs	r0, #71	; 0x47

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    15ea:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    15ec:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    15ee:	600c      	str	r4, [r1, #0]
    AM_REG(CLKGEN, CLKKEY) = 0;
    15f0:	601a      	str	r2, [r3, #0]
    15f2:	bd10      	pop	{r4, pc}
    15f4:	00005328 	.word	0x00005328
    15f8:	00005360 	.word	0x00005360
    15fc:	40004014 	.word	0x40004014
    1600:	40004018 	.word	0x40004018

00001604 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1604:	4b04      	ldr	r3, [pc, #16]	; (1618 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    1606:	4905      	ldr	r1, [pc, #20]	; (161c <am_hal_clkgen_sysclk_get+0x18>)
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1608:	681a      	ldr	r2, [r3, #0]
            return 48000000;
    160a:	4805      	ldr	r0, [pc, #20]	; (1620 <am_hal_clkgen_sysclk_get+0x1c>)
    switch ( ui32ClockSetting )
    160c:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    1610:	bf08      	it	eq
    1612:	4608      	moveq	r0, r1
    1614:	4770      	bx	lr
    1616:	bf00      	nop
    1618:	40004018 	.word	0x40004018
    161c:	02dc6c00 	.word	0x02dc6c00
    1620:	016e3600 	.word	0x016e3600

00001624 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1624:	0783      	lsls	r3, r0, #30
    1626:	d003      	beq.n	1630 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    1628:	4b02      	ldr	r3, [pc, #8]	; (1634 <am_hal_clkgen_osc_stop+0x10>)
    162a:	681a      	ldr	r2, [r3, #0]
    162c:	4310      	orrs	r0, r2
    162e:	6018      	str	r0, [r3, #0]
    1630:	4770      	bx	lr
    1632:	bf00      	nop
    1634:	4000400c 	.word	0x4000400c

00001638 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    1638:	e7fe      	b.n	1638 <am_hal_debug_error>
    163a:	bf00      	nop

0000163c <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    163c:	4b00      	ldr	r3, [pc, #0]	; (1640 <am_hal_flash_delay+0x4>)
    163e:	4718      	bx	r3
    1640:	0800009d 	.word	0x0800009d

00001644 <am_hal_flash_delay_status_change>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_change(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                 uint32_t ui32Mask, uint32_t ui32Value)
{
    while ( ui32usMaxDelay-- )
    1644:	2800      	cmp	r0, #0
    1646:	f000 809a 	beq.w	177e <am_hal_flash_delay_status_change+0x13a>
{
    164a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    164e:	1e44      	subs	r4, r0, #1
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1650:	6808      	ldr	r0, [r1, #0]
    1652:	4010      	ands	r0, r2
    1654:	4283      	cmp	r3, r0
    1656:	f000 808c 	beq.w	1772 <am_hal_flash_delay_status_change+0x12e>
    165a:	f014 0907 	ands.w	r9, r4, #7
    165e:	461d      	mov	r5, r3
    1660:	4616      	mov	r6, r2
    1662:	460f      	mov	r7, r1
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1664:	f8df 811c 	ldr.w	r8, [pc, #284]	; 1784 <am_hal_flash_delay_status_change+0x140>
    1668:	d049      	beq.n	16fe <am_hal_flash_delay_status_change+0xba>
    166a:	200c      	movs	r0, #12
    166c:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    166e:	683b      	ldr	r3, [r7, #0]
    1670:	4033      	ands	r3, r6
    1672:	42ab      	cmp	r3, r5
    while ( ui32usMaxDelay-- )
    1674:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1678:	d07b      	beq.n	1772 <am_hal_flash_delay_status_change+0x12e>
    167a:	f1b9 0f01 	cmp.w	r9, #1
    167e:	d03e      	beq.n	16fe <am_hal_flash_delay_status_change+0xba>
    1680:	f1b9 0f02 	cmp.w	r9, #2
    1684:	d033      	beq.n	16ee <am_hal_flash_delay_status_change+0xaa>
    1686:	f1b9 0f03 	cmp.w	r9, #3
    168a:	d028      	beq.n	16de <am_hal_flash_delay_status_change+0x9a>
    168c:	f1b9 0f04 	cmp.w	r9, #4
    1690:	d01d      	beq.n	16ce <am_hal_flash_delay_status_change+0x8a>
    1692:	f1b9 0f05 	cmp.w	r9, #5
    1696:	d012      	beq.n	16be <am_hal_flash_delay_status_change+0x7a>
    1698:	f1b9 0f06 	cmp.w	r9, #6
    169c:	d007      	beq.n	16ae <am_hal_flash_delay_status_change+0x6a>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    169e:	200c      	movs	r0, #12
    16a0:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    16a2:	6839      	ldr	r1, [r7, #0]
    16a4:	4031      	ands	r1, r6
    16a6:	42a9      	cmp	r1, r5
    while ( ui32usMaxDelay-- )
    16a8:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    16ac:	d061      	beq.n	1772 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    16ae:	200c      	movs	r0, #12
    16b0:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    16b2:	683a      	ldr	r2, [r7, #0]
    16b4:	4032      	ands	r2, r6
    16b6:	42aa      	cmp	r2, r5
    while ( ui32usMaxDelay-- )
    16b8:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    16bc:	d059      	beq.n	1772 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    16be:	200c      	movs	r0, #12
    16c0:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    16c2:	6838      	ldr	r0, [r7, #0]
    16c4:	4030      	ands	r0, r6
    16c6:	42a8      	cmp	r0, r5
    while ( ui32usMaxDelay-- )
    16c8:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    16cc:	d051      	beq.n	1772 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    16ce:	200c      	movs	r0, #12
    16d0:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    16d2:	683b      	ldr	r3, [r7, #0]
    16d4:	4033      	ands	r3, r6
    16d6:	42ab      	cmp	r3, r5
    while ( ui32usMaxDelay-- )
    16d8:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    16dc:	d049      	beq.n	1772 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    16de:	200c      	movs	r0, #12
    16e0:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    16e2:	6839      	ldr	r1, [r7, #0]
    16e4:	4031      	ands	r1, r6
    16e6:	42a9      	cmp	r1, r5
    while ( ui32usMaxDelay-- )
    16e8:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    16ec:	d041      	beq.n	1772 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    16ee:	200c      	movs	r0, #12
    16f0:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    16f2:	683a      	ldr	r2, [r7, #0]
    16f4:	4032      	ands	r2, r6
    16f6:	42aa      	cmp	r2, r5
    while ( ui32usMaxDelay-- )
    16f8:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    16fc:	d039      	beq.n	1772 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    16fe:	200c      	movs	r0, #12
    1700:	47c0      	blx	r8
    1702:	200c      	movs	r0, #12
    while ( ui32usMaxDelay-- )
    1704:	2c00      	cmp	r4, #0
    1706:	d037      	beq.n	1778 <am_hal_flash_delay_status_change+0x134>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1708:	683b      	ldr	r3, [r7, #0]
    170a:	4033      	ands	r3, r6
    170c:	42ab      	cmp	r3, r5
    while ( ui32usMaxDelay-- )
    170e:	f1a4 0408 	sub.w	r4, r4, #8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1712:	d02e      	beq.n	1772 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1714:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1716:	6839      	ldr	r1, [r7, #0]
    1718:	4031      	ands	r1, r6
    171a:	42a9      	cmp	r1, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
    171c:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1720:	d027      	beq.n	1772 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1722:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1724:	683a      	ldr	r2, [r7, #0]
    1726:	4032      	ands	r2, r6
    1728:	42aa      	cmp	r2, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
    172a:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    172e:	d020      	beq.n	1772 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1730:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1732:	683b      	ldr	r3, [r7, #0]
    1734:	4033      	ands	r3, r6
    1736:	42ab      	cmp	r3, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1738:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    173c:	d019      	beq.n	1772 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    173e:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1740:	6839      	ldr	r1, [r7, #0]
    1742:	4031      	ands	r1, r6
    1744:	42a9      	cmp	r1, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1746:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    174a:	d012      	beq.n	1772 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    174c:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    174e:	683a      	ldr	r2, [r7, #0]
    1750:	4032      	ands	r2, r6
    1752:	42aa      	cmp	r2, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1754:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1758:	d00b      	beq.n	1772 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    175a:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    175c:	683b      	ldr	r3, [r7, #0]
    175e:	4033      	ands	r3, r6
    1760:	42ab      	cmp	r3, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1762:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1766:	d004      	beq.n	1772 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1768:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    176a:	6838      	ldr	r0, [r7, #0]
    176c:	4030      	ands	r0, r6
    176e:	42a8      	cmp	r0, r5
    1770:	d1c5      	bne.n	16fe <am_hal_flash_delay_status_change+0xba>
        {
            return 1;
    1772:	2001      	movs	r0, #1
    1774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        // Call the BOOTROM cycle function to delay for about 1 microsecond.
        //
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    }

    return 0;
    1778:	2000      	movs	r0, #0
    177a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    177e:	2000      	movs	r0, #0
} // am_hal_flash_delay_status_change()
    1780:	4770      	bx	lr
    1782:	bf00      	nop
    1784:	0800009d 	.word	0x0800009d

00001788 <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    1788:	280f      	cmp	r0, #15
    178a:	d80b      	bhi.n	17a4 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    178c:	2805      	cmp	r0, #5
    178e:	d013      	beq.n	17b8 <am_hal_interrupt_enable+0x30>
    1790:	2806      	cmp	r0, #6
    1792:	d017      	beq.n	17c4 <am_hal_interrupt_enable+0x3c>
    1794:	2804      	cmp	r0, #4
    1796:	d104      	bne.n	17a2 <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    1798:	4a0d      	ldr	r2, [pc, #52]	; (17d0 <am_hal_interrupt_enable+0x48>)
    179a:	6813      	ldr	r3, [r2, #0]
    179c:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    17a0:	6010      	str	r0, [r2, #0]
    17a2:	4770      	bx	lr
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    17a4:	f1a0 0310 	sub.w	r3, r0, #16
    17a8:	f003 0c1f 	and.w	ip, r3, #31
    17ac:	2001      	movs	r0, #1
    17ae:	4909      	ldr	r1, [pc, #36]	; (17d4 <am_hal_interrupt_enable+0x4c>)
    17b0:	fa00 f20c 	lsl.w	r2, r0, ip
    17b4:	600a      	str	r2, [r1, #0]
    17b6:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    17b8:	4805      	ldr	r0, [pc, #20]	; (17d0 <am_hal_interrupt_enable+0x48>)
    17ba:	6801      	ldr	r1, [r0, #0]
    17bc:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    17c0:	6002      	str	r2, [r0, #0]
            break;
    17c2:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    17c4:	4902      	ldr	r1, [pc, #8]	; (17d0 <am_hal_interrupt_enable+0x48>)
    17c6:	680a      	ldr	r2, [r1, #0]
    17c8:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    17cc:	600b      	str	r3, [r1, #0]
            break;
    17ce:	4770      	bx	lr
    17d0:	e000ed24 	.word	0xe000ed24
    17d4:	e000e100 	.word	0xe000e100

000017d8 <am_hal_interrupt_master_enable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    17d8:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    17dc:	b662      	cpsie	i
    __asm("    bx lr");
    17de:	4770      	bx	lr

000017e0 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    17e0:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    17e4:	b672      	cpsid	i
    __asm("    bx lr");
    17e6:	4770      	bx	lr

000017e8 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    17e8:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    17ec:	4770      	bx	lr
    17ee:	bf00      	nop

000017f0 <iom_workaround_loop>:
                    bool bRising)
{
    //
    // Check to see if this is a "rising edge" or "falling edge" detector.
    //
    __asm("    cbz      r2, falling_edge");
    17f0:	b132      	cbz	r2, 1800 <falling_edge>

000017f2 <rising_edge>:

    //
    // Read GPIO pin 44, and loop until it's HIGH.
    //
    __asm("rising_edge:");
    __asm("    ldr      r2, =0x40010084");
    17f2:	4a07      	ldr	r2, [pc, #28]	; (1810 <falling_check_mosi+0xe>)

000017f4 <rising_check_mosi>:
    __asm("rising_check_mosi:");
    __asm("    ldr      r3, [r2]");
    17f4:	6813      	ldr	r3, [r2, #0]
    __asm("    ands     r3, r3, #0x1000");
    17f6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    __asm("    beq      rising_check_mosi");
    17fa:	d0fb      	beq.n	17f4 <rising_check_mosi>

    //
    // Write the PADREG Value to the PADREG register.
    //
    __asm("    str     r0, [r1]");
    17fc:	6008      	str	r0, [r1, #0]
    __asm("    bx      lr");
    17fe:	4770      	bx	lr

00001800 <falling_edge>:

    //
    // Read GPIO pin 44, and loop until it's LOW.
    //
    __asm("falling_edge:");
    __asm("    ldr      r2, =0x40010084");
    1800:	4a03      	ldr	r2, [pc, #12]	; (1810 <falling_check_mosi+0xe>)

00001802 <falling_check_mosi>:
    __asm("falling_check_mosi:");
    __asm("    ldr      r3, [r2]");
    1802:	6813      	ldr	r3, [r2, #0]
    __asm("    ands     r3, r3, #0x1000");
    1804:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    __asm("    bne      falling_check_mosi");
    1808:	d1fb      	bne.n	1802 <falling_check_mosi>

    //
    // Write the PADREG Value to the PADREG register.
    //
    __asm("    str     r0, [r1]");
    180a:	6008      	str	r0, [r1, #0]
    __asm("    bx      lr");
    180c:	4770      	bx	lr
    180e:	0000      	.short	0x0000
    1810:	40010084 	.word	0x40010084

00001814 <am_hal_iom_sleeping_queue_flush>:
    uint32_t ui32Critical;

    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    1814:	2805      	cmp	r0, #5
    1816:	d819      	bhi.n	184c <am_hal_iom_sleeping_queue_flush+0x38>
{
    1818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    181a:	4f0d      	ldr	r7, [pc, #52]	; (1850 <am_hal_iom_sleeping_queue_flush+0x3c>)
    181c:	4e0d      	ldr	r6, [pc, #52]	; (1854 <am_hal_iom_sleeping_queue_flush+0x40>)

        //
        // Check the queue and the IOM itself.
        //
        if ( (g_bIomBusy[ui32Module] == false) &&
            am_hal_queue_empty(&g_psIOMQueue[ui32Module]) )
    181e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1822:	4604      	mov	r4, r0
    1824:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
        ui32Critical = am_hal_interrupt_master_disable();
    1828:	f7ff ffda 	bl	17e0 <am_hal_interrupt_master_disable>
        if ( (g_bIomBusy[ui32Module] == false) &&
    182c:	5d31      	ldrb	r1, [r6, r4]
        ui32Critical = am_hal_interrupt_master_disable();
    182e:	4605      	mov	r5, r0
        if ( (g_bIomBusy[ui32Module] == false) &&
    1830:	b929      	cbnz	r1, 183e <am_hal_iom_sleeping_queue_flush+0x2a>
    1832:	68ba      	ldr	r2, [r7, #8]
    1834:	b91a      	cbnz	r2, 183e <am_hal_iom_sleeping_queue_flush+0x2a>
        //
        // End the critical section.
        //
        am_hal_interrupt_master_set(ui32Critical);
    }
}
    1836:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        am_hal_interrupt_master_set(ui32Critical);
    183a:	f7ff bfd5 	b.w	17e8 <am_hal_interrupt_master_set>
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_NORMAL);
    183e:	2000      	movs	r0, #0
    1840:	f002 fb9a 	bl	3f78 <am_hal_sysctrl_sleep>
        am_hal_interrupt_master_set(ui32Critical);
    1844:	4628      	mov	r0, r5
    1846:	f7ff ffcf 	bl	17e8 <am_hal_interrupt_master_set>
    184a:	e7ed      	b.n	1828 <am_hal_iom_sleeping_queue_flush+0x14>
    184c:	4770      	bx	lr
    184e:	bf00      	nop
    1850:	100015bc 	.word	0x100015bc
    1854:	1000114c 	.word	0x1000114c

00001858 <am_hal_iom_i2c_cmd_run.part.1>:
am_hal_iom_i2c_cmd_run(uint32_t ui32Operation, uint32_t ui32Module,
    1858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    185c:	b089      	sub	sp, #36	; 0x24
        if ( g_I2CPads[index].module == ui32Module )
    185e:	2900      	cmp	r1, #0
    1860:	d064      	beq.n	192c <am_hal_iom_i2c_cmd_run.part.1+0xd4>
    1862:	2901      	cmp	r1, #1
    1864:	d00d      	beq.n	1882 <am_hal_iom_i2c_cmd_run.part.1+0x2a>
    1866:	2902      	cmp	r1, #2
    1868:	d01a      	beq.n	18a0 <am_hal_iom_i2c_cmd_run.part.1+0x48>
    186a:	2903      	cmp	r1, #3
    186c:	d02e      	beq.n	18cc <am_hal_iom_i2c_cmd_run.part.1+0x74>
    186e:	2904      	cmp	r1, #4
    1870:	d03c      	beq.n	18ec <am_hal_iom_i2c_cmd_run.part.1+0x94>
    1872:	2905      	cmp	r1, #5
    1874:	d04a      	beq.n	190c <am_hal_iom_i2c_cmd_run.part.1+0xb4>
    1876:	2902      	cmp	r1, #2
    1878:	d019      	beq.n	18ae <am_hal_iom_i2c_cmd_run.part.1+0x56>
        return AM_HAL_IOM_ERR_INVALID_CFG;
    187a:	2004      	movs	r0, #4
}
    187c:	b009      	add	sp, #36	; 0x24
    187e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    1882:	4d6b      	ldr	r5, [pc, #428]	; (1a30 <am_hal_iom_i2c_cmd_run.part.1+0x1d8>)
    1884:	682f      	ldr	r7, [r5, #0]
            if ( ui8FncSelVal == g_I2CPads[index].funcsel )
    1886:	f3c7 04c2 	ubfx	r4, r7, #3, #3
    188a:	2c00      	cmp	r4, #0
    188c:	d1f5      	bne.n	187a <am_hal_iom_i2c_cmd_run.part.1+0x22>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    188e:	f04f 0b08 	mov.w	fp, #8
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    1892:	26ff      	movs	r6, #255	; 0xff
    1894:	9403      	str	r4, [sp, #12]
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    1896:	465f      	mov	r7, fp
    1898:	f8cd b014 	str.w	fp, [sp, #20]
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    189c:	9604      	str	r6, [sp, #16]
    189e:	e053      	b.n	1948 <am_hal_iom_i2c_cmd_run.part.1+0xf0>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    18a0:	4d64      	ldr	r5, [pc, #400]	; (1a34 <am_hal_iom_i2c_cmd_run.part.1+0x1dc>)
    18a2:	682f      	ldr	r7, [r5, #0]
            if ( ui8FncSelVal == g_I2CPads[index].funcsel )
    18a4:	f3c7 04c2 	ubfx	r4, r7, #3, #3
    18a8:	2c07      	cmp	r4, #7
    18aa:	f000 80b9 	beq.w	1a20 <am_hal_iom_i2c_cmd_run.part.1+0x1c8>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    18ae:	4d62      	ldr	r5, [pc, #392]	; (1a38 <am_hal_iom_i2c_cmd_run.part.1+0x1e0>)
    18b0:	682e      	ldr	r6, [r5, #0]
            if ( ui8FncSelVal == g_I2CPads[index].funcsel )
    18b2:	f3c6 67c2 	ubfx	r7, r6, #27, #3
    18b6:	2f04      	cmp	r7, #4
    18b8:	d1df      	bne.n	187a <am_hal_iom_i2c_cmd_run.part.1+0x22>
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    18ba:	2418      	movs	r4, #24
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    18bc:	271b      	movs	r7, #27
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    18be:	f04f 467f 	mov.w	r6, #4278190080	; 0xff000000
    18c2:	9403      	str	r4, [sp, #12]
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    18c4:	46a3      	mov	fp, r4
    18c6:	9705      	str	r7, [sp, #20]
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    18c8:	9604      	str	r6, [sp, #16]
    18ca:	e03d      	b.n	1948 <am_hal_iom_i2c_cmd_run.part.1+0xf0>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    18cc:	4d5b      	ldr	r5, [pc, #364]	; (1a3c <am_hal_iom_i2c_cmd_run.part.1+0x1e4>)
    18ce:	682f      	ldr	r7, [r5, #0]
            if ( ui8FncSelVal == g_I2CPads[index].funcsel )
    18d0:	f3c7 46c2 	ubfx	r6, r7, #19, #3
    18d4:	2e04      	cmp	r6, #4
    18d6:	d1d0      	bne.n	187a <am_hal_iom_i2c_cmd_run.part.1+0x22>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    18d8:	272a      	movs	r7, #42	; 0x2a
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    18da:	f44f 047f 	mov.w	r4, #16711680	; 0xff0000
    18de:	2610      	movs	r6, #16
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    18e0:	9705      	str	r7, [sp, #20]
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    18e2:	9404      	str	r4, [sp, #16]
    18e4:	9603      	str	r6, [sp, #12]
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    18e6:	f04f 0b28 	mov.w	fp, #40	; 0x28
    18ea:	e02d      	b.n	1948 <am_hal_iom_i2c_cmd_run.part.1+0xf0>
    18ec:	4d54      	ldr	r5, [pc, #336]	; (1a40 <am_hal_iom_i2c_cmd_run.part.1+0x1e8>)
    18ee:	682f      	ldr	r7, [r5, #0]
            if ( ui8FncSelVal == g_I2CPads[index].funcsel )
    18f0:	f3c7 64c2 	ubfx	r4, r7, #27, #3
    18f4:	2c04      	cmp	r4, #4
    18f6:	d1c0      	bne.n	187a <am_hal_iom_i2c_cmd_run.part.1+0x22>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    18f8:	2727      	movs	r7, #39	; 0x27
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    18fa:	f04f 467f 	mov.w	r6, #4278190080	; 0xff000000
    18fe:	2418      	movs	r4, #24
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    1900:	9705      	str	r7, [sp, #20]
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    1902:	9604      	str	r6, [sp, #16]
    1904:	9403      	str	r4, [sp, #12]
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    1906:	f04f 0b24 	mov.w	fp, #36	; 0x24
    190a:	e01d      	b.n	1948 <am_hal_iom_i2c_cmd_run.part.1+0xf0>
    190c:	4d4d      	ldr	r5, [pc, #308]	; (1a44 <am_hal_iom_i2c_cmd_run.part.1+0x1ec>)
    190e:	682c      	ldr	r4, [r5, #0]
            if ( ui8FncSelVal == g_I2CPads[index].funcsel )
    1910:	f3c4 06c2 	ubfx	r6, r4, #3, #3
    1914:	2e04      	cmp	r6, #4
    1916:	d1b0      	bne.n	187a <am_hal_iom_i2c_cmd_run.part.1+0x22>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    1918:	f04f 0b30 	mov.w	fp, #48	; 0x30
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    191c:	24ff      	movs	r4, #255	; 0xff
    191e:	2600      	movs	r6, #0
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    1920:	465f      	mov	r7, fp
    1922:	f8cd b014 	str.w	fp, [sp, #20]
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    1926:	9404      	str	r4, [sp, #16]
    1928:	9603      	str	r6, [sp, #12]
    192a:	e00d      	b.n	1948 <am_hal_iom_i2c_cmd_run.part.1+0xf0>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    192c:	4d46      	ldr	r5, [pc, #280]	; (1a48 <am_hal_iom_i2c_cmd_run.part.1+0x1f0>)
    192e:	682f      	ldr	r7, [r5, #0]
            if ( ui8FncSelVal == g_I2CPads[index].funcsel )
    1930:	f417 5f60 	tst.w	r7, #14336	; 0x3800
    1934:	d1a1      	bne.n	187a <am_hal_iom_i2c_cmd_run.part.1+0x22>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    1936:	2705      	movs	r7, #5
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    1938:	f44f 447f 	mov.w	r4, #65280	; 0xff00
    193c:	2608      	movs	r6, #8
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    193e:	9705      	str	r7, [sp, #20]
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    1940:	9404      	str	r4, [sp, #16]
    1942:	9603      	str	r6, [sp, #12]
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    1944:	f04f 0b04 	mov.w	fp, #4
    1948:	4698      	mov	r8, r3
    ui32SCLPadregVal = *pui32SCLPadreg;
    194a:	682b      	ldr	r3, [r5, #0]
    194c:	9302      	str	r3, [sp, #8]
    194e:	460c      	mov	r4, r1
    1950:	e88d 0005 	stmia.w	sp, {r0, r2}
    am_hal_gpio_pin_config(ui32IOMGPIO, AM_HAL_PIN_INPUT);
    1954:	f7ff ff44 	bl	17e0 <am_hal_interrupt_master_disable>
    1958:	f8df 9100 	ldr.w	r9, [pc, #256]	; 1a5c <am_hal_iom_i2c_cmd_run.part.1+0x204>
    195c:	4e3b      	ldr	r6, [pc, #236]	; (1a4c <am_hal_iom_i2c_cmd_run.part.1+0x1f4>)
    195e:	9007      	str	r0, [sp, #28]
    1960:	0879      	lsrs	r1, r7, #1
    1962:	f001 0c7c 	and.w	ip, r1, #124	; 0x7c
    1966:	f04f 0a73 	mov.w	sl, #115	; 0x73
    196a:	f8c9 a000 	str.w	sl, [r9]
    196e:	00b8      	lsls	r0, r7, #2
    1970:	f85c 2006 	ldr.w	r2, [ip, r6]
    1974:	f8df e0e8 	ldr.w	lr, [pc, #232]	; 1a60 <am_hal_iom_i2c_cmd_run.part.1+0x208>
    1978:	f000 031c 	and.w	r3, r0, #28
    197c:	2107      	movs	r1, #7
    197e:	4099      	lsls	r1, r3
    1980:	ea22 0001 	bic.w	r0, r2, r1
    1984:	f84c 0006 	str.w	r0, [ip, r6]
    1988:	9a04      	ldr	r2, [sp, #16]
    198a:	682e      	ldr	r6, [r5, #0]
    198c:	9803      	ldr	r0, [sp, #12]
    198e:	43d1      	mvns	r1, r2
    1990:	231a      	movs	r3, #26
    1992:	400e      	ands	r6, r1
    1994:	4083      	lsls	r3, r0
    1996:	4333      	orrs	r3, r6
    1998:	602b      	str	r3, [r5, #0]
    199a:	f85b 200e 	ldr.w	r2, [fp, lr]
    199e:	2600      	movs	r6, #0
    19a0:	4011      	ands	r1, r2
    19a2:	f84b 100e 	str.w	r1, [fp, lr]
    19a6:	f8c9 6000 	str.w	r6, [r9]
    19aa:	9807      	ldr	r0, [sp, #28]
    19ac:	f7ff ff1c 	bl	17e8 <am_hal_interrupt_master_set>
                 AM_HAL_GPIO_RD_REG(ui32IOMGPIO), AM_HAL_GPIO_RD_M(ui32IOMGPIO),
    19b0:	9905      	ldr	r1, [sp, #20]
    waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    19b2:	4827      	ldr	r0, [pc, #156]	; (1a50 <am_hal_iom_i2c_cmd_run.part.1+0x1f8>)
                 AM_HAL_GPIO_RD_REG(ui32IOMGPIO), AM_HAL_GPIO_RD_M(ui32IOMGPIO),
    19b4:	f001 0c1f 	and.w	ip, r1, #31
    waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    19b8:	f04f 0b01 	mov.w	fp, #1
                 AM_HAL_GPIO_RD_REG(ui32IOMGPIO), AM_HAL_GPIO_RD_M(ui32IOMGPIO),
    19bc:	08ff      	lsrs	r7, r7, #3
    waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    19be:	4925      	ldr	r1, [pc, #148]	; (1a54 <am_hal_iom_i2c_cmd_run.part.1+0x1fc>)
    19c0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    19c4:	fa0b f30c 	lsl.w	r3, fp, ip
                 AM_HAL_GPIO_RD_REG(ui32IOMGPIO), AM_HAL_GPIO_RD_M(ui32IOMGPIO),
    19c8:	f007 0204 	and.w	r2, r7, #4
    waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    19cc:	4411      	add	r1, r2
    19ce:	461a      	mov	r2, r3
    19d0:	f7ff fe38 	bl	1644 <am_hal_flash_delay_status_change>
    *pui32SCLPadreg = ui32SCLPadregVal;
    19d4:	9b02      	ldr	r3, [sp, #8]
    AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    19d6:	f8c9 a000 	str.w	sl, [r9]
    if (waitStatus != 1)
    19da:	4558      	cmp	r0, fp
    *pui32SCLPadreg = ui32SCLPadregVal;
    19dc:	602b      	str	r3, [r5, #0]
    AM_REGn(GPIO, 0, PADKEY) = 0;
    19de:	f8c9 6000 	str.w	r6, [r9]
    if (waitStatus != 1)
    19e2:	d003      	beq.n	19ec <am_hal_iom_i2c_cmd_run.part.1+0x194>
        return AM_HAL_IOM_ERR_TIMEOUT;
    19e4:	4658      	mov	r0, fp
}
    19e6:	b009      	add	sp, #36	; 0x24
    19e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ui32Command |= (ui32Options & 0x5C00FF00);
    19ec:	9d12      	ldr	r5, [sp, #72]	; 0x48
    ui32Command |= ((ui32BusAddress << 16) & 0x03FF0000);
    19ee:	4f1a      	ldr	r7, [pc, #104]	; (1a58 <am_hal_iom_i2c_cmd_run.part.1+0x200>)
    ui32Command |= (ui32Options & 0x5C00FF00);
    19f0:	9a00      	ldr	r2, [sp, #0]
    ui32Command |= ((ui32BusAddress << 16) & 0x03FF0000);
    19f2:	9b01      	ldr	r3, [sp, #4]
    ui32Command |= (ui32Options & 0x5C00FF00);
    19f4:	f025 4123 	bic.w	r1, r5, #2734686208	; 0xa3000000
    19f8:	f001 20ff 	and.w	r0, r1, #4278255360	; 0xff00ff00
        AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    19fc:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
    ui32Command |= (ui32Options & 0x5C00FF00);
    1a00:	4310      	orrs	r0, r2
    ui32Command |= ((ui32BusAddress << 16) & 0x03FF0000);
    1a02:	ea07 4503 	and.w	r5, r7, r3, lsl #16
        AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    1a06:	3404      	adds	r4, #4
    1a08:	0321      	lsls	r1, r4, #12
    ui32Command |= (ui32Options & 0x5C00FF00);
    1a0a:	4305      	orrs	r5, r0
    ui32Command |= (ui32NumBytes & 0xFF);
    1a0c:	fa5f f788 	uxtb.w	r7, r8
    ui32Command |= (ui32Options & 0x5C00FF00);
    1a10:	ea45 0407 	orr.w	r4, r5, r7
        AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    1a14:	4630      	mov	r0, r6
    1a16:	f8c1 4110 	str.w	r4, [r1, #272]	; 0x110
}
    1a1a:	b009      	add	sp, #36	; 0x24
    1a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    1a20:	2400      	movs	r4, #0
    1a22:	26ff      	movs	r6, #255	; 0xff
    1a24:	9403      	str	r4, [sp, #12]
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_I2CPads[index].pad))) &
    1a26:	46a3      	mov	fp, r4
    1a28:	4627      	mov	r7, r4
    1a2a:	9405      	str	r4, [sp, #20]
                             AM_HAL_GPIO_PADREG_M(g_I2CPads[index].pad)) >>
    1a2c:	9604      	str	r6, [sp, #16]
    1a2e:	e78b      	b.n	1948 <am_hal_iom_i2c_cmd_run.part.1+0xf0>
    1a30:	40010008 	.word	0x40010008
    1a34:	40010000 	.word	0x40010000
    1a38:	40010018 	.word	0x40010018
    1a3c:	40010028 	.word	0x40010028
    1a40:	40010024 	.word	0x40010024
    1a44:	40010030 	.word	0x40010030
    1a48:	40010004 	.word	0x40010004
    1a4c:	40010040 	.word	0x40010040
    1a50:	1000152c 	.word	0x1000152c
    1a54:	40010080 	.word	0x40010080
    1a58:	03ff0000 	.word	0x03ff0000
    1a5c:	40010060 	.word	0x40010060
    1a60:	400100e0 	.word	0x400100e0

00001a64 <am_hal_iom_i2c_write_nb.part.8>:
am_hal_iom_i2c_write_nb(uint32_t ui32Module, uint32_t ui32BusAddress,
    1a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    1a68:	2806      	cmp	r0, #6
am_hal_iom_i2c_write_nb(uint32_t ui32Module, uint32_t ui32BusAddress,
    1a6a:	b084      	sub	sp, #16
    1a6c:	460f      	mov	r7, r1
    if ( ui32Module == AM_HAL_IOM_I2CBB_MODULE )
    1a6e:	d022      	beq.n	1ab6 <am_hal_iom_i2c_write_nb.part.8+0x52>
    if (ui32NumBytes >= 256)
    1a70:	2bff      	cmp	r3, #255	; 0xff
    1a72:	4605      	mov	r5, r0
    1a74:	d905      	bls.n	1a82 <am_hal_iom_i2c_write_nb.part.8+0x1e>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    1a76:	4a6b      	ldr	r2, [pc, #428]	; (1c24 <am_hal_iom_i2c_write_nb.part.8+0x1c0>)
    1a78:	2003      	movs	r0, #3
    1a7a:	5550      	strb	r0, [r2, r5]
}
    1a7c:	b004      	add	sp, #16
    1a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    1a82:	f500 26a0 	add.w	r6, r0, #327680	; 0x50000
    1a86:	3604      	adds	r6, #4
    1a88:	0336      	lsls	r6, r6, #12
    1a8a:	4690      	mov	r8, r2
    1a8c:	f8d6 211c 	ldr.w	r2, [r6, #284]	; 0x11c
    g_bIomBusy[ui32Module] = true;
    1a90:	4965      	ldr	r1, [pc, #404]	; (1c28 <am_hal_iom_i2c_write_nb.part.8+0x1c4>)
                       AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    1a92:	f012 0f08 	tst.w	r2, #8
    g_bIomBusy[ui32Module] = true;
    1a96:	f04f 0001 	mov.w	r0, #1
    1a9a:	5548      	strb	r0, [r1, r5]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    1a9c:	f240 74ff 	movw	r4, #2047	; 0x7ff
                       AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    1aa0:	bf14      	ite	ne
    1aa2:	2040      	movne	r0, #64	; 0x40
    1aa4:	2080      	moveq	r0, #128	; 0x80
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    1aa6:	2d05      	cmp	r5, #5
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    1aa8:	f8c6 4208 	str.w	r4, [r6, #520]	; 0x208
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    1aac:	d92c      	bls.n	1b08 <am_hal_iom_i2c_write_nb.part.8+0xa4>
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    1aae:	2000      	movs	r0, #0
}
    1ab0:	b004      	add	sp, #16
    1ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ( ui32Options & AM_HAL_IOM_RAW )
    1ab6:	990a      	ldr	r1, [sp, #40]	; 0x28
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    1ab8:	f3c1 7500 	ubfx	r5, r1, #28, #1
        if ( ui32Options & AM_HAL_IOM_RAW )
    1abc:	0049      	lsls	r1, r1, #1
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    1abe:	ea4f 0047 	mov.w	r0, r7, lsl #1
        if ( ui32Options & AM_HAL_IOM_RAW )
    1ac2:	d417      	bmi.n	1af4 <am_hal_iom_i2c_write_nb.part.8+0x90>
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    1ac4:	2401      	movs	r4, #1
    1ac6:	e88d 0030 	stmia.w	sp, {r4, r5}
    1aca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    1acc:	4619      	mov	r1, r3
    1ace:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1ad2:	f3c5 2307 	ubfx	r3, r5, #8, #8
    1ad6:	f003 f823 	bl	4b20 <am_hal_i2c_bit_bang_send>
        g_iom_error_status[ui32Module] = ui32Status = i2c_bb_errmap[i2cBBStatus];
    1ada:	4e54      	ldr	r6, [pc, #336]	; (1c2c <am_hal_iom_i2c_write_nb.part.8+0x1c8>)
    1adc:	4f51      	ldr	r7, [pc, #324]	; (1c24 <am_hal_iom_i2c_write_nb.part.8+0x1c0>)
        if ( pfnCallback )
    1ade:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
        g_iom_error_status[ui32Module] = ui32Status = i2c_bb_errmap[i2cBBStatus];
    1ae0:	5c30      	ldrb	r0, [r6, r0]
    1ae2:	71b8      	strb	r0, [r7, #6]
        if ( pfnCallback )
    1ae4:	2c00      	cmp	r4, #0
    1ae6:	d0c9      	beq.n	1a7c <am_hal_iom_i2c_write_nb.part.8+0x18>
    1ae8:	9003      	str	r0, [sp, #12]
            pfnCallback();
    1aea:	47a0      	blx	r4
    1aec:	9803      	ldr	r0, [sp, #12]
}
    1aee:	b004      	add	sp, #16
    1af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    1af4:	2400      	movs	r4, #0
    1af6:	4619      	mov	r1, r3
    1af8:	e88d 0030 	stmia.w	sp, {r4, r5}
    1afc:	4623      	mov	r3, r4
    1afe:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1b02:	f003 f80d 	bl	4b20 <am_hal_i2c_bit_bang_send>
    1b06:	e7e8      	b.n	1ada <am_hal_iom_i2c_write_nb.part.8+0x76>
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    1b08:	f8d6 211c 	ldr.w	r2, [r6, #284]	; 0x11c
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1b0c:	f8d6 1100 	ldr.w	r1, [r6, #256]	; 0x100
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    1b10:	f012 0f08 	tst.w	r2, #8
    1b14:	bf14      	ite	ne
    1b16:	2240      	movne	r2, #64	; 0x40
    1b18:	2280      	moveq	r2, #128	; 0x80
    ui32TransferSize = (ui32NumBytes <= ui32MaxFifoSize ? ui32NumBytes :
    1b1a:	4298      	cmp	r0, r3
    1b1c:	bf28      	it	cs
    1b1e:	4618      	movcs	r0, r3
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1b20:	1a52      	subs	r2, r2, r1
    ui32TransferSize = (ui32NumBytes <= ui32MaxFifoSize ? ui32NumBytes :
    1b22:	4604      	mov	r4, r0
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    1b24:	f002 00fc 	and.w	r0, r2, #252	; 0xfc
    1b28:	4284      	cmp	r4, r0
    1b2a:	d871      	bhi.n	1c10 <am_hal_iom_i2c_write_nb.part.8+0x1ac>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1b2c:	2c00      	cmp	r4, #0
    1b2e:	d0be      	beq.n	1aae <am_hal_iom_i2c_write_nb.part.8+0x4a>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1b30:	4642      	mov	r2, r8
    1b32:	ea6f 0c08 	mvn.w	ip, r8
    1b36:	f852 1b04 	ldr.w	r1, [r2], #4
    1b3a:	6031      	str	r1, [r6, #0]
    1b3c:	44c4      	add	ip, r8
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1b3e:	eba2 0e08 	sub.w	lr, r2, r8
    1b42:	44a4      	add	ip, r4
    1b44:	4574      	cmp	r4, lr
    1b46:	f3cc 0082 	ubfx	r0, ip, #2, #3
    1b4a:	d943      	bls.n	1bd4 <am_hal_iom_i2c_write_nb.part.8+0x170>
    1b4c:	b320      	cbz	r0, 1b98 <am_hal_iom_i2c_write_nb.part.8+0x134>
    1b4e:	2801      	cmp	r0, #1
    1b50:	d01b      	beq.n	1b8a <am_hal_iom_i2c_write_nb.part.8+0x126>
    1b52:	2802      	cmp	r0, #2
    1b54:	d016      	beq.n	1b84 <am_hal_iom_i2c_write_nb.part.8+0x120>
    1b56:	2803      	cmp	r0, #3
    1b58:	d011      	beq.n	1b7e <am_hal_iom_i2c_write_nb.part.8+0x11a>
    1b5a:	2804      	cmp	r0, #4
    1b5c:	d00c      	beq.n	1b78 <am_hal_iom_i2c_write_nb.part.8+0x114>
    1b5e:	2805      	cmp	r0, #5
    1b60:	d007      	beq.n	1b72 <am_hal_iom_i2c_write_nb.part.8+0x10e>
    1b62:	2806      	cmp	r0, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1b64:	bf1c      	itt	ne
    1b66:	f852 0b04 	ldrne.w	r0, [r2], #4
    1b6a:	6030      	strne	r0, [r6, #0]
    1b6c:	f852 1b04 	ldr.w	r1, [r2], #4
    1b70:	6031      	str	r1, [r6, #0]
    1b72:	f852 0b04 	ldr.w	r0, [r2], #4
    1b76:	6030      	str	r0, [r6, #0]
    1b78:	f852 1b04 	ldr.w	r1, [r2], #4
    1b7c:	6031      	str	r1, [r6, #0]
    1b7e:	f852 0b04 	ldr.w	r0, [r2], #4
    1b82:	6030      	str	r0, [r6, #0]
    1b84:	f852 1b04 	ldr.w	r1, [r2], #4
    1b88:	6031      	str	r1, [r6, #0]
    1b8a:	f852 0b04 	ldr.w	r0, [r2], #4
    1b8e:	6030      	str	r0, [r6, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1b90:	eba2 0c08 	sub.w	ip, r2, r8
    1b94:	4564      	cmp	r4, ip
    1b96:	d91d      	bls.n	1bd4 <am_hal_iom_i2c_write_nb.part.8+0x170>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1b98:	4696      	mov	lr, r2
    1b9a:	3220      	adds	r2, #32
    1b9c:	f85e 1b04 	ldr.w	r1, [lr], #4
    1ba0:	6031      	str	r1, [r6, #0]
    1ba2:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    1ba6:	6030      	str	r0, [r6, #0]
    1ba8:	f8de 1004 	ldr.w	r1, [lr, #4]
    1bac:	6031      	str	r1, [r6, #0]
    1bae:	f852 0c14 	ldr.w	r0, [r2, #-20]
    1bb2:	6030      	str	r0, [r6, #0]
    1bb4:	f852 1c10 	ldr.w	r1, [r2, #-16]
    1bb8:	6031      	str	r1, [r6, #0]
    1bba:	f852 0c0c 	ldr.w	r0, [r2, #-12]
    1bbe:	6030      	str	r0, [r6, #0]
    1bc0:	f852 1c08 	ldr.w	r1, [r2, #-8]
    1bc4:	6031      	str	r1, [r6, #0]
    1bc6:	f852 0c04 	ldr.w	r0, [r2, #-4]
    1bca:	6030      	str	r0, [r6, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1bcc:	eba2 0c08 	sub.w	ip, r2, r8
    1bd0:	4564      	cmp	r4, ip
    1bd2:	d8e1      	bhi.n	1b98 <am_hal_iom_i2c_write_nb.part.8+0x134>
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    1bd4:	eb05 0685 	add.w	r6, r5, r5, lsl #2
    1bd8:	4815      	ldr	r0, [pc, #84]	; (1c30 <am_hal_iom_i2c_write_nb.part.8+0x1cc>)
    1bda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1bdc:	9200      	str	r2, [sp, #0]
    1bde:	00b1      	lsls	r1, r6, #2
    1be0:	463a      	mov	r2, r7
    1be2:	2701      	movs	r7, #1
    1be4:	1846      	adds	r6, r0, r1
    1be6:	5047      	str	r7, [r0, r1]
        g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    1be8:	f024 0703 	bic.w	r7, r4, #3
        g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
    1bec:	eba3 0e04 	sub.w	lr, r3, r4
        g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    1bf0:	4447      	add	r7, r8
        g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    1bf2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    1bf4:	6134      	str	r4, [r6, #16]
    1bf6:	4629      	mov	r1, r5
    1bf8:	2000      	movs	r0, #0
        g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
    1bfa:	f8c6 e008 	str.w	lr, [r6, #8]
        g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    1bfe:	6077      	str	r7, [r6, #4]
    1c00:	f7ff fe2a 	bl	1858 <am_hal_iom_i2c_cmd_run.part.1>
        if (ui32Status != AM_HAL_IOM_SUCCESS)
    1c04:	2800      	cmp	r0, #0
    1c06:	f43f af39 	beq.w	1a7c <am_hal_iom_i2c_write_nb.part.8+0x18>
            g_iom_error_status[ui32Module] = ui32Status;
    1c0a:	4b06      	ldr	r3, [pc, #24]	; (1c24 <am_hal_iom_i2c_write_nb.part.8+0x1c0>)
    1c0c:	5558      	strb	r0, [r3, r5]
    1c0e:	e735      	b.n	1a7c <am_hal_iom_i2c_write_nb.part.8+0x18>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    1c10:	4a08      	ldr	r2, [pc, #32]	; (1c34 <am_hal_iom_i2c_write_nb.part.8+0x1d0>)
    1c12:	4809      	ldr	r0, [pc, #36]	; (1c38 <am_hal_iom_i2c_write_nb.part.8+0x1d4>)
    1c14:	9303      	str	r3, [sp, #12]
    1c16:	f640 7145 	movw	r1, #3909	; 0xf45
    1c1a:	f7ff fd0d 	bl	1638 <am_hal_debug_error>
    1c1e:	9b03      	ldr	r3, [sp, #12]
    1c20:	e786      	b.n	1b30 <am_hal_iom_i2c_write_nb.part.8+0xcc>
    1c22:	bf00      	nop
    1c24:	10001154 	.word	0x10001154
    1c28:	1000114c 	.word	0x1000114c
    1c2c:	00005488 	.word	0x00005488
    1c30:	10001544 	.word	0x10001544
    1c34:	00005378 	.word	0x00005378
    1c38:	000053ac 	.word	0x000053ac

00001c3c <am_hal_iom_int_service.part.20>:
am_hal_iom_int_service(uint32_t ui32Module, uint32_t ui32Status)
    1c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    g_iom_error_status[ui32Module] |= ui32Status;
    1c40:	4da8      	ldr	r5, [pc, #672]	; (1ee4 <am_hal_iom_int_service.part.20+0x2a8>)
    1c42:	5c2b      	ldrb	r3, [r5, r0]
    1c44:	430b      	orrs	r3, r1
    1c46:	b2db      	uxtb	r3, r3
    if ( ui32Status & AM_HAL_IOM_INT_CMDCMP )
    1c48:	07ca      	lsls	r2, r1, #31
am_hal_iom_int_service(uint32_t ui32Module, uint32_t ui32Status)
    1c4a:	b085      	sub	sp, #20
    1c4c:	4604      	mov	r4, r0
    g_iom_error_status[ui32Module] |= ui32Status;
    1c4e:	542b      	strb	r3, [r5, r0]
    if ( ui32Status & AM_HAL_IOM_INT_CMDCMP )
    1c50:	f140 8094 	bpl.w	1d7c <am_hal_iom_int_service.part.20+0x140>
        if ( psBuffer->ui32State == BUFFER_IDLE )
    1c54:	0086      	lsls	r6, r0, #2
    1c56:	1830      	adds	r0, r6, r0
    1c58:	0082      	lsls	r2, r0, #2
    1c5a:	4fa3      	ldr	r7, [pc, #652]	; (1ee8 <am_hal_iom_int_service.part.20+0x2ac>)
        g_bIomBusy[ui32Module] = false;
    1c5c:	48a3      	ldr	r0, [pc, #652]	; (1eec <am_hal_iom_int_service.part.20+0x2b0>)
        if ( psBuffer->ui32State == BUFFER_IDLE )
    1c5e:	58b9      	ldr	r1, [r7, r2]
        g_bIomBusy[ui32Module] = false;
    1c60:	f04f 0e00 	mov.w	lr, #0
        if ( psBuffer->ui32State == BUFFER_IDLE )
    1c64:	443a      	add	r2, r7
        g_bIomBusy[ui32Module] = false;
    1c66:	f800 e004 	strb.w	lr, [r0, r4]
        if ( psBuffer->ui32State == BUFFER_IDLE )
    1c6a:	2900      	cmp	r1, #0
    1c6c:	f000 8083 	beq.w	1d76 <am_hal_iom_int_service.part.20+0x13a>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    1c70:	f504 28a0 	add.w	r8, r4, #327680	; 0x50000
    1c74:	f108 0004 	add.w	r0, r8, #4
        if ( psBuffer->ui32State == BUFFER_RECEIVING )
    1c78:	2902      	cmp	r1, #2
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    1c7a:	ea4f 3800 	mov.w	r8, r0, lsl #12
        if ( psBuffer->ui32State == BUFFER_RECEIVING )
    1c7e:	f000 81e3 	beq.w	2048 <am_hal_iom_int_service.part.20+0x40c>
        psBuffer->ui32State = BUFFER_IDLE;
    1c82:	1932      	adds	r2, r6, r4
    1c84:	0090      	lsls	r0, r2, #2
    1c86:	2100      	movs	r1, #0
    1c88:	5039      	str	r1, [r7, r0]
        uint32_t u32RetVal = AM_REGn(IOMSTR, ui32Module, INTSTAT);
        return u32RetVal & AM_REGn(IOMSTR, ui32Module, INTEN);
    }
    else
    {
        return AM_REGn(IOMSTR, ui32Module, INTSTAT);
    1c8a:	f8d8 2204 	ldr.w	r2, [r8, #516]	; 0x204
    ui32IntStatus |= am_hal_iom_int_status_get(ui32Module, false);
    1c8e:	4313      	orrs	r3, r2
    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    1c90:	f013 0fcc 	tst.w	r3, #204	; 0xcc
    1c94:	f040 8098 	bne.w	1dc8 <am_hal_iom_int_service.part.20+0x18c>
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
    1c98:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    1c9c:	f040 8096 	bne.w	1dcc <am_hal_iom_int_service.part.20+0x190>
    am_hal_iom_status_e ui32Status = AM_HAL_IOM_SUCCESS;
    1ca0:	f013 0f10 	tst.w	r3, #16
    1ca4:	bf14      	ite	ne
    1ca6:	2306      	movne	r3, #6
    1ca8:	460b      	moveq	r3, r1
        if ( psBuffer->pfnCallback )
    1caa:	4426      	add	r6, r4
    1cac:	eb07 0686 	add.w	r6, r7, r6, lsl #2
        g_iom_error_status[ui32Module] = internal_iom_get_int_err(ui32Module, g_iom_error_status[ui32Module]);
    1cb0:	552b      	strb	r3, [r5, r4]
        if ( psBuffer->pfnCallback )
    1cb2:	6930      	ldr	r0, [r6, #16]
    1cb4:	2800      	cmp	r0, #0
    1cb6:	d05e      	beq.n	1d76 <am_hal_iom_int_service.part.20+0x13a>
}
    1cb8:	b005      	add	sp, #20
    1cba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            psBuffer->pfnCallback();
    1cbe:	4700      	bx	r0
                    am_hal_iom_fifo_read(ui32Module, psBuffer->pui32Data,
    1cc0:	eb03 0c8b 	add.w	ip, r3, fp, lsl #2
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    1cc4:	f8d8 311c 	ldr.w	r3, [r8, #284]	; 0x11c
                    am_hal_iom_fifo_read(ui32Module, psBuffer->pui32Data,
    1cc8:	f8dc 5004 	ldr.w	r5, [ip, #4]
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    1ccc:	0719      	lsls	r1, r3, #28
    1cce:	d40a      	bmi.n	1ce6 <am_hal_iom_int_service.part.20+0xaa>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    1cd0:	f8d8 6100 	ldr.w	r6, [r8, #256]	; 0x100
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    1cd4:	b2f0      	uxtb	r0, r6
    1cd6:	4284      	cmp	r4, r0
    1cd8:	d905      	bls.n	1ce6 <am_hal_iom_int_service.part.20+0xaa>
    1cda:	4a85      	ldr	r2, [pc, #532]	; (1ef0 <am_hal_iom_int_service.part.20+0x2b4>)
    1cdc:	4885      	ldr	r0, [pc, #532]	; (1ef4 <am_hal_iom_int_service.part.20+0x2b8>)
    1cde:	f44f 6178 	mov.w	r1, #3968	; 0xf80
    1ce2:	f7ff fca9 	bl	1638 <am_hal_debug_error>
    for ( i = 0; i < ui32NumWords; i++ )
    1ce6:	ea5f 0994 	movs.w	r9, r4, lsr #2
    1cea:	f007 0203 	and.w	r2, r7, #3
    1cee:	d038      	beq.n	1d62 <am_hal_iom_int_service.part.20+0x126>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1cf0:	462f      	mov	r7, r5
    1cf2:	f8d8 1000 	ldr.w	r1, [r8]
    1cf6:	f847 1b04 	str.w	r1, [r7], #4
    1cfa:	eb05 0389 	add.w	r3, r5, r9, lsl #2
    1cfe:	1b5c      	subs	r4, r3, r5
    1d00:	1f26      	subs	r6, r4, #4
    for ( i = 0; i < ui32NumWords; i++ )
    1d02:	429f      	cmp	r7, r3
    1d04:	f3c6 0182 	ubfx	r1, r6, #2, #3
    1d08:	d02b      	beq.n	1d62 <am_hal_iom_int_service.part.20+0x126>
    1d0a:	2900      	cmp	r1, #0
    1d0c:	d060      	beq.n	1dd0 <am_hal_iom_int_service.part.20+0x194>
    1d0e:	2901      	cmp	r1, #1
    1d10:	d021      	beq.n	1d56 <am_hal_iom_int_service.part.20+0x11a>
    1d12:	2902      	cmp	r1, #2
    1d14:	d01b      	beq.n	1d4e <am_hal_iom_int_service.part.20+0x112>
    1d16:	2903      	cmp	r1, #3
    1d18:	d015      	beq.n	1d46 <am_hal_iom_int_service.part.20+0x10a>
    1d1a:	2904      	cmp	r1, #4
    1d1c:	d00f      	beq.n	1d3e <am_hal_iom_int_service.part.20+0x102>
    1d1e:	2905      	cmp	r1, #5
    1d20:	d009      	beq.n	1d36 <am_hal_iom_int_service.part.20+0xfa>
    1d22:	2906      	cmp	r1, #6
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1d24:	bf1c      	itt	ne
    1d26:	f8d8 1000 	ldrne.w	r1, [r8]
    1d2a:	f847 1b04 	strne.w	r1, [r7], #4
    1d2e:	f8d8 4000 	ldr.w	r4, [r8]
    1d32:	f847 4b04 	str.w	r4, [r7], #4
    1d36:	f8d8 6000 	ldr.w	r6, [r8]
    1d3a:	f847 6b04 	str.w	r6, [r7], #4
    1d3e:	f8d8 1000 	ldr.w	r1, [r8]
    1d42:	f847 1b04 	str.w	r1, [r7], #4
    1d46:	f8d8 4000 	ldr.w	r4, [r8]
    1d4a:	f847 4b04 	str.w	r4, [r7], #4
    1d4e:	f8d8 6000 	ldr.w	r6, [r8]
    1d52:	f847 6b04 	str.w	r6, [r7], #4
    1d56:	f8d8 1000 	ldr.w	r1, [r8]
    1d5a:	f847 1b04 	str.w	r1, [r7], #4
    for ( i = 0; i < ui32NumWords; i++ )
    1d5e:	429f      	cmp	r7, r3
    1d60:	d136      	bne.n	1dd0 <am_hal_iom_int_service.part.20+0x194>
    if ( ui32Leftovers )
    1d62:	b142      	cbz	r2, 1d76 <am_hal_iom_int_service.part.20+0x13a>
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1d64:	a904      	add	r1, sp, #16
    1d66:	f8d8 7000 	ldr.w	r7, [r8]
    1d6a:	f841 7d04 	str.w	r7, [r1, #-4]!
    1d6e:	eb05 0089 	add.w	r0, r5, r9, lsl #2
    1d72:	f003 fa53 	bl	521c <memcpy>
}
    1d76:	b005      	add	sp, #20
    1d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if ( ui32Status & AM_HAL_IOM_INT_THR )
    1d7c:	0788      	lsls	r0, r1, #30
    1d7e:	d5fa      	bpl.n	1d76 <am_hal_iom_int_service.part.20+0x13a>
        if ( psBuffer->ui32State == BUFFER_IDLE )
    1d80:	eb04 0b84 	add.w	fp, r4, r4, lsl #2
    1d84:	ea4f 068b 	mov.w	r6, fp, lsl #2
    1d88:	4b57      	ldr	r3, [pc, #348]	; (1ee8 <am_hal_iom_int_service.part.20+0x2ac>)
    1d8a:	599a      	ldr	r2, [r3, r6]
    1d8c:	441e      	add	r6, r3
    1d8e:	2a00      	cmp	r2, #0
    1d90:	d0f1      	beq.n	1d76 <am_hal_iom_int_service.part.20+0x13a>
            thresh = AM_BFRn(IOMSTR, ui32Module, FIFOTHR, FIFOWTHR);
    1d92:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
        if ( psBuffer->ui32State == BUFFER_SENDING )
    1d96:	2a01      	cmp	r2, #1
            thresh = AM_BFRn(IOMSTR, ui32Module, FIFOTHR, FIFOWTHR);
    1d98:	f104 0404 	add.w	r4, r4, #4
        if ( psBuffer->ui32State == BUFFER_SENDING )
    1d9c:	f000 80ac 	beq.w	1ef8 <am_hal_iom_int_service.part.20+0x2bc>
            thresh = AM_BFRn(IOMSTR, ui32Module, FIFOTHR, FIFORTHR);
    1da0:	ea4f 3804 	mov.w	r8, r4, lsl #12
    1da4:	f508 7a80 	add.w	sl, r8, #256	; 0x100
    1da8:	f8d8 0108 	ldr.w	r0, [r8, #264]	; 0x108
    1dac:	f000 097f 	and.w	r9, r0, #127	; 0x7f
    1db0:	e004      	b.n	1dbc <am_hal_iom_int_service.part.20+0x180>
                if ( ui32NumBytes == psBuffer->ui32BytesLeft )
    1db2:	68b4      	ldr	r4, [r6, #8]
    1db4:	42ac      	cmp	r4, r5
    1db6:	d083      	beq.n	1cc0 <am_hal_iom_int_service.part.20+0x84>
                else if ( ui32NumBytes >= 4 )
    1db8:	2d03      	cmp	r5, #3
    1dba:	d828      	bhi.n	1e0e <am_hal_iom_int_service.part.20+0x1d2>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    1dbc:	f8da 7000 	ldr.w	r7, [sl]
    1dc0:	b2fd      	uxtb	r5, r7
            while ( (ui32NumBytes = am_hal_iom_fifo_full_slots(ui32Module)) >= thresh )
    1dc2:	45a9      	cmp	r9, r5
    1dc4:	d9f5      	bls.n	1db2 <am_hal_iom_int_service.part.20+0x176>
    1dc6:	e7d6      	b.n	1d76 <am_hal_iom_int_service.part.20+0x13a>
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
    1dc8:	2305      	movs	r3, #5
    1dca:	e76e      	b.n	1caa <am_hal_iom_int_service.part.20+0x6e>
        ui32Status = AM_HAL_IOM_ERR_I2C_ARB;
    1dcc:	2307      	movs	r3, #7
    1dce:	e76c      	b.n	1caa <am_hal_iom_int_service.part.20+0x6e>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1dd0:	46ba      	mov	sl, r7
    1dd2:	f8d8 0000 	ldr.w	r0, [r8]
    1dd6:	f84a 0b04 	str.w	r0, [sl], #4
    1dda:	f8d8 4000 	ldr.w	r4, [r8]
    1dde:	607c      	str	r4, [r7, #4]
    1de0:	f8d8 6000 	ldr.w	r6, [r8]
    1de4:	f8ca 6004 	str.w	r6, [sl, #4]
    1de8:	f8d8 1000 	ldr.w	r1, [r8]
    1dec:	60f9      	str	r1, [r7, #12]
    1dee:	f8d8 0000 	ldr.w	r0, [r8]
    1df2:	6138      	str	r0, [r7, #16]
    1df4:	f8d8 4000 	ldr.w	r4, [r8]
    1df8:	617c      	str	r4, [r7, #20]
    1dfa:	f8d8 6000 	ldr.w	r6, [r8]
    1dfe:	61be      	str	r6, [r7, #24]
    1e00:	f8d8 1000 	ldr.w	r1, [r8]
    1e04:	61f9      	str	r1, [r7, #28]
    1e06:	3720      	adds	r7, #32
    for ( i = 0; i < ui32NumWords; i++ )
    1e08:	429f      	cmp	r7, r3
    1e0a:	d1e1      	bne.n	1dd0 <am_hal_iom_int_service.part.20+0x194>
    1e0c:	e7a9      	b.n	1d62 <am_hal_iom_int_service.part.20+0x126>
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    1e0e:	f8d8 111c 	ldr.w	r1, [r8, #284]	; 0x11c
                    am_hal_iom_fifo_read(ui32Module, psBuffer->pui32Data, ui32NumBytes);
    1e12:	6874      	ldr	r4, [r6, #4]
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    1e14:	070a      	lsls	r2, r1, #28
                    ui32NumBytes = (ui32NumBytes & (~0x3));
    1e16:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    1e1a:	f140 8106 	bpl.w	202a <am_hal_iom_int_service.part.20+0x3ee>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1e1e:	4622      	mov	r2, r4
    1e20:	f8d8 1000 	ldr.w	r1, [r8]
    1e24:	f842 1b04 	str.w	r1, [r2], #4
    1e28:	f005 0cfc 	and.w	ip, r5, #252	; 0xfc
    1e2c:	f1ac 0504 	sub.w	r5, ip, #4
    1e30:	44a4      	add	ip, r4
    for ( i = 0; i < ui32NumWords; i++ )
    1e32:	4594      	cmp	ip, r2
    1e34:	f3c5 0082 	ubfx	r0, r5, #2, #3
    1e38:	d047      	beq.n	1eca <am_hal_iom_int_service.part.20+0x28e>
    1e3a:	b348      	cbz	r0, 1e90 <am_hal_iom_int_service.part.20+0x254>
    1e3c:	2801      	cmp	r0, #1
    1e3e:	d021      	beq.n	1e84 <am_hal_iom_int_service.part.20+0x248>
    1e40:	2802      	cmp	r0, #2
    1e42:	d01b      	beq.n	1e7c <am_hal_iom_int_service.part.20+0x240>
    1e44:	2803      	cmp	r0, #3
    1e46:	d015      	beq.n	1e74 <am_hal_iom_int_service.part.20+0x238>
    1e48:	2804      	cmp	r0, #4
    1e4a:	d00f      	beq.n	1e6c <am_hal_iom_int_service.part.20+0x230>
    1e4c:	2805      	cmp	r0, #5
    1e4e:	d009      	beq.n	1e64 <am_hal_iom_int_service.part.20+0x228>
    1e50:	2806      	cmp	r0, #6
    1e52:	d003      	beq.n	1e5c <am_hal_iom_int_service.part.20+0x220>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1e54:	f8d8 1000 	ldr.w	r1, [r8]
    1e58:	6061      	str	r1, [r4, #4]
    1e5a:	3204      	adds	r2, #4
    1e5c:	f8d8 4000 	ldr.w	r4, [r8]
    1e60:	f842 4b04 	str.w	r4, [r2], #4
    1e64:	f8d8 5000 	ldr.w	r5, [r8]
    1e68:	f842 5b04 	str.w	r5, [r2], #4
    1e6c:	f8d8 0000 	ldr.w	r0, [r8]
    1e70:	f842 0b04 	str.w	r0, [r2], #4
    1e74:	f8d8 1000 	ldr.w	r1, [r8]
    1e78:	f842 1b04 	str.w	r1, [r2], #4
    1e7c:	f8d8 4000 	ldr.w	r4, [r8]
    1e80:	f842 4b04 	str.w	r4, [r2], #4
    1e84:	f8d8 5000 	ldr.w	r5, [r8]
    1e88:	f842 5b04 	str.w	r5, [r2], #4
    for ( i = 0; i < ui32NumWords; i++ )
    1e8c:	4594      	cmp	ip, r2
    1e8e:	d01c      	beq.n	1eca <am_hal_iom_int_service.part.20+0x28e>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1e90:	4610      	mov	r0, r2
    1e92:	f8d8 1000 	ldr.w	r1, [r8]
    1e96:	f840 1b04 	str.w	r1, [r0], #4
    1e9a:	f8d8 4000 	ldr.w	r4, [r8]
    1e9e:	6054      	str	r4, [r2, #4]
    1ea0:	f8d8 5000 	ldr.w	r5, [r8]
    1ea4:	6045      	str	r5, [r0, #4]
    1ea6:	f8d8 0000 	ldr.w	r0, [r8]
    1eaa:	60d0      	str	r0, [r2, #12]
    1eac:	f8d8 1000 	ldr.w	r1, [r8]
    1eb0:	6111      	str	r1, [r2, #16]
    1eb2:	f8d8 4000 	ldr.w	r4, [r8]
    1eb6:	6154      	str	r4, [r2, #20]
    1eb8:	f8d8 5000 	ldr.w	r5, [r8]
    1ebc:	6195      	str	r5, [r2, #24]
    1ebe:	f8d8 0000 	ldr.w	r0, [r8]
    1ec2:	61d0      	str	r0, [r2, #28]
    1ec4:	3220      	adds	r2, #32
    for ( i = 0; i < ui32NumWords; i++ )
    1ec6:	4594      	cmp	ip, r2
    1ec8:	d1e2      	bne.n	1e90 <am_hal_iom_int_service.part.20+0x254>
                    psBuffer->ui32BytesLeft -= ui32NumBytes;
    1eca:	68b1      	ldr	r1, [r6, #8]
                    psBuffer->pui32Data += (ui32NumBytes / 4);
    1ecc:	6872      	ldr	r2, [r6, #4]
                    psBuffer->ui32BytesLeft -= ui32NumBytes;
    1ece:	1bcc      	subs	r4, r1, r7
                    psBuffer->pui32Data += (ui32NumBytes / 4);
    1ed0:	4417      	add	r7, r2
                    psBuffer->ui32BytesLeft -= ui32NumBytes;
    1ed2:	60b4      	str	r4, [r6, #8]
                    psBuffer->pui32Data += (ui32NumBytes / 4);
    1ed4:	6077      	str	r7, [r6, #4]
                    AM_BFWn(IOMSTR, ui32Module, INTCLR, THR, 1);
    1ed6:	f8d8 7208 	ldr.w	r7, [r8, #520]	; 0x208
    1eda:	f047 0502 	orr.w	r5, r7, #2
    1ede:	f8c8 5208 	str.w	r5, [r8, #520]	; 0x208
    1ee2:	e76b      	b.n	1dbc <am_hal_iom_int_service.part.20+0x180>
    1ee4:	10001154 	.word	0x10001154
    1ee8:	10001544 	.word	0x10001544
    1eec:	1000114c 	.word	0x1000114c
    1ef0:	000053c0 	.word	0x000053c0
    1ef4:	000053ac 	.word	0x000053ac
            thresh = AM_BFRn(IOMSTR, ui32Module, FIFOTHR, FIFOWTHR);
    1ef8:	0324      	lsls	r4, r4, #12
    1efa:	6877      	ldr	r7, [r6, #4]
    1efc:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    1f00:	f504 7a02 	add.w	sl, r4, #520	; 0x208
    1f04:	f3c2 2b06 	ubfx	fp, r2, #8, #7
    1f08:	f504 798e 	add.w	r9, r4, #284	; 0x11c
    1f0c:	f504 7880 	add.w	r8, r4, #256	; 0x100
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    1f10:	f8d9 3000 	ldr.w	r3, [r9]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1f14:	f8d8 5000 	ldr.w	r5, [r8]
    1f18:	68b2      	ldr	r2, [r6, #8]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    1f1a:	f8d9 1000 	ldr.w	r1, [r9]
    1f1e:	f013 0f08 	tst.w	r3, #8
    1f22:	bf14      	ite	ne
    1f24:	2340      	movne	r3, #64	; 0x40
    1f26:	2380      	moveq	r3, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1f28:	1b58      	subs	r0, r3, r5
                ui32SpaceInFifo = am_hal_iom_fifo_empty_slots(ui32Module);
    1f2a:	f000 05fc 	and.w	r5, r0, #252	; 0xfc
    1f2e:	4295      	cmp	r5, r2
    1f30:	bf28      	it	cs
    1f32:	4615      	movcs	r5, r2
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1f34:	f8d8 3000 	ldr.w	r3, [r8]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    1f38:	f011 0f08 	tst.w	r1, #8
    1f3c:	bf14      	ite	ne
    1f3e:	2240      	movne	r2, #64	; 0x40
    1f40:	2280      	moveq	r2, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1f42:	1ad2      	subs	r2, r2, r3
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    1f44:	f002 01fc 	and.w	r1, r2, #252	; 0xfc
    1f48:	428d      	cmp	r5, r1
    1f4a:	d867      	bhi.n	201c <am_hal_iom_int_service.part.20+0x3e0>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1f4c:	2d00      	cmp	r5, #0
    1f4e:	d04d      	beq.n	1fec <am_hal_iom_int_service.part.20+0x3b0>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1f50:	463b      	mov	r3, r7
    1f52:	43fa      	mvns	r2, r7
    1f54:	f853 0b04 	ldr.w	r0, [r3], #4
    1f58:	6020      	str	r0, [r4, #0]
    1f5a:	443a      	add	r2, r7
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1f5c:	1bd8      	subs	r0, r3, r7
    1f5e:	442a      	add	r2, r5
    1f60:	4285      	cmp	r5, r0
    1f62:	f3c2 0182 	ubfx	r1, r2, #2, #3
    1f66:	d941      	bls.n	1fec <am_hal_iom_int_service.part.20+0x3b0>
    1f68:	b319      	cbz	r1, 1fb2 <am_hal_iom_int_service.part.20+0x376>
    1f6a:	2901      	cmp	r1, #1
    1f6c:	d01b      	beq.n	1fa6 <am_hal_iom_int_service.part.20+0x36a>
    1f6e:	2902      	cmp	r1, #2
    1f70:	d016      	beq.n	1fa0 <am_hal_iom_int_service.part.20+0x364>
    1f72:	2903      	cmp	r1, #3
    1f74:	d011      	beq.n	1f9a <am_hal_iom_int_service.part.20+0x35e>
    1f76:	2904      	cmp	r1, #4
    1f78:	d00c      	beq.n	1f94 <am_hal_iom_int_service.part.20+0x358>
    1f7a:	2905      	cmp	r1, #5
    1f7c:	d007      	beq.n	1f8e <am_hal_iom_int_service.part.20+0x352>
    1f7e:	2906      	cmp	r1, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1f80:	bf1c      	itt	ne
    1f82:	f853 1b04 	ldrne.w	r1, [r3], #4
    1f86:	6021      	strne	r1, [r4, #0]
    1f88:	f853 2b04 	ldr.w	r2, [r3], #4
    1f8c:	6022      	str	r2, [r4, #0]
    1f8e:	f853 0b04 	ldr.w	r0, [r3], #4
    1f92:	6020      	str	r0, [r4, #0]
    1f94:	f853 1b04 	ldr.w	r1, [r3], #4
    1f98:	6021      	str	r1, [r4, #0]
    1f9a:	f853 2b04 	ldr.w	r2, [r3], #4
    1f9e:	6022      	str	r2, [r4, #0]
    1fa0:	f853 0b04 	ldr.w	r0, [r3], #4
    1fa4:	6020      	str	r0, [r4, #0]
    1fa6:	f853 1b04 	ldr.w	r1, [r3], #4
    1faa:	6021      	str	r1, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1fac:	1bda      	subs	r2, r3, r7
    1fae:	4295      	cmp	r5, r2
    1fb0:	d91c      	bls.n	1fec <am_hal_iom_int_service.part.20+0x3b0>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1fb2:	469c      	mov	ip, r3
    1fb4:	3320      	adds	r3, #32
    1fb6:	f85c 0b04 	ldr.w	r0, [ip], #4
    1fba:	6020      	str	r0, [r4, #0]
    1fbc:	f853 1c1c 	ldr.w	r1, [r3, #-28]
    1fc0:	6021      	str	r1, [r4, #0]
    1fc2:	f8dc 2004 	ldr.w	r2, [ip, #4]
    1fc6:	6022      	str	r2, [r4, #0]
    1fc8:	f853 0c14 	ldr.w	r0, [r3, #-20]
    1fcc:	6020      	str	r0, [r4, #0]
    1fce:	f853 1c10 	ldr.w	r1, [r3, #-16]
    1fd2:	6021      	str	r1, [r4, #0]
    1fd4:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    1fd8:	6022      	str	r2, [r4, #0]
    1fda:	f853 0c08 	ldr.w	r0, [r3, #-8]
    1fde:	6020      	str	r0, [r4, #0]
    1fe0:	f853 1c04 	ldr.w	r1, [r3, #-4]
    1fe4:	6021      	str	r1, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1fe6:	1bda      	subs	r2, r3, r7
    1fe8:	4295      	cmp	r5, r2
    1fea:	d8e2      	bhi.n	1fb2 <am_hal_iom_int_service.part.20+0x376>
                AM_BFWn(IOMSTR, ui32Module, INTCLR, THR, 1);
    1fec:	f8da 7000 	ldr.w	r7, [sl]
    1ff0:	f047 0302 	orr.w	r3, r7, #2
    1ff4:	f8ca 3000 	str.w	r3, [sl]
                psBuffer->ui32BytesLeft -= ui32NumBytes;
    1ff8:	68b0      	ldr	r0, [r6, #8]
                psBuffer->pui32Data += (ui32NumBytes / 4);
    1ffa:	6877      	ldr	r7, [r6, #4]
    1ffc:	f025 0c03 	bic.w	ip, r5, #3
    2000:	4467      	add	r7, ip
                psBuffer->ui32BytesLeft -= ui32NumBytes;
    2002:	1b45      	subs	r5, r0, r5
    2004:	60b5      	str	r5, [r6, #8]
                psBuffer->pui32Data += (ui32NumBytes / 4);
    2006:	6077      	str	r7, [r6, #4]
                if ( 0 == psBuffer->ui32BytesLeft )
    2008:	2d00      	cmp	r5, #0
    200a:	f43f aeb4 	beq.w	1d76 <am_hal_iom_int_service.part.20+0x13a>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    200e:	f8d8 1000 	ldr.w	r1, [r8]
            } while ( am_hal_iom_fifo_full_slots(ui32Module) <= thresh );
    2012:	b2ca      	uxtb	r2, r1
    2014:	4593      	cmp	fp, r2
    2016:	f4bf af7b 	bcs.w	1f10 <am_hal_iom_int_service.part.20+0x2d4>
    201a:	e6ac      	b.n	1d76 <am_hal_iom_int_service.part.20+0x13a>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    201c:	4a4a      	ldr	r2, [pc, #296]	; (2148 <am_hal_iom_int_service.part.20+0x50c>)
    201e:	484b      	ldr	r0, [pc, #300]	; (214c <am_hal_iom_int_service.part.20+0x510>)
    2020:	f640 7145 	movw	r1, #3909	; 0xf45
    2024:	f7ff fb08 	bl	1638 <am_hal_debug_error>
    2028:	e792      	b.n	1f50 <am_hal_iom_int_service.part.20+0x314>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    202a:	f8da 2000 	ldr.w	r2, [sl]
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    202e:	b2d0      	uxtb	r0, r2
    2030:	4287      	cmp	r7, r0
    2032:	f67f aef4 	bls.w	1e1e <am_hal_iom_int_service.part.20+0x1e2>
    2036:	4a46      	ldr	r2, [pc, #280]	; (2150 <am_hal_iom_int_service.part.20+0x514>)
    2038:	4844      	ldr	r0, [pc, #272]	; (214c <am_hal_iom_int_service.part.20+0x510>)
    203a:	9301      	str	r3, [sp, #4]
    203c:	f44f 6178 	mov.w	r1, #3968	; 0xf80
    2040:	f7ff fafa 	bl	1638 <am_hal_debug_error>
    2044:	9b01      	ldr	r3, [sp, #4]
    2046:	e6ea      	b.n	1e1e <am_hal_iom_int_service.part.20+0x1e2>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    2048:	f8d8 b100 	ldr.w	fp, [r8, #256]	; 0x100
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    204c:	f8d8 311c 	ldr.w	r3, [r8, #284]	; 0x11c
            am_hal_iom_fifo_read(ui32Module, psBuffer->pui32Data, ui32NumBytes);
    2050:	f8d2 9004 	ldr.w	r9, [r2, #4]
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    2054:	071b      	lsls	r3, r3, #28
    2056:	fa5f fa8b 	uxtb.w	sl, fp
    205a:	d569      	bpl.n	2130 <am_hal_iom_int_service.part.20+0x4f4>
    for ( i = 0; i < ui32NumWords; i++ )
    205c:	ea5f 009a 	movs.w	r0, sl, lsr #2
    2060:	f00b 0203 	and.w	r2, fp, #3
    2064:	d058      	beq.n	2118 <am_hal_iom_int_service.part.20+0x4dc>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    2066:	464b      	mov	r3, r9
    2068:	f8d8 1000 	ldr.w	r1, [r8]
    206c:	f843 1b04 	str.w	r1, [r3], #4
    2070:	eb09 0e80 	add.w	lr, r9, r0, lsl #2
    2074:	ebae 0c09 	sub.w	ip, lr, r9
    2078:	f1ac 0b04 	sub.w	fp, ip, #4
    for ( i = 0; i < ui32NumWords; i++ )
    207c:	4573      	cmp	r3, lr
    207e:	f3cb 0182 	ubfx	r1, fp, #2, #3
    2082:	d049      	beq.n	2118 <am_hal_iom_int_service.part.20+0x4dc>
    2084:	b349      	cbz	r1, 20da <am_hal_iom_int_service.part.20+0x49e>
    2086:	2901      	cmp	r1, #1
    2088:	d021      	beq.n	20ce <am_hal_iom_int_service.part.20+0x492>
    208a:	2902      	cmp	r1, #2
    208c:	d01b      	beq.n	20c6 <am_hal_iom_int_service.part.20+0x48a>
    208e:	2903      	cmp	r1, #3
    2090:	d015      	beq.n	20be <am_hal_iom_int_service.part.20+0x482>
    2092:	2904      	cmp	r1, #4
    2094:	d00f      	beq.n	20b6 <am_hal_iom_int_service.part.20+0x47a>
    2096:	2905      	cmp	r1, #5
    2098:	d009      	beq.n	20ae <am_hal_iom_int_service.part.20+0x472>
    209a:	2906      	cmp	r1, #6
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    209c:	bf1c      	itt	ne
    209e:	f8d8 1000 	ldrne.w	r1, [r8]
    20a2:	f843 1b04 	strne.w	r1, [r3], #4
    20a6:	f8d8 1000 	ldr.w	r1, [r8]
    20aa:	f843 1b04 	str.w	r1, [r3], #4
    20ae:	f8d8 1000 	ldr.w	r1, [r8]
    20b2:	f843 1b04 	str.w	r1, [r3], #4
    20b6:	f8d8 1000 	ldr.w	r1, [r8]
    20ba:	f843 1b04 	str.w	r1, [r3], #4
    20be:	f8d8 1000 	ldr.w	r1, [r8]
    20c2:	f843 1b04 	str.w	r1, [r3], #4
    20c6:	f8d8 1000 	ldr.w	r1, [r8]
    20ca:	f843 1b04 	str.w	r1, [r3], #4
    20ce:	f8d8 1000 	ldr.w	r1, [r8]
    20d2:	f843 1b04 	str.w	r1, [r3], #4
    for ( i = 0; i < ui32NumWords; i++ )
    20d6:	4573      	cmp	r3, lr
    20d8:	d01e      	beq.n	2118 <am_hal_iom_int_service.part.20+0x4dc>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    20da:	469a      	mov	sl, r3
    20dc:	f8d8 c000 	ldr.w	ip, [r8]
    20e0:	f84a cb04 	str.w	ip, [sl], #4
    20e4:	f8d8 b000 	ldr.w	fp, [r8]
    20e8:	f8c3 b004 	str.w	fp, [r3, #4]
    20ec:	f8d8 c000 	ldr.w	ip, [r8]
    20f0:	f8ca c004 	str.w	ip, [sl, #4]
    20f4:	f8d8 1000 	ldr.w	r1, [r8]
    20f8:	60d9      	str	r1, [r3, #12]
    20fa:	f8d8 1000 	ldr.w	r1, [r8]
    20fe:	6119      	str	r1, [r3, #16]
    2100:	f8d8 1000 	ldr.w	r1, [r8]
    2104:	6159      	str	r1, [r3, #20]
    2106:	f8d8 1000 	ldr.w	r1, [r8]
    210a:	6199      	str	r1, [r3, #24]
    210c:	f8d8 1000 	ldr.w	r1, [r8]
    2110:	61d9      	str	r1, [r3, #28]
    2112:	3320      	adds	r3, #32
    for ( i = 0; i < ui32NumWords; i++ )
    2114:	4573      	cmp	r3, lr
    2116:	d1e0      	bne.n	20da <am_hal_iom_int_service.part.20+0x49e>
    if ( ui32Leftovers )
    2118:	b142      	cbz	r2, 212c <am_hal_iom_int_service.part.20+0x4f0>
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
    211a:	a904      	add	r1, sp, #16
    211c:	f8d8 3000 	ldr.w	r3, [r8]
    2120:	f841 3d04 	str.w	r3, [r1, #-4]!
    2124:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    2128:	f003 f878 	bl	521c <memcpy>
    212c:	5d2b      	ldrb	r3, [r5, r4]
    212e:	e5a8      	b.n	1c82 <am_hal_iom_int_service.part.20+0x46>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    2130:	f8d8 2100 	ldr.w	r2, [r8, #256]	; 0x100
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    2134:	b2d1      	uxtb	r1, r2
    2136:	458a      	cmp	sl, r1
    2138:	d990      	bls.n	205c <am_hal_iom_int_service.part.20+0x420>
    213a:	4a05      	ldr	r2, [pc, #20]	; (2150 <am_hal_iom_int_service.part.20+0x514>)
    213c:	4803      	ldr	r0, [pc, #12]	; (214c <am_hal_iom_int_service.part.20+0x510>)
    213e:	f44f 6178 	mov.w	r1, #3968	; 0xf80
    2142:	f7ff fa79 	bl	1638 <am_hal_debug_error>
    2146:	e789      	b.n	205c <am_hal_iom_int_service.part.20+0x420>
    2148:	00005378 	.word	0x00005378
    214c:	000053ac 	.word	0x000053ac
    2150:	000053c0 	.word	0x000053c0

00002154 <am_hal_iom_pwrctrl_enable>:
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    2154:	2805      	cmp	r0, #5
{
    2156:	b510      	push	{r4, lr}
    2158:	4604      	mov	r4, r0
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    215a:	d905      	bls.n	2168 <am_hal_iom_pwrctrl_enable+0x14>
    215c:	4a05      	ldr	r2, [pc, #20]	; (2174 <am_hal_iom_pwrctrl_enable+0x20>)
    215e:	4806      	ldr	r0, [pc, #24]	; (2178 <am_hal_iom_pwrctrl_enable+0x24>)
    2160:	f240 21d5 	movw	r1, #725	; 0x2d5
    2164:	f7ff fa68 	bl	1638 <am_hal_debug_error>
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_IOM0 << ui32Module);
    2168:	2002      	movs	r0, #2
    216a:	40a0      	lsls	r0, r4
}
    216c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_IOM0 << ui32Module);
    2170:	f001 bbfa 	b.w	3968 <am_hal_pwrctrl_periph_enable>
    2174:	000053f8 	.word	0x000053f8
    2178:	000053ac 	.word	0x000053ac

0000217c <am_hal_iom_enable>:
    if ( ui32Module < AM_REG_IOMSTR_NUM_MODULES )
    217c:	2805      	cmp	r0, #5
    217e:	d80f      	bhi.n	21a0 <am_hal_iom_enable+0x24>
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
    2180:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    2184:	3304      	adds	r3, #4
    2186:	031b      	lsls	r3, r3, #12
        g_bIomBusy[ui32Module] = false;
    2188:	4906      	ldr	r1, [pc, #24]	; (21a4 <am_hal_iom_enable+0x28>)
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
    218a:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
{
    218e:	b410      	push	{r4}
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
    2190:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
        g_bIomBusy[ui32Module] = false;
    2194:	2400      	movs	r4, #0
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
    2196:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        g_bIomBusy[ui32Module] = false;
    219a:	540c      	strb	r4, [r1, r0]
}
    219c:	f85d 4b04 	ldr.w	r4, [sp], #4
    21a0:	4770      	bx	lr
    21a2:	bf00      	nop
    21a4:	1000114c 	.word	0x1000114c

000021a8 <am_hal_iom_config>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    21a8:	2805      	cmp	r0, #5
    21aa:	f200 80e0 	bhi.w	236e <am_hal_iom_config+0x1c6>
{
    21ae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ( psConfig->bSPHA )
    21b2:	7a0d      	ldrb	r5, [r1, #8]
    ui32Config = psConfig->ui32InterfaceMode;
    21b4:	680b      	ldr	r3, [r1, #0]
    if ( psConfig->bSPHA )
    21b6:	b10d      	cbz	r5, 21bc <am_hal_iom_config+0x14>
        ui32Config |= AM_REG_IOMSTR_CFG_SPHA(1);
    21b8:	f043 0304 	orr.w	r3, r3, #4
    if ( psConfig->bSPOL )
    21bc:	7a4a      	ldrb	r2, [r1, #9]
    21be:	b10a      	cbz	r2, 21c4 <am_hal_iom_config+0x1c>
        ui32Config |= AM_REG_IOMSTR_CFG_SPOL(1);
    21c0:	f043 0302 	orr.w	r3, r3, #2
    if ( psConfig->ui32ClockFrequency >= 16000000UL)
    21c4:	684c      	ldr	r4, [r1, #4]
    21c6:	4e83      	ldr	r6, [pc, #524]	; (23d4 <am_hal_iom_config+0x22c>)
    AM_REGn(IOMSTR, ui32Module, CFG) = ui32Config;
    21c8:	f500 27a0 	add.w	r7, r0, #327680	; 0x50000
    21cc:	3704      	adds	r7, #4
    if ( psConfig->ui32ClockFrequency >= 16000000UL)
    21ce:	42b4      	cmp	r4, r6
    AM_REGn(IOMSTR, ui32Module, CFG) = ui32Config;
    21d0:	ea4f 3407 	mov.w	r4, r7, lsl #12
        ui32Config |= AM_REG_IOMSTR_CFG_STARTRD(2);
    21d4:	bf88      	it	hi
    21d6:	f043 0320 	orrhi.w	r3, r3, #32
    AM_REGn(IOMSTR, ui32Module, CFG) = ui32Config;
    21da:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(check_iom_threshold(psConfig->ui8WriteThreshold)) |
    21de:	7a8a      	ldrb	r2, [r1, #10]
         AM_REG_IOMSTR_FIFOTHR_FIFORTHR(check_iom_threshold(psConfig->ui8ReadThreshold)));
    21e0:	7acb      	ldrb	r3, [r1, #11]
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(check_iom_threshold(psConfig->ui8WriteThreshold)) |
    21e2:	2a7c      	cmp	r2, #124	; 0x7c
    21e4:	bf28      	it	cs
    21e6:	227c      	movcs	r2, #124	; 0x7c
    21e8:	2a04      	cmp	r2, #4
    21ea:	bf38      	it	cc
    21ec:	2204      	movcc	r2, #4
    21ee:	0216      	lsls	r6, r2, #8
         AM_REG_IOMSTR_FIFOTHR_FIFORTHR(check_iom_threshold(psConfig->ui8ReadThreshold)));
    21f0:	2b7c      	cmp	r3, #124	; 0x7c
    21f2:	bf28      	it	cs
    21f4:	237c      	movcs	r3, #124	; 0x7c
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(check_iom_threshold(psConfig->ui8WriteThreshold)) |
    21f6:	f406 47fe 	and.w	r7, r6, #32512	; 0x7f00
    21fa:	2b04      	cmp	r3, #4
    21fc:	bf2c      	ite	cs
    21fe:	ea47 0203 	orrcs.w	r2, r7, r3
    2202:	f047 0204 	orrcc.w	r2, r7, #4
    if ((0 != ui32Module) && (4 != ui32Module) && (6 != ui32Module) &&
    2206:	f030 0304 	bics.w	r3, r0, #4
    AM_REGn(IOMSTR, ui32Module, FIFOTHR) =
    220a:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    if ((0 != ui32Module) && (4 != ui32Module) && (6 != ui32Module) &&
    220e:	d005      	beq.n	221c <am_hal_iom_config+0x74>
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) ==
    2210:	4b71      	ldr	r3, [pc, #452]	; (23d8 <am_hal_iom_config+0x230>)
    2212:	681e      	ldr	r6, [r3, #0]
    2214:	b2f7      	uxtb	r7, r6
    2216:	2f22      	cmp	r7, #34	; 0x22
    2218:	f000 80ae 	beq.w	2378 <am_hal_iom_config+0x1d0>
      ui32ClkCfg = iom_get_interface_clock_cfg(psConfig->ui32ClockFrequency,
    221c:	f8d1 e004 	ldr.w	lr, [r1, #4]
    if ( ui32FreqHz == 0 )
    2220:	f1be 0f00 	cmp.w	lr, #0
    2224:	f000 8093 	beq.w	234e <am_hal_iom_config+0x1a6>
    i32Div = (ui32HFRCfreqHz / ui32FreqHz) + ((ui32HFRCfreqHz % ui32FreqHz) ? 1 : 0);    // Round up (ceiling)
    2228:	4b6c      	ldr	r3, [pc, #432]	; (23dc <am_hal_iom_config+0x234>)
    222a:	fbb3 f7fe 	udiv	r7, r3, lr
    222e:	fb0e 3617 	mls	r6, lr, r7, r3
    2232:	2e00      	cmp	r6, #0
    2234:	bf18      	it	ne
    2236:	3701      	addne	r7, #1
    i32N = 31 - AM_INSTR_CLZ((i32Div & (-i32Div)));
    2238:	427a      	negs	r2, r7
    223a:	403a      	ands	r2, r7
    223c:	fab2 f882 	clz	r8, r2
    2240:	f1c8 031f 	rsb	r3, r8, #31
    2244:	2b06      	cmp	r3, #6
    2246:	bfa8      	it	ge
    2248:	2306      	movge	r3, #6
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
    224a:	f5be 6f37 	cmp.w	lr, #2928	; 0xb70
    224e:	f240 808f 	bls.w	2370 <am_hal_iom_config+0x1c8>
    2252:	f5ae 0974 	sub.w	r9, lr, #15990784	; 0xf40000
    2256:	4e62      	ldr	r6, [pc, #392]	; (23e0 <am_hal_iom_config+0x238>)
    2258:	f5a9 5210 	sub.w	r2, r9, #9216	; 0x2400
    225c:	42b2      	cmp	r2, r6
    225e:	bf8b      	itete	hi
    2260:	f04f 0c00 	movhi.w	ip, #0
    2264:	f44f 6c00 	movls.w	ip, #2048	; 0x800
    2268:	2201      	movhi	r2, #1
    226a:	2203      	movls	r2, #3
    ui32Denom = ( 1 << i32N ) * ( 1 + (ui32Div3 * 2) );
    226c:	fa02 fa03 	lsl.w	sl, r2, r3
    ui32TotPer = i32Div / ui32Denom;
    2270:	fbb7 f6fa 	udiv	r6, r7, sl
    ui32TotPer += (i32Div % ui32Denom) ? 1 : 0;
    2274:	fb0a 7b16 	mls	fp, sl, r6, r7
    2278:	f1bb 0f00 	cmp.w	fp, #0
    227c:	bf18      	it	ne
    227e:	3601      	addne	r6, #1
    ui32v1 = 31 - AM_INSTR_CLZ(ui32TotPer);     // v1 = log2(TotPer)
    2280:	fab6 f886 	clz	r8, r6
    2284:	f1c8 091f 	rsb	r9, r8, #31
    ui32Fsel = (ui32v1 > 7) ? ui32v1 + i32N - 7 : i32N;
    2288:	f1b9 0f07 	cmp.w	r9, #7
    228c:	f240 808f 	bls.w	23ae <am_hal_iom_config+0x206>
    2290:	3b07      	subs	r3, #7
    2292:	444b      	add	r3, r9
    ui32Fsel++;
    2294:	f103 0b01 	add.w	fp, r3, #1
    if ( ui32Fsel > 7 )
    2298:	f1bb 0f07 	cmp.w	fp, #7
    229c:	d857      	bhi.n	234e <am_hal_iom_config+0x1a6>
        ui32TotPer = ui32TotPer>>(ui32v1-7);
    229e:	f1a9 0807 	sub.w	r8, r9, #7
        ui32TotPer += ((ui32DivEn) % (1 << (ui32v1 - 7))) ? 1 : 0;
    22a2:	f04f 0a01 	mov.w	sl, #1
    22a6:	fa0a f908 	lsl.w	r9, sl, r8
    22aa:	f109 3aff 	add.w	sl, r9, #4294967295
    22ae:	ea0a 0906 	and.w	r9, sl, r6
        ui32TotPer = ui32TotPer>>(ui32v1-7);
    22b2:	fa26 f608 	lsr.w	r6, r6, r8
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
    22b6:	f8df 814c 	ldr.w	r8, [pc, #332]	; 2404 <am_hal_iom_config+0x25c>
        ui32TotPer += ((ui32DivEn) % (1 << (ui32v1 - 7))) ? 1 : 0;
    22ba:	f1b9 0f00 	cmp.w	r9, #0
    22be:	bf18      	it	ne
    22c0:	3601      	addne	r6, #1
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
    22c2:	45c6      	cmp	lr, r8
    22c4:	d879      	bhi.n	23ba <am_hal_iom_config+0x212>
    22c6:	f04f 0e01 	mov.w	lr, #1
    22ca:	fa0e fa03 	lsl.w	sl, lr, r3
    22ce:	4557      	cmp	r7, sl
    22d0:	d073      	beq.n	23ba <am_hal_iom_config+0x212>
    22d2:	1e77      	subs	r7, r6, #1
    22d4:	46b1      	mov	r9, r6
    22d6:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
    if (ui32Phase == 1)
    22da:	2d00      	cmp	r5, #0
    22dc:	d173      	bne.n	23c6 <am_hal_iom_config+0x21e>
        ui32LowPer = (ui32TotPer - 1) / 2;          // Longer low phase
    22de:	087e      	lsrs	r6, r7, #1
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    22e0:	409a      	lsls	r2, r3
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    22e2:	4b3e      	ldr	r3, [pc, #248]	; (23dc <am_hal_iom_config+0x234>)
    if ( (ui32ClkFreq % 250000) == 0 )
    22e4:	f8df 8120 	ldr.w	r8, [pc, #288]	; 2408 <am_hal_iom_config+0x260>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    22e8:	fb09 f202 	mul.w	r2, r9, r2
    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
    22ec:	ea4f 250b 	mov.w	r5, fp, lsl #8
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    22f0:	fbb3 fbf2 	udiv	fp, r3, r2
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    22f4:	fb02 331b 	mls	r3, r2, fp, r3
    22f8:	0852      	lsrs	r2, r2, #1
    22fa:	429a      	cmp	r2, r3
    22fc:	bf2c      	ite	cs
    22fe:	465b      	movcs	r3, fp
    2300:	f10b 0301 	addcc.w	r3, fp, #1
    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
    2304:	f405 65e0 	and.w	r5, r5, #1792	; 0x700
    2308:	ea45 020c 	orr.w	r2, r5, ip
    if ( (ui32ClkFreq % 250000) == 0 )
    230c:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 240c <am_hal_iom_config+0x264>
    2310:	fba8 ba03 	umull	fp, sl, r8, r3
    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
    2314:	ea42 020e 	orr.w	r2, r2, lr
                 AM_REG_IOMSTR_CLKCFG_LOWPER(ui32LowPer)            |
    2318:	0436      	lsls	r6, r6, #16
    if ( (ui32ClkFreq % 250000) == 0 )
    231a:	ea4f 4e1a 	mov.w	lr, sl, lsr #16
    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
    231e:	ea42 6207 	orr.w	r2, r2, r7, lsl #24
                 AM_REG_IOMSTR_CLKCFG_LOWPER(ui32LowPer)            |
    2322:	f406 0c7f 	and.w	ip, r6, #16711680	; 0xff0000
    if ( (ui32ClkFreq % 250000) == 0 )
    2326:	fb09 371e 	mls	r7, r9, lr, r3
    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
    232a:	ea42 020c 	orr.w	r2, r2, ip
    if ( (ui32ClkFreq % 250000) == 0 )
    232e:	b93f      	cbnz	r7, 2340 <am_hal_iom_config+0x198>
    return ui32Value  &&  !(ui32Value & (ui32Value - 1));
    2330:	f1be 0f00 	cmp.w	lr, #0
    2334:	d004      	beq.n	2340 <am_hal_iom_config+0x198>
    2336:	f10e 33ff 	add.w	r3, lr, #4294967295
    233a:	ea13 0f0e 	tst.w	r3, lr
    233e:	d033      	beq.n	23a8 <am_hal_iom_config+0x200>
    return ( ((uint64_t)ui32ClkFreq) << 32) | (uint64_t)ui32ClkCfg;
    2340:	2500      	movs	r5, #0
    2342:	ea45 0602 	orr.w	r6, r5, r2
      ui32ClkCfg = iom_get_interface_clock_cfg(psConfig->ui32ClockFrequency,
    2346:	4637      	mov	r7, r6
    if ( ui32ClkCfg )
    2348:	b10e      	cbz	r6, 234e <am_hal_iom_config+0x1a6>
        AM_REGn(IOMSTR, ui32Module, CLKCFG) = (uint32_t)ui32ClkCfg;
    234a:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    234e:	468b      	mov	fp, r1
    2350:	4604      	mov	r4, r0
    ui32HFRC = am_hal_clkgen_sysclk_get();
    2352:	f7ff f957 	bl	1604 <am_hal_clkgen_sysclk_get>
    ui32StatusTimeout[ui32Module] = MAX_IOM_BITS * AM_HAL_IOM_MAX_FIFO_SIZE *
    2356:	4f23      	ldr	r7, [pc, #140]	; (23e4 <am_hal_iom_config+0x23c>)
      IOM_OVERHEAD_FACTOR * (ui32HFRC / psConfig->ui32ClockFrequency);
    2358:	f8db 1004 	ldr.w	r1, [fp, #4]
    235c:	fbb0 f0f1 	udiv	r0, r0, r1
    2360:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
    2364:	0216      	lsls	r6, r2, #8
    ui32StatusTimeout[ui32Module] = MAX_IOM_BITS * AM_HAL_IOM_MAX_FIFO_SIZE *
    2366:	f847 6024 	str.w	r6, [r7, r4, lsl #2]
    236a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    236e:	4770      	bx	lr
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
    2370:	f44f 6c00 	mov.w	ip, #2048	; 0x800
    2374:	2203      	movs	r2, #3
    2376:	e779      	b.n	226c <am_hal_iom_config+0xc4>
            isRevB2() && (AM_HAL_IOM_I2CMODE == psConfig->ui32InterfaceMode))
    2378:	680a      	ldr	r2, [r1, #0]
    237a:	2a00      	cmp	r2, #0
    237c:	f47f af4e 	bne.w	221c <am_hal_iom_config+0x74>
      AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_SPHA_M;
    2380:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
  if (ui32FreqHz == AM_HAL_IOM_800KHZ)
    2384:	4d18      	ldr	r5, [pc, #96]	; (23e8 <am_hal_iom_config+0x240>)
      AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_SPHA_M;
    2386:	f043 0204 	orr.w	r2, r3, #4
    238a:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
      ui32ClkCfg = iom_get_i2c_workaround_clock_cfg(psConfig->ui32ClockFrequency);
    238e:	684a      	ldr	r2, [r1, #4]
  if (ui32FreqHz == AM_HAL_IOM_800KHZ)
    2390:	42aa      	cmp	r2, r5
    2392:	d01b      	beq.n	23cc <am_hal_iom_config+0x224>
  else if (ui32FreqHz == AM_HAL_IOM_400KHZ)
    2394:	4e15      	ldr	r6, [pc, #84]	; (23ec <am_hal_iom_config+0x244>)
    2396:	42b2      	cmp	r2, r6
    2398:	d01a      	beq.n	23d0 <am_hal_iom_config+0x228>
  else if (ui32FreqHz == AM_HAL_IOM_200KHZ)
    239a:	4b15      	ldr	r3, [pc, #84]	; (23f0 <am_hal_iom_config+0x248>)
    239c:	4f15      	ldr	r7, [pc, #84]	; (23f4 <am_hal_iom_config+0x24c>)
    239e:	4d16      	ldr	r5, [pc, #88]	; (23f8 <am_hal_iom_config+0x250>)
    23a0:	429a      	cmp	r2, r3
    23a2:	bf08      	it	eq
    23a4:	462f      	moveq	r7, r5
    23a6:	e7d0      	b.n	234a <am_hal_iom_config+0x1a2>
            ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)    |
    23a8:	f445 6200 	orr.w	r2, r5, #2048	; 0x800
    23ac:	e7c8      	b.n	2340 <am_hal_iom_config+0x198>
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
    23ae:	f8df 8054 	ldr.w	r8, [pc, #84]	; 2404 <am_hal_iom_config+0x25c>
    23b2:	45c6      	cmp	lr, r8
    ui32Fsel++;
    23b4:	f103 0b01 	add.w	fp, r3, #1
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
    23b8:	d985      	bls.n	22c6 <am_hal_iom_config+0x11e>
    23ba:	1e77      	subs	r7, r6, #1
    23bc:	f04f 0901 	mov.w	r9, #1
    23c0:	f04f 0e00 	mov.w	lr, #0
    23c4:	e789      	b.n	22da <am_hal_iom_config+0x132>
        ui32LowPer = (ui32TotPer - 2) / 2;          // Longer high phase
    23c6:	1eb5      	subs	r5, r6, #2
    23c8:	086e      	lsrs	r6, r5, #1
    23ca:	e789      	b.n	22e0 <am_hal_iom_config+0x138>
  if (ui32FreqHz == AM_HAL_IOM_800KHZ)
    23cc:	4f0b      	ldr	r7, [pc, #44]	; (23fc <am_hal_iom_config+0x254>)
    23ce:	e7bc      	b.n	234a <am_hal_iom_config+0x1a2>
  else if (ui32FreqHz == AM_HAL_IOM_400KHZ)
    23d0:	4f0b      	ldr	r7, [pc, #44]	; (2400 <am_hal_iom_config+0x258>)
    23d2:	e7ba      	b.n	234a <am_hal_iom_config+0x1a2>
    23d4:	00f423ff 	.word	0x00f423ff
    23d8:	4002000c 	.word	0x4002000c
    23dc:	02dc6c00 	.word	0x02dc6c00
    23e0:	007a11ff 	.word	0x007a11ff
    23e4:	1000152c 	.word	0x1000152c
    23e8:	000c3500 	.word	0x000c3500
    23ec:	00061a80 	.word	0x00061a80
    23f0:	00030d40 	.word	0x00030d40
    23f4:	1d0e1500 	.word	0x1d0e1500
    23f8:	1d0e1400 	.word	0x1d0e1400
    23fc:	1d0e1200 	.word	0x1d0e1200
    2400:	1d0e1300 	.word	0x1d0e1300
    2404:	00b71aff 	.word	0x00b71aff
    2408:	431bde83 	.word	0x431bde83
    240c:	0003d090 	.word	0x0003d090

00002410 <am_hal_iom_workaround_word_write>:
{
    2410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, WORKAROUND_IOM, CFG, FULLDUP)) ?
    2414:	4cc9      	ldr	r4, [pc, #804]	; (273c <am_hal_iom_workaround_word_write+0x32c>)
    2416:	6825      	ldr	r5, [r4, #0]
{
    2418:	4691      	mov	r9, r2
                               AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    241a:	f015 0f08 	tst.w	r5, #8
{
    241e:	b08d      	sub	sp, #52	; 0x34
    am_hal_debug_assert_msg(ui32NumBytes <= 4091, "SPI transfer too big.");
    2420:	f640 72fb 	movw	r2, #4091	; 0xffb
                               AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2424:	bf14      	ite	ne
    2426:	2640      	movne	r6, #64	; 0x40
    2428:	2680      	moveq	r6, #128	; 0x80
    am_hal_debug_assert_msg(ui32NumBytes <= 4091, "SPI transfer too big.");
    242a:	4591      	cmp	r9, r2
{
    242c:	4604      	mov	r4, r0
    242e:	4688      	mov	r8, r1
    2430:	9301      	str	r3, [sp, #4]
    am_hal_debug_assert_msg(ui32NumBytes <= 4091, "SPI transfer too big.");
    2432:	f200 832b 	bhi.w	2a8c <am_hal_iom_workaround_word_write+0x67c>
    ui32ClkCfg = AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG);
    2436:	4bc2      	ldr	r3, [pc, #776]	; (2740 <am_hal_iom_workaround_word_write+0x330>)
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    2438:	4fc2      	ldr	r7, [pc, #776]	; (2744 <am_hal_iom_workaround_word_write+0x334>)
    ui32ClkCfg = AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG);
    243a:	681d      	ldr	r5, [r3, #0]
    uint32_t ui32ClkCfg = AM_REGn(IOMSTR, 4, CLKCFG);
    243c:	681a      	ldr	r2, [r3, #0]
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    243e:	49c2      	ldr	r1, [pc, #776]	; (2748 <am_hal_iom_workaround_word_write+0x338>)
    2440:	f3c2 3e00 	ubfx	lr, r2, #12, #1
    2444:	f3c2 20c0 	ubfx	r0, r2, #11, #1
    2448:	0e13      	lsrs	r3, r2, #24
    244a:	fb03 f30e 	mul.w	r3, r3, lr
    244e:	0040      	lsls	r0, r0, #1
    2450:	3001      	adds	r0, #1
    2452:	3301      	adds	r3, #1
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    2454:	fb03 fa00 	mul.w	sl, r3, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    2458:	ea4f 0c5a 	mov.w	ip, sl, lsr #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    245c:	fbb7 fbfa 	udiv	fp, r7, sl
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    2460:	fb0a 721b 	mls	r2, sl, fp, r7
    2464:	4594      	cmp	ip, r2
    2466:	bf2c      	ite	cs
    2468:	46de      	movcs	lr, fp
    246a:	f10b 0e01 	addcc.w	lr, fp, #1
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    246e:	458e      	cmp	lr, r1
    2470:	f240 835d 	bls.w	2b2e <am_hal_iom_workaround_word_write+0x71e>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    2474:	0040      	lsls	r0, r0, #1
    2476:	fb03 f300 	mul.w	r3, r3, r0
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    247a:	fbb7 faf3 	udiv	sl, r7, r3
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    247e:	fb03 771a 	mls	r7, r3, sl, r7
    2482:	085b      	lsrs	r3, r3, #1
    2484:	42bb      	cmp	r3, r7
    2486:	bf2c      	ite	cs
    2488:	4652      	movcs	r2, sl
    248a:	f10a 0201 	addcc.w	r2, sl, #1
    for ( ui32Fsel = 1; ui32Fsel < 8; ui32Fsel++ )
    248e:	428a      	cmp	r2, r1
    2490:	bf8c      	ite	hi
    2492:	f04f 0c03 	movhi.w	ip, #3
    2496:	f04f 0c02 	movls.w	ip, #2
    ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ,
    249a:	f3c5 21c0 	ubfx	r1, r5, #11, #1
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    249e:	0048      	lsls	r0, r1, #1
    ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ,
    24a0:	f3c5 2b02 	ubfx	fp, r5, #8, #3
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    24a4:	f10b 33ff 	add.w	r3, fp, #4294967295
    24a8:	1c47      	adds	r7, r0, #1
    ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ,
    24aa:	f3c5 3200 	ubfx	r2, r5, #12, #1
    24ae:	0e29      	lsrs	r1, r5, #24
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    24b0:	f8df b290 	ldr.w	fp, [pc, #656]	; 2744 <am_hal_iom_workaround_word_write+0x334>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    24b4:	fa07 f003 	lsl.w	r0, r7, r3
    24b8:	fb01 f102 	mul.w	r1, r1, r2
    24bc:	fb01 0300 	mla	r3, r1, r0, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    24c0:	0859      	lsrs	r1, r3, #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    24c2:	fbbb fef3 	udiv	lr, fp, r3
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    24c6:	fb03 b01e 	mls	r0, r3, lr, fp
    24ca:	4281      	cmp	r1, r0
    24cc:	bf2c      	ite	cs
    24ce:	4677      	movcs	r7, lr
    24d0:	f10e 0701 	addcc.w	r7, lr, #1
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32HiClkCfg;
    24d4:	4a9a      	ldr	r2, [pc, #616]	; (2740 <am_hal_iom_workaround_word_write+0x330>)
    ui32DelayTime = ((2 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32NormalFreq * 3));
    24d6:	499d      	ldr	r1, [pc, #628]	; (274c <am_hal_iom_workaround_word_write+0x33c>)
    ui32HiClkCfg = ((ui32ClkCfg & (~AM_REG_IOMSTR_CLKCFG_FSEL_M)) |
    24d8:	f425 6ae0 	bic.w	sl, r5, #1792	; 0x700
    ui32DelayTime = ((2 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32NormalFreq * 3));
    24dc:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    ui32HiClkCfg = ((ui32ClkCfg & (~AM_REG_IOMSTR_CLKCFG_FSEL_M)) |
    24e0:	ea4a 270c 	orr.w	r7, sl, ip, lsl #8
    ((void (*)(uint32_t)) 0x0800009d)(ui32DelayTime);
    24e4:	fbb1 f0f3 	udiv	r0, r1, r3
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32HiClkCfg;
    24e8:	6017      	str	r7, [r2, #0]
    ((void (*)(uint32_t)) 0x0800009d)(ui32DelayTime);
    24ea:	4b99      	ldr	r3, [pc, #612]	; (2750 <am_hal_iom_workaround_word_write+0x340>)
    24ec:	4798      	blx	r3
    ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ,
    24ee:	f3c7 22c0 	ubfx	r2, r7, #11, #1
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    24f2:	0050      	lsls	r0, r2, #1
    ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ,
    24f4:	f3c7 2c01 	ubfx	ip, r7, #8, #2
    24f8:	f3c7 3100 	ubfx	r1, r7, #12, #1
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    24fc:	3001      	adds	r0, #1
    24fe:	f10c 33ff 	add.w	r3, ip, #4294967295
    ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ,
    2502:	0e3f      	lsrs	r7, r7, #24
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    2504:	fb07 f701 	mul.w	r7, r7, r1
    2508:	4098      	lsls	r0, r3
    250a:	fb07 0000 	mla	r0, r7, r0, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    250e:	0842      	lsrs	r2, r0, #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    2510:	fbbb f7f0 	udiv	r7, fp, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    2514:	fb00 bb17 	mls	fp, r0, r7, fp
    2518:	455a      	cmp	r2, fp
    251a:	bf38      	it	cc
    251c:	3701      	addcc	r7, #1
    am_hal_debug_assert_msg(ui32HiFreq > 0, "Invalid Hi Frequency for IOM.");
    251e:	2f00      	cmp	r7, #0
    2520:	f000 82ad 	beq.w	2a7e <am_hal_iom_workaround_word_write+0x66e>
    uint32_t ui32ClkCfg = AM_REGn(IOMSTR, 4, CLKCFG);
    2524:	4b86      	ldr	r3, [pc, #536]	; (2740 <am_hal_iom_workaround_word_write+0x330>)
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    2526:	4a87      	ldr	r2, [pc, #540]	; (2744 <am_hal_iom_workaround_word_write+0x334>)
    uint32_t ui32ClkCfg = AM_REGn(IOMSTR, 4, CLKCFG);
    2528:	681b      	ldr	r3, [r3, #0]
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    252a:	f8df e234 	ldr.w	lr, [pc, #564]	; 2760 <am_hal_iom_workaround_word_write+0x350>
    252e:	f3c3 3000 	ubfx	r0, r3, #12, #1
    2532:	f3c3 21c0 	ubfx	r1, r3, #11, #1
    2536:	0e1b      	lsrs	r3, r3, #24
    2538:	fb03 f300 	mul.w	r3, r3, r0
    253c:	0049      	lsls	r1, r1, #1
    253e:	3101      	adds	r1, #1
    2540:	3301      	adds	r3, #1
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    2542:	fb03 f001 	mul.w	r0, r3, r1
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    2546:	ea4f 0b50 	mov.w	fp, r0, lsr #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    254a:	fbb2 fcf0 	udiv	ip, r2, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    254e:	fb00 201c 	mls	r0, r0, ip, r2
    2552:	4583      	cmp	fp, r0
    2554:	bf2c      	ite	cs
    2556:	46e3      	movcs	fp, ip
    2558:	f10c 0b01 	addcc.w	fp, ip, #1
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    255c:	45f3      	cmp	fp, lr
    255e:	f240 82e4 	bls.w	2b2a <am_hal_iom_workaround_word_write+0x71a>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    2562:	0048      	lsls	r0, r1, #1
    2564:	fb03 f000 	mul.w	r0, r3, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    2568:	ea4f 0b50 	mov.w	fp, r0, lsr #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    256c:	fbb2 fcf0 	udiv	ip, r2, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    2570:	fb00 201c 	mls	r0, r0, ip, r2
    2574:	4583      	cmp	fp, r0
    2576:	bf2c      	ite	cs
    2578:	46e3      	movcs	fp, ip
    257a:	f10c 0b01 	addcc.w	fp, ip, #1
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    257e:	45f3      	cmp	fp, lr
    2580:	f240 82d8 	bls.w	2b34 <am_hal_iom_workaround_word_write+0x724>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    2584:	0088      	lsls	r0, r1, #2
    2586:	fb03 f000 	mul.w	r0, r3, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    258a:	ea4f 0b50 	mov.w	fp, r0, lsr #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    258e:	fbb2 fcf0 	udiv	ip, r2, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    2592:	fb00 201c 	mls	r0, r0, ip, r2
    2596:	4583      	cmp	fp, r0
    2598:	bf2c      	ite	cs
    259a:	46e3      	movcs	fp, ip
    259c:	f10c 0b01 	addcc.w	fp, ip, #1
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    25a0:	45f3      	cmp	fp, lr
    25a2:	f240 82c9 	bls.w	2b38 <am_hal_iom_workaround_word_write+0x728>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    25a6:	00c8      	lsls	r0, r1, #3
    25a8:	fb03 f000 	mul.w	r0, r3, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    25ac:	ea4f 0b50 	mov.w	fp, r0, lsr #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    25b0:	fbb2 fcf0 	udiv	ip, r2, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    25b4:	fb00 201c 	mls	r0, r0, ip, r2
    25b8:	4583      	cmp	fp, r0
    25ba:	bf2c      	ite	cs
    25bc:	46e3      	movcs	fp, ip
    25be:	f10c 0b01 	addcc.w	fp, ip, #1
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    25c2:	45f3      	cmp	fp, lr
    25c4:	f240 82ba 	bls.w	2b3c <am_hal_iom_workaround_word_write+0x72c>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    25c8:	0108      	lsls	r0, r1, #4
    25ca:	fb03 f000 	mul.w	r0, r3, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    25ce:	ea4f 0b50 	mov.w	fp, r0, lsr #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    25d2:	fbb2 fcf0 	udiv	ip, r2, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    25d6:	fb00 201c 	mls	r0, r0, ip, r2
    25da:	4583      	cmp	fp, r0
    25dc:	bf2c      	ite	cs
    25de:	46e3      	movcs	fp, ip
    25e0:	f10c 0b01 	addcc.w	fp, ip, #1
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    25e4:	45f3      	cmp	fp, lr
    25e6:	f240 82ab 	bls.w	2b40 <am_hal_iom_workaround_word_write+0x730>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    25ea:	0149      	lsls	r1, r1, #5
    25ec:	fb03 f301 	mul.w	r3, r3, r1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    25f0:	fbb2 f0f3 	udiv	r0, r2, r3
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    25f4:	fb03 2210 	mls	r2, r3, r0, r2
    25f8:	085b      	lsrs	r3, r3, #1
    25fa:	4293      	cmp	r3, r2
    25fc:	bf2c      	ite	cs
    25fe:	4601      	movcs	r1, r0
    2600:	1c41      	addcc	r1, r0, #1
    for ( ui32Fsel = 1; ui32Fsel < 8; ui32Fsel++ )
    2602:	4571      	cmp	r1, lr
    2604:	bf8c      	ite	hi
    2606:	2007      	movhi	r0, #7
    2608:	2006      	movls	r0, #6
    if ( ui32Options & AM_HAL_IOM_RAW )
    260a:	9b01      	ldr	r3, [sp, #4]
    ui32LowClkCfg = ((ui32ClkCfg & (~AM_REG_IOMSTR_CLKCFG_FSEL_M)) |
    260c:	ea4a 2200 	orr.w	r2, sl, r0, lsl #8
    if ( ui32Options & AM_HAL_IOM_RAW )
    2610:	f013 4080 	ands.w	r0, r3, #1073741824	; 0x40000000
    ui32LowClkCfg = ((ui32ClkCfg & (~AM_REG_IOMSTR_CLKCFG_FSEL_M)) |
    2614:	9203      	str	r2, [sp, #12]
    if ( ui32Options & AM_HAL_IOM_RAW )
    2616:	f000 813d 	beq.w	2894 <am_hal_iom_workaround_word_write+0x484>
        if ( pui32Data[0] & 0x80 )
    261a:	f8d8 1000 	ldr.w	r1, [r8]
        ui32DelayTime = ((27 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32HiFreq * 3));
    261e:	4a4d      	ldr	r2, [pc, #308]	; (2754 <am_hal_iom_workaround_word_write+0x344>)
        if ( pui32Data[0] & 0x80 )
    2620:	f001 0380 	and.w	r3, r1, #128	; 0x80
            ui32FirstWord = 0x00000000;
    2624:	2b00      	cmp	r3, #0
        ui32DelayTime = ((27 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32HiFreq * 3));
    2626:	eb07 0047 	add.w	r0, r7, r7, lsl #1
    262a:	fbb2 f1f0 	udiv	r1, r2, r0
    262e:	9107      	str	r1, [sp, #28]
            ui32FirstWord = 0x00000000;
    2630:	bf0b      	itete	eq
    2632:	2100      	moveq	r1, #0
    2634:	2101      	movne	r1, #1
    2636:	f06f 07ff 	mvneq.w	r7, #255	; 0xff
    263a:	2700      	movne	r7, #0
    263c:	9106      	str	r1, [sp, #24]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    263e:	4b3f      	ldr	r3, [pc, #252]	; (273c <am_hal_iom_workaround_word_write+0x32c>)
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    2640:	4a45      	ldr	r2, [pc, #276]	; (2758 <am_hal_iom_workaround_word_write+0x348>)
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2642:	6818      	ldr	r0, [r3, #0]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    2644:	6813      	ldr	r3, [r2, #0]
    ui32NumBytes += 4;
    2646:	f109 0104 	add.w	r1, r9, #4
    ui32TransferSize = (ui32NumBytes <= ui32MaxFifoSize ? ui32NumBytes :
    264a:	428e      	cmp	r6, r1
    264c:	bf28      	it	cs
    264e:	460e      	movcs	r6, r1
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2650:	f010 0f08 	tst.w	r0, #8
    2654:	bf14      	ite	ne
    2656:	2040      	movne	r0, #64	; 0x40
    2658:	2080      	moveq	r0, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    265a:	1ac2      	subs	r2, r0, r3
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    265c:	f002 00fc 	and.w	r0, r2, #252	; 0xfc
    2660:	2803      	cmp	r0, #3
    ui32NumBytes += 4;
    2662:	9104      	str	r1, [sp, #16]
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2664:	f240 8204 	bls.w	2a70 <am_hal_iom_workaround_word_write+0x660>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2668:	493c      	ldr	r1, [pc, #240]	; (275c <am_hal_iom_workaround_word_write+0x34c>)
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    266a:	4b34      	ldr	r3, [pc, #208]	; (273c <am_hal_iom_workaround_word_write+0x32c>)
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    266c:	600f      	str	r7, [r1, #0]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    266e:	681f      	ldr	r7, [r3, #0]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    2670:	f853 2c1c 	ldr.w	r2, [r3, #-28]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2674:	f017 0f08 	tst.w	r7, #8
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    2678:	f1a3 001c 	sub.w	r0, r3, #28
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    267c:	bf14      	ite	ne
    267e:	2040      	movne	r0, #64	; 0x40
    2680:	2080      	moveq	r0, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    2682:	1a81      	subs	r1, r0, r2
    am_hal_iom_fifo_write(WORKAROUND_IOM, pui32Data, ui32TransferSize - 4);
    2684:	3e04      	subs	r6, #4
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2686:	f001 09fc 	and.w	r9, r1, #252	; 0xfc
    268a:	454e      	cmp	r6, r9
    268c:	f200 81e9 	bhi.w	2a62 <am_hal_iom_workaround_word_write+0x652>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    2690:	2e00      	cmp	r6, #0
    2692:	d067      	beq.n	2764 <am_hal_iom_workaround_word_write+0x354>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2694:	4643      	mov	r3, r8
    2696:	ea6f 0c08 	mvn.w	ip, r8
    269a:	f853 7b04 	ldr.w	r7, [r3], #4
    269e:	4a2f      	ldr	r2, [pc, #188]	; (275c <am_hal_iom_workaround_word_write+0x34c>)
    26a0:	44c4      	add	ip, r8
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    26a2:	eba3 0b08 	sub.w	fp, r3, r8
    26a6:	44b4      	add	ip, r6
    26a8:	455e      	cmp	r6, fp
    26aa:	f3cc 0082 	ubfx	r0, ip, #2, #3
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    26ae:	6017      	str	r7, [r2, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    26b0:	d958      	bls.n	2764 <am_hal_iom_workaround_word_write+0x354>
    26b2:	b320      	cbz	r0, 26fe <am_hal_iom_workaround_word_write+0x2ee>
    26b4:	2801      	cmp	r0, #1
    26b6:	d01b      	beq.n	26f0 <am_hal_iom_workaround_word_write+0x2e0>
    26b8:	2802      	cmp	r0, #2
    26ba:	d016      	beq.n	26ea <am_hal_iom_workaround_word_write+0x2da>
    26bc:	2803      	cmp	r0, #3
    26be:	d011      	beq.n	26e4 <am_hal_iom_workaround_word_write+0x2d4>
    26c0:	2804      	cmp	r0, #4
    26c2:	d00c      	beq.n	26de <am_hal_iom_workaround_word_write+0x2ce>
    26c4:	2805      	cmp	r0, #5
    26c6:	d007      	beq.n	26d8 <am_hal_iom_workaround_word_write+0x2c8>
    26c8:	2806      	cmp	r0, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    26ca:	bf1c      	itt	ne
    26cc:	f853 0b04 	ldrne.w	r0, [r3], #4
    26d0:	6010      	strne	r0, [r2, #0]
    26d2:	f853 1b04 	ldr.w	r1, [r3], #4
    26d6:	6011      	str	r1, [r2, #0]
    26d8:	f853 7b04 	ldr.w	r7, [r3], #4
    26dc:	6017      	str	r7, [r2, #0]
    26de:	f853 0b04 	ldr.w	r0, [r3], #4
    26e2:	6010      	str	r0, [r2, #0]
    26e4:	f853 1b04 	ldr.w	r1, [r3], #4
    26e8:	6011      	str	r1, [r2, #0]
    26ea:	f853 7b04 	ldr.w	r7, [r3], #4
    26ee:	6017      	str	r7, [r2, #0]
    26f0:	f853 0b04 	ldr.w	r0, [r3], #4
    26f4:	6010      	str	r0, [r2, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    26f6:	eba3 0a08 	sub.w	sl, r3, r8
    26fa:	4556      	cmp	r6, sl
    26fc:	d932      	bls.n	2764 <am_hal_iom_workaround_word_write+0x354>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    26fe:	469e      	mov	lr, r3
    2700:	3320      	adds	r3, #32
    2702:	f85e 1b04 	ldr.w	r1, [lr], #4
    2706:	6011      	str	r1, [r2, #0]
    2708:	f853 7c1c 	ldr.w	r7, [r3, #-28]
    270c:	6017      	str	r7, [r2, #0]
    270e:	f8de 0004 	ldr.w	r0, [lr, #4]
    2712:	6010      	str	r0, [r2, #0]
    2714:	f853 1c14 	ldr.w	r1, [r3, #-20]
    2718:	6011      	str	r1, [r2, #0]
    271a:	f853 7c10 	ldr.w	r7, [r3, #-16]
    271e:	6017      	str	r7, [r2, #0]
    2720:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    2724:	6010      	str	r0, [r2, #0]
    2726:	f853 1c08 	ldr.w	r1, [r3, #-8]
    272a:	6011      	str	r1, [r2, #0]
    272c:	f853 7c04 	ldr.w	r7, [r3, #-4]
    2730:	6017      	str	r7, [r2, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    2732:	eba3 0008 	sub.w	r0, r3, r8
    2736:	4286      	cmp	r6, r0
    2738:	d8e1      	bhi.n	26fe <am_hal_iom_workaround_word_write+0x2ee>
    273a:	e013      	b.n	2764 <am_hal_iom_workaround_word_write+0x354>
    273c:	5000811c 	.word	0x5000811c
    2740:	5000810c 	.word	0x5000810c
    2744:	02dc6c00 	.word	0x02dc6c00
    2748:	00f42400 	.word	0x00f42400
    274c:	05b8d800 	.word	0x05b8d800
    2750:	0800009d 	.word	0x0800009d
    2754:	4d3f6400 	.word	0x4d3f6400
    2758:	50008100 	.word	0x50008100
    275c:	50008000 	.word	0x50008000
    2760:	000f4240 	.word	0x000f4240
        if ( g_IOMPads[index].channel == ui32ChipSelect )
    2764:	2c00      	cmp	r4, #0
    2766:	f000 8198 	beq.w	2a9a <am_hal_iom_workaround_word_write+0x68a>
    276a:	2c01      	cmp	r4, #1
    276c:	f000 80a3 	beq.w	28b6 <am_hal_iom_workaround_word_write+0x4a6>
    2770:	2c02      	cmp	r4, #2
    2772:	f000 80b8 	beq.w	28e6 <am_hal_iom_workaround_word_write+0x4d6>
    2776:	2c03      	cmp	r4, #3
    2778:	f000 80c6 	beq.w	2908 <am_hal_iom_workaround_word_write+0x4f8>
    277c:	2c04      	cmp	r4, #4
    277e:	f000 811e 	beq.w	29be <am_hal_iom_workaround_word_write+0x5ae>
    2782:	2c05      	cmp	r4, #5
    2784:	f000 8133 	beq.w	29ee <am_hal_iom_workaround_word_write+0x5de>
    2788:	2c06      	cmp	r4, #6
    278a:	f000 8148 	beq.w	2a1e <am_hal_iom_workaround_word_write+0x60e>
    278e:	2c07      	cmp	r4, #7
    2790:	f000 8156 	beq.w	2a40 <am_hal_iom_workaround_word_write+0x630>
    am_hal_debug_assert(0xDEADBEEF != ui32IOMGPIO);
    2794:	2200      	movs	r2, #0
    2796:	48cc      	ldr	r0, [pc, #816]	; (2ac8 <am_hal_iom_workaround_word_write+0x6b8>)
    ui32CSPadregVal = *pui32CSPadreg;
    2798:	4fcc      	ldr	r7, [pc, #816]	; (2acc <am_hal_iom_workaround_word_write+0x6bc>)
    am_hal_debug_assert(0xDEADBEEF != ui32IOMGPIO);
    279a:	f240 512d 	movw	r1, #1325	; 0x52d
    279e:	f7fe ff4b 	bl	1638 <am_hal_debug_error>
    am_hal_gpio_out_bit_set(ui32IOMGPIO);
    27a2:	48cb      	ldr	r0, [pc, #812]	; (2ad0 <am_hal_iom_workaround_word_write+0x6c0>)
    ui32CSPadregVal = *pui32CSPadreg;
    27a4:	683a      	ldr	r2, [r7, #0]
    27a6:	9202      	str	r2, [sp, #8]
    am_hal_gpio_out_bit_set(ui32IOMGPIO);
    27a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    pui32CSPadreg = (volatile uint32_t *)AM_HAL_GPIO_PADREG(ui32IOMGPIO);
    27ac:	46bb      	mov	fp, r7
    am_hal_gpio_out_bit_set(ui32IOMGPIO);
    27ae:	6003      	str	r3, [r0, #0]
    am_hal_gpio_pin_config(WORKAROUND_IOM_MOSI_PIN, WORKAROUND_IOM_MOSI_CFG | AM_HAL_PIN_DIR_INPUT);
    27b0:	f7ff f816 	bl	17e0 <am_hal_interrupt_master_disable>
    27b4:	4ec7      	ldr	r6, [pc, #796]	; (2ad4 <am_hal_iom_workaround_word_write+0x6c4>)
    27b6:	f8df 9360 	ldr.w	r9, [pc, #864]	; 2b18 <am_hal_iom_workaround_word_write+0x708>
    27ba:	900a      	str	r0, [sp, #40]	; 0x28
    27bc:	2173      	movs	r1, #115	; 0x73
    27be:	6031      	str	r1, [r6, #0]
    27c0:	f8d9 0000 	ldr.w	r0, [r9]
    27c4:	f8df 8354 	ldr.w	r8, [pc, #852]	; 2b1c <am_hal_iom_workaround_word_write+0x70c>
    27c8:	9105      	str	r1, [sp, #20]
    27ca:	f420 22e0 	bic.w	r2, r0, #458752	; 0x70000
    27ce:	f8c9 2000 	str.w	r2, [r9]
    27d2:	f8d8 3000 	ldr.w	r3, [r8]
    27d6:	4fc0      	ldr	r7, [pc, #768]	; (2ad8 <am_hal_iom_workaround_word_write+0x6c8>)
    27d8:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    27dc:	f041 002a 	orr.w	r0, r1, #42	; 0x2a
    27e0:	f8c8 0000 	str.w	r0, [r8]
    27e4:	683a      	ldr	r2, [r7, #0]
    27e6:	f04f 0a00 	mov.w	sl, #0
    27ea:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
    27ee:	603b      	str	r3, [r7, #0]
    27f0:	f8c6 a000 	str.w	sl, [r6]
    27f4:	980a      	ldr	r0, [sp, #40]	; 0x28
    27f6:	f7fe fff7 	bl	17e8 <am_hal_interrupt_master_set>
    ui32Command |= ui32Options & 0x5C00FF00;
    27fa:	9901      	ldr	r1, [sp, #4]
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    27fc:	0424      	lsls	r4, r4, #16
    27fe:	f404 20e0 	and.w	r0, r4, #458752	; 0x70000
    ui32Command |= ui32Options & 0x5C00FF00;
    2802:	f021 4323 	bic.w	r3, r1, #2734686208	; 0xa3000000
    ui32Command |= (ui32NumBytes & 0xFF);
    2806:	9904      	ldr	r1, [sp, #16]
    ui32Command |= ui32Options & 0x5C00FF00;
    2808:	f003 24ff 	and.w	r4, r3, #4278255360	; 0xff00ff00
    280c:	f040 4280 	orr.w	r2, r0, #1073741824	; 0x40000000
    2810:	4322      	orrs	r2, r4
    ui32Command |= (ui32NumBytes & 0xFF);
    2812:	b2c8      	uxtb	r0, r1
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    2814:	03cc      	lsls	r4, r1, #15
    AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    2816:	9b05      	ldr	r3, [sp, #20]
    2818:	6033      	str	r3, [r6, #0]
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    281a:	f004 61f0 	and.w	r1, r4, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
    281e:	4302      	orrs	r2, r0
    2820:	430a      	orrs	r2, r1
    AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    2822:	9305      	str	r3, [sp, #20]
    ui32Command |= ui32Options & 0x5C00FF00;
    2824:	9204      	str	r2, [sp, #16]
    ui32Critical = am_hal_interrupt_master_disable();
    2826:	f7fe ffdb 	bl	17e0 <am_hal_interrupt_master_disable>
    282a:	9001      	str	r0, [sp, #4]
    AM_REGn(IOMSTR, WORKAROUND_IOM, CMD) = ui32Command;
    282c:	48ab      	ldr	r0, [pc, #684]	; (2adc <am_hal_iom_workaround_word_write+0x6cc>)
    282e:	9a04      	ldr	r2, [sp, #16]
    2830:	6002      	str	r2, [r0, #0]
    ((void (*)(uint32_t)) 0x0800009d)(ui32DelayTime);
    2832:	4cab      	ldr	r4, [pc, #684]	; (2ae0 <am_hal_iom_workaround_word_write+0x6d0>)
    2834:	9807      	ldr	r0, [sp, #28]
    2836:	47a0      	blx	r4
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32LowClkCfg;
    2838:	4baa      	ldr	r3, [pc, #680]	; (2ae4 <am_hal_iom_workaround_word_write+0x6d4>)
    283a:	9c03      	ldr	r4, [sp, #12]
    iom_workaround_loop(ui32CSPadregVal, pui32CSPadreg, bRising);
    283c:	9a06      	ldr	r2, [sp, #24]
    283e:	9802      	ldr	r0, [sp, #8]
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32LowClkCfg;
    2840:	601c      	str	r4, [r3, #0]
    iom_workaround_loop(ui32CSPadregVal, pui32CSPadreg, bRising);
    2842:	4659      	mov	r1, fp
    2844:	f7fe ffd4 	bl	17f0 <iom_workaround_loop>
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32ClkCfg;
    2848:	49a6      	ldr	r1, [pc, #664]	; (2ae4 <am_hal_iom_workaround_word_write+0x6d4>)
    284a:	600d      	str	r5, [r1, #0]
    am_hal_gpio_pin_config(WORKAROUND_IOM_MOSI_PIN, WORKAROUND_IOM_MOSI_CFG);
    284c:	f7fe ffc8 	bl	17e0 <am_hal_interrupt_master_disable>
    2850:	9d05      	ldr	r5, [sp, #20]
    2852:	900b      	str	r0, [sp, #44]	; 0x2c
    2854:	6035      	str	r5, [r6, #0]
    2856:	f8d9 0000 	ldr.w	r0, [r9]
    285a:	f420 22e0 	bic.w	r2, r0, #458752	; 0x70000
    285e:	f8c9 2000 	str.w	r2, [r9]
    2862:	f8d8 3000 	ldr.w	r3, [r8]
    2866:	f023 04ff 	bic.w	r4, r3, #255	; 0xff
    286a:	f044 0128 	orr.w	r1, r4, #40	; 0x28
    286e:	f8c8 1000 	str.w	r1, [r8]
    2872:	683d      	ldr	r5, [r7, #0]
    2874:	f025 00ff 	bic.w	r0, r5, #255	; 0xff
    2878:	6038      	str	r0, [r7, #0]
    287a:	f8c6 a000 	str.w	sl, [r6]
    287e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2880:	f7fe ffb2 	bl	17e8 <am_hal_interrupt_master_set>
    am_hal_interrupt_master_set(ui32Critical);
    2884:	9801      	ldr	r0, [sp, #4]
    2886:	f7fe ffaf 	bl	17e8 <am_hal_interrupt_master_set>
    AM_REGn(GPIO, 0, PADKEY) = 0;
    288a:	f8c6 a000 	str.w	sl, [r6]
}
    288e:	b00d      	add	sp, #52	; 0x34
    2890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ui32FirstWord = ((ui32Options & 0xFF00) << 16);
    2894:	041a      	lsls	r2, r3, #16
        ui32DelayTime = ((19 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32HiFreq * 3));
    2896:	eb07 0a47 	add.w	sl, r7, r7, lsl #1
    289a:	4f93      	ldr	r7, [pc, #588]	; (2ae8 <am_hal_iom_workaround_word_write+0x6d8>)
    289c:	fbb7 f1fa 	udiv	r1, r7, sl
        if ( ui32FirstWord & 0x80000000 )
    28a0:	f012 477f 	ands.w	r7, r2, #4278190080	; 0xff000000
        ui32DelayTime = ((19 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32HiFreq * 3));
    28a4:	9107      	str	r1, [sp, #28]
        if ( ui32FirstWord & 0x80000000 )
    28a6:	f100 813d 	bmi.w	2b24 <am_hal_iom_workaround_word_write+0x714>
            ui32FirstWord |= 0x00FFFF00;
    28aa:	f447 037f 	orr.w	r3, r7, #16711680	; 0xff0000
    28ae:	f443 477f 	orr.w	r7, r3, #65280	; 0xff00
            bRising = false;
    28b2:	9006      	str	r0, [sp, #24]
    28b4:	e6c3      	b.n	263e <am_hal_iom_workaround_word_write+0x22e>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    28b6:	4a8d      	ldr	r2, [pc, #564]	; (2aec <am_hal_iom_workaround_word_write+0x6dc>)
    28b8:	6813      	ldr	r3, [r2, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    28ba:	f3c3 46c2 	ubfx	r6, r3, #19, #3
    28be:	2e04      	cmp	r6, #4
    28c0:	f000 814a 	beq.w	2b58 <am_hal_iom_workaround_word_write+0x748>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    28c4:	3214      	adds	r2, #20
    28c6:	6811      	ldr	r1, [r2, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    28c8:	f3c1 27c2 	ubfx	r7, r1, #11, #3
    28cc:	2f05      	cmp	r7, #5
    28ce:	f47f af61 	bne.w	2794 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    28d2:	f04f 0825 	mov.w	r8, #37	; 0x25
    28d6:	4693      	mov	fp, r2
    28d8:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    28da:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    28de:	f04f 0a08 	mov.w	sl, #8
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    28e2:	2624      	movs	r6, #36	; 0x24
    28e4:	e027      	b.n	2936 <am_hal_iom_workaround_word_write+0x526>
    28e6:	4982      	ldr	r1, [pc, #520]	; (2af0 <am_hal_iom_workaround_word_write+0x6e0>)
    28e8:	680f      	ldr	r7, [r1, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    28ea:	f3c7 20c2 	ubfx	r0, r7, #11, #3
    28ee:	2806      	cmp	r0, #6
    28f0:	f47f af50 	bne.w	2794 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    28f4:	f04f 0829 	mov.w	r8, #41	; 0x29
    28f8:	468b      	mov	fp, r1
    28fa:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    28fc:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    2900:	f04f 0a08 	mov.w	sl, #8
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2904:	2628      	movs	r6, #40	; 0x28
    2906:	e016      	b.n	2936 <am_hal_iom_workaround_word_write+0x526>
    2908:	4f78      	ldr	r7, [pc, #480]	; (2aec <am_hal_iom_workaround_word_write+0x6dc>)
    290a:	6838      	ldr	r0, [r7, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    290c:	f3c0 22c2 	ubfx	r2, r0, #11, #3
    2910:	2a04      	cmp	r2, #4
    2912:	f000 812b 	beq.w	2b6c <am_hal_iom_workaround_word_write+0x75c>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2916:	371c      	adds	r7, #28
    2918:	683b      	ldr	r3, [r7, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    291a:	f3c3 26c2 	ubfx	r6, r3, #11, #3
    291e:	2e04      	cmp	r6, #4
    2920:	f47f af38 	bne.w	2794 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2924:	f04f 082d 	mov.w	r8, #45	; 0x2d
    2928:	46bb      	mov	fp, r7
    292a:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    292c:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    2930:	f04f 0a08 	mov.w	sl, #8
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2934:	262c      	movs	r6, #44	; 0x2c
    am_hal_gpio_out_bit_set(ui32IOMGPIO);
    2936:	ea4f 01d8 	mov.w	r1, r8, lsr #3
    293a:	f001 0e04 	and.w	lr, r1, #4
    293e:	f00c 001f 	and.w	r0, ip, #31
    2942:	4b6c      	ldr	r3, [pc, #432]	; (2af4 <am_hal_iom_workaround_word_write+0x6e4>)
    ui32CSPadregVal = *pui32CSPadreg;
    2944:	f8db 7000 	ldr.w	r7, [fp]
    2948:	9702      	str	r7, [sp, #8]
    am_hal_gpio_out_bit_set(ui32IOMGPIO);
    294a:	2201      	movs	r2, #1
    294c:	4082      	lsls	r2, r0
    294e:	f84e 2003 	str.w	r2, [lr, r3]
    am_hal_gpio_pin_config(ui32IOMGPIO, AM_HAL_GPIO_OUTPUT);
    2952:	f7fe ff45 	bl	17e0 <am_hal_interrupt_master_disable>
    2956:	4f5f      	ldr	r7, [pc, #380]	; (2ad4 <am_hal_iom_workaround_word_write+0x6c4>)
    2958:	9009      	str	r0, [sp, #36]	; 0x24
    295a:	ea4f 0c58 	mov.w	ip, r8, lsr #1
    295e:	f00c 017c 	and.w	r1, ip, #124	; 0x7c
    2962:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 2b20 <am_hal_iom_workaround_word_write+0x710>
    2966:	2073      	movs	r0, #115	; 0x73
    2968:	6038      	str	r0, [r7, #0]
    296a:	ea4f 0288 	mov.w	r2, r8, lsl #2
    296e:	f002 031c 	and.w	r3, r2, #28
    2972:	f851 800e 	ldr.w	r8, [r1, lr]
    2976:	4860      	ldr	r0, [pc, #384]	; (2af8 <am_hal_iom_workaround_word_write+0x6e8>)
    2978:	2207      	movs	r2, #7
    297a:	409a      	lsls	r2, r3
    297c:	f04f 0c02 	mov.w	ip, #2
    2980:	ea28 0202 	bic.w	r2, r8, r2
    2984:	fa0c f303 	lsl.w	r3, ip, r3
    2988:	4313      	orrs	r3, r2
    298a:	f841 300e 	str.w	r3, [r1, lr]
    298e:	f8db 1000 	ldr.w	r1, [fp]
    2992:	ea6f 0909 	mvn.w	r9, r9
    2996:	f04f 0e18 	mov.w	lr, #24
    299a:	ea01 0809 	and.w	r8, r1, r9
    299e:	fa0e f20a 	lsl.w	r2, lr, sl
    29a2:	ea42 0308 	orr.w	r3, r2, r8
    29a6:	f8cb 3000 	str.w	r3, [fp]
    29aa:	5831      	ldr	r1, [r6, r0]
    29ac:	2200      	movs	r2, #0
    29ae:	ea09 0301 	and.w	r3, r9, r1
    29b2:	5033      	str	r3, [r6, r0]
    29b4:	603a      	str	r2, [r7, #0]
    29b6:	9809      	ldr	r0, [sp, #36]	; 0x24
    29b8:	f7fe ff16 	bl	17e8 <am_hal_interrupt_master_set>
    29bc:	e6f8      	b.n	27b0 <am_hal_iom_workaround_word_write+0x3a0>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    29be:	484f      	ldr	r0, [pc, #316]	; (2afc <am_hal_iom_workaround_word_write+0x6ec>)
    29c0:	6802      	ldr	r2, [r0, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    29c2:	f3c2 43c2 	ubfx	r3, r2, #19, #3
    29c6:	2b06      	cmp	r3, #6
    29c8:	f000 80da 	beq.w	2b80 <am_hal_iom_workaround_word_write+0x770>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    29cc:	3024      	adds	r0, #36	; 0x24
    29ce:	6806      	ldr	r6, [r0, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    29d0:	f3c6 41c2 	ubfx	r1, r6, #19, #3
    29d4:	2906      	cmp	r1, #6
    29d6:	f47f aedd 	bne.w	2794 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    29da:	f04f 082e 	mov.w	r8, #46	; 0x2e
    29de:	4683      	mov	fp, r0
    29e0:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    29e2:	f44f 097f 	mov.w	r9, #16711680	; 0xff0000
    29e6:	f04f 0a10 	mov.w	sl, #16
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    29ea:	262c      	movs	r6, #44	; 0x2c
    29ec:	e7a3      	b.n	2936 <am_hal_iom_workaround_word_write+0x526>
    29ee:	4a43      	ldr	r2, [pc, #268]	; (2afc <am_hal_iom_workaround_word_write+0x6ec>)
    29f0:	6813      	ldr	r3, [r2, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    29f2:	f3c3 26c2 	ubfx	r6, r3, #11, #3
    29f6:	2e04      	cmp	r6, #4
    29f8:	f000 80cc 	beq.w	2b94 <am_hal_iom_workaround_word_write+0x784>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    29fc:	3224      	adds	r2, #36	; 0x24
    29fe:	6811      	ldr	r1, [r2, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    2a00:	f3c1 67c2 	ubfx	r7, r1, #27, #3
    2a04:	2f06      	cmp	r7, #6
    2a06:	f47f aec5 	bne.w	2794 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2a0a:	f04f 082f 	mov.w	r8, #47	; 0x2f
    2a0e:	4693      	mov	fp, r2
    2a10:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    2a12:	f04f 497f 	mov.w	r9, #4278190080	; 0xff000000
    2a16:	f04f 0a18 	mov.w	sl, #24
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2a1a:	262c      	movs	r6, #44	; 0x2c
    2a1c:	e78b      	b.n	2936 <am_hal_iom_workaround_word_write+0x526>
    2a1e:	4938      	ldr	r1, [pc, #224]	; (2b00 <am_hal_iom_workaround_word_write+0x6f0>)
    2a20:	680f      	ldr	r7, [r1, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    2a22:	f3c7 60c2 	ubfx	r0, r7, #27, #3
    2a26:	2804      	cmp	r0, #4
    2a28:	f47f aeb4 	bne.w	2794 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2a2c:	f04f 0823 	mov.w	r8, #35	; 0x23
    2a30:	468b      	mov	fp, r1
    2a32:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    2a34:	f04f 497f 	mov.w	r9, #4278190080	; 0xff000000
    2a38:	f04f 0a18 	mov.w	sl, #24
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2a3c:	2620      	movs	r6, #32
    2a3e:	e77a      	b.n	2936 <am_hal_iom_workaround_word_write+0x526>
    2a40:	4e30      	ldr	r6, [pc, #192]	; (2b04 <am_hal_iom_workaround_word_write+0x6f4>)
    2a42:	6833      	ldr	r3, [r6, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    2a44:	f3c3 42c2 	ubfx	r2, r3, #19, #3
    2a48:	2a06      	cmp	r2, #6
    2a4a:	f47f aea3 	bne.w	2794 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2a4e:	f04f 0826 	mov.w	r8, #38	; 0x26
    2a52:	46b3      	mov	fp, r6
    2a54:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    2a56:	f44f 097f 	mov.w	r9, #16711680	; 0xff0000
    2a5a:	f04f 0a10 	mov.w	sl, #16
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2a5e:	2624      	movs	r6, #36	; 0x24
    2a60:	e769      	b.n	2936 <am_hal_iom_workaround_word_write+0x526>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2a62:	4a29      	ldr	r2, [pc, #164]	; (2b08 <am_hal_iom_workaround_word_write+0x6f8>)
    2a64:	4818      	ldr	r0, [pc, #96]	; (2ac8 <am_hal_iom_workaround_word_write+0x6b8>)
    2a66:	f640 7145 	movw	r1, #3909	; 0xf45
    2a6a:	f7fe fde5 	bl	1638 <am_hal_debug_error>
    2a6e:	e611      	b.n	2694 <am_hal_iom_workaround_word_write+0x284>
    2a70:	4a25      	ldr	r2, [pc, #148]	; (2b08 <am_hal_iom_workaround_word_write+0x6f8>)
    2a72:	4815      	ldr	r0, [pc, #84]	; (2ac8 <am_hal_iom_workaround_word_write+0x6b8>)
    2a74:	f640 7145 	movw	r1, #3909	; 0xf45
    2a78:	f7fe fdde 	bl	1638 <am_hal_debug_error>
    2a7c:	e5f4      	b.n	2668 <am_hal_iom_workaround_word_write+0x258>
    am_hal_debug_assert_msg(ui32HiFreq > 0, "Invalid Hi Frequency for IOM.");
    2a7e:	4a23      	ldr	r2, [pc, #140]	; (2b0c <am_hal_iom_workaround_word_write+0x6fc>)
    2a80:	4811      	ldr	r0, [pc, #68]	; (2ac8 <am_hal_iom_workaround_word_write+0x6b8>)
    2a82:	f240 41e5 	movw	r1, #1253	; 0x4e5
    2a86:	f7fe fdd7 	bl	1638 <am_hal_debug_error>
    2a8a:	e54b      	b.n	2524 <am_hal_iom_workaround_word_write+0x114>
    am_hal_debug_assert_msg(ui32NumBytes <= 4091, "SPI transfer too big.");
    2a8c:	4a20      	ldr	r2, [pc, #128]	; (2b10 <am_hal_iom_workaround_word_write+0x700>)
    2a8e:	480e      	ldr	r0, [pc, #56]	; (2ac8 <am_hal_iom_workaround_word_write+0x6b8>)
    2a90:	f240 41ba 	movw	r1, #1210	; 0x4ba
    2a94:	f7fe fdd0 	bl	1638 <am_hal_debug_error>
    2a98:	e4cd      	b.n	2436 <am_hal_iom_workaround_word_write+0x26>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2a9a:	481e      	ldr	r0, [pc, #120]	; (2b14 <am_hal_iom_workaround_word_write+0x704>)
    2a9c:	6802      	ldr	r2, [r0, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    2a9e:	f3c2 23c2 	ubfx	r3, r2, #11, #3
    2aa2:	2b06      	cmp	r3, #6
    2aa4:	d04e      	beq.n	2b44 <am_hal_iom_workaround_word_write+0x734>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2aa6:	3004      	adds	r0, #4
    2aa8:	6806      	ldr	r6, [r0, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    2aaa:	f3c6 41c2 	ubfx	r1, r6, #19, #3
    2aae:	2906      	cmp	r1, #6
    2ab0:	f47f ae70 	bne.w	2794 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2ab4:	f04f 0822 	mov.w	r8, #34	; 0x22
    2ab8:	4683      	mov	fp, r0
    2aba:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    2abc:	f44f 097f 	mov.w	r9, #16711680	; 0xff0000
    2ac0:	f04f 0a10 	mov.w	sl, #16
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2ac4:	2620      	movs	r6, #32
    2ac6:	e736      	b.n	2936 <am_hal_iom_workaround_word_write+0x526>
    2ac8:	000053ac 	.word	0x000053ac
    2acc:	400100ec 	.word	0x400100ec
    2ad0:	40010094 	.word	0x40010094
    2ad4:	40010060 	.word	0x40010060
    2ad8:	4001010c 	.word	0x4001010c
    2adc:	50008110 	.word	0x50008110
    2ae0:	0800009d 	.word	0x0800009d
    2ae4:	5000810c 	.word	0x5000810c
    2ae8:	365c0400 	.word	0x365c0400
    2aec:	40010010 	.word	0x40010010
    2af0:	40010028 	.word	0x40010028
    2af4:	40010090 	.word	0x40010090
    2af8:	400100e0 	.word	0x400100e0
    2afc:	40010008 	.word	0x40010008
    2b00:	40010020 	.word	0x40010020
    2b04:	40010024 	.word	0x40010024
    2b08:	00005378 	.word	0x00005378
    2b0c:	00005468 	.word	0x00005468
    2b10:	00005450 	.word	0x00005450
    2b14:	4001001c 	.word	0x4001001c
    2b18:	40010054 	.word	0x40010054
    2b1c:	4001002c 	.word	0x4001002c
    2b20:	40010040 	.word	0x40010040
            bRising = true;
    2b24:	2001      	movs	r0, #1
    2b26:	9006      	str	r0, [sp, #24]
    2b28:	e589      	b.n	263e <am_hal_iom_workaround_word_write+0x22e>
    for ( ui32Fsel = 1; ui32Fsel < 8; ui32Fsel++ )
    2b2a:	2001      	movs	r0, #1
    2b2c:	e56d      	b.n	260a <am_hal_iom_workaround_word_write+0x1fa>
    2b2e:	f04f 0c01 	mov.w	ip, #1
    2b32:	e4b2      	b.n	249a <am_hal_iom_workaround_word_write+0x8a>
    2b34:	2002      	movs	r0, #2
    2b36:	e568      	b.n	260a <am_hal_iom_workaround_word_write+0x1fa>
    2b38:	2003      	movs	r0, #3
    2b3a:	e566      	b.n	260a <am_hal_iom_workaround_word_write+0x1fa>
    2b3c:	2004      	movs	r0, #4
    2b3e:	e564      	b.n	260a <am_hal_iom_workaround_word_write+0x1fa>
    2b40:	2005      	movs	r0, #5
    2b42:	e562      	b.n	260a <am_hal_iom_workaround_word_write+0x1fa>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2b44:	f04f 081d 	mov.w	r8, #29
    2b48:	4683      	mov	fp, r0
    2b4a:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    2b4c:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    2b50:	f04f 0a08 	mov.w	sl, #8
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2b54:	261c      	movs	r6, #28
    2b56:	e6ee      	b.n	2936 <am_hal_iom_workaround_word_write+0x526>
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    2b58:	f04f 0a10 	mov.w	sl, #16
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2b5c:	f04f 0812 	mov.w	r8, #18
    2b60:	4693      	mov	fp, r2
    2b62:	4656      	mov	r6, sl
    2b64:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    2b66:	f44f 097f 	mov.w	r9, #16711680	; 0xff0000
    2b6a:	e6e4      	b.n	2936 <am_hal_iom_workaround_word_write+0x526>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2b6c:	f04f 0811 	mov.w	r8, #17
    2b70:	46bb      	mov	fp, r7
    2b72:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    2b74:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    2b78:	f04f 0a08 	mov.w	sl, #8
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2b7c:	2610      	movs	r6, #16
    2b7e:	e6da      	b.n	2936 <am_hal_iom_workaround_word_write+0x526>
    2b80:	f04f 080a 	mov.w	r8, #10
    2b84:	4683      	mov	fp, r0
    2b86:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    2b88:	f44f 097f 	mov.w	r9, #16711680	; 0xff0000
    2b8c:	f04f 0a10 	mov.w	sl, #16
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2b90:	2608      	movs	r6, #8
    2b92:	e6d0      	b.n	2936 <am_hal_iom_workaround_word_write+0x526>
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    2b94:	f04f 0a08 	mov.w	sl, #8
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2b98:	f04f 0809 	mov.w	r8, #9
    2b9c:	4693      	mov	fp, r2
    2b9e:	4656      	mov	r6, sl
    2ba0:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    2ba2:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    2ba6:	e6c6      	b.n	2936 <am_hal_iom_workaround_word_write+0x526>

00002ba8 <am_hal_iom_spi_write_nb.part.6>:
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    2ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    2bac:	f500 24a0 	add.w	r4, r0, #327680	; 0x50000
    2bb0:	3404      	adds	r4, #4
    2bb2:	0324      	lsls	r4, r4, #12
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    2bb4:	4606      	mov	r6, r0
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    2bb6:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
    g_bIomBusy[ui32Module] = true;
    2bba:	4d6b      	ldr	r5, [pc, #428]	; (2d68 <am_hal_iom_spi_write_nb.part.6+0x1c0>)
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    2bbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    2bc0:	f000 0708 	and.w	r7, r0, #8
                      AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2bc4:	2f00      	cmp	r7, #0
    g_bIomBusy[ui32Module] = true;
    2bc6:	f04f 0e01 	mov.w	lr, #1
    2bca:	f805 e006 	strb.w	lr, [r5, r6]
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    2bce:	4617      	mov	r7, r2
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    2bd0:	f240 70ff 	movw	r0, #2047	; 0x7ff
                      AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2bd4:	bf15      	itete	ne
    2bd6:	223c      	movne	r2, #60	; 0x3c
    2bd8:	227c      	moveq	r2, #124	; 0x7c
    2bda:	2540      	movne	r5, #64	; 0x40
    2bdc:	2580      	moveq	r5, #128	; 0x80
    if ( WORKAROUND_IOM == ui32Module && isRevB0() )
    2bde:	2e04      	cmp	r6, #4
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    2be0:	4688      	mov	r8, r1
    2be2:	469a      	mov	sl, r3
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    2be4:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
    if ( WORKAROUND_IOM == ui32Module && isRevB0() )
    2be8:	f000 808f 	beq.w	2d0a <am_hal_iom_spi_write_nb.part.6+0x162>
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2bec:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    2bf0:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
        ui32TransferSize = (ui32NumBytes <= ui32MaxFifoSize ? ui32NumBytes :
    2bf4:	4555      	cmp	r5, sl
    2bf6:	bf28      	it	cs
    2bf8:	4655      	movcs	r5, sl
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2bfa:	f013 0f08 	tst.w	r3, #8
    2bfe:	bf14      	ite	ne
    2c00:	2340      	movne	r3, #64	; 0x40
    2c02:	2380      	moveq	r3, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    2c04:	1a99      	subs	r1, r3, r2
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2c06:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
    2c0a:	4285      	cmp	r5, r0
    2c0c:	f200 809d 	bhi.w	2d4a <am_hal_iom_spi_write_nb.part.6+0x1a2>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    2c10:	2d00      	cmp	r5, #0
    2c12:	d077      	beq.n	2d04 <am_hal_iom_spi_write_nb.part.6+0x15c>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2c14:	463a      	mov	r2, r7
    2c16:	43f9      	mvns	r1, r7
    2c18:	f852 3b04 	ldr.w	r3, [r2], #4
    2c1c:	6023      	str	r3, [r4, #0]
    2c1e:	4439      	add	r1, r7
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    2c20:	1bd0      	subs	r0, r2, r7
    2c22:	4429      	add	r1, r5
    2c24:	4285      	cmp	r5, r0
    2c26:	f3c1 0182 	ubfx	r1, r1, #2, #3
    2c2a:	d941      	bls.n	2cb0 <am_hal_iom_spi_write_nb.part.6+0x108>
    2c2c:	b319      	cbz	r1, 2c76 <am_hal_iom_spi_write_nb.part.6+0xce>
    2c2e:	2901      	cmp	r1, #1
    2c30:	d01b      	beq.n	2c6a <am_hal_iom_spi_write_nb.part.6+0xc2>
    2c32:	2902      	cmp	r1, #2
    2c34:	d016      	beq.n	2c64 <am_hal_iom_spi_write_nb.part.6+0xbc>
    2c36:	2903      	cmp	r1, #3
    2c38:	d011      	beq.n	2c5e <am_hal_iom_spi_write_nb.part.6+0xb6>
    2c3a:	2904      	cmp	r1, #4
    2c3c:	d00c      	beq.n	2c58 <am_hal_iom_spi_write_nb.part.6+0xb0>
    2c3e:	2905      	cmp	r1, #5
    2c40:	d007      	beq.n	2c52 <am_hal_iom_spi_write_nb.part.6+0xaa>
    2c42:	2906      	cmp	r1, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2c44:	bf1c      	itt	ne
    2c46:	f852 0b04 	ldrne.w	r0, [r2], #4
    2c4a:	6020      	strne	r0, [r4, #0]
    2c4c:	f852 3b04 	ldr.w	r3, [r2], #4
    2c50:	6023      	str	r3, [r4, #0]
    2c52:	f852 0b04 	ldr.w	r0, [r2], #4
    2c56:	6020      	str	r0, [r4, #0]
    2c58:	f852 1b04 	ldr.w	r1, [r2], #4
    2c5c:	6021      	str	r1, [r4, #0]
    2c5e:	f852 3b04 	ldr.w	r3, [r2], #4
    2c62:	6023      	str	r3, [r4, #0]
    2c64:	f852 0b04 	ldr.w	r0, [r2], #4
    2c68:	6020      	str	r0, [r4, #0]
    2c6a:	f852 1b04 	ldr.w	r1, [r2], #4
    2c6e:	6021      	str	r1, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    2c70:	1bd3      	subs	r3, r2, r7
    2c72:	429d      	cmp	r5, r3
    2c74:	d91c      	bls.n	2cb0 <am_hal_iom_spi_write_nb.part.6+0x108>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2c76:	4694      	mov	ip, r2
    2c78:	3220      	adds	r2, #32
    2c7a:	f85c 0b04 	ldr.w	r0, [ip], #4
    2c7e:	6020      	str	r0, [r4, #0]
    2c80:	f852 1c1c 	ldr.w	r1, [r2, #-28]
    2c84:	6021      	str	r1, [r4, #0]
    2c86:	f8dc 3004 	ldr.w	r3, [ip, #4]
    2c8a:	6023      	str	r3, [r4, #0]
    2c8c:	f852 0c14 	ldr.w	r0, [r2, #-20]
    2c90:	6020      	str	r0, [r4, #0]
    2c92:	f852 1c10 	ldr.w	r1, [r2, #-16]
    2c96:	6021      	str	r1, [r4, #0]
    2c98:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    2c9c:	6023      	str	r3, [r4, #0]
    2c9e:	f852 0c08 	ldr.w	r0, [r2, #-8]
    2ca2:	6020      	str	r0, [r4, #0]
    2ca4:	f852 1c04 	ldr.w	r1, [r2, #-4]
    2ca8:	6021      	str	r1, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    2caa:	1bd3      	subs	r3, r2, r7
    2cac:	429d      	cmp	r5, r3
    2cae:	d8e2      	bhi.n	2c76 <am_hal_iom_spi_write_nb.part.6+0xce>
            g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    2cb0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    2cb4:	4a2d      	ldr	r2, [pc, #180]	; (2d6c <am_hal_iom_spi_write_nb.part.6+0x1c4>)
    2cb6:	00b0      	lsls	r0, r6, #2
    2cb8:	1813      	adds	r3, r2, r0
            g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    2cba:	f025 0c03 	bic.w	ip, r5, #3
            g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    2cbe:	2101      	movs	r1, #1
            g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
    2cc0:	ebaa 0505 	sub.w	r5, sl, r5
            g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    2cc4:	4467      	add	r7, ip
            g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    2cc6:	9e09      	ldr	r6, [sp, #36]	; 0x24
            g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    2cc8:	5011      	str	r1, [r2, r0]
            g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    2cca:	611e      	str	r6, [r3, #16]
            g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    2ccc:	f8c3 900c 	str.w	r9, [r3, #12]
            g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
    2cd0:	609d      	str	r5, [r3, #8]
            g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    2cd2:	605f      	str	r7, [r3, #4]
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    2cd4:	f1ba 0f00 	cmp.w	sl, #0
    2cd8:	d03e      	beq.n	2d58 <am_hal_iom_spi_write_nb.part.6+0x1b0>
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    2cda:	ea4f 4708 	mov.w	r7, r8, lsl #16
    ui32Command |= ui32Options & 0x5C00FF00;
    2cde:	f029 4223 	bic.w	r2, r9, #2734686208	; 0xa3000000
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    2ce2:	f407 20e0 	and.w	r0, r7, #458752	; 0x70000
    ui32Command |= ui32Options & 0x5C00FF00;
    2ce6:	f002 23ff 	and.w	r3, r2, #4278255360	; 0xff00ff00
    2cea:	ea40 0103 	orr.w	r1, r0, r3
    ui32Command |= (ui32NumBytes & 0xFF);
    2cee:	fa5f f58a 	uxtb.w	r5, sl
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    2cf2:	ea4f 36ca 	mov.w	r6, sl, lsl #15
    ui32Command |= ui32Options & 0x5C00FF00;
    2cf6:	4329      	orrs	r1, r5
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    2cf8:	f006 67f0 	and.w	r7, r6, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
    2cfc:	ea41 0207 	orr.w	r2, r1, r7
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    2d00:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
}
    2d04:	2000      	movs	r0, #0
    2d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B )
    2d0a:	4b19      	ldr	r3, [pc, #100]	; (2d70 <am_hal_iom_spi_write_nb.part.6+0x1c8>)
    2d0c:	6819      	ldr	r1, [r3, #0]
    2d0e:	b2c8      	uxtb	r0, r1
    2d10:	2820      	cmp	r0, #32
    2d12:	f47f af6b 	bne.w	2bec <am_hal_iom_spi_write_nb.part.6+0x44>
        ui32TransferSize = (ui32NumBytes <= (ui32MaxFifoSize - 4) ?  ui32NumBytes :
    2d16:	4552      	cmp	r2, sl
    2d18:	bf28      	it	cs
    2d1a:	4652      	movcs	r2, sl
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    2d1c:	4d13      	ldr	r5, [pc, #76]	; (2d6c <am_hal_iom_spi_write_nb.part.6+0x1c4>)
        g_psIOMBuffers[ui32Module].pui32Data = pui32Data + (ui32TransferSize / 4);
    2d1e:	f022 0603 	bic.w	r6, r2, #3
    2d22:	443e      	add	r6, r7
        g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes - ui32TransferSize;
    2d24:	ebaa 0402 	sub.w	r4, sl, r2
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
    2d28:	4639      	mov	r1, r7
        g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    2d2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
        g_psIOMBuffers[ui32Module].pui32Data = pui32Data + (ui32TransferSize / 4);
    2d2c:	656e      	str	r6, [r5, #84]	; 0x54
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
    2d2e:	4640      	mov	r0, r8
    2d30:	4652      	mov	r2, sl
    2d32:	464b      	mov	r3, r9
        g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes - ui32TransferSize;
    2d34:	65ac      	str	r4, [r5, #88]	; 0x58
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    2d36:	f8c5 e050 	str.w	lr, [r5, #80]	; 0x50
        g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    2d3a:	662f      	str	r7, [r5, #96]	; 0x60
        g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    2d3c:	f8c5 905c 	str.w	r9, [r5, #92]	; 0x5c
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
    2d40:	f7ff fb66 	bl	2410 <am_hal_iom_workaround_word_write>
}
    2d44:	2000      	movs	r0, #0
    2d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2d4a:	4a0a      	ldr	r2, [pc, #40]	; (2d74 <am_hal_iom_spi_write_nb.part.6+0x1cc>)
    2d4c:	480a      	ldr	r0, [pc, #40]	; (2d78 <am_hal_iom_spi_write_nb.part.6+0x1d0>)
    2d4e:	f640 7145 	movw	r1, #3909	; 0xf45
    2d52:	f7fe fc71 	bl	1638 <am_hal_debug_error>
    2d56:	e75d      	b.n	2c14 <am_hal_iom_spi_write_nb.part.6+0x6c>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    2d58:	4a08      	ldr	r2, [pc, #32]	; (2d7c <am_hal_iom_spi_write_nb.part.6+0x1d4>)
    2d5a:	4807      	ldr	r0, [pc, #28]	; (2d78 <am_hal_iom_spi_write_nb.part.6+0x1d0>)
    2d5c:	f640 21da 	movw	r1, #2778	; 0xada
    2d60:	f7fe fc6a 	bl	1638 <am_hal_debug_error>
    2d64:	e7b9      	b.n	2cda <am_hal_iom_spi_write_nb.part.6+0x132>
    2d66:	bf00      	nop
    2d68:	1000114c 	.word	0x1000114c
    2d6c:	10001544 	.word	0x10001544
    2d70:	4002000c 	.word	0x4002000c
    2d74:	00005378 	.word	0x00005378
    2d78:	000053ac 	.word	0x000053ac
    2d7c:	0000542c 	.word	0x0000542c

00002d80 <am_hal_iom_spi_read_nb.part.7>:
am_hal_iom_spi_read_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    2d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    2d84:	f500 27a0 	add.w	r7, r0, #327680	; 0x50000
    2d88:	3704      	adds	r7, #4
    2d8a:	033f      	lsls	r7, r7, #12
    g_bIomBusy[ui32Module] = true;
    2d8c:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 2e88 <am_hal_iom_spi_read_nb.part.7+0x108>
    2d90:	f04f 0801 	mov.w	r8, #1
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    2d94:	f240 7bff 	movw	fp, #2047	; 0x7ff
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
    2d98:	2804      	cmp	r0, #4
    g_bIomBusy[ui32Module] = true;
    2d9a:	f80a 8000 	strb.w	r8, [sl, r0]
am_hal_iom_spi_read_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    2d9e:	b083      	sub	sp, #12
    2da0:	4604      	mov	r4, r0
    2da2:	460e      	mov	r6, r1
    2da4:	4691      	mov	r9, r2
    2da6:	461d      	mov	r5, r3
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    2da8:	f8c7 b208 	str.w	fp, [r7, #520]	; 0x208
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
    2dac:	d02c      	beq.n	2e08 <am_hal_iom_spi_read_nb.part.7+0x88>
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    2dae:	482f      	ldr	r0, [pc, #188]	; (2e6c <am_hal_iom_spi_read_nb.part.7+0xec>)
    2db0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2db4:	00a2      	lsls	r2, r4, #2
    2db6:	1883      	adds	r3, r0, r2
    2db8:	2102      	movs	r1, #2
    2dba:	5081      	str	r1, [r0, r2]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    2dbc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    2dbe:	980c      	ldr	r0, [sp, #48]	; 0x30
    g_psIOMBuffers[ui32Module].pui32Data = pui32Data;
    2dc0:	f8c3 9004 	str.w	r9, [r3, #4]
    g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes;
    2dc4:	609d      	str	r5, [r3, #8]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    2dc6:	611c      	str	r4, [r3, #16]
    g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    2dc8:	60d8      	str	r0, [r3, #12]
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    2dca:	b92d      	cbnz	r5, 2dd8 <am_hal_iom_spi_read_nb.part.7+0x58>
    2dcc:	4a28      	ldr	r2, [pc, #160]	; (2e70 <am_hal_iom_spi_read_nb.part.7+0xf0>)
    2dce:	4829      	ldr	r0, [pc, #164]	; (2e74 <am_hal_iom_spi_read_nb.part.7+0xf4>)
    2dd0:	f640 21da 	movw	r1, #2778	; 0xada
    2dd4:	f7fe fc30 	bl	1638 <am_hal_debug_error>
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    2dd8:	03ea      	lsls	r2, r5, #15
    ui32Command |= (ui32NumBytes & 0xFF);
    2dda:	fa5f fc85 	uxtb.w	ip, r5
    ui32Command |= ui32Options & 0x5C00FF00;
    2dde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    2de0:	f002 61f0 	and.w	r1, r2, #125829120	; 0x7800000
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    2de4:	0436      	lsls	r6, r6, #16
    ui32Command |= (ui32NumBytes & 0xFF);
    2de6:	f04c 4500 	orr.w	r5, ip, #2147483648	; 0x80000000
    ui32Command |= ui32Options & 0x5C00FF00;
    2dea:	f023 4023 	bic.w	r0, r3, #2734686208	; 0xa3000000
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    2dee:	f406 24e0 	and.w	r4, r6, #458752	; 0x70000
    ui32Command |= (ui32NumBytes & 0xFF);
    2df2:	430d      	orrs	r5, r1
    ui32Command |= ui32Options & 0x5C00FF00;
    2df4:	f000 22ff 	and.w	r2, r0, #4278255360	; 0xff00ff00
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    2df8:	432c      	orrs	r4, r5
    ui32Command |= ui32Options & 0x5C00FF00;
    2dfa:	4322      	orrs	r2, r4
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    2dfc:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
    return ui32Status;
    2e00:	2000      	movs	r0, #0
}
    2e02:	b003      	add	sp, #12
    2e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
    2e08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2e0a:	f013 4180 	ands.w	r1, r3, #1073741824	; 0x40000000
    2e0e:	d1ce      	bne.n	2dae <am_hal_iom_spi_read_nb.part.7+0x2e>
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B )
    2e10:	4819      	ldr	r0, [pc, #100]	; (2e78 <am_hal_iom_spi_read_nb.part.7+0xf8>)
    2e12:	6802      	ldr	r2, [r0, #0]
    2e14:	b2d3      	uxtb	r3, r2
    2e16:	2b20      	cmp	r3, #32
    2e18:	d1c9      	bne.n	2dae <am_hal_iom_spi_read_nb.part.7+0x2e>
        ui32IntConfig = AM_REGn(IOMSTR, 4, INTEN);
    2e1a:	4818      	ldr	r0, [pc, #96]	; (2e7c <am_hal_iom_spi_read_nb.part.7+0xfc>)
    2e1c:	6803      	ldr	r3, [r0, #0]
        AM_REGn(IOMSTR, 4, INTEN) = 0;
    2e1e:	4817      	ldr	r0, [pc, #92]	; (2e7c <am_hal_iom_spi_read_nb.part.7+0xfc>)
        ui32IntConfig = AM_REGn(IOMSTR, 4, INTEN);
    2e20:	9301      	str	r3, [sp, #4]
        AM_REGn(IOMSTR, 4, INTEN) = 0;
    2e22:	6001      	str	r1, [r0, #0]
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
    2e24:	460a      	mov	r2, r1
    2e26:	990c      	ldr	r1, [sp, #48]	; 0x30
    2e28:	4630      	mov	r0, r6
    2e2a:	f041 5380 	orr.w	r3, r1, #268435456	; 0x10000000
    2e2e:	4649      	mov	r1, r9
    2e30:	f7ff faee 	bl	2410 <am_hal_iom_workaround_word_write>
        waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    2e34:	4a12      	ldr	r2, [pc, #72]	; (2e80 <am_hal_iom_spi_read_nb.part.7+0x100>)
    2e36:	4643      	mov	r3, r8
    2e38:	6910      	ldr	r0, [r2, #16]
    2e3a:	f507 7101 	add.w	r1, r7, #516	; 0x204
    2e3e:	4642      	mov	r2, r8
    2e40:	f7fe fc00 	bl	1644 <am_hal_flash_delay_status_change>
        if (waitStatus != 1)
    2e44:	2801      	cmp	r0, #1
    2e46:	d004      	beq.n	2e52 <am_hal_iom_spi_read_nb.part.7+0xd2>
            g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    2e48:	4f0e      	ldr	r7, [pc, #56]	; (2e84 <am_hal_iom_spi_read_nb.part.7+0x104>)
            return ui32Status;
    2e4a:	4640      	mov	r0, r8
            g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    2e4c:	f887 8004 	strb.w	r8, [r7, #4]
    2e50:	e7d7      	b.n	2e02 <am_hal_iom_spi_read_nb.part.7+0x82>
        ui32Options |= AM_HAL_IOM_RAW;
    2e52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        AM_REGn(IOMSTR, 4, INTEN) = ui32IntConfig;
    2e54:	4909      	ldr	r1, [pc, #36]	; (2e7c <am_hal_iom_spi_read_nb.part.7+0xfc>)
        g_bIomBusy[ui32Module] = true;
    2e56:	f88a 0004 	strb.w	r0, [sl, #4]
        AM_REGn(IOMSTR, 4, INTEN) = ui32IntConfig;
    2e5a:	9a01      	ldr	r2, [sp, #4]
        AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    2e5c:	f8c7 b208 	str.w	fp, [r7, #520]	; 0x208
        ui32Options |= AM_HAL_IOM_RAW;
    2e60:	f043 4080 	orr.w	r0, r3, #1073741824	; 0x40000000
    2e64:	900c      	str	r0, [sp, #48]	; 0x30
        AM_REGn(IOMSTR, 4, INTEN) = ui32IntConfig;
    2e66:	600a      	str	r2, [r1, #0]
    2e68:	e7a1      	b.n	2dae <am_hal_iom_spi_read_nb.part.7+0x2e>
    2e6a:	bf00      	nop
    2e6c:	10001544 	.word	0x10001544
    2e70:	0000542c 	.word	0x0000542c
    2e74:	000053ac 	.word	0x000053ac
    2e78:	4002000c 	.word	0x4002000c
    2e7c:	50008200 	.word	0x50008200
    2e80:	1000152c 	.word	0x1000152c
    2e84:	10001154 	.word	0x10001154
    2e88:	1000114c 	.word	0x1000114c

00002e8c <am_hal_iom_i2c_write_nq>:
{
    2e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ( ui32Module > AM_REG_IOMSTR_NUM_MODULES )
    2e90:	2806      	cmp	r0, #6
{
    2e92:	b087      	sub	sp, #28
    if ( ui32Module > AM_REG_IOMSTR_NUM_MODULES )
    2e94:	d904      	bls.n	2ea0 <am_hal_iom_i2c_write_nq+0x14>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    2e96:	2502      	movs	r5, #2
}
    2e98:	4628      	mov	r0, r5
    2e9a:	b007      	add	sp, #28
    2e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ea0:	461f      	mov	r7, r3
    2ea2:	460d      	mov	r5, r1
    2ea4:	4604      	mov	r4, r0
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    2ea6:	d014      	beq.n	2ed2 <am_hal_iom_i2c_write_nq+0x46>
    2ea8:	49d0      	ldr	r1, [pc, #832]	; (31ec <am_hal_iom_i2c_write_nq+0x360>)
    2eaa:	4616      	mov	r6, r2
    while ( g_bIomBusy[ui32Module] );
    2eac:	5d0b      	ldrb	r3, [r1, r4]
    2eae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    2eb2:	2b00      	cmp	r3, #0
    2eb4:	d1fa      	bne.n	2eac <am_hal_iom_i2c_write_nq+0x20>
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    2eb6:	f8df 9348 	ldr.w	r9, [pc, #840]	; 3200 <am_hal_iom_i2c_write_nq+0x374>
    2eba:	f809 2004 	strb.w	r2, [r9, r4]
    if (ui32NumBytes == 0)
    2ebe:	b10f      	cbz	r7, 2ec4 <am_hal_iom_i2c_write_nq+0x38>
    if (ui32NumBytes >= 256)
    2ec0:	2fff      	cmp	r7, #255	; 0xff
    2ec2:	d920      	bls.n	2f06 <am_hal_iom_i2c_write_nq+0x7a>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    2ec4:	2503      	movs	r5, #3
}
    2ec6:	4628      	mov	r0, r5
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    2ec8:	f809 5004 	strb.w	r5, [r9, r4]
}
    2ecc:	b007      	add	sp, #28
    2ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    2ed2:	f8df 932c 	ldr.w	r9, [pc, #812]	; 3200 <am_hal_iom_i2c_write_nq+0x374>
    2ed6:	2300      	movs	r3, #0
    2ed8:	f889 3006 	strb.w	r3, [r9, #6]
    if (ui32NumBytes == 0)
    2edc:	2f00      	cmp	r7, #0
    2ede:	d0f1      	beq.n	2ec4 <am_hal_iom_i2c_write_nq+0x38>
        if ( ui32Options & AM_HAL_IOM_RAW )
    2ee0:	9e10      	ldr	r6, [sp, #64]	; 0x40
    2ee2:	0070      	lsls	r0, r6, #1
    2ee4:	f140 8158 	bpl.w	3198 <am_hal_iom_i2c_write_nq+0x30c>
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    2ee8:	0068      	lsls	r0, r5, #1
    2eea:	f3c6 7400 	ubfx	r4, r6, #28, #1
    2eee:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    2ef2:	9300      	str	r3, [sp, #0]
    2ef4:	4639      	mov	r1, r7
    2ef6:	9401      	str	r4, [sp, #4]
    2ef8:	f001 fe12 	bl	4b20 <am_hal_i2c_bit_bang_send>
        g_iom_error_status[ui32Module] = ui32Status = i2c_bb_errmap[i2cBBStatus];
    2efc:	4abc      	ldr	r2, [pc, #752]	; (31f0 <am_hal_iom_i2c_write_nq+0x364>)
    2efe:	5c15      	ldrb	r5, [r2, r0]
    2f00:	f889 5006 	strb.w	r5, [r9, #6]
    2f04:	e7c8      	b.n	2e98 <am_hal_iom_i2c_write_nq+0xc>
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    2f06:	f504 28a0 	add.w	r8, r4, #327680	; 0x50000
    2f0a:	f108 0004 	add.w	r0, r8, #4
    2f0e:	ea4f 3800 	mov.w	r8, r0, lsl #12
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    2f12:	f240 73ff 	movw	r3, #2047	; 0x7ff
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    2f16:	f8d8 111c 	ldr.w	r1, [r8, #284]	; 0x11c
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    2f1a:	f8d8 0200 	ldr.w	r0, [r8, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    2f1e:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    2f22:	f8c8 3208 	str.w	r3, [r8, #520]	; 0x208
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2f26:	f8d8 311c 	ldr.w	r3, [r8, #284]	; 0x11c
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    2f2a:	f8d8 2100 	ldr.w	r2, [r8, #256]	; 0x100
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    2f2e:	9003      	str	r0, [sp, #12]
                      AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2f30:	f011 0f08 	tst.w	r1, #8
    2f34:	bf14      	ite	ne
    2f36:	f04f 0a40 	movne.w	sl, #64	; 0x40
    2f3a:	f04f 0a80 	moveq.w	sl, #128	; 0x80
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2f3e:	f013 0f08 	tst.w	r3, #8
    2f42:	bf14      	ite	ne
    2f44:	2340      	movne	r3, #64	; 0x40
    2f46:	2380      	moveq	r3, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    2f48:	1a99      	subs	r1, r3, r2
    ui32TransferSize = (ui32NumBytes <= ui32MaxFifoSize ? ui32NumBytes :
    2f4a:	45ba      	cmp	sl, r7
    2f4c:	bf28      	it	cs
    2f4e:	46ba      	movcs	sl, r7
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2f50:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    2f54:	f508 738e 	add.w	r3, r8, #284	; 0x11c
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2f58:	4582      	cmp	sl, r0
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    2f5a:	9304      	str	r3, [sp, #16]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    2f5c:	f508 7b80 	add.w	fp, r8, #256	; 0x100
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2f60:	f200 813c 	bhi.w	31dc <am_hal_iom_i2c_write_nq+0x350>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2f64:	4630      	mov	r0, r6
    2f66:	43f2      	mvns	r2, r6
    2f68:	f850 1b04 	ldr.w	r1, [r0], #4
    2f6c:	f8c8 1000 	str.w	r1, [r8]
    2f70:	4432      	add	r2, r6
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    2f72:	1b83      	subs	r3, r0, r6
    2f74:	4452      	add	r2, sl
    2f76:	459a      	cmp	sl, r3
    2f78:	f3c2 0282 	ubfx	r2, r2, #2, #3
    2f7c:	d950      	bls.n	3020 <am_hal_iom_i2c_write_nq+0x194>
    2f7e:	b352      	cbz	r2, 2fd6 <am_hal_iom_i2c_write_nq+0x14a>
    2f80:	2a01      	cmp	r2, #1
    2f82:	d021      	beq.n	2fc8 <am_hal_iom_i2c_write_nq+0x13c>
    2f84:	2a02      	cmp	r2, #2
    2f86:	d01b      	beq.n	2fc0 <am_hal_iom_i2c_write_nq+0x134>
    2f88:	2a03      	cmp	r2, #3
    2f8a:	d015      	beq.n	2fb8 <am_hal_iom_i2c_write_nq+0x12c>
    2f8c:	2a04      	cmp	r2, #4
    2f8e:	d00f      	beq.n	2fb0 <am_hal_iom_i2c_write_nq+0x124>
    2f90:	2a05      	cmp	r2, #5
    2f92:	d009      	beq.n	2fa8 <am_hal_iom_i2c_write_nq+0x11c>
    2f94:	2a06      	cmp	r2, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2f96:	bf1c      	itt	ne
    2f98:	f850 2b04 	ldrne.w	r2, [r0], #4
    2f9c:	f8c8 2000 	strne.w	r2, [r8]
    2fa0:	f850 1b04 	ldr.w	r1, [r0], #4
    2fa4:	f8c8 1000 	str.w	r1, [r8]
    2fa8:	f850 3b04 	ldr.w	r3, [r0], #4
    2fac:	f8c8 3000 	str.w	r3, [r8]
    2fb0:	f850 2b04 	ldr.w	r2, [r0], #4
    2fb4:	f8c8 2000 	str.w	r2, [r8]
    2fb8:	f850 1b04 	ldr.w	r1, [r0], #4
    2fbc:	f8c8 1000 	str.w	r1, [r8]
    2fc0:	f850 3b04 	ldr.w	r3, [r0], #4
    2fc4:	f8c8 3000 	str.w	r3, [r8]
    2fc8:	f850 2b04 	ldr.w	r2, [r0], #4
    2fcc:	f8c8 2000 	str.w	r2, [r8]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    2fd0:	1b81      	subs	r1, r0, r6
    2fd2:	458a      	cmp	sl, r1
    2fd4:	d924      	bls.n	3020 <am_hal_iom_i2c_write_nq+0x194>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2fd6:	4684      	mov	ip, r0
    2fd8:	3020      	adds	r0, #32
    2fda:	f85c 3b04 	ldr.w	r3, [ip], #4
    2fde:	f8c8 3000 	str.w	r3, [r8]
    2fe2:	f850 2c1c 	ldr.w	r2, [r0, #-28]
    2fe6:	f8c8 2000 	str.w	r2, [r8]
    2fea:	f8dc 1004 	ldr.w	r1, [ip, #4]
    2fee:	f8c8 1000 	str.w	r1, [r8]
    2ff2:	f850 3c14 	ldr.w	r3, [r0, #-20]
    2ff6:	f8c8 3000 	str.w	r3, [r8]
    2ffa:	f850 2c10 	ldr.w	r2, [r0, #-16]
    2ffe:	f8c8 2000 	str.w	r2, [r8]
    3002:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    3006:	f8c8 1000 	str.w	r1, [r8]
    300a:	f850 3c08 	ldr.w	r3, [r0, #-8]
    300e:	f8c8 3000 	str.w	r3, [r8]
    3012:	f850 2c04 	ldr.w	r2, [r0, #-4]
    3016:	f8c8 2000 	str.w	r2, [r8]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    301a:	1b81      	subs	r1, r0, r6
    301c:	458a      	cmp	sl, r1
    301e:	d8da      	bhi.n	2fd6 <am_hal_iom_i2c_write_nq+0x14a>
    3020:	9810      	ldr	r0, [sp, #64]	; 0x40
    3022:	9000      	str	r0, [sp, #0]
    3024:	462a      	mov	r2, r5
    3026:	463b      	mov	r3, r7
    3028:	4621      	mov	r1, r4
    302a:	2000      	movs	r0, #0
    302c:	f7fe fc14 	bl	1858 <am_hal_iom_i2c_cmd_run.part.1>
    if (ui32Status != AM_HAL_IOM_SUCCESS)
    3030:	4605      	mov	r5, r0
    3032:	2800      	cmp	r0, #0
    3034:	f040 80c8 	bne.w	31c8 <am_hal_iom_i2c_write_nq+0x33c>
    pui32Data += ui32TransferSize >> 2;
    3038:	f02a 0e03 	bic.w	lr, sl, #3
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    303c:	ebb7 070a 	subs.w	r7, r7, sl
    pui32Data += ui32TransferSize >> 2;
    3040:	4476      	add	r6, lr
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    3042:	f000 80f3 	beq.w	322c <am_hal_iom_i2c_write_nq+0x3a0>
    3046:	f8d8 3204 	ldr.w	r3, [r8, #516]	; 0x204
    304a:	07d9      	lsls	r1, r3, #31
    304c:	f508 7a01 	add.w	sl, r8, #516	; 0x204
    3050:	f100 808d 	bmi.w	316e <am_hal_iom_i2c_write_nq+0x2e2>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    3054:	4623      	mov	r3, r4
    3056:	465c      	mov	r4, fp
    3058:	f8dd b010 	ldr.w	fp, [sp, #16]
    305c:	9005      	str	r0, [sp, #20]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    305e:	f8db 5000 	ldr.w	r5, [fp]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    3062:	6822      	ldr	r2, [r4, #0]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    3064:	f8db 0000 	ldr.w	r0, [fp]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    3068:	6821      	ldr	r1, [r4, #0]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    306a:	f015 0f08 	tst.w	r5, #8
    306e:	bf14      	ite	ne
    3070:	2540      	movne	r5, #64	; 0x40
    3072:	2580      	moveq	r5, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    3074:	1aad      	subs	r5, r5, r2
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    3076:	f010 0f08 	tst.w	r0, #8
        ui32SpaceInFifo =  am_hal_iom_fifo_empty_slots(ui32Module);
    307a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    307e:	bf14      	ite	ne
    3080:	2240      	movne	r2, #64	; 0x40
    3082:	2280      	moveq	r2, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    3084:	1a52      	subs	r2, r2, r1
    3086:	42bd      	cmp	r5, r7
    3088:	bf28      	it	cs
    308a:	463d      	movcs	r5, r7
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    308c:	f002 00fc 	and.w	r0, r2, #252	; 0xfc
    3090:	4285      	cmp	r5, r0
    3092:	f200 8090 	bhi.w	31b6 <am_hal_iom_i2c_write_nq+0x32a>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    3096:	2d00      	cmp	r5, #0
    3098:	d05d      	beq.n	3156 <am_hal_iom_i2c_write_nq+0x2ca>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    309a:	4632      	mov	r2, r6
    309c:	43f1      	mvns	r1, r6
    309e:	f852 0b04 	ldr.w	r0, [r2], #4
    30a2:	f8c8 0000 	str.w	r0, [r8]
    30a6:	4431      	add	r1, r6
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    30a8:	1b90      	subs	r0, r2, r6
    30aa:	4429      	add	r1, r5
    30ac:	4285      	cmp	r5, r0
    30ae:	f3c1 0182 	ubfx	r1, r1, #2, #3
    30b2:	d950      	bls.n	3156 <am_hal_iom_i2c_write_nq+0x2ca>
    30b4:	b351      	cbz	r1, 310c <am_hal_iom_i2c_write_nq+0x280>
    30b6:	2901      	cmp	r1, #1
    30b8:	d021      	beq.n	30fe <am_hal_iom_i2c_write_nq+0x272>
    30ba:	2902      	cmp	r1, #2
    30bc:	d01b      	beq.n	30f6 <am_hal_iom_i2c_write_nq+0x26a>
    30be:	2903      	cmp	r1, #3
    30c0:	d015      	beq.n	30ee <am_hal_iom_i2c_write_nq+0x262>
    30c2:	2904      	cmp	r1, #4
    30c4:	d00f      	beq.n	30e6 <am_hal_iom_i2c_write_nq+0x25a>
    30c6:	2905      	cmp	r1, #5
    30c8:	d009      	beq.n	30de <am_hal_iom_i2c_write_nq+0x252>
    30ca:	2906      	cmp	r1, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    30cc:	bf1c      	itt	ne
    30ce:	f852 1b04 	ldrne.w	r1, [r2], #4
    30d2:	f8c8 1000 	strne.w	r1, [r8]
    30d6:	f852 0b04 	ldr.w	r0, [r2], #4
    30da:	f8c8 0000 	str.w	r0, [r8]
    30de:	f852 1b04 	ldr.w	r1, [r2], #4
    30e2:	f8c8 1000 	str.w	r1, [r8]
    30e6:	f852 0b04 	ldr.w	r0, [r2], #4
    30ea:	f8c8 0000 	str.w	r0, [r8]
    30ee:	f852 1b04 	ldr.w	r1, [r2], #4
    30f2:	f8c8 1000 	str.w	r1, [r8]
    30f6:	f852 0b04 	ldr.w	r0, [r2], #4
    30fa:	f8c8 0000 	str.w	r0, [r8]
    30fe:	f852 1b04 	ldr.w	r1, [r2], #4
    3102:	f8c8 1000 	str.w	r1, [r8]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    3106:	1b90      	subs	r0, r2, r6
    3108:	4285      	cmp	r5, r0
    310a:	d924      	bls.n	3156 <am_hal_iom_i2c_write_nq+0x2ca>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    310c:	4694      	mov	ip, r2
    310e:	3220      	adds	r2, #32
    3110:	f85c 1b04 	ldr.w	r1, [ip], #4
    3114:	f8c8 1000 	str.w	r1, [r8]
    3118:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    311c:	f8c8 0000 	str.w	r0, [r8]
    3120:	f8dc 1004 	ldr.w	r1, [ip, #4]
    3124:	f8c8 1000 	str.w	r1, [r8]
    3128:	f852 0c14 	ldr.w	r0, [r2, #-20]
    312c:	f8c8 0000 	str.w	r0, [r8]
    3130:	f852 1c10 	ldr.w	r1, [r2, #-16]
    3134:	f8c8 1000 	str.w	r1, [r8]
    3138:	f852 0c0c 	ldr.w	r0, [r2, #-12]
    313c:	f8c8 0000 	str.w	r0, [r8]
    3140:	f852 1c08 	ldr.w	r1, [r2, #-8]
    3144:	f8c8 1000 	str.w	r1, [r8]
    3148:	f852 0c04 	ldr.w	r0, [r2, #-4]
    314c:	f8c8 0000 	str.w	r0, [r8]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    3150:	1b91      	subs	r1, r2, r6
    3152:	428d      	cmp	r5, r1
    3154:	d8da      	bhi.n	310c <am_hal_iom_i2c_write_nq+0x280>
        pui32Data += ui32TransferSize >> 2;
    3156:	f025 0e03 	bic.w	lr, r5, #3
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    315a:	1b7f      	subs	r7, r7, r5
        pui32Data += ui32TransferSize >> 2;
    315c:	4476      	add	r6, lr
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    315e:	d004      	beq.n	316a <am_hal_iom_i2c_write_nq+0x2de>
    3160:	f8da 2000 	ldr.w	r2, [sl]
    3164:	07d2      	lsls	r2, r2, #31
    3166:	f57f af7a 	bpl.w	305e <am_hal_iom_i2c_write_nq+0x1d2>
    316a:	9d05      	ldr	r5, [sp, #20]
    316c:	461c      	mov	r4, r3
    waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    316e:	4e21      	ldr	r6, [pc, #132]	; (31f4 <am_hal_iom_i2c_write_nq+0x368>)
    3170:	2301      	movs	r3, #1
    3172:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    3176:	461a      	mov	r2, r3
    3178:	4651      	mov	r1, sl
    317a:	f7fe fa63 	bl	1644 <am_hal_flash_delay_status_change>
    if (waitStatus != 1)
    317e:	2801      	cmp	r0, #1
    3180:	d040      	beq.n	3204 <am_hal_iom_i2c_write_nq+0x378>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    3182:	2501      	movs	r5, #1
    3184:	f809 5004 	strb.w	r5, [r9, r4]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    3188:	f240 74ff 	movw	r4, #2047	; 0x7ff
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    318c:	9803      	ldr	r0, [sp, #12]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    318e:	f8c8 4208 	str.w	r4, [r8, #520]	; 0x208
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    3192:	f8c8 0200 	str.w	r0, [r8, #512]	; 0x200
    3196:	e67f      	b.n	2e98 <am_hal_iom_i2c_write_nq+0xc>
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    3198:	f3c6 7400 	ubfx	r4, r6, #28, #1
    319c:	2301      	movs	r3, #1
    319e:	e88d 0018 	stmia.w	sp, {r3, r4}
    31a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    31a4:	006d      	lsls	r5, r5, #1
    31a6:	f005 00fe 	and.w	r0, r5, #254	; 0xfe
    31aa:	4639      	mov	r1, r7
    31ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
    31b0:	f001 fcb6 	bl	4b20 <am_hal_i2c_bit_bang_send>
    31b4:	e6a2      	b.n	2efc <am_hal_iom_i2c_write_nq+0x70>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    31b6:	4a10      	ldr	r2, [pc, #64]	; (31f8 <am_hal_iom_i2c_write_nq+0x36c>)
    31b8:	4810      	ldr	r0, [pc, #64]	; (31fc <am_hal_iom_i2c_write_nq+0x370>)
    31ba:	9304      	str	r3, [sp, #16]
    31bc:	f640 7145 	movw	r1, #3909	; 0xf45
    31c0:	f7fe fa3a 	bl	1638 <am_hal_debug_error>
    31c4:	9b04      	ldr	r3, [sp, #16]
    31c6:	e768      	b.n	309a <am_hal_iom_i2c_write_nq+0x20e>
        AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    31c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
        AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    31cc:	9f03      	ldr	r7, [sp, #12]
        g_iom_error_status[ui32Module] = ui32Status = ui32Status;
    31ce:	f809 0004 	strb.w	r0, [r9, r4]
        AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    31d2:	f8c8 1208 	str.w	r1, [r8, #520]	; 0x208
        AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    31d6:	f8c8 7200 	str.w	r7, [r8, #512]	; 0x200
    31da:	e65d      	b.n	2e98 <am_hal_iom_i2c_write_nq+0xc>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    31dc:	4a06      	ldr	r2, [pc, #24]	; (31f8 <am_hal_iom_i2c_write_nq+0x36c>)
    31de:	4807      	ldr	r0, [pc, #28]	; (31fc <am_hal_iom_i2c_write_nq+0x370>)
    31e0:	f640 7145 	movw	r1, #3909	; 0xf45
    31e4:	f7fe fa28 	bl	1638 <am_hal_debug_error>
    31e8:	e6bc      	b.n	2f64 <am_hal_iom_i2c_write_nq+0xd8>
    31ea:	bf00      	nop
    31ec:	1000114c 	.word	0x1000114c
    31f0:	00005488 	.word	0x00005488
    31f4:	1000152c 	.word	0x1000152c
    31f8:	00005378 	.word	0x00005378
    31fc:	000053ac 	.word	0x000053ac
    3200:	10001154 	.word	0x10001154
        return AM_REGn(IOMSTR, ui32Module, INTSTAT);
    3204:	f8da 3000 	ldr.w	r3, [sl]
    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    3208:	f013 0fcc 	tst.w	r3, #204	; 0xcc
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
    320c:	bf18      	it	ne
    320e:	2505      	movne	r5, #5
    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    3210:	d002      	beq.n	3218 <am_hal_iom_i2c_write_nq+0x38c>
        g_iom_error_status[ui32Module] = ui32Status = internal_iom_get_int_err(ui32Module, 0);
    3212:	f809 5004 	strb.w	r5, [r9, r4]
    3216:	e7b7      	b.n	3188 <am_hal_iom_i2c_write_nq+0x2fc>
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
    3218:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    321c:	d104      	bne.n	3228 <am_hal_iom_i2c_write_nq+0x39c>
        ui32Status = AM_HAL_IOM_ERR_I2C_NAK;
    321e:	f013 0f10 	tst.w	r3, #16
    3222:	bf18      	it	ne
    3224:	2506      	movne	r5, #6
    3226:	e7f4      	b.n	3212 <am_hal_iom_i2c_write_nq+0x386>
        ui32Status = AM_HAL_IOM_ERR_I2C_ARB;
    3228:	2507      	movs	r5, #7
    322a:	e7f2      	b.n	3212 <am_hal_iom_i2c_write_nq+0x386>
    322c:	f508 7a01 	add.w	sl, r8, #516	; 0x204
    3230:	e79d      	b.n	316e <am_hal_iom_i2c_write_nq+0x2e2>
    3232:	bf00      	nop

00003234 <am_hal_iom_i2c_write>:
{
    3234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ( ui32Module > AM_REG_IOMSTR_NUM_MODULES )
    3238:	2806      	cmp	r0, #6
{
    323a:	b08d      	sub	sp, #52	; 0x34
    if ( ui32Module > AM_REG_IOMSTR_NUM_MODULES )
    323c:	d904      	bls.n	3248 <am_hal_iom_i2c_write+0x14>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    323e:	2602      	movs	r6, #2
}
    3240:	4630      	mov	r0, r6
    3242:	b00d      	add	sp, #52	; 0x34
    3244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3248:	461e      	mov	r6, r3
    324a:	4605      	mov	r5, r0
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    324c:	d014      	beq.n	3278 <am_hal_iom_i2c_write+0x44>
    324e:	4f49      	ldr	r7, [pc, #292]	; (3374 <am_hal_iom_i2c_write+0x140>)
    3250:	4690      	mov	r8, r2
    while ( g_bIomBusy[ui32Module] );
    3252:	5d7c      	ldrb	r4, [r7, r5]
    3254:	f004 03ff 	and.w	r3, r4, #255	; 0xff
    3258:	2c00      	cmp	r4, #0
    325a:	d1fa      	bne.n	3252 <am_hal_iom_i2c_write+0x1e>
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    325c:	f8df 9124 	ldr.w	r9, [pc, #292]	; 3384 <am_hal_iom_i2c_write+0x150>
    3260:	f809 3005 	strb.w	r3, [r9, r5]
    if (ui32NumBytes == 0)
    3264:	b10e      	cbz	r6, 326a <am_hal_iom_i2c_write+0x36>
    if (ui32NumBytes >= 256)
    3266:	2eff      	cmp	r6, #255	; 0xff
    3268:	d91f      	bls.n	32aa <am_hal_iom_i2c_write+0x76>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    326a:	2603      	movs	r6, #3
}
    326c:	4630      	mov	r0, r6
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    326e:	f809 6005 	strb.w	r6, [r9, r5]
}
    3272:	b00d      	add	sp, #52	; 0x34
    3274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    3278:	f8df 9108 	ldr.w	r9, [pc, #264]	; 3384 <am_hal_iom_i2c_write+0x150>
    327c:	2300      	movs	r3, #0
    327e:	f889 3006 	strb.w	r3, [r9, #6]
    if (ui32NumBytes == 0)
    3282:	2e00      	cmp	r6, #0
    3284:	d0f1      	beq.n	326a <am_hal_iom_i2c_write+0x36>
        if ( ui32Options & AM_HAL_IOM_RAW )
    3286:	9d16      	ldr	r5, [sp, #88]	; 0x58
    3288:	006c      	lsls	r4, r5, #1
    328a:	d55a      	bpl.n	3342 <am_hal_iom_i2c_write+0x10e>
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    328c:	004f      	lsls	r7, r1, #1
    328e:	f3c5 7400 	ubfx	r4, r5, #28, #1
    3292:	f007 00fe 	and.w	r0, r7, #254	; 0xfe
    3296:	9300      	str	r3, [sp, #0]
    3298:	4631      	mov	r1, r6
    329a:	9401      	str	r4, [sp, #4]
    329c:	f001 fc40 	bl	4b20 <am_hal_i2c_bit_bang_send>
        g_iom_error_status[ui32Module] = ui32Status = i2c_bb_errmap[i2cBBStatus];
    32a0:	4a35      	ldr	r2, [pc, #212]	; (3378 <am_hal_iom_i2c_write+0x144>)
    32a2:	5c16      	ldrb	r6, [r2, r0]
    32a4:	f889 6006 	strb.w	r6, [r9, #6]
        return ui32Status;
    32a8:	e7ca      	b.n	3240 <am_hal_iom_i2c_write+0xc>
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
    32aa:	4834      	ldr	r0, [pc, #208]	; (337c <am_hal_iom_i2c_write+0x148>)
    32ac:	9002      	str	r0, [sp, #8]
    32ae:	ea4f 0b45 	mov.w	fp, r5, lsl #1
    32b2:	eb0b 0205 	add.w	r2, fp, r5
    32b6:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
    32ba:	6963      	ldr	r3, [r4, #20]
    32bc:	2b00      	cmp	r3, #0
    32be:	d04f      	beq.n	3360 <am_hal_iom_i2c_write+0x12c>
    32c0:	9103      	str	r1, [sp, #12]
    ui32Critical = am_hal_interrupt_master_disable();
    32c2:	f7fe fa8d 	bl	17e0 <am_hal_interrupt_master_disable>
    32c6:	4682      	mov	sl, r0
    if ( (g_bIomBusy[ui32Module] == false) &&
    32c8:	5d78      	ldrb	r0, [r7, r5]
    32ca:	9903      	ldr	r1, [sp, #12]
    32cc:	9b02      	ldr	r3, [sp, #8]
    32ce:	b908      	cbnz	r0, 32d4 <am_hal_iom_i2c_write+0xa0>
    32d0:	68a2      	ldr	r2, [r4, #8]
    32d2:	b1d2      	cbz	r2, 330a <am_hal_iom_i2c_write+0xd6>
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    32d4:	eb0b 0405 	add.w	r4, fp, r5
    32d8:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_I2C_WRITE;
    32dc:	2702      	movs	r7, #2
        sIOMTransaction.pfnCallback = pfnCallback;
    32de:	2300      	movs	r3, #0
        sIOMTransaction.ui32ChipSelect = ui32BusAddress;
    32e0:	9107      	str	r1, [sp, #28]
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
    32e2:	9609      	str	r6, [sp, #36]	; 0x24
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    32e4:	2201      	movs	r2, #1
        sIOMTransaction.ui32Options = ui32Options;
    32e6:	9e16      	ldr	r6, [sp, #88]	; 0x58
        sIOMTransaction.ui32Module = ui32Module;
    32e8:	9506      	str	r5, [sp, #24]
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    32ea:	a905      	add	r1, sp, #20
        sIOMTransaction.pui32Data = pui32Data;
    32ec:	f8cd 8020 	str.w	r8, [sp, #32]
        sIOMTransaction.ui32Options = ui32Options;
    32f0:	960a      	str	r6, [sp, #40]	; 0x28
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_I2C_WRITE;
    32f2:	9705      	str	r7, [sp, #20]
        sIOMTransaction.pfnCallback = pfnCallback;
    32f4:	930b      	str	r3, [sp, #44]	; 0x2c
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    32f6:	f000 fd09 	bl	3d0c <am_hal_queue_item_add>
    32fa:	b9c0      	cbnz	r0, 332e <am_hal_iom_i2c_write+0xfa>
            ui32Status = AM_HAL_IOM_ERR_RESOURCE_ERR;
    32fc:	2608      	movs	r6, #8
    am_hal_interrupt_master_set(ui32Critical);
    32fe:	4650      	mov	r0, sl
        g_iom_error_status[ui32Module] = ui32Status;
    3300:	f809 6005 	strb.w	r6, [r9, r5]
    am_hal_interrupt_master_set(ui32Critical);
    3304:	f7fe fa70 	bl	17e8 <am_hal_interrupt_master_set>
    3308:	e79a      	b.n	3240 <am_hal_iom_i2c_write+0xc>
    while ( g_bIomBusy[ui32Module] );
    330a:	5d78      	ldrb	r0, [r7, r5]
    330c:	f000 04ff 	and.w	r4, r0, #255	; 0xff
    3310:	2800      	cmp	r0, #0
    3312:	d1fa      	bne.n	330a <am_hal_iom_i2c_write+0xd6>
    3314:	9a16      	ldr	r2, [sp, #88]	; 0x58
    3316:	9200      	str	r2, [sp, #0]
    3318:	4633      	mov	r3, r6
    331a:	9401      	str	r4, [sp, #4]
    331c:	4642      	mov	r2, r8
    331e:	4628      	mov	r0, r5
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    3320:	f809 4005 	strb.w	r4, [r9, r5]
    3324:	f7fe fb9e 	bl	1a64 <am_hal_iom_i2c_write_nb.part.8>
    if (ui32Status != AM_HAL_IOM_SUCCESS)
    3328:	4606      	mov	r6, r0
    332a:	2800      	cmp	r0, #0
    332c:	d1e7      	bne.n	32fe <am_hal_iom_i2c_write+0xca>
    am_hal_interrupt_master_set(ui32Critical);
    332e:	4650      	mov	r0, sl
    3330:	f7fe fa5a 	bl	17e8 <am_hal_interrupt_master_set>
            am_hal_iom_queue_flush(ui32Module);
    3334:	4912      	ldr	r1, [pc, #72]	; (3380 <am_hal_iom_i2c_write+0x14c>)
    3336:	4628      	mov	r0, r5
    3338:	680f      	ldr	r7, [r1, #0]
    333a:	47b8      	blx	r7
            ui32Status = g_iom_error_status[ui32Module];
    333c:	f819 6005 	ldrb.w	r6, [r9, r5]
    3340:	e77e      	b.n	3240 <am_hal_iom_i2c_write+0xc>
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    3342:	f3c5 7400 	ubfx	r4, r5, #28, #1
    3346:	2301      	movs	r3, #1
    3348:	e88d 0018 	stmia.w	sp, {r3, r4}
    334c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    334e:	0049      	lsls	r1, r1, #1
    3350:	f001 00fe 	and.w	r0, r1, #254	; 0xfe
    3354:	f3c3 2307 	ubfx	r3, r3, #8, #8
    3358:	4631      	mov	r1, r6
    335a:	f001 fbe1 	bl	4b20 <am_hal_i2c_bit_bang_send>
    335e:	e79f      	b.n	32a0 <am_hal_iom_i2c_write+0x6c>
        ui32Status = am_hal_iom_i2c_write_nq(ui32Module, ui32BusAddress, pui32Data,
    3360:	9f16      	ldr	r7, [sp, #88]	; 0x58
    3362:	9700      	str	r7, [sp, #0]
    3364:	4633      	mov	r3, r6
    3366:	4642      	mov	r2, r8
    3368:	4628      	mov	r0, r5
    336a:	f7ff fd8f 	bl	2e8c <am_hal_iom_i2c_write_nq>
    336e:	4606      	mov	r6, r0
    3370:	e766      	b.n	3240 <am_hal_iom_i2c_write+0xc>
    3372:	bf00      	nop
    3374:	1000114c 	.word	0x1000114c
    3378:	00005488 	.word	0x00005488
    337c:	100015bc 	.word	0x100015bc
    3380:	10001034 	.word	0x10001034
    3384:	10001154 	.word	0x10001154

00003388 <am_hal_iom_i2c_write_nb>:
    if ( ui32Module > AM_REG_IOMSTR_NUM_MODULES )
    3388:	2806      	cmp	r0, #6
    338a:	d901      	bls.n	3390 <am_hal_iom_i2c_write_nb+0x8>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    338c:	2002      	movs	r0, #2
    338e:	4770      	bx	lr
{
    3390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3394:	461e      	mov	r6, r3
    3396:	b084      	sub	sp, #16
    3398:	4688      	mov	r8, r1
    339a:	4605      	mov	r5, r0
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    339c:	d010      	beq.n	33c0 <am_hal_iom_i2c_write_nb+0x38>
    339e:	4b76      	ldr	r3, [pc, #472]	; (3578 <am_hal_iom_i2c_write_nb+0x1f0>)
    33a0:	4617      	mov	r7, r2
    while ( g_bIomBusy[ui32Module] );
    33a2:	5d5c      	ldrb	r4, [r3, r5]
    33a4:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    33a8:	2c00      	cmp	r4, #0
    33aa:	d1fa      	bne.n	33a2 <am_hal_iom_i2c_write_nb+0x1a>
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    33ac:	4c73      	ldr	r4, [pc, #460]	; (357c <am_hal_iom_i2c_write_nb+0x1f4>)
    33ae:	5560      	strb	r0, [r4, r5]
    if (ui32NumBytes == 0)
    33b0:	b10e      	cbz	r6, 33b6 <am_hal_iom_i2c_write_nb+0x2e>
    if (ui32NumBytes >= 256)
    33b2:	2eff      	cmp	r6, #255	; 0xff
    33b4:	d922      	bls.n	33fc <am_hal_iom_i2c_write_nb+0x74>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    33b6:	2003      	movs	r0, #3
    33b8:	5560      	strb	r0, [r4, r5]
}
    33ba:	b004      	add	sp, #16
    33bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    33c0:	4c6e      	ldr	r4, [pc, #440]	; (357c <am_hal_iom_i2c_write_nb+0x1f4>)
    33c2:	2300      	movs	r3, #0
    33c4:	71a3      	strb	r3, [r4, #6]
    if (ui32NumBytes == 0)
    33c6:	2e00      	cmp	r6, #0
    33c8:	d0f5      	beq.n	33b6 <am_hal_iom_i2c_write_nb+0x2e>
        if ( ui32Options & AM_HAL_IOM_RAW )
    33ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    33cc:	0068      	lsls	r0, r5, #1
    33ce:	f140 80bb 	bpl.w	3548 <am_hal_iom_i2c_write_nb+0x1c0>
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    33d2:	ea4f 0c48 	mov.w	ip, r8, lsl #1
    33d6:	f3c5 7500 	ubfx	r5, r5, #28, #1
    33da:	f00c 00fe 	and.w	r0, ip, #254	; 0xfe
    33de:	9300      	str	r3, [sp, #0]
    33e0:	4631      	mov	r1, r6
    33e2:	9501      	str	r5, [sp, #4]
    33e4:	f001 fb9c 	bl	4b20 <am_hal_i2c_bit_bang_send>
        g_iom_error_status[ui32Module] = ui32Status = i2c_bb_errmap[i2cBBStatus];
    33e8:	4a65      	ldr	r2, [pc, #404]	; (3580 <am_hal_iom_i2c_write_nb+0x1f8>)
    33ea:	5c10      	ldrb	r0, [r2, r0]
    33ec:	71a0      	strb	r0, [r4, #6]
        if ( pfnCallback )
    33ee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    33f0:	2c00      	cmp	r4, #0
    33f2:	d0e2      	beq.n	33ba <am_hal_iom_i2c_write_nb+0x32>
    33f4:	9003      	str	r0, [sp, #12]
            pfnCallback();
    33f6:	47a0      	blx	r4
    33f8:	9803      	ldr	r0, [sp, #12]
    33fa:	e7de      	b.n	33ba <am_hal_iom_i2c_write_nb+0x32>
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    33fc:	f505 29a0 	add.w	r9, r5, #327680	; 0x50000
    3400:	f109 0104 	add.w	r1, r9, #4
    3404:	ea4f 3901 	mov.w	r9, r1, lsl #12
    g_bIomBusy[ui32Module] = true;
    3408:	2201      	movs	r2, #1
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    340a:	f8d9 011c 	ldr.w	r0, [r9, #284]	; 0x11c
    g_bIomBusy[ui32Module] = true;
    340e:	555a      	strb	r2, [r3, r5]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    3410:	f240 73ff 	movw	r3, #2047	; 0x7ff
    3414:	f8c9 3208 	str.w	r3, [r9, #520]	; 0x208
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    3418:	f8d9 111c 	ldr.w	r1, [r9, #284]	; 0x11c
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    341c:	f8d9 2100 	ldr.w	r2, [r9, #256]	; 0x100
                       AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    3420:	f010 0f08 	tst.w	r0, #8
    3424:	bf14      	ite	ne
    3426:	f04f 0a40 	movne.w	sl, #64	; 0x40
    342a:	f04f 0a80 	moveq.w	sl, #128	; 0x80
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    342e:	f011 0f08 	tst.w	r1, #8
    3432:	bf14      	ite	ne
    3434:	2140      	movne	r1, #64	; 0x40
    3436:	2180      	moveq	r1, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    3438:	1a88      	subs	r0, r1, r2
    ui32TransferSize = (ui32NumBytes <= ui32MaxFifoSize ? ui32NumBytes :
    343a:	45b2      	cmp	sl, r6
    343c:	bf28      	it	cs
    343e:	46b2      	movcs	sl, r6
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    3440:	f000 0cfc 	and.w	ip, r0, #252	; 0xfc
    3444:	45e2      	cmp	sl, ip
    3446:	f200 808f 	bhi.w	3568 <am_hal_iom_i2c_write_nb+0x1e0>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    344a:	463a      	mov	r2, r7
    344c:	43fb      	mvns	r3, r7
    344e:	f852 1b04 	ldr.w	r1, [r2], #4
    3452:	f8c9 1000 	str.w	r1, [r9]
    3456:	443b      	add	r3, r7
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    3458:	1bd0      	subs	r0, r2, r7
    345a:	4453      	add	r3, sl
    345c:	4582      	cmp	sl, r0
    345e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    3462:	d950      	bls.n	3506 <am_hal_iom_i2c_write_nb+0x17e>
    3464:	b353      	cbz	r3, 34bc <am_hal_iom_i2c_write_nb+0x134>
    3466:	2b01      	cmp	r3, #1
    3468:	d021      	beq.n	34ae <am_hal_iom_i2c_write_nb+0x126>
    346a:	2b02      	cmp	r3, #2
    346c:	d01b      	beq.n	34a6 <am_hal_iom_i2c_write_nb+0x11e>
    346e:	2b03      	cmp	r3, #3
    3470:	d015      	beq.n	349e <am_hal_iom_i2c_write_nb+0x116>
    3472:	2b04      	cmp	r3, #4
    3474:	d00f      	beq.n	3496 <am_hal_iom_i2c_write_nb+0x10e>
    3476:	2b05      	cmp	r3, #5
    3478:	d009      	beq.n	348e <am_hal_iom_i2c_write_nb+0x106>
    347a:	2b06      	cmp	r3, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    347c:	bf1c      	itt	ne
    347e:	f852 3b04 	ldrne.w	r3, [r2], #4
    3482:	f8c9 3000 	strne.w	r3, [r9]
    3486:	f852 1b04 	ldr.w	r1, [r2], #4
    348a:	f8c9 1000 	str.w	r1, [r9]
    348e:	f852 0b04 	ldr.w	r0, [r2], #4
    3492:	f8c9 0000 	str.w	r0, [r9]
    3496:	f852 3b04 	ldr.w	r3, [r2], #4
    349a:	f8c9 3000 	str.w	r3, [r9]
    349e:	f852 1b04 	ldr.w	r1, [r2], #4
    34a2:	f8c9 1000 	str.w	r1, [r9]
    34a6:	f852 0b04 	ldr.w	r0, [r2], #4
    34aa:	f8c9 0000 	str.w	r0, [r9]
    34ae:	f852 3b04 	ldr.w	r3, [r2], #4
    34b2:	f8c9 3000 	str.w	r3, [r9]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    34b6:	1bd1      	subs	r1, r2, r7
    34b8:	458a      	cmp	sl, r1
    34ba:	d924      	bls.n	3506 <am_hal_iom_i2c_write_nb+0x17e>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    34bc:	4696      	mov	lr, r2
    34be:	3220      	adds	r2, #32
    34c0:	f85e 0b04 	ldr.w	r0, [lr], #4
    34c4:	f8c9 0000 	str.w	r0, [r9]
    34c8:	f852 3c1c 	ldr.w	r3, [r2, #-28]
    34cc:	f8c9 3000 	str.w	r3, [r9]
    34d0:	f8de 1004 	ldr.w	r1, [lr, #4]
    34d4:	f8c9 1000 	str.w	r1, [r9]
    34d8:	f852 0c14 	ldr.w	r0, [r2, #-20]
    34dc:	f8c9 0000 	str.w	r0, [r9]
    34e0:	f852 3c10 	ldr.w	r3, [r2, #-16]
    34e4:	f8c9 3000 	str.w	r3, [r9]
    34e8:	f852 1c0c 	ldr.w	r1, [r2, #-12]
    34ec:	f8c9 1000 	str.w	r1, [r9]
    34f0:	f852 0c08 	ldr.w	r0, [r2, #-8]
    34f4:	f8c9 0000 	str.w	r0, [r9]
    34f8:	f852 3c04 	ldr.w	r3, [r2, #-4]
    34fc:	f8c9 3000 	str.w	r3, [r9]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    3500:	1bd1      	subs	r1, r2, r7
    3502:	458a      	cmp	sl, r1
    3504:	d8da      	bhi.n	34bc <am_hal_iom_i2c_write_nb+0x134>
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    3506:	491f      	ldr	r1, [pc, #124]	; (3584 <am_hal_iom_i2c_write_nb+0x1fc>)
    3508:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    350a:	9200      	str	r2, [sp, #0]
    350c:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    3510:	0083      	lsls	r3, r0, #2
    3512:	eb01 0903 	add.w	r9, r1, r3
    3516:	2001      	movs	r0, #1
    3518:	4642      	mov	r2, r8
        g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    351a:	f02a 0803 	bic.w	r8, sl, #3
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    351e:	50c8      	str	r0, [r1, r3]
        g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
    3520:	eba6 0a0a 	sub.w	sl, r6, sl
        g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    3524:	4447      	add	r7, r8
    3526:	4633      	mov	r3, r6
        g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    3528:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    352a:	f8c9 6010 	str.w	r6, [r9, #16]
    352e:	4629      	mov	r1, r5
    3530:	2000      	movs	r0, #0
        g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
    3532:	f8c9 a008 	str.w	sl, [r9, #8]
        g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    3536:	f8c9 7004 	str.w	r7, [r9, #4]
    353a:	f7fe f98d 	bl	1858 <am_hal_iom_i2c_cmd_run.part.1>
        if (ui32Status != AM_HAL_IOM_SUCCESS)
    353e:	2800      	cmp	r0, #0
    3540:	f43f af3b 	beq.w	33ba <am_hal_iom_i2c_write_nb+0x32>
            g_iom_error_status[ui32Module] = ui32Status;
    3544:	5560      	strb	r0, [r4, r5]
    3546:	e738      	b.n	33ba <am_hal_iom_i2c_write_nb+0x32>
            i2cBBStatus = am_hal_i2c_bit_bang_send(ui32BusAddress << 1, ui32NumBytes,
    3548:	f3c5 7500 	ubfx	r5, r5, #28, #1
    354c:	2301      	movs	r3, #1
    354e:	e88d 0028 	stmia.w	sp, {r3, r5}
    3552:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3554:	ea4f 0748 	mov.w	r7, r8, lsl #1
    3558:	f007 00fe 	and.w	r0, r7, #254	; 0xfe
    355c:	4631      	mov	r1, r6
    355e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    3562:	f001 fadd 	bl	4b20 <am_hal_i2c_bit_bang_send>
    3566:	e73f      	b.n	33e8 <am_hal_iom_i2c_write_nb+0x60>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    3568:	4a07      	ldr	r2, [pc, #28]	; (3588 <am_hal_iom_i2c_write_nb+0x200>)
    356a:	4808      	ldr	r0, [pc, #32]	; (358c <am_hal_iom_i2c_write_nb+0x204>)
    356c:	f640 7145 	movw	r1, #3909	; 0xf45
    3570:	f7fe f862 	bl	1638 <am_hal_debug_error>
    3574:	e769      	b.n	344a <am_hal_iom_i2c_write_nb+0xc2>
    3576:	bf00      	nop
    3578:	1000114c 	.word	0x1000114c
    357c:	10001154 	.word	0x10001154
    3580:	00005488 	.word	0x00005488
    3584:	10001544 	.word	0x10001544
    3588:	00005378 	.word	0x00005378
    358c:	000053ac 	.word	0x000053ac

00003590 <am_hal_iom_i2c_read_nb>:
    if ( ui32Module > AM_REG_IOMSTR_NUM_MODULES )
    3590:	2806      	cmp	r0, #6
    3592:	d901      	bls.n	3598 <am_hal_iom_i2c_read_nb+0x8>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    3594:	2002      	movs	r0, #2
    3596:	4770      	bx	lr
{
    3598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    359c:	469e      	mov	lr, r3
    359e:	b084      	sub	sp, #16
    35a0:	4605      	mov	r5, r0
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    35a2:	d013      	beq.n	35cc <am_hal_iom_i2c_read_nb+0x3c>
    35a4:	4835      	ldr	r0, [pc, #212]	; (367c <am_hal_iom_i2c_read_nb+0xec>)
    35a6:	4617      	mov	r7, r2
    while ( g_bIomBusy[ui32Module] );
    35a8:	5d44      	ldrb	r4, [r0, r5]
    35aa:	f004 06ff 	and.w	r6, r4, #255	; 0xff
    35ae:	2c00      	cmp	r4, #0
    35b0:	d1fa      	bne.n	35a8 <am_hal_iom_i2c_read_nb+0x18>
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    35b2:	4c33      	ldr	r4, [pc, #204]	; (3680 <am_hal_iom_i2c_read_nb+0xf0>)
    35b4:	5566      	strb	r6, [r4, r5]
    if (ui32NumBytes == 0)
    35b6:	f1be 0f00 	cmp.w	lr, #0
    35ba:	d002      	beq.n	35c2 <am_hal_iom_i2c_read_nb+0x32>
    if (ui32NumBytes >= 256)
    35bc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
    35c0:	d923      	bls.n	360a <am_hal_iom_i2c_read_nb+0x7a>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    35c2:	2003      	movs	r0, #3
    35c4:	5560      	strb	r0, [r4, r5]
}
    35c6:	b004      	add	sp, #16
    35c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    35cc:	4c2c      	ldr	r4, [pc, #176]	; (3680 <am_hal_iom_i2c_read_nb+0xf0>)
    35ce:	2300      	movs	r3, #0
    35d0:	71a3      	strb	r3, [r4, #6]
    if (ui32NumBytes == 0)
    35d2:	f1be 0f00 	cmp.w	lr, #0
    35d6:	d0f4      	beq.n	35c2 <am_hal_iom_i2c_read_nb+0x32>
        if ( ui32Options & AM_HAL_IOM_RAW )
    35d8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    35da:	0075      	lsls	r5, r6, #1
    35dc:	d53d      	bpl.n	365a <am_hal_iom_i2c_read_nb+0xca>
            i2cBBStatus = am_hal_i2c_bit_bang_receive((ui32BusAddress << 1) | 1, ui32NumBytes,
    35de:	0048      	lsls	r0, r1, #1
    35e0:	990a      	ldr	r1, [sp, #40]	; 0x28
    35e2:	9300      	str	r3, [sp, #0]
    35e4:	f3c1 7500 	ubfx	r5, r1, #28, #1
    35e8:	f040 0601 	orr.w	r6, r0, #1
    35ec:	b2f0      	uxtb	r0, r6
    35ee:	4671      	mov	r1, lr
    35f0:	9501      	str	r5, [sp, #4]
    35f2:	f000 fe43 	bl	427c <am_hal_i2c_bit_bang_receive>
        g_iom_error_status[ui32Module] = ui32Status = i2c_bb_errmap[i2cBBStatus];
    35f6:	4a23      	ldr	r2, [pc, #140]	; (3684 <am_hal_iom_i2c_read_nb+0xf4>)
    35f8:	5c10      	ldrb	r0, [r2, r0]
    35fa:	71a0      	strb	r0, [r4, #6]
        if ( pfnCallback )
    35fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    35fe:	2c00      	cmp	r4, #0
    3600:	d0e1      	beq.n	35c6 <am_hal_iom_i2c_read_nb+0x36>
    3602:	9003      	str	r0, [sp, #12]
            pfnCallback();
    3604:	47a0      	blx	r4
    3606:	9803      	ldr	r0, [sp, #12]
    3608:	e7dd      	b.n	35c6 <am_hal_iom_i2c_read_nb+0x36>
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    360a:	f505 22a0 	add.w	r2, r5, #327680	; 0x50000
    360e:	3204      	adds	r2, #4
    3610:	0316      	lsls	r6, r2, #12
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    3612:	f8df c074 	ldr.w	ip, [pc, #116]	; 3688 <am_hal_iom_i2c_read_nb+0xf8>
    3616:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    361a:	009b      	lsls	r3, r3, #2
    g_bIomBusy[ui32Module] = true;
    361c:	f04f 0801 	mov.w	r8, #1
    3620:	460a      	mov	r2, r1
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    3622:	f240 71ff 	movw	r1, #2047	; 0x7ff
    g_bIomBusy[ui32Module] = true;
    3626:	f800 8005 	strb.w	r8, [r0, r5]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    362a:	f8c6 1208 	str.w	r1, [r6, #520]	; 0x208
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    362e:	eb0c 0603 	add.w	r6, ip, r3
    3632:	980a      	ldr	r0, [sp, #40]	; 0x28
    3634:	9000      	str	r0, [sp, #0]
    3636:	2102      	movs	r1, #2
    g_psIOMBuffers[ui32Module].pui32Data = pui32Data;
    3638:	6077      	str	r7, [r6, #4]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    363a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    363c:	f84c 1003 	str.w	r1, [ip, r3]
    3640:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    3644:	4673      	mov	r3, lr
    3646:	4629      	mov	r1, r5
    g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes;
    3648:	f8c6 e008 	str.w	lr, [r6, #8]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    364c:	6137      	str	r7, [r6, #16]
    364e:	f7fe f903 	bl	1858 <am_hal_iom_i2c_cmd_run.part.1>
    if (ui32Status != AM_HAL_IOM_SUCCESS)
    3652:	2800      	cmp	r0, #0
    3654:	d0b7      	beq.n	35c6 <am_hal_iom_i2c_read_nb+0x36>
        g_iom_error_status[ui32Module] = ui32Status;
    3656:	5560      	strb	r0, [r4, r5]
    3658:	e7b5      	b.n	35c6 <am_hal_iom_i2c_read_nb+0x36>
            i2cBBStatus = am_hal_i2c_bit_bang_receive((ui32BusAddress << 1) | 1, ui32NumBytes,
    365a:	004b      	lsls	r3, r1, #1
    365c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    365e:	f043 0c01 	orr.w	ip, r3, #1
    3662:	f3c6 7500 	ubfx	r5, r6, #28, #1
    3666:	2301      	movs	r3, #1
    3668:	e88d 0028 	stmia.w	sp, {r3, r5}
    366c:	fa5f f08c 	uxtb.w	r0, ip
    3670:	4671      	mov	r1, lr
    3672:	f3c7 2307 	ubfx	r3, r7, #8, #8
    3676:	f000 fe01 	bl	427c <am_hal_i2c_bit_bang_receive>
    367a:	e7bc      	b.n	35f6 <am_hal_iom_i2c_read_nb+0x66>
    367c:	1000114c 	.word	0x1000114c
    3680:	10001154 	.word	0x10001154
    3684:	00005488 	.word	0x00005488
    3688:	10001544 	.word	0x10001544

0000368c <am_hal_iom_queue_init>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    368c:	2805      	cmp	r0, #5
    368e:	d900      	bls.n	3692 <am_hal_iom_queue_init+0x6>
    3690:	4770      	bx	lr
{
    3692:	b410      	push	{r4}
    am_hal_queue_init(&g_psIOMQueue[ui32Module], psQueueMemory,
    3694:	4c05      	ldr	r4, [pc, #20]	; (36ac <am_hal_iom_queue_init+0x20>)
    3696:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    369a:	4613      	mov	r3, r2
    369c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    36a0:	221c      	movs	r2, #28
}
    36a2:	f85d 4b04 	ldr.w	r4, [sp], #4
    am_hal_queue_init(&g_psIOMQueue[ui32Module], psQueueMemory,
    36a6:	f000 bb25 	b.w	3cf4 <am_hal_queue_init>
    36aa:	bf00      	nop
    36ac:	100015bc 	.word	0x100015bc

000036b0 <am_hal_iom_queue_service>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    36b0:	2805      	cmp	r0, #5
    36b2:	d900      	bls.n	36b6 <am_hal_iom_queue_service+0x6>
    36b4:	4770      	bx	lr
{
    36b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    36ba:	460d      	mov	r5, r1
    36bc:	b08a      	sub	sp, #40	; 0x28
    36be:	4604      	mov	r4, r0
    36c0:	f7fe fabc 	bl	1c3c <am_hal_iom_int_service.part.20>
    if ( ui32Status & AM_HAL_IOM_INT_CMDCMP )
    36c4:	07eb      	lsls	r3, r5, #31
    36c6:	d532      	bpl.n	372e <am_hal_iom_queue_service+0x7e>
        if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
    36c8:	483c      	ldr	r0, [pc, #240]	; (37bc <am_hal_iom_queue_service+0x10c>)
    36ca:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    36ce:	eb00 07c3 	add.w	r7, r0, r3, lsl #3
    36d2:	6979      	ldr	r1, [r7, #20]
    36d4:	b359      	cbz	r1, 372e <am_hal_iom_queue_service+0x7e>
    am_hal_iom_queue_entry_t sIOMTransaction = {0};
    36d6:	2200      	movs	r2, #0
    36d8:	9204      	str	r2, [sp, #16]
    36da:	9203      	str	r2, [sp, #12]
    36dc:	9205      	str	r2, [sp, #20]
    36de:	9206      	str	r2, [sp, #24]
    36e0:	9207      	str	r2, [sp, #28]
    36e2:	9208      	str	r2, [sp, #32]
    36e4:	9209      	str	r2, [sp, #36]	; 0x24
    ui32Critical = am_hal_interrupt_master_disable();
    36e6:	f7fe f87b 	bl	17e0 <am_hal_interrupt_master_disable>
    if ( am_hal_queue_item_get(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) )
    36ea:	a903      	add	r1, sp, #12
    ui32Critical = am_hal_interrupt_master_disable();
    36ec:	4606      	mov	r6, r0
    if ( am_hal_queue_item_get(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) )
    36ee:	2201      	movs	r2, #1
    36f0:	4638      	mov	r0, r7
    36f2:	f000 fb9b 	bl	3e2c <am_hal_queue_item_get>
    36f6:	b1e8      	cbz	r0, 3734 <am_hal_iom_queue_service+0x84>
        switch ( sIOMTransaction.ui32Operation )
    36f8:	9803      	ldr	r0, [sp, #12]
        pfnCallback = sIOMTransaction.pfnCallback;
    36fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
        ui32Options = sIOMTransaction.ui32Options;
    36fc:	f10d 0814 	add.w	r8, sp, #20
    3700:	e898 008e 	ldmia.w	r8, {r1, r2, r3, r7}
        switch ( sIOMTransaction.ui32Operation )
    3704:	2803      	cmp	r0, #3
    3706:	d815      	bhi.n	3734 <am_hal_iom_queue_service+0x84>
    3708:	e8df f000 	tbb	[pc, r0]
    370c:	024a1831 	.word	0x024a1831
                ui32Status = am_hal_iom_i2c_read_nb(ui32Module, ui32ChipSelect, pui32Data,
    3710:	9700      	str	r7, [sp, #0]
    3712:	9501      	str	r5, [sp, #4]
    3714:	4620      	mov	r0, r4
    3716:	f7ff ff3b 	bl	3590 <am_hal_iom_i2c_read_nb>
    371a:	4607      	mov	r7, r0
    am_hal_interrupt_master_set(ui32Critical);
    371c:	4630      	mov	r0, r6
    371e:	f7fe f863 	bl	17e8 <am_hal_interrupt_master_set>
    if (ui32Status != AM_HAL_IOM_SUCCESS)
    3722:	b127      	cbz	r7, 372e <am_hal_iom_queue_service+0x7e>
    3724:	f8df 8098 	ldr.w	r8, [pc, #152]	; 37c0 <am_hal_iom_queue_service+0x110>
        g_iom_error_status[ui32Module] = ui32Status;
    3728:	f808 7004 	strb.w	r7, [r8, r4]
        pfnCallback();
    372c:	47a8      	blx	r5
}
    372e:	b00a      	add	sp, #40	; 0x28
    3730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    am_hal_interrupt_master_set(ui32Critical);
    3734:	4630      	mov	r0, r6
    3736:	f7fe f857 	bl	17e8 <am_hal_interrupt_master_set>
    373a:	e7f8      	b.n	372e <am_hal_iom_queue_service+0x7e>
    373c:	f8df e084 	ldr.w	lr, [pc, #132]	; 37c4 <am_hal_iom_queue_service+0x114>
    while ( g_bIomBusy[ui32Module] );
    3740:	f81e 0004 	ldrb.w	r0, [lr, r4]
    3744:	f000 0cff 	and.w	ip, r0, #255	; 0xff
    3748:	2800      	cmp	r0, #0
    374a:	d1f9      	bne.n	3740 <am_hal_iom_queue_service+0x90>
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    374c:	f8df 8070 	ldr.w	r8, [pc, #112]	; 37c0 <am_hal_iom_queue_service+0x110>
    if (ui32NumBytes == 0)
    3750:	f103 3eff 	add.w	lr, r3, #4294967295
    3754:	f640 70fe 	movw	r0, #4094	; 0xffe
    3758:	4586      	cmp	lr, r0
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    375a:	f808 c004 	strb.w	ip, [r8, r4]
    if (ui32NumBytes == 0)
    375e:	d926      	bls.n	37ae <am_hal_iom_queue_service+0xfe>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    3760:	2703      	movs	r7, #3
    am_hal_interrupt_master_set(ui32Critical);
    3762:	4630      	mov	r0, r6
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    3764:	f808 7004 	strb.w	r7, [r8, r4]
    am_hal_interrupt_master_set(ui32Critical);
    3768:	f7fe f83e 	bl	17e8 <am_hal_interrupt_master_set>
    376c:	e7dc      	b.n	3728 <am_hal_iom_queue_service+0x78>
    376e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 37c4 <am_hal_iom_queue_service+0x114>
    while ( g_bIomBusy[ui32Module] );
    3772:	f818 0004 	ldrb.w	r0, [r8, r4]
    3776:	f000 0cff 	and.w	ip, r0, #255	; 0xff
    377a:	2800      	cmp	r0, #0
    377c:	d1f9      	bne.n	3772 <am_hal_iom_queue_service+0xc2>
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    377e:	f8df 8040 	ldr.w	r8, [pc, #64]	; 37c0 <am_hal_iom_queue_service+0x110>
    if (ui32NumBytes == 0)
    3782:	f103 3eff 	add.w	lr, r3, #4294967295
    3786:	f640 70fe 	movw	r0, #4094	; 0xffe
    378a:	4586      	cmp	lr, r0
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    378c:	f808 c004 	strb.w	ip, [r8, r4]
    if (ui32NumBytes == 0)
    3790:	d8e6      	bhi.n	3760 <am_hal_iom_queue_service+0xb0>
    3792:	9700      	str	r7, [sp, #0]
    3794:	9501      	str	r5, [sp, #4]
    3796:	4620      	mov	r0, r4
    3798:	f7ff fa06 	bl	2ba8 <am_hal_iom_spi_write_nb.part.6>
    379c:	4607      	mov	r7, r0
    379e:	e7bd      	b.n	371c <am_hal_iom_queue_service+0x6c>
                ui32Status = am_hal_iom_i2c_write_nb(ui32Module, ui32ChipSelect, pui32Data,
    37a0:	9700      	str	r7, [sp, #0]
    37a2:	9501      	str	r5, [sp, #4]
    37a4:	4620      	mov	r0, r4
    37a6:	f7ff fdef 	bl	3388 <am_hal_iom_i2c_write_nb>
    37aa:	4607      	mov	r7, r0
    37ac:	e7b6      	b.n	371c <am_hal_iom_queue_service+0x6c>
    37ae:	9700      	str	r7, [sp, #0]
    37b0:	9501      	str	r5, [sp, #4]
    37b2:	4620      	mov	r0, r4
    37b4:	f7ff fae4 	bl	2d80 <am_hal_iom_spi_read_nb.part.7>
    37b8:	4607      	mov	r7, r0
    37ba:	e7af      	b.n	371c <am_hal_iom_queue_service+0x6c>
    37bc:	100015bc 	.word	0x100015bc
    37c0:	10001154 	.word	0x10001154
    37c4:	1000114c 	.word	0x1000114c

000037c8 <am_hal_iom_int_enable>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    37c8:	2805      	cmp	r0, #5
    37ca:	d808      	bhi.n	37de <am_hal_iom_int_enable+0x16>
    AM_REGn(IOMSTR, ui32Module, INTEN) |= ui32Interrupt;
    37cc:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
    37d0:	3004      	adds	r0, #4
    37d2:	0302      	lsls	r2, r0, #12
    37d4:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    37d8:	4319      	orrs	r1, r3
    37da:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    37de:	4770      	bx	lr

000037e0 <am_hal_iom_int_clear>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    37e0:	2805      	cmp	r0, #5
    37e2:	d805      	bhi.n	37f0 <am_hal_iom_int_clear+0x10>
    AM_REGn(IOMSTR, ui32Module, INTCLR) = ui32Interrupt;
    37e4:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
    37e8:	3004      	adds	r0, #4
    37ea:	0302      	lsls	r2, r0, #12
    37ec:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    37f0:	4770      	bx	lr
    37f2:	bf00      	nop

000037f4 <am_hal_iom_int_status_get>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    37f4:	2805      	cmp	r0, #5
    37f6:	d80d      	bhi.n	3814 <am_hal_iom_int_status_get+0x20>
        uint32_t u32RetVal = AM_REGn(IOMSTR, ui32Module, INTSTAT);
    37f8:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
    37fc:	3004      	adds	r0, #4
    37fe:	0302      	lsls	r2, r0, #12
    if ( bEnabledOnly )
    3800:	b911      	cbnz	r1, 3808 <am_hal_iom_int_status_get+0x14>
        return AM_REGn(IOMSTR, ui32Module, INTSTAT);
    3802:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
    3806:	4770      	bx	lr
        uint32_t u32RetVal = AM_REGn(IOMSTR, ui32Module, INTSTAT);
    3808:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
        return u32RetVal & AM_REGn(IOMSTR, ui32Module, INTEN);
    380c:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    3810:	4018      	ands	r0, r3
    3812:	4770      	bx	lr
        return 0;
    3814:	2000      	movs	r0, #0
    }
}
    3816:	4770      	bx	lr

00003818 <am_hal_ios_config>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ios_config(am_hal_ios_config_t *psConfig)
{
    3818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    381a:	4604      	mov	r4, r0
    uint32_t ui32LRAMConfig;

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_IOS);
    381c:	2001      	movs	r0, #1
    381e:	f000 f8a3 	bl	3968 <am_hal_pwrctrl_periph_enable>

    //
    // Record the FIFO parameters for later use.
    //
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    3822:	68a3      	ldr	r3, [r4, #8]
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    3824:	68e1      	ldr	r1, [r4, #12]
    g_ui32HwFifoSize = g_pui8FIFOEnd - g_pui8FIFOBase;
    g_ui32FifoBaseOffset = psConfig->ui32FIFOBase;
    3826:	4a1c      	ldr	r2, [pc, #112]	; (3898 <am_hal_ios_config+0x80>)
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    3828:	481c      	ldr	r0, [pc, #112]	; (389c <am_hal_ios_config+0x84>)
    g_ui32FifoBaseOffset = psConfig->ui32FIFOBase;
    382a:	6013      	str	r3, [r2, #0]
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    382c:	f101 45a0 	add.w	r5, r1, #1342177280	; 0x50000000
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    3830:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    g_ui32HwFifoSize = g_pui8FIFOEnd - g_pui8FIFOBase;
    3834:	4f1a      	ldr	r7, [pc, #104]	; (38a0 <am_hal_ios_config+0x88>)
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    3836:	6002      	str	r2, [r0, #0]
    g_ui32HwFifoSize = g_pui8FIFOEnd - g_pui8FIFOBase;
    3838:	1aa8      	subs	r0, r5, r2
    383a:	7038      	strb	r0, [r7, #0]
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    383c:	4e19      	ldr	r6, [pc, #100]	; (38a4 <am_hal_ios_config+0x8c>)
    AM_REGn(IOSLAVE, ui32Module, CFG) &= ~(AM_REG_IOSLAVE_CFG_IFCEN(1));
    383e:	4f1a      	ldr	r7, [pc, #104]	; (38a8 <am_hal_ios_config+0x90>)

    //
    // Caluclate the value for the IO Slave FIFO configuration register.
    //
    ui32LRAMConfig = AM_REG_IOSLAVE_FIFOCFG_ROBASE(psConfig->ui32ROBase >> 3);
    3840:	6862      	ldr	r2, [r4, #4]
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    3842:	6035      	str	r5, [r6, #0]
    AM_REGn(IOSLAVE, ui32Module, CFG) &= ~(AM_REG_IOSLAVE_CFG_IFCEN(1));
    3844:	683d      	ldr	r5, [r7, #0]
    AM_REG(IOSLAVE, CFG) = psConfig->ui32InterfaceSelect;

    //
    // Write the FIFO configuration register to set the memory map for the LRAM.
    //
    AM_REG(IOSLAVE, FIFOCFG) = ui32LRAMConfig;
    3846:	4e19      	ldr	r6, [pc, #100]	; (38ac <am_hal_ios_config+0x94>)
    ui32LRAMConfig = AM_REG_IOSLAVE_FIFOCFG_ROBASE(psConfig->ui32ROBase >> 3);
    3848:	0550      	lsls	r0, r2, #21
    ui32LRAMConfig |= AM_REG_IOSLAVE_FIFOCFG_FIFOMAX(psConfig->ui32RAMBase >> 3);
    384a:	0149      	lsls	r1, r1, #5
    384c:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
    ui32LRAMConfig = AM_REG_IOSLAVE_FIFOCFG_ROBASE(psConfig->ui32ROBase >> 3);
    3850:	f000 527c 	and.w	r2, r0, #1056964608	; 0x3f000000
    AM_REGn(IOSLAVE, ui32Module, CFG) &= ~(AM_REG_IOSLAVE_CFG_IFCEN(1));
    3854:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
    3858:	603d      	str	r5, [r7, #0]
    385a:	430a      	orrs	r2, r1
    ui32LRAMConfig |= AM_REG_IOSLAVE_FIFOCFG_FIFOBASE(psConfig->ui32FIFOBase >> 3);
    385c:	f3c3 03c4 	ubfx	r3, r3, #3, #5
    AM_REG(IOSLAVE, CFG) = psConfig->ui32InterfaceSelect;
    3860:	6820      	ldr	r0, [r4, #0]
    3862:	6038      	str	r0, [r7, #0]
    ui32LRAMConfig |= AM_REG_IOSLAVE_FIFOCFG_FIFOMAX(psConfig->ui32RAMBase >> 3);
    3864:	4313      	orrs	r3, r2
    AM_REG(IOSLAVE, FIFOCFG) = ui32LRAMConfig;
    3866:	6033      	str	r3, [r6, #0]
    AM_REGn(IOSLAVE, ui32Module, CFG) |= AM_REG_IOSLAVE_CFG_IFCEN(1);
    3868:	6839      	ldr	r1, [r7, #0]
    386a:	f041 4200 	orr.w	r2, r1, #2147483648	; 0x80000000
    386e:	603a      	str	r2, [r7, #0]
    am_hal_ios_enable(0);

    //
    // Initialize the FIFO pointer to the beginning of the FIFO section.
    //
    am_hal_ios_fifo_ptr_set(psConfig->ui32FIFOBase);
    3870:	68a5      	ldr	r5, [r4, #8]
    uint32_t ui32Primask;

    //
    // Start a critical section for thread safety.
    //
    ui32Primask = am_hal_interrupt_master_disable();
    3872:	f7fd ffb5 	bl	17e0 <am_hal_interrupt_master_disable>

    //
    // Set the FIFO Update bit.
    //
    AM_REG(IOSLAVE, FUPD) = 0x1;
    3876:	4b0e      	ldr	r3, [pc, #56]	; (38b0 <am_hal_ios_config+0x98>)
    AM_REG(IOSLAVE, FUPD) = 0x0;

    //
    // Set the global FIFO-pointer tracking variable.
    //
    g_pui8FIFOPtr = (uint8_t *) (REG_IOSLAVE_BASEADDR + ui32Offset);
    3878:	4a0e      	ldr	r2, [pc, #56]	; (38b4 <am_hal_ios_config+0x9c>)
    AM_REG(IOSLAVE, FUPD) = 0x0;
    387a:	2100      	movs	r1, #0
    AM_REG(IOSLAVE, FUPD) = 0x1;
    387c:	2701      	movs	r7, #1
    387e:	601f      	str	r7, [r3, #0]
    AM_REG(IOSLAVE, FIFOPTR) = ui32Offset;
    3880:	f846 5c04 	str.w	r5, [r6, #-4]
    AM_REG(IOSLAVE, FUPD) = 0x0;
    3884:	6019      	str	r1, [r3, #0]
    g_pui8FIFOPtr = (uint8_t *) (REG_IOSLAVE_BASEADDR + ui32Offset);
    3886:	f105 46a0 	add.w	r6, r5, #1342177280	; 0x50000000
    388a:	6016      	str	r6, [r2, #0]

    //
    // End the critical section.
    //
    am_hal_interrupt_master_set(ui32Primask);
    388c:	f7fd ffac 	bl	17e8 <am_hal_interrupt_master_set>
    AM_REG(IOSLAVE, FIFOTHR) = psConfig->ui32FIFOThreshold;
    3890:	4809      	ldr	r0, [pc, #36]	; (38b8 <am_hal_ios_config+0xa0>)
    3892:	6924      	ldr	r4, [r4, #16]
    3894:	6004      	str	r4, [r0, #0]
    3896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3898:	1000115c 	.word	0x1000115c
    389c:	10001038 	.word	0x10001038
    38a0:	10001160 	.word	0x10001160
    38a4:	1000103c 	.word	0x1000103c
    38a8:	50000118 	.word	0x50000118
    38ac:	50000104 	.word	0x50000104
    38b0:	5000010c 	.word	0x5000010c
    38b4:	10001040 	.word	0x10001040
    38b8:	50000108 	.word	0x50000108

000038bc <am_hal_ios_access_int_clear>:
    AM_REG(IOSLAVE, REGACCINTCLR) = ui32Interrupt;
    38bc:	4b01      	ldr	r3, [pc, #4]	; (38c4 <am_hal_ios_access_int_clear+0x8>)
    38be:	6018      	str	r0, [r3, #0]
    38c0:	4770      	bx	lr
    38c2:	bf00      	nop
    38c4:	50000218 	.word	0x50000218

000038c8 <am_hal_ios_int_clear>:
    AM_REG(IOSLAVE, INTCLR) = ui32Interrupt;
    38c8:	4b01      	ldr	r3, [pc, #4]	; (38d0 <am_hal_ios_int_clear+0x8>)
    38ca:	6018      	str	r0, [r3, #0]
    38cc:	4770      	bx	lr
    38ce:	bf00      	nop
    38d0:	50000208 	.word	0x50000208

000038d4 <am_hal_ios_lram_read>:
    return am_hal_ios_pui8LRAM[ui32Offset];
    38d4:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    38d8:	7800      	ldrb	r0, [r0, #0]
}
    38da:	4770      	bx	lr

000038dc <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    38dc:	4b0d      	ldr	r3, [pc, #52]	; (3914 <am_hal_itm_enable+0x38>)
    38de:	6818      	ldr	r0, [r3, #0]
    38e0:	07c2      	lsls	r2, r0, #31
    38e2:	d416      	bmi.n	3912 <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    38e4:	4a0c      	ldr	r2, [pc, #48]	; (3918 <am_hal_itm_enable+0x3c>)
    38e6:	6811      	ldr	r1, [r2, #0]
{
    38e8:	b430      	push	{r4, r5}
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    38ea:	f041 7480 	orr.w	r4, r1, #16777216	; 0x1000000
    38ee:	6014      	str	r4, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    38f0:	6815      	ldr	r5, [r2, #0]
    38f2:	01eb      	lsls	r3, r5, #7
    38f4:	d5fc      	bpl.n	38f0 <am_hal_itm_enable+0x14>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    38f6:	4809      	ldr	r0, [pc, #36]	; (391c <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    38f8:	4c09      	ldr	r4, [pc, #36]	; (3920 <am_hal_itm_enable+0x44>)
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    38fa:	4d0a      	ldr	r5, [pc, #40]	; (3924 <am_hal_itm_enable+0x48>)
    38fc:	6005      	str	r5, [r0, #0]
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    38fe:	250f      	movs	r5, #15
    3900:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    3902:	bc30      	pop	{r4, r5}
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    3904:	4908      	ldr	r1, [pc, #32]	; (3928 <am_hal_itm_enable+0x4c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    3906:	4b09      	ldr	r3, [pc, #36]	; (392c <am_hal_itm_enable+0x50>)
    3908:	4a09      	ldr	r2, [pc, #36]	; (3930 <am_hal_itm_enable+0x54>)
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    390a:	f04f 30ff 	mov.w	r0, #4294967295
    390e:	6008      	str	r0, [r1, #0]
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    3910:	601a      	str	r2, [r3, #0]
}
    3912:	4770      	bx	lr
    3914:	10001148 	.word	0x10001148
    3918:	e000edfc 	.word	0xe000edfc
    391c:	e0000fb0 	.word	0xe0000fb0
    3920:	e0000e40 	.word	0xe0000e40
    3924:	c5acce55 	.word	0xc5acce55
    3928:	e0000e00 	.word	0xe0000e00
    392c:	e0000e80 	.word	0xe0000e80
    3930:	00150511 	.word	0x00150511

00003934 <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    3934:	7803      	ldrb	r3, [r0, #0]
    3936:	b1b3      	cbz	r3, 3966 <am_hal_itm_print+0x32>
{
    3938:	b410      	push	{r4}
    393a:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    393c:	2400      	movs	r4, #0
    393e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    3942:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    3944:	2900      	cmp	r1, #0
    3946:	d1fa      	bne.n	393e <am_hal_itm_print+0xa>
    3948:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    394a:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    394e:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    3952:	f8dc 3000 	ldr.w	r3, [ip]
    3956:	2b00      	cmp	r3, #0
    3958:	d0fb      	beq.n	3952 <am_hal_itm_print+0x1e>
    while (ui32Length)
    395a:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    395c:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    3960:	d1f5      	bne.n	394e <am_hal_itm_print+0x1a>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    3962:	f85d 4b04 	ldr.w	r4, [sp], #4
    3966:	4770      	bx	lr

00003968 <am_hal_pwrctrl_periph_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    3968:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    396a:	4604      	mov	r4, r0
{
    396c:	b082      	sub	sp, #8
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    396e:	b1b8      	cbz	r0, 39a0 <am_hal_pwrctrl_periph_enable+0x38>
    3970:	1e43      	subs	r3, r0, #1
    3972:	4203      	tst	r3, r0
    3974:	d114      	bne.n	39a0 <am_hal_pwrctrl_periph_enable+0x38>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    3976:	f7fd ff33 	bl	17e0 <am_hal_interrupt_master_disable>

    //
    // Enable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    397a:	4a18      	ldr	r2, [pc, #96]	; (39dc <am_hal_pwrctrl_periph_enable+0x74>)
    AM_CRITICAL_BEGIN_ASM
    397c:	9001      	str	r0, [sp, #4]
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    397e:	6810      	ldr	r0, [r2, #0]
    3980:	4320      	orrs	r0, r4
    3982:	6010      	str	r0, [r2, #0]

    //
    // End Critical Section.
    //
    AM_CRITICAL_END_ASM
    3984:	9801      	ldr	r0, [sp, #4]
    3986:	f7fd ff2f 	bl	17e8 <am_hal_interrupt_master_set>

    //
    // Wait for the power to stablize.  Using a simple delay loop is more
    // power efficient than a polling loop.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);
    398a:	200e      	movs	r0, #14
    398c:	f7fd fe56 	bl	163c <am_hal_flash_delay>

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    3990:	f014 0f0e 	tst.w	r4, #14
    3994:	d10a      	bne.n	39ac <am_hal_pwrctrl_periph_enable+0x44>
    3996:	f014 0f70 	tst.w	r4, #112	; 0x70
    399a:	d00e      	beq.n	39ba <am_hal_pwrctrl_periph_enable+0x52>
    399c:	2408      	movs	r4, #8
    399e:	e006      	b.n	39ae <am_hal_pwrctrl_periph_enable+0x46>
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    39a0:	4a0f      	ldr	r2, [pc, #60]	; (39e0 <am_hal_pwrctrl_periph_enable+0x78>)
    39a2:	4810      	ldr	r0, [pc, #64]	; (39e4 <am_hal_pwrctrl_periph_enable+0x7c>)
    39a4:	2160      	movs	r1, #96	; 0x60
    39a6:	f7fd fe47 	bl	1638 <am_hal_debug_error>
    39aa:	e7e4      	b.n	3976 <am_hal_pwrctrl_periph_enable+0xe>
    POLL_PWRSTATUS(ui32Peripheral);
    39ac:	2404      	movs	r4, #4
    39ae:	4a0e      	ldr	r2, [pc, #56]	; (39e8 <am_hal_pwrctrl_periph_enable+0x80>)
    39b0:	6813      	ldr	r3, [r2, #0]
    39b2:	421c      	tst	r4, r3
    39b4:	d0fc      	beq.n	39b0 <am_hal_pwrctrl_periph_enable+0x48>
}
    39b6:	b002      	add	sp, #8
    39b8:	bd10      	pop	{r4, pc}
    POLL_PWRSTATUS(ui32Peripheral);
    39ba:	f240 1181 	movw	r1, #385	; 0x181
    39be:	420c      	tst	r4, r1
    39c0:	d108      	bne.n	39d4 <am_hal_pwrctrl_periph_enable+0x6c>
    39c2:	05a3      	lsls	r3, r4, #22
    39c4:	d408      	bmi.n	39d8 <am_hal_pwrctrl_periph_enable+0x70>
    39c6:	f414 6f80 	tst.w	r4, #1024	; 0x400
    39ca:	bf14      	ite	ne
    39cc:	2410      	movne	r4, #16
    39ce:	f04f 34ff 	moveq.w	r4, #4294967295
    39d2:	e7ec      	b.n	39ae <am_hal_pwrctrl_periph_enable+0x46>
    39d4:	2402      	movs	r4, #2
    39d6:	e7ea      	b.n	39ae <am_hal_pwrctrl_periph_enable+0x46>
    39d8:	2480      	movs	r4, #128	; 0x80
    39da:	e7e8      	b.n	39ae <am_hal_pwrctrl_periph_enable+0x46>
    39dc:	40021008 	.word	0x40021008
    39e0:	00005490 	.word	0x00005490
    39e4:	000054c4 	.word	0x000054c4
    39e8:	40021014 	.word	0x40021014

000039ec <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    39ec:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
{
    39f0:	b430      	push	{r4, r5}
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    39f2:	d03a      	beq.n	3a6a <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    39f4:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    39f8:	f000 809d 	beq.w	3b36 <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    39fc:	2801      	cmp	r0, #1
    39fe:	f000 809d 	beq.w	3b3c <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    3a02:	2803      	cmp	r0, #3
    3a04:	f000 80a6 	beq.w	3b54 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    3a08:	2807      	cmp	r0, #7
    3a0a:	f000 809c 	beq.w	3b46 <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    3a0e:	280f      	cmp	r0, #15
    3a10:	f000 80a5 	beq.w	3b5e <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    3a14:	281f      	cmp	r0, #31
    3a16:	f000 80b0 	beq.w	3b7a <am_hal_pwrctrl_memory_enable+0x18e>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    3a1a:	283f      	cmp	r0, #63	; 0x3f
    3a1c:	f000 80b4 	beq.w	3b88 <am_hal_pwrctrl_memory_enable+0x19c>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    3a20:	287f      	cmp	r0, #127	; 0x7f
    3a22:	f000 80b8 	beq.w	3b96 <am_hal_pwrctrl_memory_enable+0x1aa>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    3a26:	28ff      	cmp	r0, #255	; 0xff
    3a28:	f000 80a0 	beq.w	3b6c <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    3a2c:	f240 13ff 	movw	r3, #511	; 0x1ff
    3a30:	4298      	cmp	r0, r3
    3a32:	f000 80b7 	beq.w	3ba4 <am_hal_pwrctrl_memory_enable+0x1b8>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    3a36:	f240 31ff 	movw	r1, #1023	; 0x3ff
    3a3a:	4288      	cmp	r0, r1
    3a3c:	f000 80b8 	beq.w	3bb0 <am_hal_pwrctrl_memory_enable+0x1c4>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    3a40:	f240 72ff 	movw	r2, #2047	; 0x7ff
    3a44:	4290      	cmp	r0, r2
    3a46:	d00e      	beq.n	3a66 <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    3a48:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    3a4c:	f000 80b6 	beq.w	3bbc <am_hal_pwrctrl_memory_enable+0x1d0>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    3a50:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    3a54:	42a0      	cmp	r0, r4
    3a56:	f000 80b4 	beq.w	3bc2 <am_hal_pwrctrl_memory_enable+0x1d6>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    3a5a:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    3a5e:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    3a62:	4560      	cmp	r0, ip
    3a64:	d132      	bne.n	3acc <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    3a66:	495b      	ldr	r1, [pc, #364]	; (3bd4 <am_hal_pwrctrl_memory_enable+0x1e8>)
    3a68:	e066      	b.n	3b38 <am_hal_pwrctrl_memory_enable+0x14c>
    3a6a:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    3a6e:	2340      	movs	r3, #64	; 0x40
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    3a70:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    3a72:	4c59      	ldr	r4, [pc, #356]	; (3bd8 <am_hal_pwrctrl_memory_enable+0x1ec>)
    3a74:	6825      	ldr	r5, [r4, #0]
    3a76:	402a      	ands	r2, r5
    3a78:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    3a7a:	4a57      	ldr	r2, [pc, #348]	; (3bd8 <am_hal_pwrctrl_memory_enable+0x1ec>)
    3a7c:	6814      	ldr	r4, [r2, #0]
    3a7e:	4320      	orrs	r0, r4
    3a80:	6010      	str	r0, [r2, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    3a82:	2b00      	cmp	r3, #0
    3a84:	d029      	beq.n	3ada <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    3a86:	4d55      	ldr	r5, [pc, #340]	; (3bdc <am_hal_pwrctrl_memory_enable+0x1f0>)
    3a88:	6828      	ldr	r0, [r5, #0]
        while ( --i32TOcnt              &&
    3a8a:	4218      	tst	r0, r3
    3a8c:	bf18      	it	ne
    3a8e:	20c6      	movne	r0, #198	; 0xc6
    3a90:	d01f      	beq.n	3ad2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    3a92:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    3a94:	421a      	tst	r2, r3
    3a96:	d01c      	beq.n	3ad2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    3a98:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    3a9a:	421c      	tst	r4, r3
    3a9c:	d019      	beq.n	3ad2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    3a9e:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    3aa0:	421a      	tst	r2, r3
    3aa2:	d016      	beq.n	3ad2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    3aa4:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    3aa6:	421c      	tst	r4, r3
    3aa8:	d013      	beq.n	3ad2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    3aaa:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    3aac:	421a      	tst	r2, r3
    3aae:	d010      	beq.n	3ad2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    3ab0:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    3ab2:	421c      	tst	r4, r3
    3ab4:	d00d      	beq.n	3ad2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    3ab6:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    3ab8:	421a      	tst	r2, r3
    3aba:	d00a      	beq.n	3ad2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    3abc:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    3abe:	421c      	tst	r4, r3
    3ac0:	d007      	beq.n	3ad2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    3ac2:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    3ac4:	421a      	tst	r2, r3
    3ac6:	d004      	beq.n	3ad2 <am_hal_pwrctrl_memory_enable+0xe6>
    3ac8:	3809      	subs	r0, #9
    3aca:	d1e2      	bne.n	3a92 <am_hal_pwrctrl_memory_enable+0xa6>
        return false;
    3acc:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    3ace:	bc30      	pop	{r4, r5}
    3ad0:	4770      	bx	lr
    if ( ui32PwrStatEnMask )
    3ad2:	b911      	cbnz	r1, 3ada <am_hal_pwrctrl_memory_enable+0xee>
    return true;
    3ad4:	2001      	movs	r0, #1
}
    3ad6:	bc30      	pop	{r4, r5}
    3ad8:	4770      	bx	lr
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    3ada:	4b40      	ldr	r3, [pc, #256]	; (3bdc <am_hal_pwrctrl_memory_enable+0x1f0>)
    3adc:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    3ade:	ea31 0405 	bics.w	r4, r1, r5
    3ae2:	bf18      	it	ne
    3ae4:	24c6      	movne	r4, #198	; 0xc6
    3ae6:	d0f5      	beq.n	3ad4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    3ae8:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    3aea:	ea31 0000 	bics.w	r0, r1, r0
    3aee:	d0f1      	beq.n	3ad4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    3af0:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    3af2:	ea31 0002 	bics.w	r0, r1, r2
    3af6:	d0ed      	beq.n	3ad4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    3af8:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    3afa:	ea31 0005 	bics.w	r0, r1, r5
    3afe:	d0e9      	beq.n	3ad4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    3b00:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    3b02:	ea31 0000 	bics.w	r0, r1, r0
    3b06:	d0e5      	beq.n	3ad4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    3b08:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    3b0a:	ea31 0002 	bics.w	r0, r1, r2
    3b0e:	d0e1      	beq.n	3ad4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    3b10:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    3b12:	ea31 0005 	bics.w	r0, r1, r5
    3b16:	d0dd      	beq.n	3ad4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    3b18:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    3b1a:	ea31 0000 	bics.w	r0, r1, r0
    3b1e:	d0d9      	beq.n	3ad4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    3b20:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    3b22:	ea31 0002 	bics.w	r0, r1, r2
    3b26:	d0d5      	beq.n	3ad4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    3b28:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    3b2a:	ea31 0005 	bics.w	r0, r1, r5
    3b2e:	d0d1      	beq.n	3ad4 <am_hal_pwrctrl_memory_enable+0xe8>
    3b30:	3c09      	subs	r4, #9
    3b32:	d1d9      	bne.n	3ae8 <am_hal_pwrctrl_memory_enable+0xfc>
    3b34:	e7ca      	b.n	3acc <am_hal_pwrctrl_memory_enable+0xe0>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    3b36:	2160      	movs	r1, #96	; 0x60
{
    3b38:	2300      	movs	r3, #0
    3b3a:	e79e      	b.n	3a7a <am_hal_pwrctrl_memory_enable+0x8e>
    3b3c:	4a28      	ldr	r2, [pc, #160]	; (3be0 <am_hal_pwrctrl_memory_enable+0x1f4>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    3b3e:	4b29      	ldr	r3, [pc, #164]	; (3be4 <am_hal_pwrctrl_memory_enable+0x1f8>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    3b40:	f44f 7180 	mov.w	r1, #256	; 0x100
    3b44:	e795      	b.n	3a72 <am_hal_pwrctrl_memory_enable+0x86>
    3b46:	f46f 62ff 	mvn.w	r2, #2040	; 0x7f8
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    3b4a:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    3b4e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    3b52:	e78e      	b.n	3a72 <am_hal_pwrctrl_memory_enable+0x86>
    3b54:	4a24      	ldr	r2, [pc, #144]	; (3be8 <am_hal_pwrctrl_memory_enable+0x1fc>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    3b56:	4b25      	ldr	r3, [pc, #148]	; (3bec <am_hal_pwrctrl_memory_enable+0x200>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    3b58:	f44f 7140 	mov.w	r1, #768	; 0x300
    3b5c:	e789      	b.n	3a72 <am_hal_pwrctrl_memory_enable+0x86>
    3b5e:	f46f 62fe 	mvn.w	r2, #2032	; 0x7f0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    3b62:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    3b66:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    3b6a:	e782      	b.n	3a72 <am_hal_pwrctrl_memory_enable+0x86>
    3b6c:	f46f 62e0 	mvn.w	r2, #1792	; 0x700
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    3b70:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    3b74:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    3b78:	e77b      	b.n	3a72 <am_hal_pwrctrl_memory_enable+0x86>
    3b7a:	f46f 62fc 	mvn.w	r2, #2016	; 0x7e0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    3b7e:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    3b82:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    3b86:	e774      	b.n	3a72 <am_hal_pwrctrl_memory_enable+0x86>
    3b88:	f46f 62f8 	mvn.w	r2, #1984	; 0x7c0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    3b8c:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    3b90:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    3b94:	e76d      	b.n	3a72 <am_hal_pwrctrl_memory_enable+0x86>
    3b96:	f46f 62f0 	mvn.w	r2, #1920	; 0x780
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    3b9a:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    3b9e:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    3ba2:	e766      	b.n	3a72 <am_hal_pwrctrl_memory_enable+0x86>
    3ba4:	f46f 62c0 	mvn.w	r2, #1536	; 0x600
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    3ba8:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    3bac:	4910      	ldr	r1, [pc, #64]	; (3bf0 <am_hal_pwrctrl_memory_enable+0x204>)
    3bae:	e760      	b.n	3a72 <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    3bb0:	4910      	ldr	r1, [pc, #64]	; (3bf4 <am_hal_pwrctrl_memory_enable+0x208>)
    3bb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    3bb6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    3bba:	e75a      	b.n	3a72 <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    3bbc:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    3bc0:	e7ba      	b.n	3b38 <am_hal_pwrctrl_memory_enable+0x14c>
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    3bc2:	4805      	ldr	r0, [pc, #20]	; (3bd8 <am_hal_pwrctrl_memory_enable+0x1ec>)
    3bc4:	6803      	ldr	r3, [r0, #0]
    3bc6:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    3bca:	6001      	str	r1, [r0, #0]
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    3bcc:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
        ui32PwrStatEnMask  = 0;
    3bd0:	2100      	movs	r1, #0
    3bd2:	e758      	b.n	3a86 <am_hal_pwrctrl_memory_enable+0x9a>
    3bd4:	0007ff00 	.word	0x0007ff00
    3bd8:	40021010 	.word	0x40021010
    3bdc:	40021014 	.word	0x40021014
    3be0:	fffff801 	.word	0xfffff801
    3be4:	0007fe00 	.word	0x0007fe00
    3be8:	fffff803 	.word	0xfffff803
    3bec:	0007fc00 	.word	0x0007fc00
    3bf0:	0001ff00 	.word	0x0001ff00
    3bf4:	0003ff00 	.word	0x0003ff00

00003bf8 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    3bf8:	4b0f      	ldr	r3, [pc, #60]	; (3c38 <am_hal_pwrctrl_bucks_init+0x40>)
    3bfa:	681a      	ldr	r2, [r3, #0]
    3bfc:	0792      	lsls	r2, r2, #30
    3bfe:	d502      	bpl.n	3c06 <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    3c00:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    3c02:	07c3      	lsls	r3, r0, #31
    3c04:	d40e      	bmi.n	3c24 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    3c06:	4b0d      	ldr	r3, [pc, #52]	; (3c3c <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    3c08:	4a0b      	ldr	r2, [pc, #44]	; (3c38 <am_hal_pwrctrl_bucks_init+0x40>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    3c0a:	6819      	ldr	r1, [r3, #0]
    3c0c:	f041 0002 	orr.w	r0, r1, #2
    3c10:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    3c12:	6819      	ldr	r1, [r3, #0]
    3c14:	f041 0001 	orr.w	r0, r1, #1
    3c18:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    3c1a:	6813      	ldr	r3, [r2, #0]
    3c1c:	f003 0103 	and.w	r1, r3, #3
    3c20:	2903      	cmp	r1, #3
    3c22:	d1fa      	bne.n	3c1a <am_hal_pwrctrl_bucks_init+0x22>
    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    3c24:	4a04      	ldr	r2, [pc, #16]	; (3c38 <am_hal_pwrctrl_bucks_init+0x40>)
    3c26:	6810      	ldr	r0, [r2, #0]
    3c28:	f000 0303 	and.w	r3, r0, #3
    3c2c:	2b03      	cmp	r3, #3
    3c2e:	d1fa      	bne.n	3c26 <am_hal_pwrctrl_bucks_init+0x2e>
    am_hal_flash_delay(200 / 3);
    3c30:	2042      	movs	r0, #66	; 0x42
    3c32:	f7fd bd03 	b.w	163c <am_hal_flash_delay>
    3c36:	bf00      	nop
    3c38:	40021004 	.word	0x40021004
    3c3c:	40021000 	.word	0x40021000

00003c40 <am_hal_pwrctrl_bucks_enable>:
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    3c40:	4b0b      	ldr	r3, [pc, #44]	; (3c70 <am_hal_pwrctrl_bucks_enable+0x30>)
    3c42:	681a      	ldr	r2, [r3, #0]
    3c44:	0792      	lsls	r2, r2, #30
    3c46:	d502      	bpl.n	3c4e <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    3c48:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    3c4a:	07c3      	lsls	r3, r0, #31
    3c4c:	d40e      	bmi.n	3c6c <am_hal_pwrctrl_bucks_enable+0x2c>
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    3c4e:	4b09      	ldr	r3, [pc, #36]	; (3c74 <am_hal_pwrctrl_bucks_enable+0x34>)
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    3c50:	4a07      	ldr	r2, [pc, #28]	; (3c70 <am_hal_pwrctrl_bucks_enable+0x30>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    3c52:	6819      	ldr	r1, [r3, #0]
    3c54:	f041 0002 	orr.w	r0, r1, #2
    3c58:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    3c5a:	6819      	ldr	r1, [r3, #0]
    3c5c:	f041 0001 	orr.w	r0, r1, #1
    3c60:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    3c62:	6813      	ldr	r3, [r2, #0]
    3c64:	f003 0103 	and.w	r1, r3, #3
    3c68:	2903      	cmp	r1, #3
    3c6a:	d1fa      	bne.n	3c62 <am_hal_pwrctrl_bucks_enable+0x22>
    3c6c:	4770      	bx	lr
    3c6e:	bf00      	nop
    3c70:	40021004 	.word	0x40021004
    3c74:	40021000 	.word	0x40021000

00003c78 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    3c78:	4b12      	ldr	r3, [pc, #72]	; (3cc4 <am_hal_pwrctrl_bucks_disable+0x4c>)
    3c7a:	681a      	ldr	r2, [r3, #0]
    3c7c:	0792      	lsls	r2, r2, #30
    3c7e:	d402      	bmi.n	3c86 <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    3c80:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    3c82:	07c3      	lsls	r3, r0, #31
    3c84:	d51c      	bpl.n	3cc0 <am_hal_pwrctrl_bucks_disable+0x48>
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    3c86:	4910      	ldr	r1, [pc, #64]	; (3cc8 <am_hal_pwrctrl_bucks_disable+0x50>)
    3c88:	680b      	ldr	r3, [r1, #0]
    3c8a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    3c8e:	2a20      	cmp	r2, #32
    3c90:	d00b      	beq.n	3caa <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    3c92:	4b0e      	ldr	r3, [pc, #56]	; (3ccc <am_hal_pwrctrl_bucks_disable+0x54>)
    3c94:	681a      	ldr	r2, [r3, #0]
    3c96:	f022 0002 	bic.w	r0, r2, #2
    3c9a:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    3c9c:	6819      	ldr	r1, [r3, #0]
    3c9e:	f021 0201 	bic.w	r2, r1, #1
    3ca2:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    3ca4:	200a      	movs	r0, #10
    3ca6:	f7fd bcc9 	b.w	163c <am_hal_flash_delay>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_PWRADC_EN) )
    3caa:	4809      	ldr	r0, [pc, #36]	; (3cd0 <am_hal_pwrctrl_bucks_disable+0x58>)
    3cac:	6801      	ldr	r1, [r0, #0]
    if ( isRev_ADC()  &&
    3cae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    3cb2:	d1ee      	bne.n	3c92 <am_hal_pwrctrl_bucks_disable+0x1a>
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    3cb4:	4805      	ldr	r0, [pc, #20]	; (3ccc <am_hal_pwrctrl_bucks_disable+0x54>)
    3cb6:	6803      	ldr	r3, [r0, #0]
    3cb8:	f003 0105 	and.w	r1, r3, #5
    3cbc:	6001      	str	r1, [r0, #0]
    3cbe:	e7f1      	b.n	3ca4 <am_hal_pwrctrl_bucks_disable+0x2c>
    3cc0:	4770      	bx	lr
    3cc2:	bf00      	nop
    3cc4:	40021004 	.word	0x40021004
    3cc8:	4002000c 	.word	0x4002000c
    3ccc:	40021000 	.word	0x40021000
    3cd0:	40021008 	.word	0x40021008

00003cd4 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    3cd4:	4905      	ldr	r1, [pc, #20]	; (3cec <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    3cd6:	4a06      	ldr	r2, [pc, #24]	; (3cf0 <am_hal_pwrctrl_low_power_init+0x1c>)
    AM_REG(PWRCTRL, SRAMCTRL) |=
    3cd8:	680b      	ldr	r3, [r1, #0]
    3cda:	f043 0006 	orr.w	r0, r3, #6
    3cde:	6008      	str	r0, [r1, #0]
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    3ce0:	6811      	ldr	r1, [r2, #0]
    3ce2:	f021 0304 	bic.w	r3, r1, #4
    3ce6:	6013      	str	r3, [r2, #0]
    3ce8:	4770      	bx	lr
    3cea:	bf00      	nop
    3cec:	40021018 	.word	0x40021018
    3cf0:	40021000 	.word	0x40021000

00003cf4 <am_hal_queue_init>:
//
//*****************************************************************************
void
am_hal_queue_init(am_hal_queue_t *psQueue, void *pvData, uint32_t ui32ItemSize,
                  uint32_t ui32ArraySize)
{
    3cf4:	b410      	push	{r4}
    psQueue->ui32WriteIndex = 0;
    3cf6:	2400      	movs	r4, #0
    3cf8:	6004      	str	r4, [r0, #0]
    psQueue->ui32ReadIndex = 0;
    3cfa:	6044      	str	r4, [r0, #4]
    psQueue->ui32Length = 0;
    3cfc:	6084      	str	r4, [r0, #8]
    psQueue->ui32Capacity = ui32ArraySize;
    3cfe:	60c3      	str	r3, [r0, #12]
    psQueue->ui32ItemSize = ui32ItemSize;
    3d00:	6102      	str	r2, [r0, #16]
    psQueue->pui8Data = (uint8_t *) pvData;
    3d02:	6141      	str	r1, [r0, #20]
}
    3d04:	f85d 4b04 	ldr.w	r4, [sp], #4
    3d08:	4770      	bx	lr
    3d0a:	bf00      	nop

00003d0c <am_hal_queue_item_add>:
//! didn't have enough space.
//
//*****************************************************************************
bool
am_hal_queue_item_add(am_hal_queue_t *psQueue, const void *pvSource, uint32_t ui32NumItems)
{
    3d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d0e:	4604      	mov	r4, r0
    uint32_t i;
    uint8_t *pui8Source;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    3d10:	6907      	ldr	r7, [r0, #16]
{
    3d12:	460e      	mov	r6, r1
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    3d14:	fb07 f702 	mul.w	r7, r7, r2
    bool bSuccess = false;
    uint32_t ui32Primask;

    pui8Source = (uint8_t *) pvSource;

    ui32Primask = am_hal_interrupt_master_disable();
    3d18:	f7fd fd62 	bl	17e0 <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't already full
    //
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    3d1c:	68a5      	ldr	r5, [r4, #8]
    3d1e:	68e3      	ldr	r3, [r4, #12]
    3d20:	1b59      	subs	r1, r3, r5
    3d22:	428f      	cmp	r7, r1
    3d24:	d87c      	bhi.n	3e20 <am_hal_queue_item_add+0x114>
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    3d26:	2f00      	cmp	r7, #0
    3d28:	d073      	beq.n	3e12 <am_hal_queue_item_add+0x106>
        {
            //
            // Write the value to the buffer.
            //
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    3d2a:	4635      	mov	r5, r6
    3d2c:	6823      	ldr	r3, [r4, #0]
    3d2e:	6962      	ldr	r2, [r4, #20]
    3d30:	f815 1b01 	ldrb.w	r1, [r5], #1
    3d34:	54d1      	strb	r1, [r2, r3]

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    3d36:	6823      	ldr	r3, [r4, #0]
    3d38:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    3d3c:	1c5a      	adds	r2, r3, #1
    3d3e:	19f1      	adds	r1, r6, r7
    3d40:	f107 3cff 	add.w	ip, r7, #4294967295
    3d44:	fbb2 f6fe 	udiv	r6, r2, lr
        for ( i = 0; i < ui32Bytes; i++ )
    3d48:	42a9      	cmp	r1, r5
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    3d4a:	fb0e 2316 	mls	r3, lr, r6, r2
    3d4e:	6023      	str	r3, [r4, #0]
    3d50:	f00c 0203 	and.w	r2, ip, #3
        for ( i = 0; i < ui32Bytes; i++ )
    3d54:	d05c      	beq.n	3e10 <am_hal_queue_item_add+0x104>
    3d56:	b34a      	cbz	r2, 3dac <am_hal_queue_item_add+0xa0>
    3d58:	2a01      	cmp	r2, #1
    3d5a:	d019      	beq.n	3d90 <am_hal_queue_item_add+0x84>
    3d5c:	2a02      	cmp	r2, #2
    3d5e:	d00b      	beq.n	3d78 <am_hal_queue_item_add+0x6c>
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    3d60:	6962      	ldr	r2, [r4, #20]
    3d62:	f815 6b01 	ldrb.w	r6, [r5], #1
    3d66:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    3d68:	6823      	ldr	r3, [r4, #0]
    3d6a:	68e6      	ldr	r6, [r4, #12]
    3d6c:	1c5a      	adds	r2, r3, #1
    3d6e:	fbb2 fef6 	udiv	lr, r2, r6
    3d72:	fb06 231e 	mls	r3, r6, lr, r2
    3d76:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    3d78:	6962      	ldr	r2, [r4, #20]
    3d7a:	f815 6b01 	ldrb.w	r6, [r5], #1
    3d7e:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    3d80:	6823      	ldr	r3, [r4, #0]
    3d82:	68e6      	ldr	r6, [r4, #12]
    3d84:	1c5a      	adds	r2, r3, #1
    3d86:	fbb2 fcf6 	udiv	ip, r2, r6
    3d8a:	fb06 231c 	mls	r3, r6, ip, r2
    3d8e:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    3d90:	6962      	ldr	r2, [r4, #20]
    3d92:	f815 6b01 	ldrb.w	r6, [r5], #1
    3d96:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    3d98:	6823      	ldr	r3, [r4, #0]
    3d9a:	68e6      	ldr	r6, [r4, #12]
    3d9c:	1c5a      	adds	r2, r3, #1
        for ( i = 0; i < ui32Bytes; i++ )
    3d9e:	42a9      	cmp	r1, r5
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    3da0:	fbb2 fef6 	udiv	lr, r2, r6
    3da4:	fb06 231e 	mls	r3, r6, lr, r2
    3da8:	6023      	str	r3, [r4, #0]
        for ( i = 0; i < ui32Bytes; i++ )
    3daa:	d031      	beq.n	3e10 <am_hal_queue_item_add+0x104>
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    3dac:	46ac      	mov	ip, r5
    3dae:	6962      	ldr	r2, [r4, #20]
    3db0:	f81c 6b01 	ldrb.w	r6, [ip], #1
    3db4:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    3db6:	6823      	ldr	r3, [r4, #0]
    3db8:	68e2      	ldr	r2, [r4, #12]
    3dba:	1c5e      	adds	r6, r3, #1
    3dbc:	fbb6 fef2 	udiv	lr, r6, r2
    3dc0:	fb02 631e 	mls	r3, r2, lr, r6
    3dc4:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    3dc6:	6962      	ldr	r2, [r4, #20]
    3dc8:	786e      	ldrb	r6, [r5, #1]
    3dca:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    3dcc:	6823      	ldr	r3, [r4, #0]
    3dce:	68e2      	ldr	r2, [r4, #12]
    3dd0:	1c5e      	adds	r6, r3, #1
    3dd2:	fbb6 fef2 	udiv	lr, r6, r2
    3dd6:	fb02 631e 	mls	r3, r2, lr, r6
    3dda:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    3ddc:	6962      	ldr	r2, [r4, #20]
    3dde:	f89c 6001 	ldrb.w	r6, [ip, #1]
    3de2:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    3de4:	6823      	ldr	r3, [r4, #0]
    3de6:	68e2      	ldr	r2, [r4, #12]
    3de8:	1c5e      	adds	r6, r3, #1
    3dea:	fbb6 fcf2 	udiv	ip, r6, r2
    3dee:	fb02 631c 	mls	r3, r2, ip, r6
    3df2:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    3df4:	6962      	ldr	r2, [r4, #20]
    3df6:	78ee      	ldrb	r6, [r5, #3]
    3df8:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    3dfa:	6823      	ldr	r3, [r4, #0]
    3dfc:	68e2      	ldr	r2, [r4, #12]
    3dfe:	1c5e      	adds	r6, r3, #1
    3e00:	3504      	adds	r5, #4
    3e02:	fbb6 fef2 	udiv	lr, r6, r2
        for ( i = 0; i < ui32Bytes; i++ )
    3e06:	42a9      	cmp	r1, r5
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    3e08:	fb02 631e 	mls	r3, r2, lr, r6
    3e0c:	6023      	str	r3, [r4, #0]
        for ( i = 0; i < ui32Bytes; i++ )
    3e0e:	d1cd      	bne.n	3dac <am_hal_queue_item_add+0xa0>
    3e10:	68a5      	ldr	r5, [r4, #8]
        }

        //
        // Update the length value appropriately.
        //
        psQueue->ui32Length += ui32Bytes;
    3e12:	443d      	add	r5, r7
    3e14:	60a5      	str	r5, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
    3e16:	2401      	movs	r4, #1
        // failure.
        //
        bSuccess = false;
    }

    am_hal_interrupt_master_set(ui32Primask);
    3e18:	f7fd fce6 	bl	17e8 <am_hal_interrupt_master_set>

    return bSuccess;
}
    3e1c:	4620      	mov	r0, r4
    3e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        bSuccess = false;
    3e20:	2400      	movs	r4, #0
    am_hal_interrupt_master_set(ui32Primask);
    3e22:	f7fd fce1 	bl	17e8 <am_hal_interrupt_master_set>
}
    3e26:	4620      	mov	r0, r4
    3e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e2a:	bf00      	nop

00003e2c <am_hal_queue_item_get>:
//! queue, or false if the queue didn't have that many items to pull.
//
//*****************************************************************************
bool
am_hal_queue_item_get(am_hal_queue_t *psQueue, void *pvDest, uint32_t ui32NumItems)
{
    3e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e2e:	4604      	mov	r4, r0
    uint32_t i;
    uint8_t *pui8Dest;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    3e30:	6907      	ldr	r7, [r0, #16]
{
    3e32:	460e      	mov	r6, r1
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    3e34:	fb07 f702 	mul.w	r7, r7, r2
    bool bSuccess = false;
    uint32_t ui32Primask;

    pui8Dest = (uint8_t *) pvDest;

    ui32Primask = am_hal_interrupt_master_disable();
    3e38:	f7fd fcd2 	bl	17e0 <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't empty
    //
    if ( am_hal_queue_data_left(psQueue) >= ui32Bytes )
    3e3c:	68a5      	ldr	r5, [r4, #8]
    3e3e:	42af      	cmp	r7, r5
    3e40:	d87e      	bhi.n	3f40 <am_hal_queue_item_get+0x114>
    {
        //
        // Loop over the bytes in the destination array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    3e42:	2f00      	cmp	r7, #0
    3e44:	d075      	beq.n	3f32 <am_hal_queue_item_get+0x106>
    3e46:	6863      	ldr	r3, [r4, #4]
        {
            //
            // Grab the next value from the buffer.
            //
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    3e48:	6962      	ldr	r2, [r4, #20]
    3e4a:	4635      	mov	r5, r6
    3e4c:	5cd1      	ldrb	r1, [r2, r3]
    3e4e:	f805 1b01 	strb.w	r1, [r5], #1

            //
            // Advance the read index, wrapping if needed.
            //
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    3e52:	6863      	ldr	r3, [r4, #4]
    3e54:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    3e58:	1c5a      	adds	r2, r3, #1
    3e5a:	19f1      	adds	r1, r6, r7
    3e5c:	f107 3cff 	add.w	ip, r7, #4294967295
    3e60:	fbb2 f6fe 	udiv	r6, r2, lr
        for ( i = 0; i < ui32Bytes; i++ )
    3e64:	42a9      	cmp	r1, r5
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    3e66:	fb0e 2316 	mls	r3, lr, r6, r2
    3e6a:	6063      	str	r3, [r4, #4]
    3e6c:	f00c 0203 	and.w	r2, ip, #3
        for ( i = 0; i < ui32Bytes; i++ )
    3e70:	d05e      	beq.n	3f30 <am_hal_queue_item_get+0x104>
    3e72:	b35a      	cbz	r2, 3ecc <am_hal_queue_item_get+0xa0>
    3e74:	2a01      	cmp	r2, #1
    3e76:	d01a      	beq.n	3eae <am_hal_queue_item_get+0x82>
    3e78:	2a02      	cmp	r2, #2
    3e7a:	d00b      	beq.n	3e94 <am_hal_queue_item_get+0x68>
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    3e7c:	6966      	ldr	r6, [r4, #20]
    3e7e:	5cf3      	ldrb	r3, [r6, r3]
    3e80:	f805 3b01 	strb.w	r3, [r5], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    3e84:	6862      	ldr	r2, [r4, #4]
    3e86:	68e6      	ldr	r6, [r4, #12]
    3e88:	3201      	adds	r2, #1
    3e8a:	fbb2 fef6 	udiv	lr, r2, r6
    3e8e:	fb06 231e 	mls	r3, r6, lr, r2
    3e92:	6063      	str	r3, [r4, #4]
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    3e94:	6966      	ldr	r6, [r4, #20]
    3e96:	f816 c003 	ldrb.w	ip, [r6, r3]
    3e9a:	f805 cb01 	strb.w	ip, [r5], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    3e9e:	6863      	ldr	r3, [r4, #4]
    3ea0:	68e6      	ldr	r6, [r4, #12]
    3ea2:	1c5a      	adds	r2, r3, #1
    3ea4:	fbb2 fef6 	udiv	lr, r2, r6
    3ea8:	fb06 231e 	mls	r3, r6, lr, r2
    3eac:	6063      	str	r3, [r4, #4]
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    3eae:	6966      	ldr	r6, [r4, #20]
    3eb0:	f816 c003 	ldrb.w	ip, [r6, r3]
    3eb4:	f805 cb01 	strb.w	ip, [r5], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    3eb8:	6863      	ldr	r3, [r4, #4]
    3eba:	68e6      	ldr	r6, [r4, #12]
    3ebc:	1c5a      	adds	r2, r3, #1
        for ( i = 0; i < ui32Bytes; i++ )
    3ebe:	42a9      	cmp	r1, r5
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    3ec0:	fbb2 fef6 	udiv	lr, r2, r6
    3ec4:	fb06 231e 	mls	r3, r6, lr, r2
    3ec8:	6063      	str	r3, [r4, #4]
        for ( i = 0; i < ui32Bytes; i++ )
    3eca:	d031      	beq.n	3f30 <am_hal_queue_item_get+0x104>
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    3ecc:	6966      	ldr	r6, [r4, #20]
    3ece:	46ac      	mov	ip, r5
    3ed0:	5cf2      	ldrb	r2, [r6, r3]
    3ed2:	f80c 2b01 	strb.w	r2, [ip], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    3ed6:	6863      	ldr	r3, [r4, #4]
    3ed8:	68e2      	ldr	r2, [r4, #12]
    3eda:	1c5e      	adds	r6, r3, #1
    3edc:	fbb6 fef2 	udiv	lr, r6, r2
    3ee0:	fb02 631e 	mls	r3, r2, lr, r6
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    3ee4:	6962      	ldr	r2, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    3ee6:	6063      	str	r3, [r4, #4]
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    3ee8:	5cd6      	ldrb	r6, [r2, r3]
    3eea:	706e      	strb	r6, [r5, #1]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    3eec:	6863      	ldr	r3, [r4, #4]
    3eee:	68e2      	ldr	r2, [r4, #12]
    3ef0:	1c5e      	adds	r6, r3, #1
    3ef2:	fbb6 fef2 	udiv	lr, r6, r2
    3ef6:	fb02 631e 	mls	r3, r2, lr, r6
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    3efa:	6962      	ldr	r2, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    3efc:	6063      	str	r3, [r4, #4]
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    3efe:	5cd6      	ldrb	r6, [r2, r3]
    3f00:	f88c 6001 	strb.w	r6, [ip, #1]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    3f04:	6863      	ldr	r3, [r4, #4]
    3f06:	68e2      	ldr	r2, [r4, #12]
    3f08:	1c5e      	adds	r6, r3, #1
    3f0a:	fbb6 fcf2 	udiv	ip, r6, r2
    3f0e:	fb02 631c 	mls	r3, r2, ip, r6
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    3f12:	6962      	ldr	r2, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    3f14:	6063      	str	r3, [r4, #4]
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    3f16:	5cd6      	ldrb	r6, [r2, r3]
    3f18:	70ee      	strb	r6, [r5, #3]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    3f1a:	6863      	ldr	r3, [r4, #4]
    3f1c:	68e2      	ldr	r2, [r4, #12]
    3f1e:	1c5e      	adds	r6, r3, #1
    3f20:	3504      	adds	r5, #4
    3f22:	fbb6 fef2 	udiv	lr, r6, r2
        for ( i = 0; i < ui32Bytes; i++ )
    3f26:	42a9      	cmp	r1, r5
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    3f28:	fb02 631e 	mls	r3, r2, lr, r6
    3f2c:	6063      	str	r3, [r4, #4]
        for ( i = 0; i < ui32Bytes; i++ )
    3f2e:	d1cd      	bne.n	3ecc <am_hal_queue_item_get+0xa0>
    3f30:	68a5      	ldr	r5, [r4, #8]
        }

        //
        // Adjust the length value to reflect the change.
        //
        psQueue->ui32Length -= ui32Bytes;
    3f32:	1be9      	subs	r1, r5, r7
    3f34:	60a1      	str	r1, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
    3f36:	2401      	movs	r4, #1
        // If the buffer didn't have enough data, just return false.
        //
        bSuccess = false;
    }

    am_hal_interrupt_master_set(ui32Primask);
    3f38:	f7fd fc56 	bl	17e8 <am_hal_interrupt_master_set>

    return bSuccess;
}
    3f3c:	4620      	mov	r0, r4
    3f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        bSuccess = false;
    3f40:	2400      	movs	r4, #0
    am_hal_interrupt_master_set(ui32Primask);
    3f42:	f7fd fc51 	bl	17e8 <am_hal_interrupt_master_set>
}
    3f46:	4620      	mov	r0, r4
    3f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f4a:	bf00      	nop

00003f4c <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    3f4c:	4a05      	ldr	r2, [pc, #20]	; (3f64 <am_hal_rtc_osc_select+0x18>)
    3f4e:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    3f50:	b918      	cbnz	r0, 3f5a <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    3f52:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    3f56:	6010      	str	r0, [r2, #0]
    3f58:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    3f5a:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    3f5e:	6011      	str	r1, [r2, #0]
    3f60:	4770      	bx	lr
    3f62:	bf00      	nop
    3f64:	4000400c 	.word	0x4000400c

00003f68 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    3f68:	4a02      	ldr	r2, [pc, #8]	; (3f74 <am_hal_rtc_osc_disable+0xc>)
    3f6a:	6813      	ldr	r3, [r2, #0]
    3f6c:	f043 0010 	orr.w	r0, r3, #16
    3f70:	6010      	str	r0, [r2, #0]
    3f72:	4770      	bx	lr
    3f74:	40004050 	.word	0x40004050

00003f78 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    3f78:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f7a:	b083      	sub	sp, #12
    3f7c:	4604      	mov	r4, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    3f7e:	f7fd fc2f 	bl	17e0 <am_hal_interrupt_master_disable>
    3f82:	4605      	mov	r5, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    3f84:	b124      	cbz	r4, 3f90 <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    3f86:	4b42      	ldr	r3, [pc, #264]	; (4090 <am_hal_sysctrl_sleep+0x118>)
    3f88:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    3f8a:	f010 0c01 	ands.w	ip, r0, #1
    3f8e:	d00a      	beq.n	3fa6 <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    3f90:	4a40      	ldr	r2, [pc, #256]	; (4094 <am_hal_sysctrl_sleep+0x11c>)
    3f92:	6811      	ldr	r1, [r2, #0]
    3f94:	f021 0604 	bic.w	r6, r1, #4
    3f98:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    3f9a:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    3f9c:	4628      	mov	r0, r5
    3f9e:	f7fd fc23 	bl	17e8 <am_hal_interrupt_master_set>
}
    3fa2:	b003      	add	sp, #12
    3fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    3fa6:	4c3b      	ldr	r4, [pc, #236]	; (4094 <am_hal_sysctrl_sleep+0x11c>)
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    3fa8:	4b3b      	ldr	r3, [pc, #236]	; (4098 <am_hal_sysctrl_sleep+0x120>)
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    3faa:	6820      	ldr	r0, [r4, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    3fac:	4e3b      	ldr	r6, [pc, #236]	; (409c <am_hal_sysctrl_sleep+0x124>)
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    3fae:	4f3c      	ldr	r7, [pc, #240]	; (40a0 <am_hal_sysctrl_sleep+0x128>)
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    3fb0:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 40b0 <am_hal_sysctrl_sleep+0x138>
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    3fb4:	f040 0204 	orr.w	r2, r0, #4
    3fb8:	6022      	str	r2, [r4, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    3fba:	681c      	ldr	r4, [r3, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    3fbc:	6833      	ldr	r3, [r6, #0]
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    3fbe:	f8de 2000 	ldr.w	r2, [lr]
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    3fc2:	6839      	ldr	r1, [r7, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    3fc4:	f004 07f0 	and.w	r7, r4, #240	; 0xf0
                   CHKBUCKZX_REV : 0x0;
    3fc8:	2f20      	cmp	r7, #32
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    3fca:	f103 30ff 	add.w	r0, r3, #4294967295
                   CHKBUCKZX_REV : 0x0;
    3fce:	bf14      	ite	ne
    3fd0:	2700      	movne	r7, #0
    3fd2:	2702      	moveq	r7, #2
                    CHKBUCKZX_TIMER : 0x0;
    3fd4:	2803      	cmp	r0, #3
    3fd6:	bf98      	it	ls
    3fd8:	f04f 0c04 	movls.w	ip, #4
                     CHKBUCKZX_BUCKS : 0x0;
    3fdc:	f012 0403 	ands.w	r4, r2, #3
    3fe0:	bf18      	it	ne
    3fe2:	2401      	movne	r4, #1
    g_buckZX_chk |= ( ui32SupplySrc &
    3fe4:	f240 53ff 	movw	r3, #1535	; 0x5ff
    g_buckZX_chk |= (ui32SupplySrc &
    3fe8:	433c      	orrs	r4, r7
                0x0 : CHKBUCKZX_DEVEN;
    3fea:	ea11 0703 	ands.w	r7, r1, r3
    g_buckZX_chk |= (ui32SupplySrc &
    3fee:	ea44 040c 	orr.w	r4, r4, ip
                0x0 : CHKBUCKZX_DEVEN;
    3ff2:	d103      	bne.n	3ffc <am_hal_sysctrl_sleep+0x84>
    g_buckZX_chk |= ( ui32SupplySrc &
    3ff4:	f044 0408 	orr.w	r4, r4, #8
        if ( bBuckZX_chk )
    3ff8:	2c0f      	cmp	r4, #15
    3ffa:	d00a      	beq.n	4012 <am_hal_sysctrl_sleep+0x9a>
        AM_ASM_WFI;
    3ffc:	bf30      	wfi
        if ( bBuckZX_chk )
    3ffe:	2c0f      	cmp	r4, #15
    4000:	d01a      	beq.n	4038 <am_hal_sysctrl_sleep+0xc0>
            g_bBuckRestoreComplete = true;
    4002:	4e28      	ldr	r6, [pc, #160]	; (40a4 <am_hal_sysctrl_sleep+0x12c>)
    4004:	2001      	movs	r0, #1
    4006:	7030      	strb	r0, [r6, #0]
    am_hal_interrupt_master_set(ui32Critical);
    4008:	4628      	mov	r0, r5
    400a:	f7fd fbed 	bl	17e8 <am_hal_interrupt_master_set>
}
    400e:	b003      	add	sp, #12
    4010:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ui32BuckTimer = g_ui32BuckTimer - 1;
    4012:	6832      	ldr	r2, [r6, #0]
    4014:	1e51      	subs	r1, r2, #1
    4016:	9100      	str	r1, [sp, #0]
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    4018:	9800      	ldr	r0, [sp, #0]
    401a:	f04f 31ff 	mov.w	r1, #4294967295
    401e:	f000 f8bf 	bl	41a0 <am_hal_ctimer_clear>
            am_hal_ctimer_period_set(ui32BuckTimer,
    4022:	9800      	ldr	r0, [sp, #0]
    4024:	463b      	mov	r3, r7
    4026:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    402a:	f04f 31ff 	mov.w	r1, #4294967295
    402e:	f000 f8cb 	bl	41c8 <am_hal_ctimer_period_set>
            am_hal_pwrctrl_bucks_disable();
    4032:	f7ff fe21 	bl	3c78 <am_hal_pwrctrl_bucks_disable>
    4036:	e7e1      	b.n	3ffc <am_hal_sysctrl_sleep+0x84>
    AM_CRITICAL_BEGIN_ASM
    4038:	f7fd fbd2 	bl	17e0 <am_hal_interrupt_master_disable>
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    403c:	4b1a      	ldr	r3, [pc, #104]	; (40a8 <am_hal_sysctrl_sleep+0x130>)
    AM_CRITICAL_BEGIN_ASM
    403e:	9001      	str	r0, [sp, #4]
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    4040:	681a      	ldr	r2, [r3, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    4042:	681a      	ldr	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    4044:	681f      	ldr	r7, [r3, #0]
    4046:	f027 043c 	bic.w	r4, r7, #60	; 0x3c
    404a:	f044 021c 	orr.w	r2, r4, #28
    404e:	601a      	str	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    4050:	6819      	ldr	r1, [r3, #0]
            g_bBuckRestoreComplete = false;
    4052:	4c14      	ldr	r4, [pc, #80]	; (40a4 <am_hal_sysctrl_sleep+0x12c>)
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    4054:	f421 30f0 	bic.w	r0, r1, #122880	; 0x1e000
    4058:	f440 4760 	orr.w	r7, r0, #57344	; 0xe000
    405c:	601f      	str	r7, [r3, #0]
    AM_CRITICAL_END_ASM
    405e:	9801      	ldr	r0, [sp, #4]
    4060:	f7fd fbc2 	bl	17e8 <am_hal_interrupt_master_set>
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    4064:	201c      	movs	r0, #28
    4066:	f7fd fae9 	bl	163c <am_hal_flash_delay>
            am_hal_pwrctrl_bucks_enable();
    406a:	f7ff fde9 	bl	3c40 <am_hal_pwrctrl_bucks_enable>
            ui32BuckTimer = g_ui32BuckTimer - 1;
    406e:	6836      	ldr	r6, [r6, #0]
            g_ui32BuckInputs = 0;
    4070:	490e      	ldr	r1, [pc, #56]	; (40ac <am_hal_sysctrl_sleep+0x134>)
            g_bBuckRestoreComplete = false;
    4072:	2200      	movs	r2, #0
            ui32BuckTimer = g_ui32BuckTimer - 1;
    4074:	1e73      	subs	r3, r6, #1
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    4076:	204c      	movs	r0, #76	; 0x4c
            ui32BuckTimer = g_ui32BuckTimer - 1;
    4078:	9300      	str	r3, [sp, #0]
            g_bBuckRestoreComplete = false;
    407a:	7022      	strb	r2, [r4, #0]
            g_ui32BuckInputs = 0;
    407c:	600a      	str	r2, [r1, #0]
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    407e:	f7fd fadd 	bl	163c <am_hal_flash_delay>
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    4082:	9800      	ldr	r0, [sp, #0]
    4084:	f04f 31ff 	mov.w	r1, #4294967295
    4088:	f000 f872 	bl	4170 <am_hal_ctimer_start>
    408c:	e786      	b.n	3f9c <am_hal_sysctrl_sleep+0x24>
    408e:	bf00      	nop
    4090:	40020250 	.word	0x40020250
    4094:	e000ed10 	.word	0xe000ed10
    4098:	4002000c 	.word	0x4002000c
    409c:	10001168 	.word	0x10001168
    40a0:	40021008 	.word	0x40021008
    40a4:	10001161 	.word	0x10001161
    40a8:	40020068 	.word	0x40020068
    40ac:	10001164 	.word	0x10001164
    40b0:	40021000 	.word	0x40021000

000040b4 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    40b4:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    40b6:	4a23      	ldr	r2, [pc, #140]	; (4144 <am_hal_tpiu_enable+0x90>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    40b8:	6803      	ldr	r3, [r0, #0]
    AM_REG(TPIU, FFCR) = 0;
    40ba:	2100      	movs	r1, #0
    40bc:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    40be:	b33b      	cbz	r3, 4110 <am_hal_tpiu_enable+0x5c>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    40c0:	f5a2 7c40 	sub.w	ip, r2, #768	; 0x300
    40c4:	2101      	movs	r1, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    40c6:	4c20      	ldr	r4, [pc, #128]	; (4148 <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    40c8:	4d20      	ldr	r5, [pc, #128]	; (414c <am_hal_tpiu_enable+0x98>)
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    40ca:	f8cc 1000 	str.w	r1, [ip]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    40ce:	f5a3 4e61 	sub.w	lr, r3, #57600	; 0xe100
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    40d2:	45a6      	cmp	lr, r4
    40d4:	bf94      	ite	ls
    40d6:	461c      	movls	r4, r3
    40d8:	462c      	movhi	r4, r5
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    40da:	f7fd fa93 	bl	1604 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    40de:	1c43      	adds	r3, r0, #1
    40e0:	d02d      	beq.n	413e <am_hal_tpiu_enable+0x8a>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    40e2:	08c2      	lsrs	r2, r0, #3
    40e4:	fbb2 f3f4 	udiv	r3, r2, r4
    40e8:	1e5d      	subs	r5, r3, #1
    40ea:	b2a8      	uxth	r0, r5
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    40ec:	4a18      	ldr	r2, [pc, #96]	; (4150 <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    40ee:	4c19      	ldr	r4, [pc, #100]	; (4154 <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    40f0:	4b19      	ldr	r3, [pc, #100]	; (4158 <am_hal_tpiu_enable+0xa4>)
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    40f2:	491a      	ldr	r1, [pc, #104]	; (415c <am_hal_tpiu_enable+0xa8>)
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    40f4:	6010      	str	r0, [r2, #0]
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    40f6:	2502      	movs	r5, #2
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    40f8:	2000      	movs	r0, #0
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    40fa:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    40fe:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    4100:	6008      	str	r0, [r1, #0]
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    4102:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    4104:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    4108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    410c:	f7fd ba96 	b.w	163c <am_hal_flash_delay>
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    4110:	4c0f      	ldr	r4, [pc, #60]	; (4150 <am_hal_tpiu_enable+0x9c>)
    4112:	6905      	ldr	r5, [r0, #16]
    4114:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    4116:	6882      	ldr	r2, [r0, #8]
    4118:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    411c:	68c3      	ldr	r3, [r0, #12]
    411e:	4c10      	ldr	r4, [pc, #64]	; (4160 <am_hal_tpiu_enable+0xac>)
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    4120:	490d      	ldr	r1, [pc, #52]	; (4158 <am_hal_tpiu_enable+0xa4>)
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    4122:	1e5d      	subs	r5, r3, #1
    4124:	2201      	movs	r2, #1
    4126:	40aa      	lsls	r2, r5
    4128:	6022      	str	r2, [r4, #0]
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    412a:	6840      	ldr	r0, [r0, #4]
    412c:	680b      	ldr	r3, [r1, #0]
    412e:	4303      	orrs	r3, r0
    4130:	600b      	str	r3, [r1, #0]
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    4132:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    4136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    413a:	f7fd ba7f 	b.w	163c <am_hal_flash_delay>
    413e:	2005      	movs	r0, #5
    4140:	e7d4      	b.n	40ec <am_hal_tpiu_enable+0x38>
    4142:	bf00      	nop
    4144:	e0040304 	.word	0xe0040304
    4148:	001da380 	.word	0x001da380
    414c:	000f4240 	.word	0x000f4240
    4150:	e0040010 	.word	0xe0040010
    4154:	e00400f0 	.word	0xe00400f0
    4158:	40020250 	.word	0x40020250
    415c:	e0040f00 	.word	0xe0040f00
    4160:	e0040004 	.word	0xe0040004

00004164 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    4164:	4b01      	ldr	r3, [pc, #4]	; (416c <am_hal_vcomp_disable+0x8>)
    4166:	2237      	movs	r2, #55	; 0x37
    4168:	601a      	str	r2, [r3, #0]
    416a:	4770      	bx	lr
    416c:	4000c008 	.word	0x4000c008

00004170 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    4170:	b570      	push	{r4, r5, r6, lr}
    4172:	b082      	sub	sp, #8
    4174:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    4176:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    4178:	f7fd fb32 	bl	17e0 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    417c:	4d07      	ldr	r5, [pc, #28]	; (419c <am_hal_ctimer_start+0x2c>)
    AM_CRITICAL_BEGIN_ASM
    417e:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    4180:	5971      	ldr	r1, [r6, r5]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    4182:	f004 2308 	and.w	r3, r4, #134219776	; 0x8000800
    4186:	ea21 0003 	bic.w	r0, r1, r3
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    418a:	f004 1201 	and.w	r2, r4, #65537	; 0x10001
    418e:	4302      	orrs	r2, r0
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    4190:	5172      	str	r2, [r6, r5]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    4192:	9801      	ldr	r0, [sp, #4]
    4194:	f7fd fb28 	bl	17e8 <am_hal_interrupt_master_set>
} // am_hal_ctimer_start()
    4198:	b002      	add	sp, #8
    419a:	bd70      	pop	{r4, r5, r6, pc}
    419c:	4000800c 	.word	0x4000800c

000041a0 <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    41a0:	b570      	push	{r4, r5, r6, lr}
    41a2:	b082      	sub	sp, #8
    41a4:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    41a6:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    41a8:	f7fd fb1a 	bl	17e0 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    41ac:	4d05      	ldr	r5, [pc, #20]	; (41c4 <am_hal_ctimer_clear+0x24>)
    AM_CRITICAL_BEGIN_ASM
    41ae:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    41b0:	5971      	ldr	r1, [r6, r5]
    41b2:	f004 2008 	and.w	r0, r4, #134219776	; 0x8000800
    41b6:	4308      	orrs	r0, r1
    41b8:	5170      	str	r0, [r6, r5]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    41ba:	9801      	ldr	r0, [sp, #4]
    41bc:	f7fd fb14 	bl	17e8 <am_hal_interrupt_master_set>
} // am_hal_ctimer_clear()
    41c0:	b002      	add	sp, #8
    41c2:	bd70      	pop	{r4, r5, r6, pc}
    41c4:	4000800c 	.word	0x4000800c

000041c8 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    41c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    41cc:	b082      	sub	sp, #8
    41ce:	4688      	mov	r8, r1
    41d0:	461f      	mov	r7, r3
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    41d2:	ea4f 1900 	mov.w	r9, r0, lsl #4
{
    41d6:	4614      	mov	r4, r2
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    41d8:	f7fd fb02 	bl	17e0 <am_hal_interrupt_master_disable>
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    41dc:	f8df a098 	ldr.w	sl, [pc, #152]	; 4278 <am_hal_ctimer_period_set+0xb0>
    AM_CRITICAL_BEGIN_ASM
    41e0:	9001      	str	r0, [sp, #4]
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    41e2:	f518 3f80 	cmn.w	r8, #65536	; 0x10000
                                    AM_REG_CTIMER_CMPRA0_O +
    41e6:	4d21      	ldr	r5, [pc, #132]	; (426c <am_hal_ctimer_period_set+0xa4>)
                                    AM_REG_CTIMER_CMPRB0_O +
    41e8:	4e21      	ldr	r6, [pc, #132]	; (4270 <am_hal_ctimer_period_set+0xa8>)
    ui32Mode = *pui32ControlReg;
    41ea:	f859 300a 	ldr.w	r3, [r9, sl]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    41ee:	d01b      	beq.n	4228 <am_hal_ctimer_period_set+0x60>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    41f0:	f403 70c0 	and.w	r0, r3, #384	; 0x180
    41f4:	2880      	cmp	r0, #128	; 0x80
    41f6:	d01c      	beq.n	4232 <am_hal_ctimer_period_set+0x6a>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    41f8:	f64f 77ff 	movw	r7, #65535	; 0xffff
    41fc:	2300      	movs	r3, #0
    41fe:	45b8      	cmp	r8, r7
        ui32Comp1 = 0;
    4200:	461a      	mov	r2, r3
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    4202:	d01d      	beq.n	4240 <am_hal_ctimer_period_set+0x78>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    4204:	491b      	ldr	r1, [pc, #108]	; (4274 <am_hal_ctimer_period_set+0xac>)
    4206:	4588      	cmp	r8, r1
    4208:	d025      	beq.n	4256 <am_hal_ctimer_period_set+0x8e>
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1 >> 16));
    420a:	400a      	ands	r2, r1
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    420c:	b2a0      	uxth	r0, r4
    420e:	4303      	orrs	r3, r0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    4210:	ea42 4414 	orr.w	r4, r2, r4, lsr #16
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    4214:	f849 3005 	str.w	r3, [r9, r5]
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    4218:	f849 4006 	str.w	r4, [r9, r6]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    421c:	9801      	ldr	r0, [sp, #4]
    421e:	f7fd fae3 	bl	17e8 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    4222:	b002      	add	sp, #8
    4224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ui32Mode = ui32Mode >> 16;
    4228:	0c19      	lsrs	r1, r3, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    422a:	f401 70c0 	and.w	r0, r1, #384	; 0x180
    422e:	2880      	cmp	r0, #128	; 0x80
    4230:	d110      	bne.n	4254 <am_hal_ctimer_period_set+0x8c>
    4232:	0423      	lsls	r3, r4, #16
        ui32Comp1 = ui32Period;
    4234:	4622      	mov	r2, r4
        ui32Comp0 = ui32Period - ui32OnTime;
    4236:	1be4      	subs	r4, r4, r7
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    4238:	f64f 77ff 	movw	r7, #65535	; 0xffff
    423c:	45b8      	cmp	r8, r7
    423e:	d1e1      	bne.n	4204 <am_hal_ctimer_period_set+0x3c>
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    4240:	b2a6      	uxth	r6, r4
    4242:	4333      	orrs	r3, r6
    4244:	f849 3005 	str.w	r3, [r9, r5]
    AM_CRITICAL_END_ASM
    4248:	9801      	ldr	r0, [sp, #4]
    424a:	f7fd facd 	bl	17e8 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    424e:	b002      	add	sp, #8
    4250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    4254:	2300      	movs	r3, #0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    4256:	b2a5      	uxth	r5, r4
    4258:	432b      	orrs	r3, r5
    425a:	f849 3006 	str.w	r3, [r9, r6]
    AM_CRITICAL_END_ASM
    425e:	9801      	ldr	r0, [sp, #4]
    4260:	f7fd fac2 	bl	17e8 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    4264:	b002      	add	sp, #8
    4266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    426a:	bf00      	nop
    426c:	40008004 	.word	0x40008004
    4270:	40008008 	.word	0x40008008
    4274:	ffff0000 	.word	0xffff0000
    4278:	4000800c 	.word	0x4000800c

0000427c <am_hal_i2c_bit_bang_receive>:
//*****************************************************************************
am_hal_i2c_bit_bang_enum_e
am_hal_i2c_bit_bang_receive(uint8_t address, uint32_t number_of_bytes,
                            uint8_t *pData, uint8_t ui8Offset,
                            bool bUseOffset, bool bNoStop)
{
    427c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    PULL_SCL_HI();
    4280:	4c9b      	ldr	r4, [pc, #620]	; (44f0 <am_hal_i2c_bit_bang_receive+0x274>)
{
    4282:	b083      	sub	sp, #12
    PULL_SCL_HI();
    4284:	68e7      	ldr	r7, [r4, #12]
{
    4286:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
    PULL_SCL_HI();
    428a:	69a6      	ldr	r6, [r4, #24]
{
    428c:	9501      	str	r5, [sp, #4]
    while (!GET_SCL())
    428e:	6965      	ldr	r5, [r4, #20]
    PULL_SCL_HI();
    4290:	603e      	str	r6, [r7, #0]
    while (!GET_SCL())
    4292:	682d      	ldr	r5, [r5, #0]
{
    4294:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
    4298:	9300      	str	r3, [sp, #0]
    while (!GET_SCL())
    429a:	422e      	tst	r6, r5
{
    429c:	4607      	mov	r7, r0
    429e:	468b      	mov	fp, r1
    42a0:	4690      	mov	r8, r2
    while (!GET_SCL())
    42a2:	bf08      	it	eq
    42a4:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    42a8:	d14c      	bne.n	4344 <am_hal_i2c_bit_bang_receive+0xc8>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    42aa:	2004      	movs	r0, #4
    42ac:	f7fd f9c6 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    42b0:	6962      	ldr	r2, [r4, #20]
    42b2:	69a3      	ldr	r3, [r4, #24]
    42b4:	6811      	ldr	r1, [r2, #0]
    42b6:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    42b8:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    42bc:	d142      	bne.n	4344 <am_hal_i2c_bit_bang_receive+0xc8>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    42be:	f7fd f9bd 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    42c2:	6966      	ldr	r6, [r4, #20]
    42c4:	69a3      	ldr	r3, [r4, #24]
    42c6:	6832      	ldr	r2, [r6, #0]
    42c8:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    42ca:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    42ce:	d139      	bne.n	4344 <am_hal_i2c_bit_bang_receive+0xc8>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    42d0:	f7fd f9b4 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    42d4:	6961      	ldr	r1, [r4, #20]
    42d6:	69a6      	ldr	r6, [r4, #24]
    42d8:	680b      	ldr	r3, [r1, #0]
    42da:	4233      	tst	r3, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    42dc:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    42e0:	d130      	bne.n	4344 <am_hal_i2c_bit_bang_receive+0xc8>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    42e2:	f7fd f9ab 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    42e6:	6962      	ldr	r2, [r4, #20]
    42e8:	69a1      	ldr	r1, [r4, #24]
    42ea:	6816      	ldr	r6, [r2, #0]
    42ec:	420e      	tst	r6, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    42ee:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    42f2:	d127      	bne.n	4344 <am_hal_i2c_bit_bang_receive+0xc8>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    42f4:	f7fd f9a2 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    42f8:	6962      	ldr	r2, [r4, #20]
    42fa:	69a3      	ldr	r3, [r4, #24]
    42fc:	6811      	ldr	r1, [r2, #0]
    42fe:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4300:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4304:	d11e      	bne.n	4344 <am_hal_i2c_bit_bang_receive+0xc8>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4306:	f7fd f999 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    430a:	6966      	ldr	r6, [r4, #20]
    430c:	69a3      	ldr	r3, [r4, #24]
    430e:	6832      	ldr	r2, [r6, #0]
    4310:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4312:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4316:	d115      	bne.n	4344 <am_hal_i2c_bit_bang_receive+0xc8>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4318:	f7fd f990 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    431c:	6961      	ldr	r1, [r4, #20]
    431e:	69a6      	ldr	r6, [r4, #24]
    4320:	680b      	ldr	r3, [r1, #0]
    4322:	4233      	tst	r3, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4324:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4328:	d10c      	bne.n	4344 <am_hal_i2c_bit_bang_receive+0xc8>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    432a:	f7fd f987 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    432e:	6960      	ldr	r0, [r4, #20]
    4330:	69a1      	ldr	r1, [r4, #24]
    4332:	6802      	ldr	r2, [r0, #0]
    4334:	420a      	tst	r2, r1
    4336:	d105      	bne.n	4344 <am_hal_i2c_bit_bang_receive+0xc8>
        if (--maxLoop == 0)
    4338:	3d08      	subs	r5, #8
    433a:	d1b6      	bne.n	42aa <am_hal_i2c_bit_bang_receive+0x2e>
    status = i2c_send_byte(address);
    if ( status != AM_HAL_I2C_BIT_BANG_SUCCESS )
    {
        if ( status == AM_HAL_I2C_BIT_BANG_DATA_NAKED)
        {
            return AM_HAL_I2C_BIT_BANG_ADDRESS_NAKED;
    433c:	2003      	movs	r0, #3

    //
    // message successfully received (how could we fail???)
    //
    return AM_HAL_I2C_BIT_BANG_SUCCESS;
}
    433e:	b003      	add	sp, #12
    4340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    WRITE_SDA_LO();
    4344:	6a26      	ldr	r6, [r4, #32]
    4346:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4348:	6033      	str	r3, [r6, #0]
    WAIT_I2C_CLOCK_HI_PERIOD();
    434a:	2005      	movs	r0, #5
    434c:	f7fd f976 	bl	163c <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    4350:	2600      	movs	r6, #0
        if ( one_byte & (0x80 >> i) )
    4352:	f04f 0980 	mov.w	r9, #128	; 0x80
    4356:	fa49 f306 	asr.w	r3, r9, r6
    435a:	423b      	tst	r3, r7
        WRITE_SCL_LO();
    435c:	6920      	ldr	r0, [r4, #16]
            PULL_SDA_HI();
    435e:	bf14      	ite	ne
    4360:	69e3      	ldrne	r3, [r4, #28]
            WRITE_SDA_LO();
    4362:	6a23      	ldreq	r3, [r4, #32]
        WRITE_SCL_LO();
    4364:	69a1      	ldr	r1, [r4, #24]
            WRITE_SDA_LO();
    4366:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        WRITE_SCL_LO();
    4368:	6001      	str	r1, [r0, #0]
            WRITE_SDA_LO();
    436a:	601a      	str	r2, [r3, #0]
        WAIT_I2C_CLOCK_LOW_PERIOD();
    436c:	2007      	movs	r0, #7
    436e:	f7fd f965 	bl	163c <am_hal_flash_delay>
    PULL_SCL_HI();
    4372:	68e0      	ldr	r0, [r4, #12]
    4374:	69a1      	ldr	r1, [r4, #24]
    while (!GET_SCL())
    4376:	6963      	ldr	r3, [r4, #20]
    PULL_SCL_HI();
    4378:	6001      	str	r1, [r0, #0]
    while (!GET_SCL())
    437a:	681a      	ldr	r2, [r3, #0]
    437c:	4211      	tst	r1, r2
    437e:	bf08      	it	eq
    4380:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    4384:	d149      	bne.n	441a <am_hal_i2c_bit_bang_receive+0x19e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4386:	2004      	movs	r0, #4
    4388:	f7fd f958 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    438c:	6961      	ldr	r1, [r4, #20]
    438e:	69a3      	ldr	r3, [r4, #24]
    4390:	680a      	ldr	r2, [r1, #0]
    4392:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4394:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4398:	d13f      	bne.n	441a <am_hal_i2c_bit_bang_receive+0x19e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    439a:	f7fd f94f 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    439e:	6961      	ldr	r1, [r4, #20]
    43a0:	69a3      	ldr	r3, [r4, #24]
    43a2:	680a      	ldr	r2, [r1, #0]
    43a4:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    43a6:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    43aa:	d136      	bne.n	441a <am_hal_i2c_bit_bang_receive+0x19e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    43ac:	f7fd f946 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    43b0:	6961      	ldr	r1, [r4, #20]
    43b2:	69a3      	ldr	r3, [r4, #24]
    43b4:	680a      	ldr	r2, [r1, #0]
    43b6:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    43b8:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    43bc:	d12d      	bne.n	441a <am_hal_i2c_bit_bang_receive+0x19e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    43be:	f7fd f93d 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    43c2:	6961      	ldr	r1, [r4, #20]
    43c4:	69a3      	ldr	r3, [r4, #24]
    43c6:	680a      	ldr	r2, [r1, #0]
    43c8:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    43ca:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    43ce:	d124      	bne.n	441a <am_hal_i2c_bit_bang_receive+0x19e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    43d0:	f7fd f934 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    43d4:	6961      	ldr	r1, [r4, #20]
    43d6:	69a3      	ldr	r3, [r4, #24]
    43d8:	680a      	ldr	r2, [r1, #0]
    43da:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    43dc:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    43e0:	d11b      	bne.n	441a <am_hal_i2c_bit_bang_receive+0x19e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    43e2:	f7fd f92b 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    43e6:	6961      	ldr	r1, [r4, #20]
    43e8:	69a3      	ldr	r3, [r4, #24]
    43ea:	680a      	ldr	r2, [r1, #0]
    43ec:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    43ee:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    43f2:	d112      	bne.n	441a <am_hal_i2c_bit_bang_receive+0x19e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    43f4:	f7fd f922 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    43f8:	6961      	ldr	r1, [r4, #20]
    43fa:	69a3      	ldr	r3, [r4, #24]
    43fc:	680a      	ldr	r2, [r1, #0]
    43fe:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4400:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4404:	d109      	bne.n	441a <am_hal_i2c_bit_bang_receive+0x19e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4406:	f7fd f919 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    440a:	6960      	ldr	r0, [r4, #20]
    440c:	69a1      	ldr	r1, [r4, #24]
    440e:	6803      	ldr	r3, [r0, #0]
    4410:	420b      	tst	r3, r1
    4412:	d102      	bne.n	441a <am_hal_i2c_bit_bang_receive+0x19e>
        if (--maxLoop == 0)
    4414:	3d08      	subs	r5, #8
    4416:	d1b6      	bne.n	4386 <am_hal_i2c_bit_bang_receive+0x10a>
    4418:	e790      	b.n	433c <am_hal_i2c_bit_bang_receive+0xc0>
    for (i = 0; i < 8; i++)
    441a:	3601      	adds	r6, #1
        WAIT_I2C_CLOCK_HI_PERIOD();
    441c:	2005      	movs	r0, #5
    441e:	f7fd f90d 	bl	163c <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    4422:	2e08      	cmp	r6, #8
    4424:	d197      	bne.n	4356 <am_hal_i2c_bit_bang_receive+0xda>
    WRITE_SCL_LO();
    4426:	6927      	ldr	r7, [r4, #16]
    4428:	69a2      	ldr	r2, [r4, #24]
    442a:	603a      	str	r2, [r7, #0]
    WAIT_I2C_CLOCK_LOW_PERIOD();
    442c:	2007      	movs	r0, #7
    442e:	f7fd f905 	bl	163c <am_hal_flash_delay>
    PULL_SCL_HI();
    4432:	68e0      	ldr	r0, [r4, #12]
    4434:	69a1      	ldr	r1, [r4, #24]
    while (!GET_SCL())
    4436:	6963      	ldr	r3, [r4, #20]
    PULL_SCL_HI();
    4438:	6001      	str	r1, [r0, #0]
    while (!GET_SCL())
    443a:	681f      	ldr	r7, [r3, #0]
    443c:	4239      	tst	r1, r7
    443e:	bf08      	it	eq
    4440:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    4444:	d149      	bne.n	44da <am_hal_i2c_bit_bang_receive+0x25e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4446:	2004      	movs	r0, #4
    4448:	f7fd f8f8 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    444c:	6962      	ldr	r2, [r4, #20]
    444e:	69a1      	ldr	r1, [r4, #24]
    4450:	6813      	ldr	r3, [r2, #0]
    4452:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4454:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4458:	d13f      	bne.n	44da <am_hal_i2c_bit_bang_receive+0x25e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    445a:	f7fd f8ef 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    445e:	6967      	ldr	r7, [r4, #20]
    4460:	69a1      	ldr	r1, [r4, #24]
    4462:	683a      	ldr	r2, [r7, #0]
    4464:	420a      	tst	r2, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4466:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    446a:	d136      	bne.n	44da <am_hal_i2c_bit_bang_receive+0x25e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    446c:	f7fd f8e6 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4470:	6967      	ldr	r7, [r4, #20]
    4472:	69a3      	ldr	r3, [r4, #24]
    4474:	6839      	ldr	r1, [r7, #0]
    4476:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4478:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    447c:	d12d      	bne.n	44da <am_hal_i2c_bit_bang_receive+0x25e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    447e:	f7fd f8dd 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4482:	6962      	ldr	r2, [r4, #20]
    4484:	69a7      	ldr	r7, [r4, #24]
    4486:	6813      	ldr	r3, [r2, #0]
    4488:	423b      	tst	r3, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    448a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    448e:	d124      	bne.n	44da <am_hal_i2c_bit_bang_receive+0x25e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4490:	f7fd f8d4 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4494:	6961      	ldr	r1, [r4, #20]
    4496:	69a7      	ldr	r7, [r4, #24]
    4498:	680a      	ldr	r2, [r1, #0]
    449a:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    449c:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    44a0:	d11b      	bne.n	44da <am_hal_i2c_bit_bang_receive+0x25e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    44a2:	f7fd f8cb 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    44a6:	6961      	ldr	r1, [r4, #20]
    44a8:	69a3      	ldr	r3, [r4, #24]
    44aa:	680f      	ldr	r7, [r1, #0]
    44ac:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    44ae:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    44b2:	d112      	bne.n	44da <am_hal_i2c_bit_bang_receive+0x25e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    44b4:	f7fd f8c2 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    44b8:	6962      	ldr	r2, [r4, #20]
    44ba:	69a1      	ldr	r1, [r4, #24]
    44bc:	6813      	ldr	r3, [r2, #0]
    44be:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    44c0:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    44c4:	d109      	bne.n	44da <am_hal_i2c_bit_bang_receive+0x25e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    44c6:	f7fd f8b9 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    44ca:	6960      	ldr	r0, [r4, #20]
    44cc:	69a7      	ldr	r7, [r4, #24]
    44ce:	6802      	ldr	r2, [r0, #0]
    44d0:	423a      	tst	r2, r7
    44d2:	d102      	bne.n	44da <am_hal_i2c_bit_bang_receive+0x25e>
        if (--maxLoop == 0)
    44d4:	3d08      	subs	r5, #8
    44d6:	d1b6      	bne.n	4446 <am_hal_i2c_bit_bang_receive+0x1ca>
    44d8:	e730      	b.n	433c <am_hal_i2c_bit_bang_receive+0xc0>
    data_naked = GET_SDA();
    44da:	6a65      	ldr	r5, [r4, #36]	; 0x24
    44dc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    44de:	682d      	ldr	r5, [r5, #0]
    WAIT_I2C_CLOCK_HI_PERIOD();
    44e0:	2005      	movs	r0, #5
    data_naked = GET_SDA();
    44e2:	400d      	ands	r5, r1
    WAIT_I2C_CLOCK_HI_PERIOD();
    44e4:	f7fd f8aa 	bl	163c <am_hal_flash_delay>
    if ( data_naked )
    44e8:	b125      	cbz	r5, 44f4 <am_hal_i2c_bit_bang_receive+0x278>
            return AM_HAL_I2C_BIT_BANG_ADDRESS_NAKED;
    44ea:	2001      	movs	r0, #1
    44ec:	e727      	b.n	433e <am_hal_i2c_bit_bang_receive+0xc2>
    44ee:	bf00      	nop
    44f0:	1000116c 	.word	0x1000116c
    if ( bUseOffset )
    44f4:	9b01      	ldr	r3, [sp, #4]
    44f6:	2b00      	cmp	r3, #0
    44f8:	f040 81b4 	bne.w	4864 <am_hal_i2c_bit_bang_receive+0x5e8>
    for (ui32I = 0; ui32I < number_of_bytes - 1; ui32I++)
    44fc:	f1bb 0b01 	subs.w	fp, fp, #1
    4500:	f000 80d8 	beq.w	46b4 <am_hal_i2c_bit_bang_receive+0x438>
    4504:	46c1      	mov	r9, r8
    4506:	44c3      	add	fp, r8
    while (!GET_SCL())
    4508:	2700      	movs	r7, #0
    450a:	463e      	mov	r6, r7
            data_byte |=  (0x80 >> i);
    450c:	f04f 0880 	mov.w	r8, #128	; 0x80
        WRITE_SCL_LO();
    4510:	6921      	ldr	r1, [r4, #16]
        PULL_SDA_HI();
    4512:	69e3      	ldr	r3, [r4, #28]
        WRITE_SCL_LO();
    4514:	69a0      	ldr	r0, [r4, #24]
        PULL_SDA_HI();
    4516:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        WRITE_SCL_LO();
    4518:	6008      	str	r0, [r1, #0]
        PULL_SDA_HI();
    451a:	601a      	str	r2, [r3, #0]
        WAIT_I2C_CLOCK_LOW_PERIOD();
    451c:	2007      	movs	r0, #7
    451e:	f7fd f88d 	bl	163c <am_hal_flash_delay>
    PULL_SCL_HI();
    4522:	68e1      	ldr	r1, [r4, #12]
    4524:	69a3      	ldr	r3, [r4, #24]
    while (!GET_SCL())
    4526:	6960      	ldr	r0, [r4, #20]
    PULL_SCL_HI();
    4528:	600b      	str	r3, [r1, #0]
    while (!GET_SCL())
    452a:	6802      	ldr	r2, [r0, #0]
    452c:	4213      	tst	r3, r2
    452e:	bf08      	it	eq
    4530:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    4534:	d149      	bne.n	45ca <am_hal_i2c_bit_bang_receive+0x34e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4536:	2004      	movs	r0, #4
    4538:	f7fd f880 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    453c:	6961      	ldr	r1, [r4, #20]
    453e:	69a3      	ldr	r3, [r4, #24]
    4540:	680a      	ldr	r2, [r1, #0]
    4542:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4544:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4548:	d13f      	bne.n	45ca <am_hal_i2c_bit_bang_receive+0x34e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    454a:	f7fd f877 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    454e:	6961      	ldr	r1, [r4, #20]
    4550:	69a3      	ldr	r3, [r4, #24]
    4552:	680a      	ldr	r2, [r1, #0]
    4554:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4556:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    455a:	d136      	bne.n	45ca <am_hal_i2c_bit_bang_receive+0x34e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    455c:	f7fd f86e 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4560:	6961      	ldr	r1, [r4, #20]
    4562:	69a3      	ldr	r3, [r4, #24]
    4564:	680a      	ldr	r2, [r1, #0]
    4566:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4568:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    456c:	d12d      	bne.n	45ca <am_hal_i2c_bit_bang_receive+0x34e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    456e:	f7fd f865 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4572:	6961      	ldr	r1, [r4, #20]
    4574:	69a3      	ldr	r3, [r4, #24]
    4576:	680a      	ldr	r2, [r1, #0]
    4578:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    457a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    457e:	d124      	bne.n	45ca <am_hal_i2c_bit_bang_receive+0x34e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4580:	f7fd f85c 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4584:	6961      	ldr	r1, [r4, #20]
    4586:	69a3      	ldr	r3, [r4, #24]
    4588:	680a      	ldr	r2, [r1, #0]
    458a:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    458c:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4590:	d11b      	bne.n	45ca <am_hal_i2c_bit_bang_receive+0x34e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4592:	f7fd f853 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4596:	6961      	ldr	r1, [r4, #20]
    4598:	69a3      	ldr	r3, [r4, #24]
    459a:	680a      	ldr	r2, [r1, #0]
    459c:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    459e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    45a2:	d112      	bne.n	45ca <am_hal_i2c_bit_bang_receive+0x34e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    45a4:	f7fd f84a 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    45a8:	6961      	ldr	r1, [r4, #20]
    45aa:	69a3      	ldr	r3, [r4, #24]
    45ac:	680a      	ldr	r2, [r1, #0]
    45ae:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    45b0:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    45b4:	d109      	bne.n	45ca <am_hal_i2c_bit_bang_receive+0x34e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    45b6:	f7fd f841 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    45ba:	6960      	ldr	r0, [r4, #20]
    45bc:	69a1      	ldr	r1, [r4, #24]
    45be:	6803      	ldr	r3, [r0, #0]
    45c0:	420b      	tst	r3, r1
    45c2:	d102      	bne.n	45ca <am_hal_i2c_bit_bang_receive+0x34e>
        if (--maxLoop == 0)
    45c4:	3d08      	subs	r5, #8
    45c6:	d1b6      	bne.n	4536 <am_hal_i2c_bit_bang_receive+0x2ba>
    45c8:	e6b8      	b.n	433c <am_hal_i2c_bit_bang_receive+0xc0>
        if ( GET_SDA() )
    45ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
    45cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    45ce:	6811      	ldr	r1, [r2, #0]
    45d0:	4201      	tst	r1, r0
    45d2:	d003      	beq.n	45dc <am_hal_i2c_bit_bang_receive+0x360>
            data_byte |=  (0x80 >> i);
    45d4:	fa48 f306 	asr.w	r3, r8, r6
    45d8:	431f      	orrs	r7, r3
    45da:	b2ff      	uxtb	r7, r7
    for (i = 0; i < 8; i++)
    45dc:	3601      	adds	r6, #1
        WAIT_I2C_CLOCK_HI_PERIOD();
    45de:	2005      	movs	r0, #5
    45e0:	f7fd f82c 	bl	163c <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    45e4:	2e08      	cmp	r6, #8
    45e6:	d193      	bne.n	4510 <am_hal_i2c_bit_bang_receive+0x294>
    WRITE_SCL_LO();
    45e8:	6921      	ldr	r1, [r4, #16]
        WRITE_SDA_LO();
    45ea:	6a26      	ldr	r6, [r4, #32]
    WRITE_SCL_LO();
    45ec:	69a0      	ldr	r0, [r4, #24]
        WRITE_SDA_LO();
    45ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    *pRxByte = data_byte;
    45f0:	f809 7b01 	strb.w	r7, [r9], #1
    WRITE_SCL_LO();
    45f4:	6008      	str	r0, [r1, #0]
        WRITE_SDA_LO();
    45f6:	6032      	str	r2, [r6, #0]
    WAIT_I2C_CLOCK_LOW_PERIOD();
    45f8:	2007      	movs	r0, #7
    45fa:	f7fd f81f 	bl	163c <am_hal_flash_delay>
    PULL_SCL_HI();
    45fe:	68e7      	ldr	r7, [r4, #12]
    4600:	69a3      	ldr	r3, [r4, #24]
    while (!GET_SCL())
    4602:	6961      	ldr	r1, [r4, #20]
    PULL_SCL_HI();
    4604:	603b      	str	r3, [r7, #0]
    while (!GET_SCL())
    4606:	680e      	ldr	r6, [r1, #0]
    4608:	4233      	tst	r3, r6
    460a:	bf08      	it	eq
    460c:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    4610:	d149      	bne.n	46a6 <am_hal_i2c_bit_bang_receive+0x42a>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4612:	2004      	movs	r0, #4
    4614:	f7fd f812 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4618:	6962      	ldr	r2, [r4, #20]
    461a:	69a7      	ldr	r7, [r4, #24]
    461c:	6813      	ldr	r3, [r2, #0]
    461e:	423b      	tst	r3, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4620:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4624:	d13f      	bne.n	46a6 <am_hal_i2c_bit_bang_receive+0x42a>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4626:	f7fd f809 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    462a:	6961      	ldr	r1, [r4, #20]
    462c:	69a6      	ldr	r6, [r4, #24]
    462e:	680a      	ldr	r2, [r1, #0]
    4630:	4232      	tst	r2, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4632:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4636:	d136      	bne.n	46a6 <am_hal_i2c_bit_bang_receive+0x42a>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4638:	f7fd f800 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    463c:	6967      	ldr	r7, [r4, #20]
    463e:	69a3      	ldr	r3, [r4, #24]
    4640:	6839      	ldr	r1, [r7, #0]
    4642:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4644:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4648:	d12d      	bne.n	46a6 <am_hal_i2c_bit_bang_receive+0x42a>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    464a:	f7fc fff7 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    464e:	6966      	ldr	r6, [r4, #20]
    4650:	69a7      	ldr	r7, [r4, #24]
    4652:	6832      	ldr	r2, [r6, #0]
    4654:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4656:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    465a:	d124      	bne.n	46a6 <am_hal_i2c_bit_bang_receive+0x42a>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    465c:	f7fc ffee 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4660:	6961      	ldr	r1, [r4, #20]
    4662:	69a3      	ldr	r3, [r4, #24]
    4664:	680e      	ldr	r6, [r1, #0]
    4666:	421e      	tst	r6, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4668:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    466c:	d11b      	bne.n	46a6 <am_hal_i2c_bit_bang_receive+0x42a>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    466e:	f7fc ffe5 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4672:	6967      	ldr	r7, [r4, #20]
    4674:	69a1      	ldr	r1, [r4, #24]
    4676:	683a      	ldr	r2, [r7, #0]
    4678:	420a      	tst	r2, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    467a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    467e:	d112      	bne.n	46a6 <am_hal_i2c_bit_bang_receive+0x42a>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4680:	f7fc ffdc 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4684:	6966      	ldr	r6, [r4, #20]
    4686:	69a3      	ldr	r3, [r4, #24]
    4688:	6837      	ldr	r7, [r6, #0]
    468a:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    468c:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4690:	d109      	bne.n	46a6 <am_hal_i2c_bit_bang_receive+0x42a>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4692:	f7fc ffd3 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4696:	6960      	ldr	r0, [r4, #20]
    4698:	69a1      	ldr	r1, [r4, #24]
    469a:	6802      	ldr	r2, [r0, #0]
    469c:	420a      	tst	r2, r1
    469e:	d102      	bne.n	46a6 <am_hal_i2c_bit_bang_receive+0x42a>
        if (--maxLoop == 0)
    46a0:	3d08      	subs	r5, #8
    46a2:	d1b6      	bne.n	4612 <am_hal_i2c_bit_bang_receive+0x396>
    46a4:	e64a      	b.n	433c <am_hal_i2c_bit_bang_receive+0xc0>
    WAIT_I2C_CLOCK_HI_PERIOD();
    46a6:	2005      	movs	r0, #5
    46a8:	f7fc ffc8 	bl	163c <am_hal_flash_delay>
    for (ui32I = 0; ui32I < number_of_bytes - 1; ui32I++)
    46ac:	45d9      	cmp	r9, fp
        pData++;
    46ae:	46c8      	mov	r8, r9
    for (ui32I = 0; ui32I < number_of_bytes - 1; ui32I++)
    46b0:	f47f af2a 	bne.w	4508 <am_hal_i2c_bit_bang_receive+0x28c>
    while (!GET_SCL())
    46b4:	2600      	movs	r6, #0
    46b6:	4637      	mov	r7, r6
            data_byte |=  (0x80 >> i);
    46b8:	f04f 0980 	mov.w	r9, #128	; 0x80
        WRITE_SCL_LO();
    46bc:	6920      	ldr	r0, [r4, #16]
        PULL_SDA_HI();
    46be:	69e3      	ldr	r3, [r4, #28]
        WRITE_SCL_LO();
    46c0:	69a1      	ldr	r1, [r4, #24]
        PULL_SDA_HI();
    46c2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        WRITE_SCL_LO();
    46c4:	6001      	str	r1, [r0, #0]
        PULL_SDA_HI();
    46c6:	601a      	str	r2, [r3, #0]
        WAIT_I2C_CLOCK_LOW_PERIOD();
    46c8:	2007      	movs	r0, #7
    46ca:	f7fc ffb7 	bl	163c <am_hal_flash_delay>
    PULL_SCL_HI();
    46ce:	68e0      	ldr	r0, [r4, #12]
    46d0:	69a3      	ldr	r3, [r4, #24]
    while (!GET_SCL())
    46d2:	6961      	ldr	r1, [r4, #20]
    PULL_SCL_HI();
    46d4:	6003      	str	r3, [r0, #0]
    while (!GET_SCL())
    46d6:	680a      	ldr	r2, [r1, #0]
    46d8:	4213      	tst	r3, r2
    46da:	bf08      	it	eq
    46dc:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    46e0:	d149      	bne.n	4776 <am_hal_i2c_bit_bang_receive+0x4fa>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    46e2:	2004      	movs	r0, #4
    46e4:	f7fc ffaa 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    46e8:	6961      	ldr	r1, [r4, #20]
    46ea:	69a3      	ldr	r3, [r4, #24]
    46ec:	680a      	ldr	r2, [r1, #0]
    46ee:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    46f0:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    46f4:	d13f      	bne.n	4776 <am_hal_i2c_bit_bang_receive+0x4fa>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    46f6:	f7fc ffa1 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    46fa:	6961      	ldr	r1, [r4, #20]
    46fc:	69a3      	ldr	r3, [r4, #24]
    46fe:	680a      	ldr	r2, [r1, #0]
    4700:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4702:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4706:	d136      	bne.n	4776 <am_hal_i2c_bit_bang_receive+0x4fa>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4708:	f7fc ff98 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    470c:	6961      	ldr	r1, [r4, #20]
    470e:	69a3      	ldr	r3, [r4, #24]
    4710:	680a      	ldr	r2, [r1, #0]
    4712:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4714:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4718:	d12d      	bne.n	4776 <am_hal_i2c_bit_bang_receive+0x4fa>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    471a:	f7fc ff8f 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    471e:	6961      	ldr	r1, [r4, #20]
    4720:	69a3      	ldr	r3, [r4, #24]
    4722:	680a      	ldr	r2, [r1, #0]
    4724:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4726:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    472a:	d124      	bne.n	4776 <am_hal_i2c_bit_bang_receive+0x4fa>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    472c:	f7fc ff86 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4730:	6961      	ldr	r1, [r4, #20]
    4732:	69a3      	ldr	r3, [r4, #24]
    4734:	680a      	ldr	r2, [r1, #0]
    4736:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4738:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    473c:	d11b      	bne.n	4776 <am_hal_i2c_bit_bang_receive+0x4fa>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    473e:	f7fc ff7d 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4742:	6961      	ldr	r1, [r4, #20]
    4744:	69a3      	ldr	r3, [r4, #24]
    4746:	680a      	ldr	r2, [r1, #0]
    4748:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    474a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    474e:	d112      	bne.n	4776 <am_hal_i2c_bit_bang_receive+0x4fa>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4750:	f7fc ff74 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4754:	6961      	ldr	r1, [r4, #20]
    4756:	69a3      	ldr	r3, [r4, #24]
    4758:	680a      	ldr	r2, [r1, #0]
    475a:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    475c:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4760:	d109      	bne.n	4776 <am_hal_i2c_bit_bang_receive+0x4fa>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4762:	f7fc ff6b 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4766:	6960      	ldr	r0, [r4, #20]
    4768:	69a1      	ldr	r1, [r4, #24]
    476a:	6803      	ldr	r3, [r0, #0]
    476c:	420b      	tst	r3, r1
    476e:	d102      	bne.n	4776 <am_hal_i2c_bit_bang_receive+0x4fa>
        if (--maxLoop == 0)
    4770:	3d08      	subs	r5, #8
    4772:	d1b6      	bne.n	46e2 <am_hal_i2c_bit_bang_receive+0x466>
    4774:	e5e2      	b.n	433c <am_hal_i2c_bit_bang_receive+0xc0>
        if ( GET_SDA() )
    4776:	6a62      	ldr	r2, [r4, #36]	; 0x24
    4778:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    477a:	6811      	ldr	r1, [r2, #0]
    477c:	4201      	tst	r1, r0
    477e:	d003      	beq.n	4788 <am_hal_i2c_bit_bang_receive+0x50c>
            data_byte |=  (0x80 >> i);
    4780:	fa49 f307 	asr.w	r3, r9, r7
    4784:	431e      	orrs	r6, r3
    4786:	b2f6      	uxtb	r6, r6
    for (i = 0; i < 8; i++)
    4788:	3701      	adds	r7, #1
        WAIT_I2C_CLOCK_HI_PERIOD();
    478a:	2005      	movs	r0, #5
    478c:	f7fc ff56 	bl	163c <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    4790:	2f08      	cmp	r7, #8
    4792:	d193      	bne.n	46bc <am_hal_i2c_bit_bang_receive+0x440>
    WRITE_SCL_LO();
    4794:	6921      	ldr	r1, [r4, #16]
        PULL_SDA_HI();
    4796:	69e7      	ldr	r7, [r4, #28]
    WRITE_SCL_LO();
    4798:	69a5      	ldr	r5, [r4, #24]
        PULL_SDA_HI();
    479a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    *pRxByte = data_byte;
    479c:	f888 6000 	strb.w	r6, [r8]
    WAIT_I2C_CLOCK_LOW_PERIOD();
    47a0:	2007      	movs	r0, #7
    WRITE_SCL_LO();
    47a2:	600d      	str	r5, [r1, #0]
        PULL_SDA_HI();
    47a4:	603a      	str	r2, [r7, #0]
    WAIT_I2C_CLOCK_LOW_PERIOD();
    47a6:	f7fc ff49 	bl	163c <am_hal_flash_delay>
    PULL_SCL_HI();
    47aa:	68e0      	ldr	r0, [r4, #12]
    47ac:	69a3      	ldr	r3, [r4, #24]
    while (!GET_SCL())
    47ae:	6966      	ldr	r6, [r4, #20]
    PULL_SCL_HI();
    47b0:	6003      	str	r3, [r0, #0]
    while (!GET_SCL())
    47b2:	6831      	ldr	r1, [r6, #0]
    47b4:	4219      	tst	r1, r3
    47b6:	bf08      	it	eq
    47b8:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    47bc:	f040 811d 	bne.w	49fa <am_hal_i2c_bit_bang_receive+0x77e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    47c0:	2004      	movs	r0, #4
    47c2:	f7fc ff3b 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    47c6:	6967      	ldr	r7, [r4, #20]
    47c8:	69a3      	ldr	r3, [r4, #24]
    47ca:	683a      	ldr	r2, [r7, #0]
    47cc:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    47ce:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    47d2:	f040 8112 	bne.w	49fa <am_hal_i2c_bit_bang_receive+0x77e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    47d6:	f7fc ff31 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    47da:	6966      	ldr	r6, [r4, #20]
    47dc:	69a1      	ldr	r1, [r4, #24]
    47de:	6837      	ldr	r7, [r6, #0]
    47e0:	420f      	tst	r7, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    47e2:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    47e6:	f040 8108 	bne.w	49fa <am_hal_i2c_bit_bang_receive+0x77e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    47ea:	f7fc ff27 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    47ee:	6962      	ldr	r2, [r4, #20]
    47f0:	69a3      	ldr	r3, [r4, #24]
    47f2:	6816      	ldr	r6, [r2, #0]
    47f4:	421e      	tst	r6, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    47f6:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    47fa:	f040 80fe 	bne.w	49fa <am_hal_i2c_bit_bang_receive+0x77e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    47fe:	f7fc ff1d 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4802:	6961      	ldr	r1, [r4, #20]
    4804:	69a7      	ldr	r7, [r4, #24]
    4806:	680a      	ldr	r2, [r1, #0]
    4808:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    480a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    480e:	f040 80f4 	bne.w	49fa <am_hal_i2c_bit_bang_receive+0x77e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4812:	f7fc ff13 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4816:	6966      	ldr	r6, [r4, #20]
    4818:	69a3      	ldr	r3, [r4, #24]
    481a:	6831      	ldr	r1, [r6, #0]
    481c:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    481e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4822:	f040 80ea 	bne.w	49fa <am_hal_i2c_bit_bang_receive+0x77e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4826:	f7fc ff09 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    482a:	6967      	ldr	r7, [r4, #20]
    482c:	69a6      	ldr	r6, [r4, #24]
    482e:	683a      	ldr	r2, [r7, #0]
    4830:	4232      	tst	r2, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4832:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4836:	f040 80e0 	bne.w	49fa <am_hal_i2c_bit_bang_receive+0x77e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    483a:	f7fc feff 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    483e:	6961      	ldr	r1, [r4, #20]
    4840:	69a3      	ldr	r3, [r4, #24]
    4842:	680f      	ldr	r7, [r1, #0]
    4844:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4846:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    484a:	f040 80d6 	bne.w	49fa <am_hal_i2c_bit_bang_receive+0x77e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    484e:	f7fc fef5 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4852:	6960      	ldr	r0, [r4, #20]
    4854:	69a6      	ldr	r6, [r4, #24]
    4856:	6802      	ldr	r2, [r0, #0]
    4858:	4232      	tst	r2, r6
    485a:	f040 80ce 	bne.w	49fa <am_hal_i2c_bit_bang_receive+0x77e>
        if (--maxLoop == 0)
    485e:	3d08      	subs	r5, #8
    4860:	d1ae      	bne.n	47c0 <am_hal_i2c_bit_bang_receive+0x544>
    4862:	e56b      	b.n	433c <am_hal_i2c_bit_bang_receive+0xc0>
        if ( one_byte & (0x80 >> i) )
    4864:	f04f 0980 	mov.w	r9, #128	; 0x80
    4868:	9b00      	ldr	r3, [sp, #0]
        WRITE_SCL_LO();
    486a:	6920      	ldr	r0, [r4, #16]
    486c:	69a2      	ldr	r2, [r4, #24]
    486e:	6002      	str	r2, [r0, #0]
        if ( one_byte & (0x80 >> i) )
    4870:	fa49 f105 	asr.w	r1, r9, r5
    4874:	4219      	tst	r1, r3
            PULL_SDA_HI();
    4876:	bf14      	ite	ne
    4878:	69e1      	ldrne	r1, [r4, #28]
            WRITE_SDA_LO();
    487a:	6a21      	ldreq	r1, [r4, #32]
    487c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    487e:	6008      	str	r0, [r1, #0]
        WAIT_I2C_CLOCK_LOW_PERIOD();
    4880:	2007      	movs	r0, #7
    4882:	f7fc fedb 	bl	163c <am_hal_flash_delay>
    PULL_SCL_HI();
    4886:	68e1      	ldr	r1, [r4, #12]
    4888:	69a3      	ldr	r3, [r4, #24]
    while (!GET_SCL())
    488a:	6962      	ldr	r2, [r4, #20]
    PULL_SCL_HI();
    488c:	600b      	str	r3, [r1, #0]
    while (!GET_SCL())
    488e:	6810      	ldr	r0, [r2, #0]
    4890:	4203      	tst	r3, r0
    4892:	bf08      	it	eq
    4894:	f44f 76c8 	moveq.w	r6, #400	; 0x190
    4898:	d149      	bne.n	492e <am_hal_i2c_bit_bang_receive+0x6b2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    489a:	2004      	movs	r0, #4
    489c:	f7fc fece 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    48a0:	6961      	ldr	r1, [r4, #20]
    48a2:	69a3      	ldr	r3, [r4, #24]
    48a4:	680a      	ldr	r2, [r1, #0]
    48a6:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    48a8:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    48ac:	d13f      	bne.n	492e <am_hal_i2c_bit_bang_receive+0x6b2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    48ae:	f7fc fec5 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    48b2:	6967      	ldr	r7, [r4, #20]
    48b4:	69a1      	ldr	r1, [r4, #24]
    48b6:	683b      	ldr	r3, [r7, #0]
    48b8:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    48ba:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    48be:	d136      	bne.n	492e <am_hal_i2c_bit_bang_receive+0x6b2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    48c0:	f7fc febc 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    48c4:	6962      	ldr	r2, [r4, #20]
    48c6:	69a7      	ldr	r7, [r4, #24]
    48c8:	6811      	ldr	r1, [r2, #0]
    48ca:	4239      	tst	r1, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    48cc:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    48d0:	d12d      	bne.n	492e <am_hal_i2c_bit_bang_receive+0x6b2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    48d2:	f7fc feb3 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    48d6:	6962      	ldr	r2, [r4, #20]
    48d8:	69a3      	ldr	r3, [r4, #24]
    48da:	6817      	ldr	r7, [r2, #0]
    48dc:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    48de:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    48e2:	d124      	bne.n	492e <am_hal_i2c_bit_bang_receive+0x6b2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    48e4:	f7fc feaa 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    48e8:	6961      	ldr	r1, [r4, #20]
    48ea:	69a3      	ldr	r3, [r4, #24]
    48ec:	680a      	ldr	r2, [r1, #0]
    48ee:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    48f0:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    48f4:	d11b      	bne.n	492e <am_hal_i2c_bit_bang_receive+0x6b2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    48f6:	f7fc fea1 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    48fa:	6967      	ldr	r7, [r4, #20]
    48fc:	69a1      	ldr	r1, [r4, #24]
    48fe:	683b      	ldr	r3, [r7, #0]
    4900:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4902:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4906:	d112      	bne.n	492e <am_hal_i2c_bit_bang_receive+0x6b2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4908:	f7fc fe98 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    490c:	6962      	ldr	r2, [r4, #20]
    490e:	69a7      	ldr	r7, [r4, #24]
    4910:	6811      	ldr	r1, [r2, #0]
    4912:	4239      	tst	r1, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4914:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4918:	d109      	bne.n	492e <am_hal_i2c_bit_bang_receive+0x6b2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    491a:	f7fc fe8f 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    491e:	6960      	ldr	r0, [r4, #20]
    4920:	69a3      	ldr	r3, [r4, #24]
    4922:	6802      	ldr	r2, [r0, #0]
    4924:	421a      	tst	r2, r3
    4926:	d102      	bne.n	492e <am_hal_i2c_bit_bang_receive+0x6b2>
        if (--maxLoop == 0)
    4928:	3e08      	subs	r6, #8
    492a:	d1b6      	bne.n	489a <am_hal_i2c_bit_bang_receive+0x61e>
    492c:	e506      	b.n	433c <am_hal_i2c_bit_bang_receive+0xc0>
    for (i = 0; i < 8; i++)
    492e:	3501      	adds	r5, #1
        WAIT_I2C_CLOCK_HI_PERIOD();
    4930:	2005      	movs	r0, #5
    4932:	f7fc fe83 	bl	163c <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    4936:	2d08      	cmp	r5, #8
    4938:	d196      	bne.n	4868 <am_hal_i2c_bit_bang_receive+0x5ec>
    WRITE_SCL_LO();
    493a:	6926      	ldr	r6, [r4, #16]
    493c:	69a7      	ldr	r7, [r4, #24]
    493e:	6037      	str	r7, [r6, #0]
    WAIT_I2C_CLOCK_LOW_PERIOD();
    4940:	2007      	movs	r0, #7
    4942:	f7fc fe7b 	bl	163c <am_hal_flash_delay>
    PULL_SCL_HI();
    4946:	68e1      	ldr	r1, [r4, #12]
    4948:	69a0      	ldr	r0, [r4, #24]
    while (!GET_SCL())
    494a:	6963      	ldr	r3, [r4, #20]
    PULL_SCL_HI();
    494c:	6008      	str	r0, [r1, #0]
    while (!GET_SCL())
    494e:	681a      	ldr	r2, [r3, #0]
    4950:	4202      	tst	r2, r0
    4952:	bf08      	it	eq
    4954:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    4958:	f040 80b4 	bne.w	4ac4 <am_hal_i2c_bit_bang_receive+0x848>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    495c:	2004      	movs	r0, #4
    495e:	f7fc fe6d 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4962:	6966      	ldr	r6, [r4, #20]
    4964:	69a7      	ldr	r7, [r4, #24]
    4966:	6831      	ldr	r1, [r6, #0]
    4968:	4239      	tst	r1, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    496a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    496e:	f040 80a9 	bne.w	4ac4 <am_hal_i2c_bit_bang_receive+0x848>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4972:	f7fc fe63 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4976:	6962      	ldr	r2, [r4, #20]
    4978:	69a3      	ldr	r3, [r4, #24]
    497a:	6816      	ldr	r6, [r2, #0]
    497c:	421e      	tst	r6, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    497e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4982:	f040 809f 	bne.w	4ac4 <am_hal_i2c_bit_bang_receive+0x848>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4986:	f7fc fe59 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    498a:	6967      	ldr	r7, [r4, #20]
    498c:	69a1      	ldr	r1, [r4, #24]
    498e:	683a      	ldr	r2, [r7, #0]
    4990:	420a      	tst	r2, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4992:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4996:	f040 8095 	bne.w	4ac4 <am_hal_i2c_bit_bang_receive+0x848>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    499a:	f7fc fe4f 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    499e:	6966      	ldr	r6, [r4, #20]
    49a0:	69a3      	ldr	r3, [r4, #24]
    49a2:	6837      	ldr	r7, [r6, #0]
    49a4:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    49a6:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    49aa:	f040 808b 	bne.w	4ac4 <am_hal_i2c_bit_bang_receive+0x848>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    49ae:	f7fc fe45 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    49b2:	6961      	ldr	r1, [r4, #20]
    49b4:	69a6      	ldr	r6, [r4, #24]
    49b6:	680a      	ldr	r2, [r1, #0]
    49b8:	4232      	tst	r2, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    49ba:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    49be:	f040 8081 	bne.w	4ac4 <am_hal_i2c_bit_bang_receive+0x848>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    49c2:	f7fc fe3b 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    49c6:	6967      	ldr	r7, [r4, #20]
    49c8:	69a3      	ldr	r3, [r4, #24]
    49ca:	6839      	ldr	r1, [r7, #0]
    49cc:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    49ce:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    49d2:	d177      	bne.n	4ac4 <am_hal_i2c_bit_bang_receive+0x848>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    49d4:	f7fc fe32 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    49d8:	6966      	ldr	r6, [r4, #20]
    49da:	69a7      	ldr	r7, [r4, #24]
    49dc:	6832      	ldr	r2, [r6, #0]
    49de:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    49e0:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    49e4:	d16e      	bne.n	4ac4 <am_hal_i2c_bit_bang_receive+0x848>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    49e6:	f7fc fe29 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    49ea:	6960      	ldr	r0, [r4, #20]
    49ec:	69a3      	ldr	r3, [r4, #24]
    49ee:	6801      	ldr	r1, [r0, #0]
    49f0:	4219      	tst	r1, r3
    49f2:	d167      	bne.n	4ac4 <am_hal_i2c_bit_bang_receive+0x848>
        if (--maxLoop == 0)
    49f4:	3d08      	subs	r5, #8
    49f6:	d1b1      	bne.n	495c <am_hal_i2c_bit_bang_receive+0x6e0>
    49f8:	e4a0      	b.n	433c <am_hal_i2c_bit_bang_receive+0xc0>
    WAIT_I2C_CLOCK_HI_PERIOD();
    49fa:	2005      	movs	r0, #5
    49fc:	f7fc fe1e 	bl	163c <am_hal_flash_delay>
    WRITE_SCL_LO();
    4a00:	6925      	ldr	r5, [r4, #16]
    4a02:	69a1      	ldr	r1, [r4, #24]
    4a04:	6029      	str	r1, [r5, #0]
    WAIT_FOR_QUARTER_I2C_CLOCK();
    4a06:	2004      	movs	r0, #4
    4a08:	f7fc fe18 	bl	163c <am_hal_flash_delay>
    if (!bNoStop)
    4a0c:	f1ba 0f00 	cmp.w	sl, #0
    4a10:	d16f      	bne.n	4af2 <am_hal_i2c_bit_bang_receive+0x876>
        WRITE_SDA_LO();
    4a12:	6a21      	ldr	r1, [r4, #32]
    4a14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4a16:	600b      	str	r3, [r1, #0]
    WAIT_FOR_QUARTER_I2C_CLOCK();
    4a18:	2004      	movs	r0, #4
    4a1a:	f7fc fe0f 	bl	163c <am_hal_flash_delay>
    PULL_SCL_HI();
    4a1e:	68e7      	ldr	r7, [r4, #12]
    4a20:	69a0      	ldr	r0, [r4, #24]
    while (!GET_SCL())
    4a22:	6966      	ldr	r6, [r4, #20]
    PULL_SCL_HI();
    4a24:	6038      	str	r0, [r7, #0]
    while (!GET_SCL())
    4a26:	6832      	ldr	r2, [r6, #0]
    4a28:	4202      	tst	r2, r0
    4a2a:	d174      	bne.n	4b16 <am_hal_i2c_bit_bang_receive+0x89a>
    4a2c:	f44f 75c8 	mov.w	r5, #400	; 0x190
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4a30:	2004      	movs	r0, #4
    4a32:	f7fc fe03 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4a36:	6961      	ldr	r1, [r4, #20]
    4a38:	69a3      	ldr	r3, [r4, #24]
    4a3a:	680f      	ldr	r7, [r1, #0]
    4a3c:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4a3e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4a42:	d14b      	bne.n	4adc <am_hal_i2c_bit_bang_receive+0x860>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4a44:	f7fc fdfa 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4a48:	6966      	ldr	r6, [r4, #20]
    4a4a:	69a1      	ldr	r1, [r4, #24]
    4a4c:	6832      	ldr	r2, [r6, #0]
    4a4e:	420a      	tst	r2, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4a50:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4a54:	d142      	bne.n	4adc <am_hal_i2c_bit_bang_receive+0x860>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4a56:	f7fc fdf1 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4a5a:	6967      	ldr	r7, [r4, #20]
    4a5c:	69a3      	ldr	r3, [r4, #24]
    4a5e:	683e      	ldr	r6, [r7, #0]
    4a60:	421e      	tst	r6, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4a62:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4a66:	d139      	bne.n	4adc <am_hal_i2c_bit_bang_receive+0x860>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4a68:	f7fc fde8 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4a6c:	6961      	ldr	r1, [r4, #20]
    4a6e:	69a7      	ldr	r7, [r4, #24]
    4a70:	680a      	ldr	r2, [r1, #0]
    4a72:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4a74:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4a78:	d130      	bne.n	4adc <am_hal_i2c_bit_bang_receive+0x860>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4a7a:	f7fc fddf 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4a7e:	6966      	ldr	r6, [r4, #20]
    4a80:	69a3      	ldr	r3, [r4, #24]
    4a82:	6831      	ldr	r1, [r6, #0]
    4a84:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4a86:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4a8a:	d127      	bne.n	4adc <am_hal_i2c_bit_bang_receive+0x860>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4a8c:	f7fc fdd6 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4a90:	6967      	ldr	r7, [r4, #20]
    4a92:	69a6      	ldr	r6, [r4, #24]
    4a94:	683a      	ldr	r2, [r7, #0]
    4a96:	4232      	tst	r2, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4a98:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4a9c:	d11e      	bne.n	4adc <am_hal_i2c_bit_bang_receive+0x860>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4a9e:	f7fc fdcd 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4aa2:	6961      	ldr	r1, [r4, #20]
    4aa4:	69a3      	ldr	r3, [r4, #24]
    4aa6:	680f      	ldr	r7, [r1, #0]
    4aa8:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4aaa:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4aae:	d115      	bne.n	4adc <am_hal_i2c_bit_bang_receive+0x860>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4ab0:	f7fc fdc4 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4ab4:	6960      	ldr	r0, [r4, #20]
    4ab6:	69a6      	ldr	r6, [r4, #24]
    4ab8:	6802      	ldr	r2, [r0, #0]
    4aba:	4232      	tst	r2, r6
    4abc:	d10e      	bne.n	4adc <am_hal_i2c_bit_bang_receive+0x860>
        if (--maxLoop == 0)
    4abe:	3d08      	subs	r5, #8
    4ac0:	d1b6      	bne.n	4a30 <am_hal_i2c_bit_bang_receive+0x7b4>
    4ac2:	e43b      	b.n	433c <am_hal_i2c_bit_bang_receive+0xc0>
    data_naked = GET_SDA();
    4ac4:	6a65      	ldr	r5, [r4, #36]	; 0x24
    4ac6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4ac8:	682d      	ldr	r5, [r5, #0]
    WAIT_I2C_CLOCK_HI_PERIOD();
    4aca:	2005      	movs	r0, #5
    data_naked = GET_SDA();
    4acc:	4035      	ands	r5, r6
    WAIT_I2C_CLOCK_HI_PERIOD();
    4ace:	f7fc fdb5 	bl	163c <am_hal_flash_delay>
    if ( data_naked )
    4ad2:	2d00      	cmp	r5, #0
    4ad4:	f43f ad12 	beq.w	44fc <am_hal_i2c_bit_bang_receive+0x280>
        return AM_HAL_I2C_BIT_BANG_DATA_NAKED;
    4ad8:	2002      	movs	r0, #2
    4ada:	e430      	b.n	433e <am_hal_i2c_bit_bang_receive+0xc2>
    WAIT_I2C_CLOCK_HI_PERIOD();
    4adc:	2005      	movs	r0, #5
    4ade:	f7fc fdad 	bl	163c <am_hal_flash_delay>
    if (!bNoStop)
    4ae2:	f1ba 0f00 	cmp.w	sl, #0
    4ae6:	d114      	bne.n	4b12 <am_hal_i2c_bit_bang_receive+0x896>
        PULL_SDA_HI();
    4ae8:	69e5      	ldr	r5, [r4, #28]
    4aea:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    4aec:	602c      	str	r4, [r5, #0]
    return AM_HAL_I2C_BIT_BANG_SUCCESS;
    4aee:	2000      	movs	r0, #0
    4af0:	e425      	b.n	433e <am_hal_i2c_bit_bang_receive+0xc2>
        PULL_SDA_HI();
    4af2:	69e3      	ldr	r3, [r4, #28]
    4af4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    4af6:	601f      	str	r7, [r3, #0]
    WAIT_FOR_QUARTER_I2C_CLOCK();
    4af8:	2004      	movs	r0, #4
    4afa:	f7fc fd9f 	bl	163c <am_hal_flash_delay>
    PULL_SCL_HI();
    4afe:	68e0      	ldr	r0, [r4, #12]
    4b00:	69a6      	ldr	r6, [r4, #24]
    while (!GET_SCL())
    4b02:	6962      	ldr	r2, [r4, #20]
    PULL_SCL_HI();
    4b04:	6006      	str	r6, [r0, #0]
    while (!GET_SCL())
    4b06:	6815      	ldr	r5, [r2, #0]
    4b08:	422e      	tst	r6, r5
    4b0a:	d08f      	beq.n	4a2c <am_hal_i2c_bit_bang_receive+0x7b0>
    WAIT_I2C_CLOCK_HI_PERIOD();
    4b0c:	2005      	movs	r0, #5
    4b0e:	f7fc fd95 	bl	163c <am_hal_flash_delay>
    return AM_HAL_I2C_BIT_BANG_SUCCESS;
    4b12:	2000      	movs	r0, #0
    4b14:	e413      	b.n	433e <am_hal_i2c_bit_bang_receive+0xc2>
    WAIT_I2C_CLOCK_HI_PERIOD();
    4b16:	2005      	movs	r0, #5
    4b18:	f7fc fd90 	bl	163c <am_hal_flash_delay>
    4b1c:	e7e4      	b.n	4ae8 <am_hal_i2c_bit_bang_receive+0x86c>
    4b1e:	bf00      	nop

00004b20 <am_hal_i2c_bit_bang_send>:
//*****************************************************************************
am_hal_i2c_bit_bang_enum_e
am_hal_i2c_bit_bang_send(uint8_t address, uint32_t number_of_bytes,
                         uint8_t *pData, uint8_t ui8Offset,
                         bool bUseOffset, bool bNoStop)
{
    4b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    PULL_SCL_HI();
    4b24:	4c9b      	ldr	r4, [pc, #620]	; (4d94 <am_hal_i2c_bit_bang_send+0x274>)
{
    4b26:	b083      	sub	sp, #12
    PULL_SCL_HI();
    4b28:	68e7      	ldr	r7, [r4, #12]
{
    4b2a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
    PULL_SCL_HI();
    4b2e:	69a6      	ldr	r6, [r4, #24]
{
    4b30:	9501      	str	r5, [sp, #4]
    while (!GET_SCL())
    4b32:	6965      	ldr	r5, [r4, #20]
    PULL_SCL_HI();
    4b34:	603e      	str	r6, [r7, #0]
    while (!GET_SCL())
    4b36:	682d      	ldr	r5, [r5, #0]
{
    4b38:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
    4b3c:	9700      	str	r7, [sp, #0]
    while (!GET_SCL())
    4b3e:	422e      	tst	r6, r5
{
    4b40:	4607      	mov	r7, r0
    4b42:	468a      	mov	sl, r1
    4b44:	4691      	mov	r9, r2
    4b46:	469b      	mov	fp, r3
    while (!GET_SCL())
    4b48:	bf08      	it	eq
    4b4a:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    4b4e:	d14c      	bne.n	4bea <am_hal_i2c_bit_bang_send+0xca>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4b50:	2004      	movs	r0, #4
    4b52:	f7fc fd73 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4b56:	6962      	ldr	r2, [r4, #20]
    4b58:	69a3      	ldr	r3, [r4, #24]
    4b5a:	6811      	ldr	r1, [r2, #0]
    4b5c:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4b5e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4b62:	d142      	bne.n	4bea <am_hal_i2c_bit_bang_send+0xca>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4b64:	f7fc fd6a 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4b68:	6966      	ldr	r6, [r4, #20]
    4b6a:	69a3      	ldr	r3, [r4, #24]
    4b6c:	6832      	ldr	r2, [r6, #0]
    4b6e:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4b70:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4b74:	d139      	bne.n	4bea <am_hal_i2c_bit_bang_send+0xca>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4b76:	f7fc fd61 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4b7a:	6961      	ldr	r1, [r4, #20]
    4b7c:	69a6      	ldr	r6, [r4, #24]
    4b7e:	680b      	ldr	r3, [r1, #0]
    4b80:	4233      	tst	r3, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4b82:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4b86:	d130      	bne.n	4bea <am_hal_i2c_bit_bang_send+0xca>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4b88:	f7fc fd58 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4b8c:	6962      	ldr	r2, [r4, #20]
    4b8e:	69a1      	ldr	r1, [r4, #24]
    4b90:	6816      	ldr	r6, [r2, #0]
    4b92:	420e      	tst	r6, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4b94:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4b98:	d127      	bne.n	4bea <am_hal_i2c_bit_bang_send+0xca>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4b9a:	f7fc fd4f 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4b9e:	6962      	ldr	r2, [r4, #20]
    4ba0:	69a3      	ldr	r3, [r4, #24]
    4ba2:	6811      	ldr	r1, [r2, #0]
    4ba4:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4ba6:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4baa:	d11e      	bne.n	4bea <am_hal_i2c_bit_bang_send+0xca>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4bac:	f7fc fd46 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4bb0:	6966      	ldr	r6, [r4, #20]
    4bb2:	69a3      	ldr	r3, [r4, #24]
    4bb4:	6832      	ldr	r2, [r6, #0]
    4bb6:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4bb8:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4bbc:	d115      	bne.n	4bea <am_hal_i2c_bit_bang_send+0xca>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4bbe:	f7fc fd3d 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4bc2:	6961      	ldr	r1, [r4, #20]
    4bc4:	69a6      	ldr	r6, [r4, #24]
    4bc6:	680b      	ldr	r3, [r1, #0]
    4bc8:	4233      	tst	r3, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4bca:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4bce:	d10c      	bne.n	4bea <am_hal_i2c_bit_bang_send+0xca>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4bd0:	f7fc fd34 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4bd4:	6960      	ldr	r0, [r4, #20]
    4bd6:	69a1      	ldr	r1, [r4, #24]
    4bd8:	6802      	ldr	r2, [r0, #0]
    4bda:	420a      	tst	r2, r1
    4bdc:	d105      	bne.n	4bea <am_hal_i2c_bit_bang_send+0xca>
        if (--maxLoop == 0)
    4bde:	3d08      	subs	r5, #8
    4be0:	d1b6      	bne.n	4b50 <am_hal_i2c_bit_bang_send+0x30>
    }

    //
    // message successfully sent
    //
    return AM_HAL_I2C_BIT_BANG_SUCCESS;
    4be2:	2003      	movs	r0, #3
}
    4be4:	b003      	add	sp, #12
    4be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    WRITE_SDA_LO();
    4bea:	6a26      	ldr	r6, [r4, #32]
    4bec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4bee:	6033      	str	r3, [r6, #0]
    WAIT_I2C_CLOCK_HI_PERIOD();
    4bf0:	2005      	movs	r0, #5
    4bf2:	f7fc fd23 	bl	163c <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    4bf6:	2600      	movs	r6, #0
        if ( one_byte & (0x80 >> i) )
    4bf8:	f04f 0880 	mov.w	r8, #128	; 0x80
    4bfc:	fa48 f306 	asr.w	r3, r8, r6
    4c00:	423b      	tst	r3, r7
        WRITE_SCL_LO();
    4c02:	6920      	ldr	r0, [r4, #16]
            PULL_SDA_HI();
    4c04:	bf14      	ite	ne
    4c06:	69e3      	ldrne	r3, [r4, #28]
            WRITE_SDA_LO();
    4c08:	6a23      	ldreq	r3, [r4, #32]
        WRITE_SCL_LO();
    4c0a:	69a1      	ldr	r1, [r4, #24]
            WRITE_SDA_LO();
    4c0c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        WRITE_SCL_LO();
    4c0e:	6001      	str	r1, [r0, #0]
            WRITE_SDA_LO();
    4c10:	601a      	str	r2, [r3, #0]
        WAIT_I2C_CLOCK_LOW_PERIOD();
    4c12:	2007      	movs	r0, #7
    4c14:	f7fc fd12 	bl	163c <am_hal_flash_delay>
    PULL_SCL_HI();
    4c18:	68e0      	ldr	r0, [r4, #12]
    4c1a:	69a1      	ldr	r1, [r4, #24]
    while (!GET_SCL())
    4c1c:	6963      	ldr	r3, [r4, #20]
    PULL_SCL_HI();
    4c1e:	6001      	str	r1, [r0, #0]
    while (!GET_SCL())
    4c20:	681a      	ldr	r2, [r3, #0]
    4c22:	4211      	tst	r1, r2
    4c24:	bf08      	it	eq
    4c26:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    4c2a:	d149      	bne.n	4cc0 <am_hal_i2c_bit_bang_send+0x1a0>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4c2c:	2004      	movs	r0, #4
    4c2e:	f7fc fd05 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4c32:	6961      	ldr	r1, [r4, #20]
    4c34:	69a3      	ldr	r3, [r4, #24]
    4c36:	680a      	ldr	r2, [r1, #0]
    4c38:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4c3a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4c3e:	d13f      	bne.n	4cc0 <am_hal_i2c_bit_bang_send+0x1a0>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4c40:	f7fc fcfc 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4c44:	6961      	ldr	r1, [r4, #20]
    4c46:	69a3      	ldr	r3, [r4, #24]
    4c48:	680a      	ldr	r2, [r1, #0]
    4c4a:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4c4c:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4c50:	d136      	bne.n	4cc0 <am_hal_i2c_bit_bang_send+0x1a0>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4c52:	f7fc fcf3 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4c56:	6961      	ldr	r1, [r4, #20]
    4c58:	69a3      	ldr	r3, [r4, #24]
    4c5a:	680a      	ldr	r2, [r1, #0]
    4c5c:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4c5e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4c62:	d12d      	bne.n	4cc0 <am_hal_i2c_bit_bang_send+0x1a0>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4c64:	f7fc fcea 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4c68:	6961      	ldr	r1, [r4, #20]
    4c6a:	69a3      	ldr	r3, [r4, #24]
    4c6c:	680a      	ldr	r2, [r1, #0]
    4c6e:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4c70:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4c74:	d124      	bne.n	4cc0 <am_hal_i2c_bit_bang_send+0x1a0>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4c76:	f7fc fce1 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4c7a:	6961      	ldr	r1, [r4, #20]
    4c7c:	69a3      	ldr	r3, [r4, #24]
    4c7e:	680a      	ldr	r2, [r1, #0]
    4c80:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4c82:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4c86:	d11b      	bne.n	4cc0 <am_hal_i2c_bit_bang_send+0x1a0>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4c88:	f7fc fcd8 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4c8c:	6961      	ldr	r1, [r4, #20]
    4c8e:	69a3      	ldr	r3, [r4, #24]
    4c90:	680a      	ldr	r2, [r1, #0]
    4c92:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4c94:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4c98:	d112      	bne.n	4cc0 <am_hal_i2c_bit_bang_send+0x1a0>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4c9a:	f7fc fccf 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4c9e:	6961      	ldr	r1, [r4, #20]
    4ca0:	69a3      	ldr	r3, [r4, #24]
    4ca2:	680a      	ldr	r2, [r1, #0]
    4ca4:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4ca6:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4caa:	d109      	bne.n	4cc0 <am_hal_i2c_bit_bang_send+0x1a0>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4cac:	f7fc fcc6 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4cb0:	6960      	ldr	r0, [r4, #20]
    4cb2:	69a1      	ldr	r1, [r4, #24]
    4cb4:	6803      	ldr	r3, [r0, #0]
    4cb6:	420b      	tst	r3, r1
    4cb8:	d102      	bne.n	4cc0 <am_hal_i2c_bit_bang_send+0x1a0>
        if (--maxLoop == 0)
    4cba:	3d08      	subs	r5, #8
    4cbc:	d1b6      	bne.n	4c2c <am_hal_i2c_bit_bang_send+0x10c>
    4cbe:	e790      	b.n	4be2 <am_hal_i2c_bit_bang_send+0xc2>
    for (i = 0; i < 8; i++)
    4cc0:	3601      	adds	r6, #1
        WAIT_I2C_CLOCK_HI_PERIOD();
    4cc2:	2005      	movs	r0, #5
    4cc4:	f7fc fcba 	bl	163c <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    4cc8:	2e08      	cmp	r6, #8
    4cca:	d197      	bne.n	4bfc <am_hal_i2c_bit_bang_send+0xdc>
    WRITE_SCL_LO();
    4ccc:	6927      	ldr	r7, [r4, #16]
    4cce:	69a2      	ldr	r2, [r4, #24]
    4cd0:	603a      	str	r2, [r7, #0]
    WAIT_I2C_CLOCK_LOW_PERIOD();
    4cd2:	2007      	movs	r0, #7
    4cd4:	f7fc fcb2 	bl	163c <am_hal_flash_delay>
    PULL_SCL_HI();
    4cd8:	68e0      	ldr	r0, [r4, #12]
    4cda:	69a1      	ldr	r1, [r4, #24]
    while (!GET_SCL())
    4cdc:	6963      	ldr	r3, [r4, #20]
    PULL_SCL_HI();
    4cde:	6001      	str	r1, [r0, #0]
    while (!GET_SCL())
    4ce0:	681f      	ldr	r7, [r3, #0]
    4ce2:	4239      	tst	r1, r7
    4ce4:	bf08      	it	eq
    4ce6:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    4cea:	d149      	bne.n	4d80 <am_hal_i2c_bit_bang_send+0x260>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4cec:	2004      	movs	r0, #4
    4cee:	f7fc fca5 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4cf2:	6962      	ldr	r2, [r4, #20]
    4cf4:	69a1      	ldr	r1, [r4, #24]
    4cf6:	6813      	ldr	r3, [r2, #0]
    4cf8:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4cfa:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4cfe:	d13f      	bne.n	4d80 <am_hal_i2c_bit_bang_send+0x260>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4d00:	f7fc fc9c 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4d04:	6967      	ldr	r7, [r4, #20]
    4d06:	69a1      	ldr	r1, [r4, #24]
    4d08:	683a      	ldr	r2, [r7, #0]
    4d0a:	420a      	tst	r2, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4d0c:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4d10:	d136      	bne.n	4d80 <am_hal_i2c_bit_bang_send+0x260>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4d12:	f7fc fc93 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4d16:	6967      	ldr	r7, [r4, #20]
    4d18:	69a3      	ldr	r3, [r4, #24]
    4d1a:	6839      	ldr	r1, [r7, #0]
    4d1c:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4d1e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4d22:	d12d      	bne.n	4d80 <am_hal_i2c_bit_bang_send+0x260>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4d24:	f7fc fc8a 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4d28:	6962      	ldr	r2, [r4, #20]
    4d2a:	69a7      	ldr	r7, [r4, #24]
    4d2c:	6813      	ldr	r3, [r2, #0]
    4d2e:	423b      	tst	r3, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4d30:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4d34:	d124      	bne.n	4d80 <am_hal_i2c_bit_bang_send+0x260>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4d36:	f7fc fc81 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4d3a:	6961      	ldr	r1, [r4, #20]
    4d3c:	69a7      	ldr	r7, [r4, #24]
    4d3e:	680a      	ldr	r2, [r1, #0]
    4d40:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4d42:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4d46:	d11b      	bne.n	4d80 <am_hal_i2c_bit_bang_send+0x260>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4d48:	f7fc fc78 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4d4c:	6961      	ldr	r1, [r4, #20]
    4d4e:	69a3      	ldr	r3, [r4, #24]
    4d50:	680f      	ldr	r7, [r1, #0]
    4d52:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4d54:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4d58:	d112      	bne.n	4d80 <am_hal_i2c_bit_bang_send+0x260>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4d5a:	f7fc fc6f 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4d5e:	6962      	ldr	r2, [r4, #20]
    4d60:	69a1      	ldr	r1, [r4, #24]
    4d62:	6813      	ldr	r3, [r2, #0]
    4d64:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4d66:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4d6a:	d109      	bne.n	4d80 <am_hal_i2c_bit_bang_send+0x260>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4d6c:	f7fc fc66 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4d70:	6960      	ldr	r0, [r4, #20]
    4d72:	69a7      	ldr	r7, [r4, #24]
    4d74:	6802      	ldr	r2, [r0, #0]
    4d76:	423a      	tst	r2, r7
    4d78:	d102      	bne.n	4d80 <am_hal_i2c_bit_bang_send+0x260>
        if (--maxLoop == 0)
    4d7a:	3d08      	subs	r5, #8
    4d7c:	d1b6      	bne.n	4cec <am_hal_i2c_bit_bang_send+0x1cc>
    4d7e:	e730      	b.n	4be2 <am_hal_i2c_bit_bang_send+0xc2>
    data_naked = GET_SDA();
    4d80:	6a65      	ldr	r5, [r4, #36]	; 0x24
    4d82:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    4d84:	682d      	ldr	r5, [r5, #0]
    WAIT_I2C_CLOCK_HI_PERIOD();
    4d86:	2005      	movs	r0, #5
    data_naked = GET_SDA();
    4d88:	400d      	ands	r5, r1
    WAIT_I2C_CLOCK_HI_PERIOD();
    4d8a:	f7fc fc57 	bl	163c <am_hal_flash_delay>
    if ( data_naked )
    4d8e:	b11d      	cbz	r5, 4d98 <am_hal_i2c_bit_bang_send+0x278>
            return AM_HAL_I2C_BIT_BANG_ADDRESS_NAKED;
    4d90:	2001      	movs	r0, #1
    4d92:	e727      	b.n	4be4 <am_hal_i2c_bit_bang_send+0xc4>
    4d94:	1000116c 	.word	0x1000116c
    if ( bUseOffset )
    4d98:	9b01      	ldr	r3, [sp, #4]
    4d9a:	2b00      	cmp	r3, #0
    4d9c:	f040 8164 	bne.w	5068 <am_hal_i2c_bit_bang_send+0x548>
    for (ui32I = 0; ui32I < number_of_bytes; ui32I++)
    4da0:	f1ba 0f00 	cmp.w	sl, #0
    4da4:	f000 80dd 	beq.w	4f62 <am_hal_i2c_bit_bang_send+0x442>
    4da8:	f109 3bff 	add.w	fp, r9, #4294967295
        if ( one_byte & (0x80 >> i) )
    4dac:	f04f 0880 	mov.w	r8, #128	; 0x80
    for (ui32I = 0; ui32I < number_of_bytes; ui32I++)
    4db0:	f04f 0900 	mov.w	r9, #0
    4db4:	f81b 7f01 	ldrb.w	r7, [fp, #1]!
    for (i = 0; i < 8; i++)
    4db8:	2600      	movs	r6, #0
        if ( one_byte & (0x80 >> i) )
    4dba:	fa48 f306 	asr.w	r3, r8, r6
    4dbe:	423b      	tst	r3, r7
        WRITE_SCL_LO();
    4dc0:	6920      	ldr	r0, [r4, #16]
            PULL_SDA_HI();
    4dc2:	bf14      	ite	ne
    4dc4:	69e3      	ldrne	r3, [r4, #28]
            WRITE_SDA_LO();
    4dc6:	6a23      	ldreq	r3, [r4, #32]
        WRITE_SCL_LO();
    4dc8:	69a2      	ldr	r2, [r4, #24]
            WRITE_SDA_LO();
    4dca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        WRITE_SCL_LO();
    4dcc:	6002      	str	r2, [r0, #0]
            WRITE_SDA_LO();
    4dce:	6019      	str	r1, [r3, #0]
        WAIT_I2C_CLOCK_LOW_PERIOD();
    4dd0:	2007      	movs	r0, #7
    4dd2:	f7fc fc33 	bl	163c <am_hal_flash_delay>
    PULL_SCL_HI();
    4dd6:	68e0      	ldr	r0, [r4, #12]
    4dd8:	69a3      	ldr	r3, [r4, #24]
    while (!GET_SCL())
    4dda:	6962      	ldr	r2, [r4, #20]
    PULL_SCL_HI();
    4ddc:	6003      	str	r3, [r0, #0]
    while (!GET_SCL())
    4dde:	6811      	ldr	r1, [r2, #0]
    4de0:	420b      	tst	r3, r1
    4de2:	bf08      	it	eq
    4de4:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    4de8:	d149      	bne.n	4e7e <am_hal_i2c_bit_bang_send+0x35e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4dea:	2004      	movs	r0, #4
    4dec:	f7fc fc26 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4df0:	6962      	ldr	r2, [r4, #20]
    4df2:	69a3      	ldr	r3, [r4, #24]
    4df4:	6811      	ldr	r1, [r2, #0]
    4df6:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4df8:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4dfc:	d13f      	bne.n	4e7e <am_hal_i2c_bit_bang_send+0x35e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4dfe:	f7fc fc1d 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4e02:	6962      	ldr	r2, [r4, #20]
    4e04:	69a3      	ldr	r3, [r4, #24]
    4e06:	6811      	ldr	r1, [r2, #0]
    4e08:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4e0a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4e0e:	d136      	bne.n	4e7e <am_hal_i2c_bit_bang_send+0x35e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4e10:	f7fc fc14 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4e14:	6962      	ldr	r2, [r4, #20]
    4e16:	69a3      	ldr	r3, [r4, #24]
    4e18:	6811      	ldr	r1, [r2, #0]
    4e1a:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4e1c:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4e20:	d12d      	bne.n	4e7e <am_hal_i2c_bit_bang_send+0x35e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4e22:	f7fc fc0b 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4e26:	6962      	ldr	r2, [r4, #20]
    4e28:	69a3      	ldr	r3, [r4, #24]
    4e2a:	6811      	ldr	r1, [r2, #0]
    4e2c:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4e2e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4e32:	d124      	bne.n	4e7e <am_hal_i2c_bit_bang_send+0x35e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4e34:	f7fc fc02 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4e38:	6962      	ldr	r2, [r4, #20]
    4e3a:	69a3      	ldr	r3, [r4, #24]
    4e3c:	6811      	ldr	r1, [r2, #0]
    4e3e:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4e40:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4e44:	d11b      	bne.n	4e7e <am_hal_i2c_bit_bang_send+0x35e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4e46:	f7fc fbf9 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4e4a:	6962      	ldr	r2, [r4, #20]
    4e4c:	69a3      	ldr	r3, [r4, #24]
    4e4e:	6811      	ldr	r1, [r2, #0]
    4e50:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4e52:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4e56:	d112      	bne.n	4e7e <am_hal_i2c_bit_bang_send+0x35e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4e58:	f7fc fbf0 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4e5c:	6962      	ldr	r2, [r4, #20]
    4e5e:	69a3      	ldr	r3, [r4, #24]
    4e60:	6811      	ldr	r1, [r2, #0]
    4e62:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4e64:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4e68:	d109      	bne.n	4e7e <am_hal_i2c_bit_bang_send+0x35e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4e6a:	f7fc fbe7 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4e6e:	6960      	ldr	r0, [r4, #20]
    4e70:	69a3      	ldr	r3, [r4, #24]
    4e72:	6802      	ldr	r2, [r0, #0]
    4e74:	421a      	tst	r2, r3
    4e76:	d102      	bne.n	4e7e <am_hal_i2c_bit_bang_send+0x35e>
        if (--maxLoop == 0)
    4e78:	3d08      	subs	r5, #8
    4e7a:	d1b6      	bne.n	4dea <am_hal_i2c_bit_bang_send+0x2ca>
    4e7c:	e6b1      	b.n	4be2 <am_hal_i2c_bit_bang_send+0xc2>
    for (i = 0; i < 8; i++)
    4e7e:	3601      	adds	r6, #1
        WAIT_I2C_CLOCK_HI_PERIOD();
    4e80:	2005      	movs	r0, #5
    4e82:	f7fc fbdb 	bl	163c <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    4e86:	2e08      	cmp	r6, #8
    4e88:	d197      	bne.n	4dba <am_hal_i2c_bit_bang_send+0x29a>
    WRITE_SCL_LO();
    4e8a:	6926      	ldr	r6, [r4, #16]
    4e8c:	69a7      	ldr	r7, [r4, #24]
    4e8e:	6037      	str	r7, [r6, #0]
    WAIT_I2C_CLOCK_LOW_PERIOD();
    4e90:	2007      	movs	r0, #7
    4e92:	f7fc fbd3 	bl	163c <am_hal_flash_delay>
    PULL_SCL_HI();
    4e96:	68e1      	ldr	r1, [r4, #12]
    4e98:	69a0      	ldr	r0, [r4, #24]
    while (!GET_SCL())
    4e9a:	6963      	ldr	r3, [r4, #20]
    PULL_SCL_HI();
    4e9c:	6008      	str	r0, [r1, #0]
    while (!GET_SCL())
    4e9e:	681a      	ldr	r2, [r3, #0]
    4ea0:	4210      	tst	r0, r2
    4ea2:	bf08      	it	eq
    4ea4:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    4ea8:	d149      	bne.n	4f3e <am_hal_i2c_bit_bang_send+0x41e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4eaa:	2004      	movs	r0, #4
    4eac:	f7fc fbc6 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4eb0:	6966      	ldr	r6, [r4, #20]
    4eb2:	69a7      	ldr	r7, [r4, #24]
    4eb4:	6831      	ldr	r1, [r6, #0]
    4eb6:	4239      	tst	r1, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4eb8:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4ebc:	d13f      	bne.n	4f3e <am_hal_i2c_bit_bang_send+0x41e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4ebe:	f7fc fbbd 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4ec2:	6962      	ldr	r2, [r4, #20]
    4ec4:	69a3      	ldr	r3, [r4, #24]
    4ec6:	6816      	ldr	r6, [r2, #0]
    4ec8:	421e      	tst	r6, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4eca:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4ece:	d136      	bne.n	4f3e <am_hal_i2c_bit_bang_send+0x41e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4ed0:	f7fc fbb4 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4ed4:	6967      	ldr	r7, [r4, #20]
    4ed6:	69a1      	ldr	r1, [r4, #24]
    4ed8:	683a      	ldr	r2, [r7, #0]
    4eda:	420a      	tst	r2, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4edc:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4ee0:	d12d      	bne.n	4f3e <am_hal_i2c_bit_bang_send+0x41e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4ee2:	f7fc fbab 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4ee6:	6966      	ldr	r6, [r4, #20]
    4ee8:	69a3      	ldr	r3, [r4, #24]
    4eea:	6837      	ldr	r7, [r6, #0]
    4eec:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4eee:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4ef2:	d124      	bne.n	4f3e <am_hal_i2c_bit_bang_send+0x41e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4ef4:	f7fc fba2 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4ef8:	6961      	ldr	r1, [r4, #20]
    4efa:	69a6      	ldr	r6, [r4, #24]
    4efc:	680a      	ldr	r2, [r1, #0]
    4efe:	4232      	tst	r2, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4f00:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4f04:	d11b      	bne.n	4f3e <am_hal_i2c_bit_bang_send+0x41e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4f06:	f7fc fb99 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4f0a:	6967      	ldr	r7, [r4, #20]
    4f0c:	69a3      	ldr	r3, [r4, #24]
    4f0e:	6839      	ldr	r1, [r7, #0]
    4f10:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4f12:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4f16:	d112      	bne.n	4f3e <am_hal_i2c_bit_bang_send+0x41e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4f18:	f7fc fb90 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4f1c:	6966      	ldr	r6, [r4, #20]
    4f1e:	69a7      	ldr	r7, [r4, #24]
    4f20:	6832      	ldr	r2, [r6, #0]
    4f22:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4f24:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4f28:	d109      	bne.n	4f3e <am_hal_i2c_bit_bang_send+0x41e>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4f2a:	f7fc fb87 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4f2e:	6960      	ldr	r0, [r4, #20]
    4f30:	69a3      	ldr	r3, [r4, #24]
    4f32:	6801      	ldr	r1, [r0, #0]
    4f34:	4219      	tst	r1, r3
    4f36:	d102      	bne.n	4f3e <am_hal_i2c_bit_bang_send+0x41e>
        if (--maxLoop == 0)
    4f38:	3d08      	subs	r5, #8
    4f3a:	d1b6      	bne.n	4eaa <am_hal_i2c_bit_bang_send+0x38a>
    4f3c:	e651      	b.n	4be2 <am_hal_i2c_bit_bang_send+0xc2>
    data_naked = GET_SDA();
    4f3e:	6a65      	ldr	r5, [r4, #36]	; 0x24
    4f40:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4f42:	682d      	ldr	r5, [r5, #0]
    WAIT_I2C_CLOCK_HI_PERIOD();
    4f44:	2005      	movs	r0, #5
    data_naked = GET_SDA();
    4f46:	4035      	ands	r5, r6
    WAIT_I2C_CLOCK_HI_PERIOD();
    4f48:	f7fc fb78 	bl	163c <am_hal_flash_delay>
    if ( data_naked )
    4f4c:	b125      	cbz	r5, 4f58 <am_hal_i2c_bit_bang_send+0x438>
                if (ui32I != (number_of_bytes-1))
    4f4e:	f10a 37ff 	add.w	r7, sl, #4294967295
    4f52:	454f      	cmp	r7, r9
    4f54:	f040 815d 	bne.w	5212 <am_hal_i2c_bit_bang_send+0x6f2>
    for (ui32I = 0; ui32I < number_of_bytes; ui32I++)
    4f58:	f109 0901 	add.w	r9, r9, #1
    4f5c:	45ca      	cmp	sl, r9
    4f5e:	f47f af29 	bne.w	4db4 <am_hal_i2c_bit_bang_send+0x294>
    bool data_naked = false;
    4f62:	2500      	movs	r5, #0
    WRITE_SCL_LO();
    4f64:	6920      	ldr	r0, [r4, #16]
    4f66:	69a2      	ldr	r2, [r4, #24]
    4f68:	6002      	str	r2, [r0, #0]
    WAIT_FOR_QUARTER_I2C_CLOCK();
    4f6a:	2004      	movs	r0, #4
    4f6c:	f7fc fb66 	bl	163c <am_hal_flash_delay>
    if (!bNoStop)
    4f70:	9b00      	ldr	r3, [sp, #0]
    4f72:	2b00      	cmp	r3, #0
    4f74:	d060      	beq.n	5038 <am_hal_i2c_bit_bang_send+0x518>
        PULL_SDA_HI();
    4f76:	69e1      	ldr	r1, [r4, #28]
    4f78:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4f7a:	600e      	str	r6, [r1, #0]
    WAIT_FOR_QUARTER_I2C_CLOCK();
    4f7c:	2004      	movs	r0, #4
    4f7e:	f7fc fb5d 	bl	163c <am_hal_flash_delay>
    PULL_SCL_HI();
    4f82:	68e7      	ldr	r7, [r4, #12]
    4f84:	69a0      	ldr	r0, [r4, #24]
    while (!GET_SCL())
    4f86:	6962      	ldr	r2, [r4, #20]
    PULL_SCL_HI();
    4f88:	6038      	str	r0, [r7, #0]
    while (!GET_SCL())
    4f8a:	6813      	ldr	r3, [r2, #0]
    4f8c:	4218      	tst	r0, r3
    4f8e:	d163      	bne.n	5058 <am_hal_i2c_bit_bang_send+0x538>
    bool data_naked = false;
    4f90:	f44f 76c8 	mov.w	r6, #400	; 0x190
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4f94:	2004      	movs	r0, #4
    4f96:	f7fc fb51 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4f9a:	6961      	ldr	r1, [r4, #20]
    4f9c:	69a7      	ldr	r7, [r4, #24]
    4f9e:	680a      	ldr	r2, [r1, #0]
    4fa0:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4fa2:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4fa6:	f040 8124 	bne.w	51f2 <am_hal_i2c_bit_bang_send+0x6d2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4faa:	f7fc fb47 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4fae:	6961      	ldr	r1, [r4, #20]
    4fb0:	69a3      	ldr	r3, [r4, #24]
    4fb2:	680f      	ldr	r7, [r1, #0]
    4fb4:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4fb6:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4fba:	f040 811a 	bne.w	51f2 <am_hal_i2c_bit_bang_send+0x6d2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4fbe:	f7fc fb3d 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4fc2:	6962      	ldr	r2, [r4, #20]
    4fc4:	69a1      	ldr	r1, [r4, #24]
    4fc6:	6813      	ldr	r3, [r2, #0]
    4fc8:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4fca:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4fce:	f040 8110 	bne.w	51f2 <am_hal_i2c_bit_bang_send+0x6d2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4fd2:	f7fc fb33 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4fd6:	6967      	ldr	r7, [r4, #20]
    4fd8:	69a1      	ldr	r1, [r4, #24]
    4fda:	683a      	ldr	r2, [r7, #0]
    4fdc:	420a      	tst	r2, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4fde:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4fe2:	f040 8106 	bne.w	51f2 <am_hal_i2c_bit_bang_send+0x6d2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4fe6:	f7fc fb29 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4fea:	6967      	ldr	r7, [r4, #20]
    4fec:	69a3      	ldr	r3, [r4, #24]
    4fee:	6839      	ldr	r1, [r7, #0]
    4ff0:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4ff2:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    4ff6:	f040 80fc 	bne.w	51f2 <am_hal_i2c_bit_bang_send+0x6d2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    4ffa:	f7fc fb1f 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    4ffe:	6962      	ldr	r2, [r4, #20]
    5000:	69a7      	ldr	r7, [r4, #24]
    5002:	6813      	ldr	r3, [r2, #0]
    5004:	423b      	tst	r3, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5006:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    500a:	f040 80f2 	bne.w	51f2 <am_hal_i2c_bit_bang_send+0x6d2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    500e:	f7fc fb15 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    5012:	6961      	ldr	r1, [r4, #20]
    5014:	69a7      	ldr	r7, [r4, #24]
    5016:	680a      	ldr	r2, [r1, #0]
    5018:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    501a:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    501e:	f040 80e8 	bne.w	51f2 <am_hal_i2c_bit_bang_send+0x6d2>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5022:	f7fc fb0b 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    5026:	6960      	ldr	r0, [r4, #20]
    5028:	69a3      	ldr	r3, [r4, #24]
    502a:	6801      	ldr	r1, [r0, #0]
    502c:	4219      	tst	r1, r3
    502e:	f040 80e0 	bne.w	51f2 <am_hal_i2c_bit_bang_send+0x6d2>
        if (--maxLoop == 0)
    5032:	3e08      	subs	r6, #8
    5034:	d1ae      	bne.n	4f94 <am_hal_i2c_bit_bang_send+0x474>
    5036:	e5d4      	b.n	4be2 <am_hal_i2c_bit_bang_send+0xc2>
        WRITE_SDA_LO();
    5038:	6a21      	ldr	r1, [r4, #32]
    503a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    503c:	600e      	str	r6, [r1, #0]
    WAIT_FOR_QUARTER_I2C_CLOCK();
    503e:	2004      	movs	r0, #4
    5040:	f7fc fafc 	bl	163c <am_hal_flash_delay>
    PULL_SCL_HI();
    5044:	68e7      	ldr	r7, [r4, #12]
    5046:	69a0      	ldr	r0, [r4, #24]
    while (!GET_SCL())
    5048:	6962      	ldr	r2, [r4, #20]
    PULL_SCL_HI();
    504a:	6038      	str	r0, [r7, #0]
    while (!GET_SCL())
    504c:	6813      	ldr	r3, [r2, #0]
    504e:	4203      	tst	r3, r0
    5050:	d09e      	beq.n	4f90 <am_hal_i2c_bit_bang_send+0x470>
        PULL_SDA_HI();
    5052:	69e7      	ldr	r7, [r4, #28]
    5054:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    5056:	603c      	str	r4, [r7, #0]
    WAIT_I2C_CLOCK_HI_PERIOD();
    5058:	2005      	movs	r0, #5
    505a:	f7fc faef 	bl	163c <am_hal_flash_delay>
    if ( data_naked )
    505e:	2d00      	cmp	r5, #0
    5060:	f000 80d9 	beq.w	5216 <am_hal_i2c_bit_bang_send+0x6f6>
        return AM_HAL_I2C_BIT_BANG_DATA_NAKED;  // if it happens early
    5064:	2002      	movs	r0, #2
    5066:	e5bd      	b.n	4be4 <am_hal_i2c_bit_bang_send+0xc4>
        if ( one_byte & (0x80 >> i) )
    5068:	f04f 0880 	mov.w	r8, #128	; 0x80
    506c:	fa48 f105 	asr.w	r1, r8, r5
    5070:	ea11 0f0b 	tst.w	r1, fp
        WRITE_SCL_LO();
    5074:	6920      	ldr	r0, [r4, #16]
            PULL_SDA_HI();
    5076:	bf14      	ite	ne
    5078:	69e1      	ldrne	r1, [r4, #28]
            WRITE_SDA_LO();
    507a:	6a21      	ldreq	r1, [r4, #32]
        WRITE_SCL_LO();
    507c:	69a2      	ldr	r2, [r4, #24]
            WRITE_SDA_LO();
    507e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        WRITE_SCL_LO();
    5080:	6002      	str	r2, [r0, #0]
            WRITE_SDA_LO();
    5082:	600b      	str	r3, [r1, #0]
        WAIT_I2C_CLOCK_LOW_PERIOD();
    5084:	2007      	movs	r0, #7
    5086:	f7fc fad9 	bl	163c <am_hal_flash_delay>
    PULL_SCL_HI();
    508a:	68e0      	ldr	r0, [r4, #12]
    508c:	69a1      	ldr	r1, [r4, #24]
    while (!GET_SCL())
    508e:	6962      	ldr	r2, [r4, #20]
    PULL_SCL_HI();
    5090:	6001      	str	r1, [r0, #0]
    while (!GET_SCL())
    5092:	6813      	ldr	r3, [r2, #0]
    5094:	4219      	tst	r1, r3
    5096:	bf08      	it	eq
    5098:	f44f 76c8 	moveq.w	r6, #400	; 0x190
    509c:	d149      	bne.n	5132 <am_hal_i2c_bit_bang_send+0x612>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    509e:	2004      	movs	r0, #4
    50a0:	f7fc facc 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    50a4:	6961      	ldr	r1, [r4, #20]
    50a6:	69a3      	ldr	r3, [r4, #24]
    50a8:	680a      	ldr	r2, [r1, #0]
    50aa:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    50ac:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    50b0:	d13f      	bne.n	5132 <am_hal_i2c_bit_bang_send+0x612>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    50b2:	f7fc fac3 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    50b6:	6967      	ldr	r7, [r4, #20]
    50b8:	69a1      	ldr	r1, [r4, #24]
    50ba:	683b      	ldr	r3, [r7, #0]
    50bc:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    50be:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    50c2:	d136      	bne.n	5132 <am_hal_i2c_bit_bang_send+0x612>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    50c4:	f7fc faba 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    50c8:	6962      	ldr	r2, [r4, #20]
    50ca:	69a7      	ldr	r7, [r4, #24]
    50cc:	6811      	ldr	r1, [r2, #0]
    50ce:	4239      	tst	r1, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    50d0:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    50d4:	d12d      	bne.n	5132 <am_hal_i2c_bit_bang_send+0x612>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    50d6:	f7fc fab1 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    50da:	6962      	ldr	r2, [r4, #20]
    50dc:	69a3      	ldr	r3, [r4, #24]
    50de:	6817      	ldr	r7, [r2, #0]
    50e0:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    50e2:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    50e6:	d124      	bne.n	5132 <am_hal_i2c_bit_bang_send+0x612>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    50e8:	f7fc faa8 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    50ec:	6961      	ldr	r1, [r4, #20]
    50ee:	69a3      	ldr	r3, [r4, #24]
    50f0:	680a      	ldr	r2, [r1, #0]
    50f2:	421a      	tst	r2, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    50f4:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    50f8:	d11b      	bne.n	5132 <am_hal_i2c_bit_bang_send+0x612>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    50fa:	f7fc fa9f 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    50fe:	6967      	ldr	r7, [r4, #20]
    5100:	69a1      	ldr	r1, [r4, #24]
    5102:	683b      	ldr	r3, [r7, #0]
    5104:	420b      	tst	r3, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5106:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    510a:	d112      	bne.n	5132 <am_hal_i2c_bit_bang_send+0x612>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    510c:	f7fc fa96 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    5110:	6962      	ldr	r2, [r4, #20]
    5112:	69a7      	ldr	r7, [r4, #24]
    5114:	6811      	ldr	r1, [r2, #0]
    5116:	4239      	tst	r1, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5118:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    511c:	d109      	bne.n	5132 <am_hal_i2c_bit_bang_send+0x612>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    511e:	f7fc fa8d 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    5122:	6960      	ldr	r0, [r4, #20]
    5124:	69a3      	ldr	r3, [r4, #24]
    5126:	6802      	ldr	r2, [r0, #0]
    5128:	421a      	tst	r2, r3
    512a:	d102      	bne.n	5132 <am_hal_i2c_bit_bang_send+0x612>
        if (--maxLoop == 0)
    512c:	3e08      	subs	r6, #8
    512e:	d1b6      	bne.n	509e <am_hal_i2c_bit_bang_send+0x57e>
    5130:	e557      	b.n	4be2 <am_hal_i2c_bit_bang_send+0xc2>
    for (i = 0; i < 8; i++)
    5132:	3501      	adds	r5, #1
        WAIT_I2C_CLOCK_HI_PERIOD();
    5134:	2005      	movs	r0, #5
    5136:	f7fc fa81 	bl	163c <am_hal_flash_delay>
    for (i = 0; i < 8; i++)
    513a:	2d08      	cmp	r5, #8
    513c:	d196      	bne.n	506c <am_hal_i2c_bit_bang_send+0x54c>
    WRITE_SCL_LO();
    513e:	6926      	ldr	r6, [r4, #16]
    5140:	69a7      	ldr	r7, [r4, #24]
    5142:	6037      	str	r7, [r6, #0]
    WAIT_I2C_CLOCK_LOW_PERIOD();
    5144:	2007      	movs	r0, #7
    5146:	f7fc fa79 	bl	163c <am_hal_flash_delay>
    PULL_SCL_HI();
    514a:	68e1      	ldr	r1, [r4, #12]
    514c:	69a0      	ldr	r0, [r4, #24]
    while (!GET_SCL())
    514e:	6963      	ldr	r3, [r4, #20]
    PULL_SCL_HI();
    5150:	6008      	str	r0, [r1, #0]
    while (!GET_SCL())
    5152:	681a      	ldr	r2, [r3, #0]
    5154:	4210      	tst	r0, r2
    5156:	bf08      	it	eq
    5158:	f44f 75c8 	moveq.w	r5, #400	; 0x190
    515c:	d14e      	bne.n	51fc <am_hal_i2c_bit_bang_send+0x6dc>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    515e:	2004      	movs	r0, #4
    5160:	f7fc fa6c 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    5164:	6966      	ldr	r6, [r4, #20]
    5166:	69a7      	ldr	r7, [r4, #24]
    5168:	6831      	ldr	r1, [r6, #0]
    516a:	4239      	tst	r1, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    516c:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    5170:	d144      	bne.n	51fc <am_hal_i2c_bit_bang_send+0x6dc>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5172:	f7fc fa63 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    5176:	6962      	ldr	r2, [r4, #20]
    5178:	69a3      	ldr	r3, [r4, #24]
    517a:	6816      	ldr	r6, [r2, #0]
    517c:	421e      	tst	r6, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    517e:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    5182:	d13b      	bne.n	51fc <am_hal_i2c_bit_bang_send+0x6dc>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5184:	f7fc fa5a 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    5188:	6967      	ldr	r7, [r4, #20]
    518a:	69a1      	ldr	r1, [r4, #24]
    518c:	683a      	ldr	r2, [r7, #0]
    518e:	420a      	tst	r2, r1
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5190:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    5194:	d132      	bne.n	51fc <am_hal_i2c_bit_bang_send+0x6dc>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    5196:	f7fc fa51 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    519a:	6966      	ldr	r6, [r4, #20]
    519c:	69a3      	ldr	r3, [r4, #24]
    519e:	6837      	ldr	r7, [r6, #0]
    51a0:	421f      	tst	r7, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    51a2:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    51a6:	d129      	bne.n	51fc <am_hal_i2c_bit_bang_send+0x6dc>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    51a8:	f7fc fa48 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    51ac:	6961      	ldr	r1, [r4, #20]
    51ae:	69a6      	ldr	r6, [r4, #24]
    51b0:	680a      	ldr	r2, [r1, #0]
    51b2:	4232      	tst	r2, r6
        WAIT_FOR_QUARTER_I2C_CLOCK();
    51b4:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    51b8:	d120      	bne.n	51fc <am_hal_i2c_bit_bang_send+0x6dc>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    51ba:	f7fc fa3f 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    51be:	6967      	ldr	r7, [r4, #20]
    51c0:	69a3      	ldr	r3, [r4, #24]
    51c2:	6839      	ldr	r1, [r7, #0]
    51c4:	4219      	tst	r1, r3
        WAIT_FOR_QUARTER_I2C_CLOCK();
    51c6:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    51ca:	d117      	bne.n	51fc <am_hal_i2c_bit_bang_send+0x6dc>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    51cc:	f7fc fa36 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    51d0:	6966      	ldr	r6, [r4, #20]
    51d2:	69a7      	ldr	r7, [r4, #24]
    51d4:	6832      	ldr	r2, [r6, #0]
    51d6:	423a      	tst	r2, r7
        WAIT_FOR_QUARTER_I2C_CLOCK();
    51d8:	f04f 0004 	mov.w	r0, #4
    while (!GET_SCL())
    51dc:	d10e      	bne.n	51fc <am_hal_i2c_bit_bang_send+0x6dc>
        WAIT_FOR_QUARTER_I2C_CLOCK();
    51de:	f7fc fa2d 	bl	163c <am_hal_flash_delay>
    while (!GET_SCL())
    51e2:	6960      	ldr	r0, [r4, #20]
    51e4:	69a3      	ldr	r3, [r4, #24]
    51e6:	6801      	ldr	r1, [r0, #0]
    51e8:	4219      	tst	r1, r3
    51ea:	d107      	bne.n	51fc <am_hal_i2c_bit_bang_send+0x6dc>
        if (--maxLoop == 0)
    51ec:	3d08      	subs	r5, #8
    51ee:	d1b6      	bne.n	515e <am_hal_i2c_bit_bang_send+0x63e>
    51f0:	e4f7      	b.n	4be2 <am_hal_i2c_bit_bang_send+0xc2>
    if (!bNoStop)
    51f2:	9e00      	ldr	r6, [sp, #0]
    51f4:	2e00      	cmp	r6, #0
    51f6:	f43f af2c 	beq.w	5052 <am_hal_i2c_bit_bang_send+0x532>
    51fa:	e72d      	b.n	5058 <am_hal_i2c_bit_bang_send+0x538>
    data_naked = GET_SDA();
    51fc:	6a65      	ldr	r5, [r4, #36]	; 0x24
    51fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    5200:	682d      	ldr	r5, [r5, #0]
    WAIT_I2C_CLOCK_HI_PERIOD();
    5202:	2005      	movs	r0, #5
    data_naked = GET_SDA();
    5204:	4035      	ands	r5, r6
    WAIT_I2C_CLOCK_HI_PERIOD();
    5206:	f7fc fa19 	bl	163c <am_hal_flash_delay>
    if ( data_naked )
    520a:	2d00      	cmp	r5, #0
    520c:	f47f af2a 	bne.w	5064 <am_hal_i2c_bit_bang_send+0x544>
    5210:	e5c6      	b.n	4da0 <am_hal_i2c_bit_bang_send+0x280>
                    data_naked = true;
    5212:	2501      	movs	r5, #1
    5214:	e6a6      	b.n	4f64 <am_hal_i2c_bit_bang_send+0x444>
    return AM_HAL_I2C_BIT_BANG_SUCCESS;
    5216:	4628      	mov	r0, r5
    5218:	e4e4      	b.n	4be4 <am_hal_i2c_bit_bang_send+0xc4>
    521a:	bf00      	nop

0000521c <memcpy>:
    521c:	b510      	push	{r4, lr}
    521e:	1e43      	subs	r3, r0, #1
    5220:	440a      	add	r2, r1
    5222:	4291      	cmp	r1, r2
    5224:	d100      	bne.n	5228 <memcpy+0xc>
    5226:	bd10      	pop	{r4, pc}
    5228:	f811 4b01 	ldrb.w	r4, [r1], #1
    522c:	f803 4f01 	strb.w	r4, [r3, #1]!
    5230:	e7f7      	b.n	5222 <memcpy+0x6>
    5232:	0000      	movs	r0, r0
    5234:	20433249 	.word	0x20433249
    5238:	706f6f4c 	.word	0x706f6f4c
    523c:	6b636162 	.word	0x6b636162
    5240:	61784520 	.word	0x61784520
    5244:	656c706d 	.word	0x656c706d
    5248:	69737520 	.word	0x69737520
    524c:	4920676e 	.word	0x4920676e
    5250:	54534d4f 	.word	0x54534d4f
    5254:	34232052 	.word	0x34232052
    5258:	646e6120 	.word	0x646e6120
    525c:	534f4920 	.word	0x534f4920
    5260:	4556414c 	.word	0x4556414c
    5264:	00000000 	.word	0x00000000
    5268:	6f6c420a 	.word	0x6f6c420a
    526c:	6e696b63 	.word	0x6e696b63
    5270:	72542067 	.word	0x72542067
    5274:	66736e61 	.word	0x66736e61
    5278:	43207265 	.word	0x43207265
    527c:	6c706d6f 	.word	0x6c706d6f
    5280:	0a657465 	.word	0x0a657465
    5284:	00000000 	.word	0x00000000
    5288:	534f490a 	.word	0x534f490a
    528c:	74614420 	.word	0x74614420
    5290:	69642061 	.word	0x69642061
    5294:	6f6e2064 	.word	0x6f6e2064
    5298:	616d2074 	.word	0x616d2074
    529c:	20686374 	.word	0x20686374
    52a0:	204d4f49 	.word	0x204d4f49
    52a4:	61746164 	.word	0x61746164
    52a8:	6e657320 	.word	0x6e657320
    52ac:	21212174 	.word	0x21212174
    52b0:	0000000a 	.word	0x0000000a
    52b4:	6e6f4e0a 	.word	0x6e6f4e0a
    52b8:	6f6c422d 	.word	0x6f6c422d
    52bc:	6e696b63 	.word	0x6e696b63
    52c0:	72542067 	.word	0x72542067
    52c4:	66736e61 	.word	0x66736e61
    52c8:	43207265 	.word	0x43207265
    52cc:	6c706d6f 	.word	0x6c706d6f
    52d0:	0a657465 	.word	0x0a657465
    52d4:	00000000 	.word	0x00000000
    52d8:	0a0a0a0a 	.word	0x0a0a0a0a
    52dc:	0a0a0a0a 	.word	0x0a0a0a0a
    52e0:	0a0a0a0a 	.word	0x0a0a0a0a
    52e4:	0a0a0a0a 	.word	0x0a0a0a0a
    52e8:	00000a0a 	.word	0x00000a0a

000052ec <g_SPIpins>:
    52ec:	00000006 0000000a 00000009 0000000a     ................
    52fc:	00000019 0000002a 0000002b 0000002a     ....*...+...*...
    530c:	00000028 0000002a 00000031 0000002a     (...*...1...*...

0000531c <am_hal_cachectrl_defaults>:
    531c:	50000001 00010300 00010101 685f6d61     ...P........am_h
    532c:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    533c:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    534c:	63206469 6b636f6c 74657320 676e6974     id clock setting
    535c:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    536c:	6b6c635f 2e6e6567 00000063 20656854     _clkgen.c...The 
    537c:	6f666966 756f6320 276e646c 69662074     fifo couldn't fi
    538c:	68742074 65722065 73657571 20646574     t the requested 
    539c:	626d756e 6f207265 79622066 00736574     number of bytes.
    53ac:	2e5c2e2e 6d615c2e 6c61685f 6d6f695f     ..\..\am_hal_iom
    53bc:	0000632e 20656854 6f666966 656f6420     .c..The fifo doe
    53cc:	74276e73 6e6f6320 6e696174 65687420     sn't contain the
    53dc:	71657220 74736575 6e206465 65626d75      requested numbe
    53ec:	666f2072 74796220 002e7365 69797254     r of bytes..Tryi
    53fc:	7420676e 6e65206f 656c6261 206e6120     ng to enable an 
    540c:	204d4f49 75646f6d 7420656c 20746168     IOM module that 
    541c:	73656f64 2074276e 73697865 00002e74     doesn't exist...
    542c:	69797254 7420676e 6f64206f 30206120     Trying to do a 0
    543c:	74796220 72742065 61736e61 6f697463      byte transactio
    544c:	0000006e 20495053 6e617274 72656673     n...SPI transfer
    545c:	6f6f7420 67696220 0000002e 61766e49      too big....Inva
    546c:	2064696c 46206948 75716572 79636e65     lid Hi Frequency
    547c:	726f6620 4d4f4920 0000002e               for IOM....

00005488 <i2c_bb_errmap>:
    5488:	01060600 00000001 6e6e6143 6520746f     ........Cannot e
    5498:	6c62616e 6f6d2065 74206572 206e6168     nable more than 
    54a8:	20656e6f 69726570 72656870 61206c61     one peripheral a
    54b8:	20612074 656d6974 0000002e 2e5c2e2e     t a time......\.
    54c8:	6d615c2e 6c61685f 7277705f 6c727463     .\am_hal_pwrctrl
    54d8:	0000632e                                .c..
