
watchdog_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002280  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000030  10001000  00002280  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000120  10001030  000022b0  00021030  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021030  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000cfe7  00000000  00000000  00021067  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002dbc  00000000  00000000  0002e04e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000918  00000000  00000000  00030e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001370  00000000  00000000  00031722  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000054c5  00000000  00000000  00032a92  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003061  00000000  00000000  00037f57  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  0003afb8  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000018f8  00000000  00000000  0003b034  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003814  00000000  00000000  0003c92c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 bd 07 00 00 25 08 00 00 65 08 00 00     ........%...e...
      10:	65 08 00 00 65 08 00 00 65 08 00 00 00 00 00 00     e...e...e.......
	...
      2c:	2b 08 00 00 2b 08 00 00 00 00 00 00 2b 08 00 00     +...+.......+...
      3c:	2b 08 00 00 2b 08 00 00 71 06 00 00 2b 08 00 00     +...+...q...+...
      4c:	2b 08 00 00 2b 08 00 00 2b 08 00 00 2b 08 00 00     +...+...+...+...
      5c:	2b 08 00 00 2b 08 00 00 2b 08 00 00 2b 08 00 00     +...+...+...+...
      6c:	2b 08 00 00 2b 08 00 00 2b 08 00 00 2b 08 00 00     +...+...+...+...
      7c:	2b 08 00 00 2b 08 00 00 2b 08 00 00 2b 08 00 00     +...+...+...+...
      8c:	2b 08 00 00 2b 08 00 00 2b 08 00 00 2b 08 00 00     +...+...+...+...
      9c:	2b 08 00 00 2b 08 00 00 2b 08 00 00 2b 08 00 00     +...+...+...+...
      ac:	2b 08 00 00 2b 08 00 00 2b 08 00 00 2b 08 00 00     +...+...+...+...
      bc:	2b 08 00 00                                         +...

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <am_devices_led_init>:
am_devices_led_array_disable(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
    if ( (psLEDs == NULL)                       ||
         (ui32NumLEDs > MAX_LEDS) )
    {
        return;
     160:	b590      	push	{r4, r7, lr}
        am_hal_gpio_pinconfig((psLEDs + i)->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
#else
        am_hal_gpio_pin_config((psLEDs + i)->ui32GPIONumber, AM_HAL_GPIO_DISABLE);
#endif
    }
}
     162:	b085      	sub	sp, #20
     164:	af00      	add	r7, sp, #0
     166:	6078      	str	r0, [r7, #4]
     168:	687b      	ldr	r3, [r7, #4]
     16a:	2b00      	cmp	r3, #0
     16c:	f000 8162 	beq.w	434 <am_devices_led_init+0x2d4>
     170:	687b      	ldr	r3, [r7, #4]
     172:	681b      	ldr	r3, [r3, #0]
    if ( (psLED == NULL)    ||
     174:	2b31      	cmp	r3, #49	; 0x31
     176:	f200 815d 	bhi.w	434 <am_devices_led_init+0x2d4>
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
     17a:	687b      	ldr	r3, [r7, #4]
     17c:	685b      	ldr	r3, [r3, #4]
     17e:	f003 0302 	and.w	r3, r3, #2
     182:	2b00      	cmp	r3, #0
     184:	f000 80ab 	beq.w	2de <am_devices_led_init+0x17e>
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT);
     188:	687b      	ldr	r3, [r7, #4]
     18a:	681b      	ldr	r3, [r3, #0]
     18c:	2b31      	cmp	r3, #49	; 0x31
     18e:	d86e      	bhi.n	26e <am_devices_led_init+0x10e>
     190:	f001 fc20 	bl	19d4 <am_hal_interrupt_master_disable>
     194:	4603      	mov	r3, r0
     196:	60fb      	str	r3, [r7, #12]
     198:	4ba8      	ldr	r3, [pc, #672]	; (43c <am_devices_led_init+0x2dc>)
     19a:	2273      	movs	r2, #115	; 0x73
     19c:	601a      	str	r2, [r3, #0]
     19e:	687b      	ldr	r3, [r7, #4]
     1a0:	681b      	ldr	r3, [r3, #0]
     1a2:	085b      	lsrs	r3, r3, #1
     1a4:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     1a8:	4ba5      	ldr	r3, [pc, #660]	; (440 <am_devices_led_init+0x2e0>)
     1aa:	4413      	add	r3, r2
     1ac:	461c      	mov	r4, r3
     1ae:	687b      	ldr	r3, [r7, #4]
     1b0:	681b      	ldr	r3, [r3, #0]
     1b2:	009b      	lsls	r3, r3, #2
     1b4:	f003 031c 	and.w	r3, r3, #28
     1b8:	2202      	movs	r2, #2
     1ba:	409a      	lsls	r2, r3
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	681b      	ldr	r3, [r3, #0]
     1c0:	085b      	lsrs	r3, r3, #1
     1c2:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     1c6:	4b9e      	ldr	r3, [pc, #632]	; (440 <am_devices_led_init+0x2e0>)
     1c8:	440b      	add	r3, r1
     1ca:	6819      	ldr	r1, [r3, #0]
     1cc:	687b      	ldr	r3, [r7, #4]
     1ce:	681b      	ldr	r3, [r3, #0]
     1d0:	009b      	lsls	r3, r3, #2
     1d2:	f003 031c 	and.w	r3, r3, #28
     1d6:	2007      	movs	r0, #7
     1d8:	fa00 f303 	lsl.w	r3, r0, r3
     1dc:	43db      	mvns	r3, r3
     1de:	400b      	ands	r3, r1
     1e0:	4313      	orrs	r3, r2
     1e2:	6023      	str	r3, [r4, #0]
     1e4:	687b      	ldr	r3, [r7, #4]
     1e6:	681b      	ldr	r3, [r3, #0]
     1e8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     1ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     1f0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     1f4:	461c      	mov	r4, r3
     1f6:	687b      	ldr	r3, [r7, #4]
     1f8:	681b      	ldr	r3, [r3, #0]
     1fa:	00db      	lsls	r3, r3, #3
     1fc:	f003 0318 	and.w	r3, r3, #24
     200:	2218      	movs	r2, #24
     202:	409a      	lsls	r2, r3
     204:	687b      	ldr	r3, [r7, #4]
     206:	681b      	ldr	r3, [r3, #0]
     208:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     20c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     210:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     214:	6819      	ldr	r1, [r3, #0]
     216:	687b      	ldr	r3, [r7, #4]
     218:	681b      	ldr	r3, [r3, #0]
     21a:	00db      	lsls	r3, r3, #3
     21c:	f003 0318 	and.w	r3, r3, #24
     220:	20ff      	movs	r0, #255	; 0xff
     222:	fa00 f303 	lsl.w	r3, r0, r3
     226:	43db      	mvns	r3, r3
     228:	400b      	ands	r3, r1
     22a:	4313      	orrs	r3, r2
     22c:	6023      	str	r3, [r4, #0]
     22e:	687b      	ldr	r3, [r7, #4]
     230:	681b      	ldr	r3, [r3, #0]
     232:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     236:	4b83      	ldr	r3, [pc, #524]	; (444 <am_devices_led_init+0x2e4>)
     238:	4413      	add	r3, r2
     23a:	4618      	mov	r0, r3
     23c:	687b      	ldr	r3, [r7, #4]
     23e:	681b      	ldr	r3, [r3, #0]
     240:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     244:	4b7f      	ldr	r3, [pc, #508]	; (444 <am_devices_led_init+0x2e4>)
     246:	4413      	add	r3, r2
     248:	681a      	ldr	r2, [r3, #0]
     24a:	687b      	ldr	r3, [r7, #4]
     24c:	681b      	ldr	r3, [r3, #0]
     24e:	00db      	lsls	r3, r3, #3
     250:	f003 0318 	and.w	r3, r3, #24
     254:	21ff      	movs	r1, #255	; 0xff
     256:	fa01 f303 	lsl.w	r3, r1, r3
     25a:	43db      	mvns	r3, r3
     25c:	4013      	ands	r3, r2
     25e:	6003      	str	r3, [r0, #0]
     260:	4b76      	ldr	r3, [pc, #472]	; (43c <am_devices_led_init+0x2dc>)
     262:	2200      	movs	r2, #0
     264:	601a      	str	r2, [r3, #0]
     266:	68fb      	ldr	r3, [r7, #12]
     268:	4618      	mov	r0, r3
     26a:	f001 fbb7 	bl	19dc <am_hal_interrupt_master_set>
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     26e:	687b      	ldr	r3, [r7, #4]
     270:	681b      	ldr	r3, [r3, #0]
     272:	08db      	lsrs	r3, r3, #3
     274:	f003 0204 	and.w	r2, r3, #4
     278:	4b73      	ldr	r3, [pc, #460]	; (448 <am_devices_led_init+0x2e8>)
     27a:	4413      	add	r3, r2
     27c:	4619      	mov	r1, r3
     27e:	687b      	ldr	r3, [r7, #4]
     280:	681b      	ldr	r3, [r3, #0]
     282:	f003 031f 	and.w	r3, r3, #31
     286:	2201      	movs	r2, #1
     288:	fa02 f303 	lsl.w	r3, r2, r3
     28c:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     28e:	687b      	ldr	r3, [r7, #4]
     290:	685b      	ldr	r3, [r3, #4]
     292:	f003 0301 	and.w	r3, r3, #1
     296:	2b00      	cmp	r3, #0
     298:	d010      	beq.n	2bc <am_devices_led_init+0x15c>
     29a:	687b      	ldr	r3, [r7, #4]
     29c:	681b      	ldr	r3, [r3, #0]
     29e:	08db      	lsrs	r3, r3, #3
     2a0:	f003 0204 	and.w	r2, r3, #4
     2a4:	4b69      	ldr	r3, [pc, #420]	; (44c <am_devices_led_init+0x2ec>)
     2a6:	4413      	add	r3, r2
     2a8:	4619      	mov	r1, r3
     2aa:	687b      	ldr	r3, [r7, #4]
     2ac:	681b      	ldr	r3, [r3, #0]
     2ae:	f003 031f 	and.w	r3, r3, #31
     2b2:	2201      	movs	r2, #1
     2b4:	fa02 f303 	lsl.w	r3, r2, r3
     2b8:	600b      	str	r3, [r1, #0]
     2ba:	e0bc      	b.n	436 <am_devices_led_init+0x2d6>
     2bc:	687b      	ldr	r3, [r7, #4]
     2be:	681b      	ldr	r3, [r3, #0]
     2c0:	08db      	lsrs	r3, r3, #3
     2c2:	f003 0204 	and.w	r2, r3, #4
     2c6:	4b62      	ldr	r3, [pc, #392]	; (450 <am_devices_led_init+0x2f0>)
     2c8:	4413      	add	r3, r2
     2ca:	4619      	mov	r1, r3
     2cc:	687b      	ldr	r3, [r7, #4]
     2ce:	681b      	ldr	r3, [r3, #0]
     2d0:	f003 031f 	and.w	r3, r3, #31
     2d4:	2201      	movs	r2, #1
     2d6:	fa02 f303 	lsl.w	r3, r2, r3
     2da:	600b      	str	r3, [r1, #0]
     2dc:	e0ab      	b.n	436 <am_devices_led_init+0x2d6>
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     2de:	687b      	ldr	r3, [r7, #4]
     2e0:	681b      	ldr	r3, [r3, #0]
     2e2:	2b31      	cmp	r3, #49	; 0x31
     2e4:	d86e      	bhi.n	3c4 <am_devices_led_init+0x264>
     2e6:	f001 fb75 	bl	19d4 <am_hal_interrupt_master_disable>
     2ea:	4603      	mov	r3, r0
     2ec:	60bb      	str	r3, [r7, #8]
     2ee:	4b53      	ldr	r3, [pc, #332]	; (43c <am_devices_led_init+0x2dc>)
     2f0:	2273      	movs	r2, #115	; 0x73
     2f2:	601a      	str	r2, [r3, #0]
     2f4:	687b      	ldr	r3, [r7, #4]
     2f6:	681b      	ldr	r3, [r3, #0]
     2f8:	085b      	lsrs	r3, r3, #1
     2fa:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     2fe:	4b50      	ldr	r3, [pc, #320]	; (440 <am_devices_led_init+0x2e0>)
     300:	4413      	add	r3, r2
     302:	461c      	mov	r4, r3
     304:	687b      	ldr	r3, [r7, #4]
     306:	681b      	ldr	r3, [r3, #0]
     308:	009b      	lsls	r3, r3, #2
     30a:	f003 031c 	and.w	r3, r3, #28
     30e:	2206      	movs	r2, #6
     310:	409a      	lsls	r2, r3
     312:	687b      	ldr	r3, [r7, #4]
     314:	681b      	ldr	r3, [r3, #0]
     316:	085b      	lsrs	r3, r3, #1
     318:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     31c:	4b48      	ldr	r3, [pc, #288]	; (440 <am_devices_led_init+0x2e0>)
     31e:	440b      	add	r3, r1
     320:	6819      	ldr	r1, [r3, #0]
     322:	687b      	ldr	r3, [r7, #4]
     324:	681b      	ldr	r3, [r3, #0]
     326:	009b      	lsls	r3, r3, #2
     328:	f003 031c 	and.w	r3, r3, #28
     32c:	2007      	movs	r0, #7
     32e:	fa00 f303 	lsl.w	r3, r0, r3
     332:	43db      	mvns	r3, r3
     334:	400b      	ands	r3, r1
     336:	4313      	orrs	r3, r2
     338:	6023      	str	r3, [r4, #0]
     33a:	687b      	ldr	r3, [r7, #4]
     33c:	681b      	ldr	r3, [r3, #0]
     33e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     342:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     346:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     34a:	461c      	mov	r4, r3
     34c:	687b      	ldr	r3, [r7, #4]
     34e:	681b      	ldr	r3, [r3, #0]
     350:	00db      	lsls	r3, r3, #3
     352:	f003 0318 	and.w	r3, r3, #24
     356:	2218      	movs	r2, #24
     358:	409a      	lsls	r2, r3
     35a:	687b      	ldr	r3, [r7, #4]
     35c:	681b      	ldr	r3, [r3, #0]
     35e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     362:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     366:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     36a:	6819      	ldr	r1, [r3, #0]
     36c:	687b      	ldr	r3, [r7, #4]
     36e:	681b      	ldr	r3, [r3, #0]
     370:	00db      	lsls	r3, r3, #3
     372:	f003 0318 	and.w	r3, r3, #24
     376:	20ff      	movs	r0, #255	; 0xff
     378:	fa00 f303 	lsl.w	r3, r0, r3
     37c:	43db      	mvns	r3, r3
     37e:	400b      	ands	r3, r1
     380:	4313      	orrs	r3, r2
     382:	6023      	str	r3, [r4, #0]
     384:	687b      	ldr	r3, [r7, #4]
     386:	681b      	ldr	r3, [r3, #0]
     388:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     38c:	4b2d      	ldr	r3, [pc, #180]	; (444 <am_devices_led_init+0x2e4>)
     38e:	4413      	add	r3, r2
     390:	4618      	mov	r0, r3
     392:	687b      	ldr	r3, [r7, #4]
     394:	681b      	ldr	r3, [r3, #0]
     396:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     39a:	4b2a      	ldr	r3, [pc, #168]	; (444 <am_devices_led_init+0x2e4>)
     39c:	4413      	add	r3, r2
     39e:	681a      	ldr	r2, [r3, #0]
     3a0:	687b      	ldr	r3, [r7, #4]
     3a2:	681b      	ldr	r3, [r3, #0]
     3a4:	00db      	lsls	r3, r3, #3
     3a6:	f003 0318 	and.w	r3, r3, #24
     3aa:	21ff      	movs	r1, #255	; 0xff
     3ac:	fa01 f303 	lsl.w	r3, r1, r3
     3b0:	43db      	mvns	r3, r3
     3b2:	4013      	ands	r3, r2
     3b4:	6003      	str	r3, [r0, #0]
     3b6:	4b21      	ldr	r3, [pc, #132]	; (43c <am_devices_led_init+0x2dc>)
     3b8:	2200      	movs	r2, #0
     3ba:	601a      	str	r2, [r3, #0]
     3bc:	68bb      	ldr	r3, [r7, #8]
     3be:	4618      	mov	r0, r3
     3c0:	f001 fb0c 	bl	19dc <am_hal_interrupt_master_set>
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     3c4:	687b      	ldr	r3, [r7, #4]
     3c6:	681b      	ldr	r3, [r3, #0]
     3c8:	08db      	lsrs	r3, r3, #3
     3ca:	f003 0204 	and.w	r2, r3, #4
     3ce:	4b1e      	ldr	r3, [pc, #120]	; (448 <am_devices_led_init+0x2e8>)
     3d0:	4413      	add	r3, r2
     3d2:	4619      	mov	r1, r3
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	681b      	ldr	r3, [r3, #0]
     3d8:	f003 031f 	and.w	r3, r3, #31
     3dc:	2201      	movs	r2, #1
     3de:	fa02 f303 	lsl.w	r3, r2, r3
     3e2:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     3e4:	687b      	ldr	r3, [r7, #4]
     3e6:	685b      	ldr	r3, [r3, #4]
     3e8:	f003 0301 	and.w	r3, r3, #1
     3ec:	2b00      	cmp	r3, #0
     3ee:	d010      	beq.n	412 <am_devices_led_init+0x2b2>
     3f0:	687b      	ldr	r3, [r7, #4]
     3f2:	681b      	ldr	r3, [r3, #0]
     3f4:	08db      	lsrs	r3, r3, #3
     3f6:	f003 0204 	and.w	r2, r3, #4
     3fa:	4b14      	ldr	r3, [pc, #80]	; (44c <am_devices_led_init+0x2ec>)
     3fc:	4413      	add	r3, r2
     3fe:	4619      	mov	r1, r3
     400:	687b      	ldr	r3, [r7, #4]
     402:	681b      	ldr	r3, [r3, #0]
     404:	f003 031f 	and.w	r3, r3, #31
     408:	2201      	movs	r2, #1
     40a:	fa02 f303 	lsl.w	r3, r2, r3
     40e:	600b      	str	r3, [r1, #0]
     410:	e011      	b.n	436 <am_devices_led_init+0x2d6>
     412:	687b      	ldr	r3, [r7, #4]
     414:	681b      	ldr	r3, [r3, #0]
     416:	08db      	lsrs	r3, r3, #3
     418:	f003 0204 	and.w	r2, r3, #4
     41c:	4b0c      	ldr	r3, [pc, #48]	; (450 <am_devices_led_init+0x2f0>)
     41e:	4413      	add	r3, r2
     420:	4619      	mov	r1, r3
     422:	687b      	ldr	r3, [r7, #4]
     424:	681b      	ldr	r3, [r3, #0]
     426:	f003 031f 	and.w	r3, r3, #31
     42a:	2201      	movs	r2, #1
     42c:	fa02 f303 	lsl.w	r3, r2, r3
     430:	600b      	str	r3, [r1, #0]
     432:	e000      	b.n	436 <am_devices_led_init+0x2d6>
        return;
     434:	bf00      	nop
}
     436:	3714      	adds	r7, #20
     438:	46bd      	mov	sp, r7
     43a:	bd90      	pop	{r4, r7, pc}
     43c:	40010060 	.word	0x40010060
     440:	40010040 	.word	0x40010040
     444:	400100e0 	.word	0x400100e0
     448:	400100b4 	.word	0x400100b4
     44c:	40010090 	.word	0x40010090
     450:	40010098 	.word	0x40010098

00000454 <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
     454:	b580      	push	{r7, lr}
     456:	b084      	sub	sp, #16
     458:	af00      	add	r7, sp, #0
     45a:	6078      	str	r0, [r7, #4]
     45c:	6039      	str	r1, [r7, #0]
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
     45e:	687b      	ldr	r3, [r7, #4]
     460:	2b00      	cmp	r3, #0
     462:	d014      	beq.n	48e <am_devices_led_array_init+0x3a>
     464:	683b      	ldr	r3, [r7, #0]
     466:	2b1f      	cmp	r3, #31
     468:	d811      	bhi.n	48e <am_devices_led_array_init+0x3a>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     46a:	2300      	movs	r3, #0
     46c:	60fb      	str	r3, [r7, #12]
     46e:	e009      	b.n	484 <am_devices_led_array_init+0x30>
    {
        am_devices_led_init(psLEDs + i);
     470:	68fb      	ldr	r3, [r7, #12]
     472:	00db      	lsls	r3, r3, #3
     474:	687a      	ldr	r2, [r7, #4]
     476:	4413      	add	r3, r2
     478:	4618      	mov	r0, r3
     47a:	f7ff fe71 	bl	160 <am_devices_led_init>
    for ( i = 0; i < ui32NumLEDs; i++ )
     47e:	68fb      	ldr	r3, [r7, #12]
     480:	3301      	adds	r3, #1
     482:	60fb      	str	r3, [r7, #12]
     484:	68fa      	ldr	r2, [r7, #12]
     486:	683b      	ldr	r3, [r7, #0]
     488:	429a      	cmp	r2, r3
     48a:	d3f1      	bcc.n	470 <am_devices_led_array_init+0x1c>
     48c:	e000      	b.n	490 <am_devices_led_array_init+0x3c>
        return;
     48e:	bf00      	nop
    }
}
     490:	3710      	adds	r7, #16
     492:	46bd      	mov	sp, r7
     494:	bd80      	pop	{r7, pc}
	...

00000498 <am_devices_led_on>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     498:	b480      	push	{r7}
     49a:	b083      	sub	sp, #12
     49c:	af00      	add	r7, sp, #0
     49e:	6078      	str	r0, [r7, #4]
     4a0:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
     4a2:	687b      	ldr	r3, [r7, #4]
     4a4:	2b00      	cmp	r3, #0
     4a6:	d060      	beq.n	56a <am_devices_led_on+0xd2>
     4a8:	683b      	ldr	r3, [r7, #0]
     4aa:	2b1e      	cmp	r3, #30
     4ac:	d85d      	bhi.n	56a <am_devices_led_on+0xd2>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
     4ae:	683b      	ldr	r3, [r7, #0]
     4b0:	00db      	lsls	r3, r3, #3
     4b2:	687a      	ldr	r2, [r7, #4]
     4b4:	4413      	add	r3, r2
     4b6:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
     4b8:	2b31      	cmp	r3, #49	; 0x31
     4ba:	d856      	bhi.n	56a <am_devices_led_on+0xd2>
    }
#else // AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     4bc:	683b      	ldr	r3, [r7, #0]
     4be:	00db      	lsls	r3, r3, #3
     4c0:	687a      	ldr	r2, [r7, #4]
     4c2:	4413      	add	r3, r2
     4c4:	685b      	ldr	r3, [r3, #4]
     4c6:	f003 0302 	and.w	r3, r3, #2
     4ca:	2b00      	cmp	r3, #0
     4cc:	d036      	beq.n	53c <am_devices_led_on+0xa4>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     4ce:	683b      	ldr	r3, [r7, #0]
     4d0:	00db      	lsls	r3, r3, #3
     4d2:	687a      	ldr	r2, [r7, #4]
     4d4:	4413      	add	r3, r2
     4d6:	685b      	ldr	r3, [r3, #4]
     4d8:	f003 0301 	and.w	r3, r3, #1
     4dc:	2b00      	cmp	r3, #0
     4de:	d016      	beq.n	50e <am_devices_led_on+0x76>
     4e0:	683b      	ldr	r3, [r7, #0]
     4e2:	00db      	lsls	r3, r3, #3
     4e4:	687a      	ldr	r2, [r7, #4]
     4e6:	4413      	add	r3, r2
     4e8:	681b      	ldr	r3, [r3, #0]
     4ea:	08db      	lsrs	r3, r3, #3
     4ec:	f003 0204 	and.w	r2, r3, #4
     4f0:	4b21      	ldr	r3, [pc, #132]	; (578 <am_devices_led_on+0xe0>)
     4f2:	4413      	add	r3, r2
     4f4:	4619      	mov	r1, r3
     4f6:	683b      	ldr	r3, [r7, #0]
     4f8:	00db      	lsls	r3, r3, #3
     4fa:	687a      	ldr	r2, [r7, #4]
     4fc:	4413      	add	r3, r2
     4fe:	681b      	ldr	r3, [r3, #0]
     500:	f003 031f 	and.w	r3, r3, #31
     504:	2201      	movs	r2, #1
     506:	fa02 f303 	lsl.w	r3, r2, r3
     50a:	600b      	str	r3, [r1, #0]
     50c:	e02e      	b.n	56c <am_devices_led_on+0xd4>
     50e:	683b      	ldr	r3, [r7, #0]
     510:	00db      	lsls	r3, r3, #3
     512:	687a      	ldr	r2, [r7, #4]
     514:	4413      	add	r3, r2
     516:	681b      	ldr	r3, [r3, #0]
     518:	08db      	lsrs	r3, r3, #3
     51a:	f003 0204 	and.w	r2, r3, #4
     51e:	4b17      	ldr	r3, [pc, #92]	; (57c <am_devices_led_on+0xe4>)
     520:	4413      	add	r3, r2
     522:	4619      	mov	r1, r3
     524:	683b      	ldr	r3, [r7, #0]
     526:	00db      	lsls	r3, r3, #3
     528:	687a      	ldr	r2, [r7, #4]
     52a:	4413      	add	r3, r2
     52c:	681b      	ldr	r3, [r3, #0]
     52e:	f003 031f 	and.w	r3, r3, #31
     532:	2201      	movs	r2, #1
     534:	fa02 f303 	lsl.w	r3, r2, r3
     538:	600b      	str	r3, [r1, #0]
     53a:	e017      	b.n	56c <am_devices_led_on+0xd4>
    else
    {
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
     53c:	683b      	ldr	r3, [r7, #0]
     53e:	00db      	lsls	r3, r3, #3
     540:	687a      	ldr	r2, [r7, #4]
     542:	4413      	add	r3, r2
     544:	681b      	ldr	r3, [r3, #0]
     546:	08db      	lsrs	r3, r3, #3
     548:	f003 0204 	and.w	r2, r3, #4
     54c:	4b0c      	ldr	r3, [pc, #48]	; (580 <am_devices_led_on+0xe8>)
     54e:	4413      	add	r3, r2
     550:	4619      	mov	r1, r3
     552:	683b      	ldr	r3, [r7, #0]
     554:	00db      	lsls	r3, r3, #3
     556:	687a      	ldr	r2, [r7, #4]
     558:	4413      	add	r3, r2
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f003 031f 	and.w	r3, r3, #31
     560:	2201      	movs	r2, #1
     562:	fa02 f303 	lsl.w	r3, r2, r3
     566:	600b      	str	r3, [r1, #0]
     568:	e000      	b.n	56c <am_devices_led_on+0xd4>
        return;
     56a:	bf00      	nop
    }
#endif //AM_APOLLO3_GPIO
}
     56c:	370c      	adds	r7, #12
     56e:	46bd      	mov	sp, r7
     570:	f85d 7b04 	ldr.w	r7, [sp], #4
     574:	4770      	bx	lr
     576:	bf00      	nop
     578:	40010090 	.word	0x40010090
     57c:	40010098 	.word	0x40010098
     580:	400100a8 	.word	0x400100a8

00000584 <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     584:	b480      	push	{r7}
     586:	b083      	sub	sp, #12
     588:	af00      	add	r7, sp, #0
     58a:	6078      	str	r0, [r7, #4]
     58c:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
     58e:	687b      	ldr	r3, [r7, #4]
     590:	2b00      	cmp	r3, #0
     592:	d060      	beq.n	656 <am_devices_led_off+0xd2>
     594:	683b      	ldr	r3, [r7, #0]
     596:	2b1e      	cmp	r3, #30
     598:	d85d      	bhi.n	656 <am_devices_led_off+0xd2>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
     59a:	683b      	ldr	r3, [r7, #0]
     59c:	00db      	lsls	r3, r3, #3
     59e:	687a      	ldr	r2, [r7, #4]
     5a0:	4413      	add	r3, r2
     5a2:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
     5a4:	2b31      	cmp	r3, #49	; 0x31
     5a6:	d856      	bhi.n	656 <am_devices_led_off+0xd2>
    }
#else
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     5a8:	683b      	ldr	r3, [r7, #0]
     5aa:	00db      	lsls	r3, r3, #3
     5ac:	687a      	ldr	r2, [r7, #4]
     5ae:	4413      	add	r3, r2
     5b0:	685b      	ldr	r3, [r3, #4]
     5b2:	f003 0302 	and.w	r3, r3, #2
     5b6:	2b00      	cmp	r3, #0
     5b8:	d036      	beq.n	628 <am_devices_led_off+0xa4>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     5ba:	683b      	ldr	r3, [r7, #0]
     5bc:	00db      	lsls	r3, r3, #3
     5be:	687a      	ldr	r2, [r7, #4]
     5c0:	4413      	add	r3, r2
     5c2:	685b      	ldr	r3, [r3, #4]
     5c4:	f003 0301 	and.w	r3, r3, #1
     5c8:	2b00      	cmp	r3, #0
     5ca:	d116      	bne.n	5fa <am_devices_led_off+0x76>
     5cc:	683b      	ldr	r3, [r7, #0]
     5ce:	00db      	lsls	r3, r3, #3
     5d0:	687a      	ldr	r2, [r7, #4]
     5d2:	4413      	add	r3, r2
     5d4:	681b      	ldr	r3, [r3, #0]
     5d6:	08db      	lsrs	r3, r3, #3
     5d8:	f003 0204 	and.w	r2, r3, #4
     5dc:	4b21      	ldr	r3, [pc, #132]	; (664 <am_devices_led_off+0xe0>)
     5de:	4413      	add	r3, r2
     5e0:	4619      	mov	r1, r3
     5e2:	683b      	ldr	r3, [r7, #0]
     5e4:	00db      	lsls	r3, r3, #3
     5e6:	687a      	ldr	r2, [r7, #4]
     5e8:	4413      	add	r3, r2
     5ea:	681b      	ldr	r3, [r3, #0]
     5ec:	f003 031f 	and.w	r3, r3, #31
     5f0:	2201      	movs	r2, #1
     5f2:	fa02 f303 	lsl.w	r3, r2, r3
     5f6:	600b      	str	r3, [r1, #0]
     5f8:	e02e      	b.n	658 <am_devices_led_off+0xd4>
     5fa:	683b      	ldr	r3, [r7, #0]
     5fc:	00db      	lsls	r3, r3, #3
     5fe:	687a      	ldr	r2, [r7, #4]
     600:	4413      	add	r3, r2
     602:	681b      	ldr	r3, [r3, #0]
     604:	08db      	lsrs	r3, r3, #3
     606:	f003 0204 	and.w	r2, r3, #4
     60a:	4b17      	ldr	r3, [pc, #92]	; (668 <am_devices_led_off+0xe4>)
     60c:	4413      	add	r3, r2
     60e:	4619      	mov	r1, r3
     610:	683b      	ldr	r3, [r7, #0]
     612:	00db      	lsls	r3, r3, #3
     614:	687a      	ldr	r2, [r7, #4]
     616:	4413      	add	r3, r2
     618:	681b      	ldr	r3, [r3, #0]
     61a:	f003 031f 	and.w	r3, r3, #31
     61e:	2201      	movs	r2, #1
     620:	fa02 f303 	lsl.w	r3, r2, r3
     624:	600b      	str	r3, [r1, #0]
     626:	e017      	b.n	658 <am_devices_led_off+0xd4>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
     628:	683b      	ldr	r3, [r7, #0]
     62a:	00db      	lsls	r3, r3, #3
     62c:	687a      	ldr	r2, [r7, #4]
     62e:	4413      	add	r3, r2
     630:	681b      	ldr	r3, [r3, #0]
     632:	08db      	lsrs	r3, r3, #3
     634:	f003 0204 	and.w	r2, r3, #4
     638:	4b0c      	ldr	r3, [pc, #48]	; (66c <am_devices_led_off+0xe8>)
     63a:	4413      	add	r3, r2
     63c:	4619      	mov	r1, r3
     63e:	683b      	ldr	r3, [r7, #0]
     640:	00db      	lsls	r3, r3, #3
     642:	687a      	ldr	r2, [r7, #4]
     644:	4413      	add	r3, r2
     646:	681b      	ldr	r3, [r3, #0]
     648:	f003 031f 	and.w	r3, r3, #31
     64c:	2201      	movs	r2, #1
     64e:	fa02 f303 	lsl.w	r3, r2, r3
     652:	600b      	str	r3, [r1, #0]
     654:	e000      	b.n	658 <am_devices_led_off+0xd4>
        return;
     656:	bf00      	nop
    }
#endif
}
     658:	370c      	adds	r7, #12
     65a:	46bd      	mov	sp, r7
     65c:	f85d 7b04 	ldr.w	r7, [sp], #4
     660:	4770      	bx	lr
     662:	bf00      	nop
     664:	40010090 	.word	0x40010090
     668:	40010098 	.word	0x40010098
     66c:	400100b4 	.word	0x400100b4

00000670 <am_watchdog_isr>:
// Interrupt handler for the watchdog.
//
//*****************************************************************************
void
am_watchdog_isr(void)
{
     670:	b580      	push	{r7, lr}
     672:	af00      	add	r7, sp, #0
    //
    // Clear the watchdog interrupt.
    //
    am_hal_wdt_int_clear();
     674:	f001 fd1c 	bl	20b0 <am_hal_wdt_int_clear>

    //
    // Catch the first four watchdog interrupts, but let the fifth through
    // untouched.
    //
    if ( g_ui8NumWatchdogInterrupts < 4 )
     678:	4b0d      	ldr	r3, [pc, #52]	; (6b0 <am_watchdog_isr+0x40>)
     67a:	781b      	ldrb	r3, [r3, #0]
     67c:	2b03      	cmp	r3, #3
     67e:	d804      	bhi.n	68a <am_watchdog_isr+0x1a>
    {
        //
        // Restart the watchdog.
        //
        am_hal_wdt_restart();
     680:	4b0c      	ldr	r3, [pc, #48]	; (6b4 <am_watchdog_isr+0x44>)
     682:	22b2      	movs	r2, #178	; 0xb2
     684:	601a      	str	r2, [r3, #0]
     686:	4b0b      	ldr	r3, [pc, #44]	; (6b4 <am_watchdog_isr+0x44>)
     688:	681b      	ldr	r3, [r3, #0]
    }

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     68a:	f001 f829 	bl	16e0 <am_bsp_debug_printf_enable>

    //
    // Send a status message and give it some time to print.
    //
    am_util_stdio_printf("Interrupt #: %d\n", g_ui8NumWatchdogInterrupts);
     68e:	4b08      	ldr	r3, [pc, #32]	; (6b0 <am_watchdog_isr+0x40>)
     690:	781b      	ldrb	r3, [r3, #0]
     692:	4619      	mov	r1, r3
     694:	4808      	ldr	r0, [pc, #32]	; (6b8 <am_watchdog_isr+0x48>)
     696:	f000 ffe9 	bl	166c <am_util_stdio_printf>
    am_util_delay_ms(100);
     69a:	2064      	movs	r0, #100	; 0x64
     69c:	f000 f8c8 	bl	830 <am_util_delay_ms>

    //
    // Increment the number of watchdog interrupts.
    //
    g_ui8NumWatchdogInterrupts++;
     6a0:	4b03      	ldr	r3, [pc, #12]	; (6b0 <am_watchdog_isr+0x40>)
     6a2:	781b      	ldrb	r3, [r3, #0]
     6a4:	3301      	adds	r3, #1
     6a6:	b2da      	uxtb	r2, r3
     6a8:	4b01      	ldr	r3, [pc, #4]	; (6b0 <am_watchdog_isr+0x40>)
     6aa:	701a      	strb	r2, [r3, #0]


}
     6ac:	bf00      	nop
     6ae:	bd80      	pop	{r7, pc}
     6b0:	10001030 	.word	0x10001030
     6b4:	40024004 	.word	0x40024004
     6b8:	000021c8 	.word	0x000021c8

000006bc <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     6bc:	b580      	push	{r7, lr}
     6be:	b082      	sub	sp, #8
     6c0:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     6c2:	2000      	movs	r0, #0
     6c4:	f001 f918 	bl	18f8 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     6c8:	4831      	ldr	r0, [pc, #196]	; (790 <main+0xd4>)
     6ca:	f001 f87f 	bl	17cc <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     6ce:	f000 fff5 	bl	16bc <am_bsp_low_power_init>

    //
    // Initialize device drivers for the LEDs on the board.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
     6d2:	2105      	movs	r1, #5
     6d4:	482f      	ldr	r0, [pc, #188]	; (794 <main+0xd8>)
     6d6:	f7ff febd 	bl	454 <am_devices_led_array_init>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     6da:	482f      	ldr	r0, [pc, #188]	; (798 <main+0xdc>)
     6dc:	f000 f942 	bl	964 <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     6e0:	f001 f978 	bl	19d4 <am_hal_interrupt_master_disable>
     6e4:	4603      	mov	r3, r0
     6e6:	607b      	str	r3, [r7, #4]
     6e8:	4b2c      	ldr	r3, [pc, #176]	; (79c <main+0xe0>)
     6ea:	2273      	movs	r2, #115	; 0x73
     6ec:	601a      	str	r2, [r3, #0]
     6ee:	4a2c      	ldr	r2, [pc, #176]	; (7a0 <main+0xe4>)
     6f0:	4b2b      	ldr	r3, [pc, #172]	; (7a0 <main+0xe4>)
     6f2:	681b      	ldr	r3, [r3, #0]
     6f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     6f8:	6013      	str	r3, [r2, #0]
     6fa:	4a2a      	ldr	r2, [pc, #168]	; (7a4 <main+0xe8>)
     6fc:	4b29      	ldr	r3, [pc, #164]	; (7a4 <main+0xe8>)
     6fe:	681b      	ldr	r3, [r3, #0]
     700:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     704:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     708:	6013      	str	r3, [r2, #0]
     70a:	4a27      	ldr	r2, [pc, #156]	; (7a8 <main+0xec>)
     70c:	4b26      	ldr	r3, [pc, #152]	; (7a8 <main+0xec>)
     70e:	681b      	ldr	r3, [r3, #0]
     710:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     714:	6013      	str	r3, [r2, #0]
     716:	4b21      	ldr	r3, [pc, #132]	; (79c <main+0xe0>)
     718:	2200      	movs	r2, #0
     71a:	601a      	str	r2, [r3, #0]
     71c:	687b      	ldr	r3, [r7, #4]
     71e:	4618      	mov	r0, r3
     720:	f001 f95c 	bl	19dc <am_hal_interrupt_master_set>

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     724:	f001 f95e 	bl	19e4 <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     728:	f000 ffda 	bl	16e0 <am_bsp_debug_printf_enable>

    //
    // Clear the terminal screen, and print a quick message to show that we're
    // alive.
    //
    am_util_stdio_terminal_clear();
     72c:	f000 ffbc 	bl	16a8 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Watchdog Example.\n");
     730:	481e      	ldr	r0, [pc, #120]	; (7ac <main+0xf0>)
     732:	f000 ff9b 	bl	166c <am_util_stdio_printf>

    //
    // Print out reset status register upon entry.
    //
    g_ui32ResetStatus = am_hal_reset_status_get();
     736:	f001 fb4d 	bl	1dd4 <am_hal_reset_status_get>
     73a:	4602      	mov	r2, r0
     73c:	4b1c      	ldr	r3, [pc, #112]	; (7b0 <main+0xf4>)
     73e:	601a      	str	r2, [r3, #0]
    am_util_stdio_printf("Reset Status Register = 0x%x\n",
     740:	4b1b      	ldr	r3, [pc, #108]	; (7b0 <main+0xf4>)
     742:	681b      	ldr	r3, [r3, #0]
     744:	4619      	mov	r1, r3
     746:	481b      	ldr	r0, [pc, #108]	; (7b4 <main+0xf8>)
     748:	f000 ff90 	bl	166c <am_util_stdio_printf>
                          g_ui32ResetStatus);

    //
    // Clear reset status register for next time we reset.
    //
    am_hal_reset_status_clear();
     74c:	f001 fb48 	bl	1de0 <am_hal_reset_status_clear>

    //
    // LFRC has to be turned on for this example because the watchdog only
    // runs off of the LFRC.
    //
    am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_LFRC);
     750:	2002      	movs	r0, #2
     752:	f001 f8f9 	bl	1948 <am_hal_clkgen_osc_start>

    //
    // Configure the watchdog.
    //
    am_hal_wdt_init(&g_sWatchdogConfig);
     756:	4818      	ldr	r0, [pc, #96]	; (7b8 <main+0xfc>)
     758:	f001 fc60 	bl	201c <am_hal_wdt_init>

    //
    // Enable the interrupt for the watchdog in the NVIC.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_WATCHDOG);
     75c:	2011      	movs	r0, #17
     75e:	f001 f90d 	bl	197c <am_hal_interrupt_enable>
    am_hal_interrupt_master_enable();
     762:	f001 f933 	bl	19cc <am_hal_interrupt_master_enable>

    //
    // Enable the watchdog.
    //
    am_hal_wdt_start();
     766:	f001 fc93 	bl	2090 <am_hal_wdt_start>
    while (1)
    {
        //
        // We are done printing. Disable debug printf messages on ITM.
        //
        am_bsp_debug_printf_disable();
     76a:	f000 fff9 	bl	1760 <am_bsp_debug_printf_disable>

        //
        // Disable interrupts.
        //
        am_hal_interrupt_master_disable();
     76e:	f001 f931 	bl	19d4 <am_hal_interrupt_master_disable>

        //
        // Turn OFF the indicator LED.
        //
        am_devices_led_off(am_bsp_psLEDs, 0);
     772:	2100      	movs	r1, #0
     774:	4807      	ldr	r0, [pc, #28]	; (794 <main+0xd8>)
     776:	f7ff ff05 	bl	584 <am_devices_led_off>

        //
        // Go to deep sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     77a:	2001      	movs	r0, #1
     77c:	f001 fb4c 	bl	1e18 <am_hal_sysctrl_sleep>

        //
        // Turn ON the indicator LED.
        //
        am_devices_led_on(am_bsp_psLEDs, 0);
     780:	2100      	movs	r1, #0
     782:	4804      	ldr	r0, [pc, #16]	; (794 <main+0xd8>)
     784:	f7ff fe88 	bl	498 <am_devices_led_on>

        //
        // An interrupt woke us up so now enable them and take it.
        //
        am_hal_interrupt_master_enable();
     788:	f001 f920 	bl	19cc <am_hal_interrupt_master_enable>
        am_bsp_debug_printf_disable();
     78c:	e7ed      	b.n	76a <main+0xae>
     78e:	bf00      	nop
     790:	00002224 	.word	0x00002224
     794:	10001008 	.word	0x10001008
     798:	000017c9 	.word	0x000017c9
     79c:	40010060 	.word	0x40010060
     7a0:	40010054 	.word	0x40010054
     7a4:	40010028 	.word	0x40010028
     7a8:	40010108 	.word	0x40010108
     7ac:	000021dc 	.word	0x000021dc
     7b0:	10001034 	.word	0x10001034
     7b4:	000021f0 	.word	0x000021f0
     7b8:	10001000 	.word	0x10001000

000007bc <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     7bc:	4811      	ldr	r0, [pc, #68]	; (804 <zero_loop+0x12>)
     7be:	4912      	ldr	r1, [pc, #72]	; (808 <zero_loop+0x16>)
     7c0:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     7c2:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     7c6:	4811      	ldr	r0, [pc, #68]	; (80c <zero_loop+0x1a>)
     7c8:	6801      	ldr	r1, [r0, #0]
     7ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     7ce:	6001      	str	r1, [r0, #0]
     7d0:	f3bf 8f4f 	dsb	sy
     7d4:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     7d8:	480d      	ldr	r0, [pc, #52]	; (810 <zero_loop+0x1e>)
     7da:	490e      	ldr	r1, [pc, #56]	; (814 <zero_loop+0x22>)
     7dc:	4a0e      	ldr	r2, [pc, #56]	; (818 <zero_loop+0x26>)

000007de <copy_loop>:
     7de:	f850 3b04 	ldr.w	r3, [r0], #4
     7e2:	f841 3b04 	str.w	r3, [r1], #4
     7e6:	4291      	cmp	r1, r2
     7e8:	dbf9      	blt.n	7de <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     7ea:	480c      	ldr	r0, [pc, #48]	; (81c <zero_loop+0x2a>)
     7ec:	490c      	ldr	r1, [pc, #48]	; (820 <zero_loop+0x2e>)
     7ee:	f04f 0200 	mov.w	r2, #0

000007f2 <zero_loop>:
     7f2:	4288      	cmp	r0, r1
     7f4:	bfb8      	it	lt
     7f6:	f840 2b04 	strlt.w	r2, [r0], #4
     7fa:	dbfa      	blt.n	7f2 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     7fc:	f7ff ff5e 	bl	6bc <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     800:	be00      	bkpt	0x0000
}
     802:	bf00      	nop
     804:	e000ed08 	.word	0xe000ed08
     808:	00000000 	.word	0x00000000
     80c:	e000ed88 	.word	0xe000ed88
     810:	00002280 	.word	0x00002280
     814:	10001000 	.word	0x10001000
     818:	10001030 	.word	0x10001030
     81c:	10001030 	.word	0x10001030
     820:	10001150 	.word	0x10001150

00000824 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     824:	b480      	push	{r7}
     826:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     828:	e7fe      	b.n	828 <am_nmi_isr+0x4>

0000082a <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     82a:	b480      	push	{r7}
     82c:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     82e:	e7fe      	b.n	82e <am_adc_isr+0x4>

00000830 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
     830:	b580      	push	{r7, lr}
     832:	b084      	sub	sp, #16
     834:	af00      	add	r7, sp, #0
     836:	6078      	str	r0, [r7, #4]
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
     838:	f001 f876 	bl	1928 <am_hal_clkgen_sysclk_get>
     83c:	60f8      	str	r0, [r7, #12]
#endif
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
     83e:	68fb      	ldr	r3, [r7, #12]
     840:	4a07      	ldr	r2, [pc, #28]	; (860 <am_util_delay_ms+0x30>)
     842:	fba2 2303 	umull	r2, r3, r2, r3
     846:	099b      	lsrs	r3, r3, #6
     848:	687a      	ldr	r2, [r7, #4]
     84a:	fb02 f303 	mul.w	r3, r2, r3
     84e:	60bb      	str	r3, [r7, #8]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
     850:	68b8      	ldr	r0, [r7, #8]
     852:	f001 f88f 	bl	1974 <am_hal_flash_delay>
}
     856:	bf00      	nop
     858:	3710      	adds	r7, #16
     85a:	46bd      	mov	sp, r7
     85c:	bd80      	pop	{r7, pc}
     85e:	bf00      	nop
     860:	057619f1 	.word	0x057619f1

00000864 <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     864:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     866:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     868:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     86a:	f000 f809 	bl	880 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     86e:	bd01      	pop	{r0, pc}
}
     870:	bf00      	nop
     872:	4618      	mov	r0, r3

00000874 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     874:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     876:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     878:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     87a:	4770      	bx	lr
}
     87c:	bf00      	nop
     87e:	4618      	mov	r0, r3

00000880 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     880:	b580      	push	{r7, lr}
     882:	b096      	sub	sp, #88	; 0x58
     884:	af00      	add	r7, sp, #0
     886:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     888:	f107 030c 	add.w	r3, r7, #12
     88c:	2200      	movs	r2, #0
     88e:	601a      	str	r2, [r3, #0]
     890:	605a      	str	r2, [r3, #4]
     892:	609a      	str	r2, [r3, #8]
     894:	60da      	str	r2, [r3, #12]
     896:	611a      	str	r2, [r3, #16]
     898:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
     89a:	2300      	movs	r3, #0
     89c:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     89e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     8a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     8a2:	4b2e      	ldr	r3, [pc, #184]	; (95c <am_util_faultisr_collect_data+0xdc>)
     8a4:	681b      	ldr	r3, [r3, #0]
     8a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     8a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     8aa:	b2db      	uxtb	r3, r3
     8ac:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     8b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     8b2:	0a1b      	lsrs	r3, r3, #8
     8b4:	b2db      	uxtb	r3, r3
     8b6:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     8ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     8bc:	0c1b      	lsrs	r3, r3, #16
     8be:	b29b      	uxth	r3, r3
     8c0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     8c4:	4b26      	ldr	r3, [pc, #152]	; (960 <am_util_faultisr_collect_data+0xe0>)
     8c6:	681b      	ldr	r3, [r3, #0]
     8c8:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     8ca:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     8ce:	b2db      	uxtb	r3, r3
     8d0:	f003 0302 	and.w	r3, r3, #2
     8d4:	2b00      	cmp	r3, #0
     8d6:	d005      	beq.n	8e4 <am_util_faultisr_collect_data+0x64>
     8d8:	6879      	ldr	r1, [r7, #4]
     8da:	2006      	movs	r0, #6
     8dc:	f7ff ffca 	bl	874 <getStackedReg>
     8e0:	4603      	mov	r3, r0
     8e2:	e001      	b.n	8e8 <am_util_faultisr_collect_data+0x68>
     8e4:	f04f 33ff 	mov.w	r3, #4294967295
     8e8:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     8ea:	6879      	ldr	r1, [r7, #4]
     8ec:	2000      	movs	r0, #0
     8ee:	f7ff ffc1 	bl	874 <getStackedReg>
     8f2:	4603      	mov	r3, r0
     8f4:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     8f6:	6879      	ldr	r1, [r7, #4]
     8f8:	2001      	movs	r0, #1
     8fa:	f7ff ffbb 	bl	874 <getStackedReg>
     8fe:	4603      	mov	r3, r0
     900:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     902:	6879      	ldr	r1, [r7, #4]
     904:	2002      	movs	r0, #2
     906:	f7ff ffb5 	bl	874 <getStackedReg>
     90a:	4603      	mov	r3, r0
     90c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     90e:	6879      	ldr	r1, [r7, #4]
     910:	2003      	movs	r0, #3
     912:	f7ff ffaf 	bl	874 <getStackedReg>
     916:	4603      	mov	r3, r0
     918:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     91a:	6879      	ldr	r1, [r7, #4]
     91c:	2004      	movs	r0, #4
     91e:	f7ff ffa9 	bl	874 <getStackedReg>
     922:	4603      	mov	r3, r0
     924:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     926:	6879      	ldr	r1, [r7, #4]
     928:	2005      	movs	r0, #5
     92a:	f7ff ffa3 	bl	874 <getStackedReg>
     92e:	4603      	mov	r3, r0
     930:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     932:	6879      	ldr	r1, [r7, #4]
     934:	2006      	movs	r0, #6
     936:	f7ff ff9d 	bl	874 <getStackedReg>
     93a:	4603      	mov	r3, r0
     93c:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     93e:	6879      	ldr	r1, [r7, #4]
     940:	2007      	movs	r0, #7
     942:	f7ff ff97 	bl	874 <getStackedReg>
     946:	4603      	mov	r3, r0
     948:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     94a:	f107 030c 	add.w	r3, r7, #12
     94e:	4618      	mov	r0, r3
     950:	f001 f898 	bl	1a84 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     954:	2300      	movs	r3, #0
     956:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
     958:	e7fe      	b.n	958 <am_util_faultisr_collect_data+0xd8>
     95a:	bf00      	nop
     95c:	e000ed28 	.word	0xe000ed28
     960:	e000ed38 	.word	0xe000ed38

00000964 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     964:	b480      	push	{r7}
     966:	b083      	sub	sp, #12
     968:	af00      	add	r7, sp, #0
     96a:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     96c:	4a04      	ldr	r2, [pc, #16]	; (980 <am_util_stdio_printf_init+0x1c>)
     96e:	687b      	ldr	r3, [r7, #4]
     970:	6013      	str	r3, [r2, #0]
}
     972:	bf00      	nop
     974:	370c      	adds	r7, #12
     976:	46bd      	mov	sp, r7
     978:	f85d 7b04 	ldr.w	r7, [sp], #4
     97c:	4770      	bx	lr
     97e:	bf00      	nop
     980:	1000114c 	.word	0x1000114c

00000984 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     984:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     988:	b096      	sub	sp, #88	; 0x58
     98a:	af00      	add	r7, sp, #0
     98c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     990:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     994:	0025      	movs	r5, r4
     996:	2600      	movs	r6, #0
     998:	ea55 0306 	orrs.w	r3, r5, r6
     99c:	f000 80a0 	beq.w	ae0 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     9a0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     9a4:	0862      	lsrs	r2, r4, #1
     9a6:	ea4f 0133 	mov.w	r1, r3, rrx
     9aa:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     9ae:	ea4f 0893 	mov.w	r8, r3, lsr #2
     9b2:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     9b6:	ea4f 0994 	mov.w	r9, r4, lsr #2
     9ba:	eb11 0308 	adds.w	r3, r1, r8
     9be:	eb42 0409 	adc.w	r4, r2, r9
     9c2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     9c6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     9ca:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     9ce:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     9d2:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     9d6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     9da:	eb13 030a 	adds.w	r3, r3, sl
     9de:	eb44 040b 	adc.w	r4, r4, fp
     9e2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     9e6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     9ea:	0a1a      	lsrs	r2, r3, #8
     9ec:	62ba      	str	r2, [r7, #40]	; 0x28
     9ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
     9f0:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     9f4:	62ba      	str	r2, [r7, #40]	; 0x28
     9f6:	0a23      	lsrs	r3, r4, #8
     9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
     9fa:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     9fe:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     a02:	18c9      	adds	r1, r1, r3
     a04:	eb42 0204 	adc.w	r2, r2, r4
     a08:	460b      	mov	r3, r1
     a0a:	4614      	mov	r4, r2
     a0c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     a10:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a14:	0c1a      	lsrs	r2, r3, #16
     a16:	623a      	str	r2, [r7, #32]
     a18:	6a3a      	ldr	r2, [r7, #32]
     a1a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     a1e:	623a      	str	r2, [r7, #32]
     a20:	0c23      	lsrs	r3, r4, #16
     a22:	627b      	str	r3, [r7, #36]	; 0x24
     a24:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a28:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     a2c:	18c9      	adds	r1, r1, r3
     a2e:	eb42 0204 	adc.w	r2, r2, r4
     a32:	460b      	mov	r3, r1
     a34:	4614      	mov	r4, r2
     a36:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     a3a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a3e:	0023      	movs	r3, r4
     a40:	603b      	str	r3, [r7, #0]
     a42:	2300      	movs	r3, #0
     a44:	607b      	str	r3, [r7, #4]
     a46:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a4a:	e897 0006 	ldmia.w	r7, {r1, r2}
     a4e:	18c9      	adds	r1, r1, r3
     a50:	eb42 0204 	adc.w	r2, r2, r4
     a54:	460b      	mov	r3, r1
     a56:	4614      	mov	r4, r2
     a58:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     a5c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a60:	08da      	lsrs	r2, r3, #3
     a62:	613a      	str	r2, [r7, #16]
     a64:	693a      	ldr	r2, [r7, #16]
     a66:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     a6a:	613a      	str	r2, [r7, #16]
     a6c:	08e3      	lsrs	r3, r4, #3
     a6e:	617b      	str	r3, [r7, #20]
     a70:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     a74:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     a78:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
     a7c:	460b      	mov	r3, r1
     a7e:	4614      	mov	r4, r2
     a80:	00a0      	lsls	r0, r4, #2
     a82:	60f8      	str	r0, [r7, #12]
     a84:	68f8      	ldr	r0, [r7, #12]
     a86:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
     a8a:	60f8      	str	r0, [r7, #12]
     a8c:	009b      	lsls	r3, r3, #2
     a8e:	60bb      	str	r3, [r7, #8]
     a90:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     a94:	185b      	adds	r3, r3, r1
     a96:	eb44 0402 	adc.w	r4, r4, r2
     a9a:	18db      	adds	r3, r3, r3
     a9c:	eb44 0404 	adc.w	r4, r4, r4
     aa0:	4619      	mov	r1, r3
     aa2:	4622      	mov	r2, r4
     aa4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     aa8:	1a5b      	subs	r3, r3, r1
     aaa:	eb64 0402 	sbc.w	r4, r4, r2
     aae:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     ab2:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     ab6:	3306      	adds	r3, #6
     ab8:	f144 0400 	adc.w	r4, r4, #0
     abc:	091a      	lsrs	r2, r3, #4
     abe:	61ba      	str	r2, [r7, #24]
     ac0:	69ba      	ldr	r2, [r7, #24]
     ac2:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     ac6:	61ba      	str	r2, [r7, #24]
     ac8:	0923      	lsrs	r3, r4, #4
     aca:	61fb      	str	r3, [r7, #28]
     acc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     ad0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     ad4:	18c9      	adds	r1, r1, r3
     ad6:	eb42 0204 	adc.w	r2, r2, r4
     ada:	460b      	mov	r3, r1
     adc:	4614      	mov	r4, r2
     ade:	e029      	b.n	b34 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ae2:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     ae6:	085a      	lsrs	r2, r3, #1
     ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     aea:	089b      	lsrs	r3, r3, #2
     aec:	4413      	add	r3, r2
     aee:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     af2:	091b      	lsrs	r3, r3, #4
     af4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     af6:	4413      	add	r3, r2
     af8:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     afc:	0a1b      	lsrs	r3, r3, #8
     afe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     b00:	4413      	add	r3, r2
     b02:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     b06:	0c1b      	lsrs	r3, r3, #16
     b08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     b0a:	4413      	add	r3, r2
     b0c:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     b10:	08db      	lsrs	r3, r3, #3
     b12:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     b14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     b16:	4613      	mov	r3, r2
     b18:	009b      	lsls	r3, r3, #2
     b1a:	4413      	add	r3, r2
     b1c:	005b      	lsls	r3, r3, #1
     b1e:	461a      	mov	r2, r3
     b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     b22:	1a9b      	subs	r3, r3, r2
     b24:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b28:	3306      	adds	r3, #6
     b2a:	091a      	lsrs	r2, r3, #4
     b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     b2e:	4413      	add	r3, r2
     b30:	f04f 0400 	mov.w	r4, #0
    }
}
     b34:	4618      	mov	r0, r3
     b36:	4621      	mov	r1, r4
     b38:	3758      	adds	r7, #88	; 0x58
     b3a:	46bd      	mov	sp, r7
     b3c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     b40:	4770      	bx	lr

00000b42 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     b42:	b590      	push	{r4, r7, lr}
     b44:	b085      	sub	sp, #20
     b46:	af00      	add	r7, sp, #0
     b48:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     b4c:	683a      	ldr	r2, [r7, #0]
     b4e:	687b      	ldr	r3, [r7, #4]
     b50:	4313      	orrs	r3, r2
     b52:	2b00      	cmp	r3, #0
     b54:	bf0c      	ite	eq
     b56:	2301      	moveq	r3, #1
     b58:	2300      	movne	r3, #0
     b5a:	b2db      	uxtb	r3, r3
     b5c:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     b5e:	e008      	b.n	b72 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     b60:	e9d7 0100 	ldrd	r0, r1, [r7]
     b64:	f7ff ff0e 	bl	984 <divu64_10>
     b68:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     b6c:	68fb      	ldr	r3, [r7, #12]
     b6e:	3301      	adds	r3, #1
     b70:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
     b72:	e897 0018 	ldmia.w	r7, {r3, r4}
     b76:	4323      	orrs	r3, r4
     b78:	d1f2      	bne.n	b60 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
     b7a:	68fb      	ldr	r3, [r7, #12]
}
     b7c:	4618      	mov	r0, r3
     b7e:	3714      	adds	r7, #20
     b80:	46bd      	mov	sp, r7
     b82:	bd90      	pop	{r4, r7, pc}

00000b84 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     b84:	b590      	push	{r4, r7, lr}
     b86:	b083      	sub	sp, #12
     b88:	af00      	add	r7, sp, #0
     b8a:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     b8e:	e897 0018 	ldmia.w	r7, {r3, r4}
     b92:	2b00      	cmp	r3, #0
     b94:	f174 0300 	sbcs.w	r3, r4, #0
     b98:	da06      	bge.n	ba8 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     b9a:	e897 0018 	ldmia.w	r7, {r3, r4}
     b9e:	425b      	negs	r3, r3
     ba0:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     ba4:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     ba8:	e897 0018 	ldmia.w	r7, {r3, r4}
     bac:	4618      	mov	r0, r3
     bae:	4621      	mov	r1, r4
     bb0:	f7ff ffc7 	bl	b42 <ndigits_in_u64>
     bb4:	4603      	mov	r3, r0
}
     bb6:	4618      	mov	r0, r3
     bb8:	370c      	adds	r7, #12
     bba:	46bd      	mov	sp, r7
     bbc:	bd90      	pop	{r4, r7, pc}

00000bbe <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     bbe:	b490      	push	{r4, r7}
     bc0:	b084      	sub	sp, #16
     bc2:	af00      	add	r7, sp, #0
     bc4:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     bc8:	6839      	ldr	r1, [r7, #0]
     bca:	687a      	ldr	r2, [r7, #4]
     bcc:	430a      	orrs	r2, r1
     bce:	2a00      	cmp	r2, #0
     bd0:	bf0c      	ite	eq
     bd2:	2201      	moveq	r2, #1
     bd4:	2200      	movne	r2, #0
     bd6:	b2d2      	uxtb	r2, r2
     bd8:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     bda:	e00a      	b.n	bf2 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     bdc:	e897 0006 	ldmia.w	r7, {r1, r2}
     be0:	090b      	lsrs	r3, r1, #4
     be2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     be6:	0914      	lsrs	r4, r2, #4
     be8:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     bec:	68fa      	ldr	r2, [r7, #12]
     bee:	3201      	adds	r2, #1
     bf0:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
     bf2:	e897 0006 	ldmia.w	r7, {r1, r2}
     bf6:	430a      	orrs	r2, r1
     bf8:	d1f0      	bne.n	bdc <ndigits_in_hex+0x1e>
    }

    return iDigits;
     bfa:	68fb      	ldr	r3, [r7, #12]
}
     bfc:	4618      	mov	r0, r3
     bfe:	3710      	adds	r7, #16
     c00:	46bd      	mov	sp, r7
     c02:	bc90      	pop	{r4, r7}
     c04:	4770      	bx	lr

00000c06 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     c06:	b480      	push	{r7}
     c08:	b087      	sub	sp, #28
     c0a:	af00      	add	r7, sp, #0
     c0c:	6078      	str	r0, [r7, #4]
     c0e:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     c10:	2300      	movs	r3, #0
     c12:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     c14:	2300      	movs	r3, #0
     c16:	613b      	str	r3, [r7, #16]
     c18:	2300      	movs	r3, #0
     c1a:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     c1c:	687b      	ldr	r3, [r7, #4]
     c1e:	781b      	ldrb	r3, [r3, #0]
     c20:	2b2d      	cmp	r3, #45	; 0x2d
     c22:	d11b      	bne.n	c5c <decstr_to_int+0x56>
    {
        bNeg = true;
     c24:	2301      	movs	r3, #1
     c26:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     c28:	687b      	ldr	r3, [r7, #4]
     c2a:	3301      	adds	r3, #1
     c2c:	607b      	str	r3, [r7, #4]
        uCnt++;
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	3301      	adds	r3, #1
     c32:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     c34:	e012      	b.n	c5c <decstr_to_int+0x56>
    {
        ++uCnt;
     c36:	68fb      	ldr	r3, [r7, #12]
     c38:	3301      	adds	r3, #1
     c3a:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     c3c:	693a      	ldr	r2, [r7, #16]
     c3e:	4613      	mov	r3, r2
     c40:	009b      	lsls	r3, r3, #2
     c42:	4413      	add	r3, r2
     c44:	005b      	lsls	r3, r3, #1
     c46:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     c48:	687b      	ldr	r3, [r7, #4]
     c4a:	781b      	ldrb	r3, [r3, #0]
     c4c:	461a      	mov	r2, r3
     c4e:	693b      	ldr	r3, [r7, #16]
     c50:	4413      	add	r3, r2
     c52:	3b30      	subs	r3, #48	; 0x30
     c54:	613b      	str	r3, [r7, #16]
        pcStr++;
     c56:	687b      	ldr	r3, [r7, #4]
     c58:	3301      	adds	r3, #1
     c5a:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     c5c:	687b      	ldr	r3, [r7, #4]
     c5e:	781b      	ldrb	r3, [r3, #0]
     c60:	2b2f      	cmp	r3, #47	; 0x2f
     c62:	d903      	bls.n	c6c <decstr_to_int+0x66>
     c64:	687b      	ldr	r3, [r7, #4]
     c66:	781b      	ldrb	r3, [r3, #0]
     c68:	2b39      	cmp	r3, #57	; 0x39
     c6a:	d9e4      	bls.n	c36 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
     c6c:	683b      	ldr	r3, [r7, #0]
     c6e:	2b00      	cmp	r3, #0
     c70:	d002      	beq.n	c78 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     c72:	683b      	ldr	r3, [r7, #0]
     c74:	68fa      	ldr	r2, [r7, #12]
     c76:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     c78:	7dfb      	ldrb	r3, [r7, #23]
     c7a:	2b00      	cmp	r3, #0
     c7c:	d002      	beq.n	c84 <decstr_to_int+0x7e>
     c7e:	693b      	ldr	r3, [r7, #16]
     c80:	425b      	negs	r3, r3
     c82:	e000      	b.n	c86 <decstr_to_int+0x80>
     c84:	693b      	ldr	r3, [r7, #16]
}
     c86:	4618      	mov	r0, r3
     c88:	371c      	adds	r7, #28
     c8a:	46bd      	mov	sp, r7
     c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     c90:	4770      	bx	lr

00000c92 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     c92:	b590      	push	{r4, r7, lr}
     c94:	b091      	sub	sp, #68	; 0x44
     c96:	af00      	add	r7, sp, #0
     c98:	e9c7 0102 	strd	r0, r1, [r7, #8]
     c9c:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     c9e:	2300      	movs	r3, #0
     ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
     ca2:	2300      	movs	r3, #0
     ca4:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     ca6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     caa:	f7ff fe6b 	bl	984 <divu64_10>
     cae:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     cb2:	68b9      	ldr	r1, [r7, #8]
     cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     cb6:	4613      	mov	r3, r2
     cb8:	009b      	lsls	r3, r3, #2
     cba:	4413      	add	r3, r2
     cbc:	005b      	lsls	r3, r3, #1
     cbe:	1acb      	subs	r3, r1, r3
     cc0:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     cc4:	1c5a      	adds	r2, r3, #1
     cc6:	63fa      	str	r2, [r7, #60]	; 0x3c
     cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     cca:	b2d2      	uxtb	r2, r2
     ccc:	3230      	adds	r2, #48	; 0x30
     cce:	b2d2      	uxtb	r2, r2
     cd0:	f107 0140 	add.w	r1, r7, #64	; 0x40
     cd4:	440b      	add	r3, r1
     cd6:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     cda:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     cde:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     ce2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     ce6:	4323      	orrs	r3, r4
     ce8:	d1dd      	bne.n	ca6 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     cec:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	2b00      	cmp	r3, #0
     cf2:	d011      	beq.n	d18 <uint64_to_str+0x86>
    {
        while ( ix-- )
     cf4:	e008      	b.n	d08 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	1c5a      	adds	r2, r3, #1
     cfa:	607a      	str	r2, [r7, #4]
     cfc:	f107 0110 	add.w	r1, r7, #16
     d00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     d02:	440a      	add	r2, r1
     d04:	7812      	ldrb	r2, [r2, #0]
     d06:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
     d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d0a:	1e5a      	subs	r2, r3, #1
     d0c:	63fa      	str	r2, [r7, #60]	; 0x3c
     d0e:	2b00      	cmp	r3, #0
     d10:	d1f1      	bne.n	cf6 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     d12:	687b      	ldr	r3, [r7, #4]
     d14:	2200      	movs	r2, #0
     d16:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     d1a:	4618      	mov	r0, r3
     d1c:	3744      	adds	r7, #68	; 0x44
     d1e:	46bd      	mov	sp, r7
     d20:	bd90      	pop	{r4, r7, pc}

00000d22 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     d22:	b4b0      	push	{r4, r5, r7}
     d24:	b08d      	sub	sp, #52	; 0x34
     d26:	af00      	add	r7, sp, #0
     d28:	e9c7 0102 	strd	r0, r1, [r7, #8]
     d2c:	607a      	str	r2, [r7, #4]
     d2e:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     d30:	2300      	movs	r3, #0
     d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     d34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     d38:	4313      	orrs	r3, r2
     d3a:	d131      	bne.n	da0 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d3e:	1c5a      	adds	r2, r3, #1
     d40:	62fa      	str	r2, [r7, #44]	; 0x2c
     d42:	f107 0230 	add.w	r2, r7, #48	; 0x30
     d46:	4413      	add	r3, r2
     d48:	2230      	movs	r2, #48	; 0x30
     d4a:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     d4e:	e027      	b.n	da0 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     d50:	7a3b      	ldrb	r3, [r7, #8]
     d52:	f003 030f 	and.w	r3, r3, #15
     d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     d5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     d5e:	2b09      	cmp	r3, #9
     d60:	d90a      	bls.n	d78 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     d62:	78fb      	ldrb	r3, [r7, #3]
     d64:	2b00      	cmp	r3, #0
     d66:	d001      	beq.n	d6c <uint64_to_hexstr+0x4a>
     d68:	2227      	movs	r2, #39	; 0x27
     d6a:	e000      	b.n	d6e <uint64_to_hexstr+0x4c>
     d6c:	2207      	movs	r2, #7
     d6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     d72:	4413      	add	r3, r2
     d74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d7a:	1c5a      	adds	r2, r3, #1
     d7c:	62fa      	str	r2, [r7, #44]	; 0x2c
     d7e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     d82:	3230      	adds	r2, #48	; 0x30
     d84:	b2d2      	uxtb	r2, r2
     d86:	f107 0130 	add.w	r1, r7, #48	; 0x30
     d8a:	440b      	add	r3, r1
     d8c:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     d90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     d94:	0914      	lsrs	r4, r2, #4
     d96:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     d9a:	091d      	lsrs	r5, r3, #4
     d9c:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
     da0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     da4:	4313      	orrs	r3, r2
     da6:	d1d3      	bne.n	d50 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     daa:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     dac:	687b      	ldr	r3, [r7, #4]
     dae:	2b00      	cmp	r3, #0
     db0:	d011      	beq.n	dd6 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     db2:	e008      	b.n	dc6 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     db4:	687b      	ldr	r3, [r7, #4]
     db6:	1c5a      	adds	r2, r3, #1
     db8:	607a      	str	r2, [r7, #4]
     dba:	f107 0110 	add.w	r1, r7, #16
     dbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     dc0:	440a      	add	r2, r1
     dc2:	7812      	ldrb	r2, [r2, #0]
     dc4:	701a      	strb	r2, [r3, #0]
        while (ix--)
     dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     dc8:	1e5a      	subs	r2, r3, #1
     dca:	62fa      	str	r2, [r7, #44]	; 0x2c
     dcc:	2b00      	cmp	r3, #0
     dce:	d1f1      	bne.n	db4 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     dd0:	687b      	ldr	r3, [r7, #4]
     dd2:	2200      	movs	r2, #0
     dd4:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     dd8:	4618      	mov	r0, r3
     dda:	3734      	adds	r7, #52	; 0x34
     ddc:	46bd      	mov	sp, r7
     dde:	bcb0      	pop	{r4, r5, r7}
     de0:	4770      	bx	lr

00000de2 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     de2:	b480      	push	{r7}
     de4:	b085      	sub	sp, #20
     de6:	af00      	add	r7, sp, #0
     de8:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     dea:	2300      	movs	r3, #0
     dec:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     dee:	687b      	ldr	r3, [r7, #4]
     df0:	2b00      	cmp	r3, #0
     df2:	d104      	bne.n	dfe <simple_strlen+0x1c>
    {
        return ui32RetVal;
     df4:	68fb      	ldr	r3, [r7, #12]
     df6:	e009      	b.n	e0c <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     df8:	68fb      	ldr	r3, [r7, #12]
     dfa:	3301      	adds	r3, #1
     dfc:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
     dfe:	687b      	ldr	r3, [r7, #4]
     e00:	1c5a      	adds	r2, r3, #1
     e02:	607a      	str	r2, [r7, #4]
     e04:	781b      	ldrb	r3, [r3, #0]
     e06:	2b00      	cmp	r3, #0
     e08:	d1f6      	bne.n	df8 <simple_strlen+0x16>
    }
    return ui32RetVal;
     e0a:	68fb      	ldr	r3, [r7, #12]
}
     e0c:	4618      	mov	r0, r3
     e0e:	3714      	adds	r7, #20
     e10:	46bd      	mov	sp, r7
     e12:	f85d 7b04 	ldr.w	r7, [sp], #4
     e16:	4770      	bx	lr

00000e18 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     e18:	b480      	push	{r7}
     e1a:	b087      	sub	sp, #28
     e1c:	af00      	add	r7, sp, #0
     e1e:	60f8      	str	r0, [r7, #12]
     e20:	460b      	mov	r3, r1
     e22:	607a      	str	r2, [r7, #4]
     e24:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     e26:	2300      	movs	r3, #0
     e28:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     e2a:	687b      	ldr	r3, [r7, #4]
     e2c:	2b00      	cmp	r3, #0
     e2e:	dc0c      	bgt.n	e4a <padbuffer+0x32>
    {
        return i32Cnt;
     e30:	697b      	ldr	r3, [r7, #20]
     e32:	e010      	b.n	e56 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     e34:	68fb      	ldr	r3, [r7, #12]
     e36:	2b00      	cmp	r3, #0
     e38:	d004      	beq.n	e44 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     e3a:	68fb      	ldr	r3, [r7, #12]
     e3c:	1c5a      	adds	r2, r3, #1
     e3e:	60fa      	str	r2, [r7, #12]
     e40:	7afa      	ldrb	r2, [r7, #11]
     e42:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     e44:	697b      	ldr	r3, [r7, #20]
     e46:	3301      	adds	r3, #1
     e48:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
     e4a:	687b      	ldr	r3, [r7, #4]
     e4c:	1e5a      	subs	r2, r3, #1
     e4e:	607a      	str	r2, [r7, #4]
     e50:	2b00      	cmp	r3, #0
     e52:	d1ef      	bne.n	e34 <padbuffer+0x1c>
    }

    return i32Cnt;
     e54:	697b      	ldr	r3, [r7, #20]
}
     e56:	4618      	mov	r0, r3
     e58:	371c      	adds	r7, #28
     e5a:	46bd      	mov	sp, r7
     e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
     e60:	4770      	bx	lr
	...

00000e64 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     e64:	b590      	push	{r4, r7, lr}
     e66:	b08f      	sub	sp, #60	; 0x3c
     e68:	af00      	add	r7, sp, #0
     e6a:	60f8      	str	r0, [r7, #12]
     e6c:	60b9      	str	r1, [r7, #8]
     e6e:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
     e70:	68bb      	ldr	r3, [r7, #8]
     e72:	681b      	ldr	r3, [r3, #0]
     e74:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
     e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e78:	2b03      	cmp	r3, #3
     e7a:	dc02      	bgt.n	e82 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     e7c:	f06f 0302 	mvn.w	r3, #2
     e80:	e0e7      	b.n	1052 <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
     e82:	edd7 7a03 	vldr	s15, [r7, #12]
     e86:	eef5 7a40 	vcmp.f32	s15, #0.0
     e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e8e:	d104      	bne.n	e9a <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     e90:	68bb      	ldr	r3, [r7, #8]
     e92:	4a72      	ldr	r2, [pc, #456]	; (105c <ftoa+0x1f8>)
     e94:	601a      	str	r2, [r3, #0]
        return 3;
     e96:	2303      	movs	r3, #3
     e98:	e0db      	b.n	1052 <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
     e9a:	68bb      	ldr	r3, [r7, #8]
     e9c:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
     e9e:	68fb      	ldr	r3, [r7, #12]
     ea0:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     ea2:	693b      	ldr	r3, [r7, #16]
     ea4:	15db      	asrs	r3, r3, #23
     ea6:	b2db      	uxtb	r3, r3
     ea8:	3b7f      	subs	r3, #127	; 0x7f
     eaa:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     eac:	693b      	ldr	r3, [r7, #16]
     eae:	f3c3 0316 	ubfx	r3, r3, #0, #23
     eb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     eb6:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
     eb8:	2300      	movs	r3, #0
     eba:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     ebc:	2300      	movs	r3, #0
     ebe:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     ec0:	69fb      	ldr	r3, [r7, #28]
     ec2:	2b1e      	cmp	r3, #30
     ec4:	dd02      	ble.n	ecc <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     ec6:	f06f 0301 	mvn.w	r3, #1
     eca:	e0c2      	b.n	1052 <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
     ecc:	69fb      	ldr	r3, [r7, #28]
     ece:	f113 0f17 	cmn.w	r3, #23
     ed2:	da02      	bge.n	eda <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     ed4:	f04f 33ff 	mov.w	r3, #4294967295
     ed8:	e0bb      	b.n	1052 <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
     eda:	69fb      	ldr	r3, [r7, #28]
     edc:	2b16      	cmp	r3, #22
     ede:	dd06      	ble.n	eee <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
     ee0:	69fb      	ldr	r3, [r7, #28]
     ee2:	3b17      	subs	r3, #23
     ee4:	69ba      	ldr	r2, [r7, #24]
     ee6:	fa02 f303 	lsl.w	r3, r2, r3
     eea:	637b      	str	r3, [r7, #52]	; 0x34
     eec:	e01a      	b.n	f24 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     eee:	69fb      	ldr	r3, [r7, #28]
     ef0:	2b00      	cmp	r3, #0
     ef2:	db0f      	blt.n	f14 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
     ef4:	69fb      	ldr	r3, [r7, #28]
     ef6:	f1c3 0317 	rsb	r3, r3, #23
     efa:	69ba      	ldr	r2, [r7, #24]
     efc:	fa42 f303 	asr.w	r3, r2, r3
     f00:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
     f02:	69fb      	ldr	r3, [r7, #28]
     f04:	3301      	adds	r3, #1
     f06:	69ba      	ldr	r2, [r7, #24]
     f08:	fa02 f303 	lsl.w	r3, r2, r3
     f0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     f10:	633b      	str	r3, [r7, #48]	; 0x30
     f12:	e007      	b.n	f24 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
     f14:	69bb      	ldr	r3, [r7, #24]
     f16:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     f1a:	69fb      	ldr	r3, [r7, #28]
     f1c:	43db      	mvns	r3, r3
     f1e:	fa42 f303 	asr.w	r3, r2, r3
     f22:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     f24:	693b      	ldr	r3, [r7, #16]
     f26:	2b00      	cmp	r3, #0
     f28:	da04      	bge.n	f34 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     f2a:	68bb      	ldr	r3, [r7, #8]
     f2c:	1c5a      	adds	r2, r3, #1
     f2e:	60ba      	str	r2, [r7, #8]
     f30:	222d      	movs	r2, #45	; 0x2d
     f32:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f36:	2b00      	cmp	r3, #0
     f38:	d105      	bne.n	f46 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     f3a:	68bb      	ldr	r3, [r7, #8]
     f3c:	1c5a      	adds	r2, r3, #1
     f3e:	60ba      	str	r2, [r7, #8]
     f40:	2230      	movs	r2, #48	; 0x30
     f42:	701a      	strb	r2, [r3, #0]
     f44:	e021      	b.n	f8a <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f48:	2b00      	cmp	r3, #0
     f4a:	dd08      	ble.n	f5e <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f4e:	ea4f 74e3 	mov.w	r4, r3, asr #31
     f52:	68ba      	ldr	r2, [r7, #8]
     f54:	4618      	mov	r0, r3
     f56:	4621      	mov	r1, r4
     f58:	f7ff fe9b 	bl	c92 <uint64_to_str>
     f5c:	e011      	b.n	f82 <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     f5e:	68bb      	ldr	r3, [r7, #8]
     f60:	1c5a      	adds	r2, r3, #1
     f62:	60ba      	str	r2, [r7, #8]
     f64:	222d      	movs	r2, #45	; 0x2d
     f66:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f6a:	425b      	negs	r3, r3
     f6c:	ea4f 74e3 	mov.w	r4, r3, asr #31
     f70:	68ba      	ldr	r2, [r7, #8]
     f72:	4618      	mov	r0, r3
     f74:	4621      	mov	r1, r4
     f76:	f7ff fe8c 	bl	c92 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     f7a:	e002      	b.n	f82 <ftoa+0x11e>
        {
            pcBuf++;
     f7c:	68bb      	ldr	r3, [r7, #8]
     f7e:	3301      	adds	r3, #1
     f80:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
     f82:	68bb      	ldr	r3, [r7, #8]
     f84:	781b      	ldrb	r3, [r3, #0]
     f86:	2b00      	cmp	r3, #0
     f88:	d1f8      	bne.n	f7c <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     f8a:	68bb      	ldr	r3, [r7, #8]
     f8c:	1c5a      	adds	r2, r3, #1
     f8e:	60ba      	str	r2, [r7, #8]
     f90:	222e      	movs	r2, #46	; 0x2e
     f92:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f96:	2b00      	cmp	r3, #0
     f98:	d105      	bne.n	fa6 <ftoa+0x142>
    {
        *pcBuf++ = '0';
     f9a:	68bb      	ldr	r3, [r7, #8]
     f9c:	1c5a      	adds	r2, r3, #1
     f9e:	60ba      	str	r2, [r7, #8]
     fa0:	2230      	movs	r2, #48	; 0x30
     fa2:	701a      	strb	r2, [r3, #0]
     fa4:	e04f      	b.n	1046 <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     fa6:	68ba      	ldr	r2, [r7, #8]
     fa8:	6a3b      	ldr	r3, [r7, #32]
     faa:	1ad3      	subs	r3, r2, r3
     fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     fae:	1ad3      	subs	r3, r2, r3
     fb0:	3b01      	subs	r3, #1
     fb2:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     fb4:	697a      	ldr	r2, [r7, #20]
     fb6:	687b      	ldr	r3, [r7, #4]
     fb8:	4293      	cmp	r3, r2
     fba:	bfa8      	it	ge
     fbc:	4613      	movge	r3, r2
     fbe:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
     fc0:	2300      	movs	r3, #0
     fc2:	62bb      	str	r3, [r7, #40]	; 0x28
     fc4:	e015      	b.n	ff2 <ftoa+0x18e>
        {
            i32FracPart *= 10;
     fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     fc8:	4613      	mov	r3, r2
     fca:	009b      	lsls	r3, r3, #2
     fcc:	4413      	add	r3, r2
     fce:	005b      	lsls	r3, r3, #1
     fd0:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     fd2:	68bb      	ldr	r3, [r7, #8]
     fd4:	1c5a      	adds	r2, r3, #1
     fd6:	60ba      	str	r2, [r7, #8]
     fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     fda:	1612      	asrs	r2, r2, #24
     fdc:	b2d2      	uxtb	r2, r2
     fde:	3230      	adds	r2, #48	; 0x30
     fe0:	b2d2      	uxtb	r2, r2
     fe2:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     fe6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     fea:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
     fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
     fee:	3301      	adds	r3, #1
     ff0:	62bb      	str	r3, [r7, #40]	; 0x28
     ff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
     ff4:	697b      	ldr	r3, [r7, #20]
     ff6:	429a      	cmp	r2, r3
     ff8:	dbe5      	blt.n	fc6 <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
     ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     ffc:	4613      	mov	r3, r2
     ffe:	009b      	lsls	r3, r3, #2
    1000:	4413      	add	r3, r2
    1002:	005b      	lsls	r3, r3, #1
    1004:	161b      	asrs	r3, r3, #24
    1006:	2b04      	cmp	r3, #4
    1008:	dd1d      	ble.n	1046 <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    100a:	68bb      	ldr	r3, [r7, #8]
    100c:	3b01      	subs	r3, #1
    100e:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    1010:	e015      	b.n	103e <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
    1012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1014:	781b      	ldrb	r3, [r3, #0]
    1016:	2b2e      	cmp	r3, #46	; 0x2e
    1018:	d00e      	beq.n	1038 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
    101a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    101c:	781b      	ldrb	r3, [r3, #0]
    101e:	2b39      	cmp	r3, #57	; 0x39
    1020:	d103      	bne.n	102a <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
    1022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1024:	2230      	movs	r2, #48	; 0x30
    1026:	701a      	strb	r2, [r3, #0]
    1028:	e006      	b.n	1038 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
    102a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    102c:	781b      	ldrb	r3, [r3, #0]
    102e:	3301      	adds	r3, #1
    1030:	b2da      	uxtb	r2, r3
    1032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1034:	701a      	strb	r2, [r3, #0]
                    break;
    1036:	e006      	b.n	1046 <ftoa+0x1e2>
                }
                pcBuftmp--;
    1038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    103a:	3b01      	subs	r3, #1
    103c:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    103e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1040:	6a3b      	ldr	r3, [r7, #32]
    1042:	429a      	cmp	r2, r3
    1044:	d2e5      	bcs.n	1012 <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    1046:	68bb      	ldr	r3, [r7, #8]
    1048:	2200      	movs	r2, #0
    104a:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    104c:	68ba      	ldr	r2, [r7, #8]
    104e:	6a3b      	ldr	r3, [r7, #32]
    1050:	1ad3      	subs	r3, r2, r3
} // ftoa()
    1052:	4618      	mov	r0, r3
    1054:	373c      	adds	r7, #60	; 0x3c
    1056:	46bd      	mov	sp, r7
    1058:	bd90      	pop	{r4, r7, pc}
    105a:	bf00      	nop
    105c:	00302e30 	.word	0x00302e30

00001060 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    1060:	b590      	push	{r4, r7, lr}
    1062:	b095      	sub	sp, #84	; 0x54
    1064:	af00      	add	r7, sp, #0
    1066:	60f8      	str	r0, [r7, #12]
    1068:	60b9      	str	r1, [r7, #8]
    106a:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    106c:	2300      	movs	r3, #0
    106e:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    1070:	2300      	movs	r3, #0
    1072:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    1074:	e2e3      	b.n	163e <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    1076:	2306      	movs	r3, #6
    1078:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    107a:	68bb      	ldr	r3, [r7, #8]
    107c:	781b      	ldrb	r3, [r3, #0]
    107e:	2b25      	cmp	r3, #37	; 0x25
    1080:	d01f      	beq.n	10c2 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    1082:	68fb      	ldr	r3, [r7, #12]
    1084:	2b00      	cmp	r3, #0
    1086:	d015      	beq.n	10b4 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    1088:	68bb      	ldr	r3, [r7, #8]
    108a:	781b      	ldrb	r3, [r3, #0]
    108c:	2b0a      	cmp	r3, #10
    108e:	d10b      	bne.n	10a8 <am_util_stdio_vsprintf+0x48>
    1090:	4bb1      	ldr	r3, [pc, #708]	; (1358 <am_util_stdio_vsprintf+0x2f8>)
    1092:	781b      	ldrb	r3, [r3, #0]
    1094:	2b00      	cmp	r3, #0
    1096:	d007      	beq.n	10a8 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    1098:	68fb      	ldr	r3, [r7, #12]
    109a:	1c5a      	adds	r2, r3, #1
    109c:	60fa      	str	r2, [r7, #12]
    109e:	220d      	movs	r2, #13
    10a0:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    10a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10a4:	3301      	adds	r3, #1
    10a6:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    10a8:	68fb      	ldr	r3, [r7, #12]
    10aa:	1c5a      	adds	r2, r3, #1
    10ac:	60fa      	str	r2, [r7, #12]
    10ae:	68ba      	ldr	r2, [r7, #8]
    10b0:	7812      	ldrb	r2, [r2, #0]
    10b2:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    10b4:	68bb      	ldr	r3, [r7, #8]
    10b6:	3301      	adds	r3, #1
    10b8:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    10ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10bc:	3301      	adds	r3, #1
    10be:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    10c0:	e2bd      	b.n	163e <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    10c2:	68bb      	ldr	r3, [r7, #8]
    10c4:	3301      	adds	r3, #1
    10c6:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    10c8:	2300      	movs	r3, #0
    10ca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    10ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    10d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    10d6:	2320      	movs	r3, #32
    10d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    10dc:	68bb      	ldr	r3, [r7, #8]
    10de:	781b      	ldrb	r3, [r3, #0]
    10e0:	2b30      	cmp	r3, #48	; 0x30
    10e2:	d105      	bne.n	10f0 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    10e4:	2330      	movs	r3, #48	; 0x30
    10e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    10ea:	68bb      	ldr	r3, [r7, #8]
    10ec:	3301      	adds	r3, #1
    10ee:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    10f0:	f107 0310 	add.w	r3, r7, #16
    10f4:	4619      	mov	r1, r3
    10f6:	68b8      	ldr	r0, [r7, #8]
    10f8:	f7ff fd85 	bl	c06 <decstr_to_int>
    10fc:	4603      	mov	r3, r0
    10fe:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    1100:	693b      	ldr	r3, [r7, #16]
    1102:	68ba      	ldr	r2, [r7, #8]
    1104:	4413      	add	r3, r2
    1106:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    1108:	68bb      	ldr	r3, [r7, #8]
    110a:	781b      	ldrb	r3, [r3, #0]
    110c:	2b73      	cmp	r3, #115	; 0x73
    110e:	d005      	beq.n	111c <am_util_stdio_vsprintf+0xbc>
    1110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1112:	2b00      	cmp	r3, #0
    1114:	da02      	bge.n	111c <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    1116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1118:	425b      	negs	r3, r3
    111a:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    111c:	68bb      	ldr	r3, [r7, #8]
    111e:	781b      	ldrb	r3, [r3, #0]
    1120:	2b2e      	cmp	r3, #46	; 0x2e
    1122:	d10e      	bne.n	1142 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    1124:	68bb      	ldr	r3, [r7, #8]
    1126:	3301      	adds	r3, #1
    1128:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    112a:	f107 0310 	add.w	r3, r7, #16
    112e:	4619      	mov	r1, r3
    1130:	68b8      	ldr	r0, [r7, #8]
    1132:	f7ff fd68 	bl	c06 <decstr_to_int>
    1136:	4603      	mov	r3, r0
    1138:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    113a:	693b      	ldr	r3, [r7, #16]
    113c:	68ba      	ldr	r2, [r7, #8]
    113e:	4413      	add	r3, r2
    1140:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    1142:	68bb      	ldr	r3, [r7, #8]
    1144:	781b      	ldrb	r3, [r3, #0]
    1146:	2b6c      	cmp	r3, #108	; 0x6c
    1148:	d10c      	bne.n	1164 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    114a:	68bb      	ldr	r3, [r7, #8]
    114c:	3301      	adds	r3, #1
    114e:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    1150:	68bb      	ldr	r3, [r7, #8]
    1152:	781b      	ldrb	r3, [r3, #0]
    1154:	2b6c      	cmp	r3, #108	; 0x6c
    1156:	d105      	bne.n	1164 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    1158:	68bb      	ldr	r3, [r7, #8]
    115a:	3301      	adds	r3, #1
    115c:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    115e:	2301      	movs	r3, #1
    1160:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    1164:	68bb      	ldr	r3, [r7, #8]
    1166:	781b      	ldrb	r3, [r3, #0]
    1168:	3b46      	subs	r3, #70	; 0x46
    116a:	2b32      	cmp	r3, #50	; 0x32
    116c:	f200 8254 	bhi.w	1618 <am_util_stdio_vsprintf+0x5b8>
    1170:	a201      	add	r2, pc, #4	; (adr r2, 1178 <am_util_stdio_vsprintf+0x118>)
    1172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1176:	bf00      	nop
    1178:	000015a3 	.word	0x000015a3
    117c:	00001619 	.word	0x00001619
    1180:	00001619 	.word	0x00001619
    1184:	00001619 	.word	0x00001619
    1188:	00001619 	.word	0x00001619
    118c:	00001619 	.word	0x00001619
    1190:	00001619 	.word	0x00001619
    1194:	00001619 	.word	0x00001619
    1198:	00001619 	.word	0x00001619
    119c:	00001619 	.word	0x00001619
    11a0:	00001619 	.word	0x00001619
    11a4:	00001619 	.word	0x00001619
    11a8:	00001619 	.word	0x00001619
    11ac:	00001619 	.word	0x00001619
    11b0:	00001619 	.word	0x00001619
    11b4:	00001619 	.word	0x00001619
    11b8:	00001619 	.word	0x00001619
    11bc:	00001619 	.word	0x00001619
    11c0:	0000133f 	.word	0x0000133f
    11c4:	00001619 	.word	0x00001619
    11c8:	00001619 	.word	0x00001619
    11cc:	00001619 	.word	0x00001619
    11d0:	00001619 	.word	0x00001619
    11d4:	00001619 	.word	0x00001619
    11d8:	00001619 	.word	0x00001619
    11dc:	00001619 	.word	0x00001619
    11e0:	00001619 	.word	0x00001619
    11e4:	00001619 	.word	0x00001619
    11e8:	00001619 	.word	0x00001619
    11ec:	00001245 	.word	0x00001245
    11f0:	0000146b 	.word	0x0000146b
    11f4:	00001619 	.word	0x00001619
    11f8:	000015a3 	.word	0x000015a3
    11fc:	00001619 	.word	0x00001619
    1200:	00001619 	.word	0x00001619
    1204:	0000146b 	.word	0x0000146b
    1208:	00001619 	.word	0x00001619
    120c:	00001619 	.word	0x00001619
    1210:	00001619 	.word	0x00001619
    1214:	00001619 	.word	0x00001619
    1218:	00001619 	.word	0x00001619
    121c:	00001619 	.word	0x00001619
    1220:	00001619 	.word	0x00001619
    1224:	00001619 	.word	0x00001619
    1228:	00001619 	.word	0x00001619
    122c:	0000126b 	.word	0x0000126b
    1230:	00001619 	.word	0x00001619
    1234:	000013d9 	.word	0x000013d9
    1238:	00001619 	.word	0x00001619
    123c:	00001619 	.word	0x00001619
    1240:	00001339 	.word	0x00001339
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    1244:	687b      	ldr	r3, [r7, #4]
    1246:	1d1a      	adds	r2, r3, #4
    1248:	607a      	str	r2, [r7, #4]
    124a:	681b      	ldr	r3, [r3, #0]
    124c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    1250:	68fb      	ldr	r3, [r7, #12]
    1252:	2b00      	cmp	r3, #0
    1254:	d005      	beq.n	1262 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    1256:	68fb      	ldr	r3, [r7, #12]
    1258:	1c5a      	adds	r2, r3, #1
    125a:	60fa      	str	r2, [r7, #12]
    125c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    1260:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    1262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1264:	3301      	adds	r3, #1
    1266:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1268:	e1e6      	b.n	1638 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    126a:	687b      	ldr	r3, [r7, #4]
    126c:	1d1a      	adds	r2, r3, #4
    126e:	607a      	str	r2, [r7, #4]
    1270:	681b      	ldr	r3, [r3, #0]
    1272:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    1274:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    1276:	f7ff fdb4 	bl	de2 <simple_strlen>
    127a:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    127c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    127e:	2b00      	cmp	r3, #0
    1280:	dd2e      	ble.n	12e0 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    1282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1286:	429a      	cmp	r2, r3
    1288:	d22a      	bcs.n	12e0 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    128a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    128e:	1ad3      	subs	r3, r2, r3
    1290:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1292:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1296:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1298:	4619      	mov	r1, r3
    129a:	68f8      	ldr	r0, [r7, #12]
    129c:	f7ff fdbc 	bl	e18 <padbuffer>
    12a0:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    12a2:	68fb      	ldr	r3, [r7, #12]
    12a4:	2b00      	cmp	r3, #0
    12a6:	d001      	beq.n	12ac <am_util_stdio_vsprintf+0x24c>
    12a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12aa:	e000      	b.n	12ae <am_util_stdio_vsprintf+0x24e>
    12ac:	2300      	movs	r3, #0
    12ae:	68fa      	ldr	r2, [r7, #12]
    12b0:	4413      	add	r3, r2
    12b2:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    12b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    12b8:	4413      	add	r3, r2
    12ba:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    12bc:	2300      	movs	r3, #0
    12be:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    12c0:	e00e      	b.n	12e0 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    12c2:	68fb      	ldr	r3, [r7, #12]
    12c4:	2b00      	cmp	r3, #0
    12c6:	d005      	beq.n	12d4 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    12c8:	68fb      	ldr	r3, [r7, #12]
    12ca:	1c5a      	adds	r2, r3, #1
    12cc:	60fa      	str	r2, [r7, #12]
    12ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    12d0:	7812      	ldrb	r2, [r2, #0]
    12d2:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    12d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    12d6:	3301      	adds	r3, #1
    12d8:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    12da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    12dc:	3301      	adds	r3, #1
    12de:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    12e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    12e2:	781b      	ldrb	r3, [r3, #0]
    12e4:	2b00      	cmp	r3, #0
    12e6:	d1ec      	bne.n	12c2 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    12e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12ea:	2b00      	cmp	r3, #0
    12ec:	f000 81a1 	beq.w	1632 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    12f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12f2:	425b      	negs	r3, r3
    12f4:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    12f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    12fa:	429a      	cmp	r2, r3
    12fc:	f080 8199 	bcs.w	1632 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1300:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1304:	1ad3      	subs	r3, r2, r3
    1306:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1308:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    130c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    130e:	4619      	mov	r1, r3
    1310:	68f8      	ldr	r0, [r7, #12]
    1312:	f7ff fd81 	bl	e18 <padbuffer>
    1316:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    1318:	68fb      	ldr	r3, [r7, #12]
    131a:	2b00      	cmp	r3, #0
    131c:	d001      	beq.n	1322 <am_util_stdio_vsprintf+0x2c2>
    131e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1320:	e000      	b.n	1324 <am_util_stdio_vsprintf+0x2c4>
    1322:	2300      	movs	r3, #0
    1324:	68fa      	ldr	r2, [r7, #12]
    1326:	4413      	add	r3, r2
    1328:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    132a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    132c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    132e:	4413      	add	r3, r2
    1330:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1332:	2300      	movs	r3, #0
    1334:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    1336:	e17c      	b.n	1632 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    1338:	2301      	movs	r3, #1
    133a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    133e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1342:	2b00      	cmp	r3, #0
    1344:	d00a      	beq.n	135c <am_util_stdio_vsprintf+0x2fc>
    1346:	687b      	ldr	r3, [r7, #4]
    1348:	3307      	adds	r3, #7
    134a:	f023 0307 	bic.w	r3, r3, #7
    134e:	f103 0208 	add.w	r2, r3, #8
    1352:	607a      	str	r2, [r7, #4]
    1354:	cb18      	ldmia	r3, {r3, r4}
    1356:	e007      	b.n	1368 <am_util_stdio_vsprintf+0x308>
    1358:	10001138 	.word	0x10001138
                                      va_arg(pArgs, uint32_t);
    135c:	687b      	ldr	r3, [r7, #4]
    135e:	1d1a      	adds	r2, r3, #4
    1360:	607a      	str	r2, [r7, #4]
    1362:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1364:	f04f 0400 	mov.w	r4, #0
    1368:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    136c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    136e:	2b00      	cmp	r3, #0
    1370:	d01e      	beq.n	13b0 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    1372:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1376:	f7ff fc22 	bl	bbe <ndigits_in_hex>
    137a:	4602      	mov	r2, r0
    137c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    137e:	1a9b      	subs	r3, r3, r2
    1380:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1382:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1386:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1388:	4619      	mov	r1, r3
    138a:	68f8      	ldr	r0, [r7, #12]
    138c:	f7ff fd44 	bl	e18 <padbuffer>
    1390:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1392:	68fb      	ldr	r3, [r7, #12]
    1394:	2b00      	cmp	r3, #0
    1396:	d001      	beq.n	139c <am_util_stdio_vsprintf+0x33c>
    1398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    139a:	e000      	b.n	139e <am_util_stdio_vsprintf+0x33e>
    139c:	2300      	movs	r3, #0
    139e:	68fa      	ldr	r2, [r7, #12]
    13a0:	4413      	add	r3, r2
    13a2:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    13a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    13a8:	4413      	add	r3, r2
    13aa:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    13ac:	2300      	movs	r3, #0
    13ae:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    13b0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    13b4:	68fa      	ldr	r2, [r7, #12]
    13b6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    13ba:	f7ff fcb2 	bl	d22 <uint64_to_hexstr>
    13be:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    13c0:	68fb      	ldr	r3, [r7, #12]
    13c2:	2b00      	cmp	r3, #0
    13c4:	d003      	beq.n	13ce <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    13c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13c8:	68fa      	ldr	r2, [r7, #12]
    13ca:	4413      	add	r3, r2
    13cc:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    13ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    13d2:	4413      	add	r3, r2
    13d4:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    13d6:	e12f      	b.n	1638 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    13d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    13dc:	2b00      	cmp	r3, #0
    13de:	d008      	beq.n	13f2 <am_util_stdio_vsprintf+0x392>
    13e0:	687b      	ldr	r3, [r7, #4]
    13e2:	3307      	adds	r3, #7
    13e4:	f023 0307 	bic.w	r3, r3, #7
    13e8:	f103 0208 	add.w	r2, r3, #8
    13ec:	607a      	str	r2, [r7, #4]
    13ee:	cb18      	ldmia	r3, {r3, r4}
    13f0:	e005      	b.n	13fe <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    13f2:	687b      	ldr	r3, [r7, #4]
    13f4:	1d1a      	adds	r2, r3, #4
    13f6:	607a      	str	r2, [r7, #4]
    13f8:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    13fa:	f04f 0400 	mov.w	r4, #0
    13fe:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    1402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1404:	2b00      	cmp	r3, #0
    1406:	d01e      	beq.n	1446 <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    1408:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    140c:	f7ff fb99 	bl	b42 <ndigits_in_u64>
    1410:	4602      	mov	r2, r0
    1412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1414:	1a9b      	subs	r3, r3, r2
    1416:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1418:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    141c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    141e:	4619      	mov	r1, r3
    1420:	68f8      	ldr	r0, [r7, #12]
    1422:	f7ff fcf9 	bl	e18 <padbuffer>
    1426:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1428:	68fb      	ldr	r3, [r7, #12]
    142a:	2b00      	cmp	r3, #0
    142c:	d001      	beq.n	1432 <am_util_stdio_vsprintf+0x3d2>
    142e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1430:	e000      	b.n	1434 <am_util_stdio_vsprintf+0x3d4>
    1432:	2300      	movs	r3, #0
    1434:	68fa      	ldr	r2, [r7, #12]
    1436:	4413      	add	r3, r2
    1438:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    143a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    143c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    143e:	4413      	add	r3, r2
    1440:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1442:	2300      	movs	r3, #0
    1444:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1446:	68fa      	ldr	r2, [r7, #12]
    1448:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    144c:	f7ff fc21 	bl	c92 <uint64_to_str>
    1450:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1452:	68fb      	ldr	r3, [r7, #12]
    1454:	2b00      	cmp	r3, #0
    1456:	d003      	beq.n	1460 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    1458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    145a:	68fa      	ldr	r2, [r7, #12]
    145c:	4413      	add	r3, r2
    145e:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1462:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1464:	4413      	add	r3, r2
    1466:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1468:	e0e6      	b.n	1638 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    146a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    146e:	2b00      	cmp	r3, #0
    1470:	d008      	beq.n	1484 <am_util_stdio_vsprintf+0x424>
    1472:	687b      	ldr	r3, [r7, #4]
    1474:	3307      	adds	r3, #7
    1476:	f023 0307 	bic.w	r3, r3, #7
    147a:	f103 0208 	add.w	r2, r3, #8
    147e:	607a      	str	r2, [r7, #4]
    1480:	cb18      	ldmia	r3, {r3, r4}
    1482:	e005      	b.n	1490 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    1484:	687b      	ldr	r3, [r7, #4]
    1486:	1d1a      	adds	r2, r3, #4
    1488:	607a      	str	r2, [r7, #4]
    148a:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    148c:	ea4f 74e3 	mov.w	r4, r3, asr #31
    1490:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    1494:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1498:	2b00      	cmp	r3, #0
    149a:	f174 0300 	sbcs.w	r3, r4, #0
    149e:	da0a      	bge.n	14b6 <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    14a0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    14a4:	425b      	negs	r3, r3
    14a6:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    14aa:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    14ae:	2301      	movs	r3, #1
    14b0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    14b4:	e006      	b.n	14c4 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    14b6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    14ba:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    14be:	2300      	movs	r3, #0
    14c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    14c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14c6:	2b00      	cmp	r3, #0
    14c8:	d04a      	beq.n	1560 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    14ca:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    14ce:	4618      	mov	r0, r3
    14d0:	4621      	mov	r1, r4
    14d2:	f7ff fb57 	bl	b84 <ndigits_in_i64>
    14d6:	4602      	mov	r2, r0
    14d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14da:	1a9b      	subs	r3, r3, r2
    14dc:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    14de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    14e2:	2b00      	cmp	r3, #0
    14e4:	d011      	beq.n	150a <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    14e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14e8:	3b01      	subs	r3, #1
    14ea:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    14ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    14f0:	2b30      	cmp	r3, #48	; 0x30
    14f2:	d10a      	bne.n	150a <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    14f4:	68fb      	ldr	r3, [r7, #12]
    14f6:	2b00      	cmp	r3, #0
    14f8:	d004      	beq.n	1504 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    14fa:	68fb      	ldr	r3, [r7, #12]
    14fc:	1c5a      	adds	r2, r3, #1
    14fe:	60fa      	str	r2, [r7, #12]
    1500:	222d      	movs	r2, #45	; 0x2d
    1502:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    1504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1506:	3301      	adds	r3, #1
    1508:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    150a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    150e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1510:	4619      	mov	r1, r3
    1512:	68f8      	ldr	r0, [r7, #12]
    1514:	f7ff fc80 	bl	e18 <padbuffer>
    1518:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    151a:	68fb      	ldr	r3, [r7, #12]
    151c:	2b00      	cmp	r3, #0
    151e:	d001      	beq.n	1524 <am_util_stdio_vsprintf+0x4c4>
    1520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1522:	e000      	b.n	1526 <am_util_stdio_vsprintf+0x4c6>
    1524:	2300      	movs	r3, #0
    1526:	68fa      	ldr	r2, [r7, #12]
    1528:	4413      	add	r3, r2
    152a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    152c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    152e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1530:	4413      	add	r3, r2
    1532:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1534:	2300      	movs	r3, #0
    1536:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    1538:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    153c:	2b00      	cmp	r3, #0
    153e:	d01e      	beq.n	157e <am_util_stdio_vsprintf+0x51e>
    1540:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1544:	2b20      	cmp	r3, #32
    1546:	d11a      	bne.n	157e <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    1548:	68fb      	ldr	r3, [r7, #12]
    154a:	2b00      	cmp	r3, #0
    154c:	d004      	beq.n	1558 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    154e:	68fb      	ldr	r3, [r7, #12]
    1550:	1c5a      	adds	r2, r3, #1
    1552:	60fa      	str	r2, [r7, #12]
    1554:	222d      	movs	r2, #45	; 0x2d
    1556:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    1558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    155a:	3301      	adds	r3, #1
    155c:	63fb      	str	r3, [r7, #60]	; 0x3c
    155e:	e00e      	b.n	157e <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    1560:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1564:	2b00      	cmp	r3, #0
    1566:	d00a      	beq.n	157e <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    1568:	68fb      	ldr	r3, [r7, #12]
    156a:	2b00      	cmp	r3, #0
    156c:	d004      	beq.n	1578 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    156e:	68fb      	ldr	r3, [r7, #12]
    1570:	1c5a      	adds	r2, r3, #1
    1572:	60fa      	str	r2, [r7, #12]
    1574:	222d      	movs	r2, #45	; 0x2d
    1576:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    1578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    157a:	3301      	adds	r3, #1
    157c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    157e:	68fa      	ldr	r2, [r7, #12]
    1580:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1584:	f7ff fb85 	bl	c92 <uint64_to_str>
    1588:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    158a:	68fb      	ldr	r3, [r7, #12]
    158c:	2b00      	cmp	r3, #0
    158e:	d003      	beq.n	1598 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    1590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1592:	68fa      	ldr	r2, [r7, #12]
    1594:	4413      	add	r3, r2
    1596:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    159a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    159c:	4413      	add	r3, r2
    159e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    15a0:	e04a      	b.n	1638 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    15a2:	68fb      	ldr	r3, [r7, #12]
    15a4:	2b00      	cmp	r3, #0
    15a6:	d046      	beq.n	1636 <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    15a8:	687b      	ldr	r3, [r7, #4]
    15aa:	3307      	adds	r3, #7
    15ac:	f023 0307 	bic.w	r3, r3, #7
    15b0:	f103 0208 	add.w	r2, r3, #8
    15b4:	607a      	str	r2, [r7, #4]
    15b6:	cb18      	ldmia	r3, {r3, r4}
    15b8:	4618      	mov	r0, r3
    15ba:	4621      	mov	r1, r4
    15bc:	f7fe fd80 	bl	c0 <__aeabi_d2f>
    15c0:	4603      	mov	r3, r0
    15c2:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    15c4:	68fb      	ldr	r3, [r7, #12]
    15c6:	2214      	movs	r2, #20
    15c8:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    15ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    15cc:	68f9      	ldr	r1, [r7, #12]
    15ce:	6978      	ldr	r0, [r7, #20]
    15d0:	f7ff fc48 	bl	e64 <ftoa>
    15d4:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    15d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15d8:	2b00      	cmp	r3, #0
    15da:	da14      	bge.n	1606 <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    15dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15de:	f1b3 3fff 	cmp.w	r3, #4294967295
    15e2:	d102      	bne.n	15ea <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    15e4:	4b1e      	ldr	r3, [pc, #120]	; (1660 <am_util_stdio_vsprintf+0x600>)
    15e6:	62bb      	str	r3, [r7, #40]	; 0x28
    15e8:	e008      	b.n	15fc <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    15ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15ec:	f113 0f02 	cmn.w	r3, #2
    15f0:	d102      	bne.n	15f8 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    15f2:	4b1c      	ldr	r3, [pc, #112]	; (1664 <am_util_stdio_vsprintf+0x604>)
    15f4:	62bb      	str	r3, [r7, #40]	; 0x28
    15f6:	e001      	b.n	15fc <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    15f8:	4b1b      	ldr	r3, [pc, #108]	; (1668 <am_util_stdio_vsprintf+0x608>)
    15fa:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    15fc:	68fb      	ldr	r3, [r7, #12]
    15fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1600:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    1602:	2303      	movs	r3, #3
    1604:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    1606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1608:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    160a:	4413      	add	r3, r2
    160c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    160e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1610:	68fa      	ldr	r2, [r7, #12]
    1612:	4413      	add	r3, r2
    1614:	60fb      	str	r3, [r7, #12]
                }
                break;
    1616:	e00e      	b.n	1636 <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    1618:	68fb      	ldr	r3, [r7, #12]
    161a:	2b00      	cmp	r3, #0
    161c:	d005      	beq.n	162a <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    161e:	68fb      	ldr	r3, [r7, #12]
    1620:	1c5a      	adds	r2, r3, #1
    1622:	60fa      	str	r2, [r7, #12]
    1624:	68ba      	ldr	r2, [r7, #8]
    1626:	7812      	ldrb	r2, [r2, #0]
    1628:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    162a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    162c:	3301      	adds	r3, #1
    162e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1630:	e002      	b.n	1638 <am_util_stdio_vsprintf+0x5d8>
                break;
    1632:	bf00      	nop
    1634:	e000      	b.n	1638 <am_util_stdio_vsprintf+0x5d8>
                break;
    1636:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    1638:	68bb      	ldr	r3, [r7, #8]
    163a:	3301      	adds	r3, #1
    163c:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    163e:	68bb      	ldr	r3, [r7, #8]
    1640:	781b      	ldrb	r3, [r3, #0]
    1642:	2b00      	cmp	r3, #0
    1644:	f47f ad17 	bne.w	1076 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    1648:	68fb      	ldr	r3, [r7, #12]
    164a:	2b00      	cmp	r3, #0
    164c:	d002      	beq.n	1654 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    164e:	68fb      	ldr	r3, [r7, #12]
    1650:	2200      	movs	r2, #0
    1652:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    1654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1656:	4618      	mov	r0, r3
    1658:	3754      	adds	r7, #84	; 0x54
    165a:	46bd      	mov	sp, r7
    165c:	bd90      	pop	{r4, r7, pc}
    165e:	bf00      	nop
    1660:	00302e30 	.word	0x00302e30
    1664:	00232e23 	.word	0x00232e23
    1668:	003f2e3f 	.word	0x003f2e3f

0000166c <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    166c:	b40f      	push	{r0, r1, r2, r3}
    166e:	b580      	push	{r7, lr}
    1670:	b082      	sub	sp, #8
    1672:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    1674:	f107 0314 	add.w	r3, r7, #20
    1678:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    167a:	683a      	ldr	r2, [r7, #0]
    167c:	6939      	ldr	r1, [r7, #16]
    167e:	4808      	ldr	r0, [pc, #32]	; (16a0 <am_util_stdio_printf+0x34>)
    1680:	f7ff fcee 	bl	1060 <am_util_stdio_vsprintf>
    1684:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    1686:	4b07      	ldr	r3, [pc, #28]	; (16a4 <am_util_stdio_printf+0x38>)
    1688:	681b      	ldr	r3, [r3, #0]
    168a:	4805      	ldr	r0, [pc, #20]	; (16a0 <am_util_stdio_printf+0x34>)
    168c:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    168e:	687b      	ldr	r3, [r7, #4]
}
    1690:	4618      	mov	r0, r3
    1692:	3708      	adds	r7, #8
    1694:	46bd      	mov	sp, r7
    1696:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    169a:	b004      	add	sp, #16
    169c:	4770      	bx	lr
    169e:	bf00      	nop
    16a0:	10001038 	.word	0x10001038
    16a4:	1000114c 	.word	0x1000114c

000016a8 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    16a8:	b580      	push	{r7, lr}
    16aa:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    16ac:	4802      	ldr	r0, [pc, #8]	; (16b8 <am_util_stdio_terminal_clear+0x10>)
    16ae:	f7ff ffdd 	bl	166c <am_util_stdio_printf>
}
    16b2:	bf00      	nop
    16b4:	bd80      	pop	{r7, pc}
    16b6:	bf00      	nop
    16b8:	00002210 	.word	0x00002210

000016bc <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    16bc:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    16be:	f000 fb0b 	bl	1cd8 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    16c2:	f000 fb77 	bl	1db4 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    16c6:	f000 fca3 	bl	2010 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    16ca:	2001      	movs	r0, #1
    16cc:	f000 fb8e 	bl	1dec <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    16d0:	2001      	movs	r0, #1
    16d2:	f000 f943 	bl	195c <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    16d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    16da:	f000 bb95 	b.w	1e08 <am_hal_rtc_osc_disable>
    16de:	bf00      	nop

000016e0 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    16e0:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    16e2:	4b17      	ldr	r3, [pc, #92]	; (1740 <am_bsp_debug_printf_enable+0x60>)
    16e4:	681c      	ldr	r4, [r3, #0]
    16e6:	f014 0401 	ands.w	r4, r4, #1
{
    16ea:	b087      	sub	sp, #28
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    16ec:	d001      	beq.n	16f2 <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    16ee:	b007      	add	sp, #28
    16f0:	bd30      	pop	{r4, r5, pc}
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    16f2:	4a14      	ldr	r2, [pc, #80]	; (1744 <am_bsp_debug_printf_enable+0x64>)
    16f4:	4914      	ldr	r1, [pc, #80]	; (1748 <am_bsp_debug_printf_enable+0x68>)
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    16f6:	4d15      	ldr	r5, [pc, #84]	; (174c <am_bsp_debug_printf_enable+0x6c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    16f8:	6011      	str	r1, [r2, #0]
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    16fa:	a806      	add	r0, sp, #24
    16fc:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    1700:	f000 fc28 	bl	1f54 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    1704:	f000 f966 	bl	19d4 <am_hal_interrupt_master_disable>
    1708:	4a11      	ldr	r2, [pc, #68]	; (1750 <am_bsp_debug_printf_enable+0x70>)
    170a:	9000      	str	r0, [sp, #0]
    170c:	4d11      	ldr	r5, [pc, #68]	; (1754 <am_bsp_debug_printf_enable+0x74>)
    170e:	4912      	ldr	r1, [pc, #72]	; (1758 <am_bsp_debug_printf_enable+0x78>)
    1710:	2073      	movs	r0, #115	; 0x73
    1712:	6010      	str	r0, [r2, #0]
    1714:	682b      	ldr	r3, [r5, #0]
    1716:	4811      	ldr	r0, [pc, #68]	; (175c <am_bsp_debug_printf_enable+0x7c>)
    1718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    171c:	602b      	str	r3, [r5, #0]
    171e:	6805      	ldr	r5, [r0, #0]
    1720:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    1724:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    1728:	6003      	str	r3, [r0, #0]
    172a:	6808      	ldr	r0, [r1, #0]
    172c:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    1730:	600d      	str	r5, [r1, #0]
    1732:	6014      	str	r4, [r2, #0]
    1734:	9800      	ldr	r0, [sp, #0]
    1736:	f000 f951 	bl	19dc <am_hal_interrupt_master_set>
}
    173a:	b007      	add	sp, #28
    173c:	bd30      	pop	{r4, r5, pc}
    173e:	bf00      	nop
    1740:	1000113c 	.word	0x1000113c
    1744:	e0000e80 	.word	0xe0000e80
    1748:	00150511 	.word	0x00150511
    174c:	000f4240 	.word	0x000f4240
    1750:	40010060 	.word	0x40010060
    1754:	40010054 	.word	0x40010054
    1758:	40010108 	.word	0x40010108
    175c:	40010028 	.word	0x40010028

00001760 <am_bsp_debug_printf_disable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    1760:	b530      	push	{r4, r5, lr}
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1762:	4b14      	ldr	r3, [pc, #80]	; (17b4 <am_bsp_debug_printf_disable+0x54>)
    1764:	681c      	ldr	r4, [r3, #0]
    1766:	f014 0401 	ands.w	r4, r4, #1
{
    176a:	b083      	sub	sp, #12
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    176c:	d120      	bne.n	17b0 <am_bsp_debug_printf_disable+0x50>
    }

    //
    // Disable the TPIU
    //
    am_hal_itm_not_busy();
    176e:	f000 f965 	bl	1a3c <am_hal_itm_not_busy>
    am_hal_gpio_pin_config(AM_BSP_GPIO_ITM_SWO, AM_HAL_GPIO_OUTPUT);
    1772:	f000 f92f 	bl	19d4 <am_hal_interrupt_master_disable>
    1776:	4a10      	ldr	r2, [pc, #64]	; (17b8 <am_bsp_debug_printf_disable+0x58>)
    1778:	9001      	str	r0, [sp, #4]
    177a:	4d10      	ldr	r5, [pc, #64]	; (17bc <am_bsp_debug_printf_disable+0x5c>)
    177c:	4910      	ldr	r1, [pc, #64]	; (17c0 <am_bsp_debug_printf_disable+0x60>)
    177e:	2073      	movs	r0, #115	; 0x73
    1780:	6010      	str	r0, [r2, #0]
    1782:	682b      	ldr	r3, [r5, #0]
    1784:	480f      	ldr	r0, [pc, #60]	; (17c4 <am_bsp_debug_printf_disable+0x64>)
    1786:	f023 0c70 	bic.w	ip, r3, #112	; 0x70
    178a:	f04c 0320 	orr.w	r3, ip, #32
    178e:	602b      	str	r3, [r5, #0]
    1790:	6805      	ldr	r5, [r0, #0]
    1792:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    1796:	f44c 53c0 	orr.w	r3, ip, #6144	; 0x1800
    179a:	6003      	str	r3, [r0, #0]
    179c:	6808      	ldr	r0, [r1, #0]
    179e:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    17a2:	600d      	str	r5, [r1, #0]
    17a4:	6014      	str	r4, [r2, #0]
    17a6:	9801      	ldr	r0, [sp, #4]
    17a8:	f000 f918 	bl	19dc <am_hal_interrupt_master_set>
    am_hal_tpiu_disable();
    17ac:	f000 fc2a 	bl	2004 <am_hal_tpiu_disable>
}
    17b0:	b003      	add	sp, #12
    17b2:	bd30      	pop	{r4, r5, pc}
    17b4:	1000113c 	.word	0x1000113c
    17b8:	40010060 	.word	0x40010060
    17bc:	40010054 	.word	0x40010054
    17c0:	40010108 	.word	0x40010108
    17c4:	40010028 	.word	0x40010028

000017c8 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    17c8:	f000 b942 	b.w	1a50 <am_hal_itm_print>

000017cc <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    17cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17ce:	4605      	mov	r5, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    17d0:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    17d4:	78ab      	ldrb	r3, [r5, #2]
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    17d6:	786c      	ldrb	r4, [r5, #1]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    17d8:	78ef      	ldrb	r7, [r5, #3]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    17da:	792e      	ldrb	r6, [r5, #4]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    17dc:	79a9      	ldrb	r1, [r5, #6]
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    17de:	009a      	lsls	r2, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    17e0:	0064      	lsls	r4, r4, #1
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    17e2:	f002 0204 	and.w	r2, r2, #4
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    17e6:	f004 0402 	and.w	r4, r4, #2
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    17ea:	4314      	orrs	r4, r2
    17ec:	f047 0701 	orr.w	r7, r7, #1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    17f0:	79ea      	ldrb	r2, [r5, #7]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    17f2:	01f6      	lsls	r6, r6, #7
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    17f4:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    17f6:	b2f6      	uxtb	r6, r6
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    17f8:	7a2f      	ldrb	r7, [r5, #8]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    17fa:	0289      	lsls	r1, r1, #10
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    17fc:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    17fe:	f401 6180 	and.w	r1, r1, #1024	; 0x400
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    1802:	7a6e      	ldrb	r6, [r5, #9]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    1804:	02d2      	lsls	r2, r2, #11
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1806:	430c      	orrs	r4, r1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    1808:	f402 6200 	and.w	r2, r2, #2048	; 0x800
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    180c:	7aa9      	ldrb	r1, [r5, #10]
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    180e:	033f      	lsls	r7, r7, #12
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1810:	4314      	orrs	r4, r2
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    1812:	b2bf      	uxth	r7, r7
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    1814:	0436      	lsls	r6, r6, #16
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    1816:	7aea      	ldrb	r2, [r5, #11]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1818:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    181a:	0509      	lsls	r1, r1, #20
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    181c:	f406 2770 	and.w	r7, r6, #983040	; 0xf0000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    1820:	0612      	lsls	r2, r2, #24
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1822:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    1824:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    1828:	009b      	lsls	r3, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    182a:	f002 7780 	and.w	r7, r2, #16777216	; 0x1000000
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    182e:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    1830:	f003 0108 	and.w	r1, r3, #8
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1834:	433c      	orrs	r4, r7
    1836:	430c      	orrs	r4, r1
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1838:	f000 f948 	bl	1acc <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    183c:	482c      	ldr	r0, [pc, #176]	; (18f0 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    183e:	4b2d      	ldr	r3, [pc, #180]	; (18f4 <am_hal_cachectrl_enable+0x128>)
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1840:	6004      	str	r4, [r0, #0]
    1842:	2232      	movs	r2, #50	; 0x32
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1844:	681e      	ldr	r6, [r3, #0]
    1846:	0777      	lsls	r7, r6, #29
    1848:	d41e      	bmi.n	1888 <am_hal_cachectrl_enable+0xbc>
    184a:	681f      	ldr	r7, [r3, #0]
    184c:	077e      	lsls	r6, r7, #29
    184e:	f102 32ff 	add.w	r2, r2, #4294967295
    1852:	d419      	bmi.n	1888 <am_hal_cachectrl_enable+0xbc>
    1854:	6819      	ldr	r1, [r3, #0]
    1856:	074f      	lsls	r7, r1, #29
    1858:	d416      	bmi.n	1888 <am_hal_cachectrl_enable+0xbc>
    185a:	6818      	ldr	r0, [r3, #0]
    185c:	0746      	lsls	r6, r0, #29
    185e:	d413      	bmi.n	1888 <am_hal_cachectrl_enable+0xbc>
    1860:	681e      	ldr	r6, [r3, #0]
    1862:	0770      	lsls	r0, r6, #29
    1864:	d410      	bmi.n	1888 <am_hal_cachectrl_enable+0xbc>
    1866:	681f      	ldr	r7, [r3, #0]
    1868:	0779      	lsls	r1, r7, #29
    186a:	d40d      	bmi.n	1888 <am_hal_cachectrl_enable+0xbc>
    186c:	6819      	ldr	r1, [r3, #0]
    186e:	074f      	lsls	r7, r1, #29
    1870:	d40a      	bmi.n	1888 <am_hal_cachectrl_enable+0xbc>
    1872:	6818      	ldr	r0, [r3, #0]
    1874:	0746      	lsls	r6, r0, #29
    1876:	d407      	bmi.n	1888 <am_hal_cachectrl_enable+0xbc>
    1878:	681e      	ldr	r6, [r3, #0]
    187a:	0770      	lsls	r0, r6, #29
    187c:	d404      	bmi.n	1888 <am_hal_cachectrl_enable+0xbc>
    187e:	681f      	ldr	r7, [r3, #0]
    1880:	0779      	lsls	r1, r7, #29
    1882:	d401      	bmi.n	1888 <am_hal_cachectrl_enable+0xbc>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    1884:	3a09      	subs	r2, #9
    1886:	d1dd      	bne.n	1844 <am_hal_cachectrl_enable+0x78>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    1888:	4b1a      	ldr	r3, [pc, #104]	; (18f4 <am_hal_cachectrl_enable+0x128>)
    188a:	681a      	ldr	r2, [r3, #0]
    188c:	f042 0101 	orr.w	r1, r2, #1
    1890:	6019      	str	r1, [r3, #0]
    1892:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1894:	6818      	ldr	r0, [r3, #0]
    1896:	0740      	lsls	r0, r0, #29
    1898:	d41e      	bmi.n	18d8 <am_hal_cachectrl_enable+0x10c>
    189a:	681e      	ldr	r6, [r3, #0]
    189c:	0771      	lsls	r1, r6, #29
    189e:	f102 32ff 	add.w	r2, r2, #4294967295
    18a2:	d419      	bmi.n	18d8 <am_hal_cachectrl_enable+0x10c>
    18a4:	681f      	ldr	r7, [r3, #0]
    18a6:	077f      	lsls	r7, r7, #29
    18a8:	d416      	bmi.n	18d8 <am_hal_cachectrl_enable+0x10c>
    18aa:	6819      	ldr	r1, [r3, #0]
    18ac:	074e      	lsls	r6, r1, #29
    18ae:	d413      	bmi.n	18d8 <am_hal_cachectrl_enable+0x10c>
    18b0:	6818      	ldr	r0, [r3, #0]
    18b2:	0740      	lsls	r0, r0, #29
    18b4:	d410      	bmi.n	18d8 <am_hal_cachectrl_enable+0x10c>
    18b6:	681e      	ldr	r6, [r3, #0]
    18b8:	0771      	lsls	r1, r6, #29
    18ba:	d40d      	bmi.n	18d8 <am_hal_cachectrl_enable+0x10c>
    18bc:	681f      	ldr	r7, [r3, #0]
    18be:	077f      	lsls	r7, r7, #29
    18c0:	d40a      	bmi.n	18d8 <am_hal_cachectrl_enable+0x10c>
    18c2:	6819      	ldr	r1, [r3, #0]
    18c4:	074e      	lsls	r6, r1, #29
    18c6:	d407      	bmi.n	18d8 <am_hal_cachectrl_enable+0x10c>
    18c8:	6818      	ldr	r0, [r3, #0]
    18ca:	0740      	lsls	r0, r0, #29
    18cc:	d404      	bmi.n	18d8 <am_hal_cachectrl_enable+0x10c>
    18ce:	681e      	ldr	r6, [r3, #0]
    18d0:	0771      	lsls	r1, r6, #29
    18d2:	d401      	bmi.n	18d8 <am_hal_cachectrl_enable+0x10c>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    18d4:	3a09      	subs	r2, #9
    18d6:	d1dd      	bne.n	1894 <am_hal_cachectrl_enable+0xc8>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    18d8:	796d      	ldrb	r5, [r5, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    18da:	4f05      	ldr	r7, [pc, #20]	; (18f0 <am_hal_cachectrl_enable+0x124>)
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );
    18dc:	022b      	lsls	r3, r5, #8
    18de:	f403 7100 	and.w	r1, r3, #512	; 0x200
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    18e2:	f403 7280 	and.w	r2, r3, #256	; 0x100
    18e6:	4311      	orrs	r1, r2
    18e8:	430c      	orrs	r4, r1
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    18ea:	603c      	str	r4, [r7, #0]
    18ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18ee:	bf00      	nop
    18f0:	40018000 	.word	0x40018000
    18f4:	40018008 	.word	0x40018008

000018f8 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    18f8:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    18fa:	4604      	mov	r4, r0
    18fc:	b120      	cbz	r0, 1908 <am_hal_clkgen_sysclk_select+0x10>
    18fe:	4a06      	ldr	r2, [pc, #24]	; (1918 <am_hal_clkgen_sysclk_select+0x20>)
    1900:	4806      	ldr	r0, [pc, #24]	; (191c <am_hal_clkgen_sysclk_select+0x24>)
    1902:	2153      	movs	r1, #83	; 0x53
    1904:	f000 f834 	bl	1970 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1908:	4b05      	ldr	r3, [pc, #20]	; (1920 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the required operating value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    190a:	4906      	ldr	r1, [pc, #24]	; (1924 <am_hal_clkgen_sysclk_select+0x2c>)
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    190c:	2047      	movs	r0, #71	; 0x47

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    190e:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1910:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1912:	600c      	str	r4, [r1, #0]
    AM_REG(CLKGEN, CLKKEY) = 0;
    1914:	601a      	str	r2, [r3, #0]
    1916:	bd10      	pop	{r4, pc}
    1918:	00002230 	.word	0x00002230
    191c:	00002268 	.word	0x00002268
    1920:	40004014 	.word	0x40004014
    1924:	40004018 	.word	0x40004018

00001928 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1928:	4b04      	ldr	r3, [pc, #16]	; (193c <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    192a:	4905      	ldr	r1, [pc, #20]	; (1940 <am_hal_clkgen_sysclk_get+0x18>)
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    192c:	681a      	ldr	r2, [r3, #0]
            return 48000000;
    192e:	4805      	ldr	r0, [pc, #20]	; (1944 <am_hal_clkgen_sysclk_get+0x1c>)
    switch ( ui32ClockSetting )
    1930:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    1934:	bf08      	it	eq
    1936:	4608      	moveq	r0, r1
    1938:	4770      	bx	lr
    193a:	bf00      	nop
    193c:	40004018 	.word	0x40004018
    1940:	02dc6c00 	.word	0x02dc6c00
    1944:	016e3600 	.word	0x016e3600

00001948 <am_hal_clkgen_osc_start>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_start(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1948:	0783      	lsls	r3, r0, #30
    194a:	d004      	beq.n	1956 <am_hal_clkgen_osc_start+0xe>
    {
        //
        // Start the oscillator(s).
        // Note that these bits are cleared in order to enable the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) &= ~ui32OscFlags;
    194c:	4a02      	ldr	r2, [pc, #8]	; (1958 <am_hal_clkgen_osc_start+0x10>)
    194e:	6813      	ldr	r3, [r2, #0]
    1950:	ea23 0000 	bic.w	r0, r3, r0
    1954:	6010      	str	r0, [r2, #0]
    1956:	4770      	bx	lr
    1958:	4000400c 	.word	0x4000400c

0000195c <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    195c:	0783      	lsls	r3, r0, #30
    195e:	d003      	beq.n	1968 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    1960:	4b02      	ldr	r3, [pc, #8]	; (196c <am_hal_clkgen_osc_stop+0x10>)
    1962:	681a      	ldr	r2, [r3, #0]
    1964:	4310      	orrs	r0, r2
    1966:	6018      	str	r0, [r3, #0]
    1968:	4770      	bx	lr
    196a:	bf00      	nop
    196c:	4000400c 	.word	0x4000400c

00001970 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    1970:	e7fe      	b.n	1970 <am_hal_debug_error>
    1972:	bf00      	nop

00001974 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1974:	4b00      	ldr	r3, [pc, #0]	; (1978 <am_hal_flash_delay+0x4>)
    1976:	4718      	bx	r3
    1978:	0800009d 	.word	0x0800009d

0000197c <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    197c:	280f      	cmp	r0, #15
    197e:	d80b      	bhi.n	1998 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    1980:	2805      	cmp	r0, #5
    1982:	d013      	beq.n	19ac <am_hal_interrupt_enable+0x30>
    1984:	2806      	cmp	r0, #6
    1986:	d017      	beq.n	19b8 <am_hal_interrupt_enable+0x3c>
    1988:	2804      	cmp	r0, #4
    198a:	d104      	bne.n	1996 <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    198c:	4a0d      	ldr	r2, [pc, #52]	; (19c4 <am_hal_interrupt_enable+0x48>)
    198e:	6813      	ldr	r3, [r2, #0]
    1990:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    1994:	6010      	str	r0, [r2, #0]
    1996:	4770      	bx	lr
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    1998:	f1a0 0310 	sub.w	r3, r0, #16
    199c:	f003 0c1f 	and.w	ip, r3, #31
    19a0:	2001      	movs	r0, #1
    19a2:	4909      	ldr	r1, [pc, #36]	; (19c8 <am_hal_interrupt_enable+0x4c>)
    19a4:	fa00 f20c 	lsl.w	r2, r0, ip
    19a8:	600a      	str	r2, [r1, #0]
    19aa:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    19ac:	4805      	ldr	r0, [pc, #20]	; (19c4 <am_hal_interrupt_enable+0x48>)
    19ae:	6801      	ldr	r1, [r0, #0]
    19b0:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    19b4:	6002      	str	r2, [r0, #0]
            break;
    19b6:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    19b8:	4902      	ldr	r1, [pc, #8]	; (19c4 <am_hal_interrupt_enable+0x48>)
    19ba:	680a      	ldr	r2, [r1, #0]
    19bc:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    19c0:	600b      	str	r3, [r1, #0]
            break;
    19c2:	4770      	bx	lr
    19c4:	e000ed24 	.word	0xe000ed24
    19c8:	e000e100 	.word	0xe000e100

000019cc <am_hal_interrupt_master_enable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    19cc:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    19d0:	b662      	cpsie	i
    __asm("    bx lr");
    19d2:	4770      	bx	lr

000019d4 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    19d4:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    19d8:	b672      	cpsid	i
    __asm("    bx lr");
    19da:	4770      	bx	lr

000019dc <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    19dc:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    19e0:	4770      	bx	lr
    19e2:	bf00      	nop

000019e4 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    19e4:	4b0d      	ldr	r3, [pc, #52]	; (1a1c <am_hal_itm_enable+0x38>)
    19e6:	6818      	ldr	r0, [r3, #0]
    19e8:	07c2      	lsls	r2, r0, #31
    19ea:	d416      	bmi.n	1a1a <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    19ec:	4a0c      	ldr	r2, [pc, #48]	; (1a20 <am_hal_itm_enable+0x3c>)
    19ee:	6811      	ldr	r1, [r2, #0]
{
    19f0:	b430      	push	{r4, r5}
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    19f2:	f041 7480 	orr.w	r4, r1, #16777216	; 0x1000000
    19f6:	6014      	str	r4, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    19f8:	6815      	ldr	r5, [r2, #0]
    19fa:	01eb      	lsls	r3, r5, #7
    19fc:	d5fc      	bpl.n	19f8 <am_hal_itm_enable+0x14>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    19fe:	4809      	ldr	r0, [pc, #36]	; (1a24 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    1a00:	4c09      	ldr	r4, [pc, #36]	; (1a28 <am_hal_itm_enable+0x44>)
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    1a02:	4d0a      	ldr	r5, [pc, #40]	; (1a2c <am_hal_itm_enable+0x48>)
    1a04:	6005      	str	r5, [r0, #0]
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    1a06:	250f      	movs	r5, #15
    1a08:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    1a0a:	bc30      	pop	{r4, r5}
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1a0c:	4908      	ldr	r1, [pc, #32]	; (1a30 <am_hal_itm_enable+0x4c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1a0e:	4b09      	ldr	r3, [pc, #36]	; (1a34 <am_hal_itm_enable+0x50>)
    1a10:	4a09      	ldr	r2, [pc, #36]	; (1a38 <am_hal_itm_enable+0x54>)
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1a12:	f04f 30ff 	mov.w	r0, #4294967295
    1a16:	6008      	str	r0, [r1, #0]
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1a18:	601a      	str	r2, [r3, #0]
}
    1a1a:	4770      	bx	lr
    1a1c:	1000113c 	.word	0x1000113c
    1a20:	e000edfc 	.word	0xe000edfc
    1a24:	e0000fb0 	.word	0xe0000fb0
    1a28:	e0000e40 	.word	0xe0000e40
    1a2c:	c5acce55 	.word	0xc5acce55
    1a30:	e0000e00 	.word	0xe0000e00
    1a34:	e0000e80 	.word	0xe0000e80
    1a38:	00150511 	.word	0x00150511

00001a3c <am_hal_itm_not_busy>:
am_hal_itm_not_busy(void)
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
    while (AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1));
    1a3c:	4a03      	ldr	r2, [pc, #12]	; (1a4c <am_hal_itm_not_busy+0x10>)
    1a3e:	6813      	ldr	r3, [r2, #0]
    1a40:	021b      	lsls	r3, r3, #8
    1a42:	d4fc      	bmi.n	1a3e <am_hal_itm_not_busy+0x2>

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1a44:	f44f 7047 	mov.w	r0, #796	; 0x31c
    1a48:	f7ff bf94 	b.w	1974 <am_hal_flash_delay>
    1a4c:	e0000e80 	.word	0xe0000e80

00001a50 <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1a50:	7803      	ldrb	r3, [r0, #0]
    1a52:	b1b3      	cbz	r3, 1a82 <am_hal_itm_print+0x32>
{
    1a54:	b410      	push	{r4}
    1a56:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    1a58:	2400      	movs	r4, #0
    1a5a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    1a5e:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    1a60:	2900      	cmp	r1, #0
    1a62:	d1fa      	bne.n	1a5a <am_hal_itm_print+0xa>
    1a64:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    1a66:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    1a6a:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    1a6e:	f8dc 3000 	ldr.w	r3, [ip]
    1a72:	2b00      	cmp	r3, #0
    1a74:	d0fb      	beq.n	1a6e <am_hal_itm_print+0x1e>
    while (ui32Length)
    1a76:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    1a78:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    1a7c:	d1f5      	bne.n	1a6a <am_hal_itm_print+0x1a>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    1a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
    1a82:	4770      	bx	lr

00001a84 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1a84:	490d      	ldr	r1, [pc, #52]	; (1abc <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1a86:	4b0e      	ldr	r3, [pc, #56]	; (1ac0 <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1a88:	4a0e      	ldr	r2, [pc, #56]	; (1ac4 <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1a8a:	681b      	ldr	r3, [r3, #0]
{
    1a8c:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1a8e:	680d      	ldr	r5, [r1, #0]
    1a90:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1a92:	6815      	ldr	r5, [r2, #0]
    1a94:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1a96:	4c0c      	ldr	r4, [pc, #48]	; (1ac8 <am_hal_mcuctrl_fault_status+0x44>)
    1a98:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1a9a:	4329      	orrs	r1, r5
    1a9c:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1a9e:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1aa0:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1aa4:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1aa6:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1aa8:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1aac:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1ab0:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1ab2:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1ab4:	6142      	str	r2, [r0, #20]
}
    1ab6:	bc70      	pop	{r4, r5, r6}
    1ab8:	4770      	bx	lr
    1aba:	bf00      	nop
    1abc:	400201c4 	.word	0x400201c4
    1ac0:	400201cc 	.word	0x400201cc
    1ac4:	400201c0 	.word	0x400201c0
    1ac8:	400201c8 	.word	0x400201c8

00001acc <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1acc:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
{
    1ad0:	b430      	push	{r4, r5}
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1ad2:	d03a      	beq.n	1b4a <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    1ad4:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    1ad8:	f000 809d 	beq.w	1c16 <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    1adc:	2801      	cmp	r0, #1
    1ade:	f000 809d 	beq.w	1c1c <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    1ae2:	2803      	cmp	r0, #3
    1ae4:	f000 80a6 	beq.w	1c34 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    1ae8:	2807      	cmp	r0, #7
    1aea:	f000 809c 	beq.w	1c26 <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    1aee:	280f      	cmp	r0, #15
    1af0:	f000 80a5 	beq.w	1c3e <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    1af4:	281f      	cmp	r0, #31
    1af6:	f000 80b0 	beq.w	1c5a <am_hal_pwrctrl_memory_enable+0x18e>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    1afa:	283f      	cmp	r0, #63	; 0x3f
    1afc:	f000 80b4 	beq.w	1c68 <am_hal_pwrctrl_memory_enable+0x19c>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    1b00:	287f      	cmp	r0, #127	; 0x7f
    1b02:	f000 80b8 	beq.w	1c76 <am_hal_pwrctrl_memory_enable+0x1aa>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    1b06:	28ff      	cmp	r0, #255	; 0xff
    1b08:	f000 80a0 	beq.w	1c4c <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    1b0c:	f240 13ff 	movw	r3, #511	; 0x1ff
    1b10:	4298      	cmp	r0, r3
    1b12:	f000 80b7 	beq.w	1c84 <am_hal_pwrctrl_memory_enable+0x1b8>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    1b16:	f240 31ff 	movw	r1, #1023	; 0x3ff
    1b1a:	4288      	cmp	r0, r1
    1b1c:	f000 80b8 	beq.w	1c90 <am_hal_pwrctrl_memory_enable+0x1c4>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    1b20:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1b24:	4290      	cmp	r0, r2
    1b26:	d00e      	beq.n	1b46 <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    1b28:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    1b2c:	f000 80b6 	beq.w	1c9c <am_hal_pwrctrl_memory_enable+0x1d0>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    1b30:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    1b34:	42a0      	cmp	r0, r4
    1b36:	f000 80b4 	beq.w	1ca2 <am_hal_pwrctrl_memory_enable+0x1d6>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    1b3a:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    1b3e:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    1b42:	4560      	cmp	r0, ip
    1b44:	d132      	bne.n	1bac <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    1b46:	495b      	ldr	r1, [pc, #364]	; (1cb4 <am_hal_pwrctrl_memory_enable+0x1e8>)
    1b48:	e066      	b.n	1c18 <am_hal_pwrctrl_memory_enable+0x14c>
    1b4a:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    1b4e:	2340      	movs	r3, #64	; 0x40
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    1b50:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1b52:	4c59      	ldr	r4, [pc, #356]	; (1cb8 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1b54:	6825      	ldr	r5, [r4, #0]
    1b56:	402a      	ands	r2, r5
    1b58:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    1b5a:	4a57      	ldr	r2, [pc, #348]	; (1cb8 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1b5c:	6814      	ldr	r4, [r2, #0]
    1b5e:	4320      	orrs	r0, r4
    1b60:	6010      	str	r0, [r2, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    1b62:	2b00      	cmp	r3, #0
    1b64:	d029      	beq.n	1bba <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1b66:	4d55      	ldr	r5, [pc, #340]	; (1cbc <am_hal_pwrctrl_memory_enable+0x1f0>)
    1b68:	6828      	ldr	r0, [r5, #0]
        while ( --i32TOcnt              &&
    1b6a:	4218      	tst	r0, r3
    1b6c:	bf18      	it	ne
    1b6e:	20c6      	movne	r0, #198	; 0xc6
    1b70:	d01f      	beq.n	1bb2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1b72:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1b74:	421a      	tst	r2, r3
    1b76:	d01c      	beq.n	1bb2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1b78:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1b7a:	421c      	tst	r4, r3
    1b7c:	d019      	beq.n	1bb2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1b7e:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1b80:	421a      	tst	r2, r3
    1b82:	d016      	beq.n	1bb2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1b84:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1b86:	421c      	tst	r4, r3
    1b88:	d013      	beq.n	1bb2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1b8a:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1b8c:	421a      	tst	r2, r3
    1b8e:	d010      	beq.n	1bb2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1b90:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1b92:	421c      	tst	r4, r3
    1b94:	d00d      	beq.n	1bb2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1b96:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1b98:	421a      	tst	r2, r3
    1b9a:	d00a      	beq.n	1bb2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1b9c:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1b9e:	421c      	tst	r4, r3
    1ba0:	d007      	beq.n	1bb2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1ba2:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1ba4:	421a      	tst	r2, r3
    1ba6:	d004      	beq.n	1bb2 <am_hal_pwrctrl_memory_enable+0xe6>
    1ba8:	3809      	subs	r0, #9
    1baa:	d1e2      	bne.n	1b72 <am_hal_pwrctrl_memory_enable+0xa6>
        return false;
    1bac:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    1bae:	bc30      	pop	{r4, r5}
    1bb0:	4770      	bx	lr
    if ( ui32PwrStatEnMask )
    1bb2:	b911      	cbnz	r1, 1bba <am_hal_pwrctrl_memory_enable+0xee>
    return true;
    1bb4:	2001      	movs	r0, #1
}
    1bb6:	bc30      	pop	{r4, r5}
    1bb8:	4770      	bx	lr
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1bba:	4b40      	ldr	r3, [pc, #256]	; (1cbc <am_hal_pwrctrl_memory_enable+0x1f0>)
    1bbc:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1bbe:	ea31 0405 	bics.w	r4, r1, r5
    1bc2:	bf18      	it	ne
    1bc4:	24c6      	movne	r4, #198	; 0xc6
    1bc6:	d0f5      	beq.n	1bb4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1bc8:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1bca:	ea31 0000 	bics.w	r0, r1, r0
    1bce:	d0f1      	beq.n	1bb4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1bd0:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1bd2:	ea31 0002 	bics.w	r0, r1, r2
    1bd6:	d0ed      	beq.n	1bb4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1bd8:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1bda:	ea31 0005 	bics.w	r0, r1, r5
    1bde:	d0e9      	beq.n	1bb4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1be0:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1be2:	ea31 0000 	bics.w	r0, r1, r0
    1be6:	d0e5      	beq.n	1bb4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1be8:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1bea:	ea31 0002 	bics.w	r0, r1, r2
    1bee:	d0e1      	beq.n	1bb4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1bf0:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1bf2:	ea31 0005 	bics.w	r0, r1, r5
    1bf6:	d0dd      	beq.n	1bb4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1bf8:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1bfa:	ea31 0000 	bics.w	r0, r1, r0
    1bfe:	d0d9      	beq.n	1bb4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c00:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1c02:	ea31 0002 	bics.w	r0, r1, r2
    1c06:	d0d5      	beq.n	1bb4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1c08:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1c0a:	ea31 0005 	bics.w	r0, r1, r5
    1c0e:	d0d1      	beq.n	1bb4 <am_hal_pwrctrl_memory_enable+0xe8>
    1c10:	3c09      	subs	r4, #9
    1c12:	d1d9      	bne.n	1bc8 <am_hal_pwrctrl_memory_enable+0xfc>
    1c14:	e7ca      	b.n	1bac <am_hal_pwrctrl_memory_enable+0xe0>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    1c16:	2160      	movs	r1, #96	; 0x60
{
    1c18:	2300      	movs	r3, #0
    1c1a:	e79e      	b.n	1b5a <am_hal_pwrctrl_memory_enable+0x8e>
    1c1c:	4a28      	ldr	r2, [pc, #160]	; (1cc0 <am_hal_pwrctrl_memory_enable+0x1f4>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1c1e:	4b29      	ldr	r3, [pc, #164]	; (1cc4 <am_hal_pwrctrl_memory_enable+0x1f8>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    1c20:	f44f 7180 	mov.w	r1, #256	; 0x100
    1c24:	e795      	b.n	1b52 <am_hal_pwrctrl_memory_enable+0x86>
    1c26:	f46f 62ff 	mvn.w	r2, #2040	; 0x7f8
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1c2a:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    1c2e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    1c32:	e78e      	b.n	1b52 <am_hal_pwrctrl_memory_enable+0x86>
    1c34:	4a24      	ldr	r2, [pc, #144]	; (1cc8 <am_hal_pwrctrl_memory_enable+0x1fc>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1c36:	4b25      	ldr	r3, [pc, #148]	; (1ccc <am_hal_pwrctrl_memory_enable+0x200>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    1c38:	f44f 7140 	mov.w	r1, #768	; 0x300
    1c3c:	e789      	b.n	1b52 <am_hal_pwrctrl_memory_enable+0x86>
    1c3e:	f46f 62fe 	mvn.w	r2, #2032	; 0x7f0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1c42:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    1c46:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    1c4a:	e782      	b.n	1b52 <am_hal_pwrctrl_memory_enable+0x86>
    1c4c:	f46f 62e0 	mvn.w	r2, #1792	; 0x700
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1c50:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    1c54:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    1c58:	e77b      	b.n	1b52 <am_hal_pwrctrl_memory_enable+0x86>
    1c5a:	f46f 62fc 	mvn.w	r2, #2016	; 0x7e0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1c5e:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    1c62:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    1c66:	e774      	b.n	1b52 <am_hal_pwrctrl_memory_enable+0x86>
    1c68:	f46f 62f8 	mvn.w	r2, #1984	; 0x7c0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1c6c:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    1c70:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    1c74:	e76d      	b.n	1b52 <am_hal_pwrctrl_memory_enable+0x86>
    1c76:	f46f 62f0 	mvn.w	r2, #1920	; 0x780
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1c7a:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    1c7e:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    1c82:	e766      	b.n	1b52 <am_hal_pwrctrl_memory_enable+0x86>
    1c84:	f46f 62c0 	mvn.w	r2, #1536	; 0x600
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1c88:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    1c8c:	4910      	ldr	r1, [pc, #64]	; (1cd0 <am_hal_pwrctrl_memory_enable+0x204>)
    1c8e:	e760      	b.n	1b52 <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    1c90:	4910      	ldr	r1, [pc, #64]	; (1cd4 <am_hal_pwrctrl_memory_enable+0x208>)
    1c92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1c96:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1c9a:	e75a      	b.n	1b52 <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1c9c:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1ca0:	e7ba      	b.n	1c18 <am_hal_pwrctrl_memory_enable+0x14c>
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1ca2:	4805      	ldr	r0, [pc, #20]	; (1cb8 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1ca4:	6803      	ldr	r3, [r0, #0]
    1ca6:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    1caa:	6001      	str	r1, [r0, #0]
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1cac:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
        ui32PwrStatEnMask  = 0;
    1cb0:	2100      	movs	r1, #0
    1cb2:	e758      	b.n	1b66 <am_hal_pwrctrl_memory_enable+0x9a>
    1cb4:	0007ff00 	.word	0x0007ff00
    1cb8:	40021010 	.word	0x40021010
    1cbc:	40021014 	.word	0x40021014
    1cc0:	fffff801 	.word	0xfffff801
    1cc4:	0007fe00 	.word	0x0007fe00
    1cc8:	fffff803 	.word	0xfffff803
    1ccc:	0007fc00 	.word	0x0007fc00
    1cd0:	0001ff00 	.word	0x0001ff00
    1cd4:	0003ff00 	.word	0x0003ff00

00001cd8 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1cd8:	4b0f      	ldr	r3, [pc, #60]	; (1d18 <am_hal_pwrctrl_bucks_init+0x40>)
    1cda:	681a      	ldr	r2, [r3, #0]
    1cdc:	0792      	lsls	r2, r2, #30
    1cde:	d502      	bpl.n	1ce6 <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1ce0:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1ce2:	07c3      	lsls	r3, r0, #31
    1ce4:	d40e      	bmi.n	1d04 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1ce6:	4b0d      	ldr	r3, [pc, #52]	; (1d1c <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1ce8:	4a0b      	ldr	r2, [pc, #44]	; (1d18 <am_hal_pwrctrl_bucks_init+0x40>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1cea:	6819      	ldr	r1, [r3, #0]
    1cec:	f041 0002 	orr.w	r0, r1, #2
    1cf0:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1cf2:	6819      	ldr	r1, [r3, #0]
    1cf4:	f041 0001 	orr.w	r0, r1, #1
    1cf8:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1cfa:	6813      	ldr	r3, [r2, #0]
    1cfc:	f003 0103 	and.w	r1, r3, #3
    1d00:	2903      	cmp	r1, #3
    1d02:	d1fa      	bne.n	1cfa <am_hal_pwrctrl_bucks_init+0x22>
    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    1d04:	4a04      	ldr	r2, [pc, #16]	; (1d18 <am_hal_pwrctrl_bucks_init+0x40>)
    1d06:	6810      	ldr	r0, [r2, #0]
    1d08:	f000 0303 	and.w	r3, r0, #3
    1d0c:	2b03      	cmp	r3, #3
    1d0e:	d1fa      	bne.n	1d06 <am_hal_pwrctrl_bucks_init+0x2e>
    am_hal_flash_delay(200 / 3);
    1d10:	2042      	movs	r0, #66	; 0x42
    1d12:	f7ff be2f 	b.w	1974 <am_hal_flash_delay>
    1d16:	bf00      	nop
    1d18:	40021004 	.word	0x40021004
    1d1c:	40021000 	.word	0x40021000

00001d20 <am_hal_pwrctrl_bucks_enable>:
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1d20:	4b0b      	ldr	r3, [pc, #44]	; (1d50 <am_hal_pwrctrl_bucks_enable+0x30>)
    1d22:	681a      	ldr	r2, [r3, #0]
    1d24:	0792      	lsls	r2, r2, #30
    1d26:	d502      	bpl.n	1d2e <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1d28:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1d2a:	07c3      	lsls	r3, r0, #31
    1d2c:	d40e      	bmi.n	1d4c <am_hal_pwrctrl_bucks_enable+0x2c>
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1d2e:	4b09      	ldr	r3, [pc, #36]	; (1d54 <am_hal_pwrctrl_bucks_enable+0x34>)
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1d30:	4a07      	ldr	r2, [pc, #28]	; (1d50 <am_hal_pwrctrl_bucks_enable+0x30>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1d32:	6819      	ldr	r1, [r3, #0]
    1d34:	f041 0002 	orr.w	r0, r1, #2
    1d38:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1d3a:	6819      	ldr	r1, [r3, #0]
    1d3c:	f041 0001 	orr.w	r0, r1, #1
    1d40:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1d42:	6813      	ldr	r3, [r2, #0]
    1d44:	f003 0103 	and.w	r1, r3, #3
    1d48:	2903      	cmp	r1, #3
    1d4a:	d1fa      	bne.n	1d42 <am_hal_pwrctrl_bucks_enable+0x22>
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop
    1d50:	40021004 	.word	0x40021004
    1d54:	40021000 	.word	0x40021000

00001d58 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1d58:	4b12      	ldr	r3, [pc, #72]	; (1da4 <am_hal_pwrctrl_bucks_disable+0x4c>)
    1d5a:	681a      	ldr	r2, [r3, #0]
    1d5c:	0792      	lsls	r2, r2, #30
    1d5e:	d402      	bmi.n	1d66 <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    1d60:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1d62:	07c3      	lsls	r3, r0, #31
    1d64:	d51c      	bpl.n	1da0 <am_hal_pwrctrl_bucks_disable+0x48>
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1d66:	4910      	ldr	r1, [pc, #64]	; (1da8 <am_hal_pwrctrl_bucks_disable+0x50>)
    1d68:	680b      	ldr	r3, [r1, #0]
    1d6a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1d6e:	2a20      	cmp	r2, #32
    1d70:	d00b      	beq.n	1d8a <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    1d72:	4b0e      	ldr	r3, [pc, #56]	; (1dac <am_hal_pwrctrl_bucks_disable+0x54>)
    1d74:	681a      	ldr	r2, [r3, #0]
    1d76:	f022 0002 	bic.w	r0, r2, #2
    1d7a:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    1d7c:	6819      	ldr	r1, [r3, #0]
    1d7e:	f021 0201 	bic.w	r2, r1, #1
    1d82:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    1d84:	200a      	movs	r0, #10
    1d86:	f7ff bdf5 	b.w	1974 <am_hal_flash_delay>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_PWRADC_EN) )
    1d8a:	4809      	ldr	r0, [pc, #36]	; (1db0 <am_hal_pwrctrl_bucks_disable+0x58>)
    1d8c:	6801      	ldr	r1, [r0, #0]
    if ( isRev_ADC()  &&
    1d8e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1d92:	d1ee      	bne.n	1d72 <am_hal_pwrctrl_bucks_disable+0x1a>
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    1d94:	4805      	ldr	r0, [pc, #20]	; (1dac <am_hal_pwrctrl_bucks_disable+0x54>)
    1d96:	6803      	ldr	r3, [r0, #0]
    1d98:	f003 0105 	and.w	r1, r3, #5
    1d9c:	6001      	str	r1, [r0, #0]
    1d9e:	e7f1      	b.n	1d84 <am_hal_pwrctrl_bucks_disable+0x2c>
    1da0:	4770      	bx	lr
    1da2:	bf00      	nop
    1da4:	40021004 	.word	0x40021004
    1da8:	4002000c 	.word	0x4002000c
    1dac:	40021000 	.word	0x40021000
    1db0:	40021008 	.word	0x40021008

00001db4 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1db4:	4905      	ldr	r1, [pc, #20]	; (1dcc <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1db6:	4a06      	ldr	r2, [pc, #24]	; (1dd0 <am_hal_pwrctrl_low_power_init+0x1c>)
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1db8:	680b      	ldr	r3, [r1, #0]
    1dba:	f043 0006 	orr.w	r0, r3, #6
    1dbe:	6008      	str	r0, [r1, #0]
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1dc0:	6811      	ldr	r1, [r2, #0]
    1dc2:	f021 0304 	bic.w	r3, r1, #4
    1dc6:	6013      	str	r3, [r2, #0]
    1dc8:	4770      	bx	lr
    1dca:	bf00      	nop
    1dcc:	40021018 	.word	0x40021018
    1dd0:	40021000 	.word	0x40021000

00001dd4 <am_hal_reset_status_get>:
uint32_t am_hal_reset_status_get(void)
{
    //
    // Retrieve the reset generator status bits
    //
    return AM_REG(RSTGEN, STAT);
    1dd4:	4b01      	ldr	r3, [pc, #4]	; (1ddc <am_hal_reset_status_get+0x8>)
    1dd6:	6818      	ldr	r0, [r3, #0]
}
    1dd8:	4770      	bx	lr
    1dda:	bf00      	nop
    1ddc:	4000000c 	.word	0x4000000c

00001de0 <am_hal_reset_status_clear>:
//! @return None.
//
//*****************************************************************************
void am_hal_reset_status_clear(void)
{
    AM_REG(RSTGEN, CLRSTAT) = AM_REG_RSTGEN_CLRSTAT_CLRSTAT(1);
    1de0:	4b01      	ldr	r3, [pc, #4]	; (1de8 <am_hal_reset_status_clear+0x8>)
    1de2:	2201      	movs	r2, #1
    1de4:	601a      	str	r2, [r3, #0]
    1de6:	4770      	bx	lr
    1de8:	40000010 	.word	0x40000010

00001dec <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1dec:	4a05      	ldr	r2, [pc, #20]	; (1e04 <am_hal_rtc_osc_select+0x18>)
    1dee:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    1df0:	b918      	cbnz	r0, 1dfa <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    1df2:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1df6:	6010      	str	r0, [r2, #0]
    1df8:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1dfa:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    1dfe:	6011      	str	r1, [r2, #0]
    1e00:	4770      	bx	lr
    1e02:	bf00      	nop
    1e04:	4000400c 	.word	0x4000400c

00001e08 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    1e08:	4a02      	ldr	r2, [pc, #8]	; (1e14 <am_hal_rtc_osc_disable+0xc>)
    1e0a:	6813      	ldr	r3, [r2, #0]
    1e0c:	f043 0010 	orr.w	r0, r3, #16
    1e10:	6010      	str	r0, [r2, #0]
    1e12:	4770      	bx	lr
    1e14:	40004050 	.word	0x40004050

00001e18 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    1e18:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e1a:	b083      	sub	sp, #12
    1e1c:	4604      	mov	r4, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    1e1e:	f7ff fdd9 	bl	19d4 <am_hal_interrupt_master_disable>
    1e22:	4605      	mov	r5, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1e24:	b124      	cbz	r4, 1e30 <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    1e26:	4b42      	ldr	r3, [pc, #264]	; (1f30 <am_hal_sysctrl_sleep+0x118>)
    1e28:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1e2a:	f010 0c01 	ands.w	ip, r0, #1
    1e2e:	d00a      	beq.n	1e46 <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    1e30:	4a40      	ldr	r2, [pc, #256]	; (1f34 <am_hal_sysctrl_sleep+0x11c>)
    1e32:	6811      	ldr	r1, [r2, #0]
    1e34:	f021 0604 	bic.w	r6, r1, #4
    1e38:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    1e3a:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1e3c:	4628      	mov	r0, r5
    1e3e:	f7ff fdcd 	bl	19dc <am_hal_interrupt_master_set>
}
    1e42:	b003      	add	sp, #12
    1e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1e46:	4c3b      	ldr	r4, [pc, #236]	; (1f34 <am_hal_sysctrl_sleep+0x11c>)
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1e48:	4b3b      	ldr	r3, [pc, #236]	; (1f38 <am_hal_sysctrl_sleep+0x120>)
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1e4a:	6820      	ldr	r0, [r4, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1e4c:	4e3b      	ldr	r6, [pc, #236]	; (1f3c <am_hal_sysctrl_sleep+0x124>)
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1e4e:	4f3c      	ldr	r7, [pc, #240]	; (1f40 <am_hal_sysctrl_sleep+0x128>)
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1e50:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 1f50 <am_hal_sysctrl_sleep+0x138>
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1e54:	f040 0204 	orr.w	r2, r0, #4
    1e58:	6022      	str	r2, [r4, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1e5a:	681c      	ldr	r4, [r3, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1e5c:	6833      	ldr	r3, [r6, #0]
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1e5e:	f8de 2000 	ldr.w	r2, [lr]
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1e62:	6839      	ldr	r1, [r7, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1e64:	f004 07f0 	and.w	r7, r4, #240	; 0xf0
                   CHKBUCKZX_REV : 0x0;
    1e68:	2f20      	cmp	r7, #32
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1e6a:	f103 30ff 	add.w	r0, r3, #4294967295
                   CHKBUCKZX_REV : 0x0;
    1e6e:	bf14      	ite	ne
    1e70:	2700      	movne	r7, #0
    1e72:	2702      	moveq	r7, #2
                    CHKBUCKZX_TIMER : 0x0;
    1e74:	2803      	cmp	r0, #3
    1e76:	bf98      	it	ls
    1e78:	f04f 0c04 	movls.w	ip, #4
                     CHKBUCKZX_BUCKS : 0x0;
    1e7c:	f012 0403 	ands.w	r4, r2, #3
    1e80:	bf18      	it	ne
    1e82:	2401      	movne	r4, #1
    g_buckZX_chk |= ( ui32SupplySrc &
    1e84:	f240 53ff 	movw	r3, #1535	; 0x5ff
    g_buckZX_chk |= (ui32SupplySrc &
    1e88:	433c      	orrs	r4, r7
                0x0 : CHKBUCKZX_DEVEN;
    1e8a:	ea11 0703 	ands.w	r7, r1, r3
    g_buckZX_chk |= (ui32SupplySrc &
    1e8e:	ea44 040c 	orr.w	r4, r4, ip
                0x0 : CHKBUCKZX_DEVEN;
    1e92:	d103      	bne.n	1e9c <am_hal_sysctrl_sleep+0x84>
    g_buckZX_chk |= ( ui32SupplySrc &
    1e94:	f044 0408 	orr.w	r4, r4, #8
        if ( bBuckZX_chk )
    1e98:	2c0f      	cmp	r4, #15
    1e9a:	d00a      	beq.n	1eb2 <am_hal_sysctrl_sleep+0x9a>
        AM_ASM_WFI;
    1e9c:	bf30      	wfi
        if ( bBuckZX_chk )
    1e9e:	2c0f      	cmp	r4, #15
    1ea0:	d01a      	beq.n	1ed8 <am_hal_sysctrl_sleep+0xc0>
            g_bBuckRestoreComplete = true;
    1ea2:	4e28      	ldr	r6, [pc, #160]	; (1f44 <am_hal_sysctrl_sleep+0x12c>)
    1ea4:	2001      	movs	r0, #1
    1ea6:	7030      	strb	r0, [r6, #0]
    am_hal_interrupt_master_set(ui32Critical);
    1ea8:	4628      	mov	r0, r5
    1eaa:	f7ff fd97 	bl	19dc <am_hal_interrupt_master_set>
}
    1eae:	b003      	add	sp, #12
    1eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1eb2:	6832      	ldr	r2, [r6, #0]
    1eb4:	1e51      	subs	r1, r2, #1
    1eb6:	9100      	str	r1, [sp, #0]
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    1eb8:	9800      	ldr	r0, [sp, #0]
    1eba:	f04f 31ff 	mov.w	r1, #4294967295
    1ebe:	f000 f915 	bl	20ec <am_hal_ctimer_clear>
            am_hal_ctimer_period_set(ui32BuckTimer,
    1ec2:	9800      	ldr	r0, [sp, #0]
    1ec4:	463b      	mov	r3, r7
    1ec6:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    1eca:	f04f 31ff 	mov.w	r1, #4294967295
    1ece:	f000 f921 	bl	2114 <am_hal_ctimer_period_set>
            am_hal_pwrctrl_bucks_disable();
    1ed2:	f7ff ff41 	bl	1d58 <am_hal_pwrctrl_bucks_disable>
    1ed6:	e7e1      	b.n	1e9c <am_hal_sysctrl_sleep+0x84>
    AM_CRITICAL_BEGIN_ASM
    1ed8:	f7ff fd7c 	bl	19d4 <am_hal_interrupt_master_disable>
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    1edc:	4b1a      	ldr	r3, [pc, #104]	; (1f48 <am_hal_sysctrl_sleep+0x130>)
    AM_CRITICAL_BEGIN_ASM
    1ede:	9001      	str	r0, [sp, #4]
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    1ee0:	681a      	ldr	r2, [r3, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    1ee2:	681a      	ldr	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    1ee4:	681f      	ldr	r7, [r3, #0]
    1ee6:	f027 043c 	bic.w	r4, r7, #60	; 0x3c
    1eea:	f044 021c 	orr.w	r2, r4, #28
    1eee:	601a      	str	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    1ef0:	6819      	ldr	r1, [r3, #0]
            g_bBuckRestoreComplete = false;
    1ef2:	4c14      	ldr	r4, [pc, #80]	; (1f44 <am_hal_sysctrl_sleep+0x12c>)
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    1ef4:	f421 30f0 	bic.w	r0, r1, #122880	; 0x1e000
    1ef8:	f440 4760 	orr.w	r7, r0, #57344	; 0xe000
    1efc:	601f      	str	r7, [r3, #0]
    AM_CRITICAL_END_ASM
    1efe:	9801      	ldr	r0, [sp, #4]
    1f00:	f7ff fd6c 	bl	19dc <am_hal_interrupt_master_set>
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    1f04:	201c      	movs	r0, #28
    1f06:	f7ff fd35 	bl	1974 <am_hal_flash_delay>
            am_hal_pwrctrl_bucks_enable();
    1f0a:	f7ff ff09 	bl	1d20 <am_hal_pwrctrl_bucks_enable>
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1f0e:	6836      	ldr	r6, [r6, #0]
            g_ui32BuckInputs = 0;
    1f10:	490e      	ldr	r1, [pc, #56]	; (1f4c <am_hal_sysctrl_sleep+0x134>)
            g_bBuckRestoreComplete = false;
    1f12:	2200      	movs	r2, #0
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1f14:	1e73      	subs	r3, r6, #1
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    1f16:	204c      	movs	r0, #76	; 0x4c
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1f18:	9300      	str	r3, [sp, #0]
            g_bBuckRestoreComplete = false;
    1f1a:	7022      	strb	r2, [r4, #0]
            g_ui32BuckInputs = 0;
    1f1c:	600a      	str	r2, [r1, #0]
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    1f1e:	f7ff fd29 	bl	1974 <am_hal_flash_delay>
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    1f22:	9800      	ldr	r0, [sp, #0]
    1f24:	f04f 31ff 	mov.w	r1, #4294967295
    1f28:	f000 f8c8 	bl	20bc <am_hal_ctimer_start>
    1f2c:	e786      	b.n	1e3c <am_hal_sysctrl_sleep+0x24>
    1f2e:	bf00      	nop
    1f30:	40020250 	.word	0x40020250
    1f34:	e000ed10 	.word	0xe000ed10
    1f38:	4002000c 	.word	0x4002000c
    1f3c:	10001148 	.word	0x10001148
    1f40:	40021008 	.word	0x40021008
    1f44:	10001140 	.word	0x10001140
    1f48:	40020068 	.word	0x40020068
    1f4c:	10001144 	.word	0x10001144
    1f50:	40021000 	.word	0x40021000

00001f54 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    1f54:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    1f56:	4a23      	ldr	r2, [pc, #140]	; (1fe4 <am_hal_tpiu_enable+0x90>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    1f58:	6803      	ldr	r3, [r0, #0]
    AM_REG(TPIU, FFCR) = 0;
    1f5a:	2100      	movs	r1, #0
    1f5c:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    1f5e:	b33b      	cbz	r3, 1fb0 <am_hal_tpiu_enable+0x5c>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1f60:	f5a2 7c40 	sub.w	ip, r2, #768	; 0x300
    1f64:	2101      	movs	r1, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1f66:	4c20      	ldr	r4, [pc, #128]	; (1fe8 <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1f68:	4d20      	ldr	r5, [pc, #128]	; (1fec <am_hal_tpiu_enable+0x98>)
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1f6a:	f8cc 1000 	str.w	r1, [ip]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1f6e:	f5a3 4e61 	sub.w	lr, r3, #57600	; 0xe100
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1f72:	45a6      	cmp	lr, r4
    1f74:	bf94      	ite	ls
    1f76:	461c      	movls	r4, r3
    1f78:	462c      	movhi	r4, r5
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    1f7a:	f7ff fcd5 	bl	1928 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    1f7e:	1c43      	adds	r3, r0, #1
    1f80:	d02d      	beq.n	1fde <am_hal_tpiu_enable+0x8a>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    1f82:	08c2      	lsrs	r2, r0, #3
    1f84:	fbb2 f3f4 	udiv	r3, r2, r4
    1f88:	1e5d      	subs	r5, r3, #1
    1f8a:	b2a8      	uxth	r0, r5
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1f8c:	4a18      	ldr	r2, [pc, #96]	; (1ff0 <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1f8e:	4c19      	ldr	r4, [pc, #100]	; (1ff4 <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1f90:	4b19      	ldr	r3, [pc, #100]	; (1ff8 <am_hal_tpiu_enable+0xa4>)
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1f92:	491a      	ldr	r1, [pc, #104]	; (1ffc <am_hal_tpiu_enable+0xa8>)
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1f94:	6010      	str	r0, [r2, #0]
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1f96:	2502      	movs	r5, #2
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1f98:	2000      	movs	r0, #0
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1f9a:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1f9e:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1fa0:	6008      	str	r0, [r1, #0]
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1fa2:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1fa4:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    1fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1fac:	f7ff bce2 	b.w	1974 <am_hal_flash_delay>
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    1fb0:	4c0f      	ldr	r4, [pc, #60]	; (1ff0 <am_hal_tpiu_enable+0x9c>)
    1fb2:	6905      	ldr	r5, [r0, #16]
    1fb4:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    1fb6:	6882      	ldr	r2, [r0, #8]
    1fb8:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    1fbc:	68c3      	ldr	r3, [r0, #12]
    1fbe:	4c10      	ldr	r4, [pc, #64]	; (2000 <am_hal_tpiu_enable+0xac>)
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    1fc0:	490d      	ldr	r1, [pc, #52]	; (1ff8 <am_hal_tpiu_enable+0xa4>)
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    1fc2:	1e5d      	subs	r5, r3, #1
    1fc4:	2201      	movs	r2, #1
    1fc6:	40aa      	lsls	r2, r5
    1fc8:	6022      	str	r2, [r4, #0]
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    1fca:	6840      	ldr	r0, [r0, #4]
    1fcc:	680b      	ldr	r3, [r1, #0]
    1fce:	4303      	orrs	r3, r0
    1fd0:	600b      	str	r3, [r1, #0]
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1fd2:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    1fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1fda:	f7ff bccb 	b.w	1974 <am_hal_flash_delay>
    1fde:	2005      	movs	r0, #5
    1fe0:	e7d4      	b.n	1f8c <am_hal_tpiu_enable+0x38>
    1fe2:	bf00      	nop
    1fe4:	e0040304 	.word	0xe0040304
    1fe8:	001da380 	.word	0x001da380
    1fec:	000f4240 	.word	0x000f4240
    1ff0:	e0040010 	.word	0xe0040010
    1ff4:	e00400f0 	.word	0xe00400f0
    1ff8:	40020250 	.word	0x40020250
    1ffc:	e0040f00 	.word	0xe0040f00
    2000:	e0040004 	.word	0xe0040004

00002004 <am_hal_tpiu_disable>:
am_hal_tpiu_disable(void)
{
    //
    // Disable the TPIU clock source in MCU control.
    //
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    2004:	4b01      	ldr	r3, [pc, #4]	; (200c <am_hal_tpiu_disable+0x8>)
    2006:	2200      	movs	r2, #0
    2008:	601a      	str	r2, [r3, #0]
    200a:	4770      	bx	lr
    200c:	40020250 	.word	0x40020250

00002010 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    2010:	4b01      	ldr	r3, [pc, #4]	; (2018 <am_hal_vcomp_disable+0x8>)
    2012:	2237      	movs	r2, #55	; 0x37
    2014:	601a      	str	r2, [r3, #0]
    2016:	4770      	bx	lr
    2018:	4000c008 	.word	0x4000c008

0000201c <am_hal_wdt_init>:
    //
    // Write the interrupt and reset count values to a temporary variable.
    //
    // Accept the passed Config value, but clear the Counts that we are about to set.
    ui32ConfigVal = psConfig->ui32Config & ~(AM_REG_WDT_CFG_INTVAL_M | AM_REG_WDT_CFG_RESVAL_M);
    ui32ConfigVal |= AM_WRITE_SM(AM_REG_WDT_CFG_INTVAL, ui16IntCount);
    201c:	8883      	ldrh	r3, [r0, #4]
    ui32ConfigVal |= AM_WRITE_SM(AM_REG_WDT_CFG_RESVAL, ui16ResetCount);
    201e:	88c2      	ldrh	r2, [r0, #6]
    bool bResetEnabled = psConfig->ui32Config & AM_HAL_WDT_ENABLE_RESET;
    2020:	6801      	ldr	r1, [r0, #0]
{
    2022:	b410      	push	{r4}
    ui32ConfigVal |= AM_WRITE_SM(AM_REG_WDT_CFG_RESVAL, ui16ResetCount);
    2024:	0212      	lsls	r2, r2, #8
    ui32ConfigVal |= AM_WRITE_SM(AM_REG_WDT_CFG_INTVAL, ui16IntCount);
    2026:	041c      	lsls	r4, r3, #16
    ui32ConfigVal = psConfig->ui32Config & ~(AM_REG_WDT_CFG_INTVAL_M | AM_REG_WDT_CFG_RESVAL_M);
    2028:	f421 0c7f 	bic.w	ip, r1, #16711680	; 0xff0000
    ui32ConfigVal |= AM_WRITE_SM(AM_REG_WDT_CFG_INTVAL, ui16IntCount);
    202c:	f404 037f 	and.w	r3, r4, #16711680	; 0xff0000
    ui32ConfigVal |= AM_WRITE_SM(AM_REG_WDT_CFG_RESVAL, ui16ResetCount);
    2030:	b292      	uxth	r2, r2
    ui32ConfigVal = psConfig->ui32Config & ~(AM_REG_WDT_CFG_INTVAL_M | AM_REG_WDT_CFG_RESVAL_M);
    2032:	f42c 447f 	bic.w	r4, ip, #65280	; 0xff00
    ui32ConfigVal |= AM_WRITE_SM(AM_REG_WDT_CFG_RESVAL, ui16ResetCount);
    2036:	4313      	orrs	r3, r2
    2038:	4323      	orrs	r3, r4
    if ( bInterruptEnabled )
    {
        //
        // Enable the watchdog interrupt if the configuration calls for them.
        //
        AM_REGn(WDT, 0, INTEN) |= AM_REG_WDT_INTEN_WDTINT_M;
    203a:	4c13      	ldr	r4, [pc, #76]	; (2088 <am_hal_wdt_init+0x6c>)
    if ( bInterruptEnabled )
    203c:	f011 0f02 	tst.w	r1, #2
    bool bResetEnabled = psConfig->ui32Config & AM_HAL_WDT_ENABLE_RESET;
    2040:	f001 0204 	and.w	r2, r1, #4
        AM_REGn(WDT, 0, INTEN) |= AM_REG_WDT_INTEN_WDTINT_M;
    2044:	6821      	ldr	r1, [r4, #0]
    2046:	bf14      	ite	ne
    2048:	f041 0101 	orrne.w	r1, r1, #1
    {
        //
        // Disable the watchdog interrupt if the configuration doesn't call for
        // watchdog interrupts.
        //
        AM_REGn(WDT, 0, INTEN) &= ~AM_REG_WDT_INTEN_WDTINT_M;
    204c:	f021 0101 	biceq.w	r1, r1, #1
    2050:	6021      	str	r1, [r4, #0]
    if ( bResetEnabled )
    {
        //
        // Also enable watchdog resets in the reset module.
        //
        AM_REG(RSTGEN, CFG) |= AM_REG_RSTGEN_CFG_WDREN_M;
    2052:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
    if ( bResetEnabled )
    2056:	b182      	cbz	r2, 207a <am_hal_wdt_init+0x5e>
        AM_REG(RSTGEN, CFG) |= AM_REG_RSTGEN_CFG_WDREN_M;
    2058:	f8dc 1000 	ldr.w	r1, [ip]
    205c:	f041 0202 	orr.w	r2, r1, #2
    2060:	f8cc 2000 	str.w	r2, [ip]

    //
    // Check for a user specified clock select. If none specified then
    // set 128Hz.
    //
    if ( !(psConfig->ui32Config & AM_REG_WDT_CFG_CLKSEL_M) )
    2064:	6800      	ldr	r0, [r0, #0]
    }

    //
    // Write the saved value to the watchdog configuration register.
    //
    AM_REGn(WDT, 0, CFG) = ui32ConfigVal;
    2066:	4c09      	ldr	r4, [pc, #36]	; (208c <am_hal_wdt_init+0x70>)
    if ( !(psConfig->ui32Config & AM_REG_WDT_CFG_CLKSEL_M) )
    2068:	f010 6fe0 	tst.w	r0, #117440512	; 0x7000000
        ui32ConfigVal |= AM_REG_WDT_CFG_CLKSEL_128HZ;
    206c:	bf08      	it	eq
    206e:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
    AM_REGn(WDT, 0, CFG) = ui32ConfigVal;
    2072:	6023      	str	r3, [r4, #0]
}
    2074:	f85d 4b04 	ldr.w	r4, [sp], #4
    2078:	4770      	bx	lr
        AM_REG(RSTGEN, CFG) &= ~AM_REG_RSTGEN_CFG_WDREN_M;
    207a:	f8dc 2000 	ldr.w	r2, [ip]
    207e:	f022 0402 	bic.w	r4, r2, #2
    2082:	f8cc 4000 	str.w	r4, [ip]
    2086:	e7ed      	b.n	2064 <am_hal_wdt_init+0x48>
    2088:	40024200 	.word	0x40024200
    208c:	40024000 	.word	0x40024000

00002090 <am_hal_wdt_start>:
{
    //
    // Make sure the watchdog timer is in the "reset" state, and then set the
    // enable bit to start counting.
    //
    AM_REGn(WDT, 0, CFG) |= AM_REG_WDT_CFG_WDTEN_M;
    2090:	4905      	ldr	r1, [pc, #20]	; (20a8 <am_hal_wdt_start+0x18>)
    AM_REGn(WDT, 0, RSTRT) |= AM_REG_WDT_RSTRT_RSTRT_KEYVALUE;
    2092:	4a06      	ldr	r2, [pc, #24]	; (20ac <am_hal_wdt_start+0x1c>)
    AM_REGn(WDT, 0, CFG) |= AM_REG_WDT_CFG_WDTEN_M;
    2094:	680b      	ldr	r3, [r1, #0]
    2096:	f043 0001 	orr.w	r0, r3, #1
    209a:	6008      	str	r0, [r1, #0]
    AM_REGn(WDT, 0, RSTRT) |= AM_REG_WDT_RSTRT_RSTRT_KEYVALUE;
    209c:	6811      	ldr	r1, [r2, #0]
    209e:	f041 03b2 	orr.w	r3, r1, #178	; 0xb2
    20a2:	6013      	str	r3, [r2, #0]
    20a4:	4770      	bx	lr
    20a6:	bf00      	nop
    20a8:	40024000 	.word	0x40024000
    20ac:	40024004 	.word	0x40024004

000020b0 <am_hal_wdt_int_clear>:
//
//*****************************************************************************
void
am_hal_wdt_int_clear(void)
{
    AM_REGn(WDT, 0, INTCLR) = AM_REG_WDT_INTCLR_WDTINT_M;
    20b0:	4b01      	ldr	r3, [pc, #4]	; (20b8 <am_hal_wdt_int_clear+0x8>)
    20b2:	2201      	movs	r2, #1
    20b4:	601a      	str	r2, [r3, #0]
    20b6:	4770      	bx	lr
    20b8:	40024208 	.word	0x40024208

000020bc <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    20bc:	b570      	push	{r4, r5, r6, lr}
    20be:	b082      	sub	sp, #8
    20c0:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    20c2:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    20c4:	f7ff fc86 	bl	19d4 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    20c8:	4d07      	ldr	r5, [pc, #28]	; (20e8 <am_hal_ctimer_start+0x2c>)
    AM_CRITICAL_BEGIN_ASM
    20ca:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    20cc:	5971      	ldr	r1, [r6, r5]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    20ce:	f004 2308 	and.w	r3, r4, #134219776	; 0x8000800
    20d2:	ea21 0003 	bic.w	r0, r1, r3
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    20d6:	f004 1201 	and.w	r2, r4, #65537	; 0x10001
    20da:	4302      	orrs	r2, r0
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    20dc:	5172      	str	r2, [r6, r5]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    20de:	9801      	ldr	r0, [sp, #4]
    20e0:	f7ff fc7c 	bl	19dc <am_hal_interrupt_master_set>
} // am_hal_ctimer_start()
    20e4:	b002      	add	sp, #8
    20e6:	bd70      	pop	{r4, r5, r6, pc}
    20e8:	4000800c 	.word	0x4000800c

000020ec <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    20ec:	b570      	push	{r4, r5, r6, lr}
    20ee:	b082      	sub	sp, #8
    20f0:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    20f2:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    20f4:	f7ff fc6e 	bl	19d4 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    20f8:	4d05      	ldr	r5, [pc, #20]	; (2110 <am_hal_ctimer_clear+0x24>)
    AM_CRITICAL_BEGIN_ASM
    20fa:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    20fc:	5971      	ldr	r1, [r6, r5]
    20fe:	f004 2008 	and.w	r0, r4, #134219776	; 0x8000800
    2102:	4308      	orrs	r0, r1
    2104:	5170      	str	r0, [r6, r5]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    2106:	9801      	ldr	r0, [sp, #4]
    2108:	f7ff fc68 	bl	19dc <am_hal_interrupt_master_set>
} // am_hal_ctimer_clear()
    210c:	b002      	add	sp, #8
    210e:	bd70      	pop	{r4, r5, r6, pc}
    2110:	4000800c 	.word	0x4000800c

00002114 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    2114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2118:	b082      	sub	sp, #8
    211a:	4688      	mov	r8, r1
    211c:	461f      	mov	r7, r3
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    211e:	ea4f 1900 	mov.w	r9, r0, lsl #4
{
    2122:	4614      	mov	r4, r2
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    2124:	f7ff fc56 	bl	19d4 <am_hal_interrupt_master_disable>
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    2128:	f8df a098 	ldr.w	sl, [pc, #152]	; 21c4 <am_hal_ctimer_period_set+0xb0>
    AM_CRITICAL_BEGIN_ASM
    212c:	9001      	str	r0, [sp, #4]
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    212e:	f518 3f80 	cmn.w	r8, #65536	; 0x10000
                                    AM_REG_CTIMER_CMPRA0_O +
    2132:	4d21      	ldr	r5, [pc, #132]	; (21b8 <am_hal_ctimer_period_set+0xa4>)
                                    AM_REG_CTIMER_CMPRB0_O +
    2134:	4e21      	ldr	r6, [pc, #132]	; (21bc <am_hal_ctimer_period_set+0xa8>)
    ui32Mode = *pui32ControlReg;
    2136:	f859 300a 	ldr.w	r3, [r9, sl]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    213a:	d01b      	beq.n	2174 <am_hal_ctimer_period_set+0x60>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    213c:	f403 70c0 	and.w	r0, r3, #384	; 0x180
    2140:	2880      	cmp	r0, #128	; 0x80
    2142:	d01c      	beq.n	217e <am_hal_ctimer_period_set+0x6a>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    2144:	f64f 77ff 	movw	r7, #65535	; 0xffff
    2148:	2300      	movs	r3, #0
    214a:	45b8      	cmp	r8, r7
        ui32Comp1 = 0;
    214c:	461a      	mov	r2, r3
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    214e:	d01d      	beq.n	218c <am_hal_ctimer_period_set+0x78>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    2150:	491b      	ldr	r1, [pc, #108]	; (21c0 <am_hal_ctimer_period_set+0xac>)
    2152:	4588      	cmp	r8, r1
    2154:	d025      	beq.n	21a2 <am_hal_ctimer_period_set+0x8e>
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1 >> 16));
    2156:	400a      	ands	r2, r1
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    2158:	b2a0      	uxth	r0, r4
    215a:	4303      	orrs	r3, r0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    215c:	ea42 4414 	orr.w	r4, r2, r4, lsr #16
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    2160:	f849 3005 	str.w	r3, [r9, r5]
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    2164:	f849 4006 	str.w	r4, [r9, r6]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    2168:	9801      	ldr	r0, [sp, #4]
    216a:	f7ff fc37 	bl	19dc <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    216e:	b002      	add	sp, #8
    2170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ui32Mode = ui32Mode >> 16;
    2174:	0c19      	lsrs	r1, r3, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    2176:	f401 70c0 	and.w	r0, r1, #384	; 0x180
    217a:	2880      	cmp	r0, #128	; 0x80
    217c:	d110      	bne.n	21a0 <am_hal_ctimer_period_set+0x8c>
    217e:	0423      	lsls	r3, r4, #16
        ui32Comp1 = ui32Period;
    2180:	4622      	mov	r2, r4
        ui32Comp0 = ui32Period - ui32OnTime;
    2182:	1be4      	subs	r4, r4, r7
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    2184:	f64f 77ff 	movw	r7, #65535	; 0xffff
    2188:	45b8      	cmp	r8, r7
    218a:	d1e1      	bne.n	2150 <am_hal_ctimer_period_set+0x3c>
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    218c:	b2a6      	uxth	r6, r4
    218e:	4333      	orrs	r3, r6
    2190:	f849 3005 	str.w	r3, [r9, r5]
    AM_CRITICAL_END_ASM
    2194:	9801      	ldr	r0, [sp, #4]
    2196:	f7ff fc21 	bl	19dc <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    219a:	b002      	add	sp, #8
    219c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    21a0:	2300      	movs	r3, #0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    21a2:	b2a5      	uxth	r5, r4
    21a4:	432b      	orrs	r3, r5
    21a6:	f849 3006 	str.w	r3, [r9, r6]
    AM_CRITICAL_END_ASM
    21aa:	9801      	ldr	r0, [sp, #4]
    21ac:	f7ff fc16 	bl	19dc <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    21b0:	b002      	add	sp, #8
    21b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    21b6:	bf00      	nop
    21b8:	40008004 	.word	0x40008004
    21bc:	40008008 	.word	0x40008008
    21c0:	ffff0000 	.word	0xffff0000
    21c4:	4000800c 	.word	0x4000800c
    21c8:	65746e49 	.word	0x65746e49
    21cc:	70757272 	.word	0x70757272
    21d0:	3a232074 	.word	0x3a232074
    21d4:	0a642520 	.word	0x0a642520
    21d8:	00000000 	.word	0x00000000
    21dc:	63746157 	.word	0x63746157
    21e0:	676f6468 	.word	0x676f6468
    21e4:	61784520 	.word	0x61784520
    21e8:	656c706d 	.word	0x656c706d
    21ec:	00000a2e 	.word	0x00000a2e
    21f0:	65736552 	.word	0x65736552
    21f4:	74532074 	.word	0x74532074
    21f8:	73757461 	.word	0x73757461
    21fc:	67655220 	.word	0x67655220
    2200:	65747369 	.word	0x65747369
    2204:	203d2072 	.word	0x203d2072
    2208:	78257830 	.word	0x78257830
    220c:	0000000a 	.word	0x0000000a
    2210:	0a0a0a0a 	.word	0x0a0a0a0a
    2214:	0a0a0a0a 	.word	0x0a0a0a0a
    2218:	0a0a0a0a 	.word	0x0a0a0a0a
    221c:	0a0a0a0a 	.word	0x0a0a0a0a
    2220:	00000a0a 	.word	0x00000a0a

00002224 <am_hal_cachectrl_defaults>:
    2224:	50000001 00010300 00010101 685f6d61     ...P........am_h
    2234:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    2244:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    2254:	63206469 6b636f6c 74657320 676e6974     id clock setting
    2264:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    2274:	6b6c635f 2e6e6567 00000063              _clkgen.c...
