
clkout_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002018  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000028  10001000  00002018  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000010c  10001028  00002040  00021028  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021028  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000aa97  00000000  00000000  0002105f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002582  00000000  00000000  0002baf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000780  00000000  00000000  0002e078  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001018  00000000  00000000  0002e7f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000463e  00000000  00000000  0002f810  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000028eb  00000000  00000000  00033e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  00036739  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001464  00000000  00000000  000367b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000025db  00000000  00000000  00037c1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 31 09 00 00 99 09 00 00 a5 09 00 00     ....1...........
      10:	a5 09 00 00 a5 09 00 00 a5 09 00 00 00 00 00 00     ................
	...
      2c:	9f 09 00 00 9f 09 00 00 00 00 00 00 9f 09 00 00     ................
      3c:	9f 09 00 00 9f 09 00 00 9f 09 00 00 9f 09 00 00     ................
      4c:	9f 09 00 00 9f 09 00 00 9f 09 00 00 9f 09 00 00     ................
      5c:	9f 09 00 00 9f 09 00 00 9f 09 00 00 9f 09 00 00     ................
      6c:	9f 09 00 00 9f 09 00 00 9f 09 00 00 9f 09 00 00     ................
      7c:	9f 09 00 00 9f 09 00 00 9f 09 00 00 9f 09 00 00     ................
      8c:	9f 09 00 00 9f 09 00 00 9f 09 00 00 9f 09 00 00     ................
      9c:	9f 09 00 00 9f 09 00 00 9f 09 00 00 9f 09 00 00     ................
      ac:	9f 09 00 00 9f 09 00 00 9f 09 00 00 9f 09 00 00     ................
      bc:	9f 09 00 00                                         ....

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <am_devices_led_init>:
am_devices_led_array_disable(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
    if ( (psLEDs == NULL)                       ||
         (ui32NumLEDs > MAX_LEDS) )
    {
        return;
     160:	b590      	push	{r4, r7, lr}
        am_hal_gpio_pinconfig((psLEDs + i)->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
#else
        am_hal_gpio_pin_config((psLEDs + i)->ui32GPIONumber, AM_HAL_GPIO_DISABLE);
#endif
    }
}
     162:	b085      	sub	sp, #20
     164:	af00      	add	r7, sp, #0
     166:	6078      	str	r0, [r7, #4]
     168:	687b      	ldr	r3, [r7, #4]
     16a:	2b00      	cmp	r3, #0
     16c:	f000 8162 	beq.w	434 <am_devices_led_init+0x2d4>
     170:	687b      	ldr	r3, [r7, #4]
     172:	681b      	ldr	r3, [r3, #0]
    if ( (psLED == NULL)    ||
     174:	2b31      	cmp	r3, #49	; 0x31
     176:	f200 815d 	bhi.w	434 <am_devices_led_init+0x2d4>
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
     17a:	687b      	ldr	r3, [r7, #4]
     17c:	685b      	ldr	r3, [r3, #4]
     17e:	f003 0302 	and.w	r3, r3, #2
     182:	2b00      	cmp	r3, #0
     184:	f000 80ab 	beq.w	2de <am_devices_led_init+0x17e>
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT);
     188:	687b      	ldr	r3, [r7, #4]
     18a:	681b      	ldr	r3, [r3, #0]
     18c:	2b31      	cmp	r3, #49	; 0x31
     18e:	d86e      	bhi.n	26e <am_devices_led_init+0x10e>
     190:	f001 fcaa 	bl	1ae8 <am_hal_interrupt_master_disable>
     194:	4603      	mov	r3, r0
     196:	60fb      	str	r3, [r7, #12]
     198:	4ba8      	ldr	r3, [pc, #672]	; (43c <am_devices_led_init+0x2dc>)
     19a:	2273      	movs	r2, #115	; 0x73
     19c:	601a      	str	r2, [r3, #0]
     19e:	687b      	ldr	r3, [r7, #4]
     1a0:	681b      	ldr	r3, [r3, #0]
     1a2:	085b      	lsrs	r3, r3, #1
     1a4:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     1a8:	4ba5      	ldr	r3, [pc, #660]	; (440 <am_devices_led_init+0x2e0>)
     1aa:	4413      	add	r3, r2
     1ac:	461c      	mov	r4, r3
     1ae:	687b      	ldr	r3, [r7, #4]
     1b0:	681b      	ldr	r3, [r3, #0]
     1b2:	009b      	lsls	r3, r3, #2
     1b4:	f003 031c 	and.w	r3, r3, #28
     1b8:	2202      	movs	r2, #2
     1ba:	409a      	lsls	r2, r3
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	681b      	ldr	r3, [r3, #0]
     1c0:	085b      	lsrs	r3, r3, #1
     1c2:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     1c6:	4b9e      	ldr	r3, [pc, #632]	; (440 <am_devices_led_init+0x2e0>)
     1c8:	440b      	add	r3, r1
     1ca:	6819      	ldr	r1, [r3, #0]
     1cc:	687b      	ldr	r3, [r7, #4]
     1ce:	681b      	ldr	r3, [r3, #0]
     1d0:	009b      	lsls	r3, r3, #2
     1d2:	f003 031c 	and.w	r3, r3, #28
     1d6:	2007      	movs	r0, #7
     1d8:	fa00 f303 	lsl.w	r3, r0, r3
     1dc:	43db      	mvns	r3, r3
     1de:	400b      	ands	r3, r1
     1e0:	4313      	orrs	r3, r2
     1e2:	6023      	str	r3, [r4, #0]
     1e4:	687b      	ldr	r3, [r7, #4]
     1e6:	681b      	ldr	r3, [r3, #0]
     1e8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     1ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     1f0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     1f4:	461c      	mov	r4, r3
     1f6:	687b      	ldr	r3, [r7, #4]
     1f8:	681b      	ldr	r3, [r3, #0]
     1fa:	00db      	lsls	r3, r3, #3
     1fc:	f003 0318 	and.w	r3, r3, #24
     200:	2218      	movs	r2, #24
     202:	409a      	lsls	r2, r3
     204:	687b      	ldr	r3, [r7, #4]
     206:	681b      	ldr	r3, [r3, #0]
     208:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     20c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     210:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     214:	6819      	ldr	r1, [r3, #0]
     216:	687b      	ldr	r3, [r7, #4]
     218:	681b      	ldr	r3, [r3, #0]
     21a:	00db      	lsls	r3, r3, #3
     21c:	f003 0318 	and.w	r3, r3, #24
     220:	20ff      	movs	r0, #255	; 0xff
     222:	fa00 f303 	lsl.w	r3, r0, r3
     226:	43db      	mvns	r3, r3
     228:	400b      	ands	r3, r1
     22a:	4313      	orrs	r3, r2
     22c:	6023      	str	r3, [r4, #0]
     22e:	687b      	ldr	r3, [r7, #4]
     230:	681b      	ldr	r3, [r3, #0]
     232:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     236:	4b83      	ldr	r3, [pc, #524]	; (444 <am_devices_led_init+0x2e4>)
     238:	4413      	add	r3, r2
     23a:	4618      	mov	r0, r3
     23c:	687b      	ldr	r3, [r7, #4]
     23e:	681b      	ldr	r3, [r3, #0]
     240:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     244:	4b7f      	ldr	r3, [pc, #508]	; (444 <am_devices_led_init+0x2e4>)
     246:	4413      	add	r3, r2
     248:	681a      	ldr	r2, [r3, #0]
     24a:	687b      	ldr	r3, [r7, #4]
     24c:	681b      	ldr	r3, [r3, #0]
     24e:	00db      	lsls	r3, r3, #3
     250:	f003 0318 	and.w	r3, r3, #24
     254:	21ff      	movs	r1, #255	; 0xff
     256:	fa01 f303 	lsl.w	r3, r1, r3
     25a:	43db      	mvns	r3, r3
     25c:	4013      	ands	r3, r2
     25e:	6003      	str	r3, [r0, #0]
     260:	4b76      	ldr	r3, [pc, #472]	; (43c <am_devices_led_init+0x2dc>)
     262:	2200      	movs	r2, #0
     264:	601a      	str	r2, [r3, #0]
     266:	68fb      	ldr	r3, [r7, #12]
     268:	4618      	mov	r0, r3
     26a:	f001 fc41 	bl	1af0 <am_hal_interrupt_master_set>
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     26e:	687b      	ldr	r3, [r7, #4]
     270:	681b      	ldr	r3, [r3, #0]
     272:	08db      	lsrs	r3, r3, #3
     274:	f003 0204 	and.w	r2, r3, #4
     278:	4b73      	ldr	r3, [pc, #460]	; (448 <am_devices_led_init+0x2e8>)
     27a:	4413      	add	r3, r2
     27c:	4619      	mov	r1, r3
     27e:	687b      	ldr	r3, [r7, #4]
     280:	681b      	ldr	r3, [r3, #0]
     282:	f003 031f 	and.w	r3, r3, #31
     286:	2201      	movs	r2, #1
     288:	fa02 f303 	lsl.w	r3, r2, r3
     28c:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     28e:	687b      	ldr	r3, [r7, #4]
     290:	685b      	ldr	r3, [r3, #4]
     292:	f003 0301 	and.w	r3, r3, #1
     296:	2b00      	cmp	r3, #0
     298:	d010      	beq.n	2bc <am_devices_led_init+0x15c>
     29a:	687b      	ldr	r3, [r7, #4]
     29c:	681b      	ldr	r3, [r3, #0]
     29e:	08db      	lsrs	r3, r3, #3
     2a0:	f003 0204 	and.w	r2, r3, #4
     2a4:	4b69      	ldr	r3, [pc, #420]	; (44c <am_devices_led_init+0x2ec>)
     2a6:	4413      	add	r3, r2
     2a8:	4619      	mov	r1, r3
     2aa:	687b      	ldr	r3, [r7, #4]
     2ac:	681b      	ldr	r3, [r3, #0]
     2ae:	f003 031f 	and.w	r3, r3, #31
     2b2:	2201      	movs	r2, #1
     2b4:	fa02 f303 	lsl.w	r3, r2, r3
     2b8:	600b      	str	r3, [r1, #0]
     2ba:	e0bc      	b.n	436 <am_devices_led_init+0x2d6>
     2bc:	687b      	ldr	r3, [r7, #4]
     2be:	681b      	ldr	r3, [r3, #0]
     2c0:	08db      	lsrs	r3, r3, #3
     2c2:	f003 0204 	and.w	r2, r3, #4
     2c6:	4b62      	ldr	r3, [pc, #392]	; (450 <am_devices_led_init+0x2f0>)
     2c8:	4413      	add	r3, r2
     2ca:	4619      	mov	r1, r3
     2cc:	687b      	ldr	r3, [r7, #4]
     2ce:	681b      	ldr	r3, [r3, #0]
     2d0:	f003 031f 	and.w	r3, r3, #31
     2d4:	2201      	movs	r2, #1
     2d6:	fa02 f303 	lsl.w	r3, r2, r3
     2da:	600b      	str	r3, [r1, #0]
     2dc:	e0ab      	b.n	436 <am_devices_led_init+0x2d6>
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     2de:	687b      	ldr	r3, [r7, #4]
     2e0:	681b      	ldr	r3, [r3, #0]
     2e2:	2b31      	cmp	r3, #49	; 0x31
     2e4:	d86e      	bhi.n	3c4 <am_devices_led_init+0x264>
     2e6:	f001 fbff 	bl	1ae8 <am_hal_interrupt_master_disable>
     2ea:	4603      	mov	r3, r0
     2ec:	60bb      	str	r3, [r7, #8]
     2ee:	4b53      	ldr	r3, [pc, #332]	; (43c <am_devices_led_init+0x2dc>)
     2f0:	2273      	movs	r2, #115	; 0x73
     2f2:	601a      	str	r2, [r3, #0]
     2f4:	687b      	ldr	r3, [r7, #4]
     2f6:	681b      	ldr	r3, [r3, #0]
     2f8:	085b      	lsrs	r3, r3, #1
     2fa:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     2fe:	4b50      	ldr	r3, [pc, #320]	; (440 <am_devices_led_init+0x2e0>)
     300:	4413      	add	r3, r2
     302:	461c      	mov	r4, r3
     304:	687b      	ldr	r3, [r7, #4]
     306:	681b      	ldr	r3, [r3, #0]
     308:	009b      	lsls	r3, r3, #2
     30a:	f003 031c 	and.w	r3, r3, #28
     30e:	2206      	movs	r2, #6
     310:	409a      	lsls	r2, r3
     312:	687b      	ldr	r3, [r7, #4]
     314:	681b      	ldr	r3, [r3, #0]
     316:	085b      	lsrs	r3, r3, #1
     318:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     31c:	4b48      	ldr	r3, [pc, #288]	; (440 <am_devices_led_init+0x2e0>)
     31e:	440b      	add	r3, r1
     320:	6819      	ldr	r1, [r3, #0]
     322:	687b      	ldr	r3, [r7, #4]
     324:	681b      	ldr	r3, [r3, #0]
     326:	009b      	lsls	r3, r3, #2
     328:	f003 031c 	and.w	r3, r3, #28
     32c:	2007      	movs	r0, #7
     32e:	fa00 f303 	lsl.w	r3, r0, r3
     332:	43db      	mvns	r3, r3
     334:	400b      	ands	r3, r1
     336:	4313      	orrs	r3, r2
     338:	6023      	str	r3, [r4, #0]
     33a:	687b      	ldr	r3, [r7, #4]
     33c:	681b      	ldr	r3, [r3, #0]
     33e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     342:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     346:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     34a:	461c      	mov	r4, r3
     34c:	687b      	ldr	r3, [r7, #4]
     34e:	681b      	ldr	r3, [r3, #0]
     350:	00db      	lsls	r3, r3, #3
     352:	f003 0318 	and.w	r3, r3, #24
     356:	2218      	movs	r2, #24
     358:	409a      	lsls	r2, r3
     35a:	687b      	ldr	r3, [r7, #4]
     35c:	681b      	ldr	r3, [r3, #0]
     35e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     362:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     366:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     36a:	6819      	ldr	r1, [r3, #0]
     36c:	687b      	ldr	r3, [r7, #4]
     36e:	681b      	ldr	r3, [r3, #0]
     370:	00db      	lsls	r3, r3, #3
     372:	f003 0318 	and.w	r3, r3, #24
     376:	20ff      	movs	r0, #255	; 0xff
     378:	fa00 f303 	lsl.w	r3, r0, r3
     37c:	43db      	mvns	r3, r3
     37e:	400b      	ands	r3, r1
     380:	4313      	orrs	r3, r2
     382:	6023      	str	r3, [r4, #0]
     384:	687b      	ldr	r3, [r7, #4]
     386:	681b      	ldr	r3, [r3, #0]
     388:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     38c:	4b2d      	ldr	r3, [pc, #180]	; (444 <am_devices_led_init+0x2e4>)
     38e:	4413      	add	r3, r2
     390:	4618      	mov	r0, r3
     392:	687b      	ldr	r3, [r7, #4]
     394:	681b      	ldr	r3, [r3, #0]
     396:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     39a:	4b2a      	ldr	r3, [pc, #168]	; (444 <am_devices_led_init+0x2e4>)
     39c:	4413      	add	r3, r2
     39e:	681a      	ldr	r2, [r3, #0]
     3a0:	687b      	ldr	r3, [r7, #4]
     3a2:	681b      	ldr	r3, [r3, #0]
     3a4:	00db      	lsls	r3, r3, #3
     3a6:	f003 0318 	and.w	r3, r3, #24
     3aa:	21ff      	movs	r1, #255	; 0xff
     3ac:	fa01 f303 	lsl.w	r3, r1, r3
     3b0:	43db      	mvns	r3, r3
     3b2:	4013      	ands	r3, r2
     3b4:	6003      	str	r3, [r0, #0]
     3b6:	4b21      	ldr	r3, [pc, #132]	; (43c <am_devices_led_init+0x2dc>)
     3b8:	2200      	movs	r2, #0
     3ba:	601a      	str	r2, [r3, #0]
     3bc:	68bb      	ldr	r3, [r7, #8]
     3be:	4618      	mov	r0, r3
     3c0:	f001 fb96 	bl	1af0 <am_hal_interrupt_master_set>
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     3c4:	687b      	ldr	r3, [r7, #4]
     3c6:	681b      	ldr	r3, [r3, #0]
     3c8:	08db      	lsrs	r3, r3, #3
     3ca:	f003 0204 	and.w	r2, r3, #4
     3ce:	4b1e      	ldr	r3, [pc, #120]	; (448 <am_devices_led_init+0x2e8>)
     3d0:	4413      	add	r3, r2
     3d2:	4619      	mov	r1, r3
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	681b      	ldr	r3, [r3, #0]
     3d8:	f003 031f 	and.w	r3, r3, #31
     3dc:	2201      	movs	r2, #1
     3de:	fa02 f303 	lsl.w	r3, r2, r3
     3e2:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     3e4:	687b      	ldr	r3, [r7, #4]
     3e6:	685b      	ldr	r3, [r3, #4]
     3e8:	f003 0301 	and.w	r3, r3, #1
     3ec:	2b00      	cmp	r3, #0
     3ee:	d010      	beq.n	412 <am_devices_led_init+0x2b2>
     3f0:	687b      	ldr	r3, [r7, #4]
     3f2:	681b      	ldr	r3, [r3, #0]
     3f4:	08db      	lsrs	r3, r3, #3
     3f6:	f003 0204 	and.w	r2, r3, #4
     3fa:	4b14      	ldr	r3, [pc, #80]	; (44c <am_devices_led_init+0x2ec>)
     3fc:	4413      	add	r3, r2
     3fe:	4619      	mov	r1, r3
     400:	687b      	ldr	r3, [r7, #4]
     402:	681b      	ldr	r3, [r3, #0]
     404:	f003 031f 	and.w	r3, r3, #31
     408:	2201      	movs	r2, #1
     40a:	fa02 f303 	lsl.w	r3, r2, r3
     40e:	600b      	str	r3, [r1, #0]
     410:	e011      	b.n	436 <am_devices_led_init+0x2d6>
     412:	687b      	ldr	r3, [r7, #4]
     414:	681b      	ldr	r3, [r3, #0]
     416:	08db      	lsrs	r3, r3, #3
     418:	f003 0204 	and.w	r2, r3, #4
     41c:	4b0c      	ldr	r3, [pc, #48]	; (450 <am_devices_led_init+0x2f0>)
     41e:	4413      	add	r3, r2
     420:	4619      	mov	r1, r3
     422:	687b      	ldr	r3, [r7, #4]
     424:	681b      	ldr	r3, [r3, #0]
     426:	f003 031f 	and.w	r3, r3, #31
     42a:	2201      	movs	r2, #1
     42c:	fa02 f303 	lsl.w	r3, r2, r3
     430:	600b      	str	r3, [r1, #0]
     432:	e000      	b.n	436 <am_devices_led_init+0x2d6>
        return;
     434:	bf00      	nop
}
     436:	3714      	adds	r7, #20
     438:	46bd      	mov	sp, r7
     43a:	bd90      	pop	{r4, r7, pc}
     43c:	40010060 	.word	0x40010060
     440:	40010040 	.word	0x40010040
     444:	400100e0 	.word	0x400100e0
     448:	400100b4 	.word	0x400100b4
     44c:	40010090 	.word	0x40010090
     450:	40010098 	.word	0x40010098

00000454 <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
     454:	b580      	push	{r7, lr}
     456:	b084      	sub	sp, #16
     458:	af00      	add	r7, sp, #0
     45a:	6078      	str	r0, [r7, #4]
     45c:	6039      	str	r1, [r7, #0]
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
     45e:	687b      	ldr	r3, [r7, #4]
     460:	2b00      	cmp	r3, #0
     462:	d014      	beq.n	48e <am_devices_led_array_init+0x3a>
     464:	683b      	ldr	r3, [r7, #0]
     466:	2b1f      	cmp	r3, #31
     468:	d811      	bhi.n	48e <am_devices_led_array_init+0x3a>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     46a:	2300      	movs	r3, #0
     46c:	60fb      	str	r3, [r7, #12]
     46e:	e009      	b.n	484 <am_devices_led_array_init+0x30>
    {
        am_devices_led_init(psLEDs + i);
     470:	68fb      	ldr	r3, [r7, #12]
     472:	00db      	lsls	r3, r3, #3
     474:	687a      	ldr	r2, [r7, #4]
     476:	4413      	add	r3, r2
     478:	4618      	mov	r0, r3
     47a:	f7ff fe71 	bl	160 <am_devices_led_init>
    for ( i = 0; i < ui32NumLEDs; i++ )
     47e:	68fb      	ldr	r3, [r7, #12]
     480:	3301      	adds	r3, #1
     482:	60fb      	str	r3, [r7, #12]
     484:	68fa      	ldr	r2, [r7, #12]
     486:	683b      	ldr	r3, [r7, #0]
     488:	429a      	cmp	r2, r3
     48a:	d3f1      	bcc.n	470 <am_devices_led_array_init+0x1c>
     48c:	e000      	b.n	490 <am_devices_led_array_init+0x3c>
        return;
     48e:	bf00      	nop
    }
}
     490:	3710      	adds	r7, #16
     492:	46bd      	mov	sp, r7
     494:	bd80      	pop	{r7, pc}
	...

00000498 <am_devices_led_on>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     498:	b480      	push	{r7}
     49a:	b083      	sub	sp, #12
     49c:	af00      	add	r7, sp, #0
     49e:	6078      	str	r0, [r7, #4]
     4a0:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
     4a2:	687b      	ldr	r3, [r7, #4]
     4a4:	2b00      	cmp	r3, #0
     4a6:	d060      	beq.n	56a <am_devices_led_on+0xd2>
     4a8:	683b      	ldr	r3, [r7, #0]
     4aa:	2b1e      	cmp	r3, #30
     4ac:	d85d      	bhi.n	56a <am_devices_led_on+0xd2>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
     4ae:	683b      	ldr	r3, [r7, #0]
     4b0:	00db      	lsls	r3, r3, #3
     4b2:	687a      	ldr	r2, [r7, #4]
     4b4:	4413      	add	r3, r2
     4b6:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
     4b8:	2b31      	cmp	r3, #49	; 0x31
     4ba:	d856      	bhi.n	56a <am_devices_led_on+0xd2>
    }
#else // AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     4bc:	683b      	ldr	r3, [r7, #0]
     4be:	00db      	lsls	r3, r3, #3
     4c0:	687a      	ldr	r2, [r7, #4]
     4c2:	4413      	add	r3, r2
     4c4:	685b      	ldr	r3, [r3, #4]
     4c6:	f003 0302 	and.w	r3, r3, #2
     4ca:	2b00      	cmp	r3, #0
     4cc:	d036      	beq.n	53c <am_devices_led_on+0xa4>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     4ce:	683b      	ldr	r3, [r7, #0]
     4d0:	00db      	lsls	r3, r3, #3
     4d2:	687a      	ldr	r2, [r7, #4]
     4d4:	4413      	add	r3, r2
     4d6:	685b      	ldr	r3, [r3, #4]
     4d8:	f003 0301 	and.w	r3, r3, #1
     4dc:	2b00      	cmp	r3, #0
     4de:	d016      	beq.n	50e <am_devices_led_on+0x76>
     4e0:	683b      	ldr	r3, [r7, #0]
     4e2:	00db      	lsls	r3, r3, #3
     4e4:	687a      	ldr	r2, [r7, #4]
     4e6:	4413      	add	r3, r2
     4e8:	681b      	ldr	r3, [r3, #0]
     4ea:	08db      	lsrs	r3, r3, #3
     4ec:	f003 0204 	and.w	r2, r3, #4
     4f0:	4b21      	ldr	r3, [pc, #132]	; (578 <am_devices_led_on+0xe0>)
     4f2:	4413      	add	r3, r2
     4f4:	4619      	mov	r1, r3
     4f6:	683b      	ldr	r3, [r7, #0]
     4f8:	00db      	lsls	r3, r3, #3
     4fa:	687a      	ldr	r2, [r7, #4]
     4fc:	4413      	add	r3, r2
     4fe:	681b      	ldr	r3, [r3, #0]
     500:	f003 031f 	and.w	r3, r3, #31
     504:	2201      	movs	r2, #1
     506:	fa02 f303 	lsl.w	r3, r2, r3
     50a:	600b      	str	r3, [r1, #0]
     50c:	e02e      	b.n	56c <am_devices_led_on+0xd4>
     50e:	683b      	ldr	r3, [r7, #0]
     510:	00db      	lsls	r3, r3, #3
     512:	687a      	ldr	r2, [r7, #4]
     514:	4413      	add	r3, r2
     516:	681b      	ldr	r3, [r3, #0]
     518:	08db      	lsrs	r3, r3, #3
     51a:	f003 0204 	and.w	r2, r3, #4
     51e:	4b17      	ldr	r3, [pc, #92]	; (57c <am_devices_led_on+0xe4>)
     520:	4413      	add	r3, r2
     522:	4619      	mov	r1, r3
     524:	683b      	ldr	r3, [r7, #0]
     526:	00db      	lsls	r3, r3, #3
     528:	687a      	ldr	r2, [r7, #4]
     52a:	4413      	add	r3, r2
     52c:	681b      	ldr	r3, [r3, #0]
     52e:	f003 031f 	and.w	r3, r3, #31
     532:	2201      	movs	r2, #1
     534:	fa02 f303 	lsl.w	r3, r2, r3
     538:	600b      	str	r3, [r1, #0]
     53a:	e017      	b.n	56c <am_devices_led_on+0xd4>
    else
    {
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
     53c:	683b      	ldr	r3, [r7, #0]
     53e:	00db      	lsls	r3, r3, #3
     540:	687a      	ldr	r2, [r7, #4]
     542:	4413      	add	r3, r2
     544:	681b      	ldr	r3, [r3, #0]
     546:	08db      	lsrs	r3, r3, #3
     548:	f003 0204 	and.w	r2, r3, #4
     54c:	4b0c      	ldr	r3, [pc, #48]	; (580 <am_devices_led_on+0xe8>)
     54e:	4413      	add	r3, r2
     550:	4619      	mov	r1, r3
     552:	683b      	ldr	r3, [r7, #0]
     554:	00db      	lsls	r3, r3, #3
     556:	687a      	ldr	r2, [r7, #4]
     558:	4413      	add	r3, r2
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f003 031f 	and.w	r3, r3, #31
     560:	2201      	movs	r2, #1
     562:	fa02 f303 	lsl.w	r3, r2, r3
     566:	600b      	str	r3, [r1, #0]
     568:	e000      	b.n	56c <am_devices_led_on+0xd4>
        return;
     56a:	bf00      	nop
    }
#endif //AM_APOLLO3_GPIO
}
     56c:	370c      	adds	r7, #12
     56e:	46bd      	mov	sp, r7
     570:	f85d 7b04 	ldr.w	r7, [sp], #4
     574:	4770      	bx	lr
     576:	bf00      	nop
     578:	40010090 	.word	0x40010090
     57c:	40010098 	.word	0x40010098
     580:	400100a8 	.word	0x400100a8

00000584 <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     584:	b480      	push	{r7}
     586:	b083      	sub	sp, #12
     588:	af00      	add	r7, sp, #0
     58a:	6078      	str	r0, [r7, #4]
     58c:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
     58e:	687b      	ldr	r3, [r7, #4]
     590:	2b00      	cmp	r3, #0
     592:	d060      	beq.n	656 <am_devices_led_off+0xd2>
     594:	683b      	ldr	r3, [r7, #0]
     596:	2b1e      	cmp	r3, #30
     598:	d85d      	bhi.n	656 <am_devices_led_off+0xd2>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
     59a:	683b      	ldr	r3, [r7, #0]
     59c:	00db      	lsls	r3, r3, #3
     59e:	687a      	ldr	r2, [r7, #4]
     5a0:	4413      	add	r3, r2
     5a2:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
     5a4:	2b31      	cmp	r3, #49	; 0x31
     5a6:	d856      	bhi.n	656 <am_devices_led_off+0xd2>
    }
#else
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     5a8:	683b      	ldr	r3, [r7, #0]
     5aa:	00db      	lsls	r3, r3, #3
     5ac:	687a      	ldr	r2, [r7, #4]
     5ae:	4413      	add	r3, r2
     5b0:	685b      	ldr	r3, [r3, #4]
     5b2:	f003 0302 	and.w	r3, r3, #2
     5b6:	2b00      	cmp	r3, #0
     5b8:	d036      	beq.n	628 <am_devices_led_off+0xa4>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     5ba:	683b      	ldr	r3, [r7, #0]
     5bc:	00db      	lsls	r3, r3, #3
     5be:	687a      	ldr	r2, [r7, #4]
     5c0:	4413      	add	r3, r2
     5c2:	685b      	ldr	r3, [r3, #4]
     5c4:	f003 0301 	and.w	r3, r3, #1
     5c8:	2b00      	cmp	r3, #0
     5ca:	d116      	bne.n	5fa <am_devices_led_off+0x76>
     5cc:	683b      	ldr	r3, [r7, #0]
     5ce:	00db      	lsls	r3, r3, #3
     5d0:	687a      	ldr	r2, [r7, #4]
     5d2:	4413      	add	r3, r2
     5d4:	681b      	ldr	r3, [r3, #0]
     5d6:	08db      	lsrs	r3, r3, #3
     5d8:	f003 0204 	and.w	r2, r3, #4
     5dc:	4b21      	ldr	r3, [pc, #132]	; (664 <am_devices_led_off+0xe0>)
     5de:	4413      	add	r3, r2
     5e0:	4619      	mov	r1, r3
     5e2:	683b      	ldr	r3, [r7, #0]
     5e4:	00db      	lsls	r3, r3, #3
     5e6:	687a      	ldr	r2, [r7, #4]
     5e8:	4413      	add	r3, r2
     5ea:	681b      	ldr	r3, [r3, #0]
     5ec:	f003 031f 	and.w	r3, r3, #31
     5f0:	2201      	movs	r2, #1
     5f2:	fa02 f303 	lsl.w	r3, r2, r3
     5f6:	600b      	str	r3, [r1, #0]
     5f8:	e02e      	b.n	658 <am_devices_led_off+0xd4>
     5fa:	683b      	ldr	r3, [r7, #0]
     5fc:	00db      	lsls	r3, r3, #3
     5fe:	687a      	ldr	r2, [r7, #4]
     600:	4413      	add	r3, r2
     602:	681b      	ldr	r3, [r3, #0]
     604:	08db      	lsrs	r3, r3, #3
     606:	f003 0204 	and.w	r2, r3, #4
     60a:	4b17      	ldr	r3, [pc, #92]	; (668 <am_devices_led_off+0xe4>)
     60c:	4413      	add	r3, r2
     60e:	4619      	mov	r1, r3
     610:	683b      	ldr	r3, [r7, #0]
     612:	00db      	lsls	r3, r3, #3
     614:	687a      	ldr	r2, [r7, #4]
     616:	4413      	add	r3, r2
     618:	681b      	ldr	r3, [r3, #0]
     61a:	f003 031f 	and.w	r3, r3, #31
     61e:	2201      	movs	r2, #1
     620:	fa02 f303 	lsl.w	r3, r2, r3
     624:	600b      	str	r3, [r1, #0]
     626:	e017      	b.n	658 <am_devices_led_off+0xd4>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
     628:	683b      	ldr	r3, [r7, #0]
     62a:	00db      	lsls	r3, r3, #3
     62c:	687a      	ldr	r2, [r7, #4]
     62e:	4413      	add	r3, r2
     630:	681b      	ldr	r3, [r3, #0]
     632:	08db      	lsrs	r3, r3, #3
     634:	f003 0204 	and.w	r2, r3, #4
     638:	4b0c      	ldr	r3, [pc, #48]	; (66c <am_devices_led_off+0xe8>)
     63a:	4413      	add	r3, r2
     63c:	4619      	mov	r1, r3
     63e:	683b      	ldr	r3, [r7, #0]
     640:	00db      	lsls	r3, r3, #3
     642:	687a      	ldr	r2, [r7, #4]
     644:	4413      	add	r3, r2
     646:	681b      	ldr	r3, [r3, #0]
     648:	f003 031f 	and.w	r3, r3, #31
     64c:	2201      	movs	r2, #1
     64e:	fa02 f303 	lsl.w	r3, r2, r3
     652:	600b      	str	r3, [r1, #0]
     654:	e000      	b.n	658 <am_devices_led_off+0xd4>
        return;
     656:	bf00      	nop
    }
#endif
}
     658:	370c      	adds	r7, #12
     65a:	46bd      	mov	sp, r7
     65c:	f85d 7b04 	ldr.w	r7, [sp], #4
     660:	4770      	bx	lr
     662:	bf00      	nop
     664:	40010090 	.word	0x40010090
     668:	40010098 	.word	0x40010098
     66c:	400100b4 	.word	0x400100b4

00000670 <am_devices_led_toggle>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     670:	b580      	push	{r7, lr}
     672:	b084      	sub	sp, #16
     674:	af00      	add	r7, sp, #0
     676:	6078      	str	r0, [r7, #4]
     678:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
     67a:	687b      	ldr	r3, [r7, #4]
     67c:	2b00      	cmp	r3, #0
     67e:	d076      	beq.n	76e <am_devices_led_toggle+0xfe>
     680:	683b      	ldr	r3, [r7, #0]
     682:	2b1e      	cmp	r3, #30
     684:	d873      	bhi.n	76e <am_devices_led_toggle+0xfe>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
     686:	683b      	ldr	r3, [r7, #0]
     688:	00db      	lsls	r3, r3, #3
     68a:	687a      	ldr	r2, [r7, #4]
     68c:	4413      	add	r3, r2
     68e:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
     690:	2b31      	cmp	r3, #49	; 0x31
     692:	d86c      	bhi.n	76e <am_devices_led_toggle+0xfe>
    }
#else
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     694:	683b      	ldr	r3, [r7, #0]
     696:	00db      	lsls	r3, r3, #3
     698:	687a      	ldr	r2, [r7, #4]
     69a:	4413      	add	r3, r2
     69c:	685b      	ldr	r3, [r3, #4]
     69e:	f003 0302 	and.w	r3, r3, #2
     6a2:	2b00      	cmp	r3, #0
     6a4:	d02a      	beq.n	6fc <am_devices_led_toggle+0x8c>
    {
        am_hal_gpio_out_bit_toggle(psLEDs[ui32LEDNum].ui32GPIONumber);
     6a6:	f001 fa1f 	bl	1ae8 <am_hal_interrupt_master_disable>
     6aa:	4603      	mov	r3, r0
     6ac:	60fb      	str	r3, [r7, #12]
     6ae:	683b      	ldr	r3, [r7, #0]
     6b0:	00db      	lsls	r3, r3, #3
     6b2:	687a      	ldr	r2, [r7, #4]
     6b4:	4413      	add	r3, r2
     6b6:	681b      	ldr	r3, [r3, #0]
     6b8:	08db      	lsrs	r3, r3, #3
     6ba:	f003 0204 	and.w	r2, r3, #4
     6be:	4b2e      	ldr	r3, [pc, #184]	; (778 <am_devices_led_toggle+0x108>)
     6c0:	4413      	add	r3, r2
     6c2:	4618      	mov	r0, r3
     6c4:	683b      	ldr	r3, [r7, #0]
     6c6:	00db      	lsls	r3, r3, #3
     6c8:	687a      	ldr	r2, [r7, #4]
     6ca:	4413      	add	r3, r2
     6cc:	681b      	ldr	r3, [r3, #0]
     6ce:	08db      	lsrs	r3, r3, #3
     6d0:	f003 0204 	and.w	r2, r3, #4
     6d4:	4b28      	ldr	r3, [pc, #160]	; (778 <am_devices_led_toggle+0x108>)
     6d6:	4413      	add	r3, r2
     6d8:	681a      	ldr	r2, [r3, #0]
     6da:	683b      	ldr	r3, [r7, #0]
     6dc:	00db      	lsls	r3, r3, #3
     6de:	6879      	ldr	r1, [r7, #4]
     6e0:	440b      	add	r3, r1
     6e2:	681b      	ldr	r3, [r3, #0]
     6e4:	f003 031f 	and.w	r3, r3, #31
     6e8:	2101      	movs	r1, #1
     6ea:	fa01 f303 	lsl.w	r3, r1, r3
     6ee:	4053      	eors	r3, r2
     6f0:	6003      	str	r3, [r0, #0]
     6f2:	68fb      	ldr	r3, [r7, #12]
     6f4:	4618      	mov	r0, r3
     6f6:	f001 f9fb 	bl	1af0 <am_hal_interrupt_master_set>
     6fa:	e039      	b.n	770 <am_devices_led_toggle+0x100>
    else
    {
        //
        // Check to see if the LED pin is enabled.
        //
        if ( am_hal_gpio_out_enable_bit_get(psLEDs[ui32LEDNum].ui32GPIONumber) )
     6fc:	683b      	ldr	r3, [r7, #0]
     6fe:	00db      	lsls	r3, r3, #3
     700:	687a      	ldr	r2, [r7, #4]
     702:	4413      	add	r3, r2
     704:	681b      	ldr	r3, [r3, #0]
     706:	4618      	mov	r0, r3
     708:	f001 f9e0 	bl	1acc <am_hal_gpio_out_enable_bit_get>
     70c:	4603      	mov	r3, r0
     70e:	2b00      	cmp	r3, #0
     710:	d016      	beq.n	740 <am_devices_led_toggle+0xd0>
        {
            //
            // If it was enabled, turn if off.
            //
            am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
     712:	683b      	ldr	r3, [r7, #0]
     714:	00db      	lsls	r3, r3, #3
     716:	687a      	ldr	r2, [r7, #4]
     718:	4413      	add	r3, r2
     71a:	681b      	ldr	r3, [r3, #0]
     71c:	08db      	lsrs	r3, r3, #3
     71e:	f003 0204 	and.w	r2, r3, #4
     722:	4b16      	ldr	r3, [pc, #88]	; (77c <am_devices_led_toggle+0x10c>)
     724:	4413      	add	r3, r2
     726:	4619      	mov	r1, r3
     728:	683b      	ldr	r3, [r7, #0]
     72a:	00db      	lsls	r3, r3, #3
     72c:	687a      	ldr	r2, [r7, #4]
     72e:	4413      	add	r3, r2
     730:	681b      	ldr	r3, [r3, #0]
     732:	f003 031f 	and.w	r3, r3, #31
     736:	2201      	movs	r2, #1
     738:	fa02 f303 	lsl.w	r3, r2, r3
     73c:	600b      	str	r3, [r1, #0]
     73e:	e017      	b.n	770 <am_devices_led_toggle+0x100>
        else
        {
            //
            // If it was not enabled, turn if on.
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
     740:	683b      	ldr	r3, [r7, #0]
     742:	00db      	lsls	r3, r3, #3
     744:	687a      	ldr	r2, [r7, #4]
     746:	4413      	add	r3, r2
     748:	681b      	ldr	r3, [r3, #0]
     74a:	08db      	lsrs	r3, r3, #3
     74c:	f003 0204 	and.w	r2, r3, #4
     750:	4b0b      	ldr	r3, [pc, #44]	; (780 <am_devices_led_toggle+0x110>)
     752:	4413      	add	r3, r2
     754:	4619      	mov	r1, r3
     756:	683b      	ldr	r3, [r7, #0]
     758:	00db      	lsls	r3, r3, #3
     75a:	687a      	ldr	r2, [r7, #4]
     75c:	4413      	add	r3, r2
     75e:	681b      	ldr	r3, [r3, #0]
     760:	f003 031f 	and.w	r3, r3, #31
     764:	2201      	movs	r2, #1
     766:	fa02 f303 	lsl.w	r3, r2, r3
     76a:	600b      	str	r3, [r1, #0]
     76c:	e000      	b.n	770 <am_devices_led_toggle+0x100>
        return;
     76e:	bf00      	nop
        }
    }
#endif
}
     770:	3710      	adds	r7, #16
     772:	46bd      	mov	sp, r7
     774:	bd80      	pop	{r7, pc}
     776:	bf00      	nop
     778:	40010088 	.word	0x40010088
     77c:	400100b4 	.word	0x400100b4
     780:	400100a8 	.word	0x400100a8

00000784 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     784:	b580      	push	{r7, lr}
     786:	b086      	sub	sp, #24
     788:	af00      	add	r7, sp, #0
    bool bNewClkout, bOldClkout;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     78a:	2000      	movs	r0, #0
     78c:	f001 f954 	bl	1a38 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     790:	4859      	ldr	r0, [pc, #356]	; (8f8 <main+0x174>)
     792:	f001 f8bb 	bl	190c <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     796:	f001 f831 	bl	17fc <am_bsp_low_power_init>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     79a:	4858      	ldr	r0, [pc, #352]	; (8fc <main+0x178>)
     79c:	f000 f982 	bl	aa4 <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     7a0:	f001 f9a2 	bl	1ae8 <am_hal_interrupt_master_disable>
     7a4:	4603      	mov	r3, r0
     7a6:	60bb      	str	r3, [r7, #8]
     7a8:	4b55      	ldr	r3, [pc, #340]	; (900 <main+0x17c>)
     7aa:	2273      	movs	r2, #115	; 0x73
     7ac:	601a      	str	r2, [r3, #0]
     7ae:	4a55      	ldr	r2, [pc, #340]	; (904 <main+0x180>)
     7b0:	4b54      	ldr	r3, [pc, #336]	; (904 <main+0x180>)
     7b2:	681b      	ldr	r3, [r3, #0]
     7b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     7b8:	6013      	str	r3, [r2, #0]
     7ba:	4a53      	ldr	r2, [pc, #332]	; (908 <main+0x184>)
     7bc:	4b52      	ldr	r3, [pc, #328]	; (908 <main+0x184>)
     7be:	681b      	ldr	r3, [r3, #0]
     7c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     7c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     7c8:	6013      	str	r3, [r2, #0]
     7ca:	4a50      	ldr	r2, [pc, #320]	; (90c <main+0x188>)
     7cc:	4b4f      	ldr	r3, [pc, #316]	; (90c <main+0x188>)
     7ce:	681b      	ldr	r3, [r3, #0]
     7d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     7d4:	6013      	str	r3, [r2, #0]
     7d6:	4b4a      	ldr	r3, [pc, #296]	; (900 <main+0x17c>)
     7d8:	2200      	movs	r2, #0
     7da:	601a      	str	r2, [r3, #0]
     7dc:	68bb      	ldr	r3, [r7, #8]
     7de:	4618      	mov	r0, r3
     7e0:	f001 f986 	bl	1af0 <am_hal_interrupt_master_set>

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     7e4:	f001 f988 	bl	1af8 <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     7e8:	f001 f81a 	bl	1820 <am_bsp_debug_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
     7ec:	f000 fffc 	bl	17e8 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("CLKOUT to LED Example\n");
     7f0:	4847      	ldr	r0, [pc, #284]	; (910 <main+0x18c>)
     7f2:	f000 ffdb 	bl	17ac <am_util_stdio_printf>
    am_util_stdio_printf("\tWalks the board LEDs about once a second based on the CLKOUT "
     7f6:	4847      	ldr	r0, [pc, #284]	; (914 <main+0x190>)
     7f8:	f000 ffd8 	bl	17ac <am_util_stdio_printf>
                         "signal.\n");

    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
     7fc:	f001 f850 	bl	18a0 <am_bsp_debug_printf_disable>

    //
    // Clear the LED.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
     800:	2105      	movs	r1, #5
     802:	4845      	ldr	r0, [pc, #276]	; (918 <main+0x194>)
     804:	f7ff fe26 	bl	454 <am_devices_led_array_init>

    //
    // Enable the LFRC.
    //
    am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_LFRC);
     808:	2002      	movs	r0, #2
     80a:	f001 f93d 	bl	1a88 <am_hal_clkgen_osc_start>

    //
    // Enable the clockout to the desired pin.
    // And make it readable on the pin with AM_HAL_GPIO_INPEN
    //
    am_hal_gpio_pin_config(AM_BSP_GPIO_CLKOUT_PIN,
     80e:	f001 f96b 	bl	1ae8 <am_hal_interrupt_master_disable>
     812:	4603      	mov	r3, r0
     814:	607b      	str	r3, [r7, #4]
     816:	4b3a      	ldr	r3, [pc, #232]	; (900 <main+0x17c>)
     818:	2273      	movs	r2, #115	; 0x73
     81a:	601a      	str	r2, [r3, #0]
     81c:	4a3f      	ldr	r2, [pc, #252]	; (91c <main+0x198>)
     81e:	4b3f      	ldr	r3, [pc, #252]	; (91c <main+0x198>)
     820:	681b      	ldr	r3, [r3, #0]
     822:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
     826:	6013      	str	r3, [r2, #0]
     828:	4a3d      	ldr	r2, [pc, #244]	; (920 <main+0x19c>)
     82a:	4b3d      	ldr	r3, [pc, #244]	; (920 <main+0x19c>)
     82c:	681b      	ldr	r3, [r3, #0]
     82e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     832:	f043 5390 	orr.w	r3, r3, #301989888	; 0x12000000
     836:	6013      	str	r3, [r2, #0]
     838:	4a3a      	ldr	r2, [pc, #232]	; (924 <main+0x1a0>)
     83a:	4b3a      	ldr	r3, [pc, #232]	; (924 <main+0x1a0>)
     83c:	681b      	ldr	r3, [r3, #0]
     83e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     842:	6013      	str	r3, [r2, #0]
     844:	4b2e      	ldr	r3, [pc, #184]	; (900 <main+0x17c>)
     846:	2200      	movs	r2, #0
     848:	601a      	str	r2, [r3, #0]
     84a:	687b      	ldr	r3, [r7, #4]
     84c:	4618      	mov	r0, r3
     84e:	f001 f94f 	bl	1af0 <am_hal_interrupt_master_set>
                           (AM_BSP_GPIO_CFG_CLKOUT_PIN | AM_HAL_GPIO_INPEN));

    //
    // Initialize clkgen to output the selected clock.
    //
    am_hal_clkgen_clkout_enable(AM_HAL_CLKGEN_CLKOUT_CKSEL_LFRC_DIV2);
     852:	2023      	movs	r0, #35	; 0x23
     854:	f001 f92c 	bl	1ab0 <am_hal_clkgen_clkout_enable>

    //
    // Initialize LED 0 to on
    //
    am_devices_led_toggle(am_bsp_psLEDs, 0);
     858:	2100      	movs	r1, #0
     85a:	482f      	ldr	r0, [pc, #188]	; (918 <main+0x194>)
     85c:	f7ff ff08 	bl	670 <am_devices_led_toggle>
    iLEDcount = 1;      // LED 1 is next
     860:	2301      	movs	r3, #1
     862:	613b      	str	r3, [r7, #16]

    //
    // Initialize loop variables
    //
    iRisingCount = RISING_EDGE_COUNT;
     864:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
     868:	617b      	str	r3, [r7, #20]
    bOldClkout = false;
     86a:	2300      	movs	r3, #0
     86c:	73fb      	strb	r3, [r7, #15]
    while (1)
    {
        //
        // Grab new clock output value and look for a change.
        //
        bNewClkout = am_hal_gpio_input_bit_read(AM_BSP_GPIO_CLKOUT_PIN);
     86e:	4b2e      	ldr	r3, [pc, #184]	; (928 <main+0x1a4>)
     870:	681b      	ldr	r3, [r3, #0]
     872:	f003 0380 	and.w	r3, r3, #128	; 0x80
     876:	2b00      	cmp	r3, #0
     878:	bf14      	ite	ne
     87a:	2301      	movne	r3, #1
     87c:	2300      	moveq	r3, #0
     87e:	73bb      	strb	r3, [r7, #14]

        //
        // Look for any change.
        //
        if ( bOldClkout != bNewClkout )
     880:	7bfa      	ldrb	r2, [r7, #15]
     882:	7bbb      	ldrb	r3, [r7, #14]
     884:	429a      	cmp	r2, r3
     886:	d0f2      	beq.n	86e <main+0xea>
        {
            //
            // OK a change occurred.
            //
            bOldClkout = bNewClkout;
     888:	7bbb      	ldrb	r3, [r7, #14]
     88a:	73fb      	strb	r3, [r7, #15]

            //
            //  Was it rising or falling.
            //
            if ( bNewClkout )
     88c:	7bbb      	ldrb	r3, [r7, #14]
     88e:	2b00      	cmp	r3, #0
     890:	d0ed      	beq.n	86e <main+0xea>
            {
                //
                // It was rising so count them until time to act.
                //
                if (--iRisingCount < 0)
     892:	697b      	ldr	r3, [r7, #20]
     894:	3b01      	subs	r3, #1
     896:	617b      	str	r3, [r7, #20]
     898:	697b      	ldr	r3, [r7, #20]
     89a:	2b00      	cmp	r3, #0
     89c:	dae7      	bge.n	86e <main+0xea>
                {
                    //
                    // Act on the time out (walk the 4 LEDs)
                    //
                    am_devices_led_off(am_bsp_psLEDs, 0);
     89e:	2100      	movs	r1, #0
     8a0:	481d      	ldr	r0, [pc, #116]	; (918 <main+0x194>)
     8a2:	f7ff fe6f 	bl	584 <am_devices_led_off>
                    am_devices_led_off(am_bsp_psLEDs, 1);
     8a6:	2101      	movs	r1, #1
     8a8:	481b      	ldr	r0, [pc, #108]	; (918 <main+0x194>)
     8aa:	f7ff fe6b 	bl	584 <am_devices_led_off>
                    am_devices_led_off(am_bsp_psLEDs, 2);
     8ae:	2102      	movs	r1, #2
     8b0:	4819      	ldr	r0, [pc, #100]	; (918 <main+0x194>)
     8b2:	f7ff fe67 	bl	584 <am_devices_led_off>
                    am_devices_led_off(am_bsp_psLEDs, 3);
     8b6:	2103      	movs	r1, #3
     8b8:	4817      	ldr	r0, [pc, #92]	; (918 <main+0x194>)
     8ba:	f7ff fe63 	bl	584 <am_devices_led_off>
                    am_devices_led_off(am_bsp_psLEDs, 4);
     8be:	2104      	movs	r1, #4
     8c0:	4815      	ldr	r0, [pc, #84]	; (918 <main+0x194>)
     8c2:	f7ff fe5f 	bl	584 <am_devices_led_off>
                    am_devices_led_on(am_bsp_psLEDs, iLEDcount);
     8c6:	693b      	ldr	r3, [r7, #16]
     8c8:	4619      	mov	r1, r3
     8ca:	4813      	ldr	r0, [pc, #76]	; (918 <main+0x194>)
     8cc:	f7ff fde4 	bl	498 <am_devices_led_on>
                    iLEDcount++;
     8d0:	693b      	ldr	r3, [r7, #16]
     8d2:	3301      	adds	r3, #1
     8d4:	613b      	str	r3, [r7, #16]
                    iLEDcount %= 5;
     8d6:	693a      	ldr	r2, [r7, #16]
     8d8:	4b14      	ldr	r3, [pc, #80]	; (92c <main+0x1a8>)
     8da:	fb83 1302 	smull	r1, r3, r3, r2
     8de:	1059      	asrs	r1, r3, #1
     8e0:	17d3      	asrs	r3, r2, #31
     8e2:	1ac9      	subs	r1, r1, r3
     8e4:	460b      	mov	r3, r1
     8e6:	009b      	lsls	r3, r3, #2
     8e8:	440b      	add	r3, r1
     8ea:	1ad3      	subs	r3, r2, r3
     8ec:	613b      	str	r3, [r7, #16]

                    //
                    // Reset the rising edge count.
                    //
                    iRisingCount = RISING_EDGE_COUNT;
     8ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
     8f2:	617b      	str	r3, [r7, #20]
        bNewClkout = am_hal_gpio_input_bit_read(AM_BSP_GPIO_CLKOUT_PIN);
     8f4:	e7bb      	b.n	86e <main+0xea>
     8f6:	bf00      	nop
     8f8:	00001fbc 	.word	0x00001fbc
     8fc:	00001909 	.word	0x00001909
     900:	40010060 	.word	0x40010060
     904:	40010054 	.word	0x40010054
     908:	40010028 	.word	0x40010028
     90c:	40010108 	.word	0x40010108
     910:	00001f48 	.word	0x00001f48
     914:	00001f60 	.word	0x00001f60
     918:	10001000 	.word	0x10001000
     91c:	40010040 	.word	0x40010040
     920:	40010004 	.word	0x40010004
     924:	400100e4 	.word	0x400100e4
     928:	40010080 	.word	0x40010080
     92c:	66666667 	.word	0x66666667

00000930 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     930:	4811      	ldr	r0, [pc, #68]	; (978 <zero_loop+0x12>)
     932:	4912      	ldr	r1, [pc, #72]	; (97c <zero_loop+0x16>)
     934:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     936:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     93a:	4811      	ldr	r0, [pc, #68]	; (980 <zero_loop+0x1a>)
     93c:	6801      	ldr	r1, [r0, #0]
     93e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     942:	6001      	str	r1, [r0, #0]
     944:	f3bf 8f4f 	dsb	sy
     948:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     94c:	480d      	ldr	r0, [pc, #52]	; (984 <zero_loop+0x1e>)
     94e:	490e      	ldr	r1, [pc, #56]	; (988 <zero_loop+0x22>)
     950:	4a0e      	ldr	r2, [pc, #56]	; (98c <zero_loop+0x26>)

00000952 <copy_loop>:
     952:	f850 3b04 	ldr.w	r3, [r0], #4
     956:	f841 3b04 	str.w	r3, [r1], #4
     95a:	4291      	cmp	r1, r2
     95c:	dbf9      	blt.n	952 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     95e:	480c      	ldr	r0, [pc, #48]	; (990 <zero_loop+0x2a>)
     960:	490c      	ldr	r1, [pc, #48]	; (994 <zero_loop+0x2e>)
     962:	f04f 0200 	mov.w	r2, #0

00000966 <zero_loop>:
     966:	4288      	cmp	r0, r1
     968:	bfb8      	it	lt
     96a:	f840 2b04 	strlt.w	r2, [r0], #4
     96e:	dbfa      	blt.n	966 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     970:	f7ff ff08 	bl	784 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     974:	be00      	bkpt	0x0000
}
     976:	bf00      	nop
     978:	e000ed08 	.word	0xe000ed08
     97c:	00000000 	.word	0x00000000
     980:	e000ed88 	.word	0xe000ed88
     984:	00002018 	.word	0x00002018
     988:	10001000 	.word	0x10001000
     98c:	10001028 	.word	0x10001028
     990:	10001028 	.word	0x10001028
     994:	10001134 	.word	0x10001134

00000998 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     998:	b480      	push	{r7}
     99a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     99c:	e7fe      	b.n	99c <am_nmi_isr+0x4>

0000099e <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     99e:	b480      	push	{r7}
     9a0:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     9a2:	e7fe      	b.n	9a2 <am_adc_isr+0x4>

000009a4 <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     9a4:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     9a6:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     9a8:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     9aa:	f000 f809 	bl	9c0 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     9ae:	bd01      	pop	{r0, pc}
}
     9b0:	bf00      	nop
     9b2:	4618      	mov	r0, r3

000009b4 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     9b4:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     9b6:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     9b8:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     9ba:	4770      	bx	lr
}
     9bc:	bf00      	nop
     9be:	4618      	mov	r0, r3

000009c0 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     9c0:	b580      	push	{r7, lr}
     9c2:	b096      	sub	sp, #88	; 0x58
     9c4:	af00      	add	r7, sp, #0
     9c6:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     9c8:	f107 030c 	add.w	r3, r7, #12
     9cc:	2200      	movs	r2, #0
     9ce:	601a      	str	r2, [r3, #0]
     9d0:	605a      	str	r2, [r3, #4]
     9d2:	609a      	str	r2, [r3, #8]
     9d4:	60da      	str	r2, [r3, #12]
     9d6:	611a      	str	r2, [r3, #16]
     9d8:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
     9da:	2300      	movs	r3, #0
     9dc:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     9de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     9e0:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     9e2:	4b2e      	ldr	r3, [pc, #184]	; (a9c <am_util_faultisr_collect_data+0xdc>)
     9e4:	681b      	ldr	r3, [r3, #0]
     9e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     9e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     9ea:	b2db      	uxtb	r3, r3
     9ec:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     9f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     9f2:	0a1b      	lsrs	r3, r3, #8
     9f4:	b2db      	uxtb	r3, r3
     9f6:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     9fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     9fc:	0c1b      	lsrs	r3, r3, #16
     9fe:	b29b      	uxth	r3, r3
     a00:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     a04:	4b26      	ldr	r3, [pc, #152]	; (aa0 <am_util_faultisr_collect_data+0xe0>)
     a06:	681b      	ldr	r3, [r3, #0]
     a08:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     a0a:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     a0e:	b2db      	uxtb	r3, r3
     a10:	f003 0302 	and.w	r3, r3, #2
     a14:	2b00      	cmp	r3, #0
     a16:	d005      	beq.n	a24 <am_util_faultisr_collect_data+0x64>
     a18:	6879      	ldr	r1, [r7, #4]
     a1a:	2006      	movs	r0, #6
     a1c:	f7ff ffca 	bl	9b4 <getStackedReg>
     a20:	4603      	mov	r3, r0
     a22:	e001      	b.n	a28 <am_util_faultisr_collect_data+0x68>
     a24:	f04f 33ff 	mov.w	r3, #4294967295
     a28:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     a2a:	6879      	ldr	r1, [r7, #4]
     a2c:	2000      	movs	r0, #0
     a2e:	f7ff ffc1 	bl	9b4 <getStackedReg>
     a32:	4603      	mov	r3, r0
     a34:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     a36:	6879      	ldr	r1, [r7, #4]
     a38:	2001      	movs	r0, #1
     a3a:	f7ff ffbb 	bl	9b4 <getStackedReg>
     a3e:	4603      	mov	r3, r0
     a40:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     a42:	6879      	ldr	r1, [r7, #4]
     a44:	2002      	movs	r0, #2
     a46:	f7ff ffb5 	bl	9b4 <getStackedReg>
     a4a:	4603      	mov	r3, r0
     a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     a4e:	6879      	ldr	r1, [r7, #4]
     a50:	2003      	movs	r0, #3
     a52:	f7ff ffaf 	bl	9b4 <getStackedReg>
     a56:	4603      	mov	r3, r0
     a58:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     a5a:	6879      	ldr	r1, [r7, #4]
     a5c:	2004      	movs	r0, #4
     a5e:	f7ff ffa9 	bl	9b4 <getStackedReg>
     a62:	4603      	mov	r3, r0
     a64:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     a66:	6879      	ldr	r1, [r7, #4]
     a68:	2005      	movs	r0, #5
     a6a:	f7ff ffa3 	bl	9b4 <getStackedReg>
     a6e:	4603      	mov	r3, r0
     a70:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     a72:	6879      	ldr	r1, [r7, #4]
     a74:	2006      	movs	r0, #6
     a76:	f7ff ff9d 	bl	9b4 <getStackedReg>
     a7a:	4603      	mov	r3, r0
     a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     a7e:	6879      	ldr	r1, [r7, #4]
     a80:	2007      	movs	r0, #7
     a82:	f7ff ff97 	bl	9b4 <getStackedReg>
     a86:	4603      	mov	r3, r0
     a88:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     a8a:	f107 030c 	add.w	r3, r7, #12
     a8e:	4618      	mov	r0, r3
     a90:	f001 f882 	bl	1b98 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     a94:	2300      	movs	r3, #0
     a96:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
     a98:	e7fe      	b.n	a98 <am_util_faultisr_collect_data+0xd8>
     a9a:	bf00      	nop
     a9c:	e000ed28 	.word	0xe000ed28
     aa0:	e000ed38 	.word	0xe000ed38

00000aa4 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     aa4:	b480      	push	{r7}
     aa6:	b083      	sub	sp, #12
     aa8:	af00      	add	r7, sp, #0
     aaa:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     aac:	4a04      	ldr	r2, [pc, #16]	; (ac0 <am_util_stdio_printf_init+0x1c>)
     aae:	687b      	ldr	r3, [r7, #4]
     ab0:	6013      	str	r3, [r2, #0]
}
     ab2:	bf00      	nop
     ab4:	370c      	adds	r7, #12
     ab6:	46bd      	mov	sp, r7
     ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
     abc:	4770      	bx	lr
     abe:	bf00      	nop
     ac0:	10001130 	.word	0x10001130

00000ac4 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     ac4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     ac8:	b096      	sub	sp, #88	; 0x58
     aca:	af00      	add	r7, sp, #0
     acc:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     ad0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     ad4:	0025      	movs	r5, r4
     ad6:	2600      	movs	r6, #0
     ad8:	ea55 0306 	orrs.w	r3, r5, r6
     adc:	f000 80a0 	beq.w	c20 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     ae0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     ae4:	0862      	lsrs	r2, r4, #1
     ae6:	ea4f 0133 	mov.w	r1, r3, rrx
     aea:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     aee:	ea4f 0893 	mov.w	r8, r3, lsr #2
     af2:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     af6:	ea4f 0994 	mov.w	r9, r4, lsr #2
     afa:	eb11 0308 	adds.w	r3, r1, r8
     afe:	eb42 0409 	adc.w	r4, r2, r9
     b02:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     b06:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     b0a:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     b0e:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     b12:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     b16:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     b1a:	eb13 030a 	adds.w	r3, r3, sl
     b1e:	eb44 040b 	adc.w	r4, r4, fp
     b22:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     b26:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     b2a:	0a1a      	lsrs	r2, r3, #8
     b2c:	62ba      	str	r2, [r7, #40]	; 0x28
     b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
     b30:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     b34:	62ba      	str	r2, [r7, #40]	; 0x28
     b36:	0a23      	lsrs	r3, r4, #8
     b38:	62fb      	str	r3, [r7, #44]	; 0x2c
     b3a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     b3e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     b42:	18c9      	adds	r1, r1, r3
     b44:	eb42 0204 	adc.w	r2, r2, r4
     b48:	460b      	mov	r3, r1
     b4a:	4614      	mov	r4, r2
     b4c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     b50:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     b54:	0c1a      	lsrs	r2, r3, #16
     b56:	623a      	str	r2, [r7, #32]
     b58:	6a3a      	ldr	r2, [r7, #32]
     b5a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     b5e:	623a      	str	r2, [r7, #32]
     b60:	0c23      	lsrs	r3, r4, #16
     b62:	627b      	str	r3, [r7, #36]	; 0x24
     b64:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     b68:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     b6c:	18c9      	adds	r1, r1, r3
     b6e:	eb42 0204 	adc.w	r2, r2, r4
     b72:	460b      	mov	r3, r1
     b74:	4614      	mov	r4, r2
     b76:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     b7a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     b7e:	0023      	movs	r3, r4
     b80:	603b      	str	r3, [r7, #0]
     b82:	2300      	movs	r3, #0
     b84:	607b      	str	r3, [r7, #4]
     b86:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     b8a:	e897 0006 	ldmia.w	r7, {r1, r2}
     b8e:	18c9      	adds	r1, r1, r3
     b90:	eb42 0204 	adc.w	r2, r2, r4
     b94:	460b      	mov	r3, r1
     b96:	4614      	mov	r4, r2
     b98:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     b9c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     ba0:	08da      	lsrs	r2, r3, #3
     ba2:	613a      	str	r2, [r7, #16]
     ba4:	693a      	ldr	r2, [r7, #16]
     ba6:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     baa:	613a      	str	r2, [r7, #16]
     bac:	08e3      	lsrs	r3, r4, #3
     bae:	617b      	str	r3, [r7, #20]
     bb0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     bb4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     bb8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
     bbc:	460b      	mov	r3, r1
     bbe:	4614      	mov	r4, r2
     bc0:	00a0      	lsls	r0, r4, #2
     bc2:	60f8      	str	r0, [r7, #12]
     bc4:	68f8      	ldr	r0, [r7, #12]
     bc6:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
     bca:	60f8      	str	r0, [r7, #12]
     bcc:	009b      	lsls	r3, r3, #2
     bce:	60bb      	str	r3, [r7, #8]
     bd0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     bd4:	185b      	adds	r3, r3, r1
     bd6:	eb44 0402 	adc.w	r4, r4, r2
     bda:	18db      	adds	r3, r3, r3
     bdc:	eb44 0404 	adc.w	r4, r4, r4
     be0:	4619      	mov	r1, r3
     be2:	4622      	mov	r2, r4
     be4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     be8:	1a5b      	subs	r3, r3, r1
     bea:	eb64 0402 	sbc.w	r4, r4, r2
     bee:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     bf2:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     bf6:	3306      	adds	r3, #6
     bf8:	f144 0400 	adc.w	r4, r4, #0
     bfc:	091a      	lsrs	r2, r3, #4
     bfe:	61ba      	str	r2, [r7, #24]
     c00:	69ba      	ldr	r2, [r7, #24]
     c02:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     c06:	61ba      	str	r2, [r7, #24]
     c08:	0923      	lsrs	r3, r4, #4
     c0a:	61fb      	str	r3, [r7, #28]
     c0c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     c10:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     c14:	18c9      	adds	r1, r1, r3
     c16:	eb42 0204 	adc.w	r2, r2, r4
     c1a:	460b      	mov	r3, r1
     c1c:	4614      	mov	r4, r2
     c1e:	e029      	b.n	c74 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     c22:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     c26:	085a      	lsrs	r2, r3, #1
     c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     c2a:	089b      	lsrs	r3, r3, #2
     c2c:	4413      	add	r3, r2
     c2e:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     c32:	091b      	lsrs	r3, r3, #4
     c34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     c36:	4413      	add	r3, r2
     c38:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     c3c:	0a1b      	lsrs	r3, r3, #8
     c3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     c40:	4413      	add	r3, r2
     c42:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     c46:	0c1b      	lsrs	r3, r3, #16
     c48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     c4a:	4413      	add	r3, r2
     c4c:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     c50:	08db      	lsrs	r3, r3, #3
     c52:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     c54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     c56:	4613      	mov	r3, r2
     c58:	009b      	lsls	r3, r3, #2
     c5a:	4413      	add	r3, r2
     c5c:	005b      	lsls	r3, r3, #1
     c5e:	461a      	mov	r2, r3
     c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     c62:	1a9b      	subs	r3, r3, r2
     c64:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     c68:	3306      	adds	r3, #6
     c6a:	091a      	lsrs	r2, r3, #4
     c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     c6e:	4413      	add	r3, r2
     c70:	f04f 0400 	mov.w	r4, #0
    }
}
     c74:	4618      	mov	r0, r3
     c76:	4621      	mov	r1, r4
     c78:	3758      	adds	r7, #88	; 0x58
     c7a:	46bd      	mov	sp, r7
     c7c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     c80:	4770      	bx	lr

00000c82 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     c82:	b590      	push	{r4, r7, lr}
     c84:	b085      	sub	sp, #20
     c86:	af00      	add	r7, sp, #0
     c88:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     c8c:	683a      	ldr	r2, [r7, #0]
     c8e:	687b      	ldr	r3, [r7, #4]
     c90:	4313      	orrs	r3, r2
     c92:	2b00      	cmp	r3, #0
     c94:	bf0c      	ite	eq
     c96:	2301      	moveq	r3, #1
     c98:	2300      	movne	r3, #0
     c9a:	b2db      	uxtb	r3, r3
     c9c:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     c9e:	e008      	b.n	cb2 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     ca0:	e9d7 0100 	ldrd	r0, r1, [r7]
     ca4:	f7ff ff0e 	bl	ac4 <divu64_10>
     ca8:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     cac:	68fb      	ldr	r3, [r7, #12]
     cae:	3301      	adds	r3, #1
     cb0:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
     cb2:	e897 0018 	ldmia.w	r7, {r3, r4}
     cb6:	4323      	orrs	r3, r4
     cb8:	d1f2      	bne.n	ca0 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
     cba:	68fb      	ldr	r3, [r7, #12]
}
     cbc:	4618      	mov	r0, r3
     cbe:	3714      	adds	r7, #20
     cc0:	46bd      	mov	sp, r7
     cc2:	bd90      	pop	{r4, r7, pc}

00000cc4 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     cc4:	b590      	push	{r4, r7, lr}
     cc6:	b083      	sub	sp, #12
     cc8:	af00      	add	r7, sp, #0
     cca:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     cce:	e897 0018 	ldmia.w	r7, {r3, r4}
     cd2:	2b00      	cmp	r3, #0
     cd4:	f174 0300 	sbcs.w	r3, r4, #0
     cd8:	da06      	bge.n	ce8 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     cda:	e897 0018 	ldmia.w	r7, {r3, r4}
     cde:	425b      	negs	r3, r3
     ce0:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     ce4:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     ce8:	e897 0018 	ldmia.w	r7, {r3, r4}
     cec:	4618      	mov	r0, r3
     cee:	4621      	mov	r1, r4
     cf0:	f7ff ffc7 	bl	c82 <ndigits_in_u64>
     cf4:	4603      	mov	r3, r0
}
     cf6:	4618      	mov	r0, r3
     cf8:	370c      	adds	r7, #12
     cfa:	46bd      	mov	sp, r7
     cfc:	bd90      	pop	{r4, r7, pc}

00000cfe <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     cfe:	b490      	push	{r4, r7}
     d00:	b084      	sub	sp, #16
     d02:	af00      	add	r7, sp, #0
     d04:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     d08:	6839      	ldr	r1, [r7, #0]
     d0a:	687a      	ldr	r2, [r7, #4]
     d0c:	430a      	orrs	r2, r1
     d0e:	2a00      	cmp	r2, #0
     d10:	bf0c      	ite	eq
     d12:	2201      	moveq	r2, #1
     d14:	2200      	movne	r2, #0
     d16:	b2d2      	uxtb	r2, r2
     d18:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     d1a:	e00a      	b.n	d32 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     d1c:	e897 0006 	ldmia.w	r7, {r1, r2}
     d20:	090b      	lsrs	r3, r1, #4
     d22:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     d26:	0914      	lsrs	r4, r2, #4
     d28:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     d2c:	68fa      	ldr	r2, [r7, #12]
     d2e:	3201      	adds	r2, #1
     d30:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
     d32:	e897 0006 	ldmia.w	r7, {r1, r2}
     d36:	430a      	orrs	r2, r1
     d38:	d1f0      	bne.n	d1c <ndigits_in_hex+0x1e>
    }

    return iDigits;
     d3a:	68fb      	ldr	r3, [r7, #12]
}
     d3c:	4618      	mov	r0, r3
     d3e:	3710      	adds	r7, #16
     d40:	46bd      	mov	sp, r7
     d42:	bc90      	pop	{r4, r7}
     d44:	4770      	bx	lr

00000d46 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     d46:	b480      	push	{r7}
     d48:	b087      	sub	sp, #28
     d4a:	af00      	add	r7, sp, #0
     d4c:	6078      	str	r0, [r7, #4]
     d4e:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     d50:	2300      	movs	r3, #0
     d52:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     d54:	2300      	movs	r3, #0
     d56:	613b      	str	r3, [r7, #16]
     d58:	2300      	movs	r3, #0
     d5a:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     d5c:	687b      	ldr	r3, [r7, #4]
     d5e:	781b      	ldrb	r3, [r3, #0]
     d60:	2b2d      	cmp	r3, #45	; 0x2d
     d62:	d11b      	bne.n	d9c <decstr_to_int+0x56>
    {
        bNeg = true;
     d64:	2301      	movs	r3, #1
     d66:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     d68:	687b      	ldr	r3, [r7, #4]
     d6a:	3301      	adds	r3, #1
     d6c:	607b      	str	r3, [r7, #4]
        uCnt++;
     d6e:	68fb      	ldr	r3, [r7, #12]
     d70:	3301      	adds	r3, #1
     d72:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     d74:	e012      	b.n	d9c <decstr_to_int+0x56>
    {
        ++uCnt;
     d76:	68fb      	ldr	r3, [r7, #12]
     d78:	3301      	adds	r3, #1
     d7a:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     d7c:	693a      	ldr	r2, [r7, #16]
     d7e:	4613      	mov	r3, r2
     d80:	009b      	lsls	r3, r3, #2
     d82:	4413      	add	r3, r2
     d84:	005b      	lsls	r3, r3, #1
     d86:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     d88:	687b      	ldr	r3, [r7, #4]
     d8a:	781b      	ldrb	r3, [r3, #0]
     d8c:	461a      	mov	r2, r3
     d8e:	693b      	ldr	r3, [r7, #16]
     d90:	4413      	add	r3, r2
     d92:	3b30      	subs	r3, #48	; 0x30
     d94:	613b      	str	r3, [r7, #16]
        pcStr++;
     d96:	687b      	ldr	r3, [r7, #4]
     d98:	3301      	adds	r3, #1
     d9a:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     d9c:	687b      	ldr	r3, [r7, #4]
     d9e:	781b      	ldrb	r3, [r3, #0]
     da0:	2b2f      	cmp	r3, #47	; 0x2f
     da2:	d903      	bls.n	dac <decstr_to_int+0x66>
     da4:	687b      	ldr	r3, [r7, #4]
     da6:	781b      	ldrb	r3, [r3, #0]
     da8:	2b39      	cmp	r3, #57	; 0x39
     daa:	d9e4      	bls.n	d76 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
     dac:	683b      	ldr	r3, [r7, #0]
     dae:	2b00      	cmp	r3, #0
     db0:	d002      	beq.n	db8 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     db2:	683b      	ldr	r3, [r7, #0]
     db4:	68fa      	ldr	r2, [r7, #12]
     db6:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     db8:	7dfb      	ldrb	r3, [r7, #23]
     dba:	2b00      	cmp	r3, #0
     dbc:	d002      	beq.n	dc4 <decstr_to_int+0x7e>
     dbe:	693b      	ldr	r3, [r7, #16]
     dc0:	425b      	negs	r3, r3
     dc2:	e000      	b.n	dc6 <decstr_to_int+0x80>
     dc4:	693b      	ldr	r3, [r7, #16]
}
     dc6:	4618      	mov	r0, r3
     dc8:	371c      	adds	r7, #28
     dca:	46bd      	mov	sp, r7
     dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
     dd0:	4770      	bx	lr

00000dd2 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     dd2:	b590      	push	{r4, r7, lr}
     dd4:	b091      	sub	sp, #68	; 0x44
     dd6:	af00      	add	r7, sp, #0
     dd8:	e9c7 0102 	strd	r0, r1, [r7, #8]
     ddc:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     dde:	2300      	movs	r3, #0
     de0:	63fb      	str	r3, [r7, #60]	; 0x3c
     de2:	2300      	movs	r3, #0
     de4:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     de6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     dea:	f7ff fe6b 	bl	ac4 <divu64_10>
     dee:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     df2:	68b9      	ldr	r1, [r7, #8]
     df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     df6:	4613      	mov	r3, r2
     df8:	009b      	lsls	r3, r3, #2
     dfa:	4413      	add	r3, r2
     dfc:	005b      	lsls	r3, r3, #1
     dfe:	1acb      	subs	r3, r1, r3
     e00:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e04:	1c5a      	adds	r2, r3, #1
     e06:	63fa      	str	r2, [r7, #60]	; 0x3c
     e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     e0a:	b2d2      	uxtb	r2, r2
     e0c:	3230      	adds	r2, #48	; 0x30
     e0e:	b2d2      	uxtb	r2, r2
     e10:	f107 0140 	add.w	r1, r7, #64	; 0x40
     e14:	440b      	add	r3, r1
     e16:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     e1a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     e1e:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     e22:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     e26:	4323      	orrs	r3, r4
     e28:	d1dd      	bne.n	de6 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e2c:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     e2e:	687b      	ldr	r3, [r7, #4]
     e30:	2b00      	cmp	r3, #0
     e32:	d011      	beq.n	e58 <uint64_to_str+0x86>
    {
        while ( ix-- )
     e34:	e008      	b.n	e48 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     e36:	687b      	ldr	r3, [r7, #4]
     e38:	1c5a      	adds	r2, r3, #1
     e3a:	607a      	str	r2, [r7, #4]
     e3c:	f107 0110 	add.w	r1, r7, #16
     e40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     e42:	440a      	add	r2, r1
     e44:	7812      	ldrb	r2, [r2, #0]
     e46:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
     e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e4a:	1e5a      	subs	r2, r3, #1
     e4c:	63fa      	str	r2, [r7, #60]	; 0x3c
     e4e:	2b00      	cmp	r3, #0
     e50:	d1f1      	bne.n	e36 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     e52:	687b      	ldr	r3, [r7, #4]
     e54:	2200      	movs	r2, #0
     e56:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     e5a:	4618      	mov	r0, r3
     e5c:	3744      	adds	r7, #68	; 0x44
     e5e:	46bd      	mov	sp, r7
     e60:	bd90      	pop	{r4, r7, pc}

00000e62 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     e62:	b4b0      	push	{r4, r5, r7}
     e64:	b08d      	sub	sp, #52	; 0x34
     e66:	af00      	add	r7, sp, #0
     e68:	e9c7 0102 	strd	r0, r1, [r7, #8]
     e6c:	607a      	str	r2, [r7, #4]
     e6e:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     e70:	2300      	movs	r3, #0
     e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     e74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     e78:	4313      	orrs	r3, r2
     e7a:	d131      	bne.n	ee0 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e7e:	1c5a      	adds	r2, r3, #1
     e80:	62fa      	str	r2, [r7, #44]	; 0x2c
     e82:	f107 0230 	add.w	r2, r7, #48	; 0x30
     e86:	4413      	add	r3, r2
     e88:	2230      	movs	r2, #48	; 0x30
     e8a:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     e8e:	e027      	b.n	ee0 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     e90:	7a3b      	ldrb	r3, [r7, #8]
     e92:	f003 030f 	and.w	r3, r3, #15
     e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     e9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     e9e:	2b09      	cmp	r3, #9
     ea0:	d90a      	bls.n	eb8 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     ea2:	78fb      	ldrb	r3, [r7, #3]
     ea4:	2b00      	cmp	r3, #0
     ea6:	d001      	beq.n	eac <uint64_to_hexstr+0x4a>
     ea8:	2227      	movs	r2, #39	; 0x27
     eaa:	e000      	b.n	eae <uint64_to_hexstr+0x4c>
     eac:	2207      	movs	r2, #7
     eae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     eb2:	4413      	add	r3, r2
     eb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     eba:	1c5a      	adds	r2, r3, #1
     ebc:	62fa      	str	r2, [r7, #44]	; 0x2c
     ebe:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     ec2:	3230      	adds	r2, #48	; 0x30
     ec4:	b2d2      	uxtb	r2, r2
     ec6:	f107 0130 	add.w	r1, r7, #48	; 0x30
     eca:	440b      	add	r3, r1
     ecc:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     ed0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     ed4:	0914      	lsrs	r4, r2, #4
     ed6:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     eda:	091d      	lsrs	r5, r3, #4
     edc:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
     ee0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     ee4:	4313      	orrs	r3, r2
     ee6:	d1d3      	bne.n	e90 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     eea:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     eec:	687b      	ldr	r3, [r7, #4]
     eee:	2b00      	cmp	r3, #0
     ef0:	d011      	beq.n	f16 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     ef2:	e008      	b.n	f06 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     ef4:	687b      	ldr	r3, [r7, #4]
     ef6:	1c5a      	adds	r2, r3, #1
     ef8:	607a      	str	r2, [r7, #4]
     efa:	f107 0110 	add.w	r1, r7, #16
     efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     f00:	440a      	add	r2, r1
     f02:	7812      	ldrb	r2, [r2, #0]
     f04:	701a      	strb	r2, [r3, #0]
        while (ix--)
     f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f08:	1e5a      	subs	r2, r3, #1
     f0a:	62fa      	str	r2, [r7, #44]	; 0x2c
     f0c:	2b00      	cmp	r3, #0
     f0e:	d1f1      	bne.n	ef4 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     f10:	687b      	ldr	r3, [r7, #4]
     f12:	2200      	movs	r2, #0
     f14:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     f18:	4618      	mov	r0, r3
     f1a:	3734      	adds	r7, #52	; 0x34
     f1c:	46bd      	mov	sp, r7
     f1e:	bcb0      	pop	{r4, r5, r7}
     f20:	4770      	bx	lr

00000f22 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     f22:	b480      	push	{r7}
     f24:	b085      	sub	sp, #20
     f26:	af00      	add	r7, sp, #0
     f28:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     f2a:	2300      	movs	r3, #0
     f2c:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     f2e:	687b      	ldr	r3, [r7, #4]
     f30:	2b00      	cmp	r3, #0
     f32:	d104      	bne.n	f3e <simple_strlen+0x1c>
    {
        return ui32RetVal;
     f34:	68fb      	ldr	r3, [r7, #12]
     f36:	e009      	b.n	f4c <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     f38:	68fb      	ldr	r3, [r7, #12]
     f3a:	3301      	adds	r3, #1
     f3c:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
     f3e:	687b      	ldr	r3, [r7, #4]
     f40:	1c5a      	adds	r2, r3, #1
     f42:	607a      	str	r2, [r7, #4]
     f44:	781b      	ldrb	r3, [r3, #0]
     f46:	2b00      	cmp	r3, #0
     f48:	d1f6      	bne.n	f38 <simple_strlen+0x16>
    }
    return ui32RetVal;
     f4a:	68fb      	ldr	r3, [r7, #12]
}
     f4c:	4618      	mov	r0, r3
     f4e:	3714      	adds	r7, #20
     f50:	46bd      	mov	sp, r7
     f52:	f85d 7b04 	ldr.w	r7, [sp], #4
     f56:	4770      	bx	lr

00000f58 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     f58:	b480      	push	{r7}
     f5a:	b087      	sub	sp, #28
     f5c:	af00      	add	r7, sp, #0
     f5e:	60f8      	str	r0, [r7, #12]
     f60:	460b      	mov	r3, r1
     f62:	607a      	str	r2, [r7, #4]
     f64:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     f66:	2300      	movs	r3, #0
     f68:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     f6a:	687b      	ldr	r3, [r7, #4]
     f6c:	2b00      	cmp	r3, #0
     f6e:	dc0c      	bgt.n	f8a <padbuffer+0x32>
    {
        return i32Cnt;
     f70:	697b      	ldr	r3, [r7, #20]
     f72:	e010      	b.n	f96 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     f74:	68fb      	ldr	r3, [r7, #12]
     f76:	2b00      	cmp	r3, #0
     f78:	d004      	beq.n	f84 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     f7a:	68fb      	ldr	r3, [r7, #12]
     f7c:	1c5a      	adds	r2, r3, #1
     f7e:	60fa      	str	r2, [r7, #12]
     f80:	7afa      	ldrb	r2, [r7, #11]
     f82:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     f84:	697b      	ldr	r3, [r7, #20]
     f86:	3301      	adds	r3, #1
     f88:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
     f8a:	687b      	ldr	r3, [r7, #4]
     f8c:	1e5a      	subs	r2, r3, #1
     f8e:	607a      	str	r2, [r7, #4]
     f90:	2b00      	cmp	r3, #0
     f92:	d1ef      	bne.n	f74 <padbuffer+0x1c>
    }

    return i32Cnt;
     f94:	697b      	ldr	r3, [r7, #20]
}
     f96:	4618      	mov	r0, r3
     f98:	371c      	adds	r7, #28
     f9a:	46bd      	mov	sp, r7
     f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
     fa0:	4770      	bx	lr
	...

00000fa4 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     fa4:	b590      	push	{r4, r7, lr}
     fa6:	b08f      	sub	sp, #60	; 0x3c
     fa8:	af00      	add	r7, sp, #0
     faa:	60f8      	str	r0, [r7, #12]
     fac:	60b9      	str	r1, [r7, #8]
     fae:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
     fb0:	68bb      	ldr	r3, [r7, #8]
     fb2:	681b      	ldr	r3, [r3, #0]
     fb4:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
     fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     fb8:	2b03      	cmp	r3, #3
     fba:	dc02      	bgt.n	fc2 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     fbc:	f06f 0302 	mvn.w	r3, #2
     fc0:	e0e7      	b.n	1192 <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
     fc2:	edd7 7a03 	vldr	s15, [r7, #12]
     fc6:	eef5 7a40 	vcmp.f32	s15, #0.0
     fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     fce:	d104      	bne.n	fda <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     fd0:	68bb      	ldr	r3, [r7, #8]
     fd2:	4a72      	ldr	r2, [pc, #456]	; (119c <ftoa+0x1f8>)
     fd4:	601a      	str	r2, [r3, #0]
        return 3;
     fd6:	2303      	movs	r3, #3
     fd8:	e0db      	b.n	1192 <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
     fda:	68bb      	ldr	r3, [r7, #8]
     fdc:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
     fde:	68fb      	ldr	r3, [r7, #12]
     fe0:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     fe2:	693b      	ldr	r3, [r7, #16]
     fe4:	15db      	asrs	r3, r3, #23
     fe6:	b2db      	uxtb	r3, r3
     fe8:	3b7f      	subs	r3, #127	; 0x7f
     fea:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     fec:	693b      	ldr	r3, [r7, #16]
     fee:	f3c3 0316 	ubfx	r3, r3, #0, #23
     ff2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     ff6:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
     ff8:	2300      	movs	r3, #0
     ffa:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     ffc:	2300      	movs	r3, #0
     ffe:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    1000:	69fb      	ldr	r3, [r7, #28]
    1002:	2b1e      	cmp	r3, #30
    1004:	dd02      	ble.n	100c <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    1006:	f06f 0301 	mvn.w	r3, #1
    100a:	e0c2      	b.n	1192 <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
    100c:	69fb      	ldr	r3, [r7, #28]
    100e:	f113 0f17 	cmn.w	r3, #23
    1012:	da02      	bge.n	101a <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    1014:	f04f 33ff 	mov.w	r3, #4294967295
    1018:	e0bb      	b.n	1192 <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
    101a:	69fb      	ldr	r3, [r7, #28]
    101c:	2b16      	cmp	r3, #22
    101e:	dd06      	ble.n	102e <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    1020:	69fb      	ldr	r3, [r7, #28]
    1022:	3b17      	subs	r3, #23
    1024:	69ba      	ldr	r2, [r7, #24]
    1026:	fa02 f303 	lsl.w	r3, r2, r3
    102a:	637b      	str	r3, [r7, #52]	; 0x34
    102c:	e01a      	b.n	1064 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    102e:	69fb      	ldr	r3, [r7, #28]
    1030:	2b00      	cmp	r3, #0
    1032:	db0f      	blt.n	1054 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    1034:	69fb      	ldr	r3, [r7, #28]
    1036:	f1c3 0317 	rsb	r3, r3, #23
    103a:	69ba      	ldr	r2, [r7, #24]
    103c:	fa42 f303 	asr.w	r3, r2, r3
    1040:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    1042:	69fb      	ldr	r3, [r7, #28]
    1044:	3301      	adds	r3, #1
    1046:	69ba      	ldr	r2, [r7, #24]
    1048:	fa02 f303 	lsl.w	r3, r2, r3
    104c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1050:	633b      	str	r3, [r7, #48]	; 0x30
    1052:	e007      	b.n	1064 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    1054:	69bb      	ldr	r3, [r7, #24]
    1056:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    105a:	69fb      	ldr	r3, [r7, #28]
    105c:	43db      	mvns	r3, r3
    105e:	fa42 f303 	asr.w	r3, r2, r3
    1062:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    1064:	693b      	ldr	r3, [r7, #16]
    1066:	2b00      	cmp	r3, #0
    1068:	da04      	bge.n	1074 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    106a:	68bb      	ldr	r3, [r7, #8]
    106c:	1c5a      	adds	r2, r3, #1
    106e:	60ba      	str	r2, [r7, #8]
    1070:	222d      	movs	r2, #45	; 0x2d
    1072:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    1074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1076:	2b00      	cmp	r3, #0
    1078:	d105      	bne.n	1086 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    107a:	68bb      	ldr	r3, [r7, #8]
    107c:	1c5a      	adds	r2, r3, #1
    107e:	60ba      	str	r2, [r7, #8]
    1080:	2230      	movs	r2, #48	; 0x30
    1082:	701a      	strb	r2, [r3, #0]
    1084:	e021      	b.n	10ca <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    1086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1088:	2b00      	cmp	r3, #0
    108a:	dd08      	ble.n	109e <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    108c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    108e:	ea4f 74e3 	mov.w	r4, r3, asr #31
    1092:	68ba      	ldr	r2, [r7, #8]
    1094:	4618      	mov	r0, r3
    1096:	4621      	mov	r1, r4
    1098:	f7ff fe9b 	bl	dd2 <uint64_to_str>
    109c:	e011      	b.n	10c2 <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    109e:	68bb      	ldr	r3, [r7, #8]
    10a0:	1c5a      	adds	r2, r3, #1
    10a2:	60ba      	str	r2, [r7, #8]
    10a4:	222d      	movs	r2, #45	; 0x2d
    10a6:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    10a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10aa:	425b      	negs	r3, r3
    10ac:	ea4f 74e3 	mov.w	r4, r3, asr #31
    10b0:	68ba      	ldr	r2, [r7, #8]
    10b2:	4618      	mov	r0, r3
    10b4:	4621      	mov	r1, r4
    10b6:	f7ff fe8c 	bl	dd2 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    10ba:	e002      	b.n	10c2 <ftoa+0x11e>
        {
            pcBuf++;
    10bc:	68bb      	ldr	r3, [r7, #8]
    10be:	3301      	adds	r3, #1
    10c0:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    10c2:	68bb      	ldr	r3, [r7, #8]
    10c4:	781b      	ldrb	r3, [r3, #0]
    10c6:	2b00      	cmp	r3, #0
    10c8:	d1f8      	bne.n	10bc <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    10ca:	68bb      	ldr	r3, [r7, #8]
    10cc:	1c5a      	adds	r2, r3, #1
    10ce:	60ba      	str	r2, [r7, #8]
    10d0:	222e      	movs	r2, #46	; 0x2e
    10d2:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    10d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    10d6:	2b00      	cmp	r3, #0
    10d8:	d105      	bne.n	10e6 <ftoa+0x142>
    {
        *pcBuf++ = '0';
    10da:	68bb      	ldr	r3, [r7, #8]
    10dc:	1c5a      	adds	r2, r3, #1
    10de:	60ba      	str	r2, [r7, #8]
    10e0:	2230      	movs	r2, #48	; 0x30
    10e2:	701a      	strb	r2, [r3, #0]
    10e4:	e04f      	b.n	1186 <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    10e6:	68ba      	ldr	r2, [r7, #8]
    10e8:	6a3b      	ldr	r3, [r7, #32]
    10ea:	1ad3      	subs	r3, r2, r3
    10ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    10ee:	1ad3      	subs	r3, r2, r3
    10f0:	3b01      	subs	r3, #1
    10f2:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    10f4:	697a      	ldr	r2, [r7, #20]
    10f6:	687b      	ldr	r3, [r7, #4]
    10f8:	4293      	cmp	r3, r2
    10fa:	bfa8      	it	ge
    10fc:	4613      	movge	r3, r2
    10fe:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    1100:	2300      	movs	r3, #0
    1102:	62bb      	str	r3, [r7, #40]	; 0x28
    1104:	e015      	b.n	1132 <ftoa+0x18e>
        {
            i32FracPart *= 10;
    1106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1108:	4613      	mov	r3, r2
    110a:	009b      	lsls	r3, r3, #2
    110c:	4413      	add	r3, r2
    110e:	005b      	lsls	r3, r3, #1
    1110:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    1112:	68bb      	ldr	r3, [r7, #8]
    1114:	1c5a      	adds	r2, r3, #1
    1116:	60ba      	str	r2, [r7, #8]
    1118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    111a:	1612      	asrs	r2, r2, #24
    111c:	b2d2      	uxtb	r2, r2
    111e:	3230      	adds	r2, #48	; 0x30
    1120:	b2d2      	uxtb	r2, r2
    1122:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    1124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1126:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    112a:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    112c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    112e:	3301      	adds	r3, #1
    1130:	62bb      	str	r3, [r7, #40]	; 0x28
    1132:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1134:	697b      	ldr	r3, [r7, #20]
    1136:	429a      	cmp	r2, r3
    1138:	dbe5      	blt.n	1106 <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    113a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    113c:	4613      	mov	r3, r2
    113e:	009b      	lsls	r3, r3, #2
    1140:	4413      	add	r3, r2
    1142:	005b      	lsls	r3, r3, #1
    1144:	161b      	asrs	r3, r3, #24
    1146:	2b04      	cmp	r3, #4
    1148:	dd1d      	ble.n	1186 <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    114a:	68bb      	ldr	r3, [r7, #8]
    114c:	3b01      	subs	r3, #1
    114e:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    1150:	e015      	b.n	117e <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
    1152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1154:	781b      	ldrb	r3, [r3, #0]
    1156:	2b2e      	cmp	r3, #46	; 0x2e
    1158:	d00e      	beq.n	1178 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
    115a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    115c:	781b      	ldrb	r3, [r3, #0]
    115e:	2b39      	cmp	r3, #57	; 0x39
    1160:	d103      	bne.n	116a <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
    1162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1164:	2230      	movs	r2, #48	; 0x30
    1166:	701a      	strb	r2, [r3, #0]
    1168:	e006      	b.n	1178 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
    116a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    116c:	781b      	ldrb	r3, [r3, #0]
    116e:	3301      	adds	r3, #1
    1170:	b2da      	uxtb	r2, r3
    1172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1174:	701a      	strb	r2, [r3, #0]
                    break;
    1176:	e006      	b.n	1186 <ftoa+0x1e2>
                }
                pcBuftmp--;
    1178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    117a:	3b01      	subs	r3, #1
    117c:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    117e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1180:	6a3b      	ldr	r3, [r7, #32]
    1182:	429a      	cmp	r2, r3
    1184:	d2e5      	bcs.n	1152 <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    1186:	68bb      	ldr	r3, [r7, #8]
    1188:	2200      	movs	r2, #0
    118a:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    118c:	68ba      	ldr	r2, [r7, #8]
    118e:	6a3b      	ldr	r3, [r7, #32]
    1190:	1ad3      	subs	r3, r2, r3
} // ftoa()
    1192:	4618      	mov	r0, r3
    1194:	373c      	adds	r7, #60	; 0x3c
    1196:	46bd      	mov	sp, r7
    1198:	bd90      	pop	{r4, r7, pc}
    119a:	bf00      	nop
    119c:	00302e30 	.word	0x00302e30

000011a0 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    11a0:	b590      	push	{r4, r7, lr}
    11a2:	b095      	sub	sp, #84	; 0x54
    11a4:	af00      	add	r7, sp, #0
    11a6:	60f8      	str	r0, [r7, #12]
    11a8:	60b9      	str	r1, [r7, #8]
    11aa:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    11ac:	2300      	movs	r3, #0
    11ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    11b0:	2300      	movs	r3, #0
    11b2:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    11b4:	e2e3      	b.n	177e <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    11b6:	2306      	movs	r3, #6
    11b8:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    11ba:	68bb      	ldr	r3, [r7, #8]
    11bc:	781b      	ldrb	r3, [r3, #0]
    11be:	2b25      	cmp	r3, #37	; 0x25
    11c0:	d01f      	beq.n	1202 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    11c2:	68fb      	ldr	r3, [r7, #12]
    11c4:	2b00      	cmp	r3, #0
    11c6:	d015      	beq.n	11f4 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    11c8:	68bb      	ldr	r3, [r7, #8]
    11ca:	781b      	ldrb	r3, [r3, #0]
    11cc:	2b0a      	cmp	r3, #10
    11ce:	d10b      	bne.n	11e8 <am_util_stdio_vsprintf+0x48>
    11d0:	4bb1      	ldr	r3, [pc, #708]	; (1498 <am_util_stdio_vsprintf+0x2f8>)
    11d2:	781b      	ldrb	r3, [r3, #0]
    11d4:	2b00      	cmp	r3, #0
    11d6:	d007      	beq.n	11e8 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	1c5a      	adds	r2, r3, #1
    11dc:	60fa      	str	r2, [r7, #12]
    11de:	220d      	movs	r2, #13
    11e0:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    11e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11e4:	3301      	adds	r3, #1
    11e6:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    11e8:	68fb      	ldr	r3, [r7, #12]
    11ea:	1c5a      	adds	r2, r3, #1
    11ec:	60fa      	str	r2, [r7, #12]
    11ee:	68ba      	ldr	r2, [r7, #8]
    11f0:	7812      	ldrb	r2, [r2, #0]
    11f2:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    11f4:	68bb      	ldr	r3, [r7, #8]
    11f6:	3301      	adds	r3, #1
    11f8:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    11fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11fc:	3301      	adds	r3, #1
    11fe:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    1200:	e2bd      	b.n	177e <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    1202:	68bb      	ldr	r3, [r7, #8]
    1204:	3301      	adds	r3, #1
    1206:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    1208:	2300      	movs	r3, #0
    120a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    120e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1212:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    1216:	2320      	movs	r3, #32
    1218:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    121c:	68bb      	ldr	r3, [r7, #8]
    121e:	781b      	ldrb	r3, [r3, #0]
    1220:	2b30      	cmp	r3, #48	; 0x30
    1222:	d105      	bne.n	1230 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    1224:	2330      	movs	r3, #48	; 0x30
    1226:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    122a:	68bb      	ldr	r3, [r7, #8]
    122c:	3301      	adds	r3, #1
    122e:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    1230:	f107 0310 	add.w	r3, r7, #16
    1234:	4619      	mov	r1, r3
    1236:	68b8      	ldr	r0, [r7, #8]
    1238:	f7ff fd85 	bl	d46 <decstr_to_int>
    123c:	4603      	mov	r3, r0
    123e:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    1240:	693b      	ldr	r3, [r7, #16]
    1242:	68ba      	ldr	r2, [r7, #8]
    1244:	4413      	add	r3, r2
    1246:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    1248:	68bb      	ldr	r3, [r7, #8]
    124a:	781b      	ldrb	r3, [r3, #0]
    124c:	2b73      	cmp	r3, #115	; 0x73
    124e:	d005      	beq.n	125c <am_util_stdio_vsprintf+0xbc>
    1250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1252:	2b00      	cmp	r3, #0
    1254:	da02      	bge.n	125c <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    1256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1258:	425b      	negs	r3, r3
    125a:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    125c:	68bb      	ldr	r3, [r7, #8]
    125e:	781b      	ldrb	r3, [r3, #0]
    1260:	2b2e      	cmp	r3, #46	; 0x2e
    1262:	d10e      	bne.n	1282 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    1264:	68bb      	ldr	r3, [r7, #8]
    1266:	3301      	adds	r3, #1
    1268:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    126a:	f107 0310 	add.w	r3, r7, #16
    126e:	4619      	mov	r1, r3
    1270:	68b8      	ldr	r0, [r7, #8]
    1272:	f7ff fd68 	bl	d46 <decstr_to_int>
    1276:	4603      	mov	r3, r0
    1278:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    127a:	693b      	ldr	r3, [r7, #16]
    127c:	68ba      	ldr	r2, [r7, #8]
    127e:	4413      	add	r3, r2
    1280:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	781b      	ldrb	r3, [r3, #0]
    1286:	2b6c      	cmp	r3, #108	; 0x6c
    1288:	d10c      	bne.n	12a4 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    128a:	68bb      	ldr	r3, [r7, #8]
    128c:	3301      	adds	r3, #1
    128e:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    1290:	68bb      	ldr	r3, [r7, #8]
    1292:	781b      	ldrb	r3, [r3, #0]
    1294:	2b6c      	cmp	r3, #108	; 0x6c
    1296:	d105      	bne.n	12a4 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    1298:	68bb      	ldr	r3, [r7, #8]
    129a:	3301      	adds	r3, #1
    129c:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    129e:	2301      	movs	r3, #1
    12a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    12a4:	68bb      	ldr	r3, [r7, #8]
    12a6:	781b      	ldrb	r3, [r3, #0]
    12a8:	3b46      	subs	r3, #70	; 0x46
    12aa:	2b32      	cmp	r3, #50	; 0x32
    12ac:	f200 8254 	bhi.w	1758 <am_util_stdio_vsprintf+0x5b8>
    12b0:	a201      	add	r2, pc, #4	; (adr r2, 12b8 <am_util_stdio_vsprintf+0x118>)
    12b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    12b6:	bf00      	nop
    12b8:	000016e3 	.word	0x000016e3
    12bc:	00001759 	.word	0x00001759
    12c0:	00001759 	.word	0x00001759
    12c4:	00001759 	.word	0x00001759
    12c8:	00001759 	.word	0x00001759
    12cc:	00001759 	.word	0x00001759
    12d0:	00001759 	.word	0x00001759
    12d4:	00001759 	.word	0x00001759
    12d8:	00001759 	.word	0x00001759
    12dc:	00001759 	.word	0x00001759
    12e0:	00001759 	.word	0x00001759
    12e4:	00001759 	.word	0x00001759
    12e8:	00001759 	.word	0x00001759
    12ec:	00001759 	.word	0x00001759
    12f0:	00001759 	.word	0x00001759
    12f4:	00001759 	.word	0x00001759
    12f8:	00001759 	.word	0x00001759
    12fc:	00001759 	.word	0x00001759
    1300:	0000147f 	.word	0x0000147f
    1304:	00001759 	.word	0x00001759
    1308:	00001759 	.word	0x00001759
    130c:	00001759 	.word	0x00001759
    1310:	00001759 	.word	0x00001759
    1314:	00001759 	.word	0x00001759
    1318:	00001759 	.word	0x00001759
    131c:	00001759 	.word	0x00001759
    1320:	00001759 	.word	0x00001759
    1324:	00001759 	.word	0x00001759
    1328:	00001759 	.word	0x00001759
    132c:	00001385 	.word	0x00001385
    1330:	000015ab 	.word	0x000015ab
    1334:	00001759 	.word	0x00001759
    1338:	000016e3 	.word	0x000016e3
    133c:	00001759 	.word	0x00001759
    1340:	00001759 	.word	0x00001759
    1344:	000015ab 	.word	0x000015ab
    1348:	00001759 	.word	0x00001759
    134c:	00001759 	.word	0x00001759
    1350:	00001759 	.word	0x00001759
    1354:	00001759 	.word	0x00001759
    1358:	00001759 	.word	0x00001759
    135c:	00001759 	.word	0x00001759
    1360:	00001759 	.word	0x00001759
    1364:	00001759 	.word	0x00001759
    1368:	00001759 	.word	0x00001759
    136c:	000013ab 	.word	0x000013ab
    1370:	00001759 	.word	0x00001759
    1374:	00001519 	.word	0x00001519
    1378:	00001759 	.word	0x00001759
    137c:	00001759 	.word	0x00001759
    1380:	00001479 	.word	0x00001479
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    1384:	687b      	ldr	r3, [r7, #4]
    1386:	1d1a      	adds	r2, r3, #4
    1388:	607a      	str	r2, [r7, #4]
    138a:	681b      	ldr	r3, [r3, #0]
    138c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    1390:	68fb      	ldr	r3, [r7, #12]
    1392:	2b00      	cmp	r3, #0
    1394:	d005      	beq.n	13a2 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    1396:	68fb      	ldr	r3, [r7, #12]
    1398:	1c5a      	adds	r2, r3, #1
    139a:	60fa      	str	r2, [r7, #12]
    139c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    13a0:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    13a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    13a4:	3301      	adds	r3, #1
    13a6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    13a8:	e1e6      	b.n	1778 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    13aa:	687b      	ldr	r3, [r7, #4]
    13ac:	1d1a      	adds	r2, r3, #4
    13ae:	607a      	str	r2, [r7, #4]
    13b0:	681b      	ldr	r3, [r3, #0]
    13b2:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    13b4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    13b6:	f7ff fdb4 	bl	f22 <simple_strlen>
    13ba:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    13bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13be:	2b00      	cmp	r3, #0
    13c0:	dd2e      	ble.n	1420 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    13c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    13c6:	429a      	cmp	r2, r3
    13c8:	d22a      	bcs.n	1420 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    13ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
    13cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    13ce:	1ad3      	subs	r3, r2, r3
    13d0:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    13d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    13d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
    13d8:	4619      	mov	r1, r3
    13da:	68f8      	ldr	r0, [r7, #12]
    13dc:	f7ff fdbc 	bl	f58 <padbuffer>
    13e0:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    13e2:	68fb      	ldr	r3, [r7, #12]
    13e4:	2b00      	cmp	r3, #0
    13e6:	d001      	beq.n	13ec <am_util_stdio_vsprintf+0x24c>
    13e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13ea:	e000      	b.n	13ee <am_util_stdio_vsprintf+0x24e>
    13ec:	2300      	movs	r3, #0
    13ee:	68fa      	ldr	r2, [r7, #12]
    13f0:	4413      	add	r3, r2
    13f2:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    13f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    13f8:	4413      	add	r3, r2
    13fa:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    13fc:	2300      	movs	r3, #0
    13fe:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    1400:	e00e      	b.n	1420 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    1402:	68fb      	ldr	r3, [r7, #12]
    1404:	2b00      	cmp	r3, #0
    1406:	d005      	beq.n	1414 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    1408:	68fb      	ldr	r3, [r7, #12]
    140a:	1c5a      	adds	r2, r3, #1
    140c:	60fa      	str	r2, [r7, #12]
    140e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1410:	7812      	ldrb	r2, [r2, #0]
    1412:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    1414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1416:	3301      	adds	r3, #1
    1418:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    141a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    141c:	3301      	adds	r3, #1
    141e:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    1420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1422:	781b      	ldrb	r3, [r3, #0]
    1424:	2b00      	cmp	r3, #0
    1426:	d1ec      	bne.n	1402 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    1428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    142a:	2b00      	cmp	r3, #0
    142c:	f000 81a1 	beq.w	1772 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    1430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1432:	425b      	negs	r3, r3
    1434:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    1436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    143a:	429a      	cmp	r2, r3
    143c:	f080 8199 	bcs.w	1772 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1440:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1444:	1ad3      	subs	r3, r2, r3
    1446:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1448:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    144c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    144e:	4619      	mov	r1, r3
    1450:	68f8      	ldr	r0, [r7, #12]
    1452:	f7ff fd81 	bl	f58 <padbuffer>
    1456:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    1458:	68fb      	ldr	r3, [r7, #12]
    145a:	2b00      	cmp	r3, #0
    145c:	d001      	beq.n	1462 <am_util_stdio_vsprintf+0x2c2>
    145e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1460:	e000      	b.n	1464 <am_util_stdio_vsprintf+0x2c4>
    1462:	2300      	movs	r3, #0
    1464:	68fa      	ldr	r2, [r7, #12]
    1466:	4413      	add	r3, r2
    1468:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    146a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    146c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    146e:	4413      	add	r3, r2
    1470:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1472:	2300      	movs	r3, #0
    1474:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    1476:	e17c      	b.n	1772 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    1478:	2301      	movs	r3, #1
    147a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    147e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1482:	2b00      	cmp	r3, #0
    1484:	d00a      	beq.n	149c <am_util_stdio_vsprintf+0x2fc>
    1486:	687b      	ldr	r3, [r7, #4]
    1488:	3307      	adds	r3, #7
    148a:	f023 0307 	bic.w	r3, r3, #7
    148e:	f103 0208 	add.w	r2, r3, #8
    1492:	607a      	str	r2, [r7, #4]
    1494:	cb18      	ldmia	r3, {r3, r4}
    1496:	e007      	b.n	14a8 <am_util_stdio_vsprintf+0x308>
    1498:	10001128 	.word	0x10001128
                                      va_arg(pArgs, uint32_t);
    149c:	687b      	ldr	r3, [r7, #4]
    149e:	1d1a      	adds	r2, r3, #4
    14a0:	607a      	str	r2, [r7, #4]
    14a2:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    14a4:	f04f 0400 	mov.w	r4, #0
    14a8:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    14ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14ae:	2b00      	cmp	r3, #0
    14b0:	d01e      	beq.n	14f0 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    14b2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    14b6:	f7ff fc22 	bl	cfe <ndigits_in_hex>
    14ba:	4602      	mov	r2, r0
    14bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14be:	1a9b      	subs	r3, r3, r2
    14c0:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    14c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    14c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
    14c8:	4619      	mov	r1, r3
    14ca:	68f8      	ldr	r0, [r7, #12]
    14cc:	f7ff fd44 	bl	f58 <padbuffer>
    14d0:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    14d2:	68fb      	ldr	r3, [r7, #12]
    14d4:	2b00      	cmp	r3, #0
    14d6:	d001      	beq.n	14dc <am_util_stdio_vsprintf+0x33c>
    14d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14da:	e000      	b.n	14de <am_util_stdio_vsprintf+0x33e>
    14dc:	2300      	movs	r3, #0
    14de:	68fa      	ldr	r2, [r7, #12]
    14e0:	4413      	add	r3, r2
    14e2:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    14e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    14e8:	4413      	add	r3, r2
    14ea:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    14ec:	2300      	movs	r3, #0
    14ee:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    14f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    14f4:	68fa      	ldr	r2, [r7, #12]
    14f6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    14fa:	f7ff fcb2 	bl	e62 <uint64_to_hexstr>
    14fe:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1500:	68fb      	ldr	r3, [r7, #12]
    1502:	2b00      	cmp	r3, #0
    1504:	d003      	beq.n	150e <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    1506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1508:	68fa      	ldr	r2, [r7, #12]
    150a:	4413      	add	r3, r2
    150c:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    150e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1510:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1512:	4413      	add	r3, r2
    1514:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1516:	e12f      	b.n	1778 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1518:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    151c:	2b00      	cmp	r3, #0
    151e:	d008      	beq.n	1532 <am_util_stdio_vsprintf+0x392>
    1520:	687b      	ldr	r3, [r7, #4]
    1522:	3307      	adds	r3, #7
    1524:	f023 0307 	bic.w	r3, r3, #7
    1528:	f103 0208 	add.w	r2, r3, #8
    152c:	607a      	str	r2, [r7, #4]
    152e:	cb18      	ldmia	r3, {r3, r4}
    1530:	e005      	b.n	153e <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    1532:	687b      	ldr	r3, [r7, #4]
    1534:	1d1a      	adds	r2, r3, #4
    1536:	607a      	str	r2, [r7, #4]
    1538:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    153a:	f04f 0400 	mov.w	r4, #0
    153e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    1542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1544:	2b00      	cmp	r3, #0
    1546:	d01e      	beq.n	1586 <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    1548:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    154c:	f7ff fb99 	bl	c82 <ndigits_in_u64>
    1550:	4602      	mov	r2, r0
    1552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1554:	1a9b      	subs	r3, r3, r2
    1556:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1558:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    155c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    155e:	4619      	mov	r1, r3
    1560:	68f8      	ldr	r0, [r7, #12]
    1562:	f7ff fcf9 	bl	f58 <padbuffer>
    1566:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1568:	68fb      	ldr	r3, [r7, #12]
    156a:	2b00      	cmp	r3, #0
    156c:	d001      	beq.n	1572 <am_util_stdio_vsprintf+0x3d2>
    156e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1570:	e000      	b.n	1574 <am_util_stdio_vsprintf+0x3d4>
    1572:	2300      	movs	r3, #0
    1574:	68fa      	ldr	r2, [r7, #12]
    1576:	4413      	add	r3, r2
    1578:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    157a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    157c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    157e:	4413      	add	r3, r2
    1580:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1582:	2300      	movs	r3, #0
    1584:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1586:	68fa      	ldr	r2, [r7, #12]
    1588:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    158c:	f7ff fc21 	bl	dd2 <uint64_to_str>
    1590:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1592:	68fb      	ldr	r3, [r7, #12]
    1594:	2b00      	cmp	r3, #0
    1596:	d003      	beq.n	15a0 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    1598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    159a:	68fa      	ldr	r2, [r7, #12]
    159c:	4413      	add	r3, r2
    159e:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    15a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    15a4:	4413      	add	r3, r2
    15a6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    15a8:	e0e6      	b.n	1778 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    15aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    15ae:	2b00      	cmp	r3, #0
    15b0:	d008      	beq.n	15c4 <am_util_stdio_vsprintf+0x424>
    15b2:	687b      	ldr	r3, [r7, #4]
    15b4:	3307      	adds	r3, #7
    15b6:	f023 0307 	bic.w	r3, r3, #7
    15ba:	f103 0208 	add.w	r2, r3, #8
    15be:	607a      	str	r2, [r7, #4]
    15c0:	cb18      	ldmia	r3, {r3, r4}
    15c2:	e005      	b.n	15d0 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    15c4:	687b      	ldr	r3, [r7, #4]
    15c6:	1d1a      	adds	r2, r3, #4
    15c8:	607a      	str	r2, [r7, #4]
    15ca:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    15cc:	ea4f 74e3 	mov.w	r4, r3, asr #31
    15d0:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    15d4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    15d8:	2b00      	cmp	r3, #0
    15da:	f174 0300 	sbcs.w	r3, r4, #0
    15de:	da0a      	bge.n	15f6 <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    15e0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    15e4:	425b      	negs	r3, r3
    15e6:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    15ea:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    15ee:	2301      	movs	r3, #1
    15f0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    15f4:	e006      	b.n	1604 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    15f6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    15fa:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    15fe:	2300      	movs	r3, #0
    1600:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    1604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1606:	2b00      	cmp	r3, #0
    1608:	d04a      	beq.n	16a0 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    160a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    160e:	4618      	mov	r0, r3
    1610:	4621      	mov	r1, r4
    1612:	f7ff fb57 	bl	cc4 <ndigits_in_i64>
    1616:	4602      	mov	r2, r0
    1618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    161a:	1a9b      	subs	r3, r3, r2
    161c:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    161e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1622:	2b00      	cmp	r3, #0
    1624:	d011      	beq.n	164a <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    1626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1628:	3b01      	subs	r3, #1
    162a:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    162c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1630:	2b30      	cmp	r3, #48	; 0x30
    1632:	d10a      	bne.n	164a <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    1634:	68fb      	ldr	r3, [r7, #12]
    1636:	2b00      	cmp	r3, #0
    1638:	d004      	beq.n	1644 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    163a:	68fb      	ldr	r3, [r7, #12]
    163c:	1c5a      	adds	r2, r3, #1
    163e:	60fa      	str	r2, [r7, #12]
    1640:	222d      	movs	r2, #45	; 0x2d
    1642:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    1644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1646:	3301      	adds	r3, #1
    1648:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    164a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    164e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1650:	4619      	mov	r1, r3
    1652:	68f8      	ldr	r0, [r7, #12]
    1654:	f7ff fc80 	bl	f58 <padbuffer>
    1658:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    165a:	68fb      	ldr	r3, [r7, #12]
    165c:	2b00      	cmp	r3, #0
    165e:	d001      	beq.n	1664 <am_util_stdio_vsprintf+0x4c4>
    1660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1662:	e000      	b.n	1666 <am_util_stdio_vsprintf+0x4c6>
    1664:	2300      	movs	r3, #0
    1666:	68fa      	ldr	r2, [r7, #12]
    1668:	4413      	add	r3, r2
    166a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    166c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    166e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1670:	4413      	add	r3, r2
    1672:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1674:	2300      	movs	r3, #0
    1676:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    1678:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    167c:	2b00      	cmp	r3, #0
    167e:	d01e      	beq.n	16be <am_util_stdio_vsprintf+0x51e>
    1680:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1684:	2b20      	cmp	r3, #32
    1686:	d11a      	bne.n	16be <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    1688:	68fb      	ldr	r3, [r7, #12]
    168a:	2b00      	cmp	r3, #0
    168c:	d004      	beq.n	1698 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    168e:	68fb      	ldr	r3, [r7, #12]
    1690:	1c5a      	adds	r2, r3, #1
    1692:	60fa      	str	r2, [r7, #12]
    1694:	222d      	movs	r2, #45	; 0x2d
    1696:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    1698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    169a:	3301      	adds	r3, #1
    169c:	63fb      	str	r3, [r7, #60]	; 0x3c
    169e:	e00e      	b.n	16be <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    16a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    16a4:	2b00      	cmp	r3, #0
    16a6:	d00a      	beq.n	16be <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    16a8:	68fb      	ldr	r3, [r7, #12]
    16aa:	2b00      	cmp	r3, #0
    16ac:	d004      	beq.n	16b8 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    16ae:	68fb      	ldr	r3, [r7, #12]
    16b0:	1c5a      	adds	r2, r3, #1
    16b2:	60fa      	str	r2, [r7, #12]
    16b4:	222d      	movs	r2, #45	; 0x2d
    16b6:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    16b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    16ba:	3301      	adds	r3, #1
    16bc:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    16be:	68fa      	ldr	r2, [r7, #12]
    16c0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    16c4:	f7ff fb85 	bl	dd2 <uint64_to_str>
    16c8:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    16ca:	68fb      	ldr	r3, [r7, #12]
    16cc:	2b00      	cmp	r3, #0
    16ce:	d003      	beq.n	16d8 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    16d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    16d2:	68fa      	ldr	r2, [r7, #12]
    16d4:	4413      	add	r3, r2
    16d6:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    16d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    16da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    16dc:	4413      	add	r3, r2
    16de:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    16e0:	e04a      	b.n	1778 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    16e2:	68fb      	ldr	r3, [r7, #12]
    16e4:	2b00      	cmp	r3, #0
    16e6:	d046      	beq.n	1776 <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    16e8:	687b      	ldr	r3, [r7, #4]
    16ea:	3307      	adds	r3, #7
    16ec:	f023 0307 	bic.w	r3, r3, #7
    16f0:	f103 0208 	add.w	r2, r3, #8
    16f4:	607a      	str	r2, [r7, #4]
    16f6:	cb18      	ldmia	r3, {r3, r4}
    16f8:	4618      	mov	r0, r3
    16fa:	4621      	mov	r1, r4
    16fc:	f7fe fce0 	bl	c0 <__aeabi_d2f>
    1700:	4603      	mov	r3, r0
    1702:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    1704:	68fb      	ldr	r3, [r7, #12]
    1706:	2214      	movs	r2, #20
    1708:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    170a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    170c:	68f9      	ldr	r1, [r7, #12]
    170e:	6978      	ldr	r0, [r7, #20]
    1710:	f7ff fc48 	bl	fa4 <ftoa>
    1714:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    1716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1718:	2b00      	cmp	r3, #0
    171a:	da14      	bge.n	1746 <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    171c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    171e:	f1b3 3fff 	cmp.w	r3, #4294967295
    1722:	d102      	bne.n	172a <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    1724:	4b1e      	ldr	r3, [pc, #120]	; (17a0 <am_util_stdio_vsprintf+0x600>)
    1726:	62bb      	str	r3, [r7, #40]	; 0x28
    1728:	e008      	b.n	173c <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    172a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    172c:	f113 0f02 	cmn.w	r3, #2
    1730:	d102      	bne.n	1738 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    1732:	4b1c      	ldr	r3, [pc, #112]	; (17a4 <am_util_stdio_vsprintf+0x604>)
    1734:	62bb      	str	r3, [r7, #40]	; 0x28
    1736:	e001      	b.n	173c <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    1738:	4b1b      	ldr	r3, [pc, #108]	; (17a8 <am_util_stdio_vsprintf+0x608>)
    173a:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    173c:	68fb      	ldr	r3, [r7, #12]
    173e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1740:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    1742:	2303      	movs	r3, #3
    1744:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    1746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1748:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    174a:	4413      	add	r3, r2
    174c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    174e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1750:	68fa      	ldr	r2, [r7, #12]
    1752:	4413      	add	r3, r2
    1754:	60fb      	str	r3, [r7, #12]
                }
                break;
    1756:	e00e      	b.n	1776 <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    1758:	68fb      	ldr	r3, [r7, #12]
    175a:	2b00      	cmp	r3, #0
    175c:	d005      	beq.n	176a <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    175e:	68fb      	ldr	r3, [r7, #12]
    1760:	1c5a      	adds	r2, r3, #1
    1762:	60fa      	str	r2, [r7, #12]
    1764:	68ba      	ldr	r2, [r7, #8]
    1766:	7812      	ldrb	r2, [r2, #0]
    1768:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    176a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    176c:	3301      	adds	r3, #1
    176e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1770:	e002      	b.n	1778 <am_util_stdio_vsprintf+0x5d8>
                break;
    1772:	bf00      	nop
    1774:	e000      	b.n	1778 <am_util_stdio_vsprintf+0x5d8>
                break;
    1776:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    1778:	68bb      	ldr	r3, [r7, #8]
    177a:	3301      	adds	r3, #1
    177c:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    177e:	68bb      	ldr	r3, [r7, #8]
    1780:	781b      	ldrb	r3, [r3, #0]
    1782:	2b00      	cmp	r3, #0
    1784:	f47f ad17 	bne.w	11b6 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    1788:	68fb      	ldr	r3, [r7, #12]
    178a:	2b00      	cmp	r3, #0
    178c:	d002      	beq.n	1794 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    178e:	68fb      	ldr	r3, [r7, #12]
    1790:	2200      	movs	r2, #0
    1792:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    1794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1796:	4618      	mov	r0, r3
    1798:	3754      	adds	r7, #84	; 0x54
    179a:	46bd      	mov	sp, r7
    179c:	bd90      	pop	{r4, r7, pc}
    179e:	bf00      	nop
    17a0:	00302e30 	.word	0x00302e30
    17a4:	00232e23 	.word	0x00232e23
    17a8:	003f2e3f 	.word	0x003f2e3f

000017ac <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    17ac:	b40f      	push	{r0, r1, r2, r3}
    17ae:	b580      	push	{r7, lr}
    17b0:	b082      	sub	sp, #8
    17b2:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    17b4:	f107 0314 	add.w	r3, r7, #20
    17b8:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    17ba:	683a      	ldr	r2, [r7, #0]
    17bc:	6939      	ldr	r1, [r7, #16]
    17be:	4808      	ldr	r0, [pc, #32]	; (17e0 <am_util_stdio_printf+0x34>)
    17c0:	f7ff fcee 	bl	11a0 <am_util_stdio_vsprintf>
    17c4:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    17c6:	4b07      	ldr	r3, [pc, #28]	; (17e4 <am_util_stdio_printf+0x38>)
    17c8:	681b      	ldr	r3, [r3, #0]
    17ca:	4805      	ldr	r0, [pc, #20]	; (17e0 <am_util_stdio_printf+0x34>)
    17cc:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    17ce:	687b      	ldr	r3, [r7, #4]
}
    17d0:	4618      	mov	r0, r3
    17d2:	3708      	adds	r7, #8
    17d4:	46bd      	mov	sp, r7
    17d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    17da:	b004      	add	sp, #16
    17dc:	4770      	bx	lr
    17de:	bf00      	nop
    17e0:	10001028 	.word	0x10001028
    17e4:	10001130 	.word	0x10001130

000017e8 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    17e8:	b580      	push	{r7, lr}
    17ea:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    17ec:	4802      	ldr	r0, [pc, #8]	; (17f8 <am_util_stdio_terminal_clear+0x10>)
    17ee:	f7ff ffdd 	bl	17ac <am_util_stdio_printf>
}
    17f2:	bf00      	nop
    17f4:	bd80      	pop	{r7, pc}
    17f6:	bf00      	nop
    17f8:	00001fa8 	.word	0x00001fa8

000017fc <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    17fc:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    17fe:	f000 faf5 	bl	1dec <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    1802:	f000 fb17 	bl	1e34 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    1806:	f000 fb99 	bl	1f3c <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    180a:	2001      	movs	r0, #1
    180c:	f000 fb22 	bl	1e54 <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1810:	2001      	movs	r0, #1
    1812:	f000 f943 	bl	1a9c <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    1816:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    181a:	f000 bb29 	b.w	1e70 <am_hal_rtc_osc_disable>
    181e:	bf00      	nop

00001820 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    1820:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1822:	4b17      	ldr	r3, [pc, #92]	; (1880 <am_bsp_debug_printf_enable+0x60>)
    1824:	681c      	ldr	r4, [r3, #0]
    1826:	f014 0401 	ands.w	r4, r4, #1
{
    182a:	b087      	sub	sp, #28
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    182c:	d001      	beq.n	1832 <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    182e:	b007      	add	sp, #28
    1830:	bd30      	pop	{r4, r5, pc}
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1832:	4a14      	ldr	r2, [pc, #80]	; (1884 <am_bsp_debug_printf_enable+0x64>)
    1834:	4914      	ldr	r1, [pc, #80]	; (1888 <am_bsp_debug_printf_enable+0x68>)
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    1836:	4d15      	ldr	r5, [pc, #84]	; (188c <am_bsp_debug_printf_enable+0x6c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1838:	6011      	str	r1, [r2, #0]
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    183a:	a806      	add	r0, sp, #24
    183c:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    1840:	f000 fb1e 	bl	1e80 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    1844:	f000 f950 	bl	1ae8 <am_hal_interrupt_master_disable>
    1848:	4a11      	ldr	r2, [pc, #68]	; (1890 <am_bsp_debug_printf_enable+0x70>)
    184a:	9000      	str	r0, [sp, #0]
    184c:	4d11      	ldr	r5, [pc, #68]	; (1894 <am_bsp_debug_printf_enable+0x74>)
    184e:	4912      	ldr	r1, [pc, #72]	; (1898 <am_bsp_debug_printf_enable+0x78>)
    1850:	2073      	movs	r0, #115	; 0x73
    1852:	6010      	str	r0, [r2, #0]
    1854:	682b      	ldr	r3, [r5, #0]
    1856:	4811      	ldr	r0, [pc, #68]	; (189c <am_bsp_debug_printf_enable+0x7c>)
    1858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    185c:	602b      	str	r3, [r5, #0]
    185e:	6805      	ldr	r5, [r0, #0]
    1860:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    1864:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    1868:	6003      	str	r3, [r0, #0]
    186a:	6808      	ldr	r0, [r1, #0]
    186c:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    1870:	600d      	str	r5, [r1, #0]
    1872:	6014      	str	r4, [r2, #0]
    1874:	9800      	ldr	r0, [sp, #0]
    1876:	f000 f93b 	bl	1af0 <am_hal_interrupt_master_set>
}
    187a:	b007      	add	sp, #28
    187c:	bd30      	pop	{r4, r5, pc}
    187e:	bf00      	nop
    1880:	1000112c 	.word	0x1000112c
    1884:	e0000e80 	.word	0xe0000e80
    1888:	00150511 	.word	0x00150511
    188c:	000f4240 	.word	0x000f4240
    1890:	40010060 	.word	0x40010060
    1894:	40010054 	.word	0x40010054
    1898:	40010108 	.word	0x40010108
    189c:	40010028 	.word	0x40010028

000018a0 <am_bsp_debug_printf_disable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    18a0:	b530      	push	{r4, r5, lr}
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    18a2:	4b14      	ldr	r3, [pc, #80]	; (18f4 <am_bsp_debug_printf_disable+0x54>)
    18a4:	681c      	ldr	r4, [r3, #0]
    18a6:	f014 0401 	ands.w	r4, r4, #1
{
    18aa:	b083      	sub	sp, #12
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    18ac:	d120      	bne.n	18f0 <am_bsp_debug_printf_disable+0x50>
    }

    //
    // Disable the TPIU
    //
    am_hal_itm_not_busy();
    18ae:	f000 f94f 	bl	1b50 <am_hal_itm_not_busy>
    am_hal_gpio_pin_config(AM_BSP_GPIO_ITM_SWO, AM_HAL_GPIO_OUTPUT);
    18b2:	f000 f919 	bl	1ae8 <am_hal_interrupt_master_disable>
    18b6:	4a10      	ldr	r2, [pc, #64]	; (18f8 <am_bsp_debug_printf_disable+0x58>)
    18b8:	9001      	str	r0, [sp, #4]
    18ba:	4d10      	ldr	r5, [pc, #64]	; (18fc <am_bsp_debug_printf_disable+0x5c>)
    18bc:	4910      	ldr	r1, [pc, #64]	; (1900 <am_bsp_debug_printf_disable+0x60>)
    18be:	2073      	movs	r0, #115	; 0x73
    18c0:	6010      	str	r0, [r2, #0]
    18c2:	682b      	ldr	r3, [r5, #0]
    18c4:	480f      	ldr	r0, [pc, #60]	; (1904 <am_bsp_debug_printf_disable+0x64>)
    18c6:	f023 0c70 	bic.w	ip, r3, #112	; 0x70
    18ca:	f04c 0320 	orr.w	r3, ip, #32
    18ce:	602b      	str	r3, [r5, #0]
    18d0:	6805      	ldr	r5, [r0, #0]
    18d2:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    18d6:	f44c 53c0 	orr.w	r3, ip, #6144	; 0x1800
    18da:	6003      	str	r3, [r0, #0]
    18dc:	6808      	ldr	r0, [r1, #0]
    18de:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    18e2:	600d      	str	r5, [r1, #0]
    18e4:	6014      	str	r4, [r2, #0]
    18e6:	9801      	ldr	r0, [sp, #4]
    18e8:	f000 f902 	bl	1af0 <am_hal_interrupt_master_set>
    am_hal_tpiu_disable();
    18ec:	f000 fb20 	bl	1f30 <am_hal_tpiu_disable>
}
    18f0:	b003      	add	sp, #12
    18f2:	bd30      	pop	{r4, r5, pc}
    18f4:	1000112c 	.word	0x1000112c
    18f8:	40010060 	.word	0x40010060
    18fc:	40010054 	.word	0x40010054
    1900:	40010108 	.word	0x40010108
    1904:	40010028 	.word	0x40010028

00001908 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    1908:	f000 b92c 	b.w	1b64 <am_hal_itm_print>

0000190c <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    190e:	4605      	mov	r5, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1910:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    1914:	78ab      	ldrb	r3, [r5, #2]
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    1916:	786c      	ldrb	r4, [r5, #1]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1918:	78ef      	ldrb	r7, [r5, #3]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    191a:	792e      	ldrb	r6, [r5, #4]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    191c:	79a9      	ldrb	r1, [r5, #6]
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    191e:	009a      	lsls	r2, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    1920:	0064      	lsls	r4, r4, #1
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    1922:	f002 0204 	and.w	r2, r2, #4
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    1926:	f004 0402 	and.w	r4, r4, #2
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    192a:	4314      	orrs	r4, r2
    192c:	f047 0701 	orr.w	r7, r7, #1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    1930:	79ea      	ldrb	r2, [r5, #7]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    1932:	01f6      	lsls	r6, r6, #7
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1934:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    1936:	b2f6      	uxtb	r6, r6
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    1938:	7a2f      	ldrb	r7, [r5, #8]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    193a:	0289      	lsls	r1, r1, #10
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    193c:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    193e:	f401 6180 	and.w	r1, r1, #1024	; 0x400
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    1942:	7a6e      	ldrb	r6, [r5, #9]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    1944:	02d2      	lsls	r2, r2, #11
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1946:	430c      	orrs	r4, r1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    1948:	f402 6200 	and.w	r2, r2, #2048	; 0x800
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    194c:	7aa9      	ldrb	r1, [r5, #10]
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    194e:	033f      	lsls	r7, r7, #12
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1950:	4314      	orrs	r4, r2
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    1952:	b2bf      	uxth	r7, r7
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    1954:	0436      	lsls	r6, r6, #16
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    1956:	7aea      	ldrb	r2, [r5, #11]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1958:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    195a:	0509      	lsls	r1, r1, #20
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    195c:	f406 2770 	and.w	r7, r6, #983040	; 0xf0000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    1960:	0612      	lsls	r2, r2, #24
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1962:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    1964:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    1968:	009b      	lsls	r3, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    196a:	f002 7780 	and.w	r7, r2, #16777216	; 0x1000000
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    196e:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    1970:	f003 0108 	and.w	r1, r3, #8
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1974:	433c      	orrs	r4, r7
    1976:	430c      	orrs	r4, r1
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1978:	f000 f932 	bl	1be0 <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    197c:	482c      	ldr	r0, [pc, #176]	; (1a30 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    197e:	4b2d      	ldr	r3, [pc, #180]	; (1a34 <am_hal_cachectrl_enable+0x128>)
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1980:	6004      	str	r4, [r0, #0]
    1982:	2232      	movs	r2, #50	; 0x32
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1984:	681e      	ldr	r6, [r3, #0]
    1986:	0777      	lsls	r7, r6, #29
    1988:	d41e      	bmi.n	19c8 <am_hal_cachectrl_enable+0xbc>
    198a:	681f      	ldr	r7, [r3, #0]
    198c:	077e      	lsls	r6, r7, #29
    198e:	f102 32ff 	add.w	r2, r2, #4294967295
    1992:	d419      	bmi.n	19c8 <am_hal_cachectrl_enable+0xbc>
    1994:	6819      	ldr	r1, [r3, #0]
    1996:	074f      	lsls	r7, r1, #29
    1998:	d416      	bmi.n	19c8 <am_hal_cachectrl_enable+0xbc>
    199a:	6818      	ldr	r0, [r3, #0]
    199c:	0746      	lsls	r6, r0, #29
    199e:	d413      	bmi.n	19c8 <am_hal_cachectrl_enable+0xbc>
    19a0:	681e      	ldr	r6, [r3, #0]
    19a2:	0770      	lsls	r0, r6, #29
    19a4:	d410      	bmi.n	19c8 <am_hal_cachectrl_enable+0xbc>
    19a6:	681f      	ldr	r7, [r3, #0]
    19a8:	0779      	lsls	r1, r7, #29
    19aa:	d40d      	bmi.n	19c8 <am_hal_cachectrl_enable+0xbc>
    19ac:	6819      	ldr	r1, [r3, #0]
    19ae:	074f      	lsls	r7, r1, #29
    19b0:	d40a      	bmi.n	19c8 <am_hal_cachectrl_enable+0xbc>
    19b2:	6818      	ldr	r0, [r3, #0]
    19b4:	0746      	lsls	r6, r0, #29
    19b6:	d407      	bmi.n	19c8 <am_hal_cachectrl_enable+0xbc>
    19b8:	681e      	ldr	r6, [r3, #0]
    19ba:	0770      	lsls	r0, r6, #29
    19bc:	d404      	bmi.n	19c8 <am_hal_cachectrl_enable+0xbc>
    19be:	681f      	ldr	r7, [r3, #0]
    19c0:	0779      	lsls	r1, r7, #29
    19c2:	d401      	bmi.n	19c8 <am_hal_cachectrl_enable+0xbc>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    19c4:	3a09      	subs	r2, #9
    19c6:	d1dd      	bne.n	1984 <am_hal_cachectrl_enable+0x78>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    19c8:	4b1a      	ldr	r3, [pc, #104]	; (1a34 <am_hal_cachectrl_enable+0x128>)
    19ca:	681a      	ldr	r2, [r3, #0]
    19cc:	f042 0101 	orr.w	r1, r2, #1
    19d0:	6019      	str	r1, [r3, #0]
    19d2:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    19d4:	6818      	ldr	r0, [r3, #0]
    19d6:	0740      	lsls	r0, r0, #29
    19d8:	d41e      	bmi.n	1a18 <am_hal_cachectrl_enable+0x10c>
    19da:	681e      	ldr	r6, [r3, #0]
    19dc:	0771      	lsls	r1, r6, #29
    19de:	f102 32ff 	add.w	r2, r2, #4294967295
    19e2:	d419      	bmi.n	1a18 <am_hal_cachectrl_enable+0x10c>
    19e4:	681f      	ldr	r7, [r3, #0]
    19e6:	077f      	lsls	r7, r7, #29
    19e8:	d416      	bmi.n	1a18 <am_hal_cachectrl_enable+0x10c>
    19ea:	6819      	ldr	r1, [r3, #0]
    19ec:	074e      	lsls	r6, r1, #29
    19ee:	d413      	bmi.n	1a18 <am_hal_cachectrl_enable+0x10c>
    19f0:	6818      	ldr	r0, [r3, #0]
    19f2:	0740      	lsls	r0, r0, #29
    19f4:	d410      	bmi.n	1a18 <am_hal_cachectrl_enable+0x10c>
    19f6:	681e      	ldr	r6, [r3, #0]
    19f8:	0771      	lsls	r1, r6, #29
    19fa:	d40d      	bmi.n	1a18 <am_hal_cachectrl_enable+0x10c>
    19fc:	681f      	ldr	r7, [r3, #0]
    19fe:	077f      	lsls	r7, r7, #29
    1a00:	d40a      	bmi.n	1a18 <am_hal_cachectrl_enable+0x10c>
    1a02:	6819      	ldr	r1, [r3, #0]
    1a04:	074e      	lsls	r6, r1, #29
    1a06:	d407      	bmi.n	1a18 <am_hal_cachectrl_enable+0x10c>
    1a08:	6818      	ldr	r0, [r3, #0]
    1a0a:	0740      	lsls	r0, r0, #29
    1a0c:	d404      	bmi.n	1a18 <am_hal_cachectrl_enable+0x10c>
    1a0e:	681e      	ldr	r6, [r3, #0]
    1a10:	0771      	lsls	r1, r6, #29
    1a12:	d401      	bmi.n	1a18 <am_hal_cachectrl_enable+0x10c>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    1a14:	3a09      	subs	r2, #9
    1a16:	d1dd      	bne.n	19d4 <am_hal_cachectrl_enable+0xc8>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1a18:	796d      	ldrb	r5, [r5, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1a1a:	4f05      	ldr	r7, [pc, #20]	; (1a30 <am_hal_cachectrl_enable+0x124>)
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );
    1a1c:	022b      	lsls	r3, r5, #8
    1a1e:	f403 7100 	and.w	r1, r3, #512	; 0x200
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1a22:	f403 7280 	and.w	r2, r3, #256	; 0x100
    1a26:	4311      	orrs	r1, r2
    1a28:	430c      	orrs	r4, r1
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1a2a:	603c      	str	r4, [r7, #0]
    1a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a2e:	bf00      	nop
    1a30:	40018000 	.word	0x40018000
    1a34:	40018008 	.word	0x40018008

00001a38 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    1a38:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    1a3a:	4604      	mov	r4, r0
    1a3c:	b120      	cbz	r0, 1a48 <am_hal_clkgen_sysclk_select+0x10>
    1a3e:	4a06      	ldr	r2, [pc, #24]	; (1a58 <am_hal_clkgen_sysclk_select+0x20>)
    1a40:	4806      	ldr	r0, [pc, #24]	; (1a5c <am_hal_clkgen_sysclk_select+0x24>)
    1a42:	2153      	movs	r1, #83	; 0x53
    1a44:	f000 f83c 	bl	1ac0 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1a48:	4b05      	ldr	r3, [pc, #20]	; (1a60 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the required operating value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1a4a:	4906      	ldr	r1, [pc, #24]	; (1a64 <am_hal_clkgen_sysclk_select+0x2c>)
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1a4c:	2047      	movs	r0, #71	; 0x47

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    1a4e:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1a50:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1a52:	600c      	str	r4, [r1, #0]
    AM_REG(CLKGEN, CLKKEY) = 0;
    1a54:	601a      	str	r2, [r3, #0]
    1a56:	bd10      	pop	{r4, pc}
    1a58:	00001fc8 	.word	0x00001fc8
    1a5c:	00002000 	.word	0x00002000
    1a60:	40004014 	.word	0x40004014
    1a64:	40004018 	.word	0x40004018

00001a68 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1a68:	4b04      	ldr	r3, [pc, #16]	; (1a7c <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    1a6a:	4905      	ldr	r1, [pc, #20]	; (1a80 <am_hal_clkgen_sysclk_get+0x18>)
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1a6c:	681a      	ldr	r2, [r3, #0]
            return 48000000;
    1a6e:	4805      	ldr	r0, [pc, #20]	; (1a84 <am_hal_clkgen_sysclk_get+0x1c>)
    switch ( ui32ClockSetting )
    1a70:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    1a74:	bf08      	it	eq
    1a76:	4608      	moveq	r0, r1
    1a78:	4770      	bx	lr
    1a7a:	bf00      	nop
    1a7c:	40004018 	.word	0x40004018
    1a80:	02dc6c00 	.word	0x02dc6c00
    1a84:	016e3600 	.word	0x016e3600

00001a88 <am_hal_clkgen_osc_start>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_start(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1a88:	0783      	lsls	r3, r0, #30
    1a8a:	d004      	beq.n	1a96 <am_hal_clkgen_osc_start+0xe>
    {
        //
        // Start the oscillator(s).
        // Note that these bits are cleared in order to enable the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) &= ~ui32OscFlags;
    1a8c:	4a02      	ldr	r2, [pc, #8]	; (1a98 <am_hal_clkgen_osc_start+0x10>)
    1a8e:	6813      	ldr	r3, [r2, #0]
    1a90:	ea23 0000 	bic.w	r0, r3, r0
    1a94:	6010      	str	r0, [r2, #0]
    1a96:	4770      	bx	lr
    1a98:	4000400c 	.word	0x4000400c

00001a9c <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1a9c:	0783      	lsls	r3, r0, #30
    1a9e:	d003      	beq.n	1aa8 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    1aa0:	4b02      	ldr	r3, [pc, #8]	; (1aac <am_hal_clkgen_osc_stop+0x10>)
    1aa2:	681a      	ldr	r2, [r3, #0]
    1aa4:	4310      	orrs	r0, r2
    1aa6:	6018      	str	r0, [r3, #0]
    1aa8:	4770      	bx	lr
    1aaa:	bf00      	nop
    1aac:	4000400c 	.word	0x4000400c

00001ab0 <am_hal_clkgen_clkout_enable>:
am_hal_clkgen_clkout_enable(uint32_t ui32Signal)
{
    //
    // Enable the clock out on desired signal.
    //
    AM_REG(CLKGEN, CLKOUT) = AM_REG_CLKGEN_CLKOUT_CKEN_M | ui32Signal;
    1ab0:	4b02      	ldr	r3, [pc, #8]	; (1abc <am_hal_clkgen_clkout_enable+0xc>)
    1ab2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    1ab6:	6018      	str	r0, [r3, #0]
    1ab8:	4770      	bx	lr
    1aba:	bf00      	nop
    1abc:	40004010 	.word	0x40004010

00001ac0 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    1ac0:	e7fe      	b.n	1ac0 <am_hal_debug_error>
    1ac2:	bf00      	nop

00001ac4 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1ac4:	4b00      	ldr	r3, [pc, #0]	; (1ac8 <am_hal_flash_delay+0x4>)
    1ac6:	4718      	bx	r3
    1ac8:	0800009d 	.word	0x0800009d

00001acc <am_hal_gpio_out_enable_bit_get>:
{
    //
    // Return 0 or 1.
    //

    return (AM_HAL_GPIO_EN(ui32BitNum) & AM_HAL_GPIO_EN_M(ui32BitNum)) ? 1 : 0;
    1acc:	08c3      	lsrs	r3, r0, #3
    1ace:	f003 0104 	and.w	r1, r3, #4
    1ad2:	4a04      	ldr	r2, [pc, #16]	; (1ae4 <am_hal_gpio_out_enable_bit_get+0x18>)
    1ad4:	588b      	ldr	r3, [r1, r2]
    1ad6:	f000 001f 	and.w	r0, r0, #31
    1ada:	fa23 f100 	lsr.w	r1, r3, r0
}
    1ade:	f001 0001 	and.w	r0, r1, #1
    1ae2:	4770      	bx	lr
    1ae4:	400100a0 	.word	0x400100a0

00001ae8 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1ae8:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    1aec:	b672      	cpsid	i
    __asm("    bx lr");
    1aee:	4770      	bx	lr

00001af0 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    1af0:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    1af4:	4770      	bx	lr
    1af6:	bf00      	nop

00001af8 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    1af8:	4b0d      	ldr	r3, [pc, #52]	; (1b30 <am_hal_itm_enable+0x38>)
    1afa:	6818      	ldr	r0, [r3, #0]
    1afc:	07c2      	lsls	r2, r0, #31
    1afe:	d416      	bmi.n	1b2e <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    1b00:	4a0c      	ldr	r2, [pc, #48]	; (1b34 <am_hal_itm_enable+0x3c>)
    1b02:	6811      	ldr	r1, [r2, #0]
{
    1b04:	b430      	push	{r4, r5}
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    1b06:	f041 7480 	orr.w	r4, r1, #16777216	; 0x1000000
    1b0a:	6014      	str	r4, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    1b0c:	6815      	ldr	r5, [r2, #0]
    1b0e:	01eb      	lsls	r3, r5, #7
    1b10:	d5fc      	bpl.n	1b0c <am_hal_itm_enable+0x14>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    1b12:	4809      	ldr	r0, [pc, #36]	; (1b38 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    1b14:	4c09      	ldr	r4, [pc, #36]	; (1b3c <am_hal_itm_enable+0x44>)
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    1b16:	4d0a      	ldr	r5, [pc, #40]	; (1b40 <am_hal_itm_enable+0x48>)
    1b18:	6005      	str	r5, [r0, #0]
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    1b1a:	250f      	movs	r5, #15
    1b1c:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    1b1e:	bc30      	pop	{r4, r5}
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1b20:	4908      	ldr	r1, [pc, #32]	; (1b44 <am_hal_itm_enable+0x4c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1b22:	4b09      	ldr	r3, [pc, #36]	; (1b48 <am_hal_itm_enable+0x50>)
    1b24:	4a09      	ldr	r2, [pc, #36]	; (1b4c <am_hal_itm_enable+0x54>)
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1b26:	f04f 30ff 	mov.w	r0, #4294967295
    1b2a:	6008      	str	r0, [r1, #0]
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1b2c:	601a      	str	r2, [r3, #0]
}
    1b2e:	4770      	bx	lr
    1b30:	1000112c 	.word	0x1000112c
    1b34:	e000edfc 	.word	0xe000edfc
    1b38:	e0000fb0 	.word	0xe0000fb0
    1b3c:	e0000e40 	.word	0xe0000e40
    1b40:	c5acce55 	.word	0xc5acce55
    1b44:	e0000e00 	.word	0xe0000e00
    1b48:	e0000e80 	.word	0xe0000e80
    1b4c:	00150511 	.word	0x00150511

00001b50 <am_hal_itm_not_busy>:
am_hal_itm_not_busy(void)
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
    while (AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1));
    1b50:	4a03      	ldr	r2, [pc, #12]	; (1b60 <am_hal_itm_not_busy+0x10>)
    1b52:	6813      	ldr	r3, [r2, #0]
    1b54:	021b      	lsls	r3, r3, #8
    1b56:	d4fc      	bmi.n	1b52 <am_hal_itm_not_busy+0x2>

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1b58:	f44f 7047 	mov.w	r0, #796	; 0x31c
    1b5c:	f7ff bfb2 	b.w	1ac4 <am_hal_flash_delay>
    1b60:	e0000e80 	.word	0xe0000e80

00001b64 <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1b64:	7803      	ldrb	r3, [r0, #0]
    1b66:	b1b3      	cbz	r3, 1b96 <am_hal_itm_print+0x32>
{
    1b68:	b410      	push	{r4}
    1b6a:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    1b6c:	2400      	movs	r4, #0
    1b6e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    1b72:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    1b74:	2900      	cmp	r1, #0
    1b76:	d1fa      	bne.n	1b6e <am_hal_itm_print+0xa>
    1b78:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    1b7a:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    1b7e:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    1b82:	f8dc 3000 	ldr.w	r3, [ip]
    1b86:	2b00      	cmp	r3, #0
    1b88:	d0fb      	beq.n	1b82 <am_hal_itm_print+0x1e>
    while (ui32Length)
    1b8a:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    1b8c:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    1b90:	d1f5      	bne.n	1b7e <am_hal_itm_print+0x1a>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    1b92:	f85d 4b04 	ldr.w	r4, [sp], #4
    1b96:	4770      	bx	lr

00001b98 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1b98:	490d      	ldr	r1, [pc, #52]	; (1bd0 <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1b9a:	4b0e      	ldr	r3, [pc, #56]	; (1bd4 <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1b9c:	4a0e      	ldr	r2, [pc, #56]	; (1bd8 <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1b9e:	681b      	ldr	r3, [r3, #0]
{
    1ba0:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1ba2:	680d      	ldr	r5, [r1, #0]
    1ba4:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1ba6:	6815      	ldr	r5, [r2, #0]
    1ba8:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1baa:	4c0c      	ldr	r4, [pc, #48]	; (1bdc <am_hal_mcuctrl_fault_status+0x44>)
    1bac:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1bae:	4329      	orrs	r1, r5
    1bb0:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1bb2:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1bb4:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1bb8:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1bba:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1bbc:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1bc0:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1bc4:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1bc6:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1bc8:	6142      	str	r2, [r0, #20]
}
    1bca:	bc70      	pop	{r4, r5, r6}
    1bcc:	4770      	bx	lr
    1bce:	bf00      	nop
    1bd0:	400201c4 	.word	0x400201c4
    1bd4:	400201cc 	.word	0x400201cc
    1bd8:	400201c0 	.word	0x400201c0
    1bdc:	400201c8 	.word	0x400201c8

00001be0 <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1be0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
{
    1be4:	b430      	push	{r4, r5}
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1be6:	d03a      	beq.n	1c5e <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    1be8:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    1bec:	f000 809d 	beq.w	1d2a <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    1bf0:	2801      	cmp	r0, #1
    1bf2:	f000 809d 	beq.w	1d30 <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    1bf6:	2803      	cmp	r0, #3
    1bf8:	f000 80a6 	beq.w	1d48 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    1bfc:	2807      	cmp	r0, #7
    1bfe:	f000 809c 	beq.w	1d3a <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    1c02:	280f      	cmp	r0, #15
    1c04:	f000 80a5 	beq.w	1d52 <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    1c08:	281f      	cmp	r0, #31
    1c0a:	f000 80b0 	beq.w	1d6e <am_hal_pwrctrl_memory_enable+0x18e>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    1c0e:	283f      	cmp	r0, #63	; 0x3f
    1c10:	f000 80b4 	beq.w	1d7c <am_hal_pwrctrl_memory_enable+0x19c>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    1c14:	287f      	cmp	r0, #127	; 0x7f
    1c16:	f000 80b8 	beq.w	1d8a <am_hal_pwrctrl_memory_enable+0x1aa>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    1c1a:	28ff      	cmp	r0, #255	; 0xff
    1c1c:	f000 80a0 	beq.w	1d60 <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    1c20:	f240 13ff 	movw	r3, #511	; 0x1ff
    1c24:	4298      	cmp	r0, r3
    1c26:	f000 80b7 	beq.w	1d98 <am_hal_pwrctrl_memory_enable+0x1b8>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    1c2a:	f240 31ff 	movw	r1, #1023	; 0x3ff
    1c2e:	4288      	cmp	r0, r1
    1c30:	f000 80b8 	beq.w	1da4 <am_hal_pwrctrl_memory_enable+0x1c4>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    1c34:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1c38:	4290      	cmp	r0, r2
    1c3a:	d00e      	beq.n	1c5a <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    1c3c:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    1c40:	f000 80b6 	beq.w	1db0 <am_hal_pwrctrl_memory_enable+0x1d0>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    1c44:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    1c48:	42a0      	cmp	r0, r4
    1c4a:	f000 80b4 	beq.w	1db6 <am_hal_pwrctrl_memory_enable+0x1d6>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    1c4e:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    1c52:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    1c56:	4560      	cmp	r0, ip
    1c58:	d132      	bne.n	1cc0 <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    1c5a:	495b      	ldr	r1, [pc, #364]	; (1dc8 <am_hal_pwrctrl_memory_enable+0x1e8>)
    1c5c:	e066      	b.n	1d2c <am_hal_pwrctrl_memory_enable+0x14c>
    1c5e:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    1c62:	2340      	movs	r3, #64	; 0x40
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    1c64:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1c66:	4c59      	ldr	r4, [pc, #356]	; (1dcc <am_hal_pwrctrl_memory_enable+0x1ec>)
    1c68:	6825      	ldr	r5, [r4, #0]
    1c6a:	402a      	ands	r2, r5
    1c6c:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    1c6e:	4a57      	ldr	r2, [pc, #348]	; (1dcc <am_hal_pwrctrl_memory_enable+0x1ec>)
    1c70:	6814      	ldr	r4, [r2, #0]
    1c72:	4320      	orrs	r0, r4
    1c74:	6010      	str	r0, [r2, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    1c76:	2b00      	cmp	r3, #0
    1c78:	d029      	beq.n	1cce <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1c7a:	4d55      	ldr	r5, [pc, #340]	; (1dd0 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1c7c:	6828      	ldr	r0, [r5, #0]
        while ( --i32TOcnt              &&
    1c7e:	4218      	tst	r0, r3
    1c80:	bf18      	it	ne
    1c82:	20c6      	movne	r0, #198	; 0xc6
    1c84:	d01f      	beq.n	1cc6 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1c86:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1c88:	421a      	tst	r2, r3
    1c8a:	d01c      	beq.n	1cc6 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1c8c:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1c8e:	421c      	tst	r4, r3
    1c90:	d019      	beq.n	1cc6 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1c92:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1c94:	421a      	tst	r2, r3
    1c96:	d016      	beq.n	1cc6 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1c98:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1c9a:	421c      	tst	r4, r3
    1c9c:	d013      	beq.n	1cc6 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1c9e:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1ca0:	421a      	tst	r2, r3
    1ca2:	d010      	beq.n	1cc6 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1ca4:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1ca6:	421c      	tst	r4, r3
    1ca8:	d00d      	beq.n	1cc6 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1caa:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1cac:	421a      	tst	r2, r3
    1cae:	d00a      	beq.n	1cc6 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1cb0:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1cb2:	421c      	tst	r4, r3
    1cb4:	d007      	beq.n	1cc6 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1cb6:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1cb8:	421a      	tst	r2, r3
    1cba:	d004      	beq.n	1cc6 <am_hal_pwrctrl_memory_enable+0xe6>
    1cbc:	3809      	subs	r0, #9
    1cbe:	d1e2      	bne.n	1c86 <am_hal_pwrctrl_memory_enable+0xa6>
        return false;
    1cc0:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    1cc2:	bc30      	pop	{r4, r5}
    1cc4:	4770      	bx	lr
    if ( ui32PwrStatEnMask )
    1cc6:	b911      	cbnz	r1, 1cce <am_hal_pwrctrl_memory_enable+0xee>
    return true;
    1cc8:	2001      	movs	r0, #1
}
    1cca:	bc30      	pop	{r4, r5}
    1ccc:	4770      	bx	lr
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1cce:	4b40      	ldr	r3, [pc, #256]	; (1dd0 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1cd0:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1cd2:	ea31 0405 	bics.w	r4, r1, r5
    1cd6:	bf18      	it	ne
    1cd8:	24c6      	movne	r4, #198	; 0xc6
    1cda:	d0f5      	beq.n	1cc8 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1cdc:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1cde:	ea31 0000 	bics.w	r0, r1, r0
    1ce2:	d0f1      	beq.n	1cc8 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1ce4:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1ce6:	ea31 0002 	bics.w	r0, r1, r2
    1cea:	d0ed      	beq.n	1cc8 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1cec:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1cee:	ea31 0005 	bics.w	r0, r1, r5
    1cf2:	d0e9      	beq.n	1cc8 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1cf4:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1cf6:	ea31 0000 	bics.w	r0, r1, r0
    1cfa:	d0e5      	beq.n	1cc8 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1cfc:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1cfe:	ea31 0002 	bics.w	r0, r1, r2
    1d02:	d0e1      	beq.n	1cc8 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d04:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1d06:	ea31 0005 	bics.w	r0, r1, r5
    1d0a:	d0dd      	beq.n	1cc8 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d0c:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1d0e:	ea31 0000 	bics.w	r0, r1, r0
    1d12:	d0d9      	beq.n	1cc8 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d14:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1d16:	ea31 0002 	bics.w	r0, r1, r2
    1d1a:	d0d5      	beq.n	1cc8 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1d1c:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1d1e:	ea31 0005 	bics.w	r0, r1, r5
    1d22:	d0d1      	beq.n	1cc8 <am_hal_pwrctrl_memory_enable+0xe8>
    1d24:	3c09      	subs	r4, #9
    1d26:	d1d9      	bne.n	1cdc <am_hal_pwrctrl_memory_enable+0xfc>
    1d28:	e7ca      	b.n	1cc0 <am_hal_pwrctrl_memory_enable+0xe0>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    1d2a:	2160      	movs	r1, #96	; 0x60
{
    1d2c:	2300      	movs	r3, #0
    1d2e:	e79e      	b.n	1c6e <am_hal_pwrctrl_memory_enable+0x8e>
    1d30:	4a28      	ldr	r2, [pc, #160]	; (1dd4 <am_hal_pwrctrl_memory_enable+0x1f4>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1d32:	4b29      	ldr	r3, [pc, #164]	; (1dd8 <am_hal_pwrctrl_memory_enable+0x1f8>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    1d34:	f44f 7180 	mov.w	r1, #256	; 0x100
    1d38:	e795      	b.n	1c66 <am_hal_pwrctrl_memory_enable+0x86>
    1d3a:	f46f 62ff 	mvn.w	r2, #2040	; 0x7f8
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1d3e:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    1d42:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    1d46:	e78e      	b.n	1c66 <am_hal_pwrctrl_memory_enable+0x86>
    1d48:	4a24      	ldr	r2, [pc, #144]	; (1ddc <am_hal_pwrctrl_memory_enable+0x1fc>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1d4a:	4b25      	ldr	r3, [pc, #148]	; (1de0 <am_hal_pwrctrl_memory_enable+0x200>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    1d4c:	f44f 7140 	mov.w	r1, #768	; 0x300
    1d50:	e789      	b.n	1c66 <am_hal_pwrctrl_memory_enable+0x86>
    1d52:	f46f 62fe 	mvn.w	r2, #2032	; 0x7f0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1d56:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    1d5a:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    1d5e:	e782      	b.n	1c66 <am_hal_pwrctrl_memory_enable+0x86>
    1d60:	f46f 62e0 	mvn.w	r2, #1792	; 0x700
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1d64:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    1d68:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    1d6c:	e77b      	b.n	1c66 <am_hal_pwrctrl_memory_enable+0x86>
    1d6e:	f46f 62fc 	mvn.w	r2, #2016	; 0x7e0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1d72:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    1d76:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    1d7a:	e774      	b.n	1c66 <am_hal_pwrctrl_memory_enable+0x86>
    1d7c:	f46f 62f8 	mvn.w	r2, #1984	; 0x7c0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1d80:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    1d84:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    1d88:	e76d      	b.n	1c66 <am_hal_pwrctrl_memory_enable+0x86>
    1d8a:	f46f 62f0 	mvn.w	r2, #1920	; 0x780
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1d8e:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    1d92:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    1d96:	e766      	b.n	1c66 <am_hal_pwrctrl_memory_enable+0x86>
    1d98:	f46f 62c0 	mvn.w	r2, #1536	; 0x600
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1d9c:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    1da0:	4910      	ldr	r1, [pc, #64]	; (1de4 <am_hal_pwrctrl_memory_enable+0x204>)
    1da2:	e760      	b.n	1c66 <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    1da4:	4910      	ldr	r1, [pc, #64]	; (1de8 <am_hal_pwrctrl_memory_enable+0x208>)
    1da6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1daa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1dae:	e75a      	b.n	1c66 <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1db0:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1db4:	e7ba      	b.n	1d2c <am_hal_pwrctrl_memory_enable+0x14c>
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1db6:	4805      	ldr	r0, [pc, #20]	; (1dcc <am_hal_pwrctrl_memory_enable+0x1ec>)
    1db8:	6803      	ldr	r3, [r0, #0]
    1dba:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    1dbe:	6001      	str	r1, [r0, #0]
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1dc0:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
        ui32PwrStatEnMask  = 0;
    1dc4:	2100      	movs	r1, #0
    1dc6:	e758      	b.n	1c7a <am_hal_pwrctrl_memory_enable+0x9a>
    1dc8:	0007ff00 	.word	0x0007ff00
    1dcc:	40021010 	.word	0x40021010
    1dd0:	40021014 	.word	0x40021014
    1dd4:	fffff801 	.word	0xfffff801
    1dd8:	0007fe00 	.word	0x0007fe00
    1ddc:	fffff803 	.word	0xfffff803
    1de0:	0007fc00 	.word	0x0007fc00
    1de4:	0001ff00 	.word	0x0001ff00
    1de8:	0003ff00 	.word	0x0003ff00

00001dec <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1dec:	4b0f      	ldr	r3, [pc, #60]	; (1e2c <am_hal_pwrctrl_bucks_init+0x40>)
    1dee:	681a      	ldr	r2, [r3, #0]
    1df0:	0792      	lsls	r2, r2, #30
    1df2:	d502      	bpl.n	1dfa <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1df4:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1df6:	07c3      	lsls	r3, r0, #31
    1df8:	d40e      	bmi.n	1e18 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1dfa:	4b0d      	ldr	r3, [pc, #52]	; (1e30 <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1dfc:	4a0b      	ldr	r2, [pc, #44]	; (1e2c <am_hal_pwrctrl_bucks_init+0x40>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1dfe:	6819      	ldr	r1, [r3, #0]
    1e00:	f041 0002 	orr.w	r0, r1, #2
    1e04:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1e06:	6819      	ldr	r1, [r3, #0]
    1e08:	f041 0001 	orr.w	r0, r1, #1
    1e0c:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1e0e:	6813      	ldr	r3, [r2, #0]
    1e10:	f003 0103 	and.w	r1, r3, #3
    1e14:	2903      	cmp	r1, #3
    1e16:	d1fa      	bne.n	1e0e <am_hal_pwrctrl_bucks_init+0x22>
    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    1e18:	4a04      	ldr	r2, [pc, #16]	; (1e2c <am_hal_pwrctrl_bucks_init+0x40>)
    1e1a:	6810      	ldr	r0, [r2, #0]
    1e1c:	f000 0303 	and.w	r3, r0, #3
    1e20:	2b03      	cmp	r3, #3
    1e22:	d1fa      	bne.n	1e1a <am_hal_pwrctrl_bucks_init+0x2e>
    am_hal_flash_delay(200 / 3);
    1e24:	2042      	movs	r0, #66	; 0x42
    1e26:	f7ff be4d 	b.w	1ac4 <am_hal_flash_delay>
    1e2a:	bf00      	nop
    1e2c:	40021004 	.word	0x40021004
    1e30:	40021000 	.word	0x40021000

00001e34 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1e34:	4905      	ldr	r1, [pc, #20]	; (1e4c <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1e36:	4a06      	ldr	r2, [pc, #24]	; (1e50 <am_hal_pwrctrl_low_power_init+0x1c>)
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1e38:	680b      	ldr	r3, [r1, #0]
    1e3a:	f043 0006 	orr.w	r0, r3, #6
    1e3e:	6008      	str	r0, [r1, #0]
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1e40:	6811      	ldr	r1, [r2, #0]
    1e42:	f021 0304 	bic.w	r3, r1, #4
    1e46:	6013      	str	r3, [r2, #0]
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop
    1e4c:	40021018 	.word	0x40021018
    1e50:	40021000 	.word	0x40021000

00001e54 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1e54:	4a05      	ldr	r2, [pc, #20]	; (1e6c <am_hal_rtc_osc_select+0x18>)
    1e56:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    1e58:	b918      	cbnz	r0, 1e62 <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    1e5a:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1e5e:	6010      	str	r0, [r2, #0]
    1e60:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1e62:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    1e66:	6011      	str	r1, [r2, #0]
    1e68:	4770      	bx	lr
    1e6a:	bf00      	nop
    1e6c:	4000400c 	.word	0x4000400c

00001e70 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    1e70:	4a02      	ldr	r2, [pc, #8]	; (1e7c <am_hal_rtc_osc_disable+0xc>)
    1e72:	6813      	ldr	r3, [r2, #0]
    1e74:	f043 0010 	orr.w	r0, r3, #16
    1e78:	6010      	str	r0, [r2, #0]
    1e7a:	4770      	bx	lr
    1e7c:	40004050 	.word	0x40004050

00001e80 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    1e80:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    1e82:	4a23      	ldr	r2, [pc, #140]	; (1f10 <am_hal_tpiu_enable+0x90>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    1e84:	6803      	ldr	r3, [r0, #0]
    AM_REG(TPIU, FFCR) = 0;
    1e86:	2100      	movs	r1, #0
    1e88:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    1e8a:	b33b      	cbz	r3, 1edc <am_hal_tpiu_enable+0x5c>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1e8c:	f5a2 7c40 	sub.w	ip, r2, #768	; 0x300
    1e90:	2101      	movs	r1, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1e92:	4c20      	ldr	r4, [pc, #128]	; (1f14 <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1e94:	4d20      	ldr	r5, [pc, #128]	; (1f18 <am_hal_tpiu_enable+0x98>)
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1e96:	f8cc 1000 	str.w	r1, [ip]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1e9a:	f5a3 4e61 	sub.w	lr, r3, #57600	; 0xe100
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1e9e:	45a6      	cmp	lr, r4
    1ea0:	bf94      	ite	ls
    1ea2:	461c      	movls	r4, r3
    1ea4:	462c      	movhi	r4, r5
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    1ea6:	f7ff fddf 	bl	1a68 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    1eaa:	1c43      	adds	r3, r0, #1
    1eac:	d02d      	beq.n	1f0a <am_hal_tpiu_enable+0x8a>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    1eae:	08c2      	lsrs	r2, r0, #3
    1eb0:	fbb2 f3f4 	udiv	r3, r2, r4
    1eb4:	1e5d      	subs	r5, r3, #1
    1eb6:	b2a8      	uxth	r0, r5
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1eb8:	4a18      	ldr	r2, [pc, #96]	; (1f1c <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1eba:	4c19      	ldr	r4, [pc, #100]	; (1f20 <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1ebc:	4b19      	ldr	r3, [pc, #100]	; (1f24 <am_hal_tpiu_enable+0xa4>)
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1ebe:	491a      	ldr	r1, [pc, #104]	; (1f28 <am_hal_tpiu_enable+0xa8>)
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1ec0:	6010      	str	r0, [r2, #0]
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1ec2:	2502      	movs	r5, #2
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1ec4:	2000      	movs	r0, #0
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1ec6:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1eca:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1ecc:	6008      	str	r0, [r1, #0]
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1ece:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1ed0:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    1ed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1ed8:	f7ff bdf4 	b.w	1ac4 <am_hal_flash_delay>
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    1edc:	4c0f      	ldr	r4, [pc, #60]	; (1f1c <am_hal_tpiu_enable+0x9c>)
    1ede:	6905      	ldr	r5, [r0, #16]
    1ee0:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    1ee2:	6882      	ldr	r2, [r0, #8]
    1ee4:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    1ee8:	68c3      	ldr	r3, [r0, #12]
    1eea:	4c10      	ldr	r4, [pc, #64]	; (1f2c <am_hal_tpiu_enable+0xac>)
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    1eec:	490d      	ldr	r1, [pc, #52]	; (1f24 <am_hal_tpiu_enable+0xa4>)
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    1eee:	1e5d      	subs	r5, r3, #1
    1ef0:	2201      	movs	r2, #1
    1ef2:	40aa      	lsls	r2, r5
    1ef4:	6022      	str	r2, [r4, #0]
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    1ef6:	6840      	ldr	r0, [r0, #4]
    1ef8:	680b      	ldr	r3, [r1, #0]
    1efa:	4303      	orrs	r3, r0
    1efc:	600b      	str	r3, [r1, #0]
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1efe:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    1f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1f06:	f7ff bddd 	b.w	1ac4 <am_hal_flash_delay>
    1f0a:	2005      	movs	r0, #5
    1f0c:	e7d4      	b.n	1eb8 <am_hal_tpiu_enable+0x38>
    1f0e:	bf00      	nop
    1f10:	e0040304 	.word	0xe0040304
    1f14:	001da380 	.word	0x001da380
    1f18:	000f4240 	.word	0x000f4240
    1f1c:	e0040010 	.word	0xe0040010
    1f20:	e00400f0 	.word	0xe00400f0
    1f24:	40020250 	.word	0x40020250
    1f28:	e0040f00 	.word	0xe0040f00
    1f2c:	e0040004 	.word	0xe0040004

00001f30 <am_hal_tpiu_disable>:
am_hal_tpiu_disable(void)
{
    //
    // Disable the TPIU clock source in MCU control.
    //
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    1f30:	4b01      	ldr	r3, [pc, #4]	; (1f38 <am_hal_tpiu_disable+0x8>)
    1f32:	2200      	movs	r2, #0
    1f34:	601a      	str	r2, [r3, #0]
    1f36:	4770      	bx	lr
    1f38:	40020250 	.word	0x40020250

00001f3c <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    1f3c:	4b01      	ldr	r3, [pc, #4]	; (1f44 <am_hal_vcomp_disable+0x8>)
    1f3e:	2237      	movs	r2, #55	; 0x37
    1f40:	601a      	str	r2, [r3, #0]
    1f42:	4770      	bx	lr
    1f44:	4000c008 	.word	0x4000c008
    1f48:	4f4b4c43 	.word	0x4f4b4c43
    1f4c:	74205455 	.word	0x74205455
    1f50:	454c206f 	.word	0x454c206f
    1f54:	78452044 	.word	0x78452044
    1f58:	6c706d61 	.word	0x6c706d61
    1f5c:	00000a65 	.word	0x00000a65
    1f60:	6c615709 	.word	0x6c615709
    1f64:	7420736b 	.word	0x7420736b
    1f68:	62206568 	.word	0x62206568
    1f6c:	6472616f 	.word	0x6472616f
    1f70:	44454c20 	.word	0x44454c20
    1f74:	62612073 	.word	0x62612073
    1f78:	2074756f 	.word	0x2074756f
    1f7c:	65636e6f 	.word	0x65636e6f
    1f80:	73206120 	.word	0x73206120
    1f84:	6e6f6365 	.word	0x6e6f6365
    1f88:	61622064 	.word	0x61622064
    1f8c:	20646573 	.word	0x20646573
    1f90:	74206e6f 	.word	0x74206e6f
    1f94:	43206568 	.word	0x43206568
    1f98:	554f4b4c 	.word	0x554f4b4c
    1f9c:	69732054 	.word	0x69732054
    1fa0:	6c616e67 	.word	0x6c616e67
    1fa4:	00000a2e 	.word	0x00000a2e
    1fa8:	0a0a0a0a 	.word	0x0a0a0a0a
    1fac:	0a0a0a0a 	.word	0x0a0a0a0a
    1fb0:	0a0a0a0a 	.word	0x0a0a0a0a
    1fb4:	0a0a0a0a 	.word	0x0a0a0a0a
    1fb8:	00000a0a 	.word	0x00000a0a

00001fbc <am_hal_cachectrl_defaults>:
    1fbc:	50000001 00010300 00010101 685f6d61     ...P........am_h
    1fcc:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    1fdc:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    1fec:	63206469 6b636f6c 74657320 676e6974     id clock setting
    1ffc:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    200c:	6b6c635f 2e6e6567 00000063              _clkgen.c...
