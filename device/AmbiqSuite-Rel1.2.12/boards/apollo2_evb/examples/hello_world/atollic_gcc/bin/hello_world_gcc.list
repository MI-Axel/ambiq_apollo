
hello_world_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002028  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00020000  2**2
                  ALLOC
  2 .data         00000000  10001000  10001000  00012028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000118  10001000  00002028  00021000  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00012028  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000bbd3  00000000  00000000  0001205f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002786  00000000  00000000  0001dc32  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000007f0  00000000  00000000  000203b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001278  00000000  00000000  00020ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004c07  00000000  00000000  00021e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002dd4  00000000  00000000  00026a27  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  000297fb  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000015fc  00000000  00000000  00029878  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000036d9  00000000  00000000  0002ae74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 bd 02 00 00 25 03 00 00 31 03 00 00     ........%...1...
      10:	31 03 00 00 31 03 00 00 31 03 00 00 00 00 00 00     1...1...1.......
	...
      2c:	2b 03 00 00 2b 03 00 00 00 00 00 00 2b 03 00 00     +...+.......+...
      3c:	2b 03 00 00 2b 03 00 00 2b 03 00 00 2b 03 00 00     +...+...+...+...
      4c:	2b 03 00 00 2b 03 00 00 2b 03 00 00 2b 03 00 00     +...+...+...+...
      5c:	2b 03 00 00 2b 03 00 00 2b 03 00 00 2b 03 00 00     +...+...+...+...
      6c:	2b 03 00 00 2b 03 00 00 2b 03 00 00 2b 03 00 00     +...+...+...+...
      7c:	2b 03 00 00 2b 03 00 00 2b 03 00 00 2b 03 00 00     +...+...+...+...
      8c:	2b 03 00 00 2b 03 00 00 2b 03 00 00 2b 03 00 00     +...+...+...+...
      9c:	2b 03 00 00 2b 03 00 00 2b 03 00 00 2b 03 00 00     +...+...+...+...
      ac:	2b 03 00 00 2b 03 00 00 2b 03 00 00 2b 03 00 00     +...+...+...+...
      bc:	2b 03 00 00                                         +...

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <main>:
// Main
//
//*****************************************************************************
int
main(void)
{
     160:	b5b0      	push	{r4, r5, r7, lr}
     162:	b096      	sub	sp, #88	; 0x58
     164:	af04      	add	r7, sp, #16
    uint32_t ui32StrBuf;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     166:	2000      	movs	r0, #0
     168:	f001 f9fe 	bl	1568 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     16c:	4842      	ldr	r0, [pc, #264]	; (278 <main+0x118>)
     16e:	f001 f965 	bl	143c <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     172:	f001 f8db 	bl	132c <am_bsp_low_power_init>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     176:	4841      	ldr	r0, [pc, #260]	; (27c <main+0x11c>)
     178:	f000 fa2c 	bl	5d4 <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     17c:	f001 fa2c 	bl	15d8 <am_hal_interrupt_master_disable>
     180:	4603      	mov	r3, r0
     182:	603b      	str	r3, [r7, #0]
     184:	4b3e      	ldr	r3, [pc, #248]	; (280 <main+0x120>)
     186:	2273      	movs	r2, #115	; 0x73
     188:	601a      	str	r2, [r3, #0]
     18a:	4a3e      	ldr	r2, [pc, #248]	; (284 <main+0x124>)
     18c:	4b3d      	ldr	r3, [pc, #244]	; (284 <main+0x124>)
     18e:	681b      	ldr	r3, [r3, #0]
     190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     194:	6013      	str	r3, [r2, #0]
     196:	4a3c      	ldr	r2, [pc, #240]	; (288 <main+0x128>)
     198:	4b3b      	ldr	r3, [pc, #236]	; (288 <main+0x128>)
     19a:	681b      	ldr	r3, [r3, #0]
     19c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     1a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     1a4:	6013      	str	r3, [r2, #0]
     1a6:	4a39      	ldr	r2, [pc, #228]	; (28c <main+0x12c>)
     1a8:	4b38      	ldr	r3, [pc, #224]	; (28c <main+0x12c>)
     1aa:	681b      	ldr	r3, [r3, #0]
     1ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     1b0:	6013      	str	r3, [r2, #0]
     1b2:	4b33      	ldr	r3, [pc, #204]	; (280 <main+0x120>)
     1b4:	2200      	movs	r2, #0
     1b6:	601a      	str	r2, [r3, #0]
     1b8:	683b      	ldr	r3, [r7, #0]
     1ba:	4618      	mov	r0, r3
     1bc:	f001 fa10 	bl	15e0 <am_hal_interrupt_master_set>

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     1c0:	f001 fa12 	bl	15e8 <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     1c4:	f001 f8c4 	bl	1350 <am_bsp_debug_printf_enable>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
     1c8:	f001 f8a6 	bl	1318 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Hello World!\n\n");
     1cc:	4830      	ldr	r0, [pc, #192]	; (290 <main+0x130>)
     1ce:	f001 f885 	bl	12dc <am_util_stdio_printf>

    //
    // Print the device info.
    //
    am_util_id_device(&sIdDevice);
     1d2:	f107 0308 	add.w	r3, r7, #8
     1d6:	4618      	mov	r0, r3
     1d8:	f000 f92a 	bl	430 <am_util_id_device>
    am_util_stdio_printf("Vendor Name: %s\n", sIdDevice.pui8VendorName);
     1dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     1de:	4619      	mov	r1, r3
     1e0:	482c      	ldr	r0, [pc, #176]	; (294 <main+0x134>)
     1e2:	f001 f87b 	bl	12dc <am_util_stdio_printf>
    am_util_stdio_printf("Device type: %s\n",
     1e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     1e8:	4619      	mov	r1, r3
     1ea:	482b      	ldr	r0, [pc, #172]	; (298 <main+0x138>)
     1ec:	f001 f876 	bl	12dc <am_util_stdio_printf>
         sIdDevice.pui8DeviceName);

    am_util_stdio_printf("Qualified: %s\n",
                         sIdDevice.sMcuCtrlDevice.ui32Qualified ?
     1f0:	69fb      	ldr	r3, [r7, #28]
    am_util_stdio_printf("Qualified: %s\n",
     1f2:	2b00      	cmp	r3, #0
     1f4:	d001      	beq.n	1fa <main+0x9a>
     1f6:	4b29      	ldr	r3, [pc, #164]	; (29c <main+0x13c>)
     1f8:	e000      	b.n	1fc <main+0x9c>
     1fa:	4b29      	ldr	r3, [pc, #164]	; (2a0 <main+0x140>)
     1fc:	4619      	mov	r1, r3
     1fe:	4829      	ldr	r0, [pc, #164]	; (2a4 <main+0x144>)
     200:	f001 f86c 	bl	12dc <am_util_stdio_printf>
                         "Yes" : "No");

    am_util_stdio_printf("Device Info:\n"
     204:	68b9      	ldr	r1, [r7, #8]
     206:	68fa      	ldr	r2, [r7, #12]
     208:	6938      	ldr	r0, [r7, #16]
     20a:	697b      	ldr	r3, [r7, #20]
                         "\tRevision:    0x%08X (Rev%c%c)\n",
                         sIdDevice.sMcuCtrlDevice.ui32ChipPN,
                         sIdDevice.sMcuCtrlDevice.ui32ChipID0,
                         sIdDevice.sMcuCtrlDevice.ui32ChipID1,
                         sIdDevice.sMcuCtrlDevice.ui32ChipRev,
                         sIdDevice.ui8ChipRevMaj, sIdDevice.ui8ChipRevMin );
     20c:	f897 4044 	ldrb.w	r4, [r7, #68]	; 0x44
     210:	f897 5045 	ldrb.w	r5, [r7, #69]	; 0x45
    am_util_stdio_printf("Device Info:\n"
     214:	9502      	str	r5, [sp, #8]
     216:	9401      	str	r4, [sp, #4]
     218:	9300      	str	r3, [sp, #0]
     21a:	4603      	mov	r3, r0
     21c:	4822      	ldr	r0, [pc, #136]	; (2a8 <main+0x148>)
     21e:	f001 f85d 	bl	12dc <am_util_stdio_printf>

    //
    // If not a multiple of 1024 bytes, append a plus sign to the KB.
    //
    ui32StrBuf = ( sIdDevice.sMcuCtrlDevice.ui32FlashSize % 1024 ) ? '+' : 0;
     222:	6a3b      	ldr	r3, [r7, #32]
     224:	f3c3 0309 	ubfx	r3, r3, #0, #10
     228:	2b00      	cmp	r3, #0
     22a:	d001      	beq.n	230 <main+0xd0>
     22c:	232b      	movs	r3, #43	; 0x2b
     22e:	e000      	b.n	232 <main+0xd2>
     230:	2300      	movs	r3, #0
     232:	607b      	str	r3, [r7, #4]
    am_util_stdio_printf("\tFlash size:  %7d (%d KB%s)\n",
     234:	6a39      	ldr	r1, [r7, #32]
                         sIdDevice.sMcuCtrlDevice.ui32FlashSize,
                         sIdDevice.sMcuCtrlDevice.ui32FlashSize / 1024,
     236:	6a3b      	ldr	r3, [r7, #32]
    am_util_stdio_printf("\tFlash size:  %7d (%d KB%s)\n",
     238:	0a9a      	lsrs	r2, r3, #10
     23a:	1d3b      	adds	r3, r7, #4
     23c:	481b      	ldr	r0, [pc, #108]	; (2ac <main+0x14c>)
     23e:	f001 f84d 	bl	12dc <am_util_stdio_printf>
                         &ui32StrBuf);

    ui32StrBuf = ( sIdDevice.sMcuCtrlDevice.ui32SRAMSize % 1024 ) ? '+' : 0;
     242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     244:	f3c3 0309 	ubfx	r3, r3, #0, #10
     248:	2b00      	cmp	r3, #0
     24a:	d001      	beq.n	250 <main+0xf0>
     24c:	232b      	movs	r3, #43	; 0x2b
     24e:	e000      	b.n	252 <main+0xf2>
     250:	2300      	movs	r3, #0
     252:	607b      	str	r3, [r7, #4]
    am_util_stdio_printf("\tSRAM size:   %7d (%d KB%s)\n\n",
     254:	6a79      	ldr	r1, [r7, #36]	; 0x24
                         sIdDevice.sMcuCtrlDevice.ui32SRAMSize,
                         sIdDevice.sMcuCtrlDevice.ui32SRAMSize / 1024,
     256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    am_util_stdio_printf("\tSRAM size:   %7d (%d KB%s)\n\n",
     258:	0a9a      	lsrs	r2, r3, #10
     25a:	1d3b      	adds	r3, r7, #4
     25c:	4814      	ldr	r0, [pc, #80]	; (2b0 <main+0x150>)
     25e:	f001 f83d 	bl	12dc <am_util_stdio_printf>
                         &ui32StrBuf);

    //
    // Print the compiler version.
    //
    am_util_stdio_printf("Compiler: %s\n", COMPILER_VERSION);
     262:	4914      	ldr	r1, [pc, #80]	; (2b4 <main+0x154>)
     264:	4814      	ldr	r0, [pc, #80]	; (2b8 <main+0x158>)
     266:	f001 f839 	bl	12dc <am_util_stdio_printf>

    //
    // We are done printing.
    // Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
     26a:	f001 f8b1 	bl	13d0 <am_bsp_debug_printf_disable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     26e:	2001      	movs	r0, #1
     270:	f001 fc34 	bl	1adc <am_hal_sysctrl_sleep>
     274:	e7fb      	b.n	26e <main+0x10e>
     276:	bf00      	nop
     278:	00001f8c 	.word	0x00001f8c
     27c:	00001439 	.word	0x00001439
     280:	40010060 	.word	0x40010060
     284:	40010054 	.word	0x40010054
     288:	40010028 	.word	0x40010028
     28c:	40010108 	.word	0x40010108
     290:	00001dec 	.word	0x00001dec
     294:	00001dfc 	.word	0x00001dfc
     298:	00001e10 	.word	0x00001e10
     29c:	00001e24 	.word	0x00001e24
     2a0:	00001e28 	.word	0x00001e28
     2a4:	00001e2c 	.word	0x00001e2c
     2a8:	00001e3c 	.word	0x00001e3c
     2ac:	00001ea8 	.word	0x00001ea8
     2b0:	00001ec8 	.word	0x00001ec8
     2b4:	00001ee8 	.word	0x00001ee8
     2b8:	00001f30 	.word	0x00001f30

000002bc <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     2bc:	4811      	ldr	r0, [pc, #68]	; (304 <zero_loop+0x12>)
     2be:	4912      	ldr	r1, [pc, #72]	; (308 <zero_loop+0x16>)
     2c0:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     2c2:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     2c6:	4811      	ldr	r0, [pc, #68]	; (30c <zero_loop+0x1a>)
     2c8:	6801      	ldr	r1, [r0, #0]
     2ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     2ce:	6001      	str	r1, [r0, #0]
     2d0:	f3bf 8f4f 	dsb	sy
     2d4:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     2d8:	480d      	ldr	r0, [pc, #52]	; (310 <zero_loop+0x1e>)
     2da:	490e      	ldr	r1, [pc, #56]	; (314 <zero_loop+0x22>)
     2dc:	4a0e      	ldr	r2, [pc, #56]	; (318 <zero_loop+0x26>)

000002de <copy_loop>:
     2de:	f850 3b04 	ldr.w	r3, [r0], #4
     2e2:	f841 3b04 	str.w	r3, [r1], #4
     2e6:	4291      	cmp	r1, r2
     2e8:	dbf9      	blt.n	2de <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     2ea:	480c      	ldr	r0, [pc, #48]	; (31c <zero_loop+0x2a>)
     2ec:	490c      	ldr	r1, [pc, #48]	; (320 <zero_loop+0x2e>)
     2ee:	f04f 0200 	mov.w	r2, #0

000002f2 <zero_loop>:
     2f2:	4288      	cmp	r0, r1
     2f4:	bfb8      	it	lt
     2f6:	f840 2b04 	strlt.w	r2, [r0], #4
     2fa:	dbfa      	blt.n	2f2 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     2fc:	f7ff ff30 	bl	160 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     300:	be00      	bkpt	0x0000
}
     302:	bf00      	nop
     304:	e000ed08 	.word	0xe000ed08
     308:	00000000 	.word	0x00000000
     30c:	e000ed88 	.word	0xe000ed88
     310:	00002028 	.word	0x00002028
     314:	10001000 	.word	0x10001000
     318:	10001000 	.word	0x10001000
     31c:	10001000 	.word	0x10001000
     320:	10001118 	.word	0x10001118

00000324 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     324:	b480      	push	{r7}
     326:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     328:	e7fe      	b.n	328 <am_nmi_isr+0x4>

0000032a <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     32a:	b480      	push	{r7}
     32c:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     32e:	e7fe      	b.n	32e <am_adc_isr+0x4>

00000330 <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     330:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     332:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     334:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     336:	f000 f809 	bl	34c <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     33a:	bd01      	pop	{r0, pc}
}
     33c:	bf00      	nop
     33e:	4618      	mov	r0, r3

00000340 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     340:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     342:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     344:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     346:	4770      	bx	lr
}
     348:	bf00      	nop
     34a:	4618      	mov	r0, r3

0000034c <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     34c:	b580      	push	{r7, lr}
     34e:	b096      	sub	sp, #88	; 0x58
     350:	af00      	add	r7, sp, #0
     352:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     354:	f107 030c 	add.w	r3, r7, #12
     358:	2200      	movs	r2, #0
     35a:	601a      	str	r2, [r3, #0]
     35c:	605a      	str	r2, [r3, #4]
     35e:	609a      	str	r2, [r3, #8]
     360:	60da      	str	r2, [r3, #12]
     362:	611a      	str	r2, [r3, #16]
     364:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
     366:	2300      	movs	r3, #0
     368:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     36a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     36c:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     36e:	4b2e      	ldr	r3, [pc, #184]	; (428 <am_util_faultisr_collect_data+0xdc>)
     370:	681b      	ldr	r3, [r3, #0]
     372:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     376:	b2db      	uxtb	r3, r3
     378:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     37c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     37e:	0a1b      	lsrs	r3, r3, #8
     380:	b2db      	uxtb	r3, r3
     382:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     388:	0c1b      	lsrs	r3, r3, #16
     38a:	b29b      	uxth	r3, r3
     38c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     390:	4b26      	ldr	r3, [pc, #152]	; (42c <am_util_faultisr_collect_data+0xe0>)
     392:	681b      	ldr	r3, [r3, #0]
     394:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     396:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     39a:	b2db      	uxtb	r3, r3
     39c:	f003 0302 	and.w	r3, r3, #2
     3a0:	2b00      	cmp	r3, #0
     3a2:	d005      	beq.n	3b0 <am_util_faultisr_collect_data+0x64>
     3a4:	6879      	ldr	r1, [r7, #4]
     3a6:	2006      	movs	r0, #6
     3a8:	f7ff ffca 	bl	340 <getStackedReg>
     3ac:	4603      	mov	r3, r0
     3ae:	e001      	b.n	3b4 <am_util_faultisr_collect_data+0x68>
     3b0:	f04f 33ff 	mov.w	r3, #4294967295
     3b4:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     3b6:	6879      	ldr	r1, [r7, #4]
     3b8:	2000      	movs	r0, #0
     3ba:	f7ff ffc1 	bl	340 <getStackedReg>
     3be:	4603      	mov	r3, r0
     3c0:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     3c2:	6879      	ldr	r1, [r7, #4]
     3c4:	2001      	movs	r0, #1
     3c6:	f7ff ffbb 	bl	340 <getStackedReg>
     3ca:	4603      	mov	r3, r0
     3cc:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     3ce:	6879      	ldr	r1, [r7, #4]
     3d0:	2002      	movs	r0, #2
     3d2:	f7ff ffb5 	bl	340 <getStackedReg>
     3d6:	4603      	mov	r3, r0
     3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     3da:	6879      	ldr	r1, [r7, #4]
     3dc:	2003      	movs	r0, #3
     3de:	f7ff ffaf 	bl	340 <getStackedReg>
     3e2:	4603      	mov	r3, r0
     3e4:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     3e6:	6879      	ldr	r1, [r7, #4]
     3e8:	2004      	movs	r0, #4
     3ea:	f7ff ffa9 	bl	340 <getStackedReg>
     3ee:	4603      	mov	r3, r0
     3f0:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     3f2:	6879      	ldr	r1, [r7, #4]
     3f4:	2005      	movs	r0, #5
     3f6:	f7ff ffa3 	bl	340 <getStackedReg>
     3fa:	4603      	mov	r3, r0
     3fc:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     3fe:	6879      	ldr	r1, [r7, #4]
     400:	2006      	movs	r0, #6
     402:	f7ff ff9d 	bl	340 <getStackedReg>
     406:	4603      	mov	r3, r0
     408:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     40a:	6879      	ldr	r1, [r7, #4]
     40c:	2007      	movs	r0, #7
     40e:	f7ff ff97 	bl	340 <getStackedReg>
     412:	4603      	mov	r3, r0
     414:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     416:	f107 030c 	add.w	r3, r7, #12
     41a:	4618      	mov	r0, r3
     41c:	f001 f9a0 	bl	1760 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     420:	2300      	movs	r3, #0
     422:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
     424:	e7fe      	b.n	424 <am_util_faultisr_collect_data+0xd8>
     426:	bf00      	nop
     428:	e000ed28 	.word	0xe000ed28
     42c:	e000ed38 	.word	0xe000ed38

00000430 <am_util_id_device>:
//! device type.
//
//*****************************************************************************
uint32_t
am_util_id_device(am_util_id_t *psIDDevice)
{
     430:	b580      	push	{r7, lr}
     432:	b084      	sub	sp, #16
     434:	af00      	add	r7, sp, #0
     436:	6078      	str	r0, [r7, #4]
    // Go get all the device (hardware) info from the HAL
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &psIDDevice->sMcuCtrlDevice);
#else
    am_hal_mcuctrl_device_info_get(&psIDDevice->sMcuCtrlDevice);
     438:	687b      	ldr	r3, [r7, #4]
     43a:	4618      	mov	r0, r3
     43c:	f001 f924 	bl	1688 <am_hal_mcuctrl_device_info_get>
#endif

    //
    // Device identification
    //
    ui32PN = psIDDevice->sMcuCtrlDevice.ui32ChipPN  &
     440:	687b      	ldr	r3, [r7, #4]
     442:	681b      	ldr	r3, [r3, #0]
     444:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
     448:	60fb      	str	r3, [r7, #12]
             AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_PN_M;

    if ( (psIDDevice->sMcuCtrlDevice.ui32JedecCID   == 0xB105100D)          &&
     44a:	687b      	ldr	r3, [r7, #4]
     44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     44e:	4a59      	ldr	r2, [pc, #356]	; (5b4 <am_util_id_device+0x184>)
     450:	4293      	cmp	r3, r2
     452:	d10e      	bne.n	472 <am_util_id_device+0x42>
         (psIDDevice->sMcuCtrlDevice.ui32JedecJEPID == 0x0000009B)          &&
     454:	687b      	ldr	r3, [r7, #4]
     456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    if ( (psIDDevice->sMcuCtrlDevice.ui32JedecCID   == 0xB105100D)          &&
     458:	2b9b      	cmp	r3, #155	; 0x9b
     45a:	d10a      	bne.n	472 <am_util_id_device+0x42>
         ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0xF00) != 0xE00) )
     45c:	687b      	ldr	r3, [r7, #4]
     45e:	6a1b      	ldr	r3, [r3, #32]
     460:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
         (psIDDevice->sMcuCtrlDevice.ui32JedecJEPID == 0x0000009B)          &&
     464:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
     468:	d003      	beq.n	472 <am_util_id_device+0x42>
    {
        //
        // It's Ambiq Micro, set up the VENDORID.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
     46a:	687b      	ldr	r3, [r7, #4]
     46c:	4a52      	ldr	r2, [pc, #328]	; (5b8 <am_util_id_device+0x188>)
     46e:	635a      	str	r2, [r3, #52]	; 0x34
     470:	e002      	b.n	478 <am_util_id_device+0x48>
    else
    {
        //
        // For now, set it as unknown vendor, but we may change it later.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameUnknown;
     472:	687b      	ldr	r3, [r7, #4]
     474:	4a51      	ldr	r2, [pc, #324]	; (5bc <am_util_id_device+0x18c>)
     476:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if ( psIDDevice->sMcuCtrlDevice.ui32VendorID ==
     478:	687b      	ldr	r3, [r7, #4]
     47a:	691b      	ldr	r3, [r3, #16]
     47c:	4a50      	ldr	r2, [pc, #320]	; (5c0 <am_util_id_device+0x190>)
     47e:	4293      	cmp	r3, r2
     480:	d102      	bne.n	488 <am_util_id_device+0x58>
         (('A' << 24) | ('M' << 16) | ('B' << 8) | ('Q' << 0)) )
    {
        //
        // VENDORID is AMBQ, so set the string pointer.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
     482:	687b      	ldr	r3, [r7, #4]
     484:	4a4c      	ldr	r2, [pc, #304]	; (5b8 <am_util_id_device+0x188>)
     486:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if ( ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0E0)        &&
     488:	687b      	ldr	r3, [r7, #4]
     48a:	6a1b      	ldr	r3, [r3, #32]
     48c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     490:	2be0      	cmp	r3, #224	; 0xe0
     492:	d126      	bne.n	4e2 <am_util_id_device+0xb2>
     494:	68fb      	ldr	r3, [r7, #12]
     496:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
     49a:	d122      	bne.n	4e2 <am_util_id_device+0xb2>
         ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO ) )
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO;
     49c:	687b      	ldr	r3, [r7, #4]
     49e:	2201      	movs	r2, #1
     4a0:	631a      	str	r2, [r3, #48]	; 0x30
        psIDDevice->pui8DeviceName = g_DeviceNameApollo;
     4a2:	687b      	ldr	r3, [r7, #4]
     4a4:	4a47      	ldr	r2, [pc, #284]	; (5c4 <am_util_id_device+0x194>)
     4a6:	639a      	str	r2, [r3, #56]	; 0x38

        //
        // ui32ChipRev[7:4]: 0=n/a, 1=A, 2=B, ...
        // ui32ChipRev[3:0]: 0=Rev0, 1=Rev1, ...
        //
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0xF0) >> 4);
     4a8:	687b      	ldr	r3, [r7, #4]
     4aa:	68db      	ldr	r3, [r3, #12]
     4ac:	091b      	lsrs	r3, r3, #4
     4ae:	f003 030f 	and.w	r3, r3, #15
     4b2:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMaj  = (uint8_t)('A' - 1 + ux);
     4b4:	68bb      	ldr	r3, [r7, #8]
     4b6:	b2db      	uxtb	r3, r3
     4b8:	3340      	adds	r3, #64	; 0x40
     4ba:	b2da      	uxtb	r2, r3
     4bc:	687b      	ldr	r3, [r7, #4]
     4be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0x0F) >> 0);
     4c2:	687b      	ldr	r3, [r7, #4]
     4c4:	68db      	ldr	r3, [r3, #12]
     4c6:	f003 030f 	and.w	r3, r3, #15
     4ca:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMin = (uint8_t)('0' + ux);
     4cc:	68bb      	ldr	r3, [r7, #8]
     4ce:	b2db      	uxtb	r3, r3
     4d0:	3330      	adds	r3, #48	; 0x30
     4d2:	b2da      	uxtb	r2, r3
     4d4:	687b      	ldr	r3, [r7, #4]
     4d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        //
        // Force the vendor name for Apollo, which did not support VENDORID.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
     4da:	687b      	ldr	r3, [r7, #4]
     4dc:	4a36      	ldr	r2, [pc, #216]	; (5b8 <am_util_id_device+0x188>)
     4de:	635a      	str	r2, [r3, #52]	; 0x34
     4e0:	e061      	b.n	5a6 <am_util_id_device+0x176>
    }
    else if ( ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0D0)   &&
     4e2:	687b      	ldr	r3, [r7, #4]
     4e4:	6a1b      	ldr	r3, [r3, #32]
     4e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ea:	2bd0      	cmp	r3, #208	; 0xd0
     4ec:	d123      	bne.n	536 <am_util_id_device+0x106>
     4ee:	68fb      	ldr	r3, [r7, #12]
     4f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
     4f4:	d11f      	bne.n	536 <am_util_id_device+0x106>
              ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO2 ) )
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO2;
     4f6:	687b      	ldr	r3, [r7, #4]
     4f8:	2202      	movs	r2, #2
     4fa:	631a      	str	r2, [r3, #48]	; 0x30
        psIDDevice->pui8DeviceName = g_DeviceNameApollo2;
     4fc:	687b      	ldr	r3, [r7, #4]
     4fe:	4a32      	ldr	r2, [pc, #200]	; (5c8 <am_util_id_device+0x198>)
     500:	639a      	str	r2, [r3, #56]	; 0x38

        //
        // ui32ChipRev[7:4]: 0=n/a, 1=A, 2=B, ...
        // ui32ChipRev[3:0]: 0=Rev0, 1=Rev1, ...
        //
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0xF0) >> 4);
     502:	687b      	ldr	r3, [r7, #4]
     504:	68db      	ldr	r3, [r3, #12]
     506:	091b      	lsrs	r3, r3, #4
     508:	f003 030f 	and.w	r3, r3, #15
     50c:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMaj  = (uint8_t)('A' - 1 + ux);
     50e:	68bb      	ldr	r3, [r7, #8]
     510:	b2db      	uxtb	r3, r3
     512:	3340      	adds	r3, #64	; 0x40
     514:	b2da      	uxtb	r2, r3
     516:	687b      	ldr	r3, [r7, #4]
     518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0x0F) >> 0);
     51c:	687b      	ldr	r3, [r7, #4]
     51e:	68db      	ldr	r3, [r3, #12]
     520:	f003 030f 	and.w	r3, r3, #15
     524:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMin = (uint8_t)('0' + ux);
     526:	68bb      	ldr	r3, [r7, #8]
     528:	b2db      	uxtb	r3, r3
     52a:	3330      	adds	r3, #48	; 0x30
     52c:	b2da      	uxtb	r2, r3
     52e:	687b      	ldr	r3, [r7, #4]
     530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
     534:	e037      	b.n	5a6 <am_util_id_device+0x176>
    }
    else if ( ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0C0)   &&
     536:	687b      	ldr	r3, [r7, #4]
     538:	6a1b      	ldr	r3, [r3, #32]
     53a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     53e:	2bc0      	cmp	r3, #192	; 0xc0
     540:	d123      	bne.n	58a <am_util_id_device+0x15a>
     542:	68fb      	ldr	r3, [r7, #12]
     544:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
     548:	d11f      	bne.n	58a <am_util_id_device+0x15a>
              ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO3 ) )
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO3;
     54a:	687b      	ldr	r3, [r7, #4]
     54c:	2203      	movs	r2, #3
     54e:	631a      	str	r2, [r3, #48]	; 0x30
        psIDDevice->pui8DeviceName = g_DeviceNameApollo3;
     550:	687b      	ldr	r3, [r7, #4]
     552:	4a1e      	ldr	r2, [pc, #120]	; (5cc <am_util_id_device+0x19c>)
     554:	639a      	str	r2, [r3, #56]	; 0x38

        //
        // ui32ChipRev[7:4]: 0=n/a, 1=A, 2=B, ...
        // ui32ChipRev[3:0]: 1=Rev0, 2=Rev1, ...
        //
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0xF0) >> 4);
     556:	687b      	ldr	r3, [r7, #4]
     558:	68db      	ldr	r3, [r3, #12]
     55a:	091b      	lsrs	r3, r3, #4
     55c:	f003 030f 	and.w	r3, r3, #15
     560:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMaj  = (uint8_t)('A' - 1 + ux);
     562:	68bb      	ldr	r3, [r7, #8]
     564:	b2db      	uxtb	r3, r3
     566:	3340      	adds	r3, #64	; 0x40
     568:	b2da      	uxtb	r2, r3
     56a:	687b      	ldr	r3, [r7, #4]
     56c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0x0F) >> 0);
     570:	687b      	ldr	r3, [r7, #4]
     572:	68db      	ldr	r3, [r3, #12]
     574:	f003 030f 	and.w	r3, r3, #15
     578:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMin = (uint8_t)('0' + ux - 1);
     57a:	68bb      	ldr	r3, [r7, #8]
     57c:	b2db      	uxtb	r3, r3
     57e:	332f      	adds	r3, #47	; 0x2f
     580:	b2da      	uxtb	r2, r3
     582:	687b      	ldr	r3, [r7, #4]
     584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
     588:	e00d      	b.n	5a6 <am_util_id_device+0x176>
    }
    else
    {
        psIDDevice->ui32Device = AM_UTIL_ID_UNKNOWN;
     58a:	687b      	ldr	r3, [r7, #4]
     58c:	2200      	movs	r2, #0
     58e:	631a      	str	r2, [r3, #48]	; 0x30
        psIDDevice->pui8DeviceName = g_ui8DeviceNameUnknown;
     590:	687b      	ldr	r3, [r7, #4]
     592:	4a0f      	ldr	r2, [pc, #60]	; (5d0 <am_util_id_device+0x1a0>)
     594:	639a      	str	r2, [r3, #56]	; 0x38
        psIDDevice->ui8ChipRevMaj = (uint8_t)'?';
     596:	687b      	ldr	r3, [r7, #4]
     598:	223f      	movs	r2, #63	; 0x3f
     59a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        psIDDevice->ui8ChipRevMin = (uint8_t)' ';
     59e:	687b      	ldr	r3, [r7, #4]
     5a0:	2220      	movs	r2, #32
     5a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }

    return psIDDevice->ui32Device;
     5a6:	687b      	ldr	r3, [r7, #4]
     5a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
     5aa:	4618      	mov	r0, r3
     5ac:	3710      	adds	r7, #16
     5ae:	46bd      	mov	sp, r7
     5b0:	bd80      	pop	{r7, pc}
     5b2:	bf00      	nop
     5b4:	b105100d 	.word	0xb105100d
     5b8:	00001f6c 	.word	0x00001f6c
     5bc:	00001f74 	.word	0x00001f74
     5c0:	414d4251 	.word	0x414d4251
     5c4:	00001f54 	.word	0x00001f54
     5c8:	00001f5c 	.word	0x00001f5c
     5cc:	00001f64 	.word	0x00001f64
     5d0:	00001f7c 	.word	0x00001f7c

000005d4 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     5d4:	b480      	push	{r7}
     5d6:	b083      	sub	sp, #12
     5d8:	af00      	add	r7, sp, #0
     5da:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     5dc:	4a04      	ldr	r2, [pc, #16]	; (5f0 <am_util_stdio_printf_init+0x1c>)
     5de:	687b      	ldr	r3, [r7, #4]
     5e0:	6013      	str	r3, [r2, #0]
}
     5e2:	bf00      	nop
     5e4:	370c      	adds	r7, #12
     5e6:	46bd      	mov	sp, r7
     5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     5ec:	4770      	bx	lr
     5ee:	bf00      	nop
     5f0:	10001114 	.word	0x10001114

000005f4 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     5f4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     5f8:	b096      	sub	sp, #88	; 0x58
     5fa:	af00      	add	r7, sp, #0
     5fc:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     600:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     604:	0025      	movs	r5, r4
     606:	2600      	movs	r6, #0
     608:	ea55 0306 	orrs.w	r3, r5, r6
     60c:	f000 80a0 	beq.w	750 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     610:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     614:	0862      	lsrs	r2, r4, #1
     616:	ea4f 0133 	mov.w	r1, r3, rrx
     61a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     61e:	ea4f 0893 	mov.w	r8, r3, lsr #2
     622:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     626:	ea4f 0994 	mov.w	r9, r4, lsr #2
     62a:	eb11 0308 	adds.w	r3, r1, r8
     62e:	eb42 0409 	adc.w	r4, r2, r9
     632:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     636:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     63a:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     63e:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     642:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     646:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     64a:	eb13 030a 	adds.w	r3, r3, sl
     64e:	eb44 040b 	adc.w	r4, r4, fp
     652:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     656:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     65a:	0a1a      	lsrs	r2, r3, #8
     65c:	62ba      	str	r2, [r7, #40]	; 0x28
     65e:	6aba      	ldr	r2, [r7, #40]	; 0x28
     660:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     664:	62ba      	str	r2, [r7, #40]	; 0x28
     666:	0a23      	lsrs	r3, r4, #8
     668:	62fb      	str	r3, [r7, #44]	; 0x2c
     66a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     66e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     672:	18c9      	adds	r1, r1, r3
     674:	eb42 0204 	adc.w	r2, r2, r4
     678:	460b      	mov	r3, r1
     67a:	4614      	mov	r4, r2
     67c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     680:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     684:	0c1a      	lsrs	r2, r3, #16
     686:	623a      	str	r2, [r7, #32]
     688:	6a3a      	ldr	r2, [r7, #32]
     68a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     68e:	623a      	str	r2, [r7, #32]
     690:	0c23      	lsrs	r3, r4, #16
     692:	627b      	str	r3, [r7, #36]	; 0x24
     694:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     698:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     69c:	18c9      	adds	r1, r1, r3
     69e:	eb42 0204 	adc.w	r2, r2, r4
     6a2:	460b      	mov	r3, r1
     6a4:	4614      	mov	r4, r2
     6a6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     6aa:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6ae:	0023      	movs	r3, r4
     6b0:	603b      	str	r3, [r7, #0]
     6b2:	2300      	movs	r3, #0
     6b4:	607b      	str	r3, [r7, #4]
     6b6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6ba:	e897 0006 	ldmia.w	r7, {r1, r2}
     6be:	18c9      	adds	r1, r1, r3
     6c0:	eb42 0204 	adc.w	r2, r2, r4
     6c4:	460b      	mov	r3, r1
     6c6:	4614      	mov	r4, r2
     6c8:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     6cc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6d0:	08da      	lsrs	r2, r3, #3
     6d2:	613a      	str	r2, [r7, #16]
     6d4:	693a      	ldr	r2, [r7, #16]
     6d6:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     6da:	613a      	str	r2, [r7, #16]
     6dc:	08e3      	lsrs	r3, r4, #3
     6de:	617b      	str	r3, [r7, #20]
     6e0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     6e4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     6e8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
     6ec:	460b      	mov	r3, r1
     6ee:	4614      	mov	r4, r2
     6f0:	00a0      	lsls	r0, r4, #2
     6f2:	60f8      	str	r0, [r7, #12]
     6f4:	68f8      	ldr	r0, [r7, #12]
     6f6:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
     6fa:	60f8      	str	r0, [r7, #12]
     6fc:	009b      	lsls	r3, r3, #2
     6fe:	60bb      	str	r3, [r7, #8]
     700:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     704:	185b      	adds	r3, r3, r1
     706:	eb44 0402 	adc.w	r4, r4, r2
     70a:	18db      	adds	r3, r3, r3
     70c:	eb44 0404 	adc.w	r4, r4, r4
     710:	4619      	mov	r1, r3
     712:	4622      	mov	r2, r4
     714:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     718:	1a5b      	subs	r3, r3, r1
     71a:	eb64 0402 	sbc.w	r4, r4, r2
     71e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     722:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     726:	3306      	adds	r3, #6
     728:	f144 0400 	adc.w	r4, r4, #0
     72c:	091a      	lsrs	r2, r3, #4
     72e:	61ba      	str	r2, [r7, #24]
     730:	69ba      	ldr	r2, [r7, #24]
     732:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     736:	61ba      	str	r2, [r7, #24]
     738:	0923      	lsrs	r3, r4, #4
     73a:	61fb      	str	r3, [r7, #28]
     73c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     740:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     744:	18c9      	adds	r1, r1, r3
     746:	eb42 0204 	adc.w	r2, r2, r4
     74a:	460b      	mov	r3, r1
     74c:	4614      	mov	r4, r2
     74e:	e029      	b.n	7a4 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     752:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     756:	085a      	lsrs	r2, r3, #1
     758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     75a:	089b      	lsrs	r3, r3, #2
     75c:	4413      	add	r3, r2
     75e:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     762:	091b      	lsrs	r3, r3, #4
     764:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     766:	4413      	add	r3, r2
     768:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     76a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     76c:	0a1b      	lsrs	r3, r3, #8
     76e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     770:	4413      	add	r3, r2
     772:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     776:	0c1b      	lsrs	r3, r3, #16
     778:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     77a:	4413      	add	r3, r2
     77c:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     77e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     780:	08db      	lsrs	r3, r3, #3
     782:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     784:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     786:	4613      	mov	r3, r2
     788:	009b      	lsls	r3, r3, #2
     78a:	4413      	add	r3, r2
     78c:	005b      	lsls	r3, r3, #1
     78e:	461a      	mov	r2, r3
     790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     792:	1a9b      	subs	r3, r3, r2
     794:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     798:	3306      	adds	r3, #6
     79a:	091a      	lsrs	r2, r3, #4
     79c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     79e:	4413      	add	r3, r2
     7a0:	f04f 0400 	mov.w	r4, #0
    }
}
     7a4:	4618      	mov	r0, r3
     7a6:	4621      	mov	r1, r4
     7a8:	3758      	adds	r7, #88	; 0x58
     7aa:	46bd      	mov	sp, r7
     7ac:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     7b0:	4770      	bx	lr

000007b2 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     7b2:	b590      	push	{r4, r7, lr}
     7b4:	b085      	sub	sp, #20
     7b6:	af00      	add	r7, sp, #0
     7b8:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     7bc:	683a      	ldr	r2, [r7, #0]
     7be:	687b      	ldr	r3, [r7, #4]
     7c0:	4313      	orrs	r3, r2
     7c2:	2b00      	cmp	r3, #0
     7c4:	bf0c      	ite	eq
     7c6:	2301      	moveq	r3, #1
     7c8:	2300      	movne	r3, #0
     7ca:	b2db      	uxtb	r3, r3
     7cc:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     7ce:	e008      	b.n	7e2 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     7d0:	e9d7 0100 	ldrd	r0, r1, [r7]
     7d4:	f7ff ff0e 	bl	5f4 <divu64_10>
     7d8:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     7dc:	68fb      	ldr	r3, [r7, #12]
     7de:	3301      	adds	r3, #1
     7e0:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
     7e2:	e897 0018 	ldmia.w	r7, {r3, r4}
     7e6:	4323      	orrs	r3, r4
     7e8:	d1f2      	bne.n	7d0 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
     7ea:	68fb      	ldr	r3, [r7, #12]
}
     7ec:	4618      	mov	r0, r3
     7ee:	3714      	adds	r7, #20
     7f0:	46bd      	mov	sp, r7
     7f2:	bd90      	pop	{r4, r7, pc}

000007f4 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     7f4:	b590      	push	{r4, r7, lr}
     7f6:	b083      	sub	sp, #12
     7f8:	af00      	add	r7, sp, #0
     7fa:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     7fe:	e897 0018 	ldmia.w	r7, {r3, r4}
     802:	2b00      	cmp	r3, #0
     804:	f174 0300 	sbcs.w	r3, r4, #0
     808:	da06      	bge.n	818 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     80a:	e897 0018 	ldmia.w	r7, {r3, r4}
     80e:	425b      	negs	r3, r3
     810:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     814:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     818:	e897 0018 	ldmia.w	r7, {r3, r4}
     81c:	4618      	mov	r0, r3
     81e:	4621      	mov	r1, r4
     820:	f7ff ffc7 	bl	7b2 <ndigits_in_u64>
     824:	4603      	mov	r3, r0
}
     826:	4618      	mov	r0, r3
     828:	370c      	adds	r7, #12
     82a:	46bd      	mov	sp, r7
     82c:	bd90      	pop	{r4, r7, pc}

0000082e <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     82e:	b490      	push	{r4, r7}
     830:	b084      	sub	sp, #16
     832:	af00      	add	r7, sp, #0
     834:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     838:	6839      	ldr	r1, [r7, #0]
     83a:	687a      	ldr	r2, [r7, #4]
     83c:	430a      	orrs	r2, r1
     83e:	2a00      	cmp	r2, #0
     840:	bf0c      	ite	eq
     842:	2201      	moveq	r2, #1
     844:	2200      	movne	r2, #0
     846:	b2d2      	uxtb	r2, r2
     848:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     84a:	e00a      	b.n	862 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     84c:	e897 0006 	ldmia.w	r7, {r1, r2}
     850:	090b      	lsrs	r3, r1, #4
     852:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     856:	0914      	lsrs	r4, r2, #4
     858:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     85c:	68fa      	ldr	r2, [r7, #12]
     85e:	3201      	adds	r2, #1
     860:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
     862:	e897 0006 	ldmia.w	r7, {r1, r2}
     866:	430a      	orrs	r2, r1
     868:	d1f0      	bne.n	84c <ndigits_in_hex+0x1e>
    }

    return iDigits;
     86a:	68fb      	ldr	r3, [r7, #12]
}
     86c:	4618      	mov	r0, r3
     86e:	3710      	adds	r7, #16
     870:	46bd      	mov	sp, r7
     872:	bc90      	pop	{r4, r7}
     874:	4770      	bx	lr

00000876 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     876:	b480      	push	{r7}
     878:	b087      	sub	sp, #28
     87a:	af00      	add	r7, sp, #0
     87c:	6078      	str	r0, [r7, #4]
     87e:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     880:	2300      	movs	r3, #0
     882:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     884:	2300      	movs	r3, #0
     886:	613b      	str	r3, [r7, #16]
     888:	2300      	movs	r3, #0
     88a:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     88c:	687b      	ldr	r3, [r7, #4]
     88e:	781b      	ldrb	r3, [r3, #0]
     890:	2b2d      	cmp	r3, #45	; 0x2d
     892:	d11b      	bne.n	8cc <decstr_to_int+0x56>
    {
        bNeg = true;
     894:	2301      	movs	r3, #1
     896:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     898:	687b      	ldr	r3, [r7, #4]
     89a:	3301      	adds	r3, #1
     89c:	607b      	str	r3, [r7, #4]
        uCnt++;
     89e:	68fb      	ldr	r3, [r7, #12]
     8a0:	3301      	adds	r3, #1
     8a2:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     8a4:	e012      	b.n	8cc <decstr_to_int+0x56>
    {
        ++uCnt;
     8a6:	68fb      	ldr	r3, [r7, #12]
     8a8:	3301      	adds	r3, #1
     8aa:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     8ac:	693a      	ldr	r2, [r7, #16]
     8ae:	4613      	mov	r3, r2
     8b0:	009b      	lsls	r3, r3, #2
     8b2:	4413      	add	r3, r2
     8b4:	005b      	lsls	r3, r3, #1
     8b6:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     8b8:	687b      	ldr	r3, [r7, #4]
     8ba:	781b      	ldrb	r3, [r3, #0]
     8bc:	461a      	mov	r2, r3
     8be:	693b      	ldr	r3, [r7, #16]
     8c0:	4413      	add	r3, r2
     8c2:	3b30      	subs	r3, #48	; 0x30
     8c4:	613b      	str	r3, [r7, #16]
        pcStr++;
     8c6:	687b      	ldr	r3, [r7, #4]
     8c8:	3301      	adds	r3, #1
     8ca:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     8cc:	687b      	ldr	r3, [r7, #4]
     8ce:	781b      	ldrb	r3, [r3, #0]
     8d0:	2b2f      	cmp	r3, #47	; 0x2f
     8d2:	d903      	bls.n	8dc <decstr_to_int+0x66>
     8d4:	687b      	ldr	r3, [r7, #4]
     8d6:	781b      	ldrb	r3, [r3, #0]
     8d8:	2b39      	cmp	r3, #57	; 0x39
     8da:	d9e4      	bls.n	8a6 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	2b00      	cmp	r3, #0
     8e0:	d002      	beq.n	8e8 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     8e2:	683b      	ldr	r3, [r7, #0]
     8e4:	68fa      	ldr	r2, [r7, #12]
     8e6:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     8e8:	7dfb      	ldrb	r3, [r7, #23]
     8ea:	2b00      	cmp	r3, #0
     8ec:	d002      	beq.n	8f4 <decstr_to_int+0x7e>
     8ee:	693b      	ldr	r3, [r7, #16]
     8f0:	425b      	negs	r3, r3
     8f2:	e000      	b.n	8f6 <decstr_to_int+0x80>
     8f4:	693b      	ldr	r3, [r7, #16]
}
     8f6:	4618      	mov	r0, r3
     8f8:	371c      	adds	r7, #28
     8fa:	46bd      	mov	sp, r7
     8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     900:	4770      	bx	lr

00000902 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     902:	b590      	push	{r4, r7, lr}
     904:	b091      	sub	sp, #68	; 0x44
     906:	af00      	add	r7, sp, #0
     908:	e9c7 0102 	strd	r0, r1, [r7, #8]
     90c:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     90e:	2300      	movs	r3, #0
     910:	63fb      	str	r3, [r7, #60]	; 0x3c
     912:	2300      	movs	r3, #0
     914:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     916:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     91a:	f7ff fe6b 	bl	5f4 <divu64_10>
     91e:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     922:	68b9      	ldr	r1, [r7, #8]
     924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     926:	4613      	mov	r3, r2
     928:	009b      	lsls	r3, r3, #2
     92a:	4413      	add	r3, r2
     92c:	005b      	lsls	r3, r3, #1
     92e:	1acb      	subs	r3, r1, r3
     930:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     934:	1c5a      	adds	r2, r3, #1
     936:	63fa      	str	r2, [r7, #60]	; 0x3c
     938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     93a:	b2d2      	uxtb	r2, r2
     93c:	3230      	adds	r2, #48	; 0x30
     93e:	b2d2      	uxtb	r2, r2
     940:	f107 0140 	add.w	r1, r7, #64	; 0x40
     944:	440b      	add	r3, r1
     946:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     94a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     94e:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     952:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     956:	4323      	orrs	r3, r4
     958:	d1dd      	bne.n	916 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     95a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     95c:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     95e:	687b      	ldr	r3, [r7, #4]
     960:	2b00      	cmp	r3, #0
     962:	d011      	beq.n	988 <uint64_to_str+0x86>
    {
        while ( ix-- )
     964:	e008      	b.n	978 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     966:	687b      	ldr	r3, [r7, #4]
     968:	1c5a      	adds	r2, r3, #1
     96a:	607a      	str	r2, [r7, #4]
     96c:	f107 0110 	add.w	r1, r7, #16
     970:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     972:	440a      	add	r2, r1
     974:	7812      	ldrb	r2, [r2, #0]
     976:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
     978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     97a:	1e5a      	subs	r2, r3, #1
     97c:	63fa      	str	r2, [r7, #60]	; 0x3c
     97e:	2b00      	cmp	r3, #0
     980:	d1f1      	bne.n	966 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     982:	687b      	ldr	r3, [r7, #4]
     984:	2200      	movs	r2, #0
     986:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     98a:	4618      	mov	r0, r3
     98c:	3744      	adds	r7, #68	; 0x44
     98e:	46bd      	mov	sp, r7
     990:	bd90      	pop	{r4, r7, pc}

00000992 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     992:	b4b0      	push	{r4, r5, r7}
     994:	b08d      	sub	sp, #52	; 0x34
     996:	af00      	add	r7, sp, #0
     998:	e9c7 0102 	strd	r0, r1, [r7, #8]
     99c:	607a      	str	r2, [r7, #4]
     99e:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     9a0:	2300      	movs	r3, #0
     9a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     9a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     9a8:	4313      	orrs	r3, r2
     9aa:	d131      	bne.n	a10 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     9ae:	1c5a      	adds	r2, r3, #1
     9b0:	62fa      	str	r2, [r7, #44]	; 0x2c
     9b2:	f107 0230 	add.w	r2, r7, #48	; 0x30
     9b6:	4413      	add	r3, r2
     9b8:	2230      	movs	r2, #48	; 0x30
     9ba:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     9be:	e027      	b.n	a10 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     9c0:	7a3b      	ldrb	r3, [r7, #8]
     9c2:	f003 030f 	and.w	r3, r3, #15
     9c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     9ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     9ce:	2b09      	cmp	r3, #9
     9d0:	d90a      	bls.n	9e8 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     9d2:	78fb      	ldrb	r3, [r7, #3]
     9d4:	2b00      	cmp	r3, #0
     9d6:	d001      	beq.n	9dc <uint64_to_hexstr+0x4a>
     9d8:	2227      	movs	r2, #39	; 0x27
     9da:	e000      	b.n	9de <uint64_to_hexstr+0x4c>
     9dc:	2207      	movs	r2, #7
     9de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     9e2:	4413      	add	r3, r2
     9e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     9ea:	1c5a      	adds	r2, r3, #1
     9ec:	62fa      	str	r2, [r7, #44]	; 0x2c
     9ee:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     9f2:	3230      	adds	r2, #48	; 0x30
     9f4:	b2d2      	uxtb	r2, r2
     9f6:	f107 0130 	add.w	r1, r7, #48	; 0x30
     9fa:	440b      	add	r3, r1
     9fc:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     a00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     a04:	0914      	lsrs	r4, r2, #4
     a06:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     a0a:	091d      	lsrs	r5, r3, #4
     a0c:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
     a10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     a14:	4313      	orrs	r3, r2
     a16:	d1d3      	bne.n	9c0 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a1a:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	2b00      	cmp	r3, #0
     a20:	d011      	beq.n	a46 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     a22:	e008      	b.n	a36 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     a24:	687b      	ldr	r3, [r7, #4]
     a26:	1c5a      	adds	r2, r3, #1
     a28:	607a      	str	r2, [r7, #4]
     a2a:	f107 0110 	add.w	r1, r7, #16
     a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     a30:	440a      	add	r2, r1
     a32:	7812      	ldrb	r2, [r2, #0]
     a34:	701a      	strb	r2, [r3, #0]
        while (ix--)
     a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a38:	1e5a      	subs	r2, r3, #1
     a3a:	62fa      	str	r2, [r7, #44]	; 0x2c
     a3c:	2b00      	cmp	r3, #0
     a3e:	d1f1      	bne.n	a24 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     a40:	687b      	ldr	r3, [r7, #4]
     a42:	2200      	movs	r2, #0
     a44:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     a48:	4618      	mov	r0, r3
     a4a:	3734      	adds	r7, #52	; 0x34
     a4c:	46bd      	mov	sp, r7
     a4e:	bcb0      	pop	{r4, r5, r7}
     a50:	4770      	bx	lr

00000a52 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     a52:	b480      	push	{r7}
     a54:	b085      	sub	sp, #20
     a56:	af00      	add	r7, sp, #0
     a58:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     a5a:	2300      	movs	r3, #0
     a5c:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     a5e:	687b      	ldr	r3, [r7, #4]
     a60:	2b00      	cmp	r3, #0
     a62:	d104      	bne.n	a6e <simple_strlen+0x1c>
    {
        return ui32RetVal;
     a64:	68fb      	ldr	r3, [r7, #12]
     a66:	e009      	b.n	a7c <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     a68:	68fb      	ldr	r3, [r7, #12]
     a6a:	3301      	adds	r3, #1
     a6c:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
     a6e:	687b      	ldr	r3, [r7, #4]
     a70:	1c5a      	adds	r2, r3, #1
     a72:	607a      	str	r2, [r7, #4]
     a74:	781b      	ldrb	r3, [r3, #0]
     a76:	2b00      	cmp	r3, #0
     a78:	d1f6      	bne.n	a68 <simple_strlen+0x16>
    }
    return ui32RetVal;
     a7a:	68fb      	ldr	r3, [r7, #12]
}
     a7c:	4618      	mov	r0, r3
     a7e:	3714      	adds	r7, #20
     a80:	46bd      	mov	sp, r7
     a82:	f85d 7b04 	ldr.w	r7, [sp], #4
     a86:	4770      	bx	lr

00000a88 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     a88:	b480      	push	{r7}
     a8a:	b087      	sub	sp, #28
     a8c:	af00      	add	r7, sp, #0
     a8e:	60f8      	str	r0, [r7, #12]
     a90:	460b      	mov	r3, r1
     a92:	607a      	str	r2, [r7, #4]
     a94:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     a96:	2300      	movs	r3, #0
     a98:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     a9a:	687b      	ldr	r3, [r7, #4]
     a9c:	2b00      	cmp	r3, #0
     a9e:	dc0c      	bgt.n	aba <padbuffer+0x32>
    {
        return i32Cnt;
     aa0:	697b      	ldr	r3, [r7, #20]
     aa2:	e010      	b.n	ac6 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     aa4:	68fb      	ldr	r3, [r7, #12]
     aa6:	2b00      	cmp	r3, #0
     aa8:	d004      	beq.n	ab4 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     aaa:	68fb      	ldr	r3, [r7, #12]
     aac:	1c5a      	adds	r2, r3, #1
     aae:	60fa      	str	r2, [r7, #12]
     ab0:	7afa      	ldrb	r2, [r7, #11]
     ab2:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     ab4:	697b      	ldr	r3, [r7, #20]
     ab6:	3301      	adds	r3, #1
     ab8:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
     aba:	687b      	ldr	r3, [r7, #4]
     abc:	1e5a      	subs	r2, r3, #1
     abe:	607a      	str	r2, [r7, #4]
     ac0:	2b00      	cmp	r3, #0
     ac2:	d1ef      	bne.n	aa4 <padbuffer+0x1c>
    }

    return i32Cnt;
     ac4:	697b      	ldr	r3, [r7, #20]
}
     ac6:	4618      	mov	r0, r3
     ac8:	371c      	adds	r7, #28
     aca:	46bd      	mov	sp, r7
     acc:	f85d 7b04 	ldr.w	r7, [sp], #4
     ad0:	4770      	bx	lr
	...

00000ad4 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     ad4:	b590      	push	{r4, r7, lr}
     ad6:	b08f      	sub	sp, #60	; 0x3c
     ad8:	af00      	add	r7, sp, #0
     ada:	60f8      	str	r0, [r7, #12]
     adc:	60b9      	str	r1, [r7, #8]
     ade:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
     ae0:	68bb      	ldr	r3, [r7, #8]
     ae2:	681b      	ldr	r3, [r3, #0]
     ae4:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
     ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ae8:	2b03      	cmp	r3, #3
     aea:	dc02      	bgt.n	af2 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     aec:	f06f 0302 	mvn.w	r3, #2
     af0:	e0e7      	b.n	cc2 <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
     af2:	edd7 7a03 	vldr	s15, [r7, #12]
     af6:	eef5 7a40 	vcmp.f32	s15, #0.0
     afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     afe:	d104      	bne.n	b0a <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     b00:	68bb      	ldr	r3, [r7, #8]
     b02:	4a72      	ldr	r2, [pc, #456]	; (ccc <ftoa+0x1f8>)
     b04:	601a      	str	r2, [r3, #0]
        return 3;
     b06:	2303      	movs	r3, #3
     b08:	e0db      	b.n	cc2 <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
     b0a:	68bb      	ldr	r3, [r7, #8]
     b0c:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
     b0e:	68fb      	ldr	r3, [r7, #12]
     b10:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     b12:	693b      	ldr	r3, [r7, #16]
     b14:	15db      	asrs	r3, r3, #23
     b16:	b2db      	uxtb	r3, r3
     b18:	3b7f      	subs	r3, #127	; 0x7f
     b1a:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     b1c:	693b      	ldr	r3, [r7, #16]
     b1e:	f3c3 0316 	ubfx	r3, r3, #0, #23
     b22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     b26:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
     b28:	2300      	movs	r3, #0
     b2a:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     b2c:	2300      	movs	r3, #0
     b2e:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     b30:	69fb      	ldr	r3, [r7, #28]
     b32:	2b1e      	cmp	r3, #30
     b34:	dd02      	ble.n	b3c <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     b36:	f06f 0301 	mvn.w	r3, #1
     b3a:	e0c2      	b.n	cc2 <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
     b3c:	69fb      	ldr	r3, [r7, #28]
     b3e:	f113 0f17 	cmn.w	r3, #23
     b42:	da02      	bge.n	b4a <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     b44:	f04f 33ff 	mov.w	r3, #4294967295
     b48:	e0bb      	b.n	cc2 <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
     b4a:	69fb      	ldr	r3, [r7, #28]
     b4c:	2b16      	cmp	r3, #22
     b4e:	dd06      	ble.n	b5e <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
     b50:	69fb      	ldr	r3, [r7, #28]
     b52:	3b17      	subs	r3, #23
     b54:	69ba      	ldr	r2, [r7, #24]
     b56:	fa02 f303 	lsl.w	r3, r2, r3
     b5a:	637b      	str	r3, [r7, #52]	; 0x34
     b5c:	e01a      	b.n	b94 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     b5e:	69fb      	ldr	r3, [r7, #28]
     b60:	2b00      	cmp	r3, #0
     b62:	db0f      	blt.n	b84 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
     b64:	69fb      	ldr	r3, [r7, #28]
     b66:	f1c3 0317 	rsb	r3, r3, #23
     b6a:	69ba      	ldr	r2, [r7, #24]
     b6c:	fa42 f303 	asr.w	r3, r2, r3
     b70:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
     b72:	69fb      	ldr	r3, [r7, #28]
     b74:	3301      	adds	r3, #1
     b76:	69ba      	ldr	r2, [r7, #24]
     b78:	fa02 f303 	lsl.w	r3, r2, r3
     b7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     b80:	633b      	str	r3, [r7, #48]	; 0x30
     b82:	e007      	b.n	b94 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
     b84:	69bb      	ldr	r3, [r7, #24]
     b86:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     b8a:	69fb      	ldr	r3, [r7, #28]
     b8c:	43db      	mvns	r3, r3
     b8e:	fa42 f303 	asr.w	r3, r2, r3
     b92:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     b94:	693b      	ldr	r3, [r7, #16]
     b96:	2b00      	cmp	r3, #0
     b98:	da04      	bge.n	ba4 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     b9a:	68bb      	ldr	r3, [r7, #8]
     b9c:	1c5a      	adds	r2, r3, #1
     b9e:	60ba      	str	r2, [r7, #8]
     ba0:	222d      	movs	r2, #45	; 0x2d
     ba2:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     ba6:	2b00      	cmp	r3, #0
     ba8:	d105      	bne.n	bb6 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     baa:	68bb      	ldr	r3, [r7, #8]
     bac:	1c5a      	adds	r2, r3, #1
     bae:	60ba      	str	r2, [r7, #8]
     bb0:	2230      	movs	r2, #48	; 0x30
     bb2:	701a      	strb	r2, [r3, #0]
     bb4:	e021      	b.n	bfa <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bb8:	2b00      	cmp	r3, #0
     bba:	dd08      	ble.n	bce <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bbe:	ea4f 74e3 	mov.w	r4, r3, asr #31
     bc2:	68ba      	ldr	r2, [r7, #8]
     bc4:	4618      	mov	r0, r3
     bc6:	4621      	mov	r1, r4
     bc8:	f7ff fe9b 	bl	902 <uint64_to_str>
     bcc:	e011      	b.n	bf2 <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     bce:	68bb      	ldr	r3, [r7, #8]
     bd0:	1c5a      	adds	r2, r3, #1
     bd2:	60ba      	str	r2, [r7, #8]
     bd4:	222d      	movs	r2, #45	; 0x2d
     bd6:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bda:	425b      	negs	r3, r3
     bdc:	ea4f 74e3 	mov.w	r4, r3, asr #31
     be0:	68ba      	ldr	r2, [r7, #8]
     be2:	4618      	mov	r0, r3
     be4:	4621      	mov	r1, r4
     be6:	f7ff fe8c 	bl	902 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     bea:	e002      	b.n	bf2 <ftoa+0x11e>
        {
            pcBuf++;
     bec:	68bb      	ldr	r3, [r7, #8]
     bee:	3301      	adds	r3, #1
     bf0:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
     bf2:	68bb      	ldr	r3, [r7, #8]
     bf4:	781b      	ldrb	r3, [r3, #0]
     bf6:	2b00      	cmp	r3, #0
     bf8:	d1f8      	bne.n	bec <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     bfa:	68bb      	ldr	r3, [r7, #8]
     bfc:	1c5a      	adds	r2, r3, #1
     bfe:	60ba      	str	r2, [r7, #8]
     c00:	222e      	movs	r2, #46	; 0x2e
     c02:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     c06:	2b00      	cmp	r3, #0
     c08:	d105      	bne.n	c16 <ftoa+0x142>
    {
        *pcBuf++ = '0';
     c0a:	68bb      	ldr	r3, [r7, #8]
     c0c:	1c5a      	adds	r2, r3, #1
     c0e:	60ba      	str	r2, [r7, #8]
     c10:	2230      	movs	r2, #48	; 0x30
     c12:	701a      	strb	r2, [r3, #0]
     c14:	e04f      	b.n	cb6 <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     c16:	68ba      	ldr	r2, [r7, #8]
     c18:	6a3b      	ldr	r3, [r7, #32]
     c1a:	1ad3      	subs	r3, r2, r3
     c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     c1e:	1ad3      	subs	r3, r2, r3
     c20:	3b01      	subs	r3, #1
     c22:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     c24:	697a      	ldr	r2, [r7, #20]
     c26:	687b      	ldr	r3, [r7, #4]
     c28:	4293      	cmp	r3, r2
     c2a:	bfa8      	it	ge
     c2c:	4613      	movge	r3, r2
     c2e:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
     c30:	2300      	movs	r3, #0
     c32:	62bb      	str	r3, [r7, #40]	; 0x28
     c34:	e015      	b.n	c62 <ftoa+0x18e>
        {
            i32FracPart *= 10;
     c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     c38:	4613      	mov	r3, r2
     c3a:	009b      	lsls	r3, r3, #2
     c3c:	4413      	add	r3, r2
     c3e:	005b      	lsls	r3, r3, #1
     c40:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     c42:	68bb      	ldr	r3, [r7, #8]
     c44:	1c5a      	adds	r2, r3, #1
     c46:	60ba      	str	r2, [r7, #8]
     c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     c4a:	1612      	asrs	r2, r2, #24
     c4c:	b2d2      	uxtb	r2, r2
     c4e:	3230      	adds	r2, #48	; 0x30
     c50:	b2d2      	uxtb	r2, r2
     c52:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     c56:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     c5a:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
     c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
     c5e:	3301      	adds	r3, #1
     c60:	62bb      	str	r3, [r7, #40]	; 0x28
     c62:	6aba      	ldr	r2, [r7, #40]	; 0x28
     c64:	697b      	ldr	r3, [r7, #20]
     c66:	429a      	cmp	r2, r3
     c68:	dbe5      	blt.n	c36 <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
     c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     c6c:	4613      	mov	r3, r2
     c6e:	009b      	lsls	r3, r3, #2
     c70:	4413      	add	r3, r2
     c72:	005b      	lsls	r3, r3, #1
     c74:	161b      	asrs	r3, r3, #24
     c76:	2b04      	cmp	r3, #4
     c78:	dd1d      	ble.n	cb6 <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
     c7a:	68bb      	ldr	r3, [r7, #8]
     c7c:	3b01      	subs	r3, #1
     c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     c80:	e015      	b.n	cae <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
     c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c84:	781b      	ldrb	r3, [r3, #0]
     c86:	2b2e      	cmp	r3, #46	; 0x2e
     c88:	d00e      	beq.n	ca8 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
     c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c8c:	781b      	ldrb	r3, [r3, #0]
     c8e:	2b39      	cmp	r3, #57	; 0x39
     c90:	d103      	bne.n	c9a <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
     c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c94:	2230      	movs	r2, #48	; 0x30
     c96:	701a      	strb	r2, [r3, #0]
     c98:	e006      	b.n	ca8 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
     c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c9c:	781b      	ldrb	r3, [r3, #0]
     c9e:	3301      	adds	r3, #1
     ca0:	b2da      	uxtb	r2, r3
     ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ca4:	701a      	strb	r2, [r3, #0]
                    break;
     ca6:	e006      	b.n	cb6 <ftoa+0x1e2>
                }
                pcBuftmp--;
     ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     caa:	3b01      	subs	r3, #1
     cac:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     cae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     cb0:	6a3b      	ldr	r3, [r7, #32]
     cb2:	429a      	cmp	r2, r3
     cb4:	d2e5      	bcs.n	c82 <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     cb6:	68bb      	ldr	r3, [r7, #8]
     cb8:	2200      	movs	r2, #0
     cba:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     cbc:	68ba      	ldr	r2, [r7, #8]
     cbe:	6a3b      	ldr	r3, [r7, #32]
     cc0:	1ad3      	subs	r3, r2, r3
} // ftoa()
     cc2:	4618      	mov	r0, r3
     cc4:	373c      	adds	r7, #60	; 0x3c
     cc6:	46bd      	mov	sp, r7
     cc8:	bd90      	pop	{r4, r7, pc}
     cca:	bf00      	nop
     ccc:	00302e30 	.word	0x00302e30

00000cd0 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     cd0:	b590      	push	{r4, r7, lr}
     cd2:	b095      	sub	sp, #84	; 0x54
     cd4:	af00      	add	r7, sp, #0
     cd6:	60f8      	str	r0, [r7, #12]
     cd8:	60b9      	str	r1, [r7, #8]
     cda:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     cdc:	2300      	movs	r3, #0
     cde:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     ce0:	2300      	movs	r3, #0
     ce2:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     ce4:	e2e3      	b.n	12ae <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     ce6:	2306      	movs	r3, #6
     ce8:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     cea:	68bb      	ldr	r3, [r7, #8]
     cec:	781b      	ldrb	r3, [r3, #0]
     cee:	2b25      	cmp	r3, #37	; 0x25
     cf0:	d01f      	beq.n	d32 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     cf2:	68fb      	ldr	r3, [r7, #12]
     cf4:	2b00      	cmp	r3, #0
     cf6:	d015      	beq.n	d24 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     cf8:	68bb      	ldr	r3, [r7, #8]
     cfa:	781b      	ldrb	r3, [r3, #0]
     cfc:	2b0a      	cmp	r3, #10
     cfe:	d10b      	bne.n	d18 <am_util_stdio_vsprintf+0x48>
     d00:	4bb1      	ldr	r3, [pc, #708]	; (fc8 <am_util_stdio_vsprintf+0x2f8>)
     d02:	781b      	ldrb	r3, [r3, #0]
     d04:	2b00      	cmp	r3, #0
     d06:	d007      	beq.n	d18 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     d08:	68fb      	ldr	r3, [r7, #12]
     d0a:	1c5a      	adds	r2, r3, #1
     d0c:	60fa      	str	r2, [r7, #12]
     d0e:	220d      	movs	r2, #13
     d10:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d14:	3301      	adds	r3, #1
     d16:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     d18:	68fb      	ldr	r3, [r7, #12]
     d1a:	1c5a      	adds	r2, r3, #1
     d1c:	60fa      	str	r2, [r7, #12]
     d1e:	68ba      	ldr	r2, [r7, #8]
     d20:	7812      	ldrb	r2, [r2, #0]
     d22:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     d24:	68bb      	ldr	r3, [r7, #8]
     d26:	3301      	adds	r3, #1
     d28:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d2c:	3301      	adds	r3, #1
     d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     d30:	e2bd      	b.n	12ae <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     d32:	68bb      	ldr	r3, [r7, #8]
     d34:	3301      	adds	r3, #1
     d36:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     d38:	2300      	movs	r3, #0
     d3a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     d3e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     d42:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     d46:	2320      	movs	r3, #32
     d48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     d4c:	68bb      	ldr	r3, [r7, #8]
     d4e:	781b      	ldrb	r3, [r3, #0]
     d50:	2b30      	cmp	r3, #48	; 0x30
     d52:	d105      	bne.n	d60 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     d54:	2330      	movs	r3, #48	; 0x30
     d56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	3301      	adds	r3, #1
     d5e:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     d60:	f107 0310 	add.w	r3, r7, #16
     d64:	4619      	mov	r1, r3
     d66:	68b8      	ldr	r0, [r7, #8]
     d68:	f7ff fd85 	bl	876 <decstr_to_int>
     d6c:	4603      	mov	r3, r0
     d6e:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     d70:	693b      	ldr	r3, [r7, #16]
     d72:	68ba      	ldr	r2, [r7, #8]
     d74:	4413      	add	r3, r2
     d76:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     d78:	68bb      	ldr	r3, [r7, #8]
     d7a:	781b      	ldrb	r3, [r3, #0]
     d7c:	2b73      	cmp	r3, #115	; 0x73
     d7e:	d005      	beq.n	d8c <am_util_stdio_vsprintf+0xbc>
     d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d82:	2b00      	cmp	r3, #0
     d84:	da02      	bge.n	d8c <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d88:	425b      	negs	r3, r3
     d8a:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     d8c:	68bb      	ldr	r3, [r7, #8]
     d8e:	781b      	ldrb	r3, [r3, #0]
     d90:	2b2e      	cmp	r3, #46	; 0x2e
     d92:	d10e      	bne.n	db2 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     d94:	68bb      	ldr	r3, [r7, #8]
     d96:	3301      	adds	r3, #1
     d98:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     d9a:	f107 0310 	add.w	r3, r7, #16
     d9e:	4619      	mov	r1, r3
     da0:	68b8      	ldr	r0, [r7, #8]
     da2:	f7ff fd68 	bl	876 <decstr_to_int>
     da6:	4603      	mov	r3, r0
     da8:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     daa:	693b      	ldr	r3, [r7, #16]
     dac:	68ba      	ldr	r2, [r7, #8]
     dae:	4413      	add	r3, r2
     db0:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     db2:	68bb      	ldr	r3, [r7, #8]
     db4:	781b      	ldrb	r3, [r3, #0]
     db6:	2b6c      	cmp	r3, #108	; 0x6c
     db8:	d10c      	bne.n	dd4 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     dba:	68bb      	ldr	r3, [r7, #8]
     dbc:	3301      	adds	r3, #1
     dbe:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     dc0:	68bb      	ldr	r3, [r7, #8]
     dc2:	781b      	ldrb	r3, [r3, #0]
     dc4:	2b6c      	cmp	r3, #108	; 0x6c
     dc6:	d105      	bne.n	dd4 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     dc8:	68bb      	ldr	r3, [r7, #8]
     dca:	3301      	adds	r3, #1
     dcc:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     dce:	2301      	movs	r3, #1
     dd0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     dd4:	68bb      	ldr	r3, [r7, #8]
     dd6:	781b      	ldrb	r3, [r3, #0]
     dd8:	3b46      	subs	r3, #70	; 0x46
     dda:	2b32      	cmp	r3, #50	; 0x32
     ddc:	f200 8254 	bhi.w	1288 <am_util_stdio_vsprintf+0x5b8>
     de0:	a201      	add	r2, pc, #4	; (adr r2, de8 <am_util_stdio_vsprintf+0x118>)
     de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     de6:	bf00      	nop
     de8:	00001213 	.word	0x00001213
     dec:	00001289 	.word	0x00001289
     df0:	00001289 	.word	0x00001289
     df4:	00001289 	.word	0x00001289
     df8:	00001289 	.word	0x00001289
     dfc:	00001289 	.word	0x00001289
     e00:	00001289 	.word	0x00001289
     e04:	00001289 	.word	0x00001289
     e08:	00001289 	.word	0x00001289
     e0c:	00001289 	.word	0x00001289
     e10:	00001289 	.word	0x00001289
     e14:	00001289 	.word	0x00001289
     e18:	00001289 	.word	0x00001289
     e1c:	00001289 	.word	0x00001289
     e20:	00001289 	.word	0x00001289
     e24:	00001289 	.word	0x00001289
     e28:	00001289 	.word	0x00001289
     e2c:	00001289 	.word	0x00001289
     e30:	00000faf 	.word	0x00000faf
     e34:	00001289 	.word	0x00001289
     e38:	00001289 	.word	0x00001289
     e3c:	00001289 	.word	0x00001289
     e40:	00001289 	.word	0x00001289
     e44:	00001289 	.word	0x00001289
     e48:	00001289 	.word	0x00001289
     e4c:	00001289 	.word	0x00001289
     e50:	00001289 	.word	0x00001289
     e54:	00001289 	.word	0x00001289
     e58:	00001289 	.word	0x00001289
     e5c:	00000eb5 	.word	0x00000eb5
     e60:	000010db 	.word	0x000010db
     e64:	00001289 	.word	0x00001289
     e68:	00001213 	.word	0x00001213
     e6c:	00001289 	.word	0x00001289
     e70:	00001289 	.word	0x00001289
     e74:	000010db 	.word	0x000010db
     e78:	00001289 	.word	0x00001289
     e7c:	00001289 	.word	0x00001289
     e80:	00001289 	.word	0x00001289
     e84:	00001289 	.word	0x00001289
     e88:	00001289 	.word	0x00001289
     e8c:	00001289 	.word	0x00001289
     e90:	00001289 	.word	0x00001289
     e94:	00001289 	.word	0x00001289
     e98:	00001289 	.word	0x00001289
     e9c:	00000edb 	.word	0x00000edb
     ea0:	00001289 	.word	0x00001289
     ea4:	00001049 	.word	0x00001049
     ea8:	00001289 	.word	0x00001289
     eac:	00001289 	.word	0x00001289
     eb0:	00000fa9 	.word	0x00000fa9
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
     eb4:	687b      	ldr	r3, [r7, #4]
     eb6:	1d1a      	adds	r2, r3, #4
     eb8:	607a      	str	r2, [r7, #4]
     eba:	681b      	ldr	r3, [r3, #0]
     ebc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
     ec0:	68fb      	ldr	r3, [r7, #12]
     ec2:	2b00      	cmp	r3, #0
     ec4:	d005      	beq.n	ed2 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
     ec6:	68fb      	ldr	r3, [r7, #12]
     ec8:	1c5a      	adds	r2, r3, #1
     eca:	60fa      	str	r2, [r7, #12]
     ecc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
     ed0:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
     ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ed4:	3301      	adds	r3, #1
     ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     ed8:	e1e6      	b.n	12a8 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
     eda:	687b      	ldr	r3, [r7, #4]
     edc:	1d1a      	adds	r2, r3, #4
     ede:	607a      	str	r2, [r7, #4]
     ee0:	681b      	ldr	r3, [r3, #0]
     ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
     ee4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
     ee6:	f7ff fdb4 	bl	a52 <simple_strlen>
     eea:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
     eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     eee:	2b00      	cmp	r3, #0
     ef0:	dd2e      	ble.n	f50 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
     ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     ef6:	429a      	cmp	r2, r3
     ef8:	d22a      	bcs.n	f50 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     efa:	6bba      	ldr	r2, [r7, #56]	; 0x38
     efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     efe:	1ad3      	subs	r3, r2, r3
     f00:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     f02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     f06:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f08:	4619      	mov	r1, r3
     f0a:	68f8      	ldr	r0, [r7, #12]
     f0c:	f7ff fdbc 	bl	a88 <padbuffer>
     f10:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     f12:	68fb      	ldr	r3, [r7, #12]
     f14:	2b00      	cmp	r3, #0
     f16:	d001      	beq.n	f1c <am_util_stdio_vsprintf+0x24c>
     f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f1a:	e000      	b.n	f1e <am_util_stdio_vsprintf+0x24e>
     f1c:	2300      	movs	r3, #0
     f1e:	68fa      	ldr	r2, [r7, #12]
     f20:	4413      	add	r3, r2
     f22:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f28:	4413      	add	r3, r2
     f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     f2c:	2300      	movs	r3, #0
     f2e:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
     f30:	e00e      	b.n	f50 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
     f32:	68fb      	ldr	r3, [r7, #12]
     f34:	2b00      	cmp	r3, #0
     f36:	d005      	beq.n	f44 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
     f38:	68fb      	ldr	r3, [r7, #12]
     f3a:	1c5a      	adds	r2, r3, #1
     f3c:	60fa      	str	r2, [r7, #12]
     f3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     f40:	7812      	ldrb	r2, [r2, #0]
     f42:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
     f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f46:	3301      	adds	r3, #1
     f48:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
     f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f4c:	3301      	adds	r3, #1
     f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
     f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f52:	781b      	ldrb	r3, [r3, #0]
     f54:	2b00      	cmp	r3, #0
     f56:	d1ec      	bne.n	f32 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
     f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f5a:	2b00      	cmp	r3, #0
     f5c:	f000 81a1 	beq.w	12a2 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
     f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f62:	425b      	negs	r3, r3
     f64:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
     f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     f6a:	429a      	cmp	r2, r3
     f6c:	f080 8199 	bcs.w	12a2 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     f70:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f74:	1ad3      	subs	r3, r2, r3
     f76:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     f78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     f7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f7e:	4619      	mov	r1, r3
     f80:	68f8      	ldr	r0, [r7, #12]
     f82:	f7ff fd81 	bl	a88 <padbuffer>
     f86:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     f88:	68fb      	ldr	r3, [r7, #12]
     f8a:	2b00      	cmp	r3, #0
     f8c:	d001      	beq.n	f92 <am_util_stdio_vsprintf+0x2c2>
     f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f90:	e000      	b.n	f94 <am_util_stdio_vsprintf+0x2c4>
     f92:	2300      	movs	r3, #0
     f94:	68fa      	ldr	r2, [r7, #12]
     f96:	4413      	add	r3, r2
     f98:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f9e:	4413      	add	r3, r2
     fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     fa2:	2300      	movs	r3, #0
     fa4:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
     fa6:	e17c      	b.n	12a2 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
     fa8:	2301      	movs	r3, #1
     faa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     fae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     fb2:	2b00      	cmp	r3, #0
     fb4:	d00a      	beq.n	fcc <am_util_stdio_vsprintf+0x2fc>
     fb6:	687b      	ldr	r3, [r7, #4]
     fb8:	3307      	adds	r3, #7
     fba:	f023 0307 	bic.w	r3, r3, #7
     fbe:	f103 0208 	add.w	r2, r3, #8
     fc2:	607a      	str	r2, [r7, #4]
     fc4:	cb18      	ldmia	r3, {r3, r4}
     fc6:	e007      	b.n	fd8 <am_util_stdio_vsprintf+0x308>
     fc8:	10001100 	.word	0x10001100
                                      va_arg(pArgs, uint32_t);
     fcc:	687b      	ldr	r3, [r7, #4]
     fce:	1d1a      	adds	r2, r3, #4
     fd0:	607a      	str	r2, [r7, #4]
     fd2:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     fd4:	f04f 0400 	mov.w	r4, #0
     fd8:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
     fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fde:	2b00      	cmp	r3, #0
     fe0:	d01e      	beq.n	1020 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
     fe2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     fe6:	f7ff fc22 	bl	82e <ndigits_in_hex>
     fea:	4602      	mov	r2, r0
     fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fee:	1a9b      	subs	r3, r3, r2
     ff0:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     ff2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     ff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
     ff8:	4619      	mov	r1, r3
     ffa:	68f8      	ldr	r0, [r7, #12]
     ffc:	f7ff fd44 	bl	a88 <padbuffer>
    1000:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1002:	68fb      	ldr	r3, [r7, #12]
    1004:	2b00      	cmp	r3, #0
    1006:	d001      	beq.n	100c <am_util_stdio_vsprintf+0x33c>
    1008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    100a:	e000      	b.n	100e <am_util_stdio_vsprintf+0x33e>
    100c:	2300      	movs	r3, #0
    100e:	68fa      	ldr	r2, [r7, #12]
    1010:	4413      	add	r3, r2
    1012:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1016:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1018:	4413      	add	r3, r2
    101a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    101c:	2300      	movs	r3, #0
    101e:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    1020:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    1024:	68fa      	ldr	r2, [r7, #12]
    1026:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    102a:	f7ff fcb2 	bl	992 <uint64_to_hexstr>
    102e:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1030:	68fb      	ldr	r3, [r7, #12]
    1032:	2b00      	cmp	r3, #0
    1034:	d003      	beq.n	103e <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    1036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1038:	68fa      	ldr	r2, [r7, #12]
    103a:	4413      	add	r3, r2
    103c:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    103e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1040:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1042:	4413      	add	r3, r2
    1044:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1046:	e12f      	b.n	12a8 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1048:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    104c:	2b00      	cmp	r3, #0
    104e:	d008      	beq.n	1062 <am_util_stdio_vsprintf+0x392>
    1050:	687b      	ldr	r3, [r7, #4]
    1052:	3307      	adds	r3, #7
    1054:	f023 0307 	bic.w	r3, r3, #7
    1058:	f103 0208 	add.w	r2, r3, #8
    105c:	607a      	str	r2, [r7, #4]
    105e:	cb18      	ldmia	r3, {r3, r4}
    1060:	e005      	b.n	106e <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    1062:	687b      	ldr	r3, [r7, #4]
    1064:	1d1a      	adds	r2, r3, #4
    1066:	607a      	str	r2, [r7, #4]
    1068:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    106a:	f04f 0400 	mov.w	r4, #0
    106e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    1072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1074:	2b00      	cmp	r3, #0
    1076:	d01e      	beq.n	10b6 <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    1078:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    107c:	f7ff fb99 	bl	7b2 <ndigits_in_u64>
    1080:	4602      	mov	r2, r0
    1082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1084:	1a9b      	subs	r3, r3, r2
    1086:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1088:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    108c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    108e:	4619      	mov	r1, r3
    1090:	68f8      	ldr	r0, [r7, #12]
    1092:	f7ff fcf9 	bl	a88 <padbuffer>
    1096:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1098:	68fb      	ldr	r3, [r7, #12]
    109a:	2b00      	cmp	r3, #0
    109c:	d001      	beq.n	10a2 <am_util_stdio_vsprintf+0x3d2>
    109e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10a0:	e000      	b.n	10a4 <am_util_stdio_vsprintf+0x3d4>
    10a2:	2300      	movs	r3, #0
    10a4:	68fa      	ldr	r2, [r7, #12]
    10a6:	4413      	add	r3, r2
    10a8:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    10aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10ae:	4413      	add	r3, r2
    10b0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    10b2:	2300      	movs	r3, #0
    10b4:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    10b6:	68fa      	ldr	r2, [r7, #12]
    10b8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    10bc:	f7ff fc21 	bl	902 <uint64_to_str>
    10c0:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    10c2:	68fb      	ldr	r3, [r7, #12]
    10c4:	2b00      	cmp	r3, #0
    10c6:	d003      	beq.n	10d0 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    10c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10ca:	68fa      	ldr	r2, [r7, #12]
    10cc:	4413      	add	r3, r2
    10ce:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    10d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10d4:	4413      	add	r3, r2
    10d6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    10d8:	e0e6      	b.n	12a8 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    10da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    10de:	2b00      	cmp	r3, #0
    10e0:	d008      	beq.n	10f4 <am_util_stdio_vsprintf+0x424>
    10e2:	687b      	ldr	r3, [r7, #4]
    10e4:	3307      	adds	r3, #7
    10e6:	f023 0307 	bic.w	r3, r3, #7
    10ea:	f103 0208 	add.w	r2, r3, #8
    10ee:	607a      	str	r2, [r7, #4]
    10f0:	cb18      	ldmia	r3, {r3, r4}
    10f2:	e005      	b.n	1100 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    10f4:	687b      	ldr	r3, [r7, #4]
    10f6:	1d1a      	adds	r2, r3, #4
    10f8:	607a      	str	r2, [r7, #4]
    10fa:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    10fc:	ea4f 74e3 	mov.w	r4, r3, asr #31
    1100:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    1104:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1108:	2b00      	cmp	r3, #0
    110a:	f174 0300 	sbcs.w	r3, r4, #0
    110e:	da0a      	bge.n	1126 <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    1110:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1114:	425b      	negs	r3, r3
    1116:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    111a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    111e:	2301      	movs	r3, #1
    1120:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    1124:	e006      	b.n	1134 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    1126:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    112a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    112e:	2300      	movs	r3, #0
    1130:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    1134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1136:	2b00      	cmp	r3, #0
    1138:	d04a      	beq.n	11d0 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    113a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    113e:	4618      	mov	r0, r3
    1140:	4621      	mov	r1, r4
    1142:	f7ff fb57 	bl	7f4 <ndigits_in_i64>
    1146:	4602      	mov	r2, r0
    1148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    114a:	1a9b      	subs	r3, r3, r2
    114c:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    114e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1152:	2b00      	cmp	r3, #0
    1154:	d011      	beq.n	117a <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    1156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1158:	3b01      	subs	r3, #1
    115a:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    115c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1160:	2b30      	cmp	r3, #48	; 0x30
    1162:	d10a      	bne.n	117a <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    1164:	68fb      	ldr	r3, [r7, #12]
    1166:	2b00      	cmp	r3, #0
    1168:	d004      	beq.n	1174 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    116a:	68fb      	ldr	r3, [r7, #12]
    116c:	1c5a      	adds	r2, r3, #1
    116e:	60fa      	str	r2, [r7, #12]
    1170:	222d      	movs	r2, #45	; 0x2d
    1172:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    1174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1176:	3301      	adds	r3, #1
    1178:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    117a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    117e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1180:	4619      	mov	r1, r3
    1182:	68f8      	ldr	r0, [r7, #12]
    1184:	f7ff fc80 	bl	a88 <padbuffer>
    1188:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    118a:	68fb      	ldr	r3, [r7, #12]
    118c:	2b00      	cmp	r3, #0
    118e:	d001      	beq.n	1194 <am_util_stdio_vsprintf+0x4c4>
    1190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1192:	e000      	b.n	1196 <am_util_stdio_vsprintf+0x4c6>
    1194:	2300      	movs	r3, #0
    1196:	68fa      	ldr	r2, [r7, #12]
    1198:	4413      	add	r3, r2
    119a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    119c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    119e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    11a0:	4413      	add	r3, r2
    11a2:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    11a4:	2300      	movs	r3, #0
    11a6:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    11a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    11ac:	2b00      	cmp	r3, #0
    11ae:	d01e      	beq.n	11ee <am_util_stdio_vsprintf+0x51e>
    11b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    11b4:	2b20      	cmp	r3, #32
    11b6:	d11a      	bne.n	11ee <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    11b8:	68fb      	ldr	r3, [r7, #12]
    11ba:	2b00      	cmp	r3, #0
    11bc:	d004      	beq.n	11c8 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    11be:	68fb      	ldr	r3, [r7, #12]
    11c0:	1c5a      	adds	r2, r3, #1
    11c2:	60fa      	str	r2, [r7, #12]
    11c4:	222d      	movs	r2, #45	; 0x2d
    11c6:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    11c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11ca:	3301      	adds	r3, #1
    11cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    11ce:	e00e      	b.n	11ee <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    11d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    11d4:	2b00      	cmp	r3, #0
    11d6:	d00a      	beq.n	11ee <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	2b00      	cmp	r3, #0
    11dc:	d004      	beq.n	11e8 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    11de:	68fb      	ldr	r3, [r7, #12]
    11e0:	1c5a      	adds	r2, r3, #1
    11e2:	60fa      	str	r2, [r7, #12]
    11e4:	222d      	movs	r2, #45	; 0x2d
    11e6:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    11e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11ea:	3301      	adds	r3, #1
    11ec:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    11ee:	68fa      	ldr	r2, [r7, #12]
    11f0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    11f4:	f7ff fb85 	bl	902 <uint64_to_str>
    11f8:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    11fa:	68fb      	ldr	r3, [r7, #12]
    11fc:	2b00      	cmp	r3, #0
    11fe:	d003      	beq.n	1208 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    1200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1202:	68fa      	ldr	r2, [r7, #12]
    1204:	4413      	add	r3, r2
    1206:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    120a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    120c:	4413      	add	r3, r2
    120e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1210:	e04a      	b.n	12a8 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    1212:	68fb      	ldr	r3, [r7, #12]
    1214:	2b00      	cmp	r3, #0
    1216:	d046      	beq.n	12a6 <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    1218:	687b      	ldr	r3, [r7, #4]
    121a:	3307      	adds	r3, #7
    121c:	f023 0307 	bic.w	r3, r3, #7
    1220:	f103 0208 	add.w	r2, r3, #8
    1224:	607a      	str	r2, [r7, #4]
    1226:	cb18      	ldmia	r3, {r3, r4}
    1228:	4618      	mov	r0, r3
    122a:	4621      	mov	r1, r4
    122c:	f7fe ff48 	bl	c0 <__aeabi_d2f>
    1230:	4603      	mov	r3, r0
    1232:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    1234:	68fb      	ldr	r3, [r7, #12]
    1236:	2214      	movs	r2, #20
    1238:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    123a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    123c:	68f9      	ldr	r1, [r7, #12]
    123e:	6978      	ldr	r0, [r7, #20]
    1240:	f7ff fc48 	bl	ad4 <ftoa>
    1244:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    1246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1248:	2b00      	cmp	r3, #0
    124a:	da14      	bge.n	1276 <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    124c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    124e:	f1b3 3fff 	cmp.w	r3, #4294967295
    1252:	d102      	bne.n	125a <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    1254:	4b1e      	ldr	r3, [pc, #120]	; (12d0 <am_util_stdio_vsprintf+0x600>)
    1256:	62bb      	str	r3, [r7, #40]	; 0x28
    1258:	e008      	b.n	126c <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    125a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    125c:	f113 0f02 	cmn.w	r3, #2
    1260:	d102      	bne.n	1268 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    1262:	4b1c      	ldr	r3, [pc, #112]	; (12d4 <am_util_stdio_vsprintf+0x604>)
    1264:	62bb      	str	r3, [r7, #40]	; 0x28
    1266:	e001      	b.n	126c <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    1268:	4b1b      	ldr	r3, [pc, #108]	; (12d8 <am_util_stdio_vsprintf+0x608>)
    126a:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1270:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    1272:	2303      	movs	r3, #3
    1274:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    1276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1278:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    127a:	4413      	add	r3, r2
    127c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    127e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1280:	68fa      	ldr	r2, [r7, #12]
    1282:	4413      	add	r3, r2
    1284:	60fb      	str	r3, [r7, #12]
                }
                break;
    1286:	e00e      	b.n	12a6 <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    1288:	68fb      	ldr	r3, [r7, #12]
    128a:	2b00      	cmp	r3, #0
    128c:	d005      	beq.n	129a <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    128e:	68fb      	ldr	r3, [r7, #12]
    1290:	1c5a      	adds	r2, r3, #1
    1292:	60fa      	str	r2, [r7, #12]
    1294:	68ba      	ldr	r2, [r7, #8]
    1296:	7812      	ldrb	r2, [r2, #0]
    1298:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    129a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    129c:	3301      	adds	r3, #1
    129e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    12a0:	e002      	b.n	12a8 <am_util_stdio_vsprintf+0x5d8>
                break;
    12a2:	bf00      	nop
    12a4:	e000      	b.n	12a8 <am_util_stdio_vsprintf+0x5d8>
                break;
    12a6:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    12a8:	68bb      	ldr	r3, [r7, #8]
    12aa:	3301      	adds	r3, #1
    12ac:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    12ae:	68bb      	ldr	r3, [r7, #8]
    12b0:	781b      	ldrb	r3, [r3, #0]
    12b2:	2b00      	cmp	r3, #0
    12b4:	f47f ad17 	bne.w	ce6 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    12b8:	68fb      	ldr	r3, [r7, #12]
    12ba:	2b00      	cmp	r3, #0
    12bc:	d002      	beq.n	12c4 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    12be:	68fb      	ldr	r3, [r7, #12]
    12c0:	2200      	movs	r2, #0
    12c2:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    12c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    12c6:	4618      	mov	r0, r3
    12c8:	3754      	adds	r7, #84	; 0x54
    12ca:	46bd      	mov	sp, r7
    12cc:	bd90      	pop	{r4, r7, pc}
    12ce:	bf00      	nop
    12d0:	00302e30 	.word	0x00302e30
    12d4:	00232e23 	.word	0x00232e23
    12d8:	003f2e3f 	.word	0x003f2e3f

000012dc <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    12dc:	b40f      	push	{r0, r1, r2, r3}
    12de:	b580      	push	{r7, lr}
    12e0:	b082      	sub	sp, #8
    12e2:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    12e4:	f107 0314 	add.w	r3, r7, #20
    12e8:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    12ea:	683a      	ldr	r2, [r7, #0]
    12ec:	6939      	ldr	r1, [r7, #16]
    12ee:	4808      	ldr	r0, [pc, #32]	; (1310 <am_util_stdio_printf+0x34>)
    12f0:	f7ff fcee 	bl	cd0 <am_util_stdio_vsprintf>
    12f4:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    12f6:	4b07      	ldr	r3, [pc, #28]	; (1314 <am_util_stdio_printf+0x38>)
    12f8:	681b      	ldr	r3, [r3, #0]
    12fa:	4805      	ldr	r0, [pc, #20]	; (1310 <am_util_stdio_printf+0x34>)
    12fc:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    12fe:	687b      	ldr	r3, [r7, #4]
}
    1300:	4618      	mov	r0, r3
    1302:	3708      	adds	r7, #8
    1304:	46bd      	mov	sp, r7
    1306:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    130a:	b004      	add	sp, #16
    130c:	4770      	bx	lr
    130e:	bf00      	nop
    1310:	10001000 	.word	0x10001000
    1314:	10001114 	.word	0x10001114

00001318 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    1318:	b580      	push	{r7, lr}
    131a:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    131c:	4802      	ldr	r0, [pc, #8]	; (1328 <am_util_stdio_terminal_clear+0x10>)
    131e:	f7ff ffdd 	bl	12dc <am_util_stdio_printf>
}
    1322:	bf00      	nop
    1324:	bd80      	pop	{r7, pc}
    1326:	bf00      	nop
    1328:	00001f40 	.word	0x00001f40

0000132c <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    132c:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    132e:	f000 fb41 	bl	19b4 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    1332:	f000 fbad 	bl	1a90 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    1336:	f000 fccd 	bl	1cd4 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    133a:	2001      	movs	r0, #1
    133c:	f000 fbb8 	bl	1ab0 <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1340:	2001      	movs	r0, #1
    1342:	f000 f939 	bl	15b8 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    1346:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    134a:	f000 bbbf 	b.w	1acc <am_hal_rtc_osc_disable>
    134e:	bf00      	nop

00001350 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    1350:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1352:	4b17      	ldr	r3, [pc, #92]	; (13b0 <am_bsp_debug_printf_enable+0x60>)
    1354:	681c      	ldr	r4, [r3, #0]
    1356:	f014 0401 	ands.w	r4, r4, #1
{
    135a:	b087      	sub	sp, #28
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    135c:	d001      	beq.n	1362 <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    135e:	b007      	add	sp, #28
    1360:	bd30      	pop	{r4, r5, pc}
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1362:	4a14      	ldr	r2, [pc, #80]	; (13b4 <am_bsp_debug_printf_enable+0x64>)
    1364:	4914      	ldr	r1, [pc, #80]	; (13b8 <am_bsp_debug_printf_enable+0x68>)
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    1366:	4d15      	ldr	r5, [pc, #84]	; (13bc <am_bsp_debug_printf_enable+0x6c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1368:	6011      	str	r1, [r2, #0]
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    136a:	a806      	add	r0, sp, #24
    136c:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    1370:	f000 fc52 	bl	1c18 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    1374:	f000 f930 	bl	15d8 <am_hal_interrupt_master_disable>
    1378:	4a11      	ldr	r2, [pc, #68]	; (13c0 <am_bsp_debug_printf_enable+0x70>)
    137a:	9000      	str	r0, [sp, #0]
    137c:	4d11      	ldr	r5, [pc, #68]	; (13c4 <am_bsp_debug_printf_enable+0x74>)
    137e:	4912      	ldr	r1, [pc, #72]	; (13c8 <am_bsp_debug_printf_enable+0x78>)
    1380:	2073      	movs	r0, #115	; 0x73
    1382:	6010      	str	r0, [r2, #0]
    1384:	682b      	ldr	r3, [r5, #0]
    1386:	4811      	ldr	r0, [pc, #68]	; (13cc <am_bsp_debug_printf_enable+0x7c>)
    1388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    138c:	602b      	str	r3, [r5, #0]
    138e:	6805      	ldr	r5, [r0, #0]
    1390:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    1394:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    1398:	6003      	str	r3, [r0, #0]
    139a:	6808      	ldr	r0, [r1, #0]
    139c:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    13a0:	600d      	str	r5, [r1, #0]
    13a2:	6014      	str	r4, [r2, #0]
    13a4:	9800      	ldr	r0, [sp, #0]
    13a6:	f000 f91b 	bl	15e0 <am_hal_interrupt_master_set>
}
    13aa:	b007      	add	sp, #28
    13ac:	bd30      	pop	{r4, r5, pc}
    13ae:	bf00      	nop
    13b0:	10001104 	.word	0x10001104
    13b4:	e0000e80 	.word	0xe0000e80
    13b8:	00150511 	.word	0x00150511
    13bc:	000f4240 	.word	0x000f4240
    13c0:	40010060 	.word	0x40010060
    13c4:	40010054 	.word	0x40010054
    13c8:	40010108 	.word	0x40010108
    13cc:	40010028 	.word	0x40010028

000013d0 <am_bsp_debug_printf_disable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    13d0:	b530      	push	{r4, r5, lr}
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    13d2:	4b14      	ldr	r3, [pc, #80]	; (1424 <am_bsp_debug_printf_disable+0x54>)
    13d4:	681c      	ldr	r4, [r3, #0]
    13d6:	f014 0401 	ands.w	r4, r4, #1
{
    13da:	b083      	sub	sp, #12
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    13dc:	d120      	bne.n	1420 <am_bsp_debug_printf_disable+0x50>
    }

    //
    // Disable the TPIU
    //
    am_hal_itm_not_busy();
    13de:	f000 f92f 	bl	1640 <am_hal_itm_not_busy>
    am_hal_gpio_pin_config(AM_BSP_GPIO_ITM_SWO, AM_HAL_GPIO_OUTPUT);
    13e2:	f000 f8f9 	bl	15d8 <am_hal_interrupt_master_disable>
    13e6:	4a10      	ldr	r2, [pc, #64]	; (1428 <am_bsp_debug_printf_disable+0x58>)
    13e8:	9001      	str	r0, [sp, #4]
    13ea:	4d10      	ldr	r5, [pc, #64]	; (142c <am_bsp_debug_printf_disable+0x5c>)
    13ec:	4910      	ldr	r1, [pc, #64]	; (1430 <am_bsp_debug_printf_disable+0x60>)
    13ee:	2073      	movs	r0, #115	; 0x73
    13f0:	6010      	str	r0, [r2, #0]
    13f2:	682b      	ldr	r3, [r5, #0]
    13f4:	480f      	ldr	r0, [pc, #60]	; (1434 <am_bsp_debug_printf_disable+0x64>)
    13f6:	f023 0c70 	bic.w	ip, r3, #112	; 0x70
    13fa:	f04c 0320 	orr.w	r3, ip, #32
    13fe:	602b      	str	r3, [r5, #0]
    1400:	6805      	ldr	r5, [r0, #0]
    1402:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    1406:	f44c 53c0 	orr.w	r3, ip, #6144	; 0x1800
    140a:	6003      	str	r3, [r0, #0]
    140c:	6808      	ldr	r0, [r1, #0]
    140e:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    1412:	600d      	str	r5, [r1, #0]
    1414:	6014      	str	r4, [r2, #0]
    1416:	9801      	ldr	r0, [sp, #4]
    1418:	f000 f8e2 	bl	15e0 <am_hal_interrupt_master_set>
    am_hal_tpiu_disable();
    141c:	f000 fc54 	bl	1cc8 <am_hal_tpiu_disable>
}
    1420:	b003      	add	sp, #12
    1422:	bd30      	pop	{r4, r5, pc}
    1424:	10001104 	.word	0x10001104
    1428:	40010060 	.word	0x40010060
    142c:	40010054 	.word	0x40010054
    1430:	40010108 	.word	0x40010108
    1434:	40010028 	.word	0x40010028

00001438 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    1438:	f000 b90c 	b.w	1654 <am_hal_itm_print>

0000143c <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    143c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    143e:	4605      	mov	r5, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1440:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    1444:	78ab      	ldrb	r3, [r5, #2]
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    1446:	786c      	ldrb	r4, [r5, #1]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1448:	78ef      	ldrb	r7, [r5, #3]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    144a:	792e      	ldrb	r6, [r5, #4]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    144c:	79a9      	ldrb	r1, [r5, #6]
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    144e:	009a      	lsls	r2, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    1450:	0064      	lsls	r4, r4, #1
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    1452:	f002 0204 	and.w	r2, r2, #4
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    1456:	f004 0402 	and.w	r4, r4, #2
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    145a:	4314      	orrs	r4, r2
    145c:	f047 0701 	orr.w	r7, r7, #1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    1460:	79ea      	ldrb	r2, [r5, #7]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    1462:	01f6      	lsls	r6, r6, #7
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1464:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    1466:	b2f6      	uxtb	r6, r6
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    1468:	7a2f      	ldrb	r7, [r5, #8]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    146a:	0289      	lsls	r1, r1, #10
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    146c:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    146e:	f401 6180 	and.w	r1, r1, #1024	; 0x400
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    1472:	7a6e      	ldrb	r6, [r5, #9]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    1474:	02d2      	lsls	r2, r2, #11
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1476:	430c      	orrs	r4, r1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    1478:	f402 6200 	and.w	r2, r2, #2048	; 0x800
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    147c:	7aa9      	ldrb	r1, [r5, #10]
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    147e:	033f      	lsls	r7, r7, #12
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1480:	4314      	orrs	r4, r2
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    1482:	b2bf      	uxth	r7, r7
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    1484:	0436      	lsls	r6, r6, #16
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    1486:	7aea      	ldrb	r2, [r5, #11]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1488:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    148a:	0509      	lsls	r1, r1, #20
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    148c:	f406 2770 	and.w	r7, r6, #983040	; 0xf0000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    1490:	0612      	lsls	r2, r2, #24
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1492:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    1494:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    1498:	009b      	lsls	r3, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    149a:	f002 7780 	and.w	r7, r2, #16777216	; 0x1000000
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    149e:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    14a0:	f003 0108 	and.w	r1, r3, #8
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    14a4:	433c      	orrs	r4, r7
    14a6:	430c      	orrs	r4, r1
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    14a8:	f000 f97e 	bl	17a8 <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    14ac:	482c      	ldr	r0, [pc, #176]	; (1560 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    14ae:	4b2d      	ldr	r3, [pc, #180]	; (1564 <am_hal_cachectrl_enable+0x128>)
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    14b0:	6004      	str	r4, [r0, #0]
    14b2:	2232      	movs	r2, #50	; 0x32
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    14b4:	681e      	ldr	r6, [r3, #0]
    14b6:	0777      	lsls	r7, r6, #29
    14b8:	d41e      	bmi.n	14f8 <am_hal_cachectrl_enable+0xbc>
    14ba:	681f      	ldr	r7, [r3, #0]
    14bc:	077e      	lsls	r6, r7, #29
    14be:	f102 32ff 	add.w	r2, r2, #4294967295
    14c2:	d419      	bmi.n	14f8 <am_hal_cachectrl_enable+0xbc>
    14c4:	6819      	ldr	r1, [r3, #0]
    14c6:	074f      	lsls	r7, r1, #29
    14c8:	d416      	bmi.n	14f8 <am_hal_cachectrl_enable+0xbc>
    14ca:	6818      	ldr	r0, [r3, #0]
    14cc:	0746      	lsls	r6, r0, #29
    14ce:	d413      	bmi.n	14f8 <am_hal_cachectrl_enable+0xbc>
    14d0:	681e      	ldr	r6, [r3, #0]
    14d2:	0770      	lsls	r0, r6, #29
    14d4:	d410      	bmi.n	14f8 <am_hal_cachectrl_enable+0xbc>
    14d6:	681f      	ldr	r7, [r3, #0]
    14d8:	0779      	lsls	r1, r7, #29
    14da:	d40d      	bmi.n	14f8 <am_hal_cachectrl_enable+0xbc>
    14dc:	6819      	ldr	r1, [r3, #0]
    14de:	074f      	lsls	r7, r1, #29
    14e0:	d40a      	bmi.n	14f8 <am_hal_cachectrl_enable+0xbc>
    14e2:	6818      	ldr	r0, [r3, #0]
    14e4:	0746      	lsls	r6, r0, #29
    14e6:	d407      	bmi.n	14f8 <am_hal_cachectrl_enable+0xbc>
    14e8:	681e      	ldr	r6, [r3, #0]
    14ea:	0770      	lsls	r0, r6, #29
    14ec:	d404      	bmi.n	14f8 <am_hal_cachectrl_enable+0xbc>
    14ee:	681f      	ldr	r7, [r3, #0]
    14f0:	0779      	lsls	r1, r7, #29
    14f2:	d401      	bmi.n	14f8 <am_hal_cachectrl_enable+0xbc>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    14f4:	3a09      	subs	r2, #9
    14f6:	d1dd      	bne.n	14b4 <am_hal_cachectrl_enable+0x78>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    14f8:	4b1a      	ldr	r3, [pc, #104]	; (1564 <am_hal_cachectrl_enable+0x128>)
    14fa:	681a      	ldr	r2, [r3, #0]
    14fc:	f042 0101 	orr.w	r1, r2, #1
    1500:	6019      	str	r1, [r3, #0]
    1502:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1504:	6818      	ldr	r0, [r3, #0]
    1506:	0740      	lsls	r0, r0, #29
    1508:	d41e      	bmi.n	1548 <am_hal_cachectrl_enable+0x10c>
    150a:	681e      	ldr	r6, [r3, #0]
    150c:	0771      	lsls	r1, r6, #29
    150e:	f102 32ff 	add.w	r2, r2, #4294967295
    1512:	d419      	bmi.n	1548 <am_hal_cachectrl_enable+0x10c>
    1514:	681f      	ldr	r7, [r3, #0]
    1516:	077f      	lsls	r7, r7, #29
    1518:	d416      	bmi.n	1548 <am_hal_cachectrl_enable+0x10c>
    151a:	6819      	ldr	r1, [r3, #0]
    151c:	074e      	lsls	r6, r1, #29
    151e:	d413      	bmi.n	1548 <am_hal_cachectrl_enable+0x10c>
    1520:	6818      	ldr	r0, [r3, #0]
    1522:	0740      	lsls	r0, r0, #29
    1524:	d410      	bmi.n	1548 <am_hal_cachectrl_enable+0x10c>
    1526:	681e      	ldr	r6, [r3, #0]
    1528:	0771      	lsls	r1, r6, #29
    152a:	d40d      	bmi.n	1548 <am_hal_cachectrl_enable+0x10c>
    152c:	681f      	ldr	r7, [r3, #0]
    152e:	077f      	lsls	r7, r7, #29
    1530:	d40a      	bmi.n	1548 <am_hal_cachectrl_enable+0x10c>
    1532:	6819      	ldr	r1, [r3, #0]
    1534:	074e      	lsls	r6, r1, #29
    1536:	d407      	bmi.n	1548 <am_hal_cachectrl_enable+0x10c>
    1538:	6818      	ldr	r0, [r3, #0]
    153a:	0740      	lsls	r0, r0, #29
    153c:	d404      	bmi.n	1548 <am_hal_cachectrl_enable+0x10c>
    153e:	681e      	ldr	r6, [r3, #0]
    1540:	0771      	lsls	r1, r6, #29
    1542:	d401      	bmi.n	1548 <am_hal_cachectrl_enable+0x10c>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    1544:	3a09      	subs	r2, #9
    1546:	d1dd      	bne.n	1504 <am_hal_cachectrl_enable+0xc8>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1548:	796d      	ldrb	r5, [r5, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    154a:	4f05      	ldr	r7, [pc, #20]	; (1560 <am_hal_cachectrl_enable+0x124>)
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );
    154c:	022b      	lsls	r3, r5, #8
    154e:	f403 7100 	and.w	r1, r3, #512	; 0x200
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1552:	f403 7280 	and.w	r2, r3, #256	; 0x100
    1556:	4311      	orrs	r1, r2
    1558:	430c      	orrs	r4, r1
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    155a:	603c      	str	r4, [r7, #0]
    155c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    155e:	bf00      	nop
    1560:	40018000 	.word	0x40018000
    1564:	40018008 	.word	0x40018008

00001568 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    1568:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    156a:	4604      	mov	r4, r0
    156c:	b120      	cbz	r0, 1578 <am_hal_clkgen_sysclk_select+0x10>
    156e:	4a06      	ldr	r2, [pc, #24]	; (1588 <am_hal_clkgen_sysclk_select+0x20>)
    1570:	4806      	ldr	r0, [pc, #24]	; (158c <am_hal_clkgen_sysclk_select+0x24>)
    1572:	2153      	movs	r1, #83	; 0x53
    1574:	f000 f82a 	bl	15cc <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1578:	4b05      	ldr	r3, [pc, #20]	; (1590 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the required operating value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    157a:	4906      	ldr	r1, [pc, #24]	; (1594 <am_hal_clkgen_sysclk_select+0x2c>)
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    157c:	2047      	movs	r0, #71	; 0x47

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    157e:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1580:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1582:	600c      	str	r4, [r1, #0]
    AM_REG(CLKGEN, CLKKEY) = 0;
    1584:	601a      	str	r2, [r3, #0]
    1586:	bd10      	pop	{r4, pc}
    1588:	00001f98 	.word	0x00001f98
    158c:	00001fd0 	.word	0x00001fd0
    1590:	40004014 	.word	0x40004014
    1594:	40004018 	.word	0x40004018

00001598 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1598:	4b04      	ldr	r3, [pc, #16]	; (15ac <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    159a:	4905      	ldr	r1, [pc, #20]	; (15b0 <am_hal_clkgen_sysclk_get+0x18>)
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    159c:	681a      	ldr	r2, [r3, #0]
            return 48000000;
    159e:	4805      	ldr	r0, [pc, #20]	; (15b4 <am_hal_clkgen_sysclk_get+0x1c>)
    switch ( ui32ClockSetting )
    15a0:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    15a4:	bf08      	it	eq
    15a6:	4608      	moveq	r0, r1
    15a8:	4770      	bx	lr
    15aa:	bf00      	nop
    15ac:	40004018 	.word	0x40004018
    15b0:	02dc6c00 	.word	0x02dc6c00
    15b4:	016e3600 	.word	0x016e3600

000015b8 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    15b8:	0783      	lsls	r3, r0, #30
    15ba:	d003      	beq.n	15c4 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    15bc:	4b02      	ldr	r3, [pc, #8]	; (15c8 <am_hal_clkgen_osc_stop+0x10>)
    15be:	681a      	ldr	r2, [r3, #0]
    15c0:	4310      	orrs	r0, r2
    15c2:	6018      	str	r0, [r3, #0]
    15c4:	4770      	bx	lr
    15c6:	bf00      	nop
    15c8:	4000400c 	.word	0x4000400c

000015cc <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    15cc:	e7fe      	b.n	15cc <am_hal_debug_error>
    15ce:	bf00      	nop

000015d0 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    15d0:	4b00      	ldr	r3, [pc, #0]	; (15d4 <am_hal_flash_delay+0x4>)
    15d2:	4718      	bx	r3
    15d4:	0800009d 	.word	0x0800009d

000015d8 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    15d8:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    15dc:	b672      	cpsid	i
    __asm("    bx lr");
    15de:	4770      	bx	lr

000015e0 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    15e0:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    15e4:	4770      	bx	lr
    15e6:	bf00      	nop

000015e8 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    15e8:	4b0d      	ldr	r3, [pc, #52]	; (1620 <am_hal_itm_enable+0x38>)
    15ea:	6818      	ldr	r0, [r3, #0]
    15ec:	07c2      	lsls	r2, r0, #31
    15ee:	d416      	bmi.n	161e <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    15f0:	4a0c      	ldr	r2, [pc, #48]	; (1624 <am_hal_itm_enable+0x3c>)
    15f2:	6811      	ldr	r1, [r2, #0]
{
    15f4:	b430      	push	{r4, r5}
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    15f6:	f041 7480 	orr.w	r4, r1, #16777216	; 0x1000000
    15fa:	6014      	str	r4, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    15fc:	6815      	ldr	r5, [r2, #0]
    15fe:	01eb      	lsls	r3, r5, #7
    1600:	d5fc      	bpl.n	15fc <am_hal_itm_enable+0x14>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    1602:	4809      	ldr	r0, [pc, #36]	; (1628 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    1604:	4c09      	ldr	r4, [pc, #36]	; (162c <am_hal_itm_enable+0x44>)
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    1606:	4d0a      	ldr	r5, [pc, #40]	; (1630 <am_hal_itm_enable+0x48>)
    1608:	6005      	str	r5, [r0, #0]
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    160a:	250f      	movs	r5, #15
    160c:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    160e:	bc30      	pop	{r4, r5}
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1610:	4908      	ldr	r1, [pc, #32]	; (1634 <am_hal_itm_enable+0x4c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1612:	4b09      	ldr	r3, [pc, #36]	; (1638 <am_hal_itm_enable+0x50>)
    1614:	4a09      	ldr	r2, [pc, #36]	; (163c <am_hal_itm_enable+0x54>)
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1616:	f04f 30ff 	mov.w	r0, #4294967295
    161a:	6008      	str	r0, [r1, #0]
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    161c:	601a      	str	r2, [r3, #0]
}
    161e:	4770      	bx	lr
    1620:	10001104 	.word	0x10001104
    1624:	e000edfc 	.word	0xe000edfc
    1628:	e0000fb0 	.word	0xe0000fb0
    162c:	e0000e40 	.word	0xe0000e40
    1630:	c5acce55 	.word	0xc5acce55
    1634:	e0000e00 	.word	0xe0000e00
    1638:	e0000e80 	.word	0xe0000e80
    163c:	00150511 	.word	0x00150511

00001640 <am_hal_itm_not_busy>:
am_hal_itm_not_busy(void)
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
    while (AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1));
    1640:	4a03      	ldr	r2, [pc, #12]	; (1650 <am_hal_itm_not_busy+0x10>)
    1642:	6813      	ldr	r3, [r2, #0]
    1644:	021b      	lsls	r3, r3, #8
    1646:	d4fc      	bmi.n	1642 <am_hal_itm_not_busy+0x2>

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1648:	f44f 7047 	mov.w	r0, #796	; 0x31c
    164c:	f7ff bfc0 	b.w	15d0 <am_hal_flash_delay>
    1650:	e0000e80 	.word	0xe0000e80

00001654 <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1654:	7803      	ldrb	r3, [r0, #0]
    1656:	b1b3      	cbz	r3, 1686 <am_hal_itm_print+0x32>
{
    1658:	b410      	push	{r4}
    165a:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    165c:	2400      	movs	r4, #0
    165e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    1662:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    1664:	2900      	cmp	r1, #0
    1666:	d1fa      	bne.n	165e <am_hal_itm_print+0xa>
    1668:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    166a:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    166e:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    1672:	f8dc 3000 	ldr.w	r3, [ip]
    1676:	2b00      	cmp	r3, #0
    1678:	d0fb      	beq.n	1672 <am_hal_itm_print+0x1e>
    while (ui32Length)
    167a:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    167c:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    1680:	d1f5      	bne.n	166e <am_hal_itm_print+0x1a>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    1682:	f85d 4b04 	ldr.w	r4, [sp], #4
    1686:	4770      	bx	lr

00001688 <am_hal_mcuctrl_device_info_get>:
am_hal_mcuctrl_device_info_get(am_hal_mcuctrl_device_t *psDevice)
{
    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    1688:	4b29      	ldr	r3, [pc, #164]	; (1730 <am_hal_mcuctrl_device_info_get+0xa8>)

    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
        g_am_hal_mcuctrl_flash_size[
    168a:	4a2a      	ldr	r2, [pc, #168]	; (1734 <am_hal_mcuctrl_device_info_get+0xac>)
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    168c:	681b      	ldr	r3, [r3, #0]
    168e:	6003      	str	r3, [r0, #0]
{
    1690:	b4f0      	push	{r4, r5, r6, r7}
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    1692:	4f29      	ldr	r7, [pc, #164]	; (1738 <am_hal_mcuctrl_device_info_get+0xb0>)
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    1694:	4e29      	ldr	r6, [pc, #164]	; (173c <am_hal_mcuctrl_device_info_get+0xb4>)
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    1696:	683f      	ldr	r7, [r7, #0]
    1698:	6047      	str	r7, [r0, #4]
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    169a:	6836      	ldr	r6, [r6, #0]
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    169c:	4c28      	ldr	r4, [pc, #160]	; (1740 <am_hal_mcuctrl_device_info_get+0xb8>)
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    169e:	6086      	str	r6, [r0, #8]
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    16a0:	6824      	ldr	r4, [r4, #0]
    psDevice->ui32VendorID = AM_REG(MCUCTRL, VENDORID);
    16a2:	4d28      	ldr	r5, [pc, #160]	; (1744 <am_hal_mcuctrl_device_info_get+0xbc>)
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    16a4:	60c4      	str	r4, [r0, #12]
            (psDevice->ui32ChipPN & AM_HAL_MCUCTRL_CHIP_INFO_FLASH_SIZE_M) >>
    16a6:	f3c3 5703 	ubfx	r7, r3, #20, #4
    //
    // SRAM size from Part Number.
    //
    psDevice->ui32SRAMSize =
        g_am_hal_mcuctrl_sram_size[
            (psDevice->ui32ChipPN & AM_HAL_MCUCTRL_CHIP_INFO_SRAM_SIZE_M) >>
    16aa:	f3c3 4c03 	ubfx	ip, r3, #16, #4
    psDevice->ui32VendorID = AM_REG(MCUCTRL, VENDORID);
    16ae:	682d      	ldr	r5, [r5, #0]
    // Bits [7:4] are 0xE for Apollo, 0xD for Apollo2.
    // Bits [3:0] are defined differently for Apollo and Apollo2.
    //   For Apollo, the low nibble is 0x0.
    //   For Apollo2, the low nibble indicates flash and SRAM size.
    //
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    16b0:	4925      	ldr	r1, [pc, #148]	; (1748 <am_hal_mcuctrl_device_info_get+0xc0>)
    psDevice->ui32FlashSize =
    16b2:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
    psDevice->ui32SRAMSize =
    16b6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
    psDevice->ui32VendorID = AM_REG(MCUCTRL, VENDORID);
    16ba:	6105      	str	r5, [r0, #16]
            (psDevice->ui32ChipPN & AM_HAL_MCUCTRL_CHIP_INFO_QUAL_M) >>
    16bc:	f003 0301 	and.w	r3, r3, #1
    psDevice->ui32FlashSize =
    16c0:	6186      	str	r6, [r0, #24]
    psDevice->ui32SRAMSize =
    16c2:	61c2      	str	r2, [r0, #28]
    psDevice->ui32Qualified =
    16c4:	6143      	str	r3, [r0, #20]
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    16c6:	680c      	ldr	r4, [r1, #0]
    psDevice->ui32JedecPN |= (AM_BFR(JEDEC, PID1, PNH4) << 8);
    16c8:	4f20      	ldr	r7, [pc, #128]	; (174c <am_hal_mcuctrl_device_info_get+0xc4>)

    //
    // CHIPREV is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    psDevice->ui32JedecCHIPREV |= (AM_BFR(JEDEC, PID3, CHIPREVL4) << 0);
    16ca:	4e21      	ldr	r6, [pc, #132]	; (1750 <am_hal_mcuctrl_device_info_get+0xc8>)

    //
    // Let's get the Coresight ID (32-bits across 4 registers)
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    16cc:	4a21      	ldr	r2, [pc, #132]	; (1754 <am_hal_mcuctrl_device_info_get+0xcc>)
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID2, CID) << 16);
    16ce:	4d22      	ldr	r5, [pc, #136]	; (1758 <am_hal_mcuctrl_device_info_get+0xd0>)
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    16d0:	b2e4      	uxtb	r4, r4
    16d2:	6204      	str	r4, [r0, #32]
    psDevice->ui32JedecPN |= (AM_BFR(JEDEC, PID1, PNH4) << 8);
    16d4:	683b      	ldr	r3, [r7, #0]
    16d6:	021b      	lsls	r3, r3, #8
    16d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    16dc:	4323      	orrs	r3, r4
    16de:	6203      	str	r3, [r0, #32]
    psDevice->ui32JedecJEPID  = (AM_BFR(JEDEC, PID1, JEPIDL) << 0);
    16e0:	683f      	ldr	r7, [r7, #0]
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID1, CID) <<  8);
    16e2:	4c1e      	ldr	r4, [pc, #120]	; (175c <am_hal_mcuctrl_device_info_get+0xd4>)
    psDevice->ui32JedecJEPID  = (AM_BFR(JEDEC, PID1, JEPIDL) << 0);
    16e4:	f3c7 1703 	ubfx	r7, r7, #4, #4
    16e8:	6247      	str	r7, [r0, #36]	; 0x24
    psDevice->ui32JedecJEPID |= (AM_BFR(JEDEC, PID2, JEPIDH) << 4);
    16ea:	688b      	ldr	r3, [r1, #8]
    16ec:	011b      	lsls	r3, r3, #4
    16ee:	b2db      	uxtb	r3, r3
    16f0:	433b      	orrs	r3, r7
    16f2:	6243      	str	r3, [r0, #36]	; 0x24
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    16f4:	688f      	ldr	r7, [r1, #8]
    16f6:	f007 07f0 	and.w	r7, r7, #240	; 0xf0
    16fa:	6287      	str	r7, [r0, #40]	; 0x28
    psDevice->ui32JedecCHIPREV |= (AM_BFR(JEDEC, PID3, CHIPREVL4) << 0);
    16fc:	6836      	ldr	r6, [r6, #0]
    16fe:	f3c6 1303 	ubfx	r3, r6, #4, #4
    1702:	433b      	orrs	r3, r7
    1704:	6283      	str	r3, [r0, #40]	; 0x28
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    1706:	6812      	ldr	r2, [r2, #0]
    1708:	0617      	lsls	r7, r2, #24
    170a:	62c7      	str	r7, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID2, CID) << 16);
    170c:	682d      	ldr	r5, [r5, #0]
    170e:	042e      	lsls	r6, r5, #16
    1710:	f406 037f 	and.w	r3, r6, #16711680	; 0xff0000
    1714:	431f      	orrs	r7, r3
    1716:	62c7      	str	r7, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID1, CID) <<  8);
    1718:	6824      	ldr	r4, [r4, #0]
    171a:	0222      	lsls	r2, r4, #8
    171c:	b295      	uxth	r5, r2
    171e:	433d      	orrs	r5, r7
    1720:	62c5      	str	r5, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID0, CID) <<  0);
    1722:	690f      	ldr	r7, [r1, #16]
    1724:	b2f9      	uxtb	r1, r7
    1726:	430d      	orrs	r5, r1
    1728:	62c5      	str	r5, [r0, #44]	; 0x2c
}
    172a:	bcf0      	pop	{r4, r5, r6, r7}
    172c:	4770      	bx	lr
    172e:	bf00      	nop
    1730:	40020000 	.word	0x40020000
    1734:	00001fe8 	.word	0x00001fe8
    1738:	40020004 	.word	0x40020004
    173c:	40020008 	.word	0x40020008
    1740:	4002000c 	.word	0x4002000c
    1744:	40020010 	.word	0x40020010
    1748:	f0000fe0 	.word	0xf0000fe0
    174c:	f0000fe4 	.word	0xf0000fe4
    1750:	f0000fec 	.word	0xf0000fec
    1754:	f0000ffc 	.word	0xf0000ffc
    1758:	f0000ff8 	.word	0xf0000ff8
    175c:	f0000ff4 	.word	0xf0000ff4

00001760 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1760:	490d      	ldr	r1, [pc, #52]	; (1798 <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1762:	4b0e      	ldr	r3, [pc, #56]	; (179c <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1764:	4a0e      	ldr	r2, [pc, #56]	; (17a0 <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1766:	681b      	ldr	r3, [r3, #0]
{
    1768:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    176a:	680d      	ldr	r5, [r1, #0]
    176c:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    176e:	6815      	ldr	r5, [r2, #0]
    1770:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1772:	4c0c      	ldr	r4, [pc, #48]	; (17a4 <am_hal_mcuctrl_fault_status+0x44>)
    1774:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1776:	4329      	orrs	r1, r5
    1778:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    177a:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    177c:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1780:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1782:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1784:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1788:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    178c:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    178e:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1790:	6142      	str	r2, [r0, #20]
}
    1792:	bc70      	pop	{r4, r5, r6}
    1794:	4770      	bx	lr
    1796:	bf00      	nop
    1798:	400201c4 	.word	0x400201c4
    179c:	400201cc 	.word	0x400201cc
    17a0:	400201c0 	.word	0x400201c0
    17a4:	400201c8 	.word	0x400201c8

000017a8 <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    17a8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
{
    17ac:	b430      	push	{r4, r5}
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    17ae:	d03a      	beq.n	1826 <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    17b0:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    17b4:	f000 809d 	beq.w	18f2 <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    17b8:	2801      	cmp	r0, #1
    17ba:	f000 809d 	beq.w	18f8 <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    17be:	2803      	cmp	r0, #3
    17c0:	f000 80a6 	beq.w	1910 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    17c4:	2807      	cmp	r0, #7
    17c6:	f000 809c 	beq.w	1902 <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    17ca:	280f      	cmp	r0, #15
    17cc:	f000 80a5 	beq.w	191a <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    17d0:	281f      	cmp	r0, #31
    17d2:	f000 80b0 	beq.w	1936 <am_hal_pwrctrl_memory_enable+0x18e>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    17d6:	283f      	cmp	r0, #63	; 0x3f
    17d8:	f000 80b4 	beq.w	1944 <am_hal_pwrctrl_memory_enable+0x19c>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    17dc:	287f      	cmp	r0, #127	; 0x7f
    17de:	f000 80b8 	beq.w	1952 <am_hal_pwrctrl_memory_enable+0x1aa>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    17e2:	28ff      	cmp	r0, #255	; 0xff
    17e4:	f000 80a0 	beq.w	1928 <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    17e8:	f240 13ff 	movw	r3, #511	; 0x1ff
    17ec:	4298      	cmp	r0, r3
    17ee:	f000 80b7 	beq.w	1960 <am_hal_pwrctrl_memory_enable+0x1b8>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    17f2:	f240 31ff 	movw	r1, #1023	; 0x3ff
    17f6:	4288      	cmp	r0, r1
    17f8:	f000 80b8 	beq.w	196c <am_hal_pwrctrl_memory_enable+0x1c4>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    17fc:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1800:	4290      	cmp	r0, r2
    1802:	d00e      	beq.n	1822 <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    1804:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    1808:	f000 80b6 	beq.w	1978 <am_hal_pwrctrl_memory_enable+0x1d0>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    180c:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    1810:	42a0      	cmp	r0, r4
    1812:	f000 80b4 	beq.w	197e <am_hal_pwrctrl_memory_enable+0x1d6>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    1816:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    181a:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    181e:	4560      	cmp	r0, ip
    1820:	d132      	bne.n	1888 <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    1822:	495b      	ldr	r1, [pc, #364]	; (1990 <am_hal_pwrctrl_memory_enable+0x1e8>)
    1824:	e066      	b.n	18f4 <am_hal_pwrctrl_memory_enable+0x14c>
    1826:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    182a:	2340      	movs	r3, #64	; 0x40
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    182c:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    182e:	4c59      	ldr	r4, [pc, #356]	; (1994 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1830:	6825      	ldr	r5, [r4, #0]
    1832:	402a      	ands	r2, r5
    1834:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    1836:	4a57      	ldr	r2, [pc, #348]	; (1994 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1838:	6814      	ldr	r4, [r2, #0]
    183a:	4320      	orrs	r0, r4
    183c:	6010      	str	r0, [r2, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    183e:	2b00      	cmp	r3, #0
    1840:	d029      	beq.n	1896 <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1842:	4d55      	ldr	r5, [pc, #340]	; (1998 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1844:	6828      	ldr	r0, [r5, #0]
        while ( --i32TOcnt              &&
    1846:	4218      	tst	r0, r3
    1848:	bf18      	it	ne
    184a:	20c6      	movne	r0, #198	; 0xc6
    184c:	d01f      	beq.n	188e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    184e:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1850:	421a      	tst	r2, r3
    1852:	d01c      	beq.n	188e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1854:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1856:	421c      	tst	r4, r3
    1858:	d019      	beq.n	188e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    185a:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    185c:	421a      	tst	r2, r3
    185e:	d016      	beq.n	188e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1860:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1862:	421c      	tst	r4, r3
    1864:	d013      	beq.n	188e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1866:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1868:	421a      	tst	r2, r3
    186a:	d010      	beq.n	188e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    186c:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    186e:	421c      	tst	r4, r3
    1870:	d00d      	beq.n	188e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1872:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1874:	421a      	tst	r2, r3
    1876:	d00a      	beq.n	188e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1878:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    187a:	421c      	tst	r4, r3
    187c:	d007      	beq.n	188e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    187e:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1880:	421a      	tst	r2, r3
    1882:	d004      	beq.n	188e <am_hal_pwrctrl_memory_enable+0xe6>
    1884:	3809      	subs	r0, #9
    1886:	d1e2      	bne.n	184e <am_hal_pwrctrl_memory_enable+0xa6>
        return false;
    1888:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    188a:	bc30      	pop	{r4, r5}
    188c:	4770      	bx	lr
    if ( ui32PwrStatEnMask )
    188e:	b911      	cbnz	r1, 1896 <am_hal_pwrctrl_memory_enable+0xee>
    return true;
    1890:	2001      	movs	r0, #1
}
    1892:	bc30      	pop	{r4, r5}
    1894:	4770      	bx	lr
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1896:	4b40      	ldr	r3, [pc, #256]	; (1998 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1898:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    189a:	ea31 0405 	bics.w	r4, r1, r5
    189e:	bf18      	it	ne
    18a0:	24c6      	movne	r4, #198	; 0xc6
    18a2:	d0f5      	beq.n	1890 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18a4:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    18a6:	ea31 0000 	bics.w	r0, r1, r0
    18aa:	d0f1      	beq.n	1890 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18ac:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    18ae:	ea31 0002 	bics.w	r0, r1, r2
    18b2:	d0ed      	beq.n	1890 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18b4:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    18b6:	ea31 0005 	bics.w	r0, r1, r5
    18ba:	d0e9      	beq.n	1890 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18bc:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    18be:	ea31 0000 	bics.w	r0, r1, r0
    18c2:	d0e5      	beq.n	1890 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18c4:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    18c6:	ea31 0002 	bics.w	r0, r1, r2
    18ca:	d0e1      	beq.n	1890 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18cc:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    18ce:	ea31 0005 	bics.w	r0, r1, r5
    18d2:	d0dd      	beq.n	1890 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18d4:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    18d6:	ea31 0000 	bics.w	r0, r1, r0
    18da:	d0d9      	beq.n	1890 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18dc:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    18de:	ea31 0002 	bics.w	r0, r1, r2
    18e2:	d0d5      	beq.n	1890 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    18e4:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    18e6:	ea31 0005 	bics.w	r0, r1, r5
    18ea:	d0d1      	beq.n	1890 <am_hal_pwrctrl_memory_enable+0xe8>
    18ec:	3c09      	subs	r4, #9
    18ee:	d1d9      	bne.n	18a4 <am_hal_pwrctrl_memory_enable+0xfc>
    18f0:	e7ca      	b.n	1888 <am_hal_pwrctrl_memory_enable+0xe0>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    18f2:	2160      	movs	r1, #96	; 0x60
{
    18f4:	2300      	movs	r3, #0
    18f6:	e79e      	b.n	1836 <am_hal_pwrctrl_memory_enable+0x8e>
    18f8:	4a28      	ldr	r2, [pc, #160]	; (199c <am_hal_pwrctrl_memory_enable+0x1f4>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    18fa:	4b29      	ldr	r3, [pc, #164]	; (19a0 <am_hal_pwrctrl_memory_enable+0x1f8>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    18fc:	f44f 7180 	mov.w	r1, #256	; 0x100
    1900:	e795      	b.n	182e <am_hal_pwrctrl_memory_enable+0x86>
    1902:	f46f 62ff 	mvn.w	r2, #2040	; 0x7f8
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1906:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    190a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    190e:	e78e      	b.n	182e <am_hal_pwrctrl_memory_enable+0x86>
    1910:	4a24      	ldr	r2, [pc, #144]	; (19a4 <am_hal_pwrctrl_memory_enable+0x1fc>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1912:	4b25      	ldr	r3, [pc, #148]	; (19a8 <am_hal_pwrctrl_memory_enable+0x200>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    1914:	f44f 7140 	mov.w	r1, #768	; 0x300
    1918:	e789      	b.n	182e <am_hal_pwrctrl_memory_enable+0x86>
    191a:	f46f 62fe 	mvn.w	r2, #2032	; 0x7f0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    191e:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    1922:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    1926:	e782      	b.n	182e <am_hal_pwrctrl_memory_enable+0x86>
    1928:	f46f 62e0 	mvn.w	r2, #1792	; 0x700
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    192c:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    1930:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    1934:	e77b      	b.n	182e <am_hal_pwrctrl_memory_enable+0x86>
    1936:	f46f 62fc 	mvn.w	r2, #2016	; 0x7e0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    193a:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    193e:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    1942:	e774      	b.n	182e <am_hal_pwrctrl_memory_enable+0x86>
    1944:	f46f 62f8 	mvn.w	r2, #1984	; 0x7c0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1948:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    194c:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    1950:	e76d      	b.n	182e <am_hal_pwrctrl_memory_enable+0x86>
    1952:	f46f 62f0 	mvn.w	r2, #1920	; 0x780
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1956:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    195a:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    195e:	e766      	b.n	182e <am_hal_pwrctrl_memory_enable+0x86>
    1960:	f46f 62c0 	mvn.w	r2, #1536	; 0x600
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1964:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    1968:	4910      	ldr	r1, [pc, #64]	; (19ac <am_hal_pwrctrl_memory_enable+0x204>)
    196a:	e760      	b.n	182e <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    196c:	4910      	ldr	r1, [pc, #64]	; (19b0 <am_hal_pwrctrl_memory_enable+0x208>)
    196e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1972:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1976:	e75a      	b.n	182e <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1978:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    197c:	e7ba      	b.n	18f4 <am_hal_pwrctrl_memory_enable+0x14c>
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    197e:	4805      	ldr	r0, [pc, #20]	; (1994 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1980:	6803      	ldr	r3, [r0, #0]
    1982:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    1986:	6001      	str	r1, [r0, #0]
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1988:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
        ui32PwrStatEnMask  = 0;
    198c:	2100      	movs	r1, #0
    198e:	e758      	b.n	1842 <am_hal_pwrctrl_memory_enable+0x9a>
    1990:	0007ff00 	.word	0x0007ff00
    1994:	40021010 	.word	0x40021010
    1998:	40021014 	.word	0x40021014
    199c:	fffff801 	.word	0xfffff801
    19a0:	0007fe00 	.word	0x0007fe00
    19a4:	fffff803 	.word	0xfffff803
    19a8:	0007fc00 	.word	0x0007fc00
    19ac:	0001ff00 	.word	0x0001ff00
    19b0:	0003ff00 	.word	0x0003ff00

000019b4 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    19b4:	4b0f      	ldr	r3, [pc, #60]	; (19f4 <am_hal_pwrctrl_bucks_init+0x40>)
    19b6:	681a      	ldr	r2, [r3, #0]
    19b8:	0792      	lsls	r2, r2, #30
    19ba:	d502      	bpl.n	19c2 <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    19bc:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    19be:	07c3      	lsls	r3, r0, #31
    19c0:	d40e      	bmi.n	19e0 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    19c2:	4b0d      	ldr	r3, [pc, #52]	; (19f8 <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    19c4:	4a0b      	ldr	r2, [pc, #44]	; (19f4 <am_hal_pwrctrl_bucks_init+0x40>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    19c6:	6819      	ldr	r1, [r3, #0]
    19c8:	f041 0002 	orr.w	r0, r1, #2
    19cc:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    19ce:	6819      	ldr	r1, [r3, #0]
    19d0:	f041 0001 	orr.w	r0, r1, #1
    19d4:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    19d6:	6813      	ldr	r3, [r2, #0]
    19d8:	f003 0103 	and.w	r1, r3, #3
    19dc:	2903      	cmp	r1, #3
    19de:	d1fa      	bne.n	19d6 <am_hal_pwrctrl_bucks_init+0x22>
    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    19e0:	4a04      	ldr	r2, [pc, #16]	; (19f4 <am_hal_pwrctrl_bucks_init+0x40>)
    19e2:	6810      	ldr	r0, [r2, #0]
    19e4:	f000 0303 	and.w	r3, r0, #3
    19e8:	2b03      	cmp	r3, #3
    19ea:	d1fa      	bne.n	19e2 <am_hal_pwrctrl_bucks_init+0x2e>
    am_hal_flash_delay(200 / 3);
    19ec:	2042      	movs	r0, #66	; 0x42
    19ee:	f7ff bdef 	b.w	15d0 <am_hal_flash_delay>
    19f2:	bf00      	nop
    19f4:	40021004 	.word	0x40021004
    19f8:	40021000 	.word	0x40021000

000019fc <am_hal_pwrctrl_bucks_enable>:
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    19fc:	4b0b      	ldr	r3, [pc, #44]	; (1a2c <am_hal_pwrctrl_bucks_enable+0x30>)
    19fe:	681a      	ldr	r2, [r3, #0]
    1a00:	0792      	lsls	r2, r2, #30
    1a02:	d502      	bpl.n	1a0a <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1a04:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1a06:	07c3      	lsls	r3, r0, #31
    1a08:	d40e      	bmi.n	1a28 <am_hal_pwrctrl_bucks_enable+0x2c>
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1a0a:	4b09      	ldr	r3, [pc, #36]	; (1a30 <am_hal_pwrctrl_bucks_enable+0x34>)
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1a0c:	4a07      	ldr	r2, [pc, #28]	; (1a2c <am_hal_pwrctrl_bucks_enable+0x30>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1a0e:	6819      	ldr	r1, [r3, #0]
    1a10:	f041 0002 	orr.w	r0, r1, #2
    1a14:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1a16:	6819      	ldr	r1, [r3, #0]
    1a18:	f041 0001 	orr.w	r0, r1, #1
    1a1c:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1a1e:	6813      	ldr	r3, [r2, #0]
    1a20:	f003 0103 	and.w	r1, r3, #3
    1a24:	2903      	cmp	r1, #3
    1a26:	d1fa      	bne.n	1a1e <am_hal_pwrctrl_bucks_enable+0x22>
    1a28:	4770      	bx	lr
    1a2a:	bf00      	nop
    1a2c:	40021004 	.word	0x40021004
    1a30:	40021000 	.word	0x40021000

00001a34 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1a34:	4b12      	ldr	r3, [pc, #72]	; (1a80 <am_hal_pwrctrl_bucks_disable+0x4c>)
    1a36:	681a      	ldr	r2, [r3, #0]
    1a38:	0792      	lsls	r2, r2, #30
    1a3a:	d402      	bmi.n	1a42 <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    1a3c:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1a3e:	07c3      	lsls	r3, r0, #31
    1a40:	d51c      	bpl.n	1a7c <am_hal_pwrctrl_bucks_disable+0x48>
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1a42:	4910      	ldr	r1, [pc, #64]	; (1a84 <am_hal_pwrctrl_bucks_disable+0x50>)
    1a44:	680b      	ldr	r3, [r1, #0]
    1a46:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1a4a:	2a20      	cmp	r2, #32
    1a4c:	d00b      	beq.n	1a66 <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    1a4e:	4b0e      	ldr	r3, [pc, #56]	; (1a88 <am_hal_pwrctrl_bucks_disable+0x54>)
    1a50:	681a      	ldr	r2, [r3, #0]
    1a52:	f022 0002 	bic.w	r0, r2, #2
    1a56:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    1a58:	6819      	ldr	r1, [r3, #0]
    1a5a:	f021 0201 	bic.w	r2, r1, #1
    1a5e:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    1a60:	200a      	movs	r0, #10
    1a62:	f7ff bdb5 	b.w	15d0 <am_hal_flash_delay>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_PWRADC_EN) )
    1a66:	4809      	ldr	r0, [pc, #36]	; (1a8c <am_hal_pwrctrl_bucks_disable+0x58>)
    1a68:	6801      	ldr	r1, [r0, #0]
    if ( isRev_ADC()  &&
    1a6a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1a6e:	d1ee      	bne.n	1a4e <am_hal_pwrctrl_bucks_disable+0x1a>
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    1a70:	4805      	ldr	r0, [pc, #20]	; (1a88 <am_hal_pwrctrl_bucks_disable+0x54>)
    1a72:	6803      	ldr	r3, [r0, #0]
    1a74:	f003 0105 	and.w	r1, r3, #5
    1a78:	6001      	str	r1, [r0, #0]
    1a7a:	e7f1      	b.n	1a60 <am_hal_pwrctrl_bucks_disable+0x2c>
    1a7c:	4770      	bx	lr
    1a7e:	bf00      	nop
    1a80:	40021004 	.word	0x40021004
    1a84:	4002000c 	.word	0x4002000c
    1a88:	40021000 	.word	0x40021000
    1a8c:	40021008 	.word	0x40021008

00001a90 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1a90:	4905      	ldr	r1, [pc, #20]	; (1aa8 <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1a92:	4a06      	ldr	r2, [pc, #24]	; (1aac <am_hal_pwrctrl_low_power_init+0x1c>)
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1a94:	680b      	ldr	r3, [r1, #0]
    1a96:	f043 0006 	orr.w	r0, r3, #6
    1a9a:	6008      	str	r0, [r1, #0]
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1a9c:	6811      	ldr	r1, [r2, #0]
    1a9e:	f021 0304 	bic.w	r3, r1, #4
    1aa2:	6013      	str	r3, [r2, #0]
    1aa4:	4770      	bx	lr
    1aa6:	bf00      	nop
    1aa8:	40021018 	.word	0x40021018
    1aac:	40021000 	.word	0x40021000

00001ab0 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1ab0:	4a05      	ldr	r2, [pc, #20]	; (1ac8 <am_hal_rtc_osc_select+0x18>)
    1ab2:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    1ab4:	b918      	cbnz	r0, 1abe <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    1ab6:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1aba:	6010      	str	r0, [r2, #0]
    1abc:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1abe:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    1ac2:	6011      	str	r1, [r2, #0]
    1ac4:	4770      	bx	lr
    1ac6:	bf00      	nop
    1ac8:	4000400c 	.word	0x4000400c

00001acc <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    1acc:	4a02      	ldr	r2, [pc, #8]	; (1ad8 <am_hal_rtc_osc_disable+0xc>)
    1ace:	6813      	ldr	r3, [r2, #0]
    1ad0:	f043 0010 	orr.w	r0, r3, #16
    1ad4:	6010      	str	r0, [r2, #0]
    1ad6:	4770      	bx	lr
    1ad8:	40004050 	.word	0x40004050

00001adc <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    1adc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ade:	b083      	sub	sp, #12
    1ae0:	4604      	mov	r4, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    1ae2:	f7ff fd79 	bl	15d8 <am_hal_interrupt_master_disable>
    1ae6:	4605      	mov	r5, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1ae8:	b124      	cbz	r4, 1af4 <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    1aea:	4b42      	ldr	r3, [pc, #264]	; (1bf4 <am_hal_sysctrl_sleep+0x118>)
    1aec:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1aee:	f010 0c01 	ands.w	ip, r0, #1
    1af2:	d00a      	beq.n	1b0a <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    1af4:	4a40      	ldr	r2, [pc, #256]	; (1bf8 <am_hal_sysctrl_sleep+0x11c>)
    1af6:	6811      	ldr	r1, [r2, #0]
    1af8:	f021 0604 	bic.w	r6, r1, #4
    1afc:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    1afe:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1b00:	4628      	mov	r0, r5
    1b02:	f7ff fd6d 	bl	15e0 <am_hal_interrupt_master_set>
}
    1b06:	b003      	add	sp, #12
    1b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1b0a:	4c3b      	ldr	r4, [pc, #236]	; (1bf8 <am_hal_sysctrl_sleep+0x11c>)
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1b0c:	4b3b      	ldr	r3, [pc, #236]	; (1bfc <am_hal_sysctrl_sleep+0x120>)
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1b0e:	6820      	ldr	r0, [r4, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1b10:	4e3b      	ldr	r6, [pc, #236]	; (1c00 <am_hal_sysctrl_sleep+0x124>)
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1b12:	4f3c      	ldr	r7, [pc, #240]	; (1c04 <am_hal_sysctrl_sleep+0x128>)
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1b14:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 1c14 <am_hal_sysctrl_sleep+0x138>
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1b18:	f040 0204 	orr.w	r2, r0, #4
    1b1c:	6022      	str	r2, [r4, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1b1e:	681c      	ldr	r4, [r3, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1b20:	6833      	ldr	r3, [r6, #0]
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1b22:	f8de 2000 	ldr.w	r2, [lr]
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1b26:	6839      	ldr	r1, [r7, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1b28:	f004 07f0 	and.w	r7, r4, #240	; 0xf0
                   CHKBUCKZX_REV : 0x0;
    1b2c:	2f20      	cmp	r7, #32
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1b2e:	f103 30ff 	add.w	r0, r3, #4294967295
                   CHKBUCKZX_REV : 0x0;
    1b32:	bf14      	ite	ne
    1b34:	2700      	movne	r7, #0
    1b36:	2702      	moveq	r7, #2
                    CHKBUCKZX_TIMER : 0x0;
    1b38:	2803      	cmp	r0, #3
    1b3a:	bf98      	it	ls
    1b3c:	f04f 0c04 	movls.w	ip, #4
                     CHKBUCKZX_BUCKS : 0x0;
    1b40:	f012 0403 	ands.w	r4, r2, #3
    1b44:	bf18      	it	ne
    1b46:	2401      	movne	r4, #1
    g_buckZX_chk |= ( ui32SupplySrc &
    1b48:	f240 53ff 	movw	r3, #1535	; 0x5ff
    g_buckZX_chk |= (ui32SupplySrc &
    1b4c:	433c      	orrs	r4, r7
                0x0 : CHKBUCKZX_DEVEN;
    1b4e:	ea11 0703 	ands.w	r7, r1, r3
    g_buckZX_chk |= (ui32SupplySrc &
    1b52:	ea44 040c 	orr.w	r4, r4, ip
                0x0 : CHKBUCKZX_DEVEN;
    1b56:	d103      	bne.n	1b60 <am_hal_sysctrl_sleep+0x84>
    g_buckZX_chk |= ( ui32SupplySrc &
    1b58:	f044 0408 	orr.w	r4, r4, #8
        if ( bBuckZX_chk )
    1b5c:	2c0f      	cmp	r4, #15
    1b5e:	d00a      	beq.n	1b76 <am_hal_sysctrl_sleep+0x9a>
        AM_ASM_WFI;
    1b60:	bf30      	wfi
        if ( bBuckZX_chk )
    1b62:	2c0f      	cmp	r4, #15
    1b64:	d01a      	beq.n	1b9c <am_hal_sysctrl_sleep+0xc0>
            g_bBuckRestoreComplete = true;
    1b66:	4e28      	ldr	r6, [pc, #160]	; (1c08 <am_hal_sysctrl_sleep+0x12c>)
    1b68:	2001      	movs	r0, #1
    1b6a:	7030      	strb	r0, [r6, #0]
    am_hal_interrupt_master_set(ui32Critical);
    1b6c:	4628      	mov	r0, r5
    1b6e:	f7ff fd37 	bl	15e0 <am_hal_interrupt_master_set>
}
    1b72:	b003      	add	sp, #12
    1b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1b76:	6832      	ldr	r2, [r6, #0]
    1b78:	1e51      	subs	r1, r2, #1
    1b7a:	9100      	str	r1, [sp, #0]
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    1b7c:	9800      	ldr	r0, [sp, #0]
    1b7e:	f04f 31ff 	mov.w	r1, #4294967295
    1b82:	f000 f8c5 	bl	1d10 <am_hal_ctimer_clear>
            am_hal_ctimer_period_set(ui32BuckTimer,
    1b86:	9800      	ldr	r0, [sp, #0]
    1b88:	463b      	mov	r3, r7
    1b8a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    1b8e:	f04f 31ff 	mov.w	r1, #4294967295
    1b92:	f000 f8d1 	bl	1d38 <am_hal_ctimer_period_set>
            am_hal_pwrctrl_bucks_disable();
    1b96:	f7ff ff4d 	bl	1a34 <am_hal_pwrctrl_bucks_disable>
    1b9a:	e7e1      	b.n	1b60 <am_hal_sysctrl_sleep+0x84>
    AM_CRITICAL_BEGIN_ASM
    1b9c:	f7ff fd1c 	bl	15d8 <am_hal_interrupt_master_disable>
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    1ba0:	4b1a      	ldr	r3, [pc, #104]	; (1c0c <am_hal_sysctrl_sleep+0x130>)
    AM_CRITICAL_BEGIN_ASM
    1ba2:	9001      	str	r0, [sp, #4]
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    1ba4:	681a      	ldr	r2, [r3, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    1ba6:	681a      	ldr	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    1ba8:	681f      	ldr	r7, [r3, #0]
    1baa:	f027 043c 	bic.w	r4, r7, #60	; 0x3c
    1bae:	f044 021c 	orr.w	r2, r4, #28
    1bb2:	601a      	str	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    1bb4:	6819      	ldr	r1, [r3, #0]
            g_bBuckRestoreComplete = false;
    1bb6:	4c14      	ldr	r4, [pc, #80]	; (1c08 <am_hal_sysctrl_sleep+0x12c>)
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    1bb8:	f421 30f0 	bic.w	r0, r1, #122880	; 0x1e000
    1bbc:	f440 4760 	orr.w	r7, r0, #57344	; 0xe000
    1bc0:	601f      	str	r7, [r3, #0]
    AM_CRITICAL_END_ASM
    1bc2:	9801      	ldr	r0, [sp, #4]
    1bc4:	f7ff fd0c 	bl	15e0 <am_hal_interrupt_master_set>
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    1bc8:	201c      	movs	r0, #28
    1bca:	f7ff fd01 	bl	15d0 <am_hal_flash_delay>
            am_hal_pwrctrl_bucks_enable();
    1bce:	f7ff ff15 	bl	19fc <am_hal_pwrctrl_bucks_enable>
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1bd2:	6836      	ldr	r6, [r6, #0]
            g_ui32BuckInputs = 0;
    1bd4:	490e      	ldr	r1, [pc, #56]	; (1c10 <am_hal_sysctrl_sleep+0x134>)
            g_bBuckRestoreComplete = false;
    1bd6:	2200      	movs	r2, #0
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1bd8:	1e73      	subs	r3, r6, #1
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    1bda:	204c      	movs	r0, #76	; 0x4c
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1bdc:	9300      	str	r3, [sp, #0]
            g_bBuckRestoreComplete = false;
    1bde:	7022      	strb	r2, [r4, #0]
            g_ui32BuckInputs = 0;
    1be0:	600a      	str	r2, [r1, #0]
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    1be2:	f7ff fcf5 	bl	15d0 <am_hal_flash_delay>
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    1be6:	9800      	ldr	r0, [sp, #0]
    1be8:	f04f 31ff 	mov.w	r1, #4294967295
    1bec:	f000 f878 	bl	1ce0 <am_hal_ctimer_start>
    1bf0:	e786      	b.n	1b00 <am_hal_sysctrl_sleep+0x24>
    1bf2:	bf00      	nop
    1bf4:	40020250 	.word	0x40020250
    1bf8:	e000ed10 	.word	0xe000ed10
    1bfc:	4002000c 	.word	0x4002000c
    1c00:	10001110 	.word	0x10001110
    1c04:	40021008 	.word	0x40021008
    1c08:	10001108 	.word	0x10001108
    1c0c:	40020068 	.word	0x40020068
    1c10:	1000110c 	.word	0x1000110c
    1c14:	40021000 	.word	0x40021000

00001c18 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    1c18:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    1c1a:	4a23      	ldr	r2, [pc, #140]	; (1ca8 <am_hal_tpiu_enable+0x90>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    1c1c:	6803      	ldr	r3, [r0, #0]
    AM_REG(TPIU, FFCR) = 0;
    1c1e:	2100      	movs	r1, #0
    1c20:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    1c22:	b33b      	cbz	r3, 1c74 <am_hal_tpiu_enable+0x5c>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1c24:	f5a2 7c40 	sub.w	ip, r2, #768	; 0x300
    1c28:	2101      	movs	r1, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1c2a:	4c20      	ldr	r4, [pc, #128]	; (1cac <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1c2c:	4d20      	ldr	r5, [pc, #128]	; (1cb0 <am_hal_tpiu_enable+0x98>)
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1c2e:	f8cc 1000 	str.w	r1, [ip]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1c32:	f5a3 4e61 	sub.w	lr, r3, #57600	; 0xe100
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1c36:	45a6      	cmp	lr, r4
    1c38:	bf94      	ite	ls
    1c3a:	461c      	movls	r4, r3
    1c3c:	462c      	movhi	r4, r5
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    1c3e:	f7ff fcab 	bl	1598 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    1c42:	1c43      	adds	r3, r0, #1
    1c44:	d02d      	beq.n	1ca2 <am_hal_tpiu_enable+0x8a>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    1c46:	08c2      	lsrs	r2, r0, #3
    1c48:	fbb2 f3f4 	udiv	r3, r2, r4
    1c4c:	1e5d      	subs	r5, r3, #1
    1c4e:	b2a8      	uxth	r0, r5
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1c50:	4a18      	ldr	r2, [pc, #96]	; (1cb4 <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1c52:	4c19      	ldr	r4, [pc, #100]	; (1cb8 <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1c54:	4b19      	ldr	r3, [pc, #100]	; (1cbc <am_hal_tpiu_enable+0xa4>)
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1c56:	491a      	ldr	r1, [pc, #104]	; (1cc0 <am_hal_tpiu_enable+0xa8>)
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1c58:	6010      	str	r0, [r2, #0]
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1c5a:	2502      	movs	r5, #2
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1c5c:	2000      	movs	r0, #0
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1c5e:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1c62:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1c64:	6008      	str	r0, [r1, #0]
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    1c66:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1c68:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    1c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1c70:	f7ff bcae 	b.w	15d0 <am_hal_flash_delay>
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    1c74:	4c0f      	ldr	r4, [pc, #60]	; (1cb4 <am_hal_tpiu_enable+0x9c>)
    1c76:	6905      	ldr	r5, [r0, #16]
    1c78:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    1c7a:	6882      	ldr	r2, [r0, #8]
    1c7c:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    1c80:	68c3      	ldr	r3, [r0, #12]
    1c82:	4c10      	ldr	r4, [pc, #64]	; (1cc4 <am_hal_tpiu_enable+0xac>)
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    1c84:	490d      	ldr	r1, [pc, #52]	; (1cbc <am_hal_tpiu_enable+0xa4>)
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    1c86:	1e5d      	subs	r5, r3, #1
    1c88:	2201      	movs	r2, #1
    1c8a:	40aa      	lsls	r2, r5
    1c8c:	6022      	str	r2, [r4, #0]
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    1c8e:	6840      	ldr	r0, [r0, #4]
    1c90:	680b      	ldr	r3, [r1, #0]
    1c92:	4303      	orrs	r3, r0
    1c94:	600b      	str	r3, [r1, #0]
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1c96:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    1c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1c9e:	f7ff bc97 	b.w	15d0 <am_hal_flash_delay>
    1ca2:	2005      	movs	r0, #5
    1ca4:	e7d4      	b.n	1c50 <am_hal_tpiu_enable+0x38>
    1ca6:	bf00      	nop
    1ca8:	e0040304 	.word	0xe0040304
    1cac:	001da380 	.word	0x001da380
    1cb0:	000f4240 	.word	0x000f4240
    1cb4:	e0040010 	.word	0xe0040010
    1cb8:	e00400f0 	.word	0xe00400f0
    1cbc:	40020250 	.word	0x40020250
    1cc0:	e0040f00 	.word	0xe0040f00
    1cc4:	e0040004 	.word	0xe0040004

00001cc8 <am_hal_tpiu_disable>:
am_hal_tpiu_disable(void)
{
    //
    // Disable the TPIU clock source in MCU control.
    //
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    1cc8:	4b01      	ldr	r3, [pc, #4]	; (1cd0 <am_hal_tpiu_disable+0x8>)
    1cca:	2200      	movs	r2, #0
    1ccc:	601a      	str	r2, [r3, #0]
    1cce:	4770      	bx	lr
    1cd0:	40020250 	.word	0x40020250

00001cd4 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    1cd4:	4b01      	ldr	r3, [pc, #4]	; (1cdc <am_hal_vcomp_disable+0x8>)
    1cd6:	2237      	movs	r2, #55	; 0x37
    1cd8:	601a      	str	r2, [r3, #0]
    1cda:	4770      	bx	lr
    1cdc:	4000c008 	.word	0x4000c008

00001ce0 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1ce0:	b570      	push	{r4, r5, r6, lr}
    1ce2:	b082      	sub	sp, #8
    1ce4:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    1ce6:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1ce8:	f7ff fc76 	bl	15d8 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1cec:	4d07      	ldr	r5, [pc, #28]	; (1d0c <am_hal_ctimer_start+0x2c>)
    AM_CRITICAL_BEGIN_ASM
    1cee:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    1cf0:	5971      	ldr	r1, [r6, r5]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    1cf2:	f004 2308 	and.w	r3, r4, #134219776	; 0x8000800
    1cf6:	ea21 0003 	bic.w	r0, r1, r3
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    1cfa:	f004 1201 	and.w	r2, r4, #65537	; 0x10001
    1cfe:	4302      	orrs	r2, r0
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    1d00:	5172      	str	r2, [r6, r5]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1d02:	9801      	ldr	r0, [sp, #4]
    1d04:	f7ff fc6c 	bl	15e0 <am_hal_interrupt_master_set>
} // am_hal_ctimer_start()
    1d08:	b002      	add	sp, #8
    1d0a:	bd70      	pop	{r4, r5, r6, pc}
    1d0c:	4000800c 	.word	0x4000800c

00001d10 <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1d10:	b570      	push	{r4, r5, r6, lr}
    1d12:	b082      	sub	sp, #8
    1d14:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    1d16:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1d18:	f7ff fc5e 	bl	15d8 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1d1c:	4d05      	ldr	r5, [pc, #20]	; (1d34 <am_hal_ctimer_clear+0x24>)
    AM_CRITICAL_BEGIN_ASM
    1d1e:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    1d20:	5971      	ldr	r1, [r6, r5]
    1d22:	f004 2008 	and.w	r0, r4, #134219776	; 0x8000800
    1d26:	4308      	orrs	r0, r1
    1d28:	5170      	str	r0, [r6, r5]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1d2a:	9801      	ldr	r0, [sp, #4]
    1d2c:	f7ff fc58 	bl	15e0 <am_hal_interrupt_master_set>
} // am_hal_ctimer_clear()
    1d30:	b002      	add	sp, #8
    1d32:	bd70      	pop	{r4, r5, r6, pc}
    1d34:	4000800c 	.word	0x4000800c

00001d38 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1d3c:	b082      	sub	sp, #8
    1d3e:	4688      	mov	r8, r1
    1d40:	461f      	mov	r7, r3
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    1d42:	ea4f 1900 	mov.w	r9, r0, lsl #4
{
    1d46:	4614      	mov	r4, r2
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1d48:	f7ff fc46 	bl	15d8 <am_hal_interrupt_master_disable>
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1d4c:	f8df a098 	ldr.w	sl, [pc, #152]	; 1de8 <am_hal_ctimer_period_set+0xb0>
    AM_CRITICAL_BEGIN_ASM
    1d50:	9001      	str	r0, [sp, #4]
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1d52:	f518 3f80 	cmn.w	r8, #65536	; 0x10000
                                    AM_REG_CTIMER_CMPRA0_O +
    1d56:	4d21      	ldr	r5, [pc, #132]	; (1ddc <am_hal_ctimer_period_set+0xa4>)
                                    AM_REG_CTIMER_CMPRB0_O +
    1d58:	4e21      	ldr	r6, [pc, #132]	; (1de0 <am_hal_ctimer_period_set+0xa8>)
    ui32Mode = *pui32ControlReg;
    1d5a:	f859 300a 	ldr.w	r3, [r9, sl]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1d5e:	d01b      	beq.n	1d98 <am_hal_ctimer_period_set+0x60>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1d60:	f403 70c0 	and.w	r0, r3, #384	; 0x180
    1d64:	2880      	cmp	r0, #128	; 0x80
    1d66:	d01c      	beq.n	1da2 <am_hal_ctimer_period_set+0x6a>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1d68:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1d6c:	2300      	movs	r3, #0
    1d6e:	45b8      	cmp	r8, r7
        ui32Comp1 = 0;
    1d70:	461a      	mov	r2, r3
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1d72:	d01d      	beq.n	1db0 <am_hal_ctimer_period_set+0x78>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1d74:	491b      	ldr	r1, [pc, #108]	; (1de4 <am_hal_ctimer_period_set+0xac>)
    1d76:	4588      	cmp	r8, r1
    1d78:	d025      	beq.n	1dc6 <am_hal_ctimer_period_set+0x8e>
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1 >> 16));
    1d7a:	400a      	ands	r2, r1
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1d7c:	b2a0      	uxth	r0, r4
    1d7e:	4303      	orrs	r3, r0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1d80:	ea42 4414 	orr.w	r4, r2, r4, lsr #16
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1d84:	f849 3005 	str.w	r3, [r9, r5]
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1d88:	f849 4006 	str.w	r4, [r9, r6]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1d8c:	9801      	ldr	r0, [sp, #4]
    1d8e:	f7ff fc27 	bl	15e0 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    1d92:	b002      	add	sp, #8
    1d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ui32Mode = ui32Mode >> 16;
    1d98:	0c19      	lsrs	r1, r3, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1d9a:	f401 70c0 	and.w	r0, r1, #384	; 0x180
    1d9e:	2880      	cmp	r0, #128	; 0x80
    1da0:	d110      	bne.n	1dc4 <am_hal_ctimer_period_set+0x8c>
    1da2:	0423      	lsls	r3, r4, #16
        ui32Comp1 = ui32Period;
    1da4:	4622      	mov	r2, r4
        ui32Comp0 = ui32Period - ui32OnTime;
    1da6:	1be4      	subs	r4, r4, r7
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1da8:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1dac:	45b8      	cmp	r8, r7
    1dae:	d1e1      	bne.n	1d74 <am_hal_ctimer_period_set+0x3c>
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1db0:	b2a6      	uxth	r6, r4
    1db2:	4333      	orrs	r3, r6
    1db4:	f849 3005 	str.w	r3, [r9, r5]
    AM_CRITICAL_END_ASM
    1db8:	9801      	ldr	r0, [sp, #4]
    1dba:	f7ff fc11 	bl	15e0 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    1dbe:	b002      	add	sp, #8
    1dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1dc4:	2300      	movs	r3, #0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1dc6:	b2a5      	uxth	r5, r4
    1dc8:	432b      	orrs	r3, r5
    1dca:	f849 3006 	str.w	r3, [r9, r6]
    AM_CRITICAL_END_ASM
    1dce:	9801      	ldr	r0, [sp, #4]
    1dd0:	f7ff fc06 	bl	15e0 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    1dd4:	b002      	add	sp, #8
    1dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1dda:	bf00      	nop
    1ddc:	40008004 	.word	0x40008004
    1de0:	40008008 	.word	0x40008008
    1de4:	ffff0000 	.word	0xffff0000
    1de8:	4000800c 	.word	0x4000800c
    1dec:	6c6c6548 	.word	0x6c6c6548
    1df0:	6f57206f 	.word	0x6f57206f
    1df4:	21646c72 	.word	0x21646c72
    1df8:	00000a0a 	.word	0x00000a0a
    1dfc:	646e6556 	.word	0x646e6556
    1e00:	4e20726f 	.word	0x4e20726f
    1e04:	3a656d61 	.word	0x3a656d61
    1e08:	0a732520 	.word	0x0a732520
    1e0c:	00000000 	.word	0x00000000
    1e10:	69766544 	.word	0x69766544
    1e14:	74206563 	.word	0x74206563
    1e18:	3a657079 	.word	0x3a657079
    1e1c:	0a732520 	.word	0x0a732520
    1e20:	00000000 	.word	0x00000000
    1e24:	00736559 	.word	0x00736559
    1e28:	00006f4e 	.word	0x00006f4e
    1e2c:	6c617551 	.word	0x6c617551
    1e30:	65696669 	.word	0x65696669
    1e34:	25203a64 	.word	0x25203a64
    1e38:	00000a73 	.word	0x00000a73
    1e3c:	69766544 	.word	0x69766544
    1e40:	49206563 	.word	0x49206563
    1e44:	3a6f666e 	.word	0x3a6f666e
    1e48:	6150090a 	.word	0x6150090a
    1e4c:	6e207472 	.word	0x6e207472
    1e50:	65626d75 	.word	0x65626d75
    1e54:	30203a72 	.word	0x30203a72
    1e58:	38302578 	.word	0x38302578
    1e5c:	43090a58 	.word	0x43090a58
    1e60:	20706968 	.word	0x20706968
    1e64:	3a304449 	.word	0x3a304449
    1e68:	20202020 	.word	0x20202020
    1e6c:	30257830 	.word	0x30257830
    1e70:	090a5838 	.word	0x090a5838
    1e74:	70696843 	.word	0x70696843
    1e78:	31444920 	.word	0x31444920
    1e7c:	2020203a 	.word	0x2020203a
    1e80:	25783020 	.word	0x25783020
    1e84:	0a583830 	.word	0x0a583830
    1e88:	76655209 	.word	0x76655209
    1e8c:	6f697369 	.word	0x6f697369
    1e90:	20203a6e 	.word	0x20203a6e
    1e94:	78302020 	.word	0x78302020
    1e98:	58383025 	.word	0x58383025
    1e9c:	65522820 	.word	0x65522820
    1ea0:	25632576 	.word	0x25632576
    1ea4:	000a2963 	.word	0x000a2963
    1ea8:	616c4609 	.word	0x616c4609
    1eac:	73206873 	.word	0x73206873
    1eb0:	3a657a69 	.word	0x3a657a69
    1eb4:	37252020 	.word	0x37252020
    1eb8:	25282064 	.word	0x25282064
    1ebc:	424b2064 	.word	0x424b2064
    1ec0:	0a297325 	.word	0x0a297325
    1ec4:	00000000 	.word	0x00000000
    1ec8:	41525309 	.word	0x41525309
    1ecc:	6973204d 	.word	0x6973204d
    1ed0:	203a657a 	.word	0x203a657a
    1ed4:	37252020 	.word	0x37252020
    1ed8:	25282064 	.word	0x25282064
    1edc:	424b2064 	.word	0x424b2064
    1ee0:	0a297325 	.word	0x0a297325
    1ee4:	0000000a 	.word	0x0000000a
    1ee8:	20434347 	.word	0x20434347
    1eec:	2e332e36 	.word	0x2e332e36
    1ef0:	30322031 	.word	0x30322031
    1ef4:	32303731 	.word	0x32303731
    1ef8:	28203531 	.word	0x28203531
    1efc:	656c6572 	.word	0x656c6572
    1f00:	29657361 	.word	0x29657361
    1f04:	52415b20 	.word	0x52415b20
    1f08:	6d652f4d 	.word	0x6d652f4d
    1f0c:	64646562 	.word	0x64646562
    1f10:	362d6465 	.word	0x362d6465
    1f14:	6172622d 	.word	0x6172622d
    1f18:	2068636e 	.word	0x2068636e
    1f1c:	69766572 	.word	0x69766572
    1f20:	6e6f6973 	.word	0x6e6f6973
    1f24:	35343220 	.word	0x35343220
    1f28:	5d323135 	.word	0x5d323135
    1f2c:	00000000 	.word	0x00000000
    1f30:	706d6f43 	.word	0x706d6f43
    1f34:	72656c69 	.word	0x72656c69
    1f38:	7325203a 	.word	0x7325203a
    1f3c:	0000000a 	.word	0x0000000a
    1f40:	0a0a0a0a 	.word	0x0a0a0a0a
    1f44:	0a0a0a0a 	.word	0x0a0a0a0a
    1f48:	0a0a0a0a 	.word	0x0a0a0a0a
    1f4c:	0a0a0a0a 	.word	0x0a0a0a0a
    1f50:	00000a0a 	.word	0x00000a0a

00001f54 <g_DeviceNameApollo>:
    1f54:	6c6f7041 00006f6c                       Apollo..

00001f5c <g_DeviceNameApollo2>:
    1f5c:	6c6f7041 00326f6c                       Apollo2.

00001f64 <g_DeviceNameApollo3>:
    1f64:	6c6f7041 00336f6c                       Apollo3.

00001f6c <g_ui8VendorNameAmbq>:
    1f6c:	51424d41 00000000                       AMBQ....

00001f74 <g_ui8VendorNameUnknown>:
    1f74:	3f3f3f3f 00000000                       ????....

00001f7c <g_ui8DeviceNameUnknown>:
    1f7c:	6e6b6e55 206e776f 69766564 00006563     Unknown device..

00001f8c <am_hal_cachectrl_defaults>:
    1f8c:	50000001 00010300 00010101 685f6d61     ...P........am_h
    1f9c:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    1fac:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    1fbc:	63206469 6b636f6c 74657320 676e6974     id clock setting
    1fcc:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    1fdc:	6b6c635f 2e6e6567 00000063              _clkgen.c...

00001fe8 <g_am_hal_mcuctrl_flash_size>:
    1fe8:	00004000 00008000 00010000 00020000     .@..............
    1ff8:	00040000 00080000 00100000 00200000     .............. .
	...
