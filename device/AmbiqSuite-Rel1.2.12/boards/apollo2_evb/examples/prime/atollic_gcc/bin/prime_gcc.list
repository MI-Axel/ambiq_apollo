
prime_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000240c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000014  10001000  0000240c  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000108  10001014  00002420  00021014  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021014  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000a96f  00000000  00000000  0002104b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002279  00000000  00000000  0002b9ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00005a5e  00000000  00000000  0002dc33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000006e0  00000000  00000000  00033691  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00001338  00000000  00000000  00033d71  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00004335  00000000  00000000  000350a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002960  00000000  00000000  000393de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000007c  00000000  00000000  0003bd3e  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00001280  00000000  00000000  0003bdbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 c5 04 00 00 bd 04 00 00 4d 05 00 00     ............M...
      10:	4d 05 00 00 4d 05 00 00 4d 05 00 00 00 00 00 00     M...M...M.......
	...
      2c:	c1 04 00 00 c1 04 00 00 00 00 00 00 c1 04 00 00     ................
      3c:	c1 04 00 00 c1 04 00 00 c1 04 00 00 c1 04 00 00     ................
      4c:	c1 04 00 00 c1 04 00 00 c1 04 00 00 c1 04 00 00     ................
      5c:	c1 04 00 00 c1 04 00 00 c1 04 00 00 c1 04 00 00     ................
      6c:	c1 04 00 00 c1 04 00 00 c1 04 00 00 c1 04 00 00     ................
      7c:	c1 04 00 00 c1 04 00 00 c1 04 00 00 c1 04 00 00     ................
      8c:	c1 04 00 00 c1 04 00 00 c1 04 00 00 c1 04 00 00     ................
      9c:	c1 04 00 00 c1 04 00 00 c1 04 00 00 c1 04 00 00     ................
      ac:	c1 04 00 00 c1 04 00 00 c1 04 00 00 c1 04 00 00     ................
      bc:	c1 04 00 00                                         ....

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <uart_disable.constprop.0>:
//
// Disable the UART
//
//*****************************************************************************
void
uart_disable(uint32_t ui32UartModule)
     160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
{
    //
    // Before disabling the UART, wait a little time to be sure all
    // printing has completed.
    //
    am_util_delay_ms(10);
     164:	200a      	movs	r0, #10
uart_disable(uint32_t ui32UartModule)
     166:	b083      	sub	sp, #12
    am_util_delay_ms(10);
     168:	f000 f9e0 	bl	52c <am_util_delay_ms>

    //
    // Disable and power down the UART.
    //
    am_hal_uart_disable(ui32UartModule);
     16c:	2000      	movs	r0, #0
     16e:	f001 ff9f 	bl	20b0 <am_hal_uart_disable>
    am_hal_uart_pwrctrl_disable(ui32UartModule);
     172:	2000      	movs	r0, #0
     174:	f001 ffc6 	bl	2104 <am_hal_uart_pwrctrl_disable>

    //
    // Turn off UART clock.
    // Note - this is automatically handled in hardware on Apollo2.
    //
    am_hal_uart_clock_disable(ui32UartModule);
     178:	2000      	movs	r0, #0
     17a:	f001 ffe9 	bl	2150 <am_hal_uart_clock_disable>

    //
    // Disable the UART pins.
    //
    am_bsp_pin_disable(COM_UART_TX);
     17e:	f001 fd6b 	bl	1c58 <am_hal_interrupt_master_disable>
     182:	4c1c      	ldr	r4, [pc, #112]	; (1f4 <uart_disable.constprop.0+0x94>)
     184:	4f1c      	ldr	r7, [pc, #112]	; (1f8 <uart_disable.constprop.0+0x98>)
     186:	9000      	str	r0, [sp, #0]
     188:	f04f 0873 	mov.w	r8, #115	; 0x73
     18c:	f8c4 8000 	str.w	r8, [r4]
     190:	683b      	ldr	r3, [r7, #0]
     192:	4e1a      	ldr	r6, [pc, #104]	; (1fc <uart_disable.constprop.0+0x9c>)
     194:	4d1a      	ldr	r5, [pc, #104]	; (200 <uart_disable.constprop.0+0xa0>)
     196:	f023 60e0 	bic.w	r0, r3, #117440512	; 0x7000000
     19a:	6038      	str	r0, [r7, #0]
     19c:	6831      	ldr	r1, [r6, #0]
     19e:	f421 027f 	bic.w	r2, r1, #16711680	; 0xff0000
     1a2:	f442 13c0 	orr.w	r3, r2, #1572864	; 0x180000
     1a6:	6033      	str	r3, [r6, #0]
     1a8:	6828      	ldr	r0, [r5, #0]
     1aa:	f04f 0900 	mov.w	r9, #0
     1ae:	f420 017f 	bic.w	r1, r0, #16711680	; 0xff0000
     1b2:	6029      	str	r1, [r5, #0]
     1b4:	f8c4 9000 	str.w	r9, [r4]
     1b8:	9800      	ldr	r0, [sp, #0]
     1ba:	f001 fd51 	bl	1c60 <am_hal_interrupt_master_set>
    am_bsp_pin_disable(COM_UART_RX);
     1be:	f001 fd4b 	bl	1c58 <am_hal_interrupt_master_disable>
     1c2:	9001      	str	r0, [sp, #4]
     1c4:	f8c4 8000 	str.w	r8, [r4]
     1c8:	683a      	ldr	r2, [r7, #0]
     1ca:	f022 43e0 	bic.w	r3, r2, #1879048192	; 0x70000000
     1ce:	603b      	str	r3, [r7, #0]
     1d0:	6837      	ldr	r7, [r6, #0]
     1d2:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
     1d6:	f040 51c0 	orr.w	r1, r0, #402653184	; 0x18000000
     1da:	6031      	str	r1, [r6, #0]
     1dc:	682e      	ldr	r6, [r5, #0]
     1de:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
     1e2:	602a      	str	r2, [r5, #0]
     1e4:	f8c4 9000 	str.w	r9, [r4]
     1e8:	9801      	ldr	r0, [sp, #4]
     1ea:	f001 fd39 	bl	1c60 <am_hal_interrupt_master_set>
}
     1ee:	b003      	add	sp, #12
     1f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     1f4:	40010060 	.word	0x40010060
     1f8:	40010048 	.word	0x40010048
     1fc:	40010014 	.word	0x40010014
     200:	400100f4 	.word	0x400100f4

00000204 <uart_init.constprop.1>:
uart_init(uint32_t ui32UartModule)
     204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     208:	b083      	sub	sp, #12
    am_bsp_pin_enable(COM_UART_TX);
     20a:	f001 fd25 	bl	1c58 <am_hal_interrupt_master_disable>
     20e:	4d26      	ldr	r5, [pc, #152]	; (2a8 <uart_init.constprop.1+0xa4>)
     210:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 2b8 <uart_init.constprop.1+0xb4>
     214:	9000      	str	r0, [sp, #0]
     216:	f04f 0973 	mov.w	r9, #115	; 0x73
     21a:	f8c5 9000 	str.w	r9, [r5]
     21e:	f8d8 3000 	ldr.w	r3, [r8]
     222:	4f22      	ldr	r7, [pc, #136]	; (2ac <uart_init.constprop.1+0xa8>)
     224:	4e22      	ldr	r6, [pc, #136]	; (2b0 <uart_init.constprop.1+0xac>)
     226:	f023 60e0 	bic.w	r0, r3, #117440512	; 0x7000000
     22a:	f8c8 0000 	str.w	r0, [r8]
     22e:	6839      	ldr	r1, [r7, #0]
     230:	f421 027f 	bic.w	r2, r1, #16711680	; 0xff0000
     234:	603a      	str	r2, [r7, #0]
     236:	6833      	ldr	r3, [r6, #0]
     238:	2400      	movs	r4, #0
     23a:	f423 007f 	bic.w	r0, r3, #16711680	; 0xff0000
     23e:	6030      	str	r0, [r6, #0]
     240:	602c      	str	r4, [r5, #0]
     242:	9800      	ldr	r0, [sp, #0]
     244:	f001 fd0c 	bl	1c60 <am_hal_interrupt_master_set>
    am_bsp_pin_enable(COM_UART_RX);
     248:	f001 fd06 	bl	1c58 <am_hal_interrupt_master_disable>
     24c:	9001      	str	r0, [sp, #4]
     24e:	f8c5 9000 	str.w	r9, [r5]
     252:	f8d8 1000 	ldr.w	r1, [r8]
     256:	f021 42e0 	bic.w	r2, r1, #1879048192	; 0x70000000
     25a:	f8c8 2000 	str.w	r2, [r8]
     25e:	683b      	ldr	r3, [r7, #0]
     260:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
     264:	f040 7100 	orr.w	r1, r0, #33554432	; 0x2000000
     268:	6039      	str	r1, [r7, #0]
     26a:	6837      	ldr	r7, [r6, #0]
     26c:	f027 427f 	bic.w	r2, r7, #4278190080	; 0xff000000
     270:	6032      	str	r2, [r6, #0]
     272:	602c      	str	r4, [r5, #0]
     274:	9801      	ldr	r0, [sp, #4]
     276:	f001 fcf3 	bl	1c60 <am_hal_interrupt_master_set>
    am_hal_uart_pwrctrl_enable(ui32UartModule);
     27a:	4620      	mov	r0, r4
     27c:	f001 ff2e 	bl	20dc <am_hal_uart_pwrctrl_enable>
    am_hal_uart_clock_enable(ui32UartModule);
     280:	4620      	mov	r0, r4
     282:	f001 ff53 	bl	212c <am_hal_uart_clock_enable>
    am_hal_uart_disable(ui32UartModule);
     286:	4620      	mov	r0, r4
     288:	f001 ff12 	bl	20b0 <am_hal_uart_disable>
    am_hal_uart_config(ui32UartModule, &g_sUartConfig);
     28c:	4620      	mov	r0, r4
     28e:	4909      	ldr	r1, [pc, #36]	; (2b4 <uart_init.constprop.1+0xb0>)
     290:	f001 fec2 	bl	2018 <am_hal_uart_config>
    am_hal_uart_fifo_config(ui32UartModule, AM_HAL_UART_TX_FIFO_1_2 | AM_HAL_UART_RX_FIFO_1_2);
     294:	4620      	mov	r0, r4
     296:	2112      	movs	r1, #18
     298:	f001 ff66 	bl	2168 <am_hal_uart_fifo_config>
    am_hal_uart_enable(ui32UartModule);
     29c:	4620      	mov	r0, r4
     29e:	f001 fef1 	bl	2084 <am_hal_uart_enable>
}
     2a2:	b003      	add	sp, #12
     2a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     2a8:	40010060 	.word	0x40010060
     2ac:	40010014 	.word	0x40010014
     2b0:	400100f4 	.word	0x400100f4
     2b4:	10001000 	.word	0x10001000
     2b8:	40010048 	.word	0x40010048

000002bc <main>:
// Main Function.
//
//*****************************************************************************
int
main(void)
{
     2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Set the clock frequency.
    //
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
#else
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     2be:	2000      	movs	r0, #0
     2c0:	f001 fc6e 	bl	1ba0 <am_hal_clkgen_sysclk_select>
    //
#if AM_APOLLO3_CACHECTRL
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    am_hal_cachectrl_enable();
#else
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     2c4:	4823      	ldr	r0, [pc, #140]	; (354 <main+0x98>)
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
     2c6:	4f24      	ldr	r7, [pc, #144]	; (358 <main+0x9c>)
    AM_REG(MCUCTRL, BODPORCTRL) = 0x2;  // 3=disable both 2=disable BOD 1=disable PDR
     2c8:	4e24      	ldr	r6, [pc, #144]	; (35c <main+0xa0>)
    AM_REG(PWRCTRL, DEVICEEN) = 0;
     2ca:	4d25      	ldr	r5, [pc, #148]	; (360 <main+0xa4>)
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     2cc:	f001 fbd2 	bl	1a74 <am_hal_cachectrl_enable>
#endif

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     2d0:	f001 fbba 	bl	1a48 <am_bsp_low_power_init>

#if (PRINT_UART == 1)
    //
    // Initialize the printf interface for UART output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t)am_bsp_uart_string_print);
     2d4:	4823      	ldr	r0, [pc, #140]	; (364 <main+0xa8>)
     2d6:	f000 fa9b 	bl	810 <am_util_stdio_printf_init>

    //
    // Initialize the UART print interface
    //
    uart_init(ui32UartModule);
     2da:	f7ff ff93 	bl	204 <uart_init.constprop.1>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
     2de:	f001 fbad 	bl	1a3c <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Ambiq Micro 'prime' example.\n\n");
     2e2:	4821      	ldr	r0, [pc, #132]	; (368 <main+0xac>)
     2e4:	f001 fb90 	bl	1a08 <am_util_stdio_printf>

    //
    // Brief description
    //
    am_util_stdio_printf("Used for measuring power while computing the number of prime numbers in a range.\n");
     2e8:	4820      	ldr	r0, [pc, #128]	; (36c <main+0xb0>)
     2ea:	f001 fb8d 	bl	1a08 <am_util_stdio_printf>

    //
    // Print the compiler version.
    //
    am_util_stdio_printf("Compiler: %s\n", COMPILER_VERSION);
     2ee:	4920      	ldr	r1, [pc, #128]	; (370 <main+0xb4>)
     2f0:	4820      	ldr	r0, [pc, #128]	; (374 <main+0xb8>)
     2f2:	f001 fb89 	bl	1a08 <am_util_stdio_printf>

    //
    // To minimize power during the run, disable the UART.
    //
    uart_disable(ui32UartModule);
     2f6:	f7ff ff33 	bl	160 <uart_disable.constprop.0>
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     2fa:	4816      	ldr	r0, [pc, #88]	; (354 <main+0x98>)
     2fc:	f001 fbba 	bl	1a74 <am_hal_cachectrl_enable>
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_FLASH512K);
     300:	f44f 6000 	mov.w	r0, #2048	; 0x800
     304:	f001 fd38 	bl	1d78 <am_hal_pwrctrl_memory_enable>
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_SRAM8K);
     308:	2001      	movs	r0, #1
     30a:	f001 fd35 	bl	1d78 <am_hal_pwrctrl_memory_enable>
    AM_BFW(CLKGEN, OCTRL, OSEL, 1);
     30e:	4a1a      	ldr	r2, [pc, #104]	; (378 <main+0xbc>)
        set_for_min_power();

        //
        // Determine the number of primes for the given value.
        //
        ui32Result = prime_number(NUM_OF_PRIMES_IN, 0, 1);
     310:	481a      	ldr	r0, [pc, #104]	; (37c <main+0xc0>)
    AM_BFW(CLKGEN, OCTRL, OSEL, 1);
     312:	6813      	ldr	r3, [r2, #0]
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
     314:	f04f 0c37 	mov.w	ip, #55	; 0x37
    AM_BFW(CLKGEN, OCTRL, OSEL, 1);
     318:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    AM_REG(MCUCTRL, BODPORCTRL) = 0x2;  // 3=disable both 2=disable BOD 1=disable PDR
     31c:	f04f 0e02 	mov.w	lr, #2
    AM_REG(PWRCTRL, DEVICEEN) = 0;
     320:	2400      	movs	r4, #0
    AM_BFW(CLKGEN, OCTRL, OSEL, 1);
     322:	6011      	str	r1, [r2, #0]
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
     324:	f8c7 c000 	str.w	ip, [r7]
        ui32Result = prime_number(NUM_OF_PRIMES_IN, 0, 1);
     328:	4621      	mov	r1, r4
    AM_REG(MCUCTRL, BODPORCTRL) = 0x2;  // 3=disable both 2=disable BOD 1=disable PDR
     32a:	f8c6 e000 	str.w	lr, [r6]
        ui32Result = prime_number(NUM_OF_PRIMES_IN, 0, 1);
     32e:	2201      	movs	r2, #1
    AM_REG(PWRCTRL, DEVICEEN) = 0;
     330:	602c      	str	r4, [r5, #0]
        ui32Result = prime_number(NUM_OF_PRIMES_IN, 0, 1);
     332:	f000 f829 	bl	388 <prime_number>
     336:	4604      	mov	r4, r0

#if (PRINT_UART == 1)
        //
        // Print the result
        //
        uart_init(ui32UartModule);
     338:	f7ff ff64 	bl	204 <uart_init.constprop.1>

        if ( ui32Result == EXP_PRIMES )
     33c:	f242 5078 	movw	r0, #9592	; 0x2578
     340:	4284      	cmp	r4, r0
        {
            am_util_stdio_printf("Pass: number of primes for %d is %d.\n", NUM_OF_PRIMES_IN, ui32Result);
        }
        else
        {
            am_util_stdio_printf("ERROR: Invalid result. Expected %d, got %d.\n", NUM_OF_PRIMES_IN, ui32Result);
     342:	4622      	mov	r2, r4
     344:	490d      	ldr	r1, [pc, #52]	; (37c <main+0xc0>)
     346:	480e      	ldr	r0, [pc, #56]	; (380 <main+0xc4>)
            am_util_stdio_printf("Pass: number of primes for %d is %d.\n", NUM_OF_PRIMES_IN, ui32Result);
     348:	bf08      	it	eq
     34a:	480e      	ldreq	r0, [pc, #56]	; (384 <main+0xc8>)
            am_util_stdio_printf("ERROR: Invalid result. Expected %d, got %d.\n", NUM_OF_PRIMES_IN, ui32Result);
     34c:	f001 fb5c 	bl	1a08 <am_util_stdio_printf>
     350:	e7d1      	b.n	2f6 <main+0x3a>
     352:	bf00      	nop
     354:	000022e8 	.word	0x000022e8
     358:	4000c008 	.word	0x4000c008
     35c:	40020100 	.word	0x40020100
     360:	40021008 	.word	0x40021008
     364:	00001a6d 	.word	0x00001a6d
     368:	000021b0 	.word	0x000021b0
     36c:	000021d0 	.word	0x000021d0
     370:	00002224 	.word	0x00002224
     374:	0000226c 	.word	0x0000226c
     378:	4000400c 	.word	0x4000400c
     37c:	000186a0 	.word	0x000186a0
     380:	000022a4 	.word	0x000022a4
     384:	0000227c 	.word	0x0000227c

00000388 <prime_number>:
  int prime;
  int total;

  total = 0;

  for ( i = 2 + id; i <= n; i = i + p )
     388:	3102      	adds	r1, #2
     38a:	4281      	cmp	r1, r0
     38c:	f300 8093 	bgt.w	4b6 <prime_number+0x12e>
{
     390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for ( i = 2 + id; i <= n; i = i + p )
     394:	f04f 0c00 	mov.w	ip, #0
  {
    prime = 1;
    for ( j = 2; j < i; j++ )
     398:	2902      	cmp	r1, #2
     39a:	f340 8089 	ble.w	4b0 <prime_number+0x128>
    {
      if ( ( i % j ) == 0 )
     39e:	f011 0e01 	ands.w	lr, r1, #1
     3a2:	d07d      	beq.n	4a0 <prime_number+0x118>
     3a4:	1ecc      	subs	r4, r1, #3
     3a6:	f014 0607 	ands.w	r6, r4, #7
     3aa:	f04f 0302 	mov.w	r3, #2
     3ae:	d03b      	beq.n	428 <prime_number+0xa0>
    for ( j = 2; j < i; j++ )
     3b0:	2303      	movs	r3, #3
      if ( ( i % j ) == 0 )
     3b2:	fb91 f5f3 	sdiv	r5, r1, r3
     3b6:	fb03 1715 	mls	r7, r3, r5, r1
     3ba:	2f00      	cmp	r7, #0
     3bc:	d06e      	beq.n	49c <prime_number+0x114>
     3be:	2e01      	cmp	r6, #1
     3c0:	d032      	beq.n	428 <prime_number+0xa0>
     3c2:	2e02      	cmp	r6, #2
     3c4:	d02a      	beq.n	41c <prime_number+0x94>
     3c6:	429e      	cmp	r6, r3
     3c8:	d021      	beq.n	40e <prime_number+0x86>
     3ca:	2e04      	cmp	r6, #4
     3cc:	d018      	beq.n	400 <prime_number+0x78>
     3ce:	2e05      	cmp	r6, #5
     3d0:	d00f      	beq.n	3f2 <prime_number+0x6a>
     3d2:	2e06      	cmp	r6, #6
     3d4:	d006      	beq.n	3e4 <prime_number+0x5c>
    for ( j = 2; j < i; j++ )
     3d6:	3301      	adds	r3, #1
      if ( ( i % j ) == 0 )
     3d8:	fb91 f8f3 	sdiv	r8, r1, r3
     3dc:	fb03 1418 	mls	r4, r3, r8, r1
     3e0:	2c00      	cmp	r4, #0
     3e2:	d05b      	beq.n	49c <prime_number+0x114>
    for ( j = 2; j < i; j++ )
     3e4:	3301      	adds	r3, #1
      if ( ( i % j ) == 0 )
     3e6:	fb91 f6f3 	sdiv	r6, r1, r3
     3ea:	fb03 1516 	mls	r5, r3, r6, r1
     3ee:	2d00      	cmp	r5, #0
     3f0:	d054      	beq.n	49c <prime_number+0x114>
    for ( j = 2; j < i; j++ )
     3f2:	3301      	adds	r3, #1
      if ( ( i % j ) == 0 )
     3f4:	fb91 f7f3 	sdiv	r7, r1, r3
     3f8:	fb03 1417 	mls	r4, r3, r7, r1
     3fc:	2c00      	cmp	r4, #0
     3fe:	d04d      	beq.n	49c <prime_number+0x114>
    for ( j = 2; j < i; j++ )
     400:	3301      	adds	r3, #1
      if ( ( i % j ) == 0 )
     402:	fb91 f6f3 	sdiv	r6, r1, r3
     406:	fb03 1516 	mls	r5, r3, r6, r1
     40a:	2d00      	cmp	r5, #0
     40c:	d046      	beq.n	49c <prime_number+0x114>
    for ( j = 2; j < i; j++ )
     40e:	3301      	adds	r3, #1
      if ( ( i % j ) == 0 )
     410:	fb91 f7f3 	sdiv	r7, r1, r3
     414:	fb03 1417 	mls	r4, r3, r7, r1
     418:	2c00      	cmp	r4, #0
     41a:	d03f      	beq.n	49c <prime_number+0x114>
    for ( j = 2; j < i; j++ )
     41c:	3301      	adds	r3, #1
      if ( ( i % j ) == 0 )
     41e:	fb91 f6f3 	sdiv	r6, r1, r3
     422:	fb03 1516 	mls	r5, r3, r6, r1
     426:	b3cd      	cbz	r5, 49c <prime_number+0x114>
    for ( j = 2; j < i; j++ )
     428:	1c5c      	adds	r4, r3, #1
     42a:	428c      	cmp	r4, r1
     42c:	f103 0603 	add.w	r6, r3, #3
     430:	f103 0704 	add.w	r7, r3, #4
     434:	f103 0805 	add.w	r8, r3, #5
     438:	f103 0906 	add.w	r9, r3, #6
     43c:	f103 0a07 	add.w	sl, r3, #7
     440:	f104 0501 	add.w	r5, r4, #1
     444:	f103 0308 	add.w	r3, r3, #8
     448:	d02a      	beq.n	4a0 <prime_number+0x118>
      if ( ( i % j ) == 0 )
     44a:	fb91 fbf4 	sdiv	fp, r1, r4
     44e:	fb04 141b 	mls	r4, r4, fp, r1
     452:	b31c      	cbz	r4, 49c <prime_number+0x114>
     454:	fb91 fbf5 	sdiv	fp, r1, r5
     458:	fb05 151b 	mls	r5, r5, fp, r1
     45c:	b1f5      	cbz	r5, 49c <prime_number+0x114>
     45e:	fb91 f4f6 	sdiv	r4, r1, r6
     462:	fb06 1614 	mls	r6, r6, r4, r1
     466:	b1ce      	cbz	r6, 49c <prime_number+0x114>
     468:	fb91 f5f7 	sdiv	r5, r1, r7
     46c:	fb07 1715 	mls	r7, r7, r5, r1
     470:	b1a7      	cbz	r7, 49c <prime_number+0x114>
     472:	fb91 fbf8 	sdiv	fp, r1, r8
     476:	fb08 141b 	mls	r4, r8, fp, r1
     47a:	b17c      	cbz	r4, 49c <prime_number+0x114>
     47c:	fb91 f6f9 	sdiv	r6, r1, r9
     480:	fb09 1516 	mls	r5, r9, r6, r1
     484:	b155      	cbz	r5, 49c <prime_number+0x114>
     486:	fb91 f7fa 	sdiv	r7, r1, sl
     48a:	fb0a 1417 	mls	r4, sl, r7, r1
     48e:	b12c      	cbz	r4, 49c <prime_number+0x114>
     490:	fb91 f6f3 	sdiv	r6, r1, r3
     494:	fb03 1516 	mls	r5, r3, r6, r1
     498:	2d00      	cmp	r5, #0
     49a:	d1c5      	bne.n	428 <prime_number+0xa0>
      {
        prime = 0;
     49c:	f04f 0e00 	mov.w	lr, #0
  for ( i = 2 + id; i <= n; i = i + p )
     4a0:	4411      	add	r1, r2
     4a2:	4288      	cmp	r0, r1
        break;
      }
    }
    total = total + prime;
     4a4:	44f4      	add	ip, lr
  for ( i = 2 + id; i <= n; i = i + p )
     4a6:	f6bf af77 	bge.w	398 <prime_number+0x10>
  }
  return total;
}
     4aa:	4660      	mov	r0, ip
     4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    prime = 1;
     4b0:	f04f 0e01 	mov.w	lr, #1
     4b4:	e7f4      	b.n	4a0 <prime_number+0x118>
  total = 0;
     4b6:	2000      	movs	r0, #0
}
     4b8:	4770      	bx	lr
     4ba:	bf00      	nop

000004bc <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     4bc:	e7fe      	b.n	4bc <am_nmi_isr>
     4be:	bf00      	nop

000004c0 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     4c0:	e7fe      	b.n	4c0 <am_adc_isr>
     4c2:	bf00      	nop

000004c4 <am_reset_isr>:
    __asm("    ldr    r0, =0xE000ED08\n"
     4c4:	4811      	ldr	r0, [pc, #68]	; (50c <zero_loop+0x12>)
     4c6:	4912      	ldr	r1, [pc, #72]	; (510 <zero_loop+0x16>)
     4c8:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
     4ca:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
     4ce:	4811      	ldr	r0, [pc, #68]	; (514 <zero_loop+0x1a>)
     4d0:	6801      	ldr	r1, [r0, #0]
     4d2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     4d6:	6001      	str	r1, [r0, #0]
     4d8:	f3bf 8f4f 	dsb	sy
     4dc:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
     4e0:	480d      	ldr	r0, [pc, #52]	; (518 <zero_loop+0x1e>)
     4e2:	490e      	ldr	r1, [pc, #56]	; (51c <zero_loop+0x22>)
     4e4:	4a0e      	ldr	r2, [pc, #56]	; (520 <zero_loop+0x26>)

000004e6 <copy_loop>:
     4e6:	f850 3b04 	ldr.w	r3, [r0], #4
     4ea:	f841 3b04 	str.w	r3, [r1], #4
     4ee:	4291      	cmp	r1, r2
     4f0:	dbf9      	blt.n	4e6 <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
     4f2:	480c      	ldr	r0, [pc, #48]	; (524 <zero_loop+0x2a>)
     4f4:	490c      	ldr	r1, [pc, #48]	; (528 <zero_loop+0x2e>)
     4f6:	f04f 0200 	mov.w	r2, #0

000004fa <zero_loop>:
     4fa:	4288      	cmp	r0, r1
     4fc:	bfb8      	it	lt
     4fe:	f840 2b04 	strlt.w	r2, [r0], #4
     502:	dbfa      	blt.n	4fa <zero_loop>
    main();
     504:	f7ff feda 	bl	2bc <main>
    __asm("    bkpt     ");
     508:	be00      	bkpt	0x0000
     50a:	0000      	.short	0x0000
     50c:	e000ed08 	.word	0xe000ed08
     510:	00000000 	.word	0x00000000
     514:	e000ed88 	.word	0xe000ed88
     518:	0000240c 	.word	0x0000240c
     51c:	10001000 	.word	0x10001000
     520:	10001014 	.word	0x10001014
     524:	10001014 	.word	0x10001014
     528:	1000111c 	.word	0x1000111c

0000052c <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
     52c:	b510      	push	{r4, lr}
     52e:	4604      	mov	r4, r0
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
     530:	f001 fb4e 	bl	1bd0 <am_hal_clkgen_sysclk_get>
#endif
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
     534:	4b04      	ldr	r3, [pc, #16]	; (548 <am_util_delay_ms+0x1c>)
     536:	fba3 3000 	umull	r3, r0, r3, r0
     53a:	0980      	lsrs	r0, r0, #6

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
     53c:	fb04 f000 	mul.w	r0, r4, r0
}
     540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_flash_delay(ui32Loops);
     544:	f001 bb84 	b.w	1c50 <am_hal_flash_delay>
     548:	057619f1 	.word	0x057619f1

0000054c <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     54c:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     54e:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     550:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     552:	f000 f805 	bl	560 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     556:	bd01      	pop	{r0, pc}

00000558 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     558:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     55a:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     55c:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     55e:	4770      	bx	lr

00000560 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     560:	b500      	push	{lr}
     562:	b093      	sub	sp, #76	; 0x4c
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     564:	2300      	movs	r3, #0
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     566:	4a2d      	ldr	r2, [pc, #180]	; (61c <am_util_faultisr_collect_data+0xbc>)
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     568:	9310      	str	r3, [sp, #64]	; 0x40
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     56a:	9301      	str	r3, [sp, #4]
     56c:	9300      	str	r3, [sp, #0]
     56e:	9302      	str	r3, [sp, #8]
     570:	9303      	str	r3, [sp, #12]
     572:	9304      	str	r3, [sp, #16]
     574:	9305      	str	r3, [sp, #20]
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     576:	6811      	ldr	r1, [r2, #0]
     578:	9110      	str	r1, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     57a:	9b10      	ldr	r3, [sp, #64]	; 0x40
     57c:	b2d9      	uxtb	r1, r3
     57e:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     582:	9b10      	ldr	r3, [sp, #64]	; 0x40
     584:	f3c3 2107 	ubfx	r1, r3, #8, #8
     588:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     58c:	9b10      	ldr	r3, [sp, #64]	; 0x40
     58e:	0c19      	lsrs	r1, r3, #16
     590:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     594:	6912      	ldr	r2, [r2, #16]
     596:	920f      	str	r2, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     598:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
     59c:	078a      	lsls	r2, r1, #30
{
     59e:	4603      	mov	r3, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     5a0:	d436      	bmi.n	610 <am_util_faultisr_collect_data+0xb0>
     5a2:	f04f 32ff 	mov.w	r2, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     5a6:	4619      	mov	r1, r3
     5a8:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     5aa:	920e      	str	r2, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     5ac:	f7ff ffd4 	bl	558 <getStackedReg>
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     5b0:	4619      	mov	r1, r3
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     5b2:	4602      	mov	r2, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     5b4:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     5b6:	9206      	str	r2, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     5b8:	f7ff ffce 	bl	558 <getStackedReg>
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     5bc:	4619      	mov	r1, r3
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     5be:	4602      	mov	r2, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     5c0:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     5c2:	9207      	str	r2, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     5c4:	f7ff ffc8 	bl	558 <getStackedReg>
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     5c8:	4619      	mov	r1, r3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     5ca:	4602      	mov	r2, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     5cc:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     5ce:	9208      	str	r2, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     5d0:	f7ff ffc2 	bl	558 <getStackedReg>
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     5d4:	4619      	mov	r1, r3
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     5d6:	4602      	mov	r2, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     5d8:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     5da:	9209      	str	r2, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     5dc:	f7ff ffbc 	bl	558 <getStackedReg>
     5e0:	4602      	mov	r2, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     5e2:	4619      	mov	r1, r3
     5e4:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     5e6:	920a      	str	r2, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     5e8:	f7ff ffb6 	bl	558 <getStackedReg>
     5ec:	4602      	mov	r2, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     5ee:	4619      	mov	r1, r3
     5f0:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     5f2:	920b      	str	r2, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     5f4:	f7ff ffb0 	bl	558 <getStackedReg>
     5f8:	4602      	mov	r2, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     5fa:	4619      	mov	r1, r3
     5fc:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     5fe:	920c      	str	r2, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     600:	f7ff ffaa 	bl	558 <getStackedReg>
     604:	4601      	mov	r1, r0
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     606:	4668      	mov	r0, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     608:	910d      	str	r1, [sp, #52]	; 0x34
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     60a:	f001 fb2d 	bl	1c68 <am_hal_mcuctrl_fault_status>
     60e:	e7fe      	b.n	60e <am_util_faultisr_collect_data+0xae>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     610:	4601      	mov	r1, r0
     612:	2006      	movs	r0, #6
     614:	f7ff ffa0 	bl	558 <getStackedReg>
     618:	4602      	mov	r2, r0
     61a:	e7c4      	b.n	5a6 <am_util_faultisr_collect_data+0x46>
     61c:	e000ed28 	.word	0xe000ed28

00000620 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     624:	b095      	sub	sp, #84	; 0x54
     626:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
     62a:	4604      	mov	r4, r0
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
     62c:	2001      	movs	r0, #1
{
     62e:	460d      	mov	r5, r1
     630:	920b      	str	r2, [sp, #44]	; 0x2c
     632:	46f4      	mov	ip, lr
     634:	900a      	str	r0, [sp, #40]	; 0x28
     636:	e00b      	b.n	650 <uint64_to_str+0x30>
        tbuf[ix++] = uMod + '0';
     638:	f88c 3000 	strb.w	r3, [ip]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     63c:	4604      	mov	r4, r0
     63e:	2500      	movs	r5, #0
        ui64Val = u64Tmp;
    } while ( ui64Val );
     640:	2800      	cmp	r0, #0
     642:	f000 8083 	beq.w	74c <uint64_to_str+0x12c>
     646:	990a      	ldr	r1, [sp, #40]	; 0x28
     648:	3101      	adds	r1, #1
     64a:	910a      	str	r1, [sp, #40]	; 0x28
     64c:	f10c 0c01 	add.w	ip, ip, #1
        q32 = (ui32Val>>1) + (ui32Val>>2);
     650:	08a3      	lsrs	r3, r4, #2
     652:	eb03 0154 	add.w	r1, r3, r4, lsr #1
        q32 += (q32 >> 4);
     656:	eb01 1211 	add.w	r2, r1, r1, lsr #4
        q32 += (q32 >> 8);
     65a:	eb02 2612 	add.w	r6, r2, r2, lsr #8
        q32 += (q32 >> 16);
     65e:	eb06 4716 	add.w	r7, r6, r6, lsr #16
        q32 >>= 3;
     662:	08f8      	lsrs	r0, r7, #3
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     664:	1da3      	adds	r3, r4, #6
        r32 = ui32Val - q32*10;
     666:	eb00 0880 	add.w	r8, r0, r0, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     66a:	eba3 0148 	sub.w	r1, r3, r8, lsl #1
     66e:	eb00 1011 	add.w	r0, r0, r1, lsr #4
    if ( ui64Val >> 32 )
     672:	462e      	mov	r6, r5
        uMod = ui64Val - (u64Tmp * 10);
     674:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    if ( ui64Val >> 32 )
     678:	2700      	movs	r7, #0
        uMod = ui64Val - (u64Tmp * 10);
     67a:	eba4 0342 	sub.w	r3, r4, r2, lsl #1
    if ( ui64Val >> 32 )
     67e:	ea56 0107 	orrs.w	r1, r6, r7
        tbuf[ix++] = uMod + '0';
     682:	f103 0330 	add.w	r3, r3, #48	; 0x30
    if ( ui64Val >> 32 )
     686:	d0d7      	beq.n	638 <uint64_to_str+0x18>
        q64 = (ui64Val>>1) + (ui64Val>>2);
     688:	08a0      	lsrs	r0, r4, #2
     68a:	ea40 7385 	orr.w	r3, r0, r5, lsl #30
     68e:	08ae      	lsrs	r6, r5, #2
     690:	9304      	str	r3, [sp, #16]
     692:	9605      	str	r6, [sp, #20]
     694:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
     698:	086b      	lsrs	r3, r5, #1
     69a:	ea4f 0234 	mov.w	r2, r4, rrx
     69e:	1882      	adds	r2, r0, r2
     6a0:	eb41 0303 	adc.w	r3, r1, r3
        q64 += (q64 >> 4);
     6a4:	0911      	lsrs	r1, r2, #4
     6a6:	ea41 7003 	orr.w	r0, r1, r3, lsl #28
     6aa:	1812      	adds	r2, r2, r0
     6ac:	ea4f 1613 	mov.w	r6, r3, lsr #4
     6b0:	4173      	adcs	r3, r6
        q64 += (q64 >> 8);
     6b2:	0a11      	lsrs	r1, r2, #8
     6b4:	ea41 6003 	orr.w	r0, r1, r3, lsl #24
     6b8:	0a1e      	lsrs	r6, r3, #8
     6ba:	9601      	str	r6, [sp, #4]
     6bc:	9000      	str	r0, [sp, #0]
     6be:	e9dd 0100 	ldrd	r0, r1, [sp]
     6c2:	1882      	adds	r2, r0, r2
     6c4:	4616      	mov	r6, r2
     6c6:	eb41 0303 	adc.w	r3, r1, r3
        q64 += (q64 >> 16);
     6ca:	0c31      	lsrs	r1, r6, #16
        q64 += (q64 >> 8);
     6cc:	461a      	mov	r2, r3
        q64 += (q64 >> 16);
     6ce:	ea41 4003 	orr.w	r0, r1, r3, lsl #16
     6d2:	0c1b      	lsrs	r3, r3, #16
     6d4:	9303      	str	r3, [sp, #12]
     6d6:	9002      	str	r0, [sp, #8]
     6d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
     6dc:	eb10 0806 	adds.w	r8, r0, r6
     6e0:	eb41 0302 	adc.w	r3, r1, r2
        q64 += (q64 >> 32);
     6e4:	9308      	str	r3, [sp, #32]
     6e6:	9709      	str	r7, [sp, #36]	; 0x24
     6e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
     6ec:	eb10 0208 	adds.w	r2, r0, r8
     6f0:	eb41 0303 	adc.w	r3, r1, r3
        q64 >>= 3;
     6f4:	08d1      	lsrs	r1, r2, #3
     6f6:	ea41 7643 	orr.w	r6, r1, r3, lsl #29
     6fa:	08df      	lsrs	r7, r3, #3
        r64 = ui64Val - q64*10;
     6fc:	00b8      	lsls	r0, r7, #2
     6fe:	ea4f 0a86 	mov.w	sl, r6, lsl #2
     702:	eb1a 0906 	adds.w	r9, sl, r6
     706:	ea40 7896 	orr.w	r8, r0, r6, lsr #30
     70a:	eb48 0307 	adc.w	r3, r8, r7
     70e:	eb19 0209 	adds.w	r2, r9, r9
     712:	415b      	adcs	r3, r3
        return q64 + ((r64 + 6) >> 4);
     714:	f114 0b06 	adds.w	fp, r4, #6
     718:	f145 0500 	adc.w	r5, r5, #0
     71c:	ebbb 0202 	subs.w	r2, fp, r2
     720:	eb65 0303 	sbc.w	r3, r5, r3
     724:	0915      	lsrs	r5, r2, #4
     726:	ea45 7203 	orr.w	r2, r5, r3, lsl #28
     72a:	091b      	lsrs	r3, r3, #4
     72c:	9206      	str	r2, [sp, #24]
     72e:	9307      	str	r3, [sp, #28]
     730:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
     734:	1996      	adds	r6, r2, r6
     736:	eb43 0507 	adc.w	r5, r3, r7
        uMod = ui64Val - (u64Tmp * 10);
     73a:	eb06 0786 	add.w	r7, r6, r6, lsl #2
     73e:	eba4 0447 	sub.w	r4, r4, r7, lsl #1
        tbuf[ix++] = uMod + '0';
     742:	3430      	adds	r4, #48	; 0x30
     744:	f88c 4000 	strb.w	r4, [ip]
     748:	4634      	mov	r4, r6
     74a:	e77c      	b.n	646 <uint64_to_str+0x26>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     74c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
     74e:	980a      	ldr	r0, [sp, #40]	; 0x28
     750:	2e00      	cmp	r6, #0
     752:	d059      	beq.n	808 <uint64_to_str+0x1e8>
     754:	eb0e 0a00 	add.w	sl, lr, r0
     758:	46d3      	mov	fp, sl
     75a:	ea6f 0c0e 	mvn.w	ip, lr
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
     75e:	f81b 7d01 	ldrb.w	r7, [fp, #-1]!
     762:	7037      	strb	r7, [r6, #0]
     764:	44d4      	add	ip, sl
        while ( ix-- )
     766:	45de      	cmp	lr, fp
     768:	4632      	mov	r2, r6
     76a:	f00c 0107 	and.w	r1, ip, #7
     76e:	bf08      	it	eq
     770:	4632      	moveq	r2, r6
     772:	d047      	beq.n	804 <uint64_to_str+0x1e4>
     774:	b349      	cbz	r1, 7ca <uint64_to_str+0x1aa>
     776:	2901      	cmp	r1, #1
     778:	d021      	beq.n	7be <uint64_to_str+0x19e>
     77a:	2902      	cmp	r1, #2
     77c:	d01b      	beq.n	7b6 <uint64_to_str+0x196>
     77e:	2903      	cmp	r1, #3
     780:	d015      	beq.n	7ae <uint64_to_str+0x18e>
     782:	2904      	cmp	r1, #4
     784:	d00f      	beq.n	7a6 <uint64_to_str+0x186>
     786:	2905      	cmp	r1, #5
     788:	d009      	beq.n	79e <uint64_to_str+0x17e>
     78a:	2906      	cmp	r1, #6
            *pcBuf++ = tbuf[ix];
     78c:	bf1c      	itt	ne
     78e:	f81b 1d01 	ldrbne.w	r1, [fp, #-1]!
     792:	f802 1f01 	strbne.w	r1, [r2, #1]!
     796:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
     79a:	f802 3f01 	strb.w	r3, [r2, #1]!
     79e:	f81b 6d01 	ldrb.w	r6, [fp, #-1]!
     7a2:	f802 6f01 	strb.w	r6, [r2, #1]!
     7a6:	f81b 4d01 	ldrb.w	r4, [fp, #-1]!
     7aa:	f802 4f01 	strb.w	r4, [r2, #1]!
     7ae:	f81b 7d01 	ldrb.w	r7, [fp, #-1]!
     7b2:	f802 7f01 	strb.w	r7, [r2, #1]!
     7b6:	f81b 5d01 	ldrb.w	r5, [fp, #-1]!
     7ba:	f802 5f01 	strb.w	r5, [r2, #1]!
     7be:	f81b 8d01 	ldrb.w	r8, [fp, #-1]!
     7c2:	f802 8f01 	strb.w	r8, [r2, #1]!
        while ( ix-- )
     7c6:	45de      	cmp	lr, fp
     7c8:	d01b      	beq.n	802 <uint64_to_str+0x1e2>
            *pcBuf++ = tbuf[ix];
     7ca:	f81b 1c01 	ldrb.w	r1, [fp, #-1]
     7ce:	f81b 3c02 	ldrb.w	r3, [fp, #-2]
     7d2:	f81b 9c03 	ldrb.w	r9, [fp, #-3]
     7d6:	f81b 7c04 	ldrb.w	r7, [fp, #-4]
     7da:	f81b 6c05 	ldrb.w	r6, [fp, #-5]
     7de:	f81b 5c06 	ldrb.w	r5, [fp, #-6]
     7e2:	f81b 4c07 	ldrb.w	r4, [fp, #-7]
     7e6:	f81b ad08 	ldrb.w	sl, [fp, #-8]!
     7ea:	7051      	strb	r1, [r2, #1]
        while ( ix-- )
     7ec:	45de      	cmp	lr, fp
            *pcBuf++ = tbuf[ix];
     7ee:	7093      	strb	r3, [r2, #2]
     7f0:	f882 9003 	strb.w	r9, [r2, #3]
     7f4:	7117      	strb	r7, [r2, #4]
     7f6:	7156      	strb	r6, [r2, #5]
     7f8:	7195      	strb	r5, [r2, #6]
     7fa:	71d4      	strb	r4, [r2, #7]
     7fc:	f802 af08 	strb.w	sl, [r2, #8]!
        while ( ix-- )
     800:	d1e3      	bne.n	7ca <uint64_to_str+0x1aa>
     802:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     804:	2100      	movs	r1, #0
     806:	5411      	strb	r1, [r2, r0]
    }

    return iNumDig;
}
     808:	b015      	add	sp, #84	; 0x54
     80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     80e:	bf00      	nop

00000810 <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
     810:	4b01      	ldr	r3, [pc, #4]	; (818 <am_util_stdio_printf_init+0x8>)
     812:	6018      	str	r0, [r3, #0]
     814:	4770      	bx	lr
     816:	bf00      	nop
     818:	10001118 	.word	0x10001118

0000081c <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     820:	4680      	mov	r8, r0
     822:	b0b1      	sub	sp, #196	; 0xc4
     824:	4693      	mov	fp, r2
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     826:	f04f 0900 	mov.w	r9, #0
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
     82a:	780b      	ldrb	r3, [r1, #0]
     82c:	b183      	cbz	r3, 850 <am_util_stdio_vsprintf+0x34>
    {
        iPrecision = 6;             // printf() default precision for %f is 6

        if ( *pcFmt != '%' )
     82e:	2b25      	cmp	r3, #37	; 0x25
     830:	d017      	beq.n	862 <am_util_stdio_vsprintf+0x46>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     832:	f1b8 0f00 	cmp.w	r8, #0
     836:	d005      	beq.n	844 <am_util_stdio_vsprintf+0x28>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     838:	2b0a      	cmp	r3, #10
     83a:	d038      	beq.n	8ae <am_util_stdio_vsprintf+0x92>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
     83c:	f888 3000 	strb.w	r3, [r8]
     840:	f108 0801 	add.w	r8, r8, #1
            }

            ++pcFmt;
     844:	3101      	adds	r1, #1
    while ( *pcFmt != 0x0 )
     846:	780b      	ldrb	r3, [r1, #0]
            ++ui32CharCnt;
     848:	f109 0901 	add.w	r9, r9, #1
    while ( *pcFmt != 0x0 )
     84c:	2b00      	cmp	r3, #0
     84e:	d1ee      	bne.n	82e <am_util_stdio_vsprintf+0x12>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
     850:	f1b8 0f00 	cmp.w	r8, #0
     854:	d001      	beq.n	85a <am_util_stdio_vsprintf+0x3e>
    {
        *pcBuf = 0x0;
     856:	f888 3000 	strb.w	r3, [r8]
    }

    return (ui32CharCnt);
}
     85a:	4648      	mov	r0, r9
     85c:	b031      	add	sp, #196	; 0xc4
     85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( *pcFmt == '0' )
     862:	784a      	ldrb	r2, [r1, #1]
     864:	2a30      	cmp	r2, #48	; 0x30
     866:	d03b      	beq.n	8e0 <am_util_stdio_vsprintf+0xc4>
        ++pcFmt;
     868:	1c4e      	adds	r6, r1, #1
        ui8PadChar = ' ';
     86a:	2520      	movs	r5, #32
    if ( *pcStr == '-')
     86c:	2a2d      	cmp	r2, #45	; 0x2d
     86e:	d02c      	beq.n	8ca <am_util_stdio_vsprintf+0xae>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     870:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
     874:	2809      	cmp	r0, #9
     876:	d837      	bhi.n	8e8 <am_util_stdio_vsprintf+0xcc>
    uint32_t ui32Val = 0, uCnt = 0;
     878:	2100      	movs	r1, #0
    bool bNeg = false;
     87a:	468e      	mov	lr, r1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     87c:	4630      	mov	r0, r6
        bNeg = true;
     87e:	f04f 0c00 	mov.w	ip, #0
        ui32Val *= 10;
     882:	eb0c 078c 	add.w	r7, ip, ip, lsl #2
        ui32Val += (*pcStr - '0');
     886:	eb02 0a47 	add.w	sl, r2, r7, lsl #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     88a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
     88e:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
     892:	2c09      	cmp	r4, #9
        ++uCnt;
     894:	f101 0101 	add.w	r1, r1, #1
        ui32Val += (*pcStr - '0');
     898:	f1aa 0c30 	sub.w	ip, sl, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     89c:	d9f1      	bls.n	882 <am_util_stdio_vsprintf+0x66>
     89e:	440e      	add	r6, r1
    return bNeg ? -ui32Val : ui32Val;
     8a0:	f1be 0f00 	cmp.w	lr, #0
     8a4:	f041 80a1 	bne.w	19ea <am_util_stdio_vsprintf+0x11ce>
     8a8:	4664      	mov	r4, ip
     8aa:	7832      	ldrb	r2, [r6, #0]
     8ac:	e01e      	b.n	8ec <am_util_stdio_vsprintf+0xd0>
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     8ae:	4ebd      	ldr	r6, [pc, #756]	; (ba4 <am_util_stdio_vsprintf+0x388>)
     8b0:	7837      	ldrb	r7, [r6, #0]
     8b2:	2f00      	cmp	r7, #0
     8b4:	d0c2      	beq.n	83c <am_util_stdio_vsprintf+0x20>
                    *pcBuf++ = '\r';
     8b6:	f04f 0c0d 	mov.w	ip, #13
     8ba:	f888 c000 	strb.w	ip, [r8]
     8be:	780b      	ldrb	r3, [r1, #0]
                    ++ui32CharCnt;
     8c0:	f109 0901 	add.w	r9, r9, #1
                    *pcBuf++ = '\r';
     8c4:	f108 0801 	add.w	r8, r8, #1
     8c8:	e7b8      	b.n	83c <am_util_stdio_vsprintf+0x20>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     8ca:	7872      	ldrb	r2, [r6, #1]
     8cc:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
     8d0:	2c09      	cmp	r4, #9
        pcStr++;
     8d2:	f106 0001 	add.w	r0, r6, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     8d6:	f200 8611 	bhi.w	14fc <am_util_stdio_vsprintf+0xce0>
        uCnt++;
     8da:	2101      	movs	r1, #1
        bNeg = true;
     8dc:	468e      	mov	lr, r1
     8de:	e7ce      	b.n	87e <am_util_stdio_vsprintf+0x62>
     8e0:	788a      	ldrb	r2, [r1, #2]
            ++pcFmt;
     8e2:	1c8e      	adds	r6, r1, #2
            ui8PadChar = '0';
     8e4:	2530      	movs	r5, #48	; 0x30
     8e6:	e7c1      	b.n	86c <am_util_stdio_vsprintf+0x50>
     8e8:	7832      	ldrb	r2, [r6, #0]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     8ea:	2400      	movs	r4, #0
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     8ec:	2a73      	cmp	r2, #115	; 0x73
     8ee:	f000 8304 	beq.w	efa <am_util_stdio_vsprintf+0x6de>
     8f2:	ea84 73e4 	eor.w	r3, r4, r4, asr #31
        if (*pcFmt == '.')
     8f6:	2a2e      	cmp	r2, #46	; 0x2e
     8f8:	eba3 77e4 	sub.w	r7, r3, r4, asr #31
     8fc:	f000 82ae 	beq.w	e5c <am_util_stdio_vsprintf+0x640>
        iPrecision = 6;             // printf() default precision for %f is 6
     900:	f04f 0a06 	mov.w	sl, #6
        if ( *pcFmt == 'l' )
     904:	2a6c      	cmp	r2, #108	; 0x6c
     906:	f000 82a3 	beq.w	e50 <am_util_stdio_vsprintf+0x634>
        switch ( *pcFmt )
     90a:	f1a2 0046 	sub.w	r0, r2, #70	; 0x46
     90e:	2832      	cmp	r0, #50	; 0x32
     910:	f200 8294 	bhi.w	e3c <am_util_stdio_vsprintf+0x620>
     914:	e8df f010 	tbh	[pc, r0, lsl #1]
     918:	02920115 	.word	0x02920115
     91c:	02920292 	.word	0x02920292
     920:	02920292 	.word	0x02920292
     924:	02920292 	.word	0x02920292
     928:	02920292 	.word	0x02920292
     92c:	02920292 	.word	0x02920292
     930:	02920292 	.word	0x02920292
     934:	02920292 	.word	0x02920292
     938:	02920292 	.word	0x02920292
     93c:	02920033 	.word	0x02920033
     940:	02920292 	.word	0x02920292
     944:	02920292 	.word	0x02920292
     948:	02920292 	.word	0x02920292
     94c:	02920292 	.word	0x02920292
     950:	01360292 	.word	0x01360292
     954:	0292014a 	.word	0x0292014a
     958:	02920115 	.word	0x02920115
     95c:	014a0292 	.word	0x014a0292
     960:	02920292 	.word	0x02920292
     964:	02920292 	.word	0x02920292
     968:	02920292 	.word	0x02920292
     96c:	02920292 	.word	0x02920292
     970:	02f00292 	.word	0x02f00292
     974:	01f20292 	.word	0x01f20292
     978:	02920292 	.word	0x02920292
     97c:	01ef      	.short	0x01ef
        bLower = bLongLong = false;
     97e:	f04f 0c00 	mov.w	ip, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     982:	f8db 2000 	ldr.w	r2, [fp]
     986:	2300      	movs	r3, #0
                                      va_arg(pArgs, uint32_t);
     988:	f10b 0b04 	add.w	fp, fp, #4
                if ( iWidth )
     98c:	2c00      	cmp	r4, #0
     98e:	d06d      	beq.n	a6c <am_util_stdio_vsprintf+0x250>
    int iDigits = ui64Val ? 0 : 1;
     990:	ea52 0103 	orrs.w	r1, r2, r3
     994:	bf0c      	ite	eq
     996:	f04f 0e01 	moveq.w	lr, #1
     99a:	f04f 0e00 	movne.w	lr, #0
    while ( ui64Val )
     99e:	ea52 0103 	orrs.w	r1, r2, r3
     9a2:	d00b      	beq.n	9bc <am_util_stdio_vsprintf+0x1a0>
     9a4:	4610      	mov	r0, r2
     9a6:	4619      	mov	r1, r3
        ui64Val >>= 4;
     9a8:	090c      	lsrs	r4, r1, #4
     9aa:	0900      	lsrs	r0, r0, #4
     9ac:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
     9b0:	4621      	mov	r1, r4
    while ( ui64Val )
     9b2:	ea50 0401 	orrs.w	r4, r0, r1
        ++iDigits;
     9b6:	f10e 0e01 	add.w	lr, lr, #1
    while ( ui64Val )
     9ba:	d1f5      	bne.n	9a8 <am_util_stdio_vsprintf+0x18c>
                    iWidth -= ndigits_in_hex(ui64Val);
     9bc:	eba7 070e 	sub.w	r7, r7, lr
    if ( i32NumChars <= 0 )
     9c0:	2f00      	cmp	r7, #0
     9c2:	f340 855f 	ble.w	1484 <am_util_stdio_vsprintf+0xc68>
    while ( i32NumChars-- )
     9c6:	f107 3aff 	add.w	sl, r7, #4294967295
        if ( pcBuf )
     9ca:	f1b8 0f00 	cmp.w	r8, #0
     9ce:	f000 855a 	beq.w	1486 <am_util_stdio_vsprintf+0xc6a>
            *pcBuf++ = cPadChar;
     9d2:	4641      	mov	r1, r8
     9d4:	f00a 0707 	and.w	r7, sl, #7
     9d8:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
     9dc:	f10a 30ff 	add.w	r0, sl, #4294967295
     9e0:	eba1 0408 	sub.w	r4, r1, r8
     9e4:	f1ba 0f00 	cmp.w	sl, #0
     9e8:	d03d      	beq.n	a66 <am_util_stdio_vsprintf+0x24a>
     9ea:	b32f      	cbz	r7, a38 <am_util_stdio_vsprintf+0x21c>
     9ec:	2f01      	cmp	r7, #1
     9ee:	d01c      	beq.n	a2a <am_util_stdio_vsprintf+0x20e>
     9f0:	2f02      	cmp	r7, #2
     9f2:	d017      	beq.n	a24 <am_util_stdio_vsprintf+0x208>
     9f4:	2f03      	cmp	r7, #3
     9f6:	d012      	beq.n	a1e <am_util_stdio_vsprintf+0x202>
     9f8:	2f04      	cmp	r7, #4
     9fa:	d00d      	beq.n	a18 <am_util_stdio_vsprintf+0x1fc>
     9fc:	2f05      	cmp	r7, #5
     9fe:	d008      	beq.n	a12 <am_util_stdio_vsprintf+0x1f6>
     a00:	2f06      	cmp	r7, #6
            *pcBuf++ = cPadChar;
     a02:	bf1c      	itt	ne
     a04:	f801 5b01 	strbne.w	r5, [r1], #1
    while ( i32NumChars-- )
     a08:	f100 30ff 	addne.w	r0, r0, #4294967295
            *pcBuf++ = cPadChar;
     a0c:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
     a10:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
     a12:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
     a16:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
     a18:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
     a1c:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
     a1e:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
     a22:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
     a24:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
     a28:	3801      	subs	r0, #1
            *pcBuf++ = cPadChar;
     a2a:	f801 5b01 	strb.w	r5, [r1], #1
    while ( i32NumChars-- )
     a2e:	3801      	subs	r0, #1
     a30:	1c47      	adds	r7, r0, #1
     a32:	eba1 0408 	sub.w	r4, r1, r8
     a36:	d016      	beq.n	a66 <am_util_stdio_vsprintf+0x24a>
            *pcBuf++ = cPadChar;
     a38:	468a      	mov	sl, r1
    while ( i32NumChars-- )
     a3a:	3808      	subs	r0, #8
            *pcBuf++ = cPadChar;
     a3c:	f80a 5b01 	strb.w	r5, [sl], #1
     a40:	3108      	adds	r1, #8
     a42:	f88a 5000 	strb.w	r5, [sl]
     a46:	f801 5c06 	strb.w	r5, [r1, #-6]
     a4a:	f801 5c05 	strb.w	r5, [r1, #-5]
     a4e:	f801 5c04 	strb.w	r5, [r1, #-4]
     a52:	f801 5c03 	strb.w	r5, [r1, #-3]
     a56:	f801 5c02 	strb.w	r5, [r1, #-2]
    while ( i32NumChars-- )
     a5a:	1c47      	adds	r7, r0, #1
     a5c:	eba1 0408 	sub.w	r4, r1, r8
            *pcBuf++ = cPadChar;
     a60:	f801 5c01 	strb.w	r5, [r1, #-1]
    while ( i32NumChars-- )
     a64:	d1e8      	bne.n	a38 <am_util_stdio_vsprintf+0x21c>
     a66:	4627      	mov	r7, r4
                    pcBuf += pcBuf ? iWidth : 0;
     a68:	44a0      	add	r8, r4
                    ui32CharCnt += iWidth;
     a6a:	44b9      	add	r9, r7
    if ( ui64Val == 0 )
     a6c:	ea52 0103 	orrs.w	r1, r2, r3
     a70:	f040 821a 	bne.w	ea8 <am_util_stdio_vsprintf+0x68c>
        tbuf[ix++] = '0';   // Print a '0'
     a74:	f04f 0530 	mov.w	r5, #48	; 0x30
     a78:	f88d 50ac 	strb.w	r5, [sp, #172]	; 0xac
    if (pcBuf)
     a7c:	2701      	movs	r7, #1
     a7e:	f1b8 0f00 	cmp.w	r8, #0
     a82:	f000 8235 	beq.w	ef0 <am_util_stdio_vsprintf+0x6d4>
     a86:	4639      	mov	r1, r7
        while (ix--)
     a88:	2000      	movs	r0, #0
     a8a:	ac2b      	add	r4, sp, #172	; 0xac
     a8c:	1863      	adds	r3, r4, r1
     a8e:	f103 3aff 	add.w	sl, r3, #4294967295
            *pcBuf++ = tbuf[ix];
     a92:	f813 cc01 	ldrb.w	ip, [r3, #-1]
     a96:	f888 c000 	strb.w	ip, [r8]
     a9a:	1e4d      	subs	r5, r1, #1
        while (ix--)
     a9c:	45a2      	cmp	sl, r4
     a9e:	f005 0107 	and.w	r1, r5, #7
     aa2:	4643      	mov	r3, r8
     aa4:	d047      	beq.n	b36 <am_util_stdio_vsprintf+0x31a>
     aa6:	b359      	cbz	r1, b00 <am_util_stdio_vsprintf+0x2e4>
     aa8:	2901      	cmp	r1, #1
     aaa:	d023      	beq.n	af4 <am_util_stdio_vsprintf+0x2d8>
     aac:	2902      	cmp	r1, #2
     aae:	d01d      	beq.n	aec <am_util_stdio_vsprintf+0x2d0>
     ab0:	2903      	cmp	r1, #3
     ab2:	d017      	beq.n	ae4 <am_util_stdio_vsprintf+0x2c8>
     ab4:	2904      	cmp	r1, #4
     ab6:	d011      	beq.n	adc <am_util_stdio_vsprintf+0x2c0>
     ab8:	2905      	cmp	r1, #5
     aba:	d00b      	beq.n	ad4 <am_util_stdio_vsprintf+0x2b8>
     abc:	2906      	cmp	r1, #6
     abe:	d005      	beq.n	acc <am_util_stdio_vsprintf+0x2b0>
            *pcBuf++ = tbuf[ix];
     ac0:	f81a 2d01 	ldrb.w	r2, [sl, #-1]!
     ac4:	f888 2001 	strb.w	r2, [r8, #1]
     ac8:	f108 0301 	add.w	r3, r8, #1
     acc:	f81a 5d01 	ldrb.w	r5, [sl, #-1]!
     ad0:	f803 5f01 	strb.w	r5, [r3, #1]!
     ad4:	f81a cd01 	ldrb.w	ip, [sl, #-1]!
     ad8:	f803 cf01 	strb.w	ip, [r3, #1]!
     adc:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
     ae0:	f803 1f01 	strb.w	r1, [r3, #1]!
     ae4:	f81a 2d01 	ldrb.w	r2, [sl, #-1]!
     ae8:	f803 2f01 	strb.w	r2, [r3, #1]!
     aec:	f81a 5d01 	ldrb.w	r5, [sl, #-1]!
     af0:	f803 5f01 	strb.w	r5, [r3, #1]!
     af4:	f81a cd01 	ldrb.w	ip, [sl, #-1]!
     af8:	f803 cf01 	strb.w	ip, [r3, #1]!
        while (ix--)
     afc:	45a2      	cmp	sl, r4
     afe:	d01a      	beq.n	b36 <am_util_stdio_vsprintf+0x31a>
            *pcBuf++ = tbuf[ix];
     b00:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
     b04:	f81a 5c03 	ldrb.w	r5, [sl, #-3]
     b08:	f81a 1c02 	ldrb.w	r1, [sl, #-2]
     b0c:	705a      	strb	r2, [r3, #1]
     b0e:	70dd      	strb	r5, [r3, #3]
     b10:	f81a 2c04 	ldrb.w	r2, [sl, #-4]
     b14:	f81a 5c05 	ldrb.w	r5, [sl, #-5]
     b18:	7099      	strb	r1, [r3, #2]
     b1a:	711a      	strb	r2, [r3, #4]
     b1c:	f81a 1c06 	ldrb.w	r1, [sl, #-6]
     b20:	715d      	strb	r5, [r3, #5]
     b22:	f81a 2c07 	ldrb.w	r2, [sl, #-7]
     b26:	f81a 5d08 	ldrb.w	r5, [sl, #-8]!
     b2a:	7199      	strb	r1, [r3, #6]
        while (ix--)
     b2c:	45a2      	cmp	sl, r4
            *pcBuf++ = tbuf[ix];
     b2e:	71da      	strb	r2, [r3, #7]
     b30:	f803 5f08 	strb.w	r5, [r3, #8]!
        while (ix--)
     b34:	d1e4      	bne.n	b00 <am_util_stdio_vsprintf+0x2e4>
        *pcBuf = 0;
     b36:	4440      	add	r0, r8
     b38:	2400      	movs	r4, #0
                    pcBuf += iVal;
     b3a:	44b8      	add	r8, r7
        *pcBuf = 0;
     b3c:	7044      	strb	r4, [r0, #1]
                ui32CharCnt += iVal;
     b3e:	44b9      	add	r9, r7
                break;
     b40:	e01e      	b.n	b80 <am_util_stdio_vsprintf+0x364>
                if ( pcBuf )
     b42:	f1b8 0f00 	cmp.w	r8, #0
     b46:	d01b      	beq.n	b80 <am_util_stdio_vsprintf+0x364>
                    float fValue = va_arg(pArgs, double);
     b48:	f10b 0307 	add.w	r3, fp, #7
     b4c:	f023 0b07 	bic.w	fp, r3, #7
     b50:	e9db 0100 	ldrd	r0, r1, [fp]
     b54:	f7ff fab4 	bl	c0 <__aeabi_d2f>
     b58:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
     b5c:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
     b60:	2014      	movs	r0, #20
    if (fValue == 0.0f)
     b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    float fValue = va_arg(pArgs, double);
     b66:	f10b 0b08 	add.w	fp, fp, #8
                    *(uint32_t*)pcBuf = 20;
     b6a:	f8c8 0000 	str.w	r0, [r8]
    if (fValue == 0.0f)
     b6e:	f040 848d 	bne.w	148c <am_util_stdio_vsprintf+0xc70>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     b72:	490d      	ldr	r1, [pc, #52]	; (ba8 <am_util_stdio_vsprintf+0x38c>)
     b74:	f8c8 1000 	str.w	r1, [r8]
     b78:	f04f 0a03 	mov.w	sl, #3
                    ui32CharCnt += iVal;
     b7c:	44d1      	add	r9, sl
                    pcBuf += iVal;
     b7e:	44d0      	add	r8, sl
        ++pcFmt;
     b80:	1c71      	adds	r1, r6, #1
     b82:	e652      	b.n	82a <am_util_stdio_vsprintf+0xe>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
     b84:	f10b 0404 	add.w	r4, fp, #4
     b88:	f89b 1000 	ldrb.w	r1, [fp]
                if ( pcBuf )
     b8c:	f1b8 0f00 	cmp.w	r8, #0
     b90:	d003      	beq.n	b9a <am_util_stdio_vsprintf+0x37e>
                    *pcBuf++ = ui8CharSpecifier;
     b92:	f888 1000 	strb.w	r1, [r8]
     b96:	f108 0801 	add.w	r8, r8, #1
                ++ui32CharCnt;
     b9a:	f109 0901 	add.w	r9, r9, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
     b9e:	46a3      	mov	fp, r4
                break;
     ba0:	e7ee      	b.n	b80 <am_util_stdio_vsprintf+0x364>
     ba2:	bf00      	nop
     ba4:	10001014 	.word	0x10001014
     ba8:	00302e30 	.word	0x00302e30
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
     bac:	f8db 0000 	ldr.w	r0, [fp]
                                     va_arg(pArgs, int32_t);
     bb0:	f10b 0b04 	add.w	fp, fp, #4
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
     bb4:	17c1      	asrs	r1, r0, #31
                if ( i64Val < 0 )
     bb6:	2800      	cmp	r0, #0
     bb8:	f171 0300 	sbcs.w	r3, r1, #0
     bbc:	f2c0 83ac 	blt.w	1318 <am_util_stdio_vsprintf+0xafc>
                    ui64Val = i64Val;
     bc0:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
                if ( iWidth )
     bc4:	2c00      	cmp	r4, #0
     bc6:	f000 83ba 	beq.w	133e <am_util_stdio_vsprintf+0xb22>
    int iNDigits = ui64Val ? 0 : 1;
     bca:	ea50 0301 	orrs.w	r3, r0, r1
    return ndigits_in_u64((uint64_t) i64Val);
     bce:	4602      	mov	r2, r0
    int iNDigits = ui64Val ? 0 : 1;
     bd0:	bf0c      	ite	eq
     bd2:	2401      	moveq	r4, #1
     bd4:	2400      	movne	r4, #0
    while ( ui64Val )
     bd6:	4308      	orrs	r0, r1
    return ndigits_in_u64((uint64_t) i64Val);
     bd8:	460b      	mov	r3, r1
                    bNeg = false;
     bda:	bf18      	it	ne
     bdc:	2000      	movne	r0, #0
    while ( ui64Val )
     bde:	f000 86ba 	beq.w	1956 <am_util_stdio_vsprintf+0x113a>
                    bNeg = false;
     be2:	901b      	str	r0, [sp, #108]	; 0x6c
     be4:	9620      	str	r6, [sp, #128]	; 0x80
     be6:	9521      	str	r5, [sp, #132]	; 0x84
     be8:	9722      	str	r7, [sp, #136]	; 0x88
     bea:	941a      	str	r4, [sp, #104]	; 0x68
     bec:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
     bf0:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
     bf4:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
     bf8:	e009      	b.n	c0e <am_util_stdio_vsprintf+0x3f2>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     bfa:	464a      	mov	r2, r9
     bfc:	2300      	movs	r3, #0
        ++iNDigits;
     bfe:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    while ( ui64Val )
     c00:	ea52 0103 	orrs.w	r1, r2, r3
        ++iNDigits;
     c04:	f105 0501 	add.w	r5, r5, #1
     c08:	951a      	str	r5, [sp, #104]	; 0x68
    while ( ui64Val )
     c0a:	f000 83a5 	beq.w	1358 <am_util_stdio_vsprintf+0xb3c>
        q64 = (ui64Val>>1) + (ui64Val>>2);
     c0e:	0896      	lsrs	r6, r2, #2
     c10:	ea46 7583 	orr.w	r5, r6, r3, lsl #30
     c14:	089f      	lsrs	r7, r3, #2
     c16:	970b      	str	r7, [sp, #44]	; 0x2c
     c18:	950a      	str	r5, [sp, #40]	; 0x28
     c1a:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
     c1e:	0859      	lsrs	r1, r3, #1
     c20:	ea4f 0032 	mov.w	r0, r2, rrx
     c24:	1820      	adds	r0, r4, r0
     c26:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 4);
     c2a:	0904      	lsrs	r4, r0, #4
        q64 = (ui64Val>>1) + (ui64Val>>2);
     c2c:	4606      	mov	r6, r0
        q64 += (q64 >> 4);
     c2e:	ea44 7501 	orr.w	r5, r4, r1, lsl #28
     c32:	0908      	lsrs	r0, r1, #4
     c34:	9005      	str	r0, [sp, #20]
     c36:	9504      	str	r5, [sp, #16]
     c38:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
     c3c:	19a0      	adds	r0, r4, r6
     c3e:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 8);
     c42:	0a04      	lsrs	r4, r0, #8
        q64 += (q64 >> 4);
     c44:	4606      	mov	r6, r0
        q64 += (q64 >> 8);
     c46:	ea44 6501 	orr.w	r5, r4, r1, lsl #24
     c4a:	0a08      	lsrs	r0, r1, #8
     c4c:	9007      	str	r0, [sp, #28]
     c4e:	9506      	str	r5, [sp, #24]
     c50:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
     c54:	19a0      	adds	r0, r4, r6
     c56:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 16);
     c5a:	0c06      	lsrs	r6, r0, #16
     c5c:	ea46 4a01 	orr.w	sl, r6, r1, lsl #16
     c60:	eb10 070a 	adds.w	r7, r0, sl
     c64:	ea4f 4b11 	mov.w	fp, r1, lsr #16
     c68:	eb41 000b 	adc.w	r0, r1, fp
        q64 += (q64 >> 32);
     c6c:	2400      	movs	r4, #0
     c6e:	900e      	str	r0, [sp, #56]	; 0x38
     c70:	940f      	str	r4, [sp, #60]	; 0x3c
     c72:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
        q32 = (ui32Val>>1) + (ui32Val>>2);
     c76:	0895      	lsrs	r5, r2, #2
        q64 += (q64 >> 32);
     c78:	eb18 0807 	adds.w	r8, r8, r7
     c7c:	eb49 0100 	adc.w	r1, r9, r0
        q32 = (ui32Val>>1) + (ui32Val>>2);
     c80:	eb05 0c52 	add.w	ip, r5, r2, lsr #1
        q64 += (q64 >> 32);
     c84:	4646      	mov	r6, r8
        q32 += (q32 >> 4);
     c86:	eb0c 101c 	add.w	r0, ip, ip, lsr #4
        q64 += (q64 >> 32);
     c8a:	460f      	mov	r7, r1
        q32 += (q32 >> 8);
     c8c:	eb00 2510 	add.w	r5, r0, r0, lsr #8
        q64 >>= 3;
     c90:	08f4      	lsrs	r4, r6, #3
    if ( ui64Val >> 32 )
     c92:	9312      	str	r3, [sp, #72]	; 0x48
     c94:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
        q64 >>= 3;
     c98:	08ff      	lsrs	r7, r7, #3
     c9a:	ea44 7641 	orr.w	r6, r4, r1, lsl #29
     c9e:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
        q32 += (q32 >> 16);
     ca2:	eb05 4415 	add.w	r4, r5, r5, lsr #16
        r64 = ui64Val - q64*10;
     ca6:	00bd      	lsls	r5, r7, #2
     ca8:	ea45 7196 	orr.w	r1, r5, r6, lsr #30
        q32 >>= 3;
     cac:	08e5      	lsrs	r5, r4, #3
        r32 = ui32Val - q32*10;
     cae:	eb05 0485 	add.w	r4, r5, r5, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     cb2:	f102 0e06 	add.w	lr, r2, #6
     cb6:	ebae 0c44 	sub.w	ip, lr, r4, lsl #1
     cba:	ea58 0409 	orrs.w	r4, r8, r9
        r64 = ui64Val - q64*10;
     cbe:	ea4f 0086 	mov.w	r0, r6, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     cc2:	eb05 191c 	add.w	r9, r5, ip, lsr #4
     cc6:	d098      	beq.n	bfa <am_util_stdio_vsprintf+0x3de>
        r64 = ui64Val - q64*10;
     cc8:	eb10 0e06 	adds.w	lr, r0, r6
     ccc:	4179      	adcs	r1, r7
     cce:	eb1e 000e 	adds.w	r0, lr, lr
     cd2:	4149      	adcs	r1, r1
        return q64 + ((r64 + 6) >> 4);
     cd4:	3206      	adds	r2, #6
     cd6:	f143 0300 	adc.w	r3, r3, #0
     cda:	1a15      	subs	r5, r2, r0
     cdc:	eb63 0401 	sbc.w	r4, r3, r1
     ce0:	0929      	lsrs	r1, r5, #4
     ce2:	0922      	lsrs	r2, r4, #4
     ce4:	ea41 7004 	orr.w	r0, r1, r4, lsl #28
     ce8:	9016      	str	r0, [sp, #88]	; 0x58
     cea:	9217      	str	r2, [sp, #92]	; 0x5c
     cec:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
     cf0:	1992      	adds	r2, r2, r6
     cf2:	417b      	adcs	r3, r7
     cf4:	e783      	b.n	bfe <am_util_stdio_vsprintf+0x3e2>
        switch ( *pcFmt )
     cf6:	f04f 0c01 	mov.w	ip, #1
     cfa:	e642      	b.n	982 <am_util_stdio_vsprintf+0x166>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     cfc:	f8db 1000 	ldr.w	r1, [fp]
     d00:	2200      	movs	r2, #0
     d02:	e9cd 1218 	strd	r1, r2, [sp, #96]	; 0x60
                                      va_arg(pArgs, uint32_t);
     d06:	f10b 0b04 	add.w	fp, fp, #4
                if ( iWidth )
     d0a:	2c00      	cmp	r4, #0
     d0c:	f000 8269 	beq.w	11e2 <am_util_stdio_vsprintf+0x9c6>
    int iNDigits = ui64Val ? 0 : 1;
     d10:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
     d14:	ea50 0301 	orrs.w	r3, r0, r1
    while ( ui64Val )
     d18:	4602      	mov	r2, r0
     d1a:	460b      	mov	r3, r1
    int iNDigits = ui64Val ? 0 : 1;
     d1c:	bf0c      	ite	eq
     d1e:	2401      	moveq	r4, #1
     d20:	2400      	movne	r4, #0
    while ( ui64Val )
     d22:	ea52 0103 	orrs.w	r1, r2, r3
     d26:	f000 81fe 	beq.w	1126 <am_util_stdio_vsprintf+0x90a>
     d2a:	961b      	str	r6, [sp, #108]	; 0x6c
     d2c:	9520      	str	r5, [sp, #128]	; 0x80
     d2e:	9721      	str	r7, [sp, #132]	; 0x84
     d30:	941a      	str	r4, [sp, #104]	; 0x68
     d32:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
     d36:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
     d3a:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
     d3e:	e009      	b.n	d54 <am_util_stdio_vsprintf+0x538>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     d40:	464a      	mov	r2, r9
     d42:	2300      	movs	r3, #0
        ++iNDigits;
     d44:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    while ( ui64Val )
     d46:	ea52 0103 	orrs.w	r1, r2, r3
        ++iNDigits;
     d4a:	f105 0501 	add.w	r5, r5, #1
     d4e:	951a      	str	r5, [sp, #104]	; 0x68
    while ( ui64Val )
     d50:	f000 81db 	beq.w	110a <am_util_stdio_vsprintf+0x8ee>
        q64 = (ui64Val>>1) + (ui64Val>>2);
     d54:	0895      	lsrs	r5, r2, #2
     d56:	ea45 7783 	orr.w	r7, r5, r3, lsl #30
     d5a:	089c      	lsrs	r4, r3, #2
     d5c:	9708      	str	r7, [sp, #32]
     d5e:	9409      	str	r4, [sp, #36]	; 0x24
     d60:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
     d64:	0859      	lsrs	r1, r3, #1
     d66:	ea4f 0032 	mov.w	r0, r2, rrx
     d6a:	1820      	adds	r0, r4, r0
     d6c:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 4);
     d70:	0905      	lsrs	r5, r0, #4
        q64 = (ui64Val>>1) + (ui64Val>>2);
     d72:	4606      	mov	r6, r0
        q64 += (q64 >> 4);
     d74:	ea45 7401 	orr.w	r4, r5, r1, lsl #28
     d78:	0908      	lsrs	r0, r1, #4
     d7a:	9001      	str	r0, [sp, #4]
     d7c:	9400      	str	r4, [sp, #0]
     d7e:	e9dd 4500 	ldrd	r4, r5, [sp]
     d82:	19a0      	adds	r0, r4, r6
     d84:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 8);
     d88:	0a05      	lsrs	r5, r0, #8
        q64 += (q64 >> 4);
     d8a:	4606      	mov	r6, r0
        q64 += (q64 >> 8);
     d8c:	ea45 6401 	orr.w	r4, r5, r1, lsl #24
     d90:	0a08      	lsrs	r0, r1, #8
     d92:	9003      	str	r0, [sp, #12]
     d94:	9402      	str	r4, [sp, #8]
     d96:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
     d9a:	19a0      	adds	r0, r4, r6
     d9c:	eb45 0101 	adc.w	r1, r5, r1
        q64 += (q64 >> 16);
     da0:	0c06      	lsrs	r6, r0, #16
     da2:	ea46 4a01 	orr.w	sl, r6, r1, lsl #16
     da6:	eb10 070a 	adds.w	r7, r0, sl
     daa:	ea4f 4b11 	mov.w	fp, r1, lsr #16
     dae:	eb41 000b 	adc.w	r0, r1, fp
        q64 += (q64 >> 32);
     db2:	2400      	movs	r4, #0
     db4:	900c      	str	r0, [sp, #48]	; 0x30
     db6:	940d      	str	r4, [sp, #52]	; 0x34
     db8:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
        q32 = (ui32Val>>1) + (ui32Val>>2);
     dbc:	0895      	lsrs	r5, r2, #2
        q64 += (q64 >> 32);
     dbe:	eb18 0807 	adds.w	r8, r8, r7
     dc2:	eb49 0100 	adc.w	r1, r9, r0
        q32 = (ui32Val>>1) + (ui32Val>>2);
     dc6:	eb05 0c52 	add.w	ip, r5, r2, lsr #1
        q64 += (q64 >> 32);
     dca:	4646      	mov	r6, r8
        q32 += (q32 >> 4);
     dcc:	eb0c 101c 	add.w	r0, ip, ip, lsr #4
        q64 += (q64 >> 32);
     dd0:	460f      	mov	r7, r1
        q32 += (q32 >> 8);
     dd2:	eb00 2510 	add.w	r5, r0, r0, lsr #8
        q64 >>= 3;
     dd6:	08f4      	lsrs	r4, r6, #3
    if ( ui64Val >> 32 )
     dd8:	9310      	str	r3, [sp, #64]	; 0x40
     dda:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
        q64 >>= 3;
     dde:	08ff      	lsrs	r7, r7, #3
     de0:	ea44 7641 	orr.w	r6, r4, r1, lsl #29
     de4:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
        q32 += (q32 >> 16);
     de8:	eb05 4415 	add.w	r4, r5, r5, lsr #16
        r64 = ui64Val - q64*10;
     dec:	00bd      	lsls	r5, r7, #2
     dee:	ea45 7196 	orr.w	r1, r5, r6, lsr #30
        q32 >>= 3;
     df2:	08e5      	lsrs	r5, r4, #3
        r32 = ui32Val - q32*10;
     df4:	eb05 0485 	add.w	r4, r5, r5, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     df8:	f102 0e06 	add.w	lr, r2, #6
     dfc:	ebae 0c44 	sub.w	ip, lr, r4, lsl #1
     e00:	ea58 0409 	orrs.w	r4, r8, r9
        r64 = ui64Val - q64*10;
     e04:	ea4f 0086 	mov.w	r0, r6, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     e08:	eb05 191c 	add.w	r9, r5, ip, lsr #4
     e0c:	d098      	beq.n	d40 <am_util_stdio_vsprintf+0x524>
        r64 = ui64Val - q64*10;
     e0e:	eb10 0e06 	adds.w	lr, r0, r6
     e12:	4179      	adcs	r1, r7
     e14:	eb1e 000e 	adds.w	r0, lr, lr
     e18:	4149      	adcs	r1, r1
        return q64 + ((r64 + 6) >> 4);
     e1a:	3206      	adds	r2, #6
     e1c:	f143 0300 	adc.w	r3, r3, #0
     e20:	1a15      	subs	r5, r2, r0
     e22:	eb63 0401 	sbc.w	r4, r3, r1
     e26:	0929      	lsrs	r1, r5, #4
     e28:	0922      	lsrs	r2, r4, #4
     e2a:	ea41 7004 	orr.w	r0, r1, r4, lsl #28
     e2e:	9014      	str	r0, [sp, #80]	; 0x50
     e30:	9215      	str	r2, [sp, #84]	; 0x54
     e32:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
     e36:	1992      	adds	r2, r2, r6
     e38:	417b      	adcs	r3, r7
     e3a:	e783      	b.n	d44 <am_util_stdio_vsprintf+0x528>
                if ( pcBuf )
     e3c:	f1b8 0f00 	cmp.w	r8, #0
     e40:	d003      	beq.n	e4a <am_util_stdio_vsprintf+0x62e>
                    *pcBuf++ = *pcFmt;
     e42:	f888 2000 	strb.w	r2, [r8]
     e46:	f108 0801 	add.w	r8, r8, #1
                ++ui32CharCnt;
     e4a:	f109 0901 	add.w	r9, r9, #1
                break;
     e4e:	e697      	b.n	b80 <am_util_stdio_vsprintf+0x364>
            if ( *pcFmt == 'l' )    // "ll" (long long)
     e50:	7872      	ldrb	r2, [r6, #1]
     e52:	2a6c      	cmp	r2, #108	; 0x6c
     e54:	f000 81db 	beq.w	120e <am_util_stdio_vsprintf+0x9f2>
            pcFmt++;
     e58:	3601      	adds	r6, #1
     e5a:	e556      	b.n	90a <am_util_stdio_vsprintf+0xee>
    if ( *pcStr == '-')
     e5c:	7873      	ldrb	r3, [r6, #1]
     e5e:	2b2d      	cmp	r3, #45	; 0x2d
            ++pcFmt;
     e60:	f106 0001 	add.w	r0, r6, #1
    if ( *pcStr == '-')
     e64:	f000 81c8 	beq.w	11f8 <am_util_stdio_vsprintf+0x9dc>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     e68:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
     e6c:	2e09      	cmp	r6, #9
     e6e:	f200 8349 	bhi.w	1504 <am_util_stdio_vsprintf+0xce8>
    uint32_t ui32Val = 0, uCnt = 0;
     e72:	2200      	movs	r2, #0
    bool bNeg = false;
     e74:	4694      	mov	ip, r2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     e76:	4606      	mov	r6, r0
    bool bNeg = false;
     e78:	f04f 0a00 	mov.w	sl, #0
        ui32Val *= 10;
     e7c:	eb0a 018a 	add.w	r1, sl, sl, lsl #2
        ui32Val += (*pcStr - '0');
     e80:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     e84:	f816 3f01 	ldrb.w	r3, [r6, #1]!
     e88:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
     e8c:	f1be 0f09 	cmp.w	lr, #9
        ++uCnt;
     e90:	f102 0201 	add.w	r2, r2, #1
        ui32Val += (*pcStr - '0');
     e94:	f1a1 0a30 	sub.w	sl, r1, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     e98:	d9f0      	bls.n	e7c <am_util_stdio_vsprintf+0x660>
    return bNeg ? -ui32Val : ui32Val;
     e9a:	f1bc 0f00 	cmp.w	ip, #0
     e9e:	f000 8334 	beq.w	150a <am_util_stdio_vsprintf+0xcee>
     ea2:	f1c1 0a30 	rsb	sl, r1, #48	; 0x30
     ea6:	e330      	b.n	150a <am_util_stdio_vsprintf+0xcee>
     ea8:	f1bc 0f00 	cmp.w	ip, #0
     eac:	bf14      	ite	ne
     eae:	2727      	movne	r7, #39	; 0x27
     eb0:	2707      	moveq	r7, #7
     eb2:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
    if ( ui64Val == 0 )
     eb6:	2000      	movs	r0, #0
     eb8:	e000      	b.n	ebc <am_util_stdio_vsprintf+0x6a0>
        tbuf[ix++] = cCh + '0';
     eba:	4608      	mov	r0, r1
        cCh = ui64Val & 0xf;
     ebc:	f002 010f 	and.w	r1, r2, #15
            cCh += bLower ? 0x27 : 0x7;
     ec0:	eb01 0e07 	add.w	lr, r1, r7
        tbuf[ix++] = cCh + '0';
     ec4:	2909      	cmp	r1, #9
     ec6:	bf88      	it	hi
     ec8:	4671      	movhi	r1, lr
        ui64Val >>= 4;
     eca:	0912      	lsrs	r2, r2, #4
     ecc:	ea4f 1e13 	mov.w	lr, r3, lsr #4
     ed0:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
     ed4:	4673      	mov	r3, lr
        tbuf[ix++] = cCh + '0';
     ed6:	3130      	adds	r1, #48	; 0x30
    while ( ui64Val )
     ed8:	ea52 0503 	orrs.w	r5, r2, r3
        tbuf[ix++] = cCh + '0';
     edc:	f804 1f01 	strb.w	r1, [r4, #1]!
     ee0:	f100 0101 	add.w	r1, r0, #1
    while ( ui64Val )
     ee4:	d1e9      	bne.n	eba <am_util_stdio_vsprintf+0x69e>
     ee6:	460f      	mov	r7, r1
    if (pcBuf)
     ee8:	f1b8 0f00 	cmp.w	r8, #0
     eec:	f47f adcd 	bne.w	a8a <am_util_stdio_vsprintf+0x26e>
     ef0:	f04f 0800 	mov.w	r8, #0
                ui32CharCnt += iVal;
     ef4:	44b9      	add	r9, r7
     ef6:	e643      	b.n	b80 <am_util_stdio_vsprintf+0x364>
        switch ( *pcFmt )
     ef8:	463c      	mov	r4, r7
                pcStr = va_arg(pArgs, char *);
     efa:	f8db 0000 	ldr.w	r0, [fp]
     efe:	f10b 0b04 	add.w	fp, fp, #4
    if ( !pcBuf )
     f02:	2800      	cmp	r0, #0
     f04:	f000 8085 	beq.w	1012 <am_util_stdio_vsprintf+0x7f6>
    while ( *pcBuf++ )
     f08:	7801      	ldrb	r1, [r0, #0]
     f0a:	1c42      	adds	r2, r0, #1
     f0c:	4613      	mov	r3, r2
     f0e:	2900      	cmp	r1, #0
     f10:	f000 84f3 	beq.w	18fa <am_util_stdio_vsprintf+0x10de>
     f14:	eba3 0e00 	sub.w	lr, r3, r0
     f18:	f813 7b01 	ldrb.w	r7, [r3], #1
     f1c:	2f00      	cmp	r7, #0
     f1e:	d1f9      	bne.n	f14 <am_util_stdio_vsprintf+0x6f8>
                if ( iWidth > 0 )
     f20:	2c00      	cmp	r4, #0
     f22:	4677      	mov	r7, lr
     f24:	dd01      	ble.n	f2a <am_util_stdio_vsprintf+0x70e>
                    if ( ui32strlen < iWidth )
     f26:	4574      	cmp	r4, lr
     f28:	d877      	bhi.n	101a <am_util_stdio_vsprintf+0x7fe>
                    if ( pcBuf )
     f2a:	f1b8 0f00 	cmp.w	r8, #0
     f2e:	f000 80e1 	beq.w	10f4 <am_util_stdio_vsprintf+0x8d8>
     f32:	eba9 0a00 	sub.w	sl, r9, r0
                        *pcBuf++ = *pcStr;
     f36:	f808 1b01 	strb.w	r1, [r8], #1
     f3a:	eb0a 0902 	add.w	r9, sl, r2
                while (*pcStr != 0x0)
     f3e:	f812 1b01 	ldrb.w	r1, [r2], #1
     f42:	2900      	cmp	r1, #0
     f44:	d1f7      	bne.n	f36 <am_util_stdio_vsprintf+0x71a>
                if ( iWidth )
     f46:	2c00      	cmp	r4, #0
     f48:	f43f ae1a 	beq.w	b80 <am_util_stdio_vsprintf+0x364>
                    iWidth = -iWidth;
     f4c:	4263      	negs	r3, r4
                    if ( ui32strlen < iWidth )
     f4e:	42bb      	cmp	r3, r7
     f50:	f67f ae16 	bls.w	b80 <am_util_stdio_vsprintf+0x364>
                        iWidth -= ui32strlen;
     f54:	1bda      	subs	r2, r3, r7
    if ( i32NumChars <= 0 )
     f56:	2a00      	cmp	r2, #0
     f58:	f340 84c3 	ble.w	18e2 <am_util_stdio_vsprintf+0x10c6>
    while ( i32NumChars-- )
     f5c:	1e57      	subs	r7, r2, #1
        if ( pcBuf )
     f5e:	f1b8 0f00 	cmp.w	r8, #0
     f62:	f000 84bf 	beq.w	18e4 <am_util_stdio_vsprintf+0x10c8>
            *pcBuf++ = cPadChar;
     f66:	4643      	mov	r3, r8
     f68:	f007 0407 	and.w	r4, r7, #7
     f6c:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
     f70:	f107 3cff 	add.w	ip, r7, #4294967295
     f74:	eba3 0108 	sub.w	r1, r3, r8
     f78:	2f00      	cmp	r7, #0
     f7a:	d045      	beq.n	1008 <am_util_stdio_vsprintf+0x7ec>
     f7c:	b364      	cbz	r4, fd8 <am_util_stdio_vsprintf+0x7bc>
     f7e:	2c01      	cmp	r4, #1
     f80:	d021      	beq.n	fc6 <am_util_stdio_vsprintf+0x7aa>
     f82:	2c02      	cmp	r4, #2
     f84:	d01b      	beq.n	fbe <am_util_stdio_vsprintf+0x7a2>
     f86:	2c03      	cmp	r4, #3
     f88:	d015      	beq.n	fb6 <am_util_stdio_vsprintf+0x79a>
     f8a:	2c04      	cmp	r4, #4
     f8c:	d00f      	beq.n	fae <am_util_stdio_vsprintf+0x792>
     f8e:	2c05      	cmp	r4, #5
     f90:	d009      	beq.n	fa6 <am_util_stdio_vsprintf+0x78a>
     f92:	2c06      	cmp	r4, #6
            *pcBuf++ = cPadChar;
     f94:	bf1c      	itt	ne
     f96:	f803 5b01 	strbne.w	r5, [r3], #1
    while ( i32NumChars-- )
     f9a:	f10c 3cff 	addne.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
     f9e:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
     fa2:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
     fa6:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
     faa:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
     fae:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
     fb2:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
     fb6:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
     fba:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
     fbe:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
     fc2:	f10c 3cff 	add.w	ip, ip, #4294967295
            *pcBuf++ = cPadChar;
     fc6:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
     fca:	f10c 3cff 	add.w	ip, ip, #4294967295
     fce:	f11c 0701 	adds.w	r7, ip, #1
     fd2:	eba3 0108 	sub.w	r1, r3, r8
     fd6:	d017      	beq.n	1008 <am_util_stdio_vsprintf+0x7ec>
            *pcBuf++ = cPadChar;
     fd8:	4618      	mov	r0, r3
    while ( i32NumChars-- )
     fda:	f1ac 0c08 	sub.w	ip, ip, #8
            *pcBuf++ = cPadChar;
     fde:	f800 5b01 	strb.w	r5, [r0], #1
     fe2:	3308      	adds	r3, #8
     fe4:	7005      	strb	r5, [r0, #0]
     fe6:	f803 5c06 	strb.w	r5, [r3, #-6]
     fea:	f803 5c05 	strb.w	r5, [r3, #-5]
     fee:	f803 5c04 	strb.w	r5, [r3, #-4]
     ff2:	f803 5c03 	strb.w	r5, [r3, #-3]
     ff6:	f803 5c02 	strb.w	r5, [r3, #-2]
    while ( i32NumChars-- )
     ffa:	f11c 0001 	adds.w	r0, ip, #1
     ffe:	eba3 0108 	sub.w	r1, r3, r8
            *pcBuf++ = cPadChar;
    1002:	f803 5c01 	strb.w	r5, [r3, #-1]
    while ( i32NumChars-- )
    1006:	d1e7      	bne.n	fd8 <am_util_stdio_vsprintf+0x7bc>
    1008:	460d      	mov	r5, r1
    100a:	460a      	mov	r2, r1
                        pcBuf += pcBuf ? iWidth : 0;
    100c:	44a8      	add	r8, r5
                        ui32CharCnt += iWidth;
    100e:	4491      	add	r9, r2
    1010:	e5b6      	b.n	b80 <am_util_stdio_vsprintf+0x364>
                if ( iWidth > 0 )
    1012:	2c00      	cmp	r4, #0
    1014:	f340 8443 	ble.w	189e <am_util_stdio_vsprintf+0x1082>
        return ui32RetVal;
    1018:	4607      	mov	r7, r0
                        iWidth -= ui32strlen;
    101a:	1be2      	subs	r2, r4, r7
    if ( i32NumChars <= 0 )
    101c:	2a00      	cmp	r2, #0
    101e:	f340 8464 	ble.w	18ea <am_util_stdio_vsprintf+0x10ce>
    while ( i32NumChars-- )
    1022:	f102 3eff 	add.w	lr, r2, #4294967295
        if ( pcBuf )
    1026:	f1b8 0f00 	cmp.w	r8, #0
    102a:	d05c      	beq.n	10e6 <am_util_stdio_vsprintf+0x8ca>
            *pcBuf++ = cPadChar;
    102c:	4643      	mov	r3, r8
    102e:	f00e 0407 	and.w	r4, lr, #7
    1032:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    1036:	f10e 3aff 	add.w	sl, lr, #4294967295
    103a:	eba3 0c08 	sub.w	ip, r3, r8
    103e:	f1be 0f00 	cmp.w	lr, #0
    1042:	d045      	beq.n	10d0 <am_util_stdio_vsprintf+0x8b4>
    1044:	b364      	cbz	r4, 10a0 <am_util_stdio_vsprintf+0x884>
    1046:	2c01      	cmp	r4, #1
    1048:	d021      	beq.n	108e <am_util_stdio_vsprintf+0x872>
    104a:	2c02      	cmp	r4, #2
    104c:	d01b      	beq.n	1086 <am_util_stdio_vsprintf+0x86a>
    104e:	2c03      	cmp	r4, #3
    1050:	d015      	beq.n	107e <am_util_stdio_vsprintf+0x862>
    1052:	2c04      	cmp	r4, #4
    1054:	d00f      	beq.n	1076 <am_util_stdio_vsprintf+0x85a>
    1056:	2c05      	cmp	r4, #5
    1058:	d009      	beq.n	106e <am_util_stdio_vsprintf+0x852>
    105a:	2c06      	cmp	r4, #6
            *pcBuf++ = cPadChar;
    105c:	bf1c      	itt	ne
    105e:	f803 5b01 	strbne.w	r5, [r3], #1
    while ( i32NumChars-- )
    1062:	f10a 3aff 	addne.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    1066:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    106a:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    106e:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    1072:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    1076:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    107a:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    107e:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    1082:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    1086:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    108a:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    108e:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    1092:	f10a 3aff 	add.w	sl, sl, #4294967295
    1096:	f11a 0401 	adds.w	r4, sl, #1
    109a:	eba3 0c08 	sub.w	ip, r3, r8
    109e:	d017      	beq.n	10d0 <am_util_stdio_vsprintf+0x8b4>
            *pcBuf++ = cPadChar;
    10a0:	4619      	mov	r1, r3
    while ( i32NumChars-- )
    10a2:	f1aa 0a08 	sub.w	sl, sl, #8
            *pcBuf++ = cPadChar;
    10a6:	f801 5b01 	strb.w	r5, [r1], #1
    10aa:	3308      	adds	r3, #8
    10ac:	700d      	strb	r5, [r1, #0]
    10ae:	f803 5c06 	strb.w	r5, [r3, #-6]
    10b2:	f803 5c05 	strb.w	r5, [r3, #-5]
    10b6:	f803 5c04 	strb.w	r5, [r3, #-4]
    10ba:	f803 5c03 	strb.w	r5, [r3, #-3]
    10be:	f803 5c02 	strb.w	r5, [r3, #-2]
    while ( i32NumChars-- )
    10c2:	f11a 0401 	adds.w	r4, sl, #1
    10c6:	eba3 0c08 	sub.w	ip, r3, r8
            *pcBuf++ = cPadChar;
    10ca:	f803 5c01 	strb.w	r5, [r3, #-1]
    while ( i32NumChars-- )
    10ce:	d1e7      	bne.n	10a0 <am_util_stdio_vsprintf+0x884>
    10d0:	4664      	mov	r4, ip
    10d2:	4662      	mov	r2, ip
                while (*pcStr != 0x0)
    10d4:	7801      	ldrb	r1, [r0, #0]
                        pcBuf += pcBuf ? iWidth : 0;
    10d6:	44a0      	add	r8, r4
                        ui32CharCnt += iWidth;
    10d8:	4491      	add	r9, r2
                while (*pcStr != 0x0)
    10da:	2900      	cmp	r1, #0
    10dc:	f43f ad50 	beq.w	b80 <am_util_stdio_vsprintf+0x364>
                        iWidth = 0;
    10e0:	2400      	movs	r4, #0
    10e2:	1c42      	adds	r2, r0, #1
    10e4:	e721      	b.n	f2a <am_util_stdio_vsprintf+0x70e>
                while (*pcStr != 0x0)
    10e6:	7803      	ldrb	r3, [r0, #0]
                        ui32CharCnt += iWidth;
    10e8:	4491      	add	r9, r2
                while (*pcStr != 0x0)
    10ea:	2b00      	cmp	r3, #0
    10ec:	f43f ad48 	beq.w	b80 <am_util_stdio_vsprintf+0x364>
                        iWidth = 0;
    10f0:	2400      	movs	r4, #0
    10f2:	1c42      	adds	r2, r0, #1
    10f4:	4690      	mov	r8, r2
    10f6:	eba9 0000 	sub.w	r0, r9, r0
    10fa:	eb00 0908 	add.w	r9, r0, r8
                while (*pcStr != 0x0)
    10fe:	f818 1b01 	ldrb.w	r1, [r8], #1
    1102:	2900      	cmp	r1, #0
    1104:	d1f9      	bne.n	10fa <am_util_stdio_vsprintf+0x8de>
    1106:	4688      	mov	r8, r1
    1108:	e71d      	b.n	f46 <am_util_stdio_vsprintf+0x72a>
    110a:	e9cd 6728 	strd	r6, r7, [sp, #160]	; 0xa0
    110e:	e9cd ab26 	strd	sl, fp, [sp, #152]	; 0x98
    1112:	9d20      	ldr	r5, [sp, #128]	; 0x80
    1114:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    1116:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
    1118:	9f21      	ldr	r7, [sp, #132]	; 0x84
    111a:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
    111e:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    1122:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
                    iWidth -= ndigits_in_u64(ui64Val);
    1126:	1b3c      	subs	r4, r7, r4
    if ( i32NumChars <= 0 )
    1128:	2c00      	cmp	r4, #0
    112a:	f340 81e3 	ble.w	14f4 <am_util_stdio_vsprintf+0xcd8>
    while ( i32NumChars-- )
    112e:	1e67      	subs	r7, r4, #1
        if ( pcBuf )
    1130:	f1b8 0f00 	cmp.w	r8, #0
    1134:	f000 81df 	beq.w	14f6 <am_util_stdio_vsprintf+0xcda>
            *pcBuf++ = cPadChar;
    1138:	4643      	mov	r3, r8
    113a:	f007 0007 	and.w	r0, r7, #7
    113e:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    1142:	f1a4 0a02 	sub.w	sl, r4, #2
    1146:	eba3 0c08 	sub.w	ip, r3, r8
    114a:	2f00      	cmp	r7, #0
    114c:	d046      	beq.n	11dc <am_util_stdio_vsprintf+0x9c0>
    114e:	b360      	cbz	r0, 11aa <am_util_stdio_vsprintf+0x98e>
    1150:	2801      	cmp	r0, #1
    1152:	d021      	beq.n	1198 <am_util_stdio_vsprintf+0x97c>
    1154:	2802      	cmp	r0, #2
    1156:	d01b      	beq.n	1190 <am_util_stdio_vsprintf+0x974>
    1158:	2803      	cmp	r0, #3
    115a:	d015      	beq.n	1188 <am_util_stdio_vsprintf+0x96c>
    115c:	2804      	cmp	r0, #4
    115e:	d00f      	beq.n	1180 <am_util_stdio_vsprintf+0x964>
    1160:	2805      	cmp	r0, #5
    1162:	d009      	beq.n	1178 <am_util_stdio_vsprintf+0x95c>
    1164:	2806      	cmp	r0, #6
            *pcBuf++ = cPadChar;
    1166:	bf1c      	itt	ne
    1168:	f803 5b01 	strbne.w	r5, [r3], #1
    while ( i32NumChars-- )
    116c:	f10a 3aff 	addne.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    1170:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    1174:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    1178:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    117c:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    1180:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    1184:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    1188:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    118c:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    1190:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    1194:	f10a 3aff 	add.w	sl, sl, #4294967295
            *pcBuf++ = cPadChar;
    1198:	f803 5b01 	strb.w	r5, [r3], #1
    while ( i32NumChars-- )
    119c:	f10a 3aff 	add.w	sl, sl, #4294967295
    11a0:	f11a 0001 	adds.w	r0, sl, #1
    11a4:	eba3 0c08 	sub.w	ip, r3, r8
    11a8:	d018      	beq.n	11dc <am_util_stdio_vsprintf+0x9c0>
            *pcBuf++ = cPadChar;
    11aa:	469e      	mov	lr, r3
    while ( i32NumChars-- )
    11ac:	f1aa 0a08 	sub.w	sl, sl, #8
            *pcBuf++ = cPadChar;
    11b0:	f80e 5b01 	strb.w	r5, [lr], #1
    11b4:	3308      	adds	r3, #8
    11b6:	f88e 5000 	strb.w	r5, [lr]
    11ba:	f803 5c06 	strb.w	r5, [r3, #-6]
    11be:	f803 5c05 	strb.w	r5, [r3, #-5]
    11c2:	f803 5c04 	strb.w	r5, [r3, #-4]
    11c6:	f803 5c03 	strb.w	r5, [r3, #-3]
    11ca:	f803 5c02 	strb.w	r5, [r3, #-2]
    while ( i32NumChars-- )
    11ce:	f11a 0701 	adds.w	r7, sl, #1
    11d2:	eba3 0c08 	sub.w	ip, r3, r8
            *pcBuf++ = cPadChar;
    11d6:	f803 5c01 	strb.w	r5, [r3, #-1]
    while ( i32NumChars-- )
    11da:	d1e6      	bne.n	11aa <am_util_stdio_vsprintf+0x98e>
    11dc:	4664      	mov	r4, ip
                    pcBuf += pcBuf ? iWidth : 0;
    11de:	44e0      	add	r8, ip
                    ui32CharCnt += iWidth;
    11e0:	44a1      	add	r9, r4
                iVal = uint64_to_str(ui64Val, pcBuf);
    11e2:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    11e6:	4642      	mov	r2, r8
    11e8:	f7ff fa1a 	bl	620 <uint64_to_str>
                if ( pcBuf )
    11ec:	f1b8 0f00 	cmp.w	r8, #0
    11f0:	d000      	beq.n	11f4 <am_util_stdio_vsprintf+0x9d8>
                    pcBuf += iVal;
    11f2:	4480      	add	r8, r0
                ui32CharCnt += iVal;
    11f4:	4481      	add	r9, r0
                break;
    11f6:	e4c3      	b.n	b80 <am_util_stdio_vsprintf+0x364>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    11f8:	78b3      	ldrb	r3, [r6, #2]
    11fa:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    11fe:	2909      	cmp	r1, #9
        pcStr++;
    1200:	f106 0602 	add.w	r6, r6, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    1204:	f200 8391 	bhi.w	192a <am_util_stdio_vsprintf+0x110e>
        uCnt++;
    1208:	2201      	movs	r2, #1
        bNeg = true;
    120a:	4694      	mov	ip, r2
    120c:	e634      	b.n	e78 <am_util_stdio_vsprintf+0x65c>
        switch ( *pcFmt )
    120e:	78b2      	ldrb	r2, [r6, #2]
    1210:	f1a2 0c46 	sub.w	ip, r2, #70	; 0x46
                pcFmt++;
    1214:	3602      	adds	r6, #2
        switch ( *pcFmt )
    1216:	f1bc 0f32 	cmp.w	ip, #50	; 0x32
    121a:	f63f ae0f 	bhi.w	e3c <am_util_stdio_vsprintf+0x620>
    121e:	a101      	add	r1, pc, #4	; (adr r1, 1224 <am_util_stdio_vsprintf+0xa08>)
    1220:	f851 f02c 	ldr.w	pc, [r1, ip, lsl #2]
    1224:	00000b43 	.word	0x00000b43
    1228:	00000e3d 	.word	0x00000e3d
    122c:	00000e3d 	.word	0x00000e3d
    1230:	00000e3d 	.word	0x00000e3d
    1234:	00000e3d 	.word	0x00000e3d
    1238:	00000e3d 	.word	0x00000e3d
    123c:	00000e3d 	.word	0x00000e3d
    1240:	00000e3d 	.word	0x00000e3d
    1244:	00000e3d 	.word	0x00000e3d
    1248:	00000e3d 	.word	0x00000e3d
    124c:	00000e3d 	.word	0x00000e3d
    1250:	00000e3d 	.word	0x00000e3d
    1254:	00000e3d 	.word	0x00000e3d
    1258:	00000e3d 	.word	0x00000e3d
    125c:	00000e3d 	.word	0x00000e3d
    1260:	00000e3d 	.word	0x00000e3d
    1264:	00000e3d 	.word	0x00000e3d
    1268:	00000e3d 	.word	0x00000e3d
    126c:	000019f5 	.word	0x000019f5
    1270:	00000e3d 	.word	0x00000e3d
    1274:	00000e3d 	.word	0x00000e3d
    1278:	00000e3d 	.word	0x00000e3d
    127c:	00000e3d 	.word	0x00000e3d
    1280:	00000e3d 	.word	0x00000e3d
    1284:	00000e3d 	.word	0x00000e3d
    1288:	00000e3d 	.word	0x00000e3d
    128c:	00000e3d 	.word	0x00000e3d
    1290:	00000e3d 	.word	0x00000e3d
    1294:	00000e3d 	.word	0x00000e3d
    1298:	00000b85 	.word	0x00000b85
    129c:	00001307 	.word	0x00001307
    12a0:	00000e3d 	.word	0x00000e3d
    12a4:	00000b43 	.word	0x00000b43
    12a8:	00000e3d 	.word	0x00000e3d
    12ac:	00000e3d 	.word	0x00000e3d
    12b0:	00001307 	.word	0x00001307
    12b4:	00000e3d 	.word	0x00000e3d
    12b8:	00000e3d 	.word	0x00000e3d
    12bc:	00000e3d 	.word	0x00000e3d
    12c0:	00000e3d 	.word	0x00000e3d
    12c4:	00000e3d 	.word	0x00000e3d
    12c8:	00000e3d 	.word	0x00000e3d
    12cc:	00000e3d 	.word	0x00000e3d
    12d0:	00000e3d 	.word	0x00000e3d
    12d4:	00000e3d 	.word	0x00000e3d
    12d8:	00000ef9 	.word	0x00000ef9
    12dc:	00000e3d 	.word	0x00000e3d
    12e0:	000012f1 	.word	0x000012f1
    12e4:	00000e3d 	.word	0x00000e3d
    12e8:	00000e3d 	.word	0x00000e3d
    12ec:	00001887 	.word	0x00001887
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    12f0:	f10b 0207 	add.w	r2, fp, #7
    12f4:	f022 0b07 	bic.w	fp, r2, #7
    12f8:	e9db 0100 	ldrd	r0, r1, [fp]
    12fc:	f10b 0b08 	add.w	fp, fp, #8
    1300:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    1304:	e501      	b.n	d0a <am_util_stdio_vsprintf+0x4ee>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1306:	f10b 0307 	add.w	r3, fp, #7
    130a:	f023 0b07 	bic.w	fp, r3, #7
    130e:	e9db 0100 	ldrd	r0, r1, [fp]
    1312:	f10b 0b08 	add.w	fp, fp, #8
    1316:	e44e      	b.n	bb6 <am_util_stdio_vsprintf+0x39a>
                    ui64Val = -i64Val;          // Get absolute value
    1318:	4240      	negs	r0, r0
    131a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    131e:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
                if ( iWidth )
    1322:	2c00      	cmp	r4, #0
    1324:	f040 834e 	bne.w	19c4 <am_util_stdio_vsprintf+0x11a8>
                        if ( pcBuf )
    1328:	f1b8 0f00 	cmp.w	r8, #0
    132c:	f000 82d1 	beq.w	18d2 <am_util_stdio_vsprintf+0x10b6>
                            *pcBuf++ = '-';
    1330:	252d      	movs	r5, #45	; 0x2d
    1332:	f888 5000 	strb.w	r5, [r8]
                        ++ui32CharCnt;
    1336:	f109 0901 	add.w	r9, r9, #1
                            *pcBuf++ = '-';
    133a:	f108 0801 	add.w	r8, r8, #1
                iVal = uint64_to_str(ui64Val, pcBuf);
    133e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    1342:	4642      	mov	r2, r8
    1344:	f7ff f96c 	bl	620 <uint64_to_str>
                if ( pcBuf )
    1348:	f1b8 0f00 	cmp.w	r8, #0
    134c:	f47f af51 	bne.w	11f2 <am_util_stdio_vsprintf+0x9d6>
                    pcBuf += iVal;
    1350:	f04f 0800 	mov.w	r8, #0
                ui32CharCnt += iVal;
    1354:	4481      	add	r9, r0
    1356:	e413      	b.n	b80 <am_util_stdio_vsprintf+0x364>
    1358:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
    135c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    135e:	9f22      	ldr	r7, [sp, #136]	; 0x88
                    if ( bNeg )
    1360:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    1362:	9d21      	ldr	r5, [sp, #132]	; 0x84
    1364:	9e20      	ldr	r6, [sp, #128]	; 0x80
    1366:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
    136a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    136e:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
                    iWidth -= ndigits_in_i64(ui64Val);
    1372:	1aff      	subs	r7, r7, r3
    1374:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
                    if ( bNeg )
    1378:	b13c      	cbz	r4, 138a <am_util_stdio_vsprintf+0xb6e>
                        if ( ui8PadChar == '0' )
    137a:	2d30      	cmp	r5, #48	; 0x30
                        --iWidth;
    137c:	f107 31ff 	add.w	r1, r7, #4294967295
                        if ( ui8PadChar == '0' )
    1380:	f000 82c3 	beq.w	190a <am_util_stdio_vsprintf+0x10ee>
    1384:	2001      	movs	r0, #1
                        --iWidth;
    1386:	460f      	mov	r7, r1
    1388:	901b      	str	r0, [sp, #108]	; 0x6c
    if ( i32NumChars <= 0 )
    138a:	2f00      	cmp	r7, #0
    138c:	f340 82d3 	ble.w	1936 <am_util_stdio_vsprintf+0x111a>
    while ( i32NumChars-- )
    1390:	1e78      	subs	r0, r7, #1
        if ( pcBuf )
    1392:	f1b8 0f00 	cmp.w	r8, #0
    1396:	d067      	beq.n	1468 <am_util_stdio_vsprintf+0xc4c>
    1398:	f010 0107 	ands.w	r1, r0, #7
    139c:	f1a7 0a02 	sub.w	sl, r7, #2
    13a0:	4643      	mov	r3, r8
    13a2:	d03a      	beq.n	141a <am_util_stdio_vsprintf+0xbfe>
            *pcBuf++ = cPadChar;
    13a4:	4643      	mov	r3, r8
    13a6:	2901      	cmp	r1, #1
    13a8:	f1a7 0a03 	sub.w	sl, r7, #3
    13ac:	f803 5b01 	strb.w	r5, [r3], #1
    13b0:	d033      	beq.n	141a <am_util_stdio_vsprintf+0xbfe>
    13b2:	2902      	cmp	r1, #2
    13b4:	d01b      	beq.n	13ee <am_util_stdio_vsprintf+0xbd2>
    13b6:	2903      	cmp	r1, #3
    13b8:	d015      	beq.n	13e6 <am_util_stdio_vsprintf+0xbca>
    13ba:	2904      	cmp	r1, #4
    13bc:	d00f      	beq.n	13de <am_util_stdio_vsprintf+0xbc2>
    13be:	2905      	cmp	r1, #5
    13c0:	d009      	beq.n	13d6 <am_util_stdio_vsprintf+0xbba>
    13c2:	2906      	cmp	r1, #6
    13c4:	bf1c      	itt	ne
    13c6:	f803 5b01 	strbne.w	r5, [r3], #1
    13ca:	f1a7 0a04 	subne.w	sl, r7, #4
    13ce:	f803 5b01 	strb.w	r5, [r3], #1
    13d2:	f10a 3aff 	add.w	sl, sl, #4294967295
    13d6:	f803 5b01 	strb.w	r5, [r3], #1
    13da:	f10a 3aff 	add.w	sl, sl, #4294967295
    13de:	f803 5b01 	strb.w	r5, [r3], #1
    13e2:	f10a 3aff 	add.w	sl, sl, #4294967295
    13e6:	f803 5b01 	strb.w	r5, [r3], #1
    13ea:	f10a 3aff 	add.w	sl, sl, #4294967295
    13ee:	f803 5b01 	strb.w	r5, [r3], #1
    13f2:	f10a 3aff 	add.w	sl, sl, #4294967295
    13f6:	e010      	b.n	141a <am_util_stdio_vsprintf+0xbfe>
    13f8:	f88c 5000 	strb.w	r5, [ip]
    13fc:	3308      	adds	r3, #8
    13fe:	f803 5c06 	strb.w	r5, [r3, #-6]
    1402:	f803 5c05 	strb.w	r5, [r3, #-5]
    1406:	f803 5c04 	strb.w	r5, [r3, #-4]
    140a:	f803 5c03 	strb.w	r5, [r3, #-3]
    140e:	f803 5c02 	strb.w	r5, [r3, #-2]
    1412:	f1aa 0a08 	sub.w	sl, sl, #8
    1416:	f803 5c01 	strb.w	r5, [r3, #-1]
    141a:	469c      	mov	ip, r3
    while ( i32NumChars-- )
    141c:	f11a 0401 	adds.w	r4, sl, #1
            *pcBuf++ = cPadChar;
    1420:	f80c 5b01 	strb.w	r5, [ip], #1
    1424:	ebac 0e08 	sub.w	lr, ip, r8
    while ( i32NumChars-- )
    1428:	d1e6      	bne.n	13f8 <am_util_stdio_vsprintf+0xbdc>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    142a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    142c:	44f0      	add	r8, lr
                    ui32CharCnt += iWidth;
    142e:	44f1      	add	r9, lr
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    1430:	2a00      	cmp	r2, #0
    1432:	d084      	beq.n	133e <am_util_stdio_vsprintf+0xb22>
    1434:	2d20      	cmp	r5, #32
    1436:	d182      	bne.n	133e <am_util_stdio_vsprintf+0xb22>
                        if ( pcBuf )
    1438:	f1b8 0f00 	cmp.w	r8, #0
    143c:	f47f af78 	bne.w	1330 <am_util_stdio_vsprintf+0xb14>
                iVal = uint64_to_str(ui64Val, pcBuf);
    1440:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    1444:	2200      	movs	r2, #0
    1446:	f7ff f8eb 	bl	620 <uint64_to_str>
                        ++ui32CharCnt;
    144a:	f109 0901 	add.w	r9, r9, #1
                iVal = uint64_to_str(ui64Val, pcBuf);
    144e:	f04f 0800 	mov.w	r8, #0
                ui32CharCnt += iVal;
    1452:	4481      	add	r9, r0
    1454:	f7ff bb94 	b.w	b80 <am_util_stdio_vsprintf+0x364>
    if ( i32NumChars <= 0 )
    1458:	2900      	cmp	r1, #0
                            ++ui32CharCnt;
    145a:	f109 0901 	add.w	r9, r9, #1
    if ( i32NumChars <= 0 )
    145e:	f340 82bc 	ble.w	19da <am_util_stdio_vsprintf+0x11be>
    while ( i32NumChars-- )
    1462:	2201      	movs	r2, #1
    1464:	1eb8      	subs	r0, r7, #2
    1466:	921b      	str	r2, [sp, #108]	; 0x6c
    1468:	3001      	adds	r0, #1
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    146a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
                    ui32CharCnt += iWidth;
    146c:	4481      	add	r9, r0
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    146e:	2f00      	cmp	r7, #0
    1470:	f000 821b 	beq.w	18aa <am_util_stdio_vsprintf+0x108e>
    1474:	2d20      	cmp	r5, #32
    1476:	d0e3      	beq.n	1440 <am_util_stdio_vsprintf+0xc24>
                iVal = uint64_to_str(ui64Val, pcBuf);
    1478:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    147c:	2200      	movs	r2, #0
    147e:	f7ff f8cf 	bl	620 <uint64_to_str>
    1482:	e765      	b.n	1350 <am_util_stdio_vsprintf+0xb34>
    if ( i32NumChars <= 0 )
    1484:	2700      	movs	r7, #0
    1486:	2400      	movs	r4, #0
    1488:	f7ff baee 	b.w	a68 <am_util_stdio_vsprintf+0x24c>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    148c:	ee17 7a90 	vmov	r7, s15
    1490:	f3c7 5ec7 	ubfx	lr, r7, #23, #8
    1494:	f1ae 017f 	sub.w	r1, lr, #127	; 0x7f
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    1498:	f3c7 0216 	ubfx	r2, r7, #0, #23
    if (iExp2 >= 31)
    149c:	291e      	cmp	r1, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    149e:	f442 0000 	orr.w	r0, r2, #8388608	; 0x800000
    if (iExp2 >= 31)
    14a2:	f300 8246 	bgt.w	1932 <am_util_stdio_vsprintf+0x1116>
    else if (iExp2 < -23)
    14a6:	f111 0f17 	cmn.w	r1, #23
    14aa:	f2c0 823c 	blt.w	1926 <am_util_stdio_vsprintf+0x110a>
    else if (iExp2 >= 23)
    14ae:	2916      	cmp	r1, #22
    14b0:	dd2f      	ble.n	1512 <am_util_stdio_vsprintf+0xcf6>
        i32IntPart = i32Significand << (iExp2 - 23);
    14b2:	f1ae 0296 	sub.w	r2, lr, #150	; 0x96
    if (unFloatValue.I32 < 0)
    14b6:	2f00      	cmp	r7, #0
        i32IntPart = i32Significand << (iExp2 - 23);
    14b8:	fa00 f002 	lsl.w	r0, r0, r2
    if (unFloatValue.I32 < 0)
    14bc:	f2c0 825c 	blt.w	1978 <am_util_stdio_vsprintf+0x115c>
    if (i32IntPart == 0)
    14c0:	2800      	cmp	r0, #0
    14c2:	f040 824c 	bne.w	195e <am_util_stdio_vsprintf+0x1142>
    *pcBuf++ = '.';
    14c6:	252e      	movs	r5, #46	; 0x2e
        *pcBuf++ = '0';
    14c8:	f04f 0430 	mov.w	r4, #48	; 0x30
    *pcBuf++ = '.';
    14cc:	f888 5001 	strb.w	r5, [r8, #1]
        *pcBuf++ = '0';
    14d0:	f888 4000 	strb.w	r4, [r8]
    14d4:	f108 0501 	add.w	r5, r8, #1
        *pcBuf++ = '0';
    14d8:	1caa      	adds	r2, r5, #2
    14da:	f04f 0430 	mov.w	r4, #48	; 0x30
    14de:	706c      	strb	r4, [r5, #1]
    14e0:	eba2 0008 	sub.w	r0, r2, r8
    *pcBuf = 0x00;
    14e4:	2500      	movs	r5, #0
                    if ( iVal < 0 )
    14e6:	42a8      	cmp	r0, r5
    *pcBuf = 0x00;
    14e8:	7015      	strb	r5, [r2, #0]
                    if ( iVal < 0 )
    14ea:	f2c0 81e7 	blt.w	18bc <am_util_stdio_vsprintf+0x10a0>
    14ee:	4682      	mov	sl, r0
    14f0:	f7ff bb44 	b.w	b7c <am_util_stdio_vsprintf+0x360>
    if ( i32NumChars <= 0 )
    14f4:	2400      	movs	r4, #0
    14f6:	f04f 0c00 	mov.w	ip, #0
    14fa:	e670      	b.n	11de <am_util_stdio_vsprintf+0x9c2>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    14fc:	4606      	mov	r6, r0
    14fe:	2400      	movs	r4, #0
    1500:	f7ff b9f4 	b.w	8ec <am_util_stdio_vsprintf+0xd0>
    1504:	f04f 0a00 	mov.w	sl, #0
    uint32_t ui32Val = 0, uCnt = 0;
    1508:	4652      	mov	r2, sl
            pcFmt += ui32NumChars;
    150a:	1886      	adds	r6, r0, r2
    150c:	5c82      	ldrb	r2, [r0, r2]
    150e:	f7ff b9f9 	b.w	904 <am_util_stdio_vsprintf+0xe8>
    else if (iExp2 >= 0)
    1512:	2900      	cmp	r1, #0
    1514:	f2c0 8214 	blt.w	1940 <am_util_stdio_vsprintf+0x1124>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    1518:	f1ae 047e 	sub.w	r4, lr, #126	; 0x7e
    151c:	fa00 f304 	lsl.w	r3, r0, r4
        i32IntPart = i32Significand >> (23 - iExp2);
    1520:	f1c1 0117 	rsb	r1, r1, #23
    if (unFloatValue.I32 < 0)
    1524:	2f00      	cmp	r7, #0
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    1526:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
        i32IntPart = i32Significand >> (23 - iExp2);
    152a:	fa40 f001 	asr.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
    152e:	f2c0 823b 	blt.w	19a8 <am_util_stdio_vsprintf+0x118c>
    1532:	4645      	mov	r5, r8
            uint64_to_str(i32IntPart, pcBuf);
    1534:	462a      	mov	r2, r5
    1536:	17c1      	asrs	r1, r0, #31
    1538:	f7ff f872 	bl	620 <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
    153c:	7829      	ldrb	r1, [r5, #0]
    153e:	b119      	cbz	r1, 1548 <am_util_stdio_vsprintf+0xd2c>
    1540:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    1544:	2800      	cmp	r0, #0
    1546:	d1fb      	bne.n	1540 <am_util_stdio_vsprintf+0xd24>
    *pcBuf++ = '.';
    1548:	222e      	movs	r2, #46	; 0x2e
    154a:	702a      	strb	r2, [r5, #0]
    if (i32FracPart == 0)
    154c:	2c00      	cmp	r4, #0
    154e:	d0c3      	beq.n	14d8 <am_util_stdio_vsprintf+0xcbc>
    *pcBuf++ = '.';
    1550:	1c6a      	adds	r2, r5, #1
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    1552:	eba2 0008 	sub.w	r0, r2, r8
    1556:	f1c0 0c13 	rsb	ip, r0, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    155a:	45e2      	cmp	sl, ip
    155c:	bfa8      	it	ge
    155e:	46e2      	movge	sl, ip
        for (jx = 0; jx < iMax; jx++)
    1560:	f1ba 0f00 	cmp.w	sl, #0
    1564:	f340 80b2 	ble.w	16cc <am_util_stdio_vsprintf+0xeb0>
            i32FracPart *= 10;
    1568:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    156c:	0067      	lsls	r7, r4, #1
    156e:	eb05 000a 	add.w	r0, r5, sl
            *pcBuf++ = (i32FracPart >> 24) + '0';
    1572:	1639      	asrs	r1, r7, #24
    1574:	3130      	adds	r1, #48	; 0x30
    1576:	f10a 3eff 	add.w	lr, sl, #4294967295
        for (jx = 0; jx < iMax; jx++)
    157a:	4290      	cmp	r0, r2
            *pcBuf++ = (i32FracPart >> 24) + '0';
    157c:	7069      	strb	r1, [r5, #1]
    157e:	901a      	str	r0, [sp, #104]	; 0x68
            i32FracPart &= 0x00FFFFFF;
    1580:	f027 447f 	bic.w	r4, r7, #4278190080	; 0xff000000
    1584:	f00e 0507 	and.w	r5, lr, #7
    1588:	4613      	mov	r3, r2
        for (jx = 0; jx < iMax; jx++)
    158a:	f000 809c 	beq.w	16c6 <am_util_stdio_vsprintf+0xeaa>
    158e:	2d00      	cmp	r5, #0
    1590:	d04d      	beq.n	162e <am_util_stdio_vsprintf+0xe12>
    1592:	2d01      	cmp	r5, #1
    1594:	d03f      	beq.n	1616 <am_util_stdio_vsprintf+0xdfa>
    1596:	2d02      	cmp	r5, #2
    1598:	d034      	beq.n	1604 <am_util_stdio_vsprintf+0xde8>
    159a:	2d03      	cmp	r5, #3
    159c:	d029      	beq.n	15f2 <am_util_stdio_vsprintf+0xdd6>
    159e:	2d04      	cmp	r5, #4
    15a0:	d01e      	beq.n	15e0 <am_util_stdio_vsprintf+0xdc4>
    15a2:	2d05      	cmp	r5, #5
    15a4:	d013      	beq.n	15ce <am_util_stdio_vsprintf+0xdb2>
    15a6:	2d06      	cmp	r5, #6
    15a8:	d008      	beq.n	15bc <am_util_stdio_vsprintf+0xda0>
            i32FracPart *= 10;
    15aa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    15ae:	0067      	lsls	r7, r4, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    15b0:	1639      	asrs	r1, r7, #24
    15b2:	3130      	adds	r1, #48	; 0x30
    15b4:	f803 1f01 	strb.w	r1, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    15b8:	f027 447f 	bic.w	r4, r7, #4278190080	; 0xff000000
            i32FracPart *= 10;
    15bc:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    15c0:	0045      	lsls	r5, r0, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    15c2:	162c      	asrs	r4, r5, #24
    15c4:	3430      	adds	r4, #48	; 0x30
    15c6:	f803 4f01 	strb.w	r4, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    15ca:	f025 447f 	bic.w	r4, r5, #4278190080	; 0xff000000
            i32FracPart *= 10;
    15ce:	eb04 0784 	add.w	r7, r4, r4, lsl #2
    15d2:	0078      	lsls	r0, r7, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    15d4:	1601      	asrs	r1, r0, #24
    15d6:	3130      	adds	r1, #48	; 0x30
    15d8:	f803 1f01 	strb.w	r1, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    15dc:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
            i32FracPart *= 10;
    15e0:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    15e4:	006c      	lsls	r4, r5, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    15e6:	1627      	asrs	r7, r4, #24
    15e8:	3730      	adds	r7, #48	; 0x30
    15ea:	f803 7f01 	strb.w	r7, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    15ee:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
            i32FracPart *= 10;
    15f2:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    15f6:	0045      	lsls	r5, r0, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    15f8:	1629      	asrs	r1, r5, #24
    15fa:	3130      	adds	r1, #48	; 0x30
    15fc:	f803 1f01 	strb.w	r1, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    1600:	f025 447f 	bic.w	r4, r5, #4278190080	; 0xff000000
            i32FracPart *= 10;
    1604:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    1608:	0067      	lsls	r7, r4, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    160a:	1638      	asrs	r0, r7, #24
    160c:	3030      	adds	r0, #48	; 0x30
    160e:	f803 0f01 	strb.w	r0, [r3, #1]!
            i32FracPart &= 0x00FFFFFF;
    1612:	f027 447f 	bic.w	r4, r7, #4278190080	; 0xff000000
            i32FracPart *= 10;
    1616:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    161a:	006c      	lsls	r4, r5, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    161c:	1621      	asrs	r1, r4, #24
    161e:	3130      	adds	r1, #48	; 0x30
    1620:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (jx = 0; jx < iMax; jx++)
    1624:	9f1a      	ldr	r7, [sp, #104]	; 0x68
    1626:	429f      	cmp	r7, r3
            i32FracPart &= 0x00FFFFFF;
    1628:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    162c:	d04b      	beq.n	16c6 <am_util_stdio_vsprintf+0xeaa>
            i32FracPart *= 10;
    162e:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    1632:	0041      	lsls	r1, r0, #1
            i32FracPart &= 0x00FFFFFF;
    1634:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
            i32FracPart *= 10;
    1638:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    163c:	006c      	lsls	r4, r5, #1
            i32FracPart &= 0x00FFFFFF;
    163e:	f024 4e7f 	bic.w	lr, r4, #4278190080	; 0xff000000
            i32FracPart *= 10;
    1642:	eb0e 078e 	add.w	r7, lr, lr, lsl #2
    1646:	ea4f 0c47 	mov.w	ip, r7, lsl #1
            i32FracPart &= 0x00FFFFFF;
    164a:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
            i32FracPart *= 10;
    164e:	eb00 0580 	add.w	r5, r0, r0, lsl #2
    1652:	ea4f 0e45 	mov.w	lr, r5, lsl #1
            i32FracPart &= 0x00FFFFFF;
    1656:	f02e 477f 	bic.w	r7, lr, #4278190080	; 0xff000000
            i32FracPart *= 10;
    165a:	eb07 0087 	add.w	r0, r7, r7, lsl #2
    165e:	0047      	lsls	r7, r0, #1
            i32FracPart &= 0x00FFFFFF;
    1660:	f027 457f 	bic.w	r5, r7, #4278190080	; 0xff000000
            i32FracPart *= 10;
    1664:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    1668:	0045      	lsls	r5, r0, #1
            i32FracPart &= 0x00FFFFFF;
    166a:	f025 407f 	bic.w	r0, r5, #4278190080	; 0xff000000
            i32FracPart *= 10;
    166e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
            *pcBuf++ = (i32FracPart >> 24) + '0';
    1672:	1609      	asrs	r1, r1, #24
            i32FracPart *= 10;
    1674:	0040      	lsls	r0, r0, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    1676:	3130      	adds	r1, #48	; 0x30
    1678:	1624      	asrs	r4, r4, #24
    167a:	3430      	adds	r4, #48	; 0x30
    167c:	7059      	strb	r1, [r3, #1]
            i32FracPart &= 0x00FFFFFF;
    167e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
            *pcBuf++ = (i32FracPart >> 24) + '0';
    1682:	709c      	strb	r4, [r3, #2]
            i32FracPart *= 10;
    1684:	eb01 0481 	add.w	r4, r1, r1, lsl #2
    1688:	0064      	lsls	r4, r4, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    168a:	1601      	asrs	r1, r0, #24
    168c:	ea4f 6c2c 	mov.w	ip, ip, asr #24
    1690:	1620      	asrs	r0, r4, #24
    1692:	ea4f 6e2e 	mov.w	lr, lr, asr #24
    1696:	163f      	asrs	r7, r7, #24
    1698:	162d      	asrs	r5, r5, #24
    169a:	3730      	adds	r7, #48	; 0x30
    169c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    16a0:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
    16a4:	3530      	adds	r5, #48	; 0x30
    16a6:	3130      	adds	r1, #48	; 0x30
    16a8:	3030      	adds	r0, #48	; 0x30
    16aa:	715f      	strb	r7, [r3, #5]
    16ac:	f883 c003 	strb.w	ip, [r3, #3]
    16b0:	f883 e004 	strb.w	lr, [r3, #4]
    16b4:	719d      	strb	r5, [r3, #6]
    16b6:	71d9      	strb	r1, [r3, #7]
        for (jx = 0; jx < iMax; jx++)
    16b8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
            *pcBuf++ = (i32FracPart >> 24) + '0';
    16ba:	f803 0f08 	strb.w	r0, [r3, #8]!
        for (jx = 0; jx < iMax; jx++)
    16be:	429f      	cmp	r7, r3
            i32FracPart &= 0x00FFFFFF;
    16c0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    16c4:	d1b3      	bne.n	162e <am_util_stdio_vsprintf+0xe12>
    16c6:	4452      	add	r2, sl
    16c8:	eba2 0008 	sub.w	r0, r2, r8
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    16cc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    16d0:	f343 55c7 	sbfx	r5, r3, #23, #8
    16d4:	2d04      	cmp	r5, #4
    16d6:	f77f af05 	ble.w	14e4 <am_util_stdio_vsprintf+0xcc8>
            pcBuftmp = pcBuf - 1;
    16da:	1e53      	subs	r3, r2, #1
            while ( pcBuftmp >= pcBufInitial )
    16dc:	4598      	cmp	r8, r3
    16de:	f63f af01 	bhi.w	14e4 <am_util_stdio_vsprintf+0xcc8>
    16e2:	f108 37ff 	add.w	r7, r8, #4294967295
                if ( *pcBuftmp == '.' )
    16e6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    16ea:	1afc      	subs	r4, r7, r3
    16ec:	43e5      	mvns	r5, r4
    16ee:	292e      	cmp	r1, #46	; 0x2e
    16f0:	f005 0407 	and.w	r4, r5, #7
    16f4:	d005      	beq.n	1702 <am_util_stdio_vsprintf+0xee6>
                else if ( *pcBuftmp == '9' )
    16f6:	2939      	cmp	r1, #57	; 0x39
    16f8:	f040 8161 	bne.w	19be <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    16fc:	f04f 0130 	mov.w	r1, #48	; 0x30
    1700:	7019      	strb	r1, [r3, #0]
                pcBuftmp--;
    1702:	3b01      	subs	r3, #1
            while ( pcBuftmp >= pcBufInitial )
    1704:	42bb      	cmp	r3, r7
    1706:	f43f aeed 	beq.w	14e4 <am_util_stdio_vsprintf+0xcc8>
    170a:	2c00      	cmp	r4, #0
    170c:	d054      	beq.n	17b8 <am_util_stdio_vsprintf+0xf9c>
    170e:	2c01      	cmp	r4, #1
    1710:	d045      	beq.n	179e <am_util_stdio_vsprintf+0xf82>
    1712:	2c02      	cmp	r4, #2
    1714:	d039      	beq.n	178a <am_util_stdio_vsprintf+0xf6e>
    1716:	2c03      	cmp	r4, #3
    1718:	d02d      	beq.n	1776 <am_util_stdio_vsprintf+0xf5a>
    171a:	2c04      	cmp	r4, #4
    171c:	d021      	beq.n	1762 <am_util_stdio_vsprintf+0xf46>
    171e:	2c05      	cmp	r4, #5
    1720:	d015      	beq.n	174e <am_util_stdio_vsprintf+0xf32>
    1722:	2c06      	cmp	r4, #6
    1724:	d009      	beq.n	173a <am_util_stdio_vsprintf+0xf1e>
                if ( *pcBuftmp == '.' )
    1726:	7819      	ldrb	r1, [r3, #0]
    1728:	292e      	cmp	r1, #46	; 0x2e
    172a:	d005      	beq.n	1738 <am_util_stdio_vsprintf+0xf1c>
                else if ( *pcBuftmp == '9' )
    172c:	2939      	cmp	r1, #57	; 0x39
    172e:	f040 8146 	bne.w	19be <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    1732:	f04f 0530 	mov.w	r5, #48	; 0x30
    1736:	701d      	strb	r5, [r3, #0]
                pcBuftmp--;
    1738:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    173a:	7819      	ldrb	r1, [r3, #0]
    173c:	292e      	cmp	r1, #46	; 0x2e
    173e:	d005      	beq.n	174c <am_util_stdio_vsprintf+0xf30>
                else if ( *pcBuftmp == '9' )
    1740:	2939      	cmp	r1, #57	; 0x39
    1742:	f040 813c 	bne.w	19be <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    1746:	f04f 0430 	mov.w	r4, #48	; 0x30
    174a:	701c      	strb	r4, [r3, #0]
                pcBuftmp--;
    174c:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    174e:	7819      	ldrb	r1, [r3, #0]
    1750:	292e      	cmp	r1, #46	; 0x2e
    1752:	d005      	beq.n	1760 <am_util_stdio_vsprintf+0xf44>
                else if ( *pcBuftmp == '9' )
    1754:	2939      	cmp	r1, #57	; 0x39
    1756:	f040 8132 	bne.w	19be <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    175a:	f04f 0130 	mov.w	r1, #48	; 0x30
    175e:	7019      	strb	r1, [r3, #0]
                pcBuftmp--;
    1760:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    1762:	7819      	ldrb	r1, [r3, #0]
    1764:	292e      	cmp	r1, #46	; 0x2e
    1766:	d005      	beq.n	1774 <am_util_stdio_vsprintf+0xf58>
                else if ( *pcBuftmp == '9' )
    1768:	2939      	cmp	r1, #57	; 0x39
    176a:	f040 8128 	bne.w	19be <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    176e:	f04f 0530 	mov.w	r5, #48	; 0x30
    1772:	701d      	strb	r5, [r3, #0]
                pcBuftmp--;
    1774:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    1776:	7819      	ldrb	r1, [r3, #0]
    1778:	292e      	cmp	r1, #46	; 0x2e
    177a:	d005      	beq.n	1788 <am_util_stdio_vsprintf+0xf6c>
                else if ( *pcBuftmp == '9' )
    177c:	2939      	cmp	r1, #57	; 0x39
    177e:	f040 811e 	bne.w	19be <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    1782:	f04f 0430 	mov.w	r4, #48	; 0x30
    1786:	701c      	strb	r4, [r3, #0]
                pcBuftmp--;
    1788:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    178a:	7819      	ldrb	r1, [r3, #0]
    178c:	292e      	cmp	r1, #46	; 0x2e
    178e:	d005      	beq.n	179c <am_util_stdio_vsprintf+0xf80>
                else if ( *pcBuftmp == '9' )
    1790:	2939      	cmp	r1, #57	; 0x39
    1792:	f040 8114 	bne.w	19be <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    1796:	f04f 0130 	mov.w	r1, #48	; 0x30
    179a:	7019      	strb	r1, [r3, #0]
                pcBuftmp--;
    179c:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    179e:	7819      	ldrb	r1, [r3, #0]
    17a0:	292e      	cmp	r1, #46	; 0x2e
    17a2:	d005      	beq.n	17b0 <am_util_stdio_vsprintf+0xf94>
                else if ( *pcBuftmp == '9' )
    17a4:	2939      	cmp	r1, #57	; 0x39
    17a6:	f040 810a 	bne.w	19be <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    17aa:	f04f 0530 	mov.w	r5, #48	; 0x30
    17ae:	701d      	strb	r5, [r3, #0]
                pcBuftmp--;
    17b0:	3b01      	subs	r3, #1
            while ( pcBuftmp >= pcBufInitial )
    17b2:	42bb      	cmp	r3, r7
    17b4:	f43f ae96 	beq.w	14e4 <am_util_stdio_vsprintf+0xcc8>
                if ( *pcBuftmp == '.' )
    17b8:	7819      	ldrb	r1, [r3, #0]
    17ba:	292e      	cmp	r1, #46	; 0x2e
    17bc:	d005      	beq.n	17ca <am_util_stdio_vsprintf+0xfae>
                else if ( *pcBuftmp == '9' )
    17be:	2939      	cmp	r1, #57	; 0x39
    17c0:	f040 80fd 	bne.w	19be <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    17c4:	f04f 0430 	mov.w	r4, #48	; 0x30
    17c8:	701c      	strb	r4, [r3, #0]
                pcBuftmp--;
    17ca:	3b01      	subs	r3, #1
                if ( *pcBuftmp == '.' )
    17cc:	7819      	ldrb	r1, [r3, #0]
    17ce:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    17d0:	469a      	mov	sl, r3
                if ( *pcBuftmp == '.' )
    17d2:	d005      	beq.n	17e0 <am_util_stdio_vsprintf+0xfc4>
                else if ( *pcBuftmp == '9' )
    17d4:	2939      	cmp	r1, #57	; 0x39
    17d6:	f040 80f2 	bne.w	19be <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    17da:	f04f 0130 	mov.w	r1, #48	; 0x30
    17de:	7019      	strb	r1, [r3, #0]
                if ( *pcBuftmp == '.' )
    17e0:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
    17e4:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    17e6:	f10a 33ff 	add.w	r3, sl, #4294967295
                if ( *pcBuftmp == '.' )
    17ea:	d006      	beq.n	17fa <am_util_stdio_vsprintf+0xfde>
                else if ( *pcBuftmp == '9' )
    17ec:	2939      	cmp	r1, #57	; 0x39
    17ee:	f040 80e6 	bne.w	19be <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    17f2:	f04f 0c30 	mov.w	ip, #48	; 0x30
    17f6:	f80a cc01 	strb.w	ip, [sl, #-1]
                if ( *pcBuftmp == '.' )
    17fa:	f81a 1c02 	ldrb.w	r1, [sl, #-2]
    17fe:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    1800:	f1aa 0302 	sub.w	r3, sl, #2
                if ( *pcBuftmp == '.' )
    1804:	d006      	beq.n	1814 <am_util_stdio_vsprintf+0xff8>
                else if ( *pcBuftmp == '9' )
    1806:	2939      	cmp	r1, #57	; 0x39
    1808:	f040 80d9 	bne.w	19be <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    180c:	f04f 0330 	mov.w	r3, #48	; 0x30
    1810:	f80a 3c02 	strb.w	r3, [sl, #-2]
                if ( *pcBuftmp == '.' )
    1814:	f81a 1c03 	ldrb.w	r1, [sl, #-3]
    1818:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    181a:	f1aa 0303 	sub.w	r3, sl, #3
                if ( *pcBuftmp == '.' )
    181e:	d006      	beq.n	182e <am_util_stdio_vsprintf+0x1012>
                else if ( *pcBuftmp == '9' )
    1820:	2939      	cmp	r1, #57	; 0x39
    1822:	f040 80cc 	bne.w	19be <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    1826:	f04f 0530 	mov.w	r5, #48	; 0x30
    182a:	f80a 5c03 	strb.w	r5, [sl, #-3]
                if ( *pcBuftmp == '.' )
    182e:	f81a 1c04 	ldrb.w	r1, [sl, #-4]
    1832:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    1834:	f1aa 0304 	sub.w	r3, sl, #4
                if ( *pcBuftmp == '.' )
    1838:	d006      	beq.n	1848 <am_util_stdio_vsprintf+0x102c>
                else if ( *pcBuftmp == '9' )
    183a:	2939      	cmp	r1, #57	; 0x39
    183c:	f040 80bf 	bne.w	19be <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    1840:	f04f 0430 	mov.w	r4, #48	; 0x30
    1844:	f80a 4c04 	strb.w	r4, [sl, #-4]
                if ( *pcBuftmp == '.' )
    1848:	f81a 1c05 	ldrb.w	r1, [sl, #-5]
    184c:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    184e:	f1aa 0305 	sub.w	r3, sl, #5
                if ( *pcBuftmp == '.' )
    1852:	d006      	beq.n	1862 <am_util_stdio_vsprintf+0x1046>
                else if ( *pcBuftmp == '9' )
    1854:	2939      	cmp	r1, #57	; 0x39
    1856:	f040 80b2 	bne.w	19be <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    185a:	f04f 0130 	mov.w	r1, #48	; 0x30
    185e:	f80a 1c05 	strb.w	r1, [sl, #-5]
                if ( *pcBuftmp == '.' )
    1862:	f81a 1c06 	ldrb.w	r1, [sl, #-6]
    1866:	292e      	cmp	r1, #46	; 0x2e
                pcBuftmp--;
    1868:	f1aa 0306 	sub.w	r3, sl, #6
                if ( *pcBuftmp == '.' )
    186c:	d006      	beq.n	187c <am_util_stdio_vsprintf+0x1060>
                else if ( *pcBuftmp == '9' )
    186e:	2939      	cmp	r1, #57	; 0x39
    1870:	f040 80a5 	bne.w	19be <am_util_stdio_vsprintf+0x11a2>
                    *pcBuftmp = '0';
    1874:	f04f 0c30 	mov.w	ip, #48	; 0x30
    1878:	f80a cc06 	strb.w	ip, [sl, #-6]
                pcBuftmp--;
    187c:	f1aa 0307 	sub.w	r3, sl, #7
            while ( pcBuftmp >= pcBufInitial )
    1880:	42bb      	cmp	r3, r7
    1882:	d199      	bne.n	17b8 <am_util_stdio_vsprintf+0xf9c>
    1884:	e62e      	b.n	14e4 <am_util_stdio_vsprintf+0xcc8>
        switch ( *pcFmt )
    1886:	f04f 0c01 	mov.w	ip, #1
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    188a:	f10b 0307 	add.w	r3, fp, #7
    188e:	f023 0a07 	bic.w	sl, r3, #7
    1892:	f10a 0b08 	add.w	fp, sl, #8
    1896:	e9da 2300 	ldrd	r2, r3, [sl]
    189a:	f7ff b877 	b.w	98c <am_util_stdio_vsprintf+0x170>
                while (*pcStr != 0x0)
    189e:	7801      	ldrb	r1, [r0, #0]
    18a0:	b369      	cbz	r1, 18fe <am_util_stdio_vsprintf+0x10e2>
        return ui32RetVal;
    18a2:	4607      	mov	r7, r0
    18a4:	2201      	movs	r2, #1
    18a6:	f7ff bb40 	b.w	f2a <am_util_stdio_vsprintf+0x70e>
                iVal = uint64_to_str(ui64Val, pcBuf);
    18aa:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    18ae:	463a      	mov	r2, r7
    18b0:	f7fe feb6 	bl	620 <uint64_to_str>
    18b4:	46b8      	mov	r8, r7
                ui32CharCnt += iVal;
    18b6:	4481      	add	r9, r0
    18b8:	f7ff b962 	b.w	b80 <am_util_stdio_vsprintf+0x364>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    18bc:	1c43      	adds	r3, r0, #1
    18be:	d032      	beq.n	1926 <am_util_stdio_vsprintf+0x110a>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    18c0:	3002      	adds	r0, #2
    18c2:	d036      	beq.n	1932 <am_util_stdio_vsprintf+0x1116>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    18c4:	4a4d      	ldr	r2, [pc, #308]	; (19fc <am_util_stdio_vsprintf+0x11e0>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    18c6:	f8c8 2000 	str.w	r2, [r8]
    18ca:	f04f 0a03 	mov.w	sl, #3
    18ce:	f7ff b955 	b.w	b7c <am_util_stdio_vsprintf+0x360>
                iVal = uint64_to_str(ui64Val, pcBuf);
    18d2:	4642      	mov	r2, r8
    18d4:	f7fe fea4 	bl	620 <uint64_to_str>
                        ++ui32CharCnt;
    18d8:	f109 0901 	add.w	r9, r9, #1
                ui32CharCnt += iVal;
    18dc:	4481      	add	r9, r0
    18de:	f7ff b94f 	b.w	b80 <am_util_stdio_vsprintf+0x364>
    if ( i32NumChars <= 0 )
    18e2:	2200      	movs	r2, #0
    18e4:	2500      	movs	r5, #0
    18e6:	f7ff bb91 	b.w	100c <am_util_stdio_vsprintf+0x7f0>
    18ea:	2200      	movs	r2, #0
                        pcBuf += pcBuf ? iWidth : 0;
    18ec:	f1b8 0f00 	cmp.w	r8, #0
    18f0:	f43f abf9 	beq.w	10e6 <am_util_stdio_vsprintf+0x8ca>
    18f4:	4614      	mov	r4, r2
    18f6:	f7ff bbed 	b.w	10d4 <am_util_stdio_vsprintf+0x8b8>
                if ( iWidth > 0 )
    18fa:	2c00      	cmp	r4, #0
    18fc:	dc02      	bgt.n	1904 <am_util_stdio_vsprintf+0x10e8>
        return ui32RetVal;
    18fe:	460f      	mov	r7, r1
    1900:	f7ff bb21 	b.w	f46 <am_util_stdio_vsprintf+0x72a>
                    if ( ui32strlen < iWidth )
    1904:	460f      	mov	r7, r1
    1906:	f7ff bb88 	b.w	101a <am_util_stdio_vsprintf+0x7fe>
                            if ( pcBuf )
    190a:	f1b8 0f00 	cmp.w	r8, #0
    190e:	f43f ada3 	beq.w	1458 <am_util_stdio_vsprintf+0xc3c>
                            ++ui32CharCnt;
    1912:	2401      	movs	r4, #1
                                *pcBuf++ = '-';
    1914:	232d      	movs	r3, #45	; 0x2d
    1916:	f888 3000 	strb.w	r3, [r8]
                            ++ui32CharCnt;
    191a:	f109 0901 	add.w	r9, r9, #1
                        --iWidth;
    191e:	460f      	mov	r7, r1
                            ++ui32CharCnt;
    1920:	941b      	str	r4, [sp, #108]	; 0x6c
                                *pcBuf++ = '-';
    1922:	44a0      	add	r8, r4
    1924:	e531      	b.n	138a <am_util_stdio_vsprintf+0xb6e>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    1926:	4a36      	ldr	r2, [pc, #216]	; (1a00 <am_util_stdio_vsprintf+0x11e4>)
    1928:	e7cd      	b.n	18c6 <am_util_stdio_vsprintf+0x10aa>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    192a:	f04f 0a00 	mov.w	sl, #0
        uCnt++;
    192e:	2201      	movs	r2, #1
    1930:	e5eb      	b.n	150a <am_util_stdio_vsprintf+0xcee>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    1932:	4a34      	ldr	r2, [pc, #208]	; (1a04 <am_util_stdio_vsprintf+0x11e8>)
    1934:	e7c7      	b.n	18c6 <am_util_stdio_vsprintf+0x10aa>
                    pcBuf += pcBuf ? iWidth : 0;
    1936:	f1b8 0f00 	cmp.w	r8, #0
    193a:	d13d      	bne.n	19b8 <am_util_stdio_vsprintf+0x119c>
    193c:	4640      	mov	r0, r8
    193e:	e594      	b.n	146a <am_util_stdio_vsprintf+0xc4e>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    1940:	43cd      	mvns	r5, r1
    if (unFloatValue.I32 < 0)
    1942:	2f00      	cmp	r7, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    1944:	fa40 f405 	asr.w	r4, r0, r5
    if (unFloatValue.I32 < 0)
    1948:	db27      	blt.n	199a <am_util_stdio_vsprintf+0x117e>
    194a:	4643      	mov	r3, r8
        *pcBuf++ = '0';
    194c:	f04f 0030 	mov.w	r0, #48	; 0x30
    1950:	7018      	strb	r0, [r3, #0]
    1952:	1c5d      	adds	r5, r3, #1
    1954:	e5f8      	b.n	1548 <am_util_stdio_vsprintf+0xd2c>
                    iWidth -= ndigits_in_i64(ui64Val);
    1956:	1b3f      	subs	r7, r7, r4
                    bNeg = false;
    1958:	2400      	movs	r4, #0
    195a:	941b      	str	r4, [sp, #108]	; 0x6c
    195c:	e515      	b.n	138a <am_util_stdio_vsprintf+0xb6e>
    if (i32IntPart == 0)
    195e:	4643      	mov	r3, r8
    i32FracPart = 0;
    1960:	2400      	movs	r4, #0
        if (i32IntPart > 0)
    1962:	2800      	cmp	r0, #0
    1964:	dc37      	bgt.n	19d6 <am_util_stdio_vsprintf+0x11ba>
            *pcBuf++ = '-';
    1966:	1c5d      	adds	r5, r3, #1
    1968:	272d      	movs	r7, #45	; 0x2d
            uint64_to_str(-i32IntPart, pcBuf);
    196a:	4240      	negs	r0, r0
    196c:	17c1      	asrs	r1, r0, #31
    196e:	462a      	mov	r2, r5
            *pcBuf++ = '-';
    1970:	701f      	strb	r7, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    1972:	f7fe fe55 	bl	620 <uint64_to_str>
    1976:	e5e1      	b.n	153c <am_util_stdio_vsprintf+0xd20>
        *pcBuf++ = '-';
    1978:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
    197c:	f888 e000 	strb.w	lr, [r8]
    1980:	f108 0301 	add.w	r3, r8, #1
    if (i32IntPart == 0)
    1984:	bb78      	cbnz	r0, 19e6 <am_util_stdio_vsprintf+0x11ca>
    *pcBuf++ = '.';
    1986:	272e      	movs	r7, #46	; 0x2e
        *pcBuf++ = '0';
    1988:	f04f 0030 	mov.w	r0, #48	; 0x30
    198c:	f888 0001 	strb.w	r0, [r8, #1]
    *pcBuf++ = '.';
    1990:	f888 7002 	strb.w	r7, [r8, #2]
        *pcBuf++ = '0';
    1994:	f108 0502 	add.w	r5, r8, #2
    1998:	e59e      	b.n	14d8 <am_util_stdio_vsprintf+0xcbc>
        *pcBuf++ = '-';
    199a:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
    199e:	f888 c000 	strb.w	ip, [r8]
    19a2:	f108 0301 	add.w	r3, r8, #1
    19a6:	e7d1      	b.n	194c <am_util_stdio_vsprintf+0x1130>
    19a8:	272d      	movs	r7, #45	; 0x2d
    19aa:	f888 7000 	strb.w	r7, [r8]
    19ae:	f108 0301 	add.w	r3, r8, #1
    if (i32IntPart == 0)
    19b2:	2800      	cmp	r0, #0
    19b4:	d0ca      	beq.n	194c <am_util_stdio_vsprintf+0x1130>
    19b6:	e7d4      	b.n	1962 <am_util_stdio_vsprintf+0x1146>
    19b8:	f04f 0e00 	mov.w	lr, #0
    19bc:	e535      	b.n	142a <am_util_stdio_vsprintf+0xc0e>
                    *pcBuftmp += 1;
    19be:	3101      	adds	r1, #1
    19c0:	7019      	strb	r1, [r3, #0]
    19c2:	e58f      	b.n	14e4 <am_util_stdio_vsprintf+0xcc8>
    int iNDigits = ui64Val ? 0 : 1;
    19c4:	460b      	mov	r3, r1
    19c6:	4301      	orrs	r1, r0
    19c8:	4602      	mov	r2, r0
    19ca:	bf0c      	ite	eq
    19cc:	2401      	moveq	r4, #1
    19ce:	2400      	movne	r4, #0
                    bNeg = true;
    19d0:	2001      	movs	r0, #1
    19d2:	f7ff b906 	b.w	be2 <am_util_stdio_vsprintf+0x3c6>
        if (i32IntPart > 0)
    19d6:	461d      	mov	r5, r3
    19d8:	e5ac      	b.n	1534 <am_util_stdio_vsprintf+0xd18>
                iVal = uint64_to_str(ui64Val, pcBuf);
    19da:	4642      	mov	r2, r8
    19dc:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    19e0:	f7fe fe1e 	bl	620 <uint64_to_str>
    19e4:	e4b4      	b.n	1350 <am_util_stdio_vsprintf+0xb34>
    i32FracPart = 0;
    19e6:	2400      	movs	r4, #0
    19e8:	e7bb      	b.n	1962 <am_util_stdio_vsprintf+0x1146>
    19ea:	f1ca 0430 	rsb	r4, sl, #48	; 0x30
    19ee:	7832      	ldrb	r2, [r6, #0]
    19f0:	f7fe bf7c 	b.w	8ec <am_util_stdio_vsprintf+0xd0>
        bLower = bLongLong = false;
    19f4:	f04f 0c00 	mov.w	ip, #0
    19f8:	e747      	b.n	188a <am_util_stdio_vsprintf+0x106e>
    19fa:	bf00      	nop
    19fc:	003f2e3f 	.word	0x003f2e3f
    1a00:	00302e30 	.word	0x00302e30
    1a04:	00232e23 	.word	0x00232e23

00001a08 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    1a08:	b40f      	push	{r0, r1, r2, r3}
    1a0a:	b530      	push	{r4, r5, lr}
    1a0c:	b083      	sub	sp, #12
    1a0e:	aa06      	add	r2, sp, #24
    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    1a10:	4c08      	ldr	r4, [pc, #32]	; (1a34 <am_util_stdio_printf+0x2c>)
{
    1a12:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(pArgs, pcFmt);
    1a16:	9201      	str	r2, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    1a18:	4620      	mov	r0, r4
    1a1a:	f7fe feff 	bl	81c <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    1a1e:	4b06      	ldr	r3, [pc, #24]	; (1a38 <am_util_stdio_printf+0x30>)
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    1a20:	4605      	mov	r5, r0
    g_pfnCharPrint(g_prfbuf);
    1a22:	6819      	ldr	r1, [r3, #0]
    1a24:	4620      	mov	r0, r4
    1a26:	4788      	blx	r1

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    1a28:	4628      	mov	r0, r5
    1a2a:	b003      	add	sp, #12
    1a2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    1a30:	b004      	add	sp, #16
    1a32:	4770      	bx	lr
    1a34:	10001018 	.word	0x10001018
    1a38:	10001118 	.word	0x10001118

00001a3c <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    1a3c:	4801      	ldr	r0, [pc, #4]	; (1a44 <am_util_stdio_terminal_clear+0x8>)
    1a3e:	f7ff bfe3 	b.w	1a08 <am_util_stdio_printf>
    1a42:	bf00      	nop
    1a44:	000022d4 	.word	0x000022d4

00001a48 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1a48:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    1a4a:	f000 fa9b 	bl	1f84 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    1a4e:	f000 fabd 	bl	1fcc <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    1a52:	f000 fba7 	bl	21a4 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    1a56:	2001      	movs	r0, #1
    1a58:	f000 fac8 	bl	1fec <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1a5c:	2001      	movs	r0, #1
    1a5e:	f000 f8c7 	bl	1bf0 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    1a62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    1a66:	f000 bacf 	b.w	2008 <am_hal_rtc_osc_disable>
    1a6a:	bf00      	nop

00001a6c <am_bsp_uart_string_print>:
//
//*****************************************************************************
void
am_bsp_uart_string_print(char *pcString)
{
    am_hal_uart_string_transmit_polled(AM_BSP_UART_PRINT_INST, pcString);
    1a6c:	4601      	mov	r1, r0
    1a6e:	2000      	movs	r0, #0
    1a70:	f000 bb84 	b.w	217c <am_hal_uart_string_transmit_polled>

00001a74 <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    1a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a76:	4605      	mov	r5, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1a78:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    1a7c:	78ab      	ldrb	r3, [r5, #2]
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    1a7e:	786c      	ldrb	r4, [r5, #1]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1a80:	78ef      	ldrb	r7, [r5, #3]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    1a82:	792e      	ldrb	r6, [r5, #4]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    1a84:	79a9      	ldrb	r1, [r5, #6]
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    1a86:	009a      	lsls	r2, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    1a88:	0064      	lsls	r4, r4, #1
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    1a8a:	f002 0204 	and.w	r2, r2, #4
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    1a8e:	f004 0402 	and.w	r4, r4, #2
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1a92:	4314      	orrs	r4, r2
    1a94:	f047 0701 	orr.w	r7, r7, #1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    1a98:	79ea      	ldrb	r2, [r5, #7]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    1a9a:	01f6      	lsls	r6, r6, #7
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1a9c:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    1a9e:	b2f6      	uxtb	r6, r6
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    1aa0:	7a2f      	ldrb	r7, [r5, #8]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    1aa2:	0289      	lsls	r1, r1, #10
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1aa4:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    1aa6:	f401 6180 	and.w	r1, r1, #1024	; 0x400
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    1aaa:	7a6e      	ldrb	r6, [r5, #9]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    1aac:	02d2      	lsls	r2, r2, #11
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1aae:	430c      	orrs	r4, r1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    1ab0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    1ab4:	7aa9      	ldrb	r1, [r5, #10]
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    1ab6:	033f      	lsls	r7, r7, #12
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1ab8:	4314      	orrs	r4, r2
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    1aba:	b2bf      	uxth	r7, r7
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    1abc:	0436      	lsls	r6, r6, #16
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    1abe:	7aea      	ldrb	r2, [r5, #11]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1ac0:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    1ac2:	0509      	lsls	r1, r1, #20
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    1ac4:	f406 2770 	and.w	r7, r6, #983040	; 0xf0000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    1ac8:	0612      	lsls	r2, r2, #24
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1aca:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    1acc:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    1ad0:	009b      	lsls	r3, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    1ad2:	f002 7780 	and.w	r7, r2, #16777216	; 0x1000000
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1ad6:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    1ad8:	f003 0108 	and.w	r1, r3, #8
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1adc:	433c      	orrs	r4, r7
    1ade:	430c      	orrs	r4, r1
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1ae0:	f000 f94a 	bl	1d78 <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1ae4:	482c      	ldr	r0, [pc, #176]	; (1b98 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1ae6:	4b2d      	ldr	r3, [pc, #180]	; (1b9c <am_hal_cachectrl_enable+0x128>)
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1ae8:	6004      	str	r4, [r0, #0]
    1aea:	2232      	movs	r2, #50	; 0x32
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1aec:	681e      	ldr	r6, [r3, #0]
    1aee:	0777      	lsls	r7, r6, #29
    1af0:	d41e      	bmi.n	1b30 <am_hal_cachectrl_enable+0xbc>
    1af2:	681f      	ldr	r7, [r3, #0]
    1af4:	077e      	lsls	r6, r7, #29
    1af6:	f102 32ff 	add.w	r2, r2, #4294967295
    1afa:	d419      	bmi.n	1b30 <am_hal_cachectrl_enable+0xbc>
    1afc:	6819      	ldr	r1, [r3, #0]
    1afe:	074f      	lsls	r7, r1, #29
    1b00:	d416      	bmi.n	1b30 <am_hal_cachectrl_enable+0xbc>
    1b02:	6818      	ldr	r0, [r3, #0]
    1b04:	0746      	lsls	r6, r0, #29
    1b06:	d413      	bmi.n	1b30 <am_hal_cachectrl_enable+0xbc>
    1b08:	681e      	ldr	r6, [r3, #0]
    1b0a:	0770      	lsls	r0, r6, #29
    1b0c:	d410      	bmi.n	1b30 <am_hal_cachectrl_enable+0xbc>
    1b0e:	681f      	ldr	r7, [r3, #0]
    1b10:	0779      	lsls	r1, r7, #29
    1b12:	d40d      	bmi.n	1b30 <am_hal_cachectrl_enable+0xbc>
    1b14:	6819      	ldr	r1, [r3, #0]
    1b16:	074f      	lsls	r7, r1, #29
    1b18:	d40a      	bmi.n	1b30 <am_hal_cachectrl_enable+0xbc>
    1b1a:	6818      	ldr	r0, [r3, #0]
    1b1c:	0746      	lsls	r6, r0, #29
    1b1e:	d407      	bmi.n	1b30 <am_hal_cachectrl_enable+0xbc>
    1b20:	681e      	ldr	r6, [r3, #0]
    1b22:	0770      	lsls	r0, r6, #29
    1b24:	d404      	bmi.n	1b30 <am_hal_cachectrl_enable+0xbc>
    1b26:	681f      	ldr	r7, [r3, #0]
    1b28:	0779      	lsls	r1, r7, #29
    1b2a:	d401      	bmi.n	1b30 <am_hal_cachectrl_enable+0xbc>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    1b2c:	3a09      	subs	r2, #9
    1b2e:	d1dd      	bne.n	1aec <am_hal_cachectrl_enable+0x78>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    1b30:	4b1a      	ldr	r3, [pc, #104]	; (1b9c <am_hal_cachectrl_enable+0x128>)
    1b32:	681a      	ldr	r2, [r3, #0]
    1b34:	f042 0101 	orr.w	r1, r2, #1
    1b38:	6019      	str	r1, [r3, #0]
    1b3a:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1b3c:	6818      	ldr	r0, [r3, #0]
    1b3e:	0740      	lsls	r0, r0, #29
    1b40:	d41e      	bmi.n	1b80 <am_hal_cachectrl_enable+0x10c>
    1b42:	681e      	ldr	r6, [r3, #0]
    1b44:	0771      	lsls	r1, r6, #29
    1b46:	f102 32ff 	add.w	r2, r2, #4294967295
    1b4a:	d419      	bmi.n	1b80 <am_hal_cachectrl_enable+0x10c>
    1b4c:	681f      	ldr	r7, [r3, #0]
    1b4e:	077f      	lsls	r7, r7, #29
    1b50:	d416      	bmi.n	1b80 <am_hal_cachectrl_enable+0x10c>
    1b52:	6819      	ldr	r1, [r3, #0]
    1b54:	074e      	lsls	r6, r1, #29
    1b56:	d413      	bmi.n	1b80 <am_hal_cachectrl_enable+0x10c>
    1b58:	6818      	ldr	r0, [r3, #0]
    1b5a:	0740      	lsls	r0, r0, #29
    1b5c:	d410      	bmi.n	1b80 <am_hal_cachectrl_enable+0x10c>
    1b5e:	681e      	ldr	r6, [r3, #0]
    1b60:	0771      	lsls	r1, r6, #29
    1b62:	d40d      	bmi.n	1b80 <am_hal_cachectrl_enable+0x10c>
    1b64:	681f      	ldr	r7, [r3, #0]
    1b66:	077f      	lsls	r7, r7, #29
    1b68:	d40a      	bmi.n	1b80 <am_hal_cachectrl_enable+0x10c>
    1b6a:	6819      	ldr	r1, [r3, #0]
    1b6c:	074e      	lsls	r6, r1, #29
    1b6e:	d407      	bmi.n	1b80 <am_hal_cachectrl_enable+0x10c>
    1b70:	6818      	ldr	r0, [r3, #0]
    1b72:	0740      	lsls	r0, r0, #29
    1b74:	d404      	bmi.n	1b80 <am_hal_cachectrl_enable+0x10c>
    1b76:	681e      	ldr	r6, [r3, #0]
    1b78:	0771      	lsls	r1, r6, #29
    1b7a:	d401      	bmi.n	1b80 <am_hal_cachectrl_enable+0x10c>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    1b7c:	3a09      	subs	r2, #9
    1b7e:	d1dd      	bne.n	1b3c <am_hal_cachectrl_enable+0xc8>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1b80:	796d      	ldrb	r5, [r5, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1b82:	4f05      	ldr	r7, [pc, #20]	; (1b98 <am_hal_cachectrl_enable+0x124>)
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );
    1b84:	022b      	lsls	r3, r5, #8
    1b86:	f403 7100 	and.w	r1, r3, #512	; 0x200
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1b8a:	f403 7280 	and.w	r2, r3, #256	; 0x100
    1b8e:	4311      	orrs	r1, r2
    1b90:	430c      	orrs	r4, r1
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1b92:	603c      	str	r4, [r7, #0]
    1b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b96:	bf00      	nop
    1b98:	40018000 	.word	0x40018000
    1b9c:	40018008 	.word	0x40018008

00001ba0 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    1ba0:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    1ba2:	4604      	mov	r4, r0
    1ba4:	b120      	cbz	r0, 1bb0 <am_hal_clkgen_sysclk_select+0x10>
    1ba6:	4a06      	ldr	r2, [pc, #24]	; (1bc0 <am_hal_clkgen_sysclk_select+0x20>)
    1ba8:	4806      	ldr	r0, [pc, #24]	; (1bc4 <am_hal_clkgen_sysclk_select+0x24>)
    1baa:	2153      	movs	r1, #83	; 0x53
    1bac:	f000 f84e 	bl	1c4c <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1bb0:	4b05      	ldr	r3, [pc, #20]	; (1bc8 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the required operating value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1bb2:	4906      	ldr	r1, [pc, #24]	; (1bcc <am_hal_clkgen_sysclk_select+0x2c>)
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1bb4:	2047      	movs	r0, #71	; 0x47

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    1bb6:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1bb8:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1bba:	600c      	str	r4, [r1, #0]
    AM_REG(CLKGEN, CLKKEY) = 0;
    1bbc:	601a      	str	r2, [r3, #0]
    1bbe:	bd10      	pop	{r4, pc}
    1bc0:	000022f4 	.word	0x000022f4
    1bc4:	0000232c 	.word	0x0000232c
    1bc8:	40004014 	.word	0x40004014
    1bcc:	40004018 	.word	0x40004018

00001bd0 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1bd0:	4b04      	ldr	r3, [pc, #16]	; (1be4 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    1bd2:	4905      	ldr	r1, [pc, #20]	; (1be8 <am_hal_clkgen_sysclk_get+0x18>)
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1bd4:	681a      	ldr	r2, [r3, #0]
            return 48000000;
    1bd6:	4805      	ldr	r0, [pc, #20]	; (1bec <am_hal_clkgen_sysclk_get+0x1c>)
    switch ( ui32ClockSetting )
    1bd8:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    1bdc:	bf08      	it	eq
    1bde:	4608      	moveq	r0, r1
    1be0:	4770      	bx	lr
    1be2:	bf00      	nop
    1be4:	40004018 	.word	0x40004018
    1be8:	02dc6c00 	.word	0x02dc6c00
    1bec:	016e3600 	.word	0x016e3600

00001bf0 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1bf0:	0783      	lsls	r3, r0, #30
    1bf2:	d003      	beq.n	1bfc <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    1bf4:	4b02      	ldr	r3, [pc, #8]	; (1c00 <am_hal_clkgen_osc_stop+0x10>)
    1bf6:	681a      	ldr	r2, [r3, #0]
    1bf8:	4310      	orrs	r0, r2
    1bfa:	6018      	str	r0, [r3, #0]
    1bfc:	4770      	bx	lr
    1bfe:	bf00      	nop
    1c00:	4000400c 	.word	0x4000400c

00001c04 <am_hal_clkgen_uarten_set>:
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    uint32_t ui32Mask;

    if ( (ui32Module >= AM_REG_UART_NUM_MODULES)        ||
    1c04:	2801      	cmp	r0, #1
    1c06:	d900      	bls.n	1c0a <am_hal_clkgen_uarten_set+0x6>
    1c08:	4770      	bx	lr
    1c0a:	2903      	cmp	r1, #3
    1c0c:	d8fc      	bhi.n	1c08 <am_hal_clkgen_uarten_set+0x4>
{
    1c0e:	b530      	push	{r4, r5, lr}
         (ui32UartEn > AM_HAL_CLKGEN_UARTEN_EN_POWER_SAV) )
    {
        return;
    }

    ui32UartEn <<= (ui32Module * AM_HAL_CLKGEN_UARTEN_UARTENn_S(ui32Module));
    1c10:	fb00 f500 	mul.w	r5, r0, r0
{
    1c14:	b083      	sub	sp, #12
    1c16:	4604      	mov	r4, r0
    ui32UartEn <<= (ui32Module * AM_HAL_CLKGEN_UARTEN_UARTENn_S(ui32Module));
    1c18:	00e8      	lsls	r0, r5, #3
    1c1a:	fa01 f500 	lsl.w	r5, r1, r0
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1c1e:	f000 f81b 	bl	1c58 <am_hal_interrupt_master_disable>

    //
    // Set the UART clock
    //
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    1c22:	4b09      	ldr	r3, [pc, #36]	; (1c48 <am_hal_clkgen_uarten_set+0x44>)
    AM_CRITICAL_BEGIN_ASM
    1c24:	9001      	str	r0, [sp, #4]
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    1c26:	681a      	ldr	r2, [r3, #0]
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));
    1c28:	f04f 0c03 	mov.w	ip, #3
    1c2c:	00e1      	lsls	r1, r4, #3
    1c2e:	fa0c f401 	lsl.w	r4, ip, r1
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    1c32:	ea22 0004 	bic.w	r0, r2, r4
    1c36:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, UARTEN) |= ui32UartEn;
    1c38:	6819      	ldr	r1, [r3, #0]
    1c3a:	430d      	orrs	r5, r1
    1c3c:	601d      	str	r5, [r3, #0]

    //
    // Begin critical section.
    //
    AM_CRITICAL_END_ASM
    1c3e:	9801      	ldr	r0, [sp, #4]
    1c40:	f000 f80e 	bl	1c60 <am_hal_interrupt_master_set>
}
    1c44:	b003      	add	sp, #12
    1c46:	bd30      	pop	{r4, r5, pc}
    1c48:	40004034 	.word	0x40004034

00001c4c <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    1c4c:	e7fe      	b.n	1c4c <am_hal_debug_error>
    1c4e:	bf00      	nop

00001c50 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1c50:	4b00      	ldr	r3, [pc, #0]	; (1c54 <am_hal_flash_delay+0x4>)
    1c52:	4718      	bx	r3
    1c54:	0800009d 	.word	0x0800009d

00001c58 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1c58:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    1c5c:	b672      	cpsid	i
    __asm("    bx lr");
    1c5e:	4770      	bx	lr

00001c60 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    1c60:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    1c64:	4770      	bx	lr
    1c66:	bf00      	nop

00001c68 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1c68:	490d      	ldr	r1, [pc, #52]	; (1ca0 <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1c6a:	4b0e      	ldr	r3, [pc, #56]	; (1ca4 <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1c6c:	4a0e      	ldr	r2, [pc, #56]	; (1ca8 <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1c6e:	681b      	ldr	r3, [r3, #0]
{
    1c70:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1c72:	680d      	ldr	r5, [r1, #0]
    1c74:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1c76:	6815      	ldr	r5, [r2, #0]
    1c78:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1c7a:	4c0c      	ldr	r4, [pc, #48]	; (1cac <am_hal_mcuctrl_fault_status+0x44>)
    1c7c:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1c7e:	4329      	orrs	r1, r5
    1c80:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1c82:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1c84:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1c88:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1c8a:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1c8c:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1c90:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1c94:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1c96:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1c98:	6142      	str	r2, [r0, #20]
}
    1c9a:	bc70      	pop	{r4, r5, r6}
    1c9c:	4770      	bx	lr
    1c9e:	bf00      	nop
    1ca0:	400201c4 	.word	0x400201c4
    1ca4:	400201cc 	.word	0x400201cc
    1ca8:	400201c0 	.word	0x400201c0
    1cac:	400201c8 	.word	0x400201c8

00001cb0 <am_hal_pwrctrl_periph_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    1cb0:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1cb2:	4604      	mov	r4, r0
{
    1cb4:	b082      	sub	sp, #8
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1cb6:	b1b8      	cbz	r0, 1ce8 <am_hal_pwrctrl_periph_enable+0x38>
    1cb8:	1e43      	subs	r3, r0, #1
    1cba:	4203      	tst	r3, r0
    1cbc:	d114      	bne.n	1ce8 <am_hal_pwrctrl_periph_enable+0x38>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1cbe:	f7ff ffcb 	bl	1c58 <am_hal_interrupt_master_disable>

    //
    // Enable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    1cc2:	4a18      	ldr	r2, [pc, #96]	; (1d24 <am_hal_pwrctrl_periph_enable+0x74>)
    AM_CRITICAL_BEGIN_ASM
    1cc4:	9001      	str	r0, [sp, #4]
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    1cc6:	6810      	ldr	r0, [r2, #0]
    1cc8:	4320      	orrs	r0, r4
    1cca:	6010      	str	r0, [r2, #0]

    //
    // End Critical Section.
    //
    AM_CRITICAL_END_ASM
    1ccc:	9801      	ldr	r0, [sp, #4]
    1cce:	f7ff ffc7 	bl	1c60 <am_hal_interrupt_master_set>

    //
    // Wait for the power to stablize.  Using a simple delay loop is more
    // power efficient than a polling loop.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);
    1cd2:	200e      	movs	r0, #14
    1cd4:	f7ff ffbc 	bl	1c50 <am_hal_flash_delay>

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    1cd8:	f014 0f0e 	tst.w	r4, #14
    1cdc:	d10a      	bne.n	1cf4 <am_hal_pwrctrl_periph_enable+0x44>
    1cde:	f014 0f70 	tst.w	r4, #112	; 0x70
    1ce2:	d00e      	beq.n	1d02 <am_hal_pwrctrl_periph_enable+0x52>
    1ce4:	2408      	movs	r4, #8
    1ce6:	e006      	b.n	1cf6 <am_hal_pwrctrl_periph_enable+0x46>
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1ce8:	4a0f      	ldr	r2, [pc, #60]	; (1d28 <am_hal_pwrctrl_periph_enable+0x78>)
    1cea:	4810      	ldr	r0, [pc, #64]	; (1d2c <am_hal_pwrctrl_periph_enable+0x7c>)
    1cec:	2160      	movs	r1, #96	; 0x60
    1cee:	f7ff ffad 	bl	1c4c <am_hal_debug_error>
    1cf2:	e7e4      	b.n	1cbe <am_hal_pwrctrl_periph_enable+0xe>
    POLL_PWRSTATUS(ui32Peripheral);
    1cf4:	2404      	movs	r4, #4
    1cf6:	4a0e      	ldr	r2, [pc, #56]	; (1d30 <am_hal_pwrctrl_periph_enable+0x80>)
    1cf8:	6813      	ldr	r3, [r2, #0]
    1cfa:	421c      	tst	r4, r3
    1cfc:	d0fc      	beq.n	1cf8 <am_hal_pwrctrl_periph_enable+0x48>
}
    1cfe:	b002      	add	sp, #8
    1d00:	bd10      	pop	{r4, pc}
    POLL_PWRSTATUS(ui32Peripheral);
    1d02:	f240 1181 	movw	r1, #385	; 0x181
    1d06:	420c      	tst	r4, r1
    1d08:	d108      	bne.n	1d1c <am_hal_pwrctrl_periph_enable+0x6c>
    1d0a:	05a3      	lsls	r3, r4, #22
    1d0c:	d408      	bmi.n	1d20 <am_hal_pwrctrl_periph_enable+0x70>
    1d0e:	f414 6f80 	tst.w	r4, #1024	; 0x400
    1d12:	bf14      	ite	ne
    1d14:	2410      	movne	r4, #16
    1d16:	f04f 34ff 	moveq.w	r4, #4294967295
    1d1a:	e7ec      	b.n	1cf6 <am_hal_pwrctrl_periph_enable+0x46>
    1d1c:	2402      	movs	r4, #2
    1d1e:	e7ea      	b.n	1cf6 <am_hal_pwrctrl_periph_enable+0x46>
    1d20:	2480      	movs	r4, #128	; 0x80
    1d22:	e7e8      	b.n	1cf6 <am_hal_pwrctrl_periph_enable+0x46>
    1d24:	40021008 	.word	0x40021008
    1d28:	00002344 	.word	0x00002344
    1d2c:	00002378 	.word	0x00002378
    1d30:	40021014 	.word	0x40021014

00001d34 <am_hal_pwrctrl_periph_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_disable(uint32_t ui32Peripheral)
{
    1d34:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1d36:	4604      	mov	r4, r0
{
    1d38:	b082      	sub	sp, #8
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1d3a:	b110      	cbz	r0, 1d42 <am_hal_pwrctrl_periph_disable+0xe>
    1d3c:	1e43      	subs	r3, r0, #1
    1d3e:	4203      	tst	r3, r0
    1d40:	d004      	beq.n	1d4c <am_hal_pwrctrl_periph_disable+0x18>
    1d42:	4a0a      	ldr	r2, [pc, #40]	; (1d6c <am_hal_pwrctrl_periph_disable+0x38>)
    1d44:	480a      	ldr	r0, [pc, #40]	; (1d70 <am_hal_pwrctrl_periph_disable+0x3c>)
    1d46:	2190      	movs	r1, #144	; 0x90
    1d48:	f7ff ff80 	bl	1c4c <am_hal_debug_error>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1d4c:	f7ff ff84 	bl	1c58 <am_hal_interrupt_master_disable>

    //
    // Disable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) &= ~ui32Peripheral;
    1d50:	4a08      	ldr	r2, [pc, #32]	; (1d74 <am_hal_pwrctrl_periph_disable+0x40>)
    AM_CRITICAL_BEGIN_ASM
    1d52:	9001      	str	r0, [sp, #4]
    AM_REG(PWRCTRL, DEVICEEN) &= ~ui32Peripheral;
    1d54:	6810      	ldr	r0, [r2, #0]
    1d56:	ea20 0104 	bic.w	r1, r0, r4
    1d5a:	6011      	str	r1, [r2, #0]

    //
    // End critical section.
    //
    AM_CRITICAL_END_ASM
    1d5c:	9801      	ldr	r0, [sp, #4]
    1d5e:	f7ff ff7f 	bl	1c60 <am_hal_interrupt_master_set>

    //
    // Wait for the power to stablize
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEDIS_DELAYCYCLES / 3);
    1d62:	200e      	movs	r0, #14
    1d64:	f7ff ff74 	bl	1c50 <am_hal_flash_delay>
}
    1d68:	b002      	add	sp, #8
    1d6a:	bd10      	pop	{r4, pc}
    1d6c:	00002344 	.word	0x00002344
    1d70:	00002378 	.word	0x00002378
    1d74:	40021008 	.word	0x40021008

00001d78 <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1d78:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
{
    1d7c:	b430      	push	{r4, r5}
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1d7e:	d03a      	beq.n	1df6 <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    1d80:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    1d84:	f000 809d 	beq.w	1ec2 <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    1d88:	2801      	cmp	r0, #1
    1d8a:	f000 809d 	beq.w	1ec8 <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    1d8e:	2803      	cmp	r0, #3
    1d90:	f000 80a6 	beq.w	1ee0 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    1d94:	2807      	cmp	r0, #7
    1d96:	f000 809c 	beq.w	1ed2 <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    1d9a:	280f      	cmp	r0, #15
    1d9c:	f000 80a5 	beq.w	1eea <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    1da0:	281f      	cmp	r0, #31
    1da2:	f000 80b0 	beq.w	1f06 <am_hal_pwrctrl_memory_enable+0x18e>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    1da6:	283f      	cmp	r0, #63	; 0x3f
    1da8:	f000 80b4 	beq.w	1f14 <am_hal_pwrctrl_memory_enable+0x19c>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    1dac:	287f      	cmp	r0, #127	; 0x7f
    1dae:	f000 80b8 	beq.w	1f22 <am_hal_pwrctrl_memory_enable+0x1aa>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    1db2:	28ff      	cmp	r0, #255	; 0xff
    1db4:	f000 80a0 	beq.w	1ef8 <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    1db8:	f240 13ff 	movw	r3, #511	; 0x1ff
    1dbc:	4298      	cmp	r0, r3
    1dbe:	f000 80b7 	beq.w	1f30 <am_hal_pwrctrl_memory_enable+0x1b8>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    1dc2:	f240 31ff 	movw	r1, #1023	; 0x3ff
    1dc6:	4288      	cmp	r0, r1
    1dc8:	f000 80b8 	beq.w	1f3c <am_hal_pwrctrl_memory_enable+0x1c4>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    1dcc:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1dd0:	4290      	cmp	r0, r2
    1dd2:	d00e      	beq.n	1df2 <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    1dd4:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    1dd8:	f000 80b6 	beq.w	1f48 <am_hal_pwrctrl_memory_enable+0x1d0>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    1ddc:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    1de0:	42a0      	cmp	r0, r4
    1de2:	f000 80b4 	beq.w	1f4e <am_hal_pwrctrl_memory_enable+0x1d6>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    1de6:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    1dea:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    1dee:	4560      	cmp	r0, ip
    1df0:	d132      	bne.n	1e58 <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    1df2:	495b      	ldr	r1, [pc, #364]	; (1f60 <am_hal_pwrctrl_memory_enable+0x1e8>)
    1df4:	e066      	b.n	1ec4 <am_hal_pwrctrl_memory_enable+0x14c>
    1df6:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    1dfa:	2340      	movs	r3, #64	; 0x40
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    1dfc:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1dfe:	4c59      	ldr	r4, [pc, #356]	; (1f64 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1e00:	6825      	ldr	r5, [r4, #0]
    1e02:	402a      	ands	r2, r5
    1e04:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    1e06:	4a57      	ldr	r2, [pc, #348]	; (1f64 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1e08:	6814      	ldr	r4, [r2, #0]
    1e0a:	4320      	orrs	r0, r4
    1e0c:	6010      	str	r0, [r2, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    1e0e:	2b00      	cmp	r3, #0
    1e10:	d029      	beq.n	1e66 <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1e12:	4d55      	ldr	r5, [pc, #340]	; (1f68 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1e14:	6828      	ldr	r0, [r5, #0]
        while ( --i32TOcnt              &&
    1e16:	4218      	tst	r0, r3
    1e18:	bf18      	it	ne
    1e1a:	20c6      	movne	r0, #198	; 0xc6
    1e1c:	d01f      	beq.n	1e5e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1e1e:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1e20:	421a      	tst	r2, r3
    1e22:	d01c      	beq.n	1e5e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1e24:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1e26:	421c      	tst	r4, r3
    1e28:	d019      	beq.n	1e5e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1e2a:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1e2c:	421a      	tst	r2, r3
    1e2e:	d016      	beq.n	1e5e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1e30:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1e32:	421c      	tst	r4, r3
    1e34:	d013      	beq.n	1e5e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1e36:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1e38:	421a      	tst	r2, r3
    1e3a:	d010      	beq.n	1e5e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1e3c:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1e3e:	421c      	tst	r4, r3
    1e40:	d00d      	beq.n	1e5e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1e42:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1e44:	421a      	tst	r2, r3
    1e46:	d00a      	beq.n	1e5e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1e48:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1e4a:	421c      	tst	r4, r3
    1e4c:	d007      	beq.n	1e5e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1e4e:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1e50:	421a      	tst	r2, r3
    1e52:	d004      	beq.n	1e5e <am_hal_pwrctrl_memory_enable+0xe6>
    1e54:	3809      	subs	r0, #9
    1e56:	d1e2      	bne.n	1e1e <am_hal_pwrctrl_memory_enable+0xa6>
        return false;
    1e58:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    1e5a:	bc30      	pop	{r4, r5}
    1e5c:	4770      	bx	lr
    if ( ui32PwrStatEnMask )
    1e5e:	b911      	cbnz	r1, 1e66 <am_hal_pwrctrl_memory_enable+0xee>
    return true;
    1e60:	2001      	movs	r0, #1
}
    1e62:	bc30      	pop	{r4, r5}
    1e64:	4770      	bx	lr
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e66:	4b40      	ldr	r3, [pc, #256]	; (1f68 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1e68:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1e6a:	ea31 0405 	bics.w	r4, r1, r5
    1e6e:	bf18      	it	ne
    1e70:	24c6      	movne	r4, #198	; 0xc6
    1e72:	d0f5      	beq.n	1e60 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e74:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1e76:	ea31 0000 	bics.w	r0, r1, r0
    1e7a:	d0f1      	beq.n	1e60 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e7c:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1e7e:	ea31 0002 	bics.w	r0, r1, r2
    1e82:	d0ed      	beq.n	1e60 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e84:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1e86:	ea31 0005 	bics.w	r0, r1, r5
    1e8a:	d0e9      	beq.n	1e60 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e8c:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1e8e:	ea31 0000 	bics.w	r0, r1, r0
    1e92:	d0e5      	beq.n	1e60 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e94:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1e96:	ea31 0002 	bics.w	r0, r1, r2
    1e9a:	d0e1      	beq.n	1e60 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e9c:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1e9e:	ea31 0005 	bics.w	r0, r1, r5
    1ea2:	d0dd      	beq.n	1e60 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1ea4:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1ea6:	ea31 0000 	bics.w	r0, r1, r0
    1eaa:	d0d9      	beq.n	1e60 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1eac:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1eae:	ea31 0002 	bics.w	r0, r1, r2
    1eb2:	d0d5      	beq.n	1e60 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1eb4:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1eb6:	ea31 0005 	bics.w	r0, r1, r5
    1eba:	d0d1      	beq.n	1e60 <am_hal_pwrctrl_memory_enable+0xe8>
    1ebc:	3c09      	subs	r4, #9
    1ebe:	d1d9      	bne.n	1e74 <am_hal_pwrctrl_memory_enable+0xfc>
    1ec0:	e7ca      	b.n	1e58 <am_hal_pwrctrl_memory_enable+0xe0>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    1ec2:	2160      	movs	r1, #96	; 0x60
{
    1ec4:	2300      	movs	r3, #0
    1ec6:	e79e      	b.n	1e06 <am_hal_pwrctrl_memory_enable+0x8e>
    1ec8:	4a28      	ldr	r2, [pc, #160]	; (1f6c <am_hal_pwrctrl_memory_enable+0x1f4>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1eca:	4b29      	ldr	r3, [pc, #164]	; (1f70 <am_hal_pwrctrl_memory_enable+0x1f8>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    1ecc:	f44f 7180 	mov.w	r1, #256	; 0x100
    1ed0:	e795      	b.n	1dfe <am_hal_pwrctrl_memory_enable+0x86>
    1ed2:	f46f 62ff 	mvn.w	r2, #2040	; 0x7f8
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1ed6:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    1eda:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    1ede:	e78e      	b.n	1dfe <am_hal_pwrctrl_memory_enable+0x86>
    1ee0:	4a24      	ldr	r2, [pc, #144]	; (1f74 <am_hal_pwrctrl_memory_enable+0x1fc>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1ee2:	4b25      	ldr	r3, [pc, #148]	; (1f78 <am_hal_pwrctrl_memory_enable+0x200>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    1ee4:	f44f 7140 	mov.w	r1, #768	; 0x300
    1ee8:	e789      	b.n	1dfe <am_hal_pwrctrl_memory_enable+0x86>
    1eea:	f46f 62fe 	mvn.w	r2, #2032	; 0x7f0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1eee:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    1ef2:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    1ef6:	e782      	b.n	1dfe <am_hal_pwrctrl_memory_enable+0x86>
    1ef8:	f46f 62e0 	mvn.w	r2, #1792	; 0x700
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1efc:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    1f00:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    1f04:	e77b      	b.n	1dfe <am_hal_pwrctrl_memory_enable+0x86>
    1f06:	f46f 62fc 	mvn.w	r2, #2016	; 0x7e0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1f0a:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    1f0e:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    1f12:	e774      	b.n	1dfe <am_hal_pwrctrl_memory_enable+0x86>
    1f14:	f46f 62f8 	mvn.w	r2, #1984	; 0x7c0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1f18:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    1f1c:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    1f20:	e76d      	b.n	1dfe <am_hal_pwrctrl_memory_enable+0x86>
    1f22:	f46f 62f0 	mvn.w	r2, #1920	; 0x780
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1f26:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    1f2a:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    1f2e:	e766      	b.n	1dfe <am_hal_pwrctrl_memory_enable+0x86>
    1f30:	f46f 62c0 	mvn.w	r2, #1536	; 0x600
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1f34:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    1f38:	4910      	ldr	r1, [pc, #64]	; (1f7c <am_hal_pwrctrl_memory_enable+0x204>)
    1f3a:	e760      	b.n	1dfe <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    1f3c:	4910      	ldr	r1, [pc, #64]	; (1f80 <am_hal_pwrctrl_memory_enable+0x208>)
    1f3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1f42:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1f46:	e75a      	b.n	1dfe <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1f48:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1f4c:	e7ba      	b.n	1ec4 <am_hal_pwrctrl_memory_enable+0x14c>
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1f4e:	4805      	ldr	r0, [pc, #20]	; (1f64 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1f50:	6803      	ldr	r3, [r0, #0]
    1f52:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    1f56:	6001      	str	r1, [r0, #0]
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1f58:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
        ui32PwrStatEnMask  = 0;
    1f5c:	2100      	movs	r1, #0
    1f5e:	e758      	b.n	1e12 <am_hal_pwrctrl_memory_enable+0x9a>
    1f60:	0007ff00 	.word	0x0007ff00
    1f64:	40021010 	.word	0x40021010
    1f68:	40021014 	.word	0x40021014
    1f6c:	fffff801 	.word	0xfffff801
    1f70:	0007fe00 	.word	0x0007fe00
    1f74:	fffff803 	.word	0xfffff803
    1f78:	0007fc00 	.word	0x0007fc00
    1f7c:	0001ff00 	.word	0x0001ff00
    1f80:	0003ff00 	.word	0x0003ff00

00001f84 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1f84:	4b0f      	ldr	r3, [pc, #60]	; (1fc4 <am_hal_pwrctrl_bucks_init+0x40>)
    1f86:	681a      	ldr	r2, [r3, #0]
    1f88:	0792      	lsls	r2, r2, #30
    1f8a:	d502      	bpl.n	1f92 <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1f8c:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1f8e:	07c3      	lsls	r3, r0, #31
    1f90:	d40e      	bmi.n	1fb0 <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1f92:	4b0d      	ldr	r3, [pc, #52]	; (1fc8 <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1f94:	4a0b      	ldr	r2, [pc, #44]	; (1fc4 <am_hal_pwrctrl_bucks_init+0x40>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1f96:	6819      	ldr	r1, [r3, #0]
    1f98:	f041 0002 	orr.w	r0, r1, #2
    1f9c:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1f9e:	6819      	ldr	r1, [r3, #0]
    1fa0:	f041 0001 	orr.w	r0, r1, #1
    1fa4:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1fa6:	6813      	ldr	r3, [r2, #0]
    1fa8:	f003 0103 	and.w	r1, r3, #3
    1fac:	2903      	cmp	r1, #3
    1fae:	d1fa      	bne.n	1fa6 <am_hal_pwrctrl_bucks_init+0x22>
    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    1fb0:	4a04      	ldr	r2, [pc, #16]	; (1fc4 <am_hal_pwrctrl_bucks_init+0x40>)
    1fb2:	6810      	ldr	r0, [r2, #0]
    1fb4:	f000 0303 	and.w	r3, r0, #3
    1fb8:	2b03      	cmp	r3, #3
    1fba:	d1fa      	bne.n	1fb2 <am_hal_pwrctrl_bucks_init+0x2e>
    am_hal_flash_delay(200 / 3);
    1fbc:	2042      	movs	r0, #66	; 0x42
    1fbe:	f7ff be47 	b.w	1c50 <am_hal_flash_delay>
    1fc2:	bf00      	nop
    1fc4:	40021004 	.word	0x40021004
    1fc8:	40021000 	.word	0x40021000

00001fcc <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1fcc:	4905      	ldr	r1, [pc, #20]	; (1fe4 <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1fce:	4a06      	ldr	r2, [pc, #24]	; (1fe8 <am_hal_pwrctrl_low_power_init+0x1c>)
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1fd0:	680b      	ldr	r3, [r1, #0]
    1fd2:	f043 0006 	orr.w	r0, r3, #6
    1fd6:	6008      	str	r0, [r1, #0]
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1fd8:	6811      	ldr	r1, [r2, #0]
    1fda:	f021 0304 	bic.w	r3, r1, #4
    1fde:	6013      	str	r3, [r2, #0]
    1fe0:	4770      	bx	lr
    1fe2:	bf00      	nop
    1fe4:	40021018 	.word	0x40021018
    1fe8:	40021000 	.word	0x40021000

00001fec <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1fec:	4a05      	ldr	r2, [pc, #20]	; (2004 <am_hal_rtc_osc_select+0x18>)
    1fee:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    1ff0:	b918      	cbnz	r0, 1ffa <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    1ff2:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1ff6:	6010      	str	r0, [r2, #0]
    1ff8:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1ffa:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    1ffe:	6011      	str	r1, [r2, #0]
    2000:	4770      	bx	lr
    2002:	bf00      	nop
    2004:	4000400c 	.word	0x4000400c

00002008 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    2008:	4a02      	ldr	r2, [pc, #8]	; (2014 <am_hal_rtc_osc_disable+0xc>)
    200a:	6813      	ldr	r3, [r2, #0]
    200c:	f043 0010 	orr.w	r0, r3, #16
    2010:	6010      	str	r0, [r2, #0]
    2012:	4770      	bx	lr
    2014:	40004050 	.word	0x40004050

00002018 <am_hal_uart_config>:
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    2018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    201a:	460d      	mov	r5, r1
    201c:	4607      	mov	r7, r0
    uint32_t ui32HFRC;

    //
    // Configure the Baudrate.
    //
    ui32HFRC = am_hal_clkgen_sysclk_get();
    201e:	f7ff fdd7 	bl	1bd0 <am_hal_clkgen_sysclk_get>
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    2022:	682b      	ldr	r3, [r5, #0]
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    2024:	0186      	lsls	r6, r0, #6
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    2026:	0159      	lsls	r1, r3, #5
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    2028:	fbb0 f4f1 	udiv	r4, r0, r1
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    202c:	fbb6 f0f1 	udiv	r0, r6, r1
    2030:	eba0 1684 	sub.w	r6, r0, r4, lsl #6
    am_hal_debug_assert_msg(ui32IntegerDivisor > 0, "Integer divisor MUST be greater than or equal to 1.");
    2034:	b924      	cbnz	r4, 2040 <am_hal_uart_config+0x28>
    2036:	4a11      	ldr	r2, [pc, #68]	; (207c <am_hal_uart_config+0x64>)
    2038:	4811      	ldr	r0, [pc, #68]	; (2080 <am_hal_uart_config+0x68>)
    203a:	2164      	movs	r1, #100	; 0x64
    203c:	f7ff fe06 	bl	1c4c <am_hal_debug_error>
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    2040:	f507 2280 	add.w	r2, r7, #262144	; 0x40000
    2044:	321c      	adds	r2, #28
    2046:	0317      	lsls	r7, r2, #12
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    2048:	7a2b      	ldrb	r3, [r5, #8]
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    204a:	627c      	str	r4, [r7, #36]	; 0x24
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    204c:	627c      	str	r4, [r7, #36]	; 0x24
    AM_REGn(UART, ui32Module, FBRD) = ui32FractionDivisor;
    204e:	62be      	str	r6, [r7, #40]	; 0x28
    ui32ConfigVal |= psConfig->ui32DataBits;
    2050:	6868      	ldr	r0, [r5, #4]
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    2052:	68ec      	ldr	r4, [r5, #12]
    2054:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    2056:	2b00      	cmp	r3, #0
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    2058:	ea40 0004 	orr.w	r0, r0, r4
    205c:	ea40 0001 	orr.w	r0, r0, r1
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    2060:	bf14      	ite	ne
    2062:	2108      	movne	r1, #8
    2064:	2100      	moveq	r1, #0
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    2066:	4308      	orrs	r0, r1
    2068:	62f8      	str	r0, [r7, #44]	; 0x2c

    //
    // Write the flow control settings to the control register.
    //
    AM_REGn(UART, ui32Module, CR) |= psConfig->ui32FlowCtrl;
    206a:	6b3e      	ldr	r6, [r7, #48]	; 0x30
    206c:	692d      	ldr	r5, [r5, #16]
    206e:	432e      	orrs	r6, r5
    2070:	633e      	str	r6, [r7, #48]	; 0x30

    //
    // Set the clock select field for 24MHz from the HFRC
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    2072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2074:	f042 0310 	orr.w	r3, r2, #16
    2078:	633b      	str	r3, [r7, #48]	; 0x30
    207a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    207c:	00002390 	.word	0x00002390
    2080:	000023c4 	.word	0x000023c4

00002084 <am_hal_uart_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_enable(uint32_t ui32Module)
{
    2084:	b510      	push	{r4, lr}
    2086:	4604      	mov	r4, r0
    2088:	b082      	sub	sp, #8
    //
    // Enable the UART, RX, and TX.
    //
    AM_REGan_SET(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    208a:	f7ff fde5 	bl	1c58 <am_hal_interrupt_master_disable>
    208e:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
    2092:	331c      	adds	r3, #28
    2094:	0319      	lsls	r1, r3, #12
    2096:	9001      	str	r0, [sp, #4]
    2098:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    209a:	f442 7040 	orr.w	r0, r2, #768	; 0x300
    209e:	f040 0401 	orr.w	r4, r0, #1
    20a2:	630c      	str	r4, [r1, #48]	; 0x30
    20a4:	9801      	ldr	r0, [sp, #4]
    20a6:	f7ff fddb 	bl	1c60 <am_hal_interrupt_master_set>
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    20aa:	b002      	add	sp, #8
    20ac:	bd10      	pop	{r4, pc}
    20ae:	bf00      	nop

000020b0 <am_hal_uart_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_disable(uint32_t ui32Module)
{
    20b0:	b510      	push	{r4, lr}
    20b2:	4604      	mov	r4, r0
    20b4:	b082      	sub	sp, #8
    //
    // Disable the UART.
    //
    AM_REGan_CLR(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    20b6:	f7ff fdcf 	bl	1c58 <am_hal_interrupt_master_disable>
    20ba:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
    20be:	331c      	adds	r3, #28
    20c0:	0319      	lsls	r1, r3, #12
    20c2:	9001      	str	r0, [sp, #4]
    20c4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    20c6:	f422 7040 	bic.w	r0, r2, #768	; 0x300
    20ca:	f020 0401 	bic.w	r4, r0, #1
    20ce:	630c      	str	r4, [r1, #48]	; 0x30
    20d0:	9801      	ldr	r0, [sp, #4]
    20d2:	f7ff fdc5 	bl	1c60 <am_hal_interrupt_master_set>
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    20d6:	b002      	add	sp, #8
    20d8:	bd10      	pop	{r4, pc}
    20da:	bf00      	nop

000020dc <am_hal_uart_pwrctrl_enable>:
am_hal_uart_pwrctrl_enable(uint32_t ui32Module)
{
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    20dc:	2801      	cmp	r0, #1
{
    20de:	b510      	push	{r4, lr}
    20e0:	4604      	mov	r4, r0
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    20e2:	d905      	bls.n	20f0 <am_hal_uart_pwrctrl_enable+0x14>
    20e4:	4a05      	ldr	r2, [pc, #20]	; (20fc <am_hal_uart_pwrctrl_enable+0x20>)
    20e6:	4806      	ldr	r0, [pc, #24]	; (2100 <am_hal_uart_pwrctrl_enable+0x24>)
    20e8:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    20ec:	f7ff fdae 	bl	1c4c <am_hal_debug_error>
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    20f0:	2080      	movs	r0, #128	; 0x80
    20f2:	40a0      	lsls	r0, r4
}
    20f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    20f8:	f7ff bdda 	b.w	1cb0 <am_hal_pwrctrl_periph_enable>
    20fc:	000023d8 	.word	0x000023d8
    2100:	000023c4 	.word	0x000023c4

00002104 <am_hal_uart_pwrctrl_disable>:
am_hal_uart_pwrctrl_disable(uint32_t ui32Module)
{
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    2104:	2801      	cmp	r0, #1
{
    2106:	b510      	push	{r4, lr}
    2108:	4604      	mov	r4, r0
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    210a:	d905      	bls.n	2118 <am_hal_uart_pwrctrl_disable+0x14>
    210c:	4a05      	ldr	r2, [pc, #20]	; (2124 <am_hal_uart_pwrctrl_disable+0x20>)
    210e:	4806      	ldr	r0, [pc, #24]	; (2128 <am_hal_uart_pwrctrl_disable+0x24>)
    2110:	f240 11bd 	movw	r1, #445	; 0x1bd
    2114:	f7ff fd9a 	bl	1c4c <am_hal_debug_error>
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    2118:	2080      	movs	r0, #128	; 0x80
    211a:	40a0      	lsls	r0, r4
}
    211c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    2120:	f7ff be08 	b.w	1d34 <am_hal_pwrctrl_periph_disable>
    2124:	000023d8 	.word	0x000023d8
    2128:	000023c4 	.word	0x000023c4

0000212c <am_hal_uart_clock_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    212c:	b510      	push	{r4, lr}
    //
    // Set CLKGEN.UARTEN, clear the field then write the desired enable value
    // Valid enable values are DIS, EN, REDUCE_FREQ, EN_POWER_SAV.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    212e:	2101      	movs	r1, #1
{
    2130:	4604      	mov	r4, r0
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    2132:	f7ff fd67 	bl	1c04 <am_hal_clkgen_uarten_set>

    //
    // Enable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKEN_M;
    2136:	f504 2080 	add.w	r0, r4, #262144	; 0x40000
    213a:	301c      	adds	r0, #28
    213c:	0301      	lsls	r1, r0, #12
    213e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    2140:	f043 0208 	orr.w	r2, r3, #8
    2144:	630a      	str	r2, [r1, #48]	; 0x30

    //
    // Select default UART clock source
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    2146:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    2148:	f044 0010 	orr.w	r0, r4, #16
    214c:	6308      	str	r0, [r1, #48]	; 0x30
    214e:	bd10      	pop	{r4, pc}

00002150 <am_hal_uart_clock_disable>:
am_hal_uart_clock_disable(uint32_t ui32Module)
{
    //
    // Disable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) &= ~AM_REG_UART_CR_CLKEN_M;
    2150:	f500 2380 	add.w	r3, r0, #262144	; 0x40000
    2154:	331c      	adds	r3, #28
    2156:	031b      	lsls	r3, r3, #12

    //
    // Disable the UART clock in the CLKGEN module.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_DIS);
    2158:	2100      	movs	r1, #0
    AM_REGn(UART, ui32Module, CR) &= ~AM_REG_UART_CR_CLKEN_M;
    215a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    215c:	f022 0208 	bic.w	r2, r2, #8
    2160:	631a      	str	r2, [r3, #48]	; 0x30
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_DIS);
    2162:	f7ff bd4f 	b.w	1c04 <am_hal_clkgen_uarten_set>
    2166:	bf00      	nop

00002168 <am_hal_uart_fifo_config>:
am_hal_uart_fifo_config(uint32_t ui32Module, uint32_t ui32LvlCfg)
{
    //
    // Enable the use of FIFOs.
    //
    AM_REGn(UART, ui32Module, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    2168:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    216c:	301c      	adds	r0, #28
    216e:	0302      	lsls	r2, r0, #12
    2170:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2172:	f043 0010 	orr.w	r0, r3, #16
    2176:	62d0      	str	r0, [r2, #44]	; 0x2c

    //
    // Write the FIFO level register.
    //
    AM_REGn(UART, ui32Module, IFLS) = ui32LvlCfg;
    2178:	6351      	str	r1, [r2, #52]	; 0x34
    217a:	4770      	bx	lr

0000217c <am_hal_uart_string_transmit_polled>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_string_transmit_polled(uint32_t ui32Module, char *pcString)
{
    217c:	b410      	push	{r4}
    while (*pcString)
    217e:	780c      	ldrb	r4, [r1, #0]
    2180:	b16c      	cbz	r4, 219e <am_hal_uart_string_transmit_polled+0x22>
    2182:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    2186:	301c      	adds	r0, #28
    2188:	0300      	lsls	r0, r0, #12
    218a:	f100 0218 	add.w	r2, r0, #24
    {
        //
        // Wait for space, i.e.  TX FIFO EMPTY.
        //
        while (AM_BFRn(UART, ui32Module, FR, TXFF));
    218e:	6813      	ldr	r3, [r2, #0]
    2190:	069b      	lsls	r3, r3, #26
    2192:	d4fc      	bmi.n	218e <am_hal_uart_string_transmit_polled+0x12>

        //
        // Write the char.
        //
        AM_REGn(UART, ui32Module, DR) = *pcString++;
    2194:	6004      	str	r4, [r0, #0]
    while (*pcString)
    2196:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    219a:	2c00      	cmp	r4, #0
    219c:	d1f7      	bne.n	218e <am_hal_uart_string_transmit_polled+0x12>
    }
}
    219e:	f85d 4b04 	ldr.w	r4, [sp], #4
    21a2:	4770      	bx	lr

000021a4 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    21a4:	4b01      	ldr	r3, [pc, #4]	; (21ac <am_hal_vcomp_disable+0x8>)
    21a6:	2237      	movs	r2, #55	; 0x37
    21a8:	601a      	str	r2, [r3, #0]
    21aa:	4770      	bx	lr
    21ac:	4000c008 	.word	0x4000c008
    21b0:	69626d41 	.word	0x69626d41
    21b4:	694d2071 	.word	0x694d2071
    21b8:	206f7263 	.word	0x206f7263
    21bc:	69727027 	.word	0x69727027
    21c0:	2027656d 	.word	0x2027656d
    21c4:	6d617865 	.word	0x6d617865
    21c8:	2e656c70 	.word	0x2e656c70
    21cc:	00000a0a 	.word	0x00000a0a
    21d0:	64657355 	.word	0x64657355
    21d4:	726f6620 	.word	0x726f6620
    21d8:	61656d20 	.word	0x61656d20
    21dc:	69727573 	.word	0x69727573
    21e0:	7020676e 	.word	0x7020676e
    21e4:	7265776f 	.word	0x7265776f
    21e8:	69687720 	.word	0x69687720
    21ec:	6320656c 	.word	0x6320656c
    21f0:	75706d6f 	.word	0x75706d6f
    21f4:	676e6974 	.word	0x676e6974
    21f8:	65687420 	.word	0x65687420
    21fc:	6d756e20 	.word	0x6d756e20
    2200:	20726562 	.word	0x20726562
    2204:	7020666f 	.word	0x7020666f
    2208:	656d6972 	.word	0x656d6972
    220c:	6d756e20 	.word	0x6d756e20
    2210:	73726562 	.word	0x73726562
    2214:	206e6920 	.word	0x206e6920
    2218:	61722061 	.word	0x61722061
    221c:	2e65676e 	.word	0x2e65676e
    2220:	0000000a 	.word	0x0000000a
    2224:	20434347 	.word	0x20434347
    2228:	2e332e36 	.word	0x2e332e36
    222c:	30322031 	.word	0x30322031
    2230:	32303731 	.word	0x32303731
    2234:	28203531 	.word	0x28203531
    2238:	656c6572 	.word	0x656c6572
    223c:	29657361 	.word	0x29657361
    2240:	52415b20 	.word	0x52415b20
    2244:	6d652f4d 	.word	0x6d652f4d
    2248:	64646562 	.word	0x64646562
    224c:	362d6465 	.word	0x362d6465
    2250:	6172622d 	.word	0x6172622d
    2254:	2068636e 	.word	0x2068636e
    2258:	69766572 	.word	0x69766572
    225c:	6e6f6973 	.word	0x6e6f6973
    2260:	35343220 	.word	0x35343220
    2264:	5d323135 	.word	0x5d323135
    2268:	00000000 	.word	0x00000000
    226c:	706d6f43 	.word	0x706d6f43
    2270:	72656c69 	.word	0x72656c69
    2274:	7325203a 	.word	0x7325203a
    2278:	0000000a 	.word	0x0000000a
    227c:	73736150 	.word	0x73736150
    2280:	756e203a 	.word	0x756e203a
    2284:	7265626d 	.word	0x7265626d
    2288:	20666f20 	.word	0x20666f20
    228c:	6d697270 	.word	0x6d697270
    2290:	66207365 	.word	0x66207365
    2294:	2520726f 	.word	0x2520726f
    2298:	73692064 	.word	0x73692064
    229c:	2e642520 	.word	0x2e642520
    22a0:	0000000a 	.word	0x0000000a
    22a4:	4f525245 	.word	0x4f525245
    22a8:	49203a52 	.word	0x49203a52
    22ac:	6c61766e 	.word	0x6c61766e
    22b0:	72206469 	.word	0x72206469
    22b4:	6c757365 	.word	0x6c757365
    22b8:	45202e74 	.word	0x45202e74
    22bc:	63657078 	.word	0x63657078
    22c0:	20646574 	.word	0x20646574
    22c4:	202c6425 	.word	0x202c6425
    22c8:	20746f67 	.word	0x20746f67
    22cc:	0a2e6425 	.word	0x0a2e6425
    22d0:	00000000 	.word	0x00000000
    22d4:	0a0a0a0a 	.word	0x0a0a0a0a
    22d8:	0a0a0a0a 	.word	0x0a0a0a0a
    22dc:	0a0a0a0a 	.word	0x0a0a0a0a
    22e0:	0a0a0a0a 	.word	0x0a0a0a0a
    22e4:	00000a0a 	.word	0x00000a0a

000022e8 <am_hal_cachectrl_defaults>:
    22e8:	50000001 00010300 00010101 685f6d61     ...P........am_h
    22f8:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    2308:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    2318:	63206469 6b636f6c 74657320 676e6974     id clock setting
    2328:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    2338:	6b6c635f 2e6e6567 00000063 6e6e6143     _clkgen.c...Cann
    2348:	6520746f 6c62616e 6f6d2065 74206572     ot enable more t
    2358:	206e6168 20656e6f 69726570 72656870     han one peripher
    2368:	61206c61 20612074 656d6974 0000002e     al at a time....
    2378:	2e5c2e2e 6d615c2e 6c61685f 7277705f     ..\..\am_hal_pwr
    2388:	6c727463 0000632e 65746e49 20726567     ctrl.c..Integer 
    2398:	69766964 20726f73 5453554d 20656220     divisor MUST be 
    23a8:	61657267 20726574 6e616874 20726f20     greater than or 
    23b8:	61757165 6f74206c 002e3120 2e5c2e2e     equal to 1....\.
    23c8:	6d615c2e 6c61685f 7261755f 00632e74     .\am_hal_uart.c.
    23d8:	69797254 7420676e 6964206f 6c626173     Trying to disabl
    23e8:	20612065 54524155 646f6d20 20656c75     e a UART module 
    23f8:	74616874 656f6420 74276e73 69786520     that doesn't exi
    2408:	00007473                                st..
