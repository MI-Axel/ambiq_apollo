
uart_printf_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002098  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000020  10001000  00002098  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000110  10001020  000020b8  00021020  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021020  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000b89c  00000000  00000000  00021057  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000247e  00000000  00000000  0002c8f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000810  00000000  00000000  0002ed71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 000012c8  00000000  00000000  0002f581  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004887  00000000  00000000  00030849  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002f6c  00000000  00000000  000350d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  0003803c  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000017d4  00000000  00000000  000380b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000403a  00000000  00000000  0003988c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 05 05 00 00 6d 05 00 00 79 05 00 00     ........m...y...
      10:	79 05 00 00 79 05 00 00 79 05 00 00 00 00 00 00     y...y...y.......
	...
      2c:	73 05 00 00 73 05 00 00 00 00 00 00 73 05 00 00     s...s.......s...
      3c:	73 05 00 00 73 05 00 00 73 05 00 00 73 05 00 00     s...s...s...s...
      4c:	73 05 00 00 73 05 00 00 73 05 00 00 73 05 00 00     s...s...s...s...
      5c:	73 05 00 00 73 05 00 00 73 05 00 00 73 05 00 00     s...s...s...s...
      6c:	73 05 00 00 73 05 00 00 a5 01 00 00 73 05 00 00     s...s.......s...
      7c:	73 05 00 00 73 05 00 00 73 05 00 00 73 05 00 00     s...s...s...s...
      8c:	73 05 00 00 73 05 00 00 73 05 00 00 73 05 00 00     s...s...s...s...
      9c:	73 05 00 00 73 05 00 00 73 05 00 00 73 05 00 00     s...s...s...s...
      ac:	73 05 00 00 73 05 00 00 73 05 00 00 73 05 00 00     s...s...s...s...
      bc:	73 05 00 00                                         s...

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <timerA0_init>:
// Init function for Timer A0.
//
//*****************************************************************************
void
timerA0_init(void)
{
     160:	b580      	push	{r7, lr}
     162:	b082      	sub	sp, #8
     164:	af00      	add	r7, sp, #0
    uint32_t ui32Period;

    //
    // Enable the LFRC.
    //
    am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_LFRC);
     166:	2002      	movs	r0, #2
     168:	f001 f9fc 	bl	1564 <am_hal_clkgen_osc_start>

    //
    // Set up timer A0.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
     16c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     170:	2000      	movs	r0, #0
     172:	f001 fab9 	bl	16e8 <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer3);
     176:	490a      	ldr	r1, [pc, #40]	; (1a0 <timerA0_init+0x40>)
     178:	2000      	movs	r0, #0
     17a:	f001 fa2b 	bl	15d4 <am_hal_ctimer_config>
    // With LFRC running at 512 Hz, set up a print rate of 32 Hz.
    //  ui32Period = 8:  ~64 Hz print rate
    //  ui32Period = 16: ~32 Hz print rate
    //  ui32Period = 32: ~16 Hz print rate
    //
    ui32Period = 16;
     17e:	2310      	movs	r3, #16
     180:	607b      	str	r3, [r7, #4]
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ui32Period,
     182:	687b      	ldr	r3, [r7, #4]
     184:	085b      	lsrs	r3, r3, #1
     186:	687a      	ldr	r2, [r7, #4]
     188:	f64f 71ff 	movw	r1, #65535	; 0xffff
     18c:	2000      	movs	r0, #0
     18e:	f001 fabf 	bl	1710 <am_hal_ctimer_period_set>
                             (ui32Period >> 1));

    //
    // Clear the timer Interrupt
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
     192:	2001      	movs	r0, #1
     194:	f001 fb28 	bl	17e8 <am_hal_ctimer_int_clear>
}
     198:	bf00      	nop
     19a:	3708      	adds	r7, #8
     19c:	46bd      	mov	sp, r7
     19e:	bd80      	pop	{r7, pc}
     1a0:	10001000 	.word	0x10001000

000001a4 <am_ctimer_isr>:
// Timer Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
     1a4:	b580      	push	{r7, lr}
     1a6:	af00      	add	r7, sp, #0
    //
    // Clear TimerA0 Interrupt (write to clear).
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
     1a8:	2001      	movs	r0, #1
     1aa:	f001 fb1d 	bl	17e8 <am_hal_ctimer_int_clear>
}
     1ae:	bf00      	nop
     1b0:	bd80      	pop	{r7, pc}
	...

000001b4 <uart_init>:
// Initialize the UART
//
//*****************************************************************************
void
uart_init(int32_t i32Module)
{
     1b4:	b580      	push	{r7, lr}
     1b6:	b084      	sub	sp, #16
     1b8:	af00      	add	r7, sp, #0
     1ba:	6078      	str	r0, [r7, #4]
    //
    // Make sure the UART RX and TX pins are enabled.
    //
    am_bsp_pin_enable(COM_UART_TX);
     1bc:	f001 fb4c 	bl	1858 <am_hal_interrupt_master_disable>
     1c0:	4603      	mov	r3, r0
     1c2:	60fb      	str	r3, [r7, #12]
     1c4:	4b2d      	ldr	r3, [pc, #180]	; (27c <uart_init+0xc8>)
     1c6:	2273      	movs	r2, #115	; 0x73
     1c8:	601a      	str	r2, [r3, #0]
     1ca:	4a2d      	ldr	r2, [pc, #180]	; (280 <uart_init+0xcc>)
     1cc:	4b2c      	ldr	r3, [pc, #176]	; (280 <uart_init+0xcc>)
     1ce:	681b      	ldr	r3, [r3, #0]
     1d0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     1d4:	6013      	str	r3, [r2, #0]
     1d6:	4a2b      	ldr	r2, [pc, #172]	; (284 <uart_init+0xd0>)
     1d8:	4b2a      	ldr	r3, [pc, #168]	; (284 <uart_init+0xd0>)
     1da:	681b      	ldr	r3, [r3, #0]
     1dc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     1e0:	6013      	str	r3, [r2, #0]
     1e2:	4a29      	ldr	r2, [pc, #164]	; (288 <uart_init+0xd4>)
     1e4:	4b28      	ldr	r3, [pc, #160]	; (288 <uart_init+0xd4>)
     1e6:	681b      	ldr	r3, [r3, #0]
     1e8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     1ec:	6013      	str	r3, [r2, #0]
     1ee:	4b23      	ldr	r3, [pc, #140]	; (27c <uart_init+0xc8>)
     1f0:	2200      	movs	r2, #0
     1f2:	601a      	str	r2, [r3, #0]
     1f4:	68fb      	ldr	r3, [r7, #12]
     1f6:	4618      	mov	r0, r3
     1f8:	f001 fb32 	bl	1860 <am_hal_interrupt_master_set>
    am_bsp_pin_enable(COM_UART_RX);
     1fc:	f001 fb2c 	bl	1858 <am_hal_interrupt_master_disable>
     200:	4603      	mov	r3, r0
     202:	60bb      	str	r3, [r7, #8]
     204:	4b1d      	ldr	r3, [pc, #116]	; (27c <uart_init+0xc8>)
     206:	2273      	movs	r2, #115	; 0x73
     208:	601a      	str	r2, [r3, #0]
     20a:	4a1d      	ldr	r2, [pc, #116]	; (280 <uart_init+0xcc>)
     20c:	4b1c      	ldr	r3, [pc, #112]	; (280 <uart_init+0xcc>)
     20e:	681b      	ldr	r3, [r3, #0]
     210:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
     214:	6013      	str	r3, [r2, #0]
     216:	4a1b      	ldr	r2, [pc, #108]	; (284 <uart_init+0xd0>)
     218:	4b1a      	ldr	r3, [pc, #104]	; (284 <uart_init+0xd0>)
     21a:	681b      	ldr	r3, [r3, #0]
     21c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     220:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     224:	6013      	str	r3, [r2, #0]
     226:	4a18      	ldr	r2, [pc, #96]	; (288 <uart_init+0xd4>)
     228:	4b17      	ldr	r3, [pc, #92]	; (288 <uart_init+0xd4>)
     22a:	681b      	ldr	r3, [r3, #0]
     22c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     230:	6013      	str	r3, [r2, #0]
     232:	4b12      	ldr	r3, [pc, #72]	; (27c <uart_init+0xc8>)
     234:	2200      	movs	r2, #0
     236:	601a      	str	r2, [r3, #0]
     238:	68bb      	ldr	r3, [r7, #8]
     23a:	4618      	mov	r0, r3
     23c:	f001 fb10 	bl	1860 <am_hal_interrupt_master_set>

    //
    // Power on the selected UART
    //
    am_hal_uart_pwrctrl_enable(i32Module);
     240:	687b      	ldr	r3, [r7, #4]
     242:	4618      	mov	r0, r3
     244:	f001 fe16 	bl	1e74 <am_hal_uart_pwrctrl_enable>

    //
    // Start the UART interface, apply the desired configuration settings, and
    // enable the FIFOs.
    //
    am_hal_uart_clock_enable(i32Module);
     248:	687b      	ldr	r3, [r7, #4]
     24a:	4618      	mov	r0, r3
     24c:	f001 fe26 	bl	1e9c <am_hal_uart_clock_enable>

    //
    // Disable the UART before configuring it.
    //
    am_hal_uart_disable(i32Module);
     250:	687b      	ldr	r3, [r7, #4]
     252:	4618      	mov	r0, r3
     254:	f001 fdf8 	bl	1e48 <am_hal_uart_disable>

    //
    // Configure the UART.
    //
    am_hal_uart_config(i32Module, &g_sUartConfig);
     258:	687b      	ldr	r3, [r7, #4]
     25a:	490c      	ldr	r1, [pc, #48]	; (28c <uart_init+0xd8>)
     25c:	4618      	mov	r0, r3
     25e:	f001 fda1 	bl	1da4 <am_hal_uart_config>

    //
    // Enable the UART FIFO.
    //
    am_hal_uart_fifo_config(i32Module, AM_HAL_UART_TX_FIFO_1_2 | AM_HAL_UART_RX_FIFO_1_2);
     262:	687b      	ldr	r3, [r7, #4]
     264:	2112      	movs	r1, #18
     266:	4618      	mov	r0, r3
     268:	f001 fe36 	bl	1ed8 <am_hal_uart_fifo_config>

    //
    // Enable the UART.
    //
    am_hal_uart_enable(i32Module);
     26c:	687b      	ldr	r3, [r7, #4]
     26e:	4618      	mov	r0, r3
     270:	f001 fdd4 	bl	1e1c <am_hal_uart_enable>
}
     274:	bf00      	nop
     276:	3710      	adds	r7, #16
     278:	46bd      	mov	sp, r7
     27a:	bd80      	pop	{r7, pc}
     27c:	40010060 	.word	0x40010060
     280:	40010048 	.word	0x40010048
     284:	40010014 	.word	0x40010014
     288:	400100f4 	.word	0x400100f4
     28c:	1000100c 	.word	0x1000100c

00000290 <uart_enable>:
// Enable the UART
//
//*****************************************************************************
void
uart_enable(int32_t i32Module)
{
     290:	b580      	push	{r7, lr}
     292:	b084      	sub	sp, #16
     294:	af00      	add	r7, sp, #0
     296:	6078      	str	r0, [r7, #4]
    //
    // Enable the UART clock.
    //
    am_hal_uart_clock_enable(i32Module);
     298:	687b      	ldr	r3, [r7, #4]
     29a:	4618      	mov	r0, r3
     29c:	f001 fdfe 	bl	1e9c <am_hal_uart_clock_enable>

    //
    // Enable the UART.
    //
    am_hal_uart_enable(i32Module);
     2a0:	687b      	ldr	r3, [r7, #4]
     2a2:	4618      	mov	r0, r3
     2a4:	f001 fdba 	bl	1e1c <am_hal_uart_enable>

    //
    // Enable the UART pins.
    //
    am_bsp_pin_enable(COM_UART_TX);
     2a8:	f001 fad6 	bl	1858 <am_hal_interrupt_master_disable>
     2ac:	4603      	mov	r3, r0
     2ae:	60fb      	str	r3, [r7, #12]
     2b0:	4b20      	ldr	r3, [pc, #128]	; (334 <uart_enable+0xa4>)
     2b2:	2273      	movs	r2, #115	; 0x73
     2b4:	601a      	str	r2, [r3, #0]
     2b6:	4a20      	ldr	r2, [pc, #128]	; (338 <uart_enable+0xa8>)
     2b8:	4b1f      	ldr	r3, [pc, #124]	; (338 <uart_enable+0xa8>)
     2ba:	681b      	ldr	r3, [r3, #0]
     2bc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     2c0:	6013      	str	r3, [r2, #0]
     2c2:	4a1e      	ldr	r2, [pc, #120]	; (33c <uart_enable+0xac>)
     2c4:	4b1d      	ldr	r3, [pc, #116]	; (33c <uart_enable+0xac>)
     2c6:	681b      	ldr	r3, [r3, #0]
     2c8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     2cc:	6013      	str	r3, [r2, #0]
     2ce:	4a1c      	ldr	r2, [pc, #112]	; (340 <uart_enable+0xb0>)
     2d0:	4b1b      	ldr	r3, [pc, #108]	; (340 <uart_enable+0xb0>)
     2d2:	681b      	ldr	r3, [r3, #0]
     2d4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     2d8:	6013      	str	r3, [r2, #0]
     2da:	4b16      	ldr	r3, [pc, #88]	; (334 <uart_enable+0xa4>)
     2dc:	2200      	movs	r2, #0
     2de:	601a      	str	r2, [r3, #0]
     2e0:	68fb      	ldr	r3, [r7, #12]
     2e2:	4618      	mov	r0, r3
     2e4:	f001 fabc 	bl	1860 <am_hal_interrupt_master_set>
    am_bsp_pin_enable(COM_UART_RX);
     2e8:	f001 fab6 	bl	1858 <am_hal_interrupt_master_disable>
     2ec:	4603      	mov	r3, r0
     2ee:	60bb      	str	r3, [r7, #8]
     2f0:	4b10      	ldr	r3, [pc, #64]	; (334 <uart_enable+0xa4>)
     2f2:	2273      	movs	r2, #115	; 0x73
     2f4:	601a      	str	r2, [r3, #0]
     2f6:	4a10      	ldr	r2, [pc, #64]	; (338 <uart_enable+0xa8>)
     2f8:	4b0f      	ldr	r3, [pc, #60]	; (338 <uart_enable+0xa8>)
     2fa:	681b      	ldr	r3, [r3, #0]
     2fc:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
     300:	6013      	str	r3, [r2, #0]
     302:	4a0e      	ldr	r2, [pc, #56]	; (33c <uart_enable+0xac>)
     304:	4b0d      	ldr	r3, [pc, #52]	; (33c <uart_enable+0xac>)
     306:	681b      	ldr	r3, [r3, #0]
     308:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     30c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     310:	6013      	str	r3, [r2, #0]
     312:	4a0b      	ldr	r2, [pc, #44]	; (340 <uart_enable+0xb0>)
     314:	4b0a      	ldr	r3, [pc, #40]	; (340 <uart_enable+0xb0>)
     316:	681b      	ldr	r3, [r3, #0]
     318:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     31c:	6013      	str	r3, [r2, #0]
     31e:	4b05      	ldr	r3, [pc, #20]	; (334 <uart_enable+0xa4>)
     320:	2200      	movs	r2, #0
     322:	601a      	str	r2, [r3, #0]
     324:	68bb      	ldr	r3, [r7, #8]
     326:	4618      	mov	r0, r3
     328:	f001 fa9a 	bl	1860 <am_hal_interrupt_master_set>
}
     32c:	bf00      	nop
     32e:	3710      	adds	r7, #16
     330:	46bd      	mov	sp, r7
     332:	bd80      	pop	{r7, pc}
     334:	40010060 	.word	0x40010060
     338:	40010048 	.word	0x40010048
     33c:	40010014 	.word	0x40010014
     340:	400100f4 	.word	0x400100f4

00000344 <uart_disable>:
// Disable the UART
//
//*****************************************************************************
void
uart_disable(int32_t i32Module)
{
     344:	b580      	push	{r7, lr}
     346:	b084      	sub	sp, #16
     348:	af00      	add	r7, sp, #0
     34a:	6078      	str	r0, [r7, #4]
      //
      // Clear all interrupts before sleeping as having a pending UART interrupt
      // burns power.
      //
      am_hal_uart_int_clear(i32Module, 0xFFFFFFFF);
     34c:	687b      	ldr	r3, [r7, #4]
     34e:	f04f 31ff 	mov.w	r1, #4294967295
     352:	4618      	mov	r0, r3
     354:	f001 fd5c 	bl	1e10 <am_hal_uart_int_clear>

      //
      // Disable the UART.
      //
      am_hal_uart_disable(i32Module);
     358:	687b      	ldr	r3, [r7, #4]
     35a:	4618      	mov	r0, r3
     35c:	f001 fd74 	bl	1e48 <am_hal_uart_disable>

      //
      // Disable the UART pins.
      //
      am_bsp_pin_disable(COM_UART_TX);
     360:	f001 fa7a 	bl	1858 <am_hal_interrupt_master_disable>
     364:	4603      	mov	r3, r0
     366:	60fb      	str	r3, [r7, #12]
     368:	4b23      	ldr	r3, [pc, #140]	; (3f8 <uart_disable+0xb4>)
     36a:	2273      	movs	r2, #115	; 0x73
     36c:	601a      	str	r2, [r3, #0]
     36e:	4a23      	ldr	r2, [pc, #140]	; (3fc <uart_disable+0xb8>)
     370:	4b22      	ldr	r3, [pc, #136]	; (3fc <uart_disable+0xb8>)
     372:	681b      	ldr	r3, [r3, #0]
     374:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     378:	6013      	str	r3, [r2, #0]
     37a:	4a21      	ldr	r2, [pc, #132]	; (400 <uart_disable+0xbc>)
     37c:	4b20      	ldr	r3, [pc, #128]	; (400 <uart_disable+0xbc>)
     37e:	681b      	ldr	r3, [r3, #0]
     380:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     384:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
     388:	6013      	str	r3, [r2, #0]
     38a:	4a1e      	ldr	r2, [pc, #120]	; (404 <uart_disable+0xc0>)
     38c:	4b1d      	ldr	r3, [pc, #116]	; (404 <uart_disable+0xc0>)
     38e:	681b      	ldr	r3, [r3, #0]
     390:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     394:	6013      	str	r3, [r2, #0]
     396:	4b18      	ldr	r3, [pc, #96]	; (3f8 <uart_disable+0xb4>)
     398:	2200      	movs	r2, #0
     39a:	601a      	str	r2, [r3, #0]
     39c:	68fb      	ldr	r3, [r7, #12]
     39e:	4618      	mov	r0, r3
     3a0:	f001 fa5e 	bl	1860 <am_hal_interrupt_master_set>
      am_bsp_pin_disable(COM_UART_RX);
     3a4:	f001 fa58 	bl	1858 <am_hal_interrupt_master_disable>
     3a8:	4603      	mov	r3, r0
     3aa:	60bb      	str	r3, [r7, #8]
     3ac:	4b12      	ldr	r3, [pc, #72]	; (3f8 <uart_disable+0xb4>)
     3ae:	2273      	movs	r2, #115	; 0x73
     3b0:	601a      	str	r2, [r3, #0]
     3b2:	4a12      	ldr	r2, [pc, #72]	; (3fc <uart_disable+0xb8>)
     3b4:	4b11      	ldr	r3, [pc, #68]	; (3fc <uart_disable+0xb8>)
     3b6:	681b      	ldr	r3, [r3, #0]
     3b8:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
     3bc:	6013      	str	r3, [r2, #0]
     3be:	4a10      	ldr	r2, [pc, #64]	; (400 <uart_disable+0xbc>)
     3c0:	4b0f      	ldr	r3, [pc, #60]	; (400 <uart_disable+0xbc>)
     3c2:	681b      	ldr	r3, [r3, #0]
     3c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     3c8:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
     3cc:	6013      	str	r3, [r2, #0]
     3ce:	4a0d      	ldr	r2, [pc, #52]	; (404 <uart_disable+0xc0>)
     3d0:	4b0c      	ldr	r3, [pc, #48]	; (404 <uart_disable+0xc0>)
     3d2:	681b      	ldr	r3, [r3, #0]
     3d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     3d8:	6013      	str	r3, [r2, #0]
     3da:	4b07      	ldr	r3, [pc, #28]	; (3f8 <uart_disable+0xb4>)
     3dc:	2200      	movs	r2, #0
     3de:	601a      	str	r2, [r3, #0]
     3e0:	68bb      	ldr	r3, [r7, #8]
     3e2:	4618      	mov	r0, r3
     3e4:	f001 fa3c 	bl	1860 <am_hal_interrupt_master_set>

      //
      // Disable the UART clock.
      //
      am_hal_uart_clock_disable(i32Module);
     3e8:	687b      	ldr	r3, [r7, #4]
     3ea:	4618      	mov	r0, r3
     3ec:	f001 fd68 	bl	1ec0 <am_hal_uart_clock_disable>
}
     3f0:	bf00      	nop
     3f2:	3710      	adds	r7, #16
     3f4:	46bd      	mov	sp, r7
     3f6:	bd80      	pop	{r7, pc}
     3f8:	40010060 	.word	0x40010060
     3fc:	40010048 	.word	0x40010048
     400:	40010014 	.word	0x40010014
     404:	400100f4 	.word	0x400100f4

00000408 <uart_transmit_delay>:
// for a transmission to fully complete before proceeding.
//
//*****************************************************************************
void
uart_transmit_delay(int32_t i32Module)
{
     408:	b580      	push	{r7, lr}
     40a:	b082      	sub	sp, #8
     40c:	af00      	add	r7, sp, #0
     40e:	6078      	str	r0, [r7, #4]
  //
  // Wait until busy bit clears to make sure UART fully transmitted last byte
  //
  while ( am_hal_uart_flags_get(i32Module) & AM_HAL_UART_FR_BUSY );
     410:	bf00      	nop
     412:	687b      	ldr	r3, [r7, #4]
     414:	4618      	mov	r0, r3
     416:	f001 fd69 	bl	1eec <am_hal_uart_flags_get>
     41a:	4603      	mov	r3, r0
     41c:	f003 0308 	and.w	r3, r3, #8
     420:	2b00      	cmp	r3, #0
     422:	d1f6      	bne.n	412 <uart_transmit_delay+0xa>
}
     424:	bf00      	nop
     426:	3708      	adds	r7, #8
     428:	46bd      	mov	sp, r7
     42a:	bd80      	pop	{r7, pc}

0000042c <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     42c:	b580      	push	{r7, lr}
     42e:	b082      	sub	sp, #8
     430:	af00      	add	r7, sp, #0
    uint32_t i;
    int32_t i32Module = AM_BSP_UART_PRINT_INST;
     432:	2300      	movs	r3, #0
     434:	603b      	str	r3, [r7, #0]

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     436:	2000      	movs	r0, #0
     438:	f001 f86c 	bl	1514 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     43c:	482a      	ldr	r0, [pc, #168]	; (4e8 <main+0xbc>)
     43e:	f000 ffd3 	bl	13e8 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     442:	f000 ffbb 	bl	13bc <am_bsp_low_power_init>

    //
    // Initialize the printf interface for UART output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t)am_bsp_uart_string_print);
     446:	4829      	ldr	r0, [pc, #164]	; (4ec <main+0xc0>)
     448:	f000 f916 	bl	678 <am_util_stdio_printf_init>

    //
    // Initialize and Enable the UART.
    //
    uart_init(i32Module);
     44c:	6838      	ldr	r0, [r7, #0]
     44e:	f7ff feb1 	bl	1b4 <uart_init>

    //
    // Print the banner.
    //
    am_util_stdio_printf("UART Printf Example\n");
     452:	4827      	ldr	r0, [pc, #156]	; (4f0 <main+0xc4>)
     454:	f000 ff94 	bl	1380 <am_util_stdio_printf>
    uart_transmit_delay(i32Module);
     458:	6838      	ldr	r0, [r7, #0]
     45a:	f7ff ffd5 	bl	408 <uart_transmit_delay>
    am_util_stdio_printf("\n\tBeginning ASCII walk through:\n");
     45e:	4825      	ldr	r0, [pc, #148]	; (4f4 <main+0xc8>)
     460:	f000 ff8e 	bl	1380 <am_util_stdio_printf>
    uart_transmit_delay(i32Module);
     464:	6838      	ldr	r0, [r7, #0]
     466:	f7ff ffcf 	bl	408 <uart_transmit_delay>
    am_util_stdio_printf("\t");
     46a:	4823      	ldr	r0, [pc, #140]	; (4f8 <main+0xcc>)
     46c:	f000 ff88 	bl	1380 <am_util_stdio_printf>
    uart_transmit_delay(i32Module);
     470:	6838      	ldr	r0, [r7, #0]
     472:	f7ff ffc9 	bl	408 <uart_transmit_delay>

    //
    // Disable UART for now
    //
    uart_disable(i32Module);
     476:	6838      	ldr	r0, [r7, #0]
     478:	f7ff ff64 	bl	344 <uart_disable>

    //
    // TimerA0 init.
    //
    timerA0_init();
     47c:	f7ff fe70 	bl	160 <timerA0_init>

    //
    // Enable the timer Interrupt.
    //
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
     480:	2001      	movs	r0, #1
     482:	f001 f99f 	bl	17c4 <am_hal_ctimer_int_enable>

    //
    // Enable the timer interrupt in the NVIC.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_CTIMER);
     486:	201d      	movs	r0, #29
     488:	f001 f9ba 	bl	1800 <am_hal_interrupt_enable>
    am_hal_interrupt_master_enable();
     48c:	f001 f9e0 	bl	1850 <am_hal_interrupt_master_enable>

    //
    // Enable the timer.
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
     490:	f64f 71ff 	movw	r1, #65535	; 0xffff
     494:	2000      	movs	r0, #0
     496:	f001 f90f 	bl	16b8 <am_hal_ctimer_start>
    //
    // Loop forever writing chars to the stimulus register.
    //
    while (1)
    {
        for (i = '!'; i <= '~'; i++)
     49a:	2321      	movs	r3, #33	; 0x21
     49c:	607b      	str	r3, [r7, #4]
     49e:	e012      	b.n	4c6 <main+0x9a>
        {
            //
            // Enable UART
            //
            uart_enable(i32Module);
     4a0:	6838      	ldr	r0, [r7, #0]
     4a2:	f7ff fef5 	bl	290 <uart_enable>

            //
            // Walk through the ASCII table.
            //
            am_util_stdio_printf("%c", i);
     4a6:	6879      	ldr	r1, [r7, #4]
     4a8:	4814      	ldr	r0, [pc, #80]	; (4fc <main+0xd0>)
     4aa:	f000 ff69 	bl	1380 <am_util_stdio_printf>
            uart_transmit_delay(i32Module);
     4ae:	6838      	ldr	r0, [r7, #0]
     4b0:	f7ff ffaa 	bl	408 <uart_transmit_delay>

            //
            // Disable UART.
            //
            uart_disable(i32Module);
     4b4:	6838      	ldr	r0, [r7, #0]
     4b6:	f7ff ff45 	bl	344 <uart_disable>

            //
            // Go to Deep Sleep to delay.
            //
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     4ba:	2001      	movs	r0, #1
     4bc:	f001 fbd4 	bl	1c68 <am_hal_sysctrl_sleep>
        for (i = '!'; i <= '~'; i++)
     4c0:	687b      	ldr	r3, [r7, #4]
     4c2:	3301      	adds	r3, #1
     4c4:	607b      	str	r3, [r7, #4]
     4c6:	687b      	ldr	r3, [r7, #4]
     4c8:	2b7e      	cmp	r3, #126	; 0x7e
     4ca:	d9e9      	bls.n	4a0 <main+0x74>
        }

        //
        // Enable the UART, print a new line, and disable.
        //
        uart_enable(i32Module);
     4cc:	6838      	ldr	r0, [r7, #0]
     4ce:	f7ff fedf 	bl	290 <uart_enable>
        am_util_stdio_printf("\n\t");
     4d2:	480b      	ldr	r0, [pc, #44]	; (500 <main+0xd4>)
     4d4:	f000 ff54 	bl	1380 <am_util_stdio_printf>
        uart_transmit_delay(i32Module);
     4d8:	6838      	ldr	r0, [r7, #0]
     4da:	f7ff ff95 	bl	408 <uart_transmit_delay>
        uart_disable(i32Module);
     4de:	6838      	ldr	r0, [r7, #0]
     4e0:	f7ff ff30 	bl	344 <uart_disable>
        for (i = '!'; i <= '~'; i++)
     4e4:	e7d9      	b.n	49a <main+0x6e>
     4e6:	bf00      	nop
     4e8:	00001f74 	.word	0x00001f74
     4ec:	000013e1 	.word	0x000013e1
     4f0:	00001f2c 	.word	0x00001f2c
     4f4:	00001f44 	.word	0x00001f44
     4f8:	00001f68 	.word	0x00001f68
     4fc:	00001f6c 	.word	0x00001f6c
     500:	00001f70 	.word	0x00001f70

00000504 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     504:	4811      	ldr	r0, [pc, #68]	; (54c <zero_loop+0x12>)
     506:	4912      	ldr	r1, [pc, #72]	; (550 <zero_loop+0x16>)
     508:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     50a:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     50e:	4811      	ldr	r0, [pc, #68]	; (554 <zero_loop+0x1a>)
     510:	6801      	ldr	r1, [r0, #0]
     512:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     516:	6001      	str	r1, [r0, #0]
     518:	f3bf 8f4f 	dsb	sy
     51c:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     520:	480d      	ldr	r0, [pc, #52]	; (558 <zero_loop+0x1e>)
     522:	490e      	ldr	r1, [pc, #56]	; (55c <zero_loop+0x22>)
     524:	4a0e      	ldr	r2, [pc, #56]	; (560 <zero_loop+0x26>)

00000526 <copy_loop>:
     526:	f850 3b04 	ldr.w	r3, [r0], #4
     52a:	f841 3b04 	str.w	r3, [r1], #4
     52e:	4291      	cmp	r1, r2
     530:	dbf9      	blt.n	526 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     532:	480c      	ldr	r0, [pc, #48]	; (564 <zero_loop+0x2a>)
     534:	490c      	ldr	r1, [pc, #48]	; (568 <zero_loop+0x2e>)
     536:	f04f 0200 	mov.w	r2, #0

0000053a <zero_loop>:
     53a:	4288      	cmp	r0, r1
     53c:	bfb8      	it	lt
     53e:	f840 2b04 	strlt.w	r2, [r0], #4
     542:	dbfa      	blt.n	53a <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     544:	f7ff ff72 	bl	42c <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     548:	be00      	bkpt	0x0000
}
     54a:	bf00      	nop
     54c:	e000ed08 	.word	0xe000ed08
     550:	00000000 	.word	0x00000000
     554:	e000ed88 	.word	0xe000ed88
     558:	00002098 	.word	0x00002098
     55c:	10001000 	.word	0x10001000
     560:	10001020 	.word	0x10001020
     564:	10001020 	.word	0x10001020
     568:	10001130 	.word	0x10001130

0000056c <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     56c:	b480      	push	{r7}
     56e:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     570:	e7fe      	b.n	570 <am_nmi_isr+0x4>

00000572 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     572:	b480      	push	{r7}
     574:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     576:	e7fe      	b.n	576 <am_adc_isr+0x4>

00000578 <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     578:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     57a:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     57c:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     57e:	f000 f809 	bl	594 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     582:	bd01      	pop	{r0, pc}
}
     584:	bf00      	nop
     586:	4618      	mov	r0, r3

00000588 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     588:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     58a:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     58c:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     58e:	4770      	bx	lr
}
     590:	bf00      	nop
     592:	4618      	mov	r0, r3

00000594 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     594:	b580      	push	{r7, lr}
     596:	b096      	sub	sp, #88	; 0x58
     598:	af00      	add	r7, sp, #0
     59a:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     59c:	f107 030c 	add.w	r3, r7, #12
     5a0:	2200      	movs	r2, #0
     5a2:	601a      	str	r2, [r3, #0]
     5a4:	605a      	str	r2, [r3, #4]
     5a6:	609a      	str	r2, [r3, #8]
     5a8:	60da      	str	r2, [r3, #12]
     5aa:	611a      	str	r2, [r3, #16]
     5ac:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
     5ae:	2300      	movs	r3, #0
     5b0:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     5b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     5b4:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     5b6:	4b2e      	ldr	r3, [pc, #184]	; (670 <am_util_faultisr_collect_data+0xdc>)
     5b8:	681b      	ldr	r3, [r3, #0]
     5ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     5bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     5be:	b2db      	uxtb	r3, r3
     5c0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     5c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     5c6:	0a1b      	lsrs	r3, r3, #8
     5c8:	b2db      	uxtb	r3, r3
     5ca:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     5ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     5d0:	0c1b      	lsrs	r3, r3, #16
     5d2:	b29b      	uxth	r3, r3
     5d4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     5d8:	4b26      	ldr	r3, [pc, #152]	; (674 <am_util_faultisr_collect_data+0xe0>)
     5da:	681b      	ldr	r3, [r3, #0]
     5dc:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     5de:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     5e2:	b2db      	uxtb	r3, r3
     5e4:	f003 0302 	and.w	r3, r3, #2
     5e8:	2b00      	cmp	r3, #0
     5ea:	d005      	beq.n	5f8 <am_util_faultisr_collect_data+0x64>
     5ec:	6879      	ldr	r1, [r7, #4]
     5ee:	2006      	movs	r0, #6
     5f0:	f7ff ffca 	bl	588 <getStackedReg>
     5f4:	4603      	mov	r3, r0
     5f6:	e001      	b.n	5fc <am_util_faultisr_collect_data+0x68>
     5f8:	f04f 33ff 	mov.w	r3, #4294967295
     5fc:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     5fe:	6879      	ldr	r1, [r7, #4]
     600:	2000      	movs	r0, #0
     602:	f7ff ffc1 	bl	588 <getStackedReg>
     606:	4603      	mov	r3, r0
     608:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     60a:	6879      	ldr	r1, [r7, #4]
     60c:	2001      	movs	r0, #1
     60e:	f7ff ffbb 	bl	588 <getStackedReg>
     612:	4603      	mov	r3, r0
     614:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     616:	6879      	ldr	r1, [r7, #4]
     618:	2002      	movs	r0, #2
     61a:	f7ff ffb5 	bl	588 <getStackedReg>
     61e:	4603      	mov	r3, r0
     620:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     622:	6879      	ldr	r1, [r7, #4]
     624:	2003      	movs	r0, #3
     626:	f7ff ffaf 	bl	588 <getStackedReg>
     62a:	4603      	mov	r3, r0
     62c:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     62e:	6879      	ldr	r1, [r7, #4]
     630:	2004      	movs	r0, #4
     632:	f7ff ffa9 	bl	588 <getStackedReg>
     636:	4603      	mov	r3, r0
     638:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     63a:	6879      	ldr	r1, [r7, #4]
     63c:	2005      	movs	r0, #5
     63e:	f7ff ffa3 	bl	588 <getStackedReg>
     642:	4603      	mov	r3, r0
     644:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     646:	6879      	ldr	r1, [r7, #4]
     648:	2006      	movs	r0, #6
     64a:	f7ff ff9d 	bl	588 <getStackedReg>
     64e:	4603      	mov	r3, r0
     650:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     652:	6879      	ldr	r1, [r7, #4]
     654:	2007      	movs	r0, #7
     656:	f7ff ff97 	bl	588 <getStackedReg>
     65a:	4603      	mov	r3, r0
     65c:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     65e:	f107 030c 	add.w	r3, r7, #12
     662:	4618      	mov	r0, r3
     664:	f001 f900 	bl	1868 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     668:	2300      	movs	r3, #0
     66a:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
     66c:	e7fe      	b.n	66c <am_util_faultisr_collect_data+0xd8>
     66e:	bf00      	nop
     670:	e000ed28 	.word	0xe000ed28
     674:	e000ed38 	.word	0xe000ed38

00000678 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     678:	b480      	push	{r7}
     67a:	b083      	sub	sp, #12
     67c:	af00      	add	r7, sp, #0
     67e:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     680:	4a04      	ldr	r2, [pc, #16]	; (694 <am_util_stdio_printf_init+0x1c>)
     682:	687b      	ldr	r3, [r7, #4]
     684:	6013      	str	r3, [r2, #0]
}
     686:	bf00      	nop
     688:	370c      	adds	r7, #12
     68a:	46bd      	mov	sp, r7
     68c:	f85d 7b04 	ldr.w	r7, [sp], #4
     690:	4770      	bx	lr
     692:	bf00      	nop
     694:	1000112c 	.word	0x1000112c

00000698 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     698:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     69c:	b096      	sub	sp, #88	; 0x58
     69e:	af00      	add	r7, sp, #0
     6a0:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     6a4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     6a8:	0025      	movs	r5, r4
     6aa:	2600      	movs	r6, #0
     6ac:	ea55 0306 	orrs.w	r3, r5, r6
     6b0:	f000 80a0 	beq.w	7f4 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     6b4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     6b8:	0862      	lsrs	r2, r4, #1
     6ba:	ea4f 0133 	mov.w	r1, r3, rrx
     6be:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     6c2:	ea4f 0893 	mov.w	r8, r3, lsr #2
     6c6:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     6ca:	ea4f 0994 	mov.w	r9, r4, lsr #2
     6ce:	eb11 0308 	adds.w	r3, r1, r8
     6d2:	eb42 0409 	adc.w	r4, r2, r9
     6d6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     6da:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6de:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     6e2:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     6e6:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     6ea:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6ee:	eb13 030a 	adds.w	r3, r3, sl
     6f2:	eb44 040b 	adc.w	r4, r4, fp
     6f6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     6fa:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6fe:	0a1a      	lsrs	r2, r3, #8
     700:	62ba      	str	r2, [r7, #40]	; 0x28
     702:	6aba      	ldr	r2, [r7, #40]	; 0x28
     704:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     708:	62ba      	str	r2, [r7, #40]	; 0x28
     70a:	0a23      	lsrs	r3, r4, #8
     70c:	62fb      	str	r3, [r7, #44]	; 0x2c
     70e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     712:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     716:	18c9      	adds	r1, r1, r3
     718:	eb42 0204 	adc.w	r2, r2, r4
     71c:	460b      	mov	r3, r1
     71e:	4614      	mov	r4, r2
     720:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     724:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     728:	0c1a      	lsrs	r2, r3, #16
     72a:	623a      	str	r2, [r7, #32]
     72c:	6a3a      	ldr	r2, [r7, #32]
     72e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     732:	623a      	str	r2, [r7, #32]
     734:	0c23      	lsrs	r3, r4, #16
     736:	627b      	str	r3, [r7, #36]	; 0x24
     738:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     73c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     740:	18c9      	adds	r1, r1, r3
     742:	eb42 0204 	adc.w	r2, r2, r4
     746:	460b      	mov	r3, r1
     748:	4614      	mov	r4, r2
     74a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     74e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     752:	0023      	movs	r3, r4
     754:	603b      	str	r3, [r7, #0]
     756:	2300      	movs	r3, #0
     758:	607b      	str	r3, [r7, #4]
     75a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     75e:	e897 0006 	ldmia.w	r7, {r1, r2}
     762:	18c9      	adds	r1, r1, r3
     764:	eb42 0204 	adc.w	r2, r2, r4
     768:	460b      	mov	r3, r1
     76a:	4614      	mov	r4, r2
     76c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     770:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     774:	08da      	lsrs	r2, r3, #3
     776:	613a      	str	r2, [r7, #16]
     778:	693a      	ldr	r2, [r7, #16]
     77a:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     77e:	613a      	str	r2, [r7, #16]
     780:	08e3      	lsrs	r3, r4, #3
     782:	617b      	str	r3, [r7, #20]
     784:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     788:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     78c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
     790:	460b      	mov	r3, r1
     792:	4614      	mov	r4, r2
     794:	00a0      	lsls	r0, r4, #2
     796:	60f8      	str	r0, [r7, #12]
     798:	68f8      	ldr	r0, [r7, #12]
     79a:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
     79e:	60f8      	str	r0, [r7, #12]
     7a0:	009b      	lsls	r3, r3, #2
     7a2:	60bb      	str	r3, [r7, #8]
     7a4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     7a8:	185b      	adds	r3, r3, r1
     7aa:	eb44 0402 	adc.w	r4, r4, r2
     7ae:	18db      	adds	r3, r3, r3
     7b0:	eb44 0404 	adc.w	r4, r4, r4
     7b4:	4619      	mov	r1, r3
     7b6:	4622      	mov	r2, r4
     7b8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     7bc:	1a5b      	subs	r3, r3, r1
     7be:	eb64 0402 	sbc.w	r4, r4, r2
     7c2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     7c6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     7ca:	3306      	adds	r3, #6
     7cc:	f144 0400 	adc.w	r4, r4, #0
     7d0:	091a      	lsrs	r2, r3, #4
     7d2:	61ba      	str	r2, [r7, #24]
     7d4:	69ba      	ldr	r2, [r7, #24]
     7d6:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     7da:	61ba      	str	r2, [r7, #24]
     7dc:	0923      	lsrs	r3, r4, #4
     7de:	61fb      	str	r3, [r7, #28]
     7e0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     7e4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     7e8:	18c9      	adds	r1, r1, r3
     7ea:	eb42 0204 	adc.w	r2, r2, r4
     7ee:	460b      	mov	r3, r1
     7f0:	4614      	mov	r4, r2
     7f2:	e029      	b.n	848 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     7f6:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     7f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     7fa:	085a      	lsrs	r2, r3, #1
     7fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     7fe:	089b      	lsrs	r3, r3, #2
     800:	4413      	add	r3, r2
     802:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     806:	091b      	lsrs	r3, r3, #4
     808:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     80a:	4413      	add	r3, r2
     80c:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     80e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     810:	0a1b      	lsrs	r3, r3, #8
     812:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     814:	4413      	add	r3, r2
     816:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     81a:	0c1b      	lsrs	r3, r3, #16
     81c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     81e:	4413      	add	r3, r2
     820:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     824:	08db      	lsrs	r3, r3, #3
     826:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     828:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     82a:	4613      	mov	r3, r2
     82c:	009b      	lsls	r3, r3, #2
     82e:	4413      	add	r3, r2
     830:	005b      	lsls	r3, r3, #1
     832:	461a      	mov	r2, r3
     834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     836:	1a9b      	subs	r3, r3, r2
     838:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     83a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     83c:	3306      	adds	r3, #6
     83e:	091a      	lsrs	r2, r3, #4
     840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     842:	4413      	add	r3, r2
     844:	f04f 0400 	mov.w	r4, #0
    }
}
     848:	4618      	mov	r0, r3
     84a:	4621      	mov	r1, r4
     84c:	3758      	adds	r7, #88	; 0x58
     84e:	46bd      	mov	sp, r7
     850:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     854:	4770      	bx	lr

00000856 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     856:	b590      	push	{r4, r7, lr}
     858:	b085      	sub	sp, #20
     85a:	af00      	add	r7, sp, #0
     85c:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     860:	683a      	ldr	r2, [r7, #0]
     862:	687b      	ldr	r3, [r7, #4]
     864:	4313      	orrs	r3, r2
     866:	2b00      	cmp	r3, #0
     868:	bf0c      	ite	eq
     86a:	2301      	moveq	r3, #1
     86c:	2300      	movne	r3, #0
     86e:	b2db      	uxtb	r3, r3
     870:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     872:	e008      	b.n	886 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     874:	e9d7 0100 	ldrd	r0, r1, [r7]
     878:	f7ff ff0e 	bl	698 <divu64_10>
     87c:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     880:	68fb      	ldr	r3, [r7, #12]
     882:	3301      	adds	r3, #1
     884:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
     886:	e897 0018 	ldmia.w	r7, {r3, r4}
     88a:	4323      	orrs	r3, r4
     88c:	d1f2      	bne.n	874 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
     88e:	68fb      	ldr	r3, [r7, #12]
}
     890:	4618      	mov	r0, r3
     892:	3714      	adds	r7, #20
     894:	46bd      	mov	sp, r7
     896:	bd90      	pop	{r4, r7, pc}

00000898 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     898:	b590      	push	{r4, r7, lr}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     8a2:	e897 0018 	ldmia.w	r7, {r3, r4}
     8a6:	2b00      	cmp	r3, #0
     8a8:	f174 0300 	sbcs.w	r3, r4, #0
     8ac:	da06      	bge.n	8bc <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     8ae:	e897 0018 	ldmia.w	r7, {r3, r4}
     8b2:	425b      	negs	r3, r3
     8b4:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     8b8:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     8bc:	e897 0018 	ldmia.w	r7, {r3, r4}
     8c0:	4618      	mov	r0, r3
     8c2:	4621      	mov	r1, r4
     8c4:	f7ff ffc7 	bl	856 <ndigits_in_u64>
     8c8:	4603      	mov	r3, r0
}
     8ca:	4618      	mov	r0, r3
     8cc:	370c      	adds	r7, #12
     8ce:	46bd      	mov	sp, r7
     8d0:	bd90      	pop	{r4, r7, pc}

000008d2 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     8d2:	b490      	push	{r4, r7}
     8d4:	b084      	sub	sp, #16
     8d6:	af00      	add	r7, sp, #0
     8d8:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     8dc:	6839      	ldr	r1, [r7, #0]
     8de:	687a      	ldr	r2, [r7, #4]
     8e0:	430a      	orrs	r2, r1
     8e2:	2a00      	cmp	r2, #0
     8e4:	bf0c      	ite	eq
     8e6:	2201      	moveq	r2, #1
     8e8:	2200      	movne	r2, #0
     8ea:	b2d2      	uxtb	r2, r2
     8ec:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     8ee:	e00a      	b.n	906 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     8f0:	e897 0006 	ldmia.w	r7, {r1, r2}
     8f4:	090b      	lsrs	r3, r1, #4
     8f6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     8fa:	0914      	lsrs	r4, r2, #4
     8fc:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     900:	68fa      	ldr	r2, [r7, #12]
     902:	3201      	adds	r2, #1
     904:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
     906:	e897 0006 	ldmia.w	r7, {r1, r2}
     90a:	430a      	orrs	r2, r1
     90c:	d1f0      	bne.n	8f0 <ndigits_in_hex+0x1e>
    }

    return iDigits;
     90e:	68fb      	ldr	r3, [r7, #12]
}
     910:	4618      	mov	r0, r3
     912:	3710      	adds	r7, #16
     914:	46bd      	mov	sp, r7
     916:	bc90      	pop	{r4, r7}
     918:	4770      	bx	lr

0000091a <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     91a:	b480      	push	{r7}
     91c:	b087      	sub	sp, #28
     91e:	af00      	add	r7, sp, #0
     920:	6078      	str	r0, [r7, #4]
     922:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     924:	2300      	movs	r3, #0
     926:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     928:	2300      	movs	r3, #0
     92a:	613b      	str	r3, [r7, #16]
     92c:	2300      	movs	r3, #0
     92e:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     930:	687b      	ldr	r3, [r7, #4]
     932:	781b      	ldrb	r3, [r3, #0]
     934:	2b2d      	cmp	r3, #45	; 0x2d
     936:	d11b      	bne.n	970 <decstr_to_int+0x56>
    {
        bNeg = true;
     938:	2301      	movs	r3, #1
     93a:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     93c:	687b      	ldr	r3, [r7, #4]
     93e:	3301      	adds	r3, #1
     940:	607b      	str	r3, [r7, #4]
        uCnt++;
     942:	68fb      	ldr	r3, [r7, #12]
     944:	3301      	adds	r3, #1
     946:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     948:	e012      	b.n	970 <decstr_to_int+0x56>
    {
        ++uCnt;
     94a:	68fb      	ldr	r3, [r7, #12]
     94c:	3301      	adds	r3, #1
     94e:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     950:	693a      	ldr	r2, [r7, #16]
     952:	4613      	mov	r3, r2
     954:	009b      	lsls	r3, r3, #2
     956:	4413      	add	r3, r2
     958:	005b      	lsls	r3, r3, #1
     95a:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     95c:	687b      	ldr	r3, [r7, #4]
     95e:	781b      	ldrb	r3, [r3, #0]
     960:	461a      	mov	r2, r3
     962:	693b      	ldr	r3, [r7, #16]
     964:	4413      	add	r3, r2
     966:	3b30      	subs	r3, #48	; 0x30
     968:	613b      	str	r3, [r7, #16]
        pcStr++;
     96a:	687b      	ldr	r3, [r7, #4]
     96c:	3301      	adds	r3, #1
     96e:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     970:	687b      	ldr	r3, [r7, #4]
     972:	781b      	ldrb	r3, [r3, #0]
     974:	2b2f      	cmp	r3, #47	; 0x2f
     976:	d903      	bls.n	980 <decstr_to_int+0x66>
     978:	687b      	ldr	r3, [r7, #4]
     97a:	781b      	ldrb	r3, [r3, #0]
     97c:	2b39      	cmp	r3, #57	; 0x39
     97e:	d9e4      	bls.n	94a <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
     980:	683b      	ldr	r3, [r7, #0]
     982:	2b00      	cmp	r3, #0
     984:	d002      	beq.n	98c <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     986:	683b      	ldr	r3, [r7, #0]
     988:	68fa      	ldr	r2, [r7, #12]
     98a:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     98c:	7dfb      	ldrb	r3, [r7, #23]
     98e:	2b00      	cmp	r3, #0
     990:	d002      	beq.n	998 <decstr_to_int+0x7e>
     992:	693b      	ldr	r3, [r7, #16]
     994:	425b      	negs	r3, r3
     996:	e000      	b.n	99a <decstr_to_int+0x80>
     998:	693b      	ldr	r3, [r7, #16]
}
     99a:	4618      	mov	r0, r3
     99c:	371c      	adds	r7, #28
     99e:	46bd      	mov	sp, r7
     9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     9a4:	4770      	bx	lr

000009a6 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     9a6:	b590      	push	{r4, r7, lr}
     9a8:	b091      	sub	sp, #68	; 0x44
     9aa:	af00      	add	r7, sp, #0
     9ac:	e9c7 0102 	strd	r0, r1, [r7, #8]
     9b0:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     9b2:	2300      	movs	r3, #0
     9b4:	63fb      	str	r3, [r7, #60]	; 0x3c
     9b6:	2300      	movs	r3, #0
     9b8:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     9ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     9be:	f7ff fe6b 	bl	698 <divu64_10>
     9c2:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     9c6:	68b9      	ldr	r1, [r7, #8]
     9c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     9ca:	4613      	mov	r3, r2
     9cc:	009b      	lsls	r3, r3, #2
     9ce:	4413      	add	r3, r2
     9d0:	005b      	lsls	r3, r3, #1
     9d2:	1acb      	subs	r3, r1, r3
     9d4:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     9d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     9d8:	1c5a      	adds	r2, r3, #1
     9da:	63fa      	str	r2, [r7, #60]	; 0x3c
     9dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     9de:	b2d2      	uxtb	r2, r2
     9e0:	3230      	adds	r2, #48	; 0x30
     9e2:	b2d2      	uxtb	r2, r2
     9e4:	f107 0140 	add.w	r1, r7, #64	; 0x40
     9e8:	440b      	add	r3, r1
     9ea:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     9ee:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     9f2:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     9f6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     9fa:	4323      	orrs	r3, r4
     9fc:	d1dd      	bne.n	9ba <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     9fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a00:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     a02:	687b      	ldr	r3, [r7, #4]
     a04:	2b00      	cmp	r3, #0
     a06:	d011      	beq.n	a2c <uint64_to_str+0x86>
    {
        while ( ix-- )
     a08:	e008      	b.n	a1c <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     a0a:	687b      	ldr	r3, [r7, #4]
     a0c:	1c5a      	adds	r2, r3, #1
     a0e:	607a      	str	r2, [r7, #4]
     a10:	f107 0110 	add.w	r1, r7, #16
     a14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     a16:	440a      	add	r2, r1
     a18:	7812      	ldrb	r2, [r2, #0]
     a1a:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
     a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a1e:	1e5a      	subs	r2, r3, #1
     a20:	63fa      	str	r2, [r7, #60]	; 0x3c
     a22:	2b00      	cmp	r3, #0
     a24:	d1f1      	bne.n	a0a <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     a26:	687b      	ldr	r3, [r7, #4]
     a28:	2200      	movs	r2, #0
     a2a:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     a2e:	4618      	mov	r0, r3
     a30:	3744      	adds	r7, #68	; 0x44
     a32:	46bd      	mov	sp, r7
     a34:	bd90      	pop	{r4, r7, pc}

00000a36 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     a36:	b4b0      	push	{r4, r5, r7}
     a38:	b08d      	sub	sp, #52	; 0x34
     a3a:	af00      	add	r7, sp, #0
     a3c:	e9c7 0102 	strd	r0, r1, [r7, #8]
     a40:	607a      	str	r2, [r7, #4]
     a42:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     a44:	2300      	movs	r3, #0
     a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     a48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     a4c:	4313      	orrs	r3, r2
     a4e:	d131      	bne.n	ab4 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a52:	1c5a      	adds	r2, r3, #1
     a54:	62fa      	str	r2, [r7, #44]	; 0x2c
     a56:	f107 0230 	add.w	r2, r7, #48	; 0x30
     a5a:	4413      	add	r3, r2
     a5c:	2230      	movs	r2, #48	; 0x30
     a5e:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     a62:	e027      	b.n	ab4 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     a64:	7a3b      	ldrb	r3, [r7, #8]
     a66:	f003 030f 	and.w	r3, r3, #15
     a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     a6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     a72:	2b09      	cmp	r3, #9
     a74:	d90a      	bls.n	a8c <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     a76:	78fb      	ldrb	r3, [r7, #3]
     a78:	2b00      	cmp	r3, #0
     a7a:	d001      	beq.n	a80 <uint64_to_hexstr+0x4a>
     a7c:	2227      	movs	r2, #39	; 0x27
     a7e:	e000      	b.n	a82 <uint64_to_hexstr+0x4c>
     a80:	2207      	movs	r2, #7
     a82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     a86:	4413      	add	r3, r2
     a88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a8e:	1c5a      	adds	r2, r3, #1
     a90:	62fa      	str	r2, [r7, #44]	; 0x2c
     a92:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     a96:	3230      	adds	r2, #48	; 0x30
     a98:	b2d2      	uxtb	r2, r2
     a9a:	f107 0130 	add.w	r1, r7, #48	; 0x30
     a9e:	440b      	add	r3, r1
     aa0:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     aa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     aa8:	0914      	lsrs	r4, r2, #4
     aaa:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     aae:	091d      	lsrs	r5, r3, #4
     ab0:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
     ab4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     ab8:	4313      	orrs	r3, r2
     aba:	d1d3      	bne.n	a64 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     abe:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     ac0:	687b      	ldr	r3, [r7, #4]
     ac2:	2b00      	cmp	r3, #0
     ac4:	d011      	beq.n	aea <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     ac6:	e008      	b.n	ada <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     ac8:	687b      	ldr	r3, [r7, #4]
     aca:	1c5a      	adds	r2, r3, #1
     acc:	607a      	str	r2, [r7, #4]
     ace:	f107 0110 	add.w	r1, r7, #16
     ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     ad4:	440a      	add	r2, r1
     ad6:	7812      	ldrb	r2, [r2, #0]
     ad8:	701a      	strb	r2, [r3, #0]
        while (ix--)
     ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     adc:	1e5a      	subs	r2, r3, #1
     ade:	62fa      	str	r2, [r7, #44]	; 0x2c
     ae0:	2b00      	cmp	r3, #0
     ae2:	d1f1      	bne.n	ac8 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     ae4:	687b      	ldr	r3, [r7, #4]
     ae6:	2200      	movs	r2, #0
     ae8:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     aec:	4618      	mov	r0, r3
     aee:	3734      	adds	r7, #52	; 0x34
     af0:	46bd      	mov	sp, r7
     af2:	bcb0      	pop	{r4, r5, r7}
     af4:	4770      	bx	lr

00000af6 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     af6:	b480      	push	{r7}
     af8:	b085      	sub	sp, #20
     afa:	af00      	add	r7, sp, #0
     afc:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     afe:	2300      	movs	r3, #0
     b00:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     b02:	687b      	ldr	r3, [r7, #4]
     b04:	2b00      	cmp	r3, #0
     b06:	d104      	bne.n	b12 <simple_strlen+0x1c>
    {
        return ui32RetVal;
     b08:	68fb      	ldr	r3, [r7, #12]
     b0a:	e009      	b.n	b20 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     b0c:	68fb      	ldr	r3, [r7, #12]
     b0e:	3301      	adds	r3, #1
     b10:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
     b12:	687b      	ldr	r3, [r7, #4]
     b14:	1c5a      	adds	r2, r3, #1
     b16:	607a      	str	r2, [r7, #4]
     b18:	781b      	ldrb	r3, [r3, #0]
     b1a:	2b00      	cmp	r3, #0
     b1c:	d1f6      	bne.n	b0c <simple_strlen+0x16>
    }
    return ui32RetVal;
     b1e:	68fb      	ldr	r3, [r7, #12]
}
     b20:	4618      	mov	r0, r3
     b22:	3714      	adds	r7, #20
     b24:	46bd      	mov	sp, r7
     b26:	f85d 7b04 	ldr.w	r7, [sp], #4
     b2a:	4770      	bx	lr

00000b2c <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     b2c:	b480      	push	{r7}
     b2e:	b087      	sub	sp, #28
     b30:	af00      	add	r7, sp, #0
     b32:	60f8      	str	r0, [r7, #12]
     b34:	460b      	mov	r3, r1
     b36:	607a      	str	r2, [r7, #4]
     b38:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     b3a:	2300      	movs	r3, #0
     b3c:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     b3e:	687b      	ldr	r3, [r7, #4]
     b40:	2b00      	cmp	r3, #0
     b42:	dc0c      	bgt.n	b5e <padbuffer+0x32>
    {
        return i32Cnt;
     b44:	697b      	ldr	r3, [r7, #20]
     b46:	e010      	b.n	b6a <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     b48:	68fb      	ldr	r3, [r7, #12]
     b4a:	2b00      	cmp	r3, #0
     b4c:	d004      	beq.n	b58 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     b4e:	68fb      	ldr	r3, [r7, #12]
     b50:	1c5a      	adds	r2, r3, #1
     b52:	60fa      	str	r2, [r7, #12]
     b54:	7afa      	ldrb	r2, [r7, #11]
     b56:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     b58:	697b      	ldr	r3, [r7, #20]
     b5a:	3301      	adds	r3, #1
     b5c:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
     b5e:	687b      	ldr	r3, [r7, #4]
     b60:	1e5a      	subs	r2, r3, #1
     b62:	607a      	str	r2, [r7, #4]
     b64:	2b00      	cmp	r3, #0
     b66:	d1ef      	bne.n	b48 <padbuffer+0x1c>
    }

    return i32Cnt;
     b68:	697b      	ldr	r3, [r7, #20]
}
     b6a:	4618      	mov	r0, r3
     b6c:	371c      	adds	r7, #28
     b6e:	46bd      	mov	sp, r7
     b70:	f85d 7b04 	ldr.w	r7, [sp], #4
     b74:	4770      	bx	lr
	...

00000b78 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     b78:	b590      	push	{r4, r7, lr}
     b7a:	b08f      	sub	sp, #60	; 0x3c
     b7c:	af00      	add	r7, sp, #0
     b7e:	60f8      	str	r0, [r7, #12]
     b80:	60b9      	str	r1, [r7, #8]
     b82:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
     b84:	68bb      	ldr	r3, [r7, #8]
     b86:	681b      	ldr	r3, [r3, #0]
     b88:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
     b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     b8c:	2b03      	cmp	r3, #3
     b8e:	dc02      	bgt.n	b96 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     b90:	f06f 0302 	mvn.w	r3, #2
     b94:	e0e7      	b.n	d66 <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
     b96:	edd7 7a03 	vldr	s15, [r7, #12]
     b9a:	eef5 7a40 	vcmp.f32	s15, #0.0
     b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     ba2:	d104      	bne.n	bae <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     ba4:	68bb      	ldr	r3, [r7, #8]
     ba6:	4a72      	ldr	r2, [pc, #456]	; (d70 <ftoa+0x1f8>)
     ba8:	601a      	str	r2, [r3, #0]
        return 3;
     baa:	2303      	movs	r3, #3
     bac:	e0db      	b.n	d66 <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
     bae:	68bb      	ldr	r3, [r7, #8]
     bb0:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
     bb2:	68fb      	ldr	r3, [r7, #12]
     bb4:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     bb6:	693b      	ldr	r3, [r7, #16]
     bb8:	15db      	asrs	r3, r3, #23
     bba:	b2db      	uxtb	r3, r3
     bbc:	3b7f      	subs	r3, #127	; 0x7f
     bbe:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     bc0:	693b      	ldr	r3, [r7, #16]
     bc2:	f3c3 0316 	ubfx	r3, r3, #0, #23
     bc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     bca:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
     bcc:	2300      	movs	r3, #0
     bce:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     bd0:	2300      	movs	r3, #0
     bd2:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     bd4:	69fb      	ldr	r3, [r7, #28]
     bd6:	2b1e      	cmp	r3, #30
     bd8:	dd02      	ble.n	be0 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     bda:	f06f 0301 	mvn.w	r3, #1
     bde:	e0c2      	b.n	d66 <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
     be0:	69fb      	ldr	r3, [r7, #28]
     be2:	f113 0f17 	cmn.w	r3, #23
     be6:	da02      	bge.n	bee <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     be8:	f04f 33ff 	mov.w	r3, #4294967295
     bec:	e0bb      	b.n	d66 <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
     bee:	69fb      	ldr	r3, [r7, #28]
     bf0:	2b16      	cmp	r3, #22
     bf2:	dd06      	ble.n	c02 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
     bf4:	69fb      	ldr	r3, [r7, #28]
     bf6:	3b17      	subs	r3, #23
     bf8:	69ba      	ldr	r2, [r7, #24]
     bfa:	fa02 f303 	lsl.w	r3, r2, r3
     bfe:	637b      	str	r3, [r7, #52]	; 0x34
     c00:	e01a      	b.n	c38 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     c02:	69fb      	ldr	r3, [r7, #28]
     c04:	2b00      	cmp	r3, #0
     c06:	db0f      	blt.n	c28 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
     c08:	69fb      	ldr	r3, [r7, #28]
     c0a:	f1c3 0317 	rsb	r3, r3, #23
     c0e:	69ba      	ldr	r2, [r7, #24]
     c10:	fa42 f303 	asr.w	r3, r2, r3
     c14:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
     c16:	69fb      	ldr	r3, [r7, #28]
     c18:	3301      	adds	r3, #1
     c1a:	69ba      	ldr	r2, [r7, #24]
     c1c:	fa02 f303 	lsl.w	r3, r2, r3
     c20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     c24:	633b      	str	r3, [r7, #48]	; 0x30
     c26:	e007      	b.n	c38 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
     c28:	69bb      	ldr	r3, [r7, #24]
     c2a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     c2e:	69fb      	ldr	r3, [r7, #28]
     c30:	43db      	mvns	r3, r3
     c32:	fa42 f303 	asr.w	r3, r2, r3
     c36:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     c38:	693b      	ldr	r3, [r7, #16]
     c3a:	2b00      	cmp	r3, #0
     c3c:	da04      	bge.n	c48 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     c3e:	68bb      	ldr	r3, [r7, #8]
     c40:	1c5a      	adds	r2, r3, #1
     c42:	60ba      	str	r2, [r7, #8]
     c44:	222d      	movs	r2, #45	; 0x2d
     c46:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c4a:	2b00      	cmp	r3, #0
     c4c:	d105      	bne.n	c5a <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     c4e:	68bb      	ldr	r3, [r7, #8]
     c50:	1c5a      	adds	r2, r3, #1
     c52:	60ba      	str	r2, [r7, #8]
     c54:	2230      	movs	r2, #48	; 0x30
     c56:	701a      	strb	r2, [r3, #0]
     c58:	e021      	b.n	c9e <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c5c:	2b00      	cmp	r3, #0
     c5e:	dd08      	ble.n	c72 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c62:	ea4f 74e3 	mov.w	r4, r3, asr #31
     c66:	68ba      	ldr	r2, [r7, #8]
     c68:	4618      	mov	r0, r3
     c6a:	4621      	mov	r1, r4
     c6c:	f7ff fe9b 	bl	9a6 <uint64_to_str>
     c70:	e011      	b.n	c96 <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     c72:	68bb      	ldr	r3, [r7, #8]
     c74:	1c5a      	adds	r2, r3, #1
     c76:	60ba      	str	r2, [r7, #8]
     c78:	222d      	movs	r2, #45	; 0x2d
     c7a:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c7e:	425b      	negs	r3, r3
     c80:	ea4f 74e3 	mov.w	r4, r3, asr #31
     c84:	68ba      	ldr	r2, [r7, #8]
     c86:	4618      	mov	r0, r3
     c88:	4621      	mov	r1, r4
     c8a:	f7ff fe8c 	bl	9a6 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     c8e:	e002      	b.n	c96 <ftoa+0x11e>
        {
            pcBuf++;
     c90:	68bb      	ldr	r3, [r7, #8]
     c92:	3301      	adds	r3, #1
     c94:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
     c96:	68bb      	ldr	r3, [r7, #8]
     c98:	781b      	ldrb	r3, [r3, #0]
     c9a:	2b00      	cmp	r3, #0
     c9c:	d1f8      	bne.n	c90 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     c9e:	68bb      	ldr	r3, [r7, #8]
     ca0:	1c5a      	adds	r2, r3, #1
     ca2:	60ba      	str	r2, [r7, #8]
     ca4:	222e      	movs	r2, #46	; 0x2e
     ca6:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     caa:	2b00      	cmp	r3, #0
     cac:	d105      	bne.n	cba <ftoa+0x142>
    {
        *pcBuf++ = '0';
     cae:	68bb      	ldr	r3, [r7, #8]
     cb0:	1c5a      	adds	r2, r3, #1
     cb2:	60ba      	str	r2, [r7, #8]
     cb4:	2230      	movs	r2, #48	; 0x30
     cb6:	701a      	strb	r2, [r3, #0]
     cb8:	e04f      	b.n	d5a <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     cba:	68ba      	ldr	r2, [r7, #8]
     cbc:	6a3b      	ldr	r3, [r7, #32]
     cbe:	1ad3      	subs	r3, r2, r3
     cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     cc2:	1ad3      	subs	r3, r2, r3
     cc4:	3b01      	subs	r3, #1
     cc6:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     cc8:	697a      	ldr	r2, [r7, #20]
     cca:	687b      	ldr	r3, [r7, #4]
     ccc:	4293      	cmp	r3, r2
     cce:	bfa8      	it	ge
     cd0:	4613      	movge	r3, r2
     cd2:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
     cd4:	2300      	movs	r3, #0
     cd6:	62bb      	str	r3, [r7, #40]	; 0x28
     cd8:	e015      	b.n	d06 <ftoa+0x18e>
        {
            i32FracPart *= 10;
     cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     cdc:	4613      	mov	r3, r2
     cde:	009b      	lsls	r3, r3, #2
     ce0:	4413      	add	r3, r2
     ce2:	005b      	lsls	r3, r3, #1
     ce4:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     ce6:	68bb      	ldr	r3, [r7, #8]
     ce8:	1c5a      	adds	r2, r3, #1
     cea:	60ba      	str	r2, [r7, #8]
     cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     cee:	1612      	asrs	r2, r2, #24
     cf0:	b2d2      	uxtb	r2, r2
     cf2:	3230      	adds	r2, #48	; 0x30
     cf4:	b2d2      	uxtb	r2, r2
     cf6:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     cfa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     cfe:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
     d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
     d02:	3301      	adds	r3, #1
     d04:	62bb      	str	r3, [r7, #40]	; 0x28
     d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
     d08:	697b      	ldr	r3, [r7, #20]
     d0a:	429a      	cmp	r2, r3
     d0c:	dbe5      	blt.n	cda <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
     d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     d10:	4613      	mov	r3, r2
     d12:	009b      	lsls	r3, r3, #2
     d14:	4413      	add	r3, r2
     d16:	005b      	lsls	r3, r3, #1
     d18:	161b      	asrs	r3, r3, #24
     d1a:	2b04      	cmp	r3, #4
     d1c:	dd1d      	ble.n	d5a <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
     d1e:	68bb      	ldr	r3, [r7, #8]
     d20:	3b01      	subs	r3, #1
     d22:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     d24:	e015      	b.n	d52 <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
     d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d28:	781b      	ldrb	r3, [r3, #0]
     d2a:	2b2e      	cmp	r3, #46	; 0x2e
     d2c:	d00e      	beq.n	d4c <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
     d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d30:	781b      	ldrb	r3, [r3, #0]
     d32:	2b39      	cmp	r3, #57	; 0x39
     d34:	d103      	bne.n	d3e <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
     d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d38:	2230      	movs	r2, #48	; 0x30
     d3a:	701a      	strb	r2, [r3, #0]
     d3c:	e006      	b.n	d4c <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
     d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d40:	781b      	ldrb	r3, [r3, #0]
     d42:	3301      	adds	r3, #1
     d44:	b2da      	uxtb	r2, r3
     d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d48:	701a      	strb	r2, [r3, #0]
                    break;
     d4a:	e006      	b.n	d5a <ftoa+0x1e2>
                }
                pcBuftmp--;
     d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d4e:	3b01      	subs	r3, #1
     d50:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     d54:	6a3b      	ldr	r3, [r7, #32]
     d56:	429a      	cmp	r2, r3
     d58:	d2e5      	bcs.n	d26 <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	2200      	movs	r2, #0
     d5e:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     d60:	68ba      	ldr	r2, [r7, #8]
     d62:	6a3b      	ldr	r3, [r7, #32]
     d64:	1ad3      	subs	r3, r2, r3
} // ftoa()
     d66:	4618      	mov	r0, r3
     d68:	373c      	adds	r7, #60	; 0x3c
     d6a:	46bd      	mov	sp, r7
     d6c:	bd90      	pop	{r4, r7, pc}
     d6e:	bf00      	nop
     d70:	00302e30 	.word	0x00302e30

00000d74 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     d74:	b590      	push	{r4, r7, lr}
     d76:	b095      	sub	sp, #84	; 0x54
     d78:	af00      	add	r7, sp, #0
     d7a:	60f8      	str	r0, [r7, #12]
     d7c:	60b9      	str	r1, [r7, #8]
     d7e:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     d80:	2300      	movs	r3, #0
     d82:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     d84:	2300      	movs	r3, #0
     d86:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     d88:	e2e3      	b.n	1352 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     d8a:	2306      	movs	r3, #6
     d8c:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     d8e:	68bb      	ldr	r3, [r7, #8]
     d90:	781b      	ldrb	r3, [r3, #0]
     d92:	2b25      	cmp	r3, #37	; 0x25
     d94:	d01f      	beq.n	dd6 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     d96:	68fb      	ldr	r3, [r7, #12]
     d98:	2b00      	cmp	r3, #0
     d9a:	d015      	beq.n	dc8 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     d9c:	68bb      	ldr	r3, [r7, #8]
     d9e:	781b      	ldrb	r3, [r3, #0]
     da0:	2b0a      	cmp	r3, #10
     da2:	d10b      	bne.n	dbc <am_util_stdio_vsprintf+0x48>
     da4:	4bb1      	ldr	r3, [pc, #708]	; (106c <am_util_stdio_vsprintf+0x2f8>)
     da6:	781b      	ldrb	r3, [r3, #0]
     da8:	2b00      	cmp	r3, #0
     daa:	d007      	beq.n	dbc <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     dac:	68fb      	ldr	r3, [r7, #12]
     dae:	1c5a      	adds	r2, r3, #1
     db0:	60fa      	str	r2, [r7, #12]
     db2:	220d      	movs	r2, #13
     db4:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     db8:	3301      	adds	r3, #1
     dba:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     dbc:	68fb      	ldr	r3, [r7, #12]
     dbe:	1c5a      	adds	r2, r3, #1
     dc0:	60fa      	str	r2, [r7, #12]
     dc2:	68ba      	ldr	r2, [r7, #8]
     dc4:	7812      	ldrb	r2, [r2, #0]
     dc6:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     dc8:	68bb      	ldr	r3, [r7, #8]
     dca:	3301      	adds	r3, #1
     dcc:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     dd0:	3301      	adds	r3, #1
     dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     dd4:	e2bd      	b.n	1352 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     dd6:	68bb      	ldr	r3, [r7, #8]
     dd8:	3301      	adds	r3, #1
     dda:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     ddc:	2300      	movs	r3, #0
     dde:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     de2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     de6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     dea:	2320      	movs	r3, #32
     dec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     df0:	68bb      	ldr	r3, [r7, #8]
     df2:	781b      	ldrb	r3, [r3, #0]
     df4:	2b30      	cmp	r3, #48	; 0x30
     df6:	d105      	bne.n	e04 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     df8:	2330      	movs	r3, #48	; 0x30
     dfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     dfe:	68bb      	ldr	r3, [r7, #8]
     e00:	3301      	adds	r3, #1
     e02:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     e04:	f107 0310 	add.w	r3, r7, #16
     e08:	4619      	mov	r1, r3
     e0a:	68b8      	ldr	r0, [r7, #8]
     e0c:	f7ff fd85 	bl	91a <decstr_to_int>
     e10:	4603      	mov	r3, r0
     e12:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     e14:	693b      	ldr	r3, [r7, #16]
     e16:	68ba      	ldr	r2, [r7, #8]
     e18:	4413      	add	r3, r2
     e1a:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     e1c:	68bb      	ldr	r3, [r7, #8]
     e1e:	781b      	ldrb	r3, [r3, #0]
     e20:	2b73      	cmp	r3, #115	; 0x73
     e22:	d005      	beq.n	e30 <am_util_stdio_vsprintf+0xbc>
     e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e26:	2b00      	cmp	r3, #0
     e28:	da02      	bge.n	e30 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e2c:	425b      	negs	r3, r3
     e2e:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     e30:	68bb      	ldr	r3, [r7, #8]
     e32:	781b      	ldrb	r3, [r3, #0]
     e34:	2b2e      	cmp	r3, #46	; 0x2e
     e36:	d10e      	bne.n	e56 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     e38:	68bb      	ldr	r3, [r7, #8]
     e3a:	3301      	adds	r3, #1
     e3c:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     e3e:	f107 0310 	add.w	r3, r7, #16
     e42:	4619      	mov	r1, r3
     e44:	68b8      	ldr	r0, [r7, #8]
     e46:	f7ff fd68 	bl	91a <decstr_to_int>
     e4a:	4603      	mov	r3, r0
     e4c:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     e4e:	693b      	ldr	r3, [r7, #16]
     e50:	68ba      	ldr	r2, [r7, #8]
     e52:	4413      	add	r3, r2
     e54:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     e56:	68bb      	ldr	r3, [r7, #8]
     e58:	781b      	ldrb	r3, [r3, #0]
     e5a:	2b6c      	cmp	r3, #108	; 0x6c
     e5c:	d10c      	bne.n	e78 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     e5e:	68bb      	ldr	r3, [r7, #8]
     e60:	3301      	adds	r3, #1
     e62:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     e64:	68bb      	ldr	r3, [r7, #8]
     e66:	781b      	ldrb	r3, [r3, #0]
     e68:	2b6c      	cmp	r3, #108	; 0x6c
     e6a:	d105      	bne.n	e78 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     e6c:	68bb      	ldr	r3, [r7, #8]
     e6e:	3301      	adds	r3, #1
     e70:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     e72:	2301      	movs	r3, #1
     e74:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     e78:	68bb      	ldr	r3, [r7, #8]
     e7a:	781b      	ldrb	r3, [r3, #0]
     e7c:	3b46      	subs	r3, #70	; 0x46
     e7e:	2b32      	cmp	r3, #50	; 0x32
     e80:	f200 8254 	bhi.w	132c <am_util_stdio_vsprintf+0x5b8>
     e84:	a201      	add	r2, pc, #4	; (adr r2, e8c <am_util_stdio_vsprintf+0x118>)
     e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     e8a:	bf00      	nop
     e8c:	000012b7 	.word	0x000012b7
     e90:	0000132d 	.word	0x0000132d
     e94:	0000132d 	.word	0x0000132d
     e98:	0000132d 	.word	0x0000132d
     e9c:	0000132d 	.word	0x0000132d
     ea0:	0000132d 	.word	0x0000132d
     ea4:	0000132d 	.word	0x0000132d
     ea8:	0000132d 	.word	0x0000132d
     eac:	0000132d 	.word	0x0000132d
     eb0:	0000132d 	.word	0x0000132d
     eb4:	0000132d 	.word	0x0000132d
     eb8:	0000132d 	.word	0x0000132d
     ebc:	0000132d 	.word	0x0000132d
     ec0:	0000132d 	.word	0x0000132d
     ec4:	0000132d 	.word	0x0000132d
     ec8:	0000132d 	.word	0x0000132d
     ecc:	0000132d 	.word	0x0000132d
     ed0:	0000132d 	.word	0x0000132d
     ed4:	00001053 	.word	0x00001053
     ed8:	0000132d 	.word	0x0000132d
     edc:	0000132d 	.word	0x0000132d
     ee0:	0000132d 	.word	0x0000132d
     ee4:	0000132d 	.word	0x0000132d
     ee8:	0000132d 	.word	0x0000132d
     eec:	0000132d 	.word	0x0000132d
     ef0:	0000132d 	.word	0x0000132d
     ef4:	0000132d 	.word	0x0000132d
     ef8:	0000132d 	.word	0x0000132d
     efc:	0000132d 	.word	0x0000132d
     f00:	00000f59 	.word	0x00000f59
     f04:	0000117f 	.word	0x0000117f
     f08:	0000132d 	.word	0x0000132d
     f0c:	000012b7 	.word	0x000012b7
     f10:	0000132d 	.word	0x0000132d
     f14:	0000132d 	.word	0x0000132d
     f18:	0000117f 	.word	0x0000117f
     f1c:	0000132d 	.word	0x0000132d
     f20:	0000132d 	.word	0x0000132d
     f24:	0000132d 	.word	0x0000132d
     f28:	0000132d 	.word	0x0000132d
     f2c:	0000132d 	.word	0x0000132d
     f30:	0000132d 	.word	0x0000132d
     f34:	0000132d 	.word	0x0000132d
     f38:	0000132d 	.word	0x0000132d
     f3c:	0000132d 	.word	0x0000132d
     f40:	00000f7f 	.word	0x00000f7f
     f44:	0000132d 	.word	0x0000132d
     f48:	000010ed 	.word	0x000010ed
     f4c:	0000132d 	.word	0x0000132d
     f50:	0000132d 	.word	0x0000132d
     f54:	0000104d 	.word	0x0000104d
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
     f58:	687b      	ldr	r3, [r7, #4]
     f5a:	1d1a      	adds	r2, r3, #4
     f5c:	607a      	str	r2, [r7, #4]
     f5e:	681b      	ldr	r3, [r3, #0]
     f60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
     f64:	68fb      	ldr	r3, [r7, #12]
     f66:	2b00      	cmp	r3, #0
     f68:	d005      	beq.n	f76 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
     f6a:	68fb      	ldr	r3, [r7, #12]
     f6c:	1c5a      	adds	r2, r3, #1
     f6e:	60fa      	str	r2, [r7, #12]
     f70:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
     f74:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
     f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f78:	3301      	adds	r3, #1
     f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     f7c:	e1e6      	b.n	134c <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
     f7e:	687b      	ldr	r3, [r7, #4]
     f80:	1d1a      	adds	r2, r3, #4
     f82:	607a      	str	r2, [r7, #4]
     f84:	681b      	ldr	r3, [r3, #0]
     f86:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
     f88:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
     f8a:	f7ff fdb4 	bl	af6 <simple_strlen>
     f8e:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
     f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f92:	2b00      	cmp	r3, #0
     f94:	dd2e      	ble.n	ff4 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
     f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     f9a:	429a      	cmp	r2, r3
     f9c:	d22a      	bcs.n	ff4 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     f9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
     fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     fa2:	1ad3      	subs	r3, r2, r3
     fa4:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     fa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     faa:	6bba      	ldr	r2, [r7, #56]	; 0x38
     fac:	4619      	mov	r1, r3
     fae:	68f8      	ldr	r0, [r7, #12]
     fb0:	f7ff fdbc 	bl	b2c <padbuffer>
     fb4:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     fb6:	68fb      	ldr	r3, [r7, #12]
     fb8:	2b00      	cmp	r3, #0
     fba:	d001      	beq.n	fc0 <am_util_stdio_vsprintf+0x24c>
     fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fbe:	e000      	b.n	fc2 <am_util_stdio_vsprintf+0x24e>
     fc0:	2300      	movs	r3, #0
     fc2:	68fa      	ldr	r2, [r7, #12]
     fc4:	4413      	add	r3, r2
     fc6:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     fcc:	4413      	add	r3, r2
     fce:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     fd0:	2300      	movs	r3, #0
     fd2:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
     fd4:	e00e      	b.n	ff4 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
     fd6:	68fb      	ldr	r3, [r7, #12]
     fd8:	2b00      	cmp	r3, #0
     fda:	d005      	beq.n	fe8 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
     fdc:	68fb      	ldr	r3, [r7, #12]
     fde:	1c5a      	adds	r2, r3, #1
     fe0:	60fa      	str	r2, [r7, #12]
     fe2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     fe4:	7812      	ldrb	r2, [r2, #0]
     fe6:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
     fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     fea:	3301      	adds	r3, #1
     fec:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
     fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ff0:	3301      	adds	r3, #1
     ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
     ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     ff6:	781b      	ldrb	r3, [r3, #0]
     ff8:	2b00      	cmp	r3, #0
     ffa:	d1ec      	bne.n	fd6 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
     ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ffe:	2b00      	cmp	r3, #0
    1000:	f000 81a1 	beq.w	1346 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    1004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1006:	425b      	negs	r3, r3
    1008:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    100a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    100c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    100e:	429a      	cmp	r2, r3
    1010:	f080 8199 	bcs.w	1346 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1014:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1018:	1ad3      	subs	r3, r2, r3
    101a:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    101c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1020:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1022:	4619      	mov	r1, r3
    1024:	68f8      	ldr	r0, [r7, #12]
    1026:	f7ff fd81 	bl	b2c <padbuffer>
    102a:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    102c:	68fb      	ldr	r3, [r7, #12]
    102e:	2b00      	cmp	r3, #0
    1030:	d001      	beq.n	1036 <am_util_stdio_vsprintf+0x2c2>
    1032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1034:	e000      	b.n	1038 <am_util_stdio_vsprintf+0x2c4>
    1036:	2300      	movs	r3, #0
    1038:	68fa      	ldr	r2, [r7, #12]
    103a:	4413      	add	r3, r2
    103c:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    103e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1040:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1042:	4413      	add	r3, r2
    1044:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1046:	2300      	movs	r3, #0
    1048:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    104a:	e17c      	b.n	1346 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    104c:	2301      	movs	r3, #1
    104e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1052:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1056:	2b00      	cmp	r3, #0
    1058:	d00a      	beq.n	1070 <am_util_stdio_vsprintf+0x2fc>
    105a:	687b      	ldr	r3, [r7, #4]
    105c:	3307      	adds	r3, #7
    105e:	f023 0307 	bic.w	r3, r3, #7
    1062:	f103 0208 	add.w	r2, r3, #8
    1066:	607a      	str	r2, [r7, #4]
    1068:	cb18      	ldmia	r3, {r3, r4}
    106a:	e007      	b.n	107c <am_util_stdio_vsprintf+0x308>
    106c:	10001120 	.word	0x10001120
                                      va_arg(pArgs, uint32_t);
    1070:	687b      	ldr	r3, [r7, #4]
    1072:	1d1a      	adds	r2, r3, #4
    1074:	607a      	str	r2, [r7, #4]
    1076:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1078:	f04f 0400 	mov.w	r4, #0
    107c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    1080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1082:	2b00      	cmp	r3, #0
    1084:	d01e      	beq.n	10c4 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    1086:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    108a:	f7ff fc22 	bl	8d2 <ndigits_in_hex>
    108e:	4602      	mov	r2, r0
    1090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1092:	1a9b      	subs	r3, r3, r2
    1094:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1096:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    109a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    109c:	4619      	mov	r1, r3
    109e:	68f8      	ldr	r0, [r7, #12]
    10a0:	f7ff fd44 	bl	b2c <padbuffer>
    10a4:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    10a6:	68fb      	ldr	r3, [r7, #12]
    10a8:	2b00      	cmp	r3, #0
    10aa:	d001      	beq.n	10b0 <am_util_stdio_vsprintf+0x33c>
    10ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10ae:	e000      	b.n	10b2 <am_util_stdio_vsprintf+0x33e>
    10b0:	2300      	movs	r3, #0
    10b2:	68fa      	ldr	r2, [r7, #12]
    10b4:	4413      	add	r3, r2
    10b6:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    10b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10bc:	4413      	add	r3, r2
    10be:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    10c0:	2300      	movs	r3, #0
    10c2:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    10c4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    10c8:	68fa      	ldr	r2, [r7, #12]
    10ca:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    10ce:	f7ff fcb2 	bl	a36 <uint64_to_hexstr>
    10d2:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    10d4:	68fb      	ldr	r3, [r7, #12]
    10d6:	2b00      	cmp	r3, #0
    10d8:	d003      	beq.n	10e2 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    10da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10dc:	68fa      	ldr	r2, [r7, #12]
    10de:	4413      	add	r3, r2
    10e0:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    10e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10e6:	4413      	add	r3, r2
    10e8:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    10ea:	e12f      	b.n	134c <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    10ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    10f0:	2b00      	cmp	r3, #0
    10f2:	d008      	beq.n	1106 <am_util_stdio_vsprintf+0x392>
    10f4:	687b      	ldr	r3, [r7, #4]
    10f6:	3307      	adds	r3, #7
    10f8:	f023 0307 	bic.w	r3, r3, #7
    10fc:	f103 0208 	add.w	r2, r3, #8
    1100:	607a      	str	r2, [r7, #4]
    1102:	cb18      	ldmia	r3, {r3, r4}
    1104:	e005      	b.n	1112 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    1106:	687b      	ldr	r3, [r7, #4]
    1108:	1d1a      	adds	r2, r3, #4
    110a:	607a      	str	r2, [r7, #4]
    110c:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    110e:	f04f 0400 	mov.w	r4, #0
    1112:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    1116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1118:	2b00      	cmp	r3, #0
    111a:	d01e      	beq.n	115a <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    111c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1120:	f7ff fb99 	bl	856 <ndigits_in_u64>
    1124:	4602      	mov	r2, r0
    1126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1128:	1a9b      	subs	r3, r3, r2
    112a:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    112c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1130:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1132:	4619      	mov	r1, r3
    1134:	68f8      	ldr	r0, [r7, #12]
    1136:	f7ff fcf9 	bl	b2c <padbuffer>
    113a:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    113c:	68fb      	ldr	r3, [r7, #12]
    113e:	2b00      	cmp	r3, #0
    1140:	d001      	beq.n	1146 <am_util_stdio_vsprintf+0x3d2>
    1142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1144:	e000      	b.n	1148 <am_util_stdio_vsprintf+0x3d4>
    1146:	2300      	movs	r3, #0
    1148:	68fa      	ldr	r2, [r7, #12]
    114a:	4413      	add	r3, r2
    114c:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    114e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1150:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1152:	4413      	add	r3, r2
    1154:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1156:	2300      	movs	r3, #0
    1158:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    115a:	68fa      	ldr	r2, [r7, #12]
    115c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1160:	f7ff fc21 	bl	9a6 <uint64_to_str>
    1164:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1166:	68fb      	ldr	r3, [r7, #12]
    1168:	2b00      	cmp	r3, #0
    116a:	d003      	beq.n	1174 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    116c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    116e:	68fa      	ldr	r2, [r7, #12]
    1170:	4413      	add	r3, r2
    1172:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1176:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1178:	4413      	add	r3, r2
    117a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    117c:	e0e6      	b.n	134c <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    117e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1182:	2b00      	cmp	r3, #0
    1184:	d008      	beq.n	1198 <am_util_stdio_vsprintf+0x424>
    1186:	687b      	ldr	r3, [r7, #4]
    1188:	3307      	adds	r3, #7
    118a:	f023 0307 	bic.w	r3, r3, #7
    118e:	f103 0208 	add.w	r2, r3, #8
    1192:	607a      	str	r2, [r7, #4]
    1194:	cb18      	ldmia	r3, {r3, r4}
    1196:	e005      	b.n	11a4 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    1198:	687b      	ldr	r3, [r7, #4]
    119a:	1d1a      	adds	r2, r3, #4
    119c:	607a      	str	r2, [r7, #4]
    119e:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    11a0:	ea4f 74e3 	mov.w	r4, r3, asr #31
    11a4:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    11a8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    11ac:	2b00      	cmp	r3, #0
    11ae:	f174 0300 	sbcs.w	r3, r4, #0
    11b2:	da0a      	bge.n	11ca <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    11b4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    11b8:	425b      	negs	r3, r3
    11ba:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    11be:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    11c2:	2301      	movs	r3, #1
    11c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    11c8:	e006      	b.n	11d8 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    11ca:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    11ce:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    11d2:	2300      	movs	r3, #0
    11d4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    11d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11da:	2b00      	cmp	r3, #0
    11dc:	d04a      	beq.n	1274 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    11de:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    11e2:	4618      	mov	r0, r3
    11e4:	4621      	mov	r1, r4
    11e6:	f7ff fb57 	bl	898 <ndigits_in_i64>
    11ea:	4602      	mov	r2, r0
    11ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11ee:	1a9b      	subs	r3, r3, r2
    11f0:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    11f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    11f6:	2b00      	cmp	r3, #0
    11f8:	d011      	beq.n	121e <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    11fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11fc:	3b01      	subs	r3, #1
    11fe:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    1200:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1204:	2b30      	cmp	r3, #48	; 0x30
    1206:	d10a      	bne.n	121e <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    1208:	68fb      	ldr	r3, [r7, #12]
    120a:	2b00      	cmp	r3, #0
    120c:	d004      	beq.n	1218 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    120e:	68fb      	ldr	r3, [r7, #12]
    1210:	1c5a      	adds	r2, r3, #1
    1212:	60fa      	str	r2, [r7, #12]
    1214:	222d      	movs	r2, #45	; 0x2d
    1216:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    1218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    121a:	3301      	adds	r3, #1
    121c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    121e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1222:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1224:	4619      	mov	r1, r3
    1226:	68f8      	ldr	r0, [r7, #12]
    1228:	f7ff fc80 	bl	b2c <padbuffer>
    122c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    122e:	68fb      	ldr	r3, [r7, #12]
    1230:	2b00      	cmp	r3, #0
    1232:	d001      	beq.n	1238 <am_util_stdio_vsprintf+0x4c4>
    1234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1236:	e000      	b.n	123a <am_util_stdio_vsprintf+0x4c6>
    1238:	2300      	movs	r3, #0
    123a:	68fa      	ldr	r2, [r7, #12]
    123c:	4413      	add	r3, r2
    123e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1242:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1244:	4413      	add	r3, r2
    1246:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1248:	2300      	movs	r3, #0
    124a:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    124c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1250:	2b00      	cmp	r3, #0
    1252:	d01e      	beq.n	1292 <am_util_stdio_vsprintf+0x51e>
    1254:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1258:	2b20      	cmp	r3, #32
    125a:	d11a      	bne.n	1292 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    125c:	68fb      	ldr	r3, [r7, #12]
    125e:	2b00      	cmp	r3, #0
    1260:	d004      	beq.n	126c <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    1262:	68fb      	ldr	r3, [r7, #12]
    1264:	1c5a      	adds	r2, r3, #1
    1266:	60fa      	str	r2, [r7, #12]
    1268:	222d      	movs	r2, #45	; 0x2d
    126a:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    126c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    126e:	3301      	adds	r3, #1
    1270:	63fb      	str	r3, [r7, #60]	; 0x3c
    1272:	e00e      	b.n	1292 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    1274:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1278:	2b00      	cmp	r3, #0
    127a:	d00a      	beq.n	1292 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    127c:	68fb      	ldr	r3, [r7, #12]
    127e:	2b00      	cmp	r3, #0
    1280:	d004      	beq.n	128c <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    1282:	68fb      	ldr	r3, [r7, #12]
    1284:	1c5a      	adds	r2, r3, #1
    1286:	60fa      	str	r2, [r7, #12]
    1288:	222d      	movs	r2, #45	; 0x2d
    128a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    128c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    128e:	3301      	adds	r3, #1
    1290:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1292:	68fa      	ldr	r2, [r7, #12]
    1294:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1298:	f7ff fb85 	bl	9a6 <uint64_to_str>
    129c:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    129e:	68fb      	ldr	r3, [r7, #12]
    12a0:	2b00      	cmp	r3, #0
    12a2:	d003      	beq.n	12ac <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    12a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12a6:	68fa      	ldr	r2, [r7, #12]
    12a8:	4413      	add	r3, r2
    12aa:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    12ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    12b0:	4413      	add	r3, r2
    12b2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    12b4:	e04a      	b.n	134c <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    12b6:	68fb      	ldr	r3, [r7, #12]
    12b8:	2b00      	cmp	r3, #0
    12ba:	d046      	beq.n	134a <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    12bc:	687b      	ldr	r3, [r7, #4]
    12be:	3307      	adds	r3, #7
    12c0:	f023 0307 	bic.w	r3, r3, #7
    12c4:	f103 0208 	add.w	r2, r3, #8
    12c8:	607a      	str	r2, [r7, #4]
    12ca:	cb18      	ldmia	r3, {r3, r4}
    12cc:	4618      	mov	r0, r3
    12ce:	4621      	mov	r1, r4
    12d0:	f7fe fef6 	bl	c0 <__aeabi_d2f>
    12d4:	4603      	mov	r3, r0
    12d6:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    12d8:	68fb      	ldr	r3, [r7, #12]
    12da:	2214      	movs	r2, #20
    12dc:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    12de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    12e0:	68f9      	ldr	r1, [r7, #12]
    12e2:	6978      	ldr	r0, [r7, #20]
    12e4:	f7ff fc48 	bl	b78 <ftoa>
    12e8:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    12ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12ec:	2b00      	cmp	r3, #0
    12ee:	da14      	bge.n	131a <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    12f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12f2:	f1b3 3fff 	cmp.w	r3, #4294967295
    12f6:	d102      	bne.n	12fe <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    12f8:	4b1e      	ldr	r3, [pc, #120]	; (1374 <am_util_stdio_vsprintf+0x600>)
    12fa:	62bb      	str	r3, [r7, #40]	; 0x28
    12fc:	e008      	b.n	1310 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    12fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1300:	f113 0f02 	cmn.w	r3, #2
    1304:	d102      	bne.n	130c <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    1306:	4b1c      	ldr	r3, [pc, #112]	; (1378 <am_util_stdio_vsprintf+0x604>)
    1308:	62bb      	str	r3, [r7, #40]	; 0x28
    130a:	e001      	b.n	1310 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    130c:	4b1b      	ldr	r3, [pc, #108]	; (137c <am_util_stdio_vsprintf+0x608>)
    130e:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    1310:	68fb      	ldr	r3, [r7, #12]
    1312:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1314:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    1316:	2303      	movs	r3, #3
    1318:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    131a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    131c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    131e:	4413      	add	r3, r2
    1320:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    1322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1324:	68fa      	ldr	r2, [r7, #12]
    1326:	4413      	add	r3, r2
    1328:	60fb      	str	r3, [r7, #12]
                }
                break;
    132a:	e00e      	b.n	134a <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    132c:	68fb      	ldr	r3, [r7, #12]
    132e:	2b00      	cmp	r3, #0
    1330:	d005      	beq.n	133e <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    1332:	68fb      	ldr	r3, [r7, #12]
    1334:	1c5a      	adds	r2, r3, #1
    1336:	60fa      	str	r2, [r7, #12]
    1338:	68ba      	ldr	r2, [r7, #8]
    133a:	7812      	ldrb	r2, [r2, #0]
    133c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    133e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1340:	3301      	adds	r3, #1
    1342:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1344:	e002      	b.n	134c <am_util_stdio_vsprintf+0x5d8>
                break;
    1346:	bf00      	nop
    1348:	e000      	b.n	134c <am_util_stdio_vsprintf+0x5d8>
                break;
    134a:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    134c:	68bb      	ldr	r3, [r7, #8]
    134e:	3301      	adds	r3, #1
    1350:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    1352:	68bb      	ldr	r3, [r7, #8]
    1354:	781b      	ldrb	r3, [r3, #0]
    1356:	2b00      	cmp	r3, #0
    1358:	f47f ad17 	bne.w	d8a <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    135c:	68fb      	ldr	r3, [r7, #12]
    135e:	2b00      	cmp	r3, #0
    1360:	d002      	beq.n	1368 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    1362:	68fb      	ldr	r3, [r7, #12]
    1364:	2200      	movs	r2, #0
    1366:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    1368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    136a:	4618      	mov	r0, r3
    136c:	3754      	adds	r7, #84	; 0x54
    136e:	46bd      	mov	sp, r7
    1370:	bd90      	pop	{r4, r7, pc}
    1372:	bf00      	nop
    1374:	00302e30 	.word	0x00302e30
    1378:	00232e23 	.word	0x00232e23
    137c:	003f2e3f 	.word	0x003f2e3f

00001380 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    1380:	b40f      	push	{r0, r1, r2, r3}
    1382:	b580      	push	{r7, lr}
    1384:	b082      	sub	sp, #8
    1386:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    1388:	f107 0314 	add.w	r3, r7, #20
    138c:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    138e:	683a      	ldr	r2, [r7, #0]
    1390:	6939      	ldr	r1, [r7, #16]
    1392:	4808      	ldr	r0, [pc, #32]	; (13b4 <am_util_stdio_printf+0x34>)
    1394:	f7ff fcee 	bl	d74 <am_util_stdio_vsprintf>
    1398:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    139a:	4b07      	ldr	r3, [pc, #28]	; (13b8 <am_util_stdio_printf+0x38>)
    139c:	681b      	ldr	r3, [r3, #0]
    139e:	4805      	ldr	r0, [pc, #20]	; (13b4 <am_util_stdio_printf+0x34>)
    13a0:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    13a2:	687b      	ldr	r3, [r7, #4]
}
    13a4:	4618      	mov	r0, r3
    13a6:	3708      	adds	r7, #8
    13a8:	46bd      	mov	sp, r7
    13aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    13ae:	b004      	add	sp, #16
    13b0:	4770      	bx	lr
    13b2:	bf00      	nop
    13b4:	10001020 	.word	0x10001020
    13b8:	1000112c 	.word	0x1000112c

000013bc <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    13bc:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_init();
    13be:	f000 fbbf 	bl	1b40 <am_hal_pwrctrl_bucks_init>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    13c2:	f000 fc2b 	bl	1c1c <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    13c6:	f000 fdab 	bl	1f20 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    13ca:	2001      	movs	r0, #1
    13cc:	f000 fc36 	bl	1c3c <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    13d0:	2001      	movs	r0, #1
    13d2:	f000 f8d1 	bl	1578 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    13d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    13da:	f000 bc3d 	b.w	1c58 <am_hal_rtc_osc_disable>
    13de:	bf00      	nop

000013e0 <am_bsp_uart_string_print>:
//
//*****************************************************************************
void
am_bsp_uart_string_print(char *pcString)
{
    am_hal_uart_string_transmit_polled(AM_BSP_UART_PRINT_INST, pcString);
    13e0:	4601      	mov	r1, r0
    13e2:	2000      	movs	r0, #0
    13e4:	f000 bd88 	b.w	1ef8 <am_hal_uart_string_transmit_polled>

000013e8 <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    13e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13ea:	4605      	mov	r5, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    13ec:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    13f0:	78ab      	ldrb	r3, [r5, #2]
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    13f2:	786c      	ldrb	r4, [r5, #1]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    13f4:	78ef      	ldrb	r7, [r5, #3]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    13f6:	792e      	ldrb	r6, [r5, #4]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    13f8:	79a9      	ldrb	r1, [r5, #6]
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    13fa:	009a      	lsls	r2, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    13fc:	0064      	lsls	r4, r4, #1
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    13fe:	f002 0204 	and.w	r2, r2, #4
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    1402:	f004 0402 	and.w	r4, r4, #2
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1406:	4314      	orrs	r4, r2
    1408:	f047 0701 	orr.w	r7, r7, #1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    140c:	79ea      	ldrb	r2, [r5, #7]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    140e:	01f6      	lsls	r6, r6, #7
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1410:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    1412:	b2f6      	uxtb	r6, r6
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    1414:	7a2f      	ldrb	r7, [r5, #8]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    1416:	0289      	lsls	r1, r1, #10
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1418:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    141a:	f401 6180 	and.w	r1, r1, #1024	; 0x400
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    141e:	7a6e      	ldrb	r6, [r5, #9]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    1420:	02d2      	lsls	r2, r2, #11
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1422:	430c      	orrs	r4, r1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    1424:	f402 6200 	and.w	r2, r2, #2048	; 0x800
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    1428:	7aa9      	ldrb	r1, [r5, #10]
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    142a:	033f      	lsls	r7, r7, #12
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    142c:	4314      	orrs	r4, r2
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    142e:	b2bf      	uxth	r7, r7
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    1430:	0436      	lsls	r6, r6, #16
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    1432:	7aea      	ldrb	r2, [r5, #11]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1434:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    1436:	0509      	lsls	r1, r1, #20
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    1438:	f406 2770 	and.w	r7, r6, #983040	; 0xf0000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    143c:	0612      	lsls	r2, r2, #24
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    143e:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    1440:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    1444:	009b      	lsls	r3, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    1446:	f002 7780 	and.w	r7, r2, #16777216	; 0x1000000
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    144a:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    144c:	f003 0108 	and.w	r1, r3, #8
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1450:	433c      	orrs	r4, r7
    1452:	430c      	orrs	r4, r1
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1454:	f000 fa6e 	bl	1934 <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1458:	482c      	ldr	r0, [pc, #176]	; (150c <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    145a:	4b2d      	ldr	r3, [pc, #180]	; (1510 <am_hal_cachectrl_enable+0x128>)
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    145c:	6004      	str	r4, [r0, #0]
    145e:	2232      	movs	r2, #50	; 0x32
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1460:	681e      	ldr	r6, [r3, #0]
    1462:	0777      	lsls	r7, r6, #29
    1464:	d41e      	bmi.n	14a4 <am_hal_cachectrl_enable+0xbc>
    1466:	681f      	ldr	r7, [r3, #0]
    1468:	077e      	lsls	r6, r7, #29
    146a:	f102 32ff 	add.w	r2, r2, #4294967295
    146e:	d419      	bmi.n	14a4 <am_hal_cachectrl_enable+0xbc>
    1470:	6819      	ldr	r1, [r3, #0]
    1472:	074f      	lsls	r7, r1, #29
    1474:	d416      	bmi.n	14a4 <am_hal_cachectrl_enable+0xbc>
    1476:	6818      	ldr	r0, [r3, #0]
    1478:	0746      	lsls	r6, r0, #29
    147a:	d413      	bmi.n	14a4 <am_hal_cachectrl_enable+0xbc>
    147c:	681e      	ldr	r6, [r3, #0]
    147e:	0770      	lsls	r0, r6, #29
    1480:	d410      	bmi.n	14a4 <am_hal_cachectrl_enable+0xbc>
    1482:	681f      	ldr	r7, [r3, #0]
    1484:	0779      	lsls	r1, r7, #29
    1486:	d40d      	bmi.n	14a4 <am_hal_cachectrl_enable+0xbc>
    1488:	6819      	ldr	r1, [r3, #0]
    148a:	074f      	lsls	r7, r1, #29
    148c:	d40a      	bmi.n	14a4 <am_hal_cachectrl_enable+0xbc>
    148e:	6818      	ldr	r0, [r3, #0]
    1490:	0746      	lsls	r6, r0, #29
    1492:	d407      	bmi.n	14a4 <am_hal_cachectrl_enable+0xbc>
    1494:	681e      	ldr	r6, [r3, #0]
    1496:	0770      	lsls	r0, r6, #29
    1498:	d404      	bmi.n	14a4 <am_hal_cachectrl_enable+0xbc>
    149a:	681f      	ldr	r7, [r3, #0]
    149c:	0779      	lsls	r1, r7, #29
    149e:	d401      	bmi.n	14a4 <am_hal_cachectrl_enable+0xbc>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    14a0:	3a09      	subs	r2, #9
    14a2:	d1dd      	bne.n	1460 <am_hal_cachectrl_enable+0x78>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    14a4:	4b1a      	ldr	r3, [pc, #104]	; (1510 <am_hal_cachectrl_enable+0x128>)
    14a6:	681a      	ldr	r2, [r3, #0]
    14a8:	f042 0101 	orr.w	r1, r2, #1
    14ac:	6019      	str	r1, [r3, #0]
    14ae:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    14b0:	6818      	ldr	r0, [r3, #0]
    14b2:	0740      	lsls	r0, r0, #29
    14b4:	d41e      	bmi.n	14f4 <am_hal_cachectrl_enable+0x10c>
    14b6:	681e      	ldr	r6, [r3, #0]
    14b8:	0771      	lsls	r1, r6, #29
    14ba:	f102 32ff 	add.w	r2, r2, #4294967295
    14be:	d419      	bmi.n	14f4 <am_hal_cachectrl_enable+0x10c>
    14c0:	681f      	ldr	r7, [r3, #0]
    14c2:	077f      	lsls	r7, r7, #29
    14c4:	d416      	bmi.n	14f4 <am_hal_cachectrl_enable+0x10c>
    14c6:	6819      	ldr	r1, [r3, #0]
    14c8:	074e      	lsls	r6, r1, #29
    14ca:	d413      	bmi.n	14f4 <am_hal_cachectrl_enable+0x10c>
    14cc:	6818      	ldr	r0, [r3, #0]
    14ce:	0740      	lsls	r0, r0, #29
    14d0:	d410      	bmi.n	14f4 <am_hal_cachectrl_enable+0x10c>
    14d2:	681e      	ldr	r6, [r3, #0]
    14d4:	0771      	lsls	r1, r6, #29
    14d6:	d40d      	bmi.n	14f4 <am_hal_cachectrl_enable+0x10c>
    14d8:	681f      	ldr	r7, [r3, #0]
    14da:	077f      	lsls	r7, r7, #29
    14dc:	d40a      	bmi.n	14f4 <am_hal_cachectrl_enable+0x10c>
    14de:	6819      	ldr	r1, [r3, #0]
    14e0:	074e      	lsls	r6, r1, #29
    14e2:	d407      	bmi.n	14f4 <am_hal_cachectrl_enable+0x10c>
    14e4:	6818      	ldr	r0, [r3, #0]
    14e6:	0740      	lsls	r0, r0, #29
    14e8:	d404      	bmi.n	14f4 <am_hal_cachectrl_enable+0x10c>
    14ea:	681e      	ldr	r6, [r3, #0]
    14ec:	0771      	lsls	r1, r6, #29
    14ee:	d401      	bmi.n	14f4 <am_hal_cachectrl_enable+0x10c>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    14f0:	3a09      	subs	r2, #9
    14f2:	d1dd      	bne.n	14b0 <am_hal_cachectrl_enable+0xc8>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    14f4:	796d      	ldrb	r5, [r5, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    14f6:	4f05      	ldr	r7, [pc, #20]	; (150c <am_hal_cachectrl_enable+0x124>)
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );
    14f8:	022b      	lsls	r3, r5, #8
    14fa:	f403 7100 	and.w	r1, r3, #512	; 0x200
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    14fe:	f403 7280 	and.w	r2, r3, #256	; 0x100
    1502:	4311      	orrs	r1, r2
    1504:	430c      	orrs	r4, r1
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1506:	603c      	str	r4, [r7, #0]
    1508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    150a:	bf00      	nop
    150c:	40018000 	.word	0x40018000
    1510:	40018008 	.word	0x40018008

00001514 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    1514:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    1516:	4604      	mov	r4, r0
    1518:	b120      	cbz	r0, 1524 <am_hal_clkgen_sysclk_select+0x10>
    151a:	4a06      	ldr	r2, [pc, #24]	; (1534 <am_hal_clkgen_sysclk_select+0x20>)
    151c:	4806      	ldr	r0, [pc, #24]	; (1538 <am_hal_clkgen_sysclk_select+0x24>)
    151e:	2153      	movs	r1, #83	; 0x53
    1520:	f000 f968 	bl	17f4 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1524:	4b05      	ldr	r3, [pc, #20]	; (153c <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the required operating value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1526:	4906      	ldr	r1, [pc, #24]	; (1540 <am_hal_clkgen_sysclk_select+0x2c>)
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1528:	2047      	movs	r0, #71	; 0x47

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    152a:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    152c:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    152e:	600c      	str	r4, [r1, #0]
    AM_REG(CLKGEN, CLKKEY) = 0;
    1530:	601a      	str	r2, [r3, #0]
    1532:	bd10      	pop	{r4, pc}
    1534:	00001f80 	.word	0x00001f80
    1538:	00001fb8 	.word	0x00001fb8
    153c:	40004014 	.word	0x40004014
    1540:	40004018 	.word	0x40004018

00001544 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1544:	4b04      	ldr	r3, [pc, #16]	; (1558 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    1546:	4905      	ldr	r1, [pc, #20]	; (155c <am_hal_clkgen_sysclk_get+0x18>)
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1548:	681a      	ldr	r2, [r3, #0]
            return 48000000;
    154a:	4805      	ldr	r0, [pc, #20]	; (1560 <am_hal_clkgen_sysclk_get+0x1c>)
    switch ( ui32ClockSetting )
    154c:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    1550:	bf08      	it	eq
    1552:	4608      	moveq	r0, r1
    1554:	4770      	bx	lr
    1556:	bf00      	nop
    1558:	40004018 	.word	0x40004018
    155c:	02dc6c00 	.word	0x02dc6c00
    1560:	016e3600 	.word	0x016e3600

00001564 <am_hal_clkgen_osc_start>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_start(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1564:	0783      	lsls	r3, r0, #30
    1566:	d004      	beq.n	1572 <am_hal_clkgen_osc_start+0xe>
    {
        //
        // Start the oscillator(s).
        // Note that these bits are cleared in order to enable the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) &= ~ui32OscFlags;
    1568:	4a02      	ldr	r2, [pc, #8]	; (1574 <am_hal_clkgen_osc_start+0x10>)
    156a:	6813      	ldr	r3, [r2, #0]
    156c:	ea23 0000 	bic.w	r0, r3, r0
    1570:	6010      	str	r0, [r2, #0]
    1572:	4770      	bx	lr
    1574:	4000400c 	.word	0x4000400c

00001578 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1578:	0783      	lsls	r3, r0, #30
    157a:	d003      	beq.n	1584 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    157c:	4b02      	ldr	r3, [pc, #8]	; (1588 <am_hal_clkgen_osc_stop+0x10>)
    157e:	681a      	ldr	r2, [r3, #0]
    1580:	4310      	orrs	r0, r2
    1582:	6018      	str	r0, [r3, #0]
    1584:	4770      	bx	lr
    1586:	bf00      	nop
    1588:	4000400c 	.word	0x4000400c

0000158c <am_hal_clkgen_uarten_set>:
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    uint32_t ui32Mask;

    if ( (ui32Module >= AM_REG_UART_NUM_MODULES)        ||
    158c:	2801      	cmp	r0, #1
    158e:	d900      	bls.n	1592 <am_hal_clkgen_uarten_set+0x6>
    1590:	4770      	bx	lr
    1592:	2903      	cmp	r1, #3
    1594:	d8fc      	bhi.n	1590 <am_hal_clkgen_uarten_set+0x4>
{
    1596:	b530      	push	{r4, r5, lr}
         (ui32UartEn > AM_HAL_CLKGEN_UARTEN_EN_POWER_SAV) )
    {
        return;
    }

    ui32UartEn <<= (ui32Module * AM_HAL_CLKGEN_UARTEN_UARTENn_S(ui32Module));
    1598:	fb00 f500 	mul.w	r5, r0, r0
{
    159c:	b083      	sub	sp, #12
    159e:	4604      	mov	r4, r0
    ui32UartEn <<= (ui32Module * AM_HAL_CLKGEN_UARTEN_UARTENn_S(ui32Module));
    15a0:	00e8      	lsls	r0, r5, #3
    15a2:	fa01 f500 	lsl.w	r5, r1, r0
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    15a6:	f000 f957 	bl	1858 <am_hal_interrupt_master_disable>

    //
    // Set the UART clock
    //
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    15aa:	4b09      	ldr	r3, [pc, #36]	; (15d0 <am_hal_clkgen_uarten_set+0x44>)
    AM_CRITICAL_BEGIN_ASM
    15ac:	9001      	str	r0, [sp, #4]
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    15ae:	681a      	ldr	r2, [r3, #0]
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));
    15b0:	f04f 0c03 	mov.w	ip, #3
    15b4:	00e1      	lsls	r1, r4, #3
    15b6:	fa0c f401 	lsl.w	r4, ip, r1
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    15ba:	ea22 0004 	bic.w	r0, r2, r4
    15be:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, UARTEN) |= ui32UartEn;
    15c0:	6819      	ldr	r1, [r3, #0]
    15c2:	430d      	orrs	r5, r1
    15c4:	601d      	str	r5, [r3, #0]

    //
    // Begin critical section.
    //
    AM_CRITICAL_END_ASM
    15c6:	9801      	ldr	r0, [sp, #4]
    15c8:	f000 f94a 	bl	1860 <am_hal_interrupt_master_set>
}
    15cc:	b003      	add	sp, #12
    15ce:	bd30      	pop	{r4, r5, pc}
    15d0:	40004034 	.word	0x40004034

000015d4 <am_hal_ctimer_config>:
//
//*****************************************************************************
void
am_hal_ctimer_config(uint32_t ui32TimerNumber,
                     am_hal_ctimer_config_t *psConfig)
{
    15d4:	b530      	push	{r4, r5, lr}
    15d6:	4604      	mov	r4, r0
                      (psConfig->ui32TimerBConfig << 16) );

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    15d8:	6808      	ldr	r0, [r1, #0]
                      (psConfig->ui32TimerBConfig << 16) );
    15da:	688a      	ldr	r2, [r1, #8]
    ui32ConfigVal = ( (psConfig->ui32TimerAConfig)  |
    15dc:	684b      	ldr	r3, [r1, #4]
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    15de:	2800      	cmp	r0, #0
    ui32ConfigVal = ( (psConfig->ui32TimerAConfig)  |
    15e0:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    15e4:	bf14      	ite	ne
    15e6:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
    15ea:	2500      	moveq	r5, #0
{
    15ec:	b083      	sub	sp, #12
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    15ee:	430d      	orrs	r5, r1

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    15f0:	f000 f932 	bl	1858 <am_hal_interrupt_master_disable>

    //
    // Find the correct register to write.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    15f4:	0124      	lsls	r4, r4, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    15f6:	4a2a      	ldr	r2, [pc, #168]	; (16a0 <am_hal_ctimer_config+0xcc>)
    AM_CRITICAL_BEGIN_ASM
    15f8:	9001      	str	r0, [sp, #4]
    ui32TimerASrc = AM_BFR(CTIMER, STCFG, CLKSEL);
    15fa:	482a      	ldr	r0, [pc, #168]	; (16a4 <am_hal_ctimer_config+0xd0>)

    //
    // Write our configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    15fc:	50a5      	str	r5, [r4, r2]
    ui32TimerASrc = AM_BFR(CTIMER, STCFG, CLKSEL);
    15fe:	6805      	ldr	r5, [r0, #0]
    1600:	f005 0c0f 	and.w	ip, r5, #15
    if ( (ui32TimerASrc == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV16)   ||
    1604:	f10c 33ff 	add.w	r3, ip, #4294967295
    1608:	2b01      	cmp	r3, #1
    160a:	d93f      	bls.n	168c <am_hal_ctimer_config+0xb8>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    160c:	6811      	ldr	r1, [r2, #0]
    160e:	f3c1 0e44 	ubfx	lr, r1, #1, #5
    1612:	f10e 34ff 	add.w	r4, lr, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1616:	f3c1 4244 	ubfx	r2, r1, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    161a:	2c04      	cmp	r4, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    161c:	f102 30ff 	add.w	r0, r2, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1620:	d934      	bls.n	168c <am_hal_ctimer_config+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    1622:	2804      	cmp	r0, #4
    1624:	d932      	bls.n	168c <am_hal_ctimer_config+0xb8>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    1626:	4d20      	ldr	r5, [pc, #128]	; (16a8 <am_hal_ctimer_config+0xd4>)
    1628:	682b      	ldr	r3, [r5, #0]
    162a:	f3c3 0c44 	ubfx	ip, r3, #1, #5
    162e:	f10c 31ff 	add.w	r1, ip, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1632:	f3c3 4e44 	ubfx	lr, r3, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1636:	2904      	cmp	r1, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1638:	f10e 34ff 	add.w	r4, lr, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    163c:	d926      	bls.n	168c <am_hal_ctimer_config+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    163e:	2c04      	cmp	r4, #4
    1640:	d924      	bls.n	168c <am_hal_ctimer_config+0xb8>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    1642:	4a1a      	ldr	r2, [pc, #104]	; (16ac <am_hal_ctimer_config+0xd8>)
    1644:	6810      	ldr	r0, [r2, #0]
    1646:	f3c0 0544 	ubfx	r5, r0, #1, #5
    164a:	1e69      	subs	r1, r5, #1
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    164c:	f3c0 4344 	ubfx	r3, r0, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1650:	2904      	cmp	r1, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1652:	f103 34ff 	add.w	r4, r3, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1656:	d919      	bls.n	168c <am_hal_ctimer_config+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    1658:	2c04      	cmp	r4, #4
    165a:	d917      	bls.n	168c <am_hal_ctimer_config+0xb8>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    165c:	4a14      	ldr	r2, [pc, #80]	; (16b0 <am_hal_ctimer_config+0xdc>)
    165e:	6810      	ldr	r0, [r2, #0]
    1660:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    1664:	f10c 35ff 	add.w	r5, ip, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1668:	f3c0 4e44 	ubfx	lr, r0, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    166c:	2d04      	cmp	r5, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    166e:	f10e 31ff 	add.w	r1, lr, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1672:	d90b      	bls.n	168c <am_hal_ctimer_config+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    1674:	2904      	cmp	r1, #4
    1676:	d909      	bls.n	168c <am_hal_ctimer_config+0xb8>
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    }
    else
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 1);
    1678:	4c0e      	ldr	r4, [pc, #56]	; (16b4 <am_hal_ctimer_config+0xe0>)
    167a:	6823      	ldr	r3, [r4, #0]
    167c:	f043 0204 	orr.w	r2, r3, #4
    1680:	6022      	str	r2, [r4, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1682:	9801      	ldr	r0, [sp, #4]
    1684:	f000 f8ec 	bl	1860 <am_hal_interrupt_master_set>

} // am_hal_ctimer_config()
    1688:	b003      	add	sp, #12
    168a:	bd30      	pop	{r4, r5, pc}
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    168c:	4809      	ldr	r0, [pc, #36]	; (16b4 <am_hal_ctimer_config+0xe0>)
    168e:	6805      	ldr	r5, [r0, #0]
    1690:	f025 0104 	bic.w	r1, r5, #4
    1694:	6001      	str	r1, [r0, #0]
    AM_CRITICAL_END_ASM
    1696:	9801      	ldr	r0, [sp, #4]
    1698:	f000 f8e2 	bl	1860 <am_hal_interrupt_master_set>
} // am_hal_ctimer_config()
    169c:	b003      	add	sp, #12
    169e:	bd30      	pop	{r4, r5, pc}
    16a0:	4000800c 	.word	0x4000800c
    16a4:	40008100 	.word	0x40008100
    16a8:	4000801c 	.word	0x4000801c
    16ac:	4000802c 	.word	0x4000802c
    16b0:	4000803c 	.word	0x4000803c
    16b4:	40021020 	.word	0x40021020

000016b8 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    16b8:	b570      	push	{r4, r5, r6, lr}
    16ba:	b082      	sub	sp, #8
    16bc:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    16be:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    16c0:	f000 f8ca 	bl	1858 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    16c4:	4d07      	ldr	r5, [pc, #28]	; (16e4 <am_hal_ctimer_start+0x2c>)
    AM_CRITICAL_BEGIN_ASM
    16c6:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    16c8:	5971      	ldr	r1, [r6, r5]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    16ca:	f004 2308 	and.w	r3, r4, #134219776	; 0x8000800
    16ce:	ea21 0003 	bic.w	r0, r1, r3
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    16d2:	f004 1201 	and.w	r2, r4, #65537	; 0x10001
    16d6:	4302      	orrs	r2, r0
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    16d8:	5172      	str	r2, [r6, r5]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    16da:	9801      	ldr	r0, [sp, #4]
    16dc:	f000 f8c0 	bl	1860 <am_hal_interrupt_master_set>
} // am_hal_ctimer_start()
    16e0:	b002      	add	sp, #8
    16e2:	bd70      	pop	{r4, r5, r6, pc}
    16e4:	4000800c 	.word	0x4000800c

000016e8 <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    16e8:	b570      	push	{r4, r5, r6, lr}
    16ea:	b082      	sub	sp, #8
    16ec:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    16ee:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    16f0:	f000 f8b2 	bl	1858 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    16f4:	4d05      	ldr	r5, [pc, #20]	; (170c <am_hal_ctimer_clear+0x24>)
    AM_CRITICAL_BEGIN_ASM
    16f6:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    16f8:	5971      	ldr	r1, [r6, r5]
    16fa:	f004 2008 	and.w	r0, r4, #134219776	; 0x8000800
    16fe:	4308      	orrs	r0, r1
    1700:	5170      	str	r0, [r6, r5]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1702:	9801      	ldr	r0, [sp, #4]
    1704:	f000 f8ac 	bl	1860 <am_hal_interrupt_master_set>
} // am_hal_ctimer_clear()
    1708:	b002      	add	sp, #8
    170a:	bd70      	pop	{r4, r5, r6, pc}
    170c:	4000800c 	.word	0x4000800c

00001710 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1714:	b082      	sub	sp, #8
    1716:	4688      	mov	r8, r1
    1718:	461f      	mov	r7, r3
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    171a:	ea4f 1900 	mov.w	r9, r0, lsl #4
{
    171e:	4614      	mov	r4, r2
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1720:	f000 f89a 	bl	1858 <am_hal_interrupt_master_disable>
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1724:	f8df a098 	ldr.w	sl, [pc, #152]	; 17c0 <am_hal_ctimer_period_set+0xb0>
    AM_CRITICAL_BEGIN_ASM
    1728:	9001      	str	r0, [sp, #4]
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    172a:	f518 3f80 	cmn.w	r8, #65536	; 0x10000
                                    AM_REG_CTIMER_CMPRA0_O +
    172e:	4d21      	ldr	r5, [pc, #132]	; (17b4 <am_hal_ctimer_period_set+0xa4>)
                                    AM_REG_CTIMER_CMPRB0_O +
    1730:	4e21      	ldr	r6, [pc, #132]	; (17b8 <am_hal_ctimer_period_set+0xa8>)
    ui32Mode = *pui32ControlReg;
    1732:	f859 300a 	ldr.w	r3, [r9, sl]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1736:	d01b      	beq.n	1770 <am_hal_ctimer_period_set+0x60>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1738:	f403 70c0 	and.w	r0, r3, #384	; 0x180
    173c:	2880      	cmp	r0, #128	; 0x80
    173e:	d01c      	beq.n	177a <am_hal_ctimer_period_set+0x6a>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1740:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1744:	2300      	movs	r3, #0
    1746:	45b8      	cmp	r8, r7
        ui32Comp1 = 0;
    1748:	461a      	mov	r2, r3
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    174a:	d01d      	beq.n	1788 <am_hal_ctimer_period_set+0x78>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    174c:	491b      	ldr	r1, [pc, #108]	; (17bc <am_hal_ctimer_period_set+0xac>)
    174e:	4588      	cmp	r8, r1
    1750:	d025      	beq.n	179e <am_hal_ctimer_period_set+0x8e>
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1 >> 16));
    1752:	400a      	ands	r2, r1
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1754:	b2a0      	uxth	r0, r4
    1756:	4303      	orrs	r3, r0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1758:	ea42 4414 	orr.w	r4, r2, r4, lsr #16
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    175c:	f849 3005 	str.w	r3, [r9, r5]
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1760:	f849 4006 	str.w	r4, [r9, r6]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1764:	9801      	ldr	r0, [sp, #4]
    1766:	f000 f87b 	bl	1860 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    176a:	b002      	add	sp, #8
    176c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ui32Mode = ui32Mode >> 16;
    1770:	0c19      	lsrs	r1, r3, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1772:	f401 70c0 	and.w	r0, r1, #384	; 0x180
    1776:	2880      	cmp	r0, #128	; 0x80
    1778:	d110      	bne.n	179c <am_hal_ctimer_period_set+0x8c>
    177a:	0423      	lsls	r3, r4, #16
        ui32Comp1 = ui32Period;
    177c:	4622      	mov	r2, r4
        ui32Comp0 = ui32Period - ui32OnTime;
    177e:	1be4      	subs	r4, r4, r7
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1780:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1784:	45b8      	cmp	r8, r7
    1786:	d1e1      	bne.n	174c <am_hal_ctimer_period_set+0x3c>
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1788:	b2a6      	uxth	r6, r4
    178a:	4333      	orrs	r3, r6
    178c:	f849 3005 	str.w	r3, [r9, r5]
    AM_CRITICAL_END_ASM
    1790:	9801      	ldr	r0, [sp, #4]
    1792:	f000 f865 	bl	1860 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    1796:	b002      	add	sp, #8
    1798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    179c:	2300      	movs	r3, #0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    179e:	b2a5      	uxth	r5, r4
    17a0:	432b      	orrs	r3, r5
    17a2:	f849 3006 	str.w	r3, [r9, r6]
    AM_CRITICAL_END_ASM
    17a6:	9801      	ldr	r0, [sp, #4]
    17a8:	f000 f85a 	bl	1860 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    17ac:	b002      	add	sp, #8
    17ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    17b2:	bf00      	nop
    17b4:	40008004 	.word	0x40008004
    17b8:	40008008 	.word	0x40008008
    17bc:	ffff0000 	.word	0xffff0000
    17c0:	4000800c 	.word	0x4000800c

000017c4 <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    17c4:	b510      	push	{r4, lr}
    17c6:	b082      	sub	sp, #8
    17c8:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    17ca:	f000 f845 	bl	1858 <am_hal_interrupt_master_disable>

    //
    // Enable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    17ce:	4b05      	ldr	r3, [pc, #20]	; (17e4 <am_hal_ctimer_int_enable+0x20>)
    AM_CRITICAL_BEGIN_ASM
    17d0:	9001      	str	r0, [sp, #4]
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    17d2:	6818      	ldr	r0, [r3, #0]
    17d4:	4320      	orrs	r0, r4
    17d6:	6018      	str	r0, [r3, #0]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    17d8:	9801      	ldr	r0, [sp, #4]
    17da:	f000 f841 	bl	1860 <am_hal_interrupt_master_set>
} // am_hal_ctimer_int_enable()
    17de:	b002      	add	sp, #8
    17e0:	bd10      	pop	{r4, pc}
    17e2:	bf00      	nop
    17e4:	40008200 	.word	0x40008200

000017e8 <am_hal_ctimer_int_clear>:
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTCLR) = ui32Interrupt;
    17e8:	4b01      	ldr	r3, [pc, #4]	; (17f0 <am_hal_ctimer_int_clear+0x8>)
    17ea:	6018      	str	r0, [r3, #0]
    17ec:	4770      	bx	lr
    17ee:	bf00      	nop
    17f0:	40008208 	.word	0x40008208

000017f4 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    17f4:	e7fe      	b.n	17f4 <am_hal_debug_error>
    17f6:	bf00      	nop

000017f8 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    17f8:	4b00      	ldr	r3, [pc, #0]	; (17fc <am_hal_flash_delay+0x4>)
    17fa:	4718      	bx	r3
    17fc:	0800009d 	.word	0x0800009d

00001800 <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    1800:	280f      	cmp	r0, #15
    1802:	d80b      	bhi.n	181c <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    1804:	2805      	cmp	r0, #5
    1806:	d013      	beq.n	1830 <am_hal_interrupt_enable+0x30>
    1808:	2806      	cmp	r0, #6
    180a:	d017      	beq.n	183c <am_hal_interrupt_enable+0x3c>
    180c:	2804      	cmp	r0, #4
    180e:	d104      	bne.n	181a <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    1810:	4a0d      	ldr	r2, [pc, #52]	; (1848 <am_hal_interrupt_enable+0x48>)
    1812:	6813      	ldr	r3, [r2, #0]
    1814:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    1818:	6010      	str	r0, [r2, #0]
    181a:	4770      	bx	lr
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    181c:	f1a0 0310 	sub.w	r3, r0, #16
    1820:	f003 0c1f 	and.w	ip, r3, #31
    1824:	2001      	movs	r0, #1
    1826:	4909      	ldr	r1, [pc, #36]	; (184c <am_hal_interrupt_enable+0x4c>)
    1828:	fa00 f20c 	lsl.w	r2, r0, ip
    182c:	600a      	str	r2, [r1, #0]
    182e:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    1830:	4805      	ldr	r0, [pc, #20]	; (1848 <am_hal_interrupt_enable+0x48>)
    1832:	6801      	ldr	r1, [r0, #0]
    1834:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    1838:	6002      	str	r2, [r0, #0]
            break;
    183a:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    183c:	4902      	ldr	r1, [pc, #8]	; (1848 <am_hal_interrupt_enable+0x48>)
    183e:	680a      	ldr	r2, [r1, #0]
    1840:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    1844:	600b      	str	r3, [r1, #0]
            break;
    1846:	4770      	bx	lr
    1848:	e000ed24 	.word	0xe000ed24
    184c:	e000e100 	.word	0xe000e100

00001850 <am_hal_interrupt_master_enable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1850:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    1854:	b662      	cpsie	i
    __asm("    bx lr");
    1856:	4770      	bx	lr

00001858 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1858:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    185c:	b672      	cpsid	i
    __asm("    bx lr");
    185e:	4770      	bx	lr

00001860 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    1860:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    1864:	4770      	bx	lr
    1866:	bf00      	nop

00001868 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1868:	490d      	ldr	r1, [pc, #52]	; (18a0 <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    186a:	4b0e      	ldr	r3, [pc, #56]	; (18a4 <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    186c:	4a0e      	ldr	r2, [pc, #56]	; (18a8 <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    186e:	681b      	ldr	r3, [r3, #0]
{
    1870:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1872:	680d      	ldr	r5, [r1, #0]
    1874:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1876:	6815      	ldr	r5, [r2, #0]
    1878:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    187a:	4c0c      	ldr	r4, [pc, #48]	; (18ac <am_hal_mcuctrl_fault_status+0x44>)
    187c:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    187e:	4329      	orrs	r1, r5
    1880:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1882:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1884:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1888:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    188a:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    188c:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1890:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1894:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1896:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1898:	6142      	str	r2, [r0, #20]
}
    189a:	bc70      	pop	{r4, r5, r6}
    189c:	4770      	bx	lr
    189e:	bf00      	nop
    18a0:	400201c4 	.word	0x400201c4
    18a4:	400201cc 	.word	0x400201cc
    18a8:	400201c0 	.word	0x400201c0
    18ac:	400201c8 	.word	0x400201c8

000018b0 <am_hal_pwrctrl_periph_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    18b0:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    18b2:	4604      	mov	r4, r0
{
    18b4:	b082      	sub	sp, #8
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    18b6:	b1b8      	cbz	r0, 18e8 <am_hal_pwrctrl_periph_enable+0x38>
    18b8:	1e43      	subs	r3, r0, #1
    18ba:	4203      	tst	r3, r0
    18bc:	d114      	bne.n	18e8 <am_hal_pwrctrl_periph_enable+0x38>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    18be:	f7ff ffcb 	bl	1858 <am_hal_interrupt_master_disable>

    //
    // Enable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    18c2:	4a18      	ldr	r2, [pc, #96]	; (1924 <am_hal_pwrctrl_periph_enable+0x74>)
    AM_CRITICAL_BEGIN_ASM
    18c4:	9001      	str	r0, [sp, #4]
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    18c6:	6810      	ldr	r0, [r2, #0]
    18c8:	4320      	orrs	r0, r4
    18ca:	6010      	str	r0, [r2, #0]

    //
    // End Critical Section.
    //
    AM_CRITICAL_END_ASM
    18cc:	9801      	ldr	r0, [sp, #4]
    18ce:	f7ff ffc7 	bl	1860 <am_hal_interrupt_master_set>

    //
    // Wait for the power to stablize.  Using a simple delay loop is more
    // power efficient than a polling loop.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);
    18d2:	200e      	movs	r0, #14
    18d4:	f7ff ff90 	bl	17f8 <am_hal_flash_delay>

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    18d8:	f014 0f0e 	tst.w	r4, #14
    18dc:	d10a      	bne.n	18f4 <am_hal_pwrctrl_periph_enable+0x44>
    18de:	f014 0f70 	tst.w	r4, #112	; 0x70
    18e2:	d00e      	beq.n	1902 <am_hal_pwrctrl_periph_enable+0x52>
    18e4:	2408      	movs	r4, #8
    18e6:	e006      	b.n	18f6 <am_hal_pwrctrl_periph_enable+0x46>
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    18e8:	4a0f      	ldr	r2, [pc, #60]	; (1928 <am_hal_pwrctrl_periph_enable+0x78>)
    18ea:	4810      	ldr	r0, [pc, #64]	; (192c <am_hal_pwrctrl_periph_enable+0x7c>)
    18ec:	2160      	movs	r1, #96	; 0x60
    18ee:	f7ff ff81 	bl	17f4 <am_hal_debug_error>
    18f2:	e7e4      	b.n	18be <am_hal_pwrctrl_periph_enable+0xe>
    POLL_PWRSTATUS(ui32Peripheral);
    18f4:	2404      	movs	r4, #4
    18f6:	4a0e      	ldr	r2, [pc, #56]	; (1930 <am_hal_pwrctrl_periph_enable+0x80>)
    18f8:	6813      	ldr	r3, [r2, #0]
    18fa:	421c      	tst	r4, r3
    18fc:	d0fc      	beq.n	18f8 <am_hal_pwrctrl_periph_enable+0x48>
}
    18fe:	b002      	add	sp, #8
    1900:	bd10      	pop	{r4, pc}
    POLL_PWRSTATUS(ui32Peripheral);
    1902:	f240 1181 	movw	r1, #385	; 0x181
    1906:	420c      	tst	r4, r1
    1908:	d108      	bne.n	191c <am_hal_pwrctrl_periph_enable+0x6c>
    190a:	05a3      	lsls	r3, r4, #22
    190c:	d408      	bmi.n	1920 <am_hal_pwrctrl_periph_enable+0x70>
    190e:	f414 6f80 	tst.w	r4, #1024	; 0x400
    1912:	bf14      	ite	ne
    1914:	2410      	movne	r4, #16
    1916:	f04f 34ff 	moveq.w	r4, #4294967295
    191a:	e7ec      	b.n	18f6 <am_hal_pwrctrl_periph_enable+0x46>
    191c:	2402      	movs	r4, #2
    191e:	e7ea      	b.n	18f6 <am_hal_pwrctrl_periph_enable+0x46>
    1920:	2480      	movs	r4, #128	; 0x80
    1922:	e7e8      	b.n	18f6 <am_hal_pwrctrl_periph_enable+0x46>
    1924:	40021008 	.word	0x40021008
    1928:	00001fd0 	.word	0x00001fd0
    192c:	00002004 	.word	0x00002004
    1930:	40021014 	.word	0x40021014

00001934 <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1934:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
{
    1938:	b430      	push	{r4, r5}
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    193a:	d03a      	beq.n	19b2 <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    193c:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    1940:	f000 809d 	beq.w	1a7e <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    1944:	2801      	cmp	r0, #1
    1946:	f000 809d 	beq.w	1a84 <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    194a:	2803      	cmp	r0, #3
    194c:	f000 80a6 	beq.w	1a9c <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    1950:	2807      	cmp	r0, #7
    1952:	f000 809c 	beq.w	1a8e <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    1956:	280f      	cmp	r0, #15
    1958:	f000 80a5 	beq.w	1aa6 <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    195c:	281f      	cmp	r0, #31
    195e:	f000 80b0 	beq.w	1ac2 <am_hal_pwrctrl_memory_enable+0x18e>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    1962:	283f      	cmp	r0, #63	; 0x3f
    1964:	f000 80b4 	beq.w	1ad0 <am_hal_pwrctrl_memory_enable+0x19c>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    1968:	287f      	cmp	r0, #127	; 0x7f
    196a:	f000 80b8 	beq.w	1ade <am_hal_pwrctrl_memory_enable+0x1aa>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    196e:	28ff      	cmp	r0, #255	; 0xff
    1970:	f000 80a0 	beq.w	1ab4 <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    1974:	f240 13ff 	movw	r3, #511	; 0x1ff
    1978:	4298      	cmp	r0, r3
    197a:	f000 80b7 	beq.w	1aec <am_hal_pwrctrl_memory_enable+0x1b8>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    197e:	f240 31ff 	movw	r1, #1023	; 0x3ff
    1982:	4288      	cmp	r0, r1
    1984:	f000 80b8 	beq.w	1af8 <am_hal_pwrctrl_memory_enable+0x1c4>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    1988:	f240 72ff 	movw	r2, #2047	; 0x7ff
    198c:	4290      	cmp	r0, r2
    198e:	d00e      	beq.n	19ae <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    1990:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    1994:	f000 80b6 	beq.w	1b04 <am_hal_pwrctrl_memory_enable+0x1d0>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    1998:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    199c:	42a0      	cmp	r0, r4
    199e:	f000 80b4 	beq.w	1b0a <am_hal_pwrctrl_memory_enable+0x1d6>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    19a2:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    19a6:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    19aa:	4560      	cmp	r0, ip
    19ac:	d132      	bne.n	1a14 <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    19ae:	495b      	ldr	r1, [pc, #364]	; (1b1c <am_hal_pwrctrl_memory_enable+0x1e8>)
    19b0:	e066      	b.n	1a80 <am_hal_pwrctrl_memory_enable+0x14c>
    19b2:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    19b6:	2340      	movs	r3, #64	; 0x40
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    19b8:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    19ba:	4c59      	ldr	r4, [pc, #356]	; (1b20 <am_hal_pwrctrl_memory_enable+0x1ec>)
    19bc:	6825      	ldr	r5, [r4, #0]
    19be:	402a      	ands	r2, r5
    19c0:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    19c2:	4a57      	ldr	r2, [pc, #348]	; (1b20 <am_hal_pwrctrl_memory_enable+0x1ec>)
    19c4:	6814      	ldr	r4, [r2, #0]
    19c6:	4320      	orrs	r0, r4
    19c8:	6010      	str	r0, [r2, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    19ca:	2b00      	cmp	r3, #0
    19cc:	d029      	beq.n	1a22 <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    19ce:	4d55      	ldr	r5, [pc, #340]	; (1b24 <am_hal_pwrctrl_memory_enable+0x1f0>)
    19d0:	6828      	ldr	r0, [r5, #0]
        while ( --i32TOcnt              &&
    19d2:	4218      	tst	r0, r3
    19d4:	bf18      	it	ne
    19d6:	20c6      	movne	r0, #198	; 0xc6
    19d8:	d01f      	beq.n	1a1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    19da:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    19dc:	421a      	tst	r2, r3
    19de:	d01c      	beq.n	1a1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    19e0:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    19e2:	421c      	tst	r4, r3
    19e4:	d019      	beq.n	1a1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    19e6:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    19e8:	421a      	tst	r2, r3
    19ea:	d016      	beq.n	1a1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    19ec:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    19ee:	421c      	tst	r4, r3
    19f0:	d013      	beq.n	1a1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    19f2:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    19f4:	421a      	tst	r2, r3
    19f6:	d010      	beq.n	1a1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    19f8:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    19fa:	421c      	tst	r4, r3
    19fc:	d00d      	beq.n	1a1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    19fe:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1a00:	421a      	tst	r2, r3
    1a02:	d00a      	beq.n	1a1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1a04:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1a06:	421c      	tst	r4, r3
    1a08:	d007      	beq.n	1a1a <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1a0a:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1a0c:	421a      	tst	r2, r3
    1a0e:	d004      	beq.n	1a1a <am_hal_pwrctrl_memory_enable+0xe6>
    1a10:	3809      	subs	r0, #9
    1a12:	d1e2      	bne.n	19da <am_hal_pwrctrl_memory_enable+0xa6>
        return false;
    1a14:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    1a16:	bc30      	pop	{r4, r5}
    1a18:	4770      	bx	lr
    if ( ui32PwrStatEnMask )
    1a1a:	b911      	cbnz	r1, 1a22 <am_hal_pwrctrl_memory_enable+0xee>
    return true;
    1a1c:	2001      	movs	r0, #1
}
    1a1e:	bc30      	pop	{r4, r5}
    1a20:	4770      	bx	lr
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1a22:	4b40      	ldr	r3, [pc, #256]	; (1b24 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1a24:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1a26:	ea31 0405 	bics.w	r4, r1, r5
    1a2a:	bf18      	it	ne
    1a2c:	24c6      	movne	r4, #198	; 0xc6
    1a2e:	d0f5      	beq.n	1a1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1a30:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1a32:	ea31 0000 	bics.w	r0, r1, r0
    1a36:	d0f1      	beq.n	1a1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1a38:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1a3a:	ea31 0002 	bics.w	r0, r1, r2
    1a3e:	d0ed      	beq.n	1a1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1a40:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1a42:	ea31 0005 	bics.w	r0, r1, r5
    1a46:	d0e9      	beq.n	1a1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1a48:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1a4a:	ea31 0000 	bics.w	r0, r1, r0
    1a4e:	d0e5      	beq.n	1a1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1a50:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1a52:	ea31 0002 	bics.w	r0, r1, r2
    1a56:	d0e1      	beq.n	1a1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1a58:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1a5a:	ea31 0005 	bics.w	r0, r1, r5
    1a5e:	d0dd      	beq.n	1a1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1a60:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1a62:	ea31 0000 	bics.w	r0, r1, r0
    1a66:	d0d9      	beq.n	1a1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1a68:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1a6a:	ea31 0002 	bics.w	r0, r1, r2
    1a6e:	d0d5      	beq.n	1a1c <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1a70:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1a72:	ea31 0005 	bics.w	r0, r1, r5
    1a76:	d0d1      	beq.n	1a1c <am_hal_pwrctrl_memory_enable+0xe8>
    1a78:	3c09      	subs	r4, #9
    1a7a:	d1d9      	bne.n	1a30 <am_hal_pwrctrl_memory_enable+0xfc>
    1a7c:	e7ca      	b.n	1a14 <am_hal_pwrctrl_memory_enable+0xe0>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    1a7e:	2160      	movs	r1, #96	; 0x60
{
    1a80:	2300      	movs	r3, #0
    1a82:	e79e      	b.n	19c2 <am_hal_pwrctrl_memory_enable+0x8e>
    1a84:	4a28      	ldr	r2, [pc, #160]	; (1b28 <am_hal_pwrctrl_memory_enable+0x1f4>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1a86:	4b29      	ldr	r3, [pc, #164]	; (1b2c <am_hal_pwrctrl_memory_enable+0x1f8>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    1a88:	f44f 7180 	mov.w	r1, #256	; 0x100
    1a8c:	e795      	b.n	19ba <am_hal_pwrctrl_memory_enable+0x86>
    1a8e:	f46f 62ff 	mvn.w	r2, #2040	; 0x7f8
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1a92:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    1a96:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    1a9a:	e78e      	b.n	19ba <am_hal_pwrctrl_memory_enable+0x86>
    1a9c:	4a24      	ldr	r2, [pc, #144]	; (1b30 <am_hal_pwrctrl_memory_enable+0x1fc>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1a9e:	4b25      	ldr	r3, [pc, #148]	; (1b34 <am_hal_pwrctrl_memory_enable+0x200>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    1aa0:	f44f 7140 	mov.w	r1, #768	; 0x300
    1aa4:	e789      	b.n	19ba <am_hal_pwrctrl_memory_enable+0x86>
    1aa6:	f46f 62fe 	mvn.w	r2, #2032	; 0x7f0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1aaa:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    1aae:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    1ab2:	e782      	b.n	19ba <am_hal_pwrctrl_memory_enable+0x86>
    1ab4:	f46f 62e0 	mvn.w	r2, #1792	; 0x700
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1ab8:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    1abc:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    1ac0:	e77b      	b.n	19ba <am_hal_pwrctrl_memory_enable+0x86>
    1ac2:	f46f 62fc 	mvn.w	r2, #2016	; 0x7e0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1ac6:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    1aca:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    1ace:	e774      	b.n	19ba <am_hal_pwrctrl_memory_enable+0x86>
    1ad0:	f46f 62f8 	mvn.w	r2, #1984	; 0x7c0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1ad4:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    1ad8:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    1adc:	e76d      	b.n	19ba <am_hal_pwrctrl_memory_enable+0x86>
    1ade:	f46f 62f0 	mvn.w	r2, #1920	; 0x780
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1ae2:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    1ae6:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    1aea:	e766      	b.n	19ba <am_hal_pwrctrl_memory_enable+0x86>
    1aec:	f46f 62c0 	mvn.w	r2, #1536	; 0x600
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1af0:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    1af4:	4910      	ldr	r1, [pc, #64]	; (1b38 <am_hal_pwrctrl_memory_enable+0x204>)
    1af6:	e760      	b.n	19ba <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    1af8:	4910      	ldr	r1, [pc, #64]	; (1b3c <am_hal_pwrctrl_memory_enable+0x208>)
    1afa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1afe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1b02:	e75a      	b.n	19ba <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1b04:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1b08:	e7ba      	b.n	1a80 <am_hal_pwrctrl_memory_enable+0x14c>
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1b0a:	4805      	ldr	r0, [pc, #20]	; (1b20 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1b0c:	6803      	ldr	r3, [r0, #0]
    1b0e:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    1b12:	6001      	str	r1, [r0, #0]
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1b14:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
        ui32PwrStatEnMask  = 0;
    1b18:	2100      	movs	r1, #0
    1b1a:	e758      	b.n	19ce <am_hal_pwrctrl_memory_enable+0x9a>
    1b1c:	0007ff00 	.word	0x0007ff00
    1b20:	40021010 	.word	0x40021010
    1b24:	40021014 	.word	0x40021014
    1b28:	fffff801 	.word	0xfffff801
    1b2c:	0007fe00 	.word	0x0007fe00
    1b30:	fffff803 	.word	0xfffff803
    1b34:	0007fc00 	.word	0x0007fc00
    1b38:	0001ff00 	.word	0x0001ff00
    1b3c:	0003ff00 	.word	0x0003ff00

00001b40 <am_hal_pwrctrl_bucks_init>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1b40:	4b0f      	ldr	r3, [pc, #60]	; (1b80 <am_hal_pwrctrl_bucks_init+0x40>)
    1b42:	681a      	ldr	r2, [r3, #0]
    1b44:	0792      	lsls	r2, r2, #30
    1b46:	d502      	bpl.n	1b4e <am_hal_pwrctrl_bucks_init+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1b48:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1b4a:	07c3      	lsls	r3, r0, #31
    1b4c:	d40e      	bmi.n	1b6c <am_hal_pwrctrl_bucks_init+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1b4e:	4b0d      	ldr	r3, [pc, #52]	; (1b84 <am_hal_pwrctrl_bucks_init+0x44>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1b50:	4a0b      	ldr	r2, [pc, #44]	; (1b80 <am_hal_pwrctrl_bucks_init+0x40>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1b52:	6819      	ldr	r1, [r3, #0]
    1b54:	f041 0002 	orr.w	r0, r1, #2
    1b58:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1b5a:	6819      	ldr	r1, [r3, #0]
    1b5c:	f041 0001 	orr.w	r0, r1, #1
    1b60:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1b62:	6813      	ldr	r3, [r2, #0]
    1b64:	f003 0103 	and.w	r1, r3, #3
    1b68:	2903      	cmp	r1, #3
    1b6a:	d1fa      	bne.n	1b62 <am_hal_pwrctrl_bucks_init+0x22>
    while ( ( AM_REG(PWRCTRL, POWERSTATUS) &
    1b6c:	4a04      	ldr	r2, [pc, #16]	; (1b80 <am_hal_pwrctrl_bucks_init+0x40>)
    1b6e:	6810      	ldr	r0, [r2, #0]
    1b70:	f000 0303 	and.w	r3, r0, #3
    1b74:	2b03      	cmp	r3, #3
    1b76:	d1fa      	bne.n	1b6e <am_hal_pwrctrl_bucks_init+0x2e>
    am_hal_flash_delay(200 / 3);
    1b78:	2042      	movs	r0, #66	; 0x42
    1b7a:	f7ff be3d 	b.w	17f8 <am_hal_flash_delay>
    1b7e:	bf00      	nop
    1b80:	40021004 	.word	0x40021004
    1b84:	40021000 	.word	0x40021000

00001b88 <am_hal_pwrctrl_bucks_enable>:
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1b88:	4b0b      	ldr	r3, [pc, #44]	; (1bb8 <am_hal_pwrctrl_bucks_enable+0x30>)
    1b8a:	681a      	ldr	r2, [r3, #0]
    1b8c:	0792      	lsls	r2, r2, #30
    1b8e:	d502      	bpl.n	1b96 <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1b90:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1b92:	07c3      	lsls	r3, r0, #31
    1b94:	d40e      	bmi.n	1bb4 <am_hal_pwrctrl_bucks_enable+0x2c>
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1b96:	4b09      	ldr	r3, [pc, #36]	; (1bbc <am_hal_pwrctrl_bucks_enable+0x34>)
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1b98:	4a07      	ldr	r2, [pc, #28]	; (1bb8 <am_hal_pwrctrl_bucks_enable+0x30>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1b9a:	6819      	ldr	r1, [r3, #0]
    1b9c:	f041 0002 	orr.w	r0, r1, #2
    1ba0:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1ba2:	6819      	ldr	r1, [r3, #0]
    1ba4:	f041 0001 	orr.w	r0, r1, #1
    1ba8:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1baa:	6813      	ldr	r3, [r2, #0]
    1bac:	f003 0103 	and.w	r1, r3, #3
    1bb0:	2903      	cmp	r1, #3
    1bb2:	d1fa      	bne.n	1baa <am_hal_pwrctrl_bucks_enable+0x22>
    1bb4:	4770      	bx	lr
    1bb6:	bf00      	nop
    1bb8:	40021004 	.word	0x40021004
    1bbc:	40021000 	.word	0x40021000

00001bc0 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1bc0:	4b12      	ldr	r3, [pc, #72]	; (1c0c <am_hal_pwrctrl_bucks_disable+0x4c>)
    1bc2:	681a      	ldr	r2, [r3, #0]
    1bc4:	0792      	lsls	r2, r2, #30
    1bc6:	d402      	bmi.n	1bce <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    1bc8:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1bca:	07c3      	lsls	r3, r0, #31
    1bcc:	d51c      	bpl.n	1c08 <am_hal_pwrctrl_bucks_disable+0x48>
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1bce:	4910      	ldr	r1, [pc, #64]	; (1c10 <am_hal_pwrctrl_bucks_disable+0x50>)
    1bd0:	680b      	ldr	r3, [r1, #0]
    1bd2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1bd6:	2a20      	cmp	r2, #32
    1bd8:	d00b      	beq.n	1bf2 <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    1bda:	4b0e      	ldr	r3, [pc, #56]	; (1c14 <am_hal_pwrctrl_bucks_disable+0x54>)
    1bdc:	681a      	ldr	r2, [r3, #0]
    1bde:	f022 0002 	bic.w	r0, r2, #2
    1be2:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    1be4:	6819      	ldr	r1, [r3, #0]
    1be6:	f021 0201 	bic.w	r2, r1, #1
    1bea:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    1bec:	200a      	movs	r0, #10
    1bee:	f7ff be03 	b.w	17f8 <am_hal_flash_delay>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_PWRADC_EN) )
    1bf2:	4809      	ldr	r0, [pc, #36]	; (1c18 <am_hal_pwrctrl_bucks_disable+0x58>)
    1bf4:	6801      	ldr	r1, [r0, #0]
    if ( isRev_ADC()  &&
    1bf6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1bfa:	d1ee      	bne.n	1bda <am_hal_pwrctrl_bucks_disable+0x1a>
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    1bfc:	4805      	ldr	r0, [pc, #20]	; (1c14 <am_hal_pwrctrl_bucks_disable+0x54>)
    1bfe:	6803      	ldr	r3, [r0, #0]
    1c00:	f003 0105 	and.w	r1, r3, #5
    1c04:	6001      	str	r1, [r0, #0]
    1c06:	e7f1      	b.n	1bec <am_hal_pwrctrl_bucks_disable+0x2c>
    1c08:	4770      	bx	lr
    1c0a:	bf00      	nop
    1c0c:	40021004 	.word	0x40021004
    1c10:	4002000c 	.word	0x4002000c
    1c14:	40021000 	.word	0x40021000
    1c18:	40021008 	.word	0x40021008

00001c1c <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1c1c:	4905      	ldr	r1, [pc, #20]	; (1c34 <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1c1e:	4a06      	ldr	r2, [pc, #24]	; (1c38 <am_hal_pwrctrl_low_power_init+0x1c>)
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1c20:	680b      	ldr	r3, [r1, #0]
    1c22:	f043 0006 	orr.w	r0, r3, #6
    1c26:	6008      	str	r0, [r1, #0]
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1c28:	6811      	ldr	r1, [r2, #0]
    1c2a:	f021 0304 	bic.w	r3, r1, #4
    1c2e:	6013      	str	r3, [r2, #0]
    1c30:	4770      	bx	lr
    1c32:	bf00      	nop
    1c34:	40021018 	.word	0x40021018
    1c38:	40021000 	.word	0x40021000

00001c3c <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1c3c:	4a05      	ldr	r2, [pc, #20]	; (1c54 <am_hal_rtc_osc_select+0x18>)
    1c3e:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    1c40:	b918      	cbnz	r0, 1c4a <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    1c42:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1c46:	6010      	str	r0, [r2, #0]
    1c48:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1c4a:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    1c4e:	6011      	str	r1, [r2, #0]
    1c50:	4770      	bx	lr
    1c52:	bf00      	nop
    1c54:	4000400c 	.word	0x4000400c

00001c58 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    1c58:	4a02      	ldr	r2, [pc, #8]	; (1c64 <am_hal_rtc_osc_disable+0xc>)
    1c5a:	6813      	ldr	r3, [r2, #0]
    1c5c:	f043 0010 	orr.w	r0, r3, #16
    1c60:	6010      	str	r0, [r2, #0]
    1c62:	4770      	bx	lr
    1c64:	40004050 	.word	0x40004050

00001c68 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    1c68:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c6a:	b083      	sub	sp, #12
    1c6c:	4604      	mov	r4, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    1c6e:	f7ff fdf3 	bl	1858 <am_hal_interrupt_master_disable>
    1c72:	4605      	mov	r5, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1c74:	b124      	cbz	r4, 1c80 <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    1c76:	4b42      	ldr	r3, [pc, #264]	; (1d80 <am_hal_sysctrl_sleep+0x118>)
    1c78:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1c7a:	f010 0c01 	ands.w	ip, r0, #1
    1c7e:	d00a      	beq.n	1c96 <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    1c80:	4a40      	ldr	r2, [pc, #256]	; (1d84 <am_hal_sysctrl_sleep+0x11c>)
    1c82:	6811      	ldr	r1, [r2, #0]
    1c84:	f021 0604 	bic.w	r6, r1, #4
    1c88:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    1c8a:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    1c8c:	4628      	mov	r0, r5
    1c8e:	f7ff fde7 	bl	1860 <am_hal_interrupt_master_set>
}
    1c92:	b003      	add	sp, #12
    1c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1c96:	4c3b      	ldr	r4, [pc, #236]	; (1d84 <am_hal_sysctrl_sleep+0x11c>)
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1c98:	4b3b      	ldr	r3, [pc, #236]	; (1d88 <am_hal_sysctrl_sleep+0x120>)
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1c9a:	6820      	ldr	r0, [r4, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1c9c:	4e3b      	ldr	r6, [pc, #236]	; (1d8c <am_hal_sysctrl_sleep+0x124>)
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1c9e:	4f3c      	ldr	r7, [pc, #240]	; (1d90 <am_hal_sysctrl_sleep+0x128>)
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1ca0:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 1da0 <am_hal_sysctrl_sleep+0x138>
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1ca4:	f040 0204 	orr.w	r2, r0, #4
    1ca8:	6022      	str	r2, [r4, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1caa:	681c      	ldr	r4, [r3, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1cac:	6833      	ldr	r3, [r6, #0]
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    1cae:	f8de 2000 	ldr.w	r2, [lr]
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    1cb2:	6839      	ldr	r1, [r7, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1cb4:	f004 07f0 	and.w	r7, r4, #240	; 0xf0
                   CHKBUCKZX_REV : 0x0;
    1cb8:	2f20      	cmp	r7, #32
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    1cba:	f103 30ff 	add.w	r0, r3, #4294967295
                   CHKBUCKZX_REV : 0x0;
    1cbe:	bf14      	ite	ne
    1cc0:	2700      	movne	r7, #0
    1cc2:	2702      	moveq	r7, #2
                    CHKBUCKZX_TIMER : 0x0;
    1cc4:	2803      	cmp	r0, #3
    1cc6:	bf98      	it	ls
    1cc8:	f04f 0c04 	movls.w	ip, #4
                     CHKBUCKZX_BUCKS : 0x0;
    1ccc:	f012 0403 	ands.w	r4, r2, #3
    1cd0:	bf18      	it	ne
    1cd2:	2401      	movne	r4, #1
    g_buckZX_chk |= ( ui32SupplySrc &
    1cd4:	f240 53ff 	movw	r3, #1535	; 0x5ff
    g_buckZX_chk |= (ui32SupplySrc &
    1cd8:	433c      	orrs	r4, r7
                0x0 : CHKBUCKZX_DEVEN;
    1cda:	ea11 0703 	ands.w	r7, r1, r3
    g_buckZX_chk |= (ui32SupplySrc &
    1cde:	ea44 040c 	orr.w	r4, r4, ip
                0x0 : CHKBUCKZX_DEVEN;
    1ce2:	d103      	bne.n	1cec <am_hal_sysctrl_sleep+0x84>
    g_buckZX_chk |= ( ui32SupplySrc &
    1ce4:	f044 0408 	orr.w	r4, r4, #8
        if ( bBuckZX_chk )
    1ce8:	2c0f      	cmp	r4, #15
    1cea:	d00a      	beq.n	1d02 <am_hal_sysctrl_sleep+0x9a>
        AM_ASM_WFI;
    1cec:	bf30      	wfi
        if ( bBuckZX_chk )
    1cee:	2c0f      	cmp	r4, #15
    1cf0:	d01a      	beq.n	1d28 <am_hal_sysctrl_sleep+0xc0>
            g_bBuckRestoreComplete = true;
    1cf2:	4e28      	ldr	r6, [pc, #160]	; (1d94 <am_hal_sysctrl_sleep+0x12c>)
    1cf4:	2001      	movs	r0, #1
    1cf6:	7030      	strb	r0, [r6, #0]
    am_hal_interrupt_master_set(ui32Critical);
    1cf8:	4628      	mov	r0, r5
    1cfa:	f7ff fdb1 	bl	1860 <am_hal_interrupt_master_set>
}
    1cfe:	b003      	add	sp, #12
    1d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1d02:	6832      	ldr	r2, [r6, #0]
    1d04:	1e51      	subs	r1, r2, #1
    1d06:	9100      	str	r1, [sp, #0]
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    1d08:	9800      	ldr	r0, [sp, #0]
    1d0a:	f04f 31ff 	mov.w	r1, #4294967295
    1d0e:	f7ff fceb 	bl	16e8 <am_hal_ctimer_clear>
            am_hal_ctimer_period_set(ui32BuckTimer,
    1d12:	9800      	ldr	r0, [sp, #0]
    1d14:	463b      	mov	r3, r7
    1d16:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    1d1a:	f04f 31ff 	mov.w	r1, #4294967295
    1d1e:	f7ff fcf7 	bl	1710 <am_hal_ctimer_period_set>
            am_hal_pwrctrl_bucks_disable();
    1d22:	f7ff ff4d 	bl	1bc0 <am_hal_pwrctrl_bucks_disable>
    1d26:	e7e1      	b.n	1cec <am_hal_sysctrl_sleep+0x84>
    AM_CRITICAL_BEGIN_ASM
    1d28:	f7ff fd96 	bl	1858 <am_hal_interrupt_master_disable>
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    1d2c:	4b1a      	ldr	r3, [pc, #104]	; (1d98 <am_hal_sysctrl_sleep+0x130>)
    AM_CRITICAL_BEGIN_ASM
    1d2e:	9001      	str	r0, [sp, #4]
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    1d30:	681a      	ldr	r2, [r3, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    1d32:	681a      	ldr	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    1d34:	681f      	ldr	r7, [r3, #0]
    1d36:	f027 043c 	bic.w	r4, r7, #60	; 0x3c
    1d3a:	f044 021c 	orr.w	r2, r4, #28
    1d3e:	601a      	str	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    1d40:	6819      	ldr	r1, [r3, #0]
            g_bBuckRestoreComplete = false;
    1d42:	4c14      	ldr	r4, [pc, #80]	; (1d94 <am_hal_sysctrl_sleep+0x12c>)
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    1d44:	f421 30f0 	bic.w	r0, r1, #122880	; 0x1e000
    1d48:	f440 4760 	orr.w	r7, r0, #57344	; 0xe000
    1d4c:	601f      	str	r7, [r3, #0]
    AM_CRITICAL_END_ASM
    1d4e:	9801      	ldr	r0, [sp, #4]
    1d50:	f7ff fd86 	bl	1860 <am_hal_interrupt_master_set>
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    1d54:	201c      	movs	r0, #28
    1d56:	f7ff fd4f 	bl	17f8 <am_hal_flash_delay>
            am_hal_pwrctrl_bucks_enable();
    1d5a:	f7ff ff15 	bl	1b88 <am_hal_pwrctrl_bucks_enable>
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1d5e:	6836      	ldr	r6, [r6, #0]
            g_ui32BuckInputs = 0;
    1d60:	490e      	ldr	r1, [pc, #56]	; (1d9c <am_hal_sysctrl_sleep+0x134>)
            g_bBuckRestoreComplete = false;
    1d62:	2200      	movs	r2, #0
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1d64:	1e73      	subs	r3, r6, #1
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    1d66:	204c      	movs	r0, #76	; 0x4c
            ui32BuckTimer = g_ui32BuckTimer - 1;
    1d68:	9300      	str	r3, [sp, #0]
            g_bBuckRestoreComplete = false;
    1d6a:	7022      	strb	r2, [r4, #0]
            g_ui32BuckInputs = 0;
    1d6c:	600a      	str	r2, [r1, #0]
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    1d6e:	f7ff fd43 	bl	17f8 <am_hal_flash_delay>
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    1d72:	9800      	ldr	r0, [sp, #0]
    1d74:	f04f 31ff 	mov.w	r1, #4294967295
    1d78:	f7ff fc9e 	bl	16b8 <am_hal_ctimer_start>
    1d7c:	e786      	b.n	1c8c <am_hal_sysctrl_sleep+0x24>
    1d7e:	bf00      	nop
    1d80:	40020250 	.word	0x40020250
    1d84:	e000ed10 	.word	0xe000ed10
    1d88:	4002000c 	.word	0x4002000c
    1d8c:	10001128 	.word	0x10001128
    1d90:	40021008 	.word	0x40021008
    1d94:	10001121 	.word	0x10001121
    1d98:	40020068 	.word	0x40020068
    1d9c:	10001124 	.word	0x10001124
    1da0:	40021000 	.word	0x40021000

00001da4 <am_hal_uart_config>:
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    1da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1da6:	460d      	mov	r5, r1
    1da8:	4607      	mov	r7, r0
    uint32_t ui32HFRC;

    //
    // Configure the Baudrate.
    //
    ui32HFRC = am_hal_clkgen_sysclk_get();
    1daa:	f7ff fbcb 	bl	1544 <am_hal_clkgen_sysclk_get>
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    1dae:	682b      	ldr	r3, [r5, #0]
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    1db0:	0186      	lsls	r6, r0, #6
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    1db2:	0159      	lsls	r1, r3, #5
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    1db4:	fbb0 f4f1 	udiv	r4, r0, r1
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    1db8:	fbb6 f0f1 	udiv	r0, r6, r1
    1dbc:	eba0 1684 	sub.w	r6, r0, r4, lsl #6
    am_hal_debug_assert_msg(ui32IntegerDivisor > 0, "Integer divisor MUST be greater than or equal to 1.");
    1dc0:	b924      	cbnz	r4, 1dcc <am_hal_uart_config+0x28>
    1dc2:	4a11      	ldr	r2, [pc, #68]	; (1e08 <am_hal_uart_config+0x64>)
    1dc4:	4811      	ldr	r0, [pc, #68]	; (1e0c <am_hal_uart_config+0x68>)
    1dc6:	2164      	movs	r1, #100	; 0x64
    1dc8:	f7ff fd14 	bl	17f4 <am_hal_debug_error>
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    1dcc:	f507 2280 	add.w	r2, r7, #262144	; 0x40000
    1dd0:	321c      	adds	r2, #28
    1dd2:	0317      	lsls	r7, r2, #12
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    1dd4:	7a2b      	ldrb	r3, [r5, #8]
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    1dd6:	627c      	str	r4, [r7, #36]	; 0x24
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    1dd8:	627c      	str	r4, [r7, #36]	; 0x24
    AM_REGn(UART, ui32Module, FBRD) = ui32FractionDivisor;
    1dda:	62be      	str	r6, [r7, #40]	; 0x28
    ui32ConfigVal |= psConfig->ui32DataBits;
    1ddc:	6868      	ldr	r0, [r5, #4]
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    1dde:	68ec      	ldr	r4, [r5, #12]
    1de0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    1de2:	2b00      	cmp	r3, #0
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    1de4:	ea40 0004 	orr.w	r0, r0, r4
    1de8:	ea40 0001 	orr.w	r0, r0, r1
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    1dec:	bf14      	ite	ne
    1dee:	2108      	movne	r1, #8
    1df0:	2100      	moveq	r1, #0
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    1df2:	4308      	orrs	r0, r1
    1df4:	62f8      	str	r0, [r7, #44]	; 0x2c

    //
    // Write the flow control settings to the control register.
    //
    AM_REGn(UART, ui32Module, CR) |= psConfig->ui32FlowCtrl;
    1df6:	6b3e      	ldr	r6, [r7, #48]	; 0x30
    1df8:	692d      	ldr	r5, [r5, #16]
    1dfa:	432e      	orrs	r6, r5
    1dfc:	633e      	str	r6, [r7, #48]	; 0x30

    //
    // Set the clock select field for 24MHz from the HFRC
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    1dfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1e00:	f042 0310 	orr.w	r3, r2, #16
    1e04:	633b      	str	r3, [r7, #48]	; 0x30
    1e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e08:	0000201c 	.word	0x0000201c
    1e0c:	00002050 	.word	0x00002050

00001e10 <am_hal_uart_int_clear>:
am_hal_uart_int_clear(uint32_t ui32Module, uint32_t ui32Interrupt)
{
    //
    // Clear the bits.
    //
    AM_REGn(UART, ui32Module, IEC) = ui32Interrupt;
    1e10:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1e14:	301c      	adds	r0, #28
    1e16:	0302      	lsls	r2, r0, #12
    1e18:	6451      	str	r1, [r2, #68]	; 0x44
    1e1a:	4770      	bx	lr

00001e1c <am_hal_uart_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_enable(uint32_t ui32Module)
{
    1e1c:	b510      	push	{r4, lr}
    1e1e:	4604      	mov	r4, r0
    1e20:	b082      	sub	sp, #8
    //
    // Enable the UART, RX, and TX.
    //
    AM_REGan_SET(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    1e22:	f7ff fd19 	bl	1858 <am_hal_interrupt_master_disable>
    1e26:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
    1e2a:	331c      	adds	r3, #28
    1e2c:	0319      	lsls	r1, r3, #12
    1e2e:	9001      	str	r0, [sp, #4]
    1e30:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    1e32:	f442 7040 	orr.w	r0, r2, #768	; 0x300
    1e36:	f040 0401 	orr.w	r4, r0, #1
    1e3a:	630c      	str	r4, [r1, #48]	; 0x30
    1e3c:	9801      	ldr	r0, [sp, #4]
    1e3e:	f7ff fd0f 	bl	1860 <am_hal_interrupt_master_set>
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    1e42:	b002      	add	sp, #8
    1e44:	bd10      	pop	{r4, pc}
    1e46:	bf00      	nop

00001e48 <am_hal_uart_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_disable(uint32_t ui32Module)
{
    1e48:	b510      	push	{r4, lr}
    1e4a:	4604      	mov	r4, r0
    1e4c:	b082      	sub	sp, #8
    //
    // Disable the UART.
    //
    AM_REGan_CLR(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    1e4e:	f7ff fd03 	bl	1858 <am_hal_interrupt_master_disable>
    1e52:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
    1e56:	331c      	adds	r3, #28
    1e58:	0319      	lsls	r1, r3, #12
    1e5a:	9001      	str	r0, [sp, #4]
    1e5c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    1e5e:	f422 7040 	bic.w	r0, r2, #768	; 0x300
    1e62:	f020 0401 	bic.w	r4, r0, #1
    1e66:	630c      	str	r4, [r1, #48]	; 0x30
    1e68:	9801      	ldr	r0, [sp, #4]
    1e6a:	f7ff fcf9 	bl	1860 <am_hal_interrupt_master_set>
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    1e6e:	b002      	add	sp, #8
    1e70:	bd10      	pop	{r4, pc}
    1e72:	bf00      	nop

00001e74 <am_hal_uart_pwrctrl_enable>:
am_hal_uart_pwrctrl_enable(uint32_t ui32Module)
{
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    1e74:	2801      	cmp	r0, #1
{
    1e76:	b510      	push	{r4, lr}
    1e78:	4604      	mov	r4, r0
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    1e7a:	d905      	bls.n	1e88 <am_hal_uart_pwrctrl_enable+0x14>
    1e7c:	4a05      	ldr	r2, [pc, #20]	; (1e94 <am_hal_uart_pwrctrl_enable+0x20>)
    1e7e:	4806      	ldr	r0, [pc, #24]	; (1e98 <am_hal_uart_pwrctrl_enable+0x24>)
    1e80:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    1e84:	f7ff fcb6 	bl	17f4 <am_hal_debug_error>
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    1e88:	2080      	movs	r0, #128	; 0x80
    1e8a:	40a0      	lsls	r0, r4
}
    1e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    1e90:	f7ff bd0e 	b.w	18b0 <am_hal_pwrctrl_periph_enable>
    1e94:	00002064 	.word	0x00002064
    1e98:	00002050 	.word	0x00002050

00001e9c <am_hal_uart_clock_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    1e9c:	b510      	push	{r4, lr}
    //
    // Set CLKGEN.UARTEN, clear the field then write the desired enable value
    // Valid enable values are DIS, EN, REDUCE_FREQ, EN_POWER_SAV.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    1e9e:	2101      	movs	r1, #1
{
    1ea0:	4604      	mov	r4, r0
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    1ea2:	f7ff fb73 	bl	158c <am_hal_clkgen_uarten_set>

    //
    // Enable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKEN_M;
    1ea6:	f504 2080 	add.w	r0, r4, #262144	; 0x40000
    1eaa:	301c      	adds	r0, #28
    1eac:	0301      	lsls	r1, r0, #12
    1eae:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    1eb0:	f043 0208 	orr.w	r2, r3, #8
    1eb4:	630a      	str	r2, [r1, #48]	; 0x30

    //
    // Select default UART clock source
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    1eb6:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    1eb8:	f044 0010 	orr.w	r0, r4, #16
    1ebc:	6308      	str	r0, [r1, #48]	; 0x30
    1ebe:	bd10      	pop	{r4, pc}

00001ec0 <am_hal_uart_clock_disable>:
am_hal_uart_clock_disable(uint32_t ui32Module)
{
    //
    // Disable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) &= ~AM_REG_UART_CR_CLKEN_M;
    1ec0:	f500 2380 	add.w	r3, r0, #262144	; 0x40000
    1ec4:	331c      	adds	r3, #28
    1ec6:	031b      	lsls	r3, r3, #12

    //
    // Disable the UART clock in the CLKGEN module.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_DIS);
    1ec8:	2100      	movs	r1, #0
    AM_REGn(UART, ui32Module, CR) &= ~AM_REG_UART_CR_CLKEN_M;
    1eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1ecc:	f022 0208 	bic.w	r2, r2, #8
    1ed0:	631a      	str	r2, [r3, #48]	; 0x30
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_DIS);
    1ed2:	f7ff bb5b 	b.w	158c <am_hal_clkgen_uarten_set>
    1ed6:	bf00      	nop

00001ed8 <am_hal_uart_fifo_config>:
am_hal_uart_fifo_config(uint32_t ui32Module, uint32_t ui32LvlCfg)
{
    //
    // Enable the use of FIFOs.
    //
    AM_REGn(UART, ui32Module, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    1ed8:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1edc:	301c      	adds	r0, #28
    1ede:	0302      	lsls	r2, r0, #12
    1ee0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1ee2:	f043 0010 	orr.w	r0, r3, #16
    1ee6:	62d0      	str	r0, [r2, #44]	; 0x2c

    //
    // Write the FIFO level register.
    //
    AM_REGn(UART, ui32Module, IFLS) = ui32LvlCfg;
    1ee8:	6351      	str	r1, [r2, #52]	; 0x34
    1eea:	4770      	bx	lr

00001eec <am_hal_uart_flags_get>:
am_hal_uart_flags_get(uint32_t ui32Module)
{
    //
    // Read and return the Flags.
    //
    return AM_REGn(UART, ui32Module, FR);
    1eec:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1ef0:	301c      	adds	r0, #28
    1ef2:	0301      	lsls	r1, r0, #12
    1ef4:	6988      	ldr	r0, [r1, #24]
}
    1ef6:	4770      	bx	lr

00001ef8 <am_hal_uart_string_transmit_polled>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_string_transmit_polled(uint32_t ui32Module, char *pcString)
{
    1ef8:	b410      	push	{r4}
    while (*pcString)
    1efa:	780c      	ldrb	r4, [r1, #0]
    1efc:	b16c      	cbz	r4, 1f1a <am_hal_uart_string_transmit_polled+0x22>
    1efe:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1f02:	301c      	adds	r0, #28
    1f04:	0300      	lsls	r0, r0, #12
    1f06:	f100 0218 	add.w	r2, r0, #24
    {
        //
        // Wait for space, i.e.  TX FIFO EMPTY.
        //
        while (AM_BFRn(UART, ui32Module, FR, TXFF));
    1f0a:	6813      	ldr	r3, [r2, #0]
    1f0c:	069b      	lsls	r3, r3, #26
    1f0e:	d4fc      	bmi.n	1f0a <am_hal_uart_string_transmit_polled+0x12>

        //
        // Write the char.
        //
        AM_REGn(UART, ui32Module, DR) = *pcString++;
    1f10:	6004      	str	r4, [r0, #0]
    while (*pcString)
    1f12:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    1f16:	2c00      	cmp	r4, #0
    1f18:	d1f7      	bne.n	1f0a <am_hal_uart_string_transmit_polled+0x12>
    }
}
    1f1a:	f85d 4b04 	ldr.w	r4, [sp], #4
    1f1e:	4770      	bx	lr

00001f20 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    1f20:	4b01      	ldr	r3, [pc, #4]	; (1f28 <am_hal_vcomp_disable+0x8>)
    1f22:	2237      	movs	r2, #55	; 0x37
    1f24:	601a      	str	r2, [r3, #0]
    1f26:	4770      	bx	lr
    1f28:	4000c008 	.word	0x4000c008
    1f2c:	54524155 	.word	0x54524155
    1f30:	69725020 	.word	0x69725020
    1f34:	2066746e 	.word	0x2066746e
    1f38:	6d617845 	.word	0x6d617845
    1f3c:	0a656c70 	.word	0x0a656c70
    1f40:	00000000 	.word	0x00000000
    1f44:	6542090a 	.word	0x6542090a
    1f48:	6e6e6967 	.word	0x6e6e6967
    1f4c:	20676e69 	.word	0x20676e69
    1f50:	49435341 	.word	0x49435341
    1f54:	61772049 	.word	0x61772049
    1f58:	74206b6c 	.word	0x74206b6c
    1f5c:	756f7268 	.word	0x756f7268
    1f60:	0a3a6867 	.word	0x0a3a6867
    1f64:	00000000 	.word	0x00000000
    1f68:	00000009 	.word	0x00000009
    1f6c:	00006325 	.word	0x00006325
    1f70:	0000090a 	.word	0x0000090a

00001f74 <am_hal_cachectrl_defaults>:
    1f74:	50000001 00010300 00010101 685f6d61     ...P........am_h
    1f84:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    1f94:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    1fa4:	63206469 6b636f6c 74657320 676e6974     id clock setting
    1fb4:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    1fc4:	6b6c635f 2e6e6567 00000063 6e6e6143     _clkgen.c...Cann
    1fd4:	6520746f 6c62616e 6f6d2065 74206572     ot enable more t
    1fe4:	206e6168 20656e6f 69726570 72656870     han one peripher
    1ff4:	61206c61 20612074 656d6974 0000002e     al at a time....
    2004:	2e5c2e2e 6d615c2e 6c61685f 7277705f     ..\..\am_hal_pwr
    2014:	6c727463 0000632e 65746e49 20726567     ctrl.c..Integer 
    2024:	69766964 20726f73 5453554d 20656220     divisor MUST be 
    2034:	61657267 20726574 6e616874 20726f20     greater than or 
    2044:	61757165 6f74206c 002e3120 2e5c2e2e     equal to 1....\.
    2054:	6d615c2e 6c61685f 7261755f 00632e74     .\am_hal_uart.c.
    2064:	69797254 7420676e 6964206f 6c626173     Trying to disabl
    2074:	20612065 54524155 646f6d20 20656c75     e a UART module 
    2084:	74616874 656f6420 74276e73 69786520     that doesn't exi
    2094:	00007473                                st..
