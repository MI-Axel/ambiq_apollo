
em9304_test_bridge_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d10  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00000800  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000054  10000800  00002d10  00020800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000298  10000854  00002d64  00020854  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00020854  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000cdad  00000000  00000000  0002088b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002653  00000000  00000000  0002d638  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000009c8  00000000  00000000  0002fc8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001598  00000000  00000000  00030653  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000053d1  00000000  00000000  00031beb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000033bb  00000000  00000000  00036fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  0003a377  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001c3c  00000000  00000000  0003a3f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00009b04  00000000  00000000  0003c030  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 08 00 10 21 0c 00 00 89 0c 00 00 c9 0c 00 00     ....!...........
      10:	c9 0c 00 00 c9 0c 00 00 c9 0c 00 00 00 00 00 00     ................
	...
      2c:	8f 0c 00 00 8f 0c 00 00 00 00 00 00 8f 0c 00 00     ................
      3c:	8f 0c 00 00 8f 0c 00 00 8f 0c 00 00 8f 0c 00 00     ................
      4c:	8f 0c 00 00 8f 0c 00 00 8f 0c 00 00 59 03 00 00     ............Y...
      5c:	8f 0c 00 00 8f 0c 00 00 4d 0a 00 00 11 0a 00 00     ........M.......
      6c:	91 0a 00 00 8f 0c 00 00 8f 0c 00 00 8f 0c 00 00     ................
      7c:	8f 0c 00 00                                         ....

00000080 <am_devices_button_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_button_init(am_devices_button_t *psButton)
{
      80:	b490      	push	{r4, r7}
      82:	b082      	sub	sp, #8
      84:	af00      	add	r7, sp, #0
      86:	6078      	str	r0, [r7, #4]
    // Disable the pin to save power.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
#else
    am_hal_gpio_pin_config(psButton->ui32GPIONumber, AM_HAL_PIN_DISABLE);
      88:	687b      	ldr	r3, [r7, #4]
      8a:	681b      	ldr	r3, [r3, #0]
      8c:	2b00      	cmp	r3, #0
      8e:	db46      	blt.n	11e <am_devices_button_init+0x9e>
      90:	4b2a      	ldr	r3, [pc, #168]	; (13c <am_devices_button_init+0xbc>)
      92:	2273      	movs	r2, #115	; 0x73
      94:	601a      	str	r2, [r3, #0]
      96:	687b      	ldr	r3, [r7, #4]
      98:	681b      	ldr	r3, [r3, #0]
      9a:	085b      	lsrs	r3, r3, #1
      9c:	f003 027c 	and.w	r2, r3, #124	; 0x7c
      a0:	4b27      	ldr	r3, [pc, #156]	; (140 <am_devices_button_init+0xc0>)
      a2:	4413      	add	r3, r2
      a4:	4618      	mov	r0, r3
      a6:	687b      	ldr	r3, [r7, #4]
      a8:	681b      	ldr	r3, [r3, #0]
      aa:	085b      	lsrs	r3, r3, #1
      ac:	f003 027c 	and.w	r2, r3, #124	; 0x7c
      b0:	4b23      	ldr	r3, [pc, #140]	; (140 <am_devices_button_init+0xc0>)
      b2:	4413      	add	r3, r2
      b4:	681a      	ldr	r2, [r3, #0]
      b6:	687b      	ldr	r3, [r7, #4]
      b8:	681b      	ldr	r3, [r3, #0]
      ba:	009b      	lsls	r3, r3, #2
      bc:	f003 031c 	and.w	r3, r3, #28
      c0:	2107      	movs	r1, #7
      c2:	fa01 f303 	lsl.w	r3, r1, r3
      c6:	43db      	mvns	r3, r3
      c8:	4013      	ands	r3, r2
      ca:	6003      	str	r3, [r0, #0]
      cc:	687b      	ldr	r3, [r7, #4]
      ce:	681b      	ldr	r3, [r3, #0]
      d0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
      d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
      d8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
      dc:	461c      	mov	r4, r3
      de:	687b      	ldr	r3, [r7, #4]
      e0:	681b      	ldr	r3, [r3, #0]
      e2:	00db      	lsls	r3, r3, #3
      e4:	f003 0318 	and.w	r3, r3, #24
      e8:	2218      	movs	r2, #24
      ea:	409a      	lsls	r2, r3
      ec:	687b      	ldr	r3, [r7, #4]
      ee:	681b      	ldr	r3, [r3, #0]
      f0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
      f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
      f8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
      fc:	6819      	ldr	r1, [r3, #0]
      fe:	687b      	ldr	r3, [r7, #4]
     100:	681b      	ldr	r3, [r3, #0]
     102:	00db      	lsls	r3, r3, #3
     104:	f003 0318 	and.w	r3, r3, #24
     108:	20ff      	movs	r0, #255	; 0xff
     10a:	fa00 f303 	lsl.w	r3, r0, r3
     10e:	43db      	mvns	r3, r3
     110:	400b      	ands	r3, r1
     112:	4313      	orrs	r3, r2
     114:	6023      	str	r3, [r4, #0]
     116:	4b09      	ldr	r3, [pc, #36]	; (13c <am_devices_button_init+0xbc>)
     118:	2200      	movs	r2, #0
     11a:	601a      	str	r2, [r3, #0]
     11c:	e000      	b.n	120 <am_devices_button_init+0xa0>
     11e:	bf00      	nop


    //
    // Initialize the state variables.
    //
    psButton->ui32Count = 0;
     120:	687b      	ldr	r3, [r7, #4]
     122:	2200      	movs	r2, #0
     124:	609a      	str	r2, [r3, #8]
    psButton->bPressed = false;
     126:	687b      	ldr	r3, [r7, #4]
     128:	2200      	movs	r2, #0
     12a:	731a      	strb	r2, [r3, #12]
    psButton->bChanged = false;
     12c:	687b      	ldr	r3, [r7, #4]
     12e:	2200      	movs	r2, #0
     130:	735a      	strb	r2, [r3, #13]
}
     132:	bf00      	nop
     134:	3708      	adds	r7, #8
     136:	46bd      	mov	sp, r7
     138:	bc90      	pop	{r4, r7}
     13a:	4770      	bx	lr
     13c:	40010060 	.word	0x40010060
     140:	40010040 	.word	0x40010040

00000144 <am_devices_button_array_init>:
//
//*****************************************************************************
void
am_devices_button_array_init(am_devices_button_t *psButtons,
                             uint32_t ui32NumButtons)
{
     144:	b580      	push	{r7, lr}
     146:	b084      	sub	sp, #16
     148:	af00      	add	r7, sp, #0
     14a:	6078      	str	r0, [r7, #4]
     14c:	6039      	str	r1, [r7, #0]
    uint32_t i;

    //
    // Loop through the list of buttons, configuring each one individually.
    //
    for ( i = 0; i < ui32NumButtons; i++ )
     14e:	2300      	movs	r3, #0
     150:	60fb      	str	r3, [r7, #12]
     152:	e009      	b.n	168 <am_devices_button_array_init+0x24>
    {
        am_devices_button_init(psButtons + i);
     154:	68fb      	ldr	r3, [r7, #12]
     156:	011b      	lsls	r3, r3, #4
     158:	687a      	ldr	r2, [r7, #4]
     15a:	4413      	add	r3, r2
     15c:	4618      	mov	r0, r3
     15e:	f7ff ff8f 	bl	80 <am_devices_button_init>
    for ( i = 0; i < ui32NumButtons; i++ )
     162:	68fb      	ldr	r3, [r7, #12]
     164:	3301      	adds	r3, #1
     166:	60fb      	str	r3, [r7, #12]
     168:	68fa      	ldr	r2, [r7, #12]
     16a:	683b      	ldr	r3, [r7, #0]
     16c:	429a      	cmp	r2, r3
     16e:	d3f1      	bcc.n	154 <am_devices_button_array_init+0x10>
    }
}
     170:	bf00      	nop
     172:	3710      	adds	r7, #16
     174:	46bd      	mov	sp, r7
     176:	bd80      	pop	{r7, pc}

00000178 <am_devices_button_tick>:
//! @return None.
//
//*****************************************************************************
void
am_devices_button_tick(am_devices_button_t *psButton)
{
     178:	b490      	push	{r4, r7}
     17a:	b084      	sub	sp, #16
     17c:	af00      	add	r7, sp, #0
     17e:	6078      	str	r0, [r7, #4]
    // Enable the button pin.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_INPUT);
#else
    am_hal_gpio_pin_config(psButton->ui32GPIONumber, AM_HAL_PIN_INPUT);
     180:	687b      	ldr	r3, [r7, #4]
     182:	681b      	ldr	r3, [r3, #0]
     184:	2b00      	cmp	r3, #0
     186:	db46      	blt.n	216 <am_devices_button_tick+0x9e>
     188:	4b6a      	ldr	r3, [pc, #424]	; (334 <am_devices_button_tick+0x1bc>)
     18a:	2273      	movs	r2, #115	; 0x73
     18c:	601a      	str	r2, [r3, #0]
     18e:	687b      	ldr	r3, [r7, #4]
     190:	681b      	ldr	r3, [r3, #0]
     192:	085b      	lsrs	r3, r3, #1
     194:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     198:	4b67      	ldr	r3, [pc, #412]	; (338 <am_devices_button_tick+0x1c0>)
     19a:	4413      	add	r3, r2
     19c:	4618      	mov	r0, r3
     19e:	687b      	ldr	r3, [r7, #4]
     1a0:	681b      	ldr	r3, [r3, #0]
     1a2:	085b      	lsrs	r3, r3, #1
     1a4:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     1a8:	4b63      	ldr	r3, [pc, #396]	; (338 <am_devices_button_tick+0x1c0>)
     1aa:	4413      	add	r3, r2
     1ac:	681a      	ldr	r2, [r3, #0]
     1ae:	687b      	ldr	r3, [r7, #4]
     1b0:	681b      	ldr	r3, [r3, #0]
     1b2:	009b      	lsls	r3, r3, #2
     1b4:	f003 031c 	and.w	r3, r3, #28
     1b8:	2107      	movs	r1, #7
     1ba:	fa01 f303 	lsl.w	r3, r1, r3
     1be:	43db      	mvns	r3, r3
     1c0:	4013      	ands	r3, r2
     1c2:	6003      	str	r3, [r0, #0]
     1c4:	687b      	ldr	r3, [r7, #4]
     1c6:	681b      	ldr	r3, [r3, #0]
     1c8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     1cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     1d0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     1d4:	461c      	mov	r4, r3
     1d6:	687b      	ldr	r3, [r7, #4]
     1d8:	681b      	ldr	r3, [r3, #0]
     1da:	00db      	lsls	r3, r3, #3
     1dc:	f003 0318 	and.w	r3, r3, #24
     1e0:	221a      	movs	r2, #26
     1e2:	409a      	lsls	r2, r3
     1e4:	687b      	ldr	r3, [r7, #4]
     1e6:	681b      	ldr	r3, [r3, #0]
     1e8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     1ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     1f0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     1f4:	6819      	ldr	r1, [r3, #0]
     1f6:	687b      	ldr	r3, [r7, #4]
     1f8:	681b      	ldr	r3, [r3, #0]
     1fa:	00db      	lsls	r3, r3, #3
     1fc:	f003 0318 	and.w	r3, r3, #24
     200:	20ff      	movs	r0, #255	; 0xff
     202:	fa00 f303 	lsl.w	r3, r0, r3
     206:	43db      	mvns	r3, r3
     208:	400b      	ands	r3, r1
     20a:	4313      	orrs	r3, r2
     20c:	6023      	str	r3, [r4, #0]
     20e:	4b49      	ldr	r3, [pc, #292]	; (334 <am_devices_button_tick+0x1bc>)
     210:	2200      	movs	r2, #0
     212:	601a      	str	r2, [r3, #0]
     214:	e000      	b.n	218 <am_devices_button_tick+0xa0>
     216:	bf00      	nop
    // its "state" counter to zero.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_state_read(psButton->ui32GPIONumber, AM_HAL_GPIO_INPUT_READ, &ui32PinState);
#else
    ui32PinState = am_hal_gpio_input_bit_read(psButton->ui32GPIONumber);
     218:	687b      	ldr	r3, [r7, #4]
     21a:	681b      	ldr	r3, [r3, #0]
     21c:	08db      	lsrs	r3, r3, #3
     21e:	f003 0204 	and.w	r2, r3, #4
     222:	4b46      	ldr	r3, [pc, #280]	; (33c <am_devices_button_tick+0x1c4>)
     224:	4413      	add	r3, r2
     226:	681a      	ldr	r2, [r3, #0]
     228:	687b      	ldr	r3, [r7, #4]
     22a:	681b      	ldr	r3, [r3, #0]
     22c:	f003 031f 	and.w	r3, r3, #31
     230:	fa22 f303 	lsr.w	r3, r2, r3
     234:	f003 0301 	and.w	r3, r3, #1
     238:	2b00      	cmp	r3, #0
     23a:	bf14      	ite	ne
     23c:	2301      	movne	r3, #1
     23e:	2300      	moveq	r3, #0
     240:	b2db      	uxtb	r3, r3
     242:	60fb      	str	r3, [r7, #12]
#endif

    //
    // Check to see if the button is "pressed" according to our GPIO reading.
    //
    bRawButtonPressed = (ui32PinState != psButton->ui32Polarity);
     244:	687b      	ldr	r3, [r7, #4]
     246:	685a      	ldr	r2, [r3, #4]
     248:	68fb      	ldr	r3, [r7, #12]
     24a:	429a      	cmp	r2, r3
     24c:	bf14      	ite	ne
     24e:	2301      	movne	r3, #1
     250:	2300      	moveq	r3, #0
     252:	72fb      	strb	r3, [r7, #11]

    //
    // Is this button state different from the last saved state?
    //
    if ( bRawButtonPressed != psButton->bPressed )
     254:	687b      	ldr	r3, [r7, #4]
     256:	7b1b      	ldrb	r3, [r3, #12]
     258:	7afa      	ldrb	r2, [r7, #11]
     25a:	429a      	cmp	r2, r3
     25c:	d005      	beq.n	26a <am_devices_button_tick+0xf2>
    {
        //
        // If so, increase the debounce count.
        //
        psButton->ui32Count++;
     25e:	687b      	ldr	r3, [r7, #4]
     260:	689b      	ldr	r3, [r3, #8]
     262:	1c5a      	adds	r2, r3, #1
     264:	687b      	ldr	r3, [r7, #4]
     266:	609a      	str	r2, [r3, #8]
     268:	e002      	b.n	270 <am_devices_button_tick+0xf8>
    else
    {
        //
        // Otherwise, set the count back to zero.
        //
        psButton->ui32Count = 0;
     26a:	687b      	ldr	r3, [r7, #4]
     26c:	2200      	movs	r2, #0
     26e:	609a      	str	r2, [r3, #8]

    //
    // If we hit the button debounce delay, record a button press to the
    // structure, and reset the count.
    //
    if ( psButton->ui32Count >= AM_DEVICES_BUTTON_DEBOUNCE_DELAY )
     270:	687b      	ldr	r3, [r7, #4]
     272:	689b      	ldr	r3, [r3, #8]
     274:	2b03      	cmp	r3, #3
     276:	d909      	bls.n	28c <am_devices_button_tick+0x114>
    {
        psButton->bPressed = bRawButtonPressed;
     278:	687b      	ldr	r3, [r7, #4]
     27a:	7afa      	ldrb	r2, [r7, #11]
     27c:	731a      	strb	r2, [r3, #12]
        psButton->bChanged = true;
     27e:	687b      	ldr	r3, [r7, #4]
     280:	2201      	movs	r2, #1
     282:	735a      	strb	r2, [r3, #13]
        psButton->ui32Count = 0;
     284:	687b      	ldr	r3, [r7, #4]
     286:	2200      	movs	r2, #0
     288:	609a      	str	r2, [r3, #8]
     28a:	e002      	b.n	292 <am_devices_button_tick+0x11a>
    {
        //
        // If we didn't just record a press/release event, update the structure
        // to say that the current state isn't new.
        //
        psButton->bChanged = false;
     28c:	687b      	ldr	r3, [r7, #4]
     28e:	2200      	movs	r2, #0
     290:	735a      	strb	r2, [r3, #13]
    // Disable the button pin to save power.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
#else
    am_hal_gpio_pin_config(psButton->ui32GPIONumber, AM_HAL_PIN_DISABLE);
     292:	687b      	ldr	r3, [r7, #4]
     294:	681b      	ldr	r3, [r3, #0]
     296:	2b00      	cmp	r3, #0
     298:	db46      	blt.n	328 <am_devices_button_tick+0x1b0>
     29a:	4b26      	ldr	r3, [pc, #152]	; (334 <am_devices_button_tick+0x1bc>)
     29c:	2273      	movs	r2, #115	; 0x73
     29e:	601a      	str	r2, [r3, #0]
     2a0:	687b      	ldr	r3, [r7, #4]
     2a2:	681b      	ldr	r3, [r3, #0]
     2a4:	085b      	lsrs	r3, r3, #1
     2a6:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     2aa:	4b23      	ldr	r3, [pc, #140]	; (338 <am_devices_button_tick+0x1c0>)
     2ac:	4413      	add	r3, r2
     2ae:	4618      	mov	r0, r3
     2b0:	687b      	ldr	r3, [r7, #4]
     2b2:	681b      	ldr	r3, [r3, #0]
     2b4:	085b      	lsrs	r3, r3, #1
     2b6:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     2ba:	4b1f      	ldr	r3, [pc, #124]	; (338 <am_devices_button_tick+0x1c0>)
     2bc:	4413      	add	r3, r2
     2be:	681a      	ldr	r2, [r3, #0]
     2c0:	687b      	ldr	r3, [r7, #4]
     2c2:	681b      	ldr	r3, [r3, #0]
     2c4:	009b      	lsls	r3, r3, #2
     2c6:	f003 031c 	and.w	r3, r3, #28
     2ca:	2107      	movs	r1, #7
     2cc:	fa01 f303 	lsl.w	r3, r1, r3
     2d0:	43db      	mvns	r3, r3
     2d2:	4013      	ands	r3, r2
     2d4:	6003      	str	r3, [r0, #0]
     2d6:	687b      	ldr	r3, [r7, #4]
     2d8:	681b      	ldr	r3, [r3, #0]
     2da:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     2de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     2e2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     2e6:	461c      	mov	r4, r3
     2e8:	687b      	ldr	r3, [r7, #4]
     2ea:	681b      	ldr	r3, [r3, #0]
     2ec:	00db      	lsls	r3, r3, #3
     2ee:	f003 0318 	and.w	r3, r3, #24
     2f2:	2218      	movs	r2, #24
     2f4:	409a      	lsls	r2, r3
     2f6:	687b      	ldr	r3, [r7, #4]
     2f8:	681b      	ldr	r3, [r3, #0]
     2fa:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     2fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     302:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     306:	6819      	ldr	r1, [r3, #0]
     308:	687b      	ldr	r3, [r7, #4]
     30a:	681b      	ldr	r3, [r3, #0]
     30c:	00db      	lsls	r3, r3, #3
     30e:	f003 0318 	and.w	r3, r3, #24
     312:	20ff      	movs	r0, #255	; 0xff
     314:	fa00 f303 	lsl.w	r3, r0, r3
     318:	43db      	mvns	r3, r3
     31a:	400b      	ands	r3, r1
     31c:	4313      	orrs	r3, r2
     31e:	6023      	str	r3, [r4, #0]
     320:	4b04      	ldr	r3, [pc, #16]	; (334 <am_devices_button_tick+0x1bc>)
     322:	2200      	movs	r2, #0
     324:	601a      	str	r2, [r3, #0]
#endif // AM_APOLLO3_GPIO
}
     326:	e000      	b.n	32a <am_devices_button_tick+0x1b2>
    am_hal_gpio_pin_config(psButton->ui32GPIONumber, AM_HAL_PIN_DISABLE);
     328:	bf00      	nop
}
     32a:	bf00      	nop
     32c:	3710      	adds	r7, #16
     32e:	46bd      	mov	sp, r7
     330:	bc90      	pop	{r4, r7}
     332:	4770      	bx	lr
     334:	40010060 	.word	0x40010060
     338:	40010040 	.word	0x40010040
     33c:	40010080 	.word	0x40010080

00000340 <iom_write_complete>:
// IOM write complete callback
//
//*****************************************************************************
static void
iom_write_complete(void)
{
     340:	b480      	push	{r7}
     342:	af00      	add	r7, sp, #0
    gIomDone = true;
     344:	4b03      	ldr	r3, [pc, #12]	; (354 <iom_write_complete+0x14>)
     346:	2201      	movs	r2, #1
     348:	701a      	strb	r2, [r3, #0]
}
     34a:	bf00      	nop
     34c:	46bd      	mov	sp, r7
     34e:	f85d 7b04 	ldr.w	r7, [sp], #4
     352:	4770      	bx	lr
     354:	10000855 	.word	0x10000855

00000358 <am_iomaster0_isr>:
//
//*****************************************************************************
#if (0 == AM_BSP_EM9304_IOM)
void
am_iomaster0_isr(void)
{
     358:	b580      	push	{r7, lr}
     35a:	b082      	sub	sp, #8
     35c:	af00      	add	r7, sp, #0
    uint32_t ui32IntStatus;

    //
    // Read and clear the interrupt status.
    //
    ui32IntStatus = am_hal_iom_int_status_get(0, false);
     35e:	2100      	movs	r1, #0
     360:	2000      	movs	r0, #0
     362:	f002 f937 	bl	25d4 <am_hal_iom_int_status_get>
     366:	6078      	str	r0, [r7, #4]
    am_hal_iom_int_clear(0, ui32IntStatus);
     368:	6879      	ldr	r1, [r7, #4]
     36a:	2000      	movs	r0, #0
     36c:	f002 f928 	bl	25c0 <am_hal_iom_int_clear>

    //
    // Service FIFO interrupts as necessary, and call IOM callbacks as
    // transfers are completed.
    //
    am_hal_iom_int_service(0, ui32IntStatus);
     370:	6879      	ldr	r1, [r7, #4]
     372:	2000      	movs	r0, #0
     374:	f001 fee4 	bl	2140 <am_hal_iom_int_service>
}
     378:	bf00      	nop
     37a:	3708      	adds	r7, #8
     37c:	46bd      	mov	sp, r7
     37e:	bd80      	pop	{r7, pc}

00000380 <am_devices_em9304_tx_starts>:
//! @return Number of bytes that can be written to EM9304.
//
//*****************************************************************************
uint8_t
am_devices_em9304_tx_starts(const am_devices_em9304_t *psDevice)
{
     380:	b590      	push	{r4, r7, lr}
     382:	b087      	sub	sp, #28
     384:	af02      	add	r7, sp, #8
     386:	6078      	str	r0, [r7, #4]
  // Indicates that a SPI transfer is in progress
  spiTxInProgress = 1;
     388:	4b1a      	ldr	r3, [pc, #104]	; (3f4 <am_devices_em9304_tx_starts+0x74>)
     38a:	2201      	movs	r2, #1
     38c:	701a      	strb	r2, [r3, #0]

  am_hal_iom_buffer(2) sCommand;
  am_hal_iom_buffer(2) sStas;
  sCommand.bytes[0] = EM9304_SPI_HEADER_TX;
     38e:	2342      	movs	r3, #66	; 0x42
     390:	733b      	strb	r3, [r7, #12]
  sCommand.bytes[1] = 0x0;
     392:	2300      	movs	r3, #0
     394:	737b      	strb	r3, [r7, #13]

  // Select the EM9304
  EM9304_SPISLAVESELECT();
     396:	4b18      	ldr	r3, [pc, #96]	; (3f8 <am_devices_em9304_tx_starts+0x78>)
     398:	f44f 6280 	mov.w	r2, #1024	; 0x400
     39c:	601a      	str	r2, [r3, #0]

  // Wait EM9304 RDY signal
  while ( !EM9304_RDY_INT() );
     39e:	bf00      	nop
     3a0:	f000 ff32 	bl	1208 <am_hal_gpio_input_read>
     3a4:	460a      	mov	r2, r1
     3a6:	4601      	mov	r1, r0
     3a8:	f04f 0300 	mov.w	r3, #0
     3ac:	f44f 5480 	mov.w	r4, #4096	; 0x1000
     3b0:	ea03 0301 	and.w	r3, r3, r1
     3b4:	ea04 0402 	and.w	r4, r4, r2
     3b8:	4323      	orrs	r3, r4
     3ba:	d0f1      	beq.n	3a0 <am_devices_em9304_tx_starts+0x20>
#endif
  {
    //
    // Write to the IOM.
    //
    am_hal_iom_spi_write(psDevice->ui32IOMModule,
     3bc:	687b      	ldr	r3, [r7, #4]
     3be:	6858      	ldr	r0, [r3, #4]
     3c0:	f107 020c 	add.w	r2, r7, #12
     3c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     3c8:	9300      	str	r3, [sp, #0]
     3ca:	2301      	movs	r3, #1
     3cc:	2100      	movs	r1, #0
     3ce:	f001 fb27 	bl	1a20 <am_hal_iom_spi_write>
                         AM_HAL_IOM_RAW);

    //
    // Read from the IOM.
    //
    am_hal_iom_spi_read(psDevice->ui32IOMModule,
     3d2:	687b      	ldr	r3, [r7, #4]
     3d4:	6858      	ldr	r0, [r3, #4]
     3d6:	f107 0208 	add.w	r2, r7, #8
     3da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     3de:	9300      	str	r3, [sp, #0]
     3e0:	2301      	movs	r3, #1
     3e2:	2100      	movs	r1, #0
     3e4:	f001 fe1a 	bl	201c <am_hal_iom_spi_read>
                        0, sStas.words, 1,
                        AM_HAL_IOM_RAW);

    return sStas.bytes[0];
     3e8:	7a3b      	ldrb	r3, [r7, #8]
  }
}
     3ea:	4618      	mov	r0, r3
     3ec:	3714      	adds	r7, #20
     3ee:	46bd      	mov	sp, r7
     3f0:	bd90      	pop	{r4, r7, pc}
     3f2:	bf00      	nop
     3f4:	10000854 	.word	0x10000854
     3f8:	4001009c 	.word	0x4001009c

000003fc <am_devices_em9304_tx_ends>:
//! @return None.
//
//*****************************************************************************
void
am_devices_em9304_tx_ends(void)
{
     3fc:	b580      	push	{r7, lr}
     3fe:	af00      	add	r7, sp, #0
    am_hal_iom_poll_complete(g_sEm9304.ui32IOMModule);
     400:	2300      	movs	r3, #0
     402:	4618      	mov	r0, r3
     404:	f001 fe92 	bl	212c <am_hal_iom_poll_complete>
    // Deselect the EM9304
    EM9304_SPISLAVEDESELECT();
     408:	4b04      	ldr	r3, [pc, #16]	; (41c <am_devices_em9304_tx_ends+0x20>)
     40a:	f44f 6280 	mov.w	r2, #1024	; 0x400
     40e:	601a      	str	r2, [r3, #0]

    // Indicates that the SPI transfer is finished
    spiTxInProgress = 0;
     410:	4b03      	ldr	r3, [pc, #12]	; (420 <am_devices_em9304_tx_ends+0x24>)
     412:	2200      	movs	r2, #0
     414:	701a      	strb	r2, [r3, #0]
}
     416:	bf00      	nop
     418:	bd80      	pop	{r7, pc}
     41a:	bf00      	nop
     41c:	40010094 	.word	0x40010094
     420:	10000854 	.word	0x10000854

00000424 <am_devices_em9304_block_write>:
void
am_devices_em9304_block_write(const am_devices_em9304_t *psDevice,
                              uint8_t type,
                              uint8_t *pui8Values,
                              uint32_t ui32NumBytes)
{
     424:	b590      	push	{r4, r7, lr}
     426:	b0cb      	sub	sp, #300	; 0x12c
     428:	af02      	add	r7, sp, #8
     42a:	f107 040c 	add.w	r4, r7, #12
     42e:	6020      	str	r0, [r4, #0]
     430:	4608      	mov	r0, r1
     432:	1d39      	adds	r1, r7, #4
     434:	600a      	str	r2, [r1, #0]
     436:	463a      	mov	r2, r7
     438:	6013      	str	r3, [r2, #0]
     43a:	f107 030b 	add.w	r3, r7, #11
     43e:	4602      	mov	r2, r0
     440:	701a      	strb	r2, [r3, #0]
  am_hal_iom_buffer(EM9304_BUFFER_SIZE) sData;
  uint8_t em9304BufSize = 0;
     442:	2300      	movs	r3, #0
     444:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  uint8_t hci_type_sent = 0;
     448:	2300      	movs	r3, #0
     44a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  // Check that we are not going to overwrite buffer.
  if ((ui32NumBytes + 1) > EM9304_BUFFER_SIZE)
     44e:	463b      	mov	r3, r7
     450:	681b      	ldr	r3, [r3, #0]
     452:	3301      	adds	r3, #1
     454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     458:	f200 809a 	bhi.w	590 <am_devices_em9304_block_write+0x16c>
  {
    am_util_debug_printf("HCI TX Error (STATUS ERROR) Packet Too Large\n");
    return;
  }

  for ( uint32_t i = 0; i < ui32NumBytes; )
     45c:	2300      	movs	r3, #0
     45e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
     462:	e08d      	b.n	580 <am_devices_em9304_block_write+0x15c>
  {
    if ( i < ui32NumBytes )
     464:	463b      	mov	r3, r7
     466:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
     46a:	681b      	ldr	r3, [r3, #0]
     46c:	429a      	cmp	r2, r3
     46e:	d207      	bcs.n	480 <am_devices_em9304_block_write+0x5c>
    {
      em9304BufSize = am_devices_em9304_tx_starts(psDevice);
     470:	f107 030c 	add.w	r3, r7, #12
     474:	6818      	ldr	r0, [r3, #0]
     476:	f7ff ff83 	bl	380 <am_devices_em9304_tx_starts>
     47a:	4603      	mov	r3, r0
     47c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    }

    uint32_t len = (em9304BufSize < (ui32NumBytes - i)) ? em9304BufSize : (ui32NumBytes - i);
     480:	463b      	mov	r3, r7
     482:	681a      	ldr	r2, [r3, #0]
     484:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
     488:	1ad2      	subs	r2, r2, r3
     48a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
     48e:	4293      	cmp	r3, r2
     490:	bf28      	it	cs
     492:	4613      	movcs	r3, r2
     494:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    if (len > 0)  // check again if there is room to send more data
     498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
     49c:	2b00      	cmp	r3, #0
     49e:	d06d      	beq.n	57c <am_devices_em9304_block_write+0x158>
    {
      if (hci_type_sent == 0)
     4a0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
     4a4:	2b00      	cmp	r3, #0
     4a6:	d11c      	bne.n	4e2 <am_devices_em9304_block_write+0xbe>
      {
        sData.bytes[0] = type;
     4a8:	f107 0310 	add.w	r3, r7, #16
     4ac:	f107 020b 	add.w	r2, r7, #11
     4b0:	7812      	ldrb	r2, [r2, #0]
     4b2:	701a      	strb	r2, [r3, #0]
        memcpy(&(sData.bytes[1]), pui8Values, len - 1);
     4b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
     4b8:	1e59      	subs	r1, r3, #1
     4ba:	1d3b      	adds	r3, r7, #4
     4bc:	f107 0210 	add.w	r2, r7, #16
     4c0:	1c50      	adds	r0, r2, #1
     4c2:	460a      	mov	r2, r1
     4c4:	6819      	ldr	r1, [r3, #0]
     4c6:	f002 faf3 	bl	2ab0 <memcpy>
        i += len -1;
     4ca:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
     4ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
     4d2:	4413      	add	r3, r2
     4d4:	3b01      	subs	r3, #1
     4d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
        hci_type_sent = 1;
     4da:	2301      	movs	r3, #1
     4dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
     4e0:	e012      	b.n	508 <am_devices_em9304_block_write+0xe4>
      }
      else
      {
        memcpy(&(sData.bytes[0]), pui8Values + i, len);
     4e2:	1d3b      	adds	r3, r7, #4
     4e4:	681a      	ldr	r2, [r3, #0]
     4e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
     4ea:	18d1      	adds	r1, r2, r3
     4ec:	f107 0310 	add.w	r3, r7, #16
     4f0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
     4f4:	4618      	mov	r0, r3
     4f6:	f002 fadb 	bl	2ab0 <memcpy>
        i += len;
     4fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
     4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
     502:	4413      	add	r3, r2
     504:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
      }

      while ( !EM9304_RDY_INT() );
     508:	bf00      	nop
     50a:	f000 fe7d 	bl	1208 <am_hal_gpio_input_read>
     50e:	460a      	mov	r2, r1
     510:	4601      	mov	r1, r0
     512:	f04f 0300 	mov.w	r3, #0
     516:	f44f 5480 	mov.w	r4, #4096	; 0x1000
     51a:	ea03 0301 	and.w	r3, r3, r1
     51e:	ea04 0402 	and.w	r4, r4, r2
     522:	4323      	orrs	r3, r4
     524:	d0f1      	beq.n	50a <am_devices_em9304_block_write+0xe6>

#if defined(USE_IOM_NONBLOCKING)
      gIomDone = false;
     526:	4b1d      	ldr	r3, [pc, #116]	; (59c <am_devices_em9304_block_write+0x178>)
     528:	2200      	movs	r2, #0
     52a:	701a      	strb	r2, [r3, #0]
      am_hal_iom_spi_write_nb(psDevice->ui32IOMModule,
     52c:	f107 030c 	add.w	r3, r7, #12
     530:	681b      	ldr	r3, [r3, #0]
     532:	6858      	ldr	r0, [r3, #4]
     534:	f107 0210 	add.w	r2, r7, #16
     538:	4b19      	ldr	r3, [pc, #100]	; (5a0 <am_devices_em9304_block_write+0x17c>)
     53a:	9301      	str	r3, [sp, #4]
     53c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     540:	9300      	str	r3, [sp, #0]
     542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
     546:	2100      	movs	r1, #0
     548:	f001 fcb4 	bl	1eb4 <am_hal_iom_spi_write_nb>
      while(1)
      {
        //
        // Disable interrupt while we decide whether we're going to sleep.
        //
        uint32_t ui32IntStatus = am_hal_interrupt_master_disable();
     54c:	f000 fed4 	bl	12f8 <am_hal_interrupt_master_disable>
     550:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        if (!gIomDone)
     554:	4b11      	ldr	r3, [pc, #68]	; (59c <am_devices_em9304_block_write+0x178>)
     556:	781b      	ldrb	r3, [r3, #0]
     558:	b2db      	uxtb	r3, r3
     55a:	f083 0301 	eor.w	r3, r3, #1
     55e:	b2db      	uxtb	r3, r3
     560:	2b00      	cmp	r3, #0
     562:	d007      	beq.n	574 <am_devices_em9304_block_write+0x150>
        {
          //
          // Sleep while waiting for the IOM transaction to finish.
          //
          am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     564:	2001      	movs	r0, #1
     566:	f002 f92f 	bl	27c8 <am_hal_sysctrl_sleep>
          //
          // Enable interrupts
          //
          am_hal_interrupt_master_set(ui32IntStatus);
     56a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
     56e:	f000 fec7 	bl	1300 <am_hal_interrupt_master_set>
     572:	e7eb      	b.n	54c <am_devices_em9304_block_write+0x128>
        else
        {
          //
          // Enable interrupts
          //
          am_hal_interrupt_master_set(ui32IntStatus);
     574:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
     578:	f000 fec2 	bl	1300 <am_hal_interrupt_master_set>
                           0, sData.words, len,
                           AM_HAL_IOM_RAW);
#endif
    }

    am_devices_em9304_tx_ends();
     57c:	f7ff ff3e 	bl	3fc <am_devices_em9304_tx_ends>
  for ( uint32_t i = 0; i < ui32NumBytes; )
     580:	463b      	mov	r3, r7
     582:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
     586:	681b      	ldr	r3, [r3, #0]
     588:	429a      	cmp	r2, r3
     58a:	f4ff af6b 	bcc.w	464 <am_devices_em9304_block_write+0x40>
     58e:	e000      	b.n	592 <am_devices_em9304_block_write+0x16e>
    return;
     590:	bf00      	nop

  }
}
     592:	f507 7792 	add.w	r7, r7, #292	; 0x124
     596:	46bd      	mov	sp, r7
     598:	bd90      	pop	{r4, r7, pc}
     59a:	bf00      	nop
     59c:	10000855 	.word	0x10000855
     5a0:	00000341 	.word	0x00000341

000005a4 <am_devices_em9304_block_read>:
//*****************************************************************************
uint32_t
am_devices_em9304_block_read(const am_devices_em9304_t *psDevice,
                             uint32_t *pui32Values,
                             uint32_t ui32NumBytes)
{
     5a4:	b590      	push	{r4, r7, lr}
     5a6:	b08d      	sub	sp, #52	; 0x34
     5a8:	af02      	add	r7, sp, #8
     5aa:	60f8      	str	r0, [r7, #12]
     5ac:	60b9      	str	r1, [r7, #8]
     5ae:	607a      	str	r2, [r7, #4]
  am_hal_iom_buffer(2) sCommand;
  am_hal_iom_buffer(2) sStas;
  uint8_t ui8RxBytes;
  uint8_t spiRxTotalBytesCount = 0;
     5b0:	2300      	movs	r3, #0
     5b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


  sCommand.bytes[0] = EM9304_SPI_HEADER_RX;
     5b6:	2381      	movs	r3, #129	; 0x81
     5b8:	763b      	strb	r3, [r7, #24]
  sCommand.bytes[1] = 0x0;
     5ba:	2300      	movs	r3, #0
     5bc:	767b      	strb	r3, [r7, #25]

  //
  // Check if the SPI is free
  //
  if ( spiTxInProgress )
     5be:	4b46      	ldr	r3, [pc, #280]	; (6d8 <am_devices_em9304_block_read+0x134>)
     5c0:	781b      	ldrb	r3, [r3, #0]
     5c2:	2b00      	cmp	r3, #0
     5c4:	d001      	beq.n	5ca <am_devices_em9304_block_read+0x26>
  {
    //
    // TX in progress -> Ignore RDY interrupt
    //
    am_util_debug_printf("HCI TX in progress\n");
    return 0;
     5c6:	2300      	movs	r3, #0
     5c8:	e081      	b.n	6ce <am_devices_em9304_block_read+0x12a>
  }

  //
  // Check if they are still data to read
  //
  if ( !EM9304_RDY_INT() )
     5ca:	f000 fe1d 	bl	1208 <am_hal_gpio_input_read>
     5ce:	460a      	mov	r2, r1
     5d0:	4601      	mov	r1, r0
     5d2:	f04f 0300 	mov.w	r3, #0
     5d6:	f44f 5480 	mov.w	r4, #4096	; 0x1000
     5da:	ea03 0301 	and.w	r3, r3, r1
     5de:	ea04 0402 	and.w	r4, r4, r2
     5e2:	4323      	orrs	r3, r4
     5e4:	d101      	bne.n	5ea <am_devices_em9304_block_read+0x46>
  {
    // No data
    //am_util_debug_printf("HCI No data\n");
    return 0;
     5e6:	2300      	movs	r3, #0
     5e8:	e071      	b.n	6ce <am_devices_em9304_block_read+0x12a>
  }

  //
  // Select the EM9304
  //
  EM9304_SPISLAVESELECT();
     5ea:	4b3c      	ldr	r3, [pc, #240]	; (6dc <am_devices_em9304_block_read+0x138>)
     5ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
     5f0:	601a      	str	r2, [r3, #0]
#endif
  {
    //
    // Write to the IOM.
    //
    am_hal_iom_spi_write(psDevice->ui32IOMModule,
     5f2:	68fb      	ldr	r3, [r7, #12]
     5f4:	6858      	ldr	r0, [r3, #4]
     5f6:	f107 0218 	add.w	r2, r7, #24
     5fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     5fe:	9300      	str	r3, [sp, #0]
     600:	2301      	movs	r3, #1
     602:	2100      	movs	r1, #0
     604:	f001 fa0c 	bl	1a20 <am_hal_iom_spi_write>
                         AM_HAL_IOM_RAW);

    //
    // Read from the IOM.
    //
    am_hal_iom_spi_read(psDevice->ui32IOMModule,
     608:	68fb      	ldr	r3, [r7, #12]
     60a:	6858      	ldr	r0, [r3, #4]
     60c:	f107 0214 	add.w	r2, r7, #20
     610:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     614:	9300      	str	r3, [sp, #0]
     616:	2301      	movs	r3, #1
     618:	2100      	movs	r1, #0
     61a:	f001 fcff 	bl	201c <am_hal_iom_spi_read>
                        AM_HAL_IOM_RAW);

    //
    // Set the number of bytes to receive.
    //
    ui8RxBytes = sStas.bytes[0];
     61e:	7d3b      	ldrb	r3, [r7, #20]
     620:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }

  while ( EM9304_RDY_INT() && (spiRxTotalBytesCount < ui8RxBytes) && (ui8RxBytes != 0))
     624:	e035      	b.n	692 <am_devices_em9304_block_read+0xee>
  {
    uint32_t len = 1;
     626:	2301      	movs	r3, #1
     628:	623b      	str	r3, [r7, #32]

    if ( (ui8RxBytes - spiRxTotalBytesCount) >= EM9304_BUFFER_SIZE )
     62a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
     62e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
     632:	1ad3      	subs	r3, r2, r3
     634:	2bff      	cmp	r3, #255	; 0xff
     636:	dd01      	ble.n	63c <am_devices_em9304_block_read+0x98>
      //
      // Error. Packet too large.
      //
      am_util_debug_printf("HCI RX Error (STATUS ERROR) Packet Too Large\n");
      am_util_debug_printf("%d, %d\n", sStas.bytes[0], sStas.bytes[1]);
      return 0;
     638:	2300      	movs	r3, #0
     63a:	e048      	b.n	6ce <am_devices_em9304_block_read+0x12a>
    }
    else
    {
      len = ui8RxBytes;
     63c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
     640:	623b      	str	r3, [r7, #32]
    }

#if defined(USE_IOM_NONBLOCKING)
    gIomDone = false;
     642:	4b27      	ldr	r3, [pc, #156]	; (6e0 <am_devices_em9304_block_read+0x13c>)
     644:	2200      	movs	r2, #0
     646:	701a      	strb	r2, [r3, #0]
    am_hal_iom_spi_read_nb(psDevice->ui32IOMModule,
     648:	68fb      	ldr	r3, [r7, #12]
     64a:	6858      	ldr	r0, [r3, #4]
     64c:	4b25      	ldr	r3, [pc, #148]	; (6e4 <am_devices_em9304_block_read+0x140>)
     64e:	9301      	str	r3, [sp, #4]
     650:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     654:	9300      	str	r3, [sp, #0]
     656:	6a3b      	ldr	r3, [r7, #32]
     658:	68ba      	ldr	r2, [r7, #8]
     65a:	2100      	movs	r1, #0
     65c:	f001 fc32 	bl	1ec4 <am_hal_iom_spi_read_nb>
    while(1)
    {
      //
      // Disable interrupt while we decide whether we're going to sleep.
      //
      uint32_t ui32IntStatus = am_hal_interrupt_master_disable();
     660:	f000 fe4a 	bl	12f8 <am_hal_interrupt_master_disable>
     664:	61f8      	str	r0, [r7, #28]

      if (!gIomDone)
     666:	4b1e      	ldr	r3, [pc, #120]	; (6e0 <am_devices_em9304_block_read+0x13c>)
     668:	781b      	ldrb	r3, [r3, #0]
     66a:	b2db      	uxtb	r3, r3
     66c:	f083 0301 	eor.w	r3, r3, #1
     670:	b2db      	uxtb	r3, r3
     672:	2b00      	cmp	r3, #0
     674:	d006      	beq.n	684 <am_devices_em9304_block_read+0xe0>
      {
        //
        // Sleep while waiting for the IOM transaction to finish.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     676:	2001      	movs	r0, #1
     678:	f002 f8a6 	bl	27c8 <am_hal_sysctrl_sleep>
        //
        // Enable interrupts
        //
        am_hal_interrupt_master_set(ui32IntStatus);
     67c:	69f8      	ldr	r0, [r7, #28]
     67e:	f000 fe3f 	bl	1300 <am_hal_interrupt_master_set>
     682:	e7ed      	b.n	660 <am_devices_em9304_block_read+0xbc>
      else
      {
        //
        // Enable interrupts
        //
        am_hal_interrupt_master_set(ui32IntStatus);
     684:	69f8      	ldr	r0, [r7, #28]
     686:	f000 fe3b 	bl	1300 <am_hal_interrupt_master_set>
        break;
     68a:	bf00      	nop
    am_hal_iom_spi_read(psDevice->ui32IOMModule,
                        0, pui32Values,
                        len, AM_HAL_IOM_RAW);
#endif

    spiRxTotalBytesCount = len;
     68c:	6a3b      	ldr	r3, [r7, #32]
     68e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  while ( EM9304_RDY_INT() && (spiRxTotalBytesCount < ui8RxBytes) && (ui8RxBytes != 0))
     692:	f000 fdb9 	bl	1208 <am_hal_gpio_input_read>
     696:	460a      	mov	r2, r1
     698:	4601      	mov	r1, r0
     69a:	f04f 0300 	mov.w	r3, #0
     69e:	f44f 5480 	mov.w	r4, #4096	; 0x1000
     6a2:	ea03 0301 	and.w	r3, r3, r1
     6a6:	ea04 0402 	and.w	r4, r4, r2
     6aa:	4323      	orrs	r3, r4
     6ac:	d009      	beq.n	6c2 <am_devices_em9304_block_read+0x11e>
     6ae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
     6b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
     6b6:	429a      	cmp	r2, r3
     6b8:	d203      	bcs.n	6c2 <am_devices_em9304_block_read+0x11e>
     6ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
     6be:	2b00      	cmp	r3, #0
     6c0:	d1b1      	bne.n	626 <am_devices_em9304_block_read+0x82>
  }

  // Deselect the EM9304
  EM9304_SPISLAVEDESELECT();
     6c2:	4b09      	ldr	r3, [pc, #36]	; (6e8 <am_devices_em9304_block_read+0x144>)
     6c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
     6c8:	601a      	str	r2, [r3, #0]

  return spiRxTotalBytesCount;
     6ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
     6ce:	4618      	mov	r0, r3
     6d0:	372c      	adds	r7, #44	; 0x2c
     6d2:	46bd      	mov	sp, r7
     6d4:	bd90      	pop	{r4, r7, pc}
     6d6:	bf00      	nop
     6d8:	10000854 	.word	0x10000854
     6dc:	4001009c 	.word	0x4001009c
     6e0:	10000855 	.word	0x10000855
     6e4:	00000341 	.word	0x00000341
     6e8:	40010094 	.word	0x40010094

000006ec <am_devices_em9304_spi_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_em9304_spi_init(uint32_t ui32Module, const am_hal_iom_config_t *psIomConfig)
{
     6ec:	b580      	push	{r7, lr}
     6ee:	b082      	sub	sp, #8
     6f0:	af00      	add	r7, sp, #0
     6f2:	6078      	str	r0, [r7, #4]
     6f4:	6039      	str	r1, [r7, #0]
    if ( AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_IFCEN_M )
     6f6:	687b      	ldr	r3, [r7, #4]
     6f8:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
     6fc:	3304      	adds	r3, #4
     6fe:	031b      	lsls	r3, r3, #12
     700:	f503 738e 	add.w	r3, r3, #284	; 0x11c
     704:	681b      	ldr	r3, [r3, #0]
     706:	2b00      	cmp	r3, #0
     708:	db18      	blt.n	73c <am_devices_em9304_spi_init+0x50>
    am_hal_iom_pwrctrl_enable(ui32Module);
#endif
    //
    // Setup the pins for SPI mode.
    //
    am_bsp_iom_spi_pins_enable(ui32Module);
     70a:	6878      	ldr	r0, [r7, #4]
     70c:	f000 fb6c 	bl	de8 <am_bsp_iom_spi_pins_enable>

    //
    // Set the required configuration settings for the IOM.
    //
    am_hal_iom_config(ui32Module, psIomConfig);
     710:	6839      	ldr	r1, [r7, #0]
     712:	6878      	ldr	r0, [r7, #4]
     714:	f000 ff7a 	bl	160c <am_hal_iom_config>

    // Enable spi
    am_hal_iom_enable(ui32Module);
     718:	6878      	ldr	r0, [r7, #4]
     71a:	f000 fee9 	bl	14f0 <am_hal_iom_enable>

#if defined(USE_IOM_NONBLOCKING)
    //
    // Enable interrupts.
    //
    am_hal_iom_int_clear(ui32Module, AM_HAL_IOM_INT_CMDCMP | AM_HAL_IOM_INT_THR);
     71e:	2103      	movs	r1, #3
     720:	6878      	ldr	r0, [r7, #4]
     722:	f001 ff4d 	bl	25c0 <am_hal_iom_int_clear>
    am_hal_iom_int_enable(ui32Module, AM_HAL_IOM_INT_CMDCMP | AM_HAL_IOM_INT_THR);
     726:	2103      	movs	r1, #3
     728:	6878      	ldr	r0, [r7, #4]
     72a:	f001 ff3d 	bl	25a8 <am_hal_iom_int_enable>

#if (0 == AM_BSP_EM9304_IOM)
      am_hal_interrupt_enable(AM_HAL_INTERRUPT_IOMASTER0);
     72e:	2016      	movs	r0, #22
     730:	f000 fdb6 	bl	12a0 <am_hal_interrupt_enable>
#endif

    //
    // Reset the IOM Done flag.
    //
    gIomDone = false;
     734:	4b03      	ldr	r3, [pc, #12]	; (744 <am_devices_em9304_spi_init+0x58>)
     736:	2200      	movs	r2, #0
     738:	701a      	strb	r2, [r3, #0]
     73a:	e000      	b.n	73e <am_devices_em9304_spi_init+0x52>
        return;
     73c:	bf00      	nop
#endif

}
     73e:	3708      	adds	r7, #8
     740:	46bd      	mov	sp, r7
     742:	bd80      	pop	{r7, pc}
     744:	10000855 	.word	0x10000855

00000748 <am_devices_em9304_spi_awake>:
//! @return None.
//
//*****************************************************************************
void
am_devices_em9304_spi_awake(uint32_t ui32Module)
{
     748:	b580      	push	{r7, lr}
     74a:	b082      	sub	sp, #8
     74c:	af00      	add	r7, sp, #0
     74e:	6078      	str	r0, [r7, #4]

    if ( AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_IFCEN_M )
     750:	687b      	ldr	r3, [r7, #4]
     752:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
     756:	3304      	adds	r3, #4
     758:	031b      	lsls	r3, r3, #12
     75a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
     75e:	681b      	ldr	r3, [r3, #0]
     760:	2b00      	cmp	r3, #0
     762:	db06      	blt.n	772 <am_devices_em9304_spi_awake+0x2a>
#endif

    //
    // Setup the pins for SPI mode.
    //
    am_bsp_iom_spi_pins_enable(ui32Module);
     764:	6878      	ldr	r0, [r7, #4]
     766:	f000 fb3f 	bl	de8 <am_bsp_iom_spi_pins_enable>

    // Enable spi
    am_hal_iom_enable(ui32Module);
     76a:	6878      	ldr	r0, [r7, #4]
     76c:	f000 fec0 	bl	14f0 <am_hal_iom_enable>
     770:	e000      	b.n	774 <am_devices_em9304_spi_awake+0x2c>
        return;
     772:	bf00      	nop
}
     774:	3708      	adds	r7, #8
     776:	46bd      	mov	sp, r7
     778:	bd80      	pop	{r7, pc}

0000077a <am_devices_em9304_spi_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_devices_em9304_spi_sleep(uint32_t ui32Module)
{
     77a:	b580      	push	{r7, lr}
     77c:	b082      	sub	sp, #8
     77e:	af00      	add	r7, sp, #0
     780:	6078      	str	r0, [r7, #4]
    if ( !(AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_IFCEN_M) )
     782:	687b      	ldr	r3, [r7, #4]
     784:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
     788:	3304      	adds	r3, #4
     78a:	031b      	lsls	r3, r3, #12
     78c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
     790:	681b      	ldr	r3, [r3, #0]
     792:	2b00      	cmp	r3, #0
     794:	da06      	bge.n	7a4 <am_devices_em9304_spi_sleep+0x2a>
    {
        return;
    }

    am_hal_iom_disable(ui32Module);
     796:	6878      	ldr	r0, [r7, #4]
     798:	f000 fef4 	bl	1584 <am_hal_iom_disable>

#if defined(AM_PART_APOLLO)
    am_bsp_iom_spi_pins_disable(ui32Module);
     79c:	6878      	ldr	r0, [r7, #4]
     79e:	f000 fb89 	bl	eb4 <am_bsp_iom_spi_pins_disable>
     7a2:	e000      	b.n	7a6 <am_devices_em9304_spi_sleep+0x2c>
        return;
     7a4:	bf00      	nop
#else
    am_hal_iom_power_off_save(ui32Module);
    am_devices_em9304_configure_spi_sleep();
#endif
}
     7a6:	3708      	adds	r7, #8
     7a8:	46bd      	mov	sp, r7
     7aa:	bd80      	pop	{r7, pc}

000007ac <am_devices_em9304_config_pins>:
//! @return None.
//
//*****************************************************************************
void
am_devices_em9304_config_pins(void)
{
     7ac:	b580      	push	{r7, lr}
     7ae:	af00      	add	r7, sp, #0
    am_hal_gpio_state_write(AM_BSP_GPIO_EM9304_CS, AM_HAL_GPIO_OUTPUT_SET);

    // Note - interrupt polarity is handled by the pin configuration.
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_EM9304_INT));
#else
    am_bsp_pin_enable(EM9304_CS);
     7b0:	4b20      	ldr	r3, [pc, #128]	; (834 <am_devices_em9304_config_pins+0x88>)
     7b2:	2273      	movs	r2, #115	; 0x73
     7b4:	601a      	str	r2, [r3, #0]
     7b6:	4a20      	ldr	r2, [pc, #128]	; (838 <am_devices_em9304_config_pins+0x8c>)
     7b8:	4b1f      	ldr	r3, [pc, #124]	; (838 <am_devices_em9304_config_pins+0x8c>)
     7ba:	681b      	ldr	r3, [r3, #0]
     7bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     7c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     7c4:	6013      	str	r3, [r2, #0]
     7c6:	4a1d      	ldr	r2, [pc, #116]	; (83c <am_devices_em9304_config_pins+0x90>)
     7c8:	4b1c      	ldr	r3, [pc, #112]	; (83c <am_devices_em9304_config_pins+0x90>)
     7ca:	681b      	ldr	r3, [r3, #0]
     7cc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     7d0:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
     7d4:	6013      	str	r3, [r2, #0]
     7d6:	4b17      	ldr	r3, [pc, #92]	; (834 <am_devices_em9304_config_pins+0x88>)
     7d8:	2200      	movs	r2, #0
     7da:	601a      	str	r2, [r3, #0]
    am_bsp_pin_enable(EM9304_INT);
     7dc:	4b15      	ldr	r3, [pc, #84]	; (834 <am_devices_em9304_config_pins+0x88>)
     7de:	2273      	movs	r2, #115	; 0x73
     7e0:	601a      	str	r2, [r3, #0]
     7e2:	4a15      	ldr	r2, [pc, #84]	; (838 <am_devices_em9304_config_pins+0x8c>)
     7e4:	4b14      	ldr	r3, [pc, #80]	; (838 <am_devices_em9304_config_pins+0x8c>)
     7e6:	681b      	ldr	r3, [r3, #0]
     7e8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
     7ec:	6013      	str	r3, [r2, #0]
     7ee:	4a14      	ldr	r2, [pc, #80]	; (840 <am_devices_em9304_config_pins+0x94>)
     7f0:	4b13      	ldr	r3, [pc, #76]	; (840 <am_devices_em9304_config_pins+0x94>)
     7f2:	681b      	ldr	r3, [r3, #0]
     7f4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     7f8:	f043 031a 	orr.w	r3, r3, #26
     7fc:	6013      	str	r3, [r2, #0]
     7fe:	4b0d      	ldr	r3, [pc, #52]	; (834 <am_devices_em9304_config_pins+0x88>)
     800:	2200      	movs	r2, #0
     802:	601a      	str	r2, [r3, #0]

    am_hal_gpio_out_bit_set(AM_BSP_GPIO_EM9304_CS);
     804:	4b0f      	ldr	r3, [pc, #60]	; (844 <am_devices_em9304_config_pins+0x98>)
     806:	f44f 6280 	mov.w	r2, #1024	; 0x400
     80a:	601a      	str	r2, [r3, #0]

    am_hal_gpio_int_polarity_bit_set(AM_BSP_GPIO_EM9304_INT, AM_HAL_GPIO_RISING);
     80c:	4b09      	ldr	r3, [pc, #36]	; (834 <am_devices_em9304_config_pins+0x88>)
     80e:	2273      	movs	r2, #115	; 0x73
     810:	601a      	str	r2, [r3, #0]
     812:	4a09      	ldr	r2, [pc, #36]	; (838 <am_devices_em9304_config_pins+0x8c>)
     814:	4b08      	ldr	r3, [pc, #32]	; (838 <am_devices_em9304_config_pins+0x8c>)
     816:	681b      	ldr	r3, [r3, #0]
     818:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
     81c:	6013      	str	r3, [r2, #0]
     81e:	4b05      	ldr	r3, [pc, #20]	; (834 <am_devices_em9304_config_pins+0x88>)
     820:	2200      	movs	r2, #0
     822:	601a      	str	r2, [r3, #0]
    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_EM9304_INT));
     824:	f04f 0000 	mov.w	r0, #0
     828:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     82c:	f000 fd0c 	bl	1248 <am_hal_gpio_int_clear>
#endif // AM_APOLLO3_GPIO
}
     830:	bf00      	nop
     832:	bd80      	pop	{r7, pc}
     834:	40010060 	.word	0x40010060
     838:	40010054 	.word	0x40010054
     83c:	40010028 	.word	0x40010028
     840:	4001002c 	.word	0x4001002c
     844:	40010094 	.word	0x40010094

00000848 <am_devices_em9304_enable_interrupt>:

    return true;
}

void am_devices_em9304_enable_interrupt(void)
{
     848:	b580      	push	{r7, lr}
     84a:	af00      	add	r7, sp, #0
#if AM_APOLLO3_GPIO
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_EM9304_INT));
#else
    am_hal_gpio_int_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_EM9304_INT));
     84c:	f04f 0000 	mov.w	r0, #0
     850:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     854:	f000 fce8 	bl	1228 <am_hal_gpio_int_enable>
#endif
}
     858:	bf00      	nop
     85a:	bd80      	pop	{r7, pc}

0000085c <timer_init>:
// Set up a CTIMER at 32KHz
//
//*****************************************************************************
void
timer_init(void)
{
     85c:	b580      	push	{r7, lr}
     85e:	af00      	add	r7, sp, #0
    am_hal_ctimer_config_single(0, AM_HAL_CTIMER_TIMERA,
     860:	f44f 7211 	mov.w	r2, #580	; 0x244
     864:	f64f 71ff 	movw	r1, #65535	; 0xffff
     868:	2000      	movs	r0, #0
     86a:	f000 fbc7 	bl	ffc <am_hal_ctimer_config_single>
                                   AM_HAL_CTIMER_HFRC_3MHZ |
                                   AM_HAL_CTIMER_FN_REPEAT |
                                   AM_HAL_CTIMER_INT_ENABLE);

    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
     86e:	2001      	movs	r0, #1
     870:	f000 fc30 	bl	10d4 <am_hal_ctimer_int_enable>

    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, 49, 25);
     874:	2319      	movs	r3, #25
     876:	2231      	movs	r2, #49	; 0x31
     878:	f64f 71ff 	movw	r1, #65535	; 0xffff
     87c:	2000      	movs	r0, #0
     87e:	f000 fbeb 	bl	1058 <am_hal_ctimer_period_set>


    //
    // Start the timer.
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
     882:	f64f 71ff 	movw	r1, #65535	; 0xffff
     886:	2000      	movs	r0, #0
     888:	f000 fbd4 	bl	1034 <am_hal_ctimer_start>

    //
    // Enable the timer interrupt.
    //
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
     88c:	2001      	movs	r0, #1
     88e:	f000 fc21 	bl	10d4 <am_hal_ctimer_int_enable>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_CTIMER);
     892:	201a      	movs	r0, #26
     894:	f000 fd04 	bl	12a0 <am_hal_interrupt_enable>
}
     898:	bf00      	nop
     89a:	bd80      	pop	{r7, pc}

0000089c <em9304_init>:
// Initialize the EM9304 BLE Controller
//
//*****************************************************************************
void
em9304_init(void)
{
     89c:	b580      	push	{r7, lr}
     89e:	af00      	add	r7, sp, #0
    //
    // Configurre the EM9303 pins.
    //
    am_hal_gpio_pin_config(HCI_APOLLO_RESET_PIN, AM_HAL_GPIO_OUTPUT);
     8a0:	4b22      	ldr	r3, [pc, #136]	; (92c <em9304_init+0x90>)
     8a2:	2273      	movs	r2, #115	; 0x73
     8a4:	601a      	str	r2, [r3, #0]
     8a6:	4a22      	ldr	r2, [pc, #136]	; (930 <em9304_init+0x94>)
     8a8:	4b21      	ldr	r3, [pc, #132]	; (930 <em9304_init+0x94>)
     8aa:	681b      	ldr	r3, [r3, #0]
     8ac:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     8b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     8b4:	6013      	str	r3, [r2, #0]
     8b6:	4a1f      	ldr	r2, [pc, #124]	; (934 <em9304_init+0x98>)
     8b8:	4b1e      	ldr	r3, [pc, #120]	; (934 <em9304_init+0x98>)
     8ba:	681b      	ldr	r3, [r3, #0]
     8bc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     8c0:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
     8c4:	6013      	str	r3, [r2, #0]
     8c6:	4b19      	ldr	r3, [pc, #100]	; (92c <em9304_init+0x90>)
     8c8:	2200      	movs	r2, #0
     8ca:	601a      	str	r2, [r3, #0]
    am_hal_gpio_pin_config(AM_BSP_GPIO_EM9304_PTM, AM_HAL_GPIO_OUTPUT);
     8cc:	4b17      	ldr	r3, [pc, #92]	; (92c <em9304_init+0x90>)
     8ce:	2273      	movs	r2, #115	; 0x73
     8d0:	601a      	str	r2, [r3, #0]
     8d2:	4a19      	ldr	r2, [pc, #100]	; (938 <em9304_init+0x9c>)
     8d4:	4b18      	ldr	r3, [pc, #96]	; (938 <em9304_init+0x9c>)
     8d6:	681b      	ldr	r3, [r3, #0]
     8d8:	f023 0307 	bic.w	r3, r3, #7
     8dc:	f043 0302 	orr.w	r3, r3, #2
     8e0:	6013      	str	r3, [r2, #0]
     8e2:	4a16      	ldr	r2, [pc, #88]	; (93c <em9304_init+0xa0>)
     8e4:	4b15      	ldr	r3, [pc, #84]	; (93c <em9304_init+0xa0>)
     8e6:	681b      	ldr	r3, [r3, #0]
     8e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     8ec:	f043 0318 	orr.w	r3, r3, #24
     8f0:	6013      	str	r3, [r2, #0]
     8f2:	4b0e      	ldr	r3, [pc, #56]	; (92c <em9304_init+0x90>)
     8f4:	2200      	movs	r2, #0
     8f6:	601a      	str	r2, [r3, #0]

    //
    // Assert RESET to the EM9304.
    //
    am_hal_gpio_out_bit_clear(HCI_APOLLO_RESET_PIN);
     8f8:	4b11      	ldr	r3, [pc, #68]	; (940 <em9304_init+0xa4>)
     8fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     8fe:	601a      	str	r2, [r3, #0]

    //
    // Setup SPI interface for EM9304
    //
    am_devices_em9304_config_pins();
     900:	f7ff ff54 	bl	7ac <am_devices_em9304_config_pins>
    am_devices_em9304_spi_init(g_sEm9304.ui32IOMModule, &g_sEm9304IOMConfigSPI);
     904:	4b0f      	ldr	r3, [pc, #60]	; (944 <em9304_init+0xa8>)
     906:	685b      	ldr	r3, [r3, #4]
     908:	490f      	ldr	r1, [pc, #60]	; (948 <em9304_init+0xac>)
     90a:	4618      	mov	r0, r3
     90c:	f7ff feee 	bl	6ec <am_devices_em9304_spi_init>

    // enable interrupt.
    am_devices_em9304_enable_interrupt();
     910:	f7ff ff9a 	bl	848 <am_devices_em9304_enable_interrupt>
    //
    // Delay for 20ms to make sure the em device gets ready for commands.
    //
    am_util_delay_ms(5);
     914:	2005      	movs	r0, #5
     916:	f000 f9bd 	bl	c94 <am_util_delay_ms>

    //
    // Enable the IOM and GPIO interrupt handlers.
    //
    am_hal_gpio_out_bit_set(HCI_APOLLO_RESET_PIN);
     91a:	4b0c      	ldr	r3, [pc, #48]	; (94c <em9304_init+0xb0>)
     91c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     920:	601a      	str	r2, [r3, #0]

    //am_hal_interrupt_enable(AM_HAL_INTERRUPT_GPIO);

    am_util_debug_printf("HciDrvRadioBoot complete\n");

    am_util_delay_ms(20);
     922:	2014      	movs	r0, #20
     924:	f000 f9b6 	bl	c94 <am_util_delay_ms>
}
     928:	bf00      	nop
     92a:	bd80      	pop	{r7, pc}
     92c:	40010060 	.word	0x40010060
     930:	40010054 	.word	0x40010054
     934:	4001002c 	.word	0x4001002c
     938:	40010058 	.word	0x40010058
     93c:	40010030 	.word	0x40010030
     940:	4001009c 	.word	0x4001009c
     944:	00002ad4 	.word	0x00002ad4
     948:	00002ac8 	.word	0x00002ac8
     94c:	40010094 	.word	0x40010094

00000950 <uart_init>:
// Initialize the UART
//
//*****************************************************************************
void
uart_init(uint32_t ui32Module)
{
     950:	b580      	push	{r7, lr}
     952:	b084      	sub	sp, #16
     954:	af02      	add	r7, sp, #8
     956:	6078      	str	r0, [r7, #4]
    //
    // Make sure the UART RX and TX pins are enabled.
    //
    am_bsp_pin_enable(COM_UART_TX);
     958:	4b26      	ldr	r3, [pc, #152]	; (9f4 <uart_init+0xa4>)
     95a:	2273      	movs	r2, #115	; 0x73
     95c:	601a      	str	r2, [r3, #0]
     95e:	4a26      	ldr	r2, [pc, #152]	; (9f8 <uart_init+0xa8>)
     960:	4b25      	ldr	r3, [pc, #148]	; (9f8 <uart_init+0xa8>)
     962:	681b      	ldr	r3, [r3, #0]
     964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
     968:	6013      	str	r3, [r2, #0]
     96a:	4a24      	ldr	r2, [pc, #144]	; (9fc <uart_init+0xac>)
     96c:	4b23      	ldr	r3, [pc, #140]	; (9fc <uart_init+0xac>)
     96e:	681b      	ldr	r3, [r3, #0]
     970:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     978:	6013      	str	r3, [r2, #0]
     97a:	4b1e      	ldr	r3, [pc, #120]	; (9f4 <uart_init+0xa4>)
     97c:	2200      	movs	r2, #0
     97e:	601a      	str	r2, [r3, #0]
    am_bsp_pin_enable(COM_UART_RX);
     980:	4b1c      	ldr	r3, [pc, #112]	; (9f4 <uart_init+0xa4>)
     982:	2273      	movs	r2, #115	; 0x73
     984:	601a      	str	r2, [r3, #0]
     986:	4a1c      	ldr	r2, [pc, #112]	; (9f8 <uart_init+0xa8>)
     988:	4b1b      	ldr	r3, [pc, #108]	; (9f8 <uart_init+0xa8>)
     98a:	681b      	ldr	r3, [r3, #0]
     98c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
     990:	6013      	str	r3, [r2, #0]
     992:	4a1b      	ldr	r2, [pc, #108]	; (a00 <uart_init+0xb0>)
     994:	4b1a      	ldr	r3, [pc, #104]	; (a00 <uart_init+0xb0>)
     996:	681b      	ldr	r3, [r3, #0]
     998:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     99c:	f043 0312 	orr.w	r3, r3, #18
     9a0:	6013      	str	r3, [r2, #0]
     9a2:	4b14      	ldr	r3, [pc, #80]	; (9f4 <uart_init+0xa4>)
     9a4:	2200      	movs	r2, #0
     9a6:	601a      	str	r2, [r3, #0]

    //
    // Start the UART interface, apply the desired configuration settings, and
    // enable the FIFOs.
    //
    am_hal_uart_clock_enable(ui32Module);
     9a8:	6878      	ldr	r0, [r7, #4]
     9aa:	f001 ff85 	bl	28b8 <am_hal_uart_clock_enable>

    //
    // Disable the UART before configuring it.
    //
    am_hal_uart_disable(ui32Module);
     9ae:	6878      	ldr	r0, [r7, #4]
     9b0:	f001 ff78 	bl	28a4 <am_hal_uart_disable>

    //
    // Configure the UART.
    //
    am_hal_uart_config(ui32Module, &g_sUartConfig);
     9b4:	4913      	ldr	r1, [pc, #76]	; (a04 <uart_init+0xb4>)
     9b6:	6878      	ldr	r0, [r7, #4]
     9b8:	f001 ff1c 	bl	27f4 <am_hal_uart_config>

    //
    // Enable the UART FIFO.
    //
    am_hal_uart_fifo_config(ui32Module, AM_HAL_UART_TX_FIFO_1_2 |
     9bc:	2112      	movs	r1, #18
     9be:	6878      	ldr	r0, [r7, #4]
     9c0:	f001 ff8e 	bl	28e0 <am_hal_uart_fifo_config>
                                        AM_HAL_UART_RX_FIFO_1_2);

    //
    // Enable the UART.
    //
    am_hal_uart_enable(ui32Module);
     9c4:	6878      	ldr	r0, [r7, #4]
     9c6:	f001 ff63 	bl	2890 <am_hal_uart_enable>

#if AM_PART_APOLLO
    am_hal_uart_int_enable(ui32Module, AM_HAL_UART_INT_RX_TMOUT |
     9ca:	2150      	movs	r1, #80	; 0x50
     9cc:	6878      	ldr	r0, [r7, #4]
     9ce:	f001 ff57 	bl	2880 <am_hal_uart_int_enable>
#endif

    //
    // Initialize the buffered UART.
    //
    am_hal_uart_init_buffered(ui32Module, g_pui8UARTRXBuffer,
     9d2:	2380      	movs	r3, #128	; 0x80
     9d4:	9300      	str	r3, [sp, #0]
     9d6:	4b0c      	ldr	r3, [pc, #48]	; (a08 <uart_init+0xb8>)
     9d8:	2280      	movs	r2, #128	; 0x80
     9da:	490c      	ldr	r1, [pc, #48]	; (a0c <uart_init+0xbc>)
     9dc:	6878      	ldr	r0, [r7, #4]
     9de:	f001 ff9f 	bl	2920 <am_hal_uart_init_buffered>
                              g_pui8UARTTXBuffer, MAX_UART_PACKET_SIZE);

    //
    // Enable the UART interrupt handler.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_UART + ui32Module);
     9e2:	687b      	ldr	r3, [r7, #4]
     9e4:	331b      	adds	r3, #27
     9e6:	4618      	mov	r0, r3
     9e8:	f000 fc5a 	bl	12a0 <am_hal_interrupt_enable>
}
     9ec:	bf00      	nop
     9ee:	3708      	adds	r7, #8
     9f0:	46bd      	mov	sp, r7
     9f2:	bd80      	pop	{r7, pc}
     9f4:	40010060 	.word	0x40010060
     9f8:	40010050 	.word	0x40010050
     9fc:	40010020 	.word	0x40010020
     a00:	40010024 	.word	0x40010024
     a04:	10000800 	.word	0x10000800
     a08:	10000868 	.word	0x10000868
     a0c:	10000968 	.word	0x10000968

00000a10 <am_ctimer_isr>:
// Interrupt handler for the CTIMERs
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
     a10:	b580      	push	{r7, lr}
     a12:	b082      	sub	sp, #8
     a14:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    //
    // Check and clear any active CTIMER interrupts.
    //
    ui32Status = am_hal_ctimer_int_status_get(true);
     a16:	2001      	movs	r0, #1
     a18:	f000 fb6a 	bl	10f0 <am_hal_ctimer_int_status_get>
     a1c:	6078      	str	r0, [r7, #4]
    am_hal_ctimer_int_clear(ui32Status);
     a1e:	6878      	ldr	r0, [r7, #4]
     a20:	f000 fb60 	bl	10e4 <am_hal_ctimer_int_clear>

    //
    // If indicated, toggle the GPIO5 pin.
    //
    if (g_bPTMToggleFlag)
     a24:	4b07      	ldr	r3, [pc, #28]	; (a44 <am_ctimer_isr+0x34>)
     a26:	781b      	ldrb	r3, [r3, #0]
     a28:	b2db      	uxtb	r3, r3
     a2a:	2b00      	cmp	r3, #0
     a2c:	d005      	beq.n	a3a <am_ctimer_isr+0x2a>
    {
      am_hal_gpio_out_bit_toggle(AM_BSP_GPIO_EM9304_PTM);
     a2e:	4a06      	ldr	r2, [pc, #24]	; (a48 <am_ctimer_isr+0x38>)
     a30:	4b05      	ldr	r3, [pc, #20]	; (a48 <am_ctimer_isr+0x38>)
     a32:	681b      	ldr	r3, [r3, #0]
     a34:	f483 3380 	eor.w	r3, r3, #65536	; 0x10000
     a38:	6013      	str	r3, [r2, #0]
    }
}
     a3a:	bf00      	nop
     a3c:	3708      	adds	r7, #8
     a3e:	46bd      	mov	sp, r7
     a40:	bd80      	pop	{r7, pc}
     a42:	bf00      	nop
     a44:	10000858 	.word	0x10000858
     a48:	4001008c 	.word	0x4001008c

00000a4c <am_gpio_isr>:
// Interrupt handler for the GPIO module
//
//*****************************************************************************
void
am_gpio_isr(void)
{
     a4c:	b590      	push	{r4, r7, lr}
     a4e:	b083      	sub	sp, #12
     a50:	af00      	add	r7, sp, #0
    uint64_t ui64Status;

    //
    // Check and clear the GPIO interrupt status
    //
    ui64Status = am_hal_gpio_int_status_get(true);
     a52:	2001      	movs	r0, #1
     a54:	f000 fc02 	bl	125c <am_hal_gpio_int_status_get>
     a58:	e9c7 0100 	strd	r0, r1, [r7]
    am_hal_gpio_int_clear(ui64Status);
     a5c:	e9d7 0100 	ldrd	r0, r1, [r7]
     a60:	f000 fbf2 	bl	1248 <am_hal_gpio_int_clear>

    //
    // Check to see if this was a wakeup event from the BLE radio.
    //
    if ( ui64Status & AM_HAL_GPIO_BIT(AM_BSP_GPIO_EM9304_INT) )
     a64:	e897 0018 	ldmia.w	r7, {r3, r4}
     a68:	f04f 0100 	mov.w	r1, #0
     a6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     a70:	ea03 0301 	and.w	r3, r3, r1
     a74:	ea04 0402 	and.w	r4, r4, r2
     a78:	4323      	orrs	r3, r4
     a7a:	d002      	beq.n	a82 <am_gpio_isr+0x36>
    {
        //
        // Indicate that HCI packet is ready from EM9304.
        //
        g_bEM9304HCIReady = true;
     a7c:	4b03      	ldr	r3, [pc, #12]	; (a8c <am_gpio_isr+0x40>)
     a7e:	2201      	movs	r2, #1
     a80:	701a      	strb	r2, [r3, #0]
    }
}
     a82:	bf00      	nop
     a84:	370c      	adds	r7, #12
     a86:	46bd      	mov	sp, r7
     a88:	bd90      	pop	{r4, r7, pc}
     a8a:	bf00      	nop
     a8c:	10000856 	.word	0x10000856

00000a90 <am_uart_isr>:
// Interrupt handler for the UART
//
//*****************************************************************************
void
am_uart_isr(void)
{
     a90:	b580      	push	{r7, lr}
     a92:	b082      	sub	sp, #8
     a94:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    //
    // Read the masked interrupt status from the UART.
    //
    ui32Status = am_hal_uart_int_status_get(HCI_BRIDGE_UART, true);
     a96:	2101      	movs	r1, #1
     a98:	2000      	movs	r0, #0
     a9a:	f001 fedf 	bl	285c <am_hal_uart_int_status_get>
     a9e:	6078      	str	r0, [r7, #4]

    //
    // Clear the UART interrupts.
    //
    am_hal_uart_int_clear(HCI_BRIDGE_UART, ui32Status);
     aa0:	6879      	ldr	r1, [r7, #4]
     aa2:	2000      	movs	r0, #0
     aa4:	f001 fee6 	bl	2874 <am_hal_uart_int_clear>

    //
    // If there are TMOUT, RX or TX interrupts then service them.
    //
    if (ui32Status & (AM_HAL_UART_INT_RX_TMOUT | AM_HAL_UART_INT_TX | AM_HAL_UART_INT_RX))
     aa8:	687b      	ldr	r3, [r7, #4]
     aaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
     aae:	2b00      	cmp	r3, #0
     ab0:	d003      	beq.n	aba <am_uart_isr+0x2a>
    {
#ifdef AM_PART_APOLLO
      am_hal_uart_service_buffered(HCI_BRIDGE_UART, ui32Status);
     ab2:	6879      	ldr	r1, [r7, #4]
     ab4:	2000      	movs	r0, #0
     ab6:	f001 ff5b 	bl	2970 <am_hal_uart_service_buffered>
    }

    //
    // If there is a TMOUT interrupt, then indicate that to the main routine.
    //
    if (ui32Status & (AM_HAL_UART_INT_RX_TMOUT))
     aba:	687b      	ldr	r3, [r7, #4]
     abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     ac0:	2b00      	cmp	r3, #0
     ac2:	d002      	beq.n	aca <am_uart_isr+0x3a>
    {
        g_bRxTimeoutFlag = true;
     ac4:	4b03      	ldr	r3, [pc, #12]	; (ad4 <am_uart_isr+0x44>)
     ac6:	2201      	movs	r2, #1
     ac8:	701a      	strb	r2, [r3, #0]
    }
}
     aca:	bf00      	nop
     acc:	3708      	adds	r7, #8
     ace:	46bd      	mov	sp, r7
     ad0:	bd80      	pop	{r7, pc}
     ad2:	bf00      	nop
     ad4:	10000857 	.word	0x10000857

00000ad8 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     ad8:	b580      	push	{r7, lr}
     ada:	b082      	sub	sp, #8
     adc:	af00      	add	r7, sp, #0
    uint32_t      ui32NumChars;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     ade:	2000      	movs	r0, #0
     ae0:	f000 fa66 	bl	fb0 <am_hal_clkgen_sysclk_select>
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     ae4:	f000 fa4c 	bl	f80 <am_bsp_low_power_init>

    //
    // Enable the buttons for user interaction.
    //
    am_devices_button_array_init(am_bsp_psButtons, AM_BSP_NUM_BUTTONS);
     ae8:	2103      	movs	r1, #3
     aea:	4841      	ldr	r0, [pc, #260]	; (bf0 <main+0x118>)
     aec:	f7ff fb2a 	bl	144 <am_devices_button_array_init>

    // Initialize the CTIMERA0.
    timer_init();
     af0:	f7ff feb4 	bl	85c <timer_init>

    //
    // Initialize the EM9304 interface.
    //
    em9304_init();
     af4:	f7ff fed2 	bl	89c <em9304_init>

    //
    // Initialize the UART, and set it as the default print interface.
    //
    uart_init(HCI_BRIDGE_UART);
     af8:	2000      	movs	r0, #0
     afa:	f7ff ff29 	bl	950 <uart_init>

    //
    // Initialize the ITM debug interface.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_uart_string_print);
     afe:	483d      	ldr	r0, [pc, #244]	; (bf4 <main+0x11c>)
     b00:	f000 f962 	bl	dc8 <am_util_stdio_printf_init>

    //
    // Enable BLE data ready interrupt
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_GPIO);
     b04:	2019      	movs	r0, #25
     b06:	f000 fbcb 	bl	12a0 <am_hal_interrupt_enable>

    am_hal_interrupt_master_enable();
     b0a:	f000 fbf1 	bl	12f0 <am_hal_interrupt_master_enable>
    while (1)
    {
        //
        // Check for any packets from the EM9304
        //
        if (g_bEM9304HCIReady)
     b0e:	4b3a      	ldr	r3, [pc, #232]	; (bf8 <main+0x120>)
     b10:	781b      	ldrb	r3, [r3, #0]
     b12:	b2db      	uxtb	r3, r3
     b14:	2b00      	cmp	r3, #0
     b16:	d025      	beq.n	b64 <main+0x8c>
        {
            //
            // Reset the GPIO flag
            //
            g_bEM9304HCIReady = false;
     b18:	4b37      	ldr	r3, [pc, #220]	; (bf8 <main+0x120>)
     b1a:	2200      	movs	r2, #0
     b1c:	701a      	strb	r2, [r3, #0]

            //
            // Turn on the IOM for this operation.
            //
            //am_devices_em9304_spi_init(g_sEm9304.ui32IOMModule, &g_sEm9304IOMConfigSPI);
            am_devices_em9304_spi_awake(g_sEm9304.ui32IOMModule);
     b1e:	4b37      	ldr	r3, [pc, #220]	; (bfc <main+0x124>)
     b20:	685b      	ldr	r3, [r3, #4]
     b22:	4618      	mov	r0, r3
     b24:	f7ff fe10 	bl	748 <am_devices_em9304_spi_awake>

            ui32NumChars = am_devices_em9304_block_read(&g_sEm9304, g_pui32TxArray, 0);
     b28:	2200      	movs	r2, #0
     b2a:	4935      	ldr	r1, [pc, #212]	; (c00 <main+0x128>)
     b2c:	4833      	ldr	r0, [pc, #204]	; (bfc <main+0x124>)
     b2e:	f7ff fd39 	bl	5a4 <am_devices_em9304_block_read>
     b32:	6038      	str	r0, [r7, #0]

            //
            // Disable IOM SPI pins and turn off the IOM after operation
            //
            am_devices_em9304_spi_sleep(g_sEm9304.ui32IOMModule);
     b34:	4b31      	ldr	r3, [pc, #196]	; (bfc <main+0x124>)
     b36:	685b      	ldr	r3, [r3, #4]
     b38:	4618      	mov	r0, r3
     b3a:	f7ff fe1e 	bl	77a <am_devices_em9304_spi_sleep>

            //
            // Transmit the received SPI packet over the UART.
            //
            for (uint32_t i = 0; i < ui32NumChars; i++)
     b3e:	2300      	movs	r3, #0
     b40:	607b      	str	r3, [r7, #4]
     b42:	e00b      	b.n	b5c <main+0x84>
            {
                am_hal_uart_char_transmit_buffered(AM_BSP_UART_BTLE_INST,
                                                   (char)g_pui8TxArray[i]);
     b44:	4b2f      	ldr	r3, [pc, #188]	; (c04 <main+0x12c>)
     b46:	681a      	ldr	r2, [r3, #0]
     b48:	687b      	ldr	r3, [r7, #4]
     b4a:	4413      	add	r3, r2
                am_hal_uart_char_transmit_buffered(AM_BSP_UART_BTLE_INST,
     b4c:	781b      	ldrb	r3, [r3, #0]
     b4e:	4619      	mov	r1, r3
     b50:	2000      	movs	r0, #0
     b52:	f001 ff5d 	bl	2a10 <am_hal_uart_char_transmit_buffered>
            for (uint32_t i = 0; i < ui32NumChars; i++)
     b56:	687b      	ldr	r3, [r7, #4]
     b58:	3301      	adds	r3, #1
     b5a:	607b      	str	r3, [r7, #4]
     b5c:	687a      	ldr	r2, [r7, #4]
     b5e:	683b      	ldr	r3, [r7, #0]
     b60:	429a      	cmp	r2, r3
     b62:	d3ef      	bcc.n	b44 <main+0x6c>
            }
        }

        // Check for the completion of a UART receive operation.
        if (g_bRxTimeoutFlag)
     b64:	4b28      	ldr	r3, [pc, #160]	; (c08 <main+0x130>)
     b66:	781b      	ldrb	r3, [r3, #0]
     b68:	b2db      	uxtb	r3, r3
     b6a:	2b00      	cmp	r3, #0
     b6c:	d020      	beq.n	bb0 <main+0xd8>
        {
            //
            // Reset the RX timeout flag.
            //
            g_bRxTimeoutFlag = false;
     b6e:	4b26      	ldr	r3, [pc, #152]	; (c08 <main+0x130>)
     b70:	2200      	movs	r2, #0
     b72:	701a      	strb	r2, [r3, #0]

            //
            // Check the UART RX Buffer for any received HCI packets.
            //
            ui32NumChars = am_hal_uart_char_receive_buffered(AM_BSP_UART_BTLE_INST,
     b74:	2280      	movs	r2, #128	; 0x80
     b76:	4925      	ldr	r1, [pc, #148]	; (c0c <main+0x134>)
     b78:	2000      	movs	r0, #0
     b7a:	f001 ff6d 	bl	2a58 <am_hal_uart_char_receive_buffered>
     b7e:	6038      	str	r0, [r7, #0]
                                                             (char *)g_pui8RxArray,
                                                             MAX_UART_PACKET_SIZE);
            if ( ui32NumChars > 0 )
     b80:	683b      	ldr	r3, [r7, #0]
     b82:	2b00      	cmp	r3, #0
     b84:	d014      	beq.n	bb0 <main+0xd8>
            {
                //
                // Turn on the IOM for this operation.
                //
                am_devices_em9304_spi_awake(g_sEm9304.ui32IOMModule);
     b86:	4b1d      	ldr	r3, [pc, #116]	; (bfc <main+0x124>)
     b88:	685b      	ldr	r3, [r3, #4]
     b8a:	4618      	mov	r0, r3
     b8c:	f7ff fddc 	bl	748 <am_devices_em9304_spi_awake>

                //
                // Write the HCI packet to the EM9304.
                //
                am_devices_em9304_block_write(&g_sEm9304, g_pui8RxArray[0], &g_pui8RxArray[1], ui32NumChars - 1);
     b90:	4b1e      	ldr	r3, [pc, #120]	; (c0c <main+0x134>)
     b92:	7819      	ldrb	r1, [r3, #0]
     b94:	683b      	ldr	r3, [r7, #0]
     b96:	3b01      	subs	r3, #1
     b98:	4a1d      	ldr	r2, [pc, #116]	; (c10 <main+0x138>)
     b9a:	4818      	ldr	r0, [pc, #96]	; (bfc <main+0x124>)
     b9c:	f7ff fc42 	bl	424 <am_devices_em9304_block_write>

                //
                // Disable IOM SPI pins and turn off the IOM after operation
                //
                am_devices_em9304_spi_sleep(g_sEm9304.ui32IOMModule);
     ba0:	4b16      	ldr	r3, [pc, #88]	; (bfc <main+0x124>)
     ba2:	685b      	ldr	r3, [r3, #4]
     ba4:	4618      	mov	r0, r3
     ba6:	f7ff fde8 	bl	77a <am_devices_em9304_spi_sleep>

                g_bEM9304HCIReady = true;
     baa:	4b13      	ldr	r3, [pc, #76]	; (bf8 <main+0x120>)
     bac:	2201      	movs	r2, #1
     bae:	701a      	strb	r2, [r3, #0]
            }
        }

        // Check if Button #0 has been pressed, indicating reset EM9304 into Production Test Mode (PTM).
        am_devices_button_tick(&am_bsp_psButtons[0]);
     bb0:	480f      	ldr	r0, [pc, #60]	; (bf0 <main+0x118>)
     bb2:	f7ff fae1 	bl	178 <am_devices_button_tick>
        if (am_devices_button_pressed(am_bsp_psButtons[0]))
     bb6:	4b0e      	ldr	r3, [pc, #56]	; (bf0 <main+0x118>)
     bb8:	7b1b      	ldrb	r3, [r3, #12]
     bba:	2b00      	cmp	r3, #0
     bbc:	d0a7      	beq.n	b0e <main+0x36>
     bbe:	4b0c      	ldr	r3, [pc, #48]	; (bf0 <main+0x118>)
     bc0:	7b5b      	ldrb	r3, [r3, #13]
     bc2:	2b00      	cmp	r3, #0
     bc4:	d0a3      	beq.n	b0e <main+0x36>
        {
          // Start toggling the GPIO5 in the CTIMER ISR
          g_bPTMToggleFlag = true;
     bc6:	4b13      	ldr	r3, [pc, #76]	; (c14 <main+0x13c>)
     bc8:	2201      	movs	r2, #1
     bca:	701a      	strb	r2, [r3, #0]

          // Assert RESET to the EM9304.
          am_hal_gpio_out_bit_clear(HCI_APOLLO_RESET_PIN);
     bcc:	4b12      	ldr	r3, [pc, #72]	; (c18 <main+0x140>)
     bce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     bd2:	601a      	str	r2, [r3, #0]

          // Delay for 5ms to make sure the EM9304 is in PTM.
          am_util_delay_ms(5);
     bd4:	2005      	movs	r0, #5
     bd6:	f000 f85d 	bl	c94 <am_util_delay_ms>

          // Deassert RESET to the EM9304.
          am_hal_gpio_out_bit_set(HCI_APOLLO_RESET_PIN);
     bda:	4b10      	ldr	r3, [pc, #64]	; (c1c <main+0x144>)
     bdc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     be0:	601a      	str	r2, [r3, #0]

          // Delay for 5ms to make sure the EM9304 is in PTM.
          am_util_delay_ms(5);
     be2:	2005      	movs	r0, #5
     be4:	f000 f856 	bl	c94 <am_util_delay_ms>

          // Stop toggling the GPIO5 in the CTIMER ISR
          g_bPTMToggleFlag = false;
     be8:	4b0a      	ldr	r3, [pc, #40]	; (c14 <main+0x13c>)
     bea:	2200      	movs	r2, #0
     bec:	701a      	strb	r2, [r3, #0]
        if (g_bEM9304HCIReady)
     bee:	e78e      	b.n	b0e <main+0x36>
     bf0:	10000818 	.word	0x10000818
     bf4:	00000fa9 	.word	0x00000fa9
     bf8:	10000856 	.word	0x10000856
     bfc:	00002ad4 	.word	0x00002ad4
     c00:	100008e8 	.word	0x100008e8
     c04:	10000814 	.word	0x10000814
     c08:	10000857 	.word	0x10000857
     c0c:	100009e8 	.word	0x100009e8
     c10:	100009e9 	.word	0x100009e9
     c14:	10000858 	.word	0x10000858
     c18:	4001009c 	.word	0x4001009c
     c1c:	40010094 	.word	0x40010094

00000c20 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     c20:	4811      	ldr	r0, [pc, #68]	; (c68 <zero_loop+0x12>)
     c22:	4912      	ldr	r1, [pc, #72]	; (c6c <zero_loop+0x16>)
     c24:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     c26:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     c2a:	4811      	ldr	r0, [pc, #68]	; (c70 <zero_loop+0x1a>)
     c2c:	6801      	ldr	r1, [r0, #0]
     c2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     c32:	6001      	str	r1, [r0, #0]
     c34:	f3bf 8f4f 	dsb	sy
     c38:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     c3c:	480d      	ldr	r0, [pc, #52]	; (c74 <zero_loop+0x1e>)
     c3e:	490e      	ldr	r1, [pc, #56]	; (c78 <zero_loop+0x22>)
     c40:	4a0e      	ldr	r2, [pc, #56]	; (c7c <zero_loop+0x26>)

00000c42 <copy_loop>:
     c42:	f850 3b04 	ldr.w	r3, [r0], #4
     c46:	f841 3b04 	str.w	r3, [r1], #4
     c4a:	4291      	cmp	r1, r2
     c4c:	dbf9      	blt.n	c42 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     c4e:	480c      	ldr	r0, [pc, #48]	; (c80 <zero_loop+0x2a>)
     c50:	490c      	ldr	r1, [pc, #48]	; (c84 <zero_loop+0x2e>)
     c52:	f04f 0200 	mov.w	r2, #0

00000c56 <zero_loop>:
     c56:	4288      	cmp	r0, r1
     c58:	bfb8      	it	lt
     c5a:	f840 2b04 	strlt.w	r2, [r0], #4
     c5e:	dbfa      	blt.n	c56 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     c60:	f7ff ff3a 	bl	ad8 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     c64:	be00      	bkpt	0x0000
}
     c66:	bf00      	nop
     c68:	e000ed08 	.word	0xe000ed08
     c6c:	00000000 	.word	0x00000000
     c70:	e000ed88 	.word	0xe000ed88
     c74:	00002d10 	.word	0x00002d10
     c78:	10000800 	.word	0x10000800
     c7c:	10000854 	.word	0x10000854
     c80:	10000854 	.word	0x10000854
     c84:	10000aec 	.word	0x10000aec

00000c88 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     c88:	b480      	push	{r7}
     c8a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     c8c:	e7fe      	b.n	c8c <am_nmi_isr+0x4>

00000c8e <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     c8e:	b480      	push	{r7}
     c90:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     c92:	e7fe      	b.n	c92 <am_adc_isr+0x4>

00000c94 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
     c94:	b580      	push	{r7, lr}
     c96:	b084      	sub	sp, #16
     c98:	af00      	add	r7, sp, #0
     c9a:	6078      	str	r0, [r7, #4]
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
     c9c:	f000 f998 	bl	fd0 <am_hal_clkgen_sysclk_get>
     ca0:	60f8      	str	r0, [r7, #12]
#endif
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
     ca2:	68fb      	ldr	r3, [r7, #12]
     ca4:	4a07      	ldr	r2, [pc, #28]	; (cc4 <am_util_delay_ms+0x30>)
     ca6:	fba2 2303 	umull	r2, r3, r2, r3
     caa:	099b      	lsrs	r3, r3, #6
     cac:	687a      	ldr	r2, [r7, #4]
     cae:	fb02 f303 	mul.w	r3, r2, r3
     cb2:	60bb      	str	r3, [r7, #8]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
     cb4:	68b8      	ldr	r0, [r7, #8]
     cb6:	f000 fa2b 	bl	1110 <am_hal_flash_delay>
}
     cba:	bf00      	nop
     cbc:	3710      	adds	r7, #16
     cbe:	46bd      	mov	sp, r7
     cc0:	bd80      	pop	{r7, pc}
     cc2:	bf00      	nop
     cc4:	057619f1 	.word	0x057619f1

00000cc8 <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     cc8:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     cca:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     ccc:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     cce:	f000 f809 	bl	ce4 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     cd2:	bd01      	pop	{r0, pc}
}
     cd4:	bf00      	nop
     cd6:	4618      	mov	r0, r3

00000cd8 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     cd8:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     cda:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     cdc:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     cde:	4770      	bx	lr
}
     ce0:	bf00      	nop
     ce2:	4618      	mov	r0, r3

00000ce4 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     ce4:	b580      	push	{r7, lr}
     ce6:	b096      	sub	sp, #88	; 0x58
     ce8:	af00      	add	r7, sp, #0
     cea:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     cec:	f107 030c 	add.w	r3, r7, #12
     cf0:	2200      	movs	r2, #0
     cf2:	601a      	str	r2, [r3, #0]
     cf4:	605a      	str	r2, [r3, #4]
     cf6:	609a      	str	r2, [r3, #8]
     cf8:	60da      	str	r2, [r3, #12]
     cfa:	611a      	str	r2, [r3, #16]
     cfc:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
     cfe:	2300      	movs	r3, #0
     d00:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     d04:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     d06:	4b2e      	ldr	r3, [pc, #184]	; (dc0 <am_util_faultisr_collect_data+0xdc>)
     d08:	681b      	ldr	r3, [r3, #0]
     d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     d0e:	b2db      	uxtb	r3, r3
     d10:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     d16:	0a1b      	lsrs	r3, r3, #8
     d18:	b2db      	uxtb	r3, r3
     d1a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     d20:	0c1b      	lsrs	r3, r3, #16
     d22:	b29b      	uxth	r3, r3
     d24:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     d28:	4b26      	ldr	r3, [pc, #152]	; (dc4 <am_util_faultisr_collect_data+0xe0>)
     d2a:	681b      	ldr	r3, [r3, #0]
     d2c:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     d2e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     d32:	b2db      	uxtb	r3, r3
     d34:	f003 0302 	and.w	r3, r3, #2
     d38:	2b00      	cmp	r3, #0
     d3a:	d005      	beq.n	d48 <am_util_faultisr_collect_data+0x64>
     d3c:	6879      	ldr	r1, [r7, #4]
     d3e:	2006      	movs	r0, #6
     d40:	f7ff ffca 	bl	cd8 <getStackedReg>
     d44:	4603      	mov	r3, r0
     d46:	e001      	b.n	d4c <am_util_faultisr_collect_data+0x68>
     d48:	f04f 33ff 	mov.w	r3, #4294967295
     d4c:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     d4e:	6879      	ldr	r1, [r7, #4]
     d50:	2000      	movs	r0, #0
     d52:	f7ff ffc1 	bl	cd8 <getStackedReg>
     d56:	4603      	mov	r3, r0
     d58:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     d5a:	6879      	ldr	r1, [r7, #4]
     d5c:	2001      	movs	r0, #1
     d5e:	f7ff ffbb 	bl	cd8 <getStackedReg>
     d62:	4603      	mov	r3, r0
     d64:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     d66:	6879      	ldr	r1, [r7, #4]
     d68:	2002      	movs	r0, #2
     d6a:	f7ff ffb5 	bl	cd8 <getStackedReg>
     d6e:	4603      	mov	r3, r0
     d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     d72:	6879      	ldr	r1, [r7, #4]
     d74:	2003      	movs	r0, #3
     d76:	f7ff ffaf 	bl	cd8 <getStackedReg>
     d7a:	4603      	mov	r3, r0
     d7c:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     d7e:	6879      	ldr	r1, [r7, #4]
     d80:	2004      	movs	r0, #4
     d82:	f7ff ffa9 	bl	cd8 <getStackedReg>
     d86:	4603      	mov	r3, r0
     d88:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     d8a:	6879      	ldr	r1, [r7, #4]
     d8c:	2005      	movs	r0, #5
     d8e:	f7ff ffa3 	bl	cd8 <getStackedReg>
     d92:	4603      	mov	r3, r0
     d94:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     d96:	6879      	ldr	r1, [r7, #4]
     d98:	2006      	movs	r0, #6
     d9a:	f7ff ff9d 	bl	cd8 <getStackedReg>
     d9e:	4603      	mov	r3, r0
     da0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     da2:	6879      	ldr	r1, [r7, #4]
     da4:	2007      	movs	r0, #7
     da6:	f7ff ff97 	bl	cd8 <getStackedReg>
     daa:	4603      	mov	r3, r0
     dac:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     dae:	f107 030c 	add.w	r3, r7, #12
     db2:	4618      	mov	r0, r3
     db4:	f001 fc20 	bl	25f8 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     db8:	2300      	movs	r3, #0
     dba:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
     dbc:	e7fe      	b.n	dbc <am_util_faultisr_collect_data+0xd8>
     dbe:	bf00      	nop
     dc0:	e000ed28 	.word	0xe000ed28
     dc4:	e000ed38 	.word	0xe000ed38

00000dc8 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     dc8:	b480      	push	{r7}
     dca:	b083      	sub	sp, #12
     dcc:	af00      	add	r7, sp, #0
     dce:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     dd0:	4a04      	ldr	r2, [pc, #16]	; (de4 <am_util_stdio_printf_init+0x1c>)
     dd2:	687b      	ldr	r3, [r7, #4]
     dd4:	6013      	str	r3, [r2, #0]
}
     dd6:	bf00      	nop
     dd8:	370c      	adds	r7, #12
     dda:	46bd      	mov	sp, r7
     ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
     de0:	4770      	bx	lr
     de2:	bf00      	nop
     de4:	10000a68 	.word	0x10000a68

00000de8 <am_bsp_iom_spi_pins_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_iom_spi_pins_enable(uint32_t ui32Module)
{
     de8:	b430      	push	{r4, r5}
    switch(ui32Module)
     dea:	2800      	cmp	r0, #0
     dec:	d02d      	beq.n	e4a <am_bsp_iom_spi_pins_enable+0x62>
     dee:	2801      	cmp	r0, #1
     df0:	d000      	beq.n	df4 <am_bsp_iom_spi_pins_enable+0xc>
     df2:	e7fe      	b.n	df2 <am_bsp_iom_spi_pins_enable+0xa>
            break;
#endif

#ifdef AM_BSP_GPIO_IOM1_SCK
        case 1:
            am_bsp_pin_enable(IOM1_SCK);
     df4:	4b2a      	ldr	r3, [pc, #168]	; (ea0 <am_bsp_iom_spi_pins_enable+0xb8>)
     df6:	492b      	ldr	r1, [pc, #172]	; (ea4 <am_bsp_iom_spi_pins_enable+0xbc>)
     df8:	4a2b      	ldr	r2, [pc, #172]	; (ea8 <am_bsp_iom_spi_pins_enable+0xc0>)
     dfa:	2573      	movs	r5, #115	; 0x73
     dfc:	601d      	str	r5, [r3, #0]
     dfe:	6808      	ldr	r0, [r1, #0]
     e00:	f020 0407 	bic.w	r4, r0, #7
     e04:	600c      	str	r4, [r1, #0]
     e06:	6810      	ldr	r0, [r2, #0]
     e08:	f020 04ff 	bic.w	r4, r0, #255	; 0xff
     e0c:	f044 000e 	orr.w	r0, r4, #14
     e10:	2400      	movs	r4, #0
     e12:	6010      	str	r0, [r2, #0]
     e14:	601c      	str	r4, [r3, #0]
            am_bsp_pin_enable(IOM1_MISO);
     e16:	601d      	str	r5, [r3, #0]
     e18:	6808      	ldr	r0, [r1, #0]
     e1a:	f020 0070 	bic.w	r0, r0, #112	; 0x70
     e1e:	6008      	str	r0, [r1, #0]
     e20:	6810      	ldr	r0, [r2, #0]
     e22:	f420 4c7f 	bic.w	ip, r0, #65280	; 0xff00
     e26:	f44c 6020 	orr.w	r0, ip, #2560	; 0xa00
     e2a:	6010      	str	r0, [r2, #0]
     e2c:	601c      	str	r4, [r3, #0]
            am_bsp_pin_enable(IOM1_MOSI);
     e2e:	601d      	str	r5, [r3, #0]
     e30:	680d      	ldr	r5, [r1, #0]
     e32:	f425 60e0 	bic.w	r0, r5, #1792	; 0x700
     e36:	6008      	str	r0, [r1, #0]
     e38:	6811      	ldr	r1, [r2, #0]
     e3a:	f421 057f 	bic.w	r5, r1, #16711680	; 0xff0000
     e3e:	f445 2000 	orr.w	r0, r5, #524288	; 0x80000
     e42:	6010      	str	r0, [r2, #0]
     e44:	601c      	str	r4, [r3, #0]
        // debugging.
        //
        default:
            while(1);
    }
}
     e46:	bc30      	pop	{r4, r5}
     e48:	4770      	bx	lr
            am_bsp_pin_enable(IOM0_SCK);
     e4a:	4b15      	ldr	r3, [pc, #84]	; (ea0 <am_bsp_iom_spi_pins_enable+0xb8>)
     e4c:	4917      	ldr	r1, [pc, #92]	; (eac <am_bsp_iom_spi_pins_enable+0xc4>)
     e4e:	4a18      	ldr	r2, [pc, #96]	; (eb0 <am_bsp_iom_spi_pins_enable+0xc8>)
     e50:	2573      	movs	r5, #115	; 0x73
     e52:	601d      	str	r5, [r3, #0]
     e54:	680c      	ldr	r4, [r1, #0]
     e56:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
     e5a:	600c      	str	r4, [r1, #0]
     e5c:	6814      	ldr	r4, [r2, #0]
     e5e:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00
     e62:	f44c 6460 	orr.w	r4, ip, #3584	; 0xe00
     e66:	6014      	str	r4, [r2, #0]
     e68:	6018      	str	r0, [r3, #0]
            am_bsp_pin_enable(IOM0_MISO);
     e6a:	601d      	str	r5, [r3, #0]
     e6c:	680c      	ldr	r4, [r1, #0]
     e6e:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
     e72:	600c      	str	r4, [r1, #0]
     e74:	6814      	ldr	r4, [r2, #0]
     e76:	f424 0c7f 	bic.w	ip, r4, #16711680	; 0xff0000
     e7a:	f44c 2420 	orr.w	r4, ip, #655360	; 0xa0000
     e7e:	6014      	str	r4, [r2, #0]
     e80:	6018      	str	r0, [r3, #0]
            am_bsp_pin_enable(IOM0_MOSI);
     e82:	601d      	str	r5, [r3, #0]
     e84:	680d      	ldr	r5, [r1, #0]
     e86:	f025 44e0 	bic.w	r4, r5, #1879048192	; 0x70000000
     e8a:	600c      	str	r4, [r1, #0]
     e8c:	6811      	ldr	r1, [r2, #0]
     e8e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
     e92:	f045 6400 	orr.w	r4, r5, #134217728	; 0x8000000
     e96:	6014      	str	r4, [r2, #0]
     e98:	6018      	str	r0, [r3, #0]
}
     e9a:	bc30      	pop	{r4, r5}
     e9c:	4770      	bx	lr
     e9e:	bf00      	nop
     ea0:	40010060 	.word	0x40010060
     ea4:	40010044 	.word	0x40010044
     ea8:	40010008 	.word	0x40010008
     eac:	40010040 	.word	0x40010040
     eb0:	40010004 	.word	0x40010004

00000eb4 <am_bsp_iom_spi_pins_disable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_iom_spi_pins_disable(uint32_t ui32Module)
{
     eb4:	b430      	push	{r4, r5}
    switch(ui32Module)
     eb6:	2800      	cmp	r0, #0
     eb8:	d02d      	beq.n	f16 <am_bsp_iom_spi_pins_disable+0x62>
     eba:	2801      	cmp	r0, #1
     ebc:	d000      	beq.n	ec0 <am_bsp_iom_spi_pins_disable+0xc>
     ebe:	e7fe      	b.n	ebe <am_bsp_iom_spi_pins_disable+0xa>
            break;
#endif

#ifdef AM_BSP_GPIO_IOM1_SCK
        case 1:
            am_bsp_pin_disable(IOM1_SCK);
     ec0:	4b2a      	ldr	r3, [pc, #168]	; (f6c <am_bsp_iom_spi_pins_disable+0xb8>)
     ec2:	492b      	ldr	r1, [pc, #172]	; (f70 <am_bsp_iom_spi_pins_disable+0xbc>)
     ec4:	4a2b      	ldr	r2, [pc, #172]	; (f74 <am_bsp_iom_spi_pins_disable+0xc0>)
     ec6:	2573      	movs	r5, #115	; 0x73
     ec8:	601d      	str	r5, [r3, #0]
     eca:	6808      	ldr	r0, [r1, #0]
     ecc:	f020 0407 	bic.w	r4, r0, #7
     ed0:	600c      	str	r4, [r1, #0]
     ed2:	6810      	ldr	r0, [r2, #0]
     ed4:	f020 04ff 	bic.w	r4, r0, #255	; 0xff
     ed8:	f044 0018 	orr.w	r0, r4, #24
     edc:	2400      	movs	r4, #0
     ede:	6010      	str	r0, [r2, #0]
     ee0:	601c      	str	r4, [r3, #0]
            am_bsp_pin_disable(IOM1_MISO);
     ee2:	601d      	str	r5, [r3, #0]
     ee4:	6808      	ldr	r0, [r1, #0]
     ee6:	f020 0070 	bic.w	r0, r0, #112	; 0x70
     eea:	6008      	str	r0, [r1, #0]
     eec:	6810      	ldr	r0, [r2, #0]
     eee:	f420 4c7f 	bic.w	ip, r0, #65280	; 0xff00
     ef2:	f44c 50c0 	orr.w	r0, ip, #6144	; 0x1800
     ef6:	6010      	str	r0, [r2, #0]
     ef8:	601c      	str	r4, [r3, #0]
            am_bsp_pin_disable(IOM1_MOSI);
     efa:	601d      	str	r5, [r3, #0]
     efc:	680d      	ldr	r5, [r1, #0]
     efe:	f425 60e0 	bic.w	r0, r5, #1792	; 0x700
     f02:	6008      	str	r0, [r1, #0]
     f04:	6811      	ldr	r1, [r2, #0]
     f06:	f421 057f 	bic.w	r5, r1, #16711680	; 0xff0000
     f0a:	f445 10c0 	orr.w	r0, r5, #1572864	; 0x180000
     f0e:	6010      	str	r0, [r2, #0]
     f10:	601c      	str	r4, [r3, #0]
        // debugging.
        //
        default:
            while(1);
    }
}
     f12:	bc30      	pop	{r4, r5}
     f14:	4770      	bx	lr
            am_bsp_pin_disable(IOM0_SCK);
     f16:	4b15      	ldr	r3, [pc, #84]	; (f6c <am_bsp_iom_spi_pins_disable+0xb8>)
     f18:	4917      	ldr	r1, [pc, #92]	; (f78 <am_bsp_iom_spi_pins_disable+0xc4>)
     f1a:	4a18      	ldr	r2, [pc, #96]	; (f7c <am_bsp_iom_spi_pins_disable+0xc8>)
     f1c:	2573      	movs	r5, #115	; 0x73
     f1e:	601d      	str	r5, [r3, #0]
     f20:	680c      	ldr	r4, [r1, #0]
     f22:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
     f26:	600c      	str	r4, [r1, #0]
     f28:	6814      	ldr	r4, [r2, #0]
     f2a:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00
     f2e:	f44c 54c0 	orr.w	r4, ip, #6144	; 0x1800
     f32:	6014      	str	r4, [r2, #0]
     f34:	6018      	str	r0, [r3, #0]
            am_bsp_pin_disable(IOM0_MISO);
     f36:	601d      	str	r5, [r3, #0]
     f38:	680c      	ldr	r4, [r1, #0]
     f3a:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
     f3e:	600c      	str	r4, [r1, #0]
     f40:	6814      	ldr	r4, [r2, #0]
     f42:	f424 0c7f 	bic.w	ip, r4, #16711680	; 0xff0000
     f46:	f44c 14c0 	orr.w	r4, ip, #1572864	; 0x180000
     f4a:	6014      	str	r4, [r2, #0]
     f4c:	6018      	str	r0, [r3, #0]
            am_bsp_pin_disable(IOM0_MOSI);
     f4e:	601d      	str	r5, [r3, #0]
     f50:	680d      	ldr	r5, [r1, #0]
     f52:	f025 44e0 	bic.w	r4, r5, #1879048192	; 0x70000000
     f56:	600c      	str	r4, [r1, #0]
     f58:	6811      	ldr	r1, [r2, #0]
     f5a:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
     f5e:	f045 54c0 	orr.w	r4, r5, #402653184	; 0x18000000
     f62:	6014      	str	r4, [r2, #0]
     f64:	6018      	str	r0, [r3, #0]
}
     f66:	bc30      	pop	{r4, r5}
     f68:	4770      	bx	lr
     f6a:	bf00      	nop
     f6c:	40010060 	.word	0x40010060
     f70:	40010044 	.word	0x40010044
     f74:	40010008 	.word	0x40010008
     f78:	40010040 	.word	0x40010040
     f7c:	40010004 	.word	0x40010004

00000f80 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
     f80:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_mcuctrl_bucks_enable();
     f82:	f001 fb65 	bl	2650 <am_hal_mcuctrl_bucks_enable>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
     f86:	f001 fd8d 	bl	2aa4 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
     f8a:	2001      	movs	r0, #1
     f8c:	f001 fc06 	bl	279c <am_hal_rtc_osc_select>

    //
    // Stop the XT and LFRC.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
     f90:	2001      	movs	r0, #1
     f92:	f000 f829 	bl	fe8 <am_hal_clkgen_osc_stop>
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_LFRC);
     f96:	2002      	movs	r0, #2
     f98:	f000 f826 	bl	fe8 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
     f9c:	f001 fc0c 	bl	27b8 <am_hal_rtc_osc_disable>

    //
    // Disable the bandgap.
    //
    am_hal_mcuctrl_bandgap_disable();
}
     fa0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_mcuctrl_bandgap_disable();
     fa4:	f001 bb4c 	b.w	2640 <am_hal_mcuctrl_bandgap_disable>

00000fa8 <am_bsp_uart_string_print>:
//
//*****************************************************************************
void
am_bsp_uart_string_print(char *pcString)
{
    am_hal_uart_string_transmit_polled(0, pcString);
     fa8:	4601      	mov	r1, r0
     faa:	2000      	movs	r0, #0
     fac:	f001 bca4 	b.w	28f8 <am_hal_uart_string_transmit_polled>

00000fb0 <am_hal_clkgen_sysclk_select>:
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
     fb0:	4b05      	ldr	r3, [pc, #20]	; (fc8 <am_hal_clkgen_sysclk_select+0x18>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
     fb2:	4906      	ldr	r1, [pc, #24]	; (fcc <am_hal_clkgen_sysclk_select+0x1c>)
{
     fb4:	b410      	push	{r4}

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
     fb6:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
     fb8:	2447      	movs	r4, #71	; 0x47
     fba:	601c      	str	r4, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
     fbc:	6008      	str	r0, [r1, #0]
}
     fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(CLKGEN, CLKKEY) = 0;
     fc2:	601a      	str	r2, [r3, #0]
}
     fc4:	4770      	bx	lr
     fc6:	bf00      	nop
     fc8:	40004014 	.word	0x40004014
     fcc:	40004018 	.word	0x40004018

00000fd0 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_BFR(CLKGEN, CCTRL, CORESEL);
     fd0:	4b03      	ldr	r3, [pc, #12]	; (fe0 <am_hal_clkgen_sysclk_get+0x10>)
     fd2:	4a04      	ldr	r2, [pc, #16]	; (fe4 <am_hal_clkgen_sysclk_get+0x14>)
     fd4:	6818      	ldr	r0, [r3, #0]
     fd6:	f000 0107 	and.w	r1, r0, #7
        case AM_HAL_CLKGEN_SYSCLK_3MHZ:
            return 3000000;
        default:
            return 0xFFFFFFFF;
    }
}
     fda:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
     fde:	4770      	bx	lr
     fe0:	40004018 	.word	0x40004018
     fe4:	00002ae4 	.word	0x00002ae4

00000fe8 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
     fe8:	0783      	lsls	r3, r0, #30
     fea:	d003      	beq.n	ff4 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
     fec:	4b02      	ldr	r3, [pc, #8]	; (ff8 <am_hal_clkgen_osc_stop+0x10>)
     fee:	681a      	ldr	r2, [r3, #0]
     ff0:	4310      	orrs	r0, r2
     ff2:	6018      	str	r0, [r3, #0]
     ff4:	4770      	bx	lr
     ff6:	bf00      	nop
     ff8:	4000400c 	.word	0x4000400c

00000ffc <am_hal_ctimer_config_single>:
//*****************************************************************************
void
am_hal_ctimer_config_single(uint32_t ui32TimerNumber,
                            uint32_t ui32TimerSegment,
                            uint32_t ui32ConfigVal)
{
     ffc:	b410      	push	{r4}

    //
    // Find the correct register to write based on the timer number.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
     ffe:	0100      	lsls	r0, r0, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1000:	4c0b      	ldr	r4, [pc, #44]	; (1030 <am_hal_ctimer_config_single+0x34>)

    //
    // If we're working with TIMERB, we need to shift our configuration value
    // up by 16 bits.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1002:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    ui32WriteVal = AM_REGVAL(pui32ConfigReg);
    1006:	5903      	ldr	r3, [r0, r4]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1008:	d00a      	beq.n	1020 <am_hal_ctimer_config_single+0x24>

    //
    // Replace part of the saved register value with the configuration value
    // from the caller.
    //
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
    100a:	ea23 0301 	bic.w	r3, r3, r1
    100e:	431a      	orrs	r2, r3

    //
    // If we're configuring both timers, we need to set the "link" bit.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_BOTH )
    1010:	3101      	adds	r1, #1
    {
        ui32WriteVal |= AM_HAL_CTIMER_LINK;
    1012:	bf08      	it	eq
    1014:	f042 4200 	orreq.w	r2, r2, #2147483648	; 0x80000000
    }

    //
    // Write our completed configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
    1018:	5102      	str	r2, [r0, r4]
}
    101a:	f85d 4b04 	ldr.w	r4, [sp], #4
    101e:	4770      	bx	lr
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
    1020:	b299      	uxth	r1, r3
    1022:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
    1026:	5102      	str	r2, [r0, r4]
}
    1028:	f85d 4b04 	ldr.w	r4, [sp], #4
    102c:	4770      	bx	lr
    102e:	bf00      	nop
    1030:	4000800c 	.word	0x4000800c

00001034 <am_hal_ctimer_start>:

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    1034:	0100      	lsls	r0, r0, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1036:	4a07      	ldr	r2, [pc, #28]	; (1054 <am_hal_ctimer_start+0x20>)

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    1038:	5883      	ldr	r3, [r0, r2]
{
    103a:	b410      	push	{r4}

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    103c:	f001 2408 	and.w	r4, r1, #134219776	; 0x8000800
    1040:	ea23 0304 	bic.w	r3, r3, r4
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    1044:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    1048:	4319      	orrs	r1, r3
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    104a:	5081      	str	r1, [r0, r2]
}
    104c:	f85d 4b04 	ldr.w	r4, [sp], #4
    1050:	4770      	bx	lr
    1052:	bf00      	nop
    1054:	4000800c 	.word	0x4000800c

00001058 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1058:	b5f0      	push	{r4, r5, r6, r7, lr}
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    105a:	0100      	lsls	r0, r0, #4
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    105c:	4c19      	ldr	r4, [pc, #100]	; (10c4 <am_hal_ctimer_period_set+0x6c>)
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    105e:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    ui32Mode = *pui32ControlReg;
    1062:	5905      	ldr	r5, [r0, r4]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1064:	d018      	beq.n	1098 <am_hal_ctimer_period_set+0x40>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1066:	f405 76c0 	and.w	r6, r5, #384	; 0x180
    106a:	2e80      	cmp	r6, #128	; 0x80
    106c:	d019      	beq.n	10a2 <am_hal_ctimer_period_set+0x4a>
    106e:	2500      	movs	r5, #0
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    1070:	462c      	mov	r4, r5
    pui32CompareRegA = (uint32_t *)(AM_REG_CTIMERn(0) +
                                    AM_REG_CTIMER_CMPRA0_O +
                                    (ui32TimerNumber * TIMER_OFFSET));

    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
                                    AM_REG_CTIMER_CMPRB0_O +
    1072:	4e15      	ldr	r6, [pc, #84]	; (10c8 <am_hal_ctimer_period_set+0x70>)
                                    AM_REG_CTIMER_CMPRA0_O +
    1074:	4f15      	ldr	r7, [pc, #84]	; (10cc <am_hal_ctimer_period_set+0x74>)

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1076:	f64f 73ff 	movw	r3, #65535	; 0xffff
    107a:	4299      	cmp	r1, r3
                                    AM_REG_CTIMER_CMPRB0_O +
    107c:	eb00 0e06 	add.w	lr, r0, r6
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1080:	d01c      	beq.n	10bc <am_hal_ctimer_period_set+0x64>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1082:	4b13      	ldr	r3, [pc, #76]	; (10d0 <am_hal_ctimer_period_set+0x78>)
    1084:	4299      	cmp	r1, r3
    1086:	d014      	beq.n	10b2 <am_hal_ctimer_period_set+0x5a>
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1088:	b291      	uxth	r1, r2
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1 >> 16));
    108a:	401c      	ands	r4, r3
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    108c:	ea44 4212 	orr.w	r2, r4, r2, lsr #16
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1090:	430d      	orrs	r5, r1
    1092:	51c5      	str	r5, [r0, r7]
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1094:	5182      	str	r2, [r0, r6]
    }
}
    1096:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32Mode = ui32Mode >> 16;
    1098:	0c2f      	lsrs	r7, r5, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    109a:	f407 75c0 	and.w	r5, r7, #384	; 0x180
    109e:	2d80      	cmp	r5, #128	; 0x80
    10a0:	d103      	bne.n	10aa <am_hal_ctimer_period_set+0x52>
    10a2:	0415      	lsls	r5, r2, #16
        ui32Comp1 = ui32Period;
    10a4:	4614      	mov	r4, r2
        ui32Comp0 = ui32Period - ui32OnTime;
    10a6:	1ad2      	subs	r2, r2, r3
        ui32Comp1 = ui32Period;
    10a8:	e7e3      	b.n	1072 <am_hal_ctimer_period_set+0x1a>
                                    AM_REG_CTIMER_CMPRB0_O +
    10aa:	f8df e01c 	ldr.w	lr, [pc, #28]	; 10c8 <am_hal_ctimer_period_set+0x70>
    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
    10ae:	2500      	movs	r5, #0
                                    AM_REG_CTIMER_CMPRB0_O +
    10b0:	4486      	add	lr, r0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    10b2:	b290      	uxth	r0, r2
    10b4:	4305      	orrs	r5, r0
    10b6:	f8ce 5000 	str.w	r5, [lr]
    10ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    10bc:	b294      	uxth	r4, r2
    10be:	4325      	orrs	r5, r4
    10c0:	51c5      	str	r5, [r0, r7]
    10c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10c4:	4000800c 	.word	0x4000800c
    10c8:	40008008 	.word	0x40008008
    10cc:	40008004 	.word	0x40008004
    10d0:	ffff0000 	.word	0xffff0000

000010d4 <am_hal_ctimer_int_enable>:
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    10d4:	4a02      	ldr	r2, [pc, #8]	; (10e0 <am_hal_ctimer_int_enable+0xc>)
    10d6:	6813      	ldr	r3, [r2, #0]
    10d8:	4318      	orrs	r0, r3
    10da:	6010      	str	r0, [r2, #0]
    10dc:	4770      	bx	lr
    10de:	bf00      	nop
    10e0:	40008200 	.word	0x40008200

000010e4 <am_hal_ctimer_int_clear>:
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTCLR) = ui32Interrupt;
    10e4:	4b01      	ldr	r3, [pc, #4]	; (10ec <am_hal_ctimer_int_clear+0x8>)
    10e6:	6018      	str	r0, [r3, #0]
    10e8:	4770      	bx	lr
    10ea:	bf00      	nop
    10ec:	40008208 	.word	0x40008208

000010f0 <am_hal_ctimer_int_status_get>:
am_hal_ctimer_int_status_get(bool bEnabledOnly)
{
    //
    // Return the desired status.
    //
    if (bEnabledOnly)
    10f0:	b910      	cbnz	r0, 10f8 <am_hal_ctimer_int_status_get+0x8>
        uint32_t u32RetVal = AM_REGn(CTIMER, 0, INTSTAT);
        return u32RetVal & AM_REGn(CTIMER, 0, INTEN);
    }
    else
    {
        return AM_REGn(CTIMER, 0, INTSTAT);
    10f2:	4b04      	ldr	r3, [pc, #16]	; (1104 <am_hal_ctimer_int_status_get+0x14>)
    10f4:	6818      	ldr	r0, [r3, #0]
    }
}
    10f6:	4770      	bx	lr
        uint32_t u32RetVal = AM_REGn(CTIMER, 0, INTSTAT);
    10f8:	4a02      	ldr	r2, [pc, #8]	; (1104 <am_hal_ctimer_int_status_get+0x14>)
        return u32RetVal & AM_REGn(CTIMER, 0, INTEN);
    10fa:	4903      	ldr	r1, [pc, #12]	; (1108 <am_hal_ctimer_int_status_get+0x18>)
        uint32_t u32RetVal = AM_REGn(CTIMER, 0, INTSTAT);
    10fc:	6810      	ldr	r0, [r2, #0]
        return u32RetVal & AM_REGn(CTIMER, 0, INTEN);
    10fe:	680b      	ldr	r3, [r1, #0]
    1100:	4018      	ands	r0, r3
    1102:	4770      	bx	lr
    1104:	40008204 	.word	0x40008204
    1108:	40008200 	.word	0x40008200

0000110c <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    110c:	e7fe      	b.n	110c <am_hal_debug_error>
    110e:	bf00      	nop

00001110 <am_hal_flash_delay>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_flash_delay(uint32_t ui32Iterations)
{
    __asm("    subs    r0, #1\n"
    1110:	3801      	subs	r0, #1
    1112:	f47f affd 	bne.w	1110 <am_hal_flash_delay>
    1116:	4770      	bx	lr

00001118 <am_hal_flash_delay_status_change>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_change(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                 uint32_t ui32Mask, uint32_t ui32Value)
{
    while ( ui32usMaxDelay-- )
    1118:	2800      	cmp	r0, #0
    111a:	d070      	beq.n	11fe <am_hal_flash_delay_status_change+0xe6>
{
    111c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1120:	1e47      	subs	r7, r0, #1
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1122:	6808      	ldr	r0, [r1, #0]
    1124:	4010      	ands	r0, r2
    1126:	4283      	cmp	r3, r0
    1128:	d063      	beq.n	11f2 <am_hal_flash_delay_status_change+0xda>
    112a:	f017 0903 	ands.w	r9, r7, #3
    112e:	461c      	mov	r4, r3
    1130:	4615      	mov	r5, r2
    1132:	460e      	mov	r6, r1
        }

        //
        // Call the BOOTROM cycle function to delay for about 1 microsecond.
        //
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    1134:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 1204 <am_hal_flash_delay_status_change+0xec>
    1138:	d02c      	beq.n	1194 <am_hal_flash_delay_status_change+0x7c>
    113a:	f7ff ff49 	bl	fd0 <am_hal_clkgen_sysclk_get>
    113e:	fba8 3100 	umull	r3, r1, r8, r0
    1142:	0c88      	lsrs	r0, r1, #18
    1144:	f7ff ffe4 	bl	1110 <am_hal_flash_delay>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1148:	6833      	ldr	r3, [r6, #0]
    114a:	402b      	ands	r3, r5
    114c:	42a3      	cmp	r3, r4
    while ( ui32usMaxDelay-- )
    114e:	f107 37ff 	add.w	r7, r7, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1152:	d04e      	beq.n	11f2 <am_hal_flash_delay_status_change+0xda>
    1154:	f1b9 0f01 	cmp.w	r9, #1
    1158:	d01c      	beq.n	1194 <am_hal_flash_delay_status_change+0x7c>
    115a:	f1b9 0f02 	cmp.w	r9, #2
    115e:	d00c      	beq.n	117a <am_hal_flash_delay_status_change+0x62>
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    1160:	f7ff ff36 	bl	fd0 <am_hal_clkgen_sysclk_get>
    1164:	fba8 3200 	umull	r3, r2, r8, r0
    1168:	0c90      	lsrs	r0, r2, #18
    116a:	f7ff ffd1 	bl	1110 <am_hal_flash_delay>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    116e:	6830      	ldr	r0, [r6, #0]
    1170:	4028      	ands	r0, r5
    1172:	42a0      	cmp	r0, r4
    while ( ui32usMaxDelay-- )
    1174:	f107 37ff 	add.w	r7, r7, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1178:	d03b      	beq.n	11f2 <am_hal_flash_delay_status_change+0xda>
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    117a:	f7ff ff29 	bl	fd0 <am_hal_clkgen_sysclk_get>
    117e:	fba8 3100 	umull	r3, r1, r8, r0
    1182:	0c88      	lsrs	r0, r1, #18
    1184:	f7ff ffc4 	bl	1110 <am_hal_flash_delay>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1188:	6833      	ldr	r3, [r6, #0]
    118a:	402b      	ands	r3, r5
    118c:	42a3      	cmp	r3, r4
    while ( ui32usMaxDelay-- )
    118e:	f107 37ff 	add.w	r7, r7, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1192:	d02e      	beq.n	11f2 <am_hal_flash_delay_status_change+0xda>
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    1194:	f7ff ff1c 	bl	fd0 <am_hal_clkgen_sysclk_get>
    1198:	fba8 3200 	umull	r3, r2, r8, r0
    119c:	0c90      	lsrs	r0, r2, #18
    119e:	f7ff ffb7 	bl	1110 <am_hal_flash_delay>
    while ( ui32usMaxDelay-- )
    11a2:	b34f      	cbz	r7, 11f8 <am_hal_flash_delay_status_change+0xe0>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    11a4:	6830      	ldr	r0, [r6, #0]
    11a6:	4028      	ands	r0, r5
    11a8:	42a0      	cmp	r0, r4
    while ( ui32usMaxDelay-- )
    11aa:	f1a7 0704 	sub.w	r7, r7, #4
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    11ae:	d020      	beq.n	11f2 <am_hal_flash_delay_status_change+0xda>
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    11b0:	f7ff ff0e 	bl	fd0 <am_hal_clkgen_sysclk_get>
    11b4:	fba8 3100 	umull	r3, r1, r8, r0
    11b8:	0c88      	lsrs	r0, r1, #18
    11ba:	f7ff ffa9 	bl	1110 <am_hal_flash_delay>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    11be:	6833      	ldr	r3, [r6, #0]
    11c0:	402b      	ands	r3, r5
    11c2:	42a3      	cmp	r3, r4
    11c4:	d015      	beq.n	11f2 <am_hal_flash_delay_status_change+0xda>
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    11c6:	f7ff ff03 	bl	fd0 <am_hal_clkgen_sysclk_get>
    11ca:	fba8 3200 	umull	r3, r2, r8, r0
    11ce:	0c90      	lsrs	r0, r2, #18
    11d0:	f7ff ff9e 	bl	1110 <am_hal_flash_delay>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    11d4:	6830      	ldr	r0, [r6, #0]
    11d6:	4028      	ands	r0, r5
    11d8:	42a0      	cmp	r0, r4
    11da:	d00a      	beq.n	11f2 <am_hal_flash_delay_status_change+0xda>
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    11dc:	f7ff fef8 	bl	fd0 <am_hal_clkgen_sysclk_get>
    11e0:	fba8 3100 	umull	r3, r1, r8, r0
    11e4:	0c88      	lsrs	r0, r1, #18
    11e6:	f7ff ff93 	bl	1110 <am_hal_flash_delay>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    11ea:	6833      	ldr	r3, [r6, #0]
    11ec:	402b      	ands	r3, r5
    11ee:	42a3      	cmp	r3, r4
    11f0:	d1d0      	bne.n	1194 <am_hal_flash_delay_status_change+0x7c>
            return 1;
    11f2:	2001      	movs	r0, #1
    11f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }

    return 0;
    11f8:	2000      	movs	r0, #0
    11fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    11fe:	2000      	movs	r0, #0
} // am_hal_flash_delay_status_change()
    1200:	4770      	bx	lr
    1202:	bf00      	nop
    1204:	165e9f81 	.word	0x165e9f81

00001208 <am_hal_gpio_input_read>:
{
    //
    // Combine upper or lower GPIO words into one 64 bit return value.
    //
    uint64_t u64RetVal;
    u64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, RDB)) << 32;
    1208:	4a05      	ldr	r2, [pc, #20]	; (1220 <am_hal_gpio_input_read+0x18>)
    u64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, RDA)) << 0;
    120a:	4b06      	ldr	r3, [pc, #24]	; (1224 <am_hal_gpio_input_read+0x1c>)
    u64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, RDB)) << 32;
    120c:	6811      	ldr	r1, [r2, #0]
    u64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, RDA)) << 0;
    120e:	6818      	ldr	r0, [r3, #0]
    u64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, RDB)) << 32;
    1210:	2200      	movs	r2, #0
    1212:	460b      	mov	r3, r1
    return u64RetVal;
}
    1214:	ea42 0200 	orr.w	r2, r2, r0
    1218:	4610      	mov	r0, r2
    121a:	4619      	mov	r1, r3
    121c:	4770      	bx	lr
    121e:	bf00      	nop
    1220:	40010084 	.word	0x40010084
    1224:	40010080 	.word	0x40010080

00001228 <am_hal_gpio_int_enable>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_enable(uint64_t ui64Interrupt)
{
    1228:	b410      	push	{r4}
    //
    // Enable the interrupts.
    //
    AM_REG(GPIO, INT1EN) |= (ui64Interrupt >> 32);
    122a:	4c05      	ldr	r4, [pc, #20]	; (1240 <am_hal_gpio_int_enable+0x18>)
    AM_REG(GPIO, INT0EN) |= (ui64Interrupt & 0xFFFFFFFF);
    122c:	4a05      	ldr	r2, [pc, #20]	; (1244 <am_hal_gpio_int_enable+0x1c>)
    AM_REG(GPIO, INT1EN) |= (ui64Interrupt >> 32);
    122e:	6823      	ldr	r3, [r4, #0]
    1230:	4319      	orrs	r1, r3
    1232:	6021      	str	r1, [r4, #0]
    AM_REG(GPIO, INT0EN) |= (ui64Interrupt & 0xFFFFFFFF);
    1234:	6811      	ldr	r1, [r2, #0]
}
    1236:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(GPIO, INT0EN) |= (ui64Interrupt & 0xFFFFFFFF);
    123a:	4308      	orrs	r0, r1
    123c:	6010      	str	r0, [r2, #0]
}
    123e:	4770      	bx	lr
    1240:	40010210 	.word	0x40010210
    1244:	40010200 	.word	0x40010200

00001248 <am_hal_gpio_int_clear>:
am_hal_gpio_int_clear(uint64_t ui64Interrupt)
{
    //
    // Clear the interrupts.
    //
    AM_REG(GPIO, INT1CLR) = (ui64Interrupt >> 32);
    1248:	4a02      	ldr	r2, [pc, #8]	; (1254 <am_hal_gpio_int_clear+0xc>)
    AM_REG(GPIO, INT0CLR) = (ui64Interrupt & 0xFFFFFFFF);
    124a:	4b03      	ldr	r3, [pc, #12]	; (1258 <am_hal_gpio_int_clear+0x10>)
    AM_REG(GPIO, INT1CLR) = (ui64Interrupt >> 32);
    124c:	6011      	str	r1, [r2, #0]
    AM_REG(GPIO, INT0CLR) = (ui64Interrupt & 0xFFFFFFFF);
    124e:	6018      	str	r0, [r3, #0]
    1250:	4770      	bx	lr
    1252:	bf00      	nop
    1254:	40010218 	.word	0x40010218
    1258:	40010208 	.word	0x40010208

0000125c <am_hal_gpio_int_status_get>:
//! @return None
//
//*****************************************************************************
uint64_t
am_hal_gpio_int_status_get(bool bEnabledOnly)
{
    125c:	b470      	push	{r4, r5, r6}
    uint64_t u64RetVal, u64Mask;
    //
    // Combine upper or lower GPIO words into one 64 bit return value.
    //
    if (bEnabledOnly)
    125e:	b930      	cbnz	r0, 126e <am_hal_gpio_int_status_get+0x12>
        u64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
        return u64RetVal & u64Mask;
    }
    else
    {
        u64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    1260:	4a0b      	ldr	r2, [pc, #44]	; (1290 <am_hal_gpio_int_status_get+0x34>)
        u64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    1262:	4b0c      	ldr	r3, [pc, #48]	; (1294 <am_hal_gpio_int_status_get+0x38>)
        u64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    1264:	6811      	ldr	r1, [r2, #0]
        u64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    1266:	681c      	ldr	r4, [r3, #0]
    1268:	4320      	orrs	r0, r4
        return u64RetVal;
    }
}
    126a:	bc70      	pop	{r4, r5, r6}
    126c:	4770      	bx	lr
        u64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
    126e:	4d0a      	ldr	r5, [pc, #40]	; (1298 <am_hal_gpio_int_status_get+0x3c>)
        u64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
    1270:	4e0a      	ldr	r6, [pc, #40]	; (129c <am_hal_gpio_int_status_get+0x40>)
        u64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    1272:	4c07      	ldr	r4, [pc, #28]	; (1290 <am_hal_gpio_int_status_get+0x34>)
        u64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    1274:	4a07      	ldr	r2, [pc, #28]	; (1294 <am_hal_gpio_int_status_get+0x38>)
        u64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
    1276:	6829      	ldr	r1, [r5, #0]
        u64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
    1278:	6835      	ldr	r5, [r6, #0]
        u64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    127a:	6823      	ldr	r3, [r4, #0]
        u64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    127c:	6816      	ldr	r6, [r2, #0]
        u64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
    127e:	2000      	movs	r0, #0
        u64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    1280:	4602      	mov	r2, r0
        u64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    1282:	4332      	orrs	r2, r6
        u64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
    1284:	4328      	orrs	r0, r5
        return u64RetVal & u64Mask;
    1286:	4010      	ands	r0, r2
    1288:	4019      	ands	r1, r3
}
    128a:	bc70      	pop	{r4, r5, r6}
    128c:	4770      	bx	lr
    128e:	bf00      	nop
    1290:	40010214 	.word	0x40010214
    1294:	40010204 	.word	0x40010204
    1298:	40010210 	.word	0x40010210
    129c:	40010200 	.word	0x40010200

000012a0 <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    12a0:	280f      	cmp	r0, #15
    12a2:	d80b      	bhi.n	12bc <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    12a4:	2805      	cmp	r0, #5
    12a6:	d013      	beq.n	12d0 <am_hal_interrupt_enable+0x30>
    12a8:	2806      	cmp	r0, #6
    12aa:	d017      	beq.n	12dc <am_hal_interrupt_enable+0x3c>
    12ac:	2804      	cmp	r0, #4
    12ae:	d104      	bne.n	12ba <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    12b0:	4a0d      	ldr	r2, [pc, #52]	; (12e8 <am_hal_interrupt_enable+0x48>)
    12b2:	6813      	ldr	r3, [r2, #0]
    12b4:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    12b8:	6010      	str	r0, [r2, #0]
    12ba:	4770      	bx	lr
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    12bc:	f1a0 0310 	sub.w	r3, r0, #16
    12c0:	f003 0c1f 	and.w	ip, r3, #31
    12c4:	2001      	movs	r0, #1
    12c6:	4909      	ldr	r1, [pc, #36]	; (12ec <am_hal_interrupt_enable+0x4c>)
    12c8:	fa00 f20c 	lsl.w	r2, r0, ip
    12cc:	600a      	str	r2, [r1, #0]
    12ce:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    12d0:	4805      	ldr	r0, [pc, #20]	; (12e8 <am_hal_interrupt_enable+0x48>)
    12d2:	6801      	ldr	r1, [r0, #0]
    12d4:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    12d8:	6002      	str	r2, [r0, #0]
            break;
    12da:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    12dc:	4902      	ldr	r1, [pc, #8]	; (12e8 <am_hal_interrupt_enable+0x48>)
    12de:	680a      	ldr	r2, [r1, #0]
    12e0:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    12e4:	600b      	str	r3, [r1, #0]
            break;
    12e6:	4770      	bx	lr
    12e8:	e000ed24 	.word	0xe000ed24
    12ec:	e000e100 	.word	0xe000e100

000012f0 <am_hal_interrupt_master_enable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    12f0:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    12f4:	b662      	cpsie	i
    __asm("    bx lr");
    12f6:	4770      	bx	lr

000012f8 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    12f8:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    12fc:	b672      	cpsid	i
    __asm("    bx lr");
    12fe:	4770      	bx	lr

00001300 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    1300:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <am_hal_iom_sleeping_queue_flush>:
    uint32_t ui32Critical;

    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    1308:	2801      	cmp	r0, #1
    130a:	d900      	bls.n	130e <am_hal_iom_sleeping_queue_flush+0x6>
    130c:	4770      	bx	lr
{
    130e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1310:	4f0c      	ldr	r7, [pc, #48]	; (1344 <am_hal_iom_sleeping_queue_flush+0x3c>)
    1312:	4e0d      	ldr	r6, [pc, #52]	; (1348 <am_hal_iom_sleeping_queue_flush+0x40>)

        //
        // Check the queue and the IOM itself.
        //
        if ( (g_bIomBusy[ui32Module] == false) &&
            am_hal_queue_empty(&g_psIOMQueue[ui32Module]) )
    1314:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1318:	4604      	mov	r4, r0
    131a:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
        ui32Critical = am_hal_interrupt_master_disable();
    131e:	f7ff ffeb 	bl	12f8 <am_hal_interrupt_master_disable>
        if ( (g_bIomBusy[ui32Module] == false) &&
    1322:	5d31      	ldrb	r1, [r6, r4]
        ui32Critical = am_hal_interrupt_master_disable();
    1324:	4605      	mov	r5, r0
        if ( (g_bIomBusy[ui32Module] == false) &&
    1326:	b929      	cbnz	r1, 1334 <am_hal_iom_sleeping_queue_flush+0x2c>
    1328:	68ba      	ldr	r2, [r7, #8]
    132a:	b91a      	cbnz	r2, 1334 <am_hal_iom_sleeping_queue_flush+0x2c>
        //
        // End the critical section.
        //
        am_hal_interrupt_master_set(ui32Critical);
    }
}
    132c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        am_hal_interrupt_master_set(ui32Critical);
    1330:	f7ff bfe6 	b.w	1300 <am_hal_interrupt_master_set>
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_NORMAL);
    1334:	2000      	movs	r0, #0
    1336:	f001 fa47 	bl	27c8 <am_hal_sysctrl_sleep>
        am_hal_interrupt_master_set(ui32Critical);
    133a:	4628      	mov	r0, r5
    133c:	f7ff ffe0 	bl	1300 <am_hal_interrupt_master_set>
    1340:	e7ed      	b.n	131e <am_hal_iom_sleeping_queue_flush+0x16>
    1342:	bf00      	nop
    1344:	10000a94 	.word	0x10000a94
    1348:	1000085c 	.word	0x1000085c

0000134c <am_hal_iom_spi_write_nb.part.6>:
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    134c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    1350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    1354:	461f      	mov	r7, r3
    1356:	4606      	mov	r6, r0
    1358:	4688      	mov	r8, r1
    135a:	4691      	mov	r9, r2
    135c:	9d08      	ldr	r5, [sp, #32]
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    135e:	f080 80a6 	bcs.w	14ae <am_hal_iom_spi_write_nb.part.6+0x162>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1362:	2b00      	cmp	r3, #0
    1364:	f000 809c 	beq.w	14a0 <am_hal_iom_spi_write_nb.part.6+0x154>
    1368:	495b      	ldr	r1, [pc, #364]	; (14d8 <am_hal_iom_spi_write_nb.part.6+0x18c>)
    while ( g_bIomBusy[ui32Module] );
    136a:	5d8a      	ldrb	r2, [r1, r6]
    136c:	2a00      	cmp	r2, #0
    136e:	d1fc      	bne.n	136a <am_hal_iom_spi_write_nb.part.6+0x1e>
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1370:	f506 24a0 	add.w	r4, r6, #327680	; 0x50000
    g_bIomBusy[ui32Module] = true;
    1374:	2301      	movs	r3, #1
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1376:	3404      	adds	r4, #4
    g_bIomBusy[ui32Module] = true;
    1378:	558b      	strb	r3, [r1, r6]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    137a:	0324      	lsls	r4, r4, #12
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    137c:	2f40      	cmp	r7, #64	; 0x40
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    137e:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    1382:	f040 0101 	orr.w	r1, r0, #1
    1386:	f8c4 1208 	str.w	r1, [r4, #520]	; 0x208
    return (AM_HAL_IOM_MAX_FIFO_SIZE - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    138a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    138e:	f002 0a7f 	and.w	sl, r2, #127	; 0x7f
    1392:	f1ca 0c40 	rsb	ip, sl, #64	; 0x40
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    1396:	f00c 03fc 	and.w	r3, ip, #252	; 0xfc
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    139a:	46ba      	mov	sl, r7
    139c:	bf28      	it	cs
    139e:	f04f 0a40 	movcs.w	sl, #64	; 0x40
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    13a2:	459a      	cmp	sl, r3
    13a4:	f200 808a 	bhi.w	14bc <am_hal_iom_spi_write_nb.part.6+0x170>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    13a8:	f1ba 0f00 	cmp.w	sl, #0
    13ac:	d076      	beq.n	149c <am_hal_iom_spi_write_nb.part.6+0x150>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    13ae:	4648      	mov	r0, r9
    13b0:	ea6f 0209 	mvn.w	r2, r9
    13b4:	f850 1b04 	ldr.w	r1, [r0], #4
    13b8:	6021      	str	r1, [r4, #0]
    13ba:	444a      	add	r2, r9
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    13bc:	eba0 0c09 	sub.w	ip, r0, r9
    13c0:	4452      	add	r2, sl
    13c2:	45e2      	cmp	sl, ip
    13c4:	f3c2 0382 	ubfx	r3, r2, #2, #3
    13c8:	d943      	bls.n	1452 <am_hal_iom_spi_write_nb.part.6+0x106>
    13ca:	b323      	cbz	r3, 1416 <am_hal_iom_spi_write_nb.part.6+0xca>
    13cc:	2b01      	cmp	r3, #1
    13ce:	d01b      	beq.n	1408 <am_hal_iom_spi_write_nb.part.6+0xbc>
    13d0:	2b02      	cmp	r3, #2
    13d2:	d016      	beq.n	1402 <am_hal_iom_spi_write_nb.part.6+0xb6>
    13d4:	2b03      	cmp	r3, #3
    13d6:	d011      	beq.n	13fc <am_hal_iom_spi_write_nb.part.6+0xb0>
    13d8:	2b04      	cmp	r3, #4
    13da:	d00c      	beq.n	13f6 <am_hal_iom_spi_write_nb.part.6+0xaa>
    13dc:	2b05      	cmp	r3, #5
    13de:	d007      	beq.n	13f0 <am_hal_iom_spi_write_nb.part.6+0xa4>
    13e0:	2b06      	cmp	r3, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    13e2:	bf1c      	itt	ne
    13e4:	f850 3b04 	ldrne.w	r3, [r0], #4
    13e8:	6023      	strne	r3, [r4, #0]
    13ea:	f850 2b04 	ldr.w	r2, [r0], #4
    13ee:	6022      	str	r2, [r4, #0]
    13f0:	f850 1b04 	ldr.w	r1, [r0], #4
    13f4:	6021      	str	r1, [r4, #0]
    13f6:	f850 3b04 	ldr.w	r3, [r0], #4
    13fa:	6023      	str	r3, [r4, #0]
    13fc:	f850 2b04 	ldr.w	r2, [r0], #4
    1400:	6022      	str	r2, [r4, #0]
    1402:	f850 1b04 	ldr.w	r1, [r0], #4
    1406:	6021      	str	r1, [r4, #0]
    1408:	f850 3b04 	ldr.w	r3, [r0], #4
    140c:	6023      	str	r3, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    140e:	eba0 0209 	sub.w	r2, r0, r9
    1412:	4592      	cmp	sl, r2
    1414:	d91d      	bls.n	1452 <am_hal_iom_spi_write_nb.part.6+0x106>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1416:	4684      	mov	ip, r0
    1418:	3020      	adds	r0, #32
    141a:	f85c 1b04 	ldr.w	r1, [ip], #4
    141e:	6021      	str	r1, [r4, #0]
    1420:	f850 3c1c 	ldr.w	r3, [r0, #-28]
    1424:	6023      	str	r3, [r4, #0]
    1426:	f8dc 2004 	ldr.w	r2, [ip, #4]
    142a:	6022      	str	r2, [r4, #0]
    142c:	f850 1c14 	ldr.w	r1, [r0, #-20]
    1430:	6021      	str	r1, [r4, #0]
    1432:	f850 3c10 	ldr.w	r3, [r0, #-16]
    1436:	6023      	str	r3, [r4, #0]
    1438:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    143c:	6022      	str	r2, [r4, #0]
    143e:	f850 1c08 	ldr.w	r1, [r0, #-8]
    1442:	6021      	str	r1, [r4, #0]
    1444:	f850 3c04 	ldr.w	r3, [r0, #-4]
    1448:	6023      	str	r3, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    144a:	eba0 0209 	sub.w	r2, r0, r9
    144e:	4592      	cmp	sl, r2
    1450:	d8e1      	bhi.n	1416 <am_hal_iom_spi_write_nb.part.6+0xca>
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    1452:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    1456:	0086      	lsls	r6, r0, #2
    1458:	4a20      	ldr	r2, [pc, #128]	; (14dc <am_hal_iom_spi_write_nb.part.6+0x190>)
        g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    145a:	9809      	ldr	r0, [sp, #36]	; 0x24
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    145c:	2101      	movs	r1, #1
    145e:	1993      	adds	r3, r2, r6
    1460:	5191      	str	r1, [r2, r6]
        g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    1462:	f02a 0203 	bic.w	r2, sl, #3
        g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
    1466:	eba7 060a 	sub.w	r6, r7, sl
        g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    146a:	444a      	add	r2, r9
        g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    146c:	6118      	str	r0, [r3, #16]
        g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    146e:	60dd      	str	r5, [r3, #12]
        g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
    1470:	609e      	str	r6, [r3, #8]
        g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    1472:	605a      	str	r2, [r3, #4]
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1474:	b34f      	cbz	r7, 14ca <am_hal_iom_spi_write_nb.part.6+0x17e>
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    1476:	ea4f 4808 	mov.w	r8, r8, lsl #16
    ui32Command |= ui32Options & 0x5C00FF00;
    147a:	f025 4523 	bic.w	r5, r5, #2734686208	; 0xa3000000
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    147e:	f408 23e0 	and.w	r3, r8, #458752	; 0x70000
    ui32Command |= ui32Options & 0x5C00FF00;
    1482:	f005 21ff 	and.w	r1, r5, #4278255360	; 0xff00ff00
    ui32Command |= (ui32NumBytes & 0xFF);
    1486:	b2fa      	uxtb	r2, r7
    ui32Command |= ui32Options & 0x5C00FF00;
    1488:	430b      	orrs	r3, r1
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    148a:	03ff      	lsls	r7, r7, #15
    ui32Command |= ui32Options & 0x5C00FF00;
    148c:	4313      	orrs	r3, r2
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    148e:	f007 66f0 	and.w	r6, r7, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
    1492:	4333      	orrs	r3, r6
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    1494:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    1498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    149c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    14a0:	4a0f      	ldr	r2, [pc, #60]	; (14e0 <am_hal_iom_spi_write_nb.part.6+0x194>)
    14a2:	4810      	ldr	r0, [pc, #64]	; (14e4 <am_hal_iom_spi_write_nb.part.6+0x198>)
    14a4:	f240 313f 	movw	r1, #831	; 0x33f
    14a8:	f7ff fe30 	bl	110c <am_hal_debug_error>
    14ac:	e75c      	b.n	1368 <am_hal_iom_spi_write_nb.part.6+0x1c>
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    14ae:	4a0e      	ldr	r2, [pc, #56]	; (14e8 <am_hal_iom_spi_write_nb.part.6+0x19c>)
    14b0:	480c      	ldr	r0, [pc, #48]	; (14e4 <am_hal_iom_spi_write_nb.part.6+0x198>)
    14b2:	f240 313d 	movw	r1, #829	; 0x33d
    14b6:	f7ff fe29 	bl	110c <am_hal_debug_error>
    14ba:	e755      	b.n	1368 <am_hal_iom_spi_write_nb.part.6+0x1c>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    14bc:	4a0b      	ldr	r2, [pc, #44]	; (14ec <am_hal_iom_spi_write_nb.part.6+0x1a0>)
    14be:	4809      	ldr	r0, [pc, #36]	; (14e4 <am_hal_iom_spi_write_nb.part.6+0x198>)
    14c0:	f240 71d6 	movw	r1, #2006	; 0x7d6
    14c4:	f7ff fe22 	bl	110c <am_hal_debug_error>
    14c8:	e771      	b.n	13ae <am_hal_iom_spi_write_nb.part.6+0x62>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    14ca:	4a05      	ldr	r2, [pc, #20]	; (14e0 <am_hal_iom_spi_write_nb.part.6+0x194>)
    14cc:	4805      	ldr	r0, [pc, #20]	; (14e4 <am_hal_iom_spi_write_nb.part.6+0x198>)
    14ce:	f240 4104 	movw	r1, #1028	; 0x404
    14d2:	f7ff fe1b 	bl	110c <am_hal_debug_error>
    14d6:	e7ce      	b.n	1476 <am_hal_iom_spi_write_nb.part.6+0x12a>
    14d8:	1000085c 	.word	0x1000085c
    14dc:	10000a6c 	.word	0x10000a6c
    14e0:	00002b80 	.word	0x00002b80
    14e4:	00002ba4 	.word	0x00002ba4
    14e8:	00002c94 	.word	0x00002c94
    14ec:	00002cac 	.word	0x00002cac

000014f0 <am_hal_iom_enable>:
    if ( ui32Module < AM_REG_IOMSTR_NUM_MODULES )
    14f0:	2801      	cmp	r0, #1
{
    14f2:	b410      	push	{r4}
    if ( ui32Module < AM_REG_IOMSTR_NUM_MODULES )
    14f4:	d906      	bls.n	1504 <am_hal_iom_enable+0x14>
        if ( g_ui32Mod1Interface == AM_HAL_IOM_SPIMODE )
    14f6:	481d      	ldr	r0, [pc, #116]	; (156c <am_hal_iom_enable+0x7c>)
    14f8:	6803      	ldr	r3, [r0, #0]
    14fa:	2b01      	cmp	r3, #1
    14fc:	d025      	beq.n	154a <am_hal_iom_enable+0x5a>
}
    14fe:	f85d 4b04 	ldr.w	r4, [sp], #4
    1502:	4770      	bx	lr
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
    1504:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    1508:	3304      	adds	r3, #4
    150a:	031b      	lsls	r3, r3, #12
        g_bIomBusy[ui32Module] = false;
    150c:	4918      	ldr	r1, [pc, #96]	; (1570 <am_hal_iom_enable+0x80>)
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
    150e:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
        g_bIomBusy[ui32Module] = false;
    1512:	2400      	movs	r4, #0
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
    1514:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    1518:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        g_bIomBusy[ui32Module] = false;
    151c:	540c      	strb	r4, [r1, r0]
    if ( ui32Module == 0 )
    151e:	2800      	cmp	r0, #0
    1520:	d1e9      	bne.n	14f6 <am_hal_iom_enable+0x6>
        if ( g_ui32Mod0Interface == AM_HAL_IOM_SPIMODE )
    1522:	4914      	ldr	r1, [pc, #80]	; (1574 <am_hal_iom_enable+0x84>)
    1524:	680c      	ldr	r4, [r1, #0]
    1526:	2c01      	cmp	r4, #1
    1528:	d1e9      	bne.n	14fe <am_hal_iom_enable+0xe>
            AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    152a:	4913      	ldr	r1, [pc, #76]	; (1578 <am_hal_iom_enable+0x88>)
            AM_BFW(GPIO, PADREGB, PAD5INPEN, 1);
    152c:	4b13      	ldr	r3, [pc, #76]	; (157c <am_hal_iom_enable+0x8c>)
            AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    152e:	2273      	movs	r2, #115	; 0x73
    1530:	600a      	str	r2, [r1, #0]
            AM_BFW(GPIO, PADREGB, PAD5INPEN, 1);
    1532:	681c      	ldr	r4, [r3, #0]
    1534:	f444 7200 	orr.w	r2, r4, #512	; 0x200
    1538:	601a      	str	r2, [r3, #0]
            AM_BFW(GPIO, PADREGB, PAD6INPEN, 1);
    153a:	681c      	ldr	r4, [r3, #0]
    153c:	f444 3200 	orr.w	r2, r4, #131072	; 0x20000
    1540:	601a      	str	r2, [r3, #0]
}
    1542:	f85d 4b04 	ldr.w	r4, [sp], #4
            AM_REGn(GPIO, 0, PADKEY) = 0;
    1546:	6008      	str	r0, [r1, #0]
}
    1548:	4770      	bx	lr
            AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    154a:	490b      	ldr	r1, [pc, #44]	; (1578 <am_hal_iom_enable+0x88>)
            AM_BFW(GPIO, PADREGC, PAD8INPEN, 1);
    154c:	4c0c      	ldr	r4, [pc, #48]	; (1580 <am_hal_iom_enable+0x90>)
            AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    154e:	2273      	movs	r2, #115	; 0x73
    1550:	600a      	str	r2, [r1, #0]
            AM_BFW(GPIO, PADREGC, PAD8INPEN, 1);
    1552:	6820      	ldr	r0, [r4, #0]
    1554:	f040 0302 	orr.w	r3, r0, #2
    1558:	6023      	str	r3, [r4, #0]
            AM_BFW(GPIO, PADREGC, PAD9INPEN, 1);
    155a:	6822      	ldr	r2, [r4, #0]
            AM_REGn(GPIO, 0, PADKEY) = 0;
    155c:	2000      	movs	r0, #0
            AM_BFW(GPIO, PADREGC, PAD9INPEN, 1);
    155e:	f442 7300 	orr.w	r3, r2, #512	; 0x200
    1562:	6023      	str	r3, [r4, #0]
            AM_REGn(GPIO, 0, PADKEY) = 0;
    1564:	6008      	str	r0, [r1, #0]
}
    1566:	f85d 4b04 	ldr.w	r4, [sp], #4
    156a:	4770      	bx	lr
    156c:	10000864 	.word	0x10000864
    1570:	1000085c 	.word	0x1000085c
    1574:	10000860 	.word	0x10000860
    1578:	40010060 	.word	0x40010060
    157c:	40010004 	.word	0x40010004
    1580:	40010008 	.word	0x40010008

00001584 <am_hal_iom_disable>:
    if ( ui32Module < AM_REG_IOMSTR_NUM_MODULES )
    1584:	2801      	cmp	r0, #1
    1586:	d900      	bls.n	158a <am_hal_iom_disable+0x6>
    1588:	4770      	bx	lr
    158a:	4a1a      	ldr	r2, [pc, #104]	; (15f4 <am_hal_iom_disable+0x70>)
    while ( g_bIomBusy[ui32Module] );
    158c:	5c13      	ldrb	r3, [r2, r0]
    158e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    1592:	2b00      	cmp	r3, #0
    1594:	d1fa      	bne.n	158c <am_hal_iom_disable+0x8>
        AM_REGn(IOMSTR, ui32Module, CFG) &= ~(AM_REG_IOMSTR_CFG_IFCEN(1));
    1596:	f500 22a0 	add.w	r2, r0, #327680	; 0x50000
    159a:	3204      	adds	r2, #4
    159c:	0313      	lsls	r3, r2, #12
    159e:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
    15a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    15a6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        if ( ui32Module == 0 )
    15aa:	b988      	cbnz	r0, 15d0 <am_hal_iom_disable+0x4c>
            if ( g_ui32Mod0Interface == AM_HAL_IOM_SPIMODE )
    15ac:	4912      	ldr	r1, [pc, #72]	; (15f8 <am_hal_iom_disable+0x74>)
    15ae:	680b      	ldr	r3, [r1, #0]
    15b0:	2b01      	cmp	r3, #1
    15b2:	d1e9      	bne.n	1588 <am_hal_iom_disable+0x4>
                AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    15b4:	4911      	ldr	r1, [pc, #68]	; (15fc <am_hal_iom_disable+0x78>)
                AM_BFW(GPIO, PADREGB, PAD5INPEN, 0);
    15b6:	4b12      	ldr	r3, [pc, #72]	; (1600 <am_hal_iom_disable+0x7c>)
                AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    15b8:	2273      	movs	r2, #115	; 0x73
    15ba:	600a      	str	r2, [r1, #0]
                AM_BFW(GPIO, PADREGB, PAD5INPEN, 0);
    15bc:	681a      	ldr	r2, [r3, #0]
    15be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    15c2:	601a      	str	r2, [r3, #0]
                AM_BFW(GPIO, PADREGB, PAD6INPEN, 0);
    15c4:	681a      	ldr	r2, [r3, #0]
    15c6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
    15ca:	601a      	str	r2, [r3, #0]
                AM_REGn(GPIO, 0, PADKEY) = 0;
    15cc:	6008      	str	r0, [r1, #0]
    15ce:	4770      	bx	lr
            if ( g_ui32Mod1Interface == AM_HAL_IOM_SPIMODE )
    15d0:	480c      	ldr	r0, [pc, #48]	; (1604 <am_hal_iom_disable+0x80>)
    15d2:	6803      	ldr	r3, [r0, #0]
    15d4:	2b01      	cmp	r3, #1
    15d6:	d1d7      	bne.n	1588 <am_hal_iom_disable+0x4>
                AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    15d8:	4808      	ldr	r0, [pc, #32]	; (15fc <am_hal_iom_disable+0x78>)
                AM_BFW(GPIO, PADREGC, PAD8INPEN, 0);
    15da:	4b0b      	ldr	r3, [pc, #44]	; (1608 <am_hal_iom_disable+0x84>)
                AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    15dc:	2273      	movs	r2, #115	; 0x73
    15de:	6002      	str	r2, [r0, #0]
                AM_BFW(GPIO, PADREGC, PAD8INPEN, 0);
    15e0:	681a      	ldr	r2, [r3, #0]
    15e2:	f022 0202 	bic.w	r2, r2, #2
    15e6:	601a      	str	r2, [r3, #0]
                AM_BFW(GPIO, PADREGC, PAD9INPEN, 0);
    15e8:	681a      	ldr	r2, [r3, #0]
    15ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    15ee:	601a      	str	r2, [r3, #0]
                AM_REGn(GPIO, 0, PADKEY) = 0;
    15f0:	6001      	str	r1, [r0, #0]
}
    15f2:	e7c9      	b.n	1588 <am_hal_iom_disable+0x4>
    15f4:	1000085c 	.word	0x1000085c
    15f8:	10000860 	.word	0x10000860
    15fc:	40010060 	.word	0x40010060
    1600:	40010004 	.word	0x40010004
    1604:	10000864 	.word	0x10000864
    1608:	40010008 	.word	0x40010008

0000160c <am_hal_iom_config>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    160c:	2801      	cmp	r0, #1
    160e:	d900      	bls.n	1612 <am_hal_iom_config+0x6>
    1610:	4770      	bx	lr
{
    1612:	b538      	push	{r3, r4, r5, lr}
    ui32Config = psConfig->ui32InterfaceMode;
    1614:	680b      	ldr	r3, [r1, #0]
    if ( ui32Module == 0 )
    1616:	b348      	cbz	r0, 166c <am_hal_iom_config+0x60>
        g_ui32Mod1Interface = psConfig->ui32InterfaceMode;
    1618:	4a24      	ldr	r2, [pc, #144]	; (16ac <am_hal_iom_config+0xa0>)
    161a:	6013      	str	r3, [r2, #0]
    if ( psConfig->bSPHA )
    161c:	7a0d      	ldrb	r5, [r1, #8]
    161e:	b10d      	cbz	r5, 1624 <am_hal_iom_config+0x18>
        ui32Config |= AM_REG_IOMSTR_CFG_SPHA(1);
    1620:	f043 0304 	orr.w	r3, r3, #4
    if ( psConfig->bSPOL )
    1624:	7a4a      	ldrb	r2, [r1, #9]
    1626:	b10a      	cbz	r2, 162c <am_hal_iom_config+0x20>
        ui32Config |= AM_REG_IOMSTR_CFG_SPOL(1);
    1628:	f043 0302 	orr.w	r3, r3, #2
    AM_REGn(IOMSTR, ui32Module, CFG) = ui32Config;
    162c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
    1630:	3004      	adds	r0, #4
    1632:	0304      	lsls	r4, r0, #12
    1634:	460d      	mov	r5, r1
    1636:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    am_hal_debug_assert_msg(
    163a:	7a89      	ldrb	r1, [r1, #10]
    163c:	293c      	cmp	r1, #60	; 0x3c
    163e:	d82e      	bhi.n	169e <am_hal_iom_config+0x92>
    am_hal_debug_assert_msg(
    1640:	7aea      	ldrb	r2, [r5, #11]
    1642:	2a3c      	cmp	r2, #60	; 0x3c
    1644:	d824      	bhi.n	1690 <am_hal_iom_config+0x84>
    am_hal_debug_assert_msg(
    1646:	7aab      	ldrb	r3, [r5, #10]
    1648:	2b03      	cmp	r3, #3
    164a:	d91a      	bls.n	1682 <am_hal_iom_config+0x76>
    am_hal_debug_assert_msg(
    164c:	7ae8      	ldrb	r0, [r5, #11]
    164e:	2803      	cmp	r0, #3
    1650:	d90f      	bls.n	1672 <am_hal_iom_config+0x66>
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(psConfig->ui8WriteThreshold) |
    1652:	7aa9      	ldrb	r1, [r5, #10]
    1654:	020b      	lsls	r3, r1, #8
         AM_REG_IOMSTR_FIFOTHR_FIFORTHR(psConfig->ui8ReadThreshold));
    1656:	f000 023f 	and.w	r2, r0, #63	; 0x3f
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(psConfig->ui8WriteThreshold) |
    165a:	f403 507c 	and.w	r0, r3, #16128	; 0x3f00
    165e:	4310      	orrs	r0, r2
    AM_REGn(IOMSTR, ui32Module, FIFOTHR) =
    1660:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    AM_REGn(IOMSTR, ui32Module, CLKCFG) = psConfig->ui32ClockFrequency;
    1664:	686d      	ldr	r5, [r5, #4]
    1666:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
    166a:	bd38      	pop	{r3, r4, r5, pc}
        g_ui32Mod0Interface = psConfig->ui32InterfaceMode;
    166c:	4c10      	ldr	r4, [pc, #64]	; (16b0 <am_hal_iom_config+0xa4>)
    166e:	6023      	str	r3, [r4, #0]
    1670:	e7d4      	b.n	161c <am_hal_iom_config+0x10>
    am_hal_debug_assert_msg(
    1672:	4810      	ldr	r0, [pc, #64]	; (16b4 <am_hal_iom_config+0xa8>)
    1674:	4a10      	ldr	r2, [pc, #64]	; (16b8 <am_hal_iom_config+0xac>)
    1676:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    167a:	f7ff fd47 	bl	110c <am_hal_debug_error>
    167e:	7ae8      	ldrb	r0, [r5, #11]
    1680:	e7e7      	b.n	1652 <am_hal_iom_config+0x46>
    am_hal_debug_assert_msg(
    1682:	4a0e      	ldr	r2, [pc, #56]	; (16bc <am_hal_iom_config+0xb0>)
    1684:	480b      	ldr	r0, [pc, #44]	; (16b4 <am_hal_iom_config+0xa8>)
    1686:	f44f 71ac 	mov.w	r1, #344	; 0x158
    168a:	f7ff fd3f 	bl	110c <am_hal_debug_error>
    168e:	e7dd      	b.n	164c <am_hal_iom_config+0x40>
    am_hal_debug_assert_msg(
    1690:	4a0b      	ldr	r2, [pc, #44]	; (16c0 <am_hal_iom_config+0xb4>)
    1692:	4808      	ldr	r0, [pc, #32]	; (16b4 <am_hal_iom_config+0xa8>)
    1694:	f44f 71ab 	mov.w	r1, #342	; 0x156
    1698:	f7ff fd38 	bl	110c <am_hal_debug_error>
    169c:	e7d3      	b.n	1646 <am_hal_iom_config+0x3a>
    am_hal_debug_assert_msg(
    169e:	4a09      	ldr	r2, [pc, #36]	; (16c4 <am_hal_iom_config+0xb8>)
    16a0:	4804      	ldr	r0, [pc, #16]	; (16b4 <am_hal_iom_config+0xa8>)
    16a2:	f44f 71aa 	mov.w	r1, #340	; 0x154
    16a6:	f7ff fd31 	bl	110c <am_hal_debug_error>
    16aa:	e7c9      	b.n	1640 <am_hal_iom_config+0x34>
    16ac:	10000864 	.word	0x10000864
    16b0:	10000860 	.word	0x10000860
    16b4:	00002ba4 	.word	0x00002ba4
    16b8:	00002b60 	.word	0x00002b60
    16bc:	00002b40 	.word	0x00002b40
    16c0:	00002b24 	.word	0x00002b24
    16c4:	00002b04 	.word	0x00002b04

000016c8 <am_hal_iom_spi_write_nq>:
{
    16c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    16cc:	2801      	cmp	r0, #1
{
    16ce:	b083      	sub	sp, #12
    16d0:	4606      	mov	r6, r0
    16d2:	4688      	mov	r8, r1
    16d4:	4617      	mov	r7, r2
    16d6:	469b      	mov	fp, r3
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    16d8:	d905      	bls.n	16e6 <am_hal_iom_spi_write_nq+0x1e>
    16da:	4ac9      	ldr	r2, [pc, #804]	; (1a00 <am_hal_iom_spi_write_nq+0x338>)
    16dc:	48c9      	ldr	r0, [pc, #804]	; (1a04 <am_hal_iom_spi_write_nq+0x33c>)
    16de:	f240 2121 	movw	r1, #545	; 0x221
    16e2:	f7ff fd13 	bl	110c <am_hal_debug_error>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    16e6:	f1bb 0f00 	cmp.w	fp, #0
    16ea:	f000 8173 	beq.w	19d4 <am_hal_iom_spi_write_nq+0x30c>
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    16ee:	f5bb 5f80 	cmp.w	fp, #4096	; 0x1000
    16f2:	f080 80e3 	bcs.w	18bc <am_hal_iom_spi_write_nq+0x1f4>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    16f6:	2e01      	cmp	r6, #1
    16f8:	f240 80e9 	bls.w	18ce <am_hal_iom_spi_write_nq+0x206>
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    16fc:	f506 24a0 	add.w	r4, r6, #327680	; 0x50000
    1700:	3404      	adds	r4, #4
    1702:	0324      	lsls	r4, r4, #12
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    1704:	2500      	movs	r5, #0
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    1706:	f8d4 9200 	ldr.w	r9, [r4, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    170a:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    170e:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    1712:	465d      	mov	r5, fp
    1714:	2d40      	cmp	r5, #64	; 0x40
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1716:	f040 0301 	orr.w	r3, r0, #1
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    171a:	f504 7200 	add.w	r2, r4, #512	; 0x200
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    171e:	bf28      	it	cs
    1720:	2540      	movcs	r5, #64	; 0x40
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1722:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    1726:	9200      	str	r2, [sp, #0]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1728:	f504 7a02 	add.w	sl, r4, #520	; 0x208
    172c:	f025 0303 	bic.w	r3, r5, #3
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1730:	f1bb 0f00 	cmp.w	fp, #0
    1734:	d107      	bne.n	1746 <am_hal_iom_spi_write_nq+0x7e>
    1736:	4ab4      	ldr	r2, [pc, #720]	; (1a08 <am_hal_iom_spi_write_nq+0x340>)
    1738:	48b2      	ldr	r0, [pc, #712]	; (1a04 <am_hal_iom_spi_write_nq+0x33c>)
    173a:	9301      	str	r3, [sp, #4]
    173c:	f240 4104 	movw	r1, #1028	; 0x404
    1740:	f7ff fce4 	bl	110c <am_hal_debug_error>
    1744:	9b01      	ldr	r3, [sp, #4]
    ui32Command |= ui32Options & 0x5C00FF00;
    1746:	990c      	ldr	r1, [sp, #48]	; 0x30
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    1748:	ea4f 4008 	mov.w	r0, r8, lsl #16
    ui32Command |= ui32Options & 0x5C00FF00;
    174c:	f021 4123 	bic.w	r1, r1, #2734686208	; 0xa3000000
    1750:	f001 28ff 	and.w	r8, r1, #4278255360	; 0xff00ff00
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    1754:	f400 2ee0 	and.w	lr, r0, #458752	; 0x70000
    ui32Command |= ui32Options & 0x5C00FF00;
    1758:	ea4e 0208 	orr.w	r2, lr, r8
    ui32Command |= (ui32NumBytes & 0xFF);
    175c:	fa5f f08b 	uxtb.w	r0, fp
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    1760:	ea4f 3ccb 	mov.w	ip, fp, lsl #15
    ui32Command |= ui32Options & 0x5C00FF00;
    1764:	4302      	orrs	r2, r0
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    1766:	f00c 61f0 	and.w	r1, ip, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
    176a:	430a      	orrs	r2, r1
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    176c:	ebbb 0b05 	subs.w	fp, fp, r5
    pui32Data += ui32TransferSize >> 2;
    1770:	441f      	add	r7, r3
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    1772:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    1776:	bf08      	it	eq
    1778:	f504 7801 	addeq.w	r8, r4, #516	; 0x204
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    177c:	f000 8082 	beq.w	1884 <am_hal_iom_spi_write_nq+0x1bc>
    1780:	f8d4 5204 	ldr.w	r5, [r4, #516]	; 0x204
    1784:	07e9      	lsls	r1, r5, #31
    1786:	f504 7801 	add.w	r8, r4, #516	; 0x204
    178a:	d47b      	bmi.n	1884 <am_hal_iom_spi_write_nq+0x1bc>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    178c:	4653      	mov	r3, sl
    178e:	46ca      	mov	sl, r9
    1790:	e003      	b.n	179a <am_hal_iom_spi_write_nq+0xd2>
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    1792:	f8d8 5000 	ldr.w	r5, [r8]
    1796:	07ea      	lsls	r2, r5, #31
    1798:	d472      	bmi.n	1880 <am_hal_iom_spi_write_nq+0x1b8>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    179a:	2e01      	cmp	r6, #1
    179c:	d8f9      	bhi.n	1792 <am_hal_iom_spi_write_nq+0xca>
    return (AM_HAL_IOM_MAX_FIFO_SIZE - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    179e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    17a2:	f002 007f 	and.w	r0, r2, #127	; 0x7f
    17a6:	f1c0 0140 	rsb	r1, r0, #64	; 0x40
        ui32SpaceInFifo =  am_hal_iom_fifo_empty_slots(ui32Module);
    17aa:	f001 09fc 	and.w	r9, r1, #252	; 0xfc
        if ( ui32NumBytes <= ui32SpaceInFifo )
    17ae:	45cb      	cmp	fp, r9
    return (AM_HAL_IOM_MAX_FIFO_SIZE - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    17b0:	f504 7e80 	add.w	lr, r4, #256	; 0x100
        if ( ui32NumBytes <= ui32SpaceInFifo )
    17b4:	f200 811e 	bhi.w	19f4 <am_hal_iom_spi_write_nq+0x32c>
    17b8:	f02b 0903 	bic.w	r9, fp, #3
    17bc:	465d      	mov	r5, fp
    17be:	f04f 0b00 	mov.w	fp, #0
    return (AM_HAL_IOM_MAX_FIFO_SIZE - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    17c2:	f8de 2000 	ldr.w	r2, [lr]
    17c6:	f002 007f 	and.w	r0, r2, #127	; 0x7f
    17ca:	f1c0 0140 	rsb	r1, r0, #64	; 0x40
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    17ce:	f001 0cfc 	and.w	ip, r1, #252	; 0xfc
    17d2:	4565      	cmp	r5, ip
    17d4:	f200 80f5 	bhi.w	19c2 <am_hal_iom_spi_write_nq+0x2fa>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    17d8:	2d00      	cmp	r5, #0
    17da:	d04d      	beq.n	1878 <am_hal_iom_spi_write_nq+0x1b0>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    17dc:	463a      	mov	r2, r7
    17de:	43f9      	mvns	r1, r7
    17e0:	f852 0b04 	ldr.w	r0, [r2], #4
    17e4:	6020      	str	r0, [r4, #0]
    17e6:	4439      	add	r1, r7
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    17e8:	1bd0      	subs	r0, r2, r7
    17ea:	4429      	add	r1, r5
    17ec:	4285      	cmp	r5, r0
    17ee:	f3c1 0182 	ubfx	r1, r1, #2, #3
    17f2:	d941      	bls.n	1878 <am_hal_iom_spi_write_nq+0x1b0>
    17f4:	b319      	cbz	r1, 183e <am_hal_iom_spi_write_nq+0x176>
    17f6:	2901      	cmp	r1, #1
    17f8:	d01b      	beq.n	1832 <am_hal_iom_spi_write_nq+0x16a>
    17fa:	2902      	cmp	r1, #2
    17fc:	d016      	beq.n	182c <am_hal_iom_spi_write_nq+0x164>
    17fe:	2903      	cmp	r1, #3
    1800:	d011      	beq.n	1826 <am_hal_iom_spi_write_nq+0x15e>
    1802:	2904      	cmp	r1, #4
    1804:	d00c      	beq.n	1820 <am_hal_iom_spi_write_nq+0x158>
    1806:	2905      	cmp	r1, #5
    1808:	d007      	beq.n	181a <am_hal_iom_spi_write_nq+0x152>
    180a:	2906      	cmp	r1, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    180c:	bf1c      	itt	ne
    180e:	f852 1b04 	ldrne.w	r1, [r2], #4
    1812:	6021      	strne	r1, [r4, #0]
    1814:	f852 0b04 	ldr.w	r0, [r2], #4
    1818:	6020      	str	r0, [r4, #0]
    181a:	f852 1b04 	ldr.w	r1, [r2], #4
    181e:	6021      	str	r1, [r4, #0]
    1820:	f852 0b04 	ldr.w	r0, [r2], #4
    1824:	6020      	str	r0, [r4, #0]
    1826:	f852 1b04 	ldr.w	r1, [r2], #4
    182a:	6021      	str	r1, [r4, #0]
    182c:	f852 0b04 	ldr.w	r0, [r2], #4
    1830:	6020      	str	r0, [r4, #0]
    1832:	f852 1b04 	ldr.w	r1, [r2], #4
    1836:	6021      	str	r1, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1838:	1bd0      	subs	r0, r2, r7
    183a:	4285      	cmp	r5, r0
    183c:	d91c      	bls.n	1878 <am_hal_iom_spi_write_nq+0x1b0>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    183e:	4696      	mov	lr, r2
    1840:	3220      	adds	r2, #32
    1842:	f85e 1b04 	ldr.w	r1, [lr], #4
    1846:	6021      	str	r1, [r4, #0]
    1848:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    184c:	6020      	str	r0, [r4, #0]
    184e:	f8de 1004 	ldr.w	r1, [lr, #4]
    1852:	6021      	str	r1, [r4, #0]
    1854:	f852 0c14 	ldr.w	r0, [r2, #-20]
    1858:	6020      	str	r0, [r4, #0]
    185a:	f852 1c10 	ldr.w	r1, [r2, #-16]
    185e:	6021      	str	r1, [r4, #0]
    1860:	f852 0c0c 	ldr.w	r0, [r2, #-12]
    1864:	6020      	str	r0, [r4, #0]
    1866:	f852 1c08 	ldr.w	r1, [r2, #-8]
    186a:	6021      	str	r1, [r4, #0]
    186c:	f852 0c04 	ldr.w	r0, [r2, #-4]
    1870:	6020      	str	r0, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1872:	1bd1      	subs	r1, r2, r7
    1874:	428d      	cmp	r5, r1
    1876:	d8e2      	bhi.n	183e <am_hal_iom_spi_write_nq+0x176>
        pui32Data += ui32TransferSize >> 2;
    1878:	444f      	add	r7, r9
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    187a:	f1bb 0f00 	cmp.w	fp, #0
    187e:	d188      	bne.n	1792 <am_hal_iom_spi_write_nq+0xca>
    1880:	46d1      	mov	r9, sl
    1882:	469a      	mov	sl, r3
    ui32Status = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    1884:	4f61      	ldr	r7, [pc, #388]	; (1a0c <am_hal_iom_spi_write_nq+0x344>)
    1886:	2301      	movs	r3, #1
    1888:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
    188c:	461a      	mov	r2, r3
    188e:	4641      	mov	r1, r8
    1890:	f7ff fc42 	bl	1118 <am_hal_flash_delay_status_change>
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    1894:	9a00      	ldr	r2, [sp, #0]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = (ui32IntConfig | AM_REG_IOMSTR_INTSTAT_CMDCMP_M);
    1896:	f049 0401 	orr.w	r4, r9, #1
    am_hal_debug_assert_msg(ui32Status == 1, "IOM CMDCMP was not seen");
    189a:	2801      	cmp	r0, #1
    AM_REGn(IOMSTR, ui32Module, INTCLR) = (ui32IntConfig | AM_REG_IOMSTR_INTSTAT_CMDCMP_M);
    189c:	f8ca 4000 	str.w	r4, [sl]
    ui32Status = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    18a0:	4606      	mov	r6, r0
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    18a2:	f8c2 9000 	str.w	r9, [r2]
    am_hal_debug_assert_msg(ui32Status == 1, "IOM CMDCMP was not seen");
    18a6:	d005      	beq.n	18b4 <am_hal_iom_spi_write_nq+0x1ec>
    18a8:	4a59      	ldr	r2, [pc, #356]	; (1a10 <am_hal_iom_spi_write_nq+0x348>)
    18aa:	4856      	ldr	r0, [pc, #344]	; (1a04 <am_hal_iom_spi_write_nq+0x33c>)
    18ac:	f240 2181 	movw	r1, #641	; 0x281
    18b0:	f7ff fc2c 	bl	110c <am_hal_debug_error>
}
    18b4:	4630      	mov	r0, r6
    18b6:	b003      	add	sp, #12
    18b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    18bc:	4a55      	ldr	r2, [pc, #340]	; (1a14 <am_hal_iom_spi_write_nq+0x34c>)
    18be:	4851      	ldr	r0, [pc, #324]	; (1a04 <am_hal_iom_spi_write_nq+0x33c>)
    18c0:	f44f 710a 	mov.w	r1, #552	; 0x228
    18c4:	f7ff fc22 	bl	110c <am_hal_debug_error>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    18c8:	2e01      	cmp	r6, #1
    18ca:	f63f af17 	bhi.w	16fc <am_hal_iom_spi_write_nq+0x34>
    18ce:	4952      	ldr	r1, [pc, #328]	; (1a18 <am_hal_iom_spi_write_nq+0x350>)
    while ( g_bIomBusy[ui32Module] );
    18d0:	5d8b      	ldrb	r3, [r1, r6]
    18d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    18d6:	2b00      	cmp	r3, #0
    18d8:	d1fa      	bne.n	18d0 <am_hal_iom_spi_write_nq+0x208>
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    18da:	f506 24a0 	add.w	r4, r6, #327680	; 0x50000
    18de:	3404      	adds	r4, #4
    18e0:	0324      	lsls	r4, r4, #12
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    18e2:	465d      	mov	r5, fp
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    18e4:	f8d4 9200 	ldr.w	r9, [r4, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    18e8:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    18ec:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    18f0:	f040 0101 	orr.w	r1, r0, #1
    18f4:	f8c4 1208 	str.w	r1, [r4, #520]	; 0x208
    return (AM_HAL_IOM_MAX_FIFO_SIZE - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    18f8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    18fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    1900:	2d40      	cmp	r5, #64	; 0x40
    return (AM_HAL_IOM_MAX_FIFO_SIZE - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1902:	f1c2 0040 	rsb	r0, r2, #64	; 0x40
    ui32TransferSize = (ui32NumBytes <= AM_HAL_IOM_MAX_FIFO_SIZE ? ui32NumBytes :
    1906:	bf28      	it	cs
    1908:	2540      	movcs	r5, #64	; 0x40
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    190a:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    190e:	f504 7300 	add.w	r3, r4, #512	; 0x200
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    1912:	42a9      	cmp	r1, r5
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    1914:	9300      	str	r3, [sp, #0]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1916:	f504 7a02 	add.w	sl, r4, #520	; 0x208
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    191a:	d362      	bcc.n	19e2 <am_hal_iom_spi_write_nq+0x31a>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    191c:	2d00      	cmp	r5, #0
    191e:	d067      	beq.n	19f0 <am_hal_iom_spi_write_nq+0x328>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1920:	4638      	mov	r0, r7
    1922:	43fa      	mvns	r2, r7
    1924:	f850 1b04 	ldr.w	r1, [r0], #4
    1928:	6021      	str	r1, [r4, #0]
    192a:	443a      	add	r2, r7
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    192c:	1bc3      	subs	r3, r0, r7
    192e:	442a      	add	r2, r5
    1930:	42ab      	cmp	r3, r5
    1932:	f3c2 0282 	ubfx	r2, r2, #2, #3
    1936:	f4bf aef9 	bcs.w	172c <am_hal_iom_spi_write_nq+0x64>
    193a:	b322      	cbz	r2, 1986 <am_hal_iom_spi_write_nq+0x2be>
    193c:	2a01      	cmp	r2, #1
    193e:	d01b      	beq.n	1978 <am_hal_iom_spi_write_nq+0x2b0>
    1940:	2a02      	cmp	r2, #2
    1942:	d016      	beq.n	1972 <am_hal_iom_spi_write_nq+0x2aa>
    1944:	2a03      	cmp	r2, #3
    1946:	d011      	beq.n	196c <am_hal_iom_spi_write_nq+0x2a4>
    1948:	2a04      	cmp	r2, #4
    194a:	d00c      	beq.n	1966 <am_hal_iom_spi_write_nq+0x29e>
    194c:	2a05      	cmp	r2, #5
    194e:	d007      	beq.n	1960 <am_hal_iom_spi_write_nq+0x298>
    1950:	2a06      	cmp	r2, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1952:	bf1c      	itt	ne
    1954:	f850 2b04 	ldrne.w	r2, [r0], #4
    1958:	6022      	strne	r2, [r4, #0]
    195a:	f850 1b04 	ldr.w	r1, [r0], #4
    195e:	6021      	str	r1, [r4, #0]
    1960:	f850 3b04 	ldr.w	r3, [r0], #4
    1964:	6023      	str	r3, [r4, #0]
    1966:	f850 2b04 	ldr.w	r2, [r0], #4
    196a:	6022      	str	r2, [r4, #0]
    196c:	f850 1b04 	ldr.w	r1, [r0], #4
    1970:	6021      	str	r1, [r4, #0]
    1972:	f850 3b04 	ldr.w	r3, [r0], #4
    1976:	6023      	str	r3, [r4, #0]
    1978:	f850 2b04 	ldr.w	r2, [r0], #4
    197c:	6022      	str	r2, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    197e:	1bc1      	subs	r1, r0, r7
    1980:	42a9      	cmp	r1, r5
    1982:	f4bf aed3 	bcs.w	172c <am_hal_iom_spi_write_nq+0x64>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1986:	4684      	mov	ip, r0
    1988:	3020      	adds	r0, #32
    198a:	f85c 3b04 	ldr.w	r3, [ip], #4
    198e:	6023      	str	r3, [r4, #0]
    1990:	f850 2c1c 	ldr.w	r2, [r0, #-28]
    1994:	6022      	str	r2, [r4, #0]
    1996:	f8dc 1004 	ldr.w	r1, [ip, #4]
    199a:	6021      	str	r1, [r4, #0]
    199c:	f850 3c14 	ldr.w	r3, [r0, #-20]
    19a0:	6023      	str	r3, [r4, #0]
    19a2:	f850 2c10 	ldr.w	r2, [r0, #-16]
    19a6:	6022      	str	r2, [r4, #0]
    19a8:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    19ac:	6021      	str	r1, [r4, #0]
    19ae:	f850 3c08 	ldr.w	r3, [r0, #-8]
    19b2:	6023      	str	r3, [r4, #0]
    19b4:	f850 2c04 	ldr.w	r2, [r0, #-4]
    19b8:	6022      	str	r2, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    19ba:	1bc1      	subs	r1, r0, r7
    19bc:	42a9      	cmp	r1, r5
    19be:	d3e2      	bcc.n	1986 <am_hal_iom_spi_write_nq+0x2be>
    19c0:	e6b4      	b.n	172c <am_hal_iom_spi_write_nq+0x64>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    19c2:	4a16      	ldr	r2, [pc, #88]	; (1a1c <am_hal_iom_spi_write_nq+0x354>)
    19c4:	480f      	ldr	r0, [pc, #60]	; (1a04 <am_hal_iom_spi_write_nq+0x33c>)
    19c6:	9301      	str	r3, [sp, #4]
    19c8:	f240 71d6 	movw	r1, #2006	; 0x7d6
    19cc:	f7ff fb9e 	bl	110c <am_hal_debug_error>
    19d0:	9b01      	ldr	r3, [sp, #4]
    19d2:	e703      	b.n	17dc <am_hal_iom_spi_write_nq+0x114>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    19d4:	4a0c      	ldr	r2, [pc, #48]	; (1a08 <am_hal_iom_spi_write_nq+0x340>)
    19d6:	480b      	ldr	r0, [pc, #44]	; (1a04 <am_hal_iom_spi_write_nq+0x33c>)
    19d8:	f240 2123 	movw	r1, #547	; 0x223
    19dc:	f7ff fb96 	bl	110c <am_hal_debug_error>
    19e0:	e689      	b.n	16f6 <am_hal_iom_spi_write_nq+0x2e>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    19e2:	4a0e      	ldr	r2, [pc, #56]	; (1a1c <am_hal_iom_spi_write_nq+0x354>)
    19e4:	4807      	ldr	r0, [pc, #28]	; (1a04 <am_hal_iom_spi_write_nq+0x33c>)
    19e6:	f240 71d6 	movw	r1, #2006	; 0x7d6
    19ea:	f7ff fb8f 	bl	110c <am_hal_debug_error>
    19ee:	e797      	b.n	1920 <am_hal_iom_spi_write_nq+0x258>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    19f0:	462b      	mov	r3, r5
    19f2:	e69d      	b.n	1730 <am_hal_iom_spi_write_nq+0x68>
    19f4:	f029 0503 	bic.w	r5, r9, #3
    19f8:	ebab 0b05 	sub.w	fp, fp, r5
    19fc:	46a9      	mov	r9, r5
    19fe:	e6e0      	b.n	17c2 <am_hal_iom_spi_write_nq+0xfa>
    1a00:	00002ce0 	.word	0x00002ce0
    1a04:	00002ba4 	.word	0x00002ba4
    1a08:	00002b80 	.word	0x00002b80
    1a0c:	1000084c 	.word	0x1000084c
    1a10:	00002c08 	.word	0x00002c08
    1a14:	00002c94 	.word	0x00002c94
    1a18:	1000085c 	.word	0x1000085c
    1a1c:	00002cac 	.word	0x00002cac

00001a20 <am_hal_iom_spi_write>:
{
    1a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    1a24:	2801      	cmp	r0, #1
{
    1a26:	b08a      	sub	sp, #40	; 0x28
    1a28:	4604      	mov	r4, r0
    1a2a:	460f      	mov	r7, r1
    1a2c:	4690      	mov	r8, r2
    1a2e:	461e      	mov	r6, r3
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    1a30:	d905      	bls.n	1a3e <am_hal_iom_spi_write+0x1e>
    1a32:	4a32      	ldr	r2, [pc, #200]	; (1afc <am_hal_iom_spi_write+0xdc>)
    1a34:	4832      	ldr	r0, [pc, #200]	; (1b00 <am_hal_iom_spi_write+0xe0>)
    1a36:	f240 118f 	movw	r1, #399	; 0x18f
    1a3a:	f7ff fb67 	bl	110c <am_hal_debug_error>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1a3e:	b18e      	cbz	r6, 1a64 <am_hal_iom_spi_write+0x44>
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
    1a40:	0065      	lsls	r5, r4, #1
    1a42:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 1b14 <am_hal_iom_spi_write+0xf4>
    1a46:	192a      	adds	r2, r5, r4
    1a48:	eb09 00c2 	add.w	r0, r9, r2, lsl #3
    1a4c:	6943      	ldr	r3, [r0, #20]
    1a4e:	2b00      	cmp	r3, #0
    1a50:	d032      	beq.n	1ab8 <am_hal_iom_spi_write+0x98>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    1a52:	2c01      	cmp	r4, #1
    1a54:	d90d      	bls.n	1a72 <am_hal_iom_spi_write+0x52>
        am_hal_iom_queue_flush(ui32Module);
    1a56:	4e2b      	ldr	r6, [pc, #172]	; (1b04 <am_hal_iom_spi_write+0xe4>)
    1a58:	4620      	mov	r0, r4
    1a5a:	6834      	ldr	r4, [r6, #0]
    1a5c:	47a0      	blx	r4
}
    1a5e:	b00a      	add	sp, #40	; 0x28
    1a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1a64:	4a28      	ldr	r2, [pc, #160]	; (1b08 <am_hal_iom_spi_write+0xe8>)
    1a66:	4826      	ldr	r0, [pc, #152]	; (1b00 <am_hal_iom_spi_write+0xe0>)
    1a68:	f240 1191 	movw	r1, #401	; 0x191
    1a6c:	f7ff fb4e 	bl	110c <am_hal_debug_error>
    1a70:	e7e6      	b.n	1a40 <am_hal_iom_spi_write+0x20>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1a72:	b356      	cbz	r6, 1aca <am_hal_iom_spi_write+0xaa>
    ui32Critical = am_hal_interrupt_master_disable();
    1a74:	f7ff fc40 	bl	12f8 <am_hal_interrupt_master_disable>
    if ( (g_bIomBusy[ui32Module] == false) &&
    1a78:	4a24      	ldr	r2, [pc, #144]	; (1b0c <am_hal_iom_spi_write+0xec>)
    ui32Critical = am_hal_interrupt_master_disable();
    1a7a:	4682      	mov	sl, r0
    if ( (g_bIomBusy[ui32Module] == false) &&
    1a7c:	5d10      	ldrb	r0, [r2, r4]
    1a7e:	b928      	cbnz	r0, 1a8c <am_hal_iom_spi_write+0x6c>
        am_hal_queue_empty(&g_psIOMQueue[ui32Module]) )
    1a80:	192b      	adds	r3, r5, r4
    1a82:	eb09 0cc3 	add.w	ip, r9, r3, lsl #3
    if ( (g_bIomBusy[ui32Module] == false) &&
    1a86:	f8dc 1008 	ldr.w	r1, [ip, #8]
    1a8a:	b361      	cbz	r1, 1ae6 <am_hal_iom_spi_write+0xc6>
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    1a8c:	4425      	add	r5, r4
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_WRITE;
    1a8e:	2300      	movs	r3, #0
        sIOMTransaction.ui32ChipSelect = ui32ChipSelect;
    1a90:	9705      	str	r7, [sp, #20]
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    1a92:	eb09 00c5 	add.w	r0, r9, r5, lsl #3
        sIOMTransaction.ui32Options = ui32Options;
    1a96:	9f12      	ldr	r7, [sp, #72]	; 0x48
        sIOMTransaction.ui32Module = ui32Module;
    1a98:	9404      	str	r4, [sp, #16]
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    1a9a:	2201      	movs	r2, #1
    1a9c:	a903      	add	r1, sp, #12
        sIOMTransaction.pui32Data = pui32Data;
    1a9e:	f8cd 8018 	str.w	r8, [sp, #24]
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
    1aa2:	9607      	str	r6, [sp, #28]
        sIOMTransaction.ui32Options = ui32Options;
    1aa4:	9708      	str	r7, [sp, #32]
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_WRITE;
    1aa6:	9303      	str	r3, [sp, #12]
        sIOMTransaction.pfnCallback = pfnCallback;
    1aa8:	9309      	str	r3, [sp, #36]	; 0x24
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    1aaa:	f000 fde7 	bl	267c <am_hal_queue_item_add>
    1aae:	b198      	cbz	r0, 1ad8 <am_hal_iom_spi_write+0xb8>
    am_hal_interrupt_master_set(ui32Critical);
    1ab0:	4650      	mov	r0, sl
    1ab2:	f7ff fc25 	bl	1300 <am_hal_interrupt_master_set>
    1ab6:	e7ce      	b.n	1a56 <am_hal_iom_spi_write+0x36>
        am_hal_iom_spi_write_nq(ui32Module, ui32ChipSelect, pui32Data,
    1ab8:	9912      	ldr	r1, [sp, #72]	; 0x48
    1aba:	9100      	str	r1, [sp, #0]
    1abc:	4633      	mov	r3, r6
    1abe:	4642      	mov	r2, r8
    1ac0:	4639      	mov	r1, r7
    1ac2:	4620      	mov	r0, r4
    1ac4:	f7ff fe00 	bl	16c8 <am_hal_iom_spi_write_nq>
    1ac8:	e7c9      	b.n	1a5e <am_hal_iom_spi_write+0x3e>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1aca:	4a0f      	ldr	r2, [pc, #60]	; (1b08 <am_hal_iom_spi_write+0xe8>)
    1acc:	480c      	ldr	r0, [pc, #48]	; (1b00 <am_hal_iom_spi_write+0xe0>)
    1ace:	f640 218c 	movw	r1, #2700	; 0xa8c
    1ad2:	f7ff fb1b 	bl	110c <am_hal_debug_error>
    1ad6:	e7cd      	b.n	1a74 <am_hal_iom_spi_write+0x54>
            am_hal_debug_assert_msg(0,
    1ad8:	4a0d      	ldr	r2, [pc, #52]	; (1b10 <am_hal_iom_spi_write+0xf0>)
    1ada:	4809      	ldr	r0, [pc, #36]	; (1b00 <am_hal_iom_spi_write+0xe0>)
    1adc:	f640 21bd 	movw	r1, #2749	; 0xabd
    1ae0:	f7ff fb14 	bl	110c <am_hal_debug_error>
    1ae4:	e7e4      	b.n	1ab0 <am_hal_iom_spi_write+0x90>
    1ae6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1ae8:	9101      	str	r1, [sp, #4]
    1aea:	9200      	str	r2, [sp, #0]
    1aec:	4633      	mov	r3, r6
    1aee:	4642      	mov	r2, r8
    1af0:	4639      	mov	r1, r7
    1af2:	4620      	mov	r0, r4
    1af4:	f7ff fc2a 	bl	134c <am_hal_iom_spi_write_nb.part.6>
    1af8:	e7da      	b.n	1ab0 <am_hal_iom_spi_write+0x90>
    1afa:	bf00      	nop
    1afc:	00002ce0 	.word	0x00002ce0
    1b00:	00002ba4 	.word	0x00002ba4
    1b04:	10000848 	.word	0x10000848
    1b08:	00002b80 	.word	0x00002b80
    1b0c:	1000085c 	.word	0x1000085c
    1b10:	00002c20 	.word	0x00002c20
    1b14:	10000a94 	.word	0x10000a94

00001b18 <am_hal_iom_spi_read_nq>:
{
    1b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b1c:	b085      	sub	sp, #20
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    1b1e:	2801      	cmp	r0, #1
{
    1b20:	4607      	mov	r7, r0
    1b22:	4688      	mov	r8, r1
    1b24:	4692      	mov	sl, r2
    1b26:	461d      	mov	r5, r3
    1b28:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    1b2a:	f240 81a2 	bls.w	1e72 <am_hal_iom_spi_read_nq+0x35a>
    1b2e:	4ab2      	ldr	r2, [pc, #712]	; (1df8 <am_hal_iom_spi_read_nq+0x2e0>)
    1b30:	48b2      	ldr	r0, [pc, #712]	; (1dfc <am_hal_iom_spi_read_nq+0x2e4>)
    1b32:	f240 21ae 	movw	r1, #686	; 0x2ae
    1b36:	f7ff fae9 	bl	110c <am_hal_debug_error>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1b3a:	2d00      	cmp	r5, #0
    1b3c:	f000 8168 	beq.w	1e10 <am_hal_iom_spi_read_nq+0x2f8>
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    1b40:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    1b44:	f080 8133 	bcs.w	1dae <am_hal_iom_spi_read_nq+0x296>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    1b48:	2f01      	cmp	r7, #1
    1b4a:	f240 8139 	bls.w	1dc0 <am_hal_iom_spi_read_nq+0x2a8>
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    1b4e:	f507 24a0 	add.w	r4, r7, #327680	; 0x50000
    1b52:	3404      	adds	r4, #4
    1b54:	0324      	lsls	r4, r4, #12
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    1b56:	2000      	movs	r0, #0
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    1b58:	f8d4 b200 	ldr.w	fp, [r4, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    1b5c:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1b60:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    1b64:	f504 7200 	add.w	r2, r4, #512	; 0x200
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1b68:	f041 0301 	orr.w	r3, r1, #1
    1b6c:	f504 7002 	add.w	r0, r4, #520	; 0x208
    1b70:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    1b74:	9202      	str	r2, [sp, #8]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1b76:	9001      	str	r0, [sp, #4]
    ui32Command |= ui32Options & 0x5C00FF00;
    1b78:	f026 4923 	bic.w	r9, r6, #2734686208	; 0xa3000000
    1b7c:	f009 2cff 	and.w	ip, r9, #4278255360	; 0xff00ff00
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    1b80:	ea4f 4308 	mov.w	r3, r8, lsl #16
    ui32Command |= ui32Options & 0x5C00FF00;
    1b84:	f04c 4100 	orr.w	r1, ip, #2147483648	; 0x80000000
    ui32Command |= (ui32NumBytes & 0xFF);
    1b88:	b2ee      	uxtb	r6, r5
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    1b8a:	f403 22e0 	and.w	r2, r3, #458752	; 0x70000
    ui32Command |= ui32Options & 0x5C00FF00;
    1b8e:	430e      	orrs	r6, r1
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    1b90:	03e8      	lsls	r0, r5, #15
    ui32Command |= ui32Options & 0x5C00FF00;
    1b92:	ea46 0102 	orr.w	r1, r6, r2
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    1b96:	f000 63f0 	and.w	r3, r0, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
    1b9a:	430b      	orrs	r3, r1
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    1b9c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    1ba0:	f504 7801 	add.w	r8, r4, #516	; 0x204
    1ba4:	2600      	movs	r6, #0
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    1ba6:	2f01      	cmp	r7, #1
    1ba8:	d927      	bls.n	1bfa <am_hal_iom_spi_read_nq+0xe2>
        if ( ui32BytesInFifo >= ui32NumBytes )
    1baa:	b9f5      	cbnz	r5, 1bea <am_hal_iom_spi_read_nq+0xd2>
        if ( bCmdCmp == true )
    1bac:	b90e      	cbnz	r6, 1bb2 <am_hal_iom_spi_read_nq+0x9a>
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    1bae:	f8d8 3000 	ldr.w	r3, [r8]
    ui32Status = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    1bb2:	4c93      	ldr	r4, [pc, #588]	; (1e00 <am_hal_iom_spi_read_nq+0x2e8>)
    1bb4:	2301      	movs	r3, #1
    1bb6:	461a      	mov	r2, r3
    1bb8:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
    1bbc:	4641      	mov	r1, r8
    1bbe:	f7ff faab 	bl	1118 <am_hal_flash_delay_status_change>
    AM_REGn(IOMSTR, ui32Module, INTCLR) = (ui32IntConfig | AM_REG_IOMSTR_INTSTAT_CMDCMP_M);
    1bc2:	9a01      	ldr	r2, [sp, #4]
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    1bc4:	9d02      	ldr	r5, [sp, #8]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = (ui32IntConfig | AM_REG_IOMSTR_INTSTAT_CMDCMP_M);
    1bc6:	f04b 0301 	orr.w	r3, fp, #1
    am_hal_debug_assert_msg(ui32Status == 1, "IOM CMDCMP was not seen");
    1bca:	2801      	cmp	r0, #1
    AM_REGn(IOMSTR, ui32Module, INTCLR) = (ui32IntConfig | AM_REG_IOMSTR_INTSTAT_CMDCMP_M);
    1bcc:	6013      	str	r3, [r2, #0]
    ui32Status = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    1bce:	4607      	mov	r7, r0
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    1bd0:	f8c5 b000 	str.w	fp, [r5]
    am_hal_debug_assert_msg(ui32Status == 1, "IOM CMDCMP was not seen");
    1bd4:	d005      	beq.n	1be2 <am_hal_iom_spi_read_nq+0xca>
    1bd6:	4a8b      	ldr	r2, [pc, #556]	; (1e04 <am_hal_iom_spi_read_nq+0x2ec>)
    1bd8:	4888      	ldr	r0, [pc, #544]	; (1dfc <am_hal_iom_spi_read_nq+0x2e4>)
    1bda:	f240 3101 	movw	r1, #769	; 0x301
    1bde:	f7ff fa95 	bl	110c <am_hal_debug_error>
}
    1be2:	4638      	mov	r0, r7
    1be4:	b005      	add	sp, #20
    1be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( bCmdCmp == true )
    1bea:	2e00      	cmp	r6, #0
    1bec:	d1e1      	bne.n	1bb2 <am_hal_iom_spi_read_nq+0x9a>
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    1bee:	f8d8 6000 	ldr.w	r6, [r8]
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    1bf2:	2f01      	cmp	r7, #1
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    1bf4:	f006 0601 	and.w	r6, r6, #1
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    1bf8:	d8d7      	bhi.n	1baa <am_hal_iom_spi_read_nq+0x92>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    1bfa:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
        ui32BytesInFifo =  am_hal_iom_fifo_full_slots(ui32Module);
    1bfe:	f002 097f 	and.w	r9, r2, #127	; 0x7f
        if ( ui32BytesInFifo >= ui32NumBytes )
    1c02:	45a9      	cmp	r9, r5
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    1c04:	f504 7e80 	add.w	lr, r4, #256	; 0x100
        if ( ui32BytesInFifo >= ui32NumBytes )
    1c08:	d262      	bcs.n	1cd0 <am_hal_iom_spi_read_nq+0x1b8>
        else if ( ui32BytesInFifo >= 4 )
    1c0a:	f1b9 0f03 	cmp.w	r9, #3
    1c0e:	d954      	bls.n	1cba <am_hal_iom_spi_read_nq+0x1a2>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    1c10:	f8de 0000 	ldr.w	r0, [lr]
            am_hal_iom_fifo_read(ui32Module, pui32Data, ui32BytesInFifo & ~0x3);
    1c14:	f029 0303 	bic.w	r3, r9, #3
    am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    1c18:	f000 017f 	and.w	r1, r0, #127	; 0x7f
    1c1c:	428b      	cmp	r3, r1
    1c1e:	f200 8139 	bhi.w	1e94 <am_hal_iom_spi_read_nq+0x37c>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1c22:	4652      	mov	r2, sl
    1c24:	6820      	ldr	r0, [r4, #0]
    1c26:	f842 0b04 	str.w	r0, [r2], #4
    1c2a:	f009 097c 	and.w	r9, r9, #124	; 0x7c
    1c2e:	46d4      	mov	ip, sl
    1c30:	44ca      	add	sl, r9
    1c32:	ebaa 0e0c 	sub.w	lr, sl, ip
    1c36:	f1ae 0104 	sub.w	r1, lr, #4
    for ( i = 0; i < ui32NumWords; i++ )
    1c3a:	4552      	cmp	r2, sl
    1c3c:	f3c1 0082 	ubfx	r0, r1, #2, #3
    1c40:	d03a      	beq.n	1cb8 <am_hal_iom_spi_read_nq+0x1a0>
    1c42:	b318      	cbz	r0, 1c8c <am_hal_iom_spi_read_nq+0x174>
    1c44:	2801      	cmp	r0, #1
    1c46:	d01c      	beq.n	1c82 <am_hal_iom_spi_read_nq+0x16a>
    1c48:	2802      	cmp	r0, #2
    1c4a:	d017      	beq.n	1c7c <am_hal_iom_spi_read_nq+0x164>
    1c4c:	2803      	cmp	r0, #3
    1c4e:	d012      	beq.n	1c76 <am_hal_iom_spi_read_nq+0x15e>
    1c50:	2804      	cmp	r0, #4
    1c52:	d00d      	beq.n	1c70 <am_hal_iom_spi_read_nq+0x158>
    1c54:	2805      	cmp	r0, #5
    1c56:	d008      	beq.n	1c6a <am_hal_iom_spi_read_nq+0x152>
    1c58:	2806      	cmp	r0, #6
    1c5a:	d003      	beq.n	1c64 <am_hal_iom_spi_read_nq+0x14c>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1c5c:	6821      	ldr	r1, [r4, #0]
    1c5e:	f8cc 1004 	str.w	r1, [ip, #4]
    1c62:	3204      	adds	r2, #4
    1c64:	6820      	ldr	r0, [r4, #0]
    1c66:	f842 0b04 	str.w	r0, [r2], #4
    1c6a:	6821      	ldr	r1, [r4, #0]
    1c6c:	f842 1b04 	str.w	r1, [r2], #4
    1c70:	6820      	ldr	r0, [r4, #0]
    1c72:	f842 0b04 	str.w	r0, [r2], #4
    1c76:	6821      	ldr	r1, [r4, #0]
    1c78:	f842 1b04 	str.w	r1, [r2], #4
    1c7c:	6820      	ldr	r0, [r4, #0]
    1c7e:	f842 0b04 	str.w	r0, [r2], #4
    1c82:	6821      	ldr	r1, [r4, #0]
    1c84:	f842 1b04 	str.w	r1, [r2], #4
    for ( i = 0; i < ui32NumWords; i++ )
    1c88:	4552      	cmp	r2, sl
    1c8a:	d015      	beq.n	1cb8 <am_hal_iom_spi_read_nq+0x1a0>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1c8c:	4694      	mov	ip, r2
    1c8e:	6820      	ldr	r0, [r4, #0]
    1c90:	f84c 0b04 	str.w	r0, [ip], #4
    1c94:	6821      	ldr	r1, [r4, #0]
    1c96:	6051      	str	r1, [r2, #4]
    1c98:	6820      	ldr	r0, [r4, #0]
    1c9a:	f8cc 0004 	str.w	r0, [ip, #4]
    1c9e:	6821      	ldr	r1, [r4, #0]
    1ca0:	60d1      	str	r1, [r2, #12]
    1ca2:	6820      	ldr	r0, [r4, #0]
    1ca4:	6110      	str	r0, [r2, #16]
    1ca6:	6821      	ldr	r1, [r4, #0]
    1ca8:	6151      	str	r1, [r2, #20]
    1caa:	6820      	ldr	r0, [r4, #0]
    1cac:	6190      	str	r0, [r2, #24]
    1cae:	6821      	ldr	r1, [r4, #0]
    1cb0:	61d1      	str	r1, [r2, #28]
    1cb2:	3220      	adds	r2, #32
    for ( i = 0; i < ui32NumWords; i++ )
    1cb4:	4552      	cmp	r2, sl
    1cb6:	d1e9      	bne.n	1c8c <am_hal_iom_spi_read_nq+0x174>
            ui32NumBytes -= ui32BytesInFifo & ~0x3;
    1cb8:	1aed      	subs	r5, r5, r3
        if ( bCmdCmp == true )
    1cba:	2e00      	cmp	r6, #0
    1cbc:	f47f af79 	bne.w	1bb2 <am_hal_iom_spi_read_nq+0x9a>
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    1cc0:	f8d8 6000 	ldr.w	r6, [r8]
    1cc4:	f006 0601 	and.w	r6, r6, #1
    while ( ui32NumBytes )
    1cc8:	2d00      	cmp	r5, #0
    1cca:	f47f af6c 	bne.w	1ba6 <am_hal_iom_spi_read_nq+0x8e>
    1cce:	e770      	b.n	1bb2 <am_hal_iom_spi_read_nq+0x9a>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    1cd0:	f8de 2000 	ldr.w	r2, [lr]
    am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    1cd4:	f002 097f 	and.w	r9, r2, #127	; 0x7f
    1cd8:	45a9      	cmp	r9, r5
    1cda:	f0c0 80d4 	bcc.w	1e86 <am_hal_iom_spi_read_nq+0x36e>
    1cde:	f005 0103 	and.w	r1, r5, #3
    for ( i = 0; i < ui32NumWords; i++ )
    1ce2:	08ad      	lsrs	r5, r5, #2
    1ce4:	d04b      	beq.n	1d7e <am_hal_iom_spi_read_nq+0x266>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1ce6:	4653      	mov	r3, sl
    1ce8:	6820      	ldr	r0, [r4, #0]
    1cea:	f843 0b04 	str.w	r0, [r3], #4
    1cee:	eb0a 0c85 	add.w	ip, sl, r5, lsl #2
    1cf2:	ebac 0e0a 	sub.w	lr, ip, sl
    1cf6:	f1ae 0204 	sub.w	r2, lr, #4
    for ( i = 0; i < ui32NumWords; i++ )
    1cfa:	4563      	cmp	r3, ip
    1cfc:	f3c2 0082 	ubfx	r0, r2, #2, #3
    1d00:	d03d      	beq.n	1d7e <am_hal_iom_spi_read_nq+0x266>
    1d02:	b310      	cbz	r0, 1d4a <am_hal_iom_spi_read_nq+0x232>
    1d04:	2801      	cmp	r0, #1
    1d06:	d01b      	beq.n	1d40 <am_hal_iom_spi_read_nq+0x228>
    1d08:	2802      	cmp	r0, #2
    1d0a:	d016      	beq.n	1d3a <am_hal_iom_spi_read_nq+0x222>
    1d0c:	2803      	cmp	r0, #3
    1d0e:	d011      	beq.n	1d34 <am_hal_iom_spi_read_nq+0x21c>
    1d10:	2804      	cmp	r0, #4
    1d12:	d00c      	beq.n	1d2e <am_hal_iom_spi_read_nq+0x216>
    1d14:	2805      	cmp	r0, #5
    1d16:	d007      	beq.n	1d28 <am_hal_iom_spi_read_nq+0x210>
    1d18:	2806      	cmp	r0, #6
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1d1a:	bf1c      	itt	ne
    1d1c:	6820      	ldrne	r0, [r4, #0]
    1d1e:	f843 0b04 	strne.w	r0, [r3], #4
    1d22:	6822      	ldr	r2, [r4, #0]
    1d24:	f843 2b04 	str.w	r2, [r3], #4
    1d28:	6820      	ldr	r0, [r4, #0]
    1d2a:	f843 0b04 	str.w	r0, [r3], #4
    1d2e:	6822      	ldr	r2, [r4, #0]
    1d30:	f843 2b04 	str.w	r2, [r3], #4
    1d34:	6820      	ldr	r0, [r4, #0]
    1d36:	f843 0b04 	str.w	r0, [r3], #4
    1d3a:	6822      	ldr	r2, [r4, #0]
    1d3c:	f843 2b04 	str.w	r2, [r3], #4
    1d40:	6820      	ldr	r0, [r4, #0]
    1d42:	f843 0b04 	str.w	r0, [r3], #4
    for ( i = 0; i < ui32NumWords; i++ )
    1d46:	4563      	cmp	r3, ip
    1d48:	d019      	beq.n	1d7e <am_hal_iom_spi_read_nq+0x266>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1d4a:	4699      	mov	r9, r3
    1d4c:	f8d4 e000 	ldr.w	lr, [r4]
    1d50:	f849 eb04 	str.w	lr, [r9], #4
    1d54:	f8d4 e000 	ldr.w	lr, [r4]
    1d58:	f8c3 e004 	str.w	lr, [r3, #4]
    1d5c:	f8d4 e000 	ldr.w	lr, [r4]
    1d60:	f8c9 e004 	str.w	lr, [r9, #4]
    1d64:	6822      	ldr	r2, [r4, #0]
    1d66:	60da      	str	r2, [r3, #12]
    1d68:	6820      	ldr	r0, [r4, #0]
    1d6a:	6118      	str	r0, [r3, #16]
    1d6c:	6822      	ldr	r2, [r4, #0]
    1d6e:	615a      	str	r2, [r3, #20]
    1d70:	6820      	ldr	r0, [r4, #0]
    1d72:	6198      	str	r0, [r3, #24]
    1d74:	6822      	ldr	r2, [r4, #0]
    1d76:	61da      	str	r2, [r3, #28]
    1d78:	3320      	adds	r3, #32
    for ( i = 0; i < ui32NumWords; i++ )
    1d7a:	4563      	cmp	r3, ip
    1d7c:	d1e5      	bne.n	1d4a <am_hal_iom_spi_read_nq+0x232>
    if ( ui32Leftovers )
    1d7e:	2900      	cmp	r1, #0
    1d80:	f43f af14 	beq.w	1bac <am_hal_iom_spi_read_nq+0x94>
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1d84:	6824      	ldr	r4, [r4, #0]
            pui8Data[j] = sTempBuffer.bytes[j];
    1d86:	f80a 4025 	strb.w	r4, [sl, r5, lsl #2]
        for ( j = 0; j < ui32Leftovers; j++ )
    1d8a:	2901      	cmp	r1, #1
        pui8Data = (uint8_t *) (&pui32Data[i]);
    1d8c:	ea4f 0385 	mov.w	r3, r5, lsl #2
        for ( j = 0; j < ui32Leftovers; j++ )
    1d90:	f43f af0c 	beq.w	1bac <am_hal_iom_spi_read_nq+0x94>
            pui8Data[j] = sTempBuffer.bytes[j];
    1d94:	449a      	add	sl, r3
        for ( j = 0; j < ui32Leftovers; j++ )
    1d96:	2903      	cmp	r1, #3
            pui8Data[j] = sTempBuffer.bytes[j];
    1d98:	f3c4 2507 	ubfx	r5, r4, #8, #8
    1d9c:	bf08      	it	eq
    1d9e:	f3c4 4407 	ubfxeq	r4, r4, #16, #8
    1da2:	f88a 5001 	strb.w	r5, [sl, #1]
    1da6:	bf08      	it	eq
    1da8:	f88a 4002 	strbeq.w	r4, [sl, #2]
    1dac:	e6fe      	b.n	1bac <am_hal_iom_spi_read_nq+0x94>
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    1dae:	4a16      	ldr	r2, [pc, #88]	; (1e08 <am_hal_iom_spi_read_nq+0x2f0>)
    1db0:	4812      	ldr	r0, [pc, #72]	; (1dfc <am_hal_iom_spi_read_nq+0x2e4>)
    1db2:	f240 21b5 	movw	r1, #693	; 0x2b5
    1db6:	f7ff f9a9 	bl	110c <am_hal_debug_error>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    1dba:	2f01      	cmp	r7, #1
    1dbc:	f63f aec7 	bhi.w	1b4e <am_hal_iom_spi_read_nq+0x36>
    1dc0:	4912      	ldr	r1, [pc, #72]	; (1e0c <am_hal_iom_spi_read_nq+0x2f4>)
    while ( g_bIomBusy[ui32Module] );
    1dc2:	5dcb      	ldrb	r3, [r1, r7]
    1dc4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    1dc8:	2b00      	cmp	r3, #0
    1dca:	d1fa      	bne.n	1dc2 <am_hal_iom_spi_read_nq+0x2aa>
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    1dcc:	f507 24a0 	add.w	r4, r7, #327680	; 0x50000
    1dd0:	3404      	adds	r4, #4
    1dd2:	0324      	lsls	r4, r4, #12
    1dd4:	f504 7000 	add.w	r0, r4, #512	; 0x200
    1dd8:	f8d4 b200 	ldr.w	fp, [r4, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    1ddc:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1de0:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    1de4:	9002      	str	r0, [sp, #8]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1de6:	f041 0301 	orr.w	r3, r1, #1
    1dea:	f504 7202 	add.w	r2, r4, #520	; 0x208
    1dee:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    1df2:	9201      	str	r2, [sp, #4]
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1df4:	b335      	cbz	r5, 1e44 <am_hal_iom_spi_read_nq+0x32c>
    1df6:	e6bf      	b.n	1b78 <am_hal_iom_spi_read_nq+0x60>
    1df8:	00002ce0 	.word	0x00002ce0
    1dfc:	00002ba4 	.word	0x00002ba4
    1e00:	1000084c 	.word	0x1000084c
    1e04:	00002c08 	.word	0x00002c08
    1e08:	00002c94 	.word	0x00002c94
    1e0c:	1000085c 	.word	0x1000085c
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1e10:	4a25      	ldr	r2, [pc, #148]	; (1ea8 <am_hal_iom_spi_read_nq+0x390>)
    1e12:	4826      	ldr	r0, [pc, #152]	; (1eac <am_hal_iom_spi_read_nq+0x394>)
    1e14:	f44f 712c 	mov.w	r1, #688	; 0x2b0
    1e18:	f7ff f978 	bl	110c <am_hal_debug_error>
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    1e1c:	f507 21a0 	add.w	r1, r7, #327680	; 0x50000
    1e20:	3104      	adds	r1, #4
    1e22:	030c      	lsls	r4, r1, #12
    1e24:	f504 7000 	add.w	r0, r4, #512	; 0x200
    1e28:	f8d4 b200 	ldr.w	fp, [r4, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    1e2c:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1e30:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    1e34:	9002      	str	r0, [sp, #8]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1e36:	f042 0301 	orr.w	r3, r2, #1
    1e3a:	f504 7502 	add.w	r5, r4, #520	; 0x208
    1e3e:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    1e42:	9501      	str	r5, [sp, #4]
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1e44:	4819      	ldr	r0, [pc, #100]	; (1eac <am_hal_iom_spi_read_nq+0x394>)
    1e46:	4a18      	ldr	r2, [pc, #96]	; (1ea8 <am_hal_iom_spi_read_nq+0x390>)
    1e48:	f240 4104 	movw	r1, #1028	; 0x404
    ui32Command |= ui32Options & 0x5C00FF00;
    1e4c:	f026 4a23 	bic.w	sl, r6, #2734686208	; 0xa3000000
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1e50:	f7ff f95c 	bl	110c <am_hal_debug_error>
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    1e54:	ea4f 4108 	mov.w	r1, r8, lsl #16
    ui32Command |= ui32Options & 0x5C00FF00;
    1e58:	f00a 2cff 	and.w	ip, sl, #4278255360	; 0xff00ff00
    1e5c:	f04c 4900 	orr.w	r9, ip, #2147483648	; 0x80000000
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    1e60:	f401 26e0 	and.w	r6, r1, #458752	; 0x70000
    ui32Command |= ui32Options & 0x5C00FF00;
    1e64:	ea49 0006 	orr.w	r0, r9, r6
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    1e68:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    1e6c:	f504 7801 	add.w	r8, r4, #516	; 0x204
    1e70:	e69f      	b.n	1bb2 <am_hal_iom_spi_read_nq+0x9a>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1e72:	2b00      	cmp	r3, #0
    1e74:	f47f ae64 	bne.w	1b40 <am_hal_iom_spi_read_nq+0x28>
    1e78:	4a0b      	ldr	r2, [pc, #44]	; (1ea8 <am_hal_iom_spi_read_nq+0x390>)
    1e7a:	480c      	ldr	r0, [pc, #48]	; (1eac <am_hal_iom_spi_read_nq+0x394>)
    1e7c:	f44f 712c 	mov.w	r1, #688	; 0x2b0
    1e80:	f7ff f944 	bl	110c <am_hal_debug_error>
    1e84:	e79c      	b.n	1dc0 <am_hal_iom_spi_read_nq+0x2a8>
    am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    1e86:	4a0a      	ldr	r2, [pc, #40]	; (1eb0 <am_hal_iom_spi_read_nq+0x398>)
    1e88:	4808      	ldr	r0, [pc, #32]	; (1eac <am_hal_iom_spi_read_nq+0x394>)
    1e8a:	f640 010e 	movw	r1, #2062	; 0x80e
    1e8e:	f7ff f93d 	bl	110c <am_hal_debug_error>
    1e92:	e724      	b.n	1cde <am_hal_iom_spi_read_nq+0x1c6>
    1e94:	4a06      	ldr	r2, [pc, #24]	; (1eb0 <am_hal_iom_spi_read_nq+0x398>)
    1e96:	4805      	ldr	r0, [pc, #20]	; (1eac <am_hal_iom_spi_read_nq+0x394>)
    1e98:	9303      	str	r3, [sp, #12]
    1e9a:	f640 010e 	movw	r1, #2062	; 0x80e
    1e9e:	f7ff f935 	bl	110c <am_hal_debug_error>
    1ea2:	9b03      	ldr	r3, [sp, #12]
    1ea4:	e6bd      	b.n	1c22 <am_hal_iom_spi_read_nq+0x10a>
    1ea6:	bf00      	nop
    1ea8:	00002b80 	.word	0x00002b80
    1eac:	00002ba4 	.word	0x00002ba4
    1eb0:	00002bd0 	.word	0x00002bd0

00001eb4 <am_hal_iom_spi_write_nb>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    1eb4:	2801      	cmp	r0, #1
{
    1eb6:	b430      	push	{r4, r5}
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    1eb8:	d901      	bls.n	1ebe <am_hal_iom_spi_write_nb+0xa>
}
    1eba:	bc30      	pop	{r4, r5}
    1ebc:	4770      	bx	lr
    1ebe:	bc30      	pop	{r4, r5}
    1ec0:	f7ff ba44 	b.w	134c <am_hal_iom_spi_write_nb.part.6>

00001ec4 <am_hal_iom_spi_read_nb>:
{
    1ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    1ec8:	2801      	cmp	r0, #1
{
    1eca:	4604      	mov	r4, r0
    1ecc:	460f      	mov	r7, r1
    1ece:	4691      	mov	r9, r2
    1ed0:	461e      	mov	r6, r3
    1ed2:	f8dd 8020 	ldr.w	r8, [sp, #32]
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    1ed6:	d944      	bls.n	1f62 <am_hal_iom_spi_read_nb+0x9e>
    1ed8:	4a4a      	ldr	r2, [pc, #296]	; (2004 <am_hal_iom_spi_read_nb+0x140>)
    1eda:	484b      	ldr	r0, [pc, #300]	; (2008 <am_hal_iom_spi_read_nb+0x144>)
    1edc:	f240 319d 	movw	r1, #925	; 0x39d
    1ee0:	f7ff f914 	bl	110c <am_hal_debug_error>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1ee4:	2e00      	cmp	r6, #0
    1ee6:	d06b      	beq.n	1fc0 <am_hal_iom_spi_read_nb+0xfc>
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    1ee8:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
    1eec:	d232      	bcs.n	1f54 <am_hal_iom_spi_read_nb+0x90>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    1eee:	2c01      	cmp	r4, #1
    1ef0:	d93f      	bls.n	1f72 <am_hal_iom_spi_read_nb+0xae>
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1ef2:	f504 25a0 	add.w	r5, r4, #327680	; 0x50000
    g_bIomBusy[ui32Module] = true;
    1ef6:	4845      	ldr	r0, [pc, #276]	; (200c <am_hal_iom_spi_read_nb+0x148>)
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    1ef8:	4945      	ldr	r1, [pc, #276]	; (2010 <am_hal_iom_spi_read_nb+0x14c>)
    g_bIomBusy[ui32Module] = true;
    1efa:	2301      	movs	r3, #1
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1efc:	3504      	adds	r5, #4
    g_bIomBusy[ui32Module] = true;
    1efe:	5503      	strb	r3, [r0, r4]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1f00:	032d      	lsls	r5, r5, #12
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    1f02:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1f06:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    1f0a:	00a0      	lsls	r0, r4, #2
    1f0c:	180b      	adds	r3, r1, r0
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1f0e:	f042 0401 	orr.w	r4, r2, #1
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    1f12:	2202      	movs	r2, #2
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1f14:	f8c5 4208 	str.w	r4, [r5, #520]	; 0x208
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    1f18:	500a      	str	r2, [r1, r0]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    1f1a:	9909      	ldr	r1, [sp, #36]	; 0x24
    g_psIOMBuffers[ui32Module].pui32Data = pui32Data;
    1f1c:	f8c3 9004 	str.w	r9, [r3, #4]
    g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes;
    1f20:	609e      	str	r6, [r3, #8]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    1f22:	6119      	str	r1, [r3, #16]
    g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    1f24:	f8c3 800c 	str.w	r8, [r3, #12]
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    1f28:	043f      	lsls	r7, r7, #16
    ui32Command |= ui32Options & 0x5C00FF00;
    1f2a:	f028 4323 	bic.w	r3, r8, #2734686208	; 0xa3000000
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    1f2e:	f407 2ce0 	and.w	ip, r7, #458752	; 0x70000
    ui32Command |= ui32Options & 0x5C00FF00;
    1f32:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
    1f36:	ea4c 0402 	orr.w	r4, ip, r2
    1f3a:	f044 4100 	orr.w	r1, r4, #2147483648	; 0x80000000
    ui32Command |= (ui32NumBytes & 0xFF);
    1f3e:	b2f0      	uxtb	r0, r6
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    1f40:	03f6      	lsls	r6, r6, #15
    ui32Command |= ui32Options & 0x5C00FF00;
    1f42:	4308      	orrs	r0, r1
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    1f44:	f006 67f0 	and.w	r7, r6, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
    1f48:	4338      	orrs	r0, r7
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    1f4a:	f8c5 0110 	str.w	r0, [r5, #272]	; 0x110
}
    1f4e:	2001      	movs	r0, #1
    1f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    1f54:	4a2f      	ldr	r2, [pc, #188]	; (2014 <am_hal_iom_spi_read_nb+0x150>)
    1f56:	482c      	ldr	r0, [pc, #176]	; (2008 <am_hal_iom_spi_read_nb+0x144>)
    1f58:	f44f 7169 	mov.w	r1, #932	; 0x3a4
    1f5c:	f7ff f8d6 	bl	110c <am_hal_debug_error>
    1f60:	e7c5      	b.n	1eee <am_hal_iom_spi_read_nb+0x2a>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1f62:	2b00      	cmp	r3, #0
    1f64:	d1c0      	bne.n	1ee8 <am_hal_iom_spi_read_nb+0x24>
    1f66:	4a2c      	ldr	r2, [pc, #176]	; (2018 <am_hal_iom_spi_read_nb+0x154>)
    1f68:	4827      	ldr	r0, [pc, #156]	; (2008 <am_hal_iom_spi_read_nb+0x144>)
    1f6a:	f240 319f 	movw	r1, #927	; 0x39f
    1f6e:	f7ff f8cd 	bl	110c <am_hal_debug_error>
    1f72:	4a26      	ldr	r2, [pc, #152]	; (200c <am_hal_iom_spi_read_nb+0x148>)
    while ( g_bIomBusy[ui32Module] );
    1f74:	5d13      	ldrb	r3, [r2, r4]
    1f76:	2b00      	cmp	r3, #0
    1f78:	d1fc      	bne.n	1f74 <am_hal_iom_spi_read_nb+0xb0>
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1f7a:	f504 25a0 	add.w	r5, r4, #327680	; 0x50000
    g_bIomBusy[ui32Module] = true;
    1f7e:	2001      	movs	r0, #1
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1f80:	3504      	adds	r5, #4
    g_bIomBusy[ui32Module] = true;
    1f82:	5510      	strb	r0, [r2, r4]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1f84:	032d      	lsls	r5, r5, #12
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    1f86:	4922      	ldr	r1, [pc, #136]	; (2010 <am_hal_iom_spi_read_nb+0x14c>)
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1f88:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    1f8c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    1f90:	00a0      	lsls	r0, r4, #2
    1f92:	180b      	adds	r3, r1, r0
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1f94:	f042 0401 	orr.w	r4, r2, #1
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    1f98:	2202      	movs	r2, #2
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1f9a:	f8c5 4208 	str.w	r4, [r5, #520]	; 0x208
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    1f9e:	500a      	str	r2, [r1, r0]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    1fa0:	9909      	ldr	r1, [sp, #36]	; 0x24
    g_psIOMBuffers[ui32Module].pui32Data = pui32Data;
    1fa2:	f8c3 9004 	str.w	r9, [r3, #4]
    g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes;
    1fa6:	609e      	str	r6, [r3, #8]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    1fa8:	6119      	str	r1, [r3, #16]
    g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    1faa:	f8c3 800c 	str.w	r8, [r3, #12]
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1fae:	2e00      	cmp	r6, #0
    1fb0:	d1ba      	bne.n	1f28 <am_hal_iom_spi_read_nb+0x64>
    1fb2:	4a19      	ldr	r2, [pc, #100]	; (2018 <am_hal_iom_spi_read_nb+0x154>)
    1fb4:	4814      	ldr	r0, [pc, #80]	; (2008 <am_hal_iom_spi_read_nb+0x144>)
    1fb6:	f240 4104 	movw	r1, #1028	; 0x404
    1fba:	f7ff f8a7 	bl	110c <am_hal_debug_error>
    1fbe:	e7b3      	b.n	1f28 <am_hal_iom_spi_read_nb+0x64>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    1fc0:	4a15      	ldr	r2, [pc, #84]	; (2018 <am_hal_iom_spi_read_nb+0x154>)
    1fc2:	4811      	ldr	r0, [pc, #68]	; (2008 <am_hal_iom_spi_read_nb+0x144>)
    1fc4:	f240 319f 	movw	r1, #927	; 0x39f
    1fc8:	f7ff f8a0 	bl	110c <am_hal_debug_error>
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1fcc:	f504 25a0 	add.w	r5, r4, #327680	; 0x50000
    g_bIomBusy[ui32Module] = true;
    1fd0:	4b0e      	ldr	r3, [pc, #56]	; (200c <am_hal_iom_spi_read_nb+0x148>)
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    1fd2:	480f      	ldr	r0, [pc, #60]	; (2010 <am_hal_iom_spi_read_nb+0x14c>)
    g_bIomBusy[ui32Module] = true;
    1fd4:	2201      	movs	r2, #1
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1fd6:	3504      	adds	r5, #4
    g_bIomBusy[ui32Module] = true;
    1fd8:	551a      	strb	r2, [r3, r4]
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1fda:	032d      	lsls	r5, r5, #12
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    1fdc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1fe0:	f8d5 1208 	ldr.w	r1, [r5, #520]	; 0x208
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    1fe4:	00a2      	lsls	r2, r4, #2
    1fe6:	1883      	adds	r3, r0, r2
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1fe8:	f041 0401 	orr.w	r4, r1, #1
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    1fec:	2102      	movs	r1, #2
    AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    1fee:	f8c5 4208 	str.w	r4, [r5, #520]	; 0x208
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    1ff2:	5081      	str	r1, [r0, r2]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    1ff4:	9809      	ldr	r0, [sp, #36]	; 0x24
    g_psIOMBuffers[ui32Module].pui32Data = pui32Data;
    1ff6:	f8c3 9004 	str.w	r9, [r3, #4]
    g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes;
    1ffa:	609e      	str	r6, [r3, #8]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    1ffc:	6118      	str	r0, [r3, #16]
    g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    1ffe:	f8c3 800c 	str.w	r8, [r3, #12]
    2002:	e7d6      	b.n	1fb2 <am_hal_iom_spi_read_nb+0xee>
    2004:	00002ce0 	.word	0x00002ce0
    2008:	00002ba4 	.word	0x00002ba4
    200c:	1000085c 	.word	0x1000085c
    2010:	10000a6c 	.word	0x10000a6c
    2014:	00002c94 	.word	0x00002c94
    2018:	00002b80 	.word	0x00002b80

0000201c <am_hal_iom_spi_read>:
{
    201c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    2020:	2801      	cmp	r0, #1
{
    2022:	b08a      	sub	sp, #40	; 0x28
    2024:	4604      	mov	r4, r0
    2026:	460f      	mov	r7, r1
    2028:	4690      	mov	r8, r2
    202a:	461d      	mov	r5, r3
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    202c:	d905      	bls.n	203a <am_hal_iom_spi_read+0x1e>
    202e:	4a37      	ldr	r2, [pc, #220]	; (210c <am_hal_iom_spi_read+0xf0>)
    2030:	4837      	ldr	r0, [pc, #220]	; (2110 <am_hal_iom_spi_read+0xf4>)
    2032:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    2036:	f7ff f869 	bl	110c <am_hal_debug_error>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    203a:	b1dd      	cbz	r5, 2074 <am_hal_iom_spi_read+0x58>
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    203c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    2040:	d211      	bcs.n	2066 <am_hal_iom_spi_read+0x4a>
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
    2042:	0066      	lsls	r6, r4, #1
    2044:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 2128 <am_hal_iom_spi_read+0x10c>
    2048:	1932      	adds	r2, r6, r4
    204a:	eb09 00c2 	add.w	r0, r9, r2, lsl #3
    204e:	6943      	ldr	r3, [r0, #20]
    2050:	2b00      	cmp	r3, #0
    2052:	d03a      	beq.n	20ca <am_hal_iom_spi_read+0xae>
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    2054:	2c01      	cmp	r4, #1
    2056:	d914      	bls.n	2082 <am_hal_iom_spi_read+0x66>
        am_hal_iom_queue_flush(ui32Module);
    2058:	492e      	ldr	r1, [pc, #184]	; (2114 <am_hal_iom_spi_read+0xf8>)
    205a:	4620      	mov	r0, r4
    205c:	680c      	ldr	r4, [r1, #0]
    205e:	47a0      	blx	r4
}
    2060:	b00a      	add	sp, #40	; 0x28
    2062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    am_hal_debug_assert_msg(ui32NumBytes < 4096, "SPI transfer too big.");
    2066:	4a2c      	ldr	r2, [pc, #176]	; (2118 <am_hal_iom_spi_read+0xfc>)
    2068:	4829      	ldr	r0, [pc, #164]	; (2110 <am_hal_iom_spi_read+0xf4>)
    206a:	f240 11d9 	movw	r1, #473	; 0x1d9
    206e:	f7ff f84d 	bl	110c <am_hal_debug_error>
    2072:	e7e6      	b.n	2042 <am_hal_iom_spi_read+0x26>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    2074:	4a29      	ldr	r2, [pc, #164]	; (211c <am_hal_iom_spi_read+0x100>)
    2076:	4826      	ldr	r0, [pc, #152]	; (2110 <am_hal_iom_spi_read+0xf4>)
    2078:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
    207c:	f7ff f846 	bl	110c <am_hal_debug_error>
    2080:	e7df      	b.n	2042 <am_hal_iom_spi_read+0x26>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    2082:	b35d      	cbz	r5, 20dc <am_hal_iom_spi_read+0xc0>
    ui32Critical = am_hal_interrupt_master_disable();
    2084:	f7ff f938 	bl	12f8 <am_hal_interrupt_master_disable>
    if ( (g_bIomBusy[ui32Module] == false) &&
    2088:	4a25      	ldr	r2, [pc, #148]	; (2120 <am_hal_iom_spi_read+0x104>)
    ui32Critical = am_hal_interrupt_master_disable();
    208a:	4682      	mov	sl, r0
    if ( (g_bIomBusy[ui32Module] == false) &&
    208c:	5d10      	ldrb	r0, [r2, r4]
    208e:	b928      	cbnz	r0, 209c <am_hal_iom_spi_read+0x80>
        am_hal_queue_empty(&g_psIOMQueue[ui32Module]) )
    2090:	1933      	adds	r3, r6, r4
    2092:	eb09 0cc3 	add.w	ip, r9, r3, lsl #3
    if ( (g_bIomBusy[ui32Module] == false) &&
    2096:	f8dc 1008 	ldr.w	r1, [ip, #8]
    209a:	b369      	cbz	r1, 20f8 <am_hal_iom_spi_read+0xdc>
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_READ;
    209c:	2301      	movs	r3, #1
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    209e:	4426      	add	r6, r4
        sIOMTransaction.ui32ChipSelect = ui32ChipSelect;
    20a0:	9705      	str	r7, [sp, #20]
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
    20a2:	9507      	str	r5, [sp, #28]
        sIOMTransaction.pfnCallback = pfnCallback;
    20a4:	2700      	movs	r7, #0
        sIOMTransaction.ui32Options = ui32Options;
    20a6:	9d12      	ldr	r5, [sp, #72]	; 0x48
        sIOMTransaction.ui32Module = ui32Module;
    20a8:	9404      	str	r4, [sp, #16]
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    20aa:	eb09 00c6 	add.w	r0, r9, r6, lsl #3
    20ae:	461a      	mov	r2, r3
    20b0:	a903      	add	r1, sp, #12
        sIOMTransaction.pui32Data = pui32Data;
    20b2:	f8cd 8018 	str.w	r8, [sp, #24]
        sIOMTransaction.ui32Options = ui32Options;
    20b6:	9508      	str	r5, [sp, #32]
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_READ;
    20b8:	9303      	str	r3, [sp, #12]
        sIOMTransaction.pfnCallback = pfnCallback;
    20ba:	9709      	str	r7, [sp, #36]	; 0x24
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    20bc:	f000 fade 	bl	267c <am_hal_queue_item_add>
    20c0:	b198      	cbz	r0, 20ea <am_hal_iom_spi_read+0xce>
    am_hal_interrupt_master_set(ui32Critical);
    20c2:	4650      	mov	r0, sl
    20c4:	f7ff f91c 	bl	1300 <am_hal_interrupt_master_set>
    20c8:	e7c6      	b.n	2058 <am_hal_iom_spi_read+0x3c>
        am_hal_iom_spi_read_nq(ui32Module, ui32ChipSelect, pui32Data,
    20ca:	9912      	ldr	r1, [sp, #72]	; 0x48
    20cc:	9100      	str	r1, [sp, #0]
    20ce:	462b      	mov	r3, r5
    20d0:	4642      	mov	r2, r8
    20d2:	4639      	mov	r1, r7
    20d4:	4620      	mov	r0, r4
    20d6:	f7ff fd1f 	bl	1b18 <am_hal_iom_spi_read_nq>
    20da:	e7c1      	b.n	2060 <am_hal_iom_spi_read+0x44>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    20dc:	4a0f      	ldr	r2, [pc, #60]	; (211c <am_hal_iom_spi_read+0x100>)
    20de:	480c      	ldr	r0, [pc, #48]	; (2110 <am_hal_iom_spi_read+0xf4>)
    20e0:	f640 21f8 	movw	r1, #2808	; 0xaf8
    20e4:	f7ff f812 	bl	110c <am_hal_debug_error>
    20e8:	e7cc      	b.n	2084 <am_hal_iom_spi_read+0x68>
            am_hal_debug_assert_msg(0,
    20ea:	4a0e      	ldr	r2, [pc, #56]	; (2124 <am_hal_iom_spi_read+0x108>)
    20ec:	4808      	ldr	r0, [pc, #32]	; (2110 <am_hal_iom_spi_read+0xf4>)
    20ee:	f640 3128 	movw	r1, #2856	; 0xb28
    20f2:	f7ff f80b 	bl	110c <am_hal_debug_error>
    20f6:	e7e4      	b.n	20c2 <am_hal_iom_spi_read+0xa6>
        am_hal_iom_spi_read_nb(ui32Module, ui32ChipSelect, pui32Data,
    20f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    20fa:	9101      	str	r1, [sp, #4]
    20fc:	9200      	str	r2, [sp, #0]
    20fe:	462b      	mov	r3, r5
    2100:	4642      	mov	r2, r8
    2102:	4639      	mov	r1, r7
    2104:	4620      	mov	r0, r4
    2106:	f7ff fedd 	bl	1ec4 <am_hal_iom_spi_read_nb>
    210a:	e7da      	b.n	20c2 <am_hal_iom_spi_read+0xa6>
    210c:	00002ce0 	.word	0x00002ce0
    2110:	00002ba4 	.word	0x00002ba4
    2114:	10000848 	.word	0x10000848
    2118:	00002c94 	.word	0x00002c94
    211c:	00002b80 	.word	0x00002b80
    2120:	1000085c 	.word	0x1000085c
    2124:	00002c20 	.word	0x00002c20
    2128:	10000a94 	.word	0x10000a94

0000212c <am_hal_iom_poll_complete>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    212c:	2801      	cmp	r0, #1
    212e:	d900      	bls.n	2132 <am_hal_iom_poll_complete+0x6>
    2130:	4770      	bx	lr
    2132:	4a02      	ldr	r2, [pc, #8]	; (213c <am_hal_iom_poll_complete+0x10>)
    while ( g_bIomBusy[ui32Module] );
    2134:	5c13      	ldrb	r3, [r2, r0]
    2136:	2b00      	cmp	r3, #0
    2138:	d1fc      	bne.n	2134 <am_hal_iom_poll_complete+0x8>
    213a:	4770      	bx	lr
    213c:	1000085c 	.word	0x1000085c

00002140 <am_hal_iom_int_service>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    2140:	2801      	cmp	r0, #1
    2142:	d900      	bls.n	2146 <am_hal_iom_int_service+0x6>
    2144:	4770      	bx	lr
{
    2146:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ( ui32Status & AM_HAL_IOM_INT_CMDCMP )
    214a:	07ca      	lsls	r2, r1, #31
{
    214c:	b085      	sub	sp, #20
    214e:	4604      	mov	r4, r0
    if ( ui32Status & AM_HAL_IOM_INT_CMDCMP )
    2150:	d517      	bpl.n	2182 <am_hal_iom_int_service+0x42>
        if ( psBuffer->ui32State == BUFFER_IDLE )
    2152:	0085      	lsls	r5, r0, #2
    2154:	182e      	adds	r6, r5, r0
    2156:	00b3      	lsls	r3, r6, #2
    2158:	4e99      	ldr	r6, [pc, #612]	; (23c0 <am_hal_iom_int_service+0x280>)
        g_bIomBusy[ui32Module] = false;
    215a:	499a      	ldr	r1, [pc, #616]	; (23c4 <am_hal_iom_int_service+0x284>)
        if ( psBuffer->ui32State == BUFFER_IDLE )
    215c:	58f7      	ldr	r7, [r6, r3]
        g_bIomBusy[ui32Module] = false;
    215e:	2200      	movs	r2, #0
        if ( psBuffer->ui32State == BUFFER_IDLE )
    2160:	4433      	add	r3, r6
        g_bIomBusy[ui32Module] = false;
    2162:	540a      	strb	r2, [r1, r0]
        if ( psBuffer->ui32State == BUFFER_IDLE )
    2164:	b3af      	cbz	r7, 21d2 <am_hal_iom_int_service+0x92>
        if ( psBuffer->ui32State == BUFFER_RECEIVING )
    2166:	2f02      	cmp	r7, #2
    2168:	f000 8194 	beq.w	2494 <am_hal_iom_int_service+0x354>
        psBuffer->ui32State = BUFFER_IDLE;
    216c:	192a      	adds	r2, r5, r4
    216e:	0090      	lsls	r0, r2, #2
        if ( psBuffer->pfnCallback )
    2170:	1834      	adds	r4, r6, r0
        psBuffer->ui32State = BUFFER_IDLE;
    2172:	2500      	movs	r5, #0
        if ( psBuffer->pfnCallback )
    2174:	6921      	ldr	r1, [r4, #16]
        psBuffer->ui32State = BUFFER_IDLE;
    2176:	5035      	str	r5, [r6, r0]
        if ( psBuffer->pfnCallback )
    2178:	b359      	cbz	r1, 21d2 <am_hal_iom_int_service+0x92>
}
    217a:	b005      	add	sp, #20
    217c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            psBuffer->pfnCallback();
    2180:	4708      	bx	r1
    else if ( ui32Status & AM_HAL_IOM_INT_THR )
    2182:	078b      	lsls	r3, r1, #30
    2184:	d525      	bpl.n	21d2 <am_hal_iom_int_service+0x92>
        if ( psBuffer->ui32State == BUFFER_IDLE )
    2186:	eb00 0b80 	add.w	fp, r0, r0, lsl #2
    218a:	ea4f 068b 	mov.w	r6, fp, lsl #2
    218e:	4b8c      	ldr	r3, [pc, #560]	; (23c0 <am_hal_iom_int_service+0x280>)
    2190:	599a      	ldr	r2, [r3, r6]
    2192:	441e      	add	r6, r3
    2194:	b1ea      	cbz	r2, 21d2 <am_hal_iom_int_service+0x92>
            thresh = AM_BFRn(IOMSTR, ui32Module, FIFOTHR, FIFOWTHR);
    2196:	f500 24a0 	add.w	r4, r0, #327680	; 0x50000
    219a:	3404      	adds	r4, #4
        if ( psBuffer->ui32State == BUFFER_SENDING )
    219c:	2a01      	cmp	r2, #1
            thresh = AM_BFRn(IOMSTR, ui32Module, FIFOTHR, FIFOWTHR);
    219e:	ea4f 3404 	mov.w	r4, r4, lsl #12
        if ( psBuffer->ui32State == BUFFER_SENDING )
    21a2:	d019      	beq.n	21d8 <am_hal_iom_int_service+0x98>
            thresh = AM_BFRn(IOMSTR, ui32Module, FIFOTHR, FIFORTHR);
    21a4:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
                if ( ui32NumBytes == psBuffer->ui32BytesLeft )
    21a8:	46b0      	mov	r8, r6
            thresh = AM_BFRn(IOMSTR, ui32Module, FIFOTHR, FIFORTHR);
    21aa:	f000 093f 	and.w	r9, r0, #63	; 0x3f
    21ae:	f504 7a80 	add.w	sl, r4, #256	; 0x100
    21b2:	e007      	b.n	21c4 <am_hal_iom_int_service+0x84>
                if ( ui32NumBytes == psBuffer->ui32BytesLeft )
    21b4:	f8d8 6008 	ldr.w	r6, [r8, #8]
    21b8:	42ae      	cmp	r6, r5
    21ba:	f000 809d 	beq.w	22f8 <am_hal_iom_int_service+0x1b8>
                else if ( ui32NumBytes >= 4 )
    21be:	2d03      	cmp	r5, #3
    21c0:	f200 8106 	bhi.w	23d0 <am_hal_iom_int_service+0x290>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    21c4:	f8da 7000 	ldr.w	r7, [sl]
    21c8:	b2ff      	uxtb	r7, r7
            while ( (ui32NumBytes = am_hal_iom_fifo_full_slots(ui32Module)) >= thresh )
    21ca:	f007 057f 	and.w	r5, r7, #127	; 0x7f
    21ce:	45a9      	cmp	r9, r5
    21d0:	d9f0      	bls.n	21b4 <am_hal_iom_int_service+0x74>
}
    21d2:	b005      	add	sp, #20
    21d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            thresh = AM_BFRn(IOMSTR, ui32Module, FIFOTHR, FIFOWTHR);
    21d8:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    21dc:	6877      	ldr	r7, [r6, #4]
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    21de:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 23cc <am_hal_iom_int_service+0x28c>
            thresh = AM_BFRn(IOMSTR, ui32Module, FIFOTHR, FIFOWTHR);
    21e2:	f3c2 2b05 	ubfx	fp, r2, #8, #6
    21e6:	f504 7880 	add.w	r8, r4, #256	; 0x100
    21ea:	f504 7902 	add.w	r9, r4, #520	; 0x208
    return (AM_HAL_IOM_MAX_FIFO_SIZE - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    21ee:	f8d8 5000 	ldr.w	r5, [r8]
    21f2:	f8d8 0000 	ldr.w	r0, [r8]
    21f6:	68b1      	ldr	r1, [r6, #8]
    21f8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
    21fc:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
                ui32SpaceInFifo = am_hal_iom_fifo_empty_slots(ui32Module);
    2200:	f002 05fc 	and.w	r5, r2, #252	; 0xfc
    return (AM_HAL_IOM_MAX_FIFO_SIZE - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    2204:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    2208:	428d      	cmp	r5, r1
    220a:	f1c0 0c40 	rsb	ip, r0, #64	; 0x40
    220e:	bf28      	it	cs
    2210:	460d      	movcs	r5, r1
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2212:	f00c 01fc 	and.w	r1, ip, #252	; 0xfc
    2216:	42a9      	cmp	r1, r5
    2218:	d367      	bcc.n	22ea <am_hal_iom_int_service+0x1aa>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    221a:	2d00      	cmp	r5, #0
    221c:	d04d      	beq.n	22ba <am_hal_iom_int_service+0x17a>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    221e:	463b      	mov	r3, r7
    2220:	43fa      	mvns	r2, r7
    2222:	f853 0b04 	ldr.w	r0, [r3], #4
    2226:	6020      	str	r0, [r4, #0]
    2228:	443a      	add	r2, r7
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    222a:	1bd9      	subs	r1, r3, r7
    222c:	442a      	add	r2, r5
    222e:	42a9      	cmp	r1, r5
    2230:	f3c2 0282 	ubfx	r2, r2, #2, #3
    2234:	d241      	bcs.n	22ba <am_hal_iom_int_service+0x17a>
    2236:	b31a      	cbz	r2, 2280 <am_hal_iom_int_service+0x140>
    2238:	2a01      	cmp	r2, #1
    223a:	d01b      	beq.n	2274 <am_hal_iom_int_service+0x134>
    223c:	2a02      	cmp	r2, #2
    223e:	d016      	beq.n	226e <am_hal_iom_int_service+0x12e>
    2240:	2a03      	cmp	r2, #3
    2242:	d011      	beq.n	2268 <am_hal_iom_int_service+0x128>
    2244:	2a04      	cmp	r2, #4
    2246:	d00c      	beq.n	2262 <am_hal_iom_int_service+0x122>
    2248:	2a05      	cmp	r2, #5
    224a:	d007      	beq.n	225c <am_hal_iom_int_service+0x11c>
    224c:	2a06      	cmp	r2, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    224e:	bf1c      	itt	ne
    2250:	f853 2b04 	ldrne.w	r2, [r3], #4
    2254:	6022      	strne	r2, [r4, #0]
    2256:	f853 0b04 	ldr.w	r0, [r3], #4
    225a:	6020      	str	r0, [r4, #0]
    225c:	f853 1b04 	ldr.w	r1, [r3], #4
    2260:	6021      	str	r1, [r4, #0]
    2262:	f853 2b04 	ldr.w	r2, [r3], #4
    2266:	6022      	str	r2, [r4, #0]
    2268:	f853 0b04 	ldr.w	r0, [r3], #4
    226c:	6020      	str	r0, [r4, #0]
    226e:	f853 1b04 	ldr.w	r1, [r3], #4
    2272:	6021      	str	r1, [r4, #0]
    2274:	f853 2b04 	ldr.w	r2, [r3], #4
    2278:	6022      	str	r2, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    227a:	1bd8      	subs	r0, r3, r7
    227c:	42a8      	cmp	r0, r5
    227e:	d21c      	bcs.n	22ba <am_hal_iom_int_service+0x17a>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2280:	469c      	mov	ip, r3
    2282:	3320      	adds	r3, #32
    2284:	f85c 1b04 	ldr.w	r1, [ip], #4
    2288:	6021      	str	r1, [r4, #0]
    228a:	f853 2c1c 	ldr.w	r2, [r3, #-28]
    228e:	6022      	str	r2, [r4, #0]
    2290:	f8dc 0004 	ldr.w	r0, [ip, #4]
    2294:	6020      	str	r0, [r4, #0]
    2296:	f853 1c14 	ldr.w	r1, [r3, #-20]
    229a:	6021      	str	r1, [r4, #0]
    229c:	f853 2c10 	ldr.w	r2, [r3, #-16]
    22a0:	6022      	str	r2, [r4, #0]
    22a2:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    22a6:	6020      	str	r0, [r4, #0]
    22a8:	f853 1c08 	ldr.w	r1, [r3, #-8]
    22ac:	6021      	str	r1, [r4, #0]
    22ae:	f853 2c04 	ldr.w	r2, [r3, #-4]
    22b2:	6022      	str	r2, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    22b4:	1bd8      	subs	r0, r3, r7
    22b6:	42a8      	cmp	r0, r5
    22b8:	d3e2      	bcc.n	2280 <am_hal_iom_int_service+0x140>
                AM_BFWn(IOMSTR, ui32Module, INTCLR, THR, 1);
    22ba:	f8d9 7000 	ldr.w	r7, [r9]
    22be:	f047 0302 	orr.w	r3, r7, #2
    22c2:	f8c9 3000 	str.w	r3, [r9]
                psBuffer->ui32BytesLeft -= ui32NumBytes;
    22c6:	68b1      	ldr	r1, [r6, #8]
                psBuffer->pui32Data += (ui32NumBytes / 4);
    22c8:	6877      	ldr	r7, [r6, #4]
    22ca:	f025 0c03 	bic.w	ip, r5, #3
    22ce:	4467      	add	r7, ip
                psBuffer->ui32BytesLeft -= ui32NumBytes;
    22d0:	1b4d      	subs	r5, r1, r5
    22d2:	60b5      	str	r5, [r6, #8]
                psBuffer->pui32Data += (ui32NumBytes / 4);
    22d4:	6077      	str	r7, [r6, #4]
                if ( 0 == psBuffer->ui32BytesLeft )
    22d6:	2d00      	cmp	r5, #0
    22d8:	f43f af7b 	beq.w	21d2 <am_hal_iom_int_service+0x92>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    22dc:	f8d8 2000 	ldr.w	r2, [r8]
            } while ( am_hal_iom_fifo_full_slots(ui32Module) <= thresh );
    22e0:	f002 007f 	and.w	r0, r2, #127	; 0x7f
    22e4:	4583      	cmp	fp, r0
    22e6:	d282      	bcs.n	21ee <am_hal_iom_int_service+0xae>
    22e8:	e773      	b.n	21d2 <am_hal_iom_int_service+0x92>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    22ea:	4652      	mov	r2, sl
    22ec:	f240 71d6 	movw	r1, #2006	; 0x7d6
    22f0:	4835      	ldr	r0, [pc, #212]	; (23c8 <am_hal_iom_int_service+0x288>)
    22f2:	f7fe ff0b 	bl	110c <am_hal_debug_error>
    22f6:	e792      	b.n	221e <am_hal_iom_int_service+0xde>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    22f8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
                    am_hal_iom_fifo_read(ui32Module, psBuffer->pui32Data,
    22fc:	eb03 0c8b 	add.w	ip, r3, fp, lsl #2
    am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    2300:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    2304:	429e      	cmp	r6, r3
                    am_hal_iom_fifo_read(ui32Module, psBuffer->pui32Data,
    2306:	f8dc 5004 	ldr.w	r5, [ip, #4]
    am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    230a:	f200 8132 	bhi.w	2572 <am_hal_iom_int_service+0x432>
    for ( i = 0; i < ui32NumWords; i++ )
    230e:	ea5f 0a96 	movs.w	sl, r6, lsr #2
    2312:	f007 0203 	and.w	r2, r7, #3
    2316:	d047      	beq.n	23a8 <am_hal_iom_int_service+0x268>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    2318:	462f      	mov	r7, r5
    231a:	6826      	ldr	r6, [r4, #0]
    231c:	f847 6b04 	str.w	r6, [r7], #4
    2320:	eb05 0e8a 	add.w	lr, r5, sl, lsl #2
    2324:	ebae 0805 	sub.w	r8, lr, r5
    2328:	f1a8 0904 	sub.w	r9, r8, #4
    for ( i = 0; i < ui32NumWords; i++ )
    232c:	45be      	cmp	lr, r7
    232e:	f3c9 0182 	ubfx	r1, r9, #2, #3
    2332:	d039      	beq.n	23a8 <am_hal_iom_int_service+0x268>
    2334:	b311      	cbz	r1, 237c <am_hal_iom_int_service+0x23c>
    2336:	2901      	cmp	r1, #1
    2338:	d01b      	beq.n	2372 <am_hal_iom_int_service+0x232>
    233a:	2902      	cmp	r1, #2
    233c:	d016      	beq.n	236c <am_hal_iom_int_service+0x22c>
    233e:	2903      	cmp	r1, #3
    2340:	d011      	beq.n	2366 <am_hal_iom_int_service+0x226>
    2342:	2904      	cmp	r1, #4
    2344:	d00c      	beq.n	2360 <am_hal_iom_int_service+0x220>
    2346:	2905      	cmp	r1, #5
    2348:	d007      	beq.n	235a <am_hal_iom_int_service+0x21a>
    234a:	2906      	cmp	r1, #6
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    234c:	bf1c      	itt	ne
    234e:	6821      	ldrne	r1, [r4, #0]
    2350:	f847 1b04 	strne.w	r1, [r7], #4
    2354:	6823      	ldr	r3, [r4, #0]
    2356:	f847 3b04 	str.w	r3, [r7], #4
    235a:	6826      	ldr	r6, [r4, #0]
    235c:	f847 6b04 	str.w	r6, [r7], #4
    2360:	6821      	ldr	r1, [r4, #0]
    2362:	f847 1b04 	str.w	r1, [r7], #4
    2366:	6823      	ldr	r3, [r4, #0]
    2368:	f847 3b04 	str.w	r3, [r7], #4
    236c:	6826      	ldr	r6, [r4, #0]
    236e:	f847 6b04 	str.w	r6, [r7], #4
    2372:	6821      	ldr	r1, [r4, #0]
    2374:	f847 1b04 	str.w	r1, [r7], #4
    for ( i = 0; i < ui32NumWords; i++ )
    2378:	45be      	cmp	lr, r7
    237a:	d015      	beq.n	23a8 <am_hal_iom_int_service+0x268>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    237c:	46bb      	mov	fp, r7
    237e:	6820      	ldr	r0, [r4, #0]
    2380:	f84b 0b04 	str.w	r0, [fp], #4
    2384:	6823      	ldr	r3, [r4, #0]
    2386:	607b      	str	r3, [r7, #4]
    2388:	6826      	ldr	r6, [r4, #0]
    238a:	f8cb 6004 	str.w	r6, [fp, #4]
    238e:	6821      	ldr	r1, [r4, #0]
    2390:	60f9      	str	r1, [r7, #12]
    2392:	6820      	ldr	r0, [r4, #0]
    2394:	6138      	str	r0, [r7, #16]
    2396:	6823      	ldr	r3, [r4, #0]
    2398:	617b      	str	r3, [r7, #20]
    239a:	6826      	ldr	r6, [r4, #0]
    239c:	61be      	str	r6, [r7, #24]
    239e:	6821      	ldr	r1, [r4, #0]
    23a0:	61f9      	str	r1, [r7, #28]
    23a2:	3720      	adds	r7, #32
    for ( i = 0; i < ui32NumWords; i++ )
    23a4:	45be      	cmp	lr, r7
    23a6:	d1e9      	bne.n	237c <am_hal_iom_int_service+0x23c>
    if ( ui32Leftovers )
    23a8:	2a00      	cmp	r2, #0
    23aa:	f43f af12 	beq.w	21d2 <am_hal_iom_int_service+0x92>
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
    23ae:	a904      	add	r1, sp, #16
    23b0:	6824      	ldr	r4, [r4, #0]
    23b2:	f841 4d04 	str.w	r4, [r1, #-4]!
    23b6:	eb05 008a 	add.w	r0, r5, sl, lsl #2
    23ba:	f000 fb79 	bl	2ab0 <memcpy>
    23be:	e708      	b.n	21d2 <am_hal_iom_int_service+0x92>
    23c0:	10000a6c 	.word	0x10000a6c
    23c4:	1000085c 	.word	0x1000085c
    23c8:	00002ba4 	.word	0x00002ba4
    23cc:	00002cac 	.word	0x00002cac
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    23d0:	f8da 1000 	ldr.w	r1, [sl]
                    am_hal_iom_fifo_read(ui32Module, psBuffer->pui32Data, ui32NumBytes);
    23d4:	f8d8 7004 	ldr.w	r7, [r8, #4]
    am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    23d8:	f001 0c7f 	and.w	ip, r1, #127	; 0x7f
                    ui32NumBytes = (ui32NumBytes & (~0x3));
    23dc:	f025 0603 	bic.w	r6, r5, #3
    am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    23e0:	4566      	cmp	r6, ip
    23e2:	f200 80cd 	bhi.w	2580 <am_hal_iom_int_service+0x440>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    23e6:	463a      	mov	r2, r7
    23e8:	6820      	ldr	r0, [r4, #0]
    23ea:	f842 0b04 	str.w	r0, [r2], #4
    23ee:	f005 0c7c 	and.w	ip, r5, #124	; 0x7c
    23f2:	f1ac 0504 	sub.w	r5, ip, #4
    23f6:	44bc      	add	ip, r7
    for ( i = 0; i < ui32NumWords; i++ )
    23f8:	4562      	cmp	r2, ip
    23fa:	f3c5 0182 	ubfx	r1, r5, #2, #3
    23fe:	d038      	beq.n	2472 <am_hal_iom_int_service+0x332>
    2400:	b311      	cbz	r1, 2448 <am_hal_iom_int_service+0x308>
    2402:	2901      	cmp	r1, #1
    2404:	d01b      	beq.n	243e <am_hal_iom_int_service+0x2fe>
    2406:	2902      	cmp	r1, #2
    2408:	d016      	beq.n	2438 <am_hal_iom_int_service+0x2f8>
    240a:	2903      	cmp	r1, #3
    240c:	d011      	beq.n	2432 <am_hal_iom_int_service+0x2f2>
    240e:	2904      	cmp	r1, #4
    2410:	d00c      	beq.n	242c <am_hal_iom_int_service+0x2ec>
    2412:	2905      	cmp	r1, #5
    2414:	d007      	beq.n	2426 <am_hal_iom_int_service+0x2e6>
    2416:	2906      	cmp	r1, #6
    2418:	d002      	beq.n	2420 <am_hal_iom_int_service+0x2e0>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    241a:	6820      	ldr	r0, [r4, #0]
    241c:	6078      	str	r0, [r7, #4]
    241e:	3204      	adds	r2, #4
    2420:	6827      	ldr	r7, [r4, #0]
    2422:	f842 7b04 	str.w	r7, [r2], #4
    2426:	6825      	ldr	r5, [r4, #0]
    2428:	f842 5b04 	str.w	r5, [r2], #4
    242c:	6821      	ldr	r1, [r4, #0]
    242e:	f842 1b04 	str.w	r1, [r2], #4
    2432:	6820      	ldr	r0, [r4, #0]
    2434:	f842 0b04 	str.w	r0, [r2], #4
    2438:	6827      	ldr	r7, [r4, #0]
    243a:	f842 7b04 	str.w	r7, [r2], #4
    243e:	6825      	ldr	r5, [r4, #0]
    2440:	f842 5b04 	str.w	r5, [r2], #4
    for ( i = 0; i < ui32NumWords; i++ )
    2444:	4562      	cmp	r2, ip
    2446:	d014      	beq.n	2472 <am_hal_iom_int_service+0x332>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    2448:	4611      	mov	r1, r2
    244a:	6820      	ldr	r0, [r4, #0]
    244c:	f841 0b04 	str.w	r0, [r1], #4
    2450:	6827      	ldr	r7, [r4, #0]
    2452:	6057      	str	r7, [r2, #4]
    2454:	6825      	ldr	r5, [r4, #0]
    2456:	604d      	str	r5, [r1, #4]
    2458:	6821      	ldr	r1, [r4, #0]
    245a:	60d1      	str	r1, [r2, #12]
    245c:	6820      	ldr	r0, [r4, #0]
    245e:	6110      	str	r0, [r2, #16]
    2460:	6827      	ldr	r7, [r4, #0]
    2462:	6157      	str	r7, [r2, #20]
    2464:	6825      	ldr	r5, [r4, #0]
    2466:	6195      	str	r5, [r2, #24]
    2468:	6821      	ldr	r1, [r4, #0]
    246a:	61d1      	str	r1, [r2, #28]
    246c:	3220      	adds	r2, #32
    for ( i = 0; i < ui32NumWords; i++ )
    246e:	4562      	cmp	r2, ip
    2470:	d1ea      	bne.n	2448 <am_hal_iom_int_service+0x308>
                    psBuffer->ui32BytesLeft -= ui32NumBytes;
    2472:	f8d8 0008 	ldr.w	r0, [r8, #8]
                    psBuffer->pui32Data += (ui32NumBytes / 4);
    2476:	f8d8 2004 	ldr.w	r2, [r8, #4]
                    psBuffer->ui32BytesLeft -= ui32NumBytes;
    247a:	1b87      	subs	r7, r0, r6
                    psBuffer->pui32Data += (ui32NumBytes / 4);
    247c:	4432      	add	r2, r6
                    psBuffer->ui32BytesLeft -= ui32NumBytes;
    247e:	f8c8 7008 	str.w	r7, [r8, #8]
                    psBuffer->pui32Data += (ui32NumBytes / 4);
    2482:	f8c8 2004 	str.w	r2, [r8, #4]
                    AM_BFWn(IOMSTR, ui32Module, INTCLR, THR, 1);
    2486:	f8d4 6208 	ldr.w	r6, [r4, #520]	; 0x208
    248a:	f046 0502 	orr.w	r5, r6, #2
    248e:	f8c4 5208 	str.w	r5, [r4, #520]	; 0x208
    2492:	e697      	b.n	21c4 <am_hal_iom_int_service+0x84>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    2494:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
    2498:	3004      	adds	r0, #4
    249a:	0307      	lsls	r7, r0, #12
            am_hal_iom_fifo_read(ui32Module, psBuffer->pui32Data, ui32NumBytes);
    249c:	f8d3 8004 	ldr.w	r8, [r3, #4]
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    24a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
    24a4:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
    24a8:	fa5f f983 	uxtb.w	r9, r3
            ui32NumBytes = am_hal_iom_fifo_full_slots(ui32Module);
    24ac:	f009 0a7f 	and.w	sl, r9, #127	; 0x7f
    am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    24b0:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    24b4:	4592      	cmp	sl, r2
    24b6:	d86c      	bhi.n	2592 <am_hal_iom_int_service+0x452>
    for ( i = 0; i < ui32NumWords; i++ )
    24b8:	ea5f 009a 	movs.w	r0, sl, lsr #2
    24bc:	f009 0203 	and.w	r2, r9, #3
    24c0:	d04b      	beq.n	255a <am_hal_iom_int_service+0x41a>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    24c2:	4643      	mov	r3, r8
    24c4:	6839      	ldr	r1, [r7, #0]
    24c6:	f843 1b04 	str.w	r1, [r3], #4
    24ca:	eb08 0e80 	add.w	lr, r8, r0, lsl #2
    24ce:	ebae 0b08 	sub.w	fp, lr, r8
    24d2:	f1ab 0c04 	sub.w	ip, fp, #4
    for ( i = 0; i < ui32NumWords; i++ )
    24d6:	4573      	cmp	r3, lr
    24d8:	f3cc 0182 	ubfx	r1, ip, #2, #3
    24dc:	d03d      	beq.n	255a <am_hal_iom_int_service+0x41a>
    24de:	b311      	cbz	r1, 2526 <am_hal_iom_int_service+0x3e6>
    24e0:	2901      	cmp	r1, #1
    24e2:	d01b      	beq.n	251c <am_hal_iom_int_service+0x3dc>
    24e4:	2902      	cmp	r1, #2
    24e6:	d016      	beq.n	2516 <am_hal_iom_int_service+0x3d6>
    24e8:	2903      	cmp	r1, #3
    24ea:	d011      	beq.n	2510 <am_hal_iom_int_service+0x3d0>
    24ec:	2904      	cmp	r1, #4
    24ee:	d00c      	beq.n	250a <am_hal_iom_int_service+0x3ca>
    24f0:	2905      	cmp	r1, #5
    24f2:	d007      	beq.n	2504 <am_hal_iom_int_service+0x3c4>
    24f4:	2906      	cmp	r1, #6
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    24f6:	bf1c      	itt	ne
    24f8:	6839      	ldrne	r1, [r7, #0]
    24fa:	f843 1b04 	strne.w	r1, [r3], #4
    24fe:	6839      	ldr	r1, [r7, #0]
    2500:	f843 1b04 	str.w	r1, [r3], #4
    2504:	6839      	ldr	r1, [r7, #0]
    2506:	f843 1b04 	str.w	r1, [r3], #4
    250a:	6839      	ldr	r1, [r7, #0]
    250c:	f843 1b04 	str.w	r1, [r3], #4
    2510:	6839      	ldr	r1, [r7, #0]
    2512:	f843 1b04 	str.w	r1, [r3], #4
    2516:	6839      	ldr	r1, [r7, #0]
    2518:	f843 1b04 	str.w	r1, [r3], #4
    251c:	6839      	ldr	r1, [r7, #0]
    251e:	f843 1b04 	str.w	r1, [r3], #4
    for ( i = 0; i < ui32NumWords; i++ )
    2522:	4573      	cmp	r3, lr
    2524:	d019      	beq.n	255a <am_hal_iom_int_service+0x41a>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    2526:	4699      	mov	r9, r3
    2528:	f8d7 a000 	ldr.w	sl, [r7]
    252c:	f849 ab04 	str.w	sl, [r9], #4
    2530:	f8d7 b000 	ldr.w	fp, [r7]
    2534:	f8c3 b004 	str.w	fp, [r3, #4]
    2538:	f8d7 c000 	ldr.w	ip, [r7]
    253c:	f8c9 c004 	str.w	ip, [r9, #4]
    2540:	6839      	ldr	r1, [r7, #0]
    2542:	60d9      	str	r1, [r3, #12]
    2544:	6839      	ldr	r1, [r7, #0]
    2546:	6119      	str	r1, [r3, #16]
    2548:	6839      	ldr	r1, [r7, #0]
    254a:	6159      	str	r1, [r3, #20]
    254c:	6839      	ldr	r1, [r7, #0]
    254e:	6199      	str	r1, [r3, #24]
    2550:	6839      	ldr	r1, [r7, #0]
    2552:	61d9      	str	r1, [r3, #28]
    2554:	3320      	adds	r3, #32
    for ( i = 0; i < ui32NumWords; i++ )
    2556:	4573      	cmp	r3, lr
    2558:	d1e5      	bne.n	2526 <am_hal_iom_int_service+0x3e6>
    if ( ui32Leftovers )
    255a:	2a00      	cmp	r2, #0
    255c:	f43f ae06 	beq.w	216c <am_hal_iom_int_service+0x2c>
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
    2560:	a904      	add	r1, sp, #16
    2562:	683b      	ldr	r3, [r7, #0]
    2564:	f841 3d04 	str.w	r3, [r1, #-4]!
    2568:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    256c:	f000 faa0 	bl	2ab0 <memcpy>
    2570:	e5fc      	b.n	216c <am_hal_iom_int_service+0x2c>
    am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    2572:	4a0b      	ldr	r2, [pc, #44]	; (25a0 <am_hal_iom_int_service+0x460>)
    2574:	480b      	ldr	r0, [pc, #44]	; (25a4 <am_hal_iom_int_service+0x464>)
    2576:	f640 010e 	movw	r1, #2062	; 0x80e
    257a:	f7fe fdc7 	bl	110c <am_hal_debug_error>
    257e:	e6c6      	b.n	230e <am_hal_iom_int_service+0x1ce>
    2580:	4a07      	ldr	r2, [pc, #28]	; (25a0 <am_hal_iom_int_service+0x460>)
    2582:	4808      	ldr	r0, [pc, #32]	; (25a4 <am_hal_iom_int_service+0x464>)
    2584:	9301      	str	r3, [sp, #4]
    2586:	f640 010e 	movw	r1, #2062	; 0x80e
    258a:	f7fe fdbf 	bl	110c <am_hal_debug_error>
    258e:	9b01      	ldr	r3, [sp, #4]
    2590:	e729      	b.n	23e6 <am_hal_iom_int_service+0x2a6>
    2592:	4a03      	ldr	r2, [pc, #12]	; (25a0 <am_hal_iom_int_service+0x460>)
    2594:	4803      	ldr	r0, [pc, #12]	; (25a4 <am_hal_iom_int_service+0x464>)
    2596:	f640 010e 	movw	r1, #2062	; 0x80e
    259a:	f7fe fdb7 	bl	110c <am_hal_debug_error>
    259e:	e78b      	b.n	24b8 <am_hal_iom_int_service+0x378>
    25a0:	00002bd0 	.word	0x00002bd0
    25a4:	00002ba4 	.word	0x00002ba4

000025a8 <am_hal_iom_int_enable>:
am_hal_iom_int_enable(uint32_t ui32Module, uint32_t ui32Interrupt)
{
    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    25a8:	2801      	cmp	r0, #1
    25aa:	d808      	bhi.n	25be <am_hal_iom_int_enable+0x16>
    {
        return;
    }

    AM_REGn(IOMSTR, ui32Module, INTEN) |= ui32Interrupt;
    25ac:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
    25b0:	3004      	adds	r0, #4
    25b2:	0302      	lsls	r2, r0, #12
    25b4:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    25b8:	4319      	orrs	r1, r3
    25ba:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    25be:	4770      	bx	lr

000025c0 <am_hal_iom_int_clear>:
am_hal_iom_int_clear(uint32_t ui32Module, uint32_t ui32Interrupt)
{
    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    25c0:	2801      	cmp	r0, #1
    25c2:	d805      	bhi.n	25d0 <am_hal_iom_int_clear+0x10>
    {
        return;
    }

    AM_REGn(IOMSTR, ui32Module, INTCLR) = ui32Interrupt;
    25c4:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
    25c8:	3004      	adds	r0, #4
    25ca:	0302      	lsls	r2, r0, #12
    25cc:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    25d0:	4770      	bx	lr
    25d2:	bf00      	nop

000025d4 <am_hal_iom_int_status_get>:
am_hal_iom_int_status_get(uint32_t ui32Module, bool bEnabledOnly)
{
    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    25d4:	2801      	cmp	r0, #1
    25d6:	d901      	bls.n	25dc <am_hal_iom_int_status_get+0x8>
    {
        return 0;
    25d8:	2000      	movs	r0, #0
    }
    else
    {
        return AM_REGn(IOMSTR, ui32Module, INTSTAT);
    }
}
    25da:	4770      	bx	lr
        uint32_t u32RetVal = AM_REGn(IOMSTR, ui32Module, INTSTAT);
    25dc:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
    25e0:	3004      	adds	r0, #4
    25e2:	0302      	lsls	r2, r0, #12
    if ( bEnabledOnly )
    25e4:	b911      	cbnz	r1, 25ec <am_hal_iom_int_status_get+0x18>
        return AM_REGn(IOMSTR, ui32Module, INTSTAT);
    25e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
    25ea:	4770      	bx	lr
        uint32_t u32RetVal = AM_REGn(IOMSTR, ui32Module, INTSTAT);
    25ec:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
        return u32RetVal & AM_REGn(IOMSTR, ui32Module, INTEN);
    25f0:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    25f4:	4018      	ands	r0, r3
    25f6:	4770      	bx	lr

000025f8 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    25f8:	490d      	ldr	r1, [pc, #52]	; (2630 <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    25fa:	4b0e      	ldr	r3, [pc, #56]	; (2634 <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    25fc:	4a0e      	ldr	r2, [pc, #56]	; (2638 <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    25fe:	681b      	ldr	r3, [r3, #0]
{
    2600:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    2602:	680d      	ldr	r5, [r1, #0]
    2604:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    2606:	6815      	ldr	r5, [r2, #0]
    2608:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    260a:	4c0c      	ldr	r4, [pc, #48]	; (263c <am_hal_mcuctrl_fault_status+0x44>)
    260c:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    260e:	4329      	orrs	r1, r5
    2610:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    2612:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    2614:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    2618:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    261a:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    261c:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    2620:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    2624:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    2626:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    2628:	6142      	str	r2, [r0, #20]
}
    262a:	bc70      	pop	{r4, r5, r6}
    262c:	4770      	bx	lr
    262e:	bf00      	nop
    2630:	400201c4 	.word	0x400201c4
    2634:	400201cc 	.word	0x400201cc
    2638:	400201c0 	.word	0x400201c0
    263c:	400201c8 	.word	0x400201c8

00002640 <am_hal_mcuctrl_bandgap_disable>:
am_hal_mcuctrl_bandgap_disable(void)
{
    //
    // Disable the Bandgap in the MCUCTRL.
    //
    AM_REG(MCUCTRL, BANDGAPEN) = ~AM_REG_MCUCTRL_BANDGAPEN_BGPEN_M;
    2640:	4b02      	ldr	r3, [pc, #8]	; (264c <am_hal_mcuctrl_bandgap_disable+0xc>)
    2642:	f06f 0201 	mvn.w	r2, #1
    2646:	601a      	str	r2, [r3, #0]
    2648:	4770      	bx	lr
    264a:	bf00      	nop
    264c:	400200fc 	.word	0x400200fc

00002650 <am_hal_mcuctrl_bucks_enable>:
am_hal_mcuctrl_bucks_enable(void)
{
    //
    // Enable the core buck converter in the MCUCTRL.
    //
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    2650:	4b08      	ldr	r3, [pc, #32]	; (2674 <am_hal_mcuctrl_bucks_enable+0x24>)
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Poll until core buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    2652:	4a09      	ldr	r2, [pc, #36]	; (2678 <am_hal_mcuctrl_bucks_enable+0x28>)
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    2654:	6819      	ldr	r1, [r3, #0]
    2656:	f041 0002 	orr.w	r0, r1, #2
    265a:	6018      	str	r0, [r3, #0]
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    265c:	6819      	ldr	r1, [r3, #0]
    265e:	f041 0001 	orr.w	r0, r1, #1
    2662:	6018      	str	r0, [r3, #0]
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    2664:	6813      	ldr	r3, [r2, #0]
    2666:	0799      	lsls	r1, r3, #30
    2668:	d5fc      	bpl.n	2664 <am_hal_mcuctrl_bucks_enable+0x14>

    //
    // Poll until SRAM buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, MEMBUCKON) );
    266a:	4a03      	ldr	r2, [pc, #12]	; (2678 <am_hal_mcuctrl_bucks_enable+0x28>)
    266c:	6811      	ldr	r1, [r2, #0]
    266e:	07cb      	lsls	r3, r1, #31
    2670:	d5fc      	bpl.n	266c <am_hal_mcuctrl_bucks_enable+0x1c>
}
    2672:	4770      	bx	lr
    2674:	40020010 	.word	0x40020010
    2678:	40020014 	.word	0x40020014

0000267c <am_hal_queue_item_add>:
//! didn't have enough space.
//
//*****************************************************************************
bool
am_hal_queue_item_add(am_hal_queue_t *psQueue, const void *pvSource, uint32_t ui32NumItems)
{
    267c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    267e:	4604      	mov	r4, r0
    uint32_t i;
    uint8_t *pui8Source;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    2680:	6907      	ldr	r7, [r0, #16]
{
    2682:	460e      	mov	r6, r1
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    2684:	fb07 f702 	mul.w	r7, r7, r2
    bool bSuccess = false;
    uint32_t ui32Primask;

    pui8Source = (uint8_t *) pvSource;

    ui32Primask = am_hal_interrupt_master_disable();
    2688:	f7fe fe36 	bl	12f8 <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't already full
    //
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    268c:	68a5      	ldr	r5, [r4, #8]
    268e:	68e3      	ldr	r3, [r4, #12]
    2690:	1b59      	subs	r1, r3, r5
    2692:	428f      	cmp	r7, r1
    2694:	d87c      	bhi.n	2790 <am_hal_queue_item_add+0x114>
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    2696:	2f00      	cmp	r7, #0
    2698:	d073      	beq.n	2782 <am_hal_queue_item_add+0x106>
        {
            //
            // Write the value to the buffer.
            //
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    269a:	4635      	mov	r5, r6
    269c:	6823      	ldr	r3, [r4, #0]
    269e:	6962      	ldr	r2, [r4, #20]
    26a0:	f815 1b01 	ldrb.w	r1, [r5], #1
    26a4:	54d1      	strb	r1, [r2, r3]

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    26a6:	6823      	ldr	r3, [r4, #0]
    26a8:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    26ac:	1c5a      	adds	r2, r3, #1
    26ae:	19f1      	adds	r1, r6, r7
    26b0:	f107 3cff 	add.w	ip, r7, #4294967295
    26b4:	fbb2 f6fe 	udiv	r6, r2, lr
        for ( i = 0; i < ui32Bytes; i++ )
    26b8:	42a9      	cmp	r1, r5
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    26ba:	fb0e 2316 	mls	r3, lr, r6, r2
    26be:	6023      	str	r3, [r4, #0]
    26c0:	f00c 0203 	and.w	r2, ip, #3
        for ( i = 0; i < ui32Bytes; i++ )
    26c4:	d05c      	beq.n	2780 <am_hal_queue_item_add+0x104>
    26c6:	b34a      	cbz	r2, 271c <am_hal_queue_item_add+0xa0>
    26c8:	2a01      	cmp	r2, #1
    26ca:	d019      	beq.n	2700 <am_hal_queue_item_add+0x84>
    26cc:	2a02      	cmp	r2, #2
    26ce:	d00b      	beq.n	26e8 <am_hal_queue_item_add+0x6c>
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    26d0:	6962      	ldr	r2, [r4, #20]
    26d2:	f815 6b01 	ldrb.w	r6, [r5], #1
    26d6:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    26d8:	6823      	ldr	r3, [r4, #0]
    26da:	68e6      	ldr	r6, [r4, #12]
    26dc:	1c5a      	adds	r2, r3, #1
    26de:	fbb2 fef6 	udiv	lr, r2, r6
    26e2:	fb06 231e 	mls	r3, r6, lr, r2
    26e6:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    26e8:	6962      	ldr	r2, [r4, #20]
    26ea:	f815 6b01 	ldrb.w	r6, [r5], #1
    26ee:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    26f0:	6823      	ldr	r3, [r4, #0]
    26f2:	68e6      	ldr	r6, [r4, #12]
    26f4:	1c5a      	adds	r2, r3, #1
    26f6:	fbb2 fcf6 	udiv	ip, r2, r6
    26fa:	fb06 231c 	mls	r3, r6, ip, r2
    26fe:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    2700:	6962      	ldr	r2, [r4, #20]
    2702:	f815 6b01 	ldrb.w	r6, [r5], #1
    2706:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    2708:	6823      	ldr	r3, [r4, #0]
    270a:	68e6      	ldr	r6, [r4, #12]
    270c:	1c5a      	adds	r2, r3, #1
        for ( i = 0; i < ui32Bytes; i++ )
    270e:	42a9      	cmp	r1, r5
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    2710:	fbb2 fef6 	udiv	lr, r2, r6
    2714:	fb06 231e 	mls	r3, r6, lr, r2
    2718:	6023      	str	r3, [r4, #0]
        for ( i = 0; i < ui32Bytes; i++ )
    271a:	d031      	beq.n	2780 <am_hal_queue_item_add+0x104>
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    271c:	46ac      	mov	ip, r5
    271e:	6962      	ldr	r2, [r4, #20]
    2720:	f81c 6b01 	ldrb.w	r6, [ip], #1
    2724:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    2726:	6823      	ldr	r3, [r4, #0]
    2728:	68e2      	ldr	r2, [r4, #12]
    272a:	1c5e      	adds	r6, r3, #1
    272c:	fbb6 fef2 	udiv	lr, r6, r2
    2730:	fb02 631e 	mls	r3, r2, lr, r6
    2734:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    2736:	6962      	ldr	r2, [r4, #20]
    2738:	786e      	ldrb	r6, [r5, #1]
    273a:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    273c:	6823      	ldr	r3, [r4, #0]
    273e:	68e2      	ldr	r2, [r4, #12]
    2740:	1c5e      	adds	r6, r3, #1
    2742:	fbb6 fef2 	udiv	lr, r6, r2
    2746:	fb02 631e 	mls	r3, r2, lr, r6
    274a:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    274c:	6962      	ldr	r2, [r4, #20]
    274e:	f89c 6001 	ldrb.w	r6, [ip, #1]
    2752:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    2754:	6823      	ldr	r3, [r4, #0]
    2756:	68e2      	ldr	r2, [r4, #12]
    2758:	1c5e      	adds	r6, r3, #1
    275a:	fbb6 fcf2 	udiv	ip, r6, r2
    275e:	fb02 631c 	mls	r3, r2, ip, r6
    2762:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    2764:	6962      	ldr	r2, [r4, #20]
    2766:	78ee      	ldrb	r6, [r5, #3]
    2768:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    276a:	6823      	ldr	r3, [r4, #0]
    276c:	68e2      	ldr	r2, [r4, #12]
    276e:	1c5e      	adds	r6, r3, #1
    2770:	3504      	adds	r5, #4
    2772:	fbb6 fef2 	udiv	lr, r6, r2
        for ( i = 0; i < ui32Bytes; i++ )
    2776:	42a9      	cmp	r1, r5
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    2778:	fb02 631e 	mls	r3, r2, lr, r6
    277c:	6023      	str	r3, [r4, #0]
        for ( i = 0; i < ui32Bytes; i++ )
    277e:	d1cd      	bne.n	271c <am_hal_queue_item_add+0xa0>
    2780:	68a5      	ldr	r5, [r4, #8]
        }

        //
        // Update the length value appropriately.
        //
        psQueue->ui32Length += ui32Bytes;
    2782:	443d      	add	r5, r7
    2784:	60a5      	str	r5, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
    2786:	2401      	movs	r4, #1
        // failure.
        //
        bSuccess = false;
    }

    am_hal_interrupt_master_set(ui32Primask);
    2788:	f7fe fdba 	bl	1300 <am_hal_interrupt_master_set>

    return bSuccess;
}
    278c:	4620      	mov	r0, r4
    278e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        bSuccess = false;
    2790:	2400      	movs	r4, #0
    am_hal_interrupt_master_set(ui32Primask);
    2792:	f7fe fdb5 	bl	1300 <am_hal_interrupt_master_set>
}
    2796:	4620      	mov	r0, r4
    2798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    279a:	bf00      	nop

0000279c <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    279c:	4a05      	ldr	r2, [pc, #20]	; (27b4 <am_hal_rtc_osc_select+0x18>)
    279e:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    27a0:	b918      	cbnz	r0, 27aa <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    27a2:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    27a6:	6010      	str	r0, [r2, #0]
    27a8:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    27aa:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    27ae:	6011      	str	r1, [r2, #0]
    27b0:	4770      	bx	lr
    27b2:	bf00      	nop
    27b4:	4000400c 	.word	0x4000400c

000027b8 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_BFW(RTC, RTCCTL, RSTOP, 1);
    27b8:	4a02      	ldr	r2, [pc, #8]	; (27c4 <am_hal_rtc_osc_disable+0xc>)
    27ba:	6813      	ldr	r3, [r2, #0]
    27bc:	f043 0010 	orr.w	r0, r3, #16
    27c0:	6010      	str	r0, [r2, #0]
    27c2:	4770      	bx	lr
    27c4:	40004050 	.word	0x40004050

000027c8 <am_hal_sysctrl_sleep>:
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    27c8:	4a08      	ldr	r2, [pc, #32]	; (27ec <am_hal_sysctrl_sleep+0x24>)
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    27ca:	b118      	cbz	r0, 27d4 <am_hal_sysctrl_sleep+0xc>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    27cc:	4b08      	ldr	r3, [pc, #32]	; (27f0 <am_hal_sysctrl_sleep+0x28>)
    27ce:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    27d0:	07c3      	lsls	r3, r0, #31
    27d2:	d505      	bpl.n	27e0 <am_hal_sysctrl_sleep+0x18>
    }
    else
    {
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    27d4:	6811      	ldr	r1, [r2, #0]
    27d6:	f021 0304 	bic.w	r3, r1, #4
    27da:	6013      	str	r3, [r2, #0]
    }

    //
    // Go to sleep.
    //
    AM_ASM_WFI;
    27dc:	bf30      	wfi
    27de:	4770      	bx	lr
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    27e0:	6810      	ldr	r0, [r2, #0]
    27e2:	f040 0104 	orr.w	r1, r0, #4
    27e6:	6011      	str	r1, [r2, #0]
    AM_ASM_WFI;
    27e8:	bf30      	wfi
    27ea:	4770      	bx	lr
    27ec:	e000ed10 	.word	0xe000ed10
    27f0:	40020250 	.word	0x40020250

000027f4 <am_hal_uart_config>:
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    27f4:	b570      	push	{r4, r5, r6, lr}
    27f6:	460c      	mov	r4, r1
    uint32_t ui32ConfigVal = 0;

    //
    // Configure the Baudrate.
    //
    config_baudrate(0, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());
    27f8:	680d      	ldr	r5, [r1, #0]
    27fa:	f7fe fbe9 	bl	fd0 <am_hal_clkgen_sysclk_get>
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    27fe:	0129      	lsls	r1, r5, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    2800:	fbb0 f2f1 	udiv	r2, r0, r1
    if ( ui32IntegerDivisor == 0 )
    2804:	b30a      	cbz	r2, 284a <am_hal_uart_config+0x56>
    AM_REGn(UART, 0, IBRD) = ui32IntegerDivisor;
    2806:	4d11      	ldr	r5, [pc, #68]	; (284c <am_hal_uart_config+0x58>)
    AM_REGn(UART, 0, FBRD) = ui32FractionDivisor;
    2808:	4e11      	ldr	r6, [pc, #68]	; (2850 <am_hal_uart_config+0x5c>)
    AM_REGn(UART, 0, IBRD) = ui32IntegerDivisor;
    280a:	602a      	str	r2, [r5, #0]
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    280c:	0183      	lsls	r3, r0, #6
    280e:	fbb3 f0f1 	udiv	r0, r3, r1
    2812:	eba0 1382 	sub.w	r3, r0, r2, lsl #6
    AM_REGn(UART, 0, IBRD) = ui32IntegerDivisor;
    2816:	602a      	str	r2, [r5, #0]
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    2818:	490e      	ldr	r1, [pc, #56]	; (2854 <am_hal_uart_config+0x60>)
    AM_REGn(UART, 0, FBRD) = ui32FractionDivisor;
    281a:	6033      	str	r3, [r6, #0]
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    281c:	68e6      	ldr	r6, [r4, #12]
    ui32ConfigVal |= psConfig->ui32DataBits;
    281e:	6863      	ldr	r3, [r4, #4]
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    2820:	7a25      	ldrb	r5, [r4, #8]
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    2822:	6808      	ldr	r0, [r1, #0]

    //
    // Write the flow control settings to the control register.
    //
    AM_REGn(UART, 0, CR) |= psConfig->ui32FlowCtrl;
    2824:	4a0c      	ldr	r2, [pc, #48]	; (2858 <am_hal_uart_config+0x64>)
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    2826:	4333      	orrs	r3, r6
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    2828:	2d00      	cmp	r5, #0
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    282a:	ea43 0300 	orr.w	r3, r3, r0
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    282e:	bf14      	ite	ne
    2830:	2008      	movne	r0, #8
    2832:	2000      	moveq	r0, #0
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    2834:	4303      	orrs	r3, r0
    2836:	600b      	str	r3, [r1, #0]
    AM_REGn(UART, 0, CR) |= psConfig->ui32FlowCtrl;
    2838:	6811      	ldr	r1, [r2, #0]
    283a:	6924      	ldr	r4, [r4, #16]
    283c:	4321      	orrs	r1, r4
    283e:	6011      	str	r1, [r2, #0]

    //
    // Set the clock select field for 24MHz from the HFRC
    //
    AM_REGn(UART, 0, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    2840:	6813      	ldr	r3, [r2, #0]
    2842:	f043 0610 	orr.w	r6, r3, #16
    2846:	6016      	str	r6, [r2, #0]
    2848:	bd70      	pop	{r4, r5, r6, pc}
    284a:	e7fe      	b.n	284a <am_hal_uart_config+0x56>
    284c:	4001c024 	.word	0x4001c024
    2850:	4001c028 	.word	0x4001c028
    2854:	4001c02c 	.word	0x4001c02c
    2858:	4001c030 	.word	0x4001c030

0000285c <am_hal_uart_int_status_get>:
//
//*****************************************************************************
uint32_t
am_hal_uart_int_status_get(uint32_t ui32Module, bool bEnabledOnly)
{
    if ( bEnabledOnly )
    285c:	b911      	cbnz	r1, 2864 <am_hal_uart_int_status_get+0x8>
    else
    {
        //
        // Read and return the Raw Interrupt Status.
        //
        return AM_REGn(UART, 0, IES);
    285e:	4b03      	ldr	r3, [pc, #12]	; (286c <am_hal_uart_int_status_get+0x10>)
    2860:	6818      	ldr	r0, [r3, #0]
    }
}
    2862:	4770      	bx	lr
        return AM_REGn(UART, 0, MIS);
    2864:	4802      	ldr	r0, [pc, #8]	; (2870 <am_hal_uart_int_status_get+0x14>)
    2866:	6800      	ldr	r0, [r0, #0]
    2868:	4770      	bx	lr
    286a:	bf00      	nop
    286c:	4001c03c 	.word	0x4001c03c
    2870:	4001c040 	.word	0x4001c040

00002874 <am_hal_uart_int_clear>:
am_hal_uart_int_clear(uint32_t ui32Module, uint32_t ui32Interrupt)
{
    //
    // Clear the bits.
    //
    AM_REGn(UART, 0, IEC) = ui32Interrupt;
    2874:	4b01      	ldr	r3, [pc, #4]	; (287c <am_hal_uart_int_clear+0x8>)
    2876:	6019      	str	r1, [r3, #0]
    2878:	4770      	bx	lr
    287a:	bf00      	nop
    287c:	4001c044 	.word	0x4001c044

00002880 <am_hal_uart_int_enable>:
am_hal_uart_int_enable(uint32_t ui32Module, uint32_t ui32Interrupt)
{
    //
    // Enable the interrupts.
    //
    AM_REGn(UART, 0, IER) |= ui32Interrupt;
    2880:	4a02      	ldr	r2, [pc, #8]	; (288c <am_hal_uart_int_enable+0xc>)
    2882:	6813      	ldr	r3, [r2, #0]
    2884:	4319      	orrs	r1, r3
    2886:	6011      	str	r1, [r2, #0]
    2888:	4770      	bx	lr
    288a:	bf00      	nop
    288c:	4001c038 	.word	0x4001c038

00002890 <am_hal_uart_enable>:
am_hal_uart_enable(uint32_t ui32Module)
{
    //
    // Enable the UART, RX, and TX.
    //
    AM_REGn(UART, 0, CR) |= (AM_REG_UART_CR_UARTEN_M   |
    2890:	4a03      	ldr	r2, [pc, #12]	; (28a0 <am_hal_uart_enable+0x10>)
    2892:	6813      	ldr	r3, [r2, #0]
    2894:	f443 7040 	orr.w	r0, r3, #768	; 0x300
    2898:	f040 0101 	orr.w	r1, r0, #1
    289c:	6011      	str	r1, [r2, #0]
    289e:	4770      	bx	lr
    28a0:	4001c030 	.word	0x4001c030

000028a4 <am_hal_uart_disable>:
am_hal_uart_disable(uint32_t ui32Module)
{
    //
    // Disable the UART.
    //
    AM_REGn(UART, 0, CR) &= ~(AM_REG_UART_CR_UARTEN_M  |
    28a4:	4a03      	ldr	r2, [pc, #12]	; (28b4 <am_hal_uart_disable+0x10>)
    28a6:	6813      	ldr	r3, [r2, #0]
    28a8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
    28ac:	f020 0101 	bic.w	r1, r0, #1
    28b0:	6011      	str	r1, [r2, #0]
    28b2:	4770      	bx	lr
    28b4:	4001c030 	.word	0x4001c030

000028b8 <am_hal_uart_clock_enable>:
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    //
    // Enable the UART clock in the MCUCTRL module.
    //
    AM_REGn(CLKGEN, 0, UARTEN) |= AM_REG_CLKGEN_UARTEN_UARTEN_M;
    28b8:	4907      	ldr	r1, [pc, #28]	; (28d8 <am_hal_uart_clock_enable+0x20>)

    //
    // Enable the UART clock.
    //
    AM_REGn(UART, 0, CR) |= AM_REG_UART_CR_CLKEN_M;
    28ba:	4b08      	ldr	r3, [pc, #32]	; (28dc <am_hal_uart_clock_enable+0x24>)
    AM_REGn(CLKGEN, 0, UARTEN) |= AM_REG_CLKGEN_UARTEN_UARTEN_M;
    28bc:	680a      	ldr	r2, [r1, #0]
    28be:	f042 0001 	orr.w	r0, r2, #1
    28c2:	6008      	str	r0, [r1, #0]
    AM_REGn(UART, 0, CR) |= AM_REG_UART_CR_CLKEN_M;
    28c4:	6819      	ldr	r1, [r3, #0]
    28c6:	f041 0208 	orr.w	r2, r1, #8
    28ca:	601a      	str	r2, [r3, #0]

    //
    // Select default UART clock source
    //
    AM_REGn(UART, 0, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    28cc:	6818      	ldr	r0, [r3, #0]
    28ce:	f040 0110 	orr.w	r1, r0, #16
    28d2:	6019      	str	r1, [r3, #0]
    28d4:	4770      	bx	lr
    28d6:	bf00      	nop
    28d8:	4000402c 	.word	0x4000402c
    28dc:	4001c030 	.word	0x4001c030

000028e0 <am_hal_uart_fifo_config>:
am_hal_uart_fifo_config(uint32_t ui32Module, uint32_t ui32LvlCfg)
{
    //
    // Enable the use of FIFOs.
    //
    AM_REGn(UART, 0, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    28e0:	4a03      	ldr	r2, [pc, #12]	; (28f0 <am_hal_uart_fifo_config+0x10>)

    //
    // Write the FIFO level register.
    //
    AM_REGn(UART, 0, IFLS) = ui32LvlCfg;
    28e2:	4804      	ldr	r0, [pc, #16]	; (28f4 <am_hal_uart_fifo_config+0x14>)
    AM_REGn(UART, 0, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    28e4:	6813      	ldr	r3, [r2, #0]
    28e6:	f043 0310 	orr.w	r3, r3, #16
    28ea:	6013      	str	r3, [r2, #0]
    AM_REGn(UART, 0, IFLS) = ui32LvlCfg;
    28ec:	6001      	str	r1, [r0, #0]
    28ee:	4770      	bx	lr
    28f0:	4001c02c 	.word	0x4001c02c
    28f4:	4001c034 	.word	0x4001c034

000028f8 <am_hal_uart_string_transmit_polled>:
//
//*****************************************************************************
void
am_hal_uart_string_transmit_polled(uint32_t ui32Module, char *pcString)
{
    while ( *pcString )
    28f8:	7808      	ldrb	r0, [r1, #0]
    28fa:	b160      	cbz	r0, 2916 <am_hal_uart_string_transmit_polled+0x1e>
{
    28fc:	b410      	push	{r4}
    {
        //
        // Wait for space, i.e.  TX FIFO EMPTY.
        //
        while ( AM_BFRn(UART, 0, FR, TXFF) );
    28fe:	4a06      	ldr	r2, [pc, #24]	; (2918 <am_hal_uart_string_transmit_polled+0x20>)

        //
        // Write the char.
        //
        AM_REGn(UART, 0, DR) = *pcString++;
    2900:	4c06      	ldr	r4, [pc, #24]	; (291c <am_hal_uart_string_transmit_polled+0x24>)
        while ( AM_BFRn(UART, 0, FR, TXFF) );
    2902:	6813      	ldr	r3, [r2, #0]
    2904:	069b      	lsls	r3, r3, #26
    2906:	d4fc      	bmi.n	2902 <am_hal_uart_string_transmit_polled+0xa>
        AM_REGn(UART, 0, DR) = *pcString++;
    2908:	6020      	str	r0, [r4, #0]
    while ( *pcString )
    290a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    290e:	2800      	cmp	r0, #0
    2910:	d1f7      	bne.n	2902 <am_hal_uart_string_transmit_polled+0xa>
    }
}
    2912:	f85d 4b04 	ldr.w	r4, [sp], #4
    2916:	4770      	bx	lr
    2918:	4001c018 	.word	0x4001c018
    291c:	4001c000 	.word	0x4001c000

00002920 <am_hal_uart_init_buffered>:
//*****************************************************************************
void
am_hal_uart_init_buffered(uint32_t ui32Module,
                          uint8_t *pui8RxArray, uint32_t ui32RxSize,
                          uint8_t *pui8TxArray, uint32_t ui32TxSize)
{
    2920:	b4f0      	push	{r4, r5, r6, r7}
    2922:	9c04      	ldr	r4, [sp, #16]
    if ( (pui8RxArray != NULL)  &&  (ui32RxSize > 0) )
    2924:	b101      	cbz	r1, 2928 <am_hal_uart_init_buffered+0x8>
    2926:	b97a      	cbnz	r2, 2948 <am_hal_uart_init_buffered+0x28>
        // Initialize the RX ring buffer.
        //
        ring_buffer_init(&g_sRxBuffer, pui8RxArray, ui32RxSize);
    }

    if ( (pui8TxArray != NULL)  &&  (ui32TxSize > 0) )
    2928:	b163      	cbz	r3, 2944 <am_hal_uart_init_buffered+0x24>
    292a:	b15c      	cbz	r4, 2944 <am_hal_uart_init_buffered+0x24>
    {
        //
        // Enable the UART TX timeout interrupt.
        //
        AM_REGn(UART, ui32Module, IER) |= (AM_REG_UART_IES_TXRIS_M);
    292c:	4f0d      	ldr	r7, [pc, #52]	; (2964 <am_hal_uart_init_buffered+0x44>)
    psBuffer->ui32WriteIndex = 0;
    292e:	4a0e      	ldr	r2, [pc, #56]	; (2968 <am_hal_uart_init_buffered+0x48>)
        AM_REGn(UART, ui32Module, IER) |= (AM_REG_UART_IES_TXRIS_M);
    2930:	6838      	ldr	r0, [r7, #0]
    psBuffer->ui32WriteIndex = 0;
    2932:	2100      	movs	r1, #0
        AM_REGn(UART, ui32Module, IER) |= (AM_REG_UART_IES_TXRIS_M);
    2934:	f040 0620 	orr.w	r6, r0, #32
    2938:	603e      	str	r6, [r7, #0]
    psBuffer->ui32WriteIndex = 0;
    293a:	6051      	str	r1, [r2, #4]
    psBuffer->pui8Data = (uint8_t *)pvArray;
    293c:	6013      	str	r3, [r2, #0]
    psBuffer->ui32ReadIndex = 0;
    293e:	6091      	str	r1, [r2, #8]
    psBuffer->ui32Length = 0;
    2940:	60d1      	str	r1, [r2, #12]
    psBuffer->ui32Capacity = ui32Bytes;
    2942:	6114      	str	r4, [r2, #16]
        //
        // Initialize the TX ring buffer.
        //
        ring_buffer_init(&g_sTxBuffer, pui8TxArray, ui32TxSize);
    }
}
    2944:	bcf0      	pop	{r4, r5, r6, r7}
    2946:	4770      	bx	lr
        AM_REGn(UART, ui32Module, IER) |= (AM_REG_UART_IES_RTRIS_M);
    2948:	4f06      	ldr	r7, [pc, #24]	; (2964 <am_hal_uart_init_buffered+0x44>)
    psBuffer->ui32WriteIndex = 0;
    294a:	4808      	ldr	r0, [pc, #32]	; (296c <am_hal_uart_init_buffered+0x4c>)
        AM_REGn(UART, ui32Module, IER) |= (AM_REG_UART_IES_RTRIS_M);
    294c:	683e      	ldr	r6, [r7, #0]
    psBuffer->ui32WriteIndex = 0;
    294e:	2500      	movs	r5, #0
        AM_REGn(UART, ui32Module, IER) |= (AM_REG_UART_IES_RTRIS_M);
    2950:	f046 0640 	orr.w	r6, r6, #64	; 0x40
    2954:	603e      	str	r6, [r7, #0]
    psBuffer->ui32WriteIndex = 0;
    2956:	6045      	str	r5, [r0, #4]
    psBuffer->pui8Data = (uint8_t *)pvArray;
    2958:	6001      	str	r1, [r0, #0]
    psBuffer->ui32ReadIndex = 0;
    295a:	6085      	str	r5, [r0, #8]
    psBuffer->ui32Length = 0;
    295c:	60c5      	str	r5, [r0, #12]
    psBuffer->ui32Capacity = ui32Bytes;
    295e:	6102      	str	r2, [r0, #16]
    2960:	e7e2      	b.n	2928 <am_hal_uart_init_buffered+0x8>
    2962:	bf00      	nop
    2964:	4001c038 	.word	0x4001c038
    2968:	10000ac4 	.word	0x10000ac4
    296c:	10000ad8 	.word	0x10000ad8

00002970 <am_hal_uart_service_buffered>:

    //
    // Check to see if we have filled the Rx FIFO past the configured limit, or
    // if we have an 'old' character or two sitting in the FIFO.
    //
    if ( ui32Status & (AM_REG_UART_IES_RXRIS_M | AM_REG_UART_IES_RTRIS_M) )
    2970:	f011 0250 	ands.w	r2, r1, #80	; 0x50
{
    2974:	b4f0      	push	{r4, r5, r6, r7}
    if ( ui32Status & (AM_REG_UART_IES_RXRIS_M | AM_REG_UART_IES_RTRIS_M) )
    2976:	d00d      	beq.n	2994 <am_hal_uart_service_buffered+0x24>
    2978:	2200      	movs	r2, #0
    {
        //
        // While there's stuff in the RX fifo....
        //
        while ( !AM_BFRn(UART, 0, FR, RXFE) )
    297a:	4d21      	ldr	r5, [pc, #132]	; (2a00 <am_hal_uart_service_buffered+0x90>)
        {
            //
            // Read each character out one by one, and add it to the ring
            // buffer. This will start losing bytes if the fifo ever overflows.
            //
            ui8Character = AM_REGn(UART, 0 , DR);
    297c:	4e21      	ldr	r6, [pc, #132]	; (2a04 <am_hal_uart_service_buffered+0x94>)
    uint32_t u32RetVal = psBuffer->ui32Capacity;
    297e:	4b22      	ldr	r3, [pc, #136]	; (2a08 <am_hal_uart_service_buffered+0x98>)
    2980:	e005      	b.n	298e <am_hal_uart_service_buffered+0x1e>
            ui8Character = AM_REGn(UART, 0 , DR);
    2982:	6837      	ldr	r7, [r6, #0]
    uint32_t u32RetVal = psBuffer->ui32Capacity;
    2984:	691c      	ldr	r4, [r3, #16]
    u32RetVal -= psBuffer->ui32Length;
    2986:	68d8      	ldr	r0, [r3, #12]
    if ( am_hal_uart_ring_buffer_space_left(psBuffer) >= ui32Bytes )
    2988:	4284      	cmp	r4, r0
            ui8Character = AM_REGn(UART, 0 , DR);
    298a:	b2fa      	uxtb	r2, r7
    if ( am_hal_uart_ring_buffer_space_left(psBuffer) >= ui32Bytes )
    298c:	d129      	bne.n	29e2 <am_hal_uart_service_buffered+0x72>
        while ( !AM_BFRn(UART, 0, FR, RXFE) )
    298e:	6828      	ldr	r0, [r5, #0]
    2990:	06c7      	lsls	r7, r0, #27
    2992:	d5f6      	bpl.n	2982 <am_hal_uart_service_buffered+0x12>

    //
    // Check to see if our TX buffer has been recently emptied. If so, we
    // should refill it from the TX ring buffer.
    //
    if ( ui32Status & AM_REG_UART_IES_TXRIS_M )
    2994:	068c      	lsls	r4, r1, #26
    2996:	d522      	bpl.n	29de <am_hal_uart_service_buffered+0x6e>
    {
        //
        // Keep refilling until the fifo is full, or the ring buffer is empty,
        // whichever happens first.
        //
        while ( am_hal_uart_ring_buffer_data_left(&g_sTxBuffer) &&
    2998:	4b1c      	ldr	r3, [pc, #112]	; (2a0c <am_hal_uart_service_buffered+0x9c>)
    299a:	68d9      	ldr	r1, [r3, #12]
    299c:	b1f9      	cbz	r1, 29de <am_hal_uart_service_buffered+0x6e>
                !AM_BFRn(UART, 0, FR, TXFF) )
    299e:	4e18      	ldr	r6, [pc, #96]	; (2a00 <am_hal_uart_service_buffered+0x90>)
    29a0:	6834      	ldr	r4, [r6, #0]
        while ( am_hal_uart_ring_buffer_data_left(&g_sTxBuffer) &&
    29a2:	06a0      	lsls	r0, r4, #26
    29a4:	d41b      	bmi.n	29de <am_hal_uart_service_buffered+0x6e>
            pui8Dest[i] = psBuffer->pui8Data[psBuffer->ui32ReadIndex];
    29a6:	681d      	ldr	r5, [r3, #0]
        {
            ring_buffer_read(&g_sTxBuffer, &ui8Character, 1);
            AM_REGn(UART, 0 , DR) = ui8Character;
    29a8:	4f16      	ldr	r7, [pc, #88]	; (2a04 <am_hal_uart_service_buffered+0x94>)
    29aa:	e002      	b.n	29b2 <am_hal_uart_service_buffered+0x42>
                !AM_BFRn(UART, 0, FR, TXFF) )
    29ac:	6831      	ldr	r1, [r6, #0]
        while ( am_hal_uart_ring_buffer_data_left(&g_sTxBuffer) &&
    29ae:	0689      	lsls	r1, r1, #26
    29b0:	d415      	bmi.n	29de <am_hal_uart_service_buffered+0x6e>
    if ( am_hal_uart_ring_buffer_data_left(psBuffer) >= ui32Bytes )
    29b2:	68d8      	ldr	r0, [r3, #12]
    29b4:	b178      	cbz	r0, 29d6 <am_hal_uart_service_buffered+0x66>
            pui8Dest[i] = psBuffer->pui8Data[psBuffer->ui32ReadIndex];
    29b6:	689a      	ldr	r2, [r3, #8]
    29b8:	f815 c002 	ldrb.w	ip, [r5, r2]
            ui32RdIdx = psBuffer->ui32ReadIndex + 1;
    29bc:	6899      	ldr	r1, [r3, #8]
            ui32Cap   = psBuffer->ui32Capacity;
    29be:	691c      	ldr	r4, [r3, #16]
            ui32RdIdx = psBuffer->ui32ReadIndex + 1;
    29c0:	3101      	adds	r1, #1
            psBuffer->ui32ReadIndex = ui32RdIdx % ui32Cap;
    29c2:	fbb1 f0f4 	udiv	r0, r1, r4
    29c6:	fb04 1210 	mls	r2, r4, r0, r1
    29ca:	609a      	str	r2, [r3, #8]
        psBuffer->ui32Length--;
    29cc:	68d9      	ldr	r1, [r3, #12]
    29ce:	1e4c      	subs	r4, r1, #1
            pui8Dest[i] = psBuffer->pui8Data[psBuffer->ui32ReadIndex];
    29d0:	fa5f f28c 	uxtb.w	r2, ip
        psBuffer->ui32Length--;
    29d4:	60dc      	str	r4, [r3, #12]
            AM_REGn(UART, 0 , DR) = ui8Character;
    29d6:	603a      	str	r2, [r7, #0]
        while ( am_hal_uart_ring_buffer_data_left(&g_sTxBuffer) &&
    29d8:	68d8      	ldr	r0, [r3, #12]
    29da:	2800      	cmp	r0, #0
    29dc:	d1e6      	bne.n	29ac <am_hal_uart_service_buffered+0x3c>
        }
    }
}
    29de:	bcf0      	pop	{r4, r5, r6, r7}
    29e0:	4770      	bx	lr
            psBuffer->pui8Data[psBuffer->ui32WriteIndex] = pui8Source[i];
    29e2:	685f      	ldr	r7, [r3, #4]
    29e4:	681c      	ldr	r4, [r3, #0]
    29e6:	55e2      	strb	r2, [r4, r7]
            ui32WrIdx = psBuffer->ui32WriteIndex + 1;
    29e8:	6858      	ldr	r0, [r3, #4]
            ui32Cap   = psBuffer->ui32Capacity;
    29ea:	691f      	ldr	r7, [r3, #16]
            ui32WrIdx = psBuffer->ui32WriteIndex + 1;
    29ec:	3001      	adds	r0, #1
            psBuffer->ui32WriteIndex = ui32WrIdx % ui32Cap;
    29ee:	fbb0 fcf7 	udiv	ip, r0, r7
    29f2:	fb07 041c 	mls	r4, r7, ip, r0
    29f6:	605c      	str	r4, [r3, #4]
        psBuffer->ui32Length += ui32Bytes;
    29f8:	68d8      	ldr	r0, [r3, #12]
    29fa:	3001      	adds	r0, #1
    29fc:	60d8      	str	r0, [r3, #12]
    29fe:	e7c6      	b.n	298e <am_hal_uart_service_buffered+0x1e>
    2a00:	4001c018 	.word	0x4001c018
    2a04:	4001c000 	.word	0x4001c000
    2a08:	10000ad8 	.word	0x10000ad8
    2a0c:	10000ac4 	.word	0x10000ac4

00002a10 <am_hal_uart_char_transmit_buffered>:
am_hal_uart_char_transmit_buffered(uint32_t ui32Module, char cChar)
{
    //
    // Check the status of the Tx fifo and the Tx ring buffer.
    //
    if ( am_hal_uart_ring_buffer_empty(&g_sTxBuffer) &&
    2a10:	4b0e      	ldr	r3, [pc, #56]	; (2a4c <am_hal_uart_char_transmit_buffered+0x3c>)
    2a12:	68da      	ldr	r2, [r3, #12]
    2a14:	b91a      	cbnz	r2, 2a1e <am_hal_uart_char_transmit_buffered+0xe>
         !AM_BFRn(UART, 0, FR, TXFF) )
    2a16:	480e      	ldr	r0, [pc, #56]	; (2a50 <am_hal_uart_char_transmit_buffered+0x40>)
    2a18:	6802      	ldr	r2, [r0, #0]
    if ( am_hal_uart_ring_buffer_empty(&g_sTxBuffer) &&
    2a1a:	0692      	lsls	r2, r2, #26
    2a1c:	d512      	bpl.n	2a44 <am_hal_uart_char_transmit_buffered+0x34>
    uint32_t u32RetVal = psBuffer->ui32Capacity;
    2a1e:	6918      	ldr	r0, [r3, #16]
    u32RetVal -= psBuffer->ui32Length;
    2a20:	68da      	ldr	r2, [r3, #12]
    if ( am_hal_uart_ring_buffer_space_left(psBuffer) >= ui32Bytes )
    2a22:	4290      	cmp	r0, r2
    2a24:	d00d      	beq.n	2a42 <am_hal_uart_char_transmit_buffered+0x32>
            psBuffer->pui8Data[psBuffer->ui32WriteIndex] = pui8Source[i];
    2a26:	685a      	ldr	r2, [r3, #4]
    2a28:	6818      	ldr	r0, [r3, #0]
    2a2a:	5481      	strb	r1, [r0, r2]
            ui32WrIdx = psBuffer->ui32WriteIndex + 1;
    2a2c:	685a      	ldr	r2, [r3, #4]
            ui32Cap   = psBuffer->ui32Capacity;
    2a2e:	6918      	ldr	r0, [r3, #16]
            ui32WrIdx = psBuffer->ui32WriteIndex + 1;
    2a30:	3201      	adds	r2, #1
            psBuffer->ui32WriteIndex = ui32WrIdx % ui32Cap;
    2a32:	fbb2 f1f0 	udiv	r1, r2, r0
    2a36:	fb00 2211 	mls	r2, r0, r1, r2
    2a3a:	605a      	str	r2, [r3, #4]
        psBuffer->ui32Length += ui32Bytes;
    2a3c:	68d8      	ldr	r0, [r3, #12]
    2a3e:	3001      	adds	r0, #1
    2a40:	60d8      	str	r0, [r3, #12]
    2a42:	4770      	bx	lr
    {
        //
        // If the fifo isn't full yet, and the ring buffer isn't being used,
        // just write the new character directly to the fifo.
        //
        AM_REGn(UART, 0, DR) = cChar;
    2a44:	4b03      	ldr	r3, [pc, #12]	; (2a54 <am_hal_uart_char_transmit_buffered+0x44>)
    2a46:	6019      	str	r1, [r3, #0]
    2a48:	4770      	bx	lr
    2a4a:	bf00      	nop
    2a4c:	10000ac4 	.word	0x10000ac4
    2a50:	4001c018 	.word	0x4001c018
    2a54:	4001c000 	.word	0x4001c000

00002a58 <am_hal_uart_char_receive_buffered>:

    //
    // Loop until ui32MaxChars or until empty.
    //
    //DCB while (am_hal_uart_ring_buffer_data_left(&g_sRxBuffer) && ui32MaxChars-- )
    while ( am_hal_uart_ring_buffer_data_left(&g_sRxBuffer) && ui32MaxChars )
    2a58:	4b11      	ldr	r3, [pc, #68]	; (2aa0 <am_hal_uart_char_receive_buffered+0x48>)
    2a5a:	68d8      	ldr	r0, [r3, #12]
    2a5c:	b1e0      	cbz	r0, 2a98 <am_hal_uart_char_receive_buffered+0x40>
    2a5e:	b1e2      	cbz	r2, 2a9a <am_hal_uart_char_receive_buffered+0x42>
{
    2a60:	b470      	push	{r4, r5, r6}
    while ( am_hal_uart_ring_buffer_data_left(&g_sRxBuffer) && ui32MaxChars )
    2a62:	2000      	movs	r0, #0
    2a64:	e001      	b.n	2a6a <am_hal_uart_char_receive_buffered+0x12>
    2a66:	4282      	cmp	r2, r0
    2a68:	d015      	beq.n	2a96 <am_hal_uart_char_receive_buffered+0x3e>
    if ( am_hal_uart_ring_buffer_data_left(psBuffer) >= ui32Bytes )
    2a6a:	68dc      	ldr	r4, [r3, #12]
    2a6c:	b174      	cbz	r4, 2a8c <am_hal_uart_char_receive_buffered+0x34>
            pui8Dest[i] = psBuffer->pui8Data[psBuffer->ui32ReadIndex];
    2a6e:	689e      	ldr	r6, [r3, #8]
    2a70:	681d      	ldr	r5, [r3, #0]
    2a72:	5dac      	ldrb	r4, [r5, r6]
    2a74:	700c      	strb	r4, [r1, #0]
            ui32RdIdx = psBuffer->ui32ReadIndex + 1;
    2a76:	689c      	ldr	r4, [r3, #8]
            ui32Cap   = psBuffer->ui32Capacity;
    2a78:	691e      	ldr	r6, [r3, #16]
            ui32RdIdx = psBuffer->ui32ReadIndex + 1;
    2a7a:	3401      	adds	r4, #1
            psBuffer->ui32ReadIndex = ui32RdIdx % ui32Cap;
    2a7c:	fbb4 fcf6 	udiv	ip, r4, r6
    2a80:	fb06 451c 	mls	r5, r6, ip, r4
    2a84:	609d      	str	r5, [r3, #8]
        psBuffer->ui32Length--;
    2a86:	68dc      	ldr	r4, [r3, #12]
    2a88:	1e66      	subs	r6, r4, #1
    2a8a:	60de      	str	r6, [r3, #12]
    while ( am_hal_uart_ring_buffer_data_left(&g_sRxBuffer) && ui32MaxChars )
    2a8c:	68dd      	ldr	r5, [r3, #12]
        // Subtract from ui32MaxChars.
        // Add to ui32NumChars.
        // Move pointer in buffer.
        //
        ui32MaxChars--;
        ui32NumChars++;
    2a8e:	3001      	adds	r0, #1
        pcString++;
    2a90:	3101      	adds	r1, #1
    while ( am_hal_uart_ring_buffer_data_left(&g_sRxBuffer) && ui32MaxChars )
    2a92:	2d00      	cmp	r5, #0
    2a94:	d1e7      	bne.n	2a66 <am_hal_uart_char_receive_buffered+0xe>

    //
    // return the number of chars received.
    //
    return ui32NumChars;
}
    2a96:	bc70      	pop	{r4, r5, r6}
    2a98:	4770      	bx	lr
    uint32_t ui32NumChars = 0;
    2a9a:	4610      	mov	r0, r2
    return ui32NumChars;
    2a9c:	4770      	bx	lr
    2a9e:	bf00      	nop
    2aa0:	10000ad8 	.word	0x10000ad8

00002aa4 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    2aa4:	4b01      	ldr	r3, [pc, #4]	; (2aac <am_hal_vcomp_disable+0x8>)
    2aa6:	2237      	movs	r2, #55	; 0x37
    2aa8:	601a      	str	r2, [r3, #0]
    2aaa:	4770      	bx	lr
    2aac:	4000c008 	.word	0x4000c008

00002ab0 <memcpy>:
    2ab0:	b510      	push	{r4, lr}
    2ab2:	1e43      	subs	r3, r0, #1
    2ab4:	440a      	add	r2, r1
    2ab6:	4291      	cmp	r1, r2
    2ab8:	d100      	bne.n	2abc <memcpy+0xc>
    2aba:	bd10      	pop	{r4, pc}
    2abc:	f811 4b01 	ldrb.w	r4, [r1], #1
    2ac0:	f803 4f01 	strb.w	r4, [r3, #1]!
    2ac4:	e7f7      	b.n	2ab6 <memcpy+0x6>
	...

00002ac8 <g_sEm9304IOMConfigSPI>:
    2ac8:	0001 0000 0900 0000 0000 1414               ............

00002ad4 <g_sEm9304>:
	...
    2adc:	002a 0000 002c 0000                         *...,...

00002ae4 <CSWTCH.4>:
    2ae4:	3600 016e 1b00 00b7 1200 007a 8d80 005b     .6n.......z...[.
    2af4:	3e00 0049 0900 003d 50db 0034 c6c0 002d     .>I...=..P4...-.
    2b04:	4f49 204d 7277 7469 2065 6874 6572 6873     IOM write thresh
    2b14:	6c6f 2064 6f74 206f 6962 2e67 0000 0000     old too big.....
    2b24:	4f49 204d 6572 6461 7420 7268 7365 6f68     IOM read thresho
    2b34:	646c 7420 6f6f 6220 6769 002e 4f49 204d     ld too big..IOM 
    2b44:	7277 7469 2065 6874 6572 6873 6c6f 2064     write threshold 
    2b54:	6f74 206f 6d73 6c61 2e6c 0000 4f49 204d     too small...IOM 
    2b64:	6572 6461 7420 7268 7365 6f68 646c 7420     read threshold t
    2b74:	6f6f 7320 616d 6c6c 002e 0000 7254 6979     oo small....Tryi
    2b84:	676e 7420 206f 6f64 6120 3020 6220 7479     ng to do a 0 byt
    2b94:	2065 7274 6e61 6173 7463 6f69 006e 0000     e transaction...
    2ba4:	2e2e 2e5c 5c2e 6d61 685f 6c61 695f 6d6f     ..\..\am_hal_iom
    2bb4:	632e 0000 3249 2043 7274 6e61 6673 7265     .c..I2C transfer
    2bc4:	7420 6f6f 6220 6769 002e 0000 6854 2065      too big....The 
    2bd4:	6966 6f66 6420 656f 6e73 7427 6320 6e6f     fifo doesn't con
    2be4:	6174 6e69 7420 6568 7220 7165 6575 7473     tain the request
    2bf4:	6465 6e20 6d75 6562 2072 666f 6220 7479     ed number of byt
    2c04:	7365 002e 4f49 204d 4d43 4344 504d 7720     es..IOM CMDCMP w
    2c14:	7361 6e20 746f 7320 6565 006e 6854 2065     as not seen.The 
    2c24:	4f49 204d 7571 7565 2065 7369 6620 6c75     IOM queue is ful
    2c34:	2e6c 4120 6c6c 636f 7461 2065 6f6d 6572     l. Allocate more
    2c44:	656d 6f6d 7972 7420 206f 6874 2065 4f49     memory to the IO
    2c54:	204d 7571 7565 2c65 6f20 2072 6c61 6f6c     M queue, or allo
    2c64:	2077 7469 6d20 726f 7465 6d69 2065 6f74     w it moretime to
    2c74:	6520 706d 7974 6220 7465 6577 6e65 7420      empty between t
    2c84:	6172 736e 6361 6974 6e6f 2e73 0000 0000     ransactions.....
    2c94:	5053 2049 7274 6e61 6673 7265 7420 6f6f     SPI transfer too
    2ca4:	6220 6769 002e 0000 6854 2065 6966 6f66      big....The fifo
    2cb4:	6320 756f 646c 276e 2074 6966 2074 6874      couldn't fit th
    2cc4:	2065 6572 7571 7365 6574 2064 756e 626d     e requested numb
    2cd4:	7265 6f20 2066 7962 6574 0073 7254 6979     er of bytes.Tryi
    2ce4:	676e 7420 206f 7375 2065 6e61 4920 4d4f     ng to use an IOM
    2cf4:	6d20 646f 6c75 2065 6874 7461 6420 656f      module that doe
    2d04:	6e73 7427 6520 6978 7473 002e               sn't exist..
