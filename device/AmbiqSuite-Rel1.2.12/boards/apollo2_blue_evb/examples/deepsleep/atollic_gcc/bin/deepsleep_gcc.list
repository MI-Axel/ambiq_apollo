
deepsleep_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001dd0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000014  10001000  00001dd0  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000110  10001014  00001de4  00021014  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021014  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000b1ed  00000000  00000000  0002104b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000024c9  00000000  00000000  0002c238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000007f0  00000000  00000000  0002e701  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001210  00000000  00000000  0002eef1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000472c  00000000  00000000  00030101  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002e69  00000000  00000000  0003482d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  00037696  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001680  00000000  00000000  00037714  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003cd4  00000000  00000000  00038d94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 89 03 00 00 f1 03 00 00 31 04 00 00     ............1...
      10:	31 04 00 00 31 04 00 00 31 04 00 00 00 00 00 00     1...1...1.......
	...
      2c:	f7 03 00 00 f7 03 00 00 00 00 00 00 f7 03 00 00     ................
      3c:	f7 03 00 00 f7 03 00 00 f7 03 00 00 f7 03 00 00     ................
      4c:	f7 03 00 00 f7 03 00 00 f7 03 00 00 f7 03 00 00     ................
      5c:	f7 03 00 00 f7 03 00 00 f7 03 00 00 f7 03 00 00     ................
      6c:	f7 03 00 00 f7 03 00 00 f7 03 00 00 f7 03 00 00     ................
      7c:	f7 03 00 00 f7 03 00 00 f7 03 00 00 f7 03 00 00     ................
      8c:	f7 03 00 00 f7 03 00 00 f7 03 00 00 f7 03 00 00     ................
      9c:	f7 03 00 00 f7 03 00 00 f7 03 00 00 f7 03 00 00     ................
      ac:	f7 03 00 00 f7 03 00 00 f7 03 00 00 f7 03 00 00     ................
      bc:	f7 03 00 00                                         ....

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <uart_init>:
// Initialize the UART
//
//*****************************************************************************
void
uart_init(uint32_t ui32UartModule)
{
     160:	b580      	push	{r7, lr}
     162:	b084      	sub	sp, #16
     164:	af00      	add	r7, sp, #0
     166:	6078      	str	r0, [r7, #4]
    //
    // Make sure the UART RX and TX pins are enabled.
    //
    am_bsp_pin_enable(COM_UART_TX);
     168:	f001 f996 	bl	1498 <am_hal_interrupt_master_disable>
     16c:	4603      	mov	r3, r0
     16e:	60fb      	str	r3, [r7, #12]
     170:	4b2a      	ldr	r3, [pc, #168]	; (21c <uart_init+0xbc>)
     172:	2273      	movs	r2, #115	; 0x73
     174:	601a      	str	r2, [r3, #0]
     176:	4a2a      	ldr	r2, [pc, #168]	; (220 <uart_init+0xc0>)
     178:	4b29      	ldr	r3, [pc, #164]	; (220 <uart_init+0xc0>)
     17a:	681b      	ldr	r3, [r3, #0]
     17c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     180:	6013      	str	r3, [r2, #0]
     182:	4a28      	ldr	r2, [pc, #160]	; (224 <uart_init+0xc4>)
     184:	4b27      	ldr	r3, [pc, #156]	; (224 <uart_init+0xc4>)
     186:	681b      	ldr	r3, [r3, #0]
     188:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     18c:	6013      	str	r3, [r2, #0]
     18e:	4a26      	ldr	r2, [pc, #152]	; (228 <uart_init+0xc8>)
     190:	4b25      	ldr	r3, [pc, #148]	; (228 <uart_init+0xc8>)
     192:	681b      	ldr	r3, [r3, #0]
     194:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     198:	6013      	str	r3, [r2, #0]
     19a:	4b20      	ldr	r3, [pc, #128]	; (21c <uart_init+0xbc>)
     19c:	2200      	movs	r2, #0
     19e:	601a      	str	r2, [r3, #0]
     1a0:	68fb      	ldr	r3, [r7, #12]
     1a2:	4618      	mov	r0, r3
     1a4:	f001 f97c 	bl	14a0 <am_hal_interrupt_master_set>
    am_bsp_pin_enable(COM_UART_RX);
     1a8:	f001 f976 	bl	1498 <am_hal_interrupt_master_disable>
     1ac:	4603      	mov	r3, r0
     1ae:	60bb      	str	r3, [r7, #8]
     1b0:	4b1a      	ldr	r3, [pc, #104]	; (21c <uart_init+0xbc>)
     1b2:	2273      	movs	r2, #115	; 0x73
     1b4:	601a      	str	r2, [r3, #0]
     1b6:	4a1a      	ldr	r2, [pc, #104]	; (220 <uart_init+0xc0>)
     1b8:	4b19      	ldr	r3, [pc, #100]	; (220 <uart_init+0xc0>)
     1ba:	681b      	ldr	r3, [r3, #0]
     1bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     1c0:	6013      	str	r3, [r2, #0]
     1c2:	4a1a      	ldr	r2, [pc, #104]	; (22c <uart_init+0xcc>)
     1c4:	4b19      	ldr	r3, [pc, #100]	; (22c <uart_init+0xcc>)
     1c6:	681b      	ldr	r3, [r3, #0]
     1c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     1cc:	f443 5348 	orr.w	r3, r3, #12800	; 0x3200
     1d0:	6013      	str	r3, [r2, #0]
     1d2:	4a17      	ldr	r2, [pc, #92]	; (230 <uart_init+0xd0>)
     1d4:	4b16      	ldr	r3, [pc, #88]	; (230 <uart_init+0xd0>)
     1d6:	681b      	ldr	r3, [r3, #0]
     1d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     1dc:	6013      	str	r3, [r2, #0]
     1de:	4b0f      	ldr	r3, [pc, #60]	; (21c <uart_init+0xbc>)
     1e0:	2200      	movs	r2, #0
     1e2:	601a      	str	r2, [r3, #0]
     1e4:	68bb      	ldr	r3, [r7, #8]
     1e6:	4618      	mov	r0, r3
     1e8:	f001 f95a 	bl	14a0 <am_hal_interrupt_master_set>

    //
    // Power on the selected UART
    //
    am_hal_uart_pwrctrl_enable(ui32UartModule);
     1ec:	6878      	ldr	r0, [r7, #4]
     1ee:	f001 fc59 	bl	1aa4 <am_hal_uart_pwrctrl_enable>

    //
    // Start the UART interface, apply the desired configuration settings, and
    // enable the FIFOs.
    //
    am_hal_uart_clock_enable(ui32UartModule);
     1f2:	6878      	ldr	r0, [r7, #4]
     1f4:	f001 fc7e 	bl	1af4 <am_hal_uart_clock_enable>

    //
    // Disable the UART before configuring it.
    //
    am_hal_uart_disable(ui32UartModule);
     1f8:	6878      	ldr	r0, [r7, #4]
     1fa:	f001 fc3d 	bl	1a78 <am_hal_uart_disable>

    //
    // Configure the UART.
    //
    am_hal_uart_config(ui32UartModule, &g_sUartConfig);
     1fe:	490d      	ldr	r1, [pc, #52]	; (234 <uart_init+0xd4>)
     200:	6878      	ldr	r0, [r7, #4]
     202:	f001 fbed 	bl	19e0 <am_hal_uart_config>

    //
    // Enable the UART FIFO.
    //
    am_hal_uart_fifo_config(ui32UartModule, AM_HAL_UART_TX_FIFO_1_2 | AM_HAL_UART_RX_FIFO_1_2);
     206:	2112      	movs	r1, #18
     208:	6878      	ldr	r0, [r7, #4]
     20a:	f001 fc91 	bl	1b30 <am_hal_uart_fifo_config>

    //
    // Enable the UART.
    //
    am_hal_uart_enable(ui32UartModule);
     20e:	6878      	ldr	r0, [r7, #4]
     210:	f001 fc1c 	bl	1a4c <am_hal_uart_enable>
}
     214:	bf00      	nop
     216:	3710      	adds	r7, #16
     218:	46bd      	mov	sp, r7
     21a:	bd80      	pop	{r7, pc}
     21c:	40010060 	.word	0x40010060
     220:	40010048 	.word	0x40010048
     224:	40010014 	.word	0x40010014
     228:	400100f4 	.word	0x400100f4
     22c:	40010010 	.word	0x40010010
     230:	400100f0 	.word	0x400100f0
     234:	10001000 	.word	0x10001000

00000238 <uart_disable>:
// Disable the UART
//
//*****************************************************************************
void
uart_disable(uint32_t ui32UartModule)
{
     238:	b580      	push	{r7, lr}
     23a:	b084      	sub	sp, #16
     23c:	af00      	add	r7, sp, #0
     23e:	6078      	str	r0, [r7, #4]
    //
    // Before disabling the UART, wait a little time to be sure all
    // printing has completed.
    //
    am_util_delay_ms(10);
     240:	200a      	movs	r0, #10
     242:	f000 f8db 	bl	3fc <am_util_delay_ms>

    //
    // Disable and power down the UART.
    //
    am_hal_uart_disable(ui32UartModule);
     246:	6878      	ldr	r0, [r7, #4]
     248:	f001 fc16 	bl	1a78 <am_hal_uart_disable>
    am_hal_uart_pwrctrl_disable(ui32UartModule);
     24c:	6878      	ldr	r0, [r7, #4]
     24e:	f001 fc3d 	bl	1acc <am_hal_uart_pwrctrl_disable>

    //
    // Turn off UART clock.
    // Note - this is automatically handled in hardware on Apollo2.
    //
    am_hal_uart_clock_disable(ui32UartModule);
     252:	6878      	ldr	r0, [r7, #4]
     254:	f001 fc60 	bl	1b18 <am_hal_uart_clock_disable>

    //
    // Disable the UART pins.
    //
    am_bsp_pin_disable(COM_UART_TX);
     258:	f001 f91e 	bl	1498 <am_hal_interrupt_master_disable>
     25c:	4603      	mov	r3, r0
     25e:	60fb      	str	r3, [r7, #12]
     260:	4b21      	ldr	r3, [pc, #132]	; (2e8 <uart_disable+0xb0>)
     262:	2273      	movs	r2, #115	; 0x73
     264:	601a      	str	r2, [r3, #0]
     266:	4a21      	ldr	r2, [pc, #132]	; (2ec <uart_disable+0xb4>)
     268:	4b20      	ldr	r3, [pc, #128]	; (2ec <uart_disable+0xb4>)
     26a:	681b      	ldr	r3, [r3, #0]
     26c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     270:	6013      	str	r3, [r2, #0]
     272:	4a1f      	ldr	r2, [pc, #124]	; (2f0 <uart_disable+0xb8>)
     274:	4b1e      	ldr	r3, [pc, #120]	; (2f0 <uart_disable+0xb8>)
     276:	681b      	ldr	r3, [r3, #0]
     278:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     27c:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
     280:	6013      	str	r3, [r2, #0]
     282:	4a1c      	ldr	r2, [pc, #112]	; (2f4 <uart_disable+0xbc>)
     284:	4b1b      	ldr	r3, [pc, #108]	; (2f4 <uart_disable+0xbc>)
     286:	681b      	ldr	r3, [r3, #0]
     288:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     28c:	6013      	str	r3, [r2, #0]
     28e:	4b16      	ldr	r3, [pc, #88]	; (2e8 <uart_disable+0xb0>)
     290:	2200      	movs	r2, #0
     292:	601a      	str	r2, [r3, #0]
     294:	68fb      	ldr	r3, [r7, #12]
     296:	4618      	mov	r0, r3
     298:	f001 f902 	bl	14a0 <am_hal_interrupt_master_set>
    am_bsp_pin_disable(COM_UART_RX);
     29c:	f001 f8fc 	bl	1498 <am_hal_interrupt_master_disable>
     2a0:	4603      	mov	r3, r0
     2a2:	60bb      	str	r3, [r7, #8]
     2a4:	4b10      	ldr	r3, [pc, #64]	; (2e8 <uart_disable+0xb0>)
     2a6:	2273      	movs	r2, #115	; 0x73
     2a8:	601a      	str	r2, [r3, #0]
     2aa:	4a10      	ldr	r2, [pc, #64]	; (2ec <uart_disable+0xb4>)
     2ac:	4b0f      	ldr	r3, [pc, #60]	; (2ec <uart_disable+0xb4>)
     2ae:	681b      	ldr	r3, [r3, #0]
     2b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     2b4:	6013      	str	r3, [r2, #0]
     2b6:	4a10      	ldr	r2, [pc, #64]	; (2f8 <uart_disable+0xc0>)
     2b8:	4b0f      	ldr	r3, [pc, #60]	; (2f8 <uart_disable+0xc0>)
     2ba:	681b      	ldr	r3, [r3, #0]
     2bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     2c0:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
     2c4:	6013      	str	r3, [r2, #0]
     2c6:	4a0d      	ldr	r2, [pc, #52]	; (2fc <uart_disable+0xc4>)
     2c8:	4b0c      	ldr	r3, [pc, #48]	; (2fc <uart_disable+0xc4>)
     2ca:	681b      	ldr	r3, [r3, #0]
     2cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     2d0:	6013      	str	r3, [r2, #0]
     2d2:	4b05      	ldr	r3, [pc, #20]	; (2e8 <uart_disable+0xb0>)
     2d4:	2200      	movs	r2, #0
     2d6:	601a      	str	r2, [r3, #0]
     2d8:	68bb      	ldr	r3, [r7, #8]
     2da:	4618      	mov	r0, r3
     2dc:	f001 f8e0 	bl	14a0 <am_hal_interrupt_master_set>
}
     2e0:	bf00      	nop
     2e2:	3710      	adds	r7, #16
     2e4:	46bd      	mov	sp, r7
     2e6:	bd80      	pop	{r7, pc}
     2e8:	40010060 	.word	0x40010060
     2ec:	40010048 	.word	0x40010048
     2f0:	40010014 	.word	0x40010014
     2f4:	400100f4 	.word	0x400100f4
     2f8:	40010010 	.word	0x40010010
     2fc:	400100f0 	.word	0x400100f0

00000300 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     300:	b580      	push	{r7, lr}
     302:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     304:	2000      	movs	r0, #0
     306:	f001 f86b 	bl	13e0 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     30a:	4819      	ldr	r0, [pc, #100]	; (370 <main+0x70>)
     30c:	f000 ffd2 	bl	12b4 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     310:	f000 ffba 	bl	1288 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for UART output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t)am_bsp_uart_string_print);
     314:	4817      	ldr	r0, [pc, #92]	; (374 <main+0x74>)
     316:	f000 f90b 	bl	530 <am_util_stdio_printf_init>

    //
    // Initialize the UART
    //
    uart_init(AM_BSP_UART_PRINT_INST);
     31a:	2000      	movs	r0, #0
     31c:	f7ff ff20 	bl	160 <uart_init>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
     320:	f000 ffa8 	bl	1274 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Deepsleep Example\n");
     324:	4814      	ldr	r0, [pc, #80]	; (378 <main+0x78>)
     326:	f000 ff87 	bl	1238 <am_util_stdio_printf>

    //
    // To minimize power during the run, disable the UART.
    //
    uart_disable(AM_BSP_UART_PRINT_INST);
     32a:	2000      	movs	r0, #0
     32c:	f7ff ff84 	bl	238 <uart_disable>

    //
    // Configure the board for low power.
    //
    am_bsp_low_power_init();
     330:	f000 ffaa 	bl	1288 <am_bsp_low_power_init>

#ifdef AM_PART_APOLLO2
    //
    // Turn OFF Flash1
    //
    AM_BFW(PWRCTRL, MEMEN, FLASH1, 0);
     334:	4a11      	ldr	r2, [pc, #68]	; (37c <main+0x7c>)
     336:	4b11      	ldr	r3, [pc, #68]	; (37c <main+0x7c>)
     338:	681b      	ldr	r3, [r3, #0]
     33a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
     33e:	6013      	str	r3, [r2, #0]
    while (AM_BFR(PWRCTRL, PWRONSTATUS, PD_FLAM1) != 0) {}
     340:	bf00      	nop
     342:	4b0f      	ldr	r3, [pc, #60]	; (380 <main+0x80>)
     344:	681b      	ldr	r3, [r3, #0]
     346:	f003 0340 	and.w	r3, r3, #64	; 0x40
     34a:	2b00      	cmp	r3, #0
     34c:	d1f9      	bne.n	342 <main+0x42>

    //
    // Power down SRAM
    //
    AM_BFWe(PWRCTRL, SRAMPWDINSLEEP, SRAMSLEEPPOWERDOWN, ALLBUTLOWER8K);
     34e:	4a0d      	ldr	r2, [pc, #52]	; (384 <main+0x84>)
     350:	4b0c      	ldr	r3, [pc, #48]	; (384 <main+0x84>)
     352:	681b      	ldr	r3, [r3, #0]
     354:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
     358:	f023 0307 	bic.w	r3, r3, #7
     35c:	f443 63ff 	orr.w	r3, r3, #2040	; 0x7f8
     360:	f043 0306 	orr.w	r3, r3, #6
     364:	6013      	str	r3, [r2, #0]
    while (1)
    {
        //
        // Go to Deep Sleep and stay there.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     366:	2001      	movs	r0, #1
     368:	f001 fa9c 	bl	18a4 <am_hal_sysctrl_sleep>
     36c:	e7fb      	b.n	366 <main+0x66>
     36e:	bf00      	nop
     370:	00001cac 	.word	0x00001cac
     374:	000012ad 	.word	0x000012ad
     378:	00001c84 	.word	0x00001c84
     37c:	40021010 	.word	0x40021010
     380:	40021014 	.word	0x40021014
     384:	4002100c 	.word	0x4002100c

00000388 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     388:	4811      	ldr	r0, [pc, #68]	; (3d0 <zero_loop+0x12>)
     38a:	4912      	ldr	r1, [pc, #72]	; (3d4 <zero_loop+0x16>)
     38c:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     38e:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     392:	4811      	ldr	r0, [pc, #68]	; (3d8 <zero_loop+0x1a>)
     394:	6801      	ldr	r1, [r0, #0]
     396:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     39a:	6001      	str	r1, [r0, #0]
     39c:	f3bf 8f4f 	dsb	sy
     3a0:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     3a4:	480d      	ldr	r0, [pc, #52]	; (3dc <zero_loop+0x1e>)
     3a6:	490e      	ldr	r1, [pc, #56]	; (3e0 <zero_loop+0x22>)
     3a8:	4a0e      	ldr	r2, [pc, #56]	; (3e4 <zero_loop+0x26>)

000003aa <copy_loop>:
     3aa:	f850 3b04 	ldr.w	r3, [r0], #4
     3ae:	f841 3b04 	str.w	r3, [r1], #4
     3b2:	4291      	cmp	r1, r2
     3b4:	dbf9      	blt.n	3aa <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     3b6:	480c      	ldr	r0, [pc, #48]	; (3e8 <zero_loop+0x2a>)
     3b8:	490c      	ldr	r1, [pc, #48]	; (3ec <zero_loop+0x2e>)
     3ba:	f04f 0200 	mov.w	r2, #0

000003be <zero_loop>:
     3be:	4288      	cmp	r0, r1
     3c0:	bfb8      	it	lt
     3c2:	f840 2b04 	strlt.w	r2, [r0], #4
     3c6:	dbfa      	blt.n	3be <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     3c8:	f7ff ff9a 	bl	300 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     3cc:	be00      	bkpt	0x0000
}
     3ce:	bf00      	nop
     3d0:	e000ed08 	.word	0xe000ed08
     3d4:	00000000 	.word	0x00000000
     3d8:	e000ed88 	.word	0xe000ed88
     3dc:	00001dd0 	.word	0x00001dd0
     3e0:	10001000 	.word	0x10001000
     3e4:	10001014 	.word	0x10001014
     3e8:	10001014 	.word	0x10001014
     3ec:	10001124 	.word	0x10001124

000003f0 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     3f0:	b480      	push	{r7}
     3f2:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     3f4:	e7fe      	b.n	3f4 <am_nmi_isr+0x4>

000003f6 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     3f6:	b480      	push	{r7}
     3f8:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     3fa:	e7fe      	b.n	3fa <am_adc_isr+0x4>

000003fc <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
     3fc:	b580      	push	{r7, lr}
     3fe:	b084      	sub	sp, #16
     400:	af00      	add	r7, sp, #0
     402:	6078      	str	r0, [r7, #4]
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
     404:	f001 f804 	bl	1410 <am_hal_clkgen_sysclk_get>
     408:	60f8      	str	r0, [r7, #12]
#endif
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
     40a:	68fb      	ldr	r3, [r7, #12]
     40c:	4a07      	ldr	r2, [pc, #28]	; (42c <am_util_delay_ms+0x30>)
     40e:	fba2 2303 	umull	r2, r3, r2, r3
     412:	099b      	lsrs	r3, r3, #6
     414:	687a      	ldr	r2, [r7, #4]
     416:	fb02 f303 	mul.w	r3, r2, r3
     41a:	60bb      	str	r3, [r7, #8]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
     41c:	68b8      	ldr	r0, [r7, #8]
     41e:	f001 f837 	bl	1490 <am_hal_flash_delay>
}
     422:	bf00      	nop
     424:	3710      	adds	r7, #16
     426:	46bd      	mov	sp, r7
     428:	bd80      	pop	{r7, pc}
     42a:	bf00      	nop
     42c:	057619f1 	.word	0x057619f1

00000430 <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     430:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     432:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     434:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     436:	f000 f809 	bl	44c <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     43a:	bd01      	pop	{r0, pc}
}
     43c:	bf00      	nop
     43e:	4618      	mov	r0, r3

00000440 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     440:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     442:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     444:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     446:	4770      	bx	lr
}
     448:	bf00      	nop
     44a:	4618      	mov	r0, r3

0000044c <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     44c:	b580      	push	{r7, lr}
     44e:	b096      	sub	sp, #88	; 0x58
     450:	af00      	add	r7, sp, #0
     452:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     454:	f107 030c 	add.w	r3, r7, #12
     458:	2200      	movs	r2, #0
     45a:	601a      	str	r2, [r3, #0]
     45c:	605a      	str	r2, [r3, #4]
     45e:	609a      	str	r2, [r3, #8]
     460:	60da      	str	r2, [r3, #12]
     462:	611a      	str	r2, [r3, #16]
     464:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
     466:	2300      	movs	r3, #0
     468:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     46a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     46c:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     46e:	4b2e      	ldr	r3, [pc, #184]	; (528 <am_util_faultisr_collect_data+0xdc>)
     470:	681b      	ldr	r3, [r3, #0]
     472:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     476:	b2db      	uxtb	r3, r3
     478:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     47c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     47e:	0a1b      	lsrs	r3, r3, #8
     480:	b2db      	uxtb	r3, r3
     482:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     488:	0c1b      	lsrs	r3, r3, #16
     48a:	b29b      	uxth	r3, r3
     48c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     490:	4b26      	ldr	r3, [pc, #152]	; (52c <am_util_faultisr_collect_data+0xe0>)
     492:	681b      	ldr	r3, [r3, #0]
     494:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     496:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     49a:	b2db      	uxtb	r3, r3
     49c:	f003 0302 	and.w	r3, r3, #2
     4a0:	2b00      	cmp	r3, #0
     4a2:	d005      	beq.n	4b0 <am_util_faultisr_collect_data+0x64>
     4a4:	6879      	ldr	r1, [r7, #4]
     4a6:	2006      	movs	r0, #6
     4a8:	f7ff ffca 	bl	440 <getStackedReg>
     4ac:	4603      	mov	r3, r0
     4ae:	e001      	b.n	4b4 <am_util_faultisr_collect_data+0x68>
     4b0:	f04f 33ff 	mov.w	r3, #4294967295
     4b4:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     4b6:	6879      	ldr	r1, [r7, #4]
     4b8:	2000      	movs	r0, #0
     4ba:	f7ff ffc1 	bl	440 <getStackedReg>
     4be:	4603      	mov	r3, r0
     4c0:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     4c2:	6879      	ldr	r1, [r7, #4]
     4c4:	2001      	movs	r0, #1
     4c6:	f7ff ffbb 	bl	440 <getStackedReg>
     4ca:	4603      	mov	r3, r0
     4cc:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     4ce:	6879      	ldr	r1, [r7, #4]
     4d0:	2002      	movs	r0, #2
     4d2:	f7ff ffb5 	bl	440 <getStackedReg>
     4d6:	4603      	mov	r3, r0
     4d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     4da:	6879      	ldr	r1, [r7, #4]
     4dc:	2003      	movs	r0, #3
     4de:	f7ff ffaf 	bl	440 <getStackedReg>
     4e2:	4603      	mov	r3, r0
     4e4:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     4e6:	6879      	ldr	r1, [r7, #4]
     4e8:	2004      	movs	r0, #4
     4ea:	f7ff ffa9 	bl	440 <getStackedReg>
     4ee:	4603      	mov	r3, r0
     4f0:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     4f2:	6879      	ldr	r1, [r7, #4]
     4f4:	2005      	movs	r0, #5
     4f6:	f7ff ffa3 	bl	440 <getStackedReg>
     4fa:	4603      	mov	r3, r0
     4fc:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     4fe:	6879      	ldr	r1, [r7, #4]
     500:	2006      	movs	r0, #6
     502:	f7ff ff9d 	bl	440 <getStackedReg>
     506:	4603      	mov	r3, r0
     508:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     50a:	6879      	ldr	r1, [r7, #4]
     50c:	2007      	movs	r0, #7
     50e:	f7ff ff97 	bl	440 <getStackedReg>
     512:	4603      	mov	r3, r0
     514:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     516:	f107 030c 	add.w	r3, r7, #12
     51a:	4618      	mov	r0, r3
     51c:	f000 ffc4 	bl	14a8 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     520:	2300      	movs	r3, #0
     522:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
     524:	e7fe      	b.n	524 <am_util_faultisr_collect_data+0xd8>
     526:	bf00      	nop
     528:	e000ed28 	.word	0xe000ed28
     52c:	e000ed38 	.word	0xe000ed38

00000530 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     530:	b480      	push	{r7}
     532:	b083      	sub	sp, #12
     534:	af00      	add	r7, sp, #0
     536:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     538:	4a04      	ldr	r2, [pc, #16]	; (54c <am_util_stdio_printf_init+0x1c>)
     53a:	687b      	ldr	r3, [r7, #4]
     53c:	6013      	str	r3, [r2, #0]
}
     53e:	bf00      	nop
     540:	370c      	adds	r7, #12
     542:	46bd      	mov	sp, r7
     544:	f85d 7b04 	ldr.w	r7, [sp], #4
     548:	4770      	bx	lr
     54a:	bf00      	nop
     54c:	10001120 	.word	0x10001120

00000550 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     550:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     554:	b096      	sub	sp, #88	; 0x58
     556:	af00      	add	r7, sp, #0
     558:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     55c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     560:	0025      	movs	r5, r4
     562:	2600      	movs	r6, #0
     564:	ea55 0306 	orrs.w	r3, r5, r6
     568:	f000 80a0 	beq.w	6ac <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     56c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     570:	0862      	lsrs	r2, r4, #1
     572:	ea4f 0133 	mov.w	r1, r3, rrx
     576:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     57a:	ea4f 0893 	mov.w	r8, r3, lsr #2
     57e:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     582:	ea4f 0994 	mov.w	r9, r4, lsr #2
     586:	eb11 0308 	adds.w	r3, r1, r8
     58a:	eb42 0409 	adc.w	r4, r2, r9
     58e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     592:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     596:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     59a:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     59e:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     5a2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5a6:	eb13 030a 	adds.w	r3, r3, sl
     5aa:	eb44 040b 	adc.w	r4, r4, fp
     5ae:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     5b2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5b6:	0a1a      	lsrs	r2, r3, #8
     5b8:	62ba      	str	r2, [r7, #40]	; 0x28
     5ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
     5bc:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     5c0:	62ba      	str	r2, [r7, #40]	; 0x28
     5c2:	0a23      	lsrs	r3, r4, #8
     5c4:	62fb      	str	r3, [r7, #44]	; 0x2c
     5c6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5ca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     5ce:	18c9      	adds	r1, r1, r3
     5d0:	eb42 0204 	adc.w	r2, r2, r4
     5d4:	460b      	mov	r3, r1
     5d6:	4614      	mov	r4, r2
     5d8:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     5dc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5e0:	0c1a      	lsrs	r2, r3, #16
     5e2:	623a      	str	r2, [r7, #32]
     5e4:	6a3a      	ldr	r2, [r7, #32]
     5e6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     5ea:	623a      	str	r2, [r7, #32]
     5ec:	0c23      	lsrs	r3, r4, #16
     5ee:	627b      	str	r3, [r7, #36]	; 0x24
     5f0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5f4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     5f8:	18c9      	adds	r1, r1, r3
     5fa:	eb42 0204 	adc.w	r2, r2, r4
     5fe:	460b      	mov	r3, r1
     600:	4614      	mov	r4, r2
     602:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     606:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     60a:	0023      	movs	r3, r4
     60c:	603b      	str	r3, [r7, #0]
     60e:	2300      	movs	r3, #0
     610:	607b      	str	r3, [r7, #4]
     612:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     616:	e897 0006 	ldmia.w	r7, {r1, r2}
     61a:	18c9      	adds	r1, r1, r3
     61c:	eb42 0204 	adc.w	r2, r2, r4
     620:	460b      	mov	r3, r1
     622:	4614      	mov	r4, r2
     624:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     628:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     62c:	08da      	lsrs	r2, r3, #3
     62e:	613a      	str	r2, [r7, #16]
     630:	693a      	ldr	r2, [r7, #16]
     632:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     636:	613a      	str	r2, [r7, #16]
     638:	08e3      	lsrs	r3, r4, #3
     63a:	617b      	str	r3, [r7, #20]
     63c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     640:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     644:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
     648:	460b      	mov	r3, r1
     64a:	4614      	mov	r4, r2
     64c:	00a0      	lsls	r0, r4, #2
     64e:	60f8      	str	r0, [r7, #12]
     650:	68f8      	ldr	r0, [r7, #12]
     652:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
     656:	60f8      	str	r0, [r7, #12]
     658:	009b      	lsls	r3, r3, #2
     65a:	60bb      	str	r3, [r7, #8]
     65c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     660:	185b      	adds	r3, r3, r1
     662:	eb44 0402 	adc.w	r4, r4, r2
     666:	18db      	adds	r3, r3, r3
     668:	eb44 0404 	adc.w	r4, r4, r4
     66c:	4619      	mov	r1, r3
     66e:	4622      	mov	r2, r4
     670:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     674:	1a5b      	subs	r3, r3, r1
     676:	eb64 0402 	sbc.w	r4, r4, r2
     67a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     67e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     682:	3306      	adds	r3, #6
     684:	f144 0400 	adc.w	r4, r4, #0
     688:	091a      	lsrs	r2, r3, #4
     68a:	61ba      	str	r2, [r7, #24]
     68c:	69ba      	ldr	r2, [r7, #24]
     68e:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     692:	61ba      	str	r2, [r7, #24]
     694:	0923      	lsrs	r3, r4, #4
     696:	61fb      	str	r3, [r7, #28]
     698:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     69c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     6a0:	18c9      	adds	r1, r1, r3
     6a2:	eb42 0204 	adc.w	r2, r2, r4
     6a6:	460b      	mov	r3, r1
     6a8:	4614      	mov	r4, r2
     6aa:	e029      	b.n	700 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     6ae:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     6b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     6b2:	085a      	lsrs	r2, r3, #1
     6b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     6b6:	089b      	lsrs	r3, r3, #2
     6b8:	4413      	add	r3, r2
     6ba:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     6bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     6be:	091b      	lsrs	r3, r3, #4
     6c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     6c2:	4413      	add	r3, r2
     6c4:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     6c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     6c8:	0a1b      	lsrs	r3, r3, #8
     6ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     6cc:	4413      	add	r3, r2
     6ce:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     6d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     6d2:	0c1b      	lsrs	r3, r3, #16
     6d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     6d6:	4413      	add	r3, r2
     6d8:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     6da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     6dc:	08db      	lsrs	r3, r3, #3
     6de:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     6e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     6e2:	4613      	mov	r3, r2
     6e4:	009b      	lsls	r3, r3, #2
     6e6:	4413      	add	r3, r2
     6e8:	005b      	lsls	r3, r3, #1
     6ea:	461a      	mov	r2, r3
     6ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     6ee:	1a9b      	subs	r3, r3, r2
     6f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     6f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     6f4:	3306      	adds	r3, #6
     6f6:	091a      	lsrs	r2, r3, #4
     6f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     6fa:	4413      	add	r3, r2
     6fc:	f04f 0400 	mov.w	r4, #0
    }
}
     700:	4618      	mov	r0, r3
     702:	4621      	mov	r1, r4
     704:	3758      	adds	r7, #88	; 0x58
     706:	46bd      	mov	sp, r7
     708:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     70c:	4770      	bx	lr

0000070e <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     70e:	b590      	push	{r4, r7, lr}
     710:	b085      	sub	sp, #20
     712:	af00      	add	r7, sp, #0
     714:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     718:	683a      	ldr	r2, [r7, #0]
     71a:	687b      	ldr	r3, [r7, #4]
     71c:	4313      	orrs	r3, r2
     71e:	2b00      	cmp	r3, #0
     720:	bf0c      	ite	eq
     722:	2301      	moveq	r3, #1
     724:	2300      	movne	r3, #0
     726:	b2db      	uxtb	r3, r3
     728:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     72a:	e008      	b.n	73e <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     72c:	e9d7 0100 	ldrd	r0, r1, [r7]
     730:	f7ff ff0e 	bl	550 <divu64_10>
     734:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     738:	68fb      	ldr	r3, [r7, #12]
     73a:	3301      	adds	r3, #1
     73c:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
     73e:	e897 0018 	ldmia.w	r7, {r3, r4}
     742:	4323      	orrs	r3, r4
     744:	d1f2      	bne.n	72c <ndigits_in_u64+0x1e>
    }

    return iNDigits;
     746:	68fb      	ldr	r3, [r7, #12]
}
     748:	4618      	mov	r0, r3
     74a:	3714      	adds	r7, #20
     74c:	46bd      	mov	sp, r7
     74e:	bd90      	pop	{r4, r7, pc}

00000750 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     750:	b590      	push	{r4, r7, lr}
     752:	b083      	sub	sp, #12
     754:	af00      	add	r7, sp, #0
     756:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     75a:	e897 0018 	ldmia.w	r7, {r3, r4}
     75e:	2b00      	cmp	r3, #0
     760:	f174 0300 	sbcs.w	r3, r4, #0
     764:	da06      	bge.n	774 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     766:	e897 0018 	ldmia.w	r7, {r3, r4}
     76a:	425b      	negs	r3, r3
     76c:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     770:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     774:	e897 0018 	ldmia.w	r7, {r3, r4}
     778:	4618      	mov	r0, r3
     77a:	4621      	mov	r1, r4
     77c:	f7ff ffc7 	bl	70e <ndigits_in_u64>
     780:	4603      	mov	r3, r0
}
     782:	4618      	mov	r0, r3
     784:	370c      	adds	r7, #12
     786:	46bd      	mov	sp, r7
     788:	bd90      	pop	{r4, r7, pc}

0000078a <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     78a:	b490      	push	{r4, r7}
     78c:	b084      	sub	sp, #16
     78e:	af00      	add	r7, sp, #0
     790:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     794:	6839      	ldr	r1, [r7, #0]
     796:	687a      	ldr	r2, [r7, #4]
     798:	430a      	orrs	r2, r1
     79a:	2a00      	cmp	r2, #0
     79c:	bf0c      	ite	eq
     79e:	2201      	moveq	r2, #1
     7a0:	2200      	movne	r2, #0
     7a2:	b2d2      	uxtb	r2, r2
     7a4:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     7a6:	e00a      	b.n	7be <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     7a8:	e897 0006 	ldmia.w	r7, {r1, r2}
     7ac:	090b      	lsrs	r3, r1, #4
     7ae:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     7b2:	0914      	lsrs	r4, r2, #4
     7b4:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     7b8:	68fa      	ldr	r2, [r7, #12]
     7ba:	3201      	adds	r2, #1
     7bc:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
     7be:	e897 0006 	ldmia.w	r7, {r1, r2}
     7c2:	430a      	orrs	r2, r1
     7c4:	d1f0      	bne.n	7a8 <ndigits_in_hex+0x1e>
    }

    return iDigits;
     7c6:	68fb      	ldr	r3, [r7, #12]
}
     7c8:	4618      	mov	r0, r3
     7ca:	3710      	adds	r7, #16
     7cc:	46bd      	mov	sp, r7
     7ce:	bc90      	pop	{r4, r7}
     7d0:	4770      	bx	lr

000007d2 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     7d2:	b480      	push	{r7}
     7d4:	b087      	sub	sp, #28
     7d6:	af00      	add	r7, sp, #0
     7d8:	6078      	str	r0, [r7, #4]
     7da:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     7dc:	2300      	movs	r3, #0
     7de:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     7e0:	2300      	movs	r3, #0
     7e2:	613b      	str	r3, [r7, #16]
     7e4:	2300      	movs	r3, #0
     7e6:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     7e8:	687b      	ldr	r3, [r7, #4]
     7ea:	781b      	ldrb	r3, [r3, #0]
     7ec:	2b2d      	cmp	r3, #45	; 0x2d
     7ee:	d11b      	bne.n	828 <decstr_to_int+0x56>
    {
        bNeg = true;
     7f0:	2301      	movs	r3, #1
     7f2:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     7f4:	687b      	ldr	r3, [r7, #4]
     7f6:	3301      	adds	r3, #1
     7f8:	607b      	str	r3, [r7, #4]
        uCnt++;
     7fa:	68fb      	ldr	r3, [r7, #12]
     7fc:	3301      	adds	r3, #1
     7fe:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     800:	e012      	b.n	828 <decstr_to_int+0x56>
    {
        ++uCnt;
     802:	68fb      	ldr	r3, [r7, #12]
     804:	3301      	adds	r3, #1
     806:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     808:	693a      	ldr	r2, [r7, #16]
     80a:	4613      	mov	r3, r2
     80c:	009b      	lsls	r3, r3, #2
     80e:	4413      	add	r3, r2
     810:	005b      	lsls	r3, r3, #1
     812:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     814:	687b      	ldr	r3, [r7, #4]
     816:	781b      	ldrb	r3, [r3, #0]
     818:	461a      	mov	r2, r3
     81a:	693b      	ldr	r3, [r7, #16]
     81c:	4413      	add	r3, r2
     81e:	3b30      	subs	r3, #48	; 0x30
     820:	613b      	str	r3, [r7, #16]
        pcStr++;
     822:	687b      	ldr	r3, [r7, #4]
     824:	3301      	adds	r3, #1
     826:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     828:	687b      	ldr	r3, [r7, #4]
     82a:	781b      	ldrb	r3, [r3, #0]
     82c:	2b2f      	cmp	r3, #47	; 0x2f
     82e:	d903      	bls.n	838 <decstr_to_int+0x66>
     830:	687b      	ldr	r3, [r7, #4]
     832:	781b      	ldrb	r3, [r3, #0]
     834:	2b39      	cmp	r3, #57	; 0x39
     836:	d9e4      	bls.n	802 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
     838:	683b      	ldr	r3, [r7, #0]
     83a:	2b00      	cmp	r3, #0
     83c:	d002      	beq.n	844 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     83e:	683b      	ldr	r3, [r7, #0]
     840:	68fa      	ldr	r2, [r7, #12]
     842:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     844:	7dfb      	ldrb	r3, [r7, #23]
     846:	2b00      	cmp	r3, #0
     848:	d002      	beq.n	850 <decstr_to_int+0x7e>
     84a:	693b      	ldr	r3, [r7, #16]
     84c:	425b      	negs	r3, r3
     84e:	e000      	b.n	852 <decstr_to_int+0x80>
     850:	693b      	ldr	r3, [r7, #16]
}
     852:	4618      	mov	r0, r3
     854:	371c      	adds	r7, #28
     856:	46bd      	mov	sp, r7
     858:	f85d 7b04 	ldr.w	r7, [sp], #4
     85c:	4770      	bx	lr

0000085e <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     85e:	b590      	push	{r4, r7, lr}
     860:	b091      	sub	sp, #68	; 0x44
     862:	af00      	add	r7, sp, #0
     864:	e9c7 0102 	strd	r0, r1, [r7, #8]
     868:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     86a:	2300      	movs	r3, #0
     86c:	63fb      	str	r3, [r7, #60]	; 0x3c
     86e:	2300      	movs	r3, #0
     870:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     872:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     876:	f7ff fe6b 	bl	550 <divu64_10>
     87a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     87e:	68b9      	ldr	r1, [r7, #8]
     880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     882:	4613      	mov	r3, r2
     884:	009b      	lsls	r3, r3, #2
     886:	4413      	add	r3, r2
     888:	005b      	lsls	r3, r3, #1
     88a:	1acb      	subs	r3, r1, r3
     88c:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     88e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     890:	1c5a      	adds	r2, r3, #1
     892:	63fa      	str	r2, [r7, #60]	; 0x3c
     894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     896:	b2d2      	uxtb	r2, r2
     898:	3230      	adds	r2, #48	; 0x30
     89a:	b2d2      	uxtb	r2, r2
     89c:	f107 0140 	add.w	r1, r7, #64	; 0x40
     8a0:	440b      	add	r3, r1
     8a2:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     8a6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     8aa:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     8ae:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     8b2:	4323      	orrs	r3, r4
     8b4:	d1dd      	bne.n	872 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     8b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     8b8:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     8ba:	687b      	ldr	r3, [r7, #4]
     8bc:	2b00      	cmp	r3, #0
     8be:	d011      	beq.n	8e4 <uint64_to_str+0x86>
    {
        while ( ix-- )
     8c0:	e008      	b.n	8d4 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     8c2:	687b      	ldr	r3, [r7, #4]
     8c4:	1c5a      	adds	r2, r3, #1
     8c6:	607a      	str	r2, [r7, #4]
     8c8:	f107 0110 	add.w	r1, r7, #16
     8cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     8ce:	440a      	add	r2, r1
     8d0:	7812      	ldrb	r2, [r2, #0]
     8d2:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
     8d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     8d6:	1e5a      	subs	r2, r3, #1
     8d8:	63fa      	str	r2, [r7, #60]	; 0x3c
     8da:	2b00      	cmp	r3, #0
     8dc:	d1f1      	bne.n	8c2 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     8de:	687b      	ldr	r3, [r7, #4]
     8e0:	2200      	movs	r2, #0
     8e2:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     8e6:	4618      	mov	r0, r3
     8e8:	3744      	adds	r7, #68	; 0x44
     8ea:	46bd      	mov	sp, r7
     8ec:	bd90      	pop	{r4, r7, pc}

000008ee <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     8ee:	b4b0      	push	{r4, r5, r7}
     8f0:	b08d      	sub	sp, #52	; 0x34
     8f2:	af00      	add	r7, sp, #0
     8f4:	e9c7 0102 	strd	r0, r1, [r7, #8]
     8f8:	607a      	str	r2, [r7, #4]
     8fa:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     8fc:	2300      	movs	r3, #0
     8fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     900:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     904:	4313      	orrs	r3, r2
     906:	d131      	bne.n	96c <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     90a:	1c5a      	adds	r2, r3, #1
     90c:	62fa      	str	r2, [r7, #44]	; 0x2c
     90e:	f107 0230 	add.w	r2, r7, #48	; 0x30
     912:	4413      	add	r3, r2
     914:	2230      	movs	r2, #48	; 0x30
     916:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     91a:	e027      	b.n	96c <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     91c:	7a3b      	ldrb	r3, [r7, #8]
     91e:	f003 030f 	and.w	r3, r3, #15
     922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     926:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     92a:	2b09      	cmp	r3, #9
     92c:	d90a      	bls.n	944 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     92e:	78fb      	ldrb	r3, [r7, #3]
     930:	2b00      	cmp	r3, #0
     932:	d001      	beq.n	938 <uint64_to_hexstr+0x4a>
     934:	2227      	movs	r2, #39	; 0x27
     936:	e000      	b.n	93a <uint64_to_hexstr+0x4c>
     938:	2207      	movs	r2, #7
     93a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     93e:	4413      	add	r3, r2
     940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     946:	1c5a      	adds	r2, r3, #1
     948:	62fa      	str	r2, [r7, #44]	; 0x2c
     94a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     94e:	3230      	adds	r2, #48	; 0x30
     950:	b2d2      	uxtb	r2, r2
     952:	f107 0130 	add.w	r1, r7, #48	; 0x30
     956:	440b      	add	r3, r1
     958:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     95c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     960:	0914      	lsrs	r4, r2, #4
     962:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     966:	091d      	lsrs	r5, r3, #4
     968:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
     96c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     970:	4313      	orrs	r3, r2
     972:	d1d3      	bne.n	91c <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     976:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     978:	687b      	ldr	r3, [r7, #4]
     97a:	2b00      	cmp	r3, #0
     97c:	d011      	beq.n	9a2 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     97e:	e008      	b.n	992 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     980:	687b      	ldr	r3, [r7, #4]
     982:	1c5a      	adds	r2, r3, #1
     984:	607a      	str	r2, [r7, #4]
     986:	f107 0110 	add.w	r1, r7, #16
     98a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     98c:	440a      	add	r2, r1
     98e:	7812      	ldrb	r2, [r2, #0]
     990:	701a      	strb	r2, [r3, #0]
        while (ix--)
     992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     994:	1e5a      	subs	r2, r3, #1
     996:	62fa      	str	r2, [r7, #44]	; 0x2c
     998:	2b00      	cmp	r3, #0
     99a:	d1f1      	bne.n	980 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     99c:	687b      	ldr	r3, [r7, #4]
     99e:	2200      	movs	r2, #0
     9a0:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     9a4:	4618      	mov	r0, r3
     9a6:	3734      	adds	r7, #52	; 0x34
     9a8:	46bd      	mov	sp, r7
     9aa:	bcb0      	pop	{r4, r5, r7}
     9ac:	4770      	bx	lr

000009ae <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     9ae:	b480      	push	{r7}
     9b0:	b085      	sub	sp, #20
     9b2:	af00      	add	r7, sp, #0
     9b4:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     9b6:	2300      	movs	r3, #0
     9b8:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     9ba:	687b      	ldr	r3, [r7, #4]
     9bc:	2b00      	cmp	r3, #0
     9be:	d104      	bne.n	9ca <simple_strlen+0x1c>
    {
        return ui32RetVal;
     9c0:	68fb      	ldr	r3, [r7, #12]
     9c2:	e009      	b.n	9d8 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     9c4:	68fb      	ldr	r3, [r7, #12]
     9c6:	3301      	adds	r3, #1
     9c8:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
     9ca:	687b      	ldr	r3, [r7, #4]
     9cc:	1c5a      	adds	r2, r3, #1
     9ce:	607a      	str	r2, [r7, #4]
     9d0:	781b      	ldrb	r3, [r3, #0]
     9d2:	2b00      	cmp	r3, #0
     9d4:	d1f6      	bne.n	9c4 <simple_strlen+0x16>
    }
    return ui32RetVal;
     9d6:	68fb      	ldr	r3, [r7, #12]
}
     9d8:	4618      	mov	r0, r3
     9da:	3714      	adds	r7, #20
     9dc:	46bd      	mov	sp, r7
     9de:	f85d 7b04 	ldr.w	r7, [sp], #4
     9e2:	4770      	bx	lr

000009e4 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     9e4:	b480      	push	{r7}
     9e6:	b087      	sub	sp, #28
     9e8:	af00      	add	r7, sp, #0
     9ea:	60f8      	str	r0, [r7, #12]
     9ec:	460b      	mov	r3, r1
     9ee:	607a      	str	r2, [r7, #4]
     9f0:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     9f2:	2300      	movs	r3, #0
     9f4:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     9f6:	687b      	ldr	r3, [r7, #4]
     9f8:	2b00      	cmp	r3, #0
     9fa:	dc0c      	bgt.n	a16 <padbuffer+0x32>
    {
        return i32Cnt;
     9fc:	697b      	ldr	r3, [r7, #20]
     9fe:	e010      	b.n	a22 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     a00:	68fb      	ldr	r3, [r7, #12]
     a02:	2b00      	cmp	r3, #0
     a04:	d004      	beq.n	a10 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     a06:	68fb      	ldr	r3, [r7, #12]
     a08:	1c5a      	adds	r2, r3, #1
     a0a:	60fa      	str	r2, [r7, #12]
     a0c:	7afa      	ldrb	r2, [r7, #11]
     a0e:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     a10:	697b      	ldr	r3, [r7, #20]
     a12:	3301      	adds	r3, #1
     a14:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
     a16:	687b      	ldr	r3, [r7, #4]
     a18:	1e5a      	subs	r2, r3, #1
     a1a:	607a      	str	r2, [r7, #4]
     a1c:	2b00      	cmp	r3, #0
     a1e:	d1ef      	bne.n	a00 <padbuffer+0x1c>
    }

    return i32Cnt;
     a20:	697b      	ldr	r3, [r7, #20]
}
     a22:	4618      	mov	r0, r3
     a24:	371c      	adds	r7, #28
     a26:	46bd      	mov	sp, r7
     a28:	f85d 7b04 	ldr.w	r7, [sp], #4
     a2c:	4770      	bx	lr
	...

00000a30 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     a30:	b590      	push	{r4, r7, lr}
     a32:	b08f      	sub	sp, #60	; 0x3c
     a34:	af00      	add	r7, sp, #0
     a36:	60f8      	str	r0, [r7, #12]
     a38:	60b9      	str	r1, [r7, #8]
     a3a:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
     a3c:	68bb      	ldr	r3, [r7, #8]
     a3e:	681b      	ldr	r3, [r3, #0]
     a40:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
     a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a44:	2b03      	cmp	r3, #3
     a46:	dc02      	bgt.n	a4e <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     a48:	f06f 0302 	mvn.w	r3, #2
     a4c:	e0e7      	b.n	c1e <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
     a4e:	edd7 7a03 	vldr	s15, [r7, #12]
     a52:	eef5 7a40 	vcmp.f32	s15, #0.0
     a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     a5a:	d104      	bne.n	a66 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     a5c:	68bb      	ldr	r3, [r7, #8]
     a5e:	4a72      	ldr	r2, [pc, #456]	; (c28 <ftoa+0x1f8>)
     a60:	601a      	str	r2, [r3, #0]
        return 3;
     a62:	2303      	movs	r3, #3
     a64:	e0db      	b.n	c1e <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
     a66:	68bb      	ldr	r3, [r7, #8]
     a68:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
     a6a:	68fb      	ldr	r3, [r7, #12]
     a6c:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     a6e:	693b      	ldr	r3, [r7, #16]
     a70:	15db      	asrs	r3, r3, #23
     a72:	b2db      	uxtb	r3, r3
     a74:	3b7f      	subs	r3, #127	; 0x7f
     a76:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     a78:	693b      	ldr	r3, [r7, #16]
     a7a:	f3c3 0316 	ubfx	r3, r3, #0, #23
     a7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     a82:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
     a84:	2300      	movs	r3, #0
     a86:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     a88:	2300      	movs	r3, #0
     a8a:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     a8c:	69fb      	ldr	r3, [r7, #28]
     a8e:	2b1e      	cmp	r3, #30
     a90:	dd02      	ble.n	a98 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     a92:	f06f 0301 	mvn.w	r3, #1
     a96:	e0c2      	b.n	c1e <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
     a98:	69fb      	ldr	r3, [r7, #28]
     a9a:	f113 0f17 	cmn.w	r3, #23
     a9e:	da02      	bge.n	aa6 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     aa0:	f04f 33ff 	mov.w	r3, #4294967295
     aa4:	e0bb      	b.n	c1e <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
     aa6:	69fb      	ldr	r3, [r7, #28]
     aa8:	2b16      	cmp	r3, #22
     aaa:	dd06      	ble.n	aba <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
     aac:	69fb      	ldr	r3, [r7, #28]
     aae:	3b17      	subs	r3, #23
     ab0:	69ba      	ldr	r2, [r7, #24]
     ab2:	fa02 f303 	lsl.w	r3, r2, r3
     ab6:	637b      	str	r3, [r7, #52]	; 0x34
     ab8:	e01a      	b.n	af0 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     aba:	69fb      	ldr	r3, [r7, #28]
     abc:	2b00      	cmp	r3, #0
     abe:	db0f      	blt.n	ae0 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
     ac0:	69fb      	ldr	r3, [r7, #28]
     ac2:	f1c3 0317 	rsb	r3, r3, #23
     ac6:	69ba      	ldr	r2, [r7, #24]
     ac8:	fa42 f303 	asr.w	r3, r2, r3
     acc:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
     ace:	69fb      	ldr	r3, [r7, #28]
     ad0:	3301      	adds	r3, #1
     ad2:	69ba      	ldr	r2, [r7, #24]
     ad4:	fa02 f303 	lsl.w	r3, r2, r3
     ad8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     adc:	633b      	str	r3, [r7, #48]	; 0x30
     ade:	e007      	b.n	af0 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
     ae0:	69bb      	ldr	r3, [r7, #24]
     ae2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     ae6:	69fb      	ldr	r3, [r7, #28]
     ae8:	43db      	mvns	r3, r3
     aea:	fa42 f303 	asr.w	r3, r2, r3
     aee:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     af0:	693b      	ldr	r3, [r7, #16]
     af2:	2b00      	cmp	r3, #0
     af4:	da04      	bge.n	b00 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     af6:	68bb      	ldr	r3, [r7, #8]
     af8:	1c5a      	adds	r2, r3, #1
     afa:	60ba      	str	r2, [r7, #8]
     afc:	222d      	movs	r2, #45	; 0x2d
     afe:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b02:	2b00      	cmp	r3, #0
     b04:	d105      	bne.n	b12 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     b06:	68bb      	ldr	r3, [r7, #8]
     b08:	1c5a      	adds	r2, r3, #1
     b0a:	60ba      	str	r2, [r7, #8]
     b0c:	2230      	movs	r2, #48	; 0x30
     b0e:	701a      	strb	r2, [r3, #0]
     b10:	e021      	b.n	b56 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b14:	2b00      	cmp	r3, #0
     b16:	dd08      	ble.n	b2a <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b1a:	ea4f 74e3 	mov.w	r4, r3, asr #31
     b1e:	68ba      	ldr	r2, [r7, #8]
     b20:	4618      	mov	r0, r3
     b22:	4621      	mov	r1, r4
     b24:	f7ff fe9b 	bl	85e <uint64_to_str>
     b28:	e011      	b.n	b4e <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     b2a:	68bb      	ldr	r3, [r7, #8]
     b2c:	1c5a      	adds	r2, r3, #1
     b2e:	60ba      	str	r2, [r7, #8]
     b30:	222d      	movs	r2, #45	; 0x2d
     b32:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b36:	425b      	negs	r3, r3
     b38:	ea4f 74e3 	mov.w	r4, r3, asr #31
     b3c:	68ba      	ldr	r2, [r7, #8]
     b3e:	4618      	mov	r0, r3
     b40:	4621      	mov	r1, r4
     b42:	f7ff fe8c 	bl	85e <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     b46:	e002      	b.n	b4e <ftoa+0x11e>
        {
            pcBuf++;
     b48:	68bb      	ldr	r3, [r7, #8]
     b4a:	3301      	adds	r3, #1
     b4c:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
     b4e:	68bb      	ldr	r3, [r7, #8]
     b50:	781b      	ldrb	r3, [r3, #0]
     b52:	2b00      	cmp	r3, #0
     b54:	d1f8      	bne.n	b48 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     b56:	68bb      	ldr	r3, [r7, #8]
     b58:	1c5a      	adds	r2, r3, #1
     b5a:	60ba      	str	r2, [r7, #8]
     b5c:	222e      	movs	r2, #46	; 0x2e
     b5e:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     b62:	2b00      	cmp	r3, #0
     b64:	d105      	bne.n	b72 <ftoa+0x142>
    {
        *pcBuf++ = '0';
     b66:	68bb      	ldr	r3, [r7, #8]
     b68:	1c5a      	adds	r2, r3, #1
     b6a:	60ba      	str	r2, [r7, #8]
     b6c:	2230      	movs	r2, #48	; 0x30
     b6e:	701a      	strb	r2, [r3, #0]
     b70:	e04f      	b.n	c12 <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     b72:	68ba      	ldr	r2, [r7, #8]
     b74:	6a3b      	ldr	r3, [r7, #32]
     b76:	1ad3      	subs	r3, r2, r3
     b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     b7a:	1ad3      	subs	r3, r2, r3
     b7c:	3b01      	subs	r3, #1
     b7e:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     b80:	697a      	ldr	r2, [r7, #20]
     b82:	687b      	ldr	r3, [r7, #4]
     b84:	4293      	cmp	r3, r2
     b86:	bfa8      	it	ge
     b88:	4613      	movge	r3, r2
     b8a:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
     b8c:	2300      	movs	r3, #0
     b8e:	62bb      	str	r3, [r7, #40]	; 0x28
     b90:	e015      	b.n	bbe <ftoa+0x18e>
        {
            i32FracPart *= 10;
     b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     b94:	4613      	mov	r3, r2
     b96:	009b      	lsls	r3, r3, #2
     b98:	4413      	add	r3, r2
     b9a:	005b      	lsls	r3, r3, #1
     b9c:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     b9e:	68bb      	ldr	r3, [r7, #8]
     ba0:	1c5a      	adds	r2, r3, #1
     ba2:	60ba      	str	r2, [r7, #8]
     ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     ba6:	1612      	asrs	r2, r2, #24
     ba8:	b2d2      	uxtb	r2, r2
     baa:	3230      	adds	r2, #48	; 0x30
     bac:	b2d2      	uxtb	r2, r2
     bae:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     bb2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     bb6:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
     bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
     bba:	3301      	adds	r3, #1
     bbc:	62bb      	str	r3, [r7, #40]	; 0x28
     bbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
     bc0:	697b      	ldr	r3, [r7, #20]
     bc2:	429a      	cmp	r2, r3
     bc4:	dbe5      	blt.n	b92 <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
     bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     bc8:	4613      	mov	r3, r2
     bca:	009b      	lsls	r3, r3, #2
     bcc:	4413      	add	r3, r2
     bce:	005b      	lsls	r3, r3, #1
     bd0:	161b      	asrs	r3, r3, #24
     bd2:	2b04      	cmp	r3, #4
     bd4:	dd1d      	ble.n	c12 <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
     bd6:	68bb      	ldr	r3, [r7, #8]
     bd8:	3b01      	subs	r3, #1
     bda:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     bdc:	e015      	b.n	c0a <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
     bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     be0:	781b      	ldrb	r3, [r3, #0]
     be2:	2b2e      	cmp	r3, #46	; 0x2e
     be4:	d00e      	beq.n	c04 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
     be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     be8:	781b      	ldrb	r3, [r3, #0]
     bea:	2b39      	cmp	r3, #57	; 0x39
     bec:	d103      	bne.n	bf6 <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
     bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     bf0:	2230      	movs	r2, #48	; 0x30
     bf2:	701a      	strb	r2, [r3, #0]
     bf4:	e006      	b.n	c04 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
     bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     bf8:	781b      	ldrb	r3, [r3, #0]
     bfa:	3301      	adds	r3, #1
     bfc:	b2da      	uxtb	r2, r3
     bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c00:	701a      	strb	r2, [r3, #0]
                    break;
     c02:	e006      	b.n	c12 <ftoa+0x1e2>
                }
                pcBuftmp--;
     c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c06:	3b01      	subs	r3, #1
     c08:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     c0c:	6a3b      	ldr	r3, [r7, #32]
     c0e:	429a      	cmp	r2, r3
     c10:	d2e5      	bcs.n	bde <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     c12:	68bb      	ldr	r3, [r7, #8]
     c14:	2200      	movs	r2, #0
     c16:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     c18:	68ba      	ldr	r2, [r7, #8]
     c1a:	6a3b      	ldr	r3, [r7, #32]
     c1c:	1ad3      	subs	r3, r2, r3
} // ftoa()
     c1e:	4618      	mov	r0, r3
     c20:	373c      	adds	r7, #60	; 0x3c
     c22:	46bd      	mov	sp, r7
     c24:	bd90      	pop	{r4, r7, pc}
     c26:	bf00      	nop
     c28:	00302e30 	.word	0x00302e30

00000c2c <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     c2c:	b590      	push	{r4, r7, lr}
     c2e:	b095      	sub	sp, #84	; 0x54
     c30:	af00      	add	r7, sp, #0
     c32:	60f8      	str	r0, [r7, #12]
     c34:	60b9      	str	r1, [r7, #8]
     c36:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     c38:	2300      	movs	r3, #0
     c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     c3c:	2300      	movs	r3, #0
     c3e:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     c40:	e2e3      	b.n	120a <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     c42:	2306      	movs	r3, #6
     c44:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     c46:	68bb      	ldr	r3, [r7, #8]
     c48:	781b      	ldrb	r3, [r3, #0]
     c4a:	2b25      	cmp	r3, #37	; 0x25
     c4c:	d01f      	beq.n	c8e <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     c4e:	68fb      	ldr	r3, [r7, #12]
     c50:	2b00      	cmp	r3, #0
     c52:	d015      	beq.n	c80 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     c54:	68bb      	ldr	r3, [r7, #8]
     c56:	781b      	ldrb	r3, [r3, #0]
     c58:	2b0a      	cmp	r3, #10
     c5a:	d10b      	bne.n	c74 <am_util_stdio_vsprintf+0x48>
     c5c:	4bb1      	ldr	r3, [pc, #708]	; (f24 <am_util_stdio_vsprintf+0x2f8>)
     c5e:	781b      	ldrb	r3, [r3, #0]
     c60:	2b00      	cmp	r3, #0
     c62:	d007      	beq.n	c74 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     c64:	68fb      	ldr	r3, [r7, #12]
     c66:	1c5a      	adds	r2, r3, #1
     c68:	60fa      	str	r2, [r7, #12]
     c6a:	220d      	movs	r2, #13
     c6c:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     c70:	3301      	adds	r3, #1
     c72:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     c74:	68fb      	ldr	r3, [r7, #12]
     c76:	1c5a      	adds	r2, r3, #1
     c78:	60fa      	str	r2, [r7, #12]
     c7a:	68ba      	ldr	r2, [r7, #8]
     c7c:	7812      	ldrb	r2, [r2, #0]
     c7e:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     c80:	68bb      	ldr	r3, [r7, #8]
     c82:	3301      	adds	r3, #1
     c84:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     c88:	3301      	adds	r3, #1
     c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     c8c:	e2bd      	b.n	120a <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     c8e:	68bb      	ldr	r3, [r7, #8]
     c90:	3301      	adds	r3, #1
     c92:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     c94:	2300      	movs	r3, #0
     c96:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     c9a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     c9e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     ca2:	2320      	movs	r3, #32
     ca4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     ca8:	68bb      	ldr	r3, [r7, #8]
     caa:	781b      	ldrb	r3, [r3, #0]
     cac:	2b30      	cmp	r3, #48	; 0x30
     cae:	d105      	bne.n	cbc <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     cb0:	2330      	movs	r3, #48	; 0x30
     cb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     cb6:	68bb      	ldr	r3, [r7, #8]
     cb8:	3301      	adds	r3, #1
     cba:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     cbc:	f107 0310 	add.w	r3, r7, #16
     cc0:	4619      	mov	r1, r3
     cc2:	68b8      	ldr	r0, [r7, #8]
     cc4:	f7ff fd85 	bl	7d2 <decstr_to_int>
     cc8:	4603      	mov	r3, r0
     cca:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     ccc:	693b      	ldr	r3, [r7, #16]
     cce:	68ba      	ldr	r2, [r7, #8]
     cd0:	4413      	add	r3, r2
     cd2:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     cd4:	68bb      	ldr	r3, [r7, #8]
     cd6:	781b      	ldrb	r3, [r3, #0]
     cd8:	2b73      	cmp	r3, #115	; 0x73
     cda:	d005      	beq.n	ce8 <am_util_stdio_vsprintf+0xbc>
     cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     cde:	2b00      	cmp	r3, #0
     ce0:	da02      	bge.n	ce8 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ce4:	425b      	negs	r3, r3
     ce6:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     ce8:	68bb      	ldr	r3, [r7, #8]
     cea:	781b      	ldrb	r3, [r3, #0]
     cec:	2b2e      	cmp	r3, #46	; 0x2e
     cee:	d10e      	bne.n	d0e <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     cf0:	68bb      	ldr	r3, [r7, #8]
     cf2:	3301      	adds	r3, #1
     cf4:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     cf6:	f107 0310 	add.w	r3, r7, #16
     cfa:	4619      	mov	r1, r3
     cfc:	68b8      	ldr	r0, [r7, #8]
     cfe:	f7ff fd68 	bl	7d2 <decstr_to_int>
     d02:	4603      	mov	r3, r0
     d04:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     d06:	693b      	ldr	r3, [r7, #16]
     d08:	68ba      	ldr	r2, [r7, #8]
     d0a:	4413      	add	r3, r2
     d0c:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     d0e:	68bb      	ldr	r3, [r7, #8]
     d10:	781b      	ldrb	r3, [r3, #0]
     d12:	2b6c      	cmp	r3, #108	; 0x6c
     d14:	d10c      	bne.n	d30 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     d16:	68bb      	ldr	r3, [r7, #8]
     d18:	3301      	adds	r3, #1
     d1a:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     d1c:	68bb      	ldr	r3, [r7, #8]
     d1e:	781b      	ldrb	r3, [r3, #0]
     d20:	2b6c      	cmp	r3, #108	; 0x6c
     d22:	d105      	bne.n	d30 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     d24:	68bb      	ldr	r3, [r7, #8]
     d26:	3301      	adds	r3, #1
     d28:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     d2a:	2301      	movs	r3, #1
     d2c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     d30:	68bb      	ldr	r3, [r7, #8]
     d32:	781b      	ldrb	r3, [r3, #0]
     d34:	3b46      	subs	r3, #70	; 0x46
     d36:	2b32      	cmp	r3, #50	; 0x32
     d38:	f200 8254 	bhi.w	11e4 <am_util_stdio_vsprintf+0x5b8>
     d3c:	a201      	add	r2, pc, #4	; (adr r2, d44 <am_util_stdio_vsprintf+0x118>)
     d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     d42:	bf00      	nop
     d44:	0000116f 	.word	0x0000116f
     d48:	000011e5 	.word	0x000011e5
     d4c:	000011e5 	.word	0x000011e5
     d50:	000011e5 	.word	0x000011e5
     d54:	000011e5 	.word	0x000011e5
     d58:	000011e5 	.word	0x000011e5
     d5c:	000011e5 	.word	0x000011e5
     d60:	000011e5 	.word	0x000011e5
     d64:	000011e5 	.word	0x000011e5
     d68:	000011e5 	.word	0x000011e5
     d6c:	000011e5 	.word	0x000011e5
     d70:	000011e5 	.word	0x000011e5
     d74:	000011e5 	.word	0x000011e5
     d78:	000011e5 	.word	0x000011e5
     d7c:	000011e5 	.word	0x000011e5
     d80:	000011e5 	.word	0x000011e5
     d84:	000011e5 	.word	0x000011e5
     d88:	000011e5 	.word	0x000011e5
     d8c:	00000f0b 	.word	0x00000f0b
     d90:	000011e5 	.word	0x000011e5
     d94:	000011e5 	.word	0x000011e5
     d98:	000011e5 	.word	0x000011e5
     d9c:	000011e5 	.word	0x000011e5
     da0:	000011e5 	.word	0x000011e5
     da4:	000011e5 	.word	0x000011e5
     da8:	000011e5 	.word	0x000011e5
     dac:	000011e5 	.word	0x000011e5
     db0:	000011e5 	.word	0x000011e5
     db4:	000011e5 	.word	0x000011e5
     db8:	00000e11 	.word	0x00000e11
     dbc:	00001037 	.word	0x00001037
     dc0:	000011e5 	.word	0x000011e5
     dc4:	0000116f 	.word	0x0000116f
     dc8:	000011e5 	.word	0x000011e5
     dcc:	000011e5 	.word	0x000011e5
     dd0:	00001037 	.word	0x00001037
     dd4:	000011e5 	.word	0x000011e5
     dd8:	000011e5 	.word	0x000011e5
     ddc:	000011e5 	.word	0x000011e5
     de0:	000011e5 	.word	0x000011e5
     de4:	000011e5 	.word	0x000011e5
     de8:	000011e5 	.word	0x000011e5
     dec:	000011e5 	.word	0x000011e5
     df0:	000011e5 	.word	0x000011e5
     df4:	000011e5 	.word	0x000011e5
     df8:	00000e37 	.word	0x00000e37
     dfc:	000011e5 	.word	0x000011e5
     e00:	00000fa5 	.word	0x00000fa5
     e04:	000011e5 	.word	0x000011e5
     e08:	000011e5 	.word	0x000011e5
     e0c:	00000f05 	.word	0x00000f05
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
     e10:	687b      	ldr	r3, [r7, #4]
     e12:	1d1a      	adds	r2, r3, #4
     e14:	607a      	str	r2, [r7, #4]
     e16:	681b      	ldr	r3, [r3, #0]
     e18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
     e1c:	68fb      	ldr	r3, [r7, #12]
     e1e:	2b00      	cmp	r3, #0
     e20:	d005      	beq.n	e2e <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
     e22:	68fb      	ldr	r3, [r7, #12]
     e24:	1c5a      	adds	r2, r3, #1
     e26:	60fa      	str	r2, [r7, #12]
     e28:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
     e2c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
     e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e30:	3301      	adds	r3, #1
     e32:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     e34:	e1e6      	b.n	1204 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
     e36:	687b      	ldr	r3, [r7, #4]
     e38:	1d1a      	adds	r2, r3, #4
     e3a:	607a      	str	r2, [r7, #4]
     e3c:	681b      	ldr	r3, [r3, #0]
     e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
     e40:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
     e42:	f7ff fdb4 	bl	9ae <simple_strlen>
     e46:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
     e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e4a:	2b00      	cmp	r3, #0
     e4c:	dd2e      	ble.n	eac <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
     e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     e52:	429a      	cmp	r2, r3
     e54:	d22a      	bcs.n	eac <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     e56:	6bba      	ldr	r2, [r7, #56]	; 0x38
     e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e5a:	1ad3      	subs	r3, r2, r3
     e5c:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     e5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     e62:	6bba      	ldr	r2, [r7, #56]	; 0x38
     e64:	4619      	mov	r1, r3
     e66:	68f8      	ldr	r0, [r7, #12]
     e68:	f7ff fdbc 	bl	9e4 <padbuffer>
     e6c:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     e6e:	68fb      	ldr	r3, [r7, #12]
     e70:	2b00      	cmp	r3, #0
     e72:	d001      	beq.n	e78 <am_util_stdio_vsprintf+0x24c>
     e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e76:	e000      	b.n	e7a <am_util_stdio_vsprintf+0x24e>
     e78:	2300      	movs	r3, #0
     e7a:	68fa      	ldr	r2, [r7, #12]
     e7c:	4413      	add	r3, r2
     e7e:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     e84:	4413      	add	r3, r2
     e86:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     e88:	2300      	movs	r3, #0
     e8a:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
     e8c:	e00e      	b.n	eac <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
     e8e:	68fb      	ldr	r3, [r7, #12]
     e90:	2b00      	cmp	r3, #0
     e92:	d005      	beq.n	ea0 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
     e94:	68fb      	ldr	r3, [r7, #12]
     e96:	1c5a      	adds	r2, r3, #1
     e98:	60fa      	str	r2, [r7, #12]
     e9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     e9c:	7812      	ldrb	r2, [r2, #0]
     e9e:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
     ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     ea2:	3301      	adds	r3, #1
     ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
     ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ea8:	3301      	adds	r3, #1
     eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
     eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     eae:	781b      	ldrb	r3, [r3, #0]
     eb0:	2b00      	cmp	r3, #0
     eb2:	d1ec      	bne.n	e8e <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
     eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     eb6:	2b00      	cmp	r3, #0
     eb8:	f000 81a1 	beq.w	11fe <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
     ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ebe:	425b      	negs	r3, r3
     ec0:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
     ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     ec6:	429a      	cmp	r2, r3
     ec8:	f080 8199 	bcs.w	11fe <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     ecc:	6bba      	ldr	r2, [r7, #56]	; 0x38
     ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ed0:	1ad3      	subs	r3, r2, r3
     ed2:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     ed4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
     eda:	4619      	mov	r1, r3
     edc:	68f8      	ldr	r0, [r7, #12]
     ede:	f7ff fd81 	bl	9e4 <padbuffer>
     ee2:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     ee4:	68fb      	ldr	r3, [r7, #12]
     ee6:	2b00      	cmp	r3, #0
     ee8:	d001      	beq.n	eee <am_util_stdio_vsprintf+0x2c2>
     eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     eec:	e000      	b.n	ef0 <am_util_stdio_vsprintf+0x2c4>
     eee:	2300      	movs	r3, #0
     ef0:	68fa      	ldr	r2, [r7, #12]
     ef2:	4413      	add	r3, r2
     ef4:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ef8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     efa:	4413      	add	r3, r2
     efc:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     efe:	2300      	movs	r3, #0
     f00:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
     f02:	e17c      	b.n	11fe <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
     f04:	2301      	movs	r3, #1
     f06:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     f0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     f0e:	2b00      	cmp	r3, #0
     f10:	d00a      	beq.n	f28 <am_util_stdio_vsprintf+0x2fc>
     f12:	687b      	ldr	r3, [r7, #4]
     f14:	3307      	adds	r3, #7
     f16:	f023 0307 	bic.w	r3, r3, #7
     f1a:	f103 0208 	add.w	r2, r3, #8
     f1e:	607a      	str	r2, [r7, #4]
     f20:	cb18      	ldmia	r3, {r3, r4}
     f22:	e007      	b.n	f34 <am_util_stdio_vsprintf+0x308>
     f24:	10001114 	.word	0x10001114
                                      va_arg(pArgs, uint32_t);
     f28:	687b      	ldr	r3, [r7, #4]
     f2a:	1d1a      	adds	r2, r3, #4
     f2c:	607a      	str	r2, [r7, #4]
     f2e:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     f30:	f04f 0400 	mov.w	r4, #0
     f34:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
     f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f3a:	2b00      	cmp	r3, #0
     f3c:	d01e      	beq.n	f7c <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
     f3e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     f42:	f7ff fc22 	bl	78a <ndigits_in_hex>
     f46:	4602      	mov	r2, r0
     f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f4a:	1a9b      	subs	r3, r3, r2
     f4c:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     f4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     f52:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f54:	4619      	mov	r1, r3
     f56:	68f8      	ldr	r0, [r7, #12]
     f58:	f7ff fd44 	bl	9e4 <padbuffer>
     f5c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
     f5e:	68fb      	ldr	r3, [r7, #12]
     f60:	2b00      	cmp	r3, #0
     f62:	d001      	beq.n	f68 <am_util_stdio_vsprintf+0x33c>
     f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f66:	e000      	b.n	f6a <am_util_stdio_vsprintf+0x33e>
     f68:	2300      	movs	r3, #0
     f6a:	68fa      	ldr	r2, [r7, #12]
     f6c:	4413      	add	r3, r2
     f6e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
     f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f74:	4413      	add	r3, r2
     f76:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
     f78:	2300      	movs	r3, #0
     f7a:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
     f7c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
     f80:	68fa      	ldr	r2, [r7, #12]
     f82:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     f86:	f7ff fcb2 	bl	8ee <uint64_to_hexstr>
     f8a:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
     f8c:	68fb      	ldr	r3, [r7, #12]
     f8e:	2b00      	cmp	r3, #0
     f90:	d003      	beq.n	f9a <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
     f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f94:	68fa      	ldr	r2, [r7, #12]
     f96:	4413      	add	r3, r2
     f98:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
     f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f9e:	4413      	add	r3, r2
     fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     fa2:	e12f      	b.n	1204 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     fa4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     fa8:	2b00      	cmp	r3, #0
     faa:	d008      	beq.n	fbe <am_util_stdio_vsprintf+0x392>
     fac:	687b      	ldr	r3, [r7, #4]
     fae:	3307      	adds	r3, #7
     fb0:	f023 0307 	bic.w	r3, r3, #7
     fb4:	f103 0208 	add.w	r2, r3, #8
     fb8:	607a      	str	r2, [r7, #4]
     fba:	cb18      	ldmia	r3, {r3, r4}
     fbc:	e005      	b.n	fca <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
     fbe:	687b      	ldr	r3, [r7, #4]
     fc0:	1d1a      	adds	r2, r3, #4
     fc2:	607a      	str	r2, [r7, #4]
     fc4:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     fc6:	f04f 0400 	mov.w	r4, #0
     fca:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
     fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fd0:	2b00      	cmp	r3, #0
     fd2:	d01e      	beq.n	1012 <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
     fd4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     fd8:	f7ff fb99 	bl	70e <ndigits_in_u64>
     fdc:	4602      	mov	r2, r0
     fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fe0:	1a9b      	subs	r3, r3, r2
     fe2:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     fe4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     fe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
     fea:	4619      	mov	r1, r3
     fec:	68f8      	ldr	r0, [r7, #12]
     fee:	f7ff fcf9 	bl	9e4 <padbuffer>
     ff2:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
     ff4:	68fb      	ldr	r3, [r7, #12]
     ff6:	2b00      	cmp	r3, #0
     ff8:	d001      	beq.n	ffe <am_util_stdio_vsprintf+0x3d2>
     ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ffc:	e000      	b.n	1000 <am_util_stdio_vsprintf+0x3d4>
     ffe:	2300      	movs	r3, #0
    1000:	68fa      	ldr	r2, [r7, #12]
    1002:	4413      	add	r3, r2
    1004:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1008:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    100a:	4413      	add	r3, r2
    100c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    100e:	2300      	movs	r3, #0
    1010:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1012:	68fa      	ldr	r2, [r7, #12]
    1014:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1018:	f7ff fc21 	bl	85e <uint64_to_str>
    101c:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    101e:	68fb      	ldr	r3, [r7, #12]
    1020:	2b00      	cmp	r3, #0
    1022:	d003      	beq.n	102c <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    1024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1026:	68fa      	ldr	r2, [r7, #12]
    1028:	4413      	add	r3, r2
    102a:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    102c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    102e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1030:	4413      	add	r3, r2
    1032:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1034:	e0e6      	b.n	1204 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1036:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    103a:	2b00      	cmp	r3, #0
    103c:	d008      	beq.n	1050 <am_util_stdio_vsprintf+0x424>
    103e:	687b      	ldr	r3, [r7, #4]
    1040:	3307      	adds	r3, #7
    1042:	f023 0307 	bic.w	r3, r3, #7
    1046:	f103 0208 	add.w	r2, r3, #8
    104a:	607a      	str	r2, [r7, #4]
    104c:	cb18      	ldmia	r3, {r3, r4}
    104e:	e005      	b.n	105c <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    1050:	687b      	ldr	r3, [r7, #4]
    1052:	1d1a      	adds	r2, r3, #4
    1054:	607a      	str	r2, [r7, #4]
    1056:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1058:	ea4f 74e3 	mov.w	r4, r3, asr #31
    105c:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    1060:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1064:	2b00      	cmp	r3, #0
    1066:	f174 0300 	sbcs.w	r3, r4, #0
    106a:	da0a      	bge.n	1082 <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    106c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1070:	425b      	negs	r3, r3
    1072:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    1076:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    107a:	2301      	movs	r3, #1
    107c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    1080:	e006      	b.n	1090 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    1082:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1086:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    108a:	2300      	movs	r3, #0
    108c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    1090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1092:	2b00      	cmp	r3, #0
    1094:	d04a      	beq.n	112c <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    1096:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    109a:	4618      	mov	r0, r3
    109c:	4621      	mov	r1, r4
    109e:	f7ff fb57 	bl	750 <ndigits_in_i64>
    10a2:	4602      	mov	r2, r0
    10a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10a6:	1a9b      	subs	r3, r3, r2
    10a8:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    10aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    10ae:	2b00      	cmp	r3, #0
    10b0:	d011      	beq.n	10d6 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    10b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10b4:	3b01      	subs	r3, #1
    10b6:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    10b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    10bc:	2b30      	cmp	r3, #48	; 0x30
    10be:	d10a      	bne.n	10d6 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    10c0:	68fb      	ldr	r3, [r7, #12]
    10c2:	2b00      	cmp	r3, #0
    10c4:	d004      	beq.n	10d0 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    10c6:	68fb      	ldr	r3, [r7, #12]
    10c8:	1c5a      	adds	r2, r3, #1
    10ca:	60fa      	str	r2, [r7, #12]
    10cc:	222d      	movs	r2, #45	; 0x2d
    10ce:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    10d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10d2:	3301      	adds	r3, #1
    10d4:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    10d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    10da:	6bba      	ldr	r2, [r7, #56]	; 0x38
    10dc:	4619      	mov	r1, r3
    10de:	68f8      	ldr	r0, [r7, #12]
    10e0:	f7ff fc80 	bl	9e4 <padbuffer>
    10e4:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    10e6:	68fb      	ldr	r3, [r7, #12]
    10e8:	2b00      	cmp	r3, #0
    10ea:	d001      	beq.n	10f0 <am_util_stdio_vsprintf+0x4c4>
    10ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10ee:	e000      	b.n	10f2 <am_util_stdio_vsprintf+0x4c6>
    10f0:	2300      	movs	r3, #0
    10f2:	68fa      	ldr	r2, [r7, #12]
    10f4:	4413      	add	r3, r2
    10f6:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    10f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10fc:	4413      	add	r3, r2
    10fe:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1100:	2300      	movs	r3, #0
    1102:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    1104:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1108:	2b00      	cmp	r3, #0
    110a:	d01e      	beq.n	114a <am_util_stdio_vsprintf+0x51e>
    110c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1110:	2b20      	cmp	r3, #32
    1112:	d11a      	bne.n	114a <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    1114:	68fb      	ldr	r3, [r7, #12]
    1116:	2b00      	cmp	r3, #0
    1118:	d004      	beq.n	1124 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    111a:	68fb      	ldr	r3, [r7, #12]
    111c:	1c5a      	adds	r2, r3, #1
    111e:	60fa      	str	r2, [r7, #12]
    1120:	222d      	movs	r2, #45	; 0x2d
    1122:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    1124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1126:	3301      	adds	r3, #1
    1128:	63fb      	str	r3, [r7, #60]	; 0x3c
    112a:	e00e      	b.n	114a <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    112c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1130:	2b00      	cmp	r3, #0
    1132:	d00a      	beq.n	114a <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    1134:	68fb      	ldr	r3, [r7, #12]
    1136:	2b00      	cmp	r3, #0
    1138:	d004      	beq.n	1144 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    113a:	68fb      	ldr	r3, [r7, #12]
    113c:	1c5a      	adds	r2, r3, #1
    113e:	60fa      	str	r2, [r7, #12]
    1140:	222d      	movs	r2, #45	; 0x2d
    1142:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    1144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1146:	3301      	adds	r3, #1
    1148:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    114a:	68fa      	ldr	r2, [r7, #12]
    114c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1150:	f7ff fb85 	bl	85e <uint64_to_str>
    1154:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1156:	68fb      	ldr	r3, [r7, #12]
    1158:	2b00      	cmp	r3, #0
    115a:	d003      	beq.n	1164 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    115c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    115e:	68fa      	ldr	r2, [r7, #12]
    1160:	4413      	add	r3, r2
    1162:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1166:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1168:	4413      	add	r3, r2
    116a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    116c:	e04a      	b.n	1204 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    116e:	68fb      	ldr	r3, [r7, #12]
    1170:	2b00      	cmp	r3, #0
    1172:	d046      	beq.n	1202 <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    1174:	687b      	ldr	r3, [r7, #4]
    1176:	3307      	adds	r3, #7
    1178:	f023 0307 	bic.w	r3, r3, #7
    117c:	f103 0208 	add.w	r2, r3, #8
    1180:	607a      	str	r2, [r7, #4]
    1182:	cb18      	ldmia	r3, {r3, r4}
    1184:	4618      	mov	r0, r3
    1186:	4621      	mov	r1, r4
    1188:	f7fe ff9a 	bl	c0 <__aeabi_d2f>
    118c:	4603      	mov	r3, r0
    118e:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    1190:	68fb      	ldr	r3, [r7, #12]
    1192:	2214      	movs	r2, #20
    1194:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    1196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1198:	68f9      	ldr	r1, [r7, #12]
    119a:	6978      	ldr	r0, [r7, #20]
    119c:	f7ff fc48 	bl	a30 <ftoa>
    11a0:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    11a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11a4:	2b00      	cmp	r3, #0
    11a6:	da14      	bge.n	11d2 <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    11a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11aa:	f1b3 3fff 	cmp.w	r3, #4294967295
    11ae:	d102      	bne.n	11b6 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    11b0:	4b1e      	ldr	r3, [pc, #120]	; (122c <am_util_stdio_vsprintf+0x600>)
    11b2:	62bb      	str	r3, [r7, #40]	; 0x28
    11b4:	e008      	b.n	11c8 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    11b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11b8:	f113 0f02 	cmn.w	r3, #2
    11bc:	d102      	bne.n	11c4 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    11be:	4b1c      	ldr	r3, [pc, #112]	; (1230 <am_util_stdio_vsprintf+0x604>)
    11c0:	62bb      	str	r3, [r7, #40]	; 0x28
    11c2:	e001      	b.n	11c8 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    11c4:	4b1b      	ldr	r3, [pc, #108]	; (1234 <am_util_stdio_vsprintf+0x608>)
    11c6:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    11c8:	68fb      	ldr	r3, [r7, #12]
    11ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
    11cc:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    11ce:	2303      	movs	r3, #3
    11d0:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    11d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    11d6:	4413      	add	r3, r2
    11d8:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    11da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11dc:	68fa      	ldr	r2, [r7, #12]
    11de:	4413      	add	r3, r2
    11e0:	60fb      	str	r3, [r7, #12]
                }
                break;
    11e2:	e00e      	b.n	1202 <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	2b00      	cmp	r3, #0
    11e8:	d005      	beq.n	11f6 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    11ea:	68fb      	ldr	r3, [r7, #12]
    11ec:	1c5a      	adds	r2, r3, #1
    11ee:	60fa      	str	r2, [r7, #12]
    11f0:	68ba      	ldr	r2, [r7, #8]
    11f2:	7812      	ldrb	r2, [r2, #0]
    11f4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    11f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11f8:	3301      	adds	r3, #1
    11fa:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    11fc:	e002      	b.n	1204 <am_util_stdio_vsprintf+0x5d8>
                break;
    11fe:	bf00      	nop
    1200:	e000      	b.n	1204 <am_util_stdio_vsprintf+0x5d8>
                break;
    1202:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    1204:	68bb      	ldr	r3, [r7, #8]
    1206:	3301      	adds	r3, #1
    1208:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    120a:	68bb      	ldr	r3, [r7, #8]
    120c:	781b      	ldrb	r3, [r3, #0]
    120e:	2b00      	cmp	r3, #0
    1210:	f47f ad17 	bne.w	c42 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    1214:	68fb      	ldr	r3, [r7, #12]
    1216:	2b00      	cmp	r3, #0
    1218:	d002      	beq.n	1220 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    121a:	68fb      	ldr	r3, [r7, #12]
    121c:	2200      	movs	r2, #0
    121e:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    1220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1222:	4618      	mov	r0, r3
    1224:	3754      	adds	r7, #84	; 0x54
    1226:	46bd      	mov	sp, r7
    1228:	bd90      	pop	{r4, r7, pc}
    122a:	bf00      	nop
    122c:	00302e30 	.word	0x00302e30
    1230:	00232e23 	.word	0x00232e23
    1234:	003f2e3f 	.word	0x003f2e3f

00001238 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    1238:	b40f      	push	{r0, r1, r2, r3}
    123a:	b580      	push	{r7, lr}
    123c:	b082      	sub	sp, #8
    123e:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    1240:	f107 0314 	add.w	r3, r7, #20
    1244:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    1246:	683a      	ldr	r2, [r7, #0]
    1248:	6939      	ldr	r1, [r7, #16]
    124a:	4808      	ldr	r0, [pc, #32]	; (126c <am_util_stdio_printf+0x34>)
    124c:	f7ff fcee 	bl	c2c <am_util_stdio_vsprintf>
    1250:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    1252:	4b07      	ldr	r3, [pc, #28]	; (1270 <am_util_stdio_printf+0x38>)
    1254:	681b      	ldr	r3, [r3, #0]
    1256:	4805      	ldr	r0, [pc, #20]	; (126c <am_util_stdio_printf+0x34>)
    1258:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    125a:	687b      	ldr	r3, [r7, #4]
}
    125c:	4618      	mov	r0, r3
    125e:	3708      	adds	r7, #8
    1260:	46bd      	mov	sp, r7
    1262:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    1266:	b004      	add	sp, #16
    1268:	4770      	bx	lr
    126a:	bf00      	nop
    126c:	10001014 	.word	0x10001014
    1270:	10001120 	.word	0x10001120

00001274 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    1274:	b580      	push	{r7, lr}
    1276:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    1278:	4802      	ldr	r0, [pc, #8]	; (1284 <am_util_stdio_terminal_clear+0x10>)
    127a:	f7ff ffdd 	bl	1238 <am_util_stdio_printf>
}
    127e:	bf00      	nop
    1280:	bd80      	pop	{r7, pc}
    1282:	bf00      	nop
    1284:	00001c98 	.word	0x00001c98

00001288 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1288:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_enable();
    128a:	f000 fa9b 	bl	17c4 <am_hal_pwrctrl_bucks_enable>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    128e:	f000 fae3 	bl	1858 <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    1292:	f000 fc6b 	bl	1b6c <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    1296:	2001      	movs	r0, #1
    1298:	f000 faee 	bl	1878 <am_hal_rtc_osc_select>

    //
    // Stop the XTAL.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    129c:	2001      	movs	r0, #1
    129e:	f000 f8c7 	bl	1430 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    12a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    12a6:	f000 baf5 	b.w	1894 <am_hal_rtc_osc_disable>
    12aa:	bf00      	nop

000012ac <am_bsp_uart_string_print>:
//
//*****************************************************************************
void
am_bsp_uart_string_print(char *pcString)
{
    am_hal_uart_string_transmit_polled(AM_BSP_UART_PRINT_INST, pcString);
    12ac:	4601      	mov	r1, r0
    12ae:	2000      	movs	r0, #0
    12b0:	f000 bc48 	b.w	1b44 <am_hal_uart_string_transmit_polled>

000012b4 <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    12b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12b6:	4605      	mov	r5, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    12b8:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    12bc:	78ab      	ldrb	r3, [r5, #2]
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    12be:	786c      	ldrb	r4, [r5, #1]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    12c0:	78ef      	ldrb	r7, [r5, #3]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    12c2:	792e      	ldrb	r6, [r5, #4]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    12c4:	79a9      	ldrb	r1, [r5, #6]
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    12c6:	009a      	lsls	r2, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    12c8:	0064      	lsls	r4, r4, #1
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    12ca:	f002 0204 	and.w	r2, r2, #4
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    12ce:	f004 0402 	and.w	r4, r4, #2
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    12d2:	4314      	orrs	r4, r2
    12d4:	f047 0701 	orr.w	r7, r7, #1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    12d8:	79ea      	ldrb	r2, [r5, #7]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    12da:	01f6      	lsls	r6, r6, #7
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    12dc:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    12de:	b2f6      	uxtb	r6, r6
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    12e0:	7a2f      	ldrb	r7, [r5, #8]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    12e2:	0289      	lsls	r1, r1, #10
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    12e4:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    12e6:	f401 6180 	and.w	r1, r1, #1024	; 0x400
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    12ea:	7a6e      	ldrb	r6, [r5, #9]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    12ec:	02d2      	lsls	r2, r2, #11
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    12ee:	430c      	orrs	r4, r1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    12f0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    12f4:	7aa9      	ldrb	r1, [r5, #10]
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    12f6:	033f      	lsls	r7, r7, #12
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    12f8:	4314      	orrs	r4, r2
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    12fa:	b2bf      	uxth	r7, r7
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    12fc:	0436      	lsls	r6, r6, #16
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    12fe:	7aea      	ldrb	r2, [r5, #11]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1300:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    1302:	0509      	lsls	r1, r1, #20
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    1304:	f406 2770 	and.w	r7, r6, #983040	; 0xf0000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    1308:	0612      	lsls	r2, r2, #24
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    130a:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    130c:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    1310:	009b      	lsls	r3, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    1312:	f002 7780 	and.w	r7, r2, #16777216	; 0x1000000
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1316:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    1318:	f003 0108 	and.w	r1, r3, #8
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    131c:	433c      	orrs	r4, r7
    131e:	430c      	orrs	r4, r1
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1320:	f000 f94a 	bl	15b8 <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1324:	482c      	ldr	r0, [pc, #176]	; (13d8 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1326:	4b2d      	ldr	r3, [pc, #180]	; (13dc <am_hal_cachectrl_enable+0x128>)
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1328:	6004      	str	r4, [r0, #0]
    132a:	2232      	movs	r2, #50	; 0x32
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    132c:	681e      	ldr	r6, [r3, #0]
    132e:	0777      	lsls	r7, r6, #29
    1330:	d41e      	bmi.n	1370 <am_hal_cachectrl_enable+0xbc>
    1332:	681f      	ldr	r7, [r3, #0]
    1334:	077e      	lsls	r6, r7, #29
    1336:	f102 32ff 	add.w	r2, r2, #4294967295
    133a:	d419      	bmi.n	1370 <am_hal_cachectrl_enable+0xbc>
    133c:	6819      	ldr	r1, [r3, #0]
    133e:	074f      	lsls	r7, r1, #29
    1340:	d416      	bmi.n	1370 <am_hal_cachectrl_enable+0xbc>
    1342:	6818      	ldr	r0, [r3, #0]
    1344:	0746      	lsls	r6, r0, #29
    1346:	d413      	bmi.n	1370 <am_hal_cachectrl_enable+0xbc>
    1348:	681e      	ldr	r6, [r3, #0]
    134a:	0770      	lsls	r0, r6, #29
    134c:	d410      	bmi.n	1370 <am_hal_cachectrl_enable+0xbc>
    134e:	681f      	ldr	r7, [r3, #0]
    1350:	0779      	lsls	r1, r7, #29
    1352:	d40d      	bmi.n	1370 <am_hal_cachectrl_enable+0xbc>
    1354:	6819      	ldr	r1, [r3, #0]
    1356:	074f      	lsls	r7, r1, #29
    1358:	d40a      	bmi.n	1370 <am_hal_cachectrl_enable+0xbc>
    135a:	6818      	ldr	r0, [r3, #0]
    135c:	0746      	lsls	r6, r0, #29
    135e:	d407      	bmi.n	1370 <am_hal_cachectrl_enable+0xbc>
    1360:	681e      	ldr	r6, [r3, #0]
    1362:	0770      	lsls	r0, r6, #29
    1364:	d404      	bmi.n	1370 <am_hal_cachectrl_enable+0xbc>
    1366:	681f      	ldr	r7, [r3, #0]
    1368:	0779      	lsls	r1, r7, #29
    136a:	d401      	bmi.n	1370 <am_hal_cachectrl_enable+0xbc>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    136c:	3a09      	subs	r2, #9
    136e:	d1dd      	bne.n	132c <am_hal_cachectrl_enable+0x78>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    1370:	4b1a      	ldr	r3, [pc, #104]	; (13dc <am_hal_cachectrl_enable+0x128>)
    1372:	681a      	ldr	r2, [r3, #0]
    1374:	f042 0101 	orr.w	r1, r2, #1
    1378:	6019      	str	r1, [r3, #0]
    137a:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    137c:	6818      	ldr	r0, [r3, #0]
    137e:	0740      	lsls	r0, r0, #29
    1380:	d41e      	bmi.n	13c0 <am_hal_cachectrl_enable+0x10c>
    1382:	681e      	ldr	r6, [r3, #0]
    1384:	0771      	lsls	r1, r6, #29
    1386:	f102 32ff 	add.w	r2, r2, #4294967295
    138a:	d419      	bmi.n	13c0 <am_hal_cachectrl_enable+0x10c>
    138c:	681f      	ldr	r7, [r3, #0]
    138e:	077f      	lsls	r7, r7, #29
    1390:	d416      	bmi.n	13c0 <am_hal_cachectrl_enable+0x10c>
    1392:	6819      	ldr	r1, [r3, #0]
    1394:	074e      	lsls	r6, r1, #29
    1396:	d413      	bmi.n	13c0 <am_hal_cachectrl_enable+0x10c>
    1398:	6818      	ldr	r0, [r3, #0]
    139a:	0740      	lsls	r0, r0, #29
    139c:	d410      	bmi.n	13c0 <am_hal_cachectrl_enable+0x10c>
    139e:	681e      	ldr	r6, [r3, #0]
    13a0:	0771      	lsls	r1, r6, #29
    13a2:	d40d      	bmi.n	13c0 <am_hal_cachectrl_enable+0x10c>
    13a4:	681f      	ldr	r7, [r3, #0]
    13a6:	077f      	lsls	r7, r7, #29
    13a8:	d40a      	bmi.n	13c0 <am_hal_cachectrl_enable+0x10c>
    13aa:	6819      	ldr	r1, [r3, #0]
    13ac:	074e      	lsls	r6, r1, #29
    13ae:	d407      	bmi.n	13c0 <am_hal_cachectrl_enable+0x10c>
    13b0:	6818      	ldr	r0, [r3, #0]
    13b2:	0740      	lsls	r0, r0, #29
    13b4:	d404      	bmi.n	13c0 <am_hal_cachectrl_enable+0x10c>
    13b6:	681e      	ldr	r6, [r3, #0]
    13b8:	0771      	lsls	r1, r6, #29
    13ba:	d401      	bmi.n	13c0 <am_hal_cachectrl_enable+0x10c>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    13bc:	3a09      	subs	r2, #9
    13be:	d1dd      	bne.n	137c <am_hal_cachectrl_enable+0xc8>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    13c0:	796d      	ldrb	r5, [r5, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    13c2:	4f05      	ldr	r7, [pc, #20]	; (13d8 <am_hal_cachectrl_enable+0x124>)
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );
    13c4:	022b      	lsls	r3, r5, #8
    13c6:	f403 7100 	and.w	r1, r3, #512	; 0x200
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    13ca:	f403 7280 	and.w	r2, r3, #256	; 0x100
    13ce:	4311      	orrs	r1, r2
    13d0:	430c      	orrs	r4, r1
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    13d2:	603c      	str	r4, [r7, #0]
    13d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13d6:	bf00      	nop
    13d8:	40018000 	.word	0x40018000
    13dc:	40018008 	.word	0x40018008

000013e0 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    13e0:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    13e2:	4604      	mov	r4, r0
    13e4:	b120      	cbz	r0, 13f0 <am_hal_clkgen_sysclk_select+0x10>
    13e6:	4a06      	ldr	r2, [pc, #24]	; (1400 <am_hal_clkgen_sysclk_select+0x20>)
    13e8:	4806      	ldr	r0, [pc, #24]	; (1404 <am_hal_clkgen_sysclk_select+0x24>)
    13ea:	2153      	movs	r1, #83	; 0x53
    13ec:	f000 f84e 	bl	148c <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    13f0:	4b05      	ldr	r3, [pc, #20]	; (1408 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the required operating value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    13f2:	4906      	ldr	r1, [pc, #24]	; (140c <am_hal_clkgen_sysclk_select+0x2c>)
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    13f4:	2047      	movs	r0, #71	; 0x47

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    13f6:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    13f8:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    13fa:	600c      	str	r4, [r1, #0]
    AM_REG(CLKGEN, CLKKEY) = 0;
    13fc:	601a      	str	r2, [r3, #0]
    13fe:	bd10      	pop	{r4, pc}
    1400:	00001cb8 	.word	0x00001cb8
    1404:	00001cf0 	.word	0x00001cf0
    1408:	40004014 	.word	0x40004014
    140c:	40004018 	.word	0x40004018

00001410 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1410:	4b04      	ldr	r3, [pc, #16]	; (1424 <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    1412:	4905      	ldr	r1, [pc, #20]	; (1428 <am_hal_clkgen_sysclk_get+0x18>)
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1414:	681a      	ldr	r2, [r3, #0]
            return 48000000;
    1416:	4805      	ldr	r0, [pc, #20]	; (142c <am_hal_clkgen_sysclk_get+0x1c>)
    switch ( ui32ClockSetting )
    1418:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    141c:	bf08      	it	eq
    141e:	4608      	moveq	r0, r1
    1420:	4770      	bx	lr
    1422:	bf00      	nop
    1424:	40004018 	.word	0x40004018
    1428:	02dc6c00 	.word	0x02dc6c00
    142c:	016e3600 	.word	0x016e3600

00001430 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1430:	0783      	lsls	r3, r0, #30
    1432:	d003      	beq.n	143c <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    1434:	4b02      	ldr	r3, [pc, #8]	; (1440 <am_hal_clkgen_osc_stop+0x10>)
    1436:	681a      	ldr	r2, [r3, #0]
    1438:	4310      	orrs	r0, r2
    143a:	6018      	str	r0, [r3, #0]
    143c:	4770      	bx	lr
    143e:	bf00      	nop
    1440:	4000400c 	.word	0x4000400c

00001444 <am_hal_clkgen_uarten_set>:
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    uint32_t ui32Mask;

    if ( (ui32Module >= AM_REG_UART_NUM_MODULES)        ||
    1444:	2801      	cmp	r0, #1
    1446:	d900      	bls.n	144a <am_hal_clkgen_uarten_set+0x6>
    1448:	4770      	bx	lr
    144a:	2903      	cmp	r1, #3
    144c:	d8fc      	bhi.n	1448 <am_hal_clkgen_uarten_set+0x4>
{
    144e:	b530      	push	{r4, r5, lr}
         (ui32UartEn > AM_HAL_CLKGEN_UARTEN_EN_POWER_SAV) )
    {
        return;
    }

    ui32UartEn <<= (ui32Module * AM_HAL_CLKGEN_UARTEN_UARTENn_S(ui32Module));
    1450:	fb00 f500 	mul.w	r5, r0, r0
{
    1454:	b083      	sub	sp, #12
    1456:	4604      	mov	r4, r0
    ui32UartEn <<= (ui32Module * AM_HAL_CLKGEN_UARTEN_UARTENn_S(ui32Module));
    1458:	00e8      	lsls	r0, r5, #3
    145a:	fa01 f500 	lsl.w	r5, r1, r0
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    145e:	f000 f81b 	bl	1498 <am_hal_interrupt_master_disable>

    //
    // Set the UART clock
    //
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    1462:	4b09      	ldr	r3, [pc, #36]	; (1488 <am_hal_clkgen_uarten_set+0x44>)
    AM_CRITICAL_BEGIN_ASM
    1464:	9001      	str	r0, [sp, #4]
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    1466:	681a      	ldr	r2, [r3, #0]
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));
    1468:	f04f 0c03 	mov.w	ip, #3
    146c:	00e1      	lsls	r1, r4, #3
    146e:	fa0c f401 	lsl.w	r4, ip, r1
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    1472:	ea22 0004 	bic.w	r0, r2, r4
    1476:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, UARTEN) |= ui32UartEn;
    1478:	6819      	ldr	r1, [r3, #0]
    147a:	430d      	orrs	r5, r1
    147c:	601d      	str	r5, [r3, #0]

    //
    // Begin critical section.
    //
    AM_CRITICAL_END_ASM
    147e:	9801      	ldr	r0, [sp, #4]
    1480:	f000 f80e 	bl	14a0 <am_hal_interrupt_master_set>
}
    1484:	b003      	add	sp, #12
    1486:	bd30      	pop	{r4, r5, pc}
    1488:	40004034 	.word	0x40004034

0000148c <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    148c:	e7fe      	b.n	148c <am_hal_debug_error>
    148e:	bf00      	nop

00001490 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1490:	4b00      	ldr	r3, [pc, #0]	; (1494 <am_hal_flash_delay+0x4>)
    1492:	4718      	bx	r3
    1494:	0800009d 	.word	0x0800009d

00001498 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1498:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    149c:	b672      	cpsid	i
    __asm("    bx lr");
    149e:	4770      	bx	lr

000014a0 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    14a0:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    14a4:	4770      	bx	lr
    14a6:	bf00      	nop

000014a8 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    14a8:	490d      	ldr	r1, [pc, #52]	; (14e0 <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    14aa:	4b0e      	ldr	r3, [pc, #56]	; (14e4 <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    14ac:	4a0e      	ldr	r2, [pc, #56]	; (14e8 <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    14ae:	681b      	ldr	r3, [r3, #0]
{
    14b0:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    14b2:	680d      	ldr	r5, [r1, #0]
    14b4:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    14b6:	6815      	ldr	r5, [r2, #0]
    14b8:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    14ba:	4c0c      	ldr	r4, [pc, #48]	; (14ec <am_hal_mcuctrl_fault_status+0x44>)
    14bc:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    14be:	4329      	orrs	r1, r5
    14c0:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    14c2:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    14c4:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    14c8:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    14ca:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    14cc:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    14d0:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    14d4:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    14d6:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    14d8:	6142      	str	r2, [r0, #20]
}
    14da:	bc70      	pop	{r4, r5, r6}
    14dc:	4770      	bx	lr
    14de:	bf00      	nop
    14e0:	400201c4 	.word	0x400201c4
    14e4:	400201cc 	.word	0x400201cc
    14e8:	400201c0 	.word	0x400201c0
    14ec:	400201c8 	.word	0x400201c8

000014f0 <am_hal_pwrctrl_periph_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    14f0:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    14f2:	4604      	mov	r4, r0
{
    14f4:	b082      	sub	sp, #8
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    14f6:	b1b8      	cbz	r0, 1528 <am_hal_pwrctrl_periph_enable+0x38>
    14f8:	1e43      	subs	r3, r0, #1
    14fa:	4203      	tst	r3, r0
    14fc:	d114      	bne.n	1528 <am_hal_pwrctrl_periph_enable+0x38>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    14fe:	f7ff ffcb 	bl	1498 <am_hal_interrupt_master_disable>

    //
    // Enable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    1502:	4a18      	ldr	r2, [pc, #96]	; (1564 <am_hal_pwrctrl_periph_enable+0x74>)
    AM_CRITICAL_BEGIN_ASM
    1504:	9001      	str	r0, [sp, #4]
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    1506:	6810      	ldr	r0, [r2, #0]
    1508:	4320      	orrs	r0, r4
    150a:	6010      	str	r0, [r2, #0]

    //
    // End Critical Section.
    //
    AM_CRITICAL_END_ASM
    150c:	9801      	ldr	r0, [sp, #4]
    150e:	f7ff ffc7 	bl	14a0 <am_hal_interrupt_master_set>

    //
    // Wait for the power to stablize.  Using a simple delay loop is more
    // power efficient than a polling loop.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);
    1512:	200e      	movs	r0, #14
    1514:	f7ff ffbc 	bl	1490 <am_hal_flash_delay>

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    1518:	f014 0f0e 	tst.w	r4, #14
    151c:	d10a      	bne.n	1534 <am_hal_pwrctrl_periph_enable+0x44>
    151e:	f014 0f70 	tst.w	r4, #112	; 0x70
    1522:	d00e      	beq.n	1542 <am_hal_pwrctrl_periph_enable+0x52>
    1524:	2408      	movs	r4, #8
    1526:	e006      	b.n	1536 <am_hal_pwrctrl_periph_enable+0x46>
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1528:	4a0f      	ldr	r2, [pc, #60]	; (1568 <am_hal_pwrctrl_periph_enable+0x78>)
    152a:	4810      	ldr	r0, [pc, #64]	; (156c <am_hal_pwrctrl_periph_enable+0x7c>)
    152c:	2160      	movs	r1, #96	; 0x60
    152e:	f7ff ffad 	bl	148c <am_hal_debug_error>
    1532:	e7e4      	b.n	14fe <am_hal_pwrctrl_periph_enable+0xe>
    POLL_PWRSTATUS(ui32Peripheral);
    1534:	2404      	movs	r4, #4
    1536:	4a0e      	ldr	r2, [pc, #56]	; (1570 <am_hal_pwrctrl_periph_enable+0x80>)
    1538:	6813      	ldr	r3, [r2, #0]
    153a:	421c      	tst	r4, r3
    153c:	d0fc      	beq.n	1538 <am_hal_pwrctrl_periph_enable+0x48>
}
    153e:	b002      	add	sp, #8
    1540:	bd10      	pop	{r4, pc}
    POLL_PWRSTATUS(ui32Peripheral);
    1542:	f240 1181 	movw	r1, #385	; 0x181
    1546:	420c      	tst	r4, r1
    1548:	d108      	bne.n	155c <am_hal_pwrctrl_periph_enable+0x6c>
    154a:	05a3      	lsls	r3, r4, #22
    154c:	d408      	bmi.n	1560 <am_hal_pwrctrl_periph_enable+0x70>
    154e:	f414 6f80 	tst.w	r4, #1024	; 0x400
    1552:	bf14      	ite	ne
    1554:	2410      	movne	r4, #16
    1556:	f04f 34ff 	moveq.w	r4, #4294967295
    155a:	e7ec      	b.n	1536 <am_hal_pwrctrl_periph_enable+0x46>
    155c:	2402      	movs	r4, #2
    155e:	e7ea      	b.n	1536 <am_hal_pwrctrl_periph_enable+0x46>
    1560:	2480      	movs	r4, #128	; 0x80
    1562:	e7e8      	b.n	1536 <am_hal_pwrctrl_periph_enable+0x46>
    1564:	40021008 	.word	0x40021008
    1568:	00001d08 	.word	0x00001d08
    156c:	00001d3c 	.word	0x00001d3c
    1570:	40021014 	.word	0x40021014

00001574 <am_hal_pwrctrl_periph_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_disable(uint32_t ui32Peripheral)
{
    1574:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    1576:	4604      	mov	r4, r0
{
    1578:	b082      	sub	sp, #8
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    157a:	b110      	cbz	r0, 1582 <am_hal_pwrctrl_periph_disable+0xe>
    157c:	1e43      	subs	r3, r0, #1
    157e:	4203      	tst	r3, r0
    1580:	d004      	beq.n	158c <am_hal_pwrctrl_periph_disable+0x18>
    1582:	4a0a      	ldr	r2, [pc, #40]	; (15ac <am_hal_pwrctrl_periph_disable+0x38>)
    1584:	480a      	ldr	r0, [pc, #40]	; (15b0 <am_hal_pwrctrl_periph_disable+0x3c>)
    1586:	2190      	movs	r1, #144	; 0x90
    1588:	f7ff ff80 	bl	148c <am_hal_debug_error>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    158c:	f7ff ff84 	bl	1498 <am_hal_interrupt_master_disable>

    //
    // Disable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) &= ~ui32Peripheral;
    1590:	4a08      	ldr	r2, [pc, #32]	; (15b4 <am_hal_pwrctrl_periph_disable+0x40>)
    AM_CRITICAL_BEGIN_ASM
    1592:	9001      	str	r0, [sp, #4]
    AM_REG(PWRCTRL, DEVICEEN) &= ~ui32Peripheral;
    1594:	6810      	ldr	r0, [r2, #0]
    1596:	ea20 0104 	bic.w	r1, r0, r4
    159a:	6011      	str	r1, [r2, #0]

    //
    // End critical section.
    //
    AM_CRITICAL_END_ASM
    159c:	9801      	ldr	r0, [sp, #4]
    159e:	f7ff ff7f 	bl	14a0 <am_hal_interrupt_master_set>

    //
    // Wait for the power to stablize
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEDIS_DELAYCYCLES / 3);
    15a2:	200e      	movs	r0, #14
    15a4:	f7ff ff74 	bl	1490 <am_hal_flash_delay>
}
    15a8:	b002      	add	sp, #8
    15aa:	bd10      	pop	{r4, pc}
    15ac:	00001d08 	.word	0x00001d08
    15b0:	00001d3c 	.word	0x00001d3c
    15b4:	40021008 	.word	0x40021008

000015b8 <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    15b8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
{
    15bc:	b430      	push	{r4, r5}
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    15be:	d03a      	beq.n	1636 <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    15c0:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    15c4:	f000 809d 	beq.w	1702 <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    15c8:	2801      	cmp	r0, #1
    15ca:	f000 809d 	beq.w	1708 <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    15ce:	2803      	cmp	r0, #3
    15d0:	f000 80a6 	beq.w	1720 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    15d4:	2807      	cmp	r0, #7
    15d6:	f000 809c 	beq.w	1712 <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    15da:	280f      	cmp	r0, #15
    15dc:	f000 80a5 	beq.w	172a <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    15e0:	281f      	cmp	r0, #31
    15e2:	f000 80b0 	beq.w	1746 <am_hal_pwrctrl_memory_enable+0x18e>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    15e6:	283f      	cmp	r0, #63	; 0x3f
    15e8:	f000 80b4 	beq.w	1754 <am_hal_pwrctrl_memory_enable+0x19c>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    15ec:	287f      	cmp	r0, #127	; 0x7f
    15ee:	f000 80b8 	beq.w	1762 <am_hal_pwrctrl_memory_enable+0x1aa>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    15f2:	28ff      	cmp	r0, #255	; 0xff
    15f4:	f000 80a0 	beq.w	1738 <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    15f8:	f240 13ff 	movw	r3, #511	; 0x1ff
    15fc:	4298      	cmp	r0, r3
    15fe:	f000 80b7 	beq.w	1770 <am_hal_pwrctrl_memory_enable+0x1b8>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    1602:	f240 31ff 	movw	r1, #1023	; 0x3ff
    1606:	4288      	cmp	r0, r1
    1608:	f000 80b8 	beq.w	177c <am_hal_pwrctrl_memory_enable+0x1c4>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    160c:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1610:	4290      	cmp	r0, r2
    1612:	d00e      	beq.n	1632 <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    1614:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    1618:	f000 80b6 	beq.w	1788 <am_hal_pwrctrl_memory_enable+0x1d0>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    161c:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    1620:	42a0      	cmp	r0, r4
    1622:	f000 80b4 	beq.w	178e <am_hal_pwrctrl_memory_enable+0x1d6>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    1626:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    162a:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    162e:	4560      	cmp	r0, ip
    1630:	d132      	bne.n	1698 <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    1632:	495b      	ldr	r1, [pc, #364]	; (17a0 <am_hal_pwrctrl_memory_enable+0x1e8>)
    1634:	e066      	b.n	1704 <am_hal_pwrctrl_memory_enable+0x14c>
    1636:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    163a:	2340      	movs	r3, #64	; 0x40
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    163c:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    163e:	4c59      	ldr	r4, [pc, #356]	; (17a4 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1640:	6825      	ldr	r5, [r4, #0]
    1642:	402a      	ands	r2, r5
    1644:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    1646:	4a57      	ldr	r2, [pc, #348]	; (17a4 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1648:	6814      	ldr	r4, [r2, #0]
    164a:	4320      	orrs	r0, r4
    164c:	6010      	str	r0, [r2, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    164e:	2b00      	cmp	r3, #0
    1650:	d029      	beq.n	16a6 <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1652:	4d55      	ldr	r5, [pc, #340]	; (17a8 <am_hal_pwrctrl_memory_enable+0x1f0>)
    1654:	6828      	ldr	r0, [r5, #0]
        while ( --i32TOcnt              &&
    1656:	4218      	tst	r0, r3
    1658:	bf18      	it	ne
    165a:	20c6      	movne	r0, #198	; 0xc6
    165c:	d01f      	beq.n	169e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    165e:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1660:	421a      	tst	r2, r3
    1662:	d01c      	beq.n	169e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1664:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1666:	421c      	tst	r4, r3
    1668:	d019      	beq.n	169e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    166a:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    166c:	421a      	tst	r2, r3
    166e:	d016      	beq.n	169e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1670:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1672:	421c      	tst	r4, r3
    1674:	d013      	beq.n	169e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1676:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1678:	421a      	tst	r2, r3
    167a:	d010      	beq.n	169e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    167c:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    167e:	421c      	tst	r4, r3
    1680:	d00d      	beq.n	169e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1682:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1684:	421a      	tst	r2, r3
    1686:	d00a      	beq.n	169e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1688:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    168a:	421c      	tst	r4, r3
    168c:	d007      	beq.n	169e <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    168e:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1690:	421a      	tst	r2, r3
    1692:	d004      	beq.n	169e <am_hal_pwrctrl_memory_enable+0xe6>
    1694:	3809      	subs	r0, #9
    1696:	d1e2      	bne.n	165e <am_hal_pwrctrl_memory_enable+0xa6>
        return false;
    1698:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    169a:	bc30      	pop	{r4, r5}
    169c:	4770      	bx	lr
    if ( ui32PwrStatEnMask )
    169e:	b911      	cbnz	r1, 16a6 <am_hal_pwrctrl_memory_enable+0xee>
    return true;
    16a0:	2001      	movs	r0, #1
}
    16a2:	bc30      	pop	{r4, r5}
    16a4:	4770      	bx	lr
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    16a6:	4b40      	ldr	r3, [pc, #256]	; (17a8 <am_hal_pwrctrl_memory_enable+0x1f0>)
    16a8:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    16aa:	ea31 0405 	bics.w	r4, r1, r5
    16ae:	bf18      	it	ne
    16b0:	24c6      	movne	r4, #198	; 0xc6
    16b2:	d0f5      	beq.n	16a0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    16b4:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    16b6:	ea31 0000 	bics.w	r0, r1, r0
    16ba:	d0f1      	beq.n	16a0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    16bc:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    16be:	ea31 0002 	bics.w	r0, r1, r2
    16c2:	d0ed      	beq.n	16a0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    16c4:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    16c6:	ea31 0005 	bics.w	r0, r1, r5
    16ca:	d0e9      	beq.n	16a0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    16cc:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    16ce:	ea31 0000 	bics.w	r0, r1, r0
    16d2:	d0e5      	beq.n	16a0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    16d4:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    16d6:	ea31 0002 	bics.w	r0, r1, r2
    16da:	d0e1      	beq.n	16a0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    16dc:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    16de:	ea31 0005 	bics.w	r0, r1, r5
    16e2:	d0dd      	beq.n	16a0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    16e4:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    16e6:	ea31 0000 	bics.w	r0, r1, r0
    16ea:	d0d9      	beq.n	16a0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    16ec:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    16ee:	ea31 0002 	bics.w	r0, r1, r2
    16f2:	d0d5      	beq.n	16a0 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    16f4:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    16f6:	ea31 0005 	bics.w	r0, r1, r5
    16fa:	d0d1      	beq.n	16a0 <am_hal_pwrctrl_memory_enable+0xe8>
    16fc:	3c09      	subs	r4, #9
    16fe:	d1d9      	bne.n	16b4 <am_hal_pwrctrl_memory_enable+0xfc>
    1700:	e7ca      	b.n	1698 <am_hal_pwrctrl_memory_enable+0xe0>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    1702:	2160      	movs	r1, #96	; 0x60
{
    1704:	2300      	movs	r3, #0
    1706:	e79e      	b.n	1646 <am_hal_pwrctrl_memory_enable+0x8e>
    1708:	4a28      	ldr	r2, [pc, #160]	; (17ac <am_hal_pwrctrl_memory_enable+0x1f4>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    170a:	4b29      	ldr	r3, [pc, #164]	; (17b0 <am_hal_pwrctrl_memory_enable+0x1f8>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    170c:	f44f 7180 	mov.w	r1, #256	; 0x100
    1710:	e795      	b.n	163e <am_hal_pwrctrl_memory_enable+0x86>
    1712:	f46f 62ff 	mvn.w	r2, #2040	; 0x7f8
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1716:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    171a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    171e:	e78e      	b.n	163e <am_hal_pwrctrl_memory_enable+0x86>
    1720:	4a24      	ldr	r2, [pc, #144]	; (17b4 <am_hal_pwrctrl_memory_enable+0x1fc>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1722:	4b25      	ldr	r3, [pc, #148]	; (17b8 <am_hal_pwrctrl_memory_enable+0x200>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    1724:	f44f 7140 	mov.w	r1, #768	; 0x300
    1728:	e789      	b.n	163e <am_hal_pwrctrl_memory_enable+0x86>
    172a:	f46f 62fe 	mvn.w	r2, #2032	; 0x7f0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    172e:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    1732:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    1736:	e782      	b.n	163e <am_hal_pwrctrl_memory_enable+0x86>
    1738:	f46f 62e0 	mvn.w	r2, #1792	; 0x700
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    173c:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    1740:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    1744:	e77b      	b.n	163e <am_hal_pwrctrl_memory_enable+0x86>
    1746:	f46f 62fc 	mvn.w	r2, #2016	; 0x7e0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    174a:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    174e:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    1752:	e774      	b.n	163e <am_hal_pwrctrl_memory_enable+0x86>
    1754:	f46f 62f8 	mvn.w	r2, #1984	; 0x7c0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1758:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    175c:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    1760:	e76d      	b.n	163e <am_hal_pwrctrl_memory_enable+0x86>
    1762:	f46f 62f0 	mvn.w	r2, #1920	; 0x780
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1766:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    176a:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    176e:	e766      	b.n	163e <am_hal_pwrctrl_memory_enable+0x86>
    1770:	f46f 62c0 	mvn.w	r2, #1536	; 0x600
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1774:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    1778:	4910      	ldr	r1, [pc, #64]	; (17bc <am_hal_pwrctrl_memory_enable+0x204>)
    177a:	e760      	b.n	163e <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    177c:	4910      	ldr	r1, [pc, #64]	; (17c0 <am_hal_pwrctrl_memory_enable+0x208>)
    177e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1782:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1786:	e75a      	b.n	163e <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1788:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    178c:	e7ba      	b.n	1704 <am_hal_pwrctrl_memory_enable+0x14c>
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    178e:	4805      	ldr	r0, [pc, #20]	; (17a4 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1790:	6803      	ldr	r3, [r0, #0]
    1792:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    1796:	6001      	str	r1, [r0, #0]
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1798:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
        ui32PwrStatEnMask  = 0;
    179c:	2100      	movs	r1, #0
    179e:	e758      	b.n	1652 <am_hal_pwrctrl_memory_enable+0x9a>
    17a0:	0007ff00 	.word	0x0007ff00
    17a4:	40021010 	.word	0x40021010
    17a8:	40021014 	.word	0x40021014
    17ac:	fffff801 	.word	0xfffff801
    17b0:	0007fe00 	.word	0x0007fe00
    17b4:	fffff803 	.word	0xfffff803
    17b8:	0007fc00 	.word	0x0007fc00
    17bc:	0001ff00 	.word	0x0001ff00
    17c0:	0003ff00 	.word	0x0003ff00

000017c4 <am_hal_pwrctrl_bucks_enable>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    17c4:	4b0b      	ldr	r3, [pc, #44]	; (17f4 <am_hal_pwrctrl_bucks_enable+0x30>)
    17c6:	681a      	ldr	r2, [r3, #0]
    17c8:	0792      	lsls	r2, r2, #30
    17ca:	d502      	bpl.n	17d2 <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    17cc:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    17ce:	07c3      	lsls	r3, r0, #31
    17d0:	d40e      	bmi.n	17f0 <am_hal_pwrctrl_bucks_enable+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    17d2:	4b09      	ldr	r3, [pc, #36]	; (17f8 <am_hal_pwrctrl_bucks_enable+0x34>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    17d4:	4a07      	ldr	r2, [pc, #28]	; (17f4 <am_hal_pwrctrl_bucks_enable+0x30>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    17d6:	6819      	ldr	r1, [r3, #0]
    17d8:	f041 0002 	orr.w	r0, r1, #2
    17dc:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    17de:	6819      	ldr	r1, [r3, #0]
    17e0:	f041 0001 	orr.w	r0, r1, #1
    17e4:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    17e6:	6813      	ldr	r3, [r2, #0]
    17e8:	f003 0103 	and.w	r1, r3, #3
    17ec:	2903      	cmp	r1, #3
    17ee:	d1fa      	bne.n	17e6 <am_hal_pwrctrl_bucks_enable+0x22>
    17f0:	4770      	bx	lr
    17f2:	bf00      	nop
    17f4:	40021004 	.word	0x40021004
    17f8:	40021000 	.word	0x40021000

000017fc <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    17fc:	4b12      	ldr	r3, [pc, #72]	; (1848 <am_hal_pwrctrl_bucks_disable+0x4c>)
    17fe:	681a      	ldr	r2, [r3, #0]
    1800:	0792      	lsls	r2, r2, #30
    1802:	d402      	bmi.n	180a <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    1804:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1806:	07c3      	lsls	r3, r0, #31
    1808:	d51c      	bpl.n	1844 <am_hal_pwrctrl_bucks_disable+0x48>
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    180a:	4910      	ldr	r1, [pc, #64]	; (184c <am_hal_pwrctrl_bucks_disable+0x50>)
    180c:	680b      	ldr	r3, [r1, #0]
    180e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1812:	2a20      	cmp	r2, #32
    1814:	d00b      	beq.n	182e <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    1816:	4b0e      	ldr	r3, [pc, #56]	; (1850 <am_hal_pwrctrl_bucks_disable+0x54>)
    1818:	681a      	ldr	r2, [r3, #0]
    181a:	f022 0002 	bic.w	r0, r2, #2
    181e:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    1820:	6819      	ldr	r1, [r3, #0]
    1822:	f021 0201 	bic.w	r2, r1, #1
    1826:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    1828:	200a      	movs	r0, #10
    182a:	f7ff be31 	b.w	1490 <am_hal_flash_delay>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_PWRADC_EN) )
    182e:	4809      	ldr	r0, [pc, #36]	; (1854 <am_hal_pwrctrl_bucks_disable+0x58>)
    1830:	6801      	ldr	r1, [r0, #0]
    if ( isRev_ADC()  &&
    1832:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1836:	d1ee      	bne.n	1816 <am_hal_pwrctrl_bucks_disable+0x1a>
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    1838:	4805      	ldr	r0, [pc, #20]	; (1850 <am_hal_pwrctrl_bucks_disable+0x54>)
    183a:	6803      	ldr	r3, [r0, #0]
    183c:	f003 0105 	and.w	r1, r3, #5
    1840:	6001      	str	r1, [r0, #0]
    1842:	e7f1      	b.n	1828 <am_hal_pwrctrl_bucks_disable+0x2c>
    1844:	4770      	bx	lr
    1846:	bf00      	nop
    1848:	40021004 	.word	0x40021004
    184c:	4002000c 	.word	0x4002000c
    1850:	40021000 	.word	0x40021000
    1854:	40021008 	.word	0x40021008

00001858 <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1858:	4905      	ldr	r1, [pc, #20]	; (1870 <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    185a:	4a06      	ldr	r2, [pc, #24]	; (1874 <am_hal_pwrctrl_low_power_init+0x1c>)
    AM_REG(PWRCTRL, SRAMCTRL) |=
    185c:	680b      	ldr	r3, [r1, #0]
    185e:	f043 0006 	orr.w	r0, r3, #6
    1862:	6008      	str	r0, [r1, #0]
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1864:	6811      	ldr	r1, [r2, #0]
    1866:	f021 0304 	bic.w	r3, r1, #4
    186a:	6013      	str	r3, [r2, #0]
    186c:	4770      	bx	lr
    186e:	bf00      	nop
    1870:	40021018 	.word	0x40021018
    1874:	40021000 	.word	0x40021000

00001878 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1878:	4a05      	ldr	r2, [pc, #20]	; (1890 <am_hal_rtc_osc_select+0x18>)
    187a:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    187c:	b918      	cbnz	r0, 1886 <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    187e:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1882:	6010      	str	r0, [r2, #0]
    1884:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1886:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    188a:	6011      	str	r1, [r2, #0]
    188c:	4770      	bx	lr
    188e:	bf00      	nop
    1890:	4000400c 	.word	0x4000400c

00001894 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    1894:	4a02      	ldr	r2, [pc, #8]	; (18a0 <am_hal_rtc_osc_disable+0xc>)
    1896:	6813      	ldr	r3, [r2, #0]
    1898:	f043 0010 	orr.w	r0, r3, #16
    189c:	6010      	str	r0, [r2, #0]
    189e:	4770      	bx	lr
    18a0:	40004050 	.word	0x40004050

000018a4 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    18a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    18a6:	b083      	sub	sp, #12
    18a8:	4604      	mov	r4, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    18aa:	f7ff fdf5 	bl	1498 <am_hal_interrupt_master_disable>
    18ae:	4605      	mov	r5, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    18b0:	b124      	cbz	r4, 18bc <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    18b2:	4b42      	ldr	r3, [pc, #264]	; (19bc <am_hal_sysctrl_sleep+0x118>)
    18b4:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    18b6:	f010 0c01 	ands.w	ip, r0, #1
    18ba:	d00a      	beq.n	18d2 <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    18bc:	4a40      	ldr	r2, [pc, #256]	; (19c0 <am_hal_sysctrl_sleep+0x11c>)
    18be:	6811      	ldr	r1, [r2, #0]
    18c0:	f021 0604 	bic.w	r6, r1, #4
    18c4:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    18c6:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    18c8:	4628      	mov	r0, r5
    18ca:	f7ff fde9 	bl	14a0 <am_hal_interrupt_master_set>
}
    18ce:	b003      	add	sp, #12
    18d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    18d2:	4c3b      	ldr	r4, [pc, #236]	; (19c0 <am_hal_sysctrl_sleep+0x11c>)
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    18d4:	4b3b      	ldr	r3, [pc, #236]	; (19c4 <am_hal_sysctrl_sleep+0x120>)
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    18d6:	6820      	ldr	r0, [r4, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    18d8:	4e3b      	ldr	r6, [pc, #236]	; (19c8 <am_hal_sysctrl_sleep+0x124>)
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    18da:	4f3c      	ldr	r7, [pc, #240]	; (19cc <am_hal_sysctrl_sleep+0x128>)
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    18dc:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 19dc <am_hal_sysctrl_sleep+0x138>
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    18e0:	f040 0204 	orr.w	r2, r0, #4
    18e4:	6022      	str	r2, [r4, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    18e6:	681c      	ldr	r4, [r3, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    18e8:	6833      	ldr	r3, [r6, #0]
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    18ea:	f8de 2000 	ldr.w	r2, [lr]
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    18ee:	6839      	ldr	r1, [r7, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    18f0:	f004 07f0 	and.w	r7, r4, #240	; 0xf0
                   CHKBUCKZX_REV : 0x0;
    18f4:	2f20      	cmp	r7, #32
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    18f6:	f103 30ff 	add.w	r0, r3, #4294967295
                   CHKBUCKZX_REV : 0x0;
    18fa:	bf14      	ite	ne
    18fc:	2700      	movne	r7, #0
    18fe:	2702      	moveq	r7, #2
                    CHKBUCKZX_TIMER : 0x0;
    1900:	2803      	cmp	r0, #3
    1902:	bf98      	it	ls
    1904:	f04f 0c04 	movls.w	ip, #4
                     CHKBUCKZX_BUCKS : 0x0;
    1908:	f012 0403 	ands.w	r4, r2, #3
    190c:	bf18      	it	ne
    190e:	2401      	movne	r4, #1
    g_buckZX_chk |= ( ui32SupplySrc &
    1910:	f240 53ff 	movw	r3, #1535	; 0x5ff
    g_buckZX_chk |= (ui32SupplySrc &
    1914:	433c      	orrs	r4, r7
                0x0 : CHKBUCKZX_DEVEN;
    1916:	ea11 0703 	ands.w	r7, r1, r3
    g_buckZX_chk |= (ui32SupplySrc &
    191a:	ea44 040c 	orr.w	r4, r4, ip
                0x0 : CHKBUCKZX_DEVEN;
    191e:	d103      	bne.n	1928 <am_hal_sysctrl_sleep+0x84>
    g_buckZX_chk |= ( ui32SupplySrc &
    1920:	f044 0408 	orr.w	r4, r4, #8
        if ( bBuckZX_chk )
    1924:	2c0f      	cmp	r4, #15
    1926:	d00a      	beq.n	193e <am_hal_sysctrl_sleep+0x9a>
        AM_ASM_WFI;
    1928:	bf30      	wfi
        if ( bBuckZX_chk )
    192a:	2c0f      	cmp	r4, #15
    192c:	d01a      	beq.n	1964 <am_hal_sysctrl_sleep+0xc0>
            g_bBuckRestoreComplete = true;
    192e:	4e28      	ldr	r6, [pc, #160]	; (19d0 <am_hal_sysctrl_sleep+0x12c>)
    1930:	2001      	movs	r0, #1
    1932:	7030      	strb	r0, [r6, #0]
    am_hal_interrupt_master_set(ui32Critical);
    1934:	4628      	mov	r0, r5
    1936:	f7ff fdb3 	bl	14a0 <am_hal_interrupt_master_set>
}
    193a:	b003      	add	sp, #12
    193c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ui32BuckTimer = g_ui32BuckTimer - 1;
    193e:	6832      	ldr	r2, [r6, #0]
    1940:	1e51      	subs	r1, r2, #1
    1942:	9100      	str	r1, [sp, #0]
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    1944:	9800      	ldr	r0, [sp, #0]
    1946:	f04f 31ff 	mov.w	r1, #4294967295
    194a:	f000 f92d 	bl	1ba8 <am_hal_ctimer_clear>
            am_hal_ctimer_period_set(ui32BuckTimer,
    194e:	9800      	ldr	r0, [sp, #0]
    1950:	463b      	mov	r3, r7
    1952:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    1956:	f04f 31ff 	mov.w	r1, #4294967295
    195a:	f000 f939 	bl	1bd0 <am_hal_ctimer_period_set>
            am_hal_pwrctrl_bucks_disable();
    195e:	f7ff ff4d 	bl	17fc <am_hal_pwrctrl_bucks_disable>
    1962:	e7e1      	b.n	1928 <am_hal_sysctrl_sleep+0x84>
    AM_CRITICAL_BEGIN_ASM
    1964:	f7ff fd98 	bl	1498 <am_hal_interrupt_master_disable>
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    1968:	4b1a      	ldr	r3, [pc, #104]	; (19d4 <am_hal_sysctrl_sleep+0x130>)
    AM_CRITICAL_BEGIN_ASM
    196a:	9001      	str	r0, [sp, #4]
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    196c:	681a      	ldr	r2, [r3, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    196e:	681a      	ldr	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    1970:	681f      	ldr	r7, [r3, #0]
    1972:	f027 043c 	bic.w	r4, r7, #60	; 0x3c
    1976:	f044 021c 	orr.w	r2, r4, #28
    197a:	601a      	str	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    197c:	6819      	ldr	r1, [r3, #0]
            g_bBuckRestoreComplete = false;
    197e:	4c14      	ldr	r4, [pc, #80]	; (19d0 <am_hal_sysctrl_sleep+0x12c>)
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    1980:	f421 30f0 	bic.w	r0, r1, #122880	; 0x1e000
    1984:	f440 4760 	orr.w	r7, r0, #57344	; 0xe000
    1988:	601f      	str	r7, [r3, #0]
    AM_CRITICAL_END_ASM
    198a:	9801      	ldr	r0, [sp, #4]
    198c:	f7ff fd88 	bl	14a0 <am_hal_interrupt_master_set>
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    1990:	201c      	movs	r0, #28
    1992:	f7ff fd7d 	bl	1490 <am_hal_flash_delay>
            am_hal_pwrctrl_bucks_enable();
    1996:	f7ff ff15 	bl	17c4 <am_hal_pwrctrl_bucks_enable>
            ui32BuckTimer = g_ui32BuckTimer - 1;
    199a:	6836      	ldr	r6, [r6, #0]
            g_ui32BuckInputs = 0;
    199c:	490e      	ldr	r1, [pc, #56]	; (19d8 <am_hal_sysctrl_sleep+0x134>)
            g_bBuckRestoreComplete = false;
    199e:	2200      	movs	r2, #0
            ui32BuckTimer = g_ui32BuckTimer - 1;
    19a0:	1e73      	subs	r3, r6, #1
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    19a2:	204c      	movs	r0, #76	; 0x4c
            ui32BuckTimer = g_ui32BuckTimer - 1;
    19a4:	9300      	str	r3, [sp, #0]
            g_bBuckRestoreComplete = false;
    19a6:	7022      	strb	r2, [r4, #0]
            g_ui32BuckInputs = 0;
    19a8:	600a      	str	r2, [r1, #0]
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    19aa:	f7ff fd71 	bl	1490 <am_hal_flash_delay>
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    19ae:	9800      	ldr	r0, [sp, #0]
    19b0:	f04f 31ff 	mov.w	r1, #4294967295
    19b4:	f000 f8e0 	bl	1b78 <am_hal_ctimer_start>
    19b8:	e786      	b.n	18c8 <am_hal_sysctrl_sleep+0x24>
    19ba:	bf00      	nop
    19bc:	40020250 	.word	0x40020250
    19c0:	e000ed10 	.word	0xe000ed10
    19c4:	4002000c 	.word	0x4002000c
    19c8:	1000111c 	.word	0x1000111c
    19cc:	40021008 	.word	0x40021008
    19d0:	10001115 	.word	0x10001115
    19d4:	40020068 	.word	0x40020068
    19d8:	10001118 	.word	0x10001118
    19dc:	40021000 	.word	0x40021000

000019e0 <am_hal_uart_config>:
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    19e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19e2:	460d      	mov	r5, r1
    19e4:	4607      	mov	r7, r0
    uint32_t ui32HFRC;

    //
    // Configure the Baudrate.
    //
    ui32HFRC = am_hal_clkgen_sysclk_get();
    19e6:	f7ff fd13 	bl	1410 <am_hal_clkgen_sysclk_get>
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    19ea:	682b      	ldr	r3, [r5, #0]
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    19ec:	0186      	lsls	r6, r0, #6
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    19ee:	0159      	lsls	r1, r3, #5
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    19f0:	fbb0 f4f1 	udiv	r4, r0, r1
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    19f4:	fbb6 f0f1 	udiv	r0, r6, r1
    19f8:	eba0 1684 	sub.w	r6, r0, r4, lsl #6
    am_hal_debug_assert_msg(ui32IntegerDivisor > 0, "Integer divisor MUST be greater than or equal to 1.");
    19fc:	b924      	cbnz	r4, 1a08 <am_hal_uart_config+0x28>
    19fe:	4a11      	ldr	r2, [pc, #68]	; (1a44 <am_hal_uart_config+0x64>)
    1a00:	4811      	ldr	r0, [pc, #68]	; (1a48 <am_hal_uart_config+0x68>)
    1a02:	2164      	movs	r1, #100	; 0x64
    1a04:	f7ff fd42 	bl	148c <am_hal_debug_error>
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    1a08:	f507 2280 	add.w	r2, r7, #262144	; 0x40000
    1a0c:	321c      	adds	r2, #28
    1a0e:	0317      	lsls	r7, r2, #12
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    1a10:	7a2b      	ldrb	r3, [r5, #8]
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    1a12:	627c      	str	r4, [r7, #36]	; 0x24
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    1a14:	627c      	str	r4, [r7, #36]	; 0x24
    AM_REGn(UART, ui32Module, FBRD) = ui32FractionDivisor;
    1a16:	62be      	str	r6, [r7, #40]	; 0x28
    ui32ConfigVal |= psConfig->ui32DataBits;
    1a18:	6868      	ldr	r0, [r5, #4]
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    1a1a:	68ec      	ldr	r4, [r5, #12]
    1a1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    1a1e:	2b00      	cmp	r3, #0
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    1a20:	ea40 0004 	orr.w	r0, r0, r4
    1a24:	ea40 0001 	orr.w	r0, r0, r1
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    1a28:	bf14      	ite	ne
    1a2a:	2108      	movne	r1, #8
    1a2c:	2100      	moveq	r1, #0
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    1a2e:	4308      	orrs	r0, r1
    1a30:	62f8      	str	r0, [r7, #44]	; 0x2c

    //
    // Write the flow control settings to the control register.
    //
    AM_REGn(UART, ui32Module, CR) |= psConfig->ui32FlowCtrl;
    1a32:	6b3e      	ldr	r6, [r7, #48]	; 0x30
    1a34:	692d      	ldr	r5, [r5, #16]
    1a36:	432e      	orrs	r6, r5
    1a38:	633e      	str	r6, [r7, #48]	; 0x30

    //
    // Set the clock select field for 24MHz from the HFRC
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    1a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1a3c:	f042 0310 	orr.w	r3, r2, #16
    1a40:	633b      	str	r3, [r7, #48]	; 0x30
    1a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a44:	00001d54 	.word	0x00001d54
    1a48:	00001d88 	.word	0x00001d88

00001a4c <am_hal_uart_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_enable(uint32_t ui32Module)
{
    1a4c:	b510      	push	{r4, lr}
    1a4e:	4604      	mov	r4, r0
    1a50:	b082      	sub	sp, #8
    //
    // Enable the UART, RX, and TX.
    //
    AM_REGan_SET(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    1a52:	f7ff fd21 	bl	1498 <am_hal_interrupt_master_disable>
    1a56:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
    1a5a:	331c      	adds	r3, #28
    1a5c:	0319      	lsls	r1, r3, #12
    1a5e:	9001      	str	r0, [sp, #4]
    1a60:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    1a62:	f442 7040 	orr.w	r0, r2, #768	; 0x300
    1a66:	f040 0401 	orr.w	r4, r0, #1
    1a6a:	630c      	str	r4, [r1, #48]	; 0x30
    1a6c:	9801      	ldr	r0, [sp, #4]
    1a6e:	f7ff fd17 	bl	14a0 <am_hal_interrupt_master_set>
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    1a72:	b002      	add	sp, #8
    1a74:	bd10      	pop	{r4, pc}
    1a76:	bf00      	nop

00001a78 <am_hal_uart_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_disable(uint32_t ui32Module)
{
    1a78:	b510      	push	{r4, lr}
    1a7a:	4604      	mov	r4, r0
    1a7c:	b082      	sub	sp, #8
    //
    // Disable the UART.
    //
    AM_REGan_CLR(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    1a7e:	f7ff fd0b 	bl	1498 <am_hal_interrupt_master_disable>
    1a82:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
    1a86:	331c      	adds	r3, #28
    1a88:	0319      	lsls	r1, r3, #12
    1a8a:	9001      	str	r0, [sp, #4]
    1a8c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    1a8e:	f422 7040 	bic.w	r0, r2, #768	; 0x300
    1a92:	f020 0401 	bic.w	r4, r0, #1
    1a96:	630c      	str	r4, [r1, #48]	; 0x30
    1a98:	9801      	ldr	r0, [sp, #4]
    1a9a:	f7ff fd01 	bl	14a0 <am_hal_interrupt_master_set>
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    1a9e:	b002      	add	sp, #8
    1aa0:	bd10      	pop	{r4, pc}
    1aa2:	bf00      	nop

00001aa4 <am_hal_uart_pwrctrl_enable>:
am_hal_uart_pwrctrl_enable(uint32_t ui32Module)
{
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    1aa4:	2801      	cmp	r0, #1
{
    1aa6:	b510      	push	{r4, lr}
    1aa8:	4604      	mov	r4, r0
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    1aaa:	d905      	bls.n	1ab8 <am_hal_uart_pwrctrl_enable+0x14>
    1aac:	4a05      	ldr	r2, [pc, #20]	; (1ac4 <am_hal_uart_pwrctrl_enable+0x20>)
    1aae:	4806      	ldr	r0, [pc, #24]	; (1ac8 <am_hal_uart_pwrctrl_enable+0x24>)
    1ab0:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    1ab4:	f7ff fcea 	bl	148c <am_hal_debug_error>
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    1ab8:	2080      	movs	r0, #128	; 0x80
    1aba:	40a0      	lsls	r0, r4
}
    1abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    1ac0:	f7ff bd16 	b.w	14f0 <am_hal_pwrctrl_periph_enable>
    1ac4:	00001d9c 	.word	0x00001d9c
    1ac8:	00001d88 	.word	0x00001d88

00001acc <am_hal_uart_pwrctrl_disable>:
am_hal_uart_pwrctrl_disable(uint32_t ui32Module)
{
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    1acc:	2801      	cmp	r0, #1
{
    1ace:	b510      	push	{r4, lr}
    1ad0:	4604      	mov	r4, r0
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    1ad2:	d905      	bls.n	1ae0 <am_hal_uart_pwrctrl_disable+0x14>
    1ad4:	4a05      	ldr	r2, [pc, #20]	; (1aec <am_hal_uart_pwrctrl_disable+0x20>)
    1ad6:	4806      	ldr	r0, [pc, #24]	; (1af0 <am_hal_uart_pwrctrl_disable+0x24>)
    1ad8:	f240 11bd 	movw	r1, #445	; 0x1bd
    1adc:	f7ff fcd6 	bl	148c <am_hal_debug_error>
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    1ae0:	2080      	movs	r0, #128	; 0x80
    1ae2:	40a0      	lsls	r0, r4
}
    1ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    1ae8:	f7ff bd44 	b.w	1574 <am_hal_pwrctrl_periph_disable>
    1aec:	00001d9c 	.word	0x00001d9c
    1af0:	00001d88 	.word	0x00001d88

00001af4 <am_hal_uart_clock_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    1af4:	b510      	push	{r4, lr}
    //
    // Set CLKGEN.UARTEN, clear the field then write the desired enable value
    // Valid enable values are DIS, EN, REDUCE_FREQ, EN_POWER_SAV.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    1af6:	2101      	movs	r1, #1
{
    1af8:	4604      	mov	r4, r0
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    1afa:	f7ff fca3 	bl	1444 <am_hal_clkgen_uarten_set>

    //
    // Enable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKEN_M;
    1afe:	f504 2080 	add.w	r0, r4, #262144	; 0x40000
    1b02:	301c      	adds	r0, #28
    1b04:	0301      	lsls	r1, r0, #12
    1b06:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    1b08:	f043 0208 	orr.w	r2, r3, #8
    1b0c:	630a      	str	r2, [r1, #48]	; 0x30

    //
    // Select default UART clock source
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    1b0e:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    1b10:	f044 0010 	orr.w	r0, r4, #16
    1b14:	6308      	str	r0, [r1, #48]	; 0x30
    1b16:	bd10      	pop	{r4, pc}

00001b18 <am_hal_uart_clock_disable>:
am_hal_uart_clock_disable(uint32_t ui32Module)
{
    //
    // Disable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) &= ~AM_REG_UART_CR_CLKEN_M;
    1b18:	f500 2380 	add.w	r3, r0, #262144	; 0x40000
    1b1c:	331c      	adds	r3, #28
    1b1e:	031b      	lsls	r3, r3, #12

    //
    // Disable the UART clock in the CLKGEN module.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_DIS);
    1b20:	2100      	movs	r1, #0
    AM_REGn(UART, ui32Module, CR) &= ~AM_REG_UART_CR_CLKEN_M;
    1b22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1b24:	f022 0208 	bic.w	r2, r2, #8
    1b28:	631a      	str	r2, [r3, #48]	; 0x30
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_DIS);
    1b2a:	f7ff bc8b 	b.w	1444 <am_hal_clkgen_uarten_set>
    1b2e:	bf00      	nop

00001b30 <am_hal_uart_fifo_config>:
am_hal_uart_fifo_config(uint32_t ui32Module, uint32_t ui32LvlCfg)
{
    //
    // Enable the use of FIFOs.
    //
    AM_REGn(UART, ui32Module, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    1b30:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1b34:	301c      	adds	r0, #28
    1b36:	0302      	lsls	r2, r0, #12
    1b38:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1b3a:	f043 0010 	orr.w	r0, r3, #16
    1b3e:	62d0      	str	r0, [r2, #44]	; 0x2c

    //
    // Write the FIFO level register.
    //
    AM_REGn(UART, ui32Module, IFLS) = ui32LvlCfg;
    1b40:	6351      	str	r1, [r2, #52]	; 0x34
    1b42:	4770      	bx	lr

00001b44 <am_hal_uart_string_transmit_polled>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_string_transmit_polled(uint32_t ui32Module, char *pcString)
{
    1b44:	b410      	push	{r4}
    while (*pcString)
    1b46:	780c      	ldrb	r4, [r1, #0]
    1b48:	b16c      	cbz	r4, 1b66 <am_hal_uart_string_transmit_polled+0x22>
    1b4a:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    1b4e:	301c      	adds	r0, #28
    1b50:	0300      	lsls	r0, r0, #12
    1b52:	f100 0218 	add.w	r2, r0, #24
    {
        //
        // Wait for space, i.e.  TX FIFO EMPTY.
        //
        while (AM_BFRn(UART, ui32Module, FR, TXFF));
    1b56:	6813      	ldr	r3, [r2, #0]
    1b58:	069b      	lsls	r3, r3, #26
    1b5a:	d4fc      	bmi.n	1b56 <am_hal_uart_string_transmit_polled+0x12>

        //
        // Write the char.
        //
        AM_REGn(UART, ui32Module, DR) = *pcString++;
    1b5c:	6004      	str	r4, [r0, #0]
    while (*pcString)
    1b5e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    1b62:	2c00      	cmp	r4, #0
    1b64:	d1f7      	bne.n	1b56 <am_hal_uart_string_transmit_polled+0x12>
    }
}
    1b66:	f85d 4b04 	ldr.w	r4, [sp], #4
    1b6a:	4770      	bx	lr

00001b6c <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    1b6c:	4b01      	ldr	r3, [pc, #4]	; (1b74 <am_hal_vcomp_disable+0x8>)
    1b6e:	2237      	movs	r2, #55	; 0x37
    1b70:	601a      	str	r2, [r3, #0]
    1b72:	4770      	bx	lr
    1b74:	4000c008 	.word	0x4000c008

00001b78 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1b78:	b570      	push	{r4, r5, r6, lr}
    1b7a:	b082      	sub	sp, #8
    1b7c:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    1b7e:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1b80:	f7ff fc8a 	bl	1498 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1b84:	4d07      	ldr	r5, [pc, #28]	; (1ba4 <am_hal_ctimer_start+0x2c>)
    AM_CRITICAL_BEGIN_ASM
    1b86:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    1b88:	5971      	ldr	r1, [r6, r5]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    1b8a:	f004 2308 	and.w	r3, r4, #134219776	; 0x8000800
    1b8e:	ea21 0003 	bic.w	r0, r1, r3
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    1b92:	f004 1201 	and.w	r2, r4, #65537	; 0x10001
    1b96:	4302      	orrs	r2, r0
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    1b98:	5172      	str	r2, [r6, r5]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1b9a:	9801      	ldr	r0, [sp, #4]
    1b9c:	f7ff fc80 	bl	14a0 <am_hal_interrupt_master_set>
} // am_hal_ctimer_start()
    1ba0:	b002      	add	sp, #8
    1ba2:	bd70      	pop	{r4, r5, r6, pc}
    1ba4:	4000800c 	.word	0x4000800c

00001ba8 <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1ba8:	b570      	push	{r4, r5, r6, lr}
    1baa:	b082      	sub	sp, #8
    1bac:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    1bae:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1bb0:	f7ff fc72 	bl	1498 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1bb4:	4d05      	ldr	r5, [pc, #20]	; (1bcc <am_hal_ctimer_clear+0x24>)
    AM_CRITICAL_BEGIN_ASM
    1bb6:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    1bb8:	5971      	ldr	r1, [r6, r5]
    1bba:	f004 2008 	and.w	r0, r4, #134219776	; 0x8000800
    1bbe:	4308      	orrs	r0, r1
    1bc0:	5170      	str	r0, [r6, r5]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1bc2:	9801      	ldr	r0, [sp, #4]
    1bc4:	f7ff fc6c 	bl	14a0 <am_hal_interrupt_master_set>
} // am_hal_ctimer_clear()
    1bc8:	b002      	add	sp, #8
    1bca:	bd70      	pop	{r4, r5, r6, pc}
    1bcc:	4000800c 	.word	0x4000800c

00001bd0 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1bd4:	b082      	sub	sp, #8
    1bd6:	4688      	mov	r8, r1
    1bd8:	461f      	mov	r7, r3
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    1bda:	ea4f 1900 	mov.w	r9, r0, lsl #4
{
    1bde:	4614      	mov	r4, r2
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1be0:	f7ff fc5a 	bl	1498 <am_hal_interrupt_master_disable>
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1be4:	f8df a098 	ldr.w	sl, [pc, #152]	; 1c80 <am_hal_ctimer_period_set+0xb0>
    AM_CRITICAL_BEGIN_ASM
    1be8:	9001      	str	r0, [sp, #4]
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1bea:	f518 3f80 	cmn.w	r8, #65536	; 0x10000
                                    AM_REG_CTIMER_CMPRA0_O +
    1bee:	4d21      	ldr	r5, [pc, #132]	; (1c74 <am_hal_ctimer_period_set+0xa4>)
                                    AM_REG_CTIMER_CMPRB0_O +
    1bf0:	4e21      	ldr	r6, [pc, #132]	; (1c78 <am_hal_ctimer_period_set+0xa8>)
    ui32Mode = *pui32ControlReg;
    1bf2:	f859 300a 	ldr.w	r3, [r9, sl]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1bf6:	d01b      	beq.n	1c30 <am_hal_ctimer_period_set+0x60>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1bf8:	f403 70c0 	and.w	r0, r3, #384	; 0x180
    1bfc:	2880      	cmp	r0, #128	; 0x80
    1bfe:	d01c      	beq.n	1c3a <am_hal_ctimer_period_set+0x6a>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1c00:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1c04:	2300      	movs	r3, #0
    1c06:	45b8      	cmp	r8, r7
        ui32Comp1 = 0;
    1c08:	461a      	mov	r2, r3
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1c0a:	d01d      	beq.n	1c48 <am_hal_ctimer_period_set+0x78>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1c0c:	491b      	ldr	r1, [pc, #108]	; (1c7c <am_hal_ctimer_period_set+0xac>)
    1c0e:	4588      	cmp	r8, r1
    1c10:	d025      	beq.n	1c5e <am_hal_ctimer_period_set+0x8e>
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1 >> 16));
    1c12:	400a      	ands	r2, r1
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1c14:	b2a0      	uxth	r0, r4
    1c16:	4303      	orrs	r3, r0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1c18:	ea42 4414 	orr.w	r4, r2, r4, lsr #16
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1c1c:	f849 3005 	str.w	r3, [r9, r5]
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1c20:	f849 4006 	str.w	r4, [r9, r6]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1c24:	9801      	ldr	r0, [sp, #4]
    1c26:	f7ff fc3b 	bl	14a0 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    1c2a:	b002      	add	sp, #8
    1c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ui32Mode = ui32Mode >> 16;
    1c30:	0c19      	lsrs	r1, r3, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1c32:	f401 70c0 	and.w	r0, r1, #384	; 0x180
    1c36:	2880      	cmp	r0, #128	; 0x80
    1c38:	d110      	bne.n	1c5c <am_hal_ctimer_period_set+0x8c>
    1c3a:	0423      	lsls	r3, r4, #16
        ui32Comp1 = ui32Period;
    1c3c:	4622      	mov	r2, r4
        ui32Comp0 = ui32Period - ui32OnTime;
    1c3e:	1be4      	subs	r4, r4, r7
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1c40:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1c44:	45b8      	cmp	r8, r7
    1c46:	d1e1      	bne.n	1c0c <am_hal_ctimer_period_set+0x3c>
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1c48:	b2a6      	uxth	r6, r4
    1c4a:	4333      	orrs	r3, r6
    1c4c:	f849 3005 	str.w	r3, [r9, r5]
    AM_CRITICAL_END_ASM
    1c50:	9801      	ldr	r0, [sp, #4]
    1c52:	f7ff fc25 	bl	14a0 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    1c56:	b002      	add	sp, #8
    1c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1c5c:	2300      	movs	r3, #0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1c5e:	b2a5      	uxth	r5, r4
    1c60:	432b      	orrs	r3, r5
    1c62:	f849 3006 	str.w	r3, [r9, r6]
    AM_CRITICAL_END_ASM
    1c66:	9801      	ldr	r0, [sp, #4]
    1c68:	f7ff fc1a 	bl	14a0 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    1c6c:	b002      	add	sp, #8
    1c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1c72:	bf00      	nop
    1c74:	40008004 	.word	0x40008004
    1c78:	40008008 	.word	0x40008008
    1c7c:	ffff0000 	.word	0xffff0000
    1c80:	4000800c 	.word	0x4000800c
    1c84:	70656544 	.word	0x70656544
    1c88:	65656c73 	.word	0x65656c73
    1c8c:	78452070 	.word	0x78452070
    1c90:	6c706d61 	.word	0x6c706d61
    1c94:	00000a65 	.word	0x00000a65
    1c98:	0a0a0a0a 	.word	0x0a0a0a0a
    1c9c:	0a0a0a0a 	.word	0x0a0a0a0a
    1ca0:	0a0a0a0a 	.word	0x0a0a0a0a
    1ca4:	0a0a0a0a 	.word	0x0a0a0a0a
    1ca8:	00000a0a 	.word	0x00000a0a

00001cac <am_hal_cachectrl_defaults>:
    1cac:	50000001 00010300 00010101 685f6d61     ...P........am_h
    1cbc:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    1ccc:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    1cdc:	63206469 6b636f6c 74657320 676e6974     id clock setting
    1cec:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    1cfc:	6b6c635f 2e6e6567 00000063 6e6e6143     _clkgen.c...Cann
    1d0c:	6520746f 6c62616e 6f6d2065 74206572     ot enable more t
    1d1c:	206e6168 20656e6f 69726570 72656870     han one peripher
    1d2c:	61206c61 20612074 656d6974 0000002e     al at a time....
    1d3c:	2e5c2e2e 6d615c2e 6c61685f 7277705f     ..\..\am_hal_pwr
    1d4c:	6c727463 0000632e 65746e49 20726567     ctrl.c..Integer 
    1d5c:	69766964 20726f73 5453554d 20656220     divisor MUST be 
    1d6c:	61657267 20726574 6e616874 20726f20     greater than or 
    1d7c:	61757165 6f74206c 002e3120 2e5c2e2e     equal to 1....\.
    1d8c:	6d615c2e 6c61685f 7261755f 00632e74     .\am_hal_uart.c.
    1d9c:	69797254 7420676e 6964206f 6c626173     Trying to disabl
    1dac:	20612065 54524155 646f6d20 20656c75     e a UART module 
    1dbc:	74616874 656f6420 74276e73 69786520     that doesn't exi
    1dcc:	00007473                                st..
