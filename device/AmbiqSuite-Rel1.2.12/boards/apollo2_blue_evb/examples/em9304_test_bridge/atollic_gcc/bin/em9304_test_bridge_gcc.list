
em9304_test_bridge_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004dc0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00000800  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         0000004c  10000800  00004dc0  00020800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000464  1000084c  00004e0c  0002084c  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  0002084c  2**0
                  CONTENTS, READONLY
  5 .debug_info   00014aba  00000000  00000000  00020883  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003169  00000000  00000000  0003533d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000b78  00000000  00000000  000384a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001f30  00000000  00000000  0003901e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006eab  00000000  00000000  0003af4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004531  00000000  00000000  00041df9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  0004632a  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000023f8  00000000  00000000  000463a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000fbee  00000000  00000000  000487a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 08 00 10 f1 0f 00 00 59 10 00 00 99 10 00 00     ........Y.......
      10:	99 10 00 00 99 10 00 00 99 10 00 00 00 00 00 00     ................
	...
      2c:	5f 10 00 00 5f 10 00 00 00 00 00 00 5f 10 00 00     _..._......._...
      3c:	5f 10 00 00 5f 10 00 00 5f 10 00 00 5f 10 00 00     _..._..._..._...
      4c:	5f 10 00 00 5f 10 00 00 5f 10 00 00 5f 10 00 00     _..._..._..._...
      5c:	5f 10 00 00 5f 10 00 00 5f 10 00 00 5f 10 00 00     _..._..._..._...
      6c:	59 04 00 00 11 0e 00 00 c5 0d 00 00 55 0e 00 00     Y...........U...
      7c:	5f 10 00 00 5f 10 00 00 5f 10 00 00 5f 10 00 00     _..._..._..._...
      8c:	5f 10 00 00 5f 10 00 00 5f 10 00 00 5f 10 00 00     _..._..._..._...
      9c:	5f 10 00 00 5f 10 00 00 5f 10 00 00 5f 10 00 00     _..._..._..._...
      ac:	5f 10 00 00 5f 10 00 00 5f 10 00 00 5f 10 00 00     _..._..._..._...
      bc:	5f 10 00 00                                         _...

000000c0 <am_devices_button_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_button_init(am_devices_button_t *psButton)
{
      c0:	b590      	push	{r4, r7, lr}
      c2:	b085      	sub	sp, #20
      c4:	af00      	add	r7, sp, #0
      c6:	6078      	str	r0, [r7, #4]
    // Disable the pin to save power.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
#else
    am_hal_gpio_pin_config(psButton->ui32GPIONumber, AM_HAL_PIN_DISABLE);
      c8:	687b      	ldr	r3, [r7, #4]
      ca:	681b      	ldr	r3, [r3, #0]
      cc:	2b31      	cmp	r3, #49	; 0x31
      ce:	d866      	bhi.n	19e <am_devices_button_init+0xde>
      d0:	f001 fd5c 	bl	1b8c <am_hal_interrupt_master_disable>
      d4:	4603      	mov	r3, r0
      d6:	60fb      	str	r3, [r7, #12]
      d8:	4b37      	ldr	r3, [pc, #220]	; (1b8 <am_devices_button_init+0xf8>)
      da:	2273      	movs	r2, #115	; 0x73
      dc:	601a      	str	r2, [r3, #0]
      de:	687b      	ldr	r3, [r7, #4]
      e0:	681b      	ldr	r3, [r3, #0]
      e2:	085b      	lsrs	r3, r3, #1
      e4:	f003 027c 	and.w	r2, r3, #124	; 0x7c
      e8:	4b34      	ldr	r3, [pc, #208]	; (1bc <am_devices_button_init+0xfc>)
      ea:	4413      	add	r3, r2
      ec:	4618      	mov	r0, r3
      ee:	687b      	ldr	r3, [r7, #4]
      f0:	681b      	ldr	r3, [r3, #0]
      f2:	085b      	lsrs	r3, r3, #1
      f4:	f003 027c 	and.w	r2, r3, #124	; 0x7c
      f8:	4b30      	ldr	r3, [pc, #192]	; (1bc <am_devices_button_init+0xfc>)
      fa:	4413      	add	r3, r2
      fc:	681a      	ldr	r2, [r3, #0]
      fe:	687b      	ldr	r3, [r7, #4]
     100:	681b      	ldr	r3, [r3, #0]
     102:	009b      	lsls	r3, r3, #2
     104:	f003 031c 	and.w	r3, r3, #28
     108:	2107      	movs	r1, #7
     10a:	fa01 f303 	lsl.w	r3, r1, r3
     10e:	43db      	mvns	r3, r3
     110:	4013      	ands	r3, r2
     112:	6003      	str	r3, [r0, #0]
     114:	687b      	ldr	r3, [r7, #4]
     116:	681b      	ldr	r3, [r3, #0]
     118:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     11c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     120:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     124:	461c      	mov	r4, r3
     126:	687b      	ldr	r3, [r7, #4]
     128:	681b      	ldr	r3, [r3, #0]
     12a:	00db      	lsls	r3, r3, #3
     12c:	f003 0318 	and.w	r3, r3, #24
     130:	2218      	movs	r2, #24
     132:	409a      	lsls	r2, r3
     134:	687b      	ldr	r3, [r7, #4]
     136:	681b      	ldr	r3, [r3, #0]
     138:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     13c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     140:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     144:	6819      	ldr	r1, [r3, #0]
     146:	687b      	ldr	r3, [r7, #4]
     148:	681b      	ldr	r3, [r3, #0]
     14a:	00db      	lsls	r3, r3, #3
     14c:	f003 0318 	and.w	r3, r3, #24
     150:	20ff      	movs	r0, #255	; 0xff
     152:	fa00 f303 	lsl.w	r3, r0, r3
     156:	43db      	mvns	r3, r3
     158:	400b      	ands	r3, r1
     15a:	4313      	orrs	r3, r2
     15c:	6023      	str	r3, [r4, #0]
     15e:	687b      	ldr	r3, [r7, #4]
     160:	681b      	ldr	r3, [r3, #0]
     162:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     166:	4b16      	ldr	r3, [pc, #88]	; (1c0 <am_devices_button_init+0x100>)
     168:	4413      	add	r3, r2
     16a:	4618      	mov	r0, r3
     16c:	687b      	ldr	r3, [r7, #4]
     16e:	681b      	ldr	r3, [r3, #0]
     170:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     174:	4b12      	ldr	r3, [pc, #72]	; (1c0 <am_devices_button_init+0x100>)
     176:	4413      	add	r3, r2
     178:	681a      	ldr	r2, [r3, #0]
     17a:	687b      	ldr	r3, [r7, #4]
     17c:	681b      	ldr	r3, [r3, #0]
     17e:	00db      	lsls	r3, r3, #3
     180:	f003 0318 	and.w	r3, r3, #24
     184:	21ff      	movs	r1, #255	; 0xff
     186:	fa01 f303 	lsl.w	r3, r1, r3
     18a:	43db      	mvns	r3, r3
     18c:	4013      	ands	r3, r2
     18e:	6003      	str	r3, [r0, #0]
     190:	4b09      	ldr	r3, [pc, #36]	; (1b8 <am_devices_button_init+0xf8>)
     192:	2200      	movs	r2, #0
     194:	601a      	str	r2, [r3, #0]
     196:	68fb      	ldr	r3, [r7, #12]
     198:	4618      	mov	r0, r3
     19a:	f001 fcfb 	bl	1b94 <am_hal_interrupt_master_set>


    //
    // Initialize the state variables.
    //
    psButton->ui32Count = 0;
     19e:	687b      	ldr	r3, [r7, #4]
     1a0:	2200      	movs	r2, #0
     1a2:	609a      	str	r2, [r3, #8]
    psButton->bPressed = false;
     1a4:	687b      	ldr	r3, [r7, #4]
     1a6:	2200      	movs	r2, #0
     1a8:	731a      	strb	r2, [r3, #12]
    psButton->bChanged = false;
     1aa:	687b      	ldr	r3, [r7, #4]
     1ac:	2200      	movs	r2, #0
     1ae:	735a      	strb	r2, [r3, #13]
}
     1b0:	bf00      	nop
     1b2:	3714      	adds	r7, #20
     1b4:	46bd      	mov	sp, r7
     1b6:	bd90      	pop	{r4, r7, pc}
     1b8:	40010060 	.word	0x40010060
     1bc:	40010040 	.word	0x40010040
     1c0:	400100e0 	.word	0x400100e0

000001c4 <am_devices_button_array_init>:
//
//*****************************************************************************
void
am_devices_button_array_init(am_devices_button_t *psButtons,
                             uint32_t ui32NumButtons)
{
     1c4:	b580      	push	{r7, lr}
     1c6:	b084      	sub	sp, #16
     1c8:	af00      	add	r7, sp, #0
     1ca:	6078      	str	r0, [r7, #4]
     1cc:	6039      	str	r1, [r7, #0]
    uint32_t i;

    //
    // Loop through the list of buttons, configuring each one individually.
    //
    for ( i = 0; i < ui32NumButtons; i++ )
     1ce:	2300      	movs	r3, #0
     1d0:	60fb      	str	r3, [r7, #12]
     1d2:	e009      	b.n	1e8 <am_devices_button_array_init+0x24>
    {
        am_devices_button_init(psButtons + i);
     1d4:	68fb      	ldr	r3, [r7, #12]
     1d6:	011b      	lsls	r3, r3, #4
     1d8:	687a      	ldr	r2, [r7, #4]
     1da:	4413      	add	r3, r2
     1dc:	4618      	mov	r0, r3
     1de:	f7ff ff6f 	bl	c0 <am_devices_button_init>
    for ( i = 0; i < ui32NumButtons; i++ )
     1e2:	68fb      	ldr	r3, [r7, #12]
     1e4:	3301      	adds	r3, #1
     1e6:	60fb      	str	r3, [r7, #12]
     1e8:	68fa      	ldr	r2, [r7, #12]
     1ea:	683b      	ldr	r3, [r7, #0]
     1ec:	429a      	cmp	r2, r3
     1ee:	d3f1      	bcc.n	1d4 <am_devices_button_array_init+0x10>
    }
}
     1f0:	bf00      	nop
     1f2:	3710      	adds	r7, #16
     1f4:	46bd      	mov	sp, r7
     1f6:	bd80      	pop	{r7, pc}

000001f8 <am_devices_button_tick>:
//! @return None.
//
//*****************************************************************************
void
am_devices_button_tick(am_devices_button_t *psButton)
{
     1f8:	b590      	push	{r4, r7, lr}
     1fa:	b087      	sub	sp, #28
     1fc:	af00      	add	r7, sp, #0
     1fe:	6078      	str	r0, [r7, #4]
    // Enable the button pin.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_INPUT);
#else
    am_hal_gpio_pin_config(psButton->ui32GPIONumber, AM_HAL_PIN_INPUT);
     200:	687b      	ldr	r3, [r7, #4]
     202:	681b      	ldr	r3, [r3, #0]
     204:	2b31      	cmp	r3, #49	; 0x31
     206:	d866      	bhi.n	2d6 <am_devices_button_tick+0xde>
     208:	f001 fcc0 	bl	1b8c <am_hal_interrupt_master_disable>
     20c:	4603      	mov	r3, r0
     20e:	60fb      	str	r3, [r7, #12]
     210:	4b87      	ldr	r3, [pc, #540]	; (430 <am_devices_button_tick+0x238>)
     212:	2273      	movs	r2, #115	; 0x73
     214:	601a      	str	r2, [r3, #0]
     216:	687b      	ldr	r3, [r7, #4]
     218:	681b      	ldr	r3, [r3, #0]
     21a:	085b      	lsrs	r3, r3, #1
     21c:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     220:	4b84      	ldr	r3, [pc, #528]	; (434 <am_devices_button_tick+0x23c>)
     222:	4413      	add	r3, r2
     224:	4618      	mov	r0, r3
     226:	687b      	ldr	r3, [r7, #4]
     228:	681b      	ldr	r3, [r3, #0]
     22a:	085b      	lsrs	r3, r3, #1
     22c:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     230:	4b80      	ldr	r3, [pc, #512]	; (434 <am_devices_button_tick+0x23c>)
     232:	4413      	add	r3, r2
     234:	681a      	ldr	r2, [r3, #0]
     236:	687b      	ldr	r3, [r7, #4]
     238:	681b      	ldr	r3, [r3, #0]
     23a:	009b      	lsls	r3, r3, #2
     23c:	f003 031c 	and.w	r3, r3, #28
     240:	2107      	movs	r1, #7
     242:	fa01 f303 	lsl.w	r3, r1, r3
     246:	43db      	mvns	r3, r3
     248:	4013      	ands	r3, r2
     24a:	6003      	str	r3, [r0, #0]
     24c:	687b      	ldr	r3, [r7, #4]
     24e:	681b      	ldr	r3, [r3, #0]
     250:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     254:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     258:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     25c:	461c      	mov	r4, r3
     25e:	687b      	ldr	r3, [r7, #4]
     260:	681b      	ldr	r3, [r3, #0]
     262:	00db      	lsls	r3, r3, #3
     264:	f003 0318 	and.w	r3, r3, #24
     268:	221a      	movs	r2, #26
     26a:	409a      	lsls	r2, r3
     26c:	687b      	ldr	r3, [r7, #4]
     26e:	681b      	ldr	r3, [r3, #0]
     270:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     274:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     278:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     27c:	6819      	ldr	r1, [r3, #0]
     27e:	687b      	ldr	r3, [r7, #4]
     280:	681b      	ldr	r3, [r3, #0]
     282:	00db      	lsls	r3, r3, #3
     284:	f003 0318 	and.w	r3, r3, #24
     288:	20ff      	movs	r0, #255	; 0xff
     28a:	fa00 f303 	lsl.w	r3, r0, r3
     28e:	43db      	mvns	r3, r3
     290:	400b      	ands	r3, r1
     292:	4313      	orrs	r3, r2
     294:	6023      	str	r3, [r4, #0]
     296:	687b      	ldr	r3, [r7, #4]
     298:	681b      	ldr	r3, [r3, #0]
     29a:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     29e:	4b66      	ldr	r3, [pc, #408]	; (438 <am_devices_button_tick+0x240>)
     2a0:	4413      	add	r3, r2
     2a2:	4618      	mov	r0, r3
     2a4:	687b      	ldr	r3, [r7, #4]
     2a6:	681b      	ldr	r3, [r3, #0]
     2a8:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     2ac:	4b62      	ldr	r3, [pc, #392]	; (438 <am_devices_button_tick+0x240>)
     2ae:	4413      	add	r3, r2
     2b0:	681a      	ldr	r2, [r3, #0]
     2b2:	687b      	ldr	r3, [r7, #4]
     2b4:	681b      	ldr	r3, [r3, #0]
     2b6:	00db      	lsls	r3, r3, #3
     2b8:	f003 0318 	and.w	r3, r3, #24
     2bc:	21ff      	movs	r1, #255	; 0xff
     2be:	fa01 f303 	lsl.w	r3, r1, r3
     2c2:	43db      	mvns	r3, r3
     2c4:	4013      	ands	r3, r2
     2c6:	6003      	str	r3, [r0, #0]
     2c8:	4b59      	ldr	r3, [pc, #356]	; (430 <am_devices_button_tick+0x238>)
     2ca:	2200      	movs	r2, #0
     2cc:	601a      	str	r2, [r3, #0]
     2ce:	68fb      	ldr	r3, [r7, #12]
     2d0:	4618      	mov	r0, r3
     2d2:	f001 fc5f 	bl	1b94 <am_hal_interrupt_master_set>
    // its "state" counter to zero.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_state_read(psButton->ui32GPIONumber, AM_HAL_GPIO_INPUT_READ, &ui32PinState);
#else
    ui32PinState = am_hal_gpio_input_bit_read(psButton->ui32GPIONumber);
     2d6:	687b      	ldr	r3, [r7, #4]
     2d8:	681b      	ldr	r3, [r3, #0]
     2da:	08db      	lsrs	r3, r3, #3
     2dc:	f003 0204 	and.w	r2, r3, #4
     2e0:	4b56      	ldr	r3, [pc, #344]	; (43c <am_devices_button_tick+0x244>)
     2e2:	4413      	add	r3, r2
     2e4:	681a      	ldr	r2, [r3, #0]
     2e6:	687b      	ldr	r3, [r7, #4]
     2e8:	681b      	ldr	r3, [r3, #0]
     2ea:	f003 031f 	and.w	r3, r3, #31
     2ee:	fa22 f303 	lsr.w	r3, r2, r3
     2f2:	f003 0301 	and.w	r3, r3, #1
     2f6:	2b00      	cmp	r3, #0
     2f8:	bf14      	ite	ne
     2fa:	2301      	movne	r3, #1
     2fc:	2300      	moveq	r3, #0
     2fe:	b2db      	uxtb	r3, r3
     300:	617b      	str	r3, [r7, #20]
#endif

    //
    // Check to see if the button is "pressed" according to our GPIO reading.
    //
    bRawButtonPressed = (ui32PinState != psButton->ui32Polarity);
     302:	687b      	ldr	r3, [r7, #4]
     304:	685a      	ldr	r2, [r3, #4]
     306:	697b      	ldr	r3, [r7, #20]
     308:	429a      	cmp	r2, r3
     30a:	bf14      	ite	ne
     30c:	2301      	movne	r3, #1
     30e:	2300      	moveq	r3, #0
     310:	74fb      	strb	r3, [r7, #19]

    //
    // Is this button state different from the last saved state?
    //
    if ( bRawButtonPressed != psButton->bPressed )
     312:	687b      	ldr	r3, [r7, #4]
     314:	7b1b      	ldrb	r3, [r3, #12]
     316:	7cfa      	ldrb	r2, [r7, #19]
     318:	429a      	cmp	r2, r3
     31a:	d005      	beq.n	328 <am_devices_button_tick+0x130>
    {
        //
        // If so, increase the debounce count.
        //
        psButton->ui32Count++;
     31c:	687b      	ldr	r3, [r7, #4]
     31e:	689b      	ldr	r3, [r3, #8]
     320:	1c5a      	adds	r2, r3, #1
     322:	687b      	ldr	r3, [r7, #4]
     324:	609a      	str	r2, [r3, #8]
     326:	e002      	b.n	32e <am_devices_button_tick+0x136>
    else
    {
        //
        // Otherwise, set the count back to zero.
        //
        psButton->ui32Count = 0;
     328:	687b      	ldr	r3, [r7, #4]
     32a:	2200      	movs	r2, #0
     32c:	609a      	str	r2, [r3, #8]

    //
    // If we hit the button debounce delay, record a button press to the
    // structure, and reset the count.
    //
    if ( psButton->ui32Count >= AM_DEVICES_BUTTON_DEBOUNCE_DELAY )
     32e:	687b      	ldr	r3, [r7, #4]
     330:	689b      	ldr	r3, [r3, #8]
     332:	2b03      	cmp	r3, #3
     334:	d909      	bls.n	34a <am_devices_button_tick+0x152>
    {
        psButton->bPressed = bRawButtonPressed;
     336:	687b      	ldr	r3, [r7, #4]
     338:	7cfa      	ldrb	r2, [r7, #19]
     33a:	731a      	strb	r2, [r3, #12]
        psButton->bChanged = true;
     33c:	687b      	ldr	r3, [r7, #4]
     33e:	2201      	movs	r2, #1
     340:	735a      	strb	r2, [r3, #13]
        psButton->ui32Count = 0;
     342:	687b      	ldr	r3, [r7, #4]
     344:	2200      	movs	r2, #0
     346:	609a      	str	r2, [r3, #8]
     348:	e002      	b.n	350 <am_devices_button_tick+0x158>
    {
        //
        // If we didn't just record a press/release event, update the structure
        // to say that the current state isn't new.
        //
        psButton->bChanged = false;
     34a:	687b      	ldr	r3, [r7, #4]
     34c:	2200      	movs	r2, #0
     34e:	735a      	strb	r2, [r3, #13]
    // Disable the button pin to save power.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
#else
    am_hal_gpio_pin_config(psButton->ui32GPIONumber, AM_HAL_PIN_DISABLE);
     350:	687b      	ldr	r3, [r7, #4]
     352:	681b      	ldr	r3, [r3, #0]
     354:	2b31      	cmp	r3, #49	; 0x31
     356:	d866      	bhi.n	426 <am_devices_button_tick+0x22e>
     358:	f001 fc18 	bl	1b8c <am_hal_interrupt_master_disable>
     35c:	4603      	mov	r3, r0
     35e:	60bb      	str	r3, [r7, #8]
     360:	4b33      	ldr	r3, [pc, #204]	; (430 <am_devices_button_tick+0x238>)
     362:	2273      	movs	r2, #115	; 0x73
     364:	601a      	str	r2, [r3, #0]
     366:	687b      	ldr	r3, [r7, #4]
     368:	681b      	ldr	r3, [r3, #0]
     36a:	085b      	lsrs	r3, r3, #1
     36c:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     370:	4b30      	ldr	r3, [pc, #192]	; (434 <am_devices_button_tick+0x23c>)
     372:	4413      	add	r3, r2
     374:	4618      	mov	r0, r3
     376:	687b      	ldr	r3, [r7, #4]
     378:	681b      	ldr	r3, [r3, #0]
     37a:	085b      	lsrs	r3, r3, #1
     37c:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     380:	4b2c      	ldr	r3, [pc, #176]	; (434 <am_devices_button_tick+0x23c>)
     382:	4413      	add	r3, r2
     384:	681a      	ldr	r2, [r3, #0]
     386:	687b      	ldr	r3, [r7, #4]
     388:	681b      	ldr	r3, [r3, #0]
     38a:	009b      	lsls	r3, r3, #2
     38c:	f003 031c 	and.w	r3, r3, #28
     390:	2107      	movs	r1, #7
     392:	fa01 f303 	lsl.w	r3, r1, r3
     396:	43db      	mvns	r3, r3
     398:	4013      	ands	r3, r2
     39a:	6003      	str	r3, [r0, #0]
     39c:	687b      	ldr	r3, [r7, #4]
     39e:	681b      	ldr	r3, [r3, #0]
     3a0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     3a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     3a8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     3ac:	461c      	mov	r4, r3
     3ae:	687b      	ldr	r3, [r7, #4]
     3b0:	681b      	ldr	r3, [r3, #0]
     3b2:	00db      	lsls	r3, r3, #3
     3b4:	f003 0318 	and.w	r3, r3, #24
     3b8:	2218      	movs	r2, #24
     3ba:	409a      	lsls	r2, r3
     3bc:	687b      	ldr	r3, [r7, #4]
     3be:	681b      	ldr	r3, [r3, #0]
     3c0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     3c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     3c8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     3cc:	6819      	ldr	r1, [r3, #0]
     3ce:	687b      	ldr	r3, [r7, #4]
     3d0:	681b      	ldr	r3, [r3, #0]
     3d2:	00db      	lsls	r3, r3, #3
     3d4:	f003 0318 	and.w	r3, r3, #24
     3d8:	20ff      	movs	r0, #255	; 0xff
     3da:	fa00 f303 	lsl.w	r3, r0, r3
     3de:	43db      	mvns	r3, r3
     3e0:	400b      	ands	r3, r1
     3e2:	4313      	orrs	r3, r2
     3e4:	6023      	str	r3, [r4, #0]
     3e6:	687b      	ldr	r3, [r7, #4]
     3e8:	681b      	ldr	r3, [r3, #0]
     3ea:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     3ee:	4b12      	ldr	r3, [pc, #72]	; (438 <am_devices_button_tick+0x240>)
     3f0:	4413      	add	r3, r2
     3f2:	4618      	mov	r0, r3
     3f4:	687b      	ldr	r3, [r7, #4]
     3f6:	681b      	ldr	r3, [r3, #0]
     3f8:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     3fc:	4b0e      	ldr	r3, [pc, #56]	; (438 <am_devices_button_tick+0x240>)
     3fe:	4413      	add	r3, r2
     400:	681a      	ldr	r2, [r3, #0]
     402:	687b      	ldr	r3, [r7, #4]
     404:	681b      	ldr	r3, [r3, #0]
     406:	00db      	lsls	r3, r3, #3
     408:	f003 0318 	and.w	r3, r3, #24
     40c:	21ff      	movs	r1, #255	; 0xff
     40e:	fa01 f303 	lsl.w	r3, r1, r3
     412:	43db      	mvns	r3, r3
     414:	4013      	ands	r3, r2
     416:	6003      	str	r3, [r0, #0]
     418:	4b05      	ldr	r3, [pc, #20]	; (430 <am_devices_button_tick+0x238>)
     41a:	2200      	movs	r2, #0
     41c:	601a      	str	r2, [r3, #0]
     41e:	68bb      	ldr	r3, [r7, #8]
     420:	4618      	mov	r0, r3
     422:	f001 fbb7 	bl	1b94 <am_hal_interrupt_master_set>
#endif // AM_APOLLO3_GPIO
}
     426:	bf00      	nop
     428:	371c      	adds	r7, #28
     42a:	46bd      	mov	sp, r7
     42c:	bd90      	pop	{r4, r7, pc}
     42e:	bf00      	nop
     430:	40010060 	.word	0x40010060
     434:	40010040 	.word	0x40010040
     438:	400100e0 	.word	0x400100e0
     43c:	40010080 	.word	0x40010080

00000440 <iom_write_complete>:
// IOM write complete callback
//
//*****************************************************************************
static void
iom_write_complete(void)
{
     440:	b480      	push	{r7}
     442:	af00      	add	r7, sp, #0
    gIomDone = true;
     444:	4b03      	ldr	r3, [pc, #12]	; (454 <iom_write_complete+0x14>)
     446:	2201      	movs	r2, #1
     448:	701a      	strb	r2, [r3, #0]
}
     44a:	bf00      	nop
     44c:	46bd      	mov	sp, r7
     44e:	f85d 7b04 	ldr.w	r7, [sp], #4
     452:	4770      	bx	lr
     454:	1000084d 	.word	0x1000084d

00000458 <am_iomaster5_isr>:
//
//*****************************************************************************
#if (5 == AM_BSP_EM9304_IOM)
void
am_iomaster5_isr(void)
{
     458:	b580      	push	{r7, lr}
     45a:	b082      	sub	sp, #8
     45c:	af00      	add	r7, sp, #0
    uint32_t ui32IntStatus;

    //
    // Read and clear the interrupt status.
    //
    ui32IntStatus = am_hal_iom_int_status_get(5, false);
     45e:	2100      	movs	r1, #0
     460:	2005      	movs	r0, #5
     462:	f003 fce9 	bl	3e38 <am_hal_iom_int_status_get>
     466:	6078      	str	r0, [r7, #4]
    am_hal_iom_int_clear(5, ui32IntStatus);
     468:	6879      	ldr	r1, [r7, #4]
     46a:	2005      	movs	r0, #5
     46c:	f003 fcda 	bl	3e24 <am_hal_iom_int_clear>

    //
    // Service FIFO interrupts as necessary, and call IOM callbacks as
    // transfers are completed.
    //
    am_hal_iom_int_service(5, ui32IntStatus);
     470:	6879      	ldr	r1, [r7, #4]
     472:	2005      	movs	r0, #5
     474:	f003 fcc4 	bl	3e00 <am_hal_iom_int_service>
}
     478:	bf00      	nop
     47a:	3708      	adds	r7, #8
     47c:	46bd      	mov	sp, r7
     47e:	bd80      	pop	{r7, pc}

00000480 <isRevB2>:
// Checks to see if this processor is a Rev B2 device.
//
//*****************************************************************************
static bool
isRevB2(void)
{
     480:	b480      	push	{r7}
     482:	af00      	add	r7, sp, #0
    //
    // Check to make sure the major rev is B and the minor rev is zero.
    //
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) ==
     484:	4b06      	ldr	r3, [pc, #24]	; (4a0 <isRevB2+0x20>)
     486:	681b      	ldr	r3, [r3, #0]
     488:	b2db      	uxtb	r3, r3
     48a:	2b22      	cmp	r3, #34	; 0x22
     48c:	d101      	bne.n	492 <isRevB2+0x12>
         (AM_REG_MCUCTRL_CHIPREV_REVMAJ_B | AM_REG_MCUCTRL_CHIPREV_REVMIN_REV2) )
    {
        return true;
     48e:	2301      	movs	r3, #1
     490:	e000      	b.n	494 <isRevB2+0x14>
    }
    else
    {
        return false;
     492:	2300      	movs	r3, #0
    }
}
     494:	4618      	mov	r0, r3
     496:	46bd      	mov	sp, r7
     498:	f85d 7b04 	ldr.w	r7, [sp], #4
     49c:	4770      	bx	lr
     49e:	bf00      	nop
     4a0:	4002000c 	.word	0x4002000c

000004a4 <am_devices_em9304_tx_starts>:
//! @return Number of bytes that can be written to EM9304.
//
//*****************************************************************************
uint8_t
am_devices_em9304_tx_starts(const am_devices_em9304_t *psDevice)
{
     4a4:	b590      	push	{r4, r7, lr}
     4a6:	b087      	sub	sp, #28
     4a8:	af02      	add	r7, sp, #8
     4aa:	6078      	str	r0, [r7, #4]
  // Indicates that a SPI transfer is in progress
  spiTxInProgress = 1;
     4ac:	4b29      	ldr	r3, [pc, #164]	; (554 <am_devices_em9304_tx_starts+0xb0>)
     4ae:	2201      	movs	r2, #1
     4b0:	701a      	strb	r2, [r3, #0]

  am_hal_iom_buffer(2) sCommand;
  am_hal_iom_buffer(2) sStas;
  sCommand.bytes[0] = EM9304_SPI_HEADER_TX;
     4b2:	2342      	movs	r3, #66	; 0x42
     4b4:	733b      	strb	r3, [r7, #12]
  sCommand.bytes[1] = 0x0;
     4b6:	2300      	movs	r3, #0
     4b8:	737b      	strb	r3, [r7, #13]

  // Select the EM9304
  EM9304_SPISLAVESELECT();
     4ba:	4b27      	ldr	r3, [pc, #156]	; (558 <am_devices_em9304_tx_starts+0xb4>)
     4bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     4c0:	601a      	str	r2, [r3, #0]

  // Wait EM9304 RDY signal
  while ( !EM9304_RDY_INT() );
     4c2:	bf00      	nop
     4c4:	f001 fad8 	bl	1a78 <am_hal_gpio_input_read>
     4c8:	460a      	mov	r2, r1
     4ca:	4601      	mov	r1, r0
     4cc:	f04f 0300 	mov.w	r3, #0
     4d0:	f44f 4480 	mov.w	r4, #16384	; 0x4000
     4d4:	ea03 0301 	and.w	r3, r3, r1
     4d8:	ea04 0402 	and.w	r4, r4, r2
     4dc:	4323      	orrs	r3, r4
     4de:	d0f1      	beq.n	4c4 <am_devices_em9304_tx_starts+0x20>

#if defined(AM_PART_APOLLO2)
  //
  // Full-Duplex operation is only supported for Apollo2 B2 Silicon.
  //
  if (isRevB2())
     4e0:	f7ff ffce 	bl	480 <isRevB2>
     4e4:	4603      	mov	r3, r0
     4e6:	2b00      	cmp	r3, #0
     4e8:	d019      	beq.n	51e <am_devices_em9304_tx_starts+0x7a>
  {
    //
    // Write to the IOM.
    //
    am_hal_iom_spi_fullduplex(psDevice->ui32IOMModule,
     4ea:	687b      	ldr	r3, [r7, #4]
     4ec:	6858      	ldr	r0, [r3, #4]
     4ee:	f107 0108 	add.w	r1, r7, #8
     4f2:	f107 020c 	add.w	r2, r7, #12
     4f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     4fa:	9301      	str	r3, [sp, #4]
     4fc:	2302      	movs	r3, #2
     4fe:	9300      	str	r3, [sp, #0]
     500:	460b      	mov	r3, r1
     502:	2100      	movs	r1, #0
     504:	f003 fbfe 	bl	3d04 <am_hal_iom_spi_fullduplex>
                              AM_HAL_IOM_RAW);

    //
    // Check that the EM9304 is ready.
    //
    if (sStas.bytes[0] != EM9304_STS1_READY_VALUE)
     508:	7a3b      	ldrb	r3, [r7, #8]
     50a:	2bc0      	cmp	r3, #192	; 0xc0
     50c:	d005      	beq.n	51a <am_devices_em9304_tx_starts+0x76>
    {
      // Error
      EM9304_SPISLAVEDESELECT();
     50e:	4b13      	ldr	r3, [pc, #76]	; (55c <am_devices_em9304_tx_starts+0xb8>)
     510:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
      am_util_debug_printf("HCI TX Failed to starts\n");
      am_util_debug_printf("%d, %d\n", sStas.bytes[0], sStas.bytes[1]);
      return 0;
     516:	2300      	movs	r3, #0
     518:	e018      	b.n	54c <am_devices_em9304_tx_starts+0xa8>
    }

    return sStas.bytes[1];
     51a:	7a7b      	ldrb	r3, [r7, #9]
     51c:	e016      	b.n	54c <am_devices_em9304_tx_starts+0xa8>
#endif
  {
    //
    // Write to the IOM.
    //
    am_hal_iom_spi_write(psDevice->ui32IOMModule,
     51e:	687b      	ldr	r3, [r7, #4]
     520:	6858      	ldr	r0, [r3, #4]
     522:	f107 020c 	add.w	r2, r7, #12
     526:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52a:	9300      	str	r3, [sp, #0]
     52c:	2301      	movs	r3, #1
     52e:	2100      	movs	r1, #0
     530:	f002 fe9a 	bl	3268 <am_hal_iom_spi_write>
                         AM_HAL_IOM_RAW);

    //
    // Read from the IOM.
    //
    am_hal_iom_spi_read(psDevice->ui32IOMModule,
     534:	687b      	ldr	r3, [r7, #4]
     536:	6858      	ldr	r0, [r3, #4]
     538:	f107 0208 	add.w	r2, r7, #8
     53c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     540:	9300      	str	r3, [sp, #0]
     542:	2301      	movs	r3, #1
     544:	2100      	movs	r1, #0
     546:	f003 f8e1 	bl	370c <am_hal_iom_spi_read>
                        0, sStas.words, 1,
                        AM_HAL_IOM_RAW);

    return sStas.bytes[0];
     54a:	7a3b      	ldrb	r3, [r7, #8]
  }
}
     54c:	4618      	mov	r0, r3
     54e:	3714      	adds	r7, #20
     550:	46bd      	mov	sp, r7
     552:	bd90      	pop	{r4, r7, pc}
     554:	1000084c 	.word	0x1000084c
     558:	4001009c 	.word	0x4001009c
     55c:	40010094 	.word	0x40010094

00000560 <am_devices_em9304_tx_ends>:
//! @return None.
//
//*****************************************************************************
void
am_devices_em9304_tx_ends(void)
{
     560:	b580      	push	{r7, lr}
     562:	af00      	add	r7, sp, #0
    am_hal_iom_poll_complete(g_sEm9304.ui32IOMModule);
     564:	2305      	movs	r3, #5
     566:	4618      	mov	r0, r3
     568:	f003 fc40 	bl	3dec <am_hal_iom_poll_complete>
    // Deselect the EM9304
    EM9304_SPISLAVEDESELECT();
     56c:	4b04      	ldr	r3, [pc, #16]	; (580 <am_devices_em9304_tx_ends+0x20>)
     56e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     572:	601a      	str	r2, [r3, #0]

    // Indicates that the SPI transfer is finished
    spiTxInProgress = 0;
     574:	4b03      	ldr	r3, [pc, #12]	; (584 <am_devices_em9304_tx_ends+0x24>)
     576:	2200      	movs	r2, #0
     578:	701a      	strb	r2, [r3, #0]
}
     57a:	bf00      	nop
     57c:	bd80      	pop	{r7, pc}
     57e:	bf00      	nop
     580:	40010094 	.word	0x40010094
     584:	1000084c 	.word	0x1000084c

00000588 <am_devices_em9304_block_write>:
void
am_devices_em9304_block_write(const am_devices_em9304_t *psDevice,
                              uint8_t type,
                              uint8_t *pui8Values,
                              uint32_t ui32NumBytes)
{
     588:	b590      	push	{r4, r7, lr}
     58a:	b0cb      	sub	sp, #300	; 0x12c
     58c:	af02      	add	r7, sp, #8
     58e:	f107 040c 	add.w	r4, r7, #12
     592:	6020      	str	r0, [r4, #0]
     594:	4608      	mov	r0, r1
     596:	1d39      	adds	r1, r7, #4
     598:	600a      	str	r2, [r1, #0]
     59a:	463a      	mov	r2, r7
     59c:	6013      	str	r3, [r2, #0]
     59e:	f107 030b 	add.w	r3, r7, #11
     5a2:	4602      	mov	r2, r0
     5a4:	701a      	strb	r2, [r3, #0]
  am_hal_iom_buffer(EM9304_BUFFER_SIZE) sData;
  uint8_t em9304BufSize = 0;
     5a6:	2300      	movs	r3, #0
     5a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  uint8_t hci_type_sent = 0;
     5ac:	2300      	movs	r3, #0
     5ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  // Check that we are not going to overwrite buffer.
  if ((ui32NumBytes + 1) > EM9304_BUFFER_SIZE)
     5b2:	463b      	mov	r3, r7
     5b4:	681b      	ldr	r3, [r3, #0]
     5b6:	3301      	adds	r3, #1
     5b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     5bc:	f200 809a 	bhi.w	6f4 <am_devices_em9304_block_write+0x16c>
  {
    am_util_debug_printf("HCI TX Error (STATUS ERROR) Packet Too Large\n");
    return;
  }

  for ( uint32_t i = 0; i < ui32NumBytes; )
     5c0:	2300      	movs	r3, #0
     5c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
     5c6:	e08d      	b.n	6e4 <am_devices_em9304_block_write+0x15c>
  {
    if ( i < ui32NumBytes )
     5c8:	463b      	mov	r3, r7
     5ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
     5ce:	681b      	ldr	r3, [r3, #0]
     5d0:	429a      	cmp	r2, r3
     5d2:	d207      	bcs.n	5e4 <am_devices_em9304_block_write+0x5c>
    {
      em9304BufSize = am_devices_em9304_tx_starts(psDevice);
     5d4:	f107 030c 	add.w	r3, r7, #12
     5d8:	6818      	ldr	r0, [r3, #0]
     5da:	f7ff ff63 	bl	4a4 <am_devices_em9304_tx_starts>
     5de:	4603      	mov	r3, r0
     5e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    }

    uint32_t len = (em9304BufSize < (ui32NumBytes - i)) ? em9304BufSize : (ui32NumBytes - i);
     5e4:	463b      	mov	r3, r7
     5e6:	681a      	ldr	r2, [r3, #0]
     5e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
     5ec:	1ad2      	subs	r2, r2, r3
     5ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
     5f2:	4293      	cmp	r3, r2
     5f4:	bf28      	it	cs
     5f6:	4613      	movcs	r3, r2
     5f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    if (len > 0)  // check again if there is room to send more data
     5fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
     600:	2b00      	cmp	r3, #0
     602:	d06d      	beq.n	6e0 <am_devices_em9304_block_write+0x158>
    {
      if (hci_type_sent == 0)
     604:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
     608:	2b00      	cmp	r3, #0
     60a:	d11c      	bne.n	646 <am_devices_em9304_block_write+0xbe>
      {
        sData.bytes[0] = type;
     60c:	f107 0310 	add.w	r3, r7, #16
     610:	f107 020b 	add.w	r2, r7, #11
     614:	7812      	ldrb	r2, [r2, #0]
     616:	701a      	strb	r2, [r3, #0]
        memcpy(&(sData.bytes[1]), pui8Values, len - 1);
     618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
     61c:	1e59      	subs	r1, r3, #1
     61e:	1d3b      	adds	r3, r7, #4
     620:	f107 0210 	add.w	r2, r7, #16
     624:	1c50      	adds	r0, r2, #1
     626:	460a      	mov	r2, r1
     628:	6819      	ldr	r1, [r3, #0]
     62a:	f004 fa69 	bl	4b00 <memcpy>
        i += len -1;
     62e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
     632:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
     636:	4413      	add	r3, r2
     638:	3b01      	subs	r3, #1
     63a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
        hci_type_sent = 1;
     63e:	2301      	movs	r3, #1
     640:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
     644:	e012      	b.n	66c <am_devices_em9304_block_write+0xe4>
      }
      else
      {
        memcpy(&(sData.bytes[0]), pui8Values + i, len);
     646:	1d3b      	adds	r3, r7, #4
     648:	681a      	ldr	r2, [r3, #0]
     64a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
     64e:	18d1      	adds	r1, r2, r3
     650:	f107 0310 	add.w	r3, r7, #16
     654:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
     658:	4618      	mov	r0, r3
     65a:	f004 fa51 	bl	4b00 <memcpy>
        i += len;
     65e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
     662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
     666:	4413      	add	r3, r2
     668:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
      }

      while ( !EM9304_RDY_INT() );
     66c:	bf00      	nop
     66e:	f001 fa03 	bl	1a78 <am_hal_gpio_input_read>
     672:	460a      	mov	r2, r1
     674:	4601      	mov	r1, r0
     676:	f04f 0300 	mov.w	r3, #0
     67a:	f44f 4480 	mov.w	r4, #16384	; 0x4000
     67e:	ea03 0301 	and.w	r3, r3, r1
     682:	ea04 0402 	and.w	r4, r4, r2
     686:	4323      	orrs	r3, r4
     688:	d0f1      	beq.n	66e <am_devices_em9304_block_write+0xe6>

#if defined(USE_IOM_NONBLOCKING)
      gIomDone = false;
     68a:	4b1d      	ldr	r3, [pc, #116]	; (700 <am_devices_em9304_block_write+0x178>)
     68c:	2200      	movs	r2, #0
     68e:	701a      	strb	r2, [r3, #0]
      am_hal_iom_spi_write_nb(psDevice->ui32IOMModule,
     690:	f107 030c 	add.w	r3, r7, #12
     694:	681b      	ldr	r3, [r3, #0]
     696:	6858      	ldr	r0, [r3, #4]
     698:	f107 0210 	add.w	r2, r7, #16
     69c:	4b19      	ldr	r3, [pc, #100]	; (704 <am_devices_em9304_block_write+0x17c>)
     69e:	9301      	str	r3, [sp, #4]
     6a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     6a4:	9300      	str	r3, [sp, #0]
     6a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
     6aa:	2100      	movs	r1, #0
     6ac:	f003 fb52 	bl	3d54 <am_hal_iom_spi_write_nb>
      while(1)
      {
        //
        // Disable interrupt while we decide whether we're going to sleep.
        //
        uint32_t ui32IntStatus = am_hal_interrupt_master_disable();
     6b0:	f001 fa6c 	bl	1b8c <am_hal_interrupt_master_disable>
     6b4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        if (!gIomDone)
     6b8:	4b11      	ldr	r3, [pc, #68]	; (700 <am_devices_em9304_block_write+0x178>)
     6ba:	781b      	ldrb	r3, [r3, #0]
     6bc:	b2db      	uxtb	r3, r3
     6be:	f083 0301 	eor.w	r3, r3, #1
     6c2:	b2db      	uxtb	r3, r3
     6c4:	2b00      	cmp	r3, #0
     6c6:	d007      	beq.n	6d8 <am_devices_em9304_block_write+0x150>
        {
          //
          // Sleep while waiting for the IOM transaction to finish.
          //
          am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     6c8:	2001      	movs	r0, #1
     6ca:	f003 fef1 	bl	44b0 <am_hal_sysctrl_sleep>
          //
          // Enable interrupts
          //
          am_hal_interrupt_master_set(ui32IntStatus);
     6ce:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
     6d2:	f001 fa5f 	bl	1b94 <am_hal_interrupt_master_set>
     6d6:	e7eb      	b.n	6b0 <am_devices_em9304_block_write+0x128>
        else
        {
          //
          // Enable interrupts
          //
          am_hal_interrupt_master_set(ui32IntStatus);
     6d8:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
     6dc:	f001 fa5a 	bl	1b94 <am_hal_interrupt_master_set>
                           0, sData.words, len,
                           AM_HAL_IOM_RAW);
#endif
    }

    am_devices_em9304_tx_ends();
     6e0:	f7ff ff3e 	bl	560 <am_devices_em9304_tx_ends>
  for ( uint32_t i = 0; i < ui32NumBytes; )
     6e4:	463b      	mov	r3, r7
     6e6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
     6ea:	681b      	ldr	r3, [r3, #0]
     6ec:	429a      	cmp	r2, r3
     6ee:	f4ff af6b 	bcc.w	5c8 <am_devices_em9304_block_write+0x40>
     6f2:	e000      	b.n	6f6 <am_devices_em9304_block_write+0x16e>
    return;
     6f4:	bf00      	nop

  }
}
     6f6:	f507 7792 	add.w	r7, r7, #292	; 0x124
     6fa:	46bd      	mov	sp, r7
     6fc:	bd90      	pop	{r4, r7, pc}
     6fe:	bf00      	nop
     700:	1000084d 	.word	0x1000084d
     704:	00000441 	.word	0x00000441

00000708 <am_devices_em9304_block_read>:
//*****************************************************************************
uint32_t
am_devices_em9304_block_read(const am_devices_em9304_t *psDevice,
                             uint32_t *pui32Values,
                             uint32_t ui32NumBytes)
{
     708:	b590      	push	{r4, r7, lr}
     70a:	b08d      	sub	sp, #52	; 0x34
     70c:	af02      	add	r7, sp, #8
     70e:	60f8      	str	r0, [r7, #12]
     710:	60b9      	str	r1, [r7, #8]
     712:	607a      	str	r2, [r7, #4]
  am_hal_iom_buffer(2) sCommand;
  am_hal_iom_buffer(2) sStas;
  uint8_t ui8RxBytes;
  uint8_t spiRxTotalBytesCount = 0;
     714:	2300      	movs	r3, #0
     716:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


  sCommand.bytes[0] = EM9304_SPI_HEADER_RX;
     71a:	2381      	movs	r3, #129	; 0x81
     71c:	763b      	strb	r3, [r7, #24]
  sCommand.bytes[1] = 0x0;
     71e:	2300      	movs	r3, #0
     720:	767b      	strb	r3, [r7, #25]

  //
  // Check if the SPI is free
  //
  if ( spiTxInProgress )
     722:	4b56      	ldr	r3, [pc, #344]	; (87c <am_devices_em9304_block_read+0x174>)
     724:	781b      	ldrb	r3, [r3, #0]
     726:	2b00      	cmp	r3, #0
     728:	d001      	beq.n	72e <am_devices_em9304_block_read+0x26>
  {
    //
    // TX in progress -> Ignore RDY interrupt
    //
    am_util_debug_printf("HCI TX in progress\n");
    return 0;
     72a:	2300      	movs	r3, #0
     72c:	e0a2      	b.n	874 <am_devices_em9304_block_read+0x16c>
  }

  //
  // Check if they are still data to read
  //
  if ( !EM9304_RDY_INT() )
     72e:	f001 f9a3 	bl	1a78 <am_hal_gpio_input_read>
     732:	460a      	mov	r2, r1
     734:	4601      	mov	r1, r0
     736:	f04f 0300 	mov.w	r3, #0
     73a:	f44f 4480 	mov.w	r4, #16384	; 0x4000
     73e:	ea03 0301 	and.w	r3, r3, r1
     742:	ea04 0402 	and.w	r4, r4, r2
     746:	4323      	orrs	r3, r4
     748:	d101      	bne.n	74e <am_devices_em9304_block_read+0x46>
  {
    // No data
    //am_util_debug_printf("HCI No data\n");
    return 0;
     74a:	2300      	movs	r3, #0
     74c:	e092      	b.n	874 <am_devices_em9304_block_read+0x16c>
  }

  //
  // Select the EM9304
  //
  EM9304_SPISLAVESELECT();
     74e:	4b4c      	ldr	r3, [pc, #304]	; (880 <am_devices_em9304_block_read+0x178>)
     750:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     754:	601a      	str	r2, [r3, #0]

#if defined(AM_PART_APOLLO2)
  //
  // Full-Duplex operation is only supported for Apollo2 B2 Silicon.
  //
  if (isRevB2())
     756:	f7ff fe93 	bl	480 <isRevB2>
     75a:	4603      	mov	r3, r0
     75c:	2b00      	cmp	r3, #0
     75e:	d01b      	beq.n	798 <am_devices_em9304_block_read+0x90>
  {
    //
    // Write to the IOM.
    //
    am_hal_iom_spi_fullduplex(psDevice->ui32IOMModule,
     760:	68fb      	ldr	r3, [r7, #12]
     762:	6858      	ldr	r0, [r3, #4]
     764:	f107 0114 	add.w	r1, r7, #20
     768:	f107 0218 	add.w	r2, r7, #24
     76c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     770:	9301      	str	r3, [sp, #4]
     772:	2302      	movs	r3, #2
     774:	9300      	str	r3, [sp, #0]
     776:	460b      	mov	r3, r1
     778:	2100      	movs	r1, #0
     77a:	f003 fac3 	bl	3d04 <am_hal_iom_spi_fullduplex>
                              AM_HAL_IOM_RAW);

    //
    // Check that the EM9304 is ready.
    //
    if ( sStas.bytes[0] != EM9304_STS1_READY_VALUE )
     77e:	7d3b      	ldrb	r3, [r7, #20]
     780:	2bc0      	cmp	r3, #192	; 0xc0
     782:	d005      	beq.n	790 <am_devices_em9304_block_read+0x88>
    {
      // Error
      EM9304_SPISLAVEDESELECT();
     784:	4b3f      	ldr	r3, [pc, #252]	; (884 <am_devices_em9304_block_read+0x17c>)
     786:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     78a:	601a      	str	r2, [r3, #0]
      am_util_debug_printf("HCI RX Error (STATUS ERROR) EM9304 Not Ready\n");
      am_util_debug_printf("%d, %d\n", sStas.bytes[0], sStas.bytes[1]);
      return 0;
     78c:	2300      	movs	r3, #0
     78e:	e071      	b.n	874 <am_devices_em9304_block_read+0x16c>
    }

    //
    // Set the number of bytes to receive.
    //
    ui8RxBytes = sStas.bytes[1];
     790:	7d7b      	ldrb	r3, [r7, #21]
     792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     796:	e04f      	b.n	838 <am_devices_em9304_block_read+0x130>
#endif
  {
    //
    // Write to the IOM.
    //
    am_hal_iom_spi_write(psDevice->ui32IOMModule,
     798:	68fb      	ldr	r3, [r7, #12]
     79a:	6858      	ldr	r0, [r3, #4]
     79c:	f107 0218 	add.w	r2, r7, #24
     7a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7a4:	9300      	str	r3, [sp, #0]
     7a6:	2301      	movs	r3, #1
     7a8:	2100      	movs	r1, #0
     7aa:	f002 fd5d 	bl	3268 <am_hal_iom_spi_write>
                         AM_HAL_IOM_RAW);

    //
    // Read from the IOM.
    //
    am_hal_iom_spi_read(psDevice->ui32IOMModule,
     7ae:	68fb      	ldr	r3, [r7, #12]
     7b0:	6858      	ldr	r0, [r3, #4]
     7b2:	f107 0214 	add.w	r2, r7, #20
     7b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7ba:	9300      	str	r3, [sp, #0]
     7bc:	2301      	movs	r3, #1
     7be:	2100      	movs	r1, #0
     7c0:	f002 ffa4 	bl	370c <am_hal_iom_spi_read>
                        AM_HAL_IOM_RAW);

    //
    // Set the number of bytes to receive.
    //
    ui8RxBytes = sStas.bytes[0];
     7c4:	7d3b      	ldrb	r3, [r7, #20]
     7c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  while ( EM9304_RDY_INT() && (spiRxTotalBytesCount < ui8RxBytes) && (ui8RxBytes != 0))
     7ca:	e035      	b.n	838 <am_devices_em9304_block_read+0x130>
  {
    uint32_t len = 1;
     7cc:	2301      	movs	r3, #1
     7ce:	623b      	str	r3, [r7, #32]

    if ( (ui8RxBytes - spiRxTotalBytesCount) >= EM9304_BUFFER_SIZE )
     7d0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
     7d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
     7d8:	1ad3      	subs	r3, r2, r3
     7da:	2bff      	cmp	r3, #255	; 0xff
     7dc:	dd01      	ble.n	7e2 <am_devices_em9304_block_read+0xda>
      //
      // Error. Packet too large.
      //
      am_util_debug_printf("HCI RX Error (STATUS ERROR) Packet Too Large\n");
      am_util_debug_printf("%d, %d\n", sStas.bytes[0], sStas.bytes[1]);
      return 0;
     7de:	2300      	movs	r3, #0
     7e0:	e048      	b.n	874 <am_devices_em9304_block_read+0x16c>
    }
    else
    {
      len = ui8RxBytes;
     7e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
     7e6:	623b      	str	r3, [r7, #32]
    }

#if defined(USE_IOM_NONBLOCKING)
    gIomDone = false;
     7e8:	4b27      	ldr	r3, [pc, #156]	; (888 <am_devices_em9304_block_read+0x180>)
     7ea:	2200      	movs	r2, #0
     7ec:	701a      	strb	r2, [r3, #0]
    am_hal_iom_spi_read_nb(psDevice->ui32IOMModule,
     7ee:	68fb      	ldr	r3, [r7, #12]
     7f0:	6858      	ldr	r0, [r3, #4]
     7f2:	4b26      	ldr	r3, [pc, #152]	; (88c <am_devices_em9304_block_read+0x184>)
     7f4:	9301      	str	r3, [sp, #4]
     7f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7fa:	9300      	str	r3, [sp, #0]
     7fc:	6a3b      	ldr	r3, [r7, #32]
     7fe:	68ba      	ldr	r2, [r7, #8]
     800:	2100      	movs	r1, #0
     802:	f003 facd 	bl	3da0 <am_hal_iom_spi_read_nb>
    while(1)
    {
      //
      // Disable interrupt while we decide whether we're going to sleep.
      //
      uint32_t ui32IntStatus = am_hal_interrupt_master_disable();
     806:	f001 f9c1 	bl	1b8c <am_hal_interrupt_master_disable>
     80a:	61f8      	str	r0, [r7, #28]

      if (!gIomDone)
     80c:	4b1e      	ldr	r3, [pc, #120]	; (888 <am_devices_em9304_block_read+0x180>)
     80e:	781b      	ldrb	r3, [r3, #0]
     810:	b2db      	uxtb	r3, r3
     812:	f083 0301 	eor.w	r3, r3, #1
     816:	b2db      	uxtb	r3, r3
     818:	2b00      	cmp	r3, #0
     81a:	d006      	beq.n	82a <am_devices_em9304_block_read+0x122>
      {
        //
        // Sleep while waiting for the IOM transaction to finish.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     81c:	2001      	movs	r0, #1
     81e:	f003 fe47 	bl	44b0 <am_hal_sysctrl_sleep>
        //
        // Enable interrupts
        //
        am_hal_interrupt_master_set(ui32IntStatus);
     822:	69f8      	ldr	r0, [r7, #28]
     824:	f001 f9b6 	bl	1b94 <am_hal_interrupt_master_set>
     828:	e7ed      	b.n	806 <am_devices_em9304_block_read+0xfe>
      else
      {
        //
        // Enable interrupts
        //
        am_hal_interrupt_master_set(ui32IntStatus);
     82a:	69f8      	ldr	r0, [r7, #28]
     82c:	f001 f9b2 	bl	1b94 <am_hal_interrupt_master_set>
        break;
     830:	bf00      	nop
    am_hal_iom_spi_read(psDevice->ui32IOMModule,
                        0, pui32Values,
                        len, AM_HAL_IOM_RAW);
#endif

    spiRxTotalBytesCount = len;
     832:	6a3b      	ldr	r3, [r7, #32]
     834:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while ( EM9304_RDY_INT() && (spiRxTotalBytesCount < ui8RxBytes) && (ui8RxBytes != 0))
     838:	f001 f91e 	bl	1a78 <am_hal_gpio_input_read>
     83c:	460a      	mov	r2, r1
     83e:	4601      	mov	r1, r0
     840:	f04f 0300 	mov.w	r3, #0
     844:	f44f 4480 	mov.w	r4, #16384	; 0x4000
     848:	ea03 0301 	and.w	r3, r3, r1
     84c:	ea04 0402 	and.w	r4, r4, r2
     850:	4323      	orrs	r3, r4
     852:	d009      	beq.n	868 <am_devices_em9304_block_read+0x160>
     854:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
     858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
     85c:	429a      	cmp	r2, r3
     85e:	d203      	bcs.n	868 <am_devices_em9304_block_read+0x160>
     860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
     864:	2b00      	cmp	r3, #0
     866:	d1b1      	bne.n	7cc <am_devices_em9304_block_read+0xc4>
  }

  // Deselect the EM9304
  EM9304_SPISLAVEDESELECT();
     868:	4b06      	ldr	r3, [pc, #24]	; (884 <am_devices_em9304_block_read+0x17c>)
     86a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     86e:	601a      	str	r2, [r3, #0]

  return spiRxTotalBytesCount;
     870:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
}
     874:	4618      	mov	r0, r3
     876:	372c      	adds	r7, #44	; 0x2c
     878:	46bd      	mov	sp, r7
     87a:	bd90      	pop	{r4, r7, pc}
     87c:	1000084c 	.word	0x1000084c
     880:	4001009c 	.word	0x4001009c
     884:	40010094 	.word	0x40010094
     888:	1000084d 	.word	0x1000084d
     88c:	00000441 	.word	0x00000441

00000890 <am_devices_em9304_spi_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_em9304_spi_init(uint32_t ui32Module, const am_hal_iom_config_t *psIomConfig)
{
     890:	b580      	push	{r7, lr}
     892:	b082      	sub	sp, #8
     894:	af00      	add	r7, sp, #0
     896:	6078      	str	r0, [r7, #4]
     898:	6039      	str	r1, [r7, #0]
    if ( AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_IFCEN_M )
     89a:	687b      	ldr	r3, [r7, #4]
     89c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
     8a0:	3304      	adds	r3, #4
     8a2:	031b      	lsls	r3, r3, #12
     8a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
     8a8:	681b      	ldr	r3, [r3, #0]
     8aa:	2b00      	cmp	r3, #0
     8ac:	db1b      	blt.n	8e6 <am_devices_em9304_spi_init+0x56>
    {
        return;
    }

#if defined(AM_PART_APOLLO2)
    am_hal_iom_pwrctrl_enable(ui32Module);
     8ae:	6878      	ldr	r0, [r7, #4]
     8b0:	f001 fc34 	bl	211c <am_hal_iom_pwrctrl_enable>
#endif
    //
    // Setup the pins for SPI mode.
    //
    am_bsp_iom_spi_pins_enable(ui32Module);
     8b4:	6878      	ldr	r0, [r7, #4]
     8b6:	f000 fc7f 	bl	11b8 <am_bsp_iom_spi_pins_enable>

    //
    // Set the required configuration settings for the IOM.
    //
    am_hal_iom_config(ui32Module, psIomConfig);
     8ba:	6839      	ldr	r1, [r7, #0]
     8bc:	6878      	ldr	r0, [r7, #4]
     8be:	f001 fcc9 	bl	2254 <am_hal_iom_config>

    // Enable spi
    am_hal_iom_enable(ui32Module);
     8c2:	6878      	ldr	r0, [r7, #4]
     8c4:	f001 fc3e 	bl	2144 <am_hal_iom_enable>

#if defined(USE_IOM_NONBLOCKING)
    //
    // Enable interrupts.
    //
    am_hal_iom_int_clear(ui32Module, AM_HAL_IOM_INT_CMDCMP | AM_HAL_IOM_INT_THR);
     8c8:	2103      	movs	r1, #3
     8ca:	6878      	ldr	r0, [r7, #4]
     8cc:	f003 faaa 	bl	3e24 <am_hal_iom_int_clear>
    am_hal_iom_int_enable(ui32Module, AM_HAL_IOM_INT_CMDCMP | AM_HAL_IOM_INT_THR);
     8d0:	2103      	movs	r1, #3
     8d2:	6878      	ldr	r0, [r7, #4]
     8d4:	f003 fa9a 	bl	3e0c <am_hal_iom_int_enable>
#elif (3 == AM_BSP_EM9304_IOM)
      am_hal_interrupt_enable(AM_HAL_INTERRUPT_IOMASTER3);
#elif (4 == AM_BSP_EM9304_IOM)
      am_hal_interrupt_enable(AM_HAL_INTERRUPT_IOMASTER4);
#elif (5 == AM_BSP_EM9304_IOM)
      am_hal_interrupt_enable(AM_HAL_INTERRUPT_IOMASTER5);
     8d8:	201b      	movs	r0, #27
     8da:	f001 f92b 	bl	1b34 <am_hal_interrupt_enable>
#endif

    //
    // Reset the IOM Done flag.
    //
    gIomDone = false;
     8de:	4b04      	ldr	r3, [pc, #16]	; (8f0 <am_devices_em9304_spi_init+0x60>)
     8e0:	2200      	movs	r2, #0
     8e2:	701a      	strb	r2, [r3, #0]
     8e4:	e000      	b.n	8e8 <am_devices_em9304_spi_init+0x58>
        return;
     8e6:	bf00      	nop
#endif

}
     8e8:	3708      	adds	r7, #8
     8ea:	46bd      	mov	sp, r7
     8ec:	bd80      	pop	{r7, pc}
     8ee:	bf00      	nop
     8f0:	1000084d 	.word	0x1000084d

000008f4 <am_devices_em9304_spi_awake>:
//! @return None.
//
//*****************************************************************************
void
am_devices_em9304_spi_awake(uint32_t ui32Module)
{
     8f4:	b580      	push	{r7, lr}
     8f6:	b082      	sub	sp, #8
     8f8:	af00      	add	r7, sp, #0
     8fa:	6078      	str	r0, [r7, #4]

    if ( AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_IFCEN_M )
     8fc:	687b      	ldr	r3, [r7, #4]
     8fe:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
     902:	3304      	adds	r3, #4
     904:	031b      	lsls	r3, r3, #12
     906:	f503 738e 	add.w	r3, r3, #284	; 0x11c
     90a:	681b      	ldr	r3, [r3, #0]
     90c:	2b00      	cmp	r3, #0
     90e:	db09      	blt.n	924 <am_devices_em9304_spi_awake+0x30>
    {
        return;
    }

#if defined(AM_PART_APOLLO2)
    am_hal_iom_power_on_restore(ui32Module);
     910:	6878      	ldr	r0, [r7, #4]
     912:	f001 fc41 	bl	2198 <am_hal_iom_power_on_restore>
#endif

    //
    // Setup the pins for SPI mode.
    //
    am_bsp_iom_spi_pins_enable(ui32Module);
     916:	6878      	ldr	r0, [r7, #4]
     918:	f000 fc4e 	bl	11b8 <am_bsp_iom_spi_pins_enable>

    // Enable spi
    am_hal_iom_enable(ui32Module);
     91c:	6878      	ldr	r0, [r7, #4]
     91e:	f001 fc11 	bl	2144 <am_hal_iom_enable>
     922:	e000      	b.n	926 <am_devices_em9304_spi_awake+0x32>
        return;
     924:	bf00      	nop
}
     926:	3708      	adds	r7, #8
     928:	46bd      	mov	sp, r7
     92a:	bd80      	pop	{r7, pc}

0000092c <am_devices_em9304_configure_spi_sleep>:

void
am_devices_em9304_configure_spi_sleep(void)
{
     92c:	b580      	push	{r7, lr}
     92e:	b084      	sub	sp, #16
     930:	af00      	add	r7, sp, #0

  am_hal_gpio_out_bit_clear(AM_BSP_GPIO_IOM4_SCK);
  am_hal_gpio_out_bit_clear(AM_BSP_GPIO_IOM4_MISO);
  am_hal_gpio_out_bit_clear(AM_BSP_GPIO_IOM4_MOSI);
#elif (5 == AM_BSP_EM9304_IOM)
  am_hal_gpio_pin_config(AM_BSP_GPIO_IOM5_SCK, AM_HAL_PIN_OUTPUT);
     932:	f001 f92b 	bl	1b8c <am_hal_interrupt_master_disable>
     936:	4603      	mov	r3, r0
     938:	60fb      	str	r3, [r7, #12]
     93a:	4b3c      	ldr	r3, [pc, #240]	; (a2c <am_devices_em9304_configure_spi_sleep+0x100>)
     93c:	2273      	movs	r2, #115	; 0x73
     93e:	601a      	str	r2, [r3, #0]
     940:	4a3b      	ldr	r2, [pc, #236]	; (a30 <am_devices_em9304_configure_spi_sleep+0x104>)
     942:	4b3b      	ldr	r3, [pc, #236]	; (a30 <am_devices_em9304_configure_spi_sleep+0x104>)
     944:	681b      	ldr	r3, [r3, #0]
     946:	f023 0307 	bic.w	r3, r3, #7
     94a:	f043 0302 	orr.w	r3, r3, #2
     94e:	6013      	str	r3, [r2, #0]
     950:	4a38      	ldr	r2, [pc, #224]	; (a34 <am_devices_em9304_configure_spi_sleep+0x108>)
     952:	4b38      	ldr	r3, [pc, #224]	; (a34 <am_devices_em9304_configure_spi_sleep+0x108>)
     954:	681b      	ldr	r3, [r3, #0]
     956:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     95a:	f043 0318 	orr.w	r3, r3, #24
     95e:	6013      	str	r3, [r2, #0]
     960:	4a35      	ldr	r2, [pc, #212]	; (a38 <am_devices_em9304_configure_spi_sleep+0x10c>)
     962:	4b35      	ldr	r3, [pc, #212]	; (a38 <am_devices_em9304_configure_spi_sleep+0x10c>)
     964:	681b      	ldr	r3, [r3, #0]
     966:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     96a:	6013      	str	r3, [r2, #0]
     96c:	4b2f      	ldr	r3, [pc, #188]	; (a2c <am_devices_em9304_configure_spi_sleep+0x100>)
     96e:	2200      	movs	r2, #0
     970:	601a      	str	r2, [r3, #0]
     972:	68fb      	ldr	r3, [r7, #12]
     974:	4618      	mov	r0, r3
     976:	f001 f90d 	bl	1b94 <am_hal_interrupt_master_set>
  am_hal_gpio_pin_config(AM_BSP_GPIO_IOM5_MISO, AM_HAL_PIN_OUTPUT);
     97a:	f001 f907 	bl	1b8c <am_hal_interrupt_master_disable>
     97e:	4603      	mov	r3, r0
     980:	60bb      	str	r3, [r7, #8]
     982:	4b2a      	ldr	r3, [pc, #168]	; (a2c <am_devices_em9304_configure_spi_sleep+0x100>)
     984:	2273      	movs	r2, #115	; 0x73
     986:	601a      	str	r2, [r3, #0]
     988:	4a29      	ldr	r2, [pc, #164]	; (a30 <am_devices_em9304_configure_spi_sleep+0x104>)
     98a:	4b29      	ldr	r3, [pc, #164]	; (a30 <am_devices_em9304_configure_spi_sleep+0x104>)
     98c:	681b      	ldr	r3, [r3, #0]
     98e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     992:	f043 0320 	orr.w	r3, r3, #32
     996:	6013      	str	r3, [r2, #0]
     998:	4a26      	ldr	r2, [pc, #152]	; (a34 <am_devices_em9304_configure_spi_sleep+0x108>)
     99a:	4b26      	ldr	r3, [pc, #152]	; (a34 <am_devices_em9304_configure_spi_sleep+0x108>)
     99c:	681b      	ldr	r3, [r3, #0]
     99e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     9a2:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
     9a6:	6013      	str	r3, [r2, #0]
     9a8:	4a23      	ldr	r2, [pc, #140]	; (a38 <am_devices_em9304_configure_spi_sleep+0x10c>)
     9aa:	4b23      	ldr	r3, [pc, #140]	; (a38 <am_devices_em9304_configure_spi_sleep+0x10c>)
     9ac:	681b      	ldr	r3, [r3, #0]
     9ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     9b2:	6013      	str	r3, [r2, #0]
     9b4:	4b1d      	ldr	r3, [pc, #116]	; (a2c <am_devices_em9304_configure_spi_sleep+0x100>)
     9b6:	2200      	movs	r2, #0
     9b8:	601a      	str	r2, [r3, #0]
     9ba:	68bb      	ldr	r3, [r7, #8]
     9bc:	4618      	mov	r0, r3
     9be:	f001 f8e9 	bl	1b94 <am_hal_interrupt_master_set>
  am_hal_gpio_pin_config(AM_BSP_GPIO_IOM5_MOSI, AM_HAL_PIN_OUTPUT);
     9c2:	f001 f8e3 	bl	1b8c <am_hal_interrupt_master_disable>
     9c6:	4603      	mov	r3, r0
     9c8:	607b      	str	r3, [r7, #4]
     9ca:	4b18      	ldr	r3, [pc, #96]	; (a2c <am_devices_em9304_configure_spi_sleep+0x100>)
     9cc:	2273      	movs	r2, #115	; 0x73
     9ce:	601a      	str	r2, [r3, #0]
     9d0:	4a1a      	ldr	r2, [pc, #104]	; (a3c <am_devices_em9304_configure_spi_sleep+0x110>)
     9d2:	4b1a      	ldr	r3, [pc, #104]	; (a3c <am_devices_em9304_configure_spi_sleep+0x110>)
     9d4:	681b      	ldr	r3, [r3, #0]
     9d6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
     9da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
     9de:	6013      	str	r3, [r2, #0]
     9e0:	4a17      	ldr	r2, [pc, #92]	; (a40 <am_devices_em9304_configure_spi_sleep+0x114>)
     9e2:	4b17      	ldr	r3, [pc, #92]	; (a40 <am_devices_em9304_configure_spi_sleep+0x114>)
     9e4:	681b      	ldr	r3, [r3, #0]
     9e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     9ea:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
     9ee:	6013      	str	r3, [r2, #0]
     9f0:	4a14      	ldr	r2, [pc, #80]	; (a44 <am_devices_em9304_configure_spi_sleep+0x118>)
     9f2:	4b14      	ldr	r3, [pc, #80]	; (a44 <am_devices_em9304_configure_spi_sleep+0x118>)
     9f4:	681b      	ldr	r3, [r3, #0]
     9f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     9fa:	6013      	str	r3, [r2, #0]
     9fc:	4b0b      	ldr	r3, [pc, #44]	; (a2c <am_devices_em9304_configure_spi_sleep+0x100>)
     9fe:	2200      	movs	r2, #0
     a00:	601a      	str	r2, [r3, #0]
     a02:	687b      	ldr	r3, [r7, #4]
     a04:	4618      	mov	r0, r3
     a06:	f001 f8c5 	bl	1b94 <am_hal_interrupt_master_set>

  am_hal_gpio_out_bit_clear(AM_BSP_GPIO_IOM5_SCK);
     a0a:	4b0f      	ldr	r3, [pc, #60]	; (a48 <am_devices_em9304_configure_spi_sleep+0x11c>)
     a0c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     a10:	601a      	str	r2, [r3, #0]
  am_hal_gpio_out_bit_clear(AM_BSP_GPIO_IOM5_MISO);
     a12:	4b0d      	ldr	r3, [pc, #52]	; (a48 <am_devices_em9304_configure_spi_sleep+0x11c>)
     a14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     a18:	601a      	str	r2, [r3, #0]
  am_hal_gpio_out_bit_clear(AM_BSP_GPIO_IOM5_MOSI);
     a1a:	4b0b      	ldr	r3, [pc, #44]	; (a48 <am_devices_em9304_configure_spi_sleep+0x11c>)
     a1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     a20:	601a      	str	r2, [r3, #0]
#endif
#endif // AM_APOLLO3_GPIO

}
     a22:	bf00      	nop
     a24:	3710      	adds	r7, #16
     a26:	46bd      	mov	sp, r7
     a28:	bd80      	pop	{r7, pc}
     a2a:	bf00      	nop
     a2c:	40010060 	.word	0x40010060
     a30:	40010058 	.word	0x40010058
     a34:	40010030 	.word	0x40010030
     a38:	40010110 	.word	0x40010110
     a3c:	40010054 	.word	0x40010054
     a40:	4001002c 	.word	0x4001002c
     a44:	4001010c 	.word	0x4001010c
     a48:	4001009c 	.word	0x4001009c

00000a4c <am_devices_em9304_spi_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_devices_em9304_spi_sleep(uint32_t ui32Module)
{
     a4c:	b580      	push	{r7, lr}
     a4e:	b082      	sub	sp, #8
     a50:	af00      	add	r7, sp, #0
     a52:	6078      	str	r0, [r7, #4]
    if ( !(AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_IFCEN_M) )
     a54:	687b      	ldr	r3, [r7, #4]
     a56:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
     a5a:	3304      	adds	r3, #4
     a5c:	031b      	lsls	r3, r3, #12
     a5e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
     a62:	681b      	ldr	r3, [r3, #0]
     a64:	2b00      	cmp	r3, #0
     a66:	da08      	bge.n	a7a <am_devices_em9304_spi_sleep+0x2e>
    {
        return;
    }

    am_hal_iom_disable(ui32Module);
     a68:	6878      	ldr	r0, [r7, #4]
     a6a:	f001 fb81 	bl	2170 <am_hal_iom_disable>

#if defined(AM_PART_APOLLO)
    am_bsp_iom_spi_pins_disable(ui32Module);
#else
    am_hal_iom_power_off_save(ui32Module);
     a6e:	6878      	ldr	r0, [r7, #4]
     a70:	f001 fbc2 	bl	21f8 <am_hal_iom_power_off_save>
    am_devices_em9304_configure_spi_sleep();
     a74:	f7ff ff5a 	bl	92c <am_devices_em9304_configure_spi_sleep>
     a78:	e000      	b.n	a7c <am_devices_em9304_spi_sleep+0x30>
        return;
     a7a:	bf00      	nop
#endif
}
     a7c:	3708      	adds	r7, #8
     a7e:	46bd      	mov	sp, r7
     a80:	bd80      	pop	{r7, pc}
	...

00000a84 <am_devices_em9304_config_pins>:
//! @return None.
//
//*****************************************************************************
void
am_devices_em9304_config_pins(void)
{
     a84:	b580      	push	{r7, lr}
     a86:	b084      	sub	sp, #16
     a88:	af00      	add	r7, sp, #0
    am_hal_gpio_state_write(AM_BSP_GPIO_EM9304_CS, AM_HAL_GPIO_OUTPUT_SET);

    // Note - interrupt polarity is handled by the pin configuration.
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_EM9304_INT));
#else
    am_bsp_pin_enable(EM9304_CS);
     a8a:	f001 f87f 	bl	1b8c <am_hal_interrupt_master_disable>
     a8e:	4603      	mov	r3, r0
     a90:	60fb      	str	r3, [r7, #12]
     a92:	4b32      	ldr	r3, [pc, #200]	; (b5c <am_devices_em9304_config_pins+0xd8>)
     a94:	2273      	movs	r2, #115	; 0x73
     a96:	601a      	str	r2, [r3, #0]
     a98:	4a31      	ldr	r2, [pc, #196]	; (b60 <am_devices_em9304_config_pins+0xdc>)
     a9a:	4b31      	ldr	r3, [pc, #196]	; (b60 <am_devices_em9304_config_pins+0xdc>)
     a9c:	681b      	ldr	r3, [r3, #0]
     a9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
     aa2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
     aa6:	6013      	str	r3, [r2, #0]
     aa8:	4a2e      	ldr	r2, [pc, #184]	; (b64 <am_devices_em9304_config_pins+0xe0>)
     aaa:	4b2e      	ldr	r3, [pc, #184]	; (b64 <am_devices_em9304_config_pins+0xe0>)
     aac:	681b      	ldr	r3, [r3, #0]
     aae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     ab2:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
     ab6:	6013      	str	r3, [r2, #0]
     ab8:	4a2b      	ldr	r2, [pc, #172]	; (b68 <am_devices_em9304_config_pins+0xe4>)
     aba:	4b2b      	ldr	r3, [pc, #172]	; (b68 <am_devices_em9304_config_pins+0xe4>)
     abc:	681b      	ldr	r3, [r3, #0]
     abe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     ac2:	6013      	str	r3, [r2, #0]
     ac4:	4b25      	ldr	r3, [pc, #148]	; (b5c <am_devices_em9304_config_pins+0xd8>)
     ac6:	2200      	movs	r2, #0
     ac8:	601a      	str	r2, [r3, #0]
     aca:	68fb      	ldr	r3, [r7, #12]
     acc:	4618      	mov	r0, r3
     ace:	f001 f861 	bl	1b94 <am_hal_interrupt_master_set>
    am_bsp_pin_enable(EM9304_INT);
     ad2:	f001 f85b 	bl	1b8c <am_hal_interrupt_master_disable>
     ad6:	4603      	mov	r3, r0
     ad8:	60bb      	str	r3, [r7, #8]
     ada:	4b20      	ldr	r3, [pc, #128]	; (b5c <am_devices_em9304_config_pins+0xd8>)
     adc:	2273      	movs	r2, #115	; 0x73
     ade:	601a      	str	r2, [r3, #0]
     ae0:	4a1f      	ldr	r2, [pc, #124]	; (b60 <am_devices_em9304_config_pins+0xdc>)
     ae2:	4b1f      	ldr	r3, [pc, #124]	; (b60 <am_devices_em9304_config_pins+0xdc>)
     ae4:	681b      	ldr	r3, [r3, #0]
     ae6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     aea:	6013      	str	r3, [r2, #0]
     aec:	4a1d      	ldr	r2, [pc, #116]	; (b64 <am_devices_em9304_config_pins+0xe0>)
     aee:	4b1d      	ldr	r3, [pc, #116]	; (b64 <am_devices_em9304_config_pins+0xe0>)
     af0:	681b      	ldr	r3, [r3, #0]
     af2:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     af6:	f443 13d0 	orr.w	r3, r3, #1703936	; 0x1a0000
     afa:	6013      	str	r3, [r2, #0]
     afc:	4a1a      	ldr	r2, [pc, #104]	; (b68 <am_devices_em9304_config_pins+0xe4>)
     afe:	4b1a      	ldr	r3, [pc, #104]	; (b68 <am_devices_em9304_config_pins+0xe4>)
     b00:	681b      	ldr	r3, [r3, #0]
     b02:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     b06:	6013      	str	r3, [r2, #0]
     b08:	4b14      	ldr	r3, [pc, #80]	; (b5c <am_devices_em9304_config_pins+0xd8>)
     b0a:	2200      	movs	r2, #0
     b0c:	601a      	str	r2, [r3, #0]
     b0e:	68bb      	ldr	r3, [r7, #8]
     b10:	4618      	mov	r0, r3
     b12:	f001 f83f 	bl	1b94 <am_hal_interrupt_master_set>

    am_hal_gpio_out_bit_set(AM_BSP_GPIO_EM9304_CS);
     b16:	4b15      	ldr	r3, [pc, #84]	; (b6c <am_devices_em9304_config_pins+0xe8>)
     b18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     b1c:	601a      	str	r2, [r3, #0]

    am_hal_gpio_int_polarity_bit_set(AM_BSP_GPIO_EM9304_INT, AM_HAL_GPIO_RISING);
     b1e:	f001 f835 	bl	1b8c <am_hal_interrupt_master_disable>
     b22:	4603      	mov	r3, r0
     b24:	607b      	str	r3, [r7, #4]
     b26:	4b0d      	ldr	r3, [pc, #52]	; (b5c <am_devices_em9304_config_pins+0xd8>)
     b28:	2273      	movs	r2, #115	; 0x73
     b2a:	601a      	str	r2, [r3, #0]
     b2c:	4a0c      	ldr	r2, [pc, #48]	; (b60 <am_devices_em9304_config_pins+0xdc>)
     b2e:	4b0c      	ldr	r3, [pc, #48]	; (b60 <am_devices_em9304_config_pins+0xdc>)
     b30:	681b      	ldr	r3, [r3, #0]
     b32:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
     b36:	6013      	str	r3, [r2, #0]
     b38:	4b08      	ldr	r3, [pc, #32]	; (b5c <am_devices_em9304_config_pins+0xd8>)
     b3a:	2200      	movs	r2, #0
     b3c:	601a      	str	r2, [r3, #0]
     b3e:	687b      	ldr	r3, [r7, #4]
     b40:	4618      	mov	r0, r3
     b42:	f001 f827 	bl	1b94 <am_hal_interrupt_master_set>
    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_EM9304_INT));
     b46:	f04f 0000 	mov.w	r0, #0
     b4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     b4e:	f000 ffb3 	bl	1ab8 <am_hal_gpio_int_clear>
#endif // AM_APOLLO3_GPIO
}
     b52:	bf00      	nop
     b54:	3710      	adds	r7, #16
     b56:	46bd      	mov	sp, r7
     b58:	bd80      	pop	{r7, pc}
     b5a:	bf00      	nop
     b5c:	40010060 	.word	0x40010060
     b60:	40010054 	.word	0x40010054
     b64:	4001002c 	.word	0x4001002c
     b68:	4001010c 	.word	0x4001010c
     b6c:	40010094 	.word	0x40010094

00000b70 <am_devices_em9304_enable_interrupt>:

    return true;
}

void am_devices_em9304_enable_interrupt(void)
{
     b70:	b580      	push	{r7, lr}
     b72:	af00      	add	r7, sp, #0
#if AM_APOLLO3_GPIO
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_EM9304_INT));
#else
    am_hal_gpio_int_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_EM9304_INT));
     b74:	f04f 0000 	mov.w	r0, #0
     b78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     b7c:	f000 ff8c 	bl	1a98 <am_hal_gpio_int_enable>
#endif
}
     b80:	bf00      	nop
     b82:	bd80      	pop	{r7, pc}

00000b84 <timer_init>:
// Set up a CTIMER at 32KHz
//
//*****************************************************************************
void
timer_init(void)
{
     b84:	b580      	push	{r7, lr}
     b86:	af00      	add	r7, sp, #0
    am_hal_ctimer_config_single(0, AM_HAL_CTIMER_TIMERA,
     b88:	f44f 7211 	mov.w	r2, #580	; 0x244
     b8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     b90:	2000      	movs	r0, #0
     b92:	f000 fd97 	bl	16c4 <am_hal_ctimer_config_single>
                                   AM_HAL_CTIMER_HFRC_3MHZ |
                                   AM_HAL_CTIMER_FN_REPEAT |
                                   AM_HAL_CTIMER_INT_ENABLE);

    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
     b96:	2001      	movs	r0, #1
     b98:	f000 fe94 	bl	18c4 <am_hal_ctimer_int_enable>

    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, 49, 25);
     b9c:	2319      	movs	r3, #25
     b9e:	2231      	movs	r2, #49	; 0x31
     ba0:	f64f 71ff 	movw	r1, #65535	; 0xffff
     ba4:	2000      	movs	r0, #0
     ba6:	f000 fe33 	bl	1810 <am_hal_ctimer_period_set>


    //
    // Start the timer.
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
     baa:	f64f 71ff 	movw	r1, #65535	; 0xffff
     bae:	2000      	movs	r0, #0
     bb0:	f000 fe02 	bl	17b8 <am_hal_ctimer_start>

    //
    // Enable the timer interrupt.
    //
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
     bb4:	2001      	movs	r0, #1
     bb6:	f000 fe85 	bl	18c4 <am_hal_ctimer_int_enable>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_CTIMER);
     bba:	201d      	movs	r0, #29
     bbc:	f000 ffba 	bl	1b34 <am_hal_interrupt_enable>
}
     bc0:	bf00      	nop
     bc2:	bd80      	pop	{r7, pc}

00000bc4 <em9304_init>:
// Initialize the EM9304 BLE Controller
//
//*****************************************************************************
void
em9304_init(void)
{
     bc4:	b580      	push	{r7, lr}
     bc6:	b082      	sub	sp, #8
     bc8:	af00      	add	r7, sp, #0
    //
    // Configurre the EM9303 pins.
    //
    am_hal_gpio_pin_config(HCI_APOLLO_RESET_PIN, AM_HAL_GPIO_OUTPUT);
     bca:	f000 ffdf 	bl	1b8c <am_hal_interrupt_master_disable>
     bce:	4603      	mov	r3, r0
     bd0:	607b      	str	r3, [r7, #4]
     bd2:	4b30      	ldr	r3, [pc, #192]	; (c94 <em9304_init+0xd0>)
     bd4:	2273      	movs	r2, #115	; 0x73
     bd6:	601a      	str	r2, [r3, #0]
     bd8:	4a2f      	ldr	r2, [pc, #188]	; (c98 <em9304_init+0xd4>)
     bda:	4b2f      	ldr	r3, [pc, #188]	; (c98 <em9304_init+0xd4>)
     bdc:	681b      	ldr	r3, [r3, #0]
     bde:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     be6:	6013      	str	r3, [r2, #0]
     be8:	4a2c      	ldr	r2, [pc, #176]	; (c9c <em9304_init+0xd8>)
     bea:	4b2c      	ldr	r3, [pc, #176]	; (c9c <em9304_init+0xd8>)
     bec:	681b      	ldr	r3, [r3, #0]
     bee:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     bf2:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
     bf6:	6013      	str	r3, [r2, #0]
     bf8:	4a29      	ldr	r2, [pc, #164]	; (ca0 <em9304_init+0xdc>)
     bfa:	4b29      	ldr	r3, [pc, #164]	; (ca0 <em9304_init+0xdc>)
     bfc:	681b      	ldr	r3, [r3, #0]
     bfe:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     c02:	6013      	str	r3, [r2, #0]
     c04:	4b23      	ldr	r3, [pc, #140]	; (c94 <em9304_init+0xd0>)
     c06:	2200      	movs	r2, #0
     c08:	601a      	str	r2, [r3, #0]
     c0a:	687b      	ldr	r3, [r7, #4]
     c0c:	4618      	mov	r0, r3
     c0e:	f000 ffc1 	bl	1b94 <am_hal_interrupt_master_set>
    am_hal_gpio_pin_config(AM_BSP_GPIO_EM9304_PTM, AM_HAL_GPIO_OUTPUT);
     c12:	f000 ffbb 	bl	1b8c <am_hal_interrupt_master_disable>
     c16:	4603      	mov	r3, r0
     c18:	603b      	str	r3, [r7, #0]
     c1a:	4b1e      	ldr	r3, [pc, #120]	; (c94 <em9304_init+0xd0>)
     c1c:	2273      	movs	r2, #115	; 0x73
     c1e:	601a      	str	r2, [r3, #0]
     c20:	4a20      	ldr	r2, [pc, #128]	; (ca4 <em9304_init+0xe0>)
     c22:	4b20      	ldr	r3, [pc, #128]	; (ca4 <em9304_init+0xe0>)
     c24:	681b      	ldr	r3, [r3, #0]
     c26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     c2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     c2e:	6013      	str	r3, [r2, #0]
     c30:	4a1d      	ldr	r2, [pc, #116]	; (ca8 <em9304_init+0xe4>)
     c32:	4b1d      	ldr	r3, [pc, #116]	; (ca8 <em9304_init+0xe4>)
     c34:	681b      	ldr	r3, [r3, #0]
     c36:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     c3a:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
     c3e:	6013      	str	r3, [r2, #0]
     c40:	4a1a      	ldr	r2, [pc, #104]	; (cac <em9304_init+0xe8>)
     c42:	4b1a      	ldr	r3, [pc, #104]	; (cac <em9304_init+0xe8>)
     c44:	681b      	ldr	r3, [r3, #0]
     c46:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     c4a:	6013      	str	r3, [r2, #0]
     c4c:	4b11      	ldr	r3, [pc, #68]	; (c94 <em9304_init+0xd0>)
     c4e:	2200      	movs	r2, #0
     c50:	601a      	str	r2, [r3, #0]
     c52:	683b      	ldr	r3, [r7, #0]
     c54:	4618      	mov	r0, r3
     c56:	f000 ff9d 	bl	1b94 <am_hal_interrupt_master_set>

    //
    // Assert RESET to the EM9304.
    //
    am_hal_gpio_out_bit_clear(HCI_APOLLO_RESET_PIN);
     c5a:	4b15      	ldr	r3, [pc, #84]	; (cb0 <em9304_init+0xec>)
     c5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
     c60:	601a      	str	r2, [r3, #0]

    //
    // Setup SPI interface for EM9304
    //
    am_devices_em9304_config_pins();
     c62:	f7ff ff0f 	bl	a84 <am_devices_em9304_config_pins>
    am_devices_em9304_spi_init(g_sEm9304.ui32IOMModule, &g_sEm9304IOMConfigSPI);
     c66:	4b13      	ldr	r3, [pc, #76]	; (cb4 <em9304_init+0xf0>)
     c68:	685b      	ldr	r3, [r3, #4]
     c6a:	4913      	ldr	r1, [pc, #76]	; (cb8 <em9304_init+0xf4>)
     c6c:	4618      	mov	r0, r3
     c6e:	f7ff fe0f 	bl	890 <am_devices_em9304_spi_init>

    // enable interrupt.
    am_devices_em9304_enable_interrupt();
     c72:	f7ff ff7d 	bl	b70 <am_devices_em9304_enable_interrupt>
    //
    // Delay for 20ms to make sure the em device gets ready for commands.
    //
    am_util_delay_ms(5);
     c76:	2005      	movs	r0, #5
     c78:	f000 f9f4 	bl	1064 <am_util_delay_ms>

    //
    // Enable the IOM and GPIO interrupt handlers.
    //
    am_hal_gpio_out_bit_set(HCI_APOLLO_RESET_PIN);
     c7c:	4b0f      	ldr	r3, [pc, #60]	; (cbc <em9304_init+0xf8>)
     c7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
     c82:	601a      	str	r2, [r3, #0]

    //am_hal_interrupt_enable(AM_HAL_INTERRUPT_GPIO);

    am_util_debug_printf("HciDrvRadioBoot complete\n");

    am_util_delay_ms(20);
     c84:	2014      	movs	r0, #20
     c86:	f000 f9ed 	bl	1064 <am_util_delay_ms>
}
     c8a:	bf00      	nop
     c8c:	3708      	adds	r7, #8
     c8e:	46bd      	mov	sp, r7
     c90:	bd80      	pop	{r7, pc}
     c92:	bf00      	nop
     c94:	40010060 	.word	0x40010060
     c98:	40010054 	.word	0x40010054
     c9c:	40010028 	.word	0x40010028
     ca0:	40010108 	.word	0x40010108
     ca4:	4001004c 	.word	0x4001004c
     ca8:	4001001c 	.word	0x4001001c
     cac:	400100fc 	.word	0x400100fc
     cb0:	4001009c 	.word	0x4001009c
     cb4:	00004b24 	.word	0x00004b24
     cb8:	00004b18 	.word	0x00004b18
     cbc:	40010094 	.word	0x40010094

00000cc0 <uart_init>:
// Initialize the UART
//
//*****************************************************************************
void
uart_init(uint32_t ui32Module)
{
     cc0:	b580      	push	{r7, lr}
     cc2:	b086      	sub	sp, #24
     cc4:	af02      	add	r7, sp, #8
     cc6:	6078      	str	r0, [r7, #4]
    //
    // Make sure the UART RX and TX pins are enabled.
    //
    am_bsp_pin_enable(COM_UART_TX);
     cc8:	f000 ff60 	bl	1b8c <am_hal_interrupt_master_disable>
     ccc:	4603      	mov	r3, r0
     cce:	60fb      	str	r3, [r7, #12]
     cd0:	4b33      	ldr	r3, [pc, #204]	; (da0 <uart_init+0xe0>)
     cd2:	2273      	movs	r2, #115	; 0x73
     cd4:	601a      	str	r2, [r3, #0]
     cd6:	4a33      	ldr	r2, [pc, #204]	; (da4 <uart_init+0xe4>)
     cd8:	4b32      	ldr	r3, [pc, #200]	; (da4 <uart_init+0xe4>)
     cda:	681b      	ldr	r3, [r3, #0]
     cdc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
     ce0:	6013      	str	r3, [r2, #0]
     ce2:	4a31      	ldr	r2, [pc, #196]	; (da8 <uart_init+0xe8>)
     ce4:	4b30      	ldr	r3, [pc, #192]	; (da8 <uart_init+0xe8>)
     ce6:	681b      	ldr	r3, [r3, #0]
     ce8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     cec:	6013      	str	r3, [r2, #0]
     cee:	4a2f      	ldr	r2, [pc, #188]	; (dac <uart_init+0xec>)
     cf0:	4b2e      	ldr	r3, [pc, #184]	; (dac <uart_init+0xec>)
     cf2:	681b      	ldr	r3, [r3, #0]
     cf4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     cf8:	6013      	str	r3, [r2, #0]
     cfa:	4b29      	ldr	r3, [pc, #164]	; (da0 <uart_init+0xe0>)
     cfc:	2200      	movs	r2, #0
     cfe:	601a      	str	r2, [r3, #0]
     d00:	68fb      	ldr	r3, [r7, #12]
     d02:	4618      	mov	r0, r3
     d04:	f000 ff46 	bl	1b94 <am_hal_interrupt_master_set>
    am_bsp_pin_enable(COM_UART_RX);
     d08:	f000 ff40 	bl	1b8c <am_hal_interrupt_master_disable>
     d0c:	4603      	mov	r3, r0
     d0e:	60bb      	str	r3, [r7, #8]
     d10:	4b23      	ldr	r3, [pc, #140]	; (da0 <uart_init+0xe0>)
     d12:	2273      	movs	r2, #115	; 0x73
     d14:	601a      	str	r2, [r3, #0]
     d16:	4a23      	ldr	r2, [pc, #140]	; (da4 <uart_init+0xe4>)
     d18:	4b22      	ldr	r3, [pc, #136]	; (da4 <uart_init+0xe4>)
     d1a:	681b      	ldr	r3, [r3, #0]
     d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     d20:	6013      	str	r3, [r2, #0]
     d22:	4a23      	ldr	r2, [pc, #140]	; (db0 <uart_init+0xf0>)
     d24:	4b22      	ldr	r3, [pc, #136]	; (db0 <uart_init+0xf0>)
     d26:	681b      	ldr	r3, [r3, #0]
     d28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     d2c:	f443 5348 	orr.w	r3, r3, #12800	; 0x3200
     d30:	6013      	str	r3, [r2, #0]
     d32:	4a20      	ldr	r2, [pc, #128]	; (db4 <uart_init+0xf4>)
     d34:	4b1f      	ldr	r3, [pc, #124]	; (db4 <uart_init+0xf4>)
     d36:	681b      	ldr	r3, [r3, #0]
     d38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     d3c:	6013      	str	r3, [r2, #0]
     d3e:	4b18      	ldr	r3, [pc, #96]	; (da0 <uart_init+0xe0>)
     d40:	2200      	movs	r2, #0
     d42:	601a      	str	r2, [r3, #0]
     d44:	68bb      	ldr	r3, [r7, #8]
     d46:	4618      	mov	r0, r3
     d48:	f000 ff24 	bl	1b94 <am_hal_interrupt_master_set>

    //
    // Power on the selected UART
    //
    am_hal_uart_pwrctrl_enable(ui32Module);
     d4c:	6878      	ldr	r0, [r7, #4]
     d4e:	f003 fcc7 	bl	46e0 <am_hal_uart_pwrctrl_enable>

    //
    // Start the UART interface, apply the desired configuration settings, and
    // enable the FIFOs.
    //
    am_hal_uart_clock_enable(ui32Module);
     d52:	6878      	ldr	r0, [r7, #4]
     d54:	f003 fcd8 	bl	4708 <am_hal_uart_clock_enable>

    //
    // Disable the UART before configuring it.
    //
    am_hal_uart_disable(ui32Module);
     d58:	6878      	ldr	r0, [r7, #4]
     d5a:	f003 fcab 	bl	46b4 <am_hal_uart_disable>

    //
    // Configure the UART.
    //
    am_hal_uart_config(ui32Module, &g_sUartConfig);
     d5e:	4916      	ldr	r1, [pc, #88]	; (db8 <uart_init+0xf8>)
     d60:	6878      	ldr	r0, [r7, #4]
     d62:	f003 fc43 	bl	45ec <am_hal_uart_config>

    //
    // Enable the UART FIFO.
    //
    am_hal_uart_fifo_config(ui32Module, AM_HAL_UART_TX_FIFO_1_2 |
     d66:	2112      	movs	r1, #18
     d68:	6878      	ldr	r0, [r7, #4]
     d6a:	f003 fcdf 	bl	472c <am_hal_uart_fifo_config>
                                        AM_HAL_UART_RX_FIFO_1_2);

    //
    // Enable the UART.
    //
    am_hal_uart_enable(ui32Module);
     d6e:	6878      	ldr	r0, [r7, #4]
     d70:	f003 fc8a 	bl	4688 <am_hal_uart_enable>

#if AM_PART_APOLLO
    am_hal_uart_int_enable(ui32Module, AM_HAL_UART_INT_RX_TMOUT |
                                       AM_HAL_UART_INT_RX);
#else
    am_hal_uart_int_enable(ui32Module, AM_HAL_UART_INT_RX_TMOUT |
     d74:	2151      	movs	r1, #81	; 0x51
     d76:	6878      	ldr	r0, [r7, #4]
     d78:	f003 fc7e 	bl	4678 <am_hal_uart_int_enable>
#endif

    //
    // Initialize the buffered UART.
    //
    am_hal_uart_init_buffered(ui32Module, g_pui8UARTRXBuffer,
     d7c:	2380      	movs	r3, #128	; 0x80
     d7e:	9300      	str	r3, [sp, #0]
     d80:	4b0e      	ldr	r3, [pc, #56]	; (dbc <uart_init+0xfc>)
     d82:	2280      	movs	r2, #128	; 0x80
     d84:	490e      	ldr	r1, [pc, #56]	; (dc0 <uart_init+0x100>)
     d86:	6878      	ldr	r0, [r7, #4]
     d88:	f003 fcee 	bl	4768 <am_hal_uart_init_buffered>
                              g_pui8UARTTXBuffer, MAX_UART_PACKET_SIZE);

    //
    // Enable the UART interrupt handler.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_UART + ui32Module);
     d8c:	687b      	ldr	r3, [r7, #4]
     d8e:	331e      	adds	r3, #30
     d90:	4618      	mov	r0, r3
     d92:	f000 fecf 	bl	1b34 <am_hal_interrupt_enable>
}
     d96:	bf00      	nop
     d98:	3710      	adds	r7, #16
     d9a:	46bd      	mov	sp, r7
     d9c:	bd80      	pop	{r7, pc}
     d9e:	bf00      	nop
     da0:	40010060 	.word	0x40010060
     da4:	40010048 	.word	0x40010048
     da8:	40010014 	.word	0x40010014
     dac:	400100f4 	.word	0x400100f4
     db0:	40010010 	.word	0x40010010
     db4:	400100f0 	.word	0x400100f0
     db8:	10000800 	.word	0x10000800
     dbc:	1000086c 	.word	0x1000086c
     dc0:	1000096c 	.word	0x1000096c

00000dc4 <am_ctimer_isr>:
// Interrupt handler for the CTIMERs
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
     dc4:	b580      	push	{r7, lr}
     dc6:	b082      	sub	sp, #8
     dc8:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    //
    // Check and clear any active CTIMER interrupts.
    //
    ui32Status = am_hal_ctimer_int_status_get(true);
     dca:	2001      	movs	r0, #1
     dcc:	f000 fd92 	bl	18f4 <am_hal_ctimer_int_status_get>
     dd0:	6078      	str	r0, [r7, #4]
    am_hal_ctimer_int_clear(ui32Status);
     dd2:	6878      	ldr	r0, [r7, #4]
     dd4:	f000 fd88 	bl	18e8 <am_hal_ctimer_int_clear>

    //
    // If indicated, toggle the GPIO5 pin.
    //
    if (g_bPTMToggleFlag)
     dd8:	4b0b      	ldr	r3, [pc, #44]	; (e08 <am_ctimer_isr+0x44>)
     dda:	781b      	ldrb	r3, [r3, #0]
     ddc:	b2db      	uxtb	r3, r3
     dde:	2b00      	cmp	r3, #0
     de0:	d00d      	beq.n	dfe <am_ctimer_isr+0x3a>
    {
      am_hal_gpio_out_bit_toggle(AM_BSP_GPIO_EM9304_PTM);
     de2:	f000 fed3 	bl	1b8c <am_hal_interrupt_master_disable>
     de6:	4603      	mov	r3, r0
     de8:	603b      	str	r3, [r7, #0]
     dea:	4a08      	ldr	r2, [pc, #32]	; (e0c <am_ctimer_isr+0x48>)
     dec:	4b07      	ldr	r3, [pc, #28]	; (e0c <am_ctimer_isr+0x48>)
     dee:	681b      	ldr	r3, [r3, #0]
     df0:	f083 4380 	eor.w	r3, r3, #1073741824	; 0x40000000
     df4:	6013      	str	r3, [r2, #0]
     df6:	683b      	ldr	r3, [r7, #0]
     df8:	4618      	mov	r0, r3
     dfa:	f000 fecb 	bl	1b94 <am_hal_interrupt_master_set>
    }
}
     dfe:	bf00      	nop
     e00:	3708      	adds	r7, #8
     e02:	46bd      	mov	sp, r7
     e04:	bd80      	pop	{r7, pc}
     e06:	bf00      	nop
     e08:	10000850 	.word	0x10000850
     e0c:	40010088 	.word	0x40010088

00000e10 <am_gpio_isr>:
// Interrupt handler for the GPIO module
//
//*****************************************************************************
void
am_gpio_isr(void)
{
     e10:	b590      	push	{r4, r7, lr}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
    uint64_t ui64Status;

    //
    // Check and clear the GPIO interrupt status
    //
    ui64Status = am_hal_gpio_int_status_get(true);
     e16:	2001      	movs	r0, #1
     e18:	f000 fe62 	bl	1ae0 <am_hal_gpio_int_status_get>
     e1c:	e9c7 0100 	strd	r0, r1, [r7]
    am_hal_gpio_int_clear(ui64Status);
     e20:	e9d7 0100 	ldrd	r0, r1, [r7]
     e24:	f000 fe48 	bl	1ab8 <am_hal_gpio_int_clear>

    //
    // Check to see if this was a wakeup event from the BLE radio.
    //
    if ( ui64Status & AM_HAL_GPIO_BIT(AM_BSP_GPIO_EM9304_INT) )
     e28:	e897 0018 	ldmia.w	r7, {r3, r4}
     e2c:	f04f 0100 	mov.w	r1, #0
     e30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     e34:	ea03 0301 	and.w	r3, r3, r1
     e38:	ea04 0402 	and.w	r4, r4, r2
     e3c:	4323      	orrs	r3, r4
     e3e:	d002      	beq.n	e46 <am_gpio_isr+0x36>
    {
        //
        // Indicate that HCI packet is ready from EM9304.
        //
        g_bEM9304HCIReady = true;
     e40:	4b03      	ldr	r3, [pc, #12]	; (e50 <am_gpio_isr+0x40>)
     e42:	2201      	movs	r2, #1
     e44:	701a      	strb	r2, [r3, #0]
    }
}
     e46:	bf00      	nop
     e48:	370c      	adds	r7, #12
     e4a:	46bd      	mov	sp, r7
     e4c:	bd90      	pop	{r4, r7, pc}
     e4e:	bf00      	nop
     e50:	1000084e 	.word	0x1000084e

00000e54 <am_uart_isr>:
// Interrupt handler for the UART
//
//*****************************************************************************
void
am_uart_isr(void)
{
     e54:	b580      	push	{r7, lr}
     e56:	b082      	sub	sp, #8
     e58:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    //
    // Read the masked interrupt status from the UART.
    //
    ui32Status = am_hal_uart_int_status_get(HCI_BRIDGE_UART, true);
     e5a:	2101      	movs	r1, #1
     e5c:	2000      	movs	r0, #0
     e5e:	f003 fbfb 	bl	4658 <am_hal_uart_int_status_get>
     e62:	6078      	str	r0, [r7, #4]

    //
    // Clear the UART interrupts.
    //
    am_hal_uart_int_clear(HCI_BRIDGE_UART, ui32Status);
     e64:	6879      	ldr	r1, [r7, #4]
     e66:	2000      	movs	r0, #0
     e68:	f003 fc00 	bl	466c <am_hal_uart_int_clear>

    //
    // If there are TMOUT, RX or TX interrupts then service them.
    //
    if (ui32Status & (AM_HAL_UART_INT_RX_TMOUT | AM_HAL_UART_INT_TX | AM_HAL_UART_INT_RX))
     e6c:	687b      	ldr	r3, [r7, #4]
     e6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
     e72:	2b00      	cmp	r3, #0
     e74:	d003      	beq.n	e7e <am_uart_isr+0x2a>
    {
#ifdef AM_PART_APOLLO
      am_hal_uart_service_buffered(HCI_BRIDGE_UART, ui32Status);
#else
      am_hal_uart_service_buffered_timeout_save(HCI_BRIDGE_UART, ui32Status);
     e76:	6879      	ldr	r1, [r7, #4]
     e78:	2000      	movs	r0, #0
     e7a:	f003 fcab 	bl	47d4 <am_hal_uart_service_buffered_timeout_save>
    }

    //
    // If there is a TMOUT interrupt, then indicate that to the main routine.
    //
    if (ui32Status & (AM_HAL_UART_INT_RX_TMOUT))
     e7e:	687b      	ldr	r3, [r7, #4]
     e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
     e84:	2b00      	cmp	r3, #0
     e86:	d002      	beq.n	e8e <am_uart_isr+0x3a>
    {
        g_bRxTimeoutFlag = true;
     e88:	4b03      	ldr	r3, [pc, #12]	; (e98 <am_uart_isr+0x44>)
     e8a:	2201      	movs	r2, #1
     e8c:	701a      	strb	r2, [r3, #0]
    }
}
     e8e:	bf00      	nop
     e90:	3708      	adds	r7, #8
     e92:	46bd      	mov	sp, r7
     e94:	bd80      	pop	{r7, pc}
     e96:	bf00      	nop
     e98:	1000084f 	.word	0x1000084f

00000e9c <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     e9c:	b580      	push	{r7, lr}
     e9e:	b082      	sub	sp, #8
     ea0:	af00      	add	r7, sp, #0
    uint32_t      ui32NumChars;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     ea2:	2000      	movs	r0, #0
     ea4:	f000 fbb8 	bl	1618 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     ea8:	4844      	ldr	r0, [pc, #272]	; (fbc <main+0x120>)
     eaa:	f000 fb1f 	bl	14ec <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     eae:	f000 fb07 	bl	14c0 <am_bsp_low_power_init>

    //
    // Enable the buttons for user interaction.
    //
    am_devices_button_array_init(am_bsp_psButtons, AM_BSP_NUM_BUTTONS);
     eb2:	2103      	movs	r1, #3
     eb4:	4842      	ldr	r0, [pc, #264]	; (fc0 <main+0x124>)
     eb6:	f7ff f985 	bl	1c4 <am_devices_button_array_init>

    // Initialize the CTIMERA0.
    timer_init();
     eba:	f7ff fe63 	bl	b84 <timer_init>

    //
    // Initialize the EM9304 interface.
    //
    em9304_init();
     ebe:	f7ff fe81 	bl	bc4 <em9304_init>

    //
    // Initialize the UART, and set it as the default print interface.
    //
    uart_init(HCI_BRIDGE_UART);
     ec2:	2000      	movs	r0, #0
     ec4:	f7ff fefc 	bl	cc0 <uart_init>

    //
    // Initialize the ITM debug interface.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_uart_string_print);
     ec8:	483e      	ldr	r0, [pc, #248]	; (fc4 <main+0x128>)
     eca:	f000 f965 	bl	1198 <am_util_stdio_printf_init>

    //
    // Enable BLE data ready interrupt
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_GPIO);
     ece:	201c      	movs	r0, #28
     ed0:	f000 fe30 	bl	1b34 <am_hal_interrupt_enable>

    am_hal_interrupt_master_enable();
     ed4:	f000 fe56 	bl	1b84 <am_hal_interrupt_master_enable>
    while (1)
    {
        //
        // Check for any packets from the EM9304
        //
        if (g_bEM9304HCIReady)
     ed8:	4b3b      	ldr	r3, [pc, #236]	; (fc8 <main+0x12c>)
     eda:	781b      	ldrb	r3, [r3, #0]
     edc:	b2db      	uxtb	r3, r3
     ede:	2b00      	cmp	r3, #0
     ee0:	d025      	beq.n	f2e <main+0x92>
        {
            //
            // Reset the GPIO flag
            //
            g_bEM9304HCIReady = false;
     ee2:	4b39      	ldr	r3, [pc, #228]	; (fc8 <main+0x12c>)
     ee4:	2200      	movs	r2, #0
     ee6:	701a      	strb	r2, [r3, #0]

            //
            // Turn on the IOM for this operation.
            //
            //am_devices_em9304_spi_init(g_sEm9304.ui32IOMModule, &g_sEm9304IOMConfigSPI);
            am_devices_em9304_spi_awake(g_sEm9304.ui32IOMModule);
     ee8:	4b38      	ldr	r3, [pc, #224]	; (fcc <main+0x130>)
     eea:	685b      	ldr	r3, [r3, #4]
     eec:	4618      	mov	r0, r3
     eee:	f7ff fd01 	bl	8f4 <am_devices_em9304_spi_awake>

            ui32NumChars = am_devices_em9304_block_read(&g_sEm9304, g_pui32TxArray, 0);
     ef2:	2200      	movs	r2, #0
     ef4:	4936      	ldr	r1, [pc, #216]	; (fd0 <main+0x134>)
     ef6:	4835      	ldr	r0, [pc, #212]	; (fcc <main+0x130>)
     ef8:	f7ff fc06 	bl	708 <am_devices_em9304_block_read>
     efc:	6038      	str	r0, [r7, #0]

            //
            // Disable IOM SPI pins and turn off the IOM after operation
            //
            am_devices_em9304_spi_sleep(g_sEm9304.ui32IOMModule);
     efe:	4b33      	ldr	r3, [pc, #204]	; (fcc <main+0x130>)
     f00:	685b      	ldr	r3, [r3, #4]
     f02:	4618      	mov	r0, r3
     f04:	f7ff fda2 	bl	a4c <am_devices_em9304_spi_sleep>

            //
            // Transmit the received SPI packet over the UART.
            //
            for (uint32_t i = 0; i < ui32NumChars; i++)
     f08:	2300      	movs	r3, #0
     f0a:	607b      	str	r3, [r7, #4]
     f0c:	e00b      	b.n	f26 <main+0x8a>
            {
                am_hal_uart_char_transmit_buffered(AM_BSP_UART_BTLE_INST,
                                                   (char)g_pui8TxArray[i]);
     f0e:	4b31      	ldr	r3, [pc, #196]	; (fd4 <main+0x138>)
     f10:	681a      	ldr	r2, [r3, #0]
     f12:	687b      	ldr	r3, [r7, #4]
     f14:	4413      	add	r3, r2
                am_hal_uart_char_transmit_buffered(AM_BSP_UART_BTLE_INST,
     f16:	781b      	ldrb	r3, [r3, #0]
     f18:	4619      	mov	r1, r3
     f1a:	2000      	movs	r0, #0
     f1c:	f003 fd4c 	bl	49b8 <am_hal_uart_char_transmit_buffered>
            for (uint32_t i = 0; i < ui32NumChars; i++)
     f20:	687b      	ldr	r3, [r7, #4]
     f22:	3301      	adds	r3, #1
     f24:	607b      	str	r3, [r7, #4]
     f26:	687a      	ldr	r2, [r7, #4]
     f28:	683b      	ldr	r3, [r7, #0]
     f2a:	429a      	cmp	r2, r3
     f2c:	d3ef      	bcc.n	f0e <main+0x72>
            }
        }

        // Check for the completion of a UART receive operation.
        if (g_bRxTimeoutFlag)
     f2e:	4b2a      	ldr	r3, [pc, #168]	; (fd8 <main+0x13c>)
     f30:	781b      	ldrb	r3, [r3, #0]
     f32:	b2db      	uxtb	r3, r3
     f34:	2b00      	cmp	r3, #0
     f36:	d020      	beq.n	f7a <main+0xde>
        {
            //
            // Reset the RX timeout flag.
            //
            g_bRxTimeoutFlag = false;
     f38:	4b27      	ldr	r3, [pc, #156]	; (fd8 <main+0x13c>)
     f3a:	2200      	movs	r2, #0
     f3c:	701a      	strb	r2, [r3, #0]

            //
            // Check the UART RX Buffer for any received HCI packets.
            //
            ui32NumChars = am_hal_uart_char_receive_buffered(AM_BSP_UART_BTLE_INST,
     f3e:	2280      	movs	r2, #128	; 0x80
     f40:	4926      	ldr	r1, [pc, #152]	; (fdc <main+0x140>)
     f42:	2000      	movs	r0, #0
     f44:	f003 fd5c 	bl	4a00 <am_hal_uart_char_receive_buffered>
     f48:	6038      	str	r0, [r7, #0]
                                                             (char *)g_pui8RxArray,
                                                             MAX_UART_PACKET_SIZE);
            if ( ui32NumChars > 0 )
     f4a:	683b      	ldr	r3, [r7, #0]
     f4c:	2b00      	cmp	r3, #0
     f4e:	d014      	beq.n	f7a <main+0xde>
            {
                //
                // Turn on the IOM for this operation.
                //
                am_devices_em9304_spi_awake(g_sEm9304.ui32IOMModule);
     f50:	4b1e      	ldr	r3, [pc, #120]	; (fcc <main+0x130>)
     f52:	685b      	ldr	r3, [r3, #4]
     f54:	4618      	mov	r0, r3
     f56:	f7ff fccd 	bl	8f4 <am_devices_em9304_spi_awake>

                //
                // Write the HCI packet to the EM9304.
                //
                am_devices_em9304_block_write(&g_sEm9304, g_pui8RxArray[0], &g_pui8RxArray[1], ui32NumChars - 1);
     f5a:	4b20      	ldr	r3, [pc, #128]	; (fdc <main+0x140>)
     f5c:	7819      	ldrb	r1, [r3, #0]
     f5e:	683b      	ldr	r3, [r7, #0]
     f60:	3b01      	subs	r3, #1
     f62:	4a1f      	ldr	r2, [pc, #124]	; (fe0 <main+0x144>)
     f64:	4819      	ldr	r0, [pc, #100]	; (fcc <main+0x130>)
     f66:	f7ff fb0f 	bl	588 <am_devices_em9304_block_write>

                //
                // Disable IOM SPI pins and turn off the IOM after operation
                //
                am_devices_em9304_spi_sleep(g_sEm9304.ui32IOMModule);
     f6a:	4b18      	ldr	r3, [pc, #96]	; (fcc <main+0x130>)
     f6c:	685b      	ldr	r3, [r3, #4]
     f6e:	4618      	mov	r0, r3
     f70:	f7ff fd6c 	bl	a4c <am_devices_em9304_spi_sleep>

                g_bEM9304HCIReady = true;
     f74:	4b14      	ldr	r3, [pc, #80]	; (fc8 <main+0x12c>)
     f76:	2201      	movs	r2, #1
     f78:	701a      	strb	r2, [r3, #0]
            }
        }

        // Check if Button #0 has been pressed, indicating reset EM9304 into Production Test Mode (PTM).
        am_devices_button_tick(&am_bsp_psButtons[0]);
     f7a:	4811      	ldr	r0, [pc, #68]	; (fc0 <main+0x124>)
     f7c:	f7ff f93c 	bl	1f8 <am_devices_button_tick>
        if (am_devices_button_pressed(am_bsp_psButtons[0]))
     f80:	4b0f      	ldr	r3, [pc, #60]	; (fc0 <main+0x124>)
     f82:	7b1b      	ldrb	r3, [r3, #12]
     f84:	2b00      	cmp	r3, #0
     f86:	d0a7      	beq.n	ed8 <main+0x3c>
     f88:	4b0d      	ldr	r3, [pc, #52]	; (fc0 <main+0x124>)
     f8a:	7b5b      	ldrb	r3, [r3, #13]
     f8c:	2b00      	cmp	r3, #0
     f8e:	d0a3      	beq.n	ed8 <main+0x3c>
        {
          // Start toggling the GPIO5 in the CTIMER ISR
          g_bPTMToggleFlag = true;
     f90:	4b14      	ldr	r3, [pc, #80]	; (fe4 <main+0x148>)
     f92:	2201      	movs	r2, #1
     f94:	701a      	strb	r2, [r3, #0]

          // Assert RESET to the EM9304.
          am_hal_gpio_out_bit_clear(HCI_APOLLO_RESET_PIN);
     f96:	4b14      	ldr	r3, [pc, #80]	; (fe8 <main+0x14c>)
     f98:	f44f 6280 	mov.w	r2, #1024	; 0x400
     f9c:	601a      	str	r2, [r3, #0]

          // Delay for 5ms to make sure the EM9304 is in PTM.
          am_util_delay_ms(5);
     f9e:	2005      	movs	r0, #5
     fa0:	f000 f860 	bl	1064 <am_util_delay_ms>

          // Deassert RESET to the EM9304.
          am_hal_gpio_out_bit_set(HCI_APOLLO_RESET_PIN);
     fa4:	4b11      	ldr	r3, [pc, #68]	; (fec <main+0x150>)
     fa6:	f44f 6280 	mov.w	r2, #1024	; 0x400
     faa:	601a      	str	r2, [r3, #0]

          // Delay for 5ms to make sure the EM9304 is in PTM.
          am_util_delay_ms(5);
     fac:	2005      	movs	r0, #5
     fae:	f000 f859 	bl	1064 <am_util_delay_ms>

          // Stop toggling the GPIO5 in the CTIMER ISR
          g_bPTMToggleFlag = false;
     fb2:	4b0c      	ldr	r3, [pc, #48]	; (fe4 <main+0x148>)
     fb4:	2200      	movs	r2, #0
     fb6:	701a      	strb	r2, [r3, #0]
        if (g_bEM9304HCIReady)
     fb8:	e78e      	b.n	ed8 <main+0x3c>
     fba:	bf00      	nop
     fbc:	00004b34 	.word	0x00004b34
     fc0:	10000818 	.word	0x10000818
     fc4:	000014e5 	.word	0x000014e5
     fc8:	1000084e 	.word	0x1000084e
     fcc:	00004b24 	.word	0x00004b24
     fd0:	100008ec 	.word	0x100008ec
     fd4:	10000814 	.word	0x10000814
     fd8:	1000084f 	.word	0x1000084f
     fdc:	100009ec 	.word	0x100009ec
     fe0:	100009ed 	.word	0x100009ed
     fe4:	10000850 	.word	0x10000850
     fe8:	4001009c 	.word	0x4001009c
     fec:	40010094 	.word	0x40010094

00000ff0 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     ff0:	4811      	ldr	r0, [pc, #68]	; (1038 <zero_loop+0x12>)
     ff2:	4912      	ldr	r1, [pc, #72]	; (103c <zero_loop+0x16>)
     ff4:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     ff6:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     ffa:	4811      	ldr	r0, [pc, #68]	; (1040 <zero_loop+0x1a>)
     ffc:	6801      	ldr	r1, [r0, #0]
     ffe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    1002:	6001      	str	r1, [r0, #0]
    1004:	f3bf 8f4f 	dsb	sy
    1008:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    100c:	480d      	ldr	r0, [pc, #52]	; (1044 <zero_loop+0x1e>)
    100e:	490e      	ldr	r1, [pc, #56]	; (1048 <zero_loop+0x22>)
    1010:	4a0e      	ldr	r2, [pc, #56]	; (104c <zero_loop+0x26>)

00001012 <copy_loop>:
    1012:	f850 3b04 	ldr.w	r3, [r0], #4
    1016:	f841 3b04 	str.w	r3, [r1], #4
    101a:	4291      	cmp	r1, r2
    101c:	dbf9      	blt.n	1012 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    101e:	480c      	ldr	r0, [pc, #48]	; (1050 <zero_loop+0x2a>)
    1020:	490c      	ldr	r1, [pc, #48]	; (1054 <zero_loop+0x2e>)
    1022:	f04f 0200 	mov.w	r2, #0

00001026 <zero_loop>:
    1026:	4288      	cmp	r0, r1
    1028:	bfb8      	it	lt
    102a:	f840 2b04 	strlt.w	r2, [r0], #4
    102e:	dbfa      	blt.n	1026 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    1030:	f7ff ff34 	bl	e9c <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    1034:	be00      	bkpt	0x0000
}
    1036:	bf00      	nop
    1038:	e000ed08 	.word	0xe000ed08
    103c:	00000000 	.word	0x00000000
    1040:	e000ed88 	.word	0xe000ed88
    1044:	00004dc0 	.word	0x00004dc0
    1048:	10000800 	.word	0x10000800
    104c:	1000084c 	.word	0x1000084c
    1050:	1000084c 	.word	0x1000084c
    1054:	10000cb0 	.word	0x10000cb0

00001058 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
    1058:	b480      	push	{r7}
    105a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    105c:	e7fe      	b.n	105c <am_nmi_isr+0x4>

0000105e <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    105e:	b480      	push	{r7}
    1060:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    1062:	e7fe      	b.n	1062 <am_adc_isr+0x4>

00001064 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    1064:	b580      	push	{r7, lr}
    1066:	b084      	sub	sp, #16
    1068:	af00      	add	r7, sp, #0
    106a:	6078      	str	r0, [r7, #4]
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
    106c:	f000 faec 	bl	1648 <am_hal_clkgen_sysclk_get>
    1070:	60f8      	str	r0, [r7, #12]
#endif
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    1072:	68fb      	ldr	r3, [r7, #12]
    1074:	4a07      	ldr	r2, [pc, #28]	; (1094 <am_util_delay_ms+0x30>)
    1076:	fba2 2303 	umull	r2, r3, r2, r3
    107a:	099b      	lsrs	r3, r3, #6
    107c:	687a      	ldr	r2, [r7, #4]
    107e:	fb02 f303 	mul.w	r3, r2, r3
    1082:	60bb      	str	r3, [r7, #8]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    1084:	68b8      	ldr	r0, [r7, #8]
    1086:	f000 fc51 	bl	192c <am_hal_flash_delay>
}
    108a:	bf00      	nop
    108c:	3710      	adds	r7, #16
    108e:	46bd      	mov	sp, r7
    1090:	bd80      	pop	{r7, pc}
    1092:	bf00      	nop
    1094:	057619f1 	.word	0x057619f1

00001098 <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
    1098:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
    109a:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
    109c:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    109e:	f000 f809 	bl	10b4 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
    10a2:	bd01      	pop	{r0, pc}
}
    10a4:	bf00      	nop
    10a6:	4618      	mov	r0, r3

000010a8 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    10a8:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    10aa:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    10ac:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    10ae:	4770      	bx	lr
}
    10b0:	bf00      	nop
    10b2:	4618      	mov	r0, r3

000010b4 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    10b4:	b580      	push	{r7, lr}
    10b6:	b096      	sub	sp, #88	; 0x58
    10b8:	af00      	add	r7, sp, #0
    10ba:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    10bc:	f107 030c 	add.w	r3, r7, #12
    10c0:	2200      	movs	r2, #0
    10c2:	601a      	str	r2, [r3, #0]
    10c4:	605a      	str	r2, [r3, #4]
    10c6:	609a      	str	r2, [r3, #8]
    10c8:	60da      	str	r2, [r3, #12]
    10ca:	611a      	str	r2, [r3, #16]
    10cc:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    10ce:	2300      	movs	r3, #0
    10d0:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    10d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    10d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    10d6:	4b2e      	ldr	r3, [pc, #184]	; (1190 <am_util_faultisr_collect_data+0xdc>)
    10d8:	681b      	ldr	r3, [r3, #0]
    10da:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    10dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    10de:	b2db      	uxtb	r3, r3
    10e0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    10e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    10e6:	0a1b      	lsrs	r3, r3, #8
    10e8:	b2db      	uxtb	r3, r3
    10ea:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    10ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    10f0:	0c1b      	lsrs	r3, r3, #16
    10f2:	b29b      	uxth	r3, r3
    10f4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    10f8:	4b26      	ldr	r3, [pc, #152]	; (1194 <am_util_faultisr_collect_data+0xe0>)
    10fa:	681b      	ldr	r3, [r3, #0]
    10fc:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    10fe:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    1102:	b2db      	uxtb	r3, r3
    1104:	f003 0302 	and.w	r3, r3, #2
    1108:	2b00      	cmp	r3, #0
    110a:	d005      	beq.n	1118 <am_util_faultisr_collect_data+0x64>
    110c:	6879      	ldr	r1, [r7, #4]
    110e:	2006      	movs	r0, #6
    1110:	f7ff ffca 	bl	10a8 <getStackedReg>
    1114:	4603      	mov	r3, r0
    1116:	e001      	b.n	111c <am_util_faultisr_collect_data+0x68>
    1118:	f04f 33ff 	mov.w	r3, #4294967295
    111c:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    111e:	6879      	ldr	r1, [r7, #4]
    1120:	2000      	movs	r0, #0
    1122:	f7ff ffc1 	bl	10a8 <getStackedReg>
    1126:	4603      	mov	r3, r0
    1128:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    112a:	6879      	ldr	r1, [r7, #4]
    112c:	2001      	movs	r0, #1
    112e:	f7ff ffbb 	bl	10a8 <getStackedReg>
    1132:	4603      	mov	r3, r0
    1134:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    1136:	6879      	ldr	r1, [r7, #4]
    1138:	2002      	movs	r0, #2
    113a:	f7ff ffb5 	bl	10a8 <getStackedReg>
    113e:	4603      	mov	r3, r0
    1140:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    1142:	6879      	ldr	r1, [r7, #4]
    1144:	2003      	movs	r0, #3
    1146:	f7ff ffaf 	bl	10a8 <getStackedReg>
    114a:	4603      	mov	r3, r0
    114c:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    114e:	6879      	ldr	r1, [r7, #4]
    1150:	2004      	movs	r0, #4
    1152:	f7ff ffa9 	bl	10a8 <getStackedReg>
    1156:	4603      	mov	r3, r0
    1158:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    115a:	6879      	ldr	r1, [r7, #4]
    115c:	2005      	movs	r0, #5
    115e:	f7ff ffa3 	bl	10a8 <getStackedReg>
    1162:	4603      	mov	r3, r0
    1164:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    1166:	6879      	ldr	r1, [r7, #4]
    1168:	2006      	movs	r0, #6
    116a:	f7ff ff9d 	bl	10a8 <getStackedReg>
    116e:	4603      	mov	r3, r0
    1170:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    1172:	6879      	ldr	r1, [r7, #4]
    1174:	2007      	movs	r0, #7
    1176:	f7ff ff97 	bl	10a8 <getStackedReg>
    117a:	4603      	mov	r3, r0
    117c:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
    117e:	f107 030c 	add.w	r3, r7, #12
    1182:	4618      	mov	r0, r3
    1184:	f002 fe6a 	bl	3e5c <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
    1188:	2300      	movs	r3, #0
    118a:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    118c:	e7fe      	b.n	118c <am_util_faultisr_collect_data+0xd8>
    118e:	bf00      	nop
    1190:	e000ed28 	.word	0xe000ed28
    1194:	e000ed38 	.word	0xe000ed38

00001198 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    1198:	b480      	push	{r7}
    119a:	b083      	sub	sp, #12
    119c:	af00      	add	r7, sp, #0
    119e:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    11a0:	4a04      	ldr	r2, [pc, #16]	; (11b4 <am_util_stdio_printf_init+0x1c>)
    11a2:	687b      	ldr	r3, [r7, #4]
    11a4:	6013      	str	r3, [r2, #0]
}
    11a6:	bf00      	nop
    11a8:	370c      	adds	r7, #12
    11aa:	46bd      	mov	sp, r7
    11ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    11b0:	4770      	bx	lr
    11b2:	bf00      	nop
    11b4:	10000a6c 	.word	0x10000a6c

000011b8 <am_bsp_iom_spi_pins_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_iom_spi_pins_enable(uint32_t ui32Module)
{
    11b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    11bc:	b08d      	sub	sp, #52	; 0x34
    switch(ui32Module)
    11be:	2805      	cmp	r0, #5
    11c0:	f200 815a 	bhi.w	1478 <am_bsp_iom_spi_pins_enable+0x2c0>
    11c4:	e8df f010 	tbh	[pc, r0, lsl #1]
    11c8:	01580103 	.word	0x01580103
    11cc:	015800b0 	.word	0x015800b0
    11d0:	0006005e 	.word	0x0006005e
            break;
#endif

#ifdef AM_BSP_GPIO_IOM5_SCK
        case 5:
            am_bsp_pin_enable(IOM5_SCK);
    11d4:	f000 fcda 	bl	1b8c <am_hal_interrupt_master_disable>
    11d8:	4ca8      	ldr	r4, [pc, #672]	; (147c <am_bsp_iom_spi_pins_enable+0x2c4>)
    11da:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 14bc <am_bsp_iom_spi_pins_enable+0x304>
    11de:	9009      	str	r0, [sp, #36]	; 0x24
    11e0:	f04f 0873 	mov.w	r8, #115	; 0x73
    11e4:	f8c4 8000 	str.w	r8, [r4]
    11e8:	f8d9 3000 	ldr.w	r3, [r9]
    11ec:	4ea4      	ldr	r6, [pc, #656]	; (1480 <am_bsp_iom_spi_pins_enable+0x2c8>)
    11ee:	4da5      	ldr	r5, [pc, #660]	; (1484 <am_bsp_iom_spi_pins_enable+0x2cc>)
    11f0:	f023 0007 	bic.w	r0, r3, #7
    11f4:	f8c9 0000 	str.w	r0, [r9]
    11f8:	6831      	ldr	r1, [r6, #0]
    11fa:	f021 02ff 	bic.w	r2, r1, #255	; 0xff
    11fe:	f042 072e 	orr.w	r7, r2, #46	; 0x2e
    1202:	6037      	str	r7, [r6, #0]
    1204:	682b      	ldr	r3, [r5, #0]
    1206:	2700      	movs	r7, #0
    1208:	f023 00ff 	bic.w	r0, r3, #255	; 0xff
    120c:	6028      	str	r0, [r5, #0]
    120e:	6027      	str	r7, [r4, #0]
    1210:	9809      	ldr	r0, [sp, #36]	; 0x24
    1212:	f000 fcbf 	bl	1b94 <am_hal_interrupt_master_set>
            am_bsp_pin_enable(IOM5_MISO);
    1216:	f000 fcb9 	bl	1b8c <am_hal_interrupt_master_disable>
    121a:	900a      	str	r0, [sp, #40]	; 0x28
    121c:	f8c4 8000 	str.w	r8, [r4]
    1220:	f8d9 1000 	ldr.w	r1, [r9]
    1224:	f021 0270 	bic.w	r2, r1, #112	; 0x70
    1228:	f8c9 2000 	str.w	r2, [r9]
    122c:	6833      	ldr	r3, [r6, #0]
    122e:	f423 407f 	bic.w	r0, r3, #65280	; 0xff00
    1232:	f440 5128 	orr.w	r1, r0, #10752	; 0x2a00
    1236:	6031      	str	r1, [r6, #0]
    1238:	682e      	ldr	r6, [r5, #0]
    123a:	f426 427f 	bic.w	r2, r6, #65280	; 0xff00
    123e:	602a      	str	r2, [r5, #0]
    1240:	6027      	str	r7, [r4, #0]
    1242:	980a      	ldr	r0, [sp, #40]	; 0x28
    1244:	f000 fca6 	bl	1b94 <am_hal_interrupt_master_set>
            am_bsp_pin_enable(IOM5_MOSI);
    1248:	f000 fca0 	bl	1b8c <am_hal_interrupt_master_disable>
    124c:	900b      	str	r0, [sp, #44]	; 0x2c
    124e:	f8c4 8000 	str.w	r8, [r4]
    1252:	f855 3cbc 	ldr.w	r3, [r5, #-188]
    1256:	488c      	ldr	r0, [pc, #560]	; (1488 <am_bsp_iom_spi_pins_enable+0x2d0>)
    1258:	498c      	ldr	r1, [pc, #560]	; (148c <am_bsp_iom_spi_pins_enable+0x2d4>)
    125a:	f023 46e0 	bic.w	r6, r3, #1879048192	; 0x70000000
    125e:	f845 6cbc 	str.w	r6, [r5, #-188]
    1262:	6805      	ldr	r5, [r0, #0]
    1264:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
    1268:	f042 5320 	orr.w	r3, r2, #671088640	; 0x28000000
    126c:	6003      	str	r3, [r0, #0]
    126e:	6808      	ldr	r0, [r1, #0]
    1270:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
    1274:	600e      	str	r6, [r1, #0]
    1276:	6027      	str	r7, [r4, #0]
    1278:	980b      	ldr	r0, [sp, #44]	; 0x2c
    127a:	f000 fc8b 	bl	1b94 <am_hal_interrupt_master_set>
        // debugging.
        //
        default:
            while(1);
    }
}
    127e:	b00d      	add	sp, #52	; 0x34
    1280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            am_bsp_pin_enable(IOM4_SCK);
    1284:	f000 fc82 	bl	1b8c <am_hal_interrupt_master_disable>
    1288:	4c7c      	ldr	r4, [pc, #496]	; (147c <am_bsp_iom_spi_pins_enable+0x2c4>)
    128a:	4f81      	ldr	r7, [pc, #516]	; (1490 <am_bsp_iom_spi_pins_enable+0x2d8>)
    128c:	9006      	str	r0, [sp, #24]
    128e:	2673      	movs	r6, #115	; 0x73
    1290:	6026      	str	r6, [r4, #0]
    1292:	683b      	ldr	r3, [r7, #0]
    1294:	497f      	ldr	r1, [pc, #508]	; (1494 <am_bsp_iom_spi_pins_enable+0x2dc>)
    1296:	4a80      	ldr	r2, [pc, #512]	; (1498 <am_bsp_iom_spi_pins_enable+0x2e0>)
            am_bsp_pin_enable(IOM4_MISO);
    1298:	4d80      	ldr	r5, [pc, #512]	; (149c <am_bsp_iom_spi_pins_enable+0x2e4>)
            am_bsp_pin_enable(IOM4_SCK);
    129a:	f023 40e0 	bic.w	r0, r3, #1879048192	; 0x70000000
    129e:	f040 5300 	orr.w	r3, r0, #536870912	; 0x20000000
    12a2:	603b      	str	r3, [r7, #0]
    12a4:	680f      	ldr	r7, [r1, #0]
    12a6:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    12aa:	f040 5338 	orr.w	r3, r0, #771751936	; 0x2e000000
    12ae:	600b      	str	r3, [r1, #0]
    12b0:	6811      	ldr	r1, [r2, #0]
    12b2:	2700      	movs	r7, #0
    12b4:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000
    12b8:	6010      	str	r0, [r2, #0]
    12ba:	6027      	str	r7, [r4, #0]
    12bc:	9806      	ldr	r0, [sp, #24]
    12be:	f000 fc69 	bl	1b94 <am_hal_interrupt_master_set>
            am_bsp_pin_enable(IOM4_MISO);
    12c2:	f000 fc63 	bl	1b8c <am_hal_interrupt_master_disable>
    12c6:	9007      	str	r0, [sp, #28]
    12c8:	6026      	str	r6, [r4, #0]
    12ca:	682b      	ldr	r3, [r5, #0]
    12cc:	4974      	ldr	r1, [pc, #464]	; (14a0 <am_bsp_iom_spi_pins_enable+0x2e8>)
    12ce:	4a75      	ldr	r2, [pc, #468]	; (14a4 <am_bsp_iom_spi_pins_enable+0x2ec>)
    12d0:	f023 0007 	bic.w	r0, r3, #7
    12d4:	6028      	str	r0, [r5, #0]
    12d6:	680b      	ldr	r3, [r1, #0]
    12d8:	f023 00ff 	bic.w	r0, r3, #255	; 0xff
    12dc:	f040 032a 	orr.w	r3, r0, #42	; 0x2a
    12e0:	600b      	str	r3, [r1, #0]
    12e2:	6811      	ldr	r1, [r2, #0]
    12e4:	f021 00ff 	bic.w	r0, r1, #255	; 0xff
    12e8:	6010      	str	r0, [r2, #0]
    12ea:	6027      	str	r7, [r4, #0]
    12ec:	9807      	ldr	r0, [sp, #28]
    12ee:	f000 fc51 	bl	1b94 <am_hal_interrupt_master_set>
            am_bsp_pin_enable(IOM4_MOSI);
    12f2:	f000 fc4b 	bl	1b8c <am_hal_interrupt_master_disable>
    12f6:	9008      	str	r0, [sp, #32]
    12f8:	6026      	str	r6, [r4, #0]
    12fa:	682e      	ldr	r6, [r5, #0]
    12fc:	4962      	ldr	r1, [pc, #392]	; (1488 <am_bsp_iom_spi_pins_enable+0x2d0>)
    12fe:	4a63      	ldr	r2, [pc, #396]	; (148c <am_bsp_iom_spi_pins_enable+0x2d4>)
    1300:	f426 23e0 	bic.w	r3, r6, #458752	; 0x70000
    1304:	602b      	str	r3, [r5, #0]
    1306:	680d      	ldr	r5, [r1, #0]
    1308:	f025 00ff 	bic.w	r0, r5, #255	; 0xff
    130c:	f040 0628 	orr.w	r6, r0, #40	; 0x28
    1310:	600e      	str	r6, [r1, #0]
    1312:	6811      	ldr	r1, [r2, #0]
    1314:	f021 03ff 	bic.w	r3, r1, #255	; 0xff
    1318:	6013      	str	r3, [r2, #0]
    131a:	6027      	str	r7, [r4, #0]
    131c:	9808      	ldr	r0, [sp, #32]
    131e:	f000 fc39 	bl	1b94 <am_hal_interrupt_master_set>
}
    1322:	b00d      	add	sp, #52	; 0x34
    1324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            am_bsp_pin_enable(IOM2_SCK);
    1328:	f000 fc30 	bl	1b8c <am_hal_interrupt_master_disable>
    132c:	4c53      	ldr	r4, [pc, #332]	; (147c <am_bsp_iom_spi_pins_enable+0x2c4>)
    132e:	4f5e      	ldr	r7, [pc, #376]	; (14a8 <am_bsp_iom_spi_pins_enable+0x2f0>)
    1330:	9003      	str	r0, [sp, #12]
    1332:	f04f 0973 	mov.w	r9, #115	; 0x73
    1336:	f8c4 9000 	str.w	r9, [r4]
    133a:	683a      	ldr	r2, [r7, #0]
    133c:	4e5b      	ldr	r6, [pc, #364]	; (14ac <am_bsp_iom_spi_pins_enable+0x2f4>)
    133e:	4d5c      	ldr	r5, [pc, #368]	; (14b0 <am_bsp_iom_spi_pins_enable+0x2f8>)
    1340:	f022 0007 	bic.w	r0, r2, #7
    1344:	6038      	str	r0, [r7, #0]
    1346:	6831      	ldr	r1, [r6, #0]
    1348:	f021 0cff 	bic.w	ip, r1, #255	; 0xff
    134c:	f04c 032e 	orr.w	r3, ip, #46	; 0x2e
    1350:	6033      	str	r3, [r6, #0]
    1352:	682a      	ldr	r2, [r5, #0]
    1354:	f04f 0800 	mov.w	r8, #0
    1358:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
    135c:	6028      	str	r0, [r5, #0]
    135e:	f8c4 8000 	str.w	r8, [r4]
    1362:	9803      	ldr	r0, [sp, #12]
    1364:	f000 fc16 	bl	1b94 <am_hal_interrupt_master_set>
            am_bsp_pin_enable(IOM2_MISO);
    1368:	f000 fc10 	bl	1b8c <am_hal_interrupt_master_disable>
    136c:	9004      	str	r0, [sp, #16]
    136e:	f8c4 9000 	str.w	r9, [r4]
    1372:	6839      	ldr	r1, [r7, #0]
    1374:	f021 0370 	bic.w	r3, r1, #112	; 0x70
    1378:	603b      	str	r3, [r7, #0]
    137a:	6832      	ldr	r2, [r6, #0]
    137c:	f422 407f 	bic.w	r0, r2, #65280	; 0xff00
    1380:	f440 5128 	orr.w	r1, r0, #10752	; 0x2a00
    1384:	6031      	str	r1, [r6, #0]
    1386:	682b      	ldr	r3, [r5, #0]
    1388:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
    138c:	602a      	str	r2, [r5, #0]
    138e:	f8c4 8000 	str.w	r8, [r4]
    1392:	9804      	ldr	r0, [sp, #16]
    1394:	f000 fbfe 	bl	1b94 <am_hal_interrupt_master_set>
            am_bsp_pin_enable(IOM2_MOSI);
    1398:	f000 fbf8 	bl	1b8c <am_hal_interrupt_master_disable>
    139c:	9005      	str	r0, [sp, #20]
    139e:	f8c4 9000 	str.w	r9, [r4]
    13a2:	6838      	ldr	r0, [r7, #0]
    13a4:	f420 61e0 	bic.w	r1, r0, #1792	; 0x700
    13a8:	6039      	str	r1, [r7, #0]
    13aa:	6837      	ldr	r7, [r6, #0]
    13ac:	f427 097f 	bic.w	r9, r7, #16711680	; 0xff0000
    13b0:	f449 1320 	orr.w	r3, r9, #2621440	; 0x280000
    13b4:	6033      	str	r3, [r6, #0]
    13b6:	682e      	ldr	r6, [r5, #0]
    13b8:	f426 027f 	bic.w	r2, r6, #16711680	; 0xff0000
    13bc:	602a      	str	r2, [r5, #0]
    13be:	f8c4 8000 	str.w	r8, [r4]
    13c2:	9805      	ldr	r0, [sp, #20]
    13c4:	f000 fbe6 	bl	1b94 <am_hal_interrupt_master_set>
}
    13c8:	b00d      	add	sp, #52	; 0x34
    13ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            am_bsp_pin_enable(IOM0_SCK);
    13ce:	f000 fbdd 	bl	1b8c <am_hal_interrupt_master_disable>
    13d2:	4c2a      	ldr	r4, [pc, #168]	; (147c <am_bsp_iom_spi_pins_enable+0x2c4>)
    13d4:	4f34      	ldr	r7, [pc, #208]	; (14a8 <am_bsp_iom_spi_pins_enable+0x2f0>)
    13d6:	9000      	str	r0, [sp, #0]
    13d8:	f04f 0973 	mov.w	r9, #115	; 0x73
    13dc:	f8c4 9000 	str.w	r9, [r4]
    13e0:	6838      	ldr	r0, [r7, #0]
    13e2:	4e34      	ldr	r6, [pc, #208]	; (14b4 <am_bsp_iom_spi_pins_enable+0x2fc>)
    13e4:	4d34      	ldr	r5, [pc, #208]	; (14b8 <am_bsp_iom_spi_pins_enable+0x300>)
    13e6:	f420 01e0 	bic.w	r1, r0, #7340032	; 0x700000
    13ea:	f441 1300 	orr.w	r3, r1, #2097152	; 0x200000
    13ee:	603b      	str	r3, [r7, #0]
    13f0:	6832      	ldr	r2, [r6, #0]
    13f2:	f422 407f 	bic.w	r0, r2, #65280	; 0xff00
    13f6:	f440 6160 	orr.w	r1, r0, #3584	; 0xe00
    13fa:	6031      	str	r1, [r6, #0]
    13fc:	682b      	ldr	r3, [r5, #0]
    13fe:	f04f 0800 	mov.w	r8, #0
    1402:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
    1406:	602a      	str	r2, [r5, #0]
    1408:	f8c4 8000 	str.w	r8, [r4]
    140c:	9800      	ldr	r0, [sp, #0]
    140e:	f000 fbc1 	bl	1b94 <am_hal_interrupt_master_set>
            am_bsp_pin_enable(IOM0_MISO);
    1412:	f000 fbbb 	bl	1b8c <am_hal_interrupt_master_disable>
    1416:	9001      	str	r0, [sp, #4]
    1418:	f8c4 9000 	str.w	r9, [r4]
    141c:	6838      	ldr	r0, [r7, #0]
    141e:	f020 61e0 	bic.w	r1, r0, #117440512	; 0x7000000
    1422:	6039      	str	r1, [r7, #0]
    1424:	6833      	ldr	r3, [r6, #0]
    1426:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
    142a:	f442 2020 	orr.w	r0, r2, #655360	; 0xa0000
    142e:	6030      	str	r0, [r6, #0]
    1430:	6829      	ldr	r1, [r5, #0]
    1432:	f421 037f 	bic.w	r3, r1, #16711680	; 0xff0000
    1436:	602b      	str	r3, [r5, #0]
    1438:	f8c4 8000 	str.w	r8, [r4]
    143c:	9801      	ldr	r0, [sp, #4]
    143e:	f000 fba9 	bl	1b94 <am_hal_interrupt_master_set>
            am_bsp_pin_enable(IOM0_MOSI);
    1442:	f000 fba3 	bl	1b8c <am_hal_interrupt_master_disable>
    1446:	9002      	str	r0, [sp, #8]
    1448:	f8c4 9000 	str.w	r9, [r4]
    144c:	683a      	ldr	r2, [r7, #0]
    144e:	f022 40e0 	bic.w	r0, r2, #1879048192	; 0x70000000
    1452:	6038      	str	r0, [r7, #0]
    1454:	6837      	ldr	r7, [r6, #0]
    1456:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
    145a:	f041 6300 	orr.w	r3, r1, #134217728	; 0x8000000
    145e:	6033      	str	r3, [r6, #0]
    1460:	682e      	ldr	r6, [r5, #0]
    1462:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    1466:	602a      	str	r2, [r5, #0]
    1468:	f8c4 8000 	str.w	r8, [r4]
    146c:	9802      	ldr	r0, [sp, #8]
    146e:	f000 fb91 	bl	1b94 <am_hal_interrupt_master_set>
}
    1472:	b00d      	add	sp, #52	; 0x34
    1474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1478:	e7fe      	b.n	1478 <am_bsp_iom_spi_pins_enable+0x2c0>
    147a:	bf00      	nop
    147c:	40010060 	.word	0x40010060
    1480:	40010030 	.word	0x40010030
    1484:	40010110 	.word	0x40010110
    1488:	4001002c 	.word	0x4001002c
    148c:	4001010c 	.word	0x4001010c
    1490:	40010050 	.word	0x40010050
    1494:	40010024 	.word	0x40010024
    1498:	40010104 	.word	0x40010104
    149c:	40010054 	.word	0x40010054
    14a0:	40010028 	.word	0x40010028
    14a4:	40010108 	.word	0x40010108
    14a8:	40010040 	.word	0x40010040
    14ac:	40010000 	.word	0x40010000
    14b0:	400100e0 	.word	0x400100e0
    14b4:	40010004 	.word	0x40010004
    14b8:	400100e4 	.word	0x400100e4
    14bc:	40010058 	.word	0x40010058

000014c0 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    14c0:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_enable();
    14c2:	f002 fe59 	bl	4178 <am_hal_pwrctrl_bucks_enable>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    14c6:	f002 fea1 	bl	420c <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    14ca:	f003 fb13 	bl	4af4 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    14ce:	2001      	movs	r0, #1
    14d0:	f002 ffd8 	bl	4484 <am_hal_rtc_osc_select>

    //
    // Stop the XTAL.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    14d4:	2001      	movs	r0, #1
    14d6:	f000 f8c7 	bl	1668 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    14da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    14de:	f002 bfdf 	b.w	44a0 <am_hal_rtc_osc_disable>
    14e2:	bf00      	nop

000014e4 <am_bsp_uart_string_print>:
//
//*****************************************************************************
void
am_bsp_uart_string_print(char *pcString)
{
    am_hal_uart_string_transmit_polled(AM_BSP_UART_PRINT_INST, pcString);
    14e4:	4601      	mov	r1, r0
    14e6:	2000      	movs	r0, #0
    14e8:	f003 b92a 	b.w	4740 <am_hal_uart_string_transmit_polled>

000014ec <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    14ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14ee:	4605      	mov	r5, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    14f0:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    14f4:	78ab      	ldrb	r3, [r5, #2]
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    14f6:	786c      	ldrb	r4, [r5, #1]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    14f8:	78ef      	ldrb	r7, [r5, #3]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    14fa:	792e      	ldrb	r6, [r5, #4]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    14fc:	79a9      	ldrb	r1, [r5, #6]
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    14fe:	009a      	lsls	r2, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    1500:	0064      	lsls	r4, r4, #1
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    1502:	f002 0204 	and.w	r2, r2, #4
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    1506:	f004 0402 	and.w	r4, r4, #2
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    150a:	4314      	orrs	r4, r2
    150c:	f047 0701 	orr.w	r7, r7, #1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    1510:	79ea      	ldrb	r2, [r5, #7]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    1512:	01f6      	lsls	r6, r6, #7
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1514:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    1516:	b2f6      	uxtb	r6, r6
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    1518:	7a2f      	ldrb	r7, [r5, #8]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    151a:	0289      	lsls	r1, r1, #10
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    151c:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    151e:	f401 6180 	and.w	r1, r1, #1024	; 0x400
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    1522:	7a6e      	ldrb	r6, [r5, #9]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    1524:	02d2      	lsls	r2, r2, #11
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1526:	430c      	orrs	r4, r1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    1528:	f402 6200 	and.w	r2, r2, #2048	; 0x800
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    152c:	7aa9      	ldrb	r1, [r5, #10]
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    152e:	033f      	lsls	r7, r7, #12
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1530:	4314      	orrs	r4, r2
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    1532:	b2bf      	uxth	r7, r7
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    1534:	0436      	lsls	r6, r6, #16
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    1536:	7aea      	ldrb	r2, [r5, #11]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1538:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    153a:	0509      	lsls	r1, r1, #20
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    153c:	f406 2770 	and.w	r7, r6, #983040	; 0xf0000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    1540:	0612      	lsls	r2, r2, #24
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1542:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    1544:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    1548:	009b      	lsls	r3, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    154a:	f002 7780 	and.w	r7, r2, #16777216	; 0x1000000
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    154e:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    1550:	f003 0108 	and.w	r1, r3, #8
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1554:	433c      	orrs	r4, r7
    1556:	430c      	orrs	r4, r1
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1558:	f002 fd08 	bl	3f6c <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    155c:	482c      	ldr	r0, [pc, #176]	; (1610 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    155e:	4b2d      	ldr	r3, [pc, #180]	; (1614 <am_hal_cachectrl_enable+0x128>)
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1560:	6004      	str	r4, [r0, #0]
    1562:	2232      	movs	r2, #50	; 0x32
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1564:	681e      	ldr	r6, [r3, #0]
    1566:	0777      	lsls	r7, r6, #29
    1568:	d41e      	bmi.n	15a8 <am_hal_cachectrl_enable+0xbc>
    156a:	681f      	ldr	r7, [r3, #0]
    156c:	077e      	lsls	r6, r7, #29
    156e:	f102 32ff 	add.w	r2, r2, #4294967295
    1572:	d419      	bmi.n	15a8 <am_hal_cachectrl_enable+0xbc>
    1574:	6819      	ldr	r1, [r3, #0]
    1576:	074f      	lsls	r7, r1, #29
    1578:	d416      	bmi.n	15a8 <am_hal_cachectrl_enable+0xbc>
    157a:	6818      	ldr	r0, [r3, #0]
    157c:	0746      	lsls	r6, r0, #29
    157e:	d413      	bmi.n	15a8 <am_hal_cachectrl_enable+0xbc>
    1580:	681e      	ldr	r6, [r3, #0]
    1582:	0770      	lsls	r0, r6, #29
    1584:	d410      	bmi.n	15a8 <am_hal_cachectrl_enable+0xbc>
    1586:	681f      	ldr	r7, [r3, #0]
    1588:	0779      	lsls	r1, r7, #29
    158a:	d40d      	bmi.n	15a8 <am_hal_cachectrl_enable+0xbc>
    158c:	6819      	ldr	r1, [r3, #0]
    158e:	074f      	lsls	r7, r1, #29
    1590:	d40a      	bmi.n	15a8 <am_hal_cachectrl_enable+0xbc>
    1592:	6818      	ldr	r0, [r3, #0]
    1594:	0746      	lsls	r6, r0, #29
    1596:	d407      	bmi.n	15a8 <am_hal_cachectrl_enable+0xbc>
    1598:	681e      	ldr	r6, [r3, #0]
    159a:	0770      	lsls	r0, r6, #29
    159c:	d404      	bmi.n	15a8 <am_hal_cachectrl_enable+0xbc>
    159e:	681f      	ldr	r7, [r3, #0]
    15a0:	0779      	lsls	r1, r7, #29
    15a2:	d401      	bmi.n	15a8 <am_hal_cachectrl_enable+0xbc>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    15a4:	3a09      	subs	r2, #9
    15a6:	d1dd      	bne.n	1564 <am_hal_cachectrl_enable+0x78>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    15a8:	4b1a      	ldr	r3, [pc, #104]	; (1614 <am_hal_cachectrl_enable+0x128>)
    15aa:	681a      	ldr	r2, [r3, #0]
    15ac:	f042 0101 	orr.w	r1, r2, #1
    15b0:	6019      	str	r1, [r3, #0]
    15b2:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    15b4:	6818      	ldr	r0, [r3, #0]
    15b6:	0740      	lsls	r0, r0, #29
    15b8:	d41e      	bmi.n	15f8 <am_hal_cachectrl_enable+0x10c>
    15ba:	681e      	ldr	r6, [r3, #0]
    15bc:	0771      	lsls	r1, r6, #29
    15be:	f102 32ff 	add.w	r2, r2, #4294967295
    15c2:	d419      	bmi.n	15f8 <am_hal_cachectrl_enable+0x10c>
    15c4:	681f      	ldr	r7, [r3, #0]
    15c6:	077f      	lsls	r7, r7, #29
    15c8:	d416      	bmi.n	15f8 <am_hal_cachectrl_enable+0x10c>
    15ca:	6819      	ldr	r1, [r3, #0]
    15cc:	074e      	lsls	r6, r1, #29
    15ce:	d413      	bmi.n	15f8 <am_hal_cachectrl_enable+0x10c>
    15d0:	6818      	ldr	r0, [r3, #0]
    15d2:	0740      	lsls	r0, r0, #29
    15d4:	d410      	bmi.n	15f8 <am_hal_cachectrl_enable+0x10c>
    15d6:	681e      	ldr	r6, [r3, #0]
    15d8:	0771      	lsls	r1, r6, #29
    15da:	d40d      	bmi.n	15f8 <am_hal_cachectrl_enable+0x10c>
    15dc:	681f      	ldr	r7, [r3, #0]
    15de:	077f      	lsls	r7, r7, #29
    15e0:	d40a      	bmi.n	15f8 <am_hal_cachectrl_enable+0x10c>
    15e2:	6819      	ldr	r1, [r3, #0]
    15e4:	074e      	lsls	r6, r1, #29
    15e6:	d407      	bmi.n	15f8 <am_hal_cachectrl_enable+0x10c>
    15e8:	6818      	ldr	r0, [r3, #0]
    15ea:	0740      	lsls	r0, r0, #29
    15ec:	d404      	bmi.n	15f8 <am_hal_cachectrl_enable+0x10c>
    15ee:	681e      	ldr	r6, [r3, #0]
    15f0:	0771      	lsls	r1, r6, #29
    15f2:	d401      	bmi.n	15f8 <am_hal_cachectrl_enable+0x10c>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    15f4:	3a09      	subs	r2, #9
    15f6:	d1dd      	bne.n	15b4 <am_hal_cachectrl_enable+0xc8>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    15f8:	796d      	ldrb	r5, [r5, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    15fa:	4f05      	ldr	r7, [pc, #20]	; (1610 <am_hal_cachectrl_enable+0x124>)
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );
    15fc:	022b      	lsls	r3, r5, #8
    15fe:	f403 7100 	and.w	r1, r3, #512	; 0x200
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    1602:	f403 7280 	and.w	r2, r3, #256	; 0x100
    1606:	4311      	orrs	r1, r2
    1608:	430c      	orrs	r4, r1
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    160a:	603c      	str	r4, [r7, #0]
    160c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    160e:	bf00      	nop
    1610:	40018000 	.word	0x40018000
    1614:	40018008 	.word	0x40018008

00001618 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    1618:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    161a:	4604      	mov	r4, r0
    161c:	b120      	cbz	r0, 1628 <am_hal_clkgen_sysclk_select+0x10>
    161e:	4a06      	ldr	r2, [pc, #24]	; (1638 <am_hal_clkgen_sysclk_select+0x20>)
    1620:	4806      	ldr	r0, [pc, #24]	; (163c <am_hal_clkgen_sysclk_select+0x24>)
    1622:	2153      	movs	r1, #83	; 0x53
    1624:	f000 f980 	bl	1928 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1628:	4b05      	ldr	r3, [pc, #20]	; (1640 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the required operating value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    162a:	4906      	ldr	r1, [pc, #24]	; (1644 <am_hal_clkgen_sysclk_select+0x2c>)
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    162c:	2047      	movs	r0, #71	; 0x47

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    162e:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1630:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1632:	600c      	str	r4, [r1, #0]
    AM_REG(CLKGEN, CLKKEY) = 0;
    1634:	601a      	str	r2, [r3, #0]
    1636:	bd10      	pop	{r4, pc}
    1638:	00004b40 	.word	0x00004b40
    163c:	00004b78 	.word	0x00004b78
    1640:	40004014 	.word	0x40004014
    1644:	40004018 	.word	0x40004018

00001648 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1648:	4b04      	ldr	r3, [pc, #16]	; (165c <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    164a:	4905      	ldr	r1, [pc, #20]	; (1660 <am_hal_clkgen_sysclk_get+0x18>)
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    164c:	681a      	ldr	r2, [r3, #0]
            return 48000000;
    164e:	4805      	ldr	r0, [pc, #20]	; (1664 <am_hal_clkgen_sysclk_get+0x1c>)
    switch ( ui32ClockSetting )
    1650:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    1654:	bf08      	it	eq
    1656:	4608      	moveq	r0, r1
    1658:	4770      	bx	lr
    165a:	bf00      	nop
    165c:	40004018 	.word	0x40004018
    1660:	02dc6c00 	.word	0x02dc6c00
    1664:	016e3600 	.word	0x016e3600

00001668 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1668:	0783      	lsls	r3, r0, #30
    166a:	d003      	beq.n	1674 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    166c:	4b02      	ldr	r3, [pc, #8]	; (1678 <am_hal_clkgen_osc_stop+0x10>)
    166e:	681a      	ldr	r2, [r3, #0]
    1670:	4310      	orrs	r0, r2
    1672:	6018      	str	r0, [r3, #0]
    1674:	4770      	bx	lr
    1676:	bf00      	nop
    1678:	4000400c 	.word	0x4000400c

0000167c <am_hal_clkgen_uarten_set>:
void
am_hal_clkgen_uarten_set(uint32_t ui32Module, uint32_t ui32UartEn)
{
    uint32_t ui32Mask;

    if ( (ui32Module >= AM_REG_UART_NUM_MODULES)        ||
    167c:	2801      	cmp	r0, #1
    167e:	d900      	bls.n	1682 <am_hal_clkgen_uarten_set+0x6>
    1680:	4770      	bx	lr
    1682:	2903      	cmp	r1, #3
    1684:	d8fc      	bhi.n	1680 <am_hal_clkgen_uarten_set+0x4>
{
    1686:	b530      	push	{r4, r5, lr}
         (ui32UartEn > AM_HAL_CLKGEN_UARTEN_EN_POWER_SAV) )
    {
        return;
    }

    ui32UartEn <<= (ui32Module * AM_HAL_CLKGEN_UARTEN_UARTENn_S(ui32Module));
    1688:	fb00 f500 	mul.w	r5, r0, r0
{
    168c:	b083      	sub	sp, #12
    168e:	4604      	mov	r4, r0
    ui32UartEn <<= (ui32Module * AM_HAL_CLKGEN_UARTEN_UARTENn_S(ui32Module));
    1690:	00e8      	lsls	r0, r5, #3
    1692:	fa01 f500 	lsl.w	r5, r1, r0
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1696:	f000 fa79 	bl	1b8c <am_hal_interrupt_master_disable>

    //
    // Set the UART clock
    //
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    169a:	4b09      	ldr	r3, [pc, #36]	; (16c0 <am_hal_clkgen_uarten_set+0x44>)
    AM_CRITICAL_BEGIN_ASM
    169c:	9001      	str	r0, [sp, #4]
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    169e:	681a      	ldr	r2, [r3, #0]
    ui32Mask = ~(AM_HAL_CLKGEN_UARTEN_UARTENn_M(ui32Module));
    16a0:	f04f 0c03 	mov.w	ip, #3
    16a4:	00e1      	lsls	r1, r4, #3
    16a6:	fa0c f401 	lsl.w	r4, ip, r1
    AM_REG(CLKGEN, UARTEN) &= ui32Mask;
    16aa:	ea22 0004 	bic.w	r0, r2, r4
    16ae:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, UARTEN) |= ui32UartEn;
    16b0:	6819      	ldr	r1, [r3, #0]
    16b2:	430d      	orrs	r5, r1
    16b4:	601d      	str	r5, [r3, #0]

    //
    // Begin critical section.
    //
    AM_CRITICAL_END_ASM
    16b6:	9801      	ldr	r0, [sp, #4]
    16b8:	f000 fa6c 	bl	1b94 <am_hal_interrupt_master_set>
}
    16bc:	b003      	add	sp, #12
    16be:	bd30      	pop	{r4, r5, pc}
    16c0:	40004034 	.word	0x40004034

000016c4 <am_hal_ctimer_config_single>:
//*****************************************************************************
void
am_hal_ctimer_config_single(uint32_t ui32TimerNumber,
                            uint32_t ui32TimerSegment,
                            uint32_t ui32ConfigVal)
{
    16c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    16c6:	b083      	sub	sp, #12
    16c8:	460d      	mov	r5, r1
    16ca:	4614      	mov	r4, r2

    //
    // Find the correct register to write based on the timer number.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    16cc:	0107      	lsls	r7, r0, #4

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    16ce:	f000 fa5d 	bl	1b8c <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    16d2:	4e33      	ldr	r6, [pc, #204]	; (17a0 <am_hal_ctimer_config_single+0xdc>)
    AM_CRITICAL_BEGIN_ASM
    16d4:	9001      	str	r0, [sp, #4]
    //
    // If we're working with TIMERB, we need to shift our configuration value
    // up by 16 bits.
    //

    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    16d6:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
    ui32WriteVal = AM_REGVAL(pui32ConfigReg);
    16da:	59ba      	ldr	r2, [r7, r6]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    16dc:	d05b      	beq.n	1796 <am_hal_ctimer_config_single+0xd2>

    //
    // Replace part of the saved register value with the configuration value
    // from the caller.
    //
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
    16de:	ea22 0005 	bic.w	r0, r2, r5
    16e2:	4320      	orrs	r0, r4

    //
    // If we're configuring both timers, we need to set the "link" bit.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_BOTH )
    16e4:	3501      	adds	r5, #1
    {
        ui32WriteVal |= AM_HAL_CTIMER_LINK;
    16e6:	bf08      	it	eq
    16e8:	f040 4000 	orreq.w	r0, r0, #2147483648	; 0x80000000
    }

    //
    // Write our completed configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
    16ec:	51b8      	str	r0, [r7, r6]
    ui32TimerASrc = AM_BFR(CTIMER, STCFG, CLKSEL);
    16ee:	4b2d      	ldr	r3, [pc, #180]	; (17a4 <am_hal_ctimer_config_single+0xe0>)
    16f0:	681d      	ldr	r5, [r3, #0]
    16f2:	f005 0c0f 	and.w	ip, r5, #15
    if ( (ui32TimerASrc == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV16)   ||
    16f6:	f10c 34ff 	add.w	r4, ip, #4294967295
    16fa:	2c01      	cmp	r4, #1
    16fc:	d941      	bls.n	1782 <am_hal_ctimer_config_single+0xbe>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    16fe:	4f28      	ldr	r7, [pc, #160]	; (17a0 <am_hal_ctimer_config_single+0xdc>)
    1700:	683e      	ldr	r6, [r7, #0]
    1702:	f3c6 0e44 	ubfx	lr, r6, #1, #5
    1706:	f10e 32ff 	add.w	r2, lr, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    170a:	f3c6 4044 	ubfx	r0, r6, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    170e:	2a04      	cmp	r2, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1710:	f100 31ff 	add.w	r1, r0, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1714:	d935      	bls.n	1782 <am_hal_ctimer_config_single+0xbe>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    1716:	2904      	cmp	r1, #4
    1718:	d933      	bls.n	1782 <am_hal_ctimer_config_single+0xbe>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    171a:	4b23      	ldr	r3, [pc, #140]	; (17a8 <am_hal_ctimer_config_single+0xe4>)
    171c:	681d      	ldr	r5, [r3, #0]
    171e:	f3c5 0c44 	ubfx	ip, r5, #1, #5
    1722:	f10c 34ff 	add.w	r4, ip, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1726:	f3c5 4744 	ubfx	r7, r5, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    172a:	2c04      	cmp	r4, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    172c:	f107 36ff 	add.w	r6, r7, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1730:	d927      	bls.n	1782 <am_hal_ctimer_config_single+0xbe>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    1732:	2e04      	cmp	r6, #4
    1734:	d925      	bls.n	1782 <am_hal_ctimer_config_single+0xbe>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    1736:	4a1d      	ldr	r2, [pc, #116]	; (17ac <am_hal_ctimer_config_single+0xe8>)
    1738:	6810      	ldr	r0, [r2, #0]
    173a:	f3c0 0e44 	ubfx	lr, r0, #1, #5
    173e:	f10e 31ff 	add.w	r1, lr, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1742:	f3c0 4344 	ubfx	r3, r0, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1746:	2904      	cmp	r1, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1748:	f103 35ff 	add.w	r5, r3, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    174c:	d919      	bls.n	1782 <am_hal_ctimer_config_single+0xbe>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    174e:	2d04      	cmp	r5, #4
    1750:	d917      	bls.n	1782 <am_hal_ctimer_config_single+0xbe>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    1752:	4c17      	ldr	r4, [pc, #92]	; (17b0 <am_hal_ctimer_config_single+0xec>)
    1754:	6827      	ldr	r7, [r4, #0]
    1756:	f3c7 0c44 	ubfx	ip, r7, #1, #5
    175a:	f10c 36ff 	add.w	r6, ip, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    175e:	f3c7 4244 	ubfx	r2, r7, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1762:	2e04      	cmp	r6, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1764:	f102 30ff 	add.w	r0, r2, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1768:	d90b      	bls.n	1782 <am_hal_ctimer_config_single+0xbe>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    176a:	2804      	cmp	r0, #4
    176c:	d909      	bls.n	1782 <am_hal_ctimer_config_single+0xbe>
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    }
    else
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 1);
    176e:	4911      	ldr	r1, [pc, #68]	; (17b4 <am_hal_ctimer_config_single+0xf0>)
    1770:	680b      	ldr	r3, [r1, #0]
    1772:	f043 0504 	orr.w	r5, r3, #4
    1776:	600d      	str	r5, [r1, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1778:	9801      	ldr	r0, [sp, #4]
    177a:	f000 fa0b 	bl	1b94 <am_hal_interrupt_master_set>

} // am_hal_ctimer_config_single()
    177e:	b003      	add	sp, #12
    1780:	bdf0      	pop	{r4, r5, r6, r7, pc}
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    1782:	4c0c      	ldr	r4, [pc, #48]	; (17b4 <am_hal_ctimer_config_single+0xf0>)
    1784:	6827      	ldr	r7, [r4, #0]
    1786:	f027 0604 	bic.w	r6, r7, #4
    178a:	6026      	str	r6, [r4, #0]
    AM_CRITICAL_END_ASM
    178c:	9801      	ldr	r0, [sp, #4]
    178e:	f000 fa01 	bl	1b94 <am_hal_interrupt_master_set>
} // am_hal_ctimer_config_single()
    1792:	b003      	add	sp, #12
    1794:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
    1796:	b291      	uxth	r1, r2
    1798:	ea41 4004 	orr.w	r0, r1, r4, lsl #16
    179c:	e7a6      	b.n	16ec <am_hal_ctimer_config_single+0x28>
    179e:	bf00      	nop
    17a0:	4000800c 	.word	0x4000800c
    17a4:	40008100 	.word	0x40008100
    17a8:	4000801c 	.word	0x4000801c
    17ac:	4000802c 	.word	0x4000802c
    17b0:	4000803c 	.word	0x4000803c
    17b4:	40021020 	.word	0x40021020

000017b8 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    17b8:	b570      	push	{r4, r5, r6, lr}
    17ba:	b082      	sub	sp, #8
    17bc:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    17be:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    17c0:	f000 f9e4 	bl	1b8c <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    17c4:	4d07      	ldr	r5, [pc, #28]	; (17e4 <am_hal_ctimer_start+0x2c>)
    AM_CRITICAL_BEGIN_ASM
    17c6:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    17c8:	5971      	ldr	r1, [r6, r5]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    17ca:	f004 2308 	and.w	r3, r4, #134219776	; 0x8000800
    17ce:	ea21 0003 	bic.w	r0, r1, r3
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    17d2:	f004 1201 	and.w	r2, r4, #65537	; 0x10001
    17d6:	4302      	orrs	r2, r0
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    17d8:	5172      	str	r2, [r6, r5]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    17da:	9801      	ldr	r0, [sp, #4]
    17dc:	f000 f9da 	bl	1b94 <am_hal_interrupt_master_set>
} // am_hal_ctimer_start()
    17e0:	b002      	add	sp, #8
    17e2:	bd70      	pop	{r4, r5, r6, pc}
    17e4:	4000800c 	.word	0x4000800c

000017e8 <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    17e8:	b570      	push	{r4, r5, r6, lr}
    17ea:	b082      	sub	sp, #8
    17ec:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    17ee:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    17f0:	f000 f9cc 	bl	1b8c <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    17f4:	4d05      	ldr	r5, [pc, #20]	; (180c <am_hal_ctimer_clear+0x24>)
    AM_CRITICAL_BEGIN_ASM
    17f6:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    17f8:	5971      	ldr	r1, [r6, r5]
    17fa:	f004 2008 	and.w	r0, r4, #134219776	; 0x8000800
    17fe:	4308      	orrs	r0, r1
    1800:	5170      	str	r0, [r6, r5]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1802:	9801      	ldr	r0, [sp, #4]
    1804:	f000 f9c6 	bl	1b94 <am_hal_interrupt_master_set>
} // am_hal_ctimer_clear()
    1808:	b002      	add	sp, #8
    180a:	bd70      	pop	{r4, r5, r6, pc}
    180c:	4000800c 	.word	0x4000800c

00001810 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1814:	b082      	sub	sp, #8
    1816:	4688      	mov	r8, r1
    1818:	461f      	mov	r7, r3
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    181a:	ea4f 1900 	mov.w	r9, r0, lsl #4
{
    181e:	4614      	mov	r4, r2
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1820:	f000 f9b4 	bl	1b8c <am_hal_interrupt_master_disable>
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1824:	f8df a098 	ldr.w	sl, [pc, #152]	; 18c0 <am_hal_ctimer_period_set+0xb0>
    AM_CRITICAL_BEGIN_ASM
    1828:	9001      	str	r0, [sp, #4]
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    182a:	f518 3f80 	cmn.w	r8, #65536	; 0x10000
                                    AM_REG_CTIMER_CMPRA0_O +
    182e:	4d21      	ldr	r5, [pc, #132]	; (18b4 <am_hal_ctimer_period_set+0xa4>)
                                    AM_REG_CTIMER_CMPRB0_O +
    1830:	4e21      	ldr	r6, [pc, #132]	; (18b8 <am_hal_ctimer_period_set+0xa8>)
    ui32Mode = *pui32ControlReg;
    1832:	f859 300a 	ldr.w	r3, [r9, sl]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1836:	d01b      	beq.n	1870 <am_hal_ctimer_period_set+0x60>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1838:	f403 70c0 	and.w	r0, r3, #384	; 0x180
    183c:	2880      	cmp	r0, #128	; 0x80
    183e:	d01c      	beq.n	187a <am_hal_ctimer_period_set+0x6a>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1840:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1844:	2300      	movs	r3, #0
    1846:	45b8      	cmp	r8, r7
        ui32Comp1 = 0;
    1848:	461a      	mov	r2, r3
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    184a:	d01d      	beq.n	1888 <am_hal_ctimer_period_set+0x78>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    184c:	491b      	ldr	r1, [pc, #108]	; (18bc <am_hal_ctimer_period_set+0xac>)
    184e:	4588      	cmp	r8, r1
    1850:	d025      	beq.n	189e <am_hal_ctimer_period_set+0x8e>
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1 >> 16));
    1852:	400a      	ands	r2, r1
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1854:	b2a0      	uxth	r0, r4
    1856:	4303      	orrs	r3, r0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1858:	ea42 4414 	orr.w	r4, r2, r4, lsr #16
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    185c:	f849 3005 	str.w	r3, [r9, r5]
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1860:	f849 4006 	str.w	r4, [r9, r6]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1864:	9801      	ldr	r0, [sp, #4]
    1866:	f000 f995 	bl	1b94 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    186a:	b002      	add	sp, #8
    186c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ui32Mode = ui32Mode >> 16;
    1870:	0c19      	lsrs	r1, r3, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1872:	f401 70c0 	and.w	r0, r1, #384	; 0x180
    1876:	2880      	cmp	r0, #128	; 0x80
    1878:	d110      	bne.n	189c <am_hal_ctimer_period_set+0x8c>
    187a:	0423      	lsls	r3, r4, #16
        ui32Comp1 = ui32Period;
    187c:	4622      	mov	r2, r4
        ui32Comp0 = ui32Period - ui32OnTime;
    187e:	1be4      	subs	r4, r4, r7
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1880:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1884:	45b8      	cmp	r8, r7
    1886:	d1e1      	bne.n	184c <am_hal_ctimer_period_set+0x3c>
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1888:	b2a6      	uxth	r6, r4
    188a:	4333      	orrs	r3, r6
    188c:	f849 3005 	str.w	r3, [r9, r5]
    AM_CRITICAL_END_ASM
    1890:	9801      	ldr	r0, [sp, #4]
    1892:	f000 f97f 	bl	1b94 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    1896:	b002      	add	sp, #8
    1898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    189c:	2300      	movs	r3, #0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    189e:	b2a5      	uxth	r5, r4
    18a0:	432b      	orrs	r3, r5
    18a2:	f849 3006 	str.w	r3, [r9, r6]
    AM_CRITICAL_END_ASM
    18a6:	9801      	ldr	r0, [sp, #4]
    18a8:	f000 f974 	bl	1b94 <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    18ac:	b002      	add	sp, #8
    18ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    18b2:	bf00      	nop
    18b4:	40008004 	.word	0x40008004
    18b8:	40008008 	.word	0x40008008
    18bc:	ffff0000 	.word	0xffff0000
    18c0:	4000800c 	.word	0x4000800c

000018c4 <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    18c4:	b510      	push	{r4, lr}
    18c6:	b082      	sub	sp, #8
    18c8:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    18ca:	f000 f95f 	bl	1b8c <am_hal_interrupt_master_disable>

    //
    // Enable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    18ce:	4b05      	ldr	r3, [pc, #20]	; (18e4 <am_hal_ctimer_int_enable+0x20>)
    AM_CRITICAL_BEGIN_ASM
    18d0:	9001      	str	r0, [sp, #4]
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    18d2:	6818      	ldr	r0, [r3, #0]
    18d4:	4320      	orrs	r0, r4
    18d6:	6018      	str	r0, [r3, #0]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    18d8:	9801      	ldr	r0, [sp, #4]
    18da:	f000 f95b 	bl	1b94 <am_hal_interrupt_master_set>
} // am_hal_ctimer_int_enable()
    18de:	b002      	add	sp, #8
    18e0:	bd10      	pop	{r4, pc}
    18e2:	bf00      	nop
    18e4:	40008200 	.word	0x40008200

000018e8 <am_hal_ctimer_int_clear>:
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTCLR) = ui32Interrupt;
    18e8:	4b01      	ldr	r3, [pc, #4]	; (18f0 <am_hal_ctimer_int_clear+0x8>)
    18ea:	6018      	str	r0, [r3, #0]
    18ec:	4770      	bx	lr
    18ee:	bf00      	nop
    18f0:	40008208 	.word	0x40008208

000018f4 <am_hal_ctimer_int_status_get>:
//! @return Returns either the timer interrupt status.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_int_status_get(bool bEnabledOnly)
{
    18f4:	b510      	push	{r4, lr}
    18f6:	b082      	sub	sp, #8
    //
    // Return the desired status.
    //

    if ( bEnabledOnly )
    18f8:	b920      	cbnz	r0, 1904 <am_hal_ctimer_int_status_get+0x10>

        return u32RetVal;
    }
    else
    {
        return AM_REGn(CTIMER, 0, INTSTAT);
    18fa:	4b09      	ldr	r3, [pc, #36]	; (1920 <am_hal_ctimer_int_status_get+0x2c>)
    18fc:	681c      	ldr	r4, [r3, #0]
    }
} // am_hal_ctimer_int_status_get()
    18fe:	4620      	mov	r0, r4
    1900:	b002      	add	sp, #8
    1902:	bd10      	pop	{r4, pc}
        AM_CRITICAL_BEGIN_ASM
    1904:	f000 f942 	bl	1b8c <am_hal_interrupt_master_disable>
        u32RetVal  = AM_REGn(CTIMER, 0, INTSTAT);
    1908:	4a05      	ldr	r2, [pc, #20]	; (1920 <am_hal_ctimer_int_status_get+0x2c>)
        u32RetVal &= AM_REGn(CTIMER, 0, INTEN);
    190a:	4906      	ldr	r1, [pc, #24]	; (1924 <am_hal_ctimer_int_status_get+0x30>)
        AM_CRITICAL_BEGIN_ASM
    190c:	9001      	str	r0, [sp, #4]
        u32RetVal  = AM_REGn(CTIMER, 0, INTSTAT);
    190e:	6814      	ldr	r4, [r2, #0]
        u32RetVal &= AM_REGn(CTIMER, 0, INTEN);
    1910:	680b      	ldr	r3, [r1, #0]
        AM_CRITICAL_END_ASM
    1912:	9801      	ldr	r0, [sp, #4]
        u32RetVal &= AM_REGn(CTIMER, 0, INTEN);
    1914:	401c      	ands	r4, r3
        AM_CRITICAL_END_ASM
    1916:	f000 f93d 	bl	1b94 <am_hal_interrupt_master_set>
} // am_hal_ctimer_int_status_get()
    191a:	4620      	mov	r0, r4
    191c:	b002      	add	sp, #8
    191e:	bd10      	pop	{r4, pc}
    1920:	40008204 	.word	0x40008204
    1924:	40008200 	.word	0x40008200

00001928 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    1928:	e7fe      	b.n	1928 <am_hal_debug_error>
    192a:	bf00      	nop

0000192c <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    192c:	4b00      	ldr	r3, [pc, #0]	; (1930 <am_hal_flash_delay+0x4>)
    192e:	4718      	bx	r3
    1930:	0800009d 	.word	0x0800009d

00001934 <am_hal_flash_delay_status_change>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_change(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                 uint32_t ui32Mask, uint32_t ui32Value)
{
    while ( ui32usMaxDelay-- )
    1934:	2800      	cmp	r0, #0
    1936:	f000 809a 	beq.w	1a6e <am_hal_flash_delay_status_change+0x13a>
{
    193a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    193e:	1e44      	subs	r4, r0, #1
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1940:	6808      	ldr	r0, [r1, #0]
    1942:	4010      	ands	r0, r2
    1944:	4283      	cmp	r3, r0
    1946:	f000 808c 	beq.w	1a62 <am_hal_flash_delay_status_change+0x12e>
    194a:	f014 0907 	ands.w	r9, r4, #7
    194e:	461d      	mov	r5, r3
    1950:	4616      	mov	r6, r2
    1952:	460f      	mov	r7, r1
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1954:	f8df 811c 	ldr.w	r8, [pc, #284]	; 1a74 <am_hal_flash_delay_status_change+0x140>
    1958:	d049      	beq.n	19ee <am_hal_flash_delay_status_change+0xba>
    195a:	200c      	movs	r0, #12
    195c:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    195e:	683b      	ldr	r3, [r7, #0]
    1960:	4033      	ands	r3, r6
    1962:	42ab      	cmp	r3, r5
    while ( ui32usMaxDelay-- )
    1964:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1968:	d07b      	beq.n	1a62 <am_hal_flash_delay_status_change+0x12e>
    196a:	f1b9 0f01 	cmp.w	r9, #1
    196e:	d03e      	beq.n	19ee <am_hal_flash_delay_status_change+0xba>
    1970:	f1b9 0f02 	cmp.w	r9, #2
    1974:	d033      	beq.n	19de <am_hal_flash_delay_status_change+0xaa>
    1976:	f1b9 0f03 	cmp.w	r9, #3
    197a:	d028      	beq.n	19ce <am_hal_flash_delay_status_change+0x9a>
    197c:	f1b9 0f04 	cmp.w	r9, #4
    1980:	d01d      	beq.n	19be <am_hal_flash_delay_status_change+0x8a>
    1982:	f1b9 0f05 	cmp.w	r9, #5
    1986:	d012      	beq.n	19ae <am_hal_flash_delay_status_change+0x7a>
    1988:	f1b9 0f06 	cmp.w	r9, #6
    198c:	d007      	beq.n	199e <am_hal_flash_delay_status_change+0x6a>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    198e:	200c      	movs	r0, #12
    1990:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1992:	6839      	ldr	r1, [r7, #0]
    1994:	4031      	ands	r1, r6
    1996:	42a9      	cmp	r1, r5
    while ( ui32usMaxDelay-- )
    1998:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    199c:	d061      	beq.n	1a62 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    199e:	200c      	movs	r0, #12
    19a0:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    19a2:	683a      	ldr	r2, [r7, #0]
    19a4:	4032      	ands	r2, r6
    19a6:	42aa      	cmp	r2, r5
    while ( ui32usMaxDelay-- )
    19a8:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    19ac:	d059      	beq.n	1a62 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    19ae:	200c      	movs	r0, #12
    19b0:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    19b2:	6838      	ldr	r0, [r7, #0]
    19b4:	4030      	ands	r0, r6
    19b6:	42a8      	cmp	r0, r5
    while ( ui32usMaxDelay-- )
    19b8:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    19bc:	d051      	beq.n	1a62 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    19be:	200c      	movs	r0, #12
    19c0:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    19c2:	683b      	ldr	r3, [r7, #0]
    19c4:	4033      	ands	r3, r6
    19c6:	42ab      	cmp	r3, r5
    while ( ui32usMaxDelay-- )
    19c8:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    19cc:	d049      	beq.n	1a62 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    19ce:	200c      	movs	r0, #12
    19d0:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    19d2:	6839      	ldr	r1, [r7, #0]
    19d4:	4031      	ands	r1, r6
    19d6:	42a9      	cmp	r1, r5
    while ( ui32usMaxDelay-- )
    19d8:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    19dc:	d041      	beq.n	1a62 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    19de:	200c      	movs	r0, #12
    19e0:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    19e2:	683a      	ldr	r2, [r7, #0]
    19e4:	4032      	ands	r2, r6
    19e6:	42aa      	cmp	r2, r5
    while ( ui32usMaxDelay-- )
    19e8:	f104 34ff 	add.w	r4, r4, #4294967295
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    19ec:	d039      	beq.n	1a62 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    19ee:	200c      	movs	r0, #12
    19f0:	47c0      	blx	r8
    19f2:	200c      	movs	r0, #12
    while ( ui32usMaxDelay-- )
    19f4:	2c00      	cmp	r4, #0
    19f6:	d037      	beq.n	1a68 <am_hal_flash_delay_status_change+0x134>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    19f8:	683b      	ldr	r3, [r7, #0]
    19fa:	4033      	ands	r3, r6
    19fc:	42ab      	cmp	r3, r5
    while ( ui32usMaxDelay-- )
    19fe:	f1a4 0408 	sub.w	r4, r4, #8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1a02:	d02e      	beq.n	1a62 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1a04:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1a06:	6839      	ldr	r1, [r7, #0]
    1a08:	4031      	ands	r1, r6
    1a0a:	42a9      	cmp	r1, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1a0c:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1a10:	d027      	beq.n	1a62 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1a12:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1a14:	683a      	ldr	r2, [r7, #0]
    1a16:	4032      	ands	r2, r6
    1a18:	42aa      	cmp	r2, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1a1a:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1a1e:	d020      	beq.n	1a62 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1a20:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1a22:	683b      	ldr	r3, [r7, #0]
    1a24:	4033      	ands	r3, r6
    1a26:	42ab      	cmp	r3, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1a28:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1a2c:	d019      	beq.n	1a62 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1a2e:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1a30:	6839      	ldr	r1, [r7, #0]
    1a32:	4031      	ands	r1, r6
    1a34:	42a9      	cmp	r1, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1a36:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1a3a:	d012      	beq.n	1a62 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1a3c:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1a3e:	683a      	ldr	r2, [r7, #0]
    1a40:	4032      	ands	r2, r6
    1a42:	42aa      	cmp	r2, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1a44:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1a48:	d00b      	beq.n	1a62 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1a4a:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1a4c:	683b      	ldr	r3, [r7, #0]
    1a4e:	4033      	ands	r3, r6
    1a50:	42ab      	cmp	r3, r5
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1a52:	f04f 000c 	mov.w	r0, #12
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1a56:	d004      	beq.n	1a62 <am_hal_flash_delay_status_change+0x12e>
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1a58:	47c0      	blx	r8
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
    1a5a:	6838      	ldr	r0, [r7, #0]
    1a5c:	4030      	ands	r0, r6
    1a5e:	42a8      	cmp	r0, r5
    1a60:	d1c5      	bne.n	19ee <am_hal_flash_delay_status_change+0xba>
        {
            return 1;
    1a62:	2001      	movs	r0, #1
    1a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        // Call the BOOTROM cycle function to delay for about 1 microsecond.
        //
        am_hal_flash_delay( FLASH_CYCLES_US(1) );
    }

    return 0;
    1a68:	2000      	movs	r0, #0
    1a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1a6e:	2000      	movs	r0, #0
} // am_hal_flash_delay_status_change()
    1a70:	4770      	bx	lr
    1a72:	bf00      	nop
    1a74:	0800009d 	.word	0x0800009d

00001a78 <am_hal_gpio_input_read>:
    //
    // Combine upper or lower GPIO words into one 64 bit return value.
    //
    uint64_t ui64RetVal;

    ui64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, RDB)) << 32;
    1a78:	4a05      	ldr	r2, [pc, #20]	; (1a90 <am_hal_gpio_input_read+0x18>)
    ui64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, RDA)) << 0;
    1a7a:	4b06      	ldr	r3, [pc, #24]	; (1a94 <am_hal_gpio_input_read+0x1c>)
    ui64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, RDB)) << 32;
    1a7c:	6811      	ldr	r1, [r2, #0]
    ui64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, RDA)) << 0;
    1a7e:	6818      	ldr	r0, [r3, #0]
    ui64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, RDB)) << 32;
    1a80:	2200      	movs	r2, #0
    1a82:	460b      	mov	r3, r1

    return ui64RetVal;
}
    1a84:	ea42 0200 	orr.w	r2, r2, r0
    1a88:	4610      	mov	r0, r2
    1a8a:	4619      	mov	r1, r3
    1a8c:	4770      	bx	lr
    1a8e:	bf00      	nop
    1a90:	40010084 	.word	0x40010084
    1a94:	40010080 	.word	0x40010080

00001a98 <am_hal_gpio_int_enable>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_enable(uint64_t ui64InterruptMask)
{
    1a98:	b410      	push	{r4}
    //
    // Enable the interrupts.
    //
    AM_REG(GPIO, INT1EN) |= (ui64InterruptMask >> 32);
    1a9a:	4c05      	ldr	r4, [pc, #20]	; (1ab0 <am_hal_gpio_int_enable+0x18>)
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    1a9c:	4a05      	ldr	r2, [pc, #20]	; (1ab4 <am_hal_gpio_int_enable+0x1c>)
    AM_REG(GPIO, INT1EN) |= (ui64InterruptMask >> 32);
    1a9e:	6823      	ldr	r3, [r4, #0]
    1aa0:	4319      	orrs	r1, r3
    1aa2:	6021      	str	r1, [r4, #0]
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    1aa4:	6811      	ldr	r1, [r2, #0]
}
    1aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(GPIO, INT0EN) |= (ui64InterruptMask & 0xFFFFFFFF);
    1aaa:	4308      	orrs	r0, r1
    1aac:	6010      	str	r0, [r2, #0]
}
    1aae:	4770      	bx	lr
    1ab0:	40010210 	.word	0x40010210
    1ab4:	40010200 	.word	0x40010200

00001ab8 <am_hal_gpio_int_clear>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_clear(uint64_t ui64InterruptMask)
{
    1ab8:	b530      	push	{r4, r5, lr}
    1aba:	b083      	sub	sp, #12
    1abc:	460d      	mov	r5, r1
    1abe:	4604      	mov	r4, r0
    //
    // Clear the interrupts.
    //
    AM_CRITICAL_BEGIN_ASM
    1ac0:	f000 f864 	bl	1b8c <am_hal_interrupt_master_disable>
    AM_REG(GPIO, INT1CLR) = (ui64InterruptMask >> 32);
    1ac4:	4a04      	ldr	r2, [pc, #16]	; (1ad8 <am_hal_gpio_int_clear+0x20>)
    AM_REG(GPIO, INT0CLR) = (ui64InterruptMask & 0xFFFFFFFF);
    1ac6:	4b05      	ldr	r3, [pc, #20]	; (1adc <am_hal_gpio_int_clear+0x24>)
    AM_CRITICAL_BEGIN_ASM
    1ac8:	9001      	str	r0, [sp, #4]
    AM_REG(GPIO, INT1CLR) = (ui64InterruptMask >> 32);
    1aca:	6015      	str	r5, [r2, #0]
    AM_REG(GPIO, INT0CLR) = (ui64InterruptMask & 0xFFFFFFFF);
    1acc:	601c      	str	r4, [r3, #0]
    AM_CRITICAL_END_ASM
    1ace:	9801      	ldr	r0, [sp, #4]
    1ad0:	f000 f860 	bl	1b94 <am_hal_interrupt_master_set>
}
    1ad4:	b003      	add	sp, #12
    1ad6:	bd30      	pop	{r4, r5, pc}
    1ad8:	40010218 	.word	0x40010218
    1adc:	40010208 	.word	0x40010208

00001ae0 <am_hal_gpio_int_status_get>:
//! @return None
//
//*****************************************************************************
uint64_t
am_hal_gpio_int_status_get(bool bEnabledOnly)
{
    1ae0:	b570      	push	{r4, r5, r6, lr}
    1ae2:	b082      	sub	sp, #8
    1ae4:	4606      	mov	r6, r0
    //
    // Combine upper or lower GPIO words into one 64 bit return value.
    //
    ui64Mask   = 0xFFFFFFFFFFFFFFFF;

    AM_CRITICAL_BEGIN_ASM
    1ae6:	f000 f851 	bl	1b8c <am_hal_interrupt_master_disable>
    ui64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    1aea:	4b0f      	ldr	r3, [pc, #60]	; (1b28 <am_hal_gpio_int_status_get+0x48>)
    AM_CRITICAL_BEGIN_ASM
    1aec:	9001      	str	r0, [sp, #4]
    ui64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    1aee:	f1a3 0110 	sub.w	r1, r3, #16
    ui64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    1af2:	681d      	ldr	r5, [r3, #0]
    ui64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    1af4:	680a      	ldr	r2, [r1, #0]
    ui64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    1af6:	2000      	movs	r0, #0
    ui64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    1af8:	ea40 0402 	orr.w	r4, r0, r2

    if ( bEnabledOnly )
    1afc:	b176      	cbz	r6, 1b1c <am_hal_gpio_int_status_get+0x3c>
    {
        ui64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
    1afe:	490b      	ldr	r1, [pc, #44]	; (1b2c <am_hal_gpio_int_status_get+0x4c>)
        ui64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
    1b00:	4a0b      	ldr	r2, [pc, #44]	; (1b30 <am_hal_gpio_int_status_get+0x50>)
        ui64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
    1b02:	680b      	ldr	r3, [r1, #0]
        ui64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
    1b04:	6811      	ldr	r1, [r2, #0]
        ui64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
    1b06:	4606      	mov	r6, r0
        ui64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
    1b08:	430e      	orrs	r6, r1
    }

    ui64RetVal &= ui64Mask;
    AM_CRITICAL_END_ASM
    1b0a:	9801      	ldr	r0, [sp, #4]
    ui64RetVal &= ui64Mask;
    1b0c:	401d      	ands	r5, r3
    AM_CRITICAL_END_ASM
    1b0e:	f000 f841 	bl	1b94 <am_hal_interrupt_master_set>
    ui64RetVal &= ui64Mask;
    1b12:	4034      	ands	r4, r6

    return ui64RetVal;
}
    1b14:	4620      	mov	r0, r4
    1b16:	4629      	mov	r1, r5
    1b18:	b002      	add	sp, #8
    1b1a:	bd70      	pop	{r4, r5, r6, pc}
    ui64Mask   = 0xFFFFFFFFFFFFFFFF;
    1b1c:	f04f 36ff 	mov.w	r6, #4294967295
    1b20:	f04f 33ff 	mov.w	r3, #4294967295
    1b24:	e7f1      	b.n	1b0a <am_hal_gpio_int_status_get+0x2a>
    1b26:	bf00      	nop
    1b28:	40010214 	.word	0x40010214
    1b2c:	40010210 	.word	0x40010210
    1b30:	40010200 	.word	0x40010200

00001b34 <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    1b34:	280f      	cmp	r0, #15
    1b36:	d80b      	bhi.n	1b50 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    1b38:	2805      	cmp	r0, #5
    1b3a:	d013      	beq.n	1b64 <am_hal_interrupt_enable+0x30>
    1b3c:	2806      	cmp	r0, #6
    1b3e:	d017      	beq.n	1b70 <am_hal_interrupt_enable+0x3c>
    1b40:	2804      	cmp	r0, #4
    1b42:	d104      	bne.n	1b4e <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    1b44:	4a0d      	ldr	r2, [pc, #52]	; (1b7c <am_hal_interrupt_enable+0x48>)
    1b46:	6813      	ldr	r3, [r2, #0]
    1b48:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    1b4c:	6010      	str	r0, [r2, #0]
    1b4e:	4770      	bx	lr
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    1b50:	f1a0 0310 	sub.w	r3, r0, #16
    1b54:	f003 0c1f 	and.w	ip, r3, #31
    1b58:	2001      	movs	r0, #1
    1b5a:	4909      	ldr	r1, [pc, #36]	; (1b80 <am_hal_interrupt_enable+0x4c>)
    1b5c:	fa00 f20c 	lsl.w	r2, r0, ip
    1b60:	600a      	str	r2, [r1, #0]
    1b62:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    1b64:	4805      	ldr	r0, [pc, #20]	; (1b7c <am_hal_interrupt_enable+0x48>)
    1b66:	6801      	ldr	r1, [r0, #0]
    1b68:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    1b6c:	6002      	str	r2, [r0, #0]
            break;
    1b6e:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    1b70:	4902      	ldr	r1, [pc, #8]	; (1b7c <am_hal_interrupt_enable+0x48>)
    1b72:	680a      	ldr	r2, [r1, #0]
    1b74:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    1b78:	600b      	str	r3, [r1, #0]
            break;
    1b7a:	4770      	bx	lr
    1b7c:	e000ed24 	.word	0xe000ed24
    1b80:	e000e100 	.word	0xe000e100

00001b84 <am_hal_interrupt_master_enable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1b84:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    1b88:	b662      	cpsie	i
    __asm("    bx lr");
    1b8a:	4770      	bx	lr

00001b8c <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1b8c:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    1b90:	b672      	cpsid	i
    __asm("    bx lr");
    1b92:	4770      	bx	lr

00001b94 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    1b94:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    1b98:	4770      	bx	lr
    1b9a:	bf00      	nop

00001b9c <iom_workaround_loop>:
                    bool bRising)
{
    //
    // Check to see if this is a "rising edge" or "falling edge" detector.
    //
    __asm("    cbz      r2, falling_edge");
    1b9c:	b132      	cbz	r2, 1bac <falling_edge>

00001b9e <rising_edge>:

    //
    // Read GPIO pin 44, and loop until it's HIGH.
    //
    __asm("rising_edge:");
    __asm("    ldr      r2, =0x40010084");
    1b9e:	4a07      	ldr	r2, [pc, #28]	; (1bbc <falling_check_mosi+0xe>)

00001ba0 <rising_check_mosi>:
    __asm("rising_check_mosi:");
    __asm("    ldr      r3, [r2]");
    1ba0:	6813      	ldr	r3, [r2, #0]
    __asm("    ands     r3, r3, #0x1000");
    1ba2:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    __asm("    beq      rising_check_mosi");
    1ba6:	d0fb      	beq.n	1ba0 <rising_check_mosi>

    //
    // Write the PADREG Value to the PADREG register.
    //
    __asm("    str     r0, [r1]");
    1ba8:	6008      	str	r0, [r1, #0]
    __asm("    bx      lr");
    1baa:	4770      	bx	lr

00001bac <falling_edge>:

    //
    // Read GPIO pin 44, and loop until it's LOW.
    //
    __asm("falling_edge:");
    __asm("    ldr      r2, =0x40010084");
    1bac:	4a03      	ldr	r2, [pc, #12]	; (1bbc <falling_check_mosi+0xe>)

00001bae <falling_check_mosi>:
    __asm("falling_check_mosi:");
    __asm("    ldr      r3, [r2]");
    1bae:	6813      	ldr	r3, [r2, #0]
    __asm("    ands     r3, r3, #0x1000");
    1bb0:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    __asm("    bne      falling_check_mosi");
    1bb4:	d1fb      	bne.n	1bae <falling_check_mosi>

    //
    // Write the PADREG Value to the PADREG register.
    //
    __asm("    str     r0, [r1]");
    1bb6:	6008      	str	r0, [r1, #0]
    __asm("    bx      lr");
    1bb8:	4770      	bx	lr
    1bba:	0000      	.short	0x0000
    1bbc:	40010084 	.word	0x40010084

00001bc0 <am_hal_iom_sleeping_queue_flush>:
    uint32_t ui32Critical;

    //
    // Validate parameters
    //
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    1bc0:	2805      	cmp	r0, #5
    1bc2:	d819      	bhi.n	1bf8 <am_hal_iom_sleeping_queue_flush+0x38>
{
    1bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bc6:	4f0d      	ldr	r7, [pc, #52]	; (1bfc <am_hal_iom_sleeping_queue_flush+0x3c>)
    1bc8:	4e0d      	ldr	r6, [pc, #52]	; (1c00 <am_hal_iom_sleeping_queue_flush+0x40>)

        //
        // Check the queue and the IOM itself.
        //
        if ( (g_bIomBusy[ui32Module] == false) &&
            am_hal_queue_empty(&g_psIOMQueue[ui32Module]) )
    1bca:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1bce:	4604      	mov	r4, r0
    1bd0:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
        ui32Critical = am_hal_interrupt_master_disable();
    1bd4:	f7ff ffda 	bl	1b8c <am_hal_interrupt_master_disable>
        if ( (g_bIomBusy[ui32Module] == false) &&
    1bd8:	5d31      	ldrb	r1, [r6, r4]
        ui32Critical = am_hal_interrupt_master_disable();
    1bda:	4605      	mov	r5, r0
        if ( (g_bIomBusy[ui32Module] == false) &&
    1bdc:	b929      	cbnz	r1, 1bea <am_hal_iom_sleeping_queue_flush+0x2a>
    1bde:	68ba      	ldr	r2, [r7, #8]
    1be0:	b91a      	cbnz	r2, 1bea <am_hal_iom_sleeping_queue_flush+0x2a>
        //
        // End the critical section.
        //
        am_hal_interrupt_master_set(ui32Critical);
    }
}
    1be2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        am_hal_interrupt_master_set(ui32Critical);
    1be6:	f7ff bfd5 	b.w	1b94 <am_hal_interrupt_master_set>
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_NORMAL);
    1bea:	2000      	movs	r0, #0
    1bec:	f002 fc60 	bl	44b0 <am_hal_sysctrl_sleep>
        am_hal_interrupt_master_set(ui32Critical);
    1bf0:	4628      	mov	r0, r5
    1bf2:	f7ff ffcf 	bl	1b94 <am_hal_interrupt_master_set>
    1bf6:	e7ed      	b.n	1bd4 <am_hal_iom_sleeping_queue_flush+0x14>
    1bf8:	4770      	bx	lr
    1bfa:	bf00      	nop
    1bfc:	10000b00 	.word	0x10000b00
    1c00:	10000854 	.word	0x10000854

00001c04 <am_hal_iom_int_service.part.20>:
am_hal_iom_int_service(uint32_t ui32Module, uint32_t ui32Status)
    1c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    g_iom_error_status[ui32Module] |= ui32Status;
    1c08:	4da8      	ldr	r5, [pc, #672]	; (1eac <am_hal_iom_int_service.part.20+0x2a8>)
    1c0a:	5c2b      	ldrb	r3, [r5, r0]
    1c0c:	430b      	orrs	r3, r1
    1c0e:	b2db      	uxtb	r3, r3
    if ( ui32Status & AM_HAL_IOM_INT_CMDCMP )
    1c10:	07ca      	lsls	r2, r1, #31
am_hal_iom_int_service(uint32_t ui32Module, uint32_t ui32Status)
    1c12:	b085      	sub	sp, #20
    1c14:	4604      	mov	r4, r0
    g_iom_error_status[ui32Module] |= ui32Status;
    1c16:	542b      	strb	r3, [r5, r0]
    if ( ui32Status & AM_HAL_IOM_INT_CMDCMP )
    1c18:	f140 8094 	bpl.w	1d44 <am_hal_iom_int_service.part.20+0x140>
        if ( psBuffer->ui32State == BUFFER_IDLE )
    1c1c:	0086      	lsls	r6, r0, #2
    1c1e:	1830      	adds	r0, r6, r0
    1c20:	0082      	lsls	r2, r0, #2
    1c22:	4fa3      	ldr	r7, [pc, #652]	; (1eb0 <am_hal_iom_int_service.part.20+0x2ac>)
        g_bIomBusy[ui32Module] = false;
    1c24:	48a3      	ldr	r0, [pc, #652]	; (1eb4 <am_hal_iom_int_service.part.20+0x2b0>)
        if ( psBuffer->ui32State == BUFFER_IDLE )
    1c26:	58b9      	ldr	r1, [r7, r2]
        g_bIomBusy[ui32Module] = false;
    1c28:	f04f 0e00 	mov.w	lr, #0
        if ( psBuffer->ui32State == BUFFER_IDLE )
    1c2c:	443a      	add	r2, r7
        g_bIomBusy[ui32Module] = false;
    1c2e:	f800 e004 	strb.w	lr, [r0, r4]
        if ( psBuffer->ui32State == BUFFER_IDLE )
    1c32:	2900      	cmp	r1, #0
    1c34:	f000 8083 	beq.w	1d3e <am_hal_iom_int_service.part.20+0x13a>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    1c38:	f504 28a0 	add.w	r8, r4, #327680	; 0x50000
    1c3c:	f108 0004 	add.w	r0, r8, #4
        if ( psBuffer->ui32State == BUFFER_RECEIVING )
    1c40:	2902      	cmp	r1, #2
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    1c42:	ea4f 3800 	mov.w	r8, r0, lsl #12
        if ( psBuffer->ui32State == BUFFER_RECEIVING )
    1c46:	f000 81e3 	beq.w	2010 <am_hal_iom_int_service.part.20+0x40c>
        psBuffer->ui32State = BUFFER_IDLE;
    1c4a:	1932      	adds	r2, r6, r4
    1c4c:	0090      	lsls	r0, r2, #2
    1c4e:	2100      	movs	r1, #0
    1c50:	5039      	str	r1, [r7, r0]
        uint32_t u32RetVal = AM_REGn(IOMSTR, ui32Module, INTSTAT);
        return u32RetVal & AM_REGn(IOMSTR, ui32Module, INTEN);
    }
    else
    {
        return AM_REGn(IOMSTR, ui32Module, INTSTAT);
    1c52:	f8d8 2204 	ldr.w	r2, [r8, #516]	; 0x204
    ui32IntStatus |= am_hal_iom_int_status_get(ui32Module, false);
    1c56:	4313      	orrs	r3, r2
    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    1c58:	f013 0fcc 	tst.w	r3, #204	; 0xcc
    1c5c:	f040 8098 	bne.w	1d90 <am_hal_iom_int_service.part.20+0x18c>
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
    1c60:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    1c64:	f040 8096 	bne.w	1d94 <am_hal_iom_int_service.part.20+0x190>
    am_hal_iom_status_e ui32Status = AM_HAL_IOM_SUCCESS;
    1c68:	f013 0f10 	tst.w	r3, #16
    1c6c:	bf14      	ite	ne
    1c6e:	2306      	movne	r3, #6
    1c70:	460b      	moveq	r3, r1
        if ( psBuffer->pfnCallback )
    1c72:	4426      	add	r6, r4
    1c74:	eb07 0686 	add.w	r6, r7, r6, lsl #2
        g_iom_error_status[ui32Module] = internal_iom_get_int_err(ui32Module, g_iom_error_status[ui32Module]);
    1c78:	552b      	strb	r3, [r5, r4]
        if ( psBuffer->pfnCallback )
    1c7a:	6930      	ldr	r0, [r6, #16]
    1c7c:	2800      	cmp	r0, #0
    1c7e:	d05e      	beq.n	1d3e <am_hal_iom_int_service.part.20+0x13a>
}
    1c80:	b005      	add	sp, #20
    1c82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            psBuffer->pfnCallback();
    1c86:	4700      	bx	r0
                    am_hal_iom_fifo_read(ui32Module, psBuffer->pui32Data,
    1c88:	eb03 0c8b 	add.w	ip, r3, fp, lsl #2
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    1c8c:	f8d8 311c 	ldr.w	r3, [r8, #284]	; 0x11c
                    am_hal_iom_fifo_read(ui32Module, psBuffer->pui32Data,
    1c90:	f8dc 5004 	ldr.w	r5, [ip, #4]
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    1c94:	0719      	lsls	r1, r3, #28
    1c96:	d40a      	bmi.n	1cae <am_hal_iom_int_service.part.20+0xaa>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    1c98:	f8d8 6100 	ldr.w	r6, [r8, #256]	; 0x100
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    1c9c:	b2f0      	uxtb	r0, r6
    1c9e:	4284      	cmp	r4, r0
    1ca0:	d905      	bls.n	1cae <am_hal_iom_int_service.part.20+0xaa>
    1ca2:	4a85      	ldr	r2, [pc, #532]	; (1eb8 <am_hal_iom_int_service.part.20+0x2b4>)
    1ca4:	4885      	ldr	r0, [pc, #532]	; (1ebc <am_hal_iom_int_service.part.20+0x2b8>)
    1ca6:	f44f 6178 	mov.w	r1, #3968	; 0xf80
    1caa:	f7ff fe3d 	bl	1928 <am_hal_debug_error>
    for ( i = 0; i < ui32NumWords; i++ )
    1cae:	ea5f 0994 	movs.w	r9, r4, lsr #2
    1cb2:	f007 0203 	and.w	r2, r7, #3
    1cb6:	d038      	beq.n	1d2a <am_hal_iom_int_service.part.20+0x126>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1cb8:	462f      	mov	r7, r5
    1cba:	f8d8 1000 	ldr.w	r1, [r8]
    1cbe:	f847 1b04 	str.w	r1, [r7], #4
    1cc2:	eb05 0389 	add.w	r3, r5, r9, lsl #2
    1cc6:	1b5c      	subs	r4, r3, r5
    1cc8:	1f26      	subs	r6, r4, #4
    for ( i = 0; i < ui32NumWords; i++ )
    1cca:	429f      	cmp	r7, r3
    1ccc:	f3c6 0182 	ubfx	r1, r6, #2, #3
    1cd0:	d02b      	beq.n	1d2a <am_hal_iom_int_service.part.20+0x126>
    1cd2:	2900      	cmp	r1, #0
    1cd4:	d060      	beq.n	1d98 <am_hal_iom_int_service.part.20+0x194>
    1cd6:	2901      	cmp	r1, #1
    1cd8:	d021      	beq.n	1d1e <am_hal_iom_int_service.part.20+0x11a>
    1cda:	2902      	cmp	r1, #2
    1cdc:	d01b      	beq.n	1d16 <am_hal_iom_int_service.part.20+0x112>
    1cde:	2903      	cmp	r1, #3
    1ce0:	d015      	beq.n	1d0e <am_hal_iom_int_service.part.20+0x10a>
    1ce2:	2904      	cmp	r1, #4
    1ce4:	d00f      	beq.n	1d06 <am_hal_iom_int_service.part.20+0x102>
    1ce6:	2905      	cmp	r1, #5
    1ce8:	d009      	beq.n	1cfe <am_hal_iom_int_service.part.20+0xfa>
    1cea:	2906      	cmp	r1, #6
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1cec:	bf1c      	itt	ne
    1cee:	f8d8 1000 	ldrne.w	r1, [r8]
    1cf2:	f847 1b04 	strne.w	r1, [r7], #4
    1cf6:	f8d8 4000 	ldr.w	r4, [r8]
    1cfa:	f847 4b04 	str.w	r4, [r7], #4
    1cfe:	f8d8 6000 	ldr.w	r6, [r8]
    1d02:	f847 6b04 	str.w	r6, [r7], #4
    1d06:	f8d8 1000 	ldr.w	r1, [r8]
    1d0a:	f847 1b04 	str.w	r1, [r7], #4
    1d0e:	f8d8 4000 	ldr.w	r4, [r8]
    1d12:	f847 4b04 	str.w	r4, [r7], #4
    1d16:	f8d8 6000 	ldr.w	r6, [r8]
    1d1a:	f847 6b04 	str.w	r6, [r7], #4
    1d1e:	f8d8 1000 	ldr.w	r1, [r8]
    1d22:	f847 1b04 	str.w	r1, [r7], #4
    for ( i = 0; i < ui32NumWords; i++ )
    1d26:	429f      	cmp	r7, r3
    1d28:	d136      	bne.n	1d98 <am_hal_iom_int_service.part.20+0x194>
    if ( ui32Leftovers )
    1d2a:	b142      	cbz	r2, 1d3e <am_hal_iom_int_service.part.20+0x13a>
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1d2c:	a904      	add	r1, sp, #16
    1d2e:	f8d8 7000 	ldr.w	r7, [r8]
    1d32:	f841 7d04 	str.w	r7, [r1, #-4]!
    1d36:	eb05 0089 	add.w	r0, r5, r9, lsl #2
    1d3a:	f002 fee1 	bl	4b00 <memcpy>
}
    1d3e:	b005      	add	sp, #20
    1d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if ( ui32Status & AM_HAL_IOM_INT_THR )
    1d44:	0788      	lsls	r0, r1, #30
    1d46:	d5fa      	bpl.n	1d3e <am_hal_iom_int_service.part.20+0x13a>
        if ( psBuffer->ui32State == BUFFER_IDLE )
    1d48:	eb04 0b84 	add.w	fp, r4, r4, lsl #2
    1d4c:	ea4f 068b 	mov.w	r6, fp, lsl #2
    1d50:	4b57      	ldr	r3, [pc, #348]	; (1eb0 <am_hal_iom_int_service.part.20+0x2ac>)
    1d52:	599a      	ldr	r2, [r3, r6]
    1d54:	441e      	add	r6, r3
    1d56:	2a00      	cmp	r2, #0
    1d58:	d0f1      	beq.n	1d3e <am_hal_iom_int_service.part.20+0x13a>
            thresh = AM_BFRn(IOMSTR, ui32Module, FIFOTHR, FIFOWTHR);
    1d5a:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
        if ( psBuffer->ui32State == BUFFER_SENDING )
    1d5e:	2a01      	cmp	r2, #1
            thresh = AM_BFRn(IOMSTR, ui32Module, FIFOTHR, FIFOWTHR);
    1d60:	f104 0404 	add.w	r4, r4, #4
        if ( psBuffer->ui32State == BUFFER_SENDING )
    1d64:	f000 80ac 	beq.w	1ec0 <am_hal_iom_int_service.part.20+0x2bc>
            thresh = AM_BFRn(IOMSTR, ui32Module, FIFOTHR, FIFORTHR);
    1d68:	ea4f 3804 	mov.w	r8, r4, lsl #12
    1d6c:	f508 7a80 	add.w	sl, r8, #256	; 0x100
    1d70:	f8d8 0108 	ldr.w	r0, [r8, #264]	; 0x108
    1d74:	f000 097f 	and.w	r9, r0, #127	; 0x7f
    1d78:	e004      	b.n	1d84 <am_hal_iom_int_service.part.20+0x180>
                if ( ui32NumBytes == psBuffer->ui32BytesLeft )
    1d7a:	68b4      	ldr	r4, [r6, #8]
    1d7c:	42ac      	cmp	r4, r5
    1d7e:	d083      	beq.n	1c88 <am_hal_iom_int_service.part.20+0x84>
                else if ( ui32NumBytes >= 4 )
    1d80:	2d03      	cmp	r5, #3
    1d82:	d828      	bhi.n	1dd6 <am_hal_iom_int_service.part.20+0x1d2>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    1d84:	f8da 7000 	ldr.w	r7, [sl]
    1d88:	b2fd      	uxtb	r5, r7
            while ( (ui32NumBytes = am_hal_iom_fifo_full_slots(ui32Module)) >= thresh )
    1d8a:	45a9      	cmp	r9, r5
    1d8c:	d9f5      	bls.n	1d7a <am_hal_iom_int_service.part.20+0x176>
    1d8e:	e7d6      	b.n	1d3e <am_hal_iom_int_service.part.20+0x13a>
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
    1d90:	2305      	movs	r3, #5
    1d92:	e76e      	b.n	1c72 <am_hal_iom_int_service.part.20+0x6e>
        ui32Status = AM_HAL_IOM_ERR_I2C_ARB;
    1d94:	2307      	movs	r3, #7
    1d96:	e76c      	b.n	1c72 <am_hal_iom_int_service.part.20+0x6e>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1d98:	46ba      	mov	sl, r7
    1d9a:	f8d8 0000 	ldr.w	r0, [r8]
    1d9e:	f84a 0b04 	str.w	r0, [sl], #4
    1da2:	f8d8 4000 	ldr.w	r4, [r8]
    1da6:	607c      	str	r4, [r7, #4]
    1da8:	f8d8 6000 	ldr.w	r6, [r8]
    1dac:	f8ca 6004 	str.w	r6, [sl, #4]
    1db0:	f8d8 1000 	ldr.w	r1, [r8]
    1db4:	60f9      	str	r1, [r7, #12]
    1db6:	f8d8 0000 	ldr.w	r0, [r8]
    1dba:	6138      	str	r0, [r7, #16]
    1dbc:	f8d8 4000 	ldr.w	r4, [r8]
    1dc0:	617c      	str	r4, [r7, #20]
    1dc2:	f8d8 6000 	ldr.w	r6, [r8]
    1dc6:	61be      	str	r6, [r7, #24]
    1dc8:	f8d8 1000 	ldr.w	r1, [r8]
    1dcc:	61f9      	str	r1, [r7, #28]
    1dce:	3720      	adds	r7, #32
    for ( i = 0; i < ui32NumWords; i++ )
    1dd0:	429f      	cmp	r7, r3
    1dd2:	d1e1      	bne.n	1d98 <am_hal_iom_int_service.part.20+0x194>
    1dd4:	e7a9      	b.n	1d2a <am_hal_iom_int_service.part.20+0x126>
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    1dd6:	f8d8 111c 	ldr.w	r1, [r8, #284]	; 0x11c
                    am_hal_iom_fifo_read(ui32Module, psBuffer->pui32Data, ui32NumBytes);
    1dda:	6874      	ldr	r4, [r6, #4]
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    1ddc:	070a      	lsls	r2, r1, #28
                    ui32NumBytes = (ui32NumBytes & (~0x3));
    1dde:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    1de2:	f140 8106 	bpl.w	1ff2 <am_hal_iom_int_service.part.20+0x3ee>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1de6:	4622      	mov	r2, r4
    1de8:	f8d8 1000 	ldr.w	r1, [r8]
    1dec:	f842 1b04 	str.w	r1, [r2], #4
    1df0:	f005 0cfc 	and.w	ip, r5, #252	; 0xfc
    1df4:	f1ac 0504 	sub.w	r5, ip, #4
    1df8:	44a4      	add	ip, r4
    for ( i = 0; i < ui32NumWords; i++ )
    1dfa:	4594      	cmp	ip, r2
    1dfc:	f3c5 0082 	ubfx	r0, r5, #2, #3
    1e00:	d047      	beq.n	1e92 <am_hal_iom_int_service.part.20+0x28e>
    1e02:	b348      	cbz	r0, 1e58 <am_hal_iom_int_service.part.20+0x254>
    1e04:	2801      	cmp	r0, #1
    1e06:	d021      	beq.n	1e4c <am_hal_iom_int_service.part.20+0x248>
    1e08:	2802      	cmp	r0, #2
    1e0a:	d01b      	beq.n	1e44 <am_hal_iom_int_service.part.20+0x240>
    1e0c:	2803      	cmp	r0, #3
    1e0e:	d015      	beq.n	1e3c <am_hal_iom_int_service.part.20+0x238>
    1e10:	2804      	cmp	r0, #4
    1e12:	d00f      	beq.n	1e34 <am_hal_iom_int_service.part.20+0x230>
    1e14:	2805      	cmp	r0, #5
    1e16:	d009      	beq.n	1e2c <am_hal_iom_int_service.part.20+0x228>
    1e18:	2806      	cmp	r0, #6
    1e1a:	d003      	beq.n	1e24 <am_hal_iom_int_service.part.20+0x220>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1e1c:	f8d8 1000 	ldr.w	r1, [r8]
    1e20:	6061      	str	r1, [r4, #4]
    1e22:	3204      	adds	r2, #4
    1e24:	f8d8 4000 	ldr.w	r4, [r8]
    1e28:	f842 4b04 	str.w	r4, [r2], #4
    1e2c:	f8d8 5000 	ldr.w	r5, [r8]
    1e30:	f842 5b04 	str.w	r5, [r2], #4
    1e34:	f8d8 0000 	ldr.w	r0, [r8]
    1e38:	f842 0b04 	str.w	r0, [r2], #4
    1e3c:	f8d8 1000 	ldr.w	r1, [r8]
    1e40:	f842 1b04 	str.w	r1, [r2], #4
    1e44:	f8d8 4000 	ldr.w	r4, [r8]
    1e48:	f842 4b04 	str.w	r4, [r2], #4
    1e4c:	f8d8 5000 	ldr.w	r5, [r8]
    1e50:	f842 5b04 	str.w	r5, [r2], #4
    for ( i = 0; i < ui32NumWords; i++ )
    1e54:	4594      	cmp	ip, r2
    1e56:	d01c      	beq.n	1e92 <am_hal_iom_int_service.part.20+0x28e>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    1e58:	4610      	mov	r0, r2
    1e5a:	f8d8 1000 	ldr.w	r1, [r8]
    1e5e:	f840 1b04 	str.w	r1, [r0], #4
    1e62:	f8d8 4000 	ldr.w	r4, [r8]
    1e66:	6054      	str	r4, [r2, #4]
    1e68:	f8d8 5000 	ldr.w	r5, [r8]
    1e6c:	6045      	str	r5, [r0, #4]
    1e6e:	f8d8 0000 	ldr.w	r0, [r8]
    1e72:	60d0      	str	r0, [r2, #12]
    1e74:	f8d8 1000 	ldr.w	r1, [r8]
    1e78:	6111      	str	r1, [r2, #16]
    1e7a:	f8d8 4000 	ldr.w	r4, [r8]
    1e7e:	6154      	str	r4, [r2, #20]
    1e80:	f8d8 5000 	ldr.w	r5, [r8]
    1e84:	6195      	str	r5, [r2, #24]
    1e86:	f8d8 0000 	ldr.w	r0, [r8]
    1e8a:	61d0      	str	r0, [r2, #28]
    1e8c:	3220      	adds	r2, #32
    for ( i = 0; i < ui32NumWords; i++ )
    1e8e:	4594      	cmp	ip, r2
    1e90:	d1e2      	bne.n	1e58 <am_hal_iom_int_service.part.20+0x254>
                    psBuffer->ui32BytesLeft -= ui32NumBytes;
    1e92:	68b1      	ldr	r1, [r6, #8]
                    psBuffer->pui32Data += (ui32NumBytes / 4);
    1e94:	6872      	ldr	r2, [r6, #4]
                    psBuffer->ui32BytesLeft -= ui32NumBytes;
    1e96:	1bcc      	subs	r4, r1, r7
                    psBuffer->pui32Data += (ui32NumBytes / 4);
    1e98:	4417      	add	r7, r2
                    psBuffer->ui32BytesLeft -= ui32NumBytes;
    1e9a:	60b4      	str	r4, [r6, #8]
                    psBuffer->pui32Data += (ui32NumBytes / 4);
    1e9c:	6077      	str	r7, [r6, #4]
                    AM_BFWn(IOMSTR, ui32Module, INTCLR, THR, 1);
    1e9e:	f8d8 7208 	ldr.w	r7, [r8, #520]	; 0x208
    1ea2:	f047 0502 	orr.w	r5, r7, #2
    1ea6:	f8c8 5208 	str.w	r5, [r8, #520]	; 0x208
    1eaa:	e76b      	b.n	1d84 <am_hal_iom_int_service.part.20+0x180>
    1eac:	1000085c 	.word	0x1000085c
    1eb0:	10000a88 	.word	0x10000a88
    1eb4:	10000854 	.word	0x10000854
    1eb8:	00004bd8 	.word	0x00004bd8
    1ebc:	00004bc4 	.word	0x00004bc4
            thresh = AM_BFRn(IOMSTR, ui32Module, FIFOTHR, FIFOWTHR);
    1ec0:	0324      	lsls	r4, r4, #12
    1ec2:	6877      	ldr	r7, [r6, #4]
    1ec4:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    1ec8:	f504 7a02 	add.w	sl, r4, #520	; 0x208
    1ecc:	f3c2 2b06 	ubfx	fp, r2, #8, #7
    1ed0:	f504 798e 	add.w	r9, r4, #284	; 0x11c
    1ed4:	f504 7880 	add.w	r8, r4, #256	; 0x100
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    1ed8:	f8d9 3000 	ldr.w	r3, [r9]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1edc:	f8d8 5000 	ldr.w	r5, [r8]
    1ee0:	68b2      	ldr	r2, [r6, #8]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    1ee2:	f8d9 1000 	ldr.w	r1, [r9]
    1ee6:	f013 0f08 	tst.w	r3, #8
    1eea:	bf14      	ite	ne
    1eec:	2340      	movne	r3, #64	; 0x40
    1eee:	2380      	moveq	r3, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1ef0:	1b58      	subs	r0, r3, r5
                ui32SpaceInFifo = am_hal_iom_fifo_empty_slots(ui32Module);
    1ef2:	f000 05fc 	and.w	r5, r0, #252	; 0xfc
    1ef6:	4295      	cmp	r5, r2
    1ef8:	bf28      	it	cs
    1efa:	4615      	movcs	r5, r2
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1efc:	f8d8 3000 	ldr.w	r3, [r8]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    1f00:	f011 0f08 	tst.w	r1, #8
    1f04:	bf14      	ite	ne
    1f06:	2240      	movne	r2, #64	; 0x40
    1f08:	2280      	moveq	r2, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    1f0a:	1ad2      	subs	r2, r2, r3
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    1f0c:	f002 01fc 	and.w	r1, r2, #252	; 0xfc
    1f10:	428d      	cmp	r5, r1
    1f12:	d867      	bhi.n	1fe4 <am_hal_iom_int_service.part.20+0x3e0>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1f14:	2d00      	cmp	r5, #0
    1f16:	d04d      	beq.n	1fb4 <am_hal_iom_int_service.part.20+0x3b0>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1f18:	463b      	mov	r3, r7
    1f1a:	43fa      	mvns	r2, r7
    1f1c:	f853 0b04 	ldr.w	r0, [r3], #4
    1f20:	6020      	str	r0, [r4, #0]
    1f22:	443a      	add	r2, r7
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1f24:	1bd8      	subs	r0, r3, r7
    1f26:	442a      	add	r2, r5
    1f28:	4285      	cmp	r5, r0
    1f2a:	f3c2 0182 	ubfx	r1, r2, #2, #3
    1f2e:	d941      	bls.n	1fb4 <am_hal_iom_int_service.part.20+0x3b0>
    1f30:	b319      	cbz	r1, 1f7a <am_hal_iom_int_service.part.20+0x376>
    1f32:	2901      	cmp	r1, #1
    1f34:	d01b      	beq.n	1f6e <am_hal_iom_int_service.part.20+0x36a>
    1f36:	2902      	cmp	r1, #2
    1f38:	d016      	beq.n	1f68 <am_hal_iom_int_service.part.20+0x364>
    1f3a:	2903      	cmp	r1, #3
    1f3c:	d011      	beq.n	1f62 <am_hal_iom_int_service.part.20+0x35e>
    1f3e:	2904      	cmp	r1, #4
    1f40:	d00c      	beq.n	1f5c <am_hal_iom_int_service.part.20+0x358>
    1f42:	2905      	cmp	r1, #5
    1f44:	d007      	beq.n	1f56 <am_hal_iom_int_service.part.20+0x352>
    1f46:	2906      	cmp	r1, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1f48:	bf1c      	itt	ne
    1f4a:	f853 1b04 	ldrne.w	r1, [r3], #4
    1f4e:	6021      	strne	r1, [r4, #0]
    1f50:	f853 2b04 	ldr.w	r2, [r3], #4
    1f54:	6022      	str	r2, [r4, #0]
    1f56:	f853 0b04 	ldr.w	r0, [r3], #4
    1f5a:	6020      	str	r0, [r4, #0]
    1f5c:	f853 1b04 	ldr.w	r1, [r3], #4
    1f60:	6021      	str	r1, [r4, #0]
    1f62:	f853 2b04 	ldr.w	r2, [r3], #4
    1f66:	6022      	str	r2, [r4, #0]
    1f68:	f853 0b04 	ldr.w	r0, [r3], #4
    1f6c:	6020      	str	r0, [r4, #0]
    1f6e:	f853 1b04 	ldr.w	r1, [r3], #4
    1f72:	6021      	str	r1, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1f74:	1bda      	subs	r2, r3, r7
    1f76:	4295      	cmp	r5, r2
    1f78:	d91c      	bls.n	1fb4 <am_hal_iom_int_service.part.20+0x3b0>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    1f7a:	469c      	mov	ip, r3
    1f7c:	3320      	adds	r3, #32
    1f7e:	f85c 0b04 	ldr.w	r0, [ip], #4
    1f82:	6020      	str	r0, [r4, #0]
    1f84:	f853 1c1c 	ldr.w	r1, [r3, #-28]
    1f88:	6021      	str	r1, [r4, #0]
    1f8a:	f8dc 2004 	ldr.w	r2, [ip, #4]
    1f8e:	6022      	str	r2, [r4, #0]
    1f90:	f853 0c14 	ldr.w	r0, [r3, #-20]
    1f94:	6020      	str	r0, [r4, #0]
    1f96:	f853 1c10 	ldr.w	r1, [r3, #-16]
    1f9a:	6021      	str	r1, [r4, #0]
    1f9c:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    1fa0:	6022      	str	r2, [r4, #0]
    1fa2:	f853 0c08 	ldr.w	r0, [r3, #-8]
    1fa6:	6020      	str	r0, [r4, #0]
    1fa8:	f853 1c04 	ldr.w	r1, [r3, #-4]
    1fac:	6021      	str	r1, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    1fae:	1bda      	subs	r2, r3, r7
    1fb0:	4295      	cmp	r5, r2
    1fb2:	d8e2      	bhi.n	1f7a <am_hal_iom_int_service.part.20+0x376>
                AM_BFWn(IOMSTR, ui32Module, INTCLR, THR, 1);
    1fb4:	f8da 7000 	ldr.w	r7, [sl]
    1fb8:	f047 0302 	orr.w	r3, r7, #2
    1fbc:	f8ca 3000 	str.w	r3, [sl]
                psBuffer->ui32BytesLeft -= ui32NumBytes;
    1fc0:	68b0      	ldr	r0, [r6, #8]
                psBuffer->pui32Data += (ui32NumBytes / 4);
    1fc2:	6877      	ldr	r7, [r6, #4]
    1fc4:	f025 0c03 	bic.w	ip, r5, #3
    1fc8:	4467      	add	r7, ip
                psBuffer->ui32BytesLeft -= ui32NumBytes;
    1fca:	1b45      	subs	r5, r0, r5
    1fcc:	60b5      	str	r5, [r6, #8]
                psBuffer->pui32Data += (ui32NumBytes / 4);
    1fce:	6077      	str	r7, [r6, #4]
                if ( 0 == psBuffer->ui32BytesLeft )
    1fd0:	2d00      	cmp	r5, #0
    1fd2:	f43f aeb4 	beq.w	1d3e <am_hal_iom_int_service.part.20+0x13a>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    1fd6:	f8d8 1000 	ldr.w	r1, [r8]
            } while ( am_hal_iom_fifo_full_slots(ui32Module) <= thresh );
    1fda:	b2ca      	uxtb	r2, r1
    1fdc:	4593      	cmp	fp, r2
    1fde:	f4bf af7b 	bcs.w	1ed8 <am_hal_iom_int_service.part.20+0x2d4>
    1fe2:	e6ac      	b.n	1d3e <am_hal_iom_int_service.part.20+0x13a>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    1fe4:	4a4a      	ldr	r2, [pc, #296]	; (2110 <am_hal_iom_int_service.part.20+0x50c>)
    1fe6:	484b      	ldr	r0, [pc, #300]	; (2114 <am_hal_iom_int_service.part.20+0x510>)
    1fe8:	f640 7145 	movw	r1, #3909	; 0xf45
    1fec:	f7ff fc9c 	bl	1928 <am_hal_debug_error>
    1ff0:	e792      	b.n	1f18 <am_hal_iom_int_service.part.20+0x314>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    1ff2:	f8da 2000 	ldr.w	r2, [sl]
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    1ff6:	b2d0      	uxtb	r0, r2
    1ff8:	4287      	cmp	r7, r0
    1ffa:	f67f aef4 	bls.w	1de6 <am_hal_iom_int_service.part.20+0x1e2>
    1ffe:	4a46      	ldr	r2, [pc, #280]	; (2118 <am_hal_iom_int_service.part.20+0x514>)
    2000:	4844      	ldr	r0, [pc, #272]	; (2114 <am_hal_iom_int_service.part.20+0x510>)
    2002:	9301      	str	r3, [sp, #4]
    2004:	f44f 6178 	mov.w	r1, #3968	; 0xf80
    2008:	f7ff fc8e 	bl	1928 <am_hal_debug_error>
    200c:	9b01      	ldr	r3, [sp, #4]
    200e:	e6ea      	b.n	1de6 <am_hal_iom_int_service.part.20+0x1e2>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    2010:	f8d8 b100 	ldr.w	fp, [r8, #256]	; 0x100
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    2014:	f8d8 311c 	ldr.w	r3, [r8, #284]	; 0x11c
            am_hal_iom_fifo_read(ui32Module, psBuffer->pui32Data, ui32NumBytes);
    2018:	f8d2 9004 	ldr.w	r9, [r2, #4]
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    201c:	071b      	lsls	r3, r3, #28
    201e:	fa5f fa8b 	uxtb.w	sl, fp
    2022:	d569      	bpl.n	20f8 <am_hal_iom_int_service.part.20+0x4f4>
    for ( i = 0; i < ui32NumWords; i++ )
    2024:	ea5f 009a 	movs.w	r0, sl, lsr #2
    2028:	f00b 0203 	and.w	r2, fp, #3
    202c:	d058      	beq.n	20e0 <am_hal_iom_int_service.part.20+0x4dc>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    202e:	464b      	mov	r3, r9
    2030:	f8d8 1000 	ldr.w	r1, [r8]
    2034:	f843 1b04 	str.w	r1, [r3], #4
    2038:	eb09 0e80 	add.w	lr, r9, r0, lsl #2
    203c:	ebae 0c09 	sub.w	ip, lr, r9
    2040:	f1ac 0b04 	sub.w	fp, ip, #4
    for ( i = 0; i < ui32NumWords; i++ )
    2044:	4573      	cmp	r3, lr
    2046:	f3cb 0182 	ubfx	r1, fp, #2, #3
    204a:	d049      	beq.n	20e0 <am_hal_iom_int_service.part.20+0x4dc>
    204c:	b349      	cbz	r1, 20a2 <am_hal_iom_int_service.part.20+0x49e>
    204e:	2901      	cmp	r1, #1
    2050:	d021      	beq.n	2096 <am_hal_iom_int_service.part.20+0x492>
    2052:	2902      	cmp	r1, #2
    2054:	d01b      	beq.n	208e <am_hal_iom_int_service.part.20+0x48a>
    2056:	2903      	cmp	r1, #3
    2058:	d015      	beq.n	2086 <am_hal_iom_int_service.part.20+0x482>
    205a:	2904      	cmp	r1, #4
    205c:	d00f      	beq.n	207e <am_hal_iom_int_service.part.20+0x47a>
    205e:	2905      	cmp	r1, #5
    2060:	d009      	beq.n	2076 <am_hal_iom_int_service.part.20+0x472>
    2062:	2906      	cmp	r1, #6
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    2064:	bf1c      	itt	ne
    2066:	f8d8 1000 	ldrne.w	r1, [r8]
    206a:	f843 1b04 	strne.w	r1, [r3], #4
    206e:	f8d8 1000 	ldr.w	r1, [r8]
    2072:	f843 1b04 	str.w	r1, [r3], #4
    2076:	f8d8 1000 	ldr.w	r1, [r8]
    207a:	f843 1b04 	str.w	r1, [r3], #4
    207e:	f8d8 1000 	ldr.w	r1, [r8]
    2082:	f843 1b04 	str.w	r1, [r3], #4
    2086:	f8d8 1000 	ldr.w	r1, [r8]
    208a:	f843 1b04 	str.w	r1, [r3], #4
    208e:	f8d8 1000 	ldr.w	r1, [r8]
    2092:	f843 1b04 	str.w	r1, [r3], #4
    2096:	f8d8 1000 	ldr.w	r1, [r8]
    209a:	f843 1b04 	str.w	r1, [r3], #4
    for ( i = 0; i < ui32NumWords; i++ )
    209e:	4573      	cmp	r3, lr
    20a0:	d01e      	beq.n	20e0 <am_hal_iom_int_service.part.20+0x4dc>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    20a2:	469a      	mov	sl, r3
    20a4:	f8d8 c000 	ldr.w	ip, [r8]
    20a8:	f84a cb04 	str.w	ip, [sl], #4
    20ac:	f8d8 b000 	ldr.w	fp, [r8]
    20b0:	f8c3 b004 	str.w	fp, [r3, #4]
    20b4:	f8d8 c000 	ldr.w	ip, [r8]
    20b8:	f8ca c004 	str.w	ip, [sl, #4]
    20bc:	f8d8 1000 	ldr.w	r1, [r8]
    20c0:	60d9      	str	r1, [r3, #12]
    20c2:	f8d8 1000 	ldr.w	r1, [r8]
    20c6:	6119      	str	r1, [r3, #16]
    20c8:	f8d8 1000 	ldr.w	r1, [r8]
    20cc:	6159      	str	r1, [r3, #20]
    20ce:	f8d8 1000 	ldr.w	r1, [r8]
    20d2:	6199      	str	r1, [r3, #24]
    20d4:	f8d8 1000 	ldr.w	r1, [r8]
    20d8:	61d9      	str	r1, [r3, #28]
    20da:	3320      	adds	r3, #32
    for ( i = 0; i < ui32NumWords; i++ )
    20dc:	4573      	cmp	r3, lr
    20de:	d1e0      	bne.n	20a2 <am_hal_iom_int_service.part.20+0x49e>
    if ( ui32Leftovers )
    20e0:	b142      	cbz	r2, 20f4 <am_hal_iom_int_service.part.20+0x4f0>
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
    20e2:	a904      	add	r1, sp, #16
    20e4:	f8d8 3000 	ldr.w	r3, [r8]
    20e8:	f841 3d04 	str.w	r3, [r1, #-4]!
    20ec:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    20f0:	f002 fd06 	bl	4b00 <memcpy>
    20f4:	5d2b      	ldrb	r3, [r5, r4]
    20f6:	e5a8      	b.n	1c4a <am_hal_iom_int_service.part.20+0x46>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    20f8:	f8d8 2100 	ldr.w	r2, [r8, #256]	; 0x100
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    20fc:	b2d1      	uxtb	r1, r2
    20fe:	458a      	cmp	sl, r1
    2100:	d990      	bls.n	2024 <am_hal_iom_int_service.part.20+0x420>
    2102:	4a05      	ldr	r2, [pc, #20]	; (2118 <am_hal_iom_int_service.part.20+0x514>)
    2104:	4803      	ldr	r0, [pc, #12]	; (2114 <am_hal_iom_int_service.part.20+0x510>)
    2106:	f44f 6178 	mov.w	r1, #3968	; 0xf80
    210a:	f7ff fc0d 	bl	1928 <am_hal_debug_error>
    210e:	e789      	b.n	2024 <am_hal_iom_int_service.part.20+0x420>
    2110:	00004b90 	.word	0x00004b90
    2114:	00004bc4 	.word	0x00004bc4
    2118:	00004bd8 	.word	0x00004bd8

0000211c <am_hal_iom_pwrctrl_enable>:
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    211c:	2805      	cmp	r0, #5
{
    211e:	b510      	push	{r4, lr}
    2120:	4604      	mov	r4, r0
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    2122:	d905      	bls.n	2130 <am_hal_iom_pwrctrl_enable+0x14>
    2124:	4a05      	ldr	r2, [pc, #20]	; (213c <am_hal_iom_pwrctrl_enable+0x20>)
    2126:	4806      	ldr	r0, [pc, #24]	; (2140 <am_hal_iom_pwrctrl_enable+0x24>)
    2128:	f240 21d5 	movw	r1, #725	; 0x2d5
    212c:	f7ff fbfc 	bl	1928 <am_hal_debug_error>
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_IOM0 << ui32Module);
    2130:	2002      	movs	r0, #2
    2132:	40a0      	lsls	r0, r4
}
    2134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_IOM0 << ui32Module);
    2138:	f001 beb4 	b.w	3ea4 <am_hal_pwrctrl_periph_enable>
    213c:	00004c44 	.word	0x00004c44
    2140:	00004bc4 	.word	0x00004bc4

00002144 <am_hal_iom_enable>:
    if ( ui32Module < AM_REG_IOMSTR_NUM_MODULES )
    2144:	2805      	cmp	r0, #5
    2146:	d80f      	bhi.n	2168 <am_hal_iom_enable+0x24>
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
    2148:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    214c:	3304      	adds	r3, #4
    214e:	031b      	lsls	r3, r3, #12
        g_bIomBusy[ui32Module] = false;
    2150:	4906      	ldr	r1, [pc, #24]	; (216c <am_hal_iom_enable+0x28>)
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
    2152:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
{
    2156:	b410      	push	{r4}
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
    2158:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
        g_bIomBusy[ui32Module] = false;
    215c:	2400      	movs	r4, #0
        AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_IFCEN(1);
    215e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        g_bIomBusy[ui32Module] = false;
    2162:	540c      	strb	r4, [r1, r0]
}
    2164:	f85d 4b04 	ldr.w	r4, [sp], #4
    2168:	4770      	bx	lr
    216a:	bf00      	nop
    216c:	10000854 	.word	0x10000854

00002170 <am_hal_iom_disable>:
    if ( ui32Module < AM_REG_IOMSTR_NUM_MODULES )
    2170:	2805      	cmp	r0, #5
    2172:	d80d      	bhi.n	2190 <am_hal_iom_disable+0x20>
    2174:	4a07      	ldr	r2, [pc, #28]	; (2194 <am_hal_iom_disable+0x24>)
    while ( g_bIomBusy[ui32Module] );
    2176:	5c13      	ldrb	r3, [r2, r0]
    2178:	2b00      	cmp	r3, #0
    217a:	d1fc      	bne.n	2176 <am_hal_iom_disable+0x6>
        AM_REGn(IOMSTR, ui32Module, CFG) &= ~(AM_REG_IOMSTR_CFG_IFCEN(1));
    217c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
    2180:	3004      	adds	r0, #4
    2182:	0301      	lsls	r1, r0, #12
    2184:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    2188:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    218c:	f8c1 311c 	str.w	r3, [r1, #284]	; 0x11c
    2190:	4770      	bx	lr
    2192:	bf00      	nop
    2194:	10000854 	.word	0x10000854

00002198 <am_hal_iom_power_on_restore>:
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    2198:	2805      	cmp	r0, #5
{
    219a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    219c:	4604      	mov	r4, r0
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    219e:	d81d      	bhi.n	21dc <am_hal_iom_power_on_restore+0x44>
    if ( am_hal_iom_pwrsave[ui32Module].bValid == 0 )
    21a0:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    21a4:	4f11      	ldr	r7, [pc, #68]	; (21ec <am_hal_iom_power_on_restore+0x54>)
    21a6:	00ad      	lsls	r5, r5, #2
    21a8:	197e      	adds	r6, r7, r5
    21aa:	6933      	ldr	r3, [r6, #16]
    21ac:	b1ab      	cbz	r3, 21da <am_hal_iom_power_on_restore+0x42>
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_IOM0 << ui32Module);
    21ae:	2002      	movs	r0, #2
    21b0:	40a0      	lsls	r0, r4
    21b2:	f001 fe77 	bl	3ea4 <am_hal_pwrctrl_periph_enable>
    AM_REGn(IOMSTR, ui32Module, FIFOTHR) = am_hal_iom_pwrsave[ui32Module].FIFOTHR;
    21b6:	f504 20a0 	add.w	r0, r4, #327680	; 0x50000
    21ba:	3004      	adds	r0, #4
    21bc:	0301      	lsls	r1, r0, #12
    21be:	597a      	ldr	r2, [r7, r5]
    21c0:	f8c1 2108 	str.w	r2, [r1, #264]	; 0x108
    AM_REGn(IOMSTR, ui32Module, CLKCFG) = am_hal_iom_pwrsave[ui32Module].CLKCFG;
    21c4:	6874      	ldr	r4, [r6, #4]
    21c6:	f8c1 410c 	str.w	r4, [r1, #268]	; 0x10c
    AM_REGn(IOMSTR, ui32Module, CFG) = am_hal_iom_pwrsave[ui32Module].CFG;
    21ca:	68b7      	ldr	r7, [r6, #8]
    21cc:	f8c1 711c 	str.w	r7, [r1, #284]	; 0x11c
    AM_REGn(IOMSTR, ui32Module, INTEN) = am_hal_iom_pwrsave[ui32Module].INTEN;
    21d0:	68f5      	ldr	r5, [r6, #12]
    21d2:	f8c1 5200 	str.w	r5, [r1, #512]	; 0x200
    am_hal_iom_pwrsave[ui32Module].bValid = 0;
    21d6:	2300      	movs	r3, #0
    21d8:	6133      	str	r3, [r6, #16]
    21da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    21dc:	4a04      	ldr	r2, [pc, #16]	; (21f0 <am_hal_iom_power_on_restore+0x58>)
    21de:	4805      	ldr	r0, [pc, #20]	; (21f4 <am_hal_iom_power_on_restore+0x5c>)
    21e0:	f240 3136 	movw	r1, #822	; 0x336
    21e4:	f7ff fba0 	bl	1928 <am_hal_debug_error>
    21e8:	e7da      	b.n	21a0 <am_hal_iom_power_on_restore+0x8>
    21ea:	bf00      	nop
    21ec:	10000b90 	.word	0x10000b90
    21f0:	00004c44 	.word	0x00004c44
    21f4:	00004bc4 	.word	0x00004bc4

000021f8 <am_hal_iom_power_off_save>:
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    21f8:	2805      	cmp	r0, #5
{
    21fa:	b510      	push	{r4, lr}
    21fc:	4604      	mov	r4, r0
    am_hal_debug_assert_msg(ui32Module < AM_REG_IOMSTR_NUM_MODULES,
    21fe:	d905      	bls.n	220c <am_hal_iom_power_off_save+0x14>
    2200:	4a11      	ldr	r2, [pc, #68]	; (2248 <am_hal_iom_power_off_save+0x50>)
    2202:	4812      	ldr	r0, [pc, #72]	; (224c <am_hal_iom_power_off_save+0x54>)
    2204:	f240 316a 	movw	r1, #874	; 0x36a
    2208:	f7ff fb8e 	bl	1928 <am_hal_debug_error>
    am_hal_iom_pwrsave[ui32Module].FIFOTHR = AM_REGn(IOMSTR, ui32Module, FIFOTHR);
    220c:	f504 23a0 	add.w	r3, r4, #327680	; 0x50000
    2210:	3304      	adds	r3, #4
    2212:	031b      	lsls	r3, r3, #12
    2214:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    2218:	0091      	lsls	r1, r2, #2
    221a:	4a0d      	ldr	r2, [pc, #52]	; (2250 <am_hal_iom_power_off_save+0x58>)
    221c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    2220:	5050      	str	r0, [r2, r1]
    2222:	440a      	add	r2, r1
    am_hal_iom_pwrsave[ui32Module].CLKCFG = AM_REGn(IOMSTR, ui32Module, CLKCFG);
    2224:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    2228:	6051      	str	r1, [r2, #4]
    am_hal_iom_pwrsave[ui32Module].CFG = AM_REGn(IOMSTR, ui32Module, CFG);
    222a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
    222e:	6090      	str	r0, [r2, #8]
    am_hal_iom_pwrsave[ui32Module].INTEN = AM_REGn(IOMSTR, ui32Module, INTEN);
    2230:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2234:	60d3      	str	r3, [r2, #12]
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_IOM0 << ui32Module);
    2236:	2002      	movs	r0, #2
    am_hal_iom_pwrsave[ui32Module].bValid = 1;
    2238:	2101      	movs	r1, #1
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_IOM0 << ui32Module);
    223a:	40a0      	lsls	r0, r4
    am_hal_iom_pwrsave[ui32Module].bValid = 1;
    223c:	6111      	str	r1, [r2, #16]
}
    223e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_IOM0 << ui32Module);
    2242:	f001 be71 	b.w	3f28 <am_hal_pwrctrl_periph_disable>
    2246:	bf00      	nop
    2248:	00004c10 	.word	0x00004c10
    224c:	00004bc4 	.word	0x00004bc4
    2250:	10000b90 	.word	0x10000b90

00002254 <am_hal_iom_config>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    2254:	2805      	cmp	r0, #5
    2256:	f200 80e0 	bhi.w	241a <am_hal_iom_config+0x1c6>
{
    225a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ( psConfig->bSPHA )
    225e:	7a0d      	ldrb	r5, [r1, #8]
    ui32Config = psConfig->ui32InterfaceMode;
    2260:	680b      	ldr	r3, [r1, #0]
    if ( psConfig->bSPHA )
    2262:	b10d      	cbz	r5, 2268 <am_hal_iom_config+0x14>
        ui32Config |= AM_REG_IOMSTR_CFG_SPHA(1);
    2264:	f043 0304 	orr.w	r3, r3, #4
    if ( psConfig->bSPOL )
    2268:	7a4a      	ldrb	r2, [r1, #9]
    226a:	b10a      	cbz	r2, 2270 <am_hal_iom_config+0x1c>
        ui32Config |= AM_REG_IOMSTR_CFG_SPOL(1);
    226c:	f043 0302 	orr.w	r3, r3, #2
    if ( psConfig->ui32ClockFrequency >= 16000000UL)
    2270:	684c      	ldr	r4, [r1, #4]
    2272:	4e83      	ldr	r6, [pc, #524]	; (2480 <am_hal_iom_config+0x22c>)
    AM_REGn(IOMSTR, ui32Module, CFG) = ui32Config;
    2274:	f500 27a0 	add.w	r7, r0, #327680	; 0x50000
    2278:	3704      	adds	r7, #4
    if ( psConfig->ui32ClockFrequency >= 16000000UL)
    227a:	42b4      	cmp	r4, r6
    AM_REGn(IOMSTR, ui32Module, CFG) = ui32Config;
    227c:	ea4f 3407 	mov.w	r4, r7, lsl #12
        ui32Config |= AM_REG_IOMSTR_CFG_STARTRD(2);
    2280:	bf88      	it	hi
    2282:	f043 0320 	orrhi.w	r3, r3, #32
    AM_REGn(IOMSTR, ui32Module, CFG) = ui32Config;
    2286:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(check_iom_threshold(psConfig->ui8WriteThreshold)) |
    228a:	7a8a      	ldrb	r2, [r1, #10]
         AM_REG_IOMSTR_FIFOTHR_FIFORTHR(check_iom_threshold(psConfig->ui8ReadThreshold)));
    228c:	7acb      	ldrb	r3, [r1, #11]
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(check_iom_threshold(psConfig->ui8WriteThreshold)) |
    228e:	2a7c      	cmp	r2, #124	; 0x7c
    2290:	bf28      	it	cs
    2292:	227c      	movcs	r2, #124	; 0x7c
    2294:	2a04      	cmp	r2, #4
    2296:	bf38      	it	cc
    2298:	2204      	movcc	r2, #4
    229a:	0216      	lsls	r6, r2, #8
         AM_REG_IOMSTR_FIFOTHR_FIFORTHR(check_iom_threshold(psConfig->ui8ReadThreshold)));
    229c:	2b7c      	cmp	r3, #124	; 0x7c
    229e:	bf28      	it	cs
    22a0:	237c      	movcs	r3, #124	; 0x7c
        (AM_REG_IOMSTR_FIFOTHR_FIFOWTHR(check_iom_threshold(psConfig->ui8WriteThreshold)) |
    22a2:	f406 47fe 	and.w	r7, r6, #32512	; 0x7f00
    22a6:	2b04      	cmp	r3, #4
    22a8:	bf2c      	ite	cs
    22aa:	ea47 0203 	orrcs.w	r2, r7, r3
    22ae:	f047 0204 	orrcc.w	r2, r7, #4
    if ((0 != ui32Module) && (4 != ui32Module) && (6 != ui32Module) &&
    22b2:	f030 0304 	bics.w	r3, r0, #4
    AM_REGn(IOMSTR, ui32Module, FIFOTHR) =
    22b6:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    if ((0 != ui32Module) && (4 != ui32Module) && (6 != ui32Module) &&
    22ba:	d005      	beq.n	22c8 <am_hal_iom_config+0x74>
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) ==
    22bc:	4b71      	ldr	r3, [pc, #452]	; (2484 <am_hal_iom_config+0x230>)
    22be:	681e      	ldr	r6, [r3, #0]
    22c0:	b2f7      	uxtb	r7, r6
    22c2:	2f22      	cmp	r7, #34	; 0x22
    22c4:	f000 80ae 	beq.w	2424 <am_hal_iom_config+0x1d0>
      ui32ClkCfg = iom_get_interface_clock_cfg(psConfig->ui32ClockFrequency,
    22c8:	f8d1 e004 	ldr.w	lr, [r1, #4]
    if ( ui32FreqHz == 0 )
    22cc:	f1be 0f00 	cmp.w	lr, #0
    22d0:	f000 8093 	beq.w	23fa <am_hal_iom_config+0x1a6>
    i32Div = (ui32HFRCfreqHz / ui32FreqHz) + ((ui32HFRCfreqHz % ui32FreqHz) ? 1 : 0);    // Round up (ceiling)
    22d4:	4b6c      	ldr	r3, [pc, #432]	; (2488 <am_hal_iom_config+0x234>)
    22d6:	fbb3 f7fe 	udiv	r7, r3, lr
    22da:	fb0e 3617 	mls	r6, lr, r7, r3
    22de:	2e00      	cmp	r6, #0
    22e0:	bf18      	it	ne
    22e2:	3701      	addne	r7, #1
    i32N = 31 - AM_INSTR_CLZ((i32Div & (-i32Div)));
    22e4:	427a      	negs	r2, r7
    22e6:	403a      	ands	r2, r7
    22e8:	fab2 f882 	clz	r8, r2
    22ec:	f1c8 031f 	rsb	r3, r8, #31
    22f0:	2b06      	cmp	r3, #6
    22f2:	bfa8      	it	ge
    22f4:	2306      	movge	r3, #6
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
    22f6:	f5be 6f37 	cmp.w	lr, #2928	; 0xb70
    22fa:	f240 808f 	bls.w	241c <am_hal_iom_config+0x1c8>
    22fe:	f5ae 0974 	sub.w	r9, lr, #15990784	; 0xf40000
    2302:	4e62      	ldr	r6, [pc, #392]	; (248c <am_hal_iom_config+0x238>)
    2304:	f5a9 5210 	sub.w	r2, r9, #9216	; 0x2400
    2308:	42b2      	cmp	r2, r6
    230a:	bf8b      	itete	hi
    230c:	f04f 0c00 	movhi.w	ip, #0
    2310:	f44f 6c00 	movls.w	ip, #2048	; 0x800
    2314:	2201      	movhi	r2, #1
    2316:	2203      	movls	r2, #3
    ui32Denom = ( 1 << i32N ) * ( 1 + (ui32Div3 * 2) );
    2318:	fa02 fa03 	lsl.w	sl, r2, r3
    ui32TotPer = i32Div / ui32Denom;
    231c:	fbb7 f6fa 	udiv	r6, r7, sl
    ui32TotPer += (i32Div % ui32Denom) ? 1 : 0;
    2320:	fb0a 7b16 	mls	fp, sl, r6, r7
    2324:	f1bb 0f00 	cmp.w	fp, #0
    2328:	bf18      	it	ne
    232a:	3601      	addne	r6, #1
    ui32v1 = 31 - AM_INSTR_CLZ(ui32TotPer);     // v1 = log2(TotPer)
    232c:	fab6 f886 	clz	r8, r6
    2330:	f1c8 091f 	rsb	r9, r8, #31
    ui32Fsel = (ui32v1 > 7) ? ui32v1 + i32N - 7 : i32N;
    2334:	f1b9 0f07 	cmp.w	r9, #7
    2338:	f240 808f 	bls.w	245a <am_hal_iom_config+0x206>
    233c:	3b07      	subs	r3, #7
    233e:	444b      	add	r3, r9
    ui32Fsel++;
    2340:	f103 0b01 	add.w	fp, r3, #1
    if ( ui32Fsel > 7 )
    2344:	f1bb 0f07 	cmp.w	fp, #7
    2348:	d857      	bhi.n	23fa <am_hal_iom_config+0x1a6>
        ui32TotPer = ui32TotPer>>(ui32v1-7);
    234a:	f1a9 0807 	sub.w	r8, r9, #7
        ui32TotPer += ((ui32DivEn) % (1 << (ui32v1 - 7))) ? 1 : 0;
    234e:	f04f 0a01 	mov.w	sl, #1
    2352:	fa0a f908 	lsl.w	r9, sl, r8
    2356:	f109 3aff 	add.w	sl, r9, #4294967295
    235a:	ea0a 0906 	and.w	r9, sl, r6
        ui32TotPer = ui32TotPer>>(ui32v1-7);
    235e:	fa26 f608 	lsr.w	r6, r6, r8
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
    2362:	f8df 814c 	ldr.w	r8, [pc, #332]	; 24b0 <am_hal_iom_config+0x25c>
        ui32TotPer += ((ui32DivEn) % (1 << (ui32v1 - 7))) ? 1 : 0;
    2366:	f1b9 0f00 	cmp.w	r9, #0
    236a:	bf18      	it	ne
    236c:	3601      	addne	r6, #1
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
    236e:	45c6      	cmp	lr, r8
    2370:	d879      	bhi.n	2466 <am_hal_iom_config+0x212>
    2372:	f04f 0e01 	mov.w	lr, #1
    2376:	fa0e fa03 	lsl.w	sl, lr, r3
    237a:	4557      	cmp	r7, sl
    237c:	d073      	beq.n	2466 <am_hal_iom_config+0x212>
    237e:	1e77      	subs	r7, r6, #1
    2380:	46b1      	mov	r9, r6
    2382:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
    if (ui32Phase == 1)
    2386:	2d00      	cmp	r5, #0
    2388:	d173      	bne.n	2472 <am_hal_iom_config+0x21e>
        ui32LowPer = (ui32TotPer - 1) / 2;          // Longer low phase
    238a:	087e      	lsrs	r6, r7, #1
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    238c:	409a      	lsls	r2, r3
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    238e:	4b3e      	ldr	r3, [pc, #248]	; (2488 <am_hal_iom_config+0x234>)
    if ( (ui32ClkFreq % 250000) == 0 )
    2390:	f8df 8120 	ldr.w	r8, [pc, #288]	; 24b4 <am_hal_iom_config+0x260>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    2394:	fb09 f202 	mul.w	r2, r9, r2
    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
    2398:	ea4f 250b 	mov.w	r5, fp, lsl #8
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    239c:	fbb3 fbf2 	udiv	fp, r3, r2
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    23a0:	fb02 331b 	mls	r3, r2, fp, r3
    23a4:	0852      	lsrs	r2, r2, #1
    23a6:	429a      	cmp	r2, r3
    23a8:	bf2c      	ite	cs
    23aa:	465b      	movcs	r3, fp
    23ac:	f10b 0301 	addcc.w	r3, fp, #1
    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
    23b0:	f405 65e0 	and.w	r5, r5, #1792	; 0x700
    23b4:	ea45 020c 	orr.w	r2, r5, ip
    if ( (ui32ClkFreq % 250000) == 0 )
    23b8:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 24b8 <am_hal_iom_config+0x264>
    23bc:	fba8 ba03 	umull	fp, sl, r8, r3
    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
    23c0:	ea42 020e 	orr.w	r2, r2, lr
                 AM_REG_IOMSTR_CLKCFG_LOWPER(ui32LowPer)            |
    23c4:	0436      	lsls	r6, r6, #16
    if ( (ui32ClkFreq % 250000) == 0 )
    23c6:	ea4f 4e1a 	mov.w	lr, sl, lsr #16
    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
    23ca:	ea42 6207 	orr.w	r2, r2, r7, lsl #24
                 AM_REG_IOMSTR_CLKCFG_LOWPER(ui32LowPer)            |
    23ce:	f406 0c7f 	and.w	ip, r6, #16711680	; 0xff0000
    if ( (ui32ClkFreq % 250000) == 0 )
    23d2:	fb09 371e 	mls	r7, r9, lr, r3
    ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)                |
    23d6:	ea42 020c 	orr.w	r2, r2, ip
    if ( (ui32ClkFreq % 250000) == 0 )
    23da:	b93f      	cbnz	r7, 23ec <am_hal_iom_config+0x198>
    return ui32Value  &&  !(ui32Value & (ui32Value - 1));
    23dc:	f1be 0f00 	cmp.w	lr, #0
    23e0:	d004      	beq.n	23ec <am_hal_iom_config+0x198>
    23e2:	f10e 33ff 	add.w	r3, lr, #4294967295
    23e6:	ea13 0f0e 	tst.w	r3, lr
    23ea:	d033      	beq.n	2454 <am_hal_iom_config+0x200>
    return ( ((uint64_t)ui32ClkFreq) << 32) | (uint64_t)ui32ClkCfg;
    23ec:	2500      	movs	r5, #0
    23ee:	ea45 0602 	orr.w	r6, r5, r2
      ui32ClkCfg = iom_get_interface_clock_cfg(psConfig->ui32ClockFrequency,
    23f2:	4637      	mov	r7, r6
    if ( ui32ClkCfg )
    23f4:	b10e      	cbz	r6, 23fa <am_hal_iom_config+0x1a6>
        AM_REGn(IOMSTR, ui32Module, CLKCFG) = (uint32_t)ui32ClkCfg;
    23f6:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    23fa:	468b      	mov	fp, r1
    23fc:	4604      	mov	r4, r0
    ui32HFRC = am_hal_clkgen_sysclk_get();
    23fe:	f7ff f923 	bl	1648 <am_hal_clkgen_sysclk_get>
    ui32StatusTimeout[ui32Module] = MAX_IOM_BITS * AM_HAL_IOM_MAX_FIFO_SIZE *
    2402:	4f23      	ldr	r7, [pc, #140]	; (2490 <am_hal_iom_config+0x23c>)
      IOM_OVERHEAD_FACTOR * (ui32HFRC / psConfig->ui32ClockFrequency);
    2404:	f8db 1004 	ldr.w	r1, [fp, #4]
    2408:	fbb0 f0f1 	udiv	r0, r0, r1
    240c:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
    2410:	0216      	lsls	r6, r2, #8
    ui32StatusTimeout[ui32Module] = MAX_IOM_BITS * AM_HAL_IOM_MAX_FIFO_SIZE *
    2412:	f847 6024 	str.w	r6, [r7, r4, lsl #2]
    2416:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    241a:	4770      	bx	lr
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
    241c:	f44f 6c00 	mov.w	ip, #2048	; 0x800
    2420:	2203      	movs	r2, #3
    2422:	e779      	b.n	2318 <am_hal_iom_config+0xc4>
            isRevB2() && (AM_HAL_IOM_I2CMODE == psConfig->ui32InterfaceMode))
    2424:	680a      	ldr	r2, [r1, #0]
    2426:	2a00      	cmp	r2, #0
    2428:	f47f af4e 	bne.w	22c8 <am_hal_iom_config+0x74>
      AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_SPHA_M;
    242c:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
  if (ui32FreqHz == AM_HAL_IOM_800KHZ)
    2430:	4d18      	ldr	r5, [pc, #96]	; (2494 <am_hal_iom_config+0x240>)
      AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_SPHA_M;
    2432:	f043 0204 	orr.w	r2, r3, #4
    2436:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
      ui32ClkCfg = iom_get_i2c_workaround_clock_cfg(psConfig->ui32ClockFrequency);
    243a:	684a      	ldr	r2, [r1, #4]
  if (ui32FreqHz == AM_HAL_IOM_800KHZ)
    243c:	42aa      	cmp	r2, r5
    243e:	d01b      	beq.n	2478 <am_hal_iom_config+0x224>
  else if (ui32FreqHz == AM_HAL_IOM_400KHZ)
    2440:	4e15      	ldr	r6, [pc, #84]	; (2498 <am_hal_iom_config+0x244>)
    2442:	42b2      	cmp	r2, r6
    2444:	d01a      	beq.n	247c <am_hal_iom_config+0x228>
  else if (ui32FreqHz == AM_HAL_IOM_200KHZ)
    2446:	4b15      	ldr	r3, [pc, #84]	; (249c <am_hal_iom_config+0x248>)
    2448:	4f15      	ldr	r7, [pc, #84]	; (24a0 <am_hal_iom_config+0x24c>)
    244a:	4d16      	ldr	r5, [pc, #88]	; (24a4 <am_hal_iom_config+0x250>)
    244c:	429a      	cmp	r2, r3
    244e:	bf08      	it	eq
    2450:	462f      	moveq	r7, r5
    2452:	e7d0      	b.n	23f6 <am_hal_iom_config+0x1a2>
            ui32ClkCfg = AM_REG_IOMSTR_CLKCFG_FSEL(ui32Fsel)    |
    2454:	f445 6200 	orr.w	r2, r5, #2048	; 0x800
    2458:	e7c8      	b.n	23ec <am_hal_iom_config+0x198>
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
    245a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 24b0 <am_hal_iom_config+0x25c>
    245e:	45c6      	cmp	lr, r8
    ui32Fsel++;
    2460:	f103 0b01 	add.w	fp, r3, #1
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
    2464:	d985      	bls.n	2372 <am_hal_iom_config+0x11e>
    2466:	1e77      	subs	r7, r6, #1
    2468:	f04f 0901 	mov.w	r9, #1
    246c:	f04f 0e00 	mov.w	lr, #0
    2470:	e789      	b.n	2386 <am_hal_iom_config+0x132>
        ui32LowPer = (ui32TotPer - 2) / 2;          // Longer high phase
    2472:	1eb5      	subs	r5, r6, #2
    2474:	086e      	lsrs	r6, r5, #1
    2476:	e789      	b.n	238c <am_hal_iom_config+0x138>
  if (ui32FreqHz == AM_HAL_IOM_800KHZ)
    2478:	4f0b      	ldr	r7, [pc, #44]	; (24a8 <am_hal_iom_config+0x254>)
    247a:	e7bc      	b.n	23f6 <am_hal_iom_config+0x1a2>
  else if (ui32FreqHz == AM_HAL_IOM_400KHZ)
    247c:	4f0b      	ldr	r7, [pc, #44]	; (24ac <am_hal_iom_config+0x258>)
    247e:	e7ba      	b.n	23f6 <am_hal_iom_config+0x1a2>
    2480:	00f423ff 	.word	0x00f423ff
    2484:	4002000c 	.word	0x4002000c
    2488:	02dc6c00 	.word	0x02dc6c00
    248c:	007a11ff 	.word	0x007a11ff
    2490:	10000a70 	.word	0x10000a70
    2494:	000c3500 	.word	0x000c3500
    2498:	00061a80 	.word	0x00061a80
    249c:	00030d40 	.word	0x00030d40
    24a0:	1d0e1500 	.word	0x1d0e1500
    24a4:	1d0e1400 	.word	0x1d0e1400
    24a8:	1d0e1200 	.word	0x1d0e1200
    24ac:	1d0e1300 	.word	0x1d0e1300
    24b0:	00b71aff 	.word	0x00b71aff
    24b4:	431bde83 	.word	0x431bde83
    24b8:	0003d090 	.word	0x0003d090

000024bc <am_hal_iom_workaround_word_write>:
{
    24bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, WORKAROUND_IOM, CFG, FULLDUP)) ?
    24c0:	4cc9      	ldr	r4, [pc, #804]	; (27e8 <am_hal_iom_workaround_word_write+0x32c>)
    24c2:	6825      	ldr	r5, [r4, #0]
{
    24c4:	4691      	mov	r9, r2
                               AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    24c6:	f015 0f08 	tst.w	r5, #8
{
    24ca:	b08d      	sub	sp, #52	; 0x34
    am_hal_debug_assert_msg(ui32NumBytes <= 4091, "SPI transfer too big.");
    24cc:	f640 72fb 	movw	r2, #4091	; 0xffb
                               AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    24d0:	bf14      	ite	ne
    24d2:	2640      	movne	r6, #64	; 0x40
    24d4:	2680      	moveq	r6, #128	; 0x80
    am_hal_debug_assert_msg(ui32NumBytes <= 4091, "SPI transfer too big.");
    24d6:	4591      	cmp	r9, r2
{
    24d8:	4604      	mov	r4, r0
    24da:	4688      	mov	r8, r1
    24dc:	9301      	str	r3, [sp, #4]
    am_hal_debug_assert_msg(ui32NumBytes <= 4091, "SPI transfer too big.");
    24de:	f200 832b 	bhi.w	2b38 <am_hal_iom_workaround_word_write+0x67c>
    ui32ClkCfg = AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG);
    24e2:	4bc2      	ldr	r3, [pc, #776]	; (27ec <am_hal_iom_workaround_word_write+0x330>)
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    24e4:	4fc2      	ldr	r7, [pc, #776]	; (27f0 <am_hal_iom_workaround_word_write+0x334>)
    ui32ClkCfg = AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG);
    24e6:	681d      	ldr	r5, [r3, #0]
    uint32_t ui32ClkCfg = AM_REGn(IOMSTR, 4, CLKCFG);
    24e8:	681a      	ldr	r2, [r3, #0]
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    24ea:	49c2      	ldr	r1, [pc, #776]	; (27f4 <am_hal_iom_workaround_word_write+0x338>)
    24ec:	f3c2 3e00 	ubfx	lr, r2, #12, #1
    24f0:	f3c2 20c0 	ubfx	r0, r2, #11, #1
    24f4:	0e13      	lsrs	r3, r2, #24
    24f6:	fb03 f30e 	mul.w	r3, r3, lr
    24fa:	0040      	lsls	r0, r0, #1
    24fc:	3001      	adds	r0, #1
    24fe:	3301      	adds	r3, #1
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    2500:	fb03 fa00 	mul.w	sl, r3, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    2504:	ea4f 0c5a 	mov.w	ip, sl, lsr #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    2508:	fbb7 fbfa 	udiv	fp, r7, sl
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    250c:	fb0a 721b 	mls	r2, sl, fp, r7
    2510:	4594      	cmp	ip, r2
    2512:	bf2c      	ite	cs
    2514:	46de      	movcs	lr, fp
    2516:	f10b 0e01 	addcc.w	lr, fp, #1
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    251a:	458e      	cmp	lr, r1
    251c:	f240 835d 	bls.w	2bda <am_hal_iom_workaround_word_write+0x71e>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    2520:	0040      	lsls	r0, r0, #1
    2522:	fb03 f300 	mul.w	r3, r3, r0
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    2526:	fbb7 faf3 	udiv	sl, r7, r3
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    252a:	fb03 771a 	mls	r7, r3, sl, r7
    252e:	085b      	lsrs	r3, r3, #1
    2530:	42bb      	cmp	r3, r7
    2532:	bf2c      	ite	cs
    2534:	4652      	movcs	r2, sl
    2536:	f10a 0201 	addcc.w	r2, sl, #1
    for ( ui32Fsel = 1; ui32Fsel < 8; ui32Fsel++ )
    253a:	428a      	cmp	r2, r1
    253c:	bf8c      	ite	hi
    253e:	f04f 0c03 	movhi.w	ip, #3
    2542:	f04f 0c02 	movls.w	ip, #2
    ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ,
    2546:	f3c5 21c0 	ubfx	r1, r5, #11, #1
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    254a:	0048      	lsls	r0, r1, #1
    ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ,
    254c:	f3c5 2b02 	ubfx	fp, r5, #8, #3
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    2550:	f10b 33ff 	add.w	r3, fp, #4294967295
    2554:	1c47      	adds	r7, r0, #1
    ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ,
    2556:	f3c5 3200 	ubfx	r2, r5, #12, #1
    255a:	0e29      	lsrs	r1, r5, #24
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    255c:	f8df b290 	ldr.w	fp, [pc, #656]	; 27f0 <am_hal_iom_workaround_word_write+0x334>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    2560:	fa07 f003 	lsl.w	r0, r7, r3
    2564:	fb01 f102 	mul.w	r1, r1, r2
    2568:	fb01 0300 	mla	r3, r1, r0, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    256c:	0859      	lsrs	r1, r3, #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    256e:	fbbb fef3 	udiv	lr, fp, r3
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    2572:	fb03 b01e 	mls	r0, r3, lr, fp
    2576:	4281      	cmp	r1, r0
    2578:	bf2c      	ite	cs
    257a:	4677      	movcs	r7, lr
    257c:	f10e 0701 	addcc.w	r7, lr, #1
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32HiClkCfg;
    2580:	4a9a      	ldr	r2, [pc, #616]	; (27ec <am_hal_iom_workaround_word_write+0x330>)
    ui32DelayTime = ((2 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32NormalFreq * 3));
    2582:	499d      	ldr	r1, [pc, #628]	; (27f8 <am_hal_iom_workaround_word_write+0x33c>)
    ui32HiClkCfg = ((ui32ClkCfg & (~AM_REG_IOMSTR_CLKCFG_FSEL_M)) |
    2584:	f425 6ae0 	bic.w	sl, r5, #1792	; 0x700
    ui32DelayTime = ((2 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32NormalFreq * 3));
    2588:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    ui32HiClkCfg = ((ui32ClkCfg & (~AM_REG_IOMSTR_CLKCFG_FSEL_M)) |
    258c:	ea4a 270c 	orr.w	r7, sl, ip, lsl #8
    ((void (*)(uint32_t)) 0x0800009d)(ui32DelayTime);
    2590:	fbb1 f0f3 	udiv	r0, r1, r3
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32HiClkCfg;
    2594:	6017      	str	r7, [r2, #0]
    ((void (*)(uint32_t)) 0x0800009d)(ui32DelayTime);
    2596:	4b99      	ldr	r3, [pc, #612]	; (27fc <am_hal_iom_workaround_word_write+0x340>)
    2598:	4798      	blx	r3
    ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ,
    259a:	f3c7 22c0 	ubfx	r2, r7, #11, #1
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    259e:	0050      	lsls	r0, r2, #1
    ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ,
    25a0:	f3c7 2c01 	ubfx	ip, r7, #8, #2
    25a4:	f3c7 3100 	ubfx	r1, r7, #12, #1
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    25a8:	3001      	adds	r0, #1
    25aa:	f10c 33ff 	add.w	r3, ip, #4294967295
    ui32Freq = compute_freq(AM_HAL_CLKGEN_FREQ_MAX_HZ,
    25ae:	0e3f      	lsrs	r7, r7, #24
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    25b0:	fb07 f701 	mul.w	r7, r7, r1
    25b4:	4098      	lsls	r0, r3
    25b6:	fb07 0000 	mla	r0, r7, r0, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    25ba:	0842      	lsrs	r2, r0, #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    25bc:	fbbb f7f0 	udiv	r7, fp, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    25c0:	fb00 bb17 	mls	fp, r0, r7, fp
    25c4:	455a      	cmp	r2, fp
    25c6:	bf38      	it	cc
    25c8:	3701      	addcc	r7, #1
    am_hal_debug_assert_msg(ui32HiFreq > 0, "Invalid Hi Frequency for IOM.");
    25ca:	2f00      	cmp	r7, #0
    25cc:	f000 82ad 	beq.w	2b2a <am_hal_iom_workaround_word_write+0x66e>
    uint32_t ui32ClkCfg = AM_REGn(IOMSTR, 4, CLKCFG);
    25d0:	4b86      	ldr	r3, [pc, #536]	; (27ec <am_hal_iom_workaround_word_write+0x330>)
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    25d2:	4a87      	ldr	r2, [pc, #540]	; (27f0 <am_hal_iom_workaround_word_write+0x334>)
    uint32_t ui32ClkCfg = AM_REGn(IOMSTR, 4, CLKCFG);
    25d4:	681b      	ldr	r3, [r3, #0]
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    25d6:	f8df e234 	ldr.w	lr, [pc, #564]	; 280c <am_hal_iom_workaround_word_write+0x350>
    25da:	f3c3 3000 	ubfx	r0, r3, #12, #1
    25de:	f3c3 21c0 	ubfx	r1, r3, #11, #1
    25e2:	0e1b      	lsrs	r3, r3, #24
    25e4:	fb03 f300 	mul.w	r3, r3, r0
    25e8:	0049      	lsls	r1, r1, #1
    25ea:	3101      	adds	r1, #1
    25ec:	3301      	adds	r3, #1
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    25ee:	fb03 f001 	mul.w	r0, r3, r1
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    25f2:	ea4f 0b50 	mov.w	fp, r0, lsr #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    25f6:	fbb2 fcf0 	udiv	ip, r2, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    25fa:	fb00 201c 	mls	r0, r0, ip, r2
    25fe:	4583      	cmp	fp, r0
    2600:	bf2c      	ite	cs
    2602:	46e3      	movcs	fp, ip
    2604:	f10c 0b01 	addcc.w	fp, ip, #1
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    2608:	45f3      	cmp	fp, lr
    260a:	f240 82e4 	bls.w	2bd6 <am_hal_iom_workaround_word_write+0x71a>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    260e:	0048      	lsls	r0, r1, #1
    2610:	fb03 f000 	mul.w	r0, r3, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    2614:	ea4f 0b50 	mov.w	fp, r0, lsr #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    2618:	fbb2 fcf0 	udiv	ip, r2, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    261c:	fb00 201c 	mls	r0, r0, ip, r2
    2620:	4583      	cmp	fp, r0
    2622:	bf2c      	ite	cs
    2624:	46e3      	movcs	fp, ip
    2626:	f10c 0b01 	addcc.w	fp, ip, #1
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    262a:	45f3      	cmp	fp, lr
    262c:	f240 82d8 	bls.w	2be0 <am_hal_iom_workaround_word_write+0x724>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    2630:	0088      	lsls	r0, r1, #2
    2632:	fb03 f000 	mul.w	r0, r3, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    2636:	ea4f 0b50 	mov.w	fp, r0, lsr #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    263a:	fbb2 fcf0 	udiv	ip, r2, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    263e:	fb00 201c 	mls	r0, r0, ip, r2
    2642:	4583      	cmp	fp, r0
    2644:	bf2c      	ite	cs
    2646:	46e3      	movcs	fp, ip
    2648:	f10c 0b01 	addcc.w	fp, ip, #1
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    264c:	45f3      	cmp	fp, lr
    264e:	f240 82c9 	bls.w	2be4 <am_hal_iom_workaround_word_write+0x728>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    2652:	00c8      	lsls	r0, r1, #3
    2654:	fb03 f000 	mul.w	r0, r3, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    2658:	ea4f 0b50 	mov.w	fp, r0, lsr #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    265c:	fbb2 fcf0 	udiv	ip, r2, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    2660:	fb00 201c 	mls	r0, r0, ip, r2
    2664:	4583      	cmp	fp, r0
    2666:	bf2c      	ite	cs
    2668:	46e3      	movcs	fp, ip
    266a:	f10c 0b01 	addcc.w	fp, ip, #1
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    266e:	45f3      	cmp	fp, lr
    2670:	f240 82ba 	bls.w	2be8 <am_hal_iom_workaround_word_write+0x72c>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    2674:	0108      	lsls	r0, r1, #4
    2676:	fb03 f000 	mul.w	r0, r3, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    267a:	ea4f 0b50 	mov.w	fp, r0, lsr #1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    267e:	fbb2 fcf0 	udiv	ip, r2, r0
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    2682:	fb00 201c 	mls	r0, r0, ip, r2
    2686:	4583      	cmp	fp, r0
    2688:	bf2c      	ite	cs
    268a:	46e3      	movcs	fp, ip
    268c:	f10c 0b01 	addcc.w	fp, ip, #1
        if ( ui32Freq <= maxFreq && ui32Freq != 0 )
    2690:	45f3      	cmp	fp, lr
    2692:	f240 82ab 	bls.w	2bec <am_hal_iom_workaround_word_write+0x730>
    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
    2696:	0149      	lsls	r1, r1, #5
    2698:	fb03 f301 	mul.w	r3, r3, r1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
    269c:	fbb2 f0f3 	udiv	r0, r2, r3
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
    26a0:	fb03 2210 	mls	r2, r3, r0, r2
    26a4:	085b      	lsrs	r3, r3, #1
    26a6:	4293      	cmp	r3, r2
    26a8:	bf2c      	ite	cs
    26aa:	4601      	movcs	r1, r0
    26ac:	1c41      	addcc	r1, r0, #1
    for ( ui32Fsel = 1; ui32Fsel < 8; ui32Fsel++ )
    26ae:	4571      	cmp	r1, lr
    26b0:	bf8c      	ite	hi
    26b2:	2007      	movhi	r0, #7
    26b4:	2006      	movls	r0, #6
    if ( ui32Options & AM_HAL_IOM_RAW )
    26b6:	9b01      	ldr	r3, [sp, #4]
    ui32LowClkCfg = ((ui32ClkCfg & (~AM_REG_IOMSTR_CLKCFG_FSEL_M)) |
    26b8:	ea4a 2200 	orr.w	r2, sl, r0, lsl #8
    if ( ui32Options & AM_HAL_IOM_RAW )
    26bc:	f013 4080 	ands.w	r0, r3, #1073741824	; 0x40000000
    ui32LowClkCfg = ((ui32ClkCfg & (~AM_REG_IOMSTR_CLKCFG_FSEL_M)) |
    26c0:	9203      	str	r2, [sp, #12]
    if ( ui32Options & AM_HAL_IOM_RAW )
    26c2:	f000 813d 	beq.w	2940 <am_hal_iom_workaround_word_write+0x484>
        if ( pui32Data[0] & 0x80 )
    26c6:	f8d8 1000 	ldr.w	r1, [r8]
        ui32DelayTime = ((27 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32HiFreq * 3));
    26ca:	4a4d      	ldr	r2, [pc, #308]	; (2800 <am_hal_iom_workaround_word_write+0x344>)
        if ( pui32Data[0] & 0x80 )
    26cc:	f001 0380 	and.w	r3, r1, #128	; 0x80
            ui32FirstWord = 0x00000000;
    26d0:	2b00      	cmp	r3, #0
        ui32DelayTime = ((27 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32HiFreq * 3));
    26d2:	eb07 0047 	add.w	r0, r7, r7, lsl #1
    26d6:	fbb2 f1f0 	udiv	r1, r2, r0
    26da:	9107      	str	r1, [sp, #28]
            ui32FirstWord = 0x00000000;
    26dc:	bf0b      	itete	eq
    26de:	2100      	moveq	r1, #0
    26e0:	2101      	movne	r1, #1
    26e2:	f06f 07ff 	mvneq.w	r7, #255	; 0xff
    26e6:	2700      	movne	r7, #0
    26e8:	9106      	str	r1, [sp, #24]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    26ea:	4b3f      	ldr	r3, [pc, #252]	; (27e8 <am_hal_iom_workaround_word_write+0x32c>)
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    26ec:	4a45      	ldr	r2, [pc, #276]	; (2804 <am_hal_iom_workaround_word_write+0x348>)
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    26ee:	6818      	ldr	r0, [r3, #0]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    26f0:	6813      	ldr	r3, [r2, #0]
    ui32NumBytes += 4;
    26f2:	f109 0104 	add.w	r1, r9, #4
    ui32TransferSize = (ui32NumBytes <= ui32MaxFifoSize ? ui32NumBytes :
    26f6:	428e      	cmp	r6, r1
    26f8:	bf28      	it	cs
    26fa:	460e      	movcs	r6, r1
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    26fc:	f010 0f08 	tst.w	r0, #8
    2700:	bf14      	ite	ne
    2702:	2040      	movne	r0, #64	; 0x40
    2704:	2080      	moveq	r0, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    2706:	1ac2      	subs	r2, r0, r3
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2708:	f002 00fc 	and.w	r0, r2, #252	; 0xfc
    270c:	2803      	cmp	r0, #3
    ui32NumBytes += 4;
    270e:	9104      	str	r1, [sp, #16]
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2710:	f240 8204 	bls.w	2b1c <am_hal_iom_workaround_word_write+0x660>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2714:	493c      	ldr	r1, [pc, #240]	; (2808 <am_hal_iom_workaround_word_write+0x34c>)
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2716:	4b34      	ldr	r3, [pc, #208]	; (27e8 <am_hal_iom_workaround_word_write+0x32c>)
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2718:	600f      	str	r7, [r1, #0]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    271a:	681f      	ldr	r7, [r3, #0]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    271c:	f853 2c1c 	ldr.w	r2, [r3, #-28]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2720:	f017 0f08 	tst.w	r7, #8
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    2724:	f1a3 001c 	sub.w	r0, r3, #28
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2728:	bf14      	ite	ne
    272a:	2040      	movne	r0, #64	; 0x40
    272c:	2080      	moveq	r0, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    272e:	1a81      	subs	r1, r0, r2
    am_hal_iom_fifo_write(WORKAROUND_IOM, pui32Data, ui32TransferSize - 4);
    2730:	3e04      	subs	r6, #4
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2732:	f001 09fc 	and.w	r9, r1, #252	; 0xfc
    2736:	454e      	cmp	r6, r9
    2738:	f200 81e9 	bhi.w	2b0e <am_hal_iom_workaround_word_write+0x652>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    273c:	2e00      	cmp	r6, #0
    273e:	d067      	beq.n	2810 <am_hal_iom_workaround_word_write+0x354>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2740:	4643      	mov	r3, r8
    2742:	ea6f 0c08 	mvn.w	ip, r8
    2746:	f853 7b04 	ldr.w	r7, [r3], #4
    274a:	4a2f      	ldr	r2, [pc, #188]	; (2808 <am_hal_iom_workaround_word_write+0x34c>)
    274c:	44c4      	add	ip, r8
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    274e:	eba3 0b08 	sub.w	fp, r3, r8
    2752:	44b4      	add	ip, r6
    2754:	455e      	cmp	r6, fp
    2756:	f3cc 0082 	ubfx	r0, ip, #2, #3
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    275a:	6017      	str	r7, [r2, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    275c:	d958      	bls.n	2810 <am_hal_iom_workaround_word_write+0x354>
    275e:	b320      	cbz	r0, 27aa <am_hal_iom_workaround_word_write+0x2ee>
    2760:	2801      	cmp	r0, #1
    2762:	d01b      	beq.n	279c <am_hal_iom_workaround_word_write+0x2e0>
    2764:	2802      	cmp	r0, #2
    2766:	d016      	beq.n	2796 <am_hal_iom_workaround_word_write+0x2da>
    2768:	2803      	cmp	r0, #3
    276a:	d011      	beq.n	2790 <am_hal_iom_workaround_word_write+0x2d4>
    276c:	2804      	cmp	r0, #4
    276e:	d00c      	beq.n	278a <am_hal_iom_workaround_word_write+0x2ce>
    2770:	2805      	cmp	r0, #5
    2772:	d007      	beq.n	2784 <am_hal_iom_workaround_word_write+0x2c8>
    2774:	2806      	cmp	r0, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2776:	bf1c      	itt	ne
    2778:	f853 0b04 	ldrne.w	r0, [r3], #4
    277c:	6010      	strne	r0, [r2, #0]
    277e:	f853 1b04 	ldr.w	r1, [r3], #4
    2782:	6011      	str	r1, [r2, #0]
    2784:	f853 7b04 	ldr.w	r7, [r3], #4
    2788:	6017      	str	r7, [r2, #0]
    278a:	f853 0b04 	ldr.w	r0, [r3], #4
    278e:	6010      	str	r0, [r2, #0]
    2790:	f853 1b04 	ldr.w	r1, [r3], #4
    2794:	6011      	str	r1, [r2, #0]
    2796:	f853 7b04 	ldr.w	r7, [r3], #4
    279a:	6017      	str	r7, [r2, #0]
    279c:	f853 0b04 	ldr.w	r0, [r3], #4
    27a0:	6010      	str	r0, [r2, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    27a2:	eba3 0a08 	sub.w	sl, r3, r8
    27a6:	4556      	cmp	r6, sl
    27a8:	d932      	bls.n	2810 <am_hal_iom_workaround_word_write+0x354>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    27aa:	469e      	mov	lr, r3
    27ac:	3320      	adds	r3, #32
    27ae:	f85e 1b04 	ldr.w	r1, [lr], #4
    27b2:	6011      	str	r1, [r2, #0]
    27b4:	f853 7c1c 	ldr.w	r7, [r3, #-28]
    27b8:	6017      	str	r7, [r2, #0]
    27ba:	f8de 0004 	ldr.w	r0, [lr, #4]
    27be:	6010      	str	r0, [r2, #0]
    27c0:	f853 1c14 	ldr.w	r1, [r3, #-20]
    27c4:	6011      	str	r1, [r2, #0]
    27c6:	f853 7c10 	ldr.w	r7, [r3, #-16]
    27ca:	6017      	str	r7, [r2, #0]
    27cc:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    27d0:	6010      	str	r0, [r2, #0]
    27d2:	f853 1c08 	ldr.w	r1, [r3, #-8]
    27d6:	6011      	str	r1, [r2, #0]
    27d8:	f853 7c04 	ldr.w	r7, [r3, #-4]
    27dc:	6017      	str	r7, [r2, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    27de:	eba3 0008 	sub.w	r0, r3, r8
    27e2:	4286      	cmp	r6, r0
    27e4:	d8e1      	bhi.n	27aa <am_hal_iom_workaround_word_write+0x2ee>
    27e6:	e013      	b.n	2810 <am_hal_iom_workaround_word_write+0x354>
    27e8:	5000811c 	.word	0x5000811c
    27ec:	5000810c 	.word	0x5000810c
    27f0:	02dc6c00 	.word	0x02dc6c00
    27f4:	00f42400 	.word	0x00f42400
    27f8:	05b8d800 	.word	0x05b8d800
    27fc:	0800009d 	.word	0x0800009d
    2800:	4d3f6400 	.word	0x4d3f6400
    2804:	50008100 	.word	0x50008100
    2808:	50008000 	.word	0x50008000
    280c:	000f4240 	.word	0x000f4240
        if ( g_IOMPads[index].channel == ui32ChipSelect )
    2810:	2c00      	cmp	r4, #0
    2812:	f000 8198 	beq.w	2b46 <am_hal_iom_workaround_word_write+0x68a>
    2816:	2c01      	cmp	r4, #1
    2818:	f000 80a3 	beq.w	2962 <am_hal_iom_workaround_word_write+0x4a6>
    281c:	2c02      	cmp	r4, #2
    281e:	f000 80b8 	beq.w	2992 <am_hal_iom_workaround_word_write+0x4d6>
    2822:	2c03      	cmp	r4, #3
    2824:	f000 80c6 	beq.w	29b4 <am_hal_iom_workaround_word_write+0x4f8>
    2828:	2c04      	cmp	r4, #4
    282a:	f000 811e 	beq.w	2a6a <am_hal_iom_workaround_word_write+0x5ae>
    282e:	2c05      	cmp	r4, #5
    2830:	f000 8133 	beq.w	2a9a <am_hal_iom_workaround_word_write+0x5de>
    2834:	2c06      	cmp	r4, #6
    2836:	f000 8148 	beq.w	2aca <am_hal_iom_workaround_word_write+0x60e>
    283a:	2c07      	cmp	r4, #7
    283c:	f000 8156 	beq.w	2aec <am_hal_iom_workaround_word_write+0x630>
    am_hal_debug_assert(0xDEADBEEF != ui32IOMGPIO);
    2840:	2200      	movs	r2, #0
    2842:	48cc      	ldr	r0, [pc, #816]	; (2b74 <am_hal_iom_workaround_word_write+0x6b8>)
    ui32CSPadregVal = *pui32CSPadreg;
    2844:	4fcc      	ldr	r7, [pc, #816]	; (2b78 <am_hal_iom_workaround_word_write+0x6bc>)
    am_hal_debug_assert(0xDEADBEEF != ui32IOMGPIO);
    2846:	f240 512d 	movw	r1, #1325	; 0x52d
    284a:	f7ff f86d 	bl	1928 <am_hal_debug_error>
    am_hal_gpio_out_bit_set(ui32IOMGPIO);
    284e:	48cb      	ldr	r0, [pc, #812]	; (2b7c <am_hal_iom_workaround_word_write+0x6c0>)
    ui32CSPadregVal = *pui32CSPadreg;
    2850:	683a      	ldr	r2, [r7, #0]
    2852:	9202      	str	r2, [sp, #8]
    am_hal_gpio_out_bit_set(ui32IOMGPIO);
    2854:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    pui32CSPadreg = (volatile uint32_t *)AM_HAL_GPIO_PADREG(ui32IOMGPIO);
    2858:	46bb      	mov	fp, r7
    am_hal_gpio_out_bit_set(ui32IOMGPIO);
    285a:	6003      	str	r3, [r0, #0]
    am_hal_gpio_pin_config(WORKAROUND_IOM_MOSI_PIN, WORKAROUND_IOM_MOSI_CFG | AM_HAL_PIN_DIR_INPUT);
    285c:	f7ff f996 	bl	1b8c <am_hal_interrupt_master_disable>
    2860:	4ec7      	ldr	r6, [pc, #796]	; (2b80 <am_hal_iom_workaround_word_write+0x6c4>)
    2862:	f8df 9360 	ldr.w	r9, [pc, #864]	; 2bc4 <am_hal_iom_workaround_word_write+0x708>
    2866:	900a      	str	r0, [sp, #40]	; 0x28
    2868:	2173      	movs	r1, #115	; 0x73
    286a:	6031      	str	r1, [r6, #0]
    286c:	f8d9 0000 	ldr.w	r0, [r9]
    2870:	f8df 8354 	ldr.w	r8, [pc, #852]	; 2bc8 <am_hal_iom_workaround_word_write+0x70c>
    2874:	9105      	str	r1, [sp, #20]
    2876:	f420 22e0 	bic.w	r2, r0, #458752	; 0x70000
    287a:	f8c9 2000 	str.w	r2, [r9]
    287e:	f8d8 3000 	ldr.w	r3, [r8]
    2882:	4fc0      	ldr	r7, [pc, #768]	; (2b84 <am_hal_iom_workaround_word_write+0x6c8>)
    2884:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    2888:	f041 002a 	orr.w	r0, r1, #42	; 0x2a
    288c:	f8c8 0000 	str.w	r0, [r8]
    2890:	683a      	ldr	r2, [r7, #0]
    2892:	f04f 0a00 	mov.w	sl, #0
    2896:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
    289a:	603b      	str	r3, [r7, #0]
    289c:	f8c6 a000 	str.w	sl, [r6]
    28a0:	980a      	ldr	r0, [sp, #40]	; 0x28
    28a2:	f7ff f977 	bl	1b94 <am_hal_interrupt_master_set>
    ui32Command |= ui32Options & 0x5C00FF00;
    28a6:	9901      	ldr	r1, [sp, #4]
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    28a8:	0424      	lsls	r4, r4, #16
    28aa:	f404 20e0 	and.w	r0, r4, #458752	; 0x70000
    ui32Command |= ui32Options & 0x5C00FF00;
    28ae:	f021 4323 	bic.w	r3, r1, #2734686208	; 0xa3000000
    ui32Command |= (ui32NumBytes & 0xFF);
    28b2:	9904      	ldr	r1, [sp, #16]
    ui32Command |= ui32Options & 0x5C00FF00;
    28b4:	f003 24ff 	and.w	r4, r3, #4278255360	; 0xff00ff00
    28b8:	f040 4280 	orr.w	r2, r0, #1073741824	; 0x40000000
    28bc:	4322      	orrs	r2, r4
    ui32Command |= (ui32NumBytes & 0xFF);
    28be:	b2c8      	uxtb	r0, r1
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    28c0:	03cc      	lsls	r4, r1, #15
    AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    28c2:	9b05      	ldr	r3, [sp, #20]
    28c4:	6033      	str	r3, [r6, #0]
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    28c6:	f004 61f0 	and.w	r1, r4, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
    28ca:	4302      	orrs	r2, r0
    28cc:	430a      	orrs	r2, r1
    AM_REGn(GPIO, 0, PADKEY) = AM_REG_GPIO_PADKEY_KEYVAL;
    28ce:	9305      	str	r3, [sp, #20]
    ui32Command |= ui32Options & 0x5C00FF00;
    28d0:	9204      	str	r2, [sp, #16]
    ui32Critical = am_hal_interrupt_master_disable();
    28d2:	f7ff f95b 	bl	1b8c <am_hal_interrupt_master_disable>
    28d6:	9001      	str	r0, [sp, #4]
    AM_REGn(IOMSTR, WORKAROUND_IOM, CMD) = ui32Command;
    28d8:	48ab      	ldr	r0, [pc, #684]	; (2b88 <am_hal_iom_workaround_word_write+0x6cc>)
    28da:	9a04      	ldr	r2, [sp, #16]
    28dc:	6002      	str	r2, [r0, #0]
    ((void (*)(uint32_t)) 0x0800009d)(ui32DelayTime);
    28de:	4cab      	ldr	r4, [pc, #684]	; (2b8c <am_hal_iom_workaround_word_write+0x6d0>)
    28e0:	9807      	ldr	r0, [sp, #28]
    28e2:	47a0      	blx	r4
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32LowClkCfg;
    28e4:	4baa      	ldr	r3, [pc, #680]	; (2b90 <am_hal_iom_workaround_word_write+0x6d4>)
    28e6:	9c03      	ldr	r4, [sp, #12]
    iom_workaround_loop(ui32CSPadregVal, pui32CSPadreg, bRising);
    28e8:	9a06      	ldr	r2, [sp, #24]
    28ea:	9802      	ldr	r0, [sp, #8]
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32LowClkCfg;
    28ec:	601c      	str	r4, [r3, #0]
    iom_workaround_loop(ui32CSPadregVal, pui32CSPadreg, bRising);
    28ee:	4659      	mov	r1, fp
    28f0:	f7ff f954 	bl	1b9c <iom_workaround_loop>
    AM_REGn(IOMSTR, WORKAROUND_IOM, CLKCFG) = ui32ClkCfg;
    28f4:	49a6      	ldr	r1, [pc, #664]	; (2b90 <am_hal_iom_workaround_word_write+0x6d4>)
    28f6:	600d      	str	r5, [r1, #0]
    am_hal_gpio_pin_config(WORKAROUND_IOM_MOSI_PIN, WORKAROUND_IOM_MOSI_CFG);
    28f8:	f7ff f948 	bl	1b8c <am_hal_interrupt_master_disable>
    28fc:	9d05      	ldr	r5, [sp, #20]
    28fe:	900b      	str	r0, [sp, #44]	; 0x2c
    2900:	6035      	str	r5, [r6, #0]
    2902:	f8d9 0000 	ldr.w	r0, [r9]
    2906:	f420 22e0 	bic.w	r2, r0, #458752	; 0x70000
    290a:	f8c9 2000 	str.w	r2, [r9]
    290e:	f8d8 3000 	ldr.w	r3, [r8]
    2912:	f023 04ff 	bic.w	r4, r3, #255	; 0xff
    2916:	f044 0128 	orr.w	r1, r4, #40	; 0x28
    291a:	f8c8 1000 	str.w	r1, [r8]
    291e:	683d      	ldr	r5, [r7, #0]
    2920:	f025 00ff 	bic.w	r0, r5, #255	; 0xff
    2924:	6038      	str	r0, [r7, #0]
    2926:	f8c6 a000 	str.w	sl, [r6]
    292a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    292c:	f7ff f932 	bl	1b94 <am_hal_interrupt_master_set>
    am_hal_interrupt_master_set(ui32Critical);
    2930:	9801      	ldr	r0, [sp, #4]
    2932:	f7ff f92f 	bl	1b94 <am_hal_interrupt_master_set>
    AM_REGn(GPIO, 0, PADKEY) = 0;
    2936:	f8c6 a000 	str.w	sl, [r6]
}
    293a:	b00d      	add	sp, #52	; 0x34
    293c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ui32FirstWord = ((ui32Options & 0xFF00) << 16);
    2940:	041a      	lsls	r2, r3, #16
        ui32DelayTime = ((19 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32HiFreq * 3));
    2942:	eb07 0a47 	add.w	sl, r7, r7, lsl #1
    2946:	4f93      	ldr	r7, [pc, #588]	; (2b94 <am_hal_iom_workaround_word_write+0x6d8>)
    2948:	fbb7 f1fa 	udiv	r1, r7, sl
        if ( ui32FirstWord & 0x80000000 )
    294c:	f012 477f 	ands.w	r7, r2, #4278190080	; 0xff000000
        ui32DelayTime = ((19 * AM_HAL_CLKGEN_FREQ_MAX_HZ) / (ui32HiFreq * 3));
    2950:	9107      	str	r1, [sp, #28]
        if ( ui32FirstWord & 0x80000000 )
    2952:	f100 813d 	bmi.w	2bd0 <am_hal_iom_workaround_word_write+0x714>
            ui32FirstWord |= 0x00FFFF00;
    2956:	f447 037f 	orr.w	r3, r7, #16711680	; 0xff0000
    295a:	f443 477f 	orr.w	r7, r3, #65280	; 0xff00
            bRising = false;
    295e:	9006      	str	r0, [sp, #24]
    2960:	e6c3      	b.n	26ea <am_hal_iom_workaround_word_write+0x22e>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2962:	4a8d      	ldr	r2, [pc, #564]	; (2b98 <am_hal_iom_workaround_word_write+0x6dc>)
    2964:	6813      	ldr	r3, [r2, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    2966:	f3c3 46c2 	ubfx	r6, r3, #19, #3
    296a:	2e04      	cmp	r6, #4
    296c:	f000 814a 	beq.w	2c04 <am_hal_iom_workaround_word_write+0x748>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2970:	3214      	adds	r2, #20
    2972:	6811      	ldr	r1, [r2, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    2974:	f3c1 27c2 	ubfx	r7, r1, #11, #3
    2978:	2f05      	cmp	r7, #5
    297a:	f47f af61 	bne.w	2840 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    297e:	f04f 0825 	mov.w	r8, #37	; 0x25
    2982:	4693      	mov	fp, r2
    2984:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    2986:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    298a:	f04f 0a08 	mov.w	sl, #8
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    298e:	2624      	movs	r6, #36	; 0x24
    2990:	e027      	b.n	29e2 <am_hal_iom_workaround_word_write+0x526>
    2992:	4982      	ldr	r1, [pc, #520]	; (2b9c <am_hal_iom_workaround_word_write+0x6e0>)
    2994:	680f      	ldr	r7, [r1, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    2996:	f3c7 20c2 	ubfx	r0, r7, #11, #3
    299a:	2806      	cmp	r0, #6
    299c:	f47f af50 	bne.w	2840 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    29a0:	f04f 0829 	mov.w	r8, #41	; 0x29
    29a4:	468b      	mov	fp, r1
    29a6:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    29a8:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    29ac:	f04f 0a08 	mov.w	sl, #8
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    29b0:	2628      	movs	r6, #40	; 0x28
    29b2:	e016      	b.n	29e2 <am_hal_iom_workaround_word_write+0x526>
    29b4:	4f78      	ldr	r7, [pc, #480]	; (2b98 <am_hal_iom_workaround_word_write+0x6dc>)
    29b6:	6838      	ldr	r0, [r7, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    29b8:	f3c0 22c2 	ubfx	r2, r0, #11, #3
    29bc:	2a04      	cmp	r2, #4
    29be:	f000 812b 	beq.w	2c18 <am_hal_iom_workaround_word_write+0x75c>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    29c2:	371c      	adds	r7, #28
    29c4:	683b      	ldr	r3, [r7, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    29c6:	f3c3 26c2 	ubfx	r6, r3, #11, #3
    29ca:	2e04      	cmp	r6, #4
    29cc:	f47f af38 	bne.w	2840 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    29d0:	f04f 082d 	mov.w	r8, #45	; 0x2d
    29d4:	46bb      	mov	fp, r7
    29d6:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    29d8:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    29dc:	f04f 0a08 	mov.w	sl, #8
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    29e0:	262c      	movs	r6, #44	; 0x2c
    am_hal_gpio_out_bit_set(ui32IOMGPIO);
    29e2:	ea4f 01d8 	mov.w	r1, r8, lsr #3
    29e6:	f001 0e04 	and.w	lr, r1, #4
    29ea:	f00c 001f 	and.w	r0, ip, #31
    29ee:	4b6c      	ldr	r3, [pc, #432]	; (2ba0 <am_hal_iom_workaround_word_write+0x6e4>)
    ui32CSPadregVal = *pui32CSPadreg;
    29f0:	f8db 7000 	ldr.w	r7, [fp]
    29f4:	9702      	str	r7, [sp, #8]
    am_hal_gpio_out_bit_set(ui32IOMGPIO);
    29f6:	2201      	movs	r2, #1
    29f8:	4082      	lsls	r2, r0
    29fa:	f84e 2003 	str.w	r2, [lr, r3]
    am_hal_gpio_pin_config(ui32IOMGPIO, AM_HAL_GPIO_OUTPUT);
    29fe:	f7ff f8c5 	bl	1b8c <am_hal_interrupt_master_disable>
    2a02:	4f5f      	ldr	r7, [pc, #380]	; (2b80 <am_hal_iom_workaround_word_write+0x6c4>)
    2a04:	9009      	str	r0, [sp, #36]	; 0x24
    2a06:	ea4f 0c58 	mov.w	ip, r8, lsr #1
    2a0a:	f00c 017c 	and.w	r1, ip, #124	; 0x7c
    2a0e:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 2bcc <am_hal_iom_workaround_word_write+0x710>
    2a12:	2073      	movs	r0, #115	; 0x73
    2a14:	6038      	str	r0, [r7, #0]
    2a16:	ea4f 0288 	mov.w	r2, r8, lsl #2
    2a1a:	f002 031c 	and.w	r3, r2, #28
    2a1e:	f851 800e 	ldr.w	r8, [r1, lr]
    2a22:	4860      	ldr	r0, [pc, #384]	; (2ba4 <am_hal_iom_workaround_word_write+0x6e8>)
    2a24:	2207      	movs	r2, #7
    2a26:	409a      	lsls	r2, r3
    2a28:	f04f 0c02 	mov.w	ip, #2
    2a2c:	ea28 0202 	bic.w	r2, r8, r2
    2a30:	fa0c f303 	lsl.w	r3, ip, r3
    2a34:	4313      	orrs	r3, r2
    2a36:	f841 300e 	str.w	r3, [r1, lr]
    2a3a:	f8db 1000 	ldr.w	r1, [fp]
    2a3e:	ea6f 0909 	mvn.w	r9, r9
    2a42:	f04f 0e18 	mov.w	lr, #24
    2a46:	ea01 0809 	and.w	r8, r1, r9
    2a4a:	fa0e f20a 	lsl.w	r2, lr, sl
    2a4e:	ea42 0308 	orr.w	r3, r2, r8
    2a52:	f8cb 3000 	str.w	r3, [fp]
    2a56:	5831      	ldr	r1, [r6, r0]
    2a58:	2200      	movs	r2, #0
    2a5a:	ea09 0301 	and.w	r3, r9, r1
    2a5e:	5033      	str	r3, [r6, r0]
    2a60:	603a      	str	r2, [r7, #0]
    2a62:	9809      	ldr	r0, [sp, #36]	; 0x24
    2a64:	f7ff f896 	bl	1b94 <am_hal_interrupt_master_set>
    2a68:	e6f8      	b.n	285c <am_hal_iom_workaround_word_write+0x3a0>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2a6a:	484f      	ldr	r0, [pc, #316]	; (2ba8 <am_hal_iom_workaround_word_write+0x6ec>)
    2a6c:	6802      	ldr	r2, [r0, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    2a6e:	f3c2 43c2 	ubfx	r3, r2, #19, #3
    2a72:	2b06      	cmp	r3, #6
    2a74:	f000 80da 	beq.w	2c2c <am_hal_iom_workaround_word_write+0x770>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2a78:	3024      	adds	r0, #36	; 0x24
    2a7a:	6806      	ldr	r6, [r0, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    2a7c:	f3c6 41c2 	ubfx	r1, r6, #19, #3
    2a80:	2906      	cmp	r1, #6
    2a82:	f47f aedd 	bne.w	2840 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2a86:	f04f 082e 	mov.w	r8, #46	; 0x2e
    2a8a:	4683      	mov	fp, r0
    2a8c:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    2a8e:	f44f 097f 	mov.w	r9, #16711680	; 0xff0000
    2a92:	f04f 0a10 	mov.w	sl, #16
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2a96:	262c      	movs	r6, #44	; 0x2c
    2a98:	e7a3      	b.n	29e2 <am_hal_iom_workaround_word_write+0x526>
    2a9a:	4a43      	ldr	r2, [pc, #268]	; (2ba8 <am_hal_iom_workaround_word_write+0x6ec>)
    2a9c:	6813      	ldr	r3, [r2, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    2a9e:	f3c3 26c2 	ubfx	r6, r3, #11, #3
    2aa2:	2e04      	cmp	r6, #4
    2aa4:	f000 80cc 	beq.w	2c40 <am_hal_iom_workaround_word_write+0x784>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2aa8:	3224      	adds	r2, #36	; 0x24
    2aaa:	6811      	ldr	r1, [r2, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    2aac:	f3c1 67c2 	ubfx	r7, r1, #27, #3
    2ab0:	2f06      	cmp	r7, #6
    2ab2:	f47f aec5 	bne.w	2840 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2ab6:	f04f 082f 	mov.w	r8, #47	; 0x2f
    2aba:	4693      	mov	fp, r2
    2abc:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    2abe:	f04f 497f 	mov.w	r9, #4278190080	; 0xff000000
    2ac2:	f04f 0a18 	mov.w	sl, #24
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2ac6:	262c      	movs	r6, #44	; 0x2c
    2ac8:	e78b      	b.n	29e2 <am_hal_iom_workaround_word_write+0x526>
    2aca:	4938      	ldr	r1, [pc, #224]	; (2bac <am_hal_iom_workaround_word_write+0x6f0>)
    2acc:	680f      	ldr	r7, [r1, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    2ace:	f3c7 60c2 	ubfx	r0, r7, #27, #3
    2ad2:	2804      	cmp	r0, #4
    2ad4:	f47f aeb4 	bne.w	2840 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2ad8:	f04f 0823 	mov.w	r8, #35	; 0x23
    2adc:	468b      	mov	fp, r1
    2ade:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    2ae0:	f04f 497f 	mov.w	r9, #4278190080	; 0xff000000
    2ae4:	f04f 0a18 	mov.w	sl, #24
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2ae8:	2620      	movs	r6, #32
    2aea:	e77a      	b.n	29e2 <am_hal_iom_workaround_word_write+0x526>
    2aec:	4e30      	ldr	r6, [pc, #192]	; (2bb0 <am_hal_iom_workaround_word_write+0x6f4>)
    2aee:	6833      	ldr	r3, [r6, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    2af0:	f3c3 42c2 	ubfx	r2, r3, #19, #3
    2af4:	2a06      	cmp	r2, #6
    2af6:	f47f aea3 	bne.w	2840 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2afa:	f04f 0826 	mov.w	r8, #38	; 0x26
    2afe:	46b3      	mov	fp, r6
    2b00:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    2b02:	f44f 097f 	mov.w	r9, #16711680	; 0xff0000
    2b06:	f04f 0a10 	mov.w	sl, #16
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2b0a:	2624      	movs	r6, #36	; 0x24
    2b0c:	e769      	b.n	29e2 <am_hal_iom_workaround_word_write+0x526>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2b0e:	4a29      	ldr	r2, [pc, #164]	; (2bb4 <am_hal_iom_workaround_word_write+0x6f8>)
    2b10:	4818      	ldr	r0, [pc, #96]	; (2b74 <am_hal_iom_workaround_word_write+0x6b8>)
    2b12:	f640 7145 	movw	r1, #3909	; 0xf45
    2b16:	f7fe ff07 	bl	1928 <am_hal_debug_error>
    2b1a:	e611      	b.n	2740 <am_hal_iom_workaround_word_write+0x284>
    2b1c:	4a25      	ldr	r2, [pc, #148]	; (2bb4 <am_hal_iom_workaround_word_write+0x6f8>)
    2b1e:	4815      	ldr	r0, [pc, #84]	; (2b74 <am_hal_iom_workaround_word_write+0x6b8>)
    2b20:	f640 7145 	movw	r1, #3909	; 0xf45
    2b24:	f7fe ff00 	bl	1928 <am_hal_debug_error>
    2b28:	e5f4      	b.n	2714 <am_hal_iom_workaround_word_write+0x258>
    am_hal_debug_assert_msg(ui32HiFreq > 0, "Invalid Hi Frequency for IOM.");
    2b2a:	4a23      	ldr	r2, [pc, #140]	; (2bb8 <am_hal_iom_workaround_word_write+0x6fc>)
    2b2c:	4811      	ldr	r0, [pc, #68]	; (2b74 <am_hal_iom_workaround_word_write+0x6b8>)
    2b2e:	f240 41e5 	movw	r1, #1253	; 0x4e5
    2b32:	f7fe fef9 	bl	1928 <am_hal_debug_error>
    2b36:	e54b      	b.n	25d0 <am_hal_iom_workaround_word_write+0x114>
    am_hal_debug_assert_msg(ui32NumBytes <= 4091, "SPI transfer too big.");
    2b38:	4a20      	ldr	r2, [pc, #128]	; (2bbc <am_hal_iom_workaround_word_write+0x700>)
    2b3a:	480e      	ldr	r0, [pc, #56]	; (2b74 <am_hal_iom_workaround_word_write+0x6b8>)
    2b3c:	f240 41ba 	movw	r1, #1210	; 0x4ba
    2b40:	f7fe fef2 	bl	1928 <am_hal_debug_error>
    2b44:	e4cd      	b.n	24e2 <am_hal_iom_workaround_word_write+0x26>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2b46:	481e      	ldr	r0, [pc, #120]	; (2bc0 <am_hal_iom_workaround_word_write+0x704>)
    2b48:	6802      	ldr	r2, [r0, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    2b4a:	f3c2 23c2 	ubfx	r3, r2, #11, #3
    2b4e:	2b06      	cmp	r3, #6
    2b50:	d04e      	beq.n	2bf0 <am_hal_iom_workaround_word_write+0x734>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2b52:	3004      	adds	r0, #4
    2b54:	6806      	ldr	r6, [r0, #0]
            if ( ui8FncSelVal == g_IOMPads[index].funcsel )
    2b56:	f3c6 41c2 	ubfx	r1, r6, #19, #3
    2b5a:	2906      	cmp	r1, #6
    2b5c:	f47f ae70 	bne.w	2840 <am_hal_iom_workaround_word_write+0x384>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2b60:	f04f 0822 	mov.w	r8, #34	; 0x22
    2b64:	4683      	mov	fp, r0
    2b66:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    2b68:	f44f 097f 	mov.w	r9, #16711680	; 0xff0000
    2b6c:	f04f 0a10 	mov.w	sl, #16
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2b70:	2620      	movs	r6, #32
    2b72:	e736      	b.n	29e2 <am_hal_iom_workaround_word_write+0x526>
    2b74:	00004bc4 	.word	0x00004bc4
    2b78:	400100ec 	.word	0x400100ec
    2b7c:	40010094 	.word	0x40010094
    2b80:	40010060 	.word	0x40010060
    2b84:	4001010c 	.word	0x4001010c
    2b88:	50008110 	.word	0x50008110
    2b8c:	0800009d 	.word	0x0800009d
    2b90:	5000810c 	.word	0x5000810c
    2b94:	365c0400 	.word	0x365c0400
    2b98:	40010010 	.word	0x40010010
    2b9c:	40010028 	.word	0x40010028
    2ba0:	40010090 	.word	0x40010090
    2ba4:	400100e0 	.word	0x400100e0
    2ba8:	40010008 	.word	0x40010008
    2bac:	40010020 	.word	0x40010020
    2bb0:	40010024 	.word	0x40010024
    2bb4:	00004b90 	.word	0x00004b90
    2bb8:	00004cb4 	.word	0x00004cb4
    2bbc:	00004c9c 	.word	0x00004c9c
    2bc0:	4001001c 	.word	0x4001001c
    2bc4:	40010054 	.word	0x40010054
    2bc8:	4001002c 	.word	0x4001002c
    2bcc:	40010040 	.word	0x40010040
            bRising = true;
    2bd0:	2001      	movs	r0, #1
    2bd2:	9006      	str	r0, [sp, #24]
    2bd4:	e589      	b.n	26ea <am_hal_iom_workaround_word_write+0x22e>
    for ( ui32Fsel = 1; ui32Fsel < 8; ui32Fsel++ )
    2bd6:	2001      	movs	r0, #1
    2bd8:	e56d      	b.n	26b6 <am_hal_iom_workaround_word_write+0x1fa>
    2bda:	f04f 0c01 	mov.w	ip, #1
    2bde:	e4b2      	b.n	2546 <am_hal_iom_workaround_word_write+0x8a>
    2be0:	2002      	movs	r0, #2
    2be2:	e568      	b.n	26b6 <am_hal_iom_workaround_word_write+0x1fa>
    2be4:	2003      	movs	r0, #3
    2be6:	e566      	b.n	26b6 <am_hal_iom_workaround_word_write+0x1fa>
    2be8:	2004      	movs	r0, #4
    2bea:	e564      	b.n	26b6 <am_hal_iom_workaround_word_write+0x1fa>
    2bec:	2005      	movs	r0, #5
    2bee:	e562      	b.n	26b6 <am_hal_iom_workaround_word_write+0x1fa>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2bf0:	f04f 081d 	mov.w	r8, #29
    2bf4:	4683      	mov	fp, r0
    2bf6:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    2bf8:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    2bfc:	f04f 0a08 	mov.w	sl, #8
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2c00:	261c      	movs	r6, #28
    2c02:	e6ee      	b.n	29e2 <am_hal_iom_workaround_word_write+0x526>
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    2c04:	f04f 0a10 	mov.w	sl, #16
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2c08:	f04f 0812 	mov.w	r8, #18
    2c0c:	4693      	mov	fp, r2
    2c0e:	4656      	mov	r6, sl
    2c10:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    2c12:	f44f 097f 	mov.w	r9, #16711680	; 0xff0000
    2c16:	e6e4      	b.n	29e2 <am_hal_iom_workaround_word_write+0x526>
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2c18:	f04f 0811 	mov.w	r8, #17
    2c1c:	46bb      	mov	fp, r7
    2c1e:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    2c20:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    2c24:	f04f 0a08 	mov.w	sl, #8
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2c28:	2610      	movs	r6, #16
    2c2a:	e6da      	b.n	29e2 <am_hal_iom_workaround_word_write+0x526>
    2c2c:	f04f 080a 	mov.w	r8, #10
    2c30:	4683      	mov	fp, r0
    2c32:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    2c34:	f44f 097f 	mov.w	r9, #16711680	; 0xff0000
    2c38:	f04f 0a10 	mov.w	sl, #16
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2c3c:	2608      	movs	r6, #8
    2c3e:	e6d0      	b.n	29e2 <am_hal_iom_workaround_word_write+0x526>
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    2c40:	f04f 0a08 	mov.w	sl, #8
            ui8PadRegVal = ((AM_REGVAL(AM_HAL_GPIO_PADREG(g_IOMPads[index].pad))) &
    2c44:	f04f 0809 	mov.w	r8, #9
    2c48:	4693      	mov	fp, r2
    2c4a:	4656      	mov	r6, sl
    2c4c:	46c4      	mov	ip, r8
                             AM_HAL_GPIO_PADREG_M(g_IOMPads[index].pad)) >>
    2c4e:	f44f 497f 	mov.w	r9, #65280	; 0xff00
    2c52:	e6c6      	b.n	29e2 <am_hal_iom_workaround_word_write+0x526>

00002c54 <am_hal_iom_spi_write_nb.part.6>:
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    2c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    2c58:	f500 24a0 	add.w	r4, r0, #327680	; 0x50000
    2c5c:	3404      	adds	r4, #4
    2c5e:	0324      	lsls	r4, r4, #12
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    2c60:	4606      	mov	r6, r0
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    2c62:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
    g_bIomBusy[ui32Module] = true;
    2c66:	4d6b      	ldr	r5, [pc, #428]	; (2e14 <am_hal_iom_spi_write_nb.part.6+0x1c0>)
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    2c68:	f8dd 9020 	ldr.w	r9, [sp, #32]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    2c6c:	f000 0708 	and.w	r7, r0, #8
                      AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2c70:	2f00      	cmp	r7, #0
    g_bIomBusy[ui32Module] = true;
    2c72:	f04f 0e01 	mov.w	lr, #1
    2c76:	f805 e006 	strb.w	lr, [r5, r6]
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    2c7a:	4617      	mov	r7, r2
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    2c7c:	f240 70ff 	movw	r0, #2047	; 0x7ff
                      AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2c80:	bf15      	itete	ne
    2c82:	223c      	movne	r2, #60	; 0x3c
    2c84:	227c      	moveq	r2, #124	; 0x7c
    2c86:	2540      	movne	r5, #64	; 0x40
    2c88:	2580      	moveq	r5, #128	; 0x80
    if ( WORKAROUND_IOM == ui32Module && isRevB0() )
    2c8a:	2e04      	cmp	r6, #4
am_hal_iom_spi_write_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    2c8c:	4688      	mov	r8, r1
    2c8e:	469a      	mov	sl, r3
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    2c90:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
    if ( WORKAROUND_IOM == ui32Module && isRevB0() )
    2c94:	f000 808f 	beq.w	2db6 <am_hal_iom_spi_write_nb.part.6+0x162>
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2c98:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    2c9c:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
        ui32TransferSize = (ui32NumBytes <= ui32MaxFifoSize ? ui32NumBytes :
    2ca0:	4555      	cmp	r5, sl
    2ca2:	bf28      	it	cs
    2ca4:	4655      	movcs	r5, sl
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2ca6:	f013 0f08 	tst.w	r3, #8
    2caa:	bf14      	ite	ne
    2cac:	2340      	movne	r3, #64	; 0x40
    2cae:	2380      	moveq	r3, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    2cb0:	1a99      	subs	r1, r3, r2
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2cb2:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
    2cb6:	4285      	cmp	r5, r0
    2cb8:	f200 809d 	bhi.w	2df6 <am_hal_iom_spi_write_nb.part.6+0x1a2>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    2cbc:	2d00      	cmp	r5, #0
    2cbe:	d077      	beq.n	2db0 <am_hal_iom_spi_write_nb.part.6+0x15c>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2cc0:	463a      	mov	r2, r7
    2cc2:	43f9      	mvns	r1, r7
    2cc4:	f852 3b04 	ldr.w	r3, [r2], #4
    2cc8:	6023      	str	r3, [r4, #0]
    2cca:	4439      	add	r1, r7
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    2ccc:	1bd0      	subs	r0, r2, r7
    2cce:	4429      	add	r1, r5
    2cd0:	4285      	cmp	r5, r0
    2cd2:	f3c1 0182 	ubfx	r1, r1, #2, #3
    2cd6:	d941      	bls.n	2d5c <am_hal_iom_spi_write_nb.part.6+0x108>
    2cd8:	b319      	cbz	r1, 2d22 <am_hal_iom_spi_write_nb.part.6+0xce>
    2cda:	2901      	cmp	r1, #1
    2cdc:	d01b      	beq.n	2d16 <am_hal_iom_spi_write_nb.part.6+0xc2>
    2cde:	2902      	cmp	r1, #2
    2ce0:	d016      	beq.n	2d10 <am_hal_iom_spi_write_nb.part.6+0xbc>
    2ce2:	2903      	cmp	r1, #3
    2ce4:	d011      	beq.n	2d0a <am_hal_iom_spi_write_nb.part.6+0xb6>
    2ce6:	2904      	cmp	r1, #4
    2ce8:	d00c      	beq.n	2d04 <am_hal_iom_spi_write_nb.part.6+0xb0>
    2cea:	2905      	cmp	r1, #5
    2cec:	d007      	beq.n	2cfe <am_hal_iom_spi_write_nb.part.6+0xaa>
    2cee:	2906      	cmp	r1, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2cf0:	bf1c      	itt	ne
    2cf2:	f852 0b04 	ldrne.w	r0, [r2], #4
    2cf6:	6020      	strne	r0, [r4, #0]
    2cf8:	f852 3b04 	ldr.w	r3, [r2], #4
    2cfc:	6023      	str	r3, [r4, #0]
    2cfe:	f852 0b04 	ldr.w	r0, [r2], #4
    2d02:	6020      	str	r0, [r4, #0]
    2d04:	f852 1b04 	ldr.w	r1, [r2], #4
    2d08:	6021      	str	r1, [r4, #0]
    2d0a:	f852 3b04 	ldr.w	r3, [r2], #4
    2d0e:	6023      	str	r3, [r4, #0]
    2d10:	f852 0b04 	ldr.w	r0, [r2], #4
    2d14:	6020      	str	r0, [r4, #0]
    2d16:	f852 1b04 	ldr.w	r1, [r2], #4
    2d1a:	6021      	str	r1, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    2d1c:	1bd3      	subs	r3, r2, r7
    2d1e:	429d      	cmp	r5, r3
    2d20:	d91c      	bls.n	2d5c <am_hal_iom_spi_write_nb.part.6+0x108>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2d22:	4694      	mov	ip, r2
    2d24:	3220      	adds	r2, #32
    2d26:	f85c 0b04 	ldr.w	r0, [ip], #4
    2d2a:	6020      	str	r0, [r4, #0]
    2d2c:	f852 1c1c 	ldr.w	r1, [r2, #-28]
    2d30:	6021      	str	r1, [r4, #0]
    2d32:	f8dc 3004 	ldr.w	r3, [ip, #4]
    2d36:	6023      	str	r3, [r4, #0]
    2d38:	f852 0c14 	ldr.w	r0, [r2, #-20]
    2d3c:	6020      	str	r0, [r4, #0]
    2d3e:	f852 1c10 	ldr.w	r1, [r2, #-16]
    2d42:	6021      	str	r1, [r4, #0]
    2d44:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    2d48:	6023      	str	r3, [r4, #0]
    2d4a:	f852 0c08 	ldr.w	r0, [r2, #-8]
    2d4e:	6020      	str	r0, [r4, #0]
    2d50:	f852 1c04 	ldr.w	r1, [r2, #-4]
    2d54:	6021      	str	r1, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    2d56:	1bd3      	subs	r3, r2, r7
    2d58:	429d      	cmp	r5, r3
    2d5a:	d8e2      	bhi.n	2d22 <am_hal_iom_spi_write_nb.part.6+0xce>
            g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    2d5c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    2d60:	4a2d      	ldr	r2, [pc, #180]	; (2e18 <am_hal_iom_spi_write_nb.part.6+0x1c4>)
    2d62:	00b0      	lsls	r0, r6, #2
    2d64:	1813      	adds	r3, r2, r0
            g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    2d66:	f025 0c03 	bic.w	ip, r5, #3
            g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    2d6a:	2101      	movs	r1, #1
            g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
    2d6c:	ebaa 0505 	sub.w	r5, sl, r5
            g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    2d70:	4467      	add	r7, ip
            g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    2d72:	9e09      	ldr	r6, [sp, #36]	; 0x24
            g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    2d74:	5011      	str	r1, [r2, r0]
            g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    2d76:	611e      	str	r6, [r3, #16]
            g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    2d78:	f8c3 900c 	str.w	r9, [r3, #12]
            g_psIOMBuffers[ui32Module].ui32BytesLeft -= ui32TransferSize;
    2d7c:	609d      	str	r5, [r3, #8]
            g_psIOMBuffers[ui32Module].pui32Data += (ui32TransferSize / 4);
    2d7e:	605f      	str	r7, [r3, #4]
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    2d80:	f1ba 0f00 	cmp.w	sl, #0
    2d84:	d03e      	beq.n	2e04 <am_hal_iom_spi_write_nb.part.6+0x1b0>
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    2d86:	ea4f 4708 	mov.w	r7, r8, lsl #16
    ui32Command |= ui32Options & 0x5C00FF00;
    2d8a:	f029 4223 	bic.w	r2, r9, #2734686208	; 0xa3000000
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    2d8e:	f407 20e0 	and.w	r0, r7, #458752	; 0x70000
    ui32Command |= ui32Options & 0x5C00FF00;
    2d92:	f002 23ff 	and.w	r3, r2, #4278255360	; 0xff00ff00
    2d96:	ea40 0103 	orr.w	r1, r0, r3
    ui32Command |= (ui32NumBytes & 0xFF);
    2d9a:	fa5f f58a 	uxtb.w	r5, sl
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    2d9e:	ea4f 36ca 	mov.w	r6, sl, lsl #15
    ui32Command |= ui32Options & 0x5C00FF00;
    2da2:	4329      	orrs	r1, r5
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    2da4:	f006 67f0 	and.w	r7, r6, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
    2da8:	ea41 0207 	orr.w	r2, r1, r7
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    2dac:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
}
    2db0:	2000      	movs	r0, #0
    2db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B )
    2db6:	4b19      	ldr	r3, [pc, #100]	; (2e1c <am_hal_iom_spi_write_nb.part.6+0x1c8>)
    2db8:	6819      	ldr	r1, [r3, #0]
    2dba:	b2c8      	uxtb	r0, r1
    2dbc:	2820      	cmp	r0, #32
    2dbe:	f47f af6b 	bne.w	2c98 <am_hal_iom_spi_write_nb.part.6+0x44>
        ui32TransferSize = (ui32NumBytes <= (ui32MaxFifoSize - 4) ?  ui32NumBytes :
    2dc2:	4552      	cmp	r2, sl
    2dc4:	bf28      	it	cs
    2dc6:	4652      	movcs	r2, sl
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    2dc8:	4d13      	ldr	r5, [pc, #76]	; (2e18 <am_hal_iom_spi_write_nb.part.6+0x1c4>)
        g_psIOMBuffers[ui32Module].pui32Data = pui32Data + (ui32TransferSize / 4);
    2dca:	f022 0603 	bic.w	r6, r2, #3
    2dce:	443e      	add	r6, r7
        g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes - ui32TransferSize;
    2dd0:	ebaa 0402 	sub.w	r4, sl, r2
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
    2dd4:	4639      	mov	r1, r7
        g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    2dd6:	9f09      	ldr	r7, [sp, #36]	; 0x24
        g_psIOMBuffers[ui32Module].pui32Data = pui32Data + (ui32TransferSize / 4);
    2dd8:	656e      	str	r6, [r5, #84]	; 0x54
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
    2dda:	4640      	mov	r0, r8
    2ddc:	4652      	mov	r2, sl
    2dde:	464b      	mov	r3, r9
        g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes - ui32TransferSize;
    2de0:	65ac      	str	r4, [r5, #88]	; 0x58
        g_psIOMBuffers[ui32Module].ui32State = BUFFER_SENDING;
    2de2:	f8c5 e050 	str.w	lr, [r5, #80]	; 0x50
        g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    2de6:	662f      	str	r7, [r5, #96]	; 0x60
        g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    2de8:	f8c5 905c 	str.w	r9, [r5, #92]	; 0x5c
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
    2dec:	f7ff fb66 	bl	24bc <am_hal_iom_workaround_word_write>
}
    2df0:	2000      	movs	r0, #0
    2df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2df6:	4a0a      	ldr	r2, [pc, #40]	; (2e20 <am_hal_iom_spi_write_nb.part.6+0x1cc>)
    2df8:	480a      	ldr	r0, [pc, #40]	; (2e24 <am_hal_iom_spi_write_nb.part.6+0x1d0>)
    2dfa:	f640 7145 	movw	r1, #3909	; 0xf45
    2dfe:	f7fe fd93 	bl	1928 <am_hal_debug_error>
    2e02:	e75d      	b.n	2cc0 <am_hal_iom_spi_write_nb.part.6+0x6c>
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    2e04:	4a08      	ldr	r2, [pc, #32]	; (2e28 <am_hal_iom_spi_write_nb.part.6+0x1d4>)
    2e06:	4807      	ldr	r0, [pc, #28]	; (2e24 <am_hal_iom_spi_write_nb.part.6+0x1d0>)
    2e08:	f640 21da 	movw	r1, #2778	; 0xada
    2e0c:	f7fe fd8c 	bl	1928 <am_hal_debug_error>
    2e10:	e7b9      	b.n	2d86 <am_hal_iom_spi_write_nb.part.6+0x132>
    2e12:	bf00      	nop
    2e14:	10000854 	.word	0x10000854
    2e18:	10000a88 	.word	0x10000a88
    2e1c:	4002000c 	.word	0x4002000c
    2e20:	00004b90 	.word	0x00004b90
    2e24:	00004bc4 	.word	0x00004bc4
    2e28:	00004c78 	.word	0x00004c78

00002e2c <am_hal_iom_spi_read_nb.part.7>:
am_hal_iom_spi_read_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    2e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    2e30:	f500 27a0 	add.w	r7, r0, #327680	; 0x50000
    2e34:	3704      	adds	r7, #4
    2e36:	033f      	lsls	r7, r7, #12
    g_bIomBusy[ui32Module] = true;
    2e38:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 2f34 <am_hal_iom_spi_read_nb.part.7+0x108>
    2e3c:	f04f 0801 	mov.w	r8, #1
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    2e40:	f240 7bff 	movw	fp, #2047	; 0x7ff
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
    2e44:	2804      	cmp	r0, #4
    g_bIomBusy[ui32Module] = true;
    2e46:	f80a 8000 	strb.w	r8, [sl, r0]
am_hal_iom_spi_read_nb(uint32_t ui32Module, uint32_t ui32ChipSelect,
    2e4a:	b083      	sub	sp, #12
    2e4c:	4604      	mov	r4, r0
    2e4e:	460e      	mov	r6, r1
    2e50:	4691      	mov	r9, r2
    2e52:	461d      	mov	r5, r3
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    2e54:	f8c7 b208 	str.w	fp, [r7, #520]	; 0x208
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
    2e58:	d02c      	beq.n	2eb4 <am_hal_iom_spi_read_nb.part.7+0x88>
    g_psIOMBuffers[ui32Module].ui32State = BUFFER_RECEIVING;
    2e5a:	482f      	ldr	r0, [pc, #188]	; (2f18 <am_hal_iom_spi_read_nb.part.7+0xec>)
    2e5c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2e60:	00a2      	lsls	r2, r4, #2
    2e62:	1883      	adds	r3, r0, r2
    2e64:	2102      	movs	r1, #2
    2e66:	5081      	str	r1, [r0, r2]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    2e68:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    2e6a:	980c      	ldr	r0, [sp, #48]	; 0x30
    g_psIOMBuffers[ui32Module].pui32Data = pui32Data;
    2e6c:	f8c3 9004 	str.w	r9, [r3, #4]
    g_psIOMBuffers[ui32Module].ui32BytesLeft = ui32NumBytes;
    2e70:	609d      	str	r5, [r3, #8]
    g_psIOMBuffers[ui32Module].pfnCallback = pfnCallback;
    2e72:	611c      	str	r4, [r3, #16]
    g_psIOMBuffers[ui32Module].ui32Options = ui32Options;
    2e74:	60d8      	str	r0, [r3, #12]
    am_hal_debug_assert_msg(ui32NumBytes > 0,
    2e76:	b92d      	cbnz	r5, 2e84 <am_hal_iom_spi_read_nb.part.7+0x58>
    2e78:	4a28      	ldr	r2, [pc, #160]	; (2f1c <am_hal_iom_spi_read_nb.part.7+0xf0>)
    2e7a:	4829      	ldr	r0, [pc, #164]	; (2f20 <am_hal_iom_spi_read_nb.part.7+0xf4>)
    2e7c:	f640 21da 	movw	r1, #2778	; 0xada
    2e80:	f7fe fd52 	bl	1928 <am_hal_debug_error>
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    2e84:	03ea      	lsls	r2, r5, #15
    ui32Command |= (ui32NumBytes & 0xFF);
    2e86:	fa5f fc85 	uxtb.w	ip, r5
    ui32Command |= ui32Options & 0x5C00FF00;
    2e8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    2e8c:	f002 61f0 	and.w	r1, r2, #125829120	; 0x7800000
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    2e90:	0436      	lsls	r6, r6, #16
    ui32Command |= (ui32NumBytes & 0xFF);
    2e92:	f04c 4500 	orr.w	r5, ip, #2147483648	; 0x80000000
    ui32Command |= ui32Options & 0x5C00FF00;
    2e96:	f023 4023 	bic.w	r0, r3, #2734686208	; 0xa3000000
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    2e9a:	f406 24e0 	and.w	r4, r6, #458752	; 0x70000
    ui32Command |= (ui32NumBytes & 0xFF);
    2e9e:	430d      	orrs	r5, r1
    ui32Command |= ui32Options & 0x5C00FF00;
    2ea0:	f000 22ff 	and.w	r2, r0, #4278255360	; 0xff00ff00
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    2ea4:	432c      	orrs	r4, r5
    ui32Command |= ui32Options & 0x5C00FF00;
    2ea6:	4322      	orrs	r2, r4
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    2ea8:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
    return ui32Status;
    2eac:	2000      	movs	r0, #0
}
    2eae:	b003      	add	sp, #12
    2eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
    2eb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2eb6:	f013 4180 	ands.w	r1, r3, #1073741824	; 0x40000000
    2eba:	d1ce      	bne.n	2e5a <am_hal_iom_spi_read_nb.part.7+0x2e>
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B )
    2ebc:	4819      	ldr	r0, [pc, #100]	; (2f24 <am_hal_iom_spi_read_nb.part.7+0xf8>)
    2ebe:	6802      	ldr	r2, [r0, #0]
    2ec0:	b2d3      	uxtb	r3, r2
    2ec2:	2b20      	cmp	r3, #32
    2ec4:	d1c9      	bne.n	2e5a <am_hal_iom_spi_read_nb.part.7+0x2e>
        ui32IntConfig = AM_REGn(IOMSTR, 4, INTEN);
    2ec6:	4818      	ldr	r0, [pc, #96]	; (2f28 <am_hal_iom_spi_read_nb.part.7+0xfc>)
    2ec8:	6803      	ldr	r3, [r0, #0]
        AM_REGn(IOMSTR, 4, INTEN) = 0;
    2eca:	4817      	ldr	r0, [pc, #92]	; (2f28 <am_hal_iom_spi_read_nb.part.7+0xfc>)
        ui32IntConfig = AM_REGn(IOMSTR, 4, INTEN);
    2ecc:	9301      	str	r3, [sp, #4]
        AM_REGn(IOMSTR, 4, INTEN) = 0;
    2ece:	6001      	str	r1, [r0, #0]
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
    2ed0:	460a      	mov	r2, r1
    2ed2:	990c      	ldr	r1, [sp, #48]	; 0x30
    2ed4:	4630      	mov	r0, r6
    2ed6:	f041 5380 	orr.w	r3, r1, #268435456	; 0x10000000
    2eda:	4649      	mov	r1, r9
    2edc:	f7ff faee 	bl	24bc <am_hal_iom_workaround_word_write>
        waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    2ee0:	4a12      	ldr	r2, [pc, #72]	; (2f2c <am_hal_iom_spi_read_nb.part.7+0x100>)
    2ee2:	4643      	mov	r3, r8
    2ee4:	6910      	ldr	r0, [r2, #16]
    2ee6:	f507 7101 	add.w	r1, r7, #516	; 0x204
    2eea:	4642      	mov	r2, r8
    2eec:	f7fe fd22 	bl	1934 <am_hal_flash_delay_status_change>
        if (waitStatus != 1)
    2ef0:	2801      	cmp	r0, #1
    2ef2:	d004      	beq.n	2efe <am_hal_iom_spi_read_nb.part.7+0xd2>
            g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    2ef4:	4f0e      	ldr	r7, [pc, #56]	; (2f30 <am_hal_iom_spi_read_nb.part.7+0x104>)
            return ui32Status;
    2ef6:	4640      	mov	r0, r8
            g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    2ef8:	f887 8004 	strb.w	r8, [r7, #4]
    2efc:	e7d7      	b.n	2eae <am_hal_iom_spi_read_nb.part.7+0x82>
        ui32Options |= AM_HAL_IOM_RAW;
    2efe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        AM_REGn(IOMSTR, 4, INTEN) = ui32IntConfig;
    2f00:	4909      	ldr	r1, [pc, #36]	; (2f28 <am_hal_iom_spi_read_nb.part.7+0xfc>)
        g_bIomBusy[ui32Module] = true;
    2f02:	f88a 0004 	strb.w	r0, [sl, #4]
        AM_REGn(IOMSTR, 4, INTEN) = ui32IntConfig;
    2f06:	9a01      	ldr	r2, [sp, #4]
        AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    2f08:	f8c7 b208 	str.w	fp, [r7, #520]	; 0x208
        ui32Options |= AM_HAL_IOM_RAW;
    2f0c:	f043 4080 	orr.w	r0, r3, #1073741824	; 0x40000000
    2f10:	900c      	str	r0, [sp, #48]	; 0x30
        AM_REGn(IOMSTR, 4, INTEN) = ui32IntConfig;
    2f12:	600a      	str	r2, [r1, #0]
    2f14:	e7a1      	b.n	2e5a <am_hal_iom_spi_read_nb.part.7+0x2e>
    2f16:	bf00      	nop
    2f18:	10000a88 	.word	0x10000a88
    2f1c:	00004c78 	.word	0x00004c78
    2f20:	00004bc4 	.word	0x00004bc4
    2f24:	4002000c 	.word	0x4002000c
    2f28:	50008200 	.word	0x50008200
    2f2c:	10000a70 	.word	0x10000a70
    2f30:	1000085c 	.word	0x1000085c
    2f34:	10000854 	.word	0x10000854

00002f38 <am_hal_iom_spi_write_nq>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    2f38:	2805      	cmp	r0, #5
    2f3a:	d901      	bls.n	2f40 <am_hal_iom_spi_write_nq+0x8>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    2f3c:	2002      	movs	r0, #2
    2f3e:	4770      	bx	lr
{
    2f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f44:	4dc1      	ldr	r5, [pc, #772]	; (324c <am_hal_iom_spi_write_nq+0x314>)
    2f46:	b083      	sub	sp, #12
    while ( g_bIomBusy[ui32Module] );
    2f48:	5c2c      	ldrb	r4, [r5, r0]
    2f4a:	f004 06ff 	and.w	r6, r4, #255	; 0xff
    2f4e:	2c00      	cmp	r4, #0
    2f50:	d1fa      	bne.n	2f48 <am_hal_iom_spi_write_nq+0x10>
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    2f52:	f8df 930c 	ldr.w	r9, [pc, #780]	; 3260 <am_hal_iom_spi_write_nq+0x328>
    if (ui32NumBytes == 0)
    2f56:	1e5f      	subs	r7, r3, #1
    2f58:	f640 75fe 	movw	r5, #4094	; 0xffe
    2f5c:	42af      	cmp	r7, r5
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    2f5e:	f809 6000 	strb.w	r6, [r9, r0]
    if (ui32NumBytes == 0)
    2f62:	d906      	bls.n	2f72 <am_hal_iom_spi_write_nq+0x3a>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    2f64:	2403      	movs	r4, #3
    2f66:	f809 4000 	strb.w	r4, [r9, r0]
        return ui32Status;
    2f6a:	4620      	mov	r0, r4
}
    2f6c:	b003      	add	sp, #12
    2f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f72:	468b      	mov	fp, r1
    2f74:	9000      	str	r0, [sp, #0]
    2f76:	4601      	mov	r1, r0
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    2f78:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
    2f7c:	3004      	adds	r0, #4
    2f7e:	0304      	lsls	r4, r0, #12
    2f80:	4698      	mov	r8, r3
    2f82:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    2f86:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    2f8a:	f8c4 6200 	str.w	r6, [r4, #512]	; 0x200
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    2f8e:	f005 0008 	and.w	r0, r5, #8
                       AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2f92:	2800      	cmp	r0, #0
    2f94:	4617      	mov	r7, r2
    2f96:	bf18      	it	ne
    2f98:	f04f 0e3c 	movne.w	lr, #60	; 0x3c
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    2f9c:	f240 72ff 	movw	r2, #2047	; 0x7ff
                       AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2fa0:	bf0a      	itet	eq
    2fa2:	f04f 0e7c 	moveq.w	lr, #124	; 0x7c
    2fa6:	2640      	movne	r6, #64	; 0x40
    2fa8:	2680      	moveq	r6, #128	; 0x80
    if ( WORKAROUND_IOM == ui32Module && isRevB0() )
    2faa:	2904      	cmp	r1, #4
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    2fac:	9301      	str	r3, [sp, #4]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    2fae:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    2fb2:	f504 7a8e 	add.w	sl, r4, #284	; 0x11c
    if ( WORKAROUND_IOM == ui32Module && isRevB0() )
    2fb6:	d105      	bne.n	2fc4 <am_hal_iom_spi_write_nq+0x8c>
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B )
    2fb8:	4aa5      	ldr	r2, [pc, #660]	; (3250 <am_hal_iom_spi_write_nq+0x318>)
    2fba:	6815      	ldr	r5, [r2, #0]
    2fbc:	b2eb      	uxtb	r3, r5
    2fbe:	2b20      	cmp	r3, #32
    2fc0:	f000 8136 	beq.w	3230 <am_hal_iom_spi_write_nq+0x2f8>
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2fc4:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    2fc8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
        ui32TransferSize = (ui32NumBytes <= ui32MaxFifoSize ? ui32NumBytes :
    2fcc:	4546      	cmp	r6, r8
    2fce:	bf28      	it	cs
    2fd0:	4646      	movcs	r6, r8
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    2fd2:	f010 0f08 	tst.w	r0, #8
    2fd6:	bf14      	ite	ne
    2fd8:	2040      	movne	r0, #64	; 0x40
    2fda:	2080      	moveq	r0, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    2fdc:	1a42      	subs	r2, r0, r1
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    2fde:	f002 05fc 	and.w	r5, r2, #252	; 0xfc
    2fe2:	42ae      	cmp	r6, r5
    2fe4:	f200 811d 	bhi.w	3222 <am_hal_iom_spi_write_nq+0x2ea>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    2fe8:	463b      	mov	r3, r7
    2fea:	43f8      	mvns	r0, r7
    2fec:	f853 1b04 	ldr.w	r1, [r3], #4
    2ff0:	6021      	str	r1, [r4, #0]
    2ff2:	4438      	add	r0, r7
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    2ff4:	1bdd      	subs	r5, r3, r7
    2ff6:	4430      	add	r0, r6
    2ff8:	42ae      	cmp	r6, r5
    2ffa:	f3c0 0282 	ubfx	r2, r0, #2, #3
    2ffe:	d941      	bls.n	3084 <am_hal_iom_spi_write_nq+0x14c>
    3000:	b31a      	cbz	r2, 304a <am_hal_iom_spi_write_nq+0x112>
    3002:	2a01      	cmp	r2, #1
    3004:	d01b      	beq.n	303e <am_hal_iom_spi_write_nq+0x106>
    3006:	2a02      	cmp	r2, #2
    3008:	d016      	beq.n	3038 <am_hal_iom_spi_write_nq+0x100>
    300a:	2a03      	cmp	r2, #3
    300c:	d011      	beq.n	3032 <am_hal_iom_spi_write_nq+0xfa>
    300e:	2a04      	cmp	r2, #4
    3010:	d00c      	beq.n	302c <am_hal_iom_spi_write_nq+0xf4>
    3012:	2a05      	cmp	r2, #5
    3014:	d007      	beq.n	3026 <am_hal_iom_spi_write_nq+0xee>
    3016:	2a06      	cmp	r2, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    3018:	bf1c      	itt	ne
    301a:	f853 2b04 	ldrne.w	r2, [r3], #4
    301e:	6022      	strne	r2, [r4, #0]
    3020:	f853 0b04 	ldr.w	r0, [r3], #4
    3024:	6020      	str	r0, [r4, #0]
    3026:	f853 1b04 	ldr.w	r1, [r3], #4
    302a:	6021      	str	r1, [r4, #0]
    302c:	f853 5b04 	ldr.w	r5, [r3], #4
    3030:	6025      	str	r5, [r4, #0]
    3032:	f853 2b04 	ldr.w	r2, [r3], #4
    3036:	6022      	str	r2, [r4, #0]
    3038:	f853 0b04 	ldr.w	r0, [r3], #4
    303c:	6020      	str	r0, [r4, #0]
    303e:	f853 1b04 	ldr.w	r1, [r3], #4
    3042:	6021      	str	r1, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    3044:	1bdd      	subs	r5, r3, r7
    3046:	42ae      	cmp	r6, r5
    3048:	d91c      	bls.n	3084 <am_hal_iom_spi_write_nq+0x14c>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    304a:	469c      	mov	ip, r3
    304c:	3320      	adds	r3, #32
    304e:	f85c 2b04 	ldr.w	r2, [ip], #4
    3052:	6022      	str	r2, [r4, #0]
    3054:	f853 0c1c 	ldr.w	r0, [r3, #-28]
    3058:	6020      	str	r0, [r4, #0]
    305a:	f8dc 1004 	ldr.w	r1, [ip, #4]
    305e:	6021      	str	r1, [r4, #0]
    3060:	f853 5c14 	ldr.w	r5, [r3, #-20]
    3064:	6025      	str	r5, [r4, #0]
    3066:	f853 2c10 	ldr.w	r2, [r3, #-16]
    306a:	6022      	str	r2, [r4, #0]
    306c:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    3070:	6020      	str	r0, [r4, #0]
    3072:	f853 1c08 	ldr.w	r1, [r3, #-8]
    3076:	6021      	str	r1, [r4, #0]
    3078:	f853 5c04 	ldr.w	r5, [r3, #-4]
    307c:	6025      	str	r5, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    307e:	1bda      	subs	r2, r3, r7
    3080:	4296      	cmp	r6, r2
    3082:	d8e2      	bhi.n	304a <am_hal_iom_spi_write_nq+0x112>
    ui32Command |= ui32Options & 0x5C00FF00;
    3084:	990c      	ldr	r1, [sp, #48]	; 0x30
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    3086:	ea4f 4e0b 	mov.w	lr, fp, lsl #16
    308a:	f40e 20e0 	and.w	r0, lr, #458752	; 0x70000
    ui32Command |= (ui32NumBytes & 0xFF);
    308e:	fa5f f388 	uxtb.w	r3, r8
    ui32Command |= ui32Options & 0x5C00FF00;
    3092:	f021 4523 	bic.w	r5, r1, #2734686208	; 0xa3000000
    3096:	4303      	orrs	r3, r0
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    3098:	ea4f 3cc8 	mov.w	ip, r8, lsl #15
    ui32Command |= ui32Options & 0x5C00FF00;
    309c:	f005 20ff 	and.w	r0, r5, #4278255360	; 0xff00ff00
    30a0:	4303      	orrs	r3, r0
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    30a2:	f00c 62f0 	and.w	r2, ip, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
    30a6:	4313      	orrs	r3, r2
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    30a8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pui32Data += ui32TransferSize >> 2;
    30ac:	f026 0e03 	bic.w	lr, r6, #3
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    30b0:	ebb8 0606 	subs.w	r6, r8, r6
    pui32Data += ui32TransferSize >> 2;
    30b4:	4477      	add	r7, lr
    30b6:	bf08      	it	eq
    30b8:	f504 7b01 	addeq.w	fp, r4, #516	; 0x204
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    30bc:	f000 8083 	beq.w	31c6 <am_hal_iom_spi_write_nq+0x28e>
    30c0:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
    30c4:	07da      	lsls	r2, r3, #31
    30c6:	f504 7b01 	add.w	fp, r4, #516	; 0x204
    30ca:	d47c      	bmi.n	31c6 <am_hal_iom_spi_write_nq+0x28e>
    30cc:	f504 7580 	add.w	r5, r4, #256	; 0x100
    30d0:	46a8      	mov	r8, r5
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    30d2:	f8da 1000 	ldr.w	r1, [sl]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    30d6:	f8d8 0000 	ldr.w	r0, [r8]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    30da:	f011 0f08 	tst.w	r1, #8
    30de:	bf14      	ite	ne
    30e0:	2140      	movne	r1, #64	; 0x40
    30e2:	2180      	moveq	r1, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    30e4:	1a0a      	subs	r2, r1, r0
        ui32SpaceInFifo =  am_hal_iom_fifo_empty_slots(ui32Module);
    30e6:	f002 03fc 	and.w	r3, r2, #252	; 0xfc
        if ( ui32NumBytes <= ui32SpaceInFifo )
    30ea:	42b3      	cmp	r3, r6
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    30ec:	f8da 1000 	ldr.w	r1, [sl]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    30f0:	f8d8 0000 	ldr.w	r0, [r8]
            ui32TransferSize = ui32SpaceInFifo & ~(0x3);
    30f4:	bf3b      	ittet	cc
    30f6:	f023 0303 	biccc.w	r3, r3, #3
    30fa:	1af5      	subcc	r5, r6, r3
        if ( ui32NumBytes <= ui32SpaceInFifo )
    30fc:	2500      	movcs	r5, #0
            ui32TransferSize = ui32SpaceInFifo & ~(0x3);
    30fe:	461e      	movcc	r6, r3
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    3100:	f011 0f08 	tst.w	r1, #8
    3104:	bf14      	ite	ne
    3106:	2140      	movne	r1, #64	; 0x40
    3108:	2180      	moveq	r1, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    310a:	1a0a      	subs	r2, r1, r0
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    310c:	f002 0cfc 	and.w	ip, r2, #252	; 0xfc
    3110:	4566      	cmp	r6, ip
    3112:	d86e      	bhi.n	31f2 <am_hal_iom_spi_write_nq+0x2ba>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    3114:	2e00      	cmp	r6, #0
    3116:	d04d      	beq.n	31b4 <am_hal_iom_spi_write_nq+0x27c>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    3118:	463b      	mov	r3, r7
    311a:	43f8      	mvns	r0, r7
    311c:	f853 1b04 	ldr.w	r1, [r3], #4
    3120:	6021      	str	r1, [r4, #0]
    3122:	4438      	add	r0, r7
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    3124:	1bd9      	subs	r1, r3, r7
    3126:	4430      	add	r0, r6
    3128:	428e      	cmp	r6, r1
    312a:	f3c0 0282 	ubfx	r2, r0, #2, #3
    312e:	d941      	bls.n	31b4 <am_hal_iom_spi_write_nq+0x27c>
    3130:	b31a      	cbz	r2, 317a <am_hal_iom_spi_write_nq+0x242>
    3132:	2a01      	cmp	r2, #1
    3134:	d01b      	beq.n	316e <am_hal_iom_spi_write_nq+0x236>
    3136:	2a02      	cmp	r2, #2
    3138:	d016      	beq.n	3168 <am_hal_iom_spi_write_nq+0x230>
    313a:	2a03      	cmp	r2, #3
    313c:	d011      	beq.n	3162 <am_hal_iom_spi_write_nq+0x22a>
    313e:	2a04      	cmp	r2, #4
    3140:	d00c      	beq.n	315c <am_hal_iom_spi_write_nq+0x224>
    3142:	2a05      	cmp	r2, #5
    3144:	d007      	beq.n	3156 <am_hal_iom_spi_write_nq+0x21e>
    3146:	2a06      	cmp	r2, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    3148:	bf1c      	itt	ne
    314a:	f853 2b04 	ldrne.w	r2, [r3], #4
    314e:	6022      	strne	r2, [r4, #0]
    3150:	f853 0b04 	ldr.w	r0, [r3], #4
    3154:	6020      	str	r0, [r4, #0]
    3156:	f853 1b04 	ldr.w	r1, [r3], #4
    315a:	6021      	str	r1, [r4, #0]
    315c:	f853 2b04 	ldr.w	r2, [r3], #4
    3160:	6022      	str	r2, [r4, #0]
    3162:	f853 0b04 	ldr.w	r0, [r3], #4
    3166:	6020      	str	r0, [r4, #0]
    3168:	f853 1b04 	ldr.w	r1, [r3], #4
    316c:	6021      	str	r1, [r4, #0]
    316e:	f853 2b04 	ldr.w	r2, [r3], #4
    3172:	6022      	str	r2, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    3174:	1bd8      	subs	r0, r3, r7
    3176:	4286      	cmp	r6, r0
    3178:	d91c      	bls.n	31b4 <am_hal_iom_spi_write_nq+0x27c>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    317a:	469e      	mov	lr, r3
    317c:	3320      	adds	r3, #32
    317e:	f85e 1b04 	ldr.w	r1, [lr], #4
    3182:	6021      	str	r1, [r4, #0]
    3184:	f853 2c1c 	ldr.w	r2, [r3, #-28]
    3188:	6022      	str	r2, [r4, #0]
    318a:	f8de 0004 	ldr.w	r0, [lr, #4]
    318e:	6020      	str	r0, [r4, #0]
    3190:	f853 1c14 	ldr.w	r1, [r3, #-20]
    3194:	6021      	str	r1, [r4, #0]
    3196:	f853 2c10 	ldr.w	r2, [r3, #-16]
    319a:	6022      	str	r2, [r4, #0]
    319c:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    31a0:	6020      	str	r0, [r4, #0]
    31a2:	f853 1c08 	ldr.w	r1, [r3, #-8]
    31a6:	6021      	str	r1, [r4, #0]
    31a8:	f853 2c04 	ldr.w	r2, [r3, #-4]
    31ac:	6022      	str	r2, [r4, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    31ae:	1bd8      	subs	r0, r3, r7
    31b0:	4286      	cmp	r6, r0
    31b2:	d8e2      	bhi.n	317a <am_hal_iom_spi_write_nq+0x242>
        pui32Data += ui32TransferSize >> 2;
    31b4:	f026 0603 	bic.w	r6, r6, #3
    31b8:	4437      	add	r7, r6
    while ( ui32NumBytes && !AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP) )
    31ba:	b125      	cbz	r5, 31c6 <am_hal_iom_spi_write_nq+0x28e>
    31bc:	f8db 3000 	ldr.w	r3, [fp]
    31c0:	07db      	lsls	r3, r3, #31
    31c2:	462e      	mov	r6, r5
    31c4:	d585      	bpl.n	30d2 <am_hal_iom_spi_write_nq+0x19a>
    waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    31c6:	9d00      	ldr	r5, [sp, #0]
    31c8:	4f22      	ldr	r7, [pc, #136]	; (3254 <am_hal_iom_spi_write_nq+0x31c>)
    31ca:	2301      	movs	r3, #1
    31cc:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
    31d0:	461a      	mov	r2, r3
    31d2:	4659      	mov	r1, fp
    31d4:	f7fe fbae 	bl	1934 <am_hal_flash_delay_status_change>
    if (waitStatus != 1)
    31d8:	2801      	cmp	r0, #1
    31da:	d011      	beq.n	3200 <am_hal_iom_spi_write_nq+0x2c8>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    31dc:	2001      	movs	r0, #1
    31de:	f809 0005 	strb.w	r0, [r9, r5]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    31e2:	f240 73ff 	movw	r3, #2047	; 0x7ff
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    31e6:	9e01      	ldr	r6, [sp, #4]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    31e8:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    31ec:	f8c4 6200 	str.w	r6, [r4, #512]	; 0x200
    31f0:	e6bc      	b.n	2f6c <am_hal_iom_spi_write_nq+0x34>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    31f2:	4a19      	ldr	r2, [pc, #100]	; (3258 <am_hal_iom_spi_write_nq+0x320>)
    31f4:	4819      	ldr	r0, [pc, #100]	; (325c <am_hal_iom_spi_write_nq+0x324>)
    31f6:	f640 7145 	movw	r1, #3909	; 0xf45
    31fa:	f7fe fb95 	bl	1928 <am_hal_debug_error>
    31fe:	e78b      	b.n	3118 <am_hal_iom_spi_write_nq+0x1e0>
        return AM_REGn(IOMSTR, ui32Module, INTSTAT);
    3200:	f8db 1000 	ldr.w	r1, [fp]
    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    3204:	f011 0fcc 	tst.w	r1, #204	; 0xcc
    3208:	d11d      	bne.n	3246 <am_hal_iom_spi_write_nq+0x30e>
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
    320a:	f411 6fe0 	tst.w	r1, #1792	; 0x700
    320e:	d129      	bne.n	3264 <am_hal_iom_spi_write_nq+0x32c>
    am_hal_iom_status_e ui32Status = AM_HAL_IOM_SUCCESS;
    3210:	f011 0f10 	tst.w	r1, #16
    3214:	bf14      	ite	ne
    3216:	2006      	movne	r0, #6
    3218:	2000      	moveq	r0, #0
        g_iom_error_status[ui32Module] = ui32Status = internal_iom_get_int_err(ui32Module, 0);
    321a:	9a00      	ldr	r2, [sp, #0]
    321c:	f809 0002 	strb.w	r0, [r9, r2]
    3220:	e7df      	b.n	31e2 <am_hal_iom_spi_write_nq+0x2aa>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    3222:	4a0d      	ldr	r2, [pc, #52]	; (3258 <am_hal_iom_spi_write_nq+0x320>)
    3224:	480d      	ldr	r0, [pc, #52]	; (325c <am_hal_iom_spi_write_nq+0x324>)
    3226:	f640 7145 	movw	r1, #3909	; 0xf45
    322a:	f7fe fb7d 	bl	1928 <am_hal_debug_error>
    322e:	e6db      	b.n	2fe8 <am_hal_iom_spi_write_nq+0xb0>
        ui32TransferSize = (ui32NumBytes <= (ui32MaxFifoSize - 4) ? ui32NumBytes :
    3230:	45c6      	cmp	lr, r8
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
    3232:	4658      	mov	r0, fp
    3234:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3236:	4642      	mov	r2, r8
    3238:	4639      	mov	r1, r7
        ui32TransferSize = (ui32NumBytes <= (ui32MaxFifoSize - 4) ? ui32NumBytes :
    323a:	4676      	mov	r6, lr
    323c:	bf28      	it	cs
    323e:	4646      	movcs	r6, r8
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data,
    3240:	f7ff f93c 	bl	24bc <am_hal_iom_workaround_word_write>
    3244:	e732      	b.n	30ac <am_hal_iom_spi_write_nq+0x174>
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
    3246:	2005      	movs	r0, #5
    3248:	e7e7      	b.n	321a <am_hal_iom_spi_write_nq+0x2e2>
    324a:	bf00      	nop
    324c:	10000854 	.word	0x10000854
    3250:	4002000c 	.word	0x4002000c
    3254:	10000a70 	.word	0x10000a70
    3258:	00004b90 	.word	0x00004b90
    325c:	00004bc4 	.word	0x00004bc4
    3260:	1000085c 	.word	0x1000085c
        ui32Status = AM_HAL_IOM_ERR_I2C_ARB;
    3264:	2007      	movs	r0, #7
    3266:	e7d8      	b.n	321a <am_hal_iom_spi_write_nq+0x2e2>

00003268 <am_hal_iom_spi_write>:
{
    3268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    326c:	2805      	cmp	r0, #5
{
    326e:	b08d      	sub	sp, #52	; 0x34
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    3270:	d904      	bls.n	327c <am_hal_iom_spi_write+0x14>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    3272:	2502      	movs	r5, #2
}
    3274:	4628      	mov	r0, r5
    3276:	b00d      	add	sp, #52	; 0x34
    3278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    327c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 3358 <am_hal_iom_spi_write+0xf0>
    3280:	f04f 0e00 	mov.w	lr, #0
    3284:	4604      	mov	r4, r0
    3286:	461d      	mov	r5, r3
    3288:	f808 e000 	strb.w	lr, [r8, r0]
    if (ui32NumBytes == 0)
    328c:	b933      	cbnz	r3, 329c <am_hal_iom_spi_write+0x34>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    328e:	2503      	movs	r5, #3
    3290:	f808 5000 	strb.w	r5, [r8, r0]
}
    3294:	4628      	mov	r0, r5
    3296:	b00d      	add	sp, #52	; 0x34
    3298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
    329c:	ea4f 0a40 	mov.w	sl, r0, lsl #1
    32a0:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 335c <am_hal_iom_spi_write+0xf4>
    32a4:	9103      	str	r1, [sp, #12]
    32a6:	eb0a 0700 	add.w	r7, sl, r0
    32aa:	eb0b 09c7 	add.w	r9, fp, r7, lsl #3
    32ae:	f8d9 6014 	ldr.w	r6, [r9, #20]
    32b2:	2e00      	cmp	r6, #0
    32b4:	d045      	beq.n	3342 <am_hal_iom_spi_write+0xda>
    32b6:	4617      	mov	r7, r2
    ui32Critical = am_hal_interrupt_master_disable();
    32b8:	f7fe fc68 	bl	1b8c <am_hal_interrupt_master_disable>
    if ( (g_bIomBusy[ui32Module] == false) &&
    32bc:	4b24      	ldr	r3, [pc, #144]	; (3350 <am_hal_iom_spi_write+0xe8>)
    32be:	5d1a      	ldrb	r2, [r3, r4]
    ui32Critical = am_hal_interrupt_master_disable();
    32c0:	4606      	mov	r6, r0
    if ( (g_bIomBusy[ui32Module] == false) &&
    32c2:	b912      	cbnz	r2, 32ca <am_hal_iom_spi_write+0x62>
    32c4:	f8d9 0008 	ldr.w	r0, [r9, #8]
    32c8:	b1c8      	cbz	r0, 32fe <am_hal_iom_spi_write+0x96>
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    32ca:	eb0a 0104 	add.w	r1, sl, r4
    32ce:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
        sIOMTransaction.ui32ChipSelect = ui32ChipSelect;
    32d2:	9903      	ldr	r1, [sp, #12]
    32d4:	9107      	str	r1, [sp, #28]
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_WRITE;
    32d6:	2300      	movs	r3, #0
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
    32d8:	9509      	str	r5, [sp, #36]	; 0x24
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    32da:	2201      	movs	r2, #1
        sIOMTransaction.ui32Options = ui32Options;
    32dc:	9d16      	ldr	r5, [sp, #88]	; 0x58
        sIOMTransaction.ui32Module = ui32Module;
    32de:	9406      	str	r4, [sp, #24]
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    32e0:	a905      	add	r1, sp, #20
        sIOMTransaction.pui32Data = pui32Data;
    32e2:	9708      	str	r7, [sp, #32]
        sIOMTransaction.ui32Options = ui32Options;
    32e4:	950a      	str	r5, [sp, #40]	; 0x28
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_WRITE;
    32e6:	9305      	str	r3, [sp, #20]
        sIOMTransaction.pfnCallback = pfnCallback;
    32e8:	930b      	str	r3, [sp, #44]	; 0x2c
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    32ea:	f000 ffab 	bl	4244 <am_hal_queue_item_add>
    32ee:	b9f0      	cbnz	r0, 332e <am_hal_iom_spi_write+0xc6>
            ui32Status = AM_HAL_IOM_ERR_RESOURCE_ERR;
    32f0:	2508      	movs	r5, #8
    am_hal_interrupt_master_set(ui32Critical);
    32f2:	4630      	mov	r0, r6
        g_iom_error_status[ui32Module] = ui32Status;
    32f4:	f808 5004 	strb.w	r5, [r8, r4]
    am_hal_interrupt_master_set(ui32Critical);
    32f8:	f7fe fc4c 	bl	1b94 <am_hal_interrupt_master_set>
    32fc:	e7ba      	b.n	3274 <am_hal_iom_spi_write+0xc>
    while ( g_bIomBusy[ui32Module] );
    32fe:	5d1a      	ldrb	r2, [r3, r4]
    3300:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    3304:	2a00      	cmp	r2, #0
    3306:	d1fa      	bne.n	32fe <am_hal_iom_spi_write+0x96>
    if (ui32NumBytes >= 4096)
    3308:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    330c:	f808 0004 	strb.w	r0, [r8, r4]
    if (ui32NumBytes >= 4096)
    3310:	d301      	bcc.n	3316 <am_hal_iom_spi_write+0xae>
        return ui32Status;
    3312:	2503      	movs	r5, #3
    3314:	e7ed      	b.n	32f2 <am_hal_iom_spi_write+0x8a>
    3316:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3318:	9001      	str	r0, [sp, #4]
    331a:	9300      	str	r3, [sp, #0]
    331c:	463a      	mov	r2, r7
    331e:	462b      	mov	r3, r5
    3320:	9903      	ldr	r1, [sp, #12]
    3322:	4620      	mov	r0, r4
    3324:	f7ff fc96 	bl	2c54 <am_hal_iom_spi_write_nb.part.6>
    if (ui32Status != AM_HAL_IOM_SUCCESS)
    3328:	4605      	mov	r5, r0
    332a:	2800      	cmp	r0, #0
    332c:	d1e1      	bne.n	32f2 <am_hal_iom_spi_write+0x8a>
            am_hal_iom_queue_flush(ui32Module);
    332e:	4f09      	ldr	r7, [pc, #36]	; (3354 <am_hal_iom_spi_write+0xec>)
    am_hal_interrupt_master_set(ui32Critical);
    3330:	4630      	mov	r0, r6
    3332:	f7fe fc2f 	bl	1b94 <am_hal_interrupt_master_set>
            am_hal_iom_queue_flush(ui32Module);
    3336:	4620      	mov	r0, r4
    3338:	683e      	ldr	r6, [r7, #0]
    333a:	47b0      	blx	r6
            ui32Status = g_iom_error_status[ui32Module];
    333c:	f818 5004 	ldrb.w	r5, [r8, r4]
    3340:	e798      	b.n	3274 <am_hal_iom_spi_write+0xc>
        ui32Status = am_hal_iom_spi_write_nq(ui32Module, ui32ChipSelect, pui32Data,
    3342:	9c16      	ldr	r4, [sp, #88]	; 0x58
    3344:	9400      	str	r4, [sp, #0]
    3346:	f7ff fdf7 	bl	2f38 <am_hal_iom_spi_write_nq>
    334a:	4605      	mov	r5, r0
    334c:	e792      	b.n	3274 <am_hal_iom_spi_write+0xc>
    334e:	bf00      	nop
    3350:	10000854 	.word	0x10000854
    3354:	10000848 	.word	0x10000848
    3358:	1000085c 	.word	0x1000085c
    335c:	10000b00 	.word	0x10000b00

00003360 <am_hal_iom_spi_read_nq>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    3360:	2805      	cmp	r0, #5
    3362:	d901      	bls.n	3368 <am_hal_iom_spi_read_nq+0x8>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    3364:	2002      	movs	r0, #2
    3366:	4770      	bx	lr
{
    3368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    336c:	4688      	mov	r8, r1
    336e:	49b9      	ldr	r1, [pc, #740]	; (3654 <am_hal_iom_spi_read_nq+0x2f4>)
    3370:	b085      	sub	sp, #20
    3372:	4604      	mov	r4, r0
    3374:	4617      	mov	r7, r2
    3376:	461e      	mov	r6, r3
    while ( g_bIomBusy[ui32Module] );
    3378:	5d0b      	ldrb	r3, [r1, r4]
    337a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    337e:	2b00      	cmp	r3, #0
    3380:	d1fa      	bne.n	3378 <am_hal_iom_spi_read_nq+0x18>
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    3382:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 3664 <am_hal_iom_spi_read_nq+0x304>
    if (ui32NumBytes == 0)
    3386:	1e70      	subs	r0, r6, #1
    3388:	f640 75fe 	movw	r5, #4094	; 0xffe
    338c:	42a8      	cmp	r0, r5
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    338e:	f809 2004 	strb.w	r2, [r9, r4]
    if (ui32NumBytes == 0)
    3392:	d905      	bls.n	33a0 <am_hal_iom_spi_read_nq+0x40>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    3394:	2003      	movs	r0, #3
    3396:	f809 0004 	strb.w	r0, [r9, r4]
}
    339a:	b005      	add	sp, #20
    339c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    33a0:	f504 21a0 	add.w	r1, r4, #327680	; 0x50000
    33a4:	3104      	adds	r1, #4
    33a6:	030b      	lsls	r3, r1, #12
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    33a8:	f240 7bff 	movw	fp, #2047	; 0x7ff
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    33ac:	f8d3 5200 	ldr.w	r5, [r3, #512]	; 0x200
    33b0:	9300      	str	r3, [sp, #0]
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
    33b2:	2c04      	cmp	r4, #4
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    33b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    33b8:	4618      	mov	r0, r3
    33ba:	9501      	str	r5, [sp, #4]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    33bc:	f8c3 b208 	str.w	fp, [r3, #520]	; 0x208
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
    33c0:	f000 8152 	beq.w	3668 <am_hal_iom_spi_read_nq+0x308>
    33c4:	4aa4      	ldr	r2, [pc, #656]	; (3658 <am_hal_iom_spi_read_nq+0x2f8>)
    33c6:	9202      	str	r2, [sp, #8]
    33c8:	f503 7a01 	add.w	sl, r3, #516	; 0x204
    33cc:	461d      	mov	r5, r3
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    33ce:	ea4f 4108 	mov.w	r1, r8, lsl #16
    33d2:	f401 20e0 	and.w	r0, r1, #458752	; 0x70000
    33d6:	f040 4200 	orr.w	r2, r0, #2147483648	; 0x80000000
    ui32Command |= (ui32NumBytes & 0xFF);
    33da:	b2f3      	uxtb	r3, r6
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    33dc:	4313      	orrs	r3, r2
    ui32Command |= ui32Options & 0x5C00FF00;
    33de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    33e0:	03f1      	lsls	r1, r6, #15
    33e2:	f001 60f0 	and.w	r0, r1, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
    33e6:	f022 4123 	bic.w	r1, r2, #2734686208	; 0xa3000000
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    33ea:	4303      	orrs	r3, r0
    ui32Command |= ui32Options & 0x5C00FF00;
    33ec:	f001 20ff 	and.w	r0, r1, #4278255360	; 0xff00ff00
    33f0:	4303      	orrs	r3, r0
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    33f2:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    33f6:	f505 7b80 	add.w	fp, r5, #256	; 0x100
    uint32_t bCmdCmp = false;
    33fa:	2300      	movs	r3, #0
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    33fc:	f8db 2000 	ldr.w	r2, [fp]
    3400:	fa5f f882 	uxtb.w	r8, r2
        if ( ui32BytesInFifo >= ui32NumBytes )
    3404:	4546      	cmp	r6, r8
    3406:	d910      	bls.n	342a <am_hal_iom_spi_read_nq+0xca>
        else if ( ui32BytesInFifo >= 4 )
    3408:	f1b8 0f03 	cmp.w	r8, #3
    340c:	f200 809f 	bhi.w	354e <am_hal_iom_spi_read_nq+0x1ee>
        if ( bCmdCmp == true )
    3410:	2b00      	cmp	r3, #0
    3412:	f040 80ff 	bne.w	3614 <am_hal_iom_spi_read_nq+0x2b4>
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    3416:	f8da 3000 	ldr.w	r3, [sl]
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    341a:	f8db 2000 	ldr.w	r2, [fp]
    341e:	fa5f f882 	uxtb.w	r8, r2
        if ( ui32BytesInFifo >= ui32NumBytes )
    3422:	4546      	cmp	r6, r8
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    3424:	f003 0301 	and.w	r3, r3, #1
        if ( ui32BytesInFifo >= ui32NumBytes )
    3428:	d8ee      	bhi.n	3408 <am_hal_iom_spi_read_nq+0xa8>
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    342a:	f8d5 211c 	ldr.w	r2, [r5, #284]	; 0x11c
    342e:	9500      	str	r5, [sp, #0]
    3430:	0710      	lsls	r0, r2, #28
    3432:	f140 80f1 	bpl.w	3618 <am_hal_iom_spi_read_nq+0x2b8>
    3436:	f006 0003 	and.w	r0, r6, #3
    for ( i = 0; i < ui32NumWords; i++ )
    343a:	08b6      	lsrs	r6, r6, #2
    343c:	d05a      	beq.n	34f4 <am_hal_iom_spi_read_nq+0x194>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    343e:	9d00      	ldr	r5, [sp, #0]
    3440:	463a      	mov	r2, r7
    3442:	6829      	ldr	r1, [r5, #0]
    3444:	f842 1b04 	str.w	r1, [r2], #4
    3448:	eb07 0b86 	add.w	fp, r7, r6, lsl #2
    344c:	ebab 0807 	sub.w	r8, fp, r7
    3450:	f1a8 0504 	sub.w	r5, r8, #4
    for ( i = 0; i < ui32NumWords; i++ )
    3454:	455a      	cmp	r2, fp
    3456:	f3c5 0182 	ubfx	r1, r5, #2, #3
    345a:	d04b      	beq.n	34f4 <am_hal_iom_spi_read_nq+0x194>
    345c:	b349      	cbz	r1, 34b2 <am_hal_iom_spi_read_nq+0x152>
    345e:	2901      	cmp	r1, #1
    3460:	d021      	beq.n	34a6 <am_hal_iom_spi_read_nq+0x146>
    3462:	2902      	cmp	r1, #2
    3464:	d01b      	beq.n	349e <am_hal_iom_spi_read_nq+0x13e>
    3466:	2903      	cmp	r1, #3
    3468:	d015      	beq.n	3496 <am_hal_iom_spi_read_nq+0x136>
    346a:	2904      	cmp	r1, #4
    346c:	d00f      	beq.n	348e <am_hal_iom_spi_read_nq+0x12e>
    346e:	2905      	cmp	r1, #5
    3470:	d009      	beq.n	3486 <am_hal_iom_spi_read_nq+0x126>
    3472:	2906      	cmp	r1, #6
    3474:	d003      	beq.n	347e <am_hal_iom_spi_read_nq+0x11e>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    3476:	9d00      	ldr	r5, [sp, #0]
    3478:	6829      	ldr	r1, [r5, #0]
    347a:	f842 1b04 	str.w	r1, [r2], #4
    347e:	9d00      	ldr	r5, [sp, #0]
    3480:	6829      	ldr	r1, [r5, #0]
    3482:	f842 1b04 	str.w	r1, [r2], #4
    3486:	9d00      	ldr	r5, [sp, #0]
    3488:	6829      	ldr	r1, [r5, #0]
    348a:	f842 1b04 	str.w	r1, [r2], #4
    348e:	9d00      	ldr	r5, [sp, #0]
    3490:	6829      	ldr	r1, [r5, #0]
    3492:	f842 1b04 	str.w	r1, [r2], #4
    3496:	9d00      	ldr	r5, [sp, #0]
    3498:	6829      	ldr	r1, [r5, #0]
    349a:	f842 1b04 	str.w	r1, [r2], #4
    349e:	9d00      	ldr	r5, [sp, #0]
    34a0:	6829      	ldr	r1, [r5, #0]
    34a2:	f842 1b04 	str.w	r1, [r2], #4
    34a6:	9d00      	ldr	r5, [sp, #0]
    34a8:	6829      	ldr	r1, [r5, #0]
    34aa:	f842 1b04 	str.w	r1, [r2], #4
    for ( i = 0; i < ui32NumWords; i++ )
    34ae:	455a      	cmp	r2, fp
    34b0:	d020      	beq.n	34f4 <am_hal_iom_spi_read_nq+0x194>
    34b2:	9d00      	ldr	r5, [sp, #0]
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    34b4:	f8d5 c000 	ldr.w	ip, [r5]
    34b8:	4696      	mov	lr, r2
    34ba:	3220      	adds	r2, #32
    34bc:	f84e cb04 	str.w	ip, [lr], #4
    34c0:	f8d5 8000 	ldr.w	r8, [r5]
    34c4:	f842 8c1c 	str.w	r8, [r2, #-28]
    34c8:	f8d5 c000 	ldr.w	ip, [r5]
    34cc:	f8ce c004 	str.w	ip, [lr, #4]
    34d0:	6829      	ldr	r1, [r5, #0]
    34d2:	f842 1c14 	str.w	r1, [r2, #-20]
    34d6:	6829      	ldr	r1, [r5, #0]
    34d8:	f842 1c10 	str.w	r1, [r2, #-16]
    34dc:	6829      	ldr	r1, [r5, #0]
    34de:	f842 1c0c 	str.w	r1, [r2, #-12]
    34e2:	6829      	ldr	r1, [r5, #0]
    34e4:	f842 1c08 	str.w	r1, [r2, #-8]
    34e8:	6829      	ldr	r1, [r5, #0]
    34ea:	f842 1c04 	str.w	r1, [r2, #-4]
    for ( i = 0; i < ui32NumWords; i++ )
    34ee:	455a      	cmp	r2, fp
    34f0:	d1e0      	bne.n	34b4 <am_hal_iom_spi_read_nq+0x154>
    34f2:	9500      	str	r5, [sp, #0]
    if ( ui32Leftovers )
    34f4:	b188      	cbz	r0, 351a <am_hal_iom_spi_read_nq+0x1ba>
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
    34f6:	9a00      	ldr	r2, [sp, #0]
        for ( j = 0; j < ui32Leftovers; j++ )
    34f8:	2801      	cmp	r0, #1
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
    34fa:	6815      	ldr	r5, [r2, #0]
            pui8Data[j] = sTempBuffer.bytes[j];
    34fc:	f807 5026 	strb.w	r5, [r7, r6, lsl #2]
        pui8Data = (uint8_t *) (&pui32Data[i]);
    3500:	ea4f 0686 	mov.w	r6, r6, lsl #2
        for ( j = 0; j < ui32Leftovers; j++ )
    3504:	d009      	beq.n	351a <am_hal_iom_spi_read_nq+0x1ba>
            pui8Data[j] = sTempBuffer.bytes[j];
    3506:	4437      	add	r7, r6
        for ( j = 0; j < ui32Leftovers; j++ )
    3508:	2803      	cmp	r0, #3
            pui8Data[j] = sTempBuffer.bytes[j];
    350a:	f3c5 2107 	ubfx	r1, r5, #8, #8
    350e:	bf08      	it	eq
    3510:	f3c5 4507 	ubfxeq	r5, r5, #16, #8
    3514:	7079      	strb	r1, [r7, #1]
    3516:	bf08      	it	eq
    3518:	70bd      	strbeq	r5, [r7, #2]
        if ( bCmdCmp == true )
    351a:	b90b      	cbnz	r3, 3520 <am_hal_iom_spi_read_nq+0x1c0>
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    351c:	f8da 3000 	ldr.w	r3, [sl]
    waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    3520:	9f02      	ldr	r7, [sp, #8]
    3522:	2301      	movs	r3, #1
    3524:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
    3528:	461a      	mov	r2, r3
    352a:	4651      	mov	r1, sl
    352c:	f7fe fa02 	bl	1934 <am_hal_flash_delay_status_change>
    if (waitStatus != 1)
    3530:	2801      	cmp	r0, #1
    3532:	f000 80a8 	beq.w	3686 <am_hal_iom_spi_read_nq+0x326>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    3536:	2001      	movs	r0, #1
    3538:	f809 0004 	strb.w	r0, [r9, r4]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    353c:	9a00      	ldr	r2, [sp, #0]
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    353e:	9d01      	ldr	r5, [sp, #4]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    3540:	f240 74ff 	movw	r4, #2047	; 0x7ff
    3544:	f8c2 4208 	str.w	r4, [r2, #520]	; 0x208
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    3548:	f8c2 5200 	str.w	r5, [r2, #512]	; 0x200
    354c:	e725      	b.n	339a <am_hal_iom_spi_read_nq+0x3a>
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    354e:	f8d5 111c 	ldr.w	r1, [r5, #284]	; 0x11c
            am_hal_iom_fifo_read(ui32Module, pui32Data, ui32BytesInFifo & ~0x3);
    3552:	f002 00fc 	and.w	r0, r2, #252	; 0xfc
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    3556:	0709      	lsls	r1, r1, #28
            am_hal_iom_fifo_read(ui32Module, pui32Data, ui32BytesInFifo & ~0x3);
    3558:	9000      	str	r0, [sp, #0]
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    355a:	d56c      	bpl.n	3636 <am_hal_iom_spi_read_nq+0x2d6>
    for ( i = 0; i < ui32NumWords; i++ )
    355c:	9a00      	ldr	r2, [sp, #0]
    355e:	0890      	lsrs	r0, r2, #2
    3560:	2a00      	cmp	r2, #0
    3562:	d04b      	beq.n	35fc <am_hal_iom_spi_read_nq+0x29c>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    3564:	463a      	mov	r2, r7
    3566:	6829      	ldr	r1, [r5, #0]
    3568:	f842 1b04 	str.w	r1, [r2], #4
    356c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    3570:	1bc1      	subs	r1, r0, r7
    3572:	f1a1 0c04 	sub.w	ip, r1, #4
    for ( i = 0; i < ui32NumWords; i++ )
    3576:	4290      	cmp	r0, r2
    3578:	f3cc 0182 	ubfx	r1, ip, #2, #3
    357c:	d03d      	beq.n	35fa <am_hal_iom_spi_read_nq+0x29a>
    357e:	b311      	cbz	r1, 35c6 <am_hal_iom_spi_read_nq+0x266>
    3580:	2901      	cmp	r1, #1
    3582:	d01b      	beq.n	35bc <am_hal_iom_spi_read_nq+0x25c>
    3584:	2902      	cmp	r1, #2
    3586:	d016      	beq.n	35b6 <am_hal_iom_spi_read_nq+0x256>
    3588:	2903      	cmp	r1, #3
    358a:	d011      	beq.n	35b0 <am_hal_iom_spi_read_nq+0x250>
    358c:	2904      	cmp	r1, #4
    358e:	d00c      	beq.n	35aa <am_hal_iom_spi_read_nq+0x24a>
    3590:	2905      	cmp	r1, #5
    3592:	d007      	beq.n	35a4 <am_hal_iom_spi_read_nq+0x244>
    3594:	2906      	cmp	r1, #6
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    3596:	bf1c      	itt	ne
    3598:	6829      	ldrne	r1, [r5, #0]
    359a:	f842 1b04 	strne.w	r1, [r2], #4
    359e:	6829      	ldr	r1, [r5, #0]
    35a0:	f842 1b04 	str.w	r1, [r2], #4
    35a4:	6829      	ldr	r1, [r5, #0]
    35a6:	f842 1b04 	str.w	r1, [r2], #4
    35aa:	6829      	ldr	r1, [r5, #0]
    35ac:	f842 1b04 	str.w	r1, [r2], #4
    35b0:	6829      	ldr	r1, [r5, #0]
    35b2:	f842 1b04 	str.w	r1, [r2], #4
    35b6:	6829      	ldr	r1, [r5, #0]
    35b8:	f842 1b04 	str.w	r1, [r2], #4
    35bc:	6829      	ldr	r1, [r5, #0]
    35be:	f842 1b04 	str.w	r1, [r2], #4
    for ( i = 0; i < ui32NumWords; i++ )
    35c2:	4290      	cmp	r0, r2
    35c4:	d019      	beq.n	35fa <am_hal_iom_spi_read_nq+0x29a>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    35c6:	4694      	mov	ip, r2
    35c8:	f8d5 e000 	ldr.w	lr, [r5]
    35cc:	f84c eb04 	str.w	lr, [ip], #4
    35d0:	f8d5 e000 	ldr.w	lr, [r5]
    35d4:	f8c2 e004 	str.w	lr, [r2, #4]
    35d8:	f8d5 e000 	ldr.w	lr, [r5]
    35dc:	f8cc e004 	str.w	lr, [ip, #4]
    35e0:	6829      	ldr	r1, [r5, #0]
    35e2:	60d1      	str	r1, [r2, #12]
    35e4:	6829      	ldr	r1, [r5, #0]
    35e6:	6111      	str	r1, [r2, #16]
    35e8:	6829      	ldr	r1, [r5, #0]
    35ea:	6151      	str	r1, [r2, #20]
    35ec:	6829      	ldr	r1, [r5, #0]
    35ee:	6191      	str	r1, [r2, #24]
    35f0:	6829      	ldr	r1, [r5, #0]
    35f2:	61d1      	str	r1, [r2, #28]
    35f4:	3220      	adds	r2, #32
    for ( i = 0; i < ui32NumWords; i++ )
    35f6:	4290      	cmp	r0, r2
    35f8:	d1e5      	bne.n	35c6 <am_hal_iom_spi_read_nq+0x266>
    35fa:	9a00      	ldr	r2, [sp, #0]
            pui32Data += ui32BytesInFifo >> 2;
    35fc:	f008 00fc 	and.w	r0, r8, #252	; 0xfc
    3600:	4407      	add	r7, r0
            ui32NumBytes -= ui32BytesInFifo & ~0x3;
    3602:	1ab6      	subs	r6, r6, r2
        if ( bCmdCmp == true )
    3604:	b933      	cbnz	r3, 3614 <am_hal_iom_spi_read_nq+0x2b4>
        bCmdCmp = AM_BFRn(IOMSTR, ui32Module, INTSTAT, CMDCMP);
    3606:	f8da 3000 	ldr.w	r3, [sl]
    360a:	f003 0301 	and.w	r3, r3, #1
    while ( ui32NumBytes )
    360e:	2e00      	cmp	r6, #0
    3610:	f47f aef4 	bne.w	33fc <am_hal_iom_spi_read_nq+0x9c>
    3614:	9500      	str	r5, [sp, #0]
    3616:	e783      	b.n	3520 <am_hal_iom_spi_read_nq+0x1c0>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    3618:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    361c:	b2c1      	uxtb	r1, r0
    361e:	42b1      	cmp	r1, r6
    3620:	f4bf af09 	bcs.w	3436 <am_hal_iom_spi_read_nq+0xd6>
    3624:	4a0d      	ldr	r2, [pc, #52]	; (365c <am_hal_iom_spi_read_nq+0x2fc>)
    3626:	480e      	ldr	r0, [pc, #56]	; (3660 <am_hal_iom_spi_read_nq+0x300>)
    3628:	9303      	str	r3, [sp, #12]
    362a:	f44f 6178 	mov.w	r1, #3968	; 0xf80
    362e:	f7fe f97b 	bl	1928 <am_hal_debug_error>
    3632:	9b03      	ldr	r3, [sp, #12]
    3634:	e6ff      	b.n	3436 <am_hal_iom_spi_read_nq+0xd6>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    3636:	f8db 2000 	ldr.w	r2, [fp]
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    363a:	b2d1      	uxtb	r1, r2
    363c:	4288      	cmp	r0, r1
    363e:	d98d      	bls.n	355c <am_hal_iom_spi_read_nq+0x1fc>
    3640:	4a06      	ldr	r2, [pc, #24]	; (365c <am_hal_iom_spi_read_nq+0x2fc>)
    3642:	4807      	ldr	r0, [pc, #28]	; (3660 <am_hal_iom_spi_read_nq+0x300>)
    3644:	9303      	str	r3, [sp, #12]
    3646:	f44f 6178 	mov.w	r1, #3968	; 0xf80
    364a:	f7fe f96d 	bl	1928 <am_hal_debug_error>
    364e:	9b03      	ldr	r3, [sp, #12]
    3650:	e784      	b.n	355c <am_hal_iom_spi_read_nq+0x1fc>
    3652:	bf00      	nop
    3654:	10000854 	.word	0x10000854
    3658:	10000a70 	.word	0x10000a70
    365c:	00004bd8 	.word	0x00004bd8
    3660:	00004bc4 	.word	0x00004bc4
    3664:	1000085c 	.word	0x1000085c
    if ( (WORKAROUND_IOM == ui32Module) && !(ui32Options & AM_HAL_IOM_RAW) &&
    3668:	990e      	ldr	r1, [sp, #56]	; 0x38
    366a:	f011 4280 	ands.w	r2, r1, #1073741824	; 0x40000000
    366e:	d104      	bne.n	367a <am_hal_iom_spi_read_nq+0x31a>
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B )
    3670:	4b24      	ldr	r3, [pc, #144]	; (3704 <am_hal_iom_spi_read_nq+0x3a4>)
    3672:	681d      	ldr	r5, [r3, #0]
    3674:	b2e9      	uxtb	r1, r5
    3676:	2920      	cmp	r1, #32
    3678:	d017      	beq.n	36aa <am_hal_iom_spi_read_nq+0x34a>
    367a:	f500 7a01 	add.w	sl, r0, #516	; 0x204
    367e:	4822      	ldr	r0, [pc, #136]	; (3708 <am_hal_iom_spi_read_nq+0x3a8>)
    3680:	9002      	str	r0, [sp, #8]
    3682:	9d00      	ldr	r5, [sp, #0]
    3684:	e6a3      	b.n	33ce <am_hal_iom_spi_read_nq+0x6e>
        return AM_REGn(IOMSTR, ui32Module, INTSTAT);
    3686:	f8da 3000 	ldr.w	r3, [sl]
    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    368a:	f013 0fcc 	tst.w	r3, #204	; 0xcc
    368e:	d10a      	bne.n	36a6 <am_hal_iom_spi_read_nq+0x346>
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
    3690:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    3694:	d127      	bne.n	36e6 <am_hal_iom_spi_read_nq+0x386>
    am_hal_iom_status_e ui32Status = AM_HAL_IOM_SUCCESS;
    3696:	f013 0f10 	tst.w	r3, #16
    369a:	bf14      	ite	ne
    369c:	2006      	movne	r0, #6
    369e:	2000      	moveq	r0, #0
        g_iom_error_status[ui32Module] = ui32Status = internal_iom_get_int_err(ui32Module, 0);
    36a0:	f809 0004 	strb.w	r0, [r9, r4]
    36a4:	e74a      	b.n	353c <am_hal_iom_spi_read_nq+0x1dc>
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
    36a6:	2005      	movs	r0, #5
    36a8:	e7fa      	b.n	36a0 <am_hal_iom_spi_read_nq+0x340>
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data, 0,
    36aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    36ac:	4d16      	ldr	r5, [pc, #88]	; (3708 <am_hal_iom_spi_read_nq+0x3a8>)
    36ae:	9502      	str	r5, [sp, #8]
        am_hal_iom_workaround_word_write(ui32ChipSelect, pui32Data, 0,
    36b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    36b4:	4639      	mov	r1, r7
    36b6:	4640      	mov	r0, r8
    36b8:	f7fe ff00 	bl	24bc <am_hal_iom_workaround_word_write>
        waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    36bc:	9a00      	ldr	r2, [sp, #0]
    36be:	6928      	ldr	r0, [r5, #16]
    36c0:	f502 7a01 	add.w	sl, r2, #516	; 0x204
    36c4:	2301      	movs	r3, #1
    36c6:	4651      	mov	r1, sl
    36c8:	461a      	mov	r2, r3
    36ca:	f7fe f933 	bl	1934 <am_hal_flash_delay_status_change>
        if (waitStatus != 1)
    36ce:	2801      	cmp	r0, #1
    36d0:	d00b      	beq.n	36ea <am_hal_iom_spi_read_nq+0x38a>
            AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    36d2:	9e00      	ldr	r6, [sp, #0]
            AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    36d4:	9901      	ldr	r1, [sp, #4]
            AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    36d6:	f8c6 b208 	str.w	fp, [r6, #520]	; 0x208
            g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    36da:	2001      	movs	r0, #1
    36dc:	f889 0004 	strb.w	r0, [r9, #4]
            AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    36e0:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    36e4:	e659      	b.n	339a <am_hal_iom_spi_read_nq+0x3a>
        ui32Status = AM_HAL_IOM_ERR_I2C_ARB;
    36e6:	2007      	movs	r0, #7
    36e8:	e7da      	b.n	36a0 <am_hal_iom_spi_read_nq+0x340>
        AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    36ea:	9d00      	ldr	r5, [sp, #0]
        ui32Options |= AM_HAL_IOM_RAW;
    36ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    36ee:	f8d5 1208 	ldr.w	r1, [r5, #520]	; 0x208
        ui32Options |= AM_HAL_IOM_RAW;
    36f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
        AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    36f6:	f041 0001 	orr.w	r0, r1, #1
        ui32Options |= AM_HAL_IOM_RAW;
    36fa:	920e      	str	r2, [sp, #56]	; 0x38
        AM_BFWn(IOMSTR, ui32Module, INTCLR, CMDCMP, 1);
    36fc:	f8c5 0208 	str.w	r0, [r5, #520]	; 0x208
    3700:	e665      	b.n	33ce <am_hal_iom_spi_read_nq+0x6e>
    3702:	bf00      	nop
    3704:	4002000c 	.word	0x4002000c
    3708:	10000a70 	.word	0x10000a70

0000370c <am_hal_iom_spi_read>:
{
    370c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    3710:	2805      	cmp	r0, #5
{
    3712:	b08d      	sub	sp, #52	; 0x34
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    3714:	d904      	bls.n	3720 <am_hal_iom_spi_read+0x14>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    3716:	2602      	movs	r6, #2
}
    3718:	4630      	mov	r0, r6
    371a:	b00d      	add	sp, #52	; 0x34
    371c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    3720:	f500 27a0 	add.w	r7, r0, #327680	; 0x50000
    3724:	3704      	adds	r7, #4
    3726:	033d      	lsls	r5, r7, #12
    3728:	f240 7cff 	movw	ip, #2047	; 0x7ff
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    372c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 380c <am_hal_iom_spi_read+0x100>
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    3730:	f8c5 c208 	str.w	ip, [r5, #520]	; 0x208
    if (ui32NumBytes == 0)
    3734:	f640 79fe 	movw	r9, #4094	; 0xffe
    3738:	1e5d      	subs	r5, r3, #1
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    373a:	2600      	movs	r6, #0
    if (ui32NumBytes == 0)
    373c:	454d      	cmp	r5, r9
    373e:	4604      	mov	r4, r0
    3740:	469e      	mov	lr, r3
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    3742:	f808 6000 	strb.w	r6, [r8, r0]
    if (ui32NumBytes == 0)
    3746:	d906      	bls.n	3756 <am_hal_iom_spi_read+0x4a>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    3748:	2603      	movs	r6, #3
    374a:	f808 6000 	strb.w	r6, [r8, r0]
}
    374e:	4630      	mov	r0, r6
    3750:	b00d      	add	sp, #52	; 0x34
    3752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( g_psIOMQueue[ui32Module].pui8Data != NULL )
    3756:	ea4f 0a40 	mov.w	sl, r0, lsl #1
    375a:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 3810 <am_hal_iom_spi_read+0x104>
    375e:	9202      	str	r2, [sp, #8]
    3760:	eb0a 0500 	add.w	r5, sl, r0
    3764:	eb0b 09c5 	add.w	r9, fp, r5, lsl #3
    3768:	461f      	mov	r7, r3
    376a:	f8d9 6014 	ldr.w	r6, [r9, #20]
    376e:	2e00      	cmp	r6, #0
    3770:	d042      	beq.n	37f8 <am_hal_iom_spi_read+0xec>
    3772:	460d      	mov	r5, r1
    ui32Critical = am_hal_interrupt_master_disable();
    3774:	f7fe fa0a 	bl	1b8c <am_hal_interrupt_master_disable>
    if ( (g_bIomBusy[ui32Module] == false) &&
    3778:	4b22      	ldr	r3, [pc, #136]	; (3804 <am_hal_iom_spi_read+0xf8>)
    ui32Critical = am_hal_interrupt_master_disable();
    377a:	9003      	str	r0, [sp, #12]
    if ( (g_bIomBusy[ui32Module] == false) &&
    377c:	5d1a      	ldrb	r2, [r3, r4]
    377e:	b912      	cbnz	r2, 3786 <am_hal_iom_spi_read+0x7a>
    3780:	f8d9 0008 	ldr.w	r0, [r9, #8]
    3784:	b1d0      	cbz	r0, 37bc <am_hal_iom_spi_read+0xb0>
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    3786:	eb0a 0104 	add.w	r1, sl, r4
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_READ;
    378a:	2301      	movs	r3, #1
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    378c:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
        sIOMTransaction.ui32ChipSelect = ui32ChipSelect;
    3790:	9507      	str	r5, [sp, #28]
        sIOMTransaction.pfnCallback = pfnCallback;
    3792:	2600      	movs	r6, #0
        sIOMTransaction.pui32Data = pui32Data;
    3794:	9d02      	ldr	r5, [sp, #8]
        sIOMTransaction.ui32NumBytes = ui32NumBytes;
    3796:	9709      	str	r7, [sp, #36]	; 0x24
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    3798:	461a      	mov	r2, r3
        sIOMTransaction.ui32Options = ui32Options;
    379a:	9f16      	ldr	r7, [sp, #88]	; 0x58
        sIOMTransaction.ui32Module = ui32Module;
    379c:	9406      	str	r4, [sp, #24]
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    379e:	a905      	add	r1, sp, #20
        sIOMTransaction.pui32Data = pui32Data;
    37a0:	9508      	str	r5, [sp, #32]
        sIOMTransaction.ui32Options = ui32Options;
    37a2:	970a      	str	r7, [sp, #40]	; 0x28
        sIOMTransaction.ui32Operation = AM_HAL_IOM_QUEUE_SPI_READ;
    37a4:	9305      	str	r3, [sp, #20]
        sIOMTransaction.pfnCallback = pfnCallback;
    37a6:	960b      	str	r6, [sp, #44]	; 0x2c
        if ( am_hal_queue_item_add(&g_psIOMQueue[ui32Module], &sIOMTransaction, 1) == false )
    37a8:	f000 fd4c 	bl	4244 <am_hal_queue_item_add>
    37ac:	b9d0      	cbnz	r0, 37e4 <am_hal_iom_spi_read+0xd8>
            ui32Status = AM_HAL_IOM_ERR_RESOURCE_ERR;
    37ae:	2608      	movs	r6, #8
    am_hal_interrupt_master_set(ui32Critical);
    37b0:	9803      	ldr	r0, [sp, #12]
        g_iom_error_status[ui32Module] = ui32Status;
    37b2:	f808 6004 	strb.w	r6, [r8, r4]
    am_hal_interrupt_master_set(ui32Critical);
    37b6:	f7fe f9ed 	bl	1b94 <am_hal_interrupt_master_set>
    37ba:	e7ad      	b.n	3718 <am_hal_iom_spi_read+0xc>
    while ( g_bIomBusy[ui32Module] );
    37bc:	5d1a      	ldrb	r2, [r3, r4]
    37be:	f002 0eff 	and.w	lr, r2, #255	; 0xff
    37c2:	2a00      	cmp	r2, #0
    37c4:	d1fa      	bne.n	37bc <am_hal_iom_spi_read+0xb0>
    37c6:	9816      	ldr	r0, [sp, #88]	; 0x58
    37c8:	9000      	str	r0, [sp, #0]
    37ca:	f8cd e004 	str.w	lr, [sp, #4]
    37ce:	463b      	mov	r3, r7
    37d0:	9a02      	ldr	r2, [sp, #8]
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    37d2:	f808 e004 	strb.w	lr, [r8, r4]
    37d6:	4629      	mov	r1, r5
    37d8:	4620      	mov	r0, r4
    37da:	f7ff fb27 	bl	2e2c <am_hal_iom_spi_read_nb.part.7>
    if (ui32Status != AM_HAL_IOM_SUCCESS)
    37de:	4606      	mov	r6, r0
    37e0:	2800      	cmp	r0, #0
    37e2:	d1e5      	bne.n	37b0 <am_hal_iom_spi_read+0xa4>
    am_hal_interrupt_master_set(ui32Critical);
    37e4:	9803      	ldr	r0, [sp, #12]
    37e6:	f7fe f9d5 	bl	1b94 <am_hal_interrupt_master_set>
            am_hal_iom_queue_flush(ui32Module);
    37ea:	4907      	ldr	r1, [pc, #28]	; (3808 <am_hal_iom_spi_read+0xfc>)
    37ec:	4620      	mov	r0, r4
    37ee:	680b      	ldr	r3, [r1, #0]
    37f0:	4798      	blx	r3
            ui32Status = g_iom_error_status[ui32Module];
    37f2:	f818 6004 	ldrb.w	r6, [r8, r4]
    37f6:	e78f      	b.n	3718 <am_hal_iom_spi_read+0xc>
        ui32Status = am_hal_iom_spi_read_nq(ui32Module, ui32ChipSelect, pui32Data,
    37f8:	9c16      	ldr	r4, [sp, #88]	; 0x58
    37fa:	9400      	str	r4, [sp, #0]
    37fc:	f7ff fdb0 	bl	3360 <am_hal_iom_spi_read_nq>
    3800:	4606      	mov	r6, r0
    3802:	e789      	b.n	3718 <am_hal_iom_spi_read+0xc>
    3804:	10000854 	.word	0x10000854
    3808:	10000848 	.word	0x10000848
    380c:	1000085c 	.word	0x1000085c
    3810:	10000b00 	.word	0x10000b00

00003814 <am_hal_iom_spi_fullduplex_nq>:
{
    3814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    3818:	2805      	cmp	r0, #5
{
    381a:	b087      	sub	sp, #28
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    381c:	d904      	bls.n	3828 <am_hal_iom_spi_fullduplex_nq+0x14>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    381e:	2602      	movs	r6, #2
}
    3820:	4630      	mov	r0, r6
    3822:	b007      	add	sp, #28
    3824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3828:	460f      	mov	r7, r1
    382a:	4911      	ldr	r1, [pc, #68]	; (3870 <am_hal_iom_spi_fullduplex_nq+0x5c>)
    382c:	4604      	mov	r4, r0
    382e:	4616      	mov	r6, r2
    3830:	4698      	mov	r8, r3
    while ( g_bIomBusy[ui32Module] );
    3832:	5d0b      	ldrb	r3, [r1, r4]
    3834:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    3838:	2b00      	cmp	r3, #0
    383a:	d1fa      	bne.n	3832 <am_hal_iom_spi_fullduplex_nq+0x1e>
    if (ui32NumBytes == 0)
    383c:	9810      	ldr	r0, [sp, #64]	; 0x40
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    383e:	f8df 9038 	ldr.w	r9, [pc, #56]	; 3878 <am_hal_iom_spi_fullduplex_nq+0x64>
    if (ui32NumBytes == 0)
    3842:	1e45      	subs	r5, r0, #1
    3844:	f640 71fe 	movw	r1, #4094	; 0xffe
    3848:	428d      	cmp	r5, r1
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    384a:	f809 2004 	strb.w	r2, [r9, r4]
    if (ui32NumBytes == 0)
    384e:	d906      	bls.n	385e <am_hal_iom_spi_fullduplex_nq+0x4a>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    3850:	2603      	movs	r6, #3
}
    3852:	4630      	mov	r0, r6
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    3854:	f809 6004 	strb.w	r6, [r9, r4]
}
    3858:	b007      	add	sp, #28
    385a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) ==
    385e:	4b05      	ldr	r3, [pc, #20]	; (3874 <am_hal_iom_spi_fullduplex_nq+0x60>)
    3860:	6818      	ldr	r0, [r3, #0]
    3862:	b2c5      	uxtb	r5, r0
    3864:	2d22      	cmp	r5, #34	; 0x22
    3866:	d009      	beq.n	387c <am_hal_iom_spi_fullduplex_nq+0x68>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
    3868:	2605      	movs	r6, #5
    386a:	f809 6004 	strb.w	r6, [r9, r4]
        return ui32Status;
    386e:	e7d7      	b.n	3820 <am_hal_iom_spi_fullduplex_nq+0xc>
    3870:	10000854 	.word	0x10000854
    3874:	4002000c 	.word	0x4002000c
    3878:	1000085c 	.word	0x1000085c
    AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_FULLDUP_FULLDUP;
    387c:	f504 21a0 	add.w	r1, r4, #327680	; 0x50000
    3880:	3104      	adds	r1, #4
    3882:	030d      	lsls	r5, r1, #12
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    3884:	f240 70ff 	movw	r0, #2047	; 0x7ff
    AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_FULLDUP_FULLDUP;
    3888:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    388c:	f043 0108 	orr.w	r1, r3, #8
    3890:	f8c5 111c 	str.w	r1, [r5, #284]	; 0x11c
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ?
    3894:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    3898:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTEN) = 0;
    389c:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    38a0:	f8c5 0208 	str.w	r0, [r5, #520]	; 0x208
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    38a4:	f8d5 011c 	ldr.w	r0, [r5, #284]	; 0x11c
    ui32IntConfig = AM_REGn(IOMSTR, ui32Module, INTEN);
    38a8:	9302      	str	r3, [sp, #8]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    38aa:	f010 0f08 	tst.w	r0, #8
    ui32WriteSize = ui32NumBytes > 64 ? 64 : ui32NumBytes;
    38ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    38b0:	f8d5 2100 	ldr.w	r2, [r5, #256]	; 0x100
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    38b4:	bf14      	ite	ne
    38b6:	2040      	movne	r0, #64	; 0x40
    38b8:	2080      	moveq	r0, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    38ba:	1a81      	subs	r1, r0, r2
    ui32WriteSize = ui32NumBytes > 64 ? 64 : ui32NumBytes;
    38bc:	2b40      	cmp	r3, #64	; 0x40
    38be:	bf28      	it	cs
    38c0:	2340      	movcs	r3, #64	; 0x40
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    38c2:	f001 0cfc 	and.w	ip, r1, #252	; 0xfc
    AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_FULLDUP_FULLDUP;
    38c6:	f505 708e 	add.w	r0, r5, #284	; 0x11c
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    38ca:	4563      	cmp	r3, ip
    ui32WriteSize = ui32NumBytes > 64 ? 64 : ui32NumBytes;
    38cc:	469b      	mov	fp, r3
    AM_REGn(IOMSTR, ui32Module, CFG) |= AM_REG_IOMSTR_CFG_FULLDUP_FULLDUP;
    38ce:	9001      	str	r0, [sp, #4]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    38d0:	f505 7a80 	add.w	sl, r5, #256	; 0x100
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    38d4:	d905      	bls.n	38e2 <am_hal_iom_spi_fullduplex_nq+0xce>
    38d6:	4ab6      	ldr	r2, [pc, #728]	; (3bb0 <am_hal_iom_spi_fullduplex_nq+0x39c>)
    38d8:	48b6      	ldr	r0, [pc, #728]	; (3bb4 <am_hal_iom_spi_fullduplex_nq+0x3a0>)
    38da:	f640 7145 	movw	r1, #3909	; 0xf45
    38de:	f7fe f823 	bl	1928 <am_hal_debug_error>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    38e2:	4633      	mov	r3, r6
    38e4:	43f2      	mvns	r2, r6
    38e6:	f853 1b04 	ldr.w	r1, [r3], #4
    38ea:	6029      	str	r1, [r5, #0]
    38ec:	4432      	add	r2, r6
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    38ee:	1b98      	subs	r0, r3, r6
    38f0:	445a      	add	r2, fp
    38f2:	4583      	cmp	fp, r0
    38f4:	f3c2 0282 	ubfx	r2, r2, #2, #3
    38f8:	d941      	bls.n	397e <am_hal_iom_spi_fullduplex_nq+0x16a>
    38fa:	b31a      	cbz	r2, 3944 <am_hal_iom_spi_fullduplex_nq+0x130>
    38fc:	2a01      	cmp	r2, #1
    38fe:	d01b      	beq.n	3938 <am_hal_iom_spi_fullduplex_nq+0x124>
    3900:	2a02      	cmp	r2, #2
    3902:	d016      	beq.n	3932 <am_hal_iom_spi_fullduplex_nq+0x11e>
    3904:	2a03      	cmp	r2, #3
    3906:	d011      	beq.n	392c <am_hal_iom_spi_fullduplex_nq+0x118>
    3908:	2a04      	cmp	r2, #4
    390a:	d00c      	beq.n	3926 <am_hal_iom_spi_fullduplex_nq+0x112>
    390c:	2a05      	cmp	r2, #5
    390e:	d007      	beq.n	3920 <am_hal_iom_spi_fullduplex_nq+0x10c>
    3910:	2a06      	cmp	r2, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    3912:	bf1c      	itt	ne
    3914:	f853 2b04 	ldrne.w	r2, [r3], #4
    3918:	602a      	strne	r2, [r5, #0]
    391a:	f853 1b04 	ldr.w	r1, [r3], #4
    391e:	6029      	str	r1, [r5, #0]
    3920:	f853 0b04 	ldr.w	r0, [r3], #4
    3924:	6028      	str	r0, [r5, #0]
    3926:	f853 2b04 	ldr.w	r2, [r3], #4
    392a:	602a      	str	r2, [r5, #0]
    392c:	f853 1b04 	ldr.w	r1, [r3], #4
    3930:	6029      	str	r1, [r5, #0]
    3932:	f853 0b04 	ldr.w	r0, [r3], #4
    3936:	6028      	str	r0, [r5, #0]
    3938:	f853 2b04 	ldr.w	r2, [r3], #4
    393c:	602a      	str	r2, [r5, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    393e:	1b99      	subs	r1, r3, r6
    3940:	458b      	cmp	fp, r1
    3942:	d91c      	bls.n	397e <am_hal_iom_spi_fullduplex_nq+0x16a>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    3944:	469e      	mov	lr, r3
    3946:	3320      	adds	r3, #32
    3948:	f85e 0b04 	ldr.w	r0, [lr], #4
    394c:	6028      	str	r0, [r5, #0]
    394e:	f853 2c1c 	ldr.w	r2, [r3, #-28]
    3952:	602a      	str	r2, [r5, #0]
    3954:	f8de 1004 	ldr.w	r1, [lr, #4]
    3958:	6029      	str	r1, [r5, #0]
    395a:	f853 0c14 	ldr.w	r0, [r3, #-20]
    395e:	6028      	str	r0, [r5, #0]
    3960:	f853 2c10 	ldr.w	r2, [r3, #-16]
    3964:	602a      	str	r2, [r5, #0]
    3966:	f853 1c0c 	ldr.w	r1, [r3, #-12]
    396a:	6029      	str	r1, [r5, #0]
    396c:	f853 0c08 	ldr.w	r0, [r3, #-8]
    3970:	6028      	str	r0, [r5, #0]
    3972:	f853 2c04 	ldr.w	r2, [r3, #-4]
    3976:	602a      	str	r2, [r5, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    3978:	1b99      	subs	r1, r3, r6
    397a:	458b      	cmp	fp, r1
    397c:	d8e2      	bhi.n	3944 <am_hal_iom_spi_fullduplex_nq+0x130>
    ui32Command |= ui32Options & 0x5C00FF00;
    397e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ui32Command |= (ui32NumBytes & 0xFF);
    3980:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
    ui32Command |= ui32Options & 0x5C00FF00;
    3984:	f023 4023 	bic.w	r0, r3, #2734686208	; 0xa3000000
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    3988:	043f      	lsls	r7, r7, #16
    ui32Command |= ui32Options & 0x5C00FF00;
    398a:	f000 22ff 	and.w	r2, r0, #4278255360	; 0xff00ff00
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    398e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ui32Command |= ((ui32ChipSelect << 16) & 0x00070000);
    3990:	f407 27e0 	and.w	r7, r7, #458752	; 0x70000
    ui32Command |= ui32Options & 0x5C00FF00;
    3994:	4317      	orrs	r7, r2
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    3996:	03d8      	lsls	r0, r3, #15
    ui32Command |= ui32Options & 0x5C00FF00;
    3998:	430f      	orrs	r7, r1
    while (ui32DataWritten < ui32NumBytes)
    399a:	9910      	ldr	r1, [sp, #64]	; 0x40
    ui32Command |= ((ui32NumBytes & 0xF00) << 15);
    399c:	f000 62f0 	and.w	r2, r0, #125829120	; 0x7800000
    ui32Command |= ui32Options & 0x5C00FF00;
    39a0:	4317      	orrs	r7, r2
    pui32TxData += ui32WriteSize >> 2;
    39a2:	f02b 0303 	bic.w	r3, fp, #3
    while (ui32DataWritten < ui32NumBytes)
    39a6:	4559      	cmp	r1, fp
    AM_REGn(IOMSTR, ui32Module, CMD) = ui32Command;
    39a8:	f8c5 7110 	str.w	r7, [r5, #272]	; 0x110
    pui32TxData += ui32WriteSize >> 2;
    39ac:	441e      	add	r6, r3
    while (ui32DataWritten < ui32NumBytes)
    39ae:	f04f 0700 	mov.w	r7, #0
    39b2:	bf88      	it	hi
    39b4:	9403      	strhi	r4, [sp, #12]
    39b6:	f240 8091 	bls.w	3adc <am_hal_iom_spi_fullduplex_nq+0x2c8>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    39ba:	f8da 4000 	ldr.w	r4, [sl]
        uint32_t ui32DataSent = ui32DataWritten - am_hal_iom_fifo_full_slots(ui32Module);
    39be:	b2e0      	uxtb	r0, r4
    39c0:	ebab 0200 	sub.w	r2, fp, r0
        ui32ReadSize = (ui32DataSent - ui32DataRead) & (~0x3);
    39c4:	1bd3      	subs	r3, r2, r7
    39c6:	f023 0103 	bic.w	r1, r3, #3
        if (ui32ReadSize <= 4)
    39ca:	2904      	cmp	r1, #4
    39cc:	f200 8115 	bhi.w	3bfa <am_hal_iom_spi_fullduplex_nq+0x3e6>
    39d0:	f04f 0e00 	mov.w	lr, #0
            ui32ReadSize = 0;
    39d4:	4674      	mov	r4, lr
        ui32DataRead += ui32ReadSize;
    39d6:	4427      	add	r7, r4
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    39d8:	f8da 2000 	ldr.w	r2, [sl]
        uint32_t ui32WritesRemaining = ui32NumBytes - ui32DataWritten;
    39dc:	9c10      	ldr	r4, [sp, #64]	; 0x40
        uint32_t ui32ReadWriteDelta = ui32DataWritten - ui32DataRead;
    39de:	ebab 0107 	sub.w	r1, fp, r7
        uint32_t ui32FifoSpace = 64 - am_hal_iom_fifo_full_slots(ui32Module);
    39e2:	b2d3      	uxtb	r3, r2
        if (ui32ReadWriteDelta > 64)
    39e4:	2940      	cmp	r1, #64	; 0x40
        pui32RxData += ui32ReadSize >> 2;
    39e6:	44f0      	add	r8, lr
        uint32_t ui32FifoSpace = 64 - am_hal_iom_fifo_full_slots(ui32Module);
    39e8:	f1c3 0040 	rsb	r0, r3, #64	; 0x40
        uint32_t ui32WritesRemaining = ui32NumBytes - ui32DataWritten;
    39ec:	eba4 040b 	sub.w	r4, r4, fp
        if (ui32ReadWriteDelta > 64)
    39f0:	f200 80fb 	bhi.w	3bea <am_hal_iom_spi_fullduplex_nq+0x3d6>
        uint32_t ui32ReadFifoSpace = 64 - ui32ReadWriteDelta;
    39f4:	f1c1 0240 	rsb	r2, r1, #64	; 0x40
        if ((ui32WritesRemaining <= ui32ReadFifoSpace) &&
    39f8:	4294      	cmp	r4, r2
    39fa:	d801      	bhi.n	3a00 <am_hal_iom_spi_fullduplex_nq+0x1ec>
    39fc:	4284      	cmp	r4, r0
    39fe:	d905      	bls.n	3a0c <am_hal_iom_spi_fullduplex_nq+0x1f8>
        else if (ui32FifoSpace <= ui32ReadFifoSpace)
    3a00:	4290      	cmp	r0, r2
            ui32WriteSize = ui32FifoSpace & (~0x3);
    3a02:	bf94      	ite	ls
    3a04:	f020 0403 	bicls.w	r4, r0, #3
            ui32WriteSize = ui32ReadFifoSpace & (~0x3);
    3a08:	f022 0403 	bichi.w	r4, r2, #3
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    3a0c:	9b01      	ldr	r3, [sp, #4]
    3a0e:	6818      	ldr	r0, [r3, #0]
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    3a10:	f8da 1000 	ldr.w	r1, [sl]
    ui32MaxFifoSize = ((0 == AM_BFRn(IOMSTR, ui32Module, CFG, FULLDUP)) ? AM_HAL_IOM_MAX_FIFO_SIZE : AM_HAL_IOM_MAX_FIFO_SIZE / 2);
    3a14:	f010 0f08 	tst.w	r0, #8
    3a18:	bf14      	ite	ne
    3a1a:	2040      	movne	r0, #64	; 0x40
    3a1c:	2080      	moveq	r0, #128	; 0x80
    return (ui32MaxFifoSize - AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ)) & (~0x3);
    3a1e:	1a42      	subs	r2, r0, r1
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    3a20:	f002 03fc 	and.w	r3, r2, #252	; 0xfc
    3a24:	429c      	cmp	r4, r3
    3a26:	f200 80e1 	bhi.w	3bec <am_hal_iom_spi_fullduplex_nq+0x3d8>
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    3a2a:	2c00      	cmp	r4, #0
    3a2c:	d04d      	beq.n	3aca <am_hal_iom_spi_fullduplex_nq+0x2b6>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    3a2e:	4632      	mov	r2, r6
    3a30:	43f1      	mvns	r1, r6
    3a32:	f852 0b04 	ldr.w	r0, [r2], #4
    3a36:	6028      	str	r0, [r5, #0]
    3a38:	4431      	add	r1, r6
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    3a3a:	1b93      	subs	r3, r2, r6
    3a3c:	4421      	add	r1, r4
    3a3e:	429c      	cmp	r4, r3
    3a40:	f3c1 0182 	ubfx	r1, r1, #2, #3
    3a44:	d941      	bls.n	3aca <am_hal_iom_spi_fullduplex_nq+0x2b6>
    3a46:	b319      	cbz	r1, 3a90 <am_hal_iom_spi_fullduplex_nq+0x27c>
    3a48:	2901      	cmp	r1, #1
    3a4a:	d01b      	beq.n	3a84 <am_hal_iom_spi_fullduplex_nq+0x270>
    3a4c:	2902      	cmp	r1, #2
    3a4e:	d016      	beq.n	3a7e <am_hal_iom_spi_fullduplex_nq+0x26a>
    3a50:	2903      	cmp	r1, #3
    3a52:	d011      	beq.n	3a78 <am_hal_iom_spi_fullduplex_nq+0x264>
    3a54:	2904      	cmp	r1, #4
    3a56:	d00c      	beq.n	3a72 <am_hal_iom_spi_fullduplex_nq+0x25e>
    3a58:	2905      	cmp	r1, #5
    3a5a:	d007      	beq.n	3a6c <am_hal_iom_spi_fullduplex_nq+0x258>
    3a5c:	2906      	cmp	r1, #6
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    3a5e:	bf1c      	itt	ne
    3a60:	f852 1b04 	ldrne.w	r1, [r2], #4
    3a64:	6029      	strne	r1, [r5, #0]
    3a66:	f852 0b04 	ldr.w	r0, [r2], #4
    3a6a:	6028      	str	r0, [r5, #0]
    3a6c:	f852 3b04 	ldr.w	r3, [r2], #4
    3a70:	602b      	str	r3, [r5, #0]
    3a72:	f852 1b04 	ldr.w	r1, [r2], #4
    3a76:	6029      	str	r1, [r5, #0]
    3a78:	f852 0b04 	ldr.w	r0, [r2], #4
    3a7c:	6028      	str	r0, [r5, #0]
    3a7e:	f852 3b04 	ldr.w	r3, [r2], #4
    3a82:	602b      	str	r3, [r5, #0]
    3a84:	f852 1b04 	ldr.w	r1, [r2], #4
    3a88:	6029      	str	r1, [r5, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    3a8a:	1b90      	subs	r0, r2, r6
    3a8c:	4284      	cmp	r4, r0
    3a8e:	d91c      	bls.n	3aca <am_hal_iom_spi_fullduplex_nq+0x2b6>
        AM_REGn(IOMSTR, ui32Module, FIFO) = pui32Data[ui32Index];
    3a90:	4694      	mov	ip, r2
    3a92:	3220      	adds	r2, #32
    3a94:	f85c 3b04 	ldr.w	r3, [ip], #4
    3a98:	602b      	str	r3, [r5, #0]
    3a9a:	f852 1c1c 	ldr.w	r1, [r2, #-28]
    3a9e:	6029      	str	r1, [r5, #0]
    3aa0:	f8dc 0004 	ldr.w	r0, [ip, #4]
    3aa4:	6028      	str	r0, [r5, #0]
    3aa6:	f852 3c14 	ldr.w	r3, [r2, #-20]
    3aaa:	602b      	str	r3, [r5, #0]
    3aac:	f852 1c10 	ldr.w	r1, [r2, #-16]
    3ab0:	6029      	str	r1, [r5, #0]
    3ab2:	f852 0c0c 	ldr.w	r0, [r2, #-12]
    3ab6:	6028      	str	r0, [r5, #0]
    3ab8:	f852 3c08 	ldr.w	r3, [r2, #-8]
    3abc:	602b      	str	r3, [r5, #0]
    3abe:	f852 1c04 	ldr.w	r1, [r2, #-4]
    3ac2:	6029      	str	r1, [r5, #0]
    for ( ui32Index = 0; (4 * ui32Index) < ui32NumBytes; ui32Index++ )
    3ac4:	1b90      	subs	r0, r2, r6
    3ac6:	4284      	cmp	r4, r0
    3ac8:	d8e2      	bhi.n	3a90 <am_hal_iom_spi_fullduplex_nq+0x27c>
    while (ui32DataWritten < ui32NumBytes)
    3aca:	9a10      	ldr	r2, [sp, #64]	; 0x40
        ui32DataWritten += ui32WriteSize;
    3acc:	44a3      	add	fp, r4
        pui32TxData += ui32WriteSize >> 2;
    3ace:	f024 0e03 	bic.w	lr, r4, #3
    while (ui32DataWritten < ui32NumBytes)
    3ad2:	455a      	cmp	r2, fp
        pui32TxData += ui32WriteSize >> 2;
    3ad4:	4476      	add	r6, lr
    while (ui32DataWritten < ui32NumBytes)
    3ad6:	f63f af70 	bhi.w	39ba <am_hal_iom_spi_fullduplex_nq+0x1a6>
    3ada:	9c03      	ldr	r4, [sp, #12]
    waitStatus = am_hal_flash_delay_status_change(ui32StatusTimeout[ui32Module],
    3adc:	4936      	ldr	r1, [pc, #216]	; (3bb8 <am_hal_iom_spi_fullduplex_nq+0x3a4>)
    3ade:	2301      	movs	r3, #1
    3ae0:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
    3ae4:	461a      	mov	r2, r3
    3ae6:	f505 7101 	add.w	r1, r5, #516	; 0x204
    3aea:	f7fd ff23 	bl	1934 <am_hal_flash_delay_status_change>
    if (waitStatus != 1)
    3aee:	2801      	cmp	r0, #1
    3af0:	f000 80ee 	beq.w	3cd0 <am_hal_iom_spi_fullduplex_nq+0x4bc>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_TIMEOUT;
    3af4:	2601      	movs	r6, #1
    3af6:	f809 6004 	strb.w	r6, [r9, r4]
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    3afa:	f8da 4000 	ldr.w	r4, [sl]
    while (am_hal_iom_fifo_full_slots(ui32Module));
    3afe:	f014 0fff 	tst.w	r4, #255	; 0xff
    3b02:	d1fa      	bne.n	3afa <am_hal_iom_spi_fullduplex_nq+0x2e6>
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    3b04:	f8d5 011c 	ldr.w	r0, [r5, #284]	; 0x11c
    ui32ReadSize = ui32NumBytes - ui32DataRead;
    3b08:	9a10      	ldr	r2, [sp, #64]	; 0x40
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    3b0a:	0703      	lsls	r3, r0, #28
    ui32ReadSize = ui32NumBytes - ui32DataRead;
    3b0c:	eba2 0707 	sub.w	r7, r2, r7
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    3b10:	f140 80d0 	bpl.w	3cb4 <am_hal_iom_spi_fullduplex_nq+0x4a0>
    for ( i = 0; i < ui32NumWords; i++ )
    3b14:	ea5f 0c97 	movs.w	ip, r7, lsr #2
    3b18:	f007 0203 	and.w	r2, r7, #3
    3b1c:	d04e      	beq.n	3bbc <am_hal_iom_spi_fullduplex_nq+0x3a8>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    3b1e:	4643      	mov	r3, r8
    3b20:	682c      	ldr	r4, [r5, #0]
    3b22:	f843 4b04 	str.w	r4, [r3], #4
    3b26:	eb08 0b8c 	add.w	fp, r8, ip, lsl #2
    3b2a:	ebab 0a08 	sub.w	sl, fp, r8
    3b2e:	f1aa 0004 	sub.w	r0, sl, #4
    for ( i = 0; i < ui32NumWords; i++ )
    3b32:	459b      	cmp	fp, r3
    3b34:	f3c0 0182 	ubfx	r1, r0, #2, #3
    3b38:	d040      	beq.n	3bbc <am_hal_iom_spi_fullduplex_nq+0x3a8>
    3b3a:	b311      	cbz	r1, 3b82 <am_hal_iom_spi_fullduplex_nq+0x36e>
    3b3c:	2901      	cmp	r1, #1
    3b3e:	d01b      	beq.n	3b78 <am_hal_iom_spi_fullduplex_nq+0x364>
    3b40:	2902      	cmp	r1, #2
    3b42:	d016      	beq.n	3b72 <am_hal_iom_spi_fullduplex_nq+0x35e>
    3b44:	2903      	cmp	r1, #3
    3b46:	d011      	beq.n	3b6c <am_hal_iom_spi_fullduplex_nq+0x358>
    3b48:	2904      	cmp	r1, #4
    3b4a:	d00c      	beq.n	3b66 <am_hal_iom_spi_fullduplex_nq+0x352>
    3b4c:	2905      	cmp	r1, #5
    3b4e:	d007      	beq.n	3b60 <am_hal_iom_spi_fullduplex_nq+0x34c>
    3b50:	2906      	cmp	r1, #6
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    3b52:	bf1c      	itt	ne
    3b54:	6829      	ldrne	r1, [r5, #0]
    3b56:	f843 1b04 	strne.w	r1, [r3], #4
    3b5a:	682c      	ldr	r4, [r5, #0]
    3b5c:	f843 4b04 	str.w	r4, [r3], #4
    3b60:	6828      	ldr	r0, [r5, #0]
    3b62:	f843 0b04 	str.w	r0, [r3], #4
    3b66:	6829      	ldr	r1, [r5, #0]
    3b68:	f843 1b04 	str.w	r1, [r3], #4
    3b6c:	682c      	ldr	r4, [r5, #0]
    3b6e:	f843 4b04 	str.w	r4, [r3], #4
    3b72:	6828      	ldr	r0, [r5, #0]
    3b74:	f843 0b04 	str.w	r0, [r3], #4
    3b78:	6829      	ldr	r1, [r5, #0]
    3b7a:	f843 1b04 	str.w	r1, [r3], #4
    for ( i = 0; i < ui32NumWords; i++ )
    3b7e:	459b      	cmp	fp, r3
    3b80:	d01c      	beq.n	3bbc <am_hal_iom_spi_fullduplex_nq+0x3a8>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    3b82:	469e      	mov	lr, r3
    3b84:	682f      	ldr	r7, [r5, #0]
    3b86:	f84e 7b04 	str.w	r7, [lr], #4
    3b8a:	682c      	ldr	r4, [r5, #0]
    3b8c:	605c      	str	r4, [r3, #4]
    3b8e:	6828      	ldr	r0, [r5, #0]
    3b90:	f8ce 0004 	str.w	r0, [lr, #4]
    3b94:	6829      	ldr	r1, [r5, #0]
    3b96:	60d9      	str	r1, [r3, #12]
    3b98:	682f      	ldr	r7, [r5, #0]
    3b9a:	611f      	str	r7, [r3, #16]
    3b9c:	682c      	ldr	r4, [r5, #0]
    3b9e:	615c      	str	r4, [r3, #20]
    3ba0:	6828      	ldr	r0, [r5, #0]
    3ba2:	6198      	str	r0, [r3, #24]
    3ba4:	6829      	ldr	r1, [r5, #0]
    3ba6:	61d9      	str	r1, [r3, #28]
    3ba8:	3320      	adds	r3, #32
    for ( i = 0; i < ui32NumWords; i++ )
    3baa:	459b      	cmp	fp, r3
    3bac:	d1e9      	bne.n	3b82 <am_hal_iom_spi_fullduplex_nq+0x36e>
    3bae:	e005      	b.n	3bbc <am_hal_iom_spi_fullduplex_nq+0x3a8>
    3bb0:	00004b90 	.word	0x00004b90
    3bb4:	00004bc4 	.word	0x00004bc4
    3bb8:	10000a70 	.word	0x10000a70
    if ( ui32Leftovers )
    3bbc:	b13a      	cbz	r2, 3bce <am_hal_iom_spi_fullduplex_nq+0x3ba>
        sTempBuffer.words[0] = AM_REGn(IOMSTR, ui32Module, FIFO);
    3bbe:	a906      	add	r1, sp, #24
    3bc0:	682b      	ldr	r3, [r5, #0]
    3bc2:	f841 3d04 	str.w	r3, [r1, #-4]!
    3bc6:	eb08 008c 	add.w	r0, r8, ip, lsl #2
    3bca:	f000 ff99 	bl	4b00 <memcpy>
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    3bce:	f240 72ff 	movw	r2, #2047	; 0x7ff
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    3bd2:	9f02      	ldr	r7, [sp, #8]
    AM_REGn(IOMSTR, ui32Module, INTCLR) = AM_HAL_IOM_INT_ALL;
    3bd4:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
    AM_REGn(IOMSTR, ui32Module, INTEN) = ui32IntConfig;
    3bd8:	f8c5 7200 	str.w	r7, [r5, #512]	; 0x200
    AM_REGn(IOMSTR, ui32Module, CFG) &= ~AM_REG_IOMSTR_CFG_FULLDUP_FULLDUP;
    3bdc:	f8d5 411c 	ldr.w	r4, [r5, #284]	; 0x11c
    3be0:	f024 0008 	bic.w	r0, r4, #8
    3be4:	f8c5 011c 	str.w	r0, [r5, #284]	; 0x11c
    3be8:	e61a      	b.n	3820 <am_hal_iom_spi_fullduplex_nq+0xc>
    3bea:	e7fe      	b.n	3bea <am_hal_iom_spi_fullduplex_nq+0x3d6>
    am_hal_debug_assert_msg((am_hal_iom_fifo_empty_slots(ui32Module) >= ui32NumBytes),
    3bec:	4a42      	ldr	r2, [pc, #264]	; (3cf8 <am_hal_iom_spi_fullduplex_nq+0x4e4>)
    3bee:	4843      	ldr	r0, [pc, #268]	; (3cfc <am_hal_iom_spi_fullduplex_nq+0x4e8>)
    3bf0:	f640 7145 	movw	r1, #3909	; 0xf45
    3bf4:	f7fd fe98 	bl	1928 <am_hal_debug_error>
    3bf8:	e719      	b.n	3a2e <am_hal_iom_spi_fullduplex_nq+0x21a>
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    3bfa:	9c01      	ldr	r4, [sp, #4]
    3bfc:	6820      	ldr	r0, [r4, #0]
    3bfe:	0702      	lsls	r2, r0, #28
            ui32ReadSize -= 4;
    3c00:	f1a1 0404 	sub.w	r4, r1, #4
    if ( AM_REG_IOMSTR_CFG_FULLDUP_NORMAL == (AM_REGn(IOMSTR, ui32Module, CFG) & AM_REG_IOMSTR_CFG_FULLDUP_M) )
    3c04:	d54a      	bpl.n	3c9c <am_hal_iom_spi_fullduplex_nq+0x488>
    for ( i = 0; i < ui32NumWords; i++ )
    3c06:	08a1      	lsrs	r1, r4, #2
    3c08:	2c00      	cmp	r4, #0
    3c0a:	d045      	beq.n	3c98 <am_hal_iom_spi_fullduplex_nq+0x484>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    3c0c:	4642      	mov	r2, r8
    3c0e:	6828      	ldr	r0, [r5, #0]
    3c10:	f842 0b04 	str.w	r0, [r2], #4
    3c14:	0089      	lsls	r1, r1, #2
    3c16:	eb08 0e01 	add.w	lr, r8, r1
    3c1a:	1f0b      	subs	r3, r1, #4
    for ( i = 0; i < ui32NumWords; i++ )
    3c1c:	4596      	cmp	lr, r2
    3c1e:	f3c3 0082 	ubfx	r0, r3, #2, #3
    3c22:	d039      	beq.n	3c98 <am_hal_iom_spi_fullduplex_nq+0x484>
    3c24:	b310      	cbz	r0, 3c6c <am_hal_iom_spi_fullduplex_nq+0x458>
    3c26:	2801      	cmp	r0, #1
    3c28:	d01b      	beq.n	3c62 <am_hal_iom_spi_fullduplex_nq+0x44e>
    3c2a:	2802      	cmp	r0, #2
    3c2c:	d016      	beq.n	3c5c <am_hal_iom_spi_fullduplex_nq+0x448>
    3c2e:	2803      	cmp	r0, #3
    3c30:	d011      	beq.n	3c56 <am_hal_iom_spi_fullduplex_nq+0x442>
    3c32:	2804      	cmp	r0, #4
    3c34:	d00c      	beq.n	3c50 <am_hal_iom_spi_fullduplex_nq+0x43c>
    3c36:	2805      	cmp	r0, #5
    3c38:	d007      	beq.n	3c4a <am_hal_iom_spi_fullduplex_nq+0x436>
    3c3a:	2806      	cmp	r0, #6
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    3c3c:	bf1c      	itt	ne
    3c3e:	6828      	ldrne	r0, [r5, #0]
    3c40:	f842 0b04 	strne.w	r0, [r2], #4
    3c44:	682b      	ldr	r3, [r5, #0]
    3c46:	f842 3b04 	str.w	r3, [r2], #4
    3c4a:	6828      	ldr	r0, [r5, #0]
    3c4c:	f842 0b04 	str.w	r0, [r2], #4
    3c50:	682b      	ldr	r3, [r5, #0]
    3c52:	f842 3b04 	str.w	r3, [r2], #4
    3c56:	6828      	ldr	r0, [r5, #0]
    3c58:	f842 0b04 	str.w	r0, [r2], #4
    3c5c:	682b      	ldr	r3, [r5, #0]
    3c5e:	f842 3b04 	str.w	r3, [r2], #4
    3c62:	6828      	ldr	r0, [r5, #0]
    3c64:	f842 0b04 	str.w	r0, [r2], #4
    for ( i = 0; i < ui32NumWords; i++ )
    3c68:	4596      	cmp	lr, r2
    3c6a:	d015      	beq.n	3c98 <am_hal_iom_spi_fullduplex_nq+0x484>
        pui32Data[i] = AM_REGn(IOMSTR, ui32Module, FIFO);
    3c6c:	4694      	mov	ip, r2
    3c6e:	682b      	ldr	r3, [r5, #0]
    3c70:	f84c 3b04 	str.w	r3, [ip], #4
    3c74:	6828      	ldr	r0, [r5, #0]
    3c76:	6050      	str	r0, [r2, #4]
    3c78:	682b      	ldr	r3, [r5, #0]
    3c7a:	f8cc 3004 	str.w	r3, [ip, #4]
    3c7e:	6828      	ldr	r0, [r5, #0]
    3c80:	60d0      	str	r0, [r2, #12]
    3c82:	682b      	ldr	r3, [r5, #0]
    3c84:	6113      	str	r3, [r2, #16]
    3c86:	6828      	ldr	r0, [r5, #0]
    3c88:	6150      	str	r0, [r2, #20]
    3c8a:	682b      	ldr	r3, [r5, #0]
    3c8c:	6193      	str	r3, [r2, #24]
    3c8e:	6828      	ldr	r0, [r5, #0]
    3c90:	61d0      	str	r0, [r2, #28]
    3c92:	3220      	adds	r2, #32
    for ( i = 0; i < ui32NumWords; i++ )
    3c94:	4596      	cmp	lr, r2
    3c96:	d1e9      	bne.n	3c6c <am_hal_iom_spi_fullduplex_nq+0x458>
    3c98:	468e      	mov	lr, r1
    3c9a:	e69c      	b.n	39d6 <am_hal_iom_spi_fullduplex_nq+0x1c2>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    3c9c:	f8da 2000 	ldr.w	r2, [sl]
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    3ca0:	b2d3      	uxtb	r3, r2
    3ca2:	429c      	cmp	r4, r3
    3ca4:	d9af      	bls.n	3c06 <am_hal_iom_spi_fullduplex_nq+0x3f2>
    3ca6:	4a16      	ldr	r2, [pc, #88]	; (3d00 <am_hal_iom_spi_fullduplex_nq+0x4ec>)
    3ca8:	4814      	ldr	r0, [pc, #80]	; (3cfc <am_hal_iom_spi_fullduplex_nq+0x4e8>)
    3caa:	f44f 6178 	mov.w	r1, #3968	; 0xf80
    3cae:	f7fd fe3b 	bl	1928 <am_hal_debug_error>
    3cb2:	e7a8      	b.n	3c06 <am_hal_iom_spi_fullduplex_nq+0x3f2>
    return AM_BFRn(IOMSTR, ui32Module, FIFOPTR, FIFOSIZ);
    3cb4:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
        am_hal_debug_assert_msg((am_hal_iom_fifo_full_slots(ui32Module) >= ui32NumBytes),
    3cb8:	fa5f f981 	uxtb.w	r9, r1
    3cbc:	454f      	cmp	r7, r9
    3cbe:	f67f af29 	bls.w	3b14 <am_hal_iom_spi_fullduplex_nq+0x300>
    3cc2:	4a0f      	ldr	r2, [pc, #60]	; (3d00 <am_hal_iom_spi_fullduplex_nq+0x4ec>)
    3cc4:	480d      	ldr	r0, [pc, #52]	; (3cfc <am_hal_iom_spi_fullduplex_nq+0x4e8>)
    3cc6:	f44f 6178 	mov.w	r1, #3968	; 0xf80
    3cca:	f7fd fe2d 	bl	1928 <am_hal_debug_error>
    3cce:	e721      	b.n	3b14 <am_hal_iom_spi_fullduplex_nq+0x300>
        return AM_REGn(IOMSTR, ui32Module, INTSTAT);
    3cd0:	f8d5 3204 	ldr.w	r3, [r5, #516]	; 0x204
    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
    3cd4:	f013 0fcc 	tst.w	r3, #204	; 0xcc
    3cd8:	d10a      	bne.n	3cf0 <am_hal_iom_spi_fullduplex_nq+0x4dc>
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
    3cda:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    3cde:	d109      	bne.n	3cf4 <am_hal_iom_spi_fullduplex_nq+0x4e0>
    am_hal_iom_status_e ui32Status = AM_HAL_IOM_SUCCESS;
    3ce0:	f013 0f10 	tst.w	r3, #16
    3ce4:	bf14      	ite	ne
    3ce6:	2606      	movne	r6, #6
    3ce8:	2600      	moveq	r6, #0
        g_iom_error_status[ui32Module] = ui32Status = internal_iom_get_int_err(ui32Module, 0);
    3cea:	f809 6004 	strb.w	r6, [r9, r4]
    3cee:	e704      	b.n	3afa <am_hal_iom_spi_fullduplex_nq+0x2e6>
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
    3cf0:	2605      	movs	r6, #5
    3cf2:	e7fa      	b.n	3cea <am_hal_iom_spi_fullduplex_nq+0x4d6>
        ui32Status = AM_HAL_IOM_ERR_I2C_ARB;
    3cf4:	2607      	movs	r6, #7
    3cf6:	e7f8      	b.n	3cea <am_hal_iom_spi_fullduplex_nq+0x4d6>
    3cf8:	00004b90 	.word	0x00004b90
    3cfc:	00004bc4 	.word	0x00004bc4
    3d00:	00004bd8 	.word	0x00004bd8

00003d04 <am_hal_iom_spi_fullduplex>:
{
    3d04:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    3d06:	2805      	cmp	r0, #5
{
    3d08:	9d05      	ldr	r5, [sp, #20]
    3d0a:	9e06      	ldr	r6, [sp, #24]
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    3d0c:	d901      	bls.n	3d12 <am_hal_iom_spi_fullduplex+0xe>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    3d0e:	2002      	movs	r0, #2
    3d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    3d12:	4f0e      	ldr	r7, [pc, #56]	; (3d4c <am_hal_iom_spi_fullduplex+0x48>)
    3d14:	f04f 0e00 	mov.w	lr, #0
    3d18:	4604      	mov	r4, r0
    3d1a:	f807 e000 	strb.w	lr, [r7, r0]
    if (ui32NumBytes == 0)
    3d1e:	b915      	cbnz	r5, 3d26 <am_hal_iom_spi_fullduplex+0x22>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    3d20:	2003      	movs	r0, #3
    3d22:	5538      	strb	r0, [r7, r4]
        return ui32Status;
    3d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( (AM_REG(MCUCTRL, CHIPREV) & 0xFF) ==
    3d26:	f8df e028 	ldr.w	lr, [pc, #40]	; 3d50 <am_hal_iom_spi_fullduplex+0x4c>
    3d2a:	f8de c000 	ldr.w	ip, [lr]
    3d2e:	fa5f fe8c 	uxtb.w	lr, ip
    3d32:	f1be 0f22 	cmp.w	lr, #34	; 0x22
    3d36:	d002      	beq.n	3d3e <am_hal_iom_spi_fullduplex+0x3a>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
    3d38:	2005      	movs	r0, #5
    3d3a:	5538      	strb	r0, [r7, r4]
        return ui32Status;
    3d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32Status = am_hal_iom_spi_fullduplex_nq(ui32Module, ui32ChipSelect,
    3d3e:	9606      	str	r6, [sp, #24]
    3d40:	9505      	str	r5, [sp, #20]
}
    3d42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        ui32Status = am_hal_iom_spi_fullduplex_nq(ui32Module, ui32ChipSelect,
    3d46:	f7ff bd65 	b.w	3814 <am_hal_iom_spi_fullduplex_nq>
    3d4a:	bf00      	nop
    3d4c:	1000085c 	.word	0x1000085c
    3d50:	4002000c 	.word	0x4002000c

00003d54 <am_hal_iom_spi_write_nb>:
{
    3d54:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    3d56:	2805      	cmp	r0, #5
{
    3d58:	9f05      	ldr	r7, [sp, #20]
    3d5a:	f8dd e018 	ldr.w	lr, [sp, #24]
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    3d5e:	d901      	bls.n	3d64 <am_hal_iom_spi_write_nb+0x10>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    3d60:	2002      	movs	r0, #2
}
    3d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d64:	4e0c      	ldr	r6, [pc, #48]	; (3d98 <am_hal_iom_spi_write_nb+0x44>)
    while ( g_bIomBusy[ui32Module] );
    3d66:	5c34      	ldrb	r4, [r6, r0]
    3d68:	f004 05ff 	and.w	r5, r4, #255	; 0xff
    3d6c:	2c00      	cmp	r4, #0
    3d6e:	d1fa      	bne.n	3d66 <am_hal_iom_spi_write_nb+0x12>
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    3d70:	4c0a      	ldr	r4, [pc, #40]	; (3d9c <am_hal_iom_spi_write_nb+0x48>)
    if (ui32NumBytes == 0)
    3d72:	f103 3cff 	add.w	ip, r3, #4294967295
    3d76:	f640 76fe 	movw	r6, #4094	; 0xffe
    3d7a:	45b4      	cmp	ip, r6
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    3d7c:	5425      	strb	r5, [r4, r0]
    if (ui32NumBytes == 0)
    3d7e:	d903      	bls.n	3d88 <am_hal_iom_spi_write_nb+0x34>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    3d80:	2303      	movs	r3, #3
    3d82:	5423      	strb	r3, [r4, r0]
        return ui32Status;
    3d84:	4618      	mov	r0, r3
    3d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d88:	f8cd e018 	str.w	lr, [sp, #24]
    3d8c:	9705      	str	r7, [sp, #20]
}
    3d8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3d92:	f7fe bf5f 	b.w	2c54 <am_hal_iom_spi_write_nb.part.6>
    3d96:	bf00      	nop
    3d98:	10000854 	.word	0x10000854
    3d9c:	1000085c 	.word	0x1000085c

00003da0 <am_hal_iom_spi_read_nb>:
{
    3da0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    3da2:	2805      	cmp	r0, #5
{
    3da4:	9f05      	ldr	r7, [sp, #20]
    3da6:	f8dd e018 	ldr.w	lr, [sp, #24]
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    3daa:	d901      	bls.n	3db0 <am_hal_iom_spi_read_nb+0x10>
        return AM_HAL_IOM_ERR_INVALID_MODULE;
    3dac:	2002      	movs	r0, #2
}
    3dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3db0:	4e0c      	ldr	r6, [pc, #48]	; (3de4 <am_hal_iom_spi_read_nb+0x44>)
    while ( g_bIomBusy[ui32Module] );
    3db2:	5c34      	ldrb	r4, [r6, r0]
    3db4:	f004 05ff 	and.w	r5, r4, #255	; 0xff
    3db8:	2c00      	cmp	r4, #0
    3dba:	d1fa      	bne.n	3db2 <am_hal_iom_spi_read_nb+0x12>
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    3dbc:	4c0a      	ldr	r4, [pc, #40]	; (3de8 <am_hal_iom_spi_read_nb+0x48>)
    if (ui32NumBytes == 0)
    3dbe:	f103 3cff 	add.w	ip, r3, #4294967295
    3dc2:	f640 76fe 	movw	r6, #4094	; 0xffe
    3dc6:	45b4      	cmp	ip, r6
    ui32Status = g_iom_error_status[ui32Module] = AM_HAL_IOM_SUCCESS;
    3dc8:	5425      	strb	r5, [r4, r0]
    if (ui32NumBytes == 0)
    3dca:	d903      	bls.n	3dd4 <am_hal_iom_spi_read_nb+0x34>
        g_iom_error_status[ui32Module] = ui32Status = AM_HAL_IOM_ERR_INVALID_PARAM;
    3dcc:	2303      	movs	r3, #3
    3dce:	5423      	strb	r3, [r4, r0]
        return ui32Status;
    3dd0:	4618      	mov	r0, r3
    3dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3dd4:	f8cd e018 	str.w	lr, [sp, #24]
    3dd8:	9705      	str	r7, [sp, #20]
}
    3dda:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3dde:	f7ff b825 	b.w	2e2c <am_hal_iom_spi_read_nb.part.7>
    3de2:	bf00      	nop
    3de4:	10000854 	.word	0x10000854
    3de8:	1000085c 	.word	0x1000085c

00003dec <am_hal_iom_poll_complete>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    3dec:	2805      	cmp	r0, #5
    3dee:	d803      	bhi.n	3df8 <am_hal_iom_poll_complete+0xc>
    3df0:	4a02      	ldr	r2, [pc, #8]	; (3dfc <am_hal_iom_poll_complete+0x10>)
    while ( g_bIomBusy[ui32Module] );
    3df2:	5c13      	ldrb	r3, [r2, r0]
    3df4:	2b00      	cmp	r3, #0
    3df6:	d1fc      	bne.n	3df2 <am_hal_iom_poll_complete+0x6>
    3df8:	4770      	bx	lr
    3dfa:	bf00      	nop
    3dfc:	10000854 	.word	0x10000854

00003e00 <am_hal_iom_int_service>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    3e00:	2805      	cmp	r0, #5
    3e02:	d801      	bhi.n	3e08 <am_hal_iom_int_service+0x8>
    3e04:	f7fd befe 	b.w	1c04 <am_hal_iom_int_service.part.20>
    3e08:	4770      	bx	lr
    3e0a:	bf00      	nop

00003e0c <am_hal_iom_int_enable>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    3e0c:	2805      	cmp	r0, #5
    3e0e:	d808      	bhi.n	3e22 <am_hal_iom_int_enable+0x16>
    AM_REGn(IOMSTR, ui32Module, INTEN) |= ui32Interrupt;
    3e10:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
    3e14:	3004      	adds	r0, #4
    3e16:	0302      	lsls	r2, r0, #12
    3e18:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    3e1c:	4319      	orrs	r1, r3
    3e1e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    3e22:	4770      	bx	lr

00003e24 <am_hal_iom_int_clear>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    3e24:	2805      	cmp	r0, #5
    3e26:	d805      	bhi.n	3e34 <am_hal_iom_int_clear+0x10>
    AM_REGn(IOMSTR, ui32Module, INTCLR) = ui32Interrupt;
    3e28:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
    3e2c:	3004      	adds	r0, #4
    3e2e:	0302      	lsls	r2, r0, #12
    3e30:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    3e34:	4770      	bx	lr
    3e36:	bf00      	nop

00003e38 <am_hal_iom_int_status_get>:
    if ( ui32Module >= AM_REG_IOMSTR_NUM_MODULES )
    3e38:	2805      	cmp	r0, #5
    3e3a:	d80d      	bhi.n	3e58 <am_hal_iom_int_status_get+0x20>
        uint32_t u32RetVal = AM_REGn(IOMSTR, ui32Module, INTSTAT);
    3e3c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
    3e40:	3004      	adds	r0, #4
    3e42:	0302      	lsls	r2, r0, #12
    if ( bEnabledOnly )
    3e44:	b911      	cbnz	r1, 3e4c <am_hal_iom_int_status_get+0x14>
        return AM_REGn(IOMSTR, ui32Module, INTSTAT);
    3e46:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
    3e4a:	4770      	bx	lr
        uint32_t u32RetVal = AM_REGn(IOMSTR, ui32Module, INTSTAT);
    3e4c:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
        return u32RetVal & AM_REGn(IOMSTR, ui32Module, INTEN);
    3e50:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    3e54:	4018      	ands	r0, r3
    3e56:	4770      	bx	lr
        return 0;
    3e58:	2000      	movs	r0, #0
    }
}
    3e5a:	4770      	bx	lr

00003e5c <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    3e5c:	490d      	ldr	r1, [pc, #52]	; (3e94 <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    3e5e:	4b0e      	ldr	r3, [pc, #56]	; (3e98 <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    3e60:	4a0e      	ldr	r2, [pc, #56]	; (3e9c <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    3e62:	681b      	ldr	r3, [r3, #0]
{
    3e64:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    3e66:	680d      	ldr	r5, [r1, #0]
    3e68:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    3e6a:	6815      	ldr	r5, [r2, #0]
    3e6c:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    3e6e:	4c0c      	ldr	r4, [pc, #48]	; (3ea0 <am_hal_mcuctrl_fault_status+0x44>)
    3e70:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    3e72:	4329      	orrs	r1, r5
    3e74:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    3e76:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    3e78:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    3e7c:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    3e7e:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    3e80:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    3e84:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    3e88:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    3e8a:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    3e8c:	6142      	str	r2, [r0, #20]
}
    3e8e:	bc70      	pop	{r4, r5, r6}
    3e90:	4770      	bx	lr
    3e92:	bf00      	nop
    3e94:	400201c4 	.word	0x400201c4
    3e98:	400201cc 	.word	0x400201cc
    3e9c:	400201c0 	.word	0x400201c0
    3ea0:	400201c8 	.word	0x400201c8

00003ea4 <am_hal_pwrctrl_periph_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_enable(uint32_t ui32Peripheral)
{
    3ea4:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    3ea6:	4604      	mov	r4, r0
{
    3ea8:	b082      	sub	sp, #8
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    3eaa:	b1b8      	cbz	r0, 3edc <am_hal_pwrctrl_periph_enable+0x38>
    3eac:	1e43      	subs	r3, r0, #1
    3eae:	4203      	tst	r3, r0
    3eb0:	d114      	bne.n	3edc <am_hal_pwrctrl_periph_enable+0x38>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    3eb2:	f7fd fe6b 	bl	1b8c <am_hal_interrupt_master_disable>

    //
    // Enable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    3eb6:	4a18      	ldr	r2, [pc, #96]	; (3f18 <am_hal_pwrctrl_periph_enable+0x74>)
    AM_CRITICAL_BEGIN_ASM
    3eb8:	9001      	str	r0, [sp, #4]
    AM_REG(PWRCTRL, DEVICEEN) |= ui32Peripheral;
    3eba:	6810      	ldr	r0, [r2, #0]
    3ebc:	4320      	orrs	r0, r4
    3ebe:	6010      	str	r0, [r2, #0]

    //
    // End Critical Section.
    //
    AM_CRITICAL_END_ASM
    3ec0:	9801      	ldr	r0, [sp, #4]
    3ec2:	f7fd fe67 	bl	1b94 <am_hal_interrupt_master_set>

    //
    // Wait for the power to stablize.  Using a simple delay loop is more
    // power efficient than a polling loop.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEEN_DELAYCYCLES / 3);
    3ec6:	200e      	movs	r0, #14
    3ec8:	f7fd fd30 	bl	192c <am_hal_flash_delay>

    //
    // Quick check to guarantee we're good (should never be more than 1 read).
    //
    POLL_PWRSTATUS(ui32Peripheral);
    3ecc:	f014 0f0e 	tst.w	r4, #14
    3ed0:	d10a      	bne.n	3ee8 <am_hal_pwrctrl_periph_enable+0x44>
    3ed2:	f014 0f70 	tst.w	r4, #112	; 0x70
    3ed6:	d00e      	beq.n	3ef6 <am_hal_pwrctrl_periph_enable+0x52>
    3ed8:	2408      	movs	r4, #8
    3eda:	e006      	b.n	3eea <am_hal_pwrctrl_periph_enable+0x46>
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    3edc:	4a0f      	ldr	r2, [pc, #60]	; (3f1c <am_hal_pwrctrl_periph_enable+0x78>)
    3ede:	4810      	ldr	r0, [pc, #64]	; (3f20 <am_hal_pwrctrl_periph_enable+0x7c>)
    3ee0:	2160      	movs	r1, #96	; 0x60
    3ee2:	f7fd fd21 	bl	1928 <am_hal_debug_error>
    3ee6:	e7e4      	b.n	3eb2 <am_hal_pwrctrl_periph_enable+0xe>
    POLL_PWRSTATUS(ui32Peripheral);
    3ee8:	2404      	movs	r4, #4
    3eea:	4a0e      	ldr	r2, [pc, #56]	; (3f24 <am_hal_pwrctrl_periph_enable+0x80>)
    3eec:	6813      	ldr	r3, [r2, #0]
    3eee:	421c      	tst	r4, r3
    3ef0:	d0fc      	beq.n	3eec <am_hal_pwrctrl_periph_enable+0x48>
}
    3ef2:	b002      	add	sp, #8
    3ef4:	bd10      	pop	{r4, pc}
    POLL_PWRSTATUS(ui32Peripheral);
    3ef6:	f240 1181 	movw	r1, #385	; 0x181
    3efa:	420c      	tst	r4, r1
    3efc:	d108      	bne.n	3f10 <am_hal_pwrctrl_periph_enable+0x6c>
    3efe:	05a3      	lsls	r3, r4, #22
    3f00:	d408      	bmi.n	3f14 <am_hal_pwrctrl_periph_enable+0x70>
    3f02:	f414 6f80 	tst.w	r4, #1024	; 0x400
    3f06:	bf14      	ite	ne
    3f08:	2410      	movne	r4, #16
    3f0a:	f04f 34ff 	moveq.w	r4, #4294967295
    3f0e:	e7ec      	b.n	3eea <am_hal_pwrctrl_periph_enable+0x46>
    3f10:	2402      	movs	r4, #2
    3f12:	e7ea      	b.n	3eea <am_hal_pwrctrl_periph_enable+0x46>
    3f14:	2480      	movs	r4, #128	; 0x80
    3f16:	e7e8      	b.n	3eea <am_hal_pwrctrl_periph_enable+0x46>
    3f18:	40021008 	.word	0x40021008
    3f1c:	00004cd4 	.word	0x00004cd4
    3f20:	00004d08 	.word	0x00004d08
    3f24:	40021014 	.word	0x40021014

00003f28 <am_hal_pwrctrl_periph_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_pwrctrl_periph_disable(uint32_t ui32Peripheral)
{
    3f28:	b510      	push	{r4, lr}

    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    3f2a:	4604      	mov	r4, r0
{
    3f2c:	b082      	sub	sp, #8
    am_hal_debug_assert_msg(ONE_BIT(ui32Peripheral),
    3f2e:	b110      	cbz	r0, 3f36 <am_hal_pwrctrl_periph_disable+0xe>
    3f30:	1e43      	subs	r3, r0, #1
    3f32:	4203      	tst	r3, r0
    3f34:	d004      	beq.n	3f40 <am_hal_pwrctrl_periph_disable+0x18>
    3f36:	4a0a      	ldr	r2, [pc, #40]	; (3f60 <am_hal_pwrctrl_periph_disable+0x38>)
    3f38:	480a      	ldr	r0, [pc, #40]	; (3f64 <am_hal_pwrctrl_periph_disable+0x3c>)
    3f3a:	2190      	movs	r1, #144	; 0x90
    3f3c:	f7fd fcf4 	bl	1928 <am_hal_debug_error>
                        "Cannot enable more than one peripheral at a time.");

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    3f40:	f7fd fe24 	bl	1b8c <am_hal_interrupt_master_disable>

    //
    // Disable power control for the given device.
    //
    AM_REG(PWRCTRL, DEVICEEN) &= ~ui32Peripheral;
    3f44:	4a08      	ldr	r2, [pc, #32]	; (3f68 <am_hal_pwrctrl_periph_disable+0x40>)
    AM_CRITICAL_BEGIN_ASM
    3f46:	9001      	str	r0, [sp, #4]
    AM_REG(PWRCTRL, DEVICEEN) &= ~ui32Peripheral;
    3f48:	6810      	ldr	r0, [r2, #0]
    3f4a:	ea20 0104 	bic.w	r1, r0, r4
    3f4e:	6011      	str	r1, [r2, #0]

    //
    // End critical section.
    //
    AM_CRITICAL_END_ASM
    3f50:	9801      	ldr	r0, [sp, #4]
    3f52:	f7fd fe1f 	bl	1b94 <am_hal_interrupt_master_set>

    //
    // Wait for the power to stablize
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_DEVICEDIS_DELAYCYCLES / 3);
    3f56:	200e      	movs	r0, #14
    3f58:	f7fd fce8 	bl	192c <am_hal_flash_delay>
}
    3f5c:	b002      	add	sp, #8
    3f5e:	bd10      	pop	{r4, pc}
    3f60:	00004cd4 	.word	0x00004cd4
    3f64:	00004d08 	.word	0x00004d08
    3f68:	40021008 	.word	0x40021008

00003f6c <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    3f6c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
{
    3f70:	b430      	push	{r4, r5}
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    3f72:	d03a      	beq.n	3fea <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    3f74:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    3f78:	f000 809d 	beq.w	40b6 <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    3f7c:	2801      	cmp	r0, #1
    3f7e:	f000 809d 	beq.w	40bc <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    3f82:	2803      	cmp	r0, #3
    3f84:	f000 80a6 	beq.w	40d4 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    3f88:	2807      	cmp	r0, #7
    3f8a:	f000 809c 	beq.w	40c6 <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    3f8e:	280f      	cmp	r0, #15
    3f90:	f000 80a5 	beq.w	40de <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    3f94:	281f      	cmp	r0, #31
    3f96:	f000 80b0 	beq.w	40fa <am_hal_pwrctrl_memory_enable+0x18e>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    3f9a:	283f      	cmp	r0, #63	; 0x3f
    3f9c:	f000 80b4 	beq.w	4108 <am_hal_pwrctrl_memory_enable+0x19c>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    3fa0:	287f      	cmp	r0, #127	; 0x7f
    3fa2:	f000 80b8 	beq.w	4116 <am_hal_pwrctrl_memory_enable+0x1aa>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    3fa6:	28ff      	cmp	r0, #255	; 0xff
    3fa8:	f000 80a0 	beq.w	40ec <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    3fac:	f240 13ff 	movw	r3, #511	; 0x1ff
    3fb0:	4298      	cmp	r0, r3
    3fb2:	f000 80b7 	beq.w	4124 <am_hal_pwrctrl_memory_enable+0x1b8>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    3fb6:	f240 31ff 	movw	r1, #1023	; 0x3ff
    3fba:	4288      	cmp	r0, r1
    3fbc:	f000 80b8 	beq.w	4130 <am_hal_pwrctrl_memory_enable+0x1c4>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    3fc0:	f240 72ff 	movw	r2, #2047	; 0x7ff
    3fc4:	4290      	cmp	r0, r2
    3fc6:	d00e      	beq.n	3fe6 <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    3fc8:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    3fcc:	f000 80b6 	beq.w	413c <am_hal_pwrctrl_memory_enable+0x1d0>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    3fd0:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    3fd4:	42a0      	cmp	r0, r4
    3fd6:	f000 80b4 	beq.w	4142 <am_hal_pwrctrl_memory_enable+0x1d6>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    3fda:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    3fde:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    3fe2:	4560      	cmp	r0, ip
    3fe4:	d132      	bne.n	404c <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    3fe6:	495b      	ldr	r1, [pc, #364]	; (4154 <am_hal_pwrctrl_memory_enable+0x1e8>)
    3fe8:	e066      	b.n	40b8 <am_hal_pwrctrl_memory_enable+0x14c>
    3fea:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    3fee:	2340      	movs	r3, #64	; 0x40
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    3ff0:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    3ff2:	4c59      	ldr	r4, [pc, #356]	; (4158 <am_hal_pwrctrl_memory_enable+0x1ec>)
    3ff4:	6825      	ldr	r5, [r4, #0]
    3ff6:	402a      	ands	r2, r5
    3ff8:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    3ffa:	4a57      	ldr	r2, [pc, #348]	; (4158 <am_hal_pwrctrl_memory_enable+0x1ec>)
    3ffc:	6814      	ldr	r4, [r2, #0]
    3ffe:	4320      	orrs	r0, r4
    4000:	6010      	str	r0, [r2, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    4002:	2b00      	cmp	r3, #0
    4004:	d029      	beq.n	405a <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    4006:	4d55      	ldr	r5, [pc, #340]	; (415c <am_hal_pwrctrl_memory_enable+0x1f0>)
    4008:	6828      	ldr	r0, [r5, #0]
        while ( --i32TOcnt              &&
    400a:	4218      	tst	r0, r3
    400c:	bf18      	it	ne
    400e:	20c6      	movne	r0, #198	; 0xc6
    4010:	d01f      	beq.n	4052 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    4012:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    4014:	421a      	tst	r2, r3
    4016:	d01c      	beq.n	4052 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    4018:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    401a:	421c      	tst	r4, r3
    401c:	d019      	beq.n	4052 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    401e:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    4020:	421a      	tst	r2, r3
    4022:	d016      	beq.n	4052 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    4024:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    4026:	421c      	tst	r4, r3
    4028:	d013      	beq.n	4052 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    402a:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    402c:	421a      	tst	r2, r3
    402e:	d010      	beq.n	4052 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    4030:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    4032:	421c      	tst	r4, r3
    4034:	d00d      	beq.n	4052 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    4036:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    4038:	421a      	tst	r2, r3
    403a:	d00a      	beq.n	4052 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    403c:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    403e:	421c      	tst	r4, r3
    4040:	d007      	beq.n	4052 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    4042:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    4044:	421a      	tst	r2, r3
    4046:	d004      	beq.n	4052 <am_hal_pwrctrl_memory_enable+0xe6>
    4048:	3809      	subs	r0, #9
    404a:	d1e2      	bne.n	4012 <am_hal_pwrctrl_memory_enable+0xa6>
        return false;
    404c:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    404e:	bc30      	pop	{r4, r5}
    4050:	4770      	bx	lr
    if ( ui32PwrStatEnMask )
    4052:	b911      	cbnz	r1, 405a <am_hal_pwrctrl_memory_enable+0xee>
    return true;
    4054:	2001      	movs	r0, #1
}
    4056:	bc30      	pop	{r4, r5}
    4058:	4770      	bx	lr
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    405a:	4b40      	ldr	r3, [pc, #256]	; (415c <am_hal_pwrctrl_memory_enable+0x1f0>)
    405c:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    405e:	ea31 0405 	bics.w	r4, r1, r5
    4062:	bf18      	it	ne
    4064:	24c6      	movne	r4, #198	; 0xc6
    4066:	d0f5      	beq.n	4054 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4068:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    406a:	ea31 0000 	bics.w	r0, r1, r0
    406e:	d0f1      	beq.n	4054 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4070:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    4072:	ea31 0002 	bics.w	r0, r1, r2
    4076:	d0ed      	beq.n	4054 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4078:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    407a:	ea31 0005 	bics.w	r0, r1, r5
    407e:	d0e9      	beq.n	4054 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4080:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    4082:	ea31 0000 	bics.w	r0, r1, r0
    4086:	d0e5      	beq.n	4054 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4088:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    408a:	ea31 0002 	bics.w	r0, r1, r2
    408e:	d0e1      	beq.n	4054 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4090:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    4092:	ea31 0005 	bics.w	r0, r1, r5
    4096:	d0dd      	beq.n	4054 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    4098:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    409a:	ea31 0000 	bics.w	r0, r1, r0
    409e:	d0d9      	beq.n	4054 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    40a0:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    40a2:	ea31 0002 	bics.w	r0, r1, r2
    40a6:	d0d5      	beq.n	4054 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    40a8:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    40aa:	ea31 0005 	bics.w	r0, r1, r5
    40ae:	d0d1      	beq.n	4054 <am_hal_pwrctrl_memory_enable+0xe8>
    40b0:	3c09      	subs	r4, #9
    40b2:	d1d9      	bne.n	4068 <am_hal_pwrctrl_memory_enable+0xfc>
    40b4:	e7ca      	b.n	404c <am_hal_pwrctrl_memory_enable+0xe0>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    40b6:	2160      	movs	r1, #96	; 0x60
{
    40b8:	2300      	movs	r3, #0
    40ba:	e79e      	b.n	3ffa <am_hal_pwrctrl_memory_enable+0x8e>
    40bc:	4a28      	ldr	r2, [pc, #160]	; (4160 <am_hal_pwrctrl_memory_enable+0x1f4>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    40be:	4b29      	ldr	r3, [pc, #164]	; (4164 <am_hal_pwrctrl_memory_enable+0x1f8>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    40c0:	f44f 7180 	mov.w	r1, #256	; 0x100
    40c4:	e795      	b.n	3ff2 <am_hal_pwrctrl_memory_enable+0x86>
    40c6:	f46f 62ff 	mvn.w	r2, #2040	; 0x7f8
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    40ca:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    40ce:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    40d2:	e78e      	b.n	3ff2 <am_hal_pwrctrl_memory_enable+0x86>
    40d4:	4a24      	ldr	r2, [pc, #144]	; (4168 <am_hal_pwrctrl_memory_enable+0x1fc>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    40d6:	4b25      	ldr	r3, [pc, #148]	; (416c <am_hal_pwrctrl_memory_enable+0x200>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    40d8:	f44f 7140 	mov.w	r1, #768	; 0x300
    40dc:	e789      	b.n	3ff2 <am_hal_pwrctrl_memory_enable+0x86>
    40de:	f46f 62fe 	mvn.w	r2, #2032	; 0x7f0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    40e2:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    40e6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    40ea:	e782      	b.n	3ff2 <am_hal_pwrctrl_memory_enable+0x86>
    40ec:	f46f 62e0 	mvn.w	r2, #1792	; 0x700
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    40f0:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    40f4:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    40f8:	e77b      	b.n	3ff2 <am_hal_pwrctrl_memory_enable+0x86>
    40fa:	f46f 62fc 	mvn.w	r2, #2016	; 0x7e0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    40fe:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    4102:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    4106:	e774      	b.n	3ff2 <am_hal_pwrctrl_memory_enable+0x86>
    4108:	f46f 62f8 	mvn.w	r2, #1984	; 0x7c0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    410c:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    4110:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    4114:	e76d      	b.n	3ff2 <am_hal_pwrctrl_memory_enable+0x86>
    4116:	f46f 62f0 	mvn.w	r2, #1920	; 0x780
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    411a:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    411e:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    4122:	e766      	b.n	3ff2 <am_hal_pwrctrl_memory_enable+0x86>
    4124:	f46f 62c0 	mvn.w	r2, #1536	; 0x600
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    4128:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    412c:	4910      	ldr	r1, [pc, #64]	; (4170 <am_hal_pwrctrl_memory_enable+0x204>)
    412e:	e760      	b.n	3ff2 <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    4130:	4910      	ldr	r1, [pc, #64]	; (4174 <am_hal_pwrctrl_memory_enable+0x208>)
    4132:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    4136:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    413a:	e75a      	b.n	3ff2 <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    413c:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    4140:	e7ba      	b.n	40b8 <am_hal_pwrctrl_memory_enable+0x14c>
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    4142:	4805      	ldr	r0, [pc, #20]	; (4158 <am_hal_pwrctrl_memory_enable+0x1ec>)
    4144:	6803      	ldr	r3, [r0, #0]
    4146:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    414a:	6001      	str	r1, [r0, #0]
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    414c:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
        ui32PwrStatEnMask  = 0;
    4150:	2100      	movs	r1, #0
    4152:	e758      	b.n	4006 <am_hal_pwrctrl_memory_enable+0x9a>
    4154:	0007ff00 	.word	0x0007ff00
    4158:	40021010 	.word	0x40021010
    415c:	40021014 	.word	0x40021014
    4160:	fffff801 	.word	0xfffff801
    4164:	0007fe00 	.word	0x0007fe00
    4168:	fffff803 	.word	0xfffff803
    416c:	0007fc00 	.word	0x0007fc00
    4170:	0001ff00 	.word	0x0001ff00
    4174:	0003ff00 	.word	0x0003ff00

00004178 <am_hal_pwrctrl_bucks_enable>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    4178:	4b0b      	ldr	r3, [pc, #44]	; (41a8 <am_hal_pwrctrl_bucks_enable+0x30>)
    417a:	681a      	ldr	r2, [r3, #0]
    417c:	0792      	lsls	r2, r2, #30
    417e:	d502      	bpl.n	4186 <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    4180:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    4182:	07c3      	lsls	r3, r0, #31
    4184:	d40e      	bmi.n	41a4 <am_hal_pwrctrl_bucks_enable+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    4186:	4b09      	ldr	r3, [pc, #36]	; (41ac <am_hal_pwrctrl_bucks_enable+0x34>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    4188:	4a07      	ldr	r2, [pc, #28]	; (41a8 <am_hal_pwrctrl_bucks_enable+0x30>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    418a:	6819      	ldr	r1, [r3, #0]
    418c:	f041 0002 	orr.w	r0, r1, #2
    4190:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    4192:	6819      	ldr	r1, [r3, #0]
    4194:	f041 0001 	orr.w	r0, r1, #1
    4198:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    419a:	6813      	ldr	r3, [r2, #0]
    419c:	f003 0103 	and.w	r1, r3, #3
    41a0:	2903      	cmp	r1, #3
    41a2:	d1fa      	bne.n	419a <am_hal_pwrctrl_bucks_enable+0x22>
    41a4:	4770      	bx	lr
    41a6:	bf00      	nop
    41a8:	40021004 	.word	0x40021004
    41ac:	40021000 	.word	0x40021000

000041b0 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    41b0:	4b12      	ldr	r3, [pc, #72]	; (41fc <am_hal_pwrctrl_bucks_disable+0x4c>)
    41b2:	681a      	ldr	r2, [r3, #0]
    41b4:	0792      	lsls	r2, r2, #30
    41b6:	d402      	bmi.n	41be <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    41b8:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    41ba:	07c3      	lsls	r3, r0, #31
    41bc:	d51c      	bpl.n	41f8 <am_hal_pwrctrl_bucks_disable+0x48>
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    41be:	4910      	ldr	r1, [pc, #64]	; (4200 <am_hal_pwrctrl_bucks_disable+0x50>)
    41c0:	680b      	ldr	r3, [r1, #0]
    41c2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    41c6:	2a20      	cmp	r2, #32
    41c8:	d00b      	beq.n	41e2 <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    41ca:	4b0e      	ldr	r3, [pc, #56]	; (4204 <am_hal_pwrctrl_bucks_disable+0x54>)
    41cc:	681a      	ldr	r2, [r3, #0]
    41ce:	f022 0002 	bic.w	r0, r2, #2
    41d2:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    41d4:	6819      	ldr	r1, [r3, #0]
    41d6:	f021 0201 	bic.w	r2, r1, #1
    41da:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    41dc:	200a      	movs	r0, #10
    41de:	f7fd bba5 	b.w	192c <am_hal_flash_delay>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_PWRADC_EN) )
    41e2:	4809      	ldr	r0, [pc, #36]	; (4208 <am_hal_pwrctrl_bucks_disable+0x58>)
    41e4:	6801      	ldr	r1, [r0, #0]
    if ( isRev_ADC()  &&
    41e6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    41ea:	d1ee      	bne.n	41ca <am_hal_pwrctrl_bucks_disable+0x1a>
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    41ec:	4805      	ldr	r0, [pc, #20]	; (4204 <am_hal_pwrctrl_bucks_disable+0x54>)
    41ee:	6803      	ldr	r3, [r0, #0]
    41f0:	f003 0105 	and.w	r1, r3, #5
    41f4:	6001      	str	r1, [r0, #0]
    41f6:	e7f1      	b.n	41dc <am_hal_pwrctrl_bucks_disable+0x2c>
    41f8:	4770      	bx	lr
    41fa:	bf00      	nop
    41fc:	40021004 	.word	0x40021004
    4200:	4002000c 	.word	0x4002000c
    4204:	40021000 	.word	0x40021000
    4208:	40021008 	.word	0x40021008

0000420c <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    420c:	4905      	ldr	r1, [pc, #20]	; (4224 <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    420e:	4a06      	ldr	r2, [pc, #24]	; (4228 <am_hal_pwrctrl_low_power_init+0x1c>)
    AM_REG(PWRCTRL, SRAMCTRL) |=
    4210:	680b      	ldr	r3, [r1, #0]
    4212:	f043 0006 	orr.w	r0, r3, #6
    4216:	6008      	str	r0, [r1, #0]
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    4218:	6811      	ldr	r1, [r2, #0]
    421a:	f021 0304 	bic.w	r3, r1, #4
    421e:	6013      	str	r3, [r2, #0]
    4220:	4770      	bx	lr
    4222:	bf00      	nop
    4224:	40021018 	.word	0x40021018
    4228:	40021000 	.word	0x40021000

0000422c <am_hal_queue_init>:
//
//*****************************************************************************
void
am_hal_queue_init(am_hal_queue_t *psQueue, void *pvData, uint32_t ui32ItemSize,
                  uint32_t ui32ArraySize)
{
    422c:	b410      	push	{r4}
    psQueue->ui32WriteIndex = 0;
    422e:	2400      	movs	r4, #0
    4230:	6004      	str	r4, [r0, #0]
    psQueue->ui32ReadIndex = 0;
    4232:	6044      	str	r4, [r0, #4]
    psQueue->ui32Length = 0;
    4234:	6084      	str	r4, [r0, #8]
    psQueue->ui32Capacity = ui32ArraySize;
    4236:	60c3      	str	r3, [r0, #12]
    psQueue->ui32ItemSize = ui32ItemSize;
    4238:	6102      	str	r2, [r0, #16]
    psQueue->pui8Data = (uint8_t *) pvData;
    423a:	6141      	str	r1, [r0, #20]
}
    423c:	f85d 4b04 	ldr.w	r4, [sp], #4
    4240:	4770      	bx	lr
    4242:	bf00      	nop

00004244 <am_hal_queue_item_add>:
//! didn't have enough space.
//
//*****************************************************************************
bool
am_hal_queue_item_add(am_hal_queue_t *psQueue, const void *pvSource, uint32_t ui32NumItems)
{
    4244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4246:	4604      	mov	r4, r0
    uint32_t i;
    uint8_t *pui8Source;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    4248:	6907      	ldr	r7, [r0, #16]
{
    424a:	460e      	mov	r6, r1
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    424c:	fb07 f702 	mul.w	r7, r7, r2
    bool bSuccess = false;
    uint32_t ui32Primask;

    pui8Source = (uint8_t *) pvSource;

    ui32Primask = am_hal_interrupt_master_disable();
    4250:	f7fd fc9c 	bl	1b8c <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't already full
    //
    if ( am_hal_queue_space_left(psQueue) >= ui32Bytes )
    4254:	68a5      	ldr	r5, [r4, #8]
    4256:	68e3      	ldr	r3, [r4, #12]
    4258:	1b59      	subs	r1, r3, r5
    425a:	428f      	cmp	r7, r1
    425c:	d87c      	bhi.n	4358 <am_hal_queue_item_add+0x114>
    {
        //
        // Loop over the bytes in the source array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    425e:	2f00      	cmp	r7, #0
    4260:	d073      	beq.n	434a <am_hal_queue_item_add+0x106>
        {
            //
            // Write the value to the buffer.
            //
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    4262:	4635      	mov	r5, r6
    4264:	6823      	ldr	r3, [r4, #0]
    4266:	6962      	ldr	r2, [r4, #20]
    4268:	f815 1b01 	ldrb.w	r1, [r5], #1
    426c:	54d1      	strb	r1, [r2, r3]

            //
            // Advance the write index, making sure to wrap if necessary.
            //
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    426e:	6823      	ldr	r3, [r4, #0]
    4270:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    4274:	1c5a      	adds	r2, r3, #1
    4276:	19f1      	adds	r1, r6, r7
    4278:	f107 3cff 	add.w	ip, r7, #4294967295
    427c:	fbb2 f6fe 	udiv	r6, r2, lr
        for ( i = 0; i < ui32Bytes; i++ )
    4280:	42a9      	cmp	r1, r5
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    4282:	fb0e 2316 	mls	r3, lr, r6, r2
    4286:	6023      	str	r3, [r4, #0]
    4288:	f00c 0203 	and.w	r2, ip, #3
        for ( i = 0; i < ui32Bytes; i++ )
    428c:	d05c      	beq.n	4348 <am_hal_queue_item_add+0x104>
    428e:	b34a      	cbz	r2, 42e4 <am_hal_queue_item_add+0xa0>
    4290:	2a01      	cmp	r2, #1
    4292:	d019      	beq.n	42c8 <am_hal_queue_item_add+0x84>
    4294:	2a02      	cmp	r2, #2
    4296:	d00b      	beq.n	42b0 <am_hal_queue_item_add+0x6c>
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    4298:	6962      	ldr	r2, [r4, #20]
    429a:	f815 6b01 	ldrb.w	r6, [r5], #1
    429e:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    42a0:	6823      	ldr	r3, [r4, #0]
    42a2:	68e6      	ldr	r6, [r4, #12]
    42a4:	1c5a      	adds	r2, r3, #1
    42a6:	fbb2 fef6 	udiv	lr, r2, r6
    42aa:	fb06 231e 	mls	r3, r6, lr, r2
    42ae:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    42b0:	6962      	ldr	r2, [r4, #20]
    42b2:	f815 6b01 	ldrb.w	r6, [r5], #1
    42b6:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    42b8:	6823      	ldr	r3, [r4, #0]
    42ba:	68e6      	ldr	r6, [r4, #12]
    42bc:	1c5a      	adds	r2, r3, #1
    42be:	fbb2 fcf6 	udiv	ip, r2, r6
    42c2:	fb06 231c 	mls	r3, r6, ip, r2
    42c6:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    42c8:	6962      	ldr	r2, [r4, #20]
    42ca:	f815 6b01 	ldrb.w	r6, [r5], #1
    42ce:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    42d0:	6823      	ldr	r3, [r4, #0]
    42d2:	68e6      	ldr	r6, [r4, #12]
    42d4:	1c5a      	adds	r2, r3, #1
        for ( i = 0; i < ui32Bytes; i++ )
    42d6:	42a9      	cmp	r1, r5
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    42d8:	fbb2 fef6 	udiv	lr, r2, r6
    42dc:	fb06 231e 	mls	r3, r6, lr, r2
    42e0:	6023      	str	r3, [r4, #0]
        for ( i = 0; i < ui32Bytes; i++ )
    42e2:	d031      	beq.n	4348 <am_hal_queue_item_add+0x104>
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    42e4:	46ac      	mov	ip, r5
    42e6:	6962      	ldr	r2, [r4, #20]
    42e8:	f81c 6b01 	ldrb.w	r6, [ip], #1
    42ec:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    42ee:	6823      	ldr	r3, [r4, #0]
    42f0:	68e2      	ldr	r2, [r4, #12]
    42f2:	1c5e      	adds	r6, r3, #1
    42f4:	fbb6 fef2 	udiv	lr, r6, r2
    42f8:	fb02 631e 	mls	r3, r2, lr, r6
    42fc:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    42fe:	6962      	ldr	r2, [r4, #20]
    4300:	786e      	ldrb	r6, [r5, #1]
    4302:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    4304:	6823      	ldr	r3, [r4, #0]
    4306:	68e2      	ldr	r2, [r4, #12]
    4308:	1c5e      	adds	r6, r3, #1
    430a:	fbb6 fef2 	udiv	lr, r6, r2
    430e:	fb02 631e 	mls	r3, r2, lr, r6
    4312:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    4314:	6962      	ldr	r2, [r4, #20]
    4316:	f89c 6001 	ldrb.w	r6, [ip, #1]
    431a:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    431c:	6823      	ldr	r3, [r4, #0]
    431e:	68e2      	ldr	r2, [r4, #12]
    4320:	1c5e      	adds	r6, r3, #1
    4322:	fbb6 fcf2 	udiv	ip, r6, r2
    4326:	fb02 631c 	mls	r3, r2, ip, r6
    432a:	6023      	str	r3, [r4, #0]
            psQueue->pui8Data[psQueue->ui32WriteIndex] = pui8Source[i];
    432c:	6962      	ldr	r2, [r4, #20]
    432e:	78ee      	ldrb	r6, [r5, #3]
    4330:	54d6      	strb	r6, [r2, r3]
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    4332:	6823      	ldr	r3, [r4, #0]
    4334:	68e2      	ldr	r2, [r4, #12]
    4336:	1c5e      	adds	r6, r3, #1
    4338:	3504      	adds	r5, #4
    433a:	fbb6 fef2 	udiv	lr, r6, r2
        for ( i = 0; i < ui32Bytes; i++ )
    433e:	42a9      	cmp	r1, r5
            psQueue->ui32WriteIndex = ((psQueue->ui32WriteIndex + 1) %
    4340:	fb02 631e 	mls	r3, r2, lr, r6
    4344:	6023      	str	r3, [r4, #0]
        for ( i = 0; i < ui32Bytes; i++ )
    4346:	d1cd      	bne.n	42e4 <am_hal_queue_item_add+0xa0>
    4348:	68a5      	ldr	r5, [r4, #8]
        }

        //
        // Update the length value appropriately.
        //
        psQueue->ui32Length += ui32Bytes;
    434a:	443d      	add	r5, r7
    434c:	60a5      	str	r5, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
    434e:	2401      	movs	r4, #1
        // failure.
        //
        bSuccess = false;
    }

    am_hal_interrupt_master_set(ui32Primask);
    4350:	f7fd fc20 	bl	1b94 <am_hal_interrupt_master_set>

    return bSuccess;
}
    4354:	4620      	mov	r0, r4
    4356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        bSuccess = false;
    4358:	2400      	movs	r4, #0
    am_hal_interrupt_master_set(ui32Primask);
    435a:	f7fd fc1b 	bl	1b94 <am_hal_interrupt_master_set>
}
    435e:	4620      	mov	r0, r4
    4360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4362:	bf00      	nop

00004364 <am_hal_queue_item_get>:
//! queue, or false if the queue didn't have that many items to pull.
//
//*****************************************************************************
bool
am_hal_queue_item_get(am_hal_queue_t *psQueue, void *pvDest, uint32_t ui32NumItems)
{
    4364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4366:	4604      	mov	r4, r0
    uint32_t i;
    uint8_t *pui8Dest;
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    4368:	6907      	ldr	r7, [r0, #16]
{
    436a:	460e      	mov	r6, r1
    uint32_t ui32Bytes = ui32NumItems * psQueue->ui32ItemSize;
    436c:	fb07 f702 	mul.w	r7, r7, r2
    bool bSuccess = false;
    uint32_t ui32Primask;

    pui8Dest = (uint8_t *) pvDest;

    ui32Primask = am_hal_interrupt_master_disable();
    4370:	f7fd fc0c 	bl	1b8c <am_hal_interrupt_master_disable>

    //
    // Check to make sure that the buffer isn't empty
    //
    if ( am_hal_queue_data_left(psQueue) >= ui32Bytes )
    4374:	68a5      	ldr	r5, [r4, #8]
    4376:	42af      	cmp	r7, r5
    4378:	d87e      	bhi.n	4478 <am_hal_queue_item_get+0x114>
    {
        //
        // Loop over the bytes in the destination array.
        //
        for ( i = 0; i < ui32Bytes; i++ )
    437a:	2f00      	cmp	r7, #0
    437c:	d075      	beq.n	446a <am_hal_queue_item_get+0x106>
    437e:	6863      	ldr	r3, [r4, #4]
        {
            //
            // Grab the next value from the buffer.
            //
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    4380:	6962      	ldr	r2, [r4, #20]
    4382:	4635      	mov	r5, r6
    4384:	5cd1      	ldrb	r1, [r2, r3]
    4386:	f805 1b01 	strb.w	r1, [r5], #1

            //
            // Advance the read index, wrapping if needed.
            //
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    438a:	6863      	ldr	r3, [r4, #4]
    438c:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    4390:	1c5a      	adds	r2, r3, #1
    4392:	19f1      	adds	r1, r6, r7
    4394:	f107 3cff 	add.w	ip, r7, #4294967295
    4398:	fbb2 f6fe 	udiv	r6, r2, lr
        for ( i = 0; i < ui32Bytes; i++ )
    439c:	42a9      	cmp	r1, r5
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    439e:	fb0e 2316 	mls	r3, lr, r6, r2
    43a2:	6063      	str	r3, [r4, #4]
    43a4:	f00c 0203 	and.w	r2, ip, #3
        for ( i = 0; i < ui32Bytes; i++ )
    43a8:	d05e      	beq.n	4468 <am_hal_queue_item_get+0x104>
    43aa:	b35a      	cbz	r2, 4404 <am_hal_queue_item_get+0xa0>
    43ac:	2a01      	cmp	r2, #1
    43ae:	d01a      	beq.n	43e6 <am_hal_queue_item_get+0x82>
    43b0:	2a02      	cmp	r2, #2
    43b2:	d00b      	beq.n	43cc <am_hal_queue_item_get+0x68>
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    43b4:	6966      	ldr	r6, [r4, #20]
    43b6:	5cf3      	ldrb	r3, [r6, r3]
    43b8:	f805 3b01 	strb.w	r3, [r5], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    43bc:	6862      	ldr	r2, [r4, #4]
    43be:	68e6      	ldr	r6, [r4, #12]
    43c0:	3201      	adds	r2, #1
    43c2:	fbb2 fef6 	udiv	lr, r2, r6
    43c6:	fb06 231e 	mls	r3, r6, lr, r2
    43ca:	6063      	str	r3, [r4, #4]
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    43cc:	6966      	ldr	r6, [r4, #20]
    43ce:	f816 c003 	ldrb.w	ip, [r6, r3]
    43d2:	f805 cb01 	strb.w	ip, [r5], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    43d6:	6863      	ldr	r3, [r4, #4]
    43d8:	68e6      	ldr	r6, [r4, #12]
    43da:	1c5a      	adds	r2, r3, #1
    43dc:	fbb2 fef6 	udiv	lr, r2, r6
    43e0:	fb06 231e 	mls	r3, r6, lr, r2
    43e4:	6063      	str	r3, [r4, #4]
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    43e6:	6966      	ldr	r6, [r4, #20]
    43e8:	f816 c003 	ldrb.w	ip, [r6, r3]
    43ec:	f805 cb01 	strb.w	ip, [r5], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    43f0:	6863      	ldr	r3, [r4, #4]
    43f2:	68e6      	ldr	r6, [r4, #12]
    43f4:	1c5a      	adds	r2, r3, #1
        for ( i = 0; i < ui32Bytes; i++ )
    43f6:	42a9      	cmp	r1, r5
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    43f8:	fbb2 fef6 	udiv	lr, r2, r6
    43fc:	fb06 231e 	mls	r3, r6, lr, r2
    4400:	6063      	str	r3, [r4, #4]
        for ( i = 0; i < ui32Bytes; i++ )
    4402:	d031      	beq.n	4468 <am_hal_queue_item_get+0x104>
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    4404:	6966      	ldr	r6, [r4, #20]
    4406:	46ac      	mov	ip, r5
    4408:	5cf2      	ldrb	r2, [r6, r3]
    440a:	f80c 2b01 	strb.w	r2, [ip], #1
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    440e:	6863      	ldr	r3, [r4, #4]
    4410:	68e2      	ldr	r2, [r4, #12]
    4412:	1c5e      	adds	r6, r3, #1
    4414:	fbb6 fef2 	udiv	lr, r6, r2
    4418:	fb02 631e 	mls	r3, r2, lr, r6
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    441c:	6962      	ldr	r2, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    441e:	6063      	str	r3, [r4, #4]
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    4420:	5cd6      	ldrb	r6, [r2, r3]
    4422:	706e      	strb	r6, [r5, #1]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    4424:	6863      	ldr	r3, [r4, #4]
    4426:	68e2      	ldr	r2, [r4, #12]
    4428:	1c5e      	adds	r6, r3, #1
    442a:	fbb6 fef2 	udiv	lr, r6, r2
    442e:	fb02 631e 	mls	r3, r2, lr, r6
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    4432:	6962      	ldr	r2, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    4434:	6063      	str	r3, [r4, #4]
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    4436:	5cd6      	ldrb	r6, [r2, r3]
    4438:	f88c 6001 	strb.w	r6, [ip, #1]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    443c:	6863      	ldr	r3, [r4, #4]
    443e:	68e2      	ldr	r2, [r4, #12]
    4440:	1c5e      	adds	r6, r3, #1
    4442:	fbb6 fcf2 	udiv	ip, r6, r2
    4446:	fb02 631c 	mls	r3, r2, ip, r6
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    444a:	6962      	ldr	r2, [r4, #20]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    444c:	6063      	str	r3, [r4, #4]
            pui8Dest[i] = psQueue->pui8Data[psQueue->ui32ReadIndex];
    444e:	5cd6      	ldrb	r6, [r2, r3]
    4450:	70ee      	strb	r6, [r5, #3]
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    4452:	6863      	ldr	r3, [r4, #4]
    4454:	68e2      	ldr	r2, [r4, #12]
    4456:	1c5e      	adds	r6, r3, #1
    4458:	3504      	adds	r5, #4
    445a:	fbb6 fef2 	udiv	lr, r6, r2
        for ( i = 0; i < ui32Bytes; i++ )
    445e:	42a9      	cmp	r1, r5
            psQueue->ui32ReadIndex = ((psQueue->ui32ReadIndex + 1) %
    4460:	fb02 631e 	mls	r3, r2, lr, r6
    4464:	6063      	str	r3, [r4, #4]
        for ( i = 0; i < ui32Bytes; i++ )
    4466:	d1cd      	bne.n	4404 <am_hal_queue_item_get+0xa0>
    4468:	68a5      	ldr	r5, [r4, #8]
        }

        //
        // Adjust the length value to reflect the change.
        //
        psQueue->ui32Length -= ui32Bytes;
    446a:	1be9      	subs	r1, r5, r7
    446c:	60a1      	str	r1, [r4, #8]

        //
        // Report a success.
        //
        bSuccess = true;
    446e:	2401      	movs	r4, #1
        // If the buffer didn't have enough data, just return false.
        //
        bSuccess = false;
    }

    am_hal_interrupt_master_set(ui32Primask);
    4470:	f7fd fb90 	bl	1b94 <am_hal_interrupt_master_set>

    return bSuccess;
}
    4474:	4620      	mov	r0, r4
    4476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        bSuccess = false;
    4478:	2400      	movs	r4, #0
    am_hal_interrupt_master_set(ui32Primask);
    447a:	f7fd fb8b 	bl	1b94 <am_hal_interrupt_master_set>
}
    447e:	4620      	mov	r0, r4
    4480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4482:	bf00      	nop

00004484 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    4484:	4a05      	ldr	r2, [pc, #20]	; (449c <am_hal_rtc_osc_select+0x18>)
    4486:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    4488:	b918      	cbnz	r0, 4492 <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    448a:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    448e:	6010      	str	r0, [r2, #0]
    4490:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    4492:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    4496:	6011      	str	r1, [r2, #0]
    4498:	4770      	bx	lr
    449a:	bf00      	nop
    449c:	4000400c 	.word	0x4000400c

000044a0 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    44a0:	4a02      	ldr	r2, [pc, #8]	; (44ac <am_hal_rtc_osc_disable+0xc>)
    44a2:	6813      	ldr	r3, [r2, #0]
    44a4:	f043 0010 	orr.w	r0, r3, #16
    44a8:	6010      	str	r0, [r2, #0]
    44aa:	4770      	bx	lr
    44ac:	40004050 	.word	0x40004050

000044b0 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    44b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    44b2:	b083      	sub	sp, #12
    44b4:	4604      	mov	r4, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    44b6:	f7fd fb69 	bl	1b8c <am_hal_interrupt_master_disable>
    44ba:	4605      	mov	r5, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    44bc:	b124      	cbz	r4, 44c8 <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    44be:	4b42      	ldr	r3, [pc, #264]	; (45c8 <am_hal_sysctrl_sleep+0x118>)
    44c0:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    44c2:	f010 0c01 	ands.w	ip, r0, #1
    44c6:	d00a      	beq.n	44de <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    44c8:	4a40      	ldr	r2, [pc, #256]	; (45cc <am_hal_sysctrl_sleep+0x11c>)
    44ca:	6811      	ldr	r1, [r2, #0]
    44cc:	f021 0604 	bic.w	r6, r1, #4
    44d0:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    44d2:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    44d4:	4628      	mov	r0, r5
    44d6:	f7fd fb5d 	bl	1b94 <am_hal_interrupt_master_set>
}
    44da:	b003      	add	sp, #12
    44dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    44de:	4c3b      	ldr	r4, [pc, #236]	; (45cc <am_hal_sysctrl_sleep+0x11c>)
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    44e0:	4b3b      	ldr	r3, [pc, #236]	; (45d0 <am_hal_sysctrl_sleep+0x120>)
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    44e2:	6820      	ldr	r0, [r4, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    44e4:	4e3b      	ldr	r6, [pc, #236]	; (45d4 <am_hal_sysctrl_sleep+0x124>)
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    44e6:	4f3c      	ldr	r7, [pc, #240]	; (45d8 <am_hal_sysctrl_sleep+0x128>)
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    44e8:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 45e8 <am_hal_sysctrl_sleep+0x138>
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    44ec:	f040 0204 	orr.w	r2, r0, #4
    44f0:	6022      	str	r2, [r4, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    44f2:	681c      	ldr	r4, [r3, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    44f4:	6833      	ldr	r3, [r6, #0]
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    44f6:	f8de 2000 	ldr.w	r2, [lr]
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    44fa:	6839      	ldr	r1, [r7, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    44fc:	f004 07f0 	and.w	r7, r4, #240	; 0xf0
                   CHKBUCKZX_REV : 0x0;
    4500:	2f20      	cmp	r7, #32
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    4502:	f103 30ff 	add.w	r0, r3, #4294967295
                   CHKBUCKZX_REV : 0x0;
    4506:	bf14      	ite	ne
    4508:	2700      	movne	r7, #0
    450a:	2702      	moveq	r7, #2
                    CHKBUCKZX_TIMER : 0x0;
    450c:	2803      	cmp	r0, #3
    450e:	bf98      	it	ls
    4510:	f04f 0c04 	movls.w	ip, #4
                     CHKBUCKZX_BUCKS : 0x0;
    4514:	f012 0403 	ands.w	r4, r2, #3
    4518:	bf18      	it	ne
    451a:	2401      	movne	r4, #1
    g_buckZX_chk |= ( ui32SupplySrc &
    451c:	f240 53ff 	movw	r3, #1535	; 0x5ff
    g_buckZX_chk |= (ui32SupplySrc &
    4520:	433c      	orrs	r4, r7
                0x0 : CHKBUCKZX_DEVEN;
    4522:	ea11 0703 	ands.w	r7, r1, r3
    g_buckZX_chk |= (ui32SupplySrc &
    4526:	ea44 040c 	orr.w	r4, r4, ip
                0x0 : CHKBUCKZX_DEVEN;
    452a:	d103      	bne.n	4534 <am_hal_sysctrl_sleep+0x84>
    g_buckZX_chk |= ( ui32SupplySrc &
    452c:	f044 0408 	orr.w	r4, r4, #8
        if ( bBuckZX_chk )
    4530:	2c0f      	cmp	r4, #15
    4532:	d00a      	beq.n	454a <am_hal_sysctrl_sleep+0x9a>
        AM_ASM_WFI;
    4534:	bf30      	wfi
        if ( bBuckZX_chk )
    4536:	2c0f      	cmp	r4, #15
    4538:	d01a      	beq.n	4570 <am_hal_sysctrl_sleep+0xc0>
            g_bBuckRestoreComplete = true;
    453a:	4e28      	ldr	r6, [pc, #160]	; (45dc <am_hal_sysctrl_sleep+0x12c>)
    453c:	2001      	movs	r0, #1
    453e:	7030      	strb	r0, [r6, #0]
    am_hal_interrupt_master_set(ui32Critical);
    4540:	4628      	mov	r0, r5
    4542:	f7fd fb27 	bl	1b94 <am_hal_interrupt_master_set>
}
    4546:	b003      	add	sp, #12
    4548:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ui32BuckTimer = g_ui32BuckTimer - 1;
    454a:	6832      	ldr	r2, [r6, #0]
    454c:	1e51      	subs	r1, r2, #1
    454e:	9100      	str	r1, [sp, #0]
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    4550:	9800      	ldr	r0, [sp, #0]
    4552:	f04f 31ff 	mov.w	r1, #4294967295
    4556:	f7fd f947 	bl	17e8 <am_hal_ctimer_clear>
            am_hal_ctimer_period_set(ui32BuckTimer,
    455a:	9800      	ldr	r0, [sp, #0]
    455c:	463b      	mov	r3, r7
    455e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    4562:	f04f 31ff 	mov.w	r1, #4294967295
    4566:	f7fd f953 	bl	1810 <am_hal_ctimer_period_set>
            am_hal_pwrctrl_bucks_disable();
    456a:	f7ff fe21 	bl	41b0 <am_hal_pwrctrl_bucks_disable>
    456e:	e7e1      	b.n	4534 <am_hal_sysctrl_sleep+0x84>
    AM_CRITICAL_BEGIN_ASM
    4570:	f7fd fb0c 	bl	1b8c <am_hal_interrupt_master_disable>
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    4574:	4b1a      	ldr	r3, [pc, #104]	; (45e0 <am_hal_sysctrl_sleep+0x130>)
    AM_CRITICAL_BEGIN_ASM
    4576:	9001      	str	r0, [sp, #4]
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    4578:	681a      	ldr	r2, [r3, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    457a:	681a      	ldr	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    457c:	681f      	ldr	r7, [r3, #0]
    457e:	f027 043c 	bic.w	r4, r7, #60	; 0x3c
    4582:	f044 021c 	orr.w	r2, r4, #28
    4586:	601a      	str	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    4588:	6819      	ldr	r1, [r3, #0]
            g_bBuckRestoreComplete = false;
    458a:	4c14      	ldr	r4, [pc, #80]	; (45dc <am_hal_sysctrl_sleep+0x12c>)
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    458c:	f421 30f0 	bic.w	r0, r1, #122880	; 0x1e000
    4590:	f440 4760 	orr.w	r7, r0, #57344	; 0xe000
    4594:	601f      	str	r7, [r3, #0]
    AM_CRITICAL_END_ASM
    4596:	9801      	ldr	r0, [sp, #4]
    4598:	f7fd fafc 	bl	1b94 <am_hal_interrupt_master_set>
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    459c:	201c      	movs	r0, #28
    459e:	f7fd f9c5 	bl	192c <am_hal_flash_delay>
            am_hal_pwrctrl_bucks_enable();
    45a2:	f7ff fde9 	bl	4178 <am_hal_pwrctrl_bucks_enable>
            ui32BuckTimer = g_ui32BuckTimer - 1;
    45a6:	6836      	ldr	r6, [r6, #0]
            g_ui32BuckInputs = 0;
    45a8:	490e      	ldr	r1, [pc, #56]	; (45e4 <am_hal_sysctrl_sleep+0x134>)
            g_bBuckRestoreComplete = false;
    45aa:	2200      	movs	r2, #0
            ui32BuckTimer = g_ui32BuckTimer - 1;
    45ac:	1e73      	subs	r3, r6, #1
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    45ae:	204c      	movs	r0, #76	; 0x4c
            ui32BuckTimer = g_ui32BuckTimer - 1;
    45b0:	9300      	str	r3, [sp, #0]
            g_bBuckRestoreComplete = false;
    45b2:	7022      	strb	r2, [r4, #0]
            g_ui32BuckInputs = 0;
    45b4:	600a      	str	r2, [r1, #0]
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    45b6:	f7fd f9b9 	bl	192c <am_hal_flash_delay>
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    45ba:	9800      	ldr	r0, [sp, #0]
    45bc:	f04f 31ff 	mov.w	r1, #4294967295
    45c0:	f7fd f8fa 	bl	17b8 <am_hal_ctimer_start>
    45c4:	e786      	b.n	44d4 <am_hal_sysctrl_sleep+0x24>
    45c6:	bf00      	nop
    45c8:	40020250 	.word	0x40020250
    45cc:	e000ed10 	.word	0xe000ed10
    45d0:	4002000c 	.word	0x4002000c
    45d4:	10000868 	.word	0x10000868
    45d8:	40021008 	.word	0x40021008
    45dc:	10000863 	.word	0x10000863
    45e0:	40020068 	.word	0x40020068
    45e4:	10000864 	.word	0x10000864
    45e8:	40021000 	.word	0x40021000

000045ec <am_hal_uart_config>:
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    45ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45ee:	460d      	mov	r5, r1
    45f0:	4607      	mov	r7, r0
    uint32_t ui32HFRC;

    //
    // Configure the Baudrate.
    //
    ui32HFRC = am_hal_clkgen_sysclk_get();
    45f2:	f7fd f829 	bl	1648 <am_hal_clkgen_sysclk_get>
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    45f6:	682b      	ldr	r3, [r5, #0]
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    45f8:	0186      	lsls	r6, r0, #6
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    45fa:	0159      	lsls	r1, r3, #5
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    45fc:	fbb0 f4f1 	udiv	r4, r0, r1
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    4600:	fbb6 f0f1 	udiv	r0, r6, r1
    4604:	eba0 1684 	sub.w	r6, r0, r4, lsl #6
    am_hal_debug_assert_msg(ui32IntegerDivisor > 0, "Integer divisor MUST be greater than or equal to 1.");
    4608:	b924      	cbnz	r4, 4614 <am_hal_uart_config+0x28>
    460a:	4a11      	ldr	r2, [pc, #68]	; (4650 <am_hal_uart_config+0x64>)
    460c:	4811      	ldr	r0, [pc, #68]	; (4654 <am_hal_uart_config+0x68>)
    460e:	2164      	movs	r1, #100	; 0x64
    4610:	f7fd f98a 	bl	1928 <am_hal_debug_error>
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    4614:	f507 2280 	add.w	r2, r7, #262144	; 0x40000
    4618:	321c      	adds	r2, #28
    461a:	0317      	lsls	r7, r2, #12
    ui32ConfigVal |= psConfig->ui32DataBits;

    //
    // OR in the Two Stop bit if used.
    //
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    461c:	7a2b      	ldrb	r3, [r5, #8]
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    461e:	627c      	str	r4, [r7, #36]	; 0x24
    AM_REGn(UART, ui32Module, IBRD) = ui32IntegerDivisor;
    4620:	627c      	str	r4, [r7, #36]	; 0x24
    AM_REGn(UART, ui32Module, FBRD) = ui32FractionDivisor;
    4622:	62be      	str	r6, [r7, #40]	; 0x28
    ui32ConfigVal |= psConfig->ui32DataBits;
    4624:	6868      	ldr	r0, [r5, #4]
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    4626:	68ec      	ldr	r4, [r5, #12]
    4628:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    462a:	2b00      	cmp	r3, #0
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    462c:	ea40 0004 	orr.w	r0, r0, r4
    4630:	ea40 0001 	orr.w	r0, r0, r1
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    4634:	bf14      	ite	ne
    4636:	2108      	movne	r1, #8
    4638:	2100      	moveq	r1, #0
    AM_REGn(UART, ui32Module, LCRH) |= ui32ConfigVal;
    463a:	4308      	orrs	r0, r1
    463c:	62f8      	str	r0, [r7, #44]	; 0x2c

    //
    // Write the flow control settings to the control register.
    //
    AM_REGn(UART, ui32Module, CR) |= psConfig->ui32FlowCtrl;
    463e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
    4640:	692d      	ldr	r5, [r5, #16]
    4642:	432e      	orrs	r6, r5
    4644:	633e      	str	r6, [r7, #48]	; 0x30

    //
    // Set the clock select field for 24MHz from the HFRC
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    4646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    4648:	f042 0310 	orr.w	r3, r2, #16
    464c:	633b      	str	r3, [r7, #48]	; 0x30
    464e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4650:	00004d44 	.word	0x00004d44
    4654:	00004d78 	.word	0x00004d78

00004658 <am_hal_uart_int_status_get>:
    if (bEnabledOnly)
    {
        //
        // Read and return the Masked Interrupt Status.
        //
        return AM_REGn(UART, ui32Module, MIS);
    4658:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    465c:	301c      	adds	r0, #28
    465e:	0302      	lsls	r2, r0, #12
    if (bEnabledOnly)
    4660:	b909      	cbnz	r1, 4666 <am_hal_uart_int_status_get+0xe>
    else
    {
        //
        // Read and return the Raw Interrupt Status.
        //
        return AM_REGn(UART, ui32Module, IES);
    4662:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    }
}
    4664:	4770      	bx	lr
        return AM_REGn(UART, ui32Module, MIS);
    4666:	6c10      	ldr	r0, [r2, #64]	; 0x40
    4668:	4770      	bx	lr
    466a:	bf00      	nop

0000466c <am_hal_uart_int_clear>:
am_hal_uart_int_clear(uint32_t ui32Module, uint32_t ui32Interrupt)
{
    //
    // Clear the bits.
    //
    AM_REGn(UART, ui32Module, IEC) = ui32Interrupt;
    466c:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    4670:	301c      	adds	r0, #28
    4672:	0302      	lsls	r2, r0, #12
    4674:	6451      	str	r1, [r2, #68]	; 0x44
    4676:	4770      	bx	lr

00004678 <am_hal_uart_int_enable>:
am_hal_uart_int_enable(uint32_t ui32Module, uint32_t ui32Interrupt)
{
    //
    // Enable the interrupts.
    //
    AM_REGn(UART, ui32Module, IER) |= ui32Interrupt;
    4678:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    467c:	301c      	adds	r0, #28
    467e:	0302      	lsls	r2, r0, #12
    4680:	6b93      	ldr	r3, [r2, #56]	; 0x38
    4682:	4319      	orrs	r1, r3
    4684:	6391      	str	r1, [r2, #56]	; 0x38
    4686:	4770      	bx	lr

00004688 <am_hal_uart_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_enable(uint32_t ui32Module)
{
    4688:	b510      	push	{r4, lr}
    468a:	4604      	mov	r4, r0
    468c:	b082      	sub	sp, #8
    //
    // Enable the UART, RX, and TX.
    //
    AM_REGan_SET(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    468e:	f7fd fa7d 	bl	1b8c <am_hal_interrupt_master_disable>
    4692:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
    4696:	331c      	adds	r3, #28
    4698:	0319      	lsls	r1, r3, #12
    469a:	9001      	str	r0, [sp, #4]
    469c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    469e:	f442 7040 	orr.w	r0, r2, #768	; 0x300
    46a2:	f040 0401 	orr.w	r4, r0, #1
    46a6:	630c      	str	r4, [r1, #48]	; 0x30
    46a8:	9801      	ldr	r0, [sp, #4]
    46aa:	f7fd fa73 	bl	1b94 <am_hal_interrupt_master_set>
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    46ae:	b002      	add	sp, #8
    46b0:	bd10      	pop	{r4, pc}
    46b2:	bf00      	nop

000046b4 <am_hal_uart_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_disable(uint32_t ui32Module)
{
    46b4:	b510      	push	{r4, lr}
    46b6:	4604      	mov	r4, r0
    46b8:	b082      	sub	sp, #8
    //
    // Disable the UART.
    //
    AM_REGan_CLR(UART, ui32Module, CR, (AM_REG_UART_CR_UARTEN_M   |
    46ba:	f7fd fa67 	bl	1b8c <am_hal_interrupt_master_disable>
    46be:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
    46c2:	331c      	adds	r3, #28
    46c4:	0319      	lsls	r1, r3, #12
    46c6:	9001      	str	r0, [sp, #4]
    46c8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    46ca:	f422 7040 	bic.w	r0, r2, #768	; 0x300
    46ce:	f020 0401 	bic.w	r4, r0, #1
    46d2:	630c      	str	r4, [r1, #48]	; 0x30
    46d4:	9801      	ldr	r0, [sp, #4]
    46d6:	f7fd fa5d 	bl	1b94 <am_hal_interrupt_master_set>
                                        AM_REG_UART_CR_RXE_M      |
                                        AM_REG_UART_CR_TXE_M) );
}
    46da:	b002      	add	sp, #8
    46dc:	bd10      	pop	{r4, pc}
    46de:	bf00      	nop

000046e0 <am_hal_uart_pwrctrl_enable>:
am_hal_uart_pwrctrl_enable(uint32_t ui32Module)
{
    //
    // Check to make sure we're acting on a real UART module.
    //
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    46e0:	2801      	cmp	r0, #1
{
    46e2:	b510      	push	{r4, lr}
    46e4:	4604      	mov	r4, r0
    am_hal_debug_assert_msg(ui32Module < AM_REG_UART_NUM_MODULES,
    46e6:	d905      	bls.n	46f4 <am_hal_uart_pwrctrl_enable+0x14>
    46e8:	4a05      	ldr	r2, [pc, #20]	; (4700 <am_hal_uart_pwrctrl_enable+0x20>)
    46ea:	4806      	ldr	r0, [pc, #24]	; (4704 <am_hal_uart_pwrctrl_enable+0x24>)
    46ec:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    46f0:	f7fd f91a 	bl	1928 <am_hal_debug_error>
                            "Trying to disable a UART module that doesn't exist");

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    46f4:	2080      	movs	r0, #128	; 0x80
    46f6:	40a0      	lsls	r0, r4
}
    46f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_UART0 << ui32Module);
    46fc:	f7ff bbd2 	b.w	3ea4 <am_hal_pwrctrl_periph_enable>
    4700:	00004d8c 	.word	0x00004d8c
    4704:	00004d78 	.word	0x00004d78

00004708 <am_hal_uart_clock_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    4708:	b510      	push	{r4, lr}
    //
    // Set CLKGEN.UARTEN, clear the field then write the desired enable value
    // Valid enable values are DIS, EN, REDUCE_FREQ, EN_POWER_SAV.
    //
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    470a:	2101      	movs	r1, #1
{
    470c:	4604      	mov	r4, r0
    am_hal_clkgen_uarten_set(ui32Module, AM_HAL_CLKGEN_UARTEN_EN);
    470e:	f7fc ffb5 	bl	167c <am_hal_clkgen_uarten_set>

    //
    // Enable the UART clock.
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKEN_M;
    4712:	f504 2080 	add.w	r0, r4, #262144	; 0x40000
    4716:	301c      	adds	r0, #28
    4718:	0301      	lsls	r1, r0, #12
    471a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    471c:	f043 0208 	orr.w	r2, r3, #8
    4720:	630a      	str	r2, [r1, #48]	; 0x30

    //
    // Select default UART clock source
    //
    AM_REGn(UART, ui32Module, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    4722:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    4724:	f044 0010 	orr.w	r0, r4, #16
    4728:	6308      	str	r0, [r1, #48]	; 0x30
    472a:	bd10      	pop	{r4, pc}

0000472c <am_hal_uart_fifo_config>:
am_hal_uart_fifo_config(uint32_t ui32Module, uint32_t ui32LvlCfg)
{
    //
    // Enable the use of FIFOs.
    //
    AM_REGn(UART, ui32Module, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    472c:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    4730:	301c      	adds	r0, #28
    4732:	0302      	lsls	r2, r0, #12
    4734:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4736:	f043 0010 	orr.w	r0, r3, #16
    473a:	62d0      	str	r0, [r2, #44]	; 0x2c

    //
    // Write the FIFO level register.
    //
    AM_REGn(UART, ui32Module, IFLS) = ui32LvlCfg;
    473c:	6351      	str	r1, [r2, #52]	; 0x34
    473e:	4770      	bx	lr

00004740 <am_hal_uart_string_transmit_polled>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_string_transmit_polled(uint32_t ui32Module, char *pcString)
{
    4740:	b410      	push	{r4}
    while (*pcString)
    4742:	780c      	ldrb	r4, [r1, #0]
    4744:	b16c      	cbz	r4, 4762 <am_hal_uart_string_transmit_polled+0x22>
    4746:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    474a:	301c      	adds	r0, #28
    474c:	0300      	lsls	r0, r0, #12
    474e:	f100 0218 	add.w	r2, r0, #24
    {
        //
        // Wait for space, i.e.  TX FIFO EMPTY.
        //
        while (AM_BFRn(UART, ui32Module, FR, TXFF));
    4752:	6813      	ldr	r3, [r2, #0]
    4754:	069b      	lsls	r3, r3, #26
    4756:	d4fc      	bmi.n	4752 <am_hal_uart_string_transmit_polled+0x12>

        //
        // Write the char.
        //
        AM_REGn(UART, ui32Module, DR) = *pcString++;
    4758:	6004      	str	r4, [r0, #0]
    while (*pcString)
    475a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    475e:	2c00      	cmp	r4, #0
    4760:	d1f7      	bne.n	4752 <am_hal_uart_string_transmit_polled+0x12>
    }
}
    4762:	f85d 4b04 	ldr.w	r4, [sp], #4
    4766:	4770      	bx	lr

00004768 <am_hal_uart_init_buffered>:
//*****************************************************************************
void
am_hal_uart_init_buffered(uint32_t ui32Module,
                          uint8_t *pui8RxArray, uint32_t ui32RxSize,
                          uint8_t *pui8TxArray, uint32_t ui32TxSize)
{
    4768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    476c:	9e06      	ldr	r6, [sp, #24]
    476e:	4604      	mov	r4, r0
    4770:	461d      	mov	r5, r3
    if ( (pui8RxArray != NULL)  &&  (ui32RxSize > 0) )
    4772:	b101      	cbz	r1, 4776 <am_hal_uart_init_buffered+0xe>
    4774:	b91a      	cbnz	r2, 477e <am_hal_uart_init_buffered+0x16>
        // Initialize the RX ring buffer.
        //
        am_hal_queue_init(&g_psRxQueue[ui32Module], pui8RxArray, 1, ui32RxSize);
    }

    if ( (pui8TxArray != NULL)  &&  (ui32TxSize > 0) )
    4776:	b105      	cbz	r5, 477a <am_hal_uart_init_buffered+0x12>
    4778:	b99e      	cbnz	r6, 47a2 <am_hal_uart_init_buffered+0x3a>
    477a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AM_REGn(UART, ui32Module, IER) |= (AM_REG_UART_IES_RTRIS_M);
    477e:	f500 2380 	add.w	r3, r0, #262144	; 0x40000
    4782:	331c      	adds	r3, #28
    4784:	031f      	lsls	r7, r3, #12
        am_hal_queue_init(&g_psRxQueue[ui32Module], pui8RxArray, 1, ui32RxSize);
    4786:	4613      	mov	r3, r2
        AM_REGn(UART, ui32Module, IER) |= (AM_REG_UART_IES_RTRIS_M);
    4788:	6bba      	ldr	r2, [r7, #56]	; 0x38
        am_hal_queue_init(&g_psRxQueue[ui32Module], pui8RxArray, 1, ui32RxSize);
    478a:	4810      	ldr	r0, [pc, #64]	; (47cc <am_hal_uart_init_buffered+0x64>)
        AM_REGn(UART, ui32Module, IER) |= (AM_REG_UART_IES_RTRIS_M);
    478c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    4790:	63ba      	str	r2, [r7, #56]	; 0x38
        am_hal_queue_init(&g_psRxQueue[ui32Module], pui8RxArray, 1, ui32RxSize);
    4792:	eb04 0744 	add.w	r7, r4, r4, lsl #1
    4796:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
    479a:	2201      	movs	r2, #1
    479c:	f7ff fd46 	bl	422c <am_hal_queue_init>
    47a0:	e7e9      	b.n	4776 <am_hal_uart_init_buffered+0xe>
    {
        //
        // Enable the UART TX timeout interrupt.
        //
        AM_REGn(UART, ui32Module, IER) |= (AM_REG_UART_IES_TXRIS_M);
    47a2:	f504 2180 	add.w	r1, r4, #262144	; 0x40000
    47a6:	311c      	adds	r1, #28
    47a8:	030a      	lsls	r2, r1, #12

        //
        // Initialize the TX ring buffer.
        //
        am_hal_queue_init(&g_psTxQueue[ui32Module], pui8TxArray, 1, ui32TxSize);
    47aa:	4809      	ldr	r0, [pc, #36]	; (47d0 <am_hal_uart_init_buffered+0x68>)
        AM_REGn(UART, ui32Module, IER) |= (AM_REG_UART_IES_TXRIS_M);
    47ac:	6b93      	ldr	r3, [r2, #56]	; 0x38
        am_hal_queue_init(&g_psTxQueue[ui32Module], pui8TxArray, 1, ui32TxSize);
    47ae:	eb04 0844 	add.w	r8, r4, r4, lsl #1
        AM_REGn(UART, ui32Module, IER) |= (AM_REG_UART_IES_TXRIS_M);
    47b2:	f043 0420 	orr.w	r4, r3, #32
    47b6:	6394      	str	r4, [r2, #56]	; 0x38
        am_hal_queue_init(&g_psTxQueue[ui32Module], pui8TxArray, 1, ui32TxSize);
    47b8:	4633      	mov	r3, r6
    47ba:	4629      	mov	r1, r5
    47bc:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
    47c0:	2201      	movs	r2, #1
    }
}
    47c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        am_hal_queue_init(&g_psTxQueue[ui32Module], pui8TxArray, 1, ui32TxSize);
    47c6:	f7ff bd31 	b.w	422c <am_hal_queue_init>
    47ca:	bf00      	nop
    47cc:	10000c50 	.word	0x10000c50
    47d0:	10000c80 	.word	0x10000c80

000047d4 <am_hal_uart_service_buffered_timeout_save>:
//! @return None
//
//*****************************************************************************
void
am_hal_uart_service_buffered_timeout_save(uint32_t ui32Module, uint32_t ui32Status)
{
    47d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    47d8:	b083      	sub	sp, #12
    uint8_t ui8Character = '\x00';
    47da:	2300      	movs	r3, #0

    //
    // Check to see if we have filled the Rx FIFO past the configured limit, or
    // if we have an 'old' character or two sitting in the FIFO.
    //
    if (ui32Status & (AM_REG_UART_IES_RXRIS_M | AM_REG_UART_IES_RTRIS_M))
    47dc:	f011 0f50 	tst.w	r1, #80	; 0x50
{
    47e0:	468a      	mov	sl, r1
    47e2:	4604      	mov	r4, r0
    uint8_t ui8Character = '\x00';
    47e4:	f88d 3007 	strb.w	r3, [sp, #7]
    if (ui32Status & (AM_REG_UART_IES_RXRIS_M | AM_REG_UART_IES_RTRIS_M))
    47e8:	d06a      	beq.n	48c0 <am_hal_uart_service_buffered_timeout_save+0xec>
    {
        //
        // Check to see what our FIFO configuration setting is.
        //
        uint32_t ui32FifoThreshold;
        uint32_t ui32FifoCfg = AM_BFMn(UART, ui32Module, IFLS, RXIFLSEL);
    47ea:	f500 2580 	add.w	r5, r0, #262144	; 0x40000
    47ee:	351c      	adds	r5, #28
    47f0:	032d      	lsls	r5, r5, #12
    47f2:	6b68      	ldr	r0, [r5, #52]	; 0x34
    47f4:	f000 0138 	and.w	r1, r0, #56	; 0x38
    47f8:	2920      	cmp	r1, #32
    47fa:	f200 808b 	bhi.w	4914 <am_hal_uart_service_buffered_timeout_save+0x140>
    47fe:	4a6b      	ldr	r2, [pc, #428]	; (49ac <am_hal_uart_service_buffered_timeout_save+0x1d8>)
    4800:	f812 8001 	ldrb.w	r8, [r2, r1]
            // the FIFO.
            //
            if ( (ui32FifoEntry & 0xF00) == 0)
            {
                ui8Character = ui32FifoEntry & 0xFF;
                am_hal_queue_item_add(&g_psRxQueue[ui32Module], &ui8Character, 1);
    4804:	4b6a      	ldr	r3, [pc, #424]	; (49b0 <am_hal_uart_service_buffered_timeout_save+0x1dc>)
    4806:	462f      	mov	r7, r5
            }

            //
            // Leave one byte to trigger the RX timeout interrupt.
            //
            if ( ++ui32Count >= (ui32FifoThreshold - 1) )
    4808:	f108 38ff 	add.w	r8, r8, #4294967295
        while (!AM_BFRn(UART, ui32Module, FR, RXFE))
    480c:	f857 6f18 	ldr.w	r6, [r7, #24]!
    4810:	f108 30ff 	add.w	r0, r8, #4294967295
                am_hal_queue_item_add(&g_psRxQueue[ui32Module], &ui8Character, 1);
    4814:	eb04 0144 	add.w	r1, r4, r4, lsl #1
        while (!AM_BFRn(UART, ui32Module, FR, RXFE))
    4818:	06f6      	lsls	r6, r6, #27
    481a:	f000 0b03 	and.w	fp, r0, #3
                am_hal_queue_item_add(&g_psRxQueue[ui32Module], &ui8Character, 1);
    481e:	eb03 09c1 	add.w	r9, r3, r1, lsl #3
        while (!AM_BFRn(UART, ui32Module, FR, RXFE))
    4822:	d44d      	bmi.n	48c0 <am_hal_uart_service_buffered_timeout_save+0xec>
            ui32FifoEntry = AM_REGn(UART, ui32Module, DR);
    4824:	682e      	ldr	r6, [r5, #0]
            if ( (ui32FifoEntry & 0xF00) == 0)
    4826:	f416 6f70 	tst.w	r6, #3840	; 0xf00
    482a:	f000 809a 	beq.w	4962 <am_hal_uart_service_buffered_timeout_save+0x18e>
            if ( ++ui32Count >= (ui32FifoThreshold - 1) )
    482e:	2601      	movs	r6, #1
    4830:	4546      	cmp	r6, r8
    4832:	d245      	bcs.n	48c0 <am_hal_uart_service_buffered_timeout_save+0xec>
    4834:	f1bb 0f00 	cmp.w	fp, #0
    4838:	d021      	beq.n	487e <am_hal_uart_service_buffered_timeout_save+0xaa>
    483a:	45b3      	cmp	fp, r6
    483c:	d014      	beq.n	4868 <am_hal_uart_service_buffered_timeout_save+0x94>
    483e:	f1bb 0f02 	cmp.w	fp, #2
    4842:	d008      	beq.n	4856 <am_hal_uart_service_buffered_timeout_save+0x82>
        while (!AM_BFRn(UART, ui32Module, FR, RXFE))
    4844:	683a      	ldr	r2, [r7, #0]
    4846:	06d3      	lsls	r3, r2, #27
    4848:	d43a      	bmi.n	48c0 <am_hal_uart_service_buffered_timeout_save+0xec>
            ui32FifoEntry = AM_REGn(UART, ui32Module, DR);
    484a:	682b      	ldr	r3, [r5, #0]
            if ( (ui32FifoEntry & 0xF00) == 0)
    484c:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    4850:	f000 8090 	beq.w	4974 <am_hal_uart_service_buffered_timeout_save+0x1a0>
            if ( ++ui32Count >= (ui32FifoThreshold - 1) )
    4854:	3601      	adds	r6, #1
        while (!AM_BFRn(UART, ui32Module, FR, RXFE))
    4856:	6838      	ldr	r0, [r7, #0]
    4858:	06c0      	lsls	r0, r0, #27
    485a:	d431      	bmi.n	48c0 <am_hal_uart_service_buffered_timeout_save+0xec>
            ui32FifoEntry = AM_REGn(UART, ui32Module, DR);
    485c:	682b      	ldr	r3, [r5, #0]
            if ( (ui32FifoEntry & 0xF00) == 0)
    485e:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    4862:	f000 8090 	beq.w	4986 <am_hal_uart_service_buffered_timeout_save+0x1b2>
            if ( ++ui32Count >= (ui32FifoThreshold - 1) )
    4866:	3601      	adds	r6, #1
        while (!AM_BFRn(UART, ui32Module, FR, RXFE))
    4868:	6839      	ldr	r1, [r7, #0]
    486a:	06c9      	lsls	r1, r1, #27
    486c:	d428      	bmi.n	48c0 <am_hal_uart_service_buffered_timeout_save+0xec>
            ui32FifoEntry = AM_REGn(UART, ui32Module, DR);
    486e:	682b      	ldr	r3, [r5, #0]
            if ( (ui32FifoEntry & 0xF00) == 0)
    4870:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    4874:	f000 8090 	beq.w	4998 <am_hal_uart_service_buffered_timeout_save+0x1c4>
            if ( ++ui32Count >= (ui32FifoThreshold - 1) )
    4878:	3601      	adds	r6, #1
    487a:	4546      	cmp	r6, r8
    487c:	d220      	bcs.n	48c0 <am_hal_uart_service_buffered_timeout_save+0xec>
        while (!AM_BFRn(UART, ui32Module, FR, RXFE))
    487e:	683a      	ldr	r2, [r7, #0]
    4880:	06d0      	lsls	r0, r2, #27
    4882:	d41d      	bmi.n	48c0 <am_hal_uart_service_buffered_timeout_save+0xec>
            ui32FifoEntry = AM_REGn(UART, ui32Module, DR);
    4884:	682b      	ldr	r3, [r5, #0]
            if ( (ui32FifoEntry & 0xF00) == 0)
    4886:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    488a:	d046      	beq.n	491a <am_hal_uart_service_buffered_timeout_save+0x146>
        while (!AM_BFRn(UART, ui32Module, FR, RXFE))
    488c:	6838      	ldr	r0, [r7, #0]
    488e:	06c3      	lsls	r3, r0, #27
            if ( ++ui32Count >= (ui32FifoThreshold - 1) )
    4890:	f106 0601 	add.w	r6, r6, #1
        while (!AM_BFRn(UART, ui32Module, FR, RXFE))
    4894:	d414      	bmi.n	48c0 <am_hal_uart_service_buffered_timeout_save+0xec>
            ui32FifoEntry = AM_REGn(UART, ui32Module, DR);
    4896:	682b      	ldr	r3, [r5, #0]
            if ( (ui32FifoEntry & 0xF00) == 0)
    4898:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    489c:	d046      	beq.n	492c <am_hal_uart_service_buffered_timeout_save+0x158>
        while (!AM_BFRn(UART, ui32Module, FR, RXFE))
    489e:	6839      	ldr	r1, [r7, #0]
    48a0:	06ca      	lsls	r2, r1, #27
    48a2:	d40d      	bmi.n	48c0 <am_hal_uart_service_buffered_timeout_save+0xec>
            ui32FifoEntry = AM_REGn(UART, ui32Module, DR);
    48a4:	682b      	ldr	r3, [r5, #0]
            if ( (ui32FifoEntry & 0xF00) == 0)
    48a6:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    48aa:	d048      	beq.n	493e <am_hal_uart_service_buffered_timeout_save+0x16a>
        while (!AM_BFRn(UART, ui32Module, FR, RXFE))
    48ac:	683a      	ldr	r2, [r7, #0]
    48ae:	06d3      	lsls	r3, r2, #27
    48b0:	d406      	bmi.n	48c0 <am_hal_uart_service_buffered_timeout_save+0xec>
            ui32FifoEntry = AM_REGn(UART, ui32Module, DR);
    48b2:	682b      	ldr	r3, [r5, #0]
            if ( (ui32FifoEntry & 0xF00) == 0)
    48b4:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    48b8:	d04a      	beq.n	4950 <am_hal_uart_service_buffered_timeout_save+0x17c>
            if ( ++ui32Count >= (ui32FifoThreshold - 1) )
    48ba:	3603      	adds	r6, #3
    48bc:	4546      	cmp	r6, r8
    48be:	d3de      	bcc.n	487e <am_hal_uart_service_buffered_timeout_save+0xaa>

    //
    // Check to see if our TX buffer has been recently emptied. If so, we
    // should refill it from the TX ring buffer.
    //
    if (ui32Status & AM_REG_UART_IES_TXRIS_M)
    48c0:	f01a 0f20 	tst.w	sl, #32
    48c4:	d023      	beq.n	490e <am_hal_uart_service_buffered_timeout_save+0x13a>
    {
        //
        // Keep refilling until the fifo is full, or the ring buffer is empty,
        // whichever happens first.
        //
        while (am_hal_queue_data_left(&g_psTxQueue[ui32Module]) &&
    48c6:	4d3b      	ldr	r5, [pc, #236]	; (49b4 <am_hal_uart_service_buffered_timeout_save+0x1e0>)
    48c8:	eb04 0744 	add.w	r7, r4, r4, lsl #1
    48cc:	eb05 08c7 	add.w	r8, r5, r7, lsl #3
    48d0:	f8d8 6008 	ldr.w	r6, [r8, #8]
    48d4:	b1de      	cbz	r6, 490e <am_hal_uart_service_buffered_timeout_save+0x13a>
               !AM_BFRn(UART, ui32Module, FR, TXFF))
    48d6:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
    48da:	341c      	adds	r4, #28
    48dc:	0325      	lsls	r5, r4, #12
    48de:	f105 0b18 	add.w	fp, r5, #24
    48e2:	69a8      	ldr	r0, [r5, #24]
        while (am_hal_queue_data_left(&g_psTxQueue[ui32Module]) &&
    48e4:	0681      	lsls	r1, r0, #26
    48e6:	d412      	bmi.n	490e <am_hal_uart_service_buffered_timeout_save+0x13a>
    48e8:	46c1      	mov	r9, r8
    48ea:	e003      	b.n	48f4 <am_hal_uart_service_buffered_timeout_save+0x120>
               !AM_BFRn(UART, ui32Module, FR, TXFF))
    48ec:	f8db 3000 	ldr.w	r3, [fp]
        while (am_hal_queue_data_left(&g_psTxQueue[ui32Module]) &&
    48f0:	069a      	lsls	r2, r3, #26
    48f2:	d40c      	bmi.n	490e <am_hal_uart_service_buffered_timeout_save+0x13a>
        {
            am_hal_queue_item_get(&g_psTxQueue[ui32Module], &ui8Character, 1);
    48f4:	2201      	movs	r2, #1
    48f6:	f10d 0107 	add.w	r1, sp, #7
    48fa:	4640      	mov	r0, r8
    48fc:	f7ff fd32 	bl	4364 <am_hal_queue_item_get>
            AM_REGn(UART, ui32Module , DR) = ui8Character;
    4900:	f89d 1007 	ldrb.w	r1, [sp, #7]
    4904:	6029      	str	r1, [r5, #0]
        while (am_hal_queue_data_left(&g_psTxQueue[ui32Module]) &&
    4906:	f8d9 2008 	ldr.w	r2, [r9, #8]
    490a:	2a00      	cmp	r2, #0
    490c:	d1ee      	bne.n	48ec <am_hal_uart_service_buffered_timeout_save+0x118>
        }
    }
}
    490e:	b003      	add	sp, #12
    4910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ui32FifoCfg = AM_BFMn(UART, ui32Module, IFLS, RXIFLSEL);
    4914:	f04f 0820 	mov.w	r8, #32
    4918:	e774      	b.n	4804 <am_hal_uart_service_buffered_timeout_save+0x30>
                am_hal_queue_item_add(&g_psRxQueue[ui32Module], &ui8Character, 1);
    491a:	2201      	movs	r2, #1
    491c:	f10d 0107 	add.w	r1, sp, #7
    4920:	4648      	mov	r0, r9
                ui8Character = ui32FifoEntry & 0xFF;
    4922:	f88d 3007 	strb.w	r3, [sp, #7]
                am_hal_queue_item_add(&g_psRxQueue[ui32Module], &ui8Character, 1);
    4926:	f7ff fc8d 	bl	4244 <am_hal_queue_item_add>
    492a:	e7af      	b.n	488c <am_hal_uart_service_buffered_timeout_save+0xb8>
    492c:	2201      	movs	r2, #1
    492e:	f10d 0107 	add.w	r1, sp, #7
    4932:	4648      	mov	r0, r9
                ui8Character = ui32FifoEntry & 0xFF;
    4934:	f88d 3007 	strb.w	r3, [sp, #7]
                am_hal_queue_item_add(&g_psRxQueue[ui32Module], &ui8Character, 1);
    4938:	f7ff fc84 	bl	4244 <am_hal_queue_item_add>
    493c:	e7af      	b.n	489e <am_hal_uart_service_buffered_timeout_save+0xca>
    493e:	2201      	movs	r2, #1
    4940:	f10d 0107 	add.w	r1, sp, #7
    4944:	4648      	mov	r0, r9
                ui8Character = ui32FifoEntry & 0xFF;
    4946:	f88d 3007 	strb.w	r3, [sp, #7]
                am_hal_queue_item_add(&g_psRxQueue[ui32Module], &ui8Character, 1);
    494a:	f7ff fc7b 	bl	4244 <am_hal_queue_item_add>
    494e:	e7ad      	b.n	48ac <am_hal_uart_service_buffered_timeout_save+0xd8>
    4950:	2201      	movs	r2, #1
    4952:	f10d 0107 	add.w	r1, sp, #7
    4956:	4648      	mov	r0, r9
                ui8Character = ui32FifoEntry & 0xFF;
    4958:	f88d 3007 	strb.w	r3, [sp, #7]
                am_hal_queue_item_add(&g_psRxQueue[ui32Module], &ui8Character, 1);
    495c:	f7ff fc72 	bl	4244 <am_hal_queue_item_add>
    4960:	e7ab      	b.n	48ba <am_hal_uart_service_buffered_timeout_save+0xe6>
    4962:	2201      	movs	r2, #1
    4964:	f10d 0107 	add.w	r1, sp, #7
    4968:	4648      	mov	r0, r9
                ui8Character = ui32FifoEntry & 0xFF;
    496a:	f88d 6007 	strb.w	r6, [sp, #7]
                am_hal_queue_item_add(&g_psRxQueue[ui32Module], &ui8Character, 1);
    496e:	f7ff fc69 	bl	4244 <am_hal_queue_item_add>
    4972:	e75c      	b.n	482e <am_hal_uart_service_buffered_timeout_save+0x5a>
    4974:	4632      	mov	r2, r6
    4976:	f10d 0107 	add.w	r1, sp, #7
    497a:	4648      	mov	r0, r9
                ui8Character = ui32FifoEntry & 0xFF;
    497c:	f88d 3007 	strb.w	r3, [sp, #7]
                am_hal_queue_item_add(&g_psRxQueue[ui32Module], &ui8Character, 1);
    4980:	f7ff fc60 	bl	4244 <am_hal_queue_item_add>
    4984:	e766      	b.n	4854 <am_hal_uart_service_buffered_timeout_save+0x80>
    4986:	2201      	movs	r2, #1
    4988:	f10d 0107 	add.w	r1, sp, #7
    498c:	4648      	mov	r0, r9
                ui8Character = ui32FifoEntry & 0xFF;
    498e:	f88d 3007 	strb.w	r3, [sp, #7]
                am_hal_queue_item_add(&g_psRxQueue[ui32Module], &ui8Character, 1);
    4992:	f7ff fc57 	bl	4244 <am_hal_queue_item_add>
    4996:	e766      	b.n	4866 <am_hal_uart_service_buffered_timeout_save+0x92>
    4998:	2201      	movs	r2, #1
    499a:	f10d 0107 	add.w	r1, sp, #7
    499e:	4648      	mov	r0, r9
                ui8Character = ui32FifoEntry & 0xFF;
    49a0:	f88d 3007 	strb.w	r3, [sp, #7]
                am_hal_queue_item_add(&g_psRxQueue[ui32Module], &ui8Character, 1);
    49a4:	f7ff fc4e 	bl	4244 <am_hal_queue_item_add>
    49a8:	e766      	b.n	4878 <am_hal_uart_service_buffered_timeout_save+0xa4>
    49aa:	bf00      	nop
    49ac:	00004d20 	.word	0x00004d20
    49b0:	10000c50 	.word	0x10000c50
    49b4:	10000c80 	.word	0x10000c80

000049b8 <am_hal_uart_char_transmit_buffered>:
//! @return None.
//
//*****************************************************************************
void
am_hal_uart_char_transmit_buffered(uint32_t ui32Module, char cChar)
{
    49b8:	b510      	push	{r4, lr}
    //
    // Check the status of the Tx fifo and the Tx ring buffer.
    //
    if (am_hal_queue_empty(&g_psTxQueue[ui32Module]) &&
    49ba:	0042      	lsls	r2, r0, #1
{
    49bc:	b082      	sub	sp, #8
    if (am_hal_queue_empty(&g_psTxQueue[ui32Module]) &&
    49be:	4c0f      	ldr	r4, [pc, #60]	; (49fc <am_hal_uart_char_transmit_buffered+0x44>)
{
    49c0:	f88d 1007 	strb.w	r1, [sp, #7]
    if (am_hal_queue_empty(&g_psTxQueue[ui32Module]) &&
    49c4:	1813      	adds	r3, r2, r0
    49c6:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    49ca:	688b      	ldr	r3, [r1, #8]
    49cc:	b933      	cbnz	r3, 49dc <am_hal_uart_char_transmit_buffered+0x24>
        !AM_BFRn(UART, ui32Module, FR, TXFF))
    49ce:	f500 2180 	add.w	r1, r0, #262144	; 0x40000
    49d2:	311c      	adds	r1, #28
    49d4:	030b      	lsls	r3, r1, #12
    49d6:	6999      	ldr	r1, [r3, #24]
    if (am_hal_queue_empty(&g_psTxQueue[ui32Module]) &&
    49d8:	0689      	lsls	r1, r1, #26
    49da:	d509      	bpl.n	49f0 <am_hal_uart_char_transmit_buffered+0x38>
        // already in use. In either case, we need to use the ring buffer
        // to make sure that the transmitted data gets sent in the right
        // order. If the buffer is already full, we will simply lose this
        // byte.
        //
        am_hal_queue_item_add(&g_psTxQueue[ui32Module], &cChar, 1);
    49dc:	4410      	add	r0, r2
    49de:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    49e2:	2201      	movs	r2, #1
    49e4:	f10d 0107 	add.w	r1, sp, #7
    49e8:	f7ff fc2c 	bl	4244 <am_hal_queue_item_add>
    }
}
    49ec:	b002      	add	sp, #8
    49ee:	bd10      	pop	{r4, pc}
        AM_REGn(UART, ui32Module, DR) = cChar;
    49f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    49f4:	6018      	str	r0, [r3, #0]
}
    49f6:	b002      	add	sp, #8
    49f8:	bd10      	pop	{r4, pc}
    49fa:	bf00      	nop
    49fc:	10000c80 	.word	0x10000c80

00004a00 <am_hal_uart_char_receive_buffered>:
//*****************************************************************************
uint32_t
am_hal_uart_char_receive_buffered(uint32_t ui32Module,
                                  char *pcString,
                                  uint32_t ui32MaxChars)
{
    4a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t ui32NumChars = 0;

    //
    // Loop until ui32MaxChars or until empty.
    //
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    4a04:	4c3a      	ldr	r4, [pc, #232]	; (4af0 <am_hal_uart_char_receive_buffered+0xf0>)
    4a06:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    4a0a:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    4a0e:	f8d4 9008 	ldr.w	r9, [r4, #8]
    4a12:	f1b9 0f00 	cmp.w	r9, #0
    4a16:	d066      	beq.n	4ae6 <am_hal_uart_char_receive_buffered+0xe6>
    4a18:	2a00      	cmp	r2, #0
    4a1a:	d067      	beq.n	4aec <am_hal_uart_char_receive_buffered+0xec>
    4a1c:	46a2      	mov	sl, r4
    4a1e:	1e53      	subs	r3, r2, #1
    4a20:	4617      	mov	r7, r2
    {
        //
        // Pull a char out of the ring buffer.
        //
        am_hal_queue_item_get(&g_psRxQueue[ui32Module], pcString, 1);
    4a22:	4620      	mov	r0, r4
    4a24:	2201      	movs	r2, #1
    4a26:	460d      	mov	r5, r1
    4a28:	f003 0803 	and.w	r8, r3, #3
    4a2c:	f7ff fc9a 	bl	4364 <am_hal_queue_item_get>
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    4a30:	f85a 1f08 	ldr.w	r1, [sl, #8]!
    4a34:	4626      	mov	r6, r4
        // Subtract from ui32MaxChars.
        // Add to ui32NumChars.
        // Move pointer in buffer.
        //
        ui32MaxChars--;
        ui32NumChars++;
    4a36:	f04f 0901 	mov.w	r9, #1
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    4a3a:	2900      	cmp	r1, #0
    4a3c:	d053      	beq.n	4ae6 <am_hal_uart_char_receive_buffered+0xe6>
    4a3e:	2f01      	cmp	r7, #1
    4a40:	d051      	beq.n	4ae6 <am_hal_uart_char_receive_buffered+0xe6>
    4a42:	f1b8 0f00 	cmp.w	r8, #0
    4a46:	d026      	beq.n	4a96 <am_hal_uart_char_receive_buffered+0x96>
    4a48:	f1b8 0f01 	cmp.w	r8, #1
    4a4c:	d017      	beq.n	4a7e <am_hal_uart_char_receive_buffered+0x7e>
    4a4e:	f1b8 0f02 	cmp.w	r8, #2
    4a52:	d00a      	beq.n	4a6a <am_hal_uart_char_receive_buffered+0x6a>
        am_hal_queue_item_get(&g_psRxQueue[ui32Module], pcString, 1);
    4a54:	464a      	mov	r2, r9
    4a56:	1c69      	adds	r1, r5, #1
    4a58:	4620      	mov	r0, r4
    4a5a:	f7ff fc83 	bl	4364 <am_hal_queue_item_get>
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    4a5e:	f8da 2000 	ldr.w	r2, [sl]
        ui32NumChars++;
    4a62:	f04f 0902 	mov.w	r9, #2
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    4a66:	2a00      	cmp	r2, #0
    4a68:	d03d      	beq.n	4ae6 <am_hal_uart_char_receive_buffered+0xe6>
        am_hal_queue_item_get(&g_psRxQueue[ui32Module], pcString, 1);
    4a6a:	eb05 0109 	add.w	r1, r5, r9
    4a6e:	2201      	movs	r2, #1
    4a70:	4620      	mov	r0, r4
    4a72:	f7ff fc77 	bl	4364 <am_hal_queue_item_get>
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    4a76:	68b0      	ldr	r0, [r6, #8]
        ui32NumChars++;
    4a78:	f109 0901 	add.w	r9, r9, #1
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    4a7c:	b398      	cbz	r0, 4ae6 <am_hal_uart_char_receive_buffered+0xe6>
        am_hal_queue_item_get(&g_psRxQueue[ui32Module], pcString, 1);
    4a7e:	eb05 0109 	add.w	r1, r5, r9
    4a82:	2201      	movs	r2, #1
    4a84:	4620      	mov	r0, r4
    4a86:	f7ff fc6d 	bl	4364 <am_hal_queue_item_get>
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    4a8a:	68b3      	ldr	r3, [r6, #8]
        ui32NumChars++;
    4a8c:	f109 0901 	add.w	r9, r9, #1
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    4a90:	b34b      	cbz	r3, 4ae6 <am_hal_uart_char_receive_buffered+0xe6>
    4a92:	454f      	cmp	r7, r9
    4a94:	d027      	beq.n	4ae6 <am_hal_uart_char_receive_buffered+0xe6>
        am_hal_queue_item_get(&g_psRxQueue[ui32Module], pcString, 1);
    4a96:	eb05 0109 	add.w	r1, r5, r9
    4a9a:	2201      	movs	r2, #1
    4a9c:	4620      	mov	r0, r4
    4a9e:	f7ff fc61 	bl	4364 <am_hal_queue_item_get>
    4aa2:	2201      	movs	r2, #1
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    4aa4:	68b3      	ldr	r3, [r6, #8]
        ui32NumChars++;
    4aa6:	4491      	add	r9, r2
        am_hal_queue_item_get(&g_psRxQueue[ui32Module], pcString, 1);
    4aa8:	4620      	mov	r0, r4
    4aaa:	eb05 0109 	add.w	r1, r5, r9
        ui32NumChars++;
    4aae:	46ca      	mov	sl, r9
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    4ab0:	b1cb      	cbz	r3, 4ae6 <am_hal_uart_char_receive_buffered+0xe6>
        am_hal_queue_item_get(&g_psRxQueue[ui32Module], pcString, 1);
    4ab2:	f7ff fc57 	bl	4364 <am_hal_queue_item_get>
    4ab6:	2201      	movs	r2, #1
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    4ab8:	68b3      	ldr	r3, [r6, #8]
        ui32NumChars++;
    4aba:	4491      	add	r9, r2
        am_hal_queue_item_get(&g_psRxQueue[ui32Module], pcString, 1);
    4abc:	4620      	mov	r0, r4
    4abe:	eb05 0109 	add.w	r1, r5, r9
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    4ac2:	b183      	cbz	r3, 4ae6 <am_hal_uart_char_receive_buffered+0xe6>
        am_hal_queue_item_get(&g_psRxQueue[ui32Module], pcString, 1);
    4ac4:	f7ff fc4e 	bl	4364 <am_hal_queue_item_get>
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    4ac8:	68b3      	ldr	r3, [r6, #8]
        ui32NumChars++;
    4aca:	f10a 0902 	add.w	r9, sl, #2
        am_hal_queue_item_get(&g_psRxQueue[ui32Module], pcString, 1);
    4ace:	2201      	movs	r2, #1
    4ad0:	4620      	mov	r0, r4
    4ad2:	eb05 0109 	add.w	r1, r5, r9
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    4ad6:	b133      	cbz	r3, 4ae6 <am_hal_uart_char_receive_buffered+0xe6>
        am_hal_queue_item_get(&g_psRxQueue[ui32Module], pcString, 1);
    4ad8:	f7ff fc44 	bl	4364 <am_hal_queue_item_get>
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    4adc:	68b1      	ldr	r1, [r6, #8]
        ui32NumChars++;
    4ade:	f10a 0903 	add.w	r9, sl, #3
    while (am_hal_queue_data_left(&g_psRxQueue[ui32Module]) && ui32MaxChars)
    4ae2:	2900      	cmp	r1, #0
    4ae4:	d1d5      	bne.n	4a92 <am_hal_uart_char_receive_buffered+0x92>

    //
    // return the number of chars received.
    //
    return ui32NumChars;
}
    4ae6:	4648      	mov	r0, r9
    4ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint32_t ui32NumChars = 0;
    4aec:	4691      	mov	r9, r2
    return ui32NumChars;
    4aee:	e7fa      	b.n	4ae6 <am_hal_uart_char_receive_buffered+0xe6>
    4af0:	10000c50 	.word	0x10000c50

00004af4 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    4af4:	4b01      	ldr	r3, [pc, #4]	; (4afc <am_hal_vcomp_disable+0x8>)
    4af6:	2237      	movs	r2, #55	; 0x37
    4af8:	601a      	str	r2, [r3, #0]
    4afa:	4770      	bx	lr
    4afc:	4000c008 	.word	0x4000c008

00004b00 <memcpy>:
    4b00:	b510      	push	{r4, lr}
    4b02:	1e43      	subs	r3, r0, #1
    4b04:	440a      	add	r2, r1
    4b06:	4291      	cmp	r1, r2
    4b08:	d100      	bne.n	4b0c <memcpy+0xc>
    4b0a:	bd10      	pop	{r4, pc}
    4b0c:	f811 4b01 	ldrb.w	r4, [r1], #1
    4b10:	f803 4f01 	strb.w	r4, [r3, #1]!
    4b14:	e7f7      	b.n	4b06 <memcpy+0x6>
	...

00004b18 <g_sEm9304IOMConfigSPI>:
    4b18:	0001 0000 1200 007a 0000 1414               ......z.....

00004b24 <g_sEm9304>:
    4b24:	0000 0000 0005 0000 002d 0000 002e 0000     ........-.......

00004b34 <am_hal_cachectrl_defaults>:
    4b34:	0001 5000 0300 0001 0101 0001 6d61 685f     ...P........am_h
    4b44:	6c61 635f 6b6c 6567 5f6e 7973 6373 6b6c     al_clkgen_sysclk
    4b54:	735f 6c65 6365 2874 3a29 6920 766e 6c61     _select(): inval
    4b64:	6469 6320 6f6c 6b63 7320 7465 6974 676e     id clock setting
    4b74:	002e 0000 2e2e 2e5c 5c2e 6d61 685f 6c61     ......\..\am_hal
    4b84:	635f 6b6c 6567 2e6e 0063 0000 6854 2065     _clkgen.c...The 
    4b94:	6966 6f66 6320 756f 646c 276e 2074 6966     fifo couldn't fi
    4ba4:	2074 6874 2065 6572 7571 7365 6574 2064     t the requested 
    4bb4:	756e 626d 7265 6f20 2066 7962 6574 0073     number of bytes.
    4bc4:	2e2e 2e5c 5c2e 6d61 685f 6c61 695f 6d6f     ..\..\am_hal_iom
    4bd4:	632e 0000 6854 2065 6966 6f66 6420 656f     .c..The fifo doe
    4be4:	6e73 7427 6320 6e6f 6174 6e69 7420 6568     sn't contain the
    4bf4:	7220 7165 6575 7473 6465 6e20 6d75 6562      requested numbe
    4c04:	2072 666f 6220 7479 7365 002e 7254 6979     r of bytes..Tryi
    4c14:	676e 7420 206f 6964 6173 6c62 2065 6e61     ng to disable an
    4c24:	4920 4d4f 6d20 646f 6c75 2065 6874 7461      IOM module that
    4c34:	6420 656f 6e73 7427 6520 6978 7473 002e      doesn't exist..
    4c44:	7254 6979 676e 7420 206f 6e65 6261 656c     Trying to enable
    4c54:	6120 206e 4f49 204d 6f6d 7564 656c 7420      an IOM module t
    4c64:	6168 2074 6f64 7365 276e 2074 7865 7369     hat doesn't exis
    4c74:	2e74 0000 7254 6979 676e 7420 206f 6f64     t...Trying to do
    4c84:	6120 3020 6220 7479 2065 7274 6e61 6173      a 0 byte transa
    4c94:	7463 6f69 006e 0000 5053 2049 7274 6e61     ction...SPI tran
    4ca4:	6673 7265 7420 6f6f 6220 6769 002e 0000     sfer too big....
    4cb4:	6e49 6176 696c 2064 6948 4620 6572 7571     Invalid Hi Frequ
    4cc4:	6e65 7963 6620 726f 4920 4d4f 002e 0000     ency for IOM....
    4cd4:	6143 6e6e 746f 6520 616e 6c62 2065 6f6d     Cannot enable mo
    4ce4:	6572 7420 6168 206e 6e6f 2065 6570 6972     re than one peri
    4cf4:	6870 7265 6c61 6120 2074 2061 6974 656d     pheral at a time
    4d04:	002e 0000 2e2e 2e5c 5c2e 6d61 685f 6c61     ......\..\am_hal
    4d14:	705f 7277 7463 6c72 632e 0000               _pwrctrl.c..

00004d20 <CSWTCH.39>:
    4d20:	2004 2020 2020 2020 2008 2020 2020 2020     .       .       
    4d30:	2010 2020 2020 2020 2018 2020 2020 2020     .       .       
    4d40:	001c 0000 6e49 6574 6567 2072 6964 6976     ....Integer divi
    4d50:	6f73 2072 554d 5453 6220 2065 7267 6165     sor MUST be grea
    4d60:	6574 2072 6874 6e61 6f20 2072 7165 6175     ter than or equa
    4d70:	206c 6f74 3120 002e 2e2e 2e5c 5c2e 6d61     l to 1....\..\am
    4d80:	685f 6c61 755f 7261 2e74 0063 7254 6979     _hal_uart.c.Tryi
    4d90:	676e 7420 206f 6964 6173 6c62 2065 2061     ng to disable a 
    4da0:	4155 5452 6d20 646f 6c75 2065 6874 7461     UART module that
    4db0:	6420 656f 6e73 7427 6520 6978 7473 0000      doesn't exist..
