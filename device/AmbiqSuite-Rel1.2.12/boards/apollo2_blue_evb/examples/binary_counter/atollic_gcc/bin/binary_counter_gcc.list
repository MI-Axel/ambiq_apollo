
binary_counter_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002274  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         0000002c  10001000  00002274  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000011c  1000102c  000022a0  0002102c  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  0002102c  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000b741  00000000  00000000  00021063  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000028a6  00000000  00000000  0002c7a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000808  00000000  00000000  0002f04a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001208  00000000  00000000  0002f852  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004b36  00000000  00000000  00030a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002c43  00000000  00000000  00035590  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  000381d3  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001604  00000000  00000000  00038250  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003373  00000000  00000000  00039854  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 01 08 00 00 69 08 00 00 75 08 00 00     ........i...u...
      10:	75 08 00 00 75 08 00 00 75 08 00 00 00 00 00 00     u...u...u.......
	...
      2c:	6f 08 00 00 6f 08 00 00 00 00 00 00 6f 08 00 00     o...o.......o...
      3c:	6f 08 00 00 6f 08 00 00 6f 08 00 00 6f 08 00 00     o...o...o...o...
      4c:	6f 08 00 00 6f 08 00 00 6f 08 00 00 6f 08 00 00     o...o...o...o...
      5c:	6f 08 00 00 6f 08 00 00 6f 08 00 00 6f 08 00 00     o...o...o...o...
      6c:	6f 08 00 00 6f 08 00 00 01 07 00 00 6f 08 00 00     o...o.......o...
      7c:	6f 08 00 00 6f 08 00 00 6f 08 00 00 6f 08 00 00     o...o...o...o...
      8c:	6f 08 00 00 6f 08 00 00 6f 08 00 00 6f 08 00 00     o...o...o...o...
      9c:	6f 08 00 00 6f 08 00 00 6f 08 00 00 6f 08 00 00     o...o...o...o...
      ac:	6f 08 00 00 6f 08 00 00 6f 08 00 00 6f 08 00 00     o...o...o...o...
      bc:	6f 08 00 00                                         o...

000000c0 <__aeabi_d2f>:
      c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
      c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      c8:	bf24      	itt	cs
      ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      d2:	d90d      	bls.n	f0 <__aeabi_d2f+0x30>
      d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      e8:	bf08      	it	eq
      ea:	f020 0001 	biceq.w	r0, r0, #1
      ee:	4770      	bx	lr
      f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      f4:	d121      	bne.n	13a <__aeabi_d2f+0x7a>
      f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      fa:	bfbc      	itt	lt
      fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     100:	4770      	bxlt	lr
     102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     106:	ea4f 5252 	mov.w	r2, r2, lsr #21
     10a:	f1c2 0218 	rsb	r2, r2, #24
     10e:	f1c2 0c20 	rsb	ip, r2, #32
     112:	fa10 f30c 	lsls.w	r3, r0, ip
     116:	fa20 f002 	lsr.w	r0, r0, r2
     11a:	bf18      	it	ne
     11c:	f040 0001 	orrne.w	r0, r0, #1
     120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     128:	fa03 fc0c 	lsl.w	ip, r3, ip
     12c:	ea40 000c 	orr.w	r0, r0, ip
     130:	fa23 f302 	lsr.w	r3, r3, r2
     134:	ea4f 0343 	mov.w	r3, r3, lsl #1
     138:	e7cc      	b.n	d4 <__aeabi_d2f+0x14>
     13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     13e:	d107      	bne.n	150 <__aeabi_d2f+0x90>
     140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     144:	bf1e      	ittt	ne
     146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     14e:	4770      	bxne	lr
     150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     15c:	4770      	bx	lr
     15e:	bf00      	nop

00000160 <am_devices_led_init>:
am_devices_led_array_disable(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
    if ( (psLEDs == NULL)                       ||
         (ui32NumLEDs > MAX_LEDS) )
    {
        return;
     160:	b590      	push	{r4, r7, lr}
        am_hal_gpio_pinconfig((psLEDs + i)->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
#else
        am_hal_gpio_pin_config((psLEDs + i)->ui32GPIONumber, AM_HAL_GPIO_DISABLE);
#endif
    }
}
     162:	b085      	sub	sp, #20
     164:	af00      	add	r7, sp, #0
     166:	6078      	str	r0, [r7, #4]
     168:	687b      	ldr	r3, [r7, #4]
     16a:	2b00      	cmp	r3, #0
     16c:	f000 8162 	beq.w	434 <am_devices_led_init+0x2d4>
     170:	687b      	ldr	r3, [r7, #4]
     172:	681b      	ldr	r3, [r3, #0]
    if ( (psLED == NULL)    ||
     174:	2b31      	cmp	r3, #49	; 0x31
     176:	f200 815d 	bhi.w	434 <am_devices_led_init+0x2d4>
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
     17a:	687b      	ldr	r3, [r7, #4]
     17c:	685b      	ldr	r3, [r3, #4]
     17e:	f003 0302 	and.w	r3, r3, #2
     182:	2b00      	cmp	r3, #0
     184:	f000 80ab 	beq.w	2de <am_devices_led_init+0x17e>
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT);
     188:	687b      	ldr	r3, [r7, #4]
     18a:	681b      	ldr	r3, [r3, #0]
     18c:	2b31      	cmp	r3, #49	; 0x31
     18e:	d86e      	bhi.n	26e <am_devices_led_init+0x10e>
     190:	f001 fd38 	bl	1c04 <am_hal_interrupt_master_disable>
     194:	4603      	mov	r3, r0
     196:	60fb      	str	r3, [r7, #12]
     198:	4ba8      	ldr	r3, [pc, #672]	; (43c <am_devices_led_init+0x2dc>)
     19a:	2273      	movs	r2, #115	; 0x73
     19c:	601a      	str	r2, [r3, #0]
     19e:	687b      	ldr	r3, [r7, #4]
     1a0:	681b      	ldr	r3, [r3, #0]
     1a2:	085b      	lsrs	r3, r3, #1
     1a4:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     1a8:	4ba5      	ldr	r3, [pc, #660]	; (440 <am_devices_led_init+0x2e0>)
     1aa:	4413      	add	r3, r2
     1ac:	461c      	mov	r4, r3
     1ae:	687b      	ldr	r3, [r7, #4]
     1b0:	681b      	ldr	r3, [r3, #0]
     1b2:	009b      	lsls	r3, r3, #2
     1b4:	f003 031c 	and.w	r3, r3, #28
     1b8:	2202      	movs	r2, #2
     1ba:	409a      	lsls	r2, r3
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	681b      	ldr	r3, [r3, #0]
     1c0:	085b      	lsrs	r3, r3, #1
     1c2:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     1c6:	4b9e      	ldr	r3, [pc, #632]	; (440 <am_devices_led_init+0x2e0>)
     1c8:	440b      	add	r3, r1
     1ca:	6819      	ldr	r1, [r3, #0]
     1cc:	687b      	ldr	r3, [r7, #4]
     1ce:	681b      	ldr	r3, [r3, #0]
     1d0:	009b      	lsls	r3, r3, #2
     1d2:	f003 031c 	and.w	r3, r3, #28
     1d6:	2007      	movs	r0, #7
     1d8:	fa00 f303 	lsl.w	r3, r0, r3
     1dc:	43db      	mvns	r3, r3
     1de:	400b      	ands	r3, r1
     1e0:	4313      	orrs	r3, r2
     1e2:	6023      	str	r3, [r4, #0]
     1e4:	687b      	ldr	r3, [r7, #4]
     1e6:	681b      	ldr	r3, [r3, #0]
     1e8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     1ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     1f0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     1f4:	461c      	mov	r4, r3
     1f6:	687b      	ldr	r3, [r7, #4]
     1f8:	681b      	ldr	r3, [r3, #0]
     1fa:	00db      	lsls	r3, r3, #3
     1fc:	f003 0318 	and.w	r3, r3, #24
     200:	2218      	movs	r2, #24
     202:	409a      	lsls	r2, r3
     204:	687b      	ldr	r3, [r7, #4]
     206:	681b      	ldr	r3, [r3, #0]
     208:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     20c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     210:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     214:	6819      	ldr	r1, [r3, #0]
     216:	687b      	ldr	r3, [r7, #4]
     218:	681b      	ldr	r3, [r3, #0]
     21a:	00db      	lsls	r3, r3, #3
     21c:	f003 0318 	and.w	r3, r3, #24
     220:	20ff      	movs	r0, #255	; 0xff
     222:	fa00 f303 	lsl.w	r3, r0, r3
     226:	43db      	mvns	r3, r3
     228:	400b      	ands	r3, r1
     22a:	4313      	orrs	r3, r2
     22c:	6023      	str	r3, [r4, #0]
     22e:	687b      	ldr	r3, [r7, #4]
     230:	681b      	ldr	r3, [r3, #0]
     232:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     236:	4b83      	ldr	r3, [pc, #524]	; (444 <am_devices_led_init+0x2e4>)
     238:	4413      	add	r3, r2
     23a:	4618      	mov	r0, r3
     23c:	687b      	ldr	r3, [r7, #4]
     23e:	681b      	ldr	r3, [r3, #0]
     240:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     244:	4b7f      	ldr	r3, [pc, #508]	; (444 <am_devices_led_init+0x2e4>)
     246:	4413      	add	r3, r2
     248:	681a      	ldr	r2, [r3, #0]
     24a:	687b      	ldr	r3, [r7, #4]
     24c:	681b      	ldr	r3, [r3, #0]
     24e:	00db      	lsls	r3, r3, #3
     250:	f003 0318 	and.w	r3, r3, #24
     254:	21ff      	movs	r1, #255	; 0xff
     256:	fa01 f303 	lsl.w	r3, r1, r3
     25a:	43db      	mvns	r3, r3
     25c:	4013      	ands	r3, r2
     25e:	6003      	str	r3, [r0, #0]
     260:	4b76      	ldr	r3, [pc, #472]	; (43c <am_devices_led_init+0x2dc>)
     262:	2200      	movs	r2, #0
     264:	601a      	str	r2, [r3, #0]
     266:	68fb      	ldr	r3, [r7, #12]
     268:	4618      	mov	r0, r3
     26a:	f001 fccf 	bl	1c0c <am_hal_interrupt_master_set>
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     26e:	687b      	ldr	r3, [r7, #4]
     270:	681b      	ldr	r3, [r3, #0]
     272:	08db      	lsrs	r3, r3, #3
     274:	f003 0204 	and.w	r2, r3, #4
     278:	4b73      	ldr	r3, [pc, #460]	; (448 <am_devices_led_init+0x2e8>)
     27a:	4413      	add	r3, r2
     27c:	4619      	mov	r1, r3
     27e:	687b      	ldr	r3, [r7, #4]
     280:	681b      	ldr	r3, [r3, #0]
     282:	f003 031f 	and.w	r3, r3, #31
     286:	2201      	movs	r2, #1
     288:	fa02 f303 	lsl.w	r3, r2, r3
     28c:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     28e:	687b      	ldr	r3, [r7, #4]
     290:	685b      	ldr	r3, [r3, #4]
     292:	f003 0301 	and.w	r3, r3, #1
     296:	2b00      	cmp	r3, #0
     298:	d010      	beq.n	2bc <am_devices_led_init+0x15c>
     29a:	687b      	ldr	r3, [r7, #4]
     29c:	681b      	ldr	r3, [r3, #0]
     29e:	08db      	lsrs	r3, r3, #3
     2a0:	f003 0204 	and.w	r2, r3, #4
     2a4:	4b69      	ldr	r3, [pc, #420]	; (44c <am_devices_led_init+0x2ec>)
     2a6:	4413      	add	r3, r2
     2a8:	4619      	mov	r1, r3
     2aa:	687b      	ldr	r3, [r7, #4]
     2ac:	681b      	ldr	r3, [r3, #0]
     2ae:	f003 031f 	and.w	r3, r3, #31
     2b2:	2201      	movs	r2, #1
     2b4:	fa02 f303 	lsl.w	r3, r2, r3
     2b8:	600b      	str	r3, [r1, #0]
     2ba:	e0bc      	b.n	436 <am_devices_led_init+0x2d6>
     2bc:	687b      	ldr	r3, [r7, #4]
     2be:	681b      	ldr	r3, [r3, #0]
     2c0:	08db      	lsrs	r3, r3, #3
     2c2:	f003 0204 	and.w	r2, r3, #4
     2c6:	4b62      	ldr	r3, [pc, #392]	; (450 <am_devices_led_init+0x2f0>)
     2c8:	4413      	add	r3, r2
     2ca:	4619      	mov	r1, r3
     2cc:	687b      	ldr	r3, [r7, #4]
     2ce:	681b      	ldr	r3, [r3, #0]
     2d0:	f003 031f 	and.w	r3, r3, #31
     2d4:	2201      	movs	r2, #1
     2d6:	fa02 f303 	lsl.w	r3, r2, r3
     2da:	600b      	str	r3, [r1, #0]
     2dc:	e0ab      	b.n	436 <am_devices_led_init+0x2d6>
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     2de:	687b      	ldr	r3, [r7, #4]
     2e0:	681b      	ldr	r3, [r3, #0]
     2e2:	2b31      	cmp	r3, #49	; 0x31
     2e4:	d86e      	bhi.n	3c4 <am_devices_led_init+0x264>
     2e6:	f001 fc8d 	bl	1c04 <am_hal_interrupt_master_disable>
     2ea:	4603      	mov	r3, r0
     2ec:	60bb      	str	r3, [r7, #8]
     2ee:	4b53      	ldr	r3, [pc, #332]	; (43c <am_devices_led_init+0x2dc>)
     2f0:	2273      	movs	r2, #115	; 0x73
     2f2:	601a      	str	r2, [r3, #0]
     2f4:	687b      	ldr	r3, [r7, #4]
     2f6:	681b      	ldr	r3, [r3, #0]
     2f8:	085b      	lsrs	r3, r3, #1
     2fa:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     2fe:	4b50      	ldr	r3, [pc, #320]	; (440 <am_devices_led_init+0x2e0>)
     300:	4413      	add	r3, r2
     302:	461c      	mov	r4, r3
     304:	687b      	ldr	r3, [r7, #4]
     306:	681b      	ldr	r3, [r3, #0]
     308:	009b      	lsls	r3, r3, #2
     30a:	f003 031c 	and.w	r3, r3, #28
     30e:	2206      	movs	r2, #6
     310:	409a      	lsls	r2, r3
     312:	687b      	ldr	r3, [r7, #4]
     314:	681b      	ldr	r3, [r3, #0]
     316:	085b      	lsrs	r3, r3, #1
     318:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     31c:	4b48      	ldr	r3, [pc, #288]	; (440 <am_devices_led_init+0x2e0>)
     31e:	440b      	add	r3, r1
     320:	6819      	ldr	r1, [r3, #0]
     322:	687b      	ldr	r3, [r7, #4]
     324:	681b      	ldr	r3, [r3, #0]
     326:	009b      	lsls	r3, r3, #2
     328:	f003 031c 	and.w	r3, r3, #28
     32c:	2007      	movs	r0, #7
     32e:	fa00 f303 	lsl.w	r3, r0, r3
     332:	43db      	mvns	r3, r3
     334:	400b      	ands	r3, r1
     336:	4313      	orrs	r3, r2
     338:	6023      	str	r3, [r4, #0]
     33a:	687b      	ldr	r3, [r7, #4]
     33c:	681b      	ldr	r3, [r3, #0]
     33e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     342:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     346:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     34a:	461c      	mov	r4, r3
     34c:	687b      	ldr	r3, [r7, #4]
     34e:	681b      	ldr	r3, [r3, #0]
     350:	00db      	lsls	r3, r3, #3
     352:	f003 0318 	and.w	r3, r3, #24
     356:	2218      	movs	r2, #24
     358:	409a      	lsls	r2, r3
     35a:	687b      	ldr	r3, [r7, #4]
     35c:	681b      	ldr	r3, [r3, #0]
     35e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     362:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     366:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     36a:	6819      	ldr	r1, [r3, #0]
     36c:	687b      	ldr	r3, [r7, #4]
     36e:	681b      	ldr	r3, [r3, #0]
     370:	00db      	lsls	r3, r3, #3
     372:	f003 0318 	and.w	r3, r3, #24
     376:	20ff      	movs	r0, #255	; 0xff
     378:	fa00 f303 	lsl.w	r3, r0, r3
     37c:	43db      	mvns	r3, r3
     37e:	400b      	ands	r3, r1
     380:	4313      	orrs	r3, r2
     382:	6023      	str	r3, [r4, #0]
     384:	687b      	ldr	r3, [r7, #4]
     386:	681b      	ldr	r3, [r3, #0]
     388:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     38c:	4b2d      	ldr	r3, [pc, #180]	; (444 <am_devices_led_init+0x2e4>)
     38e:	4413      	add	r3, r2
     390:	4618      	mov	r0, r3
     392:	687b      	ldr	r3, [r7, #4]
     394:	681b      	ldr	r3, [r3, #0]
     396:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
     39a:	4b2a      	ldr	r3, [pc, #168]	; (444 <am_devices_led_init+0x2e4>)
     39c:	4413      	add	r3, r2
     39e:	681a      	ldr	r2, [r3, #0]
     3a0:	687b      	ldr	r3, [r7, #4]
     3a2:	681b      	ldr	r3, [r3, #0]
     3a4:	00db      	lsls	r3, r3, #3
     3a6:	f003 0318 	and.w	r3, r3, #24
     3aa:	21ff      	movs	r1, #255	; 0xff
     3ac:	fa01 f303 	lsl.w	r3, r1, r3
     3b0:	43db      	mvns	r3, r3
     3b2:	4013      	ands	r3, r2
     3b4:	6003      	str	r3, [r0, #0]
     3b6:	4b21      	ldr	r3, [pc, #132]	; (43c <am_devices_led_init+0x2dc>)
     3b8:	2200      	movs	r2, #0
     3ba:	601a      	str	r2, [r3, #0]
     3bc:	68bb      	ldr	r3, [r7, #8]
     3be:	4618      	mov	r0, r3
     3c0:	f001 fc24 	bl	1c0c <am_hal_interrupt_master_set>
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     3c4:	687b      	ldr	r3, [r7, #4]
     3c6:	681b      	ldr	r3, [r3, #0]
     3c8:	08db      	lsrs	r3, r3, #3
     3ca:	f003 0204 	and.w	r2, r3, #4
     3ce:	4b1e      	ldr	r3, [pc, #120]	; (448 <am_devices_led_init+0x2e8>)
     3d0:	4413      	add	r3, r2
     3d2:	4619      	mov	r1, r3
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	681b      	ldr	r3, [r3, #0]
     3d8:	f003 031f 	and.w	r3, r3, #31
     3dc:	2201      	movs	r2, #1
     3de:	fa02 f303 	lsl.w	r3, r2, r3
     3e2:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     3e4:	687b      	ldr	r3, [r7, #4]
     3e6:	685b      	ldr	r3, [r3, #4]
     3e8:	f003 0301 	and.w	r3, r3, #1
     3ec:	2b00      	cmp	r3, #0
     3ee:	d010      	beq.n	412 <am_devices_led_init+0x2b2>
     3f0:	687b      	ldr	r3, [r7, #4]
     3f2:	681b      	ldr	r3, [r3, #0]
     3f4:	08db      	lsrs	r3, r3, #3
     3f6:	f003 0204 	and.w	r2, r3, #4
     3fa:	4b14      	ldr	r3, [pc, #80]	; (44c <am_devices_led_init+0x2ec>)
     3fc:	4413      	add	r3, r2
     3fe:	4619      	mov	r1, r3
     400:	687b      	ldr	r3, [r7, #4]
     402:	681b      	ldr	r3, [r3, #0]
     404:	f003 031f 	and.w	r3, r3, #31
     408:	2201      	movs	r2, #1
     40a:	fa02 f303 	lsl.w	r3, r2, r3
     40e:	600b      	str	r3, [r1, #0]
     410:	e011      	b.n	436 <am_devices_led_init+0x2d6>
     412:	687b      	ldr	r3, [r7, #4]
     414:	681b      	ldr	r3, [r3, #0]
     416:	08db      	lsrs	r3, r3, #3
     418:	f003 0204 	and.w	r2, r3, #4
     41c:	4b0c      	ldr	r3, [pc, #48]	; (450 <am_devices_led_init+0x2f0>)
     41e:	4413      	add	r3, r2
     420:	4619      	mov	r1, r3
     422:	687b      	ldr	r3, [r7, #4]
     424:	681b      	ldr	r3, [r3, #0]
     426:	f003 031f 	and.w	r3, r3, #31
     42a:	2201      	movs	r2, #1
     42c:	fa02 f303 	lsl.w	r3, r2, r3
     430:	600b      	str	r3, [r1, #0]
     432:	e000      	b.n	436 <am_devices_led_init+0x2d6>
        return;
     434:	bf00      	nop
}
     436:	3714      	adds	r7, #20
     438:	46bd      	mov	sp, r7
     43a:	bd90      	pop	{r4, r7, pc}
     43c:	40010060 	.word	0x40010060
     440:	40010040 	.word	0x40010040
     444:	400100e0 	.word	0x400100e0
     448:	400100b4 	.word	0x400100b4
     44c:	40010090 	.word	0x40010090
     450:	40010098 	.word	0x40010098

00000454 <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
     454:	b580      	push	{r7, lr}
     456:	b084      	sub	sp, #16
     458:	af00      	add	r7, sp, #0
     45a:	6078      	str	r0, [r7, #4]
     45c:	6039      	str	r1, [r7, #0]
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
     45e:	687b      	ldr	r3, [r7, #4]
     460:	2b00      	cmp	r3, #0
     462:	d014      	beq.n	48e <am_devices_led_array_init+0x3a>
     464:	683b      	ldr	r3, [r7, #0]
     466:	2b1f      	cmp	r3, #31
     468:	d811      	bhi.n	48e <am_devices_led_array_init+0x3a>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     46a:	2300      	movs	r3, #0
     46c:	60fb      	str	r3, [r7, #12]
     46e:	e009      	b.n	484 <am_devices_led_array_init+0x30>
    {
        am_devices_led_init(psLEDs + i);
     470:	68fb      	ldr	r3, [r7, #12]
     472:	00db      	lsls	r3, r3, #3
     474:	687a      	ldr	r2, [r7, #4]
     476:	4413      	add	r3, r2
     478:	4618      	mov	r0, r3
     47a:	f7ff fe71 	bl	160 <am_devices_led_init>
    for ( i = 0; i < ui32NumLEDs; i++ )
     47e:	68fb      	ldr	r3, [r7, #12]
     480:	3301      	adds	r3, #1
     482:	60fb      	str	r3, [r7, #12]
     484:	68fa      	ldr	r2, [r7, #12]
     486:	683b      	ldr	r3, [r7, #0]
     488:	429a      	cmp	r2, r3
     48a:	d3f1      	bcc.n	470 <am_devices_led_array_init+0x1c>
     48c:	e000      	b.n	490 <am_devices_led_array_init+0x3c>
        return;
     48e:	bf00      	nop
    }
}
     490:	3710      	adds	r7, #16
     492:	46bd      	mov	sp, r7
     494:	bd80      	pop	{r7, pc}
	...

00000498 <am_devices_led_on>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     498:	b480      	push	{r7}
     49a:	b083      	sub	sp, #12
     49c:	af00      	add	r7, sp, #0
     49e:	6078      	str	r0, [r7, #4]
     4a0:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
     4a2:	687b      	ldr	r3, [r7, #4]
     4a4:	2b00      	cmp	r3, #0
     4a6:	d060      	beq.n	56a <am_devices_led_on+0xd2>
     4a8:	683b      	ldr	r3, [r7, #0]
     4aa:	2b1e      	cmp	r3, #30
     4ac:	d85d      	bhi.n	56a <am_devices_led_on+0xd2>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
     4ae:	683b      	ldr	r3, [r7, #0]
     4b0:	00db      	lsls	r3, r3, #3
     4b2:	687a      	ldr	r2, [r7, #4]
     4b4:	4413      	add	r3, r2
     4b6:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
     4b8:	2b31      	cmp	r3, #49	; 0x31
     4ba:	d856      	bhi.n	56a <am_devices_led_on+0xd2>
    }
#else // AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     4bc:	683b      	ldr	r3, [r7, #0]
     4be:	00db      	lsls	r3, r3, #3
     4c0:	687a      	ldr	r2, [r7, #4]
     4c2:	4413      	add	r3, r2
     4c4:	685b      	ldr	r3, [r3, #4]
     4c6:	f003 0302 	and.w	r3, r3, #2
     4ca:	2b00      	cmp	r3, #0
     4cc:	d036      	beq.n	53c <am_devices_led_on+0xa4>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     4ce:	683b      	ldr	r3, [r7, #0]
     4d0:	00db      	lsls	r3, r3, #3
     4d2:	687a      	ldr	r2, [r7, #4]
     4d4:	4413      	add	r3, r2
     4d6:	685b      	ldr	r3, [r3, #4]
     4d8:	f003 0301 	and.w	r3, r3, #1
     4dc:	2b00      	cmp	r3, #0
     4de:	d016      	beq.n	50e <am_devices_led_on+0x76>
     4e0:	683b      	ldr	r3, [r7, #0]
     4e2:	00db      	lsls	r3, r3, #3
     4e4:	687a      	ldr	r2, [r7, #4]
     4e6:	4413      	add	r3, r2
     4e8:	681b      	ldr	r3, [r3, #0]
     4ea:	08db      	lsrs	r3, r3, #3
     4ec:	f003 0204 	and.w	r2, r3, #4
     4f0:	4b21      	ldr	r3, [pc, #132]	; (578 <am_devices_led_on+0xe0>)
     4f2:	4413      	add	r3, r2
     4f4:	4619      	mov	r1, r3
     4f6:	683b      	ldr	r3, [r7, #0]
     4f8:	00db      	lsls	r3, r3, #3
     4fa:	687a      	ldr	r2, [r7, #4]
     4fc:	4413      	add	r3, r2
     4fe:	681b      	ldr	r3, [r3, #0]
     500:	f003 031f 	and.w	r3, r3, #31
     504:	2201      	movs	r2, #1
     506:	fa02 f303 	lsl.w	r3, r2, r3
     50a:	600b      	str	r3, [r1, #0]
     50c:	e02e      	b.n	56c <am_devices_led_on+0xd4>
     50e:	683b      	ldr	r3, [r7, #0]
     510:	00db      	lsls	r3, r3, #3
     512:	687a      	ldr	r2, [r7, #4]
     514:	4413      	add	r3, r2
     516:	681b      	ldr	r3, [r3, #0]
     518:	08db      	lsrs	r3, r3, #3
     51a:	f003 0204 	and.w	r2, r3, #4
     51e:	4b17      	ldr	r3, [pc, #92]	; (57c <am_devices_led_on+0xe4>)
     520:	4413      	add	r3, r2
     522:	4619      	mov	r1, r3
     524:	683b      	ldr	r3, [r7, #0]
     526:	00db      	lsls	r3, r3, #3
     528:	687a      	ldr	r2, [r7, #4]
     52a:	4413      	add	r3, r2
     52c:	681b      	ldr	r3, [r3, #0]
     52e:	f003 031f 	and.w	r3, r3, #31
     532:	2201      	movs	r2, #1
     534:	fa02 f303 	lsl.w	r3, r2, r3
     538:	600b      	str	r3, [r1, #0]
     53a:	e017      	b.n	56c <am_devices_led_on+0xd4>
    else
    {
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
     53c:	683b      	ldr	r3, [r7, #0]
     53e:	00db      	lsls	r3, r3, #3
     540:	687a      	ldr	r2, [r7, #4]
     542:	4413      	add	r3, r2
     544:	681b      	ldr	r3, [r3, #0]
     546:	08db      	lsrs	r3, r3, #3
     548:	f003 0204 	and.w	r2, r3, #4
     54c:	4b0c      	ldr	r3, [pc, #48]	; (580 <am_devices_led_on+0xe8>)
     54e:	4413      	add	r3, r2
     550:	4619      	mov	r1, r3
     552:	683b      	ldr	r3, [r7, #0]
     554:	00db      	lsls	r3, r3, #3
     556:	687a      	ldr	r2, [r7, #4]
     558:	4413      	add	r3, r2
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f003 031f 	and.w	r3, r3, #31
     560:	2201      	movs	r2, #1
     562:	fa02 f303 	lsl.w	r3, r2, r3
     566:	600b      	str	r3, [r1, #0]
     568:	e000      	b.n	56c <am_devices_led_on+0xd4>
        return;
     56a:	bf00      	nop
    }
#endif //AM_APOLLO3_GPIO
}
     56c:	370c      	adds	r7, #12
     56e:	46bd      	mov	sp, r7
     570:	f85d 7b04 	ldr.w	r7, [sp], #4
     574:	4770      	bx	lr
     576:	bf00      	nop
     578:	40010090 	.word	0x40010090
     57c:	40010098 	.word	0x40010098
     580:	400100a8 	.word	0x400100a8

00000584 <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     584:	b480      	push	{r7}
     586:	b083      	sub	sp, #12
     588:	af00      	add	r7, sp, #0
     58a:	6078      	str	r0, [r7, #4]
     58c:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
     58e:	687b      	ldr	r3, [r7, #4]
     590:	2b00      	cmp	r3, #0
     592:	d060      	beq.n	656 <am_devices_led_off+0xd2>
     594:	683b      	ldr	r3, [r7, #0]
     596:	2b1e      	cmp	r3, #30
     598:	d85d      	bhi.n	656 <am_devices_led_off+0xd2>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
     59a:	683b      	ldr	r3, [r7, #0]
     59c:	00db      	lsls	r3, r3, #3
     59e:	687a      	ldr	r2, [r7, #4]
     5a0:	4413      	add	r3, r2
     5a2:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
     5a4:	2b31      	cmp	r3, #49	; 0x31
     5a6:	d856      	bhi.n	656 <am_devices_led_off+0xd2>
    }
#else
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     5a8:	683b      	ldr	r3, [r7, #0]
     5aa:	00db      	lsls	r3, r3, #3
     5ac:	687a      	ldr	r2, [r7, #4]
     5ae:	4413      	add	r3, r2
     5b0:	685b      	ldr	r3, [r3, #4]
     5b2:	f003 0302 	and.w	r3, r3, #2
     5b6:	2b00      	cmp	r3, #0
     5b8:	d036      	beq.n	628 <am_devices_led_off+0xa4>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     5ba:	683b      	ldr	r3, [r7, #0]
     5bc:	00db      	lsls	r3, r3, #3
     5be:	687a      	ldr	r2, [r7, #4]
     5c0:	4413      	add	r3, r2
     5c2:	685b      	ldr	r3, [r3, #4]
     5c4:	f003 0301 	and.w	r3, r3, #1
     5c8:	2b00      	cmp	r3, #0
     5ca:	d116      	bne.n	5fa <am_devices_led_off+0x76>
     5cc:	683b      	ldr	r3, [r7, #0]
     5ce:	00db      	lsls	r3, r3, #3
     5d0:	687a      	ldr	r2, [r7, #4]
     5d2:	4413      	add	r3, r2
     5d4:	681b      	ldr	r3, [r3, #0]
     5d6:	08db      	lsrs	r3, r3, #3
     5d8:	f003 0204 	and.w	r2, r3, #4
     5dc:	4b21      	ldr	r3, [pc, #132]	; (664 <am_devices_led_off+0xe0>)
     5de:	4413      	add	r3, r2
     5e0:	4619      	mov	r1, r3
     5e2:	683b      	ldr	r3, [r7, #0]
     5e4:	00db      	lsls	r3, r3, #3
     5e6:	687a      	ldr	r2, [r7, #4]
     5e8:	4413      	add	r3, r2
     5ea:	681b      	ldr	r3, [r3, #0]
     5ec:	f003 031f 	and.w	r3, r3, #31
     5f0:	2201      	movs	r2, #1
     5f2:	fa02 f303 	lsl.w	r3, r2, r3
     5f6:	600b      	str	r3, [r1, #0]
     5f8:	e02e      	b.n	658 <am_devices_led_off+0xd4>
     5fa:	683b      	ldr	r3, [r7, #0]
     5fc:	00db      	lsls	r3, r3, #3
     5fe:	687a      	ldr	r2, [r7, #4]
     600:	4413      	add	r3, r2
     602:	681b      	ldr	r3, [r3, #0]
     604:	08db      	lsrs	r3, r3, #3
     606:	f003 0204 	and.w	r2, r3, #4
     60a:	4b17      	ldr	r3, [pc, #92]	; (668 <am_devices_led_off+0xe4>)
     60c:	4413      	add	r3, r2
     60e:	4619      	mov	r1, r3
     610:	683b      	ldr	r3, [r7, #0]
     612:	00db      	lsls	r3, r3, #3
     614:	687a      	ldr	r2, [r7, #4]
     616:	4413      	add	r3, r2
     618:	681b      	ldr	r3, [r3, #0]
     61a:	f003 031f 	and.w	r3, r3, #31
     61e:	2201      	movs	r2, #1
     620:	fa02 f303 	lsl.w	r3, r2, r3
     624:	600b      	str	r3, [r1, #0]
     626:	e017      	b.n	658 <am_devices_led_off+0xd4>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
     628:	683b      	ldr	r3, [r7, #0]
     62a:	00db      	lsls	r3, r3, #3
     62c:	687a      	ldr	r2, [r7, #4]
     62e:	4413      	add	r3, r2
     630:	681b      	ldr	r3, [r3, #0]
     632:	08db      	lsrs	r3, r3, #3
     634:	f003 0204 	and.w	r2, r3, #4
     638:	4b0c      	ldr	r3, [pc, #48]	; (66c <am_devices_led_off+0xe8>)
     63a:	4413      	add	r3, r2
     63c:	4619      	mov	r1, r3
     63e:	683b      	ldr	r3, [r7, #0]
     640:	00db      	lsls	r3, r3, #3
     642:	687a      	ldr	r2, [r7, #4]
     644:	4413      	add	r3, r2
     646:	681b      	ldr	r3, [r3, #0]
     648:	f003 031f 	and.w	r3, r3, #31
     64c:	2201      	movs	r2, #1
     64e:	fa02 f303 	lsl.w	r3, r2, r3
     652:	600b      	str	r3, [r1, #0]
     654:	e000      	b.n	658 <am_devices_led_off+0xd4>
        return;
     656:	bf00      	nop
    }
#endif
}
     658:	370c      	adds	r7, #12
     65a:	46bd      	mov	sp, r7
     65c:	f85d 7b04 	ldr.w	r7, [sp], #4
     660:	4770      	bx	lr
     662:	bf00      	nop
     664:	40010090 	.word	0x40010090
     668:	40010098 	.word	0x40010098
     66c:	400100b4 	.word	0x400100b4

00000670 <am_devices_led_array_out>:
//
//*****************************************************************************
void
am_devices_led_array_out(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs,
                         uint32_t ui32Value)
{
     670:	b580      	push	{r7, lr}
     672:	b086      	sub	sp, #24
     674:	af00      	add	r7, sp, #0
     676:	60f8      	str	r0, [r7, #12]
     678:	60b9      	str	r1, [r7, #8]
     67a:	607a      	str	r2, [r7, #4]
    uint32_t i;

    for ( i = 0; i < ui32NumLEDs; i++ )
     67c:	2300      	movs	r3, #0
     67e:	617b      	str	r3, [r7, #20]
     680:	e014      	b.n	6ac <am_devices_led_array_out+0x3c>
    {
        if ( ui32Value & (1 << i) )
     682:	2201      	movs	r2, #1
     684:	697b      	ldr	r3, [r7, #20]
     686:	fa02 f303 	lsl.w	r3, r2, r3
     68a:	461a      	mov	r2, r3
     68c:	687b      	ldr	r3, [r7, #4]
     68e:	4013      	ands	r3, r2
     690:	2b00      	cmp	r3, #0
     692:	d004      	beq.n	69e <am_devices_led_array_out+0x2e>
        {
            am_devices_led_on(psLEDs, i);
     694:	6979      	ldr	r1, [r7, #20]
     696:	68f8      	ldr	r0, [r7, #12]
     698:	f7ff fefe 	bl	498 <am_devices_led_on>
     69c:	e003      	b.n	6a6 <am_devices_led_array_out+0x36>
        }
        else
        {
            am_devices_led_off(psLEDs, i);
     69e:	6979      	ldr	r1, [r7, #20]
     6a0:	68f8      	ldr	r0, [r7, #12]
     6a2:	f7ff ff6f 	bl	584 <am_devices_led_off>
    for ( i = 0; i < ui32NumLEDs; i++ )
     6a6:	697b      	ldr	r3, [r7, #20]
     6a8:	3301      	adds	r3, #1
     6aa:	617b      	str	r3, [r7, #20]
     6ac:	697a      	ldr	r2, [r7, #20]
     6ae:	68bb      	ldr	r3, [r7, #8]
     6b0:	429a      	cmp	r2, r3
     6b2:	d3e6      	bcc.n	682 <am_devices_led_array_out+0x12>
        }
    }
}
     6b4:	bf00      	nop
     6b6:	3718      	adds	r7, #24
     6b8:	46bd      	mov	sp, r7
     6ba:	bd80      	pop	{r7, pc}

000006bc <timerA0_init>:
// Function to initialize Timer A0 to interrupt every 1/4 second.
//
//*****************************************************************************
void
timerA0_init(void)
{
     6bc:	b580      	push	{r7, lr}
     6be:	b082      	sub	sp, #8
     6c0:	af00      	add	r7, sp, #0
    uint32_t ui32Period;

    //
    // Enable the LFRC.
    //
    am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_LFRC);
     6c2:	2002      	movs	r0, #2
     6c4:	f001 f948 	bl	1958 <am_hal_clkgen_osc_start>

    //
    // Set up timer A0.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
     6c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
     6cc:	2000      	movs	r0, #0
     6ce:	f001 f9e1 	bl	1a94 <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer0);
     6d2:	490a      	ldr	r1, [pc, #40]	; (6fc <timerA0_init+0x40>)
     6d4:	2000      	movs	r0, #0
     6d6:	f001 f953 	bl	1980 <am_hal_ctimer_config>

    //
    // Set up timerA0 to 32Hz from LFRC divided to 1 second period.
    //
    ui32Period = 8;
     6da:	2308      	movs	r3, #8
     6dc:	607b      	str	r3, [r7, #4]
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ui32Period,
     6de:	687b      	ldr	r3, [r7, #4]
     6e0:	085b      	lsrs	r3, r3, #1
     6e2:	687a      	ldr	r2, [r7, #4]
     6e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
     6e8:	2000      	movs	r0, #0
     6ea:	f001 f9e7 	bl	1abc <am_hal_ctimer_period_set>
                             (ui32Period >> 1));

    //
    // Clear the timer Interrupt
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
     6ee:	2001      	movs	r0, #1
     6f0:	f001 fa50 	bl	1b94 <am_hal_ctimer_int_clear>
}
     6f4:	bf00      	nop
     6f6:	3708      	adds	r7, #8
     6f8:	46bd      	mov	sp, r7
     6fa:	bd80      	pop	{r7, pc}
     6fc:	10001000 	.word	0x10001000

00000700 <am_ctimer_isr>:
// Timer Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
     700:	b580      	push	{r7, lr}
     702:	af00      	add	r7, sp, #0
    //
    // Increment count and set limit based on the number of LEDs available.
    //
    if (++g_ui32TimerCount >= (1 << AM_BSP_NUM_LEDS))
     704:	4b07      	ldr	r3, [pc, #28]	; (724 <am_ctimer_isr+0x24>)
     706:	681b      	ldr	r3, [r3, #0]
     708:	3301      	adds	r3, #1
     70a:	4a06      	ldr	r2, [pc, #24]	; (724 <am_ctimer_isr+0x24>)
     70c:	6013      	str	r3, [r2, #0]
     70e:	2b0f      	cmp	r3, #15
     710:	d902      	bls.n	718 <am_ctimer_isr+0x18>
    {
        //
        // Reset the global.
        //
        g_ui32TimerCount = 0;
     712:	4b04      	ldr	r3, [pc, #16]	; (724 <am_ctimer_isr+0x24>)
     714:	2200      	movs	r2, #0
     716:	601a      	str	r2, [r3, #0]
    }
    //
    // Clear TimerA0 Interrupt (write to clear).
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
     718:	2001      	movs	r0, #1
     71a:	f001 fa3b 	bl	1b94 <am_hal_ctimer_int_clear>

}
     71e:	bf00      	nop
     720:	bd80      	pop	{r7, pc}
     722:	bf00      	nop
     724:	1000102c 	.word	0x1000102c

00000728 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     728:	b580      	push	{r7, lr}
     72a:	b082      	sub	sp, #8
     72c:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     72e:	2000      	movs	r0, #0
     730:	f001 f8ea 	bl	1908 <am_hal_clkgen_sysclk_select>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);
     734:	4829      	ldr	r0, [pc, #164]	; (7dc <main+0xb4>)
     736:	f001 f851 	bl	17dc <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     73a:	f000 ffc7 	bl	16cc <am_bsp_low_power_init>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     73e:	4828      	ldr	r0, [pc, #160]	; (7e0 <main+0xb8>)
     740:	f000 f918 	bl	974 <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     744:	f001 fa5e 	bl	1c04 <am_hal_interrupt_master_disable>
     748:	4603      	mov	r3, r0
     74a:	607b      	str	r3, [r7, #4]
     74c:	4b25      	ldr	r3, [pc, #148]	; (7e4 <main+0xbc>)
     74e:	2273      	movs	r2, #115	; 0x73
     750:	601a      	str	r2, [r3, #0]
     752:	4a25      	ldr	r2, [pc, #148]	; (7e8 <main+0xc0>)
     754:	4b24      	ldr	r3, [pc, #144]	; (7e8 <main+0xc0>)
     756:	681b      	ldr	r3, [r3, #0]
     758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     75c:	6013      	str	r3, [r2, #0]
     75e:	4a23      	ldr	r2, [pc, #140]	; (7ec <main+0xc4>)
     760:	4b22      	ldr	r3, [pc, #136]	; (7ec <main+0xc4>)
     762:	681b      	ldr	r3, [r3, #0]
     764:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     768:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     76c:	6013      	str	r3, [r2, #0]
     76e:	4a20      	ldr	r2, [pc, #128]	; (7f0 <main+0xc8>)
     770:	4b1f      	ldr	r3, [pc, #124]	; (7f0 <main+0xc8>)
     772:	681b      	ldr	r3, [r3, #0]
     774:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     778:	6013      	str	r3, [r2, #0]
     77a:	4b1a      	ldr	r3, [pc, #104]	; (7e4 <main+0xbc>)
     77c:	2200      	movs	r2, #0
     77e:	601a      	str	r2, [r3, #0]
     780:	687b      	ldr	r3, [r7, #4]
     782:	4618      	mov	r0, r3
     784:	f001 fa42 	bl	1c0c <am_hal_interrupt_master_set>
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
     788:	2104      	movs	r1, #4
     78a:	481a      	ldr	r0, [pc, #104]	; (7f4 <main+0xcc>)
     78c:	f7ff fe62 	bl	454 <am_devices_led_array_init>

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     790:	f001 fa40 	bl	1c14 <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     794:	f000 ffac 	bl	16f0 <am_bsp_debug_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
     798:	f000 ff8e 	bl	16b8 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Binary Counter Example\n");
     79c:	4816      	ldr	r0, [pc, #88]	; (7f8 <main+0xd0>)
     79e:	f000 ff6d 	bl	167c <am_util_stdio_printf>

    //
    // TimerA0 init.
    //
    timerA0_init();
     7a2:	f7ff ff8b 	bl	6bc <timerA0_init>

    //
    // Enable the timer Interrupt.
    //
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
     7a6:	2001      	movs	r0, #1
     7a8:	f001 f9e2 	bl	1b70 <am_hal_ctimer_int_enable>

    //
    // Enable the timer interrupt in the NVIC.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_CTIMER);
     7ac:	201d      	movs	r0, #29
     7ae:	f001 f9fd 	bl	1bac <am_hal_interrupt_enable>
    am_hal_interrupt_master_enable();
     7b2:	f001 fa23 	bl	1bfc <am_hal_interrupt_master_enable>

    //
    // Start timer A0
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
     7b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
     7ba:	2000      	movs	r0, #0
     7bc:	f001 f952 	bl	1a64 <am_hal_ctimer_start>

    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
     7c0:	f000 ffd6 	bl	1770 <am_bsp_debug_printf_disable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     7c4:	2001      	movs	r0, #1
     7c6:	f001 fc0f 	bl	1fe8 <am_hal_sysctrl_sleep>

        //
        // Set the LEDs.
        //
        am_devices_led_array_out(am_bsp_psLEDs, AM_BSP_NUM_LEDS,
     7ca:	4b0c      	ldr	r3, [pc, #48]	; (7fc <main+0xd4>)
     7cc:	681b      	ldr	r3, [r3, #0]
     7ce:	461a      	mov	r2, r3
     7d0:	2104      	movs	r1, #4
     7d2:	4808      	ldr	r0, [pc, #32]	; (7f4 <main+0xcc>)
     7d4:	f7ff ff4c 	bl	670 <am_devices_led_array_out>
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     7d8:	e7f4      	b.n	7c4 <main+0x9c>
     7da:	bf00      	nop
     7dc:	00002218 	.word	0x00002218
     7e0:	000017d9 	.word	0x000017d9
     7e4:	40010060 	.word	0x40010060
     7e8:	40010054 	.word	0x40010054
     7ec:	40010028 	.word	0x40010028
     7f0:	40010108 	.word	0x40010108
     7f4:	1000100c 	.word	0x1000100c
     7f8:	000021ec 	.word	0x000021ec
     7fc:	1000102c 	.word	0x1000102c

00000800 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     800:	4811      	ldr	r0, [pc, #68]	; (848 <zero_loop+0x12>)
     802:	4912      	ldr	r1, [pc, #72]	; (84c <zero_loop+0x16>)
     804:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     806:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     80a:	4811      	ldr	r0, [pc, #68]	; (850 <zero_loop+0x1a>)
     80c:	6801      	ldr	r1, [r0, #0]
     80e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     812:	6001      	str	r1, [r0, #0]
     814:	f3bf 8f4f 	dsb	sy
     818:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     81c:	480d      	ldr	r0, [pc, #52]	; (854 <zero_loop+0x1e>)
     81e:	490e      	ldr	r1, [pc, #56]	; (858 <zero_loop+0x22>)
     820:	4a0e      	ldr	r2, [pc, #56]	; (85c <zero_loop+0x26>)

00000822 <copy_loop>:
     822:	f850 3b04 	ldr.w	r3, [r0], #4
     826:	f841 3b04 	str.w	r3, [r1], #4
     82a:	4291      	cmp	r1, r2
     82c:	dbf9      	blt.n	822 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     82e:	480c      	ldr	r0, [pc, #48]	; (860 <zero_loop+0x2a>)
     830:	490c      	ldr	r1, [pc, #48]	; (864 <zero_loop+0x2e>)
     832:	f04f 0200 	mov.w	r2, #0

00000836 <zero_loop>:
     836:	4288      	cmp	r0, r1
     838:	bfb8      	it	lt
     83a:	f840 2b04 	strlt.w	r2, [r0], #4
     83e:	dbfa      	blt.n	836 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     840:	f7ff ff72 	bl	728 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     844:	be00      	bkpt	0x0000
}
     846:	bf00      	nop
     848:	e000ed08 	.word	0xe000ed08
     84c:	00000000 	.word	0x00000000
     850:	e000ed88 	.word	0xe000ed88
     854:	00002274 	.word	0x00002274
     858:	10001000 	.word	0x10001000
     85c:	1000102c 	.word	0x1000102c
     860:	1000102c 	.word	0x1000102c
     864:	10001148 	.word	0x10001148

00000868 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     868:	b480      	push	{r7}
     86a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     86c:	e7fe      	b.n	86c <am_nmi_isr+0x4>

0000086e <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     86e:	b480      	push	{r7}
     870:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     872:	e7fe      	b.n	872 <am_adc_isr+0x4>

00000874 <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     874:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     876:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     878:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     87a:	f000 f809 	bl	890 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     87e:	bd01      	pop	{r0, pc}
}
     880:	bf00      	nop
     882:	4618      	mov	r0, r3

00000884 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     884:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     886:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     888:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     88a:	4770      	bx	lr
}
     88c:	bf00      	nop
     88e:	4618      	mov	r0, r3

00000890 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     890:	b580      	push	{r7, lr}
     892:	b096      	sub	sp, #88	; 0x58
     894:	af00      	add	r7, sp, #0
     896:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     898:	f107 030c 	add.w	r3, r7, #12
     89c:	2200      	movs	r2, #0
     89e:	601a      	str	r2, [r3, #0]
     8a0:	605a      	str	r2, [r3, #4]
     8a2:	609a      	str	r2, [r3, #8]
     8a4:	60da      	str	r2, [r3, #12]
     8a6:	611a      	str	r2, [r3, #16]
     8a8:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
     8aa:	2300      	movs	r3, #0
     8ac:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     8ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     8b0:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     8b2:	4b2e      	ldr	r3, [pc, #184]	; (96c <am_util_faultisr_collect_data+0xdc>)
     8b4:	681b      	ldr	r3, [r3, #0]
     8b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     8b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     8ba:	b2db      	uxtb	r3, r3
     8bc:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     8c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     8c2:	0a1b      	lsrs	r3, r3, #8
     8c4:	b2db      	uxtb	r3, r3
     8c6:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     8ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     8cc:	0c1b      	lsrs	r3, r3, #16
     8ce:	b29b      	uxth	r3, r3
     8d0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     8d4:	4b26      	ldr	r3, [pc, #152]	; (970 <am_util_faultisr_collect_data+0xe0>)
     8d6:	681b      	ldr	r3, [r3, #0]
     8d8:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     8da:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     8de:	b2db      	uxtb	r3, r3
     8e0:	f003 0302 	and.w	r3, r3, #2
     8e4:	2b00      	cmp	r3, #0
     8e6:	d005      	beq.n	8f4 <am_util_faultisr_collect_data+0x64>
     8e8:	6879      	ldr	r1, [r7, #4]
     8ea:	2006      	movs	r0, #6
     8ec:	f7ff ffca 	bl	884 <getStackedReg>
     8f0:	4603      	mov	r3, r0
     8f2:	e001      	b.n	8f8 <am_util_faultisr_collect_data+0x68>
     8f4:	f04f 33ff 	mov.w	r3, #4294967295
     8f8:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     8fa:	6879      	ldr	r1, [r7, #4]
     8fc:	2000      	movs	r0, #0
     8fe:	f7ff ffc1 	bl	884 <getStackedReg>
     902:	4603      	mov	r3, r0
     904:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     906:	6879      	ldr	r1, [r7, #4]
     908:	2001      	movs	r0, #1
     90a:	f7ff ffbb 	bl	884 <getStackedReg>
     90e:	4603      	mov	r3, r0
     910:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     912:	6879      	ldr	r1, [r7, #4]
     914:	2002      	movs	r0, #2
     916:	f7ff ffb5 	bl	884 <getStackedReg>
     91a:	4603      	mov	r3, r0
     91c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     91e:	6879      	ldr	r1, [r7, #4]
     920:	2003      	movs	r0, #3
     922:	f7ff ffaf 	bl	884 <getStackedReg>
     926:	4603      	mov	r3, r0
     928:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     92a:	6879      	ldr	r1, [r7, #4]
     92c:	2004      	movs	r0, #4
     92e:	f7ff ffa9 	bl	884 <getStackedReg>
     932:	4603      	mov	r3, r0
     934:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     936:	6879      	ldr	r1, [r7, #4]
     938:	2005      	movs	r0, #5
     93a:	f7ff ffa3 	bl	884 <getStackedReg>
     93e:	4603      	mov	r3, r0
     940:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     942:	6879      	ldr	r1, [r7, #4]
     944:	2006      	movs	r0, #6
     946:	f7ff ff9d 	bl	884 <getStackedReg>
     94a:	4603      	mov	r3, r0
     94c:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     94e:	6879      	ldr	r1, [r7, #4]
     950:	2007      	movs	r0, #7
     952:	f7ff ff97 	bl	884 <getStackedReg>
     956:	4603      	mov	r3, r0
     958:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     95a:	f107 030c 	add.w	r3, r7, #12
     95e:	4618      	mov	r0, r3
     960:	f001 f9a8 	bl	1cb4 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     964:	2300      	movs	r3, #0
     966:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
     968:	e7fe      	b.n	968 <am_util_faultisr_collect_data+0xd8>
     96a:	bf00      	nop
     96c:	e000ed28 	.word	0xe000ed28
     970:	e000ed38 	.word	0xe000ed38

00000974 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     974:	b480      	push	{r7}
     976:	b083      	sub	sp, #12
     978:	af00      	add	r7, sp, #0
     97a:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     97c:	4a04      	ldr	r2, [pc, #16]	; (990 <am_util_stdio_printf_init+0x1c>)
     97e:	687b      	ldr	r3, [r7, #4]
     980:	6013      	str	r3, [r2, #0]
}
     982:	bf00      	nop
     984:	370c      	adds	r7, #12
     986:	46bd      	mov	sp, r7
     988:	f85d 7b04 	ldr.w	r7, [sp], #4
     98c:	4770      	bx	lr
     98e:	bf00      	nop
     990:	10001144 	.word	0x10001144

00000994 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     994:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     998:	b096      	sub	sp, #88	; 0x58
     99a:	af00      	add	r7, sp, #0
     99c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     9a0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     9a4:	0025      	movs	r5, r4
     9a6:	2600      	movs	r6, #0
     9a8:	ea55 0306 	orrs.w	r3, r5, r6
     9ac:	f000 80a0 	beq.w	af0 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     9b0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     9b4:	0862      	lsrs	r2, r4, #1
     9b6:	ea4f 0133 	mov.w	r1, r3, rrx
     9ba:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     9be:	ea4f 0893 	mov.w	r8, r3, lsr #2
     9c2:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     9c6:	ea4f 0994 	mov.w	r9, r4, lsr #2
     9ca:	eb11 0308 	adds.w	r3, r1, r8
     9ce:	eb42 0409 	adc.w	r4, r2, r9
     9d2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     9d6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     9da:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     9de:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     9e2:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     9e6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     9ea:	eb13 030a 	adds.w	r3, r3, sl
     9ee:	eb44 040b 	adc.w	r4, r4, fp
     9f2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     9f6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     9fa:	0a1a      	lsrs	r2, r3, #8
     9fc:	62ba      	str	r2, [r7, #40]	; 0x28
     9fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
     a00:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     a04:	62ba      	str	r2, [r7, #40]	; 0x28
     a06:	0a23      	lsrs	r3, r4, #8
     a08:	62fb      	str	r3, [r7, #44]	; 0x2c
     a0a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a0e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     a12:	18c9      	adds	r1, r1, r3
     a14:	eb42 0204 	adc.w	r2, r2, r4
     a18:	460b      	mov	r3, r1
     a1a:	4614      	mov	r4, r2
     a1c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     a20:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a24:	0c1a      	lsrs	r2, r3, #16
     a26:	623a      	str	r2, [r7, #32]
     a28:	6a3a      	ldr	r2, [r7, #32]
     a2a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     a2e:	623a      	str	r2, [r7, #32]
     a30:	0c23      	lsrs	r3, r4, #16
     a32:	627b      	str	r3, [r7, #36]	; 0x24
     a34:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a38:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     a3c:	18c9      	adds	r1, r1, r3
     a3e:	eb42 0204 	adc.w	r2, r2, r4
     a42:	460b      	mov	r3, r1
     a44:	4614      	mov	r4, r2
     a46:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     a4a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a4e:	0023      	movs	r3, r4
     a50:	603b      	str	r3, [r7, #0]
     a52:	2300      	movs	r3, #0
     a54:	607b      	str	r3, [r7, #4]
     a56:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a5a:	e897 0006 	ldmia.w	r7, {r1, r2}
     a5e:	18c9      	adds	r1, r1, r3
     a60:	eb42 0204 	adc.w	r2, r2, r4
     a64:	460b      	mov	r3, r1
     a66:	4614      	mov	r4, r2
     a68:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     a6c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a70:	08da      	lsrs	r2, r3, #3
     a72:	613a      	str	r2, [r7, #16]
     a74:	693a      	ldr	r2, [r7, #16]
     a76:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     a7a:	613a      	str	r2, [r7, #16]
     a7c:	08e3      	lsrs	r3, r4, #3
     a7e:	617b      	str	r3, [r7, #20]
     a80:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     a84:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     a88:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
     a8c:	460b      	mov	r3, r1
     a8e:	4614      	mov	r4, r2
     a90:	00a0      	lsls	r0, r4, #2
     a92:	60f8      	str	r0, [r7, #12]
     a94:	68f8      	ldr	r0, [r7, #12]
     a96:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
     a9a:	60f8      	str	r0, [r7, #12]
     a9c:	009b      	lsls	r3, r3, #2
     a9e:	60bb      	str	r3, [r7, #8]
     aa0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     aa4:	185b      	adds	r3, r3, r1
     aa6:	eb44 0402 	adc.w	r4, r4, r2
     aaa:	18db      	adds	r3, r3, r3
     aac:	eb44 0404 	adc.w	r4, r4, r4
     ab0:	4619      	mov	r1, r3
     ab2:	4622      	mov	r2, r4
     ab4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     ab8:	1a5b      	subs	r3, r3, r1
     aba:	eb64 0402 	sbc.w	r4, r4, r2
     abe:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     ac2:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     ac6:	3306      	adds	r3, #6
     ac8:	f144 0400 	adc.w	r4, r4, #0
     acc:	091a      	lsrs	r2, r3, #4
     ace:	61ba      	str	r2, [r7, #24]
     ad0:	69ba      	ldr	r2, [r7, #24]
     ad2:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     ad6:	61ba      	str	r2, [r7, #24]
     ad8:	0923      	lsrs	r3, r4, #4
     ada:	61fb      	str	r3, [r7, #28]
     adc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     ae0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     ae4:	18c9      	adds	r1, r1, r3
     ae6:	eb42 0204 	adc.w	r2, r2, r4
     aea:	460b      	mov	r3, r1
     aec:	4614      	mov	r4, r2
     aee:	e029      	b.n	b44 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     af2:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     af6:	085a      	lsrs	r2, r3, #1
     af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     afa:	089b      	lsrs	r3, r3, #2
     afc:	4413      	add	r3, r2
     afe:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     b02:	091b      	lsrs	r3, r3, #4
     b04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     b06:	4413      	add	r3, r2
     b08:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     b0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     b0c:	0a1b      	lsrs	r3, r3, #8
     b0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     b10:	4413      	add	r3, r2
     b12:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     b16:	0c1b      	lsrs	r3, r3, #16
     b18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     b1a:	4413      	add	r3, r2
     b1c:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     b20:	08db      	lsrs	r3, r3, #3
     b22:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     b24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     b26:	4613      	mov	r3, r2
     b28:	009b      	lsls	r3, r3, #2
     b2a:	4413      	add	r3, r2
     b2c:	005b      	lsls	r3, r3, #1
     b2e:	461a      	mov	r2, r3
     b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     b32:	1a9b      	subs	r3, r3, r2
     b34:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b38:	3306      	adds	r3, #6
     b3a:	091a      	lsrs	r2, r3, #4
     b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     b3e:	4413      	add	r3, r2
     b40:	f04f 0400 	mov.w	r4, #0
    }
}
     b44:	4618      	mov	r0, r3
     b46:	4621      	mov	r1, r4
     b48:	3758      	adds	r7, #88	; 0x58
     b4a:	46bd      	mov	sp, r7
     b4c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     b50:	4770      	bx	lr

00000b52 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     b52:	b590      	push	{r4, r7, lr}
     b54:	b085      	sub	sp, #20
     b56:	af00      	add	r7, sp, #0
     b58:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     b5c:	683a      	ldr	r2, [r7, #0]
     b5e:	687b      	ldr	r3, [r7, #4]
     b60:	4313      	orrs	r3, r2
     b62:	2b00      	cmp	r3, #0
     b64:	bf0c      	ite	eq
     b66:	2301      	moveq	r3, #1
     b68:	2300      	movne	r3, #0
     b6a:	b2db      	uxtb	r3, r3
     b6c:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     b6e:	e008      	b.n	b82 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     b70:	e9d7 0100 	ldrd	r0, r1, [r7]
     b74:	f7ff ff0e 	bl	994 <divu64_10>
     b78:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     b7c:	68fb      	ldr	r3, [r7, #12]
     b7e:	3301      	adds	r3, #1
     b80:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
     b82:	e897 0018 	ldmia.w	r7, {r3, r4}
     b86:	4323      	orrs	r3, r4
     b88:	d1f2      	bne.n	b70 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
     b8a:	68fb      	ldr	r3, [r7, #12]
}
     b8c:	4618      	mov	r0, r3
     b8e:	3714      	adds	r7, #20
     b90:	46bd      	mov	sp, r7
     b92:	bd90      	pop	{r4, r7, pc}

00000b94 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     b94:	b590      	push	{r4, r7, lr}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     b9e:	e897 0018 	ldmia.w	r7, {r3, r4}
     ba2:	2b00      	cmp	r3, #0
     ba4:	f174 0300 	sbcs.w	r3, r4, #0
     ba8:	da06      	bge.n	bb8 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     baa:	e897 0018 	ldmia.w	r7, {r3, r4}
     bae:	425b      	negs	r3, r3
     bb0:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     bb4:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     bb8:	e897 0018 	ldmia.w	r7, {r3, r4}
     bbc:	4618      	mov	r0, r3
     bbe:	4621      	mov	r1, r4
     bc0:	f7ff ffc7 	bl	b52 <ndigits_in_u64>
     bc4:	4603      	mov	r3, r0
}
     bc6:	4618      	mov	r0, r3
     bc8:	370c      	adds	r7, #12
     bca:	46bd      	mov	sp, r7
     bcc:	bd90      	pop	{r4, r7, pc}

00000bce <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     bce:	b490      	push	{r4, r7}
     bd0:	b084      	sub	sp, #16
     bd2:	af00      	add	r7, sp, #0
     bd4:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     bd8:	6839      	ldr	r1, [r7, #0]
     bda:	687a      	ldr	r2, [r7, #4]
     bdc:	430a      	orrs	r2, r1
     bde:	2a00      	cmp	r2, #0
     be0:	bf0c      	ite	eq
     be2:	2201      	moveq	r2, #1
     be4:	2200      	movne	r2, #0
     be6:	b2d2      	uxtb	r2, r2
     be8:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     bea:	e00a      	b.n	c02 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     bec:	e897 0006 	ldmia.w	r7, {r1, r2}
     bf0:	090b      	lsrs	r3, r1, #4
     bf2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     bf6:	0914      	lsrs	r4, r2, #4
     bf8:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     bfc:	68fa      	ldr	r2, [r7, #12]
     bfe:	3201      	adds	r2, #1
     c00:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
     c02:	e897 0006 	ldmia.w	r7, {r1, r2}
     c06:	430a      	orrs	r2, r1
     c08:	d1f0      	bne.n	bec <ndigits_in_hex+0x1e>
    }

    return iDigits;
     c0a:	68fb      	ldr	r3, [r7, #12]
}
     c0c:	4618      	mov	r0, r3
     c0e:	3710      	adds	r7, #16
     c10:	46bd      	mov	sp, r7
     c12:	bc90      	pop	{r4, r7}
     c14:	4770      	bx	lr

00000c16 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     c16:	b480      	push	{r7}
     c18:	b087      	sub	sp, #28
     c1a:	af00      	add	r7, sp, #0
     c1c:	6078      	str	r0, [r7, #4]
     c1e:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     c20:	2300      	movs	r3, #0
     c22:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     c24:	2300      	movs	r3, #0
     c26:	613b      	str	r3, [r7, #16]
     c28:	2300      	movs	r3, #0
     c2a:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     c2c:	687b      	ldr	r3, [r7, #4]
     c2e:	781b      	ldrb	r3, [r3, #0]
     c30:	2b2d      	cmp	r3, #45	; 0x2d
     c32:	d11b      	bne.n	c6c <decstr_to_int+0x56>
    {
        bNeg = true;
     c34:	2301      	movs	r3, #1
     c36:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     c38:	687b      	ldr	r3, [r7, #4]
     c3a:	3301      	adds	r3, #1
     c3c:	607b      	str	r3, [r7, #4]
        uCnt++;
     c3e:	68fb      	ldr	r3, [r7, #12]
     c40:	3301      	adds	r3, #1
     c42:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     c44:	e012      	b.n	c6c <decstr_to_int+0x56>
    {
        ++uCnt;
     c46:	68fb      	ldr	r3, [r7, #12]
     c48:	3301      	adds	r3, #1
     c4a:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     c4c:	693a      	ldr	r2, [r7, #16]
     c4e:	4613      	mov	r3, r2
     c50:	009b      	lsls	r3, r3, #2
     c52:	4413      	add	r3, r2
     c54:	005b      	lsls	r3, r3, #1
     c56:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     c58:	687b      	ldr	r3, [r7, #4]
     c5a:	781b      	ldrb	r3, [r3, #0]
     c5c:	461a      	mov	r2, r3
     c5e:	693b      	ldr	r3, [r7, #16]
     c60:	4413      	add	r3, r2
     c62:	3b30      	subs	r3, #48	; 0x30
     c64:	613b      	str	r3, [r7, #16]
        pcStr++;
     c66:	687b      	ldr	r3, [r7, #4]
     c68:	3301      	adds	r3, #1
     c6a:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     c6c:	687b      	ldr	r3, [r7, #4]
     c6e:	781b      	ldrb	r3, [r3, #0]
     c70:	2b2f      	cmp	r3, #47	; 0x2f
     c72:	d903      	bls.n	c7c <decstr_to_int+0x66>
     c74:	687b      	ldr	r3, [r7, #4]
     c76:	781b      	ldrb	r3, [r3, #0]
     c78:	2b39      	cmp	r3, #57	; 0x39
     c7a:	d9e4      	bls.n	c46 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
     c7c:	683b      	ldr	r3, [r7, #0]
     c7e:	2b00      	cmp	r3, #0
     c80:	d002      	beq.n	c88 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     c82:	683b      	ldr	r3, [r7, #0]
     c84:	68fa      	ldr	r2, [r7, #12]
     c86:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     c88:	7dfb      	ldrb	r3, [r7, #23]
     c8a:	2b00      	cmp	r3, #0
     c8c:	d002      	beq.n	c94 <decstr_to_int+0x7e>
     c8e:	693b      	ldr	r3, [r7, #16]
     c90:	425b      	negs	r3, r3
     c92:	e000      	b.n	c96 <decstr_to_int+0x80>
     c94:	693b      	ldr	r3, [r7, #16]
}
     c96:	4618      	mov	r0, r3
     c98:	371c      	adds	r7, #28
     c9a:	46bd      	mov	sp, r7
     c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
     ca0:	4770      	bx	lr

00000ca2 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     ca2:	b590      	push	{r4, r7, lr}
     ca4:	b091      	sub	sp, #68	; 0x44
     ca6:	af00      	add	r7, sp, #0
     ca8:	e9c7 0102 	strd	r0, r1, [r7, #8]
     cac:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     cae:	2300      	movs	r3, #0
     cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
     cb2:	2300      	movs	r3, #0
     cb4:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     cb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     cba:	f7ff fe6b 	bl	994 <divu64_10>
     cbe:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     cc2:	68b9      	ldr	r1, [r7, #8]
     cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     cc6:	4613      	mov	r3, r2
     cc8:	009b      	lsls	r3, r3, #2
     cca:	4413      	add	r3, r2
     ccc:	005b      	lsls	r3, r3, #1
     cce:	1acb      	subs	r3, r1, r3
     cd0:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     cd4:	1c5a      	adds	r2, r3, #1
     cd6:	63fa      	str	r2, [r7, #60]	; 0x3c
     cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     cda:	b2d2      	uxtb	r2, r2
     cdc:	3230      	adds	r2, #48	; 0x30
     cde:	b2d2      	uxtb	r2, r2
     ce0:	f107 0140 	add.w	r1, r7, #64	; 0x40
     ce4:	440b      	add	r3, r1
     ce6:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     cea:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     cee:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     cf2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     cf6:	4323      	orrs	r3, r4
     cf8:	d1dd      	bne.n	cb6 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     cfc:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     cfe:	687b      	ldr	r3, [r7, #4]
     d00:	2b00      	cmp	r3, #0
     d02:	d011      	beq.n	d28 <uint64_to_str+0x86>
    {
        while ( ix-- )
     d04:	e008      	b.n	d18 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     d06:	687b      	ldr	r3, [r7, #4]
     d08:	1c5a      	adds	r2, r3, #1
     d0a:	607a      	str	r2, [r7, #4]
     d0c:	f107 0110 	add.w	r1, r7, #16
     d10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     d12:	440a      	add	r2, r1
     d14:	7812      	ldrb	r2, [r2, #0]
     d16:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
     d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d1a:	1e5a      	subs	r2, r3, #1
     d1c:	63fa      	str	r2, [r7, #60]	; 0x3c
     d1e:	2b00      	cmp	r3, #0
     d20:	d1f1      	bne.n	d06 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	2200      	movs	r2, #0
     d26:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     d2a:	4618      	mov	r0, r3
     d2c:	3744      	adds	r7, #68	; 0x44
     d2e:	46bd      	mov	sp, r7
     d30:	bd90      	pop	{r4, r7, pc}

00000d32 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     d32:	b4b0      	push	{r4, r5, r7}
     d34:	b08d      	sub	sp, #52	; 0x34
     d36:	af00      	add	r7, sp, #0
     d38:	e9c7 0102 	strd	r0, r1, [r7, #8]
     d3c:	607a      	str	r2, [r7, #4]
     d3e:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     d40:	2300      	movs	r3, #0
     d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     d44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     d48:	4313      	orrs	r3, r2
     d4a:	d131      	bne.n	db0 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d4e:	1c5a      	adds	r2, r3, #1
     d50:	62fa      	str	r2, [r7, #44]	; 0x2c
     d52:	f107 0230 	add.w	r2, r7, #48	; 0x30
     d56:	4413      	add	r3, r2
     d58:	2230      	movs	r2, #48	; 0x30
     d5a:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     d5e:	e027      	b.n	db0 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     d60:	7a3b      	ldrb	r3, [r7, #8]
     d62:	f003 030f 	and.w	r3, r3, #15
     d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     d6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     d6e:	2b09      	cmp	r3, #9
     d70:	d90a      	bls.n	d88 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     d72:	78fb      	ldrb	r3, [r7, #3]
     d74:	2b00      	cmp	r3, #0
     d76:	d001      	beq.n	d7c <uint64_to_hexstr+0x4a>
     d78:	2227      	movs	r2, #39	; 0x27
     d7a:	e000      	b.n	d7e <uint64_to_hexstr+0x4c>
     d7c:	2207      	movs	r2, #7
     d7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     d82:	4413      	add	r3, r2
     d84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d8a:	1c5a      	adds	r2, r3, #1
     d8c:	62fa      	str	r2, [r7, #44]	; 0x2c
     d8e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     d92:	3230      	adds	r2, #48	; 0x30
     d94:	b2d2      	uxtb	r2, r2
     d96:	f107 0130 	add.w	r1, r7, #48	; 0x30
     d9a:	440b      	add	r3, r1
     d9c:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     da0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     da4:	0914      	lsrs	r4, r2, #4
     da6:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     daa:	091d      	lsrs	r5, r3, #4
     dac:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
     db0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     db4:	4313      	orrs	r3, r2
     db6:	d1d3      	bne.n	d60 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     dba:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     dbc:	687b      	ldr	r3, [r7, #4]
     dbe:	2b00      	cmp	r3, #0
     dc0:	d011      	beq.n	de6 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     dc2:	e008      	b.n	dd6 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     dc4:	687b      	ldr	r3, [r7, #4]
     dc6:	1c5a      	adds	r2, r3, #1
     dc8:	607a      	str	r2, [r7, #4]
     dca:	f107 0110 	add.w	r1, r7, #16
     dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     dd0:	440a      	add	r2, r1
     dd2:	7812      	ldrb	r2, [r2, #0]
     dd4:	701a      	strb	r2, [r3, #0]
        while (ix--)
     dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     dd8:	1e5a      	subs	r2, r3, #1
     dda:	62fa      	str	r2, [r7, #44]	; 0x2c
     ddc:	2b00      	cmp	r3, #0
     dde:	d1f1      	bne.n	dc4 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     de0:	687b      	ldr	r3, [r7, #4]
     de2:	2200      	movs	r2, #0
     de4:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     de8:	4618      	mov	r0, r3
     dea:	3734      	adds	r7, #52	; 0x34
     dec:	46bd      	mov	sp, r7
     dee:	bcb0      	pop	{r4, r5, r7}
     df0:	4770      	bx	lr

00000df2 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     df2:	b480      	push	{r7}
     df4:	b085      	sub	sp, #20
     df6:	af00      	add	r7, sp, #0
     df8:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     dfa:	2300      	movs	r3, #0
     dfc:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     dfe:	687b      	ldr	r3, [r7, #4]
     e00:	2b00      	cmp	r3, #0
     e02:	d104      	bne.n	e0e <simple_strlen+0x1c>
    {
        return ui32RetVal;
     e04:	68fb      	ldr	r3, [r7, #12]
     e06:	e009      	b.n	e1c <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     e08:	68fb      	ldr	r3, [r7, #12]
     e0a:	3301      	adds	r3, #1
     e0c:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
     e0e:	687b      	ldr	r3, [r7, #4]
     e10:	1c5a      	adds	r2, r3, #1
     e12:	607a      	str	r2, [r7, #4]
     e14:	781b      	ldrb	r3, [r3, #0]
     e16:	2b00      	cmp	r3, #0
     e18:	d1f6      	bne.n	e08 <simple_strlen+0x16>
    }
    return ui32RetVal;
     e1a:	68fb      	ldr	r3, [r7, #12]
}
     e1c:	4618      	mov	r0, r3
     e1e:	3714      	adds	r7, #20
     e20:	46bd      	mov	sp, r7
     e22:	f85d 7b04 	ldr.w	r7, [sp], #4
     e26:	4770      	bx	lr

00000e28 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     e28:	b480      	push	{r7}
     e2a:	b087      	sub	sp, #28
     e2c:	af00      	add	r7, sp, #0
     e2e:	60f8      	str	r0, [r7, #12]
     e30:	460b      	mov	r3, r1
     e32:	607a      	str	r2, [r7, #4]
     e34:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     e36:	2300      	movs	r3, #0
     e38:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     e3a:	687b      	ldr	r3, [r7, #4]
     e3c:	2b00      	cmp	r3, #0
     e3e:	dc0c      	bgt.n	e5a <padbuffer+0x32>
    {
        return i32Cnt;
     e40:	697b      	ldr	r3, [r7, #20]
     e42:	e010      	b.n	e66 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     e44:	68fb      	ldr	r3, [r7, #12]
     e46:	2b00      	cmp	r3, #0
     e48:	d004      	beq.n	e54 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     e4a:	68fb      	ldr	r3, [r7, #12]
     e4c:	1c5a      	adds	r2, r3, #1
     e4e:	60fa      	str	r2, [r7, #12]
     e50:	7afa      	ldrb	r2, [r7, #11]
     e52:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     e54:	697b      	ldr	r3, [r7, #20]
     e56:	3301      	adds	r3, #1
     e58:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
     e5a:	687b      	ldr	r3, [r7, #4]
     e5c:	1e5a      	subs	r2, r3, #1
     e5e:	607a      	str	r2, [r7, #4]
     e60:	2b00      	cmp	r3, #0
     e62:	d1ef      	bne.n	e44 <padbuffer+0x1c>
    }

    return i32Cnt;
     e64:	697b      	ldr	r3, [r7, #20]
}
     e66:	4618      	mov	r0, r3
     e68:	371c      	adds	r7, #28
     e6a:	46bd      	mov	sp, r7
     e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
     e70:	4770      	bx	lr
	...

00000e74 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     e74:	b590      	push	{r4, r7, lr}
     e76:	b08f      	sub	sp, #60	; 0x3c
     e78:	af00      	add	r7, sp, #0
     e7a:	60f8      	str	r0, [r7, #12]
     e7c:	60b9      	str	r1, [r7, #8]
     e7e:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
     e80:	68bb      	ldr	r3, [r7, #8]
     e82:	681b      	ldr	r3, [r3, #0]
     e84:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
     e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e88:	2b03      	cmp	r3, #3
     e8a:	dc02      	bgt.n	e92 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     e8c:	f06f 0302 	mvn.w	r3, #2
     e90:	e0e7      	b.n	1062 <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
     e92:	edd7 7a03 	vldr	s15, [r7, #12]
     e96:	eef5 7a40 	vcmp.f32	s15, #0.0
     e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e9e:	d104      	bne.n	eaa <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     ea0:	68bb      	ldr	r3, [r7, #8]
     ea2:	4a72      	ldr	r2, [pc, #456]	; (106c <ftoa+0x1f8>)
     ea4:	601a      	str	r2, [r3, #0]
        return 3;
     ea6:	2303      	movs	r3, #3
     ea8:	e0db      	b.n	1062 <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
     eaa:	68bb      	ldr	r3, [r7, #8]
     eac:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
     eae:	68fb      	ldr	r3, [r7, #12]
     eb0:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     eb2:	693b      	ldr	r3, [r7, #16]
     eb4:	15db      	asrs	r3, r3, #23
     eb6:	b2db      	uxtb	r3, r3
     eb8:	3b7f      	subs	r3, #127	; 0x7f
     eba:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     ebc:	693b      	ldr	r3, [r7, #16]
     ebe:	f3c3 0316 	ubfx	r3, r3, #0, #23
     ec2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     ec6:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
     ec8:	2300      	movs	r3, #0
     eca:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     ecc:	2300      	movs	r3, #0
     ece:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     ed0:	69fb      	ldr	r3, [r7, #28]
     ed2:	2b1e      	cmp	r3, #30
     ed4:	dd02      	ble.n	edc <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     ed6:	f06f 0301 	mvn.w	r3, #1
     eda:	e0c2      	b.n	1062 <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
     edc:	69fb      	ldr	r3, [r7, #28]
     ede:	f113 0f17 	cmn.w	r3, #23
     ee2:	da02      	bge.n	eea <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     ee4:	f04f 33ff 	mov.w	r3, #4294967295
     ee8:	e0bb      	b.n	1062 <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
     eea:	69fb      	ldr	r3, [r7, #28]
     eec:	2b16      	cmp	r3, #22
     eee:	dd06      	ble.n	efe <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
     ef0:	69fb      	ldr	r3, [r7, #28]
     ef2:	3b17      	subs	r3, #23
     ef4:	69ba      	ldr	r2, [r7, #24]
     ef6:	fa02 f303 	lsl.w	r3, r2, r3
     efa:	637b      	str	r3, [r7, #52]	; 0x34
     efc:	e01a      	b.n	f34 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     efe:	69fb      	ldr	r3, [r7, #28]
     f00:	2b00      	cmp	r3, #0
     f02:	db0f      	blt.n	f24 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
     f04:	69fb      	ldr	r3, [r7, #28]
     f06:	f1c3 0317 	rsb	r3, r3, #23
     f0a:	69ba      	ldr	r2, [r7, #24]
     f0c:	fa42 f303 	asr.w	r3, r2, r3
     f10:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
     f12:	69fb      	ldr	r3, [r7, #28]
     f14:	3301      	adds	r3, #1
     f16:	69ba      	ldr	r2, [r7, #24]
     f18:	fa02 f303 	lsl.w	r3, r2, r3
     f1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     f20:	633b      	str	r3, [r7, #48]	; 0x30
     f22:	e007      	b.n	f34 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
     f24:	69bb      	ldr	r3, [r7, #24]
     f26:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     f2a:	69fb      	ldr	r3, [r7, #28]
     f2c:	43db      	mvns	r3, r3
     f2e:	fa42 f303 	asr.w	r3, r2, r3
     f32:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     f34:	693b      	ldr	r3, [r7, #16]
     f36:	2b00      	cmp	r3, #0
     f38:	da04      	bge.n	f44 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     f3a:	68bb      	ldr	r3, [r7, #8]
     f3c:	1c5a      	adds	r2, r3, #1
     f3e:	60ba      	str	r2, [r7, #8]
     f40:	222d      	movs	r2, #45	; 0x2d
     f42:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f46:	2b00      	cmp	r3, #0
     f48:	d105      	bne.n	f56 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     f4a:	68bb      	ldr	r3, [r7, #8]
     f4c:	1c5a      	adds	r2, r3, #1
     f4e:	60ba      	str	r2, [r7, #8]
     f50:	2230      	movs	r2, #48	; 0x30
     f52:	701a      	strb	r2, [r3, #0]
     f54:	e021      	b.n	f9a <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f58:	2b00      	cmp	r3, #0
     f5a:	dd08      	ble.n	f6e <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f5e:	ea4f 74e3 	mov.w	r4, r3, asr #31
     f62:	68ba      	ldr	r2, [r7, #8]
     f64:	4618      	mov	r0, r3
     f66:	4621      	mov	r1, r4
     f68:	f7ff fe9b 	bl	ca2 <uint64_to_str>
     f6c:	e011      	b.n	f92 <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     f6e:	68bb      	ldr	r3, [r7, #8]
     f70:	1c5a      	adds	r2, r3, #1
     f72:	60ba      	str	r2, [r7, #8]
     f74:	222d      	movs	r2, #45	; 0x2d
     f76:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f7a:	425b      	negs	r3, r3
     f7c:	ea4f 74e3 	mov.w	r4, r3, asr #31
     f80:	68ba      	ldr	r2, [r7, #8]
     f82:	4618      	mov	r0, r3
     f84:	4621      	mov	r1, r4
     f86:	f7ff fe8c 	bl	ca2 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     f8a:	e002      	b.n	f92 <ftoa+0x11e>
        {
            pcBuf++;
     f8c:	68bb      	ldr	r3, [r7, #8]
     f8e:	3301      	adds	r3, #1
     f90:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
     f92:	68bb      	ldr	r3, [r7, #8]
     f94:	781b      	ldrb	r3, [r3, #0]
     f96:	2b00      	cmp	r3, #0
     f98:	d1f8      	bne.n	f8c <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     f9a:	68bb      	ldr	r3, [r7, #8]
     f9c:	1c5a      	adds	r2, r3, #1
     f9e:	60ba      	str	r2, [r7, #8]
     fa0:	222e      	movs	r2, #46	; 0x2e
     fa2:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     fa6:	2b00      	cmp	r3, #0
     fa8:	d105      	bne.n	fb6 <ftoa+0x142>
    {
        *pcBuf++ = '0';
     faa:	68bb      	ldr	r3, [r7, #8]
     fac:	1c5a      	adds	r2, r3, #1
     fae:	60ba      	str	r2, [r7, #8]
     fb0:	2230      	movs	r2, #48	; 0x30
     fb2:	701a      	strb	r2, [r3, #0]
     fb4:	e04f      	b.n	1056 <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     fb6:	68ba      	ldr	r2, [r7, #8]
     fb8:	6a3b      	ldr	r3, [r7, #32]
     fba:	1ad3      	subs	r3, r2, r3
     fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     fbe:	1ad3      	subs	r3, r2, r3
     fc0:	3b01      	subs	r3, #1
     fc2:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     fc4:	697a      	ldr	r2, [r7, #20]
     fc6:	687b      	ldr	r3, [r7, #4]
     fc8:	4293      	cmp	r3, r2
     fca:	bfa8      	it	ge
     fcc:	4613      	movge	r3, r2
     fce:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
     fd0:	2300      	movs	r3, #0
     fd2:	62bb      	str	r3, [r7, #40]	; 0x28
     fd4:	e015      	b.n	1002 <ftoa+0x18e>
        {
            i32FracPart *= 10;
     fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     fd8:	4613      	mov	r3, r2
     fda:	009b      	lsls	r3, r3, #2
     fdc:	4413      	add	r3, r2
     fde:	005b      	lsls	r3, r3, #1
     fe0:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     fe2:	68bb      	ldr	r3, [r7, #8]
     fe4:	1c5a      	adds	r2, r3, #1
     fe6:	60ba      	str	r2, [r7, #8]
     fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     fea:	1612      	asrs	r2, r2, #24
     fec:	b2d2      	uxtb	r2, r2
     fee:	3230      	adds	r2, #48	; 0x30
     ff0:	b2d2      	uxtb	r2, r2
     ff2:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ff6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     ffa:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
     ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
     ffe:	3301      	adds	r3, #1
    1000:	62bb      	str	r3, [r7, #40]	; 0x28
    1002:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1004:	697b      	ldr	r3, [r7, #20]
    1006:	429a      	cmp	r2, r3
    1008:	dbe5      	blt.n	fd6 <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    100a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    100c:	4613      	mov	r3, r2
    100e:	009b      	lsls	r3, r3, #2
    1010:	4413      	add	r3, r2
    1012:	005b      	lsls	r3, r3, #1
    1014:	161b      	asrs	r3, r3, #24
    1016:	2b04      	cmp	r3, #4
    1018:	dd1d      	ble.n	1056 <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    101a:	68bb      	ldr	r3, [r7, #8]
    101c:	3b01      	subs	r3, #1
    101e:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    1020:	e015      	b.n	104e <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
    1022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1024:	781b      	ldrb	r3, [r3, #0]
    1026:	2b2e      	cmp	r3, #46	; 0x2e
    1028:	d00e      	beq.n	1048 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
    102a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    102c:	781b      	ldrb	r3, [r3, #0]
    102e:	2b39      	cmp	r3, #57	; 0x39
    1030:	d103      	bne.n	103a <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
    1032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1034:	2230      	movs	r2, #48	; 0x30
    1036:	701a      	strb	r2, [r3, #0]
    1038:	e006      	b.n	1048 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
    103a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    103c:	781b      	ldrb	r3, [r3, #0]
    103e:	3301      	adds	r3, #1
    1040:	b2da      	uxtb	r2, r3
    1042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1044:	701a      	strb	r2, [r3, #0]
                    break;
    1046:	e006      	b.n	1056 <ftoa+0x1e2>
                }
                pcBuftmp--;
    1048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    104a:	3b01      	subs	r3, #1
    104c:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    104e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1050:	6a3b      	ldr	r3, [r7, #32]
    1052:	429a      	cmp	r2, r3
    1054:	d2e5      	bcs.n	1022 <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    1056:	68bb      	ldr	r3, [r7, #8]
    1058:	2200      	movs	r2, #0
    105a:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    105c:	68ba      	ldr	r2, [r7, #8]
    105e:	6a3b      	ldr	r3, [r7, #32]
    1060:	1ad3      	subs	r3, r2, r3
} // ftoa()
    1062:	4618      	mov	r0, r3
    1064:	373c      	adds	r7, #60	; 0x3c
    1066:	46bd      	mov	sp, r7
    1068:	bd90      	pop	{r4, r7, pc}
    106a:	bf00      	nop
    106c:	00302e30 	.word	0x00302e30

00001070 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    1070:	b590      	push	{r4, r7, lr}
    1072:	b095      	sub	sp, #84	; 0x54
    1074:	af00      	add	r7, sp, #0
    1076:	60f8      	str	r0, [r7, #12]
    1078:	60b9      	str	r1, [r7, #8]
    107a:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    107c:	2300      	movs	r3, #0
    107e:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    1080:	2300      	movs	r3, #0
    1082:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    1084:	e2e3      	b.n	164e <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    1086:	2306      	movs	r3, #6
    1088:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    108a:	68bb      	ldr	r3, [r7, #8]
    108c:	781b      	ldrb	r3, [r3, #0]
    108e:	2b25      	cmp	r3, #37	; 0x25
    1090:	d01f      	beq.n	10d2 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    1092:	68fb      	ldr	r3, [r7, #12]
    1094:	2b00      	cmp	r3, #0
    1096:	d015      	beq.n	10c4 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    1098:	68bb      	ldr	r3, [r7, #8]
    109a:	781b      	ldrb	r3, [r3, #0]
    109c:	2b0a      	cmp	r3, #10
    109e:	d10b      	bne.n	10b8 <am_util_stdio_vsprintf+0x48>
    10a0:	4bb1      	ldr	r3, [pc, #708]	; (1368 <am_util_stdio_vsprintf+0x2f8>)
    10a2:	781b      	ldrb	r3, [r3, #0]
    10a4:	2b00      	cmp	r3, #0
    10a6:	d007      	beq.n	10b8 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    10a8:	68fb      	ldr	r3, [r7, #12]
    10aa:	1c5a      	adds	r2, r3, #1
    10ac:	60fa      	str	r2, [r7, #12]
    10ae:	220d      	movs	r2, #13
    10b0:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    10b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10b4:	3301      	adds	r3, #1
    10b6:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    10b8:	68fb      	ldr	r3, [r7, #12]
    10ba:	1c5a      	adds	r2, r3, #1
    10bc:	60fa      	str	r2, [r7, #12]
    10be:	68ba      	ldr	r2, [r7, #8]
    10c0:	7812      	ldrb	r2, [r2, #0]
    10c2:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    10c4:	68bb      	ldr	r3, [r7, #8]
    10c6:	3301      	adds	r3, #1
    10c8:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    10ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10cc:	3301      	adds	r3, #1
    10ce:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    10d0:	e2bd      	b.n	164e <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    10d2:	68bb      	ldr	r3, [r7, #8]
    10d4:	3301      	adds	r3, #1
    10d6:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    10d8:	2300      	movs	r3, #0
    10da:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    10de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    10e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    10e6:	2320      	movs	r3, #32
    10e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    10ec:	68bb      	ldr	r3, [r7, #8]
    10ee:	781b      	ldrb	r3, [r3, #0]
    10f0:	2b30      	cmp	r3, #48	; 0x30
    10f2:	d105      	bne.n	1100 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    10f4:	2330      	movs	r3, #48	; 0x30
    10f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    10fa:	68bb      	ldr	r3, [r7, #8]
    10fc:	3301      	adds	r3, #1
    10fe:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    1100:	f107 0310 	add.w	r3, r7, #16
    1104:	4619      	mov	r1, r3
    1106:	68b8      	ldr	r0, [r7, #8]
    1108:	f7ff fd85 	bl	c16 <decstr_to_int>
    110c:	4603      	mov	r3, r0
    110e:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    1110:	693b      	ldr	r3, [r7, #16]
    1112:	68ba      	ldr	r2, [r7, #8]
    1114:	4413      	add	r3, r2
    1116:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    1118:	68bb      	ldr	r3, [r7, #8]
    111a:	781b      	ldrb	r3, [r3, #0]
    111c:	2b73      	cmp	r3, #115	; 0x73
    111e:	d005      	beq.n	112c <am_util_stdio_vsprintf+0xbc>
    1120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1122:	2b00      	cmp	r3, #0
    1124:	da02      	bge.n	112c <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    1126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1128:	425b      	negs	r3, r3
    112a:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    112c:	68bb      	ldr	r3, [r7, #8]
    112e:	781b      	ldrb	r3, [r3, #0]
    1130:	2b2e      	cmp	r3, #46	; 0x2e
    1132:	d10e      	bne.n	1152 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    1134:	68bb      	ldr	r3, [r7, #8]
    1136:	3301      	adds	r3, #1
    1138:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    113a:	f107 0310 	add.w	r3, r7, #16
    113e:	4619      	mov	r1, r3
    1140:	68b8      	ldr	r0, [r7, #8]
    1142:	f7ff fd68 	bl	c16 <decstr_to_int>
    1146:	4603      	mov	r3, r0
    1148:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    114a:	693b      	ldr	r3, [r7, #16]
    114c:	68ba      	ldr	r2, [r7, #8]
    114e:	4413      	add	r3, r2
    1150:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    1152:	68bb      	ldr	r3, [r7, #8]
    1154:	781b      	ldrb	r3, [r3, #0]
    1156:	2b6c      	cmp	r3, #108	; 0x6c
    1158:	d10c      	bne.n	1174 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    115a:	68bb      	ldr	r3, [r7, #8]
    115c:	3301      	adds	r3, #1
    115e:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    1160:	68bb      	ldr	r3, [r7, #8]
    1162:	781b      	ldrb	r3, [r3, #0]
    1164:	2b6c      	cmp	r3, #108	; 0x6c
    1166:	d105      	bne.n	1174 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    1168:	68bb      	ldr	r3, [r7, #8]
    116a:	3301      	adds	r3, #1
    116c:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    116e:	2301      	movs	r3, #1
    1170:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    1174:	68bb      	ldr	r3, [r7, #8]
    1176:	781b      	ldrb	r3, [r3, #0]
    1178:	3b46      	subs	r3, #70	; 0x46
    117a:	2b32      	cmp	r3, #50	; 0x32
    117c:	f200 8254 	bhi.w	1628 <am_util_stdio_vsprintf+0x5b8>
    1180:	a201      	add	r2, pc, #4	; (adr r2, 1188 <am_util_stdio_vsprintf+0x118>)
    1182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1186:	bf00      	nop
    1188:	000015b3 	.word	0x000015b3
    118c:	00001629 	.word	0x00001629
    1190:	00001629 	.word	0x00001629
    1194:	00001629 	.word	0x00001629
    1198:	00001629 	.word	0x00001629
    119c:	00001629 	.word	0x00001629
    11a0:	00001629 	.word	0x00001629
    11a4:	00001629 	.word	0x00001629
    11a8:	00001629 	.word	0x00001629
    11ac:	00001629 	.word	0x00001629
    11b0:	00001629 	.word	0x00001629
    11b4:	00001629 	.word	0x00001629
    11b8:	00001629 	.word	0x00001629
    11bc:	00001629 	.word	0x00001629
    11c0:	00001629 	.word	0x00001629
    11c4:	00001629 	.word	0x00001629
    11c8:	00001629 	.word	0x00001629
    11cc:	00001629 	.word	0x00001629
    11d0:	0000134f 	.word	0x0000134f
    11d4:	00001629 	.word	0x00001629
    11d8:	00001629 	.word	0x00001629
    11dc:	00001629 	.word	0x00001629
    11e0:	00001629 	.word	0x00001629
    11e4:	00001629 	.word	0x00001629
    11e8:	00001629 	.word	0x00001629
    11ec:	00001629 	.word	0x00001629
    11f0:	00001629 	.word	0x00001629
    11f4:	00001629 	.word	0x00001629
    11f8:	00001629 	.word	0x00001629
    11fc:	00001255 	.word	0x00001255
    1200:	0000147b 	.word	0x0000147b
    1204:	00001629 	.word	0x00001629
    1208:	000015b3 	.word	0x000015b3
    120c:	00001629 	.word	0x00001629
    1210:	00001629 	.word	0x00001629
    1214:	0000147b 	.word	0x0000147b
    1218:	00001629 	.word	0x00001629
    121c:	00001629 	.word	0x00001629
    1220:	00001629 	.word	0x00001629
    1224:	00001629 	.word	0x00001629
    1228:	00001629 	.word	0x00001629
    122c:	00001629 	.word	0x00001629
    1230:	00001629 	.word	0x00001629
    1234:	00001629 	.word	0x00001629
    1238:	00001629 	.word	0x00001629
    123c:	0000127b 	.word	0x0000127b
    1240:	00001629 	.word	0x00001629
    1244:	000013e9 	.word	0x000013e9
    1248:	00001629 	.word	0x00001629
    124c:	00001629 	.word	0x00001629
    1250:	00001349 	.word	0x00001349
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    1254:	687b      	ldr	r3, [r7, #4]
    1256:	1d1a      	adds	r2, r3, #4
    1258:	607a      	str	r2, [r7, #4]
    125a:	681b      	ldr	r3, [r3, #0]
    125c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    1260:	68fb      	ldr	r3, [r7, #12]
    1262:	2b00      	cmp	r3, #0
    1264:	d005      	beq.n	1272 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    1266:	68fb      	ldr	r3, [r7, #12]
    1268:	1c5a      	adds	r2, r3, #1
    126a:	60fa      	str	r2, [r7, #12]
    126c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    1270:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    1272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1274:	3301      	adds	r3, #1
    1276:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1278:	e1e6      	b.n	1648 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    127a:	687b      	ldr	r3, [r7, #4]
    127c:	1d1a      	adds	r2, r3, #4
    127e:	607a      	str	r2, [r7, #4]
    1280:	681b      	ldr	r3, [r3, #0]
    1282:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    1284:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    1286:	f7ff fdb4 	bl	df2 <simple_strlen>
    128a:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    128c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    128e:	2b00      	cmp	r3, #0
    1290:	dd2e      	ble.n	12f0 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    1292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1296:	429a      	cmp	r2, r3
    1298:	d22a      	bcs.n	12f0 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    129a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    129e:	1ad3      	subs	r3, r2, r3
    12a0:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    12a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    12a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
    12a8:	4619      	mov	r1, r3
    12aa:	68f8      	ldr	r0, [r7, #12]
    12ac:	f7ff fdbc 	bl	e28 <padbuffer>
    12b0:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    12b2:	68fb      	ldr	r3, [r7, #12]
    12b4:	2b00      	cmp	r3, #0
    12b6:	d001      	beq.n	12bc <am_util_stdio_vsprintf+0x24c>
    12b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12ba:	e000      	b.n	12be <am_util_stdio_vsprintf+0x24e>
    12bc:	2300      	movs	r3, #0
    12be:	68fa      	ldr	r2, [r7, #12]
    12c0:	4413      	add	r3, r2
    12c2:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    12c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    12c8:	4413      	add	r3, r2
    12ca:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    12cc:	2300      	movs	r3, #0
    12ce:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    12d0:	e00e      	b.n	12f0 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    12d2:	68fb      	ldr	r3, [r7, #12]
    12d4:	2b00      	cmp	r3, #0
    12d6:	d005      	beq.n	12e4 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    12d8:	68fb      	ldr	r3, [r7, #12]
    12da:	1c5a      	adds	r2, r3, #1
    12dc:	60fa      	str	r2, [r7, #12]
    12de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    12e0:	7812      	ldrb	r2, [r2, #0]
    12e2:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    12e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    12e6:	3301      	adds	r3, #1
    12e8:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    12ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    12ec:	3301      	adds	r3, #1
    12ee:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    12f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    12f2:	781b      	ldrb	r3, [r3, #0]
    12f4:	2b00      	cmp	r3, #0
    12f6:	d1ec      	bne.n	12d2 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    12f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12fa:	2b00      	cmp	r3, #0
    12fc:	f000 81a1 	beq.w	1642 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    1300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1302:	425b      	negs	r3, r3
    1304:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    1306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    130a:	429a      	cmp	r2, r3
    130c:	f080 8199 	bcs.w	1642 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1310:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1314:	1ad3      	subs	r3, r2, r3
    1316:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1318:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    131c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    131e:	4619      	mov	r1, r3
    1320:	68f8      	ldr	r0, [r7, #12]
    1322:	f7ff fd81 	bl	e28 <padbuffer>
    1326:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    1328:	68fb      	ldr	r3, [r7, #12]
    132a:	2b00      	cmp	r3, #0
    132c:	d001      	beq.n	1332 <am_util_stdio_vsprintf+0x2c2>
    132e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1330:	e000      	b.n	1334 <am_util_stdio_vsprintf+0x2c4>
    1332:	2300      	movs	r3, #0
    1334:	68fa      	ldr	r2, [r7, #12]
    1336:	4413      	add	r3, r2
    1338:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    133a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    133c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    133e:	4413      	add	r3, r2
    1340:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1342:	2300      	movs	r3, #0
    1344:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    1346:	e17c      	b.n	1642 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    1348:	2301      	movs	r3, #1
    134a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    134e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1352:	2b00      	cmp	r3, #0
    1354:	d00a      	beq.n	136c <am_util_stdio_vsprintf+0x2fc>
    1356:	687b      	ldr	r3, [r7, #4]
    1358:	3307      	adds	r3, #7
    135a:	f023 0307 	bic.w	r3, r3, #7
    135e:	f103 0208 	add.w	r2, r3, #8
    1362:	607a      	str	r2, [r7, #4]
    1364:	cb18      	ldmia	r3, {r3, r4}
    1366:	e007      	b.n	1378 <am_util_stdio_vsprintf+0x308>
    1368:	10001130 	.word	0x10001130
                                      va_arg(pArgs, uint32_t);
    136c:	687b      	ldr	r3, [r7, #4]
    136e:	1d1a      	adds	r2, r3, #4
    1370:	607a      	str	r2, [r7, #4]
    1372:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1374:	f04f 0400 	mov.w	r4, #0
    1378:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    137c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    137e:	2b00      	cmp	r3, #0
    1380:	d01e      	beq.n	13c0 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    1382:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1386:	f7ff fc22 	bl	bce <ndigits_in_hex>
    138a:	4602      	mov	r2, r0
    138c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    138e:	1a9b      	subs	r3, r3, r2
    1390:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1392:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1396:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1398:	4619      	mov	r1, r3
    139a:	68f8      	ldr	r0, [r7, #12]
    139c:	f7ff fd44 	bl	e28 <padbuffer>
    13a0:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    13a2:	68fb      	ldr	r3, [r7, #12]
    13a4:	2b00      	cmp	r3, #0
    13a6:	d001      	beq.n	13ac <am_util_stdio_vsprintf+0x33c>
    13a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13aa:	e000      	b.n	13ae <am_util_stdio_vsprintf+0x33e>
    13ac:	2300      	movs	r3, #0
    13ae:	68fa      	ldr	r2, [r7, #12]
    13b0:	4413      	add	r3, r2
    13b2:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    13b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    13b8:	4413      	add	r3, r2
    13ba:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    13bc:	2300      	movs	r3, #0
    13be:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    13c0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    13c4:	68fa      	ldr	r2, [r7, #12]
    13c6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    13ca:	f7ff fcb2 	bl	d32 <uint64_to_hexstr>
    13ce:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    13d0:	68fb      	ldr	r3, [r7, #12]
    13d2:	2b00      	cmp	r3, #0
    13d4:	d003      	beq.n	13de <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    13d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13d8:	68fa      	ldr	r2, [r7, #12]
    13da:	4413      	add	r3, r2
    13dc:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    13de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    13e2:	4413      	add	r3, r2
    13e4:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    13e6:	e12f      	b.n	1648 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    13e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    13ec:	2b00      	cmp	r3, #0
    13ee:	d008      	beq.n	1402 <am_util_stdio_vsprintf+0x392>
    13f0:	687b      	ldr	r3, [r7, #4]
    13f2:	3307      	adds	r3, #7
    13f4:	f023 0307 	bic.w	r3, r3, #7
    13f8:	f103 0208 	add.w	r2, r3, #8
    13fc:	607a      	str	r2, [r7, #4]
    13fe:	cb18      	ldmia	r3, {r3, r4}
    1400:	e005      	b.n	140e <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    1402:	687b      	ldr	r3, [r7, #4]
    1404:	1d1a      	adds	r2, r3, #4
    1406:	607a      	str	r2, [r7, #4]
    1408:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    140a:	f04f 0400 	mov.w	r4, #0
    140e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    1412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1414:	2b00      	cmp	r3, #0
    1416:	d01e      	beq.n	1456 <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    1418:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    141c:	f7ff fb99 	bl	b52 <ndigits_in_u64>
    1420:	4602      	mov	r2, r0
    1422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1424:	1a9b      	subs	r3, r3, r2
    1426:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1428:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    142c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    142e:	4619      	mov	r1, r3
    1430:	68f8      	ldr	r0, [r7, #12]
    1432:	f7ff fcf9 	bl	e28 <padbuffer>
    1436:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1438:	68fb      	ldr	r3, [r7, #12]
    143a:	2b00      	cmp	r3, #0
    143c:	d001      	beq.n	1442 <am_util_stdio_vsprintf+0x3d2>
    143e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1440:	e000      	b.n	1444 <am_util_stdio_vsprintf+0x3d4>
    1442:	2300      	movs	r3, #0
    1444:	68fa      	ldr	r2, [r7, #12]
    1446:	4413      	add	r3, r2
    1448:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    144a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    144c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    144e:	4413      	add	r3, r2
    1450:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1452:	2300      	movs	r3, #0
    1454:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1456:	68fa      	ldr	r2, [r7, #12]
    1458:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    145c:	f7ff fc21 	bl	ca2 <uint64_to_str>
    1460:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1462:	68fb      	ldr	r3, [r7, #12]
    1464:	2b00      	cmp	r3, #0
    1466:	d003      	beq.n	1470 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    1468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    146a:	68fa      	ldr	r2, [r7, #12]
    146c:	4413      	add	r3, r2
    146e:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1472:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1474:	4413      	add	r3, r2
    1476:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1478:	e0e6      	b.n	1648 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    147a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    147e:	2b00      	cmp	r3, #0
    1480:	d008      	beq.n	1494 <am_util_stdio_vsprintf+0x424>
    1482:	687b      	ldr	r3, [r7, #4]
    1484:	3307      	adds	r3, #7
    1486:	f023 0307 	bic.w	r3, r3, #7
    148a:	f103 0208 	add.w	r2, r3, #8
    148e:	607a      	str	r2, [r7, #4]
    1490:	cb18      	ldmia	r3, {r3, r4}
    1492:	e005      	b.n	14a0 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    1494:	687b      	ldr	r3, [r7, #4]
    1496:	1d1a      	adds	r2, r3, #4
    1498:	607a      	str	r2, [r7, #4]
    149a:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    149c:	ea4f 74e3 	mov.w	r4, r3, asr #31
    14a0:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    14a4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    14a8:	2b00      	cmp	r3, #0
    14aa:	f174 0300 	sbcs.w	r3, r4, #0
    14ae:	da0a      	bge.n	14c6 <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    14b0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    14b4:	425b      	negs	r3, r3
    14b6:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    14ba:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    14be:	2301      	movs	r3, #1
    14c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    14c4:	e006      	b.n	14d4 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    14c6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    14ca:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    14ce:	2300      	movs	r3, #0
    14d0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    14d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14d6:	2b00      	cmp	r3, #0
    14d8:	d04a      	beq.n	1570 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    14da:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    14de:	4618      	mov	r0, r3
    14e0:	4621      	mov	r1, r4
    14e2:	f7ff fb57 	bl	b94 <ndigits_in_i64>
    14e6:	4602      	mov	r2, r0
    14e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14ea:	1a9b      	subs	r3, r3, r2
    14ec:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    14ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    14f2:	2b00      	cmp	r3, #0
    14f4:	d011      	beq.n	151a <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    14f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14f8:	3b01      	subs	r3, #1
    14fa:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    14fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1500:	2b30      	cmp	r3, #48	; 0x30
    1502:	d10a      	bne.n	151a <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    1504:	68fb      	ldr	r3, [r7, #12]
    1506:	2b00      	cmp	r3, #0
    1508:	d004      	beq.n	1514 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    150a:	68fb      	ldr	r3, [r7, #12]
    150c:	1c5a      	adds	r2, r3, #1
    150e:	60fa      	str	r2, [r7, #12]
    1510:	222d      	movs	r2, #45	; 0x2d
    1512:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    1514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1516:	3301      	adds	r3, #1
    1518:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    151a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    151e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1520:	4619      	mov	r1, r3
    1522:	68f8      	ldr	r0, [r7, #12]
    1524:	f7ff fc80 	bl	e28 <padbuffer>
    1528:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    152a:	68fb      	ldr	r3, [r7, #12]
    152c:	2b00      	cmp	r3, #0
    152e:	d001      	beq.n	1534 <am_util_stdio_vsprintf+0x4c4>
    1530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1532:	e000      	b.n	1536 <am_util_stdio_vsprintf+0x4c6>
    1534:	2300      	movs	r3, #0
    1536:	68fa      	ldr	r2, [r7, #12]
    1538:	4413      	add	r3, r2
    153a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    153c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    153e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1540:	4413      	add	r3, r2
    1542:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1544:	2300      	movs	r3, #0
    1546:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    1548:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    154c:	2b00      	cmp	r3, #0
    154e:	d01e      	beq.n	158e <am_util_stdio_vsprintf+0x51e>
    1550:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1554:	2b20      	cmp	r3, #32
    1556:	d11a      	bne.n	158e <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    1558:	68fb      	ldr	r3, [r7, #12]
    155a:	2b00      	cmp	r3, #0
    155c:	d004      	beq.n	1568 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    155e:	68fb      	ldr	r3, [r7, #12]
    1560:	1c5a      	adds	r2, r3, #1
    1562:	60fa      	str	r2, [r7, #12]
    1564:	222d      	movs	r2, #45	; 0x2d
    1566:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    1568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    156a:	3301      	adds	r3, #1
    156c:	63fb      	str	r3, [r7, #60]	; 0x3c
    156e:	e00e      	b.n	158e <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    1570:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1574:	2b00      	cmp	r3, #0
    1576:	d00a      	beq.n	158e <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    1578:	68fb      	ldr	r3, [r7, #12]
    157a:	2b00      	cmp	r3, #0
    157c:	d004      	beq.n	1588 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    157e:	68fb      	ldr	r3, [r7, #12]
    1580:	1c5a      	adds	r2, r3, #1
    1582:	60fa      	str	r2, [r7, #12]
    1584:	222d      	movs	r2, #45	; 0x2d
    1586:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    1588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    158a:	3301      	adds	r3, #1
    158c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    158e:	68fa      	ldr	r2, [r7, #12]
    1590:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1594:	f7ff fb85 	bl	ca2 <uint64_to_str>
    1598:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    159a:	68fb      	ldr	r3, [r7, #12]
    159c:	2b00      	cmp	r3, #0
    159e:	d003      	beq.n	15a8 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    15a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15a2:	68fa      	ldr	r2, [r7, #12]
    15a4:	4413      	add	r3, r2
    15a6:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    15a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    15ac:	4413      	add	r3, r2
    15ae:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    15b0:	e04a      	b.n	1648 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    15b2:	68fb      	ldr	r3, [r7, #12]
    15b4:	2b00      	cmp	r3, #0
    15b6:	d046      	beq.n	1646 <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    15b8:	687b      	ldr	r3, [r7, #4]
    15ba:	3307      	adds	r3, #7
    15bc:	f023 0307 	bic.w	r3, r3, #7
    15c0:	f103 0208 	add.w	r2, r3, #8
    15c4:	607a      	str	r2, [r7, #4]
    15c6:	cb18      	ldmia	r3, {r3, r4}
    15c8:	4618      	mov	r0, r3
    15ca:	4621      	mov	r1, r4
    15cc:	f7fe fd78 	bl	c0 <__aeabi_d2f>
    15d0:	4603      	mov	r3, r0
    15d2:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    15d4:	68fb      	ldr	r3, [r7, #12]
    15d6:	2214      	movs	r2, #20
    15d8:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    15da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    15dc:	68f9      	ldr	r1, [r7, #12]
    15de:	6978      	ldr	r0, [r7, #20]
    15e0:	f7ff fc48 	bl	e74 <ftoa>
    15e4:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    15e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15e8:	2b00      	cmp	r3, #0
    15ea:	da14      	bge.n	1616 <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    15ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15ee:	f1b3 3fff 	cmp.w	r3, #4294967295
    15f2:	d102      	bne.n	15fa <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    15f4:	4b1e      	ldr	r3, [pc, #120]	; (1670 <am_util_stdio_vsprintf+0x600>)
    15f6:	62bb      	str	r3, [r7, #40]	; 0x28
    15f8:	e008      	b.n	160c <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    15fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    15fc:	f113 0f02 	cmn.w	r3, #2
    1600:	d102      	bne.n	1608 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    1602:	4b1c      	ldr	r3, [pc, #112]	; (1674 <am_util_stdio_vsprintf+0x604>)
    1604:	62bb      	str	r3, [r7, #40]	; 0x28
    1606:	e001      	b.n	160c <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    1608:	4b1b      	ldr	r3, [pc, #108]	; (1678 <am_util_stdio_vsprintf+0x608>)
    160a:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    160c:	68fb      	ldr	r3, [r7, #12]
    160e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1610:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    1612:	2303      	movs	r3, #3
    1614:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    1616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1618:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    161a:	4413      	add	r3, r2
    161c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    161e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1620:	68fa      	ldr	r2, [r7, #12]
    1622:	4413      	add	r3, r2
    1624:	60fb      	str	r3, [r7, #12]
                }
                break;
    1626:	e00e      	b.n	1646 <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    1628:	68fb      	ldr	r3, [r7, #12]
    162a:	2b00      	cmp	r3, #0
    162c:	d005      	beq.n	163a <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    162e:	68fb      	ldr	r3, [r7, #12]
    1630:	1c5a      	adds	r2, r3, #1
    1632:	60fa      	str	r2, [r7, #12]
    1634:	68ba      	ldr	r2, [r7, #8]
    1636:	7812      	ldrb	r2, [r2, #0]
    1638:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    163a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    163c:	3301      	adds	r3, #1
    163e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1640:	e002      	b.n	1648 <am_util_stdio_vsprintf+0x5d8>
                break;
    1642:	bf00      	nop
    1644:	e000      	b.n	1648 <am_util_stdio_vsprintf+0x5d8>
                break;
    1646:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    1648:	68bb      	ldr	r3, [r7, #8]
    164a:	3301      	adds	r3, #1
    164c:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    164e:	68bb      	ldr	r3, [r7, #8]
    1650:	781b      	ldrb	r3, [r3, #0]
    1652:	2b00      	cmp	r3, #0
    1654:	f47f ad17 	bne.w	1086 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    1658:	68fb      	ldr	r3, [r7, #12]
    165a:	2b00      	cmp	r3, #0
    165c:	d002      	beq.n	1664 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    165e:	68fb      	ldr	r3, [r7, #12]
    1660:	2200      	movs	r2, #0
    1662:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    1664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1666:	4618      	mov	r0, r3
    1668:	3754      	adds	r7, #84	; 0x54
    166a:	46bd      	mov	sp, r7
    166c:	bd90      	pop	{r4, r7, pc}
    166e:	bf00      	nop
    1670:	00302e30 	.word	0x00302e30
    1674:	00232e23 	.word	0x00232e23
    1678:	003f2e3f 	.word	0x003f2e3f

0000167c <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    167c:	b40f      	push	{r0, r1, r2, r3}
    167e:	b580      	push	{r7, lr}
    1680:	b082      	sub	sp, #8
    1682:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    1684:	f107 0314 	add.w	r3, r7, #20
    1688:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    168a:	683a      	ldr	r2, [r7, #0]
    168c:	6939      	ldr	r1, [r7, #16]
    168e:	4808      	ldr	r0, [pc, #32]	; (16b0 <am_util_stdio_printf+0x34>)
    1690:	f7ff fcee 	bl	1070 <am_util_stdio_vsprintf>
    1694:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    1696:	4b07      	ldr	r3, [pc, #28]	; (16b4 <am_util_stdio_printf+0x38>)
    1698:	681b      	ldr	r3, [r3, #0]
    169a:	4805      	ldr	r0, [pc, #20]	; (16b0 <am_util_stdio_printf+0x34>)
    169c:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    169e:	687b      	ldr	r3, [r7, #4]
}
    16a0:	4618      	mov	r0, r3
    16a2:	3708      	adds	r7, #8
    16a4:	46bd      	mov	sp, r7
    16a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    16aa:	b004      	add	sp, #16
    16ac:	4770      	bx	lr
    16ae:	bf00      	nop
    16b0:	10001030 	.word	0x10001030
    16b4:	10001144 	.word	0x10001144

000016b8 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    16b8:	b580      	push	{r7, lr}
    16ba:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    16bc:	4802      	ldr	r0, [pc, #8]	; (16c8 <am_util_stdio_terminal_clear+0x10>)
    16be:	f7ff ffdd 	bl	167c <am_util_stdio_printf>
}
    16c2:	bf00      	nop
    16c4:	bd80      	pop	{r7, pc}
    16c6:	bf00      	nop
    16c8:	00002204 	.word	0x00002204

000016cc <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    16cc:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_pwrctrl_bucks_enable();
    16ce:	f000 fc1b 	bl	1f08 <am_hal_pwrctrl_bucks_enable>

    //
    // Initialize for low power in the power control block
    //
    am_hal_pwrctrl_low_power_init();
    16d2:	f000 fc63 	bl	1f9c <am_hal_pwrctrl_low_power_init>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    16d6:	f000 fd83 	bl	21e0 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    16da:	2001      	movs	r0, #1
    16dc:	f000 fc6e 	bl	1fbc <am_hal_rtc_osc_select>

    //
    // Stop the XTAL.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    16e0:	2001      	movs	r0, #1
    16e2:	f000 f943 	bl	196c <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
}
    16e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_rtc_osc_disable();
    16ea:	f000 bc75 	b.w	1fd8 <am_hal_rtc_osc_disable>
    16ee:	bf00      	nop

000016f0 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    16f0:	b530      	push	{r4, r5, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    16f2:	4b17      	ldr	r3, [pc, #92]	; (1750 <am_bsp_debug_printf_enable+0x60>)
    16f4:	681c      	ldr	r4, [r3, #0]
    16f6:	f014 0401 	ands.w	r4, r4, #1
{
    16fa:	b087      	sub	sp, #28
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    16fc:	d001      	beq.n	1702 <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    16fe:	b007      	add	sp, #28
    1700:	bd30      	pop	{r4, r5, pc}
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1702:	4a14      	ldr	r2, [pc, #80]	; (1754 <am_bsp_debug_printf_enable+0x64>)
    1704:	4914      	ldr	r1, [pc, #80]	; (1758 <am_bsp_debug_printf_enable+0x68>)
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    1706:	4d15      	ldr	r5, [pc, #84]	; (175c <am_bsp_debug_printf_enable+0x6c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1708:	6011      	str	r1, [r2, #0]
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    170a:	a806      	add	r0, sp, #24
    170c:	f840 5d14 	str.w	r5, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    1710:	f000 fd08 	bl	2124 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    1714:	f000 fa76 	bl	1c04 <am_hal_interrupt_master_disable>
    1718:	4a11      	ldr	r2, [pc, #68]	; (1760 <am_bsp_debug_printf_enable+0x70>)
    171a:	9000      	str	r0, [sp, #0]
    171c:	4d11      	ldr	r5, [pc, #68]	; (1764 <am_bsp_debug_printf_enable+0x74>)
    171e:	4912      	ldr	r1, [pc, #72]	; (1768 <am_bsp_debug_printf_enable+0x78>)
    1720:	2073      	movs	r0, #115	; 0x73
    1722:	6010      	str	r0, [r2, #0]
    1724:	682b      	ldr	r3, [r5, #0]
    1726:	4811      	ldr	r0, [pc, #68]	; (176c <am_bsp_debug_printf_enable+0x7c>)
    1728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    172c:	602b      	str	r3, [r5, #0]
    172e:	6805      	ldr	r5, [r0, #0]
    1730:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    1734:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    1738:	6003      	str	r3, [r0, #0]
    173a:	6808      	ldr	r0, [r1, #0]
    173c:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    1740:	600d      	str	r5, [r1, #0]
    1742:	6014      	str	r4, [r2, #0]
    1744:	9800      	ldr	r0, [sp, #0]
    1746:	f000 fa61 	bl	1c0c <am_hal_interrupt_master_set>
}
    174a:	b007      	add	sp, #28
    174c:	bd30      	pop	{r4, r5, pc}
    174e:	bf00      	nop
    1750:	10001134 	.word	0x10001134
    1754:	e0000e80 	.word	0xe0000e80
    1758:	00150511 	.word	0x00150511
    175c:	000f4240 	.word	0x000f4240
    1760:	40010060 	.word	0x40010060
    1764:	40010054 	.word	0x40010054
    1768:	40010108 	.word	0x40010108
    176c:	40010028 	.word	0x40010028

00001770 <am_bsp_debug_printf_disable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    1770:	b530      	push	{r4, r5, lr}
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    1772:	4b14      	ldr	r3, [pc, #80]	; (17c4 <am_bsp_debug_printf_disable+0x54>)
    1774:	681c      	ldr	r4, [r3, #0]
    1776:	f014 0401 	ands.w	r4, r4, #1
{
    177a:	b083      	sub	sp, #12
    if ( g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M )
    177c:	d120      	bne.n	17c0 <am_bsp_debug_printf_disable+0x50>
    }

    //
    // Disable the TPIU
    //
    am_hal_itm_not_busy();
    177e:	f000 fa75 	bl	1c6c <am_hal_itm_not_busy>
    am_hal_gpio_pin_config(AM_BSP_GPIO_ITM_SWO, AM_HAL_GPIO_OUTPUT);
    1782:	f000 fa3f 	bl	1c04 <am_hal_interrupt_master_disable>
    1786:	4a10      	ldr	r2, [pc, #64]	; (17c8 <am_bsp_debug_printf_disable+0x58>)
    1788:	9001      	str	r0, [sp, #4]
    178a:	4d10      	ldr	r5, [pc, #64]	; (17cc <am_bsp_debug_printf_disable+0x5c>)
    178c:	4910      	ldr	r1, [pc, #64]	; (17d0 <am_bsp_debug_printf_disable+0x60>)
    178e:	2073      	movs	r0, #115	; 0x73
    1790:	6010      	str	r0, [r2, #0]
    1792:	682b      	ldr	r3, [r5, #0]
    1794:	480f      	ldr	r0, [pc, #60]	; (17d4 <am_bsp_debug_printf_disable+0x64>)
    1796:	f023 0c70 	bic.w	ip, r3, #112	; 0x70
    179a:	f04c 0320 	orr.w	r3, ip, #32
    179e:	602b      	str	r3, [r5, #0]
    17a0:	6805      	ldr	r5, [r0, #0]
    17a2:	f425 4c7f 	bic.w	ip, r5, #65280	; 0xff00
    17a6:	f44c 53c0 	orr.w	r3, ip, #6144	; 0x1800
    17aa:	6003      	str	r3, [r0, #0]
    17ac:	6808      	ldr	r0, [r1, #0]
    17ae:	f420 457f 	bic.w	r5, r0, #65280	; 0xff00
    17b2:	600d      	str	r5, [r1, #0]
    17b4:	6014      	str	r4, [r2, #0]
    17b6:	9801      	ldr	r0, [sp, #4]
    17b8:	f000 fa28 	bl	1c0c <am_hal_interrupt_master_set>
    am_hal_tpiu_disable();
    17bc:	f000 fd0a 	bl	21d4 <am_hal_tpiu_disable>
}
    17c0:	b003      	add	sp, #12
    17c2:	bd30      	pop	{r4, r5, pc}
    17c4:	10001134 	.word	0x10001134
    17c8:	40010060 	.word	0x40010060
    17cc:	40010054 	.word	0x40010054
    17d0:	40010108 	.word	0x40010108
    17d4:	40010028 	.word	0x40010028

000017d8 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    17d8:	f000 ba52 	b.w	1c80 <am_hal_itm_print>

000017dc <am_hal_cachectrl_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_cachectrl_enable(const am_hal_cachectrl_config_t *psConfig)
{
    17dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17de:	4605      	mov	r5, r0
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );

    //
    // Make sure the cache is enabled in the power control block.
    //
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    17e0:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    17e4:	78ab      	ldrb	r3, [r5, #2]
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    17e6:	786c      	ldrb	r4, [r5, #1]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    17e8:	78ef      	ldrb	r7, [r5, #3]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    17ea:	792e      	ldrb	r6, [r5, #4]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    17ec:	79a9      	ldrb	r1, [r5, #6]
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    17ee:	009a      	lsls	r2, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    17f0:	0064      	lsls	r4, r4, #1
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC0( (psConfig->ui32EnableNCregions & 0x1) >> 0 )   |
    17f2:	f002 0204 	and.w	r2, r2, #4
                       AM_REG_CACHECTRL_CACHECFG_LRU( psConfig->ui32LRU )                                   |
    17f6:	f004 0402 	and.w	r4, r4, #2
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    17fa:	4314      	orrs	r4, r2
    17fc:	f047 0701 	orr.w	r7, r7, #1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    1800:	79ea      	ldrb	r2, [r5, #7]
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    1802:	01f6      	lsls	r6, r6, #7
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1804:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_SERIAL(psConfig->ui32SerialCacheMode)                      |
    1806:	b2f6      	uxtb	r6, r6
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    1808:	7a2f      	ldrb	r7, [r5, #8]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    180a:	0289      	lsls	r1, r1, #10
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    180c:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_CACHE_CLKGATE( psConfig->ui32EnableCacheClockGating )      |
    180e:	f401 6180 	and.w	r1, r1, #1024	; 0x400
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    1812:	7a6e      	ldrb	r6, [r5, #9]
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    1814:	02d2      	lsls	r2, r2, #11
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1816:	430c      	orrs	r4, r1
                       AM_REG_CACHECTRL_CACHECFG_CACHE_LS(psConfig->ui32EnableLightSleep )                  |
    1818:	f402 6200 	and.w	r2, r2, #2048	; 0x800
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    181c:	7aa9      	ldrb	r1, [r5, #10]
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    181e:	033f      	lsls	r7, r7, #12
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1820:	4314      	orrs	r4, r2
                       AM_REG_CACHECTRL_CACHECFG_DLY( psConfig->ui32Dly )                                   |
    1822:	b2bf      	uxth	r7, r7
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    1824:	0436      	lsls	r6, r6, #16
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    1826:	7aea      	ldrb	r2, [r5, #11]
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1828:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    182a:	0509      	lsls	r1, r1, #20
                       AM_REG_CACHECTRL_CACHECFG_SMDLY( psConfig->ui32SMDly )                               |
    182c:	f406 2770 	and.w	r7, r6, #983040	; 0xf0000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    1830:	0612      	lsls	r2, r2, #24
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1832:	433c      	orrs	r4, r7
                       AM_REG_CACHECTRL_CACHECFG_DATA_CLKGATE(psConfig->ui32EnableDataClockGating)          |
    1834:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    1838:	009b      	lsls	r3, r3, #2
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_MONITOR(psConfig->ui32EnableCacheMonitoring) );
    183a:	f002 7780 	and.w	r7, r2, #16777216	; 0x1000000
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    183e:	4334      	orrs	r4, r6
                       AM_REG_CACHECTRL_CACHECFG_ENABLE_NC1( (psConfig->ui32EnableNCregions & 0x2) >> 1 )   |
    1840:	f003 0108 	and.w	r1, r3, #8
    ui32ConfigValue = (AM_REG_CACHECTRL_CACHECFG_ENABLE( 1 )                                                |
    1844:	433c      	orrs	r4, r7
    1846:	430c      	orrs	r4, r1
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEMEN_CACHE);
    1848:	f000 fa58 	bl	1cfc <am_hal_pwrctrl_memory_enable>

    //
    // Set the initial cache settings.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    184c:	482c      	ldr	r0, [pc, #176]	; (1900 <am_hal_cachectrl_enable+0x124>)
    //
    // Wait for the cache ready signal.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    184e:	4b2d      	ldr	r3, [pc, #180]	; (1904 <am_hal_cachectrl_enable+0x128>)
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    1850:	6004      	str	r4, [r0, #0]
    1852:	2232      	movs	r2, #50	; 0x32
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    1854:	681e      	ldr	r6, [r3, #0]
    1856:	0777      	lsls	r7, r6, #29
    1858:	d41e      	bmi.n	1898 <am_hal_cachectrl_enable+0xbc>
    185a:	681f      	ldr	r7, [r3, #0]
    185c:	077e      	lsls	r6, r7, #29
    185e:	f102 32ff 	add.w	r2, r2, #4294967295
    1862:	d419      	bmi.n	1898 <am_hal_cachectrl_enable+0xbc>
    1864:	6819      	ldr	r1, [r3, #0]
    1866:	074f      	lsls	r7, r1, #29
    1868:	d416      	bmi.n	1898 <am_hal_cachectrl_enable+0xbc>
    186a:	6818      	ldr	r0, [r3, #0]
    186c:	0746      	lsls	r6, r0, #29
    186e:	d413      	bmi.n	1898 <am_hal_cachectrl_enable+0xbc>
    1870:	681e      	ldr	r6, [r3, #0]
    1872:	0770      	lsls	r0, r6, #29
    1874:	d410      	bmi.n	1898 <am_hal_cachectrl_enable+0xbc>
    1876:	681f      	ldr	r7, [r3, #0]
    1878:	0779      	lsls	r1, r7, #29
    187a:	d40d      	bmi.n	1898 <am_hal_cachectrl_enable+0xbc>
    187c:	6819      	ldr	r1, [r3, #0]
    187e:	074f      	lsls	r7, r1, #29
    1880:	d40a      	bmi.n	1898 <am_hal_cachectrl_enable+0xbc>
    1882:	6818      	ldr	r0, [r3, #0]
    1884:	0746      	lsls	r6, r0, #29
    1886:	d407      	bmi.n	1898 <am_hal_cachectrl_enable+0xbc>
    1888:	681e      	ldr	r6, [r3, #0]
    188a:	0770      	lsls	r0, r6, #29
    188c:	d404      	bmi.n	1898 <am_hal_cachectrl_enable+0xbc>
    188e:	681f      	ldr	r7, [r3, #0]
    1890:	0779      	lsls	r1, r7, #29
    1892:	d401      	bmi.n	1898 <am_hal_cachectrl_enable+0xbc>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    1894:	3a09      	subs	r2, #9
    1896:	d1dd      	bne.n	1854 <am_hal_cachectrl_enable+0x78>
    }

    //
    // Manually invalidate the cache (workaround for the issue described above.)
    //
    AM_BFW(CACHECTRL, CACHECTRL, INVALIDATE, 1);
    1898:	4b1a      	ldr	r3, [pc, #104]	; (1904 <am_hal_cachectrl_enable+0x128>)
    189a:	681a      	ldr	r2, [r3, #0]
    189c:	f042 0101 	orr.w	r1, r2, #1
    18a0:	6019      	str	r1, [r3, #0]
    18a2:	2232      	movs	r2, #50	; 0x32
    //
    // Wait for the cache ready signal again.
    //
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    {
        if (AM_BFM(CACHECTRL, CACHECTRL, CACHE_READY))
    18a4:	6818      	ldr	r0, [r3, #0]
    18a6:	0740      	lsls	r0, r0, #29
    18a8:	d41e      	bmi.n	18e8 <am_hal_cachectrl_enable+0x10c>
    18aa:	681e      	ldr	r6, [r3, #0]
    18ac:	0771      	lsls	r1, r6, #29
    18ae:	f102 32ff 	add.w	r2, r2, #4294967295
    18b2:	d419      	bmi.n	18e8 <am_hal_cachectrl_enable+0x10c>
    18b4:	681f      	ldr	r7, [r3, #0]
    18b6:	077f      	lsls	r7, r7, #29
    18b8:	d416      	bmi.n	18e8 <am_hal_cachectrl_enable+0x10c>
    18ba:	6819      	ldr	r1, [r3, #0]
    18bc:	074e      	lsls	r6, r1, #29
    18be:	d413      	bmi.n	18e8 <am_hal_cachectrl_enable+0x10c>
    18c0:	6818      	ldr	r0, [r3, #0]
    18c2:	0740      	lsls	r0, r0, #29
    18c4:	d410      	bmi.n	18e8 <am_hal_cachectrl_enable+0x10c>
    18c6:	681e      	ldr	r6, [r3, #0]
    18c8:	0771      	lsls	r1, r6, #29
    18ca:	d40d      	bmi.n	18e8 <am_hal_cachectrl_enable+0x10c>
    18cc:	681f      	ldr	r7, [r3, #0]
    18ce:	077f      	lsls	r7, r7, #29
    18d0:	d40a      	bmi.n	18e8 <am_hal_cachectrl_enable+0x10c>
    18d2:	6819      	ldr	r1, [r3, #0]
    18d4:	074e      	lsls	r6, r1, #29
    18d6:	d407      	bmi.n	18e8 <am_hal_cachectrl_enable+0x10c>
    18d8:	6818      	ldr	r0, [r3, #0]
    18da:	0740      	lsls	r0, r0, #29
    18dc:	d404      	bmi.n	18e8 <am_hal_cachectrl_enable+0x10c>
    18de:	681e      	ldr	r6, [r3, #0]
    18e0:	0771      	lsls	r1, r6, #29
    18e2:	d401      	bmi.n	18e8 <am_hal_cachectrl_enable+0x10c>
    for (ui32Timeout = 0; ui32Timeout < 50; ui32Timeout++)
    18e4:	3a09      	subs	r2, #9
    18e6:	d1dd      	bne.n	18a4 <am_hal_cachectrl_enable+0xc8>

    //
    // Now that the cache is running, and correctly marked invalid, we can OR in
    // the ICACHE and DCACHE settings.
    //
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    18e8:	796d      	ldrb	r5, [r5, #5]
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );

    //
    // Write the final configuration settings to the CACHECTRL register.
    //
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    18ea:	4f05      	ldr	r7, [pc, #20]	; (1900 <am_hal_cachectrl_enable+0x124>)
                        AM_REG_CACHECTRL_CACHECFG_DCACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x2) >> 1 ) );
    18ec:	022b      	lsls	r3, r5, #8
    18ee:	f403 7100 	and.w	r1, r3, #512	; 0x200
    ui32ConfigValue |= (AM_REG_CACHECTRL_CACHECFG_ICACHE_ENABLE( (psConfig->ui32FlashCachingEnables & 0x1) >> 0 )   |
    18f2:	f403 7280 	and.w	r2, r3, #256	; 0x100
    18f6:	4311      	orrs	r1, r2
    18f8:	430c      	orrs	r4, r1
    AM_REG(CACHECTRL, CACHECFG) = ui32ConfigValue;
    18fa:	603c      	str	r4, [r7, #0]
    18fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18fe:	bf00      	nop
    1900:	40018000 	.word	0x40018000
    1904:	40018008 	.word	0x40018008

00001908 <am_hal_clkgen_sysclk_select>:
//! @return None.
//
//*****************************************************************************
void
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    1908:	b510      	push	{r4, lr}
    am_hal_debug_assert_msg(ui32ClockSetting == AM_HAL_CLKGEN_SYSCLK_48MHZ,
    190a:	4604      	mov	r4, r0
    190c:	b120      	cbz	r0, 1918 <am_hal_clkgen_sysclk_select+0x10>
    190e:	4a06      	ldr	r2, [pc, #24]	; (1928 <am_hal_clkgen_sysclk_select+0x20>)
    1910:	4806      	ldr	r0, [pc, #24]	; (192c <am_hal_clkgen_sysclk_select+0x24>)
    1912:	2153      	movs	r1, #83	; 0x53
    1914:	f000 f944 	bl	1ba0 <am_hal_debug_error>
        "am_hal_clkgen_sysclk_select(): invalid clock setting.");

    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1918:	4b05      	ldr	r3, [pc, #20]	; (1930 <am_hal_clkgen_sysclk_select+0x28>)

    //
    // Set the HFRC divisor to the required operating value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    191a:	4906      	ldr	r1, [pc, #24]	; (1934 <am_hal_clkgen_sysclk_select+0x2c>)
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    191c:	2047      	movs	r0, #71	; 0x47

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    191e:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1920:	6018      	str	r0, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1922:	600c      	str	r4, [r1, #0]
    AM_REG(CLKGEN, CLKKEY) = 0;
    1924:	601a      	str	r2, [r3, #0]
    1926:	bd10      	pop	{r4, pc}
    1928:	00002224 	.word	0x00002224
    192c:	0000225c 	.word	0x0000225c
    1930:	40004014 	.word	0x40004014
    1934:	40004018 	.word	0x40004018

00001938 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    1938:	4b04      	ldr	r3, [pc, #16]	; (194c <am_hal_clkgen_sysclk_get+0x14>)

    switch ( ui32ClockSetting )
    {
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC:
            return 48000000;
    193a:	4905      	ldr	r1, [pc, #20]	; (1950 <am_hal_clkgen_sysclk_get+0x18>)
    ui32ClockSetting = AM_REG(CLKGEN, CCTRL) & AM_REG_CLKGEN_CCTRL_CORESEL_M;
    193c:	681a      	ldr	r2, [r3, #0]
            return 48000000;
    193e:	4805      	ldr	r0, [pc, #20]	; (1954 <am_hal_clkgen_sysclk_get+0x1c>)
    switch ( ui32ClockSetting )
    1940:	f012 0f01 	tst.w	r2, #1
        case AM_REG_CLKGEN_CCTRL_CORESEL_HFRC_DIV2:
            return 24000000;
        default:
            return 0xFFFFFFFF;
    }
}
    1944:	bf08      	it	eq
    1946:	4608      	moveq	r0, r1
    1948:	4770      	bx	lr
    194a:	bf00      	nop
    194c:	40004018 	.word	0x40004018
    1950:	02dc6c00 	.word	0x02dc6c00
    1954:	016e3600 	.word	0x016e3600

00001958 <am_hal_clkgen_osc_start>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_start(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1958:	0783      	lsls	r3, r0, #30
    195a:	d004      	beq.n	1966 <am_hal_clkgen_osc_start+0xe>
    {
        //
        // Start the oscillator(s).
        // Note that these bits are cleared in order to enable the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) &= ~ui32OscFlags;
    195c:	4a02      	ldr	r2, [pc, #8]	; (1968 <am_hal_clkgen_osc_start+0x10>)
    195e:	6813      	ldr	r3, [r2, #0]
    1960:	ea23 0000 	bic.w	r0, r3, r0
    1964:	6010      	str	r0, [r2, #0]
    1966:	4770      	bx	lr
    1968:	4000400c 	.word	0x4000400c

0000196c <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    196c:	0783      	lsls	r3, r0, #30
    196e:	d003      	beq.n	1978 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    1970:	4b02      	ldr	r3, [pc, #8]	; (197c <am_hal_clkgen_osc_stop+0x10>)
    1972:	681a      	ldr	r2, [r3, #0]
    1974:	4310      	orrs	r0, r2
    1976:	6018      	str	r0, [r3, #0]
    1978:	4770      	bx	lr
    197a:	bf00      	nop
    197c:	4000400c 	.word	0x4000400c

00001980 <am_hal_ctimer_config>:
//
//*****************************************************************************
void
am_hal_ctimer_config(uint32_t ui32TimerNumber,
                     am_hal_ctimer_config_t *psConfig)
{
    1980:	b530      	push	{r4, r5, lr}
    1982:	4604      	mov	r4, r0
                      (psConfig->ui32TimerBConfig << 16) );

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    1984:	6808      	ldr	r0, [r1, #0]
                      (psConfig->ui32TimerBConfig << 16) );
    1986:	688a      	ldr	r2, [r1, #8]
    ui32ConfigVal = ( (psConfig->ui32TimerAConfig)  |
    1988:	684b      	ldr	r3, [r1, #4]
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    198a:	2800      	cmp	r0, #0
    ui32ConfigVal = ( (psConfig->ui32TimerAConfig)  |
    198c:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    1990:	bf14      	ite	ne
    1992:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
    1996:	2500      	moveq	r5, #0
{
    1998:	b083      	sub	sp, #12
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    199a:	430d      	orrs	r5, r1

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    199c:	f000 f932 	bl	1c04 <am_hal_interrupt_master_disable>

    //
    // Find the correct register to write.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    19a0:	0124      	lsls	r4, r4, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    19a2:	4a2a      	ldr	r2, [pc, #168]	; (1a4c <am_hal_ctimer_config+0xcc>)
    AM_CRITICAL_BEGIN_ASM
    19a4:	9001      	str	r0, [sp, #4]
    ui32TimerASrc = AM_BFR(CTIMER, STCFG, CLKSEL);
    19a6:	482a      	ldr	r0, [pc, #168]	; (1a50 <am_hal_ctimer_config+0xd0>)

    //
    // Write our configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    19a8:	50a5      	str	r5, [r4, r2]
    ui32TimerASrc = AM_BFR(CTIMER, STCFG, CLKSEL);
    19aa:	6805      	ldr	r5, [r0, #0]
    19ac:	f005 0c0f 	and.w	ip, r5, #15
    if ( (ui32TimerASrc == AM_REG_CTIMER_STCFG_CLKSEL_HFRC_DIV16)   ||
    19b0:	f10c 33ff 	add.w	r3, ip, #4294967295
    19b4:	2b01      	cmp	r3, #1
    19b6:	d93f      	bls.n	1a38 <am_hal_ctimer_config+0xb8>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    19b8:	6811      	ldr	r1, [r2, #0]
    19ba:	f3c1 0e44 	ubfx	lr, r1, #1, #5
    19be:	f10e 34ff 	add.w	r4, lr, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    19c2:	f3c1 4244 	ubfx	r2, r1, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    19c6:	2c04      	cmp	r4, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    19c8:	f102 30ff 	add.w	r0, r2, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    19cc:	d934      	bls.n	1a38 <am_hal_ctimer_config+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    19ce:	2804      	cmp	r0, #4
    19d0:	d932      	bls.n	1a38 <am_hal_ctimer_config+0xb8>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    19d2:	4d20      	ldr	r5, [pc, #128]	; (1a54 <am_hal_ctimer_config+0xd4>)
    19d4:	682b      	ldr	r3, [r5, #0]
    19d6:	f3c3 0c44 	ubfx	ip, r3, #1, #5
    19da:	f10c 31ff 	add.w	r1, ip, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    19de:	f3c3 4e44 	ubfx	lr, r3, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    19e2:	2904      	cmp	r1, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    19e4:	f10e 34ff 	add.w	r4, lr, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    19e8:	d926      	bls.n	1a38 <am_hal_ctimer_config+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    19ea:	2c04      	cmp	r4, #4
    19ec:	d924      	bls.n	1a38 <am_hal_ctimer_config+0xb8>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    19ee:	4a1a      	ldr	r2, [pc, #104]	; (1a58 <am_hal_ctimer_config+0xd8>)
    19f0:	6810      	ldr	r0, [r2, #0]
    19f2:	f3c0 0544 	ubfx	r5, r0, #1, #5
    19f6:	1e69      	subs	r1, r5, #1
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    19f8:	f3c0 4344 	ubfx	r3, r0, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    19fc:	2904      	cmp	r1, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    19fe:	f103 34ff 	add.w	r4, r3, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1a02:	d919      	bls.n	1a38 <am_hal_ctimer_config+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    1a04:	2c04      	cmp	r4, #4
    1a06:	d917      	bls.n	1a38 <am_hal_ctimer_config+0xb8>
    ui32TimerASrc = AM_BFX(CTIMER, CTRL0, TMRA0CLK, *pui32ConfigReg) -
    1a08:	4a14      	ldr	r2, [pc, #80]	; (1a5c <am_hal_ctimer_config+0xdc>)
    1a0a:	6810      	ldr	r0, [r2, #0]
    1a0c:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    1a10:	f10c 35ff 	add.w	r5, ip, #4294967295
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1a14:	f3c0 4e44 	ubfx	lr, r0, #17, #5
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1a18:	2d04      	cmp	r5, #4
    ui32TimerBSrc = AM_BFX(CTIMER, CTRL0, TMRB0CLK, *pui32ConfigReg) -
    1a1a:	f10e 31ff 	add.w	r1, lr, #4294967295
    if ( (ui32TimerASrc <= (AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4K) -
    1a1e:	d90b      	bls.n	1a38 <am_hal_ctimer_config+0xb8>
                            AM_ENUMX(CTIMER, CTRL0, TMRA0CLK, HFRC_DIV4)))  ||
    1a20:	2904      	cmp	r1, #4
    1a22:	d909      	bls.n	1a38 <am_hal_ctimer_config+0xb8>
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    }
    else
    {
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 1);
    1a24:	4c0e      	ldr	r4, [pc, #56]	; (1a60 <am_hal_ctimer_config+0xe0>)
    1a26:	6823      	ldr	r3, [r4, #0]
    1a28:	f043 0204 	orr.w	r2, r3, #4
    1a2c:	6022      	str	r2, [r4, #0]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1a2e:	9801      	ldr	r0, [sp, #4]
    1a30:	f000 f8ec 	bl	1c0c <am_hal_interrupt_master_set>

} // am_hal_ctimer_config()
    1a34:	b003      	add	sp, #12
    1a36:	bd30      	pop	{r4, r5, pc}
        AM_BFW(PWRCTRL, MISCOPT, DIS_LDOLPMODE_TIMERS, 0);
    1a38:	4809      	ldr	r0, [pc, #36]	; (1a60 <am_hal_ctimer_config+0xe0>)
    1a3a:	6805      	ldr	r5, [r0, #0]
    1a3c:	f025 0104 	bic.w	r1, r5, #4
    1a40:	6001      	str	r1, [r0, #0]
    AM_CRITICAL_END_ASM
    1a42:	9801      	ldr	r0, [sp, #4]
    1a44:	f000 f8e2 	bl	1c0c <am_hal_interrupt_master_set>
} // am_hal_ctimer_config()
    1a48:	b003      	add	sp, #12
    1a4a:	bd30      	pop	{r4, r5, pc}
    1a4c:	4000800c 	.word	0x4000800c
    1a50:	40008100 	.word	0x40008100
    1a54:	4000801c 	.word	0x4000801c
    1a58:	4000802c 	.word	0x4000802c
    1a5c:	4000803c 	.word	0x4000803c
    1a60:	40021020 	.word	0x40021020

00001a64 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1a64:	b570      	push	{r4, r5, r6, lr}
    1a66:	b082      	sub	sp, #8
    1a68:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    1a6a:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN_ASM
    1a6c:	f000 f8ca 	bl	1c04 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1a70:	4d07      	ldr	r5, [pc, #28]	; (1a90 <am_hal_ctimer_start+0x2c>)
    AM_CRITICAL_BEGIN_ASM
    1a72:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    1a74:	5971      	ldr	r1, [r6, r5]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    1a76:	f004 2308 	and.w	r3, r4, #134219776	; 0x8000800
    1a7a:	ea21 0003 	bic.w	r0, r1, r3
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    1a7e:	f004 1201 	and.w	r2, r4, #65537	; 0x10001
    1a82:	4302      	orrs	r2, r0
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    1a84:	5172      	str	r2, [r6, r5]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1a86:	9801      	ldr	r0, [sp, #4]
    1a88:	f000 f8c0 	bl	1c0c <am_hal_interrupt_master_set>
} // am_hal_ctimer_start()
    1a8c:	b002      	add	sp, #8
    1a8e:	bd70      	pop	{r4, r5, r6, pc}
    1a90:	4000800c 	.word	0x4000800c

00001a94 <am_hal_ctimer_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1a94:	b570      	push	{r4, r5, r6, lr}
    1a96:	b082      	sub	sp, #8
    1a98:	460c      	mov	r4, r1

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    1a9a:	0106      	lsls	r6, r0, #4

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1a9c:	f000 f8b2 	bl	1c04 <am_hal_interrupt_master_disable>
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1aa0:	4d05      	ldr	r5, [pc, #20]	; (1ab8 <am_hal_ctimer_clear+0x24>)
    AM_CRITICAL_BEGIN_ASM
    1aa2:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    1aa4:	5971      	ldr	r1, [r6, r5]
    1aa6:	f004 2008 	and.w	r0, r4, #134219776	; 0x8000800
    1aaa:	4308      	orrs	r0, r1
    1aac:	5170      	str	r0, [r6, r5]
                                   AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1aae:	9801      	ldr	r0, [sp, #4]
    1ab0:	f000 f8ac 	bl	1c0c <am_hal_interrupt_master_set>
} // am_hal_ctimer_clear()
    1ab4:	b002      	add	sp, #8
    1ab6:	bd70      	pop	{r4, r5, r6, pc}
    1ab8:	4000800c 	.word	0x4000800c

00001abc <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1ac0:	b082      	sub	sp, #8
    1ac2:	4688      	mov	r8, r1
    1ac4:	461f      	mov	r7, r3
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    1ac6:	ea4f 1900 	mov.w	r9, r0, lsl #4
{
    1aca:	4614      	mov	r4, r2
                                    (ui32TimerNumber * TIMER_OFFSET));

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1acc:	f000 f89a 	bl	1c04 <am_hal_interrupt_master_disable>
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1ad0:	f8df a098 	ldr.w	sl, [pc, #152]	; 1b6c <am_hal_ctimer_period_set+0xb0>
    AM_CRITICAL_BEGIN_ASM
    1ad4:	9001      	str	r0, [sp, #4]
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1ad6:	f518 3f80 	cmn.w	r8, #65536	; 0x10000
                                    AM_REG_CTIMER_CMPRA0_O +
    1ada:	4d21      	ldr	r5, [pc, #132]	; (1b60 <am_hal_ctimer_period_set+0xa4>)
                                    AM_REG_CTIMER_CMPRB0_O +
    1adc:	4e21      	ldr	r6, [pc, #132]	; (1b64 <am_hal_ctimer_period_set+0xa8>)
    ui32Mode = *pui32ControlReg;
    1ade:	f859 300a 	ldr.w	r3, [r9, sl]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1ae2:	d01b      	beq.n	1b1c <am_hal_ctimer_period_set+0x60>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1ae4:	f403 70c0 	and.w	r0, r3, #384	; 0x180
    1ae8:	2880      	cmp	r0, #128	; 0x80
    1aea:	d01c      	beq.n	1b26 <am_hal_ctimer_period_set+0x6a>

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1aec:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1af0:	2300      	movs	r3, #0
    1af2:	45b8      	cmp	r8, r7
        ui32Comp1 = 0;
    1af4:	461a      	mov	r2, r3
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1af6:	d01d      	beq.n	1b34 <am_hal_ctimer_period_set+0x78>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1af8:	491b      	ldr	r1, [pc, #108]	; (1b68 <am_hal_ctimer_period_set+0xac>)
    1afa:	4588      	cmp	r8, r1
    1afc:	d025      	beq.n	1b4a <am_hal_ctimer_period_set+0x8e>
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1 >> 16));
    1afe:	400a      	ands	r2, r1
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1b00:	b2a0      	uxth	r0, r4
    1b02:	4303      	orrs	r3, r0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1b04:	ea42 4414 	orr.w	r4, r2, r4, lsr #16
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1b08:	f849 3005 	str.w	r3, [r9, r5]
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1b0c:	f849 4006 	str.w	r4, [r9, r6]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1b10:	9801      	ldr	r0, [sp, #4]
    1b12:	f000 f87b 	bl	1c0c <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    1b16:	b002      	add	sp, #8
    1b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ui32Mode = ui32Mode >> 16;
    1b1c:	0c19      	lsrs	r1, r3, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1b1e:	f401 70c0 	and.w	r0, r1, #384	; 0x180
    1b22:	2880      	cmp	r0, #128	; 0x80
    1b24:	d110      	bne.n	1b48 <am_hal_ctimer_period_set+0x8c>
    1b26:	0423      	lsls	r3, r4, #16
        ui32Comp1 = ui32Period;
    1b28:	4622      	mov	r2, r4
        ui32Comp0 = ui32Period - ui32OnTime;
    1b2a:	1be4      	subs	r4, r4, r7
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1b2c:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1b30:	45b8      	cmp	r8, r7
    1b32:	d1e1      	bne.n	1af8 <am_hal_ctimer_period_set+0x3c>
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1b34:	b2a6      	uxth	r6, r4
    1b36:	4333      	orrs	r3, r6
    1b38:	f849 3005 	str.w	r3, [r9, r5]
    AM_CRITICAL_END_ASM
    1b3c:	9801      	ldr	r0, [sp, #4]
    1b3e:	f000 f865 	bl	1c0c <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    1b42:	b002      	add	sp, #8
    1b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1b48:	2300      	movs	r3, #0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1b4a:	b2a5      	uxth	r5, r4
    1b4c:	432b      	orrs	r3, r5
    1b4e:	f849 3006 	str.w	r3, [r9, r6]
    AM_CRITICAL_END_ASM
    1b52:	9801      	ldr	r0, [sp, #4]
    1b54:	f000 f85a 	bl	1c0c <am_hal_interrupt_master_set>
} // am_hal_ctimer_period_set()
    1b58:	b002      	add	sp, #8
    1b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1b5e:	bf00      	nop
    1b60:	40008004 	.word	0x40008004
    1b64:	40008008 	.word	0x40008008
    1b68:	ffff0000 	.word	0xffff0000
    1b6c:	4000800c 	.word	0x4000800c

00001b70 <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    1b70:	b510      	push	{r4, lr}
    1b72:	b082      	sub	sp, #8
    1b74:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN_ASM
    1b76:	f000 f845 	bl	1c04 <am_hal_interrupt_master_disable>

    //
    // Enable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    1b7a:	4b05      	ldr	r3, [pc, #20]	; (1b90 <am_hal_ctimer_int_enable+0x20>)
    AM_CRITICAL_BEGIN_ASM
    1b7c:	9001      	str	r0, [sp, #4]
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    1b7e:	6818      	ldr	r0, [r3, #0]
    1b80:	4320      	orrs	r0, r4
    1b82:	6018      	str	r0, [r3, #0]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END_ASM
    1b84:	9801      	ldr	r0, [sp, #4]
    1b86:	f000 f841 	bl	1c0c <am_hal_interrupt_master_set>
} // am_hal_ctimer_int_enable()
    1b8a:	b002      	add	sp, #8
    1b8c:	bd10      	pop	{r4, pc}
    1b8e:	bf00      	nop
    1b90:	40008200 	.word	0x40008200

00001b94 <am_hal_ctimer_int_clear>:
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTCLR) = ui32Interrupt;
    1b94:	4b01      	ldr	r3, [pc, #4]	; (1b9c <am_hal_ctimer_int_clear+0x8>)
    1b96:	6018      	str	r0, [r3, #0]
    1b98:	4770      	bx	lr
    1b9a:	bf00      	nop
    1b9c:	40008208 	.word	0x40008208

00001ba0 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    1ba0:	e7fe      	b.n	1ba0 <am_hal_debug_error>
    1ba2:	bf00      	nop

00001ba4 <am_hal_flash_delay>:
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    g_am_hal_flash.delay_cycles(ui32Iterations);
    1ba4:	4b00      	ldr	r3, [pc, #0]	; (1ba8 <am_hal_flash_delay+0x4>)
    1ba6:	4718      	bx	r3
    1ba8:	0800009d 	.word	0x0800009d

00001bac <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    1bac:	280f      	cmp	r0, #15
    1bae:	d80b      	bhi.n	1bc8 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    1bb0:	2805      	cmp	r0, #5
    1bb2:	d013      	beq.n	1bdc <am_hal_interrupt_enable+0x30>
    1bb4:	2806      	cmp	r0, #6
    1bb6:	d017      	beq.n	1be8 <am_hal_interrupt_enable+0x3c>
    1bb8:	2804      	cmp	r0, #4
    1bba:	d104      	bne.n	1bc6 <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    1bbc:	4a0d      	ldr	r2, [pc, #52]	; (1bf4 <am_hal_interrupt_enable+0x48>)
    1bbe:	6813      	ldr	r3, [r2, #0]
    1bc0:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    1bc4:	6010      	str	r0, [r2, #0]
    1bc6:	4770      	bx	lr
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    1bc8:	f1a0 0310 	sub.w	r3, r0, #16
    1bcc:	f003 0c1f 	and.w	ip, r3, #31
    1bd0:	2001      	movs	r0, #1
    1bd2:	4909      	ldr	r1, [pc, #36]	; (1bf8 <am_hal_interrupt_enable+0x4c>)
    1bd4:	fa00 f20c 	lsl.w	r2, r0, ip
    1bd8:	600a      	str	r2, [r1, #0]
    1bda:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    1bdc:	4805      	ldr	r0, [pc, #20]	; (1bf4 <am_hal_interrupt_enable+0x48>)
    1bde:	6801      	ldr	r1, [r0, #0]
    1be0:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    1be4:	6002      	str	r2, [r0, #0]
            break;
    1be6:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    1be8:	4902      	ldr	r1, [pc, #8]	; (1bf4 <am_hal_interrupt_enable+0x48>)
    1bea:	680a      	ldr	r2, [r1, #0]
    1bec:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    1bf0:	600b      	str	r3, [r1, #0]
            break;
    1bf2:	4770      	bx	lr
    1bf4:	e000ed24 	.word	0xe000ed24
    1bf8:	e000e100 	.word	0xe000e100

00001bfc <am_hal_interrupt_master_enable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1bfc:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    1c00:	b662      	cpsie	i
    __asm("    bx lr");
    1c02:	4770      	bx	lr

00001c04 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1c04:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    1c08:	b672      	cpsid	i
    __asm("    bx lr");
    1c0a:	4770      	bx	lr

00001c0c <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    1c0c:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    1c10:	4770      	bx	lr
    1c12:	bf00      	nop

00001c14 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    1c14:	4b0d      	ldr	r3, [pc, #52]	; (1c4c <am_hal_itm_enable+0x38>)
    1c16:	6818      	ldr	r0, [r3, #0]
    1c18:	07c2      	lsls	r2, r0, #31
    1c1a:	d416      	bmi.n	1c4a <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    1c1c:	4a0c      	ldr	r2, [pc, #48]	; (1c50 <am_hal_itm_enable+0x3c>)
    1c1e:	6811      	ldr	r1, [r2, #0]
{
    1c20:	b430      	push	{r4, r5}
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    1c22:	f041 7480 	orr.w	r4, r1, #16777216	; 0x1000000
    1c26:	6014      	str	r4, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    1c28:	6815      	ldr	r5, [r2, #0]
    1c2a:	01eb      	lsls	r3, r5, #7
    1c2c:	d5fc      	bpl.n	1c28 <am_hal_itm_enable+0x14>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    1c2e:	4809      	ldr	r0, [pc, #36]	; (1c54 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    1c30:	4c09      	ldr	r4, [pc, #36]	; (1c58 <am_hal_itm_enable+0x44>)
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    1c32:	4d0a      	ldr	r5, [pc, #40]	; (1c5c <am_hal_itm_enable+0x48>)
    1c34:	6005      	str	r5, [r0, #0]
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    1c36:	250f      	movs	r5, #15
    1c38:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    1c3a:	bc30      	pop	{r4, r5}
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1c3c:	4908      	ldr	r1, [pc, #32]	; (1c60 <am_hal_itm_enable+0x4c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1c3e:	4b09      	ldr	r3, [pc, #36]	; (1c64 <am_hal_itm_enable+0x50>)
    1c40:	4a09      	ldr	r2, [pc, #36]	; (1c68 <am_hal_itm_enable+0x54>)
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1c42:	f04f 30ff 	mov.w	r0, #4294967295
    1c46:	6008      	str	r0, [r1, #0]
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1c48:	601a      	str	r2, [r3, #0]
}
    1c4a:	4770      	bx	lr
    1c4c:	10001134 	.word	0x10001134
    1c50:	e000edfc 	.word	0xe000edfc
    1c54:	e0000fb0 	.word	0xe0000fb0
    1c58:	e0000e40 	.word	0xe0000e40
    1c5c:	c5acce55 	.word	0xc5acce55
    1c60:	e0000e00 	.word	0xe0000e00
    1c64:	e0000e80 	.word	0xe0000e80
    1c68:	00150511 	.word	0x00150511

00001c6c <am_hal_itm_not_busy>:
am_hal_itm_not_busy(void)
{
    //
    // Make sure the ITM/TPIU is not busy.
    //
    while (AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1));
    1c6c:	4a03      	ldr	r2, [pc, #12]	; (1c7c <am_hal_itm_not_busy+0x10>)
    1c6e:	6813      	ldr	r3, [r2, #0]
    1c70:	021b      	lsls	r3, r3, #8
    1c72:	d4fc      	bmi.n	1c6e <am_hal_itm_not_busy+0x2>

    //
    // wait for 50us for the data to flush out
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1c74:	f44f 7047 	mov.w	r0, #796	; 0x31c
    1c78:	f7ff bf94 	b.w	1ba4 <am_hal_flash_delay>
    1c7c:	e0000e80 	.word	0xe0000e80

00001c80 <am_hal_itm_print>:
    uint32_t ui32Length = 0;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1c80:	7803      	ldrb	r3, [r0, #0]
    1c82:	b1b3      	cbz	r3, 1cb2 <am_hal_itm_print+0x32>
{
    1c84:	b410      	push	{r4}
    1c86:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    1c88:	2400      	movs	r4, #0
    1c8a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    1c8e:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    1c90:	2900      	cmp	r1, #0
    1c92:	d1fa      	bne.n	1c8a <am_hal_itm_print+0xa>
    1c94:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    1c96:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
    while (ui32Length)
    {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    1c9a:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    1c9e:	f8dc 3000 	ldr.w	r3, [ip]
    1ca2:	2b00      	cmp	r3, #0
    1ca4:	d0fb      	beq.n	1c9e <am_hal_itm_print+0x1e>
    while (ui32Length)
    1ca6:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    1ca8:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    1cac:	d1f5      	bne.n	1c9a <am_hal_itm_print+0x1a>
            //
            // Subtract from length.
            //
            ui32Length--;
    }
}
    1cae:	f85d 4b04 	ldr.w	r4, [sp], #4
    1cb2:	4770      	bx	lr

00001cb4 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1cb4:	490d      	ldr	r1, [pc, #52]	; (1cec <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1cb6:	4b0e      	ldr	r3, [pc, #56]	; (1cf0 <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1cb8:	4a0e      	ldr	r2, [pc, #56]	; (1cf4 <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1cba:	681b      	ldr	r3, [r3, #0]
{
    1cbc:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1cbe:	680d      	ldr	r5, [r1, #0]
    1cc0:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1cc2:	6815      	ldr	r5, [r2, #0]
    1cc4:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1cc6:	4c0c      	ldr	r4, [pc, #48]	; (1cf8 <am_hal_mcuctrl_fault_status+0x44>)
    1cc8:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1cca:	4329      	orrs	r1, r5
    1ccc:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1cce:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1cd0:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1cd4:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1cd6:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1cd8:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1cdc:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1ce0:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1ce2:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1ce4:	6142      	str	r2, [r0, #20]
}
    1ce6:	bc70      	pop	{r4, r5, r6}
    1ce8:	4770      	bx	lr
    1cea:	bf00      	nop
    1cec:	400201c4 	.word	0x400201c4
    1cf0:	400201cc 	.word	0x400201cc
    1cf4:	400201c0 	.word	0x400201c0
    1cf8:	400201c8 	.word	0x400201c8

00001cfc <am_hal_pwrctrl_memory_enable>:
{
    uint32_t ui32MemEnMask, ui32MemDisMask;
    uint32_t ui32PwrStatEnMask, ui32PwrStatDisMask;
    int32_t i32TOcnt;

    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1cfc:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
{
    1d00:	b430      	push	{r4, r5}
    if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH512K )
    1d02:	d03a      	beq.n	1d7a <am_hal_pwrctrl_memory_enable+0x7e>
        ui32MemEnMask  = AM_REG_PWRCTRL_MEMEN_FLASH0_EN;
        ui32MemDisMask = AM_REG_PWRCTRL_MEMEN_FLASH1_EN;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_FLASH1M )
    1d04:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
    1d08:	f000 809d 	beq.w	1e46 <am_hal_pwrctrl_memory_enable+0x14a>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM8K )
    1d0c:	2801      	cmp	r0, #1
    1d0e:	f000 809d 	beq.w	1e4c <am_hal_pwrctrl_memory_enable+0x150>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM8K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM16K )
    1d12:	2803      	cmp	r0, #3
    1d14:	f000 80a6 	beq.w	1e64 <am_hal_pwrctrl_memory_enable+0x168>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM16K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM24K )
    1d18:	2807      	cmp	r0, #7
    1d1a:	f000 809c 	beq.w	1e56 <am_hal_pwrctrl_memory_enable+0x15a>
                           AM_REG_PWRCTRL_MEMEN_SRAMEN_GROUP0_SRAM2);
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM32K )
    1d1e:	280f      	cmp	r0, #15
    1d20:	f000 80a5 	beq.w	1e6e <am_hal_pwrctrl_memory_enable+0x172>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM32K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM64K )
    1d24:	281f      	cmp	r0, #31
    1d26:	f000 80b0 	beq.w	1e8a <am_hal_pwrctrl_memory_enable+0x18e>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM64K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM96K )
    1d2a:	283f      	cmp	r0, #63	; 0x3f
    1d2c:	f000 80b4 	beq.w	1e98 <am_hal_pwrctrl_memory_enable+0x19c>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM96K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM128K )
    1d30:	287f      	cmp	r0, #127	; 0x7f
    1d32:	f000 80b8 	beq.w	1ea6 <am_hal_pwrctrl_memory_enable+0x1aa>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM128K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM160K )
    1d36:	28ff      	cmp	r0, #255	; 0xff
    1d38:	f000 80a0 	beq.w	1e7c <am_hal_pwrctrl_memory_enable+0x180>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM160K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM192K )
    1d3c:	f240 13ff 	movw	r3, #511	; 0x1ff
    1d40:	4298      	cmp	r0, r3
    1d42:	f000 80b7 	beq.w	1eb4 <am_hal_pwrctrl_memory_enable+0x1b8>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM192K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM224K )
    1d46:	f240 31ff 	movw	r1, #1023	; 0x3ff
    1d4a:	4288      	cmp	r0, r1
    1d4c:	f000 80b8 	beq.w	1ec0 <am_hal_pwrctrl_memory_enable+0x1c4>
                         ~AM_HAL_PWRCTRL_MEMEN_SRAM224K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_SRAM256K )
    1d50:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1d54:	4290      	cmp	r0, r2
    1d56:	d00e      	beq.n	1d76 <am_hal_pwrctrl_memory_enable+0x7a>
                         ~AM_REG_PWRCTRL_MEMEN_SRAMEN_SRAM256K;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
                             ~AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_256K;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE )
    1d58:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    1d5c:	f000 80b6 	beq.w	1ecc <am_hal_pwrctrl_memory_enable+0x1d0>
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
        ui32PwrStatDisMask = 0;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_CACHE_DIS )
    1d60:	f06f 4420 	mvn.w	r4, #2684354560	; 0xa0000000
    1d64:	42a0      	cmp	r0, r4
    1d66:	f000 80b4 	beq.w	1ed2 <am_hal_pwrctrl_memory_enable+0x1d6>
                          AM_REG_PWRCTRL_MEMEN_CACHEB2_EN;
        ui32PwrStatEnMask  = 0;
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
                             AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB0_M;
    }
    else if ( ui32MemEn == AM_HAL_PWRCTRL_MEMEN_ALL )
    1d6a:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
    1d6e:	f505 5c00 	add.w	ip, r5, #8192	; 0x2000
    1d72:	4560      	cmp	r0, ip
    1d74:	d132      	bne.n	1ddc <am_hal_pwrctrl_memory_enable+0xe0>
    {
        ui32MemEnMask  = AM_HAL_PWRCTRL_MEMEN_ALL;
        ui32MemDisMask = 0;
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL;
    1d76:	495b      	ldr	r1, [pc, #364]	; (1ee4 <am_hal_pwrctrl_memory_enable+0x1e8>)
    1d78:	e066      	b.n	1e48 <am_hal_pwrctrl_memory_enable+0x14c>
    1d7a:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM1_M;
    1d7e:	2340      	movs	r3, #64	; 0x40
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M;
    1d80:	2120      	movs	r1, #32
    // for 2 reasons: 1) To only affect the specified type of memory, and 2)
    // To avoid inadvertently disabling any memory currently being depended on.
    //
    if ( ui32MemDisMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1d82:	4c59      	ldr	r4, [pc, #356]	; (1ee8 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1d84:	6825      	ldr	r5, [r4, #0]
    1d86:	402a      	ands	r2, r5
    1d88:	6022      	str	r2, [r4, #0]
    //
    // Enable the required memory.
    //
    if ( ui32MemEnMask != 0 )
    {
        AM_REG(PWRCTRL, MEMEN) |= ui32MemEnMask;
    1d8a:	4a57      	ldr	r2, [pc, #348]	; (1ee8 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1d8c:	6814      	ldr	r4, [r2, #0]
    1d8e:	4320      	orrs	r0, r4
    1d90:	6010      	str	r0, [r2, #0]
    //
    // Wait for the power to be turned on.
    // Apollo2 note - these loops typically end up taking 1 iteration.
    //
    i32TOcnt = 200;
    if ( ui32PwrStatDisMask )
    1d92:	2b00      	cmp	r3, #0
    1d94:	d029      	beq.n	1dea <am_hal_pwrctrl_memory_enable+0xee>
    {
        while ( --i32TOcnt              &&
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1d96:	4d55      	ldr	r5, [pc, #340]	; (1eec <am_hal_pwrctrl_memory_enable+0x1f0>)
    1d98:	6828      	ldr	r0, [r5, #0]
        while ( --i32TOcnt              &&
    1d9a:	4218      	tst	r0, r3
    1d9c:	bf18      	it	ne
    1d9e:	20c6      	movne	r0, #198	; 0xc6
    1da0:	d01f      	beq.n	1de2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1da2:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1da4:	421a      	tst	r2, r3
    1da6:	d01c      	beq.n	1de2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1da8:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1daa:	421c      	tst	r4, r3
    1dac:	d019      	beq.n	1de2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1dae:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1db0:	421a      	tst	r2, r3
    1db2:	d016      	beq.n	1de2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1db4:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1db6:	421c      	tst	r4, r3
    1db8:	d013      	beq.n	1de2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1dba:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1dbc:	421a      	tst	r2, r3
    1dbe:	d010      	beq.n	1de2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1dc0:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1dc2:	421c      	tst	r4, r3
    1dc4:	d00d      	beq.n	1de2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1dc6:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1dc8:	421a      	tst	r2, r3
    1dca:	d00a      	beq.n	1de2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1dcc:	682c      	ldr	r4, [r5, #0]
        while ( --i32TOcnt              &&
    1dce:	421c      	tst	r4, r3
    1dd0:	d007      	beq.n	1de2 <am_hal_pwrctrl_memory_enable+0xe6>
                ( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatDisMask ) );
    1dd2:	682a      	ldr	r2, [r5, #0]
        while ( --i32TOcnt              &&
    1dd4:	421a      	tst	r2, r3
    1dd6:	d004      	beq.n	1de2 <am_hal_pwrctrl_memory_enable+0xe6>
    1dd8:	3809      	subs	r0, #9
    1dda:	d1e2      	bne.n	1da2 <am_hal_pwrctrl_memory_enable+0xa6>
        return false;
    1ddc:	2000      	movs	r0, #0
    {
        return false;
    }

    return true;
}
    1dde:	bc30      	pop	{r4, r5}
    1de0:	4770      	bx	lr
    if ( ui32PwrStatEnMask )
    1de2:	b911      	cbnz	r1, 1dea <am_hal_pwrctrl_memory_enable+0xee>
    return true;
    1de4:	2001      	movs	r0, #1
}
    1de6:	bc30      	pop	{r4, r5}
    1de8:	4770      	bx	lr
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1dea:	4b40      	ldr	r3, [pc, #256]	; (1eec <am_hal_pwrctrl_memory_enable+0x1f0>)
    1dec:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1dee:	ea31 0405 	bics.w	r4, r1, r5
    1df2:	bf18      	it	ne
    1df4:	24c6      	movne	r4, #198	; 0xc6
    1df6:	d0f5      	beq.n	1de4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1df8:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1dfa:	ea31 0000 	bics.w	r0, r1, r0
    1dfe:	d0f1      	beq.n	1de4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e00:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1e02:	ea31 0002 	bics.w	r0, r1, r2
    1e06:	d0ed      	beq.n	1de4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e08:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1e0a:	ea31 0005 	bics.w	r0, r1, r5
    1e0e:	d0e9      	beq.n	1de4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e10:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1e12:	ea31 0000 	bics.w	r0, r1, r0
    1e16:	d0e5      	beq.n	1de4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e18:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1e1a:	ea31 0002 	bics.w	r0, r1, r2
    1e1e:	d0e1      	beq.n	1de4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e20:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1e22:	ea31 0005 	bics.w	r0, r1, r5
    1e26:	d0dd      	beq.n	1de4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e28:	6818      	ldr	r0, [r3, #0]
        while ( --i32TOcnt              &&
    1e2a:	ea31 0000 	bics.w	r0, r1, r0
    1e2e:	d0d9      	beq.n	1de4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e30:	681a      	ldr	r2, [r3, #0]
        while ( --i32TOcnt              &&
    1e32:	ea31 0002 	bics.w	r0, r1, r2
    1e36:	d0d5      	beq.n	1de4 <am_hal_pwrctrl_memory_enable+0xe8>
            (( AM_REG(PWRCTRL, PWRONSTATUS) & ui32PwrStatEnMask )
    1e38:	681d      	ldr	r5, [r3, #0]
        while ( --i32TOcnt              &&
    1e3a:	ea31 0005 	bics.w	r0, r1, r5
    1e3e:	d0d1      	beq.n	1de4 <am_hal_pwrctrl_memory_enable+0xe8>
    1e40:	3c09      	subs	r4, #9
    1e42:	d1d9      	bne.n	1df8 <am_hal_pwrctrl_memory_enable+0xfc>
    1e44:	e7ca      	b.n	1ddc <am_hal_pwrctrl_memory_enable+0xe0>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_FLAM0_M  |
    1e46:	2160      	movs	r1, #96	; 0x60
{
    1e48:	2300      	movs	r3, #0
    1e4a:	e79e      	b.n	1d8a <am_hal_pwrctrl_memory_enable+0x8e>
    1e4c:	4a28      	ldr	r2, [pc, #160]	; (1ef0 <am_hal_pwrctrl_memory_enable+0x1f4>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e4e:	4b29      	ldr	r3, [pc, #164]	; (1ef4 <am_hal_pwrctrl_memory_enable+0x1f8>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_8K;
    1e50:	f44f 7180 	mov.w	r1, #256	; 0x100
    1e54:	e795      	b.n	1d82 <am_hal_pwrctrl_memory_enable+0x86>
    1e56:	f46f 62ff 	mvn.w	r2, #2040	; 0x7f8
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e5a:	f44f 23ff 	mov.w	r3, #522240	; 0x7f800
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_24K;
    1e5e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    1e62:	e78e      	b.n	1d82 <am_hal_pwrctrl_memory_enable+0x86>
    1e64:	4a24      	ldr	r2, [pc, #144]	; (1ef8 <am_hal_pwrctrl_memory_enable+0x1fc>)
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e66:	4b25      	ldr	r3, [pc, #148]	; (1efc <am_hal_pwrctrl_memory_enable+0x200>)
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_16K;
    1e68:	f44f 7140 	mov.w	r1, #768	; 0x300
    1e6c:	e789      	b.n	1d82 <am_hal_pwrctrl_memory_enable+0x86>
    1e6e:	f46f 62fe 	mvn.w	r2, #2032	; 0x7f0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e72:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_32K;
    1e76:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    1e7a:	e782      	b.n	1d82 <am_hal_pwrctrl_memory_enable+0x86>
    1e7c:	f46f 62e0 	mvn.w	r2, #1792	; 0x700
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e80:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_160K;
    1e84:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    1e88:	e77b      	b.n	1d82 <am_hal_pwrctrl_memory_enable+0x86>
    1e8a:	f46f 62fc 	mvn.w	r2, #2016	; 0x7e0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e8e:	f44f 23fc 	mov.w	r3, #516096	; 0x7e000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_64K;
    1e92:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    1e96:	e774      	b.n	1d82 <am_hal_pwrctrl_memory_enable+0x86>
    1e98:	f46f 62f8 	mvn.w	r2, #1984	; 0x7c0
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1e9c:	f44f 23f8 	mov.w	r3, #507904	; 0x7c000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_96K;
    1ea0:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    1ea4:	e76d      	b.n	1d82 <am_hal_pwrctrl_memory_enable+0x86>
    1ea6:	f46f 62f0 	mvn.w	r2, #1920	; 0x780
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1eaa:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_128K;
    1eae:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    1eb2:	e766      	b.n	1d82 <am_hal_pwrctrl_memory_enable+0x86>
    1eb4:	f46f 62c0 	mvn.w	r2, #1536	; 0x600
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1eb8:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_192K;
    1ebc:	4910      	ldr	r1, [pc, #64]	; (1f00 <am_hal_pwrctrl_memory_enable+0x204>)
    1ebe:	e760      	b.n	1d82 <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_224K;
    1ec0:	4910      	ldr	r1, [pc, #64]	; (1f04 <am_hal_pwrctrl_memory_enable+0x208>)
    1ec2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        ui32PwrStatDisMask = AM_HAL_PWRCTRL_PWRONSTATUS_SRAM_ALL    &
    1ec6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1eca:	e75a      	b.n	1d82 <am_hal_pwrctrl_memory_enable+0x86>
        ui32PwrStatEnMask  = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1ecc:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1ed0:	e7ba      	b.n	1e48 <am_hal_pwrctrl_memory_enable+0x14c>
        AM_REG(PWRCTRL, MEMEN) &= ~ui32MemDisMask;
    1ed2:	4805      	ldr	r0, [pc, #20]	; (1ee8 <am_hal_pwrctrl_memory_enable+0x1ec>)
    1ed4:	6803      	ldr	r3, [r0, #0]
    1ed6:	f023 4120 	bic.w	r1, r3, #2684354560	; 0xa0000000
    1eda:	6001      	str	r1, [r0, #0]
        ui32PwrStatDisMask = AM_REG_PWRCTRL_PWRONSTATUS_PD_CACHEB2_M    |
    1edc:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
        ui32PwrStatEnMask  = 0;
    1ee0:	2100      	movs	r1, #0
    1ee2:	e758      	b.n	1d96 <am_hal_pwrctrl_memory_enable+0x9a>
    1ee4:	0007ff00 	.word	0x0007ff00
    1ee8:	40021010 	.word	0x40021010
    1eec:	40021014 	.word	0x40021014
    1ef0:	fffff801 	.word	0xfffff801
    1ef4:	0007fe00 	.word	0x0007fe00
    1ef8:	fffff803 	.word	0xfffff803
    1efc:	0007fc00 	.word	0x0007fc00
    1f00:	0001ff00 	.word	0x0001ff00
    1f04:	0003ff00 	.word	0x0003ff00

00001f08 <am_hal_pwrctrl_bucks_enable>:
am_hal_pwrctrl_bucks_enable(void)
{
    //
    // Check to see if the bucks are already on. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1f08:	4b0b      	ldr	r3, [pc, #44]	; (1f38 <am_hal_pwrctrl_bucks_enable+0x30>)
    1f0a:	681a      	ldr	r2, [r3, #0]
    1f0c:	0792      	lsls	r2, r2, #30
    1f0e:	d502      	bpl.n	1f16 <am_hal_pwrctrl_bucks_enable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) )
    1f10:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON)   &&
    1f12:	07c3      	lsls	r3, r0, #31
    1f14:	d40e      	bmi.n	1f34 <am_hal_pwrctrl_bucks_enable+0x2c>
    }

    //
    // Enable BUCK power up
    //
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1f16:	4b09      	ldr	r3, [pc, #36]	; (1f3c <am_hal_pwrctrl_bucks_enable+0x34>)
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Make sure bucks are ready.
    //
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1f18:	4a07      	ldr	r2, [pc, #28]	; (1f38 <am_hal_pwrctrl_bucks_enable+0x30>)
    AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1f1a:	6819      	ldr	r1, [r3, #0]
    1f1c:	f041 0002 	orr.w	r0, r1, #2
    1f20:	6018      	str	r0, [r3, #0]
    AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1f22:	6819      	ldr	r1, [r3, #0]
    1f24:	f041 0001 	orr.w	r0, r1, #1
    1f28:	6018      	str	r0, [r3, #0]
    while ( ( AM_REG(PWRCTRL, POWERSTATUS)                      &
    1f2a:	6813      	ldr	r3, [r2, #0]
    1f2c:	f003 0103 	and.w	r1, r3, #3
    1f30:	2903      	cmp	r1, #3
    1f32:	d1fa      	bne.n	1f2a <am_hal_pwrctrl_bucks_enable+0x22>
    1f34:	4770      	bx	lr
    1f36:	bf00      	nop
    1f38:	40021004 	.word	0x40021004
    1f3c:	40021000 	.word	0x40021000

00001f40 <am_hal_pwrctrl_bucks_disable>:
am_hal_pwrctrl_bucks_disable(void)
{
    //
    // Check to see if the bucks are already off. If so, we can just return.
    //
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1f40:	4b12      	ldr	r3, [pc, #72]	; (1f8c <am_hal_pwrctrl_bucks_disable+0x4c>)
    1f42:	681a      	ldr	r2, [r3, #0]
    1f44:	0792      	lsls	r2, r2, #30
    1f46:	d402      	bmi.n	1f4e <am_hal_pwrctrl_bucks_disable+0xe>
         AM_BFR(PWRCTRL, POWERSTATUS, MEMBUCKON) == 0)
    1f48:	6818      	ldr	r0, [r3, #0]
    if ( AM_BFR(PWRCTRL, POWERSTATUS, COREBUCKON) == 0  &&
    1f4a:	07c3      	lsls	r3, r0, #31
    1f4c:	d51c      	bpl.n	1f88 <am_hal_pwrctrl_bucks_disable+0x48>
    return AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    1f4e:	4910      	ldr	r1, [pc, #64]	; (1f90 <am_hal_pwrctrl_bucks_disable+0x50>)
    1f50:	680b      	ldr	r3, [r1, #0]
    1f52:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    }

    //
    // Handle the special case if only the ADC is powered.
    //
    if ( isRev_ADC()  &&
    1f56:	2a20      	cmp	r2, #32
    1f58:	d00b      	beq.n	1f72 <am_hal_pwrctrl_bucks_disable+0x32>
    else
    {
        //
        // Power them down
        //
        AM_BFW(PWRCTRL, SUPPLYSRC, COREBUCKEN, 0);
    1f5a:	4b0e      	ldr	r3, [pc, #56]	; (1f94 <am_hal_pwrctrl_bucks_disable+0x54>)
    1f5c:	681a      	ldr	r2, [r3, #0]
    1f5e:	f022 0002 	bic.w	r0, r2, #2
    1f62:	6018      	str	r0, [r3, #0]
        AM_BFW(PWRCTRL, SUPPLYSRC, MEMBUCKEN, 0);
    1f64:	6819      	ldr	r1, [r3, #0]
    1f66:	f021 0201 	bic.w	r2, r1, #1
    1f6a:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait until BUCKs are disabled.
    //
    am_hal_flash_delay(AM_HAL_PWRCTRL_BUCKDIS_DELAYCYCLES / 3);
    1f6c:	200a      	movs	r0, #10
    1f6e:	f7ff be19 	b.w	1ba4 <am_hal_flash_delay>
         (AM_REG(PWRCTRL, DEVICEEN) == AM_REG_PWRCTRL_DEVICEEN_PWRADC_EN) )
    1f72:	4809      	ldr	r0, [pc, #36]	; (1f98 <am_hal_pwrctrl_bucks_disable+0x58>)
    1f74:	6801      	ldr	r1, [r0, #0]
    if ( isRev_ADC()  &&
    1f76:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1f7a:	d1ee      	bne.n	1f5a <am_hal_pwrctrl_bucks_disable+0x1a>
            AM_REG(PWRCTRL, SUPPLYSRC) &=
    1f7c:	4805      	ldr	r0, [pc, #20]	; (1f94 <am_hal_pwrctrl_bucks_disable+0x54>)
    1f7e:	6803      	ldr	r3, [r0, #0]
    1f80:	f003 0105 	and.w	r1, r3, #5
    1f84:	6001      	str	r1, [r0, #0]
    1f86:	e7f1      	b.n	1f6c <am_hal_pwrctrl_bucks_disable+0x2c>
    1f88:	4770      	bx	lr
    1f8a:	bf00      	nop
    1f8c:	40021004 	.word	0x40021004
    1f90:	4002000c 	.word	0x4002000c
    1f94:	40021000 	.word	0x40021000
    1f98:	40021008 	.word	0x40021008

00001f9c <am_hal_pwrctrl_low_power_init>:
am_hal_pwrctrl_low_power_init(void)
{
    //
    // For lowest power, we enable clock gating for all SRAM configuration.
    //
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1f9c:	4905      	ldr	r1, [pc, #20]	; (1fb4 <am_hal_pwrctrl_low_power_init+0x18>)
        AM_REG_PWRCTRL_SRAMCTRL_SRAM_LIGHT_SLEEP_DIS;

    //
    // For lowest deep sleep power, make sure we stay in BUCK mode.
    //
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1f9e:	4a06      	ldr	r2, [pc, #24]	; (1fb8 <am_hal_pwrctrl_low_power_init+0x1c>)
    AM_REG(PWRCTRL, SRAMCTRL) |=
    1fa0:	680b      	ldr	r3, [r1, #0]
    1fa2:	f043 0006 	orr.w	r0, r3, #6
    1fa6:	6008      	str	r0, [r1, #0]
    AM_REG(PWRCTRL, SUPPLYSRC) &=
    1fa8:	6811      	ldr	r1, [r2, #0]
    1faa:	f021 0304 	bic.w	r3, r1, #4
    1fae:	6013      	str	r3, [r2, #0]
    1fb0:	4770      	bx	lr
    1fb2:	bf00      	nop
    1fb4:	40021018 	.word	0x40021018
    1fb8:	40021000 	.word	0x40021000

00001fbc <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1fbc:	4a05      	ldr	r2, [pc, #20]	; (1fd4 <am_hal_rtc_osc_select+0x18>)
    1fbe:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    1fc0:	b918      	cbnz	r0, 1fca <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    1fc2:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1fc6:	6010      	str	r0, [r2, #0]
    1fc8:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1fca:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    1fce:	6011      	str	r1, [r2, #0]
    1fd0:	4770      	bx	lr
    1fd2:	bf00      	nop
    1fd4:	4000400c 	.word	0x4000400c

00001fd8 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_REG(RTC, RTCCTL) |= AM_REG_RTC_RTCCTL_RSTOP(1);
    1fd8:	4a02      	ldr	r2, [pc, #8]	; (1fe4 <am_hal_rtc_osc_disable+0xc>)
    1fda:	6813      	ldr	r3, [r2, #0]
    1fdc:	f043 0010 	orr.w	r0, r3, #16
    1fe0:	6010      	str	r0, [r2, #0]
    1fe2:	4770      	bx	lr
    1fe4:	40004050 	.word	0x40004050

00001fe8 <am_hal_sysctrl_sleep>:
//! @return None.
//
//*****************************************************************************
void
am_hal_sysctrl_sleep(bool bSleepDeep)
{
    1fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fea:	b083      	sub	sp, #12
    1fec:	4604      	mov	r4, r0
    volatile uint32_t ui32BuckTimer;

    //
    // Disable interrupts and save the previous interrupt state.
    //
    ui32Critical = am_hal_interrupt_master_disable();
    1fee:	f7ff fe09 	bl	1c04 <am_hal_interrupt_master_disable>
    1ff2:	4605      	mov	r5, r0

    //
    // If the user selected DEEPSLEEP and the TPIU is off, attempt to enter
    // DEEP SLEEP.
    //
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1ff4:	b124      	cbz	r4, 2000 <am_hal_sysctrl_sleep+0x18>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    1ff6:	4b42      	ldr	r3, [pc, #264]	; (2100 <am_hal_sysctrl_sleep+0x118>)
    1ff8:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1ffa:	f010 0c01 	ands.w	ip, r0, #1
    1ffe:	d00a      	beq.n	2016 <am_hal_sysctrl_sleep+0x2e>
    else
    {
        //
        // Prepare the core for normal sleep (write 0 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    2000:	4a40      	ldr	r2, [pc, #256]	; (2104 <am_hal_sysctrl_sleep+0x11c>)
    2002:	6811      	ldr	r1, [r2, #0]
    2004:	f021 0604 	bic.w	r6, r1, #4
    2008:	6016      	str	r6, [r2, #0]

        //
        // Go to sleep.
        //
        AM_ASM_WFI;
    200a:	bf30      	wfi
    }

    //
    // Restore the interrupt state.
    //
    am_hal_interrupt_master_set(ui32Critical);
    200c:	4628      	mov	r0, r5
    200e:	f7ff fdfd 	bl	1c0c <am_hal_interrupt_master_set>
}
    2012:	b003      	add	sp, #12
    2014:	bdf0      	pop	{r4, r5, r6, r7, pc}
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    2016:	4c3b      	ldr	r4, [pc, #236]	; (2104 <am_hal_sysctrl_sleep+0x11c>)
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    2018:	4b3b      	ldr	r3, [pc, #236]	; (2108 <am_hal_sysctrl_sleep+0x120>)
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    201a:	6820      	ldr	r0, [r4, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    201c:	4e3b      	ldr	r6, [pc, #236]	; (210c <am_hal_sysctrl_sleep+0x124>)
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    201e:	4f3c      	ldr	r7, [pc, #240]	; (2110 <am_hal_sysctrl_sleep+0x128>)
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    2020:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 2120 <am_hal_sysctrl_sleep+0x138>
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    2024:	f040 0204 	orr.w	r2, r0, #4
    2028:	6022      	str	r2, [r4, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    202a:	681c      	ldr	r4, [r3, #0]
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    202c:	6833      	ldr	r3, [r6, #0]
    ui32SupplySrc = AM_REG(PWRCTRL, SUPPLYSRC);
    202e:	f8de 2000 	ldr.w	r2, [lr]
    ui32SupplySrc = AM_REG(PWRCTRL, DEVICEEN);
    2032:	6839      	ldr	r1, [r7, #0]
    g_buckZX_chk = AM_BFM(MCUCTRL, CHIPREV, REVMAJ) == AM_REG_MCUCTRL_CHIPREV_REVMAJ_B ?
    2034:	f004 07f0 	and.w	r7, r4, #240	; 0xf0
                   CHKBUCKZX_REV : 0x0;
    2038:	2f20      	cmp	r7, #32
    g_buckZX_chk |= ( g_ui32BuckTimer - 1 ) <= BUCK_TIMER_MAX ?
    203a:	f103 30ff 	add.w	r0, r3, #4294967295
                   CHKBUCKZX_REV : 0x0;
    203e:	bf14      	ite	ne
    2040:	2700      	movne	r7, #0
    2042:	2702      	moveq	r7, #2
                    CHKBUCKZX_TIMER : 0x0;
    2044:	2803      	cmp	r0, #3
    2046:	bf98      	it	ls
    2048:	f04f 0c04 	movls.w	ip, #4
                     CHKBUCKZX_BUCKS : 0x0;
    204c:	f012 0403 	ands.w	r4, r2, #3
    2050:	bf18      	it	ne
    2052:	2401      	movne	r4, #1
    g_buckZX_chk |= ( ui32SupplySrc &
    2054:	f240 53ff 	movw	r3, #1535	; 0x5ff
    g_buckZX_chk |= (ui32SupplySrc &
    2058:	433c      	orrs	r4, r7
                0x0 : CHKBUCKZX_DEVEN;
    205a:	ea11 0703 	ands.w	r7, r1, r3
    g_buckZX_chk |= (ui32SupplySrc &
    205e:	ea44 040c 	orr.w	r4, r4, ip
                0x0 : CHKBUCKZX_DEVEN;
    2062:	d103      	bne.n	206c <am_hal_sysctrl_sleep+0x84>
    g_buckZX_chk |= ( ui32SupplySrc &
    2064:	f044 0408 	orr.w	r4, r4, #8
        if ( bBuckZX_chk )
    2068:	2c0f      	cmp	r4, #15
    206a:	d00a      	beq.n	2082 <am_hal_sysctrl_sleep+0x9a>
        AM_ASM_WFI;
    206c:	bf30      	wfi
        if ( bBuckZX_chk )
    206e:	2c0f      	cmp	r4, #15
    2070:	d01a      	beq.n	20a8 <am_hal_sysctrl_sleep+0xc0>
            g_bBuckRestoreComplete = true;
    2072:	4e28      	ldr	r6, [pc, #160]	; (2114 <am_hal_sysctrl_sleep+0x12c>)
    2074:	2001      	movs	r0, #1
    2076:	7030      	strb	r0, [r6, #0]
    am_hal_interrupt_master_set(ui32Critical);
    2078:	4628      	mov	r0, r5
    207a:	f7ff fdc7 	bl	1c0c <am_hal_interrupt_master_set>
}
    207e:	b003      	add	sp, #12
    2080:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ui32BuckTimer = g_ui32BuckTimer - 1;
    2082:	6832      	ldr	r2, [r6, #0]
    2084:	1e51      	subs	r1, r2, #1
    2086:	9100      	str	r1, [sp, #0]
            am_hal_ctimer_clear(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    2088:	9800      	ldr	r0, [sp, #0]
    208a:	f04f 31ff 	mov.w	r1, #4294967295
    208e:	f7ff fd01 	bl	1a94 <am_hal_ctimer_clear>
            am_hal_ctimer_period_set(ui32BuckTimer,
    2092:	9800      	ldr	r0, [sp, #0]
    2094:	463b      	mov	r3, r7
    2096:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    209a:	f04f 31ff 	mov.w	r1, #4294967295
    209e:	f7ff fd0d 	bl	1abc <am_hal_ctimer_period_set>
            am_hal_pwrctrl_bucks_disable();
    20a2:	f7ff ff4d 	bl	1f40 <am_hal_pwrctrl_bucks_disable>
    20a6:	e7e1      	b.n	206c <am_hal_sysctrl_sleep+0x84>
    AM_CRITICAL_BEGIN_ASM
    20a8:	f7ff fdac 	bl	1c04 <am_hal_interrupt_master_disable>
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    20ac:	4b1a      	ldr	r3, [pc, #104]	; (2118 <am_hal_sysctrl_sleep+0x130>)
    AM_CRITICAL_BEGIN_ASM
    20ae:	9001      	str	r0, [sp, #4]
    ui32SaveCore = AM_BFR(MCUCTRL, BUCK3, COREBUCKZXTRIM);
    20b0:	681a      	ldr	r2, [r3, #0]
    ui32SaveMem  = AM_BFR(MCUCTRL, BUCK3, MEMBUCKZXTRIM);
    20b2:	681a      	ldr	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, COREBUCKZXTRIM, ui32NewCore);
    20b4:	681f      	ldr	r7, [r3, #0]
    20b6:	f027 043c 	bic.w	r4, r7, #60	; 0x3c
    20ba:	f044 021c 	orr.w	r2, r4, #28
    20be:	601a      	str	r2, [r3, #0]
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    20c0:	6819      	ldr	r1, [r3, #0]
            g_bBuckRestoreComplete = false;
    20c2:	4c14      	ldr	r4, [pc, #80]	; (2114 <am_hal_sysctrl_sleep+0x12c>)
            AM_BFW(MCUCTRL, BUCK3, MEMBUCKZXTRIM,  ui32NewMem);
    20c4:	f421 30f0 	bic.w	r0, r1, #122880	; 0x1e000
    20c8:	f440 4760 	orr.w	r7, r0, #57344	; 0xe000
    20cc:	601f      	str	r7, [r3, #0]
    AM_CRITICAL_END_ASM
    20ce:	9801      	ldr	r0, [sp, #4]
    20d0:	f7ff fd9c 	bl	1c0c <am_hal_interrupt_master_set>
            am_hal_flash_delay( FLASH_CYCLES_US(2) );
    20d4:	201c      	movs	r0, #28
    20d6:	f7ff fd65 	bl	1ba4 <am_hal_flash_delay>
            am_hal_pwrctrl_bucks_enable();
    20da:	f7ff ff15 	bl	1f08 <am_hal_pwrctrl_bucks_enable>
            ui32BuckTimer = g_ui32BuckTimer - 1;
    20de:	6836      	ldr	r6, [r6, #0]
            g_ui32BuckInputs = 0;
    20e0:	490e      	ldr	r1, [pc, #56]	; (211c <am_hal_sysctrl_sleep+0x134>)
            g_bBuckRestoreComplete = false;
    20e2:	2200      	movs	r2, #0
            ui32BuckTimer = g_ui32BuckTimer - 1;
    20e4:	1e73      	subs	r3, r6, #1
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    20e6:	204c      	movs	r0, #76	; 0x4c
            ui32BuckTimer = g_ui32BuckTimer - 1;
    20e8:	9300      	str	r3, [sp, #0]
            g_bBuckRestoreComplete = false;
    20ea:	7022      	strb	r2, [r4, #0]
            g_ui32BuckInputs = 0;
    20ec:	600a      	str	r2, [r1, #0]
            am_hal_flash_delay( FLASH_CYCLES_US(5) );
    20ee:	f7ff fd59 	bl	1ba4 <am_hal_flash_delay>
            am_hal_ctimer_start(ui32BuckTimer, AM_HAL_CTIMER_BOTH);
    20f2:	9800      	ldr	r0, [sp, #0]
    20f4:	f04f 31ff 	mov.w	r1, #4294967295
    20f8:	f7ff fcb4 	bl	1a64 <am_hal_ctimer_start>
    20fc:	e786      	b.n	200c <am_hal_sysctrl_sleep+0x24>
    20fe:	bf00      	nop
    2100:	40020250 	.word	0x40020250
    2104:	e000ed10 	.word	0xe000ed10
    2108:	4002000c 	.word	0x4002000c
    210c:	10001140 	.word	0x10001140
    2110:	40021008 	.word	0x40021008
    2114:	10001138 	.word	0x10001138
    2118:	40020068 	.word	0x40020068
    211c:	1000113c 	.word	0x1000113c
    2120:	40021000 	.word	0x40021000

00002124 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    2124:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    2126:	4a23      	ldr	r2, [pc, #140]	; (21b4 <am_hal_tpiu_enable+0x90>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    2128:	6803      	ldr	r3, [r0, #0]
    AM_REG(TPIU, FFCR) = 0;
    212a:	2100      	movs	r1, #0
    212c:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    212e:	b33b      	cbz	r3, 2180 <am_hal_tpiu_enable+0x5c>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    2130:	f5a2 7c40 	sub.w	ip, r2, #768	; 0x300
    2134:	2101      	movs	r1, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    2136:	4c20      	ldr	r4, [pc, #128]	; (21b8 <am_hal_tpiu_enable+0x94>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    2138:	4d20      	ldr	r5, [pc, #128]	; (21bc <am_hal_tpiu_enable+0x98>)
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    213a:	f8cc 1000 	str.w	r1, [ip]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    213e:	f5a3 4e61 	sub.w	lr, r3, #57600	; 0xe100
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    2142:	45a6      	cmp	lr, r4
    2144:	bf94      	ite	ls
    2146:	461c      	movls	r4, r3
    2148:	462c      	movhi	r4, r5
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    214a:	f7ff fbf5 	bl	1938 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    214e:	1c43      	adds	r3, r0, #1
    2150:	d02d      	beq.n	21ae <am_hal_tpiu_enable+0x8a>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    2152:	08c2      	lsrs	r2, r0, #3
    2154:	fbb2 f3f4 	udiv	r3, r2, r4
    2158:	1e5d      	subs	r5, r3, #1
    215a:	b2a8      	uxth	r0, r5
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    215c:	4a18      	ldr	r2, [pc, #96]	; (21c0 <am_hal_tpiu_enable+0x9c>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    215e:	4c19      	ldr	r4, [pc, #100]	; (21c4 <am_hal_tpiu_enable+0xa0>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (6 or 3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    2160:	4b19      	ldr	r3, [pc, #100]	; (21c8 <am_hal_tpiu_enable+0xa4>)
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    2162:	491a      	ldr	r1, [pc, #104]	; (21cc <am_hal_tpiu_enable+0xa8>)
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    2164:	6010      	str	r0, [r2, #0]
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    2166:	2502      	movs	r5, #2
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    2168:	2000      	movs	r0, #0
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    216a:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    216e:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    2170:	6008      	str	r0, [r1, #0]
        AM_REGn(MCUCTRL, 0, TPIUCTRL) =
    2172:	601a      	str	r2, [r3, #0]
    }

    //
    // Wait for 50us for the data to flush out.
    //
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    2174:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    2178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    217c:	f7ff bd12 	b.w	1ba4 <am_hal_flash_delay>
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    2180:	4c0f      	ldr	r4, [pc, #60]	; (21c0 <am_hal_tpiu_enable+0x9c>)
    2182:	6905      	ldr	r5, [r0, #16]
    2184:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    2186:	6882      	ldr	r2, [r0, #8]
    2188:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    218c:	68c3      	ldr	r3, [r0, #12]
    218e:	4c10      	ldr	r4, [pc, #64]	; (21d0 <am_hal_tpiu_enable+0xac>)
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    2190:	490d      	ldr	r1, [pc, #52]	; (21c8 <am_hal_tpiu_enable+0xa4>)
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    2192:	1e5d      	subs	r5, r3, #1
    2194:	2201      	movs	r2, #1
    2196:	40aa      	lsls	r2, r5
    2198:	6022      	str	r2, [r4, #0]
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    219a:	6840      	ldr	r0, [r0, #4]
    219c:	680b      	ldr	r3, [r1, #0]
    219e:	4303      	orrs	r3, r0
    21a0:	600b      	str	r3, [r1, #0]
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    21a2:	f44f 7047 	mov.w	r0, #796	; 0x31c
}
    21a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    21aa:	f7ff bcfb 	b.w	1ba4 <am_hal_flash_delay>
    21ae:	2005      	movs	r0, #5
    21b0:	e7d4      	b.n	215c <am_hal_tpiu_enable+0x38>
    21b2:	bf00      	nop
    21b4:	e0040304 	.word	0xe0040304
    21b8:	001da380 	.word	0x001da380
    21bc:	000f4240 	.word	0x000f4240
    21c0:	e0040010 	.word	0xe0040010
    21c4:	e00400f0 	.word	0xe00400f0
    21c8:	40020250 	.word	0x40020250
    21cc:	e0040f00 	.word	0xe0040f00
    21d0:	e0040004 	.word	0xe0040004

000021d4 <am_hal_tpiu_disable>:
am_hal_tpiu_disable(void)
{
    //
    // Disable the TPIU clock source in MCU control.
    //
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    21d4:	4b01      	ldr	r3, [pc, #4]	; (21dc <am_hal_tpiu_disable+0x8>)
    21d6:	2200      	movs	r2, #0
    21d8:	601a      	str	r2, [r3, #0]
    21da:	4770      	bx	lr
    21dc:	40020250 	.word	0x40020250

000021e0 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    21e0:	4b01      	ldr	r3, [pc, #4]	; (21e8 <am_hal_vcomp_disable+0x8>)
    21e2:	2237      	movs	r2, #55	; 0x37
    21e4:	601a      	str	r2, [r3, #0]
    21e6:	4770      	bx	lr
    21e8:	4000c008 	.word	0x4000c008
    21ec:	616e6942 	.word	0x616e6942
    21f0:	43207972 	.word	0x43207972
    21f4:	746e756f 	.word	0x746e756f
    21f8:	45207265 	.word	0x45207265
    21fc:	706d6178 	.word	0x706d6178
    2200:	000a656c 	.word	0x000a656c
    2204:	0a0a0a0a 	.word	0x0a0a0a0a
    2208:	0a0a0a0a 	.word	0x0a0a0a0a
    220c:	0a0a0a0a 	.word	0x0a0a0a0a
    2210:	0a0a0a0a 	.word	0x0a0a0a0a
    2214:	00000a0a 	.word	0x00000a0a

00002218 <am_hal_cachectrl_defaults>:
    2218:	50000001 00010300 00010101 685f6d61     ...P........am_h
    2228:	635f6c61 65676b6c 79735f6e 6b6c6373     al_clkgen_sysclk
    2238:	6c65735f 28746365 69203a29 6c61766e     _select(): inval
    2248:	63206469 6b636f6c 74657320 676e6974     id clock setting
    2258:	0000002e 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    2268:	6b6c635f 2e6e6567 00000063              _clkgen.c...
