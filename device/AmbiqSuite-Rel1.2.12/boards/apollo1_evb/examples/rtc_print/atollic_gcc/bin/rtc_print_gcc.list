
rtc_print_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e2c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000060  10001000  00001e2c  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000138  10001060  00001e8c  00021060  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021060  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000598d  00000000  00000000  00021097  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001c7d  00000000  00000000  00026a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000006f0  00000000  00000000  000286a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000970  00000000  00000000  00028d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000036e9  00000000  00000000  00029701  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002223  00000000  00000000  0002cdea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  0002f00d  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001144  00000000  00000000  0002f08c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001a32  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 09 04 00 00 71 04 00 00 7d 04 00 00     ........q...}...
      10:	7d 04 00 00 7d 04 00 00 7d 04 00 00 00 00 00 00     }...}...}.......
	...
      2c:	77 04 00 00 77 04 00 00 00 00 00 00 77 04 00 00     w...w.......w...
      3c:	77 04 00 00 77 04 00 00 77 04 00 00 77 04 00 00     w...w...w...w...
      4c:	77 04 00 00 77 04 00 00 77 04 00 00 77 04 00 00     w...w...w...w...
      5c:	77 04 00 00 77 04 00 00 77 04 00 00 59 01 00 00     w...w...w...Y...
      6c:	77 04 00 00 77 04 00 00 77 04 00 00 77 04 00 00     w...w...w...w...
      7c:	77 04 00 00                                         w...

00000080 <__aeabi_d2f>:
      80:	ea4f 0241 	mov.w	r2, r1, lsl #1
      84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      88:	bf24      	itt	cs
      8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      92:	d90d      	bls.n	b0 <__aeabi_d2f+0x30>
      94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      a8:	bf08      	it	eq
      aa:	f020 0001 	biceq.w	r0, r0, #1
      ae:	4770      	bx	lr
      b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      b4:	d121      	bne.n	fa <__aeabi_d2f+0x7a>
      b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      ba:	bfbc      	itt	lt
      bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
      c0:	4770      	bxlt	lr
      c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
      c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
      ca:	f1c2 0218 	rsb	r2, r2, #24
      ce:	f1c2 0c20 	rsb	ip, r2, #32
      d2:	fa10 f30c 	lsls.w	r3, r0, ip
      d6:	fa20 f002 	lsr.w	r0, r0, r2
      da:	bf18      	it	ne
      dc:	f040 0001 	orrne.w	r0, r0, #1
      e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
      e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
      e8:	fa03 fc0c 	lsl.w	ip, r3, ip
      ec:	ea40 000c 	orr.w	r0, r0, ip
      f0:	fa23 f302 	lsr.w	r3, r3, r2
      f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
      f8:	e7cc      	b.n	94 <__aeabi_d2f+0x14>
      fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
      fe:	d107      	bne.n	110 <__aeabi_d2f+0x90>
     100:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     104:	bf1e      	ittt	ne
     106:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     10a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     10e:	4770      	bxne	lr
     110:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     114:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     118:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     11c:	4770      	bx	lr
     11e:	bf00      	nop

00000120 <timerA0_init>:
// Init function for Timer A0.
//
//*****************************************************************************
void
timerA0_init(void)
{
     120:	b580      	push	{r7, lr}
     122:	af00      	add	r7, sp, #0
    //
    // Enable the LFRC.
    //
    am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_LFRC);
     124:	2002      	movs	r0, #2
     126:	f001 fa45 	bl	15b4 <am_hal_clkgen_osc_start>

    //
    // Set up timer A0.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
     12a:	f64f 71ff 	movw	r1, #65535	; 0xffff
     12e:	2000      	movs	r0, #0
     130:	f001 fa7c 	bl	162c <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer0);
     134:	4907      	ldr	r1, [pc, #28]	; (154 <timerA0_init+0x34>)
     136:	2000      	movs	r0, #0
     138:	f001 fa50 	bl	15dc <am_hal_ctimer_config>

    //
    // Set the timing for timerA0.
    //
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, 31, 0);
     13c:	2300      	movs	r3, #0
     13e:	221f      	movs	r2, #31
     140:	f64f 71ff 	movw	r1, #65535	; 0xffff
     144:	2000      	movs	r0, #0
     146:	f001 fa7b 	bl	1640 <am_hal_ctimer_period_set>

    //
    // Clear the timer Interrupt
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
     14a:	2001      	movs	r0, #1
     14c:	f001 fabe 	bl	16cc <am_hal_ctimer_int_clear>
}
     150:	bf00      	nop
     152:	bd80      	pop	{r7, pc}
     154:	10001054 	.word	0x10001054

00000158 <am_ctimer_isr>:
// Timer Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
     158:	b580      	push	{r7, lr}
     15a:	af00      	add	r7, sp, #0
    //
    // Clear TimerA0 Interrupt (write to clear).
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
     15c:	2001      	movs	r0, #1
     15e:	f001 fab5 	bl	16cc <am_hal_ctimer_int_clear>

    am_hal_rtc_time_get(&hal_time);
     162:	4802      	ldr	r0, [pc, #8]	; (16c <am_ctimer_isr+0x14>)
     164:	f001 fc36 	bl	19d4 <am_hal_rtc_time_get>

}
     168:	bf00      	nop
     16a:	bd80      	pop	{r7, pc}
     16c:	10001168 	.word	0x10001168

00000170 <toVal>:
// toVal() converts a string to an ASCII value.
//
//*****************************************************************************
int
toVal(char *pcAsciiStr)
{
     170:	b480      	push	{r7}
     172:	b085      	sub	sp, #20
     174:	af00      	add	r7, sp, #0
     176:	6078      	str	r0, [r7, #4]
    int iRetVal = 0;
     178:	2300      	movs	r3, #0
     17a:	60fb      	str	r3, [r7, #12]
    iRetVal += pcAsciiStr[1] - '0';
     17c:	687b      	ldr	r3, [r7, #4]
     17e:	3301      	adds	r3, #1
     180:	781b      	ldrb	r3, [r3, #0]
     182:	3b30      	subs	r3, #48	; 0x30
     184:	68fa      	ldr	r2, [r7, #12]
     186:	4413      	add	r3, r2
     188:	60fb      	str	r3, [r7, #12]
    iRetVal += pcAsciiStr[0] == ' ' ? 0 : (pcAsciiStr[0] - '0') * 10;
     18a:	687b      	ldr	r3, [r7, #4]
     18c:	781b      	ldrb	r3, [r3, #0]
     18e:	2b20      	cmp	r3, #32
     190:	d009      	beq.n	1a6 <toVal+0x36>
     192:	687b      	ldr	r3, [r7, #4]
     194:	781b      	ldrb	r3, [r3, #0]
     196:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
     19a:	4613      	mov	r3, r2
     19c:	009b      	lsls	r3, r3, #2
     19e:	4413      	add	r3, r2
     1a0:	005b      	lsls	r3, r3, #1
     1a2:	461a      	mov	r2, r3
     1a4:	e000      	b.n	1a8 <toVal+0x38>
     1a6:	2200      	movs	r2, #0
     1a8:	68fb      	ldr	r3, [r7, #12]
     1aa:	4413      	add	r3, r2
     1ac:	60fb      	str	r3, [r7, #12]
    return iRetVal;
     1ae:	68fb      	ldr	r3, [r7, #12]
}
     1b0:	4618      	mov	r0, r3
     1b2:	3714      	adds	r7, #20
     1b4:	46bd      	mov	sp, r7
     1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1ba:	4770      	bx	lr

000001bc <mthToIndex>:
// by the string, and 12 indicating that the string is not a month.
//
//*****************************************************************************
int
mthToIndex(char *pcMon)
{
     1bc:	b580      	push	{r7, lr}
     1be:	b084      	sub	sp, #16
     1c0:	af00      	add	r7, sp, #0
     1c2:	6078      	str	r0, [r7, #4]
    int idx;
    for (idx = 0; idx < 12; idx++)
     1c4:	2300      	movs	r3, #0
     1c6:	60fb      	str	r3, [r7, #12]
     1c8:	e010      	b.n	1ec <mthToIndex+0x30>
    {
        if ( am_util_string_strnicmp(pcMonth[idx], pcMon, 3) == 0 )
     1ca:	4a0c      	ldr	r2, [pc, #48]	; (1fc <mthToIndex+0x40>)
     1cc:	68fb      	ldr	r3, [r7, #12]
     1ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     1d2:	2203      	movs	r2, #3
     1d4:	6879      	ldr	r1, [r7, #4]
     1d6:	4618      	mov	r0, r3
     1d8:	f001 f87c 	bl	12d4 <am_util_string_strnicmp>
     1dc:	4603      	mov	r3, r0
     1de:	2b00      	cmp	r3, #0
     1e0:	d101      	bne.n	1e6 <mthToIndex+0x2a>
        {
            return idx;
     1e2:	68fb      	ldr	r3, [r7, #12]
     1e4:	e006      	b.n	1f4 <mthToIndex+0x38>
    for (idx = 0; idx < 12; idx++)
     1e6:	68fb      	ldr	r3, [r7, #12]
     1e8:	3301      	adds	r3, #1
     1ea:	60fb      	str	r3, [r7, #12]
     1ec:	68fb      	ldr	r3, [r7, #12]
     1ee:	2b0b      	cmp	r3, #11
     1f0:	ddeb      	ble.n	1ca <mthToIndex+0xe>
        }
    }
    return 12;
     1f2:	230c      	movs	r3, #12
}
     1f4:	4618      	mov	r0, r3
     1f6:	3710      	adds	r7, #16
     1f8:	46bd      	mov	sp, r7
     1fa:	bd80      	pop	{r7, pc}
     1fc:	10001020 	.word	0x10001020

00000200 <main>:
// Main
//
//*****************************************************************************
int
main(void)
{
     200:	b5b0      	push	{r4, r5, r7, lr}
     202:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     204:	2000      	movs	r0, #0
     206:	f001 f9b9 	bl	157c <am_hal_clkgen_sysclk_select>
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     20a:	f001 f94f 	bl	14ac <am_bsp_low_power_init>

#if RTC_CLK_SRC == XT
    //
    // Enable the XT for the RTC.
    //
    am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_XT);
     20e:	2001      	movs	r0, #1
     210:	f001 f9d0 	bl	15b4 <am_hal_clkgen_osc_start>

    //
    // Select XT for RTC clock source
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_XT);
     214:	2000      	movs	r0, #0
     216:	f001 fb2d 	bl	1874 <am_hal_rtc_osc_select>
#endif

    //
    // Enable the RTC.
    //
    am_hal_rtc_osc_enable();
     21a:	f001 fb39 	bl	1890 <am_hal_rtc_osc_enable>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     21e:	4863      	ldr	r0, [pc, #396]	; (3ac <main+0x1ac>)
     220:	f000 f9ac 	bl	57c <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     224:	4b62      	ldr	r3, [pc, #392]	; (3b0 <main+0x1b0>)
     226:	2273      	movs	r2, #115	; 0x73
     228:	601a      	str	r2, [r3, #0]
     22a:	4a62      	ldr	r2, [pc, #392]	; (3b4 <main+0x1b4>)
     22c:	4b61      	ldr	r3, [pc, #388]	; (3b4 <main+0x1b4>)
     22e:	681b      	ldr	r3, [r3, #0]
     230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     234:	6013      	str	r3, [r2, #0]
     236:	4a60      	ldr	r2, [pc, #384]	; (3b8 <main+0x1b8>)
     238:	4b5f      	ldr	r3, [pc, #380]	; (3b8 <main+0x1b8>)
     23a:	681b      	ldr	r3, [r3, #0]
     23c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     240:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     244:	6013      	str	r3, [r2, #0]
     246:	4b5a      	ldr	r3, [pc, #360]	; (3b0 <main+0x1b0>)
     248:	2200      	movs	r2, #0
     24a:	601a      	str	r2, [r3, #0]

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     24c:	f001 fa74 	bl	1738 <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     250:	f001 f93e 	bl	14d0 <am_bsp_debug_printf_enable>
#if defined(__GNUC__)  ||  defined(__ARMCC_VERSION)  ||  defined(__IAR_SYSTEMS_ICC__)
    //
    // The RTC is initialized from the date and time strings that are
    // obtained from the compiler at compile time.
    //
    hal_time.ui32Hour = toVal(&__TIME__[0]);
     254:	4859      	ldr	r0, [pc, #356]	; (3bc <main+0x1bc>)
     256:	f7ff ff8b 	bl	170 <toVal>
     25a:	4603      	mov	r3, r0
     25c:	461a      	mov	r2, r3
     25e:	4b58      	ldr	r3, [pc, #352]	; (3c0 <main+0x1c0>)
     260:	61da      	str	r2, [r3, #28]
    hal_time.ui32Minute = toVal(&__TIME__[3]);
     262:	4858      	ldr	r0, [pc, #352]	; (3c4 <main+0x1c4>)
     264:	f7ff ff84 	bl	170 <toVal>
     268:	4603      	mov	r3, r0
     26a:	461a      	mov	r2, r3
     26c:	4b54      	ldr	r3, [pc, #336]	; (3c0 <main+0x1c0>)
     26e:	621a      	str	r2, [r3, #32]
    hal_time.ui32Second = toVal(&__TIME__[6]);
     270:	4855      	ldr	r0, [pc, #340]	; (3c8 <main+0x1c8>)
     272:	f7ff ff7d 	bl	170 <toVal>
     276:	4603      	mov	r3, r0
     278:	461a      	mov	r2, r3
     27a:	4b51      	ldr	r3, [pc, #324]	; (3c0 <main+0x1c0>)
     27c:	625a      	str	r2, [r3, #36]	; 0x24
    hal_time.ui32Hundredths = 00;
     27e:	4b50      	ldr	r3, [pc, #320]	; (3c0 <main+0x1c0>)
     280:	2200      	movs	r2, #0
     282:	629a      	str	r2, [r3, #40]	; 0x28
    hal_time.ui32Weekday = am_util_time_computeDayofWeek(2000 + toVal(&__DATE__[9]), mthToIndex(&__DATE__[0]) + 1, toVal(&__DATE__[4]) );
     284:	4851      	ldr	r0, [pc, #324]	; (3cc <main+0x1cc>)
     286:	f7ff ff73 	bl	170 <toVal>
     28a:	4603      	mov	r3, r0
     28c:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
     290:	484f      	ldr	r0, [pc, #316]	; (3d0 <main+0x1d0>)
     292:	f7ff ff93 	bl	1bc <mthToIndex>
     296:	4603      	mov	r3, r0
     298:	1c5d      	adds	r5, r3, #1
     29a:	484e      	ldr	r0, [pc, #312]	; (3d4 <main+0x1d4>)
     29c:	f7ff ff68 	bl	170 <toVal>
     2a0:	4603      	mov	r3, r0
     2a2:	461a      	mov	r2, r3
     2a4:	4629      	mov	r1, r5
     2a6:	4620      	mov	r0, r4
     2a8:	f001 f864 	bl	1374 <am_util_time_computeDayofWeek>
     2ac:	4603      	mov	r3, r0
     2ae:	461a      	mov	r2, r3
     2b0:	4b43      	ldr	r3, [pc, #268]	; (3c0 <main+0x1c0>)
     2b2:	609a      	str	r2, [r3, #8]
    hal_time.ui32DayOfMonth = toVal(&__DATE__[4]);
     2b4:	4847      	ldr	r0, [pc, #284]	; (3d4 <main+0x1d4>)
     2b6:	f7ff ff5b 	bl	170 <toVal>
     2ba:	4603      	mov	r3, r0
     2bc:	461a      	mov	r2, r3
     2be:	4b40      	ldr	r3, [pc, #256]	; (3c0 <main+0x1c0>)
     2c0:	619a      	str	r2, [r3, #24]
    hal_time.ui32Month = mthToIndex(&__DATE__[0]);
     2c2:	4843      	ldr	r0, [pc, #268]	; (3d0 <main+0x1d0>)
     2c4:	f7ff ff7a 	bl	1bc <mthToIndex>
     2c8:	4603      	mov	r3, r0
     2ca:	461a      	mov	r2, r3
     2cc:	4b3c      	ldr	r3, [pc, #240]	; (3c0 <main+0x1c0>)
     2ce:	615a      	str	r2, [r3, #20]
    hal_time.ui32Year = toVal(&__DATE__[9]);
     2d0:	483e      	ldr	r0, [pc, #248]	; (3cc <main+0x1cc>)
     2d2:	f7ff ff4d 	bl	170 <toVal>
     2d6:	4603      	mov	r3, r0
     2d8:	461a      	mov	r2, r3
     2da:	4b39      	ldr	r3, [pc, #228]	; (3c0 <main+0x1c0>)
     2dc:	611a      	str	r2, [r3, #16]
    hal_time.ui32Century = 0;
     2de:	4b38      	ldr	r3, [pc, #224]	; (3c0 <main+0x1c0>)
     2e0:	2200      	movs	r2, #0
     2e2:	60da      	str	r2, [r3, #12]
    hal_time.ui32DayOfMonth = 15;
    hal_time.ui32Month = 4;
    hal_time.ui32Year = 14;
    hal_time.ui32Century = 0;
#endif
    am_hal_rtc_time_set(&hal_time);
     2e4:	4836      	ldr	r0, [pc, #216]	; (3c0 <main+0x1c0>)
     2e6:	f001 fae3 	bl	18b0 <am_hal_rtc_time_set>

    //
    // TimerA0 init.
    //
    timerA0_init();
     2ea:	f7ff ff19 	bl	120 <timerA0_init>

    //
    // Enable the timer Interrupt.
    //
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
     2ee:	2001      	movs	r0, #1
     2f0:	f001 f9e4 	bl	16bc <am_hal_ctimer_int_enable>

    //
    // Enable the timer interrupt in the NVIC.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_CTIMER);
     2f4:	201a      	movs	r0, #26
     2f6:	f001 f9f3 	bl	16e0 <am_hal_interrupt_enable>
    am_hal_interrupt_master_enable();
     2fa:	f001 fa19 	bl	1730 <am_hal_interrupt_master_enable>

    //
    // Enable the timer.
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
     2fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
     302:	2000      	movs	r0, #0
     304:	f001 f980 	bl	1608 <am_hal_ctimer_start>
    while (1)
    {
        //
        // Enable debug printf messages using ITM on SWO pin
        //
        am_bsp_debug_printf_enable();
     308:	f001 f8e2 	bl	14d0 <am_bsp_debug_printf_enable>

        //
        // Clear the terminal.
        //
        am_util_stdio_terminal_clear();
     30c:	f000 ffd8 	bl	12c0 <am_util_stdio_terminal_clear>

        //
        // Print the banner.
        //
        am_util_stdio_printf("RTC Print Example\n");
     310:	4831      	ldr	r0, [pc, #196]	; (3d8 <main+0x1d8>)
     312:	f000 ffb7 	bl	1284 <am_util_stdio_printf>
        am_util_stdio_printf("This example was built on %s at %s.\n\n", __DATE__, __TIME__);
     316:	4a29      	ldr	r2, [pc, #164]	; (3bc <main+0x1bc>)
     318:	492d      	ldr	r1, [pc, #180]	; (3d0 <main+0x1d0>)
     31a:	4830      	ldr	r0, [pc, #192]	; (3dc <main+0x1dc>)
     31c:	f000 ffb2 	bl	1284 <am_util_stdio_printf>

        //
        // Print RTC time.
        //
        am_hal_rtc_time_get(&hal_time);
     320:	4827      	ldr	r0, [pc, #156]	; (3c0 <main+0x1c0>)
     322:	f001 fb57 	bl	19d4 <am_hal_rtc_time_get>
        am_util_stdio_printf("\tIt is now ");
     326:	482e      	ldr	r0, [pc, #184]	; (3e0 <main+0x1e0>)
     328:	f000 ffac 	bl	1284 <am_util_stdio_printf>
        am_util_stdio_printf("%d : ", hal_time.ui32Hour);
     32c:	4b24      	ldr	r3, [pc, #144]	; (3c0 <main+0x1c0>)
     32e:	69db      	ldr	r3, [r3, #28]
     330:	4619      	mov	r1, r3
     332:	482c      	ldr	r0, [pc, #176]	; (3e4 <main+0x1e4>)
     334:	f000 ffa6 	bl	1284 <am_util_stdio_printf>
        am_util_stdio_printf("%02d : ", hal_time.ui32Minute);
     338:	4b21      	ldr	r3, [pc, #132]	; (3c0 <main+0x1c0>)
     33a:	6a1b      	ldr	r3, [r3, #32]
     33c:	4619      	mov	r1, r3
     33e:	482a      	ldr	r0, [pc, #168]	; (3e8 <main+0x1e8>)
     340:	f000 ffa0 	bl	1284 <am_util_stdio_printf>
        am_util_stdio_printf("%02d.", hal_time.ui32Second);
     344:	4b1e      	ldr	r3, [pc, #120]	; (3c0 <main+0x1c0>)
     346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     348:	4619      	mov	r1, r3
     34a:	4828      	ldr	r0, [pc, #160]	; (3ec <main+0x1ec>)
     34c:	f000 ff9a 	bl	1284 <am_util_stdio_printf>
        am_util_stdio_printf("%02d ", hal_time.ui32Hundredths);
     350:	4b1b      	ldr	r3, [pc, #108]	; (3c0 <main+0x1c0>)
     352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     354:	4619      	mov	r1, r3
     356:	4826      	ldr	r0, [pc, #152]	; (3f0 <main+0x1f0>)
     358:	f000 ff94 	bl	1284 <am_util_stdio_printf>
        am_util_stdio_printf(pcWeekday[hal_time.ui32Weekday]);
     35c:	4b18      	ldr	r3, [pc, #96]	; (3c0 <main+0x1c0>)
     35e:	689b      	ldr	r3, [r3, #8]
     360:	4a24      	ldr	r2, [pc, #144]	; (3f4 <main+0x1f4>)
     362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     366:	4618      	mov	r0, r3
     368:	f000 ff8c 	bl	1284 <am_util_stdio_printf>
        am_util_stdio_printf(" ");
     36c:	4822      	ldr	r0, [pc, #136]	; (3f8 <main+0x1f8>)
     36e:	f000 ff89 	bl	1284 <am_util_stdio_printf>
        am_util_stdio_printf(pcMonth[hal_time.ui32Month]);
     372:	4b13      	ldr	r3, [pc, #76]	; (3c0 <main+0x1c0>)
     374:	695b      	ldr	r3, [r3, #20]
     376:	4a21      	ldr	r2, [pc, #132]	; (3fc <main+0x1fc>)
     378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     37c:	4618      	mov	r0, r3
     37e:	f000 ff81 	bl	1284 <am_util_stdio_printf>
        am_util_stdio_printf(" ");
     382:	481d      	ldr	r0, [pc, #116]	; (3f8 <main+0x1f8>)
     384:	f000 ff7e 	bl	1284 <am_util_stdio_printf>
        am_util_stdio_printf("%d, ", hal_time.ui32DayOfMonth);
     388:	4b0d      	ldr	r3, [pc, #52]	; (3c0 <main+0x1c0>)
     38a:	699b      	ldr	r3, [r3, #24]
     38c:	4619      	mov	r1, r3
     38e:	481c      	ldr	r0, [pc, #112]	; (400 <main+0x200>)
     390:	f000 ff78 	bl	1284 <am_util_stdio_printf>
        am_util_stdio_printf("20%02d", hal_time.ui32Year);
     394:	4b0a      	ldr	r3, [pc, #40]	; (3c0 <main+0x1c0>)
     396:	691b      	ldr	r3, [r3, #16]
     398:	4619      	mov	r1, r3
     39a:	481a      	ldr	r0, [pc, #104]	; (404 <main+0x204>)
     39c:	f000 ff72 	bl	1284 <am_util_stdio_printf>

        //
        // We are done printing. Disable debug printf messages on ITM.
        //
        am_bsp_debug_printf_disable();
     3a0:	f001 f8c2 	bl	1528 <am_bsp_debug_printf_disable>

        //
        // Go to Deep Sleep and wait for a wake up.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     3a4:	2001      	movs	r0, #1
     3a6:	f001 fb79 	bl	1a9c <am_hal_sysctrl_sleep>
        am_bsp_debug_printf_enable();
     3aa:	e7ad      	b.n	308 <main+0x108>
     3ac:	00001579 	.word	0x00001579
     3b0:	40010060 	.word	0x40010060
     3b4:	40010054 	.word	0x40010054
     3b8:	40010028 	.word	0x40010028
     3bc:	00001c64 	.word	0x00001c64
     3c0:	10001168 	.word	0x10001168
     3c4:	00001c67 	.word	0x00001c67
     3c8:	00001c6a 	.word	0x00001c6a
     3cc:	00001c79 	.word	0x00001c79
     3d0:	00001c70 	.word	0x00001c70
     3d4:	00001c74 	.word	0x00001c74
     3d8:	00001c7c 	.word	0x00001c7c
     3dc:	00001c90 	.word	0x00001c90
     3e0:	00001cb8 	.word	0x00001cb8
     3e4:	00001cc4 	.word	0x00001cc4
     3e8:	00001ccc 	.word	0x00001ccc
     3ec:	00001cd4 	.word	0x00001cd4
     3f0:	00001cdc 	.word	0x00001cdc
     3f4:	10001000 	.word	0x10001000
     3f8:	00001ce4 	.word	0x00001ce4
     3fc:	10001020 	.word	0x10001020
     400:	00001ce8 	.word	0x00001ce8
     404:	00001cf0 	.word	0x00001cf0

00000408 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     408:	4811      	ldr	r0, [pc, #68]	; (450 <zero_loop+0x12>)
     40a:	4912      	ldr	r1, [pc, #72]	; (454 <zero_loop+0x16>)
     40c:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     40e:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     412:	4811      	ldr	r0, [pc, #68]	; (458 <zero_loop+0x1a>)
     414:	6801      	ldr	r1, [r0, #0]
     416:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     41a:	6001      	str	r1, [r0, #0]
     41c:	f3bf 8f4f 	dsb	sy
     420:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     424:	480d      	ldr	r0, [pc, #52]	; (45c <zero_loop+0x1e>)
     426:	490e      	ldr	r1, [pc, #56]	; (460 <zero_loop+0x22>)
     428:	4a0e      	ldr	r2, [pc, #56]	; (464 <zero_loop+0x26>)

0000042a <copy_loop>:
     42a:	f850 3b04 	ldr.w	r3, [r0], #4
     42e:	f841 3b04 	str.w	r3, [r1], #4
     432:	4291      	cmp	r1, r2
     434:	dbf9      	blt.n	42a <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     436:	480c      	ldr	r0, [pc, #48]	; (468 <zero_loop+0x2a>)
     438:	490c      	ldr	r1, [pc, #48]	; (46c <zero_loop+0x2e>)
     43a:	f04f 0200 	mov.w	r2, #0

0000043e <zero_loop>:
     43e:	4288      	cmp	r0, r1
     440:	bfb8      	it	lt
     442:	f840 2b04 	strlt.w	r2, [r0], #4
     446:	dbfa      	blt.n	43e <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     448:	f7ff feda 	bl	200 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     44c:	be00      	bkpt	0x0000
}
     44e:	bf00      	nop
     450:	e000ed08 	.word	0xe000ed08
     454:	00000000 	.word	0x00000000
     458:	e000ed88 	.word	0xe000ed88
     45c:	00001e2c 	.word	0x00001e2c
     460:	10001000 	.word	0x10001000
     464:	10001060 	.word	0x10001060
     468:	10001060 	.word	0x10001060
     46c:	10001198 	.word	0x10001198

00000470 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     470:	b480      	push	{r7}
     472:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     474:	e7fe      	b.n	474 <am_nmi_isr+0x4>

00000476 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     476:	b480      	push	{r7}
     478:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     47a:	e7fe      	b.n	47a <am_adc_isr+0x4>

0000047c <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     47c:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     47e:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     480:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     482:	f000 f809 	bl	498 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     486:	bd01      	pop	{r0, pc}
}
     488:	bf00      	nop
     48a:	4618      	mov	r0, r3

0000048c <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     48c:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     48e:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     490:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     492:	4770      	bx	lr
}
     494:	bf00      	nop
     496:	4618      	mov	r0, r3

00000498 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     498:	b580      	push	{r7, lr}
     49a:	b096      	sub	sp, #88	; 0x58
     49c:	af00      	add	r7, sp, #0
     49e:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     4a0:	f107 030c 	add.w	r3, r7, #12
     4a4:	2200      	movs	r2, #0
     4a6:	601a      	str	r2, [r3, #0]
     4a8:	605a      	str	r2, [r3, #4]
     4aa:	609a      	str	r2, [r3, #8]
     4ac:	60da      	str	r2, [r3, #12]
     4ae:	611a      	str	r2, [r3, #16]
     4b0:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
     4b2:	2300      	movs	r3, #0
     4b4:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     4b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     4b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     4ba:	4b2e      	ldr	r3, [pc, #184]	; (574 <am_util_faultisr_collect_data+0xdc>)
     4bc:	681b      	ldr	r3, [r3, #0]
     4be:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     4c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     4c2:	b2db      	uxtb	r3, r3
     4c4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     4c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     4ca:	0a1b      	lsrs	r3, r3, #8
     4cc:	b2db      	uxtb	r3, r3
     4ce:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     4d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     4d4:	0c1b      	lsrs	r3, r3, #16
     4d6:	b29b      	uxth	r3, r3
     4d8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     4dc:	4b26      	ldr	r3, [pc, #152]	; (578 <am_util_faultisr_collect_data+0xe0>)
     4de:	681b      	ldr	r3, [r3, #0]
     4e0:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     4e2:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     4e6:	b2db      	uxtb	r3, r3
     4e8:	f003 0302 	and.w	r3, r3, #2
     4ec:	2b00      	cmp	r3, #0
     4ee:	d005      	beq.n	4fc <am_util_faultisr_collect_data+0x64>
     4f0:	6879      	ldr	r1, [r7, #4]
     4f2:	2006      	movs	r0, #6
     4f4:	f7ff ffca 	bl	48c <getStackedReg>
     4f8:	4603      	mov	r3, r0
     4fa:	e001      	b.n	500 <am_util_faultisr_collect_data+0x68>
     4fc:	f04f 33ff 	mov.w	r3, #4294967295
     500:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     502:	6879      	ldr	r1, [r7, #4]
     504:	2000      	movs	r0, #0
     506:	f7ff ffc1 	bl	48c <getStackedReg>
     50a:	4603      	mov	r3, r0
     50c:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     50e:	6879      	ldr	r1, [r7, #4]
     510:	2001      	movs	r0, #1
     512:	f7ff ffbb 	bl	48c <getStackedReg>
     516:	4603      	mov	r3, r0
     518:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     51a:	6879      	ldr	r1, [r7, #4]
     51c:	2002      	movs	r0, #2
     51e:	f7ff ffb5 	bl	48c <getStackedReg>
     522:	4603      	mov	r3, r0
     524:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     526:	6879      	ldr	r1, [r7, #4]
     528:	2003      	movs	r0, #3
     52a:	f7ff ffaf 	bl	48c <getStackedReg>
     52e:	4603      	mov	r3, r0
     530:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     532:	6879      	ldr	r1, [r7, #4]
     534:	2004      	movs	r0, #4
     536:	f7ff ffa9 	bl	48c <getStackedReg>
     53a:	4603      	mov	r3, r0
     53c:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     53e:	6879      	ldr	r1, [r7, #4]
     540:	2005      	movs	r0, #5
     542:	f7ff ffa3 	bl	48c <getStackedReg>
     546:	4603      	mov	r3, r0
     548:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     54a:	6879      	ldr	r1, [r7, #4]
     54c:	2006      	movs	r0, #6
     54e:	f7ff ff9d 	bl	48c <getStackedReg>
     552:	4603      	mov	r3, r0
     554:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     556:	6879      	ldr	r1, [r7, #4]
     558:	2007      	movs	r0, #7
     55a:	f7ff ff97 	bl	48c <getStackedReg>
     55e:	4603      	mov	r3, r0
     560:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     562:	f107 030c 	add.w	r3, r7, #12
     566:	4618      	mov	r0, r3
     568:	f001 f942 	bl	17f0 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     56c:	2300      	movs	r3, #0
     56e:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
     570:	e7fe      	b.n	570 <am_util_faultisr_collect_data+0xd8>
     572:	bf00      	nop
     574:	e000ed28 	.word	0xe000ed28
     578:	e000ed38 	.word	0xe000ed38

0000057c <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     57c:	b480      	push	{r7}
     57e:	b083      	sub	sp, #12
     580:	af00      	add	r7, sp, #0
     582:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     584:	4a04      	ldr	r2, [pc, #16]	; (598 <am_util_stdio_printf_init+0x1c>)
     586:	687b      	ldr	r3, [r7, #4]
     588:	6013      	str	r3, [r2, #0]
}
     58a:	bf00      	nop
     58c:	370c      	adds	r7, #12
     58e:	46bd      	mov	sp, r7
     590:	f85d 7b04 	ldr.w	r7, [sp], #4
     594:	4770      	bx	lr
     596:	bf00      	nop
     598:	10001194 	.word	0x10001194

0000059c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     59c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     5a0:	b096      	sub	sp, #88	; 0x58
     5a2:	af00      	add	r7, sp, #0
     5a4:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     5a8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     5ac:	0025      	movs	r5, r4
     5ae:	2600      	movs	r6, #0
     5b0:	ea55 0306 	orrs.w	r3, r5, r6
     5b4:	f000 80a0 	beq.w	6f8 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     5b8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     5bc:	0862      	lsrs	r2, r4, #1
     5be:	ea4f 0133 	mov.w	r1, r3, rrx
     5c2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     5c6:	ea4f 0893 	mov.w	r8, r3, lsr #2
     5ca:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     5ce:	ea4f 0994 	mov.w	r9, r4, lsr #2
     5d2:	eb11 0308 	adds.w	r3, r1, r8
     5d6:	eb42 0409 	adc.w	r4, r2, r9
     5da:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     5de:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5e2:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     5e6:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     5ea:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     5ee:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5f2:	eb13 030a 	adds.w	r3, r3, sl
     5f6:	eb44 040b 	adc.w	r4, r4, fp
     5fa:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     5fe:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     602:	0a1a      	lsrs	r2, r3, #8
     604:	62ba      	str	r2, [r7, #40]	; 0x28
     606:	6aba      	ldr	r2, [r7, #40]	; 0x28
     608:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     60c:	62ba      	str	r2, [r7, #40]	; 0x28
     60e:	0a23      	lsrs	r3, r4, #8
     610:	62fb      	str	r3, [r7, #44]	; 0x2c
     612:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     616:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     61a:	18c9      	adds	r1, r1, r3
     61c:	eb42 0204 	adc.w	r2, r2, r4
     620:	460b      	mov	r3, r1
     622:	4614      	mov	r4, r2
     624:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     628:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     62c:	0c1a      	lsrs	r2, r3, #16
     62e:	623a      	str	r2, [r7, #32]
     630:	6a3a      	ldr	r2, [r7, #32]
     632:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     636:	623a      	str	r2, [r7, #32]
     638:	0c23      	lsrs	r3, r4, #16
     63a:	627b      	str	r3, [r7, #36]	; 0x24
     63c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     640:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     644:	18c9      	adds	r1, r1, r3
     646:	eb42 0204 	adc.w	r2, r2, r4
     64a:	460b      	mov	r3, r1
     64c:	4614      	mov	r4, r2
     64e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     652:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     656:	0023      	movs	r3, r4
     658:	603b      	str	r3, [r7, #0]
     65a:	2300      	movs	r3, #0
     65c:	607b      	str	r3, [r7, #4]
     65e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     662:	e897 0006 	ldmia.w	r7, {r1, r2}
     666:	18c9      	adds	r1, r1, r3
     668:	eb42 0204 	adc.w	r2, r2, r4
     66c:	460b      	mov	r3, r1
     66e:	4614      	mov	r4, r2
     670:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     674:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     678:	08da      	lsrs	r2, r3, #3
     67a:	613a      	str	r2, [r7, #16]
     67c:	693a      	ldr	r2, [r7, #16]
     67e:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     682:	613a      	str	r2, [r7, #16]
     684:	08e3      	lsrs	r3, r4, #3
     686:	617b      	str	r3, [r7, #20]
     688:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     68c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     690:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
     694:	460b      	mov	r3, r1
     696:	4614      	mov	r4, r2
     698:	00a0      	lsls	r0, r4, #2
     69a:	60f8      	str	r0, [r7, #12]
     69c:	68f8      	ldr	r0, [r7, #12]
     69e:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
     6a2:	60f8      	str	r0, [r7, #12]
     6a4:	009b      	lsls	r3, r3, #2
     6a6:	60bb      	str	r3, [r7, #8]
     6a8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     6ac:	185b      	adds	r3, r3, r1
     6ae:	eb44 0402 	adc.w	r4, r4, r2
     6b2:	18db      	adds	r3, r3, r3
     6b4:	eb44 0404 	adc.w	r4, r4, r4
     6b8:	4619      	mov	r1, r3
     6ba:	4622      	mov	r2, r4
     6bc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     6c0:	1a5b      	subs	r3, r3, r1
     6c2:	eb64 0402 	sbc.w	r4, r4, r2
     6c6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     6ca:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     6ce:	3306      	adds	r3, #6
     6d0:	f144 0400 	adc.w	r4, r4, #0
     6d4:	091a      	lsrs	r2, r3, #4
     6d6:	61ba      	str	r2, [r7, #24]
     6d8:	69ba      	ldr	r2, [r7, #24]
     6da:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     6de:	61ba      	str	r2, [r7, #24]
     6e0:	0923      	lsrs	r3, r4, #4
     6e2:	61fb      	str	r3, [r7, #28]
     6e4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6e8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     6ec:	18c9      	adds	r1, r1, r3
     6ee:	eb42 0204 	adc.w	r2, r2, r4
     6f2:	460b      	mov	r3, r1
     6f4:	4614      	mov	r4, r2
     6f6:	e029      	b.n	74c <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     6fa:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     6fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     6fe:	085a      	lsrs	r2, r3, #1
     700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     702:	089b      	lsrs	r3, r3, #2
     704:	4413      	add	r3, r2
     706:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     70a:	091b      	lsrs	r3, r3, #4
     70c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     70e:	4413      	add	r3, r2
     710:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     714:	0a1b      	lsrs	r3, r3, #8
     716:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     718:	4413      	add	r3, r2
     71a:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     71c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     71e:	0c1b      	lsrs	r3, r3, #16
     720:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     722:	4413      	add	r3, r2
     724:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     728:	08db      	lsrs	r3, r3, #3
     72a:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     72c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     72e:	4613      	mov	r3, r2
     730:	009b      	lsls	r3, r3, #2
     732:	4413      	add	r3, r2
     734:	005b      	lsls	r3, r3, #1
     736:	461a      	mov	r2, r3
     738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     73a:	1a9b      	subs	r3, r3, r2
     73c:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     73e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     740:	3306      	adds	r3, #6
     742:	091a      	lsrs	r2, r3, #4
     744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     746:	4413      	add	r3, r2
     748:	f04f 0400 	mov.w	r4, #0
    }
}
     74c:	4618      	mov	r0, r3
     74e:	4621      	mov	r1, r4
     750:	3758      	adds	r7, #88	; 0x58
     752:	46bd      	mov	sp, r7
     754:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     758:	4770      	bx	lr

0000075a <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     75a:	b590      	push	{r4, r7, lr}
     75c:	b085      	sub	sp, #20
     75e:	af00      	add	r7, sp, #0
     760:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     764:	683a      	ldr	r2, [r7, #0]
     766:	687b      	ldr	r3, [r7, #4]
     768:	4313      	orrs	r3, r2
     76a:	2b00      	cmp	r3, #0
     76c:	bf0c      	ite	eq
     76e:	2301      	moveq	r3, #1
     770:	2300      	movne	r3, #0
     772:	b2db      	uxtb	r3, r3
     774:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     776:	e008      	b.n	78a <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     778:	e9d7 0100 	ldrd	r0, r1, [r7]
     77c:	f7ff ff0e 	bl	59c <divu64_10>
     780:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     784:	68fb      	ldr	r3, [r7, #12]
     786:	3301      	adds	r3, #1
     788:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
     78a:	e897 0018 	ldmia.w	r7, {r3, r4}
     78e:	4323      	orrs	r3, r4
     790:	d1f2      	bne.n	778 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
     792:	68fb      	ldr	r3, [r7, #12]
}
     794:	4618      	mov	r0, r3
     796:	3714      	adds	r7, #20
     798:	46bd      	mov	sp, r7
     79a:	bd90      	pop	{r4, r7, pc}

0000079c <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     79c:	b590      	push	{r4, r7, lr}
     79e:	b083      	sub	sp, #12
     7a0:	af00      	add	r7, sp, #0
     7a2:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     7a6:	e897 0018 	ldmia.w	r7, {r3, r4}
     7aa:	2b00      	cmp	r3, #0
     7ac:	f174 0300 	sbcs.w	r3, r4, #0
     7b0:	da06      	bge.n	7c0 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     7b2:	e897 0018 	ldmia.w	r7, {r3, r4}
     7b6:	425b      	negs	r3, r3
     7b8:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     7bc:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     7c0:	e897 0018 	ldmia.w	r7, {r3, r4}
     7c4:	4618      	mov	r0, r3
     7c6:	4621      	mov	r1, r4
     7c8:	f7ff ffc7 	bl	75a <ndigits_in_u64>
     7cc:	4603      	mov	r3, r0
}
     7ce:	4618      	mov	r0, r3
     7d0:	370c      	adds	r7, #12
     7d2:	46bd      	mov	sp, r7
     7d4:	bd90      	pop	{r4, r7, pc}

000007d6 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     7d6:	b490      	push	{r4, r7}
     7d8:	b084      	sub	sp, #16
     7da:	af00      	add	r7, sp, #0
     7dc:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     7e0:	6839      	ldr	r1, [r7, #0]
     7e2:	687a      	ldr	r2, [r7, #4]
     7e4:	430a      	orrs	r2, r1
     7e6:	2a00      	cmp	r2, #0
     7e8:	bf0c      	ite	eq
     7ea:	2201      	moveq	r2, #1
     7ec:	2200      	movne	r2, #0
     7ee:	b2d2      	uxtb	r2, r2
     7f0:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     7f2:	e00a      	b.n	80a <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     7f4:	e897 0006 	ldmia.w	r7, {r1, r2}
     7f8:	090b      	lsrs	r3, r1, #4
     7fa:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     7fe:	0914      	lsrs	r4, r2, #4
     800:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     804:	68fa      	ldr	r2, [r7, #12]
     806:	3201      	adds	r2, #1
     808:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
     80a:	e897 0006 	ldmia.w	r7, {r1, r2}
     80e:	430a      	orrs	r2, r1
     810:	d1f0      	bne.n	7f4 <ndigits_in_hex+0x1e>
    }

    return iDigits;
     812:	68fb      	ldr	r3, [r7, #12]
}
     814:	4618      	mov	r0, r3
     816:	3710      	adds	r7, #16
     818:	46bd      	mov	sp, r7
     81a:	bc90      	pop	{r4, r7}
     81c:	4770      	bx	lr

0000081e <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     81e:	b480      	push	{r7}
     820:	b087      	sub	sp, #28
     822:	af00      	add	r7, sp, #0
     824:	6078      	str	r0, [r7, #4]
     826:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     828:	2300      	movs	r3, #0
     82a:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     82c:	2300      	movs	r3, #0
     82e:	613b      	str	r3, [r7, #16]
     830:	2300      	movs	r3, #0
     832:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     834:	687b      	ldr	r3, [r7, #4]
     836:	781b      	ldrb	r3, [r3, #0]
     838:	2b2d      	cmp	r3, #45	; 0x2d
     83a:	d11b      	bne.n	874 <decstr_to_int+0x56>
    {
        bNeg = true;
     83c:	2301      	movs	r3, #1
     83e:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     840:	687b      	ldr	r3, [r7, #4]
     842:	3301      	adds	r3, #1
     844:	607b      	str	r3, [r7, #4]
        uCnt++;
     846:	68fb      	ldr	r3, [r7, #12]
     848:	3301      	adds	r3, #1
     84a:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     84c:	e012      	b.n	874 <decstr_to_int+0x56>
    {
        ++uCnt;
     84e:	68fb      	ldr	r3, [r7, #12]
     850:	3301      	adds	r3, #1
     852:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     854:	693a      	ldr	r2, [r7, #16]
     856:	4613      	mov	r3, r2
     858:	009b      	lsls	r3, r3, #2
     85a:	4413      	add	r3, r2
     85c:	005b      	lsls	r3, r3, #1
     85e:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     860:	687b      	ldr	r3, [r7, #4]
     862:	781b      	ldrb	r3, [r3, #0]
     864:	461a      	mov	r2, r3
     866:	693b      	ldr	r3, [r7, #16]
     868:	4413      	add	r3, r2
     86a:	3b30      	subs	r3, #48	; 0x30
     86c:	613b      	str	r3, [r7, #16]
        pcStr++;
     86e:	687b      	ldr	r3, [r7, #4]
     870:	3301      	adds	r3, #1
     872:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     874:	687b      	ldr	r3, [r7, #4]
     876:	781b      	ldrb	r3, [r3, #0]
     878:	2b2f      	cmp	r3, #47	; 0x2f
     87a:	d903      	bls.n	884 <decstr_to_int+0x66>
     87c:	687b      	ldr	r3, [r7, #4]
     87e:	781b      	ldrb	r3, [r3, #0]
     880:	2b39      	cmp	r3, #57	; 0x39
     882:	d9e4      	bls.n	84e <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
     884:	683b      	ldr	r3, [r7, #0]
     886:	2b00      	cmp	r3, #0
     888:	d002      	beq.n	890 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     88a:	683b      	ldr	r3, [r7, #0]
     88c:	68fa      	ldr	r2, [r7, #12]
     88e:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     890:	7dfb      	ldrb	r3, [r7, #23]
     892:	2b00      	cmp	r3, #0
     894:	d002      	beq.n	89c <decstr_to_int+0x7e>
     896:	693b      	ldr	r3, [r7, #16]
     898:	425b      	negs	r3, r3
     89a:	e000      	b.n	89e <decstr_to_int+0x80>
     89c:	693b      	ldr	r3, [r7, #16]
}
     89e:	4618      	mov	r0, r3
     8a0:	371c      	adds	r7, #28
     8a2:	46bd      	mov	sp, r7
     8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
     8a8:	4770      	bx	lr

000008aa <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     8aa:	b590      	push	{r4, r7, lr}
     8ac:	b091      	sub	sp, #68	; 0x44
     8ae:	af00      	add	r7, sp, #0
     8b0:	e9c7 0102 	strd	r0, r1, [r7, #8]
     8b4:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     8b6:	2300      	movs	r3, #0
     8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
     8ba:	2300      	movs	r3, #0
     8bc:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     8be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     8c2:	f7ff fe6b 	bl	59c <divu64_10>
     8c6:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     8ca:	68b9      	ldr	r1, [r7, #8]
     8cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     8ce:	4613      	mov	r3, r2
     8d0:	009b      	lsls	r3, r3, #2
     8d2:	4413      	add	r3, r2
     8d4:	005b      	lsls	r3, r3, #1
     8d6:	1acb      	subs	r3, r1, r3
     8d8:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     8da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     8dc:	1c5a      	adds	r2, r3, #1
     8de:	63fa      	str	r2, [r7, #60]	; 0x3c
     8e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     8e2:	b2d2      	uxtb	r2, r2
     8e4:	3230      	adds	r2, #48	; 0x30
     8e6:	b2d2      	uxtb	r2, r2
     8e8:	f107 0140 	add.w	r1, r7, #64	; 0x40
     8ec:	440b      	add	r3, r1
     8ee:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     8f2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     8f6:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     8fa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     8fe:	4323      	orrs	r3, r4
     900:	d1dd      	bne.n	8be <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     904:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     906:	687b      	ldr	r3, [r7, #4]
     908:	2b00      	cmp	r3, #0
     90a:	d011      	beq.n	930 <uint64_to_str+0x86>
    {
        while ( ix-- )
     90c:	e008      	b.n	920 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     90e:	687b      	ldr	r3, [r7, #4]
     910:	1c5a      	adds	r2, r3, #1
     912:	607a      	str	r2, [r7, #4]
     914:	f107 0110 	add.w	r1, r7, #16
     918:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     91a:	440a      	add	r2, r1
     91c:	7812      	ldrb	r2, [r2, #0]
     91e:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
     920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     922:	1e5a      	subs	r2, r3, #1
     924:	63fa      	str	r2, [r7, #60]	; 0x3c
     926:	2b00      	cmp	r3, #0
     928:	d1f1      	bne.n	90e <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     92a:	687b      	ldr	r3, [r7, #4]
     92c:	2200      	movs	r2, #0
     92e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     932:	4618      	mov	r0, r3
     934:	3744      	adds	r7, #68	; 0x44
     936:	46bd      	mov	sp, r7
     938:	bd90      	pop	{r4, r7, pc}

0000093a <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     93a:	b4b0      	push	{r4, r5, r7}
     93c:	b08d      	sub	sp, #52	; 0x34
     93e:	af00      	add	r7, sp, #0
     940:	e9c7 0102 	strd	r0, r1, [r7, #8]
     944:	607a      	str	r2, [r7, #4]
     946:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     948:	2300      	movs	r3, #0
     94a:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     94c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     950:	4313      	orrs	r3, r2
     952:	d131      	bne.n	9b8 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     956:	1c5a      	adds	r2, r3, #1
     958:	62fa      	str	r2, [r7, #44]	; 0x2c
     95a:	f107 0230 	add.w	r2, r7, #48	; 0x30
     95e:	4413      	add	r3, r2
     960:	2230      	movs	r2, #48	; 0x30
     962:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     966:	e027      	b.n	9b8 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     968:	7a3b      	ldrb	r3, [r7, #8]
     96a:	f003 030f 	and.w	r3, r3, #15
     96e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     972:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     976:	2b09      	cmp	r3, #9
     978:	d90a      	bls.n	990 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     97a:	78fb      	ldrb	r3, [r7, #3]
     97c:	2b00      	cmp	r3, #0
     97e:	d001      	beq.n	984 <uint64_to_hexstr+0x4a>
     980:	2227      	movs	r2, #39	; 0x27
     982:	e000      	b.n	986 <uint64_to_hexstr+0x4c>
     984:	2207      	movs	r2, #7
     986:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     98a:	4413      	add	r3, r2
     98c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     992:	1c5a      	adds	r2, r3, #1
     994:	62fa      	str	r2, [r7, #44]	; 0x2c
     996:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     99a:	3230      	adds	r2, #48	; 0x30
     99c:	b2d2      	uxtb	r2, r2
     99e:	f107 0130 	add.w	r1, r7, #48	; 0x30
     9a2:	440b      	add	r3, r1
     9a4:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     9a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     9ac:	0914      	lsrs	r4, r2, #4
     9ae:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     9b2:	091d      	lsrs	r5, r3, #4
     9b4:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
     9b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     9bc:	4313      	orrs	r3, r2
     9be:	d1d3      	bne.n	968 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     9c2:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     9c4:	687b      	ldr	r3, [r7, #4]
     9c6:	2b00      	cmp	r3, #0
     9c8:	d011      	beq.n	9ee <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     9ca:	e008      	b.n	9de <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     9cc:	687b      	ldr	r3, [r7, #4]
     9ce:	1c5a      	adds	r2, r3, #1
     9d0:	607a      	str	r2, [r7, #4]
     9d2:	f107 0110 	add.w	r1, r7, #16
     9d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     9d8:	440a      	add	r2, r1
     9da:	7812      	ldrb	r2, [r2, #0]
     9dc:	701a      	strb	r2, [r3, #0]
        while (ix--)
     9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     9e0:	1e5a      	subs	r2, r3, #1
     9e2:	62fa      	str	r2, [r7, #44]	; 0x2c
     9e4:	2b00      	cmp	r3, #0
     9e6:	d1f1      	bne.n	9cc <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     9e8:	687b      	ldr	r3, [r7, #4]
     9ea:	2200      	movs	r2, #0
     9ec:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     9f0:	4618      	mov	r0, r3
     9f2:	3734      	adds	r7, #52	; 0x34
     9f4:	46bd      	mov	sp, r7
     9f6:	bcb0      	pop	{r4, r5, r7}
     9f8:	4770      	bx	lr

000009fa <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     9fa:	b480      	push	{r7}
     9fc:	b085      	sub	sp, #20
     9fe:	af00      	add	r7, sp, #0
     a00:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     a02:	2300      	movs	r3, #0
     a04:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     a06:	687b      	ldr	r3, [r7, #4]
     a08:	2b00      	cmp	r3, #0
     a0a:	d104      	bne.n	a16 <simple_strlen+0x1c>
    {
        return ui32RetVal;
     a0c:	68fb      	ldr	r3, [r7, #12]
     a0e:	e009      	b.n	a24 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     a10:	68fb      	ldr	r3, [r7, #12]
     a12:	3301      	adds	r3, #1
     a14:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
     a16:	687b      	ldr	r3, [r7, #4]
     a18:	1c5a      	adds	r2, r3, #1
     a1a:	607a      	str	r2, [r7, #4]
     a1c:	781b      	ldrb	r3, [r3, #0]
     a1e:	2b00      	cmp	r3, #0
     a20:	d1f6      	bne.n	a10 <simple_strlen+0x16>
    }
    return ui32RetVal;
     a22:	68fb      	ldr	r3, [r7, #12]
}
     a24:	4618      	mov	r0, r3
     a26:	3714      	adds	r7, #20
     a28:	46bd      	mov	sp, r7
     a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
     a2e:	4770      	bx	lr

00000a30 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     a30:	b480      	push	{r7}
     a32:	b087      	sub	sp, #28
     a34:	af00      	add	r7, sp, #0
     a36:	60f8      	str	r0, [r7, #12]
     a38:	460b      	mov	r3, r1
     a3a:	607a      	str	r2, [r7, #4]
     a3c:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     a3e:	2300      	movs	r3, #0
     a40:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     a42:	687b      	ldr	r3, [r7, #4]
     a44:	2b00      	cmp	r3, #0
     a46:	dc0c      	bgt.n	a62 <padbuffer+0x32>
    {
        return i32Cnt;
     a48:	697b      	ldr	r3, [r7, #20]
     a4a:	e010      	b.n	a6e <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     a4c:	68fb      	ldr	r3, [r7, #12]
     a4e:	2b00      	cmp	r3, #0
     a50:	d004      	beq.n	a5c <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     a52:	68fb      	ldr	r3, [r7, #12]
     a54:	1c5a      	adds	r2, r3, #1
     a56:	60fa      	str	r2, [r7, #12]
     a58:	7afa      	ldrb	r2, [r7, #11]
     a5a:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     a5c:	697b      	ldr	r3, [r7, #20]
     a5e:	3301      	adds	r3, #1
     a60:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
     a62:	687b      	ldr	r3, [r7, #4]
     a64:	1e5a      	subs	r2, r3, #1
     a66:	607a      	str	r2, [r7, #4]
     a68:	2b00      	cmp	r3, #0
     a6a:	d1ef      	bne.n	a4c <padbuffer+0x1c>
    }

    return i32Cnt;
     a6c:	697b      	ldr	r3, [r7, #20]
}
     a6e:	4618      	mov	r0, r3
     a70:	371c      	adds	r7, #28
     a72:	46bd      	mov	sp, r7
     a74:	f85d 7b04 	ldr.w	r7, [sp], #4
     a78:	4770      	bx	lr
	...

00000a7c <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     a7c:	b590      	push	{r4, r7, lr}
     a7e:	b08f      	sub	sp, #60	; 0x3c
     a80:	af00      	add	r7, sp, #0
     a82:	60f8      	str	r0, [r7, #12]
     a84:	60b9      	str	r1, [r7, #8]
     a86:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
     a88:	68bb      	ldr	r3, [r7, #8]
     a8a:	681b      	ldr	r3, [r3, #0]
     a8c:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
     a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a90:	2b03      	cmp	r3, #3
     a92:	dc02      	bgt.n	a9a <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     a94:	f06f 0302 	mvn.w	r3, #2
     a98:	e0e7      	b.n	c6a <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
     a9a:	edd7 7a03 	vldr	s15, [r7, #12]
     a9e:	eef5 7a40 	vcmp.f32	s15, #0.0
     aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     aa6:	d104      	bne.n	ab2 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     aa8:	68bb      	ldr	r3, [r7, #8]
     aaa:	4a72      	ldr	r2, [pc, #456]	; (c74 <ftoa+0x1f8>)
     aac:	601a      	str	r2, [r3, #0]
        return 3;
     aae:	2303      	movs	r3, #3
     ab0:	e0db      	b.n	c6a <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
     ab2:	68bb      	ldr	r3, [r7, #8]
     ab4:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
     ab6:	68fb      	ldr	r3, [r7, #12]
     ab8:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     aba:	693b      	ldr	r3, [r7, #16]
     abc:	15db      	asrs	r3, r3, #23
     abe:	b2db      	uxtb	r3, r3
     ac0:	3b7f      	subs	r3, #127	; 0x7f
     ac2:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     ac4:	693b      	ldr	r3, [r7, #16]
     ac6:	f3c3 0316 	ubfx	r3, r3, #0, #23
     aca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     ace:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
     ad0:	2300      	movs	r3, #0
     ad2:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     ad4:	2300      	movs	r3, #0
     ad6:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     ad8:	69fb      	ldr	r3, [r7, #28]
     ada:	2b1e      	cmp	r3, #30
     adc:	dd02      	ble.n	ae4 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     ade:	f06f 0301 	mvn.w	r3, #1
     ae2:	e0c2      	b.n	c6a <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
     ae4:	69fb      	ldr	r3, [r7, #28]
     ae6:	f113 0f17 	cmn.w	r3, #23
     aea:	da02      	bge.n	af2 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     aec:	f04f 33ff 	mov.w	r3, #4294967295
     af0:	e0bb      	b.n	c6a <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
     af2:	69fb      	ldr	r3, [r7, #28]
     af4:	2b16      	cmp	r3, #22
     af6:	dd06      	ble.n	b06 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
     af8:	69fb      	ldr	r3, [r7, #28]
     afa:	3b17      	subs	r3, #23
     afc:	69ba      	ldr	r2, [r7, #24]
     afe:	fa02 f303 	lsl.w	r3, r2, r3
     b02:	637b      	str	r3, [r7, #52]	; 0x34
     b04:	e01a      	b.n	b3c <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     b06:	69fb      	ldr	r3, [r7, #28]
     b08:	2b00      	cmp	r3, #0
     b0a:	db0f      	blt.n	b2c <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
     b0c:	69fb      	ldr	r3, [r7, #28]
     b0e:	f1c3 0317 	rsb	r3, r3, #23
     b12:	69ba      	ldr	r2, [r7, #24]
     b14:	fa42 f303 	asr.w	r3, r2, r3
     b18:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
     b1a:	69fb      	ldr	r3, [r7, #28]
     b1c:	3301      	adds	r3, #1
     b1e:	69ba      	ldr	r2, [r7, #24]
     b20:	fa02 f303 	lsl.w	r3, r2, r3
     b24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     b28:	633b      	str	r3, [r7, #48]	; 0x30
     b2a:	e007      	b.n	b3c <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
     b2c:	69bb      	ldr	r3, [r7, #24]
     b2e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     b32:	69fb      	ldr	r3, [r7, #28]
     b34:	43db      	mvns	r3, r3
     b36:	fa42 f303 	asr.w	r3, r2, r3
     b3a:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     b3c:	693b      	ldr	r3, [r7, #16]
     b3e:	2b00      	cmp	r3, #0
     b40:	da04      	bge.n	b4c <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     b42:	68bb      	ldr	r3, [r7, #8]
     b44:	1c5a      	adds	r2, r3, #1
     b46:	60ba      	str	r2, [r7, #8]
     b48:	222d      	movs	r2, #45	; 0x2d
     b4a:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b4e:	2b00      	cmp	r3, #0
     b50:	d105      	bne.n	b5e <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     b52:	68bb      	ldr	r3, [r7, #8]
     b54:	1c5a      	adds	r2, r3, #1
     b56:	60ba      	str	r2, [r7, #8]
     b58:	2230      	movs	r2, #48	; 0x30
     b5a:	701a      	strb	r2, [r3, #0]
     b5c:	e021      	b.n	ba2 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b60:	2b00      	cmp	r3, #0
     b62:	dd08      	ble.n	b76 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b66:	ea4f 74e3 	mov.w	r4, r3, asr #31
     b6a:	68ba      	ldr	r2, [r7, #8]
     b6c:	4618      	mov	r0, r3
     b6e:	4621      	mov	r1, r4
     b70:	f7ff fe9b 	bl	8aa <uint64_to_str>
     b74:	e011      	b.n	b9a <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     b76:	68bb      	ldr	r3, [r7, #8]
     b78:	1c5a      	adds	r2, r3, #1
     b7a:	60ba      	str	r2, [r7, #8]
     b7c:	222d      	movs	r2, #45	; 0x2d
     b7e:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b82:	425b      	negs	r3, r3
     b84:	ea4f 74e3 	mov.w	r4, r3, asr #31
     b88:	68ba      	ldr	r2, [r7, #8]
     b8a:	4618      	mov	r0, r3
     b8c:	4621      	mov	r1, r4
     b8e:	f7ff fe8c 	bl	8aa <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     b92:	e002      	b.n	b9a <ftoa+0x11e>
        {
            pcBuf++;
     b94:	68bb      	ldr	r3, [r7, #8]
     b96:	3301      	adds	r3, #1
     b98:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
     b9a:	68bb      	ldr	r3, [r7, #8]
     b9c:	781b      	ldrb	r3, [r3, #0]
     b9e:	2b00      	cmp	r3, #0
     ba0:	d1f8      	bne.n	b94 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     ba2:	68bb      	ldr	r3, [r7, #8]
     ba4:	1c5a      	adds	r2, r3, #1
     ba6:	60ba      	str	r2, [r7, #8]
     ba8:	222e      	movs	r2, #46	; 0x2e
     baa:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     bae:	2b00      	cmp	r3, #0
     bb0:	d105      	bne.n	bbe <ftoa+0x142>
    {
        *pcBuf++ = '0';
     bb2:	68bb      	ldr	r3, [r7, #8]
     bb4:	1c5a      	adds	r2, r3, #1
     bb6:	60ba      	str	r2, [r7, #8]
     bb8:	2230      	movs	r2, #48	; 0x30
     bba:	701a      	strb	r2, [r3, #0]
     bbc:	e04f      	b.n	c5e <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     bbe:	68ba      	ldr	r2, [r7, #8]
     bc0:	6a3b      	ldr	r3, [r7, #32]
     bc2:	1ad3      	subs	r3, r2, r3
     bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     bc6:	1ad3      	subs	r3, r2, r3
     bc8:	3b01      	subs	r3, #1
     bca:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     bcc:	697a      	ldr	r2, [r7, #20]
     bce:	687b      	ldr	r3, [r7, #4]
     bd0:	4293      	cmp	r3, r2
     bd2:	bfa8      	it	ge
     bd4:	4613      	movge	r3, r2
     bd6:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
     bd8:	2300      	movs	r3, #0
     bda:	62bb      	str	r3, [r7, #40]	; 0x28
     bdc:	e015      	b.n	c0a <ftoa+0x18e>
        {
            i32FracPart *= 10;
     bde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     be0:	4613      	mov	r3, r2
     be2:	009b      	lsls	r3, r3, #2
     be4:	4413      	add	r3, r2
     be6:	005b      	lsls	r3, r3, #1
     be8:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     bea:	68bb      	ldr	r3, [r7, #8]
     bec:	1c5a      	adds	r2, r3, #1
     bee:	60ba      	str	r2, [r7, #8]
     bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     bf2:	1612      	asrs	r2, r2, #24
     bf4:	b2d2      	uxtb	r2, r2
     bf6:	3230      	adds	r2, #48	; 0x30
     bf8:	b2d2      	uxtb	r2, r2
     bfa:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     bfe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     c02:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
     c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
     c06:	3301      	adds	r3, #1
     c08:	62bb      	str	r3, [r7, #40]	; 0x28
     c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
     c0c:	697b      	ldr	r3, [r7, #20]
     c0e:	429a      	cmp	r2, r3
     c10:	dbe5      	blt.n	bde <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
     c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     c14:	4613      	mov	r3, r2
     c16:	009b      	lsls	r3, r3, #2
     c18:	4413      	add	r3, r2
     c1a:	005b      	lsls	r3, r3, #1
     c1c:	161b      	asrs	r3, r3, #24
     c1e:	2b04      	cmp	r3, #4
     c20:	dd1d      	ble.n	c5e <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
     c22:	68bb      	ldr	r3, [r7, #8]
     c24:	3b01      	subs	r3, #1
     c26:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     c28:	e015      	b.n	c56 <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
     c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c2c:	781b      	ldrb	r3, [r3, #0]
     c2e:	2b2e      	cmp	r3, #46	; 0x2e
     c30:	d00e      	beq.n	c50 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
     c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c34:	781b      	ldrb	r3, [r3, #0]
     c36:	2b39      	cmp	r3, #57	; 0x39
     c38:	d103      	bne.n	c42 <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
     c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c3c:	2230      	movs	r2, #48	; 0x30
     c3e:	701a      	strb	r2, [r3, #0]
     c40:	e006      	b.n	c50 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
     c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c44:	781b      	ldrb	r3, [r3, #0]
     c46:	3301      	adds	r3, #1
     c48:	b2da      	uxtb	r2, r3
     c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c4c:	701a      	strb	r2, [r3, #0]
                    break;
     c4e:	e006      	b.n	c5e <ftoa+0x1e2>
                }
                pcBuftmp--;
     c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c52:	3b01      	subs	r3, #1
     c54:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     c58:	6a3b      	ldr	r3, [r7, #32]
     c5a:	429a      	cmp	r2, r3
     c5c:	d2e5      	bcs.n	c2a <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     c5e:	68bb      	ldr	r3, [r7, #8]
     c60:	2200      	movs	r2, #0
     c62:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     c64:	68ba      	ldr	r2, [r7, #8]
     c66:	6a3b      	ldr	r3, [r7, #32]
     c68:	1ad3      	subs	r3, r2, r3
} // ftoa()
     c6a:	4618      	mov	r0, r3
     c6c:	373c      	adds	r7, #60	; 0x3c
     c6e:	46bd      	mov	sp, r7
     c70:	bd90      	pop	{r4, r7, pc}
     c72:	bf00      	nop
     c74:	00302e30 	.word	0x00302e30

00000c78 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     c78:	b590      	push	{r4, r7, lr}
     c7a:	b095      	sub	sp, #84	; 0x54
     c7c:	af00      	add	r7, sp, #0
     c7e:	60f8      	str	r0, [r7, #12]
     c80:	60b9      	str	r1, [r7, #8]
     c82:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     c84:	2300      	movs	r3, #0
     c86:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     c88:	2300      	movs	r3, #0
     c8a:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     c8c:	e2e3      	b.n	1256 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     c8e:	2306      	movs	r3, #6
     c90:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     c92:	68bb      	ldr	r3, [r7, #8]
     c94:	781b      	ldrb	r3, [r3, #0]
     c96:	2b25      	cmp	r3, #37	; 0x25
     c98:	d01f      	beq.n	cda <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     c9a:	68fb      	ldr	r3, [r7, #12]
     c9c:	2b00      	cmp	r3, #0
     c9e:	d015      	beq.n	ccc <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     ca0:	68bb      	ldr	r3, [r7, #8]
     ca2:	781b      	ldrb	r3, [r3, #0]
     ca4:	2b0a      	cmp	r3, #10
     ca6:	d10b      	bne.n	cc0 <am_util_stdio_vsprintf+0x48>
     ca8:	4bb1      	ldr	r3, [pc, #708]	; (f70 <am_util_stdio_vsprintf+0x2f8>)
     caa:	781b      	ldrb	r3, [r3, #0]
     cac:	2b00      	cmp	r3, #0
     cae:	d007      	beq.n	cc0 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     cb0:	68fb      	ldr	r3, [r7, #12]
     cb2:	1c5a      	adds	r2, r3, #1
     cb4:	60fa      	str	r2, [r7, #12]
     cb6:	220d      	movs	r2, #13
     cb8:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     cbc:	3301      	adds	r3, #1
     cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     cc0:	68fb      	ldr	r3, [r7, #12]
     cc2:	1c5a      	adds	r2, r3, #1
     cc4:	60fa      	str	r2, [r7, #12]
     cc6:	68ba      	ldr	r2, [r7, #8]
     cc8:	7812      	ldrb	r2, [r2, #0]
     cca:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     ccc:	68bb      	ldr	r3, [r7, #8]
     cce:	3301      	adds	r3, #1
     cd0:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     cd4:	3301      	adds	r3, #1
     cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     cd8:	e2bd      	b.n	1256 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     cda:	68bb      	ldr	r3, [r7, #8]
     cdc:	3301      	adds	r3, #1
     cde:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     ce0:	2300      	movs	r3, #0
     ce2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     ce6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     cea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     cee:	2320      	movs	r3, #32
     cf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     cf4:	68bb      	ldr	r3, [r7, #8]
     cf6:	781b      	ldrb	r3, [r3, #0]
     cf8:	2b30      	cmp	r3, #48	; 0x30
     cfa:	d105      	bne.n	d08 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     cfc:	2330      	movs	r3, #48	; 0x30
     cfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     d02:	68bb      	ldr	r3, [r7, #8]
     d04:	3301      	adds	r3, #1
     d06:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     d08:	f107 0310 	add.w	r3, r7, #16
     d0c:	4619      	mov	r1, r3
     d0e:	68b8      	ldr	r0, [r7, #8]
     d10:	f7ff fd85 	bl	81e <decstr_to_int>
     d14:	4603      	mov	r3, r0
     d16:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     d18:	693b      	ldr	r3, [r7, #16]
     d1a:	68ba      	ldr	r2, [r7, #8]
     d1c:	4413      	add	r3, r2
     d1e:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     d20:	68bb      	ldr	r3, [r7, #8]
     d22:	781b      	ldrb	r3, [r3, #0]
     d24:	2b73      	cmp	r3, #115	; 0x73
     d26:	d005      	beq.n	d34 <am_util_stdio_vsprintf+0xbc>
     d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d2a:	2b00      	cmp	r3, #0
     d2c:	da02      	bge.n	d34 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d30:	425b      	negs	r3, r3
     d32:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     d34:	68bb      	ldr	r3, [r7, #8]
     d36:	781b      	ldrb	r3, [r3, #0]
     d38:	2b2e      	cmp	r3, #46	; 0x2e
     d3a:	d10e      	bne.n	d5a <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     d3c:	68bb      	ldr	r3, [r7, #8]
     d3e:	3301      	adds	r3, #1
     d40:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     d42:	f107 0310 	add.w	r3, r7, #16
     d46:	4619      	mov	r1, r3
     d48:	68b8      	ldr	r0, [r7, #8]
     d4a:	f7ff fd68 	bl	81e <decstr_to_int>
     d4e:	4603      	mov	r3, r0
     d50:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     d52:	693b      	ldr	r3, [r7, #16]
     d54:	68ba      	ldr	r2, [r7, #8]
     d56:	4413      	add	r3, r2
     d58:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	781b      	ldrb	r3, [r3, #0]
     d5e:	2b6c      	cmp	r3, #108	; 0x6c
     d60:	d10c      	bne.n	d7c <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     d62:	68bb      	ldr	r3, [r7, #8]
     d64:	3301      	adds	r3, #1
     d66:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     d68:	68bb      	ldr	r3, [r7, #8]
     d6a:	781b      	ldrb	r3, [r3, #0]
     d6c:	2b6c      	cmp	r3, #108	; 0x6c
     d6e:	d105      	bne.n	d7c <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     d70:	68bb      	ldr	r3, [r7, #8]
     d72:	3301      	adds	r3, #1
     d74:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     d76:	2301      	movs	r3, #1
     d78:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     d7c:	68bb      	ldr	r3, [r7, #8]
     d7e:	781b      	ldrb	r3, [r3, #0]
     d80:	3b46      	subs	r3, #70	; 0x46
     d82:	2b32      	cmp	r3, #50	; 0x32
     d84:	f200 8254 	bhi.w	1230 <am_util_stdio_vsprintf+0x5b8>
     d88:	a201      	add	r2, pc, #4	; (adr r2, d90 <am_util_stdio_vsprintf+0x118>)
     d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     d8e:	bf00      	nop
     d90:	000011bb 	.word	0x000011bb
     d94:	00001231 	.word	0x00001231
     d98:	00001231 	.word	0x00001231
     d9c:	00001231 	.word	0x00001231
     da0:	00001231 	.word	0x00001231
     da4:	00001231 	.word	0x00001231
     da8:	00001231 	.word	0x00001231
     dac:	00001231 	.word	0x00001231
     db0:	00001231 	.word	0x00001231
     db4:	00001231 	.word	0x00001231
     db8:	00001231 	.word	0x00001231
     dbc:	00001231 	.word	0x00001231
     dc0:	00001231 	.word	0x00001231
     dc4:	00001231 	.word	0x00001231
     dc8:	00001231 	.word	0x00001231
     dcc:	00001231 	.word	0x00001231
     dd0:	00001231 	.word	0x00001231
     dd4:	00001231 	.word	0x00001231
     dd8:	00000f57 	.word	0x00000f57
     ddc:	00001231 	.word	0x00001231
     de0:	00001231 	.word	0x00001231
     de4:	00001231 	.word	0x00001231
     de8:	00001231 	.word	0x00001231
     dec:	00001231 	.word	0x00001231
     df0:	00001231 	.word	0x00001231
     df4:	00001231 	.word	0x00001231
     df8:	00001231 	.word	0x00001231
     dfc:	00001231 	.word	0x00001231
     e00:	00001231 	.word	0x00001231
     e04:	00000e5d 	.word	0x00000e5d
     e08:	00001083 	.word	0x00001083
     e0c:	00001231 	.word	0x00001231
     e10:	000011bb 	.word	0x000011bb
     e14:	00001231 	.word	0x00001231
     e18:	00001231 	.word	0x00001231
     e1c:	00001083 	.word	0x00001083
     e20:	00001231 	.word	0x00001231
     e24:	00001231 	.word	0x00001231
     e28:	00001231 	.word	0x00001231
     e2c:	00001231 	.word	0x00001231
     e30:	00001231 	.word	0x00001231
     e34:	00001231 	.word	0x00001231
     e38:	00001231 	.word	0x00001231
     e3c:	00001231 	.word	0x00001231
     e40:	00001231 	.word	0x00001231
     e44:	00000e83 	.word	0x00000e83
     e48:	00001231 	.word	0x00001231
     e4c:	00000ff1 	.word	0x00000ff1
     e50:	00001231 	.word	0x00001231
     e54:	00001231 	.word	0x00001231
     e58:	00000f51 	.word	0x00000f51
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
     e5c:	687b      	ldr	r3, [r7, #4]
     e5e:	1d1a      	adds	r2, r3, #4
     e60:	607a      	str	r2, [r7, #4]
     e62:	681b      	ldr	r3, [r3, #0]
     e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
     e68:	68fb      	ldr	r3, [r7, #12]
     e6a:	2b00      	cmp	r3, #0
     e6c:	d005      	beq.n	e7a <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
     e6e:	68fb      	ldr	r3, [r7, #12]
     e70:	1c5a      	adds	r2, r3, #1
     e72:	60fa      	str	r2, [r7, #12]
     e74:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
     e78:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
     e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e7c:	3301      	adds	r3, #1
     e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     e80:	e1e6      	b.n	1250 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
     e82:	687b      	ldr	r3, [r7, #4]
     e84:	1d1a      	adds	r2, r3, #4
     e86:	607a      	str	r2, [r7, #4]
     e88:	681b      	ldr	r3, [r3, #0]
     e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
     e8c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
     e8e:	f7ff fdb4 	bl	9fa <simple_strlen>
     e92:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
     e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e96:	2b00      	cmp	r3, #0
     e98:	dd2e      	ble.n	ef8 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
     e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     e9e:	429a      	cmp	r2, r3
     ea0:	d22a      	bcs.n	ef8 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     ea2:	6bba      	ldr	r2, [r7, #56]	; 0x38
     ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ea6:	1ad3      	subs	r3, r2, r3
     ea8:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     eaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     eae:	6bba      	ldr	r2, [r7, #56]	; 0x38
     eb0:	4619      	mov	r1, r3
     eb2:	68f8      	ldr	r0, [r7, #12]
     eb4:	f7ff fdbc 	bl	a30 <padbuffer>
     eb8:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     eba:	68fb      	ldr	r3, [r7, #12]
     ebc:	2b00      	cmp	r3, #0
     ebe:	d001      	beq.n	ec4 <am_util_stdio_vsprintf+0x24c>
     ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ec2:	e000      	b.n	ec6 <am_util_stdio_vsprintf+0x24e>
     ec4:	2300      	movs	r3, #0
     ec6:	68fa      	ldr	r2, [r7, #12]
     ec8:	4413      	add	r3, r2
     eca:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ece:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     ed0:	4413      	add	r3, r2
     ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     ed4:	2300      	movs	r3, #0
     ed6:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
     ed8:	e00e      	b.n	ef8 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
     eda:	68fb      	ldr	r3, [r7, #12]
     edc:	2b00      	cmp	r3, #0
     ede:	d005      	beq.n	eec <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
     ee0:	68fb      	ldr	r3, [r7, #12]
     ee2:	1c5a      	adds	r2, r3, #1
     ee4:	60fa      	str	r2, [r7, #12]
     ee6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     ee8:	7812      	ldrb	r2, [r2, #0]
     eea:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
     eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     eee:	3301      	adds	r3, #1
     ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
     ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ef4:	3301      	adds	r3, #1
     ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
     ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     efa:	781b      	ldrb	r3, [r3, #0]
     efc:	2b00      	cmp	r3, #0
     efe:	d1ec      	bne.n	eda <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
     f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f02:	2b00      	cmp	r3, #0
     f04:	f000 81a1 	beq.w	124a <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
     f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f0a:	425b      	negs	r3, r3
     f0c:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
     f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     f12:	429a      	cmp	r2, r3
     f14:	f080 8199 	bcs.w	124a <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     f18:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f1c:	1ad3      	subs	r3, r2, r3
     f1e:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     f20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     f24:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f26:	4619      	mov	r1, r3
     f28:	68f8      	ldr	r0, [r7, #12]
     f2a:	f7ff fd81 	bl	a30 <padbuffer>
     f2e:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     f30:	68fb      	ldr	r3, [r7, #12]
     f32:	2b00      	cmp	r3, #0
     f34:	d001      	beq.n	f3a <am_util_stdio_vsprintf+0x2c2>
     f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f38:	e000      	b.n	f3c <am_util_stdio_vsprintf+0x2c4>
     f3a:	2300      	movs	r3, #0
     f3c:	68fa      	ldr	r2, [r7, #12]
     f3e:	4413      	add	r3, r2
     f40:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f46:	4413      	add	r3, r2
     f48:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     f4a:	2300      	movs	r3, #0
     f4c:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
     f4e:	e17c      	b.n	124a <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
     f50:	2301      	movs	r3, #1
     f52:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     f56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     f5a:	2b00      	cmp	r3, #0
     f5c:	d00a      	beq.n	f74 <am_util_stdio_vsprintf+0x2fc>
     f5e:	687b      	ldr	r3, [r7, #4]
     f60:	3307      	adds	r3, #7
     f62:	f023 0307 	bic.w	r3, r3, #7
     f66:	f103 0208 	add.w	r2, r3, #8
     f6a:	607a      	str	r2, [r7, #4]
     f6c:	cb18      	ldmia	r3, {r3, r4}
     f6e:	e007      	b.n	f80 <am_util_stdio_vsprintf+0x308>
     f70:	10001160 	.word	0x10001160
                                      va_arg(pArgs, uint32_t);
     f74:	687b      	ldr	r3, [r7, #4]
     f76:	1d1a      	adds	r2, r3, #4
     f78:	607a      	str	r2, [r7, #4]
     f7a:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     f7c:	f04f 0400 	mov.w	r4, #0
     f80:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
     f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f86:	2b00      	cmp	r3, #0
     f88:	d01e      	beq.n	fc8 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
     f8a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     f8e:	f7ff fc22 	bl	7d6 <ndigits_in_hex>
     f92:	4602      	mov	r2, r0
     f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f96:	1a9b      	subs	r3, r3, r2
     f98:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     f9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     f9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
     fa0:	4619      	mov	r1, r3
     fa2:	68f8      	ldr	r0, [r7, #12]
     fa4:	f7ff fd44 	bl	a30 <padbuffer>
     fa8:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
     faa:	68fb      	ldr	r3, [r7, #12]
     fac:	2b00      	cmp	r3, #0
     fae:	d001      	beq.n	fb4 <am_util_stdio_vsprintf+0x33c>
     fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fb2:	e000      	b.n	fb6 <am_util_stdio_vsprintf+0x33e>
     fb4:	2300      	movs	r3, #0
     fb6:	68fa      	ldr	r2, [r7, #12]
     fb8:	4413      	add	r3, r2
     fba:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
     fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     fc0:	4413      	add	r3, r2
     fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
     fc4:	2300      	movs	r3, #0
     fc6:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
     fc8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
     fcc:	68fa      	ldr	r2, [r7, #12]
     fce:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     fd2:	f7ff fcb2 	bl	93a <uint64_to_hexstr>
     fd6:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
     fd8:	68fb      	ldr	r3, [r7, #12]
     fda:	2b00      	cmp	r3, #0
     fdc:	d003      	beq.n	fe6 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
     fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     fe0:	68fa      	ldr	r2, [r7, #12]
     fe2:	4413      	add	r3, r2
     fe4:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
     fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     fe8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     fea:	4413      	add	r3, r2
     fec:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     fee:	e12f      	b.n	1250 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     ff0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     ff4:	2b00      	cmp	r3, #0
     ff6:	d008      	beq.n	100a <am_util_stdio_vsprintf+0x392>
     ff8:	687b      	ldr	r3, [r7, #4]
     ffa:	3307      	adds	r3, #7
     ffc:	f023 0307 	bic.w	r3, r3, #7
    1000:	f103 0208 	add.w	r2, r3, #8
    1004:	607a      	str	r2, [r7, #4]
    1006:	cb18      	ldmia	r3, {r3, r4}
    1008:	e005      	b.n	1016 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    100a:	687b      	ldr	r3, [r7, #4]
    100c:	1d1a      	adds	r2, r3, #4
    100e:	607a      	str	r2, [r7, #4]
    1010:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1012:	f04f 0400 	mov.w	r4, #0
    1016:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    101a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    101c:	2b00      	cmp	r3, #0
    101e:	d01e      	beq.n	105e <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    1020:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1024:	f7ff fb99 	bl	75a <ndigits_in_u64>
    1028:	4602      	mov	r2, r0
    102a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    102c:	1a9b      	subs	r3, r3, r2
    102e:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1030:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1034:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1036:	4619      	mov	r1, r3
    1038:	68f8      	ldr	r0, [r7, #12]
    103a:	f7ff fcf9 	bl	a30 <padbuffer>
    103e:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1040:	68fb      	ldr	r3, [r7, #12]
    1042:	2b00      	cmp	r3, #0
    1044:	d001      	beq.n	104a <am_util_stdio_vsprintf+0x3d2>
    1046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1048:	e000      	b.n	104c <am_util_stdio_vsprintf+0x3d4>
    104a:	2300      	movs	r3, #0
    104c:	68fa      	ldr	r2, [r7, #12]
    104e:	4413      	add	r3, r2
    1050:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1054:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1056:	4413      	add	r3, r2
    1058:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    105a:	2300      	movs	r3, #0
    105c:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    105e:	68fa      	ldr	r2, [r7, #12]
    1060:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1064:	f7ff fc21 	bl	8aa <uint64_to_str>
    1068:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    106a:	68fb      	ldr	r3, [r7, #12]
    106c:	2b00      	cmp	r3, #0
    106e:	d003      	beq.n	1078 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    1070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1072:	68fa      	ldr	r2, [r7, #12]
    1074:	4413      	add	r3, r2
    1076:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    107a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    107c:	4413      	add	r3, r2
    107e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1080:	e0e6      	b.n	1250 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1082:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1086:	2b00      	cmp	r3, #0
    1088:	d008      	beq.n	109c <am_util_stdio_vsprintf+0x424>
    108a:	687b      	ldr	r3, [r7, #4]
    108c:	3307      	adds	r3, #7
    108e:	f023 0307 	bic.w	r3, r3, #7
    1092:	f103 0208 	add.w	r2, r3, #8
    1096:	607a      	str	r2, [r7, #4]
    1098:	cb18      	ldmia	r3, {r3, r4}
    109a:	e005      	b.n	10a8 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    109c:	687b      	ldr	r3, [r7, #4]
    109e:	1d1a      	adds	r2, r3, #4
    10a0:	607a      	str	r2, [r7, #4]
    10a2:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    10a4:	ea4f 74e3 	mov.w	r4, r3, asr #31
    10a8:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    10ac:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    10b0:	2b00      	cmp	r3, #0
    10b2:	f174 0300 	sbcs.w	r3, r4, #0
    10b6:	da0a      	bge.n	10ce <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    10b8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    10bc:	425b      	negs	r3, r3
    10be:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    10c2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    10c6:	2301      	movs	r3, #1
    10c8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    10cc:	e006      	b.n	10dc <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    10ce:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    10d2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    10d6:	2300      	movs	r3, #0
    10d8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    10dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10de:	2b00      	cmp	r3, #0
    10e0:	d04a      	beq.n	1178 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    10e2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    10e6:	4618      	mov	r0, r3
    10e8:	4621      	mov	r1, r4
    10ea:	f7ff fb57 	bl	79c <ndigits_in_i64>
    10ee:	4602      	mov	r2, r0
    10f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10f2:	1a9b      	subs	r3, r3, r2
    10f4:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    10f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    10fa:	2b00      	cmp	r3, #0
    10fc:	d011      	beq.n	1122 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    10fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1100:	3b01      	subs	r3, #1
    1102:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    1104:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1108:	2b30      	cmp	r3, #48	; 0x30
    110a:	d10a      	bne.n	1122 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    110c:	68fb      	ldr	r3, [r7, #12]
    110e:	2b00      	cmp	r3, #0
    1110:	d004      	beq.n	111c <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    1112:	68fb      	ldr	r3, [r7, #12]
    1114:	1c5a      	adds	r2, r3, #1
    1116:	60fa      	str	r2, [r7, #12]
    1118:	222d      	movs	r2, #45	; 0x2d
    111a:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    111c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    111e:	3301      	adds	r3, #1
    1120:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1122:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1126:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1128:	4619      	mov	r1, r3
    112a:	68f8      	ldr	r0, [r7, #12]
    112c:	f7ff fc80 	bl	a30 <padbuffer>
    1130:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1132:	68fb      	ldr	r3, [r7, #12]
    1134:	2b00      	cmp	r3, #0
    1136:	d001      	beq.n	113c <am_util_stdio_vsprintf+0x4c4>
    1138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    113a:	e000      	b.n	113e <am_util_stdio_vsprintf+0x4c6>
    113c:	2300      	movs	r3, #0
    113e:	68fa      	ldr	r2, [r7, #12]
    1140:	4413      	add	r3, r2
    1142:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1146:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1148:	4413      	add	r3, r2
    114a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    114c:	2300      	movs	r3, #0
    114e:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    1150:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1154:	2b00      	cmp	r3, #0
    1156:	d01e      	beq.n	1196 <am_util_stdio_vsprintf+0x51e>
    1158:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    115c:	2b20      	cmp	r3, #32
    115e:	d11a      	bne.n	1196 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    1160:	68fb      	ldr	r3, [r7, #12]
    1162:	2b00      	cmp	r3, #0
    1164:	d004      	beq.n	1170 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    1166:	68fb      	ldr	r3, [r7, #12]
    1168:	1c5a      	adds	r2, r3, #1
    116a:	60fa      	str	r2, [r7, #12]
    116c:	222d      	movs	r2, #45	; 0x2d
    116e:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    1170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1172:	3301      	adds	r3, #1
    1174:	63fb      	str	r3, [r7, #60]	; 0x3c
    1176:	e00e      	b.n	1196 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    1178:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    117c:	2b00      	cmp	r3, #0
    117e:	d00a      	beq.n	1196 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    1180:	68fb      	ldr	r3, [r7, #12]
    1182:	2b00      	cmp	r3, #0
    1184:	d004      	beq.n	1190 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    1186:	68fb      	ldr	r3, [r7, #12]
    1188:	1c5a      	adds	r2, r3, #1
    118a:	60fa      	str	r2, [r7, #12]
    118c:	222d      	movs	r2, #45	; 0x2d
    118e:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    1190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1192:	3301      	adds	r3, #1
    1194:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1196:	68fa      	ldr	r2, [r7, #12]
    1198:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    119c:	f7ff fb85 	bl	8aa <uint64_to_str>
    11a0:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    11a2:	68fb      	ldr	r3, [r7, #12]
    11a4:	2b00      	cmp	r3, #0
    11a6:	d003      	beq.n	11b0 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    11a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11aa:	68fa      	ldr	r2, [r7, #12]
    11ac:	4413      	add	r3, r2
    11ae:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    11b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    11b4:	4413      	add	r3, r2
    11b6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    11b8:	e04a      	b.n	1250 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    11ba:	68fb      	ldr	r3, [r7, #12]
    11bc:	2b00      	cmp	r3, #0
    11be:	d046      	beq.n	124e <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    11c0:	687b      	ldr	r3, [r7, #4]
    11c2:	3307      	adds	r3, #7
    11c4:	f023 0307 	bic.w	r3, r3, #7
    11c8:	f103 0208 	add.w	r2, r3, #8
    11cc:	607a      	str	r2, [r7, #4]
    11ce:	cb18      	ldmia	r3, {r3, r4}
    11d0:	4618      	mov	r0, r3
    11d2:	4621      	mov	r1, r4
    11d4:	f7fe ff54 	bl	80 <__aeabi_d2f>
    11d8:	4603      	mov	r3, r0
    11da:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    11dc:	68fb      	ldr	r3, [r7, #12]
    11de:	2214      	movs	r2, #20
    11e0:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    11e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    11e4:	68f9      	ldr	r1, [r7, #12]
    11e6:	6978      	ldr	r0, [r7, #20]
    11e8:	f7ff fc48 	bl	a7c <ftoa>
    11ec:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    11ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11f0:	2b00      	cmp	r3, #0
    11f2:	da14      	bge.n	121e <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    11f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11f6:	f1b3 3fff 	cmp.w	r3, #4294967295
    11fa:	d102      	bne.n	1202 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    11fc:	4b1e      	ldr	r3, [pc, #120]	; (1278 <am_util_stdio_vsprintf+0x600>)
    11fe:	62bb      	str	r3, [r7, #40]	; 0x28
    1200:	e008      	b.n	1214 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    1202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1204:	f113 0f02 	cmn.w	r3, #2
    1208:	d102      	bne.n	1210 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    120a:	4b1c      	ldr	r3, [pc, #112]	; (127c <am_util_stdio_vsprintf+0x604>)
    120c:	62bb      	str	r3, [r7, #40]	; 0x28
    120e:	e001      	b.n	1214 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    1210:	4b1b      	ldr	r3, [pc, #108]	; (1280 <am_util_stdio_vsprintf+0x608>)
    1212:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    1214:	68fb      	ldr	r3, [r7, #12]
    1216:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1218:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    121a:	2303      	movs	r3, #3
    121c:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    121e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1220:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1222:	4413      	add	r3, r2
    1224:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    1226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1228:	68fa      	ldr	r2, [r7, #12]
    122a:	4413      	add	r3, r2
    122c:	60fb      	str	r3, [r7, #12]
                }
                break;
    122e:	e00e      	b.n	124e <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    1230:	68fb      	ldr	r3, [r7, #12]
    1232:	2b00      	cmp	r3, #0
    1234:	d005      	beq.n	1242 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    1236:	68fb      	ldr	r3, [r7, #12]
    1238:	1c5a      	adds	r2, r3, #1
    123a:	60fa      	str	r2, [r7, #12]
    123c:	68ba      	ldr	r2, [r7, #8]
    123e:	7812      	ldrb	r2, [r2, #0]
    1240:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    1242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1244:	3301      	adds	r3, #1
    1246:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1248:	e002      	b.n	1250 <am_util_stdio_vsprintf+0x5d8>
                break;
    124a:	bf00      	nop
    124c:	e000      	b.n	1250 <am_util_stdio_vsprintf+0x5d8>
                break;
    124e:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    1250:	68bb      	ldr	r3, [r7, #8]
    1252:	3301      	adds	r3, #1
    1254:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    1256:	68bb      	ldr	r3, [r7, #8]
    1258:	781b      	ldrb	r3, [r3, #0]
    125a:	2b00      	cmp	r3, #0
    125c:	f47f ad17 	bne.w	c8e <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    1260:	68fb      	ldr	r3, [r7, #12]
    1262:	2b00      	cmp	r3, #0
    1264:	d002      	beq.n	126c <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    1266:	68fb      	ldr	r3, [r7, #12]
    1268:	2200      	movs	r2, #0
    126a:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    126c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    126e:	4618      	mov	r0, r3
    1270:	3754      	adds	r7, #84	; 0x54
    1272:	46bd      	mov	sp, r7
    1274:	bd90      	pop	{r4, r7, pc}
    1276:	bf00      	nop
    1278:	00302e30 	.word	0x00302e30
    127c:	00232e23 	.word	0x00232e23
    1280:	003f2e3f 	.word	0x003f2e3f

00001284 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    1284:	b40f      	push	{r0, r1, r2, r3}
    1286:	b580      	push	{r7, lr}
    1288:	b082      	sub	sp, #8
    128a:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    128c:	f107 0314 	add.w	r3, r7, #20
    1290:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    1292:	683a      	ldr	r2, [r7, #0]
    1294:	6939      	ldr	r1, [r7, #16]
    1296:	4808      	ldr	r0, [pc, #32]	; (12b8 <am_util_stdio_printf+0x34>)
    1298:	f7ff fcee 	bl	c78 <am_util_stdio_vsprintf>
    129c:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    129e:	4b07      	ldr	r3, [pc, #28]	; (12bc <am_util_stdio_printf+0x38>)
    12a0:	681b      	ldr	r3, [r3, #0]
    12a2:	4805      	ldr	r0, [pc, #20]	; (12b8 <am_util_stdio_printf+0x34>)
    12a4:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    12a6:	687b      	ldr	r3, [r7, #4]
}
    12a8:	4618      	mov	r0, r3
    12aa:	3708      	adds	r7, #8
    12ac:	46bd      	mov	sp, r7
    12ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    12b2:	b004      	add	sp, #16
    12b4:	4770      	bx	lr
    12b6:	bf00      	nop
    12b8:	10001060 	.word	0x10001060
    12bc:	10001194 	.word	0x10001194

000012c0 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    12c0:	b580      	push	{r7, lr}
    12c2:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    12c4:	4802      	ldr	r0, [pc, #8]	; (12d0 <am_util_stdio_terminal_clear+0x10>)
    12c6:	f7ff ffdd 	bl	1284 <am_util_stdio_printf>
}
    12ca:	bf00      	nop
    12cc:	bd80      	pop	{r7, pc}
    12ce:	bf00      	nop
    12d0:	00001cf8 	.word	0x00001cf8

000012d4 <am_util_string_strnicmp>:
//!  if str1>str2.
//
//*****************************************************************************
int32_t
am_util_string_strnicmp(const char *str1, const char *str2, int num)
{
    12d4:	b480      	push	{r7}
    12d6:	b087      	sub	sp, #28
    12d8:	af00      	add	r7, sp, #0
    12da:	60f8      	str	r0, [r7, #12]
    12dc:	60b9      	str	r1, [r7, #8]
    12de:	607a      	str	r2, [r7, #4]
    uint8_t cChar1, cChar2;

    while ( *str1 && *str2 && num )
    12e0:	e034      	b.n	134c <am_util_string_strnicmp+0x78>
    {
        cChar1 = *str1;
    12e2:	68fb      	ldr	r3, [r7, #12]
    12e4:	781b      	ldrb	r3, [r3, #0]
    12e6:	75fb      	strb	r3, [r7, #23]
        cChar2 = *str2;
    12e8:	68bb      	ldr	r3, [r7, #8]
    12ea:	781b      	ldrb	r3, [r3, #0]
    12ec:	75bb      	strb	r3, [r7, #22]

        cChar1 |= ( am_cattr[cChar1] & AM_CATTR_UPPER ) ? 0x20 : 0x00;
    12ee:	7dfb      	ldrb	r3, [r7, #23]
    12f0:	4a1f      	ldr	r2, [pc, #124]	; (1370 <am_util_string_strnicmp+0x9c>)
    12f2:	5cd3      	ldrb	r3, [r2, r3]
    12f4:	f003 0304 	and.w	r3, r3, #4
    12f8:	2b00      	cmp	r3, #0
    12fa:	d001      	beq.n	1300 <am_util_string_strnicmp+0x2c>
    12fc:	2220      	movs	r2, #32
    12fe:	e000      	b.n	1302 <am_util_string_strnicmp+0x2e>
    1300:	2200      	movs	r2, #0
    1302:	f997 3017 	ldrsb.w	r3, [r7, #23]
    1306:	4313      	orrs	r3, r2
    1308:	b25b      	sxtb	r3, r3
    130a:	75fb      	strb	r3, [r7, #23]
        cChar2 |= ( am_cattr[cChar2] & AM_CATTR_UPPER ) ? 0x20 : 0x00;
    130c:	7dbb      	ldrb	r3, [r7, #22]
    130e:	4a18      	ldr	r2, [pc, #96]	; (1370 <am_util_string_strnicmp+0x9c>)
    1310:	5cd3      	ldrb	r3, [r2, r3]
    1312:	f003 0304 	and.w	r3, r3, #4
    1316:	2b00      	cmp	r3, #0
    1318:	d001      	beq.n	131e <am_util_string_strnicmp+0x4a>
    131a:	2220      	movs	r2, #32
    131c:	e000      	b.n	1320 <am_util_string_strnicmp+0x4c>
    131e:	2200      	movs	r2, #0
    1320:	f997 3016 	ldrsb.w	r3, [r7, #22]
    1324:	4313      	orrs	r3, r2
    1326:	b25b      	sxtb	r3, r3
    1328:	75bb      	strb	r3, [r7, #22]

        if ( cChar1 != cChar2 )
    132a:	7dfa      	ldrb	r2, [r7, #23]
    132c:	7dbb      	ldrb	r3, [r7, #22]
    132e:	429a      	cmp	r2, r3
    1330:	d003      	beq.n	133a <am_util_string_strnicmp+0x66>
        {
            return cChar1 - cChar2;
    1332:	7dfa      	ldrb	r2, [r7, #23]
    1334:	7dbb      	ldrb	r3, [r7, #22]
    1336:	1ad3      	subs	r3, r2, r3
    1338:	e014      	b.n	1364 <am_util_string_strnicmp+0x90>
        }

        str1++;
    133a:	68fb      	ldr	r3, [r7, #12]
    133c:	3301      	adds	r3, #1
    133e:	60fb      	str	r3, [r7, #12]
        str2++;
    1340:	68bb      	ldr	r3, [r7, #8]
    1342:	3301      	adds	r3, #1
    1344:	60bb      	str	r3, [r7, #8]
        num--;
    1346:	687b      	ldr	r3, [r7, #4]
    1348:	3b01      	subs	r3, #1
    134a:	607b      	str	r3, [r7, #4]
    while ( *str1 && *str2 && num )
    134c:	68fb      	ldr	r3, [r7, #12]
    134e:	781b      	ldrb	r3, [r3, #0]
    1350:	2b00      	cmp	r3, #0
    1352:	d006      	beq.n	1362 <am_util_string_strnicmp+0x8e>
    1354:	68bb      	ldr	r3, [r7, #8]
    1356:	781b      	ldrb	r3, [r3, #0]
    1358:	2b00      	cmp	r3, #0
    135a:	d002      	beq.n	1362 <am_util_string_strnicmp+0x8e>
    135c:	687b      	ldr	r3, [r7, #4]
    135e:	2b00      	cmp	r3, #0
    1360:	d1bf      	bne.n	12e2 <am_util_string_strnicmp+0xe>
    }

    //
    // Since we made it here, the strings must be equal to n characters.
    //
    return 0;
    1362:	2300      	movs	r3, #0
}
    1364:	4618      	mov	r0, r3
    1366:	371c      	adds	r7, #28
    1368:	46bd      	mov	sp, r7
    136a:	f85d 7b04 	ldr.w	r7, [sp], #4
    136e:	4770      	bx	lr
    1370:	00001d0c 	.word	0x00001d0c

00001374 <am_util_time_computeDayofWeek>:
//! 7   indicates that the given date is invalid (e.g. 2/29/2015).
//
//*****************************************************************************
int
am_util_time_computeDayofWeek(int iYear, int iMonth, int iDay)
{
    1374:	b480      	push	{r7}
    1376:	b087      	sub	sp, #28
    1378:	af00      	add	r7, sp, #0
    137a:	60f8      	str	r0, [r7, #12]
    137c:	60b9      	str	r1, [r7, #8]
    137e:	607a      	str	r2, [r7, #4]
    //

    //
    // Validate inputs.  Return 7 if any are out-of-bounds.
    //
    if ( (iMonth < 1) || (iMonth > 12) || (iYear < 2000) || (iYear >= 2400) || (iDay < 1) )
    1380:	68bb      	ldr	r3, [r7, #8]
    1382:	2b00      	cmp	r3, #0
    1384:	dd0d      	ble.n	13a2 <am_util_time_computeDayofWeek+0x2e>
    1386:	68bb      	ldr	r3, [r7, #8]
    1388:	2b0c      	cmp	r3, #12
    138a:	dc0a      	bgt.n	13a2 <am_util_time_computeDayofWeek+0x2e>
    138c:	68fb      	ldr	r3, [r7, #12]
    138e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    1392:	db06      	blt.n	13a2 <am_util_time_computeDayofWeek+0x2e>
    1394:	68fb      	ldr	r3, [r7, #12]
    1396:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    139a:	da02      	bge.n	13a2 <am_util_time_computeDayofWeek+0x2e>
    139c:	687b      	ldr	r3, [r7, #4]
    139e:	2b00      	cmp	r3, #0
    13a0:	dc01      	bgt.n	13a6 <am_util_time_computeDayofWeek+0x32>
    {
        return 7;
    13a2:	2107      	movs	r1, #7
    13a4:	e078      	b.n	1498 <am_util_time_computeDayofWeek+0x124>
    }

    if ( (iMonth == 2) && (iDay > 28) )
    13a6:	68bb      	ldr	r3, [r7, #8]
    13a8:	2b02      	cmp	r3, #2
    13aa:	d10c      	bne.n	13c6 <am_util_time_computeDayofWeek+0x52>
    13ac:	687b      	ldr	r3, [r7, #4]
    13ae:	2b1c      	cmp	r3, #28
    13b0:	dd09      	ble.n	13c6 <am_util_time_computeDayofWeek+0x52>
    {
        if ( (iDay > 29) || (iYear % 4) )
    13b2:	687b      	ldr	r3, [r7, #4]
    13b4:	2b1d      	cmp	r3, #29
    13b6:	dc04      	bgt.n	13c2 <am_util_time_computeDayofWeek+0x4e>
    13b8:	68fb      	ldr	r3, [r7, #12]
    13ba:	f003 0303 	and.w	r3, r3, #3
    13be:	2b00      	cmp	r3, #0
    13c0:	d001      	beq.n	13c6 <am_util_time_computeDayofWeek+0x52>
        {
            return 7;
    13c2:	2107      	movs	r1, #7
    13c4:	e068      	b.n	1498 <am_util_time_computeDayofWeek+0x124>
    }

    //
    // 0-base the month and date.
    //
    iMonth--;
    13c6:	68bb      	ldr	r3, [r7, #8]
    13c8:	3b01      	subs	r3, #1
    13ca:	60bb      	str	r3, [r7, #8]
    iDay--;
    13cc:	687b      	ldr	r3, [r7, #4]
    13ce:	3b01      	subs	r3, #1
    13d0:	607b      	str	r3, [r7, #4]

    //
    // First we'll count the number of days up to the the specified
    // month and date in the specified year.
    //
    iDayCnt = iDay;
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	617b      	str	r3, [r7, #20]
    iCnt = 0;
    13d6:	2300      	movs	r3, #0
    13d8:	613b      	str	r3, [r7, #16]
    while ( iCnt < iMonth )
    13da:	e034      	b.n	1446 <am_util_time_computeDayofWeek+0xd2>
    {
        switch ( iCnt )
    13dc:	693b      	ldr	r3, [r7, #16]
    13de:	2b0b      	cmp	r3, #11
    13e0:	d82e      	bhi.n	1440 <am_util_time_computeDayofWeek+0xcc>
    13e2:	a201      	add	r2, pc, #4	; (adr r2, 13e8 <am_util_time_computeDayofWeek+0x74>)
    13e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    13e8:	00001421 	.word	0x00001421
    13ec:	00001429 	.word	0x00001429
    13f0:	00001421 	.word	0x00001421
    13f4:	00001419 	.word	0x00001419
    13f8:	00001421 	.word	0x00001421
    13fc:	00001419 	.word	0x00001419
    1400:	00001421 	.word	0x00001421
    1404:	00001421 	.word	0x00001421
    1408:	00001419 	.word	0x00001419
    140c:	00001421 	.word	0x00001421
    1410:	00001419 	.word	0x00001419
    1414:	00001421 	.word	0x00001421
        {
            case 3:
            case 5:
            case 8:
            case 10:
                iDayCnt += 30;
    1418:	697b      	ldr	r3, [r7, #20]
    141a:	331e      	adds	r3, #30
    141c:	617b      	str	r3, [r7, #20]
                break;
    141e:	e00f      	b.n	1440 <am_util_time_computeDayofWeek+0xcc>
            case 4:
            case 6:
            case 7:
            case 9:
            case 11:
                iDayCnt += 31;
    1420:	697b      	ldr	r3, [r7, #20]
    1422:	331f      	adds	r3, #31
    1424:	617b      	str	r3, [r7, #20]
                break;
    1426:	e00b      	b.n	1440 <am_util_time_computeDayofWeek+0xcc>
            case 1:
                iDayCnt += (iYear % 4) ? 28 : 29;
    1428:	68fb      	ldr	r3, [r7, #12]
    142a:	f003 0303 	and.w	r3, r3, #3
    142e:	2b00      	cmp	r3, #0
    1430:	d001      	beq.n	1436 <am_util_time_computeDayofWeek+0xc2>
    1432:	231c      	movs	r3, #28
    1434:	e000      	b.n	1438 <am_util_time_computeDayofWeek+0xc4>
    1436:	231d      	movs	r3, #29
    1438:	697a      	ldr	r2, [r7, #20]
    143a:	4413      	add	r3, r2
    143c:	617b      	str	r3, [r7, #20]
                break;
    143e:	bf00      	nop
        }
        iCnt++;
    1440:	693b      	ldr	r3, [r7, #16]
    1442:	3301      	adds	r3, #1
    1444:	613b      	str	r3, [r7, #16]
    while ( iCnt < iMonth )
    1446:	693a      	ldr	r2, [r7, #16]
    1448:	68bb      	ldr	r3, [r7, #8]
    144a:	429a      	cmp	r2, r3
    144c:	dbc6      	blt.n	13dc <am_util_time_computeDayofWeek+0x68>

    //
    // Now, add in the number of days in the intervening years between
    // 2000 and the specified year.
    //
    iCnt = 2000;
    144e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    1452:	613b      	str	r3, [r7, #16]
    while ( iCnt < iYear )
    1454:	e00f      	b.n	1476 <am_util_time_computeDayofWeek+0x102>
    {
        iDayCnt += (iCnt % 4) ? 365 : 366;
    1456:	693b      	ldr	r3, [r7, #16]
    1458:	f003 0303 	and.w	r3, r3, #3
    145c:	2b00      	cmp	r3, #0
    145e:	d002      	beq.n	1466 <am_util_time_computeDayofWeek+0xf2>
    1460:	f240 136d 	movw	r3, #365	; 0x16d
    1464:	e001      	b.n	146a <am_util_time_computeDayofWeek+0xf6>
    1466:	f44f 73b7 	mov.w	r3, #366	; 0x16e
    146a:	697a      	ldr	r2, [r7, #20]
    146c:	4413      	add	r3, r2
    146e:	617b      	str	r3, [r7, #20]
        iCnt++;
    1470:	693b      	ldr	r3, [r7, #16]
    1472:	3301      	adds	r3, #1
    1474:	613b      	str	r3, [r7, #16]
    while ( iCnt < iYear )
    1476:	693a      	ldr	r2, [r7, #16]
    1478:	68fb      	ldr	r3, [r7, #12]
    147a:	429a      	cmp	r2, r3
    147c:	dbeb      	blt.n	1456 <am_util_time_computeDayofWeek+0xe2>

    //
    // Offset the day count with the base day of the week.
    // For Saturday, this is 6.
    //
    return (iDayCnt + 6) % 7;
    147e:	697b      	ldr	r3, [r7, #20]
    1480:	1d9a      	adds	r2, r3, #6
    1482:	4b09      	ldr	r3, [pc, #36]	; (14a8 <am_util_time_computeDayofWeek+0x134>)
    1484:	fb83 1302 	smull	r1, r3, r3, r2
    1488:	4413      	add	r3, r2
    148a:	1099      	asrs	r1, r3, #2
    148c:	17d3      	asrs	r3, r2, #31
    148e:	1ac9      	subs	r1, r1, r3
    1490:	460b      	mov	r3, r1
    1492:	00db      	lsls	r3, r3, #3
    1494:	1a5b      	subs	r3, r3, r1
    1496:	1ad1      	subs	r1, r2, r3
    1498:	460b      	mov	r3, r1
}
    149a:	4618      	mov	r0, r3
    149c:	371c      	adds	r7, #28
    149e:	46bd      	mov	sp, r7
    14a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    14a4:	4770      	bx	lr
    14a6:	bf00      	nop
    14a8:	92492493 	.word	0x92492493

000014ac <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    14ac:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_mcuctrl_bucks_enable();
    14ae:	f000 f9cb 	bl	1848 <am_hal_mcuctrl_bucks_enable>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    14b2:	f000 fb6b 	bl	1b8c <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    14b6:	2001      	movs	r0, #1
    14b8:	f000 f9dc 	bl	1874 <am_hal_rtc_osc_select>

    //
    // Stop the XTAL.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    14bc:	2001      	movs	r0, #1
    14be:	f000 f883 	bl	15c8 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    14c2:	f000 f9ed 	bl	18a0 <am_hal_rtc_osc_disable>

    //
    // Disable the bandgap.
    //
    am_hal_mcuctrl_bandgap_disable();
}
    14c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_mcuctrl_bandgap_disable();
    14ca:	f000 b9b5 	b.w	1838 <am_hal_mcuctrl_bandgap_disable>
    14ce:	bf00      	nop

000014d0 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    14d0:	b510      	push	{r4, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    14d2:	4b10      	ldr	r3, [pc, #64]	; (1514 <am_bsp_debug_printf_enable+0x44>)
    14d4:	681c      	ldr	r4, [r3, #0]
    14d6:	f014 0401 	ands.w	r4, r4, #1
{
    14da:	b086      	sub	sp, #24
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    14dc:	d001      	beq.n	14e2 <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    14de:	b006      	add	sp, #24
    14e0:	bd10      	pop	{r4, pc}
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    14e2:	a806      	add	r0, sp, #24
    14e4:	490c      	ldr	r1, [pc, #48]	; (1518 <am_bsp_debug_printf_enable+0x48>)
    14e6:	f840 1d14 	str.w	r1, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    14ea:	f000 faed 	bl	1ac8 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    14ee:	4a0b      	ldr	r2, [pc, #44]	; (151c <am_bsp_debug_printf_enable+0x4c>)
    14f0:	480b      	ldr	r0, [pc, #44]	; (1520 <am_bsp_debug_printf_enable+0x50>)
    14f2:	490c      	ldr	r1, [pc, #48]	; (1524 <am_bsp_debug_printf_enable+0x54>)
    14f4:	2373      	movs	r3, #115	; 0x73
    14f6:	6013      	str	r3, [r2, #0]
    14f8:	6803      	ldr	r3, [r0, #0]
    14fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    14fe:	6003      	str	r3, [r0, #0]
    1500:	6808      	ldr	r0, [r1, #0]
    1502:	f420 4c7f 	bic.w	ip, r0, #65280	; 0xff00
    1506:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    150a:	600b      	str	r3, [r1, #0]
    150c:	6014      	str	r4, [r2, #0]
}
    150e:	b006      	add	sp, #24
    1510:	bd10      	pop	{r4, pc}
    1512:	bf00      	nop
    1514:	10001164 	.word	0x10001164
    1518:	000f4240 	.word	0x000f4240
    151c:	40010060 	.word	0x40010060
    1520:	40010054 	.word	0x40010054
    1524:	40010028 	.word	0x40010028

00001528 <am_bsp_debug_printf_disable>:
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    1528:	4b0f      	ldr	r3, [pc, #60]	; (1568 <am_bsp_debug_printf_disable+0x40>)
{
    152a:	b510      	push	{r4, lr}
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    152c:	681c      	ldr	r4, [r3, #0]
    152e:	f014 0401 	ands.w	r4, r4, #1
    1532:	d000      	beq.n	1536 <am_bsp_debug_printf_disable+0xe>
    1534:	bd10      	pop	{r4, pc}
    {
        return;
    }
    am_hal_itm_not_busy();
    1536:	f000 f92b 	bl	1790 <am_hal_itm_not_busy>
    am_hal_gpio_pin_config(AM_BSP_GPIO_ITM_SWO, AM_HAL_GPIO_OUTPUT);
    153a:	4a0c      	ldr	r2, [pc, #48]	; (156c <am_bsp_debug_printf_disable+0x44>)
    153c:	480c      	ldr	r0, [pc, #48]	; (1570 <am_bsp_debug_printf_disable+0x48>)
    153e:	490d      	ldr	r1, [pc, #52]	; (1574 <am_bsp_debug_printf_disable+0x4c>)
    1540:	2373      	movs	r3, #115	; 0x73
    1542:	6013      	str	r3, [r2, #0]
    1544:	6803      	ldr	r3, [r0, #0]
    1546:	f023 0c70 	bic.w	ip, r3, #112	; 0x70
    154a:	f04c 0320 	orr.w	r3, ip, #32
    154e:	6003      	str	r3, [r0, #0]
    1550:	6808      	ldr	r0, [r1, #0]
    1552:	f420 4c7f 	bic.w	ip, r0, #65280	; 0xff00
    1556:	f44c 53c0 	orr.w	r3, ip, #6144	; 0x1800
    155a:	600b      	str	r3, [r1, #0]
    155c:	6014      	str	r4, [r2, #0]
    am_hal_tpiu_disable();
}
    155e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_tpiu_disable();
    1562:	f000 bb0d 	b.w	1b80 <am_hal_tpiu_disable>
    1566:	bf00      	nop
    1568:	10001164 	.word	0x10001164
    156c:	40010060 	.word	0x40010060
    1570:	40010054 	.word	0x40010054
    1574:	40010028 	.word	0x40010028

00001578 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    1578:	f000 b920 	b.w	17bc <am_hal_itm_print>

0000157c <am_hal_clkgen_sysclk_select>:
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    157c:	4b05      	ldr	r3, [pc, #20]	; (1594 <am_hal_clkgen_sysclk_select+0x18>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    157e:	4906      	ldr	r1, [pc, #24]	; (1598 <am_hal_clkgen_sysclk_select+0x1c>)
{
    1580:	b410      	push	{r4}

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    1582:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1584:	2447      	movs	r4, #71	; 0x47
    1586:	601c      	str	r4, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1588:	6008      	str	r0, [r1, #0]
}
    158a:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(CLKGEN, CLKKEY) = 0;
    158e:	601a      	str	r2, [r3, #0]
}
    1590:	4770      	bx	lr
    1592:	bf00      	nop
    1594:	40004014 	.word	0x40004014
    1598:	40004018 	.word	0x40004018

0000159c <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_BFR(CLKGEN, CCTRL, CORESEL);
    159c:	4b03      	ldr	r3, [pc, #12]	; (15ac <am_hal_clkgen_sysclk_get+0x10>)
    159e:	4a04      	ldr	r2, [pc, #16]	; (15b0 <am_hal_clkgen_sysclk_get+0x14>)
    15a0:	6818      	ldr	r0, [r3, #0]
    15a2:	f000 0107 	and.w	r1, r0, #7
        case AM_HAL_CLKGEN_SYSCLK_3MHZ:
            return 3000000;
        default:
            return 0xFFFFFFFF;
    }
}
    15a6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    15aa:	4770      	bx	lr
    15ac:	40004018 	.word	0x40004018
    15b0:	00001e0c 	.word	0x00001e0c

000015b4 <am_hal_clkgen_osc_start>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_start(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    15b4:	0783      	lsls	r3, r0, #30
    15b6:	d004      	beq.n	15c2 <am_hal_clkgen_osc_start+0xe>
    {
        //
        // Start the oscillator(s).
        // Note that these bits are cleared in order to enable the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) &= ~ui32OscFlags;
    15b8:	4a02      	ldr	r2, [pc, #8]	; (15c4 <am_hal_clkgen_osc_start+0x10>)
    15ba:	6813      	ldr	r3, [r2, #0]
    15bc:	ea23 0000 	bic.w	r0, r3, r0
    15c0:	6010      	str	r0, [r2, #0]
    15c2:	4770      	bx	lr
    15c4:	4000400c 	.word	0x4000400c

000015c8 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    15c8:	0783      	lsls	r3, r0, #30
    15ca:	d003      	beq.n	15d4 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    15cc:	4b02      	ldr	r3, [pc, #8]	; (15d8 <am_hal_clkgen_osc_stop+0x10>)
    15ce:	681a      	ldr	r2, [r3, #0]
    15d0:	4310      	orrs	r0, r2
    15d2:	6018      	str	r0, [r3, #0]
    15d4:	4770      	bx	lr
    15d6:	bf00      	nop
    15d8:	4000400c 	.word	0x4000400c

000015dc <am_hal_ctimer_config>:
                     (psConfig->ui32TimerBConfig << 16));

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    15dc:	680b      	ldr	r3, [r1, #0]
    ui32ConfigVal = (psConfig->ui32TimerAConfig |
    15de:	684a      	ldr	r2, [r1, #4]
{
    15e0:	b410      	push	{r4}
                     (psConfig->ui32TimerBConfig << 16));
    15e2:	688c      	ldr	r4, [r1, #8]

    //
    // Find the correct register to write.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    15e4:	4907      	ldr	r1, [pc, #28]	; (1604 <am_hal_ctimer_config+0x28>)
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    15e6:	2b00      	cmp	r3, #0
    ui32ConfigVal = (psConfig->ui32TimerAConfig |
    15e8:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
                                  (ui32TimerNumber * TIMER_OFFSET));
    15ec:	ea4f 1000 	mov.w	r0, r0, lsl #4
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    15f0:	bf14      	ite	ne
    15f2:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
    15f6:	2300      	moveq	r3, #0
    15f8:	4323      	orrs	r3, r4

    //
    // Write our configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    15fa:	5043      	str	r3, [r0, r1]
}
    15fc:	f85d 4b04 	ldr.w	r4, [sp], #4
    1600:	4770      	bx	lr
    1602:	bf00      	nop
    1604:	4000800c 	.word	0x4000800c

00001608 <am_hal_ctimer_start>:

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    1608:	0100      	lsls	r0, r0, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    160a:	4a07      	ldr	r2, [pc, #28]	; (1628 <am_hal_ctimer_start+0x20>)

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    160c:	5883      	ldr	r3, [r0, r2]
{
    160e:	b410      	push	{r4}

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    1610:	f001 2408 	and.w	r4, r1, #134219776	; 0x8000800
    1614:	ea23 0304 	bic.w	r3, r3, r4
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    1618:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    161c:	4319      	orrs	r1, r3
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    161e:	5081      	str	r1, [r0, r2]
}
    1620:	f85d 4b04 	ldr.w	r4, [sp], #4
    1624:	4770      	bx	lr
    1626:	bf00      	nop
    1628:	4000800c 	.word	0x4000800c

0000162c <am_hal_ctimer_clear>:

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    162c:	0100      	lsls	r0, r0, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    162e:	4b03      	ldr	r3, [pc, #12]	; (163c <am_hal_ctimer_clear+0x10>)

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    1630:	58c2      	ldr	r2, [r0, r3]
    1632:	f001 2108 	and.w	r1, r1, #134219776	; 0x8000800
    1636:	4311      	orrs	r1, r2
    1638:	50c1      	str	r1, [r0, r3]
    163a:	4770      	bx	lr
    163c:	4000800c 	.word	0x4000800c

00001640 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    1640:	b5f0      	push	{r4, r5, r6, r7, lr}
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    1642:	0100      	lsls	r0, r0, #4
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1644:	4c19      	ldr	r4, [pc, #100]	; (16ac <am_hal_ctimer_period_set+0x6c>)
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1646:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    ui32Mode = *pui32ControlReg;
    164a:	5905      	ldr	r5, [r0, r4]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    164c:	d018      	beq.n	1680 <am_hal_ctimer_period_set+0x40>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    164e:	f405 76c0 	and.w	r6, r5, #384	; 0x180
    1652:	2e80      	cmp	r6, #128	; 0x80
    1654:	d019      	beq.n	168a <am_hal_ctimer_period_set+0x4a>
    1656:	2500      	movs	r5, #0
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    1658:	462c      	mov	r4, r5
    pui32CompareRegA = (uint32_t *)(AM_REG_CTIMERn(0) +
                                    AM_REG_CTIMER_CMPRA0_O +
                                    (ui32TimerNumber * TIMER_OFFSET));

    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
                                    AM_REG_CTIMER_CMPRB0_O +
    165a:	4e15      	ldr	r6, [pc, #84]	; (16b0 <am_hal_ctimer_period_set+0x70>)
                                    AM_REG_CTIMER_CMPRA0_O +
    165c:	4f15      	ldr	r7, [pc, #84]	; (16b4 <am_hal_ctimer_period_set+0x74>)

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    165e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1662:	4299      	cmp	r1, r3
                                    AM_REG_CTIMER_CMPRB0_O +
    1664:	eb00 0e06 	add.w	lr, r0, r6
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    1668:	d01c      	beq.n	16a4 <am_hal_ctimer_period_set+0x64>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    166a:	4b13      	ldr	r3, [pc, #76]	; (16b8 <am_hal_ctimer_period_set+0x78>)
    166c:	4299      	cmp	r1, r3
    166e:	d014      	beq.n	169a <am_hal_ctimer_period_set+0x5a>
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1670:	b291      	uxth	r1, r2
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1 >> 16));
    1672:	401c      	ands	r4, r3
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1674:	ea44 4212 	orr.w	r2, r4, r2, lsr #16
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1678:	430d      	orrs	r5, r1
    167a:	51c5      	str	r5, [r0, r7]
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    167c:	5182      	str	r2, [r0, r6]
    }
}
    167e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32Mode = ui32Mode >> 16;
    1680:	0c2f      	lsrs	r7, r5, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1682:	f407 75c0 	and.w	r5, r7, #384	; 0x180
    1686:	2d80      	cmp	r5, #128	; 0x80
    1688:	d103      	bne.n	1692 <am_hal_ctimer_period_set+0x52>
    168a:	0415      	lsls	r5, r2, #16
        ui32Comp1 = ui32Period;
    168c:	4614      	mov	r4, r2
        ui32Comp0 = ui32Period - ui32OnTime;
    168e:	1ad2      	subs	r2, r2, r3
        ui32Comp1 = ui32Period;
    1690:	e7e3      	b.n	165a <am_hal_ctimer_period_set+0x1a>
                                    AM_REG_CTIMER_CMPRB0_O +
    1692:	f8df e01c 	ldr.w	lr, [pc, #28]	; 16b0 <am_hal_ctimer_period_set+0x70>
    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
    1696:	2500      	movs	r5, #0
                                    AM_REG_CTIMER_CMPRB0_O +
    1698:	4486      	add	lr, r0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    169a:	b290      	uxth	r0, r2
    169c:	4305      	orrs	r5, r0
    169e:	f8ce 5000 	str.w	r5, [lr]
    16a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    16a4:	b294      	uxth	r4, r2
    16a6:	4325      	orrs	r5, r4
    16a8:	51c5      	str	r5, [r0, r7]
    16aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16ac:	4000800c 	.word	0x4000800c
    16b0:	40008008 	.word	0x40008008
    16b4:	40008004 	.word	0x40008004
    16b8:	ffff0000 	.word	0xffff0000

000016bc <am_hal_ctimer_int_enable>:
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    16bc:	4a02      	ldr	r2, [pc, #8]	; (16c8 <am_hal_ctimer_int_enable+0xc>)
    16be:	6813      	ldr	r3, [r2, #0]
    16c0:	4318      	orrs	r0, r3
    16c2:	6010      	str	r0, [r2, #0]
    16c4:	4770      	bx	lr
    16c6:	bf00      	nop
    16c8:	40008200 	.word	0x40008200

000016cc <am_hal_ctimer_int_clear>:
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTCLR) = ui32Interrupt;
    16cc:	4b01      	ldr	r3, [pc, #4]	; (16d4 <am_hal_ctimer_int_clear+0x8>)
    16ce:	6018      	str	r0, [r3, #0]
    16d0:	4770      	bx	lr
    16d2:	bf00      	nop
    16d4:	40008208 	.word	0x40008208

000016d8 <am_hal_flash_delay>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_flash_delay(uint32_t ui32Iterations)
{
    __asm("    subs    r0, #1\n"
    16d8:	3801      	subs	r0, #1
    16da:	f47f affd 	bne.w	16d8 <am_hal_flash_delay>
    16de:	4770      	bx	lr

000016e0 <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    16e0:	280f      	cmp	r0, #15
    16e2:	d80b      	bhi.n	16fc <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    16e4:	2805      	cmp	r0, #5
    16e6:	d013      	beq.n	1710 <am_hal_interrupt_enable+0x30>
    16e8:	2806      	cmp	r0, #6
    16ea:	d017      	beq.n	171c <am_hal_interrupt_enable+0x3c>
    16ec:	2804      	cmp	r0, #4
    16ee:	d104      	bne.n	16fa <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    16f0:	4a0d      	ldr	r2, [pc, #52]	; (1728 <am_hal_interrupt_enable+0x48>)
    16f2:	6813      	ldr	r3, [r2, #0]
    16f4:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    16f8:	6010      	str	r0, [r2, #0]
    16fa:	4770      	bx	lr
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    16fc:	f1a0 0310 	sub.w	r3, r0, #16
    1700:	f003 0c1f 	and.w	ip, r3, #31
    1704:	2001      	movs	r0, #1
    1706:	4909      	ldr	r1, [pc, #36]	; (172c <am_hal_interrupt_enable+0x4c>)
    1708:	fa00 f20c 	lsl.w	r2, r0, ip
    170c:	600a      	str	r2, [r1, #0]
    170e:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    1710:	4805      	ldr	r0, [pc, #20]	; (1728 <am_hal_interrupt_enable+0x48>)
    1712:	6801      	ldr	r1, [r0, #0]
    1714:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    1718:	6002      	str	r2, [r0, #0]
            break;
    171a:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    171c:	4902      	ldr	r1, [pc, #8]	; (1728 <am_hal_interrupt_enable+0x48>)
    171e:	680a      	ldr	r2, [r1, #0]
    1720:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    1724:	600b      	str	r3, [r1, #0]
            break;
    1726:	4770      	bx	lr
    1728:	e000ed24 	.word	0xe000ed24
    172c:	e000e100 	.word	0xe000e100

00001730 <am_hal_interrupt_master_enable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1730:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    1734:	b662      	cpsie	i
    __asm("    bx lr");
    1736:	4770      	bx	lr

00001738 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    1738:	4b0d      	ldr	r3, [pc, #52]	; (1770 <am_hal_itm_enable+0x38>)
    173a:	6818      	ldr	r0, [r3, #0]
    173c:	07c2      	lsls	r2, r0, #31
    173e:	d416      	bmi.n	176e <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    1740:	4a0c      	ldr	r2, [pc, #48]	; (1774 <am_hal_itm_enable+0x3c>)
    1742:	6811      	ldr	r1, [r2, #0]
{
    1744:	b430      	push	{r4, r5}
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    1746:	f041 7480 	orr.w	r4, r1, #16777216	; 0x1000000
    174a:	6014      	str	r4, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    174c:	6815      	ldr	r5, [r2, #0]
    174e:	01eb      	lsls	r3, r5, #7
    1750:	d5fc      	bpl.n	174c <am_hal_itm_enable+0x14>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    1752:	4809      	ldr	r0, [pc, #36]	; (1778 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    1754:	4c09      	ldr	r4, [pc, #36]	; (177c <am_hal_itm_enable+0x44>)
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    1756:	4d0a      	ldr	r5, [pc, #40]	; (1780 <am_hal_itm_enable+0x48>)
    1758:	6005      	str	r5, [r0, #0]
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    175a:	250f      	movs	r5, #15
    175c:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    175e:	bc30      	pop	{r4, r5}
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1760:	4908      	ldr	r1, [pc, #32]	; (1784 <am_hal_itm_enable+0x4c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    1762:	4b09      	ldr	r3, [pc, #36]	; (1788 <am_hal_itm_enable+0x50>)
    1764:	4a09      	ldr	r2, [pc, #36]	; (178c <am_hal_itm_enable+0x54>)
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    1766:	f04f 30ff 	mov.w	r0, #4294967295
    176a:	6008      	str	r0, [r1, #0]
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    176c:	601a      	str	r2, [r3, #0]
}
    176e:	4770      	bx	lr
    1770:	10001164 	.word	0x10001164
    1774:	e000edfc 	.word	0xe000edfc
    1778:	e0000fb0 	.word	0xe0000fb0
    177c:	e0000e40 	.word	0xe0000e40
    1780:	c5acce55 	.word	0xc5acce55
    1784:	e0000e00 	.word	0xe0000e00
    1788:	e0000e80 	.word	0xe0000e80
    178c:	00150511 	.word	0x00150511

00001790 <am_hal_itm_not_busy>:
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_not_busy(void)
{
    1790:	b508      	push	{r3, lr}
    //
    // Make sure the ITM/TPIU is not busy.
    //
    while (AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1));
    1792:	4a08      	ldr	r2, [pc, #32]	; (17b4 <am_hal_itm_not_busy+0x24>)
    1794:	6813      	ldr	r3, [r2, #0]
    1796:	021b      	lsls	r3, r3, #8
    1798:	d4fc      	bmi.n	1794 <am_hal_itm_not_busy+0x4>

    // wait for 50us for the data to flush out
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    179a:	f7ff feff 	bl	159c <am_hal_clkgen_sysclk_get>
    179e:	4906      	ldr	r1, [pc, #24]	; (17b8 <am_hal_itm_not_busy+0x28>)
    17a0:	fba1 3000 	umull	r3, r0, r1, r0
    17a4:	0c80      	lsrs	r0, r0, #18
    17a6:	2232      	movs	r2, #50	; 0x32
    17a8:	fb02 f000 	mul.w	r0, r2, r0
}
    17ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    17b0:	f7ff bf92 	b.w	16d8 <am_hal_flash_delay>
    17b4:	e0000e80 	.word	0xe0000e80
    17b8:	165e9f81 	.word	0x165e9f81

000017bc <am_hal_itm_print>:
    uint32_t ui32Idx;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    17bc:	7803      	ldrb	r3, [r0, #0]
    17be:	b1b3      	cbz	r3, 17ee <am_hal_itm_print+0x32>
{
    17c0:	b410      	push	{r4}
    17c2:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    17c4:	2400      	movs	r4, #0
    17c6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    17ca:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    17cc:	2900      	cmp	r1, #0
    17ce:	d1fa      	bne.n	17c6 <am_hal_itm_print+0xa>
    17d0:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    17d2:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
        else
        {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    17d6:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    17da:	f8dc 3000 	ldr.w	r3, [ip]
    17de:	2b00      	cmp	r3, #0
    17e0:	d0fb      	beq.n	17da <am_hal_itm_print+0x1e>
    while (ui32Length)
    17e2:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    17e4:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    17e8:	d1f5      	bne.n	17d6 <am_hal_itm_print+0x1a>
            // Subtract from length.
            //
            ui32Length--;
        }
    }
}
    17ea:	f85d 4b04 	ldr.w	r4, [sp], #4
    17ee:	4770      	bx	lr

000017f0 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    17f0:	490d      	ldr	r1, [pc, #52]	; (1828 <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    17f2:	4b0e      	ldr	r3, [pc, #56]	; (182c <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    17f4:	4a0e      	ldr	r2, [pc, #56]	; (1830 <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    17f6:	681b      	ldr	r3, [r3, #0]
{
    17f8:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    17fa:	680d      	ldr	r5, [r1, #0]
    17fc:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    17fe:	6815      	ldr	r5, [r2, #0]
    1800:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1802:	4c0c      	ldr	r4, [pc, #48]	; (1834 <am_hal_mcuctrl_fault_status+0x44>)
    1804:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1806:	4329      	orrs	r1, r5
    1808:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    180a:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    180c:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1810:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1812:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1814:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1818:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    181c:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    181e:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1820:	6142      	str	r2, [r0, #20]
}
    1822:	bc70      	pop	{r4, r5, r6}
    1824:	4770      	bx	lr
    1826:	bf00      	nop
    1828:	400201c4 	.word	0x400201c4
    182c:	400201cc 	.word	0x400201cc
    1830:	400201c0 	.word	0x400201c0
    1834:	400201c8 	.word	0x400201c8

00001838 <am_hal_mcuctrl_bandgap_disable>:
am_hal_mcuctrl_bandgap_disable(void)
{
    //
    // Disable the Bandgap in the MCUCTRL.
    //
    AM_REG(MCUCTRL, BANDGAPEN) = ~AM_REG_MCUCTRL_BANDGAPEN_BGPEN_M;
    1838:	4b02      	ldr	r3, [pc, #8]	; (1844 <am_hal_mcuctrl_bandgap_disable+0xc>)
    183a:	f06f 0201 	mvn.w	r2, #1
    183e:	601a      	str	r2, [r3, #0]
    1840:	4770      	bx	lr
    1842:	bf00      	nop
    1844:	400200fc 	.word	0x400200fc

00001848 <am_hal_mcuctrl_bucks_enable>:
am_hal_mcuctrl_bucks_enable(void)
{
    //
    // Enable the core buck converter in the MCUCTRL.
    //
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1848:	4b08      	ldr	r3, [pc, #32]	; (186c <am_hal_mcuctrl_bucks_enable+0x24>)
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Poll until core buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    184a:	4a09      	ldr	r2, [pc, #36]	; (1870 <am_hal_mcuctrl_bucks_enable+0x28>)
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    184c:	6819      	ldr	r1, [r3, #0]
    184e:	f041 0002 	orr.w	r0, r1, #2
    1852:	6018      	str	r0, [r3, #0]
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    1854:	6819      	ldr	r1, [r3, #0]
    1856:	f041 0001 	orr.w	r0, r1, #1
    185a:	6018      	str	r0, [r3, #0]
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    185c:	6813      	ldr	r3, [r2, #0]
    185e:	0799      	lsls	r1, r3, #30
    1860:	d5fc      	bpl.n	185c <am_hal_mcuctrl_bucks_enable+0x14>

    //
    // Poll until SRAM buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, MEMBUCKON) );
    1862:	4a03      	ldr	r2, [pc, #12]	; (1870 <am_hal_mcuctrl_bucks_enable+0x28>)
    1864:	6811      	ldr	r1, [r2, #0]
    1866:	07cb      	lsls	r3, r1, #31
    1868:	d5fc      	bpl.n	1864 <am_hal_mcuctrl_bucks_enable+0x1c>
}
    186a:	4770      	bx	lr
    186c:	40020010 	.word	0x40020010
    1870:	40020014 	.word	0x40020014

00001874 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1874:	4a05      	ldr	r2, [pc, #20]	; (188c <am_hal_rtc_osc_select+0x18>)
    1876:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    1878:	b918      	cbnz	r0, 1882 <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    187a:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    187e:	6010      	str	r0, [r2, #0]
    1880:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    1882:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    1886:	6011      	str	r1, [r2, #0]
    1888:	4770      	bx	lr
    188a:	bf00      	nop
    188c:	4000400c 	.word	0x4000400c

00001890 <am_hal_rtc_osc_enable>:
am_hal_rtc_osc_enable(void)
{
    //
    // Start the RTC Oscillator.
    //
    AM_BFW(RTC, RTCCTL, RSTOP, 0);
    1890:	4a02      	ldr	r2, [pc, #8]	; (189c <am_hal_rtc_osc_enable+0xc>)
    1892:	6813      	ldr	r3, [r2, #0]
    1894:	f023 0010 	bic.w	r0, r3, #16
    1898:	6010      	str	r0, [r2, #0]
    189a:	4770      	bx	lr
    189c:	40004050 	.word	0x40004050

000018a0 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_BFW(RTC, RTCCTL, RSTOP, 1);
    18a0:	4a02      	ldr	r2, [pc, #8]	; (18ac <am_hal_rtc_osc_disable+0xc>)
    18a2:	6813      	ldr	r3, [r2, #0]
    18a4:	f043 0010 	orr.w	r0, r3, #16
    18a8:	6010      	str	r0, [r2, #0]
    18aa:	4770      	bx	lr
    18ac:	40004050 	.word	0x40004050

000018b0 <am_hal_rtc_time_set>:
am_hal_rtc_time_set(am_hal_rtc_time_t *pTime)
{
    //
    // Enable writing to the counters.
    //
    AM_BFW(RTC, RTCCTL, WRTC, 1);
    18b0:	4944      	ldr	r1, [pc, #272]	; (19c4 <am_hal_rtc_time_set+0x114>)
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    18b2:	4a45      	ldr	r2, [pc, #276]	; (19c8 <am_hal_rtc_time_set+0x118>)
    AM_BFW(RTC, RTCCTL, WRTC, 1);
    18b4:	680b      	ldr	r3, [r1, #0]
{
    18b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    AM_BFW(RTC, RTCCTL, WRTC, 1);
    18ba:	f043 0401 	orr.w	r4, r3, #1
    18be:	600c      	str	r4, [r1, #0]

    //
    // Write the RTCLOW register.
    //
    AM_REG(RTC, CTRLOW) =
        AM_REG_RTC_CTRLOW_CTRHR(dec_to_bcd(pTime->ui32Hour))                |
    18c0:	7f07      	ldrb	r7, [r0, #28]
        AM_REG_RTC_CTRLOW_CTRMIN(dec_to_bcd(pTime->ui32Minute))             |
    18c2:	f890 8020 	ldrb.w	r8, [r0, #32]
        AM_REG_RTC_CTRLOW_CTRSEC(dec_to_bcd(pTime->ui32Second))             |
        AM_REG_RTC_CTRLOW_CTR100(dec_to_bcd(pTime->ui32Hundredths));
    18c6:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
    AM_REG(RTC, CTRLOW) =
    18ca:	4d40      	ldr	r5, [pc, #256]	; (19cc <am_hal_rtc_time_set+0x11c>)
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    18cc:	fba2 3407 	umull	r3, r4, r2, r7
    18d0:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
    18d4:	eb0c 0e8c 	add.w	lr, ip, ip, lsl #2
    18d8:	fba2 3408 	umull	r3, r4, r2, r8
    18dc:	eba7 074e 	sub.w	r7, r7, lr, lsl #1
    18e0:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    18e4:	eb0e 048e 	add.w	r4, lr, lr, lsl #2
        AM_REG_RTC_CTRLOW_CTRSEC(dec_to_bcd(pTime->ui32Second))             |
    18e8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    18ec:	eba8 0844 	sub.w	r8, r8, r4, lsl #1
    18f0:	ea48 140e 	orr.w	r4, r8, lr, lsl #4
    18f4:	ea47 170c 	orr.w	r7, r7, ip, lsl #4
        AM_REG_RTC_CTRLOW_CTRHR(dec_to_bcd(pTime->ui32Hour))                |
    18f8:	063f      	lsls	r7, r7, #24
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    18fa:	fba2 ec06 	umull	lr, ip, r2, r6
        AM_REG_RTC_CTRLOW_CTRMIN(dec_to_bcd(pTime->ui32Minute))             |
    18fe:	0424      	lsls	r4, r4, #16
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    1900:	fba2 8e03 	umull	r8, lr, r2, r3
    1904:	ea4f 08de 	mov.w	r8, lr, lsr #3
    1908:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
        AM_REG_RTC_CTRLOW_CTRHR(dec_to_bcd(pTime->ui32Hour))                |
    190c:	f007 577c 	and.w	r7, r7, #1056964608	; 0x3f000000
        AM_REG_RTC_CTRLOW_CTRMIN(dec_to_bcd(pTime->ui32Minute))             |
    1910:	f404 04fe 	and.w	r4, r4, #8323072	; 0x7f0000
        AM_REG_RTC_CTRLOW_CTRHR(dec_to_bcd(pTime->ui32Hour))                |
    1914:	433c      	orrs	r4, r7
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    1916:	eb0c 0e8c 	add.w	lr, ip, ip, lsl #2
    191a:	eb08 0788 	add.w	r7, r8, r8, lsl #2
    191e:	eba6 064e 	sub.w	r6, r6, lr, lsl #1
    1922:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
    1926:	ea43 1708 	orr.w	r7, r3, r8, lsl #4
    192a:	ea46 1c0c 	orr.w	ip, r6, ip, lsl #4
        AM_REG_RTC_CTRLOW_CTRSEC(dec_to_bcd(pTime->ui32Second))             |
    192e:	023b      	lsls	r3, r7, #8
        AM_REG_RTC_CTRLOW_CTR100(dec_to_bcd(pTime->ui32Hundredths));
    1930:	fa5f f68c 	uxtb.w	r6, ip
        AM_REG_RTC_CTRLOW_CTRSEC(dec_to_bcd(pTime->ui32Second))             |
    1934:	4326      	orrs	r6, r4
    1936:	f403 44fe 	and.w	r4, r3, #32512	; 0x7f00
    193a:	4334      	orrs	r4, r6
    AM_REG(RTC, CTRLOW) =
    193c:	602c      	str	r4, [r5, #0]
        AM_REG_RTC_CTRUP_CEB((pTime->ui32CenturyEnable))                   |
        AM_REG_RTC_CTRUP_CB((pTime->ui32Century))                          |
        AM_REG_RTC_CTRUP_CTRWKDY((pTime->ui32Weekday))                     |
        AM_REG_RTC_CTRUP_CTRYR(dec_to_bcd((pTime->ui32Year)))              |
        AM_REG_RTC_CTRUP_CTRMO(dec_to_bcd((pTime->ui32Month)))             |
        AM_REG_RTC_CTRUP_CTRDATE(dec_to_bcd((pTime->ui32DayOfMonth)));
    193e:	7e05      	ldrb	r5, [r0, #24]
        AM_REG_RTC_CTRUP_CTRYR(dec_to_bcd((pTime->ui32Year)))              |
    1940:	7c06      	ldrb	r6, [r0, #16]
        AM_REG_RTC_CTRUP_CTRMO(dec_to_bcd((pTime->ui32Month)))             |
    1942:	7d04      	ldrb	r4, [r0, #20]
        AM_REG_RTC_CTRUP_CEB((pTime->ui32CenturyEnable))                   |
    1944:	6843      	ldr	r3, [r0, #4]
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    1946:	fba2 7805 	umull	r7, r8, r2, r5
    194a:	ea4f 0cd8 	mov.w	ip, r8, lsr #3
        AM_REG_RTC_CTRUP_CB((pTime->ui32Century))                          |
    194e:	68c7      	ldr	r7, [r0, #12]
        AM_REG_RTC_CTRUP_CTRWKDY((pTime->ui32Weekday))                     |
    1950:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    1954:	eb0c 0e8c 	add.w	lr, ip, ip, lsl #2
        AM_REG_RTC_CTRUP_CB((pTime->ui32Century))                          |
    1958:	06f8      	lsls	r0, r7, #27
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    195a:	eba5 054e 	sub.w	r5, r5, lr, lsl #1
        AM_REG_RTC_CTRUP_CB((pTime->ui32Century))                          |
    195e:	f000 6700 	and.w	r7, r0, #134217728	; 0x8000000
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    1962:	ea45 150c 	orr.w	r5, r5, ip, lsl #4
        AM_REG_RTC_CTRUP_CEB((pTime->ui32CenturyEnable))                   |
    1966:	071b      	lsls	r3, r3, #28
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    1968:	fba2 0c06 	umull	r0, ip, r2, r6
    196c:	fba2 2004 	umull	r2, r0, r2, r4
        AM_REG_RTC_CTRUP_CTRWKDY((pTime->ui32Weekday))                     |
    1970:	ea4f 6e08 	mov.w	lr, r8, lsl #24
        AM_REG_RTC_CTRUP_CEB((pTime->ui32CenturyEnable))                   |
    1974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    1978:	ea4f 08dc 	mov.w	r8, ip, lsr #3
    197c:	ea4f 0cd0 	mov.w	ip, r0, lsr #3
        AM_REG_RTC_CTRUP_CTRMO(dec_to_bcd((pTime->ui32Month)))             |
    1980:	433b      	orrs	r3, r7
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    1982:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
        AM_REG_RTC_CTRUP_CTRDATE(dec_to_bcd((pTime->ui32DayOfMonth)));
    1986:	f005 073f 	and.w	r7, r5, #63	; 0x3f
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    198a:	eb08 0588 	add.w	r5, r8, r8, lsl #2
    198e:	eba4 0440 	sub.w	r4, r4, r0, lsl #1
        AM_REG_RTC_CTRUP_CTRWKDY((pTime->ui32Weekday))                     |
    1992:	f00e 62e0 	and.w	r2, lr, #117440512	; 0x7000000
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    1996:	eba6 0645 	sub.w	r6, r6, r5, lsl #1
    199a:	ea46 1508 	orr.w	r5, r6, r8, lsl #4
        AM_REG_RTC_CTRUP_CTRMO(dec_to_bcd((pTime->ui32Month)))             |
    199e:	4313      	orrs	r3, r2
  return (((ui8DecimalByte / 10) << 4) | (ui8DecimalByte % 10));
    19a0:	ea44 120c 	orr.w	r2, r4, ip, lsl #4
        AM_REG_RTC_CTRUP_CTRMO(dec_to_bcd((pTime->ui32Month)))             |
    19a4:	433b      	orrs	r3, r7
    19a6:	0216      	lsls	r6, r2, #8
        AM_REG_RTC_CTRUP_CTRYR(dec_to_bcd((pTime->ui32Year)))              |
    19a8:	b2ef      	uxtb	r7, r5
        AM_REG_RTC_CTRUP_CTRMO(dec_to_bcd((pTime->ui32Month)))             |
    19aa:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
    19ae:	f406 54f8 	and.w	r4, r6, #7936	; 0x1f00
    AM_REG(RTC, CTRUP) =
    19b2:	4807      	ldr	r0, [pc, #28]	; (19d0 <am_hal_rtc_time_set+0x120>)
        AM_REG_RTC_CTRUP_CTRMO(dec_to_bcd((pTime->ui32Month)))             |
    19b4:	4323      	orrs	r3, r4
    AM_REG(RTC, CTRUP) =
    19b6:	6003      	str	r3, [r0, #0]

    //
    // Disable writing to the counters.
    //
    AM_BFW(RTC, RTCCTL, WRTC, 0);
    19b8:	680d      	ldr	r5, [r1, #0]
    19ba:	f025 0201 	bic.w	r2, r5, #1
    19be:	600a      	str	r2, [r1, #0]
    19c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    19c4:	40004050 	.word	0x40004050
    19c8:	cccccccd 	.word	0xcccccccd
    19cc:	40004040 	.word	0x40004040
    19d0:	40004044 	.word	0x40004044

000019d4 <am_hal_rtc_time_get>:
    uint32_t ui32RTCLow, ui32RTCUp, ui32Value;

    //
    // Read the upper and lower RTC registers.
    //
    ui32RTCLow = AM_REG(RTC, CTRLOW);
    19d4:	4a2f      	ldr	r2, [pc, #188]	; (1a94 <am_hal_rtc_time_get+0xc0>)
    ui32RTCUp = AM_REG(RTC, CTRUP);
    19d6:	4b30      	ldr	r3, [pc, #192]	; (1a98 <am_hal_rtc_time_get+0xc4>)
    ui32RTCLow = AM_REG(RTC, CTRLOW);
    19d8:	6812      	ldr	r2, [r2, #0]
    ui32RTCUp = AM_REG(RTC, CTRUP);
    19da:	6819      	ldr	r1, [r3, #0]
{
    19dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    //
    // Break out the lower word.
    //
    ui32Value =
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRHR_M) >> AM_REG_RTC_CTRLOW_CTRHR_S);
    pTime->ui32Hour = bcd_to_dec(ui32Value);
    19de:	f3c2 6e05 	ubfx	lr, r2, #24, #6
  return (((ui8BCDByte & 0xF0) >> 4) * 10) + (ui8BCDByte & 0x0F);
    19e2:	ea4f 1c1e 	mov.w	ip, lr, lsr #4
{
    19e6:	4603      	mov	r3, r0
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTRSEC_M) >> AM_REG_RTC_CTRLOW_CTRSEC_S);
    pTime->ui32Second = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCLow & AM_REG_RTC_CTRLOW_CTR100_M) >> AM_REG_RTC_CTRLOW_CTR100_S);
    pTime->ui32Hundredths = bcd_to_dec(ui32Value);
    19e8:	b2d5      	uxtb	r5, r2
  return (((ui8BCDByte & 0xF0) >> 4) * 10) + (ui8BCDByte & 0x0F);
    19ea:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
    19ee:	f00e 0e0f 	and.w	lr, lr, #15
    pTime->ui32Hour = bcd_to_dec(ui32Value);
    19f2:	eb0e 0c40 	add.w	ip, lr, r0, lsl #1
    pTime->ui32Minute = bcd_to_dec(ui32Value);
    19f6:	f3c2 4706 	ubfx	r7, r2, #16, #7
  return (((ui8BCDByte & 0xF0) >> 4) * 10) + (ui8BCDByte & 0x0F);
    19fa:	0928      	lsrs	r0, r5, #4
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRWKDY_M) >> AM_REG_RTC_CTRUP_CTRWKDY_S);
    pTime->ui32Weekday = bcd_to_dec(ui32Value);

    ui32Value =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRYR_M) >> AM_REG_RTC_CTRUP_CTRYR_S);
    pTime->ui32Year = bcd_to_dec(ui32Value);
    19fc:	f3c1 4407 	ubfx	r4, r1, #16, #8
  return (((ui8BCDByte & 0xF0) >> 4) * 10) + (ui8BCDByte & 0x0F);
    1a00:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1a04:	f005 050f 	and.w	r5, r5, #15
    pTime->ui32Hour = bcd_to_dec(ui32Value);
    1a08:	f8c3 c01c 	str.w	ip, [r3, #28]
  return (((ui8BCDByte & 0xF0) >> 4) * 10) + (ui8BCDByte & 0x0F);
    1a0c:	ea4f 1c17 	mov.w	ip, r7, lsr #4
    1a10:	eb05 0e40 	add.w	lr, r5, r0, lsl #1
    1a14:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
    1a18:	0920      	lsrs	r0, r4, #4
    1a1a:	f007 070f 	and.w	r7, r7, #15

    ui32Value =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRMO_M) >> AM_REG_RTC_CTRUP_CTRMO_S);
    pTime->ui32Month = bcd_to_dec(ui32Value);
    1a1e:	f3c1 2604 	ubfx	r6, r1, #8, #5
  return (((ui8BCDByte & 0xF0) >> 4) * 10) + (ui8BCDByte & 0x0F);
    1a22:	eb00 0580 	add.w	r5, r0, r0, lsl #2
    pTime->ui32Minute = bcd_to_dec(ui32Value);
    1a26:	eb07 074c 	add.w	r7, r7, ip, lsl #1
    pTime->ui32Second = bcd_to_dec(ui32Value);
    1a2a:	f3c2 2206 	ubfx	r2, r2, #8, #7
  return (((ui8BCDByte & 0xF0) >> 4) * 10) + (ui8BCDByte & 0x0F);
    1a2e:	f004 040f 	and.w	r4, r4, #15
    1a32:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    pTime->ui32Minute = bcd_to_dec(ui32Value);
    1a36:	621f      	str	r7, [r3, #32]
  return (((ui8BCDByte & 0xF0) >> 4) * 10) + (ui8BCDByte & 0x0F);
    1a38:	0935      	lsrs	r5, r6, #4
    1a3a:	0917      	lsrs	r7, r2, #4
    1a3c:	eb07 0c87 	add.w	ip, r7, r7, lsl #2
    1a40:	00af      	lsls	r7, r5, #2

    ui32Value =
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTRDATE_M) >> AM_REG_RTC_CTRUP_CTRDATE_S);
    pTime->ui32DayOfMonth = bcd_to_dec(ui32Value);
    1a42:	f001 003f 	and.w	r0, r1, #63	; 0x3f
  return (((ui8BCDByte & 0xF0) >> 4) * 10) + (ui8BCDByte & 0x0F);
    1a46:	443d      	add	r5, r7
    1a48:	f006 060f 	and.w	r6, r6, #15
    pTime->ui32Month = bcd_to_dec(ui32Value);
    1a4c:	eb06 0645 	add.w	r6, r6, r5, lsl #1
  return (((ui8BCDByte & 0xF0) >> 4) * 10) + (ui8BCDByte & 0x0F);
    1a50:	f002 020f 	and.w	r2, r2, #15
    1a54:	0905      	lsrs	r5, r0, #4
    pTime->ui32Second = bcd_to_dec(ui32Value);
    1a56:	eb02 024c 	add.w	r2, r2, ip, lsl #1
  return (((ui8BCDByte & 0xF0) >> 4) * 10) + (ui8BCDByte & 0x0F);
    1a5a:	eb05 0785 	add.w	r7, r5, r5, lsl #2
    1a5e:	f000 000f 	and.w	r0, r0, #15
    pTime->ui32DayOfMonth = bcd_to_dec(ui32Value);
    1a62:	eb00 0547 	add.w	r5, r0, r7, lsl #1
    pTime->ui32Hundredths = bcd_to_dec(ui32Value);
    1a66:	fa5f fe8e 	uxtb.w	lr, lr
    pTime->ui32Year = bcd_to_dec(ui32Value);
    1a6a:	b2e4      	uxtb	r4, r4
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CEB_M) >> AM_REG_RTC_CTRUP_CEB_S);
    1a6c:	f3c1 7c00 	ubfx	ip, r1, #28, #1
    pTime->ui32Second = bcd_to_dec(ui32Value);
    1a70:	625a      	str	r2, [r3, #36]	; 0x24
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CB_M) >> AM_REG_RTC_CTRUP_CB_S);
    1a72:	f3c1 67c0 	ubfx	r7, r1, #27, #1
    ui32Value =
    1a76:	f3c1 6202 	ubfx	r2, r1, #24, #3
        ((ui32RTCUp & AM_REG_RTC_CTRUP_CTERR_M) >> AM_REG_RTC_CTRUP_CTERR_S);
    1a7a:	0fc8      	lsrs	r0, r1, #31
    pTime->ui32Hundredths = bcd_to_dec(ui32Value);
    1a7c:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
    pTime->ui32CenturyEnable =
    1a80:	f8c3 c004 	str.w	ip, [r3, #4]
    pTime->ui32Century =
    1a84:	60df      	str	r7, [r3, #12]
    pTime->ui32Weekday = bcd_to_dec(ui32Value);
    1a86:	609a      	str	r2, [r3, #8]
    pTime->ui32Year = bcd_to_dec(ui32Value);
    1a88:	611c      	str	r4, [r3, #16]
    pTime->ui32Month = bcd_to_dec(ui32Value);
    1a8a:	615e      	str	r6, [r3, #20]
    pTime->ui32ReadError =
    1a8c:	6018      	str	r0, [r3, #0]
    pTime->ui32DayOfMonth = bcd_to_dec(ui32Value);
    1a8e:	619d      	str	r5, [r3, #24]
    }
    else
    {
        return 0;
    }
}
    1a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a92:	bf00      	nop
    1a94:	40004040 	.word	0x40004040
    1a98:	40004044 	.word	0x40004044

00001a9c <am_hal_sysctrl_sleep>:
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1a9c:	4a08      	ldr	r2, [pc, #32]	; (1ac0 <am_hal_sysctrl_sleep+0x24>)
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1a9e:	b118      	cbz	r0, 1aa8 <am_hal_sysctrl_sleep+0xc>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    1aa0:	4b08      	ldr	r3, [pc, #32]	; (1ac4 <am_hal_sysctrl_sleep+0x28>)
    1aa2:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1aa4:	07c3      	lsls	r3, r0, #31
    1aa6:	d505      	bpl.n	1ab4 <am_hal_sysctrl_sleep+0x18>
    }
    else
    {
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    1aa8:	6811      	ldr	r1, [r2, #0]
    1aaa:	f021 0304 	bic.w	r3, r1, #4
    1aae:	6013      	str	r3, [r2, #0]
    }

    //
    // Go to sleep.
    //
    AM_ASM_WFI;
    1ab0:	bf30      	wfi
    1ab2:	4770      	bx	lr
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1ab4:	6810      	ldr	r0, [r2, #0]
    1ab6:	f040 0104 	orr.w	r1, r0, #4
    1aba:	6011      	str	r1, [r2, #0]
    AM_ASM_WFI;
    1abc:	bf30      	wfi
    1abe:	4770      	bx	lr
    1ac0:	e000ed10 	.word	0xe000ed10
    1ac4:	40020250 	.word	0x40020250

00001ac8 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    1ac8:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    1aca:	4a24      	ldr	r2, [pc, #144]	; (1b5c <am_hal_tpiu_enable+0x94>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    1acc:	6803      	ldr	r3, [r0, #0]
    AM_REG(TPIU, FFCR) = 0;
    1ace:	2100      	movs	r1, #0
    1ad0:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    1ad2:	b313      	cbz	r3, 1b1a <am_hal_tpiu_enable+0x52>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1ad4:	f5a2 7c40 	sub.w	ip, r2, #768	; 0x300
    1ad8:	2101      	movs	r1, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1ada:	4c21      	ldr	r4, [pc, #132]	; (1b60 <am_hal_tpiu_enable+0x98>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1adc:	4d21      	ldr	r5, [pc, #132]	; (1b64 <am_hal_tpiu_enable+0x9c>)
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1ade:	f8cc 1000 	str.w	r1, [ip]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1ae2:	f5a3 4e61 	sub.w	lr, r3, #57600	; 0xe100
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1ae6:	45a6      	cmp	lr, r4
    1ae8:	bf94      	ite	ls
    1aea:	461c      	movls	r4, r3
    1aec:	462c      	movhi	r4, r5
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    1aee:	f7ff fd55 	bl	159c <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    1af2:	1c43      	adds	r3, r0, #1
    1af4:	d02f      	beq.n	1b56 <am_hal_tpiu_enable+0x8e>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    1af6:	08c2      	lsrs	r2, r0, #3
    1af8:	fbb2 f3f4 	udiv	r3, r2, r4
    1afc:	1e5d      	subs	r5, r3, #1
    1afe:	b2a8      	uxth	r0, r5
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1b00:	4a19      	ldr	r2, [pc, #100]	; (1b68 <am_hal_tpiu_enable+0xa0>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1b02:	4c1a      	ldr	r4, [pc, #104]	; (1b6c <am_hal_tpiu_enable+0xa4>)

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1b04:	491a      	ldr	r1, [pc, #104]	; (1b70 <am_hal_tpiu_enable+0xa8>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    1b06:	4b1b      	ldr	r3, [pc, #108]	; (1b74 <am_hal_tpiu_enable+0xac>)
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1b08:	6010      	str	r0, [r2, #0]
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1b0a:	2502      	movs	r5, #2
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1b0c:	2000      	movs	r0, #0
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    1b0e:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1b12:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1b14:	6008      	str	r0, [r1, #0]
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    1b16:	601a      	str	r2, [r3, #0]
    1b18:	e010      	b.n	1b3c <am_hal_tpiu_enable+0x74>
        //

        //
        // Set the Asynchronous Clock Prescaler Register.
        //
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    1b1a:	4c13      	ldr	r4, [pc, #76]	; (1b68 <am_hal_tpiu_enable+0xa0>)
    1b1c:	6905      	ldr	r5, [r0, #16]
    1b1e:	6025      	str	r5, [r4, #0]

        //
        // Set the Selected Pin Protocol Register.
        //  e.g. AM_REG_TPIU_SPPR_TXMODE_UART
        //
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    1b20:	6882      	ldr	r2, [r0, #8]
    1b22:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    1b26:	68c3      	ldr	r3, [r0, #12]
    1b28:	4c13      	ldr	r4, [pc, #76]	; (1b78 <am_hal_tpiu_enable+0xb0>)

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    1b2a:	4912      	ldr	r1, [pc, #72]	; (1b74 <am_hal_tpiu_enable+0xac>)
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    1b2c:	1e5d      	subs	r5, r3, #1
    1b2e:	2201      	movs	r2, #1
    1b30:	40aa      	lsls	r2, r5
    1b32:	6022      	str	r2, [r4, #0]
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    1b34:	6840      	ldr	r0, [r0, #4]
    1b36:	680b      	ldr	r3, [r1, #0]
    1b38:	4303      	orrs	r3, r0
    1b3a:	600b      	str	r3, [r1, #0]
    }

    // wait for 50us for the data to flush out
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1b3c:	f7ff fd2e 	bl	159c <am_hal_clkgen_sysclk_get>
    1b40:	4c0e      	ldr	r4, [pc, #56]	; (1b7c <am_hal_tpiu_enable+0xb4>)
    1b42:	fba4 3100 	umull	r3, r1, r4, r0
    1b46:	0c88      	lsrs	r0, r1, #18
    1b48:	2332      	movs	r3, #50	; 0x32
    1b4a:	fb03 f000 	mul.w	r0, r3, r0
}
    1b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1b52:	f7ff bdc1 	b.w	16d8 <am_hal_flash_delay>
    1b56:	2002      	movs	r0, #2
    1b58:	e7d2      	b.n	1b00 <am_hal_tpiu_enable+0x38>
    1b5a:	bf00      	nop
    1b5c:	e0040304 	.word	0xe0040304
    1b60:	001da380 	.word	0x001da380
    1b64:	000f4240 	.word	0x000f4240
    1b68:	e0040010 	.word	0xe0040010
    1b6c:	e00400f0 	.word	0xe00400f0
    1b70:	e0040f00 	.word	0xe0040f00
    1b74:	40020250 	.word	0x40020250
    1b78:	e0040004 	.word	0xe0040004
    1b7c:	165e9f81 	.word	0x165e9f81

00001b80 <am_hal_tpiu_disable>:
am_hal_tpiu_disable(void)
{
    //
    // Disable the TPIU clock source in MCU control.
    //
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    1b80:	4b01      	ldr	r3, [pc, #4]	; (1b88 <am_hal_tpiu_disable+0x8>)
    1b82:	2200      	movs	r2, #0
    1b84:	601a      	str	r2, [r3, #0]
    1b86:	4770      	bx	lr
    1b88:	40020250 	.word	0x40020250

00001b8c <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    1b8c:	4b01      	ldr	r3, [pc, #4]	; (1b94 <am_hal_vcomp_disable+0x8>)
    1b8e:	2237      	movs	r2, #55	; 0x37
    1b90:	601a      	str	r2, [r3, #0]
    1b92:	4770      	bx	lr
    1b94:	4000c008 	.word	0x4000c008
    1b98:	646e7553 	.word	0x646e7553
    1b9c:	00007961 	.word	0x00007961
    1ba0:	646e6f4d 	.word	0x646e6f4d
    1ba4:	00007961 	.word	0x00007961
    1ba8:	73657554 	.word	0x73657554
    1bac:	00796164 	.word	0x00796164
    1bb0:	6e646557 	.word	0x6e646557
    1bb4:	61647365 	.word	0x61647365
    1bb8:	00000079 	.word	0x00000079
    1bbc:	72756854 	.word	0x72756854
    1bc0:	79616473 	.word	0x79616473
    1bc4:	00000000 	.word	0x00000000
    1bc8:	64697246 	.word	0x64697246
    1bcc:	00007961 	.word	0x00007961
    1bd0:	75746153 	.word	0x75746153
    1bd4:	79616472 	.word	0x79616472
    1bd8:	00000000 	.word	0x00000000
    1bdc:	61766e49 	.word	0x61766e49
    1be0:	2064696c 	.word	0x2064696c
    1be4:	00796164 	.word	0x00796164
    1be8:	756e614a 	.word	0x756e614a
    1bec:	00797261 	.word	0x00797261
    1bf0:	72626546 	.word	0x72626546
    1bf4:	79726175 	.word	0x79726175
    1bf8:	00000000 	.word	0x00000000
    1bfc:	6372614d 	.word	0x6372614d
    1c00:	00000068 	.word	0x00000068
    1c04:	69727041 	.word	0x69727041
    1c08:	0000006c 	.word	0x0000006c
    1c0c:	0079614d 	.word	0x0079614d
    1c10:	656e754a 	.word	0x656e754a
    1c14:	00000000 	.word	0x00000000
    1c18:	796c754a 	.word	0x796c754a
    1c1c:	00000000 	.word	0x00000000
    1c20:	75677541 	.word	0x75677541
    1c24:	00007473 	.word	0x00007473
    1c28:	74706553 	.word	0x74706553
    1c2c:	65626d65 	.word	0x65626d65
    1c30:	00000072 	.word	0x00000072
    1c34:	6f74634f 	.word	0x6f74634f
    1c38:	00726562 	.word	0x00726562
    1c3c:	65766f4e 	.word	0x65766f4e
    1c40:	7265626d 	.word	0x7265626d
    1c44:	00000000 	.word	0x00000000
    1c48:	65636544 	.word	0x65636544
    1c4c:	7265626d 	.word	0x7265626d
    1c50:	00000000 	.word	0x00000000
    1c54:	61766e49 	.word	0x61766e49
    1c58:	2064696c 	.word	0x2064696c
    1c5c:	746e6f6d 	.word	0x746e6f6d
    1c60:	00000068 	.word	0x00000068
    1c64:	323a3431 	.word	0x323a3431
    1c68:	37333a37 	.word	0x37333a37
    1c6c:	00000000 	.word	0x00000000
    1c70:	2079614d 	.word	0x2079614d
    1c74:	32203120 	.word	0x32203120
    1c78:	00383130 	.word	0x00383130
    1c7c:	20435452 	.word	0x20435452
    1c80:	6e697250 	.word	0x6e697250
    1c84:	78452074 	.word	0x78452074
    1c88:	6c706d61 	.word	0x6c706d61
    1c8c:	00000a65 	.word	0x00000a65
    1c90:	73696854 	.word	0x73696854
    1c94:	61786520 	.word	0x61786520
    1c98:	656c706d 	.word	0x656c706d
    1c9c:	73617720 	.word	0x73617720
    1ca0:	69756220 	.word	0x69756220
    1ca4:	6f20746c 	.word	0x6f20746c
    1ca8:	7325206e 	.word	0x7325206e
    1cac:	20746120 	.word	0x20746120
    1cb0:	0a2e7325 	.word	0x0a2e7325
    1cb4:	0000000a 	.word	0x0000000a
    1cb8:	20744909 	.word	0x20744909
    1cbc:	6e207369 	.word	0x6e207369
    1cc0:	0020776f 	.word	0x0020776f
    1cc4:	3a206425 	.word	0x3a206425
    1cc8:	00000020 	.word	0x00000020
    1ccc:	64323025 	.word	0x64323025
    1cd0:	00203a20 	.word	0x00203a20
    1cd4:	64323025 	.word	0x64323025
    1cd8:	0000002e 	.word	0x0000002e
    1cdc:	64323025 	.word	0x64323025
    1ce0:	00000020 	.word	0x00000020
    1ce4:	00000020 	.word	0x00000020
    1ce8:	202c6425 	.word	0x202c6425
    1cec:	00000000 	.word	0x00000000
    1cf0:	30253032 	.word	0x30253032
    1cf4:	00006432 	.word	0x00006432
    1cf8:	0a0a0a0a 	.word	0x0a0a0a0a
    1cfc:	0a0a0a0a 	.word	0x0a0a0a0a
    1d00:	0a0a0a0a 	.word	0x0a0a0a0a
    1d04:	0a0a0a0a 	.word	0x0a0a0a0a
    1d08:	00000a0a 	.word	0x00000a0a

00001d0c <am_cattr>:
	...
    1d14:	20202000 00002020 00000000 00000000     .     ..........
	...
    1d2c:	80008020 80808080 00008080 00808000      ...............
    1d3c:	98989898 98989898 00009898 00000000     ................
    1d4c:	95959580 85959595 85858585 85858585     ................
    1d5c:	85858585 85858585 00858585 80800000     ................
    1d6c:	93939380 83939393 83838383 83838383     ................
    1d7c:	83838383 83838383 80838383 00808000     ................
	...

00001e0c <CSWTCH.4>:
    1e0c:	016e3600 00b71b00 007a1200 005b8d80     .6n.......z...[.
    1e1c:	00493e00 003d0900 003450db 002dc6c0     .>I...=..P4...-.
