
freertos_lowpower_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004afc  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00002300  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000030  10002300  00004afc  00022300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00004370  10002330  00004b2c  00022330  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00022330  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000f7cd  00000000  00000000  00022367  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000365d  00000000  00000000  00031b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000ca8  00000000  00000000  00035191  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000e78  00000000  00000000  00035e39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007166  00000000  00000000  00036cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000043ef  00000000  00000000  0003de17  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  00042206  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00002650  00000000  00000000  00042284  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001d99  00000000  00000000  000448d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 23 00 10 c5 31 00 00 2d 32 00 00 6d 32 00 00     .#...1..-2..m2..
      10:	6d 32 00 00 6d 32 00 00 6d 32 00 00 00 00 00 00     m2..m2..m2......
	...
      2c:	c1 01 00 00 33 32 00 00 00 00 00 00 b1 03 00 00     ....32..........
      3c:	19 04 00 00 33 32 00 00 33 32 00 00 33 32 00 00     ....32..32..32..
      4c:	33 32 00 00 33 32 00 00 33 32 00 00 33 32 00 00     32..32..32..32..
      5c:	33 32 00 00 33 32 00 00 7d 2d 00 00 ed 30 00 00     32..32..}-...0..
      6c:	33 32 00 00 33 32 00 00 33 32 00 00 33 32 00 00     32..32..32..32..
      7c:	33 32 00 00                                         32..

00000080 <__aeabi_d2f>:
      80:	ea4f 0241 	mov.w	r2, r1, lsl #1
      84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      88:	bf24      	itt	cs
      8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      92:	d90d      	bls.n	b0 <__aeabi_d2f+0x30>
      94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      a8:	bf08      	it	eq
      aa:	f020 0001 	biceq.w	r0, r0, #1
      ae:	4770      	bx	lr
      b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      b4:	d121      	bne.n	fa <__aeabi_d2f+0x7a>
      b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      ba:	bfbc      	itt	lt
      bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
      c0:	4770      	bxlt	lr
      c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
      c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
      ca:	f1c2 0218 	rsb	r2, r2, #24
      ce:	f1c2 0c20 	rsb	ip, r2, #32
      d2:	fa10 f30c 	lsls.w	r3, r0, ip
      d6:	fa20 f002 	lsr.w	r0, r0, r2
      da:	bf18      	it	ne
      dc:	f040 0001 	orrne.w	r0, r0, #1
      e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
      e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
      e8:	fa03 fc0c 	lsl.w	ip, r3, ip
      ec:	ea40 000c 	orr.w	r0, r0, ip
      f0:	fa23 f302 	lsr.w	r3, r3, r2
      f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
      f8:	e7cc      	b.n	94 <__aeabi_d2f+0x14>
      fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
      fe:	d107      	bne.n	110 <__aeabi_d2f+0x90>
     100:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     104:	bf1e      	ittt	ne
     106:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     10a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     10e:	4770      	bxne	lr
     110:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     114:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     118:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     11c:	4770      	bx	lr
     11e:	bf00      	nop

00000120 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
     120:	b480      	push	{r7}
     122:	b085      	sub	sp, #20
     124:	af00      	add	r7, sp, #0
     126:	60f8      	str	r0, [r7, #12]
     128:	60b9      	str	r1, [r7, #8]
     12a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
     12c:	68fb      	ldr	r3, [r7, #12]
     12e:	3b04      	subs	r3, #4
     130:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
     132:	68fb      	ldr	r3, [r7, #12]
     134:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     138:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
     13a:	68fb      	ldr	r3, [r7, #12]
     13c:	3b04      	subs	r3, #4
     13e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
     140:	68bb      	ldr	r3, [r7, #8]
     142:	f023 0201 	bic.w	r2, r3, #1
     146:	68fb      	ldr	r3, [r7, #12]
     148:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
     14a:	68fb      	ldr	r3, [r7, #12]
     14c:	3b04      	subs	r3, #4
     14e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
     150:	4a0c      	ldr	r2, [pc, #48]	; (184 <pxPortInitialiseStack+0x64>)
     152:	68fb      	ldr	r3, [r7, #12]
     154:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
     156:	68fb      	ldr	r3, [r7, #12]
     158:	3b14      	subs	r3, #20
     15a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
     15c:	687a      	ldr	r2, [r7, #4]
     15e:	68fb      	ldr	r3, [r7, #12]
     160:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
     162:	68fb      	ldr	r3, [r7, #12]
     164:	3b04      	subs	r3, #4
     166:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
     168:	68fb      	ldr	r3, [r7, #12]
     16a:	f06f 0202 	mvn.w	r2, #2
     16e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
     170:	68fb      	ldr	r3, [r7, #12]
     172:	3b20      	subs	r3, #32
     174:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
     176:	68fb      	ldr	r3, [r7, #12]
}
     178:	4618      	mov	r0, r3
     17a:	3714      	adds	r7, #20
     17c:	46bd      	mov	sp, r7
     17e:	f85d 7b04 	ldr.w	r7, [sp], #4
     182:	4770      	bx	lr
     184:	00000189 	.word	0x00000189

00000188 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
     188:	b480      	push	{r7}
     18a:	b083      	sub	sp, #12
     18c:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
     18e:	4b08      	ldr	r3, [pc, #32]	; (1b0 <prvTaskExitError+0x28>)
     190:	681b      	ldr	r3, [r3, #0]
     192:	f1b3 3fff 	cmp.w	r3, #4294967295
     196:	d000      	beq.n	19a <prvTaskExitError+0x12>
     198:	e7fe      	b.n	198 <prvTaskExitError+0x10>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
     19a:	f04f 0380 	mov.w	r3, #128	; 0x80
     19e:	f383 8811 	msr	BASEPRI, r3
     1a2:	f3bf 8f6f 	isb	sy
     1a6:	f3bf 8f4f 	dsb	sy
     1aa:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	for( ;; );
     1ac:	e7fe      	b.n	1ac <prvTaskExitError+0x24>
     1ae:	bf00      	nop
     1b0:	10002300 	.word	0x10002300
	...

000001c0 <am_svcall_isr>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
     1c0:	4b07      	ldr	r3, [pc, #28]	; (1e0 <pxCurrentTCBConst2>)
     1c2:	6819      	ldr	r1, [r3, #0]
     1c4:	6808      	ldr	r0, [r1, #0]
     1c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     1ca:	f380 8809 	msr	PSP, r0
     1ce:	f3bf 8f6f 	isb	sy
     1d2:	f04f 0000 	mov.w	r0, #0
     1d6:	f380 8811 	msr	BASEPRI, r0
     1da:	4770      	bx	lr
     1dc:	f3af 8000 	nop.w

000001e0 <pxCurrentTCBConst2>:
     1e0:	10006354 	.word	0x10006354
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
     1e4:	bf00      	nop
     1e6:	bf00      	nop

000001e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
     1e8:	4806      	ldr	r0, [pc, #24]	; (204 <prvPortStartFirstTask+0x1c>)
     1ea:	6800      	ldr	r0, [r0, #0]
     1ec:	6800      	ldr	r0, [r0, #0]
     1ee:	f380 8808 	msr	MSP, r0
     1f2:	b662      	cpsie	i
     1f4:	b661      	cpsie	f
     1f6:	f3bf 8f4f 	dsb	sy
     1fa:	f3bf 8f6f 	isb	sy
     1fe:	df00      	svc	0
     200:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
     202:	bf00      	nop
     204:	e000ed08 	.word	0xe000ed08

00000208 <vPortEnableVFP>:
/*-----------------------------------------------------------*/
/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
     208:	f8df 000c 	ldr.w	r0, [pc, #12]	; 218 <vPortEnableVFP+0x10>
     20c:	6801      	ldr	r1, [r0, #0]
     20e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     212:	6001      	str	r1, [r0, #0]
     214:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
     216:	bf00      	nop
     218:	e000ed88 	.word	0xe000ed88

0000021c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
     21c:	b580      	push	{r7, lr}
     21e:	b084      	sub	sp, #16
     220:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
     222:	4b37      	ldr	r3, [pc, #220]	; (300 <xPortStartScheduler+0xe4>)
     224:	681b      	ldr	r3, [r3, #0]
     226:	4a37      	ldr	r2, [pc, #220]	; (304 <xPortStartScheduler+0xe8>)
     228:	4293      	cmp	r3, r2
     22a:	d100      	bne.n	22e <xPortStartScheduler+0x12>
     22c:	e7fe      	b.n	22c <xPortStartScheduler+0x10>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
     22e:	4b34      	ldr	r3, [pc, #208]	; (300 <xPortStartScheduler+0xe4>)
     230:	681b      	ldr	r3, [r3, #0]
     232:	4a35      	ldr	r2, [pc, #212]	; (308 <xPortStartScheduler+0xec>)
     234:	4293      	cmp	r3, r2
     236:	d100      	bne.n	23a <xPortStartScheduler+0x1e>
     238:	e7fe      	b.n	238 <xPortStartScheduler+0x1c>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
     23a:	4b34      	ldr	r3, [pc, #208]	; (30c <xPortStartScheduler+0xf0>)
     23c:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
     23e:	68fb      	ldr	r3, [r7, #12]
     240:	781b      	ldrb	r3, [r3, #0]
     242:	b2db      	uxtb	r3, r3
     244:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
     246:	68fb      	ldr	r3, [r7, #12]
     248:	22ff      	movs	r2, #255	; 0xff
     24a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
     24c:	68fb      	ldr	r3, [r7, #12]
     24e:	781b      	ldrb	r3, [r3, #0]
     250:	b2db      	uxtb	r3, r3
     252:	71fb      	strb	r3, [r7, #7]

		/* The kernel interrupt priority should be set to the lowest
		priority. */
		configASSERT( ucMaxPriorityValue == ( configKERNEL_INTERRUPT_PRIORITY & ucMaxPriorityValue ) );
     254:	79fb      	ldrb	r3, [r7, #7]
     256:	b2db      	uxtb	r3, r3
     258:	f023 031f 	bic.w	r3, r3, #31
     25c:	b2da      	uxtb	r2, r3
     25e:	79fb      	ldrb	r3, [r7, #7]
     260:	b2db      	uxtb	r3, r3
     262:	429a      	cmp	r2, r3
     264:	d000      	beq.n	268 <xPortStartScheduler+0x4c>
     266:	e7fe      	b.n	266 <xPortStartScheduler+0x4a>

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
     268:	79fb      	ldrb	r3, [r7, #7]
     26a:	b2db      	uxtb	r3, r3
     26c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     270:	b2da      	uxtb	r2, r3
     272:	4b27      	ldr	r3, [pc, #156]	; (310 <xPortStartScheduler+0xf4>)
     274:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
     276:	4b27      	ldr	r3, [pc, #156]	; (314 <xPortStartScheduler+0xf8>)
     278:	2207      	movs	r2, #7
     27a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
     27c:	e009      	b.n	292 <xPortStartScheduler+0x76>
		{
			ulMaxPRIGROUPValue--;
     27e:	4b25      	ldr	r3, [pc, #148]	; (314 <xPortStartScheduler+0xf8>)
     280:	681b      	ldr	r3, [r3, #0]
     282:	3b01      	subs	r3, #1
     284:	4a23      	ldr	r2, [pc, #140]	; (314 <xPortStartScheduler+0xf8>)
     286:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
     288:	79fb      	ldrb	r3, [r7, #7]
     28a:	b2db      	uxtb	r3, r3
     28c:	005b      	lsls	r3, r3, #1
     28e:	b2db      	uxtb	r3, r3
     290:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
     292:	79fb      	ldrb	r3, [r7, #7]
     294:	b2db      	uxtb	r3, r3
     296:	f003 0380 	and.w	r3, r3, #128	; 0x80
     29a:	2b80      	cmp	r3, #128	; 0x80
     29c:	d0ef      	beq.n	27e <xPortStartScheduler+0x62>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
     29e:	4b1d      	ldr	r3, [pc, #116]	; (314 <xPortStartScheduler+0xf8>)
     2a0:	681b      	ldr	r3, [r3, #0]
     2a2:	021b      	lsls	r3, r3, #8
     2a4:	4a1b      	ldr	r2, [pc, #108]	; (314 <xPortStartScheduler+0xf8>)
     2a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
     2a8:	4b1a      	ldr	r3, [pc, #104]	; (314 <xPortStartScheduler+0xf8>)
     2aa:	681b      	ldr	r3, [r3, #0]
     2ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     2b0:	4a18      	ldr	r2, [pc, #96]	; (314 <xPortStartScheduler+0xf8>)
     2b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
     2b4:	68bb      	ldr	r3, [r7, #8]
     2b6:	b2da      	uxtb	r2, r3
     2b8:	68fb      	ldr	r3, [r7, #12]
     2ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
     2bc:	4a16      	ldr	r2, [pc, #88]	; (318 <xPortStartScheduler+0xfc>)
     2be:	4b16      	ldr	r3, [pc, #88]	; (318 <xPortStartScheduler+0xfc>)
     2c0:	681b      	ldr	r3, [r3, #0]
     2c2:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
     2c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
     2c8:	4a13      	ldr	r2, [pc, #76]	; (318 <xPortStartScheduler+0xfc>)
     2ca:	4b13      	ldr	r3, [pc, #76]	; (318 <xPortStartScheduler+0xfc>)
     2cc:	681b      	ldr	r3, [r3, #0]
     2ce:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
     2d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
     2d4:	f000 f9c2 	bl	65c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
     2d8:	4b10      	ldr	r3, [pc, #64]	; (31c <xPortStartScheduler+0x100>)
     2da:	2200      	movs	r2, #0
     2dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
     2de:	f7ff ff93 	bl	208 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
     2e2:	4a0f      	ldr	r2, [pc, #60]	; (320 <xPortStartScheduler+0x104>)
     2e4:	4b0e      	ldr	r3, [pc, #56]	; (320 <xPortStartScheduler+0x104>)
     2e6:	681b      	ldr	r3, [r3, #0]
     2e8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     2ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
     2ee:	f7ff ff7b 	bl	1e8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
     2f2:	f7ff ff49 	bl	188 <prvTaskExitError>

	/* Should not get here! */
	return 0;
     2f6:	2300      	movs	r3, #0
}
     2f8:	4618      	mov	r0, r3
     2fa:	3710      	adds	r7, #16
     2fc:	46bd      	mov	sp, r7
     2fe:	bd80      	pop	{r7, pc}
     300:	e000ed00 	.word	0xe000ed00
     304:	410fc271 	.word	0x410fc271
     308:	410fc270 	.word	0x410fc270
     30c:	e000e400 	.word	0xe000e400
     310:	10002330 	.word	0x10002330
     314:	10002334 	.word	0x10002334
     318:	e000ed20 	.word	0xe000ed20
     31c:	10002300 	.word	0x10002300
     320:	e000ef34 	.word	0xe000ef34

00000324 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
     324:	b480      	push	{r7}
     326:	b083      	sub	sp, #12
     328:	af00      	add	r7, sp, #0
     32a:	f04f 0380 	mov.w	r3, #128	; 0x80
     32e:	f383 8811 	msr	BASEPRI, r3
     332:	f3bf 8f6f 	isb	sy
     336:	f3bf 8f4f 	dsb	sy
     33a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
     33c:	4b0a      	ldr	r3, [pc, #40]	; (368 <vPortEnterCritical+0x44>)
     33e:	681b      	ldr	r3, [r3, #0]
     340:	3301      	adds	r3, #1
     342:	4a09      	ldr	r2, [pc, #36]	; (368 <vPortEnterCritical+0x44>)
     344:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
     346:	4b08      	ldr	r3, [pc, #32]	; (368 <vPortEnterCritical+0x44>)
     348:	681b      	ldr	r3, [r3, #0]
     34a:	2b01      	cmp	r3, #1
     34c:	d105      	bne.n	35a <vPortEnterCritical+0x36>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
     34e:	4b07      	ldr	r3, [pc, #28]	; (36c <vPortEnterCritical+0x48>)
     350:	681b      	ldr	r3, [r3, #0]
     352:	b2db      	uxtb	r3, r3
     354:	2b00      	cmp	r3, #0
     356:	d000      	beq.n	35a <vPortEnterCritical+0x36>
     358:	e7fe      	b.n	358 <vPortEnterCritical+0x34>
	}
}
     35a:	bf00      	nop
     35c:	370c      	adds	r7, #12
     35e:	46bd      	mov	sp, r7
     360:	f85d 7b04 	ldr.w	r7, [sp], #4
     364:	4770      	bx	lr
     366:	bf00      	nop
     368:	10002300 	.word	0x10002300
     36c:	e000ed04 	.word	0xe000ed04

00000370 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
     370:	b480      	push	{r7}
     372:	b083      	sub	sp, #12
     374:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
     376:	4b0c      	ldr	r3, [pc, #48]	; (3a8 <vPortExitCritical+0x38>)
     378:	681b      	ldr	r3, [r3, #0]
     37a:	2b00      	cmp	r3, #0
     37c:	d100      	bne.n	380 <vPortExitCritical+0x10>
     37e:	e7fe      	b.n	37e <vPortExitCritical+0xe>
	uxCriticalNesting--;
     380:	4b09      	ldr	r3, [pc, #36]	; (3a8 <vPortExitCritical+0x38>)
     382:	681b      	ldr	r3, [r3, #0]
     384:	3b01      	subs	r3, #1
     386:	4a08      	ldr	r2, [pc, #32]	; (3a8 <vPortExitCritical+0x38>)
     388:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
     38a:	4b07      	ldr	r3, [pc, #28]	; (3a8 <vPortExitCritical+0x38>)
     38c:	681b      	ldr	r3, [r3, #0]
     38e:	2b00      	cmp	r3, #0
     390:	d104      	bne.n	39c <vPortExitCritical+0x2c>
     392:	2300      	movs	r3, #0
     394:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
     396:	687b      	ldr	r3, [r7, #4]
     398:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
     39c:	bf00      	nop
     39e:	370c      	adds	r7, #12
     3a0:	46bd      	mov	sp, r7
     3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3a6:	4770      	bx	lr
     3a8:	10002300 	.word	0x10002300
     3ac:	00000000 	.word	0x00000000

000003b0 <am_pendsv_isr>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
     3b0:	f3ef 8009 	mrs	r0, PSP
     3b4:	f3bf 8f6f 	isb	sy
     3b8:	4b15      	ldr	r3, [pc, #84]	; (410 <pxCurrentTCBConst>)
     3ba:	681a      	ldr	r2, [r3, #0]
     3bc:	f01e 0f10 	tst.w	lr, #16
     3c0:	bf08      	it	eq
     3c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
     3c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3ca:	6010      	str	r0, [r2, #0]
     3cc:	f84d 3d04 	str.w	r3, [sp, #-4]!
     3d0:	f04f 0080 	mov.w	r0, #128	; 0x80
     3d4:	f380 8811 	msr	BASEPRI, r0
     3d8:	f3bf 8f4f 	dsb	sy
     3dc:	f3bf 8f6f 	isb	sy
     3e0:	f001 fc14 	bl	1c0c <vTaskSwitchContext>
     3e4:	f04f 0000 	mov.w	r0, #0
     3e8:	f380 8811 	msr	BASEPRI, r0
     3ec:	bc08      	pop	{r3}
     3ee:	6819      	ldr	r1, [r3, #0]
     3f0:	6808      	ldr	r0, [r1, #0]
     3f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3f6:	f01e 0f10 	tst.w	lr, #16
     3fa:	bf08      	it	eq
     3fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
     400:	f380 8809 	msr	PSP, r0
     404:	f3bf 8f6f 	isb	sy
     408:	4770      	bx	lr
     40a:	bf00      	nop
     40c:	f3af 8000 	nop.w

00000410 <pxCurrentTCBConst>:
     410:	10006354 	.word	0x10006354
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
     414:	bf00      	nop
     416:	bf00      	nop

00000418 <am_systick_isr>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
     418:	b580      	push	{r7, lr}
     41a:	b082      	sub	sp, #8
     41c:	af00      	add	r7, sp, #0
	__asm volatile
     41e:	f04f 0380 	mov.w	r3, #128	; 0x80
     422:	f383 8811 	msr	BASEPRI, r3
     426:	f3bf 8f6f 	isb	sy
     42a:	f3bf 8f4f 	dsb	sy
     42e:	607b      	str	r3, [r7, #4]
	// Addition for support of SystemView Profiler
	traceISR_ENTER();
	// End addition
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
     430:	f001 fb48 	bl	1ac4 <xTaskIncrementTick>
     434:	4603      	mov	r3, r0
     436:	2b00      	cmp	r3, #0
     438:	d003      	beq.n	442 <am_systick_isr+0x2a>
		  traceISR_EXIT_TO_SCHEDULER();
		  // End addition

			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
     43a:	4b06      	ldr	r3, [pc, #24]	; (454 <am_systick_isr+0x3c>)
     43c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     440:	601a      	str	r2, [r3, #0]
     442:	2300      	movs	r3, #0
     444:	603b      	str	r3, [r7, #0]
	__asm volatile
     446:	683b      	ldr	r3, [r7, #0]
     448:	f383 8811 	msr	BASEPRI, r3
		  traceISR_EXIT();
		}
		// End addition
	}
	portENABLE_INTERRUPTS();
}
     44c:	bf00      	nop
     44e:	3708      	adds	r7, #8
     450:	46bd      	mov	sp, r7
     452:	bd80      	pop	{r7, pc}
     454:	e000ed04 	.word	0xe000ed04

00000458 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
     458:	b480      	push	{r7}
     45a:	b083      	sub	sp, #12
     45c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
     45e:	f3ef 8305 	mrs	r3, IPSR
     462:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b0f      	cmp	r3, #15
     468:	d90a      	bls.n	480 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
     46a:	4a0d      	ldr	r2, [pc, #52]	; (4a0 <vPortValidateInterruptPriority+0x48>)
     46c:	687b      	ldr	r3, [r7, #4]
     46e:	4413      	add	r3, r2
     470:	781b      	ldrb	r3, [r3, #0]
     472:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
     474:	4b0b      	ldr	r3, [pc, #44]	; (4a4 <vPortValidateInterruptPriority+0x4c>)
     476:	781b      	ldrb	r3, [r3, #0]
     478:	78fa      	ldrb	r2, [r7, #3]
     47a:	429a      	cmp	r2, r3
     47c:	d200      	bcs.n	480 <vPortValidateInterruptPriority+0x28>
     47e:	e7fe      	b.n	47e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
     480:	4b09      	ldr	r3, [pc, #36]	; (4a8 <vPortValidateInterruptPriority+0x50>)
     482:	681b      	ldr	r3, [r3, #0]
     484:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
     488:	4b08      	ldr	r3, [pc, #32]	; (4ac <vPortValidateInterruptPriority+0x54>)
     48a:	681b      	ldr	r3, [r3, #0]
     48c:	429a      	cmp	r2, r3
     48e:	d900      	bls.n	492 <vPortValidateInterruptPriority+0x3a>
     490:	e7fe      	b.n	490 <vPortValidateInterruptPriority+0x38>
	}
     492:	bf00      	nop
     494:	370c      	adds	r7, #12
     496:	46bd      	mov	sp, r7
     498:	f85d 7b04 	ldr.w	r7, [sp], #4
     49c:	4770      	bx	lr
     49e:	bf00      	nop
     4a0:	e000e3f0 	.word	0xe000e3f0
     4a4:	10002330 	.word	0x10002330
     4a8:	e000ed0c 	.word	0xe000ed0c
     4ac:	10002334 	.word	0x10002334

000004b0 <vPortSuppressTicksAndSleep>:
 * resolution of the Tick timer.
 */
	static uint32_t xMaximumPossibleSuppressedTicks = 0;

void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
     4b0:	b580      	push	{r7, lr}
     4b2:	b088      	sub	sp, #32
     4b4:	af00      	add	r7, sp, #0
     4b6:	6078      	str	r0, [r7, #4]
    uint32_t New_Timer, Delta_Sleep;
	TickType_t xModifiableIdleTime;
    uint32_t elapsed_time;

	/* Make sure the SysTick reload value does not overflow the counter. */
	if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
     4b8:	4b4a      	ldr	r3, [pc, #296]	; (5e4 <vPortSuppressTicksAndSleep+0x134>)
     4ba:	681b      	ldr	r3, [r3, #0]
     4bc:	687a      	ldr	r2, [r7, #4]
     4be:	429a      	cmp	r2, r3
     4c0:	d902      	bls.n	4c8 <vPortSuppressTicksAndSleep+0x18>
	{
		xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
     4c2:	4b48      	ldr	r3, [pc, #288]	; (5e4 <vPortSuppressTicksAndSleep+0x134>)
     4c4:	681b      	ldr	r3, [r3, #0]
     4c6:	607b      	str	r3, [r7, #4]


	/* Calculate the reload value required to wait xExpectedIdleTime
	tick periods.  -1 is used because this code will execute part way
	through one of the tick periods. */
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
     4c8:	687b      	ldr	r3, [r7, #4]
     4ca:	3b01      	subs	r3, #1
     4cc:	4a46      	ldr	r2, [pc, #280]	; (5e8 <vPortSuppressTicksAndSleep+0x138>)
     4ce:	6812      	ldr	r2, [r2, #0]
     4d0:	fb02 f303 	mul.w	r3, r2, r3
     4d4:	61bb      	str	r3, [r7, #24]

	/* Enter a critical section but don't use the taskENTER_CRITICAL()
	method as that will mask interrupts that should exit sleep mode. */
	__asm volatile( "cpsid i" );
     4d6:	b672      	cpsid	i
	__asm volatile( "dsb" );
     4d8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     4dc:	f3bf 8f6f 	isb	sy
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK 
    // Adjust for the time already elapsed
    elapsed_time = am_hal_stimer_counter_get() - g_lastSTimerVal;
#else
    am_hal_ctimer_stop(AM_FREERTOS_CTIMER_NUM, AM_HAL_CTIMER_BOTH);
     4e0:	f04f 31ff 	mov.w	r1, #4294967295
     4e4:	2003      	movs	r0, #3
     4e6:	f003 ff19 	bl	431c <am_hal_ctimer_stop>
    // Adjust for the time already elapsed
    elapsed_time = am_hal_ctimer_read(AM_FREERTOS_CTIMER_NUM, AM_HAL_CTIMER_BOTH);
     4ea:	f04f 31ff 	mov.w	r1, #4294967295
     4ee:	2003      	movs	r0, #3
     4f0:	f003 ff2a 	bl	4348 <am_hal_ctimer_read>
     4f4:	6178      	str	r0, [r7, #20]


	/* If a context switch is pending or a task is waiting for the scheduler
	to be unsuspended then abandon the low power entry. */
    /* Abandon low power entry if the sleep time is too short */
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
     4f6:	f001 fdbd 	bl	2074 <eTaskConfirmSleepModeStatus>
     4fa:	4603      	mov	r3, r0
     4fc:	2b00      	cmp	r3, #0
     4fe:	d006      	beq.n	50e <vPortSuppressTicksAndSleep+0x5e>
     500:	4b39      	ldr	r3, [pc, #228]	; (5e8 <vPortSuppressTicksAndSleep+0x138>)
     502:	681a      	ldr	r2, [r3, #0]
     504:	697b      	ldr	r3, [r7, #20]
     506:	441a      	add	r2, r3
     508:	69bb      	ldr	r3, [r7, #24]
     50a:	429a      	cmp	r2, r3
     50c:	d906      	bls.n	51c <vPortSuppressTicksAndSleep+0x6c>
	{
#ifndef AM_FREERTOS_USE_STIMER_FOR_TICK 
        am_hal_ctimer_start(AM_FREERTOS_CTIMER_NUM, AM_HAL_CTIMER_BOTH);
     50e:	f04f 31ff 	mov.w	r1, #4294967295
     512:	2003      	movs	r0, #3
     514:	f003 fef0 	bl	42f8 <am_hal_ctimer_start>
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
     518:	b662      	cpsie	i
     51a:	e05f      	b.n	5dc <vPortSuppressTicksAndSleep+0x12c>
	}
	else
	{
        // Adjust for the time already elapsed
        ulReloadValue -= elapsed_time;
     51c:	69ba      	ldr	r2, [r7, #24]
     51e:	697b      	ldr	r3, [r7, #20]
     520:	1ad3      	subs	r3, r2, r3
     522:	61bb      	str	r3, [r7, #24]
        // Initialize new timeout value
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK 
        am_hal_stimer_compare_delta_set(0, ulReloadValue);
#else
        am_hal_ctimer_clear(AM_FREERTOS_CTIMER_NUM, AM_HAL_CTIMER_BOTH);
     524:	f04f 31ff 	mov.w	r1, #4294967295
     528:	2003      	movs	r0, #3
     52a:	f003 ff03 	bl	4334 <am_hal_ctimer_clear>
        am_hal_ctimer_compare_set(AM_FREERTOS_CTIMER_NUM, AM_HAL_CTIMER_BOTH, 0, ulReloadValue);
     52e:	69bb      	ldr	r3, [r7, #24]
     530:	2200      	movs	r2, #0
     532:	f04f 31ff 	mov.w	r1, #4294967295
     536:	2003      	movs	r0, #3
     538:	f003 ff5c 	bl	43f4 <am_hal_ctimer_compare_set>
        am_hal_ctimer_start(AM_FREERTOS_CTIMER_NUM, AM_HAL_CTIMER_BOTH);
     53c:	f04f 31ff 	mov.w	r1, #4294967295
     540:	2003      	movs	r0, #3
     542:	f003 fed9 	bl	42f8 <am_hal_ctimer_start>
		/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
		set its parameter to 0 to indicate that its implementation contains
		its own wait for interrupt or wait for event instruction, and so wfi
		should not be executed again.  However, the original expected idle
		time variable must remain unmodified, so a copy is taken. */
		xModifiableIdleTime = xExpectedIdleTime;
     546:	687b      	ldr	r3, [r7, #4]
     548:	613b      	str	r3, [r7, #16]

		configPRE_SLEEP_PROCESSING( xModifiableIdleTime );       // Turn OFF all Periphials in this function
     54a:	6938      	ldr	r0, [r7, #16]
     54c:	f002 fddf 	bl	310e <am_freertos_sleep>
     550:	6138      	str	r0, [r7, #16]

		if( xModifiableIdleTime > 0 )
     552:	693b      	ldr	r3, [r7, #16]
     554:	2b00      	cmp	r3, #0
     556:	d004      	beq.n	562 <vPortSuppressTicksAndSleep+0xb2>
		{
			__asm volatile( "dsb" );
     558:	f3bf 8f4f 	dsb	sy
			__asm volatile( "wfi" );
     55c:	bf30      	wfi
			__asm volatile( "isb" );
     55e:	f3bf 8f6f 	isb	sy
		}

		configPOST_SLEEP_PROCESSING( xExpectedIdleTime );       // Turn ON all Periphials in this function
     562:	6878      	ldr	r0, [r7, #4]
     564:	f002 fddf 	bl	3126 <am_freertos_wakeup>
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK 
        New_Timer = am_hal_stimer_counter_get();
        Delta_Sleep = (signed long) New_Timer - (signed long) g_lastSTimerVal;
        g_lastSTimerVal = New_Timer - Delta_Sleep%ulTimerCountsForOneTick;
#else
        am_hal_ctimer_stop(AM_FREERTOS_CTIMER_NUM, AM_HAL_CTIMER_BOTH);
     568:	f04f 31ff 	mov.w	r1, #4294967295
     56c:	2003      	movs	r0, #3
     56e:	f003 fed5 	bl	431c <am_hal_ctimer_stop>
        New_Timer = am_hal_ctimer_read(AM_FREERTOS_CTIMER_NUM, AM_HAL_CTIMER_BOTH);
     572:	f04f 31ff 	mov.w	r1, #4294967295
     576:	2003      	movs	r0, #3
     578:	f003 fee6 	bl	4348 <am_hal_ctimer_read>
     57c:	60f8      	str	r0, [r7, #12]
        // INTSTAT check is needed to handle a possible case where the we came here without timer
        // incrementing at all....the value will still say 0, but it does not mean it expired
        if ((New_Timer == 0) && ((am_hal_ctimer_int_status_get(false) & (1 << AM_FREERTOS_CTIMER_NUM*2))))
     57e:	68fb      	ldr	r3, [r7, #12]
     580:	2b00      	cmp	r3, #0
     582:	d10d      	bne.n	5a0 <vPortSuppressTicksAndSleep+0xf0>
     584:	2000      	movs	r0, #0
     586:	f003 ff85 	bl	4494 <am_hal_ctimer_int_status_get>
     58a:	4603      	mov	r3, r0
     58c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     590:	2b00      	cmp	r3, #0
     592:	d005      	beq.n	5a0 <vPortSuppressTicksAndSleep+0xf0>
        {
            // The timer ran to completion and reset itself
            Delta_Sleep = ulReloadValue;
     594:	69bb      	ldr	r3, [r7, #24]
     596:	61fb      	str	r3, [r7, #28]
            // Clear the INTSTAT to prevent interrupt handler from counting an extra tick
            am_hal_ctimer_int_clear((1 << AM_FREERTOS_CTIMER_NUM*2));
     598:	2040      	movs	r0, #64	; 0x40
     59a:	f003 ff75 	bl	4488 <am_hal_ctimer_int_clear>
     59e:	e001      	b.n	5a4 <vPortSuppressTicksAndSleep+0xf4>
        } else
        {
            Delta_Sleep = New_Timer; // Indicates the time elapsed since we slept
     5a0:	68fb      	ldr	r3, [r7, #12]
     5a2:	61fb      	str	r3, [r7, #28]
        }
#endif

        Delta_Sleep /= ulTimerCountsForOneTick;
     5a4:	4b10      	ldr	r3, [pc, #64]	; (5e8 <vPortSuppressTicksAndSleep+0x138>)
     5a6:	681b      	ldr	r3, [r3, #0]
     5a8:	69fa      	ldr	r2, [r7, #28]
     5aa:	fbb2 f3f3 	udiv	r3, r2, r3
     5ae:	61fb      	str	r3, [r7, #28]

        // Correct System Tick after Sleep
        vTaskStepTick( Delta_Sleep );
     5b0:	69f8      	ldr	r0, [r7, #28]
     5b2:	f001 fa69 	bl	1a88 <vTaskStepTick>

        // Clear the interrupt - to avoid extra tick counting in ISR 
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
        am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
#else
        am_hal_ctimer_clear(AM_FREERTOS_CTIMER_NUM, AM_HAL_CTIMER_BOTH);
     5b6:	f04f 31ff 	mov.w	r1, #4294967295
     5ba:	2003      	movs	r0, #3
     5bc:	f003 feba 	bl	4334 <am_hal_ctimer_clear>
        am_hal_ctimer_compare_set(AM_FREERTOS_CTIMER_NUM, AM_HAL_CTIMER_BOTH, 0, ulTimerCountsForOneTick);
     5c0:	4b09      	ldr	r3, [pc, #36]	; (5e8 <vPortSuppressTicksAndSleep+0x138>)
     5c2:	681b      	ldr	r3, [r3, #0]
     5c4:	2200      	movs	r2, #0
     5c6:	f04f 31ff 	mov.w	r1, #4294967295
     5ca:	2003      	movs	r0, #3
     5cc:	f003 ff12 	bl	43f4 <am_hal_ctimer_compare_set>


        am_hal_ctimer_start(AM_FREERTOS_CTIMER_NUM, AM_HAL_CTIMER_BOTH);
     5d0:	f04f 31ff 	mov.w	r1, #4294967295
     5d4:	2003      	movs	r0, #3
     5d6:	f003 fe8f 	bl	42f8 <am_hal_ctimer_start>
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
     5da:	b662      	cpsie	i
                
	}
}
     5dc:	bf00      	nop
     5de:	3720      	adds	r7, #32
     5e0:	46bd      	mov	sp, r7
     5e2:	bd80      	pop	{r7, pc}
     5e4:	1000233c 	.word	0x1000233c
     5e8:	10002338 	.word	0x10002338

000005ec <xPortCTimer0TickHandler>:
// Events associated with CTimer 0
//
//*****************************************************************************
void
xPortCTimer0TickHandler(void)
{
     5ec:	b580      	push	{r7, lr}
     5ee:	b084      	sub	sp, #16
     5f0:	af00      	add	r7, sp, #0
    // Restart the one-shot timer for next 'tick'
    am_hal_ctimer_clear(AM_FREERTOS_CTIMER_NUM, AM_HAL_CTIMER_BOTH);
     5f2:	f04f 31ff 	mov.w	r1, #4294967295
     5f6:	2003      	movs	r0, #3
     5f8:	f003 fe9c 	bl	4334 <am_hal_ctimer_clear>
    am_hal_ctimer_compare_set(AM_FREERTOS_CTIMER_NUM, AM_HAL_CTIMER_BOTH, 0, ulTimerCountsForOneTick);
     5fc:	4b15      	ldr	r3, [pc, #84]	; (654 <xPortCTimer0TickHandler+0x68>)
     5fe:	681b      	ldr	r3, [r3, #0]
     600:	2200      	movs	r2, #0
     602:	f04f 31ff 	mov.w	r1, #4294967295
     606:	2003      	movs	r0, #3
     608:	f003 fef4 	bl	43f4 <am_hal_ctimer_compare_set>
    am_hal_ctimer_start(AM_FREERTOS_CTIMER_NUM, AM_HAL_CTIMER_BOTH);
     60c:	f04f 31ff 	mov.w	r1, #4294967295
     610:	2003      	movs	r0, #3
     612:	f003 fe71 	bl	42f8 <am_hal_ctimer_start>
	__asm volatile
     616:	f3ef 8211 	mrs	r2, BASEPRI
     61a:	f04f 0380 	mov.w	r3, #128	; 0x80
     61e:	f383 8811 	msr	BASEPRI, r3
     622:	f3bf 8f6f 	isb	sy
     626:	f3bf 8f4f 	dsb	sy
     62a:	60fa      	str	r2, [r7, #12]
     62c:	60bb      	str	r3, [r7, #8]
	// End addition
    {
        //
        // Increment RTOS tick
        //
        if ( xTaskIncrementTick() != pdFALSE )
     62e:	f001 fa49 	bl	1ac4 <xTaskIncrementTick>
     632:	4603      	mov	r3, r0
     634:	2b00      	cmp	r3, #0
     636:	d003      	beq.n	640 <xPortCTimer0TickHandler+0x54>
            //
            // A context switch is required.  Context switching is
            // performed in the PendSV interrupt. Pend the PendSV
            // interrupt.
            //
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
     638:	4b07      	ldr	r3, [pc, #28]	; (658 <xPortCTimer0TickHandler+0x6c>)
     63a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     63e:	601a      	str	r2, [r3, #0]
     640:	2300      	movs	r3, #0
     642:	607b      	str	r3, [r7, #4]
	__asm volatile
     644:	687b      	ldr	r3, [r7, #4]
     646:	f383 8811 	msr	BASEPRI, r3
        }
		// End addition
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(0);

}
     64a:	bf00      	nop
     64c:	3710      	adds	r7, #16
     64e:	46bd      	mov	sp, r7
     650:	bd80      	pop	{r7, pc}
     652:	bf00      	nop
     654:	10002338 	.word	0x10002338
     658:	e000ed04 	.word	0xe000ed04

0000065c <vPortSetupTimerInterrupt>:

#endif // AM_FREERTOS_USE_STIMER_FOR_TICK


void vPortSetupTimerInterrupt( void )
{
     65c:	b580      	push	{r7, lr}
     65e:	b084      	sub	sp, #16
     660:	af00      	add	r7, sp, #0
#else

    /* Calculate the constants required to configure the tick interrupt. */
    #if configUSE_TICKLESS_IDLE == 2
    {
        ulTimerCountsForOneTick = ( configCTIMER_CLOCK_HZ/configTICK_RATE_HZ) ;
     662:	4b1a      	ldr	r3, [pc, #104]	; (6cc <vPortSetupTimerInterrupt+0x70>)
     664:	2220      	movs	r2, #32
     666:	601a      	str	r2, [r3, #0]
        xMaximumPossibleSuppressedTicks = portMAX_32_BIT_NUMBER / ulTimerCountsForOneTick;
     668:	4b18      	ldr	r3, [pc, #96]	; (6cc <vPortSetupTimerInterrupt+0x70>)
     66a:	681b      	ldr	r3, [r3, #0]
     66c:	f04f 32ff 	mov.w	r2, #4294967295
     670:	fbb2 f3f3 	udiv	r3, r2, r3
     674:	4a16      	ldr	r2, [pc, #88]	; (6d0 <vPortSetupTimerInterrupt+0x74>)
     676:	6013      	str	r3, [r2, #0]
    }
    #endif /* configUSE_TICKLESS_IDLE */

    am_hal_ctimer_config_t cTimer0Config =
     678:	4a16      	ldr	r2, [pc, #88]	; (6d4 <vPortSetupTimerInterrupt+0x78>)
     67a:	1d3b      	adds	r3, r7, #4
     67c:	ca07      	ldmia	r2, {r0, r1, r2}
     67e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    };
    
    //
    // Configure the timer frequency and mode.
    //
    am_hal_ctimer_config(AM_FREERTOS_CTIMER_NUM, &cTimer0Config);
     682:	1d3b      	adds	r3, r7, #4
     684:	4619      	mov	r1, r3
     686:	2003      	movs	r0, #3
     688:	f003 fe20 	bl	42cc <am_hal_ctimer_config>
    
    //
    // Set the timeout interval
    //
    am_hal_ctimer_compare_set(AM_FREERTOS_CTIMER_NUM, AM_HAL_CTIMER_BOTH, 0, ulTimerCountsForOneTick);
     68c:	4b0f      	ldr	r3, [pc, #60]	; (6cc <vPortSetupTimerInterrupt+0x70>)
     68e:	681b      	ldr	r3, [r3, #0]
     690:	2200      	movs	r2, #0
     692:	f04f 31ff 	mov.w	r1, #4294967295
     696:	2003      	movs	r0, #3
     698:	f003 feac 	bl	43f4 <am_hal_ctimer_compare_set>
    
    //
    // Enable the interrupt for timer A0
    //
    am_hal_ctimer_int_enable(AM_FREERTOS_CTIMER_INT);
     69c:	2040      	movs	r0, #64	; 0x40
     69e:	f003 feeb 	bl	4478 <am_hal_ctimer_int_enable>
    
    //
    // Enable the timer interrupt in the NVIC, making sure to use the
    // appropriate priority level.
    //
    am_hal_interrupt_priority_set(AM_HAL_INTERRUPT_CTIMER, configKERNEL_INTERRUPT_PRIORITY);
     6a2:	21e0      	movs	r1, #224	; 0xe0
     6a4:	201a      	movs	r0, #26
     6a6:	f003 ffc1 	bl	462c <am_hal_interrupt_priority_set>
    am_hal_ctimer_int_register(AM_FREERTOS_CTIMER_INT, xPortCTimer0TickHandler);
     6aa:	490b      	ldr	r1, [pc, #44]	; (6d8 <vPortSetupTimerInterrupt+0x7c>)
     6ac:	2040      	movs	r0, #64	; 0x40
     6ae:	f003 fdbf 	bl	4230 <am_hal_ctimer_int_register>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_CTIMER);
     6b2:	201a      	movs	r0, #26
     6b4:	f003 ff92 	bl	45dc <am_hal_interrupt_enable>
    
    //
    // Enable the timer.
    //
    am_hal_ctimer_start(AM_FREERTOS_CTIMER_NUM, AM_HAL_CTIMER_BOTH);
     6b8:	f04f 31ff 	mov.w	r1, #4294967295
     6bc:	2003      	movs	r0, #3
     6be:	f003 fe1b 	bl	42f8 <am_hal_ctimer_start>
    

#endif // AM_FREERTOS_USE_STIMER_FOR_TICK
}
     6c2:	bf00      	nop
     6c4:	3710      	adds	r7, #16
     6c6:	46bd      	mov	sp, r7
     6c8:	bd80      	pop	{r7, pc}
     6ca:	bf00      	nop
     6cc:	10002338 	.word	0x10002338
     6d0:	1000233c 	.word	0x1000233c
     6d4:	000049a8 	.word	0x000049a8
     6d8:	000005ed 	.word	0x000005ed

000006dc <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     6dc:	b580      	push	{r7, lr}
     6de:	b088      	sub	sp, #32
     6e0:	af00      	add	r7, sp, #0
     6e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
     6e4:	2300      	movs	r3, #0
     6e6:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
     6e8:	f001 f8e4 	bl	18b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     6ec:	4b40      	ldr	r3, [pc, #256]	; (7f0 <pvPortMalloc+0x114>)
     6ee:	681b      	ldr	r3, [r3, #0]
     6f0:	2b00      	cmp	r3, #0
     6f2:	d104      	bne.n	6fe <pvPortMalloc+0x22>
		{
			prvHeapInit();
     6f4:	f000 f8be 	bl	874 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
     6f8:	4b3d      	ldr	r3, [pc, #244]	; (7f0 <pvPortMalloc+0x114>)
     6fa:	2201      	movs	r2, #1
     6fc:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     6fe:	687b      	ldr	r3, [r7, #4]
     700:	2b00      	cmp	r3, #0
     702:	d00e      	beq.n	722 <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
     704:	2308      	movs	r3, #8
     706:	461a      	mov	r2, r3
     708:	687b      	ldr	r3, [r7, #4]
     70a:	4413      	add	r3, r2
     70c:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
     70e:	687b      	ldr	r3, [r7, #4]
     710:	f003 0307 	and.w	r3, r3, #7
     714:	2b00      	cmp	r3, #0
     716:	d004      	beq.n	722 <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     718:	687b      	ldr	r3, [r7, #4]
     71a:	f023 0307 	bic.w	r3, r3, #7
     71e:	3308      	adds	r3, #8
     720:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     722:	687b      	ldr	r3, [r7, #4]
     724:	2b00      	cmp	r3, #0
     726:	d057      	beq.n	7d8 <pvPortMalloc+0xfc>
     728:	687b      	ldr	r3, [r7, #4]
     72a:	f643 72f7 	movw	r2, #16375	; 0x3ff7
     72e:	4293      	cmp	r3, r2
     730:	d852      	bhi.n	7d8 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
     732:	4b30      	ldr	r3, [pc, #192]	; (7f4 <pvPortMalloc+0x118>)
     734:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
     736:	4b2f      	ldr	r3, [pc, #188]	; (7f4 <pvPortMalloc+0x118>)
     738:	681b      	ldr	r3, [r3, #0]
     73a:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     73c:	e004      	b.n	748 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
     73e:	69fb      	ldr	r3, [r7, #28]
     740:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
     742:	69fb      	ldr	r3, [r7, #28]
     744:	681b      	ldr	r3, [r3, #0]
     746:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     748:	69fb      	ldr	r3, [r7, #28]
     74a:	685a      	ldr	r2, [r3, #4]
     74c:	687b      	ldr	r3, [r7, #4]
     74e:	429a      	cmp	r2, r3
     750:	d203      	bcs.n	75a <pvPortMalloc+0x7e>
     752:	69fb      	ldr	r3, [r7, #28]
     754:	681b      	ldr	r3, [r3, #0]
     756:	2b00      	cmp	r3, #0
     758:	d1f1      	bne.n	73e <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
     75a:	69fb      	ldr	r3, [r7, #28]
     75c:	4a26      	ldr	r2, [pc, #152]	; (7f8 <pvPortMalloc+0x11c>)
     75e:	4293      	cmp	r3, r2
     760:	d03a      	beq.n	7d8 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     762:	69bb      	ldr	r3, [r7, #24]
     764:	681b      	ldr	r3, [r3, #0]
     766:	2208      	movs	r2, #8
     768:	4413      	add	r3, r2
     76a:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     76c:	69fb      	ldr	r3, [r7, #28]
     76e:	681a      	ldr	r2, [r3, #0]
     770:	69bb      	ldr	r3, [r7, #24]
     772:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     774:	69fb      	ldr	r3, [r7, #28]
     776:	685a      	ldr	r2, [r3, #4]
     778:	687b      	ldr	r3, [r7, #4]
     77a:	1ad3      	subs	r3, r2, r3
     77c:	2208      	movs	r2, #8
     77e:	0052      	lsls	r2, r2, #1
     780:	4293      	cmp	r3, r2
     782:	d922      	bls.n	7ca <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     784:	69fa      	ldr	r2, [r7, #28]
     786:	687b      	ldr	r3, [r7, #4]
     788:	4413      	add	r3, r2
     78a:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     78c:	69fb      	ldr	r3, [r7, #28]
     78e:	685a      	ldr	r2, [r3, #4]
     790:	687b      	ldr	r3, [r7, #4]
     792:	1ad2      	subs	r2, r2, r3
     794:	68fb      	ldr	r3, [r7, #12]
     796:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
     798:	69fb      	ldr	r3, [r7, #28]
     79a:	687a      	ldr	r2, [r7, #4]
     79c:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     79e:	68fb      	ldr	r3, [r7, #12]
     7a0:	685b      	ldr	r3, [r3, #4]
     7a2:	60bb      	str	r3, [r7, #8]
     7a4:	4b13      	ldr	r3, [pc, #76]	; (7f4 <pvPortMalloc+0x118>)
     7a6:	613b      	str	r3, [r7, #16]
     7a8:	e002      	b.n	7b0 <pvPortMalloc+0xd4>
     7aa:	693b      	ldr	r3, [r7, #16]
     7ac:	681b      	ldr	r3, [r3, #0]
     7ae:	613b      	str	r3, [r7, #16]
     7b0:	693b      	ldr	r3, [r7, #16]
     7b2:	681b      	ldr	r3, [r3, #0]
     7b4:	685a      	ldr	r2, [r3, #4]
     7b6:	68bb      	ldr	r3, [r7, #8]
     7b8:	429a      	cmp	r2, r3
     7ba:	d3f6      	bcc.n	7aa <pvPortMalloc+0xce>
     7bc:	693b      	ldr	r3, [r7, #16]
     7be:	681a      	ldr	r2, [r3, #0]
     7c0:	68fb      	ldr	r3, [r7, #12]
     7c2:	601a      	str	r2, [r3, #0]
     7c4:	693b      	ldr	r3, [r7, #16]
     7c6:	68fa      	ldr	r2, [r7, #12]
     7c8:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
     7ca:	4b0c      	ldr	r3, [pc, #48]	; (7fc <pvPortMalloc+0x120>)
     7cc:	681a      	ldr	r2, [r3, #0]
     7ce:	69fb      	ldr	r3, [r7, #28]
     7d0:	685b      	ldr	r3, [r3, #4]
     7d2:	1ad3      	subs	r3, r2, r3
     7d4:	4a09      	ldr	r2, [pc, #36]	; (7fc <pvPortMalloc+0x120>)
     7d6:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     7d8:	f001 f8b2 	bl	1940 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     7dc:	697b      	ldr	r3, [r7, #20]
     7de:	2b00      	cmp	r3, #0
     7e0:	d101      	bne.n	7e6 <pvPortMalloc+0x10a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     7e2:	f002 fcaa 	bl	313a <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
     7e6:	697b      	ldr	r3, [r7, #20]
}
     7e8:	4618      	mov	r0, r3
     7ea:	3720      	adds	r7, #32
     7ec:	46bd      	mov	sp, r7
     7ee:	bd80      	pop	{r7, pc}
     7f0:	10006350 	.word	0x10006350
     7f4:	10006340 	.word	0x10006340
     7f8:	10006348 	.word	0x10006348
     7fc:	10002304 	.word	0x10002304

00000800 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     800:	b580      	push	{r7, lr}
     802:	b086      	sub	sp, #24
     804:	af00      	add	r7, sp, #0
     806:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
     808:	687b      	ldr	r3, [r7, #4]
     80a:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
     80c:	687b      	ldr	r3, [r7, #4]
     80e:	2b00      	cmp	r3, #0
     810:	d027      	beq.n	862 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
     812:	2308      	movs	r3, #8
     814:	425b      	negs	r3, r3
     816:	693a      	ldr	r2, [r7, #16]
     818:	4413      	add	r3, r2
     81a:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
     81c:	693b      	ldr	r3, [r7, #16]
     81e:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
     820:	f001 f848 	bl	18b4 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     824:	68fb      	ldr	r3, [r7, #12]
     826:	685b      	ldr	r3, [r3, #4]
     828:	60bb      	str	r3, [r7, #8]
     82a:	4b10      	ldr	r3, [pc, #64]	; (86c <vPortFree+0x6c>)
     82c:	617b      	str	r3, [r7, #20]
     82e:	e002      	b.n	836 <vPortFree+0x36>
     830:	697b      	ldr	r3, [r7, #20]
     832:	681b      	ldr	r3, [r3, #0]
     834:	617b      	str	r3, [r7, #20]
     836:	697b      	ldr	r3, [r7, #20]
     838:	681b      	ldr	r3, [r3, #0]
     83a:	685a      	ldr	r2, [r3, #4]
     83c:	68bb      	ldr	r3, [r7, #8]
     83e:	429a      	cmp	r2, r3
     840:	d3f6      	bcc.n	830 <vPortFree+0x30>
     842:	697b      	ldr	r3, [r7, #20]
     844:	681a      	ldr	r2, [r3, #0]
     846:	68fb      	ldr	r3, [r7, #12]
     848:	601a      	str	r2, [r3, #0]
     84a:	697b      	ldr	r3, [r7, #20]
     84c:	68fa      	ldr	r2, [r7, #12]
     84e:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
     850:	68fb      	ldr	r3, [r7, #12]
     852:	685a      	ldr	r2, [r3, #4]
     854:	4b06      	ldr	r3, [pc, #24]	; (870 <vPortFree+0x70>)
     856:	681b      	ldr	r3, [r3, #0]
     858:	4413      	add	r3, r2
     85a:	4a05      	ldr	r2, [pc, #20]	; (870 <vPortFree+0x70>)
     85c:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
     85e:	f001 f86f 	bl	1940 <xTaskResumeAll>
	}
}
     862:	bf00      	nop
     864:	3718      	adds	r7, #24
     866:	46bd      	mov	sp, r7
     868:	bd80      	pop	{r7, pc}
     86a:	bf00      	nop
     86c:	10006340 	.word	0x10006340
     870:	10002304 	.word	0x10002304

00000874 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
     874:	b480      	push	{r7}
     876:	b083      	sub	sp, #12
     878:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     87a:	4b10      	ldr	r3, [pc, #64]	; (8bc <prvHeapInit+0x48>)
     87c:	f023 0307 	bic.w	r3, r3, #7
     880:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     882:	4a0f      	ldr	r2, [pc, #60]	; (8c0 <prvHeapInit+0x4c>)
     884:	687b      	ldr	r3, [r7, #4]
     886:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
     888:	4b0d      	ldr	r3, [pc, #52]	; (8c0 <prvHeapInit+0x4c>)
     88a:	2200      	movs	r2, #0
     88c:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     88e:	4b0d      	ldr	r3, [pc, #52]	; (8c4 <prvHeapInit+0x50>)
     890:	f643 72f8 	movw	r2, #16376	; 0x3ff8
     894:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
     896:	4b0b      	ldr	r3, [pc, #44]	; (8c4 <prvHeapInit+0x50>)
     898:	2200      	movs	r2, #0
     89a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
     89c:	687b      	ldr	r3, [r7, #4]
     89e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     8a0:	683b      	ldr	r3, [r7, #0]
     8a2:	f643 72f8 	movw	r2, #16376	; 0x3ff8
     8a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     8a8:	683b      	ldr	r3, [r7, #0]
     8aa:	4a06      	ldr	r2, [pc, #24]	; (8c4 <prvHeapInit+0x50>)
     8ac:	601a      	str	r2, [r3, #0]
}
     8ae:	bf00      	nop
     8b0:	370c      	adds	r7, #12
     8b2:	46bd      	mov	sp, r7
     8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b8:	4770      	bx	lr
     8ba:	bf00      	nop
     8bc:	10002348 	.word	0x10002348
     8c0:	10006340 	.word	0x10006340
     8c4:	10006348 	.word	0x10006348

000008c8 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
     8c8:	b580      	push	{r7, lr}
     8ca:	b082      	sub	sp, #8
     8cc:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
     8ce:	2018      	movs	r0, #24
     8d0:	f7ff ff04 	bl	6dc <pvPortMalloc>
     8d4:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
     8d6:	687b      	ldr	r3, [r7, #4]
     8d8:	2b00      	cmp	r3, #0
     8da:	d007      	beq.n	8ec <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
     8dc:	687b      	ldr	r3, [r7, #4]
     8de:	2200      	movs	r2, #0
     8e0:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
     8e2:	687b      	ldr	r3, [r7, #4]
     8e4:	3304      	adds	r3, #4
     8e6:	4618      	mov	r0, r3
     8e8:	f000 f950 	bl	b8c <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
     8ec:	687b      	ldr	r3, [r7, #4]
	}
     8ee:	4618      	mov	r0, r3
     8f0:	3708      	adds	r7, #8
     8f2:	46bd      	mov	sp, r7
     8f4:	bd80      	pop	{r7, pc}
	...

000008f8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
     8f8:	b580      	push	{r7, lr}
     8fa:	b08c      	sub	sp, #48	; 0x30
     8fc:	af00      	add	r7, sp, #0
     8fe:	60f8      	str	r0, [r7, #12]
     900:	60b9      	str	r1, [r7, #8]
     902:	607a      	str	r2, [r7, #4]
     904:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     906:	68fb      	ldr	r3, [r7, #12]
     908:	627b      	str	r3, [r7, #36]	; 0x24
EventBits_t uxReturn, uxControlBits = 0;
     90a:	2300      	movs	r3, #0
     90c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
     90e:	2300      	movs	r3, #0
     910:	623b      	str	r3, [r7, #32]

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
     912:	68fb      	ldr	r3, [r7, #12]
     914:	2b00      	cmp	r3, #0
     916:	d100      	bne.n	91a <xEventGroupWaitBits+0x22>
     918:	e7fe      	b.n	918 <xEventGroupWaitBits+0x20>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
     91a:	68bb      	ldr	r3, [r7, #8]
     91c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
     920:	2b00      	cmp	r3, #0
     922:	d000      	beq.n	926 <xEventGroupWaitBits+0x2e>
     924:	e7fe      	b.n	924 <xEventGroupWaitBits+0x2c>
	configASSERT( uxBitsToWaitFor != 0 );
     926:	68bb      	ldr	r3, [r7, #8]
     928:	2b00      	cmp	r3, #0
     92a:	d100      	bne.n	92e <xEventGroupWaitBits+0x36>
     92c:	e7fe      	b.n	92c <xEventGroupWaitBits+0x34>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     92e:	f001 fc37 	bl	21a0 <xTaskGetSchedulerState>
     932:	4603      	mov	r3, r0
     934:	2b00      	cmp	r3, #0
     936:	d102      	bne.n	93e <xEventGroupWaitBits+0x46>
     938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     93a:	2b00      	cmp	r3, #0
     93c:	d101      	bne.n	942 <xEventGroupWaitBits+0x4a>
     93e:	2301      	movs	r3, #1
     940:	e000      	b.n	944 <xEventGroupWaitBits+0x4c>
     942:	2300      	movs	r3, #0
     944:	2b00      	cmp	r3, #0
     946:	d100      	bne.n	94a <xEventGroupWaitBits+0x52>
     948:	e7fe      	b.n	948 <xEventGroupWaitBits+0x50>
	}
	#endif

	vTaskSuspendAll();
     94a:	f000 ffb3 	bl	18b4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
     94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     950:	681b      	ldr	r3, [r3, #0]
     952:	61fb      	str	r3, [r7, #28]

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
     954:	683a      	ldr	r2, [r7, #0]
     956:	68b9      	ldr	r1, [r7, #8]
     958:	69f8      	ldr	r0, [r7, #28]
     95a:	f000 f8f5 	bl	b48 <prvTestWaitCondition>
     95e:	61b8      	str	r0, [r7, #24]

		if( xWaitConditionMet != pdFALSE )
     960:	69bb      	ldr	r3, [r7, #24]
     962:	2b00      	cmp	r3, #0
     964:	d00e      	beq.n	984 <xEventGroupWaitBits+0x8c>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
     966:	69fb      	ldr	r3, [r7, #28]
     968:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTicksToWait = ( TickType_t ) 0;
     96a:	2300      	movs	r3, #0
     96c:	63bb      	str	r3, [r7, #56]	; 0x38

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
     96e:	687b      	ldr	r3, [r7, #4]
     970:	2b00      	cmp	r3, #0
     972:	d026      	beq.n	9c2 <xEventGroupWaitBits+0xca>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     976:	681a      	ldr	r2, [r3, #0]
     978:	68bb      	ldr	r3, [r7, #8]
     97a:	43db      	mvns	r3, r3
     97c:	401a      	ands	r2, r3
     97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     980:	601a      	str	r2, [r3, #0]
     982:	e01e      	b.n	9c2 <xEventGroupWaitBits+0xca>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
     984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     986:	2b00      	cmp	r3, #0
     988:	d102      	bne.n	990 <xEventGroupWaitBits+0x98>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
     98a:	69fb      	ldr	r3, [r7, #28]
     98c:	62fb      	str	r3, [r7, #44]	; 0x2c
     98e:	e018      	b.n	9c2 <xEventGroupWaitBits+0xca>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
     990:	687b      	ldr	r3, [r7, #4]
     992:	2b00      	cmp	r3, #0
     994:	d003      	beq.n	99e <xEventGroupWaitBits+0xa6>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
     996:	6abb      	ldr	r3, [r7, #40]	; 0x28
     998:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
     99c:	62bb      	str	r3, [r7, #40]	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
     99e:	683b      	ldr	r3, [r7, #0]
     9a0:	2b00      	cmp	r3, #0
     9a2:	d003      	beq.n	9ac <xEventGroupWaitBits+0xb4>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
     9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
     9a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
     9aa:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
     9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9ae:	1d18      	adds	r0, r3, #4
     9b0:	68ba      	ldr	r2, [r7, #8]
     9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
     9b4:	4313      	orrs	r3, r2
     9b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
     9b8:	4619      	mov	r1, r3
     9ba:	f001 f9b9 	bl	1d30 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
     9be:	2300      	movs	r3, #0
     9c0:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     9c2:	f000 ffbd 	bl	1940 <xTaskResumeAll>
     9c6:	6178      	str	r0, [r7, #20]

	if( xTicksToWait != ( TickType_t ) 0 )
     9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     9ca:	2b00      	cmp	r3, #0
     9cc:	d031      	beq.n	a32 <xEventGroupWaitBits+0x13a>
	{
		if( xAlreadyYielded == pdFALSE )
     9ce:	697b      	ldr	r3, [r7, #20]
     9d0:	2b00      	cmp	r3, #0
     9d2:	d107      	bne.n	9e4 <xEventGroupWaitBits+0xec>
		{
			portYIELD_WITHIN_API();
     9d4:	4b19      	ldr	r3, [pc, #100]	; (a3c <xEventGroupWaitBits+0x144>)
     9d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     9da:	601a      	str	r2, [r3, #0]
     9dc:	f3bf 8f4f 	dsb	sy
     9e0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     9e4:	f001 fbfa 	bl	21dc <uxTaskResetEventItemValue>
     9e8:	62f8      	str	r0, [r7, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     9ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     9f0:	2b00      	cmp	r3, #0
     9f2:	d11a      	bne.n	a2a <xEventGroupWaitBits+0x132>
		{
			taskENTER_CRITICAL();
     9f4:	f7ff fc96 	bl	324 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9fa:	681b      	ldr	r3, [r3, #0]
     9fc:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
     9fe:	683a      	ldr	r2, [r7, #0]
     a00:	68b9      	ldr	r1, [r7, #8]
     a02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
     a04:	f000 f8a0 	bl	b48 <prvTestWaitCondition>
     a08:	4603      	mov	r3, r0
     a0a:	2b00      	cmp	r3, #0
     a0c:	d009      	beq.n	a22 <xEventGroupWaitBits+0x12a>
				{
					if( xClearOnExit != pdFALSE )
     a0e:	687b      	ldr	r3, [r7, #4]
     a10:	2b00      	cmp	r3, #0
     a12:	d006      	beq.n	a22 <xEventGroupWaitBits+0x12a>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a16:	681a      	ldr	r2, [r3, #0]
     a18:	68bb      	ldr	r3, [r7, #8]
     a1a:	43db      	mvns	r3, r3
     a1c:	401a      	ands	r2, r3
     a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a20:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     a22:	f7ff fca5 	bl	370 <vPortExitCritical>

			/* Prevent compiler warnings when trace macros are not used. */
			xTimeoutOccurred = pdFALSE;
     a26:	2300      	movs	r3, #0
     a28:	623b      	str	r3, [r7, #32]
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     a30:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
     a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
     a34:	4618      	mov	r0, r3
     a36:	3730      	adds	r7, #48	; 0x30
     a38:	46bd      	mov	sp, r7
     a3a:	bd80      	pop	{r7, pc}
     a3c:	e000ed04 	.word	0xe000ed04

00000a40 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     a40:	b580      	push	{r7, lr}
     a42:	b08c      	sub	sp, #48	; 0x30
     a44:	af00      	add	r7, sp, #0
     a46:	6078      	str	r0, [r7, #4]
     a48:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     a4a:	2300      	movs	r3, #0
     a4c:	62bb      	str	r3, [r7, #40]	; 0x28
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     a4e:	687b      	ldr	r3, [r7, #4]
     a50:	623b      	str	r3, [r7, #32]
BaseType_t xMatchFound = pdFALSE;
     a52:	2300      	movs	r3, #0
     a54:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
     a56:	687b      	ldr	r3, [r7, #4]
     a58:	2b00      	cmp	r3, #0
     a5a:	d100      	bne.n	a5e <xEventGroupSetBits+0x1e>
     a5c:	e7fe      	b.n	a5c <xEventGroupSetBits+0x1c>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
     a5e:	683b      	ldr	r3, [r7, #0]
     a60:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
     a64:	2b00      	cmp	r3, #0
     a66:	d000      	beq.n	a6a <xEventGroupSetBits+0x2a>
     a68:	e7fe      	b.n	a68 <xEventGroupSetBits+0x28>

	pxList = &( pxEventBits->xTasksWaitingForBits );
     a6a:	6a3b      	ldr	r3, [r7, #32]
     a6c:	3304      	adds	r3, #4
     a6e:	61fb      	str	r3, [r7, #28]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a70:	69fb      	ldr	r3, [r7, #28]
     a72:	3308      	adds	r3, #8
     a74:	61bb      	str	r3, [r7, #24]
	vTaskSuspendAll();
     a76:	f000 ff1d 	bl	18b4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
     a7a:	69fb      	ldr	r3, [r7, #28]
     a7c:	68db      	ldr	r3, [r3, #12]
     a7e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
     a80:	6a3b      	ldr	r3, [r7, #32]
     a82:	681a      	ldr	r2, [r3, #0]
     a84:	683b      	ldr	r3, [r7, #0]
     a86:	431a      	orrs	r2, r3
     a88:	6a3b      	ldr	r3, [r7, #32]
     a8a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     a8c:	e03c      	b.n	b08 <xEventGroupSetBits+0xc8>
		{
			pxNext = listGET_NEXT( pxListItem );
     a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a90:	685b      	ldr	r3, [r3, #4]
     a92:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a96:	681b      	ldr	r3, [r3, #0]
     a98:	613b      	str	r3, [r7, #16]
			xMatchFound = pdFALSE;
     a9a:	2300      	movs	r3, #0
     a9c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
     a9e:	693b      	ldr	r3, [r7, #16]
     aa0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
     aa4:	60fb      	str	r3, [r7, #12]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     aa6:	693b      	ldr	r3, [r7, #16]
     aa8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     aac:	613b      	str	r3, [r7, #16]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     aae:	68fb      	ldr	r3, [r7, #12]
     ab0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
     ab4:	2b00      	cmp	r3, #0
     ab6:	d108      	bne.n	aca <xEventGroupSetBits+0x8a>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     ab8:	6a3b      	ldr	r3, [r7, #32]
     aba:	681a      	ldr	r2, [r3, #0]
     abc:	693b      	ldr	r3, [r7, #16]
     abe:	4013      	ands	r3, r2
     ac0:	2b00      	cmp	r3, #0
     ac2:	d00b      	beq.n	adc <xEventGroupSetBits+0x9c>
				{
					xMatchFound = pdTRUE;
     ac4:	2301      	movs	r3, #1
     ac6:	627b      	str	r3, [r7, #36]	; 0x24
     ac8:	e008      	b.n	adc <xEventGroupSetBits+0x9c>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     aca:	6a3b      	ldr	r3, [r7, #32]
     acc:	681a      	ldr	r2, [r3, #0]
     ace:	693b      	ldr	r3, [r7, #16]
     ad0:	401a      	ands	r2, r3
     ad2:	693b      	ldr	r3, [r7, #16]
     ad4:	429a      	cmp	r2, r3
     ad6:	d101      	bne.n	adc <xEventGroupSetBits+0x9c>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
     ad8:	2301      	movs	r3, #1
     ada:	627b      	str	r3, [r7, #36]	; 0x24
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
     adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ade:	2b00      	cmp	r3, #0
     ae0:	d010      	beq.n	b04 <xEventGroupSetBits+0xc4>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     ae2:	68fb      	ldr	r3, [r7, #12]
     ae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
     ae8:	2b00      	cmp	r3, #0
     aea:	d003      	beq.n	af4 <xEventGroupSetBits+0xb4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
     aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
     aee:	693b      	ldr	r3, [r7, #16]
     af0:	4313      	orrs	r3, r2
     af2:	62bb      	str	r3, [r7, #40]	; 0x28
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     af4:	6a3b      	ldr	r3, [r7, #32]
     af6:	681b      	ldr	r3, [r3, #0]
     af8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     afc:	4619      	mov	r1, r3
     afe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
     b00:	f001 f9bc 	bl	1e7c <xTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
     b04:	697b      	ldr	r3, [r7, #20]
     b06:	62fb      	str	r3, [r7, #44]	; 0x2c
		while( pxListItem != pxListEnd )
     b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     b0a:	69bb      	ldr	r3, [r7, #24]
     b0c:	429a      	cmp	r2, r3
     b0e:	d1be      	bne.n	a8e <xEventGroupSetBits+0x4e>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     b10:	6a3b      	ldr	r3, [r7, #32]
     b12:	681a      	ldr	r2, [r3, #0]
     b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
     b16:	43db      	mvns	r3, r3
     b18:	401a      	ands	r2, r3
     b1a:	6a3b      	ldr	r3, [r7, #32]
     b1c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
     b1e:	f000 ff0f 	bl	1940 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
     b22:	6a3b      	ldr	r3, [r7, #32]
     b24:	681b      	ldr	r3, [r3, #0]
}
     b26:	4618      	mov	r0, r3
     b28:	3730      	adds	r7, #48	; 0x30
     b2a:	46bd      	mov	sp, r7
     b2c:	bd80      	pop	{r7, pc}

00000b2e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
     b2e:	b580      	push	{r7, lr}
     b30:	b082      	sub	sp, #8
     b32:	af00      	add	r7, sp, #0
     b34:	6078      	str	r0, [r7, #4]
     b36:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
     b38:	6839      	ldr	r1, [r7, #0]
     b3a:	6878      	ldr	r0, [r7, #4]
     b3c:	f7ff ff80 	bl	a40 <xEventGroupSetBits>
}
     b40:	bf00      	nop
     b42:	3708      	adds	r7, #8
     b44:	46bd      	mov	sp, r7
     b46:	bd80      	pop	{r7, pc}

00000b48 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
     b48:	b480      	push	{r7}
     b4a:	b087      	sub	sp, #28
     b4c:	af00      	add	r7, sp, #0
     b4e:	60f8      	str	r0, [r7, #12]
     b50:	60b9      	str	r1, [r7, #8]
     b52:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
     b54:	2300      	movs	r3, #0
     b56:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
     b58:	687b      	ldr	r3, [r7, #4]
     b5a:	2b00      	cmp	r3, #0
     b5c:	d107      	bne.n	b6e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     b5e:	68fa      	ldr	r2, [r7, #12]
     b60:	68bb      	ldr	r3, [r7, #8]
     b62:	4013      	ands	r3, r2
     b64:	2b00      	cmp	r3, #0
     b66:	d00a      	beq.n	b7e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
     b68:	2301      	movs	r3, #1
     b6a:	617b      	str	r3, [r7, #20]
     b6c:	e007      	b.n	b7e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     b6e:	68fa      	ldr	r2, [r7, #12]
     b70:	68bb      	ldr	r3, [r7, #8]
     b72:	401a      	ands	r2, r3
     b74:	68bb      	ldr	r3, [r7, #8]
     b76:	429a      	cmp	r2, r3
     b78:	d101      	bne.n	b7e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
     b7a:	2301      	movs	r3, #1
     b7c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
     b7e:	697b      	ldr	r3, [r7, #20]
}
     b80:	4618      	mov	r0, r3
     b82:	371c      	adds	r7, #28
     b84:	46bd      	mov	sp, r7
     b86:	f85d 7b04 	ldr.w	r7, [sp], #4
     b8a:	4770      	bx	lr

00000b8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     b8c:	b480      	push	{r7}
     b8e:	b083      	sub	sp, #12
     b90:	af00      	add	r7, sp, #0
     b92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b94:	687b      	ldr	r3, [r7, #4]
     b96:	f103 0208 	add.w	r2, r3, #8
     b9a:	687b      	ldr	r3, [r7, #4]
     b9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     b9e:	687b      	ldr	r3, [r7, #4]
     ba0:	f04f 32ff 	mov.w	r2, #4294967295
     ba4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     ba6:	687b      	ldr	r3, [r7, #4]
     ba8:	f103 0208 	add.w	r2, r3, #8
     bac:	687b      	ldr	r3, [r7, #4]
     bae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     bb0:	687b      	ldr	r3, [r7, #4]
     bb2:	f103 0208 	add.w	r2, r3, #8
     bb6:	687b      	ldr	r3, [r7, #4]
     bb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     bba:	687b      	ldr	r3, [r7, #4]
     bbc:	2200      	movs	r2, #0
     bbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     bc0:	bf00      	nop
     bc2:	370c      	adds	r7, #12
     bc4:	46bd      	mov	sp, r7
     bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
     bca:	4770      	bx	lr

00000bcc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     bcc:	b480      	push	{r7}
     bce:	b083      	sub	sp, #12
     bd0:	af00      	add	r7, sp, #0
     bd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     bd4:	687b      	ldr	r3, [r7, #4]
     bd6:	2200      	movs	r2, #0
     bd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     bda:	bf00      	nop
     bdc:	370c      	adds	r7, #12
     bde:	46bd      	mov	sp, r7
     be0:	f85d 7b04 	ldr.w	r7, [sp], #4
     be4:	4770      	bx	lr

00000be6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     be6:	b480      	push	{r7}
     be8:	b085      	sub	sp, #20
     bea:	af00      	add	r7, sp, #0
     bec:	6078      	str	r0, [r7, #4]
     bee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
     bf0:	687b      	ldr	r3, [r7, #4]
     bf2:	685b      	ldr	r3, [r3, #4]
     bf4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     bf6:	683b      	ldr	r3, [r7, #0]
     bf8:	68fa      	ldr	r2, [r7, #12]
     bfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     bfc:	68fb      	ldr	r3, [r7, #12]
     bfe:	689a      	ldr	r2, [r3, #8]
     c00:	683b      	ldr	r3, [r7, #0]
     c02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     c04:	68fb      	ldr	r3, [r7, #12]
     c06:	689b      	ldr	r3, [r3, #8]
     c08:	683a      	ldr	r2, [r7, #0]
     c0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
     c0c:	68fb      	ldr	r3, [r7, #12]
     c0e:	683a      	ldr	r2, [r7, #0]
     c10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     c12:	683b      	ldr	r3, [r7, #0]
     c14:	687a      	ldr	r2, [r7, #4]
     c16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
     c18:	687b      	ldr	r3, [r7, #4]
     c1a:	681b      	ldr	r3, [r3, #0]
     c1c:	1c5a      	adds	r2, r3, #1
     c1e:	687b      	ldr	r3, [r7, #4]
     c20:	601a      	str	r2, [r3, #0]
}
     c22:	bf00      	nop
     c24:	3714      	adds	r7, #20
     c26:	46bd      	mov	sp, r7
     c28:	f85d 7b04 	ldr.w	r7, [sp], #4
     c2c:	4770      	bx	lr

00000c2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     c2e:	b480      	push	{r7}
     c30:	b085      	sub	sp, #20
     c32:	af00      	add	r7, sp, #0
     c34:	6078      	str	r0, [r7, #4]
     c36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     c38:	683b      	ldr	r3, [r7, #0]
     c3a:	681b      	ldr	r3, [r3, #0]
     c3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     c3e:	68bb      	ldr	r3, [r7, #8]
     c40:	f1b3 3fff 	cmp.w	r3, #4294967295
     c44:	d103      	bne.n	c4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     c46:	687b      	ldr	r3, [r7, #4]
     c48:	691b      	ldr	r3, [r3, #16]
     c4a:	60fb      	str	r3, [r7, #12]
     c4c:	e00c      	b.n	c68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c4e:	687b      	ldr	r3, [r7, #4]
     c50:	3308      	adds	r3, #8
     c52:	60fb      	str	r3, [r7, #12]
     c54:	e002      	b.n	c5c <vListInsert+0x2e>
     c56:	68fb      	ldr	r3, [r7, #12]
     c58:	685b      	ldr	r3, [r3, #4]
     c5a:	60fb      	str	r3, [r7, #12]
     c5c:	68fb      	ldr	r3, [r7, #12]
     c5e:	685b      	ldr	r3, [r3, #4]
     c60:	681a      	ldr	r2, [r3, #0]
     c62:	68bb      	ldr	r3, [r7, #8]
     c64:	429a      	cmp	r2, r3
     c66:	d9f6      	bls.n	c56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     c68:	68fb      	ldr	r3, [r7, #12]
     c6a:	685a      	ldr	r2, [r3, #4]
     c6c:	683b      	ldr	r3, [r7, #0]
     c6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     c70:	683b      	ldr	r3, [r7, #0]
     c72:	685b      	ldr	r3, [r3, #4]
     c74:	683a      	ldr	r2, [r7, #0]
     c76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
     c78:	683b      	ldr	r3, [r7, #0]
     c7a:	68fa      	ldr	r2, [r7, #12]
     c7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
     c7e:	68fb      	ldr	r3, [r7, #12]
     c80:	683a      	ldr	r2, [r7, #0]
     c82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     c84:	683b      	ldr	r3, [r7, #0]
     c86:	687a      	ldr	r2, [r7, #4]
     c88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
     c8a:	687b      	ldr	r3, [r7, #4]
     c8c:	681b      	ldr	r3, [r3, #0]
     c8e:	1c5a      	adds	r2, r3, #1
     c90:	687b      	ldr	r3, [r7, #4]
     c92:	601a      	str	r2, [r3, #0]
}
     c94:	bf00      	nop
     c96:	3714      	adds	r7, #20
     c98:	46bd      	mov	sp, r7
     c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
     c9e:	4770      	bx	lr

00000ca0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     ca0:	b480      	push	{r7}
     ca2:	b085      	sub	sp, #20
     ca4:	af00      	add	r7, sp, #0
     ca6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     ca8:	687b      	ldr	r3, [r7, #4]
     caa:	691b      	ldr	r3, [r3, #16]
     cac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     cae:	687b      	ldr	r3, [r7, #4]
     cb0:	685b      	ldr	r3, [r3, #4]
     cb2:	687a      	ldr	r2, [r7, #4]
     cb4:	6892      	ldr	r2, [r2, #8]
     cb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     cb8:	687b      	ldr	r3, [r7, #4]
     cba:	689b      	ldr	r3, [r3, #8]
     cbc:	687a      	ldr	r2, [r7, #4]
     cbe:	6852      	ldr	r2, [r2, #4]
     cc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     cc2:	68fb      	ldr	r3, [r7, #12]
     cc4:	685a      	ldr	r2, [r3, #4]
     cc6:	687b      	ldr	r3, [r7, #4]
     cc8:	429a      	cmp	r2, r3
     cca:	d103      	bne.n	cd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     ccc:	687b      	ldr	r3, [r7, #4]
     cce:	689a      	ldr	r2, [r3, #8]
     cd0:	68fb      	ldr	r3, [r7, #12]
     cd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     cd4:	687b      	ldr	r3, [r7, #4]
     cd6:	2200      	movs	r2, #0
     cd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
     cda:	68fb      	ldr	r3, [r7, #12]
     cdc:	681b      	ldr	r3, [r3, #0]
     cde:	1e5a      	subs	r2, r3, #1
     ce0:	68fb      	ldr	r3, [r7, #12]
     ce2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
     ce4:	68fb      	ldr	r3, [r7, #12]
     ce6:	681b      	ldr	r3, [r3, #0]
}
     ce8:	4618      	mov	r0, r3
     cea:	3714      	adds	r7, #20
     cec:	46bd      	mov	sp, r7
     cee:	f85d 7b04 	ldr.w	r7, [sp], #4
     cf2:	4770      	bx	lr

00000cf4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
     cf4:	b580      	push	{r7, lr}
     cf6:	b084      	sub	sp, #16
     cf8:	af00      	add	r7, sp, #0
     cfa:	6078      	str	r0, [r7, #4]
     cfc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
     cfe:	687b      	ldr	r3, [r7, #4]
     d00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
     d02:	68fb      	ldr	r3, [r7, #12]
     d04:	2b00      	cmp	r3, #0
     d06:	d100      	bne.n	d0a <xQueueGenericReset+0x16>
     d08:	e7fe      	b.n	d08 <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
     d0a:	f7ff fb0b 	bl	324 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     d0e:	68fb      	ldr	r3, [r7, #12]
     d10:	681a      	ldr	r2, [r3, #0]
     d12:	68fb      	ldr	r3, [r7, #12]
     d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     d16:	68f9      	ldr	r1, [r7, #12]
     d18:	6c09      	ldr	r1, [r1, #64]	; 0x40
     d1a:	fb01 f303 	mul.w	r3, r1, r3
     d1e:	441a      	add	r2, r3
     d20:	68fb      	ldr	r3, [r7, #12]
     d22:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     d24:	68fb      	ldr	r3, [r7, #12]
     d26:	2200      	movs	r2, #0
     d28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
     d2a:	68fb      	ldr	r3, [r7, #12]
     d2c:	681a      	ldr	r2, [r3, #0]
     d2e:	68fb      	ldr	r3, [r7, #12]
     d30:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     d32:	68fb      	ldr	r3, [r7, #12]
     d34:	681a      	ldr	r2, [r3, #0]
     d36:	68fb      	ldr	r3, [r7, #12]
     d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     d3a:	3b01      	subs	r3, #1
     d3c:	68f9      	ldr	r1, [r7, #12]
     d3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
     d40:	fb01 f303 	mul.w	r3, r1, r3
     d44:	441a      	add	r2, r3
     d46:	68fb      	ldr	r3, [r7, #12]
     d48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
     d4a:	68fb      	ldr	r3, [r7, #12]
     d4c:	22ff      	movs	r2, #255	; 0xff
     d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
     d52:	68fb      	ldr	r3, [r7, #12]
     d54:	22ff      	movs	r2, #255	; 0xff
     d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
     d5a:	683b      	ldr	r3, [r7, #0]
     d5c:	2b00      	cmp	r3, #0
     d5e:	d114      	bne.n	d8a <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     d60:	68fb      	ldr	r3, [r7, #12]
     d62:	691b      	ldr	r3, [r3, #16]
     d64:	2b00      	cmp	r3, #0
     d66:	d01a      	beq.n	d9e <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     d68:	68fb      	ldr	r3, [r7, #12]
     d6a:	3310      	adds	r3, #16
     d6c:	4618      	mov	r0, r3
     d6e:	f001 f829 	bl	1dc4 <xTaskRemoveFromEventList>
     d72:	4603      	mov	r3, r0
     d74:	2b00      	cmp	r3, #0
     d76:	d012      	beq.n	d9e <xQueueGenericReset+0xaa>
				{
					queueYIELD_IF_USING_PREEMPTION();
     d78:	4b0c      	ldr	r3, [pc, #48]	; (dac <xQueueGenericReset+0xb8>)
     d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     d7e:	601a      	str	r2, [r3, #0]
     d80:	f3bf 8f4f 	dsb	sy
     d84:	f3bf 8f6f 	isb	sy
     d88:	e009      	b.n	d9e <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     d8a:	68fb      	ldr	r3, [r7, #12]
     d8c:	3310      	adds	r3, #16
     d8e:	4618      	mov	r0, r3
     d90:	f7ff fefc 	bl	b8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     d94:	68fb      	ldr	r3, [r7, #12]
     d96:	3324      	adds	r3, #36	; 0x24
     d98:	4618      	mov	r0, r3
     d9a:	f7ff fef7 	bl	b8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
     d9e:	f7ff fae7 	bl	370 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
     da2:	2301      	movs	r3, #1
}
     da4:	4618      	mov	r0, r3
     da6:	3710      	adds	r7, #16
     da8:	46bd      	mov	sp, r7
     daa:	bd80      	pop	{r7, pc}
     dac:	e000ed04 	.word	0xe000ed04

00000db0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
     db0:	b580      	push	{r7, lr}
     db2:	b08a      	sub	sp, #40	; 0x28
     db4:	af02      	add	r7, sp, #8
     db6:	60f8      	str	r0, [r7, #12]
     db8:	60b9      	str	r1, [r7, #8]
     dba:	4613      	mov	r3, r2
     dbc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
     dbe:	68fb      	ldr	r3, [r7, #12]
     dc0:	2b00      	cmp	r3, #0
     dc2:	d100      	bne.n	dc6 <xQueueGenericCreate+0x16>
     dc4:	e7fe      	b.n	dc4 <xQueueGenericCreate+0x14>

		if( uxItemSize == ( UBaseType_t ) 0 )
     dc6:	68bb      	ldr	r3, [r7, #8]
     dc8:	2b00      	cmp	r3, #0
     dca:	d102      	bne.n	dd2 <xQueueGenericCreate+0x22>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
     dcc:	2300      	movs	r3, #0
     dce:	61fb      	str	r3, [r7, #28]
     dd0:	e004      	b.n	ddc <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     dd2:	68fb      	ldr	r3, [r7, #12]
     dd4:	68ba      	ldr	r2, [r7, #8]
     dd6:	fb02 f303 	mul.w	r3, r2, r3
     dda:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
     ddc:	69fb      	ldr	r3, [r7, #28]
     dde:	3348      	adds	r3, #72	; 0x48
     de0:	4618      	mov	r0, r3
     de2:	f7ff fc7b 	bl	6dc <pvPortMalloc>
     de6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
     de8:	69bb      	ldr	r3, [r7, #24]
     dea:	2b00      	cmp	r3, #0
     dec:	d00b      	beq.n	e06 <xQueueGenericCreate+0x56>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
     dee:	69bb      	ldr	r3, [r7, #24]
     df0:	3348      	adds	r3, #72	; 0x48
     df2:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
     df4:	79fa      	ldrb	r2, [r7, #7]
     df6:	69bb      	ldr	r3, [r7, #24]
     df8:	9300      	str	r3, [sp, #0]
     dfa:	4613      	mov	r3, r2
     dfc:	697a      	ldr	r2, [r7, #20]
     dfe:	68b9      	ldr	r1, [r7, #8]
     e00:	68f8      	ldr	r0, [r7, #12]
     e02:	f000 f805 	bl	e10 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
     e06:	69bb      	ldr	r3, [r7, #24]
	}
     e08:	4618      	mov	r0, r3
     e0a:	3720      	adds	r7, #32
     e0c:	46bd      	mov	sp, r7
     e0e:	bd80      	pop	{r7, pc}

00000e10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
     e10:	b580      	push	{r7, lr}
     e12:	b084      	sub	sp, #16
     e14:	af00      	add	r7, sp, #0
     e16:	60f8      	str	r0, [r7, #12]
     e18:	60b9      	str	r1, [r7, #8]
     e1a:	607a      	str	r2, [r7, #4]
     e1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
     e1e:	68bb      	ldr	r3, [r7, #8]
     e20:	2b00      	cmp	r3, #0
     e22:	d103      	bne.n	e2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
     e24:	69bb      	ldr	r3, [r7, #24]
     e26:	69ba      	ldr	r2, [r7, #24]
     e28:	601a      	str	r2, [r3, #0]
     e2a:	e002      	b.n	e32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
     e2c:	69bb      	ldr	r3, [r7, #24]
     e2e:	687a      	ldr	r2, [r7, #4]
     e30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
     e32:	69bb      	ldr	r3, [r7, #24]
     e34:	68fa      	ldr	r2, [r7, #12]
     e36:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
     e38:	69bb      	ldr	r3, [r7, #24]
     e3a:	68ba      	ldr	r2, [r7, #8]
     e3c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
     e3e:	2101      	movs	r1, #1
     e40:	69b8      	ldr	r0, [r7, #24]
     e42:	f7ff ff57 	bl	cf4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
     e46:	bf00      	nop
     e48:	3710      	adds	r7, #16
     e4a:	46bd      	mov	sp, r7
     e4c:	bd80      	pop	{r7, pc}
	...

00000e50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
     e50:	b580      	push	{r7, lr}
     e52:	b08a      	sub	sp, #40	; 0x28
     e54:	af00      	add	r7, sp, #0
     e56:	60f8      	str	r0, [r7, #12]
     e58:	60b9      	str	r1, [r7, #8]
     e5a:	607a      	str	r2, [r7, #4]
     e5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
     e5e:	2300      	movs	r3, #0
     e60:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
     e62:	68fb      	ldr	r3, [r7, #12]
     e64:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
     e66:	6a3b      	ldr	r3, [r7, #32]
     e68:	2b00      	cmp	r3, #0
     e6a:	d100      	bne.n	e6e <xQueueGenericSend+0x1e>
     e6c:	e7fe      	b.n	e6c <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     e6e:	68bb      	ldr	r3, [r7, #8]
     e70:	2b00      	cmp	r3, #0
     e72:	d103      	bne.n	e7c <xQueueGenericSend+0x2c>
     e74:	6a3b      	ldr	r3, [r7, #32]
     e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     e78:	2b00      	cmp	r3, #0
     e7a:	d101      	bne.n	e80 <xQueueGenericSend+0x30>
     e7c:	2301      	movs	r3, #1
     e7e:	e000      	b.n	e82 <xQueueGenericSend+0x32>
     e80:	2300      	movs	r3, #0
     e82:	2b00      	cmp	r3, #0
     e84:	d100      	bne.n	e88 <xQueueGenericSend+0x38>
     e86:	e7fe      	b.n	e86 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     e88:	683b      	ldr	r3, [r7, #0]
     e8a:	2b02      	cmp	r3, #2
     e8c:	d103      	bne.n	e96 <xQueueGenericSend+0x46>
     e8e:	6a3b      	ldr	r3, [r7, #32]
     e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     e92:	2b01      	cmp	r3, #1
     e94:	d101      	bne.n	e9a <xQueueGenericSend+0x4a>
     e96:	2301      	movs	r3, #1
     e98:	e000      	b.n	e9c <xQueueGenericSend+0x4c>
     e9a:	2300      	movs	r3, #0
     e9c:	2b00      	cmp	r3, #0
     e9e:	d100      	bne.n	ea2 <xQueueGenericSend+0x52>
     ea0:	e7fe      	b.n	ea0 <xQueueGenericSend+0x50>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     ea2:	f001 f97d 	bl	21a0 <xTaskGetSchedulerState>
     ea6:	4603      	mov	r3, r0
     ea8:	2b00      	cmp	r3, #0
     eaa:	d102      	bne.n	eb2 <xQueueGenericSend+0x62>
     eac:	687b      	ldr	r3, [r7, #4]
     eae:	2b00      	cmp	r3, #0
     eb0:	d101      	bne.n	eb6 <xQueueGenericSend+0x66>
     eb2:	2301      	movs	r3, #1
     eb4:	e000      	b.n	eb8 <xQueueGenericSend+0x68>
     eb6:	2300      	movs	r3, #0
     eb8:	2b00      	cmp	r3, #0
     eba:	d100      	bne.n	ebe <xQueueGenericSend+0x6e>
     ebc:	e7fe      	b.n	ebc <xQueueGenericSend+0x6c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
     ebe:	f7ff fa31 	bl	324 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     ec2:	6a3b      	ldr	r3, [r7, #32]
     ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
     ec6:	6a3b      	ldr	r3, [r7, #32]
     ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     eca:	429a      	cmp	r2, r3
     ecc:	d302      	bcc.n	ed4 <xQueueGenericSend+0x84>
     ece:	683b      	ldr	r3, [r7, #0]
     ed0:	2b02      	cmp	r3, #2
     ed2:	d129      	bne.n	f28 <xQueueGenericSend+0xd8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     ed4:	683a      	ldr	r2, [r7, #0]
     ed6:	68b9      	ldr	r1, [r7, #8]
     ed8:	6a38      	ldr	r0, [r7, #32]
     eda:	f000 f9eb 	bl	12b4 <prvCopyDataToQueue>
     ede:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     ee0:	6a3b      	ldr	r3, [r7, #32]
     ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     ee4:	2b00      	cmp	r3, #0
     ee6:	d010      	beq.n	f0a <xQueueGenericSend+0xba>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     ee8:	6a3b      	ldr	r3, [r7, #32]
     eea:	3324      	adds	r3, #36	; 0x24
     eec:	4618      	mov	r0, r3
     eee:	f000 ff69 	bl	1dc4 <xTaskRemoveFromEventList>
     ef2:	4603      	mov	r3, r0
     ef4:	2b00      	cmp	r3, #0
     ef6:	d013      	beq.n	f20 <xQueueGenericSend+0xd0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
     ef8:	4b3f      	ldr	r3, [pc, #252]	; (ff8 <xQueueGenericSend+0x1a8>)
     efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     efe:	601a      	str	r2, [r3, #0]
     f00:	f3bf 8f4f 	dsb	sy
     f04:	f3bf 8f6f 	isb	sy
     f08:	e00a      	b.n	f20 <xQueueGenericSend+0xd0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
     f0a:	69fb      	ldr	r3, [r7, #28]
     f0c:	2b00      	cmp	r3, #0
     f0e:	d007      	beq.n	f20 <xQueueGenericSend+0xd0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
     f10:	4b39      	ldr	r3, [pc, #228]	; (ff8 <xQueueGenericSend+0x1a8>)
     f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     f16:	601a      	str	r2, [r3, #0]
     f18:	f3bf 8f4f 	dsb	sy
     f1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
     f20:	f7ff fa26 	bl	370 <vPortExitCritical>
				return pdPASS;
     f24:	2301      	movs	r3, #1
     f26:	e063      	b.n	ff0 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
     f28:	687b      	ldr	r3, [r7, #4]
     f2a:	2b00      	cmp	r3, #0
     f2c:	d103      	bne.n	f36 <xQueueGenericSend+0xe6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     f2e:	f7ff fa1f 	bl	370 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
     f32:	2300      	movs	r3, #0
     f34:	e05c      	b.n	ff0 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
     f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f38:	2b00      	cmp	r3, #0
     f3a:	d106      	bne.n	f4a <xQueueGenericSend+0xfa>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     f3c:	f107 0314 	add.w	r3, r7, #20
     f40:	4618      	mov	r0, r3
     f42:	f000 ffef 	bl	1f24 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
     f46:	2301      	movs	r3, #1
     f48:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
     f4a:	f7ff fa11 	bl	370 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     f4e:	f000 fcb1 	bl	18b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
     f52:	f7ff f9e7 	bl	324 <vPortEnterCritical>
     f56:	6a3b      	ldr	r3, [r7, #32]
     f58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
     f5c:	b25b      	sxtb	r3, r3
     f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
     f62:	d103      	bne.n	f6c <xQueueGenericSend+0x11c>
     f64:	6a3b      	ldr	r3, [r7, #32]
     f66:	2200      	movs	r2, #0
     f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
     f6c:	6a3b      	ldr	r3, [r7, #32]
     f6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
     f72:	b25b      	sxtb	r3, r3
     f74:	f1b3 3fff 	cmp.w	r3, #4294967295
     f78:	d103      	bne.n	f82 <xQueueGenericSend+0x132>
     f7a:	6a3b      	ldr	r3, [r7, #32]
     f7c:	2200      	movs	r2, #0
     f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
     f82:	f7ff f9f5 	bl	370 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     f86:	1d3a      	adds	r2, r7, #4
     f88:	f107 0314 	add.w	r3, r7, #20
     f8c:	4611      	mov	r1, r2
     f8e:	4618      	mov	r0, r3
     f90:	f000 ffe2 	bl	1f58 <xTaskCheckForTimeOut>
     f94:	4603      	mov	r3, r0
     f96:	2b00      	cmp	r3, #0
     f98:	d124      	bne.n	fe4 <xQueueGenericSend+0x194>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
     f9a:	6a38      	ldr	r0, [r7, #32]
     f9c:	f000 fa74 	bl	1488 <prvIsQueueFull>
     fa0:	4603      	mov	r3, r0
     fa2:	2b00      	cmp	r3, #0
     fa4:	d018      	beq.n	fd8 <xQueueGenericSend+0x188>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     fa6:	6a3b      	ldr	r3, [r7, #32]
     fa8:	3310      	adds	r3, #16
     faa:	687a      	ldr	r2, [r7, #4]
     fac:	4611      	mov	r1, r2
     fae:	4618      	mov	r0, r3
     fb0:	f000 fea4 	bl	1cfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
     fb4:	6a38      	ldr	r0, [r7, #32]
     fb6:	f000 f9ff 	bl	13b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
     fba:	f000 fcc1 	bl	1940 <xTaskResumeAll>
     fbe:	4603      	mov	r3, r0
     fc0:	2b00      	cmp	r3, #0
     fc2:	f47f af7c 	bne.w	ebe <xQueueGenericSend+0x6e>
				{
					portYIELD_WITHIN_API();
     fc6:	4b0c      	ldr	r3, [pc, #48]	; (ff8 <xQueueGenericSend+0x1a8>)
     fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     fcc:	601a      	str	r2, [r3, #0]
     fce:	f3bf 8f4f 	dsb	sy
     fd2:	f3bf 8f6f 	isb	sy
     fd6:	e772      	b.n	ebe <xQueueGenericSend+0x6e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     fd8:	6a38      	ldr	r0, [r7, #32]
     fda:	f000 f9ed 	bl	13b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
     fde:	f000 fcaf 	bl	1940 <xTaskResumeAll>
     fe2:	e76c      	b.n	ebe <xQueueGenericSend+0x6e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
     fe4:	6a38      	ldr	r0, [r7, #32]
     fe6:	f000 f9e7 	bl	13b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
     fea:	f000 fca9 	bl	1940 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
     fee:	2300      	movs	r3, #0
		}
	}
}
     ff0:	4618      	mov	r0, r3
     ff2:	3728      	adds	r7, #40	; 0x28
     ff4:	46bd      	mov	sp, r7
     ff6:	bd80      	pop	{r7, pc}
     ff8:	e000ed04 	.word	0xe000ed04

00000ffc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
     ffc:	b580      	push	{r7, lr}
     ffe:	b08c      	sub	sp, #48	; 0x30
    1000:	af00      	add	r7, sp, #0
    1002:	60f8      	str	r0, [r7, #12]
    1004:	60b9      	str	r1, [r7, #8]
    1006:	607a      	str	r2, [r7, #4]
    1008:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    100a:	68fb      	ldr	r3, [r7, #12]
    100c:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
    100e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1010:	2b00      	cmp	r3, #0
    1012:	d100      	bne.n	1016 <xQueueGenericSendFromISR+0x1a>
    1014:	e7fe      	b.n	1014 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1016:	68bb      	ldr	r3, [r7, #8]
    1018:	2b00      	cmp	r3, #0
    101a:	d103      	bne.n	1024 <xQueueGenericSendFromISR+0x28>
    101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1020:	2b00      	cmp	r3, #0
    1022:	d101      	bne.n	1028 <xQueueGenericSendFromISR+0x2c>
    1024:	2301      	movs	r3, #1
    1026:	e000      	b.n	102a <xQueueGenericSendFromISR+0x2e>
    1028:	2300      	movs	r3, #0
    102a:	2b00      	cmp	r3, #0
    102c:	d100      	bne.n	1030 <xQueueGenericSendFromISR+0x34>
    102e:	e7fe      	b.n	102e <xQueueGenericSendFromISR+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    1030:	683b      	ldr	r3, [r7, #0]
    1032:	2b02      	cmp	r3, #2
    1034:	d103      	bne.n	103e <xQueueGenericSendFromISR+0x42>
    1036:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    103a:	2b01      	cmp	r3, #1
    103c:	d101      	bne.n	1042 <xQueueGenericSendFromISR+0x46>
    103e:	2301      	movs	r3, #1
    1040:	e000      	b.n	1044 <xQueueGenericSendFromISR+0x48>
    1042:	2300      	movs	r3, #0
    1044:	2b00      	cmp	r3, #0
    1046:	d100      	bne.n	104a <xQueueGenericSendFromISR+0x4e>
    1048:	e7fe      	b.n	1048 <xQueueGenericSendFromISR+0x4c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    104a:	f7ff fa05 	bl	458 <vPortValidateInterruptPriority>
	__asm volatile
    104e:	f3ef 8211 	mrs	r2, BASEPRI
    1052:	f04f 0380 	mov.w	r3, #128	; 0x80
    1056:	f383 8811 	msr	BASEPRI, r3
    105a:	f3bf 8f6f 	isb	sy
    105e:	f3bf 8f4f 	dsb	sy
    1062:	61fa      	str	r2, [r7, #28]
    1064:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
    1066:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1068:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    106a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    106c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    106e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1072:	429a      	cmp	r2, r3
    1074:	d302      	bcc.n	107c <xQueueGenericSendFromISR+0x80>
    1076:	683b      	ldr	r3, [r7, #0]
    1078:	2b02      	cmp	r3, #2
    107a:	d12c      	bne.n	10d6 <xQueueGenericSendFromISR+0xda>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    107c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    107e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    1082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1086:	683a      	ldr	r2, [r7, #0]
    1088:	68b9      	ldr	r1, [r7, #8]
    108a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    108c:	f000 f912 	bl	12b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    1090:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
    1094:	f1b3 3fff 	cmp.w	r3, #4294967295
    1098:	d112      	bne.n	10c0 <xQueueGenericSendFromISR+0xc4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    109a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    109e:	2b00      	cmp	r3, #0
    10a0:	d016      	beq.n	10d0 <xQueueGenericSendFromISR+0xd4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    10a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    10a4:	3324      	adds	r3, #36	; 0x24
    10a6:	4618      	mov	r0, r3
    10a8:	f000 fe8c 	bl	1dc4 <xTaskRemoveFromEventList>
    10ac:	4603      	mov	r3, r0
    10ae:	2b00      	cmp	r3, #0
    10b0:	d00e      	beq.n	10d0 <xQueueGenericSendFromISR+0xd4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    10b2:	687b      	ldr	r3, [r7, #4]
    10b4:	2b00      	cmp	r3, #0
    10b6:	d00b      	beq.n	10d0 <xQueueGenericSendFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    10b8:	687b      	ldr	r3, [r7, #4]
    10ba:	2201      	movs	r2, #1
    10bc:	601a      	str	r2, [r3, #0]
    10be:	e007      	b.n	10d0 <xQueueGenericSendFromISR+0xd4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    10c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    10c4:	3301      	adds	r3, #1
    10c6:	b2db      	uxtb	r3, r3
    10c8:	b25a      	sxtb	r2, r3
    10ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    10cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
    10d0:	2301      	movs	r3, #1
    10d2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
    10d4:	e001      	b.n	10da <xQueueGenericSendFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    10d6:	2300      	movs	r3, #0
    10d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    10da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10dc:	617b      	str	r3, [r7, #20]
	__asm volatile
    10de:	697b      	ldr	r3, [r7, #20]
    10e0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    10e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    10e6:	4618      	mov	r0, r3
    10e8:	3730      	adds	r7, #48	; 0x30
    10ea:	46bd      	mov	sp, r7
    10ec:	bd80      	pop	{r7, pc}
	...

000010f0 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    10f0:	b580      	push	{r7, lr}
    10f2:	b08a      	sub	sp, #40	; 0x28
    10f4:	af00      	add	r7, sp, #0
    10f6:	60f8      	str	r0, [r7, #12]
    10f8:	60b9      	str	r1, [r7, #8]
    10fa:	607a      	str	r2, [r7, #4]
    10fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    10fe:	2300      	movs	r3, #0
    1100:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1102:	68fb      	ldr	r3, [r7, #12]
    1104:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    1106:	6a3b      	ldr	r3, [r7, #32]
    1108:	2b00      	cmp	r3, #0
    110a:	d100      	bne.n	110e <xQueueGenericReceive+0x1e>
    110c:	e7fe      	b.n	110c <xQueueGenericReceive+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    110e:	68bb      	ldr	r3, [r7, #8]
    1110:	2b00      	cmp	r3, #0
    1112:	d103      	bne.n	111c <xQueueGenericReceive+0x2c>
    1114:	6a3b      	ldr	r3, [r7, #32]
    1116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1118:	2b00      	cmp	r3, #0
    111a:	d101      	bne.n	1120 <xQueueGenericReceive+0x30>
    111c:	2301      	movs	r3, #1
    111e:	e000      	b.n	1122 <xQueueGenericReceive+0x32>
    1120:	2300      	movs	r3, #0
    1122:	2b00      	cmp	r3, #0
    1124:	d100      	bne.n	1128 <xQueueGenericReceive+0x38>
    1126:	e7fe      	b.n	1126 <xQueueGenericReceive+0x36>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1128:	f001 f83a 	bl	21a0 <xTaskGetSchedulerState>
    112c:	4603      	mov	r3, r0
    112e:	2b00      	cmp	r3, #0
    1130:	d102      	bne.n	1138 <xQueueGenericReceive+0x48>
    1132:	687b      	ldr	r3, [r7, #4]
    1134:	2b00      	cmp	r3, #0
    1136:	d101      	bne.n	113c <xQueueGenericReceive+0x4c>
    1138:	2301      	movs	r3, #1
    113a:	e000      	b.n	113e <xQueueGenericReceive+0x4e>
    113c:	2300      	movs	r3, #0
    113e:	2b00      	cmp	r3, #0
    1140:	d100      	bne.n	1144 <xQueueGenericReceive+0x54>
    1142:	e7fe      	b.n	1142 <xQueueGenericReceive+0x52>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1144:	f7ff f8ee 	bl	324 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1148:	6a3b      	ldr	r3, [r7, #32]
    114a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    114c:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    114e:	69fb      	ldr	r3, [r7, #28]
    1150:	2b00      	cmp	r3, #0
    1152:	d03d      	beq.n	11d0 <xQueueGenericReceive+0xe0>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1154:	6a3b      	ldr	r3, [r7, #32]
    1156:	68db      	ldr	r3, [r3, #12]
    1158:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    115a:	68b9      	ldr	r1, [r7, #8]
    115c:	6a38      	ldr	r0, [r7, #32]
    115e:	f000 f905 	bl	136c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1162:	683b      	ldr	r3, [r7, #0]
    1164:	2b00      	cmp	r3, #0
    1166:	d118      	bne.n	119a <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    1168:	69fb      	ldr	r3, [r7, #28]
    116a:	1e5a      	subs	r2, r3, #1
    116c:	6a3b      	ldr	r3, [r7, #32]
    116e:	639a      	str	r2, [r3, #56]	; 0x38
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1170:	6a3b      	ldr	r3, [r7, #32]
    1172:	691b      	ldr	r3, [r3, #16]
    1174:	2b00      	cmp	r3, #0
    1176:	d027      	beq.n	11c8 <xQueueGenericReceive+0xd8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1178:	6a3b      	ldr	r3, [r7, #32]
    117a:	3310      	adds	r3, #16
    117c:	4618      	mov	r0, r3
    117e:	f000 fe21 	bl	1dc4 <xTaskRemoveFromEventList>
    1182:	4603      	mov	r3, r0
    1184:	2b00      	cmp	r3, #0
    1186:	d01f      	beq.n	11c8 <xQueueGenericReceive+0xd8>
						{
							queueYIELD_IF_USING_PREEMPTION();
    1188:	4b49      	ldr	r3, [pc, #292]	; (12b0 <xQueueGenericReceive+0x1c0>)
    118a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    118e:	601a      	str	r2, [r3, #0]
    1190:	f3bf 8f4f 	dsb	sy
    1194:	f3bf 8f6f 	isb	sy
    1198:	e016      	b.n	11c8 <xQueueGenericReceive+0xd8>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    119a:	6a3b      	ldr	r3, [r7, #32]
    119c:	69ba      	ldr	r2, [r7, #24]
    119e:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    11a0:	6a3b      	ldr	r3, [r7, #32]
    11a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    11a4:	2b00      	cmp	r3, #0
    11a6:	d00f      	beq.n	11c8 <xQueueGenericReceive+0xd8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    11a8:	6a3b      	ldr	r3, [r7, #32]
    11aa:	3324      	adds	r3, #36	; 0x24
    11ac:	4618      	mov	r0, r3
    11ae:	f000 fe09 	bl	1dc4 <xTaskRemoveFromEventList>
    11b2:	4603      	mov	r3, r0
    11b4:	2b00      	cmp	r3, #0
    11b6:	d007      	beq.n	11c8 <xQueueGenericReceive+0xd8>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    11b8:	4b3d      	ldr	r3, [pc, #244]	; (12b0 <xQueueGenericReceive+0x1c0>)
    11ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    11be:	601a      	str	r2, [r3, #0]
    11c0:	f3bf 8f4f 	dsb	sy
    11c4:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    11c8:	f7ff f8d2 	bl	370 <vPortExitCritical>
				return pdPASS;
    11cc:	2301      	movs	r3, #1
    11ce:	e06a      	b.n	12a6 <xQueueGenericReceive+0x1b6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    11d0:	687b      	ldr	r3, [r7, #4]
    11d2:	2b00      	cmp	r3, #0
    11d4:	d103      	bne.n	11de <xQueueGenericReceive+0xee>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    11d6:	f7ff f8cb 	bl	370 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    11da:	2300      	movs	r3, #0
    11dc:	e063      	b.n	12a6 <xQueueGenericReceive+0x1b6>
				}
				else if( xEntryTimeSet == pdFALSE )
    11de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    11e0:	2b00      	cmp	r3, #0
    11e2:	d106      	bne.n	11f2 <xQueueGenericReceive+0x102>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    11e4:	f107 0310 	add.w	r3, r7, #16
    11e8:	4618      	mov	r0, r3
    11ea:	f000 fe9b 	bl	1f24 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    11ee:	2301      	movs	r3, #1
    11f0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    11f2:	f7ff f8bd 	bl	370 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    11f6:	f000 fb5d 	bl	18b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    11fa:	f7ff f893 	bl	324 <vPortEnterCritical>
    11fe:	6a3b      	ldr	r3, [r7, #32]
    1200:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    1204:	b25b      	sxtb	r3, r3
    1206:	f1b3 3fff 	cmp.w	r3, #4294967295
    120a:	d103      	bne.n	1214 <xQueueGenericReceive+0x124>
    120c:	6a3b      	ldr	r3, [r7, #32]
    120e:	2200      	movs	r2, #0
    1210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    1214:	6a3b      	ldr	r3, [r7, #32]
    1216:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    121a:	b25b      	sxtb	r3, r3
    121c:	f1b3 3fff 	cmp.w	r3, #4294967295
    1220:	d103      	bne.n	122a <xQueueGenericReceive+0x13a>
    1222:	6a3b      	ldr	r3, [r7, #32]
    1224:	2200      	movs	r2, #0
    1226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    122a:	f7ff f8a1 	bl	370 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    122e:	1d3a      	adds	r2, r7, #4
    1230:	f107 0310 	add.w	r3, r7, #16
    1234:	4611      	mov	r1, r2
    1236:	4618      	mov	r0, r3
    1238:	f000 fe8e 	bl	1f58 <xTaskCheckForTimeOut>
    123c:	4603      	mov	r3, r0
    123e:	2b00      	cmp	r3, #0
    1240:	d124      	bne.n	128c <xQueueGenericReceive+0x19c>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1242:	6a38      	ldr	r0, [r7, #32]
    1244:	f000 f90a 	bl	145c <prvIsQueueEmpty>
    1248:	4603      	mov	r3, r0
    124a:	2b00      	cmp	r3, #0
    124c:	d018      	beq.n	1280 <xQueueGenericReceive+0x190>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    124e:	6a3b      	ldr	r3, [r7, #32]
    1250:	3324      	adds	r3, #36	; 0x24
    1252:	687a      	ldr	r2, [r7, #4]
    1254:	4611      	mov	r1, r2
    1256:	4618      	mov	r0, r3
    1258:	f000 fd50 	bl	1cfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    125c:	6a38      	ldr	r0, [r7, #32]
    125e:	f000 f8ab 	bl	13b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1262:	f000 fb6d 	bl	1940 <xTaskResumeAll>
    1266:	4603      	mov	r3, r0
    1268:	2b00      	cmp	r3, #0
    126a:	f47f af6b 	bne.w	1144 <xQueueGenericReceive+0x54>
				{
					portYIELD_WITHIN_API();
    126e:	4b10      	ldr	r3, [pc, #64]	; (12b0 <xQueueGenericReceive+0x1c0>)
    1270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1274:	601a      	str	r2, [r3, #0]
    1276:	f3bf 8f4f 	dsb	sy
    127a:	f3bf 8f6f 	isb	sy
    127e:	e761      	b.n	1144 <xQueueGenericReceive+0x54>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1280:	6a38      	ldr	r0, [r7, #32]
    1282:	f000 f899 	bl	13b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1286:	f000 fb5b 	bl	1940 <xTaskResumeAll>
    128a:	e75b      	b.n	1144 <xQueueGenericReceive+0x54>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    128c:	6a38      	ldr	r0, [r7, #32]
    128e:	f000 f893 	bl	13b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1292:	f000 fb55 	bl	1940 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1296:	6a38      	ldr	r0, [r7, #32]
    1298:	f000 f8e0 	bl	145c <prvIsQueueEmpty>
    129c:	4603      	mov	r3, r0
    129e:	2b00      	cmp	r3, #0
    12a0:	f43f af50 	beq.w	1144 <xQueueGenericReceive+0x54>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    12a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    12a6:	4618      	mov	r0, r3
    12a8:	3728      	adds	r7, #40	; 0x28
    12aa:	46bd      	mov	sp, r7
    12ac:	bd80      	pop	{r7, pc}
    12ae:	bf00      	nop
    12b0:	e000ed04 	.word	0xe000ed04

000012b4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    12b4:	b580      	push	{r7, lr}
    12b6:	b086      	sub	sp, #24
    12b8:	af00      	add	r7, sp, #0
    12ba:	60f8      	str	r0, [r7, #12]
    12bc:	60b9      	str	r1, [r7, #8]
    12be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    12c0:	2300      	movs	r3, #0
    12c2:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    12c4:	68fb      	ldr	r3, [r7, #12]
    12c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    12c8:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    12ca:	68fb      	ldr	r3, [r7, #12]
    12cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    12ce:	2b00      	cmp	r3, #0
    12d0:	d043      	beq.n	135a <prvCopyDataToQueue+0xa6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    12d2:	687b      	ldr	r3, [r7, #4]
    12d4:	2b00      	cmp	r3, #0
    12d6:	d119      	bne.n	130c <prvCopyDataToQueue+0x58>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    12d8:	68fb      	ldr	r3, [r7, #12]
    12da:	6898      	ldr	r0, [r3, #8]
    12dc:	68fb      	ldr	r3, [r7, #12]
    12de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    12e0:	461a      	mov	r2, r3
    12e2:	68b9      	ldr	r1, [r7, #8]
    12e4:	f003 fb4c 	bl	4980 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    12e8:	68fb      	ldr	r3, [r7, #12]
    12ea:	689a      	ldr	r2, [r3, #8]
    12ec:	68fb      	ldr	r3, [r7, #12]
    12ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    12f0:	441a      	add	r2, r3
    12f2:	68fb      	ldr	r3, [r7, #12]
    12f4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    12f6:	68fb      	ldr	r3, [r7, #12]
    12f8:	689a      	ldr	r2, [r3, #8]
    12fa:	68fb      	ldr	r3, [r7, #12]
    12fc:	685b      	ldr	r3, [r3, #4]
    12fe:	429a      	cmp	r2, r3
    1300:	d32b      	bcc.n	135a <prvCopyDataToQueue+0xa6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    1302:	68fb      	ldr	r3, [r7, #12]
    1304:	681a      	ldr	r2, [r3, #0]
    1306:	68fb      	ldr	r3, [r7, #12]
    1308:	609a      	str	r2, [r3, #8]
    130a:	e026      	b.n	135a <prvCopyDataToQueue+0xa6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    130c:	68fb      	ldr	r3, [r7, #12]
    130e:	68d8      	ldr	r0, [r3, #12]
    1310:	68fb      	ldr	r3, [r7, #12]
    1312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1314:	461a      	mov	r2, r3
    1316:	68b9      	ldr	r1, [r7, #8]
    1318:	f003 fb32 	bl	4980 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    131c:	68fb      	ldr	r3, [r7, #12]
    131e:	68da      	ldr	r2, [r3, #12]
    1320:	68fb      	ldr	r3, [r7, #12]
    1322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1324:	425b      	negs	r3, r3
    1326:	441a      	add	r2, r3
    1328:	68fb      	ldr	r3, [r7, #12]
    132a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    132c:	68fb      	ldr	r3, [r7, #12]
    132e:	68da      	ldr	r2, [r3, #12]
    1330:	68fb      	ldr	r3, [r7, #12]
    1332:	681b      	ldr	r3, [r3, #0]
    1334:	429a      	cmp	r2, r3
    1336:	d207      	bcs.n	1348 <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1338:	68fb      	ldr	r3, [r7, #12]
    133a:	685a      	ldr	r2, [r3, #4]
    133c:	68fb      	ldr	r3, [r7, #12]
    133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1340:	425b      	negs	r3, r3
    1342:	441a      	add	r2, r3
    1344:	68fb      	ldr	r3, [r7, #12]
    1346:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    1348:	687b      	ldr	r3, [r7, #4]
    134a:	2b02      	cmp	r3, #2
    134c:	d105      	bne.n	135a <prvCopyDataToQueue+0xa6>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    134e:	697b      	ldr	r3, [r7, #20]
    1350:	2b00      	cmp	r3, #0
    1352:	d002      	beq.n	135a <prvCopyDataToQueue+0xa6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    1354:	697b      	ldr	r3, [r7, #20]
    1356:	3b01      	subs	r3, #1
    1358:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    135a:	697b      	ldr	r3, [r7, #20]
    135c:	1c5a      	adds	r2, r3, #1
    135e:	68fb      	ldr	r3, [r7, #12]
    1360:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    1362:	693b      	ldr	r3, [r7, #16]
}
    1364:	4618      	mov	r0, r3
    1366:	3718      	adds	r7, #24
    1368:	46bd      	mov	sp, r7
    136a:	bd80      	pop	{r7, pc}

0000136c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    136c:	b580      	push	{r7, lr}
    136e:	b082      	sub	sp, #8
    1370:	af00      	add	r7, sp, #0
    1372:	6078      	str	r0, [r7, #4]
    1374:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    1376:	687b      	ldr	r3, [r7, #4]
    1378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    137a:	2b00      	cmp	r3, #0
    137c:	d018      	beq.n	13b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    137e:	687b      	ldr	r3, [r7, #4]
    1380:	68da      	ldr	r2, [r3, #12]
    1382:	687b      	ldr	r3, [r7, #4]
    1384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1386:	441a      	add	r2, r3
    1388:	687b      	ldr	r3, [r7, #4]
    138a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    138c:	687b      	ldr	r3, [r7, #4]
    138e:	68da      	ldr	r2, [r3, #12]
    1390:	687b      	ldr	r3, [r7, #4]
    1392:	685b      	ldr	r3, [r3, #4]
    1394:	429a      	cmp	r2, r3
    1396:	d303      	bcc.n	13a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    1398:	687b      	ldr	r3, [r7, #4]
    139a:	681a      	ldr	r2, [r3, #0]
    139c:	687b      	ldr	r3, [r7, #4]
    139e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    13a0:	687b      	ldr	r3, [r7, #4]
    13a2:	68d9      	ldr	r1, [r3, #12]
    13a4:	687b      	ldr	r3, [r7, #4]
    13a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    13a8:	461a      	mov	r2, r3
    13aa:	6838      	ldr	r0, [r7, #0]
    13ac:	f003 fae8 	bl	4980 <memcpy>
	}
}
    13b0:	bf00      	nop
    13b2:	3708      	adds	r7, #8
    13b4:	46bd      	mov	sp, r7
    13b6:	bd80      	pop	{r7, pc}

000013b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    13b8:	b580      	push	{r7, lr}
    13ba:	b084      	sub	sp, #16
    13bc:	af00      	add	r7, sp, #0
    13be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    13c0:	f7fe ffb0 	bl	324 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
    13c4:	687b      	ldr	r3, [r7, #4]
    13c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    13ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    13cc:	e011      	b.n	13f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    13ce:	687b      	ldr	r3, [r7, #4]
    13d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    13d2:	2b00      	cmp	r3, #0
    13d4:	d012      	beq.n	13fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    13d6:	687b      	ldr	r3, [r7, #4]
    13d8:	3324      	adds	r3, #36	; 0x24
    13da:	4618      	mov	r0, r3
    13dc:	f000 fcf2 	bl	1dc4 <xTaskRemoveFromEventList>
    13e0:	4603      	mov	r3, r0
    13e2:	2b00      	cmp	r3, #0
    13e4:	d001      	beq.n	13ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    13e6:	f000 fe03 	bl	1ff0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    13ea:	7bfb      	ldrb	r3, [r7, #15]
    13ec:	3b01      	subs	r3, #1
    13ee:	b2db      	uxtb	r3, r3
    13f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    13f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    13f6:	2b00      	cmp	r3, #0
    13f8:	dce9      	bgt.n	13ce <prvUnlockQueue+0x16>
    13fa:	e000      	b.n	13fe <prvUnlockQueue+0x46>
					break;
    13fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
    13fe:	687b      	ldr	r3, [r7, #4]
    1400:	22ff      	movs	r2, #255	; 0xff
    1402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
    1406:	f7fe ffb3 	bl	370 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    140a:	f7fe ff8b 	bl	324 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
    140e:	687b      	ldr	r3, [r7, #4]
    1410:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    1414:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    1416:	e011      	b.n	143c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1418:	687b      	ldr	r3, [r7, #4]
    141a:	691b      	ldr	r3, [r3, #16]
    141c:	2b00      	cmp	r3, #0
    141e:	d012      	beq.n	1446 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1420:	687b      	ldr	r3, [r7, #4]
    1422:	3310      	adds	r3, #16
    1424:	4618      	mov	r0, r3
    1426:	f000 fccd 	bl	1dc4 <xTaskRemoveFromEventList>
    142a:	4603      	mov	r3, r0
    142c:	2b00      	cmp	r3, #0
    142e:	d001      	beq.n	1434 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
    1430:	f000 fdde 	bl	1ff0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    1434:	7bbb      	ldrb	r3, [r7, #14]
    1436:	3b01      	subs	r3, #1
    1438:	b2db      	uxtb	r3, r3
    143a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    143c:	f997 300e 	ldrsb.w	r3, [r7, #14]
    1440:	2b00      	cmp	r3, #0
    1442:	dce9      	bgt.n	1418 <prvUnlockQueue+0x60>
    1444:	e000      	b.n	1448 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
    1446:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    1448:	687b      	ldr	r3, [r7, #4]
    144a:	22ff      	movs	r2, #255	; 0xff
    144c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    1450:	f7fe ff8e 	bl	370 <vPortExitCritical>
}
    1454:	bf00      	nop
    1456:	3710      	adds	r7, #16
    1458:	46bd      	mov	sp, r7
    145a:	bd80      	pop	{r7, pc}

0000145c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    145c:	b580      	push	{r7, lr}
    145e:	b084      	sub	sp, #16
    1460:	af00      	add	r7, sp, #0
    1462:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1464:	f7fe ff5e 	bl	324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1468:	687b      	ldr	r3, [r7, #4]
    146a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    146c:	2b00      	cmp	r3, #0
    146e:	d102      	bne.n	1476 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    1470:	2301      	movs	r3, #1
    1472:	60fb      	str	r3, [r7, #12]
    1474:	e001      	b.n	147a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    1476:	2300      	movs	r3, #0
    1478:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    147a:	f7fe ff79 	bl	370 <vPortExitCritical>

	return xReturn;
    147e:	68fb      	ldr	r3, [r7, #12]
}
    1480:	4618      	mov	r0, r3
    1482:	3710      	adds	r7, #16
    1484:	46bd      	mov	sp, r7
    1486:	bd80      	pop	{r7, pc}

00001488 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    1488:	b580      	push	{r7, lr}
    148a:	b084      	sub	sp, #16
    148c:	af00      	add	r7, sp, #0
    148e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1490:	f7fe ff48 	bl	324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1494:	687b      	ldr	r3, [r7, #4]
    1496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1498:	687b      	ldr	r3, [r7, #4]
    149a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    149c:	429a      	cmp	r2, r3
    149e:	d102      	bne.n	14a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    14a0:	2301      	movs	r3, #1
    14a2:	60fb      	str	r3, [r7, #12]
    14a4:	e001      	b.n	14aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    14a6:	2300      	movs	r3, #0
    14a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    14aa:	f7fe ff61 	bl	370 <vPortExitCritical>

	return xReturn;
    14ae:	68fb      	ldr	r3, [r7, #12]
}
    14b0:	4618      	mov	r0, r3
    14b2:	3710      	adds	r7, #16
    14b4:	46bd      	mov	sp, r7
    14b6:	bd80      	pop	{r7, pc}

000014b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    14b8:	b580      	push	{r7, lr}
    14ba:	b086      	sub	sp, #24
    14bc:	af00      	add	r7, sp, #0
    14be:	60f8      	str	r0, [r7, #12]
    14c0:	60b9      	str	r1, [r7, #8]
    14c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    14c4:	68fb      	ldr	r3, [r7, #12]
    14c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    14c8:	f7fe ff2c 	bl	324 <vPortEnterCritical>
    14cc:	697b      	ldr	r3, [r7, #20]
    14ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    14d2:	b25b      	sxtb	r3, r3
    14d4:	f1b3 3fff 	cmp.w	r3, #4294967295
    14d8:	d103      	bne.n	14e2 <vQueueWaitForMessageRestricted+0x2a>
    14da:	697b      	ldr	r3, [r7, #20]
    14dc:	2200      	movs	r2, #0
    14de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    14e2:	697b      	ldr	r3, [r7, #20]
    14e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    14e8:	b25b      	sxtb	r3, r3
    14ea:	f1b3 3fff 	cmp.w	r3, #4294967295
    14ee:	d103      	bne.n	14f8 <vQueueWaitForMessageRestricted+0x40>
    14f0:	697b      	ldr	r3, [r7, #20]
    14f2:	2200      	movs	r2, #0
    14f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    14f8:	f7fe ff3a 	bl	370 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    14fc:	697b      	ldr	r3, [r7, #20]
    14fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1500:	2b00      	cmp	r3, #0
    1502:	d106      	bne.n	1512 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1504:	697b      	ldr	r3, [r7, #20]
    1506:	3324      	adds	r3, #36	; 0x24
    1508:	687a      	ldr	r2, [r7, #4]
    150a:	68b9      	ldr	r1, [r7, #8]
    150c:	4618      	mov	r0, r3
    150e:	f000 fc37 	bl	1d80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    1512:	6978      	ldr	r0, [r7, #20]
    1514:	f7ff ff50 	bl	13b8 <prvUnlockQueue>
	}
    1518:	bf00      	nop
    151a:	3718      	adds	r7, #24
    151c:	46bd      	mov	sp, r7
    151e:	bd80      	pop	{r7, pc}

00001520 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    1520:	b580      	push	{r7, lr}
    1522:	b08c      	sub	sp, #48	; 0x30
    1524:	af04      	add	r7, sp, #16
    1526:	60f8      	str	r0, [r7, #12]
    1528:	60b9      	str	r1, [r7, #8]
    152a:	603b      	str	r3, [r7, #0]
    152c:	4613      	mov	r3, r2
    152e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */ // Stack grows DOWN on M4F
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1530:	88fb      	ldrh	r3, [r7, #6]
    1532:	009b      	lsls	r3, r3, #2
    1534:	4618      	mov	r0, r3
    1536:	f7ff f8d1 	bl	6dc <pvPortMalloc>
    153a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
    153c:	697b      	ldr	r3, [r7, #20]
    153e:	2b00      	cmp	r3, #0
    1540:	d00e      	beq.n	1560 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    1542:	204c      	movs	r0, #76	; 0x4c
    1544:	f7ff f8ca 	bl	6dc <pvPortMalloc>
    1548:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
    154a:	69fb      	ldr	r3, [r7, #28]
    154c:	2b00      	cmp	r3, #0
    154e:	d003      	beq.n	1558 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    1550:	69fb      	ldr	r3, [r7, #28]
    1552:	697a      	ldr	r2, [r7, #20]
    1554:	631a      	str	r2, [r3, #48]	; 0x30
    1556:	e005      	b.n	1564 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    1558:	6978      	ldr	r0, [r7, #20]
    155a:	f7ff f951 	bl	800 <vPortFree>
    155e:	e001      	b.n	1564 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
    1560:	2300      	movs	r3, #0
    1562:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    1564:	69fb      	ldr	r3, [r7, #28]
    1566:	2b00      	cmp	r3, #0
    1568:	d013      	beq.n	1592 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    156a:	88fa      	ldrh	r2, [r7, #6]
    156c:	2300      	movs	r3, #0
    156e:	9303      	str	r3, [sp, #12]
    1570:	69fb      	ldr	r3, [r7, #28]
    1572:	9302      	str	r3, [sp, #8]
    1574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1576:	9301      	str	r3, [sp, #4]
    1578:	6abb      	ldr	r3, [r7, #40]	; 0x28
    157a:	9300      	str	r3, [sp, #0]
    157c:	683b      	ldr	r3, [r7, #0]
    157e:	68b9      	ldr	r1, [r7, #8]
    1580:	68f8      	ldr	r0, [r7, #12]
    1582:	f000 f80e 	bl	15a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    1586:	69f8      	ldr	r0, [r7, #28]
    1588:	f000 f882 	bl	1690 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    158c:	2301      	movs	r3, #1
    158e:	61bb      	str	r3, [r7, #24]
    1590:	e002      	b.n	1598 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1592:	f04f 33ff 	mov.w	r3, #4294967295
    1596:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    1598:	69bb      	ldr	r3, [r7, #24]
	}
    159a:	4618      	mov	r0, r3
    159c:	3720      	adds	r7, #32
    159e:	46bd      	mov	sp, r7
    15a0:	bd80      	pop	{r7, pc}

000015a2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    15a2:	b580      	push	{r7, lr}
    15a4:	b086      	sub	sp, #24
    15a6:	af00      	add	r7, sp, #0
    15a8:	60f8      	str	r0, [r7, #12]
    15aa:	60b9      	str	r1, [r7, #8]
    15ac:	607a      	str	r2, [r7, #4]
    15ae:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    15b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    15b2:	6b18      	ldr	r0, [r3, #48]	; 0x30
    15b4:	687b      	ldr	r3, [r7, #4]
    15b6:	009b      	lsls	r3, r3, #2
    15b8:	461a      	mov	r2, r3
    15ba:	21a5      	movs	r1, #165	; 0xa5
    15bc:	f003 f9eb 	bl	4996 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    15c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    15c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    15c4:	687b      	ldr	r3, [r7, #4]
    15c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    15ca:	3b01      	subs	r3, #1
    15cc:	009b      	lsls	r3, r3, #2
    15ce:	4413      	add	r3, r2
    15d0:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    15d2:	693b      	ldr	r3, [r7, #16]
    15d4:	f023 0307 	bic.w	r3, r3, #7
    15d8:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    15da:	693b      	ldr	r3, [r7, #16]
    15dc:	f003 0307 	and.w	r3, r3, #7
    15e0:	2b00      	cmp	r3, #0
    15e2:	d000      	beq.n	15e6 <prvInitialiseNewTask+0x44>
    15e4:	e7fe      	b.n	15e4 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    15e6:	2300      	movs	r3, #0
    15e8:	617b      	str	r3, [r7, #20]
    15ea:	e012      	b.n	1612 <prvInitialiseNewTask+0x70>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    15ec:	68ba      	ldr	r2, [r7, #8]
    15ee:	697b      	ldr	r3, [r7, #20]
    15f0:	4413      	add	r3, r2
    15f2:	7819      	ldrb	r1, [r3, #0]
    15f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    15f6:	697b      	ldr	r3, [r7, #20]
    15f8:	4413      	add	r3, r2
    15fa:	3334      	adds	r3, #52	; 0x34
    15fc:	460a      	mov	r2, r1
    15fe:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    1600:	68ba      	ldr	r2, [r7, #8]
    1602:	697b      	ldr	r3, [r7, #20]
    1604:	4413      	add	r3, r2
    1606:	781b      	ldrb	r3, [r3, #0]
    1608:	2b00      	cmp	r3, #0
    160a:	d006      	beq.n	161a <prvInitialiseNewTask+0x78>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    160c:	697b      	ldr	r3, [r7, #20]
    160e:	3301      	adds	r3, #1
    1610:	617b      	str	r3, [r7, #20]
    1612:	697b      	ldr	r3, [r7, #20]
    1614:	2b0f      	cmp	r3, #15
    1616:	d9e9      	bls.n	15ec <prvInitialiseNewTask+0x4a>
    1618:	e000      	b.n	161c <prvInitialiseNewTask+0x7a>
		{
			break;
    161a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    161c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    161e:	2200      	movs	r2, #0
    1620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    1624:	6a3b      	ldr	r3, [r7, #32]
    1626:	2b03      	cmp	r3, #3
    1628:	d901      	bls.n	162e <prvInitialiseNewTask+0x8c>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    162a:	2303      	movs	r3, #3
    162c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    162e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1630:	6a3a      	ldr	r2, [r7, #32]
    1632:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    1634:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1636:	3304      	adds	r3, #4
    1638:	4618      	mov	r0, r3
    163a:	f7ff fac7 	bl	bcc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    163e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1640:	3318      	adds	r3, #24
    1642:	4618      	mov	r0, r3
    1644:	f7ff fac2 	bl	bcc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    1648:	6abb      	ldr	r3, [r7, #40]	; 0x28
    164a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    164c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    164e:	6a3b      	ldr	r3, [r7, #32]
    1650:	f1c3 0204 	rsb	r2, r3, #4
    1654:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1656:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    1658:	6abb      	ldr	r3, [r7, #40]	; 0x28
    165a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    165c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    165e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1660:	2200      	movs	r2, #0
    1662:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    1664:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1666:	2200      	movs	r2, #0
    1668:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    166c:	683a      	ldr	r2, [r7, #0]
    166e:	68f9      	ldr	r1, [r7, #12]
    1670:	6938      	ldr	r0, [r7, #16]
    1672:	f7fe fd55 	bl	120 <pxPortInitialiseStack>
    1676:	4602      	mov	r2, r0
    1678:	6abb      	ldr	r3, [r7, #40]	; 0x28
    167a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    167e:	2b00      	cmp	r3, #0
    1680:	d002      	beq.n	1688 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    1682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1684:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1686:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    1688:	bf00      	nop
    168a:	3718      	adds	r7, #24
    168c:	46bd      	mov	sp, r7
    168e:	bd80      	pop	{r7, pc}

00001690 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    1690:	b580      	push	{r7, lr}
    1692:	b082      	sub	sp, #8
    1694:	af00      	add	r7, sp, #0
    1696:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    1698:	f7fe fe44 	bl	324 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
    169c:	4b2b      	ldr	r3, [pc, #172]	; (174c <prvAddNewTaskToReadyList+0xbc>)
    169e:	681b      	ldr	r3, [r3, #0]
    16a0:	3301      	adds	r3, #1
    16a2:	4a2a      	ldr	r2, [pc, #168]	; (174c <prvAddNewTaskToReadyList+0xbc>)
    16a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    16a6:	4b2a      	ldr	r3, [pc, #168]	; (1750 <prvAddNewTaskToReadyList+0xc0>)
    16a8:	681b      	ldr	r3, [r3, #0]
    16aa:	2b00      	cmp	r3, #0
    16ac:	d109      	bne.n	16c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    16ae:	4a28      	ldr	r2, [pc, #160]	; (1750 <prvAddNewTaskToReadyList+0xc0>)
    16b0:	687b      	ldr	r3, [r7, #4]
    16b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    16b4:	4b25      	ldr	r3, [pc, #148]	; (174c <prvAddNewTaskToReadyList+0xbc>)
    16b6:	681b      	ldr	r3, [r3, #0]
    16b8:	2b01      	cmp	r3, #1
    16ba:	d110      	bne.n	16de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    16bc:	f000 fd08 	bl	20d0 <prvInitialiseTaskLists>
    16c0:	e00d      	b.n	16de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    16c2:	4b24      	ldr	r3, [pc, #144]	; (1754 <prvAddNewTaskToReadyList+0xc4>)
    16c4:	681b      	ldr	r3, [r3, #0]
    16c6:	2b00      	cmp	r3, #0
    16c8:	d109      	bne.n	16de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    16ca:	4b21      	ldr	r3, [pc, #132]	; (1750 <prvAddNewTaskToReadyList+0xc0>)
    16cc:	681b      	ldr	r3, [r3, #0]
    16ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    16d0:	687b      	ldr	r3, [r7, #4]
    16d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    16d4:	429a      	cmp	r2, r3
    16d6:	d802      	bhi.n	16de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    16d8:	4a1d      	ldr	r2, [pc, #116]	; (1750 <prvAddNewTaskToReadyList+0xc0>)
    16da:	687b      	ldr	r3, [r7, #4]
    16dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    16de:	4b1e      	ldr	r3, [pc, #120]	; (1758 <prvAddNewTaskToReadyList+0xc8>)
    16e0:	681b      	ldr	r3, [r3, #0]
    16e2:	3301      	adds	r3, #1
    16e4:	4a1c      	ldr	r2, [pc, #112]	; (1758 <prvAddNewTaskToReadyList+0xc8>)
    16e6:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		//prvAddTaskToReadyList( pxNewTCB );
		prvReaddTaskToReadyList( pxNewTCB );
    16e8:	687b      	ldr	r3, [r7, #4]
    16ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    16ec:	4b1b      	ldr	r3, [pc, #108]	; (175c <prvAddNewTaskToReadyList+0xcc>)
    16ee:	681b      	ldr	r3, [r3, #0]
    16f0:	429a      	cmp	r2, r3
    16f2:	d903      	bls.n	16fc <prvAddNewTaskToReadyList+0x6c>
    16f4:	687b      	ldr	r3, [r7, #4]
    16f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    16f8:	4a18      	ldr	r2, [pc, #96]	; (175c <prvAddNewTaskToReadyList+0xcc>)
    16fa:	6013      	str	r3, [r2, #0]
    16fc:	687b      	ldr	r3, [r7, #4]
    16fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1700:	4613      	mov	r3, r2
    1702:	009b      	lsls	r3, r3, #2
    1704:	4413      	add	r3, r2
    1706:	009b      	lsls	r3, r3, #2
    1708:	4a15      	ldr	r2, [pc, #84]	; (1760 <prvAddNewTaskToReadyList+0xd0>)
    170a:	441a      	add	r2, r3
    170c:	687b      	ldr	r3, [r7, #4]
    170e:	3304      	adds	r3, #4
    1710:	4619      	mov	r1, r3
    1712:	4610      	mov	r0, r2
    1714:	f7ff fa67 	bl	be6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    1718:	f7fe fe2a 	bl	370 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
    171c:	4b0d      	ldr	r3, [pc, #52]	; (1754 <prvAddNewTaskToReadyList+0xc4>)
    171e:	681b      	ldr	r3, [r3, #0]
    1720:	2b00      	cmp	r3, #0
    1722:	d00e      	beq.n	1742 <prvAddNewTaskToReadyList+0xb2>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    1724:	4b0a      	ldr	r3, [pc, #40]	; (1750 <prvAddNewTaskToReadyList+0xc0>)
    1726:	681b      	ldr	r3, [r3, #0]
    1728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    172a:	687b      	ldr	r3, [r7, #4]
    172c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    172e:	429a      	cmp	r2, r3
    1730:	d207      	bcs.n	1742 <prvAddNewTaskToReadyList+0xb2>
		{
			taskYIELD_IF_USING_PREEMPTION();    /* Set a PendSV to request a context switch. */                             \
    1732:	4b0c      	ldr	r3, [pc, #48]	; (1764 <prvAddNewTaskToReadyList+0xd4>)
    1734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1738:	601a      	str	r2, [r3, #0]
    173a:	f3bf 8f4f 	dsb	sy
    173e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    1742:	bf00      	nop
    1744:	3708      	adds	r7, #8
    1746:	46bd      	mov	sp, r7
    1748:	bd80      	pop	{r7, pc}
    174a:	bf00      	nop
    174c:	10006400 	.word	0x10006400
    1750:	10006354 	.word	0x10006354
    1754:	1000640c 	.word	0x1000640c
    1758:	1000641c 	.word	0x1000641c
    175c:	10006408 	.word	0x10006408
    1760:	10006358 	.word	0x10006358
    1764:	e000ed04 	.word	0xe000ed04

00001768 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    1768:	b580      	push	{r7, lr}
    176a:	b084      	sub	sp, #16
    176c:	af00      	add	r7, sp, #0
    176e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    1770:	f7fe fdd8 	bl	324 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    1774:	687b      	ldr	r3, [r7, #4]
    1776:	2b00      	cmp	r3, #0
    1778:	d102      	bne.n	1780 <vTaskSuspend+0x18>
    177a:	4b26      	ldr	r3, [pc, #152]	; (1814 <vTaskSuspend+0xac>)
    177c:	681b      	ldr	r3, [r3, #0]
    177e:	e000      	b.n	1782 <vTaskSuspend+0x1a>
    1780:	687b      	ldr	r3, [r7, #4]
    1782:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1784:	68fb      	ldr	r3, [r7, #12]
    1786:	3304      	adds	r3, #4
    1788:	4618      	mov	r0, r3
    178a:	f7ff fa89 	bl	ca0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    178e:	68fb      	ldr	r3, [r7, #12]
    1790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1792:	2b00      	cmp	r3, #0
    1794:	d004      	beq.n	17a0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1796:	68fb      	ldr	r3, [r7, #12]
    1798:	3318      	adds	r3, #24
    179a:	4618      	mov	r0, r3
    179c:	f7ff fa80 	bl	ca0 <uxListRemove>
				mtCOVERAGE_TEST_MARKER();
			}
			//GEO: addition for support of SystemView Profiler
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
			//GEO: end modification
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    17a0:	68fb      	ldr	r3, [r7, #12]
    17a2:	3304      	adds	r3, #4
    17a4:	4619      	mov	r1, r3
    17a6:	481c      	ldr	r0, [pc, #112]	; (1818 <vTaskSuspend+0xb0>)
    17a8:	f7ff fa1d 	bl	be6 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    17ac:	f7fe fde0 	bl	370 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
    17b0:	4b1a      	ldr	r3, [pc, #104]	; (181c <vTaskSuspend+0xb4>)
    17b2:	681b      	ldr	r3, [r3, #0]
    17b4:	2b00      	cmp	r3, #0
    17b6:	d005      	beq.n	17c4 <vTaskSuspend+0x5c>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    17b8:	f7fe fdb4 	bl	324 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
    17bc:	f000 fcca 	bl	2154 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
    17c0:	f7fe fdd6 	bl	370 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    17c4:	4b13      	ldr	r3, [pc, #76]	; (1814 <vTaskSuspend+0xac>)
    17c6:	681b      	ldr	r3, [r3, #0]
    17c8:	68fa      	ldr	r2, [r7, #12]
    17ca:	429a      	cmp	r2, r3
    17cc:	d11d      	bne.n	180a <vTaskSuspend+0xa2>
		{
			if( xSchedulerRunning != pdFALSE )
    17ce:	4b13      	ldr	r3, [pc, #76]	; (181c <vTaskSuspend+0xb4>)
    17d0:	681b      	ldr	r3, [r3, #0]
    17d2:	2b00      	cmp	r3, #0
    17d4:	d00d      	beq.n	17f2 <vTaskSuspend+0x8a>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
    17d6:	4b12      	ldr	r3, [pc, #72]	; (1820 <vTaskSuspend+0xb8>)
    17d8:	681b      	ldr	r3, [r3, #0]
    17da:	2b00      	cmp	r3, #0
    17dc:	d000      	beq.n	17e0 <vTaskSuspend+0x78>
    17de:	e7fe      	b.n	17de <vTaskSuspend+0x76>
				portYIELD_WITHIN_API();
    17e0:	4b10      	ldr	r3, [pc, #64]	; (1824 <vTaskSuspend+0xbc>)
    17e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    17e6:	601a      	str	r2, [r3, #0]
    17e8:	f3bf 8f4f 	dsb	sy
    17ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    17f0:	e00b      	b.n	180a <vTaskSuspend+0xa2>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    17f2:	4b09      	ldr	r3, [pc, #36]	; (1818 <vTaskSuspend+0xb0>)
    17f4:	681a      	ldr	r2, [r3, #0]
    17f6:	4b0c      	ldr	r3, [pc, #48]	; (1828 <vTaskSuspend+0xc0>)
    17f8:	681b      	ldr	r3, [r3, #0]
    17fa:	429a      	cmp	r2, r3
    17fc:	d103      	bne.n	1806 <vTaskSuspend+0x9e>
					pxCurrentTCB = NULL;
    17fe:	4b05      	ldr	r3, [pc, #20]	; (1814 <vTaskSuspend+0xac>)
    1800:	2200      	movs	r2, #0
    1802:	601a      	str	r2, [r3, #0]
	}
    1804:	e001      	b.n	180a <vTaskSuspend+0xa2>
					vTaskSwitchContext();
    1806:	f000 fa01 	bl	1c0c <vTaskSwitchContext>
	}
    180a:	bf00      	nop
    180c:	3710      	adds	r7, #16
    180e:	46bd      	mov	sp, r7
    1810:	bd80      	pop	{r7, pc}
    1812:	bf00      	nop
    1814:	10006354 	.word	0x10006354
    1818:	100063ec 	.word	0x100063ec
    181c:	1000640c 	.word	0x1000640c
    1820:	10006428 	.word	0x10006428
    1824:	e000ed04 	.word	0xe000ed04
    1828:	10006400 	.word	0x10006400

0000182c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    182c:	b580      	push	{r7, lr}
    182e:	b084      	sub	sp, #16
    1830:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    1832:	4b1a      	ldr	r3, [pc, #104]	; (189c <vTaskStartScheduler+0x70>)
    1834:	9301      	str	r3, [sp, #4]
    1836:	2300      	movs	r3, #0
    1838:	9300      	str	r3, [sp, #0]
    183a:	2300      	movs	r3, #0
    183c:	f44f 7280 	mov.w	r2, #256	; 0x100
    1840:	4917      	ldr	r1, [pc, #92]	; (18a0 <vTaskStartScheduler+0x74>)
    1842:	4818      	ldr	r0, [pc, #96]	; (18a4 <vTaskStartScheduler+0x78>)
    1844:	f7ff fe6c 	bl	1520 <xTaskCreate>
    1848:	6078      	str	r0, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    184a:	687b      	ldr	r3, [r7, #4]
    184c:	2b01      	cmp	r3, #1
    184e:	d102      	bne.n	1856 <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
    1850:	f000 fd30 	bl	22b4 <xTimerCreateTimerTask>
    1854:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    1856:	687b      	ldr	r3, [r7, #4]
    1858:	2b01      	cmp	r3, #1
    185a:	d115      	bne.n	1888 <vTaskStartScheduler+0x5c>
	__asm volatile
    185c:	f04f 0380 	mov.w	r3, #128	; 0x80
    1860:	f383 8811 	msr	BASEPRI, r3
    1864:	f3bf 8f6f 	isb	sy
    1868:	f3bf 8f4f 	dsb	sy
    186c:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    186e:	4b0e      	ldr	r3, [pc, #56]	; (18a8 <vTaskStartScheduler+0x7c>)
    1870:	f04f 32ff 	mov.w	r2, #4294967295
    1874:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    1876:	4b0d      	ldr	r3, [pc, #52]	; (18ac <vTaskStartScheduler+0x80>)
    1878:	2201      	movs	r2, #1
    187a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    187c:	4b0c      	ldr	r3, [pc, #48]	; (18b0 <vTaskStartScheduler+0x84>)
    187e:	2200      	movs	r2, #0
    1880:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    1882:	f7fe fccb 	bl	21c <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    1886:	e004      	b.n	1892 <vTaskStartScheduler+0x66>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    1888:	687b      	ldr	r3, [r7, #4]
    188a:	f1b3 3fff 	cmp.w	r3, #4294967295
    188e:	d100      	bne.n	1892 <vTaskStartScheduler+0x66>
    1890:	e7fe      	b.n	1890 <vTaskStartScheduler+0x64>
}
    1892:	bf00      	nop
    1894:	3708      	adds	r7, #8
    1896:	46bd      	mov	sp, r7
    1898:	bd80      	pop	{r7, pc}
    189a:	bf00      	nop
    189c:	10006424 	.word	0x10006424
    18a0:	000049b4 	.word	0x000049b4
    18a4:	00002009 	.word	0x00002009
    18a8:	10006420 	.word	0x10006420
    18ac:	1000640c 	.word	0x1000640c
    18b0:	10006404 	.word	0x10006404

000018b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    18b4:	b480      	push	{r7}
    18b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    18b8:	4b04      	ldr	r3, [pc, #16]	; (18cc <vTaskSuspendAll+0x18>)
    18ba:	681b      	ldr	r3, [r3, #0]
    18bc:	3301      	adds	r3, #1
    18be:	4a03      	ldr	r2, [pc, #12]	; (18cc <vTaskSuspendAll+0x18>)
    18c0:	6013      	str	r3, [r2, #0]
}
    18c2:	bf00      	nop
    18c4:	46bd      	mov	sp, r7
    18c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    18ca:	4770      	bx	lr
    18cc:	10006428 	.word	0x10006428

000018d0 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
    18d0:	b480      	push	{r7}
    18d2:	b083      	sub	sp, #12
    18d4:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
    18d6:	2300      	movs	r3, #0
    18d8:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
    18da:	4b14      	ldr	r3, [pc, #80]	; (192c <prvGetExpectedIdleTime+0x5c>)
    18dc:	681b      	ldr	r3, [r3, #0]
    18de:	2b00      	cmp	r3, #0
    18e0:	d001      	beq.n	18e6 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
    18e2:	2301      	movs	r3, #1
    18e4:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
    18e6:	4b12      	ldr	r3, [pc, #72]	; (1930 <prvGetExpectedIdleTime+0x60>)
    18e8:	681b      	ldr	r3, [r3, #0]
    18ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    18ec:	2b00      	cmp	r3, #0
    18ee:	d002      	beq.n	18f6 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
    18f0:	2300      	movs	r3, #0
    18f2:	607b      	str	r3, [r7, #4]
    18f4:	e012      	b.n	191c <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
    18f6:	4b0f      	ldr	r3, [pc, #60]	; (1934 <prvGetExpectedIdleTime+0x64>)
    18f8:	681b      	ldr	r3, [r3, #0]
    18fa:	2b01      	cmp	r3, #1
    18fc:	d902      	bls.n	1904 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
    18fe:	2300      	movs	r3, #0
    1900:	607b      	str	r3, [r7, #4]
    1902:	e00b      	b.n	191c <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
    1904:	683b      	ldr	r3, [r7, #0]
    1906:	2b00      	cmp	r3, #0
    1908:	d002      	beq.n	1910 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
    190a:	2300      	movs	r3, #0
    190c:	607b      	str	r3, [r7, #4]
    190e:	e005      	b.n	191c <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
    1910:	4b09      	ldr	r3, [pc, #36]	; (1938 <prvGetExpectedIdleTime+0x68>)
    1912:	681a      	ldr	r2, [r3, #0]
    1914:	4b09      	ldr	r3, [pc, #36]	; (193c <prvGetExpectedIdleTime+0x6c>)
    1916:	681b      	ldr	r3, [r3, #0]
    1918:	1ad3      	subs	r3, r2, r3
    191a:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
    191c:	687b      	ldr	r3, [r7, #4]
	}
    191e:	4618      	mov	r0, r3
    1920:	370c      	adds	r7, #12
    1922:	46bd      	mov	sp, r7
    1924:	f85d 7b04 	ldr.w	r7, [sp], #4
    1928:	4770      	bx	lr
    192a:	bf00      	nop
    192c:	10006408 	.word	0x10006408
    1930:	10006354 	.word	0x10006354
    1934:	10006358 	.word	0x10006358
    1938:	10006420 	.word	0x10006420
    193c:	10006404 	.word	0x10006404

00001940 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    1940:	b580      	push	{r7, lr}
    1942:	b084      	sub	sp, #16
    1944:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    1946:	2300      	movs	r3, #0
    1948:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    194a:	2300      	movs	r3, #0
    194c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    194e:	4b3d      	ldr	r3, [pc, #244]	; (1a44 <xTaskResumeAll+0x104>)
    1950:	681b      	ldr	r3, [r3, #0]
    1952:	2b00      	cmp	r3, #0
    1954:	d100      	bne.n	1958 <xTaskResumeAll+0x18>
    1956:	e7fe      	b.n	1956 <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    1958:	f7fe fce4 	bl	324 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    195c:	4b39      	ldr	r3, [pc, #228]	; (1a44 <xTaskResumeAll+0x104>)
    195e:	681b      	ldr	r3, [r3, #0]
    1960:	3b01      	subs	r3, #1
    1962:	4a38      	ldr	r2, [pc, #224]	; (1a44 <xTaskResumeAll+0x104>)
    1964:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1966:	4b37      	ldr	r3, [pc, #220]	; (1a44 <xTaskResumeAll+0x104>)
    1968:	681b      	ldr	r3, [r3, #0]
    196a:	2b00      	cmp	r3, #0
    196c:	d162      	bne.n	1a34 <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    196e:	4b36      	ldr	r3, [pc, #216]	; (1a48 <xTaskResumeAll+0x108>)
    1970:	681b      	ldr	r3, [r3, #0]
    1972:	2b00      	cmp	r3, #0
    1974:	d05e      	beq.n	1a34 <xTaskResumeAll+0xf4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1976:	e02f      	b.n	19d8 <xTaskResumeAll+0x98>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    1978:	4b34      	ldr	r3, [pc, #208]	; (1a4c <xTaskResumeAll+0x10c>)
    197a:	68db      	ldr	r3, [r3, #12]
    197c:	68db      	ldr	r3, [r3, #12]
    197e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1980:	68fb      	ldr	r3, [r7, #12]
    1982:	3318      	adds	r3, #24
    1984:	4618      	mov	r0, r3
    1986:	f7ff f98b 	bl	ca0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    198a:	68fb      	ldr	r3, [r7, #12]
    198c:	3304      	adds	r3, #4
    198e:	4618      	mov	r0, r3
    1990:	f7ff f986 	bl	ca0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    1994:	68fb      	ldr	r3, [r7, #12]
    1996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1998:	4b2d      	ldr	r3, [pc, #180]	; (1a50 <xTaskResumeAll+0x110>)
    199a:	681b      	ldr	r3, [r3, #0]
    199c:	429a      	cmp	r2, r3
    199e:	d903      	bls.n	19a8 <xTaskResumeAll+0x68>
    19a0:	68fb      	ldr	r3, [r7, #12]
    19a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    19a4:	4a2a      	ldr	r2, [pc, #168]	; (1a50 <xTaskResumeAll+0x110>)
    19a6:	6013      	str	r3, [r2, #0]
    19a8:	68fb      	ldr	r3, [r7, #12]
    19aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    19ac:	4613      	mov	r3, r2
    19ae:	009b      	lsls	r3, r3, #2
    19b0:	4413      	add	r3, r2
    19b2:	009b      	lsls	r3, r3, #2
    19b4:	4a27      	ldr	r2, [pc, #156]	; (1a54 <xTaskResumeAll+0x114>)
    19b6:	441a      	add	r2, r3
    19b8:	68fb      	ldr	r3, [r7, #12]
    19ba:	3304      	adds	r3, #4
    19bc:	4619      	mov	r1, r3
    19be:	4610      	mov	r0, r2
    19c0:	f7ff f911 	bl	be6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    19c4:	68fb      	ldr	r3, [r7, #12]
    19c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    19c8:	4b23      	ldr	r3, [pc, #140]	; (1a58 <xTaskResumeAll+0x118>)
    19ca:	681b      	ldr	r3, [r3, #0]
    19cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    19ce:	429a      	cmp	r2, r3
    19d0:	d302      	bcc.n	19d8 <xTaskResumeAll+0x98>
					{
						xYieldPending = pdTRUE;
    19d2:	4b22      	ldr	r3, [pc, #136]	; (1a5c <xTaskResumeAll+0x11c>)
    19d4:	2201      	movs	r2, #1
    19d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    19d8:	4b1c      	ldr	r3, [pc, #112]	; (1a4c <xTaskResumeAll+0x10c>)
    19da:	681b      	ldr	r3, [r3, #0]
    19dc:	2b00      	cmp	r3, #0
    19de:	d1cb      	bne.n	1978 <xTaskResumeAll+0x38>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    19e0:	68fb      	ldr	r3, [r7, #12]
    19e2:	2b00      	cmp	r3, #0
    19e4:	d001      	beq.n	19ea <xTaskResumeAll+0xaa>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    19e6:	f000 fbb5 	bl	2154 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    19ea:	4b1d      	ldr	r3, [pc, #116]	; (1a60 <xTaskResumeAll+0x120>)
    19ec:	681b      	ldr	r3, [r3, #0]
    19ee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    19f0:	687b      	ldr	r3, [r7, #4]
    19f2:	2b00      	cmp	r3, #0
    19f4:	d010      	beq.n	1a18 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    19f6:	f000 f865 	bl	1ac4 <xTaskIncrementTick>
    19fa:	4603      	mov	r3, r0
    19fc:	2b00      	cmp	r3, #0
    19fe:	d002      	beq.n	1a06 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
    1a00:	4b16      	ldr	r3, [pc, #88]	; (1a5c <xTaskResumeAll+0x11c>)
    1a02:	2201      	movs	r2, #1
    1a04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    1a06:	687b      	ldr	r3, [r7, #4]
    1a08:	3b01      	subs	r3, #1
    1a0a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    1a0c:	687b      	ldr	r3, [r7, #4]
    1a0e:	2b00      	cmp	r3, #0
    1a10:	d1f1      	bne.n	19f6 <xTaskResumeAll+0xb6>

						uxPendedTicks = 0;
    1a12:	4b13      	ldr	r3, [pc, #76]	; (1a60 <xTaskResumeAll+0x120>)
    1a14:	2200      	movs	r2, #0
    1a16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    1a18:	4b10      	ldr	r3, [pc, #64]	; (1a5c <xTaskResumeAll+0x11c>)
    1a1a:	681b      	ldr	r3, [r3, #0]
    1a1c:	2b00      	cmp	r3, #0
    1a1e:	d009      	beq.n	1a34 <xTaskResumeAll+0xf4>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    1a20:	2301      	movs	r3, #1
    1a22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    1a24:	4b0f      	ldr	r3, [pc, #60]	; (1a64 <xTaskResumeAll+0x124>)
    1a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1a2a:	601a      	str	r2, [r3, #0]
    1a2c:	f3bf 8f4f 	dsb	sy
    1a30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    1a34:	f7fe fc9c 	bl	370 <vPortExitCritical>

	return xAlreadyYielded;
    1a38:	68bb      	ldr	r3, [r7, #8]
}
    1a3a:	4618      	mov	r0, r3
    1a3c:	3710      	adds	r7, #16
    1a3e:	46bd      	mov	sp, r7
    1a40:	bd80      	pop	{r7, pc}
    1a42:	bf00      	nop
    1a44:	10006428 	.word	0x10006428
    1a48:	10006400 	.word	0x10006400
    1a4c:	100063d8 	.word	0x100063d8
    1a50:	10006408 	.word	0x10006408
    1a54:	10006358 	.word	0x10006358
    1a58:	10006354 	.word	0x10006354
    1a5c:	10006414 	.word	0x10006414
    1a60:	10006410 	.word	0x10006410
    1a64:	e000ed04 	.word	0xe000ed04

00001a68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    1a68:	b480      	push	{r7}
    1a6a:	b083      	sub	sp, #12
    1a6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    1a6e:	4b05      	ldr	r3, [pc, #20]	; (1a84 <xTaskGetTickCount+0x1c>)
    1a70:	681b      	ldr	r3, [r3, #0]
    1a72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    1a74:	687b      	ldr	r3, [r7, #4]
}
    1a76:	4618      	mov	r0, r3
    1a78:	370c      	adds	r7, #12
    1a7a:	46bd      	mov	sp, r7
    1a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a80:	4770      	bx	lr
    1a82:	bf00      	nop
    1a84:	10006404 	.word	0x10006404

00001a88 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
    1a88:	b480      	push	{r7}
    1a8a:	b083      	sub	sp, #12
    1a8c:	af00      	add	r7, sp, #0
    1a8e:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
    1a90:	4b0a      	ldr	r3, [pc, #40]	; (1abc <vTaskStepTick+0x34>)
    1a92:	681a      	ldr	r2, [r3, #0]
    1a94:	687b      	ldr	r3, [r7, #4]
    1a96:	441a      	add	r2, r3
    1a98:	4b09      	ldr	r3, [pc, #36]	; (1ac0 <vTaskStepTick+0x38>)
    1a9a:	681b      	ldr	r3, [r3, #0]
    1a9c:	429a      	cmp	r2, r3
    1a9e:	d900      	bls.n	1aa2 <vTaskStepTick+0x1a>
    1aa0:	e7fe      	b.n	1aa0 <vTaskStepTick+0x18>
		xTickCount += xTicksToJump;
    1aa2:	4b06      	ldr	r3, [pc, #24]	; (1abc <vTaskStepTick+0x34>)
    1aa4:	681a      	ldr	r2, [r3, #0]
    1aa6:	687b      	ldr	r3, [r7, #4]
    1aa8:	4413      	add	r3, r2
    1aaa:	4a04      	ldr	r2, [pc, #16]	; (1abc <vTaskStepTick+0x34>)
    1aac:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
    1aae:	bf00      	nop
    1ab0:	370c      	adds	r7, #12
    1ab2:	46bd      	mov	sp, r7
    1ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ab8:	4770      	bx	lr
    1aba:	bf00      	nop
    1abc:	10006404 	.word	0x10006404
    1ac0:	10006420 	.word	0x10006420

00001ac4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    1ac4:	b580      	push	{r7, lr}
    1ac6:	b086      	sub	sp, #24
    1ac8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    1aca:	2300      	movs	r3, #0
    1acc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1ace:	4b44      	ldr	r3, [pc, #272]	; (1be0 <xTaskIncrementTick+0x11c>)
    1ad0:	681b      	ldr	r3, [r3, #0]
    1ad2:	2b00      	cmp	r3, #0
    1ad4:	d174      	bne.n	1bc0 <xTaskIncrementTick+0xfc>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
    1ad6:	4b43      	ldr	r3, [pc, #268]	; (1be4 <xTaskIncrementTick+0x120>)
    1ad8:	681b      	ldr	r3, [r3, #0]
    1ada:	3301      	adds	r3, #1
    1adc:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    1ade:	4a41      	ldr	r2, [pc, #260]	; (1be4 <xTaskIncrementTick+0x120>)
    1ae0:	693b      	ldr	r3, [r7, #16]
    1ae2:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
    1ae4:	693b      	ldr	r3, [r7, #16]
    1ae6:	2b00      	cmp	r3, #0
    1ae8:	d116      	bne.n	1b18 <xTaskIncrementTick+0x54>
		{
			taskSWITCH_DELAYED_LISTS();
    1aea:	4b3f      	ldr	r3, [pc, #252]	; (1be8 <xTaskIncrementTick+0x124>)
    1aec:	681b      	ldr	r3, [r3, #0]
    1aee:	681b      	ldr	r3, [r3, #0]
    1af0:	2b00      	cmp	r3, #0
    1af2:	d000      	beq.n	1af6 <xTaskIncrementTick+0x32>
    1af4:	e7fe      	b.n	1af4 <xTaskIncrementTick+0x30>
    1af6:	4b3c      	ldr	r3, [pc, #240]	; (1be8 <xTaskIncrementTick+0x124>)
    1af8:	681b      	ldr	r3, [r3, #0]
    1afa:	60fb      	str	r3, [r7, #12]
    1afc:	4b3b      	ldr	r3, [pc, #236]	; (1bec <xTaskIncrementTick+0x128>)
    1afe:	681b      	ldr	r3, [r3, #0]
    1b00:	4a39      	ldr	r2, [pc, #228]	; (1be8 <xTaskIncrementTick+0x124>)
    1b02:	6013      	str	r3, [r2, #0]
    1b04:	4a39      	ldr	r2, [pc, #228]	; (1bec <xTaskIncrementTick+0x128>)
    1b06:	68fb      	ldr	r3, [r7, #12]
    1b08:	6013      	str	r3, [r2, #0]
    1b0a:	4b39      	ldr	r3, [pc, #228]	; (1bf0 <xTaskIncrementTick+0x12c>)
    1b0c:	681b      	ldr	r3, [r3, #0]
    1b0e:	3301      	adds	r3, #1
    1b10:	4a37      	ldr	r2, [pc, #220]	; (1bf0 <xTaskIncrementTick+0x12c>)
    1b12:	6013      	str	r3, [r2, #0]
    1b14:	f000 fb1e 	bl	2154 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    1b18:	4b36      	ldr	r3, [pc, #216]	; (1bf4 <xTaskIncrementTick+0x130>)
    1b1a:	681b      	ldr	r3, [r3, #0]
    1b1c:	693a      	ldr	r2, [r7, #16]
    1b1e:	429a      	cmp	r2, r3
    1b20:	d353      	bcc.n	1bca <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1b22:	4b31      	ldr	r3, [pc, #196]	; (1be8 <xTaskIncrementTick+0x124>)
    1b24:	681b      	ldr	r3, [r3, #0]
    1b26:	681b      	ldr	r3, [r3, #0]
    1b28:	2b00      	cmp	r3, #0
    1b2a:	d101      	bne.n	1b30 <xTaskIncrementTick+0x6c>
    1b2c:	2301      	movs	r3, #1
    1b2e:	e000      	b.n	1b32 <xTaskIncrementTick+0x6e>
    1b30:	2300      	movs	r3, #0
    1b32:	2b00      	cmp	r3, #0
    1b34:	d004      	beq.n	1b40 <xTaskIncrementTick+0x7c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1b36:	4b2f      	ldr	r3, [pc, #188]	; (1bf4 <xTaskIncrementTick+0x130>)
    1b38:	f04f 32ff 	mov.w	r2, #4294967295
    1b3c:	601a      	str	r2, [r3, #0]
					break;
    1b3e:	e044      	b.n	1bca <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1b40:	4b29      	ldr	r3, [pc, #164]	; (1be8 <xTaskIncrementTick+0x124>)
    1b42:	681b      	ldr	r3, [r3, #0]
    1b44:	68db      	ldr	r3, [r3, #12]
    1b46:	68db      	ldr	r3, [r3, #12]
    1b48:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    1b4a:	68bb      	ldr	r3, [r7, #8]
    1b4c:	685b      	ldr	r3, [r3, #4]
    1b4e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    1b50:	693a      	ldr	r2, [r7, #16]
    1b52:	687b      	ldr	r3, [r7, #4]
    1b54:	429a      	cmp	r2, r3
    1b56:	d203      	bcs.n	1b60 <xTaskIncrementTick+0x9c>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    1b58:	4a26      	ldr	r2, [pc, #152]	; (1bf4 <xTaskIncrementTick+0x130>)
    1b5a:	687b      	ldr	r3, [r7, #4]
    1b5c:	6013      	str	r3, [r2, #0]
						break;
    1b5e:	e034      	b.n	1bca <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1b60:	68bb      	ldr	r3, [r7, #8]
    1b62:	3304      	adds	r3, #4
    1b64:	4618      	mov	r0, r3
    1b66:	f7ff f89b 	bl	ca0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1b6a:	68bb      	ldr	r3, [r7, #8]
    1b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1b6e:	2b00      	cmp	r3, #0
    1b70:	d004      	beq.n	1b7c <xTaskIncrementTick+0xb8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1b72:	68bb      	ldr	r3, [r7, #8]
    1b74:	3318      	adds	r3, #24
    1b76:	4618      	mov	r0, r3
    1b78:	f7ff f892 	bl	ca0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    1b7c:	68bb      	ldr	r3, [r7, #8]
    1b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1b80:	4b1d      	ldr	r3, [pc, #116]	; (1bf8 <xTaskIncrementTick+0x134>)
    1b82:	681b      	ldr	r3, [r3, #0]
    1b84:	429a      	cmp	r2, r3
    1b86:	d903      	bls.n	1b90 <xTaskIncrementTick+0xcc>
    1b88:	68bb      	ldr	r3, [r7, #8]
    1b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1b8c:	4a1a      	ldr	r2, [pc, #104]	; (1bf8 <xTaskIncrementTick+0x134>)
    1b8e:	6013      	str	r3, [r2, #0]
    1b90:	68bb      	ldr	r3, [r7, #8]
    1b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1b94:	4613      	mov	r3, r2
    1b96:	009b      	lsls	r3, r3, #2
    1b98:	4413      	add	r3, r2
    1b9a:	009b      	lsls	r3, r3, #2
    1b9c:	4a17      	ldr	r2, [pc, #92]	; (1bfc <xTaskIncrementTick+0x138>)
    1b9e:	441a      	add	r2, r3
    1ba0:	68bb      	ldr	r3, [r7, #8]
    1ba2:	3304      	adds	r3, #4
    1ba4:	4619      	mov	r1, r3
    1ba6:	4610      	mov	r0, r2
    1ba8:	f7ff f81d 	bl	be6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1bac:	68bb      	ldr	r3, [r7, #8]
    1bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1bb0:	4b13      	ldr	r3, [pc, #76]	; (1c00 <xTaskIncrementTick+0x13c>)
    1bb2:	681b      	ldr	r3, [r3, #0]
    1bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1bb6:	429a      	cmp	r2, r3
    1bb8:	d3b3      	bcc.n	1b22 <xTaskIncrementTick+0x5e>
						{
							xSwitchRequired = pdTRUE;
    1bba:	2301      	movs	r3, #1
    1bbc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1bbe:	e7b0      	b.n	1b22 <xTaskIncrementTick+0x5e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    1bc0:	4b10      	ldr	r3, [pc, #64]	; (1c04 <xTaskIncrementTick+0x140>)
    1bc2:	681b      	ldr	r3, [r3, #0]
    1bc4:	3301      	adds	r3, #1
    1bc6:	4a0f      	ldr	r2, [pc, #60]	; (1c04 <xTaskIncrementTick+0x140>)
    1bc8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    1bca:	4b0f      	ldr	r3, [pc, #60]	; (1c08 <xTaskIncrementTick+0x144>)
    1bcc:	681b      	ldr	r3, [r3, #0]
    1bce:	2b00      	cmp	r3, #0
    1bd0:	d001      	beq.n	1bd6 <xTaskIncrementTick+0x112>
		{
			xSwitchRequired = pdTRUE;
    1bd2:	2301      	movs	r3, #1
    1bd4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    1bd6:	697b      	ldr	r3, [r7, #20]
}
    1bd8:	4618      	mov	r0, r3
    1bda:	3718      	adds	r7, #24
    1bdc:	46bd      	mov	sp, r7
    1bde:	bd80      	pop	{r7, pc}
    1be0:	10006428 	.word	0x10006428
    1be4:	10006404 	.word	0x10006404
    1be8:	100063d0 	.word	0x100063d0
    1bec:	100063d4 	.word	0x100063d4
    1bf0:	10006418 	.word	0x10006418
    1bf4:	10006420 	.word	0x10006420
    1bf8:	10006408 	.word	0x10006408
    1bfc:	10006358 	.word	0x10006358
    1c00:	10006354 	.word	0x10006354
    1c04:	10006410 	.word	0x10006410
    1c08:	10006414 	.word	0x10006414

00001c0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    1c0c:	b580      	push	{r7, lr}
    1c0e:	b084      	sub	sp, #16
    1c10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1c12:	4b35      	ldr	r3, [pc, #212]	; (1ce8 <vTaskSwitchContext+0xdc>)
    1c14:	681b      	ldr	r3, [r3, #0]
    1c16:	2b00      	cmp	r3, #0
    1c18:	d003      	beq.n	1c22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    1c1a:	4b34      	ldr	r3, [pc, #208]	; (1cec <vTaskSwitchContext+0xe0>)
    1c1c:	2201      	movs	r2, #1
    1c1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    1c20:	e05e      	b.n	1ce0 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
    1c22:	4b32      	ldr	r3, [pc, #200]	; (1cec <vTaskSwitchContext+0xe0>)
    1c24:	2200      	movs	r2, #0
    1c26:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    1c28:	4b31      	ldr	r3, [pc, #196]	; (1cf0 <vTaskSwitchContext+0xe4>)
    1c2a:	681b      	ldr	r3, [r3, #0]
    1c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1c2e:	60bb      	str	r3, [r7, #8]
    1c30:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
    1c34:	607b      	str	r3, [r7, #4]
    1c36:	68bb      	ldr	r3, [r7, #8]
    1c38:	681a      	ldr	r2, [r3, #0]
    1c3a:	687b      	ldr	r3, [r7, #4]
    1c3c:	429a      	cmp	r2, r3
    1c3e:	d111      	bne.n	1c64 <vTaskSwitchContext+0x58>
    1c40:	68bb      	ldr	r3, [r7, #8]
    1c42:	3304      	adds	r3, #4
    1c44:	681a      	ldr	r2, [r3, #0]
    1c46:	687b      	ldr	r3, [r7, #4]
    1c48:	429a      	cmp	r2, r3
    1c4a:	d10b      	bne.n	1c64 <vTaskSwitchContext+0x58>
    1c4c:	68bb      	ldr	r3, [r7, #8]
    1c4e:	3308      	adds	r3, #8
    1c50:	681a      	ldr	r2, [r3, #0]
    1c52:	687b      	ldr	r3, [r7, #4]
    1c54:	429a      	cmp	r2, r3
    1c56:	d105      	bne.n	1c64 <vTaskSwitchContext+0x58>
    1c58:	68bb      	ldr	r3, [r7, #8]
    1c5a:	330c      	adds	r3, #12
    1c5c:	681a      	ldr	r2, [r3, #0]
    1c5e:	687b      	ldr	r3, [r7, #4]
    1c60:	429a      	cmp	r2, r3
    1c62:	d008      	beq.n	1c76 <vTaskSwitchContext+0x6a>
    1c64:	4b22      	ldr	r3, [pc, #136]	; (1cf0 <vTaskSwitchContext+0xe4>)
    1c66:	681a      	ldr	r2, [r3, #0]
    1c68:	4b21      	ldr	r3, [pc, #132]	; (1cf0 <vTaskSwitchContext+0xe4>)
    1c6a:	681b      	ldr	r3, [r3, #0]
    1c6c:	3334      	adds	r3, #52	; 0x34
    1c6e:	4619      	mov	r1, r3
    1c70:	4610      	mov	r0, r2
    1c72:	f001 fa65 	bl	3140 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1c76:	4b1f      	ldr	r3, [pc, #124]	; (1cf4 <vTaskSwitchContext+0xe8>)
    1c78:	681b      	ldr	r3, [r3, #0]
    1c7a:	60fb      	str	r3, [r7, #12]
    1c7c:	e006      	b.n	1c8c <vTaskSwitchContext+0x80>
    1c7e:	68fb      	ldr	r3, [r7, #12]
    1c80:	2b00      	cmp	r3, #0
    1c82:	d100      	bne.n	1c86 <vTaskSwitchContext+0x7a>
    1c84:	e7fe      	b.n	1c84 <vTaskSwitchContext+0x78>
    1c86:	68fb      	ldr	r3, [r7, #12]
    1c88:	3b01      	subs	r3, #1
    1c8a:	60fb      	str	r3, [r7, #12]
    1c8c:	491a      	ldr	r1, [pc, #104]	; (1cf8 <vTaskSwitchContext+0xec>)
    1c8e:	68fa      	ldr	r2, [r7, #12]
    1c90:	4613      	mov	r3, r2
    1c92:	009b      	lsls	r3, r3, #2
    1c94:	4413      	add	r3, r2
    1c96:	009b      	lsls	r3, r3, #2
    1c98:	440b      	add	r3, r1
    1c9a:	681b      	ldr	r3, [r3, #0]
    1c9c:	2b00      	cmp	r3, #0
    1c9e:	d0ee      	beq.n	1c7e <vTaskSwitchContext+0x72>
    1ca0:	68fa      	ldr	r2, [r7, #12]
    1ca2:	4613      	mov	r3, r2
    1ca4:	009b      	lsls	r3, r3, #2
    1ca6:	4413      	add	r3, r2
    1ca8:	009b      	lsls	r3, r3, #2
    1caa:	4a13      	ldr	r2, [pc, #76]	; (1cf8 <vTaskSwitchContext+0xec>)
    1cac:	4413      	add	r3, r2
    1cae:	603b      	str	r3, [r7, #0]
    1cb0:	683b      	ldr	r3, [r7, #0]
    1cb2:	685b      	ldr	r3, [r3, #4]
    1cb4:	685a      	ldr	r2, [r3, #4]
    1cb6:	683b      	ldr	r3, [r7, #0]
    1cb8:	605a      	str	r2, [r3, #4]
    1cba:	683b      	ldr	r3, [r7, #0]
    1cbc:	685a      	ldr	r2, [r3, #4]
    1cbe:	683b      	ldr	r3, [r7, #0]
    1cc0:	3308      	adds	r3, #8
    1cc2:	429a      	cmp	r2, r3
    1cc4:	d104      	bne.n	1cd0 <vTaskSwitchContext+0xc4>
    1cc6:	683b      	ldr	r3, [r7, #0]
    1cc8:	685b      	ldr	r3, [r3, #4]
    1cca:	685a      	ldr	r2, [r3, #4]
    1ccc:	683b      	ldr	r3, [r7, #0]
    1cce:	605a      	str	r2, [r3, #4]
    1cd0:	683b      	ldr	r3, [r7, #0]
    1cd2:	685b      	ldr	r3, [r3, #4]
    1cd4:	68db      	ldr	r3, [r3, #12]
    1cd6:	4a06      	ldr	r2, [pc, #24]	; (1cf0 <vTaskSwitchContext+0xe4>)
    1cd8:	6013      	str	r3, [r2, #0]
    1cda:	4a06      	ldr	r2, [pc, #24]	; (1cf4 <vTaskSwitchContext+0xe8>)
    1cdc:	68fb      	ldr	r3, [r7, #12]
    1cde:	6013      	str	r3, [r2, #0]
}
    1ce0:	bf00      	nop
    1ce2:	3710      	adds	r7, #16
    1ce4:	46bd      	mov	sp, r7
    1ce6:	bd80      	pop	{r7, pc}
    1ce8:	10006428 	.word	0x10006428
    1cec:	10006414 	.word	0x10006414
    1cf0:	10006354 	.word	0x10006354
    1cf4:	10006408 	.word	0x10006408
    1cf8:	10006358 	.word	0x10006358

00001cfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    1cfc:	b580      	push	{r7, lr}
    1cfe:	b082      	sub	sp, #8
    1d00:	af00      	add	r7, sp, #0
    1d02:	6078      	str	r0, [r7, #4]
    1d04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    1d06:	687b      	ldr	r3, [r7, #4]
    1d08:	2b00      	cmp	r3, #0
    1d0a:	d100      	bne.n	1d0e <vTaskPlaceOnEventList+0x12>
    1d0c:	e7fe      	b.n	1d0c <vTaskPlaceOnEventList+0x10>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1d0e:	4b07      	ldr	r3, [pc, #28]	; (1d2c <vTaskPlaceOnEventList+0x30>)
    1d10:	681b      	ldr	r3, [r3, #0]
    1d12:	3318      	adds	r3, #24
    1d14:	4619      	mov	r1, r3
    1d16:	6878      	ldr	r0, [r7, #4]
    1d18:	f7fe ff89 	bl	c2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1d1c:	2101      	movs	r1, #1
    1d1e:	6838      	ldr	r0, [r7, #0]
    1d20:	f000 fa74 	bl	220c <prvAddCurrentTaskToDelayedList>
}
    1d24:	bf00      	nop
    1d26:	3708      	adds	r7, #8
    1d28:	46bd      	mov	sp, r7
    1d2a:	bd80      	pop	{r7, pc}
    1d2c:	10006354 	.word	0x10006354

00001d30 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    1d30:	b580      	push	{r7, lr}
    1d32:	b084      	sub	sp, #16
    1d34:	af00      	add	r7, sp, #0
    1d36:	60f8      	str	r0, [r7, #12]
    1d38:	60b9      	str	r1, [r7, #8]
    1d3a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
    1d3c:	68fb      	ldr	r3, [r7, #12]
    1d3e:	2b00      	cmp	r3, #0
    1d40:	d100      	bne.n	1d44 <vTaskPlaceOnUnorderedEventList+0x14>
    1d42:	e7fe      	b.n	1d42 <vTaskPlaceOnUnorderedEventList+0x12>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
    1d44:	4b0c      	ldr	r3, [pc, #48]	; (1d78 <vTaskPlaceOnUnorderedEventList+0x48>)
    1d46:	681b      	ldr	r3, [r3, #0]
    1d48:	2b00      	cmp	r3, #0
    1d4a:	d100      	bne.n	1d4e <vTaskPlaceOnUnorderedEventList+0x1e>
    1d4c:	e7fe      	b.n	1d4c <vTaskPlaceOnUnorderedEventList+0x1c>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    1d4e:	4b0b      	ldr	r3, [pc, #44]	; (1d7c <vTaskPlaceOnUnorderedEventList+0x4c>)
    1d50:	681b      	ldr	r3, [r3, #0]
    1d52:	68ba      	ldr	r2, [r7, #8]
    1d54:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    1d58:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1d5a:	4b08      	ldr	r3, [pc, #32]	; (1d7c <vTaskPlaceOnUnorderedEventList+0x4c>)
    1d5c:	681b      	ldr	r3, [r3, #0]
    1d5e:	3318      	adds	r3, #24
    1d60:	4619      	mov	r1, r3
    1d62:	68f8      	ldr	r0, [r7, #12]
    1d64:	f7fe ff3f 	bl	be6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1d68:	2101      	movs	r1, #1
    1d6a:	6878      	ldr	r0, [r7, #4]
    1d6c:	f000 fa4e 	bl	220c <prvAddCurrentTaskToDelayedList>
}
    1d70:	bf00      	nop
    1d72:	3710      	adds	r7, #16
    1d74:	46bd      	mov	sp, r7
    1d76:	bd80      	pop	{r7, pc}
    1d78:	10006428 	.word	0x10006428
    1d7c:	10006354 	.word	0x10006354

00001d80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    1d80:	b580      	push	{r7, lr}
    1d82:	b084      	sub	sp, #16
    1d84:	af00      	add	r7, sp, #0
    1d86:	60f8      	str	r0, [r7, #12]
    1d88:	60b9      	str	r1, [r7, #8]
    1d8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    1d8c:	68fb      	ldr	r3, [r7, #12]
    1d8e:	2b00      	cmp	r3, #0
    1d90:	d100      	bne.n	1d94 <vTaskPlaceOnEventListRestricted+0x14>
    1d92:	e7fe      	b.n	1d92 <vTaskPlaceOnEventListRestricted+0x12>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1d94:	4b0a      	ldr	r3, [pc, #40]	; (1dc0 <vTaskPlaceOnEventListRestricted+0x40>)
    1d96:	681b      	ldr	r3, [r3, #0]
    1d98:	3318      	adds	r3, #24
    1d9a:	4619      	mov	r1, r3
    1d9c:	68f8      	ldr	r0, [r7, #12]
    1d9e:	f7fe ff22 	bl	be6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    1da2:	687b      	ldr	r3, [r7, #4]
    1da4:	2b00      	cmp	r3, #0
    1da6:	d002      	beq.n	1dae <vTaskPlaceOnEventListRestricted+0x2e>
		{
			xTicksToWait = portMAX_DELAY;
    1da8:	f04f 33ff 	mov.w	r3, #4294967295
    1dac:	60bb      	str	r3, [r7, #8]
		}

//		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    1dae:	6879      	ldr	r1, [r7, #4]
    1db0:	68b8      	ldr	r0, [r7, #8]
    1db2:	f000 fa2b 	bl	220c <prvAddCurrentTaskToDelayedList>
	}
    1db6:	bf00      	nop
    1db8:	3710      	adds	r7, #16
    1dba:	46bd      	mov	sp, r7
    1dbc:	bd80      	pop	{r7, pc}
    1dbe:	bf00      	nop
    1dc0:	10006354 	.word	0x10006354

00001dc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    1dc4:	b580      	push	{r7, lr}
    1dc6:	b084      	sub	sp, #16
    1dc8:	af00      	add	r7, sp, #0
    1dca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    1dcc:	687b      	ldr	r3, [r7, #4]
    1dce:	68db      	ldr	r3, [r3, #12]
    1dd0:	68db      	ldr	r3, [r3, #12]
    1dd2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    1dd4:	68bb      	ldr	r3, [r7, #8]
    1dd6:	2b00      	cmp	r3, #0
    1dd8:	d100      	bne.n	1ddc <xTaskRemoveFromEventList+0x18>
    1dda:	e7fe      	b.n	1dda <xTaskRemoveFromEventList+0x16>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    1ddc:	68bb      	ldr	r3, [r7, #8]
    1dde:	3318      	adds	r3, #24
    1de0:	4618      	mov	r0, r3
    1de2:	f7fe ff5d 	bl	ca0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1de6:	4b1f      	ldr	r3, [pc, #124]	; (1e64 <xTaskRemoveFromEventList+0xa0>)
    1de8:	681b      	ldr	r3, [r3, #0]
    1dea:	2b00      	cmp	r3, #0
    1dec:	d11d      	bne.n	1e2a <xTaskRemoveFromEventList+0x66>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    1dee:	68bb      	ldr	r3, [r7, #8]
    1df0:	3304      	adds	r3, #4
    1df2:	4618      	mov	r0, r3
    1df4:	f7fe ff54 	bl	ca0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    1df8:	68bb      	ldr	r3, [r7, #8]
    1dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1dfc:	4b1a      	ldr	r3, [pc, #104]	; (1e68 <xTaskRemoveFromEventList+0xa4>)
    1dfe:	681b      	ldr	r3, [r3, #0]
    1e00:	429a      	cmp	r2, r3
    1e02:	d903      	bls.n	1e0c <xTaskRemoveFromEventList+0x48>
    1e04:	68bb      	ldr	r3, [r7, #8]
    1e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1e08:	4a17      	ldr	r2, [pc, #92]	; (1e68 <xTaskRemoveFromEventList+0xa4>)
    1e0a:	6013      	str	r3, [r2, #0]
    1e0c:	68bb      	ldr	r3, [r7, #8]
    1e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1e10:	4613      	mov	r3, r2
    1e12:	009b      	lsls	r3, r3, #2
    1e14:	4413      	add	r3, r2
    1e16:	009b      	lsls	r3, r3, #2
    1e18:	4a14      	ldr	r2, [pc, #80]	; (1e6c <xTaskRemoveFromEventList+0xa8>)
    1e1a:	441a      	add	r2, r3
    1e1c:	68bb      	ldr	r3, [r7, #8]
    1e1e:	3304      	adds	r3, #4
    1e20:	4619      	mov	r1, r3
    1e22:	4610      	mov	r0, r2
    1e24:	f7fe fedf 	bl	be6 <vListInsertEnd>
    1e28:	e005      	b.n	1e36 <xTaskRemoveFromEventList+0x72>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    1e2a:	68bb      	ldr	r3, [r7, #8]
    1e2c:	3318      	adds	r3, #24
    1e2e:	4619      	mov	r1, r3
    1e30:	480f      	ldr	r0, [pc, #60]	; (1e70 <xTaskRemoveFromEventList+0xac>)
    1e32:	f7fe fed8 	bl	be6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1e36:	68bb      	ldr	r3, [r7, #8]
    1e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1e3a:	4b0e      	ldr	r3, [pc, #56]	; (1e74 <xTaskRemoveFromEventList+0xb0>)
    1e3c:	681b      	ldr	r3, [r3, #0]
    1e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1e40:	429a      	cmp	r2, r3
    1e42:	d905      	bls.n	1e50 <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    1e44:	2301      	movs	r3, #1
    1e46:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    1e48:	4b0b      	ldr	r3, [pc, #44]	; (1e78 <xTaskRemoveFromEventList+0xb4>)
    1e4a:	2201      	movs	r2, #1
    1e4c:	601a      	str	r2, [r3, #0]
    1e4e:	e001      	b.n	1e54 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
    1e50:	2300      	movs	r3, #0
    1e52:	60fb      	str	r3, [r7, #12]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
    1e54:	f000 f97e 	bl	2154 <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
    1e58:	68fb      	ldr	r3, [r7, #12]
}
    1e5a:	4618      	mov	r0, r3
    1e5c:	3710      	adds	r7, #16
    1e5e:	46bd      	mov	sp, r7
    1e60:	bd80      	pop	{r7, pc}
    1e62:	bf00      	nop
    1e64:	10006428 	.word	0x10006428
    1e68:	10006408 	.word	0x10006408
    1e6c:	10006358 	.word	0x10006358
    1e70:	100063d8 	.word	0x100063d8
    1e74:	10006354 	.word	0x10006354
    1e78:	10006414 	.word	0x10006414

00001e7c <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    1e7c:	b580      	push	{r7, lr}
    1e7e:	b084      	sub	sp, #16
    1e80:	af00      	add	r7, sp, #0
    1e82:	6078      	str	r0, [r7, #4]
    1e84:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;
BaseType_t xReturn;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
    1e86:	4b22      	ldr	r3, [pc, #136]	; (1f10 <xTaskRemoveFromUnorderedEventList+0x94>)
    1e88:	681b      	ldr	r3, [r3, #0]
    1e8a:	2b00      	cmp	r3, #0
    1e8c:	d100      	bne.n	1e90 <xTaskRemoveFromUnorderedEventList+0x14>
    1e8e:	e7fe      	b.n	1e8e <xTaskRemoveFromUnorderedEventList+0x12>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    1e90:	683b      	ldr	r3, [r7, #0]
    1e92:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    1e9a:	687b      	ldr	r3, [r7, #4]
    1e9c:	68db      	ldr	r3, [r3, #12]
    1e9e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    1ea0:	68bb      	ldr	r3, [r7, #8]
    1ea2:	2b00      	cmp	r3, #0
    1ea4:	d100      	bne.n	1ea8 <xTaskRemoveFromUnorderedEventList+0x2c>
    1ea6:	e7fe      	b.n	1ea6 <xTaskRemoveFromUnorderedEventList+0x2a>
	( void ) uxListRemove( pxEventListItem );
    1ea8:	6878      	ldr	r0, [r7, #4]
    1eaa:	f7fe fef9 	bl	ca0 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    1eae:	68bb      	ldr	r3, [r7, #8]
    1eb0:	3304      	adds	r3, #4
    1eb2:	4618      	mov	r0, r3
    1eb4:	f7fe fef4 	bl	ca0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    1eb8:	68bb      	ldr	r3, [r7, #8]
    1eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1ebc:	4b15      	ldr	r3, [pc, #84]	; (1f14 <xTaskRemoveFromUnorderedEventList+0x98>)
    1ebe:	681b      	ldr	r3, [r3, #0]
    1ec0:	429a      	cmp	r2, r3
    1ec2:	d903      	bls.n	1ecc <xTaskRemoveFromUnorderedEventList+0x50>
    1ec4:	68bb      	ldr	r3, [r7, #8]
    1ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1ec8:	4a12      	ldr	r2, [pc, #72]	; (1f14 <xTaskRemoveFromUnorderedEventList+0x98>)
    1eca:	6013      	str	r3, [r2, #0]
    1ecc:	68bb      	ldr	r3, [r7, #8]
    1ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1ed0:	4613      	mov	r3, r2
    1ed2:	009b      	lsls	r3, r3, #2
    1ed4:	4413      	add	r3, r2
    1ed6:	009b      	lsls	r3, r3, #2
    1ed8:	4a0f      	ldr	r2, [pc, #60]	; (1f18 <xTaskRemoveFromUnorderedEventList+0x9c>)
    1eda:	441a      	add	r2, r3
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	3304      	adds	r3, #4
    1ee0:	4619      	mov	r1, r3
    1ee2:	4610      	mov	r0, r2
    1ee4:	f7fe fe7f 	bl	be6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1ee8:	68bb      	ldr	r3, [r7, #8]
    1eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1eec:	4b0b      	ldr	r3, [pc, #44]	; (1f1c <xTaskRemoveFromUnorderedEventList+0xa0>)
    1eee:	681b      	ldr	r3, [r3, #0]
    1ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1ef2:	429a      	cmp	r2, r3
    1ef4:	d905      	bls.n	1f02 <xTaskRemoveFromUnorderedEventList+0x86>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    1ef6:	2301      	movs	r3, #1
    1ef8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    1efa:	4b09      	ldr	r3, [pc, #36]	; (1f20 <xTaskRemoveFromUnorderedEventList+0xa4>)
    1efc:	2201      	movs	r2, #1
    1efe:	601a      	str	r2, [r3, #0]
    1f00:	e001      	b.n	1f06 <xTaskRemoveFromUnorderedEventList+0x8a>
	}
	else
	{
		xReturn = pdFALSE;
    1f02:	2300      	movs	r3, #0
    1f04:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    1f06:	68fb      	ldr	r3, [r7, #12]
}
    1f08:	4618      	mov	r0, r3
    1f0a:	3710      	adds	r7, #16
    1f0c:	46bd      	mov	sp, r7
    1f0e:	bd80      	pop	{r7, pc}
    1f10:	10006428 	.word	0x10006428
    1f14:	10006408 	.word	0x10006408
    1f18:	10006358 	.word	0x10006358
    1f1c:	10006354 	.word	0x10006354
    1f20:	10006414 	.word	0x10006414

00001f24 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    1f24:	b480      	push	{r7}
    1f26:	b083      	sub	sp, #12
    1f28:	af00      	add	r7, sp, #0
    1f2a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
    1f2c:	687b      	ldr	r3, [r7, #4]
    1f2e:	2b00      	cmp	r3, #0
    1f30:	d100      	bne.n	1f34 <vTaskSetTimeOutState+0x10>
    1f32:	e7fe      	b.n	1f32 <vTaskSetTimeOutState+0xe>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    1f34:	4b06      	ldr	r3, [pc, #24]	; (1f50 <vTaskSetTimeOutState+0x2c>)
    1f36:	681a      	ldr	r2, [r3, #0]
    1f38:	687b      	ldr	r3, [r7, #4]
    1f3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    1f3c:	4b05      	ldr	r3, [pc, #20]	; (1f54 <vTaskSetTimeOutState+0x30>)
    1f3e:	681a      	ldr	r2, [r3, #0]
    1f40:	687b      	ldr	r3, [r7, #4]
    1f42:	605a      	str	r2, [r3, #4]
}
    1f44:	bf00      	nop
    1f46:	370c      	adds	r7, #12
    1f48:	46bd      	mov	sp, r7
    1f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f4e:	4770      	bx	lr
    1f50:	10006418 	.word	0x10006418
    1f54:	10006404 	.word	0x10006404

00001f58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    1f58:	b580      	push	{r7, lr}
    1f5a:	b084      	sub	sp, #16
    1f5c:	af00      	add	r7, sp, #0
    1f5e:	6078      	str	r0, [r7, #4]
    1f60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    1f62:	687b      	ldr	r3, [r7, #4]
    1f64:	2b00      	cmp	r3, #0
    1f66:	d100      	bne.n	1f6a <xTaskCheckForTimeOut+0x12>
    1f68:	e7fe      	b.n	1f68 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTicksToWait );
    1f6a:	683b      	ldr	r3, [r7, #0]
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	d100      	bne.n	1f72 <xTaskCheckForTimeOut+0x1a>
    1f70:	e7fe      	b.n	1f70 <xTaskCheckForTimeOut+0x18>

	taskENTER_CRITICAL();
    1f72:	f7fe f9d7 	bl	324 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    1f76:	4b1c      	ldr	r3, [pc, #112]	; (1fe8 <xTaskCheckForTimeOut+0x90>)
    1f78:	681b      	ldr	r3, [r3, #0]
    1f7a:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    1f7c:	683b      	ldr	r3, [r7, #0]
    1f7e:	681b      	ldr	r3, [r3, #0]
    1f80:	f1b3 3fff 	cmp.w	r3, #4294967295
    1f84:	d102      	bne.n	1f8c <xTaskCheckForTimeOut+0x34>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    1f86:	2300      	movs	r3, #0
    1f88:	60fb      	str	r3, [r7, #12]
    1f8a:	e026      	b.n	1fda <xTaskCheckForTimeOut+0x82>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1f8c:	687b      	ldr	r3, [r7, #4]
    1f8e:	681a      	ldr	r2, [r3, #0]
    1f90:	4b16      	ldr	r3, [pc, #88]	; (1fec <xTaskCheckForTimeOut+0x94>)
    1f92:	681b      	ldr	r3, [r3, #0]
    1f94:	429a      	cmp	r2, r3
    1f96:	d007      	beq.n	1fa8 <xTaskCheckForTimeOut+0x50>
    1f98:	687b      	ldr	r3, [r7, #4]
    1f9a:	685a      	ldr	r2, [r3, #4]
    1f9c:	68bb      	ldr	r3, [r7, #8]
    1f9e:	429a      	cmp	r2, r3
    1fa0:	d802      	bhi.n	1fa8 <xTaskCheckForTimeOut+0x50>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    1fa2:	2301      	movs	r3, #1
    1fa4:	60fb      	str	r3, [r7, #12]
    1fa6:	e018      	b.n	1fda <xTaskCheckForTimeOut+0x82>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    1fa8:	687b      	ldr	r3, [r7, #4]
    1faa:	685b      	ldr	r3, [r3, #4]
    1fac:	68ba      	ldr	r2, [r7, #8]
    1fae:	1ad2      	subs	r2, r2, r3
    1fb0:	683b      	ldr	r3, [r7, #0]
    1fb2:	681b      	ldr	r3, [r3, #0]
    1fb4:	429a      	cmp	r2, r3
    1fb6:	d20e      	bcs.n	1fd6 <xTaskCheckForTimeOut+0x7e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    1fb8:	683b      	ldr	r3, [r7, #0]
    1fba:	681a      	ldr	r2, [r3, #0]
    1fbc:	687b      	ldr	r3, [r7, #4]
    1fbe:	6859      	ldr	r1, [r3, #4]
    1fc0:	68bb      	ldr	r3, [r7, #8]
    1fc2:	1acb      	subs	r3, r1, r3
    1fc4:	441a      	add	r2, r3
    1fc6:	683b      	ldr	r3, [r7, #0]
    1fc8:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    1fca:	6878      	ldr	r0, [r7, #4]
    1fcc:	f7ff ffaa 	bl	1f24 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    1fd0:	2300      	movs	r3, #0
    1fd2:	60fb      	str	r3, [r7, #12]
    1fd4:	e001      	b.n	1fda <xTaskCheckForTimeOut+0x82>
		}
		else
		{
			xReturn = pdTRUE;
    1fd6:	2301      	movs	r3, #1
    1fd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    1fda:	f7fe f9c9 	bl	370 <vPortExitCritical>

	return xReturn;
    1fde:	68fb      	ldr	r3, [r7, #12]
}
    1fe0:	4618      	mov	r0, r3
    1fe2:	3710      	adds	r7, #16
    1fe4:	46bd      	mov	sp, r7
    1fe6:	bd80      	pop	{r7, pc}
    1fe8:	10006404 	.word	0x10006404
    1fec:	10006418 	.word	0x10006418

00001ff0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    1ff0:	b480      	push	{r7}
    1ff2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    1ff4:	4b03      	ldr	r3, [pc, #12]	; (2004 <vTaskMissedYield+0x14>)
    1ff6:	2201      	movs	r2, #1
    1ff8:	601a      	str	r2, [r3, #0]
}
    1ffa:	bf00      	nop
    1ffc:	46bd      	mov	sp, r7
    1ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
    2002:	4770      	bx	lr
    2004:	10006414 	.word	0x10006414

00002008 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    2008:	b580      	push	{r7, lr}
    200a:	b084      	sub	sp, #16
    200c:	af00      	add	r7, sp, #0
    200e:	6078      	str	r0, [r7, #4]
	for( ;; )
	{
	
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    2010:	f000 f898 	bl	2144 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    2014:	4b13      	ldr	r3, [pc, #76]	; (2064 <prvIdleTask+0x5c>)
    2016:	681b      	ldr	r3, [r3, #0]
    2018:	2b01      	cmp	r3, #1
    201a:	d907      	bls.n	202c <prvIdleTask+0x24>
			{
				taskYIELD();
    201c:	4b12      	ldr	r3, [pc, #72]	; (2068 <prvIdleTask+0x60>)
    201e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2022:	601a      	str	r2, [r3, #0]
    2024:	f3bf 8f4f 	dsb	sy
    2028:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
    202c:	f7ff fc50 	bl	18d0 <prvGetExpectedIdleTime>
    2030:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
    2032:	68fb      	ldr	r3, [r7, #12]
    2034:	2b01      	cmp	r3, #1
    2036:	d9eb      	bls.n	2010 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
    2038:	f7ff fc3c 	bl	18b4 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
    203c:	4b0b      	ldr	r3, [pc, #44]	; (206c <prvIdleTask+0x64>)
    203e:	681a      	ldr	r2, [r3, #0]
    2040:	4b0b      	ldr	r3, [pc, #44]	; (2070 <prvIdleTask+0x68>)
    2042:	681b      	ldr	r3, [r3, #0]
    2044:	429a      	cmp	r2, r3
    2046:	d200      	bcs.n	204a <prvIdleTask+0x42>
    2048:	e7fe      	b.n	2048 <prvIdleTask+0x40>
					xExpectedIdleTime = prvGetExpectedIdleTime();
    204a:	f7ff fc41 	bl	18d0 <prvGetExpectedIdleTime>
    204e:	60f8      	str	r0, [r7, #12]

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
    2050:	68fb      	ldr	r3, [r7, #12]
    2052:	2b01      	cmp	r3, #1
    2054:	d902      	bls.n	205c <prvIdleTask+0x54>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
    2056:	68f8      	ldr	r0, [r7, #12]
    2058:	f7fe fa2a 	bl	4b0 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
    205c:	f7ff fc70 	bl	1940 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
    2060:	e7d6      	b.n	2010 <prvIdleTask+0x8>
    2062:	bf00      	nop
    2064:	10006358 	.word	0x10006358
    2068:	e000ed04 	.word	0xe000ed04
    206c:	10006420 	.word	0x10006420
    2070:	10006404 	.word	0x10006404

00002074 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
    2074:	b480      	push	{r7}
    2076:	b083      	sub	sp, #12
    2078:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
    207a:	2301      	movs	r3, #1
    207c:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
    207e:	2301      	movs	r3, #1
    2080:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
    2082:	4b0f      	ldr	r3, [pc, #60]	; (20c0 <eTaskConfirmSleepModeStatus+0x4c>)
    2084:	681b      	ldr	r3, [r3, #0]
    2086:	2b00      	cmp	r3, #0
    2088:	d002      	beq.n	2090 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
    208a:	2300      	movs	r3, #0
    208c:	71fb      	strb	r3, [r7, #7]
    208e:	e010      	b.n	20b2 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
    2090:	4b0c      	ldr	r3, [pc, #48]	; (20c4 <eTaskConfirmSleepModeStatus+0x50>)
    2092:	681b      	ldr	r3, [r3, #0]
    2094:	2b00      	cmp	r3, #0
    2096:	d002      	beq.n	209e <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
    2098:	2300      	movs	r3, #0
    209a:	71fb      	strb	r3, [r7, #7]
    209c:	e009      	b.n	20b2 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
    209e:	4b0a      	ldr	r3, [pc, #40]	; (20c8 <eTaskConfirmSleepModeStatus+0x54>)
    20a0:	681a      	ldr	r2, [r3, #0]
    20a2:	4b0a      	ldr	r3, [pc, #40]	; (20cc <eTaskConfirmSleepModeStatus+0x58>)
    20a4:	6819      	ldr	r1, [r3, #0]
    20a6:	683b      	ldr	r3, [r7, #0]
    20a8:	1acb      	subs	r3, r1, r3
    20aa:	429a      	cmp	r2, r3
    20ac:	d101      	bne.n	20b2 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
    20ae:	2302      	movs	r3, #2
    20b0:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
    20b2:	79fb      	ldrb	r3, [r7, #7]
	}
    20b4:	4618      	mov	r0, r3
    20b6:	370c      	adds	r7, #12
    20b8:	46bd      	mov	sp, r7
    20ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    20be:	4770      	bx	lr
    20c0:	100063d8 	.word	0x100063d8
    20c4:	10006414 	.word	0x10006414
    20c8:	100063ec 	.word	0x100063ec
    20cc:	10006400 	.word	0x10006400

000020d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    20d0:	b580      	push	{r7, lr}
    20d2:	b082      	sub	sp, #8
    20d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    20d6:	2300      	movs	r3, #0
    20d8:	607b      	str	r3, [r7, #4]
    20da:	e00c      	b.n	20f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    20dc:	687a      	ldr	r2, [r7, #4]
    20de:	4613      	mov	r3, r2
    20e0:	009b      	lsls	r3, r3, #2
    20e2:	4413      	add	r3, r2
    20e4:	009b      	lsls	r3, r3, #2
    20e6:	4a10      	ldr	r2, [pc, #64]	; (2128 <prvInitialiseTaskLists+0x58>)
    20e8:	4413      	add	r3, r2
    20ea:	4618      	mov	r0, r3
    20ec:	f7fe fd4e 	bl	b8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    20f0:	687b      	ldr	r3, [r7, #4]
    20f2:	3301      	adds	r3, #1
    20f4:	607b      	str	r3, [r7, #4]
    20f6:	687b      	ldr	r3, [r7, #4]
    20f8:	2b03      	cmp	r3, #3
    20fa:	d9ef      	bls.n	20dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    20fc:	480b      	ldr	r0, [pc, #44]	; (212c <prvInitialiseTaskLists+0x5c>)
    20fe:	f7fe fd45 	bl	b8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    2102:	480b      	ldr	r0, [pc, #44]	; (2130 <prvInitialiseTaskLists+0x60>)
    2104:	f7fe fd42 	bl	b8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
    2108:	480a      	ldr	r0, [pc, #40]	; (2134 <prvInitialiseTaskLists+0x64>)
    210a:	f7fe fd3f 	bl	b8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    210e:	480a      	ldr	r0, [pc, #40]	; (2138 <prvInitialiseTaskLists+0x68>)
    2110:	f7fe fd3c 	bl	b8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    2114:	4b09      	ldr	r3, [pc, #36]	; (213c <prvInitialiseTaskLists+0x6c>)
    2116:	4a05      	ldr	r2, [pc, #20]	; (212c <prvInitialiseTaskLists+0x5c>)
    2118:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    211a:	4b09      	ldr	r3, [pc, #36]	; (2140 <prvInitialiseTaskLists+0x70>)
    211c:	4a04      	ldr	r2, [pc, #16]	; (2130 <prvInitialiseTaskLists+0x60>)
    211e:	601a      	str	r2, [r3, #0]
}
    2120:	bf00      	nop
    2122:	3708      	adds	r7, #8
    2124:	46bd      	mov	sp, r7
    2126:	bd80      	pop	{r7, pc}
    2128:	10006358 	.word	0x10006358
    212c:	100063a8 	.word	0x100063a8
    2130:	100063bc 	.word	0x100063bc
    2134:	100063d8 	.word	0x100063d8
    2138:	100063ec 	.word	0x100063ec
    213c:	100063d0 	.word	0x100063d0
    2140:	100063d4 	.word	0x100063d4

00002144 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    2144:	b480      	push	{r7}
    2146:	af00      	add	r7, sp, #0
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    2148:	bf00      	nop
    214a:	46bd      	mov	sp, r7
    214c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2150:	4770      	bx	lr
	...

00002154 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    2154:	b480      	push	{r7}
    2156:	b083      	sub	sp, #12
    2158:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    215a:	4b0f      	ldr	r3, [pc, #60]	; (2198 <prvResetNextTaskUnblockTime+0x44>)
    215c:	681b      	ldr	r3, [r3, #0]
    215e:	681b      	ldr	r3, [r3, #0]
    2160:	2b00      	cmp	r3, #0
    2162:	d101      	bne.n	2168 <prvResetNextTaskUnblockTime+0x14>
    2164:	2301      	movs	r3, #1
    2166:	e000      	b.n	216a <prvResetNextTaskUnblockTime+0x16>
    2168:	2300      	movs	r3, #0
    216a:	2b00      	cmp	r3, #0
    216c:	d004      	beq.n	2178 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    216e:	4b0b      	ldr	r3, [pc, #44]	; (219c <prvResetNextTaskUnblockTime+0x48>)
    2170:	f04f 32ff 	mov.w	r2, #4294967295
    2174:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    2176:	e008      	b.n	218a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2178:	4b07      	ldr	r3, [pc, #28]	; (2198 <prvResetNextTaskUnblockTime+0x44>)
    217a:	681b      	ldr	r3, [r3, #0]
    217c:	68db      	ldr	r3, [r3, #12]
    217e:	68db      	ldr	r3, [r3, #12]
    2180:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    2182:	687b      	ldr	r3, [r7, #4]
    2184:	685b      	ldr	r3, [r3, #4]
    2186:	4a05      	ldr	r2, [pc, #20]	; (219c <prvResetNextTaskUnblockTime+0x48>)
    2188:	6013      	str	r3, [r2, #0]
}
    218a:	bf00      	nop
    218c:	370c      	adds	r7, #12
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop
    2198:	100063d0 	.word	0x100063d0
    219c:	10006420 	.word	0x10006420

000021a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    21a0:	b480      	push	{r7}
    21a2:	b083      	sub	sp, #12
    21a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    21a6:	4b0b      	ldr	r3, [pc, #44]	; (21d4 <xTaskGetSchedulerState+0x34>)
    21a8:	681b      	ldr	r3, [r3, #0]
    21aa:	2b00      	cmp	r3, #0
    21ac:	d102      	bne.n	21b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    21ae:	2301      	movs	r3, #1
    21b0:	607b      	str	r3, [r7, #4]
    21b2:	e008      	b.n	21c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    21b4:	4b08      	ldr	r3, [pc, #32]	; (21d8 <xTaskGetSchedulerState+0x38>)
    21b6:	681b      	ldr	r3, [r3, #0]
    21b8:	2b00      	cmp	r3, #0
    21ba:	d102      	bne.n	21c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    21bc:	2302      	movs	r3, #2
    21be:	607b      	str	r3, [r7, #4]
    21c0:	e001      	b.n	21c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    21c2:	2300      	movs	r3, #0
    21c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    21c6:	687b      	ldr	r3, [r7, #4]
	}
    21c8:	4618      	mov	r0, r3
    21ca:	370c      	adds	r7, #12
    21cc:	46bd      	mov	sp, r7
    21ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    21d2:	4770      	bx	lr
    21d4:	1000640c 	.word	0x1000640c
    21d8:	10006428 	.word	0x10006428

000021dc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    21dc:	b480      	push	{r7}
    21de:	b083      	sub	sp, #12
    21e0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    21e2:	4b09      	ldr	r3, [pc, #36]	; (2208 <uxTaskResetEventItemValue+0x2c>)
    21e4:	681b      	ldr	r3, [r3, #0]
    21e6:	699b      	ldr	r3, [r3, #24]
    21e8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    21ea:	4b07      	ldr	r3, [pc, #28]	; (2208 <uxTaskResetEventItemValue+0x2c>)
    21ec:	681b      	ldr	r3, [r3, #0]
    21ee:	4a06      	ldr	r2, [pc, #24]	; (2208 <uxTaskResetEventItemValue+0x2c>)
    21f0:	6812      	ldr	r2, [r2, #0]
    21f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    21f4:	f1c2 0204 	rsb	r2, r2, #4
    21f8:	619a      	str	r2, [r3, #24]

	return uxReturn;
    21fa:	687b      	ldr	r3, [r7, #4]
}
    21fc:	4618      	mov	r0, r3
    21fe:	370c      	adds	r7, #12
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr
    2208:	10006354 	.word	0x10006354

0000220c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    220c:	b580      	push	{r7, lr}
    220e:	b084      	sub	sp, #16
    2210:	af00      	add	r7, sp, #0
    2212:	6078      	str	r0, [r7, #4]
    2214:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    2216:	4b21      	ldr	r3, [pc, #132]	; (229c <prvAddCurrentTaskToDelayedList+0x90>)
    2218:	681b      	ldr	r3, [r3, #0]
    221a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    221c:	4b20      	ldr	r3, [pc, #128]	; (22a0 <prvAddCurrentTaskToDelayedList+0x94>)
    221e:	681b      	ldr	r3, [r3, #0]
    2220:	3304      	adds	r3, #4
    2222:	4618      	mov	r0, r3
    2224:	f7fe fd3c 	bl	ca0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    2228:	687b      	ldr	r3, [r7, #4]
    222a:	f1b3 3fff 	cmp.w	r3, #4294967295
    222e:	d10a      	bne.n	2246 <prvAddCurrentTaskToDelayedList+0x3a>
    2230:	683b      	ldr	r3, [r7, #0]
    2232:	2b00      	cmp	r3, #0
    2234:	d007      	beq.n	2246 <prvAddCurrentTaskToDelayedList+0x3a>
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
		  //GEO: addition for support of SystemView Profiler
		  traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
		  //GEO: end addition
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2236:	4b1a      	ldr	r3, [pc, #104]	; (22a0 <prvAddCurrentTaskToDelayedList+0x94>)
    2238:	681b      	ldr	r3, [r3, #0]
    223a:	3304      	adds	r3, #4
    223c:	4619      	mov	r1, r3
    223e:	4819      	ldr	r0, [pc, #100]	; (22a4 <prvAddCurrentTaskToDelayedList+0x98>)
    2240:	f7fe fcd1 	bl	be6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    2244:	e026      	b.n	2294 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
    2246:	68fa      	ldr	r2, [r7, #12]
    2248:	687b      	ldr	r3, [r7, #4]
    224a:	4413      	add	r3, r2
    224c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    224e:	4b14      	ldr	r3, [pc, #80]	; (22a0 <prvAddCurrentTaskToDelayedList+0x94>)
    2250:	681b      	ldr	r3, [r3, #0]
    2252:	68ba      	ldr	r2, [r7, #8]
    2254:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    2256:	68ba      	ldr	r2, [r7, #8]
    2258:	68fb      	ldr	r3, [r7, #12]
    225a:	429a      	cmp	r2, r3
    225c:	d209      	bcs.n	2272 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    225e:	4b12      	ldr	r3, [pc, #72]	; (22a8 <prvAddCurrentTaskToDelayedList+0x9c>)
    2260:	681a      	ldr	r2, [r3, #0]
    2262:	4b0f      	ldr	r3, [pc, #60]	; (22a0 <prvAddCurrentTaskToDelayedList+0x94>)
    2264:	681b      	ldr	r3, [r3, #0]
    2266:	3304      	adds	r3, #4
    2268:	4619      	mov	r1, r3
    226a:	4610      	mov	r0, r2
    226c:	f7fe fcdf 	bl	c2e <vListInsert>
}
    2270:	e010      	b.n	2294 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2272:	4b0e      	ldr	r3, [pc, #56]	; (22ac <prvAddCurrentTaskToDelayedList+0xa0>)
    2274:	681a      	ldr	r2, [r3, #0]
    2276:	4b0a      	ldr	r3, [pc, #40]	; (22a0 <prvAddCurrentTaskToDelayedList+0x94>)
    2278:	681b      	ldr	r3, [r3, #0]
    227a:	3304      	adds	r3, #4
    227c:	4619      	mov	r1, r3
    227e:	4610      	mov	r0, r2
    2280:	f7fe fcd5 	bl	c2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
    2284:	4b0a      	ldr	r3, [pc, #40]	; (22b0 <prvAddCurrentTaskToDelayedList+0xa4>)
    2286:	681b      	ldr	r3, [r3, #0]
    2288:	68ba      	ldr	r2, [r7, #8]
    228a:	429a      	cmp	r2, r3
    228c:	d202      	bcs.n	2294 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
    228e:	4a08      	ldr	r2, [pc, #32]	; (22b0 <prvAddCurrentTaskToDelayedList+0xa4>)
    2290:	68bb      	ldr	r3, [r7, #8]
    2292:	6013      	str	r3, [r2, #0]
}
    2294:	bf00      	nop
    2296:	3710      	adds	r7, #16
    2298:	46bd      	mov	sp, r7
    229a:	bd80      	pop	{r7, pc}
    229c:	10006404 	.word	0x10006404
    22a0:	10006354 	.word	0x10006354
    22a4:	100063ec 	.word	0x100063ec
    22a8:	100063d4 	.word	0x100063d4
    22ac:	100063d0 	.word	0x100063d0
    22b0:	10006420 	.word	0x10006420

000022b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    22b4:	b580      	push	{r7, lr}
    22b6:	b084      	sub	sp, #16
    22b8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    22ba:	2300      	movs	r3, #0
    22bc:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    22be:	f000 fa6b 	bl	2798 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
    22c2:	4b0c      	ldr	r3, [pc, #48]	; (22f4 <xTimerCreateTimerTask+0x40>)
    22c4:	681b      	ldr	r3, [r3, #0]
    22c6:	2b00      	cmp	r3, #0
    22c8:	d00b      	beq.n	22e2 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    22ca:	4b0b      	ldr	r3, [pc, #44]	; (22f8 <xTimerCreateTimerTask+0x44>)
    22cc:	9301      	str	r3, [sp, #4]
    22ce:	2303      	movs	r3, #3
    22d0:	9300      	str	r3, [sp, #0]
    22d2:	2300      	movs	r3, #0
    22d4:	f44f 7280 	mov.w	r2, #256	; 0x100
    22d8:	4908      	ldr	r1, [pc, #32]	; (22fc <xTimerCreateTimerTask+0x48>)
    22da:	4809      	ldr	r0, [pc, #36]	; (2300 <xTimerCreateTimerTask+0x4c>)
    22dc:	f7ff f920 	bl	1520 <xTaskCreate>
    22e0:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    22e2:	687b      	ldr	r3, [r7, #4]
    22e4:	2b00      	cmp	r3, #0
    22e6:	d100      	bne.n	22ea <xTimerCreateTimerTask+0x36>
    22e8:	e7fe      	b.n	22e8 <xTimerCreateTimerTask+0x34>
	return xReturn;
    22ea:	687b      	ldr	r3, [r7, #4]
}
    22ec:	4618      	mov	r0, r3
    22ee:	3708      	adds	r7, #8
    22f0:	46bd      	mov	sp, r7
    22f2:	bd80      	pop	{r7, pc}
    22f4:	1000645c 	.word	0x1000645c
    22f8:	10006460 	.word	0x10006460
    22fc:	000049bc 	.word	0x000049bc
    2300:	000023f9 	.word	0x000023f9

00002304 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2304:	b580      	push	{r7, lr}
    2306:	b08a      	sub	sp, #40	; 0x28
    2308:	af00      	add	r7, sp, #0
    230a:	60f8      	str	r0, [r7, #12]
    230c:	60b9      	str	r1, [r7, #8]
    230e:	607a      	str	r2, [r7, #4]
    2310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    2312:	2300      	movs	r3, #0
    2314:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    2316:	68fb      	ldr	r3, [r7, #12]
    2318:	2b00      	cmp	r3, #0
    231a:	d100      	bne.n	231e <xTimerGenericCommand+0x1a>
    231c:	e7fe      	b.n	231c <xTimerGenericCommand+0x18>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    231e:	4b1a      	ldr	r3, [pc, #104]	; (2388 <xTimerGenericCommand+0x84>)
    2320:	681b      	ldr	r3, [r3, #0]
    2322:	2b00      	cmp	r3, #0
    2324:	d02a      	beq.n	237c <xTimerGenericCommand+0x78>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    2326:	68bb      	ldr	r3, [r7, #8]
    2328:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    232a:	687b      	ldr	r3, [r7, #4]
    232c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    232e:	68fb      	ldr	r3, [r7, #12]
    2330:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2332:	68bb      	ldr	r3, [r7, #8]
    2334:	2b05      	cmp	r3, #5
    2336:	dc18      	bgt.n	236a <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2338:	f7ff ff32 	bl	21a0 <xTaskGetSchedulerState>
    233c:	4603      	mov	r3, r0
    233e:	2b02      	cmp	r3, #2
    2340:	d109      	bne.n	2356 <xTimerGenericCommand+0x52>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2342:	4b11      	ldr	r3, [pc, #68]	; (2388 <xTimerGenericCommand+0x84>)
    2344:	6818      	ldr	r0, [r3, #0]
    2346:	f107 0114 	add.w	r1, r7, #20
    234a:	2300      	movs	r3, #0
    234c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    234e:	f7fe fd7f 	bl	e50 <xQueueGenericSend>
    2352:	6278      	str	r0, [r7, #36]	; 0x24
    2354:	e012      	b.n	237c <xTimerGenericCommand+0x78>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2356:	4b0c      	ldr	r3, [pc, #48]	; (2388 <xTimerGenericCommand+0x84>)
    2358:	6818      	ldr	r0, [r3, #0]
    235a:	f107 0114 	add.w	r1, r7, #20
    235e:	2300      	movs	r3, #0
    2360:	2200      	movs	r2, #0
    2362:	f7fe fd75 	bl	e50 <xQueueGenericSend>
    2366:	6278      	str	r0, [r7, #36]	; 0x24
    2368:	e008      	b.n	237c <xTimerGenericCommand+0x78>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    236a:	4b07      	ldr	r3, [pc, #28]	; (2388 <xTimerGenericCommand+0x84>)
    236c:	6818      	ldr	r0, [r3, #0]
    236e:	f107 0114 	add.w	r1, r7, #20
    2372:	2300      	movs	r3, #0
    2374:	683a      	ldr	r2, [r7, #0]
    2376:	f7fe fe41 	bl	ffc <xQueueGenericSendFromISR>
    237a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    237e:	4618      	mov	r0, r3
    2380:	3728      	adds	r7, #40	; 0x28
    2382:	46bd      	mov	sp, r7
    2384:	bd80      	pop	{r7, pc}
    2386:	bf00      	nop
    2388:	1000645c 	.word	0x1000645c

0000238c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    238c:	b580      	push	{r7, lr}
    238e:	b086      	sub	sp, #24
    2390:	af02      	add	r7, sp, #8
    2392:	6078      	str	r0, [r7, #4]
    2394:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    2396:	4b17      	ldr	r3, [pc, #92]	; (23f4 <prvProcessExpiredTimer+0x68>)
    2398:	681b      	ldr	r3, [r3, #0]
    239a:	68db      	ldr	r3, [r3, #12]
    239c:	68db      	ldr	r3, [r3, #12]
    239e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    23a0:	68fb      	ldr	r3, [r7, #12]
    23a2:	3304      	adds	r3, #4
    23a4:	4618      	mov	r0, r3
    23a6:	f7fe fc7b 	bl	ca0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    23aa:	68fb      	ldr	r3, [r7, #12]
    23ac:	69db      	ldr	r3, [r3, #28]
    23ae:	2b01      	cmp	r3, #1
    23b0:	d118      	bne.n	23e4 <prvProcessExpiredTimer+0x58>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    23b2:	68fb      	ldr	r3, [r7, #12]
    23b4:	699a      	ldr	r2, [r3, #24]
    23b6:	687b      	ldr	r3, [r7, #4]
    23b8:	18d1      	adds	r1, r2, r3
    23ba:	687b      	ldr	r3, [r7, #4]
    23bc:	683a      	ldr	r2, [r7, #0]
    23be:	68f8      	ldr	r0, [r7, #12]
    23c0:	f000 f8be 	bl	2540 <prvInsertTimerInActiveList>
    23c4:	4603      	mov	r3, r0
    23c6:	2b00      	cmp	r3, #0
    23c8:	d00c      	beq.n	23e4 <prvProcessExpiredTimer+0x58>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    23ca:	2300      	movs	r3, #0
    23cc:	9300      	str	r3, [sp, #0]
    23ce:	2300      	movs	r3, #0
    23d0:	687a      	ldr	r2, [r7, #4]
    23d2:	2100      	movs	r1, #0
    23d4:	68f8      	ldr	r0, [r7, #12]
    23d6:	f7ff ff95 	bl	2304 <xTimerGenericCommand>
    23da:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
    23dc:	68bb      	ldr	r3, [r7, #8]
    23de:	2b00      	cmp	r3, #0
    23e0:	d100      	bne.n	23e4 <prvProcessExpiredTimer+0x58>
    23e2:	e7fe      	b.n	23e2 <prvProcessExpiredTimer+0x56>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    23e4:	68fb      	ldr	r3, [r7, #12]
    23e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    23e8:	68f8      	ldr	r0, [r7, #12]
    23ea:	4798      	blx	r3
}
    23ec:	bf00      	nop
    23ee:	3710      	adds	r7, #16
    23f0:	46bd      	mov	sp, r7
    23f2:	bd80      	pop	{r7, pc}
    23f4:	10006454 	.word	0x10006454

000023f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    23f8:	b580      	push	{r7, lr}
    23fa:	b084      	sub	sp, #16
    23fc:	af00      	add	r7, sp, #0
    23fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    2400:	f107 0308 	add.w	r3, r7, #8
    2404:	4618      	mov	r0, r3
    2406:	f000 f857 	bl	24b8 <prvGetNextExpireTime>
    240a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    240c:	68bb      	ldr	r3, [r7, #8]
    240e:	4619      	mov	r1, r3
    2410:	68f8      	ldr	r0, [r7, #12]
    2412:	f000 f803 	bl	241c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    2416:	f000 f8d5 	bl	25c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    241a:	e7f1      	b.n	2400 <prvTimerTask+0x8>

0000241c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    241c:	b580      	push	{r7, lr}
    241e:	b084      	sub	sp, #16
    2420:	af00      	add	r7, sp, #0
    2422:	6078      	str	r0, [r7, #4]
    2424:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    2426:	f7ff fa45 	bl	18b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    242a:	f107 0308 	add.w	r3, r7, #8
    242e:	4618      	mov	r0, r3
    2430:	f000 f866 	bl	2500 <prvSampleTimeNow>
    2434:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    2436:	68bb      	ldr	r3, [r7, #8]
    2438:	2b00      	cmp	r3, #0
    243a:	d130      	bne.n	249e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    243c:	683b      	ldr	r3, [r7, #0]
    243e:	2b00      	cmp	r3, #0
    2440:	d10a      	bne.n	2458 <prvProcessTimerOrBlockTask+0x3c>
    2442:	687a      	ldr	r2, [r7, #4]
    2444:	68fb      	ldr	r3, [r7, #12]
    2446:	429a      	cmp	r2, r3
    2448:	d806      	bhi.n	2458 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
    244a:	f7ff fa79 	bl	1940 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    244e:	68f9      	ldr	r1, [r7, #12]
    2450:	6878      	ldr	r0, [r7, #4]
    2452:	f7ff ff9b 	bl	238c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    2456:	e024      	b.n	24a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
    2458:	683b      	ldr	r3, [r7, #0]
    245a:	2b00      	cmp	r3, #0
    245c:	d008      	beq.n	2470 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    245e:	4b13      	ldr	r3, [pc, #76]	; (24ac <prvProcessTimerOrBlockTask+0x90>)
    2460:	681b      	ldr	r3, [r3, #0]
    2462:	681b      	ldr	r3, [r3, #0]
    2464:	2b00      	cmp	r3, #0
    2466:	bf0c      	ite	eq
    2468:	2301      	moveq	r3, #1
    246a:	2300      	movne	r3, #0
    246c:	b2db      	uxtb	r3, r3
    246e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2470:	4b0f      	ldr	r3, [pc, #60]	; (24b0 <prvProcessTimerOrBlockTask+0x94>)
    2472:	6818      	ldr	r0, [r3, #0]
    2474:	687a      	ldr	r2, [r7, #4]
    2476:	68fb      	ldr	r3, [r7, #12]
    2478:	1ad3      	subs	r3, r2, r3
    247a:	683a      	ldr	r2, [r7, #0]
    247c:	4619      	mov	r1, r3
    247e:	f7ff f81b 	bl	14b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
    2482:	f7ff fa5d 	bl	1940 <xTaskResumeAll>
    2486:	4603      	mov	r3, r0
    2488:	2b00      	cmp	r3, #0
    248a:	d10a      	bne.n	24a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
    248c:	4b09      	ldr	r3, [pc, #36]	; (24b4 <prvProcessTimerOrBlockTask+0x98>)
    248e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2492:	601a      	str	r2, [r3, #0]
    2494:	f3bf 8f4f 	dsb	sy
    2498:	f3bf 8f6f 	isb	sy
}
    249c:	e001      	b.n	24a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
    249e:	f7ff fa4f 	bl	1940 <xTaskResumeAll>
}
    24a2:	bf00      	nop
    24a4:	3710      	adds	r7, #16
    24a6:	46bd      	mov	sp, r7
    24a8:	bd80      	pop	{r7, pc}
    24aa:	bf00      	nop
    24ac:	10006458 	.word	0x10006458
    24b0:	1000645c 	.word	0x1000645c
    24b4:	e000ed04 	.word	0xe000ed04

000024b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    24b8:	b480      	push	{r7}
    24ba:	b085      	sub	sp, #20
    24bc:	af00      	add	r7, sp, #0
    24be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    24c0:	4b0e      	ldr	r3, [pc, #56]	; (24fc <prvGetNextExpireTime+0x44>)
    24c2:	681b      	ldr	r3, [r3, #0]
    24c4:	681b      	ldr	r3, [r3, #0]
    24c6:	2b00      	cmp	r3, #0
    24c8:	bf0c      	ite	eq
    24ca:	2301      	moveq	r3, #1
    24cc:	2300      	movne	r3, #0
    24ce:	b2db      	uxtb	r3, r3
    24d0:	461a      	mov	r2, r3
    24d2:	687b      	ldr	r3, [r7, #4]
    24d4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    24d6:	687b      	ldr	r3, [r7, #4]
    24d8:	681b      	ldr	r3, [r3, #0]
    24da:	2b00      	cmp	r3, #0
    24dc:	d105      	bne.n	24ea <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    24de:	4b07      	ldr	r3, [pc, #28]	; (24fc <prvGetNextExpireTime+0x44>)
    24e0:	681b      	ldr	r3, [r3, #0]
    24e2:	68db      	ldr	r3, [r3, #12]
    24e4:	681b      	ldr	r3, [r3, #0]
    24e6:	60fb      	str	r3, [r7, #12]
    24e8:	e001      	b.n	24ee <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    24ea:	2300      	movs	r3, #0
    24ec:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    24ee:	68fb      	ldr	r3, [r7, #12]
}
    24f0:	4618      	mov	r0, r3
    24f2:	3714      	adds	r7, #20
    24f4:	46bd      	mov	sp, r7
    24f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    24fa:	4770      	bx	lr
    24fc:	10006454 	.word	0x10006454

00002500 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2500:	b580      	push	{r7, lr}
    2502:	b084      	sub	sp, #16
    2504:	af00      	add	r7, sp, #0
    2506:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    2508:	f7ff faae 	bl	1a68 <xTaskGetTickCount>
    250c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
    250e:	4b0b      	ldr	r3, [pc, #44]	; (253c <prvSampleTimeNow+0x3c>)
    2510:	681b      	ldr	r3, [r3, #0]
    2512:	68fa      	ldr	r2, [r7, #12]
    2514:	429a      	cmp	r2, r3
    2516:	d205      	bcs.n	2524 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
    2518:	f000 f8e6 	bl	26e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
    251c:	687b      	ldr	r3, [r7, #4]
    251e:	2201      	movs	r2, #1
    2520:	601a      	str	r2, [r3, #0]
    2522:	e002      	b.n	252a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    2524:	687b      	ldr	r3, [r7, #4]
    2526:	2200      	movs	r2, #0
    2528:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    252a:	4a04      	ldr	r2, [pc, #16]	; (253c <prvSampleTimeNow+0x3c>)
    252c:	68fb      	ldr	r3, [r7, #12]
    252e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
    2530:	68fb      	ldr	r3, [r7, #12]
}
    2532:	4618      	mov	r0, r3
    2534:	3710      	adds	r7, #16
    2536:	46bd      	mov	sp, r7
    2538:	bd80      	pop	{r7, pc}
    253a:	bf00      	nop
    253c:	10006464 	.word	0x10006464

00002540 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    2540:	b580      	push	{r7, lr}
    2542:	b086      	sub	sp, #24
    2544:	af00      	add	r7, sp, #0
    2546:	60f8      	str	r0, [r7, #12]
    2548:	60b9      	str	r1, [r7, #8]
    254a:	607a      	str	r2, [r7, #4]
    254c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    254e:	2300      	movs	r3, #0
    2550:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    2552:	68fb      	ldr	r3, [r7, #12]
    2554:	68ba      	ldr	r2, [r7, #8]
    2556:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2558:	68fb      	ldr	r3, [r7, #12]
    255a:	68fa      	ldr	r2, [r7, #12]
    255c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    255e:	68ba      	ldr	r2, [r7, #8]
    2560:	687b      	ldr	r3, [r7, #4]
    2562:	429a      	cmp	r2, r3
    2564:	d812      	bhi.n	258c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2566:	687a      	ldr	r2, [r7, #4]
    2568:	683b      	ldr	r3, [r7, #0]
    256a:	1ad2      	subs	r2, r2, r3
    256c:	68fb      	ldr	r3, [r7, #12]
    256e:	699b      	ldr	r3, [r3, #24]
    2570:	429a      	cmp	r2, r3
    2572:	d302      	bcc.n	257a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    2574:	2301      	movs	r3, #1
    2576:	617b      	str	r3, [r7, #20]
    2578:	e01b      	b.n	25b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    257a:	4b10      	ldr	r3, [pc, #64]	; (25bc <prvInsertTimerInActiveList+0x7c>)
    257c:	681a      	ldr	r2, [r3, #0]
    257e:	68fb      	ldr	r3, [r7, #12]
    2580:	3304      	adds	r3, #4
    2582:	4619      	mov	r1, r3
    2584:	4610      	mov	r0, r2
    2586:	f7fe fb52 	bl	c2e <vListInsert>
    258a:	e012      	b.n	25b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    258c:	687a      	ldr	r2, [r7, #4]
    258e:	683b      	ldr	r3, [r7, #0]
    2590:	429a      	cmp	r2, r3
    2592:	d206      	bcs.n	25a2 <prvInsertTimerInActiveList+0x62>
    2594:	68ba      	ldr	r2, [r7, #8]
    2596:	683b      	ldr	r3, [r7, #0]
    2598:	429a      	cmp	r2, r3
    259a:	d302      	bcc.n	25a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    259c:	2301      	movs	r3, #1
    259e:	617b      	str	r3, [r7, #20]
    25a0:	e007      	b.n	25b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    25a2:	4b07      	ldr	r3, [pc, #28]	; (25c0 <prvInsertTimerInActiveList+0x80>)
    25a4:	681a      	ldr	r2, [r3, #0]
    25a6:	68fb      	ldr	r3, [r7, #12]
    25a8:	3304      	adds	r3, #4
    25aa:	4619      	mov	r1, r3
    25ac:	4610      	mov	r0, r2
    25ae:	f7fe fb3e 	bl	c2e <vListInsert>
		}
	}

	return xProcessTimerNow;
    25b2:	697b      	ldr	r3, [r7, #20]
}
    25b4:	4618      	mov	r0, r3
    25b6:	3718      	adds	r7, #24
    25b8:	46bd      	mov	sp, r7
    25ba:	bd80      	pop	{r7, pc}
    25bc:	10006458 	.word	0x10006458
    25c0:	10006454 	.word	0x10006454

000025c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    25c4:	b580      	push	{r7, lr}
    25c6:	b08c      	sub	sp, #48	; 0x30
    25c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    25ca:	e07a      	b.n	26c2 <prvProcessReceivedCommands+0xfe>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
    25cc:	68bb      	ldr	r3, [r7, #8]
    25ce:	2b00      	cmp	r3, #0
    25d0:	da0f      	bge.n	25f2 <prvProcessReceivedCommands+0x2e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
    25d2:	f107 0308 	add.w	r3, r7, #8
    25d6:	3304      	adds	r3, #4
    25d8:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
    25da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    25dc:	2b00      	cmp	r3, #0
    25de:	d100      	bne.n	25e2 <prvProcessReceivedCommands+0x1e>
    25e0:	e7fe      	b.n	25e0 <prvProcessReceivedCommands+0x1c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
    25e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    25e4:	681b      	ldr	r3, [r3, #0]
    25e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    25e8:	6850      	ldr	r0, [r2, #4]
    25ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    25ec:	6892      	ldr	r2, [r2, #8]
    25ee:	4611      	mov	r1, r2
    25f0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    25f2:	68bb      	ldr	r3, [r7, #8]
    25f4:	2b00      	cmp	r3, #0
    25f6:	db64      	blt.n	26c2 <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    25f8:	693b      	ldr	r3, [r7, #16]
    25fa:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    25fc:	6a3b      	ldr	r3, [r7, #32]
    25fe:	695b      	ldr	r3, [r3, #20]
    2600:	2b00      	cmp	r3, #0
    2602:	d004      	beq.n	260e <prvProcessReceivedCommands+0x4a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2604:	6a3b      	ldr	r3, [r7, #32]
    2606:	3304      	adds	r3, #4
    2608:	4618      	mov	r0, r3
    260a:	f7fe fb49 	bl	ca0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    260e:	1d3b      	adds	r3, r7, #4
    2610:	4618      	mov	r0, r3
    2612:	f7ff ff75 	bl	2500 <prvSampleTimeNow>
    2616:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
    2618:	68bb      	ldr	r3, [r7, #8]
    261a:	2b09      	cmp	r3, #9
    261c:	d850      	bhi.n	26c0 <prvProcessReceivedCommands+0xfc>
    261e:	a201      	add	r2, pc, #4	; (adr r2, 2624 <prvProcessReceivedCommands+0x60>)
    2620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2624:	0000264d 	.word	0x0000264d
    2628:	0000264d 	.word	0x0000264d
    262c:	0000264d 	.word	0x0000264d
    2630:	000026c3 	.word	0x000026c3
    2634:	00002695 	.word	0x00002695
    2638:	000026b9 	.word	0x000026b9
    263c:	0000264d 	.word	0x0000264d
    2640:	0000264d 	.word	0x0000264d
    2644:	000026c3 	.word	0x000026c3
    2648:	00002695 	.word	0x00002695
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    264c:	68fa      	ldr	r2, [r7, #12]
    264e:	6a3b      	ldr	r3, [r7, #32]
    2650:	699b      	ldr	r3, [r3, #24]
    2652:	18d1      	adds	r1, r2, r3
    2654:	68fb      	ldr	r3, [r7, #12]
    2656:	69fa      	ldr	r2, [r7, #28]
    2658:	6a38      	ldr	r0, [r7, #32]
    265a:	f7ff ff71 	bl	2540 <prvInsertTimerInActiveList>
    265e:	4603      	mov	r3, r0
    2660:	2b00      	cmp	r3, #0
    2662:	d02e      	beq.n	26c2 <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2664:	6a3b      	ldr	r3, [r7, #32]
    2666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2668:	6a38      	ldr	r0, [r7, #32]
    266a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    266c:	6a3b      	ldr	r3, [r7, #32]
    266e:	69db      	ldr	r3, [r3, #28]
    2670:	2b01      	cmp	r3, #1
    2672:	d126      	bne.n	26c2 <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2674:	68fa      	ldr	r2, [r7, #12]
    2676:	6a3b      	ldr	r3, [r7, #32]
    2678:	699b      	ldr	r3, [r3, #24]
    267a:	441a      	add	r2, r3
    267c:	2300      	movs	r3, #0
    267e:	9300      	str	r3, [sp, #0]
    2680:	2300      	movs	r3, #0
    2682:	2100      	movs	r1, #0
    2684:	6a38      	ldr	r0, [r7, #32]
    2686:	f7ff fe3d 	bl	2304 <xTimerGenericCommand>
    268a:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
    268c:	69bb      	ldr	r3, [r7, #24]
    268e:	2b00      	cmp	r3, #0
    2690:	d117      	bne.n	26c2 <prvProcessReceivedCommands+0xfe>
    2692:	e7fe      	b.n	2692 <prvProcessReceivedCommands+0xce>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2694:	68fa      	ldr	r2, [r7, #12]
    2696:	6a3b      	ldr	r3, [r7, #32]
    2698:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    269a:	6a3b      	ldr	r3, [r7, #32]
    269c:	699b      	ldr	r3, [r3, #24]
    269e:	2b00      	cmp	r3, #0
    26a0:	d100      	bne.n	26a4 <prvProcessReceivedCommands+0xe0>
    26a2:	e7fe      	b.n	26a2 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    26a4:	6a3b      	ldr	r3, [r7, #32]
    26a6:	699a      	ldr	r2, [r3, #24]
    26a8:	69fb      	ldr	r3, [r7, #28]
    26aa:	18d1      	adds	r1, r2, r3
    26ac:	69fb      	ldr	r3, [r7, #28]
    26ae:	69fa      	ldr	r2, [r7, #28]
    26b0:	6a38      	ldr	r0, [r7, #32]
    26b2:	f7ff ff45 	bl	2540 <prvInsertTimerInActiveList>
					break;
    26b6:	e004      	b.n	26c2 <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    26b8:	6a38      	ldr	r0, [r7, #32]
    26ba:	f7fe f8a1 	bl	800 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    26be:	e000      	b.n	26c2 <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
    26c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    26c2:	4b08      	ldr	r3, [pc, #32]	; (26e4 <prvProcessReceivedCommands+0x120>)
    26c4:	6818      	ldr	r0, [r3, #0]
    26c6:	f107 0108 	add.w	r1, r7, #8
    26ca:	2300      	movs	r3, #0
    26cc:	2200      	movs	r2, #0
    26ce:	f7fe fd0f 	bl	10f0 <xQueueGenericReceive>
    26d2:	4603      	mov	r3, r0
    26d4:	2b00      	cmp	r3, #0
    26d6:	f47f af79 	bne.w	25cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
    26da:	bf00      	nop
    26dc:	3728      	adds	r7, #40	; 0x28
    26de:	46bd      	mov	sp, r7
    26e0:	bd80      	pop	{r7, pc}
    26e2:	bf00      	nop
    26e4:	1000645c 	.word	0x1000645c

000026e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    26e8:	b580      	push	{r7, lr}
    26ea:	b088      	sub	sp, #32
    26ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    26ee:	e03b      	b.n	2768 <prvSwitchTimerLists+0x80>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    26f0:	4b27      	ldr	r3, [pc, #156]	; (2790 <prvSwitchTimerLists+0xa8>)
    26f2:	681b      	ldr	r3, [r3, #0]
    26f4:	68db      	ldr	r3, [r3, #12]
    26f6:	681b      	ldr	r3, [r3, #0]
    26f8:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    26fa:	4b25      	ldr	r3, [pc, #148]	; (2790 <prvSwitchTimerLists+0xa8>)
    26fc:	681b      	ldr	r3, [r3, #0]
    26fe:	68db      	ldr	r3, [r3, #12]
    2700:	68db      	ldr	r3, [r3, #12]
    2702:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2704:	693b      	ldr	r3, [r7, #16]
    2706:	3304      	adds	r3, #4
    2708:	4618      	mov	r0, r3
    270a:	f7fe fac9 	bl	ca0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    270e:	693b      	ldr	r3, [r7, #16]
    2710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2712:	6938      	ldr	r0, [r7, #16]
    2714:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2716:	693b      	ldr	r3, [r7, #16]
    2718:	69db      	ldr	r3, [r3, #28]
    271a:	2b01      	cmp	r3, #1
    271c:	d124      	bne.n	2768 <prvSwitchTimerLists+0x80>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    271e:	693b      	ldr	r3, [r7, #16]
    2720:	699a      	ldr	r2, [r3, #24]
    2722:	697b      	ldr	r3, [r7, #20]
    2724:	4413      	add	r3, r2
    2726:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    2728:	68fa      	ldr	r2, [r7, #12]
    272a:	697b      	ldr	r3, [r7, #20]
    272c:	429a      	cmp	r2, r3
    272e:	d90e      	bls.n	274e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2730:	693b      	ldr	r3, [r7, #16]
    2732:	68fa      	ldr	r2, [r7, #12]
    2734:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2736:	693b      	ldr	r3, [r7, #16]
    2738:	693a      	ldr	r2, [r7, #16]
    273a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    273c:	4b14      	ldr	r3, [pc, #80]	; (2790 <prvSwitchTimerLists+0xa8>)
    273e:	681a      	ldr	r2, [r3, #0]
    2740:	693b      	ldr	r3, [r7, #16]
    2742:	3304      	adds	r3, #4
    2744:	4619      	mov	r1, r3
    2746:	4610      	mov	r0, r2
    2748:	f7fe fa71 	bl	c2e <vListInsert>
    274c:	e00c      	b.n	2768 <prvSwitchTimerLists+0x80>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    274e:	2300      	movs	r3, #0
    2750:	9300      	str	r3, [sp, #0]
    2752:	2300      	movs	r3, #0
    2754:	697a      	ldr	r2, [r7, #20]
    2756:	2100      	movs	r1, #0
    2758:	6938      	ldr	r0, [r7, #16]
    275a:	f7ff fdd3 	bl	2304 <xTimerGenericCommand>
    275e:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
    2760:	68bb      	ldr	r3, [r7, #8]
    2762:	2b00      	cmp	r3, #0
    2764:	d100      	bne.n	2768 <prvSwitchTimerLists+0x80>
    2766:	e7fe      	b.n	2766 <prvSwitchTimerLists+0x7e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2768:	4b09      	ldr	r3, [pc, #36]	; (2790 <prvSwitchTimerLists+0xa8>)
    276a:	681b      	ldr	r3, [r3, #0]
    276c:	681b      	ldr	r3, [r3, #0]
    276e:	2b00      	cmp	r3, #0
    2770:	d1be      	bne.n	26f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    2772:	4b07      	ldr	r3, [pc, #28]	; (2790 <prvSwitchTimerLists+0xa8>)
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    2778:	4b06      	ldr	r3, [pc, #24]	; (2794 <prvSwitchTimerLists+0xac>)
    277a:	681b      	ldr	r3, [r3, #0]
    277c:	4a04      	ldr	r2, [pc, #16]	; (2790 <prvSwitchTimerLists+0xa8>)
    277e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
    2780:	4a04      	ldr	r2, [pc, #16]	; (2794 <prvSwitchTimerLists+0xac>)
    2782:	687b      	ldr	r3, [r7, #4]
    2784:	6013      	str	r3, [r2, #0]
}
    2786:	bf00      	nop
    2788:	3718      	adds	r7, #24
    278a:	46bd      	mov	sp, r7
    278c:	bd80      	pop	{r7, pc}
    278e:	bf00      	nop
    2790:	10006454 	.word	0x10006454
    2794:	10006458 	.word	0x10006458

00002798 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    2798:	b580      	push	{r7, lr}
    279a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    279c:	f7fd fdc2 	bl	324 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
    27a0:	4b0d      	ldr	r3, [pc, #52]	; (27d8 <prvCheckForValidListAndQueue+0x40>)
    27a2:	681b      	ldr	r3, [r3, #0]
    27a4:	2b00      	cmp	r3, #0
    27a6:	d113      	bne.n	27d0 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
    27a8:	480c      	ldr	r0, [pc, #48]	; (27dc <prvCheckForValidListAndQueue+0x44>)
    27aa:	f7fe f9ef 	bl	b8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
    27ae:	480c      	ldr	r0, [pc, #48]	; (27e0 <prvCheckForValidListAndQueue+0x48>)
    27b0:	f7fe f9ec 	bl	b8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
    27b4:	4b0b      	ldr	r3, [pc, #44]	; (27e4 <prvCheckForValidListAndQueue+0x4c>)
    27b6:	4a09      	ldr	r2, [pc, #36]	; (27dc <prvCheckForValidListAndQueue+0x44>)
    27b8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    27ba:	4b0b      	ldr	r3, [pc, #44]	; (27e8 <prvCheckForValidListAndQueue+0x50>)
    27bc:	4a08      	ldr	r2, [pc, #32]	; (27e0 <prvCheckForValidListAndQueue+0x48>)
    27be:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    27c0:	2200      	movs	r2, #0
    27c2:	2110      	movs	r1, #16
    27c4:	2005      	movs	r0, #5
    27c6:	f7fe faf3 	bl	db0 <xQueueGenericCreate>
    27ca:	4602      	mov	r2, r0
    27cc:	4b02      	ldr	r3, [pc, #8]	; (27d8 <prvCheckForValidListAndQueue+0x40>)
    27ce:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    27d0:	f7fd fdce 	bl	370 <vPortExitCritical>
}
    27d4:	bf00      	nop
    27d6:	bd80      	pop	{r7, pc}
    27d8:	1000645c 	.word	0x1000645c
    27dc:	1000642c 	.word	0x1000642c
    27e0:	10006440 	.word	0x10006440
    27e4:	10006454 	.word	0x10006454
    27e8:	10006458 	.word	0x10006458

000027ec <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    27ec:	b580      	push	{r7, lr}
    27ee:	b08a      	sub	sp, #40	; 0x28
    27f0:	af00      	add	r7, sp, #0
    27f2:	60f8      	str	r0, [r7, #12]
    27f4:	60b9      	str	r1, [r7, #8]
    27f6:	607a      	str	r2, [r7, #4]
    27f8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    27fa:	f06f 0301 	mvn.w	r3, #1
    27fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    2800:	68fb      	ldr	r3, [r7, #12]
    2802:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    2804:	68bb      	ldr	r3, [r7, #8]
    2806:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    2808:	687b      	ldr	r3, [r7, #4]
    280a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    280c:	4b06      	ldr	r3, [pc, #24]	; (2828 <xTimerPendFunctionCallFromISR+0x3c>)
    280e:	6818      	ldr	r0, [r3, #0]
    2810:	f107 0114 	add.w	r1, r7, #20
    2814:	2300      	movs	r3, #0
    2816:	683a      	ldr	r2, [r7, #0]
    2818:	f7fe fbf0 	bl	ffc <xQueueGenericSendFromISR>
    281c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
    281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
    2820:	4618      	mov	r0, r3
    2822:	3728      	adds	r7, #40	; 0x28
    2824:	46bd      	mov	sp, r7
    2826:	bd80      	pop	{r7, pc}
    2828:	1000645c 	.word	0x1000645c

0000282c <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
    282c:	b490      	push	{r4, r7}
    282e:	b082      	sub	sp, #8
    2830:	af00      	add	r7, sp, #0
    2832:	6078      	str	r0, [r7, #4]
    if ( (psLED == NULL)    ||
    2834:	687b      	ldr	r3, [r7, #4]
    2836:	2b00      	cmp	r3, #0
    2838:	f000 8138 	beq.w	2aac <am_devices_led_init+0x280>
         (psLED->ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    283c:	687b      	ldr	r3, [r7, #4]
    283e:	681b      	ldr	r3, [r3, #0]
    if ( (psLED == NULL)    ||
    2840:	2b31      	cmp	r3, #49	; 0x31
    2842:	f200 8133 	bhi.w	2aac <am_devices_led_init+0x280>
    }
#else
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    2846:	687b      	ldr	r3, [r7, #4]
    2848:	685b      	ldr	r3, [r3, #4]
    284a:	f003 0302 	and.w	r3, r3, #2
    284e:	2b00      	cmp	r3, #0
    2850:	f000 8096 	beq.w	2980 <am_devices_led_init+0x154>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT);
    2854:	687b      	ldr	r3, [r7, #4]
    2856:	681b      	ldr	r3, [r3, #0]
    2858:	2b00      	cmp	r3, #0
    285a:	db4e      	blt.n	28fa <am_devices_led_init+0xce>
    285c:	4b96      	ldr	r3, [pc, #600]	; (2ab8 <am_devices_led_init+0x28c>)
    285e:	2273      	movs	r2, #115	; 0x73
    2860:	601a      	str	r2, [r3, #0]
    2862:	687b      	ldr	r3, [r7, #4]
    2864:	681b      	ldr	r3, [r3, #0]
    2866:	085b      	lsrs	r3, r3, #1
    2868:	f003 027c 	and.w	r2, r3, #124	; 0x7c
    286c:	4b93      	ldr	r3, [pc, #588]	; (2abc <am_devices_led_init+0x290>)
    286e:	4413      	add	r3, r2
    2870:	461c      	mov	r4, r3
    2872:	687b      	ldr	r3, [r7, #4]
    2874:	681b      	ldr	r3, [r3, #0]
    2876:	009b      	lsls	r3, r3, #2
    2878:	f003 031c 	and.w	r3, r3, #28
    287c:	2202      	movs	r2, #2
    287e:	409a      	lsls	r2, r3
    2880:	687b      	ldr	r3, [r7, #4]
    2882:	681b      	ldr	r3, [r3, #0]
    2884:	085b      	lsrs	r3, r3, #1
    2886:	f003 017c 	and.w	r1, r3, #124	; 0x7c
    288a:	4b8c      	ldr	r3, [pc, #560]	; (2abc <am_devices_led_init+0x290>)
    288c:	440b      	add	r3, r1
    288e:	6819      	ldr	r1, [r3, #0]
    2890:	687b      	ldr	r3, [r7, #4]
    2892:	681b      	ldr	r3, [r3, #0]
    2894:	009b      	lsls	r3, r3, #2
    2896:	f003 031c 	and.w	r3, r3, #28
    289a:	2007      	movs	r0, #7
    289c:	fa00 f303 	lsl.w	r3, r0, r3
    28a0:	43db      	mvns	r3, r3
    28a2:	400b      	ands	r3, r1
    28a4:	4313      	orrs	r3, r2
    28a6:	6023      	str	r3, [r4, #0]
    28a8:	687b      	ldr	r3, [r7, #4]
    28aa:	681b      	ldr	r3, [r3, #0]
    28ac:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    28b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    28b4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    28b8:	461c      	mov	r4, r3
    28ba:	687b      	ldr	r3, [r7, #4]
    28bc:	681b      	ldr	r3, [r3, #0]
    28be:	00db      	lsls	r3, r3, #3
    28c0:	f003 0318 	and.w	r3, r3, #24
    28c4:	2218      	movs	r2, #24
    28c6:	409a      	lsls	r2, r3
    28c8:	687b      	ldr	r3, [r7, #4]
    28ca:	681b      	ldr	r3, [r3, #0]
    28cc:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    28d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    28d4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    28d8:	6819      	ldr	r1, [r3, #0]
    28da:	687b      	ldr	r3, [r7, #4]
    28dc:	681b      	ldr	r3, [r3, #0]
    28de:	00db      	lsls	r3, r3, #3
    28e0:	f003 0318 	and.w	r3, r3, #24
    28e4:	20ff      	movs	r0, #255	; 0xff
    28e6:	fa00 f303 	lsl.w	r3, r0, r3
    28ea:	43db      	mvns	r3, r3
    28ec:	400b      	ands	r3, r1
    28ee:	4313      	orrs	r3, r2
    28f0:	6023      	str	r3, [r4, #0]
    28f2:	4b71      	ldr	r3, [pc, #452]	; (2ab8 <am_devices_led_init+0x28c>)
    28f4:	2200      	movs	r2, #0
    28f6:	601a      	str	r2, [r3, #0]
    28f8:	e000      	b.n	28fc <am_devices_led_init+0xd0>
    28fa:	bf00      	nop

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
    28fc:	687b      	ldr	r3, [r7, #4]
    28fe:	681b      	ldr	r3, [r3, #0]
    2900:	08db      	lsrs	r3, r3, #3
    2902:	f003 0204 	and.w	r2, r3, #4
    2906:	4b6e      	ldr	r3, [pc, #440]	; (2ac0 <am_devices_led_init+0x294>)
    2908:	4413      	add	r3, r2
    290a:	4619      	mov	r1, r3
    290c:	687b      	ldr	r3, [r7, #4]
    290e:	681b      	ldr	r3, [r3, #0]
    2910:	f003 031f 	and.w	r3, r3, #31
    2914:	2201      	movs	r2, #1
    2916:	fa02 f303 	lsl.w	r3, r2, r3
    291a:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
    291c:	687b      	ldr	r3, [r7, #4]
    291e:	681b      	ldr	r3, [r3, #0]
    2920:	08db      	lsrs	r3, r3, #3
    2922:	f003 0204 	and.w	r2, r3, #4
    2926:	4b67      	ldr	r3, [pc, #412]	; (2ac4 <am_devices_led_init+0x298>)
    2928:	4413      	add	r3, r2
    292a:	4618      	mov	r0, r3
    292c:	687b      	ldr	r3, [r7, #4]
    292e:	685b      	ldr	r3, [r3, #4]
    2930:	f003 0301 	and.w	r3, r3, #1
    2934:	2b00      	cmp	r3, #0
    2936:	d010      	beq.n	295a <am_devices_led_init+0x12e>
    2938:	687b      	ldr	r3, [r7, #4]
    293a:	681b      	ldr	r3, [r3, #0]
    293c:	08db      	lsrs	r3, r3, #3
    293e:	f003 0204 	and.w	r2, r3, #4
    2942:	4b60      	ldr	r3, [pc, #384]	; (2ac4 <am_devices_led_init+0x298>)
    2944:	4413      	add	r3, r2
    2946:	681a      	ldr	r2, [r3, #0]
    2948:	687b      	ldr	r3, [r7, #4]
    294a:	681b      	ldr	r3, [r3, #0]
    294c:	f003 031f 	and.w	r3, r3, #31
    2950:	2101      	movs	r1, #1
    2952:	fa01 f303 	lsl.w	r3, r1, r3
    2956:	4313      	orrs	r3, r2
    2958:	e010      	b.n	297c <am_devices_led_init+0x150>
    295a:	687b      	ldr	r3, [r7, #4]
    295c:	681b      	ldr	r3, [r3, #0]
    295e:	08db      	lsrs	r3, r3, #3
    2960:	f003 0204 	and.w	r2, r3, #4
    2964:	4b57      	ldr	r3, [pc, #348]	; (2ac4 <am_devices_led_init+0x298>)
    2966:	4413      	add	r3, r2
    2968:	681a      	ldr	r2, [r3, #0]
    296a:	687b      	ldr	r3, [r7, #4]
    296c:	681b      	ldr	r3, [r3, #0]
    296e:	f003 031f 	and.w	r3, r3, #31
    2972:	2101      	movs	r1, #1
    2974:	fa01 f303 	lsl.w	r3, r1, r3
    2978:	43db      	mvns	r3, r3
    297a:	4013      	ands	r3, r2
    297c:	6003      	str	r3, [r0, #0]
    297e:	e096      	b.n	2aae <am_devices_led_init+0x282>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
    2980:	687b      	ldr	r3, [r7, #4]
    2982:	681b      	ldr	r3, [r3, #0]
    2984:	2b00      	cmp	r3, #0
    2986:	db4e      	blt.n	2a26 <am_devices_led_init+0x1fa>
    2988:	4b4b      	ldr	r3, [pc, #300]	; (2ab8 <am_devices_led_init+0x28c>)
    298a:	2273      	movs	r2, #115	; 0x73
    298c:	601a      	str	r2, [r3, #0]
    298e:	687b      	ldr	r3, [r7, #4]
    2990:	681b      	ldr	r3, [r3, #0]
    2992:	085b      	lsrs	r3, r3, #1
    2994:	f003 027c 	and.w	r2, r3, #124	; 0x7c
    2998:	4b48      	ldr	r3, [pc, #288]	; (2abc <am_devices_led_init+0x290>)
    299a:	4413      	add	r3, r2
    299c:	461c      	mov	r4, r3
    299e:	687b      	ldr	r3, [r7, #4]
    29a0:	681b      	ldr	r3, [r3, #0]
    29a2:	009b      	lsls	r3, r3, #2
    29a4:	f003 031c 	and.w	r3, r3, #28
    29a8:	2206      	movs	r2, #6
    29aa:	409a      	lsls	r2, r3
    29ac:	687b      	ldr	r3, [r7, #4]
    29ae:	681b      	ldr	r3, [r3, #0]
    29b0:	085b      	lsrs	r3, r3, #1
    29b2:	f003 017c 	and.w	r1, r3, #124	; 0x7c
    29b6:	4b41      	ldr	r3, [pc, #260]	; (2abc <am_devices_led_init+0x290>)
    29b8:	440b      	add	r3, r1
    29ba:	6819      	ldr	r1, [r3, #0]
    29bc:	687b      	ldr	r3, [r7, #4]
    29be:	681b      	ldr	r3, [r3, #0]
    29c0:	009b      	lsls	r3, r3, #2
    29c2:	f003 031c 	and.w	r3, r3, #28
    29c6:	2007      	movs	r0, #7
    29c8:	fa00 f303 	lsl.w	r3, r0, r3
    29cc:	43db      	mvns	r3, r3
    29ce:	400b      	ands	r3, r1
    29d0:	4313      	orrs	r3, r2
    29d2:	6023      	str	r3, [r4, #0]
    29d4:	687b      	ldr	r3, [r7, #4]
    29d6:	681b      	ldr	r3, [r3, #0]
    29d8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    29dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    29e0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    29e4:	461c      	mov	r4, r3
    29e6:	687b      	ldr	r3, [r7, #4]
    29e8:	681b      	ldr	r3, [r3, #0]
    29ea:	00db      	lsls	r3, r3, #3
    29ec:	f003 0318 	and.w	r3, r3, #24
    29f0:	2218      	movs	r2, #24
    29f2:	409a      	lsls	r2, r3
    29f4:	687b      	ldr	r3, [r7, #4]
    29f6:	681b      	ldr	r3, [r3, #0]
    29f8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    29fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2a00:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    2a04:	6819      	ldr	r1, [r3, #0]
    2a06:	687b      	ldr	r3, [r7, #4]
    2a08:	681b      	ldr	r3, [r3, #0]
    2a0a:	00db      	lsls	r3, r3, #3
    2a0c:	f003 0318 	and.w	r3, r3, #24
    2a10:	20ff      	movs	r0, #255	; 0xff
    2a12:	fa00 f303 	lsl.w	r3, r0, r3
    2a16:	43db      	mvns	r3, r3
    2a18:	400b      	ands	r3, r1
    2a1a:	4313      	orrs	r3, r2
    2a1c:	6023      	str	r3, [r4, #0]
    2a1e:	4b26      	ldr	r3, [pc, #152]	; (2ab8 <am_devices_led_init+0x28c>)
    2a20:	2200      	movs	r2, #0
    2a22:	601a      	str	r2, [r3, #0]
    2a24:	e000      	b.n	2a28 <am_devices_led_init+0x1fc>
    2a26:	bf00      	nop

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
    2a28:	687b      	ldr	r3, [r7, #4]
    2a2a:	681b      	ldr	r3, [r3, #0]
    2a2c:	08db      	lsrs	r3, r3, #3
    2a2e:	f003 0204 	and.w	r2, r3, #4
    2a32:	4b23      	ldr	r3, [pc, #140]	; (2ac0 <am_devices_led_init+0x294>)
    2a34:	4413      	add	r3, r2
    2a36:	4619      	mov	r1, r3
    2a38:	687b      	ldr	r3, [r7, #4]
    2a3a:	681b      	ldr	r3, [r3, #0]
    2a3c:	f003 031f 	and.w	r3, r3, #31
    2a40:	2201      	movs	r2, #1
    2a42:	fa02 f303 	lsl.w	r3, r2, r3
    2a46:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
    2a48:	687b      	ldr	r3, [r7, #4]
    2a4a:	681b      	ldr	r3, [r3, #0]
    2a4c:	08db      	lsrs	r3, r3, #3
    2a4e:	f003 0204 	and.w	r2, r3, #4
    2a52:	4b1c      	ldr	r3, [pc, #112]	; (2ac4 <am_devices_led_init+0x298>)
    2a54:	4413      	add	r3, r2
    2a56:	4618      	mov	r0, r3
    2a58:	687b      	ldr	r3, [r7, #4]
    2a5a:	685b      	ldr	r3, [r3, #4]
    2a5c:	f003 0301 	and.w	r3, r3, #1
    2a60:	2b00      	cmp	r3, #0
    2a62:	d010      	beq.n	2a86 <am_devices_led_init+0x25a>
    2a64:	687b      	ldr	r3, [r7, #4]
    2a66:	681b      	ldr	r3, [r3, #0]
    2a68:	08db      	lsrs	r3, r3, #3
    2a6a:	f003 0204 	and.w	r2, r3, #4
    2a6e:	4b15      	ldr	r3, [pc, #84]	; (2ac4 <am_devices_led_init+0x298>)
    2a70:	4413      	add	r3, r2
    2a72:	681a      	ldr	r2, [r3, #0]
    2a74:	687b      	ldr	r3, [r7, #4]
    2a76:	681b      	ldr	r3, [r3, #0]
    2a78:	f003 031f 	and.w	r3, r3, #31
    2a7c:	2101      	movs	r1, #1
    2a7e:	fa01 f303 	lsl.w	r3, r1, r3
    2a82:	4313      	orrs	r3, r2
    2a84:	e010      	b.n	2aa8 <am_devices_led_init+0x27c>
    2a86:	687b      	ldr	r3, [r7, #4]
    2a88:	681b      	ldr	r3, [r3, #0]
    2a8a:	08db      	lsrs	r3, r3, #3
    2a8c:	f003 0204 	and.w	r2, r3, #4
    2a90:	4b0c      	ldr	r3, [pc, #48]	; (2ac4 <am_devices_led_init+0x298>)
    2a92:	4413      	add	r3, r2
    2a94:	681a      	ldr	r2, [r3, #0]
    2a96:	687b      	ldr	r3, [r7, #4]
    2a98:	681b      	ldr	r3, [r3, #0]
    2a9a:	f003 031f 	and.w	r3, r3, #31
    2a9e:	2101      	movs	r1, #1
    2aa0:	fa01 f303 	lsl.w	r3, r1, r3
    2aa4:	43db      	mvns	r3, r3
    2aa6:	4013      	ands	r3, r2
    2aa8:	6003      	str	r3, [r0, #0]
    2aaa:	e000      	b.n	2aae <am_devices_led_init+0x282>
        return;
    2aac:	bf00      	nop
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
#endif
}
    2aae:	3708      	adds	r7, #8
    2ab0:	46bd      	mov	sp, r7
    2ab2:	bc90      	pop	{r4, r7}
    2ab4:	4770      	bx	lr
    2ab6:	bf00      	nop
    2ab8:	40010060 	.word	0x40010060
    2abc:	40010040 	.word	0x40010040
    2ac0:	400100b4 	.word	0x400100b4
    2ac4:	40010088 	.word	0x40010088

00002ac8 <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
    2ac8:	b580      	push	{r7, lr}
    2aca:	b084      	sub	sp, #16
    2acc:	af00      	add	r7, sp, #0
    2ace:	6078      	str	r0, [r7, #4]
    2ad0:	6039      	str	r1, [r7, #0]
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
    2ad2:	687b      	ldr	r3, [r7, #4]
    2ad4:	2b00      	cmp	r3, #0
    2ad6:	d014      	beq.n	2b02 <am_devices_led_array_init+0x3a>
    2ad8:	683b      	ldr	r3, [r7, #0]
    2ada:	2b1f      	cmp	r3, #31
    2adc:	d811      	bhi.n	2b02 <am_devices_led_array_init+0x3a>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
    2ade:	2300      	movs	r3, #0
    2ae0:	60fb      	str	r3, [r7, #12]
    2ae2:	e009      	b.n	2af8 <am_devices_led_array_init+0x30>
    {
        am_devices_led_init(psLEDs + i);
    2ae4:	68fb      	ldr	r3, [r7, #12]
    2ae6:	00db      	lsls	r3, r3, #3
    2ae8:	687a      	ldr	r2, [r7, #4]
    2aea:	4413      	add	r3, r2
    2aec:	4618      	mov	r0, r3
    2aee:	f7ff fe9d 	bl	282c <am_devices_led_init>
    for ( i = 0; i < ui32NumLEDs; i++ )
    2af2:	68fb      	ldr	r3, [r7, #12]
    2af4:	3301      	adds	r3, #1
    2af6:	60fb      	str	r3, [r7, #12]
    2af8:	68fa      	ldr	r2, [r7, #12]
    2afa:	683b      	ldr	r3, [r7, #0]
    2afc:	429a      	cmp	r2, r3
    2afe:	d3f1      	bcc.n	2ae4 <am_devices_led_array_init+0x1c>
    2b00:	e000      	b.n	2b04 <am_devices_led_array_init+0x3c>
        return;
    2b02:	bf00      	nop
    }
}
    2b04:	3710      	adds	r7, #16
    2b06:	46bd      	mov	sp, r7
    2b08:	bd80      	pop	{r7, pc}
	...

00002b0c <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    2b0c:	b480      	push	{r7}
    2b0e:	b083      	sub	sp, #12
    2b10:	af00      	add	r7, sp, #0
    2b12:	6078      	str	r0, [r7, #4]
    2b14:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    2b16:	687b      	ldr	r3, [r7, #4]
    2b18:	2b00      	cmp	r3, #0
    2b1a:	d06d      	beq.n	2bf8 <am_devices_led_off+0xec>
    2b1c:	683b      	ldr	r3, [r7, #0]
    2b1e:	2b1e      	cmp	r3, #30
    2b20:	d86a      	bhi.n	2bf8 <am_devices_led_off+0xec>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    2b22:	683b      	ldr	r3, [r7, #0]
    2b24:	00db      	lsls	r3, r3, #3
    2b26:	687a      	ldr	r2, [r7, #4]
    2b28:	4413      	add	r3, r2
    2b2a:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    2b2c:	2b31      	cmp	r3, #49	; 0x31
    2b2e:	d863      	bhi.n	2bf8 <am_devices_led_off+0xec>
    }
#else
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    2b30:	683b      	ldr	r3, [r7, #0]
    2b32:	00db      	lsls	r3, r3, #3
    2b34:	687a      	ldr	r2, [r7, #4]
    2b36:	4413      	add	r3, r2
    2b38:	685b      	ldr	r3, [r3, #4]
    2b3a:	f003 0302 	and.w	r3, r3, #2
    2b3e:	2b00      	cmp	r3, #0
    2b40:	d043      	beq.n	2bca <am_devices_led_off+0xbe>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
    2b42:	683b      	ldr	r3, [r7, #0]
    2b44:	00db      	lsls	r3, r3, #3
    2b46:	687a      	ldr	r2, [r7, #4]
    2b48:	4413      	add	r3, r2
    2b4a:	681b      	ldr	r3, [r3, #0]
    2b4c:	08db      	lsrs	r3, r3, #3
    2b4e:	f003 0204 	and.w	r2, r3, #4
    2b52:	4b2c      	ldr	r3, [pc, #176]	; (2c04 <am_devices_led_off+0xf8>)
    2b54:	4413      	add	r3, r2
    2b56:	4618      	mov	r0, r3
    2b58:	683b      	ldr	r3, [r7, #0]
    2b5a:	00db      	lsls	r3, r3, #3
    2b5c:	687a      	ldr	r2, [r7, #4]
    2b5e:	4413      	add	r3, r2
    2b60:	685b      	ldr	r3, [r3, #4]
    2b62:	f003 0301 	and.w	r3, r3, #1
    2b66:	2b00      	cmp	r3, #0
    2b68:	d116      	bne.n	2b98 <am_devices_led_off+0x8c>
    2b6a:	683b      	ldr	r3, [r7, #0]
    2b6c:	00db      	lsls	r3, r3, #3
    2b6e:	687a      	ldr	r2, [r7, #4]
    2b70:	4413      	add	r3, r2
    2b72:	681b      	ldr	r3, [r3, #0]
    2b74:	08db      	lsrs	r3, r3, #3
    2b76:	f003 0204 	and.w	r2, r3, #4
    2b7a:	4b22      	ldr	r3, [pc, #136]	; (2c04 <am_devices_led_off+0xf8>)
    2b7c:	4413      	add	r3, r2
    2b7e:	681a      	ldr	r2, [r3, #0]
    2b80:	683b      	ldr	r3, [r7, #0]
    2b82:	00db      	lsls	r3, r3, #3
    2b84:	6879      	ldr	r1, [r7, #4]
    2b86:	440b      	add	r3, r1
    2b88:	681b      	ldr	r3, [r3, #0]
    2b8a:	f003 031f 	and.w	r3, r3, #31
    2b8e:	2101      	movs	r1, #1
    2b90:	fa01 f303 	lsl.w	r3, r1, r3
    2b94:	4313      	orrs	r3, r2
    2b96:	e016      	b.n	2bc6 <am_devices_led_off+0xba>
    2b98:	683b      	ldr	r3, [r7, #0]
    2b9a:	00db      	lsls	r3, r3, #3
    2b9c:	687a      	ldr	r2, [r7, #4]
    2b9e:	4413      	add	r3, r2
    2ba0:	681b      	ldr	r3, [r3, #0]
    2ba2:	08db      	lsrs	r3, r3, #3
    2ba4:	f003 0204 	and.w	r2, r3, #4
    2ba8:	4b16      	ldr	r3, [pc, #88]	; (2c04 <am_devices_led_off+0xf8>)
    2baa:	4413      	add	r3, r2
    2bac:	681a      	ldr	r2, [r3, #0]
    2bae:	683b      	ldr	r3, [r7, #0]
    2bb0:	00db      	lsls	r3, r3, #3
    2bb2:	6879      	ldr	r1, [r7, #4]
    2bb4:	440b      	add	r3, r1
    2bb6:	681b      	ldr	r3, [r3, #0]
    2bb8:	f003 031f 	and.w	r3, r3, #31
    2bbc:	2101      	movs	r1, #1
    2bbe:	fa01 f303 	lsl.w	r3, r1, r3
    2bc2:	43db      	mvns	r3, r3
    2bc4:	4013      	ands	r3, r2
    2bc6:	6003      	str	r3, [r0, #0]
    2bc8:	e017      	b.n	2bfa <am_devices_led_off+0xee>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    2bca:	683b      	ldr	r3, [r7, #0]
    2bcc:	00db      	lsls	r3, r3, #3
    2bce:	687a      	ldr	r2, [r7, #4]
    2bd0:	4413      	add	r3, r2
    2bd2:	681b      	ldr	r3, [r3, #0]
    2bd4:	08db      	lsrs	r3, r3, #3
    2bd6:	f003 0204 	and.w	r2, r3, #4
    2bda:	4b0b      	ldr	r3, [pc, #44]	; (2c08 <am_devices_led_off+0xfc>)
    2bdc:	4413      	add	r3, r2
    2bde:	4619      	mov	r1, r3
    2be0:	683b      	ldr	r3, [r7, #0]
    2be2:	00db      	lsls	r3, r3, #3
    2be4:	687a      	ldr	r2, [r7, #4]
    2be6:	4413      	add	r3, r2
    2be8:	681b      	ldr	r3, [r3, #0]
    2bea:	f003 031f 	and.w	r3, r3, #31
    2bee:	2201      	movs	r2, #1
    2bf0:	fa02 f303 	lsl.w	r3, r2, r3
    2bf4:	600b      	str	r3, [r1, #0]
    2bf6:	e000      	b.n	2bfa <am_devices_led_off+0xee>
        return;
    2bf8:	bf00      	nop
    }
#endif
}
    2bfa:	370c      	adds	r7, #12
    2bfc:	46bd      	mov	sp, r7
    2bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c02:	4770      	bx	lr
    2c04:	40010088 	.word	0x40010088
    2c08:	400100b4 	.word	0x400100b4

00002c0c <am_devices_led_toggle>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    2c0c:	b580      	push	{r7, lr}
    2c0e:	b082      	sub	sp, #8
    2c10:	af00      	add	r7, sp, #0
    2c12:	6078      	str	r0, [r7, #4]
    2c14:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    2c16:	687b      	ldr	r3, [r7, #4]
    2c18:	2b00      	cmp	r3, #0
    2c1a:	d06e      	beq.n	2cfa <am_devices_led_toggle+0xee>
    2c1c:	683b      	ldr	r3, [r7, #0]
    2c1e:	2b1e      	cmp	r3, #30
    2c20:	d86b      	bhi.n	2cfa <am_devices_led_toggle+0xee>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    2c22:	683b      	ldr	r3, [r7, #0]
    2c24:	00db      	lsls	r3, r3, #3
    2c26:	687a      	ldr	r2, [r7, #4]
    2c28:	4413      	add	r3, r2
    2c2a:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    2c2c:	2b31      	cmp	r3, #49	; 0x31
    2c2e:	d864      	bhi.n	2cfa <am_devices_led_toggle+0xee>
    }
#else
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    2c30:	683b      	ldr	r3, [r7, #0]
    2c32:	00db      	lsls	r3, r3, #3
    2c34:	687a      	ldr	r2, [r7, #4]
    2c36:	4413      	add	r3, r2
    2c38:	685b      	ldr	r3, [r3, #4]
    2c3a:	f003 0302 	and.w	r3, r3, #2
    2c3e:	2b00      	cmp	r3, #0
    2c40:	d022      	beq.n	2c88 <am_devices_led_toggle+0x7c>
    {
        am_hal_gpio_out_bit_toggle(psLEDs[ui32LEDNum].ui32GPIONumber);
    2c42:	683b      	ldr	r3, [r7, #0]
    2c44:	00db      	lsls	r3, r3, #3
    2c46:	687a      	ldr	r2, [r7, #4]
    2c48:	4413      	add	r3, r2
    2c4a:	681b      	ldr	r3, [r3, #0]
    2c4c:	08db      	lsrs	r3, r3, #3
    2c4e:	f003 0204 	and.w	r2, r3, #4
    2c52:	4b2c      	ldr	r3, [pc, #176]	; (2d04 <am_devices_led_toggle+0xf8>)
    2c54:	4413      	add	r3, r2
    2c56:	4618      	mov	r0, r3
    2c58:	683b      	ldr	r3, [r7, #0]
    2c5a:	00db      	lsls	r3, r3, #3
    2c5c:	687a      	ldr	r2, [r7, #4]
    2c5e:	4413      	add	r3, r2
    2c60:	681b      	ldr	r3, [r3, #0]
    2c62:	08db      	lsrs	r3, r3, #3
    2c64:	f003 0204 	and.w	r2, r3, #4
    2c68:	4b26      	ldr	r3, [pc, #152]	; (2d04 <am_devices_led_toggle+0xf8>)
    2c6a:	4413      	add	r3, r2
    2c6c:	681a      	ldr	r2, [r3, #0]
    2c6e:	683b      	ldr	r3, [r7, #0]
    2c70:	00db      	lsls	r3, r3, #3
    2c72:	6879      	ldr	r1, [r7, #4]
    2c74:	440b      	add	r3, r1
    2c76:	681b      	ldr	r3, [r3, #0]
    2c78:	f003 031f 	and.w	r3, r3, #31
    2c7c:	2101      	movs	r1, #1
    2c7e:	fa01 f303 	lsl.w	r3, r1, r3
    2c82:	4053      	eors	r3, r2
    2c84:	6003      	str	r3, [r0, #0]
    2c86:	e039      	b.n	2cfc <am_devices_led_toggle+0xf0>
    else
    {
        //
        // Check to see if the LED pin is enabled.
        //
        if ( am_hal_gpio_out_enable_bit_get(psLEDs[ui32LEDNum].ui32GPIONumber) )
    2c88:	683b      	ldr	r3, [r7, #0]
    2c8a:	00db      	lsls	r3, r3, #3
    2c8c:	687a      	ldr	r2, [r7, #4]
    2c8e:	4413      	add	r3, r2
    2c90:	681b      	ldr	r3, [r3, #0]
    2c92:	4618      	mov	r0, r3
    2c94:	f001 fc12 	bl	44bc <am_hal_gpio_out_enable_bit_get>
    2c98:	4603      	mov	r3, r0
    2c9a:	2b00      	cmp	r3, #0
    2c9c:	d016      	beq.n	2ccc <am_devices_led_toggle+0xc0>
        {
            //
            // If it was enabled, turn if off.
            //
            am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    2c9e:	683b      	ldr	r3, [r7, #0]
    2ca0:	00db      	lsls	r3, r3, #3
    2ca2:	687a      	ldr	r2, [r7, #4]
    2ca4:	4413      	add	r3, r2
    2ca6:	681b      	ldr	r3, [r3, #0]
    2ca8:	08db      	lsrs	r3, r3, #3
    2caa:	f003 0204 	and.w	r2, r3, #4
    2cae:	4b16      	ldr	r3, [pc, #88]	; (2d08 <am_devices_led_toggle+0xfc>)
    2cb0:	4413      	add	r3, r2
    2cb2:	4619      	mov	r1, r3
    2cb4:	683b      	ldr	r3, [r7, #0]
    2cb6:	00db      	lsls	r3, r3, #3
    2cb8:	687a      	ldr	r2, [r7, #4]
    2cba:	4413      	add	r3, r2
    2cbc:	681b      	ldr	r3, [r3, #0]
    2cbe:	f003 031f 	and.w	r3, r3, #31
    2cc2:	2201      	movs	r2, #1
    2cc4:	fa02 f303 	lsl.w	r3, r2, r3
    2cc8:	600b      	str	r3, [r1, #0]
    2cca:	e017      	b.n	2cfc <am_devices_led_toggle+0xf0>
        else
        {
            //
            // If it was not enabled, turn if on.
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
    2ccc:	683b      	ldr	r3, [r7, #0]
    2cce:	00db      	lsls	r3, r3, #3
    2cd0:	687a      	ldr	r2, [r7, #4]
    2cd2:	4413      	add	r3, r2
    2cd4:	681b      	ldr	r3, [r3, #0]
    2cd6:	08db      	lsrs	r3, r3, #3
    2cd8:	f003 0204 	and.w	r2, r3, #4
    2cdc:	4b0b      	ldr	r3, [pc, #44]	; (2d0c <am_devices_led_toggle+0x100>)
    2cde:	4413      	add	r3, r2
    2ce0:	4619      	mov	r1, r3
    2ce2:	683b      	ldr	r3, [r7, #0]
    2ce4:	00db      	lsls	r3, r3, #3
    2ce6:	687a      	ldr	r2, [r7, #4]
    2ce8:	4413      	add	r3, r2
    2cea:	681b      	ldr	r3, [r3, #0]
    2cec:	f003 031f 	and.w	r3, r3, #31
    2cf0:	2201      	movs	r2, #1
    2cf2:	fa02 f303 	lsl.w	r3, r2, r3
    2cf6:	600b      	str	r3, [r1, #0]
    2cf8:	e000      	b.n	2cfc <am_devices_led_toggle+0xf0>
        return;
    2cfa:	bf00      	nop
        }
    }
#endif
}
    2cfc:	3708      	adds	r7, #8
    2cfe:	46bd      	mov	sp, r7
    2d00:	bd80      	pop	{r7, pc}
    2d02:	bf00      	nop
    2d04:	40010088 	.word	0x40010088
    2d08:	400100b4 	.word	0x400100b4
    2d0c:	400100a8 	.word	0x400100a8

00002d10 <enable_print_interface>:
// Enable printing to the console.
//
//*****************************************************************************
void
enable_print_interface(void)
{
    2d10:	b580      	push	{r7, lr}
    2d12:	af00      	add	r7, sp, #0
    //
    // Initialize a debug printing interface.
    //
    am_hal_itm_enable();
    2d14:	f001 fcae 	bl	4674 <am_hal_itm_enable>
    am_bsp_debug_printf_enable();
    2d18:	f001 f9e6 	bl	40e8 <am_bsp_debug_printf_enable>
    am_util_debug_printf_init(am_hal_itm_print);
    2d1c:	4803      	ldr	r0, [pc, #12]	; (2d2c <enable_print_interface+0x1c>)
    2d1e:	f000 fb25 	bl	336c <am_util_stdio_printf_init>
    am_util_stdio_terminal_clear();
    2d22:	f001 f9c5 	bl	40b0 <am_util_stdio_terminal_clear>
}
    2d26:	bf00      	nop
    2d28:	bd80      	pop	{r7, pc}
    2d2a:	bf00      	nop
    2d2c:	00004755 	.word	0x00004755

00002d30 <disable_print_interface>:
// Enable printing to the console.
//
//*****************************************************************************
void
disable_print_interface(void)
{
    2d30:	b580      	push	{r7, lr}
    2d32:	af00      	add	r7, sp, #0
    //
    // Initialize a debug printing interface.
    //
    am_bsp_debug_printf_disable();
    2d34:	f001 fa04 	bl	4140 <am_bsp_debug_printf_disable>
    am_hal_itm_disable();
    2d38:	f001 fcc8 	bl	46cc <am_hal_itm_disable>
}
    2d3c:	bf00      	nop
    2d3e:	bd80      	pop	{r7, pc}

00002d40 <main>:
// Main Function
//
//*****************************************************************************
int
main(void)
{
    2d40:	b580      	push	{r7, lr}
    2d42:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
    2d44:	2000      	movs	r0, #0
    2d46:	f001 fa23 	bl	4190 <am_hal_clkgen_sysclk_select>
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    2d4a:	f001 f9bb 	bl	40c4 <am_bsp_low_power_init>
#ifndef NOFPU
    //
    // Enable the floating point module, and configure the core for lazy
    // stacking.
    //
    am_hal_sysctrl_fpu_enable();
    2d4e:	f001 fd99 	bl	4884 <am_hal_sysctrl_fpu_enable>
    am_hal_sysctrl_fpu_stacking_enable(true);
    2d52:	2001      	movs	r0, #1
    2d54:	f001 fd9e 	bl	4894 <am_hal_sysctrl_fpu_stacking_enable>

#ifdef AM_PART_APOLLO
    //
    // SRAM bank power setting.
    //
    am_hal_mcuctrl_sram_power_set(AM_HAL_MCUCTRL_SRAM_POWER_DOWN_4 |
    2d58:	21f0      	movs	r1, #240	; 0xf0
    2d5a:	20f0      	movs	r0, #240	; 0xf0
    2d5c:	f001 fd3e 	bl	47dc <am_hal_mcuctrl_sram_power_set>
                                  AM_HAL_MCUCTRL_SRAM_POWER_DOWN_7);

    //
    // Flash bank power set.
    //
    am_hal_mcuctrl_flash_power_set(AM_HAL_MCUCTRL_FLASH_POWER_DOWN_1);
    2d60:	2002      	movs	r0, #2
    2d62:	f001 fd35 	bl	47d0 <am_hal_mcuctrl_flash_power_set>

    //
    // Enable printing to the console.
    //
#ifdef AM_DEBUG_PRINTF
    enable_print_interface();
    2d66:	f7ff ffd3 	bl	2d10 <enable_print_interface>
#endif

    //
    // Initialize plotting interface.
    //
    am_util_debug_printf("FreeRTOS Low Power Example\n");
    2d6a:	4803      	ldr	r0, [pc, #12]	; (2d78 <main+0x38>)
    2d6c:	f001 f982 	bl	4074 <am_util_stdio_printf>

    //
    // Run the application.
    //
    run_tasks();
    2d70:	f000 fa10 	bl	3194 <run_tasks>

    //
    // We shouldn't ever get here.
    //
    while (1)
    2d74:	e7fe      	b.n	2d74 <main+0x34>
    2d76:	bf00      	nop
    2d78:	000049c4 	.word	0x000049c4

00002d7c <am_gpio_isr>:
// Interrupt handler for the GPIO pins.
//
//*****************************************************************************
void
am_gpio_isr(void)
{
    2d7c:	b580      	push	{r7, lr}
    2d7e:	b082      	sub	sp, #8
    2d80:	af00      	add	r7, sp, #0
    uint64_t ui64Status;

    //
    // Read and clear the GPIO interrupt status.
    //
    ui64Status = am_hal_gpio_int_status_get(false);
    2d82:	2000      	movs	r0, #0
    2d84:	f001 fbc6 	bl	4514 <am_hal_gpio_int_status_get>
    2d88:	e9c7 0100 	strd	r0, r1, [r7]
    am_hal_gpio_int_clear(ui64Status);
    2d8c:	e9d7 0100 	ldrd	r0, r1, [r7]
    2d90:	f001 fbb6 	bl	4500 <am_hal_gpio_int_clear>

    //
    // Call the individual pin interrupt handlers for any pin that triggered an
    // interrupt.
    //
    am_hal_gpio_int_service(ui64Status);
    2d94:	e9d7 0100 	ldrd	r0, r1, [r7]
    2d98:	f001 fbde 	bl	4558 <am_hal_gpio_int_service>
}
    2d9c:	bf00      	nop
    2d9e:	3708      	adds	r7, #8
    2da0:	46bd      	mov	sp, r7
    2da2:	bd80      	pop	{r7, pc}

00002da4 <button_handler>:
// Interrupt handler for the Buttons
//
//*****************************************************************************
void
button_handler(uint32_t buttonId)
{
    2da4:	b580      	push	{r7, lr}
    2da6:	b084      	sub	sp, #16
    2da8:	af00      	add	r7, sp, #0
    2daa:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken, xResult;
    //
    // Send an event to the main LED task
    //
    xHigherPriorityTaskWoken = pdFALSE;
    2dac:	2300      	movs	r3, #0
    2dae:	60bb      	str	r3, [r7, #8]

    xResult = xEventGroupSetBitsFromISR(xLedEventHandle, (1 << buttonId),
    2db0:	4b0f      	ldr	r3, [pc, #60]	; (2df0 <button_handler+0x4c>)
    2db2:	6819      	ldr	r1, [r3, #0]
    2db4:	2201      	movs	r2, #1
    2db6:	687b      	ldr	r3, [r7, #4]
    2db8:	fa02 f303 	lsl.w	r3, r2, r3
    2dbc:	461a      	mov	r2, r3
    2dbe:	f107 0308 	add.w	r3, r7, #8
    2dc2:	480c      	ldr	r0, [pc, #48]	; (2df4 <button_handler+0x50>)
    2dc4:	f7ff fd12 	bl	27ec <xTimerPendFunctionCallFromISR>
    2dc8:	60f8      	str	r0, [r7, #12]

    //
    // If the LED task is higher-priority than the context we're currently
    // running from, we should yield now and run the radio task.
    //
    if (xResult != pdFAIL)
    2dca:	68fb      	ldr	r3, [r7, #12]
    2dcc:	2b00      	cmp	r3, #0
    2dce:	d00a      	beq.n	2de6 <button_handler+0x42>
    {
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    2dd0:	68bb      	ldr	r3, [r7, #8]
    2dd2:	2b00      	cmp	r3, #0
    2dd4:	d007      	beq.n	2de6 <button_handler+0x42>
    2dd6:	4b08      	ldr	r3, [pc, #32]	; (2df8 <button_handler+0x54>)
    2dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2ddc:	601a      	str	r2, [r3, #0]
    2dde:	f3bf 8f4f 	dsb	sy
    2de2:	f3bf 8f6f 	isb	sy
    }
}
    2de6:	bf00      	nop
    2de8:	3710      	adds	r7, #16
    2dea:	46bd      	mov	sp, r7
    2dec:	bd80      	pop	{r7, pc}
    2dee:	bf00      	nop
    2df0:	10006570 	.word	0x10006570
    2df4:	00000b2f 	.word	0x00000b2f
    2df8:	e000ed04 	.word	0xe000ed04

00002dfc <button0_handler>:

void
button0_handler(void)
{
    2dfc:	b580      	push	{r7, lr}
    2dfe:	b082      	sub	sp, #8
    2e00:	af00      	add	r7, sp, #0

    //
    // Debounce for 20 ms.
    // We're triggered for rising edge - so we expect a consistent HIGH here
    //
    for (count = 0; count < 10; count++)
    2e02:	2300      	movs	r3, #0
    2e04:	607b      	str	r3, [r7, #4]
    2e06:	e012      	b.n	2e2e <button0_handler+0x32>
    {
        val = am_hal_gpio_input_bit_read(AM_BSP_GPIO_BUTTON0);
    2e08:	4b0e      	ldr	r3, [pc, #56]	; (2e44 <button0_handler+0x48>)
    2e0a:	681b      	ldr	r3, [r3, #0]
    2e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    2e10:	2b00      	cmp	r3, #0
    2e12:	bf14      	ite	ne
    2e14:	2301      	movne	r3, #1
    2e16:	2300      	moveq	r3, #0
    2e18:	b2db      	uxtb	r3, r3
    2e1a:	603b      	str	r3, [r7, #0]
        if (!val)
    2e1c:	683b      	ldr	r3, [r7, #0]
    2e1e:	2b00      	cmp	r3, #0
    2e20:	d00c      	beq.n	2e3c <button0_handler+0x40>
        {
            return; // State not high...must be result of debounce
        }
        am_util_delay_ms(2);
    2e22:	2002      	movs	r0, #2
    2e24:	f000 fa08 	bl	3238 <am_util_delay_ms>
    for (count = 0; count < 10; count++)
    2e28:	687b      	ldr	r3, [r7, #4]
    2e2a:	3301      	adds	r3, #1
    2e2c:	607b      	str	r3, [r7, #4]
    2e2e:	687b      	ldr	r3, [r7, #4]
    2e30:	2b09      	cmp	r3, #9
    2e32:	d9e9      	bls.n	2e08 <button0_handler+0xc>
    }

    button_handler(0);
    2e34:	2000      	movs	r0, #0
    2e36:	f7ff ffb5 	bl	2da4 <button_handler>
    2e3a:	e000      	b.n	2e3e <button0_handler+0x42>
            return; // State not high...must be result of debounce
    2e3c:	bf00      	nop
}
    2e3e:	3708      	adds	r7, #8
    2e40:	46bd      	mov	sp, r7
    2e42:	bd80      	pop	{r7, pc}
    2e44:	40010080 	.word	0x40010080

00002e48 <button1_handler>:

void
button1_handler(void)
{
    2e48:	b580      	push	{r7, lr}
    2e4a:	b082      	sub	sp, #8
    2e4c:	af00      	add	r7, sp, #0

    //
    // Debounce for 20 ms.
    // We're triggered for rising edge - so we expect a consistent HIGH here
    //
    for (count = 0; count < 10; count++)
    2e4e:	2300      	movs	r3, #0
    2e50:	607b      	str	r3, [r7, #4]
    2e52:	e012      	b.n	2e7a <button1_handler+0x32>
    {
        val = am_hal_gpio_input_bit_read(AM_BSP_GPIO_BUTTON1);
    2e54:	4b0e      	ldr	r3, [pc, #56]	; (2e90 <button1_handler+0x48>)
    2e56:	681b      	ldr	r3, [r3, #0]
    2e58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    2e5c:	2b00      	cmp	r3, #0
    2e5e:	bf14      	ite	ne
    2e60:	2301      	movne	r3, #1
    2e62:	2300      	moveq	r3, #0
    2e64:	b2db      	uxtb	r3, r3
    2e66:	603b      	str	r3, [r7, #0]
        if (!val)
    2e68:	683b      	ldr	r3, [r7, #0]
    2e6a:	2b00      	cmp	r3, #0
    2e6c:	d00c      	beq.n	2e88 <button1_handler+0x40>
        {
            return; // State not high...must be result of debounce
        }
        am_util_delay_ms(2);
    2e6e:	2002      	movs	r0, #2
    2e70:	f000 f9e2 	bl	3238 <am_util_delay_ms>
    for (count = 0; count < 10; count++)
    2e74:	687b      	ldr	r3, [r7, #4]
    2e76:	3301      	adds	r3, #1
    2e78:	607b      	str	r3, [r7, #4]
    2e7a:	687b      	ldr	r3, [r7, #4]
    2e7c:	2b09      	cmp	r3, #9
    2e7e:	d9e9      	bls.n	2e54 <button1_handler+0xc>
    }

    button_handler(1);
    2e80:	2001      	movs	r0, #1
    2e82:	f7ff ff8f 	bl	2da4 <button_handler>
    2e86:	e000      	b.n	2e8a <button1_handler+0x42>
            return; // State not high...must be result of debounce
    2e88:	bf00      	nop
}
    2e8a:	3708      	adds	r7, #8
    2e8c:	46bd      	mov	sp, r7
    2e8e:	bd80      	pop	{r7, pc}
    2e90:	40010080 	.word	0x40010080

00002e94 <button2_handler>:

void
button2_handler(void)
{
    2e94:	b580      	push	{r7, lr}
    2e96:	b082      	sub	sp, #8
    2e98:	af00      	add	r7, sp, #0

    //
    // Debounce for 20 ms.
    // We're triggered for rising edge - so we expect a consistent HIGH here
    //
    for (count = 0; count < 10; count++)
    2e9a:	2300      	movs	r3, #0
    2e9c:	607b      	str	r3, [r7, #4]
    2e9e:	e012      	b.n	2ec6 <button2_handler+0x32>
    {
        val = am_hal_gpio_input_bit_read(AM_BSP_GPIO_BUTTON2);
    2ea0:	4b0e      	ldr	r3, [pc, #56]	; (2edc <button2_handler+0x48>)
    2ea2:	681b      	ldr	r3, [r3, #0]
    2ea4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    2ea8:	2b00      	cmp	r3, #0
    2eaa:	bf14      	ite	ne
    2eac:	2301      	movne	r3, #1
    2eae:	2300      	moveq	r3, #0
    2eb0:	b2db      	uxtb	r3, r3
    2eb2:	603b      	str	r3, [r7, #0]
        if (!val)
    2eb4:	683b      	ldr	r3, [r7, #0]
    2eb6:	2b00      	cmp	r3, #0
    2eb8:	d00c      	beq.n	2ed4 <button2_handler+0x40>
        {
            return; // State not high...must be result of debounce
        }
        am_util_delay_ms(2);
    2eba:	2002      	movs	r0, #2
    2ebc:	f000 f9bc 	bl	3238 <am_util_delay_ms>
    for (count = 0; count < 10; count++)
    2ec0:	687b      	ldr	r3, [r7, #4]
    2ec2:	3301      	adds	r3, #1
    2ec4:	607b      	str	r3, [r7, #4]
    2ec6:	687b      	ldr	r3, [r7, #4]
    2ec8:	2b09      	cmp	r3, #9
    2eca:	d9e9      	bls.n	2ea0 <button2_handler+0xc>
    }

    button_handler(2);
    2ecc:	2002      	movs	r0, #2
    2ece:	f7ff ff69 	bl	2da4 <button_handler>
    2ed2:	e000      	b.n	2ed6 <button2_handler+0x42>
            return; // State not high...must be result of debounce
    2ed4:	bf00      	nop
}
    2ed6:	3708      	adds	r7, #8
    2ed8:	46bd      	mov	sp, r7
    2eda:	bd80      	pop	{r7, pc}
    2edc:	40010080 	.word	0x40010080

00002ee0 <LedTaskSetup>:
// Perform initial setup for the LED task.
//
//*****************************************************************************
void
LedTaskSetup(void)
{
    2ee0:	b580      	push	{r7, lr}
    2ee2:	af00      	add	r7, sp, #0
    am_util_debug_printf("LEDTask: setup\r\n");
    2ee4:	485f      	ldr	r0, [pc, #380]	; (3064 <LedTaskSetup+0x184>)
    2ee6:	f001 f8c5 	bl	4074 <am_util_stdio_printf>

    //
    // Create an event handle for our wake-up events.
    //
    xLedEventHandle = xEventGroupCreate();
    2eea:	f7fd fced 	bl	8c8 <xEventGroupCreate>
    2eee:	4602      	mov	r2, r0
    2ef0:	4b5d      	ldr	r3, [pc, #372]	; (3068 <LedTaskSetup+0x188>)
    2ef2:	601a      	str	r2, [r3, #0]

    //
    // Make sure we actually allocated space for the events we need.
    //
    while (xLedEventHandle == NULL);
    2ef4:	bf00      	nop
    2ef6:	4b5c      	ldr	r3, [pc, #368]	; (3068 <LedTaskSetup+0x188>)
    2ef8:	681b      	ldr	r3, [r3, #0]
    2efa:	2b00      	cmp	r3, #0
    2efc:	d0fb      	beq.n	2ef6 <LedTaskSetup+0x16>

    // Initialize the LEDs
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
    2efe:	2105      	movs	r1, #5
    2f00:	485a      	ldr	r0, [pc, #360]	; (306c <LedTaskSetup+0x18c>)
    2f02:	f7ff fde1 	bl	2ac8 <am_devices_led_array_init>
    am_devices_led_off(am_bsp_psLEDs, 0);
    2f06:	2100      	movs	r1, #0
    2f08:	4858      	ldr	r0, [pc, #352]	; (306c <LedTaskSetup+0x18c>)
    2f0a:	f7ff fdff 	bl	2b0c <am_devices_led_off>
    am_devices_led_off(am_bsp_psLEDs, 1);
    2f0e:	2101      	movs	r1, #1
    2f10:	4856      	ldr	r0, [pc, #344]	; (306c <LedTaskSetup+0x18c>)
    2f12:	f7ff fdfb 	bl	2b0c <am_devices_led_off>
    am_devices_led_off(am_bsp_psLEDs, 2);
    2f16:	2102      	movs	r1, #2
    2f18:	4854      	ldr	r0, [pc, #336]	; (306c <LedTaskSetup+0x18c>)
    2f1a:	f7ff fdf7 	bl	2b0c <am_devices_led_off>
    am_devices_led_off(am_bsp_psLEDs, 3);
    2f1e:	2103      	movs	r1, #3
    2f20:	4852      	ldr	r0, [pc, #328]	; (306c <LedTaskSetup+0x18c>)
    2f22:	f7ff fdf3 	bl	2b0c <am_devices_led_off>
    am_devices_led_off(am_bsp_psLEDs, 4);
    2f26:	2104      	movs	r1, #4
    2f28:	4850      	ldr	r0, [pc, #320]	; (306c <LedTaskSetup+0x18c>)
    2f2a:	f7ff fdef 	bl	2b0c <am_devices_led_off>
    am_hal_interrupt_priority_set(AM_HAL_INTERRUPT_GPIO, configMAX_SYSCALL_INTERRUPT_PRIORITY);
    2f2e:	2180      	movs	r1, #128	; 0x80
    2f30:	2019      	movs	r0, #25
    2f32:	f001 fb7b 	bl	462c <am_hal_interrupt_priority_set>
    //
    // Register interrupt handler for button presses
    //
    am_hal_gpio_int_register(AM_BSP_GPIO_BUTTON0, button0_handler);
    2f36:	494e      	ldr	r1, [pc, #312]	; (3070 <LedTaskSetup+0x190>)
    2f38:	2011      	movs	r0, #17
    2f3a:	f001 fb39 	bl	45b0 <am_hal_gpio_int_register>
    am_hal_gpio_int_register(AM_BSP_GPIO_BUTTON1, button1_handler);
    2f3e:	494d      	ldr	r1, [pc, #308]	; (3074 <LedTaskSetup+0x194>)
    2f40:	2012      	movs	r0, #18
    2f42:	f001 fb35 	bl	45b0 <am_hal_gpio_int_register>
    am_hal_gpio_int_register(AM_BSP_GPIO_BUTTON2, button2_handler);
    2f46:	494c      	ldr	r1, [pc, #304]	; (3078 <LedTaskSetup+0x198>)
    2f48:	2013      	movs	r0, #19
    2f4a:	f001 fb31 	bl	45b0 <am_hal_gpio_int_register>

    am_hal_gpio_pin_config(AM_BSP_GPIO_BUTTON0, AM_HAL_GPIO_INPUT);
    2f4e:	4b4b      	ldr	r3, [pc, #300]	; (307c <LedTaskSetup+0x19c>)
    2f50:	2273      	movs	r2, #115	; 0x73
    2f52:	601a      	str	r2, [r3, #0]
    2f54:	4a4a      	ldr	r2, [pc, #296]	; (3080 <LedTaskSetup+0x1a0>)
    2f56:	4b4a      	ldr	r3, [pc, #296]	; (3080 <LedTaskSetup+0x1a0>)
    2f58:	681b      	ldr	r3, [r3, #0]
    2f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    2f5e:	6013      	str	r3, [r2, #0]
    2f60:	4a48      	ldr	r2, [pc, #288]	; (3084 <LedTaskSetup+0x1a4>)
    2f62:	4b48      	ldr	r3, [pc, #288]	; (3084 <LedTaskSetup+0x1a4>)
    2f64:	681b      	ldr	r3, [r3, #0]
    2f66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
    2f6a:	f443 53d0 	orr.w	r3, r3, #6656	; 0x1a00
    2f6e:	6013      	str	r3, [r2, #0]
    2f70:	4b42      	ldr	r3, [pc, #264]	; (307c <LedTaskSetup+0x19c>)
    2f72:	2200      	movs	r2, #0
    2f74:	601a      	str	r2, [r3, #0]
    am_hal_gpio_pin_config(AM_BSP_GPIO_BUTTON1, AM_HAL_GPIO_INPUT);
    2f76:	4b41      	ldr	r3, [pc, #260]	; (307c <LedTaskSetup+0x19c>)
    2f78:	2273      	movs	r2, #115	; 0x73
    2f7a:	601a      	str	r2, [r3, #0]
    2f7c:	4a40      	ldr	r2, [pc, #256]	; (3080 <LedTaskSetup+0x1a0>)
    2f7e:	4b40      	ldr	r3, [pc, #256]	; (3080 <LedTaskSetup+0x1a0>)
    2f80:	681b      	ldr	r3, [r3, #0]
    2f82:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2f86:	6013      	str	r3, [r2, #0]
    2f88:	4a3e      	ldr	r2, [pc, #248]	; (3084 <LedTaskSetup+0x1a4>)
    2f8a:	4b3e      	ldr	r3, [pc, #248]	; (3084 <LedTaskSetup+0x1a4>)
    2f8c:	681b      	ldr	r3, [r3, #0]
    2f8e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    2f92:	f443 13d0 	orr.w	r3, r3, #1703936	; 0x1a0000
    2f96:	6013      	str	r3, [r2, #0]
    2f98:	4b38      	ldr	r3, [pc, #224]	; (307c <LedTaskSetup+0x19c>)
    2f9a:	2200      	movs	r2, #0
    2f9c:	601a      	str	r2, [r3, #0]
    am_hal_gpio_pin_config(AM_BSP_GPIO_BUTTON2, AM_HAL_GPIO_INPUT);
    2f9e:	4b37      	ldr	r3, [pc, #220]	; (307c <LedTaskSetup+0x19c>)
    2fa0:	2273      	movs	r2, #115	; 0x73
    2fa2:	601a      	str	r2, [r3, #0]
    2fa4:	4a36      	ldr	r2, [pc, #216]	; (3080 <LedTaskSetup+0x1a0>)
    2fa6:	4b36      	ldr	r3, [pc, #216]	; (3080 <LedTaskSetup+0x1a0>)
    2fa8:	681b      	ldr	r3, [r3, #0]
    2faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    2fae:	6013      	str	r3, [r2, #0]
    2fb0:	4a34      	ldr	r2, [pc, #208]	; (3084 <LedTaskSetup+0x1a4>)
    2fb2:	4b34      	ldr	r3, [pc, #208]	; (3084 <LedTaskSetup+0x1a4>)
    2fb4:	681b      	ldr	r3, [r3, #0]
    2fb6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2fba:	f043 53d0 	orr.w	r3, r3, #436207616	; 0x1a000000
    2fbe:	6013      	str	r3, [r2, #0]
    2fc0:	4b2e      	ldr	r3, [pc, #184]	; (307c <LedTaskSetup+0x19c>)
    2fc2:	2200      	movs	r2, #0
    2fc4:	601a      	str	r2, [r3, #0]

    //
    // Configure the GPIO/button interrupt polarity.
    //
    am_hal_gpio_int_polarity_bit_set(AM_BSP_GPIO_BUTTON0, AM_HAL_GPIO_RISING);
    2fc6:	4b2d      	ldr	r3, [pc, #180]	; (307c <LedTaskSetup+0x19c>)
    2fc8:	2273      	movs	r2, #115	; 0x73
    2fca:	601a      	str	r2, [r3, #0]
    2fcc:	4a2c      	ldr	r2, [pc, #176]	; (3080 <LedTaskSetup+0x1a0>)
    2fce:	4b2c      	ldr	r3, [pc, #176]	; (3080 <LedTaskSetup+0x1a0>)
    2fd0:	681b      	ldr	r3, [r3, #0]
    2fd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2fd6:	6013      	str	r3, [r2, #0]
    2fd8:	4b28      	ldr	r3, [pc, #160]	; (307c <LedTaskSetup+0x19c>)
    2fda:	2200      	movs	r2, #0
    2fdc:	601a      	str	r2, [r3, #0]
    am_hal_gpio_int_polarity_bit_set(AM_BSP_GPIO_BUTTON1, AM_HAL_GPIO_RISING);
    2fde:	4b27      	ldr	r3, [pc, #156]	; (307c <LedTaskSetup+0x19c>)
    2fe0:	2273      	movs	r2, #115	; 0x73
    2fe2:	601a      	str	r2, [r3, #0]
    2fe4:	4a26      	ldr	r2, [pc, #152]	; (3080 <LedTaskSetup+0x1a0>)
    2fe6:	4b26      	ldr	r3, [pc, #152]	; (3080 <LedTaskSetup+0x1a0>)
    2fe8:	681b      	ldr	r3, [r3, #0]
    2fea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2fee:	6013      	str	r3, [r2, #0]
    2ff0:	4b22      	ldr	r3, [pc, #136]	; (307c <LedTaskSetup+0x19c>)
    2ff2:	2200      	movs	r2, #0
    2ff4:	601a      	str	r2, [r3, #0]
    am_hal_gpio_int_polarity_bit_set(AM_BSP_GPIO_BUTTON2, AM_HAL_GPIO_RISING);
    2ff6:	4b21      	ldr	r3, [pc, #132]	; (307c <LedTaskSetup+0x19c>)
    2ff8:	2273      	movs	r2, #115	; 0x73
    2ffa:	601a      	str	r2, [r3, #0]
    2ffc:	4a20      	ldr	r2, [pc, #128]	; (3080 <LedTaskSetup+0x1a0>)
    2ffe:	4b20      	ldr	r3, [pc, #128]	; (3080 <LedTaskSetup+0x1a0>)
    3000:	681b      	ldr	r3, [r3, #0]
    3002:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3006:	6013      	str	r3, [r2, #0]
    3008:	4b1c      	ldr	r3, [pc, #112]	; (307c <LedTaskSetup+0x19c>)
    300a:	2200      	movs	r2, #0
    300c:	601a      	str	r2, [r3, #0]

    //
    // Clear the GPIO Interrupt (write to clear).
    //
    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    300e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3012:	f04f 0100 	mov.w	r1, #0
    3016:	f001 fa73 	bl	4500 <am_hal_gpio_int_clear>
    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON1));
    301a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    301e:	f04f 0100 	mov.w	r1, #0
    3022:	f001 fa6d 	bl	4500 <am_hal_gpio_int_clear>
    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON2));
    3026:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    302a:	f04f 0100 	mov.w	r1, #0
    302e:	f001 fa67 	bl	4500 <am_hal_gpio_int_clear>

    //
    // Enable the GPIO/button interrupt.
    //
    am_hal_gpio_int_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON0));
    3032:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3036:	f04f 0100 	mov.w	r1, #0
    303a:	f001 fa51 	bl	44e0 <am_hal_gpio_int_enable>
    am_hal_gpio_int_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON1));
    303e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3042:	f04f 0100 	mov.w	r1, #0
    3046:	f001 fa4b 	bl	44e0 <am_hal_gpio_int_enable>
    am_hal_gpio_int_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BUTTON2));
    304a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    304e:	f04f 0100 	mov.w	r1, #0
    3052:	f001 fa45 	bl	44e0 <am_hal_gpio_int_enable>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_GPIO);
    3056:	2019      	movs	r0, #25
    3058:	f001 fac0 	bl	45dc <am_hal_interrupt_enable>


    //
    // Enable interrupts to the core.
    //
    am_hal_interrupt_master_enable();
    305c:	f001 fb06 	bl	466c <am_hal_interrupt_master_enable>

}
    3060:	bf00      	nop
    3062:	bd80      	pop	{r7, pc}
    3064:	000049e0 	.word	0x000049e0
    3068:	10006570 	.word	0x10006570
    306c:	10002308 	.word	0x10002308
    3070:	00002dfd 	.word	0x00002dfd
    3074:	00002e49 	.word	0x00002e49
    3078:	00002e95 	.word	0x00002e95
    307c:	40010060 	.word	0x40010060
    3080:	40010048 	.word	0x40010048
    3084:	40010010 	.word	0x40010010

00003088 <LedTask>:
// Short Description.
//
//*****************************************************************************
void
LedTask(void *pvParameters)
{
    3088:	b580      	push	{r7, lr}
    308a:	b086      	sub	sp, #24
    308c:	af02      	add	r7, sp, #8
    308e:	6078      	str	r0, [r7, #4]
    while (1)
    {
        //
        // Wait for an event to be posted to the LED Event Handle.
        //
        bitSet = xEventGroupWaitBits(xLedEventHandle, 0x7, pdTRUE,
    3090:	4b14      	ldr	r3, [pc, #80]	; (30e4 <LedTask+0x5c>)
    3092:	6818      	ldr	r0, [r3, #0]
    3094:	f04f 33ff 	mov.w	r3, #4294967295
    3098:	9300      	str	r3, [sp, #0]
    309a:	2300      	movs	r3, #0
    309c:	2201      	movs	r2, #1
    309e:	2107      	movs	r1, #7
    30a0:	f7fd fc2a 	bl	8f8 <xEventGroupWaitBits>
    30a4:	60f8      	str	r0, [r7, #12]
                            pdFALSE, portMAX_DELAY);
        if (bitSet != 0)
    30a6:	68fb      	ldr	r3, [r7, #12]
    30a8:	2b00      	cmp	r3, #0
    30aa:	d0f1      	beq.n	3090 <LedTask+0x8>
        {
            // Button Press Event received
            // Toggle respective LED(s)
            if (bitSet & (1 << 0))
    30ac:	68fb      	ldr	r3, [r7, #12]
    30ae:	f003 0301 	and.w	r3, r3, #1
    30b2:	2b00      	cmp	r3, #0
    30b4:	d003      	beq.n	30be <LedTask+0x36>
            {
                am_devices_led_toggle(am_bsp_psLEDs, 0);
    30b6:	2100      	movs	r1, #0
    30b8:	480b      	ldr	r0, [pc, #44]	; (30e8 <LedTask+0x60>)
    30ba:	f7ff fda7 	bl	2c0c <am_devices_led_toggle>
            }
            if (bitSet & (1 << 1))
    30be:	68fb      	ldr	r3, [r7, #12]
    30c0:	f003 0302 	and.w	r3, r3, #2
    30c4:	2b00      	cmp	r3, #0
    30c6:	d003      	beq.n	30d0 <LedTask+0x48>
            {
                am_devices_led_toggle(am_bsp_psLEDs, 1);
    30c8:	2101      	movs	r1, #1
    30ca:	4807      	ldr	r0, [pc, #28]	; (30e8 <LedTask+0x60>)
    30cc:	f7ff fd9e 	bl	2c0c <am_devices_led_toggle>
            }
            if (bitSet & (1 << 2))
    30d0:	68fb      	ldr	r3, [r7, #12]
    30d2:	f003 0304 	and.w	r3, r3, #4
    30d6:	2b00      	cmp	r3, #0
    30d8:	d0da      	beq.n	3090 <LedTask+0x8>
            {
                am_devices_led_toggle(am_bsp_psLEDs, 2);
    30da:	2102      	movs	r1, #2
    30dc:	4802      	ldr	r0, [pc, #8]	; (30e8 <LedTask+0x60>)
    30de:	f7ff fd95 	bl	2c0c <am_devices_led_toggle>
        bitSet = xEventGroupWaitBits(xLedEventHandle, 0x7, pdTRUE,
    30e2:	e7d5      	b.n	3090 <LedTask+0x8>
    30e4:	10006570 	.word	0x10006570
    30e8:	10002308 	.word	0x10002308

000030ec <am_ctimer_isr>:
// Interrupt handler for the CTIMER module.
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
    30ec:	b580      	push	{r7, lr}
    30ee:	b082      	sub	sp, #8
    30f0:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    //
    // Check the timer interrupt status.
    //
    ui32Status = am_hal_ctimer_int_status_get(false);
    30f2:	2000      	movs	r0, #0
    30f4:	f001 f9ce 	bl	4494 <am_hal_ctimer_int_status_get>
    30f8:	6078      	str	r0, [r7, #4]
    am_hal_ctimer_int_clear(ui32Status);
    30fa:	6878      	ldr	r0, [r7, #4]
    30fc:	f001 f9c4 	bl	4488 <am_hal_ctimer_int_clear>

    //
    // Run handlers for the various possible timer events.
    //
    am_hal_ctimer_int_service(ui32Status);
    3100:	6878      	ldr	r0, [r7, #4]
    3102:	f001 f87d 	bl	4200 <am_hal_ctimer_int_service>
}
    3106:	bf00      	nop
    3108:	3708      	adds	r7, #8
    310a:	46bd      	mov	sp, r7
    310c:	bd80      	pop	{r7, pc}

0000310e <am_freertos_sleep>:
// Return 0 if this function also incorporates the WFI, else return value same
// as idleTime
//
//*****************************************************************************
uint32_t am_freertos_sleep(uint32_t idleTime)
{
    310e:	b580      	push	{r7, lr}
    3110:	b082      	sub	sp, #8
    3112:	af00      	add	r7, sp, #0
    3114:	6078      	str	r0, [r7, #4]
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    3116:	2001      	movs	r0, #1
    3118:	f001 fb9e 	bl	4858 <am_hal_sysctrl_sleep>
    return 0;
    311c:	2300      	movs	r3, #0
}
    311e:	4618      	mov	r0, r3
    3120:	3708      	adds	r7, #8
    3122:	46bd      	mov	sp, r7
    3124:	bd80      	pop	{r7, pc}

00003126 <am_freertos_wakeup>:
// Recovery function called from FreeRTOS IDLE task, after waking up from Sleep
// Do necessary 'wakeup' operations here, e.g. to power up/enable peripherals etc.
//
//*****************************************************************************
void am_freertos_wakeup(uint32_t idleTime)
{
    3126:	b480      	push	{r7}
    3128:	b083      	sub	sp, #12
    312a:	af00      	add	r7, sp, #0
    312c:	6078      	str	r0, [r7, #4]
    return;
    312e:	bf00      	nop
}
    3130:	370c      	adds	r7, #12
    3132:	46bd      	mov	sp, r7
    3134:	f85d 7b04 	ldr.w	r7, [sp], #4
    3138:	4770      	bx	lr

0000313a <vApplicationMallocFailedHook>:
// FreeRTOS debugging functions.
//
//*****************************************************************************
void
vApplicationMallocFailedHook(void)
{
    313a:	b480      	push	{r7}
    313c:	af00      	add	r7, sp, #0
    // free memory available in the FreeRTOS heap.  pvPortMalloc() is called
    // internally by FreeRTOS API functions that create tasks, queues, software
    // timers, and semaphores.  The size of the FreeRTOS heap is set by the
    // configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h.
    //
    while (1);
    313e:	e7fe      	b.n	313e <vApplicationMallocFailedHook+0x4>

00003140 <vApplicationStackOverflowHook>:
}

void
vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
    3140:	b480      	push	{r7}
    3142:	b083      	sub	sp, #12
    3144:	af00      	add	r7, sp, #0
    3146:	6078      	str	r0, [r7, #4]
    3148:	6039      	str	r1, [r7, #0]
    // configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
    // function is called if a stack overflow is detected.
    //
    while (1)
    {
        __asm("BKPT #0\n") ; // Break into the debugger
    314a:	be00      	bkpt	0x0000
    314c:	e7fd      	b.n	314a <vApplicationStackOverflowHook+0xa>
	...

00003150 <setup_task>:
// features.
//
//*****************************************************************************
void
setup_task(void *pvParameters)
{
    3150:	b580      	push	{r7, lr}
    3152:	b084      	sub	sp, #16
    3154:	af02      	add	r7, sp, #8
    3156:	6078      	str	r0, [r7, #4]
    //
    // Print a debug message.
    //
    am_util_debug_printf("Running setup tasks...\r\n");
    3158:	480a      	ldr	r0, [pc, #40]	; (3184 <setup_task+0x34>)
    315a:	f000 ff8b 	bl	4074 <am_util_stdio_printf>

    //
    // Run setup functions.
    //
    LedTaskSetup();
    315e:	f7ff febf 	bl	2ee0 <LedTaskSetup>
    disable_print_interface();
    3162:	f7ff fde5 	bl	2d30 <disable_print_interface>
    //
    // Create the functional tasks
    //
    xTaskCreate(LedTask, "LEDTask", 512, 0, 3, &led_task_handle);
    3166:	4b08      	ldr	r3, [pc, #32]	; (3188 <setup_task+0x38>)
    3168:	9301      	str	r3, [sp, #4]
    316a:	2303      	movs	r3, #3
    316c:	9300      	str	r3, [sp, #0]
    316e:	2300      	movs	r3, #0
    3170:	f44f 7200 	mov.w	r2, #512	; 0x200
    3174:	4905      	ldr	r1, [pc, #20]	; (318c <setup_task+0x3c>)
    3176:	4806      	ldr	r0, [pc, #24]	; (3190 <setup_task+0x40>)
    3178:	f7fe f9d2 	bl	1520 <xTaskCreate>
    //
    // The setup operations are complete, so suspend the setup task now.
    //
    vTaskSuspend(NULL);
    317c:	2000      	movs	r0, #0
    317e:	f7fe faf3 	bl	1768 <vTaskSuspend>

    while (1);
    3182:	e7fe      	b.n	3182 <setup_task+0x32>
    3184:	000049f4 	.word	0x000049f4
    3188:	10006574 	.word	0x10006574
    318c:	00004a10 	.word	0x00004a10
    3190:	00003089 	.word	0x00003089

00003194 <run_tasks>:
// Initializes all tasks
//
//*****************************************************************************
void
run_tasks(void)
{
    3194:	b580      	push	{r7, lr}
    3196:	b082      	sub	sp, #8
    3198:	af02      	add	r7, sp, #8
    //

    //
    // Create essential tasks.
    //
    xTaskCreate(setup_task, "Setup", 128, 0, 3, &xSetupTask);
    319a:	4b07      	ldr	r3, [pc, #28]	; (31b8 <run_tasks+0x24>)
    319c:	9301      	str	r3, [sp, #4]
    319e:	2303      	movs	r3, #3
    31a0:	9300      	str	r3, [sp, #0]
    31a2:	2300      	movs	r3, #0
    31a4:	2280      	movs	r2, #128	; 0x80
    31a6:	4905      	ldr	r1, [pc, #20]	; (31bc <run_tasks+0x28>)
    31a8:	4805      	ldr	r0, [pc, #20]	; (31c0 <run_tasks+0x2c>)
    31aa:	f7fe f9b9 	bl	1520 <xTaskCreate>


    //
    // Start the scheduler.
    //
    vTaskStartScheduler();
    31ae:	f7fe fb3d 	bl	182c <vTaskStartScheduler>
}
    31b2:	bf00      	nop
    31b4:	46bd      	mov	sp, r7
    31b6:	bd80      	pop	{r7, pc}
    31b8:	10006578 	.word	0x10006578
    31bc:	00004a18 	.word	0x00004a18
    31c0:	00003151 	.word	0x00003151

000031c4 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    31c4:	4811      	ldr	r0, [pc, #68]	; (320c <zero_loop+0x12>)
    31c6:	4912      	ldr	r1, [pc, #72]	; (3210 <zero_loop+0x16>)
    31c8:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    31ca:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    31ce:	4811      	ldr	r0, [pc, #68]	; (3214 <zero_loop+0x1a>)
    31d0:	6801      	ldr	r1, [r0, #0]
    31d2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    31d6:	6001      	str	r1, [r0, #0]
    31d8:	f3bf 8f4f 	dsb	sy
    31dc:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    31e0:	480d      	ldr	r0, [pc, #52]	; (3218 <zero_loop+0x1e>)
    31e2:	490e      	ldr	r1, [pc, #56]	; (321c <zero_loop+0x22>)
    31e4:	4a0e      	ldr	r2, [pc, #56]	; (3220 <zero_loop+0x26>)

000031e6 <copy_loop>:
    31e6:	f850 3b04 	ldr.w	r3, [r0], #4
    31ea:	f841 3b04 	str.w	r3, [r1], #4
    31ee:	4291      	cmp	r1, r2
    31f0:	dbf9      	blt.n	31e6 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    31f2:	480c      	ldr	r0, [pc, #48]	; (3224 <zero_loop+0x2a>)
    31f4:	490c      	ldr	r1, [pc, #48]	; (3228 <zero_loop+0x2e>)
    31f6:	f04f 0200 	mov.w	r2, #0

000031fa <zero_loop>:
    31fa:	4288      	cmp	r0, r1
    31fc:	bfb8      	it	lt
    31fe:	f840 2b04 	strlt.w	r2, [r0], #4
    3202:	dbfa      	blt.n	31fa <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    3204:	f7ff fd9c 	bl	2d40 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    3208:	be00      	bkpt	0x0000
}
    320a:	bf00      	nop
    320c:	e000ed08 	.word	0xe000ed08
    3210:	00000000 	.word	0x00000000
    3214:	e000ed88 	.word	0xe000ed88
    3218:	00004afc 	.word	0x00004afc
    321c:	10002300 	.word	0x10002300
    3220:	10002330 	.word	0x10002330
    3224:	10002330 	.word	0x10002330
    3228:	100066a0 	.word	0x100066a0

0000322c <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
    322c:	b480      	push	{r7}
    322e:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    3230:	e7fe      	b.n	3230 <am_nmi_isr+0x4>

00003232 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    3232:	b480      	push	{r7}
    3234:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    3236:	e7fe      	b.n	3236 <am_adc_isr+0x4>

00003238 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    3238:	b580      	push	{r7, lr}
    323a:	b084      	sub	sp, #16
    323c:	af00      	add	r7, sp, #0
    323e:	6078      	str	r0, [r7, #4]
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
    3240:	f000 ffb6 	bl	41b0 <am_hal_clkgen_sysclk_get>
    3244:	60f8      	str	r0, [r7, #12]
#endif
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    3246:	68fb      	ldr	r3, [r7, #12]
    3248:	4a07      	ldr	r2, [pc, #28]	; (3268 <am_util_delay_ms+0x30>)
    324a:	fba2 2303 	umull	r2, r3, r2, r3
    324e:	099b      	lsrs	r3, r3, #6
    3250:	687a      	ldr	r2, [r7, #4]
    3252:	fb02 f303 	mul.w	r3, r2, r3
    3256:	60bb      	str	r3, [r7, #8]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    3258:	68b8      	ldr	r0, [r7, #8]
    325a:	f001 f92b 	bl	44b4 <am_hal_flash_delay>
}
    325e:	bf00      	nop
    3260:	3710      	adds	r7, #16
    3262:	46bd      	mov	sp, r7
    3264:	bd80      	pop	{r7, pc}
    3266:	bf00      	nop
    3268:	057619f1 	.word	0x057619f1

0000326c <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
    326c:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
    326e:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
    3270:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    3272:	f000 f809 	bl	3288 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
    3276:	bd01      	pop	{r0, pc}
}
    3278:	bf00      	nop
    327a:	4618      	mov	r0, r3

0000327c <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    327c:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    327e:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    3280:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    3282:	4770      	bx	lr
}
    3284:	bf00      	nop
    3286:	4618      	mov	r0, r3

00003288 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    3288:	b580      	push	{r7, lr}
    328a:	b096      	sub	sp, #88	; 0x58
    328c:	af00      	add	r7, sp, #0
    328e:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    3290:	f107 030c 	add.w	r3, r7, #12
    3294:	2200      	movs	r2, #0
    3296:	601a      	str	r2, [r3, #0]
    3298:	605a      	str	r2, [r3, #4]
    329a:	609a      	str	r2, [r3, #8]
    329c:	60da      	str	r2, [r3, #12]
    329e:	611a      	str	r2, [r3, #16]
    32a0:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    32a2:	2300      	movs	r3, #0
    32a4:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    32a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    32a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    32aa:	4b2e      	ldr	r3, [pc, #184]	; (3364 <am_util_faultisr_collect_data+0xdc>)
    32ac:	681b      	ldr	r3, [r3, #0]
    32ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    32b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    32b2:	b2db      	uxtb	r3, r3
    32b4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    32b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    32ba:	0a1b      	lsrs	r3, r3, #8
    32bc:	b2db      	uxtb	r3, r3
    32be:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    32c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    32c4:	0c1b      	lsrs	r3, r3, #16
    32c6:	b29b      	uxth	r3, r3
    32c8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    32cc:	4b26      	ldr	r3, [pc, #152]	; (3368 <am_util_faultisr_collect_data+0xe0>)
    32ce:	681b      	ldr	r3, [r3, #0]
    32d0:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    32d2:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    32d6:	b2db      	uxtb	r3, r3
    32d8:	f003 0302 	and.w	r3, r3, #2
    32dc:	2b00      	cmp	r3, #0
    32de:	d005      	beq.n	32ec <am_util_faultisr_collect_data+0x64>
    32e0:	6879      	ldr	r1, [r7, #4]
    32e2:	2006      	movs	r0, #6
    32e4:	f7ff ffca 	bl	327c <getStackedReg>
    32e8:	4603      	mov	r3, r0
    32ea:	e001      	b.n	32f0 <am_util_faultisr_collect_data+0x68>
    32ec:	f04f 33ff 	mov.w	r3, #4294967295
    32f0:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    32f2:	6879      	ldr	r1, [r7, #4]
    32f4:	2000      	movs	r0, #0
    32f6:	f7ff ffc1 	bl	327c <getStackedReg>
    32fa:	4603      	mov	r3, r0
    32fc:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    32fe:	6879      	ldr	r1, [r7, #4]
    3300:	2001      	movs	r0, #1
    3302:	f7ff ffbb 	bl	327c <getStackedReg>
    3306:	4603      	mov	r3, r0
    3308:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    330a:	6879      	ldr	r1, [r7, #4]
    330c:	2002      	movs	r0, #2
    330e:	f7ff ffb5 	bl	327c <getStackedReg>
    3312:	4603      	mov	r3, r0
    3314:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    3316:	6879      	ldr	r1, [r7, #4]
    3318:	2003      	movs	r0, #3
    331a:	f7ff ffaf 	bl	327c <getStackedReg>
    331e:	4603      	mov	r3, r0
    3320:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    3322:	6879      	ldr	r1, [r7, #4]
    3324:	2004      	movs	r0, #4
    3326:	f7ff ffa9 	bl	327c <getStackedReg>
    332a:	4603      	mov	r3, r0
    332c:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    332e:	6879      	ldr	r1, [r7, #4]
    3330:	2005      	movs	r0, #5
    3332:	f7ff ffa3 	bl	327c <getStackedReg>
    3336:	4603      	mov	r3, r0
    3338:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    333a:	6879      	ldr	r1, [r7, #4]
    333c:	2006      	movs	r0, #6
    333e:	f7ff ff9d 	bl	327c <getStackedReg>
    3342:	4603      	mov	r3, r0
    3344:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    3346:	6879      	ldr	r1, [r7, #4]
    3348:	2007      	movs	r0, #7
    334a:	f7ff ff97 	bl	327c <getStackedReg>
    334e:	4603      	mov	r3, r0
    3350:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
    3352:	f107 030c 	add.w	r3, r7, #12
    3356:	4618      	mov	r0, r3
    3358:	f001 fa16 	bl	4788 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
    335c:	2300      	movs	r3, #0
    335e:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    3360:	e7fe      	b.n	3360 <am_util_faultisr_collect_data+0xd8>
    3362:	bf00      	nop
    3364:	e000ed28 	.word	0xe000ed28
    3368:	e000ed38 	.word	0xe000ed38

0000336c <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    336c:	b480      	push	{r7}
    336e:	b083      	sub	sp, #12
    3370:	af00      	add	r7, sp, #0
    3372:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    3374:	4a04      	ldr	r2, [pc, #16]	; (3388 <am_util_stdio_printf_init+0x1c>)
    3376:	687b      	ldr	r3, [r7, #4]
    3378:	6013      	str	r3, [r2, #0]
}
    337a:	bf00      	nop
    337c:	370c      	adds	r7, #12
    337e:	46bd      	mov	sp, r7
    3380:	f85d 7b04 	ldr.w	r7, [sp], #4
    3384:	4770      	bx	lr
    3386:	bf00      	nop
    3388:	1000657c 	.word	0x1000657c

0000338c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    338c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    3390:	b096      	sub	sp, #88	; 0x58
    3392:	af00      	add	r7, sp, #0
    3394:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    3398:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    339c:	0025      	movs	r5, r4
    339e:	2600      	movs	r6, #0
    33a0:	ea55 0306 	orrs.w	r3, r5, r6
    33a4:	f000 80a0 	beq.w	34e8 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    33a8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    33ac:	0862      	lsrs	r2, r4, #1
    33ae:	ea4f 0133 	mov.w	r1, r3, rrx
    33b2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    33b6:	ea4f 0893 	mov.w	r8, r3, lsr #2
    33ba:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
    33be:	ea4f 0994 	mov.w	r9, r4, lsr #2
    33c2:	eb11 0308 	adds.w	r3, r1, r8
    33c6:	eb42 0409 	adc.w	r4, r2, r9
    33ca:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
    33ce:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    33d2:	ea4f 1a13 	mov.w	sl, r3, lsr #4
    33d6:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
    33da:	ea4f 1b14 	mov.w	fp, r4, lsr #4
    33de:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    33e2:	eb13 030a 	adds.w	r3, r3, sl
    33e6:	eb44 040b 	adc.w	r4, r4, fp
    33ea:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
    33ee:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    33f2:	0a1a      	lsrs	r2, r3, #8
    33f4:	62ba      	str	r2, [r7, #40]	; 0x28
    33f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    33f8:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    33fc:	62ba      	str	r2, [r7, #40]	; 0x28
    33fe:	0a23      	lsrs	r3, r4, #8
    3400:	62fb      	str	r3, [r7, #44]	; 0x2c
    3402:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    3406:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
    340a:	18c9      	adds	r1, r1, r3
    340c:	eb42 0204 	adc.w	r2, r2, r4
    3410:	460b      	mov	r3, r1
    3412:	4614      	mov	r4, r2
    3414:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
    3418:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    341c:	0c1a      	lsrs	r2, r3, #16
    341e:	623a      	str	r2, [r7, #32]
    3420:	6a3a      	ldr	r2, [r7, #32]
    3422:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    3426:	623a      	str	r2, [r7, #32]
    3428:	0c23      	lsrs	r3, r4, #16
    342a:	627b      	str	r3, [r7, #36]	; 0x24
    342c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    3430:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
    3434:	18c9      	adds	r1, r1, r3
    3436:	eb42 0204 	adc.w	r2, r2, r4
    343a:	460b      	mov	r3, r1
    343c:	4614      	mov	r4, r2
    343e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
    3442:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    3446:	0023      	movs	r3, r4
    3448:	603b      	str	r3, [r7, #0]
    344a:	2300      	movs	r3, #0
    344c:	607b      	str	r3, [r7, #4]
    344e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    3452:	e897 0006 	ldmia.w	r7, {r1, r2}
    3456:	18c9      	adds	r1, r1, r3
    3458:	eb42 0204 	adc.w	r2, r2, r4
    345c:	460b      	mov	r3, r1
    345e:	4614      	mov	r4, r2
    3460:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
    3464:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    3468:	08da      	lsrs	r2, r3, #3
    346a:	613a      	str	r2, [r7, #16]
    346c:	693a      	ldr	r2, [r7, #16]
    346e:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
    3472:	613a      	str	r2, [r7, #16]
    3474:	08e3      	lsrs	r3, r4, #3
    3476:	617b      	str	r3, [r7, #20]
    3478:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    347c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
    3480:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    3484:	460b      	mov	r3, r1
    3486:	4614      	mov	r4, r2
    3488:	00a0      	lsls	r0, r4, #2
    348a:	60f8      	str	r0, [r7, #12]
    348c:	68f8      	ldr	r0, [r7, #12]
    348e:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    3492:	60f8      	str	r0, [r7, #12]
    3494:	009b      	lsls	r3, r3, #2
    3496:	60bb      	str	r3, [r7, #8]
    3498:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    349c:	185b      	adds	r3, r3, r1
    349e:	eb44 0402 	adc.w	r4, r4, r2
    34a2:	18db      	adds	r3, r3, r3
    34a4:	eb44 0404 	adc.w	r4, r4, r4
    34a8:	4619      	mov	r1, r3
    34aa:	4622      	mov	r2, r4
    34ac:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    34b0:	1a5b      	subs	r3, r3, r1
    34b2:	eb64 0402 	sbc.w	r4, r4, r2
    34b6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
    34ba:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    34be:	3306      	adds	r3, #6
    34c0:	f144 0400 	adc.w	r4, r4, #0
    34c4:	091a      	lsrs	r2, r3, #4
    34c6:	61ba      	str	r2, [r7, #24]
    34c8:	69ba      	ldr	r2, [r7, #24]
    34ca:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
    34ce:	61ba      	str	r2, [r7, #24]
    34d0:	0923      	lsrs	r3, r4, #4
    34d2:	61fb      	str	r3, [r7, #28]
    34d4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    34d8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    34dc:	18c9      	adds	r1, r1, r3
    34de:	eb42 0204 	adc.w	r2, r2, r4
    34e2:	460b      	mov	r3, r1
    34e4:	4614      	mov	r4, r2
    34e6:	e029      	b.n	353c <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    34e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    34ea:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
    34ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    34ee:	085a      	lsrs	r2, r3, #1
    34f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    34f2:	089b      	lsrs	r3, r3, #2
    34f4:	4413      	add	r3, r2
    34f6:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
    34f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    34fa:	091b      	lsrs	r3, r3, #4
    34fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    34fe:	4413      	add	r3, r2
    3500:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
    3502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3504:	0a1b      	lsrs	r3, r3, #8
    3506:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3508:	4413      	add	r3, r2
    350a:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
    350c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    350e:	0c1b      	lsrs	r3, r3, #16
    3510:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3512:	4413      	add	r3, r2
    3514:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
    3516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3518:	08db      	lsrs	r3, r3, #3
    351a:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
    351c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    351e:	4613      	mov	r3, r2
    3520:	009b      	lsls	r3, r3, #2
    3522:	4413      	add	r3, r2
    3524:	005b      	lsls	r3, r3, #1
    3526:	461a      	mov	r2, r3
    3528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    352a:	1a9b      	subs	r3, r3, r2
    352c:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    352e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3530:	3306      	adds	r3, #6
    3532:	091a      	lsrs	r2, r3, #4
    3534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3536:	4413      	add	r3, r2
    3538:	f04f 0400 	mov.w	r4, #0
    }
}
    353c:	4618      	mov	r0, r3
    353e:	4621      	mov	r1, r4
    3540:	3758      	adds	r7, #88	; 0x58
    3542:	46bd      	mov	sp, r7
    3544:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    3548:	4770      	bx	lr

0000354a <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    354a:	b590      	push	{r4, r7, lr}
    354c:	b085      	sub	sp, #20
    354e:	af00      	add	r7, sp, #0
    3550:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    3554:	683a      	ldr	r2, [r7, #0]
    3556:	687b      	ldr	r3, [r7, #4]
    3558:	4313      	orrs	r3, r2
    355a:	2b00      	cmp	r3, #0
    355c:	bf0c      	ite	eq
    355e:	2301      	moveq	r3, #1
    3560:	2300      	movne	r3, #0
    3562:	b2db      	uxtb	r3, r3
    3564:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    3566:	e008      	b.n	357a <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    3568:	e9d7 0100 	ldrd	r0, r1, [r7]
    356c:	f7ff ff0e 	bl	338c <divu64_10>
    3570:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    3574:	68fb      	ldr	r3, [r7, #12]
    3576:	3301      	adds	r3, #1
    3578:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    357a:	e897 0018 	ldmia.w	r7, {r3, r4}
    357e:	4323      	orrs	r3, r4
    3580:	d1f2      	bne.n	3568 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    3582:	68fb      	ldr	r3, [r7, #12]
}
    3584:	4618      	mov	r0, r3
    3586:	3714      	adds	r7, #20
    3588:	46bd      	mov	sp, r7
    358a:	bd90      	pop	{r4, r7, pc}

0000358c <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    358c:	b590      	push	{r4, r7, lr}
    358e:	b083      	sub	sp, #12
    3590:	af00      	add	r7, sp, #0
    3592:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    3596:	e897 0018 	ldmia.w	r7, {r3, r4}
    359a:	2b00      	cmp	r3, #0
    359c:	f174 0300 	sbcs.w	r3, r4, #0
    35a0:	da06      	bge.n	35b0 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    35a2:	e897 0018 	ldmia.w	r7, {r3, r4}
    35a6:	425b      	negs	r3, r3
    35a8:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    35ac:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
    35b0:	e897 0018 	ldmia.w	r7, {r3, r4}
    35b4:	4618      	mov	r0, r3
    35b6:	4621      	mov	r1, r4
    35b8:	f7ff ffc7 	bl	354a <ndigits_in_u64>
    35bc:	4603      	mov	r3, r0
}
    35be:	4618      	mov	r0, r3
    35c0:	370c      	adds	r7, #12
    35c2:	46bd      	mov	sp, r7
    35c4:	bd90      	pop	{r4, r7, pc}

000035c6 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    35c6:	b490      	push	{r4, r7}
    35c8:	b084      	sub	sp, #16
    35ca:	af00      	add	r7, sp, #0
    35cc:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    35d0:	6839      	ldr	r1, [r7, #0]
    35d2:	687a      	ldr	r2, [r7, #4]
    35d4:	430a      	orrs	r2, r1
    35d6:	2a00      	cmp	r2, #0
    35d8:	bf0c      	ite	eq
    35da:	2201      	moveq	r2, #1
    35dc:	2200      	movne	r2, #0
    35de:	b2d2      	uxtb	r2, r2
    35e0:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
    35e2:	e00a      	b.n	35fa <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
    35e4:	e897 0006 	ldmia.w	r7, {r1, r2}
    35e8:	090b      	lsrs	r3, r1, #4
    35ea:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    35ee:	0914      	lsrs	r4, r2, #4
    35f0:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
    35f4:	68fa      	ldr	r2, [r7, #12]
    35f6:	3201      	adds	r2, #1
    35f8:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
    35fa:	e897 0006 	ldmia.w	r7, {r1, r2}
    35fe:	430a      	orrs	r2, r1
    3600:	d1f0      	bne.n	35e4 <ndigits_in_hex+0x1e>
    }

    return iDigits;
    3602:	68fb      	ldr	r3, [r7, #12]
}
    3604:	4618      	mov	r0, r3
    3606:	3710      	adds	r7, #16
    3608:	46bd      	mov	sp, r7
    360a:	bc90      	pop	{r4, r7}
    360c:	4770      	bx	lr

0000360e <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    360e:	b480      	push	{r7}
    3610:	b087      	sub	sp, #28
    3612:	af00      	add	r7, sp, #0
    3614:	6078      	str	r0, [r7, #4]
    3616:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    3618:	2300      	movs	r3, #0
    361a:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    361c:	2300      	movs	r3, #0
    361e:	613b      	str	r3, [r7, #16]
    3620:	2300      	movs	r3, #0
    3622:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    3624:	687b      	ldr	r3, [r7, #4]
    3626:	781b      	ldrb	r3, [r3, #0]
    3628:	2b2d      	cmp	r3, #45	; 0x2d
    362a:	d11b      	bne.n	3664 <decstr_to_int+0x56>
    {
        bNeg = true;
    362c:	2301      	movs	r3, #1
    362e:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    3630:	687b      	ldr	r3, [r7, #4]
    3632:	3301      	adds	r3, #1
    3634:	607b      	str	r3, [r7, #4]
        uCnt++;
    3636:	68fb      	ldr	r3, [r7, #12]
    3638:	3301      	adds	r3, #1
    363a:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    363c:	e012      	b.n	3664 <decstr_to_int+0x56>
    {
        ++uCnt;
    363e:	68fb      	ldr	r3, [r7, #12]
    3640:	3301      	adds	r3, #1
    3642:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    3644:	693a      	ldr	r2, [r7, #16]
    3646:	4613      	mov	r3, r2
    3648:	009b      	lsls	r3, r3, #2
    364a:	4413      	add	r3, r2
    364c:	005b      	lsls	r3, r3, #1
    364e:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    3650:	687b      	ldr	r3, [r7, #4]
    3652:	781b      	ldrb	r3, [r3, #0]
    3654:	461a      	mov	r2, r3
    3656:	693b      	ldr	r3, [r7, #16]
    3658:	4413      	add	r3, r2
    365a:	3b30      	subs	r3, #48	; 0x30
    365c:	613b      	str	r3, [r7, #16]
        pcStr++;
    365e:	687b      	ldr	r3, [r7, #4]
    3660:	3301      	adds	r3, #1
    3662:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    3664:	687b      	ldr	r3, [r7, #4]
    3666:	781b      	ldrb	r3, [r3, #0]
    3668:	2b2f      	cmp	r3, #47	; 0x2f
    366a:	d903      	bls.n	3674 <decstr_to_int+0x66>
    366c:	687b      	ldr	r3, [r7, #4]
    366e:	781b      	ldrb	r3, [r3, #0]
    3670:	2b39      	cmp	r3, #57	; 0x39
    3672:	d9e4      	bls.n	363e <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    3674:	683b      	ldr	r3, [r7, #0]
    3676:	2b00      	cmp	r3, #0
    3678:	d002      	beq.n	3680 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    367a:	683b      	ldr	r3, [r7, #0]
    367c:	68fa      	ldr	r2, [r7, #12]
    367e:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    3680:	7dfb      	ldrb	r3, [r7, #23]
    3682:	2b00      	cmp	r3, #0
    3684:	d002      	beq.n	368c <decstr_to_int+0x7e>
    3686:	693b      	ldr	r3, [r7, #16]
    3688:	425b      	negs	r3, r3
    368a:	e000      	b.n	368e <decstr_to_int+0x80>
    368c:	693b      	ldr	r3, [r7, #16]
}
    368e:	4618      	mov	r0, r3
    3690:	371c      	adds	r7, #28
    3692:	46bd      	mov	sp, r7
    3694:	f85d 7b04 	ldr.w	r7, [sp], #4
    3698:	4770      	bx	lr

0000369a <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    369a:	b590      	push	{r4, r7, lr}
    369c:	b091      	sub	sp, #68	; 0x44
    369e:	af00      	add	r7, sp, #0
    36a0:	e9c7 0102 	strd	r0, r1, [r7, #8]
    36a4:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    36a6:	2300      	movs	r3, #0
    36a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    36aa:	2300      	movs	r3, #0
    36ac:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    36ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    36b2:	f7ff fe6b 	bl	338c <divu64_10>
    36b6:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    36ba:	68b9      	ldr	r1, [r7, #8]
    36bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    36be:	4613      	mov	r3, r2
    36c0:	009b      	lsls	r3, r3, #2
    36c2:	4413      	add	r3, r2
    36c4:	005b      	lsls	r3, r3, #1
    36c6:	1acb      	subs	r3, r1, r3
    36c8:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    36ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    36cc:	1c5a      	adds	r2, r3, #1
    36ce:	63fa      	str	r2, [r7, #60]	; 0x3c
    36d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    36d2:	b2d2      	uxtb	r2, r2
    36d4:	3230      	adds	r2, #48	; 0x30
    36d6:	b2d2      	uxtb	r2, r2
    36d8:	f107 0140 	add.w	r1, r7, #64	; 0x40
    36dc:	440b      	add	r3, r1
    36de:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    36e2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    36e6:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    36ea:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    36ee:	4323      	orrs	r3, r4
    36f0:	d1dd      	bne.n	36ae <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    36f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    36f4:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    36f6:	687b      	ldr	r3, [r7, #4]
    36f8:	2b00      	cmp	r3, #0
    36fa:	d011      	beq.n	3720 <uint64_to_str+0x86>
    {
        while ( ix-- )
    36fc:	e008      	b.n	3710 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    36fe:	687b      	ldr	r3, [r7, #4]
    3700:	1c5a      	adds	r2, r3, #1
    3702:	607a      	str	r2, [r7, #4]
    3704:	f107 0110 	add.w	r1, r7, #16
    3708:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    370a:	440a      	add	r2, r1
    370c:	7812      	ldrb	r2, [r2, #0]
    370e:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    3710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3712:	1e5a      	subs	r2, r3, #1
    3714:	63fa      	str	r2, [r7, #60]	; 0x3c
    3716:	2b00      	cmp	r3, #0
    3718:	d1f1      	bne.n	36fe <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    371a:	687b      	ldr	r3, [r7, #4]
    371c:	2200      	movs	r2, #0
    371e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    3720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    3722:	4618      	mov	r0, r3
    3724:	3744      	adds	r7, #68	; 0x44
    3726:	46bd      	mov	sp, r7
    3728:	bd90      	pop	{r4, r7, pc}

0000372a <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    372a:	b4b0      	push	{r4, r5, r7}
    372c:	b08d      	sub	sp, #52	; 0x34
    372e:	af00      	add	r7, sp, #0
    3730:	e9c7 0102 	strd	r0, r1, [r7, #8]
    3734:	607a      	str	r2, [r7, #4]
    3736:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    3738:	2300      	movs	r3, #0
    373a:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    373c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    3740:	4313      	orrs	r3, r2
    3742:	d131      	bne.n	37a8 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
    3744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3746:	1c5a      	adds	r2, r3, #1
    3748:	62fa      	str	r2, [r7, #44]	; 0x2c
    374a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    374e:	4413      	add	r3, r2
    3750:	2230      	movs	r2, #48	; 0x30
    3752:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    3756:	e027      	b.n	37a8 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
    3758:	7a3b      	ldrb	r3, [r7, #8]
    375a:	f003 030f 	and.w	r3, r3, #15
    375e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    3762:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    3766:	2b09      	cmp	r3, #9
    3768:	d90a      	bls.n	3780 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    376a:	78fb      	ldrb	r3, [r7, #3]
    376c:	2b00      	cmp	r3, #0
    376e:	d001      	beq.n	3774 <uint64_to_hexstr+0x4a>
    3770:	2227      	movs	r2, #39	; 0x27
    3772:	e000      	b.n	3776 <uint64_to_hexstr+0x4c>
    3774:	2207      	movs	r2, #7
    3776:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    377a:	4413      	add	r3, r2
    377c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    3780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3782:	1c5a      	adds	r2, r3, #1
    3784:	62fa      	str	r2, [r7, #44]	; 0x2c
    3786:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    378a:	3230      	adds	r2, #48	; 0x30
    378c:	b2d2      	uxtb	r2, r2
    378e:	f107 0130 	add.w	r1, r7, #48	; 0x30
    3792:	440b      	add	r3, r1
    3794:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    3798:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    379c:	0914      	lsrs	r4, r2, #4
    379e:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    37a2:	091d      	lsrs	r5, r3, #4
    37a4:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
    37a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    37ac:	4313      	orrs	r3, r2
    37ae:	d1d3      	bne.n	3758 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    37b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    37b2:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    37b4:	687b      	ldr	r3, [r7, #4]
    37b6:	2b00      	cmp	r3, #0
    37b8:	d011      	beq.n	37de <uint64_to_hexstr+0xb4>
    {
        while (ix--)
    37ba:	e008      	b.n	37ce <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
    37bc:	687b      	ldr	r3, [r7, #4]
    37be:	1c5a      	adds	r2, r3, #1
    37c0:	607a      	str	r2, [r7, #4]
    37c2:	f107 0110 	add.w	r1, r7, #16
    37c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    37c8:	440a      	add	r2, r1
    37ca:	7812      	ldrb	r2, [r2, #0]
    37cc:	701a      	strb	r2, [r3, #0]
        while (ix--)
    37ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    37d0:	1e5a      	subs	r2, r3, #1
    37d2:	62fa      	str	r2, [r7, #44]	; 0x2c
    37d4:	2b00      	cmp	r3, #0
    37d6:	d1f1      	bne.n	37bc <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    37d8:	687b      	ldr	r3, [r7, #4]
    37da:	2200      	movs	r2, #0
    37dc:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    37de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    37e0:	4618      	mov	r0, r3
    37e2:	3734      	adds	r7, #52	; 0x34
    37e4:	46bd      	mov	sp, r7
    37e6:	bcb0      	pop	{r4, r5, r7}
    37e8:	4770      	bx	lr

000037ea <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    37ea:	b480      	push	{r7}
    37ec:	b085      	sub	sp, #20
    37ee:	af00      	add	r7, sp, #0
    37f0:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    37f2:	2300      	movs	r3, #0
    37f4:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    37f6:	687b      	ldr	r3, [r7, #4]
    37f8:	2b00      	cmp	r3, #0
    37fa:	d104      	bne.n	3806 <simple_strlen+0x1c>
    {
        return ui32RetVal;
    37fc:	68fb      	ldr	r3, [r7, #12]
    37fe:	e009      	b.n	3814 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    3800:	68fb      	ldr	r3, [r7, #12]
    3802:	3301      	adds	r3, #1
    3804:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    3806:	687b      	ldr	r3, [r7, #4]
    3808:	1c5a      	adds	r2, r3, #1
    380a:	607a      	str	r2, [r7, #4]
    380c:	781b      	ldrb	r3, [r3, #0]
    380e:	2b00      	cmp	r3, #0
    3810:	d1f6      	bne.n	3800 <simple_strlen+0x16>
    }
    return ui32RetVal;
    3812:	68fb      	ldr	r3, [r7, #12]
}
    3814:	4618      	mov	r0, r3
    3816:	3714      	adds	r7, #20
    3818:	46bd      	mov	sp, r7
    381a:	f85d 7b04 	ldr.w	r7, [sp], #4
    381e:	4770      	bx	lr

00003820 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    3820:	b480      	push	{r7}
    3822:	b087      	sub	sp, #28
    3824:	af00      	add	r7, sp, #0
    3826:	60f8      	str	r0, [r7, #12]
    3828:	460b      	mov	r3, r1
    382a:	607a      	str	r2, [r7, #4]
    382c:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    382e:	2300      	movs	r3, #0
    3830:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    3832:	687b      	ldr	r3, [r7, #4]
    3834:	2b00      	cmp	r3, #0
    3836:	dc0c      	bgt.n	3852 <padbuffer+0x32>
    {
        return i32Cnt;
    3838:	697b      	ldr	r3, [r7, #20]
    383a:	e010      	b.n	385e <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    383c:	68fb      	ldr	r3, [r7, #12]
    383e:	2b00      	cmp	r3, #0
    3840:	d004      	beq.n	384c <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    3842:	68fb      	ldr	r3, [r7, #12]
    3844:	1c5a      	adds	r2, r3, #1
    3846:	60fa      	str	r2, [r7, #12]
    3848:	7afa      	ldrb	r2, [r7, #11]
    384a:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    384c:	697b      	ldr	r3, [r7, #20]
    384e:	3301      	adds	r3, #1
    3850:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    3852:	687b      	ldr	r3, [r7, #4]
    3854:	1e5a      	subs	r2, r3, #1
    3856:	607a      	str	r2, [r7, #4]
    3858:	2b00      	cmp	r3, #0
    385a:	d1ef      	bne.n	383c <padbuffer+0x1c>
    }

    return i32Cnt;
    385c:	697b      	ldr	r3, [r7, #20]
}
    385e:	4618      	mov	r0, r3
    3860:	371c      	adds	r7, #28
    3862:	46bd      	mov	sp, r7
    3864:	f85d 7b04 	ldr.w	r7, [sp], #4
    3868:	4770      	bx	lr
	...

0000386c <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    386c:	b590      	push	{r4, r7, lr}
    386e:	b08f      	sub	sp, #60	; 0x3c
    3870:	af00      	add	r7, sp, #0
    3872:	60f8      	str	r0, [r7, #12]
    3874:	60b9      	str	r1, [r7, #8]
    3876:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    3878:	68bb      	ldr	r3, [r7, #8]
    387a:	681b      	ldr	r3, [r3, #0]
    387c:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3880:	2b03      	cmp	r3, #3
    3882:	dc02      	bgt.n	388a <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    3884:	f06f 0302 	mvn.w	r3, #2
    3888:	e0e7      	b.n	3a5a <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
    388a:	edd7 7a03 	vldr	s15, [r7, #12]
    388e:	eef5 7a40 	vcmp.f32	s15, #0.0
    3892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3896:	d104      	bne.n	38a2 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    3898:	68bb      	ldr	r3, [r7, #8]
    389a:	4a72      	ldr	r2, [pc, #456]	; (3a64 <ftoa+0x1f8>)
    389c:	601a      	str	r2, [r3, #0]
        return 3;
    389e:	2303      	movs	r3, #3
    38a0:	e0db      	b.n	3a5a <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
    38a2:	68bb      	ldr	r3, [r7, #8]
    38a4:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    38a6:	68fb      	ldr	r3, [r7, #12]
    38a8:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    38aa:	693b      	ldr	r3, [r7, #16]
    38ac:	15db      	asrs	r3, r3, #23
    38ae:	b2db      	uxtb	r3, r3
    38b0:	3b7f      	subs	r3, #127	; 0x7f
    38b2:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    38b4:	693b      	ldr	r3, [r7, #16]
    38b6:	f3c3 0316 	ubfx	r3, r3, #0, #23
    38ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    38be:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    38c0:	2300      	movs	r3, #0
    38c2:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    38c4:	2300      	movs	r3, #0
    38c6:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    38c8:	69fb      	ldr	r3, [r7, #28]
    38ca:	2b1e      	cmp	r3, #30
    38cc:	dd02      	ble.n	38d4 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    38ce:	f06f 0301 	mvn.w	r3, #1
    38d2:	e0c2      	b.n	3a5a <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
    38d4:	69fb      	ldr	r3, [r7, #28]
    38d6:	f113 0f17 	cmn.w	r3, #23
    38da:	da02      	bge.n	38e2 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    38dc:	f04f 33ff 	mov.w	r3, #4294967295
    38e0:	e0bb      	b.n	3a5a <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
    38e2:	69fb      	ldr	r3, [r7, #28]
    38e4:	2b16      	cmp	r3, #22
    38e6:	dd06      	ble.n	38f6 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    38e8:	69fb      	ldr	r3, [r7, #28]
    38ea:	3b17      	subs	r3, #23
    38ec:	69ba      	ldr	r2, [r7, #24]
    38ee:	fa02 f303 	lsl.w	r3, r2, r3
    38f2:	637b      	str	r3, [r7, #52]	; 0x34
    38f4:	e01a      	b.n	392c <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    38f6:	69fb      	ldr	r3, [r7, #28]
    38f8:	2b00      	cmp	r3, #0
    38fa:	db0f      	blt.n	391c <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    38fc:	69fb      	ldr	r3, [r7, #28]
    38fe:	f1c3 0317 	rsb	r3, r3, #23
    3902:	69ba      	ldr	r2, [r7, #24]
    3904:	fa42 f303 	asr.w	r3, r2, r3
    3908:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    390a:	69fb      	ldr	r3, [r7, #28]
    390c:	3301      	adds	r3, #1
    390e:	69ba      	ldr	r2, [r7, #24]
    3910:	fa02 f303 	lsl.w	r3, r2, r3
    3914:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3918:	633b      	str	r3, [r7, #48]	; 0x30
    391a:	e007      	b.n	392c <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    391c:	69bb      	ldr	r3, [r7, #24]
    391e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    3922:	69fb      	ldr	r3, [r7, #28]
    3924:	43db      	mvns	r3, r3
    3926:	fa42 f303 	asr.w	r3, r2, r3
    392a:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    392c:	693b      	ldr	r3, [r7, #16]
    392e:	2b00      	cmp	r3, #0
    3930:	da04      	bge.n	393c <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    3932:	68bb      	ldr	r3, [r7, #8]
    3934:	1c5a      	adds	r2, r3, #1
    3936:	60ba      	str	r2, [r7, #8]
    3938:	222d      	movs	r2, #45	; 0x2d
    393a:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    393c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    393e:	2b00      	cmp	r3, #0
    3940:	d105      	bne.n	394e <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    3942:	68bb      	ldr	r3, [r7, #8]
    3944:	1c5a      	adds	r2, r3, #1
    3946:	60ba      	str	r2, [r7, #8]
    3948:	2230      	movs	r2, #48	; 0x30
    394a:	701a      	strb	r2, [r3, #0]
    394c:	e021      	b.n	3992 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    394e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3950:	2b00      	cmp	r3, #0
    3952:	dd08      	ble.n	3966 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    3954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3956:	ea4f 74e3 	mov.w	r4, r3, asr #31
    395a:	68ba      	ldr	r2, [r7, #8]
    395c:	4618      	mov	r0, r3
    395e:	4621      	mov	r1, r4
    3960:	f7ff fe9b 	bl	369a <uint64_to_str>
    3964:	e011      	b.n	398a <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    3966:	68bb      	ldr	r3, [r7, #8]
    3968:	1c5a      	adds	r2, r3, #1
    396a:	60ba      	str	r2, [r7, #8]
    396c:	222d      	movs	r2, #45	; 0x2d
    396e:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    3970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3972:	425b      	negs	r3, r3
    3974:	ea4f 74e3 	mov.w	r4, r3, asr #31
    3978:	68ba      	ldr	r2, [r7, #8]
    397a:	4618      	mov	r0, r3
    397c:	4621      	mov	r1, r4
    397e:	f7ff fe8c 	bl	369a <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    3982:	e002      	b.n	398a <ftoa+0x11e>
        {
            pcBuf++;
    3984:	68bb      	ldr	r3, [r7, #8]
    3986:	3301      	adds	r3, #1
    3988:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    398a:	68bb      	ldr	r3, [r7, #8]
    398c:	781b      	ldrb	r3, [r3, #0]
    398e:	2b00      	cmp	r3, #0
    3990:	d1f8      	bne.n	3984 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    3992:	68bb      	ldr	r3, [r7, #8]
    3994:	1c5a      	adds	r2, r3, #1
    3996:	60ba      	str	r2, [r7, #8]
    3998:	222e      	movs	r2, #46	; 0x2e
    399a:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    399e:	2b00      	cmp	r3, #0
    39a0:	d105      	bne.n	39ae <ftoa+0x142>
    {
        *pcBuf++ = '0';
    39a2:	68bb      	ldr	r3, [r7, #8]
    39a4:	1c5a      	adds	r2, r3, #1
    39a6:	60ba      	str	r2, [r7, #8]
    39a8:	2230      	movs	r2, #48	; 0x30
    39aa:	701a      	strb	r2, [r3, #0]
    39ac:	e04f      	b.n	3a4e <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    39ae:	68ba      	ldr	r2, [r7, #8]
    39b0:	6a3b      	ldr	r3, [r7, #32]
    39b2:	1ad3      	subs	r3, r2, r3
    39b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    39b6:	1ad3      	subs	r3, r2, r3
    39b8:	3b01      	subs	r3, #1
    39ba:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    39bc:	697a      	ldr	r2, [r7, #20]
    39be:	687b      	ldr	r3, [r7, #4]
    39c0:	4293      	cmp	r3, r2
    39c2:	bfa8      	it	ge
    39c4:	4613      	movge	r3, r2
    39c6:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    39c8:	2300      	movs	r3, #0
    39ca:	62bb      	str	r3, [r7, #40]	; 0x28
    39cc:	e015      	b.n	39fa <ftoa+0x18e>
        {
            i32FracPart *= 10;
    39ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    39d0:	4613      	mov	r3, r2
    39d2:	009b      	lsls	r3, r3, #2
    39d4:	4413      	add	r3, r2
    39d6:	005b      	lsls	r3, r3, #1
    39d8:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    39da:	68bb      	ldr	r3, [r7, #8]
    39dc:	1c5a      	adds	r2, r3, #1
    39de:	60ba      	str	r2, [r7, #8]
    39e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    39e2:	1612      	asrs	r2, r2, #24
    39e4:	b2d2      	uxtb	r2, r2
    39e6:	3230      	adds	r2, #48	; 0x30
    39e8:	b2d2      	uxtb	r2, r2
    39ea:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    39ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    39ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    39f2:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    39f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    39f6:	3301      	adds	r3, #1
    39f8:	62bb      	str	r3, [r7, #40]	; 0x28
    39fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    39fc:	697b      	ldr	r3, [r7, #20]
    39fe:	429a      	cmp	r2, r3
    3a00:	dbe5      	blt.n	39ce <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    3a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3a04:	4613      	mov	r3, r2
    3a06:	009b      	lsls	r3, r3, #2
    3a08:	4413      	add	r3, r2
    3a0a:	005b      	lsls	r3, r3, #1
    3a0c:	161b      	asrs	r3, r3, #24
    3a0e:	2b04      	cmp	r3, #4
    3a10:	dd1d      	ble.n	3a4e <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    3a12:	68bb      	ldr	r3, [r7, #8]
    3a14:	3b01      	subs	r3, #1
    3a16:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    3a18:	e015      	b.n	3a46 <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
    3a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a1c:	781b      	ldrb	r3, [r3, #0]
    3a1e:	2b2e      	cmp	r3, #46	; 0x2e
    3a20:	d00e      	beq.n	3a40 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
    3a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a24:	781b      	ldrb	r3, [r3, #0]
    3a26:	2b39      	cmp	r3, #57	; 0x39
    3a28:	d103      	bne.n	3a32 <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
    3a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a2c:	2230      	movs	r2, #48	; 0x30
    3a2e:	701a      	strb	r2, [r3, #0]
    3a30:	e006      	b.n	3a40 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
    3a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a34:	781b      	ldrb	r3, [r3, #0]
    3a36:	3301      	adds	r3, #1
    3a38:	b2da      	uxtb	r2, r3
    3a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a3c:	701a      	strb	r2, [r3, #0]
                    break;
    3a3e:	e006      	b.n	3a4e <ftoa+0x1e2>
                }
                pcBuftmp--;
    3a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a42:	3b01      	subs	r3, #1
    3a44:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    3a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3a48:	6a3b      	ldr	r3, [r7, #32]
    3a4a:	429a      	cmp	r2, r3
    3a4c:	d2e5      	bcs.n	3a1a <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    3a4e:	68bb      	ldr	r3, [r7, #8]
    3a50:	2200      	movs	r2, #0
    3a52:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    3a54:	68ba      	ldr	r2, [r7, #8]
    3a56:	6a3b      	ldr	r3, [r7, #32]
    3a58:	1ad3      	subs	r3, r2, r3
} // ftoa()
    3a5a:	4618      	mov	r0, r3
    3a5c:	373c      	adds	r7, #60	; 0x3c
    3a5e:	46bd      	mov	sp, r7
    3a60:	bd90      	pop	{r4, r7, pc}
    3a62:	bf00      	nop
    3a64:	00302e30 	.word	0x00302e30

00003a68 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    3a68:	b590      	push	{r4, r7, lr}
    3a6a:	b095      	sub	sp, #84	; 0x54
    3a6c:	af00      	add	r7, sp, #0
    3a6e:	60f8      	str	r0, [r7, #12]
    3a70:	60b9      	str	r1, [r7, #8]
    3a72:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    3a74:	2300      	movs	r3, #0
    3a76:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    3a78:	2300      	movs	r3, #0
    3a7a:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    3a7c:	e2e3      	b.n	4046 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    3a7e:	2306      	movs	r3, #6
    3a80:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    3a82:	68bb      	ldr	r3, [r7, #8]
    3a84:	781b      	ldrb	r3, [r3, #0]
    3a86:	2b25      	cmp	r3, #37	; 0x25
    3a88:	d01f      	beq.n	3aca <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    3a8a:	68fb      	ldr	r3, [r7, #12]
    3a8c:	2b00      	cmp	r3, #0
    3a8e:	d015      	beq.n	3abc <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    3a90:	68bb      	ldr	r3, [r7, #8]
    3a92:	781b      	ldrb	r3, [r3, #0]
    3a94:	2b0a      	cmp	r3, #10
    3a96:	d10b      	bne.n	3ab0 <am_util_stdio_vsprintf+0x48>
    3a98:	4bb1      	ldr	r3, [pc, #708]	; (3d60 <am_util_stdio_vsprintf+0x2f8>)
    3a9a:	781b      	ldrb	r3, [r3, #0]
    3a9c:	2b00      	cmp	r3, #0
    3a9e:	d007      	beq.n	3ab0 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    3aa0:	68fb      	ldr	r3, [r7, #12]
    3aa2:	1c5a      	adds	r2, r3, #1
    3aa4:	60fa      	str	r2, [r7, #12]
    3aa6:	220d      	movs	r2, #13
    3aa8:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    3aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3aac:	3301      	adds	r3, #1
    3aae:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    3ab0:	68fb      	ldr	r3, [r7, #12]
    3ab2:	1c5a      	adds	r2, r3, #1
    3ab4:	60fa      	str	r2, [r7, #12]
    3ab6:	68ba      	ldr	r2, [r7, #8]
    3ab8:	7812      	ldrb	r2, [r2, #0]
    3aba:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    3abc:	68bb      	ldr	r3, [r7, #8]
    3abe:	3301      	adds	r3, #1
    3ac0:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    3ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3ac4:	3301      	adds	r3, #1
    3ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    3ac8:	e2bd      	b.n	4046 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    3aca:	68bb      	ldr	r3, [r7, #8]
    3acc:	3301      	adds	r3, #1
    3ace:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    3ad0:	2300      	movs	r3, #0
    3ad2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    3ad6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    3ada:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    3ade:	2320      	movs	r3, #32
    3ae0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    3ae4:	68bb      	ldr	r3, [r7, #8]
    3ae6:	781b      	ldrb	r3, [r3, #0]
    3ae8:	2b30      	cmp	r3, #48	; 0x30
    3aea:	d105      	bne.n	3af8 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    3aec:	2330      	movs	r3, #48	; 0x30
    3aee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    3af2:	68bb      	ldr	r3, [r7, #8]
    3af4:	3301      	adds	r3, #1
    3af6:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    3af8:	f107 0310 	add.w	r3, r7, #16
    3afc:	4619      	mov	r1, r3
    3afe:	68b8      	ldr	r0, [r7, #8]
    3b00:	f7ff fd85 	bl	360e <decstr_to_int>
    3b04:	4603      	mov	r3, r0
    3b06:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    3b08:	693b      	ldr	r3, [r7, #16]
    3b0a:	68ba      	ldr	r2, [r7, #8]
    3b0c:	4413      	add	r3, r2
    3b0e:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    3b10:	68bb      	ldr	r3, [r7, #8]
    3b12:	781b      	ldrb	r3, [r3, #0]
    3b14:	2b73      	cmp	r3, #115	; 0x73
    3b16:	d005      	beq.n	3b24 <am_util_stdio_vsprintf+0xbc>
    3b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3b1a:	2b00      	cmp	r3, #0
    3b1c:	da02      	bge.n	3b24 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    3b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3b20:	425b      	negs	r3, r3
    3b22:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    3b24:	68bb      	ldr	r3, [r7, #8]
    3b26:	781b      	ldrb	r3, [r3, #0]
    3b28:	2b2e      	cmp	r3, #46	; 0x2e
    3b2a:	d10e      	bne.n	3b4a <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    3b2c:	68bb      	ldr	r3, [r7, #8]
    3b2e:	3301      	adds	r3, #1
    3b30:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    3b32:	f107 0310 	add.w	r3, r7, #16
    3b36:	4619      	mov	r1, r3
    3b38:	68b8      	ldr	r0, [r7, #8]
    3b3a:	f7ff fd68 	bl	360e <decstr_to_int>
    3b3e:	4603      	mov	r3, r0
    3b40:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    3b42:	693b      	ldr	r3, [r7, #16]
    3b44:	68ba      	ldr	r2, [r7, #8]
    3b46:	4413      	add	r3, r2
    3b48:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    3b4a:	68bb      	ldr	r3, [r7, #8]
    3b4c:	781b      	ldrb	r3, [r3, #0]
    3b4e:	2b6c      	cmp	r3, #108	; 0x6c
    3b50:	d10c      	bne.n	3b6c <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    3b52:	68bb      	ldr	r3, [r7, #8]
    3b54:	3301      	adds	r3, #1
    3b56:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    3b58:	68bb      	ldr	r3, [r7, #8]
    3b5a:	781b      	ldrb	r3, [r3, #0]
    3b5c:	2b6c      	cmp	r3, #108	; 0x6c
    3b5e:	d105      	bne.n	3b6c <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    3b60:	68bb      	ldr	r3, [r7, #8]
    3b62:	3301      	adds	r3, #1
    3b64:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    3b66:	2301      	movs	r3, #1
    3b68:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    3b6c:	68bb      	ldr	r3, [r7, #8]
    3b6e:	781b      	ldrb	r3, [r3, #0]
    3b70:	3b46      	subs	r3, #70	; 0x46
    3b72:	2b32      	cmp	r3, #50	; 0x32
    3b74:	f200 8254 	bhi.w	4020 <am_util_stdio_vsprintf+0x5b8>
    3b78:	a201      	add	r2, pc, #4	; (adr r2, 3b80 <am_util_stdio_vsprintf+0x118>)
    3b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3b7e:	bf00      	nop
    3b80:	00003fab 	.word	0x00003fab
    3b84:	00004021 	.word	0x00004021
    3b88:	00004021 	.word	0x00004021
    3b8c:	00004021 	.word	0x00004021
    3b90:	00004021 	.word	0x00004021
    3b94:	00004021 	.word	0x00004021
    3b98:	00004021 	.word	0x00004021
    3b9c:	00004021 	.word	0x00004021
    3ba0:	00004021 	.word	0x00004021
    3ba4:	00004021 	.word	0x00004021
    3ba8:	00004021 	.word	0x00004021
    3bac:	00004021 	.word	0x00004021
    3bb0:	00004021 	.word	0x00004021
    3bb4:	00004021 	.word	0x00004021
    3bb8:	00004021 	.word	0x00004021
    3bbc:	00004021 	.word	0x00004021
    3bc0:	00004021 	.word	0x00004021
    3bc4:	00004021 	.word	0x00004021
    3bc8:	00003d47 	.word	0x00003d47
    3bcc:	00004021 	.word	0x00004021
    3bd0:	00004021 	.word	0x00004021
    3bd4:	00004021 	.word	0x00004021
    3bd8:	00004021 	.word	0x00004021
    3bdc:	00004021 	.word	0x00004021
    3be0:	00004021 	.word	0x00004021
    3be4:	00004021 	.word	0x00004021
    3be8:	00004021 	.word	0x00004021
    3bec:	00004021 	.word	0x00004021
    3bf0:	00004021 	.word	0x00004021
    3bf4:	00003c4d 	.word	0x00003c4d
    3bf8:	00003e73 	.word	0x00003e73
    3bfc:	00004021 	.word	0x00004021
    3c00:	00003fab 	.word	0x00003fab
    3c04:	00004021 	.word	0x00004021
    3c08:	00004021 	.word	0x00004021
    3c0c:	00003e73 	.word	0x00003e73
    3c10:	00004021 	.word	0x00004021
    3c14:	00004021 	.word	0x00004021
    3c18:	00004021 	.word	0x00004021
    3c1c:	00004021 	.word	0x00004021
    3c20:	00004021 	.word	0x00004021
    3c24:	00004021 	.word	0x00004021
    3c28:	00004021 	.word	0x00004021
    3c2c:	00004021 	.word	0x00004021
    3c30:	00004021 	.word	0x00004021
    3c34:	00003c73 	.word	0x00003c73
    3c38:	00004021 	.word	0x00004021
    3c3c:	00003de1 	.word	0x00003de1
    3c40:	00004021 	.word	0x00004021
    3c44:	00004021 	.word	0x00004021
    3c48:	00003d41 	.word	0x00003d41
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    3c4c:	687b      	ldr	r3, [r7, #4]
    3c4e:	1d1a      	adds	r2, r3, #4
    3c50:	607a      	str	r2, [r7, #4]
    3c52:	681b      	ldr	r3, [r3, #0]
    3c54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    3c58:	68fb      	ldr	r3, [r7, #12]
    3c5a:	2b00      	cmp	r3, #0
    3c5c:	d005      	beq.n	3c6a <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    3c5e:	68fb      	ldr	r3, [r7, #12]
    3c60:	1c5a      	adds	r2, r3, #1
    3c62:	60fa      	str	r2, [r7, #12]
    3c64:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    3c68:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    3c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3c6c:	3301      	adds	r3, #1
    3c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    3c70:	e1e6      	b.n	4040 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    3c72:	687b      	ldr	r3, [r7, #4]
    3c74:	1d1a      	adds	r2, r3, #4
    3c76:	607a      	str	r2, [r7, #4]
    3c78:	681b      	ldr	r3, [r3, #0]
    3c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    3c7c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    3c7e:	f7ff fdb4 	bl	37ea <simple_strlen>
    3c82:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    3c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3c86:	2b00      	cmp	r3, #0
    3c88:	dd2e      	ble.n	3ce8 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    3c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3c8e:	429a      	cmp	r2, r3
    3c90:	d22a      	bcs.n	3ce8 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    3c92:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3c96:	1ad3      	subs	r3, r2, r3
    3c98:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    3c9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    3c9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3ca0:	4619      	mov	r1, r3
    3ca2:	68f8      	ldr	r0, [r7, #12]
    3ca4:	f7ff fdbc 	bl	3820 <padbuffer>
    3ca8:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    3caa:	68fb      	ldr	r3, [r7, #12]
    3cac:	2b00      	cmp	r3, #0
    3cae:	d001      	beq.n	3cb4 <am_util_stdio_vsprintf+0x24c>
    3cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3cb2:	e000      	b.n	3cb6 <am_util_stdio_vsprintf+0x24e>
    3cb4:	2300      	movs	r3, #0
    3cb6:	68fa      	ldr	r2, [r7, #12]
    3cb8:	4413      	add	r3, r2
    3cba:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    3cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3cbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3cc0:	4413      	add	r3, r2
    3cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    3cc4:	2300      	movs	r3, #0
    3cc6:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    3cc8:	e00e      	b.n	3ce8 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    3cca:	68fb      	ldr	r3, [r7, #12]
    3ccc:	2b00      	cmp	r3, #0
    3cce:	d005      	beq.n	3cdc <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    3cd0:	68fb      	ldr	r3, [r7, #12]
    3cd2:	1c5a      	adds	r2, r3, #1
    3cd4:	60fa      	str	r2, [r7, #12]
    3cd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3cd8:	7812      	ldrb	r2, [r2, #0]
    3cda:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    3cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3cde:	3301      	adds	r3, #1
    3ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    3ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3ce4:	3301      	adds	r3, #1
    3ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    3ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3cea:	781b      	ldrb	r3, [r3, #0]
    3cec:	2b00      	cmp	r3, #0
    3cee:	d1ec      	bne.n	3cca <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    3cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3cf2:	2b00      	cmp	r3, #0
    3cf4:	f000 81a1 	beq.w	403a <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    3cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3cfa:	425b      	negs	r3, r3
    3cfc:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    3cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3d02:	429a      	cmp	r2, r3
    3d04:	f080 8199 	bcs.w	403a <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    3d08:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d0c:	1ad3      	subs	r3, r2, r3
    3d0e:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    3d10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    3d14:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3d16:	4619      	mov	r1, r3
    3d18:	68f8      	ldr	r0, [r7, #12]
    3d1a:	f7ff fd81 	bl	3820 <padbuffer>
    3d1e:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    3d20:	68fb      	ldr	r3, [r7, #12]
    3d22:	2b00      	cmp	r3, #0
    3d24:	d001      	beq.n	3d2a <am_util_stdio_vsprintf+0x2c2>
    3d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3d28:	e000      	b.n	3d2c <am_util_stdio_vsprintf+0x2c4>
    3d2a:	2300      	movs	r3, #0
    3d2c:	68fa      	ldr	r2, [r7, #12]
    3d2e:	4413      	add	r3, r2
    3d30:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    3d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3d34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3d36:	4413      	add	r3, r2
    3d38:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    3d3a:	2300      	movs	r3, #0
    3d3c:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    3d3e:	e17c      	b.n	403a <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    3d40:	2301      	movs	r3, #1
    3d42:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    3d46:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    3d4a:	2b00      	cmp	r3, #0
    3d4c:	d00a      	beq.n	3d64 <am_util_stdio_vsprintf+0x2fc>
    3d4e:	687b      	ldr	r3, [r7, #4]
    3d50:	3307      	adds	r3, #7
    3d52:	f023 0307 	bic.w	r3, r3, #7
    3d56:	f103 0208 	add.w	r2, r3, #8
    3d5a:	607a      	str	r2, [r7, #4]
    3d5c:	cb18      	ldmia	r3, {r3, r4}
    3d5e:	e007      	b.n	3d70 <am_util_stdio_vsprintf+0x308>
    3d60:	10006568 	.word	0x10006568
                                      va_arg(pArgs, uint32_t);
    3d64:	687b      	ldr	r3, [r7, #4]
    3d66:	1d1a      	adds	r2, r3, #4
    3d68:	607a      	str	r2, [r7, #4]
    3d6a:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    3d6c:	f04f 0400 	mov.w	r4, #0
    3d70:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    3d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3d76:	2b00      	cmp	r3, #0
    3d78:	d01e      	beq.n	3db8 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    3d7a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    3d7e:	f7ff fc22 	bl	35c6 <ndigits_in_hex>
    3d82:	4602      	mov	r2, r0
    3d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3d86:	1a9b      	subs	r3, r3, r2
    3d88:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    3d8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    3d8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3d90:	4619      	mov	r1, r3
    3d92:	68f8      	ldr	r0, [r7, #12]
    3d94:	f7ff fd44 	bl	3820 <padbuffer>
    3d98:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    3d9a:	68fb      	ldr	r3, [r7, #12]
    3d9c:	2b00      	cmp	r3, #0
    3d9e:	d001      	beq.n	3da4 <am_util_stdio_vsprintf+0x33c>
    3da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3da2:	e000      	b.n	3da6 <am_util_stdio_vsprintf+0x33e>
    3da4:	2300      	movs	r3, #0
    3da6:	68fa      	ldr	r2, [r7, #12]
    3da8:	4413      	add	r3, r2
    3daa:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    3dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3dae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3db0:	4413      	add	r3, r2
    3db2:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    3db4:	2300      	movs	r3, #0
    3db6:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    3db8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    3dbc:	68fa      	ldr	r2, [r7, #12]
    3dbe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    3dc2:	f7ff fcb2 	bl	372a <uint64_to_hexstr>
    3dc6:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    3dc8:	68fb      	ldr	r3, [r7, #12]
    3dca:	2b00      	cmp	r3, #0
    3dcc:	d003      	beq.n	3dd6 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    3dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3dd0:	68fa      	ldr	r2, [r7, #12]
    3dd2:	4413      	add	r3, r2
    3dd4:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    3dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3dd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3dda:	4413      	add	r3, r2
    3ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    3dde:	e12f      	b.n	4040 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    3de0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    3de4:	2b00      	cmp	r3, #0
    3de6:	d008      	beq.n	3dfa <am_util_stdio_vsprintf+0x392>
    3de8:	687b      	ldr	r3, [r7, #4]
    3dea:	3307      	adds	r3, #7
    3dec:	f023 0307 	bic.w	r3, r3, #7
    3df0:	f103 0208 	add.w	r2, r3, #8
    3df4:	607a      	str	r2, [r7, #4]
    3df6:	cb18      	ldmia	r3, {r3, r4}
    3df8:	e005      	b.n	3e06 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    3dfa:	687b      	ldr	r3, [r7, #4]
    3dfc:	1d1a      	adds	r2, r3, #4
    3dfe:	607a      	str	r2, [r7, #4]
    3e00:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    3e02:	f04f 0400 	mov.w	r4, #0
    3e06:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    3e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3e0c:	2b00      	cmp	r3, #0
    3e0e:	d01e      	beq.n	3e4e <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    3e10:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    3e14:	f7ff fb99 	bl	354a <ndigits_in_u64>
    3e18:	4602      	mov	r2, r0
    3e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3e1c:	1a9b      	subs	r3, r3, r2
    3e1e:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    3e20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    3e24:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3e26:	4619      	mov	r1, r3
    3e28:	68f8      	ldr	r0, [r7, #12]
    3e2a:	f7ff fcf9 	bl	3820 <padbuffer>
    3e2e:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    3e30:	68fb      	ldr	r3, [r7, #12]
    3e32:	2b00      	cmp	r3, #0
    3e34:	d001      	beq.n	3e3a <am_util_stdio_vsprintf+0x3d2>
    3e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3e38:	e000      	b.n	3e3c <am_util_stdio_vsprintf+0x3d4>
    3e3a:	2300      	movs	r3, #0
    3e3c:	68fa      	ldr	r2, [r7, #12]
    3e3e:	4413      	add	r3, r2
    3e40:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    3e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3e44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3e46:	4413      	add	r3, r2
    3e48:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    3e4a:	2300      	movs	r3, #0
    3e4c:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    3e4e:	68fa      	ldr	r2, [r7, #12]
    3e50:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    3e54:	f7ff fc21 	bl	369a <uint64_to_str>
    3e58:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    3e5a:	68fb      	ldr	r3, [r7, #12]
    3e5c:	2b00      	cmp	r3, #0
    3e5e:	d003      	beq.n	3e68 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    3e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3e62:	68fa      	ldr	r2, [r7, #12]
    3e64:	4413      	add	r3, r2
    3e66:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    3e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3e6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3e6c:	4413      	add	r3, r2
    3e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    3e70:	e0e6      	b.n	4040 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    3e72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    3e76:	2b00      	cmp	r3, #0
    3e78:	d008      	beq.n	3e8c <am_util_stdio_vsprintf+0x424>
    3e7a:	687b      	ldr	r3, [r7, #4]
    3e7c:	3307      	adds	r3, #7
    3e7e:	f023 0307 	bic.w	r3, r3, #7
    3e82:	f103 0208 	add.w	r2, r3, #8
    3e86:	607a      	str	r2, [r7, #4]
    3e88:	cb18      	ldmia	r3, {r3, r4}
    3e8a:	e005      	b.n	3e98 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    3e8c:	687b      	ldr	r3, [r7, #4]
    3e8e:	1d1a      	adds	r2, r3, #4
    3e90:	607a      	str	r2, [r7, #4]
    3e92:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    3e94:	ea4f 74e3 	mov.w	r4, r3, asr #31
    3e98:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    3e9c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    3ea0:	2b00      	cmp	r3, #0
    3ea2:	f174 0300 	sbcs.w	r3, r4, #0
    3ea6:	da0a      	bge.n	3ebe <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    3ea8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    3eac:	425b      	negs	r3, r3
    3eae:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    3eb2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    3eb6:	2301      	movs	r3, #1
    3eb8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    3ebc:	e006      	b.n	3ecc <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    3ebe:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    3ec2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    3ec6:	2300      	movs	r3, #0
    3ec8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    3ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3ece:	2b00      	cmp	r3, #0
    3ed0:	d04a      	beq.n	3f68 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    3ed2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    3ed6:	4618      	mov	r0, r3
    3ed8:	4621      	mov	r1, r4
    3eda:	f7ff fb57 	bl	358c <ndigits_in_i64>
    3ede:	4602      	mov	r2, r0
    3ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3ee2:	1a9b      	subs	r3, r3, r2
    3ee4:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    3ee6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    3eea:	2b00      	cmp	r3, #0
    3eec:	d011      	beq.n	3f12 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    3eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3ef0:	3b01      	subs	r3, #1
    3ef2:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    3ef4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    3ef8:	2b30      	cmp	r3, #48	; 0x30
    3efa:	d10a      	bne.n	3f12 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    3efc:	68fb      	ldr	r3, [r7, #12]
    3efe:	2b00      	cmp	r3, #0
    3f00:	d004      	beq.n	3f0c <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    3f02:	68fb      	ldr	r3, [r7, #12]
    3f04:	1c5a      	adds	r2, r3, #1
    3f06:	60fa      	str	r2, [r7, #12]
    3f08:	222d      	movs	r2, #45	; 0x2d
    3f0a:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    3f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3f0e:	3301      	adds	r3, #1
    3f10:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    3f12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    3f16:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3f18:	4619      	mov	r1, r3
    3f1a:	68f8      	ldr	r0, [r7, #12]
    3f1c:	f7ff fc80 	bl	3820 <padbuffer>
    3f20:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    3f22:	68fb      	ldr	r3, [r7, #12]
    3f24:	2b00      	cmp	r3, #0
    3f26:	d001      	beq.n	3f2c <am_util_stdio_vsprintf+0x4c4>
    3f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3f2a:	e000      	b.n	3f2e <am_util_stdio_vsprintf+0x4c6>
    3f2c:	2300      	movs	r3, #0
    3f2e:	68fa      	ldr	r2, [r7, #12]
    3f30:	4413      	add	r3, r2
    3f32:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    3f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3f36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3f38:	4413      	add	r3, r2
    3f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    3f3c:	2300      	movs	r3, #0
    3f3e:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    3f40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    3f44:	2b00      	cmp	r3, #0
    3f46:	d01e      	beq.n	3f86 <am_util_stdio_vsprintf+0x51e>
    3f48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    3f4c:	2b20      	cmp	r3, #32
    3f4e:	d11a      	bne.n	3f86 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    3f50:	68fb      	ldr	r3, [r7, #12]
    3f52:	2b00      	cmp	r3, #0
    3f54:	d004      	beq.n	3f60 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    3f56:	68fb      	ldr	r3, [r7, #12]
    3f58:	1c5a      	adds	r2, r3, #1
    3f5a:	60fa      	str	r2, [r7, #12]
    3f5c:	222d      	movs	r2, #45	; 0x2d
    3f5e:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    3f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3f62:	3301      	adds	r3, #1
    3f64:	63fb      	str	r3, [r7, #60]	; 0x3c
    3f66:	e00e      	b.n	3f86 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    3f68:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    3f6c:	2b00      	cmp	r3, #0
    3f6e:	d00a      	beq.n	3f86 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    3f70:	68fb      	ldr	r3, [r7, #12]
    3f72:	2b00      	cmp	r3, #0
    3f74:	d004      	beq.n	3f80 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    3f76:	68fb      	ldr	r3, [r7, #12]
    3f78:	1c5a      	adds	r2, r3, #1
    3f7a:	60fa      	str	r2, [r7, #12]
    3f7c:	222d      	movs	r2, #45	; 0x2d
    3f7e:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    3f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3f82:	3301      	adds	r3, #1
    3f84:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    3f86:	68fa      	ldr	r2, [r7, #12]
    3f88:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    3f8c:	f7ff fb85 	bl	369a <uint64_to_str>
    3f90:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    3f92:	68fb      	ldr	r3, [r7, #12]
    3f94:	2b00      	cmp	r3, #0
    3f96:	d003      	beq.n	3fa0 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    3f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3f9a:	68fa      	ldr	r2, [r7, #12]
    3f9c:	4413      	add	r3, r2
    3f9e:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    3fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3fa2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3fa4:	4413      	add	r3, r2
    3fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    3fa8:	e04a      	b.n	4040 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    3faa:	68fb      	ldr	r3, [r7, #12]
    3fac:	2b00      	cmp	r3, #0
    3fae:	d046      	beq.n	403e <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    3fb0:	687b      	ldr	r3, [r7, #4]
    3fb2:	3307      	adds	r3, #7
    3fb4:	f023 0307 	bic.w	r3, r3, #7
    3fb8:	f103 0208 	add.w	r2, r3, #8
    3fbc:	607a      	str	r2, [r7, #4]
    3fbe:	cb18      	ldmia	r3, {r3, r4}
    3fc0:	4618      	mov	r0, r3
    3fc2:	4621      	mov	r1, r4
    3fc4:	f7fc f85c 	bl	80 <__aeabi_d2f>
    3fc8:	4603      	mov	r3, r0
    3fca:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    3fcc:	68fb      	ldr	r3, [r7, #12]
    3fce:	2214      	movs	r2, #20
    3fd0:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    3fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3fd4:	68f9      	ldr	r1, [r7, #12]
    3fd6:	6978      	ldr	r0, [r7, #20]
    3fd8:	f7ff fc48 	bl	386c <ftoa>
    3fdc:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    3fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3fe0:	2b00      	cmp	r3, #0
    3fe2:	da14      	bge.n	400e <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    3fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
    3fea:	d102      	bne.n	3ff2 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    3fec:	4b1e      	ldr	r3, [pc, #120]	; (4068 <am_util_stdio_vsprintf+0x600>)
    3fee:	62bb      	str	r3, [r7, #40]	; 0x28
    3ff0:	e008      	b.n	4004 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    3ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3ff4:	f113 0f02 	cmn.w	r3, #2
    3ff8:	d102      	bne.n	4000 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    3ffa:	4b1c      	ldr	r3, [pc, #112]	; (406c <am_util_stdio_vsprintf+0x604>)
    3ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    3ffe:	e001      	b.n	4004 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    4000:	4b1b      	ldr	r3, [pc, #108]	; (4070 <am_util_stdio_vsprintf+0x608>)
    4002:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    4004:	68fb      	ldr	r3, [r7, #12]
    4006:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4008:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    400a:	2303      	movs	r3, #3
    400c:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    400e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4010:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4012:	4413      	add	r3, r2
    4014:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    4016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4018:	68fa      	ldr	r2, [r7, #12]
    401a:	4413      	add	r3, r2
    401c:	60fb      	str	r3, [r7, #12]
                }
                break;
    401e:	e00e      	b.n	403e <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    4020:	68fb      	ldr	r3, [r7, #12]
    4022:	2b00      	cmp	r3, #0
    4024:	d005      	beq.n	4032 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    4026:	68fb      	ldr	r3, [r7, #12]
    4028:	1c5a      	adds	r2, r3, #1
    402a:	60fa      	str	r2, [r7, #12]
    402c:	68ba      	ldr	r2, [r7, #8]
    402e:	7812      	ldrb	r2, [r2, #0]
    4030:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    4032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4034:	3301      	adds	r3, #1
    4036:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    4038:	e002      	b.n	4040 <am_util_stdio_vsprintf+0x5d8>
                break;
    403a:	bf00      	nop
    403c:	e000      	b.n	4040 <am_util_stdio_vsprintf+0x5d8>
                break;
    403e:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    4040:	68bb      	ldr	r3, [r7, #8]
    4042:	3301      	adds	r3, #1
    4044:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    4046:	68bb      	ldr	r3, [r7, #8]
    4048:	781b      	ldrb	r3, [r3, #0]
    404a:	2b00      	cmp	r3, #0
    404c:	f47f ad17 	bne.w	3a7e <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    4050:	68fb      	ldr	r3, [r7, #12]
    4052:	2b00      	cmp	r3, #0
    4054:	d002      	beq.n	405c <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    4056:	68fb      	ldr	r3, [r7, #12]
    4058:	2200      	movs	r2, #0
    405a:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    405c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    405e:	4618      	mov	r0, r3
    4060:	3754      	adds	r7, #84	; 0x54
    4062:	46bd      	mov	sp, r7
    4064:	bd90      	pop	{r4, r7, pc}
    4066:	bf00      	nop
    4068:	00302e30 	.word	0x00302e30
    406c:	00232e23 	.word	0x00232e23
    4070:	003f2e3f 	.word	0x003f2e3f

00004074 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    4074:	b40f      	push	{r0, r1, r2, r3}
    4076:	b580      	push	{r7, lr}
    4078:	b082      	sub	sp, #8
    407a:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    407c:	f107 0314 	add.w	r3, r7, #20
    4080:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    4082:	683a      	ldr	r2, [r7, #0]
    4084:	6939      	ldr	r1, [r7, #16]
    4086:	4808      	ldr	r0, [pc, #32]	; (40a8 <am_util_stdio_printf+0x34>)
    4088:	f7ff fcee 	bl	3a68 <am_util_stdio_vsprintf>
    408c:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    408e:	4b07      	ldr	r3, [pc, #28]	; (40ac <am_util_stdio_printf+0x38>)
    4090:	681b      	ldr	r3, [r3, #0]
    4092:	4805      	ldr	r0, [pc, #20]	; (40a8 <am_util_stdio_printf+0x34>)
    4094:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    4096:	687b      	ldr	r3, [r7, #4]
}
    4098:	4618      	mov	r0, r3
    409a:	3708      	adds	r7, #8
    409c:	46bd      	mov	sp, r7
    409e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    40a2:	b004      	add	sp, #16
    40a4:	4770      	bx	lr
    40a6:	bf00      	nop
    40a8:	10006468 	.word	0x10006468
    40ac:	1000657c 	.word	0x1000657c

000040b0 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    40b0:	b580      	push	{r7, lr}
    40b2:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    40b4:	4802      	ldr	r0, [pc, #8]	; (40c0 <am_util_stdio_terminal_clear+0x10>)
    40b6:	f7ff ffdd 	bl	4074 <am_util_stdio_printf>
}
    40ba:	bf00      	nop
    40bc:	bd80      	pop	{r7, pc}
    40be:	bf00      	nop
    40c0:	00004a20 	.word	0x00004a20

000040c4 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    40c4:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_mcuctrl_bucks_enable();
    40c6:	f000 fb9b 	bl	4800 <am_hal_mcuctrl_bucks_enable>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    40ca:	f000 fc53 	bl	4974 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    40ce:	2001      	movs	r0, #1
    40d0:	f000 fbac 	bl	482c <am_hal_rtc_osc_select>

    //
    // Stop the XTAL.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    40d4:	2001      	movs	r0, #1
    40d6:	f000 f877 	bl	41c8 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    40da:	f000 fbb5 	bl	4848 <am_hal_rtc_osc_disable>

    //
    // Disable the bandgap.
    //
    am_hal_mcuctrl_bandgap_disable();
}
    40de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_mcuctrl_bandgap_disable();
    40e2:	f000 bb85 	b.w	47f0 <am_hal_mcuctrl_bandgap_disable>
    40e6:	bf00      	nop

000040e8 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    40e8:	b510      	push	{r4, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    40ea:	4b10      	ldr	r3, [pc, #64]	; (412c <am_bsp_debug_printf_enable+0x44>)
    40ec:	681c      	ldr	r4, [r3, #0]
    40ee:	f014 0401 	ands.w	r4, r4, #1
{
    40f2:	b086      	sub	sp, #24
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    40f4:	d001      	beq.n	40fa <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    40f6:	b006      	add	sp, #24
    40f8:	bd10      	pop	{r4, pc}
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    40fa:	a806      	add	r0, sp, #24
    40fc:	490c      	ldr	r1, [pc, #48]	; (4130 <am_bsp_debug_printf_enable+0x48>)
    40fe:	f840 1d14 	str.w	r1, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    4102:	f000 fbd5 	bl	48b0 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    4106:	4a0b      	ldr	r2, [pc, #44]	; (4134 <am_bsp_debug_printf_enable+0x4c>)
    4108:	480b      	ldr	r0, [pc, #44]	; (4138 <am_bsp_debug_printf_enable+0x50>)
    410a:	490c      	ldr	r1, [pc, #48]	; (413c <am_bsp_debug_printf_enable+0x54>)
    410c:	2373      	movs	r3, #115	; 0x73
    410e:	6013      	str	r3, [r2, #0]
    4110:	6803      	ldr	r3, [r0, #0]
    4112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    4116:	6003      	str	r3, [r0, #0]
    4118:	6808      	ldr	r0, [r1, #0]
    411a:	f420 4c7f 	bic.w	ip, r0, #65280	; 0xff00
    411e:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    4122:	600b      	str	r3, [r1, #0]
    4124:	6014      	str	r4, [r2, #0]
}
    4126:	b006      	add	sp, #24
    4128:	bd10      	pop	{r4, pc}
    412a:	bf00      	nop
    412c:	1000656c 	.word	0x1000656c
    4130:	000f4240 	.word	0x000f4240
    4134:	40010060 	.word	0x40010060
    4138:	40010054 	.word	0x40010054
    413c:	40010028 	.word	0x40010028

00004140 <am_bsp_debug_printf_disable>:
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    4140:	4b0f      	ldr	r3, [pc, #60]	; (4180 <am_bsp_debug_printf_disable+0x40>)
{
    4142:	b510      	push	{r4, lr}
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    4144:	681c      	ldr	r4, [r3, #0]
    4146:	f014 0401 	ands.w	r4, r4, #1
    414a:	d000      	beq.n	414e <am_bsp_debug_printf_disable+0xe>
    414c:	bd10      	pop	{r4, pc}
    {
        return;
    }
    am_hal_itm_not_busy();
    414e:	f000 faeb 	bl	4728 <am_hal_itm_not_busy>
    am_hal_gpio_pin_config(AM_BSP_GPIO_ITM_SWO, AM_HAL_GPIO_OUTPUT);
    4152:	4a0c      	ldr	r2, [pc, #48]	; (4184 <am_bsp_debug_printf_disable+0x44>)
    4154:	480c      	ldr	r0, [pc, #48]	; (4188 <am_bsp_debug_printf_disable+0x48>)
    4156:	490d      	ldr	r1, [pc, #52]	; (418c <am_bsp_debug_printf_disable+0x4c>)
    4158:	2373      	movs	r3, #115	; 0x73
    415a:	6013      	str	r3, [r2, #0]
    415c:	6803      	ldr	r3, [r0, #0]
    415e:	f023 0c70 	bic.w	ip, r3, #112	; 0x70
    4162:	f04c 0320 	orr.w	r3, ip, #32
    4166:	6003      	str	r3, [r0, #0]
    4168:	6808      	ldr	r0, [r1, #0]
    416a:	f420 4c7f 	bic.w	ip, r0, #65280	; 0xff00
    416e:	f44c 53c0 	orr.w	r3, ip, #6144	; 0x1800
    4172:	600b      	str	r3, [r1, #0]
    4174:	6014      	str	r4, [r2, #0]
    am_hal_tpiu_disable();
}
    4176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_tpiu_disable();
    417a:	f000 bbf5 	b.w	4968 <am_hal_tpiu_disable>
    417e:	bf00      	nop
    4180:	1000656c 	.word	0x1000656c
    4184:	40010060 	.word	0x40010060
    4188:	40010054 	.word	0x40010054
    418c:	40010028 	.word	0x40010028

00004190 <am_hal_clkgen_sysclk_select>:
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    4190:	4b05      	ldr	r3, [pc, #20]	; (41a8 <am_hal_clkgen_sysclk_select+0x18>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    4192:	4906      	ldr	r1, [pc, #24]	; (41ac <am_hal_clkgen_sysclk_select+0x1c>)
{
    4194:	b410      	push	{r4}

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    4196:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    4198:	2447      	movs	r4, #71	; 0x47
    419a:	601c      	str	r4, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    419c:	6008      	str	r0, [r1, #0]
}
    419e:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(CLKGEN, CLKKEY) = 0;
    41a2:	601a      	str	r2, [r3, #0]
}
    41a4:	4770      	bx	lr
    41a6:	bf00      	nop
    41a8:	40004014 	.word	0x40004014
    41ac:	40004018 	.word	0x40004018

000041b0 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_BFR(CLKGEN, CCTRL, CORESEL);
    41b0:	4b03      	ldr	r3, [pc, #12]	; (41c0 <am_hal_clkgen_sysclk_get+0x10>)
    41b2:	4a04      	ldr	r2, [pc, #16]	; (41c4 <am_hal_clkgen_sysclk_get+0x14>)
    41b4:	6818      	ldr	r0, [r3, #0]
    41b6:	f000 0107 	and.w	r1, r0, #7
        case AM_HAL_CLKGEN_SYSCLK_3MHZ:
            return 3000000;
        default:
            return 0xFFFFFFFF;
    }
}
    41ba:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    41be:	4770      	bx	lr
    41c0:	40004018 	.word	0x40004018
    41c4:	00004a44 	.word	0x00004a44

000041c8 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    41c8:	0783      	lsls	r3, r0, #30
    41ca:	d003      	beq.n	41d4 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    41cc:	4b02      	ldr	r3, [pc, #8]	; (41d8 <am_hal_clkgen_osc_stop+0x10>)
    41ce:	681a      	ldr	r2, [r3, #0]
    41d0:	4310      	orrs	r0, r2
    41d2:	6018      	str	r0, [r3, #0]
    41d4:	4770      	bx	lr
    41d6:	bf00      	nop
    41d8:	4000400c 	.word	0x4000400c

000041dc <back2back_reads>:
void
back2back_reads(uint32_t u32TimerAddr, uint32_t u32Data[])
{
    // u32TimerAddr = address of the timer to be read.
    // u32Data[] is a pointer to a 3 word data array provided by the caller.
    __asm
    41dc:	b410      	push	{r4}
    41de:	b402      	push	{r1}
    41e0:	4602      	mov	r2, r0
    41e2:	f3ef 8410 	mrs	r4, PRIMASK
    41e6:	b672      	cpsid	i
    41e8:	bf00      	nop
    41ea:	6810      	ldr	r0, [r2, #0]
    41ec:	6811      	ldr	r1, [r2, #0]
    41ee:	6813      	ldr	r3, [r2, #0]
    41f0:	f384 8810 	msr	PRIMASK, r4
    41f4:	bc04      	pop	{r2}
    41f6:	6010      	str	r0, [r2, #0]
    41f8:	6051      	str	r1, [r2, #4]
    41fa:	6093      	str	r3, [r2, #8]
    41fc:	bc10      	pop	{r4}
    41fe:	4770      	bx	lr

00004200 <am_hal_ctimer_int_service>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_service(uint32_t ui32Status)
{
    4200:	b570      	push	{r4, r5, r6, lr}
    uint32_t ui32Clz;

    am_hal_ctimer_handler_t pfnHandler;

    ui32Status &= 0xFFFF;
    4202:	b284      	uxth	r4, r0

    while ( ui32Status )
    4204:	b184      	cbz	r4, 4228 <am_hal_ctimer_int_service+0x28>
    4206:	4e09      	ldr	r6, [pc, #36]	; (422c <am_hal_ctimer_int_service+0x2c>)
#endif

        //
        // Turn off the bit we picked in the working copy
        //
        ui32Status &= ~(0x80000000 >> ui32Clz);
    4208:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
        ui32Clz = __builtin_clz(ui32Status);
    420c:	fab4 f384 	clz	r3, r4

        //
        // Check the bit handler table to see if there is an interrupt handler
        // registered for this particular bit.
        //
        pfnHandler = am_hal_ctimer_ppfnHandlers[31 - ui32Clz];
    4210:	f1c3 021f 	rsb	r2, r3, #31
        ui32Status &= ~(0x80000000 >> ui32Clz);
    4214:	fa25 f003 	lsr.w	r0, r5, r3
        pfnHandler = am_hal_ctimer_ppfnHandlers[31 - ui32Clz];
    4218:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
        ui32Status &= ~(0x80000000 >> ui32Clz);
    421c:	ea24 0400 	bic.w	r4, r4, r0
        if ( pfnHandler )
    4220:	b101      	cbz	r1, 4224 <am_hal_ctimer_int_service+0x24>
        {
            //
            // If we found an interrupt handler routine, call it now.
            //
            pfnHandler();
    4222:	4788      	blx	r1
    while ( ui32Status )
    4224:	2c00      	cmp	r4, #0
    4226:	d1f1      	bne.n	420c <am_hal_ctimer_int_service+0xc>
    4228:	bd70      	pop	{r4, r5, r6, pc}
    422a:	bf00      	nop
    422c:	10006580 	.word	0x10006580

00004230 <am_hal_ctimer_int_register>:
{
    uint32_t intIdx = 0;
    //
    // Check to make sure the interrupt number is valid. (Debug builds only)
    //
    switch(ui32Interrupt)
    4230:	2808      	cmp	r0, #8
{
    4232:	b510      	push	{r4, lr}
    4234:	460c      	mov	r4, r1
    switch(ui32Interrupt)
    4236:	d03d      	beq.n	42b4 <am_hal_ctimer_int_register+0x84>
    4238:	d90b      	bls.n	4252 <am_hal_ctimer_int_register+0x22>
    423a:	2820      	cmp	r0, #32
    423c:	d035      	beq.n	42aa <am_hal_ctimer_int_register+0x7a>
    423e:	d923      	bls.n	4288 <am_hal_ctimer_int_register+0x58>
    4240:	2840      	cmp	r0, #64	; 0x40
    4242:	d01c      	beq.n	427e <am_hal_ctimer_int_register+0x4e>
    4244:	2880      	cmp	r0, #128	; 0x80
    4246:	d10a      	bne.n	425e <am_hal_ctimer_int_register+0x2e>
        case AM_REG_CTIMER_INTEN_CTMRA3INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA3INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRB3INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB3INT_S;
    4248:	2207      	movs	r2, #7
            break;

        default:
            am_hal_debug_assert_msg(false, "CTimer interrupt number out of range.");
    }
    am_hal_ctimer_ppfnHandlers[intIdx] = pfnHandler;
    424a:	4b1d      	ldr	r3, [pc, #116]	; (42c0 <am_hal_ctimer_int_register+0x90>)
    424c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    4250:	bd10      	pop	{r4, pc}
    switch(ui32Interrupt)
    4252:	2802      	cmp	r0, #2
    4254:	d01f      	beq.n	4296 <am_hal_ctimer_int_register+0x66>
    4256:	2804      	cmp	r0, #4
    4258:	d00c      	beq.n	4274 <am_hal_ctimer_int_register+0x44>
    425a:	2801      	cmp	r0, #1
    425c:	d020      	beq.n	42a0 <am_hal_ctimer_int_register+0x70>
            am_hal_debug_assert_msg(false, "CTimer interrupt number out of range.");
    425e:	4a19      	ldr	r2, [pc, #100]	; (42c4 <am_hal_ctimer_int_register+0x94>)
    4260:	4819      	ldr	r0, [pc, #100]	; (42c8 <am_hal_ctimer_int_register+0x98>)
    4262:	f44f 719a 	mov.w	r1, #308	; 0x134
    4266:	f000 f923 	bl	44b0 <am_hal_debug_error>
    uint32_t intIdx = 0;
    426a:	2200      	movs	r2, #0
    am_hal_ctimer_ppfnHandlers[intIdx] = pfnHandler;
    426c:	4b14      	ldr	r3, [pc, #80]	; (42c0 <am_hal_ctimer_int_register+0x90>)
    426e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    4272:	bd10      	pop	{r4, pc}
            intIdx = AM_REG_CTIMER_INTEN_CTMRA1INT_S;
    4274:	2202      	movs	r2, #2
    am_hal_ctimer_ppfnHandlers[intIdx] = pfnHandler;
    4276:	4b12      	ldr	r3, [pc, #72]	; (42c0 <am_hal_ctimer_int_register+0x90>)
    4278:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    427c:	bd10      	pop	{r4, pc}
            intIdx = AM_REG_CTIMER_INTEN_CTMRA3INT_S;
    427e:	2206      	movs	r2, #6
    am_hal_ctimer_ppfnHandlers[intIdx] = pfnHandler;
    4280:	4b0f      	ldr	r3, [pc, #60]	; (42c0 <am_hal_ctimer_int_register+0x90>)
    4282:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    4286:	bd10      	pop	{r4, pc}
    switch(ui32Interrupt)
    4288:	2810      	cmp	r0, #16
    428a:	d1e8      	bne.n	425e <am_hal_ctimer_int_register+0x2e>
            intIdx = AM_REG_CTIMER_INTEN_CTMRA2INT_S;
    428c:	2204      	movs	r2, #4
    am_hal_ctimer_ppfnHandlers[intIdx] = pfnHandler;
    428e:	4b0c      	ldr	r3, [pc, #48]	; (42c0 <am_hal_ctimer_int_register+0x90>)
    4290:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    4294:	bd10      	pop	{r4, pc}
            intIdx = AM_REG_CTIMER_INTEN_CTMRB0INT_S;
    4296:	2201      	movs	r2, #1
    am_hal_ctimer_ppfnHandlers[intIdx] = pfnHandler;
    4298:	4b09      	ldr	r3, [pc, #36]	; (42c0 <am_hal_ctimer_int_register+0x90>)
    429a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    429e:	bd10      	pop	{r4, pc}
            intIdx = AM_REG_CTIMER_INTEN_CTMRA0INT_S;
    42a0:	2200      	movs	r2, #0
    am_hal_ctimer_ppfnHandlers[intIdx] = pfnHandler;
    42a2:	4b07      	ldr	r3, [pc, #28]	; (42c0 <am_hal_ctimer_int_register+0x90>)
    42a4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    42a8:	bd10      	pop	{r4, pc}
            intIdx = AM_REG_CTIMER_INTEN_CTMRB2INT_S;
    42aa:	2205      	movs	r2, #5
    am_hal_ctimer_ppfnHandlers[intIdx] = pfnHandler;
    42ac:	4b04      	ldr	r3, [pc, #16]	; (42c0 <am_hal_ctimer_int_register+0x90>)
    42ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    42b2:	bd10      	pop	{r4, pc}
            intIdx = AM_REG_CTIMER_INTEN_CTMRB1INT_S;
    42b4:	2203      	movs	r2, #3
    am_hal_ctimer_ppfnHandlers[intIdx] = pfnHandler;
    42b6:	4b02      	ldr	r3, [pc, #8]	; (42c0 <am_hal_ctimer_int_register+0x90>)
    42b8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    42bc:	bd10      	pop	{r4, pc}
    42be:	bf00      	nop
    42c0:	10006580 	.word	0x10006580
    42c4:	00004a64 	.word	0x00004a64
    42c8:	00004a8c 	.word	0x00004a8c

000042cc <am_hal_ctimer_config>:
                     (psConfig->ui32TimerBConfig << 16));

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    42cc:	680b      	ldr	r3, [r1, #0]
    ui32ConfigVal = (psConfig->ui32TimerAConfig |
    42ce:	684a      	ldr	r2, [r1, #4]
{
    42d0:	b410      	push	{r4}
                     (psConfig->ui32TimerBConfig << 16));
    42d2:	688c      	ldr	r4, [r1, #8]

    //
    // Find the correct register to write.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    42d4:	4907      	ldr	r1, [pc, #28]	; (42f4 <am_hal_ctimer_config+0x28>)
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    42d6:	2b00      	cmp	r3, #0
    ui32ConfigVal = (psConfig->ui32TimerAConfig |
    42d8:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
                                  (ui32TimerNumber * TIMER_OFFSET));
    42dc:	ea4f 1000 	mov.w	r0, r0, lsl #4
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    42e0:	bf14      	ite	ne
    42e2:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
    42e6:	2300      	moveq	r3, #0
    42e8:	4323      	orrs	r3, r4

    //
    // Write our configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    42ea:	5043      	str	r3, [r0, r1]
}
    42ec:	f85d 4b04 	ldr.w	r4, [sp], #4
    42f0:	4770      	bx	lr
    42f2:	bf00      	nop
    42f4:	4000800c 	.word	0x4000800c

000042f8 <am_hal_ctimer_start>:

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    42f8:	0100      	lsls	r0, r0, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    42fa:	4a07      	ldr	r2, [pc, #28]	; (4318 <am_hal_ctimer_start+0x20>)

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    42fc:	5883      	ldr	r3, [r0, r2]
{
    42fe:	b410      	push	{r4}

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    4300:	f001 2408 	and.w	r4, r1, #134219776	; 0x8000800
    4304:	ea23 0304 	bic.w	r3, r3, r4
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    4308:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    430c:	4319      	orrs	r1, r3
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    430e:	5081      	str	r1, [r0, r2]
}
    4310:	f85d 4b04 	ldr.w	r4, [sp], #4
    4314:	4770      	bx	lr
    4316:	bf00      	nop
    4318:	4000800c 	.word	0x4000800c

0000431c <am_hal_ctimer_stop>:

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    431c:	0100      	lsls	r0, r0, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    431e:	4a04      	ldr	r2, [pc, #16]	; (4330 <am_hal_ctimer_stop+0x14>)

    //
    // Clear the "enable" bit
    //
    AM_REGVAL(pui32ConfigReg) &= ~(ui32TimerSegment &
    4320:	5883      	ldr	r3, [r0, r2]
    4322:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    4326:	ea23 0301 	bic.w	r3, r3, r1
    432a:	5083      	str	r3, [r0, r2]
    432c:	4770      	bx	lr
    432e:	bf00      	nop
    4330:	4000800c 	.word	0x4000800c

00004334 <am_hal_ctimer_clear>:

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    4334:	0100      	lsls	r0, r0, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    4336:	4b03      	ldr	r3, [pc, #12]	; (4344 <am_hal_ctimer_clear+0x10>)

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    4338:	58c2      	ldr	r2, [r0, r3]
    433a:	f001 2108 	and.w	r1, r1, #134219776	; 0x8000800
    433e:	4311      	orrs	r1, r2
    4340:	50c1      	str	r1, [r0, r3]
    4342:	4770      	bx	lr
    4344:	4000800c 	.word	0x4000800c

00004348 <am_hal_ctimer_read>:
//! @return Current timer value.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_read(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    4348:	b530      	push	{r4, r5, lr}
    volatile uint32_t ui32Value = 0;
    uint32_t ui32Values[3];
    uint32_t ui32TimerAddrTbl[4] =
    434a:	4b27      	ldr	r3, [pc, #156]	; (43e8 <am_hal_ctimer_read+0xa0>)
{
    434c:	4604      	mov	r4, r0
    434e:	460d      	mov	r5, r1
    uint32_t ui32TimerAddrTbl[4] =
    4350:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
{
    4352:	b089      	sub	sp, #36	; 0x24
    uint32_t ui32TimerAddrTbl[4] =
    4354:	f10d 0e20 	add.w	lr, sp, #32
    4358:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
    // to increment once, and that only one of the three reads can be wrong.
    // This routine will perform the back-to-back reads and return all three
    // values. The rest of this fuction determines which value we should
    // actually use.
    //
    back2back_reads(ui32TimerAddrTbl[ui32TimerNumber], &ui32Values[0]);
    435c:	eb0e 0084 	add.w	r0, lr, r4, lsl #2
    volatile uint32_t ui32Value = 0;
    4360:	2100      	movs	r1, #0
    4362:	9100      	str	r1, [sp, #0]
    back2back_reads(ui32TimerAddrTbl[ui32TimerNumber], &ui32Values[0]);
    4364:	f850 0c10 	ldr.w	r0, [r0, #-16]
    4368:	a901      	add	r1, sp, #4
    436a:	f7ff ff37 	bl	41dc <back2back_reads>

    //
    // Shift or mask the values based on the given timer segment.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    436e:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
    4372:	d017      	beq.n	43a4 <am_hal_ctimer_read+0x5c>
    {
        ui32Values[0] >>= 16;
        ui32Values[1] >>= 16;
        ui32Values[2] >>= 16;
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    4374:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4378:	4295      	cmp	r5, r2
    437a:	d022      	beq.n	43c2 <am_hal_ctimer_read+0x7a>
    437c:	9c01      	ldr	r4, [sp, #4]
    437e:	9b02      	ldr	r3, [sp, #8]
    }

    //
    // Now, we'll figure out which of the three values is the correct time.
    //
    if (ui32Values[0] == ui32Values[1])
    4380:	429c      	cmp	r4, r3
    4382:	d01a      	beq.n	43ba <am_hal_ctimer_read+0x72>
        //
        // If the first two values didn't match, then one of them might be bad.
        // If one of the first two values is bad, then the third one should
        // always be correct. We'll take the third value as the correct time.
        //
        ui32Value = ui32Values[2];
    4384:	9903      	ldr	r1, [sp, #12]
    4386:	9100      	str	r1, [sp, #0]
        // flag it as a "bad read", and fail this assert statement.
        //
        // This shouldn't ever happen, and it hasn't ever happened in any of
        // our tests so far.
        //
        am_hal_debug_assert_msg((adjacent(ui32Values[1], ui32Values[2]) ||
    4388:	4299      	cmp	r1, r3
    438a:	d008      	beq.n	439e <am_hal_ctimer_read+0x56>
    438c:	3301      	adds	r3, #1
    438e:	4299      	cmp	r1, r3
    4390:	d005      	beq.n	439e <am_hal_ctimer_read+0x56>
    4392:	42a1      	cmp	r1, r4
    4394:	d003      	beq.n	439e <am_hal_ctimer_read+0x56>
    4396:	3401      	adds	r4, #1
    4398:	42a1      	cmp	r1, r4
    439a:	d000      	beq.n	439e <am_hal_ctimer_read+0x56>
    439c:	b9d9      	cbnz	r1, 43d6 <am_hal_ctimer_read+0x8e>
                                 adjacent(ui32Values[0], ui32Values[2])),
                                "Bad CTIMER read");
    }
#endif

    return ui32Value;
    439e:	9800      	ldr	r0, [sp, #0]
}
    43a0:	b009      	add	sp, #36	; 0x24
    43a2:	bd30      	pop	{r4, r5, pc}
        ui32Values[0] >>= 16;
    43a4:	f8bd 4006 	ldrh.w	r4, [sp, #6]
        ui32Values[1] >>= 16;
    43a8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
        ui32Values[2] >>= 16;
    43ac:	f8bd 000e 	ldrh.w	r0, [sp, #14]
        ui32Values[0] >>= 16;
    43b0:	9401      	str	r4, [sp, #4]
    if (ui32Values[0] == ui32Values[1])
    43b2:	429c      	cmp	r4, r3
        ui32Values[1] >>= 16;
    43b4:	9302      	str	r3, [sp, #8]
        ui32Values[2] >>= 16;
    43b6:	9003      	str	r0, [sp, #12]
    if (ui32Values[0] == ui32Values[1])
    43b8:	d1e4      	bne.n	4384 <am_hal_ctimer_read+0x3c>
        ui32Value = ui32Values[1];
    43ba:	9400      	str	r4, [sp, #0]
    return ui32Value;
    43bc:	9800      	ldr	r0, [sp, #0]
}
    43be:	b009      	add	sp, #36	; 0x24
    43c0:	bd30      	pop	{r4, r5, pc}
        ui32Values[0] &= 0xFFFF;
    43c2:	f8bd 4004 	ldrh.w	r4, [sp, #4]
        ui32Values[1] &= 0xFFFF;
    43c6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
        ui32Values[2] &= 0xFFFF;
    43ca:	f8bd 500c 	ldrh.w	r5, [sp, #12]
        ui32Values[0] &= 0xFFFF;
    43ce:	9401      	str	r4, [sp, #4]
        ui32Values[1] &= 0xFFFF;
    43d0:	9302      	str	r3, [sp, #8]
        ui32Values[2] &= 0xFFFF;
    43d2:	9503      	str	r5, [sp, #12]
    43d4:	e7d4      	b.n	4380 <am_hal_ctimer_read+0x38>
        am_hal_debug_assert_msg((adjacent(ui32Values[1], ui32Values[2]) ||
    43d6:	4a05      	ldr	r2, [pc, #20]	; (43ec <am_hal_ctimer_read+0xa4>)
    43d8:	4805      	ldr	r0, [pc, #20]	; (43f0 <am_hal_ctimer_read+0xa8>)
    43da:	f240 21ea 	movw	r1, #746	; 0x2ea
    43de:	f000 f867 	bl	44b0 <am_hal_debug_error>
    return ui32Value;
    43e2:	9800      	ldr	r0, [sp, #0]
}
    43e4:	b009      	add	sp, #36	; 0x24
    43e6:	bd30      	pop	{r4, r5, pc}
    43e8:	00004a34 	.word	0x00004a34
    43ec:	00004aa4 	.word	0x00004aa4
    43f0:	00004a8c 	.word	0x00004a8c

000043f4 <am_hal_ctimer_compare_set>:
//
//*****************************************************************************
void
am_hal_ctimer_compare_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                          uint32_t ui32CompareReg, uint32_t ui32Value)
{
    43f4:	b470      	push	{r4, r5, r6}
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct compare register to write.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    43f6:	4e1d      	ldr	r6, [pc, #116]	; (446c <am_hal_ctimer_compare_set+0x78>)
    43f8:	42b1      	cmp	r1, r6
    43fa:	d00f      	beq.n	441c <am_hal_ctimer_compare_set+0x28>
                                      (ui32TimerNumber * TIMER_OFFSET));
    }
    else
    {
        pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) +
                                      AM_REG_CTIMER_CMPRA0_O +
    43fc:	4d1c      	ldr	r5, [pc, #112]	; (4470 <am_hal_ctimer_compare_set+0x7c>)
                                      (ui32TimerNumber * TIMER_OFFSET));
    43fe:	0100      	lsls	r0, r0, #4
    }

    //
    // Write the compare register with the selected value.
    //
    if ( ui32CompareReg == 1 )
    4400:	2a01      	cmp	r2, #1
                                      AM_REG_CTIMER_CMPRA0_O +
    4402:	eb00 0405 	add.w	r4, r0, r5
    if ( ui32CompareReg == 1 )
    4406:	d015      	beq.n	4434 <am_hal_ctimer_compare_set+0x40>
                (((*pui32ConfigReg) & AM_REG_CTIMER_CMPRA0_CMPR0A0_M) | AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Value & 0xFFFF));
        }
    }
    else
    {
        if (ui32TimerSegment == AM_HAL_CTIMER_BOTH)
    4408:	3101      	adds	r1, #1
    440a:	d022      	beq.n	4452 <am_hal_ctimer_compare_set+0x5e>
                (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Value >> 16) | ((*pui32ConfigReg) & AM_REG_CTIMER_CMPRA0_CMPR1A0_M));
        }
        else
        {
            *pui32ConfigReg =
                (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Value & 0xFFFF) | ((*pui32ConfigReg) & AM_REG_CTIMER_CMPRA0_CMPR1A0_M));
    440c:	6820      	ldr	r0, [r4, #0]
    440e:	0c01      	lsrs	r1, r0, #16
    4410:	b29d      	uxth	r5, r3
    4412:	040a      	lsls	r2, r1, #16
    4414:	4315      	orrs	r5, r2
            *pui32ConfigReg =
    4416:	6025      	str	r5, [r4, #0]
        }
    }
}
    4418:	bc70      	pop	{r4, r5, r6}
    441a:	4770      	bx	lr
                                      AM_REG_CTIMER_CMPRB0_O +
    441c:	4e15      	ldr	r6, [pc, #84]	; (4474 <am_hal_ctimer_compare_set+0x80>)
    if ( ui32CompareReg == 1 )
    441e:	2a01      	cmp	r2, #1
                                      AM_REG_CTIMER_CMPRB0_O +
    4420:	eb06 1400 	add.w	r4, r6, r0, lsl #4
    if ( ui32CompareReg == 1 )
    4424:	d1f2      	bne.n	440c <am_hal_ctimer_compare_set+0x18>
                (((*pui32ConfigReg) & AM_REG_CTIMER_CMPRA0_CMPR0A0_M) | AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Value & 0xFFFF));
    4426:	6826      	ldr	r6, [r4, #0]
    4428:	b2b0      	uxth	r0, r6
    442a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
            *pui32ConfigReg =
    442e:	6023      	str	r3, [r4, #0]
}
    4430:	bc70      	pop	{r4, r5, r6}
    4432:	4770      	bx	lr
        if (ui32TimerSegment == AM_HAL_CTIMER_BOTH)
    4434:	3101      	adds	r1, #1
    4436:	d1f6      	bne.n	4426 <am_hal_ctimer_compare_set+0x32>
                (((*pui32ConfigReg) & AM_REG_CTIMER_CMPRA0_CMPR0A0_M) | AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Value & 0xFFFF));
    4438:	5944      	ldr	r4, [r0, r5]
                                          AM_REG_CTIMER_CMPRB0_O +
    443a:	490e      	ldr	r1, [pc, #56]	; (4474 <am_hal_ctimer_compare_set+0x80>)
                (((*pui32ConfigReg) & AM_REG_CTIMER_CMPRA0_CMPR0A0_M) | AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Value & 0xFFFF));
    443c:	fa1f fc84 	uxth.w	ip, r4
    4440:	ea4c 4203 	orr.w	r2, ip, r3, lsl #16
            *pui32ConfigReg =
    4444:	5142      	str	r2, [r0, r5]
                (((*pui32ConfigReg) & AM_REG_CTIMER_CMPRA0_CMPR0A0_M) | AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Value >> 16));
    4446:	5845      	ldr	r5, [r0, r1]
    4448:	401e      	ands	r6, r3
    444a:	b2ab      	uxth	r3, r5
    444c:	4333      	orrs	r3, r6
            *pui32ConfigReg =
    444e:	5043      	str	r3, [r0, r1]
    4450:	e7e2      	b.n	4418 <am_hal_ctimer_compare_set+0x24>
                (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Value & 0xFFFF) | ((*pui32ConfigReg) & AM_REG_CTIMER_CMPRA0_CMPR1A0_M));
    4452:	5941      	ldr	r1, [r0, r5]
                                          AM_REG_CTIMER_CMPRB0_O +
    4454:	4c07      	ldr	r4, [pc, #28]	; (4474 <am_hal_ctimer_compare_set+0x80>)
                (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Value & 0xFFFF) | ((*pui32ConfigReg) & AM_REG_CTIMER_CMPRA0_CMPR1A0_M));
    4456:	4031      	ands	r1, r6
    4458:	b29a      	uxth	r2, r3
    445a:	430a      	orrs	r2, r1
            *pui32ConfigReg =
    445c:	5142      	str	r2, [r0, r5]
                (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Value >> 16) | ((*pui32ConfigReg) & AM_REG_CTIMER_CMPRA0_CMPR1A0_M));
    445e:	5905      	ldr	r5, [r0, r4]
    4460:	402e      	ands	r6, r5
    4462:	ea46 4313 	orr.w	r3, r6, r3, lsr #16
            *pui32ConfigReg =
    4466:	5103      	str	r3, [r0, r4]
}
    4468:	bc70      	pop	{r4, r5, r6}
    446a:	4770      	bx	lr
    446c:	ffff0000 	.word	0xffff0000
    4470:	40008004 	.word	0x40008004
    4474:	40008008 	.word	0x40008008

00004478 <am_hal_ctimer_int_enable>:
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    4478:	4a02      	ldr	r2, [pc, #8]	; (4484 <am_hal_ctimer_int_enable+0xc>)
    447a:	6813      	ldr	r3, [r2, #0]
    447c:	4318      	orrs	r0, r3
    447e:	6010      	str	r0, [r2, #0]
    4480:	4770      	bx	lr
    4482:	bf00      	nop
    4484:	40008200 	.word	0x40008200

00004488 <am_hal_ctimer_int_clear>:
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTCLR) = ui32Interrupt;
    4488:	4b01      	ldr	r3, [pc, #4]	; (4490 <am_hal_ctimer_int_clear+0x8>)
    448a:	6018      	str	r0, [r3, #0]
    448c:	4770      	bx	lr
    448e:	bf00      	nop
    4490:	40008208 	.word	0x40008208

00004494 <am_hal_ctimer_int_status_get>:
am_hal_ctimer_int_status_get(bool bEnabledOnly)
{
    //
    // Return the desired status.
    //
    if (bEnabledOnly)
    4494:	b910      	cbnz	r0, 449c <am_hal_ctimer_int_status_get+0x8>
        uint32_t u32RetVal = AM_REGn(CTIMER, 0, INTSTAT);
        return u32RetVal & AM_REGn(CTIMER, 0, INTEN);
    }
    else
    {
        return AM_REGn(CTIMER, 0, INTSTAT);
    4496:	4b04      	ldr	r3, [pc, #16]	; (44a8 <am_hal_ctimer_int_status_get+0x14>)
    4498:	6818      	ldr	r0, [r3, #0]
    }
}
    449a:	4770      	bx	lr
        uint32_t u32RetVal = AM_REGn(CTIMER, 0, INTSTAT);
    449c:	4a02      	ldr	r2, [pc, #8]	; (44a8 <am_hal_ctimer_int_status_get+0x14>)
        return u32RetVal & AM_REGn(CTIMER, 0, INTEN);
    449e:	4903      	ldr	r1, [pc, #12]	; (44ac <am_hal_ctimer_int_status_get+0x18>)
        uint32_t u32RetVal = AM_REGn(CTIMER, 0, INTSTAT);
    44a0:	6810      	ldr	r0, [r2, #0]
        return u32RetVal & AM_REGn(CTIMER, 0, INTEN);
    44a2:	680b      	ldr	r3, [r1, #0]
    44a4:	4018      	ands	r0, r3
    44a6:	4770      	bx	lr
    44a8:	40008204 	.word	0x40008204
    44ac:	40008200 	.word	0x40008200

000044b0 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    44b0:	e7fe      	b.n	44b0 <am_hal_debug_error>
    44b2:	bf00      	nop

000044b4 <am_hal_flash_delay>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_flash_delay(uint32_t ui32Iterations)
{
    __asm("    subs    r0, #1\n"
    44b4:	3801      	subs	r0, #1
    44b6:	f47f affd 	bne.w	44b4 <am_hal_flash_delay>
    44ba:	4770      	bx	lr

000044bc <am_hal_gpio_out_enable_bit_get>:
am_hal_gpio_out_enable_bit_get(uint32_t ui32BitNum)
{
    //
    // Handle upper or lower GPIO word  and return 0 or 1.
    //
    if ( ui32BitNum > 31 )
    44bc:	281f      	cmp	r0, #31
    {
        return !!(AM_REGn(GPIO, 0, ENB) & (1 << (ui32BitNum - 32)));
    44be:	bf8a      	itet	hi
    44c0:	4a05      	ldrhi	r2, [pc, #20]	; (44d8 <am_hal_gpio_out_enable_bit_get+0x1c>)
    }
    else
    {
        return !!(AM_REGn(GPIO, 0, ENA) & (1 << ui32BitNum));
    44c2:	4a06      	ldrls	r2, [pc, #24]	; (44dc <am_hal_gpio_out_enable_bit_get+0x20>)
        return !!(AM_REGn(GPIO, 0, ENB) & (1 << (ui32BitNum - 32)));
    44c4:	3820      	subhi	r0, #32
        return !!(AM_REGn(GPIO, 0, ENA) & (1 << ui32BitNum));
    44c6:	2301      	movs	r3, #1
    44c8:	6812      	ldr	r2, [r2, #0]
    44ca:	fa03 f000 	lsl.w	r0, r3, r0
    44ce:	4210      	tst	r0, r2
    44d0:	bf14      	ite	ne
    44d2:	4618      	movne	r0, r3
    44d4:	2000      	moveq	r0, #0
    }
}
    44d6:	4770      	bx	lr
    44d8:	400100a4 	.word	0x400100a4
    44dc:	400100a0 	.word	0x400100a0

000044e0 <am_hal_gpio_int_enable>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_enable(uint64_t ui64Interrupt)
{
    44e0:	b410      	push	{r4}
    //
    // Enable the interrupts.
    //
    AM_REG(GPIO, INT1EN) |= (ui64Interrupt >> 32);
    44e2:	4c05      	ldr	r4, [pc, #20]	; (44f8 <am_hal_gpio_int_enable+0x18>)
    AM_REG(GPIO, INT0EN) |= (ui64Interrupt & 0xFFFFFFFF);
    44e4:	4a05      	ldr	r2, [pc, #20]	; (44fc <am_hal_gpio_int_enable+0x1c>)
    AM_REG(GPIO, INT1EN) |= (ui64Interrupt >> 32);
    44e6:	6823      	ldr	r3, [r4, #0]
    44e8:	4319      	orrs	r1, r3
    44ea:	6021      	str	r1, [r4, #0]
    AM_REG(GPIO, INT0EN) |= (ui64Interrupt & 0xFFFFFFFF);
    44ec:	6811      	ldr	r1, [r2, #0]
}
    44ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(GPIO, INT0EN) |= (ui64Interrupt & 0xFFFFFFFF);
    44f2:	4308      	orrs	r0, r1
    44f4:	6010      	str	r0, [r2, #0]
}
    44f6:	4770      	bx	lr
    44f8:	40010210 	.word	0x40010210
    44fc:	40010200 	.word	0x40010200

00004500 <am_hal_gpio_int_clear>:
am_hal_gpio_int_clear(uint64_t ui64Interrupt)
{
    //
    // Clear the interrupts.
    //
    AM_REG(GPIO, INT1CLR) = (ui64Interrupt >> 32);
    4500:	4a02      	ldr	r2, [pc, #8]	; (450c <am_hal_gpio_int_clear+0xc>)
    AM_REG(GPIO, INT0CLR) = (ui64Interrupt & 0xFFFFFFFF);
    4502:	4b03      	ldr	r3, [pc, #12]	; (4510 <am_hal_gpio_int_clear+0x10>)
    AM_REG(GPIO, INT1CLR) = (ui64Interrupt >> 32);
    4504:	6011      	str	r1, [r2, #0]
    AM_REG(GPIO, INT0CLR) = (ui64Interrupt & 0xFFFFFFFF);
    4506:	6018      	str	r0, [r3, #0]
    4508:	4770      	bx	lr
    450a:	bf00      	nop
    450c:	40010218 	.word	0x40010218
    4510:	40010208 	.word	0x40010208

00004514 <am_hal_gpio_int_status_get>:
//! @return None
//
//*****************************************************************************
uint64_t
am_hal_gpio_int_status_get(bool bEnabledOnly)
{
    4514:	b470      	push	{r4, r5, r6}
    uint64_t u64RetVal, u64Mask;
    //
    // Combine upper or lower GPIO words into one 64 bit return value.
    //
    if (bEnabledOnly)
    4516:	b930      	cbnz	r0, 4526 <am_hal_gpio_int_status_get+0x12>
        u64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
        return u64RetVal & u64Mask;
    }
    else
    {
        u64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    4518:	4a0b      	ldr	r2, [pc, #44]	; (4548 <am_hal_gpio_int_status_get+0x34>)
        u64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    451a:	4b0c      	ldr	r3, [pc, #48]	; (454c <am_hal_gpio_int_status_get+0x38>)
        u64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    451c:	6811      	ldr	r1, [r2, #0]
        u64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    451e:	681c      	ldr	r4, [r3, #0]
    4520:	4320      	orrs	r0, r4
        return u64RetVal;
    }
}
    4522:	bc70      	pop	{r4, r5, r6}
    4524:	4770      	bx	lr
        u64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
    4526:	4d0a      	ldr	r5, [pc, #40]	; (4550 <am_hal_gpio_int_status_get+0x3c>)
        u64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
    4528:	4e0a      	ldr	r6, [pc, #40]	; (4554 <am_hal_gpio_int_status_get+0x40>)
        u64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    452a:	4c07      	ldr	r4, [pc, #28]	; (4548 <am_hal_gpio_int_status_get+0x34>)
        u64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    452c:	4a07      	ldr	r2, [pc, #28]	; (454c <am_hal_gpio_int_status_get+0x38>)
        u64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
    452e:	6829      	ldr	r1, [r5, #0]
        u64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
    4530:	6835      	ldr	r5, [r6, #0]
        u64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    4532:	6823      	ldr	r3, [r4, #0]
        u64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    4534:	6816      	ldr	r6, [r2, #0]
        u64RetVal  = ((uint64_t) AM_REGn(GPIO, 0, INT1EN)) << 32;
    4536:	2000      	movs	r0, #0
        u64Mask    = ((uint64_t) AM_REGn(GPIO, 0, INT1STAT)) << 32;
    4538:	4602      	mov	r2, r0
        u64Mask   |= ((uint64_t) AM_REGn(GPIO, 0, INT0STAT)) << 0;
    453a:	4332      	orrs	r2, r6
        u64RetVal |= ((uint64_t) AM_REGn(GPIO, 0, INT0EN)) << 0;
    453c:	4328      	orrs	r0, r5
        return u64RetVal & u64Mask;
    453e:	4010      	ands	r0, r2
    4540:	4019      	ands	r1, r3
}
    4542:	bc70      	pop	{r4, r5, r6}
    4544:	4770      	bx	lr
    4546:	bf00      	nop
    4548:	40010214 	.word	0x40010214
    454c:	40010204 	.word	0x40010204
    4550:	40010210 	.word	0x40010210
    4554:	40010200 	.word	0x40010200

00004558 <am_hal_gpio_int_service>:
//! @return None.
//
//*****************************************************************************
void
am_hal_gpio_int_service(uint64_t ui64Status)
{
    4558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    455a:	460c      	mov	r4, r1

    //
    // Handle any active interrupts in the lower 32 bits
    //
    ui32Status = (uint32_t) ui64Status;
    while ( ui32Status )
    455c:	b188      	cbz	r0, 4582 <am_hal_gpio_int_service+0x2a>
    455e:	4f13      	ldr	r7, [pc, #76]	; (45ac <am_hal_gpio_int_service+0x54>)
    4560:	4605      	mov	r5, r0
#endif

        //
        // Turn off the bit we picked in the working copy
        //
        ui32Status &= ~(0x80000000 >> ui32Clz);
    4562:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
        ui32Clz = __builtin_clz(ui32Status);
    4566:	fab5 f385 	clz	r3, r5

        //
        // Check the bit handler table to see if there is an interrupt handler
        // registered for this particular bit.
        //
        pfnHandler = am_hal_gpio_ppfnHandlers[31 - ui32Clz];
    456a:	f1c3 021f 	rsb	r2, r3, #31
        ui32Status &= ~(0x80000000 >> ui32Clz);
    456e:	fa26 f003 	lsr.w	r0, r6, r3
        pfnHandler = am_hal_gpio_ppfnHandlers[31 - ui32Clz];
    4572:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
        ui32Status &= ~(0x80000000 >> ui32Clz);
    4576:	ea25 0500 	bic.w	r5, r5, r0
        if ( pfnHandler )
    457a:	b101      	cbz	r1, 457e <am_hal_gpio_int_service+0x26>
        {
            //
            // If we found an interrupt handler routine, call it now.
            //
            pfnHandler();
    457c:	4788      	blx	r1
    while ( ui32Status )
    457e:	2d00      	cmp	r5, #0
    4580:	d1f1      	bne.n	4566 <am_hal_gpio_int_service+0xe>

    //
    // Handle any active interrupts in the upper 32 bits
    //
    ui32Status = (uint32_t) (ui64Status >> 32);
    while ( ui32Status )
    4582:	b18c      	cbz	r4, 45a8 <am_hal_gpio_int_service+0x50>
    4584:	4f09      	ldr	r7, [pc, #36]	; (45ac <am_hal_gpio_int_service+0x54>)
#endif

        //
        // Turn off the bit we picked in the working copy
        //
        ui32Status &= ~(0x80000000 >> ui32Clz);
    4586:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
        ui32Clz = __builtin_clz(ui32Status);
    458a:	fab4 fc84 	clz	ip, r4

        //
        // Check the bit handler table to see if there is an interrupt handler
        // registered for this particular bit.
        //
        pfnHandler = am_hal_gpio_ppfnHandlers[63 - ui32Clz];
    458e:	f1cc 023f 	rsb	r2, ip, #63	; 0x3f
        ui32Status &= ~(0x80000000 >> ui32Clz);
    4592:	fa26 f30c 	lsr.w	r3, r6, ip
        pfnHandler = am_hal_gpio_ppfnHandlers[63 - ui32Clz];
    4596:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
        ui32Status &= ~(0x80000000 >> ui32Clz);
    459a:	ea24 0403 	bic.w	r4, r4, r3
        if ( pfnHandler )
    459e:	b100      	cbz	r0, 45a2 <am_hal_gpio_int_service+0x4a>
        {
            //
            // If we found an interrupt handler routine, call it now.
            //
            pfnHandler();
    45a0:	4780      	blx	r0
    while ( ui32Status )
    45a2:	2c00      	cmp	r4, #0
    45a4:	d1f1      	bne.n	458a <am_hal_gpio_int_service+0x32>
    45a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45aa:	bf00      	nop
    45ac:	100065a0 	.word	0x100065a0

000045b0 <am_hal_gpio_int_register>:
                         am_hal_gpio_handler_t pfnHandler)
{
    //
    // Check to make sure the GPIO number is valid. (Debug builds only)
    //
    am_hal_debug_assert_msg(ui32GPIONumber <= 64, "GPIO number out of range.");
    45b0:	2840      	cmp	r0, #64	; 0x40
{
    45b2:	b538      	push	{r3, r4, r5, lr}
    45b4:	4604      	mov	r4, r0
    45b6:	460d      	mov	r5, r1
    am_hal_debug_assert_msg(ui32GPIONumber <= 64, "GPIO number out of range.");
    45b8:	d905      	bls.n	45c6 <am_hal_gpio_int_register+0x16>
    45ba:	4a05      	ldr	r2, [pc, #20]	; (45d0 <am_hal_gpio_int_register+0x20>)
    45bc:	4805      	ldr	r0, [pc, #20]	; (45d4 <am_hal_gpio_int_register+0x24>)
    45be:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    45c2:	f7ff ff75 	bl	44b0 <am_hal_debug_error>

    am_hal_gpio_ppfnHandlers[ui32GPIONumber] = pfnHandler;
    45c6:	4b04      	ldr	r3, [pc, #16]	; (45d8 <am_hal_gpio_int_register+0x28>)
    45c8:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
    45cc:	bd38      	pop	{r3, r4, r5, pc}
    45ce:	bf00      	nop
    45d0:	00004ab4 	.word	0x00004ab4
    45d4:	00004ae8 	.word	0x00004ae8
    45d8:	100065a0 	.word	0x100065a0

000045dc <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    45dc:	280f      	cmp	r0, #15
    45de:	d80b      	bhi.n	45f8 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    45e0:	2805      	cmp	r0, #5
    45e2:	d013      	beq.n	460c <am_hal_interrupt_enable+0x30>
    45e4:	2806      	cmp	r0, #6
    45e6:	d017      	beq.n	4618 <am_hal_interrupt_enable+0x3c>
    45e8:	2804      	cmp	r0, #4
    45ea:	d104      	bne.n	45f6 <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    45ec:	4a0d      	ldr	r2, [pc, #52]	; (4624 <am_hal_interrupt_enable+0x48>)
    45ee:	6813      	ldr	r3, [r2, #0]
    45f0:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    45f4:	6010      	str	r0, [r2, #0]
    45f6:	4770      	bx	lr
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    45f8:	f1a0 0310 	sub.w	r3, r0, #16
    45fc:	f003 0c1f 	and.w	ip, r3, #31
    4600:	2001      	movs	r0, #1
    4602:	4909      	ldr	r1, [pc, #36]	; (4628 <am_hal_interrupt_enable+0x4c>)
    4604:	fa00 f20c 	lsl.w	r2, r0, ip
    4608:	600a      	str	r2, [r1, #0]
    460a:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    460c:	4805      	ldr	r0, [pc, #20]	; (4624 <am_hal_interrupt_enable+0x48>)
    460e:	6801      	ldr	r1, [r0, #0]
    4610:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    4614:	6002      	str	r2, [r0, #0]
            break;
    4616:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    4618:	4902      	ldr	r1, [pc, #8]	; (4624 <am_hal_interrupt_enable+0x48>)
    461a:	680a      	ldr	r2, [r1, #0]
    461c:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    4620:	600b      	str	r3, [r1, #0]
            break;
    4622:	4770      	bx	lr
    4624:	e000ed24 	.word	0xe000ed24
    4628:	e000e100 	.word	0xe000e100

0000462c <am_hal_interrupt_priority_set>:
//! @return None
//
//*****************************************************************************
void
am_hal_interrupt_priority_set(uint32_t ui32Interrupt, uint32_t ui32Priority)
{
    462c:	b410      	push	{r4}

    //
    // Find the correct priority register.
    //
    pui32PriorityReg = (volatile uint32_t *) AM_REG_NVIC_IPR0_O;
    pui32PriorityReg += ((ui32Interrupt - 16) >> 2);
    462e:	f1a0 0310 	sub.w	r3, r0, #16
    4632:	f023 0203 	bic.w	r2, r3, #3
    4636:	f102 4460 	add.w	r4, r2, #3758096384	; 0xe0000000
    463a:	f504 4c64 	add.w	ip, r4, #58368	; 0xe400
{
    463e:	b083      	sub	sp, #12
    ui32Shift = (((ui32Interrupt - 16) & 0x3) * 8);

    //
    // Mask out the old priority.
    //
    ui32OldPriority = *pui32PriorityReg;
    4640:	f8dc 3000 	ldr.w	r3, [ip]
    4644:	9301      	str	r3, [sp, #4]
    ui32Shift = (((ui32Interrupt - 16) & 0x3) * 8);
    4646:	f000 0003 	and.w	r0, r0, #3
    ui32OldPriority &= ~(0xFF << ui32Shift);
    464a:	9a01      	ldr	r2, [sp, #4]
    ui32Shift = (((ui32Interrupt - 16) & 0x3) * 8);
    464c:	00c0      	lsls	r0, r0, #3
    ui32OldPriority &= ~(0xFF << ui32Shift);
    464e:	24ff      	movs	r4, #255	; 0xff
    4650:	4084      	lsls	r4, r0
    4652:	ea22 0304 	bic.w	r3, r2, r4
    4656:	9301      	str	r3, [sp, #4]

    //
    // OR in the new priority.
    //
    *pui32PriorityReg = ui32OldPriority | (ui32Priority << ui32Shift);
    4658:	9c01      	ldr	r4, [sp, #4]
    465a:	4081      	lsls	r1, r0
    465c:	4321      	orrs	r1, r4
    465e:	f8cc 1000 	str.w	r1, [ip]
}
    4662:	b003      	add	sp, #12
    4664:	f85d 4b04 	ldr.w	r4, [sp], #4
    4668:	4770      	bx	lr
    466a:	bf00      	nop

0000466c <am_hal_interrupt_master_enable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    466c:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    4670:	b662      	cpsie	i
    __asm("    bx lr");
    4672:	4770      	bx	lr

00004674 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    4674:	4b0d      	ldr	r3, [pc, #52]	; (46ac <am_hal_itm_enable+0x38>)
    4676:	6818      	ldr	r0, [r3, #0]
    4678:	07c2      	lsls	r2, r0, #31
    467a:	d416      	bmi.n	46aa <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    467c:	4a0c      	ldr	r2, [pc, #48]	; (46b0 <am_hal_itm_enable+0x3c>)
    467e:	6811      	ldr	r1, [r2, #0]
{
    4680:	b430      	push	{r4, r5}
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    4682:	f041 7480 	orr.w	r4, r1, #16777216	; 0x1000000
    4686:	6014      	str	r4, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    4688:	6815      	ldr	r5, [r2, #0]
    468a:	01eb      	lsls	r3, r5, #7
    468c:	d5fc      	bpl.n	4688 <am_hal_itm_enable+0x14>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    468e:	4809      	ldr	r0, [pc, #36]	; (46b4 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    4690:	4c09      	ldr	r4, [pc, #36]	; (46b8 <am_hal_itm_enable+0x44>)
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    4692:	4d0a      	ldr	r5, [pc, #40]	; (46bc <am_hal_itm_enable+0x48>)
    4694:	6005      	str	r5, [r0, #0]
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    4696:	250f      	movs	r5, #15
    4698:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    469a:	bc30      	pop	{r4, r5}
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    469c:	4908      	ldr	r1, [pc, #32]	; (46c0 <am_hal_itm_enable+0x4c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    469e:	4b09      	ldr	r3, [pc, #36]	; (46c4 <am_hal_itm_enable+0x50>)
    46a0:	4a09      	ldr	r2, [pc, #36]	; (46c8 <am_hal_itm_enable+0x54>)
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    46a2:	f04f 30ff 	mov.w	r0, #4294967295
    46a6:	6008      	str	r0, [r1, #0]
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    46a8:	601a      	str	r2, [r3, #0]
}
    46aa:	4770      	bx	lr
    46ac:	1000656c 	.word	0x1000656c
    46b0:	e000edfc 	.word	0xe000edfc
    46b4:	e0000fb0 	.word	0xe0000fb0
    46b8:	e0000e40 	.word	0xe0000e40
    46bc:	c5acce55 	.word	0xc5acce55
    46c0:	e0000e00 	.word	0xe0000e00
    46c4:	e0000e80 	.word	0xe0000e80
    46c8:	00150511 	.word	0x00150511

000046cc <am_hal_itm_disable>:
//*****************************************************************************
void
am_hal_itm_disable(void)
{

    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    46cc:	4b0f      	ldr	r3, [pc, #60]	; (470c <am_hal_itm_disable+0x40>)
    46ce:	6818      	ldr	r0, [r3, #0]
    46d0:	07c2      	lsls	r2, r0, #31
    46d2:	d419      	bmi.n	4708 <am_hal_itm_disable+0x3c>
    }

    //
    // Make sure the ITM_TCR is unlocked.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    46d4:	4b0e      	ldr	r3, [pc, #56]	; (4710 <am_hal_itm_disable+0x44>)
    46d6:	490f      	ldr	r1, [pc, #60]	; (4714 <am_hal_itm_disable+0x48>)

    //
    // Make sure the ITM/TPIU is not busy.
    //
    while ( AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1) );
    46d8:	4a0f      	ldr	r2, [pc, #60]	; (4718 <am_hal_itm_disable+0x4c>)
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    46da:	6019      	str	r1, [r3, #0]
    while ( AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1) );
    46dc:	6810      	ldr	r0, [r2, #0]
    46de:	0203      	lsls	r3, r0, #8
    46e0:	d4fc      	bmi.n	46dc <am_hal_itm_disable+0x10>
    //
    // Disable the ITM.
    //
    for (int ix = 0; ix < 100; ix++)
    {
        AM_REG(ITM, TCR) &= ~AM_REG_ITM_TCR_ITM_ENABLE(1);
    46e2:	4a0d      	ldr	r2, [pc, #52]	; (4718 <am_hal_itm_disable+0x4c>)
        while ( AM_REG(ITM, TCR) & (AM_REG_ITM_TCR_ITM_ENABLE(1) | AM_REG_ITM_TCR_BUSY(1)) );
    46e4:	490d      	ldr	r1, [pc, #52]	; (471c <am_hal_itm_disable+0x50>)
    46e6:	2064      	movs	r0, #100	; 0x64
        AM_REG(ITM, TCR) &= ~AM_REG_ITM_TCR_ITM_ENABLE(1);
    46e8:	6813      	ldr	r3, [r2, #0]
    46ea:	f023 0301 	bic.w	r3, r3, #1
    46ee:	6013      	str	r3, [r2, #0]
        while ( AM_REG(ITM, TCR) & (AM_REG_ITM_TCR_ITM_ENABLE(1) | AM_REG_ITM_TCR_BUSY(1)) );
    46f0:	6813      	ldr	r3, [r2, #0]
    46f2:	420b      	tst	r3, r1
    46f4:	d1fc      	bne.n	46f0 <am_hal_itm_disable+0x24>
    for (int ix = 0; ix < 100; ix++)
    46f6:	3801      	subs	r0, #1
    46f8:	d1f6      	bne.n	46e8 <am_hal_itm_disable+0x1c>

    //
    // Reset the TRCENA bit in the DEMCR register, which should disable the ITM
    // for operation.
    //
    AM_REG(SYSCTRL, DEMCR) &= ~AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    46fa:	4a09      	ldr	r2, [pc, #36]	; (4720 <am_hal_itm_disable+0x54>)

    //
    // Disable the TPIU clock source in MCU control.
    //
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    46fc:	4909      	ldr	r1, [pc, #36]	; (4724 <am_hal_itm_disable+0x58>)
    AM_REG(SYSCTRL, DEMCR) &= ~AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    46fe:	6813      	ldr	r3, [r2, #0]
    4700:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    4704:	6013      	str	r3, [r2, #0]
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    4706:	6008      	str	r0, [r1, #0]
    4708:	4770      	bx	lr
    470a:	bf00      	nop
    470c:	1000656c 	.word	0x1000656c
    4710:	e0000fb0 	.word	0xe0000fb0
    4714:	c5acce55 	.word	0xc5acce55
    4718:	e0000e80 	.word	0xe0000e80
    471c:	00800001 	.word	0x00800001
    4720:	e000edfc 	.word	0xe000edfc
    4724:	40020250 	.word	0x40020250

00004728 <am_hal_itm_not_busy>:
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_not_busy(void)
{
    4728:	b508      	push	{r3, lr}
    //
    // Make sure the ITM/TPIU is not busy.
    //
    while (AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1));
    472a:	4a08      	ldr	r2, [pc, #32]	; (474c <am_hal_itm_not_busy+0x24>)
    472c:	6813      	ldr	r3, [r2, #0]
    472e:	021b      	lsls	r3, r3, #8
    4730:	d4fc      	bmi.n	472c <am_hal_itm_not_busy+0x4>

    // wait for 50us for the data to flush out
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    4732:	f7ff fd3d 	bl	41b0 <am_hal_clkgen_sysclk_get>
    4736:	4906      	ldr	r1, [pc, #24]	; (4750 <am_hal_itm_not_busy+0x28>)
    4738:	fba1 3000 	umull	r3, r0, r1, r0
    473c:	0c80      	lsrs	r0, r0, #18
    473e:	2232      	movs	r2, #50	; 0x32
    4740:	fb02 f000 	mul.w	r0, r2, r0
}
    4744:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    4748:	f7ff beb4 	b.w	44b4 <am_hal_flash_delay>
    474c:	e0000e80 	.word	0xe0000e80
    4750:	165e9f81 	.word	0x165e9f81

00004754 <am_hal_itm_print>:
    uint32_t ui32Idx;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    4754:	7803      	ldrb	r3, [r0, #0]
    4756:	b1b3      	cbz	r3, 4786 <am_hal_itm_print+0x32>
{
    4758:	b410      	push	{r4}
    475a:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    475c:	2400      	movs	r4, #0
    475e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    4762:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    4764:	2900      	cmp	r1, #0
    4766:	d1fa      	bne.n	475e <am_hal_itm_print+0xa>
    4768:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    476a:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
        else
        {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    476e:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    4772:	f8dc 3000 	ldr.w	r3, [ip]
    4776:	2b00      	cmp	r3, #0
    4778:	d0fb      	beq.n	4772 <am_hal_itm_print+0x1e>
    while (ui32Length)
    477a:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    477c:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    4780:	d1f5      	bne.n	476e <am_hal_itm_print+0x1a>
            // Subtract from length.
            //
            ui32Length--;
        }
    }
}
    4782:	f85d 4b04 	ldr.w	r4, [sp], #4
    4786:	4770      	bx	lr

00004788 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    4788:	490d      	ldr	r1, [pc, #52]	; (47c0 <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    478a:	4b0e      	ldr	r3, [pc, #56]	; (47c4 <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    478c:	4a0e      	ldr	r2, [pc, #56]	; (47c8 <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    478e:	681b      	ldr	r3, [r3, #0]
{
    4790:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    4792:	680d      	ldr	r5, [r1, #0]
    4794:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    4796:	6815      	ldr	r5, [r2, #0]
    4798:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    479a:	4c0c      	ldr	r4, [pc, #48]	; (47cc <am_hal_mcuctrl_fault_status+0x44>)
    479c:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    479e:	4329      	orrs	r1, r5
    47a0:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    47a2:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    47a4:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    47a8:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    47aa:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    47ac:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    47b0:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    47b4:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    47b6:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    47b8:	6142      	str	r2, [r0, #20]
}
    47ba:	bc70      	pop	{r4, r5, r6}
    47bc:	4770      	bx	lr
    47be:	bf00      	nop
    47c0:	400201c4 	.word	0x400201c4
    47c4:	400201cc 	.word	0x400201cc
    47c8:	400201c0 	.word	0x400201c0
    47cc:	400201c8 	.word	0x400201c8

000047d0 <am_hal_mcuctrl_flash_power_set>:
am_hal_mcuctrl_flash_power_set(uint32_t ui32FlashPower)
{
    //
    // Write desired flash power state.
    //
    AM_REG(MCUCTRL, FLASHPWRDIS) = ui32FlashPower;
    47d0:	4b01      	ldr	r3, [pc, #4]	; (47d8 <am_hal_mcuctrl_flash_power_set+0x8>)
    47d2:	6018      	str	r0, [r3, #0]
    47d4:	4770      	bx	lr
    47d6:	bf00      	nop
    47d8:	40020148 	.word	0x40020148

000047dc <am_hal_mcuctrl_sram_power_set>:
                              uint32_t ui32SRAMPowerDeepSleep)
{
    //
    // Write desired SRAM power state.
    //
    AM_REG(MCUCTRL, SRAMPWRDIS) = ui32SRAMPower;
    47dc:	4a02      	ldr	r2, [pc, #8]	; (47e8 <am_hal_mcuctrl_sram_power_set+0xc>)

    //
    // Write desired SRAM deep sleep power state.
    //
    AM_REG(MCUCTRL, SRAMPWDINSLEEP) = ui32SRAMPowerDeepSleep;
    47de:	4b03      	ldr	r3, [pc, #12]	; (47ec <am_hal_mcuctrl_sram_power_set+0x10>)
    AM_REG(MCUCTRL, SRAMPWRDIS) = ui32SRAMPower;
    47e0:	6010      	str	r0, [r2, #0]
    AM_REG(MCUCTRL, SRAMPWDINSLEEP) = ui32SRAMPowerDeepSleep;
    47e2:	6019      	str	r1, [r3, #0]
    47e4:	4770      	bx	lr
    47e6:	bf00      	nop
    47e8:	40020144 	.word	0x40020144
    47ec:	40020140 	.word	0x40020140

000047f0 <am_hal_mcuctrl_bandgap_disable>:
am_hal_mcuctrl_bandgap_disable(void)
{
    //
    // Disable the Bandgap in the MCUCTRL.
    //
    AM_REG(MCUCTRL, BANDGAPEN) = ~AM_REG_MCUCTRL_BANDGAPEN_BGPEN_M;
    47f0:	4b02      	ldr	r3, [pc, #8]	; (47fc <am_hal_mcuctrl_bandgap_disable+0xc>)
    47f2:	f06f 0201 	mvn.w	r2, #1
    47f6:	601a      	str	r2, [r3, #0]
    47f8:	4770      	bx	lr
    47fa:	bf00      	nop
    47fc:	400200fc 	.word	0x400200fc

00004800 <am_hal_mcuctrl_bucks_enable>:
am_hal_mcuctrl_bucks_enable(void)
{
    //
    // Enable the core buck converter in the MCUCTRL.
    //
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    4800:	4b08      	ldr	r3, [pc, #32]	; (4824 <am_hal_mcuctrl_bucks_enable+0x24>)
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Poll until core buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    4802:	4a09      	ldr	r2, [pc, #36]	; (4828 <am_hal_mcuctrl_bucks_enable+0x28>)
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    4804:	6819      	ldr	r1, [r3, #0]
    4806:	f041 0002 	orr.w	r0, r1, #2
    480a:	6018      	str	r0, [r3, #0]
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    480c:	6819      	ldr	r1, [r3, #0]
    480e:	f041 0001 	orr.w	r0, r1, #1
    4812:	6018      	str	r0, [r3, #0]
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    4814:	6813      	ldr	r3, [r2, #0]
    4816:	0799      	lsls	r1, r3, #30
    4818:	d5fc      	bpl.n	4814 <am_hal_mcuctrl_bucks_enable+0x14>

    //
    // Poll until SRAM buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, MEMBUCKON) );
    481a:	4a03      	ldr	r2, [pc, #12]	; (4828 <am_hal_mcuctrl_bucks_enable+0x28>)
    481c:	6811      	ldr	r1, [r2, #0]
    481e:	07cb      	lsls	r3, r1, #31
    4820:	d5fc      	bpl.n	481c <am_hal_mcuctrl_bucks_enable+0x1c>
}
    4822:	4770      	bx	lr
    4824:	40020010 	.word	0x40020010
    4828:	40020014 	.word	0x40020014

0000482c <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    482c:	4a05      	ldr	r2, [pc, #20]	; (4844 <am_hal_rtc_osc_select+0x18>)
    482e:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    4830:	b918      	cbnz	r0, 483a <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    4832:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    4836:	6010      	str	r0, [r2, #0]
    4838:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    483a:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    483e:	6011      	str	r1, [r2, #0]
    4840:	4770      	bx	lr
    4842:	bf00      	nop
    4844:	4000400c 	.word	0x4000400c

00004848 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_BFW(RTC, RTCCTL, RSTOP, 1);
    4848:	4a02      	ldr	r2, [pc, #8]	; (4854 <am_hal_rtc_osc_disable+0xc>)
    484a:	6813      	ldr	r3, [r2, #0]
    484c:	f043 0010 	orr.w	r0, r3, #16
    4850:	6010      	str	r0, [r2, #0]
    4852:	4770      	bx	lr
    4854:	40004050 	.word	0x40004050

00004858 <am_hal_sysctrl_sleep>:
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    4858:	4a08      	ldr	r2, [pc, #32]	; (487c <am_hal_sysctrl_sleep+0x24>)
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    485a:	b118      	cbz	r0, 4864 <am_hal_sysctrl_sleep+0xc>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    485c:	4b08      	ldr	r3, [pc, #32]	; (4880 <am_hal_sysctrl_sleep+0x28>)
    485e:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    4860:	07c3      	lsls	r3, r0, #31
    4862:	d505      	bpl.n	4870 <am_hal_sysctrl_sleep+0x18>
    }
    else
    {
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    4864:	6811      	ldr	r1, [r2, #0]
    4866:	f021 0304 	bic.w	r3, r1, #4
    486a:	6013      	str	r3, [r2, #0]
    }

    //
    // Go to sleep.
    //
    AM_ASM_WFI;
    486c:	bf30      	wfi
    486e:	4770      	bx	lr
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    4870:	6810      	ldr	r0, [r2, #0]
    4872:	f040 0104 	orr.w	r1, r0, #4
    4876:	6011      	str	r1, [r2, #0]
    AM_ASM_WFI;
    4878:	bf30      	wfi
    487a:	4770      	bx	lr
    487c:	e000ed10 	.word	0xe000ed10
    4880:	40020250 	.word	0x40020250

00004884 <am_hal_sysctrl_fpu_enable>:
{
    //
    // Enable access to the FPU in both privileged and user modes.
    // NOTE: Write 0s to all reserved fields in this register.
    //
    AM_REG(SYSCTRL, CPACR) = (AM_REG_SYSCTRL_CPACR_CP11(0x3) |
    4884:	4b02      	ldr	r3, [pc, #8]	; (4890 <am_hal_sysctrl_fpu_enable+0xc>)
    4886:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
    488a:	601a      	str	r2, [r3, #0]
    488c:	4770      	bx	lr
    488e:	bf00      	nop
    4890:	e000ed88 	.word	0xe000ed88

00004894 <am_hal_sysctrl_fpu_stacking_enable>:
    {
        //
        // Enable automatic saving of FPU registers on exception entry, using lazy
        // context saving.
        //
        AM_REG(SYSCTRL, FPCCR) |= (AM_REG_SYSCTRL_FPCCR_ASPEN(0x1) |
    4894:	4a05      	ldr	r2, [pc, #20]	; (48ac <am_hal_sysctrl_fpu_stacking_enable+0x18>)
    4896:	6813      	ldr	r3, [r2, #0]
    if (bLazy)
    4898:	b918      	cbnz	r0, 48a2 <am_hal_sysctrl_fpu_stacking_enable+0xe>
    else
    {
        //
        // Enable automatic saving of FPU registers on exception entry.
        //
        AM_REG(SYSCTRL, FPCCR) |= AM_REG_SYSCTRL_FPCCR_ASPEN(0x1);
    489a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
    489e:	6010      	str	r0, [r2, #0]
    48a0:	4770      	bx	lr
        AM_REG(SYSCTRL, FPCCR) |= (AM_REG_SYSCTRL_FPCCR_ASPEN(0x1) |
    48a2:	f043 4140 	orr.w	r1, r3, #3221225472	; 0xc0000000
    48a6:	6011      	str	r1, [r2, #0]
    48a8:	4770      	bx	lr
    48aa:	bf00      	nop
    48ac:	e000ef34 	.word	0xe000ef34

000048b0 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    48b0:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    48b2:	4a24      	ldr	r2, [pc, #144]	; (4944 <am_hal_tpiu_enable+0x94>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    48b4:	6803      	ldr	r3, [r0, #0]
    AM_REG(TPIU, FFCR) = 0;
    48b6:	2100      	movs	r1, #0
    48b8:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    48ba:	b313      	cbz	r3, 4902 <am_hal_tpiu_enable+0x52>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    48bc:	f5a2 7c40 	sub.w	ip, r2, #768	; 0x300
    48c0:	2101      	movs	r1, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    48c2:	4c21      	ldr	r4, [pc, #132]	; (4948 <am_hal_tpiu_enable+0x98>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    48c4:	4d21      	ldr	r5, [pc, #132]	; (494c <am_hal_tpiu_enable+0x9c>)
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    48c6:	f8cc 1000 	str.w	r1, [ip]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    48ca:	f5a3 4e61 	sub.w	lr, r3, #57600	; 0xe100
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    48ce:	45a6      	cmp	lr, r4
    48d0:	bf94      	ite	ls
    48d2:	461c      	movls	r4, r3
    48d4:	462c      	movhi	r4, r5
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    48d6:	f7ff fc6b 	bl	41b0 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    48da:	1c43      	adds	r3, r0, #1
    48dc:	d02f      	beq.n	493e <am_hal_tpiu_enable+0x8e>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    48de:	08c2      	lsrs	r2, r0, #3
    48e0:	fbb2 f3f4 	udiv	r3, r2, r4
    48e4:	1e5d      	subs	r5, r3, #1
    48e6:	b2a8      	uxth	r0, r5
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    48e8:	4a19      	ldr	r2, [pc, #100]	; (4950 <am_hal_tpiu_enable+0xa0>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    48ea:	4c1a      	ldr	r4, [pc, #104]	; (4954 <am_hal_tpiu_enable+0xa4>)

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    48ec:	491a      	ldr	r1, [pc, #104]	; (4958 <am_hal_tpiu_enable+0xa8>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    48ee:	4b1b      	ldr	r3, [pc, #108]	; (495c <am_hal_tpiu_enable+0xac>)
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    48f0:	6010      	str	r0, [r2, #0]
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    48f2:	2502      	movs	r5, #2
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    48f4:	2000      	movs	r0, #0
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    48f6:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    48fa:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    48fc:	6008      	str	r0, [r1, #0]
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    48fe:	601a      	str	r2, [r3, #0]
    4900:	e010      	b.n	4924 <am_hal_tpiu_enable+0x74>
        //

        //
        // Set the Asynchronous Clock Prescaler Register.
        //
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    4902:	4c13      	ldr	r4, [pc, #76]	; (4950 <am_hal_tpiu_enable+0xa0>)
    4904:	6905      	ldr	r5, [r0, #16]
    4906:	6025      	str	r5, [r4, #0]

        //
        // Set the Selected Pin Protocol Register.
        //  e.g. AM_REG_TPIU_SPPR_TXMODE_UART
        //
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    4908:	6882      	ldr	r2, [r0, #8]
    490a:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    490e:	68c3      	ldr	r3, [r0, #12]
    4910:	4c13      	ldr	r4, [pc, #76]	; (4960 <am_hal_tpiu_enable+0xb0>)

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    4912:	4912      	ldr	r1, [pc, #72]	; (495c <am_hal_tpiu_enable+0xac>)
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    4914:	1e5d      	subs	r5, r3, #1
    4916:	2201      	movs	r2, #1
    4918:	40aa      	lsls	r2, r5
    491a:	6022      	str	r2, [r4, #0]
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    491c:	6840      	ldr	r0, [r0, #4]
    491e:	680b      	ldr	r3, [r1, #0]
    4920:	4303      	orrs	r3, r0
    4922:	600b      	str	r3, [r1, #0]
    }

    // wait for 50us for the data to flush out
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    4924:	f7ff fc44 	bl	41b0 <am_hal_clkgen_sysclk_get>
    4928:	4c0e      	ldr	r4, [pc, #56]	; (4964 <am_hal_tpiu_enable+0xb4>)
    492a:	fba4 3100 	umull	r3, r1, r4, r0
    492e:	0c88      	lsrs	r0, r1, #18
    4930:	2332      	movs	r3, #50	; 0x32
    4932:	fb03 f000 	mul.w	r0, r3, r0
}
    4936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    493a:	f7ff bdbb 	b.w	44b4 <am_hal_flash_delay>
    493e:	2002      	movs	r0, #2
    4940:	e7d2      	b.n	48e8 <am_hal_tpiu_enable+0x38>
    4942:	bf00      	nop
    4944:	e0040304 	.word	0xe0040304
    4948:	001da380 	.word	0x001da380
    494c:	000f4240 	.word	0x000f4240
    4950:	e0040010 	.word	0xe0040010
    4954:	e00400f0 	.word	0xe00400f0
    4958:	e0040f00 	.word	0xe0040f00
    495c:	40020250 	.word	0x40020250
    4960:	e0040004 	.word	0xe0040004
    4964:	165e9f81 	.word	0x165e9f81

00004968 <am_hal_tpiu_disable>:
am_hal_tpiu_disable(void)
{
    //
    // Disable the TPIU clock source in MCU control.
    //
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    4968:	4b01      	ldr	r3, [pc, #4]	; (4970 <am_hal_tpiu_disable+0x8>)
    496a:	2200      	movs	r2, #0
    496c:	601a      	str	r2, [r3, #0]
    496e:	4770      	bx	lr
    4970:	40020250 	.word	0x40020250

00004974 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    4974:	4b01      	ldr	r3, [pc, #4]	; (497c <am_hal_vcomp_disable+0x8>)
    4976:	2237      	movs	r2, #55	; 0x37
    4978:	601a      	str	r2, [r3, #0]
    497a:	4770      	bx	lr
    497c:	4000c008 	.word	0x4000c008

00004980 <memcpy>:
    4980:	b510      	push	{r4, lr}
    4982:	1e43      	subs	r3, r0, #1
    4984:	440a      	add	r2, r1
    4986:	4291      	cmp	r1, r2
    4988:	d100      	bne.n	498c <memcpy+0xc>
    498a:	bd10      	pop	{r4, pc}
    498c:	f811 4b01 	ldrb.w	r4, [r1], #1
    4990:	f803 4f01 	strb.w	r4, [r3, #1]!
    4994:	e7f7      	b.n	4986 <memcpy+0x6>

00004996 <memset>:
    4996:	4402      	add	r2, r0
    4998:	4603      	mov	r3, r0
    499a:	4293      	cmp	r3, r2
    499c:	d100      	bne.n	49a0 <memset+0xa>
    499e:	4770      	bx	lr
    49a0:	f803 1b01 	strb.w	r1, [r3], #1
    49a4:	e7f9      	b.n	499a <memset+0x4>
    49a6:	0000      	movs	r0, r0
    49a8:	00000001 	.word	0x00000001
    49ac:	0000020c 	.word	0x0000020c
    49b0:	00000000 	.word	0x00000000
    49b4:	454c4449 	.word	0x454c4449
    49b8:	00000000 	.word	0x00000000
    49bc:	20726d54 	.word	0x20726d54
    49c0:	00637653 	.word	0x00637653
    49c4:	65657246 	.word	0x65657246
    49c8:	534f5452 	.word	0x534f5452
    49cc:	776f4c20 	.word	0x776f4c20
    49d0:	776f5020 	.word	0x776f5020
    49d4:	45207265 	.word	0x45207265
    49d8:	706d6178 	.word	0x706d6178
    49dc:	000a656c 	.word	0x000a656c
    49e0:	5444454c 	.word	0x5444454c
    49e4:	3a6b7361 	.word	0x3a6b7361
    49e8:	74657320 	.word	0x74657320
    49ec:	0a0d7075 	.word	0x0a0d7075
    49f0:	00000000 	.word	0x00000000
    49f4:	6e6e7552 	.word	0x6e6e7552
    49f8:	20676e69 	.word	0x20676e69
    49fc:	75746573 	.word	0x75746573
    4a00:	61742070 	.word	0x61742070
    4a04:	2e736b73 	.word	0x2e736b73
    4a08:	0a0d2e2e 	.word	0x0a0d2e2e
    4a0c:	00000000 	.word	0x00000000
    4a10:	5444454c 	.word	0x5444454c
    4a14:	006b7361 	.word	0x006b7361
    4a18:	75746553 	.word	0x75746553
    4a1c:	00000070 	.word	0x00000070
    4a20:	0a0a0a0a 	.word	0x0a0a0a0a
    4a24:	0a0a0a0a 	.word	0x0a0a0a0a
    4a28:	0a0a0a0a 	.word	0x0a0a0a0a
    4a2c:	0a0a0a0a 	.word	0x0a0a0a0a
    4a30:	00000a0a 	.word	0x00000a0a
    4a34:	40008000 	.word	0x40008000
    4a38:	40008010 	.word	0x40008010
    4a3c:	40008020 	.word	0x40008020
    4a40:	40008030 	.word	0x40008030

00004a44 <CSWTCH.4>:
    4a44:	016e3600 00b71b00 007a1200 005b8d80     .6n.......z...[.
    4a54:	00493e00 003d0900 003450db 002dc6c0     .>I...=..P4...-.
    4a64:	6d695443 69207265 7265746e 74707572     CTimer interrupt
    4a74:	6d756e20 20726562 2074756f 7220666f      number out of r
    4a84:	65676e61 0000002e 2e5c2e2e 6d615c2e     ange......\..\am
    4a94:	6c61685f 6974635f 2e72656d 00000063     _hal_ctimer.c...
    4aa4:	20646142 4d495443 72205245 00646165     Bad CTIMER read.
    4ab4:	4f495047 6d756e20 20726562 2074756f     GPIO number out 
    4ac4:	7220666f 65676e61 0000002e 61766e49     of range....Inva
    4ad4:	2064696c 4f495047 6d756e20 2e726562     lid GPIO number.
    4ae4:	00000000 2e5c2e2e 6d615c2e 6c61685f     ......\..\am_hal
    4af4:	6970675f 00632e6f                       _gpio.c.
