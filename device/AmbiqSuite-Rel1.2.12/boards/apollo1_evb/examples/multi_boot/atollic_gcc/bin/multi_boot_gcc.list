
multi_boot_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000277c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000084  10001000  0000277c  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000a7c  10001084  00002800  00021084  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021084  2**0
                  CONTENTS, READONLY
  5 .debug_info   00008c1a  00000000  00000000  000210bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000249d  00000000  00000000  00029cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000008c8  00000000  00000000  0002c172  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000d58  00000000  00000000  0002ca3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000474d  00000000  00000000  0002d792  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000332c  00000000  00000000  00031edf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  0003520b  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001638  00000000  00000000  00035288  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002c32  00000000  00000000  000368c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 a5 1c 00 00 0d 1d 00 00 13 1d 00 00     ................
      10:	13 1d 00 00 13 1d 00 00 13 1d 00 00 00 00 00 00     ................
	...
      2c:	19 1d 00 00 19 1d 00 00 00 00 00 00 19 1d 00 00     ................
      3c:	19 1d 00 00 19 1d 00 00 19 1d 00 00 19 1d 00 00     ................
      4c:	19 1d 00 00 19 1d 00 00 9d 19 00 00 19 1d 00 00     ................
      5c:	19 1d 00 00 19 1d 00 00 b5 19 00 00 19 1d 00 00     ................
      6c:	e5 19 00 00 19 1d 00 00 19 1d 00 00 19 1d 00 00     ................
      7c:	19 1d 00 00                                         ....

00000080 <am_bootloader_fast_crc32>:
//! @return 32-bit CRC value.
//
//*****************************************************************************
uint32_t
am_bootloader_fast_crc32(const void *pvData, uint32_t ui32NumBytes)
{
      80:	b480      	push	{r7}
      82:	b087      	sub	sp, #28
      84:	af00      	add	r7, sp, #0
      86:	6078      	str	r0, [r7, #4]
      88:	6039      	str	r1, [r7, #0]
    uint32_t ui32CRC, ui32CRCIndex, i;
    uint8_t *pui8Data;

    ui32CRC = 0;
      8a:	2300      	movs	r3, #0
      8c:	617b      	str	r3, [r7, #20]
    pui8Data = (uint8_t *) pvData;
      8e:	687b      	ldr	r3, [r7, #4]
      90:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < ui32NumBytes; i++ )
      92:	2300      	movs	r3, #0
      94:	613b      	str	r3, [r7, #16]
      96:	e013      	b.n	c0 <am_bootloader_fast_crc32+0x40>
    {
        ui32CRCIndex = pui8Data[i] ^ (ui32CRC >> 24);
      98:	68fa      	ldr	r2, [r7, #12]
      9a:	693b      	ldr	r3, [r7, #16]
      9c:	4413      	add	r3, r2
      9e:	781b      	ldrb	r3, [r3, #0]
      a0:	461a      	mov	r2, r3
      a2:	697b      	ldr	r3, [r7, #20]
      a4:	0e1b      	lsrs	r3, r3, #24
      a6:	4053      	eors	r3, r2
      a8:	60bb      	str	r3, [r7, #8]
        ui32CRC = (ui32CRC << 8) ^ g_pui32CRC32Table[ui32CRCIndex];
      aa:	697b      	ldr	r3, [r7, #20]
      ac:	021a      	lsls	r2, r3, #8
      ae:	490a      	ldr	r1, [pc, #40]	; (d8 <am_bootloader_fast_crc32+0x58>)
      b0:	68bb      	ldr	r3, [r7, #8]
      b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      b6:	4053      	eors	r3, r2
      b8:	617b      	str	r3, [r7, #20]
    for (i = 0; i < ui32NumBytes; i++ )
      ba:	693b      	ldr	r3, [r7, #16]
      bc:	3301      	adds	r3, #1
      be:	613b      	str	r3, [r7, #16]
      c0:	693a      	ldr	r2, [r7, #16]
      c2:	683b      	ldr	r3, [r7, #0]
      c4:	429a      	cmp	r2, r3
      c6:	d3e7      	bcc.n	98 <am_bootloader_fast_crc32+0x18>
    }

    return ui32CRC;
      c8:	697b      	ldr	r3, [r7, #20]
}
      ca:	4618      	mov	r0, r3
      cc:	371c      	adds	r7, #28
      ce:	46bd      	mov	sp, r7
      d0:	f85d 7b04 	ldr.w	r7, [sp], #4
      d4:	4770      	bx	lr
      d6:	bf00      	nop
      d8:	000022d8 	.word	0x000022d8

000000dc <am_bootloader_partial_crc32>:
//
//*****************************************************************************
void
am_bootloader_partial_crc32(const void *pvData, uint32_t ui32NumBytes,
                            uint32_t *pui32CRC)
{
      dc:	b480      	push	{r7}
      de:	b089      	sub	sp, #36	; 0x24
      e0:	af00      	add	r7, sp, #0
      e2:	60f8      	str	r0, [r7, #12]
      e4:	60b9      	str	r1, [r7, #8]
      e6:	607a      	str	r2, [r7, #4]
    uint32_t ui32CRCIndex, i;
    uint8_t *pui8Data;

    uint32_t ui32TempCRC = *pui32CRC;
      e8:	687b      	ldr	r3, [r7, #4]
      ea:	681b      	ldr	r3, [r3, #0]
      ec:	61bb      	str	r3, [r7, #24]

    pui8Data = (uint8_t *) pvData;
      ee:	68fb      	ldr	r3, [r7, #12]
      f0:	617b      	str	r3, [r7, #20]

    for ( i = 0; i < ui32NumBytes; i++ )
      f2:	2300      	movs	r3, #0
      f4:	61fb      	str	r3, [r7, #28]
      f6:	e013      	b.n	120 <am_bootloader_partial_crc32+0x44>
    {
        ui32CRCIndex = pui8Data[i] ^ (ui32TempCRC >> 24);
      f8:	697a      	ldr	r2, [r7, #20]
      fa:	69fb      	ldr	r3, [r7, #28]
      fc:	4413      	add	r3, r2
      fe:	781b      	ldrb	r3, [r3, #0]
     100:	461a      	mov	r2, r3
     102:	69bb      	ldr	r3, [r7, #24]
     104:	0e1b      	lsrs	r3, r3, #24
     106:	4053      	eors	r3, r2
     108:	613b      	str	r3, [r7, #16]
        ui32TempCRC = (ui32TempCRC << 8) ^ g_pui32CRC32Table[ui32CRCIndex];
     10a:	69bb      	ldr	r3, [r7, #24]
     10c:	021a      	lsls	r2, r3, #8
     10e:	490b      	ldr	r1, [pc, #44]	; (13c <am_bootloader_partial_crc32+0x60>)
     110:	693b      	ldr	r3, [r7, #16]
     112:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
     116:	4053      	eors	r3, r2
     118:	61bb      	str	r3, [r7, #24]
    for ( i = 0; i < ui32NumBytes; i++ )
     11a:	69fb      	ldr	r3, [r7, #28]
     11c:	3301      	adds	r3, #1
     11e:	61fb      	str	r3, [r7, #28]
     120:	69fa      	ldr	r2, [r7, #28]
     122:	68bb      	ldr	r3, [r7, #8]
     124:	429a      	cmp	r2, r3
     126:	d3e7      	bcc.n	f8 <am_bootloader_partial_crc32+0x1c>
    }

    *pui32CRC = ui32TempCRC;
     128:	687b      	ldr	r3, [r7, #4]
     12a:	69ba      	ldr	r2, [r7, #24]
     12c:	601a      	str	r2, [r3, #0]
}
     12e:	bf00      	nop
     130:	3724      	adds	r7, #36	; 0x24
     132:	46bd      	mov	sp, r7
     134:	f85d 7b04 	ldr.w	r7, [sp], #4
     138:	4770      	bx	lr
     13a:	bf00      	nop
     13c:	000022d8 	.word	0x000022d8

00000140 <am_bootloader_flash_check>:
//! @return true if the image is safe to run.
//
//*****************************************************************************
bool
am_bootloader_flash_check(am_bootloader_image_t *psImage)
{
     140:	b580      	push	{r7, lr}
     142:	b092      	sub	sp, #72	; 0x48
     144:	af00      	add	r7, sp, #0
     146:	6078      	str	r0, [r7, #4]
    am_hal_mcuctrl_device_t sDevice;
    uint32_t ui32ResetVector, ui32StackPointer, ui32LinkAddress;

    ui32LinkAddress = (uint32_t) psImage->pui32LinkAddress;
     148:	687b      	ldr	r3, [r7, #4]
     14a:	681b      	ldr	r3, [r3, #0]
     14c:	63fb      	str	r3, [r7, #60]	; 0x3c

    // Get chip specific info
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &sDevice);
#else
    am_hal_mcuctrl_device_info_get(&sDevice);
     14e:	f107 030c 	add.w	r3, r7, #12
     152:	4618      	mov	r0, r3
     154:	f001 ff48 	bl	1fe8 <am_hal_mcuctrl_device_info_get>

    //
    // Make sure the link address is in flash.
    //
    if (((AM_HAL_FLASH_ADDR != 0) && (ui32LinkAddress < AM_HAL_FLASH_ADDR)) ||
        (ui32LinkAddress >= (AM_HAL_FLASH_ADDR + sDevice.ui32FlashSize)))
     158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    if (((AM_HAL_FLASH_ADDR != 0) && (ui32LinkAddress < AM_HAL_FLASH_ADDR)) ||
     15a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     15c:	429a      	cmp	r2, r3
     15e:	d801      	bhi.n	164 <am_bootloader_flash_check+0x24>
    {
        DPRINTF(("Link address outside of flash. 0x%08x\r\n", ui32LinkAddress));
        return false;
     160:	2300      	movs	r3, #0
     162:	e03f      	b.n	1e4 <am_bootloader_flash_check+0xa4>

    //
    // Check to see if the image was encrypted. If it was, these tests won't
    // work. We'll need to just skip them.
    //
    if ( psImage->bEncrypted == false )
     164:	687b      	ldr	r3, [r7, #4]
     166:	69db      	ldr	r3, [r3, #28]
     168:	2b00      	cmp	r3, #0
     16a:	d108      	bne.n	17e <am_bootloader_flash_check+0x3e>
    {
        ui32StackPointer = psImage->pui32LinkAddress[0];
     16c:	687b      	ldr	r3, [r7, #4]
     16e:	681b      	ldr	r3, [r3, #0]
     170:	681b      	ldr	r3, [r3, #0]
     172:	643b      	str	r3, [r7, #64]	; 0x40
        ui32ResetVector = psImage->pui32LinkAddress[1];
     174:	687b      	ldr	r3, [r7, #4]
     176:	681b      	ldr	r3, [r3, #0]
     178:	685b      	ldr	r3, [r3, #4]
     17a:	647b      	str	r3, [r7, #68]	; 0x44
     17c:	e005      	b.n	18a <am_bootloader_flash_check+0x4a>
    }
    else
    {
        ui32StackPointer = (uint32_t) psImage->pui32StackPointer;
     17e:	687b      	ldr	r3, [r7, #4]
     180:	695b      	ldr	r3, [r3, #20]
     182:	643b      	str	r3, [r7, #64]	; 0x40
        ui32ResetVector = (uint32_t) psImage->pui32ResetVector;
     184:	687b      	ldr	r3, [r7, #4]
     186:	699b      	ldr	r3, [r3, #24]
     188:	647b      	str	r3, [r7, #68]	; 0x44
    }

    //
    // Make sure the stack is in SRAM.
    //
    if (((SRAM_BASEADDR != 0) && (ui32StackPointer < SRAM_BASEADDR))
     18a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     18c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
     190:	d305      	bcc.n	19e <am_bootloader_flash_check+0x5e>
        || (ui32StackPointer >= (SRAM_BASEADDR + sDevice.ui32SRAMSize)))
     192:	6abb      	ldr	r3, [r7, #40]	; 0x28
     194:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
     198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     19a:	429a      	cmp	r2, r3
     19c:	d801      	bhi.n	1a2 <am_bootloader_flash_check+0x62>
    {
        DPRINTF(("Stack not in SRAM 0x%08x\r\n", ui32StackPointer));
        return false;
     19e:	2300      	movs	r3, #0
     1a0:	e020      	b.n	1e4 <am_bootloader_flash_check+0xa4>
    }

    //
    // Make sure the reset vector points somewhere in the image.
    //
    if (ui32ResetVector < ui32LinkAddress ||
     1a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
     1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     1a6:	429a      	cmp	r2, r3
     1a8:	d306      	bcc.n	1b8 <am_bootloader_flash_check+0x78>
        ui32ResetVector >= (ui32LinkAddress + psImage->ui32NumBytes))
     1aa:	687b      	ldr	r3, [r7, #4]
     1ac:	685a      	ldr	r2, [r3, #4]
     1ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     1b0:	441a      	add	r2, r3
    if (ui32ResetVector < ui32LinkAddress ||
     1b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     1b4:	429a      	cmp	r2, r3
     1b6:	d801      	bhi.n	1bc <am_bootloader_flash_check+0x7c>
    {
        DPRINTF(("Reset Vector not in image 0x%08x\r\n", ui32ResetVector));
        return false;
     1b8:	2300      	movs	r3, #0
     1ba:	e013      	b.n	1e4 <am_bootloader_flash_check+0xa4>
    }

    //
    // If the image isn't encrypted, run a CRC32.
    //
    if ( psImage->bEncrypted == false )
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	69db      	ldr	r3, [r3, #28]
     1c0:	2b00      	cmp	r3, #0
     1c2:	d10e      	bne.n	1e2 <am_bootloader_flash_check+0xa2>
    {
        //
        // Run a CRC on the image to make sure it matches the stored checksum
        // value.
        //
        if ( am_bootloader_fast_crc32(psImage->pui32LinkAddress, psImage->ui32NumBytes) !=
     1c4:	687b      	ldr	r3, [r7, #4]
     1c6:	681a      	ldr	r2, [r3, #0]
     1c8:	687b      	ldr	r3, [r7, #4]
     1ca:	685b      	ldr	r3, [r3, #4]
     1cc:	4619      	mov	r1, r3
     1ce:	4610      	mov	r0, r2
     1d0:	f7ff ff56 	bl	80 <am_bootloader_fast_crc32>
     1d4:	4602      	mov	r2, r0
             psImage->ui32CRC )
     1d6:	687b      	ldr	r3, [r7, #4]
     1d8:	689b      	ldr	r3, [r3, #8]
        if ( am_bootloader_fast_crc32(psImage->pui32LinkAddress, psImage->ui32NumBytes) !=
     1da:	429a      	cmp	r2, r3
     1dc:	d001      	beq.n	1e2 <am_bootloader_flash_check+0xa2>
        {
            DPRINTF(("Bad CRC 0x%08x\r\n", psImage->ui32CRC));
            return false;
     1de:	2300      	movs	r3, #0
     1e0:	e000      	b.n	1e4 <am_bootloader_flash_check+0xa4>
    }

    //
    // If those tests pass, we're probably safe to run.
    //
    return true;
     1e2:	2301      	movs	r3, #1
}
     1e4:	4618      	mov	r0, r3
     1e6:	3748      	adds	r7, #72	; 0x48
     1e8:	46bd      	mov	sp, r7
     1ea:	bd80      	pop	{r7, pc}

000001ec <am_hal_bootloader_override_check>:
//! @return true if override is asserted
//
//*****************************************************************************
bool
am_hal_bootloader_override_check(am_bootloader_image_t *psImage)
{
     1ec:	b490      	push	{r4, r7}
     1ee:	b084      	sub	sp, #16
     1f0:	af00      	add	r7, sp, #0
     1f2:	6078      	str	r0, [r7, #4]
    DPRINTF(("Entering %s 0x%08x\r\n", __func__, (uintptr_t)psImage));
    uint32_t    ui32OverridePin;
    //
    // Check the override GPIO
    //
    if ( psImage->ui32OverrideGPIO != 0xFFFFFFFF )
     1f4:	687b      	ldr	r3, [r7, #4]
     1f6:	68db      	ldr	r3, [r3, #12]
     1f8:	f1b3 3fff 	cmp.w	r3, #4294967295
     1fc:	f000 8103 	beq.w	406 <am_hal_bootloader_override_check+0x21a>
#endif
        //
        // Temporarily configure the override pin as an input.
        //
#ifndef AM_PART_APOLLO3
        am_hal_gpio_pin_config(psImage->ui32OverrideGPIO, AM_HAL_PIN_INPUT);
     200:	687b      	ldr	r3, [r7, #4]
     202:	68db      	ldr	r3, [r3, #12]
     204:	2b00      	cmp	r3, #0
     206:	db46      	blt.n	296 <am_hal_bootloader_override_check+0xaa>
     208:	4b82      	ldr	r3, [pc, #520]	; (414 <am_hal_bootloader_override_check+0x228>)
     20a:	2273      	movs	r2, #115	; 0x73
     20c:	601a      	str	r2, [r3, #0]
     20e:	687b      	ldr	r3, [r7, #4]
     210:	68db      	ldr	r3, [r3, #12]
     212:	085b      	lsrs	r3, r3, #1
     214:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     218:	4b7f      	ldr	r3, [pc, #508]	; (418 <am_hal_bootloader_override_check+0x22c>)
     21a:	4413      	add	r3, r2
     21c:	4618      	mov	r0, r3
     21e:	687b      	ldr	r3, [r7, #4]
     220:	68db      	ldr	r3, [r3, #12]
     222:	085b      	lsrs	r3, r3, #1
     224:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     228:	4b7b      	ldr	r3, [pc, #492]	; (418 <am_hal_bootloader_override_check+0x22c>)
     22a:	4413      	add	r3, r2
     22c:	681a      	ldr	r2, [r3, #0]
     22e:	687b      	ldr	r3, [r7, #4]
     230:	68db      	ldr	r3, [r3, #12]
     232:	009b      	lsls	r3, r3, #2
     234:	f003 031c 	and.w	r3, r3, #28
     238:	2107      	movs	r1, #7
     23a:	fa01 f303 	lsl.w	r3, r1, r3
     23e:	43db      	mvns	r3, r3
     240:	4013      	ands	r3, r2
     242:	6003      	str	r3, [r0, #0]
     244:	687b      	ldr	r3, [r7, #4]
     246:	68db      	ldr	r3, [r3, #12]
     248:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     24c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     250:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     254:	461c      	mov	r4, r3
     256:	687b      	ldr	r3, [r7, #4]
     258:	68db      	ldr	r3, [r3, #12]
     25a:	00db      	lsls	r3, r3, #3
     25c:	f003 0318 	and.w	r3, r3, #24
     260:	221a      	movs	r2, #26
     262:	409a      	lsls	r2, r3
     264:	687b      	ldr	r3, [r7, #4]
     266:	68db      	ldr	r3, [r3, #12]
     268:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     26c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     270:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     274:	6819      	ldr	r1, [r3, #0]
     276:	687b      	ldr	r3, [r7, #4]
     278:	68db      	ldr	r3, [r3, #12]
     27a:	00db      	lsls	r3, r3, #3
     27c:	f003 0318 	and.w	r3, r3, #24
     280:	20ff      	movs	r0, #255	; 0xff
     282:	fa00 f303 	lsl.w	r3, r0, r3
     286:	43db      	mvns	r3, r3
     288:	400b      	ands	r3, r1
     28a:	4313      	orrs	r3, r2
     28c:	6023      	str	r3, [r4, #0]
     28e:	4b61      	ldr	r3, [pc, #388]	; (414 <am_hal_bootloader_override_check+0x228>)
     290:	2200      	movs	r2, #0
     292:	601a      	str	r2, [r3, #0]
     294:	e000      	b.n	298 <am_hal_bootloader_override_check+0xac>
     296:	bf00      	nop

        //
        // If the override pin matches the specified polarity, force a failure.
        //
#ifndef AM_PART_APOLLO3
        ui32OverridePin = am_hal_gpio_input_bit_read(psImage->ui32OverrideGPIO);
     298:	687b      	ldr	r3, [r7, #4]
     29a:	68db      	ldr	r3, [r3, #12]
     29c:	08db      	lsrs	r3, r3, #3
     29e:	f003 0204 	and.w	r2, r3, #4
     2a2:	4b5e      	ldr	r3, [pc, #376]	; (41c <am_hal_bootloader_override_check+0x230>)
     2a4:	4413      	add	r3, r2
     2a6:	681a      	ldr	r2, [r3, #0]
     2a8:	687b      	ldr	r3, [r7, #4]
     2aa:	68db      	ldr	r3, [r3, #12]
     2ac:	f003 031f 	and.w	r3, r3, #31
     2b0:	fa22 f303 	lsr.w	r3, r2, r3
     2b4:	f003 0301 	and.w	r3, r3, #1
     2b8:	2b00      	cmp	r3, #0
     2ba:	bf14      	ite	ne
     2bc:	2301      	movne	r3, #1
     2be:	2300      	moveq	r3, #0
     2c0:	b2db      	uxtb	r3, r3
     2c2:	60fb      	str	r3, [r7, #12]
#else
        am_hal_gpio_state_read(psImage->ui32OverrideGPIO, AM_HAL_GPIO_INPUT_READ, &ui32OverridePin );
#endif
        if ( ui32OverridePin == (psImage->ui32OverridePolarity & 0x1) )
     2c4:	687b      	ldr	r3, [r7, #4]
     2c6:	691b      	ldr	r3, [r3, #16]
     2c8:	f003 0201 	and.w	r2, r3, #1
     2cc:	68fb      	ldr	r3, [r7, #12]
     2ce:	429a      	cmp	r2, r3
     2d0:	d14d      	bne.n	36e <am_hal_bootloader_override_check+0x182>
            DPRINTF(("Override Pin %d matches Polarity, force failure. %d, %d\r\n", psImage->ui32OverrideGPIO,  ui32OverridePin, psImage->ui32OverridePolarity));
            //
            // Make sure to disable the pin before continuing.
            //
#ifndef AM_PART_APOLLO3
            am_hal_gpio_pin_config(psImage->ui32OverrideGPIO, AM_HAL_PIN_DISABLE);
     2d2:	687b      	ldr	r3, [r7, #4]
     2d4:	68db      	ldr	r3, [r3, #12]
     2d6:	2b00      	cmp	r3, #0
     2d8:	db46      	blt.n	368 <am_hal_bootloader_override_check+0x17c>
     2da:	4b4e      	ldr	r3, [pc, #312]	; (414 <am_hal_bootloader_override_check+0x228>)
     2dc:	2273      	movs	r2, #115	; 0x73
     2de:	601a      	str	r2, [r3, #0]
     2e0:	687b      	ldr	r3, [r7, #4]
     2e2:	68db      	ldr	r3, [r3, #12]
     2e4:	085b      	lsrs	r3, r3, #1
     2e6:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     2ea:	4b4b      	ldr	r3, [pc, #300]	; (418 <am_hal_bootloader_override_check+0x22c>)
     2ec:	4413      	add	r3, r2
     2ee:	4618      	mov	r0, r3
     2f0:	687b      	ldr	r3, [r7, #4]
     2f2:	68db      	ldr	r3, [r3, #12]
     2f4:	085b      	lsrs	r3, r3, #1
     2f6:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     2fa:	4b47      	ldr	r3, [pc, #284]	; (418 <am_hal_bootloader_override_check+0x22c>)
     2fc:	4413      	add	r3, r2
     2fe:	681a      	ldr	r2, [r3, #0]
     300:	687b      	ldr	r3, [r7, #4]
     302:	68db      	ldr	r3, [r3, #12]
     304:	009b      	lsls	r3, r3, #2
     306:	f003 031c 	and.w	r3, r3, #28
     30a:	2107      	movs	r1, #7
     30c:	fa01 f303 	lsl.w	r3, r1, r3
     310:	43db      	mvns	r3, r3
     312:	4013      	ands	r3, r2
     314:	6003      	str	r3, [r0, #0]
     316:	687b      	ldr	r3, [r7, #4]
     318:	68db      	ldr	r3, [r3, #12]
     31a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     31e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     322:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     326:	461c      	mov	r4, r3
     328:	687b      	ldr	r3, [r7, #4]
     32a:	68db      	ldr	r3, [r3, #12]
     32c:	00db      	lsls	r3, r3, #3
     32e:	f003 0318 	and.w	r3, r3, #24
     332:	2218      	movs	r2, #24
     334:	409a      	lsls	r2, r3
     336:	687b      	ldr	r3, [r7, #4]
     338:	68db      	ldr	r3, [r3, #12]
     33a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     33e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     342:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     346:	6819      	ldr	r1, [r3, #0]
     348:	687b      	ldr	r3, [r7, #4]
     34a:	68db      	ldr	r3, [r3, #12]
     34c:	00db      	lsls	r3, r3, #3
     34e:	f003 0318 	and.w	r3, r3, #24
     352:	20ff      	movs	r0, #255	; 0xff
     354:	fa00 f303 	lsl.w	r3, r0, r3
     358:	43db      	mvns	r3, r3
     35a:	400b      	ands	r3, r1
     35c:	4313      	orrs	r3, r2
     35e:	6023      	str	r3, [r4, #0]
     360:	4b2c      	ldr	r3, [pc, #176]	; (414 <am_hal_bootloader_override_check+0x228>)
     362:	2200      	movs	r2, #0
     364:	601a      	str	r2, [r3, #0]
     366:	e000      	b.n	36a <am_hal_bootloader_override_check+0x17e>
     368:	bf00      	nop
#else
            am_hal_gpio_pinconfig(psImage->ui32OverrideGPIO, g_AM_HAL_GPIO_INPUT_DISABLE);
#endif
            return true;
     36a:	2301      	movs	r3, #1
     36c:	e04c      	b.n	408 <am_hal_bootloader_override_check+0x21c>
        // If the test passed, we still need to make sure the GPIO is disabled,
        // as it might interfere with the program we are (presumably) about to
        // boot.
        //
#ifndef AM_PART_APOLLO3
            am_hal_gpio_pin_config(psImage->ui32OverrideGPIO, AM_HAL_PIN_DISABLE);
     36e:	687b      	ldr	r3, [r7, #4]
     370:	68db      	ldr	r3, [r3, #12]
     372:	2b00      	cmp	r3, #0
     374:	db46      	blt.n	404 <am_hal_bootloader_override_check+0x218>
     376:	4b27      	ldr	r3, [pc, #156]	; (414 <am_hal_bootloader_override_check+0x228>)
     378:	2273      	movs	r2, #115	; 0x73
     37a:	601a      	str	r2, [r3, #0]
     37c:	687b      	ldr	r3, [r7, #4]
     37e:	68db      	ldr	r3, [r3, #12]
     380:	085b      	lsrs	r3, r3, #1
     382:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     386:	4b24      	ldr	r3, [pc, #144]	; (418 <am_hal_bootloader_override_check+0x22c>)
     388:	4413      	add	r3, r2
     38a:	4618      	mov	r0, r3
     38c:	687b      	ldr	r3, [r7, #4]
     38e:	68db      	ldr	r3, [r3, #12]
     390:	085b      	lsrs	r3, r3, #1
     392:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     396:	4b20      	ldr	r3, [pc, #128]	; (418 <am_hal_bootloader_override_check+0x22c>)
     398:	4413      	add	r3, r2
     39a:	681a      	ldr	r2, [r3, #0]
     39c:	687b      	ldr	r3, [r7, #4]
     39e:	68db      	ldr	r3, [r3, #12]
     3a0:	009b      	lsls	r3, r3, #2
     3a2:	f003 031c 	and.w	r3, r3, #28
     3a6:	2107      	movs	r1, #7
     3a8:	fa01 f303 	lsl.w	r3, r1, r3
     3ac:	43db      	mvns	r3, r3
     3ae:	4013      	ands	r3, r2
     3b0:	6003      	str	r3, [r0, #0]
     3b2:	687b      	ldr	r3, [r7, #4]
     3b4:	68db      	ldr	r3, [r3, #12]
     3b6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     3ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     3be:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     3c2:	461c      	mov	r4, r3
     3c4:	687b      	ldr	r3, [r7, #4]
     3c6:	68db      	ldr	r3, [r3, #12]
     3c8:	00db      	lsls	r3, r3, #3
     3ca:	f003 0318 	and.w	r3, r3, #24
     3ce:	2218      	movs	r2, #24
     3d0:	409a      	lsls	r2, r3
     3d2:	687b      	ldr	r3, [r7, #4]
     3d4:	68db      	ldr	r3, [r3, #12]
     3d6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     3da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     3de:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     3e2:	6819      	ldr	r1, [r3, #0]
     3e4:	687b      	ldr	r3, [r7, #4]
     3e6:	68db      	ldr	r3, [r3, #12]
     3e8:	00db      	lsls	r3, r3, #3
     3ea:	f003 0318 	and.w	r3, r3, #24
     3ee:	20ff      	movs	r0, #255	; 0xff
     3f0:	fa00 f303 	lsl.w	r3, r0, r3
     3f4:	43db      	mvns	r3, r3
     3f6:	400b      	ands	r3, r1
     3f8:	4313      	orrs	r3, r2
     3fa:	6023      	str	r3, [r4, #0]
     3fc:	4b05      	ldr	r3, [pc, #20]	; (414 <am_hal_bootloader_override_check+0x228>)
     3fe:	2200      	movs	r2, #0
     400:	601a      	str	r2, [r3, #0]
     402:	e000      	b.n	406 <am_hal_bootloader_override_check+0x21a>
     404:	bf00      	nop
#else
            am_hal_gpio_pinconfig(psImage->ui32OverrideGPIO, g_AM_HAL_GPIO_INPUT_DISABLE);
#endif
    }

    return false;
     406:	2300      	movs	r3, #0
}
     408:	4618      	mov	r0, r3
     40a:	3710      	adds	r7, #16
     40c:	46bd      	mov	sp, r7
     40e:	bc90      	pop	{r4, r7}
     410:	4770      	bx	lr
     412:	bf00      	nop
     414:	40010060 	.word	0x40010060
     418:	40010040 	.word	0x40010040
     41c:	40010080 	.word	0x40010080

00000420 <am_bootloader_validate_structure>:
//! @return true if the check passes.
//
//*****************************************************************************
bool
am_bootloader_validate_structure(uint32_t *pInfo, uint32_t size)
{
     420:	b580      	push	{r7, lr}
     422:	b084      	sub	sp, #16
     424:	af00      	add	r7, sp, #0
     426:	6078      	str	r0, [r7, #4]
     428:	6039      	str	r1, [r7, #0]
    uint32_t ui32Crc = 0;
     42a:	2300      	movs	r3, #0
     42c:	60bb      	str	r3, [r7, #8]
    // CRC value is the last 4 bytes of the structure
    uint32_t *pCrc = pInfo + size / 4 - 1;
     42e:	683b      	ldr	r3, [r7, #0]
     430:	f023 0303 	bic.w	r3, r3, #3
     434:	3b04      	subs	r3, #4
     436:	687a      	ldr	r2, [r7, #4]
     438:	4413      	add	r3, r2
     43a:	60fb      	str	r3, [r7, #12]
    // Compute and validate CRC of the structure
    am_bootloader_partial_crc32(pInfo, size - 4, &ui32Crc);
     43c:	683b      	ldr	r3, [r7, #0]
     43e:	3b04      	subs	r3, #4
     440:	f107 0208 	add.w	r2, r7, #8
     444:	4619      	mov	r1, r3
     446:	6878      	ldr	r0, [r7, #4]
     448:	f7ff fe48 	bl	dc <am_bootloader_partial_crc32>
    if (*pCrc != ui32Crc)
     44c:	68fb      	ldr	r3, [r7, #12]
     44e:	681a      	ldr	r2, [r3, #0]
     450:	68bb      	ldr	r3, [r7, #8]
     452:	429a      	cmp	r2, r3
     454:	d001      	beq.n	45a <am_bootloader_validate_structure+0x3a>
    {
        return false;
     456:	2300      	movs	r3, #0
     458:	e000      	b.n	45c <am_bootloader_validate_structure+0x3c>
    }
    else
    {
        return true;
     45a:	2301      	movs	r3, #1
    }
}
     45c:	4618      	mov	r0, r3
     45e:	3710      	adds	r7, #16
     460:	46bd      	mov	sp, r7
     462:	bd80      	pop	{r7, pc}

00000464 <am_bootloader_flag_page_update>:
//
//*****************************************************************************
int
am_bootloader_flag_page_update(am_bootloader_image_t *psImage,
                               uint32_t *pui32FlagPage)
{
     464:	b580      	push	{r7, lr}
     466:	b086      	sub	sp, #24
     468:	af00      	add	r7, sp, #0
     46a:	6078      	str	r0, [r7, #4]
     46c:	6039      	str	r1, [r7, #0]
    uint32_t ui32Block, ui32Page;
    uint32_t ui32Critical;
    psImage->ui32Checksum = 0;
     46e:	687b      	ldr	r3, [r7, #4]
     470:	2200      	movs	r2, #0
     472:	621a      	str	r2, [r3, #32]
    DPRINTF(("Image to use: 0x%08x\r\n", (uintptr_t)psImage));
    DPRINTF(("Flag page address: 0x%08x\r\n", (uintptr_t)pui32FlagPage));
    //
    // Calculate the correct flag page number.
    //
    ui32Page = AM_HAL_FLASH_ADDR2PAGE((uintptr_t)pui32FlagPage);
     474:	683b      	ldr	r3, [r7, #0]
     476:	0adb      	lsrs	r3, r3, #11
     478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     47c:	617b      	str	r3, [r7, #20]
    DPRINTF(("Flag page %d\r\n", ui32Page));
    ui32Block = AM_HAL_FLASH_ADDR2INST((uint32_t)pui32FlagPage);
     47e:	683b      	ldr	r3, [r7, #0]
     480:	0c9b      	lsrs	r3, r3, #18
     482:	f003 0301 	and.w	r3, r3, #1
     486:	613b      	str	r3, [r7, #16]
    DPRINTF(("Flag page in block %d\r\n", ui32Block));

    // Compute CRC of the structure
    am_bootloader_partial_crc32(psImage, sizeof(*psImage) - 4, &psImage->ui32Checksum);
     488:	687b      	ldr	r3, [r7, #4]
     48a:	3320      	adds	r3, #32
     48c:	461a      	mov	r2, r3
     48e:	2120      	movs	r1, #32
     490:	6878      	ldr	r0, [r7, #4]
     492:	f7ff fe23 	bl	dc <am_bootloader_partial_crc32>
    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
     496:	f001 fd25 	bl	1ee4 <am_hal_interrupt_master_disable>
     49a:	60f8      	str	r0, [r7, #12]
    //
    // Erase the page.
    //
    int rc = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, ui32Block, ui32Page);
     49c:	697a      	ldr	r2, [r7, #20]
     49e:	6939      	ldr	r1, [r7, #16]
     4a0:	4809      	ldr	r0, [pc, #36]	; (4c8 <am_bootloader_flag_page_update+0x64>)
     4a2:	f001 fc93 	bl	1dcc <am_hal_flash_page_erase>
     4a6:	60b8      	str	r0, [r7, #8]
    DPRINTF(("Flash Erased %d\r\n", rc));

    //
    // Write the psImage structure directly to the flag page.
    //
    rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY,
     4a8:	2309      	movs	r3, #9
     4aa:	683a      	ldr	r2, [r7, #0]
     4ac:	6879      	ldr	r1, [r7, #4]
     4ae:	4806      	ldr	r0, [pc, #24]	; (4c8 <am_bootloader_flag_page_update+0x64>)
     4b0:	f001 fc90 	bl	1dd4 <am_hal_flash_program_main>
     4b4:	60b8      	str	r0, [r7, #8]
                              pui32FlagPage,
                              sizeof(am_bootloader_image_t) / 4);
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
     4b6:	68f8      	ldr	r0, [r7, #12]
     4b8:	f001 fd18 	bl	1eec <am_hal_interrupt_master_set>
    DPRINTF(("Done. %d\r\n", rc));
    return rc;
     4bc:	68bb      	ldr	r3, [r7, #8]
}
     4be:	4618      	mov	r0, r3
     4c0:	3718      	adds	r7, #24
     4c2:	46bd      	mov	sp, r7
     4c4:	bd80      	pop	{r7, pc}
     4c6:	bf00      	nop
     4c8:	12344321 	.word	0x12344321

000004cc <am_bootloader_erase_flash_page>:
//! @return none
//
//*****************************************************************************
void
am_bootloader_erase_flash_page(uint32_t ui32Addr)
{
     4cc:	b580      	push	{r7, lr}
     4ce:	b086      	sub	sp, #24
     4d0:	af00      	add	r7, sp, #0
     4d2:	6078      	str	r0, [r7, #4]
    uint32_t ui32Critical;
    uint32_t ui32CurrentPage, ui32CurrentBlock;
    //
    // Figure out what page and block we're working on.
    //
    ui32CurrentPage =  AM_HAL_FLASH_ADDR2PAGE(ui32Addr);
     4d4:	687b      	ldr	r3, [r7, #4]
     4d6:	0adb      	lsrs	r3, r3, #11
     4d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     4dc:	617b      	str	r3, [r7, #20]
    ui32CurrentBlock = AM_HAL_FLASH_ADDR2INST(ui32Addr);
     4de:	687b      	ldr	r3, [r7, #4]
     4e0:	0c9b      	lsrs	r3, r3, #18
     4e2:	f003 0301 	and.w	r3, r3, #1
     4e6:	613b      	str	r3, [r7, #16]
    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
     4e8:	f001 fcfc 	bl	1ee4 <am_hal_interrupt_master_disable>
     4ec:	60f8      	str	r0, [r7, #12]
    am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY,
     4ee:	697a      	ldr	r2, [r7, #20]
     4f0:	6939      	ldr	r1, [r7, #16]
     4f2:	4805      	ldr	r0, [pc, #20]	; (508 <am_bootloader_erase_flash_page+0x3c>)
     4f4:	f001 fc6a 	bl	1dcc <am_hal_flash_page_erase>
                                ui32CurrentBlock, ui32CurrentPage);
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
     4f8:	68f8      	ldr	r0, [r7, #12]
     4fa:	f001 fcf7 	bl	1eec <am_hal_interrupt_master_set>
}
     4fe:	bf00      	nop
     500:	3718      	adds	r7, #24
     502:	46bd      	mov	sp, r7
     504:	bd80      	pop	{r7, pc}
     506:	bf00      	nop
     508:	12344321 	.word	0x12344321

0000050c <am_bootloader_write_flash_within_page>:
//*****************************************************************************
void
am_bootloader_write_flash_within_page(uint32_t ui32WriteAddr,
                                      uint32_t *pui32ReadAddr,
                                      uint32_t ui32NumWords)
{
     50c:	b580      	push	{r7, lr}
     50e:	b086      	sub	sp, #24
     510:	af00      	add	r7, sp, #0
     512:	60f8      	str	r0, [r7, #12]
     514:	60b9      	str	r1, [r7, #8]
     516:	607a      	str	r2, [r7, #4]
    uint32_t ui32Critical;

    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
     518:	f001 fce4 	bl	1ee4 <am_hal_interrupt_master_disable>
     51c:	6178      	str	r0, [r7, #20]
    //
    // Program the flash page with the data we just received.
    //
    am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, pui32ReadAddr,
     51e:	68fa      	ldr	r2, [r7, #12]
     520:	687b      	ldr	r3, [r7, #4]
     522:	68b9      	ldr	r1, [r7, #8]
     524:	4804      	ldr	r0, [pc, #16]	; (538 <am_bootloader_write_flash_within_page+0x2c>)
     526:	f001 fc55 	bl	1dd4 <am_hal_flash_program_main>
                              (uint32_t *)ui32WriteAddr, ui32NumWords);
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
     52a:	6978      	ldr	r0, [r7, #20]
     52c:	f001 fcde 	bl	1eec <am_hal_interrupt_master_set>
}
     530:	bf00      	nop
     532:	3718      	adds	r7, #24
     534:	46bd      	mov	sp, r7
     536:	bd80      	pop	{r7, pc}
     538:	12344321 	.word	0x12344321

0000053c <am_bootloader_program_flash_page>:
//
//*****************************************************************************
void
am_bootloader_program_flash_page(uint32_t ui32WriteAddr,
                                 uint32_t *pui32ReadAddr, uint32_t numBytes)
{
     53c:	b580      	push	{r7, lr}
     53e:	b086      	sub	sp, #24
     540:	af00      	add	r7, sp, #0
     542:	60f8      	str	r0, [r7, #12]
     544:	60b9      	str	r1, [r7, #8]
     546:	607a      	str	r2, [r7, #4]
    uint32_t ui32Critical;
    uint32_t ui32WordsInBuffer;

    am_bootloader_erase_flash_page(ui32WriteAddr);
     548:	68f8      	ldr	r0, [r7, #12]
     54a:	f7ff ffbf 	bl	4cc <am_bootloader_erase_flash_page>

    ui32WordsInBuffer = (numBytes + 3) / 4;
     54e:	687b      	ldr	r3, [r7, #4]
     550:	3303      	adds	r3, #3
     552:	089b      	lsrs	r3, r3, #2
     554:	617b      	str	r3, [r7, #20]
    //
    // Start a critical section.
    //
    ui32Critical = am_hal_interrupt_master_disable();
     556:	f001 fcc5 	bl	1ee4 <am_hal_interrupt_master_disable>
     55a:	6138      	str	r0, [r7, #16]
    //
    // Program the flash page with the data we just received.
    //
    am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, pui32ReadAddr,
     55c:	68fa      	ldr	r2, [r7, #12]
     55e:	697b      	ldr	r3, [r7, #20]
     560:	68b9      	ldr	r1, [r7, #8]
     562:	4805      	ldr	r0, [pc, #20]	; (578 <am_bootloader_program_flash_page+0x3c>)
     564:	f001 fc36 	bl	1dd4 <am_hal_flash_program_main>
                              (uint32_t *)ui32WriteAddr, ui32WordsInBuffer);
    //
    // Exit the critical section.
    //
    am_hal_interrupt_master_set(ui32Critical);
     568:	6938      	ldr	r0, [r7, #16]
     56a:	f001 fcbf 	bl	1eec <am_hal_interrupt_master_set>
}
     56e:	bf00      	nop
     570:	3718      	adds	r7, #24
     572:	46bd      	mov	sp, r7
     574:	bd80      	pop	{r7, pc}
     576:	bf00      	nop
     578:	12344321 	.word	0x12344321

0000057c <am_bootloader_image_run>:
//! @return The function does not return.
//
//*****************************************************************************
void
am_bootloader_image_run(am_bootloader_image_t *psImage)
{
     57c:	b580      	push	{r7, lr}
     57e:	b082      	sub	sp, #8
     580:	af00      	add	r7, sp, #0
     582:	6078      	str	r0, [r7, #4]
    // The underlying boot sequence is a little different depeding on whether
    // the image was delivered as an encrypted image or as a cleartext image.
    // We will call the correct assembly routine based on what the image
    // structure tells us.
    //
    if ( psImage->bEncrypted )
     584:	687b      	ldr	r3, [r7, #4]
     586:	69db      	ldr	r3, [r3, #28]
     588:	2b00      	cmp	r3, #0
     58a:	d003      	beq.n	594 <am_bootloader_image_run+0x18>
    {
        am_bootloader_encrypted_image_run(psImage);
     58c:	6878      	ldr	r0, [r7, #4]
     58e:	f000 f808 	bl	5a2 <am_bootloader_encrypted_image_run>
    }
    else
    {
        am_bootloader_clear_image_run(psImage);
    }
}
     592:	e002      	b.n	59a <am_bootloader_image_run+0x1e>
        am_bootloader_clear_image_run(psImage);
     594:	6878      	ldr	r0, [r7, #4]
     596:	f000 f80f 	bl	5b8 <am_bootloader_clear_image_run>
}
     59a:	bf00      	nop
     59c:	3708      	adds	r7, #8
     59e:	46bd      	mov	sp, r7
     5a0:	bd80      	pop	{r7, pc}

000005a2 <am_bootloader_encrypted_image_run>:
am_bootloader_encrypted_image_run(am_bootloader_image_t *psImage)
{
    //
    // Load the new stack pointer into R1 and the new reset vector into R2.
    //
    __asm("    ldr     r1, [r0, #20]");
     5a2:	6941      	ldr	r1, [r0, #20]
    __asm("    ldr     r2, [r0, #24]");
     5a4:	6982      	ldr	r2, [r0, #24]

    //
    // Load the link address of the boot image into R0.
    //
    __asm("    ldr     r0, [r0, #0]");
     5a6:	6800      	ldr	r0, [r0, #0]

    //
    // Store the vector table pointer of the new image into VTOR.
    //
    __asm("    movw    r3, #0xED08");
     5a8:	f64e 5308 	movw	r3, #60680	; 0xed08
    __asm("    movt    r3, #0xE000");
     5ac:	f2ce 0300 	movt	r3, #57344	; 0xe000
    __asm("    str     r0, [r3, #0]");
     5b0:	6018      	str	r0, [r3, #0]

    //
    // Set the stack pointer for the new image.
    //
    __asm("    mov     sp, r1");
     5b2:	468d      	mov	sp, r1

    //
    // Jump to the new reset vector.
    //
    __asm("    bx      r2");
     5b4:	4710      	bx	r2
}
     5b6:	bf00      	nop

000005b8 <am_bootloader_clear_image_run>:
am_bootloader_clear_image_run(am_bootloader_image_t *psImage)
{
    //
    // Load the link address of the boot image into R0.
    //
    __asm("    ldr     r0, [r0, #0]");
     5b8:	6800      	ldr	r0, [r0, #0]

    //
    // Store the vector table pointer of the new image into VTOR.
    //
    __asm("    movw    r3, #0xED08");
     5ba:	f64e 5308 	movw	r3, #60680	; 0xed08
    __asm("    movt    r3, #0xE000");
     5be:	f2ce 0300 	movt	r3, #57344	; 0xe000
    __asm("    str     r0, [r3, #0]");
     5c2:	6018      	str	r0, [r3, #0]

    //
    // Load the new stack pointer into R1 and the new reset vector into R2.
    //
    __asm("    ldr     r1, [r0, #0]");
     5c4:	6801      	ldr	r1, [r0, #0]
    __asm("    ldr     r2, [r0, #4]");
     5c6:	6842      	ldr	r2, [r0, #4]

    //
    // Set the stack pointer for the new image.
    //
    __asm("    mov     sp, r1");
     5c8:	468d      	mov	sp, r1

    //
    // Jump to the new reset vector.
    //
    __asm("    bx      r2");
     5ca:	4710      	bx	r2
}
     5cc:	bf00      	nop
	...

000005d0 <am_multiboot_ios_acc_isr_handler>:
//! @return none.
//
//*****************************************************************************
void
am_multiboot_ios_acc_isr_handler(void)
{
     5d0:	b580      	push	{r7, lr}
     5d2:	b082      	sub	sp, #8
     5d4:	af00      	add	r7, sp, #0

    //
    // Check to see what caused this interrupt, then clear the bit from the
    // interrupt register.
    //
    ui32Status = am_hal_ios_access_int_status_get(false);
     5d6:	2000      	movs	r0, #0
     5d8:	f001 fcea 	bl	1fb0 <am_hal_ios_access_int_status_get>
     5dc:	6078      	str	r0, [r7, #4]
    am_hal_ios_access_int_clear(ui32Status);
     5de:	6878      	ldr	r0, [r7, #4]
     5e0:	f001 fce0 	bl	1fa4 <am_hal_ios_access_int_clear>

    //
    // Set up a pointer for writing 32-bit aligned packets through the IO slave
    // interface.
    //
    pui32Packet = (uint32_t *) am_hal_ios_pui8LRAM;
     5e4:	4b90      	ldr	r3, [pc, #576]	; (828 <am_multiboot_ios_acc_isr_handler+0x258>)
     5e6:	681b      	ldr	r3, [r3, #0]
     5e8:	603b      	str	r3, [r7, #0]

    if ( ui32Status & AM_HAL_IOS_ACCESS_INT_03 )
     5ea:	687b      	ldr	r3, [r7, #4]
     5ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
     5f0:	2b00      	cmp	r3, #0
     5f2:	f000 8114 	beq.w	81e <am_multiboot_ios_acc_isr_handler+0x24e>
    {
        am_hal_gpio_out_bit_set(g_iosIntPin);
     5f6:	4b8d      	ldr	r3, [pc, #564]	; (82c <am_multiboot_ios_acc_isr_handler+0x25c>)
     5f8:	681b      	ldr	r3, [r3, #0]
     5fa:	08db      	lsrs	r3, r3, #3
     5fc:	f003 0204 	and.w	r2, r3, #4
     600:	4b8b      	ldr	r3, [pc, #556]	; (830 <am_multiboot_ios_acc_isr_handler+0x260>)
     602:	4413      	add	r3, r2
     604:	4619      	mov	r1, r3
     606:	4b89      	ldr	r3, [pc, #548]	; (82c <am_multiboot_ios_acc_isr_handler+0x25c>)
     608:	681b      	ldr	r3, [r3, #0]
     60a:	f003 031f 	and.w	r3, r3, #31
     60e:	2201      	movs	r2, #1
     610:	fa02 f303 	lsl.w	r3, r2, r3
     614:	600b      	str	r3, [r1, #0]

        //
        // Figure out what to do next based on the packet header.
        //
        switch(pui32Packet[0])
     616:	683b      	ldr	r3, [r7, #0]
     618:	681b      	ldr	r3, [r3, #0]
     61a:	2b09      	cmp	r3, #9
     61c:	f200 80ea 	bhi.w	7f4 <am_multiboot_ios_acc_isr_handler+0x224>
     620:	a201      	add	r2, pc, #4	; (adr r2, 628 <am_multiboot_ios_acc_isr_handler+0x58>)
     622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     626:	bf00      	nop
     628:	0000081d 	.word	0x0000081d
     62c:	0000081d 	.word	0x0000081d
     630:	00000651 	.word	0x00000651
     634:	000006f7 	.word	0x000006f7
     638:	000007b5 	.word	0x000007b5
     63c:	000006bf 	.word	0x000006bf
     640:	000007c5 	.word	0x000007c5
     644:	000007f5 	.word	0x000007f5
     648:	000007f5 	.word	0x000007f5
     64c:	000007bf 	.word	0x000007bf

                //
                // Parse the image packet, and store the result to the global
                // image structure.
                //
                g_bIosImageValid = image_start_packet_read(&g_sImage,
     650:	4b75      	ldr	r3, [pc, #468]	; (828 <am_multiboot_ios_acc_isr_handler+0x258>)
     652:	681b      	ldr	r3, [r3, #0]
     654:	4619      	mov	r1, r3
     656:	4877      	ldr	r0, [pc, #476]	; (834 <am_multiboot_ios_acc_isr_handler+0x264>)
     658:	f000 fb7c 	bl	d54 <image_start_packet_read>
     65c:	4603      	mov	r3, r0
     65e:	461a      	mov	r2, r3
     660:	4b75      	ldr	r3, [pc, #468]	; (838 <am_multiboot_ios_acc_isr_handler+0x268>)
     662:	701a      	strb	r2, [r3, #0]

                //
                // Make sure the image packet had reasonable contents. If it
                // didn't, we need to let the host know.
                //
                if ( g_bIosImageValid )
     664:	4b74      	ldr	r3, [pc, #464]	; (838 <am_multiboot_ios_acc_isr_handler+0x268>)
     666:	781b      	ldrb	r3, [r3, #0]
     668:	b2db      	uxtb	r3, r3
     66a:	2b00      	cmp	r3, #0
     66c:	d013      	beq.n	696 <am_multiboot_ios_acc_isr_handler+0xc6>
                {
                    //
                    // Good image; Send back a "READY" packet.
                    //
                    pui32Packet[0] = AM_BOOTLOADER_READY;
     66e:	683b      	ldr	r3, [r7, #0]
     670:	2202      	movs	r2, #2
     672:	601a      	str	r2, [r3, #0]
                    am_hal_gpio_out_bit_clear(g_iosIntPin);
     674:	4b6d      	ldr	r3, [pc, #436]	; (82c <am_multiboot_ios_acc_isr_handler+0x25c>)
     676:	681b      	ldr	r3, [r3, #0]
     678:	08db      	lsrs	r3, r3, #3
     67a:	f003 0204 	and.w	r2, r3, #4
     67e:	4b6f      	ldr	r3, [pc, #444]	; (83c <am_multiboot_ios_acc_isr_handler+0x26c>)
     680:	4413      	add	r3, r2
     682:	4619      	mov	r1, r3
     684:	4b69      	ldr	r3, [pc, #420]	; (82c <am_multiboot_ios_acc_isr_handler+0x25c>)
     686:	681b      	ldr	r3, [r3, #0]
     688:	f003 031f 	and.w	r3, r3, #31
     68c:	2201      	movs	r2, #1
     68e:	fa02 f303 	lsl.w	r3, r2, r3
     692:	600b      	str	r3, [r1, #0]
                    //
                    pui32Packet[0] = AM_BOOTLOADER_ERROR;
                    am_hal_gpio_out_bit_clear(g_iosIntPin);
                }

                break;
     694:	e0c3      	b.n	81e <am_multiboot_ios_acc_isr_handler+0x24e>
                    pui32Packet[0] = AM_BOOTLOADER_ERROR;
     696:	683b      	ldr	r3, [r7, #0]
     698:	2205      	movs	r2, #5
     69a:	601a      	str	r2, [r3, #0]
                    am_hal_gpio_out_bit_clear(g_iosIntPin);
     69c:	4b63      	ldr	r3, [pc, #396]	; (82c <am_multiboot_ios_acc_isr_handler+0x25c>)
     69e:	681b      	ldr	r3, [r3, #0]
     6a0:	08db      	lsrs	r3, r3, #3
     6a2:	f003 0204 	and.w	r2, r3, #4
     6a6:	4b65      	ldr	r3, [pc, #404]	; (83c <am_multiboot_ios_acc_isr_handler+0x26c>)
     6a8:	4413      	add	r3, r2
     6aa:	4619      	mov	r1, r3
     6ac:	4b5f      	ldr	r3, [pc, #380]	; (82c <am_multiboot_ios_acc_isr_handler+0x25c>)
     6ae:	681b      	ldr	r3, [r3, #0]
     6b0:	f003 031f 	and.w	r3, r3, #31
     6b4:	2201      	movs	r2, #1
     6b6:	fa02 f303 	lsl.w	r3, r2, r3
     6ba:	600b      	str	r3, [r1, #0]
                break;
     6bc:	e0af      	b.n	81e <am_multiboot_ios_acc_isr_handler+0x24e>
            case AM_BOOTLOADER_SET_OVERRIDE_CMD:
                //
                // Set the override GPIO settings based on the packet
                // information.
                //
                g_sImage.ui32OverrideGPIO = pui32Packet[1];
     6be:	683b      	ldr	r3, [r7, #0]
     6c0:	685b      	ldr	r3, [r3, #4]
     6c2:	4a5c      	ldr	r2, [pc, #368]	; (834 <am_multiboot_ios_acc_isr_handler+0x264>)
     6c4:	60d3      	str	r3, [r2, #12]
                g_sImage.ui32OverridePolarity = pui32Packet[2];
     6c6:	683b      	ldr	r3, [r7, #0]
     6c8:	689b      	ldr	r3, [r3, #8]
     6ca:	4a5a      	ldr	r2, [pc, #360]	; (834 <am_multiboot_ios_acc_isr_handler+0x264>)
     6cc:	6113      	str	r3, [r2, #16]

                //
                // Send back a "READY" packet.
                //
                pui32Packet[0] = AM_BOOTLOADER_READY;
     6ce:	683b      	ldr	r3, [r7, #0]
     6d0:	2202      	movs	r2, #2
     6d2:	601a      	str	r2, [r3, #0]
                am_hal_gpio_out_bit_clear(g_iosIntPin);
     6d4:	4b55      	ldr	r3, [pc, #340]	; (82c <am_multiboot_ios_acc_isr_handler+0x25c>)
     6d6:	681b      	ldr	r3, [r3, #0]
     6d8:	08db      	lsrs	r3, r3, #3
     6da:	f003 0204 	and.w	r2, r3, #4
     6de:	4b57      	ldr	r3, [pc, #348]	; (83c <am_multiboot_ios_acc_isr_handler+0x26c>)
     6e0:	4413      	add	r3, r2
     6e2:	4619      	mov	r1, r3
     6e4:	4b51      	ldr	r3, [pc, #324]	; (82c <am_multiboot_ios_acc_isr_handler+0x25c>)
     6e6:	681b      	ldr	r3, [r3, #0]
     6e8:	f003 031f 	and.w	r3, r3, #31
     6ec:	2201      	movs	r2, #1
     6ee:	fa02 f303 	lsl.w	r3, r2, r3
     6f2:	600b      	str	r3, [r1, #0]
                break;
     6f4:	e093      	b.n	81e <am_multiboot_ios_acc_isr_handler+0x24e>

            case AM_BOOTLOADER_NEW_PACKET:
                //
                // Only take new packets if our image structure is valid.
                //
                if ( !g_bIosImageValid )
     6f6:	4b50      	ldr	r3, [pc, #320]	; (838 <am_multiboot_ios_acc_isr_handler+0x268>)
     6f8:	781b      	ldrb	r3, [r3, #0]
     6fa:	b2db      	uxtb	r3, r3
     6fc:	f083 0301 	eor.w	r3, r3, #1
     700:	b2db      	uxtb	r3, r3
     702:	2b00      	cmp	r3, #0
     704:	d013      	beq.n	72e <am_multiboot_ios_acc_isr_handler+0x15e>
                {
                    pui32Packet[0] = AM_BOOTLOADER_ERROR;
     706:	683b      	ldr	r3, [r7, #0]
     708:	2205      	movs	r2, #5
     70a:	601a      	str	r2, [r3, #0]
                    am_hal_gpio_out_bit_clear(g_iosIntPin);
     70c:	4b47      	ldr	r3, [pc, #284]	; (82c <am_multiboot_ios_acc_isr_handler+0x25c>)
     70e:	681b      	ldr	r3, [r3, #0]
     710:	08db      	lsrs	r3, r3, #3
     712:	f003 0204 	and.w	r2, r3, #4
     716:	4b49      	ldr	r3, [pc, #292]	; (83c <am_multiboot_ios_acc_isr_handler+0x26c>)
     718:	4413      	add	r3, r2
     71a:	4619      	mov	r1, r3
     71c:	4b43      	ldr	r3, [pc, #268]	; (82c <am_multiboot_ios_acc_isr_handler+0x25c>)
     71e:	681b      	ldr	r3, [r3, #0]
     720:	f003 031f 	and.w	r3, r3, #31
     724:	2201      	movs	r2, #1
     726:	fa02 f303 	lsl.w	r3, r2, r3
     72a:	600b      	str	r3, [r1, #0]
                    break;
     72c:	e077      	b.n	81e <am_multiboot_ios_acc_isr_handler+0x24e>
                // to the beginning of the actual data.
                //
                //
                // Parse the reset of the packet sitting in the IOS LRAM.
                //
                image_data_packet_read((uint8_t *)(am_hal_ios_pui8LRAM + 8),
     72e:	4b3e      	ldr	r3, [pc, #248]	; (828 <am_multiboot_ios_acc_isr_handler+0x258>)
     730:	681b      	ldr	r3, [r3, #0]
     732:	f103 0208 	add.w	r2, r3, #8
                    *((uint32_t *) (am_hal_ios_pui8LRAM + 4)));
     736:	4b3c      	ldr	r3, [pc, #240]	; (828 <am_multiboot_ios_acc_isr_handler+0x258>)
     738:	681b      	ldr	r3, [r3, #0]
     73a:	3304      	adds	r3, #4
                image_data_packet_read((uint8_t *)(am_hal_ios_pui8LRAM + 8),
     73c:	681b      	ldr	r3, [r3, #0]
     73e:	4619      	mov	r1, r3
     740:	4610      	mov	r0, r2
     742:	f000 fb75 	bl	e30 <image_data_packet_read>

                //
                // If this packet completed the image...
                //
                if ( g_ui32BytesReceived == g_sImage.ui32NumBytes )
     746:	4b3b      	ldr	r3, [pc, #236]	; (834 <am_multiboot_ios_acc_isr_handler+0x264>)
     748:	685a      	ldr	r2, [r3, #4]
     74a:	4b3d      	ldr	r3, [pc, #244]	; (840 <am_multiboot_ios_acc_isr_handler+0x270>)
     74c:	681b      	ldr	r3, [r3, #0]
     74e:	429a      	cmp	r2, r3
     750:	d11c      	bne.n	78c <am_multiboot_ios_acc_isr_handler+0x1bc>
                    if ( (g_ui32CRC != g_sImage.ui32CRC) || multiboot_secure_verify(&g_sImage.ui32CRC) )
                    {
                        pui32Packet[0] = AM_BOOTLOADER_BAD_CRC;
                    }
#else
                    if ( g_ui32CRC != g_sImage.ui32CRC )
     752:	4b38      	ldr	r3, [pc, #224]	; (834 <am_multiboot_ios_acc_isr_handler+0x264>)
     754:	689a      	ldr	r2, [r3, #8]
     756:	4b3b      	ldr	r3, [pc, #236]	; (844 <am_multiboot_ios_acc_isr_handler+0x274>)
     758:	681b      	ldr	r3, [r3, #0]
     75a:	429a      	cmp	r2, r3
     75c:	d003      	beq.n	766 <am_multiboot_ios_acc_isr_handler+0x196>
                    {
                        pui32Packet[0] = AM_BOOTLOADER_BAD_CRC;
     75e:	683b      	ldr	r3, [r7, #0]
     760:	2204      	movs	r2, #4
     762:	601a      	str	r2, [r3, #0]
     764:	e015      	b.n	792 <am_multiboot_ios_acc_isr_handler+0x1c2>
#endif
                    else
                    {
                        // Protect (and optionally write if stored in SRAM)
                        // image in flash now as it has been validated now
                        program_image(g_sImage.bEncrypted);
     766:	4b33      	ldr	r3, [pc, #204]	; (834 <am_multiboot_ios_acc_isr_handler+0x264>)
     768:	69db      	ldr	r3, [r3, #28]
     76a:	4618      	mov	r0, r3
     76c:	f000 fa9e 	bl	cac <program_image>
                        // Validate the flash contents of a boot image to make
                        // sure it's safe to run
                        if ( am_bootloader_flash_check(&g_sImage) )
     770:	4830      	ldr	r0, [pc, #192]	; (834 <am_multiboot_ios_acc_isr_handler+0x264>)
     772:	f7ff fce5 	bl	140 <am_bootloader_flash_check>
     776:	4603      	mov	r3, r0
     778:	2b00      	cmp	r3, #0
     77a:	d003      	beq.n	784 <am_multiboot_ios_acc_isr_handler+0x1b4>
                        {
                            pui32Packet[0] = AM_BOOTLOADER_IMAGE_COMPLETE;
     77c:	683b      	ldr	r3, [r7, #0]
     77e:	2203      	movs	r2, #3
     780:	601a      	str	r2, [r3, #0]
     782:	e006      	b.n	792 <am_multiboot_ios_acc_isr_handler+0x1c2>
                        }
                        else
                        {
                            pui32Packet[0] = AM_BOOTLOADER_ERROR;
     784:	683b      	ldr	r3, [r7, #0]
     786:	2205      	movs	r2, #5
     788:	601a      	str	r2, [r3, #0]
     78a:	e002      	b.n	792 <am_multiboot_ios_acc_isr_handler+0x1c2>
                {
                    //
                    // If this wasn't the end of the image, just send back a
                    // "READY" packet.
                    //
                    pui32Packet[0] = AM_BOOTLOADER_READY;
     78c:	683b      	ldr	r3, [r7, #0]
     78e:	2202      	movs	r2, #2
     790:	601a      	str	r2, [r3, #0]
                }
                //
                // Assert the interrupt line so the host knows we have a
                // message.
                //
                am_hal_gpio_out_bit_clear(g_iosIntPin);
     792:	4b26      	ldr	r3, [pc, #152]	; (82c <am_multiboot_ios_acc_isr_handler+0x25c>)
     794:	681b      	ldr	r3, [r3, #0]
     796:	08db      	lsrs	r3, r3, #3
     798:	f003 0204 	and.w	r2, r3, #4
     79c:	4b27      	ldr	r3, [pc, #156]	; (83c <am_multiboot_ios_acc_isr_handler+0x26c>)
     79e:	4413      	add	r3, r2
     7a0:	4619      	mov	r1, r3
     7a2:	4b22      	ldr	r3, [pc, #136]	; (82c <am_multiboot_ios_acc_isr_handler+0x25c>)
     7a4:	681b      	ldr	r3, [r3, #0]
     7a6:	f003 031f 	and.w	r3, r3, #31
     7aa:	2201      	movs	r2, #1
     7ac:	fa02 f303 	lsl.w	r3, r2, r3
     7b0:	600b      	str	r3, [r1, #0]

                break;
     7b2:	e034      	b.n	81e <am_multiboot_ios_acc_isr_handler+0x24e>
                if ( USE_FLAG_PAGE )
                {
                    //
                    // Write the flag page.
                    //
                    am_bootloader_flag_page_update(&g_sImage, (uint32_t *)FLAG_PAGE_LOCATION);
     7b4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
     7b8:	481e      	ldr	r0, [pc, #120]	; (834 <am_multiboot_ios_acc_isr_handler+0x264>)
     7ba:	f7ff fe53 	bl	464 <am_bootloader_flag_page_update>
                // Perform a software reset.
                //
#if AM_APOLLO3_RESET
                am_hal_reset_control(AM_HAL_RESET_CONTROL_SWPOI, 0);
#else
                am_hal_reset_poi();
     7be:	f001 fc9d 	bl	20fc <am_hal_reset_poi>
#endif

                //
                // Wait for the reset to take effect.
                //
                while (1);
     7c2:	e7fe      	b.n	7c2 <am_multiboot_ios_acc_isr_handler+0x1f2>

            case AM_BOOTLOADER_BL_VERSION_CMD:
                //
                // Respond with the version number.
                //
                pui32Packet[0] = AM_BOOTLOADER_BL_VERSION;
     7c4:	683b      	ldr	r3, [r7, #0]
     7c6:	2206      	movs	r2, #6
     7c8:	601a      	str	r2, [r3, #0]
                pui32Packet[1] = AM_BOOTLOADER_VERSION_NUM;
     7ca:	683b      	ldr	r3, [r7, #0]
     7cc:	3304      	adds	r3, #4
     7ce:	2201      	movs	r2, #1
     7d0:	601a      	str	r2, [r3, #0]
                am_hal_gpio_out_bit_clear(g_iosIntPin);
     7d2:	4b16      	ldr	r3, [pc, #88]	; (82c <am_multiboot_ios_acc_isr_handler+0x25c>)
     7d4:	681b      	ldr	r3, [r3, #0]
     7d6:	08db      	lsrs	r3, r3, #3
     7d8:	f003 0204 	and.w	r2, r3, #4
     7dc:	4b17      	ldr	r3, [pc, #92]	; (83c <am_multiboot_ios_acc_isr_handler+0x26c>)
     7de:	4413      	add	r3, r2
     7e0:	4619      	mov	r1, r3
     7e2:	4b12      	ldr	r3, [pc, #72]	; (82c <am_multiboot_ios_acc_isr_handler+0x25c>)
     7e4:	681b      	ldr	r3, [r3, #0]
     7e6:	f003 031f 	and.w	r3, r3, #31
     7ea:	2201      	movs	r2, #1
     7ec:	fa02 f303 	lsl.w	r3, r2, r3
     7f0:	600b      	str	r3, [r1, #0]
                break;
     7f2:	e014      	b.n	81e <am_multiboot_ios_acc_isr_handler+0x24e>
            case AM_BOOTLOADER_NAK_CMD:
                break;

            default:
                // Error
                pui32Packet[0] = AM_BOOTLOADER_ERROR;
     7f4:	683b      	ldr	r3, [r7, #0]
     7f6:	2205      	movs	r2, #5
     7f8:	601a      	str	r2, [r3, #0]
                am_hal_gpio_out_bit_clear(g_iosIntPin);
     7fa:	4b0c      	ldr	r3, [pc, #48]	; (82c <am_multiboot_ios_acc_isr_handler+0x25c>)
     7fc:	681b      	ldr	r3, [r3, #0]
     7fe:	08db      	lsrs	r3, r3, #3
     800:	f003 0204 	and.w	r2, r3, #4
     804:	4b0d      	ldr	r3, [pc, #52]	; (83c <am_multiboot_ios_acc_isr_handler+0x26c>)
     806:	4413      	add	r3, r2
     808:	4619      	mov	r1, r3
     80a:	4b08      	ldr	r3, [pc, #32]	; (82c <am_multiboot_ios_acc_isr_handler+0x25c>)
     80c:	681b      	ldr	r3, [r3, #0]
     80e:	f003 031f 	and.w	r3, r3, #31
     812:	2201      	movs	r2, #1
     814:	fa02 f303 	lsl.w	r3, r2, r3
     818:	600b      	str	r3, [r1, #0]
                break;
     81a:	e000      	b.n	81e <am_multiboot_ios_acc_isr_handler+0x24e>
                break;
     81c:	bf00      	nop
        }
    }
}
     81e:	bf00      	nop
     820:	3708      	adds	r7, #8
     822:	46bd      	mov	sp, r7
     824:	bd80      	pop	{r7, pc}
     826:	bf00      	nop
     828:	000026f8 	.word	0x000026f8
     82c:	10001084 	.word	0x10001084
     830:	40010090 	.word	0x40010090
     834:	10001018 	.word	0x10001018
     838:	10001088 	.word	0x10001088
     83c:	40010098 	.word	0x40010098
     840:	100010a0 	.word	0x100010a0
     844:	100010a4 	.word	0x100010a4

00000848 <am_multiboot_setup_ios_interface>:
//! @return none
//
//*****************************************************************************
void
am_multiboot_setup_ios_interface(uint32_t interruptPin)
{
     848:	b590      	push	{r4, r7, lr}
     84a:	b083      	sub	sp, #12
     84c:	af00      	add	r7, sp, #0
     84e:	6078      	str	r0, [r7, #4]
    //
    // Check pin 0 to see if we should be using SPI or I2C
    //
    am_hal_gpio_pin_config(0, AM_HAL_GPIO_INPUT);
     850:	4b97      	ldr	r3, [pc, #604]	; (ab0 <am_multiboot_setup_ios_interface+0x268>)
     852:	2273      	movs	r2, #115	; 0x73
     854:	601a      	str	r2, [r3, #0]
     856:	4a97      	ldr	r2, [pc, #604]	; (ab4 <am_multiboot_setup_ios_interface+0x26c>)
     858:	4b96      	ldr	r3, [pc, #600]	; (ab4 <am_multiboot_setup_ios_interface+0x26c>)
     85a:	681b      	ldr	r3, [r3, #0]
     85c:	f023 0307 	bic.w	r3, r3, #7
     860:	6013      	str	r3, [r2, #0]
     862:	4a95      	ldr	r2, [pc, #596]	; (ab8 <am_multiboot_setup_ios_interface+0x270>)
     864:	4b94      	ldr	r3, [pc, #592]	; (ab8 <am_multiboot_setup_ios_interface+0x270>)
     866:	681b      	ldr	r3, [r3, #0]
     868:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     86c:	f043 031a 	orr.w	r3, r3, #26
     870:	6013      	str	r3, [r2, #0]
     872:	4b8f      	ldr	r3, [pc, #572]	; (ab0 <am_multiboot_setup_ios_interface+0x268>)
     874:	2200      	movs	r2, #0
     876:	601a      	str	r2, [r3, #0]
    if ( am_hal_gpio_input_bit_read(0) )
     878:	4b90      	ldr	r3, [pc, #576]	; (abc <am_multiboot_setup_ios_interface+0x274>)
     87a:	681b      	ldr	r3, [r3, #0]
     87c:	f003 0301 	and.w	r3, r3, #1
     880:	2b00      	cmp	r3, #0
     882:	d02e      	beq.n	8e2 <am_multiboot_setup_ios_interface+0x9a>
    {
        //
        // If the clock line is high, we'll assume I2C.
        //
        am_hal_gpio_pin_config(0, AM_HAL_PIN_0_SLSCL);
     884:	4b8a      	ldr	r3, [pc, #552]	; (ab0 <am_multiboot_setup_ios_interface+0x268>)
     886:	2273      	movs	r2, #115	; 0x73
     888:	601a      	str	r2, [r3, #0]
     88a:	4a8a      	ldr	r2, [pc, #552]	; (ab4 <am_multiboot_setup_ios_interface+0x26c>)
     88c:	4b89      	ldr	r3, [pc, #548]	; (ab4 <am_multiboot_setup_ios_interface+0x26c>)
     88e:	681b      	ldr	r3, [r3, #0]
     890:	f023 0307 	bic.w	r3, r3, #7
     894:	6013      	str	r3, [r2, #0]
     896:	4a88      	ldr	r2, [pc, #544]	; (ab8 <am_multiboot_setup_ios_interface+0x270>)
     898:	4b87      	ldr	r3, [pc, #540]	; (ab8 <am_multiboot_setup_ios_interface+0x270>)
     89a:	681b      	ldr	r3, [r3, #0]
     89c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     8a0:	f043 0302 	orr.w	r3, r3, #2
     8a4:	6013      	str	r3, [r2, #0]
     8a6:	4b82      	ldr	r3, [pc, #520]	; (ab0 <am_multiboot_setup_ios_interface+0x268>)
     8a8:	2200      	movs	r2, #0
     8aa:	601a      	str	r2, [r3, #0]
        am_hal_gpio_pin_config(1, AM_HAL_PIN_1_SLSDA);
     8ac:	4b80      	ldr	r3, [pc, #512]	; (ab0 <am_multiboot_setup_ios_interface+0x268>)
     8ae:	2273      	movs	r2, #115	; 0x73
     8b0:	601a      	str	r2, [r3, #0]
     8b2:	4a80      	ldr	r2, [pc, #512]	; (ab4 <am_multiboot_setup_ios_interface+0x26c>)
     8b4:	4b7f      	ldr	r3, [pc, #508]	; (ab4 <am_multiboot_setup_ios_interface+0x26c>)
     8b6:	681b      	ldr	r3, [r3, #0]
     8b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     8bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     8c0:	6013      	str	r3, [r2, #0]
     8c2:	4a7d      	ldr	r2, [pc, #500]	; (ab8 <am_multiboot_setup_ios_interface+0x270>)
     8c4:	4b7c      	ldr	r3, [pc, #496]	; (ab8 <am_multiboot_setup_ios_interface+0x270>)
     8c6:	681b      	ldr	r3, [r3, #0]
     8c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     8cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     8d0:	6013      	str	r3, [r2, #0]
     8d2:	4b77      	ldr	r3, [pc, #476]	; (ab0 <am_multiboot_setup_ios_interface+0x268>)
     8d4:	2200      	movs	r2, #0
     8d6:	601a      	str	r2, [r3, #0]

        g_sIOSConfig.ui32InterfaceSelect = (AM_HAL_IOS_USE_I2C |
     8d8:	4b79      	ldr	r3, [pc, #484]	; (ac0 <am_multiboot_setup_ios_interface+0x278>)
     8da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     8de:	601a      	str	r2, [r3, #0]
     8e0:	e052      	b.n	988 <am_multiboot_setup_ios_interface+0x140>
    else
    {
        //
        // If the clock line is low, we'll assume SPI.
        //
        am_hal_gpio_pin_config(0, AM_HAL_PIN_0_SLSCK);
     8e2:	4b73      	ldr	r3, [pc, #460]	; (ab0 <am_multiboot_setup_ios_interface+0x268>)
     8e4:	2273      	movs	r2, #115	; 0x73
     8e6:	601a      	str	r2, [r3, #0]
     8e8:	4a72      	ldr	r2, [pc, #456]	; (ab4 <am_multiboot_setup_ios_interface+0x26c>)
     8ea:	4b72      	ldr	r3, [pc, #456]	; (ab4 <am_multiboot_setup_ios_interface+0x26c>)
     8ec:	681b      	ldr	r3, [r3, #0]
     8ee:	f023 0307 	bic.w	r3, r3, #7
     8f2:	6013      	str	r3, [r2, #0]
     8f4:	4a70      	ldr	r2, [pc, #448]	; (ab8 <am_multiboot_setup_ios_interface+0x270>)
     8f6:	4b70      	ldr	r3, [pc, #448]	; (ab8 <am_multiboot_setup_ios_interface+0x270>)
     8f8:	681b      	ldr	r3, [r3, #0]
     8fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     8fe:	f043 030a 	orr.w	r3, r3, #10
     902:	6013      	str	r3, [r2, #0]
     904:	4b6a      	ldr	r3, [pc, #424]	; (ab0 <am_multiboot_setup_ios_interface+0x268>)
     906:	2200      	movs	r2, #0
     908:	601a      	str	r2, [r3, #0]
        am_hal_gpio_pin_config(1, AM_HAL_PIN_1_SLMISO);
     90a:	4b69      	ldr	r3, [pc, #420]	; (ab0 <am_multiboot_setup_ios_interface+0x268>)
     90c:	2273      	movs	r2, #115	; 0x73
     90e:	601a      	str	r2, [r3, #0]
     910:	4a68      	ldr	r2, [pc, #416]	; (ab4 <am_multiboot_setup_ios_interface+0x26c>)
     912:	4b68      	ldr	r3, [pc, #416]	; (ab4 <am_multiboot_setup_ios_interface+0x26c>)
     914:	681b      	ldr	r3, [r3, #0]
     916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     91a:	6013      	str	r3, [r2, #0]
     91c:	4a66      	ldr	r2, [pc, #408]	; (ab8 <am_multiboot_setup_ios_interface+0x270>)
     91e:	4b66      	ldr	r3, [pc, #408]	; (ab8 <am_multiboot_setup_ios_interface+0x270>)
     920:	681b      	ldr	r3, [r3, #0]
     922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     926:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     92a:	6013      	str	r3, [r2, #0]
     92c:	4b60      	ldr	r3, [pc, #384]	; (ab0 <am_multiboot_setup_ios_interface+0x268>)
     92e:	2200      	movs	r2, #0
     930:	601a      	str	r2, [r3, #0]
        am_hal_gpio_pin_config(2, AM_HAL_PIN_2_SLMOSI);
     932:	4b5f      	ldr	r3, [pc, #380]	; (ab0 <am_multiboot_setup_ios_interface+0x268>)
     934:	2273      	movs	r2, #115	; 0x73
     936:	601a      	str	r2, [r3, #0]
     938:	4a5e      	ldr	r2, [pc, #376]	; (ab4 <am_multiboot_setup_ios_interface+0x26c>)
     93a:	4b5e      	ldr	r3, [pc, #376]	; (ab4 <am_multiboot_setup_ios_interface+0x26c>)
     93c:	681b      	ldr	r3, [r3, #0]
     93e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     942:	6013      	str	r3, [r2, #0]
     944:	4a5c      	ldr	r2, [pc, #368]	; (ab8 <am_multiboot_setup_ios_interface+0x270>)
     946:	4b5c      	ldr	r3, [pc, #368]	; (ab8 <am_multiboot_setup_ios_interface+0x270>)
     948:	681b      	ldr	r3, [r3, #0]
     94a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     94e:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
     952:	6013      	str	r3, [r2, #0]
     954:	4b56      	ldr	r3, [pc, #344]	; (ab0 <am_multiboot_setup_ios_interface+0x268>)
     956:	2200      	movs	r2, #0
     958:	601a      	str	r2, [r3, #0]
        am_hal_gpio_pin_config(3, AM_HAL_PIN_3_SLnCE);
     95a:	4b55      	ldr	r3, [pc, #340]	; (ab0 <am_multiboot_setup_ios_interface+0x268>)
     95c:	2273      	movs	r2, #115	; 0x73
     95e:	601a      	str	r2, [r3, #0]
     960:	4a54      	ldr	r2, [pc, #336]	; (ab4 <am_multiboot_setup_ios_interface+0x26c>)
     962:	4b54      	ldr	r3, [pc, #336]	; (ab4 <am_multiboot_setup_ios_interface+0x26c>)
     964:	681b      	ldr	r3, [r3, #0]
     966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
     96a:	6013      	str	r3, [r2, #0]
     96c:	4a52      	ldr	r2, [pc, #328]	; (ab8 <am_multiboot_setup_ios_interface+0x270>)
     96e:	4b52      	ldr	r3, [pc, #328]	; (ab8 <am_multiboot_setup_ios_interface+0x270>)
     970:	681b      	ldr	r3, [r3, #0]
     972:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     976:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
     97a:	6013      	str	r3, [r2, #0]
     97c:	4b4c      	ldr	r3, [pc, #304]	; (ab0 <am_multiboot_setup_ios_interface+0x268>)
     97e:	2200      	movs	r2, #0
     980:	601a      	str	r2, [r3, #0]

        g_sIOSConfig.ui32InterfaceSelect = AM_HAL_IOS_USE_SPI;
     982:	4b4f      	ldr	r3, [pc, #316]	; (ac0 <am_multiboot_setup_ios_interface+0x278>)
     984:	2201      	movs	r2, #1
     986:	601a      	str	r2, [r3, #0]
    }

    //
    // Configure the IOS interface and LRAM structure.
    //
    am_hal_ios_config(&g_sIOSConfig);
     988:	484d      	ldr	r0, [pc, #308]	; (ac0 <am_multiboot_setup_ios_interface+0x278>)
     98a:	f001 fab3 	bl	1ef4 <am_hal_ios_config>
    g_iosIntPin = interruptPin;
     98e:	4a4d      	ldr	r2, [pc, #308]	; (ac4 <am_multiboot_setup_ios_interface+0x27c>)
     990:	687b      	ldr	r3, [r7, #4]
     992:	6013      	str	r3, [r2, #0]

    //
    // Make sure the interrupt pin is set up correctly
    //
    am_hal_gpio_out_bit_set(g_iosIntPin);
     994:	4b4b      	ldr	r3, [pc, #300]	; (ac4 <am_multiboot_setup_ios_interface+0x27c>)
     996:	681b      	ldr	r3, [r3, #0]
     998:	08db      	lsrs	r3, r3, #3
     99a:	f003 0204 	and.w	r2, r3, #4
     99e:	4b4a      	ldr	r3, [pc, #296]	; (ac8 <am_multiboot_setup_ios_interface+0x280>)
     9a0:	4413      	add	r3, r2
     9a2:	4619      	mov	r1, r3
     9a4:	4b47      	ldr	r3, [pc, #284]	; (ac4 <am_multiboot_setup_ios_interface+0x27c>)
     9a6:	681b      	ldr	r3, [r3, #0]
     9a8:	f003 031f 	and.w	r3, r3, #31
     9ac:	2201      	movs	r2, #1
     9ae:	fa02 f303 	lsl.w	r3, r2, r3
     9b2:	600b      	str	r3, [r1, #0]
    am_hal_gpio_pin_config(g_iosIntPin, AM_HAL_PIN_OUTPUT);
     9b4:	4b43      	ldr	r3, [pc, #268]	; (ac4 <am_multiboot_setup_ios_interface+0x27c>)
     9b6:	681b      	ldr	r3, [r3, #0]
     9b8:	2b00      	cmp	r3, #0
     9ba:	db4e      	blt.n	a5a <am_multiboot_setup_ios_interface+0x212>
     9bc:	4b3c      	ldr	r3, [pc, #240]	; (ab0 <am_multiboot_setup_ios_interface+0x268>)
     9be:	2273      	movs	r2, #115	; 0x73
     9c0:	601a      	str	r2, [r3, #0]
     9c2:	4b40      	ldr	r3, [pc, #256]	; (ac4 <am_multiboot_setup_ios_interface+0x27c>)
     9c4:	681b      	ldr	r3, [r3, #0]
     9c6:	085b      	lsrs	r3, r3, #1
     9c8:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     9cc:	4b39      	ldr	r3, [pc, #228]	; (ab4 <am_multiboot_setup_ios_interface+0x26c>)
     9ce:	4413      	add	r3, r2
     9d0:	461c      	mov	r4, r3
     9d2:	4b3c      	ldr	r3, [pc, #240]	; (ac4 <am_multiboot_setup_ios_interface+0x27c>)
     9d4:	681b      	ldr	r3, [r3, #0]
     9d6:	009b      	lsls	r3, r3, #2
     9d8:	f003 031c 	and.w	r3, r3, #28
     9dc:	2202      	movs	r2, #2
     9de:	409a      	lsls	r2, r3
     9e0:	4b38      	ldr	r3, [pc, #224]	; (ac4 <am_multiboot_setup_ios_interface+0x27c>)
     9e2:	681b      	ldr	r3, [r3, #0]
     9e4:	085b      	lsrs	r3, r3, #1
     9e6:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     9ea:	4b32      	ldr	r3, [pc, #200]	; (ab4 <am_multiboot_setup_ios_interface+0x26c>)
     9ec:	440b      	add	r3, r1
     9ee:	6819      	ldr	r1, [r3, #0]
     9f0:	4b34      	ldr	r3, [pc, #208]	; (ac4 <am_multiboot_setup_ios_interface+0x27c>)
     9f2:	681b      	ldr	r3, [r3, #0]
     9f4:	009b      	lsls	r3, r3, #2
     9f6:	f003 031c 	and.w	r3, r3, #28
     9fa:	2007      	movs	r0, #7
     9fc:	fa00 f303 	lsl.w	r3, r0, r3
     a00:	43db      	mvns	r3, r3
     a02:	400b      	ands	r3, r1
     a04:	4313      	orrs	r3, r2
     a06:	6023      	str	r3, [r4, #0]
     a08:	4b2e      	ldr	r3, [pc, #184]	; (ac4 <am_multiboot_setup_ios_interface+0x27c>)
     a0a:	681b      	ldr	r3, [r3, #0]
     a0c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     a10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     a14:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     a18:	461c      	mov	r4, r3
     a1a:	4b2a      	ldr	r3, [pc, #168]	; (ac4 <am_multiboot_setup_ios_interface+0x27c>)
     a1c:	681b      	ldr	r3, [r3, #0]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	f003 0318 	and.w	r3, r3, #24
     a24:	2218      	movs	r2, #24
     a26:	409a      	lsls	r2, r3
     a28:	4b26      	ldr	r3, [pc, #152]	; (ac4 <am_multiboot_setup_ios_interface+0x27c>)
     a2a:	681b      	ldr	r3, [r3, #0]
     a2c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     a30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     a34:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     a38:	6819      	ldr	r1, [r3, #0]
     a3a:	4b22      	ldr	r3, [pc, #136]	; (ac4 <am_multiboot_setup_ios_interface+0x27c>)
     a3c:	681b      	ldr	r3, [r3, #0]
     a3e:	00db      	lsls	r3, r3, #3
     a40:	f003 0318 	and.w	r3, r3, #24
     a44:	20ff      	movs	r0, #255	; 0xff
     a46:	fa00 f303 	lsl.w	r3, r0, r3
     a4a:	43db      	mvns	r3, r3
     a4c:	400b      	ands	r3, r1
     a4e:	4313      	orrs	r3, r2
     a50:	6023      	str	r3, [r4, #0]
     a52:	4b17      	ldr	r3, [pc, #92]	; (ab0 <am_multiboot_setup_ios_interface+0x268>)
     a54:	2200      	movs	r2, #0
     a56:	601a      	str	r2, [r3, #0]
     a58:	e000      	b.n	a5c <am_multiboot_setup_ios_interface+0x214>
     a5a:	bf00      	nop

    //
    // Clear out any IOS register-access interrupts that may be active, and
    // enable interrupts for the registers we're interested in.
    //
    am_hal_ios_access_int_clear(AM_HAL_IOS_ACCESS_INT_ALL);
     a5c:	f04f 30ff 	mov.w	r0, #4294967295
     a60:	f001 faa0 	bl	1fa4 <am_hal_ios_access_int_clear>
    am_hal_ios_access_int_enable(AM_HAL_IOS_ACCESS_INT_03);
     a64:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     a68:	f001 fa94 	bl	1f94 <am_hal_ios_access_int_enable>

    am_hal_ios_int_clear(AM_HAL_IOS_INT_ALL);
     a6c:	f04f 30ff 	mov.w	r0, #4294967295
     a70:	f001 fab4 	bl	1fdc <am_hal_ios_int_clear>
    am_hal_ios_int_enable(AM_HAL_IOS_INT_FSIZE);
     a74:	2001      	movs	r0, #1
     a76:	f001 faa9 	bl	1fcc <am_hal_ios_int_enable>

    //
    // Set the bit in the NVIC to accept access interrupts from the IO Slave.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_IOSACC);
     a7a:	2015      	movs	r0, #21
     a7c:	f001 f9de 	bl	1e3c <am_hal_interrupt_enable>
//    am_hal_interrupt_enable(AM_HAL_INTERRUPT_IOSLAVE);

    //
    // Notify the host that we're ready to receive data.
    //
    *((uint32_t *) am_hal_ios_pui8LRAM) = AM_BOOTLOADER_READY;
     a80:	4b12      	ldr	r3, [pc, #72]	; (acc <am_multiboot_setup_ios_interface+0x284>)
     a82:	681b      	ldr	r3, [r3, #0]
     a84:	2202      	movs	r2, #2
     a86:	601a      	str	r2, [r3, #0]
    am_hal_gpio_out_bit_clear(g_iosIntPin);
     a88:	4b0e      	ldr	r3, [pc, #56]	; (ac4 <am_multiboot_setup_ios_interface+0x27c>)
     a8a:	681b      	ldr	r3, [r3, #0]
     a8c:	08db      	lsrs	r3, r3, #3
     a8e:	f003 0204 	and.w	r2, r3, #4
     a92:	4b0f      	ldr	r3, [pc, #60]	; (ad0 <am_multiboot_setup_ios_interface+0x288>)
     a94:	4413      	add	r3, r2
     a96:	4619      	mov	r1, r3
     a98:	4b0a      	ldr	r3, [pc, #40]	; (ac4 <am_multiboot_setup_ios_interface+0x27c>)
     a9a:	681b      	ldr	r3, [r3, #0]
     a9c:	f003 031f 	and.w	r3, r3, #31
     aa0:	2201      	movs	r2, #1
     aa2:	fa02 f303 	lsl.w	r3, r2, r3
     aa6:	600b      	str	r3, [r1, #0]
}
     aa8:	bf00      	nop
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	bd90      	pop	{r4, r7, pc}
     ab0:	40010060 	.word	0x40010060
     ab4:	40010040 	.word	0x40010040
     ab8:	40010000 	.word	0x40010000
     abc:	40010080 	.word	0x40010080
     ac0:	10001000 	.word	0x10001000
     ac4:	10001084 	.word	0x10001084
     ac8:	40010090 	.word	0x40010090
     acc:	000026f8 	.word	0x000026f8
     ad0:	40010098 	.word	0x40010098

00000ad4 <am_multiboot_cleanup_ios_interface>:
//! @return none
//
//*****************************************************************************
void
am_multiboot_cleanup_ios_interface(void)
{
     ad4:	b480      	push	{r7}
     ad6:	af00      	add	r7, sp, #0
    am_hal_gpio_pin_config(0, AM_HAL_PIN_DISABLE);
     ad8:	4b2a      	ldr	r3, [pc, #168]	; (b84 <am_multiboot_cleanup_ios_interface+0xb0>)
     ada:	2273      	movs	r2, #115	; 0x73
     adc:	601a      	str	r2, [r3, #0]
     ade:	4a2a      	ldr	r2, [pc, #168]	; (b88 <am_multiboot_cleanup_ios_interface+0xb4>)
     ae0:	4b29      	ldr	r3, [pc, #164]	; (b88 <am_multiboot_cleanup_ios_interface+0xb4>)
     ae2:	681b      	ldr	r3, [r3, #0]
     ae4:	f023 0307 	bic.w	r3, r3, #7
     ae8:	6013      	str	r3, [r2, #0]
     aea:	4a28      	ldr	r2, [pc, #160]	; (b8c <am_multiboot_cleanup_ios_interface+0xb8>)
     aec:	4b27      	ldr	r3, [pc, #156]	; (b8c <am_multiboot_cleanup_ios_interface+0xb8>)
     aee:	681b      	ldr	r3, [r3, #0]
     af0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     af4:	f043 0318 	orr.w	r3, r3, #24
     af8:	6013      	str	r3, [r2, #0]
     afa:	4b22      	ldr	r3, [pc, #136]	; (b84 <am_multiboot_cleanup_ios_interface+0xb0>)
     afc:	2200      	movs	r2, #0
     afe:	601a      	str	r2, [r3, #0]
    am_hal_gpio_pin_config(1, AM_HAL_PIN_DISABLE);
     b00:	4b20      	ldr	r3, [pc, #128]	; (b84 <am_multiboot_cleanup_ios_interface+0xb0>)
     b02:	2273      	movs	r2, #115	; 0x73
     b04:	601a      	str	r2, [r3, #0]
     b06:	4a20      	ldr	r2, [pc, #128]	; (b88 <am_multiboot_cleanup_ios_interface+0xb4>)
     b08:	4b1f      	ldr	r3, [pc, #124]	; (b88 <am_multiboot_cleanup_ios_interface+0xb4>)
     b0a:	681b      	ldr	r3, [r3, #0]
     b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     b10:	6013      	str	r3, [r2, #0]
     b12:	4a1e      	ldr	r2, [pc, #120]	; (b8c <am_multiboot_cleanup_ios_interface+0xb8>)
     b14:	4b1d      	ldr	r3, [pc, #116]	; (b8c <am_multiboot_cleanup_ios_interface+0xb8>)
     b16:	681b      	ldr	r3, [r3, #0]
     b18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     b1c:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
     b20:	6013      	str	r3, [r2, #0]
     b22:	4b18      	ldr	r3, [pc, #96]	; (b84 <am_multiboot_cleanup_ios_interface+0xb0>)
     b24:	2200      	movs	r2, #0
     b26:	601a      	str	r2, [r3, #0]
    am_hal_gpio_pin_config(2, AM_HAL_PIN_DISABLE);
     b28:	4b16      	ldr	r3, [pc, #88]	; (b84 <am_multiboot_cleanup_ios_interface+0xb0>)
     b2a:	2273      	movs	r2, #115	; 0x73
     b2c:	601a      	str	r2, [r3, #0]
     b2e:	4a16      	ldr	r2, [pc, #88]	; (b88 <am_multiboot_cleanup_ios_interface+0xb4>)
     b30:	4b15      	ldr	r3, [pc, #84]	; (b88 <am_multiboot_cleanup_ios_interface+0xb4>)
     b32:	681b      	ldr	r3, [r3, #0]
     b34:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     b38:	6013      	str	r3, [r2, #0]
     b3a:	4a14      	ldr	r2, [pc, #80]	; (b8c <am_multiboot_cleanup_ios_interface+0xb8>)
     b3c:	4b13      	ldr	r3, [pc, #76]	; (b8c <am_multiboot_cleanup_ios_interface+0xb8>)
     b3e:	681b      	ldr	r3, [r3, #0]
     b40:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     b44:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
     b48:	6013      	str	r3, [r2, #0]
     b4a:	4b0e      	ldr	r3, [pc, #56]	; (b84 <am_multiboot_cleanup_ios_interface+0xb0>)
     b4c:	2200      	movs	r2, #0
     b4e:	601a      	str	r2, [r3, #0]
    am_hal_gpio_pin_config(3, AM_HAL_PIN_DISABLE);
     b50:	4b0c      	ldr	r3, [pc, #48]	; (b84 <am_multiboot_cleanup_ios_interface+0xb0>)
     b52:	2273      	movs	r2, #115	; 0x73
     b54:	601a      	str	r2, [r3, #0]
     b56:	4a0c      	ldr	r2, [pc, #48]	; (b88 <am_multiboot_cleanup_ios_interface+0xb4>)
     b58:	4b0b      	ldr	r3, [pc, #44]	; (b88 <am_multiboot_cleanup_ios_interface+0xb4>)
     b5a:	681b      	ldr	r3, [r3, #0]
     b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
     b60:	6013      	str	r3, [r2, #0]
     b62:	4a0a      	ldr	r2, [pc, #40]	; (b8c <am_multiboot_cleanup_ios_interface+0xb8>)
     b64:	4b09      	ldr	r3, [pc, #36]	; (b8c <am_multiboot_cleanup_ios_interface+0xb8>)
     b66:	681b      	ldr	r3, [r3, #0]
     b68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     b6c:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
     b70:	6013      	str	r3, [r2, #0]
     b72:	4b04      	ldr	r3, [pc, #16]	; (b84 <am_multiboot_cleanup_ios_interface+0xb0>)
     b74:	2200      	movs	r2, #0
     b76:	601a      	str	r2, [r3, #0]
}
     b78:	bf00      	nop
     b7a:	46bd      	mov	sp, r7
     b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b80:	4770      	bx	lr
     b82:	bf00      	nop
     b84:	40010060 	.word	0x40010060
     b88:	40010040 	.word	0x40010040
     b8c:	40010000 	.word	0x40010000

00000b90 <check_flash_address_range>:

// Checks that the address does not overlap with bootloader or flag page
// It also checks that the address is inside the internal flash
static bool
check_flash_address_range(uint32_t address, uint32_t size)
{
     b90:	b580      	push	{r7, lr}
     b92:	b090      	sub	sp, #64	; 0x40
     b94:	af00      	add	r7, sp, #0
     b96:	6078      	str	r0, [r7, #4]
     b98:	6039      	str	r1, [r7, #0]
    static uint32_t g_intFlashSize = 0;
    am_hal_mcuctrl_device_t sDevice;

    uint32_t ui32Start = address;
     b9a:	687b      	ldr	r3, [r7, #4]
     b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint32_t ui32End = address + size - 1 ;
     b9e:	687a      	ldr	r2, [r7, #4]
     ba0:	683b      	ldr	r3, [r7, #0]
     ba2:	4413      	add	r3, r2
     ba4:	3b01      	subs	r3, #1
     ba6:	63bb      	str	r3, [r7, #56]	; 0x38

    if (g_intFlashSize == 0) // First call
     ba8:	4b19      	ldr	r3, [pc, #100]	; (c10 <check_flash_address_range+0x80>)
     baa:	681b      	ldr	r3, [r3, #0]
     bac:	2b00      	cmp	r3, #0
     bae:	d107      	bne.n	bc0 <check_flash_address_range+0x30>
    {
        // Get chip specific info
#if AM_APOLLO3_MCUCTRL
        am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &sDevice);
#else
        am_hal_mcuctrl_device_info_get(&sDevice);
     bb0:	f107 0308 	add.w	r3, r7, #8
     bb4:	4618      	mov	r0, r3
     bb6:	f001 fa17 	bl	1fe8 <am_hal_mcuctrl_device_info_get>
#endif

        g_intFlashSize = sDevice.ui32FlashSize;
     bba:	6a3b      	ldr	r3, [r7, #32]
     bbc:	4a14      	ldr	r2, [pc, #80]	; (c10 <check_flash_address_range+0x80>)
     bbe:	6013      	str	r3, [r2, #0]
    // Make sure the address is within flash.
    //
    //
    // Check to make sure address is not within bootloader program
    //
    if ( ui32Start < MAX_BOOTLOADER_SIZE )
     bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     bc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
     bc6:	d201      	bcs.n	bcc <check_flash_address_range+0x3c>
    {
        return false;
     bc8:	2300      	movs	r3, #0
     bca:	e01d      	b.n	c08 <check_flash_address_range+0x78>
    }
    // Check to make sure the address is not beyond the flash
    if (ui32End >= g_intFlashSize)
     bcc:	4b10      	ldr	r3, [pc, #64]	; (c10 <check_flash_address_range+0x80>)
     bce:	681b      	ldr	r3, [r3, #0]
     bd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
     bd2:	429a      	cmp	r2, r3
     bd4:	d301      	bcc.n	bda <check_flash_address_range+0x4a>
    {
        return false;
     bd6:	2300      	movs	r3, #0
     bd8:	e016      	b.n	c08 <check_flash_address_range+0x78>
    if ( USE_FLAG_PAGE )
    {
        //
        // Check to make sure address is not in the flag page
        //
        if ( (FLAG_PAGE_LOCATION == ui32Start) ||
     bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     bdc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
     be0:	d00f      	beq.n	c02 <check_flash_address_range+0x72>
     be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     be4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
     be8:	d903      	bls.n	bf2 <check_flash_address_range+0x62>
             ((FLAG_PAGE_LOCATION < ui32Start) &&
     bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     bec:	f5b3 4fd0 	cmp.w	r3, #26624	; 0x6800
     bf0:	d307      	bcc.n	c02 <check_flash_address_range+0x72>
                ((FLAG_PAGE_LOCATION + AM_HAL_FLASH_PAGE_SIZE) > ui32Start)) ||
     bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     bf4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
     bf8:	d205      	bcs.n	c06 <check_flash_address_range+0x76>
            ((FLAG_PAGE_LOCATION > ui32Start) &&
     bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     bfc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
     c00:	d301      	bcc.n	c06 <check_flash_address_range+0x76>
                (FLAG_PAGE_LOCATION <= ui32End))
           )
        {
            return false;
     c02:	2300      	movs	r3, #0
     c04:	e000      	b.n	c08 <check_flash_address_range+0x78>
        }
    }
    return true;
     c06:	2301      	movs	r3, #1
}
     c08:	4618      	mov	r0, r3
     c0a:	3740      	adds	r7, #64	; 0x40
     c0c:	46bd      	mov	sp, r7
     c0e:	bd80      	pop	{r7, pc}
     c10:	100010a8 	.word	0x100010a8

00000c14 <am_multiboot_flash_read_page>:
// Internal Flash handler wrapper
//
//*****************************************************************************
static int
am_multiboot_flash_read_page(uint32_t ui32DestAddr, uint32_t *pSrc, uint32_t ui32Length)
{
     c14:	b580      	push	{r7, lr}
     c16:	b084      	sub	sp, #16
     c18:	af00      	add	r7, sp, #0
     c1a:	60f8      	str	r0, [r7, #12]
     c1c:	60b9      	str	r1, [r7, #8]
     c1e:	607a      	str	r2, [r7, #4]
    if (check_flash_address_range((uint32_t)pSrc, ui32Length))
     c20:	68bb      	ldr	r3, [r7, #8]
     c22:	6879      	ldr	r1, [r7, #4]
     c24:	4618      	mov	r0, r3
     c26:	f7ff ffb3 	bl	b90 <check_flash_address_range>
     c2a:	4603      	mov	r3, r0
     c2c:	2b00      	cmp	r3, #0
     c2e:	d007      	beq.n	c40 <am_multiboot_flash_read_page+0x2c>
    {
        memcpy((uint8_t *)ui32DestAddr, (uint8_t *)pSrc, ui32Length);
     c30:	68fb      	ldr	r3, [r7, #12]
     c32:	687a      	ldr	r2, [r7, #4]
     c34:	68b9      	ldr	r1, [r7, #8]
     c36:	4618      	mov	r0, r3
     c38:	f001 fb42 	bl	22c0 <memcpy>
        return 0;
     c3c:	2300      	movs	r3, #0
     c3e:	e001      	b.n	c44 <am_multiboot_flash_read_page+0x30>
    }
    else
    {
        return -1;
     c40:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
     c44:	4618      	mov	r0, r3
     c46:	3710      	adds	r7, #16
     c48:	46bd      	mov	sp, r7
     c4a:	bd80      	pop	{r7, pc}

00000c4c <am_multiboot_flash_write_page>:

static int
am_multiboot_flash_write_page(uint32_t ui32DestAddr, uint32_t *pSrc, uint32_t ui32Length)
{
     c4c:	b580      	push	{r7, lr}
     c4e:	b084      	sub	sp, #16
     c50:	af00      	add	r7, sp, #0
     c52:	60f8      	str	r0, [r7, #12]
     c54:	60b9      	str	r1, [r7, #8]
     c56:	607a      	str	r2, [r7, #4]
    if (check_flash_address_range(ui32DestAddr, ui32Length))
     c58:	6879      	ldr	r1, [r7, #4]
     c5a:	68f8      	ldr	r0, [r7, #12]
     c5c:	f7ff ff98 	bl	b90 <check_flash_address_range>
     c60:	4603      	mov	r3, r0
     c62:	2b00      	cmp	r3, #0
     c64:	d006      	beq.n	c74 <am_multiboot_flash_write_page+0x28>
    {
        am_bootloader_program_flash_page(ui32DestAddr, pSrc, ui32Length);
     c66:	687a      	ldr	r2, [r7, #4]
     c68:	68b9      	ldr	r1, [r7, #8]
     c6a:	68f8      	ldr	r0, [r7, #12]
     c6c:	f7ff fc66 	bl	53c <am_bootloader_program_flash_page>
        return 0;
     c70:	2300      	movs	r3, #0
     c72:	e001      	b.n	c78 <am_multiboot_flash_write_page+0x2c>
    }
    else
    {
        return -1;
     c74:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
     c78:	4618      	mov	r0, r3
     c7a:	3710      	adds	r7, #16
     c7c:	46bd      	mov	sp, r7
     c7e:	bd80      	pop	{r7, pc}

00000c80 <am_multiboot_flash_erase_page>:


static int am_multiboot_flash_erase_page(uint32_t ui32DestAddr)
{
     c80:	b580      	push	{r7, lr}
     c82:	b082      	sub	sp, #8
     c84:	af00      	add	r7, sp, #0
     c86:	6078      	str	r0, [r7, #4]
    if (check_flash_address_range(ui32DestAddr, 4))
     c88:	2104      	movs	r1, #4
     c8a:	6878      	ldr	r0, [r7, #4]
     c8c:	f7ff ff80 	bl	b90 <check_flash_address_range>
     c90:	4603      	mov	r3, r0
     c92:	2b00      	cmp	r3, #0
     c94:	d004      	beq.n	ca0 <am_multiboot_flash_erase_page+0x20>
    {
        am_bootloader_erase_flash_page(ui32DestAddr);
     c96:	6878      	ldr	r0, [r7, #4]
     c98:	f7ff fc18 	bl	4cc <am_bootloader_erase_flash_page>
        return 0;
     c9c:	2300      	movs	r3, #0
     c9e:	e001      	b.n	ca4 <am_multiboot_flash_erase_page+0x24>
    }
    else
    {
        return -1;
     ca0:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
     ca4:	4618      	mov	r0, r3
     ca6:	3708      	adds	r7, #8
     ca8:	46bd      	mov	sp, r7
     caa:	bd80      	pop	{r7, pc}

00000cac <program_image>:
#endif

// Programs the flash based on g_am_multiboot.pui32WriteAddress, g_am_multiboot.pui8RxBuffer & g_am_multiboot.ui32BytesInBuffer
void
program_image(uint32_t bEncrypted)
{
     cac:	b580      	push	{r7, lr}
     cae:	b086      	sub	sp, #24
     cb0:	af00      	add	r7, sp, #0
     cb2:	6078      	str	r0, [r7, #4]
    uint32_t ui32WriteAddr = (uint32_t)g_am_multiboot.pui32WriteAddress;
     cb4:	4b18      	ldr	r3, [pc, #96]	; (d18 <program_image+0x6c>)
     cb6:	691b      	ldr	r3, [r3, #16]
     cb8:	617b      	str	r3, [r7, #20]
    uint32_t *pui32ReadAddr = (uint32_t *)g_am_multiboot.pui8RxBuffer;
     cba:	4b17      	ldr	r3, [pc, #92]	; (d18 <program_image+0x6c>)
     cbc:	685b      	ldr	r3, [r3, #4]
     cbe:	613b      	str	r3, [r7, #16]
    uint32_t ui32NumBytes = g_am_multiboot.ui32BytesInBuffer;
     cc0:	4b15      	ldr	r3, [pc, #84]	; (d18 <program_image+0x6c>)
     cc2:	689b      	ldr	r3, [r3, #8]
     cc4:	60fb      	str	r3, [r7, #12]

    if ( g_am_multiboot.bStoreInSRAM )
     cc6:	4b14      	ldr	r3, [pc, #80]	; (d18 <program_image+0x6c>)
     cc8:	7b1b      	ldrb	r3, [r3, #12]
     cca:	2b00      	cmp	r3, #0
     ccc:	d020      	beq.n	d10 <program_image+0x64>
    {
        while ( ui32NumBytes )
     cce:	e01a      	b.n	d06 <program_image+0x5a>
        {
            am_bootloader_program_flash_page(ui32WriteAddr, pui32ReadAddr,
     cd0:	68fb      	ldr	r3, [r7, #12]
     cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
     cd6:	bf28      	it	cs
     cd8:	f44f 6300 	movcs.w	r3, #2048	; 0x800
     cdc:	461a      	mov	r2, r3
     cde:	6939      	ldr	r1, [r7, #16]
     ce0:	6978      	ldr	r0, [r7, #20]
     ce2:	f7ff fc2b 	bl	53c <am_bootloader_program_flash_page>
                (ui32NumBytes > AM_HAL_FLASH_PAGE_SIZE) ? AM_HAL_FLASH_PAGE_SIZE: ui32NumBytes);
            if ( ui32NumBytes > AM_HAL_FLASH_PAGE_SIZE )
     ce6:	68fb      	ldr	r3, [r7, #12]
     ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
     cec:	d90f      	bls.n	d0e <program_image+0x62>
            {
                ui32NumBytes -= AM_HAL_FLASH_PAGE_SIZE;
     cee:	68fb      	ldr	r3, [r7, #12]
     cf0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
     cf4:	60fb      	str	r3, [r7, #12]
                ui32WriteAddr += AM_HAL_FLASH_PAGE_SIZE;
     cf6:	697b      	ldr	r3, [r7, #20]
     cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
     cfc:	617b      	str	r3, [r7, #20]
                pui32ReadAddr += AM_HAL_FLASH_PAGE_SIZE / 4;
     cfe:	693b      	ldr	r3, [r7, #16]
     d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
     d04:	613b      	str	r3, [r7, #16]
        while ( ui32NumBytes )
     d06:	68fb      	ldr	r3, [r7, #12]
     d08:	2b00      	cmp	r3, #0
     d0a:	d1e1      	bne.n	cd0 <program_image+0x24>
        }
    }
    // TODO: Apply necessary protections to flash
    // Need to add flash protection - chunk by chunk including potentially
    // the last partial chunk
}
     d0c:	e000      	b.n	d10 <program_image+0x64>
                break;
     d0e:	bf00      	nop
}
     d10:	bf00      	nop
     d12:	3718      	adds	r7, #24
     d14:	46bd      	mov	sp, r7
     d16:	bd80      	pop	{r7, pc}
     d18:	1000108c 	.word	0x1000108c

00000d1c <am_multiboot_init>:
//! @return true if the parameters are acceptable.
//
//*****************************************************************************
bool
am_multiboot_init(uint32_t *pBuf, uint32_t bufSize)
{
     d1c:	b480      	push	{r7}
     d1e:	b085      	sub	sp, #20
     d20:	af00      	add	r7, sp, #0
     d22:	6078      	str	r0, [r7, #4]
     d24:	6039      	str	r1, [r7, #0]
    bool ret = false;
     d26:	2300      	movs	r3, #0
     d28:	73fb      	strb	r3, [r7, #15]
    if (pBuf && (bufSize >= AM_HAL_FLASH_PAGE_SIZE))
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	2b00      	cmp	r3, #0
     d2e:	d008      	beq.n	d42 <am_multiboot_init+0x26>
     d30:	683b      	ldr	r3, [r7, #0]
     d32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
     d36:	d304      	bcc.n	d42 <am_multiboot_init+0x26>
    {
        g_am_multiboot.pui32UserBuf = pBuf;
     d38:	4a05      	ldr	r2, [pc, #20]	; (d50 <am_multiboot_init+0x34>)
     d3a:	687b      	ldr	r3, [r7, #4]
     d3c:	6013      	str	r3, [r2, #0]
        ret = true;
     d3e:	2301      	movs	r3, #1
     d40:	73fb      	strb	r3, [r7, #15]
    }
    return ret;
     d42:	7bfb      	ldrb	r3, [r7, #15]
}
     d44:	4618      	mov	r0, r3
     d46:	3714      	adds	r7, #20
     d48:	46bd      	mov	sp, r7
     d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
     d4e:	4770      	bx	lr
     d50:	1000108c 	.word	0x1000108c

00000d54 <image_start_packet_read>:
//! @return true if the image parameters are acceptable.
//
//*****************************************************************************
bool
image_start_packet_read(am_bootloader_image_t *psImage, uint32_t *pui32Packet)
{
     d54:	b580      	push	{r7, lr}
     d56:	b08e      	sub	sp, #56	; 0x38
     d58:	af00      	add	r7, sp, #0
     d5a:	6078      	str	r0, [r7, #4]
     d5c:	6039      	str	r1, [r7, #0]
    // Get chip specific info
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &sDevice);
#else
    // Get chip specific info
    am_hal_mcuctrl_device_info_get(&sDevice);
     d5e:	f107 0308 	add.w	r3, r7, #8
     d62:	4618      	mov	r0, r3
     d64:	f001 f940 	bl	1fe8 <am_hal_mcuctrl_device_info_get>

    //
    // Set the image structure parameters based on the information in the
    // packet.
    //
    psImage->pui32LinkAddress = (uint32_t *)(pui32Packet[1]);
     d68:	683b      	ldr	r3, [r7, #0]
     d6a:	3304      	adds	r3, #4
     d6c:	681b      	ldr	r3, [r3, #0]
     d6e:	461a      	mov	r2, r3
     d70:	687b      	ldr	r3, [r7, #4]
     d72:	601a      	str	r2, [r3, #0]
    psImage->ui32NumBytes = pui32Packet[2];
     d74:	683b      	ldr	r3, [r7, #0]
     d76:	689a      	ldr	r2, [r3, #8]
     d78:	687b      	ldr	r3, [r7, #4]
     d7a:	605a      	str	r2, [r3, #4]
    psImage->ui32CRC = pui32Packet[3];
     d7c:	683b      	ldr	r3, [r7, #0]
     d7e:	68da      	ldr	r2, [r3, #12]
     d80:	687b      	ldr	r3, [r7, #4]
     d82:	609a      	str	r2, [r3, #8]
    psImage->ui32OverrideGPIO = DEFAULT_OVERRIDE_GPIO;
     d84:	687b      	ldr	r3, [r7, #4]
     d86:	2212      	movs	r2, #18
     d88:	60da      	str	r2, [r3, #12]
    psImage->ui32OverridePolarity = DEFAULT_OVERRIDE_POLARITY;
     d8a:	687b      	ldr	r3, [r7, #4]
     d8c:	2200      	movs	r2, #0
     d8e:	611a      	str	r2, [r3, #16]
    psImage->bEncrypted = 0; // This only indicates Copy-Protection in flash
     d90:	687b      	ldr	r3, [r7, #4]
     d92:	2200      	movs	r2, #0
     d94:	61da      	str	r2, [r3, #28]

    //
    // We'll need to fill in the stack pointer and reset vector a little later
    // in the process.
    //
    psImage->pui32StackPointer = 0;
     d96:	687b      	ldr	r3, [r7, #4]
     d98:	2200      	movs	r2, #0
     d9a:	615a      	str	r2, [r3, #20]
    psImage->pui32ResetVector = 0;
     d9c:	687b      	ldr	r3, [r7, #4]
     d9e:	2200      	movs	r2, #0
     da0:	619a      	str	r2, [r3, #24]

    //
    // Check to make sure we're not overwriting the bootloader or the flag page.
    //
    if (!check_flash_address_range((uint32_t)psImage->pui32LinkAddress,
     da2:	687b      	ldr	r3, [r7, #4]
     da4:	681b      	ldr	r3, [r3, #0]
     da6:	461a      	mov	r2, r3
     da8:	687b      	ldr	r3, [r7, #4]
     daa:	685b      	ldr	r3, [r3, #4]
     dac:	4619      	mov	r1, r3
     dae:	4610      	mov	r0, r2
     db0:	f7ff feee 	bl	b90 <check_flash_address_range>
     db4:	4603      	mov	r3, r0
     db6:	f083 0301 	eor.w	r3, r3, #1
     dba:	b2db      	uxtb	r3, r3
     dbc:	2b00      	cmp	r3, #0
     dbe:	d001      	beq.n	dc4 <image_start_packet_read+0x70>
            psImage->ui32NumBytes))
    {
        return false;
     dc0:	2300      	movs	r3, #0
     dc2:	e028      	b.n	e16 <image_start_packet_read+0xc2>
    }
    // Determine if we can gather image in SRAM completely before flashing all at once
    // This implementation uses the excess SRAM available in the system
    // CAUTION!!!: For this to work it is essential that the unused SRAM banks are
    // not powered down
    if ((sDevice.ui32SRAMSize - MAX_SRAM_USED) >= psImage->ui32NumBytes)
     dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     dc6:	f5a3 42c0 	sub.w	r2, r3, #24576	; 0x6000
     dca:	687b      	ldr	r3, [r7, #4]
     dcc:	685b      	ldr	r3, [r3, #4]
     dce:	429a      	cmp	r2, r3
     dd0:	d306      	bcc.n	de0 <image_start_packet_read+0x8c>
    {
        g_am_multiboot.bStoreInSRAM = 1;
     dd2:	4b13      	ldr	r3, [pc, #76]	; (e20 <image_start_packet_read+0xcc>)
     dd4:	2201      	movs	r2, #1
     dd6:	731a      	strb	r2, [r3, #12]
        g_am_multiboot.pui8RxBuffer = (uint8_t *)(SRAM_BASEADDR + MAX_SRAM_USED);
     dd8:	4b11      	ldr	r3, [pc, #68]	; (e20 <image_start_packet_read+0xcc>)
     dda:	4a12      	ldr	r2, [pc, #72]	; (e24 <image_start_packet_read+0xd0>)
     ddc:	605a      	str	r2, [r3, #4]
     dde:	e00c      	b.n	dfa <image_start_packet_read+0xa6>
        g_am_multiboot.ui32SramBytesUsed = sDevice.ui32SRAMSize;
#endif
    }
    else
    {
        g_am_multiboot.bStoreInSRAM = 0;
     de0:	4b0f      	ldr	r3, [pc, #60]	; (e20 <image_start_packet_read+0xcc>)
     de2:	2200      	movs	r2, #0
     de4:	731a      	strb	r2, [r3, #12]
        if (g_am_multiboot.pui32UserBuf == NULL)
     de6:	4b0e      	ldr	r3, [pc, #56]	; (e20 <image_start_packet_read+0xcc>)
     de8:	681b      	ldr	r3, [r3, #0]
     dea:	2b00      	cmp	r3, #0
     dec:	d101      	bne.n	df2 <image_start_packet_read+0x9e>
        {
            return false;
     dee:	2300      	movs	r3, #0
     df0:	e011      	b.n	e16 <image_start_packet_read+0xc2>
        }
        g_am_multiboot.pui8RxBuffer = (uint8_t *)g_am_multiboot.pui32UserBuf;
     df2:	4b0b      	ldr	r3, [pc, #44]	; (e20 <image_start_packet_read+0xcc>)
     df4:	681b      	ldr	r3, [r3, #0]
     df6:	4a0a      	ldr	r2, [pc, #40]	; (e20 <image_start_packet_read+0xcc>)
     df8:	6053      	str	r3, [r2, #4]
#endif
    //
    // Otherwise, the image is presumed to be reasonable. Set our global
    // variables based on the new image structure.
    //
    g_am_multiboot.pui32WriteAddress = psImage->pui32LinkAddress;
     dfa:	687b      	ldr	r3, [r7, #4]
     dfc:	681b      	ldr	r3, [r3, #0]
     dfe:	4a08      	ldr	r2, [pc, #32]	; (e20 <image_start_packet_read+0xcc>)
     e00:	6113      	str	r3, [r2, #16]
    g_ui32BytesReceived = 0;
     e02:	4b09      	ldr	r3, [pc, #36]	; (e28 <image_start_packet_read+0xd4>)
     e04:	2200      	movs	r2, #0
     e06:	601a      	str	r2, [r3, #0]
    g_am_multiboot.ui32BytesInBuffer = 0;
     e08:	4b05      	ldr	r3, [pc, #20]	; (e20 <image_start_packet_read+0xcc>)
     e0a:	2200      	movs	r2, #0
     e0c:	609a      	str	r2, [r3, #8]
    g_ui32CRC = 0;
     e0e:	4b07      	ldr	r3, [pc, #28]	; (e2c <image_start_packet_read+0xd8>)
     e10:	2200      	movs	r2, #0
     e12:	601a      	str	r2, [r3, #0]
    return true;
     e14:	2301      	movs	r3, #1
}
     e16:	4618      	mov	r0, r3
     e18:	3738      	adds	r7, #56	; 0x38
     e1a:	46bd      	mov	sp, r7
     e1c:	bd80      	pop	{r7, pc}
     e1e:	bf00      	nop
     e20:	1000108c 	.word	0x1000108c
     e24:	10006000 	.word	0x10006000
     e28:	100010a0 	.word	0x100010a0
     e2c:	100010a4 	.word	0x100010a4

00000e30 <image_data_packet_read>:
//! @return None.
//
//*****************************************************************************
void
image_data_packet_read(uint8_t *pui8Src, uint32_t ui32Size)
{
     e30:	b580      	push	{r7, lr}
     e32:	b084      	sub	sp, #16
     e34:	af00      	add	r7, sp, #0
     e36:	6078      	str	r0, [r7, #4]
     e38:	6039      	str	r1, [r7, #0]
    uint32_t i;
    //
    // Loop through the data, copying it into the global buffer.
    //
    for ( i = 0; i < ui32Size; i++ )
     e3a:	2300      	movs	r3, #0
     e3c:	60fb      	str	r3, [r7, #12]
     e3e:	e063      	b.n	f08 <image_data_packet_read+0xd8>
    {
        g_am_multiboot.pui8RxBuffer[g_am_multiboot.ui32BytesInBuffer] = *pui8Src++;
     e40:	4b35      	ldr	r3, [pc, #212]	; (f18 <image_data_packet_read+0xe8>)
     e42:	685a      	ldr	r2, [r3, #4]
     e44:	4b34      	ldr	r3, [pc, #208]	; (f18 <image_data_packet_read+0xe8>)
     e46:	689b      	ldr	r3, [r3, #8]
     e48:	441a      	add	r2, r3
     e4a:	687b      	ldr	r3, [r7, #4]
     e4c:	1c59      	adds	r1, r3, #1
     e4e:	6079      	str	r1, [r7, #4]
     e50:	781b      	ldrb	r3, [r3, #0]
     e52:	7013      	strb	r3, [r2, #0]

        //
        // Keep track of how much data we've copied into the SRAM buffer.
        //
        g_am_multiboot.ui32BytesInBuffer++;
     e54:	4b30      	ldr	r3, [pc, #192]	; (f18 <image_data_packet_read+0xe8>)
     e56:	689b      	ldr	r3, [r3, #8]
     e58:	3301      	adds	r3, #1
     e5a:	4a2f      	ldr	r2, [pc, #188]	; (f18 <image_data_packet_read+0xe8>)
     e5c:	6093      	str	r3, [r2, #8]
        g_ui32BytesReceived++;
     e5e:	4b2f      	ldr	r3, [pc, #188]	; (f1c <image_data_packet_read+0xec>)
     e60:	681b      	ldr	r3, [r3, #0]
     e62:	3301      	adds	r3, #1
     e64:	4a2d      	ldr	r2, [pc, #180]	; (f1c <image_data_packet_read+0xec>)
     e66:	6013      	str	r3, [r2, #0]

        //
        // Whenever we hit a page boundary or the end of the image, we should
        // write to flash.
        //
        if ( (!g_am_multiboot.bStoreInSRAM && (g_am_multiboot.ui32BytesInBuffer == AM_HAL_FLASH_PAGE_SIZE)) ||
     e68:	4b2b      	ldr	r3, [pc, #172]	; (f18 <image_data_packet_read+0xe8>)
     e6a:	7b1b      	ldrb	r3, [r3, #12]
     e6c:	f083 0301 	eor.w	r3, r3, #1
     e70:	b2db      	uxtb	r3, r3
     e72:	2b00      	cmp	r3, #0
     e74:	d004      	beq.n	e80 <image_data_packet_read+0x50>
     e76:	4b28      	ldr	r3, [pc, #160]	; (f18 <image_data_packet_read+0xe8>)
     e78:	689b      	ldr	r3, [r3, #8]
     e7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
     e7e:	d005      	beq.n	e8c <image_data_packet_read+0x5c>
                 g_ui32BytesReceived == g_sImage.ui32NumBytes )
     e80:	4b27      	ldr	r3, [pc, #156]	; (f20 <image_data_packet_read+0xf0>)
     e82:	685a      	ldr	r2, [r3, #4]
     e84:	4b25      	ldr	r3, [pc, #148]	; (f1c <image_data_packet_read+0xec>)
     e86:	681b      	ldr	r3, [r3, #0]
        if ( (!g_am_multiboot.bStoreInSRAM && (g_am_multiboot.ui32BytesInBuffer == AM_HAL_FLASH_PAGE_SIZE)) ||
     e88:	429a      	cmp	r2, r3
     e8a:	d13a      	bne.n	f02 <image_data_packet_read+0xd2>
        {
            //
            // Run a quick CRC on the received bytes, holding on to the result in a
            // global variable, so we can pick up where we left off on the next pass.
            //
            am_bootloader_partial_crc32(g_am_multiboot.pui8RxBuffer, g_am_multiboot.ui32BytesInBuffer, &g_ui32CRC);
     e8c:	4b22      	ldr	r3, [pc, #136]	; (f18 <image_data_packet_read+0xe8>)
     e8e:	6858      	ldr	r0, [r3, #4]
     e90:	4b21      	ldr	r3, [pc, #132]	; (f18 <image_data_packet_read+0xe8>)
     e92:	689b      	ldr	r3, [r3, #8]
     e94:	4a23      	ldr	r2, [pc, #140]	; (f24 <image_data_packet_read+0xf4>)
     e96:	4619      	mov	r1, r3
     e98:	f7ff f920 	bl	dc <am_bootloader_partial_crc32>
            //
            // If this is the first block of our new image, we need to record
            // the reset vector and stack pointer information for inclusion in
            // the flag page.
            //
            if ( g_am_multiboot.bStoreInSRAM || (g_ui32BytesReceived <= AM_HAL_FLASH_PAGE_SIZE) )
     e9c:	4b1e      	ldr	r3, [pc, #120]	; (f18 <image_data_packet_read+0xe8>)
     e9e:	7b1b      	ldrb	r3, [r3, #12]
     ea0:	2b00      	cmp	r3, #0
     ea2:	d104      	bne.n	eae <image_data_packet_read+0x7e>
     ea4:	4b1d      	ldr	r3, [pc, #116]	; (f1c <image_data_packet_read+0xec>)
     ea6:	681b      	ldr	r3, [r3, #0]
     ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
     eac:	d80c      	bhi.n	ec8 <image_data_packet_read+0x98>
            {
                g_sImage.pui32StackPointer = (uint32_t *)(((uint32_t *)g_am_multiboot.pui8RxBuffer)[0]);
     eae:	4b1a      	ldr	r3, [pc, #104]	; (f18 <image_data_packet_read+0xe8>)
     eb0:	685b      	ldr	r3, [r3, #4]
     eb2:	681b      	ldr	r3, [r3, #0]
     eb4:	461a      	mov	r2, r3
     eb6:	4b1a      	ldr	r3, [pc, #104]	; (f20 <image_data_packet_read+0xf0>)
     eb8:	615a      	str	r2, [r3, #20]
                g_sImage.pui32ResetVector = (uint32_t *)(((uint32_t *)g_am_multiboot.pui8RxBuffer)[1]);
     eba:	4b17      	ldr	r3, [pc, #92]	; (f18 <image_data_packet_read+0xe8>)
     ebc:	685b      	ldr	r3, [r3, #4]
     ebe:	3304      	adds	r3, #4
     ec0:	681b      	ldr	r3, [r3, #0]
     ec2:	461a      	mov	r2, r3
     ec4:	4b16      	ldr	r3, [pc, #88]	; (f20 <image_data_packet_read+0xf0>)
     ec6:	619a      	str	r2, [r3, #24]
            }

            if ( !g_am_multiboot.bStoreInSRAM )
     ec8:	4b13      	ldr	r3, [pc, #76]	; (f18 <image_data_packet_read+0xe8>)
     eca:	7b1b      	ldrb	r3, [r3, #12]
     ecc:	f083 0301 	eor.w	r3, r3, #1
     ed0:	b2db      	uxtb	r3, r3
     ed2:	2b00      	cmp	r3, #0
     ed4:	d015      	beq.n	f02 <image_data_packet_read+0xd2>
            {
                am_bootloader_program_flash_page((uint32_t)g_am_multiboot.pui32WriteAddress,
     ed6:	4b10      	ldr	r3, [pc, #64]	; (f18 <image_data_packet_read+0xe8>)
     ed8:	691b      	ldr	r3, [r3, #16]
     eda:	4618      	mov	r0, r3
                    (uint32_t *)g_am_multiboot.pui8RxBuffer, g_am_multiboot.ui32BytesInBuffer);
     edc:	4b0e      	ldr	r3, [pc, #56]	; (f18 <image_data_packet_read+0xe8>)
     ede:	6859      	ldr	r1, [r3, #4]
                am_bootloader_program_flash_page((uint32_t)g_am_multiboot.pui32WriteAddress,
     ee0:	4b0d      	ldr	r3, [pc, #52]	; (f18 <image_data_packet_read+0xe8>)
     ee2:	689b      	ldr	r3, [r3, #8]
     ee4:	461a      	mov	r2, r3
     ee6:	f7ff fb29 	bl	53c <am_bootloader_program_flash_page>
                //
                // Adjust the global variables.
                //
                g_am_multiboot.pui32WriteAddress += (g_am_multiboot.ui32BytesInBuffer / 4);
     eea:	4b0b      	ldr	r3, [pc, #44]	; (f18 <image_data_packet_read+0xe8>)
     eec:	691a      	ldr	r2, [r3, #16]
     eee:	4b0a      	ldr	r3, [pc, #40]	; (f18 <image_data_packet_read+0xe8>)
     ef0:	689b      	ldr	r3, [r3, #8]
     ef2:	f023 0303 	bic.w	r3, r3, #3
     ef6:	4413      	add	r3, r2
     ef8:	4a07      	ldr	r2, [pc, #28]	; (f18 <image_data_packet_read+0xe8>)
     efa:	6113      	str	r3, [r2, #16]
                g_am_multiboot.ui32BytesInBuffer = 0;
     efc:	4b06      	ldr	r3, [pc, #24]	; (f18 <image_data_packet_read+0xe8>)
     efe:	2200      	movs	r2, #0
     f00:	609a      	str	r2, [r3, #8]
    for ( i = 0; i < ui32Size; i++ )
     f02:	68fb      	ldr	r3, [r7, #12]
     f04:	3301      	adds	r3, #1
     f06:	60fb      	str	r3, [r7, #12]
     f08:	68fa      	ldr	r2, [r7, #12]
     f0a:	683b      	ldr	r3, [r7, #0]
     f0c:	429a      	cmp	r2, r3
     f0e:	d397      	bcc.n	e40 <image_data_packet_read+0x10>
            }
        }
    }
}
     f10:	bf00      	nop
     f12:	3710      	adds	r7, #16
     f14:	46bd      	mov	sp, r7
     f16:	bd80      	pop	{r7, pc}
     f18:	1000108c 	.word	0x1000108c
     f1c:	100010a0 	.word	0x100010a0
     f20:	10001018 	.word	0x10001018
     f24:	100010a4 	.word	0x100010a4

00000f28 <am_multiboot_check_boot_from_flash>:
//! @return true if it's okay to boot from flash (returns the image structure).
//
//*****************************************************************************
bool
am_multiboot_check_boot_from_flash(bool *pbOverride, am_bootloader_image_t **ppsImage)
{
     f28:	b580      	push	{r7, lr}
     f2a:	b084      	sub	sp, #16
     f2c:	af00      	add	r7, sp, #0
     f2e:	6078      	str	r0, [r7, #4]
     f30:	6039      	str	r1, [r7, #0]
    bool bValid = false;
     f32:	2300      	movs	r3, #0
     f34:	73fb      	strb	r3, [r7, #15]
    // If we're using a flag page, we can run a full CRC check to verify the
    // integrity of our image. If not, we'll just check the override pin.
    // First check if the flag page is valid
    //
    if ( USE_FLAG_PAGE &&
        ( am_bootloader_validate_structure((uint32_t *)g_psBootImage, sizeof(*g_psBootImage)) ))
     f36:	4b22      	ldr	r3, [pc, #136]	; (fc0 <am_multiboot_check_boot_from_flash+0x98>)
     f38:	681b      	ldr	r3, [r3, #0]
     f3a:	2124      	movs	r1, #36	; 0x24
     f3c:	4618      	mov	r0, r3
     f3e:	f7ff fa6f 	bl	420 <am_bootloader_validate_structure>
     f42:	4603      	mov	r3, r0
    if ( USE_FLAG_PAGE &&
     f44:	2b00      	cmp	r3, #0
     f46:	d01d      	beq.n	f84 <am_multiboot_check_boot_from_flash+0x5c>
        //
        // Check the flag page (including the stored CRC) and the override pin
        // to make sure we have a valid image and the host isn't requesting an
        // upgrade.
        //
        if (am_hal_bootloader_override_check(g_psBootImage))
     f48:	4b1d      	ldr	r3, [pc, #116]	; (fc0 <am_multiboot_check_boot_from_flash+0x98>)
     f4a:	681b      	ldr	r3, [r3, #0]
     f4c:	4618      	mov	r0, r3
     f4e:	f7ff f94d 	bl	1ec <am_hal_bootloader_override_check>
     f52:	4603      	mov	r3, r0
     f54:	2b00      	cmp	r3, #0
     f56:	d003      	beq.n	f60 <am_multiboot_check_boot_from_flash+0x38>
        {
            *pbOverride = true;
     f58:	687b      	ldr	r3, [r7, #4]
     f5a:	2201      	movs	r2, #1
     f5c:	701a      	strb	r2, [r3, #0]
     f5e:	e029      	b.n	fb4 <am_multiboot_check_boot_from_flash+0x8c>
        }
        else
        {
            *pbOverride = false;
     f60:	687b      	ldr	r3, [r7, #4]
     f62:	2200      	movs	r2, #0
     f64:	701a      	strb	r2, [r3, #0]
            if ( am_bootloader_flash_check(g_psBootImage) )
     f66:	4b16      	ldr	r3, [pc, #88]	; (fc0 <am_multiboot_check_boot_from_flash+0x98>)
     f68:	681b      	ldr	r3, [r3, #0]
     f6a:	4618      	mov	r0, r3
     f6c:	f7ff f8e8 	bl	140 <am_bootloader_flash_check>
     f70:	4603      	mov	r3, r0
     f72:	2b00      	cmp	r3, #0
     f74:	d01e      	beq.n	fb4 <am_multiboot_check_boot_from_flash+0x8c>
            {
                *ppsImage = g_psBootImage;
     f76:	4b12      	ldr	r3, [pc, #72]	; (fc0 <am_multiboot_check_boot_from_flash+0x98>)
     f78:	681a      	ldr	r2, [r3, #0]
     f7a:	683b      	ldr	r3, [r7, #0]
     f7c:	601a      	str	r2, [r3, #0]
                bValid = true;
     f7e:	2301      	movs	r3, #1
     f80:	73fb      	strb	r3, [r7, #15]
     f82:	e017      	b.n	fb4 <am_multiboot_check_boot_from_flash+0x8c>
        //
        // Check the override pin to make sure the host isn't requesting an
        // upgrade, and do a quick check to make sure an image actually exists
        // at the default application location.
        //
        if (am_hal_bootloader_override_check(&g_sImage))
     f84:	480f      	ldr	r0, [pc, #60]	; (fc4 <am_multiboot_check_boot_from_flash+0x9c>)
     f86:	f7ff f931 	bl	1ec <am_hal_bootloader_override_check>
     f8a:	4603      	mov	r3, r0
     f8c:	2b00      	cmp	r3, #0
     f8e:	d003      	beq.n	f98 <am_multiboot_check_boot_from_flash+0x70>
        {
            *pbOverride = true;
     f90:	687b      	ldr	r3, [r7, #4]
     f92:	2201      	movs	r2, #1
     f94:	701a      	strb	r2, [r3, #0]
     f96:	e00d      	b.n	fb4 <am_multiboot_check_boot_from_flash+0x8c>
        }
        else
        {
            *pbOverride = false;
     f98:	687b      	ldr	r3, [r7, #4]
     f9a:	2200      	movs	r2, #0
     f9c:	701a      	strb	r2, [r3, #0]
            if ( *(g_sImage.pui32LinkAddress) != 0xFFFFFFFF)
     f9e:	4b09      	ldr	r3, [pc, #36]	; (fc4 <am_multiboot_check_boot_from_flash+0x9c>)
     fa0:	681b      	ldr	r3, [r3, #0]
     fa2:	681b      	ldr	r3, [r3, #0]
     fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
     fa8:	d004      	beq.n	fb4 <am_multiboot_check_boot_from_flash+0x8c>
            {
                *ppsImage = &g_sImage;
     faa:	683b      	ldr	r3, [r7, #0]
     fac:	4a05      	ldr	r2, [pc, #20]	; (fc4 <am_multiboot_check_boot_from_flash+0x9c>)
     fae:	601a      	str	r2, [r3, #0]
                bValid = true;
     fb0:	2301      	movs	r3, #1
     fb2:	73fb      	strb	r3, [r7, #15]
            }
        }
    }
    return bValid;
     fb4:	7bfb      	ldrb	r3, [r7, #15]
}
     fb6:	4618      	mov	r0, r3
     fb8:	3710      	adds	r7, #16
     fba:	46bd      	mov	sp, r7
     fbc:	bd80      	pop	{r7, pc}
     fbe:	bf00      	nop
     fc0:	1000103c 	.word	0x1000103c
     fc4:	10001018 	.word	0x10001018

00000fc8 <write_to_flash>:

// Can write across pages
// The write address should be page aligned & the length in multiple of page size
int
write_to_flash(uint32_t ui32DestAddr, uint32_t *pSrc, uint32_t ui32Length, am_multiboot_flash_info_t *pFlash)
{
     fc8:	b580      	push	{r7, lr}
     fca:	b086      	sub	sp, #24
     fcc:	af00      	add	r7, sp, #0
     fce:	60f8      	str	r0, [r7, #12]
     fd0:	60b9      	str	r1, [r7, #8]
     fd2:	607a      	str	r2, [r7, #4]
     fd4:	603b      	str	r3, [r7, #0]
    if (ui32DestAddr & (pFlash->flashPageSize - 1))
     fd6:	683b      	ldr	r3, [r7, #0]
     fd8:	681b      	ldr	r3, [r3, #0]
     fda:	1e5a      	subs	r2, r3, #1
     fdc:	68fb      	ldr	r3, [r7, #12]
     fde:	4013      	ands	r3, r2
     fe0:	2b00      	cmp	r3, #0
     fe2:	d01e      	beq.n	1022 <write_to_flash+0x5a>
    {
        return -1 ;
     fe4:	f04f 33ff 	mov.w	r3, #4294967295
     fe8:	e01f      	b.n	102a <write_to_flash+0x62>
    }
    while (ui32Length)
    {
        uint32_t ui32BytesInPage =
            (ui32Length > pFlash->flashPageSize) ? \
                pFlash->flashPageSize : ui32Length;
     fea:	683b      	ldr	r3, [r7, #0]
     fec:	681a      	ldr	r2, [r3, #0]
        uint32_t ui32BytesInPage =
     fee:	687b      	ldr	r3, [r7, #4]
     ff0:	4293      	cmp	r3, r2
     ff2:	bf28      	it	cs
     ff4:	4613      	movcs	r3, r2
     ff6:	617b      	str	r3, [r7, #20]
        // Writes are always page size
        pFlash->flash_write_page(ui32DestAddr, pSrc, pFlash->flashPageSize);
     ff8:	683b      	ldr	r3, [r7, #0]
     ffa:	69db      	ldr	r3, [r3, #28]
     ffc:	683a      	ldr	r2, [r7, #0]
     ffe:	6812      	ldr	r2, [r2, #0]
    1000:	68b9      	ldr	r1, [r7, #8]
    1002:	68f8      	ldr	r0, [r7, #12]
    1004:	4798      	blx	r3
        pSrc += ui32BytesInPage / 4;
    1006:	697b      	ldr	r3, [r7, #20]
    1008:	f023 0303 	bic.w	r3, r3, #3
    100c:	68ba      	ldr	r2, [r7, #8]
    100e:	4413      	add	r3, r2
    1010:	60bb      	str	r3, [r7, #8]
        ui32Length -= ui32BytesInPage;
    1012:	687a      	ldr	r2, [r7, #4]
    1014:	697b      	ldr	r3, [r7, #20]
    1016:	1ad3      	subs	r3, r2, r3
    1018:	607b      	str	r3, [r7, #4]
        ui32DestAddr += ui32BytesInPage;
    101a:	68fa      	ldr	r2, [r7, #12]
    101c:	697b      	ldr	r3, [r7, #20]
    101e:	4413      	add	r3, r2
    1020:	60fb      	str	r3, [r7, #12]
    while (ui32Length)
    1022:	687b      	ldr	r3, [r7, #4]
    1024:	2b00      	cmp	r3, #0
    1026:	d1e0      	bne.n	fea <write_to_flash+0x22>
    }
    return 0;
    1028:	2300      	movs	r3, #0
}
    102a:	4618      	mov	r0, r3
    102c:	3718      	adds	r7, #24
    102e:	46bd      	mov	sp, r7
    1030:	bd80      	pop	{r7, pc}

00001032 <read_from_flash>:

// Can read across pages
int
read_from_flash(uint32_t ui32DestAddr, uint32_t *pSrc, uint32_t ui32Length, am_multiboot_flash_info_t *pFlash)
{
    1032:	b580      	push	{r7, lr}
    1034:	b086      	sub	sp, #24
    1036:	af00      	add	r7, sp, #0
    1038:	60f8      	str	r0, [r7, #12]
    103a:	60b9      	str	r1, [r7, #8]
    103c:	607a      	str	r2, [r7, #4]
    103e:	603b      	str	r3, [r7, #0]
    uint32_t ui32Preceding = (uint32_t)pSrc & (pFlash->flashPageSize - 1);
    1040:	683b      	ldr	r3, [r7, #0]
    1042:	681b      	ldr	r3, [r3, #0]
    1044:	1e5a      	subs	r2, r3, #1
    1046:	68bb      	ldr	r3, [r7, #8]
    1048:	4013      	ands	r3, r2
    104a:	617b      	str	r3, [r7, #20]
    while (ui32Length)
    104c:	e023      	b.n	1096 <read_from_flash+0x64>
    {
        uint32_t ui32BytesInPage =
            ((ui32Preceding + ui32Length) > pFlash->flashPageSize) ? \
    104e:	697a      	ldr	r2, [r7, #20]
    1050:	687b      	ldr	r3, [r7, #4]
    1052:	441a      	add	r2, r3
    1054:	683b      	ldr	r3, [r7, #0]
    1056:	681b      	ldr	r3, [r3, #0]
                (pFlash->flashPageSize - ui32Preceding) : ui32Length;
    1058:	429a      	cmp	r2, r3
    105a:	d904      	bls.n	1066 <read_from_flash+0x34>
    105c:	683b      	ldr	r3, [r7, #0]
    105e:	681a      	ldr	r2, [r3, #0]
    1060:	697b      	ldr	r3, [r7, #20]
    1062:	1ad3      	subs	r3, r2, r3
    1064:	e000      	b.n	1068 <read_from_flash+0x36>
    1066:	687b      	ldr	r3, [r7, #4]
        uint32_t ui32BytesInPage =
    1068:	613b      	str	r3, [r7, #16]
        pFlash->flash_read_page(ui32DestAddr, pSrc, ui32BytesInPage);
    106a:	683b      	ldr	r3, [r7, #0]
    106c:	699b      	ldr	r3, [r3, #24]
    106e:	693a      	ldr	r2, [r7, #16]
    1070:	68b9      	ldr	r1, [r7, #8]
    1072:	68f8      	ldr	r0, [r7, #12]
    1074:	4798      	blx	r3
        pSrc += ui32BytesInPage / 4;
    1076:	693b      	ldr	r3, [r7, #16]
    1078:	f023 0303 	bic.w	r3, r3, #3
    107c:	68ba      	ldr	r2, [r7, #8]
    107e:	4413      	add	r3, r2
    1080:	60bb      	str	r3, [r7, #8]
        ui32Length -= ui32BytesInPage;
    1082:	687a      	ldr	r2, [r7, #4]
    1084:	693b      	ldr	r3, [r7, #16]
    1086:	1ad3      	subs	r3, r2, r3
    1088:	607b      	str	r3, [r7, #4]
        ui32DestAddr += ui32BytesInPage;
    108a:	68fa      	ldr	r2, [r7, #12]
    108c:	693b      	ldr	r3, [r7, #16]
    108e:	4413      	add	r3, r2
    1090:	60fb      	str	r3, [r7, #12]
        ui32Preceding = 0;
    1092:	2300      	movs	r3, #0
    1094:	617b      	str	r3, [r7, #20]
    while (ui32Length)
    1096:	687b      	ldr	r3, [r7, #4]
    1098:	2b00      	cmp	r3, #0
    109a:	d1d8      	bne.n	104e <read_from_flash+0x1c>
    }
    return 0;
    109c:	2300      	movs	r3, #0
}
    109e:	4618      	mov	r0, r3
    10a0:	3718      	adds	r7, #24
    10a2:	46bd      	mov	sp, r7
    10a4:	bd80      	pop	{r7, pc}
	...

000010a8 <program_image_from_flash>:
static void
program_image_from_flash(uint32_t ui32WriteAddr, uint32_t *pui32ReadAddr,
                         uint32_t ui32NumBytes, bool bDecrypt,
                         am_multiboot_flash_info_t *pReadFlash,
                         am_multiboot_flash_info_t *pWriteFlash)
{
    10a8:	b590      	push	{r4, r7, lr}
    10aa:	b089      	sub	sp, #36	; 0x24
    10ac:	af00      	add	r7, sp, #0
    10ae:	60f8      	str	r0, [r7, #12]
    10b0:	60b9      	str	r1, [r7, #8]
    10b2:	607a      	str	r2, [r7, #4]
    10b4:	70fb      	strb	r3, [r7, #3]
    uint32_t ui32NumBytesInPage;
    uint32_t *pStart = g_pTempBuf;
    10b6:	4b3a      	ldr	r3, [pc, #232]	; (11a0 <program_image_from_flash+0xf8>)
    10b8:	681b      	ldr	r3, [r3, #0]
    10ba:	617b      	str	r3, [r7, #20]
    // Determine the preceding data bytes at the destination page
    uint32_t ui32PrecedingBytes = ui32WriteAddr & (pWriteFlash->flashSectorSize - 1);
    10bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10be:	685b      	ldr	r3, [r3, #4]
    10c0:	1e5a      	subs	r2, r3, #1
    10c2:	68fb      	ldr	r3, [r7, #12]
    10c4:	4013      	ands	r3, r2
    10c6:	61bb      	str	r3, [r7, #24]
    // Flash Write can only happen in terms of pages
    // So, if the image does not start on page boundary - need to take proper precautions
    // to preserve other data in the page
    if (ui32PrecedingBytes)
    10c8:	69bb      	ldr	r3, [r7, #24]
    10ca:	2b00      	cmp	r3, #0
    10cc:	d060      	beq.n	1190 <program_image_from_flash+0xe8>
    {
        // Page aligned
        ui32WriteAddr &= ~(pWriteFlash->flashSectorSize - 1);
    10ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10d0:	685b      	ldr	r3, [r3, #4]
    10d2:	425b      	negs	r3, r3
    10d4:	68fa      	ldr	r2, [r7, #12]
    10d6:	4013      	ands	r3, r2
    10d8:	60fb      	str	r3, [r7, #12]
        // Copy the preceding content at destination page in buffer
        read_from_flash((uint32_t)g_pTempBuf, (uint32_t *)ui32WriteAddr, ui32PrecedingBytes, pWriteFlash);
    10da:	4b31      	ldr	r3, [pc, #196]	; (11a0 <program_image_from_flash+0xf8>)
    10dc:	681b      	ldr	r3, [r3, #0]
    10de:	4618      	mov	r0, r3
    10e0:	68f9      	ldr	r1, [r7, #12]
    10e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10e4:	69ba      	ldr	r2, [r7, #24]
    10e6:	f7ff ffa4 	bl	1032 <read_from_flash>
    }
    while ( ui32NumBytes )
    10ea:	e051      	b.n	1190 <program_image_from_flash+0xe8>
    {
        pStart = g_pTempBuf + ui32PrecedingBytes / 4;
    10ec:	4b2c      	ldr	r3, [pc, #176]	; (11a0 <program_image_from_flash+0xf8>)
    10ee:	681a      	ldr	r2, [r3, #0]
    10f0:	69bb      	ldr	r3, [r7, #24]
    10f2:	f023 0303 	bic.w	r3, r3, #3
    10f6:	4413      	add	r3, r2
    10f8:	617b      	str	r3, [r7, #20]
        if ((ui32PrecedingBytes + ui32NumBytes) > pWriteFlash->flashSectorSize)
    10fa:	69ba      	ldr	r2, [r7, #24]
    10fc:	687b      	ldr	r3, [r7, #4]
    10fe:	441a      	add	r2, r3
    1100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1102:	685b      	ldr	r3, [r3, #4]
    1104:	429a      	cmp	r2, r3
    1106:	d905      	bls.n	1114 <program_image_from_flash+0x6c>
        {
            ui32NumBytesInPage = pWriteFlash->flashSectorSize - ui32PrecedingBytes;
    1108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    110a:	685a      	ldr	r2, [r3, #4]
    110c:	69bb      	ldr	r3, [r7, #24]
    110e:	1ad3      	subs	r3, r2, r3
    1110:	61fb      	str	r3, [r7, #28]
    1112:	e01a      	b.n	114a <program_image_from_flash+0xa2>
        }
        else
        {
            // Last sector to be written
            ui32NumBytesInPage = ui32NumBytes;
    1114:	687b      	ldr	r3, [r7, #4]
    1116:	61fb      	str	r3, [r7, #28]
            if ((ui32NumBytesInPage + ui32PrecedingBytes) != pWriteFlash->flashSectorSize)
    1118:	69fa      	ldr	r2, [r7, #28]
    111a:	69bb      	ldr	r3, [r7, #24]
    111c:	441a      	add	r2, r3
    111e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1120:	685b      	ldr	r3, [r3, #4]
    1122:	429a      	cmp	r2, r3
    1124:	d011      	beq.n	114a <program_image_from_flash+0xa2>
            {
                // Copy the trailing content at destination page in buffer
                read_from_flash((uint32_t)pStart + ui32NumBytesInPage,
    1126:	697a      	ldr	r2, [r7, #20]
    1128:	69fb      	ldr	r3, [r7, #28]
    112a:	18d0      	adds	r0, r2, r3
                                pui32ReadAddr + ui32NumBytesInPage / 4,
    112c:	69fb      	ldr	r3, [r7, #28]
    112e:	f023 0303 	bic.w	r3, r3, #3
                read_from_flash((uint32_t)pStart + ui32NumBytesInPage,
    1132:	68ba      	ldr	r2, [r7, #8]
    1134:	18d4      	adds	r4, r2, r3
                                pWriteFlash->flashSectorSize - (ui32NumBytesInPage + ui32PrecedingBytes),
    1136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1138:	685a      	ldr	r2, [r3, #4]
    113a:	69f9      	ldr	r1, [r7, #28]
    113c:	69bb      	ldr	r3, [r7, #24]
    113e:	440b      	add	r3, r1
                read_from_flash((uint32_t)pStart + ui32NumBytesInPage,
    1140:	1ad2      	subs	r2, r2, r3
    1142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1144:	4621      	mov	r1, r4
    1146:	f7ff ff74 	bl	1032 <read_from_flash>
                                pWriteFlash);
            }
        }
        // Read the image data from source
        read_from_flash((uint32_t)pStart, pui32ReadAddr, ui32NumBytesInPage, pReadFlash);
    114a:	6978      	ldr	r0, [r7, #20]
    114c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    114e:	69fa      	ldr	r2, [r7, #28]
    1150:	68b9      	ldr	r1, [r7, #8]
    1152:	f7ff ff6e 	bl	1032 <read_from_flash>
            // Decrypt in place
            multiboot_secure_decrypt(pStart, ui32NumBytesInPage);
        }
#endif
        // erase the sector
        pWriteFlash->flash_erase_sector(ui32WriteAddr);
    1156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1158:	6a1b      	ldr	r3, [r3, #32]
    115a:	68f8      	ldr	r0, [r7, #12]
    115c:	4798      	blx	r3
        // Write the flash sector
        write_to_flash(ui32WriteAddr, g_pTempBuf, pWriteFlash->flashSectorSize, pWriteFlash);
    115e:	4b10      	ldr	r3, [pc, #64]	; (11a0 <program_image_from_flash+0xf8>)
    1160:	6819      	ldr	r1, [r3, #0]
    1162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1164:	685a      	ldr	r2, [r3, #4]
    1166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1168:	68f8      	ldr	r0, [r7, #12]
    116a:	f7ff ff2d 	bl	fc8 <write_to_flash>

        ui32WriteAddr += pWriteFlash->flashSectorSize;
    116e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1170:	685b      	ldr	r3, [r3, #4]
    1172:	68fa      	ldr	r2, [r7, #12]
    1174:	4413      	add	r3, r2
    1176:	60fb      	str	r3, [r7, #12]
        pui32ReadAddr += ui32NumBytesInPage / 4;
    1178:	69fb      	ldr	r3, [r7, #28]
    117a:	f023 0303 	bic.w	r3, r3, #3
    117e:	68ba      	ldr	r2, [r7, #8]
    1180:	4413      	add	r3, r2
    1182:	60bb      	str	r3, [r7, #8]
        ui32NumBytes -= ui32NumBytesInPage;
    1184:	687a      	ldr	r2, [r7, #4]
    1186:	69fb      	ldr	r3, [r7, #28]
    1188:	1ad3      	subs	r3, r2, r3
    118a:	607b      	str	r3, [r7, #4]
        ui32PrecedingBytes = 0;
    118c:	2300      	movs	r3, #0
    118e:	61bb      	str	r3, [r7, #24]
    while ( ui32NumBytes )
    1190:	687b      	ldr	r3, [r7, #4]
    1192:	2b00      	cmp	r3, #0
    1194:	d1aa      	bne.n	10ec <program_image_from_flash+0x44>
    }
}
    1196:	bf00      	nop
    1198:	3724      	adds	r7, #36	; 0x24
    119a:	46bd      	mov	sp, r7
    119c:	bd90      	pop	{r4, r7, pc}
    119e:	bf00      	nop
    11a0:	100010bc 	.word	0x100010bc

000011a4 <am_multiboot_ota_handler>:
//*****************************************************************************
bool
am_multiboot_ota_handler(am_multiboot_ota_t *pOtaInfo, uint32_t *pTempBuf,
                         uint32_t tempBufSize, invalidate_ota_func_t invalidateOtaFunc,
                         am_multiboot_flash_info_t *pExtFlash)
{
    11a4:	b580      	push	{r7, lr}
    11a6:	b088      	sub	sp, #32
    11a8:	af02      	add	r7, sp, #8
    11aa:	60f8      	str	r0, [r7, #12]
    11ac:	60b9      	str	r1, [r7, #8]
    11ae:	607a      	str	r2, [r7, #4]
    11b0:	603b      	str	r3, [r7, #0]
    am_bootloader_image_t *psImage = &g_sImage;
    11b2:	4b6c      	ldr	r3, [pc, #432]	; (1364 <am_multiboot_ota_handler+0x1c0>)
    11b4:	613b      	str	r3, [r7, #16]
    am_multiboot_flash_info_t *pFlash;

    if ((pTempBuf == NULL) || (pOtaInfo == NULL) || (pOtaInfo->magicNum != OTA_INFO_MAGIC_NUM))
    11b6:	68bb      	ldr	r3, [r7, #8]
    11b8:	2b00      	cmp	r3, #0
    11ba:	d007      	beq.n	11cc <am_multiboot_ota_handler+0x28>
    11bc:	68fb      	ldr	r3, [r7, #12]
    11be:	2b00      	cmp	r3, #0
    11c0:	d004      	beq.n	11cc <am_multiboot_ota_handler+0x28>
    11c2:	68fb      	ldr	r3, [r7, #12]
    11c4:	681b      	ldr	r3, [r3, #0]
    11c6:	4a68      	ldr	r2, [pc, #416]	; (1368 <am_multiboot_ota_handler+0x1c4>)
    11c8:	4293      	cmp	r3, r2
    11ca:	d001      	beq.n	11d0 <am_multiboot_ota_handler+0x2c>
    {
        return false;
    11cc:	2300      	movs	r3, #0
    11ce:	e0c4      	b.n	135a <am_multiboot_ota_handler+0x1b6>
    }

    // Validate the contents
    if ( !am_bootloader_validate_structure((uint32_t *)pOtaInfo, sizeof(*pOtaInfo)) )
    11d0:	2124      	movs	r1, #36	; 0x24
    11d2:	68f8      	ldr	r0, [r7, #12]
    11d4:	f7ff f924 	bl	420 <am_bootloader_validate_structure>
    11d8:	4603      	mov	r3, r0
    11da:	f083 0301 	eor.w	r3, r3, #1
    11de:	b2db      	uxtb	r3, r3
    11e0:	2b00      	cmp	r3, #0
    11e2:	d001      	beq.n	11e8 <am_multiboot_ota_handler+0x44>
    {
        return false;
    11e4:	2300      	movs	r3, #0
    11e6:	e0b8      	b.n	135a <am_multiboot_ota_handler+0x1b6>
    }

    //
    // Check to make sure we're not overwriting the bootloader or the flag page.
    //
    if (!check_flash_address_range((uint32_t)pOtaInfo->pui32LinkAddress,
    11e8:	68fb      	ldr	r3, [r7, #12]
    11ea:	685b      	ldr	r3, [r3, #4]
    11ec:	461a      	mov	r2, r3
    11ee:	68fb      	ldr	r3, [r7, #12]
    11f0:	689b      	ldr	r3, [r3, #8]
    11f2:	4619      	mov	r1, r3
    11f4:	4610      	mov	r0, r2
    11f6:	f7ff fccb 	bl	b90 <check_flash_address_range>
    11fa:	4603      	mov	r3, r0
    11fc:	f083 0301 	eor.w	r3, r3, #1
    1200:	b2db      	uxtb	r3, r3
    1202:	2b00      	cmp	r3, #0
    1204:	d001      	beq.n	120a <am_multiboot_ota_handler+0x66>
        pOtaInfo->ui32NumBytes))
    {
        return false;
    1206:	2300      	movs	r3, #0
    1208:	e0a7      	b.n	135a <am_multiboot_ota_handler+0x1b6>
    }
    // Validate the ext flash info
    if (pOtaInfo->ui32Options & OTA_INFO_OPTIONS_EXT_FLASH)
    120a:	68fb      	ldr	r3, [r7, #12]
    120c:	695b      	ldr	r3, [r3, #20]
    120e:	f003 0301 	and.w	r3, r3, #1
    1212:	2b00      	cmp	r3, #0
    1214:	d018      	beq.n	1248 <am_multiboot_ota_handler+0xa4>
    {
        if (pExtFlash && pExtFlash->flash_read_page &&
    1216:	6a3b      	ldr	r3, [r7, #32]
    1218:	2b00      	cmp	r3, #0
    121a:	d013      	beq.n	1244 <am_multiboot_ota_handler+0xa0>
    121c:	6a3b      	ldr	r3, [r7, #32]
    121e:	699b      	ldr	r3, [r3, #24]
    1220:	2b00      	cmp	r3, #0
    1222:	d00f      	beq.n	1244 <am_multiboot_ota_handler+0xa0>
            pExtFlash->flash_write_page && pExtFlash->flash_erase_sector &&
    1224:	6a3b      	ldr	r3, [r7, #32]
    1226:	69db      	ldr	r3, [r3, #28]
        if (pExtFlash && pExtFlash->flash_read_page &&
    1228:	2b00      	cmp	r3, #0
    122a:	d00b      	beq.n	1244 <am_multiboot_ota_handler+0xa0>
            pExtFlash->flash_write_page && pExtFlash->flash_erase_sector &&
    122c:	6a3b      	ldr	r3, [r7, #32]
    122e:	6a1b      	ldr	r3, [r3, #32]
    1230:	2b00      	cmp	r3, #0
    1232:	d007      	beq.n	1244 <am_multiboot_ota_handler+0xa0>
            (pExtFlash->flashSectorSize <= tempBufSize))
    1234:	6a3b      	ldr	r3, [r7, #32]
    1236:	685a      	ldr	r2, [r3, #4]
            pExtFlash->flash_write_page && pExtFlash->flash_erase_sector &&
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	429a      	cmp	r2, r3
    123c:	d802      	bhi.n	1244 <am_multiboot_ota_handler+0xa0>
        {
            pFlash = pExtFlash;
    123e:	6a3b      	ldr	r3, [r7, #32]
    1240:	617b      	str	r3, [r7, #20]
    1242:	e00a      	b.n	125a <am_multiboot_ota_handler+0xb6>
        }
        else
        {
            return false;
    1244:	2300      	movs	r3, #0
    1246:	e088      	b.n	135a <am_multiboot_ota_handler+0x1b6>
        }
    }
    else
    {
        // Validate the address and the temp buf size
        if (g_intFlash.flashSectorSize > tempBufSize)
    1248:	4b48      	ldr	r3, [pc, #288]	; (136c <am_multiboot_ota_handler+0x1c8>)
    124a:	685a      	ldr	r2, [r3, #4]
    124c:	687b      	ldr	r3, [r7, #4]
    124e:	429a      	cmp	r2, r3
    1250:	d901      	bls.n	1256 <am_multiboot_ota_handler+0xb2>
        {
            return false;
    1252:	2300      	movs	r3, #0
    1254:	e081      	b.n	135a <am_multiboot_ota_handler+0x1b6>
        }
        pFlash = &g_intFlash;
    1256:	4b45      	ldr	r3, [pc, #276]	; (136c <am_multiboot_ota_handler+0x1c8>)
    1258:	617b      	str	r3, [r7, #20]
    }

    g_pTempBuf = pTempBuf;
    125a:	4a45      	ldr	r2, [pc, #276]	; (1370 <am_multiboot_ota_handler+0x1cc>)
    125c:	68bb      	ldr	r3, [r7, #8]
    125e:	6013      	str	r3, [r2, #0]

    //
    // Set the image structure parameters based on the information in the
    // packet.
    //
    psImage->pui32LinkAddress = pOtaInfo->pui32LinkAddress;
    1260:	68fb      	ldr	r3, [r7, #12]
    1262:	685a      	ldr	r2, [r3, #4]
    1264:	693b      	ldr	r3, [r7, #16]
    1266:	601a      	str	r2, [r3, #0]
    psImage->ui32NumBytes = pOtaInfo->ui32NumBytes;
    1268:	68fb      	ldr	r3, [r7, #12]
    126a:	689a      	ldr	r2, [r3, #8]
    126c:	693b      	ldr	r3, [r7, #16]
    126e:	605a      	str	r2, [r3, #4]
    psImage->ui32CRC = pOtaInfo->ui32ImageCrc;
    1270:	68fb      	ldr	r3, [r7, #12]
    1272:	68da      	ldr	r2, [r3, #12]
    1274:	693b      	ldr	r3, [r7, #16]
    1276:	609a      	str	r2, [r3, #8]
    psImage->ui32OverrideGPIO = DEFAULT_OVERRIDE_GPIO;
    1278:	693b      	ldr	r3, [r7, #16]
    127a:	2212      	movs	r2, #18
    127c:	60da      	str	r2, [r3, #12]
    psImage->ui32OverridePolarity = DEFAULT_OVERRIDE_POLARITY;
    127e:	693b      	ldr	r3, [r7, #16]
    1280:	2200      	movs	r2, #0
    1282:	611a      	str	r2, [r3, #16]
    psImage->bEncrypted = 0; // This only indicates Copy-Protection in flash
    1284:	693b      	ldr	r3, [r7, #16]
    1286:	2200      	movs	r2, #0
    1288:	61da      	str	r2, [r3, #28]

    //
    // We'll need to fill in the stack pointer and reset vector a little later
    // in the process.
    //
    psImage->pui32StackPointer = 0;
    128a:	693b      	ldr	r3, [r7, #16]
    128c:	2200      	movs	r2, #0
    128e:	615a      	str	r2, [r3, #20]
    psImage->pui32ResetVector = 0;
    1290:	693b      	ldr	r3, [r7, #16]
    1292:	2200      	movs	r2, #0
    1294:	619a      	str	r2, [r3, #24]

    g_am_multiboot.bStoreInSRAM = 0;
    1296:	4b37      	ldr	r3, [pc, #220]	; (1374 <am_multiboot_ota_handler+0x1d0>)
    1298:	2200      	movs	r2, #0
    129a:	731a      	strb	r2, [r3, #12]

    g_am_multiboot.pui8RxBuffer = (uint8_t *)pOtaInfo->pui32ImageAddr;
    129c:	68fb      	ldr	r3, [r7, #12]
    129e:	69db      	ldr	r3, [r3, #28]
    12a0:	4a34      	ldr	r2, [pc, #208]	; (1374 <am_multiboot_ota_handler+0x1d0>)
    12a2:	6053      	str	r3, [r2, #4]
    g_am_multiboot.ui32BytesInBuffer = pOtaInfo->ui32NumBytes;
    12a4:	68fb      	ldr	r3, [r7, #12]
    12a6:	689b      	ldr	r3, [r3, #8]
    12a8:	4a32      	ldr	r2, [pc, #200]	; (1374 <am_multiboot_ota_handler+0x1d0>)
    12aa:	6093      	str	r3, [r2, #8]

    if (FLASH_OPERATE(pFlash, flash_init) == 0)
    12ac:	697b      	ldr	r3, [r7, #20]
    12ae:	689b      	ldr	r3, [r3, #8]
    12b0:	2b00      	cmp	r3, #0
    12b2:	d005      	beq.n	12c0 <am_multiboot_ota_handler+0x11c>
    12b4:	697b      	ldr	r3, [r7, #20]
    12b6:	689b      	ldr	r3, [r3, #8]
    12b8:	4798      	blx	r3
    12ba:	4603      	mov	r3, r0
    12bc:	2b00      	cmp	r3, #0
    12be:	d111      	bne.n	12e4 <am_multiboot_ota_handler+0x140>
    {
        if (FLASH_OPERATE(pFlash, flash_enable) != 0)
    12c0:	697b      	ldr	r3, [r7, #20]
    12c2:	691b      	ldr	r3, [r3, #16]
    12c4:	2b00      	cmp	r3, #0
    12c6:	d00f      	beq.n	12e8 <am_multiboot_ota_handler+0x144>
    12c8:	697b      	ldr	r3, [r7, #20]
    12ca:	691b      	ldr	r3, [r3, #16]
    12cc:	4798      	blx	r3
    12ce:	4603      	mov	r3, r0
    12d0:	2b00      	cmp	r3, #0
    12d2:	d009      	beq.n	12e8 <am_multiboot_ota_handler+0x144>
        {
            FLASH_OPERATE(pFlash, flash_deinit);
    12d4:	697b      	ldr	r3, [r7, #20]
    12d6:	68db      	ldr	r3, [r3, #12]
    12d8:	2b00      	cmp	r3, #0
    12da:	d005      	beq.n	12e8 <am_multiboot_ota_handler+0x144>
    12dc:	697b      	ldr	r3, [r7, #20]
    12de:	68db      	ldr	r3, [r3, #12]
    12e0:	4798      	blx	r3
        if (FLASH_OPERATE(pFlash, flash_enable) != 0)
    12e2:	e001      	b.n	12e8 <am_multiboot_ota_handler+0x144>
        }
    }
    else
    {
        return false;
    12e4:	2300      	movs	r3, #0
    12e6:	e038      	b.n	135a <am_multiboot_ota_handler+0x1b6>
        if (FLASH_OPERATE(pFlash, flash_enable) != 0)
    12e8:	bf00      	nop
        FLASH_OPERATE(pFlash, flash_disable);
        FLASH_OPERATE(pFlash, flash_deinit);
        return false;
    }
#endif
    psImage->pui32StackPointer = (uint32_t *)(((uint32_t *)pOtaInfo->pui32ImageAddr)[0]);
    12ea:	68fb      	ldr	r3, [r7, #12]
    12ec:	69db      	ldr	r3, [r3, #28]
    12ee:	681b      	ldr	r3, [r3, #0]
    12f0:	461a      	mov	r2, r3
    12f2:	693b      	ldr	r3, [r7, #16]
    12f4:	615a      	str	r2, [r3, #20]
    psImage->pui32ResetVector = (uint32_t *)(((uint32_t *)pOtaInfo->pui32ImageAddr)[1]);
    12f6:	68fb      	ldr	r3, [r7, #12]
    12f8:	69db      	ldr	r3, [r3, #28]
    12fa:	3304      	adds	r3, #4
    12fc:	681b      	ldr	r3, [r3, #0]
    12fe:	461a      	mov	r2, r3
    1300:	693b      	ldr	r3, [r7, #16]
    1302:	619a      	str	r2, [r3, #24]

    //
    // The image is presumed to be reasonable. Set our global
    // variables based on the new image structure.
    //
    g_am_multiboot.pui32WriteAddress = psImage->pui32LinkAddress;
    1304:	693b      	ldr	r3, [r7, #16]
    1306:	681b      	ldr	r3, [r3, #0]
    1308:	4a1a      	ldr	r2, [pc, #104]	; (1374 <am_multiboot_ota_handler+0x1d0>)
    130a:	6113      	str	r3, [r2, #16]

    program_image_from_flash((uint32_t)pOtaInfo->pui32LinkAddress, pOtaInfo->pui32ImageAddr,
    130c:	68fb      	ldr	r3, [r7, #12]
    130e:	685b      	ldr	r3, [r3, #4]
    1310:	4618      	mov	r0, r3
    1312:	68fb      	ldr	r3, [r7, #12]
    1314:	69d9      	ldr	r1, [r3, #28]
    1316:	68fb      	ldr	r3, [r7, #12]
    1318:	689a      	ldr	r2, [r3, #8]
    131a:	4b14      	ldr	r3, [pc, #80]	; (136c <am_multiboot_ota_handler+0x1c8>)
    131c:	9301      	str	r3, [sp, #4]
    131e:	697b      	ldr	r3, [r7, #20]
    1320:	9300      	str	r3, [sp, #0]
    1322:	2300      	movs	r3, #0
    1324:	f7ff fec0 	bl	10a8 <program_image_from_flash>
        pOtaInfo->ui32NumBytes, false, pFlash, &g_intFlash);
    // Protect the image if needed
    program_image(psImage->bEncrypted);
    1328:	693b      	ldr	r3, [r7, #16]
    132a:	69db      	ldr	r3, [r3, #28]
    132c:	4618      	mov	r0, r3
    132e:	f7ff fcbd 	bl	cac <program_image>
    if ( !(pOtaInfo->ui32Options & OTA_INFO_OPTIONS_DATA) && USE_FLAG_PAGE )
    1332:	68fb      	ldr	r3, [r7, #12]
    1334:	695b      	ldr	r3, [r3, #20]
    1336:	f003 0302 	and.w	r3, r3, #2
    133a:	2b00      	cmp	r3, #0
    133c:	d104      	bne.n	1348 <am_multiboot_ota_handler+0x1a4>
    {
        //
        // Write the flag page.
        //
        am_bootloader_flag_page_update(&g_sImage, (uint32_t *)FLAG_PAGE_LOCATION);
    133e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
    1342:	4808      	ldr	r0, [pc, #32]	; (1364 <am_multiboot_ota_handler+0x1c0>)
    1344:	f7ff f88e 	bl	464 <am_bootloader_flag_page_update>
    }
    if (invalidateOtaFunc)
    1348:	683b      	ldr	r3, [r7, #0]
    134a:	2b00      	cmp	r3, #0
    134c:	d002      	beq.n	1354 <am_multiboot_ota_handler+0x1b0>
    {
        invalidateOtaFunc(pOtaInfo);
    134e:	683b      	ldr	r3, [r7, #0]
    1350:	68f8      	ldr	r0, [r7, #12]
    1352:	4798      	blx	r3
    // Perform a software reset.
    //
#if AM_APOLLO3_RESET
    am_hal_reset_control(AM_HAL_RESET_CONTROL_SWPOI, 0);
#else
    am_hal_reset_poi();
    1354:	f000 fed2 	bl	20fc <am_hal_reset_poi>
#endif

    // Should never reach here
    return true;
    1358:	2301      	movs	r3, #1
}
    135a:	4618      	mov	r0, r3
    135c:	3718      	adds	r7, #24
    135e:	46bd      	mov	sp, r7
    1360:	bd80      	pop	{r7, pc}
    1362:	bf00      	nop
    1364:	10001018 	.word	0x10001018
    1368:	deadcafe 	.word	0xdeadcafe
    136c:	10001040 	.word	0x10001040
    1370:	100010bc 	.word	0x100010bc
    1374:	1000108c 	.word	0x1000108c

00001378 <ser_out>:
volatile bool g_bUartImageValid = false;

//
void
ser_out(uint32_t ui32Module, unsigned char data)
{
    1378:	b480      	push	{r7}
    137a:	b083      	sub	sp, #12
    137c:	af00      	add	r7, sp, #0
    137e:	6078      	str	r0, [r7, #4]
    1380:	460b      	mov	r3, r1
    1382:	70fb      	strb	r3, [r7, #3]
    AM_REGn(UART, ui32Module, DR) = data;
    1384:	4a07      	ldr	r2, [pc, #28]	; (13a4 <ser_out+0x2c>)
    1386:	78fb      	ldrb	r3, [r7, #3]
    1388:	6013      	str	r3, [r2, #0]
    while ( AM_BFRn(UART, ui32Module, FR, TXFF) );
    138a:	bf00      	nop
    138c:	4b06      	ldr	r3, [pc, #24]	; (13a8 <ser_out+0x30>)
    138e:	681b      	ldr	r3, [r3, #0]
    1390:	f003 0320 	and.w	r3, r3, #32
    1394:	2b00      	cmp	r3, #0
    1396:	d1f9      	bne.n	138c <ser_out+0x14>
}
    1398:	bf00      	nop
    139a:	370c      	adds	r7, #12
    139c:	46bd      	mov	sp, r7
    139e:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a2:	4770      	bx	lr
    13a4:	4001c000 	.word	0x4001c000
    13a8:	4001c018 	.word	0x4001c018

000013ac <am_multiboot_setup_serial>:
//! @return none
//
//*****************************************************************************
void
am_multiboot_setup_serial(int32_t i32Module, uint32_t ui32BaudRate)
{
    13ac:	b580      	push	{r7, lr}
    13ae:	b084      	sub	sp, #16
    13b0:	af00      	add	r7, sp, #0
    13b2:	6078      	str	r0, [r7, #4]
    13b4:	6039      	str	r1, [r7, #0]
    uint32_t uartInt = AM_HAL_INTERRUPT_UART;
    13b6:	231b      	movs	r3, #27
    13b8:	60fb      	str	r3, [r7, #12]
    command = 0;
    13ba:	4b1e      	ldr	r3, [pc, #120]	; (1434 <am_multiboot_setup_serial+0x88>)
    13bc:	2200      	movs	r2, #0
    13be:	601a      	str	r2, [r3, #0]
    uart_RX_head = uart_RX_tail = uart_RX_cnt = 0;
    13c0:	2300      	movs	r3, #0
    13c2:	4a1d      	ldr	r2, [pc, #116]	; (1438 <am_multiboot_setup_serial+0x8c>)
    13c4:	6013      	str	r3, [r2, #0]
    13c6:	4a1d      	ldr	r2, [pc, #116]	; (143c <am_multiboot_setup_serial+0x90>)
    13c8:	6013      	str	r3, [r2, #0]
    13ca:	4a1d      	ldr	r2, [pc, #116]	; (1440 <am_multiboot_setup_serial+0x94>)
    13cc:	6013      	str	r3, [r2, #0]
    RX_FIFO_FULL = 0;  // check serial FIFO operation
    13ce:	4b1d      	ldr	r3, [pc, #116]	; (1444 <am_multiboot_setup_serial+0x98>)
    13d0:	2200      	movs	r2, #0
    13d2:	701a      	strb	r2, [r3, #0]
    RX_FIFO_EMPTY = 1;
    13d4:	4b1c      	ldr	r3, [pc, #112]	; (1448 <am_multiboot_setup_serial+0x9c>)
    13d6:	2201      	movs	r2, #1
    13d8:	701a      	strb	r2, [r3, #0]
    packet_cnt = 0xff;
    13da:	4b1c      	ldr	r3, [pc, #112]	; (144c <am_multiboot_setup_serial+0xa0>)
    13dc:	22ff      	movs	r2, #255	; 0xff
    13de:	601a      	str	r2, [r3, #0]

    //
    // Start the UART interface, apply the desired configuration settings, and
    // enable the FIFOs.
    //
    am_hal_uart_clock_enable(i32Module);
    13e0:	687b      	ldr	r3, [r7, #4]
    13e2:	4618      	mov	r0, r3
    13e4:	f000 ff3a 	bl	225c <am_hal_uart_clock_enable>

    //
    // Disable the UART before configuring it.
    //
    am_hal_uart_disable(i32Module);
    13e8:	687b      	ldr	r3, [r7, #4]
    13ea:	4618      	mov	r0, r3
    13ec:	f000 ff2c 	bl	2248 <am_hal_uart_disable>

    //
    // Configure the UART.
    //
    g_sUartConfig.ui32BaudRate = ui32BaudRate;
    13f0:	4a17      	ldr	r2, [pc, #92]	; (1450 <am_multiboot_setup_serial+0xa4>)
    13f2:	683b      	ldr	r3, [r7, #0]
    13f4:	6013      	str	r3, [r2, #0]
    am_hal_uart_config(i32Module, &g_sUartConfig);
    13f6:	687b      	ldr	r3, [r7, #4]
    13f8:	4915      	ldr	r1, [pc, #84]	; (1450 <am_multiboot_setup_serial+0xa4>)
    13fa:	4618      	mov	r0, r3
    13fc:	f000 fecc 	bl	2198 <am_hal_uart_config>

    //
    // Enable the UART FIFO.
    //
   am_hal_uart_fifo_config(i32Module,
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	211b      	movs	r1, #27
    1404:	4618      	mov	r0, r3
    1406:	f000 ff3d 	bl	2284 <am_hal_uart_fifo_config>

//    am_util_delay_ms(100);
    //
    // Enable the UART.
    //
    am_hal_uart_enable(i32Module);
    140a:	687b      	ldr	r3, [r7, #4]
    140c:	4618      	mov	r0, r3
    140e:	f000 ff11 	bl	2234 <am_hal_uart_enable>

    am_hal_uart_int_clear(i32Module, AM_HAL_UART_INT_RX | AM_HAL_UART_INT_RX_TMOUT);
    1412:	687b      	ldr	r3, [r7, #4]
    1414:	2150      	movs	r1, #80	; 0x50
    1416:	4618      	mov	r0, r3
    1418:	f000 fefe 	bl	2218 <am_hal_uart_int_clear>
    am_hal_uart_int_enable(i32Module, AM_HAL_UART_INT_RX | AM_HAL_UART_INT_RX_TMOUT);
    141c:	687b      	ldr	r3, [r7, #4]
    141e:	2150      	movs	r1, #80	; 0x50
    1420:	4618      	mov	r0, r3
    1422:	f000 feff 	bl	2224 <am_hal_uart_int_enable>
    if (i32Module == 1)
    {
        uartInt = AM_HAL_INTERRUPT_UART1;
    }
#endif
    am_hal_interrupt_enable(uartInt);
    1426:	68f8      	ldr	r0, [r7, #12]
    1428:	f000 fd08 	bl	1e3c <am_hal_interrupt_enable>
}
    142c:	bf00      	nop
    142e:	3710      	adds	r7, #16
    1430:	46bd      	mov	sp, r7
    1432:	bd80      	pop	{r7, pc}
    1434:	100010e0 	.word	0x100010e0
    1438:	100010c0 	.word	0x100010c0
    143c:	100010d8 	.word	0x100010d8
    1440:	100010c8 	.word	0x100010c8
    1444:	100010ec 	.word	0x100010ec
    1448:	100010d5 	.word	0x100010d5
    144c:	100010c4 	.word	0x100010c4
    1450:	10001064 	.word	0x10001064

00001454 <am_multiboot_uart_isr_handler>:
//! @return none.
//
//*****************************************************************************
void
am_multiboot_uart_isr_handler(uint32_t ui32Module)
{
    1454:	b580      	push	{r7, lr}
    1456:	b088      	sub	sp, #32
    1458:	af00      	add	r7, sp, #0
    145a:	6078      	str	r0, [r7, #4]
    uint32_t *rx_pui32Packet;
    unsigned char send_byte_cnt, flush = 0;
    145c:	2300      	movs	r3, #0
    145e:	77bb      	strb	r3, [r7, #30]
    uint32_t cnt = 0;
    1460:	2300      	movs	r3, #0
    1462:	61bb      	str	r3, [r7, #24]

    //
    // Check to see what caused this interrupt, then clear the bit from the
    // interrupt register.
    //
    ui32Status = am_hal_uart_int_status_get(ui32Module, false);
    1464:	2100      	movs	r1, #0
    1466:	6878      	ldr	r0, [r7, #4]
    1468:	f000 feca 	bl	2200 <am_hal_uart_int_status_get>
    146c:	6178      	str	r0, [r7, #20]
    am_hal_uart_int_clear(ui32Module, ui32Status);
    146e:	6979      	ldr	r1, [r7, #20]
    1470:	6878      	ldr	r0, [r7, #4]
    1472:	f000 fed1 	bl	2218 <am_hal_uart_int_clear>
    //
    // Service the uart FIFO.
    //


    RX_FIFO_EMPTY = 0;
    1476:	4ba1      	ldr	r3, [pc, #644]	; (16fc <am_multiboot_uart_isr_handler+0x2a8>)
    1478:	2200      	movs	r2, #0
    147a:	701a      	strb	r2, [r3, #0]
    // Read the UART FIFO till we have data
    while ( !AM_BFRn(UART, ui32Module, FR, RXFE) )
    147c:	e12d      	b.n	16da <am_multiboot_uart_isr_handler+0x286>
    {
        if ( uart_RX_head == MAX_BUFFER )
    147e:	4ba0      	ldr	r3, [pc, #640]	; (1700 <am_multiboot_uart_isr_handler+0x2ac>)
    1480:	681b      	ldr	r3, [r3, #0]
    1482:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
    1486:	d10c      	bne.n	14a2 <am_multiboot_uart_isr_handler+0x4e>
        {
            // We should never reach here!
            RX_FIFO_FULL = 1;
    1488:	4b9e      	ldr	r3, [pc, #632]	; (1704 <am_multiboot_uart_isr_handler+0x2b0>)
    148a:	2201      	movs	r2, #1
    148c:	701a      	strb	r2, [r3, #0]
            tx_pui32Packet = (uint32_t *) uart_TX_buffer;
    148e:	4b9e      	ldr	r3, [pc, #632]	; (1708 <am_multiboot_uart_isr_handler+0x2b4>)
    1490:	60bb      	str	r3, [r7, #8]
            //
            // Bad packet; Send back an error.
            //
            tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
    1492:	68bb      	ldr	r3, [r7, #8]
    1494:	2205      	movs	r2, #5
    1496:	601a      	str	r2, [r3, #0]
            flush = 1;
    1498:	2301      	movs	r3, #1
    149a:	77bb      	strb	r3, [r7, #30]
            send_byte_cnt = 4;
    149c:	2304      	movs	r3, #4
    149e:	77fb      	strb	r3, [r7, #31]
            break;
    14a0:	e122      	b.n	16e8 <am_multiboot_uart_isr_handler+0x294>
        }
        rxData = AM_REGn(UART, ui32Module, DR);
    14a2:	4b9a      	ldr	r3, [pc, #616]	; (170c <am_multiboot_uart_isr_handler+0x2b8>)
    14a4:	681b      	ldr	r3, [r3, #0]
    14a6:	74fb      	strb	r3, [r7, #19]
        uart_RX_buffer[uart_RX_head++] = rxData;
    14a8:	4b95      	ldr	r3, [pc, #596]	; (1700 <am_multiboot_uart_isr_handler+0x2ac>)
    14aa:	681b      	ldr	r3, [r3, #0]
    14ac:	1c5a      	adds	r2, r3, #1
    14ae:	4994      	ldr	r1, [pc, #592]	; (1700 <am_multiboot_uart_isr_handler+0x2ac>)
    14b0:	600a      	str	r2, [r1, #0]
    14b2:	4997      	ldr	r1, [pc, #604]	; (1710 <am_multiboot_uart_isr_handler+0x2bc>)
    14b4:	7cfa      	ldrb	r2, [r7, #19]
    14b6:	54ca      	strb	r2, [r1, r3]

        uart_RX_cnt++;
    14b8:	4b96      	ldr	r3, [pc, #600]	; (1714 <am_multiboot_uart_isr_handler+0x2c0>)
    14ba:	681b      	ldr	r3, [r3, #0]
    14bc:	3301      	adds	r3, #1
    14be:	4a95      	ldr	r2, [pc, #596]	; (1714 <am_multiboot_uart_isr_handler+0x2c0>)
    14c0:	6013      	str	r3, [r2, #0]
        cnt++;
    14c2:	69bb      	ldr	r3, [r7, #24]
    14c4:	3301      	adds	r3, #1
    14c6:	61bb      	str	r3, [r7, #24]

        if ( uart_RX_cnt == 4 ) // cmd received, wait for parameters
    14c8:	4b92      	ldr	r3, [pc, #584]	; (1714 <am_multiboot_uart_isr_handler+0x2c0>)
    14ca:	681b      	ldr	r3, [r3, #0]
    14cc:	2b04      	cmp	r3, #4
    14ce:	d142      	bne.n	1556 <am_multiboot_uart_isr_handler+0x102>
        {
            command = uart_RX_buffer[0];
    14d0:	4b8f      	ldr	r3, [pc, #572]	; (1710 <am_multiboot_uart_isr_handler+0x2bc>)
    14d2:	781b      	ldrb	r3, [r3, #0]
    14d4:	b2db      	uxtb	r3, r3
    14d6:	461a      	mov	r2, r3
    14d8:	4b8f      	ldr	r3, [pc, #572]	; (1718 <am_multiboot_uart_isr_handler+0x2c4>)
    14da:	601a      	str	r2, [r3, #0]
            switch (command)
    14dc:	4b8e      	ldr	r3, [pc, #568]	; (1718 <am_multiboot_uart_isr_handler+0x2c4>)
    14de:	681b      	ldr	r3, [r3, #0]
    14e0:	2b09      	cmp	r3, #9
    14e2:	d833      	bhi.n	154c <am_multiboot_uart_isr_handler+0xf8>
    14e4:	a201      	add	r2, pc, #4	; (adr r2, 14ec <am_multiboot_uart_isr_handler+0x98>)
    14e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    14ea:	bf00      	nop
    14ec:	00001535 	.word	0x00001535
    14f0:	0000153d 	.word	0x0000153d
    14f4:	00001515 	.word	0x00001515
    14f8:	00001555 	.word	0x00001555
    14fc:	00001525 	.word	0x00001525
    1500:	0000151d 	.word	0x0000151d
    1504:	0000152d 	.word	0x0000152d
    1508:	0000154d 	.word	0x0000154d
    150c:	0000154d 	.word	0x0000154d
    1510:	00001545 	.word	0x00001545
            {
                case AM_BOOTLOADER_NEW_IMAGE:
#ifndef MULTIBOOT_SECURE
                    packet_cnt = 16;
    1514:	4b81      	ldr	r3, [pc, #516]	; (171c <am_multiboot_uart_isr_handler+0x2c8>)
    1516:	2210      	movs	r2, #16
    1518:	601a      	str	r2, [r3, #0]
#endif
                    break;
    151a:	e01c      	b.n	1556 <am_multiboot_uart_isr_handler+0x102>
                case AM_BOOTLOADER_SET_OVERRIDE_CMD:
                    packet_cnt = 12;
    151c:	4b7f      	ldr	r3, [pc, #508]	; (171c <am_multiboot_uart_isr_handler+0x2c8>)
    151e:	220c      	movs	r2, #12
    1520:	601a      	str	r2, [r3, #0]
                    break;
    1522:	e018      	b.n	1556 <am_multiboot_uart_isr_handler+0x102>
                case AM_BOOTLOADER_NEW_PACKET:
                    //    packet_cnt = pkt_size+8;
                    break;
                case AM_BOOTLOADER_RESET:
                    packet_cnt = 4;
    1524:	4b7d      	ldr	r3, [pc, #500]	; (171c <am_multiboot_uart_isr_handler+0x2c8>)
    1526:	2204      	movs	r2, #4
    1528:	601a      	str	r2, [r3, #0]
                    break;
    152a:	e014      	b.n	1556 <am_multiboot_uart_isr_handler+0x102>
                case AM_BOOTLOADER_BL_VERSION_CMD:
                    packet_cnt = 4;
    152c:	4b7b      	ldr	r3, [pc, #492]	; (171c <am_multiboot_uart_isr_handler+0x2c8>)
    152e:	2204      	movs	r2, #4
    1530:	601a      	str	r2, [r3, #0]
                    break;
    1532:	e010      	b.n	1556 <am_multiboot_uart_isr_handler+0x102>
                case AM_BOOTLOADER_ACK_CMD:
                    packet_cnt = 4;
    1534:	4b79      	ldr	r3, [pc, #484]	; (171c <am_multiboot_uart_isr_handler+0x2c8>)
    1536:	2204      	movs	r2, #4
    1538:	601a      	str	r2, [r3, #0]
                    break;
    153a:	e00c      	b.n	1556 <am_multiboot_uart_isr_handler+0x102>
                case AM_BOOTLOADER_NAK_CMD:
                    packet_cnt = 4;
    153c:	4b77      	ldr	r3, [pc, #476]	; (171c <am_multiboot_uart_isr_handler+0x2c8>)
    153e:	2204      	movs	r2, #4
    1540:	601a      	str	r2, [r3, #0]
                    break;
    1542:	e008      	b.n	1556 <am_multiboot_uart_isr_handler+0x102>
                case AM_BOOTLOADER_RESTART:
                    packet_cnt = 4;
    1544:	4b75      	ldr	r3, [pc, #468]	; (171c <am_multiboot_uart_isr_handler+0x2c8>)
    1546:	2204      	movs	r2, #4
    1548:	601a      	str	r2, [r3, #0]
                    break;
    154a:	e004      	b.n	1556 <am_multiboot_uart_isr_handler+0x102>
                default:
                    // Unknown command
                    packet_cnt = 4;
    154c:	4b73      	ldr	r3, [pc, #460]	; (171c <am_multiboot_uart_isr_handler+0x2c8>)
    154e:	2204      	movs	r2, #4
    1550:	601a      	str	r2, [r3, #0]
                    break;
    1552:	e000      	b.n	1556 <am_multiboot_uart_isr_handler+0x102>
                    break;
    1554:	bf00      	nop
            }
        }

        if ( (command == AM_BOOTLOADER_NEW_PACKET) && (uart_RX_cnt == 8) )
    1556:	4b70      	ldr	r3, [pc, #448]	; (1718 <am_multiboot_uart_isr_handler+0x2c4>)
    1558:	681b      	ldr	r3, [r3, #0]
    155a:	2b03      	cmp	r3, #3
    155c:	d10c      	bne.n	1578 <am_multiboot_uart_isr_handler+0x124>
    155e:	4b6d      	ldr	r3, [pc, #436]	; (1714 <am_multiboot_uart_isr_handler+0x2c0>)
    1560:	681b      	ldr	r3, [r3, #0]
    1562:	2b08      	cmp	r3, #8
    1564:	d108      	bne.n	1578 <am_multiboot_uart_isr_handler+0x124>
        {
            pkt_size = *(uint32_t *) (&uart_RX_buffer[4]);
    1566:	4b6e      	ldr	r3, [pc, #440]	; (1720 <am_multiboot_uart_isr_handler+0x2cc>)
    1568:	681b      	ldr	r3, [r3, #0]
    156a:	4a6e      	ldr	r2, [pc, #440]	; (1724 <am_multiboot_uart_isr_handler+0x2d0>)
    156c:	6013      	str	r3, [r2, #0]
            packet_cnt = pkt_size + 8;
    156e:	4b6d      	ldr	r3, [pc, #436]	; (1724 <am_multiboot_uart_isr_handler+0x2d0>)
    1570:	681b      	ldr	r3, [r3, #0]
    1572:	3308      	adds	r3, #8
    1574:	4a69      	ldr	r2, [pc, #420]	; (171c <am_multiboot_uart_isr_handler+0x2c8>)
    1576:	6013      	str	r3, [r2, #0]
            pkt_size = *(uint32_t *) (&uart_RX_buffer[16]);
            packet_cnt = pkt_size + 20;
        }
#endif

        if ( (uart_RX_cnt >= 4) && (uart_RX_cnt == packet_cnt) )
    1578:	4b66      	ldr	r3, [pc, #408]	; (1714 <am_multiboot_uart_isr_handler+0x2c0>)
    157a:	681b      	ldr	r3, [r3, #0]
    157c:	2b03      	cmp	r3, #3
    157e:	f240 80ac 	bls.w	16da <am_multiboot_uart_isr_handler+0x286>
    1582:	4b64      	ldr	r3, [pc, #400]	; (1714 <am_multiboot_uart_isr_handler+0x2c0>)
    1584:	681a      	ldr	r2, [r3, #0]
    1586:	4b65      	ldr	r3, [pc, #404]	; (171c <am_multiboot_uart_isr_handler+0x2c8>)
    1588:	681b      	ldr	r3, [r3, #0]
    158a:	429a      	cmp	r2, r3
    158c:	f040 80a5 	bne.w	16da <am_multiboot_uart_isr_handler+0x286>
        {
            rx_pui32Packet = (uint32_t *) uart_RX_buffer;
    1590:	4b5f      	ldr	r3, [pc, #380]	; (1710 <am_multiboot_uart_isr_handler+0x2bc>)
    1592:	60fb      	str	r3, [r7, #12]
            tx_pui32Packet = (uint32_t *) uart_TX_buffer;
    1594:	4b5c      	ldr	r3, [pc, #368]	; (1708 <am_multiboot_uart_isr_handler+0x2b4>)
    1596:	60bb      	str	r3, [r7, #8]

            switch (rx_pui32Packet[0])
    1598:	68fb      	ldr	r3, [r7, #12]
    159a:	681b      	ldr	r3, [r3, #0]
    159c:	2b09      	cmp	r3, #9
    159e:	f200 8092 	bhi.w	16c6 <am_multiboot_uart_isr_handler+0x272>
    15a2:	a201      	add	r2, pc, #4	; (adr r2, 15a8 <am_multiboot_uart_isr_handler+0x154>)
    15a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    15a8:	000016d7 	.word	0x000016d7
    15ac:	000016d7 	.word	0x000016d7
    15b0:	000015d1 	.word	0x000015d1
    15b4:	00001623 	.word	0x00001623
    15b8:	0000169f 	.word	0x0000169f
    15bc:	00001603 	.word	0x00001603
    15c0:	000016af 	.word	0x000016af
    15c4:	000016c7 	.word	0x000016c7
    15c8:	000016c7 	.word	0x000016c7
    15cc:	000016a9 	.word	0x000016a9
                case AM_BOOTLOADER_NEW_IMAGE:
                    //
                    // Parse the image packet, and store the result to the global
                    // image structure.
                    //
                    g_bUartImageValid = image_start_packet_read(&g_sImage,
    15d0:	494f      	ldr	r1, [pc, #316]	; (1710 <am_multiboot_uart_isr_handler+0x2bc>)
    15d2:	4855      	ldr	r0, [pc, #340]	; (1728 <am_multiboot_uart_isr_handler+0x2d4>)
    15d4:	f7ff fbbe 	bl	d54 <image_start_packet_read>
    15d8:	4603      	mov	r3, r0
    15da:	461a      	mov	r2, r3
    15dc:	4b53      	ldr	r3, [pc, #332]	; (172c <am_multiboot_uart_isr_handler+0x2d8>)
    15de:	701a      	strb	r2, [r3, #0]

                    //
                    // Make sure the image packet had reasonable contents. If it
                    // didn't, we need to let the host know.
                    //
                    if ( g_bUartImageValid )
    15e0:	4b52      	ldr	r3, [pc, #328]	; (172c <am_multiboot_uart_isr_handler+0x2d8>)
    15e2:	781b      	ldrb	r3, [r3, #0]
    15e4:	b2db      	uxtb	r3, r3
    15e6:	2b00      	cmp	r3, #0
    15e8:	d003      	beq.n	15f2 <am_multiboot_uart_isr_handler+0x19e>
                    {
                        //
                        // Good image; Send back a "READY" packet.
                        //
                        tx_pui32Packet[0] = AM_BOOTLOADER_READY;
    15ea:	68bb      	ldr	r3, [r7, #8]
    15ec:	2202      	movs	r2, #2
    15ee:	601a      	str	r2, [r3, #0]
    15f0:	e002      	b.n	15f8 <am_multiboot_uart_isr_handler+0x1a4>
                    else
                    {
                        //
                        // Bad image; Send back an error.
                        //
                        tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
    15f2:	68bb      	ldr	r3, [r7, #8]
    15f4:	2205      	movs	r2, #5
    15f6:	601a      	str	r2, [r3, #0]
                    }

                    flush = 1;
    15f8:	2301      	movs	r3, #1
    15fa:	77bb      	strb	r3, [r7, #30]
                    send_byte_cnt = 4;
    15fc:	2304      	movs	r3, #4
    15fe:	77fb      	strb	r3, [r7, #31]
                    break;
    1600:	e06a      	b.n	16d8 <am_multiboot_uart_isr_handler+0x284>
                case AM_BOOTLOADER_SET_OVERRIDE_CMD:
                    //
                    // Set the override GPIO settings based on the packet
                    // information.
                    //
                    g_sImage.ui32OverrideGPIO = rx_pui32Packet[1];
    1602:	68fb      	ldr	r3, [r7, #12]
    1604:	685b      	ldr	r3, [r3, #4]
    1606:	4a48      	ldr	r2, [pc, #288]	; (1728 <am_multiboot_uart_isr_handler+0x2d4>)
    1608:	60d3      	str	r3, [r2, #12]
                    g_sImage.ui32OverridePolarity = rx_pui32Packet[2];
    160a:	68fb      	ldr	r3, [r7, #12]
    160c:	689b      	ldr	r3, [r3, #8]
    160e:	4a46      	ldr	r2, [pc, #280]	; (1728 <am_multiboot_uart_isr_handler+0x2d4>)
    1610:	6113      	str	r3, [r2, #16]

                    //
                    // Send back a "READY" packet.
                    //
                    tx_pui32Packet[0] = AM_BOOTLOADER_READY;
    1612:	68bb      	ldr	r3, [r7, #8]
    1614:	2202      	movs	r2, #2
    1616:	601a      	str	r2, [r3, #0]
                    flush = 1;
    1618:	2301      	movs	r3, #1
    161a:	77bb      	strb	r3, [r7, #30]
                    send_byte_cnt = 4;
    161c:	2304      	movs	r3, #4
    161e:	77fb      	strb	r3, [r7, #31]
                    break;
    1620:	e05a      	b.n	16d8 <am_multiboot_uart_isr_handler+0x284>

                case AM_BOOTLOADER_NEW_PACKET:
                    //
                    // Only take new packets if our image structure is valid.
                    //
                    if ( !g_bUartImageValid )
    1622:	4b42      	ldr	r3, [pc, #264]	; (172c <am_multiboot_uart_isr_handler+0x2d8>)
    1624:	781b      	ldrb	r3, [r3, #0]
    1626:	b2db      	uxtb	r3, r3
    1628:	f083 0301 	eor.w	r3, r3, #1
    162c:	b2db      	uxtb	r3, r3
    162e:	2b00      	cmp	r3, #0
    1630:	d003      	beq.n	163a <am_multiboot_uart_isr_handler+0x1e6>
                    {
                        tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
    1632:	68bb      	ldr	r3, [r7, #8]
    1634:	2205      	movs	r2, #5
    1636:	601a      	str	r2, [r3, #0]
                        break;
    1638:	e04e      	b.n	16d8 <am_multiboot_uart_isr_handler+0x284>
                    }

                    //
                    // Parse the rest of the packet sitting in the IOS LRAM.
                    //
                    image_data_packet_read((uint8_t *)(uart_RX_buffer + 8),
    163a:	4a3d      	ldr	r2, [pc, #244]	; (1730 <am_multiboot_uart_isr_handler+0x2dc>)
                        *((uint32_t *)(uart_RX_buffer + 4)));
    163c:	4b38      	ldr	r3, [pc, #224]	; (1720 <am_multiboot_uart_isr_handler+0x2cc>)
                    image_data_packet_read((uint8_t *)(uart_RX_buffer + 8),
    163e:	681b      	ldr	r3, [r3, #0]
    1640:	4619      	mov	r1, r3
    1642:	4610      	mov	r0, r2
    1644:	f7ff fbf4 	bl	e30 <image_data_packet_read>

                    //
                    // If this packet completed the image...
                    //
                    if ( g_ui32BytesReceived == g_sImage.ui32NumBytes )
    1648:	4b37      	ldr	r3, [pc, #220]	; (1728 <am_multiboot_uart_isr_handler+0x2d4>)
    164a:	685a      	ldr	r2, [r3, #4]
    164c:	4b39      	ldr	r3, [pc, #228]	; (1734 <am_multiboot_uart_isr_handler+0x2e0>)
    164e:	681b      	ldr	r3, [r3, #0]
    1650:	429a      	cmp	r2, r3
    1652:	d11c      	bne.n	168e <am_multiboot_uart_isr_handler+0x23a>
                        if ( (g_ui32CRC != g_sImage.ui32CRC) || multiboot_secure_verify(&g_sImage.ui32CRC) )
                        {
                            tx_pui32Packet[0] = AM_BOOTLOADER_BAD_CRC;
                        }
#else
                        if ( g_ui32CRC != g_sImage.ui32CRC )
    1654:	4b34      	ldr	r3, [pc, #208]	; (1728 <am_multiboot_uart_isr_handler+0x2d4>)
    1656:	689a      	ldr	r2, [r3, #8]
    1658:	4b37      	ldr	r3, [pc, #220]	; (1738 <am_multiboot_uart_isr_handler+0x2e4>)
    165a:	681b      	ldr	r3, [r3, #0]
    165c:	429a      	cmp	r2, r3
    165e:	d003      	beq.n	1668 <am_multiboot_uart_isr_handler+0x214>
                        {
                            tx_pui32Packet[0] = AM_BOOTLOADER_BAD_CRC;
    1660:	68bb      	ldr	r3, [r7, #8]
    1662:	2204      	movs	r2, #4
    1664:	601a      	str	r2, [r3, #0]
    1666:	e015      	b.n	1694 <am_multiboot_uart_isr_handler+0x240>
#endif
                        else
                        {
                            // Protect (and optionally write if stored in SRAM)
                            // image in flash now as it has been validated now
                            program_image(g_sImage.bEncrypted);
    1668:	4b2f      	ldr	r3, [pc, #188]	; (1728 <am_multiboot_uart_isr_handler+0x2d4>)
    166a:	69db      	ldr	r3, [r3, #28]
    166c:	4618      	mov	r0, r3
    166e:	f7ff fb1d 	bl	cac <program_image>
                            // Validate the flash contents of a boot image to make
                            // sure it's safe to run
                            if ( am_bootloader_flash_check(&g_sImage) )
    1672:	482d      	ldr	r0, [pc, #180]	; (1728 <am_multiboot_uart_isr_handler+0x2d4>)
    1674:	f7fe fd64 	bl	140 <am_bootloader_flash_check>
    1678:	4603      	mov	r3, r0
    167a:	2b00      	cmp	r3, #0
    167c:	d003      	beq.n	1686 <am_multiboot_uart_isr_handler+0x232>
                            {
                                tx_pui32Packet[0] = AM_BOOTLOADER_IMAGE_COMPLETE;
    167e:	68bb      	ldr	r3, [r7, #8]
    1680:	2203      	movs	r2, #3
    1682:	601a      	str	r2, [r3, #0]
    1684:	e006      	b.n	1694 <am_multiboot_uart_isr_handler+0x240>
                            }
                            else
                            {
                                tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
    1686:	68bb      	ldr	r3, [r7, #8]
    1688:	2205      	movs	r2, #5
    168a:	601a      	str	r2, [r3, #0]
    168c:	e002      	b.n	1694 <am_multiboot_uart_isr_handler+0x240>
                    {
                        //
                        // If this wasn't the end of the image, just send back a
                        // "READY" packet.
                        //
                        tx_pui32Packet[0] = AM_BOOTLOADER_READY;
    168e:	68bb      	ldr	r3, [r7, #8]
    1690:	2202      	movs	r2, #2
    1692:	601a      	str	r2, [r3, #0]
                    }

                    flush = 1;
    1694:	2301      	movs	r3, #1
    1696:	77bb      	strb	r3, [r7, #30]
                    send_byte_cnt = 4;
    1698:	2304      	movs	r3, #4
    169a:	77fb      	strb	r3, [r7, #31]

                    break;
    169c:	e01c      	b.n	16d8 <am_multiboot_uart_isr_handler+0x284>
                    if ( USE_FLAG_PAGE )
                    {
                        //
                        // Write the flag page.
                        //
                        am_bootloader_flag_page_update(&g_sImage,
    169e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
    16a2:	4821      	ldr	r0, [pc, #132]	; (1728 <am_multiboot_uart_isr_handler+0x2d4>)
    16a4:	f7fe fede 	bl	464 <am_bootloader_flag_page_update>
                    // Perform a software reset.
                    //
#if AM_APOLLO3_RESET
                    am_hal_reset_control(AM_HAL_RESET_CONTROL_SWPOI);
#else
                    am_hal_reset_poi();
    16a8:	f000 fd28 	bl	20fc <am_hal_reset_poi>
#endif

                    //
                    // Wait for the reset to take effect.
                    //
                    while (1);
    16ac:	e7fe      	b.n	16ac <am_multiboot_uart_isr_handler+0x258>

                case AM_BOOTLOADER_BL_VERSION_CMD:
                    //
                    // Respond with the version number.
                    //
                    tx_pui32Packet[0] = AM_BOOTLOADER_BL_VERSION;
    16ae:	68bb      	ldr	r3, [r7, #8]
    16b0:	2206      	movs	r2, #6
    16b2:	601a      	str	r2, [r3, #0]
                    tx_pui32Packet[1] = AM_BOOTLOADER_VERSION_NUM;
    16b4:	68bb      	ldr	r3, [r7, #8]
    16b6:	3304      	adds	r3, #4
    16b8:	2201      	movs	r2, #1
    16ba:	601a      	str	r2, [r3, #0]

                    flush = 1;
    16bc:	2301      	movs	r3, #1
    16be:	77bb      	strb	r3, [r7, #30]
                    send_byte_cnt = 8;
    16c0:	2308      	movs	r3, #8
    16c2:	77fb      	strb	r3, [r7, #31]
                    break;
    16c4:	e008      	b.n	16d8 <am_multiboot_uart_isr_handler+0x284>
                case AM_BOOTLOADER_NAK_CMD:
                    break;

                default:
                    // Error
                    tx_pui32Packet[0] = AM_BOOTLOADER_ERROR;
    16c6:	68bb      	ldr	r3, [r7, #8]
    16c8:	2205      	movs	r2, #5
    16ca:	601a      	str	r2, [r3, #0]
                    flush = 1;
    16cc:	2301      	movs	r3, #1
    16ce:	77bb      	strb	r3, [r7, #30]
                    send_byte_cnt = 4;
    16d0:	2304      	movs	r3, #4
    16d2:	77fb      	strb	r3, [r7, #31]
                    break;
    16d4:	e000      	b.n	16d8 <am_multiboot_uart_isr_handler+0x284>
                    break;
    16d6:	bf00      	nop
            }
            break;
    16d8:	e006      	b.n	16e8 <am_multiboot_uart_isr_handler+0x294>
    while ( !AM_BFRn(UART, ui32Module, FR, RXFE) )
    16da:	4b18      	ldr	r3, [pc, #96]	; (173c <am_multiboot_uart_isr_handler+0x2e8>)
    16dc:	681b      	ldr	r3, [r3, #0]
    16de:	f003 0310 	and.w	r3, r3, #16
    16e2:	2b00      	cmp	r3, #0
    16e4:	f43f aecb 	beq.w	147e <am_multiboot_uart_isr_handler+0x2a>
        }
    }

    if ( flush )
    16e8:	7fbb      	ldrb	r3, [r7, #30]
    16ea:	2b00      	cmp	r3, #0
    16ec:	d055      	beq.n	179a <am_multiboot_uart_isr_handler+0x346>
    {
        uart_TX_tail = 0;
    16ee:	4b14      	ldr	r3, [pc, #80]	; (1740 <am_multiboot_uart_isr_handler+0x2ec>)
    16f0:	2200      	movs	r2, #0
    16f2:	701a      	strb	r2, [r3, #0]

        for ( cnt = 0; cnt < send_byte_cnt; cnt++ )
    16f4:	2300      	movs	r3, #0
    16f6:	61bb      	str	r3, [r7, #24]
    16f8:	e034      	b.n	1764 <am_multiboot_uart_isr_handler+0x310>
    16fa:	bf00      	nop
    16fc:	100010d5 	.word	0x100010d5
    1700:	100010c8 	.word	0x100010c8
    1704:	100010ec 	.word	0x100010ec
    1708:	100010cc 	.word	0x100010cc
    170c:	4001c000 	.word	0x4001c000
    1710:	100010f0 	.word	0x100010f0
    1714:	100010c0 	.word	0x100010c0
    1718:	100010e0 	.word	0x100010e0
    171c:	100010c4 	.word	0x100010c4
    1720:	100010f4 	.word	0x100010f4
    1724:	100012f8 	.word	0x100012f8
    1728:	10001018 	.word	0x10001018
    172c:	100010ac 	.word	0x100010ac
    1730:	100010f8 	.word	0x100010f8
    1734:	100010a0 	.word	0x100010a0
    1738:	100010a4 	.word	0x100010a4
    173c:	4001c018 	.word	0x4001c018
    1740:	100012fc 	.word	0x100012fc
        {
            ser_out(ui32Module, uart_TX_buffer[uart_TX_tail++]);
    1744:	4b17      	ldr	r3, [pc, #92]	; (17a4 <am_multiboot_uart_isr_handler+0x350>)
    1746:	781b      	ldrb	r3, [r3, #0]
    1748:	1c5a      	adds	r2, r3, #1
    174a:	b2d1      	uxtb	r1, r2
    174c:	4a15      	ldr	r2, [pc, #84]	; (17a4 <am_multiboot_uart_isr_handler+0x350>)
    174e:	7011      	strb	r1, [r2, #0]
    1750:	461a      	mov	r2, r3
    1752:	4b15      	ldr	r3, [pc, #84]	; (17a8 <am_multiboot_uart_isr_handler+0x354>)
    1754:	5c9b      	ldrb	r3, [r3, r2]
    1756:	4619      	mov	r1, r3
    1758:	6878      	ldr	r0, [r7, #4]
    175a:	f7ff fe0d 	bl	1378 <ser_out>
        for ( cnt = 0; cnt < send_byte_cnt; cnt++ )
    175e:	69bb      	ldr	r3, [r7, #24]
    1760:	3301      	adds	r3, #1
    1762:	61bb      	str	r3, [r7, #24]
    1764:	7ffa      	ldrb	r2, [r7, #31]
    1766:	69bb      	ldr	r3, [r7, #24]
    1768:	429a      	cmp	r2, r3
    176a:	d8eb      	bhi.n	1744 <am_multiboot_uart_isr_handler+0x2f0>
        }
        command = 0;
    176c:	4b0f      	ldr	r3, [pc, #60]	; (17ac <am_multiboot_uart_isr_handler+0x358>)
    176e:	2200      	movs	r2, #0
    1770:	601a      	str	r2, [r3, #0]
        uart_RX_head = uart_RX_tail = uart_RX_cnt = 0;
    1772:	2300      	movs	r3, #0
    1774:	4a0e      	ldr	r2, [pc, #56]	; (17b0 <am_multiboot_uart_isr_handler+0x35c>)
    1776:	6013      	str	r3, [r2, #0]
    1778:	4a0e      	ldr	r2, [pc, #56]	; (17b4 <am_multiboot_uart_isr_handler+0x360>)
    177a:	6013      	str	r3, [r2, #0]
    177c:	4a0e      	ldr	r2, [pc, #56]	; (17b8 <am_multiboot_uart_isr_handler+0x364>)
    177e:	6013      	str	r3, [r2, #0]
        RX_FIFO_FULL = 0;  // check serial FIFO operation
    1780:	4b0e      	ldr	r3, [pc, #56]	; (17bc <am_multiboot_uart_isr_handler+0x368>)
    1782:	2200      	movs	r2, #0
    1784:	701a      	strb	r2, [r3, #0]
        RX_FIFO_EMPTY = 1;
    1786:	4b0e      	ldr	r3, [pc, #56]	; (17c0 <am_multiboot_uart_isr_handler+0x36c>)
    1788:	2201      	movs	r2, #1
    178a:	701a      	strb	r2, [r3, #0]
        flush = 0;
    178c:	2300      	movs	r3, #0
    178e:	77bb      	strb	r3, [r7, #30]
        send_byte_cnt = 0;
    1790:	2300      	movs	r3, #0
    1792:	77fb      	strb	r3, [r7, #31]
        packet_cnt = 0xff;
    1794:	4b0b      	ldr	r3, [pc, #44]	; (17c4 <am_multiboot_uart_isr_handler+0x370>)
    1796:	22ff      	movs	r2, #255	; 0xff
    1798:	601a      	str	r2, [r3, #0]
    }

}
    179a:	bf00      	nop
    179c:	3720      	adds	r7, #32
    179e:	46bd      	mov	sp, r7
    17a0:	bd80      	pop	{r7, pc}
    17a2:	bf00      	nop
    17a4:	100012fc 	.word	0x100012fc
    17a8:	100010cc 	.word	0x100010cc
    17ac:	100010e0 	.word	0x100010e0
    17b0:	100010c0 	.word	0x100010c0
    17b4:	100010d8 	.word	0x100010d8
    17b8:	100010c8 	.word	0x100010c8
    17bc:	100010ec 	.word	0x100010ec
    17c0:	100010d5 	.word	0x100010d5
    17c4:	100010c4 	.word	0x100010c4

000017c8 <am_multiboot_uart_detect_baudrate>:
//!
//! @return the computed baud rate.
//
//*****************************************************************************
uint32_t am_multiboot_uart_detect_baudrate(uint32_t ui32RxPin)
{
    17c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    17cc:	b087      	sub	sp, #28
    17ce:	af00      	add	r7, sp, #0
    17d0:	6078      	str	r0, [r7, #4]
    // We need to hit this register as early as possible, so we are skipping
    // all of the normal logic that checks to make sure we are responding to
    // the right GPIO. In the interest of time, we will just assume that this
    // interrupt is coming from the UART RX pin.
    //
    ui32Start = am_hal_systick_count();
    17d2:	f000 fcdb 	bl	218c <am_hal_systick_count>
    17d6:	6178      	str	r0, [r7, #20]
    // Wait for exactly 9 edges on the UART RX pin. This corresponds to the
    // number of edges in the byte 0x55 after the start bit. Using a simple
    // polling approach here gives us the best possible chance to catch every
    // single edge.
    //
    while ( !am_hal_gpio_input_bit_read(ui32RxPin) );
    17d8:	bf00      	nop
    17da:	687b      	ldr	r3, [r7, #4]
    17dc:	08db      	lsrs	r3, r3, #3
    17de:	f003 0204 	and.w	r2, r3, #4
    17e2:	4b6c      	ldr	r3, [pc, #432]	; (1994 <am_multiboot_uart_detect_baudrate+0x1cc>)
    17e4:	4413      	add	r3, r2
    17e6:	681a      	ldr	r2, [r3, #0]
    17e8:	687b      	ldr	r3, [r7, #4]
    17ea:	f003 031f 	and.w	r3, r3, #31
    17ee:	fa22 f303 	lsr.w	r3, r2, r3
    17f2:	f003 0301 	and.w	r3, r3, #1
    17f6:	2b00      	cmp	r3, #0
    17f8:	d0ef      	beq.n	17da <am_multiboot_uart_detect_baudrate+0x12>
    while ( am_hal_gpio_input_bit_read(ui32RxPin) );
    17fa:	bf00      	nop
    17fc:	687b      	ldr	r3, [r7, #4]
    17fe:	08db      	lsrs	r3, r3, #3
    1800:	f003 0204 	and.w	r2, r3, #4
    1804:	4b63      	ldr	r3, [pc, #396]	; (1994 <am_multiboot_uart_detect_baudrate+0x1cc>)
    1806:	4413      	add	r3, r2
    1808:	681a      	ldr	r2, [r3, #0]
    180a:	687b      	ldr	r3, [r7, #4]
    180c:	f003 031f 	and.w	r3, r3, #31
    1810:	fa22 f303 	lsr.w	r3, r2, r3
    1814:	f003 0301 	and.w	r3, r3, #1
    1818:	2b00      	cmp	r3, #0
    181a:	d1ef      	bne.n	17fc <am_multiboot_uart_detect_baudrate+0x34>
    while ( !am_hal_gpio_input_bit_read(ui32RxPin) );
    181c:	bf00      	nop
    181e:	687b      	ldr	r3, [r7, #4]
    1820:	08db      	lsrs	r3, r3, #3
    1822:	f003 0204 	and.w	r2, r3, #4
    1826:	4b5b      	ldr	r3, [pc, #364]	; (1994 <am_multiboot_uart_detect_baudrate+0x1cc>)
    1828:	4413      	add	r3, r2
    182a:	681a      	ldr	r2, [r3, #0]
    182c:	687b      	ldr	r3, [r7, #4]
    182e:	f003 031f 	and.w	r3, r3, #31
    1832:	fa22 f303 	lsr.w	r3, r2, r3
    1836:	f003 0301 	and.w	r3, r3, #1
    183a:	2b00      	cmp	r3, #0
    183c:	d0ef      	beq.n	181e <am_multiboot_uart_detect_baudrate+0x56>
    while ( am_hal_gpio_input_bit_read(ui32RxPin) );
    183e:	bf00      	nop
    1840:	687b      	ldr	r3, [r7, #4]
    1842:	08db      	lsrs	r3, r3, #3
    1844:	f003 0204 	and.w	r2, r3, #4
    1848:	4b52      	ldr	r3, [pc, #328]	; (1994 <am_multiboot_uart_detect_baudrate+0x1cc>)
    184a:	4413      	add	r3, r2
    184c:	681a      	ldr	r2, [r3, #0]
    184e:	687b      	ldr	r3, [r7, #4]
    1850:	f003 031f 	and.w	r3, r3, #31
    1854:	fa22 f303 	lsr.w	r3, r2, r3
    1858:	f003 0301 	and.w	r3, r3, #1
    185c:	2b00      	cmp	r3, #0
    185e:	d1ef      	bne.n	1840 <am_multiboot_uart_detect_baudrate+0x78>
    while ( !am_hal_gpio_input_bit_read(ui32RxPin) );
    1860:	bf00      	nop
    1862:	687b      	ldr	r3, [r7, #4]
    1864:	08db      	lsrs	r3, r3, #3
    1866:	f003 0204 	and.w	r2, r3, #4
    186a:	4b4a      	ldr	r3, [pc, #296]	; (1994 <am_multiboot_uart_detect_baudrate+0x1cc>)
    186c:	4413      	add	r3, r2
    186e:	681a      	ldr	r2, [r3, #0]
    1870:	687b      	ldr	r3, [r7, #4]
    1872:	f003 031f 	and.w	r3, r3, #31
    1876:	fa22 f303 	lsr.w	r3, r2, r3
    187a:	f003 0301 	and.w	r3, r3, #1
    187e:	2b00      	cmp	r3, #0
    1880:	d0ef      	beq.n	1862 <am_multiboot_uart_detect_baudrate+0x9a>
    while ( am_hal_gpio_input_bit_read(ui32RxPin) );
    1882:	bf00      	nop
    1884:	687b      	ldr	r3, [r7, #4]
    1886:	08db      	lsrs	r3, r3, #3
    1888:	f003 0204 	and.w	r2, r3, #4
    188c:	4b41      	ldr	r3, [pc, #260]	; (1994 <am_multiboot_uart_detect_baudrate+0x1cc>)
    188e:	4413      	add	r3, r2
    1890:	681a      	ldr	r2, [r3, #0]
    1892:	687b      	ldr	r3, [r7, #4]
    1894:	f003 031f 	and.w	r3, r3, #31
    1898:	fa22 f303 	lsr.w	r3, r2, r3
    189c:	f003 0301 	and.w	r3, r3, #1
    18a0:	2b00      	cmp	r3, #0
    18a2:	d1ef      	bne.n	1884 <am_multiboot_uart_detect_baudrate+0xbc>
    while ( !am_hal_gpio_input_bit_read(ui32RxPin) );
    18a4:	bf00      	nop
    18a6:	687b      	ldr	r3, [r7, #4]
    18a8:	08db      	lsrs	r3, r3, #3
    18aa:	f003 0204 	and.w	r2, r3, #4
    18ae:	4b39      	ldr	r3, [pc, #228]	; (1994 <am_multiboot_uart_detect_baudrate+0x1cc>)
    18b0:	4413      	add	r3, r2
    18b2:	681a      	ldr	r2, [r3, #0]
    18b4:	687b      	ldr	r3, [r7, #4]
    18b6:	f003 031f 	and.w	r3, r3, #31
    18ba:	fa22 f303 	lsr.w	r3, r2, r3
    18be:	f003 0301 	and.w	r3, r3, #1
    18c2:	2b00      	cmp	r3, #0
    18c4:	d0ef      	beq.n	18a6 <am_multiboot_uart_detect_baudrate+0xde>
    while ( am_hal_gpio_input_bit_read(ui32RxPin) );
    18c6:	bf00      	nop
    18c8:	687b      	ldr	r3, [r7, #4]
    18ca:	08db      	lsrs	r3, r3, #3
    18cc:	f003 0204 	and.w	r2, r3, #4
    18d0:	4b30      	ldr	r3, [pc, #192]	; (1994 <am_multiboot_uart_detect_baudrate+0x1cc>)
    18d2:	4413      	add	r3, r2
    18d4:	681a      	ldr	r2, [r3, #0]
    18d6:	687b      	ldr	r3, [r7, #4]
    18d8:	f003 031f 	and.w	r3, r3, #31
    18dc:	fa22 f303 	lsr.w	r3, r2, r3
    18e0:	f003 0301 	and.w	r3, r3, #1
    18e4:	2b00      	cmp	r3, #0
    18e6:	d1ef      	bne.n	18c8 <am_multiboot_uart_detect_baudrate+0x100>
    while ( !am_hal_gpio_input_bit_read(ui32RxPin) );
    18e8:	bf00      	nop
    18ea:	687b      	ldr	r3, [r7, #4]
    18ec:	08db      	lsrs	r3, r3, #3
    18ee:	f003 0204 	and.w	r2, r3, #4
    18f2:	4b28      	ldr	r3, [pc, #160]	; (1994 <am_multiboot_uart_detect_baudrate+0x1cc>)
    18f4:	4413      	add	r3, r2
    18f6:	681a      	ldr	r2, [r3, #0]
    18f8:	687b      	ldr	r3, [r7, #4]
    18fa:	f003 031f 	and.w	r3, r3, #31
    18fe:	fa22 f303 	lsr.w	r3, r2, r3
    1902:	f003 0301 	and.w	r3, r3, #1
    1906:	2b00      	cmp	r3, #0
    1908:	d0ef      	beq.n	18ea <am_multiboot_uart_detect_baudrate+0x122>

    //
    // Record the "end" time.
    //
    ui32End = am_hal_systick_count();
    190a:	f000 fc3f 	bl	218c <am_hal_systick_count>
    190e:	6138      	str	r0, [r7, #16]
    am_hal_systick_stop();
    1910:	f000 fc2e 	bl	2170 <am_hal_systick_stop>
    // At this point, the timing-critical portion of the interrupt handler is
    // complete, and we are free to clean up our interrupt status. We only
    // intend to perform the automatic baud-rate detection once, so we will go
    // ahead and disable the interrupt on the UART RX pin now.
    //
    am_hal_gpio_int_disable(AM_HAL_GPIO_BIT(ui32RxPin));
    1914:	f04f 0201 	mov.w	r2, #1
    1918:	f04f 0300 	mov.w	r3, #0
    191c:	6879      	ldr	r1, [r7, #4]
    191e:	f1a1 0620 	sub.w	r6, r1, #32
    1922:	f1c1 0020 	rsb	r0, r1, #32
    1926:	fa03 f901 	lsl.w	r9, r3, r1
    192a:	fa02 f606 	lsl.w	r6, r2, r6
    192e:	ea49 0906 	orr.w	r9, r9, r6
    1932:	fa22 f000 	lsr.w	r0, r2, r0
    1936:	ea49 0900 	orr.w	r9, r9, r0
    193a:	fa02 f801 	lsl.w	r8, r2, r1
    193e:	4640      	mov	r0, r8
    1940:	4649      	mov	r1, r9
    1942:	f000 fa5f 	bl	1e04 <am_hal_gpio_int_disable>
    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(ui32RxPin));
    1946:	f04f 0201 	mov.w	r2, #1
    194a:	f04f 0300 	mov.w	r3, #0
    194e:	6879      	ldr	r1, [r7, #4]
    1950:	f1a1 0620 	sub.w	r6, r1, #32
    1954:	f1c1 0020 	rsb	r0, r1, #32
    1958:	fa03 f501 	lsl.w	r5, r3, r1
    195c:	fa02 f606 	lsl.w	r6, r2, r6
    1960:	4335      	orrs	r5, r6
    1962:	fa22 f000 	lsr.w	r0, r2, r0
    1966:	4305      	orrs	r5, r0
    1968:	fa02 f401 	lsl.w	r4, r2, r1
    196c:	4620      	mov	r0, r4
    196e:	4629      	mov	r1, r5
    1970:	f000 fa5a 	bl	1e28 <am_hal_gpio_int_clear>
    // Check to see how long those nine edges took to arrive. This should
    // correspond to exactly nine bit-times of UART traffic from the host. From
    // there, we can use the speed of the processor (which is known) to
    // calculate the host's baud rate.
    //
    ui32Counts = ui32Start - ui32End;
    1974:	697a      	ldr	r2, [r7, #20]
    1976:	693b      	ldr	r3, [r7, #16]
    1978:	1ad3      	subs	r3, r2, r3
    197a:	60fb      	str	r3, [r7, #12]
    ui32BaudRate = AM_HAL_CLKGEN_FREQ_MAX_HZ * 9 / ui32Counts;
    197c:	4a06      	ldr	r2, [pc, #24]	; (1998 <am_multiboot_uart_detect_baudrate+0x1d0>)
    197e:	68fb      	ldr	r3, [r7, #12]
    1980:	fbb2 f3f3 	udiv	r3, r2, r3
    1984:	60bb      	str	r3, [r7, #8]
    return ui32BaudRate;
    1986:	68bb      	ldr	r3, [r7, #8]
}
    1988:	4618      	mov	r0, r3
    198a:	371c      	adds	r7, #28
    198c:	46bd      	mov	sp, r7
    198e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1992:	bf00      	nop
    1994:	40010080 	.word	0x40010080
    1998:	0cdfe600 	.word	0x0cdfe600

0000199c <am_ioslave_acc_isr>:
// IO Slave Register Access ISR.
//
//*****************************************************************************
void
am_ioslave_acc_isr(void)
{
    199c:	b580      	push	{r7, lr}
    199e:	af00      	add	r7, sp, #0
    //
    // Make sure the main loop knows that the IOS is currently in use.
    //
    g_bIOSActive = true;
    19a0:	4b03      	ldr	r3, [pc, #12]	; (19b0 <am_ioslave_acc_isr+0x14>)
    19a2:	2201      	movs	r2, #1
    19a4:	701a      	strb	r2, [r3, #0]

    am_multiboot_ios_acc_isr_handler();
    19a6:	f7fe fe13 	bl	5d0 <am_multiboot_ios_acc_isr_handler>
}
    19aa:	bf00      	nop
    19ac:	bd80      	pop	{r7, pc}
    19ae:	bf00      	nop
    19b0:	100010ad 	.word	0x100010ad

000019b4 <am_gpio_isr>:
// Setting up a GPIO ISR for the UART autobaud feature.
//
//*****************************************************************************
void
am_gpio_isr(void)
{
    19b4:	b580      	push	{r7, lr}
    19b6:	b082      	sub	sp, #8
    19b8:	af00      	add	r7, sp, #0
    uint32_t ui32BaudRate;

    ui32BaudRate = am_multiboot_uart_detect_baudrate(AM_BSP_GPIO_BOOTLOADER_UART_RX);
    19ba:	2024      	movs	r0, #36	; 0x24
    19bc:	f7ff ff04 	bl	17c8 <am_multiboot_uart_detect_baudrate>
    19c0:	6078      	str	r0, [r7, #4]

    //
    // Now that we have a baud rate, we can configure our UART.
    //
    am_multiboot_setup_serial(AM_BSP_UART_BOOTLOADER_INST, ui32BaudRate);
    19c2:	6879      	ldr	r1, [r7, #4]
    19c4:	2000      	movs	r0, #0
    19c6:	f7ff fcf1 	bl	13ac <am_multiboot_setup_serial>
    //
    // Send a '0x55' to give the boot host some indication that we have the
    // correct baud rate and to let it know that our UART is ready for further
    // traffic.
    //
    am_hal_uart_char_transmit_polled(AM_BSP_UART_BOOTLOADER_INST, 0x55);
    19ca:	2155      	movs	r1, #85	; 0x55
    19cc:	2000      	movs	r0, #0
    19ce:	f000 fc65 	bl	229c <am_hal_uart_char_transmit_polled>
    g_bUartConfigured = true;
    19d2:	4b03      	ldr	r3, [pc, #12]	; (19e0 <am_gpio_isr+0x2c>)
    19d4:	2201      	movs	r2, #1
    19d6:	701a      	strb	r2, [r3, #0]
}
    19d8:	bf00      	nop
    19da:	3708      	adds	r7, #8
    19dc:	46bd      	mov	sp, r7
    19de:	bd80      	pop	{r7, pc}
    19e0:	100010ae 	.word	0x100010ae

000019e4 <am_uart_isr>:
#if (AM_BSP_UART_BOOTLOADER_INST == 0)
am_uart_isr(void)
#elif (AM_BSP_UART_BOOTLOADER_INST == 1)
am_uart1_isr(void)
#endif
{
    19e4:	b580      	push	{r7, lr}
    19e6:	af00      	add	r7, sp, #0
    am_multiboot_uart_isr_handler(AM_BSP_UART_BOOTLOADER_INST);
    19e8:	2000      	movs	r0, #0
    19ea:	f7ff fd33 	bl	1454 <am_multiboot_uart_isr_handler>
}
    19ee:	bf00      	nop
    19f0:	bd80      	pop	{r7, pc}

000019f2 <invalidate_ota>:
uint32_t sramTempBuf[TEMP_BUFSIZE / 4];

#ifdef AM_MULTIBOOT_SUPPORT_OTA
// Invalidate the OTA - so that it is not processed again for next boot
void invalidate_ota(am_multiboot_ota_t *pOtaInfo)
{
    19f2:	b580      	push	{r7, lr}
    19f4:	b084      	sub	sp, #16
    19f6:	af00      	add	r7, sp, #0
    19f8:	6078      	str	r0, [r7, #4]
    uint32_t tempZero;
    uint32_t otaPtrVal = *((uint32_t *)OTA_POINTER_LOCATION);
    19fa:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
    19fe:	681b      	ldr	r3, [r3, #0]
    1a00:	60fb      	str	r3, [r7, #12]
    // CAUTION: We can reprogram a bit in flash to 0 only once...so make sure we do not re-clear bits
    tempZero = ~otaPtrVal;
    1a02:	68fb      	ldr	r3, [r7, #12]
    1a04:	43db      	mvns	r3, r3
    1a06:	60bb      	str	r3, [r7, #8]
    // clear the value for subsequent boots
    am_bootloader_write_flash_within_page(OTA_POINTER_LOCATION, &tempZero, 1);
    1a08:	f107 0308 	add.w	r3, r7, #8
    1a0c:	2201      	movs	r2, #1
    1a0e:	4619      	mov	r1, r3
    1a10:	f44f 40c2 	mov.w	r0, #24832	; 0x6100
    1a14:	f7fe fd7a 	bl	50c <am_bootloader_write_flash_within_page>
}
    1a18:	bf00      	nop
    1a1a:	3710      	adds	r7, #16
    1a1c:	46bd      	mov	sp, r7
    1a1e:	bd80      	pop	{r7, pc}

00001a20 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    1a20:	b580      	push	{r7, lr}
    1a22:	b088      	sub	sp, #32
    1a24:	af02      	add	r7, sp, #8
    am_bootloader_image_t *pBootImage;
    bool bOverride = false;
    1a26:	2300      	movs	r3, #0
    1a28:	71fb      	strb	r3, [r7, #7]
    bool bBootFromFlash = false;
    1a2a:	2300      	movs	r3, #0
    1a2c:	75fb      	strb	r3, [r7, #23]
#ifdef AM_MULTIBOOT_SUPPORT_OTA
    uint32_t otaPtrVal = *((uint32_t *)OTA_POINTER_LOCATION);
    1a2e:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
    1a32:	681b      	ldr	r3, [r3, #0]
    1a34:	613b      	str	r3, [r7, #16]
#ifdef AM_MULTIBOOT_SUPPORT_IOS
    //
    // Set the (active LOW) interrupt pin so the host knows we don't have a
    // message to send yet.
    //
    am_hal_gpio_out_bit_set(MULTIBOOT_IOS_INTERRUPT_PIN);
    1a36:	4b8f      	ldr	r3, [pc, #572]	; (1c74 <main+0x254>)
    1a38:	2210      	movs	r2, #16
    1a3a:	601a      	str	r2, [r3, #0]
    am_hal_gpio_pin_config(MULTIBOOT_IOS_INTERRUPT_PIN, AM_HAL_PIN_OUTPUT);
    1a3c:	4b8e      	ldr	r3, [pc, #568]	; (1c78 <main+0x258>)
    1a3e:	2273      	movs	r2, #115	; 0x73
    1a40:	601a      	str	r2, [r3, #0]
    1a42:	4a8e      	ldr	r2, [pc, #568]	; (1c7c <main+0x25c>)
    1a44:	4b8d      	ldr	r3, [pc, #564]	; (1c7c <main+0x25c>)
    1a46:	681b      	ldr	r3, [r3, #0]
    1a48:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
    1a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1a50:	6013      	str	r3, [r2, #0]
    1a52:	4a8b      	ldr	r2, [pc, #556]	; (1c80 <main+0x260>)
    1a54:	4b8a      	ldr	r3, [pc, #552]	; (1c80 <main+0x260>)
    1a56:	681b      	ldr	r3, [r3, #0]
    1a58:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1a5c:	f043 0318 	orr.w	r3, r3, #24
    1a60:	6013      	str	r3, [r2, #0]
    1a62:	4b85      	ldr	r3, [pc, #532]	; (1c78 <main+0x258>)
    1a64:	2200      	movs	r2, #0
    1a66:	601a      	str	r2, [r3, #0]
#endif

    bBootFromFlash = am_multiboot_check_boot_from_flash(&bOverride, &pBootImage);
    1a68:	f107 0208 	add.w	r2, r7, #8
    1a6c:	1dfb      	adds	r3, r7, #7
    1a6e:	4611      	mov	r1, r2
    1a70:	4618      	mov	r0, r3
    1a72:	f7ff fa59 	bl	f28 <am_multiboot_check_boot_from_flash>
    1a76:	4603      	mov	r3, r0
    1a78:	75fb      	strb	r3, [r7, #23]
    if (!bOverride)
    1a7a:	79fb      	ldrb	r3, [r7, #7]
    1a7c:	f083 0301 	eor.w	r3, r3, #1
    1a80:	b2db      	uxtb	r3, r3
    1a82:	2b00      	cmp	r3, #0
    1a84:	d03a      	beq.n	1afc <main+0xdc>
    {
#ifdef AM_MULTIBOOT_SUPPORT_OTA
        // Check if OTA available
        if ((otaPtrVal != 0xFFFFFFFF) && (otaPtrVal != 0))
    1a86:	693b      	ldr	r3, [r7, #16]
    1a88:	f1b3 3fff 	cmp.w	r3, #4294967295
    1a8c:	d01b      	beq.n	1ac6 <main+0xa6>
    1a8e:	693b      	ldr	r3, [r7, #16]
    1a90:	2b00      	cmp	r3, #0
    1a92:	d018      	beq.n	1ac6 <main+0xa6>
        {
            //
            // Configure the board for low power.
            //
            am_bsp_low_power_init();
    1a94:	f000 f95e 	bl	1d54 <am_bsp_low_power_init>
            //
            // If we get here, we're going to try to download a new image from a host
            // processor. Speed up the clocks and start turning on peripherals.
            //
            am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
    1a98:	2000      	movs	r0, #0
    1a9a:	f000 f96d 	bl	1d78 <am_hal_clkgen_sysclk_select>
            // function below does not return in case of success

#if USE_EXTERNAL_FLASH == 1
            if (am_multiboot_ota_handler((void *)otaPtrVal, sramTempBuf, sizeof(sramTempBuf), invalidate_ota, &g_extFlash) == false)
#else
            if (am_multiboot_ota_handler((void *)otaPtrVal, sramTempBuf, sizeof(sramTempBuf), invalidate_ota, NULL) == false)
    1a9e:	6938      	ldr	r0, [r7, #16]
    1aa0:	2300      	movs	r3, #0
    1aa2:	9300      	str	r3, [sp, #0]
    1aa4:	4b77      	ldr	r3, [pc, #476]	; (1c84 <main+0x264>)
    1aa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1aaa:	4977      	ldr	r1, [pc, #476]	; (1c88 <main+0x268>)
    1aac:	f7ff fb7a 	bl	11a4 <am_multiboot_ota_handler>
    1ab0:	4603      	mov	r3, r0
    1ab2:	f083 0301 	eor.w	r3, r3, #1
    1ab6:	b2db      	uxtb	r3, r3
    1ab8:	2b00      	cmp	r3, #0
    1aba:	d004      	beq.n	1ac6 <main+0xa6>
#endif //USE_EXTERNAL_FLASH == 1
            {
                if (bBootFromFlash)
    1abc:	7dfb      	ldrb	r3, [r7, #23]
    1abe:	2b00      	cmp	r3, #0
    1ac0:	d001      	beq.n	1ac6 <main+0xa6>
                    // We want to run the flash image with clean slate...
                    // So doing a POI here, and the image will be run in the next boot
                    //
                    // Perform a software reset.
                    //
                    am_hal_reset_poi();
    1ac2:	f000 fb1b 	bl	20fc <am_hal_reset_poi>
                }
            }
        }
#endif
        if (bBootFromFlash)
    1ac6:	7dfb      	ldrb	r3, [r7, #23]
    1ac8:	2b00      	cmp	r3, #0
    1aca:	d017      	beq.n	1afc <main+0xdc>
        {
#ifdef AM_MULTIBOOT_SUPPORT_IOS
            //
            // If everything looks good, disable the interrupt pin and run.
            //
            am_hal_gpio_pin_config(MULTIBOOT_IOS_INTERRUPT_PIN, AM_HAL_PIN_DISABLE);
    1acc:	4b6a      	ldr	r3, [pc, #424]	; (1c78 <main+0x258>)
    1ace:	2273      	movs	r2, #115	; 0x73
    1ad0:	601a      	str	r2, [r3, #0]
    1ad2:	4a6a      	ldr	r2, [pc, #424]	; (1c7c <main+0x25c>)
    1ad4:	4b69      	ldr	r3, [pc, #420]	; (1c7c <main+0x25c>)
    1ad6:	681b      	ldr	r3, [r3, #0]
    1ad8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
    1adc:	6013      	str	r3, [r2, #0]
    1ade:	4a68      	ldr	r2, [pc, #416]	; (1c80 <main+0x260>)
    1ae0:	4b67      	ldr	r3, [pc, #412]	; (1c80 <main+0x260>)
    1ae2:	681b      	ldr	r3, [r3, #0]
    1ae4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1ae8:	f043 0318 	orr.w	r3, r3, #24
    1aec:	6013      	str	r3, [r2, #0]
    1aee:	4b62      	ldr	r3, [pc, #392]	; (1c78 <main+0x258>)
    1af0:	2200      	movs	r2, #0
    1af2:	601a      	str	r2, [r3, #0]
#endif
            am_bootloader_image_run(pBootImage);
    1af4:	68bb      	ldr	r3, [r7, #8]
    1af6:	4618      	mov	r0, r3
    1af8:	f7fe fd40 	bl	57c <am_bootloader_image_run>
    }
    //
    // If we get here, we're going to try to download a new image from a host
    // processor. Speed up the clocks and start turning on peripherals.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
    1afc:	2000      	movs	r0, #0
    1afe:	f000 f93b 	bl	1d78 <am_hal_clkgen_sysclk_select>
    //
    // Configure the board for low power.
    //
    am_bsp_low_power_init();
    1b02:	f000 f927 	bl	1d54 <am_bsp_low_power_init>

    //
    // Provide temp buffer for multiboot to operate on
    //
    am_multiboot_init(sramTempBuf, sizeof(sramTempBuf));
    1b06:	f44f 6100 	mov.w	r1, #2048	; 0x800
    1b0a:	485f      	ldr	r0, [pc, #380]	; (1c88 <main+0x268>)
    1b0c:	f7ff f906 	bl	d1c <am_multiboot_init>

#ifdef AM_MULTIBOOT_SUPPORT_IOS
    //
    // Start systick to measure time for the IOS timeout.
    //
    am_hal_systick_load(0x00FFFFFF);
    1b10:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    1b14:	f000 fb34 	bl	2180 <am_hal_systick_load>
    am_hal_systick_start();
    1b18:	f000 fb22 	bl	2160 <am_hal_systick_start>

    //
    // Enable the IOS. Choose the correct protocol based on the state of pin 0.
    //
    am_multiboot_setup_ios_interface(MULTIBOOT_IOS_INTERRUPT_PIN);
    1b1c:	2004      	movs	r0, #4
    1b1e:	f7fe fe93 	bl	848 <am_multiboot_setup_ios_interface>

    //
    // Wait for a few milliseconds to see if anyone will send us data.
    //
    while ( g_bIOSActive
    1b22:	e002      	b.n	1b2a <main+0x10a>
        )
    {
        //
        // Delay to avoid polling peripheral registers so frequently.
        //
        am_util_delay_ms(1);
    1b24:	2001      	movs	r0, #1
    1b26:	f000 f8fb 	bl	1d20 <am_util_delay_ms>
    while ( g_bIOSActive
    1b2a:	4b58      	ldr	r3, [pc, #352]	; (1c8c <main+0x26c>)
    1b2c:	781b      	ldrb	r3, [r3, #0]
    1b2e:	b2db      	uxtb	r3, r3
    1b30:	2b00      	cmp	r3, #0
    1b32:	d1f7      	bne.n	1b24 <main+0x104>
        || am_hal_systick_count() > (0xFFFFFF - WAIT_IOS_BOOT_SYSTICK)
    1b34:	f000 fb2a 	bl	218c <am_hal_systick_count>
    1b38:	4602      	mov	r2, r0
    1b3a:	4b55      	ldr	r3, [pc, #340]	; (1c90 <main+0x270>)
    1b3c:	429a      	cmp	r2, r3
    1b3e:	d8f1      	bhi.n	1b24 <main+0x104>
    }

    //
    // If we didn't get any IOS packets, we'll move on to the UART option.
    //
    am_multiboot_cleanup_ios_interface();
    1b40:	f7fe ffc8 	bl	ad4 <am_multiboot_cleanup_ios_interface>
    am_hal_gpio_pin_config(MULTIBOOT_IOS_INTERRUPT_PIN, AM_HAL_PIN_DISABLE);
    1b44:	4b4c      	ldr	r3, [pc, #304]	; (1c78 <main+0x258>)
    1b46:	2273      	movs	r2, #115	; 0x73
    1b48:	601a      	str	r2, [r3, #0]
    1b4a:	4a4c      	ldr	r2, [pc, #304]	; (1c7c <main+0x25c>)
    1b4c:	4b4b      	ldr	r3, [pc, #300]	; (1c7c <main+0x25c>)
    1b4e:	681b      	ldr	r3, [r3, #0]
    1b50:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
    1b54:	6013      	str	r3, [r2, #0]
    1b56:	4a4a      	ldr	r2, [pc, #296]	; (1c80 <main+0x260>)
    1b58:	4b49      	ldr	r3, [pc, #292]	; (1c80 <main+0x260>)
    1b5a:	681b      	ldr	r3, [r3, #0]
    1b5c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1b60:	f043 0318 	orr.w	r3, r3, #24
    1b64:	6013      	str	r3, [r2, #0]
    1b66:	4b44      	ldr	r3, [pc, #272]	; (1c78 <main+0x258>)
    1b68:	2200      	movs	r2, #0
    1b6a:	601a      	str	r2, [r3, #0]
#ifdef AM_MULTIBOOT_SUPPORT_UART
#ifdef MULTIBOOT_DETECT_BAUDRATE
    //
    // Re-Start systick to measure time for autobaud and for the IOS timeout.
    //
    am_hal_systick_stop();
    1b6c:	f000 fb00 	bl	2170 <am_hal_systick_stop>
    am_hal_systick_load(0x00FFFFFF);
    1b70:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    1b74:	f000 fb04 	bl	2180 <am_hal_systick_load>
    am_hal_systick_start();
    1b78:	f000 faf2 	bl	2160 <am_hal_systick_start>

    //
    // Configure our RX pin as a GPIO input with a falling edge interrupt.
    //
    am_hal_gpio_pin_config(AM_BSP_GPIO_BOOTLOADER_UART_RX, AM_HAL_GPIO_INPUT);
    1b7c:	4b3e      	ldr	r3, [pc, #248]	; (1c78 <main+0x258>)
    1b7e:	2273      	movs	r2, #115	; 0x73
    1b80:	601a      	str	r2, [r3, #0]
    1b82:	4a44      	ldr	r2, [pc, #272]	; (1c94 <main+0x274>)
    1b84:	4b43      	ldr	r3, [pc, #268]	; (1c94 <main+0x274>)
    1b86:	681b      	ldr	r3, [r3, #0]
    1b88:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
    1b8c:	6013      	str	r3, [r2, #0]
    1b8e:	4a42      	ldr	r2, [pc, #264]	; (1c98 <main+0x278>)
    1b90:	4b41      	ldr	r3, [pc, #260]	; (1c98 <main+0x278>)
    1b92:	681b      	ldr	r3, [r3, #0]
    1b94:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1b98:	f043 031a 	orr.w	r3, r3, #26
    1b9c:	6013      	str	r3, [r2, #0]
    1b9e:	4b36      	ldr	r3, [pc, #216]	; (1c78 <main+0x258>)
    1ba0:	2200      	movs	r2, #0
    1ba2:	601a      	str	r2, [r3, #0]
    am_hal_gpio_int_polarity_bit_set(AM_BSP_GPIO_BOOTLOADER_UART_RX, AM_HAL_GPIO_FALLING);
    1ba4:	4b34      	ldr	r3, [pc, #208]	; (1c78 <main+0x258>)
    1ba6:	2273      	movs	r2, #115	; 0x73
    1ba8:	601a      	str	r2, [r3, #0]
    1baa:	4a3a      	ldr	r2, [pc, #232]	; (1c94 <main+0x274>)
    1bac:	4b39      	ldr	r3, [pc, #228]	; (1c94 <main+0x274>)
    1bae:	681b      	ldr	r3, [r3, #0]
    1bb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    1bb4:	6013      	str	r3, [r2, #0]
    1bb6:	4b30      	ldr	r3, [pc, #192]	; (1c78 <main+0x258>)
    1bb8:	2200      	movs	r2, #0
    1bba:	601a      	str	r2, [r3, #0]

    am_hal_gpio_int_clear(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BOOTLOADER_UART_RX));
    1bbc:	f04f 0000 	mov.w	r0, #0
    1bc0:	f04f 0110 	mov.w	r1, #16
    1bc4:	f000 f930 	bl	1e28 <am_hal_gpio_int_clear>
    am_hal_gpio_int_enable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BOOTLOADER_UART_RX));
    1bc8:	f04f 0000 	mov.w	r0, #0
    1bcc:	f04f 0110 	mov.w	r1, #16
    1bd0:	f000 f908 	bl	1de4 <am_hal_gpio_int_enable>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_GPIO);
    1bd4:	2019      	movs	r0, #25
    1bd6:	f000 f931 	bl	1e3c <am_hal_interrupt_enable>

    //
    // Enable interrupts so we can receive messages from the boot host.
    //
    am_hal_interrupt_master_enable();
    1bda:	f000 f97f 	bl	1edc <am_hal_interrupt_master_enable>
    while (1)
    {
        //
        // Disable interrupt while we decide whether we're going to sleep.
        //
        uint32_t ui32IntStatus = am_hal_interrupt_master_disable();
    1bde:	f000 f981 	bl	1ee4 <am_hal_interrupt_master_disable>
    1be2:	60f8      	str	r0, [r7, #12]

        if (!g_bUartConfigured)
    1be4:	4b2d      	ldr	r3, [pc, #180]	; (1c9c <main+0x27c>)
    1be6:	781b      	ldrb	r3, [r3, #0]
    1be8:	b2db      	uxtb	r3, r3
    1bea:	f083 0301 	eor.w	r3, r3, #1
    1bee:	b2db      	uxtb	r3, r3
    1bf0:	2b00      	cmp	r3, #0
    1bf2:	d006      	beq.n	1c02 <main+0x1e2>
        {
            // Wait for Baud rate detection
            am_hal_sysctrl_sleep(false);
    1bf4:	2000      	movs	r0, #0
    1bf6:	f000 fa9d 	bl	2134 <am_hal_sysctrl_sleep>
            //
            // Enable interrupts
            //
            am_hal_interrupt_master_set(ui32IntStatus);
    1bfa:	68f8      	ldr	r0, [r7, #12]
    1bfc:	f000 f976 	bl	1eec <am_hal_interrupt_master_set>
    1c00:	e7ed      	b.n	1bde <main+0x1be>
        else
        {
            //
            // Enable interrupts
            //
            am_hal_interrupt_master_set(ui32IntStatus);
    1c02:	68f8      	ldr	r0, [r7, #12]
    1c04:	f000 f972 	bl	1eec <am_hal_interrupt_master_set>
            break;
    1c08:	bf00      	nop
        }
    }
    // ISR has already configured the UART by now
    am_hal_gpio_int_disable(AM_HAL_GPIO_BIT(AM_BSP_GPIO_BOOTLOADER_UART_RX));
    1c0a:	f04f 0000 	mov.w	r0, #0
    1c0e:	f04f 0110 	mov.w	r1, #16
    1c12:	f000 f8f7 	bl	1e04 <am_hal_gpio_int_disable>
    am_hal_interrupt_disable(AM_HAL_INTERRUPT_GPIO);
    1c16:	2019      	movs	r0, #25
    1c18:	f000 f938 	bl	1e8c <am_hal_interrupt_disable>
#endif

    //
    // Make sure the UART RX and TX pins are enabled.
    //
    am_hal_gpio_pin_config(AM_BSP_GPIO_BOOTLOADER_UART_TX, AM_BSP_GPIO_CFG_BOOTLOADER_UART_TX);
    1c1c:	4b16      	ldr	r3, [pc, #88]	; (1c78 <main+0x258>)
    1c1e:	2273      	movs	r2, #115	; 0x73
    1c20:	601a      	str	r2, [r3, #0]
    1c22:	4a1c      	ldr	r2, [pc, #112]	; (1c94 <main+0x274>)
    1c24:	4b1b      	ldr	r3, [pc, #108]	; (1c94 <main+0x274>)
    1c26:	681b      	ldr	r3, [r3, #0]
    1c28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    1c2c:	6013      	str	r3, [r2, #0]
    1c2e:	4a1c      	ldr	r2, [pc, #112]	; (1ca0 <main+0x280>)
    1c30:	4b1b      	ldr	r3, [pc, #108]	; (1ca0 <main+0x280>)
    1c32:	681b      	ldr	r3, [r3, #0]
    1c34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1c3c:	6013      	str	r3, [r2, #0]
    1c3e:	4b0e      	ldr	r3, [pc, #56]	; (1c78 <main+0x258>)
    1c40:	2200      	movs	r2, #0
    1c42:	601a      	str	r2, [r3, #0]
    am_hal_gpio_pin_config(AM_BSP_GPIO_BOOTLOADER_UART_RX, AM_BSP_GPIO_CFG_BOOTLOADER_UART_RX);
    1c44:	4b0c      	ldr	r3, [pc, #48]	; (1c78 <main+0x258>)
    1c46:	2273      	movs	r2, #115	; 0x73
    1c48:	601a      	str	r2, [r3, #0]
    1c4a:	4a12      	ldr	r2, [pc, #72]	; (1c94 <main+0x274>)
    1c4c:	4b11      	ldr	r3, [pc, #68]	; (1c94 <main+0x274>)
    1c4e:	681b      	ldr	r3, [r3, #0]
    1c50:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
    1c54:	6013      	str	r3, [r2, #0]
    1c56:	4a10      	ldr	r2, [pc, #64]	; (1c98 <main+0x278>)
    1c58:	4b0f      	ldr	r3, [pc, #60]	; (1c98 <main+0x278>)
    1c5a:	681b      	ldr	r3, [r3, #0]
    1c5c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c60:	f043 0312 	orr.w	r3, r3, #18
    1c64:	6013      	str	r3, [r2, #0]
    1c66:	4b04      	ldr	r3, [pc, #16]	; (1c78 <main+0x258>)
    1c68:	2200      	movs	r2, #0
    1c6a:	601a      	str	r2, [r3, #0]
    //
    // Enable interrupts so we can receive messages from the boot host.
    //
    am_hal_interrupt_master_enable();
    1c6c:	f000 f936 	bl	1edc <am_hal_interrupt_master_enable>
#endif

    //
    // Loop forever - should never reach here
    //
    while (1)
    1c70:	e7fe      	b.n	1c70 <main+0x250>
    1c72:	bf00      	nop
    1c74:	40010090 	.word	0x40010090
    1c78:	40010060 	.word	0x40010060
    1c7c:	40010040 	.word	0x40010040
    1c80:	40010004 	.word	0x40010004
    1c84:	000019f3 	.word	0x000019f3
    1c88:	10001300 	.word	0x10001300
    1c8c:	100010ad 	.word	0x100010ad
    1c90:	00b6c1ff 	.word	0x00b6c1ff
    1c94:	40010050 	.word	0x40010050
    1c98:	40010024 	.word	0x40010024
    1c9c:	100010ae 	.word	0x100010ae
    1ca0:	40010020 	.word	0x40010020

00001ca4 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    1ca4:	4811      	ldr	r0, [pc, #68]	; (1cec <zero_loop+0x12>)
    1ca6:	4912      	ldr	r1, [pc, #72]	; (1cf0 <zero_loop+0x16>)
    1ca8:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    1caa:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    1cae:	4811      	ldr	r0, [pc, #68]	; (1cf4 <zero_loop+0x1a>)
    1cb0:	6801      	ldr	r1, [r0, #0]
    1cb2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    1cb6:	6001      	str	r1, [r0, #0]
    1cb8:	f3bf 8f4f 	dsb	sy
    1cbc:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    1cc0:	480d      	ldr	r0, [pc, #52]	; (1cf8 <zero_loop+0x1e>)
    1cc2:	490e      	ldr	r1, [pc, #56]	; (1cfc <zero_loop+0x22>)
    1cc4:	4a0e      	ldr	r2, [pc, #56]	; (1d00 <zero_loop+0x26>)

00001cc6 <copy_loop>:
    1cc6:	f850 3b04 	ldr.w	r3, [r0], #4
    1cca:	f841 3b04 	str.w	r3, [r1], #4
    1cce:	4291      	cmp	r1, r2
    1cd0:	dbf9      	blt.n	1cc6 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    1cd2:	480c      	ldr	r0, [pc, #48]	; (1d04 <zero_loop+0x2a>)
    1cd4:	490c      	ldr	r1, [pc, #48]	; (1d08 <zero_loop+0x2e>)
    1cd6:	f04f 0200 	mov.w	r2, #0

00001cda <zero_loop>:
    1cda:	4288      	cmp	r0, r1
    1cdc:	bfb8      	it	lt
    1cde:	f840 2b04 	strlt.w	r2, [r0], #4
    1ce2:	dbfa      	blt.n	1cda <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    1ce4:	f7ff fe9c 	bl	1a20 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    1ce8:	be00      	bkpt	0x0000
}
    1cea:	bf00      	nop
    1cec:	e000ed08 	.word	0xe000ed08
    1cf0:	00000000 	.word	0x00000000
    1cf4:	e000ed88 	.word	0xe000ed88
    1cf8:	0000277c 	.word	0x0000277c
    1cfc:	10001000 	.word	0x10001000
    1d00:	10001084 	.word	0x10001084
    1d04:	10001084 	.word	0x10001084
    1d08:	10001b00 	.word	0x10001b00

00001d0c <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
    1d0c:	b480      	push	{r7}
    1d0e:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    1d10:	e7fe      	b.n	1d10 <am_nmi_isr+0x4>

00001d12 <am_busfault_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_fault_isr(void)
{
    1d12:	b480      	push	{r7}
    1d14:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    1d16:	e7fe      	b.n	1d16 <am_busfault_isr+0x4>

00001d18 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    1d18:	b480      	push	{r7}
    1d1a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    1d1c:	e7fe      	b.n	1d1c <am_adc_isr+0x4>
	...

00001d20 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    1d20:	b580      	push	{r7, lr}
    1d22:	b084      	sub	sp, #16
    1d24:	af00      	add	r7, sp, #0
    1d26:	6078      	str	r0, [r7, #4]
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else
    ui32HFRC = am_hal_clkgen_sysclk_get();
    1d28:	f000 f836 	bl	1d98 <am_hal_clkgen_sysclk_get>
    1d2c:	60f8      	str	r0, [r7, #12]
#endif
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    1d2e:	68fb      	ldr	r3, [r7, #12]
    1d30:	4a07      	ldr	r2, [pc, #28]	; (1d50 <am_util_delay_ms+0x30>)
    1d32:	fba2 2303 	umull	r2, r3, r2, r3
    1d36:	099b      	lsrs	r3, r3, #6
    1d38:	687a      	ldr	r2, [r7, #4]
    1d3a:	fb02 f303 	mul.w	r3, r2, r3
    1d3e:	60bb      	str	r3, [r7, #8]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    1d40:	68b8      	ldr	r0, [r7, #8]
    1d42:	f000 f83f 	bl	1dc4 <am_hal_flash_delay>
}
    1d46:	bf00      	nop
    1d48:	3710      	adds	r7, #16
    1d4a:	46bd      	mov	sp, r7
    1d4c:	bd80      	pop	{r7, pc}
    1d4e:	bf00      	nop
    1d50:	057619f1 	.word	0x057619f1

00001d54 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1d54:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_mcuctrl_bucks_enable();
    1d56:	f000 f9bb 	bl	20d0 <am_hal_mcuctrl_bucks_enable>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    1d5a:	f000 faab 	bl	22b4 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    1d5e:	2001      	movs	r0, #1
    1d60:	f000 f9d2 	bl	2108 <am_hal_rtc_osc_select>

    //
    // Stop the XTAL.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1d64:	2001      	movs	r0, #1
    1d66:	f000 f823 	bl	1db0 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    1d6a:	f000 f9db 	bl	2124 <am_hal_rtc_osc_disable>

    //
    // Disable the bandgap.
    //
    am_hal_mcuctrl_bandgap_disable();
}
    1d6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_mcuctrl_bandgap_disable();
    1d72:	f000 b9a5 	b.w	20c0 <am_hal_mcuctrl_bandgap_disable>
    1d76:	bf00      	nop

00001d78 <am_hal_clkgen_sysclk_select>:
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1d78:	4b05      	ldr	r3, [pc, #20]	; (1d90 <am_hal_clkgen_sysclk_select+0x18>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1d7a:	4906      	ldr	r1, [pc, #24]	; (1d94 <am_hal_clkgen_sysclk_select+0x1c>)
{
    1d7c:	b410      	push	{r4}

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    1d7e:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1d80:	2447      	movs	r4, #71	; 0x47
    1d82:	601c      	str	r4, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1d84:	6008      	str	r0, [r1, #0]
}
    1d86:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(CLKGEN, CLKKEY) = 0;
    1d8a:	601a      	str	r2, [r3, #0]
}
    1d8c:	4770      	bx	lr
    1d8e:	bf00      	nop
    1d90:	40004014 	.word	0x40004014
    1d94:	40004018 	.word	0x40004018

00001d98 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_BFR(CLKGEN, CCTRL, CORESEL);
    1d98:	4b03      	ldr	r3, [pc, #12]	; (1da8 <am_hal_clkgen_sysclk_get+0x10>)
    1d9a:	4a04      	ldr	r2, [pc, #16]	; (1dac <am_hal_clkgen_sysclk_get+0x14>)
    1d9c:	6818      	ldr	r0, [r3, #0]
    1d9e:	f000 0107 	and.w	r1, r0, #7
        case AM_HAL_CLKGEN_SYSCLK_3MHZ:
            return 3000000;
        default:
            return 0xFFFFFFFF;
    }
}
    1da2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    1da6:	4770      	bx	lr
    1da8:	40004018 	.word	0x40004018
    1dac:	000026d8 	.word	0x000026d8

00001db0 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1db0:	0783      	lsls	r3, r0, #30
    1db2:	d003      	beq.n	1dbc <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    1db4:	4b02      	ldr	r3, [pc, #8]	; (1dc0 <am_hal_clkgen_osc_stop+0x10>)
    1db6:	681a      	ldr	r2, [r3, #0]
    1db8:	4310      	orrs	r0, r2
    1dba:	6018      	str	r0, [r3, #0]
    1dbc:	4770      	bx	lr
    1dbe:	bf00      	nop
    1dc0:	4000400c 	.word	0x4000400c

00001dc4 <am_hal_flash_delay>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_flash_delay(uint32_t ui32Iterations)
{
    __asm("    subs    r0, #1\n"
    1dc4:	3801      	subs	r0, #1
    1dc6:	f47f affd 	bne.w	1dc4 <am_hal_flash_delay>
    1dca:	4770      	bx	lr

00001dcc <am_hal_flash_page_erase>:
//*****************************************************************************
int
am_hal_flash_page_erase(uint32_t ui32Value, uint32_t ui32FlashBlk,
                        uint32_t ui32PageNum)
{
    return g_am_hal_flash.am_hal_flash_page_erase(ui32Value, ui32FlashBlk,
    1dcc:	4b00      	ldr	r3, [pc, #0]	; (1dd0 <am_hal_flash_page_erase+0x4>)
    1dce:	4718      	bx	r3
    1dd0:	08000051 	.word	0x08000051

00001dd4 <am_hal_flash_program_main>:
//
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32Value, const uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
    1dd4:	b410      	push	{r4}
    return g_am_hal_flash.am_hal_flash_program_main(ui32Value, pui32Src,
    1dd6:	4c02      	ldr	r4, [pc, #8]	; (1de0 <am_hal_flash_program_main+0xc>)
    1dd8:	46a4      	mov	ip, r4
                                                    pui32Dst, ui32NumWords);
}
    1dda:	f85d 4b04 	ldr.w	r4, [sp], #4
    return g_am_hal_flash.am_hal_flash_program_main(ui32Value, pui32Src,
    1dde:	4760      	bx	ip
    1de0:	08000055 	.word	0x08000055

00001de4 <am_hal_gpio_int_enable>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_enable(uint64_t ui64Interrupt)
{
    1de4:	b410      	push	{r4}
    //
    // Enable the interrupts.
    //
    AM_REG(GPIO, INT1EN) |= (ui64Interrupt >> 32);
    1de6:	4c05      	ldr	r4, [pc, #20]	; (1dfc <am_hal_gpio_int_enable+0x18>)
    AM_REG(GPIO, INT0EN) |= (ui64Interrupt & 0xFFFFFFFF);
    1de8:	4a05      	ldr	r2, [pc, #20]	; (1e00 <am_hal_gpio_int_enable+0x1c>)
    AM_REG(GPIO, INT1EN) |= (ui64Interrupt >> 32);
    1dea:	6823      	ldr	r3, [r4, #0]
    1dec:	4319      	orrs	r1, r3
    1dee:	6021      	str	r1, [r4, #0]
    AM_REG(GPIO, INT0EN) |= (ui64Interrupt & 0xFFFFFFFF);
    1df0:	6811      	ldr	r1, [r2, #0]
}
    1df2:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(GPIO, INT0EN) |= (ui64Interrupt & 0xFFFFFFFF);
    1df6:	4308      	orrs	r0, r1
    1df8:	6010      	str	r0, [r2, #0]
}
    1dfa:	4770      	bx	lr
    1dfc:	40010210 	.word	0x40010210
    1e00:	40010200 	.word	0x40010200

00001e04 <am_hal_gpio_int_disable>:
//! @return None
//
//*****************************************************************************
void
am_hal_gpio_int_disable(uint64_t ui64Interrupt)
{
    1e04:	b410      	push	{r4}
    //
    // Disable the interrupts.
    //
    AM_REG(GPIO, INT1EN) &= ~(ui64Interrupt >> 32);
    1e06:	4c06      	ldr	r4, [pc, #24]	; (1e20 <am_hal_gpio_int_disable+0x1c>)
    AM_REG(GPIO, INT0EN) &= ~(ui64Interrupt & 0xFFFFFFFF);
    1e08:	4a06      	ldr	r2, [pc, #24]	; (1e24 <am_hal_gpio_int_disable+0x20>)
    AM_REG(GPIO, INT1EN) &= ~(ui64Interrupt >> 32);
    1e0a:	6823      	ldr	r3, [r4, #0]
    1e0c:	ea23 0101 	bic.w	r1, r3, r1
    1e10:	6021      	str	r1, [r4, #0]
    AM_REG(GPIO, INT0EN) &= ~(ui64Interrupt & 0xFFFFFFFF);
    1e12:	6814      	ldr	r4, [r2, #0]
    1e14:	ea24 0000 	bic.w	r0, r4, r0
    1e18:	6010      	str	r0, [r2, #0]
}
    1e1a:	f85d 4b04 	ldr.w	r4, [sp], #4
    1e1e:	4770      	bx	lr
    1e20:	40010210 	.word	0x40010210
    1e24:	40010200 	.word	0x40010200

00001e28 <am_hal_gpio_int_clear>:
am_hal_gpio_int_clear(uint64_t ui64Interrupt)
{
    //
    // Clear the interrupts.
    //
    AM_REG(GPIO, INT1CLR) = (ui64Interrupt >> 32);
    1e28:	4a02      	ldr	r2, [pc, #8]	; (1e34 <am_hal_gpio_int_clear+0xc>)
    AM_REG(GPIO, INT0CLR) = (ui64Interrupt & 0xFFFFFFFF);
    1e2a:	4b03      	ldr	r3, [pc, #12]	; (1e38 <am_hal_gpio_int_clear+0x10>)
    AM_REG(GPIO, INT1CLR) = (ui64Interrupt >> 32);
    1e2c:	6011      	str	r1, [r2, #0]
    AM_REG(GPIO, INT0CLR) = (ui64Interrupt & 0xFFFFFFFF);
    1e2e:	6018      	str	r0, [r3, #0]
    1e30:	4770      	bx	lr
    1e32:	bf00      	nop
    1e34:	40010218 	.word	0x40010218
    1e38:	40010208 	.word	0x40010208

00001e3c <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    1e3c:	280f      	cmp	r0, #15
    1e3e:	d80b      	bhi.n	1e58 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    1e40:	2805      	cmp	r0, #5
    1e42:	d013      	beq.n	1e6c <am_hal_interrupt_enable+0x30>
    1e44:	2806      	cmp	r0, #6
    1e46:	d017      	beq.n	1e78 <am_hal_interrupt_enable+0x3c>
    1e48:	2804      	cmp	r0, #4
    1e4a:	d104      	bne.n	1e56 <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    1e4c:	4a0d      	ldr	r2, [pc, #52]	; (1e84 <am_hal_interrupt_enable+0x48>)
    1e4e:	6813      	ldr	r3, [r2, #0]
    1e50:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    1e54:	6010      	str	r0, [r2, #0]
    1e56:	4770      	bx	lr
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    1e58:	f1a0 0310 	sub.w	r3, r0, #16
    1e5c:	f003 0c1f 	and.w	ip, r3, #31
    1e60:	2001      	movs	r0, #1
    1e62:	4909      	ldr	r1, [pc, #36]	; (1e88 <am_hal_interrupt_enable+0x4c>)
    1e64:	fa00 f20c 	lsl.w	r2, r0, ip
    1e68:	600a      	str	r2, [r1, #0]
    1e6a:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    1e6c:	4805      	ldr	r0, [pc, #20]	; (1e84 <am_hal_interrupt_enable+0x48>)
    1e6e:	6801      	ldr	r1, [r0, #0]
    1e70:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    1e74:	6002      	str	r2, [r0, #0]
            break;
    1e76:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    1e78:	4902      	ldr	r1, [pc, #8]	; (1e84 <am_hal_interrupt_enable+0x48>)
    1e7a:	680a      	ldr	r2, [r1, #0]
    1e7c:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    1e80:	600b      	str	r3, [r1, #0]
            break;
    1e82:	4770      	bx	lr
    1e84:	e000ed24 	.word	0xe000ed24
    1e88:	e000e100 	.word	0xe000e100

00001e8c <am_hal_interrupt_disable>:
am_hal_interrupt_disable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    1e8c:	280f      	cmp	r0, #15
    1e8e:	d80b      	bhi.n	1ea8 <am_hal_interrupt_disable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    1e90:	2805      	cmp	r0, #5
    1e92:	d013      	beq.n	1ebc <am_hal_interrupt_disable+0x30>
    1e94:	2806      	cmp	r0, #6
    1e96:	d017      	beq.n	1ec8 <am_hal_interrupt_disable+0x3c>
    1e98:	2804      	cmp	r0, #4
    1e9a:	d104      	bne.n	1ea6 <am_hal_interrupt_disable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 0);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 0);
    1e9c:	4a0d      	ldr	r2, [pc, #52]	; (1ed4 <am_hal_interrupt_disable+0x48>)
    1e9e:	6813      	ldr	r3, [r2, #0]
    1ea0:	f423 3080 	bic.w	r0, r3, #65536	; 0x10000
    1ea4:	6010      	str	r0, [r2, #0]
    1ea6:	4770      	bx	lr
        AM_REG(NVIC, ICER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    1ea8:	f1a0 0310 	sub.w	r3, r0, #16
    1eac:	f003 0c1f 	and.w	ip, r3, #31
    1eb0:	2001      	movs	r0, #1
    1eb2:	4909      	ldr	r1, [pc, #36]	; (1ed8 <am_hal_interrupt_disable+0x4c>)
    1eb4:	fa00 f20c 	lsl.w	r2, r0, ip
    1eb8:	600a      	str	r2, [r1, #0]
    1eba:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 0);
    1ebc:	4805      	ldr	r0, [pc, #20]	; (1ed4 <am_hal_interrupt_disable+0x48>)
    1ebe:	6801      	ldr	r1, [r0, #0]
    1ec0:	f421 3200 	bic.w	r2, r1, #131072	; 0x20000
    1ec4:	6002      	str	r2, [r0, #0]
            break;
    1ec6:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 0);
    1ec8:	4902      	ldr	r1, [pc, #8]	; (1ed4 <am_hal_interrupt_disable+0x48>)
    1eca:	680a      	ldr	r2, [r1, #0]
    1ecc:	f422 2380 	bic.w	r3, r2, #262144	; 0x40000
    1ed0:	600b      	str	r3, [r1, #0]
            break;
    1ed2:	4770      	bx	lr
    1ed4:	e000ed24 	.word	0xe000ed24
    1ed8:	e000e180 	.word	0xe000e180

00001edc <am_hal_interrupt_master_enable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1edc:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    1ee0:	b662      	cpsie	i
    __asm("    bx lr");
    1ee2:	4770      	bx	lr

00001ee4 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1ee4:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    1ee8:	b672      	cpsid	i
    __asm("    bx lr");
    1eea:	4770      	bx	lr

00001eec <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    1eec:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    1ef0:	4770      	bx	lr
    1ef2:	bf00      	nop

00001ef4 <am_hal_ios_config>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ios_config(am_hal_ios_config_t *psConfig)
{
    1ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    //
    // Record the FIFO parameters for later use.
    //
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    1ef6:	68c1      	ldr	r1, [r0, #12]
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    1ef8:	6883      	ldr	r3, [r0, #8]
    g_ui32HwFifoSize = g_pui8FIFOEnd - g_pui8FIFOBase;
    g_ui32FifoBaseOffset = psConfig->ui32FIFOBase;
    1efa:	4a1d      	ldr	r2, [pc, #116]	; (1f70 <am_hal_ios_config+0x7c>)
    g_ui32HwFifoSize = g_pui8FIFOEnd - g_pui8FIFOBase;
    1efc:	4f1d      	ldr	r7, [pc, #116]	; (1f74 <am_hal_ios_config+0x80>)
    g_ui32FifoBaseOffset = psConfig->ui32FIFOBase;
    1efe:	6013      	str	r3, [r2, #0]
{
    1f00:	4604      	mov	r4, r0
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    1f02:	481d      	ldr	r0, [pc, #116]	; (1f78 <am_hal_ios_config+0x84>)
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    1f04:	4e1d      	ldr	r6, [pc, #116]	; (1f7c <am_hal_ios_config+0x88>)
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    1f06:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    1f0a:	f101 45a0 	add.w	r5, r1, #1342177280	; 0x50000000
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    1f0e:	6002      	str	r2, [r0, #0]
    g_ui32HwFifoSize = g_pui8FIFOEnd - g_pui8FIFOBase;
    1f10:	1aa8      	subs	r0, r5, r2
    1f12:	7038      	strb	r0, [r7, #0]
    AM_REGn(IOSLAVE, ui32Module, CFG) &= ~(AM_REG_IOSLAVE_CFG_IFCEN(1));
    1f14:	4f1a      	ldr	r7, [pc, #104]	; (1f80 <am_hal_ios_config+0x8c>)

    //
    // Caluclate the value for the IO Slave FIFO configuration register.
    //
    ui32LRAMConfig = AM_REG_IOSLAVE_FIFOCFG_ROBASE(psConfig->ui32ROBase >> 3);
    1f16:	6862      	ldr	r2, [r4, #4]
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    1f18:	6035      	str	r5, [r6, #0]
    AM_REGn(IOSLAVE, ui32Module, CFG) &= ~(AM_REG_IOSLAVE_CFG_IFCEN(1));
    1f1a:	683d      	ldr	r5, [r7, #0]
    AM_REG(IOSLAVE, CFG) = psConfig->ui32InterfaceSelect;

    //
    // Write the FIFO configuration register to set the memory map for the LRAM.
    //
    AM_REG(IOSLAVE, FIFOCFG) = ui32LRAMConfig;
    1f1c:	4e19      	ldr	r6, [pc, #100]	; (1f84 <am_hal_ios_config+0x90>)
    ui32LRAMConfig = AM_REG_IOSLAVE_FIFOCFG_ROBASE(psConfig->ui32ROBase >> 3);
    1f1e:	0550      	lsls	r0, r2, #21
    ui32LRAMConfig |= AM_REG_IOSLAVE_FIFOCFG_FIFOMAX(psConfig->ui32RAMBase >> 3);
    1f20:	0149      	lsls	r1, r1, #5
    1f22:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
    ui32LRAMConfig = AM_REG_IOSLAVE_FIFOCFG_ROBASE(psConfig->ui32ROBase >> 3);
    1f26:	f000 527c 	and.w	r2, r0, #1056964608	; 0x3f000000
    AM_REGn(IOSLAVE, ui32Module, CFG) &= ~(AM_REG_IOSLAVE_CFG_IFCEN(1));
    1f2a:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
    1f2e:	603d      	str	r5, [r7, #0]
    1f30:	430a      	orrs	r2, r1
    ui32LRAMConfig |= AM_REG_IOSLAVE_FIFOCFG_FIFOBASE(psConfig->ui32FIFOBase >> 3);
    1f32:	f3c3 03c4 	ubfx	r3, r3, #3, #5
    AM_REG(IOSLAVE, CFG) = psConfig->ui32InterfaceSelect;
    1f36:	6820      	ldr	r0, [r4, #0]
    1f38:	6038      	str	r0, [r7, #0]
    ui32LRAMConfig |= AM_REG_IOSLAVE_FIFOCFG_FIFOMAX(psConfig->ui32RAMBase >> 3);
    1f3a:	4313      	orrs	r3, r2
    AM_REG(IOSLAVE, FIFOCFG) = ui32LRAMConfig;
    1f3c:	6033      	str	r3, [r6, #0]
    AM_REGn(IOSLAVE, ui32Module, CFG) |= AM_REG_IOSLAVE_CFG_IFCEN(1);
    1f3e:	6839      	ldr	r1, [r7, #0]
    1f40:	f041 4200 	orr.w	r2, r1, #2147483648	; 0x80000000
    1f44:	603a      	str	r2, [r7, #0]
    am_hal_ios_enable(0);

    //
    // Initialize the FIFO pointer to the beginning of the FIFO section.
    //
    am_hal_ios_fifo_ptr_set(psConfig->ui32FIFOBase);
    1f46:	68a5      	ldr	r5, [r4, #8]
    uint32_t ui32Primask;

    //
    // Start a critical section for thread safety.
    //
    ui32Primask = am_hal_interrupt_master_disable();
    1f48:	f7ff ffcc 	bl	1ee4 <am_hal_interrupt_master_disable>

    //
    // Set the FIFO Update bit.
    //
    AM_REG(IOSLAVE, FUPD) = 0x1;
    1f4c:	4b0e      	ldr	r3, [pc, #56]	; (1f88 <am_hal_ios_config+0x94>)
    AM_REG(IOSLAVE, FUPD) = 0x0;

    //
    // Set the global FIFO-pointer tracking variable.
    //
    g_pui8FIFOPtr = (uint8_t *) (REG_IOSLAVE_BASEADDR + ui32Offset);
    1f4e:	4a0f      	ldr	r2, [pc, #60]	; (1f8c <am_hal_ios_config+0x98>)
    AM_REG(IOSLAVE, FUPD) = 0x0;
    1f50:	2100      	movs	r1, #0
    AM_REG(IOSLAVE, FUPD) = 0x1;
    1f52:	2701      	movs	r7, #1
    1f54:	601f      	str	r7, [r3, #0]
    AM_REG(IOSLAVE, FIFOPTR) = ui32Offset;
    1f56:	f846 5c04 	str.w	r5, [r6, #-4]
    AM_REG(IOSLAVE, FUPD) = 0x0;
    1f5a:	6019      	str	r1, [r3, #0]
    g_pui8FIFOPtr = (uint8_t *) (REG_IOSLAVE_BASEADDR + ui32Offset);
    1f5c:	f105 46a0 	add.w	r6, r5, #1342177280	; 0x50000000
    1f60:	6016      	str	r6, [r2, #0]

    //
    // End the critical section.
    //
    am_hal_interrupt_master_set(ui32Primask);
    1f62:	f7ff ffc3 	bl	1eec <am_hal_interrupt_master_set>
    AM_REG(IOSLAVE, FIFOTHR) = psConfig->ui32FIFOThreshold;
    1f66:	480a      	ldr	r0, [pc, #40]	; (1f90 <am_hal_ios_config+0x9c>)
    1f68:	6924      	ldr	r4, [r4, #16]
    1f6a:	6004      	str	r4, [r0, #0]
    1f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f6e:	bf00      	nop
    1f70:	100010b0 	.word	0x100010b0
    1f74:	100010b4 	.word	0x100010b4
    1f78:	10001078 	.word	0x10001078
    1f7c:	1000107c 	.word	0x1000107c
    1f80:	50000118 	.word	0x50000118
    1f84:	50000104 	.word	0x50000104
    1f88:	5000010c 	.word	0x5000010c
    1f8c:	10001080 	.word	0x10001080
    1f90:	50000108 	.word	0x50000108

00001f94 <am_hal_ios_access_int_enable>:
    AM_REG(IOSLAVE, REGACCINTEN) |= ui32Interrupt;
    1f94:	4a02      	ldr	r2, [pc, #8]	; (1fa0 <am_hal_ios_access_int_enable+0xc>)
    1f96:	6813      	ldr	r3, [r2, #0]
    1f98:	4318      	orrs	r0, r3
    1f9a:	6010      	str	r0, [r2, #0]
    1f9c:	4770      	bx	lr
    1f9e:	bf00      	nop
    1fa0:	50000210 	.word	0x50000210

00001fa4 <am_hal_ios_access_int_clear>:
    AM_REG(IOSLAVE, REGACCINTCLR) = ui32Interrupt;
    1fa4:	4b01      	ldr	r3, [pc, #4]	; (1fac <am_hal_ios_access_int_clear+0x8>)
    1fa6:	6018      	str	r0, [r3, #0]
    1fa8:	4770      	bx	lr
    1faa:	bf00      	nop
    1fac:	50000218 	.word	0x50000218

00001fb0 <am_hal_ios_access_int_status_get>:
    if (bEnabledOnly)
    1fb0:	b910      	cbnz	r0, 1fb8 <am_hal_ios_access_int_status_get+0x8>
        return AM_REG(IOSLAVE, REGACCINTSTAT);
    1fb2:	4b04      	ldr	r3, [pc, #16]	; (1fc4 <am_hal_ios_access_int_status_get+0x14>)
    1fb4:	6818      	ldr	r0, [r3, #0]
}
    1fb6:	4770      	bx	lr
        uint32_t u32RetVal = AM_REG(IOSLAVE, REGACCINTSTAT);
    1fb8:	4a02      	ldr	r2, [pc, #8]	; (1fc4 <am_hal_ios_access_int_status_get+0x14>)
        return u32RetVal & AM_REG(IOSLAVE, REGACCINTEN);
    1fba:	4903      	ldr	r1, [pc, #12]	; (1fc8 <am_hal_ios_access_int_status_get+0x18>)
        uint32_t u32RetVal = AM_REG(IOSLAVE, REGACCINTSTAT);
    1fbc:	6810      	ldr	r0, [r2, #0]
        return u32RetVal & AM_REG(IOSLAVE, REGACCINTEN);
    1fbe:	680b      	ldr	r3, [r1, #0]
    1fc0:	4018      	ands	r0, r3
    1fc2:	4770      	bx	lr
    1fc4:	50000214 	.word	0x50000214
    1fc8:	50000210 	.word	0x50000210

00001fcc <am_hal_ios_int_enable>:
    AM_REG(IOSLAVE, INTEN) |= ui32Interrupt;
    1fcc:	4a02      	ldr	r2, [pc, #8]	; (1fd8 <am_hal_ios_int_enable+0xc>)
    1fce:	6813      	ldr	r3, [r2, #0]
    1fd0:	4318      	orrs	r0, r3
    1fd2:	6010      	str	r0, [r2, #0]
    1fd4:	4770      	bx	lr
    1fd6:	bf00      	nop
    1fd8:	50000200 	.word	0x50000200

00001fdc <am_hal_ios_int_clear>:
    AM_REG(IOSLAVE, INTCLR) = ui32Interrupt;
    1fdc:	4b01      	ldr	r3, [pc, #4]	; (1fe4 <am_hal_ios_int_clear+0x8>)
    1fde:	6018      	str	r0, [r3, #0]
    1fe0:	4770      	bx	lr
    1fe2:	bf00      	nop
    1fe4:	50000208 	.word	0x50000208

00001fe8 <am_hal_mcuctrl_device_info_get>:
am_hal_mcuctrl_device_info_get(am_hal_mcuctrl_device_t *psDevice)
{
    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    1fe8:	4b29      	ldr	r3, [pc, #164]	; (2090 <am_hal_mcuctrl_device_info_get+0xa8>)
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);

    //
    // Read the Chip ID1.
    //
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    1fea:	492a      	ldr	r1, [pc, #168]	; (2094 <am_hal_mcuctrl_device_info_get+0xac>)

    //
    // Read the Chip Revision.
    //
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    1fec:	4a2a      	ldr	r2, [pc, #168]	; (2098 <am_hal_mcuctrl_device_info_get+0xb0>)
{
    1fee:	b4f0      	push	{r4, r5, r6, r7}
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    1ff0:	681f      	ldr	r7, [r3, #0]
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    1ff2:	4d2a      	ldr	r5, [pc, #168]	; (209c <am_hal_mcuctrl_device_info_get+0xb4>)
    psDevice->ui32ChipPN = AM_REG(MCUCTRL, CHIP_INFO);
    1ff4:	6007      	str	r7, [r0, #0]
    psDevice->ui32ChipID0 = AM_REG(MCUCTRL, CHIPID0);
    1ff6:	682d      	ldr	r5, [r5, #0]
    1ff8:	6045      	str	r5, [r0, #4]
    psDevice->ui32ChipID1 = AM_REG(MCUCTRL, CHIPID1);
    1ffa:	680f      	ldr	r7, [r1, #0]
    1ffc:	6087      	str	r7, [r0, #8]
    psDevice->ui32ChipRev = AM_REG(MCUCTRL, CHIPREV);
    1ffe:	6811      	ldr	r1, [r2, #0]
    2000:	60c1      	str	r1, [r0, #12]

    //
    // Qualified from Part Number.
    //
    psDevice->ui32Qualified = AM_BFR(MCUCTRL, CHIP_INFO, QUAL);
    2002:	681a      	ldr	r2, [r3, #0]

    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
        am_hal_mcuctrl_flash_size[AM_BFR(MCUCTRL, CHIP_INFO, FLASH)];
    2004:	4e26      	ldr	r6, [pc, #152]	; (20a0 <am_hal_mcuctrl_device_info_get+0xb8>)

    //
    // SRAM size from Part Number.
    //
    psDevice->ui32SRAMSize =
        am_hal_mcuctrl_sram_size[AM_BFR(MCUCTRL, CHIP_INFO, RAM)];
    2006:	4c27      	ldr	r4, [pc, #156]	; (20a4 <am_hal_mcuctrl_device_info_get+0xbc>)
    // Bits [7:4] are 0xE for Apollo, 0xD for Apollo2.
    // Bits [3:0] are defined differently for Apollo and Apollo2.
    //   For Apollo, the low nibble is 0x0.
    //   For Apollo2, the low nibble indicates flash and SRAM size.
    //
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    2008:	4d27      	ldr	r5, [pc, #156]	; (20a8 <am_hal_mcuctrl_device_info_get+0xc0>)
    psDevice->ui32JedecPN |= (AM_BFR(JEDEC, PID1, PNH4) << 8);
    200a:	4f28      	ldr	r7, [pc, #160]	; (20ac <am_hal_mcuctrl_device_info_get+0xc4>)
    //
    // JEPID is the JEP-106 Manufacturer ID Code, which is assigned to Ambiq as
    //  0x1B, with parity bit is 0x9B.  It is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecJEPID  = (AM_BFR(JEDEC, PID1, JEPIDL) << 0);
    psDevice->ui32JedecJEPID |= (AM_BFR(JEDEC, PID2, JEPIDH) << 4);
    200c:	4928      	ldr	r1, [pc, #160]	; (20b0 <am_hal_mcuctrl_device_info_get+0xc8>)
    psDevice->ui32Qualified = AM_BFR(MCUCTRL, CHIP_INFO, QUAL);
    200e:	f002 0201 	and.w	r2, r2, #1
    2012:	6142      	str	r2, [r0, #20]
        am_hal_mcuctrl_flash_size[AM_BFR(MCUCTRL, CHIP_INFO, FLASH)];
    2014:	681a      	ldr	r2, [r3, #0]
    2016:	f3c2 5c03 	ubfx	ip, r2, #20, #4

    //
    // Let's get the Coresight ID (32-bits across 4 registers)
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    201a:	4a26      	ldr	r2, [pc, #152]	; (20b4 <am_hal_mcuctrl_device_info_get+0xcc>)
    psDevice->ui32FlashSize =
    201c:	f856 602c 	ldr.w	r6, [r6, ip, lsl #2]
    2020:	6186      	str	r6, [r0, #24]
        am_hal_mcuctrl_sram_size[AM_BFR(MCUCTRL, CHIP_INFO, RAM)];
    2022:	681b      	ldr	r3, [r3, #0]
    psDevice->ui32JedecCHIPREV |= (AM_BFR(JEDEC, PID3, CHIPREVL4) << 0);
    2024:	4e24      	ldr	r6, [pc, #144]	; (20b8 <am_hal_mcuctrl_device_info_get+0xd0>)
        am_hal_mcuctrl_sram_size[AM_BFR(MCUCTRL, CHIP_INFO, RAM)];
    2026:	f3c3 4c03 	ubfx	ip, r3, #16, #4
    psDevice->ui32SRAMSize =
    202a:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
    202e:	61c4      	str	r4, [r0, #28]
    psDevice->ui32JedecPN  = (AM_BFR(JEDEC, PID0, PNL8) << 0);
    2030:	682b      	ldr	r3, [r5, #0]
    2032:	b2dc      	uxtb	r4, r3
    2034:	6204      	str	r4, [r0, #32]
    psDevice->ui32JedecPN |= (AM_BFR(JEDEC, PID1, PNH4) << 8);
    2036:	683b      	ldr	r3, [r7, #0]
    2038:	021b      	lsls	r3, r3, #8
    203a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    203e:	4323      	orrs	r3, r4
    2040:	6203      	str	r3, [r0, #32]
    psDevice->ui32JedecJEPID  = (AM_BFR(JEDEC, PID1, JEPIDL) << 0);
    2042:	683f      	ldr	r7, [r7, #0]
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID2, CID) << 16);
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID1, CID) <<  8);
    2044:	4c1d      	ldr	r4, [pc, #116]	; (20bc <am_hal_mcuctrl_device_info_get+0xd4>)
    psDevice->ui32JedecJEPID  = (AM_BFR(JEDEC, PID1, JEPIDL) << 0);
    2046:	f3c7 1703 	ubfx	r7, r7, #4, #4
    204a:	6247      	str	r7, [r0, #36]	; 0x24
    psDevice->ui32JedecJEPID |= (AM_BFR(JEDEC, PID2, JEPIDH) << 4);
    204c:	680b      	ldr	r3, [r1, #0]
    204e:	011b      	lsls	r3, r3, #4
    2050:	b2db      	uxtb	r3, r3
    2052:	433b      	orrs	r3, r7
    2054:	6243      	str	r3, [r0, #36]	; 0x24
    psDevice->ui32JedecCHIPREV  = (AM_BFR(JEDEC, PID2, CHIPREVH4) << 4);
    2056:	680f      	ldr	r7, [r1, #0]
    2058:	f007 07f0 	and.w	r7, r7, #240	; 0xf0
    205c:	6287      	str	r7, [r0, #40]	; 0x28
    psDevice->ui32JedecCHIPREV |= (AM_BFR(JEDEC, PID3, CHIPREVL4) << 0);
    205e:	6836      	ldr	r6, [r6, #0]
    2060:	f3c6 1303 	ubfx	r3, r6, #4, #4
    2064:	433b      	orrs	r3, r7
    2066:	6283      	str	r3, [r0, #40]	; 0x28
    psDevice->ui32JedecCID  = (AM_BFR(JEDEC, CID3, CID) << 24);
    2068:	6812      	ldr	r2, [r2, #0]
    206a:	0617      	lsls	r7, r2, #24
    206c:	62c7      	str	r7, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID2, CID) << 16);
    206e:	69ae      	ldr	r6, [r5, #24]
    2070:	0435      	lsls	r5, r6, #16
    2072:	f405 037f 	and.w	r3, r5, #16711680	; 0xff0000
    2076:	431f      	orrs	r7, r3
    2078:	62c7      	str	r7, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID1, CID) <<  8);
    207a:	6824      	ldr	r4, [r4, #0]
    207c:	0222      	lsls	r2, r4, #8
    207e:	b296      	uxth	r6, r2
    2080:	433e      	orrs	r6, r7
    2082:	62c6      	str	r6, [r0, #44]	; 0x2c
    psDevice->ui32JedecCID |= (AM_BFR(JEDEC, CID0, CID) <<  0);
    2084:	688f      	ldr	r7, [r1, #8]
    2086:	b2f9      	uxtb	r1, r7
    2088:	430e      	orrs	r6, r1
    208a:	62c6      	str	r6, [r0, #44]	; 0x2c
}
    208c:	bcf0      	pop	{r4, r5, r6, r7}
    208e:	4770      	bx	lr
    2090:	40020000 	.word	0x40020000
    2094:	40020008 	.word	0x40020008
    2098:	4002000c 	.word	0x4002000c
    209c:	40020004 	.word	0x40020004
    20a0:	000026fc 	.word	0x000026fc
    20a4:	0000273c 	.word	0x0000273c
    20a8:	f0000fe0 	.word	0xf0000fe0
    20ac:	f0000fe4 	.word	0xf0000fe4
    20b0:	f0000fe8 	.word	0xf0000fe8
    20b4:	f0000ffc 	.word	0xf0000ffc
    20b8:	f0000fec 	.word	0xf0000fec
    20bc:	f0000ff4 	.word	0xf0000ff4

000020c0 <am_hal_mcuctrl_bandgap_disable>:
am_hal_mcuctrl_bandgap_disable(void)
{
    //
    // Disable the Bandgap in the MCUCTRL.
    //
    AM_REG(MCUCTRL, BANDGAPEN) = ~AM_REG_MCUCTRL_BANDGAPEN_BGPEN_M;
    20c0:	4b02      	ldr	r3, [pc, #8]	; (20cc <am_hal_mcuctrl_bandgap_disable+0xc>)
    20c2:	f06f 0201 	mvn.w	r2, #1
    20c6:	601a      	str	r2, [r3, #0]
    20c8:	4770      	bx	lr
    20ca:	bf00      	nop
    20cc:	400200fc 	.word	0x400200fc

000020d0 <am_hal_mcuctrl_bucks_enable>:
am_hal_mcuctrl_bucks_enable(void)
{
    //
    // Enable the core buck converter in the MCUCTRL.
    //
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    20d0:	4b08      	ldr	r3, [pc, #32]	; (20f4 <am_hal_mcuctrl_bucks_enable+0x24>)
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Poll until core buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    20d2:	4a09      	ldr	r2, [pc, #36]	; (20f8 <am_hal_mcuctrl_bucks_enable+0x28>)
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    20d4:	6819      	ldr	r1, [r3, #0]
    20d6:	f041 0002 	orr.w	r0, r1, #2
    20da:	6018      	str	r0, [r3, #0]
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    20dc:	6819      	ldr	r1, [r3, #0]
    20de:	f041 0001 	orr.w	r0, r1, #1
    20e2:	6018      	str	r0, [r3, #0]
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    20e4:	6813      	ldr	r3, [r2, #0]
    20e6:	0799      	lsls	r1, r3, #30
    20e8:	d5fc      	bpl.n	20e4 <am_hal_mcuctrl_bucks_enable+0x14>

    //
    // Poll until SRAM buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, MEMBUCKON) );
    20ea:	4a03      	ldr	r2, [pc, #12]	; (20f8 <am_hal_mcuctrl_bucks_enable+0x28>)
    20ec:	6811      	ldr	r1, [r2, #0]
    20ee:	07cb      	lsls	r3, r1, #31
    20f0:	d5fc      	bpl.n	20ec <am_hal_mcuctrl_bucks_enable+0x1c>
}
    20f2:	4770      	bx	lr
    20f4:	40020010 	.word	0x40020010
    20f8:	40020014 	.word	0x40020014

000020fc <am_hal_reset_poi>:
void am_hal_reset_poi(void)
{
    //
    // Write the POI key to the software POI register.
    //
    AM_REG(RSTGEN, SWPOI) =
    20fc:	4b01      	ldr	r3, [pc, #4]	; (2104 <am_hal_reset_poi+0x8>)
    20fe:	221b      	movs	r2, #27
    2100:	601a      	str	r2, [r3, #0]
    2102:	4770      	bx	lr
    2104:	40000004 	.word	0x40000004

00002108 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    2108:	4a05      	ldr	r2, [pc, #20]	; (2120 <am_hal_rtc_osc_select+0x18>)
    210a:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    210c:	b918      	cbnz	r0, 2116 <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    210e:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    2112:	6010      	str	r0, [r2, #0]
    2114:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    2116:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    211a:	6011      	str	r1, [r2, #0]
    211c:	4770      	bx	lr
    211e:	bf00      	nop
    2120:	4000400c 	.word	0x4000400c

00002124 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_BFW(RTC, RTCCTL, RSTOP, 1);
    2124:	4a02      	ldr	r2, [pc, #8]	; (2130 <am_hal_rtc_osc_disable+0xc>)
    2126:	6813      	ldr	r3, [r2, #0]
    2128:	f043 0010 	orr.w	r0, r3, #16
    212c:	6010      	str	r0, [r2, #0]
    212e:	4770      	bx	lr
    2130:	40004050 	.word	0x40004050

00002134 <am_hal_sysctrl_sleep>:
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    2134:	4a08      	ldr	r2, [pc, #32]	; (2158 <am_hal_sysctrl_sleep+0x24>)
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    2136:	b118      	cbz	r0, 2140 <am_hal_sysctrl_sleep+0xc>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    2138:	4b08      	ldr	r3, [pc, #32]	; (215c <am_hal_sysctrl_sleep+0x28>)
    213a:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    213c:	07c3      	lsls	r3, r0, #31
    213e:	d505      	bpl.n	214c <am_hal_sysctrl_sleep+0x18>
    }
    else
    {
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    2140:	6811      	ldr	r1, [r2, #0]
    2142:	f021 0304 	bic.w	r3, r1, #4
    2146:	6013      	str	r3, [r2, #0]
    }

    //
    // Go to sleep.
    //
    AM_ASM_WFI;
    2148:	bf30      	wfi
    214a:	4770      	bx	lr
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    214c:	6810      	ldr	r0, [r2, #0]
    214e:	f040 0104 	orr.w	r1, r0, #4
    2152:	6011      	str	r1, [r2, #0]
    AM_ASM_WFI;
    2154:	bf30      	wfi
    2156:	4770      	bx	lr
    2158:	e000ed10 	.word	0xe000ed10
    215c:	40020250 	.word	0x40020250

00002160 <am_hal_systick_start>:
am_hal_systick_start(void)
{
    //
    // Start the systick timer.
    //
    AM_REG(SYSTICK, SYSTCSR) |= AM_REG_SYSTICK_SYSTCSR_ENABLE_M;
    2160:	4a02      	ldr	r2, [pc, #8]	; (216c <am_hal_systick_start+0xc>)
    2162:	6813      	ldr	r3, [r2, #0]
    2164:	f043 0001 	orr.w	r0, r3, #1
    2168:	6010      	str	r0, [r2, #0]
    216a:	4770      	bx	lr
    216c:	e000e010 	.word	0xe000e010

00002170 <am_hal_systick_stop>:
am_hal_systick_stop(void)
{
    //
    // Stop the systick timer.
    //
    AM_REG(SYSTICK, SYSTCSR) &= ~AM_REG_SYSTICK_SYSTCSR_ENABLE_M;
    2170:	4a02      	ldr	r2, [pc, #8]	; (217c <am_hal_systick_stop+0xc>)
    2172:	6813      	ldr	r3, [r2, #0]
    2174:	f023 0001 	bic.w	r0, r3, #1
    2178:	6010      	str	r0, [r2, #0]
    217a:	4770      	bx	lr
    217c:	e000e010 	.word	0xe000e010

00002180 <am_hal_systick_load>:
am_hal_systick_load(uint32_t ui32LoadVal)
{
    //
    // Write the reload register.
    //
    AM_REG(SYSTICK, SYSTRVR) = ui32LoadVal;
    2180:	4b01      	ldr	r3, [pc, #4]	; (2188 <am_hal_systick_load+0x8>)
    2182:	6018      	str	r0, [r3, #0]
    2184:	4770      	bx	lr
    2186:	bf00      	nop
    2188:	e000e014 	.word	0xe000e014

0000218c <am_hal_systick_count>:
am_hal_systick_count(void)
{
    //
    // Return the current systick timer count value.
    //
    return AM_REG(SYSTICK, SYSTCVR);
    218c:	4b01      	ldr	r3, [pc, #4]	; (2194 <am_hal_systick_count+0x8>)
    218e:	6818      	ldr	r0, [r3, #0]
}
    2190:	4770      	bx	lr
    2192:	bf00      	nop
    2194:	e000e018 	.word	0xe000e018

00002198 <am_hal_uart_config>:
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    2198:	b570      	push	{r4, r5, r6, lr}
    219a:	460c      	mov	r4, r1
    uint32_t ui32ConfigVal = 0;

    //
    // Configure the Baudrate.
    //
    config_baudrate(0, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());
    219c:	680d      	ldr	r5, [r1, #0]
    219e:	f7ff fdfb 	bl	1d98 <am_hal_clkgen_sysclk_get>
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    21a2:	0129      	lsls	r1, r5, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    21a4:	fbb0 f2f1 	udiv	r2, r0, r1
    if ( ui32IntegerDivisor == 0 )
    21a8:	b30a      	cbz	r2, 21ee <am_hal_uart_config+0x56>
    AM_REGn(UART, 0, IBRD) = ui32IntegerDivisor;
    21aa:	4d11      	ldr	r5, [pc, #68]	; (21f0 <am_hal_uart_config+0x58>)
    AM_REGn(UART, 0, FBRD) = ui32FractionDivisor;
    21ac:	4e11      	ldr	r6, [pc, #68]	; (21f4 <am_hal_uart_config+0x5c>)
    AM_REGn(UART, 0, IBRD) = ui32IntegerDivisor;
    21ae:	602a      	str	r2, [r5, #0]
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    21b0:	0183      	lsls	r3, r0, #6
    21b2:	fbb3 f0f1 	udiv	r0, r3, r1
    21b6:	eba0 1382 	sub.w	r3, r0, r2, lsl #6
    AM_REGn(UART, 0, IBRD) = ui32IntegerDivisor;
    21ba:	602a      	str	r2, [r5, #0]
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    21bc:	490e      	ldr	r1, [pc, #56]	; (21f8 <am_hal_uart_config+0x60>)
    AM_REGn(UART, 0, FBRD) = ui32FractionDivisor;
    21be:	6033      	str	r3, [r6, #0]
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    21c0:	68e6      	ldr	r6, [r4, #12]
    ui32ConfigVal |= psConfig->ui32DataBits;
    21c2:	6863      	ldr	r3, [r4, #4]
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    21c4:	7a25      	ldrb	r5, [r4, #8]
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    21c6:	6808      	ldr	r0, [r1, #0]

    //
    // Write the flow control settings to the control register.
    //
    AM_REGn(UART, 0, CR) |= psConfig->ui32FlowCtrl;
    21c8:	4a0c      	ldr	r2, [pc, #48]	; (21fc <am_hal_uart_config+0x64>)
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    21ca:	4333      	orrs	r3, r6
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    21cc:	2d00      	cmp	r5, #0
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    21ce:	ea43 0300 	orr.w	r3, r3, r0
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    21d2:	bf14      	ite	ne
    21d4:	2008      	movne	r0, #8
    21d6:	2000      	moveq	r0, #0
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    21d8:	4303      	orrs	r3, r0
    21da:	600b      	str	r3, [r1, #0]
    AM_REGn(UART, 0, CR) |= psConfig->ui32FlowCtrl;
    21dc:	6811      	ldr	r1, [r2, #0]
    21de:	6924      	ldr	r4, [r4, #16]
    21e0:	4321      	orrs	r1, r4
    21e2:	6011      	str	r1, [r2, #0]

    //
    // Set the clock select field for 24MHz from the HFRC
    //
    AM_REGn(UART, 0, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    21e4:	6813      	ldr	r3, [r2, #0]
    21e6:	f043 0610 	orr.w	r6, r3, #16
    21ea:	6016      	str	r6, [r2, #0]
    21ec:	bd70      	pop	{r4, r5, r6, pc}
    21ee:	e7fe      	b.n	21ee <am_hal_uart_config+0x56>
    21f0:	4001c024 	.word	0x4001c024
    21f4:	4001c028 	.word	0x4001c028
    21f8:	4001c02c 	.word	0x4001c02c
    21fc:	4001c030 	.word	0x4001c030

00002200 <am_hal_uart_int_status_get>:
//
//*****************************************************************************
uint32_t
am_hal_uart_int_status_get(uint32_t ui32Module, bool bEnabledOnly)
{
    if ( bEnabledOnly )
    2200:	b911      	cbnz	r1, 2208 <am_hal_uart_int_status_get+0x8>
    else
    {
        //
        // Read and return the Raw Interrupt Status.
        //
        return AM_REGn(UART, 0, IES);
    2202:	4b03      	ldr	r3, [pc, #12]	; (2210 <am_hal_uart_int_status_get+0x10>)
    2204:	6818      	ldr	r0, [r3, #0]
    }
}
    2206:	4770      	bx	lr
        return AM_REGn(UART, 0, MIS);
    2208:	4802      	ldr	r0, [pc, #8]	; (2214 <am_hal_uart_int_status_get+0x14>)
    220a:	6800      	ldr	r0, [r0, #0]
    220c:	4770      	bx	lr
    220e:	bf00      	nop
    2210:	4001c03c 	.word	0x4001c03c
    2214:	4001c040 	.word	0x4001c040

00002218 <am_hal_uart_int_clear>:
am_hal_uart_int_clear(uint32_t ui32Module, uint32_t ui32Interrupt)
{
    //
    // Clear the bits.
    //
    AM_REGn(UART, 0, IEC) = ui32Interrupt;
    2218:	4b01      	ldr	r3, [pc, #4]	; (2220 <am_hal_uart_int_clear+0x8>)
    221a:	6019      	str	r1, [r3, #0]
    221c:	4770      	bx	lr
    221e:	bf00      	nop
    2220:	4001c044 	.word	0x4001c044

00002224 <am_hal_uart_int_enable>:
am_hal_uart_int_enable(uint32_t ui32Module, uint32_t ui32Interrupt)
{
    //
    // Enable the interrupts.
    //
    AM_REGn(UART, 0, IER) |= ui32Interrupt;
    2224:	4a02      	ldr	r2, [pc, #8]	; (2230 <am_hal_uart_int_enable+0xc>)
    2226:	6813      	ldr	r3, [r2, #0]
    2228:	4319      	orrs	r1, r3
    222a:	6011      	str	r1, [r2, #0]
    222c:	4770      	bx	lr
    222e:	bf00      	nop
    2230:	4001c038 	.word	0x4001c038

00002234 <am_hal_uart_enable>:
am_hal_uart_enable(uint32_t ui32Module)
{
    //
    // Enable the UART, RX, and TX.
    //
    AM_REGn(UART, 0, CR) |= (AM_REG_UART_CR_UARTEN_M   |
    2234:	4a03      	ldr	r2, [pc, #12]	; (2244 <am_hal_uart_enable+0x10>)
    2236:	6813      	ldr	r3, [r2, #0]
    2238:	f443 7040 	orr.w	r0, r3, #768	; 0x300
    223c:	f040 0101 	orr.w	r1, r0, #1
    2240:	6011      	str	r1, [r2, #0]
    2242:	4770      	bx	lr
    2244:	4001c030 	.word	0x4001c030

00002248 <am_hal_uart_disable>:
am_hal_uart_disable(uint32_t ui32Module)
{
    //
    // Disable the UART.
    //
    AM_REGn(UART, 0, CR) &= ~(AM_REG_UART_CR_UARTEN_M  |
    2248:	4a03      	ldr	r2, [pc, #12]	; (2258 <am_hal_uart_disable+0x10>)
    224a:	6813      	ldr	r3, [r2, #0]
    224c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
    2250:	f020 0101 	bic.w	r1, r0, #1
    2254:	6011      	str	r1, [r2, #0]
    2256:	4770      	bx	lr
    2258:	4001c030 	.word	0x4001c030

0000225c <am_hal_uart_clock_enable>:
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    //
    // Enable the UART clock in the MCUCTRL module.
    //
    AM_REGn(CLKGEN, 0, UARTEN) |= AM_REG_CLKGEN_UARTEN_UARTEN_M;
    225c:	4907      	ldr	r1, [pc, #28]	; (227c <am_hal_uart_clock_enable+0x20>)

    //
    // Enable the UART clock.
    //
    AM_REGn(UART, 0, CR) |= AM_REG_UART_CR_CLKEN_M;
    225e:	4b08      	ldr	r3, [pc, #32]	; (2280 <am_hal_uart_clock_enable+0x24>)
    AM_REGn(CLKGEN, 0, UARTEN) |= AM_REG_CLKGEN_UARTEN_UARTEN_M;
    2260:	680a      	ldr	r2, [r1, #0]
    2262:	f042 0001 	orr.w	r0, r2, #1
    2266:	6008      	str	r0, [r1, #0]
    AM_REGn(UART, 0, CR) |= AM_REG_UART_CR_CLKEN_M;
    2268:	6819      	ldr	r1, [r3, #0]
    226a:	f041 0208 	orr.w	r2, r1, #8
    226e:	601a      	str	r2, [r3, #0]

    //
    // Select default UART clock source
    //
    AM_REGn(UART, 0, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    2270:	6818      	ldr	r0, [r3, #0]
    2272:	f040 0110 	orr.w	r1, r0, #16
    2276:	6019      	str	r1, [r3, #0]
    2278:	4770      	bx	lr
    227a:	bf00      	nop
    227c:	4000402c 	.word	0x4000402c
    2280:	4001c030 	.word	0x4001c030

00002284 <am_hal_uart_fifo_config>:
am_hal_uart_fifo_config(uint32_t ui32Module, uint32_t ui32LvlCfg)
{
    //
    // Enable the use of FIFOs.
    //
    AM_REGn(UART, 0, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    2284:	4a03      	ldr	r2, [pc, #12]	; (2294 <am_hal_uart_fifo_config+0x10>)

    //
    // Write the FIFO level register.
    //
    AM_REGn(UART, 0, IFLS) = ui32LvlCfg;
    2286:	4804      	ldr	r0, [pc, #16]	; (2298 <am_hal_uart_fifo_config+0x14>)
    AM_REGn(UART, 0, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    2288:	6813      	ldr	r3, [r2, #0]
    228a:	f043 0310 	orr.w	r3, r3, #16
    228e:	6013      	str	r3, [r2, #0]
    AM_REGn(UART, 0, IFLS) = ui32LvlCfg;
    2290:	6001      	str	r1, [r0, #0]
    2292:	4770      	bx	lr
    2294:	4001c02c 	.word	0x4001c02c
    2298:	4001c034 	.word	0x4001c034

0000229c <am_hal_uart_char_transmit_polled>:
am_hal_uart_char_transmit_polled(uint32_t ui32Module, char cChar)
{
    //
    // Wait for space, i.e.  TX FIFO EMPTY
    //
    while ( AM_BFRn(UART, 0, FR, TXFF) );
    229c:	4a03      	ldr	r2, [pc, #12]	; (22ac <am_hal_uart_char_transmit_polled+0x10>)
    229e:	6813      	ldr	r3, [r2, #0]
    22a0:	069b      	lsls	r3, r3, #26
    22a2:	d4fc      	bmi.n	229e <am_hal_uart_char_transmit_polled+0x2>

    //
    // Write the char.
    //
    AM_REGn(UART, 0, DR) = cChar;
    22a4:	4802      	ldr	r0, [pc, #8]	; (22b0 <am_hal_uart_char_transmit_polled+0x14>)
    22a6:	6001      	str	r1, [r0, #0]
    22a8:	4770      	bx	lr
    22aa:	bf00      	nop
    22ac:	4001c018 	.word	0x4001c018
    22b0:	4001c000 	.word	0x4001c000

000022b4 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    22b4:	4b01      	ldr	r3, [pc, #4]	; (22bc <am_hal_vcomp_disable+0x8>)
    22b6:	2237      	movs	r2, #55	; 0x37
    22b8:	601a      	str	r2, [r3, #0]
    22ba:	4770      	bx	lr
    22bc:	4000c008 	.word	0x4000c008

000022c0 <memcpy>:
    22c0:	b510      	push	{r4, lr}
    22c2:	1e43      	subs	r3, r0, #1
    22c4:	440a      	add	r2, r1
    22c6:	4291      	cmp	r1, r2
    22c8:	d100      	bne.n	22cc <memcpy+0xc>
    22ca:	bd10      	pop	{r4, pc}
    22cc:	f811 4b01 	ldrb.w	r4, [r1], #1
    22d0:	f803 4f01 	strb.w	r4, [r3, #1]!
    22d4:	e7f7      	b.n	22c6 <memcpy+0x6>
	...

000022d8 <g_pui32CRC32Table>:
    22d8:	0000 0000 6f41 1edc de82 3db8 b1c3 2364     ....Ao.....=..d#
    22e8:	bd04 7b71 d245 65ad 6386 46c9 0cc7 5815     ..q{E..e.c.F...X
    22f8:	7a08 f6e3 1549 e83f a48a cb5b cbcb d587     .z..I.?...[.....
    2308:	c70c 8d92 a84d 934e 198e b02a 76cf aef6     ....M.N...*..v..
    2318:	9b51 f31a f410 edc6 45d3 cea2 2a92 d07e     Q........E...*~.
    2328:	2655 886b 4914 96b7 f8d7 b5d3 9796 ab0f     U&k..I..........
    2338:	e159 05f9 8e18 1b25 3fdb 3841 509a 269d     Y.....%..?A8.P.&
    2348:	5c5d 7e88 331c 6054 82df 4330 ed9e 5dec     ]\.~.3T`..0C...]
    2358:	59e3 f8e9 36a2 e635 8761 c551 e820 db8d     .Y...65.a.Q. ...
    2368:	e4e7 8398 8ba6 9d44 3a65 be20 5524 a0fc     ......D.e: .$U..
    2378:	23eb 0e0a 4caa 10d6 fd69 33b2 9228 2d6e     .#...L..i..3(.n-
    2388:	9eef 757b f1ae 6ba7 406d 48c3 2f2c 561f     ..{u...km@.H,/.V
    2398:	c2b2 0bf3 adf3 152f 1c30 364b 7371 2897     ....../.0.K6qs.(
    23a8:	7fb6 7082 10f7 6e5e a134 4d3a ce75 53e6     ...p..^n4.:Mu..S
    23b8:	b8ba fd10 d7fb e3cc 6638 c0a8 0979 de74     ........8f..y.t.
    23c8:	05be 8661 6aff 98bd db3c bbd9 b47d a505     ..a..j..<...}...
    23d8:	dc87 ef0e b3c6 f1d2 0205 d2b6 6d44 cc6a     ............Dmj.
    23e8:	6183 947f 0ec2 8aa3 bf01 a9c7 d040 b71b     .a..........@...
    23f8:	a68f 19ed c9ce 0731 780d 2455 174c 3a89     ......1..xU$L..:
    2408:	1b8b 629c 74ca 7c40 c509 5f24 aa48 41f8     ...b.t@|..$_H..A
    2418:	47d6 1c14 2897 02c8 9954 21ac f615 3f70     .G...(..T..!..p?
    2428:	fad2 6765 9593 79b9 2450 5add 4b11 4401     ..eg...yP$.Z.K.D
    2438:	3dde eaf7 529f f42b e35c d74f 8c1d c993     .=...R+.\.O.....
    2448:	80da 9186 ef9b 8f5a 5e58 ac3e 3119 b2e2     ......Z.X^>..1..
    2458:	8564 17e7 ea25 093b 5be6 2a5f 34a7 3483     d...%.;..[_*.4.4
    2468:	3860 6c96 5721 724a e6e2 512e 89a3 4ff2     `8.l!WJr...Q...O
    2478:	ff6c e104 902d ffd8 21ee dcbc 4eaf c260     l...-....!...N`.
    2488:	4268 9a75 2d29 84a9 9cea a7cd f3ab b911     hBu.)-..........
    2498:	1e35 e4fd 7174 fa21 c0b7 d945 aff6 c799     5...tq!...E.....
    24a8:	a331 9f8c cc70 8150 7db3 a234 12f2 bce8     1...p.P..}4.....
    24b8:	643d 121e 0b7c 0cc2 babf 2fa6 d5fe 317a     =d..|....../..z1
    24c8:	d939 696f b678 77b3 07bb 54d7 68fa 4a0b     9.oix..w...T.h.J
    24d8:	d64f c0c1 b90e de1d 08cd fd79 678c e3a5     O.........y..g..
    24e8:	6b4b bbb0 040a a56c b5c9 8608 da88 98d4     Kk....l.........
    24f8:	ac47 3622 c306 28fe 72c5 0b9a 1d84 1546     G."6...(.r....F.
    2508:	1143 4d53 7e02 538f cfc1 70eb a080 6e37     C.SM.~.S...p..7n
    2518:	4d1e 33db 225f 2d07 939c 0e63 fcdd 10bf     .M.3_".-..c.....
    2528:	f01a 48aa 9f5b 5676 2e98 7512 41d9 6bce     ...H[.vV...u.A.k
    2538:	3716 c538 5857 dbe4 e994 f880 86d5 e65c     .78.WX........\.
    2548:	8a12 be49 e553 a095 5490 83f1 3bd1 9d2d     ..I.S....T...;-.
    2558:	8fac 3828 e0ed 26f4 512e 0590 3e6f 1b4c     ..(8...&.Q..o>L.
    2568:	32a8 4359 5de9 5d85 ec2a 7ee1 836b 603d     .2YC.].]*..~k.=`
    2578:	f5a4 cecb 9ae5 d017 2b26 f373 4467 edaf     ........&+s.gD..
    2588:	48a0 b5ba 27e1 ab66 9622 8802 f963 96de     .H...'f."...c...
    2598:	14fd cb32 7bbc d5ee ca7f f68a a53e e856     ..2..{......>.V.
    25a8:	a9f9 b043 c6b8 ae9f 777b 8dfb 183a 9327     ..C.....{w..:.'.
    25b8:	6ef5 3dd1 01b4 230d b077 0069 df36 1eb5     .n.=...#w.i.6...
    25c8:	d3f1 46a0 bcb0 587c 0d73 7b18 6232 65c4     ...F..|Xs..{2b.e
    25d8:	0ac8 2fcf 6589 3113 d44a 1277 bb0b 0cab     .../.e.1J.w.....
    25e8:	b7cc 54be d88d 4a62 694e 6906 060f 77da     ...T..bJNi.i...w
    25f8:	70c0 d92c 1f81 c7f0 ae42 e494 c103 fa48     .p,.....B.....H.
    2608:	cdc4 a25d a285 bc81 1346 9fe5 7c07 8139     ..].....F....|9.
    2618:	9199 dcd5 fed8 c209 4f1b e16d 205a ffb1     .........Om.Z ..
    2628:	2c9d a7a4 43dc b978 f21f 9a1c 9d5e 84c0     .,...Cx.....^...
    2638:	eb91 2a36 84d0 34ea 3513 178e 5a52 0952     ..6*...4.5..RZR.
    2648:	5695 5147 39d4 4f9b 8817 6cff e756 7223     .VGQ.9.O...lV.#r
    2658:	532b d726 3c6a c9fa 8da9 ea9e e2e8 f442     +S&.j<........B.
    2668:	ee2f ac57 816e b28b 30ad 91ef 5fec 8f33     /.W.n....0..._3.
    2678:	2923 21c5 4662 3f19 f7a1 1c7d 98e0 02a1     #).!bF.?..}.....
    2688:	9427 5ab4 fb66 4468 4aa5 670c 25e4 79d0     '..Zf.hD.J.g.%.y
    2698:	c87a 243c a73b 3ae0 16f8 1984 79b9 0758     z.<$;..:.....yX.
    26a8:	757e 5f4d 1a3f 4191 abfc 62f5 c4bd 7c29     ~uM_?..A...b..)|
    26b8:	b272 d2df dd33 cc03 6cf0 ef67 03b1 f1bb     r...3....lg.....
    26c8:	0f76 a9ae 6037 b772 d1f4 9416 beb5 8aca     v...7`r.........

000026d8 <CSWTCH.4>:
    26d8:	3600 016e 1b00 00b7 1200 007a 8d80 005b     .6n.......z...[.
    26e8:	3e00 0049 0900 003d 50db 0034 c6c0 002d     .>I...=..P4...-.

000026f8 <am_hal_ios_pui8LRAM>:
    26f8:	0000 5000                                   ...P

000026fc <am_hal_mcuctrl_flash_size>:
    26fc:	8000 0000 0000 0001 0000 0002 0000 0004     ................
    270c:	0000 0008 0000 0010 0000 0020 0000 0000     .......... .....
	...
    2738:	4000 0000                                   .@..

0000273c <am_hal_mcuctrl_sram_size>:
    273c:	8000 0000 0000 0001 0000 0002 0000 0004     ................
    274c:	0000 0008 0000 0010 0000 0020 0000 0000     .......... .....
	...
    2778:	4000 0000                                   .@..
