
adc_vbatt_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002700  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00004000  10000000  10000000  00020000  2**2
                  ALLOC
  2 .data         0000005c  10004000  00002700  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000124  1000405c  0000275c  0001405c  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  0001405c  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000676e  00000000  00000000  00014093  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000212e  00000000  00000000  0001a801  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000007f0  00000000  00000000  0001c92f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000a60  00000000  00000000  0001d11f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003dd4  00000000  00000000  0001db7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000279d  00000000  00000000  00021953  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  000240f0  2**0
                  CONTENTS, READONLY
 12 .debug_frame  0000142c  00000000  00000000  0002416c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001fc6  00000000  00000000  00025598  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 40 00 10 7d 0f 00 00 e5 0f 00 00 f1 0f 00 00     .@..}...........
      10:	f1 0f 00 00 f1 0f 00 00 f1 0f 00 00 00 00 00 00     ................
	...
      2c:	eb 0f 00 00 eb 0f 00 00 00 00 00 00 eb 0f 00 00     ................
      3c:	eb 0f 00 00 eb 0f 00 00 eb 0f 00 00 eb 0f 00 00     ................
      4c:	eb 0f 00 00 eb 0f 00 00 eb 0f 00 00 eb 0f 00 00     ................
      5c:	eb 0f 00 00 75 0a 00 00 eb 0f 00 00 eb 0f 00 00     ....u...........
      6c:	eb 0f 00 00 eb 0f 00 00 eb 0f 00 00 eb 0f 00 00     ................
      7c:	eb 0f 00 00                                         ....

00000080 <__aeabi_drsub>:
      80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
      84:	e002      	b.n	8c <__adddf3>
      86:	bf00      	nop

00000088 <__aeabi_dsub>:
      88:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000008c <__adddf3>:
      8c:	b530      	push	{r4, r5, lr}
      8e:	ea4f 0441 	mov.w	r4, r1, lsl #1
      92:	ea4f 0543 	mov.w	r5, r3, lsl #1
      96:	ea94 0f05 	teq	r4, r5
      9a:	bf08      	it	eq
      9c:	ea90 0f02 	teqeq	r0, r2
      a0:	bf1f      	itttt	ne
      a2:	ea54 0c00 	orrsne.w	ip, r4, r0
      a6:	ea55 0c02 	orrsne.w	ip, r5, r2
      aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
      ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
      b2:	f000 80e2 	beq.w	27a <__adddf3+0x1ee>
      b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
      ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
      be:	bfb8      	it	lt
      c0:	426d      	neglt	r5, r5
      c2:	dd0c      	ble.n	de <__adddf3+0x52>
      c4:	442c      	add	r4, r5
      c6:	ea80 0202 	eor.w	r2, r0, r2
      ca:	ea81 0303 	eor.w	r3, r1, r3
      ce:	ea82 0000 	eor.w	r0, r2, r0
      d2:	ea83 0101 	eor.w	r1, r3, r1
      d6:	ea80 0202 	eor.w	r2, r0, r2
      da:	ea81 0303 	eor.w	r3, r1, r3
      de:	2d36      	cmp	r5, #54	; 0x36
      e0:	bf88      	it	hi
      e2:	bd30      	pophi	{r4, r5, pc}
      e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
      e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
      ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
      f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
      f4:	d002      	beq.n	fc <__adddf3+0x70>
      f6:	4240      	negs	r0, r0
      f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     100:	ea4f 3303 	mov.w	r3, r3, lsl #12
     104:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     108:	d002      	beq.n	110 <__adddf3+0x84>
     10a:	4252      	negs	r2, r2
     10c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     110:	ea94 0f05 	teq	r4, r5
     114:	f000 80a7 	beq.w	266 <__adddf3+0x1da>
     118:	f1a4 0401 	sub.w	r4, r4, #1
     11c:	f1d5 0e20 	rsbs	lr, r5, #32
     120:	db0d      	blt.n	13e <__adddf3+0xb2>
     122:	fa02 fc0e 	lsl.w	ip, r2, lr
     126:	fa22 f205 	lsr.w	r2, r2, r5
     12a:	1880      	adds	r0, r0, r2
     12c:	f141 0100 	adc.w	r1, r1, #0
     130:	fa03 f20e 	lsl.w	r2, r3, lr
     134:	1880      	adds	r0, r0, r2
     136:	fa43 f305 	asr.w	r3, r3, r5
     13a:	4159      	adcs	r1, r3
     13c:	e00e      	b.n	15c <__adddf3+0xd0>
     13e:	f1a5 0520 	sub.w	r5, r5, #32
     142:	f10e 0e20 	add.w	lr, lr, #32
     146:	2a01      	cmp	r2, #1
     148:	fa03 fc0e 	lsl.w	ip, r3, lr
     14c:	bf28      	it	cs
     14e:	f04c 0c02 	orrcs.w	ip, ip, #2
     152:	fa43 f305 	asr.w	r3, r3, r5
     156:	18c0      	adds	r0, r0, r3
     158:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     15c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     160:	d507      	bpl.n	172 <__adddf3+0xe6>
     162:	f04f 0e00 	mov.w	lr, #0
     166:	f1dc 0c00 	rsbs	ip, ip, #0
     16a:	eb7e 0000 	sbcs.w	r0, lr, r0
     16e:	eb6e 0101 	sbc.w	r1, lr, r1
     172:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     176:	d31b      	bcc.n	1b0 <__adddf3+0x124>
     178:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     17c:	d30c      	bcc.n	198 <__adddf3+0x10c>
     17e:	0849      	lsrs	r1, r1, #1
     180:	ea5f 0030 	movs.w	r0, r0, rrx
     184:	ea4f 0c3c 	mov.w	ip, ip, rrx
     188:	f104 0401 	add.w	r4, r4, #1
     18c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     190:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     194:	f080 809a 	bcs.w	2cc <__adddf3+0x240>
     198:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     19c:	bf08      	it	eq
     19e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     1a2:	f150 0000 	adcs.w	r0, r0, #0
     1a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     1aa:	ea41 0105 	orr.w	r1, r1, r5
     1ae:	bd30      	pop	{r4, r5, pc}
     1b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     1b4:	4140      	adcs	r0, r0
     1b6:	eb41 0101 	adc.w	r1, r1, r1
     1ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     1be:	f1a4 0401 	sub.w	r4, r4, #1
     1c2:	d1e9      	bne.n	198 <__adddf3+0x10c>
     1c4:	f091 0f00 	teq	r1, #0
     1c8:	bf04      	itt	eq
     1ca:	4601      	moveq	r1, r0
     1cc:	2000      	moveq	r0, #0
     1ce:	fab1 f381 	clz	r3, r1
     1d2:	bf08      	it	eq
     1d4:	3320      	addeq	r3, #32
     1d6:	f1a3 030b 	sub.w	r3, r3, #11
     1da:	f1b3 0220 	subs.w	r2, r3, #32
     1de:	da0c      	bge.n	1fa <__adddf3+0x16e>
     1e0:	320c      	adds	r2, #12
     1e2:	dd08      	ble.n	1f6 <__adddf3+0x16a>
     1e4:	f102 0c14 	add.w	ip, r2, #20
     1e8:	f1c2 020c 	rsb	r2, r2, #12
     1ec:	fa01 f00c 	lsl.w	r0, r1, ip
     1f0:	fa21 f102 	lsr.w	r1, r1, r2
     1f4:	e00c      	b.n	210 <__adddf3+0x184>
     1f6:	f102 0214 	add.w	r2, r2, #20
     1fa:	bfd8      	it	le
     1fc:	f1c2 0c20 	rsble	ip, r2, #32
     200:	fa01 f102 	lsl.w	r1, r1, r2
     204:	fa20 fc0c 	lsr.w	ip, r0, ip
     208:	bfdc      	itt	le
     20a:	ea41 010c 	orrle.w	r1, r1, ip
     20e:	4090      	lslle	r0, r2
     210:	1ae4      	subs	r4, r4, r3
     212:	bfa2      	ittt	ge
     214:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     218:	4329      	orrge	r1, r5
     21a:	bd30      	popge	{r4, r5, pc}
     21c:	ea6f 0404 	mvn.w	r4, r4
     220:	3c1f      	subs	r4, #31
     222:	da1c      	bge.n	25e <__adddf3+0x1d2>
     224:	340c      	adds	r4, #12
     226:	dc0e      	bgt.n	246 <__adddf3+0x1ba>
     228:	f104 0414 	add.w	r4, r4, #20
     22c:	f1c4 0220 	rsb	r2, r4, #32
     230:	fa20 f004 	lsr.w	r0, r0, r4
     234:	fa01 f302 	lsl.w	r3, r1, r2
     238:	ea40 0003 	orr.w	r0, r0, r3
     23c:	fa21 f304 	lsr.w	r3, r1, r4
     240:	ea45 0103 	orr.w	r1, r5, r3
     244:	bd30      	pop	{r4, r5, pc}
     246:	f1c4 040c 	rsb	r4, r4, #12
     24a:	f1c4 0220 	rsb	r2, r4, #32
     24e:	fa20 f002 	lsr.w	r0, r0, r2
     252:	fa01 f304 	lsl.w	r3, r1, r4
     256:	ea40 0003 	orr.w	r0, r0, r3
     25a:	4629      	mov	r1, r5
     25c:	bd30      	pop	{r4, r5, pc}
     25e:	fa21 f004 	lsr.w	r0, r1, r4
     262:	4629      	mov	r1, r5
     264:	bd30      	pop	{r4, r5, pc}
     266:	f094 0f00 	teq	r4, #0
     26a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     26e:	bf06      	itte	eq
     270:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     274:	3401      	addeq	r4, #1
     276:	3d01      	subne	r5, #1
     278:	e74e      	b.n	118 <__adddf3+0x8c>
     27a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     27e:	bf18      	it	ne
     280:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     284:	d029      	beq.n	2da <__adddf3+0x24e>
     286:	ea94 0f05 	teq	r4, r5
     28a:	bf08      	it	eq
     28c:	ea90 0f02 	teqeq	r0, r2
     290:	d005      	beq.n	29e <__adddf3+0x212>
     292:	ea54 0c00 	orrs.w	ip, r4, r0
     296:	bf04      	itt	eq
     298:	4619      	moveq	r1, r3
     29a:	4610      	moveq	r0, r2
     29c:	bd30      	pop	{r4, r5, pc}
     29e:	ea91 0f03 	teq	r1, r3
     2a2:	bf1e      	ittt	ne
     2a4:	2100      	movne	r1, #0
     2a6:	2000      	movne	r0, #0
     2a8:	bd30      	popne	{r4, r5, pc}
     2aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     2ae:	d105      	bne.n	2bc <__adddf3+0x230>
     2b0:	0040      	lsls	r0, r0, #1
     2b2:	4149      	adcs	r1, r1
     2b4:	bf28      	it	cs
     2b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     2ba:	bd30      	pop	{r4, r5, pc}
     2bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     2c0:	bf3c      	itt	cc
     2c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     2c6:	bd30      	popcc	{r4, r5, pc}
     2c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     2cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     2d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     2d4:	f04f 0000 	mov.w	r0, #0
     2d8:	bd30      	pop	{r4, r5, pc}
     2da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2de:	bf1a      	itte	ne
     2e0:	4619      	movne	r1, r3
     2e2:	4610      	movne	r0, r2
     2e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     2e8:	bf1c      	itt	ne
     2ea:	460b      	movne	r3, r1
     2ec:	4602      	movne	r2, r0
     2ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     2f2:	bf06      	itte	eq
     2f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     2f8:	ea91 0f03 	teqeq	r1, r3
     2fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     300:	bd30      	pop	{r4, r5, pc}
     302:	bf00      	nop

00000304 <__aeabi_ui2d>:
     304:	f090 0f00 	teq	r0, #0
     308:	bf04      	itt	eq
     30a:	2100      	moveq	r1, #0
     30c:	4770      	bxeq	lr
     30e:	b530      	push	{r4, r5, lr}
     310:	f44f 6480 	mov.w	r4, #1024	; 0x400
     314:	f104 0432 	add.w	r4, r4, #50	; 0x32
     318:	f04f 0500 	mov.w	r5, #0
     31c:	f04f 0100 	mov.w	r1, #0
     320:	e750      	b.n	1c4 <__adddf3+0x138>
     322:	bf00      	nop

00000324 <__aeabi_i2d>:
     324:	f090 0f00 	teq	r0, #0
     328:	bf04      	itt	eq
     32a:	2100      	moveq	r1, #0
     32c:	4770      	bxeq	lr
     32e:	b530      	push	{r4, r5, lr}
     330:	f44f 6480 	mov.w	r4, #1024	; 0x400
     334:	f104 0432 	add.w	r4, r4, #50	; 0x32
     338:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     33c:	bf48      	it	mi
     33e:	4240      	negmi	r0, r0
     340:	f04f 0100 	mov.w	r1, #0
     344:	e73e      	b.n	1c4 <__adddf3+0x138>
     346:	bf00      	nop

00000348 <__aeabi_f2d>:
     348:	0042      	lsls	r2, r0, #1
     34a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     34e:	ea4f 0131 	mov.w	r1, r1, rrx
     352:	ea4f 7002 	mov.w	r0, r2, lsl #28
     356:	bf1f      	itttt	ne
     358:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     35c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     360:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     364:	4770      	bxne	lr
     366:	f092 0f00 	teq	r2, #0
     36a:	bf14      	ite	ne
     36c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     370:	4770      	bxeq	lr
     372:	b530      	push	{r4, r5, lr}
     374:	f44f 7460 	mov.w	r4, #896	; 0x380
     378:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     37c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     380:	e720      	b.n	1c4 <__adddf3+0x138>
     382:	bf00      	nop

00000384 <__aeabi_ul2d>:
     384:	ea50 0201 	orrs.w	r2, r0, r1
     388:	bf08      	it	eq
     38a:	4770      	bxeq	lr
     38c:	b530      	push	{r4, r5, lr}
     38e:	f04f 0500 	mov.w	r5, #0
     392:	e00a      	b.n	3aa <__aeabi_l2d+0x16>

00000394 <__aeabi_l2d>:
     394:	ea50 0201 	orrs.w	r2, r0, r1
     398:	bf08      	it	eq
     39a:	4770      	bxeq	lr
     39c:	b530      	push	{r4, r5, lr}
     39e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     3a2:	d502      	bpl.n	3aa <__aeabi_l2d+0x16>
     3a4:	4240      	negs	r0, r0
     3a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     3aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     3b6:	f43f aedc 	beq.w	172 <__adddf3+0xe6>
     3ba:	f04f 0203 	mov.w	r2, #3
     3be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     3c2:	bf18      	it	ne
     3c4:	3203      	addne	r2, #3
     3c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     3ca:	bf18      	it	ne
     3cc:	3203      	addne	r2, #3
     3ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     3d2:	f1c2 0320 	rsb	r3, r2, #32
     3d6:	fa00 fc03 	lsl.w	ip, r0, r3
     3da:	fa20 f002 	lsr.w	r0, r0, r2
     3de:	fa01 fe03 	lsl.w	lr, r1, r3
     3e2:	ea40 000e 	orr.w	r0, r0, lr
     3e6:	fa21 f102 	lsr.w	r1, r1, r2
     3ea:	4414      	add	r4, r2
     3ec:	e6c1      	b.n	172 <__adddf3+0xe6>
     3ee:	bf00      	nop

000003f0 <__aeabi_d2f>:
     3f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
     3f4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     3f8:	bf24      	itt	cs
     3fa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     3fe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     402:	d90d      	bls.n	420 <__aeabi_d2f+0x30>
     404:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     408:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     40c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     410:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     414:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     418:	bf08      	it	eq
     41a:	f020 0001 	biceq.w	r0, r0, #1
     41e:	4770      	bx	lr
     420:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     424:	d121      	bne.n	46a <__aeabi_d2f+0x7a>
     426:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     42a:	bfbc      	itt	lt
     42c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     430:	4770      	bxlt	lr
     432:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     436:	ea4f 5252 	mov.w	r2, r2, lsr #21
     43a:	f1c2 0218 	rsb	r2, r2, #24
     43e:	f1c2 0c20 	rsb	ip, r2, #32
     442:	fa10 f30c 	lsls.w	r3, r0, ip
     446:	fa20 f002 	lsr.w	r0, r0, r2
     44a:	bf18      	it	ne
     44c:	f040 0001 	orrne.w	r0, r0, #1
     450:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     454:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     458:	fa03 fc0c 	lsl.w	ip, r3, ip
     45c:	ea40 000c 	orr.w	r0, r0, ip
     460:	fa23 f302 	lsr.w	r3, r3, r2
     464:	ea4f 0343 	mov.w	r3, r3, lsl #1
     468:	e7cc      	b.n	404 <__aeabi_d2f+0x14>
     46a:	ea7f 5362 	mvns.w	r3, r2, asr #21
     46e:	d107      	bne.n	480 <__aeabi_d2f+0x90>
     470:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     474:	bf1e      	ittt	ne
     476:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     47a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     47e:	4770      	bxne	lr
     480:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     484:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     488:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
     490:	b490      	push	{r4, r7}
     492:	b082      	sub	sp, #8
     494:	af00      	add	r7, sp, #0
     496:	6078      	str	r0, [r7, #4]
    if ( (psLED == NULL)    ||
     498:	687b      	ldr	r3, [r7, #4]
     49a:	2b00      	cmp	r3, #0
     49c:	f000 8138 	beq.w	710 <am_devices_led_init+0x280>
         (psLED->ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
     4a0:	687b      	ldr	r3, [r7, #4]
     4a2:	681b      	ldr	r3, [r3, #0]
    if ( (psLED == NULL)    ||
     4a4:	2b31      	cmp	r3, #49	; 0x31
     4a6:	f200 8133 	bhi.w	710 <am_devices_led_init+0x280>
    }
#else
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
     4aa:	687b      	ldr	r3, [r7, #4]
     4ac:	685b      	ldr	r3, [r3, #4]
     4ae:	f003 0302 	and.w	r3, r3, #2
     4b2:	2b00      	cmp	r3, #0
     4b4:	f000 8096 	beq.w	5e4 <am_devices_led_init+0x154>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT);
     4b8:	687b      	ldr	r3, [r7, #4]
     4ba:	681b      	ldr	r3, [r3, #0]
     4bc:	2b00      	cmp	r3, #0
     4be:	db4e      	blt.n	55e <am_devices_led_init+0xce>
     4c0:	4b96      	ldr	r3, [pc, #600]	; (71c <am_devices_led_init+0x28c>)
     4c2:	2273      	movs	r2, #115	; 0x73
     4c4:	601a      	str	r2, [r3, #0]
     4c6:	687b      	ldr	r3, [r7, #4]
     4c8:	681b      	ldr	r3, [r3, #0]
     4ca:	085b      	lsrs	r3, r3, #1
     4cc:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     4d0:	4b93      	ldr	r3, [pc, #588]	; (720 <am_devices_led_init+0x290>)
     4d2:	4413      	add	r3, r2
     4d4:	461c      	mov	r4, r3
     4d6:	687b      	ldr	r3, [r7, #4]
     4d8:	681b      	ldr	r3, [r3, #0]
     4da:	009b      	lsls	r3, r3, #2
     4dc:	f003 031c 	and.w	r3, r3, #28
     4e0:	2202      	movs	r2, #2
     4e2:	409a      	lsls	r2, r3
     4e4:	687b      	ldr	r3, [r7, #4]
     4e6:	681b      	ldr	r3, [r3, #0]
     4e8:	085b      	lsrs	r3, r3, #1
     4ea:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     4ee:	4b8c      	ldr	r3, [pc, #560]	; (720 <am_devices_led_init+0x290>)
     4f0:	440b      	add	r3, r1
     4f2:	6819      	ldr	r1, [r3, #0]
     4f4:	687b      	ldr	r3, [r7, #4]
     4f6:	681b      	ldr	r3, [r3, #0]
     4f8:	009b      	lsls	r3, r3, #2
     4fa:	f003 031c 	and.w	r3, r3, #28
     4fe:	2007      	movs	r0, #7
     500:	fa00 f303 	lsl.w	r3, r0, r3
     504:	43db      	mvns	r3, r3
     506:	400b      	ands	r3, r1
     508:	4313      	orrs	r3, r2
     50a:	6023      	str	r3, [r4, #0]
     50c:	687b      	ldr	r3, [r7, #4]
     50e:	681b      	ldr	r3, [r3, #0]
     510:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     514:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     518:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     51c:	461c      	mov	r4, r3
     51e:	687b      	ldr	r3, [r7, #4]
     520:	681b      	ldr	r3, [r3, #0]
     522:	00db      	lsls	r3, r3, #3
     524:	f003 0318 	and.w	r3, r3, #24
     528:	2218      	movs	r2, #24
     52a:	409a      	lsls	r2, r3
     52c:	687b      	ldr	r3, [r7, #4]
     52e:	681b      	ldr	r3, [r3, #0]
     530:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     534:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     538:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     53c:	6819      	ldr	r1, [r3, #0]
     53e:	687b      	ldr	r3, [r7, #4]
     540:	681b      	ldr	r3, [r3, #0]
     542:	00db      	lsls	r3, r3, #3
     544:	f003 0318 	and.w	r3, r3, #24
     548:	20ff      	movs	r0, #255	; 0xff
     54a:	fa00 f303 	lsl.w	r3, r0, r3
     54e:	43db      	mvns	r3, r3
     550:	400b      	ands	r3, r1
     552:	4313      	orrs	r3, r2
     554:	6023      	str	r3, [r4, #0]
     556:	4b71      	ldr	r3, [pc, #452]	; (71c <am_devices_led_init+0x28c>)
     558:	2200      	movs	r2, #0
     55a:	601a      	str	r2, [r3, #0]
     55c:	e000      	b.n	560 <am_devices_led_init+0xd0>
     55e:	bf00      	nop

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     560:	687b      	ldr	r3, [r7, #4]
     562:	681b      	ldr	r3, [r3, #0]
     564:	08db      	lsrs	r3, r3, #3
     566:	f003 0204 	and.w	r2, r3, #4
     56a:	4b6e      	ldr	r3, [pc, #440]	; (724 <am_devices_led_init+0x294>)
     56c:	4413      	add	r3, r2
     56e:	4619      	mov	r1, r3
     570:	687b      	ldr	r3, [r7, #4]
     572:	681b      	ldr	r3, [r3, #0]
     574:	f003 031f 	and.w	r3, r3, #31
     578:	2201      	movs	r2, #1
     57a:	fa02 f303 	lsl.w	r3, r2, r3
     57e:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     580:	687b      	ldr	r3, [r7, #4]
     582:	681b      	ldr	r3, [r3, #0]
     584:	08db      	lsrs	r3, r3, #3
     586:	f003 0204 	and.w	r2, r3, #4
     58a:	4b67      	ldr	r3, [pc, #412]	; (728 <am_devices_led_init+0x298>)
     58c:	4413      	add	r3, r2
     58e:	4618      	mov	r0, r3
     590:	687b      	ldr	r3, [r7, #4]
     592:	685b      	ldr	r3, [r3, #4]
     594:	f003 0301 	and.w	r3, r3, #1
     598:	2b00      	cmp	r3, #0
     59a:	d010      	beq.n	5be <am_devices_led_init+0x12e>
     59c:	687b      	ldr	r3, [r7, #4]
     59e:	681b      	ldr	r3, [r3, #0]
     5a0:	08db      	lsrs	r3, r3, #3
     5a2:	f003 0204 	and.w	r2, r3, #4
     5a6:	4b60      	ldr	r3, [pc, #384]	; (728 <am_devices_led_init+0x298>)
     5a8:	4413      	add	r3, r2
     5aa:	681a      	ldr	r2, [r3, #0]
     5ac:	687b      	ldr	r3, [r7, #4]
     5ae:	681b      	ldr	r3, [r3, #0]
     5b0:	f003 031f 	and.w	r3, r3, #31
     5b4:	2101      	movs	r1, #1
     5b6:	fa01 f303 	lsl.w	r3, r1, r3
     5ba:	4313      	orrs	r3, r2
     5bc:	e010      	b.n	5e0 <am_devices_led_init+0x150>
     5be:	687b      	ldr	r3, [r7, #4]
     5c0:	681b      	ldr	r3, [r3, #0]
     5c2:	08db      	lsrs	r3, r3, #3
     5c4:	f003 0204 	and.w	r2, r3, #4
     5c8:	4b57      	ldr	r3, [pc, #348]	; (728 <am_devices_led_init+0x298>)
     5ca:	4413      	add	r3, r2
     5cc:	681a      	ldr	r2, [r3, #0]
     5ce:	687b      	ldr	r3, [r7, #4]
     5d0:	681b      	ldr	r3, [r3, #0]
     5d2:	f003 031f 	and.w	r3, r3, #31
     5d6:	2101      	movs	r1, #1
     5d8:	fa01 f303 	lsl.w	r3, r1, r3
     5dc:	43db      	mvns	r3, r3
     5de:	4013      	ands	r3, r2
     5e0:	6003      	str	r3, [r0, #0]
     5e2:	e096      	b.n	712 <am_devices_led_init+0x282>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     5e4:	687b      	ldr	r3, [r7, #4]
     5e6:	681b      	ldr	r3, [r3, #0]
     5e8:	2b00      	cmp	r3, #0
     5ea:	db4e      	blt.n	68a <am_devices_led_init+0x1fa>
     5ec:	4b4b      	ldr	r3, [pc, #300]	; (71c <am_devices_led_init+0x28c>)
     5ee:	2273      	movs	r2, #115	; 0x73
     5f0:	601a      	str	r2, [r3, #0]
     5f2:	687b      	ldr	r3, [r7, #4]
     5f4:	681b      	ldr	r3, [r3, #0]
     5f6:	085b      	lsrs	r3, r3, #1
     5f8:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     5fc:	4b48      	ldr	r3, [pc, #288]	; (720 <am_devices_led_init+0x290>)
     5fe:	4413      	add	r3, r2
     600:	461c      	mov	r4, r3
     602:	687b      	ldr	r3, [r7, #4]
     604:	681b      	ldr	r3, [r3, #0]
     606:	009b      	lsls	r3, r3, #2
     608:	f003 031c 	and.w	r3, r3, #28
     60c:	2206      	movs	r2, #6
     60e:	409a      	lsls	r2, r3
     610:	687b      	ldr	r3, [r7, #4]
     612:	681b      	ldr	r3, [r3, #0]
     614:	085b      	lsrs	r3, r3, #1
     616:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     61a:	4b41      	ldr	r3, [pc, #260]	; (720 <am_devices_led_init+0x290>)
     61c:	440b      	add	r3, r1
     61e:	6819      	ldr	r1, [r3, #0]
     620:	687b      	ldr	r3, [r7, #4]
     622:	681b      	ldr	r3, [r3, #0]
     624:	009b      	lsls	r3, r3, #2
     626:	f003 031c 	and.w	r3, r3, #28
     62a:	2007      	movs	r0, #7
     62c:	fa00 f303 	lsl.w	r3, r0, r3
     630:	43db      	mvns	r3, r3
     632:	400b      	ands	r3, r1
     634:	4313      	orrs	r3, r2
     636:	6023      	str	r3, [r4, #0]
     638:	687b      	ldr	r3, [r7, #4]
     63a:	681b      	ldr	r3, [r3, #0]
     63c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     640:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     644:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     648:	461c      	mov	r4, r3
     64a:	687b      	ldr	r3, [r7, #4]
     64c:	681b      	ldr	r3, [r3, #0]
     64e:	00db      	lsls	r3, r3, #3
     650:	f003 0318 	and.w	r3, r3, #24
     654:	2218      	movs	r2, #24
     656:	409a      	lsls	r2, r3
     658:	687b      	ldr	r3, [r7, #4]
     65a:	681b      	ldr	r3, [r3, #0]
     65c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     660:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     664:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     668:	6819      	ldr	r1, [r3, #0]
     66a:	687b      	ldr	r3, [r7, #4]
     66c:	681b      	ldr	r3, [r3, #0]
     66e:	00db      	lsls	r3, r3, #3
     670:	f003 0318 	and.w	r3, r3, #24
     674:	20ff      	movs	r0, #255	; 0xff
     676:	fa00 f303 	lsl.w	r3, r0, r3
     67a:	43db      	mvns	r3, r3
     67c:	400b      	ands	r3, r1
     67e:	4313      	orrs	r3, r2
     680:	6023      	str	r3, [r4, #0]
     682:	4b26      	ldr	r3, [pc, #152]	; (71c <am_devices_led_init+0x28c>)
     684:	2200      	movs	r2, #0
     686:	601a      	str	r2, [r3, #0]
     688:	e000      	b.n	68c <am_devices_led_init+0x1fc>
     68a:	bf00      	nop

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     68c:	687b      	ldr	r3, [r7, #4]
     68e:	681b      	ldr	r3, [r3, #0]
     690:	08db      	lsrs	r3, r3, #3
     692:	f003 0204 	and.w	r2, r3, #4
     696:	4b23      	ldr	r3, [pc, #140]	; (724 <am_devices_led_init+0x294>)
     698:	4413      	add	r3, r2
     69a:	4619      	mov	r1, r3
     69c:	687b      	ldr	r3, [r7, #4]
     69e:	681b      	ldr	r3, [r3, #0]
     6a0:	f003 031f 	and.w	r3, r3, #31
     6a4:	2201      	movs	r2, #1
     6a6:	fa02 f303 	lsl.w	r3, r2, r3
     6aa:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     6ac:	687b      	ldr	r3, [r7, #4]
     6ae:	681b      	ldr	r3, [r3, #0]
     6b0:	08db      	lsrs	r3, r3, #3
     6b2:	f003 0204 	and.w	r2, r3, #4
     6b6:	4b1c      	ldr	r3, [pc, #112]	; (728 <am_devices_led_init+0x298>)
     6b8:	4413      	add	r3, r2
     6ba:	4618      	mov	r0, r3
     6bc:	687b      	ldr	r3, [r7, #4]
     6be:	685b      	ldr	r3, [r3, #4]
     6c0:	f003 0301 	and.w	r3, r3, #1
     6c4:	2b00      	cmp	r3, #0
     6c6:	d010      	beq.n	6ea <am_devices_led_init+0x25a>
     6c8:	687b      	ldr	r3, [r7, #4]
     6ca:	681b      	ldr	r3, [r3, #0]
     6cc:	08db      	lsrs	r3, r3, #3
     6ce:	f003 0204 	and.w	r2, r3, #4
     6d2:	4b15      	ldr	r3, [pc, #84]	; (728 <am_devices_led_init+0x298>)
     6d4:	4413      	add	r3, r2
     6d6:	681a      	ldr	r2, [r3, #0]
     6d8:	687b      	ldr	r3, [r7, #4]
     6da:	681b      	ldr	r3, [r3, #0]
     6dc:	f003 031f 	and.w	r3, r3, #31
     6e0:	2101      	movs	r1, #1
     6e2:	fa01 f303 	lsl.w	r3, r1, r3
     6e6:	4313      	orrs	r3, r2
     6e8:	e010      	b.n	70c <am_devices_led_init+0x27c>
     6ea:	687b      	ldr	r3, [r7, #4]
     6ec:	681b      	ldr	r3, [r3, #0]
     6ee:	08db      	lsrs	r3, r3, #3
     6f0:	f003 0204 	and.w	r2, r3, #4
     6f4:	4b0c      	ldr	r3, [pc, #48]	; (728 <am_devices_led_init+0x298>)
     6f6:	4413      	add	r3, r2
     6f8:	681a      	ldr	r2, [r3, #0]
     6fa:	687b      	ldr	r3, [r7, #4]
     6fc:	681b      	ldr	r3, [r3, #0]
     6fe:	f003 031f 	and.w	r3, r3, #31
     702:	2101      	movs	r1, #1
     704:	fa01 f303 	lsl.w	r3, r1, r3
     708:	43db      	mvns	r3, r3
     70a:	4013      	ands	r3, r2
     70c:	6003      	str	r3, [r0, #0]
     70e:	e000      	b.n	712 <am_devices_led_init+0x282>
        return;
     710:	bf00      	nop
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
#endif
}
     712:	3708      	adds	r7, #8
     714:	46bd      	mov	sp, r7
     716:	bc90      	pop	{r4, r7}
     718:	4770      	bx	lr
     71a:	bf00      	nop
     71c:	40010060 	.word	0x40010060
     720:	40010040 	.word	0x40010040
     724:	400100b4 	.word	0x400100b4
     728:	40010088 	.word	0x40010088

0000072c <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
     72c:	b580      	push	{r7, lr}
     72e:	b084      	sub	sp, #16
     730:	af00      	add	r7, sp, #0
     732:	6078      	str	r0, [r7, #4]
     734:	6039      	str	r1, [r7, #0]
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
     736:	687b      	ldr	r3, [r7, #4]
     738:	2b00      	cmp	r3, #0
     73a:	d014      	beq.n	766 <am_devices_led_array_init+0x3a>
     73c:	683b      	ldr	r3, [r7, #0]
     73e:	2b1f      	cmp	r3, #31
     740:	d811      	bhi.n	766 <am_devices_led_array_init+0x3a>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     742:	2300      	movs	r3, #0
     744:	60fb      	str	r3, [r7, #12]
     746:	e009      	b.n	75c <am_devices_led_array_init+0x30>
    {
        am_devices_led_init(psLEDs + i);
     748:	68fb      	ldr	r3, [r7, #12]
     74a:	00db      	lsls	r3, r3, #3
     74c:	687a      	ldr	r2, [r7, #4]
     74e:	4413      	add	r3, r2
     750:	4618      	mov	r0, r3
     752:	f7ff fe9d 	bl	490 <am_devices_led_init>
    for ( i = 0; i < ui32NumLEDs; i++ )
     756:	68fb      	ldr	r3, [r7, #12]
     758:	3301      	adds	r3, #1
     75a:	60fb      	str	r3, [r7, #12]
     75c:	68fa      	ldr	r2, [r7, #12]
     75e:	683b      	ldr	r3, [r7, #0]
     760:	429a      	cmp	r2, r3
     762:	d3f1      	bcc.n	748 <am_devices_led_array_init+0x1c>
     764:	e000      	b.n	768 <am_devices_led_array_init+0x3c>
        return;
     766:	bf00      	nop
    }
}
     768:	3710      	adds	r7, #16
     76a:	46bd      	mov	sp, r7
     76c:	bd80      	pop	{r7, pc}
	...

00000770 <am_devices_led_on>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     770:	b480      	push	{r7}
     772:	b083      	sub	sp, #12
     774:	af00      	add	r7, sp, #0
     776:	6078      	str	r0, [r7, #4]
     778:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
     77a:	687b      	ldr	r3, [r7, #4]
     77c:	2b00      	cmp	r3, #0
     77e:	d06d      	beq.n	85c <am_devices_led_on+0xec>
     780:	683b      	ldr	r3, [r7, #0]
     782:	2b1e      	cmp	r3, #30
     784:	d86a      	bhi.n	85c <am_devices_led_on+0xec>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
     786:	683b      	ldr	r3, [r7, #0]
     788:	00db      	lsls	r3, r3, #3
     78a:	687a      	ldr	r2, [r7, #4]
     78c:	4413      	add	r3, r2
     78e:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
     790:	2b31      	cmp	r3, #49	; 0x31
     792:	d863      	bhi.n	85c <am_devices_led_on+0xec>
    }
#else // AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     794:	683b      	ldr	r3, [r7, #0]
     796:	00db      	lsls	r3, r3, #3
     798:	687a      	ldr	r2, [r7, #4]
     79a:	4413      	add	r3, r2
     79c:	685b      	ldr	r3, [r3, #4]
     79e:	f003 0302 	and.w	r3, r3, #2
     7a2:	2b00      	cmp	r3, #0
     7a4:	d043      	beq.n	82e <am_devices_led_on+0xbe>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     7a6:	683b      	ldr	r3, [r7, #0]
     7a8:	00db      	lsls	r3, r3, #3
     7aa:	687a      	ldr	r2, [r7, #4]
     7ac:	4413      	add	r3, r2
     7ae:	681b      	ldr	r3, [r3, #0]
     7b0:	08db      	lsrs	r3, r3, #3
     7b2:	f003 0204 	and.w	r2, r3, #4
     7b6:	4b2c      	ldr	r3, [pc, #176]	; (868 <am_devices_led_on+0xf8>)
     7b8:	4413      	add	r3, r2
     7ba:	4618      	mov	r0, r3
     7bc:	683b      	ldr	r3, [r7, #0]
     7be:	00db      	lsls	r3, r3, #3
     7c0:	687a      	ldr	r2, [r7, #4]
     7c2:	4413      	add	r3, r2
     7c4:	685b      	ldr	r3, [r3, #4]
     7c6:	f003 0301 	and.w	r3, r3, #1
     7ca:	2b00      	cmp	r3, #0
     7cc:	d016      	beq.n	7fc <am_devices_led_on+0x8c>
     7ce:	683b      	ldr	r3, [r7, #0]
     7d0:	00db      	lsls	r3, r3, #3
     7d2:	687a      	ldr	r2, [r7, #4]
     7d4:	4413      	add	r3, r2
     7d6:	681b      	ldr	r3, [r3, #0]
     7d8:	08db      	lsrs	r3, r3, #3
     7da:	f003 0204 	and.w	r2, r3, #4
     7de:	4b22      	ldr	r3, [pc, #136]	; (868 <am_devices_led_on+0xf8>)
     7e0:	4413      	add	r3, r2
     7e2:	681a      	ldr	r2, [r3, #0]
     7e4:	683b      	ldr	r3, [r7, #0]
     7e6:	00db      	lsls	r3, r3, #3
     7e8:	6879      	ldr	r1, [r7, #4]
     7ea:	440b      	add	r3, r1
     7ec:	681b      	ldr	r3, [r3, #0]
     7ee:	f003 031f 	and.w	r3, r3, #31
     7f2:	2101      	movs	r1, #1
     7f4:	fa01 f303 	lsl.w	r3, r1, r3
     7f8:	4313      	orrs	r3, r2
     7fa:	e016      	b.n	82a <am_devices_led_on+0xba>
     7fc:	683b      	ldr	r3, [r7, #0]
     7fe:	00db      	lsls	r3, r3, #3
     800:	687a      	ldr	r2, [r7, #4]
     802:	4413      	add	r3, r2
     804:	681b      	ldr	r3, [r3, #0]
     806:	08db      	lsrs	r3, r3, #3
     808:	f003 0204 	and.w	r2, r3, #4
     80c:	4b16      	ldr	r3, [pc, #88]	; (868 <am_devices_led_on+0xf8>)
     80e:	4413      	add	r3, r2
     810:	681a      	ldr	r2, [r3, #0]
     812:	683b      	ldr	r3, [r7, #0]
     814:	00db      	lsls	r3, r3, #3
     816:	6879      	ldr	r1, [r7, #4]
     818:	440b      	add	r3, r1
     81a:	681b      	ldr	r3, [r3, #0]
     81c:	f003 031f 	and.w	r3, r3, #31
     820:	2101      	movs	r1, #1
     822:	fa01 f303 	lsl.w	r3, r1, r3
     826:	43db      	mvns	r3, r3
     828:	4013      	ands	r3, r2
     82a:	6003      	str	r3, [r0, #0]
     82c:	e017      	b.n	85e <am_devices_led_on+0xee>
    else
    {
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
     82e:	683b      	ldr	r3, [r7, #0]
     830:	00db      	lsls	r3, r3, #3
     832:	687a      	ldr	r2, [r7, #4]
     834:	4413      	add	r3, r2
     836:	681b      	ldr	r3, [r3, #0]
     838:	08db      	lsrs	r3, r3, #3
     83a:	f003 0204 	and.w	r2, r3, #4
     83e:	4b0b      	ldr	r3, [pc, #44]	; (86c <am_devices_led_on+0xfc>)
     840:	4413      	add	r3, r2
     842:	4619      	mov	r1, r3
     844:	683b      	ldr	r3, [r7, #0]
     846:	00db      	lsls	r3, r3, #3
     848:	687a      	ldr	r2, [r7, #4]
     84a:	4413      	add	r3, r2
     84c:	681b      	ldr	r3, [r3, #0]
     84e:	f003 031f 	and.w	r3, r3, #31
     852:	2201      	movs	r2, #1
     854:	fa02 f303 	lsl.w	r3, r2, r3
     858:	600b      	str	r3, [r1, #0]
     85a:	e000      	b.n	85e <am_devices_led_on+0xee>
        return;
     85c:	bf00      	nop
    }
#endif //AM_APOLLO3_GPIO
}
     85e:	370c      	adds	r7, #12
     860:	46bd      	mov	sp, r7
     862:	f85d 7b04 	ldr.w	r7, [sp], #4
     866:	4770      	bx	lr
     868:	40010088 	.word	0x40010088
     86c:	400100a8 	.word	0x400100a8

00000870 <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     870:	b480      	push	{r7}
     872:	b083      	sub	sp, #12
     874:	af00      	add	r7, sp, #0
     876:	6078      	str	r0, [r7, #4]
     878:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
     87a:	687b      	ldr	r3, [r7, #4]
     87c:	2b00      	cmp	r3, #0
     87e:	d06d      	beq.n	95c <am_devices_led_off+0xec>
     880:	683b      	ldr	r3, [r7, #0]
     882:	2b1e      	cmp	r3, #30
     884:	d86a      	bhi.n	95c <am_devices_led_off+0xec>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
     886:	683b      	ldr	r3, [r7, #0]
     888:	00db      	lsls	r3, r3, #3
     88a:	687a      	ldr	r2, [r7, #4]
     88c:	4413      	add	r3, r2
     88e:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
     890:	2b31      	cmp	r3, #49	; 0x31
     892:	d863      	bhi.n	95c <am_devices_led_off+0xec>
    }
#else
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     894:	683b      	ldr	r3, [r7, #0]
     896:	00db      	lsls	r3, r3, #3
     898:	687a      	ldr	r2, [r7, #4]
     89a:	4413      	add	r3, r2
     89c:	685b      	ldr	r3, [r3, #4]
     89e:	f003 0302 	and.w	r3, r3, #2
     8a2:	2b00      	cmp	r3, #0
     8a4:	d043      	beq.n	92e <am_devices_led_off+0xbe>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     8a6:	683b      	ldr	r3, [r7, #0]
     8a8:	00db      	lsls	r3, r3, #3
     8aa:	687a      	ldr	r2, [r7, #4]
     8ac:	4413      	add	r3, r2
     8ae:	681b      	ldr	r3, [r3, #0]
     8b0:	08db      	lsrs	r3, r3, #3
     8b2:	f003 0204 	and.w	r2, r3, #4
     8b6:	4b2c      	ldr	r3, [pc, #176]	; (968 <am_devices_led_off+0xf8>)
     8b8:	4413      	add	r3, r2
     8ba:	4618      	mov	r0, r3
     8bc:	683b      	ldr	r3, [r7, #0]
     8be:	00db      	lsls	r3, r3, #3
     8c0:	687a      	ldr	r2, [r7, #4]
     8c2:	4413      	add	r3, r2
     8c4:	685b      	ldr	r3, [r3, #4]
     8c6:	f003 0301 	and.w	r3, r3, #1
     8ca:	2b00      	cmp	r3, #0
     8cc:	d116      	bne.n	8fc <am_devices_led_off+0x8c>
     8ce:	683b      	ldr	r3, [r7, #0]
     8d0:	00db      	lsls	r3, r3, #3
     8d2:	687a      	ldr	r2, [r7, #4]
     8d4:	4413      	add	r3, r2
     8d6:	681b      	ldr	r3, [r3, #0]
     8d8:	08db      	lsrs	r3, r3, #3
     8da:	f003 0204 	and.w	r2, r3, #4
     8de:	4b22      	ldr	r3, [pc, #136]	; (968 <am_devices_led_off+0xf8>)
     8e0:	4413      	add	r3, r2
     8e2:	681a      	ldr	r2, [r3, #0]
     8e4:	683b      	ldr	r3, [r7, #0]
     8e6:	00db      	lsls	r3, r3, #3
     8e8:	6879      	ldr	r1, [r7, #4]
     8ea:	440b      	add	r3, r1
     8ec:	681b      	ldr	r3, [r3, #0]
     8ee:	f003 031f 	and.w	r3, r3, #31
     8f2:	2101      	movs	r1, #1
     8f4:	fa01 f303 	lsl.w	r3, r1, r3
     8f8:	4313      	orrs	r3, r2
     8fa:	e016      	b.n	92a <am_devices_led_off+0xba>
     8fc:	683b      	ldr	r3, [r7, #0]
     8fe:	00db      	lsls	r3, r3, #3
     900:	687a      	ldr	r2, [r7, #4]
     902:	4413      	add	r3, r2
     904:	681b      	ldr	r3, [r3, #0]
     906:	08db      	lsrs	r3, r3, #3
     908:	f003 0204 	and.w	r2, r3, #4
     90c:	4b16      	ldr	r3, [pc, #88]	; (968 <am_devices_led_off+0xf8>)
     90e:	4413      	add	r3, r2
     910:	681a      	ldr	r2, [r3, #0]
     912:	683b      	ldr	r3, [r7, #0]
     914:	00db      	lsls	r3, r3, #3
     916:	6879      	ldr	r1, [r7, #4]
     918:	440b      	add	r3, r1
     91a:	681b      	ldr	r3, [r3, #0]
     91c:	f003 031f 	and.w	r3, r3, #31
     920:	2101      	movs	r1, #1
     922:	fa01 f303 	lsl.w	r3, r1, r3
     926:	43db      	mvns	r3, r3
     928:	4013      	ands	r3, r2
     92a:	6003      	str	r3, [r0, #0]
     92c:	e017      	b.n	95e <am_devices_led_off+0xee>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
     92e:	683b      	ldr	r3, [r7, #0]
     930:	00db      	lsls	r3, r3, #3
     932:	687a      	ldr	r2, [r7, #4]
     934:	4413      	add	r3, r2
     936:	681b      	ldr	r3, [r3, #0]
     938:	08db      	lsrs	r3, r3, #3
     93a:	f003 0204 	and.w	r2, r3, #4
     93e:	4b0b      	ldr	r3, [pc, #44]	; (96c <am_devices_led_off+0xfc>)
     940:	4413      	add	r3, r2
     942:	4619      	mov	r1, r3
     944:	683b      	ldr	r3, [r7, #0]
     946:	00db      	lsls	r3, r3, #3
     948:	687a      	ldr	r2, [r7, #4]
     94a:	4413      	add	r3, r2
     94c:	681b      	ldr	r3, [r3, #0]
     94e:	f003 031f 	and.w	r3, r3, #31
     952:	2201      	movs	r2, #1
     954:	fa02 f303 	lsl.w	r3, r2, r3
     958:	600b      	str	r3, [r1, #0]
     95a:	e000      	b.n	95e <am_devices_led_off+0xee>
        return;
     95c:	bf00      	nop
    }
#endif
}
     95e:	370c      	adds	r7, #12
     960:	46bd      	mov	sp, r7
     962:	f85d 7b04 	ldr.w	r7, [sp], #4
     966:	4770      	bx	lr
     968:	40010088 	.word	0x40010088
     96c:	400100b4 	.word	0x400100b4

00000970 <am_devices_led_toggle>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     970:	b580      	push	{r7, lr}
     972:	b082      	sub	sp, #8
     974:	af00      	add	r7, sp, #0
     976:	6078      	str	r0, [r7, #4]
     978:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
     97a:	687b      	ldr	r3, [r7, #4]
     97c:	2b00      	cmp	r3, #0
     97e:	d06e      	beq.n	a5e <am_devices_led_toggle+0xee>
     980:	683b      	ldr	r3, [r7, #0]
     982:	2b1e      	cmp	r3, #30
     984:	d86b      	bhi.n	a5e <am_devices_led_toggle+0xee>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
     986:	683b      	ldr	r3, [r7, #0]
     988:	00db      	lsls	r3, r3, #3
     98a:	687a      	ldr	r2, [r7, #4]
     98c:	4413      	add	r3, r2
     98e:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
     990:	2b31      	cmp	r3, #49	; 0x31
     992:	d864      	bhi.n	a5e <am_devices_led_toggle+0xee>
    }
#else
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     994:	683b      	ldr	r3, [r7, #0]
     996:	00db      	lsls	r3, r3, #3
     998:	687a      	ldr	r2, [r7, #4]
     99a:	4413      	add	r3, r2
     99c:	685b      	ldr	r3, [r3, #4]
     99e:	f003 0302 	and.w	r3, r3, #2
     9a2:	2b00      	cmp	r3, #0
     9a4:	d022      	beq.n	9ec <am_devices_led_toggle+0x7c>
    {
        am_hal_gpio_out_bit_toggle(psLEDs[ui32LEDNum].ui32GPIONumber);
     9a6:	683b      	ldr	r3, [r7, #0]
     9a8:	00db      	lsls	r3, r3, #3
     9aa:	687a      	ldr	r2, [r7, #4]
     9ac:	4413      	add	r3, r2
     9ae:	681b      	ldr	r3, [r3, #0]
     9b0:	08db      	lsrs	r3, r3, #3
     9b2:	f003 0204 	and.w	r2, r3, #4
     9b6:	4b2c      	ldr	r3, [pc, #176]	; (a68 <am_devices_led_toggle+0xf8>)
     9b8:	4413      	add	r3, r2
     9ba:	4618      	mov	r0, r3
     9bc:	683b      	ldr	r3, [r7, #0]
     9be:	00db      	lsls	r3, r3, #3
     9c0:	687a      	ldr	r2, [r7, #4]
     9c2:	4413      	add	r3, r2
     9c4:	681b      	ldr	r3, [r3, #0]
     9c6:	08db      	lsrs	r3, r3, #3
     9c8:	f003 0204 	and.w	r2, r3, #4
     9cc:	4b26      	ldr	r3, [pc, #152]	; (a68 <am_devices_led_toggle+0xf8>)
     9ce:	4413      	add	r3, r2
     9d0:	681a      	ldr	r2, [r3, #0]
     9d2:	683b      	ldr	r3, [r7, #0]
     9d4:	00db      	lsls	r3, r3, #3
     9d6:	6879      	ldr	r1, [r7, #4]
     9d8:	440b      	add	r3, r1
     9da:	681b      	ldr	r3, [r3, #0]
     9dc:	f003 031f 	and.w	r3, r3, #31
     9e0:	2101      	movs	r1, #1
     9e2:	fa01 f303 	lsl.w	r3, r1, r3
     9e6:	4053      	eors	r3, r2
     9e8:	6003      	str	r3, [r0, #0]
     9ea:	e039      	b.n	a60 <am_devices_led_toggle+0xf0>
    else
    {
        //
        // Check to see if the LED pin is enabled.
        //
        if ( am_hal_gpio_out_enable_bit_get(psLEDs[ui32LEDNum].ui32GPIONumber) )
     9ec:	683b      	ldr	r3, [r7, #0]
     9ee:	00db      	lsls	r3, r3, #3
     9f0:	687a      	ldr	r2, [r7, #4]
     9f2:	4413      	add	r3, r2
     9f4:	681b      	ldr	r3, [r3, #0]
     9f6:	4618      	mov	r0, r3
     9f8:	f001 fbea 	bl	21d0 <am_hal_gpio_out_enable_bit_get>
     9fc:	4603      	mov	r3, r0
     9fe:	2b00      	cmp	r3, #0
     a00:	d016      	beq.n	a30 <am_devices_led_toggle+0xc0>
        {
            //
            // If it was enabled, turn if off.
            //
            am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
     a02:	683b      	ldr	r3, [r7, #0]
     a04:	00db      	lsls	r3, r3, #3
     a06:	687a      	ldr	r2, [r7, #4]
     a08:	4413      	add	r3, r2
     a0a:	681b      	ldr	r3, [r3, #0]
     a0c:	08db      	lsrs	r3, r3, #3
     a0e:	f003 0204 	and.w	r2, r3, #4
     a12:	4b16      	ldr	r3, [pc, #88]	; (a6c <am_devices_led_toggle+0xfc>)
     a14:	4413      	add	r3, r2
     a16:	4619      	mov	r1, r3
     a18:	683b      	ldr	r3, [r7, #0]
     a1a:	00db      	lsls	r3, r3, #3
     a1c:	687a      	ldr	r2, [r7, #4]
     a1e:	4413      	add	r3, r2
     a20:	681b      	ldr	r3, [r3, #0]
     a22:	f003 031f 	and.w	r3, r3, #31
     a26:	2201      	movs	r2, #1
     a28:	fa02 f303 	lsl.w	r3, r2, r3
     a2c:	600b      	str	r3, [r1, #0]
     a2e:	e017      	b.n	a60 <am_devices_led_toggle+0xf0>
        else
        {
            //
            // If it was not enabled, turn if on.
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
     a30:	683b      	ldr	r3, [r7, #0]
     a32:	00db      	lsls	r3, r3, #3
     a34:	687a      	ldr	r2, [r7, #4]
     a36:	4413      	add	r3, r2
     a38:	681b      	ldr	r3, [r3, #0]
     a3a:	08db      	lsrs	r3, r3, #3
     a3c:	f003 0204 	and.w	r2, r3, #4
     a40:	4b0b      	ldr	r3, [pc, #44]	; (a70 <am_devices_led_toggle+0x100>)
     a42:	4413      	add	r3, r2
     a44:	4619      	mov	r1, r3
     a46:	683b      	ldr	r3, [r7, #0]
     a48:	00db      	lsls	r3, r3, #3
     a4a:	687a      	ldr	r2, [r7, #4]
     a4c:	4413      	add	r3, r2
     a4e:	681b      	ldr	r3, [r3, #0]
     a50:	f003 031f 	and.w	r3, r3, #31
     a54:	2201      	movs	r2, #1
     a56:	fa02 f303 	lsl.w	r3, r2, r3
     a5a:	600b      	str	r3, [r1, #0]
     a5c:	e000      	b.n	a60 <am_devices_led_toggle+0xf0>
        return;
     a5e:	bf00      	nop
        }
    }
#endif
}
     a60:	3708      	adds	r7, #8
     a62:	46bd      	mov	sp, r7
     a64:	bd80      	pop	{r7, pc}
     a66:	bf00      	nop
     a68:	40010088 	.word	0x40010088
     a6c:	400100b4 	.word	0x400100b4
     a70:	400100a8 	.word	0x400100a8

00000a74 <am_adc_isr>:
// ADC Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_adc_isr(void)
{
     a74:	b580      	push	{r7, lr}
     a76:	b082      	sub	sp, #8
     a78:	af00      	add	r7, sp, #0
    am_hal_adc_fifo_read_t fifo_info;

    //
    // Clear ADC Interrupt (write to clear).
    //
    AM_REGn(CTIMER, 0, INTCLR) = AM_REG_CTIMER_INTCLR_CTMRA0INT_M;
     a7a:	4b11      	ldr	r3, [pc, #68]	; (ac0 <am_adc_isr+0x4c>)
     a7c:	2201      	movs	r2, #1
     a7e:	601a      	str	r2, [r3, #0]

    //
    // Toggle LED 3.
    //
    am_devices_led_toggle(am_bsp_psLEDs, 3);
     a80:	2103      	movs	r1, #3
     a82:	4810      	ldr	r0, [pc, #64]	; (ac4 <am_adc_isr+0x50>)
     a84:	f7ff ff74 	bl	970 <am_devices_led_toggle>

    //
    // Keep grabbing value from the ADC FIFO until it goes empty.
    //
    while (am_hal_adc_fifo_read(&fifo_info))
     a88:	e009      	b.n	a9e <am_adc_isr+0x2a>
    {
        //
        // Select which one of the two enabled slots is here right now.
        //
        if (fifo_info.ui8Slot == 5)
     a8a:	797b      	ldrb	r3, [r7, #5]
     a8c:	2b05      	cmp	r3, #5
     a8e:	d103      	bne.n	a98 <am_adc_isr+0x24>
        {
            //
            // Just grab the ADC code for the battery voltage divider.
            //
            g_ui16ADCVDD_code = fifo_info.ui16Data;
     a90:	88fa      	ldrh	r2, [r7, #6]
     a92:	4b0d      	ldr	r3, [pc, #52]	; (ac8 <am_adc_isr+0x54>)
     a94:	801a      	strh	r2, [r3, #0]
     a96:	e002      	b.n	a9e <am_adc_isr+0x2a>
        else
        {
            //
            // Just grab the ADC code for the temperature sensor.
            //
            g_ui16ADCTEMP_code = fifo_info.ui16Data;
     a98:	88fa      	ldrh	r2, [r7, #6]
     a9a:	4b0c      	ldr	r3, [pc, #48]	; (acc <am_adc_isr+0x58>)
     a9c:	801a      	strh	r2, [r3, #0]
    while (am_hal_adc_fifo_read(&fifo_info))
     a9e:	1d3b      	adds	r3, r7, #4
     aa0:	4618      	mov	r0, r3
     aa2:	f001 fa7b 	bl	1f9c <am_hal_adc_fifo_read>
     aa6:	4603      	mov	r3, r0
     aa8:	2b00      	cmp	r3, #0
     aaa:	d1ee      	bne.n	a8a <am_adc_isr+0x16>
#endif // AM_PART_APOLLO2

    //
    // Signal interrupt arrival to base level.
    //
    g_ui32SampleCount++;
     aac:	4b08      	ldr	r3, [pc, #32]	; (ad0 <am_adc_isr+0x5c>)
     aae:	681b      	ldr	r3, [r3, #0]
     ab0:	3301      	adds	r3, #1
     ab2:	4a07      	ldr	r2, [pc, #28]	; (ad0 <am_adc_isr+0x5c>)
     ab4:	6013      	str	r3, [r2, #0]
}
     ab6:	bf00      	nop
     ab8:	3708      	adds	r7, #8
     aba:	46bd      	mov	sp, r7
     abc:	bd80      	pop	{r7, pc}
     abe:	bf00      	nop
     ac0:	40008208 	.word	0x40008208
     ac4:	1000402c 	.word	0x1000402c
     ac8:	1000417a 	.word	0x1000417a
     acc:	10004178 	.word	0x10004178
     ad0:	10004174 	.word	0x10004174

00000ad4 <adc_init>:
// ADC INIT Function
//
//*****************************************************************************
void
adc_init(void)
{
     ad4:	b580      	push	{r7, lr}
     ad6:	af00      	add	r7, sp, #0
    //
    // We MUST turn on band gap to use the Temp Sensor.
    // The ADC hardware in mode 2 will cycle the power to the bandgap
    // automatically.
    //
    am_hal_mcuctrl_bandgap_enable();
     ad8:	f001 fc22 	bl	2320 <am_hal_mcuctrl_bandgap_enable>
#endif

    //
    // Configure the ADC.
    //
    am_hal_adc_config(&g_sADC_CfgA);
     adc:	4814      	ldr	r0, [pc, #80]	; (b30 <adc_init+0x5c>)
     ade:	f001 f9f3 	bl	1ec8 <am_hal_adc_config>

    //
    // Initialize the slot control registers.
    //
    am_hal_adc_slot_config(0, 0); // unused slot
     ae2:	2100      	movs	r1, #0
     ae4:	2000      	movs	r0, #0
     ae6:	f001 fa51 	bl	1f8c <am_hal_adc_slot_config>
    am_hal_adc_slot_config(1, 0); // unused slot
     aea:	2100      	movs	r1, #0
     aec:	2001      	movs	r0, #1
     aee:	f001 fa4d 	bl	1f8c <am_hal_adc_slot_config>
    am_hal_adc_slot_config(2, 0); // unused slot
     af2:	2100      	movs	r1, #0
     af4:	2002      	movs	r0, #2
     af6:	f001 fa49 	bl	1f8c <am_hal_adc_slot_config>
    am_hal_adc_slot_config(3, 0); // unused slot
     afa:	2100      	movs	r1, #0
     afc:	2003      	movs	r0, #3
     afe:	f001 fa45 	bl	1f8c <am_hal_adc_slot_config>
    am_hal_adc_slot_config(4, 0); // unused slot
     b02:	2100      	movs	r1, #0
     b04:	2004      	movs	r0, #4
     b06:	f001 fa41 	bl	1f8c <am_hal_adc_slot_config>
    am_hal_adc_slot_config(5, (AM_HAL_ADC_SLOT_AVG_1        |
     b0a:	f640 4103 	movw	r1, #3075	; 0xc03
     b0e:	2005      	movs	r0, #5
     b10:	f001 fa3c 	bl	1f8c <am_hal_adc_slot_config>
                               AM_HAL_ADC_SLOT_CHSEL_VBATT  |
                               AM_HAL_ADC_SLOT_WINDOW_EN    |
                               AM_HAL_ADC_SLOT_ENABLE));

    am_hal_adc_slot_config(6, 0); // unused slot
     b14:	2100      	movs	r1, #0
     b16:	2006      	movs	r0, #6
     b18:	f001 fa38 	bl	1f8c <am_hal_adc_slot_config>
#if AM_PART_APOLLO
    am_hal_adc_slot_config(7, (AM_HAL_ADC_SLOT_AVG_1            |
     b1c:	f640 0103 	movw	r1, #2051	; 0x803
     b20:	2007      	movs	r0, #7
     b22:	f001 fa33 	bl	1f8c <am_hal_adc_slot_config>
#endif

    //
    // Enable the ADC.
    //
    am_hal_adc_enable();
     b26:	f001 fa5b 	bl	1fe0 <am_hal_adc_enable>
}
     b2a:	bf00      	nop
     b2c:	bd80      	pop	{r7, pc}
     b2e:	bf00      	nop
     b30:	10004000 	.word	0x10004000

00000b34 <adc_init_timer3A>:
// Enable the ADC INIT TIMER 3A function and set for 0.5 second period.
//
//*****************************************************************************
void
adc_init_timer3A(void)
{
     b34:	b580      	push	{r7, lr}
     b36:	b082      	sub	sp, #8
     b38:	af00      	add	r7, sp, #0
    uint32_t ui32Period = 2000; // Set for 2 second (2000ms) period
     b3a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
     b3e:	607b      	str	r3, [r7, #4]

    //
    // LFRC has to be turned on for this example because we are running this
    // timer off of the LFRC.
    //
    am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_LFRC);
     b40:	2002      	movs	r0, #2
     b42:	f001 faa5 	bl	2090 <am_hal_clkgen_osc_start>

    //
    // Set up timer 3A so start by clearing it.
    //
    am_hal_ctimer_clear(3, AM_HAL_CTIMER_TIMERA);
     b46:	f64f 71ff 	movw	r1, #65535	; 0xffff
     b4a:	2003      	movs	r0, #3
     b4c:	f001 fadc 	bl	2108 <am_hal_ctimer_clear>

    //
    // Configure the timer to count 32Hz LFRC clocks but don't start it yet.
    //
    am_hal_ctimer_config(3, &g_sTimer3);
     b50:	4911      	ldr	r1, [pc, #68]	; (b98 <adc_init_timer3A+0x64>)
     b52:	2003      	movs	r0, #3
     b54:	f001 fab0 	bl	20b8 <am_hal_ctimer_config>

    //
    // Compute CMPR value needed for desired period based on a 32HZ clock.
    //
    ui32Period = ui32Period * 32 / 1000;
     b58:	687b      	ldr	r3, [r7, #4]
     b5a:	015b      	lsls	r3, r3, #5
     b5c:	4a0f      	ldr	r2, [pc, #60]	; (b9c <adc_init_timer3A+0x68>)
     b5e:	fba2 2303 	umull	r2, r3, r2, r3
     b62:	099b      	lsrs	r3, r3, #6
     b64:	607b      	str	r3, [r7, #4]
    am_hal_ctimer_period_set(3, AM_HAL_CTIMER_TIMERA,
     b66:	687b      	ldr	r3, [r7, #4]
     b68:	085b      	lsrs	r3, r3, #1
     b6a:	687a      	ldr	r2, [r7, #4]
     b6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     b70:	2003      	movs	r0, #3
     b72:	f001 fadd 	bl	2130 <am_hal_ctimer_period_set>

    //
    // Enable the timer output "pin". This refers to the pin as seen from
    // inside the timer. The actual GPIO pin is neither enabled nor driven.
    //
    am_hal_ctimer_pin_enable(3, AM_HAL_CTIMER_TIMERA);
     b76:	f64f 71ff 	movw	r1, #65535	; 0xffff
     b7a:	2003      	movs	r0, #3
     b7c:	f001 face 	bl	211c <am_hal_ctimer_pin_enable>

    //
    // Set up timer 3A as the trigger source for the ADC.
    //
    am_hal_ctimer_adc_trigger_enable();
     b80:	f001 fb14 	bl	21ac <am_hal_ctimer_adc_trigger_enable>

    //
    // Start timer 3A.
    //
    am_hal_ctimer_start(3, AM_HAL_CTIMER_TIMERA);
     b84:	f64f 71ff 	movw	r1, #65535	; 0xffff
     b88:	2003      	movs	r0, #3
     b8a:	f001 faab 	bl	20e4 <am_hal_ctimer_start>
}
     b8e:	bf00      	nop
     b90:	3708      	adds	r7, #8
     b92:	46bd      	mov	sp, r7
     b94:	bd80      	pop	{r7, pc}
     b96:	bf00      	nop
     b98:	10004020 	.word	0x10004020
     b9c:	10624dd3 	.word	0x10624dd3

00000ba0 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     ba0:	b590      	push	{r4, r7, lr}
     ba2:	b08d      	sub	sp, #52	; 0x34
     ba4:	af02      	add	r7, sp, #8
    bool  bMeasured;
    float fTempF;
    int32_t i32BaseLevelCount;
    const float fReferenceVoltage = 1.5;
     ba6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
     baa:	623b      	str	r3, [r7, #32]
    float fTemp, fVoltage, fOffset;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     bac:	2000      	movs	r0, #0
     bae:	f001 fa53 	bl	2058 <am_hal_clkgen_sysclk_select>
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     bb2:	f001 f949 	bl	1e48 <am_bsp_low_power_init>

    //
    // Initialize device drivers for the LEDs on the board.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
     bb6:	2105      	movs	r1, #5
     bb8:	48ba      	ldr	r0, [pc, #744]	; (ea4 <main+0x304>)
     bba:	f7ff fdb7 	bl	72c <am_devices_led_array_init>

    //
    // Configure the Button 0 pin as a simple GPIO input.
    //
    am_hal_gpio_pin_config(AM_BSP_GPIO_BUTTON0, AM_HAL_PIN_INPUT);
     bbe:	4bba      	ldr	r3, [pc, #744]	; (ea8 <main+0x308>)
     bc0:	2273      	movs	r2, #115	; 0x73
     bc2:	601a      	str	r2, [r3, #0]
     bc4:	4ab9      	ldr	r2, [pc, #740]	; (eac <main+0x30c>)
     bc6:	4bb9      	ldr	r3, [pc, #740]	; (eac <main+0x30c>)
     bc8:	681b      	ldr	r3, [r3, #0]
     bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     bce:	6013      	str	r3, [r2, #0]
     bd0:	4ab7      	ldr	r2, [pc, #732]	; (eb0 <main+0x310>)
     bd2:	4bb7      	ldr	r3, [pc, #732]	; (eb0 <main+0x310>)
     bd4:	681b      	ldr	r3, [r3, #0]
     bd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     bda:	f443 53d0 	orr.w	r3, r3, #6656	; 0x1a00
     bde:	6013      	str	r3, [r2, #0]
     be0:	4bb1      	ldr	r3, [pc, #708]	; (ea8 <main+0x308>)
     be2:	2200      	movs	r2, #0
     be4:	601a      	str	r2, [r3, #0]

    //
    // Initialize the SWO GPIO pin.
    //
    am_bsp_pin_enable(ITM_SWO);
     be6:	4bb0      	ldr	r3, [pc, #704]	; (ea8 <main+0x308>)
     be8:	2273      	movs	r2, #115	; 0x73
     bea:	601a      	str	r2, [r3, #0]
     bec:	4ab1      	ldr	r2, [pc, #708]	; (eb4 <main+0x314>)
     bee:	4bb1      	ldr	r3, [pc, #708]	; (eb4 <main+0x314>)
     bf0:	681b      	ldr	r3, [r3, #0]
     bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     bf6:	6013      	str	r3, [r2, #0]
     bf8:	4aaf      	ldr	r2, [pc, #700]	; (eb8 <main+0x318>)
     bfa:	4baf      	ldr	r3, [pc, #700]	; (eb8 <main+0x318>)
     bfc:	681b      	ldr	r3, [r3, #0]
     bfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     c02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     c06:	6013      	str	r3, [r2, #0]
     c08:	4ba7      	ldr	r3, [pc, #668]	; (ea8 <main+0x308>)
     c0a:	2200      	movs	r2, #0
     c0c:	601a      	str	r2, [r3, #0]

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     c0e:	f001 fb1d 	bl	224c <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     c12:	f001 f92b 	bl	1e6c <am_bsp_debug_printf_enable>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     c16:	48a9      	ldr	r0, [pc, #676]	; (ebc <main+0x31c>)
     c18:	f000 fa6a 	bl	10f0 <am_util_stdio_printf_init>

    //
    // Clear the terminal screen, and print a quick message to show that we're
    // alive.
    //
    am_util_stdio_terminal_clear();
     c1c:	f001 f90a 	bl	1e34 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("ADC VBATT and Temperature Sensing Example.\n");
     c20:	48a7      	ldr	r0, [pc, #668]	; (ec0 <main+0x320>)
     c22:	f001 f8e9 	bl	1df8 <am_util_stdio_printf>

    //
    // Enable floating point.
    //
    am_hal_sysctrl_fpu_enable();
     c26:	f001 fbcb 	bl	23c0 <am_hal_sysctrl_fpu_enable>
    am_hal_sysctrl_fpu_stacking_enable(true);
     c2a:	2001      	movs	r0, #1
     c2c:	f001 fbd0 	bl	23d0 <am_hal_sysctrl_fpu_stacking_enable>

    //
    // Initialize CTIMER 3A to trigger the ADC every 0.5 seconds.
    //
    adc_init_timer3A();
     c30:	f7ff ff80 	bl	b34 <adc_init_timer3A>

    //
    // Print out ctimer initial register state.
    //
    am_util_stdio_printf("\n");
     c34:	48a3      	ldr	r0, [pc, #652]	; (ec4 <main+0x324>)
     c36:	f001 f8df 	bl	1df8 <am_util_stdio_printf>
    am_util_stdio_printf("CTIMER3=0x%08X @ 0x%08X\n",
     c3a:	4ba3      	ldr	r3, [pc, #652]	; (ec8 <main+0x328>)
     c3c:	681b      	ldr	r3, [r3, #0]
     c3e:	4aa2      	ldr	r2, [pc, #648]	; (ec8 <main+0x328>)
     c40:	4619      	mov	r1, r3
     c42:	48a2      	ldr	r0, [pc, #648]	; (ecc <main+0x32c>)
     c44:	f001 f8d8 	bl	1df8 <am_util_stdio_printf>
                         AM_REGVAL(REG_CTIMER_BASEADDR + AM_REG_CTIMER_TMR3_O),
                         REG_CTIMER_BASEADDR + AM_REG_CTIMER_TMR3_O);
    am_util_stdio_printf("CTIMER3=0x%08X @ 0x%08X\n",
     c48:	4ba1      	ldr	r3, [pc, #644]	; (ed0 <main+0x330>)
     c4a:	681b      	ldr	r3, [r3, #0]
     c4c:	4aa0      	ldr	r2, [pc, #640]	; (ed0 <main+0x330>)
     c4e:	4619      	mov	r1, r3
     c50:	489e      	ldr	r0, [pc, #632]	; (ecc <main+0x32c>)
     c52:	f001 f8d1 	bl	1df8 <am_util_stdio_printf>
                         AM_REGVAL(REG_CTIMER_BASEADDR + AM_REG_CTIMER_CMPRA3_O),
                         REG_CTIMER_BASEADDR + AM_REG_CTIMER_CMPRA3_O);
    am_util_stdio_printf("CTIMER3=0x%08X @ 0x%08X\n",
     c56:	4b9f      	ldr	r3, [pc, #636]	; (ed4 <main+0x334>)
     c58:	681b      	ldr	r3, [r3, #0]
     c5a:	4a9e      	ldr	r2, [pc, #632]	; (ed4 <main+0x334>)
     c5c:	4619      	mov	r1, r3
     c5e:	489b      	ldr	r0, [pc, #620]	; (ecc <main+0x32c>)
     c60:	f001 f8ca 	bl	1df8 <am_util_stdio_printf>
                         AM_REGVAL(REG_CTIMER_BASEADDR + AM_REG_CTIMER_CMPRB3_O),
                         REG_CTIMER_BASEADDR + AM_REG_CTIMER_CMPRB3_O);
    am_util_stdio_printf("CTIMER3=0x%08X @ 0x%08X\n",
     c64:	4b9c      	ldr	r3, [pc, #624]	; (ed8 <main+0x338>)
     c66:	681b      	ldr	r3, [r3, #0]
     c68:	4a9b      	ldr	r2, [pc, #620]	; (ed8 <main+0x338>)
     c6a:	4619      	mov	r1, r3
     c6c:	4897      	ldr	r0, [pc, #604]	; (ecc <main+0x32c>)
     c6e:	f001 f8c3 	bl	1df8 <am_util_stdio_printf>
                         REG_CTIMER_BASEADDR + AM_REG_CTIMER_CTRL3_O);

    //
    // Initialize the ADC.
    //
    adc_init();
     c72:	f7ff ff2f 	bl	ad4 <adc_init>

    //
    // Print out ADC initial register state.
    //
    am_util_stdio_printf("\n");
     c76:	4893      	ldr	r0, [pc, #588]	; (ec4 <main+0x324>)
     c78:	f001 f8be 	bl	1df8 <am_util_stdio_printf>
    am_util_stdio_printf("ADC REGISTERS @ 0x%08X\n", (uint32_t)REG_ADC_BASEADDR);
     c7c:	4997      	ldr	r1, [pc, #604]	; (edc <main+0x33c>)
     c7e:	4898      	ldr	r0, [pc, #608]	; (ee0 <main+0x340>)
     c80:	f001 f8ba 	bl	1df8 <am_util_stdio_printf>
    am_util_stdio_printf("ADC CFG   = 0x%08X\n", AM_REG(ADC, CFG));
     c84:	4b95      	ldr	r3, [pc, #596]	; (edc <main+0x33c>)
     c86:	681b      	ldr	r3, [r3, #0]
     c88:	4619      	mov	r1, r3
     c8a:	4896      	ldr	r0, [pc, #600]	; (ee4 <main+0x344>)
     c8c:	f001 f8b4 	bl	1df8 <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT0 = 0x%08X\n", AM_REG(ADC, SL0CFG));
     c90:	4b95      	ldr	r3, [pc, #596]	; (ee8 <main+0x348>)
     c92:	681b      	ldr	r3, [r3, #0]
     c94:	4619      	mov	r1, r3
     c96:	4895      	ldr	r0, [pc, #596]	; (eec <main+0x34c>)
     c98:	f001 f8ae 	bl	1df8 <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT1 = 0x%08X\n", AM_REG(ADC, SL1CFG));
     c9c:	4b94      	ldr	r3, [pc, #592]	; (ef0 <main+0x350>)
     c9e:	681b      	ldr	r3, [r3, #0]
     ca0:	4619      	mov	r1, r3
     ca2:	4894      	ldr	r0, [pc, #592]	; (ef4 <main+0x354>)
     ca4:	f001 f8a8 	bl	1df8 <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT2 = 0x%08X\n", AM_REG(ADC, SL2CFG));
     ca8:	4b93      	ldr	r3, [pc, #588]	; (ef8 <main+0x358>)
     caa:	681b      	ldr	r3, [r3, #0]
     cac:	4619      	mov	r1, r3
     cae:	4893      	ldr	r0, [pc, #588]	; (efc <main+0x35c>)
     cb0:	f001 f8a2 	bl	1df8 <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT3 = 0x%08X\n", AM_REG(ADC, SL3CFG));
     cb4:	4b92      	ldr	r3, [pc, #584]	; (f00 <main+0x360>)
     cb6:	681b      	ldr	r3, [r3, #0]
     cb8:	4619      	mov	r1, r3
     cba:	4892      	ldr	r0, [pc, #584]	; (f04 <main+0x364>)
     cbc:	f001 f89c 	bl	1df8 <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT4 = 0x%08X\n", AM_REG(ADC, SL4CFG));
     cc0:	4b91      	ldr	r3, [pc, #580]	; (f08 <main+0x368>)
     cc2:	681b      	ldr	r3, [r3, #0]
     cc4:	4619      	mov	r1, r3
     cc6:	4891      	ldr	r0, [pc, #580]	; (f0c <main+0x36c>)
     cc8:	f001 f896 	bl	1df8 <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT5 = 0x%08X\n", AM_REG(ADC, SL5CFG));
     ccc:	4b90      	ldr	r3, [pc, #576]	; (f10 <main+0x370>)
     cce:	681b      	ldr	r3, [r3, #0]
     cd0:	4619      	mov	r1, r3
     cd2:	4890      	ldr	r0, [pc, #576]	; (f14 <main+0x374>)
     cd4:	f001 f890 	bl	1df8 <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT6 = 0x%08X\n", AM_REG(ADC, SL6CFG));
     cd8:	4b8f      	ldr	r3, [pc, #572]	; (f18 <main+0x378>)
     cda:	681b      	ldr	r3, [r3, #0]
     cdc:	4619      	mov	r1, r3
     cde:	488f      	ldr	r0, [pc, #572]	; (f1c <main+0x37c>)
     ce0:	f001 f88a 	bl	1df8 <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT7 = 0x%08X\n", AM_REG(ADC, SL7CFG));
     ce4:	4b8e      	ldr	r3, [pc, #568]	; (f20 <main+0x380>)
     ce6:	681b      	ldr	r3, [r3, #0]
     ce8:	4619      	mov	r1, r3
     cea:	488e      	ldr	r0, [pc, #568]	; (f24 <main+0x384>)
     cec:	f001 f884 	bl	1df8 <am_util_stdio_printf>
#if AM_PART_APOLLO
    am_util_stdio_printf("ADC WLIM  = 0x%08X\n", AM_REG(ADC, WLIM));
     cf0:	4b8d      	ldr	r3, [pc, #564]	; (f28 <main+0x388>)
     cf2:	681b      	ldr	r3, [r3, #0]
     cf4:	4619      	mov	r1, r3
     cf6:	488d      	ldr	r0, [pc, #564]	; (f2c <main+0x38c>)
     cf8:	f001 f87e 	bl	1df8 <am_util_stdio_printf>
#endif

    //
    // Print out the temperature trim values as recorded in OTP.
    //
    bMeasured = am_hal_adc_temp_trims_get(&fTemp, &fVoltage, &fOffset);
     cfc:	463a      	mov	r2, r7
     cfe:	1d39      	adds	r1, r7, #4
     d00:	f107 0308 	add.w	r3, r7, #8
     d04:	4618      	mov	r0, r3
     d06:	f001 f925 	bl	1f54 <am_hal_adc_temp_trims_get>
     d0a:	4603      	mov	r3, r0
     d0c:	77fb      	strb	r3, [r7, #31]
    am_util_stdio_printf("\n");
     d0e:	486d      	ldr	r0, [pc, #436]	; (ec4 <main+0x324>)
     d10:	f001 f872 	bl	1df8 <am_util_stdio_printf>
    am_util_stdio_printf("TRIMMED TEMP    = %.3f\n", fTemp);
     d14:	68bb      	ldr	r3, [r7, #8]
     d16:	4618      	mov	r0, r3
     d18:	f7ff fb16 	bl	348 <__aeabi_f2d>
     d1c:	4603      	mov	r3, r0
     d1e:	460c      	mov	r4, r1
     d20:	461a      	mov	r2, r3
     d22:	4623      	mov	r3, r4
     d24:	4882      	ldr	r0, [pc, #520]	; (f30 <main+0x390>)
     d26:	f001 f867 	bl	1df8 <am_util_stdio_printf>
    am_util_stdio_printf("TRIMMED VOLTAGE = %.3f\n", fVoltage);
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	4618      	mov	r0, r3
     d2e:	f7ff fb0b 	bl	348 <__aeabi_f2d>
     d32:	4603      	mov	r3, r0
     d34:	460c      	mov	r4, r1
     d36:	461a      	mov	r2, r3
     d38:	4623      	mov	r3, r4
     d3a:	487e      	ldr	r0, [pc, #504]	; (f34 <main+0x394>)
     d3c:	f001 f85c 	bl	1df8 <am_util_stdio_printf>
    am_util_stdio_printf("TRIMMED Offset  = %.3f\n", fOffset);
     d40:	683b      	ldr	r3, [r7, #0]
     d42:	4618      	mov	r0, r3
     d44:	f7ff fb00 	bl	348 <__aeabi_f2d>
     d48:	4603      	mov	r3, r0
     d4a:	460c      	mov	r4, r1
     d4c:	461a      	mov	r2, r3
     d4e:	4623      	mov	r3, r4
     d50:	4879      	ldr	r0, [pc, #484]	; (f38 <main+0x398>)
     d52:	f001 f851 	bl	1df8 <am_util_stdio_printf>
    am_util_stdio_printf("Note - these trim values are '%s' values.\n",
     d56:	7ffb      	ldrb	r3, [r7, #31]
     d58:	2b00      	cmp	r3, #0
     d5a:	d001      	beq.n	d60 <main+0x1c0>
     d5c:	4b77      	ldr	r3, [pc, #476]	; (f3c <main+0x39c>)
     d5e:	e000      	b.n	d62 <main+0x1c2>
     d60:	4b77      	ldr	r3, [pc, #476]	; (f40 <main+0x3a0>)
     d62:	4619      	mov	r1, r3
     d64:	4877      	ldr	r0, [pc, #476]	; (f44 <main+0x3a4>)
     d66:	f001 f847 	bl	1df8 <am_util_stdio_printf>
                         bMeasured ? "calibrated" : "uncalibrated default");
    am_util_stdio_printf("\n");
     d6a:	4856      	ldr	r0, [pc, #344]	; (ec4 <main+0x324>)
     d6c:	f001 f844 	bl	1df8 <am_util_stdio_printf>

    //
    // Enable the ADC interrupt in the NVIC.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_ADC);
     d70:	2018      	movs	r0, #24
     d72:	f001 fa3f 	bl	21f4 <am_hal_interrupt_enable>
    am_hal_interrupt_master_enable();
     d76:	f001 fa65 	bl	2244 <am_hal_interrupt_master_enable>

    //
    // Enable the ADC interrupts in the ADC.
    //
    am_hal_adc_int_enable(AM_REG_ADC_INTEN_WCINC(1)     |
     d7a:	203f      	movs	r0, #63	; 0x3f
     d7c:	f001 f948 	bl	2010 <am_hal_adc_int_enable>
                          AM_REG_ADC_INTEN_CNVCMP(1));

    //
    // Reset the sample count which will be incremented by the ISR.
    //
    g_ui32SampleCount = 0;
     d80:	4b71      	ldr	r3, [pc, #452]	; (f48 <main+0x3a8>)
     d82:	2200      	movs	r2, #0
     d84:	601a      	str	r2, [r3, #0]

    //
    // Kick Start Timer 3 with an ADC software trigger in REPEAT used.
    //
    am_hal_adc_trigger();
     d86:	f001 f925 	bl	1fd4 <am_hal_adc_trigger>

    //
    // Track buffer depth for progress messages.
    //
    i32BaseLevelCount = g_ui32SampleCount;
     d8a:	4b6f      	ldr	r3, [pc, #444]	; (f48 <main+0x3a8>)
     d8c:	681b      	ldr	r3, [r3, #0]
     d8e:	627b      	str	r3, [r7, #36]	; 0x24
    while (1)
    {
        //
        // Print the battery voltage and temperature for each interrupt
        //
        if (g_ui32SampleCount > i32BaseLevelCount)
     d90:	4b6d      	ldr	r3, [pc, #436]	; (f48 <main+0x3a8>)
     d92:	681a      	ldr	r2, [r3, #0]
     d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d96:	429a      	cmp	r2, r3
     d98:	d977      	bls.n	e8a <main+0x2ea>
        {
            i32BaseLevelCount = g_ui32SampleCount;
     d9a:	4b6b      	ldr	r3, [pc, #428]	; (f48 <main+0x3a8>)
     d9c:	681b      	ldr	r3, [r3, #0]
     d9e:	627b      	str	r3, [r7, #36]	; 0x24

            //
            // Compute the voltage divider output.
            //
            fVBATT = ((float)g_ui16ADCVDD_code) * 3.0f * fReferenceVoltage
     da0:	4b6a      	ldr	r3, [pc, #424]	; (f4c <main+0x3ac>)
     da2:	881b      	ldrh	r3, [r3, #0]
     da4:	ee07 3a90 	vmov	s15, r3
     da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
     dac:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
     db0:	ee27 7a87 	vmul.f32	s14, s15, s14
     db4:	edd7 7a08 	vldr	s15, [r7, #32]
     db8:	ee67 7a27 	vmul.f32	s15, s14, s15
                    / 1024.0f / 64.0f;
     dbc:	eddf 6a64 	vldr	s13, [pc, #400]	; f50 <main+0x3b0>
     dc0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
            fVBATT = ((float)g_ui16ADCVDD_code) * 3.0f * fReferenceVoltage
     dc4:	eddf 6a63 	vldr	s13, [pc, #396]	; f54 <main+0x3b4>
     dc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
     dcc:	edc7 7a06 	vstr	s15, [r7, #24]

            //
            // Print the voltage divider output.
            //
            am_util_stdio_printf("VBATT = <%.3f> (0x%04X) ",
     dd0:	69b8      	ldr	r0, [r7, #24]
     dd2:	f7ff fab9 	bl	348 <__aeabi_f2d>
     dd6:	460a      	mov	r2, r1
     dd8:	4601      	mov	r1, r0
     dda:	4b5c      	ldr	r3, [pc, #368]	; (f4c <main+0x3ac>)
     ddc:	881b      	ldrh	r3, [r3, #0]
     dde:	9300      	str	r3, [sp, #0]
     de0:	4613      	mov	r3, r2
     de2:	460a      	mov	r2, r1
     de4:	485c      	ldr	r0, [pc, #368]	; (f58 <main+0x3b8>)
     de6:	f001 f807 	bl	1df8 <am_util_stdio_printf>
            // Convert and scale the temperature.
            // Temperatures are in Fahrenheit range -40 to 225 degrees.
            // Voltage range is 0.825V to 1.283V
            // First get the ADC voltage corresponding to temperature.
            //
            fADCTempVolts = ((float)g_ui16ADCTEMP_code) * fReferenceVoltage
     dea:	4b5c      	ldr	r3, [pc, #368]	; (f5c <main+0x3bc>)
     dec:	881b      	ldrh	r3, [r3, #0]
     dee:	ee07 3a90 	vmov	s15, r3
     df2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
     df6:	edd7 7a08 	vldr	s15, [r7, #32]
     dfa:	ee27 7a27 	vmul.f32	s14, s14, s15
     dfe:	eddf 6a58 	vldr	s13, [pc, #352]	; f60 <main+0x3c0>
     e02:	eec7 7a26 	vdiv.f32	s15, s14, s13
     e06:	edc7 7a05 	vstr	s15, [r7, #20]
                          / (1024.0f * 64.0f);

            //
            // Now call the HAL routine to convert volts to degrees Celsius.
            //
            fADCTempDegreesC = am_hal_adc_volts_to_celsius(fADCTempVolts);
     e0a:	6978      	ldr	r0, [r7, #20]
     e0c:	f001 f908 	bl	2020 <am_hal_adc_volts_to_celsius>
     e10:	6138      	str	r0, [r7, #16]

            //
            // print the temperature value in Celsius.
            //
            am_util_stdio_printf("TEMP = %.2f C (0x%04X) ",
     e12:	6938      	ldr	r0, [r7, #16]
     e14:	f7ff fa98 	bl	348 <__aeabi_f2d>
     e18:	460a      	mov	r2, r1
     e1a:	4601      	mov	r1, r0
     e1c:	4b4f      	ldr	r3, [pc, #316]	; (f5c <main+0x3bc>)
     e1e:	881b      	ldrh	r3, [r3, #0]
     e20:	9300      	str	r3, [sp, #0]
     e22:	4613      	mov	r3, r2
     e24:	460a      	mov	r2, r1
     e26:	484f      	ldr	r0, [pc, #316]	; (f64 <main+0x3c4>)
     e28:	f000 ffe6 	bl	1df8 <am_util_stdio_printf>
                                 fADCTempDegreesC, g_ui16ADCTEMP_code);

            //
            // Print the temperature value in Fahrenheit.
            //
            fTempF = (fADCTempDegreesC * (9.0f / 5.0f)) + 32.0f;
     e2c:	edd7 7a04 	vldr	s15, [r7, #16]
     e30:	ed9f 7a4d 	vldr	s14, [pc, #308]	; f68 <main+0x3c8>
     e34:	ee67 7a87 	vmul.f32	s15, s15, s14
     e38:	ed9f 7a4c 	vldr	s14, [pc, #304]	; f6c <main+0x3cc>
     e3c:	ee77 7a87 	vadd.f32	s15, s15, s14
     e40:	edc7 7a03 	vstr	s15, [r7, #12]
            am_util_stdio_printf(" %.2f F", fTempF);
     e44:	68f8      	ldr	r0, [r7, #12]
     e46:	f7ff fa7f 	bl	348 <__aeabi_f2d>
     e4a:	4603      	mov	r3, r0
     e4c:	460c      	mov	r4, r1
     e4e:	461a      	mov	r2, r3
     e50:	4623      	mov	r3, r4
     e52:	4847      	ldr	r0, [pc, #284]	; (f70 <main+0x3d0>)
     e54:	f000 ffd0 	bl	1df8 <am_util_stdio_printf>

            //
            // Use button 0 to turn on or off the battery load resistor.
            //
#if AM_PART_APOLLO
            if (!am_hal_gpio_input_bit_read(AM_BSP_GPIO_BUTTON0))
     e58:	4b46      	ldr	r3, [pc, #280]	; (f74 <main+0x3d4>)
     e5a:	681b      	ldr	r3, [r3, #0]
     e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     e60:	2b00      	cmp	r3, #0
     e62:	d109      	bne.n	e78 <main+0x2d8>
            {
                am_util_stdio_printf("BATTERY LOAD RESISTOR ON\n");
     e64:	4844      	ldr	r0, [pc, #272]	; (f78 <main+0x3d8>)
     e66:	f000 ffc7 	bl	1df8 <am_util_stdio_printf>
                am_hal_adc_batt_load_enable();
     e6a:	f001 f8c1 	bl	1ff0 <am_hal_adc_batt_load_enable>
                am_devices_led_on(am_bsp_psLEDs, 2);
     e6e:	2102      	movs	r1, #2
     e70:	480c      	ldr	r0, [pc, #48]	; (ea4 <main+0x304>)
     e72:	f7ff fc7d 	bl	770 <am_devices_led_on>
     e76:	e008      	b.n	e8a <main+0x2ea>
            }
            else
            {
                am_util_stdio_printf("\n");
     e78:	4812      	ldr	r0, [pc, #72]	; (ec4 <main+0x324>)
     e7a:	f000 ffbd 	bl	1df8 <am_util_stdio_printf>
                am_hal_adc_batt_load_disable();
     e7e:	f001 f8bf 	bl	2000 <am_hal_adc_batt_load_disable>
                am_devices_led_off(am_bsp_psLEDs, 2);
     e82:	2102      	movs	r1, #2
     e84:	4807      	ldr	r0, [pc, #28]	; (ea4 <main+0x304>)
     e86:	f7ff fcf3 	bl	870 <am_devices_led_off>
        }

        //
        // Sleep here until the next ADC interrupt comes along.
        //
        am_devices_led_off(am_bsp_psLEDs, 0);
     e8a:	2100      	movs	r1, #0
     e8c:	4805      	ldr	r0, [pc, #20]	; (ea4 <main+0x304>)
     e8e:	f7ff fcef 	bl	870 <am_devices_led_off>
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     e92:	2001      	movs	r0, #1
     e94:	f001 fa7e 	bl	2394 <am_hal_sysctrl_sleep>
        am_devices_led_on(am_bsp_psLEDs, 0);
     e98:	2100      	movs	r1, #0
     e9a:	4802      	ldr	r0, [pc, #8]	; (ea4 <main+0x304>)
     e9c:	f7ff fc68 	bl	770 <am_devices_led_on>
        if (g_ui32SampleCount > i32BaseLevelCount)
     ea0:	e776      	b.n	d90 <main+0x1f0>
     ea2:	bf00      	nop
     ea4:	1000402c 	.word	0x1000402c
     ea8:	40010060 	.word	0x40010060
     eac:	40010048 	.word	0x40010048
     eb0:	40010010 	.word	0x40010010
     eb4:	40010054 	.word	0x40010054
     eb8:	40010028 	.word	0x40010028
     ebc:	00001ec5 	.word	0x00001ec5
     ec0:	000024b0 	.word	0x000024b0
     ec4:	000024dc 	.word	0x000024dc
     ec8:	40008030 	.word	0x40008030
     ecc:	000024e0 	.word	0x000024e0
     ed0:	40008034 	.word	0x40008034
     ed4:	40008038 	.word	0x40008038
     ed8:	4000803c 	.word	0x4000803c
     edc:	50008000 	.word	0x50008000
     ee0:	000024fc 	.word	0x000024fc
     ee4:	00002514 	.word	0x00002514
     ee8:	5000800c 	.word	0x5000800c
     eec:	00002528 	.word	0x00002528
     ef0:	50008010 	.word	0x50008010
     ef4:	0000253c 	.word	0x0000253c
     ef8:	50008014 	.word	0x50008014
     efc:	00002550 	.word	0x00002550
     f00:	50008018 	.word	0x50008018
     f04:	00002564 	.word	0x00002564
     f08:	5000801c 	.word	0x5000801c
     f0c:	00002578 	.word	0x00002578
     f10:	50008020 	.word	0x50008020
     f14:	0000258c 	.word	0x0000258c
     f18:	50008024 	.word	0x50008024
     f1c:	000025a0 	.word	0x000025a0
     f20:	50008028 	.word	0x50008028
     f24:	000025b4 	.word	0x000025b4
     f28:	5000802c 	.word	0x5000802c
     f2c:	000025c8 	.word	0x000025c8
     f30:	000025dc 	.word	0x000025dc
     f34:	000025f4 	.word	0x000025f4
     f38:	0000260c 	.word	0x0000260c
     f3c:	00002624 	.word	0x00002624
     f40:	00002630 	.word	0x00002630
     f44:	00002648 	.word	0x00002648
     f48:	10004174 	.word	0x10004174
     f4c:	1000417a 	.word	0x1000417a
     f50:	44800000 	.word	0x44800000
     f54:	42800000 	.word	0x42800000
     f58:	00002674 	.word	0x00002674
     f5c:	10004178 	.word	0x10004178
     f60:	47800000 	.word	0x47800000
     f64:	00002690 	.word	0x00002690
     f68:	3fe66666 	.word	0x3fe66666
     f6c:	42000000 	.word	0x42000000
     f70:	000026a8 	.word	0x000026a8
     f74:	40010080 	.word	0x40010080
     f78:	000026b0 	.word	0x000026b0

00000f7c <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     f7c:	4811      	ldr	r0, [pc, #68]	; (fc4 <zero_loop+0x12>)
     f7e:	4912      	ldr	r1, [pc, #72]	; (fc8 <zero_loop+0x16>)
     f80:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     f82:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     f86:	4811      	ldr	r0, [pc, #68]	; (fcc <zero_loop+0x1a>)
     f88:	6801      	ldr	r1, [r0, #0]
     f8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     f8e:	6001      	str	r1, [r0, #0]
     f90:	f3bf 8f4f 	dsb	sy
     f94:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     f98:	480d      	ldr	r0, [pc, #52]	; (fd0 <zero_loop+0x1e>)
     f9a:	490e      	ldr	r1, [pc, #56]	; (fd4 <zero_loop+0x22>)
     f9c:	4a0e      	ldr	r2, [pc, #56]	; (fd8 <zero_loop+0x26>)

00000f9e <copy_loop>:
     f9e:	f850 3b04 	ldr.w	r3, [r0], #4
     fa2:	f841 3b04 	str.w	r3, [r1], #4
     fa6:	4291      	cmp	r1, r2
     fa8:	dbf9      	blt.n	f9e <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     faa:	480c      	ldr	r0, [pc, #48]	; (fdc <zero_loop+0x2a>)
     fac:	490c      	ldr	r1, [pc, #48]	; (fe0 <zero_loop+0x2e>)
     fae:	f04f 0200 	mov.w	r2, #0

00000fb2 <zero_loop>:
     fb2:	4288      	cmp	r0, r1
     fb4:	bfb8      	it	lt
     fb6:	f840 2b04 	strlt.w	r2, [r0], #4
     fba:	dbfa      	blt.n	fb2 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     fbc:	f7ff fdf0 	bl	ba0 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     fc0:	be00      	bkpt	0x0000
}
     fc2:	bf00      	nop
     fc4:	e000ed08 	.word	0xe000ed08
     fc8:	00000000 	.word	0x00000000
     fcc:	e000ed88 	.word	0xe000ed88
     fd0:	00002700 	.word	0x00002700
     fd4:	10004000 	.word	0x10004000
     fd8:	1000405c 	.word	0x1000405c
     fdc:	1000405c 	.word	0x1000405c
     fe0:	10004180 	.word	0x10004180

00000fe4 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     fe8:	e7fe      	b.n	fe8 <am_nmi_isr+0x4>

00000fea <am_brownout_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     fea:	b480      	push	{r7}
     fec:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     fee:	e7fe      	b.n	fee <am_brownout_isr+0x4>

00000ff0 <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     ff0:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     ff2:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     ff4:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     ff6:	f000 f809 	bl	100c <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     ffa:	bd01      	pop	{r0, pc}
}
     ffc:	bf00      	nop
     ffe:	4618      	mov	r0, r3

00001000 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    1000:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    1002:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    1004:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    1006:	4770      	bx	lr
}
    1008:	bf00      	nop
    100a:	4618      	mov	r0, r3

0000100c <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    100c:	b580      	push	{r7, lr}
    100e:	b096      	sub	sp, #88	; 0x58
    1010:	af00      	add	r7, sp, #0
    1012:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    1014:	f107 030c 	add.w	r3, r7, #12
    1018:	2200      	movs	r2, #0
    101a:	601a      	str	r2, [r3, #0]
    101c:	605a      	str	r2, [r3, #4]
    101e:	609a      	str	r2, [r3, #8]
    1020:	60da      	str	r2, [r3, #12]
    1022:	611a      	str	r2, [r3, #16]
    1024:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    1026:	2300      	movs	r3, #0
    1028:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    102a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    102c:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    102e:	4b2e      	ldr	r3, [pc, #184]	; (10e8 <am_util_faultisr_collect_data+0xdc>)
    1030:	681b      	ldr	r3, [r3, #0]
    1032:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    1034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1036:	b2db      	uxtb	r3, r3
    1038:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    103c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    103e:	0a1b      	lsrs	r3, r3, #8
    1040:	b2db      	uxtb	r3, r3
    1042:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    1046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1048:	0c1b      	lsrs	r3, r3, #16
    104a:	b29b      	uxth	r3, r3
    104c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    1050:	4b26      	ldr	r3, [pc, #152]	; (10ec <am_util_faultisr_collect_data+0xe0>)
    1052:	681b      	ldr	r3, [r3, #0]
    1054:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    1056:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    105a:	b2db      	uxtb	r3, r3
    105c:	f003 0302 	and.w	r3, r3, #2
    1060:	2b00      	cmp	r3, #0
    1062:	d005      	beq.n	1070 <am_util_faultisr_collect_data+0x64>
    1064:	6879      	ldr	r1, [r7, #4]
    1066:	2006      	movs	r0, #6
    1068:	f7ff ffca 	bl	1000 <getStackedReg>
    106c:	4603      	mov	r3, r0
    106e:	e001      	b.n	1074 <am_util_faultisr_collect_data+0x68>
    1070:	f04f 33ff 	mov.w	r3, #4294967295
    1074:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    1076:	6879      	ldr	r1, [r7, #4]
    1078:	2000      	movs	r0, #0
    107a:	f7ff ffc1 	bl	1000 <getStackedReg>
    107e:	4603      	mov	r3, r0
    1080:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    1082:	6879      	ldr	r1, [r7, #4]
    1084:	2001      	movs	r0, #1
    1086:	f7ff ffbb 	bl	1000 <getStackedReg>
    108a:	4603      	mov	r3, r0
    108c:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    108e:	6879      	ldr	r1, [r7, #4]
    1090:	2002      	movs	r0, #2
    1092:	f7ff ffb5 	bl	1000 <getStackedReg>
    1096:	4603      	mov	r3, r0
    1098:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    109a:	6879      	ldr	r1, [r7, #4]
    109c:	2003      	movs	r0, #3
    109e:	f7ff ffaf 	bl	1000 <getStackedReg>
    10a2:	4603      	mov	r3, r0
    10a4:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    10a6:	6879      	ldr	r1, [r7, #4]
    10a8:	2004      	movs	r0, #4
    10aa:	f7ff ffa9 	bl	1000 <getStackedReg>
    10ae:	4603      	mov	r3, r0
    10b0:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    10b2:	6879      	ldr	r1, [r7, #4]
    10b4:	2005      	movs	r0, #5
    10b6:	f7ff ffa3 	bl	1000 <getStackedReg>
    10ba:	4603      	mov	r3, r0
    10bc:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    10be:	6879      	ldr	r1, [r7, #4]
    10c0:	2006      	movs	r0, #6
    10c2:	f7ff ff9d 	bl	1000 <getStackedReg>
    10c6:	4603      	mov	r3, r0
    10c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    10ca:	6879      	ldr	r1, [r7, #4]
    10cc:	2007      	movs	r0, #7
    10ce:	f7ff ff97 	bl	1000 <getStackedReg>
    10d2:	4603      	mov	r3, r0
    10d4:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
    10d6:	f107 030c 	add.w	r3, r7, #12
    10da:	4618      	mov	r0, r3
    10dc:	f001 f8fc 	bl	22d8 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
    10e0:	2300      	movs	r3, #0
    10e2:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    10e4:	e7fe      	b.n	10e4 <am_util_faultisr_collect_data+0xd8>
    10e6:	bf00      	nop
    10e8:	e000ed28 	.word	0xe000ed28
    10ec:	e000ed38 	.word	0xe000ed38

000010f0 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    10f0:	b480      	push	{r7}
    10f2:	b083      	sub	sp, #12
    10f4:	af00      	add	r7, sp, #0
    10f6:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    10f8:	4a04      	ldr	r2, [pc, #16]	; (110c <am_util_stdio_printf_init+0x1c>)
    10fa:	687b      	ldr	r3, [r7, #4]
    10fc:	6013      	str	r3, [r2, #0]
}
    10fe:	bf00      	nop
    1100:	370c      	adds	r7, #12
    1102:	46bd      	mov	sp, r7
    1104:	f85d 7b04 	ldr.w	r7, [sp], #4
    1108:	4770      	bx	lr
    110a:	bf00      	nop
    110c:	1000417c 	.word	0x1000417c

00001110 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    1110:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    1114:	b096      	sub	sp, #88	; 0x58
    1116:	af00      	add	r7, sp, #0
    1118:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    111c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    1120:	0025      	movs	r5, r4
    1122:	2600      	movs	r6, #0
    1124:	ea55 0306 	orrs.w	r3, r5, r6
    1128:	f000 80a0 	beq.w	126c <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    112c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    1130:	0862      	lsrs	r2, r4, #1
    1132:	ea4f 0133 	mov.w	r1, r3, rrx
    1136:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    113a:	ea4f 0893 	mov.w	r8, r3, lsr #2
    113e:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
    1142:	ea4f 0994 	mov.w	r9, r4, lsr #2
    1146:	eb11 0308 	adds.w	r3, r1, r8
    114a:	eb42 0409 	adc.w	r4, r2, r9
    114e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
    1152:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    1156:	ea4f 1a13 	mov.w	sl, r3, lsr #4
    115a:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
    115e:	ea4f 1b14 	mov.w	fp, r4, lsr #4
    1162:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    1166:	eb13 030a 	adds.w	r3, r3, sl
    116a:	eb44 040b 	adc.w	r4, r4, fp
    116e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
    1172:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    1176:	0a1a      	lsrs	r2, r3, #8
    1178:	62ba      	str	r2, [r7, #40]	; 0x28
    117a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    117c:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    1180:	62ba      	str	r2, [r7, #40]	; 0x28
    1182:	0a23      	lsrs	r3, r4, #8
    1184:	62fb      	str	r3, [r7, #44]	; 0x2c
    1186:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    118a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
    118e:	18c9      	adds	r1, r1, r3
    1190:	eb42 0204 	adc.w	r2, r2, r4
    1194:	460b      	mov	r3, r1
    1196:	4614      	mov	r4, r2
    1198:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
    119c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    11a0:	0c1a      	lsrs	r2, r3, #16
    11a2:	623a      	str	r2, [r7, #32]
    11a4:	6a3a      	ldr	r2, [r7, #32]
    11a6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    11aa:	623a      	str	r2, [r7, #32]
    11ac:	0c23      	lsrs	r3, r4, #16
    11ae:	627b      	str	r3, [r7, #36]	; 0x24
    11b0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    11b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
    11b8:	18c9      	adds	r1, r1, r3
    11ba:	eb42 0204 	adc.w	r2, r2, r4
    11be:	460b      	mov	r3, r1
    11c0:	4614      	mov	r4, r2
    11c2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
    11c6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    11ca:	0023      	movs	r3, r4
    11cc:	603b      	str	r3, [r7, #0]
    11ce:	2300      	movs	r3, #0
    11d0:	607b      	str	r3, [r7, #4]
    11d2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    11d6:	e897 0006 	ldmia.w	r7, {r1, r2}
    11da:	18c9      	adds	r1, r1, r3
    11dc:	eb42 0204 	adc.w	r2, r2, r4
    11e0:	460b      	mov	r3, r1
    11e2:	4614      	mov	r4, r2
    11e4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
    11e8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    11ec:	08da      	lsrs	r2, r3, #3
    11ee:	613a      	str	r2, [r7, #16]
    11f0:	693a      	ldr	r2, [r7, #16]
    11f2:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
    11f6:	613a      	str	r2, [r7, #16]
    11f8:	08e3      	lsrs	r3, r4, #3
    11fa:	617b      	str	r3, [r7, #20]
    11fc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    1200:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
    1204:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    1208:	460b      	mov	r3, r1
    120a:	4614      	mov	r4, r2
    120c:	00a0      	lsls	r0, r4, #2
    120e:	60f8      	str	r0, [r7, #12]
    1210:	68f8      	ldr	r0, [r7, #12]
    1212:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    1216:	60f8      	str	r0, [r7, #12]
    1218:	009b      	lsls	r3, r3, #2
    121a:	60bb      	str	r3, [r7, #8]
    121c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    1220:	185b      	adds	r3, r3, r1
    1222:	eb44 0402 	adc.w	r4, r4, r2
    1226:	18db      	adds	r3, r3, r3
    1228:	eb44 0404 	adc.w	r4, r4, r4
    122c:	4619      	mov	r1, r3
    122e:	4622      	mov	r2, r4
    1230:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    1234:	1a5b      	subs	r3, r3, r1
    1236:	eb64 0402 	sbc.w	r4, r4, r2
    123a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
    123e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    1242:	3306      	adds	r3, #6
    1244:	f144 0400 	adc.w	r4, r4, #0
    1248:	091a      	lsrs	r2, r3, #4
    124a:	61ba      	str	r2, [r7, #24]
    124c:	69ba      	ldr	r2, [r7, #24]
    124e:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
    1252:	61ba      	str	r2, [r7, #24]
    1254:	0923      	lsrs	r3, r4, #4
    1256:	61fb      	str	r3, [r7, #28]
    1258:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    125c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    1260:	18c9      	adds	r1, r1, r3
    1262:	eb42 0204 	adc.w	r2, r2, r4
    1266:	460b      	mov	r3, r1
    1268:	4614      	mov	r4, r2
    126a:	e029      	b.n	12c0 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    126c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    126e:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
    1270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1272:	085a      	lsrs	r2, r3, #1
    1274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1276:	089b      	lsrs	r3, r3, #2
    1278:	4413      	add	r3, r2
    127a:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
    127c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    127e:	091b      	lsrs	r3, r3, #4
    1280:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1282:	4413      	add	r3, r2
    1284:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
    1286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1288:	0a1b      	lsrs	r3, r3, #8
    128a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    128c:	4413      	add	r3, r2
    128e:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
    1290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1292:	0c1b      	lsrs	r3, r3, #16
    1294:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1296:	4413      	add	r3, r2
    1298:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
    129a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    129c:	08db      	lsrs	r3, r3, #3
    129e:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
    12a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    12a2:	4613      	mov	r3, r2
    12a4:	009b      	lsls	r3, r3, #2
    12a6:	4413      	add	r3, r2
    12a8:	005b      	lsls	r3, r3, #1
    12aa:	461a      	mov	r2, r3
    12ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    12ae:	1a9b      	subs	r3, r3, r2
    12b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    12b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    12b4:	3306      	adds	r3, #6
    12b6:	091a      	lsrs	r2, r3, #4
    12b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    12ba:	4413      	add	r3, r2
    12bc:	f04f 0400 	mov.w	r4, #0
    }
}
    12c0:	4618      	mov	r0, r3
    12c2:	4621      	mov	r1, r4
    12c4:	3758      	adds	r7, #88	; 0x58
    12c6:	46bd      	mov	sp, r7
    12c8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    12cc:	4770      	bx	lr

000012ce <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    12ce:	b590      	push	{r4, r7, lr}
    12d0:	b085      	sub	sp, #20
    12d2:	af00      	add	r7, sp, #0
    12d4:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    12d8:	683a      	ldr	r2, [r7, #0]
    12da:	687b      	ldr	r3, [r7, #4]
    12dc:	4313      	orrs	r3, r2
    12de:	2b00      	cmp	r3, #0
    12e0:	bf0c      	ite	eq
    12e2:	2301      	moveq	r3, #1
    12e4:	2300      	movne	r3, #0
    12e6:	b2db      	uxtb	r3, r3
    12e8:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    12ea:	e008      	b.n	12fe <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    12ec:	e9d7 0100 	ldrd	r0, r1, [r7]
    12f0:	f7ff ff0e 	bl	1110 <divu64_10>
    12f4:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    12f8:	68fb      	ldr	r3, [r7, #12]
    12fa:	3301      	adds	r3, #1
    12fc:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    12fe:	e897 0018 	ldmia.w	r7, {r3, r4}
    1302:	4323      	orrs	r3, r4
    1304:	d1f2      	bne.n	12ec <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    1306:	68fb      	ldr	r3, [r7, #12]
}
    1308:	4618      	mov	r0, r3
    130a:	3714      	adds	r7, #20
    130c:	46bd      	mov	sp, r7
    130e:	bd90      	pop	{r4, r7, pc}

00001310 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    1310:	b590      	push	{r4, r7, lr}
    1312:	b083      	sub	sp, #12
    1314:	af00      	add	r7, sp, #0
    1316:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    131a:	e897 0018 	ldmia.w	r7, {r3, r4}
    131e:	2b00      	cmp	r3, #0
    1320:	f174 0300 	sbcs.w	r3, r4, #0
    1324:	da06      	bge.n	1334 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    1326:	e897 0018 	ldmia.w	r7, {r3, r4}
    132a:	425b      	negs	r3, r3
    132c:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    1330:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
    1334:	e897 0018 	ldmia.w	r7, {r3, r4}
    1338:	4618      	mov	r0, r3
    133a:	4621      	mov	r1, r4
    133c:	f7ff ffc7 	bl	12ce <ndigits_in_u64>
    1340:	4603      	mov	r3, r0
}
    1342:	4618      	mov	r0, r3
    1344:	370c      	adds	r7, #12
    1346:	46bd      	mov	sp, r7
    1348:	bd90      	pop	{r4, r7, pc}

0000134a <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    134a:	b490      	push	{r4, r7}
    134c:	b084      	sub	sp, #16
    134e:	af00      	add	r7, sp, #0
    1350:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    1354:	6839      	ldr	r1, [r7, #0]
    1356:	687a      	ldr	r2, [r7, #4]
    1358:	430a      	orrs	r2, r1
    135a:	2a00      	cmp	r2, #0
    135c:	bf0c      	ite	eq
    135e:	2201      	moveq	r2, #1
    1360:	2200      	movne	r2, #0
    1362:	b2d2      	uxtb	r2, r2
    1364:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
    1366:	e00a      	b.n	137e <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
    1368:	e897 0006 	ldmia.w	r7, {r1, r2}
    136c:	090b      	lsrs	r3, r1, #4
    136e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    1372:	0914      	lsrs	r4, r2, #4
    1374:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
    1378:	68fa      	ldr	r2, [r7, #12]
    137a:	3201      	adds	r2, #1
    137c:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
    137e:	e897 0006 	ldmia.w	r7, {r1, r2}
    1382:	430a      	orrs	r2, r1
    1384:	d1f0      	bne.n	1368 <ndigits_in_hex+0x1e>
    }

    return iDigits;
    1386:	68fb      	ldr	r3, [r7, #12]
}
    1388:	4618      	mov	r0, r3
    138a:	3710      	adds	r7, #16
    138c:	46bd      	mov	sp, r7
    138e:	bc90      	pop	{r4, r7}
    1390:	4770      	bx	lr

00001392 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    1392:	b480      	push	{r7}
    1394:	b087      	sub	sp, #28
    1396:	af00      	add	r7, sp, #0
    1398:	6078      	str	r0, [r7, #4]
    139a:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    139c:	2300      	movs	r3, #0
    139e:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    13a0:	2300      	movs	r3, #0
    13a2:	613b      	str	r3, [r7, #16]
    13a4:	2300      	movs	r3, #0
    13a6:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    13a8:	687b      	ldr	r3, [r7, #4]
    13aa:	781b      	ldrb	r3, [r3, #0]
    13ac:	2b2d      	cmp	r3, #45	; 0x2d
    13ae:	d11b      	bne.n	13e8 <decstr_to_int+0x56>
    {
        bNeg = true;
    13b0:	2301      	movs	r3, #1
    13b2:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    13b4:	687b      	ldr	r3, [r7, #4]
    13b6:	3301      	adds	r3, #1
    13b8:	607b      	str	r3, [r7, #4]
        uCnt++;
    13ba:	68fb      	ldr	r3, [r7, #12]
    13bc:	3301      	adds	r3, #1
    13be:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    13c0:	e012      	b.n	13e8 <decstr_to_int+0x56>
    {
        ++uCnt;
    13c2:	68fb      	ldr	r3, [r7, #12]
    13c4:	3301      	adds	r3, #1
    13c6:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    13c8:	693a      	ldr	r2, [r7, #16]
    13ca:	4613      	mov	r3, r2
    13cc:	009b      	lsls	r3, r3, #2
    13ce:	4413      	add	r3, r2
    13d0:	005b      	lsls	r3, r3, #1
    13d2:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    13d4:	687b      	ldr	r3, [r7, #4]
    13d6:	781b      	ldrb	r3, [r3, #0]
    13d8:	461a      	mov	r2, r3
    13da:	693b      	ldr	r3, [r7, #16]
    13dc:	4413      	add	r3, r2
    13de:	3b30      	subs	r3, #48	; 0x30
    13e0:	613b      	str	r3, [r7, #16]
        pcStr++;
    13e2:	687b      	ldr	r3, [r7, #4]
    13e4:	3301      	adds	r3, #1
    13e6:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    13e8:	687b      	ldr	r3, [r7, #4]
    13ea:	781b      	ldrb	r3, [r3, #0]
    13ec:	2b2f      	cmp	r3, #47	; 0x2f
    13ee:	d903      	bls.n	13f8 <decstr_to_int+0x66>
    13f0:	687b      	ldr	r3, [r7, #4]
    13f2:	781b      	ldrb	r3, [r3, #0]
    13f4:	2b39      	cmp	r3, #57	; 0x39
    13f6:	d9e4      	bls.n	13c2 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    13f8:	683b      	ldr	r3, [r7, #0]
    13fa:	2b00      	cmp	r3, #0
    13fc:	d002      	beq.n	1404 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    13fe:	683b      	ldr	r3, [r7, #0]
    1400:	68fa      	ldr	r2, [r7, #12]
    1402:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    1404:	7dfb      	ldrb	r3, [r7, #23]
    1406:	2b00      	cmp	r3, #0
    1408:	d002      	beq.n	1410 <decstr_to_int+0x7e>
    140a:	693b      	ldr	r3, [r7, #16]
    140c:	425b      	negs	r3, r3
    140e:	e000      	b.n	1412 <decstr_to_int+0x80>
    1410:	693b      	ldr	r3, [r7, #16]
}
    1412:	4618      	mov	r0, r3
    1414:	371c      	adds	r7, #28
    1416:	46bd      	mov	sp, r7
    1418:	f85d 7b04 	ldr.w	r7, [sp], #4
    141c:	4770      	bx	lr

0000141e <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    141e:	b590      	push	{r4, r7, lr}
    1420:	b091      	sub	sp, #68	; 0x44
    1422:	af00      	add	r7, sp, #0
    1424:	e9c7 0102 	strd	r0, r1, [r7, #8]
    1428:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    142a:	2300      	movs	r3, #0
    142c:	63fb      	str	r3, [r7, #60]	; 0x3c
    142e:	2300      	movs	r3, #0
    1430:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    1432:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    1436:	f7ff fe6b 	bl	1110 <divu64_10>
    143a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    143e:	68b9      	ldr	r1, [r7, #8]
    1440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1442:	4613      	mov	r3, r2
    1444:	009b      	lsls	r3, r3, #2
    1446:	4413      	add	r3, r2
    1448:	005b      	lsls	r3, r3, #1
    144a:	1acb      	subs	r3, r1, r3
    144c:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    144e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1450:	1c5a      	adds	r2, r3, #1
    1452:	63fa      	str	r2, [r7, #60]	; 0x3c
    1454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1456:	b2d2      	uxtb	r2, r2
    1458:	3230      	adds	r2, #48	; 0x30
    145a:	b2d2      	uxtb	r2, r2
    145c:	f107 0140 	add.w	r1, r7, #64	; 0x40
    1460:	440b      	add	r3, r1
    1462:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    1466:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    146a:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    146e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    1472:	4323      	orrs	r3, r4
    1474:	d1dd      	bne.n	1432 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    1476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1478:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    147a:	687b      	ldr	r3, [r7, #4]
    147c:	2b00      	cmp	r3, #0
    147e:	d011      	beq.n	14a4 <uint64_to_str+0x86>
    {
        while ( ix-- )
    1480:	e008      	b.n	1494 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    1482:	687b      	ldr	r3, [r7, #4]
    1484:	1c5a      	adds	r2, r3, #1
    1486:	607a      	str	r2, [r7, #4]
    1488:	f107 0110 	add.w	r1, r7, #16
    148c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    148e:	440a      	add	r2, r1
    1490:	7812      	ldrb	r2, [r2, #0]
    1492:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    1494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1496:	1e5a      	subs	r2, r3, #1
    1498:	63fa      	str	r2, [r7, #60]	; 0x3c
    149a:	2b00      	cmp	r3, #0
    149c:	d1f1      	bne.n	1482 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    149e:	687b      	ldr	r3, [r7, #4]
    14a0:	2200      	movs	r2, #0
    14a2:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    14a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    14a6:	4618      	mov	r0, r3
    14a8:	3744      	adds	r7, #68	; 0x44
    14aa:	46bd      	mov	sp, r7
    14ac:	bd90      	pop	{r4, r7, pc}

000014ae <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    14ae:	b4b0      	push	{r4, r5, r7}
    14b0:	b08d      	sub	sp, #52	; 0x34
    14b2:	af00      	add	r7, sp, #0
    14b4:	e9c7 0102 	strd	r0, r1, [r7, #8]
    14b8:	607a      	str	r2, [r7, #4]
    14ba:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    14bc:	2300      	movs	r3, #0
    14be:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    14c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    14c4:	4313      	orrs	r3, r2
    14c6:	d131      	bne.n	152c <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
    14c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    14ca:	1c5a      	adds	r2, r3, #1
    14cc:	62fa      	str	r2, [r7, #44]	; 0x2c
    14ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
    14d2:	4413      	add	r3, r2
    14d4:	2230      	movs	r2, #48	; 0x30
    14d6:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    14da:	e027      	b.n	152c <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
    14dc:	7a3b      	ldrb	r3, [r7, #8]
    14de:	f003 030f 	and.w	r3, r3, #15
    14e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    14e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    14ea:	2b09      	cmp	r3, #9
    14ec:	d90a      	bls.n	1504 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    14ee:	78fb      	ldrb	r3, [r7, #3]
    14f0:	2b00      	cmp	r3, #0
    14f2:	d001      	beq.n	14f8 <uint64_to_hexstr+0x4a>
    14f4:	2227      	movs	r2, #39	; 0x27
    14f6:	e000      	b.n	14fa <uint64_to_hexstr+0x4c>
    14f8:	2207      	movs	r2, #7
    14fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    14fe:	4413      	add	r3, r2
    1500:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    1504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1506:	1c5a      	adds	r2, r3, #1
    1508:	62fa      	str	r2, [r7, #44]	; 0x2c
    150a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    150e:	3230      	adds	r2, #48	; 0x30
    1510:	b2d2      	uxtb	r2, r2
    1512:	f107 0130 	add.w	r1, r7, #48	; 0x30
    1516:	440b      	add	r3, r1
    1518:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    151c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    1520:	0914      	lsrs	r4, r2, #4
    1522:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    1526:	091d      	lsrs	r5, r3, #4
    1528:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
    152c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    1530:	4313      	orrs	r3, r2
    1532:	d1d3      	bne.n	14dc <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    1534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1536:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    1538:	687b      	ldr	r3, [r7, #4]
    153a:	2b00      	cmp	r3, #0
    153c:	d011      	beq.n	1562 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
    153e:	e008      	b.n	1552 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
    1540:	687b      	ldr	r3, [r7, #4]
    1542:	1c5a      	adds	r2, r3, #1
    1544:	607a      	str	r2, [r7, #4]
    1546:	f107 0110 	add.w	r1, r7, #16
    154a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    154c:	440a      	add	r2, r1
    154e:	7812      	ldrb	r2, [r2, #0]
    1550:	701a      	strb	r2, [r3, #0]
        while (ix--)
    1552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1554:	1e5a      	subs	r2, r3, #1
    1556:	62fa      	str	r2, [r7, #44]	; 0x2c
    1558:	2b00      	cmp	r3, #0
    155a:	d1f1      	bne.n	1540 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    155c:	687b      	ldr	r3, [r7, #4]
    155e:	2200      	movs	r2, #0
    1560:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    1562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    1564:	4618      	mov	r0, r3
    1566:	3734      	adds	r7, #52	; 0x34
    1568:	46bd      	mov	sp, r7
    156a:	bcb0      	pop	{r4, r5, r7}
    156c:	4770      	bx	lr

0000156e <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    156e:	b480      	push	{r7}
    1570:	b085      	sub	sp, #20
    1572:	af00      	add	r7, sp, #0
    1574:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    1576:	2300      	movs	r3, #0
    1578:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    157a:	687b      	ldr	r3, [r7, #4]
    157c:	2b00      	cmp	r3, #0
    157e:	d104      	bne.n	158a <simple_strlen+0x1c>
    {
        return ui32RetVal;
    1580:	68fb      	ldr	r3, [r7, #12]
    1582:	e009      	b.n	1598 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    1584:	68fb      	ldr	r3, [r7, #12]
    1586:	3301      	adds	r3, #1
    1588:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    158a:	687b      	ldr	r3, [r7, #4]
    158c:	1c5a      	adds	r2, r3, #1
    158e:	607a      	str	r2, [r7, #4]
    1590:	781b      	ldrb	r3, [r3, #0]
    1592:	2b00      	cmp	r3, #0
    1594:	d1f6      	bne.n	1584 <simple_strlen+0x16>
    }
    return ui32RetVal;
    1596:	68fb      	ldr	r3, [r7, #12]
}
    1598:	4618      	mov	r0, r3
    159a:	3714      	adds	r7, #20
    159c:	46bd      	mov	sp, r7
    159e:	f85d 7b04 	ldr.w	r7, [sp], #4
    15a2:	4770      	bx	lr

000015a4 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    15a4:	b480      	push	{r7}
    15a6:	b087      	sub	sp, #28
    15a8:	af00      	add	r7, sp, #0
    15aa:	60f8      	str	r0, [r7, #12]
    15ac:	460b      	mov	r3, r1
    15ae:	607a      	str	r2, [r7, #4]
    15b0:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    15b2:	2300      	movs	r3, #0
    15b4:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    15b6:	687b      	ldr	r3, [r7, #4]
    15b8:	2b00      	cmp	r3, #0
    15ba:	dc0c      	bgt.n	15d6 <padbuffer+0x32>
    {
        return i32Cnt;
    15bc:	697b      	ldr	r3, [r7, #20]
    15be:	e010      	b.n	15e2 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    15c0:	68fb      	ldr	r3, [r7, #12]
    15c2:	2b00      	cmp	r3, #0
    15c4:	d004      	beq.n	15d0 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    15c6:	68fb      	ldr	r3, [r7, #12]
    15c8:	1c5a      	adds	r2, r3, #1
    15ca:	60fa      	str	r2, [r7, #12]
    15cc:	7afa      	ldrb	r2, [r7, #11]
    15ce:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    15d0:	697b      	ldr	r3, [r7, #20]
    15d2:	3301      	adds	r3, #1
    15d4:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    15d6:	687b      	ldr	r3, [r7, #4]
    15d8:	1e5a      	subs	r2, r3, #1
    15da:	607a      	str	r2, [r7, #4]
    15dc:	2b00      	cmp	r3, #0
    15de:	d1ef      	bne.n	15c0 <padbuffer+0x1c>
    }

    return i32Cnt;
    15e0:	697b      	ldr	r3, [r7, #20]
}
    15e2:	4618      	mov	r0, r3
    15e4:	371c      	adds	r7, #28
    15e6:	46bd      	mov	sp, r7
    15e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ec:	4770      	bx	lr
	...

000015f0 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    15f0:	b590      	push	{r4, r7, lr}
    15f2:	b08f      	sub	sp, #60	; 0x3c
    15f4:	af00      	add	r7, sp, #0
    15f6:	60f8      	str	r0, [r7, #12]
    15f8:	60b9      	str	r1, [r7, #8]
    15fa:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    15fc:	68bb      	ldr	r3, [r7, #8]
    15fe:	681b      	ldr	r3, [r3, #0]
    1600:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    1602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1604:	2b03      	cmp	r3, #3
    1606:	dc02      	bgt.n	160e <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    1608:	f06f 0302 	mvn.w	r3, #2
    160c:	e0e7      	b.n	17de <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
    160e:	edd7 7a03 	vldr	s15, [r7, #12]
    1612:	eef5 7a40 	vcmp.f32	s15, #0.0
    1616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    161a:	d104      	bne.n	1626 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    161c:	68bb      	ldr	r3, [r7, #8]
    161e:	4a72      	ldr	r2, [pc, #456]	; (17e8 <ftoa+0x1f8>)
    1620:	601a      	str	r2, [r3, #0]
        return 3;
    1622:	2303      	movs	r3, #3
    1624:	e0db      	b.n	17de <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
    1626:	68bb      	ldr	r3, [r7, #8]
    1628:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    162a:	68fb      	ldr	r3, [r7, #12]
    162c:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    162e:	693b      	ldr	r3, [r7, #16]
    1630:	15db      	asrs	r3, r3, #23
    1632:	b2db      	uxtb	r3, r3
    1634:	3b7f      	subs	r3, #127	; 0x7f
    1636:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    1638:	693b      	ldr	r3, [r7, #16]
    163a:	f3c3 0316 	ubfx	r3, r3, #0, #23
    163e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    1642:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    1644:	2300      	movs	r3, #0
    1646:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    1648:	2300      	movs	r3, #0
    164a:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    164c:	69fb      	ldr	r3, [r7, #28]
    164e:	2b1e      	cmp	r3, #30
    1650:	dd02      	ble.n	1658 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    1652:	f06f 0301 	mvn.w	r3, #1
    1656:	e0c2      	b.n	17de <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
    1658:	69fb      	ldr	r3, [r7, #28]
    165a:	f113 0f17 	cmn.w	r3, #23
    165e:	da02      	bge.n	1666 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    1660:	f04f 33ff 	mov.w	r3, #4294967295
    1664:	e0bb      	b.n	17de <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
    1666:	69fb      	ldr	r3, [r7, #28]
    1668:	2b16      	cmp	r3, #22
    166a:	dd06      	ble.n	167a <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    166c:	69fb      	ldr	r3, [r7, #28]
    166e:	3b17      	subs	r3, #23
    1670:	69ba      	ldr	r2, [r7, #24]
    1672:	fa02 f303 	lsl.w	r3, r2, r3
    1676:	637b      	str	r3, [r7, #52]	; 0x34
    1678:	e01a      	b.n	16b0 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    167a:	69fb      	ldr	r3, [r7, #28]
    167c:	2b00      	cmp	r3, #0
    167e:	db0f      	blt.n	16a0 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    1680:	69fb      	ldr	r3, [r7, #28]
    1682:	f1c3 0317 	rsb	r3, r3, #23
    1686:	69ba      	ldr	r2, [r7, #24]
    1688:	fa42 f303 	asr.w	r3, r2, r3
    168c:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    168e:	69fb      	ldr	r3, [r7, #28]
    1690:	3301      	adds	r3, #1
    1692:	69ba      	ldr	r2, [r7, #24]
    1694:	fa02 f303 	lsl.w	r3, r2, r3
    1698:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    169c:	633b      	str	r3, [r7, #48]	; 0x30
    169e:	e007      	b.n	16b0 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    16a0:	69bb      	ldr	r3, [r7, #24]
    16a2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    16a6:	69fb      	ldr	r3, [r7, #28]
    16a8:	43db      	mvns	r3, r3
    16aa:	fa42 f303 	asr.w	r3, r2, r3
    16ae:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    16b0:	693b      	ldr	r3, [r7, #16]
    16b2:	2b00      	cmp	r3, #0
    16b4:	da04      	bge.n	16c0 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    16b6:	68bb      	ldr	r3, [r7, #8]
    16b8:	1c5a      	adds	r2, r3, #1
    16ba:	60ba      	str	r2, [r7, #8]
    16bc:	222d      	movs	r2, #45	; 0x2d
    16be:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    16c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    16c2:	2b00      	cmp	r3, #0
    16c4:	d105      	bne.n	16d2 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    16c6:	68bb      	ldr	r3, [r7, #8]
    16c8:	1c5a      	adds	r2, r3, #1
    16ca:	60ba      	str	r2, [r7, #8]
    16cc:	2230      	movs	r2, #48	; 0x30
    16ce:	701a      	strb	r2, [r3, #0]
    16d0:	e021      	b.n	1716 <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
    16d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    16d4:	2b00      	cmp	r3, #0
    16d6:	dd08      	ble.n	16ea <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
    16d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    16da:	ea4f 74e3 	mov.w	r4, r3, asr #31
    16de:	68ba      	ldr	r2, [r7, #8]
    16e0:	4618      	mov	r0, r3
    16e2:	4621      	mov	r1, r4
    16e4:	f7ff fe9b 	bl	141e <uint64_to_str>
    16e8:	e011      	b.n	170e <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
    16ea:	68bb      	ldr	r3, [r7, #8]
    16ec:	1c5a      	adds	r2, r3, #1
    16ee:	60ba      	str	r2, [r7, #8]
    16f0:	222d      	movs	r2, #45	; 0x2d
    16f2:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    16f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    16f6:	425b      	negs	r3, r3
    16f8:	ea4f 74e3 	mov.w	r4, r3, asr #31
    16fc:	68ba      	ldr	r2, [r7, #8]
    16fe:	4618      	mov	r0, r3
    1700:	4621      	mov	r1, r4
    1702:	f7ff fe8c 	bl	141e <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    1706:	e002      	b.n	170e <ftoa+0x11e>
        {
            pcBuf++;
    1708:	68bb      	ldr	r3, [r7, #8]
    170a:	3301      	adds	r3, #1
    170c:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    170e:	68bb      	ldr	r3, [r7, #8]
    1710:	781b      	ldrb	r3, [r3, #0]
    1712:	2b00      	cmp	r3, #0
    1714:	d1f8      	bne.n	1708 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    1716:	68bb      	ldr	r3, [r7, #8]
    1718:	1c5a      	adds	r2, r3, #1
    171a:	60ba      	str	r2, [r7, #8]
    171c:	222e      	movs	r2, #46	; 0x2e
    171e:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    1720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1722:	2b00      	cmp	r3, #0
    1724:	d105      	bne.n	1732 <ftoa+0x142>
    {
        *pcBuf++ = '0';
    1726:	68bb      	ldr	r3, [r7, #8]
    1728:	1c5a      	adds	r2, r3, #1
    172a:	60ba      	str	r2, [r7, #8]
    172c:	2230      	movs	r2, #48	; 0x30
    172e:	701a      	strb	r2, [r3, #0]
    1730:	e04f      	b.n	17d2 <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    1732:	68ba      	ldr	r2, [r7, #8]
    1734:	6a3b      	ldr	r3, [r7, #32]
    1736:	1ad3      	subs	r3, r2, r3
    1738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    173a:	1ad3      	subs	r3, r2, r3
    173c:	3b01      	subs	r3, #1
    173e:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    1740:	697a      	ldr	r2, [r7, #20]
    1742:	687b      	ldr	r3, [r7, #4]
    1744:	4293      	cmp	r3, r2
    1746:	bfa8      	it	ge
    1748:	4613      	movge	r3, r2
    174a:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    174c:	2300      	movs	r3, #0
    174e:	62bb      	str	r3, [r7, #40]	; 0x28
    1750:	e015      	b.n	177e <ftoa+0x18e>
        {
            i32FracPart *= 10;
    1752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1754:	4613      	mov	r3, r2
    1756:	009b      	lsls	r3, r3, #2
    1758:	4413      	add	r3, r2
    175a:	005b      	lsls	r3, r3, #1
    175c:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    175e:	68bb      	ldr	r3, [r7, #8]
    1760:	1c5a      	adds	r2, r3, #1
    1762:	60ba      	str	r2, [r7, #8]
    1764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1766:	1612      	asrs	r2, r2, #24
    1768:	b2d2      	uxtb	r2, r2
    176a:	3230      	adds	r2, #48	; 0x30
    176c:	b2d2      	uxtb	r2, r2
    176e:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    1770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1772:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1776:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    1778:	6abb      	ldr	r3, [r7, #40]	; 0x28
    177a:	3301      	adds	r3, #1
    177c:	62bb      	str	r3, [r7, #40]	; 0x28
    177e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1780:	697b      	ldr	r3, [r7, #20]
    1782:	429a      	cmp	r2, r3
    1784:	dbe5      	blt.n	1752 <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    1786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1788:	4613      	mov	r3, r2
    178a:	009b      	lsls	r3, r3, #2
    178c:	4413      	add	r3, r2
    178e:	005b      	lsls	r3, r3, #1
    1790:	161b      	asrs	r3, r3, #24
    1792:	2b04      	cmp	r3, #4
    1794:	dd1d      	ble.n	17d2 <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    1796:	68bb      	ldr	r3, [r7, #8]
    1798:	3b01      	subs	r3, #1
    179a:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    179c:	e015      	b.n	17ca <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
    179e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17a0:	781b      	ldrb	r3, [r3, #0]
    17a2:	2b2e      	cmp	r3, #46	; 0x2e
    17a4:	d00e      	beq.n	17c4 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
    17a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17a8:	781b      	ldrb	r3, [r3, #0]
    17aa:	2b39      	cmp	r3, #57	; 0x39
    17ac:	d103      	bne.n	17b6 <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
    17ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17b0:	2230      	movs	r2, #48	; 0x30
    17b2:	701a      	strb	r2, [r3, #0]
    17b4:	e006      	b.n	17c4 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
    17b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17b8:	781b      	ldrb	r3, [r3, #0]
    17ba:	3301      	adds	r3, #1
    17bc:	b2da      	uxtb	r2, r3
    17be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17c0:	701a      	strb	r2, [r3, #0]
                    break;
    17c2:	e006      	b.n	17d2 <ftoa+0x1e2>
                }
                pcBuftmp--;
    17c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17c6:	3b01      	subs	r3, #1
    17c8:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    17ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17cc:	6a3b      	ldr	r3, [r7, #32]
    17ce:	429a      	cmp	r2, r3
    17d0:	d2e5      	bcs.n	179e <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    17d2:	68bb      	ldr	r3, [r7, #8]
    17d4:	2200      	movs	r2, #0
    17d6:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    17d8:	68ba      	ldr	r2, [r7, #8]
    17da:	6a3b      	ldr	r3, [r7, #32]
    17dc:	1ad3      	subs	r3, r2, r3
} // ftoa()
    17de:	4618      	mov	r0, r3
    17e0:	373c      	adds	r7, #60	; 0x3c
    17e2:	46bd      	mov	sp, r7
    17e4:	bd90      	pop	{r4, r7, pc}
    17e6:	bf00      	nop
    17e8:	00302e30 	.word	0x00302e30

000017ec <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    17ec:	b590      	push	{r4, r7, lr}
    17ee:	b095      	sub	sp, #84	; 0x54
    17f0:	af00      	add	r7, sp, #0
    17f2:	60f8      	str	r0, [r7, #12]
    17f4:	60b9      	str	r1, [r7, #8]
    17f6:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    17f8:	2300      	movs	r3, #0
    17fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    17fc:	2300      	movs	r3, #0
    17fe:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    1800:	e2e3      	b.n	1dca <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    1802:	2306      	movs	r3, #6
    1804:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    1806:	68bb      	ldr	r3, [r7, #8]
    1808:	781b      	ldrb	r3, [r3, #0]
    180a:	2b25      	cmp	r3, #37	; 0x25
    180c:	d01f      	beq.n	184e <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    180e:	68fb      	ldr	r3, [r7, #12]
    1810:	2b00      	cmp	r3, #0
    1812:	d015      	beq.n	1840 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    1814:	68bb      	ldr	r3, [r7, #8]
    1816:	781b      	ldrb	r3, [r3, #0]
    1818:	2b0a      	cmp	r3, #10
    181a:	d10b      	bne.n	1834 <am_util_stdio_vsprintf+0x48>
    181c:	4bb1      	ldr	r3, [pc, #708]	; (1ae4 <am_util_stdio_vsprintf+0x2f8>)
    181e:	781b      	ldrb	r3, [r3, #0]
    1820:	2b00      	cmp	r3, #0
    1822:	d007      	beq.n	1834 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    1824:	68fb      	ldr	r3, [r7, #12]
    1826:	1c5a      	adds	r2, r3, #1
    1828:	60fa      	str	r2, [r7, #12]
    182a:	220d      	movs	r2, #13
    182c:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    182e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1830:	3301      	adds	r3, #1
    1832:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    1834:	68fb      	ldr	r3, [r7, #12]
    1836:	1c5a      	adds	r2, r3, #1
    1838:	60fa      	str	r2, [r7, #12]
    183a:	68ba      	ldr	r2, [r7, #8]
    183c:	7812      	ldrb	r2, [r2, #0]
    183e:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    1840:	68bb      	ldr	r3, [r7, #8]
    1842:	3301      	adds	r3, #1
    1844:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    1846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1848:	3301      	adds	r3, #1
    184a:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    184c:	e2bd      	b.n	1dca <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    184e:	68bb      	ldr	r3, [r7, #8]
    1850:	3301      	adds	r3, #1
    1852:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    1854:	2300      	movs	r3, #0
    1856:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    185a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    185e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    1862:	2320      	movs	r3, #32
    1864:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    1868:	68bb      	ldr	r3, [r7, #8]
    186a:	781b      	ldrb	r3, [r3, #0]
    186c:	2b30      	cmp	r3, #48	; 0x30
    186e:	d105      	bne.n	187c <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    1870:	2330      	movs	r3, #48	; 0x30
    1872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    1876:	68bb      	ldr	r3, [r7, #8]
    1878:	3301      	adds	r3, #1
    187a:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    187c:	f107 0310 	add.w	r3, r7, #16
    1880:	4619      	mov	r1, r3
    1882:	68b8      	ldr	r0, [r7, #8]
    1884:	f7ff fd85 	bl	1392 <decstr_to_int>
    1888:	4603      	mov	r3, r0
    188a:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    188c:	693b      	ldr	r3, [r7, #16]
    188e:	68ba      	ldr	r2, [r7, #8]
    1890:	4413      	add	r3, r2
    1892:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    1894:	68bb      	ldr	r3, [r7, #8]
    1896:	781b      	ldrb	r3, [r3, #0]
    1898:	2b73      	cmp	r3, #115	; 0x73
    189a:	d005      	beq.n	18a8 <am_util_stdio_vsprintf+0xbc>
    189c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    189e:	2b00      	cmp	r3, #0
    18a0:	da02      	bge.n	18a8 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    18a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    18a4:	425b      	negs	r3, r3
    18a6:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    18a8:	68bb      	ldr	r3, [r7, #8]
    18aa:	781b      	ldrb	r3, [r3, #0]
    18ac:	2b2e      	cmp	r3, #46	; 0x2e
    18ae:	d10e      	bne.n	18ce <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    18b0:	68bb      	ldr	r3, [r7, #8]
    18b2:	3301      	adds	r3, #1
    18b4:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    18b6:	f107 0310 	add.w	r3, r7, #16
    18ba:	4619      	mov	r1, r3
    18bc:	68b8      	ldr	r0, [r7, #8]
    18be:	f7ff fd68 	bl	1392 <decstr_to_int>
    18c2:	4603      	mov	r3, r0
    18c4:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    18c6:	693b      	ldr	r3, [r7, #16]
    18c8:	68ba      	ldr	r2, [r7, #8]
    18ca:	4413      	add	r3, r2
    18cc:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    18ce:	68bb      	ldr	r3, [r7, #8]
    18d0:	781b      	ldrb	r3, [r3, #0]
    18d2:	2b6c      	cmp	r3, #108	; 0x6c
    18d4:	d10c      	bne.n	18f0 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    18d6:	68bb      	ldr	r3, [r7, #8]
    18d8:	3301      	adds	r3, #1
    18da:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    18dc:	68bb      	ldr	r3, [r7, #8]
    18de:	781b      	ldrb	r3, [r3, #0]
    18e0:	2b6c      	cmp	r3, #108	; 0x6c
    18e2:	d105      	bne.n	18f0 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    18e4:	68bb      	ldr	r3, [r7, #8]
    18e6:	3301      	adds	r3, #1
    18e8:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    18ea:	2301      	movs	r3, #1
    18ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    18f0:	68bb      	ldr	r3, [r7, #8]
    18f2:	781b      	ldrb	r3, [r3, #0]
    18f4:	3b46      	subs	r3, #70	; 0x46
    18f6:	2b32      	cmp	r3, #50	; 0x32
    18f8:	f200 8254 	bhi.w	1da4 <am_util_stdio_vsprintf+0x5b8>
    18fc:	a201      	add	r2, pc, #4	; (adr r2, 1904 <am_util_stdio_vsprintf+0x118>)
    18fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1902:	bf00      	nop
    1904:	00001d2f 	.word	0x00001d2f
    1908:	00001da5 	.word	0x00001da5
    190c:	00001da5 	.word	0x00001da5
    1910:	00001da5 	.word	0x00001da5
    1914:	00001da5 	.word	0x00001da5
    1918:	00001da5 	.word	0x00001da5
    191c:	00001da5 	.word	0x00001da5
    1920:	00001da5 	.word	0x00001da5
    1924:	00001da5 	.word	0x00001da5
    1928:	00001da5 	.word	0x00001da5
    192c:	00001da5 	.word	0x00001da5
    1930:	00001da5 	.word	0x00001da5
    1934:	00001da5 	.word	0x00001da5
    1938:	00001da5 	.word	0x00001da5
    193c:	00001da5 	.word	0x00001da5
    1940:	00001da5 	.word	0x00001da5
    1944:	00001da5 	.word	0x00001da5
    1948:	00001da5 	.word	0x00001da5
    194c:	00001acb 	.word	0x00001acb
    1950:	00001da5 	.word	0x00001da5
    1954:	00001da5 	.word	0x00001da5
    1958:	00001da5 	.word	0x00001da5
    195c:	00001da5 	.word	0x00001da5
    1960:	00001da5 	.word	0x00001da5
    1964:	00001da5 	.word	0x00001da5
    1968:	00001da5 	.word	0x00001da5
    196c:	00001da5 	.word	0x00001da5
    1970:	00001da5 	.word	0x00001da5
    1974:	00001da5 	.word	0x00001da5
    1978:	000019d1 	.word	0x000019d1
    197c:	00001bf7 	.word	0x00001bf7
    1980:	00001da5 	.word	0x00001da5
    1984:	00001d2f 	.word	0x00001d2f
    1988:	00001da5 	.word	0x00001da5
    198c:	00001da5 	.word	0x00001da5
    1990:	00001bf7 	.word	0x00001bf7
    1994:	00001da5 	.word	0x00001da5
    1998:	00001da5 	.word	0x00001da5
    199c:	00001da5 	.word	0x00001da5
    19a0:	00001da5 	.word	0x00001da5
    19a4:	00001da5 	.word	0x00001da5
    19a8:	00001da5 	.word	0x00001da5
    19ac:	00001da5 	.word	0x00001da5
    19b0:	00001da5 	.word	0x00001da5
    19b4:	00001da5 	.word	0x00001da5
    19b8:	000019f7 	.word	0x000019f7
    19bc:	00001da5 	.word	0x00001da5
    19c0:	00001b65 	.word	0x00001b65
    19c4:	00001da5 	.word	0x00001da5
    19c8:	00001da5 	.word	0x00001da5
    19cc:	00001ac5 	.word	0x00001ac5
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    19d0:	687b      	ldr	r3, [r7, #4]
    19d2:	1d1a      	adds	r2, r3, #4
    19d4:	607a      	str	r2, [r7, #4]
    19d6:	681b      	ldr	r3, [r3, #0]
    19d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    19dc:	68fb      	ldr	r3, [r7, #12]
    19de:	2b00      	cmp	r3, #0
    19e0:	d005      	beq.n	19ee <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    19e2:	68fb      	ldr	r3, [r7, #12]
    19e4:	1c5a      	adds	r2, r3, #1
    19e6:	60fa      	str	r2, [r7, #12]
    19e8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    19ec:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    19ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    19f0:	3301      	adds	r3, #1
    19f2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    19f4:	e1e6      	b.n	1dc4 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    19f6:	687b      	ldr	r3, [r7, #4]
    19f8:	1d1a      	adds	r2, r3, #4
    19fa:	607a      	str	r2, [r7, #4]
    19fc:	681b      	ldr	r3, [r3, #0]
    19fe:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    1a00:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    1a02:	f7ff fdb4 	bl	156e <simple_strlen>
    1a06:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    1a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1a0a:	2b00      	cmp	r3, #0
    1a0c:	dd2e      	ble.n	1a6c <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    1a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1a12:	429a      	cmp	r2, r3
    1a14:	d22a      	bcs.n	1a6c <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1a16:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1a1a:	1ad3      	subs	r3, r2, r3
    1a1c:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1a1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1a22:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1a24:	4619      	mov	r1, r3
    1a26:	68f8      	ldr	r0, [r7, #12]
    1a28:	f7ff fdbc 	bl	15a4 <padbuffer>
    1a2c:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    1a2e:	68fb      	ldr	r3, [r7, #12]
    1a30:	2b00      	cmp	r3, #0
    1a32:	d001      	beq.n	1a38 <am_util_stdio_vsprintf+0x24c>
    1a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1a36:	e000      	b.n	1a3a <am_util_stdio_vsprintf+0x24e>
    1a38:	2300      	movs	r3, #0
    1a3a:	68fa      	ldr	r2, [r7, #12]
    1a3c:	4413      	add	r3, r2
    1a3e:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    1a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1a42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1a44:	4413      	add	r3, r2
    1a46:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1a48:	2300      	movs	r3, #0
    1a4a:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    1a4c:	e00e      	b.n	1a6c <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    1a4e:	68fb      	ldr	r3, [r7, #12]
    1a50:	2b00      	cmp	r3, #0
    1a52:	d005      	beq.n	1a60 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    1a54:	68fb      	ldr	r3, [r7, #12]
    1a56:	1c5a      	adds	r2, r3, #1
    1a58:	60fa      	str	r2, [r7, #12]
    1a5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1a5c:	7812      	ldrb	r2, [r2, #0]
    1a5e:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    1a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1a62:	3301      	adds	r3, #1
    1a64:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    1a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1a68:	3301      	adds	r3, #1
    1a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    1a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1a6e:	781b      	ldrb	r3, [r3, #0]
    1a70:	2b00      	cmp	r3, #0
    1a72:	d1ec      	bne.n	1a4e <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    1a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1a76:	2b00      	cmp	r3, #0
    1a78:	f000 81a1 	beq.w	1dbe <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    1a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1a7e:	425b      	negs	r3, r3
    1a80:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    1a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1a86:	429a      	cmp	r2, r3
    1a88:	f080 8199 	bcs.w	1dbe <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1a8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1a90:	1ad3      	subs	r3, r2, r3
    1a92:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1a94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1a98:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1a9a:	4619      	mov	r1, r3
    1a9c:	68f8      	ldr	r0, [r7, #12]
    1a9e:	f7ff fd81 	bl	15a4 <padbuffer>
    1aa2:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    1aa4:	68fb      	ldr	r3, [r7, #12]
    1aa6:	2b00      	cmp	r3, #0
    1aa8:	d001      	beq.n	1aae <am_util_stdio_vsprintf+0x2c2>
    1aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1aac:	e000      	b.n	1ab0 <am_util_stdio_vsprintf+0x2c4>
    1aae:	2300      	movs	r3, #0
    1ab0:	68fa      	ldr	r2, [r7, #12]
    1ab2:	4413      	add	r3, r2
    1ab4:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    1ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1ab8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1aba:	4413      	add	r3, r2
    1abc:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1abe:	2300      	movs	r3, #0
    1ac0:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    1ac2:	e17c      	b.n	1dbe <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    1ac4:	2301      	movs	r3, #1
    1ac6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1aca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1ace:	2b00      	cmp	r3, #0
    1ad0:	d00a      	beq.n	1ae8 <am_util_stdio_vsprintf+0x2fc>
    1ad2:	687b      	ldr	r3, [r7, #4]
    1ad4:	3307      	adds	r3, #7
    1ad6:	f023 0307 	bic.w	r3, r3, #7
    1ada:	f103 0208 	add.w	r2, r3, #8
    1ade:	607a      	str	r2, [r7, #4]
    1ae0:	cb18      	ldmia	r3, {r3, r4}
    1ae2:	e007      	b.n	1af4 <am_util_stdio_vsprintf+0x308>
    1ae4:	1000415c 	.word	0x1000415c
                                      va_arg(pArgs, uint32_t);
    1ae8:	687b      	ldr	r3, [r7, #4]
    1aea:	1d1a      	adds	r2, r3, #4
    1aec:	607a      	str	r2, [r7, #4]
    1aee:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1af0:	f04f 0400 	mov.w	r4, #0
    1af4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    1af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1afa:	2b00      	cmp	r3, #0
    1afc:	d01e      	beq.n	1b3c <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    1afe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1b02:	f7ff fc22 	bl	134a <ndigits_in_hex>
    1b06:	4602      	mov	r2, r0
    1b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1b0a:	1a9b      	subs	r3, r3, r2
    1b0c:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1b0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1b12:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1b14:	4619      	mov	r1, r3
    1b16:	68f8      	ldr	r0, [r7, #12]
    1b18:	f7ff fd44 	bl	15a4 <padbuffer>
    1b1c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1b1e:	68fb      	ldr	r3, [r7, #12]
    1b20:	2b00      	cmp	r3, #0
    1b22:	d001      	beq.n	1b28 <am_util_stdio_vsprintf+0x33c>
    1b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1b26:	e000      	b.n	1b2a <am_util_stdio_vsprintf+0x33e>
    1b28:	2300      	movs	r3, #0
    1b2a:	68fa      	ldr	r2, [r7, #12]
    1b2c:	4413      	add	r3, r2
    1b2e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1b32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1b34:	4413      	add	r3, r2
    1b36:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1b38:	2300      	movs	r3, #0
    1b3a:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    1b3c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    1b40:	68fa      	ldr	r2, [r7, #12]
    1b42:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1b46:	f7ff fcb2 	bl	14ae <uint64_to_hexstr>
    1b4a:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1b4c:	68fb      	ldr	r3, [r7, #12]
    1b4e:	2b00      	cmp	r3, #0
    1b50:	d003      	beq.n	1b5a <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    1b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1b54:	68fa      	ldr	r2, [r7, #12]
    1b56:	4413      	add	r3, r2
    1b58:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1b5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1b5e:	4413      	add	r3, r2
    1b60:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1b62:	e12f      	b.n	1dc4 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1b64:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1b68:	2b00      	cmp	r3, #0
    1b6a:	d008      	beq.n	1b7e <am_util_stdio_vsprintf+0x392>
    1b6c:	687b      	ldr	r3, [r7, #4]
    1b6e:	3307      	adds	r3, #7
    1b70:	f023 0307 	bic.w	r3, r3, #7
    1b74:	f103 0208 	add.w	r2, r3, #8
    1b78:	607a      	str	r2, [r7, #4]
    1b7a:	cb18      	ldmia	r3, {r3, r4}
    1b7c:	e005      	b.n	1b8a <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    1b7e:	687b      	ldr	r3, [r7, #4]
    1b80:	1d1a      	adds	r2, r3, #4
    1b82:	607a      	str	r2, [r7, #4]
    1b84:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1b86:	f04f 0400 	mov.w	r4, #0
    1b8a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    1b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1b90:	2b00      	cmp	r3, #0
    1b92:	d01e      	beq.n	1bd2 <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    1b94:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1b98:	f7ff fb99 	bl	12ce <ndigits_in_u64>
    1b9c:	4602      	mov	r2, r0
    1b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1ba0:	1a9b      	subs	r3, r3, r2
    1ba2:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1ba4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1ba8:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1baa:	4619      	mov	r1, r3
    1bac:	68f8      	ldr	r0, [r7, #12]
    1bae:	f7ff fcf9 	bl	15a4 <padbuffer>
    1bb2:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1bb4:	68fb      	ldr	r3, [r7, #12]
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	d001      	beq.n	1bbe <am_util_stdio_vsprintf+0x3d2>
    1bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1bbc:	e000      	b.n	1bc0 <am_util_stdio_vsprintf+0x3d4>
    1bbe:	2300      	movs	r3, #0
    1bc0:	68fa      	ldr	r2, [r7, #12]
    1bc2:	4413      	add	r3, r2
    1bc4:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1bc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1bca:	4413      	add	r3, r2
    1bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1bce:	2300      	movs	r3, #0
    1bd0:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1bd2:	68fa      	ldr	r2, [r7, #12]
    1bd4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1bd8:	f7ff fc21 	bl	141e <uint64_to_str>
    1bdc:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1bde:	68fb      	ldr	r3, [r7, #12]
    1be0:	2b00      	cmp	r3, #0
    1be2:	d003      	beq.n	1bec <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    1be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1be6:	68fa      	ldr	r2, [r7, #12]
    1be8:	4413      	add	r3, r2
    1bea:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1bee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1bf0:	4413      	add	r3, r2
    1bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1bf4:	e0e6      	b.n	1dc4 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1bf6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1bfa:	2b00      	cmp	r3, #0
    1bfc:	d008      	beq.n	1c10 <am_util_stdio_vsprintf+0x424>
    1bfe:	687b      	ldr	r3, [r7, #4]
    1c00:	3307      	adds	r3, #7
    1c02:	f023 0307 	bic.w	r3, r3, #7
    1c06:	f103 0208 	add.w	r2, r3, #8
    1c0a:	607a      	str	r2, [r7, #4]
    1c0c:	cb18      	ldmia	r3, {r3, r4}
    1c0e:	e005      	b.n	1c1c <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    1c10:	687b      	ldr	r3, [r7, #4]
    1c12:	1d1a      	adds	r2, r3, #4
    1c14:	607a      	str	r2, [r7, #4]
    1c16:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1c18:	ea4f 74e3 	mov.w	r4, r3, asr #31
    1c1c:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    1c20:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1c24:	2b00      	cmp	r3, #0
    1c26:	f174 0300 	sbcs.w	r3, r4, #0
    1c2a:	da0a      	bge.n	1c42 <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    1c2c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1c30:	425b      	negs	r3, r3
    1c32:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    1c36:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    1c3a:	2301      	movs	r3, #1
    1c3c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    1c40:	e006      	b.n	1c50 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    1c42:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1c46:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    1c4a:	2300      	movs	r3, #0
    1c4c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    1c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1c52:	2b00      	cmp	r3, #0
    1c54:	d04a      	beq.n	1cec <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    1c56:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    1c5a:	4618      	mov	r0, r3
    1c5c:	4621      	mov	r1, r4
    1c5e:	f7ff fb57 	bl	1310 <ndigits_in_i64>
    1c62:	4602      	mov	r2, r0
    1c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1c66:	1a9b      	subs	r3, r3, r2
    1c68:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    1c6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1c6e:	2b00      	cmp	r3, #0
    1c70:	d011      	beq.n	1c96 <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    1c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1c74:	3b01      	subs	r3, #1
    1c76:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    1c78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1c7c:	2b30      	cmp	r3, #48	; 0x30
    1c7e:	d10a      	bne.n	1c96 <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    1c80:	68fb      	ldr	r3, [r7, #12]
    1c82:	2b00      	cmp	r3, #0
    1c84:	d004      	beq.n	1c90 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    1c86:	68fb      	ldr	r3, [r7, #12]
    1c88:	1c5a      	adds	r2, r3, #1
    1c8a:	60fa      	str	r2, [r7, #12]
    1c8c:	222d      	movs	r2, #45	; 0x2d
    1c8e:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    1c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1c92:	3301      	adds	r3, #1
    1c94:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1c96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1c9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1c9c:	4619      	mov	r1, r3
    1c9e:	68f8      	ldr	r0, [r7, #12]
    1ca0:	f7ff fc80 	bl	15a4 <padbuffer>
    1ca4:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1ca6:	68fb      	ldr	r3, [r7, #12]
    1ca8:	2b00      	cmp	r3, #0
    1caa:	d001      	beq.n	1cb0 <am_util_stdio_vsprintf+0x4c4>
    1cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1cae:	e000      	b.n	1cb2 <am_util_stdio_vsprintf+0x4c6>
    1cb0:	2300      	movs	r3, #0
    1cb2:	68fa      	ldr	r2, [r7, #12]
    1cb4:	4413      	add	r3, r2
    1cb6:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1cba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1cbc:	4413      	add	r3, r2
    1cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1cc0:	2300      	movs	r3, #0
    1cc2:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    1cc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1cc8:	2b00      	cmp	r3, #0
    1cca:	d01e      	beq.n	1d0a <am_util_stdio_vsprintf+0x51e>
    1ccc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1cd0:	2b20      	cmp	r3, #32
    1cd2:	d11a      	bne.n	1d0a <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    1cd4:	68fb      	ldr	r3, [r7, #12]
    1cd6:	2b00      	cmp	r3, #0
    1cd8:	d004      	beq.n	1ce4 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    1cda:	68fb      	ldr	r3, [r7, #12]
    1cdc:	1c5a      	adds	r2, r3, #1
    1cde:	60fa      	str	r2, [r7, #12]
    1ce0:	222d      	movs	r2, #45	; 0x2d
    1ce2:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    1ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1ce6:	3301      	adds	r3, #1
    1ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
    1cea:	e00e      	b.n	1d0a <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    1cec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1cf0:	2b00      	cmp	r3, #0
    1cf2:	d00a      	beq.n	1d0a <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    1cf4:	68fb      	ldr	r3, [r7, #12]
    1cf6:	2b00      	cmp	r3, #0
    1cf8:	d004      	beq.n	1d04 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    1cfa:	68fb      	ldr	r3, [r7, #12]
    1cfc:	1c5a      	adds	r2, r3, #1
    1cfe:	60fa      	str	r2, [r7, #12]
    1d00:	222d      	movs	r2, #45	; 0x2d
    1d02:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    1d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1d06:	3301      	adds	r3, #1
    1d08:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1d0a:	68fa      	ldr	r2, [r7, #12]
    1d0c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1d10:	f7ff fb85 	bl	141e <uint64_to_str>
    1d14:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1d16:	68fb      	ldr	r3, [r7, #12]
    1d18:	2b00      	cmp	r3, #0
    1d1a:	d003      	beq.n	1d24 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    1d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1d1e:	68fa      	ldr	r2, [r7, #12]
    1d20:	4413      	add	r3, r2
    1d22:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1d26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1d28:	4413      	add	r3, r2
    1d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1d2c:	e04a      	b.n	1dc4 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    1d2e:	68fb      	ldr	r3, [r7, #12]
    1d30:	2b00      	cmp	r3, #0
    1d32:	d046      	beq.n	1dc2 <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	3307      	adds	r3, #7
    1d38:	f023 0307 	bic.w	r3, r3, #7
    1d3c:	f103 0208 	add.w	r2, r3, #8
    1d40:	607a      	str	r2, [r7, #4]
    1d42:	cb18      	ldmia	r3, {r3, r4}
    1d44:	4618      	mov	r0, r3
    1d46:	4621      	mov	r1, r4
    1d48:	f7fe fb52 	bl	3f0 <__aeabi_d2f>
    1d4c:	4603      	mov	r3, r0
    1d4e:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    1d50:	68fb      	ldr	r3, [r7, #12]
    1d52:	2214      	movs	r2, #20
    1d54:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    1d56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1d58:	68f9      	ldr	r1, [r7, #12]
    1d5a:	6978      	ldr	r0, [r7, #20]
    1d5c:	f7ff fc48 	bl	15f0 <ftoa>
    1d60:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    1d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1d64:	2b00      	cmp	r3, #0
    1d66:	da14      	bge.n	1d92 <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    1d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
    1d6e:	d102      	bne.n	1d76 <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    1d70:	4b1e      	ldr	r3, [pc, #120]	; (1dec <am_util_stdio_vsprintf+0x600>)
    1d72:	62bb      	str	r3, [r7, #40]	; 0x28
    1d74:	e008      	b.n	1d88 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    1d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1d78:	f113 0f02 	cmn.w	r3, #2
    1d7c:	d102      	bne.n	1d84 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    1d7e:	4b1c      	ldr	r3, [pc, #112]	; (1df0 <am_util_stdio_vsprintf+0x604>)
    1d80:	62bb      	str	r3, [r7, #40]	; 0x28
    1d82:	e001      	b.n	1d88 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    1d84:	4b1b      	ldr	r3, [pc, #108]	; (1df4 <am_util_stdio_vsprintf+0x608>)
    1d86:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    1d88:	68fb      	ldr	r3, [r7, #12]
    1d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1d8c:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    1d8e:	2303      	movs	r3, #3
    1d90:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    1d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1d94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1d96:	4413      	add	r3, r2
    1d98:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    1d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1d9c:	68fa      	ldr	r2, [r7, #12]
    1d9e:	4413      	add	r3, r2
    1da0:	60fb      	str	r3, [r7, #12]
                }
                break;
    1da2:	e00e      	b.n	1dc2 <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    1da4:	68fb      	ldr	r3, [r7, #12]
    1da6:	2b00      	cmp	r3, #0
    1da8:	d005      	beq.n	1db6 <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    1daa:	68fb      	ldr	r3, [r7, #12]
    1dac:	1c5a      	adds	r2, r3, #1
    1dae:	60fa      	str	r2, [r7, #12]
    1db0:	68ba      	ldr	r2, [r7, #8]
    1db2:	7812      	ldrb	r2, [r2, #0]
    1db4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    1db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1db8:	3301      	adds	r3, #1
    1dba:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1dbc:	e002      	b.n	1dc4 <am_util_stdio_vsprintf+0x5d8>
                break;
    1dbe:	bf00      	nop
    1dc0:	e000      	b.n	1dc4 <am_util_stdio_vsprintf+0x5d8>
                break;
    1dc2:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    1dc4:	68bb      	ldr	r3, [r7, #8]
    1dc6:	3301      	adds	r3, #1
    1dc8:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    1dca:	68bb      	ldr	r3, [r7, #8]
    1dcc:	781b      	ldrb	r3, [r3, #0]
    1dce:	2b00      	cmp	r3, #0
    1dd0:	f47f ad17 	bne.w	1802 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    1dd4:	68fb      	ldr	r3, [r7, #12]
    1dd6:	2b00      	cmp	r3, #0
    1dd8:	d002      	beq.n	1de0 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    1dda:	68fb      	ldr	r3, [r7, #12]
    1ddc:	2200      	movs	r2, #0
    1dde:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    1de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1de2:	4618      	mov	r0, r3
    1de4:	3754      	adds	r7, #84	; 0x54
    1de6:	46bd      	mov	sp, r7
    1de8:	bd90      	pop	{r4, r7, pc}
    1dea:	bf00      	nop
    1dec:	00302e30 	.word	0x00302e30
    1df0:	00232e23 	.word	0x00232e23
    1df4:	003f2e3f 	.word	0x003f2e3f

00001df8 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    1df8:	b40f      	push	{r0, r1, r2, r3}
    1dfa:	b580      	push	{r7, lr}
    1dfc:	b082      	sub	sp, #8
    1dfe:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    1e00:	f107 0314 	add.w	r3, r7, #20
    1e04:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    1e06:	683a      	ldr	r2, [r7, #0]
    1e08:	6939      	ldr	r1, [r7, #16]
    1e0a:	4808      	ldr	r0, [pc, #32]	; (1e2c <am_util_stdio_printf+0x34>)
    1e0c:	f7ff fcee 	bl	17ec <am_util_stdio_vsprintf>
    1e10:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    1e12:	4b07      	ldr	r3, [pc, #28]	; (1e30 <am_util_stdio_printf+0x38>)
    1e14:	681b      	ldr	r3, [r3, #0]
    1e16:	4805      	ldr	r0, [pc, #20]	; (1e2c <am_util_stdio_printf+0x34>)
    1e18:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    1e1a:	687b      	ldr	r3, [r7, #4]
}
    1e1c:	4618      	mov	r0, r3
    1e1e:	3708      	adds	r7, #8
    1e20:	46bd      	mov	sp, r7
    1e22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    1e26:	b004      	add	sp, #16
    1e28:	4770      	bx	lr
    1e2a:	bf00      	nop
    1e2c:	1000405c 	.word	0x1000405c
    1e30:	1000417c 	.word	0x1000417c

00001e34 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    1e34:	b580      	push	{r7, lr}
    1e36:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    1e38:	4802      	ldr	r0, [pc, #8]	; (1e44 <am_util_stdio_terminal_clear+0x10>)
    1e3a:	f7ff ffdd 	bl	1df8 <am_util_stdio_printf>
}
    1e3e:	bf00      	nop
    1e40:	bd80      	pop	{r7, pc}
    1e42:	bf00      	nop
    1e44:	000026cc 	.word	0x000026cc

00001e48 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1e48:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_mcuctrl_bucks_enable();
    1e4a:	f000 fa77 	bl	233c <am_hal_mcuctrl_bucks_enable>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    1e4e:	f000 fb29 	bl	24a4 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    1e52:	2001      	movs	r0, #1
    1e54:	f000 fa88 	bl	2368 <am_hal_rtc_osc_select>

    //
    // Stop the XTAL.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1e58:	2001      	movs	r0, #1
    1e5a:	f000 f923 	bl	20a4 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    1e5e:	f000 fa91 	bl	2384 <am_hal_rtc_osc_disable>

    //
    // Disable the bandgap.
    //
    am_hal_mcuctrl_bandgap_disable();
}
    1e62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_mcuctrl_bandgap_disable();
    1e66:	f000 ba61 	b.w	232c <am_hal_mcuctrl_bandgap_disable>
    1e6a:	bf00      	nop

00001e6c <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    1e6c:	b510      	push	{r4, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    1e6e:	4b10      	ldr	r3, [pc, #64]	; (1eb0 <am_bsp_debug_printf_enable+0x44>)
    1e70:	681c      	ldr	r4, [r3, #0]
    1e72:	f014 0401 	ands.w	r4, r4, #1
{
    1e76:	b086      	sub	sp, #24
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    1e78:	d001      	beq.n	1e7e <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    1e7a:	b006      	add	sp, #24
    1e7c:	bd10      	pop	{r4, pc}
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    1e7e:	a806      	add	r0, sp, #24
    1e80:	490c      	ldr	r1, [pc, #48]	; (1eb4 <am_bsp_debug_printf_enable+0x48>)
    1e82:	f840 1d14 	str.w	r1, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    1e86:	f000 fab1 	bl	23ec <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    1e8a:	4a0b      	ldr	r2, [pc, #44]	; (1eb8 <am_bsp_debug_printf_enable+0x4c>)
    1e8c:	480b      	ldr	r0, [pc, #44]	; (1ebc <am_bsp_debug_printf_enable+0x50>)
    1e8e:	490c      	ldr	r1, [pc, #48]	; (1ec0 <am_bsp_debug_printf_enable+0x54>)
    1e90:	2373      	movs	r3, #115	; 0x73
    1e92:	6013      	str	r3, [r2, #0]
    1e94:	6803      	ldr	r3, [r0, #0]
    1e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    1e9a:	6003      	str	r3, [r0, #0]
    1e9c:	6808      	ldr	r0, [r1, #0]
    1e9e:	f420 4c7f 	bic.w	ip, r0, #65280	; 0xff00
    1ea2:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    1ea6:	600b      	str	r3, [r1, #0]
    1ea8:	6014      	str	r4, [r2, #0]
}
    1eaa:	b006      	add	sp, #24
    1eac:	bd10      	pop	{r4, pc}
    1eae:	bf00      	nop
    1eb0:	10004170 	.word	0x10004170
    1eb4:	000f4240 	.word	0x000f4240
    1eb8:	40010060 	.word	0x40010060
    1ebc:	40010054 	.word	0x40010054
    1ec0:	40010028 	.word	0x40010028

00001ec4 <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    1ec4:	f000 b9ee 	b.w	22a4 <am_hal_itm_print>

00001ec8 <am_hal_adc_config>:
//! @return None.
//
//*****************************************************************************
void
am_hal_adc_config(am_hal_adc_config_t *psConfig)
{
    1ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1eca:	4601      	mov	r1, r0
    __asm("");

    //
    // Set general ADC configuration parameters.
    //
    AM_REG(ADC, CFG) = (psConfig->ui32Clock         |
    1ecc:	e890 0088 	ldmia.w	r0, {r3, r7}
                        psConfig->ui32TriggerConfig |
                        psConfig->ui32Reference     |
                        psConfig->ui32MaxSampleRate |
                        psConfig->ui32PowerMode     |
                        psConfig->ui32Repeat        |
                        psConfig-> ui32POnTemp      |
    1ed0:	6886      	ldr	r6, [r0, #8]
    1ed2:	68c5      	ldr	r5, [r0, #12]
    1ed4:	6904      	ldr	r4, [r0, #16]
    1ed6:	6940      	ldr	r0, [r0, #20]
    1ed8:	698a      	ldr	r2, [r1, #24]
    AM_REG(ADC, CFG) = (psConfig->ui32Clock         |
    1eda:	433b      	orrs	r3, r7
                        psConfig-> ui32POnTemp      |
    1edc:	f043 0301 	orr.w	r3, r3, #1
    1ee0:	4333      	orrs	r3, r6
    1ee2:	432b      	orrs	r3, r5
    1ee4:	4323      	orrs	r3, r4
    1ee6:	4303      	orrs	r3, r0
    AM_REG(ADC, CFG) = (psConfig->ui32Clock         |
    1ee8:	4f14      	ldr	r7, [pc, #80]	; (1f3c <am_hal_adc_config+0x74>)
                        AM_REG_ADC_CFG_ADCEN(1));

    //
    // Set the window limits for the ADC.
    //
    AM_REG(ADC, WLIM) = psConfig->ui32Window;
    1eea:	4e15      	ldr	r6, [pc, #84]	; (1f40 <am_hal_adc_config+0x78>)

    //
    // Grab the temperature trims from OTP once.
    //
    priv_temp_trims.ui32.ui32CalibrationTemperature =
        am_hal_flash_load_ui32(AM_HAL_ADC_CALIB_TEMP_ADDR);
    1eec:	4815      	ldr	r0, [pc, #84]	; (1f44 <am_hal_adc_config+0x7c>)
    priv_temp_trims.ui32.ui32CalibrationTemperature =
    1eee:	4d16      	ldr	r5, [pc, #88]	; (1f48 <am_hal_adc_config+0x80>)
                        psConfig-> ui32POnTemp      |
    1ef0:	4313      	orrs	r3, r2
    AM_REG(ADC, CFG) = (psConfig->ui32Clock         |
    1ef2:	603b      	str	r3, [r7, #0]
    AM_REG(ADC, WLIM) = psConfig->ui32Window;
    1ef4:	69c9      	ldr	r1, [r1, #28]
    1ef6:	6031      	str	r1, [r6, #0]
        am_hal_flash_load_ui32(AM_HAL_ADC_CALIB_TEMP_ADDR);
    1ef8:	f000 f964 	bl	21c4 <am_hal_flash_load_ui32>
    priv_temp_trims.ui32.ui32CalibrationTemperature =
    1efc:	6028      	str	r0, [r5, #0]
    priv_temp_trims.ui32.ui32CalibrationVoltage     =
        am_hal_flash_load_ui32(AM_HAL_ADC_CALIB_AMBIENT_ADDR);
    1efe:	4813      	ldr	r0, [pc, #76]	; (1f4c <am_hal_adc_config+0x84>)
    1f00:	f000 f960 	bl	21c4 <am_hal_flash_load_ui32>
    priv_temp_trims.ui32.ui32CalibrationVoltage     =
    1f04:	6068      	str	r0, [r5, #4]
    priv_temp_trims.ui32.ui32CalibrationOffset      =
        am_hal_flash_load_ui32(AM_HAL_ADC_CALIB_ADC_OFFSET_ADDR);
    1f06:	4812      	ldr	r0, [pc, #72]	; (1f50 <am_hal_adc_config+0x88>)
    1f08:	f000 f95c 	bl	21c4 <am_hal_flash_load_ui32>
    // If any of the OTP calibration values are invalid, set up some
    //  obviously invalid defaults.  For example, with these defaults the
    //  function am_hal_adc_volts_to_celsius() will return the value for
    //  absolute zero while avoiding a divide-by-zero error.
    //
    if ((priv_temp_trims.ui32.ui32CalibrationTemperature == 0xffffffff)    ||
    1f0c:	682c      	ldr	r4, [r5, #0]
    priv_temp_trims.ui32.ui32CalibrationOffset      =
    1f0e:	60a8      	str	r0, [r5, #8]
    if ((priv_temp_trims.ui32.ui32CalibrationTemperature == 0xffffffff)    ||
    1f10:	1c63      	adds	r3, r4, #1
    1f12:	d007      	beq.n	1f24 <am_hal_adc_config+0x5c>
    1f14:	686a      	ldr	r2, [r5, #4]
    1f16:	1c53      	adds	r3, r2, #1
    1f18:	d004      	beq.n	1f24 <am_hal_adc_config+0x5c>
        (priv_temp_trims.ui32.ui32CalibrationVoltage     == 0xffffffff)    ||
    1f1a:	3001      	adds	r0, #1
    1f1c:	d002      	beq.n	1f24 <am_hal_adc_config+0x5c>
        priv_temp_trims.flt.fCalibrationVoltage     = 1.0F;
        priv_temp_trims.ui32.bMeasured = false;
    }
    else
    {
        priv_temp_trims.ui32.bMeasured = true;
    1f1e:	2001      	movs	r0, #1
    1f20:	7328      	strb	r0, [r5, #12]
    1f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        priv_temp_trims.flt.fCalibrationOffset      = 0.0F;
    1f24:	f04f 0c00 	mov.w	ip, #0
        priv_temp_trims.flt.fCalibrationVoltage     = 1.0F;
    1f28:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
        priv_temp_trims.ui32.bMeasured = false;
    1f2c:	2000      	movs	r0, #0
        priv_temp_trims.flt.fCalibrationOffset      = 0.0F;
    1f2e:	f8c5 c008 	str.w	ip, [r5, #8]
        priv_temp_trims.flt.fCalibrationTemperature = 0.0F;
    1f32:	f8c5 c000 	str.w	ip, [r5]
        priv_temp_trims.flt.fCalibrationVoltage     = 1.0F;
    1f36:	606b      	str	r3, [r5, #4]
    1f38:	7328      	strb	r0, [r5, #12]
    1f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f3c:	50008000 	.word	0x50008000
    1f40:	5000802c 	.word	0x5000802c
    1f44:	50020050 	.word	0x50020050
    1f48:	10004160 	.word	0x10004160
    1f4c:	5002004c 	.word	0x5002004c
    1f50:	50020054 	.word	0x50020054

00001f54 <am_hal_adc_temp_trims_get>:
am_hal_adc_temp_trims_get(float * pfTemp, float * pfVoltage, float * pfOffsetV)
{
    //
    // Return trim temperature as a float, if you can.
    //
    if (pfTemp != NULL)
    1f54:	b178      	cbz	r0, 1f76 <am_hal_adc_temp_trims_get+0x22>
{
    1f56:	b410      	push	{r4}
    {
        *pfTemp = priv_temp_trims.flt.fCalibrationTemperature;
    1f58:	4b0b      	ldr	r3, [pc, #44]	; (1f88 <am_hal_adc_temp_trims_get+0x34>)
    1f5a:	681c      	ldr	r4, [r3, #0]
    1f5c:	6004      	str	r4, [r0, #0]
    }

    //
    // Return trim voltage as a float, if you can.
    //
    if (pfVoltage != NULL)
    1f5e:	b119      	cbz	r1, 1f68 <am_hal_adc_temp_trims_get+0x14>
    {
        *pfVoltage = priv_temp_trims.flt.fCalibrationVoltage;
    1f60:	f8d3 c004 	ldr.w	ip, [r3, #4]
    1f64:	f8c1 c000 	str.w	ip, [r1]
    }

    //
    // Return trim ADC offset voltage as a float, if you can.
    //
    if (pfOffsetV != NULL)
    1f68:	b10a      	cbz	r2, 1f6e <am_hal_adc_temp_trims_get+0x1a>
    {
        *pfOffsetV = priv_temp_trims.flt.fCalibrationOffset;
    1f6a:	6898      	ldr	r0, [r3, #8]
    1f6c:	6010      	str	r0, [r2, #0]
    }

    return priv_temp_trims.ui32.bMeasured;
}
    1f6e:	7b18      	ldrb	r0, [r3, #12]
    1f70:	f85d 4b04 	ldr.w	r4, [sp], #4
    1f74:	4770      	bx	lr
    1f76:	4b04      	ldr	r3, [pc, #16]	; (1f88 <am_hal_adc_temp_trims_get+0x34>)
    if (pfVoltage != NULL)
    1f78:	b109      	cbz	r1, 1f7e <am_hal_adc_temp_trims_get+0x2a>
        *pfVoltage = priv_temp_trims.flt.fCalibrationVoltage;
    1f7a:	6858      	ldr	r0, [r3, #4]
    1f7c:	6008      	str	r0, [r1, #0]
    if (pfOffsetV != NULL)
    1f7e:	b10a      	cbz	r2, 1f84 <am_hal_adc_temp_trims_get+0x30>
        *pfOffsetV = priv_temp_trims.flt.fCalibrationOffset;
    1f80:	6899      	ldr	r1, [r3, #8]
    1f82:	6011      	str	r1, [r2, #0]
}
    1f84:	7b18      	ldrb	r0, [r3, #12]
    1f86:	4770      	bx	lr
    1f88:	10004160 	.word	0x10004160

00001f8c <am_hal_adc_slot_config>:
    uint32_t ui32RegOffset;

    //
    // Locate the correct register for this ADC slot.
    //
    ui32RegOffset = (AM_REG_ADCn(0) + AM_REG_ADC_SL0CFG_O +
    1f8c:	4b02      	ldr	r3, [pc, #8]	; (1f98 <am_hal_adc_slot_config+0xc>)
    1f8e:	4403      	add	r3, r0
    1f90:	0098      	lsls	r0, r3, #2
                     (4 * ui32SlotNumber));

    //
    // Write the register with the caller's configuration value.
    //
    AM_REGVAL(ui32RegOffset) = ui32SlotConfig;
    1f92:	6001      	str	r1, [r0, #0]
    1f94:	4770      	bx	lr
    1f96:	bf00      	nop
    1f98:	14002003 	.word	0x14002003

00001f9c <am_hal_adc_fifo_read>:
    uint32_t ui32Count;

    //
    // Grab a value from the ADC FIFO.
    //
    psFifoReadValue-> ui8IntStatus = AM_REG(ADC, INTSTAT);
    1f9c:	4b0a      	ldr	r3, [pc, #40]	; (1fc8 <am_hal_adc_fifo_read+0x2c>)

    //
    // Clear any current interrupts.
    //
    AM_REG(ADC, INTCLR) = psFifoReadValue-> ui8IntStatus;
    1f9e:	490b      	ldr	r1, [pc, #44]	; (1fcc <am_hal_adc_fifo_read+0x30>)
    psFifoReadValue-> ui8IntStatus = AM_REG(ADC, INTSTAT);
    1fa0:	681b      	ldr	r3, [r3, #0]

    //
    // Grab a value from the ADC FIFO.
    //
    ui32FIFOValue = AM_REG(ADC, FIFO);
    1fa2:	4a0b      	ldr	r2, [pc, #44]	; (1fd0 <am_hal_adc_fifo_read+0x34>)
{
    1fa4:	b410      	push	{r4}
    1fa6:	b2dc      	uxtb	r4, r3
    psFifoReadValue-> ui8IntStatus = AM_REG(ADC, INTSTAT);
    1fa8:	7003      	strb	r3, [r0, #0]
    AM_REG(ADC, INTCLR) = psFifoReadValue-> ui8IntStatus;
    1faa:	600c      	str	r4, [r1, #0]
    ui32FIFOValue = AM_REG(ADC, FIFO);
    1fac:	6813      	ldr	r3, [r2, #0]
    //
    // Read once, extract the fields.
    //
    psFifoReadValue-> ui8Slot = AM_READ_SM(AM_REG_ADC_FIFO_SLOTNUM,
                                           ui32FIFOValue);
    psFifoReadValue->ui16Data = AM_READ_SM(AM_REG_ADC_FIFO_DATA, ui32FIFOValue);
    1fae:	8043      	strh	r3, [r0, #2]
    psFifoReadValue-> ui8Slot = AM_READ_SM(AM_REG_ADC_FIFO_SLOTNUM,
    1fb0:	f3c3 6102 	ubfx	r1, r3, #24, #3

    //
    // Check FIFO valid bits.
    //
    ui32Count = AM_READ_SM(AM_REG_ADC_FIFO_COUNT, ui32FIFOValue);
    1fb4:	f3c3 4403 	ubfx	r4, r3, #16, #4
    psFifoReadValue-> ui8Slot = AM_READ_SM(AM_REG_ADC_FIFO_SLOTNUM,
    1fb8:	7041      	strb	r1, [r0, #1]

    if (ui32Count)
    1fba:	b10c      	cbz	r4, 1fc0 <am_hal_adc_fifo_read+0x24>
    {
        //
        // Pop the FIFO.
        //
        AM_REG(ADC, FIFO) = 0; // write anything to it.
    1fbc:	2000      	movs	r0, #0
    1fbe:	6010      	str	r0, [r2, #0]

    //
    // Return FIFO valid bits.
    //
    return ui32Count;
}
    1fc0:	4620      	mov	r0, r4
    1fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
    1fc6:	4770      	bx	lr
    1fc8:	50008204 	.word	0x50008204
    1fcc:	50008208 	.word	0x50008208
    1fd0:	50008030 	.word	0x50008030

00001fd4 <am_hal_adc_trigger>:
am_hal_adc_trigger(void)
{
    //
    // Write to the Software trigger register in the ADC.
    //
    AM_REG(ADC, SWT) = 0x37;
    1fd4:	4b01      	ldr	r3, [pc, #4]	; (1fdc <am_hal_adc_trigger+0x8>)
    1fd6:	2237      	movs	r2, #55	; 0x37
    1fd8:	601a      	str	r2, [r3, #0]
    1fda:	4770      	bx	lr
    1fdc:	50008008 	.word	0x50008008

00001fe0 <am_hal_adc_enable>:
am_hal_adc_enable(void)
{
    //
    // Enable the ADC.
    //
    AM_BFW(ADC, CFG, ADCEN, 0x1);
    1fe0:	4a02      	ldr	r2, [pc, #8]	; (1fec <am_hal_adc_enable+0xc>)
    1fe2:	6813      	ldr	r3, [r2, #0]
    1fe4:	f043 0001 	orr.w	r0, r3, #1
    1fe8:	6010      	str	r0, [r2, #0]
    1fea:	4770      	bx	lr
    1fec:	50008000 	.word	0x50008000

00001ff0 <am_hal_adc_batt_load_enable>:
am_hal_adc_batt_load_enable(void)
{
    //
    // Enable the ADC battery load resistor.
    //
    AM_BFW(ADC, CFG, BATTLOAD,
    1ff0:	4a02      	ldr	r2, [pc, #8]	; (1ffc <am_hal_adc_batt_load_enable+0xc>)
    1ff2:	6813      	ldr	r3, [r2, #0]
    1ff4:	f043 0080 	orr.w	r0, r3, #128	; 0x80
    1ff8:	6010      	str	r0, [r2, #0]
    1ffa:	4770      	bx	lr
    1ffc:	50008000 	.word	0x50008000

00002000 <am_hal_adc_batt_load_disable>:
am_hal_adc_batt_load_disable(void)
{
    //
    // Disable the ADC battery load resistor.
    //
    AM_BFW(ADC, CFG, BATTLOAD,
    2000:	4a02      	ldr	r2, [pc, #8]	; (200c <am_hal_adc_batt_load_disable+0xc>)
    2002:	6813      	ldr	r3, [r2, #0]
    2004:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    2008:	6010      	str	r0, [r2, #0]
    200a:	4770      	bx	lr
    200c:	50008000 	.word	0x50008000

00002010 <am_hal_adc_int_enable>:
am_hal_adc_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupts.
    //
    AM_REG(ADC, INTEN) |= ui32Interrupt;
    2010:	4a02      	ldr	r2, [pc, #8]	; (201c <am_hal_adc_int_enable+0xc>)
    2012:	6813      	ldr	r3, [r2, #0]
    2014:	4318      	orrs	r0, r3
    2016:	6010      	str	r0, [r2, #0]
    2018:	4770      	bx	lr
    201a:	bf00      	nop
    201c:	50008200 	.word	0x50008200

00002020 <am_hal_adc_volts_to_celsius>:

    //
    // Get remaining trimmed values.
    //
    float fCalibration_voltage = priv_temp_trims.flt.fCalibrationVoltage;
    float fCalibration_offset  = priv_temp_trims.flt.fCalibrationOffset;
    2020:	4b0b      	ldr	r3, [pc, #44]	; (2050 <am_hal_adc_volts_to_celsius+0x30>)
    fTemp *= (fVoltage - fCalibration_offset);

    //
    // Give it back to the caller in Celsius.
    //
    return fTemp - 273.15f;
    2022:	eddf 6a0c 	vldr	s13, [pc, #48]	; 2054 <am_hal_adc_volts_to_celsius+0x34>
    float fCalibration_offset  = priv_temp_trims.flt.fCalibrationOffset;
    2026:	edd3 7a02 	vldr	s15, [r3, #8]
    fTemp /= (fCalibration_voltage - fCalibration_offset);
    202a:	ed93 7a01 	vldr	s14, [r3, #4]
    202e:	edd3 5a00 	vldr	s11, [r3]
    2032:	ee37 0a67 	vsub.f32	s0, s14, s15
    fTemp *= (fVoltage - fCalibration_offset);
    2036:	ee06 0a10 	vmov	s12, r0
    fTemp /= (fCalibration_voltage - fCalibration_offset);
    203a:	ee85 1a80 	vdiv.f32	s2, s11, s0
    fTemp *= (fVoltage - fCalibration_offset);
    203e:	ee76 0a67 	vsub.f32	s1, s12, s15
    2042:	ee60 1a81 	vmul.f32	s3, s1, s2
}
    2046:	ee31 2ae6 	vsub.f32	s4, s3, s13
    204a:	ee12 0a10 	vmov	r0, s4
    204e:	4770      	bx	lr
    2050:	10004160 	.word	0x10004160
    2054:	43889333 	.word	0x43889333

00002058 <am_hal_clkgen_sysclk_select>:
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    2058:	4b05      	ldr	r3, [pc, #20]	; (2070 <am_hal_clkgen_sysclk_select+0x18>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    205a:	4906      	ldr	r1, [pc, #24]	; (2074 <am_hal_clkgen_sysclk_select+0x1c>)
{
    205c:	b410      	push	{r4}

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    205e:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    2060:	2447      	movs	r4, #71	; 0x47
    2062:	601c      	str	r4, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    2064:	6008      	str	r0, [r1, #0]
}
    2066:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(CLKGEN, CLKKEY) = 0;
    206a:	601a      	str	r2, [r3, #0]
}
    206c:	4770      	bx	lr
    206e:	bf00      	nop
    2070:	40004014 	.word	0x40004014
    2074:	40004018 	.word	0x40004018

00002078 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_BFR(CLKGEN, CCTRL, CORESEL);
    2078:	4b03      	ldr	r3, [pc, #12]	; (2088 <am_hal_clkgen_sysclk_get+0x10>)
    207a:	4a04      	ldr	r2, [pc, #16]	; (208c <am_hal_clkgen_sysclk_get+0x14>)
    207c:	6818      	ldr	r0, [r3, #0]
    207e:	f000 0107 	and.w	r1, r0, #7
        case AM_HAL_CLKGEN_SYSCLK_3MHZ:
            return 3000000;
        default:
            return 0xFFFFFFFF;
    }
}
    2082:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    2086:	4770      	bx	lr
    2088:	40004018 	.word	0x40004018
    208c:	000026e0 	.word	0x000026e0

00002090 <am_hal_clkgen_osc_start>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_start(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    2090:	0783      	lsls	r3, r0, #30
    2092:	d004      	beq.n	209e <am_hal_clkgen_osc_start+0xe>
    {
        //
        // Start the oscillator(s).
        // Note that these bits are cleared in order to enable the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) &= ~ui32OscFlags;
    2094:	4a02      	ldr	r2, [pc, #8]	; (20a0 <am_hal_clkgen_osc_start+0x10>)
    2096:	6813      	ldr	r3, [r2, #0]
    2098:	ea23 0000 	bic.w	r0, r3, r0
    209c:	6010      	str	r0, [r2, #0]
    209e:	4770      	bx	lr
    20a0:	4000400c 	.word	0x4000400c

000020a4 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    20a4:	0783      	lsls	r3, r0, #30
    20a6:	d003      	beq.n	20b0 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    20a8:	4b02      	ldr	r3, [pc, #8]	; (20b4 <am_hal_clkgen_osc_stop+0x10>)
    20aa:	681a      	ldr	r2, [r3, #0]
    20ac:	4310      	orrs	r0, r2
    20ae:	6018      	str	r0, [r3, #0]
    20b0:	4770      	bx	lr
    20b2:	bf00      	nop
    20b4:	4000400c 	.word	0x4000400c

000020b8 <am_hal_ctimer_config>:
                     (psConfig->ui32TimerBConfig << 16));

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    20b8:	680b      	ldr	r3, [r1, #0]
    ui32ConfigVal = (psConfig->ui32TimerAConfig |
    20ba:	684a      	ldr	r2, [r1, #4]
{
    20bc:	b410      	push	{r4}
                     (psConfig->ui32TimerBConfig << 16));
    20be:	688c      	ldr	r4, [r1, #8]

    //
    // Find the correct register to write.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    20c0:	4907      	ldr	r1, [pc, #28]	; (20e0 <am_hal_ctimer_config+0x28>)
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    20c2:	2b00      	cmp	r3, #0
    ui32ConfigVal = (psConfig->ui32TimerAConfig |
    20c4:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
                                  (ui32TimerNumber * TIMER_OFFSET));
    20c8:	ea4f 1000 	mov.w	r0, r0, lsl #4
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    20cc:	bf14      	ite	ne
    20ce:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
    20d2:	2300      	moveq	r3, #0
    20d4:	4323      	orrs	r3, r4

    //
    // Write our configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    20d6:	5043      	str	r3, [r0, r1]
}
    20d8:	f85d 4b04 	ldr.w	r4, [sp], #4
    20dc:	4770      	bx	lr
    20de:	bf00      	nop
    20e0:	4000800c 	.word	0x4000800c

000020e4 <am_hal_ctimer_start>:

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    20e4:	0100      	lsls	r0, r0, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    20e6:	4a07      	ldr	r2, [pc, #28]	; (2104 <am_hal_ctimer_start+0x20>)

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    20e8:	5883      	ldr	r3, [r0, r2]
{
    20ea:	b410      	push	{r4}

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    20ec:	f001 2408 	and.w	r4, r1, #134219776	; 0x8000800
    20f0:	ea23 0304 	bic.w	r3, r3, r4
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    20f4:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    20f8:	4319      	orrs	r1, r3
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    20fa:	5081      	str	r1, [r0, r2]
}
    20fc:	f85d 4b04 	ldr.w	r4, [sp], #4
    2100:	4770      	bx	lr
    2102:	bf00      	nop
    2104:	4000800c 	.word	0x4000800c

00002108 <am_hal_ctimer_clear>:

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    2108:	0100      	lsls	r0, r0, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    210a:	4b03      	ldr	r3, [pc, #12]	; (2118 <am_hal_ctimer_clear+0x10>)

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    210c:	58c2      	ldr	r2, [r0, r3]
    210e:	f001 2108 	and.w	r1, r1, #134219776	; 0x8000800
    2112:	4311      	orrs	r1, r2
    2114:	50c1      	str	r1, [r0, r3]
    2116:	4770      	bx	lr
    2118:	4000800c 	.word	0x4000800c

0000211c <am_hal_ctimer_pin_enable>:

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    211c:	0100      	lsls	r0, r0, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    211e:	4b03      	ldr	r3, [pc, #12]	; (212c <am_hal_ctimer_pin_enable+0x10>)

    //
    // Set the pin enable bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    2120:	58c2      	ldr	r2, [r0, r3]
    2122:	f001 2104 	and.w	r1, r1, #67109888	; 0x4000400
    2126:	4311      	orrs	r1, r2
    2128:	50c1      	str	r1, [r0, r3]
    212a:	4770      	bx	lr
    212c:	4000800c 	.word	0x4000800c

00002130 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    2130:	b5f0      	push	{r4, r5, r6, r7, lr}
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    2132:	0100      	lsls	r0, r0, #4
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    2134:	4c19      	ldr	r4, [pc, #100]	; (219c <am_hal_ctimer_period_set+0x6c>)
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    2136:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    ui32Mode = *pui32ControlReg;
    213a:	5905      	ldr	r5, [r0, r4]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    213c:	d018      	beq.n	2170 <am_hal_ctimer_period_set+0x40>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    213e:	f405 76c0 	and.w	r6, r5, #384	; 0x180
    2142:	2e80      	cmp	r6, #128	; 0x80
    2144:	d019      	beq.n	217a <am_hal_ctimer_period_set+0x4a>
    2146:	2500      	movs	r5, #0
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    2148:	462c      	mov	r4, r5
    pui32CompareRegA = (uint32_t *)(AM_REG_CTIMERn(0) +
                                    AM_REG_CTIMER_CMPRA0_O +
                                    (ui32TimerNumber * TIMER_OFFSET));

    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
                                    AM_REG_CTIMER_CMPRB0_O +
    214a:	4e15      	ldr	r6, [pc, #84]	; (21a0 <am_hal_ctimer_period_set+0x70>)
                                    AM_REG_CTIMER_CMPRA0_O +
    214c:	4f15      	ldr	r7, [pc, #84]	; (21a4 <am_hal_ctimer_period_set+0x74>)

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    214e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2152:	4299      	cmp	r1, r3
                                    AM_REG_CTIMER_CMPRB0_O +
    2154:	eb00 0e06 	add.w	lr, r0, r6
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    2158:	d01c      	beq.n	2194 <am_hal_ctimer_period_set+0x64>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    215a:	4b13      	ldr	r3, [pc, #76]	; (21a8 <am_hal_ctimer_period_set+0x78>)
    215c:	4299      	cmp	r1, r3
    215e:	d014      	beq.n	218a <am_hal_ctimer_period_set+0x5a>
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    2160:	b291      	uxth	r1, r2
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1 >> 16));
    2162:	401c      	ands	r4, r3
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    2164:	ea44 4212 	orr.w	r2, r4, r2, lsr #16
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    2168:	430d      	orrs	r5, r1
    216a:	51c5      	str	r5, [r0, r7]
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    216c:	5182      	str	r2, [r0, r6]
    }
}
    216e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32Mode = ui32Mode >> 16;
    2170:	0c2f      	lsrs	r7, r5, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    2172:	f407 75c0 	and.w	r5, r7, #384	; 0x180
    2176:	2d80      	cmp	r5, #128	; 0x80
    2178:	d103      	bne.n	2182 <am_hal_ctimer_period_set+0x52>
    217a:	0415      	lsls	r5, r2, #16
        ui32Comp1 = ui32Period;
    217c:	4614      	mov	r4, r2
        ui32Comp0 = ui32Period - ui32OnTime;
    217e:	1ad2      	subs	r2, r2, r3
        ui32Comp1 = ui32Period;
    2180:	e7e3      	b.n	214a <am_hal_ctimer_period_set+0x1a>
                                    AM_REG_CTIMER_CMPRB0_O +
    2182:	f8df e01c 	ldr.w	lr, [pc, #28]	; 21a0 <am_hal_ctimer_period_set+0x70>
    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
    2186:	2500      	movs	r5, #0
                                    AM_REG_CTIMER_CMPRB0_O +
    2188:	4486      	add	lr, r0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    218a:	b290      	uxth	r0, r2
    218c:	4305      	orrs	r5, r0
    218e:	f8ce 5000 	str.w	r5, [lr]
    2192:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    2194:	b294      	uxth	r4, r2
    2196:	4325      	orrs	r5, r4
    2198:	51c5      	str	r5, [r0, r7]
    219a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    219c:	4000800c 	.word	0x4000800c
    21a0:	40008008 	.word	0x40008008
    21a4:	40008004 	.word	0x40008004
    21a8:	ffff0000 	.word	0xffff0000

000021ac <am_hal_ctimer_adc_trigger_enable>:
am_hal_ctimer_adc_trigger_enable(void)
{
    //
    // Enable the ADC trigger.
    //
    AM_REGn(CTIMER, 0, CTRL3) |= AM_REG_CTIMER_CTRL3_ADCEN_M;
    21ac:	4a02      	ldr	r2, [pc, #8]	; (21b8 <am_hal_ctimer_adc_trigger_enable+0xc>)
    21ae:	6813      	ldr	r3, [r2, #0]
    21b0:	f443 4000 	orr.w	r0, r3, #32768	; 0x8000
    21b4:	6010      	str	r0, [r2, #0]
    21b6:	4770      	bx	lr
    21b8:	4000803c 	.word	0x4000803c

000021bc <am_hal_flash_delay>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_flash_delay(uint32_t ui32Iterations)
{
    __asm("    subs    r0, #1\n"
    21bc:	3801      	subs	r0, #1
    21be:	f47f affd 	bne.w	21bc <am_hal_flash_delay>
    21c2:	4770      	bx	lr

000021c4 <am_hal_flash_load_ui32>:
    // Call the simple routine that has been set up in SRAM as an array.
    // First set up a function pointer to the array, being sure to set the
    //  .T bit (Thumb bit, bit0) in the branch address, then use that
    //  function ptr to call the SRAM function.
    //
    uint32_t SRAMCode = (uint32_t)SRAM_load_ui32 | 0x1;
    21c4:	4b01      	ldr	r3, [pc, #4]	; (21cc <am_hal_flash_load_ui32+0x8>)
    21c6:	f043 0101 	orr.w	r1, r3, #1
    uint32_t (*pFunc)(uint32_t) = (uint32_t (*)(uint32_t))SRAMCode;
    return (*pFunc)(ui32Address);
    21ca:	4708      	bx	r1
    21cc:	10004054 	.word	0x10004054

000021d0 <am_hal_gpio_out_enable_bit_get>:
am_hal_gpio_out_enable_bit_get(uint32_t ui32BitNum)
{
    //
    // Handle upper or lower GPIO word  and return 0 or 1.
    //
    if ( ui32BitNum > 31 )
    21d0:	281f      	cmp	r0, #31
    {
        return !!(AM_REGn(GPIO, 0, ENB) & (1 << (ui32BitNum - 32)));
    21d2:	bf8a      	itet	hi
    21d4:	4a05      	ldrhi	r2, [pc, #20]	; (21ec <am_hal_gpio_out_enable_bit_get+0x1c>)
    }
    else
    {
        return !!(AM_REGn(GPIO, 0, ENA) & (1 << ui32BitNum));
    21d6:	4a06      	ldrls	r2, [pc, #24]	; (21f0 <am_hal_gpio_out_enable_bit_get+0x20>)
        return !!(AM_REGn(GPIO, 0, ENB) & (1 << (ui32BitNum - 32)));
    21d8:	3820      	subhi	r0, #32
        return !!(AM_REGn(GPIO, 0, ENA) & (1 << ui32BitNum));
    21da:	2301      	movs	r3, #1
    21dc:	6812      	ldr	r2, [r2, #0]
    21de:	fa03 f000 	lsl.w	r0, r3, r0
    21e2:	4210      	tst	r0, r2
    21e4:	bf14      	ite	ne
    21e6:	4618      	movne	r0, r3
    21e8:	2000      	moveq	r0, #0
    }
}
    21ea:	4770      	bx	lr
    21ec:	400100a4 	.word	0x400100a4
    21f0:	400100a0 	.word	0x400100a0

000021f4 <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    21f4:	280f      	cmp	r0, #15
    21f6:	d80b      	bhi.n	2210 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    21f8:	2805      	cmp	r0, #5
    21fa:	d013      	beq.n	2224 <am_hal_interrupt_enable+0x30>
    21fc:	2806      	cmp	r0, #6
    21fe:	d017      	beq.n	2230 <am_hal_interrupt_enable+0x3c>
    2200:	2804      	cmp	r0, #4
    2202:	d104      	bne.n	220e <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    2204:	4a0d      	ldr	r2, [pc, #52]	; (223c <am_hal_interrupt_enable+0x48>)
    2206:	6813      	ldr	r3, [r2, #0]
    2208:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    220c:	6010      	str	r0, [r2, #0]
    220e:	4770      	bx	lr
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    2210:	f1a0 0310 	sub.w	r3, r0, #16
    2214:	f003 0c1f 	and.w	ip, r3, #31
    2218:	2001      	movs	r0, #1
    221a:	4909      	ldr	r1, [pc, #36]	; (2240 <am_hal_interrupt_enable+0x4c>)
    221c:	fa00 f20c 	lsl.w	r2, r0, ip
    2220:	600a      	str	r2, [r1, #0]
    2222:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    2224:	4805      	ldr	r0, [pc, #20]	; (223c <am_hal_interrupt_enable+0x48>)
    2226:	6801      	ldr	r1, [r0, #0]
    2228:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    222c:	6002      	str	r2, [r0, #0]
            break;
    222e:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    2230:	4902      	ldr	r1, [pc, #8]	; (223c <am_hal_interrupt_enable+0x48>)
    2232:	680a      	ldr	r2, [r1, #0]
    2234:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    2238:	600b      	str	r3, [r1, #0]
            break;
    223a:	4770      	bx	lr
    223c:	e000ed24 	.word	0xe000ed24
    2240:	e000e100 	.word	0xe000e100

00002244 <am_hal_interrupt_master_enable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    2244:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    2248:	b662      	cpsie	i
    __asm("    bx lr");
    224a:	4770      	bx	lr

0000224c <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    224c:	4b0d      	ldr	r3, [pc, #52]	; (2284 <am_hal_itm_enable+0x38>)
    224e:	6818      	ldr	r0, [r3, #0]
    2250:	07c2      	lsls	r2, r0, #31
    2252:	d416      	bmi.n	2282 <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    2254:	4a0c      	ldr	r2, [pc, #48]	; (2288 <am_hal_itm_enable+0x3c>)
    2256:	6811      	ldr	r1, [r2, #0]
{
    2258:	b430      	push	{r4, r5}
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    225a:	f041 7480 	orr.w	r4, r1, #16777216	; 0x1000000
    225e:	6014      	str	r4, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    2260:	6815      	ldr	r5, [r2, #0]
    2262:	01eb      	lsls	r3, r5, #7
    2264:	d5fc      	bpl.n	2260 <am_hal_itm_enable+0x14>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    2266:	4809      	ldr	r0, [pc, #36]	; (228c <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    2268:	4c09      	ldr	r4, [pc, #36]	; (2290 <am_hal_itm_enable+0x44>)
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    226a:	4d0a      	ldr	r5, [pc, #40]	; (2294 <am_hal_itm_enable+0x48>)
    226c:	6005      	str	r5, [r0, #0]
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    226e:	250f      	movs	r5, #15
    2270:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    2272:	bc30      	pop	{r4, r5}
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    2274:	4908      	ldr	r1, [pc, #32]	; (2298 <am_hal_itm_enable+0x4c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    2276:	4b09      	ldr	r3, [pc, #36]	; (229c <am_hal_itm_enable+0x50>)
    2278:	4a09      	ldr	r2, [pc, #36]	; (22a0 <am_hal_itm_enable+0x54>)
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    227a:	f04f 30ff 	mov.w	r0, #4294967295
    227e:	6008      	str	r0, [r1, #0]
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    2280:	601a      	str	r2, [r3, #0]
}
    2282:	4770      	bx	lr
    2284:	10004170 	.word	0x10004170
    2288:	e000edfc 	.word	0xe000edfc
    228c:	e0000fb0 	.word	0xe0000fb0
    2290:	e0000e40 	.word	0xe0000e40
    2294:	c5acce55 	.word	0xc5acce55
    2298:	e0000e00 	.word	0xe0000e00
    229c:	e0000e80 	.word	0xe0000e80
    22a0:	00150511 	.word	0x00150511

000022a4 <am_hal_itm_print>:
    uint32_t ui32Idx;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    22a4:	7803      	ldrb	r3, [r0, #0]
    22a6:	b1b3      	cbz	r3, 22d6 <am_hal_itm_print+0x32>
{
    22a8:	b410      	push	{r4}
    22aa:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    22ac:	2400      	movs	r4, #0
    22ae:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    22b2:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    22b4:	2900      	cmp	r1, #0
    22b6:	d1fa      	bne.n	22ae <am_hal_itm_print+0xa>
    22b8:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    22ba:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
        else
        {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    22be:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    22c2:	f8dc 3000 	ldr.w	r3, [ip]
    22c6:	2b00      	cmp	r3, #0
    22c8:	d0fb      	beq.n	22c2 <am_hal_itm_print+0x1e>
    while (ui32Length)
    22ca:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    22cc:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    22d0:	d1f5      	bne.n	22be <am_hal_itm_print+0x1a>
            // Subtract from length.
            //
            ui32Length--;
        }
    }
}
    22d2:	f85d 4b04 	ldr.w	r4, [sp], #4
    22d6:	4770      	bx	lr

000022d8 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    22d8:	490d      	ldr	r1, [pc, #52]	; (2310 <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    22da:	4b0e      	ldr	r3, [pc, #56]	; (2314 <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    22dc:	4a0e      	ldr	r2, [pc, #56]	; (2318 <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    22de:	681b      	ldr	r3, [r3, #0]
{
    22e0:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    22e2:	680d      	ldr	r5, [r1, #0]
    22e4:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    22e6:	6815      	ldr	r5, [r2, #0]
    22e8:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    22ea:	4c0c      	ldr	r4, [pc, #48]	; (231c <am_hal_mcuctrl_fault_status+0x44>)
    22ec:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    22ee:	4329      	orrs	r1, r5
    22f0:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    22f2:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    22f4:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    22f8:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    22fa:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    22fc:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    2300:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    2304:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    2306:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    2308:	6142      	str	r2, [r0, #20]
}
    230a:	bc70      	pop	{r4, r5, r6}
    230c:	4770      	bx	lr
    230e:	bf00      	nop
    2310:	400201c4 	.word	0x400201c4
    2314:	400201cc 	.word	0x400201cc
    2318:	400201c0 	.word	0x400201c0
    231c:	400201c8 	.word	0x400201c8

00002320 <am_hal_mcuctrl_bandgap_enable>:
am_hal_mcuctrl_bandgap_enable(void)
{
    //
    // Enable the Bandgap in the MCUCTRL.
    //
    AM_REG(MCUCTRL, BANDGAPEN) = AM_REG_MCUCTRL_BANDGAPEN_BGPEN_M;
    2320:	4b01      	ldr	r3, [pc, #4]	; (2328 <am_hal_mcuctrl_bandgap_enable+0x8>)
    2322:	2201      	movs	r2, #1
    2324:	601a      	str	r2, [r3, #0]
    2326:	4770      	bx	lr
    2328:	400200fc 	.word	0x400200fc

0000232c <am_hal_mcuctrl_bandgap_disable>:
am_hal_mcuctrl_bandgap_disable(void)
{
    //
    // Disable the Bandgap in the MCUCTRL.
    //
    AM_REG(MCUCTRL, BANDGAPEN) = ~AM_REG_MCUCTRL_BANDGAPEN_BGPEN_M;
    232c:	4b02      	ldr	r3, [pc, #8]	; (2338 <am_hal_mcuctrl_bandgap_disable+0xc>)
    232e:	f06f 0201 	mvn.w	r2, #1
    2332:	601a      	str	r2, [r3, #0]
    2334:	4770      	bx	lr
    2336:	bf00      	nop
    2338:	400200fc 	.word	0x400200fc

0000233c <am_hal_mcuctrl_bucks_enable>:
am_hal_mcuctrl_bucks_enable(void)
{
    //
    // Enable the core buck converter in the MCUCTRL.
    //
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    233c:	4b08      	ldr	r3, [pc, #32]	; (2360 <am_hal_mcuctrl_bucks_enable+0x24>)
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Poll until core buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    233e:	4a09      	ldr	r2, [pc, #36]	; (2364 <am_hal_mcuctrl_bucks_enable+0x28>)
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    2340:	6819      	ldr	r1, [r3, #0]
    2342:	f041 0002 	orr.w	r0, r1, #2
    2346:	6018      	str	r0, [r3, #0]
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    2348:	6819      	ldr	r1, [r3, #0]
    234a:	f041 0001 	orr.w	r0, r1, #1
    234e:	6018      	str	r0, [r3, #0]
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    2350:	6813      	ldr	r3, [r2, #0]
    2352:	0799      	lsls	r1, r3, #30
    2354:	d5fc      	bpl.n	2350 <am_hal_mcuctrl_bucks_enable+0x14>

    //
    // Poll until SRAM buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, MEMBUCKON) );
    2356:	4a03      	ldr	r2, [pc, #12]	; (2364 <am_hal_mcuctrl_bucks_enable+0x28>)
    2358:	6811      	ldr	r1, [r2, #0]
    235a:	07cb      	lsls	r3, r1, #31
    235c:	d5fc      	bpl.n	2358 <am_hal_mcuctrl_bucks_enable+0x1c>
}
    235e:	4770      	bx	lr
    2360:	40020010 	.word	0x40020010
    2364:	40020014 	.word	0x40020014

00002368 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    2368:	4a05      	ldr	r2, [pc, #20]	; (2380 <am_hal_rtc_osc_select+0x18>)
    236a:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    236c:	b918      	cbnz	r0, 2376 <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    236e:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    2372:	6010      	str	r0, [r2, #0]
    2374:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    2376:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    237a:	6011      	str	r1, [r2, #0]
    237c:	4770      	bx	lr
    237e:	bf00      	nop
    2380:	4000400c 	.word	0x4000400c

00002384 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_BFW(RTC, RTCCTL, RSTOP, 1);
    2384:	4a02      	ldr	r2, [pc, #8]	; (2390 <am_hal_rtc_osc_disable+0xc>)
    2386:	6813      	ldr	r3, [r2, #0]
    2388:	f043 0010 	orr.w	r0, r3, #16
    238c:	6010      	str	r0, [r2, #0]
    238e:	4770      	bx	lr
    2390:	40004050 	.word	0x40004050

00002394 <am_hal_sysctrl_sleep>:
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    2394:	4a08      	ldr	r2, [pc, #32]	; (23b8 <am_hal_sysctrl_sleep+0x24>)
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    2396:	b118      	cbz	r0, 23a0 <am_hal_sysctrl_sleep+0xc>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    2398:	4b08      	ldr	r3, [pc, #32]	; (23bc <am_hal_sysctrl_sleep+0x28>)
    239a:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    239c:	07c3      	lsls	r3, r0, #31
    239e:	d505      	bpl.n	23ac <am_hal_sysctrl_sleep+0x18>
    }
    else
    {
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    23a0:	6811      	ldr	r1, [r2, #0]
    23a2:	f021 0304 	bic.w	r3, r1, #4
    23a6:	6013      	str	r3, [r2, #0]
    }

    //
    // Go to sleep.
    //
    AM_ASM_WFI;
    23a8:	bf30      	wfi
    23aa:	4770      	bx	lr
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    23ac:	6810      	ldr	r0, [r2, #0]
    23ae:	f040 0104 	orr.w	r1, r0, #4
    23b2:	6011      	str	r1, [r2, #0]
    AM_ASM_WFI;
    23b4:	bf30      	wfi
    23b6:	4770      	bx	lr
    23b8:	e000ed10 	.word	0xe000ed10
    23bc:	40020250 	.word	0x40020250

000023c0 <am_hal_sysctrl_fpu_enable>:
{
    //
    // Enable access to the FPU in both privileged and user modes.
    // NOTE: Write 0s to all reserved fields in this register.
    //
    AM_REG(SYSCTRL, CPACR) = (AM_REG_SYSCTRL_CPACR_CP11(0x3) |
    23c0:	4b02      	ldr	r3, [pc, #8]	; (23cc <am_hal_sysctrl_fpu_enable+0xc>)
    23c2:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
    23c6:	601a      	str	r2, [r3, #0]
    23c8:	4770      	bx	lr
    23ca:	bf00      	nop
    23cc:	e000ed88 	.word	0xe000ed88

000023d0 <am_hal_sysctrl_fpu_stacking_enable>:
    {
        //
        // Enable automatic saving of FPU registers on exception entry, using lazy
        // context saving.
        //
        AM_REG(SYSCTRL, FPCCR) |= (AM_REG_SYSCTRL_FPCCR_ASPEN(0x1) |
    23d0:	4a05      	ldr	r2, [pc, #20]	; (23e8 <am_hal_sysctrl_fpu_stacking_enable+0x18>)
    23d2:	6813      	ldr	r3, [r2, #0]
    if (bLazy)
    23d4:	b918      	cbnz	r0, 23de <am_hal_sysctrl_fpu_stacking_enable+0xe>
    else
    {
        //
        // Enable automatic saving of FPU registers on exception entry.
        //
        AM_REG(SYSCTRL, FPCCR) |= AM_REG_SYSCTRL_FPCCR_ASPEN(0x1);
    23d6:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
    23da:	6010      	str	r0, [r2, #0]
    23dc:	4770      	bx	lr
        AM_REG(SYSCTRL, FPCCR) |= (AM_REG_SYSCTRL_FPCCR_ASPEN(0x1) |
    23de:	f043 4140 	orr.w	r1, r3, #3221225472	; 0xc0000000
    23e2:	6011      	str	r1, [r2, #0]
    23e4:	4770      	bx	lr
    23e6:	bf00      	nop
    23e8:	e000ef34 	.word	0xe000ef34

000023ec <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    23ec:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    23ee:	4a24      	ldr	r2, [pc, #144]	; (2480 <am_hal_tpiu_enable+0x94>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    23f0:	6803      	ldr	r3, [r0, #0]
    AM_REG(TPIU, FFCR) = 0;
    23f2:	2100      	movs	r1, #0
    23f4:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    23f6:	b313      	cbz	r3, 243e <am_hal_tpiu_enable+0x52>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    23f8:	f5a2 7c40 	sub.w	ip, r2, #768	; 0x300
    23fc:	2101      	movs	r1, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    23fe:	4c21      	ldr	r4, [pc, #132]	; (2484 <am_hal_tpiu_enable+0x98>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    2400:	4d21      	ldr	r5, [pc, #132]	; (2488 <am_hal_tpiu_enable+0x9c>)
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    2402:	f8cc 1000 	str.w	r1, [ip]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    2406:	f5a3 4e61 	sub.w	lr, r3, #57600	; 0xe100
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    240a:	45a6      	cmp	lr, r4
    240c:	bf94      	ite	ls
    240e:	461c      	movls	r4, r3
    2410:	462c      	movhi	r4, r5
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    2412:	f7ff fe31 	bl	2078 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    2416:	1c43      	adds	r3, r0, #1
    2418:	d02f      	beq.n	247a <am_hal_tpiu_enable+0x8e>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    241a:	08c2      	lsrs	r2, r0, #3
    241c:	fbb2 f3f4 	udiv	r3, r2, r4
    2420:	1e5d      	subs	r5, r3, #1
    2422:	b2a8      	uxth	r0, r5
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    2424:	4a19      	ldr	r2, [pc, #100]	; (248c <am_hal_tpiu_enable+0xa0>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    2426:	4c1a      	ldr	r4, [pc, #104]	; (2490 <am_hal_tpiu_enable+0xa4>)

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    2428:	491a      	ldr	r1, [pc, #104]	; (2494 <am_hal_tpiu_enable+0xa8>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    242a:	4b1b      	ldr	r3, [pc, #108]	; (2498 <am_hal_tpiu_enable+0xac>)
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    242c:	6010      	str	r0, [r2, #0]
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    242e:	2502      	movs	r5, #2
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    2430:	2000      	movs	r0, #0
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    2432:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    2436:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    2438:	6008      	str	r0, [r1, #0]
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    243a:	601a      	str	r2, [r3, #0]
    243c:	e010      	b.n	2460 <am_hal_tpiu_enable+0x74>
        //

        //
        // Set the Asynchronous Clock Prescaler Register.
        //
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    243e:	4c13      	ldr	r4, [pc, #76]	; (248c <am_hal_tpiu_enable+0xa0>)
    2440:	6905      	ldr	r5, [r0, #16]
    2442:	6025      	str	r5, [r4, #0]

        //
        // Set the Selected Pin Protocol Register.
        //  e.g. AM_REG_TPIU_SPPR_TXMODE_UART
        //
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    2444:	6882      	ldr	r2, [r0, #8]
    2446:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    244a:	68c3      	ldr	r3, [r0, #12]
    244c:	4c13      	ldr	r4, [pc, #76]	; (249c <am_hal_tpiu_enable+0xb0>)

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    244e:	4912      	ldr	r1, [pc, #72]	; (2498 <am_hal_tpiu_enable+0xac>)
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    2450:	1e5d      	subs	r5, r3, #1
    2452:	2201      	movs	r2, #1
    2454:	40aa      	lsls	r2, r5
    2456:	6022      	str	r2, [r4, #0]
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    2458:	6840      	ldr	r0, [r0, #4]
    245a:	680b      	ldr	r3, [r1, #0]
    245c:	4303      	orrs	r3, r0
    245e:	600b      	str	r3, [r1, #0]
    }

    // wait for 50us for the data to flush out
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    2460:	f7ff fe0a 	bl	2078 <am_hal_clkgen_sysclk_get>
    2464:	4c0e      	ldr	r4, [pc, #56]	; (24a0 <am_hal_tpiu_enable+0xb4>)
    2466:	fba4 3100 	umull	r3, r1, r4, r0
    246a:	0c88      	lsrs	r0, r1, #18
    246c:	2332      	movs	r3, #50	; 0x32
    246e:	fb03 f000 	mul.w	r0, r3, r0
}
    2472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    2476:	f7ff bea1 	b.w	21bc <am_hal_flash_delay>
    247a:	2002      	movs	r0, #2
    247c:	e7d2      	b.n	2424 <am_hal_tpiu_enable+0x38>
    247e:	bf00      	nop
    2480:	e0040304 	.word	0xe0040304
    2484:	001da380 	.word	0x001da380
    2488:	000f4240 	.word	0x000f4240
    248c:	e0040010 	.word	0xe0040010
    2490:	e00400f0 	.word	0xe00400f0
    2494:	e0040f00 	.word	0xe0040f00
    2498:	40020250 	.word	0x40020250
    249c:	e0040004 	.word	0xe0040004
    24a0:	165e9f81 	.word	0x165e9f81

000024a4 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    24a4:	4b01      	ldr	r3, [pc, #4]	; (24ac <am_hal_vcomp_disable+0x8>)
    24a6:	2237      	movs	r2, #55	; 0x37
    24a8:	601a      	str	r2, [r3, #0]
    24aa:	4770      	bx	lr
    24ac:	4000c008 	.word	0x4000c008
    24b0:	20434441 	.word	0x20434441
    24b4:	54414256 	.word	0x54414256
    24b8:	6e612054 	.word	0x6e612054
    24bc:	65542064 	.word	0x65542064
    24c0:	7265706d 	.word	0x7265706d
    24c4:	72757461 	.word	0x72757461
    24c8:	65532065 	.word	0x65532065
    24cc:	6e69736e 	.word	0x6e69736e
    24d0:	78452067 	.word	0x78452067
    24d4:	6c706d61 	.word	0x6c706d61
    24d8:	000a2e65 	.word	0x000a2e65
    24dc:	0000000a 	.word	0x0000000a
    24e0:	4d495443 	.word	0x4d495443
    24e4:	3d335245 	.word	0x3d335245
    24e8:	30257830 	.word	0x30257830
    24ec:	40205838 	.word	0x40205838
    24f0:	25783020 	.word	0x25783020
    24f4:	0a583830 	.word	0x0a583830
    24f8:	00000000 	.word	0x00000000
    24fc:	20434441 	.word	0x20434441
    2500:	49474552 	.word	0x49474552
    2504:	52455453 	.word	0x52455453
    2508:	20402053 	.word	0x20402053
    250c:	30257830 	.word	0x30257830
    2510:	000a5838 	.word	0x000a5838
    2514:	20434441 	.word	0x20434441
    2518:	20474643 	.word	0x20474643
    251c:	203d2020 	.word	0x203d2020
    2520:	30257830 	.word	0x30257830
    2524:	000a5838 	.word	0x000a5838
    2528:	20434441 	.word	0x20434441
    252c:	544f4c53 	.word	0x544f4c53
    2530:	203d2030 	.word	0x203d2030
    2534:	30257830 	.word	0x30257830
    2538:	000a5838 	.word	0x000a5838
    253c:	20434441 	.word	0x20434441
    2540:	544f4c53 	.word	0x544f4c53
    2544:	203d2031 	.word	0x203d2031
    2548:	30257830 	.word	0x30257830
    254c:	000a5838 	.word	0x000a5838
    2550:	20434441 	.word	0x20434441
    2554:	544f4c53 	.word	0x544f4c53
    2558:	203d2032 	.word	0x203d2032
    255c:	30257830 	.word	0x30257830
    2560:	000a5838 	.word	0x000a5838
    2564:	20434441 	.word	0x20434441
    2568:	544f4c53 	.word	0x544f4c53
    256c:	203d2033 	.word	0x203d2033
    2570:	30257830 	.word	0x30257830
    2574:	000a5838 	.word	0x000a5838
    2578:	20434441 	.word	0x20434441
    257c:	544f4c53 	.word	0x544f4c53
    2580:	203d2034 	.word	0x203d2034
    2584:	30257830 	.word	0x30257830
    2588:	000a5838 	.word	0x000a5838
    258c:	20434441 	.word	0x20434441
    2590:	544f4c53 	.word	0x544f4c53
    2594:	203d2035 	.word	0x203d2035
    2598:	30257830 	.word	0x30257830
    259c:	000a5838 	.word	0x000a5838
    25a0:	20434441 	.word	0x20434441
    25a4:	544f4c53 	.word	0x544f4c53
    25a8:	203d2036 	.word	0x203d2036
    25ac:	30257830 	.word	0x30257830
    25b0:	000a5838 	.word	0x000a5838
    25b4:	20434441 	.word	0x20434441
    25b8:	544f4c53 	.word	0x544f4c53
    25bc:	203d2037 	.word	0x203d2037
    25c0:	30257830 	.word	0x30257830
    25c4:	000a5838 	.word	0x000a5838
    25c8:	20434441 	.word	0x20434441
    25cc:	4d494c57 	.word	0x4d494c57
    25d0:	203d2020 	.word	0x203d2020
    25d4:	30257830 	.word	0x30257830
    25d8:	000a5838 	.word	0x000a5838
    25dc:	4d495254 	.word	0x4d495254
    25e0:	2044454d 	.word	0x2044454d
    25e4:	504d4554 	.word	0x504d4554
    25e8:	20202020 	.word	0x20202020
    25ec:	2e25203d 	.word	0x2e25203d
    25f0:	000a6633 	.word	0x000a6633
    25f4:	4d495254 	.word	0x4d495254
    25f8:	2044454d 	.word	0x2044454d
    25fc:	544c4f56 	.word	0x544c4f56
    2600:	20454741 	.word	0x20454741
    2604:	2e25203d 	.word	0x2e25203d
    2608:	000a6633 	.word	0x000a6633
    260c:	4d495254 	.word	0x4d495254
    2610:	2044454d 	.word	0x2044454d
    2614:	7366664f 	.word	0x7366664f
    2618:	20207465 	.word	0x20207465
    261c:	2e25203d 	.word	0x2e25203d
    2620:	000a6633 	.word	0x000a6633
    2624:	696c6163 	.word	0x696c6163
    2628:	74617262 	.word	0x74617262
    262c:	00006465 	.word	0x00006465
    2630:	61636e75 	.word	0x61636e75
    2634:	7262696c 	.word	0x7262696c
    2638:	64657461 	.word	0x64657461
    263c:	66656420 	.word	0x66656420
    2640:	746c7561 	.word	0x746c7561
    2644:	00000000 	.word	0x00000000
    2648:	65746f4e 	.word	0x65746f4e
    264c:	74202d20 	.word	0x74202d20
    2650:	65736568 	.word	0x65736568
    2654:	69727420 	.word	0x69727420
    2658:	6176206d 	.word	0x6176206d
    265c:	7365756c 	.word	0x7365756c
    2660:	65726120 	.word	0x65726120
    2664:	73252720 	.word	0x73252720
    2668:	61762027 	.word	0x61762027
    266c:	7365756c 	.word	0x7365756c
    2670:	00000a2e 	.word	0x00000a2e
    2674:	54414256 	.word	0x54414256
    2678:	203d2054 	.word	0x203d2054
    267c:	332e253c 	.word	0x332e253c
    2680:	28203e66 	.word	0x28203e66
    2684:	30257830 	.word	0x30257830
    2688:	20295834 	.word	0x20295834
    268c:	00000000 	.word	0x00000000
    2690:	504d4554 	.word	0x504d4554
    2694:	25203d20 	.word	0x25203d20
    2698:	2066322e 	.word	0x2066322e
    269c:	30282043 	.word	0x30282043
    26a0:	34302578 	.word	0x34302578
    26a4:	00202958 	.word	0x00202958
    26a8:	322e2520 	.word	0x322e2520
    26ac:	00462066 	.word	0x00462066
    26b0:	54544142 	.word	0x54544142
    26b4:	20595245 	.word	0x20595245
    26b8:	44414f4c 	.word	0x44414f4c
    26bc:	53455220 	.word	0x53455220
    26c0:	4f545349 	.word	0x4f545349
    26c4:	4e4f2052 	.word	0x4e4f2052
    26c8:	0000000a 	.word	0x0000000a
    26cc:	0a0a0a0a 	.word	0x0a0a0a0a
    26d0:	0a0a0a0a 	.word	0x0a0a0a0a
    26d4:	0a0a0a0a 	.word	0x0a0a0a0a
    26d8:	0a0a0a0a 	.word	0x0a0a0a0a
    26dc:	00000a0a 	.word	0x00000a0a

000026e0 <CSWTCH.4>:
    26e0:	016e3600 00b71b00 007a1200 005b8d80     .6n.......z...[.
    26f0:	00493e00 003d0900 003450db 002dc6c0     .>I...=..P4...-.
