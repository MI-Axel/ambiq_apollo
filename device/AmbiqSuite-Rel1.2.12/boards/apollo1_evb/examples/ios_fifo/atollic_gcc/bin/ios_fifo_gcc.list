
ios_fifo_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025d4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000048  10001000  000025d4  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000750  10001048  0000261c  00021048  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021048  2**0
                  CONTENTS, READONLY
  5 .debug_info   00006443  00000000  00000000  0002107f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001f15  00000000  00000000  000274c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000007b8  00000000  00000000  000293d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000ba0  00000000  00000000  00029b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003acc  00000000  00000000  0002a72f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000266c  00000000  00000000  0002e1fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  00030867  2**0
                  CONTENTS, READONLY
 12 .debug_frame  0000136c  00000000  00000000  000308e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000025f1  00000000  00000000  00031c50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 ed 06 00 00 55 07 00 00 5b 07 00 00     ........U...[...
      10:	5b 07 00 00 5b 07 00 00 5b 07 00 00 00 00 00 00     [...[...[.......
	...
      2c:	61 07 00 00 61 07 00 00 00 00 00 00 61 07 00 00     a...a.......a...
      3c:	61 07 00 00 61 07 00 00 61 07 00 00 61 07 00 00     a...a...a...a...
      4c:	61 07 00 00 7d 04 00 00 09 04 00 00 61 07 00 00     a...}.......a...
      5c:	61 07 00 00 61 07 00 00 61 07 00 00 21 01 00 00     a...a...a...!...
      6c:	61 07 00 00 61 07 00 00 61 07 00 00 61 07 00 00     a...a...a...a...
      7c:	61 07 00 00                                         a...

00000080 <__aeabi_d2f>:
      80:	ea4f 0241 	mov.w	r2, r1, lsl #1
      84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      88:	bf24      	itt	cs
      8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      92:	d90d      	bls.n	b0 <__aeabi_d2f+0x30>
      94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      a8:	bf08      	it	eq
      aa:	f020 0001 	biceq.w	r0, r0, #1
      ae:	4770      	bx	lr
      b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      b4:	d121      	bne.n	fa <__aeabi_d2f+0x7a>
      b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      ba:	bfbc      	itt	lt
      bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
      c0:	4770      	bxlt	lr
      c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
      c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
      ca:	f1c2 0218 	rsb	r2, r2, #24
      ce:	f1c2 0c20 	rsb	ip, r2, #32
      d2:	fa10 f30c 	lsls.w	r3, r0, ip
      d6:	fa20 f002 	lsr.w	r0, r0, r2
      da:	bf18      	it	ne
      dc:	f040 0001 	orrne.w	r0, r0, #1
      e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
      e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
      e8:	fa03 fc0c 	lsl.w	ip, r3, ip
      ec:	ea40 000c 	orr.w	r0, r0, ip
      f0:	fa23 f302 	lsr.w	r3, r3, r2
      f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
      f8:	e7cc      	b.n	94 <__aeabi_d2f+0x14>
      fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
      fe:	d107      	bne.n	110 <__aeabi_d2f+0x90>
     100:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     104:	bf1e      	ittt	ne
     106:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     10a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     10e:	4770      	bxne	lr
     110:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     114:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     118:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     11c:	4770      	bx	lr
     11e:	bf00      	nop

00000120 <am_ctimer_isr>:
};

// Timer Interrupt Service Routine (ISR)
void
am_ctimer_isr(void)
{
     120:	b580      	push	{r7, lr}
     122:	b082      	sub	sp, #8
     124:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    ui32Status = am_hal_ctimer_int_status_get(false);
     126:	2000      	movs	r0, #0
     128:	f001 fb20 	bl	176c <am_hal_ctimer_int_status_get>
     12c:	6078      	str	r0, [r7, #4]
    am_hal_ctimer_int_clear(ui32Status);
     12e:	6878      	ldr	r0, [r7, #4]
     130:	f001 fb16 	bl	1760 <am_hal_ctimer_int_clear>

    am_hal_ctimer_int_service(ui32Status);
     134:	6878      	ldr	r0, [r7, #4]
     136:	f001 fa29 	bl	158c <am_hal_ctimer_int_service>
}
     13a:	bf00      	nop
     13c:	3708      	adds	r7, #8
     13e:	46bd      	mov	sp, r7
     140:	bd80      	pop	{r7, pc}
	...

00000144 <timer0_handler>:

// Emulate Sensor0 New Data
void
timer0_handler(void)
{
     144:	b480      	push	{r7}
     146:	af00      	add	r7, sp, #0

    // Inform main loop of sensor 0 Data availability
    g_bSensor0Data = true;
     148:	4b03      	ldr	r3, [pc, #12]	; (158 <timer0_handler+0x14>)
     14a:	2201      	movs	r2, #1
     14c:	701a      	strb	r2, [r3, #0]
}
     14e:	bf00      	nop
     150:	46bd      	mov	sp, r7
     152:	f85d 7b04 	ldr.w	r7, [sp], #4
     156:	4770      	bx	lr
     158:	1000115d 	.word	0x1000115d

0000015c <timer1_handler>:

// Emulate Sensor1 New Data
void
timer1_handler(void)
{
     15c:	b480      	push	{r7}
     15e:	af00      	add	r7, sp, #0
    // Inform main loop of sensor 1 Data availability
    g_bSensor1Data = true;
     160:	4b03      	ldr	r3, [pc, #12]	; (170 <timer1_handler+0x14>)
     162:	2201      	movs	r2, #1
     164:	701a      	strb	r2, [r3, #0]
}
     166:	bf00      	nop
     168:	46bd      	mov	sp, r7
     16a:	f85d 7b04 	ldr.w	r7, [sp], #4
     16e:	4770      	bx	lr
     170:	1000175f 	.word	0x1000175f

00000174 <stop_sensors>:

void
stop_sensors(void)
{
     174:	b580      	push	{r7, lr}
     176:	af00      	add	r7, sp, #0
    //
    // Stop timer A0
    //
    am_hal_ctimer_stop(0, AM_HAL_CTIMER_TIMERA);
     178:	f64f 71ff 	movw	r1, #65535	; 0xffff
     17c:	2000      	movs	r0, #0
     17e:	f001 fa93 	bl	16a8 <am_hal_ctimer_stop>
    //
    // Stop timer A1
    //
    am_hal_ctimer_stop(1, AM_HAL_CTIMER_TIMERA);
     182:	f64f 71ff 	movw	r1, #65535	; 0xffff
     186:	2001      	movs	r0, #1
     188:	f001 fa8e 	bl	16a8 <am_hal_ctimer_stop>
}
     18c:	bf00      	nop
     18e:	bd80      	pop	{r7, pc}

00000190 <start_sensors>:

void
start_sensors(void)
{
     190:	b580      	push	{r7, lr}
     192:	af00      	add	r7, sp, #0
    stop_sensors(); // Just in case host died without sending STOP last time
     194:	f7ff ffee 	bl	174 <stop_sensors>
    // Initialize Data Buffer Index
    g_sendIdx = 0;
     198:	4b08      	ldr	r3, [pc, #32]	; (1bc <start_sensors+0x2c>)
     19a:	2200      	movs	r2, #0
     19c:	601a      	str	r2, [r3, #0]
    //
    // Start timer A0
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
     19e:	f64f 71ff 	movw	r1, #65535	; 0xffff
     1a2:	2000      	movs	r0, #0
     1a4:	f001 fa6e 	bl	1684 <am_hal_ctimer_start>
    //
    // Start timer A1
    //
    am_hal_ctimer_start(1, AM_HAL_CTIMER_TIMERA);
     1a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
     1ac:	2001      	movs	r0, #1
     1ae:	f001 fa69 	bl	1684 <am_hal_ctimer_start>
    g_iosState = AM_IOSTEST_SLAVE_STATE_NODATA;
     1b2:	4b03      	ldr	r3, [pc, #12]	; (1c0 <start_sensors+0x30>)
     1b4:	2200      	movs	r2, #0
     1b6:	701a      	strb	r2, [r3, #0]
}
     1b8:	bf00      	nop
     1ba:	bd80      	pop	{r7, pc}
     1bc:	10001048 	.word	0x10001048
     1c0:	1000115c 	.word	0x1000115c

000001c4 <init_sensors>:

void
init_sensors(void)
{
     1c4:	b580      	push	{r7, lr}
     1c6:	b082      	sub	sp, #8
     1c8:	af00      	add	r7, sp, #0
    uint32_t ui32Period;

    //
    // Set up timer A0 & A1.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
     1ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
     1ce:	2000      	movs	r0, #0
     1d0:	f001 fa76 	bl	16c0 <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer);
     1d4:	491f      	ldr	r1, [pc, #124]	; (254 <init_sensors+0x90>)
     1d6:	2000      	movs	r0, #0
     1d8:	f001 fa3e 	bl	1658 <am_hal_ctimer_config>
    am_hal_ctimer_clear(1, AM_HAL_CTIMER_TIMERA);
     1dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
     1e0:	2001      	movs	r0, #1
     1e2:	f001 fa6d 	bl	16c0 <am_hal_ctimer_clear>
    am_hal_ctimer_config(1, &g_sTimer);
     1e6:	491b      	ldr	r1, [pc, #108]	; (254 <init_sensors+0x90>)
     1e8:	2001      	movs	r0, #1
     1ea:	f001 fa35 	bl	1658 <am_hal_ctimer_config>

    //
    // Set up timerA0 for Sensor 0 Freq
    //
    ui32Period = 12000 / SENSOR0_FREQ ;
     1ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     1f2:	607b      	str	r3, [r7, #4]
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ui32Period,
     1f4:	687b      	ldr	r3, [r7, #4]
     1f6:	085b      	lsrs	r3, r3, #1
     1f8:	687a      	ldr	r2, [r7, #4]
     1fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
     1fe:	2000      	movs	r0, #0
     200:	f001 fa68 	bl	16d4 <am_hal_ctimer_period_set>
                             (ui32Period >> 1));
    //
    // Set up timerA1 for Sensor 1 Freq
    //
    ui32Period = 12000 / SENSOR1_FREQ ;
     204:	f240 63b2 	movw	r3, #1714	; 0x6b2
     208:	607b      	str	r3, [r7, #4]
    am_hal_ctimer_period_set(1, AM_HAL_CTIMER_TIMERA, ui32Period,
     20a:	687b      	ldr	r3, [r7, #4]
     20c:	085b      	lsrs	r3, r3, #1
     20e:	687a      	ldr	r2, [r7, #4]
     210:	f64f 71ff 	movw	r1, #65535	; 0xffff
     214:	2001      	movs	r0, #1
     216:	f001 fa5d 	bl	16d4 <am_hal_ctimer_period_set>
                             (ui32Period >> 1));

    //
    // Clear the timer Interrupt
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
     21a:	2001      	movs	r0, #1
     21c:	f001 faa0 	bl	1760 <am_hal_ctimer_int_clear>
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA1);
     220:	2004      	movs	r0, #4
     222:	f001 fa9d 	bl	1760 <am_hal_ctimer_int_clear>

    //
    // Enable the timer Interrupt.
    //
    am_hal_ctimer_int_register(AM_HAL_CTIMER_INT_TIMERA0,
     226:	490c      	ldr	r1, [pc, #48]	; (258 <init_sensors+0x94>)
     228:	2001      	movs	r0, #1
     22a:	f001 f9c7 	bl	15bc <am_hal_ctimer_int_register>
                               timer0_handler);
    am_hal_ctimer_int_register(AM_HAL_CTIMER_INT_TIMERA1,
     22e:	490b      	ldr	r1, [pc, #44]	; (25c <init_sensors+0x98>)
     230:	2004      	movs	r0, #4
     232:	f001 f9c3 	bl	15bc <am_hal_ctimer_int_register>
                               timer1_handler);
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
     236:	2001      	movs	r0, #1
     238:	f001 fa8a 	bl	1750 <am_hal_ctimer_int_enable>
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA1);
     23c:	2004      	movs	r0, #4
     23e:	f001 fa87 	bl	1750 <am_hal_ctimer_int_enable>

    //
    // Enable the timer interrupt in the NVIC.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_CTIMER);
     242:	201a      	movs	r0, #26
     244:	f001 faa6 	bl	1794 <am_hal_interrupt_enable>
    am_hal_interrupt_master_enable();
     248:	f001 facc 	bl	17e4 <am_hal_interrupt_master_enable>
}
     24c:	bf00      	nop
     24e:	3708      	adds	r7, #8
     250:	46bd      	mov	sp, r7
     252:	bd80      	pop	{r7, pc}
     254:	10001030 	.word	0x10001030
     258:	00000145 	.word	0x00000145
     25c:	0000015d 	.word	0x0000015d

00000260 <ios_set_up>:
// Configure the SPI slave.
//
//*****************************************************************************
static void
ios_set_up(bool bSpi)
{
     260:	b580      	push	{r7, lr}
     262:	b082      	sub	sp, #8
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	71fb      	strb	r3, [r7, #7]
    if (bSpi)
     26a:	79fb      	ldrb	r3, [r7, #7]
     26c:	2b00      	cmp	r3, #0
     26e:	d053      	beq.n	318 <ios_set_up+0xb8>
    {
        // Configure SPI interface
        am_hal_gpio_pin_config(AM_BSP_GPIO_IOS_SCK, AM_BSP_GPIO_CFG_IOS_SCK);
     270:	4b59      	ldr	r3, [pc, #356]	; (3d8 <ios_set_up+0x178>)
     272:	2273      	movs	r2, #115	; 0x73
     274:	601a      	str	r2, [r3, #0]
     276:	4a59      	ldr	r2, [pc, #356]	; (3dc <ios_set_up+0x17c>)
     278:	4b58      	ldr	r3, [pc, #352]	; (3dc <ios_set_up+0x17c>)
     27a:	681b      	ldr	r3, [r3, #0]
     27c:	f023 0307 	bic.w	r3, r3, #7
     280:	6013      	str	r3, [r2, #0]
     282:	4a57      	ldr	r2, [pc, #348]	; (3e0 <ios_set_up+0x180>)
     284:	4b56      	ldr	r3, [pc, #344]	; (3e0 <ios_set_up+0x180>)
     286:	681b      	ldr	r3, [r3, #0]
     288:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     28c:	f043 030a 	orr.w	r3, r3, #10
     290:	6013      	str	r3, [r2, #0]
     292:	4b51      	ldr	r3, [pc, #324]	; (3d8 <ios_set_up+0x178>)
     294:	2200      	movs	r2, #0
     296:	601a      	str	r2, [r3, #0]
        am_hal_gpio_pin_config(AM_BSP_GPIO_IOS_MISO, AM_BSP_GPIO_CFG_IOS_MISO);
     298:	4b4f      	ldr	r3, [pc, #316]	; (3d8 <ios_set_up+0x178>)
     29a:	2273      	movs	r2, #115	; 0x73
     29c:	601a      	str	r2, [r3, #0]
     29e:	4a4f      	ldr	r2, [pc, #316]	; (3dc <ios_set_up+0x17c>)
     2a0:	4b4e      	ldr	r3, [pc, #312]	; (3dc <ios_set_up+0x17c>)
     2a2:	681b      	ldr	r3, [r3, #0]
     2a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     2a8:	6013      	str	r3, [r2, #0]
     2aa:	4a4d      	ldr	r2, [pc, #308]	; (3e0 <ios_set_up+0x180>)
     2ac:	4b4c      	ldr	r3, [pc, #304]	; (3e0 <ios_set_up+0x180>)
     2ae:	681b      	ldr	r3, [r3, #0]
     2b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     2b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     2b8:	6013      	str	r3, [r2, #0]
     2ba:	4b47      	ldr	r3, [pc, #284]	; (3d8 <ios_set_up+0x178>)
     2bc:	2200      	movs	r2, #0
     2be:	601a      	str	r2, [r3, #0]
        am_hal_gpio_pin_config(AM_BSP_GPIO_IOS_MOSI, AM_BSP_GPIO_CFG_IOS_MOSI);
     2c0:	4b45      	ldr	r3, [pc, #276]	; (3d8 <ios_set_up+0x178>)
     2c2:	2273      	movs	r2, #115	; 0x73
     2c4:	601a      	str	r2, [r3, #0]
     2c6:	4a45      	ldr	r2, [pc, #276]	; (3dc <ios_set_up+0x17c>)
     2c8:	4b44      	ldr	r3, [pc, #272]	; (3dc <ios_set_up+0x17c>)
     2ca:	681b      	ldr	r3, [r3, #0]
     2cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     2d0:	6013      	str	r3, [r2, #0]
     2d2:	4a43      	ldr	r2, [pc, #268]	; (3e0 <ios_set_up+0x180>)
     2d4:	4b42      	ldr	r3, [pc, #264]	; (3e0 <ios_set_up+0x180>)
     2d6:	681b      	ldr	r3, [r3, #0]
     2d8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     2dc:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
     2e0:	6013      	str	r3, [r2, #0]
     2e2:	4b3d      	ldr	r3, [pc, #244]	; (3d8 <ios_set_up+0x178>)
     2e4:	2200      	movs	r2, #0
     2e6:	601a      	str	r2, [r3, #0]
        am_hal_gpio_pin_config(AM_BSP_GPIO_IOS_nCE, AM_BSP_GPIO_CFG_IOS_nCE);
     2e8:	4b3b      	ldr	r3, [pc, #236]	; (3d8 <ios_set_up+0x178>)
     2ea:	2273      	movs	r2, #115	; 0x73
     2ec:	601a      	str	r2, [r3, #0]
     2ee:	4a3b      	ldr	r2, [pc, #236]	; (3dc <ios_set_up+0x17c>)
     2f0:	4b3a      	ldr	r3, [pc, #232]	; (3dc <ios_set_up+0x17c>)
     2f2:	681b      	ldr	r3, [r3, #0]
     2f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
     2f8:	6013      	str	r3, [r2, #0]
     2fa:	4a39      	ldr	r2, [pc, #228]	; (3e0 <ios_set_up+0x180>)
     2fc:	4b38      	ldr	r3, [pc, #224]	; (3e0 <ios_set_up+0x180>)
     2fe:	681b      	ldr	r3, [r3, #0]
     300:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     304:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
     308:	6013      	str	r3, [r2, #0]
     30a:	4b33      	ldr	r3, [pc, #204]	; (3d8 <ios_set_up+0x178>)
     30c:	2200      	movs	r2, #0
     30e:	601a      	str	r2, [r3, #0]
        //
        // Configure the IOS interface and LRAM structure.
        //
        am_hal_ios_config(&g_sIOSSpiConfig);
     310:	4834      	ldr	r0, [pc, #208]	; (3e4 <ios_set_up+0x184>)
     312:	f001 fa81 	bl	1818 <am_hal_ios_config>
     316:	e02c      	b.n	372 <ios_set_up+0x112>
    }
    else
    {
        // Configure I2C interface
        am_hal_gpio_pin_config(AM_BSP_GPIO_IOS_SCL, AM_BSP_GPIO_CFG_IOS_SCL);
     318:	4b2f      	ldr	r3, [pc, #188]	; (3d8 <ios_set_up+0x178>)
     31a:	2273      	movs	r2, #115	; 0x73
     31c:	601a      	str	r2, [r3, #0]
     31e:	4a2f      	ldr	r2, [pc, #188]	; (3dc <ios_set_up+0x17c>)
     320:	4b2e      	ldr	r3, [pc, #184]	; (3dc <ios_set_up+0x17c>)
     322:	681b      	ldr	r3, [r3, #0]
     324:	f023 0307 	bic.w	r3, r3, #7
     328:	6013      	str	r3, [r2, #0]
     32a:	4a2d      	ldr	r2, [pc, #180]	; (3e0 <ios_set_up+0x180>)
     32c:	4b2c      	ldr	r3, [pc, #176]	; (3e0 <ios_set_up+0x180>)
     32e:	681b      	ldr	r3, [r3, #0]
     330:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     334:	f043 0302 	orr.w	r3, r3, #2
     338:	6013      	str	r3, [r2, #0]
     33a:	4b27      	ldr	r3, [pc, #156]	; (3d8 <ios_set_up+0x178>)
     33c:	2200      	movs	r2, #0
     33e:	601a      	str	r2, [r3, #0]
        am_hal_gpio_pin_config(AM_BSP_GPIO_IOS_SDA, AM_BSP_GPIO_CFG_IOS_SDA);
     340:	4b25      	ldr	r3, [pc, #148]	; (3d8 <ios_set_up+0x178>)
     342:	2273      	movs	r2, #115	; 0x73
     344:	601a      	str	r2, [r3, #0]
     346:	4a25      	ldr	r2, [pc, #148]	; (3dc <ios_set_up+0x17c>)
     348:	4b24      	ldr	r3, [pc, #144]	; (3dc <ios_set_up+0x17c>)
     34a:	681b      	ldr	r3, [r3, #0]
     34c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     354:	6013      	str	r3, [r2, #0]
     356:	4a22      	ldr	r2, [pc, #136]	; (3e0 <ios_set_up+0x180>)
     358:	4b21      	ldr	r3, [pc, #132]	; (3e0 <ios_set_up+0x180>)
     35a:	681b      	ldr	r3, [r3, #0]
     35c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     360:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     364:	6013      	str	r3, [r2, #0]
     366:	4b1c      	ldr	r3, [pc, #112]	; (3d8 <ios_set_up+0x178>)
     368:	2200      	movs	r2, #0
     36a:	601a      	str	r2, [r3, #0]
        //
        // Configure the IOS interface and LRAM structure.
        //
        am_hal_ios_config(&g_sIOSI2cConfig);
     36c:	481e      	ldr	r0, [pc, #120]	; (3e8 <ios_set_up+0x188>)
     36e:	f001 fa53 	bl	1818 <am_hal_ios_config>

    //
    // Clear out any IOS register-access interrupts that may be active, and
    // enable interrupts for the registers we're interested in.
    //
    am_hal_ios_access_int_clear(AM_HAL_IOS_ACCESS_INT_ALL);
     372:	f04f 30ff 	mov.w	r0, #4294967295
     376:	f001 faad 	bl	18d4 <am_hal_ios_access_int_clear>
    am_hal_ios_int_clear(AM_HAL_IOS_INT_ALL);
     37a:	f04f 30ff 	mov.w	r0, #4294967295
     37e:	f001 fac5 	bl	190c <am_hal_ios_int_clear>
    am_hal_ios_access_int_enable(AM_HAL_IOS_ACCESS_INT_00);
     382:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
     386:	f001 fa9d 	bl	18c4 <am_hal_ios_access_int_enable>
    am_hal_ios_int_enable(AM_HAL_IOS_INT_ERR | AM_HAL_IOS_INT_FSIZE);
     38a:	200f      	movs	r0, #15
     38c:	f001 fab6 	bl	18fc <am_hal_ios_int_enable>

    // Preparation of FIFO
    am_hal_ios_fifo_buffer_init( &g_pui8TxFifoBuffer[0], AM_IOS_TX_BUFSIZE_MAX);
     390:	f240 31ff 	movw	r1, #1023	; 0x3ff
     394:	4815      	ldr	r0, [pc, #84]	; (3ec <ios_set_up+0x18c>)
     396:	f001 ff3d 	bl	2214 <am_hal_ios_fifo_buffer_init>

    //
    // Set the bit in the NVIC to accept access interrupts from the IO Slave.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_IOSACC);
     39a:	2015      	movs	r0, #21
     39c:	f001 f9fa 	bl	1794 <am_hal_interrupt_enable>
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_IOSLAVE);
     3a0:	2014      	movs	r0, #20
     3a2:	f001 f9f7 	bl	1794 <am_hal_interrupt_enable>

    // Set up the IOSINT interrupt pin
    am_hal_gpio_pin_config(AM_BSP_GPIO_IOS_INT, AM_BSP_GPIO_CFG_IOS_INT);
     3a6:	4b0c      	ldr	r3, [pc, #48]	; (3d8 <ios_set_up+0x178>)
     3a8:	2273      	movs	r2, #115	; 0x73
     3aa:	601a      	str	r2, [r3, #0]
     3ac:	4a0b      	ldr	r2, [pc, #44]	; (3dc <ios_set_up+0x17c>)
     3ae:	4b0b      	ldr	r3, [pc, #44]	; (3dc <ios_set_up+0x17c>)
     3b0:	681b      	ldr	r3, [r3, #0]
     3b2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
     3b6:	6013      	str	r3, [r2, #0]
     3b8:	4a0d      	ldr	r2, [pc, #52]	; (3f0 <ios_set_up+0x190>)
     3ba:	4b0d      	ldr	r3, [pc, #52]	; (3f0 <ios_set_up+0x190>)
     3bc:	681b      	ldr	r3, [r3, #0]
     3be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     3c2:	f043 0308 	orr.w	r3, r3, #8
     3c6:	6013      	str	r3, [r2, #0]
     3c8:	4b03      	ldr	r3, [pc, #12]	; (3d8 <ios_set_up+0x178>)
     3ca:	2200      	movs	r2, #0
     3cc:	601a      	str	r2, [r3, #0]

}
     3ce:	bf00      	nop
     3d0:	3708      	adds	r7, #8
     3d2:	46bd      	mov	sp, r7
     3d4:	bd80      	pop	{r7, pc}
     3d6:	bf00      	nop
     3d8:	40010060 	.word	0x40010060
     3dc:	40010040 	.word	0x40010040
     3e0:	40010000 	.word	0x40010000
     3e4:	10001000 	.word	0x10001000
     3e8:	10001018 	.word	0x10001018
     3ec:	10001360 	.word	0x10001360
     3f0:	40010004 	.word	0x40010004

000003f4 <inform_host>:

// Inform host of new data available to read
void
inform_host(void)
{
     3f4:	b580      	push	{r7, lr}
     3f6:	af00      	add	r7, sp, #0
    // Update FIFOCTR for host to read
    am_hal_ios_update_fifoctr();
     3f8:	f001 ff48 	bl	228c <am_hal_ios_update_fifoctr>
    // Interrupt the host
    am_hal_ios_host_int_set(AM_IOSTEST_IOSTOHOST_DATAAVAIL_INTMASK);
     3fc:	2001      	movs	r0, #1
     3fe:	f001 fa5b 	bl	18b8 <am_hal_ios_host_int_set>
}
     402:	bf00      	nop
     404:	bd80      	pop	{r7, pc}
	...

00000408 <am_ioslave_acc_isr>:
// IO Slave Register Access ISR.
//
//*****************************************************************************
void
am_ioslave_acc_isr(void)
{
     408:	b580      	push	{r7, lr}
     40a:	b082      	sub	sp, #8
     40c:	af00      	add	r7, sp, #0

    //
    // Set up a pointer for writing 32-bit aligned packets through the IO slave
    // interface.
    //
    pui8Packet = (uint8_t *) am_hal_ios_pui8LRAM;
     40e:	4b19      	ldr	r3, [pc, #100]	; (474 <am_ioslave_acc_isr+0x6c>)
     410:	681b      	ldr	r3, [r3, #0]
     412:	607b      	str	r3, [r7, #4]

    //
    // Check to see what caused this interrupt, then clear the bit from the
    // interrupt register.
    //
    ui32Status = am_hal_ios_access_int_status_get(false);
     414:	2000      	movs	r0, #0
     416:	f001 fa63 	bl	18e0 <am_hal_ios_access_int_status_get>
     41a:	6038      	str	r0, [r7, #0]
    am_hal_ios_access_int_clear(ui32Status);
     41c:	6838      	ldr	r0, [r7, #0]
     41e:	f001 fa59 	bl	18d4 <am_hal_ios_access_int_clear>

    if ( ui32Status & AM_HAL_IOS_ACCESS_INT_00 )
     422:	683b      	ldr	r3, [r7, #0]
     424:	2b00      	cmp	r3, #0
     426:	da20      	bge.n	46a <am_ioslave_acc_isr+0x62>
    {
        // Received command from Host
        // Figure out what to do next based on the command.
        //
        switch(pui8Packet[0])
     428:	687b      	ldr	r3, [r7, #4]
     42a:	781b      	ldrb	r3, [r3, #0]
     42c:	2b01      	cmp	r3, #1
     42e:	d007      	beq.n	440 <am_ioslave_acc_isr+0x38>
     430:	2b02      	cmp	r3, #2
     432:	d00b      	beq.n	44c <am_ioslave_acc_isr+0x44>
     434:	2b00      	cmp	r3, #0
     436:	d000      	beq.n	43a <am_ioslave_acc_isr+0x32>
                    g_iosState = AM_IOSTEST_SLAVE_STATE_NODATA;
                }
                break;

            default:
                break;
     438:	e017      	b.n	46a <am_ioslave_acc_isr+0x62>
                start_sensors();
     43a:	f7ff fea9 	bl	190 <start_sensors>
                break;
     43e:	e014      	b.n	46a <am_ioslave_acc_isr+0x62>
                stop_sensors();
     440:	f7ff fe98 	bl	174 <stop_sensors>
                g_iosState = AM_IOSTEST_SLAVE_STATE_NODATA;
     444:	4b0c      	ldr	r3, [pc, #48]	; (478 <am_ioslave_acc_isr+0x70>)
     446:	2200      	movs	r2, #0
     448:	701a      	strb	r2, [r3, #0]
                break;
     44a:	e00e      	b.n	46a <am_ioslave_acc_isr+0x62>
                if (am_hal_ios_fifo_space_used())
     44c:	f001 fa72 	bl	1934 <am_hal_ios_fifo_space_used>
     450:	4603      	mov	r3, r0
     452:	2b00      	cmp	r3, #0
     454:	d005      	beq.n	462 <am_ioslave_acc_isr+0x5a>
                    g_iosState = AM_IOSTEST_SLAVE_STATE_DATA;
     456:	4b08      	ldr	r3, [pc, #32]	; (478 <am_ioslave_acc_isr+0x70>)
     458:	2201      	movs	r2, #1
     45a:	701a      	strb	r2, [r3, #0]
                    inform_host();
     45c:	f7ff ffca 	bl	3f4 <inform_host>
                break;
     460:	e002      	b.n	468 <am_ioslave_acc_isr+0x60>
                    g_iosState = AM_IOSTEST_SLAVE_STATE_NODATA;
     462:	4b05      	ldr	r3, [pc, #20]	; (478 <am_ioslave_acc_isr+0x70>)
     464:	2200      	movs	r2, #0
     466:	701a      	strb	r2, [r3, #0]
                break;
     468:	bf00      	nop
        }
    }
}
     46a:	bf00      	nop
     46c:	3708      	adds	r7, #8
     46e:	46bd      	mov	sp, r7
     470:	bd80      	pop	{r7, pc}
     472:	bf00      	nop
     474:	000025d0 	.word	0x000025d0
     478:	1000115c 	.word	0x1000115c

0000047c <am_ioslave_ios_isr>:
// IO Slave Main ISR.
//
//*****************************************************************************
void
am_ioslave_ios_isr(void)
{
     47c:	b580      	push	{r7, lr}
     47e:	b082      	sub	sp, #8
     480:	af00      	add	r7, sp, #0

    //
    // Check to see what caused this interrupt, then clear the bit from the
    // interrupt register.
    //
    ui32Status = am_hal_ios_int_status_get(false);
     482:	2000      	movs	r0, #0
     484:	f001 fa48 	bl	1918 <am_hal_ios_int_status_get>
     488:	6078      	str	r0, [r7, #4]
    am_hal_ios_int_clear(ui32Status);
     48a:	6878      	ldr	r0, [r7, #4]
     48c:	f001 fa3e 	bl	190c <am_hal_ios_int_clear>

    if (ui32Status & AM_HAL_IOS_INT_FUNDFL)
     490:	687b      	ldr	r3, [r7, #4]
     492:	f003 0304 	and.w	r3, r3, #4
     496:	2b00      	cmp	r3, #0
     498:	d008      	beq.n	4ac <am_ioslave_ios_isr+0x30>
    {
        am_util_stdio_printf("Hitting underflow for the requested IOS FIFO transfer\n");
     49a:	4810      	ldr	r0, [pc, #64]	; (4dc <am_ioslave_ios_isr+0x60>)
     49c:	f000 ffe8 	bl	1470 <am_util_stdio_printf>
        // We should never hit this case unless the threshold has beeen set
        // incorrect, or we are unable to handle the data rate
        // ERROR!
        am_hal_debug_assert_msg(0,
     4a0:	4a0f      	ldr	r2, [pc, #60]	; (4e0 <am_ioslave_ios_isr+0x64>)
     4a2:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
     4a6:	480f      	ldr	r0, [pc, #60]	; (4e4 <am_ioslave_ios_isr+0x68>)
     4a8:	f001 f96e 	bl	1788 <am_hal_debug_error>
            "Hitting underflow for the requested IOS FIFO transfer.");
    }

    if (ui32Status & AM_HAL_IOS_INT_ERR)
     4ac:	687b      	ldr	r3, [r7, #4]
     4ae:	f003 030e 	and.w	r3, r3, #14
     4b2:	2b00      	cmp	r3, #0
     4b4:	d005      	beq.n	4c2 <am_ioslave_ios_isr+0x46>
    {
        // We should never hit this case
        // ERROR!
        am_hal_debug_assert_msg(0,
     4b6:	4a0c      	ldr	r2, [pc, #48]	; (4e8 <am_ioslave_ios_isr+0x6c>)
     4b8:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
     4bc:	4809      	ldr	r0, [pc, #36]	; (4e4 <am_ioslave_ios_isr+0x68>)
     4be:	f001 f963 	bl	1788 <am_hal_debug_error>
            "Hitting ERROR case.");
    }

    if (ui32Status & AM_HAL_IOS_INT_FSIZE)
     4c2:	687b      	ldr	r3, [r7, #4]
     4c4:	f003 0301 	and.w	r3, r3, #1
     4c8:	2b00      	cmp	r3, #0
     4ca:	d002      	beq.n	4d2 <am_ioslave_ios_isr+0x56>
    {
        //
        // Service the I2C slave FIFO if necessary.
        //
        am_hal_ios_fifo_service(ui32Status);
     4cc:	6878      	ldr	r0, [r7, #4]
     4ce:	f001 fa43 	bl	1958 <am_hal_ios_fifo_service>
    }
}
     4d2:	bf00      	nop
     4d4:	3708      	adds	r7, #8
     4d6:	46bd      	mov	sp, r7
     4d8:	bd80      	pop	{r7, pc}
     4da:	bf00      	nop
     4dc:	000024ac 	.word	0x000024ac
     4e0:	000024e4 	.word	0x000024e4
     4e4:	0000251c 	.word	0x0000251c
     4e8:	00002534 	.word	0x00002534

000004ec <itm_start>:
// Start up the ITM interface.
//
//*****************************************************************************
void
itm_start(void)
{
     4ec:	b580      	push	{r7, lr}
     4ee:	af00      	add	r7, sp, #0
    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     4f0:	480f      	ldr	r0, [pc, #60]	; (530 <itm_start+0x44>)
     4f2:	f000 f939 	bl	768 <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     4f6:	4b0f      	ldr	r3, [pc, #60]	; (534 <itm_start+0x48>)
     4f8:	2273      	movs	r2, #115	; 0x73
     4fa:	601a      	str	r2, [r3, #0]
     4fc:	4a0e      	ldr	r2, [pc, #56]	; (538 <itm_start+0x4c>)
     4fe:	4b0e      	ldr	r3, [pc, #56]	; (538 <itm_start+0x4c>)
     500:	681b      	ldr	r3, [r3, #0]
     502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     506:	6013      	str	r3, [r2, #0]
     508:	4a0c      	ldr	r2, [pc, #48]	; (53c <itm_start+0x50>)
     50a:	4b0c      	ldr	r3, [pc, #48]	; (53c <itm_start+0x50>)
     50c:	681b      	ldr	r3, [r3, #0]
     50e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     512:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     516:	6013      	str	r3, [r2, #0]
     518:	4b06      	ldr	r3, [pc, #24]	; (534 <itm_start+0x48>)
     51a:	2200      	movs	r2, #0
     51c:	601a      	str	r2, [r3, #0]

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     51e:	f001 fed3 	bl	22c8 <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     522:	f000 ffdf 	bl	14e4 <am_bsp_debug_printf_enable>
    //
    // Clear the terminal.
    //
    am_util_stdio_terminal_clear();
     526:	f000 ffc1 	bl	14ac <am_util_stdio_terminal_clear>
}
     52a:	bf00      	nop
     52c:	bd80      	pop	{r7, pc}
     52e:	bf00      	nop
     530:	0000153d 	.word	0x0000153d
     534:	40010060 	.word	0x40010060
     538:	40010054 	.word	0x40010054
     53c:	40010028 	.word	0x40010028

00000540 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     540:	b580      	push	{r7, lr}
     542:	b084      	sub	sp, #16
     544:	af00      	add	r7, sp, #0
    int i;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     546:	2000      	movs	r0, #0
     548:	f000 fffa 	bl	1540 <am_hal_clkgen_sysclk_select>
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     54c:	f000 ffb8 	bl	14c0 <am_bsp_low_power_init>

    //
    //
    // Initialize the printf interface for ITM/SWO output.
    //
    itm_start();
     550:	f7ff ffcc 	bl	4ec <itm_start>
    am_hal_gpio_out_bit_clear(43);
    am_hal_gpio_pin_config(43, AM_HAL_GPIO_OUTPUT);
#endif

    // Initialize Test Data
    for (i = 0; i < AM_TEST_REF_BUF_SIZE; i++)
     554:	2300      	movs	r3, #0
     556:	60fb      	str	r3, [r7, #12]
     558:	e009      	b.n	56e <main+0x2e>
    {
        g_pui8TestBuf[i] = (i & 0xFF) ^ XOR_BYTE;
     55a:	68fb      	ldr	r3, [r7, #12]
     55c:	b2d9      	uxtb	r1, r3
     55e:	4a5e      	ldr	r2, [pc, #376]	; (6d8 <main+0x198>)
     560:	68fb      	ldr	r3, [r7, #12]
     562:	4413      	add	r3, r2
     564:	460a      	mov	r2, r1
     566:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < AM_TEST_REF_BUF_SIZE; i++)
     568:	68fb      	ldr	r3, [r7, #12]
     56a:	3301      	adds	r3, #1
     56c:	60fb      	str	r3, [r7, #12]
     56e:	68fb      	ldr	r3, [r7, #12]
     570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
     574:	dbf1      	blt.n	55a <main+0x1a>
    }

    init_sensors();
     576:	f7ff fe25 	bl	1c4 <init_sensors>
    //
    // Enable the IOS. Choose the correct protocol based on USE_SPI
    //
    ios_set_up(USE_SPI);
     57a:	2001      	movs	r0, #1
     57c:	f7ff fe70 	bl	260 <ios_set_up>

    //
    // Enable interrupts so we can receive messages from the boot host.
    //
    am_hal_interrupt_master_enable();
     580:	f001 f930 	bl	17e4 <am_hal_interrupt_master_enable>
    //
    // Loop forever.
    //
    while(1)
    {
        uint32_t numWritten = 0;
     584:	2300      	movs	r3, #0
     586:	60bb      	str	r3, [r7, #8]
        uint32_t chunk1;
        //
        uint32_t ui32IntStatus = am_hal_interrupt_master_disable();
     588:	f001 f930 	bl	17ec <am_hal_interrupt_master_disable>
     58c:	6078      	str	r0, [r7, #4]
        if (g_bSensor0Data || g_bSensor1Data)
     58e:	4b53      	ldr	r3, [pc, #332]	; (6dc <main+0x19c>)
     590:	781b      	ldrb	r3, [r3, #0]
     592:	b2db      	uxtb	r3, r3
     594:	2b00      	cmp	r3, #0
     596:	d105      	bne.n	5a4 <main+0x64>
     598:	4b51      	ldr	r3, [pc, #324]	; (6e0 <main+0x1a0>)
     59a:	781b      	ldrb	r3, [r3, #0]
     59c:	b2db      	uxtb	r3, r3
     59e:	2b00      	cmp	r3, #0
     5a0:	f000 8091 	beq.w	6c6 <main+0x186>
        {
            // Enable the interrupts
            am_hal_interrupt_master_set(ui32IntStatus);
     5a4:	6878      	ldr	r0, [r7, #4]
     5a6:	f001 f925 	bl	17f4 <am_hal_interrupt_master_set>
            if (g_bSensor0Data)
     5aa:	4b4c      	ldr	r3, [pc, #304]	; (6dc <main+0x19c>)
     5ac:	781b      	ldrb	r3, [r3, #0]
     5ae:	b2db      	uxtb	r3, r3
     5b0:	2b00      	cmp	r3, #0
     5b2:	d038      	beq.n	626 <main+0xe6>
            {
                chunk1 = AM_TEST_REF_BUF_SIZE - g_sendIdx;
     5b4:	4b4b      	ldr	r3, [pc, #300]	; (6e4 <main+0x1a4>)
     5b6:	681b      	ldr	r3, [r3, #0]
     5b8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
     5bc:	603b      	str	r3, [r7, #0]
                if (chunk1 > SENSOR0_DATA_SIZE)
     5be:	683b      	ldr	r3, [r7, #0]
     5c0:	2bc8      	cmp	r3, #200	; 0xc8
     5c2:	d909      	bls.n	5d8 <main+0x98>
                {
                    numWritten = am_hal_ios_fifo_write(&g_pui8TestBuf[g_sendIdx], SENSOR0_DATA_SIZE);
     5c4:	4b47      	ldr	r3, [pc, #284]	; (6e4 <main+0x1a4>)
     5c6:	681b      	ldr	r3, [r3, #0]
     5c8:	4a43      	ldr	r2, [pc, #268]	; (6d8 <main+0x198>)
     5ca:	4413      	add	r3, r2
     5cc:	21c8      	movs	r1, #200	; 0xc8
     5ce:	4618      	mov	r0, r3
     5d0:	f001 fc1c 	bl	1e0c <am_hal_ios_fifo_write>
     5d4:	60b8      	str	r0, [r7, #8]
     5d6:	e017      	b.n	608 <main+0xc8>
                }
                else
                {
                    numWritten = am_hal_ios_fifo_write(&g_pui8TestBuf[g_sendIdx], chunk1);
     5d8:	4b42      	ldr	r3, [pc, #264]	; (6e4 <main+0x1a4>)
     5da:	681b      	ldr	r3, [r3, #0]
     5dc:	4a3e      	ldr	r2, [pc, #248]	; (6d8 <main+0x198>)
     5de:	4413      	add	r3, r2
     5e0:	6839      	ldr	r1, [r7, #0]
     5e2:	4618      	mov	r0, r3
     5e4:	f001 fc12 	bl	1e0c <am_hal_ios_fifo_write>
     5e8:	60b8      	str	r0, [r7, #8]
                    if (numWritten == chunk1)
     5ea:	68ba      	ldr	r2, [r7, #8]
     5ec:	683b      	ldr	r3, [r7, #0]
     5ee:	429a      	cmp	r2, r3
     5f0:	d10a      	bne.n	608 <main+0xc8>
                    {
                        numWritten += am_hal_ios_fifo_write(&g_pui8TestBuf[0], SENSOR0_DATA_SIZE - chunk1);
     5f2:	683b      	ldr	r3, [r7, #0]
     5f4:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
     5f8:	4619      	mov	r1, r3
     5fa:	4837      	ldr	r0, [pc, #220]	; (6d8 <main+0x198>)
     5fc:	f001 fc06 	bl	1e0c <am_hal_ios_fifo_write>
     600:	4602      	mov	r2, r0
     602:	68bb      	ldr	r3, [r7, #8]
     604:	4413      	add	r3, r2
     606:	60bb      	str	r3, [r7, #8]
                    }
                }

                g_sendIdx += numWritten;
     608:	4b36      	ldr	r3, [pc, #216]	; (6e4 <main+0x1a4>)
     60a:	681a      	ldr	r2, [r3, #0]
     60c:	68bb      	ldr	r3, [r7, #8]
     60e:	4413      	add	r3, r2
     610:	4a34      	ldr	r2, [pc, #208]	; (6e4 <main+0x1a4>)
     612:	6013      	str	r3, [r2, #0]
                g_sendIdx %= AM_TEST_REF_BUF_SIZE;
     614:	4b33      	ldr	r3, [pc, #204]	; (6e4 <main+0x1a4>)
     616:	681b      	ldr	r3, [r3, #0]
     618:	f3c3 0308 	ubfx	r3, r3, #0, #9
     61c:	4a31      	ldr	r2, [pc, #196]	; (6e4 <main+0x1a4>)
     61e:	6013      	str	r3, [r2, #0]
                g_bSensor0Data = false;
     620:	4b2e      	ldr	r3, [pc, #184]	; (6dc <main+0x19c>)
     622:	2200      	movs	r2, #0
     624:	701a      	strb	r2, [r3, #0]
            }
            if (g_bSensor1Data)
     626:	4b2e      	ldr	r3, [pc, #184]	; (6e0 <main+0x1a0>)
     628:	781b      	ldrb	r3, [r3, #0]
     62a:	b2db      	uxtb	r3, r3
     62c:	2b00      	cmp	r3, #0
     62e:	d03a      	beq.n	6a6 <main+0x166>
            {
                chunk1 = AM_TEST_REF_BUF_SIZE - g_sendIdx;
     630:	4b2c      	ldr	r3, [pc, #176]	; (6e4 <main+0x1a4>)
     632:	681b      	ldr	r3, [r3, #0]
     634:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
     638:	603b      	str	r3, [r7, #0]
                if (chunk1 > SENSOR1_DATA_SIZE)
     63a:	683b      	ldr	r3, [r7, #0]
     63c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
     640:	d90a      	bls.n	658 <main+0x118>
                {
                    numWritten = am_hal_ios_fifo_write(&g_pui8TestBuf[g_sendIdx], SENSOR1_DATA_SIZE);
     642:	4b28      	ldr	r3, [pc, #160]	; (6e4 <main+0x1a4>)
     644:	681b      	ldr	r3, [r3, #0]
     646:	4a24      	ldr	r2, [pc, #144]	; (6d8 <main+0x198>)
     648:	4413      	add	r3, r2
     64a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     64e:	4618      	mov	r0, r3
     650:	f001 fbdc 	bl	1e0c <am_hal_ios_fifo_write>
     654:	60b8      	str	r0, [r7, #8]
     656:	e017      	b.n	688 <main+0x148>
                }
                else
                {
                    numWritten = am_hal_ios_fifo_write(&g_pui8TestBuf[g_sendIdx], chunk1);
     658:	4b22      	ldr	r3, [pc, #136]	; (6e4 <main+0x1a4>)
     65a:	681b      	ldr	r3, [r3, #0]
     65c:	4a1e      	ldr	r2, [pc, #120]	; (6d8 <main+0x198>)
     65e:	4413      	add	r3, r2
     660:	6839      	ldr	r1, [r7, #0]
     662:	4618      	mov	r0, r3
     664:	f001 fbd2 	bl	1e0c <am_hal_ios_fifo_write>
     668:	60b8      	str	r0, [r7, #8]
                    if (numWritten == chunk1)
     66a:	68ba      	ldr	r2, [r7, #8]
     66c:	683b      	ldr	r3, [r7, #0]
     66e:	429a      	cmp	r2, r3
     670:	d10a      	bne.n	688 <main+0x148>
                    {
                        numWritten += am_hal_ios_fifo_write(&g_pui8TestBuf[0], SENSOR1_DATA_SIZE - chunk1);
     672:	683b      	ldr	r3, [r7, #0]
     674:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
     678:	4619      	mov	r1, r3
     67a:	4817      	ldr	r0, [pc, #92]	; (6d8 <main+0x198>)
     67c:	f001 fbc6 	bl	1e0c <am_hal_ios_fifo_write>
     680:	4602      	mov	r2, r0
     682:	68bb      	ldr	r3, [r7, #8]
     684:	4413      	add	r3, r2
     686:	60bb      	str	r3, [r7, #8]
                    }
                }

                g_sendIdx += numWritten;
     688:	4b16      	ldr	r3, [pc, #88]	; (6e4 <main+0x1a4>)
     68a:	681a      	ldr	r2, [r3, #0]
     68c:	68bb      	ldr	r3, [r7, #8]
     68e:	4413      	add	r3, r2
     690:	4a14      	ldr	r2, [pc, #80]	; (6e4 <main+0x1a4>)
     692:	6013      	str	r3, [r2, #0]
                g_sendIdx %= AM_TEST_REF_BUF_SIZE;
     694:	4b13      	ldr	r3, [pc, #76]	; (6e4 <main+0x1a4>)
     696:	681b      	ldr	r3, [r3, #0]
     698:	f3c3 0308 	ubfx	r3, r3, #0, #9
     69c:	4a11      	ldr	r2, [pc, #68]	; (6e4 <main+0x1a4>)
     69e:	6013      	str	r3, [r2, #0]
                g_bSensor1Data = false;
     6a0:	4b0f      	ldr	r3, [pc, #60]	; (6e0 <main+0x1a0>)
     6a2:	2200      	movs	r2, #0
     6a4:	701a      	strb	r2, [r3, #0]
            }
            // If we were Idle - need to inform Host if there is new data
            if (g_iosState == AM_IOSTEST_SLAVE_STATE_NODATA)
     6a6:	4b10      	ldr	r3, [pc, #64]	; (6e8 <main+0x1a8>)
     6a8:	781b      	ldrb	r3, [r3, #0]
     6aa:	b2db      	uxtb	r3, r3
     6ac:	2b00      	cmp	r3, #0
     6ae:	d111      	bne.n	6d4 <main+0x194>
            {
                if (am_hal_ios_fifo_space_used())
     6b0:	f001 f940 	bl	1934 <am_hal_ios_fifo_space_used>
     6b4:	4603      	mov	r3, r0
     6b6:	2b00      	cmp	r3, #0
     6b8:	d00c      	beq.n	6d4 <main+0x194>
                {
                    g_iosState = AM_IOSTEST_SLAVE_STATE_DATA;
     6ba:	4b0b      	ldr	r3, [pc, #44]	; (6e8 <main+0x1a8>)
     6bc:	2201      	movs	r2, #1
     6be:	701a      	strb	r2, [r3, #0]
                    inform_host();
     6c0:	f7ff fe98 	bl	3f4 <inform_host>
            if (g_iosState == AM_IOSTEST_SLAVE_STATE_NODATA)
     6c4:	e006      	b.n	6d4 <main+0x194>
        else
        {
            //
            // Go to Deep Sleep.
            //
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_NORMAL);
     6c6:	2000      	movs	r0, #0
     6c8:	f001 fe78 	bl	23bc <am_hal_sysctrl_sleep>
            // Enable the interrupts
            am_hal_interrupt_master_set(ui32IntStatus);
     6cc:	6878      	ldr	r0, [r7, #4]
     6ce:	f001 f891 	bl	17f4 <am_hal_interrupt_master_set>
     6d2:	e757      	b.n	584 <main+0x44>
            if (g_iosState == AM_IOSTEST_SLAVE_STATE_NODATA)
     6d4:	bf00      	nop
    {
     6d6:	e755      	b.n	584 <main+0x44>
     6d8:	10001160 	.word	0x10001160
     6dc:	1000115d 	.word	0x1000115d
     6e0:	1000175f 	.word	0x1000175f
     6e4:	10001048 	.word	0x10001048
     6e8:	1000115c 	.word	0x1000115c

000006ec <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     6ec:	4811      	ldr	r0, [pc, #68]	; (734 <zero_loop+0x12>)
     6ee:	4912      	ldr	r1, [pc, #72]	; (738 <zero_loop+0x16>)
     6f0:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     6f2:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     6f6:	4811      	ldr	r0, [pc, #68]	; (73c <zero_loop+0x1a>)
     6f8:	6801      	ldr	r1, [r0, #0]
     6fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6fe:	6001      	str	r1, [r0, #0]
     700:	f3bf 8f4f 	dsb	sy
     704:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     708:	480d      	ldr	r0, [pc, #52]	; (740 <zero_loop+0x1e>)
     70a:	490e      	ldr	r1, [pc, #56]	; (744 <zero_loop+0x22>)
     70c:	4a0e      	ldr	r2, [pc, #56]	; (748 <zero_loop+0x26>)

0000070e <copy_loop>:
     70e:	f850 3b04 	ldr.w	r3, [r0], #4
     712:	f841 3b04 	str.w	r3, [r1], #4
     716:	4291      	cmp	r1, r2
     718:	dbf9      	blt.n	70e <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     71a:	480c      	ldr	r0, [pc, #48]	; (74c <zero_loop+0x2a>)
     71c:	490c      	ldr	r1, [pc, #48]	; (750 <zero_loop+0x2e>)
     71e:	f04f 0200 	mov.w	r2, #0

00000722 <zero_loop>:
     722:	4288      	cmp	r0, r1
     724:	bfb8      	it	lt
     726:	f840 2b04 	strlt.w	r2, [r0], #4
     72a:	dbfa      	blt.n	722 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     72c:	f7ff ff08 	bl	540 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     730:	be00      	bkpt	0x0000
}
     732:	bf00      	nop
     734:	e000ed08 	.word	0xe000ed08
     738:	00000000 	.word	0x00000000
     73c:	e000ed88 	.word	0xe000ed88
     740:	000025d4 	.word	0x000025d4
     744:	10001000 	.word	0x10001000
     748:	10001048 	.word	0x10001048
     74c:	10001048 	.word	0x10001048
     750:	10001798 	.word	0x10001798

00000754 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     754:	b480      	push	{r7}
     756:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     758:	e7fe      	b.n	758 <am_nmi_isr+0x4>

0000075a <am_busfault_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_fault_isr(void)
{
     75a:	b480      	push	{r7}
     75c:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     75e:	e7fe      	b.n	75e <am_busfault_isr+0x4>

00000760 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     760:	b480      	push	{r7}
     762:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     764:	e7fe      	b.n	764 <am_adc_isr+0x4>
	...

00000768 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     768:	b480      	push	{r7}
     76a:	b083      	sub	sp, #12
     76c:	af00      	add	r7, sp, #0
     76e:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     770:	4a04      	ldr	r2, [pc, #16]	; (784 <am_util_stdio_printf_init+0x1c>)
     772:	687b      	ldr	r3, [r7, #4]
     774:	6013      	str	r3, [r2, #0]
}
     776:	bf00      	nop
     778:	370c      	adds	r7, #12
     77a:	46bd      	mov	sp, r7
     77c:	f85d 7b04 	ldr.w	r7, [sp], #4
     780:	4770      	bx	lr
     782:	bf00      	nop
     784:	10001760 	.word	0x10001760

00000788 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     788:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     78c:	b096      	sub	sp, #88	; 0x58
     78e:	af00      	add	r7, sp, #0
     790:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     794:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     798:	0025      	movs	r5, r4
     79a:	2600      	movs	r6, #0
     79c:	ea55 0306 	orrs.w	r3, r5, r6
     7a0:	f000 80a0 	beq.w	8e4 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     7a4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     7a8:	0862      	lsrs	r2, r4, #1
     7aa:	ea4f 0133 	mov.w	r1, r3, rrx
     7ae:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     7b2:	ea4f 0893 	mov.w	r8, r3, lsr #2
     7b6:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     7ba:	ea4f 0994 	mov.w	r9, r4, lsr #2
     7be:	eb11 0308 	adds.w	r3, r1, r8
     7c2:	eb42 0409 	adc.w	r4, r2, r9
     7c6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     7ca:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     7ce:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     7d2:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     7d6:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     7da:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     7de:	eb13 030a 	adds.w	r3, r3, sl
     7e2:	eb44 040b 	adc.w	r4, r4, fp
     7e6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     7ea:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     7ee:	0a1a      	lsrs	r2, r3, #8
     7f0:	62ba      	str	r2, [r7, #40]	; 0x28
     7f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
     7f4:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     7f8:	62ba      	str	r2, [r7, #40]	; 0x28
     7fa:	0a23      	lsrs	r3, r4, #8
     7fc:	62fb      	str	r3, [r7, #44]	; 0x2c
     7fe:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     802:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     806:	18c9      	adds	r1, r1, r3
     808:	eb42 0204 	adc.w	r2, r2, r4
     80c:	460b      	mov	r3, r1
     80e:	4614      	mov	r4, r2
     810:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     814:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     818:	0c1a      	lsrs	r2, r3, #16
     81a:	623a      	str	r2, [r7, #32]
     81c:	6a3a      	ldr	r2, [r7, #32]
     81e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     822:	623a      	str	r2, [r7, #32]
     824:	0c23      	lsrs	r3, r4, #16
     826:	627b      	str	r3, [r7, #36]	; 0x24
     828:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     82c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     830:	18c9      	adds	r1, r1, r3
     832:	eb42 0204 	adc.w	r2, r2, r4
     836:	460b      	mov	r3, r1
     838:	4614      	mov	r4, r2
     83a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     83e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     842:	0023      	movs	r3, r4
     844:	603b      	str	r3, [r7, #0]
     846:	2300      	movs	r3, #0
     848:	607b      	str	r3, [r7, #4]
     84a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     84e:	e897 0006 	ldmia.w	r7, {r1, r2}
     852:	18c9      	adds	r1, r1, r3
     854:	eb42 0204 	adc.w	r2, r2, r4
     858:	460b      	mov	r3, r1
     85a:	4614      	mov	r4, r2
     85c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     860:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     864:	08da      	lsrs	r2, r3, #3
     866:	613a      	str	r2, [r7, #16]
     868:	693a      	ldr	r2, [r7, #16]
     86a:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     86e:	613a      	str	r2, [r7, #16]
     870:	08e3      	lsrs	r3, r4, #3
     872:	617b      	str	r3, [r7, #20]
     874:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     878:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     87c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
     880:	460b      	mov	r3, r1
     882:	4614      	mov	r4, r2
     884:	00a0      	lsls	r0, r4, #2
     886:	60f8      	str	r0, [r7, #12]
     888:	68f8      	ldr	r0, [r7, #12]
     88a:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
     88e:	60f8      	str	r0, [r7, #12]
     890:	009b      	lsls	r3, r3, #2
     892:	60bb      	str	r3, [r7, #8]
     894:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     898:	185b      	adds	r3, r3, r1
     89a:	eb44 0402 	adc.w	r4, r4, r2
     89e:	18db      	adds	r3, r3, r3
     8a0:	eb44 0404 	adc.w	r4, r4, r4
     8a4:	4619      	mov	r1, r3
     8a6:	4622      	mov	r2, r4
     8a8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     8ac:	1a5b      	subs	r3, r3, r1
     8ae:	eb64 0402 	sbc.w	r4, r4, r2
     8b2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     8b6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     8ba:	3306      	adds	r3, #6
     8bc:	f144 0400 	adc.w	r4, r4, #0
     8c0:	091a      	lsrs	r2, r3, #4
     8c2:	61ba      	str	r2, [r7, #24]
     8c4:	69ba      	ldr	r2, [r7, #24]
     8c6:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     8ca:	61ba      	str	r2, [r7, #24]
     8cc:	0923      	lsrs	r3, r4, #4
     8ce:	61fb      	str	r3, [r7, #28]
     8d0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     8d4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     8d8:	18c9      	adds	r1, r1, r3
     8da:	eb42 0204 	adc.w	r2, r2, r4
     8de:	460b      	mov	r3, r1
     8e0:	4614      	mov	r4, r2
     8e2:	e029      	b.n	938 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     8e6:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     8e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     8ea:	085a      	lsrs	r2, r3, #1
     8ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     8ee:	089b      	lsrs	r3, r3, #2
     8f0:	4413      	add	r3, r2
     8f2:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     8f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     8f6:	091b      	lsrs	r3, r3, #4
     8f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     8fa:	4413      	add	r3, r2
     8fc:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     8fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     900:	0a1b      	lsrs	r3, r3, #8
     902:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     904:	4413      	add	r3, r2
     906:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     90a:	0c1b      	lsrs	r3, r3, #16
     90c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     90e:	4413      	add	r3, r2
     910:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     914:	08db      	lsrs	r3, r3, #3
     916:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     918:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     91a:	4613      	mov	r3, r2
     91c:	009b      	lsls	r3, r3, #2
     91e:	4413      	add	r3, r2
     920:	005b      	lsls	r3, r3, #1
     922:	461a      	mov	r2, r3
     924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     926:	1a9b      	subs	r3, r3, r2
     928:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     92a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     92c:	3306      	adds	r3, #6
     92e:	091a      	lsrs	r2, r3, #4
     930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     932:	4413      	add	r3, r2
     934:	f04f 0400 	mov.w	r4, #0
    }
}
     938:	4618      	mov	r0, r3
     93a:	4621      	mov	r1, r4
     93c:	3758      	adds	r7, #88	; 0x58
     93e:	46bd      	mov	sp, r7
     940:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     944:	4770      	bx	lr

00000946 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     946:	b590      	push	{r4, r7, lr}
     948:	b085      	sub	sp, #20
     94a:	af00      	add	r7, sp, #0
     94c:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     950:	683a      	ldr	r2, [r7, #0]
     952:	687b      	ldr	r3, [r7, #4]
     954:	4313      	orrs	r3, r2
     956:	2b00      	cmp	r3, #0
     958:	bf0c      	ite	eq
     95a:	2301      	moveq	r3, #1
     95c:	2300      	movne	r3, #0
     95e:	b2db      	uxtb	r3, r3
     960:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     962:	e008      	b.n	976 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     964:	e9d7 0100 	ldrd	r0, r1, [r7]
     968:	f7ff ff0e 	bl	788 <divu64_10>
     96c:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     970:	68fb      	ldr	r3, [r7, #12]
     972:	3301      	adds	r3, #1
     974:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
     976:	e897 0018 	ldmia.w	r7, {r3, r4}
     97a:	4323      	orrs	r3, r4
     97c:	d1f2      	bne.n	964 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
     97e:	68fb      	ldr	r3, [r7, #12]
}
     980:	4618      	mov	r0, r3
     982:	3714      	adds	r7, #20
     984:	46bd      	mov	sp, r7
     986:	bd90      	pop	{r4, r7, pc}

00000988 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     988:	b590      	push	{r4, r7, lr}
     98a:	b083      	sub	sp, #12
     98c:	af00      	add	r7, sp, #0
     98e:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     992:	e897 0018 	ldmia.w	r7, {r3, r4}
     996:	2b00      	cmp	r3, #0
     998:	f174 0300 	sbcs.w	r3, r4, #0
     99c:	da06      	bge.n	9ac <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     99e:	e897 0018 	ldmia.w	r7, {r3, r4}
     9a2:	425b      	negs	r3, r3
     9a4:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     9a8:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     9ac:	e897 0018 	ldmia.w	r7, {r3, r4}
     9b0:	4618      	mov	r0, r3
     9b2:	4621      	mov	r1, r4
     9b4:	f7ff ffc7 	bl	946 <ndigits_in_u64>
     9b8:	4603      	mov	r3, r0
}
     9ba:	4618      	mov	r0, r3
     9bc:	370c      	adds	r7, #12
     9be:	46bd      	mov	sp, r7
     9c0:	bd90      	pop	{r4, r7, pc}

000009c2 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     9c2:	b490      	push	{r4, r7}
     9c4:	b084      	sub	sp, #16
     9c6:	af00      	add	r7, sp, #0
     9c8:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     9cc:	6839      	ldr	r1, [r7, #0]
     9ce:	687a      	ldr	r2, [r7, #4]
     9d0:	430a      	orrs	r2, r1
     9d2:	2a00      	cmp	r2, #0
     9d4:	bf0c      	ite	eq
     9d6:	2201      	moveq	r2, #1
     9d8:	2200      	movne	r2, #0
     9da:	b2d2      	uxtb	r2, r2
     9dc:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     9de:	e00a      	b.n	9f6 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     9e0:	e897 0006 	ldmia.w	r7, {r1, r2}
     9e4:	090b      	lsrs	r3, r1, #4
     9e6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     9ea:	0914      	lsrs	r4, r2, #4
     9ec:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     9f0:	68fa      	ldr	r2, [r7, #12]
     9f2:	3201      	adds	r2, #1
     9f4:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
     9f6:	e897 0006 	ldmia.w	r7, {r1, r2}
     9fa:	430a      	orrs	r2, r1
     9fc:	d1f0      	bne.n	9e0 <ndigits_in_hex+0x1e>
    }

    return iDigits;
     9fe:	68fb      	ldr	r3, [r7, #12]
}
     a00:	4618      	mov	r0, r3
     a02:	3710      	adds	r7, #16
     a04:	46bd      	mov	sp, r7
     a06:	bc90      	pop	{r4, r7}
     a08:	4770      	bx	lr

00000a0a <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     a0a:	b480      	push	{r7}
     a0c:	b087      	sub	sp, #28
     a0e:	af00      	add	r7, sp, #0
     a10:	6078      	str	r0, [r7, #4]
     a12:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     a14:	2300      	movs	r3, #0
     a16:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     a18:	2300      	movs	r3, #0
     a1a:	613b      	str	r3, [r7, #16]
     a1c:	2300      	movs	r3, #0
     a1e:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     a20:	687b      	ldr	r3, [r7, #4]
     a22:	781b      	ldrb	r3, [r3, #0]
     a24:	2b2d      	cmp	r3, #45	; 0x2d
     a26:	d11b      	bne.n	a60 <decstr_to_int+0x56>
    {
        bNeg = true;
     a28:	2301      	movs	r3, #1
     a2a:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     a2c:	687b      	ldr	r3, [r7, #4]
     a2e:	3301      	adds	r3, #1
     a30:	607b      	str	r3, [r7, #4]
        uCnt++;
     a32:	68fb      	ldr	r3, [r7, #12]
     a34:	3301      	adds	r3, #1
     a36:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     a38:	e012      	b.n	a60 <decstr_to_int+0x56>
    {
        ++uCnt;
     a3a:	68fb      	ldr	r3, [r7, #12]
     a3c:	3301      	adds	r3, #1
     a3e:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     a40:	693a      	ldr	r2, [r7, #16]
     a42:	4613      	mov	r3, r2
     a44:	009b      	lsls	r3, r3, #2
     a46:	4413      	add	r3, r2
     a48:	005b      	lsls	r3, r3, #1
     a4a:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     a4c:	687b      	ldr	r3, [r7, #4]
     a4e:	781b      	ldrb	r3, [r3, #0]
     a50:	461a      	mov	r2, r3
     a52:	693b      	ldr	r3, [r7, #16]
     a54:	4413      	add	r3, r2
     a56:	3b30      	subs	r3, #48	; 0x30
     a58:	613b      	str	r3, [r7, #16]
        pcStr++;
     a5a:	687b      	ldr	r3, [r7, #4]
     a5c:	3301      	adds	r3, #1
     a5e:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     a60:	687b      	ldr	r3, [r7, #4]
     a62:	781b      	ldrb	r3, [r3, #0]
     a64:	2b2f      	cmp	r3, #47	; 0x2f
     a66:	d903      	bls.n	a70 <decstr_to_int+0x66>
     a68:	687b      	ldr	r3, [r7, #4]
     a6a:	781b      	ldrb	r3, [r3, #0]
     a6c:	2b39      	cmp	r3, #57	; 0x39
     a6e:	d9e4      	bls.n	a3a <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
     a70:	683b      	ldr	r3, [r7, #0]
     a72:	2b00      	cmp	r3, #0
     a74:	d002      	beq.n	a7c <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     a76:	683b      	ldr	r3, [r7, #0]
     a78:	68fa      	ldr	r2, [r7, #12]
     a7a:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     a7c:	7dfb      	ldrb	r3, [r7, #23]
     a7e:	2b00      	cmp	r3, #0
     a80:	d002      	beq.n	a88 <decstr_to_int+0x7e>
     a82:	693b      	ldr	r3, [r7, #16]
     a84:	425b      	negs	r3, r3
     a86:	e000      	b.n	a8a <decstr_to_int+0x80>
     a88:	693b      	ldr	r3, [r7, #16]
}
     a8a:	4618      	mov	r0, r3
     a8c:	371c      	adds	r7, #28
     a8e:	46bd      	mov	sp, r7
     a90:	f85d 7b04 	ldr.w	r7, [sp], #4
     a94:	4770      	bx	lr

00000a96 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     a96:	b590      	push	{r4, r7, lr}
     a98:	b091      	sub	sp, #68	; 0x44
     a9a:	af00      	add	r7, sp, #0
     a9c:	e9c7 0102 	strd	r0, r1, [r7, #8]
     aa0:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     aa2:	2300      	movs	r3, #0
     aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
     aa6:	2300      	movs	r3, #0
     aa8:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     aaa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     aae:	f7ff fe6b 	bl	788 <divu64_10>
     ab2:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     ab6:	68b9      	ldr	r1, [r7, #8]
     ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     aba:	4613      	mov	r3, r2
     abc:	009b      	lsls	r3, r3, #2
     abe:	4413      	add	r3, r2
     ac0:	005b      	lsls	r3, r3, #1
     ac2:	1acb      	subs	r3, r1, r3
     ac4:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ac8:	1c5a      	adds	r2, r3, #1
     aca:	63fa      	str	r2, [r7, #60]	; 0x3c
     acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     ace:	b2d2      	uxtb	r2, r2
     ad0:	3230      	adds	r2, #48	; 0x30
     ad2:	b2d2      	uxtb	r2, r2
     ad4:	f107 0140 	add.w	r1, r7, #64	; 0x40
     ad8:	440b      	add	r3, r1
     ada:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     ade:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     ae2:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     ae6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     aea:	4323      	orrs	r3, r4
     aec:	d1dd      	bne.n	aaa <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     af0:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     af2:	687b      	ldr	r3, [r7, #4]
     af4:	2b00      	cmp	r3, #0
     af6:	d011      	beq.n	b1c <uint64_to_str+0x86>
    {
        while ( ix-- )
     af8:	e008      	b.n	b0c <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     afa:	687b      	ldr	r3, [r7, #4]
     afc:	1c5a      	adds	r2, r3, #1
     afe:	607a      	str	r2, [r7, #4]
     b00:	f107 0110 	add.w	r1, r7, #16
     b04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     b06:	440a      	add	r2, r1
     b08:	7812      	ldrb	r2, [r2, #0]
     b0a:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
     b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b0e:	1e5a      	subs	r2, r3, #1
     b10:	63fa      	str	r2, [r7, #60]	; 0x3c
     b12:	2b00      	cmp	r3, #0
     b14:	d1f1      	bne.n	afa <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     b16:	687b      	ldr	r3, [r7, #4]
     b18:	2200      	movs	r2, #0
     b1a:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     b1e:	4618      	mov	r0, r3
     b20:	3744      	adds	r7, #68	; 0x44
     b22:	46bd      	mov	sp, r7
     b24:	bd90      	pop	{r4, r7, pc}

00000b26 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     b26:	b4b0      	push	{r4, r5, r7}
     b28:	b08d      	sub	sp, #52	; 0x34
     b2a:	af00      	add	r7, sp, #0
     b2c:	e9c7 0102 	strd	r0, r1, [r7, #8]
     b30:	607a      	str	r2, [r7, #4]
     b32:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     b34:	2300      	movs	r3, #0
     b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     b38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     b3c:	4313      	orrs	r3, r2
     b3e:	d131      	bne.n	ba4 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     b42:	1c5a      	adds	r2, r3, #1
     b44:	62fa      	str	r2, [r7, #44]	; 0x2c
     b46:	f107 0230 	add.w	r2, r7, #48	; 0x30
     b4a:	4413      	add	r3, r2
     b4c:	2230      	movs	r2, #48	; 0x30
     b4e:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     b52:	e027      	b.n	ba4 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     b54:	7a3b      	ldrb	r3, [r7, #8]
     b56:	f003 030f 	and.w	r3, r3, #15
     b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     b5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     b62:	2b09      	cmp	r3, #9
     b64:	d90a      	bls.n	b7c <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     b66:	78fb      	ldrb	r3, [r7, #3]
     b68:	2b00      	cmp	r3, #0
     b6a:	d001      	beq.n	b70 <uint64_to_hexstr+0x4a>
     b6c:	2227      	movs	r2, #39	; 0x27
     b6e:	e000      	b.n	b72 <uint64_to_hexstr+0x4c>
     b70:	2207      	movs	r2, #7
     b72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     b76:	4413      	add	r3, r2
     b78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     b7e:	1c5a      	adds	r2, r3, #1
     b80:	62fa      	str	r2, [r7, #44]	; 0x2c
     b82:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     b86:	3230      	adds	r2, #48	; 0x30
     b88:	b2d2      	uxtb	r2, r2
     b8a:	f107 0130 	add.w	r1, r7, #48	; 0x30
     b8e:	440b      	add	r3, r1
     b90:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     b94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     b98:	0914      	lsrs	r4, r2, #4
     b9a:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     b9e:	091d      	lsrs	r5, r3, #4
     ba0:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
     ba4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     ba8:	4313      	orrs	r3, r2
     baa:	d1d3      	bne.n	b54 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     bae:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     bb0:	687b      	ldr	r3, [r7, #4]
     bb2:	2b00      	cmp	r3, #0
     bb4:	d011      	beq.n	bda <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     bb6:	e008      	b.n	bca <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     bb8:	687b      	ldr	r3, [r7, #4]
     bba:	1c5a      	adds	r2, r3, #1
     bbc:	607a      	str	r2, [r7, #4]
     bbe:	f107 0110 	add.w	r1, r7, #16
     bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     bc4:	440a      	add	r2, r1
     bc6:	7812      	ldrb	r2, [r2, #0]
     bc8:	701a      	strb	r2, [r3, #0]
        while (ix--)
     bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     bcc:	1e5a      	subs	r2, r3, #1
     bce:	62fa      	str	r2, [r7, #44]	; 0x2c
     bd0:	2b00      	cmp	r3, #0
     bd2:	d1f1      	bne.n	bb8 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     bd4:	687b      	ldr	r3, [r7, #4]
     bd6:	2200      	movs	r2, #0
     bd8:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     bdc:	4618      	mov	r0, r3
     bde:	3734      	adds	r7, #52	; 0x34
     be0:	46bd      	mov	sp, r7
     be2:	bcb0      	pop	{r4, r5, r7}
     be4:	4770      	bx	lr

00000be6 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     be6:	b480      	push	{r7}
     be8:	b085      	sub	sp, #20
     bea:	af00      	add	r7, sp, #0
     bec:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     bee:	2300      	movs	r3, #0
     bf0:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     bf2:	687b      	ldr	r3, [r7, #4]
     bf4:	2b00      	cmp	r3, #0
     bf6:	d104      	bne.n	c02 <simple_strlen+0x1c>
    {
        return ui32RetVal;
     bf8:	68fb      	ldr	r3, [r7, #12]
     bfa:	e009      	b.n	c10 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     bfc:	68fb      	ldr	r3, [r7, #12]
     bfe:	3301      	adds	r3, #1
     c00:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
     c02:	687b      	ldr	r3, [r7, #4]
     c04:	1c5a      	adds	r2, r3, #1
     c06:	607a      	str	r2, [r7, #4]
     c08:	781b      	ldrb	r3, [r3, #0]
     c0a:	2b00      	cmp	r3, #0
     c0c:	d1f6      	bne.n	bfc <simple_strlen+0x16>
    }
    return ui32RetVal;
     c0e:	68fb      	ldr	r3, [r7, #12]
}
     c10:	4618      	mov	r0, r3
     c12:	3714      	adds	r7, #20
     c14:	46bd      	mov	sp, r7
     c16:	f85d 7b04 	ldr.w	r7, [sp], #4
     c1a:	4770      	bx	lr

00000c1c <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     c1c:	b480      	push	{r7}
     c1e:	b087      	sub	sp, #28
     c20:	af00      	add	r7, sp, #0
     c22:	60f8      	str	r0, [r7, #12]
     c24:	460b      	mov	r3, r1
     c26:	607a      	str	r2, [r7, #4]
     c28:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     c2a:	2300      	movs	r3, #0
     c2c:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     c2e:	687b      	ldr	r3, [r7, #4]
     c30:	2b00      	cmp	r3, #0
     c32:	dc0c      	bgt.n	c4e <padbuffer+0x32>
    {
        return i32Cnt;
     c34:	697b      	ldr	r3, [r7, #20]
     c36:	e010      	b.n	c5a <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     c38:	68fb      	ldr	r3, [r7, #12]
     c3a:	2b00      	cmp	r3, #0
     c3c:	d004      	beq.n	c48 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     c3e:	68fb      	ldr	r3, [r7, #12]
     c40:	1c5a      	adds	r2, r3, #1
     c42:	60fa      	str	r2, [r7, #12]
     c44:	7afa      	ldrb	r2, [r7, #11]
     c46:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     c48:	697b      	ldr	r3, [r7, #20]
     c4a:	3301      	adds	r3, #1
     c4c:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
     c4e:	687b      	ldr	r3, [r7, #4]
     c50:	1e5a      	subs	r2, r3, #1
     c52:	607a      	str	r2, [r7, #4]
     c54:	2b00      	cmp	r3, #0
     c56:	d1ef      	bne.n	c38 <padbuffer+0x1c>
    }

    return i32Cnt;
     c58:	697b      	ldr	r3, [r7, #20]
}
     c5a:	4618      	mov	r0, r3
     c5c:	371c      	adds	r7, #28
     c5e:	46bd      	mov	sp, r7
     c60:	f85d 7b04 	ldr.w	r7, [sp], #4
     c64:	4770      	bx	lr
	...

00000c68 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     c68:	b590      	push	{r4, r7, lr}
     c6a:	b08f      	sub	sp, #60	; 0x3c
     c6c:	af00      	add	r7, sp, #0
     c6e:	60f8      	str	r0, [r7, #12]
     c70:	60b9      	str	r1, [r7, #8]
     c72:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
     c74:	68bb      	ldr	r3, [r7, #8]
     c76:	681b      	ldr	r3, [r3, #0]
     c78:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
     c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     c7c:	2b03      	cmp	r3, #3
     c7e:	dc02      	bgt.n	c86 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     c80:	f06f 0302 	mvn.w	r3, #2
     c84:	e0e7      	b.n	e56 <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
     c86:	edd7 7a03 	vldr	s15, [r7, #12]
     c8a:	eef5 7a40 	vcmp.f32	s15, #0.0
     c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     c92:	d104      	bne.n	c9e <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     c94:	68bb      	ldr	r3, [r7, #8]
     c96:	4a72      	ldr	r2, [pc, #456]	; (e60 <ftoa+0x1f8>)
     c98:	601a      	str	r2, [r3, #0]
        return 3;
     c9a:	2303      	movs	r3, #3
     c9c:	e0db      	b.n	e56 <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
     c9e:	68bb      	ldr	r3, [r7, #8]
     ca0:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
     ca2:	68fb      	ldr	r3, [r7, #12]
     ca4:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     ca6:	693b      	ldr	r3, [r7, #16]
     ca8:	15db      	asrs	r3, r3, #23
     caa:	b2db      	uxtb	r3, r3
     cac:	3b7f      	subs	r3, #127	; 0x7f
     cae:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     cb0:	693b      	ldr	r3, [r7, #16]
     cb2:	f3c3 0316 	ubfx	r3, r3, #0, #23
     cb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     cba:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
     cbc:	2300      	movs	r3, #0
     cbe:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     cc0:	2300      	movs	r3, #0
     cc2:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     cc4:	69fb      	ldr	r3, [r7, #28]
     cc6:	2b1e      	cmp	r3, #30
     cc8:	dd02      	ble.n	cd0 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     cca:	f06f 0301 	mvn.w	r3, #1
     cce:	e0c2      	b.n	e56 <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
     cd0:	69fb      	ldr	r3, [r7, #28]
     cd2:	f113 0f17 	cmn.w	r3, #23
     cd6:	da02      	bge.n	cde <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     cd8:	f04f 33ff 	mov.w	r3, #4294967295
     cdc:	e0bb      	b.n	e56 <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
     cde:	69fb      	ldr	r3, [r7, #28]
     ce0:	2b16      	cmp	r3, #22
     ce2:	dd06      	ble.n	cf2 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
     ce4:	69fb      	ldr	r3, [r7, #28]
     ce6:	3b17      	subs	r3, #23
     ce8:	69ba      	ldr	r2, [r7, #24]
     cea:	fa02 f303 	lsl.w	r3, r2, r3
     cee:	637b      	str	r3, [r7, #52]	; 0x34
     cf0:	e01a      	b.n	d28 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     cf2:	69fb      	ldr	r3, [r7, #28]
     cf4:	2b00      	cmp	r3, #0
     cf6:	db0f      	blt.n	d18 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
     cf8:	69fb      	ldr	r3, [r7, #28]
     cfa:	f1c3 0317 	rsb	r3, r3, #23
     cfe:	69ba      	ldr	r2, [r7, #24]
     d00:	fa42 f303 	asr.w	r3, r2, r3
     d04:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
     d06:	69fb      	ldr	r3, [r7, #28]
     d08:	3301      	adds	r3, #1
     d0a:	69ba      	ldr	r2, [r7, #24]
     d0c:	fa02 f303 	lsl.w	r3, r2, r3
     d10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     d14:	633b      	str	r3, [r7, #48]	; 0x30
     d16:	e007      	b.n	d28 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
     d18:	69bb      	ldr	r3, [r7, #24]
     d1a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     d1e:	69fb      	ldr	r3, [r7, #28]
     d20:	43db      	mvns	r3, r3
     d22:	fa42 f303 	asr.w	r3, r2, r3
     d26:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     d28:	693b      	ldr	r3, [r7, #16]
     d2a:	2b00      	cmp	r3, #0
     d2c:	da04      	bge.n	d38 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     d2e:	68bb      	ldr	r3, [r7, #8]
     d30:	1c5a      	adds	r2, r3, #1
     d32:	60ba      	str	r2, [r7, #8]
     d34:	222d      	movs	r2, #45	; 0x2d
     d36:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d3a:	2b00      	cmp	r3, #0
     d3c:	d105      	bne.n	d4a <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     d3e:	68bb      	ldr	r3, [r7, #8]
     d40:	1c5a      	adds	r2, r3, #1
     d42:	60ba      	str	r2, [r7, #8]
     d44:	2230      	movs	r2, #48	; 0x30
     d46:	701a      	strb	r2, [r3, #0]
     d48:	e021      	b.n	d8e <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d4c:	2b00      	cmp	r3, #0
     d4e:	dd08      	ble.n	d62 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d52:	ea4f 74e3 	mov.w	r4, r3, asr #31
     d56:	68ba      	ldr	r2, [r7, #8]
     d58:	4618      	mov	r0, r3
     d5a:	4621      	mov	r1, r4
     d5c:	f7ff fe9b 	bl	a96 <uint64_to_str>
     d60:	e011      	b.n	d86 <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     d62:	68bb      	ldr	r3, [r7, #8]
     d64:	1c5a      	adds	r2, r3, #1
     d66:	60ba      	str	r2, [r7, #8]
     d68:	222d      	movs	r2, #45	; 0x2d
     d6a:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d6e:	425b      	negs	r3, r3
     d70:	ea4f 74e3 	mov.w	r4, r3, asr #31
     d74:	68ba      	ldr	r2, [r7, #8]
     d76:	4618      	mov	r0, r3
     d78:	4621      	mov	r1, r4
     d7a:	f7ff fe8c 	bl	a96 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     d7e:	e002      	b.n	d86 <ftoa+0x11e>
        {
            pcBuf++;
     d80:	68bb      	ldr	r3, [r7, #8]
     d82:	3301      	adds	r3, #1
     d84:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
     d86:	68bb      	ldr	r3, [r7, #8]
     d88:	781b      	ldrb	r3, [r3, #0]
     d8a:	2b00      	cmp	r3, #0
     d8c:	d1f8      	bne.n	d80 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     d8e:	68bb      	ldr	r3, [r7, #8]
     d90:	1c5a      	adds	r2, r3, #1
     d92:	60ba      	str	r2, [r7, #8]
     d94:	222e      	movs	r2, #46	; 0x2e
     d96:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     d9a:	2b00      	cmp	r3, #0
     d9c:	d105      	bne.n	daa <ftoa+0x142>
    {
        *pcBuf++ = '0';
     d9e:	68bb      	ldr	r3, [r7, #8]
     da0:	1c5a      	adds	r2, r3, #1
     da2:	60ba      	str	r2, [r7, #8]
     da4:	2230      	movs	r2, #48	; 0x30
     da6:	701a      	strb	r2, [r3, #0]
     da8:	e04f      	b.n	e4a <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     daa:	68ba      	ldr	r2, [r7, #8]
     dac:	6a3b      	ldr	r3, [r7, #32]
     dae:	1ad3      	subs	r3, r2, r3
     db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     db2:	1ad3      	subs	r3, r2, r3
     db4:	3b01      	subs	r3, #1
     db6:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     db8:	697a      	ldr	r2, [r7, #20]
     dba:	687b      	ldr	r3, [r7, #4]
     dbc:	4293      	cmp	r3, r2
     dbe:	bfa8      	it	ge
     dc0:	4613      	movge	r3, r2
     dc2:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
     dc4:	2300      	movs	r3, #0
     dc6:	62bb      	str	r3, [r7, #40]	; 0x28
     dc8:	e015      	b.n	df6 <ftoa+0x18e>
        {
            i32FracPart *= 10;
     dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     dcc:	4613      	mov	r3, r2
     dce:	009b      	lsls	r3, r3, #2
     dd0:	4413      	add	r3, r2
     dd2:	005b      	lsls	r3, r3, #1
     dd4:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     dd6:	68bb      	ldr	r3, [r7, #8]
     dd8:	1c5a      	adds	r2, r3, #1
     dda:	60ba      	str	r2, [r7, #8]
     ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     dde:	1612      	asrs	r2, r2, #24
     de0:	b2d2      	uxtb	r2, r2
     de2:	3230      	adds	r2, #48	; 0x30
     de4:	b2d2      	uxtb	r2, r2
     de6:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     dea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     dee:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
     df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
     df2:	3301      	adds	r3, #1
     df4:	62bb      	str	r3, [r7, #40]	; 0x28
     df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
     df8:	697b      	ldr	r3, [r7, #20]
     dfa:	429a      	cmp	r2, r3
     dfc:	dbe5      	blt.n	dca <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
     dfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     e00:	4613      	mov	r3, r2
     e02:	009b      	lsls	r3, r3, #2
     e04:	4413      	add	r3, r2
     e06:	005b      	lsls	r3, r3, #1
     e08:	161b      	asrs	r3, r3, #24
     e0a:	2b04      	cmp	r3, #4
     e0c:	dd1d      	ble.n	e4a <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
     e0e:	68bb      	ldr	r3, [r7, #8]
     e10:	3b01      	subs	r3, #1
     e12:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     e14:	e015      	b.n	e42 <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
     e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e18:	781b      	ldrb	r3, [r3, #0]
     e1a:	2b2e      	cmp	r3, #46	; 0x2e
     e1c:	d00e      	beq.n	e3c <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
     e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e20:	781b      	ldrb	r3, [r3, #0]
     e22:	2b39      	cmp	r3, #57	; 0x39
     e24:	d103      	bne.n	e2e <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
     e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e28:	2230      	movs	r2, #48	; 0x30
     e2a:	701a      	strb	r2, [r3, #0]
     e2c:	e006      	b.n	e3c <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
     e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e30:	781b      	ldrb	r3, [r3, #0]
     e32:	3301      	adds	r3, #1
     e34:	b2da      	uxtb	r2, r3
     e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e38:	701a      	strb	r2, [r3, #0]
                    break;
     e3a:	e006      	b.n	e4a <ftoa+0x1e2>
                }
                pcBuftmp--;
     e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e3e:	3b01      	subs	r3, #1
     e40:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     e42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     e44:	6a3b      	ldr	r3, [r7, #32]
     e46:	429a      	cmp	r2, r3
     e48:	d2e5      	bcs.n	e16 <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     e4a:	68bb      	ldr	r3, [r7, #8]
     e4c:	2200      	movs	r2, #0
     e4e:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     e50:	68ba      	ldr	r2, [r7, #8]
     e52:	6a3b      	ldr	r3, [r7, #32]
     e54:	1ad3      	subs	r3, r2, r3
} // ftoa()
     e56:	4618      	mov	r0, r3
     e58:	373c      	adds	r7, #60	; 0x3c
     e5a:	46bd      	mov	sp, r7
     e5c:	bd90      	pop	{r4, r7, pc}
     e5e:	bf00      	nop
     e60:	00302e30 	.word	0x00302e30

00000e64 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     e64:	b590      	push	{r4, r7, lr}
     e66:	b095      	sub	sp, #84	; 0x54
     e68:	af00      	add	r7, sp, #0
     e6a:	60f8      	str	r0, [r7, #12]
     e6c:	60b9      	str	r1, [r7, #8]
     e6e:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     e70:	2300      	movs	r3, #0
     e72:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     e74:	2300      	movs	r3, #0
     e76:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     e78:	e2e3      	b.n	1442 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     e7a:	2306      	movs	r3, #6
     e7c:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     e7e:	68bb      	ldr	r3, [r7, #8]
     e80:	781b      	ldrb	r3, [r3, #0]
     e82:	2b25      	cmp	r3, #37	; 0x25
     e84:	d01f      	beq.n	ec6 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     e86:	68fb      	ldr	r3, [r7, #12]
     e88:	2b00      	cmp	r3, #0
     e8a:	d015      	beq.n	eb8 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     e8c:	68bb      	ldr	r3, [r7, #8]
     e8e:	781b      	ldrb	r3, [r3, #0]
     e90:	2b0a      	cmp	r3, #10
     e92:	d10b      	bne.n	eac <am_util_stdio_vsprintf+0x48>
     e94:	4bb1      	ldr	r3, [pc, #708]	; (115c <am_util_stdio_vsprintf+0x2f8>)
     e96:	781b      	ldrb	r3, [r3, #0]
     e98:	2b00      	cmp	r3, #0
     e9a:	d007      	beq.n	eac <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     e9c:	68fb      	ldr	r3, [r7, #12]
     e9e:	1c5a      	adds	r2, r3, #1
     ea0:	60fa      	str	r2, [r7, #12]
     ea2:	220d      	movs	r2, #13
     ea4:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ea8:	3301      	adds	r3, #1
     eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     eac:	68fb      	ldr	r3, [r7, #12]
     eae:	1c5a      	adds	r2, r3, #1
     eb0:	60fa      	str	r2, [r7, #12]
     eb2:	68ba      	ldr	r2, [r7, #8]
     eb4:	7812      	ldrb	r2, [r2, #0]
     eb6:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     eb8:	68bb      	ldr	r3, [r7, #8]
     eba:	3301      	adds	r3, #1
     ebc:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ec0:	3301      	adds	r3, #1
     ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     ec4:	e2bd      	b.n	1442 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     ec6:	68bb      	ldr	r3, [r7, #8]
     ec8:	3301      	adds	r3, #1
     eca:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     ecc:	2300      	movs	r3, #0
     ece:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     ed2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     ed6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     eda:	2320      	movs	r3, #32
     edc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     ee0:	68bb      	ldr	r3, [r7, #8]
     ee2:	781b      	ldrb	r3, [r3, #0]
     ee4:	2b30      	cmp	r3, #48	; 0x30
     ee6:	d105      	bne.n	ef4 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     ee8:	2330      	movs	r3, #48	; 0x30
     eea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     eee:	68bb      	ldr	r3, [r7, #8]
     ef0:	3301      	adds	r3, #1
     ef2:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     ef4:	f107 0310 	add.w	r3, r7, #16
     ef8:	4619      	mov	r1, r3
     efa:	68b8      	ldr	r0, [r7, #8]
     efc:	f7ff fd85 	bl	a0a <decstr_to_int>
     f00:	4603      	mov	r3, r0
     f02:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     f04:	693b      	ldr	r3, [r7, #16]
     f06:	68ba      	ldr	r2, [r7, #8]
     f08:	4413      	add	r3, r2
     f0a:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     f0c:	68bb      	ldr	r3, [r7, #8]
     f0e:	781b      	ldrb	r3, [r3, #0]
     f10:	2b73      	cmp	r3, #115	; 0x73
     f12:	d005      	beq.n	f20 <am_util_stdio_vsprintf+0xbc>
     f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f16:	2b00      	cmp	r3, #0
     f18:	da02      	bge.n	f20 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f1c:	425b      	negs	r3, r3
     f1e:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     f20:	68bb      	ldr	r3, [r7, #8]
     f22:	781b      	ldrb	r3, [r3, #0]
     f24:	2b2e      	cmp	r3, #46	; 0x2e
     f26:	d10e      	bne.n	f46 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     f28:	68bb      	ldr	r3, [r7, #8]
     f2a:	3301      	adds	r3, #1
     f2c:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     f2e:	f107 0310 	add.w	r3, r7, #16
     f32:	4619      	mov	r1, r3
     f34:	68b8      	ldr	r0, [r7, #8]
     f36:	f7ff fd68 	bl	a0a <decstr_to_int>
     f3a:	4603      	mov	r3, r0
     f3c:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     f3e:	693b      	ldr	r3, [r7, #16]
     f40:	68ba      	ldr	r2, [r7, #8]
     f42:	4413      	add	r3, r2
     f44:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     f46:	68bb      	ldr	r3, [r7, #8]
     f48:	781b      	ldrb	r3, [r3, #0]
     f4a:	2b6c      	cmp	r3, #108	; 0x6c
     f4c:	d10c      	bne.n	f68 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     f4e:	68bb      	ldr	r3, [r7, #8]
     f50:	3301      	adds	r3, #1
     f52:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     f54:	68bb      	ldr	r3, [r7, #8]
     f56:	781b      	ldrb	r3, [r3, #0]
     f58:	2b6c      	cmp	r3, #108	; 0x6c
     f5a:	d105      	bne.n	f68 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     f5c:	68bb      	ldr	r3, [r7, #8]
     f5e:	3301      	adds	r3, #1
     f60:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     f62:	2301      	movs	r3, #1
     f64:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     f68:	68bb      	ldr	r3, [r7, #8]
     f6a:	781b      	ldrb	r3, [r3, #0]
     f6c:	3b46      	subs	r3, #70	; 0x46
     f6e:	2b32      	cmp	r3, #50	; 0x32
     f70:	f200 8254 	bhi.w	141c <am_util_stdio_vsprintf+0x5b8>
     f74:	a201      	add	r2, pc, #4	; (adr r2, f7c <am_util_stdio_vsprintf+0x118>)
     f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     f7a:	bf00      	nop
     f7c:	000013a7 	.word	0x000013a7
     f80:	0000141d 	.word	0x0000141d
     f84:	0000141d 	.word	0x0000141d
     f88:	0000141d 	.word	0x0000141d
     f8c:	0000141d 	.word	0x0000141d
     f90:	0000141d 	.word	0x0000141d
     f94:	0000141d 	.word	0x0000141d
     f98:	0000141d 	.word	0x0000141d
     f9c:	0000141d 	.word	0x0000141d
     fa0:	0000141d 	.word	0x0000141d
     fa4:	0000141d 	.word	0x0000141d
     fa8:	0000141d 	.word	0x0000141d
     fac:	0000141d 	.word	0x0000141d
     fb0:	0000141d 	.word	0x0000141d
     fb4:	0000141d 	.word	0x0000141d
     fb8:	0000141d 	.word	0x0000141d
     fbc:	0000141d 	.word	0x0000141d
     fc0:	0000141d 	.word	0x0000141d
     fc4:	00001143 	.word	0x00001143
     fc8:	0000141d 	.word	0x0000141d
     fcc:	0000141d 	.word	0x0000141d
     fd0:	0000141d 	.word	0x0000141d
     fd4:	0000141d 	.word	0x0000141d
     fd8:	0000141d 	.word	0x0000141d
     fdc:	0000141d 	.word	0x0000141d
     fe0:	0000141d 	.word	0x0000141d
     fe4:	0000141d 	.word	0x0000141d
     fe8:	0000141d 	.word	0x0000141d
     fec:	0000141d 	.word	0x0000141d
     ff0:	00001049 	.word	0x00001049
     ff4:	0000126f 	.word	0x0000126f
     ff8:	0000141d 	.word	0x0000141d
     ffc:	000013a7 	.word	0x000013a7
    1000:	0000141d 	.word	0x0000141d
    1004:	0000141d 	.word	0x0000141d
    1008:	0000126f 	.word	0x0000126f
    100c:	0000141d 	.word	0x0000141d
    1010:	0000141d 	.word	0x0000141d
    1014:	0000141d 	.word	0x0000141d
    1018:	0000141d 	.word	0x0000141d
    101c:	0000141d 	.word	0x0000141d
    1020:	0000141d 	.word	0x0000141d
    1024:	0000141d 	.word	0x0000141d
    1028:	0000141d 	.word	0x0000141d
    102c:	0000141d 	.word	0x0000141d
    1030:	0000106f 	.word	0x0000106f
    1034:	0000141d 	.word	0x0000141d
    1038:	000011dd 	.word	0x000011dd
    103c:	0000141d 	.word	0x0000141d
    1040:	0000141d 	.word	0x0000141d
    1044:	0000113d 	.word	0x0000113d
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    1048:	687b      	ldr	r3, [r7, #4]
    104a:	1d1a      	adds	r2, r3, #4
    104c:	607a      	str	r2, [r7, #4]
    104e:	681b      	ldr	r3, [r3, #0]
    1050:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    1054:	68fb      	ldr	r3, [r7, #12]
    1056:	2b00      	cmp	r3, #0
    1058:	d005      	beq.n	1066 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    105a:	68fb      	ldr	r3, [r7, #12]
    105c:	1c5a      	adds	r2, r3, #1
    105e:	60fa      	str	r2, [r7, #12]
    1060:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    1064:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    1066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1068:	3301      	adds	r3, #1
    106a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    106c:	e1e6      	b.n	143c <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    106e:	687b      	ldr	r3, [r7, #4]
    1070:	1d1a      	adds	r2, r3, #4
    1072:	607a      	str	r2, [r7, #4]
    1074:	681b      	ldr	r3, [r3, #0]
    1076:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    1078:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    107a:	f7ff fdb4 	bl	be6 <simple_strlen>
    107e:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    1080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1082:	2b00      	cmp	r3, #0
    1084:	dd2e      	ble.n	10e4 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    1086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    108a:	429a      	cmp	r2, r3
    108c:	d22a      	bcs.n	10e4 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    108e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1092:	1ad3      	subs	r3, r2, r3
    1094:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1096:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    109a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    109c:	4619      	mov	r1, r3
    109e:	68f8      	ldr	r0, [r7, #12]
    10a0:	f7ff fdbc 	bl	c1c <padbuffer>
    10a4:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    10a6:	68fb      	ldr	r3, [r7, #12]
    10a8:	2b00      	cmp	r3, #0
    10aa:	d001      	beq.n	10b0 <am_util_stdio_vsprintf+0x24c>
    10ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10ae:	e000      	b.n	10b2 <am_util_stdio_vsprintf+0x24e>
    10b0:	2300      	movs	r3, #0
    10b2:	68fa      	ldr	r2, [r7, #12]
    10b4:	4413      	add	r3, r2
    10b6:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    10b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10bc:	4413      	add	r3, r2
    10be:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    10c0:	2300      	movs	r3, #0
    10c2:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    10c4:	e00e      	b.n	10e4 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    10c6:	68fb      	ldr	r3, [r7, #12]
    10c8:	2b00      	cmp	r3, #0
    10ca:	d005      	beq.n	10d8 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    10cc:	68fb      	ldr	r3, [r7, #12]
    10ce:	1c5a      	adds	r2, r3, #1
    10d0:	60fa      	str	r2, [r7, #12]
    10d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    10d4:	7812      	ldrb	r2, [r2, #0]
    10d6:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    10d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    10da:	3301      	adds	r3, #1
    10dc:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    10de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10e0:	3301      	adds	r3, #1
    10e2:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    10e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    10e6:	781b      	ldrb	r3, [r3, #0]
    10e8:	2b00      	cmp	r3, #0
    10ea:	d1ec      	bne.n	10c6 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    10ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10ee:	2b00      	cmp	r3, #0
    10f0:	f000 81a1 	beq.w	1436 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    10f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10f6:	425b      	negs	r3, r3
    10f8:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    10fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    10fe:	429a      	cmp	r2, r3
    1100:	f080 8199 	bcs.w	1436 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1104:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1108:	1ad3      	subs	r3, r2, r3
    110a:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    110c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1110:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1112:	4619      	mov	r1, r3
    1114:	68f8      	ldr	r0, [r7, #12]
    1116:	f7ff fd81 	bl	c1c <padbuffer>
    111a:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    111c:	68fb      	ldr	r3, [r7, #12]
    111e:	2b00      	cmp	r3, #0
    1120:	d001      	beq.n	1126 <am_util_stdio_vsprintf+0x2c2>
    1122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1124:	e000      	b.n	1128 <am_util_stdio_vsprintf+0x2c4>
    1126:	2300      	movs	r3, #0
    1128:	68fa      	ldr	r2, [r7, #12]
    112a:	4413      	add	r3, r2
    112c:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    112e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1130:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1132:	4413      	add	r3, r2
    1134:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1136:	2300      	movs	r3, #0
    1138:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    113a:	e17c      	b.n	1436 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    113c:	2301      	movs	r3, #1
    113e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1142:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1146:	2b00      	cmp	r3, #0
    1148:	d00a      	beq.n	1160 <am_util_stdio_vsprintf+0x2fc>
    114a:	687b      	ldr	r3, [r7, #4]
    114c:	3307      	adds	r3, #7
    114e:	f023 0307 	bic.w	r3, r3, #7
    1152:	f103 0208 	add.w	r2, r3, #8
    1156:	607a      	str	r2, [r7, #4]
    1158:	cb18      	ldmia	r3, {r3, r4}
    115a:	e007      	b.n	116c <am_util_stdio_vsprintf+0x308>
    115c:	1000114c 	.word	0x1000114c
                                      va_arg(pArgs, uint32_t);
    1160:	687b      	ldr	r3, [r7, #4]
    1162:	1d1a      	adds	r2, r3, #4
    1164:	607a      	str	r2, [r7, #4]
    1166:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    1168:	f04f 0400 	mov.w	r4, #0
    116c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    1170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1172:	2b00      	cmp	r3, #0
    1174:	d01e      	beq.n	11b4 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    1176:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    117a:	f7ff fc22 	bl	9c2 <ndigits_in_hex>
    117e:	4602      	mov	r2, r0
    1180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1182:	1a9b      	subs	r3, r3, r2
    1184:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1186:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    118a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    118c:	4619      	mov	r1, r3
    118e:	68f8      	ldr	r0, [r7, #12]
    1190:	f7ff fd44 	bl	c1c <padbuffer>
    1194:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1196:	68fb      	ldr	r3, [r7, #12]
    1198:	2b00      	cmp	r3, #0
    119a:	d001      	beq.n	11a0 <am_util_stdio_vsprintf+0x33c>
    119c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    119e:	e000      	b.n	11a2 <am_util_stdio_vsprintf+0x33e>
    11a0:	2300      	movs	r3, #0
    11a2:	68fa      	ldr	r2, [r7, #12]
    11a4:	4413      	add	r3, r2
    11a6:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    11a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    11ac:	4413      	add	r3, r2
    11ae:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    11b0:	2300      	movs	r3, #0
    11b2:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    11b4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    11b8:	68fa      	ldr	r2, [r7, #12]
    11ba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    11be:	f7ff fcb2 	bl	b26 <uint64_to_hexstr>
    11c2:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    11c4:	68fb      	ldr	r3, [r7, #12]
    11c6:	2b00      	cmp	r3, #0
    11c8:	d003      	beq.n	11d2 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    11ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11cc:	68fa      	ldr	r2, [r7, #12]
    11ce:	4413      	add	r3, r2
    11d0:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    11d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    11d6:	4413      	add	r3, r2
    11d8:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    11da:	e12f      	b.n	143c <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    11dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    11e0:	2b00      	cmp	r3, #0
    11e2:	d008      	beq.n	11f6 <am_util_stdio_vsprintf+0x392>
    11e4:	687b      	ldr	r3, [r7, #4]
    11e6:	3307      	adds	r3, #7
    11e8:	f023 0307 	bic.w	r3, r3, #7
    11ec:	f103 0208 	add.w	r2, r3, #8
    11f0:	607a      	str	r2, [r7, #4]
    11f2:	cb18      	ldmia	r3, {r3, r4}
    11f4:	e005      	b.n	1202 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    11f6:	687b      	ldr	r3, [r7, #4]
    11f8:	1d1a      	adds	r2, r3, #4
    11fa:	607a      	str	r2, [r7, #4]
    11fc:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    11fe:	f04f 0400 	mov.w	r4, #0
    1202:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    1206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1208:	2b00      	cmp	r3, #0
    120a:	d01e      	beq.n	124a <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    120c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1210:	f7ff fb99 	bl	946 <ndigits_in_u64>
    1214:	4602      	mov	r2, r0
    1216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1218:	1a9b      	subs	r3, r3, r2
    121a:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    121c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1220:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1222:	4619      	mov	r1, r3
    1224:	68f8      	ldr	r0, [r7, #12]
    1226:	f7ff fcf9 	bl	c1c <padbuffer>
    122a:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    122c:	68fb      	ldr	r3, [r7, #12]
    122e:	2b00      	cmp	r3, #0
    1230:	d001      	beq.n	1236 <am_util_stdio_vsprintf+0x3d2>
    1232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1234:	e000      	b.n	1238 <am_util_stdio_vsprintf+0x3d4>
    1236:	2300      	movs	r3, #0
    1238:	68fa      	ldr	r2, [r7, #12]
    123a:	4413      	add	r3, r2
    123c:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    123e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1240:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1242:	4413      	add	r3, r2
    1244:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1246:	2300      	movs	r3, #0
    1248:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    124a:	68fa      	ldr	r2, [r7, #12]
    124c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1250:	f7ff fc21 	bl	a96 <uint64_to_str>
    1254:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1256:	68fb      	ldr	r3, [r7, #12]
    1258:	2b00      	cmp	r3, #0
    125a:	d003      	beq.n	1264 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    125c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    125e:	68fa      	ldr	r2, [r7, #12]
    1260:	4413      	add	r3, r2
    1262:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1266:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1268:	4413      	add	r3, r2
    126a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    126c:	e0e6      	b.n	143c <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    126e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1272:	2b00      	cmp	r3, #0
    1274:	d008      	beq.n	1288 <am_util_stdio_vsprintf+0x424>
    1276:	687b      	ldr	r3, [r7, #4]
    1278:	3307      	adds	r3, #7
    127a:	f023 0307 	bic.w	r3, r3, #7
    127e:	f103 0208 	add.w	r2, r3, #8
    1282:	607a      	str	r2, [r7, #4]
    1284:	cb18      	ldmia	r3, {r3, r4}
    1286:	e005      	b.n	1294 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    1288:	687b      	ldr	r3, [r7, #4]
    128a:	1d1a      	adds	r2, r3, #4
    128c:	607a      	str	r2, [r7, #4]
    128e:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1290:	ea4f 74e3 	mov.w	r4, r3, asr #31
    1294:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    1298:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    129c:	2b00      	cmp	r3, #0
    129e:	f174 0300 	sbcs.w	r3, r4, #0
    12a2:	da0a      	bge.n	12ba <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    12a4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    12a8:	425b      	negs	r3, r3
    12aa:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    12ae:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    12b2:	2301      	movs	r3, #1
    12b4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    12b8:	e006      	b.n	12c8 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    12ba:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    12be:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    12c2:	2300      	movs	r3, #0
    12c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    12c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12ca:	2b00      	cmp	r3, #0
    12cc:	d04a      	beq.n	1364 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    12ce:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    12d2:	4618      	mov	r0, r3
    12d4:	4621      	mov	r1, r4
    12d6:	f7ff fb57 	bl	988 <ndigits_in_i64>
    12da:	4602      	mov	r2, r0
    12dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12de:	1a9b      	subs	r3, r3, r2
    12e0:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    12e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    12e6:	2b00      	cmp	r3, #0
    12e8:	d011      	beq.n	130e <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    12ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12ec:	3b01      	subs	r3, #1
    12ee:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    12f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    12f4:	2b30      	cmp	r3, #48	; 0x30
    12f6:	d10a      	bne.n	130e <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    12f8:	68fb      	ldr	r3, [r7, #12]
    12fa:	2b00      	cmp	r3, #0
    12fc:	d004      	beq.n	1308 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    12fe:	68fb      	ldr	r3, [r7, #12]
    1300:	1c5a      	adds	r2, r3, #1
    1302:	60fa      	str	r2, [r7, #12]
    1304:	222d      	movs	r2, #45	; 0x2d
    1306:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    1308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    130a:	3301      	adds	r3, #1
    130c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    130e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1312:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1314:	4619      	mov	r1, r3
    1316:	68f8      	ldr	r0, [r7, #12]
    1318:	f7ff fc80 	bl	c1c <padbuffer>
    131c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    131e:	68fb      	ldr	r3, [r7, #12]
    1320:	2b00      	cmp	r3, #0
    1322:	d001      	beq.n	1328 <am_util_stdio_vsprintf+0x4c4>
    1324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1326:	e000      	b.n	132a <am_util_stdio_vsprintf+0x4c6>
    1328:	2300      	movs	r3, #0
    132a:	68fa      	ldr	r2, [r7, #12]
    132c:	4413      	add	r3, r2
    132e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1332:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1334:	4413      	add	r3, r2
    1336:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1338:	2300      	movs	r3, #0
    133a:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    133c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1340:	2b00      	cmp	r3, #0
    1342:	d01e      	beq.n	1382 <am_util_stdio_vsprintf+0x51e>
    1344:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1348:	2b20      	cmp	r3, #32
    134a:	d11a      	bne.n	1382 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    134c:	68fb      	ldr	r3, [r7, #12]
    134e:	2b00      	cmp	r3, #0
    1350:	d004      	beq.n	135c <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    1352:	68fb      	ldr	r3, [r7, #12]
    1354:	1c5a      	adds	r2, r3, #1
    1356:	60fa      	str	r2, [r7, #12]
    1358:	222d      	movs	r2, #45	; 0x2d
    135a:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    135c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    135e:	3301      	adds	r3, #1
    1360:	63fb      	str	r3, [r7, #60]	; 0x3c
    1362:	e00e      	b.n	1382 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    1364:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1368:	2b00      	cmp	r3, #0
    136a:	d00a      	beq.n	1382 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    136c:	68fb      	ldr	r3, [r7, #12]
    136e:	2b00      	cmp	r3, #0
    1370:	d004      	beq.n	137c <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    1372:	68fb      	ldr	r3, [r7, #12]
    1374:	1c5a      	adds	r2, r3, #1
    1376:	60fa      	str	r2, [r7, #12]
    1378:	222d      	movs	r2, #45	; 0x2d
    137a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    137c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    137e:	3301      	adds	r3, #1
    1380:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1382:	68fa      	ldr	r2, [r7, #12]
    1384:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1388:	f7ff fb85 	bl	a96 <uint64_to_str>
    138c:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    138e:	68fb      	ldr	r3, [r7, #12]
    1390:	2b00      	cmp	r3, #0
    1392:	d003      	beq.n	139c <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    1394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1396:	68fa      	ldr	r2, [r7, #12]
    1398:	4413      	add	r3, r2
    139a:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    139c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    139e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    13a0:	4413      	add	r3, r2
    13a2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    13a4:	e04a      	b.n	143c <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    13a6:	68fb      	ldr	r3, [r7, #12]
    13a8:	2b00      	cmp	r3, #0
    13aa:	d046      	beq.n	143a <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    13ac:	687b      	ldr	r3, [r7, #4]
    13ae:	3307      	adds	r3, #7
    13b0:	f023 0307 	bic.w	r3, r3, #7
    13b4:	f103 0208 	add.w	r2, r3, #8
    13b8:	607a      	str	r2, [r7, #4]
    13ba:	cb18      	ldmia	r3, {r3, r4}
    13bc:	4618      	mov	r0, r3
    13be:	4621      	mov	r1, r4
    13c0:	f7fe fe5e 	bl	80 <__aeabi_d2f>
    13c4:	4603      	mov	r3, r0
    13c6:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    13c8:	68fb      	ldr	r3, [r7, #12]
    13ca:	2214      	movs	r2, #20
    13cc:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    13ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    13d0:	68f9      	ldr	r1, [r7, #12]
    13d2:	6978      	ldr	r0, [r7, #20]
    13d4:	f7ff fc48 	bl	c68 <ftoa>
    13d8:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    13da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13dc:	2b00      	cmp	r3, #0
    13de:	da14      	bge.n	140a <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    13e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13e2:	f1b3 3fff 	cmp.w	r3, #4294967295
    13e6:	d102      	bne.n	13ee <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    13e8:	4b1e      	ldr	r3, [pc, #120]	; (1464 <am_util_stdio_vsprintf+0x600>)
    13ea:	62bb      	str	r3, [r7, #40]	; 0x28
    13ec:	e008      	b.n	1400 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    13ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13f0:	f113 0f02 	cmn.w	r3, #2
    13f4:	d102      	bne.n	13fc <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    13f6:	4b1c      	ldr	r3, [pc, #112]	; (1468 <am_util_stdio_vsprintf+0x604>)
    13f8:	62bb      	str	r3, [r7, #40]	; 0x28
    13fa:	e001      	b.n	1400 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    13fc:	4b1b      	ldr	r3, [pc, #108]	; (146c <am_util_stdio_vsprintf+0x608>)
    13fe:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    1400:	68fb      	ldr	r3, [r7, #12]
    1402:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1404:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    1406:	2303      	movs	r3, #3
    1408:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    140a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    140c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    140e:	4413      	add	r3, r2
    1410:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    1412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1414:	68fa      	ldr	r2, [r7, #12]
    1416:	4413      	add	r3, r2
    1418:	60fb      	str	r3, [r7, #12]
                }
                break;
    141a:	e00e      	b.n	143a <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    141c:	68fb      	ldr	r3, [r7, #12]
    141e:	2b00      	cmp	r3, #0
    1420:	d005      	beq.n	142e <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    1422:	68fb      	ldr	r3, [r7, #12]
    1424:	1c5a      	adds	r2, r3, #1
    1426:	60fa      	str	r2, [r7, #12]
    1428:	68ba      	ldr	r2, [r7, #8]
    142a:	7812      	ldrb	r2, [r2, #0]
    142c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    142e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1430:	3301      	adds	r3, #1
    1432:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1434:	e002      	b.n	143c <am_util_stdio_vsprintf+0x5d8>
                break;
    1436:	bf00      	nop
    1438:	e000      	b.n	143c <am_util_stdio_vsprintf+0x5d8>
                break;
    143a:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    143c:	68bb      	ldr	r3, [r7, #8]
    143e:	3301      	adds	r3, #1
    1440:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    1442:	68bb      	ldr	r3, [r7, #8]
    1444:	781b      	ldrb	r3, [r3, #0]
    1446:	2b00      	cmp	r3, #0
    1448:	f47f ad17 	bne.w	e7a <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    144c:	68fb      	ldr	r3, [r7, #12]
    144e:	2b00      	cmp	r3, #0
    1450:	d002      	beq.n	1458 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    1452:	68fb      	ldr	r3, [r7, #12]
    1454:	2200      	movs	r2, #0
    1456:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    1458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    145a:	4618      	mov	r0, r3
    145c:	3754      	adds	r7, #84	; 0x54
    145e:	46bd      	mov	sp, r7
    1460:	bd90      	pop	{r4, r7, pc}
    1462:	bf00      	nop
    1464:	00302e30 	.word	0x00302e30
    1468:	00232e23 	.word	0x00232e23
    146c:	003f2e3f 	.word	0x003f2e3f

00001470 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    1470:	b40f      	push	{r0, r1, r2, r3}
    1472:	b580      	push	{r7, lr}
    1474:	b082      	sub	sp, #8
    1476:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    1478:	f107 0314 	add.w	r3, r7, #20
    147c:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    147e:	683a      	ldr	r2, [r7, #0]
    1480:	6939      	ldr	r1, [r7, #16]
    1482:	4808      	ldr	r0, [pc, #32]	; (14a4 <am_util_stdio_printf+0x34>)
    1484:	f7ff fcee 	bl	e64 <am_util_stdio_vsprintf>
    1488:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    148a:	4b07      	ldr	r3, [pc, #28]	; (14a8 <am_util_stdio_printf+0x38>)
    148c:	681b      	ldr	r3, [r3, #0]
    148e:	4805      	ldr	r0, [pc, #20]	; (14a4 <am_util_stdio_printf+0x34>)
    1490:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    1492:	687b      	ldr	r3, [r7, #4]
}
    1494:	4618      	mov	r0, r3
    1496:	3708      	adds	r7, #8
    1498:	46bd      	mov	sp, r7
    149a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    149e:	b004      	add	sp, #16
    14a0:	4770      	bx	lr
    14a2:	bf00      	nop
    14a4:	1000104c 	.word	0x1000104c
    14a8:	10001760 	.word	0x10001760

000014ac <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    14ac:	b580      	push	{r7, lr}
    14ae:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    14b0:	4802      	ldr	r0, [pc, #8]	; (14bc <am_util_stdio_terminal_clear+0x10>)
    14b2:	f7ff ffdd 	bl	1470 <am_util_stdio_printf>
}
    14b6:	bf00      	nop
    14b8:	bd80      	pop	{r7, pc}
    14ba:	bf00      	nop
    14bc:	00002548 	.word	0x00002548

000014c0 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    14c0:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_mcuctrl_bucks_enable();
    14c2:	f000 ff4f 	bl	2364 <am_hal_mcuctrl_bucks_enable>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    14c6:	f000 ffeb 	bl	24a0 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    14ca:	2001      	movs	r0, #1
    14cc:	f000 ff60 	bl	2390 <am_hal_rtc_osc_select>

    //
    // Stop the XTAL.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    14d0:	2001      	movs	r0, #1
    14d2:	f000 f851 	bl	1578 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    14d6:	f000 ff69 	bl	23ac <am_hal_rtc_osc_disable>

    //
    // Disable the bandgap.
    //
    am_hal_mcuctrl_bandgap_disable();
}
    14da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_mcuctrl_bandgap_disable();
    14de:	f000 bf39 	b.w	2354 <am_hal_mcuctrl_bandgap_disable>
    14e2:	bf00      	nop

000014e4 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    14e4:	b510      	push	{r4, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    14e6:	4b10      	ldr	r3, [pc, #64]	; (1528 <am_bsp_debug_printf_enable+0x44>)
    14e8:	681c      	ldr	r4, [r3, #0]
    14ea:	f014 0401 	ands.w	r4, r4, #1
{
    14ee:	b086      	sub	sp, #24
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    14f0:	d001      	beq.n	14f6 <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    14f2:	b006      	add	sp, #24
    14f4:	bd10      	pop	{r4, pc}
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    14f6:	a806      	add	r0, sp, #24
    14f8:	490c      	ldr	r1, [pc, #48]	; (152c <am_bsp_debug_printf_enable+0x48>)
    14fa:	f840 1d14 	str.w	r1, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    14fe:	f000 ff73 	bl	23e8 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    1502:	4a0b      	ldr	r2, [pc, #44]	; (1530 <am_bsp_debug_printf_enable+0x4c>)
    1504:	480b      	ldr	r0, [pc, #44]	; (1534 <am_bsp_debug_printf_enable+0x50>)
    1506:	490c      	ldr	r1, [pc, #48]	; (1538 <am_bsp_debug_printf_enable+0x54>)
    1508:	2373      	movs	r3, #115	; 0x73
    150a:	6013      	str	r3, [r2, #0]
    150c:	6803      	ldr	r3, [r0, #0]
    150e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    1512:	6003      	str	r3, [r0, #0]
    1514:	6808      	ldr	r0, [r1, #0]
    1516:	f420 4c7f 	bic.w	ip, r0, #65280	; 0xff00
    151a:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    151e:	600b      	str	r3, [r1, #0]
    1520:	6014      	str	r4, [r2, #0]
}
    1522:	b006      	add	sp, #24
    1524:	bd10      	pop	{r4, pc}
    1526:	bf00      	nop
    1528:	10001150 	.word	0x10001150
    152c:	000f4240 	.word	0x000f4240
    1530:	40010060 	.word	0x40010060
    1534:	40010054 	.word	0x40010054
    1538:	40010028 	.word	0x40010028

0000153c <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    153c:	f000 bef0 	b.w	2320 <am_hal_itm_print>

00001540 <am_hal_clkgen_sysclk_select>:
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1540:	4b05      	ldr	r3, [pc, #20]	; (1558 <am_hal_clkgen_sysclk_select+0x18>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1542:	4906      	ldr	r1, [pc, #24]	; (155c <am_hal_clkgen_sysclk_select+0x1c>)
{
    1544:	b410      	push	{r4}

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    1546:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1548:	2447      	movs	r4, #71	; 0x47
    154a:	601c      	str	r4, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    154c:	6008      	str	r0, [r1, #0]
}
    154e:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(CLKGEN, CLKKEY) = 0;
    1552:	601a      	str	r2, [r3, #0]
}
    1554:	4770      	bx	lr
    1556:	bf00      	nop
    1558:	40004014 	.word	0x40004014
    155c:	40004018 	.word	0x40004018

00001560 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_BFR(CLKGEN, CCTRL, CORESEL);
    1560:	4b03      	ldr	r3, [pc, #12]	; (1570 <am_hal_clkgen_sysclk_get+0x10>)
    1562:	4a04      	ldr	r2, [pc, #16]	; (1574 <am_hal_clkgen_sysclk_get+0x14>)
    1564:	6818      	ldr	r0, [r3, #0]
    1566:	f000 0107 	and.w	r1, r0, #7
        case AM_HAL_CLKGEN_SYSCLK_3MHZ:
            return 3000000;
        default:
            return 0xFFFFFFFF;
    }
}
    156a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    156e:	4770      	bx	lr
    1570:	40004018 	.word	0x40004018
    1574:	0000255c 	.word	0x0000255c

00001578 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1578:	0783      	lsls	r3, r0, #30
    157a:	d003      	beq.n	1584 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    157c:	4b02      	ldr	r3, [pc, #8]	; (1588 <am_hal_clkgen_osc_stop+0x10>)
    157e:	681a      	ldr	r2, [r3, #0]
    1580:	4310      	orrs	r0, r2
    1582:	6018      	str	r0, [r3, #0]
    1584:	4770      	bx	lr
    1586:	bf00      	nop
    1588:	4000400c 	.word	0x4000400c

0000158c <am_hal_ctimer_int_service>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_service(uint32_t ui32Status)
{
    158c:	b570      	push	{r4, r5, r6, lr}
    uint32_t ui32Clz;

    am_hal_ctimer_handler_t pfnHandler;

    ui32Status &= 0xFFFF;
    158e:	b284      	uxth	r4, r0

    while ( ui32Status )
    1590:	b184      	cbz	r4, 15b4 <am_hal_ctimer_int_service+0x28>
    1592:	4e09      	ldr	r6, [pc, #36]	; (15b8 <am_hal_ctimer_int_service+0x2c>)
#endif

        //
        // Turn off the bit we picked in the working copy
        //
        ui32Status &= ~(0x80000000 >> ui32Clz);
    1594:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
        ui32Clz = __builtin_clz(ui32Status);
    1598:	fab4 f384 	clz	r3, r4

        //
        // Check the bit handler table to see if there is an interrupt handler
        // registered for this particular bit.
        //
        pfnHandler = am_hal_ctimer_ppfnHandlers[31 - ui32Clz];
    159c:	f1c3 021f 	rsb	r2, r3, #31
        ui32Status &= ~(0x80000000 >> ui32Clz);
    15a0:	fa25 f003 	lsr.w	r0, r5, r3
        pfnHandler = am_hal_ctimer_ppfnHandlers[31 - ui32Clz];
    15a4:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
        ui32Status &= ~(0x80000000 >> ui32Clz);
    15a8:	ea24 0400 	bic.w	r4, r4, r0
        if ( pfnHandler )
    15ac:	b101      	cbz	r1, 15b0 <am_hal_ctimer_int_service+0x24>
        {
            //
            // If we found an interrupt handler routine, call it now.
            //
            pfnHandler();
    15ae:	4788      	blx	r1
    while ( ui32Status )
    15b0:	2c00      	cmp	r4, #0
    15b2:	d1f1      	bne.n	1598 <am_hal_ctimer_int_service+0xc>
    15b4:	bd70      	pop	{r4, r5, r6, pc}
    15b6:	bf00      	nop
    15b8:	10001764 	.word	0x10001764

000015bc <am_hal_ctimer_int_register>:
{
    uint32_t intIdx = 0;
    //
    // Check to make sure the interrupt number is valid. (Debug builds only)
    //
    switch(ui32Interrupt)
    15bc:	2808      	cmp	r0, #8
{
    15be:	b510      	push	{r4, lr}
    15c0:	460c      	mov	r4, r1
    switch(ui32Interrupt)
    15c2:	d03d      	beq.n	1640 <am_hal_ctimer_int_register+0x84>
    15c4:	d90b      	bls.n	15de <am_hal_ctimer_int_register+0x22>
    15c6:	2820      	cmp	r0, #32
    15c8:	d035      	beq.n	1636 <am_hal_ctimer_int_register+0x7a>
    15ca:	d923      	bls.n	1614 <am_hal_ctimer_int_register+0x58>
    15cc:	2840      	cmp	r0, #64	; 0x40
    15ce:	d01c      	beq.n	160a <am_hal_ctimer_int_register+0x4e>
    15d0:	2880      	cmp	r0, #128	; 0x80
    15d2:	d10a      	bne.n	15ea <am_hal_ctimer_int_register+0x2e>
        case AM_REG_CTIMER_INTEN_CTMRA3INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRA3INT_S;
            break;

        case AM_REG_CTIMER_INTEN_CTMRB3INT_M:
            intIdx = AM_REG_CTIMER_INTEN_CTMRB3INT_S;
    15d4:	2207      	movs	r2, #7
            break;

        default:
            am_hal_debug_assert_msg(false, "CTimer interrupt number out of range.");
    }
    am_hal_ctimer_ppfnHandlers[intIdx] = pfnHandler;
    15d6:	4b1d      	ldr	r3, [pc, #116]	; (164c <am_hal_ctimer_int_register+0x90>)
    15d8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    15dc:	bd10      	pop	{r4, pc}
    switch(ui32Interrupt)
    15de:	2802      	cmp	r0, #2
    15e0:	d01f      	beq.n	1622 <am_hal_ctimer_int_register+0x66>
    15e2:	2804      	cmp	r0, #4
    15e4:	d00c      	beq.n	1600 <am_hal_ctimer_int_register+0x44>
    15e6:	2801      	cmp	r0, #1
    15e8:	d020      	beq.n	162c <am_hal_ctimer_int_register+0x70>
            am_hal_debug_assert_msg(false, "CTimer interrupt number out of range.");
    15ea:	4a19      	ldr	r2, [pc, #100]	; (1650 <am_hal_ctimer_int_register+0x94>)
    15ec:	4819      	ldr	r0, [pc, #100]	; (1654 <am_hal_ctimer_int_register+0x98>)
    15ee:	f44f 719a 	mov.w	r1, #308	; 0x134
    15f2:	f000 f8c9 	bl	1788 <am_hal_debug_error>
    uint32_t intIdx = 0;
    15f6:	2200      	movs	r2, #0
    am_hal_ctimer_ppfnHandlers[intIdx] = pfnHandler;
    15f8:	4b14      	ldr	r3, [pc, #80]	; (164c <am_hal_ctimer_int_register+0x90>)
    15fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    15fe:	bd10      	pop	{r4, pc}
            intIdx = AM_REG_CTIMER_INTEN_CTMRA1INT_S;
    1600:	2202      	movs	r2, #2
    am_hal_ctimer_ppfnHandlers[intIdx] = pfnHandler;
    1602:	4b12      	ldr	r3, [pc, #72]	; (164c <am_hal_ctimer_int_register+0x90>)
    1604:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    1608:	bd10      	pop	{r4, pc}
            intIdx = AM_REG_CTIMER_INTEN_CTMRA3INT_S;
    160a:	2206      	movs	r2, #6
    am_hal_ctimer_ppfnHandlers[intIdx] = pfnHandler;
    160c:	4b0f      	ldr	r3, [pc, #60]	; (164c <am_hal_ctimer_int_register+0x90>)
    160e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    1612:	bd10      	pop	{r4, pc}
    switch(ui32Interrupt)
    1614:	2810      	cmp	r0, #16
    1616:	d1e8      	bne.n	15ea <am_hal_ctimer_int_register+0x2e>
            intIdx = AM_REG_CTIMER_INTEN_CTMRA2INT_S;
    1618:	2204      	movs	r2, #4
    am_hal_ctimer_ppfnHandlers[intIdx] = pfnHandler;
    161a:	4b0c      	ldr	r3, [pc, #48]	; (164c <am_hal_ctimer_int_register+0x90>)
    161c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    1620:	bd10      	pop	{r4, pc}
            intIdx = AM_REG_CTIMER_INTEN_CTMRB0INT_S;
    1622:	2201      	movs	r2, #1
    am_hal_ctimer_ppfnHandlers[intIdx] = pfnHandler;
    1624:	4b09      	ldr	r3, [pc, #36]	; (164c <am_hal_ctimer_int_register+0x90>)
    1626:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    162a:	bd10      	pop	{r4, pc}
            intIdx = AM_REG_CTIMER_INTEN_CTMRA0INT_S;
    162c:	2200      	movs	r2, #0
    am_hal_ctimer_ppfnHandlers[intIdx] = pfnHandler;
    162e:	4b07      	ldr	r3, [pc, #28]	; (164c <am_hal_ctimer_int_register+0x90>)
    1630:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    1634:	bd10      	pop	{r4, pc}
            intIdx = AM_REG_CTIMER_INTEN_CTMRB2INT_S;
    1636:	2205      	movs	r2, #5
    am_hal_ctimer_ppfnHandlers[intIdx] = pfnHandler;
    1638:	4b04      	ldr	r3, [pc, #16]	; (164c <am_hal_ctimer_int_register+0x90>)
    163a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    163e:	bd10      	pop	{r4, pc}
            intIdx = AM_REG_CTIMER_INTEN_CTMRB1INT_S;
    1640:	2203      	movs	r2, #3
    am_hal_ctimer_ppfnHandlers[intIdx] = pfnHandler;
    1642:	4b02      	ldr	r3, [pc, #8]	; (164c <am_hal_ctimer_int_register+0x90>)
    1644:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    1648:	bd10      	pop	{r4, pc}
    164a:	bf00      	nop
    164c:	10001764 	.word	0x10001764
    1650:	0000257c 	.word	0x0000257c
    1654:	000025a4 	.word	0x000025a4

00001658 <am_hal_ctimer_config>:
                     (psConfig->ui32TimerBConfig << 16));

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    1658:	680b      	ldr	r3, [r1, #0]
    ui32ConfigVal = (psConfig->ui32TimerAConfig |
    165a:	684a      	ldr	r2, [r1, #4]
{
    165c:	b410      	push	{r4}
                     (psConfig->ui32TimerBConfig << 16));
    165e:	688c      	ldr	r4, [r1, #8]

    //
    // Find the correct register to write.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1660:	4907      	ldr	r1, [pc, #28]	; (1680 <am_hal_ctimer_config+0x28>)
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    1662:	2b00      	cmp	r3, #0
    ui32ConfigVal = (psConfig->ui32TimerAConfig |
    1664:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
                                  (ui32TimerNumber * TIMER_OFFSET));
    1668:	ea4f 1000 	mov.w	r0, r0, lsl #4
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    166c:	bf14      	ite	ne
    166e:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
    1672:	2300      	moveq	r3, #0
    1674:	4323      	orrs	r3, r4

    //
    // Write our configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    1676:	5043      	str	r3, [r0, r1]
}
    1678:	f85d 4b04 	ldr.w	r4, [sp], #4
    167c:	4770      	bx	lr
    167e:	bf00      	nop
    1680:	4000800c 	.word	0x4000800c

00001684 <am_hal_ctimer_start>:

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    1684:	0100      	lsls	r0, r0, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1686:	4a07      	ldr	r2, [pc, #28]	; (16a4 <am_hal_ctimer_start+0x20>)

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    1688:	5883      	ldr	r3, [r0, r2]
{
    168a:	b410      	push	{r4}

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    168c:	f001 2408 	and.w	r4, r1, #134219776	; 0x8000800
    1690:	ea23 0304 	bic.w	r3, r3, r4
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    1694:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    1698:	4319      	orrs	r1, r3
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    169a:	5081      	str	r1, [r0, r2]
}
    169c:	f85d 4b04 	ldr.w	r4, [sp], #4
    16a0:	4770      	bx	lr
    16a2:	bf00      	nop
    16a4:	4000800c 	.word	0x4000800c

000016a8 <am_hal_ctimer_stop>:

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    16a8:	0100      	lsls	r0, r0, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    16aa:	4a04      	ldr	r2, [pc, #16]	; (16bc <am_hal_ctimer_stop+0x14>)

    //
    // Clear the "enable" bit
    //
    AM_REGVAL(pui32ConfigReg) &= ~(ui32TimerSegment &
    16ac:	5883      	ldr	r3, [r0, r2]
    16ae:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    16b2:	ea23 0301 	bic.w	r3, r3, r1
    16b6:	5083      	str	r3, [r0, r2]
    16b8:	4770      	bx	lr
    16ba:	bf00      	nop
    16bc:	4000800c 	.word	0x4000800c

000016c0 <am_hal_ctimer_clear>:

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    16c0:	0100      	lsls	r0, r0, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    16c2:	4b03      	ldr	r3, [pc, #12]	; (16d0 <am_hal_ctimer_clear+0x10>)

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    16c4:	58c2      	ldr	r2, [r0, r3]
    16c6:	f001 2108 	and.w	r1, r1, #134219776	; 0x8000800
    16ca:	4311      	orrs	r1, r2
    16cc:	50c1      	str	r1, [r0, r3]
    16ce:	4770      	bx	lr
    16d0:	4000800c 	.word	0x4000800c

000016d4 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    16d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    16d6:	0100      	lsls	r0, r0, #4
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    16d8:	4c19      	ldr	r4, [pc, #100]	; (1740 <am_hal_ctimer_period_set+0x6c>)
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    16da:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    ui32Mode = *pui32ControlReg;
    16de:	5905      	ldr	r5, [r0, r4]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    16e0:	d018      	beq.n	1714 <am_hal_ctimer_period_set+0x40>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    16e2:	f405 76c0 	and.w	r6, r5, #384	; 0x180
    16e6:	2e80      	cmp	r6, #128	; 0x80
    16e8:	d019      	beq.n	171e <am_hal_ctimer_period_set+0x4a>
    16ea:	2500      	movs	r5, #0
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    16ec:	462c      	mov	r4, r5
    pui32CompareRegA = (uint32_t *)(AM_REG_CTIMERn(0) +
                                    AM_REG_CTIMER_CMPRA0_O +
                                    (ui32TimerNumber * TIMER_OFFSET));

    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
                                    AM_REG_CTIMER_CMPRB0_O +
    16ee:	4e15      	ldr	r6, [pc, #84]	; (1744 <am_hal_ctimer_period_set+0x70>)
                                    AM_REG_CTIMER_CMPRA0_O +
    16f0:	4f15      	ldr	r7, [pc, #84]	; (1748 <am_hal_ctimer_period_set+0x74>)

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    16f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    16f6:	4299      	cmp	r1, r3
                                    AM_REG_CTIMER_CMPRB0_O +
    16f8:	eb00 0e06 	add.w	lr, r0, r6
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    16fc:	d01c      	beq.n	1738 <am_hal_ctimer_period_set+0x64>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    16fe:	4b13      	ldr	r3, [pc, #76]	; (174c <am_hal_ctimer_period_set+0x78>)
    1700:	4299      	cmp	r1, r3
    1702:	d014      	beq.n	172e <am_hal_ctimer_period_set+0x5a>
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1704:	b291      	uxth	r1, r2
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1 >> 16));
    1706:	401c      	ands	r4, r3
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1708:	ea44 4212 	orr.w	r2, r4, r2, lsr #16
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    170c:	430d      	orrs	r5, r1
    170e:	51c5      	str	r5, [r0, r7]
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    1710:	5182      	str	r2, [r0, r6]
    }
}
    1712:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32Mode = ui32Mode >> 16;
    1714:	0c2f      	lsrs	r7, r5, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    1716:	f407 75c0 	and.w	r5, r7, #384	; 0x180
    171a:	2d80      	cmp	r5, #128	; 0x80
    171c:	d103      	bne.n	1726 <am_hal_ctimer_period_set+0x52>
    171e:	0415      	lsls	r5, r2, #16
        ui32Comp1 = ui32Period;
    1720:	4614      	mov	r4, r2
        ui32Comp0 = ui32Period - ui32OnTime;
    1722:	1ad2      	subs	r2, r2, r3
        ui32Comp1 = ui32Period;
    1724:	e7e3      	b.n	16ee <am_hal_ctimer_period_set+0x1a>
                                    AM_REG_CTIMER_CMPRB0_O +
    1726:	f8df e01c 	ldr.w	lr, [pc, #28]	; 1744 <am_hal_ctimer_period_set+0x70>
    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
    172a:	2500      	movs	r5, #0
                                    AM_REG_CTIMER_CMPRB0_O +
    172c:	4486      	add	lr, r0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    172e:	b290      	uxth	r0, r2
    1730:	4305      	orrs	r5, r0
    1732:	f8ce 5000 	str.w	r5, [lr]
    1736:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1738:	b294      	uxth	r4, r2
    173a:	4325      	orrs	r5, r4
    173c:	51c5      	str	r5, [r0, r7]
    173e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1740:	4000800c 	.word	0x4000800c
    1744:	40008008 	.word	0x40008008
    1748:	40008004 	.word	0x40008004
    174c:	ffff0000 	.word	0xffff0000

00001750 <am_hal_ctimer_int_enable>:
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    1750:	4a02      	ldr	r2, [pc, #8]	; (175c <am_hal_ctimer_int_enable+0xc>)
    1752:	6813      	ldr	r3, [r2, #0]
    1754:	4318      	orrs	r0, r3
    1756:	6010      	str	r0, [r2, #0]
    1758:	4770      	bx	lr
    175a:	bf00      	nop
    175c:	40008200 	.word	0x40008200

00001760 <am_hal_ctimer_int_clear>:
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTCLR) = ui32Interrupt;
    1760:	4b01      	ldr	r3, [pc, #4]	; (1768 <am_hal_ctimer_int_clear+0x8>)
    1762:	6018      	str	r0, [r3, #0]
    1764:	4770      	bx	lr
    1766:	bf00      	nop
    1768:	40008208 	.word	0x40008208

0000176c <am_hal_ctimer_int_status_get>:
am_hal_ctimer_int_status_get(bool bEnabledOnly)
{
    //
    // Return the desired status.
    //
    if (bEnabledOnly)
    176c:	b910      	cbnz	r0, 1774 <am_hal_ctimer_int_status_get+0x8>
        uint32_t u32RetVal = AM_REGn(CTIMER, 0, INTSTAT);
        return u32RetVal & AM_REGn(CTIMER, 0, INTEN);
    }
    else
    {
        return AM_REGn(CTIMER, 0, INTSTAT);
    176e:	4b04      	ldr	r3, [pc, #16]	; (1780 <am_hal_ctimer_int_status_get+0x14>)
    1770:	6818      	ldr	r0, [r3, #0]
    }
}
    1772:	4770      	bx	lr
        uint32_t u32RetVal = AM_REGn(CTIMER, 0, INTSTAT);
    1774:	4a02      	ldr	r2, [pc, #8]	; (1780 <am_hal_ctimer_int_status_get+0x14>)
        return u32RetVal & AM_REGn(CTIMER, 0, INTEN);
    1776:	4903      	ldr	r1, [pc, #12]	; (1784 <am_hal_ctimer_int_status_get+0x18>)
        uint32_t u32RetVal = AM_REGn(CTIMER, 0, INTSTAT);
    1778:	6810      	ldr	r0, [r2, #0]
        return u32RetVal & AM_REGn(CTIMER, 0, INTEN);
    177a:	680b      	ldr	r3, [r1, #0]
    177c:	4018      	ands	r0, r3
    177e:	4770      	bx	lr
    1780:	40008204 	.word	0x40008204
    1784:	40008200 	.word	0x40008200

00001788 <am_hal_debug_error>:
__weak void
#else
void __attribute__((weak))
#endif
am_hal_debug_error(const char *pcFile, uint32_t ui32Line, const char *pcMessage)
{
    1788:	e7fe      	b.n	1788 <am_hal_debug_error>
    178a:	bf00      	nop

0000178c <am_hal_flash_delay>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_flash_delay(uint32_t ui32Iterations)
{
    __asm("    subs    r0, #1\n"
    178c:	3801      	subs	r0, #1
    178e:	f47f affd 	bne.w	178c <am_hal_flash_delay>
    1792:	4770      	bx	lr

00001794 <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    1794:	280f      	cmp	r0, #15
    1796:	d80b      	bhi.n	17b0 <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    1798:	2805      	cmp	r0, #5
    179a:	d013      	beq.n	17c4 <am_hal_interrupt_enable+0x30>
    179c:	2806      	cmp	r0, #6
    179e:	d017      	beq.n	17d0 <am_hal_interrupt_enable+0x3c>
    17a0:	2804      	cmp	r0, #4
    17a2:	d104      	bne.n	17ae <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    17a4:	4a0d      	ldr	r2, [pc, #52]	; (17dc <am_hal_interrupt_enable+0x48>)
    17a6:	6813      	ldr	r3, [r2, #0]
    17a8:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    17ac:	6010      	str	r0, [r2, #0]
    17ae:	4770      	bx	lr
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    17b0:	f1a0 0310 	sub.w	r3, r0, #16
    17b4:	f003 0c1f 	and.w	ip, r3, #31
    17b8:	2001      	movs	r0, #1
    17ba:	4909      	ldr	r1, [pc, #36]	; (17e0 <am_hal_interrupt_enable+0x4c>)
    17bc:	fa00 f20c 	lsl.w	r2, r0, ip
    17c0:	600a      	str	r2, [r1, #0]
    17c2:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    17c4:	4805      	ldr	r0, [pc, #20]	; (17dc <am_hal_interrupt_enable+0x48>)
    17c6:	6801      	ldr	r1, [r0, #0]
    17c8:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    17cc:	6002      	str	r2, [r0, #0]
            break;
    17ce:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    17d0:	4902      	ldr	r1, [pc, #8]	; (17dc <am_hal_interrupt_enable+0x48>)
    17d2:	680a      	ldr	r2, [r1, #0]
    17d4:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    17d8:	600b      	str	r3, [r1, #0]
            break;
    17da:	4770      	bx	lr
    17dc:	e000ed24 	.word	0xe000ed24
    17e0:	e000e100 	.word	0xe000e100

000017e4 <am_hal_interrupt_master_enable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    17e4:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    17e8:	b662      	cpsie	i
    __asm("    bx lr");
    17ea:	4770      	bx	lr

000017ec <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    17ec:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    17f0:	b672      	cpsid	i
    __asm("    bx lr");
    17f2:	4770      	bx	lr

000017f4 <am_hal_interrupt_master_set>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    17f4:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    17f8:	4770      	bx	lr
    17fa:	bf00      	nop

000017fc <internal_resync_fifoSize>:
#endif
__attribute__((naked))
static void
internal_resync_fifoSize(uint32_t wrOffset, uint32_t maxFifoSize, uint32_t hwFifoPtrRegAddr)
{
    __asm
    17fc:	b418      	push	{r3, r4}

000017fe <__internal_resync_fifoSize_loop>:
    17fe:	6814      	ldr	r4, [r2, #0]
    1800:	f3c4 2307 	ubfx	r3, r4, #8, #8
    1804:	b2e4      	uxtb	r4, r4
    1806:	1b04      	subs	r4, r0, r4
    1808:	bf38      	it	cc
    180a:	1864      	addcc	r4, r4, r1
    180c:	42a3      	cmp	r3, r4
    180e:	d001      	beq.n	1814 <__internal_resync_fifosize_done>
    1810:	7054      	strb	r4, [r2, #1]
    1812:	e7f4      	b.n	17fe <__internal_resync_fifoSize_loop>

00001814 <__internal_resync_fifosize_done>:
    1814:	bc18      	pop	{r3, r4}
    1816:	4770      	bx	lr

00001818 <am_hal_ios_config>:
{
    1818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    181a:	68c1      	ldr	r1, [r0, #12]
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    181c:	6883      	ldr	r3, [r0, #8]
    g_ui32FifoBaseOffset = psConfig->ui32FIFOBase;
    181e:	4a1d      	ldr	r2, [pc, #116]	; (1894 <am_hal_ios_config+0x7c>)
    g_ui32HwFifoSize = g_pui8FIFOEnd - g_pui8FIFOBase;
    1820:	4f1d      	ldr	r7, [pc, #116]	; (1898 <am_hal_ios_config+0x80>)
    g_ui32FifoBaseOffset = psConfig->ui32FIFOBase;
    1822:	6013      	str	r3, [r2, #0]
{
    1824:	4604      	mov	r4, r0
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    1826:	481d      	ldr	r0, [pc, #116]	; (189c <am_hal_ios_config+0x84>)
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    1828:	4e1d      	ldr	r6, [pc, #116]	; (18a0 <am_hal_ios_config+0x88>)
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    182a:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    182e:	f101 45a0 	add.w	r5, r1, #1342177280	; 0x50000000
    g_pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
    1832:	6002      	str	r2, [r0, #0]
    g_ui32HwFifoSize = g_pui8FIFOEnd - g_pui8FIFOBase;
    1834:	1aa8      	subs	r0, r5, r2
    1836:	7038      	strb	r0, [r7, #0]
    AM_REGn(IOSLAVE, ui32Module, CFG) &= ~(AM_REG_IOSLAVE_CFG_IFCEN(1));
    1838:	4f1a      	ldr	r7, [pc, #104]	; (18a4 <am_hal_ios_config+0x8c>)
    ui32LRAMConfig = AM_REG_IOSLAVE_FIFOCFG_ROBASE(psConfig->ui32ROBase >> 3);
    183a:	6862      	ldr	r2, [r4, #4]
    g_pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
    183c:	6035      	str	r5, [r6, #0]
    AM_REGn(IOSLAVE, ui32Module, CFG) &= ~(AM_REG_IOSLAVE_CFG_IFCEN(1));
    183e:	683d      	ldr	r5, [r7, #0]
    AM_REG(IOSLAVE, FIFOCFG) = ui32LRAMConfig;
    1840:	4e19      	ldr	r6, [pc, #100]	; (18a8 <am_hal_ios_config+0x90>)
    ui32LRAMConfig = AM_REG_IOSLAVE_FIFOCFG_ROBASE(psConfig->ui32ROBase >> 3);
    1842:	0550      	lsls	r0, r2, #21
    ui32LRAMConfig |= AM_REG_IOSLAVE_FIFOCFG_FIFOMAX(psConfig->ui32RAMBase >> 3);
    1844:	0149      	lsls	r1, r1, #5
    1846:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
    ui32LRAMConfig = AM_REG_IOSLAVE_FIFOCFG_ROBASE(psConfig->ui32ROBase >> 3);
    184a:	f000 527c 	and.w	r2, r0, #1056964608	; 0x3f000000
    AM_REGn(IOSLAVE, ui32Module, CFG) &= ~(AM_REG_IOSLAVE_CFG_IFCEN(1));
    184e:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
    1852:	603d      	str	r5, [r7, #0]
    1854:	430a      	orrs	r2, r1
    ui32LRAMConfig |= AM_REG_IOSLAVE_FIFOCFG_FIFOBASE(psConfig->ui32FIFOBase >> 3);
    1856:	f3c3 03c4 	ubfx	r3, r3, #3, #5
    AM_REG(IOSLAVE, CFG) = psConfig->ui32InterfaceSelect;
    185a:	6820      	ldr	r0, [r4, #0]
    185c:	6038      	str	r0, [r7, #0]
    ui32LRAMConfig |= AM_REG_IOSLAVE_FIFOCFG_FIFOMAX(psConfig->ui32RAMBase >> 3);
    185e:	4313      	orrs	r3, r2
    AM_REG(IOSLAVE, FIFOCFG) = ui32LRAMConfig;
    1860:	6033      	str	r3, [r6, #0]
    AM_REGn(IOSLAVE, ui32Module, CFG) |= AM_REG_IOSLAVE_CFG_IFCEN(1);
    1862:	6839      	ldr	r1, [r7, #0]
    1864:	f041 4200 	orr.w	r2, r1, #2147483648	; 0x80000000
    1868:	603a      	str	r2, [r7, #0]
    am_hal_ios_fifo_ptr_set(psConfig->ui32FIFOBase);
    186a:	68a5      	ldr	r5, [r4, #8]
    uint32_t ui32Primask;

    //
    // Start a critical section for thread safety.
    //
    ui32Primask = am_hal_interrupt_master_disable();
    186c:	f7ff ffbe 	bl	17ec <am_hal_interrupt_master_disable>

    //
    // Set the FIFO Update bit.
    //
    AM_REG(IOSLAVE, FUPD) = 0x1;
    1870:	4b0e      	ldr	r3, [pc, #56]	; (18ac <am_hal_ios_config+0x94>)
    AM_REG(IOSLAVE, FUPD) = 0x0;

    //
    // Set the global FIFO-pointer tracking variable.
    //
    g_pui8FIFOPtr = (uint8_t *) (REG_IOSLAVE_BASEADDR + ui32Offset);
    1872:	4a0f      	ldr	r2, [pc, #60]	; (18b0 <am_hal_ios_config+0x98>)
    AM_REG(IOSLAVE, FUPD) = 0x0;
    1874:	2100      	movs	r1, #0
    AM_REG(IOSLAVE, FUPD) = 0x1;
    1876:	2701      	movs	r7, #1
    1878:	601f      	str	r7, [r3, #0]
    AM_REG(IOSLAVE, FIFOPTR) = ui32Offset;
    187a:	f846 5c04 	str.w	r5, [r6, #-4]
    AM_REG(IOSLAVE, FUPD) = 0x0;
    187e:	6019      	str	r1, [r3, #0]
    g_pui8FIFOPtr = (uint8_t *) (REG_IOSLAVE_BASEADDR + ui32Offset);
    1880:	f105 46a0 	add.w	r6, r5, #1342177280	; 0x50000000
    1884:	6016      	str	r6, [r2, #0]

    //
    // End the critical section.
    //
    am_hal_interrupt_master_set(ui32Primask);
    1886:	f7ff ffb5 	bl	17f4 <am_hal_interrupt_master_set>
    AM_REG(IOSLAVE, FIFOTHR) = psConfig->ui32FIFOThreshold;
    188a:	480a      	ldr	r0, [pc, #40]	; (18b4 <am_hal_ios_config+0x9c>)
    188c:	6924      	ldr	r4, [r4, #16]
    188e:	6004      	str	r4, [r0, #0]
    1890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1892:	bf00      	nop
    1894:	10001154 	.word	0x10001154
    1898:	10001158 	.word	0x10001158
    189c:	1000103c 	.word	0x1000103c
    18a0:	10001040 	.word	0x10001040
    18a4:	50000118 	.word	0x50000118
    18a8:	50000104 	.word	0x50000104
    18ac:	5000010c 	.word	0x5000010c
    18b0:	10001044 	.word	0x10001044
    18b4:	50000108 	.word	0x50000108

000018b8 <am_hal_ios_host_int_set>:
    AM_REG(IOSLAVE, IOINTCTL) = AM_REG_IOSLAVE_IOINTCTL_IOINTSET(ui32Interrupt);
    18b8:	4b01      	ldr	r3, [pc, #4]	; (18c0 <am_hal_ios_host_int_set+0x8>)
    18ba:	0600      	lsls	r0, r0, #24
    18bc:	6018      	str	r0, [r3, #0]
    18be:	4770      	bx	lr
    18c0:	50000120 	.word	0x50000120

000018c4 <am_hal_ios_access_int_enable>:
    AM_REG(IOSLAVE, REGACCINTEN) |= ui32Interrupt;
    18c4:	4a02      	ldr	r2, [pc, #8]	; (18d0 <am_hal_ios_access_int_enable+0xc>)
    18c6:	6813      	ldr	r3, [r2, #0]
    18c8:	4318      	orrs	r0, r3
    18ca:	6010      	str	r0, [r2, #0]
    18cc:	4770      	bx	lr
    18ce:	bf00      	nop
    18d0:	50000210 	.word	0x50000210

000018d4 <am_hal_ios_access_int_clear>:
    AM_REG(IOSLAVE, REGACCINTCLR) = ui32Interrupt;
    18d4:	4b01      	ldr	r3, [pc, #4]	; (18dc <am_hal_ios_access_int_clear+0x8>)
    18d6:	6018      	str	r0, [r3, #0]
    18d8:	4770      	bx	lr
    18da:	bf00      	nop
    18dc:	50000218 	.word	0x50000218

000018e0 <am_hal_ios_access_int_status_get>:
    if (bEnabledOnly)
    18e0:	b910      	cbnz	r0, 18e8 <am_hal_ios_access_int_status_get+0x8>
        return AM_REG(IOSLAVE, REGACCINTSTAT);
    18e2:	4b04      	ldr	r3, [pc, #16]	; (18f4 <am_hal_ios_access_int_status_get+0x14>)
    18e4:	6818      	ldr	r0, [r3, #0]
}
    18e6:	4770      	bx	lr
        uint32_t u32RetVal = AM_REG(IOSLAVE, REGACCINTSTAT);
    18e8:	4a02      	ldr	r2, [pc, #8]	; (18f4 <am_hal_ios_access_int_status_get+0x14>)
        return u32RetVal & AM_REG(IOSLAVE, REGACCINTEN);
    18ea:	4903      	ldr	r1, [pc, #12]	; (18f8 <am_hal_ios_access_int_status_get+0x18>)
        uint32_t u32RetVal = AM_REG(IOSLAVE, REGACCINTSTAT);
    18ec:	6810      	ldr	r0, [r2, #0]
        return u32RetVal & AM_REG(IOSLAVE, REGACCINTEN);
    18ee:	680b      	ldr	r3, [r1, #0]
    18f0:	4018      	ands	r0, r3
    18f2:	4770      	bx	lr
    18f4:	50000214 	.word	0x50000214
    18f8:	50000210 	.word	0x50000210

000018fc <am_hal_ios_int_enable>:
    AM_REG(IOSLAVE, INTEN) |= ui32Interrupt;
    18fc:	4a02      	ldr	r2, [pc, #8]	; (1908 <am_hal_ios_int_enable+0xc>)
    18fe:	6813      	ldr	r3, [r2, #0]
    1900:	4318      	orrs	r0, r3
    1902:	6010      	str	r0, [r2, #0]
    1904:	4770      	bx	lr
    1906:	bf00      	nop
    1908:	50000200 	.word	0x50000200

0000190c <am_hal_ios_int_clear>:
    AM_REG(IOSLAVE, INTCLR) = ui32Interrupt;
    190c:	4b01      	ldr	r3, [pc, #4]	; (1914 <am_hal_ios_int_clear+0x8>)
    190e:	6018      	str	r0, [r3, #0]
    1910:	4770      	bx	lr
    1912:	bf00      	nop
    1914:	50000208 	.word	0x50000208

00001918 <am_hal_ios_int_status_get>:
    if (bEnabledOnly)
    1918:	b910      	cbnz	r0, 1920 <am_hal_ios_int_status_get+0x8>
        return AM_REG(IOSLAVE, INTSTAT);
    191a:	4b04      	ldr	r3, [pc, #16]	; (192c <am_hal_ios_int_status_get+0x14>)
    191c:	6818      	ldr	r0, [r3, #0]
}
    191e:	4770      	bx	lr
        uint32_t u32RetVal = AM_REG(IOSLAVE, INTSTAT);
    1920:	4a02      	ldr	r2, [pc, #8]	; (192c <am_hal_ios_int_status_get+0x14>)
        return u32RetVal & AM_REG(IOSLAVE, INTEN);
    1922:	4903      	ldr	r1, [pc, #12]	; (1930 <am_hal_ios_int_status_get+0x18>)
        uint32_t u32RetVal = AM_REG(IOSLAVE, INTSTAT);
    1924:	6810      	ldr	r0, [r2, #0]
        return u32RetVal & AM_REG(IOSLAVE, INTEN);
    1926:	680b      	ldr	r3, [r1, #0]
    1928:	4018      	ands	r0, r3
    192a:	4770      	bx	lr
    192c:	50000204 	.word	0x50000204
    1930:	50000200 	.word	0x50000200

00001934 <am_hal_ios_fifo_space_used>:
{
    1934:	b510      	push	{r4, lr}
    ui32Primask = am_hal_interrupt_master_disable();
    1936:	f7ff ff59 	bl	17ec <am_hal_interrupt_master_disable>
    ui32Val = g_sSRAMBuffer.ui32Length;
    193a:	4b05      	ldr	r3, [pc, #20]	; (1950 <am_hal_ios_fifo_space_used+0x1c>)
    ui32Val += AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ);
    193c:	4a05      	ldr	r2, [pc, #20]	; (1954 <am_hal_ios_fifo_space_used+0x20>)
    ui32Val = g_sSRAMBuffer.ui32Length;
    193e:	68d9      	ldr	r1, [r3, #12]
    ui32Val += AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ);
    1940:	6814      	ldr	r4, [r2, #0]
    1942:	f3c4 2407 	ubfx	r4, r4, #8, #8
    1946:	440c      	add	r4, r1
    am_hal_interrupt_master_set(ui32Primask);
    1948:	f7ff ff54 	bl	17f4 <am_hal_interrupt_master_set>
}
    194c:	4620      	mov	r0, r4
    194e:	bd10      	pop	{r4, pc}
    1950:	10001784 	.word	0x10001784
    1954:	50000100 	.word	0x50000100

00001958 <am_hal_ios_fifo_service>:
    if ( ui32Status & AM_HAL_IOS_INT_FSIZE )
    1958:	07c3      	lsls	r3, r0, #31
    195a:	f140 8248 	bpl.w	1dee <am_hal_ios_fifo_service+0x496>
{
    195e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        thresh = AM_BFR(IOSLAVE, FIFOTHR, FIFOTHR);
    1962:	4b96      	ldr	r3, [pc, #600]	; (1bbc <am_hal_ios_fifo_service+0x264>)
        while (g_sSRAMBuffer.ui32Length &&
    1964:	4e96      	ldr	r6, [pc, #600]	; (1bc0 <am_hal_ios_fifo_service+0x268>)
        thresh = AM_BFR(IOSLAVE, FIFOTHR, FIFOTHR);
    1966:	681a      	ldr	r2, [r3, #0]
        while (g_sSRAMBuffer.ui32Length &&
    1968:	68f0      	ldr	r0, [r6, #12]
{
    196a:	b083      	sub	sp, #12
        thresh = AM_BFR(IOSLAVE, FIFOTHR, FIFOTHR);
    196c:	fa5f fa82 	uxtb.w	sl, r2
        while (g_sSRAMBuffer.ui32Length &&
    1970:	2800      	cmp	r0, #0
    1972:	f000 80b0 	beq.w	1ad6 <am_hal_ios_fifo_service+0x17e>
               ((usedSpace = AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ)) <= thresh) )
    1976:	4993      	ldr	r1, [pc, #588]	; (1bc4 <am_hal_ios_fifo_service+0x26c>)
    1978:	680c      	ldr	r4, [r1, #0]
    197a:	f3c4 2007 	ubfx	r0, r4, #8, #8
        while (g_sSRAMBuffer.ui32Length &&
    197e:	4582      	cmp	sl, r0
    1980:	f0c0 80a9 	bcc.w	1ad6 <am_hal_ios_fifo_service+0x17e>
    1984:	f8df 8250 	ldr.w	r8, [pc, #592]	; 1bd8 <am_hal_ios_fifo_service+0x280>
    1988:	4c8f      	ldr	r4, [pc, #572]	; (1bc8 <am_hal_ios_fifo_service+0x270>)
    198a:	4f90      	ldr	r7, [pc, #576]	; (1bcc <am_hal_ios_fifo_service+0x274>)
            g_pui8FIFOPtr = g_pui8FIFOBase;
    198c:	f8df 924c 	ldr.w	r9, [pc, #588]	; 1bdc <am_hal_ios_fifo_service+0x284>
            ui32WriteIndex = g_sSRAMBuffer.ui32WriteIndex;
    1990:	6875      	ldr	r5, [r6, #4]
            chunk1 = ((ui32WriteIndex > (uint32_t)g_sSRAMBuffer.ui32ReadIndex) ?   \
    1992:	68b3      	ldr	r3, [r6, #8]
                        (ui32WriteIndex - (uint32_t)g_sSRAMBuffer.ui32ReadIndex) : \
    1994:	429d      	cmp	r5, r3
    1996:	f240 80a1 	bls.w	1adc <am_hal_ios_fifo_service+0x184>
    199a:	68b1      	ldr	r1, [r6, #8]
    199c:	1a6b      	subs	r3, r5, r1
            freeSpace = g_ui32HwFifoSize - usedSpace - 1;
    199e:	f898 b000 	ldrb.w	fp, [r8]
            chunk2 = g_sSRAMBuffer.ui32Length - chunk1;
    19a2:	f8d6 c00c 	ldr.w	ip, [r6, #12]
            freeSpace = g_ui32HwFifoSize - usedSpace - 1;
    19a6:	f10b 35ff 	add.w	r5, fp, #4294967295
    19aa:	1a2a      	subs	r2, r5, r0
            if (chunk1 > freeSpace)
    19ac:	4293      	cmp	r3, r2
    19ae:	f240 8099 	bls.w	1ae4 <am_hal_ios_fifo_service+0x18c>
                fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), freeSpace);
    19b2:	68b3      	ldr	r3, [r6, #8]
    19b4:	6835      	ldr	r5, [r6, #0]
    19b6:	eb05 0e03 	add.w	lr, r5, r3
    while ( ui32NumBytes )
    19ba:	2a00      	cmp	r2, #0
    19bc:	d064      	beq.n	1a88 <am_hal_ios_fifo_service+0x130>
    19be:	6821      	ldr	r1, [r4, #0]
        *g_pui8FIFOPtr++ = *pui8Data++;
    19c0:	4673      	mov	r3, lr
    19c2:	1c48      	adds	r0, r1, #1
    19c4:	6020      	str	r0, [r4, #0]
    19c6:	f813 5b01 	ldrb.w	r5, [r3], #1
    19ca:	700d      	strb	r5, [r1, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    19cc:	6825      	ldr	r5, [r4, #0]
    19ce:	6839      	ldr	r1, [r7, #0]
    19d0:	eb0e 0c02 	add.w	ip, lr, r2
    19d4:	ea6f 0b0e 	mvn.w	fp, lr
    19d8:	44e3      	add	fp, ip
    19da:	42a9      	cmp	r1, r5
    19dc:	f00b 0003 	and.w	r0, fp, #3
    19e0:	f000 81f6 	beq.w	1dd0 <am_hal_ios_fifo_service+0x478>
    while ( ui32NumBytes )
    19e4:	4563      	cmp	r3, ip
    19e6:	d050      	beq.n	1a8a <am_hal_ios_fifo_service+0x132>
    19e8:	b338      	cbz	r0, 1a3a <am_hal_ios_fifo_service+0xe2>
    19ea:	2801      	cmp	r0, #1
    19ec:	d017      	beq.n	1a1e <am_hal_ios_fifo_service+0xc6>
    19ee:	2802      	cmp	r0, #2
    19f0:	d00a      	beq.n	1a08 <am_hal_ios_fifo_service+0xb0>
        *g_pui8FIFOPtr++ = *pui8Data++;
    19f2:	1c68      	adds	r0, r5, #1
    19f4:	6020      	str	r0, [r4, #0]
    19f6:	f813 1b01 	ldrb.w	r1, [r3], #1
    19fa:	7029      	strb	r1, [r5, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    19fc:	6825      	ldr	r5, [r4, #0]
    19fe:	6838      	ldr	r0, [r7, #0]
    1a00:	42a8      	cmp	r0, r5
            g_pui8FIFOPtr = g_pui8FIFOBase;
    1a02:	bf08      	it	eq
    1a04:	f8d9 5000 	ldreq.w	r5, [r9]
        *g_pui8FIFOPtr++ = *pui8Data++;
    1a08:	1c69      	adds	r1, r5, #1
    1a0a:	6021      	str	r1, [r4, #0]
    1a0c:	f813 0b01 	ldrb.w	r0, [r3], #1
    1a10:	7028      	strb	r0, [r5, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1a12:	6825      	ldr	r5, [r4, #0]
    1a14:	6839      	ldr	r1, [r7, #0]
    1a16:	42a9      	cmp	r1, r5
            g_pui8FIFOPtr = g_pui8FIFOBase;
    1a18:	bf08      	it	eq
    1a1a:	f8d9 5000 	ldreq.w	r5, [r9]
        *g_pui8FIFOPtr++ = *pui8Data++;
    1a1e:	1c68      	adds	r0, r5, #1
    1a20:	6020      	str	r0, [r4, #0]
    1a22:	f813 0b01 	ldrb.w	r0, [r3], #1
    1a26:	7028      	strb	r0, [r5, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1a28:	6825      	ldr	r5, [r4, #0]
    1a2a:	6839      	ldr	r1, [r7, #0]
    1a2c:	42a9      	cmp	r1, r5
            g_pui8FIFOPtr = g_pui8FIFOBase;
    1a2e:	bf04      	itt	eq
    1a30:	f8d9 5000 	ldreq.w	r5, [r9]
    1a34:	6025      	streq	r5, [r4, #0]
    while ( ui32NumBytes )
    1a36:	4563      	cmp	r3, ip
    1a38:	d027      	beq.n	1a8a <am_hal_ios_fifo_service+0x132>
        *g_pui8FIFOPtr++ = *pui8Data++;
    1a3a:	4619      	mov	r1, r3
    1a3c:	1c6b      	adds	r3, r5, #1
    1a3e:	6023      	str	r3, [r4, #0]
    1a40:	f811 0b01 	ldrb.w	r0, [r1], #1
    1a44:	7028      	strb	r0, [r5, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1a46:	6825      	ldr	r5, [r4, #0]
    1a48:	683b      	ldr	r3, [r7, #0]
    1a4a:	42ab      	cmp	r3, r5
            g_pui8FIFOPtr = g_pui8FIFOBase;
    1a4c:	bf08      	it	eq
    1a4e:	f8d9 5000 	ldreq.w	r5, [r9]
        *g_pui8FIFOPtr++ = *pui8Data++;
    1a52:	1c68      	adds	r0, r5, #1
    1a54:	6020      	str	r0, [r4, #0]
    1a56:	780b      	ldrb	r3, [r1, #0]
    1a58:	702b      	strb	r3, [r5, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1a5a:	6825      	ldr	r5, [r4, #0]
    1a5c:	6838      	ldr	r0, [r7, #0]
    1a5e:	42a8      	cmp	r0, r5
    1a60:	f000 8145 	beq.w	1cee <am_hal_ios_fifo_service+0x396>
        *g_pui8FIFOPtr++ = *pui8Data++;
    1a64:	f105 0e01 	add.w	lr, r5, #1
    1a68:	f8c4 e000 	str.w	lr, [r4]
    1a6c:	1ccb      	adds	r3, r1, #3
    1a6e:	7849      	ldrb	r1, [r1, #1]
    1a70:	7029      	strb	r1, [r5, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1a72:	6825      	ldr	r5, [r4, #0]
    1a74:	6838      	ldr	r0, [r7, #0]
    1a76:	42a8      	cmp	r0, r5
            g_pui8FIFOPtr = g_pui8FIFOBase;
    1a78:	bf08      	it	eq
    1a7a:	f8d9 5000 	ldreq.w	r5, [r9]
        *g_pui8FIFOPtr++ = *pui8Data++;
    1a7e:	1c69      	adds	r1, r5, #1
    1a80:	6021      	str	r1, [r4, #0]
    1a82:	f813 0c01 	ldrb.w	r0, [r3, #-1]
    1a86:	e7ce      	b.n	1a26 <am_hal_ios_fifo_service+0xce>
    1a88:	6825      	ldr	r5, [r4, #0]
                g_sSRAMBuffer.ui32ReadIndex += freeSpace;
    1a8a:	68b3      	ldr	r3, [r6, #8]
                        g_sSRAMBuffer.ui32ReadIndex += freeSpace;
    1a8c:	4413      	add	r3, r2
    1a8e:	60b3      	str	r3, [r6, #8]
                        g_sSRAMBuffer.ui32Length -= freeSpace;
    1a90:	68f3      	ldr	r3, [r6, #12]
    1a92:	1a9a      	subs	r2, r3, r2
    1a94:	60f2      	str	r2, [r6, #12]
    ui32Primask = am_hal_interrupt_master_disable();
    1a96:	f7ff fea9 	bl	17ec <am_hal_interrupt_master_disable>
    internal_resync_fifoSize(wrOffset, g_ui32HwFifoSize, AM_REG_IOS_FIFOPTR);
    1a9a:	f8df b128 	ldr.w	fp, [pc, #296]	; 1bc4 <am_hal_ios_fifo_service+0x26c>
    ui32Primask = am_hal_interrupt_master_disable();
    1a9e:	9001      	str	r0, [sp, #4]
    internal_resync_fifoSize(wrOffset, g_ui32HwFifoSize, AM_REG_IOS_FIFOPTR);
    1aa0:	465a      	mov	r2, fp
    1aa2:	f105 4030 	add.w	r0, r5, #2952790016	; 0xb0000000
    1aa6:	f898 1000 	ldrb.w	r1, [r8]
    AM_REG(IOSLAVE, REGACCINTCLR) = (AM_HAL_IOS_INT_FSIZE | AM_HAL_IOS_INT_FOVFL | AM_HAL_IOS_INT_FUNDFL);
    1aaa:	4d49      	ldr	r5, [pc, #292]	; (1bd0 <am_hal_ios_fifo_service+0x278>)
    internal_resync_fifoSize(wrOffset, g_ui32HwFifoSize, AM_REG_IOS_FIFOPTR);
    1aac:	f7ff fea6 	bl	17fc <internal_resync_fifoSize>
    AM_REG(IOSLAVE, REGACCINTCLR) = (AM_HAL_IOS_INT_FSIZE | AM_HAL_IOS_INT_FOVFL | AM_HAL_IOS_INT_FUNDFL);
    1ab0:	2107      	movs	r1, #7
    am_hal_interrupt_master_set(ui32Primask);
    1ab2:	9801      	ldr	r0, [sp, #4]
    AM_REG(IOSLAVE, REGACCINTCLR) = (AM_HAL_IOS_INT_FSIZE | AM_HAL_IOS_INT_FOVFL | AM_HAL_IOS_INT_FUNDFL);
    1ab4:	6029      	str	r1, [r5, #0]
    am_hal_interrupt_master_set(ui32Primask);
    1ab6:	f7ff fe9d 	bl	17f4 <am_hal_interrupt_master_set>
            AM_BFW(IOSLAVE, INTCLR, FSIZE, 1);
    1aba:	4846      	ldr	r0, [pc, #280]	; (1bd4 <am_hal_ios_fifo_service+0x27c>)
    1abc:	6803      	ldr	r3, [r0, #0]
    1abe:	f043 0201 	orr.w	r2, r3, #1
    1ac2:	6002      	str	r2, [r0, #0]
        while (g_sSRAMBuffer.ui32Length &&
    1ac4:	68f5      	ldr	r5, [r6, #12]
    1ac6:	b135      	cbz	r5, 1ad6 <am_hal_ios_fifo_service+0x17e>
               ((usedSpace = AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ)) <= thresh) )
    1ac8:	f8db 1000 	ldr.w	r1, [fp]
    1acc:	f3c1 2007 	ubfx	r0, r1, #8, #8
        while (g_sSRAMBuffer.ui32Length &&
    1ad0:	4582      	cmp	sl, r0
    1ad2:	f4bf af5d 	bcs.w	1990 <am_hal_ios_fifo_service+0x38>
}
    1ad6:	b003      	add	sp, #12
    1ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        (g_sSRAMBuffer.ui32Capacity - (uint32_t)g_sSRAMBuffer.ui32ReadIndex));
    1adc:	68b1      	ldr	r1, [r6, #8]
                        (ui32WriteIndex - (uint32_t)g_sSRAMBuffer.ui32ReadIndex) : \
    1ade:	6932      	ldr	r2, [r6, #16]
    1ae0:	1a53      	subs	r3, r2, r1
    1ae2:	e75c      	b.n	199e <am_hal_ios_fifo_service+0x46>
                fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), chunk1);
    1ae4:	68b0      	ldr	r0, [r6, #8]
    1ae6:	6831      	ldr	r1, [r6, #0]
    1ae8:	eb01 0e00 	add.w	lr, r1, r0
    while ( ui32NumBytes )
    1aec:	2b00      	cmp	r3, #0
    1aee:	d077      	beq.n	1be0 <am_hal_ios_fifo_service+0x288>
    1af0:	6820      	ldr	r0, [r4, #0]
        *g_pui8FIFOPtr++ = *pui8Data++;
    1af2:	4671      	mov	r1, lr
    1af4:	1c45      	adds	r5, r0, #1
    1af6:	6025      	str	r5, [r4, #0]
    1af8:	f811 5b01 	ldrb.w	r5, [r1], #1
    1afc:	7005      	strb	r5, [r0, #0]
    1afe:	1e58      	subs	r0, r3, #1
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1b00:	6825      	ldr	r5, [r4, #0]
    1b02:	f000 0b03 	and.w	fp, r0, #3
    1b06:	6838      	ldr	r0, [r7, #0]
    1b08:	4285      	cmp	r5, r0
    1b0a:	449e      	add	lr, r3
    1b0c:	f000 815c 	beq.w	1dc8 <am_hal_ios_fifo_service+0x470>
    while ( ui32NumBytes )
    1b10:	458e      	cmp	lr, r1
    1b12:	d066      	beq.n	1be2 <am_hal_ios_fifo_service+0x28a>
    1b14:	f1bb 0f00 	cmp.w	fp, #0
    1b18:	d029      	beq.n	1b6e <am_hal_ios_fifo_service+0x216>
    1b1a:	f1bb 0f01 	cmp.w	fp, #1
    1b1e:	d018      	beq.n	1b52 <am_hal_ios_fifo_service+0x1fa>
    1b20:	f1bb 0f02 	cmp.w	fp, #2
    1b24:	d00a      	beq.n	1b3c <am_hal_ios_fifo_service+0x1e4>
        *g_pui8FIFOPtr++ = *pui8Data++;
    1b26:	1c68      	adds	r0, r5, #1
    1b28:	6020      	str	r0, [r4, #0]
    1b2a:	f811 0b01 	ldrb.w	r0, [r1], #1
    1b2e:	7028      	strb	r0, [r5, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1b30:	6825      	ldr	r5, [r4, #0]
    1b32:	6838      	ldr	r0, [r7, #0]
    1b34:	4285      	cmp	r5, r0
            g_pui8FIFOPtr = g_pui8FIFOBase;
    1b36:	bf08      	it	eq
    1b38:	f8d9 5000 	ldreq.w	r5, [r9]
        *g_pui8FIFOPtr++ = *pui8Data++;
    1b3c:	1c68      	adds	r0, r5, #1
    1b3e:	6020      	str	r0, [r4, #0]
    1b40:	f811 0b01 	ldrb.w	r0, [r1], #1
    1b44:	7028      	strb	r0, [r5, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1b46:	6825      	ldr	r5, [r4, #0]
    1b48:	6838      	ldr	r0, [r7, #0]
    1b4a:	4285      	cmp	r5, r0
            g_pui8FIFOPtr = g_pui8FIFOBase;
    1b4c:	bf08      	it	eq
    1b4e:	f8d9 5000 	ldreq.w	r5, [r9]
        *g_pui8FIFOPtr++ = *pui8Data++;
    1b52:	1c68      	adds	r0, r5, #1
    1b54:	6020      	str	r0, [r4, #0]
    1b56:	f811 0b01 	ldrb.w	r0, [r1], #1
    1b5a:	7028      	strb	r0, [r5, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1b5c:	6825      	ldr	r5, [r4, #0]
    1b5e:	6838      	ldr	r0, [r7, #0]
    1b60:	4285      	cmp	r5, r0
            g_pui8FIFOPtr = g_pui8FIFOBase;
    1b62:	bf04      	itt	eq
    1b64:	f8d9 5000 	ldreq.w	r5, [r9]
    1b68:	6025      	streq	r5, [r4, #0]
    while ( ui32NumBytes )
    1b6a:	458e      	cmp	lr, r1
    1b6c:	d039      	beq.n	1be2 <am_hal_ios_fifo_service+0x28a>
        *g_pui8FIFOPtr++ = *pui8Data++;
    1b6e:	4608      	mov	r0, r1
    1b70:	1c69      	adds	r1, r5, #1
    1b72:	6021      	str	r1, [r4, #0]
    1b74:	f810 1b01 	ldrb.w	r1, [r0], #1
    1b78:	7029      	strb	r1, [r5, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1b7a:	6825      	ldr	r5, [r4, #0]
    1b7c:	6839      	ldr	r1, [r7, #0]
    1b7e:	428d      	cmp	r5, r1
            g_pui8FIFOPtr = g_pui8FIFOBase;
    1b80:	bf08      	it	eq
    1b82:	f8d9 5000 	ldreq.w	r5, [r9]
        *g_pui8FIFOPtr++ = *pui8Data++;
    1b86:	1c69      	adds	r1, r5, #1
    1b88:	6021      	str	r1, [r4, #0]
    1b8a:	7801      	ldrb	r1, [r0, #0]
    1b8c:	7029      	strb	r1, [r5, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1b8e:	6825      	ldr	r5, [r4, #0]
    1b90:	6839      	ldr	r1, [r7, #0]
    1b92:	428d      	cmp	r5, r1
    1b94:	f000 80ae 	beq.w	1cf4 <am_hal_ios_fifo_service+0x39c>
        *g_pui8FIFOPtr++ = *pui8Data++;
    1b98:	f105 0b01 	add.w	fp, r5, #1
    1b9c:	f8c4 b000 	str.w	fp, [r4]
    1ba0:	1cc1      	adds	r1, r0, #3
    1ba2:	7840      	ldrb	r0, [r0, #1]
    1ba4:	7028      	strb	r0, [r5, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1ba6:	6825      	ldr	r5, [r4, #0]
    1ba8:	6838      	ldr	r0, [r7, #0]
    1baa:	4285      	cmp	r5, r0
            g_pui8FIFOPtr = g_pui8FIFOBase;
    1bac:	bf08      	it	eq
    1bae:	f8d9 5000 	ldreq.w	r5, [r9]
        *g_pui8FIFOPtr++ = *pui8Data++;
    1bb2:	1c68      	adds	r0, r5, #1
    1bb4:	6020      	str	r0, [r4, #0]
    1bb6:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    1bba:	e7ce      	b.n	1b5a <am_hal_ios_fifo_service+0x202>
    1bbc:	50000108 	.word	0x50000108
    1bc0:	10001784 	.word	0x10001784
    1bc4:	50000100 	.word	0x50000100
    1bc8:	10001044 	.word	0x10001044
    1bcc:	10001040 	.word	0x10001040
    1bd0:	50000218 	.word	0x50000218
    1bd4:	50000208 	.word	0x50000208
    1bd8:	10001158 	.word	0x10001158
    1bdc:	1000103c 	.word	0x1000103c
    1be0:	6825      	ldr	r5, [r4, #0]
                g_sSRAMBuffer.ui32ReadIndex += chunk1;
    1be2:	68b1      	ldr	r1, [r6, #8]
                g_sSRAMBuffer.ui32ReadIndex %= g_sSRAMBuffer.ui32Capacity;
    1be4:	f8d6 e010 	ldr.w	lr, [r6, #16]
                g_sSRAMBuffer.ui32ReadIndex += chunk1;
    1be8:	4419      	add	r1, r3
    1bea:	60b1      	str	r1, [r6, #8]
                g_sSRAMBuffer.ui32ReadIndex %= g_sSRAMBuffer.ui32Capacity;
    1bec:	68b0      	ldr	r0, [r6, #8]
    1bee:	fbb0 fbfe 	udiv	fp, r0, lr
    1bf2:	fb0e 011b 	mls	r1, lr, fp, r0
    1bf6:	60b1      	str	r1, [r6, #8]
                g_sSRAMBuffer.ui32Length -= chunk1;
    1bf8:	68f0      	ldr	r0, [r6, #12]
                if (freeSpace && chunk2)
    1bfa:	1ad2      	subs	r2, r2, r3
                g_sSRAMBuffer.ui32Length -= chunk1;
    1bfc:	eba0 0103 	sub.w	r1, r0, r3
    1c00:	60f1      	str	r1, [r6, #12]
                if (freeSpace && chunk2)
    1c02:	f43f af48 	beq.w	1a96 <am_hal_ios_fifo_service+0x13e>
    1c06:	ebbc 0303 	subs.w	r3, ip, r3
    1c0a:	f43f af44 	beq.w	1a96 <am_hal_ios_fifo_service+0x13e>
                    if (chunk2 > freeSpace)
    1c0e:	4293      	cmp	r3, r2
                        fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), freeSpace);
    1c10:	68b0      	ldr	r0, [r6, #8]
                    if (chunk2 > freeSpace)
    1c12:	d972      	bls.n	1cfa <am_hal_ios_fifo_service+0x3a2>
                        fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), freeSpace);
    1c14:	6833      	ldr	r3, [r6, #0]
    1c16:	eb03 0c00 	add.w	ip, r3, r0
        *g_pui8FIFOPtr++ = *pui8Data++;
    1c1a:	4663      	mov	r3, ip
    1c1c:	1c68      	adds	r0, r5, #1
    1c1e:	6020      	str	r0, [r4, #0]
    1c20:	f813 1b01 	ldrb.w	r1, [r3], #1
    1c24:	7029      	strb	r1, [r5, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1c26:	6820      	ldr	r0, [r4, #0]
    1c28:	6839      	ldr	r1, [r7, #0]
    1c2a:	eb0c 0502 	add.w	r5, ip, r2
    1c2e:	ea6f 0e0c 	mvn.w	lr, ip
    1c32:	44ae      	add	lr, r5
    1c34:	4281      	cmp	r1, r0
    1c36:	f00e 0b03 	and.w	fp, lr, #3
    1c3a:	f000 80df 	beq.w	1dfc <am_hal_ios_fifo_service+0x4a4>
    while ( ui32NumBytes )
    1c3e:	42ab      	cmp	r3, r5
    1c40:	f000 80d2 	beq.w	1de8 <am_hal_ios_fifo_service+0x490>
    1c44:	f1bb 0f00 	cmp.w	fp, #0
    1c48:	d02a      	beq.n	1ca0 <am_hal_ios_fifo_service+0x348>
    1c4a:	f1bb 0f01 	cmp.w	fp, #1
    1c4e:	d018      	beq.n	1c82 <am_hal_ios_fifo_service+0x32a>
    1c50:	f1bb 0f02 	cmp.w	fp, #2
    1c54:	d00a      	beq.n	1c6c <am_hal_ios_fifo_service+0x314>
        *g_pui8FIFOPtr++ = *pui8Data++;
    1c56:	1c41      	adds	r1, r0, #1
    1c58:	6021      	str	r1, [r4, #0]
    1c5a:	f813 1b01 	ldrb.w	r1, [r3], #1
    1c5e:	7001      	strb	r1, [r0, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1c60:	6820      	ldr	r0, [r4, #0]
    1c62:	6839      	ldr	r1, [r7, #0]
    1c64:	4281      	cmp	r1, r0
            g_pui8FIFOPtr = g_pui8FIFOBase;
    1c66:	bf08      	it	eq
    1c68:	f8d9 0000 	ldreq.w	r0, [r9]
        *g_pui8FIFOPtr++ = *pui8Data++;
    1c6c:	1c41      	adds	r1, r0, #1
    1c6e:	6021      	str	r1, [r4, #0]
    1c70:	f813 1b01 	ldrb.w	r1, [r3], #1
    1c74:	7001      	strb	r1, [r0, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1c76:	6820      	ldr	r0, [r4, #0]
    1c78:	6839      	ldr	r1, [r7, #0]
    1c7a:	4281      	cmp	r1, r0
            g_pui8FIFOPtr = g_pui8FIFOBase;
    1c7c:	bf08      	it	eq
    1c7e:	f8d9 0000 	ldreq.w	r0, [r9]
        *g_pui8FIFOPtr++ = *pui8Data++;
    1c82:	1c41      	adds	r1, r0, #1
    1c84:	6021      	str	r1, [r4, #0]
    1c86:	f813 1b01 	ldrb.w	r1, [r3], #1
    1c8a:	7001      	strb	r1, [r0, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1c8c:	6820      	ldr	r0, [r4, #0]
    1c8e:	6839      	ldr	r1, [r7, #0]
    1c90:	4281      	cmp	r1, r0
            g_pui8FIFOPtr = g_pui8FIFOBase;
    1c92:	bf04      	itt	eq
    1c94:	f8d9 0000 	ldreq.w	r0, [r9]
    1c98:	6020      	streq	r0, [r4, #0]
    while ( ui32NumBytes )
    1c9a:	42ab      	cmp	r3, r5
    1c9c:	f000 80a4 	beq.w	1de8 <am_hal_ios_fifo_service+0x490>
        *g_pui8FIFOPtr++ = *pui8Data++;
    1ca0:	4619      	mov	r1, r3
    1ca2:	1c43      	adds	r3, r0, #1
    1ca4:	6023      	str	r3, [r4, #0]
    1ca6:	f811 3b01 	ldrb.w	r3, [r1], #1
    1caa:	7003      	strb	r3, [r0, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1cac:	6820      	ldr	r0, [r4, #0]
    1cae:	683b      	ldr	r3, [r7, #0]
    1cb0:	4283      	cmp	r3, r0
            g_pui8FIFOPtr = g_pui8FIFOBase;
    1cb2:	bf08      	it	eq
    1cb4:	f8d9 0000 	ldreq.w	r0, [r9]
        *g_pui8FIFOPtr++ = *pui8Data++;
    1cb8:	1c43      	adds	r3, r0, #1
    1cba:	6023      	str	r3, [r4, #0]
    1cbc:	780b      	ldrb	r3, [r1, #0]
    1cbe:	7003      	strb	r3, [r0, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1cc0:	6820      	ldr	r0, [r4, #0]
    1cc2:	683b      	ldr	r3, [r7, #0]
    1cc4:	4283      	cmp	r3, r0
    1cc6:	f000 8093 	beq.w	1df0 <am_hal_ios_fifo_service+0x498>
        *g_pui8FIFOPtr++ = *pui8Data++;
    1cca:	f100 0c01 	add.w	ip, r0, #1
    1cce:	f8c4 c000 	str.w	ip, [r4]
    1cd2:	1ccb      	adds	r3, r1, #3
    1cd4:	7849      	ldrb	r1, [r1, #1]
    1cd6:	7001      	strb	r1, [r0, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1cd8:	6820      	ldr	r0, [r4, #0]
    1cda:	6839      	ldr	r1, [r7, #0]
    1cdc:	4281      	cmp	r1, r0
            g_pui8FIFOPtr = g_pui8FIFOBase;
    1cde:	bf08      	it	eq
    1ce0:	f8d9 0000 	ldreq.w	r0, [r9]
        *g_pui8FIFOPtr++ = *pui8Data++;
    1ce4:	1c41      	adds	r1, r0, #1
    1ce6:	6021      	str	r1, [r4, #0]
    1ce8:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    1cec:	e7cd      	b.n	1c8a <am_hal_ios_fifo_service+0x332>
            g_pui8FIFOPtr = g_pui8FIFOBase;
    1cee:	f8d9 5000 	ldr.w	r5, [r9]
    1cf2:	e6b7      	b.n	1a64 <am_hal_ios_fifo_service+0x10c>
    1cf4:	f8d9 5000 	ldr.w	r5, [r9]
    1cf8:	e74e      	b.n	1b98 <am_hal_ios_fifo_service+0x240>
                        fifo_write((uint8_t *)(g_sSRAMBuffer.pui8Data + g_sSRAMBuffer.ui32ReadIndex), chunk2);
    1cfa:	6831      	ldr	r1, [r6, #0]
    1cfc:	eb01 0c00 	add.w	ip, r1, r0
        *g_pui8FIFOPtr++ = *pui8Data++;
    1d00:	4662      	mov	r2, ip
    1d02:	1c68      	adds	r0, r5, #1
    1d04:	6020      	str	r0, [r4, #0]
    1d06:	f812 1b01 	ldrb.w	r1, [r2], #1
    1d0a:	7029      	strb	r1, [r5, #0]
    1d0c:	1e59      	subs	r1, r3, #1
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1d0e:	6820      	ldr	r0, [r4, #0]
    1d10:	f001 0e03 	and.w	lr, r1, #3
    1d14:	6839      	ldr	r1, [r7, #0]
    1d16:	4288      	cmp	r0, r1
    1d18:	eb0c 0503 	add.w	r5, ip, r3
    1d1c:	d072      	beq.n	1e04 <am_hal_ios_fifo_service+0x4ac>
    while ( ui32NumBytes )
    1d1e:	4295      	cmp	r5, r2
    1d20:	d05a      	beq.n	1dd8 <am_hal_ios_fifo_service+0x480>
    1d22:	f1be 0f00 	cmp.w	lr, #0
    1d26:	d029      	beq.n	1d7c <am_hal_ios_fifo_service+0x424>
    1d28:	f1be 0f01 	cmp.w	lr, #1
    1d2c:	d018      	beq.n	1d60 <am_hal_ios_fifo_service+0x408>
    1d2e:	f1be 0f02 	cmp.w	lr, #2
    1d32:	d00a      	beq.n	1d4a <am_hal_ios_fifo_service+0x3f2>
        *g_pui8FIFOPtr++ = *pui8Data++;
    1d34:	1c41      	adds	r1, r0, #1
    1d36:	6021      	str	r1, [r4, #0]
    1d38:	f812 1b01 	ldrb.w	r1, [r2], #1
    1d3c:	7001      	strb	r1, [r0, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1d3e:	6820      	ldr	r0, [r4, #0]
    1d40:	6839      	ldr	r1, [r7, #0]
    1d42:	4288      	cmp	r0, r1
            g_pui8FIFOPtr = g_pui8FIFOBase;
    1d44:	bf08      	it	eq
    1d46:	f8d9 0000 	ldreq.w	r0, [r9]
        *g_pui8FIFOPtr++ = *pui8Data++;
    1d4a:	1c41      	adds	r1, r0, #1
    1d4c:	6021      	str	r1, [r4, #0]
    1d4e:	f812 1b01 	ldrb.w	r1, [r2], #1
    1d52:	7001      	strb	r1, [r0, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1d54:	6820      	ldr	r0, [r4, #0]
    1d56:	6839      	ldr	r1, [r7, #0]
    1d58:	4288      	cmp	r0, r1
            g_pui8FIFOPtr = g_pui8FIFOBase;
    1d5a:	bf08      	it	eq
    1d5c:	f8d9 0000 	ldreq.w	r0, [r9]
        *g_pui8FIFOPtr++ = *pui8Data++;
    1d60:	1c41      	adds	r1, r0, #1
    1d62:	6021      	str	r1, [r4, #0]
    1d64:	f812 1b01 	ldrb.w	r1, [r2], #1
    1d68:	7001      	strb	r1, [r0, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1d6a:	6820      	ldr	r0, [r4, #0]
    1d6c:	6839      	ldr	r1, [r7, #0]
    1d6e:	4288      	cmp	r0, r1
            g_pui8FIFOPtr = g_pui8FIFOBase;
    1d70:	bf04      	itt	eq
    1d72:	f8d9 0000 	ldreq.w	r0, [r9]
    1d76:	6020      	streq	r0, [r4, #0]
    while ( ui32NumBytes )
    1d78:	4295      	cmp	r5, r2
    1d7a:	d02d      	beq.n	1dd8 <am_hal_ios_fifo_service+0x480>
        *g_pui8FIFOPtr++ = *pui8Data++;
    1d7c:	4611      	mov	r1, r2
    1d7e:	1c42      	adds	r2, r0, #1
    1d80:	6022      	str	r2, [r4, #0]
    1d82:	f811 2b01 	ldrb.w	r2, [r1], #1
    1d86:	7002      	strb	r2, [r0, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1d88:	6820      	ldr	r0, [r4, #0]
    1d8a:	683a      	ldr	r2, [r7, #0]
    1d8c:	4290      	cmp	r0, r2
            g_pui8FIFOPtr = g_pui8FIFOBase;
    1d8e:	bf08      	it	eq
    1d90:	f8d9 0000 	ldreq.w	r0, [r9]
        *g_pui8FIFOPtr++ = *pui8Data++;
    1d94:	1c42      	adds	r2, r0, #1
    1d96:	6022      	str	r2, [r4, #0]
    1d98:	780a      	ldrb	r2, [r1, #0]
    1d9a:	7002      	strb	r2, [r0, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1d9c:	6820      	ldr	r0, [r4, #0]
    1d9e:	683a      	ldr	r2, [r7, #0]
    1da0:	4290      	cmp	r0, r2
    1da2:	d028      	beq.n	1df6 <am_hal_ios_fifo_service+0x49e>
        *g_pui8FIFOPtr++ = *pui8Data++;
    1da4:	f100 0b01 	add.w	fp, r0, #1
    1da8:	f8c4 b000 	str.w	fp, [r4]
    1dac:	1cca      	adds	r2, r1, #3
    1dae:	7849      	ldrb	r1, [r1, #1]
    1db0:	7001      	strb	r1, [r0, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1db2:	6820      	ldr	r0, [r4, #0]
    1db4:	6839      	ldr	r1, [r7, #0]
    1db6:	4288      	cmp	r0, r1
            g_pui8FIFOPtr = g_pui8FIFOBase;
    1db8:	bf08      	it	eq
    1dba:	f8d9 0000 	ldreq.w	r0, [r9]
        *g_pui8FIFOPtr++ = *pui8Data++;
    1dbe:	1c41      	adds	r1, r0, #1
    1dc0:	6021      	str	r1, [r4, #0]
    1dc2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    1dc6:	e7cf      	b.n	1d68 <am_hal_ios_fifo_service+0x410>
            g_pui8FIFOPtr = g_pui8FIFOBase;
    1dc8:	f8d9 5000 	ldr.w	r5, [r9]
    1dcc:	6025      	str	r5, [r4, #0]
    1dce:	e69f      	b.n	1b10 <am_hal_ios_fifo_service+0x1b8>
    1dd0:	f8d9 5000 	ldr.w	r5, [r9]
    1dd4:	6025      	str	r5, [r4, #0]
    1dd6:	e605      	b.n	19e4 <am_hal_ios_fifo_service+0x8c>
                        g_sSRAMBuffer.ui32ReadIndex += chunk2;
    1dd8:	68b2      	ldr	r2, [r6, #8]
    1dda:	6825      	ldr	r5, [r4, #0]
    1ddc:	441a      	add	r2, r3
    1dde:	60b2      	str	r2, [r6, #8]
                        g_sSRAMBuffer.ui32Length -= chunk2;
    1de0:	68f0      	ldr	r0, [r6, #12]
    1de2:	1ac3      	subs	r3, r0, r3
    1de4:	60f3      	str	r3, [r6, #12]
    1de6:	e656      	b.n	1a96 <am_hal_ios_fifo_service+0x13e>
                        g_sSRAMBuffer.ui32ReadIndex += freeSpace;
    1de8:	68b3      	ldr	r3, [r6, #8]
    1dea:	6825      	ldr	r5, [r4, #0]
    1dec:	e64e      	b.n	1a8c <am_hal_ios_fifo_service+0x134>
    1dee:	4770      	bx	lr
            g_pui8FIFOPtr = g_pui8FIFOBase;
    1df0:	f8d9 0000 	ldr.w	r0, [r9]
    1df4:	e769      	b.n	1cca <am_hal_ios_fifo_service+0x372>
    1df6:	f8d9 0000 	ldr.w	r0, [r9]
    1dfa:	e7d3      	b.n	1da4 <am_hal_ios_fifo_service+0x44c>
    1dfc:	f8d9 0000 	ldr.w	r0, [r9]
    1e00:	6020      	str	r0, [r4, #0]
    1e02:	e71c      	b.n	1c3e <am_hal_ios_fifo_service+0x2e6>
    1e04:	f8d9 0000 	ldr.w	r0, [r9]
    1e08:	6020      	str	r0, [r4, #0]
    1e0a:	e788      	b.n	1d1e <am_hal_ios_fifo_service+0x3c6>

00001e0c <am_hal_ios_fifo_write>:
{
    1e0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    am_hal_debug_assert(g_sSRAMBuffer.pui8Data != 0);
    1e10:	4c9d      	ldr	r4, [pc, #628]	; (2088 <am_hal_ios_fifo_write+0x27c>)
    1e12:	6822      	ldr	r2, [r4, #0]
{
    1e14:	4681      	mov	r9, r0
    1e16:	460e      	mov	r6, r1
    am_hal_debug_assert(g_sSRAMBuffer.pui8Data != 0);
    1e18:	2a00      	cmp	r2, #0
    1e1a:	f000 812f 	beq.w	207c <am_hal_ios_fifo_write+0x270>
    if ( ui32NumBytes == 0)
    1e1e:	b916      	cbnz	r6, 1e26 <am_hal_ios_fifo_write+0x1a>
}
    1e20:	4630      	mov	r0, r6
    1e22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ui32Primask = am_hal_interrupt_master_disable();
    1e26:	f7ff fce1 	bl	17ec <am_hal_interrupt_master_disable>
    ui32SRAMLength = g_sSRAMBuffer.ui32Length;
    1e2a:	68e7      	ldr	r7, [r4, #12]
    am_hal_interrupt_master_set(ui32Primask);
    1e2c:	f7ff fce2 	bl	17f4 <am_hal_interrupt_master_set>
    if (ui32SRAMLength == 0)
    1e30:	2f00      	cmp	r7, #0
    1e32:	f000 809b 	beq.w	1f6c <am_hal_ios_fifo_write+0x160>
    1e36:	46b0      	mov	r8, r6
        ui32SRAMSpace = g_sSRAMBuffer.ui32Capacity - ui32SRAMLength;
    1e38:	6925      	ldr	r5, [r4, #16]
        writeIdx = g_sSRAMBuffer.ui32WriteIndex;
    1e3a:	f8d4 a004 	ldr.w	sl, [r4, #4]
        ui32SRAMSpace = g_sSRAMBuffer.ui32Capacity - ui32SRAMLength;
    1e3e:	1bef      	subs	r7, r5, r7
    1e40:	4547      	cmp	r7, r8
    1e42:	bf28      	it	cs
    1e44:	4647      	movcs	r7, r8
        for (idx = 0; idx < ui32SRAMSpace; idx++)
    1e46:	2f00      	cmp	r7, #0
    1e48:	d06f      	beq.n	1f2a <am_hal_ios_fifo_write+0x11e>
            g_sSRAMBuffer.pui8Data[(idx + writeIdx) % capacity] = pui8Data[idx];
    1e4a:	464b      	mov	r3, r9
    1e4c:	ebaa 0209 	sub.w	r2, sl, r9
    1e50:	eb09 0002 	add.w	r0, r9, r2
    1e54:	f813 bb01 	ldrb.w	fp, [r3], #1
    1e58:	fbb0 f1f5 	udiv	r1, r0, r5
    1e5c:	fb05 0c11 	mls	ip, r5, r1, r0
    1e60:	6821      	ldr	r1, [r4, #0]
    1e62:	eb09 0007 	add.w	r0, r9, r7
    1e66:	f107 3eff 	add.w	lr, r7, #4294967295
        for (idx = 0; idx < ui32SRAMSpace; idx++)
    1e6a:	4298      	cmp	r0, r3
            g_sSRAMBuffer.pui8Data[(idx + writeIdx) % capacity] = pui8Data[idx];
    1e6c:	f801 b00c 	strb.w	fp, [r1, ip]
    1e70:	f00e 0103 	and.w	r1, lr, #3
        for (idx = 0; idx < ui32SRAMSpace; idx++)
    1e74:	d059      	beq.n	1f2a <am_hal_ios_fifo_write+0x11e>
    1e76:	b331      	cbz	r1, 1ec6 <am_hal_ios_fifo_write+0xba>
    1e78:	2901      	cmp	r1, #1
    1e7a:	d017      	beq.n	1eac <am_hal_ios_fifo_write+0xa0>
    1e7c:	2902      	cmp	r1, #2
    1e7e:	d00a      	beq.n	1e96 <am_hal_ios_fifo_write+0x8a>
            g_sSRAMBuffer.pui8Data[(idx + writeIdx) % capacity] = pui8Data[idx];
    1e80:	eb02 0903 	add.w	r9, r2, r3
    1e84:	6821      	ldr	r1, [r4, #0]
    1e86:	fbb9 fbf5 	udiv	fp, r9, r5
    1e8a:	fb05 9e1b 	mls	lr, r5, fp, r9
    1e8e:	f813 cb01 	ldrb.w	ip, [r3], #1
    1e92:	f801 c00e 	strb.w	ip, [r1, lr]
    1e96:	eb02 0903 	add.w	r9, r2, r3
    1e9a:	6821      	ldr	r1, [r4, #0]
    1e9c:	fbb9 fbf5 	udiv	fp, r9, r5
    1ea0:	fb05 9e1b 	mls	lr, r5, fp, r9
    1ea4:	f813 cb01 	ldrb.w	ip, [r3], #1
    1ea8:	f801 c00e 	strb.w	ip, [r1, lr]
    1eac:	eb02 0903 	add.w	r9, r2, r3
    1eb0:	f813 cb01 	ldrb.w	ip, [r3], #1
    1eb4:	6821      	ldr	r1, [r4, #0]
    1eb6:	fbb9 fbf5 	udiv	fp, r9, r5
    1eba:	fb05 9e1b 	mls	lr, r5, fp, r9
        for (idx = 0; idx < ui32SRAMSpace; idx++)
    1ebe:	4298      	cmp	r0, r3
            g_sSRAMBuffer.pui8Data[(idx + writeIdx) % capacity] = pui8Data[idx];
    1ec0:	f801 c00e 	strb.w	ip, [r1, lr]
        for (idx = 0; idx < ui32SRAMSpace; idx++)
    1ec4:	d031      	beq.n	1f2a <am_hal_ios_fifo_write+0x11e>
            g_sSRAMBuffer.pui8Data[(idx + writeIdx) % capacity] = pui8Data[idx];
    1ec6:	469e      	mov	lr, r3
    1ec8:	eb02 0c03 	add.w	ip, r2, r3
    1ecc:	6821      	ldr	r1, [r4, #0]
    1ece:	fbbc f9f5 	udiv	r9, ip, r5
    1ed2:	fb05 c919 	mls	r9, r5, r9, ip
    1ed6:	f81e bb01 	ldrb.w	fp, [lr], #1
    1eda:	f801 b009 	strb.w	fp, [r1, r9]
    1ede:	eb02 0c0e 	add.w	ip, r2, lr
    1ee2:	6821      	ldr	r1, [r4, #0]
    1ee4:	fbbc f9f5 	udiv	r9, ip, r5
    1ee8:	fb05 c919 	mls	r9, r5, r9, ip
    1eec:	f893 b001 	ldrb.w	fp, [r3, #1]
    1ef0:	f801 b009 	strb.w	fp, [r1, r9]
    1ef4:	f10e 0c01 	add.w	ip, lr, #1
    1ef8:	4494      	add	ip, r2
    1efa:	6821      	ldr	r1, [r4, #0]
    1efc:	fbbc fbf5 	udiv	fp, ip, r5
    1f00:	fb05 c91b 	mls	r9, r5, fp, ip
    1f04:	f89e e001 	ldrb.w	lr, [lr, #1]
    1f08:	f801 e009 	strb.w	lr, [r1, r9]
    1f0c:	f103 0b03 	add.w	fp, r3, #3
    1f10:	4493      	add	fp, r2
    1f12:	f893 e003 	ldrb.w	lr, [r3, #3]
    1f16:	6821      	ldr	r1, [r4, #0]
    1f18:	fbbb fcf5 	udiv	ip, fp, r5
    1f1c:	3304      	adds	r3, #4
    1f1e:	fb05 b91c 	mls	r9, r5, ip, fp
        for (idx = 0; idx < ui32SRAMSpace; idx++)
    1f22:	4298      	cmp	r0, r3
            g_sSRAMBuffer.pui8Data[(idx + writeIdx) % capacity] = pui8Data[idx];
    1f24:	f801 e009 	strb.w	lr, [r1, r9]
        for (idx = 0; idx < ui32SRAMSpace; idx++)
    1f28:	d1cd      	bne.n	1ec6 <am_hal_ios_fifo_write+0xba>
        g_sSRAMBuffer.ui32WriteIndex = (idx + writeIdx) % capacity;
    1f2a:	44ba      	add	sl, r7
        ui32Primask = am_hal_interrupt_master_disable();
    1f2c:	f7ff fc5e 	bl	17ec <am_hal_interrupt_master_disable>
        g_sSRAMBuffer.ui32WriteIndex = (idx + writeIdx) % capacity;
    1f30:	fbba f2f5 	udiv	r2, sl, r5
    1f34:	fb05 a312 	mls	r3, r5, r2, sl
    1f38:	6063      	str	r3, [r4, #4]
        g_sSRAMBuffer.ui32Length += idx;
    1f3a:	68e5      	ldr	r5, [r4, #12]
    1f3c:	443d      	add	r5, r7
    1f3e:	60e5      	str	r5, [r4, #12]
        am_hal_interrupt_master_set(ui32Primask);
    1f40:	f7ff fc58 	bl	17f4 <am_hal_interrupt_master_set>
        if (fifoSize <= AM_BFR(IOSLAVE, FIFOTHR, FIFOTHR))
    1f44:	4c51      	ldr	r4, [pc, #324]	; (208c <am_hal_ios_fifo_write+0x280>)
        fifoSize = AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ);
    1f46:	4852      	ldr	r0, [pc, #328]	; (2090 <am_hal_ios_fifo_write+0x284>)
    1f48:	6801      	ldr	r1, [r0, #0]
        if (fifoSize <= AM_BFR(IOSLAVE, FIFOTHR, FIFOTHR))
    1f4a:	6823      	ldr	r3, [r4, #0]
        fifoSize = AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ);
    1f4c:	f3c1 2a07 	ubfx	sl, r1, #8, #8
        if (fifoSize <= AM_BFR(IOSLAVE, FIFOTHR, FIFOTHR))
    1f50:	b2da      	uxtb	r2, r3
    1f52:	4592      	cmp	sl, r2
        ui32NumBytes -= idx;
    1f54:	eba8 0707 	sub.w	r7, r8, r7
        if (fifoSize <= AM_BFR(IOSLAVE, FIFOTHR, FIFOTHR))
    1f58:	d804      	bhi.n	1f64 <am_hal_ios_fifo_write+0x158>
            AM_BFW(IOSLAVE, INTSET, FSIZE, 1);
    1f5a:	4d4e      	ldr	r5, [pc, #312]	; (2094 <am_hal_ios_fifo_write+0x288>)
    1f5c:	6828      	ldr	r0, [r5, #0]
    1f5e:	f040 0401 	orr.w	r4, r0, #1
    1f62:	602c      	str	r4, [r5, #0]
    return (totalBytes - ui32NumBytes);
    1f64:	1bf6      	subs	r6, r6, r7
}
    1f66:	4630      	mov	r0, r6
    1f68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return ((uint32_t)g_ui32HwFifoSize- AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ) - 1);
    1f6c:	4d48      	ldr	r5, [pc, #288]	; (2090 <am_hal_ios_fifo_write+0x284>)
    1f6e:	f8df a134 	ldr.w	sl, [pc, #308]	; 20a4 <am_hal_ios_fifo_write+0x298>
    1f72:	682b      	ldr	r3, [r5, #0]
    1f74:	f89a 8000 	ldrb.w	r8, [sl]
    1f78:	f3c3 2007 	ubfx	r0, r3, #8, #8
    1f7c:	f108 31ff 	add.w	r1, r8, #4294967295
    1f80:	1a08      	subs	r0, r1, r0
        if ( ui32NumBytes <= ui32FIFOSpace )
    1f82:	4286      	cmp	r6, r0
    1f84:	4b44      	ldr	r3, [pc, #272]	; (2098 <am_hal_ios_fifo_write+0x28c>)
    1f86:	f240 8091 	bls.w	20ac <am_hal_ios_fifo_write+0x2a0>
    while ( ui32NumBytes )
    1f8a:	2800      	cmp	r0, #0
    1f8c:	f000 8125 	beq.w	21da <am_hal_ios_fifo_write+0x3ce>
    1f90:	6819      	ldr	r1, [r3, #0]
    1f92:	f8df e10c 	ldr.w	lr, [pc, #268]	; 20a0 <am_hal_ios_fifo_write+0x294>
            g_pui8FIFOPtr = g_pui8FIFOBase;
    1f96:	f8df c110 	ldr.w	ip, [pc, #272]	; 20a8 <am_hal_ios_fifo_write+0x29c>
        *g_pui8FIFOPtr++ = *pui8Data++;
    1f9a:	1c4d      	adds	r5, r1, #1
    1f9c:	464a      	mov	r2, r9
    1f9e:	601d      	str	r5, [r3, #0]
    1fa0:	f812 5b01 	ldrb.w	r5, [r2], #1
    1fa4:	700d      	strb	r5, [r1, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1fa6:	681d      	ldr	r5, [r3, #0]
    1fa8:	f8de 1000 	ldr.w	r1, [lr]
    1fac:	eb09 0b00 	add.w	fp, r9, r0
    1fb0:	ea6f 0909 	mvn.w	r9, r9
    1fb4:	44d9      	add	r9, fp
    1fb6:	428d      	cmp	r5, r1
    1fb8:	f009 0803 	and.w	r8, r9, #3
    1fbc:	f000 8109 	beq.w	21d2 <am_hal_ios_fifo_write+0x3c6>
    while ( ui32NumBytes )
    1fc0:	455a      	cmp	r2, fp
    1fc2:	f000 80e8 	beq.w	2196 <am_hal_ios_fifo_write+0x38a>
    1fc6:	f1b8 0f00 	cmp.w	r8, #0
    1fca:	d02d      	beq.n	2028 <am_hal_ios_fifo_write+0x21c>
    1fcc:	f1b8 0f01 	cmp.w	r8, #1
    1fd0:	d01a      	beq.n	2008 <am_hal_ios_fifo_write+0x1fc>
    1fd2:	f1b8 0f02 	cmp.w	r8, #2
    1fd6:	d00b      	beq.n	1ff0 <am_hal_ios_fifo_write+0x1e4>
        *g_pui8FIFOPtr++ = *pui8Data++;
    1fd8:	1c69      	adds	r1, r5, #1
    1fda:	6019      	str	r1, [r3, #0]
    1fdc:	f812 1b01 	ldrb.w	r1, [r2], #1
    1fe0:	7029      	strb	r1, [r5, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1fe2:	681d      	ldr	r5, [r3, #0]
    1fe4:	f8de 1000 	ldr.w	r1, [lr]
    1fe8:	428d      	cmp	r5, r1
            g_pui8FIFOPtr = g_pui8FIFOBase;
    1fea:	bf08      	it	eq
    1fec:	f8dc 5000 	ldreq.w	r5, [ip]
        *g_pui8FIFOPtr++ = *pui8Data++;
    1ff0:	1c69      	adds	r1, r5, #1
    1ff2:	6019      	str	r1, [r3, #0]
    1ff4:	f812 1b01 	ldrb.w	r1, [r2], #1
    1ff8:	7029      	strb	r1, [r5, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    1ffa:	681d      	ldr	r5, [r3, #0]
    1ffc:	f8de 1000 	ldr.w	r1, [lr]
    2000:	428d      	cmp	r5, r1
            g_pui8FIFOPtr = g_pui8FIFOBase;
    2002:	bf08      	it	eq
    2004:	f8dc 5000 	ldreq.w	r5, [ip]
        *g_pui8FIFOPtr++ = *pui8Data++;
    2008:	1c69      	adds	r1, r5, #1
    200a:	6019      	str	r1, [r3, #0]
    200c:	f812 1b01 	ldrb.w	r1, [r2], #1
    2010:	7029      	strb	r1, [r5, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    2012:	681d      	ldr	r5, [r3, #0]
    2014:	f8de 1000 	ldr.w	r1, [lr]
    2018:	428d      	cmp	r5, r1
            g_pui8FIFOPtr = g_pui8FIFOBase;
    201a:	bf04      	itt	eq
    201c:	f8dc 5000 	ldreq.w	r5, [ip]
    2020:	601d      	streq	r5, [r3, #0]
    while ( ui32NumBytes )
    2022:	455a      	cmp	r2, fp
    2024:	f000 80b7 	beq.w	2196 <am_hal_ios_fifo_write+0x38a>
        *g_pui8FIFOPtr++ = *pui8Data++;
    2028:	4611      	mov	r1, r2
    202a:	1c6a      	adds	r2, r5, #1
    202c:	601a      	str	r2, [r3, #0]
    202e:	f811 2b01 	ldrb.w	r2, [r1], #1
    2032:	702a      	strb	r2, [r5, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    2034:	681d      	ldr	r5, [r3, #0]
    2036:	f8de 2000 	ldr.w	r2, [lr]
    203a:	4295      	cmp	r5, r2
            g_pui8FIFOPtr = g_pui8FIFOBase;
    203c:	bf08      	it	eq
    203e:	f8dc 5000 	ldreq.w	r5, [ip]
        *g_pui8FIFOPtr++ = *pui8Data++;
    2042:	1c6a      	adds	r2, r5, #1
    2044:	601a      	str	r2, [r3, #0]
    2046:	780a      	ldrb	r2, [r1, #0]
    2048:	702a      	strb	r2, [r5, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    204a:	681d      	ldr	r5, [r3, #0]
    204c:	f8de 2000 	ldr.w	r2, [lr]
    2050:	4295      	cmp	r5, r2
    2052:	f000 80b4 	beq.w	21be <am_hal_ios_fifo_write+0x3b2>
        *g_pui8FIFOPtr++ = *pui8Data++;
    2056:	f105 0801 	add.w	r8, r5, #1
    205a:	f8c3 8000 	str.w	r8, [r3]
    205e:	1cca      	adds	r2, r1, #3
    2060:	7849      	ldrb	r1, [r1, #1]
    2062:	7029      	strb	r1, [r5, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    2064:	681d      	ldr	r5, [r3, #0]
    2066:	f8de 1000 	ldr.w	r1, [lr]
    206a:	428d      	cmp	r5, r1
            g_pui8FIFOPtr = g_pui8FIFOBase;
    206c:	bf08      	it	eq
    206e:	f8dc 5000 	ldreq.w	r5, [ip]
        *g_pui8FIFOPtr++ = *pui8Data++;
    2072:	1c69      	adds	r1, r5, #1
    2074:	6019      	str	r1, [r3, #0]
    2076:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    207a:	e7c9      	b.n	2010 <am_hal_ios_fifo_write+0x204>
    am_hal_debug_assert(g_sSRAMBuffer.pui8Data != 0);
    207c:	f240 31e7 	movw	r1, #999	; 0x3e7
    2080:	4806      	ldr	r0, [pc, #24]	; (209c <am_hal_ios_fifo_write+0x290>)
    2082:	f7ff fb81 	bl	1788 <am_hal_debug_error>
    2086:	e6ca      	b.n	1e1e <am_hal_ios_fifo_write+0x12>
    2088:	10001784 	.word	0x10001784
    208c:	50000108 	.word	0x50000108
    2090:	50000100 	.word	0x50000100
    2094:	5000020c 	.word	0x5000020c
    2098:	10001044 	.word	0x10001044
    209c:	000025bc 	.word	0x000025bc
    20a0:	10001040 	.word	0x10001040
    20a4:	10001158 	.word	0x10001158
    20a8:	1000103c 	.word	0x1000103c
    20ac:	681c      	ldr	r4, [r3, #0]
    20ae:	4d55      	ldr	r5, [pc, #340]	; (2204 <am_hal_ios_fifo_write+0x3f8>)
            g_pui8FIFOPtr = g_pui8FIFOBase;
    20b0:	f8df b15c 	ldr.w	fp, [pc, #348]	; 2210 <am_hal_ios_fifo_write+0x404>
        *g_pui8FIFOPtr++ = *pui8Data++;
    20b4:	1c60      	adds	r0, r4, #1
    20b6:	46ce      	mov	lr, r9
    20b8:	6018      	str	r0, [r3, #0]
    20ba:	f81e 2b01 	ldrb.w	r2, [lr], #1
    20be:	7022      	strb	r2, [r4, #0]
    20c0:	1e72      	subs	r2, r6, #1
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    20c2:	681c      	ldr	r4, [r3, #0]
    20c4:	f002 0003 	and.w	r0, r2, #3
    20c8:	682a      	ldr	r2, [r5, #0]
    20ca:	42a2      	cmp	r2, r4
    20cc:	44b1      	add	r9, r6
    20ce:	d07c      	beq.n	21ca <am_hal_ios_fifo_write+0x3be>
    while ( ui32NumBytes )
    20d0:	45f1      	cmp	r9, lr
    20d2:	d04f      	beq.n	2174 <am_hal_ios_fifo_write+0x368>
    20d4:	b338      	cbz	r0, 2126 <am_hal_ios_fifo_write+0x31a>
    20d6:	2801      	cmp	r0, #1
    20d8:	d017      	beq.n	210a <am_hal_ios_fifo_write+0x2fe>
    20da:	2802      	cmp	r0, #2
    20dc:	d00a      	beq.n	20f4 <am_hal_ios_fifo_write+0x2e8>
        *g_pui8FIFOPtr++ = *pui8Data++;
    20de:	1c60      	adds	r0, r4, #1
    20e0:	6018      	str	r0, [r3, #0]
    20e2:	f81e 2b01 	ldrb.w	r2, [lr], #1
    20e6:	7022      	strb	r2, [r4, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    20e8:	681c      	ldr	r4, [r3, #0]
    20ea:	6828      	ldr	r0, [r5, #0]
    20ec:	42a0      	cmp	r0, r4
            g_pui8FIFOPtr = g_pui8FIFOBase;
    20ee:	bf08      	it	eq
    20f0:	f8db 4000 	ldreq.w	r4, [fp]
        *g_pui8FIFOPtr++ = *pui8Data++;
    20f4:	1c62      	adds	r2, r4, #1
    20f6:	601a      	str	r2, [r3, #0]
    20f8:	f81e 0b01 	ldrb.w	r0, [lr], #1
    20fc:	7020      	strb	r0, [r4, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    20fe:	681c      	ldr	r4, [r3, #0]
    2100:	682a      	ldr	r2, [r5, #0]
    2102:	42a2      	cmp	r2, r4
            g_pui8FIFOPtr = g_pui8FIFOBase;
    2104:	bf08      	it	eq
    2106:	f8db 4000 	ldreq.w	r4, [fp]
        *g_pui8FIFOPtr++ = *pui8Data++;
    210a:	1c60      	adds	r0, r4, #1
    210c:	6018      	str	r0, [r3, #0]
    210e:	f81e 2b01 	ldrb.w	r2, [lr], #1
    2112:	7022      	strb	r2, [r4, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    2114:	681c      	ldr	r4, [r3, #0]
    2116:	682a      	ldr	r2, [r5, #0]
    2118:	42a2      	cmp	r2, r4
            g_pui8FIFOPtr = g_pui8FIFOBase;
    211a:	bf04      	itt	eq
    211c:	f8db 4000 	ldreq.w	r4, [fp]
    2120:	601c      	streq	r4, [r3, #0]
    while ( ui32NumBytes )
    2122:	45f1      	cmp	r9, lr
    2124:	d026      	beq.n	2174 <am_hal_ios_fifo_write+0x368>
        *g_pui8FIFOPtr++ = *pui8Data++;
    2126:	1c60      	adds	r0, r4, #1
    2128:	46f4      	mov	ip, lr
    212a:	6018      	str	r0, [r3, #0]
    212c:	f81c 2b01 	ldrb.w	r2, [ip], #1
    2130:	7022      	strb	r2, [r4, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    2132:	681c      	ldr	r4, [r3, #0]
    2134:	6829      	ldr	r1, [r5, #0]
    2136:	42a1      	cmp	r1, r4
            g_pui8FIFOPtr = g_pui8FIFOBase;
    2138:	bf08      	it	eq
    213a:	f8db 4000 	ldreq.w	r4, [fp]
        *g_pui8FIFOPtr++ = *pui8Data++;
    213e:	1c60      	adds	r0, r4, #1
    2140:	6018      	str	r0, [r3, #0]
    2142:	f89c 2000 	ldrb.w	r2, [ip]
    2146:	7022      	strb	r2, [r4, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    2148:	681c      	ldr	r4, [r3, #0]
    214a:	6829      	ldr	r1, [r5, #0]
    214c:	42a1      	cmp	r1, r4
    214e:	d039      	beq.n	21c4 <am_hal_ios_fifo_write+0x3b8>
        *g_pui8FIFOPtr++ = *pui8Data++;
    2150:	1c60      	adds	r0, r4, #1
    2152:	6018      	str	r0, [r3, #0]
    2154:	f89c 2001 	ldrb.w	r2, [ip, #1]
    2158:	7022      	strb	r2, [r4, #0]
        if ( g_pui8FIFOPtr == g_pui8FIFOEnd )
    215a:	681c      	ldr	r4, [r3, #0]
    215c:	6829      	ldr	r1, [r5, #0]
    215e:	42a1      	cmp	r1, r4
            g_pui8FIFOPtr = g_pui8FIFOBase;
    2160:	bf08      	it	eq
    2162:	f8db 4000 	ldreq.w	r4, [fp]
        *g_pui8FIFOPtr++ = *pui8Data++;
    2166:	f10c 0e03 	add.w	lr, ip, #3
    216a:	1c60      	adds	r0, r4, #1
    216c:	6018      	str	r0, [r3, #0]
    216e:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
    2172:	e7ce      	b.n	2112 <am_hal_ios_fifo_write+0x306>
    ui32Primask = am_hal_interrupt_master_disable();
    2174:	f7ff fb3a 	bl	17ec <am_hal_interrupt_master_disable>
    internal_resync_fifoSize(wrOffset, g_ui32HwFifoSize, AM_REG_IOS_FIFOPTR);
    2178:	f89a 1000 	ldrb.w	r1, [sl]
    217c:	4a22      	ldr	r2, [pc, #136]	; (2208 <am_hal_ios_fifo_write+0x3fc>)
    ui32Primask = am_hal_interrupt_master_disable();
    217e:	4680      	mov	r8, r0
    internal_resync_fifoSize(wrOffset, g_ui32HwFifoSize, AM_REG_IOS_FIFOPTR);
    2180:	f104 4030 	add.w	r0, r4, #2952790016	; 0xb0000000
    2184:	f7ff fb3a 	bl	17fc <internal_resync_fifoSize>
    AM_REG(IOSLAVE, REGACCINTCLR) = (AM_HAL_IOS_INT_FSIZE | AM_HAL_IOS_INT_FOVFL | AM_HAL_IOS_INT_FUNDFL);
    2188:	4b20      	ldr	r3, [pc, #128]	; (220c <am_hal_ios_fifo_write+0x400>)
    218a:	2107      	movs	r1, #7
    am_hal_interrupt_master_set(ui32Primask);
    218c:	4640      	mov	r0, r8
    AM_REG(IOSLAVE, REGACCINTCLR) = (AM_HAL_IOS_INT_FSIZE | AM_HAL_IOS_INT_FOVFL | AM_HAL_IOS_INT_FUNDFL);
    218e:	6019      	str	r1, [r3, #0]
    am_hal_interrupt_master_set(ui32Primask);
    2190:	f7ff fb30 	bl	17f4 <am_hal_interrupt_master_set>
    2194:	e6e6      	b.n	1f64 <am_hal_ios_fifo_write+0x158>
            ui32NumBytes -= ui32FIFOSpace;
    2196:	eba6 0800 	sub.w	r8, r6, r0
    ui32Primask = am_hal_interrupt_master_disable();
    219a:	f7ff fb27 	bl	17ec <am_hal_interrupt_master_disable>
    internal_resync_fifoSize(wrOffset, g_ui32HwFifoSize, AM_REG_IOS_FIFOPTR);
    219e:	4a1a      	ldr	r2, [pc, #104]	; (2208 <am_hal_ios_fifo_write+0x3fc>)
    21a0:	f89a 1000 	ldrb.w	r1, [sl]
    ui32Primask = am_hal_interrupt_master_disable();
    21a4:	4681      	mov	r9, r0
    internal_resync_fifoSize(wrOffset, g_ui32HwFifoSize, AM_REG_IOS_FIFOPTR);
    21a6:	f105 4030 	add.w	r0, r5, #2952790016	; 0xb0000000
    21aa:	f7ff fb27 	bl	17fc <internal_resync_fifoSize>
    AM_REG(IOSLAVE, REGACCINTCLR) = (AM_HAL_IOS_INT_FSIZE | AM_HAL_IOS_INT_FOVFL | AM_HAL_IOS_INT_FUNDFL);
    21ae:	4b17      	ldr	r3, [pc, #92]	; (220c <am_hal_ios_fifo_write+0x400>)
    21b0:	2207      	movs	r2, #7
    am_hal_interrupt_master_set(ui32Primask);
    21b2:	4648      	mov	r0, r9
    AM_REG(IOSLAVE, REGACCINTCLR) = (AM_HAL_IOS_INT_FSIZE | AM_HAL_IOS_INT_FOVFL | AM_HAL_IOS_INT_FUNDFL);
    21b4:	601a      	str	r2, [r3, #0]
    am_hal_interrupt_master_set(ui32Primask);
    21b6:	f7ff fb1d 	bl	17f4 <am_hal_interrupt_master_set>
            pui8Data += ui32FIFOSpace;
    21ba:	46d9      	mov	r9, fp
    21bc:	e63c      	b.n	1e38 <am_hal_ios_fifo_write+0x2c>
            g_pui8FIFOPtr = g_pui8FIFOBase;
    21be:	f8dc 5000 	ldr.w	r5, [ip]
    21c2:	e748      	b.n	2056 <am_hal_ios_fifo_write+0x24a>
    21c4:	f8db 4000 	ldr.w	r4, [fp]
    21c8:	e7c2      	b.n	2150 <am_hal_ios_fifo_write+0x344>
    21ca:	f8db 4000 	ldr.w	r4, [fp]
    21ce:	601c      	str	r4, [r3, #0]
    21d0:	e77e      	b.n	20d0 <am_hal_ios_fifo_write+0x2c4>
    21d2:	f8dc 5000 	ldr.w	r5, [ip]
    21d6:	601d      	str	r5, [r3, #0]
    21d8:	e6f2      	b.n	1fc0 <am_hal_ios_fifo_write+0x1b4>
    uint32_t wrOffset = (uint32_t)g_pui8FIFOPtr - (uint32_t)am_hal_ios_pui8LRAM;
    21da:	681a      	ldr	r2, [r3, #0]
    21dc:	f102 4830 	add.w	r8, r2, #2952790016	; 0xb0000000
    ui32Primask = am_hal_interrupt_master_disable();
    21e0:	f7ff fb04 	bl	17ec <am_hal_interrupt_master_disable>
    internal_resync_fifoSize(wrOffset, g_ui32HwFifoSize, AM_REG_IOS_FIFOPTR);
    21e4:	462a      	mov	r2, r5
    ui32Primask = am_hal_interrupt_master_disable();
    21e6:	4683      	mov	fp, r0
    internal_resync_fifoSize(wrOffset, g_ui32HwFifoSize, AM_REG_IOS_FIFOPTR);
    21e8:	f89a 1000 	ldrb.w	r1, [sl]
    AM_REG(IOSLAVE, REGACCINTCLR) = (AM_HAL_IOS_INT_FSIZE | AM_HAL_IOS_INT_FOVFL | AM_HAL_IOS_INT_FUNDFL);
    21ec:	4d07      	ldr	r5, [pc, #28]	; (220c <am_hal_ios_fifo_write+0x400>)
    internal_resync_fifoSize(wrOffset, g_ui32HwFifoSize, AM_REG_IOS_FIFOPTR);
    21ee:	4640      	mov	r0, r8
    21f0:	f7ff fb04 	bl	17fc <internal_resync_fifoSize>
    AM_REG(IOSLAVE, REGACCINTCLR) = (AM_HAL_IOS_INT_FSIZE | AM_HAL_IOS_INT_FOVFL | AM_HAL_IOS_INT_FUNDFL);
    21f4:	2107      	movs	r1, #7
    am_hal_interrupt_master_set(ui32Primask);
    21f6:	4658      	mov	r0, fp
    AM_REG(IOSLAVE, REGACCINTCLR) = (AM_HAL_IOS_INT_FSIZE | AM_HAL_IOS_INT_FOVFL | AM_HAL_IOS_INT_FUNDFL);
    21f8:	6029      	str	r1, [r5, #0]
    21fa:	46cb      	mov	fp, r9
    am_hal_interrupt_master_set(ui32Primask);
    21fc:	f7ff fafa 	bl	17f4 <am_hal_interrupt_master_set>
            ui32NumBytes -= ui32FIFOSpace;
    2200:	46b0      	mov	r8, r6
    2202:	e7da      	b.n	21ba <am_hal_ios_fifo_write+0x3ae>
    2204:	10001040 	.word	0x10001040
    2208:	50000100 	.word	0x50000100
    220c:	50000218 	.word	0x50000218
    2210:	1000103c 	.word	0x1000103c

00002214 <am_hal_ios_fifo_buffer_init>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ios_fifo_buffer_init(uint8_t *pui8Buffer, uint32_t ui32NumBytes)
{
    2214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    psBuffer->ui32WriteIndex = 0;
    2216:	4b16      	ldr	r3, [pc, #88]	; (2270 <am_hal_ios_fifo_buffer_init+0x5c>)
    am_hal_ios_buffer_init(&g_sSRAMBuffer, pui8Buffer, ui32NumBytes);

    //
    // Clear the FIFO State
    //
    AM_BFW(IOSLAVE, FIFOCTR, FIFOCTR, 0x0);
    2218:	4e16      	ldr	r6, [pc, #88]	; (2274 <am_hal_ios_fifo_buffer_init+0x60>)
    psBuffer->pui8Data = (uint8_t *)pvArray;
    221a:	6018      	str	r0, [r3, #0]
    psBuffer->ui32WriteIndex = 0;
    221c:	2400      	movs	r4, #0
    221e:	605c      	str	r4, [r3, #4]
    psBuffer->ui32ReadIndex = 0;
    2220:	609c      	str	r4, [r3, #8]
    psBuffer->ui32Length = 0;
    2222:	60dc      	str	r4, [r3, #12]
    AM_BFW(IOSLAVE, FIFOCTR, FIFOCTR, 0x0);
    2224:	6830      	ldr	r0, [r6, #0]
    if (ui32NumBytes > (1023 - g_ui32HwFifoSize + 1))
    2226:	4a14      	ldr	r2, [pc, #80]	; (2278 <am_hal_ios_fifo_buffer_init+0x64>)
    AM_BFW(IOSLAVE, FIFOPTR, FIFOSIZ, 0x0);
    2228:	4d14      	ldr	r5, [pc, #80]	; (227c <am_hal_ios_fifo_buffer_init+0x68>)
    if (ui32NumBytes > (1023 - g_ui32HwFifoSize + 1))
    222a:	f892 c000 	ldrb.w	ip, [r2]

    am_hal_ios_fifo_ptr_set(g_ui32FifoBaseOffset);
    222e:	4f14      	ldr	r7, [pc, #80]	; (2280 <am_hal_ios_fifo_buffer_init+0x6c>)
    AM_BFW(IOSLAVE, FIFOCTR, FIFOCTR, 0x0);
    2230:	f420 7e7f 	bic.w	lr, r0, #1020	; 0x3fc
    2234:	f02e 0003 	bic.w	r0, lr, #3
    2238:	6030      	str	r0, [r6, #0]
    AM_BFW(IOSLAVE, FIFOPTR, FIFOSIZ, 0x0);
    223a:	682e      	ldr	r6, [r5, #0]
    if (ui32NumBytes > (1023 - g_ui32HwFifoSize + 1))
    223c:	f5cc 6280 	rsb	r2, ip, #1024	; 0x400
    AM_BFW(IOSLAVE, FIFOPTR, FIFOSIZ, 0x0);
    2240:	f426 407f 	bic.w	r0, r6, #65280	; 0xff00
    2244:	4291      	cmp	r1, r2
    2246:	6028      	str	r0, [r5, #0]
    2248:	bf28      	it	cs
    224a:	4611      	movcs	r1, r2
    am_hal_ios_fifo_ptr_set(g_ui32FifoBaseOffset);
    224c:	683f      	ldr	r7, [r7, #0]
    psBuffer->ui32Capacity = ui32Bytes;
    224e:	6119      	str	r1, [r3, #16]
    g_pui8FIFOPtr = (uint8_t *) (REG_IOSLAVE_BASEADDR + ui32Offset);
    2250:	4e0c      	ldr	r6, [pc, #48]	; (2284 <am_hal_ios_fifo_buffer_init+0x70>)
    ui32Primask = am_hal_interrupt_master_disable();
    2252:	f7ff facb 	bl	17ec <am_hal_interrupt_master_disable>
    AM_REG(IOSLAVE, FUPD) = 0x1;
    2256:	4b0c      	ldr	r3, [pc, #48]	; (2288 <am_hal_ios_fifo_buffer_init+0x74>)
    g_pui8FIFOPtr = (uint8_t *) (REG_IOSLAVE_BASEADDR + ui32Offset);
    2258:	f107 42a0 	add.w	r2, r7, #1342177280	; 0x50000000
    AM_REG(IOSLAVE, FUPD) = 0x1;
    225c:	2101      	movs	r1, #1
    225e:	6019      	str	r1, [r3, #0]
    AM_REG(IOSLAVE, FIFOPTR) = ui32Offset;
    2260:	602f      	str	r7, [r5, #0]
    AM_REG(IOSLAVE, FUPD) = 0x0;
    2262:	601c      	str	r4, [r3, #0]
    g_pui8FIFOPtr = (uint8_t *) (REG_IOSLAVE_BASEADDR + ui32Offset);
    2264:	6032      	str	r2, [r6, #0]
}
    2266:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    am_hal_interrupt_master_set(ui32Primask);
    226a:	f7ff bac3 	b.w	17f4 <am_hal_interrupt_master_set>
    226e:	bf00      	nop
    2270:	10001784 	.word	0x10001784
    2274:	50000110 	.word	0x50000110
    2278:	10001158 	.word	0x10001158
    227c:	50000100 	.word	0x50000100
    2280:	10001154 	.word	0x10001154
    2284:	10001044 	.word	0x10001044
    2288:	5000010c 	.word	0x5000010c

0000228c <am_hal_ios_update_fifoctr>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ios_update_fifoctr(void)
{
    228c:	b510      	push	{r4, lr}
    ui32Primask = am_hal_interrupt_master_disable();
    228e:	f7ff faad 	bl	17ec <am_hal_interrupt_master_disable>
    ui32Val = g_sSRAMBuffer.ui32Length;
    2292:	4b0a      	ldr	r3, [pc, #40]	; (22bc <am_hal_ios_update_fifoctr+0x30>)
    ui32Val += AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ);
    2294:	4a0a      	ldr	r2, [pc, #40]	; (22c0 <am_hal_ios_update_fifoctr+0x34>)
    ui32Val = g_sSRAMBuffer.ui32Length;
    2296:	68d9      	ldr	r1, [r3, #12]
    ui32Val += AM_BFR(IOSLAVE, FIFOPTR, FIFOSIZ);
    2298:	6814      	ldr	r4, [r2, #0]
    229a:	f3c4 2407 	ubfx	r4, r4, #8, #8
    229e:	440c      	add	r4, r1
    am_hal_interrupt_master_set(ui32Primask);
    22a0:	f7ff faa8 	bl	17f4 <am_hal_interrupt_master_set>
    uint32_t ui32Val;
    // Determine the available data
    ui32Val = am_hal_ios_fifo_space_used();
    // Update FIFOCTR
    AM_BFW(IOSLAVE, FIFOCTR, FIFOCTR, ui32Val);
    22a4:	4807      	ldr	r0, [pc, #28]	; (22c4 <am_hal_ios_update_fifoctr+0x38>)
    22a6:	6803      	ldr	r3, [r0, #0]
    22a8:	f423 727f 	bic.w	r2, r3, #1020	; 0x3fc
    22ac:	f3c4 0109 	ubfx	r1, r4, #0, #10
    22b0:	f022 0403 	bic.w	r4, r2, #3
    22b4:	430c      	orrs	r4, r1
    22b6:	6004      	str	r4, [r0, #0]
    22b8:	bd10      	pop	{r4, pc}
    22ba:	bf00      	nop
    22bc:	10001784 	.word	0x10001784
    22c0:	50000100 	.word	0x50000100
    22c4:	50000110 	.word	0x50000110

000022c8 <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    22c8:	4b0d      	ldr	r3, [pc, #52]	; (2300 <am_hal_itm_enable+0x38>)
    22ca:	6818      	ldr	r0, [r3, #0]
    22cc:	07c2      	lsls	r2, r0, #31
    22ce:	d416      	bmi.n	22fe <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    22d0:	4a0c      	ldr	r2, [pc, #48]	; (2304 <am_hal_itm_enable+0x3c>)
    22d2:	6811      	ldr	r1, [r2, #0]
{
    22d4:	b430      	push	{r4, r5}
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    22d6:	f041 7480 	orr.w	r4, r1, #16777216	; 0x1000000
    22da:	6014      	str	r4, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    22dc:	6815      	ldr	r5, [r2, #0]
    22de:	01eb      	lsls	r3, r5, #7
    22e0:	d5fc      	bpl.n	22dc <am_hal_itm_enable+0x14>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    22e2:	4809      	ldr	r0, [pc, #36]	; (2308 <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    22e4:	4c09      	ldr	r4, [pc, #36]	; (230c <am_hal_itm_enable+0x44>)
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    22e6:	4d0a      	ldr	r5, [pc, #40]	; (2310 <am_hal_itm_enable+0x48>)
    22e8:	6005      	str	r5, [r0, #0]
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    22ea:	250f      	movs	r5, #15
    22ec:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    22ee:	bc30      	pop	{r4, r5}
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    22f0:	4908      	ldr	r1, [pc, #32]	; (2314 <am_hal_itm_enable+0x4c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    22f2:	4b09      	ldr	r3, [pc, #36]	; (2318 <am_hal_itm_enable+0x50>)
    22f4:	4a09      	ldr	r2, [pc, #36]	; (231c <am_hal_itm_enable+0x54>)
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    22f6:	f04f 30ff 	mov.w	r0, #4294967295
    22fa:	6008      	str	r0, [r1, #0]
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    22fc:	601a      	str	r2, [r3, #0]
}
    22fe:	4770      	bx	lr
    2300:	10001150 	.word	0x10001150
    2304:	e000edfc 	.word	0xe000edfc
    2308:	e0000fb0 	.word	0xe0000fb0
    230c:	e0000e40 	.word	0xe0000e40
    2310:	c5acce55 	.word	0xc5acce55
    2314:	e0000e00 	.word	0xe0000e00
    2318:	e0000e80 	.word	0xe0000e80
    231c:	00150511 	.word	0x00150511

00002320 <am_hal_itm_print>:
    uint32_t ui32Idx;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    2320:	7803      	ldrb	r3, [r0, #0]
    2322:	b1b3      	cbz	r3, 2352 <am_hal_itm_print+0x32>
{
    2324:	b410      	push	{r4}
    2326:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    2328:	2400      	movs	r4, #0
    232a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    232e:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    2330:	2900      	cmp	r1, #0
    2332:	d1fa      	bne.n	232a <am_hal_itm_print+0xa>
    2334:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    2336:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
        else
        {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    233a:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    233e:	f8dc 3000 	ldr.w	r3, [ip]
    2342:	2b00      	cmp	r3, #0
    2344:	d0fb      	beq.n	233e <am_hal_itm_print+0x1e>
    while (ui32Length)
    2346:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    2348:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    234c:	d1f5      	bne.n	233a <am_hal_itm_print+0x1a>
            // Subtract from length.
            //
            ui32Length--;
        }
    }
}
    234e:	f85d 4b04 	ldr.w	r4, [sp], #4
    2352:	4770      	bx	lr

00002354 <am_hal_mcuctrl_bandgap_disable>:
am_hal_mcuctrl_bandgap_disable(void)
{
    //
    // Disable the Bandgap in the MCUCTRL.
    //
    AM_REG(MCUCTRL, BANDGAPEN) = ~AM_REG_MCUCTRL_BANDGAPEN_BGPEN_M;
    2354:	4b02      	ldr	r3, [pc, #8]	; (2360 <am_hal_mcuctrl_bandgap_disable+0xc>)
    2356:	f06f 0201 	mvn.w	r2, #1
    235a:	601a      	str	r2, [r3, #0]
    235c:	4770      	bx	lr
    235e:	bf00      	nop
    2360:	400200fc 	.word	0x400200fc

00002364 <am_hal_mcuctrl_bucks_enable>:
am_hal_mcuctrl_bucks_enable(void)
{
    //
    // Enable the core buck converter in the MCUCTRL.
    //
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    2364:	4b08      	ldr	r3, [pc, #32]	; (2388 <am_hal_mcuctrl_bucks_enable+0x24>)
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Poll until core buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    2366:	4a09      	ldr	r2, [pc, #36]	; (238c <am_hal_mcuctrl_bucks_enable+0x28>)
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    2368:	6819      	ldr	r1, [r3, #0]
    236a:	f041 0002 	orr.w	r0, r1, #2
    236e:	6018      	str	r0, [r3, #0]
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    2370:	6819      	ldr	r1, [r3, #0]
    2372:	f041 0001 	orr.w	r0, r1, #1
    2376:	6018      	str	r0, [r3, #0]
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    2378:	6813      	ldr	r3, [r2, #0]
    237a:	0799      	lsls	r1, r3, #30
    237c:	d5fc      	bpl.n	2378 <am_hal_mcuctrl_bucks_enable+0x14>

    //
    // Poll until SRAM buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, MEMBUCKON) );
    237e:	4a03      	ldr	r2, [pc, #12]	; (238c <am_hal_mcuctrl_bucks_enable+0x28>)
    2380:	6811      	ldr	r1, [r2, #0]
    2382:	07cb      	lsls	r3, r1, #31
    2384:	d5fc      	bpl.n	2380 <am_hal_mcuctrl_bucks_enable+0x1c>
}
    2386:	4770      	bx	lr
    2388:	40020010 	.word	0x40020010
    238c:	40020014 	.word	0x40020014

00002390 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    2390:	4a05      	ldr	r2, [pc, #20]	; (23a8 <am_hal_rtc_osc_select+0x18>)
    2392:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    2394:	b918      	cbnz	r0, 239e <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    2396:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    239a:	6010      	str	r0, [r2, #0]
    239c:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    239e:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    23a2:	6011      	str	r1, [r2, #0]
    23a4:	4770      	bx	lr
    23a6:	bf00      	nop
    23a8:	4000400c 	.word	0x4000400c

000023ac <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_BFW(RTC, RTCCTL, RSTOP, 1);
    23ac:	4a02      	ldr	r2, [pc, #8]	; (23b8 <am_hal_rtc_osc_disable+0xc>)
    23ae:	6813      	ldr	r3, [r2, #0]
    23b0:	f043 0010 	orr.w	r0, r3, #16
    23b4:	6010      	str	r0, [r2, #0]
    23b6:	4770      	bx	lr
    23b8:	40004050 	.word	0x40004050

000023bc <am_hal_sysctrl_sleep>:
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    23bc:	4a08      	ldr	r2, [pc, #32]	; (23e0 <am_hal_sysctrl_sleep+0x24>)
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    23be:	b118      	cbz	r0, 23c8 <am_hal_sysctrl_sleep+0xc>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    23c0:	4b08      	ldr	r3, [pc, #32]	; (23e4 <am_hal_sysctrl_sleep+0x28>)
    23c2:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    23c4:	07c3      	lsls	r3, r0, #31
    23c6:	d505      	bpl.n	23d4 <am_hal_sysctrl_sleep+0x18>
    }
    else
    {
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    23c8:	6811      	ldr	r1, [r2, #0]
    23ca:	f021 0304 	bic.w	r3, r1, #4
    23ce:	6013      	str	r3, [r2, #0]
    }

    //
    // Go to sleep.
    //
    AM_ASM_WFI;
    23d0:	bf30      	wfi
    23d2:	4770      	bx	lr
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    23d4:	6810      	ldr	r0, [r2, #0]
    23d6:	f040 0104 	orr.w	r1, r0, #4
    23da:	6011      	str	r1, [r2, #0]
    AM_ASM_WFI;
    23dc:	bf30      	wfi
    23de:	4770      	bx	lr
    23e0:	e000ed10 	.word	0xe000ed10
    23e4:	40020250 	.word	0x40020250

000023e8 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    23e8:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    23ea:	4a24      	ldr	r2, [pc, #144]	; (247c <am_hal_tpiu_enable+0x94>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    23ec:	6803      	ldr	r3, [r0, #0]
    AM_REG(TPIU, FFCR) = 0;
    23ee:	2100      	movs	r1, #0
    23f0:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    23f2:	b313      	cbz	r3, 243a <am_hal_tpiu_enable+0x52>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    23f4:	f5a2 7c40 	sub.w	ip, r2, #768	; 0x300
    23f8:	2101      	movs	r1, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    23fa:	4c21      	ldr	r4, [pc, #132]	; (2480 <am_hal_tpiu_enable+0x98>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    23fc:	4d21      	ldr	r5, [pc, #132]	; (2484 <am_hal_tpiu_enable+0x9c>)
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    23fe:	f8cc 1000 	str.w	r1, [ip]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    2402:	f5a3 4e61 	sub.w	lr, r3, #57600	; 0xe100
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    2406:	45a6      	cmp	lr, r4
    2408:	bf94      	ite	ls
    240a:	461c      	movls	r4, r3
    240c:	462c      	movhi	r4, r5
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    240e:	f7ff f8a7 	bl	1560 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    2412:	1c43      	adds	r3, r0, #1
    2414:	d02f      	beq.n	2476 <am_hal_tpiu_enable+0x8e>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    2416:	08c2      	lsrs	r2, r0, #3
    2418:	fbb2 f3f4 	udiv	r3, r2, r4
    241c:	1e5d      	subs	r5, r3, #1
    241e:	b2a8      	uxth	r0, r5
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    2420:	4a19      	ldr	r2, [pc, #100]	; (2488 <am_hal_tpiu_enable+0xa0>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    2422:	4c1a      	ldr	r4, [pc, #104]	; (248c <am_hal_tpiu_enable+0xa4>)

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    2424:	491a      	ldr	r1, [pc, #104]	; (2490 <am_hal_tpiu_enable+0xa8>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    2426:	4b1b      	ldr	r3, [pc, #108]	; (2494 <am_hal_tpiu_enable+0xac>)
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    2428:	6010      	str	r0, [r2, #0]
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    242a:	2502      	movs	r5, #2
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    242c:	2000      	movs	r0, #0
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    242e:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    2432:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    2434:	6008      	str	r0, [r1, #0]
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    2436:	601a      	str	r2, [r3, #0]
    2438:	e010      	b.n	245c <am_hal_tpiu_enable+0x74>
        //

        //
        // Set the Asynchronous Clock Prescaler Register.
        //
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    243a:	4c13      	ldr	r4, [pc, #76]	; (2488 <am_hal_tpiu_enable+0xa0>)
    243c:	6905      	ldr	r5, [r0, #16]
    243e:	6025      	str	r5, [r4, #0]

        //
        // Set the Selected Pin Protocol Register.
        //  e.g. AM_REG_TPIU_SPPR_TXMODE_UART
        //
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    2440:	6882      	ldr	r2, [r0, #8]
    2442:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    2446:	68c3      	ldr	r3, [r0, #12]
    2448:	4c13      	ldr	r4, [pc, #76]	; (2498 <am_hal_tpiu_enable+0xb0>)

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    244a:	4912      	ldr	r1, [pc, #72]	; (2494 <am_hal_tpiu_enable+0xac>)
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    244c:	1e5d      	subs	r5, r3, #1
    244e:	2201      	movs	r2, #1
    2450:	40aa      	lsls	r2, r5
    2452:	6022      	str	r2, [r4, #0]
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    2454:	6840      	ldr	r0, [r0, #4]
    2456:	680b      	ldr	r3, [r1, #0]
    2458:	4303      	orrs	r3, r0
    245a:	600b      	str	r3, [r1, #0]
    }

    // wait for 50us for the data to flush out
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    245c:	f7ff f880 	bl	1560 <am_hal_clkgen_sysclk_get>
    2460:	4c0e      	ldr	r4, [pc, #56]	; (249c <am_hal_tpiu_enable+0xb4>)
    2462:	fba4 3100 	umull	r3, r1, r4, r0
    2466:	0c88      	lsrs	r0, r1, #18
    2468:	2332      	movs	r3, #50	; 0x32
    246a:	fb03 f000 	mul.w	r0, r3, r0
}
    246e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    2472:	f7ff b98b 	b.w	178c <am_hal_flash_delay>
    2476:	2002      	movs	r0, #2
    2478:	e7d2      	b.n	2420 <am_hal_tpiu_enable+0x38>
    247a:	bf00      	nop
    247c:	e0040304 	.word	0xe0040304
    2480:	001da380 	.word	0x001da380
    2484:	000f4240 	.word	0x000f4240
    2488:	e0040010 	.word	0xe0040010
    248c:	e00400f0 	.word	0xe00400f0
    2490:	e0040f00 	.word	0xe0040f00
    2494:	40020250 	.word	0x40020250
    2498:	e0040004 	.word	0xe0040004
    249c:	165e9f81 	.word	0x165e9f81

000024a0 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    24a0:	4b01      	ldr	r3, [pc, #4]	; (24a8 <am_hal_vcomp_disable+0x8>)
    24a2:	2237      	movs	r2, #55	; 0x37
    24a4:	601a      	str	r2, [r3, #0]
    24a6:	4770      	bx	lr
    24a8:	4000c008 	.word	0x4000c008
    24ac:	74746948 	.word	0x74746948
    24b0:	20676e69 	.word	0x20676e69
    24b4:	65646e75 	.word	0x65646e75
    24b8:	6f6c6672 	.word	0x6f6c6672
    24bc:	6f662077 	.word	0x6f662077
    24c0:	68742072 	.word	0x68742072
    24c4:	65722065 	.word	0x65722065
    24c8:	73657571 	.word	0x73657571
    24cc:	20646574 	.word	0x20646574
    24d0:	20534f49 	.word	0x20534f49
    24d4:	4f464946 	.word	0x4f464946
    24d8:	61727420 	.word	0x61727420
    24dc:	6566736e 	.word	0x6566736e
    24e0:	00000a72 	.word	0x00000a72
    24e4:	74746948 	.word	0x74746948
    24e8:	20676e69 	.word	0x20676e69
    24ec:	65646e75 	.word	0x65646e75
    24f0:	6f6c6672 	.word	0x6f6c6672
    24f4:	6f662077 	.word	0x6f662077
    24f8:	68742072 	.word	0x68742072
    24fc:	65722065 	.word	0x65722065
    2500:	73657571 	.word	0x73657571
    2504:	20646574 	.word	0x20646574
    2508:	20534f49 	.word	0x20534f49
    250c:	4f464946 	.word	0x4f464946
    2510:	61727420 	.word	0x61727420
    2514:	6566736e 	.word	0x6566736e
    2518:	00002e72 	.word	0x00002e72
    251c:	2e5c2e2e 	.word	0x2e5c2e2e
    2520:	72735c2e 	.word	0x72735c2e
    2524:	6f695c63 	.word	0x6f695c63
    2528:	69665f73 	.word	0x69665f73
    252c:	632e6f66 	.word	0x632e6f66
    2530:	00000000 	.word	0x00000000
    2534:	74746948 	.word	0x74746948
    2538:	20676e69 	.word	0x20676e69
    253c:	4f525245 	.word	0x4f525245
    2540:	61632052 	.word	0x61632052
    2544:	002e6573 	.word	0x002e6573
    2548:	0a0a0a0a 	.word	0x0a0a0a0a
    254c:	0a0a0a0a 	.word	0x0a0a0a0a
    2550:	0a0a0a0a 	.word	0x0a0a0a0a
    2554:	0a0a0a0a 	.word	0x0a0a0a0a
    2558:	00000a0a 	.word	0x00000a0a

0000255c <CSWTCH.4>:
    255c:	016e3600 00b71b00 007a1200 005b8d80     .6n.......z...[.
    256c:	00493e00 003d0900 003450db 002dc6c0     .>I...=..P4...-.
    257c:	6d695443 69207265 7265746e 74707572     CTimer interrupt
    258c:	6d756e20 20726562 2074756f 7220666f      number out of r
    259c:	65676e61 0000002e 2e5c2e2e 6d615c2e     ange......\..\am
    25ac:	6c61685f 6974635f 2e72656d 00000063     _hal_ctimer.c...
    25bc:	2e5c2e2e 6d615c2e 6c61685f 736f695f     ..\..\am_hal_ios
    25cc:	0000632e                                .c..

000025d0 <am_hal_ios_pui8LRAM>:
    25d0:	50000000                                ...P
