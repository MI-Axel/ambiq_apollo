
clkout_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b68  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000028  10001000  00001b68  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000010c  10001028  00001b90  00021028  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021028  2**0
                  CONTENTS, READONLY
  5 .debug_info   00004e12  00000000  00000000  0002105f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001974  00000000  00000000  00025e71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000005c8  00000000  00000000  000277e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000878  00000000  00000000  00027dad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002fd9  00000000  00000000  00028625  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001da8  00000000  00000000  0002b5fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  0002d3a6  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00000eb8  00000000  00000000  0002d424  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001139  00000000  00000000  0002e2dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 65 08 00 00 cd 08 00 00 d9 08 00 00     ....e...........
      10:	d9 08 00 00 d9 08 00 00 d9 08 00 00 00 00 00 00     ................
	...
      2c:	d3 08 00 00 d3 08 00 00 00 00 00 00 d3 08 00 00     ................
      3c:	d3 08 00 00 d3 08 00 00 d3 08 00 00 d3 08 00 00     ................
      4c:	d3 08 00 00 d3 08 00 00 d3 08 00 00 d3 08 00 00     ................
      5c:	d3 08 00 00 d3 08 00 00 d3 08 00 00 d3 08 00 00     ................
      6c:	d3 08 00 00 d3 08 00 00 d3 08 00 00 d3 08 00 00     ................
      7c:	d3 08 00 00                                         ....

00000080 <__aeabi_d2f>:
      80:	ea4f 0241 	mov.w	r2, r1, lsl #1
      84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      88:	bf24      	itt	cs
      8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      92:	d90d      	bls.n	b0 <__aeabi_d2f+0x30>
      94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      a8:	bf08      	it	eq
      aa:	f020 0001 	biceq.w	r0, r0, #1
      ae:	4770      	bx	lr
      b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      b4:	d121      	bne.n	fa <__aeabi_d2f+0x7a>
      b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      ba:	bfbc      	itt	lt
      bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
      c0:	4770      	bxlt	lr
      c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
      c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
      ca:	f1c2 0218 	rsb	r2, r2, #24
      ce:	f1c2 0c20 	rsb	ip, r2, #32
      d2:	fa10 f30c 	lsls.w	r3, r0, ip
      d6:	fa20 f002 	lsr.w	r0, r0, r2
      da:	bf18      	it	ne
      dc:	f040 0001 	orrne.w	r0, r0, #1
      e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
      e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
      e8:	fa03 fc0c 	lsl.w	ip, r3, ip
      ec:	ea40 000c 	orr.w	r0, r0, ip
      f0:	fa23 f302 	lsr.w	r3, r3, r2
      f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
      f8:	e7cc      	b.n	94 <__aeabi_d2f+0x14>
      fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
      fe:	d107      	bne.n	110 <__aeabi_d2f+0x90>
     100:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     104:	bf1e      	ittt	ne
     106:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     10a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     10e:	4770      	bxne	lr
     110:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     114:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     118:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     11c:	4770      	bx	lr
     11e:	bf00      	nop

00000120 <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
     120:	b490      	push	{r4, r7}
     122:	b082      	sub	sp, #8
     124:	af00      	add	r7, sp, #0
     126:	6078      	str	r0, [r7, #4]
    if ( (psLED == NULL)    ||
     128:	687b      	ldr	r3, [r7, #4]
     12a:	2b00      	cmp	r3, #0
     12c:	f000 8138 	beq.w	3a0 <am_devices_led_init+0x280>
         (psLED->ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
     130:	687b      	ldr	r3, [r7, #4]
     132:	681b      	ldr	r3, [r3, #0]
    if ( (psLED == NULL)    ||
     134:	2b31      	cmp	r3, #49	; 0x31
     136:	f200 8133 	bhi.w	3a0 <am_devices_led_init+0x280>
    }
#else
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
     13a:	687b      	ldr	r3, [r7, #4]
     13c:	685b      	ldr	r3, [r3, #4]
     13e:	f003 0302 	and.w	r3, r3, #2
     142:	2b00      	cmp	r3, #0
     144:	f000 8096 	beq.w	274 <am_devices_led_init+0x154>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT);
     148:	687b      	ldr	r3, [r7, #4]
     14a:	681b      	ldr	r3, [r3, #0]
     14c:	2b00      	cmp	r3, #0
     14e:	db4e      	blt.n	1ee <am_devices_led_init+0xce>
     150:	4b96      	ldr	r3, [pc, #600]	; (3ac <am_devices_led_init+0x28c>)
     152:	2273      	movs	r2, #115	; 0x73
     154:	601a      	str	r2, [r3, #0]
     156:	687b      	ldr	r3, [r7, #4]
     158:	681b      	ldr	r3, [r3, #0]
     15a:	085b      	lsrs	r3, r3, #1
     15c:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     160:	4b93      	ldr	r3, [pc, #588]	; (3b0 <am_devices_led_init+0x290>)
     162:	4413      	add	r3, r2
     164:	461c      	mov	r4, r3
     166:	687b      	ldr	r3, [r7, #4]
     168:	681b      	ldr	r3, [r3, #0]
     16a:	009b      	lsls	r3, r3, #2
     16c:	f003 031c 	and.w	r3, r3, #28
     170:	2202      	movs	r2, #2
     172:	409a      	lsls	r2, r3
     174:	687b      	ldr	r3, [r7, #4]
     176:	681b      	ldr	r3, [r3, #0]
     178:	085b      	lsrs	r3, r3, #1
     17a:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     17e:	4b8c      	ldr	r3, [pc, #560]	; (3b0 <am_devices_led_init+0x290>)
     180:	440b      	add	r3, r1
     182:	6819      	ldr	r1, [r3, #0]
     184:	687b      	ldr	r3, [r7, #4]
     186:	681b      	ldr	r3, [r3, #0]
     188:	009b      	lsls	r3, r3, #2
     18a:	f003 031c 	and.w	r3, r3, #28
     18e:	2007      	movs	r0, #7
     190:	fa00 f303 	lsl.w	r3, r0, r3
     194:	43db      	mvns	r3, r3
     196:	400b      	ands	r3, r1
     198:	4313      	orrs	r3, r2
     19a:	6023      	str	r3, [r4, #0]
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	681b      	ldr	r3, [r3, #0]
     1a0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     1a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     1a8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     1ac:	461c      	mov	r4, r3
     1ae:	687b      	ldr	r3, [r7, #4]
     1b0:	681b      	ldr	r3, [r3, #0]
     1b2:	00db      	lsls	r3, r3, #3
     1b4:	f003 0318 	and.w	r3, r3, #24
     1b8:	2218      	movs	r2, #24
     1ba:	409a      	lsls	r2, r3
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	681b      	ldr	r3, [r3, #0]
     1c0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     1c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     1c8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     1cc:	6819      	ldr	r1, [r3, #0]
     1ce:	687b      	ldr	r3, [r7, #4]
     1d0:	681b      	ldr	r3, [r3, #0]
     1d2:	00db      	lsls	r3, r3, #3
     1d4:	f003 0318 	and.w	r3, r3, #24
     1d8:	20ff      	movs	r0, #255	; 0xff
     1da:	fa00 f303 	lsl.w	r3, r0, r3
     1de:	43db      	mvns	r3, r3
     1e0:	400b      	ands	r3, r1
     1e2:	4313      	orrs	r3, r2
     1e4:	6023      	str	r3, [r4, #0]
     1e6:	4b71      	ldr	r3, [pc, #452]	; (3ac <am_devices_led_init+0x28c>)
     1e8:	2200      	movs	r2, #0
     1ea:	601a      	str	r2, [r3, #0]
     1ec:	e000      	b.n	1f0 <am_devices_led_init+0xd0>
     1ee:	bf00      	nop

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     1f0:	687b      	ldr	r3, [r7, #4]
     1f2:	681b      	ldr	r3, [r3, #0]
     1f4:	08db      	lsrs	r3, r3, #3
     1f6:	f003 0204 	and.w	r2, r3, #4
     1fa:	4b6e      	ldr	r3, [pc, #440]	; (3b4 <am_devices_led_init+0x294>)
     1fc:	4413      	add	r3, r2
     1fe:	4619      	mov	r1, r3
     200:	687b      	ldr	r3, [r7, #4]
     202:	681b      	ldr	r3, [r3, #0]
     204:	f003 031f 	and.w	r3, r3, #31
     208:	2201      	movs	r2, #1
     20a:	fa02 f303 	lsl.w	r3, r2, r3
     20e:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     210:	687b      	ldr	r3, [r7, #4]
     212:	681b      	ldr	r3, [r3, #0]
     214:	08db      	lsrs	r3, r3, #3
     216:	f003 0204 	and.w	r2, r3, #4
     21a:	4b67      	ldr	r3, [pc, #412]	; (3b8 <am_devices_led_init+0x298>)
     21c:	4413      	add	r3, r2
     21e:	4618      	mov	r0, r3
     220:	687b      	ldr	r3, [r7, #4]
     222:	685b      	ldr	r3, [r3, #4]
     224:	f003 0301 	and.w	r3, r3, #1
     228:	2b00      	cmp	r3, #0
     22a:	d010      	beq.n	24e <am_devices_led_init+0x12e>
     22c:	687b      	ldr	r3, [r7, #4]
     22e:	681b      	ldr	r3, [r3, #0]
     230:	08db      	lsrs	r3, r3, #3
     232:	f003 0204 	and.w	r2, r3, #4
     236:	4b60      	ldr	r3, [pc, #384]	; (3b8 <am_devices_led_init+0x298>)
     238:	4413      	add	r3, r2
     23a:	681a      	ldr	r2, [r3, #0]
     23c:	687b      	ldr	r3, [r7, #4]
     23e:	681b      	ldr	r3, [r3, #0]
     240:	f003 031f 	and.w	r3, r3, #31
     244:	2101      	movs	r1, #1
     246:	fa01 f303 	lsl.w	r3, r1, r3
     24a:	4313      	orrs	r3, r2
     24c:	e010      	b.n	270 <am_devices_led_init+0x150>
     24e:	687b      	ldr	r3, [r7, #4]
     250:	681b      	ldr	r3, [r3, #0]
     252:	08db      	lsrs	r3, r3, #3
     254:	f003 0204 	and.w	r2, r3, #4
     258:	4b57      	ldr	r3, [pc, #348]	; (3b8 <am_devices_led_init+0x298>)
     25a:	4413      	add	r3, r2
     25c:	681a      	ldr	r2, [r3, #0]
     25e:	687b      	ldr	r3, [r7, #4]
     260:	681b      	ldr	r3, [r3, #0]
     262:	f003 031f 	and.w	r3, r3, #31
     266:	2101      	movs	r1, #1
     268:	fa01 f303 	lsl.w	r3, r1, r3
     26c:	43db      	mvns	r3, r3
     26e:	4013      	ands	r3, r2
     270:	6003      	str	r3, [r0, #0]
     272:	e096      	b.n	3a2 <am_devices_led_init+0x282>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
     274:	687b      	ldr	r3, [r7, #4]
     276:	681b      	ldr	r3, [r3, #0]
     278:	2b00      	cmp	r3, #0
     27a:	db4e      	blt.n	31a <am_devices_led_init+0x1fa>
     27c:	4b4b      	ldr	r3, [pc, #300]	; (3ac <am_devices_led_init+0x28c>)
     27e:	2273      	movs	r2, #115	; 0x73
     280:	601a      	str	r2, [r3, #0]
     282:	687b      	ldr	r3, [r7, #4]
     284:	681b      	ldr	r3, [r3, #0]
     286:	085b      	lsrs	r3, r3, #1
     288:	f003 027c 	and.w	r2, r3, #124	; 0x7c
     28c:	4b48      	ldr	r3, [pc, #288]	; (3b0 <am_devices_led_init+0x290>)
     28e:	4413      	add	r3, r2
     290:	461c      	mov	r4, r3
     292:	687b      	ldr	r3, [r7, #4]
     294:	681b      	ldr	r3, [r3, #0]
     296:	009b      	lsls	r3, r3, #2
     298:	f003 031c 	and.w	r3, r3, #28
     29c:	2206      	movs	r2, #6
     29e:	409a      	lsls	r2, r3
     2a0:	687b      	ldr	r3, [r7, #4]
     2a2:	681b      	ldr	r3, [r3, #0]
     2a4:	085b      	lsrs	r3, r3, #1
     2a6:	f003 017c 	and.w	r1, r3, #124	; 0x7c
     2aa:	4b41      	ldr	r3, [pc, #260]	; (3b0 <am_devices_led_init+0x290>)
     2ac:	440b      	add	r3, r1
     2ae:	6819      	ldr	r1, [r3, #0]
     2b0:	687b      	ldr	r3, [r7, #4]
     2b2:	681b      	ldr	r3, [r3, #0]
     2b4:	009b      	lsls	r3, r3, #2
     2b6:	f003 031c 	and.w	r3, r3, #28
     2ba:	2007      	movs	r0, #7
     2bc:	fa00 f303 	lsl.w	r3, r0, r3
     2c0:	43db      	mvns	r3, r3
     2c2:	400b      	ands	r3, r1
     2c4:	4313      	orrs	r3, r2
     2c6:	6023      	str	r3, [r4, #0]
     2c8:	687b      	ldr	r3, [r7, #4]
     2ca:	681b      	ldr	r3, [r3, #0]
     2cc:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     2d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     2d4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     2d8:	461c      	mov	r4, r3
     2da:	687b      	ldr	r3, [r7, #4]
     2dc:	681b      	ldr	r3, [r3, #0]
     2de:	00db      	lsls	r3, r3, #3
     2e0:	f003 0318 	and.w	r3, r3, #24
     2e4:	2218      	movs	r2, #24
     2e6:	409a      	lsls	r2, r3
     2e8:	687b      	ldr	r3, [r7, #4]
     2ea:	681b      	ldr	r3, [r3, #0]
     2ec:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
     2f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     2f4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
     2f8:	6819      	ldr	r1, [r3, #0]
     2fa:	687b      	ldr	r3, [r7, #4]
     2fc:	681b      	ldr	r3, [r3, #0]
     2fe:	00db      	lsls	r3, r3, #3
     300:	f003 0318 	and.w	r3, r3, #24
     304:	20ff      	movs	r0, #255	; 0xff
     306:	fa00 f303 	lsl.w	r3, r0, r3
     30a:	43db      	mvns	r3, r3
     30c:	400b      	ands	r3, r1
     30e:	4313      	orrs	r3, r2
     310:	6023      	str	r3, [r4, #0]
     312:	4b26      	ldr	r3, [pc, #152]	; (3ac <am_devices_led_init+0x28c>)
     314:	2200      	movs	r2, #0
     316:	601a      	str	r2, [r3, #0]
     318:	e000      	b.n	31c <am_devices_led_init+0x1fc>
     31a:	bf00      	nop

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
     31c:	687b      	ldr	r3, [r7, #4]
     31e:	681b      	ldr	r3, [r3, #0]
     320:	08db      	lsrs	r3, r3, #3
     322:	f003 0204 	and.w	r2, r3, #4
     326:	4b23      	ldr	r3, [pc, #140]	; (3b4 <am_devices_led_init+0x294>)
     328:	4413      	add	r3, r2
     32a:	4619      	mov	r1, r3
     32c:	687b      	ldr	r3, [r7, #4]
     32e:	681b      	ldr	r3, [r3, #0]
     330:	f003 031f 	and.w	r3, r3, #31
     334:	2201      	movs	r2, #1
     336:	fa02 f303 	lsl.w	r3, r2, r3
     33a:	600b      	str	r3, [r1, #0]
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
     33c:	687b      	ldr	r3, [r7, #4]
     33e:	681b      	ldr	r3, [r3, #0]
     340:	08db      	lsrs	r3, r3, #3
     342:	f003 0204 	and.w	r2, r3, #4
     346:	4b1c      	ldr	r3, [pc, #112]	; (3b8 <am_devices_led_init+0x298>)
     348:	4413      	add	r3, r2
     34a:	4618      	mov	r0, r3
     34c:	687b      	ldr	r3, [r7, #4]
     34e:	685b      	ldr	r3, [r3, #4]
     350:	f003 0301 	and.w	r3, r3, #1
     354:	2b00      	cmp	r3, #0
     356:	d010      	beq.n	37a <am_devices_led_init+0x25a>
     358:	687b      	ldr	r3, [r7, #4]
     35a:	681b      	ldr	r3, [r3, #0]
     35c:	08db      	lsrs	r3, r3, #3
     35e:	f003 0204 	and.w	r2, r3, #4
     362:	4b15      	ldr	r3, [pc, #84]	; (3b8 <am_devices_led_init+0x298>)
     364:	4413      	add	r3, r2
     366:	681a      	ldr	r2, [r3, #0]
     368:	687b      	ldr	r3, [r7, #4]
     36a:	681b      	ldr	r3, [r3, #0]
     36c:	f003 031f 	and.w	r3, r3, #31
     370:	2101      	movs	r1, #1
     372:	fa01 f303 	lsl.w	r3, r1, r3
     376:	4313      	orrs	r3, r2
     378:	e010      	b.n	39c <am_devices_led_init+0x27c>
     37a:	687b      	ldr	r3, [r7, #4]
     37c:	681b      	ldr	r3, [r3, #0]
     37e:	08db      	lsrs	r3, r3, #3
     380:	f003 0204 	and.w	r2, r3, #4
     384:	4b0c      	ldr	r3, [pc, #48]	; (3b8 <am_devices_led_init+0x298>)
     386:	4413      	add	r3, r2
     388:	681a      	ldr	r2, [r3, #0]
     38a:	687b      	ldr	r3, [r7, #4]
     38c:	681b      	ldr	r3, [r3, #0]
     38e:	f003 031f 	and.w	r3, r3, #31
     392:	2101      	movs	r1, #1
     394:	fa01 f303 	lsl.w	r3, r1, r3
     398:	43db      	mvns	r3, r3
     39a:	4013      	ands	r3, r2
     39c:	6003      	str	r3, [r0, #0]
     39e:	e000      	b.n	3a2 <am_devices_led_init+0x282>
        return;
     3a0:	bf00      	nop
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
#endif
}
     3a2:	3708      	adds	r7, #8
     3a4:	46bd      	mov	sp, r7
     3a6:	bc90      	pop	{r4, r7}
     3a8:	4770      	bx	lr
     3aa:	bf00      	nop
     3ac:	40010060 	.word	0x40010060
     3b0:	40010040 	.word	0x40010040
     3b4:	400100b4 	.word	0x400100b4
     3b8:	40010088 	.word	0x40010088

000003bc <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
     3bc:	b580      	push	{r7, lr}
     3be:	b084      	sub	sp, #16
     3c0:	af00      	add	r7, sp, #0
     3c2:	6078      	str	r0, [r7, #4]
     3c4:	6039      	str	r1, [r7, #0]
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
     3c6:	687b      	ldr	r3, [r7, #4]
     3c8:	2b00      	cmp	r3, #0
     3ca:	d014      	beq.n	3f6 <am_devices_led_array_init+0x3a>
     3cc:	683b      	ldr	r3, [r7, #0]
     3ce:	2b1f      	cmp	r3, #31
     3d0:	d811      	bhi.n	3f6 <am_devices_led_array_init+0x3a>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
     3d2:	2300      	movs	r3, #0
     3d4:	60fb      	str	r3, [r7, #12]
     3d6:	e009      	b.n	3ec <am_devices_led_array_init+0x30>
    {
        am_devices_led_init(psLEDs + i);
     3d8:	68fb      	ldr	r3, [r7, #12]
     3da:	00db      	lsls	r3, r3, #3
     3dc:	687a      	ldr	r2, [r7, #4]
     3de:	4413      	add	r3, r2
     3e0:	4618      	mov	r0, r3
     3e2:	f7ff fe9d 	bl	120 <am_devices_led_init>
    for ( i = 0; i < ui32NumLEDs; i++ )
     3e6:	68fb      	ldr	r3, [r7, #12]
     3e8:	3301      	adds	r3, #1
     3ea:	60fb      	str	r3, [r7, #12]
     3ec:	68fa      	ldr	r2, [r7, #12]
     3ee:	683b      	ldr	r3, [r7, #0]
     3f0:	429a      	cmp	r2, r3
     3f2:	d3f1      	bcc.n	3d8 <am_devices_led_array_init+0x1c>
     3f4:	e000      	b.n	3f8 <am_devices_led_array_init+0x3c>
        return;
     3f6:	bf00      	nop
    }
}
     3f8:	3710      	adds	r7, #16
     3fa:	46bd      	mov	sp, r7
     3fc:	bd80      	pop	{r7, pc}
	...

00000400 <am_devices_led_on>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     400:	b480      	push	{r7}
     402:	b083      	sub	sp, #12
     404:	af00      	add	r7, sp, #0
     406:	6078      	str	r0, [r7, #4]
     408:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
     40a:	687b      	ldr	r3, [r7, #4]
     40c:	2b00      	cmp	r3, #0
     40e:	d06d      	beq.n	4ec <am_devices_led_on+0xec>
     410:	683b      	ldr	r3, [r7, #0]
     412:	2b1e      	cmp	r3, #30
     414:	d86a      	bhi.n	4ec <am_devices_led_on+0xec>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
     416:	683b      	ldr	r3, [r7, #0]
     418:	00db      	lsls	r3, r3, #3
     41a:	687a      	ldr	r2, [r7, #4]
     41c:	4413      	add	r3, r2
     41e:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
     420:	2b31      	cmp	r3, #49	; 0x31
     422:	d863      	bhi.n	4ec <am_devices_led_on+0xec>
    }
#else // AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     424:	683b      	ldr	r3, [r7, #0]
     426:	00db      	lsls	r3, r3, #3
     428:	687a      	ldr	r2, [r7, #4]
     42a:	4413      	add	r3, r2
     42c:	685b      	ldr	r3, [r3, #4]
     42e:	f003 0302 	and.w	r3, r3, #2
     432:	2b00      	cmp	r3, #0
     434:	d043      	beq.n	4be <am_devices_led_on+0xbe>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     436:	683b      	ldr	r3, [r7, #0]
     438:	00db      	lsls	r3, r3, #3
     43a:	687a      	ldr	r2, [r7, #4]
     43c:	4413      	add	r3, r2
     43e:	681b      	ldr	r3, [r3, #0]
     440:	08db      	lsrs	r3, r3, #3
     442:	f003 0204 	and.w	r2, r3, #4
     446:	4b2c      	ldr	r3, [pc, #176]	; (4f8 <am_devices_led_on+0xf8>)
     448:	4413      	add	r3, r2
     44a:	4618      	mov	r0, r3
     44c:	683b      	ldr	r3, [r7, #0]
     44e:	00db      	lsls	r3, r3, #3
     450:	687a      	ldr	r2, [r7, #4]
     452:	4413      	add	r3, r2
     454:	685b      	ldr	r3, [r3, #4]
     456:	f003 0301 	and.w	r3, r3, #1
     45a:	2b00      	cmp	r3, #0
     45c:	d016      	beq.n	48c <am_devices_led_on+0x8c>
     45e:	683b      	ldr	r3, [r7, #0]
     460:	00db      	lsls	r3, r3, #3
     462:	687a      	ldr	r2, [r7, #4]
     464:	4413      	add	r3, r2
     466:	681b      	ldr	r3, [r3, #0]
     468:	08db      	lsrs	r3, r3, #3
     46a:	f003 0204 	and.w	r2, r3, #4
     46e:	4b22      	ldr	r3, [pc, #136]	; (4f8 <am_devices_led_on+0xf8>)
     470:	4413      	add	r3, r2
     472:	681a      	ldr	r2, [r3, #0]
     474:	683b      	ldr	r3, [r7, #0]
     476:	00db      	lsls	r3, r3, #3
     478:	6879      	ldr	r1, [r7, #4]
     47a:	440b      	add	r3, r1
     47c:	681b      	ldr	r3, [r3, #0]
     47e:	f003 031f 	and.w	r3, r3, #31
     482:	2101      	movs	r1, #1
     484:	fa01 f303 	lsl.w	r3, r1, r3
     488:	4313      	orrs	r3, r2
     48a:	e016      	b.n	4ba <am_devices_led_on+0xba>
     48c:	683b      	ldr	r3, [r7, #0]
     48e:	00db      	lsls	r3, r3, #3
     490:	687a      	ldr	r2, [r7, #4]
     492:	4413      	add	r3, r2
     494:	681b      	ldr	r3, [r3, #0]
     496:	08db      	lsrs	r3, r3, #3
     498:	f003 0204 	and.w	r2, r3, #4
     49c:	4b16      	ldr	r3, [pc, #88]	; (4f8 <am_devices_led_on+0xf8>)
     49e:	4413      	add	r3, r2
     4a0:	681a      	ldr	r2, [r3, #0]
     4a2:	683b      	ldr	r3, [r7, #0]
     4a4:	00db      	lsls	r3, r3, #3
     4a6:	6879      	ldr	r1, [r7, #4]
     4a8:	440b      	add	r3, r1
     4aa:	681b      	ldr	r3, [r3, #0]
     4ac:	f003 031f 	and.w	r3, r3, #31
     4b0:	2101      	movs	r1, #1
     4b2:	fa01 f303 	lsl.w	r3, r1, r3
     4b6:	43db      	mvns	r3, r3
     4b8:	4013      	ands	r3, r2
     4ba:	6003      	str	r3, [r0, #0]
     4bc:	e017      	b.n	4ee <am_devices_led_on+0xee>
    else
    {
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
     4be:	683b      	ldr	r3, [r7, #0]
     4c0:	00db      	lsls	r3, r3, #3
     4c2:	687a      	ldr	r2, [r7, #4]
     4c4:	4413      	add	r3, r2
     4c6:	681b      	ldr	r3, [r3, #0]
     4c8:	08db      	lsrs	r3, r3, #3
     4ca:	f003 0204 	and.w	r2, r3, #4
     4ce:	4b0b      	ldr	r3, [pc, #44]	; (4fc <am_devices_led_on+0xfc>)
     4d0:	4413      	add	r3, r2
     4d2:	4619      	mov	r1, r3
     4d4:	683b      	ldr	r3, [r7, #0]
     4d6:	00db      	lsls	r3, r3, #3
     4d8:	687a      	ldr	r2, [r7, #4]
     4da:	4413      	add	r3, r2
     4dc:	681b      	ldr	r3, [r3, #0]
     4de:	f003 031f 	and.w	r3, r3, #31
     4e2:	2201      	movs	r2, #1
     4e4:	fa02 f303 	lsl.w	r3, r2, r3
     4e8:	600b      	str	r3, [r1, #0]
     4ea:	e000      	b.n	4ee <am_devices_led_on+0xee>
        return;
     4ec:	bf00      	nop
    }
#endif //AM_APOLLO3_GPIO
}
     4ee:	370c      	adds	r7, #12
     4f0:	46bd      	mov	sp, r7
     4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
     4f6:	4770      	bx	lr
     4f8:	40010088 	.word	0x40010088
     4fc:	400100a8 	.word	0x400100a8

00000500 <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     500:	b480      	push	{r7}
     502:	b083      	sub	sp, #12
     504:	af00      	add	r7, sp, #0
     506:	6078      	str	r0, [r7, #4]
     508:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
     50a:	687b      	ldr	r3, [r7, #4]
     50c:	2b00      	cmp	r3, #0
     50e:	d06d      	beq.n	5ec <am_devices_led_off+0xec>
     510:	683b      	ldr	r3, [r7, #0]
     512:	2b1e      	cmp	r3, #30
     514:	d86a      	bhi.n	5ec <am_devices_led_off+0xec>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
     516:	683b      	ldr	r3, [r7, #0]
     518:	00db      	lsls	r3, r3, #3
     51a:	687a      	ldr	r2, [r7, #4]
     51c:	4413      	add	r3, r2
     51e:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
     520:	2b31      	cmp	r3, #49	; 0x31
     522:	d863      	bhi.n	5ec <am_devices_led_off+0xec>
    }
#else
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     524:	683b      	ldr	r3, [r7, #0]
     526:	00db      	lsls	r3, r3, #3
     528:	687a      	ldr	r2, [r7, #4]
     52a:	4413      	add	r3, r2
     52c:	685b      	ldr	r3, [r3, #4]
     52e:	f003 0302 	and.w	r3, r3, #2
     532:	2b00      	cmp	r3, #0
     534:	d043      	beq.n	5be <am_devices_led_off+0xbe>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
     536:	683b      	ldr	r3, [r7, #0]
     538:	00db      	lsls	r3, r3, #3
     53a:	687a      	ldr	r2, [r7, #4]
     53c:	4413      	add	r3, r2
     53e:	681b      	ldr	r3, [r3, #0]
     540:	08db      	lsrs	r3, r3, #3
     542:	f003 0204 	and.w	r2, r3, #4
     546:	4b2c      	ldr	r3, [pc, #176]	; (5f8 <am_devices_led_off+0xf8>)
     548:	4413      	add	r3, r2
     54a:	4618      	mov	r0, r3
     54c:	683b      	ldr	r3, [r7, #0]
     54e:	00db      	lsls	r3, r3, #3
     550:	687a      	ldr	r2, [r7, #4]
     552:	4413      	add	r3, r2
     554:	685b      	ldr	r3, [r3, #4]
     556:	f003 0301 	and.w	r3, r3, #1
     55a:	2b00      	cmp	r3, #0
     55c:	d116      	bne.n	58c <am_devices_led_off+0x8c>
     55e:	683b      	ldr	r3, [r7, #0]
     560:	00db      	lsls	r3, r3, #3
     562:	687a      	ldr	r2, [r7, #4]
     564:	4413      	add	r3, r2
     566:	681b      	ldr	r3, [r3, #0]
     568:	08db      	lsrs	r3, r3, #3
     56a:	f003 0204 	and.w	r2, r3, #4
     56e:	4b22      	ldr	r3, [pc, #136]	; (5f8 <am_devices_led_off+0xf8>)
     570:	4413      	add	r3, r2
     572:	681a      	ldr	r2, [r3, #0]
     574:	683b      	ldr	r3, [r7, #0]
     576:	00db      	lsls	r3, r3, #3
     578:	6879      	ldr	r1, [r7, #4]
     57a:	440b      	add	r3, r1
     57c:	681b      	ldr	r3, [r3, #0]
     57e:	f003 031f 	and.w	r3, r3, #31
     582:	2101      	movs	r1, #1
     584:	fa01 f303 	lsl.w	r3, r1, r3
     588:	4313      	orrs	r3, r2
     58a:	e016      	b.n	5ba <am_devices_led_off+0xba>
     58c:	683b      	ldr	r3, [r7, #0]
     58e:	00db      	lsls	r3, r3, #3
     590:	687a      	ldr	r2, [r7, #4]
     592:	4413      	add	r3, r2
     594:	681b      	ldr	r3, [r3, #0]
     596:	08db      	lsrs	r3, r3, #3
     598:	f003 0204 	and.w	r2, r3, #4
     59c:	4b16      	ldr	r3, [pc, #88]	; (5f8 <am_devices_led_off+0xf8>)
     59e:	4413      	add	r3, r2
     5a0:	681a      	ldr	r2, [r3, #0]
     5a2:	683b      	ldr	r3, [r7, #0]
     5a4:	00db      	lsls	r3, r3, #3
     5a6:	6879      	ldr	r1, [r7, #4]
     5a8:	440b      	add	r3, r1
     5aa:	681b      	ldr	r3, [r3, #0]
     5ac:	f003 031f 	and.w	r3, r3, #31
     5b0:	2101      	movs	r1, #1
     5b2:	fa01 f303 	lsl.w	r3, r1, r3
     5b6:	43db      	mvns	r3, r3
     5b8:	4013      	ands	r3, r2
     5ba:	6003      	str	r3, [r0, #0]
     5bc:	e017      	b.n	5ee <am_devices_led_off+0xee>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
     5be:	683b      	ldr	r3, [r7, #0]
     5c0:	00db      	lsls	r3, r3, #3
     5c2:	687a      	ldr	r2, [r7, #4]
     5c4:	4413      	add	r3, r2
     5c6:	681b      	ldr	r3, [r3, #0]
     5c8:	08db      	lsrs	r3, r3, #3
     5ca:	f003 0204 	and.w	r2, r3, #4
     5ce:	4b0b      	ldr	r3, [pc, #44]	; (5fc <am_devices_led_off+0xfc>)
     5d0:	4413      	add	r3, r2
     5d2:	4619      	mov	r1, r3
     5d4:	683b      	ldr	r3, [r7, #0]
     5d6:	00db      	lsls	r3, r3, #3
     5d8:	687a      	ldr	r2, [r7, #4]
     5da:	4413      	add	r3, r2
     5dc:	681b      	ldr	r3, [r3, #0]
     5de:	f003 031f 	and.w	r3, r3, #31
     5e2:	2201      	movs	r2, #1
     5e4:	fa02 f303 	lsl.w	r3, r2, r3
     5e8:	600b      	str	r3, [r1, #0]
     5ea:	e000      	b.n	5ee <am_devices_led_off+0xee>
        return;
     5ec:	bf00      	nop
    }
#endif
}
     5ee:	370c      	adds	r7, #12
     5f0:	46bd      	mov	sp, r7
     5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
     5f6:	4770      	bx	lr
     5f8:	40010088 	.word	0x40010088
     5fc:	400100b4 	.word	0x400100b4

00000600 <am_devices_led_toggle>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
     600:	b580      	push	{r7, lr}
     602:	b082      	sub	sp, #8
     604:	af00      	add	r7, sp, #0
     606:	6078      	str	r0, [r7, #4]
     608:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
     60a:	687b      	ldr	r3, [r7, #4]
     60c:	2b00      	cmp	r3, #0
     60e:	d06e      	beq.n	6ee <am_devices_led_toggle+0xee>
     610:	683b      	ldr	r3, [r7, #0]
     612:	2b1e      	cmp	r3, #30
     614:	d86b      	bhi.n	6ee <am_devices_led_toggle+0xee>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
     616:	683b      	ldr	r3, [r7, #0]
     618:	00db      	lsls	r3, r3, #3
     61a:	687a      	ldr	r2, [r7, #4]
     61c:	4413      	add	r3, r2
     61e:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
     620:	2b31      	cmp	r3, #49	; 0x31
     622:	d864      	bhi.n	6ee <am_devices_led_toggle+0xee>
    }
#else
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
     624:	683b      	ldr	r3, [r7, #0]
     626:	00db      	lsls	r3, r3, #3
     628:	687a      	ldr	r2, [r7, #4]
     62a:	4413      	add	r3, r2
     62c:	685b      	ldr	r3, [r3, #4]
     62e:	f003 0302 	and.w	r3, r3, #2
     632:	2b00      	cmp	r3, #0
     634:	d022      	beq.n	67c <am_devices_led_toggle+0x7c>
    {
        am_hal_gpio_out_bit_toggle(psLEDs[ui32LEDNum].ui32GPIONumber);
     636:	683b      	ldr	r3, [r7, #0]
     638:	00db      	lsls	r3, r3, #3
     63a:	687a      	ldr	r2, [r7, #4]
     63c:	4413      	add	r3, r2
     63e:	681b      	ldr	r3, [r3, #0]
     640:	08db      	lsrs	r3, r3, #3
     642:	f003 0204 	and.w	r2, r3, #4
     646:	4b2c      	ldr	r3, [pc, #176]	; (6f8 <am_devices_led_toggle+0xf8>)
     648:	4413      	add	r3, r2
     64a:	4618      	mov	r0, r3
     64c:	683b      	ldr	r3, [r7, #0]
     64e:	00db      	lsls	r3, r3, #3
     650:	687a      	ldr	r2, [r7, #4]
     652:	4413      	add	r3, r2
     654:	681b      	ldr	r3, [r3, #0]
     656:	08db      	lsrs	r3, r3, #3
     658:	f003 0204 	and.w	r2, r3, #4
     65c:	4b26      	ldr	r3, [pc, #152]	; (6f8 <am_devices_led_toggle+0xf8>)
     65e:	4413      	add	r3, r2
     660:	681a      	ldr	r2, [r3, #0]
     662:	683b      	ldr	r3, [r7, #0]
     664:	00db      	lsls	r3, r3, #3
     666:	6879      	ldr	r1, [r7, #4]
     668:	440b      	add	r3, r1
     66a:	681b      	ldr	r3, [r3, #0]
     66c:	f003 031f 	and.w	r3, r3, #31
     670:	2101      	movs	r1, #1
     672:	fa01 f303 	lsl.w	r3, r1, r3
     676:	4053      	eors	r3, r2
     678:	6003      	str	r3, [r0, #0]
     67a:	e039      	b.n	6f0 <am_devices_led_toggle+0xf0>
    else
    {
        //
        // Check to see if the LED pin is enabled.
        //
        if ( am_hal_gpio_out_enable_bit_get(psLEDs[ui32LEDNum].ui32GPIONumber) )
     67c:	683b      	ldr	r3, [r7, #0]
     67e:	00db      	lsls	r3, r3, #3
     680:	687a      	ldr	r2, [r7, #4]
     682:	4413      	add	r3, r2
     684:	681b      	ldr	r3, [r3, #0]
     686:	4618      	mov	r0, r3
     688:	f001 f8f6 	bl	1878 <am_hal_gpio_out_enable_bit_get>
     68c:	4603      	mov	r3, r0
     68e:	2b00      	cmp	r3, #0
     690:	d016      	beq.n	6c0 <am_devices_led_toggle+0xc0>
        {
            //
            // If it was enabled, turn if off.
            //
            am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
     692:	683b      	ldr	r3, [r7, #0]
     694:	00db      	lsls	r3, r3, #3
     696:	687a      	ldr	r2, [r7, #4]
     698:	4413      	add	r3, r2
     69a:	681b      	ldr	r3, [r3, #0]
     69c:	08db      	lsrs	r3, r3, #3
     69e:	f003 0204 	and.w	r2, r3, #4
     6a2:	4b16      	ldr	r3, [pc, #88]	; (6fc <am_devices_led_toggle+0xfc>)
     6a4:	4413      	add	r3, r2
     6a6:	4619      	mov	r1, r3
     6a8:	683b      	ldr	r3, [r7, #0]
     6aa:	00db      	lsls	r3, r3, #3
     6ac:	687a      	ldr	r2, [r7, #4]
     6ae:	4413      	add	r3, r2
     6b0:	681b      	ldr	r3, [r3, #0]
     6b2:	f003 031f 	and.w	r3, r3, #31
     6b6:	2201      	movs	r2, #1
     6b8:	fa02 f303 	lsl.w	r3, r2, r3
     6bc:	600b      	str	r3, [r1, #0]
     6be:	e017      	b.n	6f0 <am_devices_led_toggle+0xf0>
        else
        {
            //
            // If it was not enabled, turn if on.
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
     6c0:	683b      	ldr	r3, [r7, #0]
     6c2:	00db      	lsls	r3, r3, #3
     6c4:	687a      	ldr	r2, [r7, #4]
     6c6:	4413      	add	r3, r2
     6c8:	681b      	ldr	r3, [r3, #0]
     6ca:	08db      	lsrs	r3, r3, #3
     6cc:	f003 0204 	and.w	r2, r3, #4
     6d0:	4b0b      	ldr	r3, [pc, #44]	; (700 <am_devices_led_toggle+0x100>)
     6d2:	4413      	add	r3, r2
     6d4:	4619      	mov	r1, r3
     6d6:	683b      	ldr	r3, [r7, #0]
     6d8:	00db      	lsls	r3, r3, #3
     6da:	687a      	ldr	r2, [r7, #4]
     6dc:	4413      	add	r3, r2
     6de:	681b      	ldr	r3, [r3, #0]
     6e0:	f003 031f 	and.w	r3, r3, #31
     6e4:	2201      	movs	r2, #1
     6e6:	fa02 f303 	lsl.w	r3, r2, r3
     6ea:	600b      	str	r3, [r1, #0]
     6ec:	e000      	b.n	6f0 <am_devices_led_toggle+0xf0>
        return;
     6ee:	bf00      	nop
        }
    }
#endif
}
     6f0:	3708      	adds	r7, #8
     6f2:	46bd      	mov	sp, r7
     6f4:	bd80      	pop	{r7, pc}
     6f6:	bf00      	nop
     6f8:	40010088 	.word	0x40010088
     6fc:	400100b4 	.word	0x400100b4
     700:	400100a8 	.word	0x400100a8

00000704 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     704:	b580      	push	{r7, lr}
     706:	b084      	sub	sp, #16
     708:	af00      	add	r7, sp, #0
    bool bNewClkout, bOldClkout;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     70a:	2000      	movs	r0, #0
     70c:	f001 f878 	bl	1800 <am_hal_clkgen_sysclk_select>
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     710:	f001 f80e 	bl	1730 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t) am_bsp_itm_string_print);
     714:	4848      	ldr	r0, [pc, #288]	; (838 <main+0x134>)
     716:	f000 f95f 	bl	9d8 <am_util_stdio_printf_init>

    //
    // Initialize the SWO GPIO pin
    //
    am_bsp_pin_enable(ITM_SWO);
     71a:	4b48      	ldr	r3, [pc, #288]	; (83c <main+0x138>)
     71c:	2273      	movs	r2, #115	; 0x73
     71e:	601a      	str	r2, [r3, #0]
     720:	4a47      	ldr	r2, [pc, #284]	; (840 <main+0x13c>)
     722:	4b47      	ldr	r3, [pc, #284]	; (840 <main+0x13c>)
     724:	681b      	ldr	r3, [r3, #0]
     726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
     72a:	6013      	str	r3, [r2, #0]
     72c:	4a45      	ldr	r2, [pc, #276]	; (844 <main+0x140>)
     72e:	4b45      	ldr	r3, [pc, #276]	; (844 <main+0x140>)
     730:	681b      	ldr	r3, [r3, #0]
     732:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     736:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     73a:	6013      	str	r3, [r2, #0]
     73c:	4b3f      	ldr	r3, [pc, #252]	; (83c <main+0x138>)
     73e:	2200      	movs	r2, #0
     740:	601a      	str	r2, [r3, #0]

    //
    // Enable the ITM.
    //
    am_hal_itm_enable();
     742:	f001 f8ab 	bl	189c <am_hal_itm_enable>

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
     746:	f001 f805 	bl	1754 <am_bsp_debug_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
     74a:	f000 ffe7 	bl	171c <am_util_stdio_terminal_clear>
    am_util_stdio_printf("CLKOUT to LED Example\n");
     74e:	483e      	ldr	r0, [pc, #248]	; (848 <main+0x144>)
     750:	f000 ffc6 	bl	16e0 <am_util_stdio_printf>
    am_util_stdio_printf("\tWalks the board LEDs about once a second based on the CLKOUT "
     754:	483d      	ldr	r0, [pc, #244]	; (84c <main+0x148>)
     756:	f000 ffc3 	bl	16e0 <am_util_stdio_printf>
                         "signal.\n");

    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
     75a:	f001 f827 	bl	17ac <am_bsp_debug_printf_disable>

    //
    // Clear the LED.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
     75e:	2105      	movs	r1, #5
     760:	483b      	ldr	r0, [pc, #236]	; (850 <main+0x14c>)
     762:	f7ff fe2b 	bl	3bc <am_devices_led_array_init>

    //
    // Enable the LFRC.
    //
    am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_LFRC);
     766:	2002      	movs	r0, #2
     768:	f001 f866 	bl	1838 <am_hal_clkgen_osc_start>

    //
    // Enable the clockout to the desired pin.
    // And make it readable on the pin with AM_HAL_GPIO_INPEN
    //
    am_hal_gpio_pin_config(AM_BSP_GPIO_CLKOUT_PIN,
     76c:	4b33      	ldr	r3, [pc, #204]	; (83c <main+0x138>)
     76e:	2273      	movs	r2, #115	; 0x73
     770:	601a      	str	r2, [r3, #0]
     772:	4a38      	ldr	r2, [pc, #224]	; (854 <main+0x150>)
     774:	4b37      	ldr	r3, [pc, #220]	; (854 <main+0x150>)
     776:	681b      	ldr	r3, [r3, #0]
     778:	f023 0307 	bic.w	r3, r3, #7
     77c:	6013      	str	r3, [r2, #0]
     77e:	4a36      	ldr	r2, [pc, #216]	; (858 <main+0x154>)
     780:	4b35      	ldr	r3, [pc, #212]	; (858 <main+0x154>)
     782:	681b      	ldr	r3, [r3, #0]
     784:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     788:	f043 0312 	orr.w	r3, r3, #18
     78c:	6013      	str	r3, [r2, #0]
     78e:	4b2b      	ldr	r3, [pc, #172]	; (83c <main+0x138>)
     790:	2200      	movs	r2, #0
     792:	601a      	str	r2, [r3, #0]
                           (AM_BSP_GPIO_CFG_CLKOUT_PIN | AM_HAL_GPIO_INPEN));

    //
    // Initialize clkgen to output the selected clock.
    //
    am_hal_clkgen_clkout_enable(AM_HAL_CLKGEN_CLKOUT_CKSEL_LFRC_DIV2);
     794:	2023      	movs	r0, #35	; 0x23
     796:	f001 f863 	bl	1860 <am_hal_clkgen_clkout_enable>

    //
    // Initialize LED 0 to on
    //
    am_devices_led_toggle(am_bsp_psLEDs, 0);
     79a:	2100      	movs	r1, #0
     79c:	482c      	ldr	r0, [pc, #176]	; (850 <main+0x14c>)
     79e:	f7ff ff2f 	bl	600 <am_devices_led_toggle>
    iLEDcount = 1;      // LED 1 is next
     7a2:	2301      	movs	r3, #1
     7a4:	60bb      	str	r3, [r7, #8]

    //
    // Initialize loop variables
    //
    iRisingCount = RISING_EDGE_COUNT;
     7a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
     7aa:	60fb      	str	r3, [r7, #12]
    bOldClkout = false;
     7ac:	2300      	movs	r3, #0
     7ae:	71fb      	strb	r3, [r7, #7]
    while (1)
    {
        //
        // Grab new clock output value and look for a change.
        //
        bNewClkout = am_hal_gpio_input_bit_read(AM_BSP_GPIO_CLKOUT_PIN);
     7b0:	4b2a      	ldr	r3, [pc, #168]	; (85c <main+0x158>)
     7b2:	681b      	ldr	r3, [r3, #0]
     7b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
     7b8:	2b00      	cmp	r3, #0
     7ba:	bf14      	ite	ne
     7bc:	2301      	movne	r3, #1
     7be:	2300      	moveq	r3, #0
     7c0:	71bb      	strb	r3, [r7, #6]

        //
        // Look for any change.
        //
        if ( bOldClkout != bNewClkout )
     7c2:	79fa      	ldrb	r2, [r7, #7]
     7c4:	79bb      	ldrb	r3, [r7, #6]
     7c6:	429a      	cmp	r2, r3
     7c8:	d0f2      	beq.n	7b0 <main+0xac>
        {
            //
            // OK a change occurred.
            //
            bOldClkout = bNewClkout;
     7ca:	79bb      	ldrb	r3, [r7, #6]
     7cc:	71fb      	strb	r3, [r7, #7]

            //
            //  Was it rising or falling.
            //
            if ( bNewClkout )
     7ce:	79bb      	ldrb	r3, [r7, #6]
     7d0:	2b00      	cmp	r3, #0
     7d2:	d0ed      	beq.n	7b0 <main+0xac>
            {
                //
                // It was rising so count them until time to act.
                //
                if (--iRisingCount < 0)
     7d4:	68fb      	ldr	r3, [r7, #12]
     7d6:	3b01      	subs	r3, #1
     7d8:	60fb      	str	r3, [r7, #12]
     7da:	68fb      	ldr	r3, [r7, #12]
     7dc:	2b00      	cmp	r3, #0
     7de:	dae7      	bge.n	7b0 <main+0xac>
                {
                    //
                    // Act on the time out (walk the 4 LEDs)
                    //
                    am_devices_led_off(am_bsp_psLEDs, 0);
     7e0:	2100      	movs	r1, #0
     7e2:	481b      	ldr	r0, [pc, #108]	; (850 <main+0x14c>)
     7e4:	f7ff fe8c 	bl	500 <am_devices_led_off>
                    am_devices_led_off(am_bsp_psLEDs, 1);
     7e8:	2101      	movs	r1, #1
     7ea:	4819      	ldr	r0, [pc, #100]	; (850 <main+0x14c>)
     7ec:	f7ff fe88 	bl	500 <am_devices_led_off>
                    am_devices_led_off(am_bsp_psLEDs, 2);
     7f0:	2102      	movs	r1, #2
     7f2:	4817      	ldr	r0, [pc, #92]	; (850 <main+0x14c>)
     7f4:	f7ff fe84 	bl	500 <am_devices_led_off>
                    am_devices_led_off(am_bsp_psLEDs, 3);
     7f8:	2103      	movs	r1, #3
     7fa:	4815      	ldr	r0, [pc, #84]	; (850 <main+0x14c>)
     7fc:	f7ff fe80 	bl	500 <am_devices_led_off>
                    am_devices_led_off(am_bsp_psLEDs, 4);
     800:	2104      	movs	r1, #4
     802:	4813      	ldr	r0, [pc, #76]	; (850 <main+0x14c>)
     804:	f7ff fe7c 	bl	500 <am_devices_led_off>
                    am_devices_led_on(am_bsp_psLEDs, iLEDcount);
     808:	68bb      	ldr	r3, [r7, #8]
     80a:	4619      	mov	r1, r3
     80c:	4810      	ldr	r0, [pc, #64]	; (850 <main+0x14c>)
     80e:	f7ff fdf7 	bl	400 <am_devices_led_on>
                    iLEDcount++;
     812:	68bb      	ldr	r3, [r7, #8]
     814:	3301      	adds	r3, #1
     816:	60bb      	str	r3, [r7, #8]
                    iLEDcount %= 5;
     818:	68ba      	ldr	r2, [r7, #8]
     81a:	4b11      	ldr	r3, [pc, #68]	; (860 <main+0x15c>)
     81c:	fb83 1302 	smull	r1, r3, r3, r2
     820:	1059      	asrs	r1, r3, #1
     822:	17d3      	asrs	r3, r2, #31
     824:	1ac9      	subs	r1, r1, r3
     826:	460b      	mov	r3, r1
     828:	009b      	lsls	r3, r3, #2
     82a:	440b      	add	r3, r1
     82c:	1ad3      	subs	r3, r2, r3
     82e:	60bb      	str	r3, [r7, #8]

                    //
                    // Reset the rising edge count.
                    //
                    iRisingCount = RISING_EDGE_COUNT;
     830:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
     834:	60fb      	str	r3, [r7, #12]
        bNewClkout = am_hal_gpio_input_bit_read(AM_BSP_GPIO_CLKOUT_PIN);
     836:	e7bb      	b.n	7b0 <main+0xac>
     838:	000017fd 	.word	0x000017fd
     83c:	40010060 	.word	0x40010060
     840:	40010054 	.word	0x40010054
     844:	40010028 	.word	0x40010028
     848:	00001ad4 	.word	0x00001ad4
     84c:	00001aec 	.word	0x00001aec
     850:	10001000 	.word	0x10001000
     854:	4001004c 	.word	0x4001004c
     858:	40010018 	.word	0x40010018
     85c:	40010080 	.word	0x40010080
     860:	66666667 	.word	0x66666667

00000864 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     864:	4811      	ldr	r0, [pc, #68]	; (8ac <zero_loop+0x12>)
     866:	4912      	ldr	r1, [pc, #72]	; (8b0 <zero_loop+0x16>)
     868:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     86a:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     86e:	4811      	ldr	r0, [pc, #68]	; (8b4 <zero_loop+0x1a>)
     870:	6801      	ldr	r1, [r0, #0]
     872:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     876:	6001      	str	r1, [r0, #0]
     878:	f3bf 8f4f 	dsb	sy
     87c:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     880:	480d      	ldr	r0, [pc, #52]	; (8b8 <zero_loop+0x1e>)
     882:	490e      	ldr	r1, [pc, #56]	; (8bc <zero_loop+0x22>)
     884:	4a0e      	ldr	r2, [pc, #56]	; (8c0 <zero_loop+0x26>)

00000886 <copy_loop>:
     886:	f850 3b04 	ldr.w	r3, [r0], #4
     88a:	f841 3b04 	str.w	r3, [r1], #4
     88e:	4291      	cmp	r1, r2
     890:	dbf9      	blt.n	886 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     892:	480c      	ldr	r0, [pc, #48]	; (8c4 <zero_loop+0x2a>)
     894:	490c      	ldr	r1, [pc, #48]	; (8c8 <zero_loop+0x2e>)
     896:	f04f 0200 	mov.w	r2, #0

0000089a <zero_loop>:
     89a:	4288      	cmp	r0, r1
     89c:	bfb8      	it	lt
     89e:	f840 2b04 	strlt.w	r2, [r0], #4
     8a2:	dbfa      	blt.n	89a <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     8a4:	f7ff ff2e 	bl	704 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     8a8:	be00      	bkpt	0x0000
}
     8aa:	bf00      	nop
     8ac:	e000ed08 	.word	0xe000ed08
     8b0:	00000000 	.word	0x00000000
     8b4:	e000ed88 	.word	0xe000ed88
     8b8:	00001b68 	.word	0x00001b68
     8bc:	10001000 	.word	0x10001000
     8c0:	10001028 	.word	0x10001028
     8c4:	10001028 	.word	0x10001028
     8c8:	10001134 	.word	0x10001134

000008cc <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     8cc:	b480      	push	{r7}
     8ce:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     8d0:	e7fe      	b.n	8d0 <am_nmi_isr+0x4>

000008d2 <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     8d2:	b480      	push	{r7}
     8d4:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     8d6:	e7fe      	b.n	8d6 <am_adc_isr+0x4>

000008d8 <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     8d8:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     8da:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     8dc:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     8de:	f000 f809 	bl	8f4 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     8e2:	bd01      	pop	{r0, pc}
}
     8e4:	bf00      	nop
     8e6:	4618      	mov	r0, r3

000008e8 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     8e8:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     8ea:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     8ec:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     8ee:	4770      	bx	lr
}
     8f0:	bf00      	nop
     8f2:	4618      	mov	r0, r3

000008f4 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     8f4:	b580      	push	{r7, lr}
     8f6:	b096      	sub	sp, #88	; 0x58
     8f8:	af00      	add	r7, sp, #0
     8fa:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     8fc:	f107 030c 	add.w	r3, r7, #12
     900:	2200      	movs	r2, #0
     902:	601a      	str	r2, [r3, #0]
     904:	605a      	str	r2, [r3, #4]
     906:	609a      	str	r2, [r3, #8]
     908:	60da      	str	r2, [r3, #12]
     90a:	611a      	str	r2, [r3, #16]
     90c:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
     90e:	2300      	movs	r3, #0
     910:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     914:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     916:	4b2e      	ldr	r3, [pc, #184]	; (9d0 <am_util_faultisr_collect_data+0xdc>)
     918:	681b      	ldr	r3, [r3, #0]
     91a:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     91c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     91e:	b2db      	uxtb	r3, r3
     920:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     926:	0a1b      	lsrs	r3, r3, #8
     928:	b2db      	uxtb	r3, r3
     92a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     92e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     930:	0c1b      	lsrs	r3, r3, #16
     932:	b29b      	uxth	r3, r3
     934:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     938:	4b26      	ldr	r3, [pc, #152]	; (9d4 <am_util_faultisr_collect_data+0xe0>)
     93a:	681b      	ldr	r3, [r3, #0]
     93c:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     93e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     942:	b2db      	uxtb	r3, r3
     944:	f003 0302 	and.w	r3, r3, #2
     948:	2b00      	cmp	r3, #0
     94a:	d005      	beq.n	958 <am_util_faultisr_collect_data+0x64>
     94c:	6879      	ldr	r1, [r7, #4]
     94e:	2006      	movs	r0, #6
     950:	f7ff ffca 	bl	8e8 <getStackedReg>
     954:	4603      	mov	r3, r0
     956:	e001      	b.n	95c <am_util_faultisr_collect_data+0x68>
     958:	f04f 33ff 	mov.w	r3, #4294967295
     95c:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     95e:	6879      	ldr	r1, [r7, #4]
     960:	2000      	movs	r0, #0
     962:	f7ff ffc1 	bl	8e8 <getStackedReg>
     966:	4603      	mov	r3, r0
     968:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     96a:	6879      	ldr	r1, [r7, #4]
     96c:	2001      	movs	r0, #1
     96e:	f7ff ffbb 	bl	8e8 <getStackedReg>
     972:	4603      	mov	r3, r0
     974:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     976:	6879      	ldr	r1, [r7, #4]
     978:	2002      	movs	r0, #2
     97a:	f7ff ffb5 	bl	8e8 <getStackedReg>
     97e:	4603      	mov	r3, r0
     980:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     982:	6879      	ldr	r1, [r7, #4]
     984:	2003      	movs	r0, #3
     986:	f7ff ffaf 	bl	8e8 <getStackedReg>
     98a:	4603      	mov	r3, r0
     98c:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     98e:	6879      	ldr	r1, [r7, #4]
     990:	2004      	movs	r0, #4
     992:	f7ff ffa9 	bl	8e8 <getStackedReg>
     996:	4603      	mov	r3, r0
     998:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     99a:	6879      	ldr	r1, [r7, #4]
     99c:	2005      	movs	r0, #5
     99e:	f7ff ffa3 	bl	8e8 <getStackedReg>
     9a2:	4603      	mov	r3, r0
     9a4:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     9a6:	6879      	ldr	r1, [r7, #4]
     9a8:	2006      	movs	r0, #6
     9aa:	f7ff ff9d 	bl	8e8 <getStackedReg>
     9ae:	4603      	mov	r3, r0
     9b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     9b2:	6879      	ldr	r1, [r7, #4]
     9b4:	2007      	movs	r0, #7
     9b6:	f7ff ff97 	bl	8e8 <getStackedReg>
     9ba:	4603      	mov	r3, r0
     9bc:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     9be:	f107 030c 	add.w	r3, r7, #12
     9c2:	4618      	mov	r0, r3
     9c4:	f000 ffc6 	bl	1954 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     9c8:	2300      	movs	r3, #0
     9ca:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
     9cc:	e7fe      	b.n	9cc <am_util_faultisr_collect_data+0xd8>
     9ce:	bf00      	nop
     9d0:	e000ed28 	.word	0xe000ed28
     9d4:	e000ed38 	.word	0xe000ed38

000009d8 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     9d8:	b480      	push	{r7}
     9da:	b083      	sub	sp, #12
     9dc:	af00      	add	r7, sp, #0
     9de:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     9e0:	4a04      	ldr	r2, [pc, #16]	; (9f4 <am_util_stdio_printf_init+0x1c>)
     9e2:	687b      	ldr	r3, [r7, #4]
     9e4:	6013      	str	r3, [r2, #0]
}
     9e6:	bf00      	nop
     9e8:	370c      	adds	r7, #12
     9ea:	46bd      	mov	sp, r7
     9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f0:	4770      	bx	lr
     9f2:	bf00      	nop
     9f4:	10001130 	.word	0x10001130

000009f8 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     9f8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     9fc:	b096      	sub	sp, #88	; 0x58
     9fe:	af00      	add	r7, sp, #0
     a00:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     a04:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     a08:	0025      	movs	r5, r4
     a0a:	2600      	movs	r6, #0
     a0c:	ea55 0306 	orrs.w	r3, r5, r6
     a10:	f000 80a0 	beq.w	b54 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     a14:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     a18:	0862      	lsrs	r2, r4, #1
     a1a:	ea4f 0133 	mov.w	r1, r3, rrx
     a1e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     a22:	ea4f 0893 	mov.w	r8, r3, lsr #2
     a26:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     a2a:	ea4f 0994 	mov.w	r9, r4, lsr #2
     a2e:	eb11 0308 	adds.w	r3, r1, r8
     a32:	eb42 0409 	adc.w	r4, r2, r9
     a36:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     a3a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a3e:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     a42:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     a46:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     a4a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a4e:	eb13 030a 	adds.w	r3, r3, sl
     a52:	eb44 040b 	adc.w	r4, r4, fp
     a56:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     a5a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a5e:	0a1a      	lsrs	r2, r3, #8
     a60:	62ba      	str	r2, [r7, #40]	; 0x28
     a62:	6aba      	ldr	r2, [r7, #40]	; 0x28
     a64:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     a68:	62ba      	str	r2, [r7, #40]	; 0x28
     a6a:	0a23      	lsrs	r3, r4, #8
     a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
     a6e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a72:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     a76:	18c9      	adds	r1, r1, r3
     a78:	eb42 0204 	adc.w	r2, r2, r4
     a7c:	460b      	mov	r3, r1
     a7e:	4614      	mov	r4, r2
     a80:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     a84:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a88:	0c1a      	lsrs	r2, r3, #16
     a8a:	623a      	str	r2, [r7, #32]
     a8c:	6a3a      	ldr	r2, [r7, #32]
     a8e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     a92:	623a      	str	r2, [r7, #32]
     a94:	0c23      	lsrs	r3, r4, #16
     a96:	627b      	str	r3, [r7, #36]	; 0x24
     a98:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     a9c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     aa0:	18c9      	adds	r1, r1, r3
     aa2:	eb42 0204 	adc.w	r2, r2, r4
     aa6:	460b      	mov	r3, r1
     aa8:	4614      	mov	r4, r2
     aaa:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     aae:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     ab2:	0023      	movs	r3, r4
     ab4:	603b      	str	r3, [r7, #0]
     ab6:	2300      	movs	r3, #0
     ab8:	607b      	str	r3, [r7, #4]
     aba:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     abe:	e897 0006 	ldmia.w	r7, {r1, r2}
     ac2:	18c9      	adds	r1, r1, r3
     ac4:	eb42 0204 	adc.w	r2, r2, r4
     ac8:	460b      	mov	r3, r1
     aca:	4614      	mov	r4, r2
     acc:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     ad0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     ad4:	08da      	lsrs	r2, r3, #3
     ad6:	613a      	str	r2, [r7, #16]
     ad8:	693a      	ldr	r2, [r7, #16]
     ada:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     ade:	613a      	str	r2, [r7, #16]
     ae0:	08e3      	lsrs	r3, r4, #3
     ae2:	617b      	str	r3, [r7, #20]
     ae4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     ae8:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     aec:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
     af0:	460b      	mov	r3, r1
     af2:	4614      	mov	r4, r2
     af4:	00a0      	lsls	r0, r4, #2
     af6:	60f8      	str	r0, [r7, #12]
     af8:	68f8      	ldr	r0, [r7, #12]
     afa:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
     afe:	60f8      	str	r0, [r7, #12]
     b00:	009b      	lsls	r3, r3, #2
     b02:	60bb      	str	r3, [r7, #8]
     b04:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     b08:	185b      	adds	r3, r3, r1
     b0a:	eb44 0402 	adc.w	r4, r4, r2
     b0e:	18db      	adds	r3, r3, r3
     b10:	eb44 0404 	adc.w	r4, r4, r4
     b14:	4619      	mov	r1, r3
     b16:	4622      	mov	r2, r4
     b18:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     b1c:	1a5b      	subs	r3, r3, r1
     b1e:	eb64 0402 	sbc.w	r4, r4, r2
     b22:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     b26:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     b2a:	3306      	adds	r3, #6
     b2c:	f144 0400 	adc.w	r4, r4, #0
     b30:	091a      	lsrs	r2, r3, #4
     b32:	61ba      	str	r2, [r7, #24]
     b34:	69ba      	ldr	r2, [r7, #24]
     b36:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     b3a:	61ba      	str	r2, [r7, #24]
     b3c:	0923      	lsrs	r3, r4, #4
     b3e:	61fb      	str	r3, [r7, #28]
     b40:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     b44:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     b48:	18c9      	adds	r1, r1, r3
     b4a:	eb42 0204 	adc.w	r2, r2, r4
     b4e:	460b      	mov	r3, r1
     b50:	4614      	mov	r4, r2
     b52:	e029      	b.n	ba8 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     b56:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     b5a:	085a      	lsrs	r2, r3, #1
     b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     b5e:	089b      	lsrs	r3, r3, #2
     b60:	4413      	add	r3, r2
     b62:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     b66:	091b      	lsrs	r3, r3, #4
     b68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     b6a:	4413      	add	r3, r2
     b6c:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     b70:	0a1b      	lsrs	r3, r3, #8
     b72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     b74:	4413      	add	r3, r2
     b76:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     b7a:	0c1b      	lsrs	r3, r3, #16
     b7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     b7e:	4413      	add	r3, r2
     b80:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     b84:	08db      	lsrs	r3, r3, #3
     b86:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     b88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     b8a:	4613      	mov	r3, r2
     b8c:	009b      	lsls	r3, r3, #2
     b8e:	4413      	add	r3, r2
     b90:	005b      	lsls	r3, r3, #1
     b92:	461a      	mov	r2, r3
     b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     b96:	1a9b      	subs	r3, r3, r2
     b98:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b9c:	3306      	adds	r3, #6
     b9e:	091a      	lsrs	r2, r3, #4
     ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     ba2:	4413      	add	r3, r2
     ba4:	f04f 0400 	mov.w	r4, #0
    }
}
     ba8:	4618      	mov	r0, r3
     baa:	4621      	mov	r1, r4
     bac:	3758      	adds	r7, #88	; 0x58
     bae:	46bd      	mov	sp, r7
     bb0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     bb4:	4770      	bx	lr

00000bb6 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     bb6:	b590      	push	{r4, r7, lr}
     bb8:	b085      	sub	sp, #20
     bba:	af00      	add	r7, sp, #0
     bbc:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     bc0:	683a      	ldr	r2, [r7, #0]
     bc2:	687b      	ldr	r3, [r7, #4]
     bc4:	4313      	orrs	r3, r2
     bc6:	2b00      	cmp	r3, #0
     bc8:	bf0c      	ite	eq
     bca:	2301      	moveq	r3, #1
     bcc:	2300      	movne	r3, #0
     bce:	b2db      	uxtb	r3, r3
     bd0:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     bd2:	e008      	b.n	be6 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     bd4:	e9d7 0100 	ldrd	r0, r1, [r7]
     bd8:	f7ff ff0e 	bl	9f8 <divu64_10>
     bdc:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     be0:	68fb      	ldr	r3, [r7, #12]
     be2:	3301      	adds	r3, #1
     be4:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
     be6:	e897 0018 	ldmia.w	r7, {r3, r4}
     bea:	4323      	orrs	r3, r4
     bec:	d1f2      	bne.n	bd4 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
     bee:	68fb      	ldr	r3, [r7, #12]
}
     bf0:	4618      	mov	r0, r3
     bf2:	3714      	adds	r7, #20
     bf4:	46bd      	mov	sp, r7
     bf6:	bd90      	pop	{r4, r7, pc}

00000bf8 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     bf8:	b590      	push	{r4, r7, lr}
     bfa:	b083      	sub	sp, #12
     bfc:	af00      	add	r7, sp, #0
     bfe:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     c02:	e897 0018 	ldmia.w	r7, {r3, r4}
     c06:	2b00      	cmp	r3, #0
     c08:	f174 0300 	sbcs.w	r3, r4, #0
     c0c:	da06      	bge.n	c1c <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     c0e:	e897 0018 	ldmia.w	r7, {r3, r4}
     c12:	425b      	negs	r3, r3
     c14:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     c18:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     c1c:	e897 0018 	ldmia.w	r7, {r3, r4}
     c20:	4618      	mov	r0, r3
     c22:	4621      	mov	r1, r4
     c24:	f7ff ffc7 	bl	bb6 <ndigits_in_u64>
     c28:	4603      	mov	r3, r0
}
     c2a:	4618      	mov	r0, r3
     c2c:	370c      	adds	r7, #12
     c2e:	46bd      	mov	sp, r7
     c30:	bd90      	pop	{r4, r7, pc}

00000c32 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     c32:	b490      	push	{r4, r7}
     c34:	b084      	sub	sp, #16
     c36:	af00      	add	r7, sp, #0
     c38:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     c3c:	6839      	ldr	r1, [r7, #0]
     c3e:	687a      	ldr	r2, [r7, #4]
     c40:	430a      	orrs	r2, r1
     c42:	2a00      	cmp	r2, #0
     c44:	bf0c      	ite	eq
     c46:	2201      	moveq	r2, #1
     c48:	2200      	movne	r2, #0
     c4a:	b2d2      	uxtb	r2, r2
     c4c:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     c4e:	e00a      	b.n	c66 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     c50:	e897 0006 	ldmia.w	r7, {r1, r2}
     c54:	090b      	lsrs	r3, r1, #4
     c56:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     c5a:	0914      	lsrs	r4, r2, #4
     c5c:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     c60:	68fa      	ldr	r2, [r7, #12]
     c62:	3201      	adds	r2, #1
     c64:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
     c66:	e897 0006 	ldmia.w	r7, {r1, r2}
     c6a:	430a      	orrs	r2, r1
     c6c:	d1f0      	bne.n	c50 <ndigits_in_hex+0x1e>
    }

    return iDigits;
     c6e:	68fb      	ldr	r3, [r7, #12]
}
     c70:	4618      	mov	r0, r3
     c72:	3710      	adds	r7, #16
     c74:	46bd      	mov	sp, r7
     c76:	bc90      	pop	{r4, r7}
     c78:	4770      	bx	lr

00000c7a <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     c7a:	b480      	push	{r7}
     c7c:	b087      	sub	sp, #28
     c7e:	af00      	add	r7, sp, #0
     c80:	6078      	str	r0, [r7, #4]
     c82:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     c84:	2300      	movs	r3, #0
     c86:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     c88:	2300      	movs	r3, #0
     c8a:	613b      	str	r3, [r7, #16]
     c8c:	2300      	movs	r3, #0
     c8e:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     c90:	687b      	ldr	r3, [r7, #4]
     c92:	781b      	ldrb	r3, [r3, #0]
     c94:	2b2d      	cmp	r3, #45	; 0x2d
     c96:	d11b      	bne.n	cd0 <decstr_to_int+0x56>
    {
        bNeg = true;
     c98:	2301      	movs	r3, #1
     c9a:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     c9c:	687b      	ldr	r3, [r7, #4]
     c9e:	3301      	adds	r3, #1
     ca0:	607b      	str	r3, [r7, #4]
        uCnt++;
     ca2:	68fb      	ldr	r3, [r7, #12]
     ca4:	3301      	adds	r3, #1
     ca6:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     ca8:	e012      	b.n	cd0 <decstr_to_int+0x56>
    {
        ++uCnt;
     caa:	68fb      	ldr	r3, [r7, #12]
     cac:	3301      	adds	r3, #1
     cae:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     cb0:	693a      	ldr	r2, [r7, #16]
     cb2:	4613      	mov	r3, r2
     cb4:	009b      	lsls	r3, r3, #2
     cb6:	4413      	add	r3, r2
     cb8:	005b      	lsls	r3, r3, #1
     cba:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     cbc:	687b      	ldr	r3, [r7, #4]
     cbe:	781b      	ldrb	r3, [r3, #0]
     cc0:	461a      	mov	r2, r3
     cc2:	693b      	ldr	r3, [r7, #16]
     cc4:	4413      	add	r3, r2
     cc6:	3b30      	subs	r3, #48	; 0x30
     cc8:	613b      	str	r3, [r7, #16]
        pcStr++;
     cca:	687b      	ldr	r3, [r7, #4]
     ccc:	3301      	adds	r3, #1
     cce:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     cd0:	687b      	ldr	r3, [r7, #4]
     cd2:	781b      	ldrb	r3, [r3, #0]
     cd4:	2b2f      	cmp	r3, #47	; 0x2f
     cd6:	d903      	bls.n	ce0 <decstr_to_int+0x66>
     cd8:	687b      	ldr	r3, [r7, #4]
     cda:	781b      	ldrb	r3, [r3, #0]
     cdc:	2b39      	cmp	r3, #57	; 0x39
     cde:	d9e4      	bls.n	caa <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
     ce0:	683b      	ldr	r3, [r7, #0]
     ce2:	2b00      	cmp	r3, #0
     ce4:	d002      	beq.n	cec <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     ce6:	683b      	ldr	r3, [r7, #0]
     ce8:	68fa      	ldr	r2, [r7, #12]
     cea:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     cec:	7dfb      	ldrb	r3, [r7, #23]
     cee:	2b00      	cmp	r3, #0
     cf0:	d002      	beq.n	cf8 <decstr_to_int+0x7e>
     cf2:	693b      	ldr	r3, [r7, #16]
     cf4:	425b      	negs	r3, r3
     cf6:	e000      	b.n	cfa <decstr_to_int+0x80>
     cf8:	693b      	ldr	r3, [r7, #16]
}
     cfa:	4618      	mov	r0, r3
     cfc:	371c      	adds	r7, #28
     cfe:	46bd      	mov	sp, r7
     d00:	f85d 7b04 	ldr.w	r7, [sp], #4
     d04:	4770      	bx	lr

00000d06 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     d06:	b590      	push	{r4, r7, lr}
     d08:	b091      	sub	sp, #68	; 0x44
     d0a:	af00      	add	r7, sp, #0
     d0c:	e9c7 0102 	strd	r0, r1, [r7, #8]
     d10:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     d12:	2300      	movs	r3, #0
     d14:	63fb      	str	r3, [r7, #60]	; 0x3c
     d16:	2300      	movs	r3, #0
     d18:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     d1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     d1e:	f7ff fe6b 	bl	9f8 <divu64_10>
     d22:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     d26:	68b9      	ldr	r1, [r7, #8]
     d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     d2a:	4613      	mov	r3, r2
     d2c:	009b      	lsls	r3, r3, #2
     d2e:	4413      	add	r3, r2
     d30:	005b      	lsls	r3, r3, #1
     d32:	1acb      	subs	r3, r1, r3
     d34:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d38:	1c5a      	adds	r2, r3, #1
     d3a:	63fa      	str	r2, [r7, #60]	; 0x3c
     d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     d3e:	b2d2      	uxtb	r2, r2
     d40:	3230      	adds	r2, #48	; 0x30
     d42:	b2d2      	uxtb	r2, r2
     d44:	f107 0140 	add.w	r1, r7, #64	; 0x40
     d48:	440b      	add	r3, r1
     d4a:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     d4e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     d52:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     d56:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     d5a:	4323      	orrs	r3, r4
     d5c:	d1dd      	bne.n	d1a <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d60:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     d62:	687b      	ldr	r3, [r7, #4]
     d64:	2b00      	cmp	r3, #0
     d66:	d011      	beq.n	d8c <uint64_to_str+0x86>
    {
        while ( ix-- )
     d68:	e008      	b.n	d7c <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     d6a:	687b      	ldr	r3, [r7, #4]
     d6c:	1c5a      	adds	r2, r3, #1
     d6e:	607a      	str	r2, [r7, #4]
     d70:	f107 0110 	add.w	r1, r7, #16
     d74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     d76:	440a      	add	r2, r1
     d78:	7812      	ldrb	r2, [r2, #0]
     d7a:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
     d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d7e:	1e5a      	subs	r2, r3, #1
     d80:	63fa      	str	r2, [r7, #60]	; 0x3c
     d82:	2b00      	cmp	r3, #0
     d84:	d1f1      	bne.n	d6a <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     d86:	687b      	ldr	r3, [r7, #4]
     d88:	2200      	movs	r2, #0
     d8a:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     d8e:	4618      	mov	r0, r3
     d90:	3744      	adds	r7, #68	; 0x44
     d92:	46bd      	mov	sp, r7
     d94:	bd90      	pop	{r4, r7, pc}

00000d96 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     d96:	b4b0      	push	{r4, r5, r7}
     d98:	b08d      	sub	sp, #52	; 0x34
     d9a:	af00      	add	r7, sp, #0
     d9c:	e9c7 0102 	strd	r0, r1, [r7, #8]
     da0:	607a      	str	r2, [r7, #4]
     da2:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     da4:	2300      	movs	r3, #0
     da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     da8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     dac:	4313      	orrs	r3, r2
     dae:	d131      	bne.n	e14 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     db2:	1c5a      	adds	r2, r3, #1
     db4:	62fa      	str	r2, [r7, #44]	; 0x2c
     db6:	f107 0230 	add.w	r2, r7, #48	; 0x30
     dba:	4413      	add	r3, r2
     dbc:	2230      	movs	r2, #48	; 0x30
     dbe:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     dc2:	e027      	b.n	e14 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     dc4:	7a3b      	ldrb	r3, [r7, #8]
     dc6:	f003 030f 	and.w	r3, r3, #15
     dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     dce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     dd2:	2b09      	cmp	r3, #9
     dd4:	d90a      	bls.n	dec <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     dd6:	78fb      	ldrb	r3, [r7, #3]
     dd8:	2b00      	cmp	r3, #0
     dda:	d001      	beq.n	de0 <uint64_to_hexstr+0x4a>
     ddc:	2227      	movs	r2, #39	; 0x27
     dde:	e000      	b.n	de2 <uint64_to_hexstr+0x4c>
     de0:	2207      	movs	r2, #7
     de2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     de6:	4413      	add	r3, r2
     de8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     dee:	1c5a      	adds	r2, r3, #1
     df0:	62fa      	str	r2, [r7, #44]	; 0x2c
     df2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     df6:	3230      	adds	r2, #48	; 0x30
     df8:	b2d2      	uxtb	r2, r2
     dfa:	f107 0130 	add.w	r1, r7, #48	; 0x30
     dfe:	440b      	add	r3, r1
     e00:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     e04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     e08:	0914      	lsrs	r4, r2, #4
     e0a:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     e0e:	091d      	lsrs	r5, r3, #4
     e10:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
     e14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     e18:	4313      	orrs	r3, r2
     e1a:	d1d3      	bne.n	dc4 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e1e:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     e20:	687b      	ldr	r3, [r7, #4]
     e22:	2b00      	cmp	r3, #0
     e24:	d011      	beq.n	e4a <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     e26:	e008      	b.n	e3a <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     e28:	687b      	ldr	r3, [r7, #4]
     e2a:	1c5a      	adds	r2, r3, #1
     e2c:	607a      	str	r2, [r7, #4]
     e2e:	f107 0110 	add.w	r1, r7, #16
     e32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     e34:	440a      	add	r2, r1
     e36:	7812      	ldrb	r2, [r2, #0]
     e38:	701a      	strb	r2, [r3, #0]
        while (ix--)
     e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e3c:	1e5a      	subs	r2, r3, #1
     e3e:	62fa      	str	r2, [r7, #44]	; 0x2c
     e40:	2b00      	cmp	r3, #0
     e42:	d1f1      	bne.n	e28 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     e44:	687b      	ldr	r3, [r7, #4]
     e46:	2200      	movs	r2, #0
     e48:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     e4c:	4618      	mov	r0, r3
     e4e:	3734      	adds	r7, #52	; 0x34
     e50:	46bd      	mov	sp, r7
     e52:	bcb0      	pop	{r4, r5, r7}
     e54:	4770      	bx	lr

00000e56 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     e56:	b480      	push	{r7}
     e58:	b085      	sub	sp, #20
     e5a:	af00      	add	r7, sp, #0
     e5c:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     e5e:	2300      	movs	r3, #0
     e60:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     e62:	687b      	ldr	r3, [r7, #4]
     e64:	2b00      	cmp	r3, #0
     e66:	d104      	bne.n	e72 <simple_strlen+0x1c>
    {
        return ui32RetVal;
     e68:	68fb      	ldr	r3, [r7, #12]
     e6a:	e009      	b.n	e80 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     e6c:	68fb      	ldr	r3, [r7, #12]
     e6e:	3301      	adds	r3, #1
     e70:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
     e72:	687b      	ldr	r3, [r7, #4]
     e74:	1c5a      	adds	r2, r3, #1
     e76:	607a      	str	r2, [r7, #4]
     e78:	781b      	ldrb	r3, [r3, #0]
     e7a:	2b00      	cmp	r3, #0
     e7c:	d1f6      	bne.n	e6c <simple_strlen+0x16>
    }
    return ui32RetVal;
     e7e:	68fb      	ldr	r3, [r7, #12]
}
     e80:	4618      	mov	r0, r3
     e82:	3714      	adds	r7, #20
     e84:	46bd      	mov	sp, r7
     e86:	f85d 7b04 	ldr.w	r7, [sp], #4
     e8a:	4770      	bx	lr

00000e8c <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     e8c:	b480      	push	{r7}
     e8e:	b087      	sub	sp, #28
     e90:	af00      	add	r7, sp, #0
     e92:	60f8      	str	r0, [r7, #12]
     e94:	460b      	mov	r3, r1
     e96:	607a      	str	r2, [r7, #4]
     e98:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     e9a:	2300      	movs	r3, #0
     e9c:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     e9e:	687b      	ldr	r3, [r7, #4]
     ea0:	2b00      	cmp	r3, #0
     ea2:	dc0c      	bgt.n	ebe <padbuffer+0x32>
    {
        return i32Cnt;
     ea4:	697b      	ldr	r3, [r7, #20]
     ea6:	e010      	b.n	eca <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     ea8:	68fb      	ldr	r3, [r7, #12]
     eaa:	2b00      	cmp	r3, #0
     eac:	d004      	beq.n	eb8 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     eae:	68fb      	ldr	r3, [r7, #12]
     eb0:	1c5a      	adds	r2, r3, #1
     eb2:	60fa      	str	r2, [r7, #12]
     eb4:	7afa      	ldrb	r2, [r7, #11]
     eb6:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     eb8:	697b      	ldr	r3, [r7, #20]
     eba:	3301      	adds	r3, #1
     ebc:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
     ebe:	687b      	ldr	r3, [r7, #4]
     ec0:	1e5a      	subs	r2, r3, #1
     ec2:	607a      	str	r2, [r7, #4]
     ec4:	2b00      	cmp	r3, #0
     ec6:	d1ef      	bne.n	ea8 <padbuffer+0x1c>
    }

    return i32Cnt;
     ec8:	697b      	ldr	r3, [r7, #20]
}
     eca:	4618      	mov	r0, r3
     ecc:	371c      	adds	r7, #28
     ece:	46bd      	mov	sp, r7
     ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ed4:	4770      	bx	lr
	...

00000ed8 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     ed8:	b590      	push	{r4, r7, lr}
     eda:	b08f      	sub	sp, #60	; 0x3c
     edc:	af00      	add	r7, sp, #0
     ede:	60f8      	str	r0, [r7, #12]
     ee0:	60b9      	str	r1, [r7, #8]
     ee2:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
     ee4:	68bb      	ldr	r3, [r7, #8]
     ee6:	681b      	ldr	r3, [r3, #0]
     ee8:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
     eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     eec:	2b03      	cmp	r3, #3
     eee:	dc02      	bgt.n	ef6 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     ef0:	f06f 0302 	mvn.w	r3, #2
     ef4:	e0e7      	b.n	10c6 <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
     ef6:	edd7 7a03 	vldr	s15, [r7, #12]
     efa:	eef5 7a40 	vcmp.f32	s15, #0.0
     efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     f02:	d104      	bne.n	f0e <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     f04:	68bb      	ldr	r3, [r7, #8]
     f06:	4a72      	ldr	r2, [pc, #456]	; (10d0 <ftoa+0x1f8>)
     f08:	601a      	str	r2, [r3, #0]
        return 3;
     f0a:	2303      	movs	r3, #3
     f0c:	e0db      	b.n	10c6 <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
     f0e:	68bb      	ldr	r3, [r7, #8]
     f10:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
     f12:	68fb      	ldr	r3, [r7, #12]
     f14:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     f16:	693b      	ldr	r3, [r7, #16]
     f18:	15db      	asrs	r3, r3, #23
     f1a:	b2db      	uxtb	r3, r3
     f1c:	3b7f      	subs	r3, #127	; 0x7f
     f1e:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     f20:	693b      	ldr	r3, [r7, #16]
     f22:	f3c3 0316 	ubfx	r3, r3, #0, #23
     f26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     f2a:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
     f2c:	2300      	movs	r3, #0
     f2e:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     f30:	2300      	movs	r3, #0
     f32:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     f34:	69fb      	ldr	r3, [r7, #28]
     f36:	2b1e      	cmp	r3, #30
     f38:	dd02      	ble.n	f40 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     f3a:	f06f 0301 	mvn.w	r3, #1
     f3e:	e0c2      	b.n	10c6 <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
     f40:	69fb      	ldr	r3, [r7, #28]
     f42:	f113 0f17 	cmn.w	r3, #23
     f46:	da02      	bge.n	f4e <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     f48:	f04f 33ff 	mov.w	r3, #4294967295
     f4c:	e0bb      	b.n	10c6 <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
     f4e:	69fb      	ldr	r3, [r7, #28]
     f50:	2b16      	cmp	r3, #22
     f52:	dd06      	ble.n	f62 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
     f54:	69fb      	ldr	r3, [r7, #28]
     f56:	3b17      	subs	r3, #23
     f58:	69ba      	ldr	r2, [r7, #24]
     f5a:	fa02 f303 	lsl.w	r3, r2, r3
     f5e:	637b      	str	r3, [r7, #52]	; 0x34
     f60:	e01a      	b.n	f98 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     f62:	69fb      	ldr	r3, [r7, #28]
     f64:	2b00      	cmp	r3, #0
     f66:	db0f      	blt.n	f88 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
     f68:	69fb      	ldr	r3, [r7, #28]
     f6a:	f1c3 0317 	rsb	r3, r3, #23
     f6e:	69ba      	ldr	r2, [r7, #24]
     f70:	fa42 f303 	asr.w	r3, r2, r3
     f74:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
     f76:	69fb      	ldr	r3, [r7, #28]
     f78:	3301      	adds	r3, #1
     f7a:	69ba      	ldr	r2, [r7, #24]
     f7c:	fa02 f303 	lsl.w	r3, r2, r3
     f80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     f84:	633b      	str	r3, [r7, #48]	; 0x30
     f86:	e007      	b.n	f98 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
     f88:	69bb      	ldr	r3, [r7, #24]
     f8a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     f8e:	69fb      	ldr	r3, [r7, #28]
     f90:	43db      	mvns	r3, r3
     f92:	fa42 f303 	asr.w	r3, r2, r3
     f96:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     f98:	693b      	ldr	r3, [r7, #16]
     f9a:	2b00      	cmp	r3, #0
     f9c:	da04      	bge.n	fa8 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     f9e:	68bb      	ldr	r3, [r7, #8]
     fa0:	1c5a      	adds	r2, r3, #1
     fa2:	60ba      	str	r2, [r7, #8]
     fa4:	222d      	movs	r2, #45	; 0x2d
     fa6:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     faa:	2b00      	cmp	r3, #0
     fac:	d105      	bne.n	fba <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     fae:	68bb      	ldr	r3, [r7, #8]
     fb0:	1c5a      	adds	r2, r3, #1
     fb2:	60ba      	str	r2, [r7, #8]
     fb4:	2230      	movs	r2, #48	; 0x30
     fb6:	701a      	strb	r2, [r3, #0]
     fb8:	e021      	b.n	ffe <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     fbc:	2b00      	cmp	r3, #0
     fbe:	dd08      	ble.n	fd2 <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     fc2:	ea4f 74e3 	mov.w	r4, r3, asr #31
     fc6:	68ba      	ldr	r2, [r7, #8]
     fc8:	4618      	mov	r0, r3
     fca:	4621      	mov	r1, r4
     fcc:	f7ff fe9b 	bl	d06 <uint64_to_str>
     fd0:	e011      	b.n	ff6 <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     fd2:	68bb      	ldr	r3, [r7, #8]
     fd4:	1c5a      	adds	r2, r3, #1
     fd6:	60ba      	str	r2, [r7, #8]
     fd8:	222d      	movs	r2, #45	; 0x2d
     fda:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     fde:	425b      	negs	r3, r3
     fe0:	ea4f 74e3 	mov.w	r4, r3, asr #31
     fe4:	68ba      	ldr	r2, [r7, #8]
     fe6:	4618      	mov	r0, r3
     fe8:	4621      	mov	r1, r4
     fea:	f7ff fe8c 	bl	d06 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     fee:	e002      	b.n	ff6 <ftoa+0x11e>
        {
            pcBuf++;
     ff0:	68bb      	ldr	r3, [r7, #8]
     ff2:	3301      	adds	r3, #1
     ff4:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
     ff6:	68bb      	ldr	r3, [r7, #8]
     ff8:	781b      	ldrb	r3, [r3, #0]
     ffa:	2b00      	cmp	r3, #0
     ffc:	d1f8      	bne.n	ff0 <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     ffe:	68bb      	ldr	r3, [r7, #8]
    1000:	1c5a      	adds	r2, r3, #1
    1002:	60ba      	str	r2, [r7, #8]
    1004:	222e      	movs	r2, #46	; 0x2e
    1006:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    1008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    100a:	2b00      	cmp	r3, #0
    100c:	d105      	bne.n	101a <ftoa+0x142>
    {
        *pcBuf++ = '0';
    100e:	68bb      	ldr	r3, [r7, #8]
    1010:	1c5a      	adds	r2, r3, #1
    1012:	60ba      	str	r2, [r7, #8]
    1014:	2230      	movs	r2, #48	; 0x30
    1016:	701a      	strb	r2, [r3, #0]
    1018:	e04f      	b.n	10ba <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    101a:	68ba      	ldr	r2, [r7, #8]
    101c:	6a3b      	ldr	r3, [r7, #32]
    101e:	1ad3      	subs	r3, r2, r3
    1020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1022:	1ad3      	subs	r3, r2, r3
    1024:	3b01      	subs	r3, #1
    1026:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    1028:	697a      	ldr	r2, [r7, #20]
    102a:	687b      	ldr	r3, [r7, #4]
    102c:	4293      	cmp	r3, r2
    102e:	bfa8      	it	ge
    1030:	4613      	movge	r3, r2
    1032:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    1034:	2300      	movs	r3, #0
    1036:	62bb      	str	r3, [r7, #40]	; 0x28
    1038:	e015      	b.n	1066 <ftoa+0x18e>
        {
            i32FracPart *= 10;
    103a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    103c:	4613      	mov	r3, r2
    103e:	009b      	lsls	r3, r3, #2
    1040:	4413      	add	r3, r2
    1042:	005b      	lsls	r3, r3, #1
    1044:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    1046:	68bb      	ldr	r3, [r7, #8]
    1048:	1c5a      	adds	r2, r3, #1
    104a:	60ba      	str	r2, [r7, #8]
    104c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    104e:	1612      	asrs	r2, r2, #24
    1050:	b2d2      	uxtb	r2, r2
    1052:	3230      	adds	r2, #48	; 0x30
    1054:	b2d2      	uxtb	r2, r2
    1056:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    1058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    105a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    105e:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    1060:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1062:	3301      	adds	r3, #1
    1064:	62bb      	str	r3, [r7, #40]	; 0x28
    1066:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1068:	697b      	ldr	r3, [r7, #20]
    106a:	429a      	cmp	r2, r3
    106c:	dbe5      	blt.n	103a <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    106e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1070:	4613      	mov	r3, r2
    1072:	009b      	lsls	r3, r3, #2
    1074:	4413      	add	r3, r2
    1076:	005b      	lsls	r3, r3, #1
    1078:	161b      	asrs	r3, r3, #24
    107a:	2b04      	cmp	r3, #4
    107c:	dd1d      	ble.n	10ba <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    107e:	68bb      	ldr	r3, [r7, #8]
    1080:	3b01      	subs	r3, #1
    1082:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    1084:	e015      	b.n	10b2 <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
    1086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1088:	781b      	ldrb	r3, [r3, #0]
    108a:	2b2e      	cmp	r3, #46	; 0x2e
    108c:	d00e      	beq.n	10ac <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
    108e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1090:	781b      	ldrb	r3, [r3, #0]
    1092:	2b39      	cmp	r3, #57	; 0x39
    1094:	d103      	bne.n	109e <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
    1096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1098:	2230      	movs	r2, #48	; 0x30
    109a:	701a      	strb	r2, [r3, #0]
    109c:	e006      	b.n	10ac <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
    109e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    10a0:	781b      	ldrb	r3, [r3, #0]
    10a2:	3301      	adds	r3, #1
    10a4:	b2da      	uxtb	r2, r3
    10a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    10a8:	701a      	strb	r2, [r3, #0]
                    break;
    10aa:	e006      	b.n	10ba <ftoa+0x1e2>
                }
                pcBuftmp--;
    10ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    10ae:	3b01      	subs	r3, #1
    10b0:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    10b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    10b4:	6a3b      	ldr	r3, [r7, #32]
    10b6:	429a      	cmp	r2, r3
    10b8:	d2e5      	bcs.n	1086 <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    10ba:	68bb      	ldr	r3, [r7, #8]
    10bc:	2200      	movs	r2, #0
    10be:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    10c0:	68ba      	ldr	r2, [r7, #8]
    10c2:	6a3b      	ldr	r3, [r7, #32]
    10c4:	1ad3      	subs	r3, r2, r3
} // ftoa()
    10c6:	4618      	mov	r0, r3
    10c8:	373c      	adds	r7, #60	; 0x3c
    10ca:	46bd      	mov	sp, r7
    10cc:	bd90      	pop	{r4, r7, pc}
    10ce:	bf00      	nop
    10d0:	00302e30 	.word	0x00302e30

000010d4 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    10d4:	b590      	push	{r4, r7, lr}
    10d6:	b095      	sub	sp, #84	; 0x54
    10d8:	af00      	add	r7, sp, #0
    10da:	60f8      	str	r0, [r7, #12]
    10dc:	60b9      	str	r1, [r7, #8]
    10de:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    10e0:	2300      	movs	r3, #0
    10e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    10e4:	2300      	movs	r3, #0
    10e6:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    10e8:	e2e3      	b.n	16b2 <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    10ea:	2306      	movs	r3, #6
    10ec:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    10ee:	68bb      	ldr	r3, [r7, #8]
    10f0:	781b      	ldrb	r3, [r3, #0]
    10f2:	2b25      	cmp	r3, #37	; 0x25
    10f4:	d01f      	beq.n	1136 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    10f6:	68fb      	ldr	r3, [r7, #12]
    10f8:	2b00      	cmp	r3, #0
    10fa:	d015      	beq.n	1128 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    10fc:	68bb      	ldr	r3, [r7, #8]
    10fe:	781b      	ldrb	r3, [r3, #0]
    1100:	2b0a      	cmp	r3, #10
    1102:	d10b      	bne.n	111c <am_util_stdio_vsprintf+0x48>
    1104:	4bb1      	ldr	r3, [pc, #708]	; (13cc <am_util_stdio_vsprintf+0x2f8>)
    1106:	781b      	ldrb	r3, [r3, #0]
    1108:	2b00      	cmp	r3, #0
    110a:	d007      	beq.n	111c <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    110c:	68fb      	ldr	r3, [r7, #12]
    110e:	1c5a      	adds	r2, r3, #1
    1110:	60fa      	str	r2, [r7, #12]
    1112:	220d      	movs	r2, #13
    1114:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    1116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1118:	3301      	adds	r3, #1
    111a:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    111c:	68fb      	ldr	r3, [r7, #12]
    111e:	1c5a      	adds	r2, r3, #1
    1120:	60fa      	str	r2, [r7, #12]
    1122:	68ba      	ldr	r2, [r7, #8]
    1124:	7812      	ldrb	r2, [r2, #0]
    1126:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    1128:	68bb      	ldr	r3, [r7, #8]
    112a:	3301      	adds	r3, #1
    112c:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    112e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1130:	3301      	adds	r3, #1
    1132:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    1134:	e2bd      	b.n	16b2 <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    1136:	68bb      	ldr	r3, [r7, #8]
    1138:	3301      	adds	r3, #1
    113a:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    113c:	2300      	movs	r3, #0
    113e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    1142:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1146:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    114a:	2320      	movs	r3, #32
    114c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    1150:	68bb      	ldr	r3, [r7, #8]
    1152:	781b      	ldrb	r3, [r3, #0]
    1154:	2b30      	cmp	r3, #48	; 0x30
    1156:	d105      	bne.n	1164 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    1158:	2330      	movs	r3, #48	; 0x30
    115a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    115e:	68bb      	ldr	r3, [r7, #8]
    1160:	3301      	adds	r3, #1
    1162:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    1164:	f107 0310 	add.w	r3, r7, #16
    1168:	4619      	mov	r1, r3
    116a:	68b8      	ldr	r0, [r7, #8]
    116c:	f7ff fd85 	bl	c7a <decstr_to_int>
    1170:	4603      	mov	r3, r0
    1172:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    1174:	693b      	ldr	r3, [r7, #16]
    1176:	68ba      	ldr	r2, [r7, #8]
    1178:	4413      	add	r3, r2
    117a:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    117c:	68bb      	ldr	r3, [r7, #8]
    117e:	781b      	ldrb	r3, [r3, #0]
    1180:	2b73      	cmp	r3, #115	; 0x73
    1182:	d005      	beq.n	1190 <am_util_stdio_vsprintf+0xbc>
    1184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1186:	2b00      	cmp	r3, #0
    1188:	da02      	bge.n	1190 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    118a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    118c:	425b      	negs	r3, r3
    118e:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    1190:	68bb      	ldr	r3, [r7, #8]
    1192:	781b      	ldrb	r3, [r3, #0]
    1194:	2b2e      	cmp	r3, #46	; 0x2e
    1196:	d10e      	bne.n	11b6 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    1198:	68bb      	ldr	r3, [r7, #8]
    119a:	3301      	adds	r3, #1
    119c:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    119e:	f107 0310 	add.w	r3, r7, #16
    11a2:	4619      	mov	r1, r3
    11a4:	68b8      	ldr	r0, [r7, #8]
    11a6:	f7ff fd68 	bl	c7a <decstr_to_int>
    11aa:	4603      	mov	r3, r0
    11ac:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    11ae:	693b      	ldr	r3, [r7, #16]
    11b0:	68ba      	ldr	r2, [r7, #8]
    11b2:	4413      	add	r3, r2
    11b4:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    11b6:	68bb      	ldr	r3, [r7, #8]
    11b8:	781b      	ldrb	r3, [r3, #0]
    11ba:	2b6c      	cmp	r3, #108	; 0x6c
    11bc:	d10c      	bne.n	11d8 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    11be:	68bb      	ldr	r3, [r7, #8]
    11c0:	3301      	adds	r3, #1
    11c2:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    11c4:	68bb      	ldr	r3, [r7, #8]
    11c6:	781b      	ldrb	r3, [r3, #0]
    11c8:	2b6c      	cmp	r3, #108	; 0x6c
    11ca:	d105      	bne.n	11d8 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    11cc:	68bb      	ldr	r3, [r7, #8]
    11ce:	3301      	adds	r3, #1
    11d0:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    11d2:	2301      	movs	r3, #1
    11d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    11d8:	68bb      	ldr	r3, [r7, #8]
    11da:	781b      	ldrb	r3, [r3, #0]
    11dc:	3b46      	subs	r3, #70	; 0x46
    11de:	2b32      	cmp	r3, #50	; 0x32
    11e0:	f200 8254 	bhi.w	168c <am_util_stdio_vsprintf+0x5b8>
    11e4:	a201      	add	r2, pc, #4	; (adr r2, 11ec <am_util_stdio_vsprintf+0x118>)
    11e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    11ea:	bf00      	nop
    11ec:	00001617 	.word	0x00001617
    11f0:	0000168d 	.word	0x0000168d
    11f4:	0000168d 	.word	0x0000168d
    11f8:	0000168d 	.word	0x0000168d
    11fc:	0000168d 	.word	0x0000168d
    1200:	0000168d 	.word	0x0000168d
    1204:	0000168d 	.word	0x0000168d
    1208:	0000168d 	.word	0x0000168d
    120c:	0000168d 	.word	0x0000168d
    1210:	0000168d 	.word	0x0000168d
    1214:	0000168d 	.word	0x0000168d
    1218:	0000168d 	.word	0x0000168d
    121c:	0000168d 	.word	0x0000168d
    1220:	0000168d 	.word	0x0000168d
    1224:	0000168d 	.word	0x0000168d
    1228:	0000168d 	.word	0x0000168d
    122c:	0000168d 	.word	0x0000168d
    1230:	0000168d 	.word	0x0000168d
    1234:	000013b3 	.word	0x000013b3
    1238:	0000168d 	.word	0x0000168d
    123c:	0000168d 	.word	0x0000168d
    1240:	0000168d 	.word	0x0000168d
    1244:	0000168d 	.word	0x0000168d
    1248:	0000168d 	.word	0x0000168d
    124c:	0000168d 	.word	0x0000168d
    1250:	0000168d 	.word	0x0000168d
    1254:	0000168d 	.word	0x0000168d
    1258:	0000168d 	.word	0x0000168d
    125c:	0000168d 	.word	0x0000168d
    1260:	000012b9 	.word	0x000012b9
    1264:	000014df 	.word	0x000014df
    1268:	0000168d 	.word	0x0000168d
    126c:	00001617 	.word	0x00001617
    1270:	0000168d 	.word	0x0000168d
    1274:	0000168d 	.word	0x0000168d
    1278:	000014df 	.word	0x000014df
    127c:	0000168d 	.word	0x0000168d
    1280:	0000168d 	.word	0x0000168d
    1284:	0000168d 	.word	0x0000168d
    1288:	0000168d 	.word	0x0000168d
    128c:	0000168d 	.word	0x0000168d
    1290:	0000168d 	.word	0x0000168d
    1294:	0000168d 	.word	0x0000168d
    1298:	0000168d 	.word	0x0000168d
    129c:	0000168d 	.word	0x0000168d
    12a0:	000012df 	.word	0x000012df
    12a4:	0000168d 	.word	0x0000168d
    12a8:	0000144d 	.word	0x0000144d
    12ac:	0000168d 	.word	0x0000168d
    12b0:	0000168d 	.word	0x0000168d
    12b4:	000013ad 	.word	0x000013ad
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    12b8:	687b      	ldr	r3, [r7, #4]
    12ba:	1d1a      	adds	r2, r3, #4
    12bc:	607a      	str	r2, [r7, #4]
    12be:	681b      	ldr	r3, [r3, #0]
    12c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    12c4:	68fb      	ldr	r3, [r7, #12]
    12c6:	2b00      	cmp	r3, #0
    12c8:	d005      	beq.n	12d6 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    12ca:	68fb      	ldr	r3, [r7, #12]
    12cc:	1c5a      	adds	r2, r3, #1
    12ce:	60fa      	str	r2, [r7, #12]
    12d0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    12d4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    12d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    12d8:	3301      	adds	r3, #1
    12da:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    12dc:	e1e6      	b.n	16ac <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
    12de:	687b      	ldr	r3, [r7, #4]
    12e0:	1d1a      	adds	r2, r3, #4
    12e2:	607a      	str	r2, [r7, #4]
    12e4:	681b      	ldr	r3, [r3, #0]
    12e6:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    12e8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    12ea:	f7ff fdb4 	bl	e56 <simple_strlen>
    12ee:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    12f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12f2:	2b00      	cmp	r3, #0
    12f4:	dd2e      	ble.n	1354 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    12f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    12fa:	429a      	cmp	r2, r3
    12fc:	d22a      	bcs.n	1354 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    12fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1302:	1ad3      	subs	r3, r2, r3
    1304:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1306:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    130a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    130c:	4619      	mov	r1, r3
    130e:	68f8      	ldr	r0, [r7, #12]
    1310:	f7ff fdbc 	bl	e8c <padbuffer>
    1314:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    1316:	68fb      	ldr	r3, [r7, #12]
    1318:	2b00      	cmp	r3, #0
    131a:	d001      	beq.n	1320 <am_util_stdio_vsprintf+0x24c>
    131c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    131e:	e000      	b.n	1322 <am_util_stdio_vsprintf+0x24e>
    1320:	2300      	movs	r3, #0
    1322:	68fa      	ldr	r2, [r7, #12]
    1324:	4413      	add	r3, r2
    1326:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    1328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    132a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    132c:	4413      	add	r3, r2
    132e:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    1330:	2300      	movs	r3, #0
    1332:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    1334:	e00e      	b.n	1354 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    1336:	68fb      	ldr	r3, [r7, #12]
    1338:	2b00      	cmp	r3, #0
    133a:	d005      	beq.n	1348 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    133c:	68fb      	ldr	r3, [r7, #12]
    133e:	1c5a      	adds	r2, r3, #1
    1340:	60fa      	str	r2, [r7, #12]
    1342:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1344:	7812      	ldrb	r2, [r2, #0]
    1346:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    1348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    134a:	3301      	adds	r3, #1
    134c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    134e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1350:	3301      	adds	r3, #1
    1352:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    1354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1356:	781b      	ldrb	r3, [r3, #0]
    1358:	2b00      	cmp	r3, #0
    135a:	d1ec      	bne.n	1336 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    135c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    135e:	2b00      	cmp	r3, #0
    1360:	f000 81a1 	beq.w	16a6 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
    1364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1366:	425b      	negs	r3, r3
    1368:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    136a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    136c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    136e:	429a      	cmp	r2, r3
    1370:	f080 8199 	bcs.w	16a6 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    1374:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1378:	1ad3      	subs	r3, r2, r3
    137a:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    137c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1380:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1382:	4619      	mov	r1, r3
    1384:	68f8      	ldr	r0, [r7, #12]
    1386:	f7ff fd81 	bl	e8c <padbuffer>
    138a:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    138c:	68fb      	ldr	r3, [r7, #12]
    138e:	2b00      	cmp	r3, #0
    1390:	d001      	beq.n	1396 <am_util_stdio_vsprintf+0x2c2>
    1392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1394:	e000      	b.n	1398 <am_util_stdio_vsprintf+0x2c4>
    1396:	2300      	movs	r3, #0
    1398:	68fa      	ldr	r2, [r7, #12]
    139a:	4413      	add	r3, r2
    139c:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    139e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    13a2:	4413      	add	r3, r2
    13a4:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    13a6:	2300      	movs	r3, #0
    13a8:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    13aa:	e17c      	b.n	16a6 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
    13ac:	2301      	movs	r3, #1
    13ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    13b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    13b6:	2b00      	cmp	r3, #0
    13b8:	d00a      	beq.n	13d0 <am_util_stdio_vsprintf+0x2fc>
    13ba:	687b      	ldr	r3, [r7, #4]
    13bc:	3307      	adds	r3, #7
    13be:	f023 0307 	bic.w	r3, r3, #7
    13c2:	f103 0208 	add.w	r2, r3, #8
    13c6:	607a      	str	r2, [r7, #4]
    13c8:	cb18      	ldmia	r3, {r3, r4}
    13ca:	e007      	b.n	13dc <am_util_stdio_vsprintf+0x308>
    13cc:	10001128 	.word	0x10001128
                                      va_arg(pArgs, uint32_t);
    13d0:	687b      	ldr	r3, [r7, #4]
    13d2:	1d1a      	adds	r2, r3, #4
    13d4:	607a      	str	r2, [r7, #4]
    13d6:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    13d8:	f04f 0400 	mov.w	r4, #0
    13dc:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    13e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13e2:	2b00      	cmp	r3, #0
    13e4:	d01e      	beq.n	1424 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    13e6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    13ea:	f7ff fc22 	bl	c32 <ndigits_in_hex>
    13ee:	4602      	mov	r2, r0
    13f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13f2:	1a9b      	subs	r3, r3, r2
    13f4:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    13f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    13fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
    13fc:	4619      	mov	r1, r3
    13fe:	68f8      	ldr	r0, [r7, #12]
    1400:	f7ff fd44 	bl	e8c <padbuffer>
    1404:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1406:	68fb      	ldr	r3, [r7, #12]
    1408:	2b00      	cmp	r3, #0
    140a:	d001      	beq.n	1410 <am_util_stdio_vsprintf+0x33c>
    140c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    140e:	e000      	b.n	1412 <am_util_stdio_vsprintf+0x33e>
    1410:	2300      	movs	r3, #0
    1412:	68fa      	ldr	r2, [r7, #12]
    1414:	4413      	add	r3, r2
    1416:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    1418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    141a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    141c:	4413      	add	r3, r2
    141e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1420:	2300      	movs	r3, #0
    1422:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    1424:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    1428:	68fa      	ldr	r2, [r7, #12]
    142a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    142e:	f7ff fcb2 	bl	d96 <uint64_to_hexstr>
    1432:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1434:	68fb      	ldr	r3, [r7, #12]
    1436:	2b00      	cmp	r3, #0
    1438:	d003      	beq.n	1442 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    143a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    143c:	68fa      	ldr	r2, [r7, #12]
    143e:	4413      	add	r3, r2
    1440:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1444:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1446:	4413      	add	r3, r2
    1448:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    144a:	e12f      	b.n	16ac <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    144c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    1450:	2b00      	cmp	r3, #0
    1452:	d008      	beq.n	1466 <am_util_stdio_vsprintf+0x392>
    1454:	687b      	ldr	r3, [r7, #4]
    1456:	3307      	adds	r3, #7
    1458:	f023 0307 	bic.w	r3, r3, #7
    145c:	f103 0208 	add.w	r2, r3, #8
    1460:	607a      	str	r2, [r7, #4]
    1462:	cb18      	ldmia	r3, {r3, r4}
    1464:	e005      	b.n	1472 <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    1466:	687b      	ldr	r3, [r7, #4]
    1468:	1d1a      	adds	r2, r3, #4
    146a:	607a      	str	r2, [r7, #4]
    146c:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    146e:	f04f 0400 	mov.w	r4, #0
    1472:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    1476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1478:	2b00      	cmp	r3, #0
    147a:	d01e      	beq.n	14ba <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    147c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    1480:	f7ff fb99 	bl	bb6 <ndigits_in_u64>
    1484:	4602      	mov	r2, r0
    1486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1488:	1a9b      	subs	r3, r3, r2
    148a:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    148c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1490:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1492:	4619      	mov	r1, r3
    1494:	68f8      	ldr	r0, [r7, #12]
    1496:	f7ff fcf9 	bl	e8c <padbuffer>
    149a:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    149c:	68fb      	ldr	r3, [r7, #12]
    149e:	2b00      	cmp	r3, #0
    14a0:	d001      	beq.n	14a6 <am_util_stdio_vsprintf+0x3d2>
    14a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14a4:	e000      	b.n	14a8 <am_util_stdio_vsprintf+0x3d4>
    14a6:	2300      	movs	r3, #0
    14a8:	68fa      	ldr	r2, [r7, #12]
    14aa:	4413      	add	r3, r2
    14ac:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    14ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    14b2:	4413      	add	r3, r2
    14b4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    14b6:	2300      	movs	r3, #0
    14b8:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    14ba:	68fa      	ldr	r2, [r7, #12]
    14bc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    14c0:	f7ff fc21 	bl	d06 <uint64_to_str>
    14c4:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    14c6:	68fb      	ldr	r3, [r7, #12]
    14c8:	2b00      	cmp	r3, #0
    14ca:	d003      	beq.n	14d4 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    14cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    14ce:	68fa      	ldr	r2, [r7, #12]
    14d0:	4413      	add	r3, r2
    14d2:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    14d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    14d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    14d8:	4413      	add	r3, r2
    14da:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    14dc:	e0e6      	b.n	16ac <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    14de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    14e2:	2b00      	cmp	r3, #0
    14e4:	d008      	beq.n	14f8 <am_util_stdio_vsprintf+0x424>
    14e6:	687b      	ldr	r3, [r7, #4]
    14e8:	3307      	adds	r3, #7
    14ea:	f023 0307 	bic.w	r3, r3, #7
    14ee:	f103 0208 	add.w	r2, r3, #8
    14f2:	607a      	str	r2, [r7, #4]
    14f4:	cb18      	ldmia	r3, {r3, r4}
    14f6:	e005      	b.n	1504 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	1d1a      	adds	r2, r3, #4
    14fc:	607a      	str	r2, [r7, #4]
    14fe:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    1500:	ea4f 74e3 	mov.w	r4, r3, asr #31
    1504:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    1508:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    150c:	2b00      	cmp	r3, #0
    150e:	f174 0300 	sbcs.w	r3, r4, #0
    1512:	da0a      	bge.n	152a <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    1514:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    1518:	425b      	negs	r3, r3
    151a:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    151e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    1522:	2301      	movs	r3, #1
    1524:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    1528:	e006      	b.n	1538 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    152a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    152e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    1532:	2300      	movs	r3, #0
    1534:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    1538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    153a:	2b00      	cmp	r3, #0
    153c:	d04a      	beq.n	15d4 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    153e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    1542:	4618      	mov	r0, r3
    1544:	4621      	mov	r1, r4
    1546:	f7ff fb57 	bl	bf8 <ndigits_in_i64>
    154a:	4602      	mov	r2, r0
    154c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    154e:	1a9b      	subs	r3, r3, r2
    1550:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    1552:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1556:	2b00      	cmp	r3, #0
    1558:	d011      	beq.n	157e <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    155a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    155c:	3b01      	subs	r3, #1
    155e:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    1560:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1564:	2b30      	cmp	r3, #48	; 0x30
    1566:	d10a      	bne.n	157e <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    1568:	68fb      	ldr	r3, [r7, #12]
    156a:	2b00      	cmp	r3, #0
    156c:	d004      	beq.n	1578 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    156e:	68fb      	ldr	r3, [r7, #12]
    1570:	1c5a      	adds	r2, r3, #1
    1572:	60fa      	str	r2, [r7, #12]
    1574:	222d      	movs	r2, #45	; 0x2d
    1576:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    1578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    157a:	3301      	adds	r3, #1
    157c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    157e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1582:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1584:	4619      	mov	r1, r3
    1586:	68f8      	ldr	r0, [r7, #12]
    1588:	f7ff fc80 	bl	e8c <padbuffer>
    158c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    158e:	68fb      	ldr	r3, [r7, #12]
    1590:	2b00      	cmp	r3, #0
    1592:	d001      	beq.n	1598 <am_util_stdio_vsprintf+0x4c4>
    1594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1596:	e000      	b.n	159a <am_util_stdio_vsprintf+0x4c6>
    1598:	2300      	movs	r3, #0
    159a:	68fa      	ldr	r2, [r7, #12]
    159c:	4413      	add	r3, r2
    159e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    15a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    15a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    15a4:	4413      	add	r3, r2
    15a6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    15a8:	2300      	movs	r3, #0
    15aa:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    15ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    15b0:	2b00      	cmp	r3, #0
    15b2:	d01e      	beq.n	15f2 <am_util_stdio_vsprintf+0x51e>
    15b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    15b8:	2b20      	cmp	r3, #32
    15ba:	d11a      	bne.n	15f2 <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    15bc:	68fb      	ldr	r3, [r7, #12]
    15be:	2b00      	cmp	r3, #0
    15c0:	d004      	beq.n	15cc <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    15c2:	68fb      	ldr	r3, [r7, #12]
    15c4:	1c5a      	adds	r2, r3, #1
    15c6:	60fa      	str	r2, [r7, #12]
    15c8:	222d      	movs	r2, #45	; 0x2d
    15ca:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    15cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    15ce:	3301      	adds	r3, #1
    15d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    15d2:	e00e      	b.n	15f2 <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    15d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    15d8:	2b00      	cmp	r3, #0
    15da:	d00a      	beq.n	15f2 <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    15dc:	68fb      	ldr	r3, [r7, #12]
    15de:	2b00      	cmp	r3, #0
    15e0:	d004      	beq.n	15ec <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    15e2:	68fb      	ldr	r3, [r7, #12]
    15e4:	1c5a      	adds	r2, r3, #1
    15e6:	60fa      	str	r2, [r7, #12]
    15e8:	222d      	movs	r2, #45	; 0x2d
    15ea:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    15ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    15ee:	3301      	adds	r3, #1
    15f0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    15f2:	68fa      	ldr	r2, [r7, #12]
    15f4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    15f8:	f7ff fb85 	bl	d06 <uint64_to_str>
    15fc:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    15fe:	68fb      	ldr	r3, [r7, #12]
    1600:	2b00      	cmp	r3, #0
    1602:	d003      	beq.n	160c <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    1604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1606:	68fa      	ldr	r2, [r7, #12]
    1608:	4413      	add	r3, r2
    160a:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    160c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    160e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1610:	4413      	add	r3, r2
    1612:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1614:	e04a      	b.n	16ac <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    1616:	68fb      	ldr	r3, [r7, #12]
    1618:	2b00      	cmp	r3, #0
    161a:	d046      	beq.n	16aa <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    161c:	687b      	ldr	r3, [r7, #4]
    161e:	3307      	adds	r3, #7
    1620:	f023 0307 	bic.w	r3, r3, #7
    1624:	f103 0208 	add.w	r2, r3, #8
    1628:	607a      	str	r2, [r7, #4]
    162a:	cb18      	ldmia	r3, {r3, r4}
    162c:	4618      	mov	r0, r3
    162e:	4621      	mov	r1, r4
    1630:	f7fe fd26 	bl	80 <__aeabi_d2f>
    1634:	4603      	mov	r3, r0
    1636:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    1638:	68fb      	ldr	r3, [r7, #12]
    163a:	2214      	movs	r2, #20
    163c:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    163e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1640:	68f9      	ldr	r1, [r7, #12]
    1642:	6978      	ldr	r0, [r7, #20]
    1644:	f7ff fc48 	bl	ed8 <ftoa>
    1648:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    164a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    164c:	2b00      	cmp	r3, #0
    164e:	da14      	bge.n	167a <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    1650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1652:	f1b3 3fff 	cmp.w	r3, #4294967295
    1656:	d102      	bne.n	165e <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    1658:	4b1e      	ldr	r3, [pc, #120]	; (16d4 <am_util_stdio_vsprintf+0x600>)
    165a:	62bb      	str	r3, [r7, #40]	; 0x28
    165c:	e008      	b.n	1670 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    165e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1660:	f113 0f02 	cmn.w	r3, #2
    1664:	d102      	bne.n	166c <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    1666:	4b1c      	ldr	r3, [pc, #112]	; (16d8 <am_util_stdio_vsprintf+0x604>)
    1668:	62bb      	str	r3, [r7, #40]	; 0x28
    166a:	e001      	b.n	1670 <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    166c:	4b1b      	ldr	r3, [pc, #108]	; (16dc <am_util_stdio_vsprintf+0x608>)
    166e:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    1670:	68fb      	ldr	r3, [r7, #12]
    1672:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1674:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    1676:	2303      	movs	r3, #3
    1678:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    167a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    167c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    167e:	4413      	add	r3, r2
    1680:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    1682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1684:	68fa      	ldr	r2, [r7, #12]
    1686:	4413      	add	r3, r2
    1688:	60fb      	str	r3, [r7, #12]
                }
                break;
    168a:	e00e      	b.n	16aa <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    168c:	68fb      	ldr	r3, [r7, #12]
    168e:	2b00      	cmp	r3, #0
    1690:	d005      	beq.n	169e <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    1692:	68fb      	ldr	r3, [r7, #12]
    1694:	1c5a      	adds	r2, r3, #1
    1696:	60fa      	str	r2, [r7, #12]
    1698:	68ba      	ldr	r2, [r7, #8]
    169a:	7812      	ldrb	r2, [r2, #0]
    169c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    169e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    16a0:	3301      	adds	r3, #1
    16a2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    16a4:	e002      	b.n	16ac <am_util_stdio_vsprintf+0x5d8>
                break;
    16a6:	bf00      	nop
    16a8:	e000      	b.n	16ac <am_util_stdio_vsprintf+0x5d8>
                break;
    16aa:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    16ac:	68bb      	ldr	r3, [r7, #8]
    16ae:	3301      	adds	r3, #1
    16b0:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    16b2:	68bb      	ldr	r3, [r7, #8]
    16b4:	781b      	ldrb	r3, [r3, #0]
    16b6:	2b00      	cmp	r3, #0
    16b8:	f47f ad17 	bne.w	10ea <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    16bc:	68fb      	ldr	r3, [r7, #12]
    16be:	2b00      	cmp	r3, #0
    16c0:	d002      	beq.n	16c8 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    16c2:	68fb      	ldr	r3, [r7, #12]
    16c4:	2200      	movs	r2, #0
    16c6:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    16c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    16ca:	4618      	mov	r0, r3
    16cc:	3754      	adds	r7, #84	; 0x54
    16ce:	46bd      	mov	sp, r7
    16d0:	bd90      	pop	{r4, r7, pc}
    16d2:	bf00      	nop
    16d4:	00302e30 	.word	0x00302e30
    16d8:	00232e23 	.word	0x00232e23
    16dc:	003f2e3f 	.word	0x003f2e3f

000016e0 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    16e0:	b40f      	push	{r0, r1, r2, r3}
    16e2:	b580      	push	{r7, lr}
    16e4:	b082      	sub	sp, #8
    16e6:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    16e8:	f107 0314 	add.w	r3, r7, #20
    16ec:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    16ee:	683a      	ldr	r2, [r7, #0]
    16f0:	6939      	ldr	r1, [r7, #16]
    16f2:	4808      	ldr	r0, [pc, #32]	; (1714 <am_util_stdio_printf+0x34>)
    16f4:	f7ff fcee 	bl	10d4 <am_util_stdio_vsprintf>
    16f8:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    16fa:	4b07      	ldr	r3, [pc, #28]	; (1718 <am_util_stdio_printf+0x38>)
    16fc:	681b      	ldr	r3, [r3, #0]
    16fe:	4805      	ldr	r0, [pc, #20]	; (1714 <am_util_stdio_printf+0x34>)
    1700:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    1702:	687b      	ldr	r3, [r7, #4]
}
    1704:	4618      	mov	r0, r3
    1706:	3708      	adds	r7, #8
    1708:	46bd      	mov	sp, r7
    170a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    170e:	b004      	add	sp, #16
    1710:	4770      	bx	lr
    1712:	bf00      	nop
    1714:	10001028 	.word	0x10001028
    1718:	10001130 	.word	0x10001130

0000171c <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    171c:	b580      	push	{r7, lr}
    171e:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    1720:	4802      	ldr	r0, [pc, #8]	; (172c <am_util_stdio_terminal_clear+0x10>)
    1722:	f7ff ffdd 	bl	16e0 <am_util_stdio_printf>
}
    1726:	bf00      	nop
    1728:	bd80      	pop	{r7, pc}
    172a:	bf00      	nop
    172c:	00001b34 	.word	0x00001b34

00001730 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    1730:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_mcuctrl_bucks_enable();
    1732:	f000 f93b 	bl	19ac <am_hal_mcuctrl_bucks_enable>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    1736:	f000 f9c7 	bl	1ac8 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    173a:	2001      	movs	r0, #1
    173c:	f000 f94c 	bl	19d8 <am_hal_rtc_osc_select>

    //
    // Stop the XTAL.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    1740:	2001      	movs	r0, #1
    1742:	f000 f883 	bl	184c <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    1746:	f000 f955 	bl	19f4 <am_hal_rtc_osc_disable>

    //
    // Disable the bandgap.
    //
    am_hal_mcuctrl_bandgap_disable();
}
    174a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_mcuctrl_bandgap_disable();
    174e:	f000 b925 	b.w	199c <am_hal_mcuctrl_bandgap_disable>
    1752:	bf00      	nop

00001754 <am_bsp_debug_printf_enable>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_debug_printf_enable(void)
{
    1754:	b510      	push	{r4, lr}
    am_hal_tpiu_config_t TPIUcfg;

    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    1756:	4b10      	ldr	r3, [pc, #64]	; (1798 <am_bsp_debug_printf_enable+0x44>)
    1758:	681c      	ldr	r4, [r3, #0]
    175a:	f014 0401 	ands.w	r4, r4, #1
{
    175e:	b086      	sub	sp, #24
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    1760:	d001      	beq.n	1766 <am_bsp_debug_printf_enable+0x12>
    // Enable the ITM and TPIU
    //
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    am_hal_tpiu_enable(&TPIUcfg);
    am_bsp_pin_enable(ITM_SWO);
}
    1762:	b006      	add	sp, #24
    1764:	bd10      	pop	{r4, pc}
    TPIUcfg.ui32SetItmBaud = AM_HAL_TPIU_BAUD_1M;
    1766:	a806      	add	r0, sp, #24
    1768:	490c      	ldr	r1, [pc, #48]	; (179c <am_bsp_debug_printf_enable+0x48>)
    176a:	f840 1d14 	str.w	r1, [r0, #-20]!
    am_hal_tpiu_enable(&TPIUcfg);
    176e:	f000 f949 	bl	1a04 <am_hal_tpiu_enable>
    am_bsp_pin_enable(ITM_SWO);
    1772:	4a0b      	ldr	r2, [pc, #44]	; (17a0 <am_bsp_debug_printf_enable+0x4c>)
    1774:	480b      	ldr	r0, [pc, #44]	; (17a4 <am_bsp_debug_printf_enable+0x50>)
    1776:	490c      	ldr	r1, [pc, #48]	; (17a8 <am_bsp_debug_printf_enable+0x54>)
    1778:	2373      	movs	r3, #115	; 0x73
    177a:	6013      	str	r3, [r2, #0]
    177c:	6803      	ldr	r3, [r0, #0]
    177e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    1782:	6003      	str	r3, [r0, #0]
    1784:	6808      	ldr	r0, [r1, #0]
    1786:	f420 4c7f 	bic.w	ip, r0, #65280	; 0xff00
    178a:	f44c 5380 	orr.w	r3, ip, #4096	; 0x1000
    178e:	600b      	str	r3, [r1, #0]
    1790:	6014      	str	r4, [r2, #0]
}
    1792:	b006      	add	sp, #24
    1794:	bd10      	pop	{r4, pc}
    1796:	bf00      	nop
    1798:	1000112c 	.word	0x1000112c
    179c:	000f4240 	.word	0x000f4240
    17a0:	40010060 	.word	0x40010060
    17a4:	40010054 	.word	0x40010054
    17a8:	40010028 	.word	0x40010028

000017ac <am_bsp_debug_printf_disable>:
//
//*****************************************************************************
void
am_bsp_debug_printf_disable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    17ac:	4b0f      	ldr	r3, [pc, #60]	; (17ec <am_bsp_debug_printf_disable+0x40>)
{
    17ae:	b510      	push	{r4, lr}
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    17b0:	681c      	ldr	r4, [r3, #0]
    17b2:	f014 0401 	ands.w	r4, r4, #1
    17b6:	d000      	beq.n	17ba <am_bsp_debug_printf_disable+0xe>
    17b8:	bd10      	pop	{r4, pc}
    {
        return;
    }
    am_hal_itm_not_busy();
    17ba:	f000 f89b 	bl	18f4 <am_hal_itm_not_busy>
    am_hal_gpio_pin_config(AM_BSP_GPIO_ITM_SWO, AM_HAL_GPIO_OUTPUT);
    17be:	4a0c      	ldr	r2, [pc, #48]	; (17f0 <am_bsp_debug_printf_disable+0x44>)
    17c0:	480c      	ldr	r0, [pc, #48]	; (17f4 <am_bsp_debug_printf_disable+0x48>)
    17c2:	490d      	ldr	r1, [pc, #52]	; (17f8 <am_bsp_debug_printf_disable+0x4c>)
    17c4:	2373      	movs	r3, #115	; 0x73
    17c6:	6013      	str	r3, [r2, #0]
    17c8:	6803      	ldr	r3, [r0, #0]
    17ca:	f023 0c70 	bic.w	ip, r3, #112	; 0x70
    17ce:	f04c 0320 	orr.w	r3, ip, #32
    17d2:	6003      	str	r3, [r0, #0]
    17d4:	6808      	ldr	r0, [r1, #0]
    17d6:	f420 4c7f 	bic.w	ip, r0, #65280	; 0xff00
    17da:	f44c 53c0 	orr.w	r3, ip, #6144	; 0x1800
    17de:	600b      	str	r3, [r1, #0]
    17e0:	6014      	str	r4, [r2, #0]
    am_hal_tpiu_disable();
}
    17e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_tpiu_disable();
    17e6:	f000 b969 	b.w	1abc <am_hal_tpiu_disable>
    17ea:	bf00      	nop
    17ec:	1000112c 	.word	0x1000112c
    17f0:	40010060 	.word	0x40010060
    17f4:	40010054 	.word	0x40010054
    17f8:	40010028 	.word	0x40010028

000017fc <am_bsp_itm_string_print>:
//
//*****************************************************************************
void
am_bsp_itm_string_print(char *pcString)
{
    am_hal_itm_print(pcString);
    17fc:	f000 b890 	b.w	1920 <am_hal_itm_print>

00001800 <am_hal_clkgen_sysclk_select>:
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1800:	4b05      	ldr	r3, [pc, #20]	; (1818 <am_hal_clkgen_sysclk_select+0x18>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1802:	4906      	ldr	r1, [pc, #24]	; (181c <am_hal_clkgen_sysclk_select+0x1c>)
{
    1804:	b410      	push	{r4}

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    1806:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    1808:	2447      	movs	r4, #71	; 0x47
    180a:	601c      	str	r4, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    180c:	6008      	str	r0, [r1, #0]
}
    180e:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(CLKGEN, CLKKEY) = 0;
    1812:	601a      	str	r2, [r3, #0]
}
    1814:	4770      	bx	lr
    1816:	bf00      	nop
    1818:	40004014 	.word	0x40004014
    181c:	40004018 	.word	0x40004018

00001820 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_BFR(CLKGEN, CCTRL, CORESEL);
    1820:	4b03      	ldr	r3, [pc, #12]	; (1830 <am_hal_clkgen_sysclk_get+0x10>)
    1822:	4a04      	ldr	r2, [pc, #16]	; (1834 <am_hal_clkgen_sysclk_get+0x14>)
    1824:	6818      	ldr	r0, [r3, #0]
    1826:	f000 0107 	and.w	r1, r0, #7
        case AM_HAL_CLKGEN_SYSCLK_3MHZ:
            return 3000000;
        default:
            return 0xFFFFFFFF;
    }
}
    182a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    182e:	4770      	bx	lr
    1830:	40004018 	.word	0x40004018
    1834:	00001b48 	.word	0x00001b48

00001838 <am_hal_clkgen_osc_start>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_start(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1838:	0783      	lsls	r3, r0, #30
    183a:	d004      	beq.n	1846 <am_hal_clkgen_osc_start+0xe>
    {
        //
        // Start the oscillator(s).
        // Note that these bits are cleared in order to enable the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) &= ~ui32OscFlags;
    183c:	4a02      	ldr	r2, [pc, #8]	; (1848 <am_hal_clkgen_osc_start+0x10>)
    183e:	6813      	ldr	r3, [r2, #0]
    1840:	ea23 0000 	bic.w	r0, r3, r0
    1844:	6010      	str	r0, [r2, #0]
    1846:	4770      	bx	lr
    1848:	4000400c 	.word	0x4000400c

0000184c <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    184c:	0783      	lsls	r3, r0, #30
    184e:	d003      	beq.n	1858 <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    1850:	4b02      	ldr	r3, [pc, #8]	; (185c <am_hal_clkgen_osc_stop+0x10>)
    1852:	681a      	ldr	r2, [r3, #0]
    1854:	4310      	orrs	r0, r2
    1856:	6018      	str	r0, [r3, #0]
    1858:	4770      	bx	lr
    185a:	bf00      	nop
    185c:	4000400c 	.word	0x4000400c

00001860 <am_hal_clkgen_clkout_enable>:
am_hal_clkgen_clkout_enable(uint32_t ui32Signal)
{
    //
    // Enable the clock out on desired signal.
    //
    AM_REG(CLKGEN, CLKOUT) = AM_REG_CLKGEN_CLKOUT_CKEN_M | ui32Signal;
    1860:	4b02      	ldr	r3, [pc, #8]	; (186c <am_hal_clkgen_clkout_enable+0xc>)
    1862:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    1866:	6018      	str	r0, [r3, #0]
    1868:	4770      	bx	lr
    186a:	bf00      	nop
    186c:	40004010 	.word	0x40004010

00001870 <am_hal_flash_delay>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_flash_delay(uint32_t ui32Iterations)
{
    __asm("    subs    r0, #1\n"
    1870:	3801      	subs	r0, #1
    1872:	f47f affd 	bne.w	1870 <am_hal_flash_delay>
    1876:	4770      	bx	lr

00001878 <am_hal_gpio_out_enable_bit_get>:
am_hal_gpio_out_enable_bit_get(uint32_t ui32BitNum)
{
    //
    // Handle upper or lower GPIO word  and return 0 or 1.
    //
    if ( ui32BitNum > 31 )
    1878:	281f      	cmp	r0, #31
    {
        return !!(AM_REGn(GPIO, 0, ENB) & (1 << (ui32BitNum - 32)));
    187a:	bf8a      	itet	hi
    187c:	4a05      	ldrhi	r2, [pc, #20]	; (1894 <am_hal_gpio_out_enable_bit_get+0x1c>)
    }
    else
    {
        return !!(AM_REGn(GPIO, 0, ENA) & (1 << ui32BitNum));
    187e:	4a06      	ldrls	r2, [pc, #24]	; (1898 <am_hal_gpio_out_enable_bit_get+0x20>)
        return !!(AM_REGn(GPIO, 0, ENB) & (1 << (ui32BitNum - 32)));
    1880:	3820      	subhi	r0, #32
        return !!(AM_REGn(GPIO, 0, ENA) & (1 << ui32BitNum));
    1882:	2301      	movs	r3, #1
    1884:	6812      	ldr	r2, [r2, #0]
    1886:	fa03 f000 	lsl.w	r0, r3, r0
    188a:	4210      	tst	r0, r2
    188c:	bf14      	ite	ne
    188e:	4618      	movne	r0, r3
    1890:	2000      	moveq	r0, #0
    }
}
    1892:	4770      	bx	lr
    1894:	400100a4 	.word	0x400100a4
    1898:	400100a0 	.word	0x400100a0

0000189c <am_hal_itm_enable>:
//
//*****************************************************************************
void
am_hal_itm_enable(void)
{
    if (g_ui32HALflags & AM_HAL_FLAGS_ITMSKIPENABLEDISABLE_M)
    189c:	4b0d      	ldr	r3, [pc, #52]	; (18d4 <am_hal_itm_enable+0x38>)
    189e:	6818      	ldr	r0, [r3, #0]
    18a0:	07c2      	lsls	r2, r0, #31
    18a2:	d416      	bmi.n	18d2 <am_hal_itm_enable+0x36>

    //
    // To be able to access ITM registers, set the Trace Enable bit
    // in the Debug Exception and Monitor Control Register (DEMCR).
    //
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    18a4:	4a0c      	ldr	r2, [pc, #48]	; (18d8 <am_hal_itm_enable+0x3c>)
    18a6:	6811      	ldr	r1, [r2, #0]
{
    18a8:	b430      	push	{r4, r5}
    AM_REG(SYSCTRL, DEMCR) |= AM_REG_SYSCTRL_DEMCR_TRCENA(1);
    18aa:	f041 7480 	orr.w	r4, r1, #16777216	; 0x1000000
    18ae:	6014      	str	r4, [r2, #0]
    while ( !(AM_REG(SYSCTRL, DEMCR) & AM_REG_SYSCTRL_DEMCR_TRCENA(1)) );
    18b0:	6815      	ldr	r5, [r2, #0]
    18b2:	01eb      	lsls	r3, r5, #7
    18b4:	d5fc      	bpl.n	18b0 <am_hal_itm_enable+0x14>

    //
    // Write the key to the ITM Lock Access register to unlock the ITM_TCR.
    //
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    18b6:	4809      	ldr	r0, [pc, #36]	; (18dc <am_hal_itm_enable+0x40>)

    //
    // Set the enable bits in the ITM trace enable register, and the ITM
    // control registers to enable trace data output.
    //
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    18b8:	4c09      	ldr	r4, [pc, #36]	; (18e0 <am_hal_itm_enable+0x44>)
    AM_REGVAL(AM_REG_ITM_LOCKAREG_O) = AM_REG_ITM_LOCKAREG_KEYVAL;
    18ba:	4d0a      	ldr	r5, [pc, #40]	; (18e4 <am_hal_itm_enable+0x48>)
    18bc:	6005      	str	r5, [r0, #0]
    AM_REGVAL(AM_REG_ITM_TPR_O) = 0x0000000f;
    18be:	250f      	movs	r5, #15
    18c0:	6025      	str	r5, [r4, #0]
        AM_WRITE_SM(AM_REG_ITM_TCR_DWT_ENABLE, 0)     |
        AM_WRITE_SM(AM_REG_ITM_TCR_SYNC_ENABLE, 0)    |
        AM_WRITE_SM(AM_REG_ITM_TCR_TS_ENABLE, 0)      |
        AM_WRITE_SM(AM_REG_ITM_TCR_ITM_ENABLE, 1);

}
    18c2:	bc30      	pop	{r4, r5}
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    18c4:	4908      	ldr	r1, [pc, #32]	; (18e8 <am_hal_itm_enable+0x4c>)
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    18c6:	4b09      	ldr	r3, [pc, #36]	; (18ec <am_hal_itm_enable+0x50>)
    18c8:	4a09      	ldr	r2, [pc, #36]	; (18f0 <am_hal_itm_enable+0x54>)
    AM_REGVAL(AM_REG_ITM_TER_O) = 0xffffffff;
    18ca:	f04f 30ff 	mov.w	r0, #4294967295
    18ce:	6008      	str	r0, [r1, #0]
    AM_REGVAL(AM_REG_ITM_TCR_O) =
    18d0:	601a      	str	r2, [r3, #0]
}
    18d2:	4770      	bx	lr
    18d4:	1000112c 	.word	0x1000112c
    18d8:	e000edfc 	.word	0xe000edfc
    18dc:	e0000fb0 	.word	0xe0000fb0
    18e0:	e0000e40 	.word	0xe0000e40
    18e4:	c5acce55 	.word	0xc5acce55
    18e8:	e0000e00 	.word	0xe0000e00
    18ec:	e0000e80 	.word	0xe0000e80
    18f0:	00150511 	.word	0x00150511

000018f4 <am_hal_itm_not_busy>:
//! @return None.
//
//*****************************************************************************
void
am_hal_itm_not_busy(void)
{
    18f4:	b508      	push	{r3, lr}
    //
    // Make sure the ITM/TPIU is not busy.
    //
    while (AM_REG(ITM, TCR) & AM_REG_ITM_TCR_BUSY(1));
    18f6:	4a08      	ldr	r2, [pc, #32]	; (1918 <am_hal_itm_not_busy+0x24>)
    18f8:	6813      	ldr	r3, [r2, #0]
    18fa:	021b      	lsls	r3, r3, #8
    18fc:	d4fc      	bmi.n	18f8 <am_hal_itm_not_busy+0x4>

    // wait for 50us for the data to flush out
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    18fe:	f7ff ff8f 	bl	1820 <am_hal_clkgen_sysclk_get>
    1902:	4906      	ldr	r1, [pc, #24]	; (191c <am_hal_itm_not_busy+0x28>)
    1904:	fba1 3000 	umull	r3, r0, r1, r0
    1908:	0c80      	lsrs	r0, r0, #18
    190a:	2232      	movs	r2, #50	; 0x32
    190c:	fb02 f000 	mul.w	r0, r2, r0
}
    1910:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1914:	f7ff bfac 	b.w	1870 <am_hal_flash_delay>
    1918:	e0000e80 	.word	0xe0000e80
    191c:	165e9f81 	.word	0x165e9f81

00001920 <am_hal_itm_print>:
    uint32_t ui32Idx;

    //
    // Determine the length of the string.
    //
    while (*(pcString + ui32Length))
    1920:	7803      	ldrb	r3, [r0, #0]
    1922:	b1b3      	cbz	r3, 1952 <am_hal_itm_print+0x32>
{
    1924:	b410      	push	{r4}
    1926:	4602      	mov	r2, r0
    while (*(pcString + ui32Length))
    1928:	2400      	movs	r4, #0
    192a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    {
        ui32Length++;
    192e:	3401      	adds	r4, #1
    while (*(pcString + ui32Length))
    1930:	2900      	cmp	r1, #0
    1932:	d1fa      	bne.n	192a <am_hal_itm_print+0xa>
    1934:	1901      	adds	r1, r0, r4
    while (!AM_REGVAL(ui32StimAddr));
    1936:	f04f 4c60 	mov.w	ip, #3758096384	; 0xe0000000
        else
        {
            //
            // Print string out the ITM.
            //
            am_hal_itm_stimulus_reg_byte_write(0, (uint8_t)*pcString++);
    193a:	f810 2b01 	ldrb.w	r2, [r0], #1
    while (!AM_REGVAL(ui32StimAddr));
    193e:	f8dc 3000 	ldr.w	r3, [ip]
    1942:	2b00      	cmp	r3, #0
    1944:	d0fb      	beq.n	193e <am_hal_itm_print+0x1e>
    while (ui32Length)
    1946:	4288      	cmp	r0, r1
    *((volatile uint8_t *) ui32StimAddr) = ui8Value;
    1948:	f88c 2000 	strb.w	r2, [ip]
    while (ui32Length)
    194c:	d1f5      	bne.n	193a <am_hal_itm_print+0x1a>
            // Subtract from length.
            //
            ui32Length--;
        }
    }
}
    194e:	f85d 4b04 	ldr.w	r4, [sp], #4
    1952:	4770      	bx	lr

00001954 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    1954:	490d      	ldr	r1, [pc, #52]	; (198c <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    1956:	4b0e      	ldr	r3, [pc, #56]	; (1990 <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1958:	4a0e      	ldr	r2, [pc, #56]	; (1994 <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    195a:	681b      	ldr	r3, [r3, #0]
{
    195c:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    195e:	680d      	ldr	r5, [r1, #0]
    1960:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    1962:	6815      	ldr	r5, [r2, #0]
    1964:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1966:	4c0c      	ldr	r4, [pc, #48]	; (1998 <am_hal_mcuctrl_fault_status+0x44>)
    1968:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    196a:	4329      	orrs	r1, r5
    196c:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    196e:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1970:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1974:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    1976:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1978:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    197c:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    1980:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    1982:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    1984:	6142      	str	r2, [r0, #20]
}
    1986:	bc70      	pop	{r4, r5, r6}
    1988:	4770      	bx	lr
    198a:	bf00      	nop
    198c:	400201c4 	.word	0x400201c4
    1990:	400201cc 	.word	0x400201cc
    1994:	400201c0 	.word	0x400201c0
    1998:	400201c8 	.word	0x400201c8

0000199c <am_hal_mcuctrl_bandgap_disable>:
am_hal_mcuctrl_bandgap_disable(void)
{
    //
    // Disable the Bandgap in the MCUCTRL.
    //
    AM_REG(MCUCTRL, BANDGAPEN) = ~AM_REG_MCUCTRL_BANDGAPEN_BGPEN_M;
    199c:	4b02      	ldr	r3, [pc, #8]	; (19a8 <am_hal_mcuctrl_bandgap_disable+0xc>)
    199e:	f06f 0201 	mvn.w	r2, #1
    19a2:	601a      	str	r2, [r3, #0]
    19a4:	4770      	bx	lr
    19a6:	bf00      	nop
    19a8:	400200fc 	.word	0x400200fc

000019ac <am_hal_mcuctrl_bucks_enable>:
am_hal_mcuctrl_bucks_enable(void)
{
    //
    // Enable the core buck converter in the MCUCTRL.
    //
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    19ac:	4b08      	ldr	r3, [pc, #32]	; (19d0 <am_hal_mcuctrl_bucks_enable+0x24>)
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Poll until core buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    19ae:	4a09      	ldr	r2, [pc, #36]	; (19d4 <am_hal_mcuctrl_bucks_enable+0x28>)
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    19b0:	6819      	ldr	r1, [r3, #0]
    19b2:	f041 0002 	orr.w	r0, r1, #2
    19b6:	6018      	str	r0, [r3, #0]
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    19b8:	6819      	ldr	r1, [r3, #0]
    19ba:	f041 0001 	orr.w	r0, r1, #1
    19be:	6018      	str	r0, [r3, #0]
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    19c0:	6813      	ldr	r3, [r2, #0]
    19c2:	0799      	lsls	r1, r3, #30
    19c4:	d5fc      	bpl.n	19c0 <am_hal_mcuctrl_bucks_enable+0x14>

    //
    // Poll until SRAM buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, MEMBUCKON) );
    19c6:	4a03      	ldr	r2, [pc, #12]	; (19d4 <am_hal_mcuctrl_bucks_enable+0x28>)
    19c8:	6811      	ldr	r1, [r2, #0]
    19ca:	07cb      	lsls	r3, r1, #31
    19cc:	d5fc      	bpl.n	19c8 <am_hal_mcuctrl_bucks_enable+0x1c>
}
    19ce:	4770      	bx	lr
    19d0:	40020010 	.word	0x40020010
    19d4:	40020014 	.word	0x40020014

000019d8 <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    19d8:	4a05      	ldr	r2, [pc, #20]	; (19f0 <am_hal_rtc_osc_select+0x18>)
    19da:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    19dc:	b918      	cbnz	r0, 19e6 <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    19de:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    19e2:	6010      	str	r0, [r2, #0]
    19e4:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    19e6:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    19ea:	6011      	str	r1, [r2, #0]
    19ec:	4770      	bx	lr
    19ee:	bf00      	nop
    19f0:	4000400c 	.word	0x4000400c

000019f4 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_BFW(RTC, RTCCTL, RSTOP, 1);
    19f4:	4a02      	ldr	r2, [pc, #8]	; (1a00 <am_hal_rtc_osc_disable+0xc>)
    19f6:	6813      	ldr	r3, [r2, #0]
    19f8:	f043 0010 	orr.w	r0, r3, #16
    19fc:	6010      	str	r0, [r2, #0]
    19fe:	4770      	bx	lr
    1a00:	40004050 	.word	0x40004050

00001a04 <am_hal_tpiu_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_tpiu_enable(am_hal_tpiu_config_t *psConfig)
{
    1a04:	b538      	push	{r3, r4, r5, lr}
    ui32ITMbitrate = psConfig->ui32SetItmBaud;

    //
    // TPIU formatter & flush control register.
    //
    AM_REG(TPIU, FFCR) = 0;
    1a06:	4a24      	ldr	r2, [pc, #144]	; (1a98 <am_hal_tpiu_enable+0x94>)
    ui32ITMbitrate = psConfig->ui32SetItmBaud;
    1a08:	6803      	ldr	r3, [r0, #0]
    AM_REG(TPIU, FFCR) = 0;
    1a0a:	2100      	movs	r1, #0
    1a0c:	6011      	str	r1, [r2, #0]

    if ( ui32ITMbitrate )
    1a0e:	b313      	cbz	r3, 1a56 <am_hal_tpiu_enable+0x52>
    {
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        //
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1a10:	f5a2 7c40 	sub.w	ip, r2, #768	; 0x300
    1a14:	2101      	movs	r1, #1

        //
        // Use some default assumptions to set the ITM frequency.
        //
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1a16:	4c21      	ldr	r4, [pc, #132]	; (1a9c <am_hal_tpiu_enable+0x98>)
             (ui32ITMbitrate > AM_HAL_TPIU_BAUD_2M ) )
        {
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1a18:	4d21      	ldr	r5, [pc, #132]	; (1aa0 <am_hal_tpiu_enable+0x9c>)
        AM_REG(TPIU, CSPSR) = AM_REG_TPIU_CSPSR_CWIDTH_1BIT;
    1a1a:	f8cc 1000 	str.w	r1, [ip]
        if ( (ui32ITMbitrate < AM_HAL_TPIU_BAUD_57600 )  ||
    1a1e:	f5a3 4e61 	sub.w	lr, r3, #57600	; 0xe100
            ui32ITMbitrate = AM_HAL_TPIU_BAUD_DEFAULT;
    1a22:	45a6      	cmp	lr, r4
    1a24:	bf94      	ite	ls
    1a26:	461c      	movls	r4, r3
    1a28:	462c      	movhi	r4, r5
        }

        //
        // Get the current HFRC frequency.
        //
        ui32HFRC = am_hal_clkgen_sysclk_get();
    1a2a:	f7ff fef9 	bl	1820 <am_hal_clkgen_sysclk_get>

        //
        // Compute the SWO scaler value.
        //
        if ( ui32HFRC != 0xFFFFFFFF )
    1a2e:	1c43      	adds	r3, r0, #1
    1a30:	d02f      	beq.n	1a92 <am_hal_tpiu_enable+0x8e>
        {
            ui32SWOscaler = ((ui32HFRC / 8) / ui32ITMbitrate) - 1;
    1a32:	08c2      	lsrs	r2, r0, #3
    1a34:	fbb2 f3f4 	udiv	r3, r2, r4
    1a38:	1e5d      	subs	r5, r3, #1
    1a3a:	b2a8      	uxth	r0, r5
        }

        //
        // Set the scaler value.
        //
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1a3c:	4a19      	ldr	r2, [pc, #100]	; (1aa4 <am_hal_tpiu_enable+0xa0>)

        //
        // Set for UART mode
        //
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1a3e:	4c1a      	ldr	r4, [pc, #104]	; (1aa8 <am_hal_tpiu_enable+0xa4>)

        //
        // Make sure we are not in test mode (important for proper deep sleep
        // operation).
        //
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1a40:	491a      	ldr	r1, [pc, #104]	; (1aac <am_hal_tpiu_enable+0xa8>)

        //
        // Enable the TPIU clock source in MCU control.
        // Set TPIU clock for HFRC/8 (3 MHz) operation.
        //
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    1a42:	4b1b      	ldr	r3, [pc, #108]	; (1ab0 <am_hal_tpiu_enable+0xac>)
        AM_REG(TPIU, ACPR) = AM_REG_TPIU_ACPR_SWOSCALER(ui32SWOscaler);
    1a44:	6010      	str	r0, [r2, #0]
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1a46:	2502      	movs	r5, #2
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1a48:	2000      	movs	r0, #0
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    1a4a:	f240 2201 	movw	r2, #513	; 0x201
        AM_REG(TPIU, SPPR) = AM_REG_TPIU_SPPR_TXMODE_UART;
    1a4e:	6025      	str	r5, [r4, #0]
        AM_REG(TPIU, ITCTRL) = AM_REG_TPIU_ITCTRL_MODE_NORMAL;
    1a50:	6008      	str	r0, [r1, #0]
        AM_REGn(MCUCTRL, 0, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_3MHZ |
    1a52:	601a      	str	r2, [r3, #0]
    1a54:	e010      	b.n	1a78 <am_hal_tpiu_enable+0x74>
        //

        //
        // Set the Asynchronous Clock Prescaler Register.
        //
        AM_REG(TPIU, ACPR) = psConfig->ui32ClockPrescaler;
    1a56:	4c13      	ldr	r4, [pc, #76]	; (1aa4 <am_hal_tpiu_enable+0xa0>)
    1a58:	6905      	ldr	r5, [r0, #16]
    1a5a:	6025      	str	r5, [r4, #0]

        //
        // Set the Selected Pin Protocol Register.
        //  e.g. AM_REG_TPIU_SPPR_TXMODE_UART
        //
        AM_REG(TPIU, SPPR) = psConfig->ui32PinProtocol;
    1a5c:	6882      	ldr	r2, [r0, #8]
    1a5e:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
        //
        // Set the Current Parallel Port Size (note - only 1 bit can be set).
        // This may be redundant if the user has selected a serial protocol,
        // but we'll set it anyway.
        //
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    1a62:	68c3      	ldr	r3, [r0, #12]
    1a64:	4c13      	ldr	r4, [pc, #76]	; (1ab4 <am_hal_tpiu_enable+0xb0>)

        //
        // Set the clock freq in the MCUCTRL register.
        //
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    1a66:	4912      	ldr	r1, [pc, #72]	; (1ab0 <am_hal_tpiu_enable+0xac>)
        AM_REG(TPIU, CSPSR) = (1 << (psConfig->ui32ParallelPortSize - 1));
    1a68:	1e5d      	subs	r5, r3, #1
    1a6a:	2201      	movs	r2, #1
    1a6c:	40aa      	lsls	r2, r5
    1a6e:	6022      	str	r2, [r4, #0]
        AM_REG(MCUCTRL, TPIUCTRL) |= psConfig->ui32TraceClkIn;
    1a70:	6840      	ldr	r0, [r0, #4]
    1a72:	680b      	ldr	r3, [r1, #0]
    1a74:	4303      	orrs	r3, r0
    1a76:	600b      	str	r3, [r1, #0]
    }

    // wait for 50us for the data to flush out
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1a78:	f7ff fed2 	bl	1820 <am_hal_clkgen_sysclk_get>
    1a7c:	4c0e      	ldr	r4, [pc, #56]	; (1ab8 <am_hal_tpiu_enable+0xb4>)
    1a7e:	fba4 3100 	umull	r3, r1, r4, r0
    1a82:	0c88      	lsrs	r0, r1, #18
    1a84:	2332      	movs	r3, #50	; 0x32
    1a86:	fb03 f000 	mul.w	r0, r3, r0
}
    1a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_flash_delay(FLASH_CYCLES_US(50));
    1a8e:	f7ff beef 	b.w	1870 <am_hal_flash_delay>
    1a92:	2002      	movs	r0, #2
    1a94:	e7d2      	b.n	1a3c <am_hal_tpiu_enable+0x38>
    1a96:	bf00      	nop
    1a98:	e0040304 	.word	0xe0040304
    1a9c:	001da380 	.word	0x001da380
    1aa0:	000f4240 	.word	0x000f4240
    1aa4:	e0040010 	.word	0xe0040010
    1aa8:	e00400f0 	.word	0xe00400f0
    1aac:	e0040f00 	.word	0xe0040f00
    1ab0:	40020250 	.word	0x40020250
    1ab4:	e0040004 	.word	0xe0040004
    1ab8:	165e9f81 	.word	0x165e9f81

00001abc <am_hal_tpiu_disable>:
am_hal_tpiu_disable(void)
{
    //
    // Disable the TPIU clock source in MCU control.
    //
    AM_REG(MCUCTRL, TPIUCTRL) = AM_REG_MCUCTRL_TPIUCTRL_CLKSEL_0MHz |
    1abc:	4b01      	ldr	r3, [pc, #4]	; (1ac4 <am_hal_tpiu_disable+0x8>)
    1abe:	2200      	movs	r2, #0
    1ac0:	601a      	str	r2, [r3, #0]
    1ac2:	4770      	bx	lr
    1ac4:	40020250 	.word	0x40020250

00001ac8 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    1ac8:	4b01      	ldr	r3, [pc, #4]	; (1ad0 <am_hal_vcomp_disable+0x8>)
    1aca:	2237      	movs	r2, #55	; 0x37
    1acc:	601a      	str	r2, [r3, #0]
    1ace:	4770      	bx	lr
    1ad0:	4000c008 	.word	0x4000c008
    1ad4:	4f4b4c43 	.word	0x4f4b4c43
    1ad8:	74205455 	.word	0x74205455
    1adc:	454c206f 	.word	0x454c206f
    1ae0:	78452044 	.word	0x78452044
    1ae4:	6c706d61 	.word	0x6c706d61
    1ae8:	00000a65 	.word	0x00000a65
    1aec:	6c615709 	.word	0x6c615709
    1af0:	7420736b 	.word	0x7420736b
    1af4:	62206568 	.word	0x62206568
    1af8:	6472616f 	.word	0x6472616f
    1afc:	44454c20 	.word	0x44454c20
    1b00:	62612073 	.word	0x62612073
    1b04:	2074756f 	.word	0x2074756f
    1b08:	65636e6f 	.word	0x65636e6f
    1b0c:	73206120 	.word	0x73206120
    1b10:	6e6f6365 	.word	0x6e6f6365
    1b14:	61622064 	.word	0x61622064
    1b18:	20646573 	.word	0x20646573
    1b1c:	74206e6f 	.word	0x74206e6f
    1b20:	43206568 	.word	0x43206568
    1b24:	554f4b4c 	.word	0x554f4b4c
    1b28:	69732054 	.word	0x69732054
    1b2c:	6c616e67 	.word	0x6c616e67
    1b30:	00000a2e 	.word	0x00000a2e
    1b34:	0a0a0a0a 	.word	0x0a0a0a0a
    1b38:	0a0a0a0a 	.word	0x0a0a0a0a
    1b3c:	0a0a0a0a 	.word	0x0a0a0a0a
    1b40:	0a0a0a0a 	.word	0x0a0a0a0a
    1b44:	00000a0a 	.word	0x00000a0a

00001b48 <CSWTCH.4>:
    1b48:	016e3600 00b71b00 007a1200 005b8d80     .6n.......z...[.
    1b58:	00493e00 003d0900 003450db 002dc6c0     .>I...=..P4...-.
