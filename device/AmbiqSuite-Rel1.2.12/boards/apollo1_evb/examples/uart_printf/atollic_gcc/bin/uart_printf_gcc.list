
uart_printf_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001728  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stack        00001000  10000000  10000000  00030000  2**2
                  ALLOC
  2 .data         00000020  10001000  00001728  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000108  10001020  00001748  00021020  2**2
                  ALLOC
  4 .ARM.attributes 00000037  00000000  00000000  00021020  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000507c  00000000  00000000  00021057  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001753  00000000  00000000  000260d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000600  00000000  00000000  00027826  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000988  00000000  00000000  00027e26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002df2  00000000  00000000  000287ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000021da  00000000  00000000  0002b5a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000007c  00000000  00000000  0002d77a  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00000f50  00000000  00000000  0002d7f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001ece  00000000  00000000  0002e748  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_am_pfnVectors>:
       0:	00 10 00 10 11 04 00 00 79 04 00 00 85 04 00 00     ........y.......
      10:	85 04 00 00 85 04 00 00 85 04 00 00 00 00 00 00     ................
	...
      2c:	7f 04 00 00 7f 04 00 00 00 00 00 00 7f 04 00 00     ................
      3c:	7f 04 00 00 7f 04 00 00 7f 04 00 00 7f 04 00 00     ................
      4c:	7f 04 00 00 7f 04 00 00 7f 04 00 00 7f 04 00 00     ................
      5c:	7f 04 00 00 7f 04 00 00 7f 04 00 00 65 01 00 00     ............e...
      6c:	7f 04 00 00 7f 04 00 00 7f 04 00 00 7f 04 00 00     ................
      7c:	7f 04 00 00                                         ....

00000080 <__aeabi_d2f>:
      80:	ea4f 0241 	mov.w	r2, r1, lsl #1
      84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
      88:	bf24      	itt	cs
      8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
      8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
      92:	d90d      	bls.n	b0 <__aeabi_d2f+0x30>
      94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
      98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
      9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
      a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
      a8:	bf08      	it	eq
      aa:	f020 0001 	biceq.w	r0, r0, #1
      ae:	4770      	bx	lr
      b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
      b4:	d121      	bne.n	fa <__aeabi_d2f+0x7a>
      b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
      ba:	bfbc      	itt	lt
      bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
      c0:	4770      	bxlt	lr
      c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
      c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
      ca:	f1c2 0218 	rsb	r2, r2, #24
      ce:	f1c2 0c20 	rsb	ip, r2, #32
      d2:	fa10 f30c 	lsls.w	r3, r0, ip
      d6:	fa20 f002 	lsr.w	r0, r0, r2
      da:	bf18      	it	ne
      dc:	f040 0001 	orrne.w	r0, r0, #1
      e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
      e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
      e8:	fa03 fc0c 	lsl.w	ip, r3, ip
      ec:	ea40 000c 	orr.w	r0, r0, ip
      f0:	fa23 f302 	lsr.w	r3, r3, r2
      f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
      f8:	e7cc      	b.n	94 <__aeabi_d2f+0x14>
      fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
      fe:	d107      	bne.n	110 <__aeabi_d2f+0x90>
     100:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     104:	bf1e      	ittt	ne
     106:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     10a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     10e:	4770      	bxne	lr
     110:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     114:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     118:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     11c:	4770      	bx	lr
     11e:	bf00      	nop

00000120 <timerA0_init>:
// Init function for Timer A0.
//
//*****************************************************************************
void
timerA0_init(void)
{
     120:	b580      	push	{r7, lr}
     122:	b082      	sub	sp, #8
     124:	af00      	add	r7, sp, #0
    uint32_t ui32Period;

    //
    // Enable the LFRC.
    //
    am_hal_clkgen_osc_start(AM_HAL_CLKGEN_OSC_LFRC);
     126:	2002      	movs	r0, #2
     128:	f001 f900 	bl	132c <am_hal_clkgen_osc_start>

    //
    // Set up timer A0.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
     12c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     130:	2000      	movs	r0, #0
     132:	f001 f937 	bl	13a4 <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer3);
     136:	490a      	ldr	r1, [pc, #40]	; (160 <timerA0_init+0x40>)
     138:	2000      	movs	r0, #0
     13a:	f001 f90b 	bl	1354 <am_hal_ctimer_config>
    // With LFRC running at 512 Hz, set up a print rate of 32 Hz.
    //  ui32Period = 8:  ~64 Hz print rate
    //  ui32Period = 16: ~32 Hz print rate
    //  ui32Period = 32: ~16 Hz print rate
    //
    ui32Period = 16;
     13e:	2310      	movs	r3, #16
     140:	607b      	str	r3, [r7, #4]
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ui32Period,
     142:	687b      	ldr	r3, [r7, #4]
     144:	085b      	lsrs	r3, r3, #1
     146:	687a      	ldr	r2, [r7, #4]
     148:	f64f 71ff 	movw	r1, #65535	; 0xffff
     14c:	2000      	movs	r0, #0
     14e:	f001 f933 	bl	13b8 <am_hal_ctimer_period_set>
                             (ui32Period >> 1));

    //
    // Clear the timer Interrupt
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
     152:	2001      	movs	r0, #1
     154:	f001 f976 	bl	1444 <am_hal_ctimer_int_clear>
}
     158:	bf00      	nop
     15a:	3708      	adds	r7, #8
     15c:	46bd      	mov	sp, r7
     15e:	bd80      	pop	{r7, pc}
     160:	10001000 	.word	0x10001000

00000164 <am_ctimer_isr>:
// Timer Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
     164:	b580      	push	{r7, lr}
     166:	af00      	add	r7, sp, #0
    //
    // Clear TimerA0 Interrupt (write to clear).
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
     168:	2001      	movs	r0, #1
     16a:	f001 f96b 	bl	1444 <am_hal_ctimer_int_clear>
}
     16e:	bf00      	nop
     170:	bd80      	pop	{r7, pc}
	...

00000174 <uart_init>:
// Initialize the UART
//
//*****************************************************************************
void
uart_init(int32_t i32Module)
{
     174:	b580      	push	{r7, lr}
     176:	b082      	sub	sp, #8
     178:	af00      	add	r7, sp, #0
     17a:	6078      	str	r0, [r7, #4]
    //
    // Make sure the UART RX and TX pins are enabled.
    //
    am_bsp_pin_enable(COM_UART_TX);
     17c:	4b20      	ldr	r3, [pc, #128]	; (200 <uart_init+0x8c>)
     17e:	2273      	movs	r2, #115	; 0x73
     180:	601a      	str	r2, [r3, #0]
     182:	4a20      	ldr	r2, [pc, #128]	; (204 <uart_init+0x90>)
     184:	4b1f      	ldr	r3, [pc, #124]	; (204 <uart_init+0x90>)
     186:	681b      	ldr	r3, [r3, #0]
     188:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
     18c:	6013      	str	r3, [r2, #0]
     18e:	4a1e      	ldr	r2, [pc, #120]	; (208 <uart_init+0x94>)
     190:	4b1d      	ldr	r3, [pc, #116]	; (208 <uart_init+0x94>)
     192:	681b      	ldr	r3, [r3, #0]
     194:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     19c:	6013      	str	r3, [r2, #0]
     19e:	4b18      	ldr	r3, [pc, #96]	; (200 <uart_init+0x8c>)
     1a0:	2200      	movs	r2, #0
     1a2:	601a      	str	r2, [r3, #0]
    am_bsp_pin_enable(COM_UART_RX);
     1a4:	4b16      	ldr	r3, [pc, #88]	; (200 <uart_init+0x8c>)
     1a6:	2273      	movs	r2, #115	; 0x73
     1a8:	601a      	str	r2, [r3, #0]
     1aa:	4a16      	ldr	r2, [pc, #88]	; (204 <uart_init+0x90>)
     1ac:	4b15      	ldr	r3, [pc, #84]	; (204 <uart_init+0x90>)
     1ae:	681b      	ldr	r3, [r3, #0]
     1b0:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
     1b4:	6013      	str	r3, [r2, #0]
     1b6:	4a15      	ldr	r2, [pc, #84]	; (20c <uart_init+0x98>)
     1b8:	4b14      	ldr	r3, [pc, #80]	; (20c <uart_init+0x98>)
     1ba:	681b      	ldr	r3, [r3, #0]
     1bc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     1c0:	f043 0312 	orr.w	r3, r3, #18
     1c4:	6013      	str	r3, [r2, #0]
     1c6:	4b0e      	ldr	r3, [pc, #56]	; (200 <uart_init+0x8c>)
     1c8:	2200      	movs	r2, #0
     1ca:	601a      	str	r2, [r3, #0]

    //
    // Start the UART interface, apply the desired configuration settings, and
    // enable the FIFOs.
    //
    am_hal_uart_clock_enable(i32Module);
     1cc:	687b      	ldr	r3, [r7, #4]
     1ce:	4618      	mov	r0, r3
     1d0:	f001 fa26 	bl	1620 <am_hal_uart_clock_enable>

    //
    // Disable the UART before configuring it.
    //
    am_hal_uart_disable(i32Module);
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	4618      	mov	r0, r3
     1d8:	f001 fa18 	bl	160c <am_hal_uart_disable>

    //
    // Configure the UART.
    //
    am_hal_uart_config(i32Module, &g_sUartConfig);
     1dc:	687b      	ldr	r3, [r7, #4]
     1de:	490c      	ldr	r1, [pc, #48]	; (210 <uart_init+0x9c>)
     1e0:	4618      	mov	r0, r3
     1e2:	f001 f9cf 	bl	1584 <am_hal_uart_config>

    //
    // Enable the UART FIFO.
    //
    am_hal_uart_fifo_config(i32Module, AM_HAL_UART_TX_FIFO_1_2 | AM_HAL_UART_RX_FIFO_1_2);
     1e6:	687b      	ldr	r3, [r7, #4]
     1e8:	2112      	movs	r1, #18
     1ea:	4618      	mov	r0, r3
     1ec:	f001 fa3c 	bl	1668 <am_hal_uart_fifo_config>

    //
    // Enable the UART.
    //
    am_hal_uart_enable(i32Module);
     1f0:	687b      	ldr	r3, [r7, #4]
     1f2:	4618      	mov	r0, r3
     1f4:	f001 fa00 	bl	15f8 <am_hal_uart_enable>
}
     1f8:	bf00      	nop
     1fa:	3708      	adds	r7, #8
     1fc:	46bd      	mov	sp, r7
     1fe:	bd80      	pop	{r7, pc}
     200:	40010060 	.word	0x40010060
     204:	40010050 	.word	0x40010050
     208:	40010020 	.word	0x40010020
     20c:	40010024 	.word	0x40010024
     210:	1000100c 	.word	0x1000100c

00000214 <uart_enable>:
// Enable the UART
//
//*****************************************************************************
void
uart_enable(int32_t i32Module)
{
     214:	b580      	push	{r7, lr}
     216:	b082      	sub	sp, #8
     218:	af00      	add	r7, sp, #0
     21a:	6078      	str	r0, [r7, #4]
    //
    // Enable the UART clock.
    //
    am_hal_uart_clock_enable(i32Module);
     21c:	687b      	ldr	r3, [r7, #4]
     21e:	4618      	mov	r0, r3
     220:	f001 f9fe 	bl	1620 <am_hal_uart_clock_enable>

    //
    // Enable the UART.
    //
    am_hal_uart_enable(i32Module);
     224:	687b      	ldr	r3, [r7, #4]
     226:	4618      	mov	r0, r3
     228:	f001 f9e6 	bl	15f8 <am_hal_uart_enable>

    //
    // Enable the UART pins.
    //
    am_bsp_pin_enable(COM_UART_TX);
     22c:	4b15      	ldr	r3, [pc, #84]	; (284 <uart_enable+0x70>)
     22e:	2273      	movs	r2, #115	; 0x73
     230:	601a      	str	r2, [r3, #0]
     232:	4a15      	ldr	r2, [pc, #84]	; (288 <uart_enable+0x74>)
     234:	4b14      	ldr	r3, [pc, #80]	; (288 <uart_enable+0x74>)
     236:	681b      	ldr	r3, [r3, #0]
     238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
     23c:	6013      	str	r3, [r2, #0]
     23e:	4a13      	ldr	r2, [pc, #76]	; (28c <uart_enable+0x78>)
     240:	4b12      	ldr	r3, [pc, #72]	; (28c <uart_enable+0x78>)
     242:	681b      	ldr	r3, [r3, #0]
     244:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     24c:	6013      	str	r3, [r2, #0]
     24e:	4b0d      	ldr	r3, [pc, #52]	; (284 <uart_enable+0x70>)
     250:	2200      	movs	r2, #0
     252:	601a      	str	r2, [r3, #0]
    am_bsp_pin_enable(COM_UART_RX);
     254:	4b0b      	ldr	r3, [pc, #44]	; (284 <uart_enable+0x70>)
     256:	2273      	movs	r2, #115	; 0x73
     258:	601a      	str	r2, [r3, #0]
     25a:	4a0b      	ldr	r2, [pc, #44]	; (288 <uart_enable+0x74>)
     25c:	4b0a      	ldr	r3, [pc, #40]	; (288 <uart_enable+0x74>)
     25e:	681b      	ldr	r3, [r3, #0]
     260:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
     264:	6013      	str	r3, [r2, #0]
     266:	4a0a      	ldr	r2, [pc, #40]	; (290 <uart_enable+0x7c>)
     268:	4b09      	ldr	r3, [pc, #36]	; (290 <uart_enable+0x7c>)
     26a:	681b      	ldr	r3, [r3, #0]
     26c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     270:	f043 0312 	orr.w	r3, r3, #18
     274:	6013      	str	r3, [r2, #0]
     276:	4b03      	ldr	r3, [pc, #12]	; (284 <uart_enable+0x70>)
     278:	2200      	movs	r2, #0
     27a:	601a      	str	r2, [r3, #0]
}
     27c:	bf00      	nop
     27e:	3708      	adds	r7, #8
     280:	46bd      	mov	sp, r7
     282:	bd80      	pop	{r7, pc}
     284:	40010060 	.word	0x40010060
     288:	40010050 	.word	0x40010050
     28c:	40010020 	.word	0x40010020
     290:	40010024 	.word	0x40010024

00000294 <uart_disable>:
// Disable the UART
//
//*****************************************************************************
void
uart_disable(int32_t i32Module)
{
     294:	b580      	push	{r7, lr}
     296:	b082      	sub	sp, #8
     298:	af00      	add	r7, sp, #0
     29a:	6078      	str	r0, [r7, #4]
      //
      // Clear all interrupts before sleeping as having a pending UART interrupt
      // burns power.
      //
      am_hal_uart_int_clear(i32Module, 0xFFFFFFFF);
     29c:	687b      	ldr	r3, [r7, #4]
     29e:	f04f 31ff 	mov.w	r1, #4294967295
     2a2:	4618      	mov	r0, r3
     2a4:	f001 f9a2 	bl	15ec <am_hal_uart_int_clear>

      //
      // Disable the UART.
      //
      am_hal_uart_disable(i32Module);
     2a8:	687b      	ldr	r3, [r7, #4]
     2aa:	4618      	mov	r0, r3
     2ac:	f001 f9ae 	bl	160c <am_hal_uart_disable>

      //
      // Disable the UART pins.
      //
      am_bsp_pin_disable(COM_UART_TX);
     2b0:	4b17      	ldr	r3, [pc, #92]	; (310 <uart_disable+0x7c>)
     2b2:	2273      	movs	r2, #115	; 0x73
     2b4:	601a      	str	r2, [r3, #0]
     2b6:	4a17      	ldr	r2, [pc, #92]	; (314 <uart_disable+0x80>)
     2b8:	4b16      	ldr	r3, [pc, #88]	; (314 <uart_disable+0x80>)
     2ba:	681b      	ldr	r3, [r3, #0]
     2bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
     2c0:	6013      	str	r3, [r2, #0]
     2c2:	4a15      	ldr	r2, [pc, #84]	; (318 <uart_disable+0x84>)
     2c4:	4b14      	ldr	r3, [pc, #80]	; (318 <uart_disable+0x84>)
     2c6:	681b      	ldr	r3, [r3, #0]
     2c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     2cc:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
     2d0:	6013      	str	r3, [r2, #0]
     2d2:	4b0f      	ldr	r3, [pc, #60]	; (310 <uart_disable+0x7c>)
     2d4:	2200      	movs	r2, #0
     2d6:	601a      	str	r2, [r3, #0]
      am_bsp_pin_disable(COM_UART_RX);
     2d8:	4b0d      	ldr	r3, [pc, #52]	; (310 <uart_disable+0x7c>)
     2da:	2273      	movs	r2, #115	; 0x73
     2dc:	601a      	str	r2, [r3, #0]
     2de:	4a0d      	ldr	r2, [pc, #52]	; (314 <uart_disable+0x80>)
     2e0:	4b0c      	ldr	r3, [pc, #48]	; (314 <uart_disable+0x80>)
     2e2:	681b      	ldr	r3, [r3, #0]
     2e4:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
     2e8:	6013      	str	r3, [r2, #0]
     2ea:	4a0c      	ldr	r2, [pc, #48]	; (31c <uart_disable+0x88>)
     2ec:	4b0b      	ldr	r3, [pc, #44]	; (31c <uart_disable+0x88>)
     2ee:	681b      	ldr	r3, [r3, #0]
     2f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     2f4:	f043 0318 	orr.w	r3, r3, #24
     2f8:	6013      	str	r3, [r2, #0]
     2fa:	4b05      	ldr	r3, [pc, #20]	; (310 <uart_disable+0x7c>)
     2fc:	2200      	movs	r2, #0
     2fe:	601a      	str	r2, [r3, #0]

      //
      // Disable the UART clock.
      //
      am_hal_uart_clock_disable(i32Module);
     300:	687b      	ldr	r3, [r7, #4]
     302:	4618      	mov	r0, r3
     304:	f001 f9a0 	bl	1648 <am_hal_uart_clock_disable>
}
     308:	bf00      	nop
     30a:	3708      	adds	r7, #8
     30c:	46bd      	mov	sp, r7
     30e:	bd80      	pop	{r7, pc}
     310:	40010060 	.word	0x40010060
     314:	40010050 	.word	0x40010050
     318:	40010020 	.word	0x40010020
     31c:	40010024 	.word	0x40010024

00000320 <uart_transmit_delay>:
// for a transmission to fully complete before proceeding.
//
//*****************************************************************************
void
uart_transmit_delay(int32_t i32Module)
{
     320:	b580      	push	{r7, lr}
     322:	b082      	sub	sp, #8
     324:	af00      	add	r7, sp, #0
     326:	6078      	str	r0, [r7, #4]
  //
  // Wait until busy bit clears to make sure UART fully transmitted last byte
  //
  while ( am_hal_uart_flags_get(i32Module) & AM_HAL_UART_FR_BUSY );
     328:	bf00      	nop
     32a:	687b      	ldr	r3, [r7, #4]
     32c:	4618      	mov	r0, r3
     32e:	f001 f9a7 	bl	1680 <am_hal_uart_flags_get>
     332:	4603      	mov	r3, r0
     334:	f003 0308 	and.w	r3, r3, #8
     338:	2b00      	cmp	r3, #0
     33a:	d1f6      	bne.n	32a <uart_transmit_delay+0xa>
}
     33c:	bf00      	nop
     33e:	3708      	adds	r7, #8
     340:	46bd      	mov	sp, r7
     342:	bd80      	pop	{r7, pc}

00000344 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
     344:	b580      	push	{r7, lr}
     346:	b082      	sub	sp, #8
     348:	af00      	add	r7, sp, #0
    uint32_t i;
    int32_t i32Module = AM_BSP_UART_PRINT_INST;
     34a:	2300      	movs	r3, #0
     34c:	603b      	str	r3, [r7, #0]

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_sysclk_select(AM_HAL_CLKGEN_SYSCLK_MAX);
     34e:	2000      	movs	r0, #0
     350:	f000 ffd0 	bl	12f4 <am_hal_clkgen_sysclk_select>
    am_hal_cachectrl_enable(&am_hal_cachectrl_defaults);

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
     354:	f000 ffb8 	bl	12c8 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for UART output.
    //
    am_util_stdio_printf_init((am_util_stdio_print_char_t)am_bsp_uart_string_print);
     358:	4827      	ldr	r0, [pc, #156]	; (3f8 <main+0xb4>)
     35a:	f000 f913 	bl	584 <am_util_stdio_printf_init>

    //
    // Initialize and Enable the UART.
    //
    uart_init(i32Module);
     35e:	6838      	ldr	r0, [r7, #0]
     360:	f7ff ff08 	bl	174 <uart_init>

    //
    // Print the banner.
    //
    am_util_stdio_printf("UART Printf Example\n");
     364:	4825      	ldr	r0, [pc, #148]	; (3fc <main+0xb8>)
     366:	f000 ff91 	bl	128c <am_util_stdio_printf>
    uart_transmit_delay(i32Module);
     36a:	6838      	ldr	r0, [r7, #0]
     36c:	f7ff ffd8 	bl	320 <uart_transmit_delay>
    am_util_stdio_printf("\n\tBeginning ASCII walk through:\n");
     370:	4823      	ldr	r0, [pc, #140]	; (400 <main+0xbc>)
     372:	f000 ff8b 	bl	128c <am_util_stdio_printf>
    uart_transmit_delay(i32Module);
     376:	6838      	ldr	r0, [r7, #0]
     378:	f7ff ffd2 	bl	320 <uart_transmit_delay>
    am_util_stdio_printf("\t");
     37c:	4821      	ldr	r0, [pc, #132]	; (404 <main+0xc0>)
     37e:	f000 ff85 	bl	128c <am_util_stdio_printf>
    uart_transmit_delay(i32Module);
     382:	6838      	ldr	r0, [r7, #0]
     384:	f7ff ffcc 	bl	320 <uart_transmit_delay>

    //
    // Disable UART for now
    //
    uart_disable(i32Module);
     388:	6838      	ldr	r0, [r7, #0]
     38a:	f7ff ff83 	bl	294 <uart_disable>

    //
    // TimerA0 init.
    //
    timerA0_init();
     38e:	f7ff fec7 	bl	120 <timerA0_init>

    //
    // Enable the timer Interrupt.
    //
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
     392:	2001      	movs	r0, #1
     394:	f001 f84e 	bl	1434 <am_hal_ctimer_int_enable>

    //
    // Enable the timer interrupt in the NVIC.
    //
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_CTIMER);
     398:	201a      	movs	r0, #26
     39a:	f001 f859 	bl	1450 <am_hal_interrupt_enable>
    am_hal_interrupt_master_enable();
     39e:	f001 f87f 	bl	14a0 <am_hal_interrupt_master_enable>

    //
    // Enable the timer.
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
     3a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
     3a6:	2000      	movs	r0, #0
     3a8:	f000 ffea 	bl	1380 <am_hal_ctimer_start>
    //
    // Loop forever writing chars to the stimulus register.
    //
    while (1)
    {
        for (i = '!'; i <= '~'; i++)
     3ac:	2321      	movs	r3, #33	; 0x21
     3ae:	607b      	str	r3, [r7, #4]
     3b0:	e012      	b.n	3d8 <main+0x94>
        {
            //
            // Enable UART
            //
            uart_enable(i32Module);
     3b2:	6838      	ldr	r0, [r7, #0]
     3b4:	f7ff ff2e 	bl	214 <uart_enable>

            //
            // Walk through the ASCII table.
            //
            am_util_stdio_printf("%c", i);
     3b8:	6879      	ldr	r1, [r7, #4]
     3ba:	4813      	ldr	r0, [pc, #76]	; (408 <main+0xc4>)
     3bc:	f000 ff66 	bl	128c <am_util_stdio_printf>
            uart_transmit_delay(i32Module);
     3c0:	6838      	ldr	r0, [r7, #0]
     3c2:	f7ff ffad 	bl	320 <uart_transmit_delay>

            //
            // Disable UART.
            //
            uart_disable(i32Module);
     3c6:	6838      	ldr	r0, [r7, #0]
     3c8:	f7ff ff64 	bl	294 <uart_disable>

            //
            // Go to Deep Sleep to delay.
            //
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
     3cc:	2001      	movs	r0, #1
     3ce:	f001 f8c3 	bl	1558 <am_hal_sysctrl_sleep>
        for (i = '!'; i <= '~'; i++)
     3d2:	687b      	ldr	r3, [r7, #4]
     3d4:	3301      	adds	r3, #1
     3d6:	607b      	str	r3, [r7, #4]
     3d8:	687b      	ldr	r3, [r7, #4]
     3da:	2b7e      	cmp	r3, #126	; 0x7e
     3dc:	d9e9      	bls.n	3b2 <main+0x6e>
        }

        //
        // Enable the UART, print a new line, and disable.
        //
        uart_enable(i32Module);
     3de:	6838      	ldr	r0, [r7, #0]
     3e0:	f7ff ff18 	bl	214 <uart_enable>
        am_util_stdio_printf("\n\t");
     3e4:	4809      	ldr	r0, [pc, #36]	; (40c <main+0xc8>)
     3e6:	f000 ff51 	bl	128c <am_util_stdio_printf>
        uart_transmit_delay(i32Module);
     3ea:	6838      	ldr	r0, [r7, #0]
     3ec:	f7ff ff98 	bl	320 <uart_transmit_delay>
        uart_disable(i32Module);
     3f0:	6838      	ldr	r0, [r7, #0]
     3f2:	f7ff ff4f 	bl	294 <uart_disable>
        for (i = '!'; i <= '~'; i++)
     3f6:	e7d9      	b.n	3ac <main+0x68>
     3f8:	000012ed 	.word	0x000012ed
     3fc:	000016c0 	.word	0x000016c0
     400:	000016d8 	.word	0x000016d8
     404:	000016fc 	.word	0x000016fc
     408:	00001700 	.word	0x00001700
     40c:	00001704 	.word	0x00001704

00000410 <am_reset_isr>:
am_reset_isr(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
     410:	4811      	ldr	r0, [pc, #68]	; (458 <zero_loop+0x12>)
     412:	4912      	ldr	r1, [pc, #72]	; (45c <zero_loop+0x16>)
     414:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
     416:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
     41a:	4811      	ldr	r0, [pc, #68]	; (460 <zero_loop+0x1a>)
     41c:	6801      	ldr	r1, [r0, #0]
     41e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     422:	6001      	str	r1, [r0, #0]
     424:	f3bf 8f4f 	dsb	sy
     428:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
     42c:	480d      	ldr	r0, [pc, #52]	; (464 <zero_loop+0x1e>)
     42e:	490e      	ldr	r1, [pc, #56]	; (468 <zero_loop+0x22>)
     430:	4a0e      	ldr	r2, [pc, #56]	; (46c <zero_loop+0x26>)

00000432 <copy_loop>:
     432:	f850 3b04 	ldr.w	r3, [r0], #4
     436:	f841 3b04 	str.w	r3, [r1], #4
     43a:	4291      	cmp	r1, r2
     43c:	dbf9      	blt.n	432 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
     43e:	480c      	ldr	r0, [pc, #48]	; (470 <zero_loop+0x2a>)
     440:	490c      	ldr	r1, [pc, #48]	; (474 <zero_loop+0x2e>)
     442:	f04f 0200 	mov.w	r2, #0

00000446 <zero_loop>:
     446:	4288      	cmp	r0, r1
     448:	bfb8      	it	lt
     44a:	f840 2b04 	strlt.w	r2, [r0], #4
     44e:	dbfa      	blt.n	446 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
     450:	f7ff ff78 	bl	344 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
     454:	be00      	bkpt	0x0000
}
     456:	bf00      	nop
     458:	e000ed08 	.word	0xe000ed08
     45c:	00000000 	.word	0x00000000
     460:	e000ed88 	.word	0xe000ed88
     464:	00001728 	.word	0x00001728
     468:	10001000 	.word	0x10001000
     46c:	10001020 	.word	0x10001020
     470:	10001020 	.word	0x10001020
     474:	10001128 	.word	0x10001128

00000478 <am_nmi_isr>:
// by a debugger.
//
//*****************************************************************************
void
am_nmi_isr(void)
{
     478:	b480      	push	{r7}
     47a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     47c:	e7fe      	b.n	47c <am_nmi_isr+0x4>

0000047e <am_adc_isr>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
     47e:	b480      	push	{r7}
     480:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
     482:	e7fe      	b.n	482 <am_adc_isr+0x4>

00000484 <am_fault_isr>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_fault_isr(void)
{
    __asm("    push    {r7,lr}");
     484:	b580      	push	{r7, lr}
    __asm("    mov     r0, sp");
     486:	4668      	mov	r0, sp
    __asm("    adds    r0, #(2*4)");
     488:	3008      	adds	r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
     48a:	f000 f809 	bl	4a0 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");
     48e:	bd01      	pop	{r0, pc}
}
     490:	bf00      	nop
     492:	4618      	mov	r0, r3

00000494 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
     494:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
     496:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
     498:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
     49a:	4770      	bx	lr
}
     49c:	bf00      	nop
     49e:	4618      	mov	r0, r3

000004a0 <am_util_faultisr_collect_data>:
// am_fault_isr() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
     4a0:	b580      	push	{r7, lr}
     4a2:	b096      	sub	sp, #88	; 0x58
     4a4:	af00      	add	r7, sp, #0
     4a6:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
     4a8:	f107 030c 	add.w	r3, r7, #12
     4ac:	2200      	movs	r2, #0
     4ae:	601a      	str	r2, [r3, #0]
     4b0:	605a      	str	r2, [r3, #4]
     4b2:	609a      	str	r2, [r3, #8]
     4b4:	60da      	str	r2, [r3, #12]
     4b6:	611a      	str	r2, [r3, #16]
     4b8:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
     4ba:	2300      	movs	r3, #0
     4bc:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
     4be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     4c0:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
     4c2:	4b2e      	ldr	r3, [pc, #184]	; (57c <am_util_faultisr_collect_data+0xdc>)
     4c4:	681b      	ldr	r3, [r3, #0]
     4c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
     4c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     4ca:	b2db      	uxtb	r3, r3
     4cc:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
     4d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     4d2:	0a1b      	lsrs	r3, r3, #8
     4d4:	b2db      	uxtb	r3, r3
     4d6:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
     4da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     4dc:	0c1b      	lsrs	r3, r3, #16
     4de:	b29b      	uxth	r3, r3
     4e0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
     4e4:	4b26      	ldr	r3, [pc, #152]	; (580 <am_util_faultisr_collect_data+0xe0>)
     4e6:	681b      	ldr	r3, [r3, #0]
     4e8:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
     4ea:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
     4ee:	b2db      	uxtb	r3, r3
     4f0:	f003 0302 	and.w	r3, r3, #2
     4f4:	2b00      	cmp	r3, #0
     4f6:	d005      	beq.n	504 <am_util_faultisr_collect_data+0x64>
     4f8:	6879      	ldr	r1, [r7, #4]
     4fa:	2006      	movs	r0, #6
     4fc:	f7ff ffca 	bl	494 <getStackedReg>
     500:	4603      	mov	r3, r0
     502:	e001      	b.n	508 <am_util_faultisr_collect_data+0x68>
     504:	f04f 33ff 	mov.w	r3, #4294967295
     508:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
     50a:	6879      	ldr	r1, [r7, #4]
     50c:	2000      	movs	r0, #0
     50e:	f7ff ffc1 	bl	494 <getStackedReg>
     512:	4603      	mov	r3, r0
     514:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
     516:	6879      	ldr	r1, [r7, #4]
     518:	2001      	movs	r0, #1
     51a:	f7ff ffbb 	bl	494 <getStackedReg>
     51e:	4603      	mov	r3, r0
     520:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
     522:	6879      	ldr	r1, [r7, #4]
     524:	2002      	movs	r0, #2
     526:	f7ff ffb5 	bl	494 <getStackedReg>
     52a:	4603      	mov	r3, r0
     52c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
     52e:	6879      	ldr	r1, [r7, #4]
     530:	2003      	movs	r0, #3
     532:	f7ff ffaf 	bl	494 <getStackedReg>
     536:	4603      	mov	r3, r0
     538:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
     53a:	6879      	ldr	r1, [r7, #4]
     53c:	2004      	movs	r0, #4
     53e:	f7ff ffa9 	bl	494 <getStackedReg>
     542:	4603      	mov	r3, r0
     544:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
     546:	6879      	ldr	r1, [r7, #4]
     548:	2005      	movs	r0, #5
     54a:	f7ff ffa3 	bl	494 <getStackedReg>
     54e:	4603      	mov	r3, r0
     550:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
     552:	6879      	ldr	r1, [r7, #4]
     554:	2006      	movs	r0, #6
     556:	f7ff ff9d 	bl	494 <getStackedReg>
     55a:	4603      	mov	r3, r0
     55c:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
     55e:	6879      	ldr	r1, [r7, #4]
     560:	2007      	movs	r0, #7
     562:	f7ff ff97 	bl	494 <getStackedReg>
     566:	4603      	mov	r3, r0
     568:	643b      	str	r3, [r7, #64]	; 0x40
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#ifdef AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
#else
    am_hal_mcuctrl_fault_status(&sHalFaultData);
     56a:	f107 030c 	add.w	r3, r7, #12
     56e:	4618      	mov	r0, r3
     570:	f000 ff9a 	bl	14a8 <am_hal_mcuctrl_fault_status>
    }


#endif

    u32Mask = 0;
     574:	2300      	movs	r3, #0
     576:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
     578:	e7fe      	b.n	578 <am_util_faultisr_collect_data+0xd8>
     57a:	bf00      	nop
     57c:	e000ed28 	.word	0xe000ed28
     580:	e000ed38 	.word	0xe000ed38

00000584 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
     584:	b480      	push	{r7}
     586:	b083      	sub	sp, #12
     588:	af00      	add	r7, sp, #0
     58a:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
     58c:	4a04      	ldr	r2, [pc, #16]	; (5a0 <am_util_stdio_printf_init+0x1c>)
     58e:	687b      	ldr	r3, [r7, #4]
     590:	6013      	str	r3, [r2, #0]
}
     592:	bf00      	nop
     594:	370c      	adds	r7, #12
     596:	46bd      	mov	sp, r7
     598:	f85d 7b04 	ldr.w	r7, [sp], #4
     59c:	4770      	bx	lr
     59e:	bf00      	nop
     5a0:	10001124 	.word	0x10001124

000005a4 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
     5a4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     5a8:	b096      	sub	sp, #88	; 0x58
     5aa:	af00      	add	r7, sp, #0
     5ac:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
     5b0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     5b4:	0025      	movs	r5, r4
     5b6:	2600      	movs	r6, #0
     5b8:	ea55 0306 	orrs.w	r3, r5, r6
     5bc:	f000 80a0 	beq.w	700 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
     5c0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     5c4:	0862      	lsrs	r2, r4, #1
     5c6:	ea4f 0133 	mov.w	r1, r3, rrx
     5ca:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     5ce:	ea4f 0893 	mov.w	r8, r3, lsr #2
     5d2:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
     5d6:	ea4f 0994 	mov.w	r9, r4, lsr #2
     5da:	eb11 0308 	adds.w	r3, r1, r8
     5de:	eb42 0409 	adc.w	r4, r2, r9
     5e2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
     5e6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5ea:	ea4f 1a13 	mov.w	sl, r3, lsr #4
     5ee:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
     5f2:	ea4f 1b14 	mov.w	fp, r4, lsr #4
     5f6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     5fa:	eb13 030a 	adds.w	r3, r3, sl
     5fe:	eb44 040b 	adc.w	r4, r4, fp
     602:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
     606:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     60a:	0a1a      	lsrs	r2, r3, #8
     60c:	62ba      	str	r2, [r7, #40]	; 0x28
     60e:	6aba      	ldr	r2, [r7, #40]	; 0x28
     610:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
     614:	62ba      	str	r2, [r7, #40]	; 0x28
     616:	0a23      	lsrs	r3, r4, #8
     618:	62fb      	str	r3, [r7, #44]	; 0x2c
     61a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     61e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
     622:	18c9      	adds	r1, r1, r3
     624:	eb42 0204 	adc.w	r2, r2, r4
     628:	460b      	mov	r3, r1
     62a:	4614      	mov	r4, r2
     62c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
     630:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     634:	0c1a      	lsrs	r2, r3, #16
     636:	623a      	str	r2, [r7, #32]
     638:	6a3a      	ldr	r2, [r7, #32]
     63a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
     63e:	623a      	str	r2, [r7, #32]
     640:	0c23      	lsrs	r3, r4, #16
     642:	627b      	str	r3, [r7, #36]	; 0x24
     644:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     648:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
     64c:	18c9      	adds	r1, r1, r3
     64e:	eb42 0204 	adc.w	r2, r2, r4
     652:	460b      	mov	r3, r1
     654:	4614      	mov	r4, r2
     656:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
     65a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     65e:	0023      	movs	r3, r4
     660:	603b      	str	r3, [r7, #0]
     662:	2300      	movs	r3, #0
     664:	607b      	str	r3, [r7, #4]
     666:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     66a:	e897 0006 	ldmia.w	r7, {r1, r2}
     66e:	18c9      	adds	r1, r1, r3
     670:	eb42 0204 	adc.w	r2, r2, r4
     674:	460b      	mov	r3, r1
     676:	4614      	mov	r4, r2
     678:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
     67c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     680:	08da      	lsrs	r2, r3, #3
     682:	613a      	str	r2, [r7, #16]
     684:	693a      	ldr	r2, [r7, #16]
     686:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
     68a:	613a      	str	r2, [r7, #16]
     68c:	08e3      	lsrs	r3, r4, #3
     68e:	617b      	str	r3, [r7, #20]
     690:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
     694:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
     698:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
     69c:	460b      	mov	r3, r1
     69e:	4614      	mov	r4, r2
     6a0:	00a0      	lsls	r0, r4, #2
     6a2:	60f8      	str	r0, [r7, #12]
     6a4:	68f8      	ldr	r0, [r7, #12]
     6a6:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
     6aa:	60f8      	str	r0, [r7, #12]
     6ac:	009b      	lsls	r3, r3, #2
     6ae:	60bb      	str	r3, [r7, #8]
     6b0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     6b4:	185b      	adds	r3, r3, r1
     6b6:	eb44 0402 	adc.w	r4, r4, r2
     6ba:	18db      	adds	r3, r3, r3
     6bc:	eb44 0404 	adc.w	r4, r4, r4
     6c0:	4619      	mov	r1, r3
     6c2:	4622      	mov	r2, r4
     6c4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     6c8:	1a5b      	subs	r3, r3, r1
     6ca:	eb64 0402 	sbc.w	r4, r4, r2
     6ce:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
     6d2:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
     6d6:	3306      	adds	r3, #6
     6d8:	f144 0400 	adc.w	r4, r4, #0
     6dc:	091a      	lsrs	r2, r3, #4
     6de:	61ba      	str	r2, [r7, #24]
     6e0:	69ba      	ldr	r2, [r7, #24]
     6e2:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
     6e6:	61ba      	str	r2, [r7, #24]
     6e8:	0923      	lsrs	r3, r4, #4
     6ea:	61fb      	str	r3, [r7, #28]
     6ec:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
     6f0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
     6f4:	18c9      	adds	r1, r1, r3
     6f6:	eb42 0204 	adc.w	r2, r2, r4
     6fa:	460b      	mov	r3, r1
     6fc:	4614      	mov	r4, r2
     6fe:	e029      	b.n	754 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
     700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     702:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
     704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     706:	085a      	lsrs	r2, r3, #1
     708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     70a:	089b      	lsrs	r3, r3, #2
     70c:	4413      	add	r3, r2
     70e:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
     710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     712:	091b      	lsrs	r3, r3, #4
     714:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     716:	4413      	add	r3, r2
     718:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
     71a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     71c:	0a1b      	lsrs	r3, r3, #8
     71e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     720:	4413      	add	r3, r2
     722:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
     724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     726:	0c1b      	lsrs	r3, r3, #16
     728:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     72a:	4413      	add	r3, r2
     72c:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
     72e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     730:	08db      	lsrs	r3, r3, #3
     732:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
     734:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     736:	4613      	mov	r3, r2
     738:	009b      	lsls	r3, r3, #2
     73a:	4413      	add	r3, r2
     73c:	005b      	lsls	r3, r3, #1
     73e:	461a      	mov	r2, r3
     740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     742:	1a9b      	subs	r3, r3, r2
     744:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
     746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     748:	3306      	adds	r3, #6
     74a:	091a      	lsrs	r2, r3, #4
     74c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     74e:	4413      	add	r3, r2
     750:	f04f 0400 	mov.w	r4, #0
    }
}
     754:	4618      	mov	r0, r3
     756:	4621      	mov	r1, r4
     758:	3758      	adds	r7, #88	; 0x58
     75a:	46bd      	mov	sp, r7
     75c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     760:	4770      	bx	lr

00000762 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
     762:	b590      	push	{r4, r7, lr}
     764:	b085      	sub	sp, #20
     766:	af00      	add	r7, sp, #0
     768:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
     76c:	683a      	ldr	r2, [r7, #0]
     76e:	687b      	ldr	r3, [r7, #4]
     770:	4313      	orrs	r3, r2
     772:	2b00      	cmp	r3, #0
     774:	bf0c      	ite	eq
     776:	2301      	moveq	r3, #1
     778:	2300      	movne	r3, #0
     77a:	b2db      	uxtb	r3, r3
     77c:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
     77e:	e008      	b.n	792 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
     780:	e9d7 0100 	ldrd	r0, r1, [r7]
     784:	f7ff ff0e 	bl	5a4 <divu64_10>
     788:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
     78c:	68fb      	ldr	r3, [r7, #12]
     78e:	3301      	adds	r3, #1
     790:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
     792:	e897 0018 	ldmia.w	r7, {r3, r4}
     796:	4323      	orrs	r3, r4
     798:	d1f2      	bne.n	780 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
     79a:	68fb      	ldr	r3, [r7, #12]
}
     79c:	4618      	mov	r0, r3
     79e:	3714      	adds	r7, #20
     7a0:	46bd      	mov	sp, r7
     7a2:	bd90      	pop	{r4, r7, pc}

000007a4 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
     7a4:	b590      	push	{r4, r7, lr}
     7a6:	b083      	sub	sp, #12
     7a8:	af00      	add	r7, sp, #0
     7aa:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
     7ae:	e897 0018 	ldmia.w	r7, {r3, r4}
     7b2:	2b00      	cmp	r3, #0
     7b4:	f174 0300 	sbcs.w	r3, r4, #0
     7b8:	da06      	bge.n	7c8 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
     7ba:	e897 0018 	ldmia.w	r7, {r3, r4}
     7be:	425b      	negs	r3, r3
     7c0:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
     7c4:	e887 0018 	stmia.w	r7, {r3, r4}
    }

    return ndigits_in_u64((uint64_t) i64Val);
     7c8:	e897 0018 	ldmia.w	r7, {r3, r4}
     7cc:	4618      	mov	r0, r3
     7ce:	4621      	mov	r1, r4
     7d0:	f7ff ffc7 	bl	762 <ndigits_in_u64>
     7d4:	4603      	mov	r3, r0
}
     7d6:	4618      	mov	r0, r3
     7d8:	370c      	adds	r7, #12
     7da:	46bd      	mov	sp, r7
     7dc:	bd90      	pop	{r4, r7, pc}

000007de <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
     7de:	b490      	push	{r4, r7}
     7e0:	b084      	sub	sp, #16
     7e2:	af00      	add	r7, sp, #0
     7e4:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
     7e8:	6839      	ldr	r1, [r7, #0]
     7ea:	687a      	ldr	r2, [r7, #4]
     7ec:	430a      	orrs	r2, r1
     7ee:	2a00      	cmp	r2, #0
     7f0:	bf0c      	ite	eq
     7f2:	2201      	moveq	r2, #1
     7f4:	2200      	movne	r2, #0
     7f6:	b2d2      	uxtb	r2, r2
     7f8:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
     7fa:	e00a      	b.n	812 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
     7fc:	e897 0006 	ldmia.w	r7, {r1, r2}
     800:	090b      	lsrs	r3, r1, #4
     802:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
     806:	0914      	lsrs	r4, r2, #4
     808:	e887 0018 	stmia.w	r7, {r3, r4}
        ++iDigits;
     80c:	68fa      	ldr	r2, [r7, #12]
     80e:	3201      	adds	r2, #1
     810:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
     812:	e897 0006 	ldmia.w	r7, {r1, r2}
     816:	430a      	orrs	r2, r1
     818:	d1f0      	bne.n	7fc <ndigits_in_hex+0x1e>
    }

    return iDigits;
     81a:	68fb      	ldr	r3, [r7, #12]
}
     81c:	4618      	mov	r0, r3
     81e:	3710      	adds	r7, #16
     820:	46bd      	mov	sp, r7
     822:	bc90      	pop	{r4, r7}
     824:	4770      	bx	lr

00000826 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
     826:	b480      	push	{r7}
     828:	b087      	sub	sp, #28
     82a:	af00      	add	r7, sp, #0
     82c:	6078      	str	r0, [r7, #4]
     82e:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
     830:	2300      	movs	r3, #0
     832:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
     834:	2300      	movs	r3, #0
     836:	613b      	str	r3, [r7, #16]
     838:	2300      	movs	r3, #0
     83a:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
     83c:	687b      	ldr	r3, [r7, #4]
     83e:	781b      	ldrb	r3, [r3, #0]
     840:	2b2d      	cmp	r3, #45	; 0x2d
     842:	d11b      	bne.n	87c <decstr_to_int+0x56>
    {
        bNeg = true;
     844:	2301      	movs	r3, #1
     846:	75fb      	strb	r3, [r7, #23]
        pcStr++;
     848:	687b      	ldr	r3, [r7, #4]
     84a:	3301      	adds	r3, #1
     84c:	607b      	str	r3, [r7, #4]
        uCnt++;
     84e:	68fb      	ldr	r3, [r7, #12]
     850:	3301      	adds	r3, #1
     852:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     854:	e012      	b.n	87c <decstr_to_int+0x56>
    {
        ++uCnt;
     856:	68fb      	ldr	r3, [r7, #12]
     858:	3301      	adds	r3, #1
     85a:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
     85c:	693a      	ldr	r2, [r7, #16]
     85e:	4613      	mov	r3, r2
     860:	009b      	lsls	r3, r3, #2
     862:	4413      	add	r3, r2
     864:	005b      	lsls	r3, r3, #1
     866:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
     868:	687b      	ldr	r3, [r7, #4]
     86a:	781b      	ldrb	r3, [r3, #0]
     86c:	461a      	mov	r2, r3
     86e:	693b      	ldr	r3, [r7, #16]
     870:	4413      	add	r3, r2
     872:	3b30      	subs	r3, #48	; 0x30
     874:	613b      	str	r3, [r7, #16]
        pcStr++;
     876:	687b      	ldr	r3, [r7, #4]
     878:	3301      	adds	r3, #1
     87a:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
     87c:	687b      	ldr	r3, [r7, #4]
     87e:	781b      	ldrb	r3, [r3, #0]
     880:	2b2f      	cmp	r3, #47	; 0x2f
     882:	d903      	bls.n	88c <decstr_to_int+0x66>
     884:	687b      	ldr	r3, [r7, #4]
     886:	781b      	ldrb	r3, [r3, #0]
     888:	2b39      	cmp	r3, #57	; 0x39
     88a:	d9e4      	bls.n	856 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
     88c:	683b      	ldr	r3, [r7, #0]
     88e:	2b00      	cmp	r3, #0
     890:	d002      	beq.n	898 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
     892:	683b      	ldr	r3, [r7, #0]
     894:	68fa      	ldr	r2, [r7, #12]
     896:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
     898:	7dfb      	ldrb	r3, [r7, #23]
     89a:	2b00      	cmp	r3, #0
     89c:	d002      	beq.n	8a4 <decstr_to_int+0x7e>
     89e:	693b      	ldr	r3, [r7, #16]
     8a0:	425b      	negs	r3, r3
     8a2:	e000      	b.n	8a6 <decstr_to_int+0x80>
     8a4:	693b      	ldr	r3, [r7, #16]
}
     8a6:	4618      	mov	r0, r3
     8a8:	371c      	adds	r7, #28
     8aa:	46bd      	mov	sp, r7
     8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b0:	4770      	bx	lr

000008b2 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
     8b2:	b590      	push	{r4, r7, lr}
     8b4:	b091      	sub	sp, #68	; 0x44
     8b6:	af00      	add	r7, sp, #0
     8b8:	e9c7 0102 	strd	r0, r1, [r7, #8]
     8bc:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
     8be:	2300      	movs	r3, #0
     8c0:	63fb      	str	r3, [r7, #60]	; 0x3c
     8c2:	2300      	movs	r3, #0
     8c4:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
     8c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     8ca:	f7ff fe6b 	bl	5a4 <divu64_10>
     8ce:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
     8d2:	68b9      	ldr	r1, [r7, #8]
     8d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     8d6:	4613      	mov	r3, r2
     8d8:	009b      	lsls	r3, r3, #2
     8da:	4413      	add	r3, r2
     8dc:	005b      	lsls	r3, r3, #1
     8de:	1acb      	subs	r3, r1, r3
     8e0:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
     8e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     8e4:	1c5a      	adds	r2, r3, #1
     8e6:	63fa      	str	r2, [r7, #60]	; 0x3c
     8e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     8ea:	b2d2      	uxtb	r2, r2
     8ec:	3230      	adds	r2, #48	; 0x30
     8ee:	b2d2      	uxtb	r2, r2
     8f0:	f107 0140 	add.w	r1, r7, #64	; 0x40
     8f4:	440b      	add	r3, r1
     8f6:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
     8fa:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
     8fe:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
     902:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     906:	4323      	orrs	r3, r4
     908:	d1dd      	bne.n	8c6 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     90a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     90c:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
     90e:	687b      	ldr	r3, [r7, #4]
     910:	2b00      	cmp	r3, #0
     912:	d011      	beq.n	938 <uint64_to_str+0x86>
    {
        while ( ix-- )
     914:	e008      	b.n	928 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
     916:	687b      	ldr	r3, [r7, #4]
     918:	1c5a      	adds	r2, r3, #1
     91a:	607a      	str	r2, [r7, #4]
     91c:	f107 0110 	add.w	r1, r7, #16
     920:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     922:	440a      	add	r2, r1
     924:	7812      	ldrb	r2, [r2, #0]
     926:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
     928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     92a:	1e5a      	subs	r2, r3, #1
     92c:	63fa      	str	r2, [r7, #60]	; 0x3c
     92e:	2b00      	cmp	r3, #0
     930:	d1f1      	bne.n	916 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
     932:	687b      	ldr	r3, [r7, #4]
     934:	2200      	movs	r2, #0
     936:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
     93a:	4618      	mov	r0, r3
     93c:	3744      	adds	r7, #68	; 0x44
     93e:	46bd      	mov	sp, r7
     940:	bd90      	pop	{r4, r7, pc}

00000942 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
     942:	b4b0      	push	{r4, r5, r7}
     944:	b08d      	sub	sp, #52	; 0x34
     946:	af00      	add	r7, sp, #0
     948:	e9c7 0102 	strd	r0, r1, [r7, #8]
     94c:	607a      	str	r2, [r7, #4]
     94e:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
     950:	2300      	movs	r3, #0
     952:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
     954:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     958:	4313      	orrs	r3, r2
     95a:	d131      	bne.n	9c0 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
     95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     95e:	1c5a      	adds	r2, r3, #1
     960:	62fa      	str	r2, [r7, #44]	; 0x2c
     962:	f107 0230 	add.w	r2, r7, #48	; 0x30
     966:	4413      	add	r3, r2
     968:	2230      	movs	r2, #48	; 0x30
     96a:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
     96e:	e027      	b.n	9c0 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
     970:	7a3b      	ldrb	r3, [r7, #8]
     972:	f003 030f 	and.w	r3, r3, #15
     976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
     97a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     97e:	2b09      	cmp	r3, #9
     980:	d90a      	bls.n	998 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
     982:	78fb      	ldrb	r3, [r7, #3]
     984:	2b00      	cmp	r3, #0
     986:	d001      	beq.n	98c <uint64_to_hexstr+0x4a>
     988:	2227      	movs	r2, #39	; 0x27
     98a:	e000      	b.n	98e <uint64_to_hexstr+0x4c>
     98c:	2207      	movs	r2, #7
     98e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     992:	4413      	add	r3, r2
     994:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
     998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     99a:	1c5a      	adds	r2, r3, #1
     99c:	62fa      	str	r2, [r7, #44]	; 0x2c
     99e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
     9a2:	3230      	adds	r2, #48	; 0x30
     9a4:	b2d2      	uxtb	r2, r2
     9a6:	f107 0130 	add.w	r1, r7, #48	; 0x30
     9aa:	440b      	add	r3, r1
     9ac:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
     9b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     9b4:	0914      	lsrs	r4, r2, #4
     9b6:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     9ba:	091d      	lsrs	r5, r3, #4
     9bc:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
     9c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     9c4:	4313      	orrs	r3, r2
     9c6:	d1d3      	bne.n	970 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
     9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     9ca:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
     9cc:	687b      	ldr	r3, [r7, #4]
     9ce:	2b00      	cmp	r3, #0
     9d0:	d011      	beq.n	9f6 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
     9d2:	e008      	b.n	9e6 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
     9d4:	687b      	ldr	r3, [r7, #4]
     9d6:	1c5a      	adds	r2, r3, #1
     9d8:	607a      	str	r2, [r7, #4]
     9da:	f107 0110 	add.w	r1, r7, #16
     9de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     9e0:	440a      	add	r2, r1
     9e2:	7812      	ldrb	r2, [r2, #0]
     9e4:	701a      	strb	r2, [r3, #0]
        while (ix--)
     9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     9e8:	1e5a      	subs	r2, r3, #1
     9ea:	62fa      	str	r2, [r7, #44]	; 0x2c
     9ec:	2b00      	cmp	r3, #0
     9ee:	d1f1      	bne.n	9d4 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
     9f0:	687b      	ldr	r3, [r7, #4]
     9f2:	2200      	movs	r2, #0
     9f4:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
     9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     9f8:	4618      	mov	r0, r3
     9fa:	3734      	adds	r7, #52	; 0x34
     9fc:	46bd      	mov	sp, r7
     9fe:	bcb0      	pop	{r4, r5, r7}
     a00:	4770      	bx	lr

00000a02 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
     a02:	b480      	push	{r7}
     a04:	b085      	sub	sp, #20
     a06:	af00      	add	r7, sp, #0
     a08:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
     a0a:	2300      	movs	r3, #0
     a0c:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
     a0e:	687b      	ldr	r3, [r7, #4]
     a10:	2b00      	cmp	r3, #0
     a12:	d104      	bne.n	a1e <simple_strlen+0x1c>
    {
        return ui32RetVal;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	e009      	b.n	a2c <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
     a18:	68fb      	ldr	r3, [r7, #12]
     a1a:	3301      	adds	r3, #1
     a1c:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
     a1e:	687b      	ldr	r3, [r7, #4]
     a20:	1c5a      	adds	r2, r3, #1
     a22:	607a      	str	r2, [r7, #4]
     a24:	781b      	ldrb	r3, [r3, #0]
     a26:	2b00      	cmp	r3, #0
     a28:	d1f6      	bne.n	a18 <simple_strlen+0x16>
    }
    return ui32RetVal;
     a2a:	68fb      	ldr	r3, [r7, #12]
}
     a2c:	4618      	mov	r0, r3
     a2e:	3714      	adds	r7, #20
     a30:	46bd      	mov	sp, r7
     a32:	f85d 7b04 	ldr.w	r7, [sp], #4
     a36:	4770      	bx	lr

00000a38 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
     a38:	b480      	push	{r7}
     a3a:	b087      	sub	sp, #28
     a3c:	af00      	add	r7, sp, #0
     a3e:	60f8      	str	r0, [r7, #12]
     a40:	460b      	mov	r3, r1
     a42:	607a      	str	r2, [r7, #4]
     a44:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
     a46:	2300      	movs	r3, #0
     a48:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
     a4a:	687b      	ldr	r3, [r7, #4]
     a4c:	2b00      	cmp	r3, #0
     a4e:	dc0c      	bgt.n	a6a <padbuffer+0x32>
    {
        return i32Cnt;
     a50:	697b      	ldr	r3, [r7, #20]
     a52:	e010      	b.n	a76 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
     a54:	68fb      	ldr	r3, [r7, #12]
     a56:	2b00      	cmp	r3, #0
     a58:	d004      	beq.n	a64 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
     a5a:	68fb      	ldr	r3, [r7, #12]
     a5c:	1c5a      	adds	r2, r3, #1
     a5e:	60fa      	str	r2, [r7, #12]
     a60:	7afa      	ldrb	r2, [r7, #11]
     a62:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
     a64:	697b      	ldr	r3, [r7, #20]
     a66:	3301      	adds	r3, #1
     a68:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
     a6a:	687b      	ldr	r3, [r7, #4]
     a6c:	1e5a      	subs	r2, r3, #1
     a6e:	607a      	str	r2, [r7, #4]
     a70:	2b00      	cmp	r3, #0
     a72:	d1ef      	bne.n	a54 <padbuffer+0x1c>
    }

    return i32Cnt;
     a74:	697b      	ldr	r3, [r7, #20]
}
     a76:	4618      	mov	r0, r3
     a78:	371c      	adds	r7, #28
     a7a:	46bd      	mov	sp, r7
     a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
     a80:	4770      	bx	lr
	...

00000a84 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
     a84:	b590      	push	{r4, r7, lr}
     a86:	b08f      	sub	sp, #60	; 0x3c
     a88:	af00      	add	r7, sp, #0
     a8a:	60f8      	str	r0, [r7, #12]
     a8c:	60b9      	str	r1, [r7, #8]
     a8e:	607a      	str	r2, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
     a90:	68bb      	ldr	r3, [r7, #8]
     a92:	681b      	ldr	r3, [r3, #0]
     a94:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
     a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a98:	2b03      	cmp	r3, #3
     a9a:	dc02      	bgt.n	aa2 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
     a9c:	f06f 0302 	mvn.w	r3, #2
     aa0:	e0e7      	b.n	c72 <ftoa+0x1ee>
    }

    if (fValue == 0.0f)
     aa2:	edd7 7a03 	vldr	s15, [r7, #12]
     aa6:	eef5 7a40 	vcmp.f32	s15, #0.0
     aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     aae:	d104      	bne.n	aba <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
     ab0:	68bb      	ldr	r3, [r7, #8]
     ab2:	4a72      	ldr	r2, [pc, #456]	; (c7c <ftoa+0x1f8>)
     ab4:	601a      	str	r2, [r3, #0]
        return 3;
     ab6:	2303      	movs	r3, #3
     ab8:	e0db      	b.n	c72 <ftoa+0x1ee>
    }

    pcBufInitial = pcBuf;
     aba:	68bb      	ldr	r3, [r7, #8]
     abc:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
     abe:	68fb      	ldr	r3, [r7, #12]
     ac0:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
     ac2:	693b      	ldr	r3, [r7, #16]
     ac4:	15db      	asrs	r3, r3, #23
     ac6:	b2db      	uxtb	r3, r3
     ac8:	3b7f      	subs	r3, #127	; 0x7f
     aca:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
     acc:	693b      	ldr	r3, [r7, #16]
     ace:	f3c3 0316 	ubfx	r3, r3, #0, #23
     ad2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     ad6:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
     ad8:	2300      	movs	r3, #0
     ada:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
     adc:	2300      	movs	r3, #0
     ade:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
     ae0:	69fb      	ldr	r3, [r7, #28]
     ae2:	2b1e      	cmp	r3, #30
     ae4:	dd02      	ble.n	aec <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
     ae6:	f06f 0301 	mvn.w	r3, #1
     aea:	e0c2      	b.n	c72 <ftoa+0x1ee>
    }
    else if (iExp2 < -23)
     aec:	69fb      	ldr	r3, [r7, #28]
     aee:	f113 0f17 	cmn.w	r3, #23
     af2:	da02      	bge.n	afa <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
     af4:	f04f 33ff 	mov.w	r3, #4294967295
     af8:	e0bb      	b.n	c72 <ftoa+0x1ee>
    }
    else if (iExp2 >= 23)
     afa:	69fb      	ldr	r3, [r7, #28]
     afc:	2b16      	cmp	r3, #22
     afe:	dd06      	ble.n	b0e <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
     b00:	69fb      	ldr	r3, [r7, #28]
     b02:	3b17      	subs	r3, #23
     b04:	69ba      	ldr	r2, [r7, #24]
     b06:	fa02 f303 	lsl.w	r3, r2, r3
     b0a:	637b      	str	r3, [r7, #52]	; 0x34
     b0c:	e01a      	b.n	b44 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
     b0e:	69fb      	ldr	r3, [r7, #28]
     b10:	2b00      	cmp	r3, #0
     b12:	db0f      	blt.n	b34 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
     b14:	69fb      	ldr	r3, [r7, #28]
     b16:	f1c3 0317 	rsb	r3, r3, #23
     b1a:	69ba      	ldr	r2, [r7, #24]
     b1c:	fa42 f303 	asr.w	r3, r2, r3
     b20:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
     b22:	69fb      	ldr	r3, [r7, #28]
     b24:	3301      	adds	r3, #1
     b26:	69ba      	ldr	r2, [r7, #24]
     b28:	fa02 f303 	lsl.w	r3, r2, r3
     b2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     b30:	633b      	str	r3, [r7, #48]	; 0x30
     b32:	e007      	b.n	b44 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
     b34:	69bb      	ldr	r3, [r7, #24]
     b36:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     b3a:	69fb      	ldr	r3, [r7, #28]
     b3c:	43db      	mvns	r3, r3
     b3e:	fa42 f303 	asr.w	r3, r2, r3
     b42:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
     b44:	693b      	ldr	r3, [r7, #16]
     b46:	2b00      	cmp	r3, #0
     b48:	da04      	bge.n	b54 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
     b4a:	68bb      	ldr	r3, [r7, #8]
     b4c:	1c5a      	adds	r2, r3, #1
     b4e:	60ba      	str	r2, [r7, #8]
     b50:	222d      	movs	r2, #45	; 0x2d
     b52:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
     b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b56:	2b00      	cmp	r3, #0
     b58:	d105      	bne.n	b66 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
     b5a:	68bb      	ldr	r3, [r7, #8]
     b5c:	1c5a      	adds	r2, r3, #1
     b5e:	60ba      	str	r2, [r7, #8]
     b60:	2230      	movs	r2, #48	; 0x30
     b62:	701a      	strb	r2, [r3, #0]
     b64:	e021      	b.n	baa <ftoa+0x126>
    }
    else
    {
        if (i32IntPart > 0)
     b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b68:	2b00      	cmp	r3, #0
     b6a:	dd08      	ble.n	b7e <ftoa+0xfa>
        {
            uint64_to_str(i32IntPart, pcBuf);
     b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b6e:	ea4f 74e3 	mov.w	r4, r3, asr #31
     b72:	68ba      	ldr	r2, [r7, #8]
     b74:	4618      	mov	r0, r3
     b76:	4621      	mov	r1, r4
     b78:	f7ff fe9b 	bl	8b2 <uint64_to_str>
     b7c:	e011      	b.n	ba2 <ftoa+0x11e>
        }
        else
        {
            *pcBuf++ = '-';
     b7e:	68bb      	ldr	r3, [r7, #8]
     b80:	1c5a      	adds	r2, r3, #1
     b82:	60ba      	str	r2, [r7, #8]
     b84:	222d      	movs	r2, #45	; 0x2d
     b86:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
     b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b8a:	425b      	negs	r3, r3
     b8c:	ea4f 74e3 	mov.w	r4, r3, asr #31
     b90:	68ba      	ldr	r2, [r7, #8]
     b92:	4618      	mov	r0, r3
     b94:	4621      	mov	r1, r4
     b96:	f7ff fe8c 	bl	8b2 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
     b9a:	e002      	b.n	ba2 <ftoa+0x11e>
        {
            pcBuf++;
     b9c:	68bb      	ldr	r3, [r7, #8]
     b9e:	3301      	adds	r3, #1
     ba0:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
     ba2:	68bb      	ldr	r3, [r7, #8]
     ba4:	781b      	ldrb	r3, [r3, #0]
     ba6:	2b00      	cmp	r3, #0
     ba8:	d1f8      	bne.n	b9c <ftoa+0x118>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
     baa:	68bb      	ldr	r3, [r7, #8]
     bac:	1c5a      	adds	r2, r3, #1
     bae:	60ba      	str	r2, [r7, #8]
     bb0:	222e      	movs	r2, #46	; 0x2e
     bb2:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
     bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     bb6:	2b00      	cmp	r3, #0
     bb8:	d105      	bne.n	bc6 <ftoa+0x142>
    {
        *pcBuf++ = '0';
     bba:	68bb      	ldr	r3, [r7, #8]
     bbc:	1c5a      	adds	r2, r3, #1
     bbe:	60ba      	str	r2, [r7, #8]
     bc0:	2230      	movs	r2, #48	; 0x30
     bc2:	701a      	strb	r2, [r3, #0]
     bc4:	e04f      	b.n	c66 <ftoa+0x1e2>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
     bc6:	68ba      	ldr	r2, [r7, #8]
     bc8:	6a3b      	ldr	r3, [r7, #32]
     bca:	1ad3      	subs	r3, r2, r3
     bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     bce:	1ad3      	subs	r3, r2, r3
     bd0:	3b01      	subs	r3, #1
     bd2:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
     bd4:	697a      	ldr	r2, [r7, #20]
     bd6:	687b      	ldr	r3, [r7, #4]
     bd8:	4293      	cmp	r3, r2
     bda:	bfa8      	it	ge
     bdc:	4613      	movge	r3, r2
     bde:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
     be0:	2300      	movs	r3, #0
     be2:	62bb      	str	r3, [r7, #40]	; 0x28
     be4:	e015      	b.n	c12 <ftoa+0x18e>
        {
            i32FracPart *= 10;
     be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     be8:	4613      	mov	r3, r2
     bea:	009b      	lsls	r3, r3, #2
     bec:	4413      	add	r3, r2
     bee:	005b      	lsls	r3, r3, #1
     bf0:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
     bf2:	68bb      	ldr	r3, [r7, #8]
     bf4:	1c5a      	adds	r2, r3, #1
     bf6:	60ba      	str	r2, [r7, #8]
     bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     bfa:	1612      	asrs	r2, r2, #24
     bfc:	b2d2      	uxtb	r2, r2
     bfe:	3230      	adds	r2, #48	; 0x30
     c00:	b2d2      	uxtb	r2, r2
     c02:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
     c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     c06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     c0a:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
     c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
     c0e:	3301      	adds	r3, #1
     c10:	62bb      	str	r3, [r7, #40]	; 0x28
     c12:	6aba      	ldr	r2, [r7, #40]	; 0x28
     c14:	697b      	ldr	r3, [r7, #20]
     c16:	429a      	cmp	r2, r3
     c18:	dbe5      	blt.n	be6 <ftoa+0x162>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
     c1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     c1c:	4613      	mov	r3, r2
     c1e:	009b      	lsls	r3, r3, #2
     c20:	4413      	add	r3, r2
     c22:	005b      	lsls	r3, r3, #1
     c24:	161b      	asrs	r3, r3, #24
     c26:	2b04      	cmp	r3, #4
     c28:	dd1d      	ble.n	c66 <ftoa+0x1e2>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
     c2a:	68bb      	ldr	r3, [r7, #8]
     c2c:	3b01      	subs	r3, #1
     c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     c30:	e015      	b.n	c5e <ftoa+0x1da>
            {
                if ( *pcBuftmp == '.' )
     c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c34:	781b      	ldrb	r3, [r3, #0]
     c36:	2b2e      	cmp	r3, #46	; 0x2e
     c38:	d00e      	beq.n	c58 <ftoa+0x1d4>
                {
                }
                else if ( *pcBuftmp == '9' )
     c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c3c:	781b      	ldrb	r3, [r3, #0]
     c3e:	2b39      	cmp	r3, #57	; 0x39
     c40:	d103      	bne.n	c4a <ftoa+0x1c6>
                {
                    *pcBuftmp = '0';
     c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c44:	2230      	movs	r2, #48	; 0x30
     c46:	701a      	strb	r2, [r3, #0]
     c48:	e006      	b.n	c58 <ftoa+0x1d4>
                }
                else
                {
                    *pcBuftmp += 1;
     c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c4c:	781b      	ldrb	r3, [r3, #0]
     c4e:	3301      	adds	r3, #1
     c50:	b2da      	uxtb	r2, r3
     c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c54:	701a      	strb	r2, [r3, #0]
                    break;
     c56:	e006      	b.n	c66 <ftoa+0x1e2>
                }
                pcBuftmp--;
     c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c5a:	3b01      	subs	r3, #1
     c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
     c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     c60:	6a3b      	ldr	r3, [r7, #32]
     c62:	429a      	cmp	r2, r3
     c64:	d2e5      	bcs.n	c32 <ftoa+0x1ae>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
     c66:	68bb      	ldr	r3, [r7, #8]
     c68:	2200      	movs	r2, #0
     c6a:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
     c6c:	68ba      	ldr	r2, [r7, #8]
     c6e:	6a3b      	ldr	r3, [r7, #32]
     c70:	1ad3      	subs	r3, r2, r3
} // ftoa()
     c72:	4618      	mov	r0, r3
     c74:	373c      	adds	r7, #60	; 0x3c
     c76:	46bd      	mov	sp, r7
     c78:	bd90      	pop	{r4, r7, pc}
     c7a:	bf00      	nop
     c7c:	00302e30 	.word	0x00302e30

00000c80 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
     c80:	b590      	push	{r4, r7, lr}
     c82:	b095      	sub	sp, #84	; 0x54
     c84:	af00      	add	r7, sp, #0
     c86:	60f8      	str	r0, [r7, #12]
     c88:	60b9      	str	r1, [r7, #8]
     c8a:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
     c8c:	2300      	movs	r3, #0
     c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
     c90:	2300      	movs	r3, #0
     c92:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
     c94:	e2e3      	b.n	125e <am_util_stdio_vsprintf+0x5de>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
     c96:	2306      	movs	r3, #6
     c98:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
     c9a:	68bb      	ldr	r3, [r7, #8]
     c9c:	781b      	ldrb	r3, [r3, #0]
     c9e:	2b25      	cmp	r3, #37	; 0x25
     ca0:	d01f      	beq.n	ce2 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
     ca2:	68fb      	ldr	r3, [r7, #12]
     ca4:	2b00      	cmp	r3, #0
     ca6:	d015      	beq.n	cd4 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
     ca8:	68bb      	ldr	r3, [r7, #8]
     caa:	781b      	ldrb	r3, [r3, #0]
     cac:	2b0a      	cmp	r3, #10
     cae:	d10b      	bne.n	cc8 <am_util_stdio_vsprintf+0x48>
     cb0:	4bb1      	ldr	r3, [pc, #708]	; (f78 <am_util_stdio_vsprintf+0x2f8>)
     cb2:	781b      	ldrb	r3, [r3, #0]
     cb4:	2b00      	cmp	r3, #0
     cb6:	d007      	beq.n	cc8 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
     cb8:	68fb      	ldr	r3, [r7, #12]
     cba:	1c5a      	adds	r2, r3, #1
     cbc:	60fa      	str	r2, [r7, #12]
     cbe:	220d      	movs	r2, #13
     cc0:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
     cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     cc4:	3301      	adds	r3, #1
     cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
     cc8:	68fb      	ldr	r3, [r7, #12]
     cca:	1c5a      	adds	r2, r3, #1
     ccc:	60fa      	str	r2, [r7, #12]
     cce:	68ba      	ldr	r2, [r7, #8]
     cd0:	7812      	ldrb	r2, [r2, #0]
     cd2:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
     cd4:	68bb      	ldr	r3, [r7, #8]
     cd6:	3301      	adds	r3, #1
     cd8:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
     cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     cdc:	3301      	adds	r3, #1
     cde:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
     ce0:	e2bd      	b.n	125e <am_util_stdio_vsprintf+0x5de>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
     ce2:	68bb      	ldr	r3, [r7, #8]
     ce4:	3301      	adds	r3, #1
     ce6:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
     ce8:	2300      	movs	r3, #0
     cea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     cee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     cf2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
     cf6:	2320      	movs	r3, #32
     cf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
     cfc:	68bb      	ldr	r3, [r7, #8]
     cfe:	781b      	ldrb	r3, [r3, #0]
     d00:	2b30      	cmp	r3, #48	; 0x30
     d02:	d105      	bne.n	d10 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
     d04:	2330      	movs	r3, #48	; 0x30
     d06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
     d0a:	68bb      	ldr	r3, [r7, #8]
     d0c:	3301      	adds	r3, #1
     d0e:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
     d10:	f107 0310 	add.w	r3, r7, #16
     d14:	4619      	mov	r1, r3
     d16:	68b8      	ldr	r0, [r7, #8]
     d18:	f7ff fd85 	bl	826 <decstr_to_int>
     d1c:	4603      	mov	r3, r0
     d1e:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
     d20:	693b      	ldr	r3, [r7, #16]
     d22:	68ba      	ldr	r2, [r7, #8]
     d24:	4413      	add	r3, r2
     d26:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
     d28:	68bb      	ldr	r3, [r7, #8]
     d2a:	781b      	ldrb	r3, [r3, #0]
     d2c:	2b73      	cmp	r3, #115	; 0x73
     d2e:	d005      	beq.n	d3c <am_util_stdio_vsprintf+0xbc>
     d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d32:	2b00      	cmp	r3, #0
     d34:	da02      	bge.n	d3c <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
     d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d38:	425b      	negs	r3, r3
     d3a:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
     d3c:	68bb      	ldr	r3, [r7, #8]
     d3e:	781b      	ldrb	r3, [r3, #0]
     d40:	2b2e      	cmp	r3, #46	; 0x2e
     d42:	d10e      	bne.n	d62 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
     d44:	68bb      	ldr	r3, [r7, #8]
     d46:	3301      	adds	r3, #1
     d48:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
     d4a:	f107 0310 	add.w	r3, r7, #16
     d4e:	4619      	mov	r1, r3
     d50:	68b8      	ldr	r0, [r7, #8]
     d52:	f7ff fd68 	bl	826 <decstr_to_int>
     d56:	4603      	mov	r3, r0
     d58:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
     d5a:	693b      	ldr	r3, [r7, #16]
     d5c:	68ba      	ldr	r2, [r7, #8]
     d5e:	4413      	add	r3, r2
     d60:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
     d62:	68bb      	ldr	r3, [r7, #8]
     d64:	781b      	ldrb	r3, [r3, #0]
     d66:	2b6c      	cmp	r3, #108	; 0x6c
     d68:	d10c      	bne.n	d84 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
     d6a:	68bb      	ldr	r3, [r7, #8]
     d6c:	3301      	adds	r3, #1
     d6e:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
     d70:	68bb      	ldr	r3, [r7, #8]
     d72:	781b      	ldrb	r3, [r3, #0]
     d74:	2b6c      	cmp	r3, #108	; 0x6c
     d76:	d105      	bne.n	d84 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
     d78:	68bb      	ldr	r3, [r7, #8]
     d7a:	3301      	adds	r3, #1
     d7c:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
     d7e:	2301      	movs	r3, #1
     d80:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
     d84:	68bb      	ldr	r3, [r7, #8]
     d86:	781b      	ldrb	r3, [r3, #0]
     d88:	3b46      	subs	r3, #70	; 0x46
     d8a:	2b32      	cmp	r3, #50	; 0x32
     d8c:	f200 8254 	bhi.w	1238 <am_util_stdio_vsprintf+0x5b8>
     d90:	a201      	add	r2, pc, #4	; (adr r2, d98 <am_util_stdio_vsprintf+0x118>)
     d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     d96:	bf00      	nop
     d98:	000011c3 	.word	0x000011c3
     d9c:	00001239 	.word	0x00001239
     da0:	00001239 	.word	0x00001239
     da4:	00001239 	.word	0x00001239
     da8:	00001239 	.word	0x00001239
     dac:	00001239 	.word	0x00001239
     db0:	00001239 	.word	0x00001239
     db4:	00001239 	.word	0x00001239
     db8:	00001239 	.word	0x00001239
     dbc:	00001239 	.word	0x00001239
     dc0:	00001239 	.word	0x00001239
     dc4:	00001239 	.word	0x00001239
     dc8:	00001239 	.word	0x00001239
     dcc:	00001239 	.word	0x00001239
     dd0:	00001239 	.word	0x00001239
     dd4:	00001239 	.word	0x00001239
     dd8:	00001239 	.word	0x00001239
     ddc:	00001239 	.word	0x00001239
     de0:	00000f5f 	.word	0x00000f5f
     de4:	00001239 	.word	0x00001239
     de8:	00001239 	.word	0x00001239
     dec:	00001239 	.word	0x00001239
     df0:	00001239 	.word	0x00001239
     df4:	00001239 	.word	0x00001239
     df8:	00001239 	.word	0x00001239
     dfc:	00001239 	.word	0x00001239
     e00:	00001239 	.word	0x00001239
     e04:	00001239 	.word	0x00001239
     e08:	00001239 	.word	0x00001239
     e0c:	00000e65 	.word	0x00000e65
     e10:	0000108b 	.word	0x0000108b
     e14:	00001239 	.word	0x00001239
     e18:	000011c3 	.word	0x000011c3
     e1c:	00001239 	.word	0x00001239
     e20:	00001239 	.word	0x00001239
     e24:	0000108b 	.word	0x0000108b
     e28:	00001239 	.word	0x00001239
     e2c:	00001239 	.word	0x00001239
     e30:	00001239 	.word	0x00001239
     e34:	00001239 	.word	0x00001239
     e38:	00001239 	.word	0x00001239
     e3c:	00001239 	.word	0x00001239
     e40:	00001239 	.word	0x00001239
     e44:	00001239 	.word	0x00001239
     e48:	00001239 	.word	0x00001239
     e4c:	00000e8b 	.word	0x00000e8b
     e50:	00001239 	.word	0x00001239
     e54:	00000ff9 	.word	0x00000ff9
     e58:	00001239 	.word	0x00001239
     e5c:	00001239 	.word	0x00001239
     e60:	00000f59 	.word	0x00000f59
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
     e64:	687b      	ldr	r3, [r7, #4]
     e66:	1d1a      	adds	r2, r3, #4
     e68:	607a      	str	r2, [r7, #4]
     e6a:	681b      	ldr	r3, [r3, #0]
     e6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
     e70:	68fb      	ldr	r3, [r7, #12]
     e72:	2b00      	cmp	r3, #0
     e74:	d005      	beq.n	e82 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
     e76:	68fb      	ldr	r3, [r7, #12]
     e78:	1c5a      	adds	r2, r3, #1
     e7a:	60fa      	str	r2, [r7, #12]
     e7c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
     e80:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
     e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e84:	3301      	adds	r3, #1
     e86:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     e88:	e1e6      	b.n	1258 <am_util_stdio_vsprintf+0x5d8>

            case 's':
                pcStr = va_arg(pArgs, char *);
     e8a:	687b      	ldr	r3, [r7, #4]
     e8c:	1d1a      	adds	r2, r3, #4
     e8e:	607a      	str	r2, [r7, #4]
     e90:	681b      	ldr	r3, [r3, #0]
     e92:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
     e94:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
     e96:	f7ff fdb4 	bl	a02 <simple_strlen>
     e9a:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
     e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e9e:	2b00      	cmp	r3, #0
     ea0:	dd2e      	ble.n	f00 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
     ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     ea6:	429a      	cmp	r2, r3
     ea8:	d22a      	bcs.n	f00 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     eaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
     eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     eae:	1ad3      	subs	r3, r2, r3
     eb0:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     eb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     eb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
     eb8:	4619      	mov	r1, r3
     eba:	68f8      	ldr	r0, [r7, #12]
     ebc:	f7ff fdbc 	bl	a38 <padbuffer>
     ec0:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     ec2:	68fb      	ldr	r3, [r7, #12]
     ec4:	2b00      	cmp	r3, #0
     ec6:	d001      	beq.n	ecc <am_util_stdio_vsprintf+0x24c>
     ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     eca:	e000      	b.n	ece <am_util_stdio_vsprintf+0x24e>
     ecc:	2300      	movs	r3, #0
     ece:	68fa      	ldr	r2, [r7, #12]
     ed0:	4413      	add	r3, r2
     ed2:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ed6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     ed8:	4413      	add	r3, r2
     eda:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     edc:	2300      	movs	r3, #0
     ede:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
     ee0:	e00e      	b.n	f00 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
     ee2:	68fb      	ldr	r3, [r7, #12]
     ee4:	2b00      	cmp	r3, #0
     ee6:	d005      	beq.n	ef4 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
     ee8:	68fb      	ldr	r3, [r7, #12]
     eea:	1c5a      	adds	r2, r3, #1
     eec:	60fa      	str	r2, [r7, #12]
     eee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     ef0:	7812      	ldrb	r2, [r2, #0]
     ef2:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
     ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     ef6:	3301      	adds	r3, #1
     ef8:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
     efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     efc:	3301      	adds	r3, #1
     efe:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
     f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     f02:	781b      	ldrb	r3, [r3, #0]
     f04:	2b00      	cmp	r3, #0
     f06:	d1ec      	bne.n	ee2 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
     f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f0a:	2b00      	cmp	r3, #0
     f0c:	f000 81a1 	beq.w	1252 <am_util_stdio_vsprintf+0x5d2>
                {
                    iWidth = -iWidth;
     f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f12:	425b      	negs	r3, r3
     f14:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
     f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     f1a:	429a      	cmp	r2, r3
     f1c:	f080 8199 	bcs.w	1252 <am_util_stdio_vsprintf+0x5d2>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
     f20:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f24:	1ad3      	subs	r3, r2, r3
     f26:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     f28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
     f2e:	4619      	mov	r1, r3
     f30:	68f8      	ldr	r0, [r7, #12]
     f32:	f7ff fd81 	bl	a38 <padbuffer>
     f36:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
     f38:	68fb      	ldr	r3, [r7, #12]
     f3a:	2b00      	cmp	r3, #0
     f3c:	d001      	beq.n	f42 <am_util_stdio_vsprintf+0x2c2>
     f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f40:	e000      	b.n	f44 <am_util_stdio_vsprintf+0x2c4>
     f42:	2300      	movs	r3, #0
     f44:	68fa      	ldr	r2, [r7, #12]
     f46:	4413      	add	r3, r2
     f48:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
     f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     f4e:	4413      	add	r3, r2
     f50:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
     f52:	2300      	movs	r3, #0
     f54:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
     f56:	e17c      	b.n	1252 <am_util_stdio_vsprintf+0x5d2>

            case 'x':
                bLower = true;
     f58:	2301      	movs	r3, #1
     f5a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     f5e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     f62:	2b00      	cmp	r3, #0
     f64:	d00a      	beq.n	f7c <am_util_stdio_vsprintf+0x2fc>
     f66:	687b      	ldr	r3, [r7, #4]
     f68:	3307      	adds	r3, #7
     f6a:	f023 0307 	bic.w	r3, r3, #7
     f6e:	f103 0208 	add.w	r2, r3, #8
     f72:	607a      	str	r2, [r7, #4]
     f74:	cb18      	ldmia	r3, {r3, r4}
     f76:	e007      	b.n	f88 <am_util_stdio_vsprintf+0x308>
     f78:	10001120 	.word	0x10001120
                                      va_arg(pArgs, uint32_t);
     f7c:	687b      	ldr	r3, [r7, #4]
     f7e:	1d1a      	adds	r2, r3, #4
     f80:	607a      	str	r2, [r7, #4]
     f82:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     f84:	f04f 0400 	mov.w	r4, #0
     f88:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
     f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f8e:	2b00      	cmp	r3, #0
     f90:	d01e      	beq.n	fd0 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
     f92:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     f96:	f7ff fc22 	bl	7de <ndigits_in_hex>
     f9a:	4602      	mov	r2, r0
     f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f9e:	1a9b      	subs	r3, r3, r2
     fa0:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
     fa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     fa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
     fa8:	4619      	mov	r1, r3
     faa:	68f8      	ldr	r0, [r7, #12]
     fac:	f7ff fd44 	bl	a38 <padbuffer>
     fb0:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
     fb2:	68fb      	ldr	r3, [r7, #12]
     fb4:	2b00      	cmp	r3, #0
     fb6:	d001      	beq.n	fbc <am_util_stdio_vsprintf+0x33c>
     fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fba:	e000      	b.n	fbe <am_util_stdio_vsprintf+0x33e>
     fbc:	2300      	movs	r3, #0
     fbe:	68fa      	ldr	r2, [r7, #12]
     fc0:	4413      	add	r3, r2
     fc2:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
     fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     fc8:	4413      	add	r3, r2
     fca:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
     fcc:	2300      	movs	r3, #0
     fce:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
     fd0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
     fd4:	68fa      	ldr	r2, [r7, #12]
     fd6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
     fda:	f7ff fcb2 	bl	942 <uint64_to_hexstr>
     fde:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
     fe0:	68fb      	ldr	r3, [r7, #12]
     fe2:	2b00      	cmp	r3, #0
     fe4:	d003      	beq.n	fee <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
     fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     fe8:	68fa      	ldr	r2, [r7, #12]
     fea:	4413      	add	r3, r2
     fec:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
     fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     ff0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     ff2:	4413      	add	r3, r2
     ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
     ff6:	e12f      	b.n	1258 <am_util_stdio_vsprintf+0x5d8>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
     ff8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
     ffc:	2b00      	cmp	r3, #0
     ffe:	d008      	beq.n	1012 <am_util_stdio_vsprintf+0x392>
    1000:	687b      	ldr	r3, [r7, #4]
    1002:	3307      	adds	r3, #7
    1004:	f023 0307 	bic.w	r3, r3, #7
    1008:	f103 0208 	add.w	r2, r3, #8
    100c:	607a      	str	r2, [r7, #4]
    100e:	cb18      	ldmia	r3, {r3, r4}
    1010:	e005      	b.n	101e <am_util_stdio_vsprintf+0x39e>
                                      va_arg(pArgs, uint32_t);
    1012:	687b      	ldr	r3, [r7, #4]
    1014:	1d1a      	adds	r2, r3, #4
    1016:	607a      	str	r2, [r7, #4]
    1018:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    101a:	f04f 0400 	mov.w	r4, #0
    101e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    1022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1024:	2b00      	cmp	r3, #0
    1026:	d01e      	beq.n	1066 <am_util_stdio_vsprintf+0x3e6>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    1028:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    102c:	f7ff fb99 	bl	762 <ndigits_in_u64>
    1030:	4602      	mov	r2, r0
    1032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1034:	1a9b      	subs	r3, r3, r2
    1036:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    1038:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    103c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    103e:	4619      	mov	r1, r3
    1040:	68f8      	ldr	r0, [r7, #12]
    1042:	f7ff fcf9 	bl	a38 <padbuffer>
    1046:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    1048:	68fb      	ldr	r3, [r7, #12]
    104a:	2b00      	cmp	r3, #0
    104c:	d001      	beq.n	1052 <am_util_stdio_vsprintf+0x3d2>
    104e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1050:	e000      	b.n	1054 <am_util_stdio_vsprintf+0x3d4>
    1052:	2300      	movs	r3, #0
    1054:	68fa      	ldr	r2, [r7, #12]
    1056:	4413      	add	r3, r2
    1058:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    105a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    105c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    105e:	4413      	add	r3, r2
    1060:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1062:	2300      	movs	r3, #0
    1064:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    1066:	68fa      	ldr	r2, [r7, #12]
    1068:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    106c:	f7ff fc21 	bl	8b2 <uint64_to_str>
    1070:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    1072:	68fb      	ldr	r3, [r7, #12]
    1074:	2b00      	cmp	r3, #0
    1076:	d003      	beq.n	1080 <am_util_stdio_vsprintf+0x400>
                {
                    pcBuf += iVal;
    1078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    107a:	68fa      	ldr	r2, [r7, #12]
    107c:	4413      	add	r3, r2
    107e:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    1080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1082:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1084:	4413      	add	r3, r2
    1086:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1088:	e0e6      	b.n	1258 <am_util_stdio_vsprintf+0x5d8>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    108a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    108e:	2b00      	cmp	r3, #0
    1090:	d008      	beq.n	10a4 <am_util_stdio_vsprintf+0x424>
    1092:	687b      	ldr	r3, [r7, #4]
    1094:	3307      	adds	r3, #7
    1096:	f023 0307 	bic.w	r3, r3, #7
    109a:	f103 0208 	add.w	r2, r3, #8
    109e:	607a      	str	r2, [r7, #4]
    10a0:	cb18      	ldmia	r3, {r3, r4}
    10a2:	e005      	b.n	10b0 <am_util_stdio_vsprintf+0x430>
                                     va_arg(pArgs, int32_t);
    10a4:	687b      	ldr	r3, [r7, #4]
    10a6:	1d1a      	adds	r2, r3, #4
    10a8:	607a      	str	r2, [r7, #4]
    10aa:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    10ac:	ea4f 74e3 	mov.w	r4, r3, asr #31
    10b0:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    10b4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    10b8:	2b00      	cmp	r3, #0
    10ba:	f174 0300 	sbcs.w	r3, r4, #0
    10be:	da0a      	bge.n	10d6 <am_util_stdio_vsprintf+0x456>
                {
                    ui64Val = -i64Val;          // Get absolute value
    10c0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    10c4:	425b      	negs	r3, r3
    10c6:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    10ca:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    10ce:	2301      	movs	r3, #1
    10d0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    10d4:	e006      	b.n	10e4 <am_util_stdio_vsprintf+0x464>
                }
                else
                {
                    ui64Val = i64Val;
    10d6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    10da:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    10de:	2300      	movs	r3, #0
    10e0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    10e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10e6:	2b00      	cmp	r3, #0
    10e8:	d04a      	beq.n	1180 <am_util_stdio_vsprintf+0x500>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    10ea:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    10ee:	4618      	mov	r0, r3
    10f0:	4621      	mov	r1, r4
    10f2:	f7ff fb57 	bl	7a4 <ndigits_in_i64>
    10f6:	4602      	mov	r2, r0
    10f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10fa:	1a9b      	subs	r3, r3, r2
    10fc:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    10fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1102:	2b00      	cmp	r3, #0
    1104:	d011      	beq.n	112a <am_util_stdio_vsprintf+0x4aa>
                    {
                        --iWidth;
    1106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1108:	3b01      	subs	r3, #1
    110a:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    110c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1110:	2b30      	cmp	r3, #48	; 0x30
    1112:	d10a      	bne.n	112a <am_util_stdio_vsprintf+0x4aa>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    1114:	68fb      	ldr	r3, [r7, #12]
    1116:	2b00      	cmp	r3, #0
    1118:	d004      	beq.n	1124 <am_util_stdio_vsprintf+0x4a4>
                            {
                                *pcBuf++ = '-';
    111a:	68fb      	ldr	r3, [r7, #12]
    111c:	1c5a      	adds	r2, r3, #1
    111e:	60fa      	str	r2, [r7, #12]
    1120:	222d      	movs	r2, #45	; 0x2d
    1122:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    1124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1126:	3301      	adds	r3, #1
    1128:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    112a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    112e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1130:	4619      	mov	r1, r3
    1132:	68f8      	ldr	r0, [r7, #12]
    1134:	f7ff fc80 	bl	a38 <padbuffer>
    1138:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    113a:	68fb      	ldr	r3, [r7, #12]
    113c:	2b00      	cmp	r3, #0
    113e:	d001      	beq.n	1144 <am_util_stdio_vsprintf+0x4c4>
    1140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1142:	e000      	b.n	1146 <am_util_stdio_vsprintf+0x4c6>
    1144:	2300      	movs	r3, #0
    1146:	68fa      	ldr	r2, [r7, #12]
    1148:	4413      	add	r3, r2
    114a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    114c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    114e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1150:	4413      	add	r3, r2
    1152:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    1154:	2300      	movs	r3, #0
    1156:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    1158:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    115c:	2b00      	cmp	r3, #0
    115e:	d01e      	beq.n	119e <am_util_stdio_vsprintf+0x51e>
    1160:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1164:	2b20      	cmp	r3, #32
    1166:	d11a      	bne.n	119e <am_util_stdio_vsprintf+0x51e>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    1168:	68fb      	ldr	r3, [r7, #12]
    116a:	2b00      	cmp	r3, #0
    116c:	d004      	beq.n	1178 <am_util_stdio_vsprintf+0x4f8>
                        {
                            *pcBuf++ = '-';
    116e:	68fb      	ldr	r3, [r7, #12]
    1170:	1c5a      	adds	r2, r3, #1
    1172:	60fa      	str	r2, [r7, #12]
    1174:	222d      	movs	r2, #45	; 0x2d
    1176:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    1178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    117a:	3301      	adds	r3, #1
    117c:	63fb      	str	r3, [r7, #60]	; 0x3c
    117e:	e00e      	b.n	119e <am_util_stdio_vsprintf+0x51e>
                    }
                }
                else
                {
                    if ( bNeg )
    1180:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1184:	2b00      	cmp	r3, #0
    1186:	d00a      	beq.n	119e <am_util_stdio_vsprintf+0x51e>
                    {
                        if ( pcBuf )
    1188:	68fb      	ldr	r3, [r7, #12]
    118a:	2b00      	cmp	r3, #0
    118c:	d004      	beq.n	1198 <am_util_stdio_vsprintf+0x518>
                        {
                            *pcBuf++ = '-';
    118e:	68fb      	ldr	r3, [r7, #12]
    1190:	1c5a      	adds	r2, r3, #1
    1192:	60fa      	str	r2, [r7, #12]
    1194:	222d      	movs	r2, #45	; 0x2d
    1196:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    1198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    119a:	3301      	adds	r3, #1
    119c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    119e:	68fa      	ldr	r2, [r7, #12]
    11a0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    11a4:	f7ff fb85 	bl	8b2 <uint64_to_str>
    11a8:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    11aa:	68fb      	ldr	r3, [r7, #12]
    11ac:	2b00      	cmp	r3, #0
    11ae:	d003      	beq.n	11b8 <am_util_stdio_vsprintf+0x538>
                {
                    pcBuf += iVal;
    11b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11b2:	68fa      	ldr	r2, [r7, #12]
    11b4:	4413      	add	r3, r2
    11b6:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    11b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    11bc:	4413      	add	r3, r2
    11be:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    11c0:	e04a      	b.n	1258 <am_util_stdio_vsprintf+0x5d8>


            case 'f':
            case 'F':
                if ( pcBuf )
    11c2:	68fb      	ldr	r3, [r7, #12]
    11c4:	2b00      	cmp	r3, #0
    11c6:	d046      	beq.n	1256 <am_util_stdio_vsprintf+0x5d6>
                {
                    float fValue = va_arg(pArgs, double);
    11c8:	687b      	ldr	r3, [r7, #4]
    11ca:	3307      	adds	r3, #7
    11cc:	f023 0307 	bic.w	r3, r3, #7
    11d0:	f103 0208 	add.w	r2, r3, #8
    11d4:	607a      	str	r2, [r7, #4]
    11d6:	cb18      	ldmia	r3, {r3, r4}
    11d8:	4618      	mov	r0, r3
    11da:	4621      	mov	r1, r4
    11dc:	f7fe ff50 	bl	80 <__aeabi_d2f>
    11e0:	4603      	mov	r3, r0
    11e2:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	2214      	movs	r2, #20
    11e8:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    11ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    11ec:	68f9      	ldr	r1, [r7, #12]
    11ee:	6978      	ldr	r0, [r7, #20]
    11f0:	f7ff fc48 	bl	a84 <ftoa>
    11f4:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    11f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11f8:	2b00      	cmp	r3, #0
    11fa:	da14      	bge.n	1226 <am_util_stdio_vsprintf+0x5a6>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    11fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11fe:	f1b3 3fff 	cmp.w	r3, #4294967295
    1202:	d102      	bne.n	120a <am_util_stdio_vsprintf+0x58a>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    1204:	4b1e      	ldr	r3, [pc, #120]	; (1280 <am_util_stdio_vsprintf+0x600>)
    1206:	62bb      	str	r3, [r7, #40]	; 0x28
    1208:	e008      	b.n	121c <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    120a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    120c:	f113 0f02 	cmn.w	r3, #2
    1210:	d102      	bne.n	1218 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    1212:	4b1c      	ldr	r3, [pc, #112]	; (1284 <am_util_stdio_vsprintf+0x604>)
    1214:	62bb      	str	r3, [r7, #40]	; 0x28
    1216:	e001      	b.n	121c <am_util_stdio_vsprintf+0x59c>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    1218:	4b1b      	ldr	r3, [pc, #108]	; (1288 <am_util_stdio_vsprintf+0x608>)
    121a:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    121c:	68fb      	ldr	r3, [r7, #12]
    121e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1220:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    1222:	2303      	movs	r3, #3
    1224:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    1226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1228:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    122a:	4413      	add	r3, r2
    122c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    122e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1230:	68fa      	ldr	r2, [r7, #12]
    1232:	4413      	add	r3, r2
    1234:	60fb      	str	r3, [r7, #12]
                }
                break;
    1236:	e00e      	b.n	1256 <am_util_stdio_vsprintf+0x5d6>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    1238:	68fb      	ldr	r3, [r7, #12]
    123a:	2b00      	cmp	r3, #0
    123c:	d005      	beq.n	124a <am_util_stdio_vsprintf+0x5ca>
                {
                    *pcBuf++ = *pcFmt;
    123e:	68fb      	ldr	r3, [r7, #12]
    1240:	1c5a      	adds	r2, r3, #1
    1242:	60fa      	str	r2, [r7, #12]
    1244:	68ba      	ldr	r2, [r7, #8]
    1246:	7812      	ldrb	r2, [r2, #0]
    1248:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    124a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    124c:	3301      	adds	r3, #1
    124e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    1250:	e002      	b.n	1258 <am_util_stdio_vsprintf+0x5d8>
                break;
    1252:	bf00      	nop
    1254:	e000      	b.n	1258 <am_util_stdio_vsprintf+0x5d8>
                break;
    1256:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    1258:	68bb      	ldr	r3, [r7, #8]
    125a:	3301      	adds	r3, #1
    125c:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    125e:	68bb      	ldr	r3, [r7, #8]
    1260:	781b      	ldrb	r3, [r3, #0]
    1262:	2b00      	cmp	r3, #0
    1264:	f47f ad17 	bne.w	c96 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    1268:	68fb      	ldr	r3, [r7, #12]
    126a:	2b00      	cmp	r3, #0
    126c:	d002      	beq.n	1274 <am_util_stdio_vsprintf+0x5f4>
    {
        *pcBuf = 0x0;
    126e:	68fb      	ldr	r3, [r7, #12]
    1270:	2200      	movs	r2, #0
    1272:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    1274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1276:	4618      	mov	r0, r3
    1278:	3754      	adds	r7, #84	; 0x54
    127a:	46bd      	mov	sp, r7
    127c:	bd90      	pop	{r4, r7, pc}
    127e:	bf00      	nop
    1280:	00302e30 	.word	0x00302e30
    1284:	00232e23 	.word	0x00232e23
    1288:	003f2e3f 	.word	0x003f2e3f

0000128c <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    128c:	b40f      	push	{r0, r1, r2, r3}
    128e:	b580      	push	{r7, lr}
    1290:	b082      	sub	sp, #8
    1292:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    1294:	f107 0314 	add.w	r3, r7, #20
    1298:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    129a:	683a      	ldr	r2, [r7, #0]
    129c:	6939      	ldr	r1, [r7, #16]
    129e:	4808      	ldr	r0, [pc, #32]	; (12c0 <am_util_stdio_printf+0x34>)
    12a0:	f7ff fcee 	bl	c80 <am_util_stdio_vsprintf>
    12a4:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    12a6:	4b07      	ldr	r3, [pc, #28]	; (12c4 <am_util_stdio_printf+0x38>)
    12a8:	681b      	ldr	r3, [r3, #0]
    12aa:	4805      	ldr	r0, [pc, #20]	; (12c0 <am_util_stdio_printf+0x34>)
    12ac:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    12ae:	687b      	ldr	r3, [r7, #4]
}
    12b0:	4618      	mov	r0, r3
    12b2:	3708      	adds	r7, #8
    12b4:	46bd      	mov	sp, r7
    12b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    12ba:	b004      	add	sp, #16
    12bc:	4770      	bx	lr
    12be:	bf00      	nop
    12c0:	10001020 	.word	0x10001020
    12c4:	10001124 	.word	0x10001124

000012c8 <am_bsp_low_power_init>:
//! @return None.
//
//*****************************************************************************
void
am_bsp_low_power_init(void)
{
    12c8:	b508      	push	{r3, lr}
    //
    // Enable internal buck converters.
    //
    am_hal_mcuctrl_bucks_enable();
    12ca:	f000 f919 	bl	1500 <am_hal_mcuctrl_bucks_enable>

    //
    // Turn off the voltage comparator as this is enabled on reset.
    //
    am_hal_vcomp_disable();
    12ce:	f000 f9f1 	bl	16b4 <am_hal_vcomp_disable>

    //
    // Run the RTC off the LFRC.
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_LFRC);
    12d2:	2001      	movs	r0, #1
    12d4:	f000 f92a 	bl	152c <am_hal_rtc_osc_select>

    //
    // Stop the XTAL.
    //
    am_hal_clkgen_osc_stop(AM_HAL_CLKGEN_OSC_XT);
    12d8:	2001      	movs	r0, #1
    12da:	f000 f831 	bl	1340 <am_hal_clkgen_osc_stop>

    //
    // Disable the RTC.
    //
    am_hal_rtc_osc_disable();
    12de:	f000 f933 	bl	1548 <am_hal_rtc_osc_disable>

    //
    // Disable the bandgap.
    //
    am_hal_mcuctrl_bandgap_disable();
}
    12e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    am_hal_mcuctrl_bandgap_disable();
    12e6:	f000 b903 	b.w	14f0 <am_hal_mcuctrl_bandgap_disable>
    12ea:	bf00      	nop

000012ec <am_bsp_uart_string_print>:
//
//*****************************************************************************
void
am_bsp_uart_string_print(char *pcString)
{
    am_hal_uart_string_transmit_polled(0, pcString);
    12ec:	4601      	mov	r1, r0
    12ee:	2000      	movs	r0, #0
    12f0:	f000 b9cc 	b.w	168c <am_hal_uart_string_transmit_polled>

000012f4 <am_hal_clkgen_sysclk_select>:
am_hal_clkgen_sysclk_select(uint32_t ui32ClockSetting)
{
    //
    // Unlock the clock control register.
    //
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    12f4:	4b05      	ldr	r3, [pc, #20]	; (130c <am_hal_clkgen_sysclk_select+0x18>)

    //
    // Set the HFRC divisor to the user-selected value.
    //
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    12f6:	4906      	ldr	r1, [pc, #24]	; (1310 <am_hal_clkgen_sysclk_select+0x1c>)
{
    12f8:	b410      	push	{r4}

    //
    // Lock the clock configuration registers.
    //
    AM_REG(CLKGEN, CLKKEY) = 0;
    12fa:	2200      	movs	r2, #0
    AM_REG(CLKGEN, CLKKEY) = AM_REG_CLKGEN_CLKKEY_KEYVAL;
    12fc:	2447      	movs	r4, #71	; 0x47
    12fe:	601c      	str	r4, [r3, #0]
    AM_REG(CLKGEN, CCTRL) = ui32ClockSetting;
    1300:	6008      	str	r0, [r1, #0]
}
    1302:	f85d 4b04 	ldr.w	r4, [sp], #4
    AM_REG(CLKGEN, CLKKEY) = 0;
    1306:	601a      	str	r2, [r3, #0]
}
    1308:	4770      	bx	lr
    130a:	bf00      	nop
    130c:	40004014 	.word	0x40004014
    1310:	40004018 	.word	0x40004018

00001314 <am_hal_clkgen_sysclk_get>:
    uint32_t ui32ClockSetting;

    //
    // Read the value of the clock divider.
    //
    ui32ClockSetting = AM_BFR(CLKGEN, CCTRL, CORESEL);
    1314:	4b03      	ldr	r3, [pc, #12]	; (1324 <am_hal_clkgen_sysclk_get+0x10>)
    1316:	4a04      	ldr	r2, [pc, #16]	; (1328 <am_hal_clkgen_sysclk_get+0x14>)
    1318:	6818      	ldr	r0, [r3, #0]
    131a:	f000 0107 	and.w	r1, r0, #7
        case AM_HAL_CLKGEN_SYSCLK_3MHZ:
            return 3000000;
        default:
            return 0xFFFFFFFF;
    }
}
    131e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    1322:	4770      	bx	lr
    1324:	40004018 	.word	0x40004018
    1328:	00001708 	.word	0x00001708

0000132c <am_hal_clkgen_osc_start>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_start(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    132c:	0783      	lsls	r3, r0, #30
    132e:	d004      	beq.n	133a <am_hal_clkgen_osc_start+0xe>
    {
        //
        // Start the oscillator(s).
        // Note that these bits are cleared in order to enable the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) &= ~ui32OscFlags;
    1330:	4a02      	ldr	r2, [pc, #8]	; (133c <am_hal_clkgen_osc_start+0x10>)
    1332:	6813      	ldr	r3, [r2, #0]
    1334:	ea23 0000 	bic.w	r0, r3, r0
    1338:	6010      	str	r0, [r2, #0]
    133a:	4770      	bx	lr
    133c:	4000400c 	.word	0x4000400c

00001340 <am_hal_clkgen_osc_stop>:
//
//*****************************************************************************
void
am_hal_clkgen_osc_stop(uint32_t ui32OscFlags)
{
    if ( ui32OscFlags & (AM_HAL_CLKGEN_OSC_LFRC | AM_HAL_CLKGEN_OSC_XT) )
    1340:	0783      	lsls	r3, r0, #30
    1342:	d003      	beq.n	134c <am_hal_clkgen_osc_stop+0xc>
    {
        //
        // Stop the oscillator(s).
        // Note that these bits are set in order to stop the oscillator.
        //
        AM_REG(CLKGEN, OCTRL) |= ui32OscFlags;
    1344:	4b02      	ldr	r3, [pc, #8]	; (1350 <am_hal_clkgen_osc_stop+0x10>)
    1346:	681a      	ldr	r2, [r3, #0]
    1348:	4310      	orrs	r0, r2
    134a:	6018      	str	r0, [r3, #0]
    134c:	4770      	bx	lr
    134e:	bf00      	nop
    1350:	4000400c 	.word	0x4000400c

00001354 <am_hal_ctimer_config>:
                     (psConfig->ui32TimerBConfig << 16));

    //
    // OR in the Link bit if the timers need to be linked.
    //
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    1354:	680b      	ldr	r3, [r1, #0]
    ui32ConfigVal = (psConfig->ui32TimerAConfig |
    1356:	684a      	ldr	r2, [r1, #4]
{
    1358:	b410      	push	{r4}
                     (psConfig->ui32TimerBConfig << 16));
    135a:	688c      	ldr	r4, [r1, #8]

    //
    // Find the correct register to write.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    135c:	4907      	ldr	r1, [pc, #28]	; (137c <am_hal_ctimer_config+0x28>)
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    135e:	2b00      	cmp	r3, #0
    ui32ConfigVal = (psConfig->ui32TimerAConfig |
    1360:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
                                  (ui32TimerNumber * TIMER_OFFSET));
    1364:	ea4f 1000 	mov.w	r0, r0, lsl #4
    ui32ConfigVal |= psConfig->ui32Link ? AM_HAL_CTIMER_LINK : 0;
    1368:	bf14      	ite	ne
    136a:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
    136e:	2300      	moveq	r3, #0
    1370:	4323      	orrs	r3, r4

    //
    // Write our configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    1372:	5043      	str	r3, [r0, r1]
}
    1374:	f85d 4b04 	ldr.w	r4, [sp], #4
    1378:	4770      	bx	lr
    137a:	bf00      	nop
    137c:	4000800c 	.word	0x4000800c

00001380 <am_hal_ctimer_start>:

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    1380:	0100      	lsls	r0, r0, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    1382:	4a07      	ldr	r2, [pc, #28]	; (13a0 <am_hal_ctimer_start+0x20>)

    //
    // Read the current value.
    //
    ui32ConfigVal = *pui32ConfigReg;
    1384:	5883      	ldr	r3, [r0, r2]
{
    1386:	b410      	push	{r4}

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0CLR_M |
    1388:	f001 2408 	and.w	r4, r1, #134219776	; 0x8000800
    138c:	ea23 0304 	bic.w	r3, r3, r4
                                           AM_REG_CTIMER_CTRL0_TMRB0CLR_M));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (AM_REG_CTIMER_CTRL0_TMRA0EN_M |
    1390:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    1394:	4319      	orrs	r1, r3
                                          AM_REG_CTIMER_CTRL0_TMRB0EN_M));

    //
    // Write the value back to the register.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    1396:	5081      	str	r1, [r0, r2]
}
    1398:	f85d 4b04 	ldr.w	r4, [sp], #4
    139c:	4770      	bx	lr
    139e:	bf00      	nop
    13a0:	4000800c 	.word	0x4000800c

000013a4 <am_hal_ctimer_clear>:

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                  (ui32TimerNumber * TIMER_OFFSET));
    13a4:	0100      	lsls	r0, r0, #4
    pui32ConfigReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    13a6:	4b03      	ldr	r3, [pc, #12]	; (13b4 <am_hal_ctimer_clear+0x10>)

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    13a8:	58c2      	ldr	r2, [r0, r3]
    13aa:	f001 2108 	and.w	r1, r1, #134219776	; 0x8000800
    13ae:	4311      	orrs	r1, r2
    13b0:	50c1      	str	r1, [r0, r3]
    13b2:	4770      	bx	lr
    13b4:	4000800c 	.word	0x4000800c

000013b8 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    13b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
                                   (ui32TimerNumber * TIMER_OFFSET));
    13ba:	0100      	lsls	r0, r0, #4
    pui32ControlReg = (uint32_t *)(AM_REG_CTIMERn(0) + AM_REG_CTIMER_CTRL0_O +
    13bc:	4c19      	ldr	r4, [pc, #100]	; (1424 <am_hal_ctimer_period_set+0x6c>)
    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    13be:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    ui32Mode = *pui32ControlReg;
    13c2:	5905      	ldr	r5, [r0, r4]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    13c4:	d018      	beq.n	13f8 <am_hal_ctimer_period_set+0x40>

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    13c6:	f405 76c0 	and.w	r6, r5, #384	; 0x180
    13ca:	2e80      	cmp	r6, #128	; 0x80
    13cc:	d019      	beq.n	1402 <am_hal_ctimer_period_set+0x4a>
    13ce:	2500      	movs	r5, #0
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    13d0:	462c      	mov	r4, r5
    pui32CompareRegA = (uint32_t *)(AM_REG_CTIMERn(0) +
                                    AM_REG_CTIMER_CMPRA0_O +
                                    (ui32TimerNumber * TIMER_OFFSET));

    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
                                    AM_REG_CTIMER_CMPRB0_O +
    13d2:	4e15      	ldr	r6, [pc, #84]	; (1428 <am_hal_ctimer_period_set+0x70>)
                                    AM_REG_CTIMER_CMPRA0_O +
    13d4:	4f15      	ldr	r7, [pc, #84]	; (142c <am_hal_ctimer_period_set+0x74>)

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    13d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    13da:	4299      	cmp	r1, r3
                                    AM_REG_CTIMER_CMPRB0_O +
    13dc:	eb00 0e06 	add.w	lr, r0, r6
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    13e0:	d01c      	beq.n	141c <am_hal_ctimer_period_set+0x64>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    13e2:	4b13      	ldr	r3, [pc, #76]	; (1430 <am_hal_ctimer_period_set+0x78>)
    13e4:	4299      	cmp	r1, r3
    13e6:	d014      	beq.n	1412 <am_hal_ctimer_period_set+0x5a>
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    13e8:	b291      	uxth	r1, r2
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1));

        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
                             AM_REG_CTIMER_CMPRA0_CMPR1A0(ui32Comp1 >> 16));
    13ea:	401c      	ands	r4, r3
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    13ec:	ea44 4212 	orr.w	r2, r4, r2, lsr #16
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    13f0:	430d      	orrs	r5, r1
    13f2:	51c5      	str	r5, [r0, r7]
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0 >> 16) |
    13f4:	5182      	str	r2, [r0, r6]
    }
}
    13f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32Mode = ui32Mode >> 16;
    13f8:	0c2f      	lsrs	r7, r5, #16
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    13fa:	f407 75c0 	and.w	r5, r7, #384	; 0x180
    13fe:	2d80      	cmp	r5, #128	; 0x80
    1400:	d103      	bne.n	140a <am_hal_ctimer_period_set+0x52>
    1402:	0415      	lsls	r5, r2, #16
        ui32Comp1 = ui32Period;
    1404:	4614      	mov	r4, r2
        ui32Comp0 = ui32Period - ui32OnTime;
    1406:	1ad2      	subs	r2, r2, r3
        ui32Comp1 = ui32Period;
    1408:	e7e3      	b.n	13d2 <am_hal_ctimer_period_set+0x1a>
                                    AM_REG_CTIMER_CMPRB0_O +
    140a:	f8df e01c 	ldr.w	lr, [pc, #28]	; 1428 <am_hal_ctimer_period_set+0x70>
    pui32CompareRegB = (uint32_t *)(AM_REG_CTIMERn(0) +
    140e:	2500      	movs	r5, #0
                                    AM_REG_CTIMER_CMPRB0_O +
    1410:	4486      	add	lr, r0
        *pui32CompareRegB = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    1412:	b290      	uxth	r0, r2
    1414:	4305      	orrs	r5, r0
    1416:	f8ce 5000 	str.w	r5, [lr]
    141a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *pui32CompareRegA = (AM_REG_CTIMER_CMPRA0_CMPR0A0(ui32Comp0) |
    141c:	b294      	uxth	r4, r2
    141e:	4325      	orrs	r5, r4
    1420:	51c5      	str	r5, [r0, r7]
    1422:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1424:	4000800c 	.word	0x4000800c
    1428:	40008008 	.word	0x40008008
    142c:	40008004 	.word	0x40008004
    1430:	ffff0000 	.word	0xffff0000

00001434 <am_hal_ctimer_int_enable>:
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTEN) |= ui32Interrupt;
    1434:	4a02      	ldr	r2, [pc, #8]	; (1440 <am_hal_ctimer_int_enable+0xc>)
    1436:	6813      	ldr	r3, [r2, #0]
    1438:	4318      	orrs	r0, r3
    143a:	6010      	str	r0, [r2, #0]
    143c:	4770      	bx	lr
    143e:	bf00      	nop
    1440:	40008200 	.word	0x40008200

00001444 <am_hal_ctimer_int_clear>:
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    AM_REGn(CTIMER, 0, INTCLR) = ui32Interrupt;
    1444:	4b01      	ldr	r3, [pc, #4]	; (144c <am_hal_ctimer_int_clear+0x8>)
    1446:	6018      	str	r0, [r3, #0]
    1448:	4770      	bx	lr
    144a:	bf00      	nop
    144c:	40008208 	.word	0x40008208

00001450 <am_hal_interrupt_enable>:
am_hal_interrupt_enable(uint32_t ui32Interrupt)
{
    //
    // Check to see what type of interrupt this is.
    //
    if ( ui32Interrupt > 15 )
    1450:	280f      	cmp	r0, #15
    1452:	d80b      	bhi.n	146c <am_hal_interrupt_enable+0x1c>
    {
        //
        // If this is an ARM internal interrupt number, route it to the
        // appropriate enable register.
        //
        switch(ui32Interrupt)
    1454:	2805      	cmp	r0, #5
    1456:	d013      	beq.n	1480 <am_hal_interrupt_enable+0x30>
    1458:	2806      	cmp	r0, #6
    145a:	d017      	beq.n	148c <am_hal_interrupt_enable+0x3c>
    145c:	2804      	cmp	r0, #4
    145e:	d104      	bne.n	146a <am_hal_interrupt_enable+0x1a>
            case AM_HAL_INTERRUPT_USAGEFAULT:
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
            break;

            case AM_HAL_INTERRUPT_MPUFAULT:
                AM_BFW(SYSCTRL, SHCSR, MEMFAULTENA, 1);
    1460:	4a0d      	ldr	r2, [pc, #52]	; (1498 <am_hal_interrupt_enable+0x48>)
    1462:	6813      	ldr	r3, [r2, #0]
    1464:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
    1468:	6010      	str	r0, [r2, #0]
    146a:	4770      	bx	lr
        AM_REG(NVIC, ISER0) = 0x1 << ((ui32Interrupt - 16) & 0x1F);
    146c:	f1a0 0310 	sub.w	r3, r0, #16
    1470:	f003 0c1f 	and.w	ip, r3, #31
    1474:	2001      	movs	r0, #1
    1476:	4909      	ldr	r1, [pc, #36]	; (149c <am_hal_interrupt_enable+0x4c>)
    1478:	fa00 f20c 	lsl.w	r2, r0, ip
    147c:	600a      	str	r2, [r1, #0]
    147e:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, BUSFAULTENA, 1);
    1480:	4805      	ldr	r0, [pc, #20]	; (1498 <am_hal_interrupt_enable+0x48>)
    1482:	6801      	ldr	r1, [r0, #0]
    1484:	f441 3200 	orr.w	r2, r1, #131072	; 0x20000
    1488:	6002      	str	r2, [r0, #0]
            break;
    148a:	4770      	bx	lr
                AM_BFW(SYSCTRL, SHCSR, USAGEFAULTENA, 1);
    148c:	4902      	ldr	r1, [pc, #8]	; (1498 <am_hal_interrupt_enable+0x48>)
    148e:	680a      	ldr	r2, [r1, #0]
    1490:	f442 2380 	orr.w	r3, r2, #262144	; 0x40000
    1494:	600b      	str	r3, [r1, #0]
            break;
    1496:	4770      	bx	lr
    1498:	e000ed24 	.word	0xe000ed24
    149c:	e000e100 	.word	0xe000e100

000014a0 <am_hal_interrupt_master_enable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
    14a0:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
    14a4:	b662      	cpsie	i
    __asm("    bx lr");
    14a6:	4770      	bx	lr

000014a8 <am_hal_mcuctrl_fault_status>:
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    14a8:	490d      	ldr	r1, [pc, #52]	; (14e0 <am_hal_mcuctrl_fault_status+0x38>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    14aa:	4b0e      	ldr	r3, [pc, #56]	; (14e4 <am_hal_mcuctrl_fault_status+0x3c>)

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    14ac:	4a0e      	ldr	r2, [pc, #56]	; (14e8 <am_hal_mcuctrl_fault_status+0x40>)
    ui32FaultStat = AM_REG(MCUCTRL, FAULTSTATUS);
    14ae:	681b      	ldr	r3, [r3, #0]
{
    14b0:	b470      	push	{r4, r5, r6}
    psFault->ui32DCODE = AM_REG(MCUCTRL, DCODEFAULTADDR);
    14b2:	680d      	ldr	r5, [r1, #0]
    14b4:	60c5      	str	r5, [r0, #12]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    14b6:	6815      	ldr	r5, [r2, #0]
    14b8:	6841      	ldr	r1, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    14ba:	4c0c      	ldr	r4, [pc, #48]	; (14ec <am_hal_mcuctrl_fault_status+0x44>)
    14bc:	6942      	ldr	r2, [r0, #20]
    psFault->ui32ICODE |= AM_REG(MCUCTRL, ICODEFAULTADDR);
    14be:	4329      	orrs	r1, r5
    14c0:	6041      	str	r1, [r0, #4]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    14c2:	6824      	ldr	r4, [r4, #0]
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    14c4:	f003 0601 	and.w	r6, r3, #1
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    14c8:	4322      	orrs	r2, r4
    psFault->bICODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_ICODE_M);
    14ca:	7006      	strb	r6, [r0, #0]
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    14cc:	f3c3 0640 	ubfx	r6, r3, #1, #1
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    14d0:	f3c3 0380 	ubfx	r3, r3, #2, #1
    psFault->bDCODE = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_DCODE_M);
    14d4:	7206      	strb	r6, [r0, #8]
    psFault->bSYS = (ui32FaultStat & AM_REG_MCUCTRL_FAULTSTATUS_SYS_M);
    14d6:	7403      	strb	r3, [r0, #16]
    psFault->ui32SYS |= AM_REG(MCUCTRL, SYSFAULTADDR);
    14d8:	6142      	str	r2, [r0, #20]
}
    14da:	bc70      	pop	{r4, r5, r6}
    14dc:	4770      	bx	lr
    14de:	bf00      	nop
    14e0:	400201c4 	.word	0x400201c4
    14e4:	400201cc 	.word	0x400201cc
    14e8:	400201c0 	.word	0x400201c0
    14ec:	400201c8 	.word	0x400201c8

000014f0 <am_hal_mcuctrl_bandgap_disable>:
am_hal_mcuctrl_bandgap_disable(void)
{
    //
    // Disable the Bandgap in the MCUCTRL.
    //
    AM_REG(MCUCTRL, BANDGAPEN) = ~AM_REG_MCUCTRL_BANDGAPEN_BGPEN_M;
    14f0:	4b02      	ldr	r3, [pc, #8]	; (14fc <am_hal_mcuctrl_bandgap_disable+0xc>)
    14f2:	f06f 0201 	mvn.w	r2, #1
    14f6:	601a      	str	r2, [r3, #0]
    14f8:	4770      	bx	lr
    14fa:	bf00      	nop
    14fc:	400200fc 	.word	0x400200fc

00001500 <am_hal_mcuctrl_bucks_enable>:
am_hal_mcuctrl_bucks_enable(void)
{
    //
    // Enable the core buck converter in the MCUCTRL.
    //
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1500:	4b08      	ldr	r3, [pc, #32]	; (1524 <am_hal_mcuctrl_bucks_enable+0x24>)
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);

    //
    // Poll until core buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    1502:	4a09      	ldr	r2, [pc, #36]	; (1528 <am_hal_mcuctrl_bucks_enable+0x28>)
    AM_BFW(MCUCTRL, SUPPLYSRC, COREBUCKEN, 1);
    1504:	6819      	ldr	r1, [r3, #0]
    1506:	f041 0002 	orr.w	r0, r1, #2
    150a:	6018      	str	r0, [r3, #0]
    AM_BFW(MCUCTRL, SUPPLYSRC, MEMBUCKEN, 1);
    150c:	6819      	ldr	r1, [r3, #0]
    150e:	f041 0001 	orr.w	r0, r1, #1
    1512:	6018      	str	r0, [r3, #0]
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, COREBUCKON) );
    1514:	6813      	ldr	r3, [r2, #0]
    1516:	0799      	lsls	r1, r3, #30
    1518:	d5fc      	bpl.n	1514 <am_hal_mcuctrl_bucks_enable+0x14>

    //
    // Poll until SRAM buck is enabled.
    //
    while( !AM_BFR(MCUCTRL, SUPPLYSTATUS, MEMBUCKON) );
    151a:	4a03      	ldr	r2, [pc, #12]	; (1528 <am_hal_mcuctrl_bucks_enable+0x28>)
    151c:	6811      	ldr	r1, [r2, #0]
    151e:	07cb      	lsls	r3, r1, #31
    1520:	d5fc      	bpl.n	151c <am_hal_mcuctrl_bucks_enable+0x1c>
}
    1522:	4770      	bx	lr
    1524:	40020010 	.word	0x40020010
    1528:	40020014 	.word	0x40020014

0000152c <am_hal_rtc_osc_select>:
    // Set XT if flag is set.
    // Otherwise configure for LFRC.
    //
    if (ui32OSC)
    {
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    152c:	4a05      	ldr	r2, [pc, #20]	; (1544 <am_hal_rtc_osc_select+0x18>)
    152e:	6813      	ldr	r3, [r2, #0]
    if (ui32OSC)
    1530:	b918      	cbnz	r0, 153a <am_hal_rtc_osc_select+0xe>
    }
    else
    {
        AM_REG(CLKGEN, OCTRL) &= ~AM_REG_CLKGEN_OCTRL_OSEL_M;
    1532:	f023 0080 	bic.w	r0, r3, #128	; 0x80
    1536:	6010      	str	r0, [r2, #0]
    1538:	4770      	bx	lr
        AM_REG(CLKGEN, OCTRL) |= AM_REG_CLKGEN_OCTRL_OSEL_M;
    153a:	f043 0180 	orr.w	r1, r3, #128	; 0x80
    153e:	6011      	str	r1, [r2, #0]
    1540:	4770      	bx	lr
    1542:	bf00      	nop
    1544:	4000400c 	.word	0x4000400c

00001548 <am_hal_rtc_osc_disable>:
am_hal_rtc_osc_disable(void)
{
    //
    // Stop the RTC Oscillator.
    //
    AM_BFW(RTC, RTCCTL, RSTOP, 1);
    1548:	4a02      	ldr	r2, [pc, #8]	; (1554 <am_hal_rtc_osc_disable+0xc>)
    154a:	6813      	ldr	r3, [r2, #0]
    154c:	f043 0010 	orr.w	r0, r3, #16
    1550:	6010      	str	r0, [r2, #0]
    1552:	4770      	bx	lr
    1554:	40004050 	.word	0x40004050

00001558 <am_hal_sysctrl_sleep>:
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    {
        //
        // Prepare the core for deepsleep (write 1 to the DEEPSLEEP bit).
        //
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1558:	4a08      	ldr	r2, [pc, #32]	; (157c <am_hal_sysctrl_sleep+0x24>)
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    155a:	b118      	cbz	r0, 1564 <am_hal_sysctrl_sleep+0xc>
        (AM_BFM(MCUCTRL, TPIUCTRL, ENABLE) == AM_REG_MCUCTRL_TPIUCTRL_ENABLE_DIS))
    155c:	4b08      	ldr	r3, [pc, #32]	; (1580 <am_hal_sysctrl_sleep+0x28>)
    155e:	6818      	ldr	r0, [r3, #0]
    if ((bSleepDeep == AM_HAL_SYSCTRL_SLEEP_DEEP) &&
    1560:	07c3      	lsls	r3, r0, #31
    1562:	d505      	bpl.n	1570 <am_hal_sysctrl_sleep+0x18>
    }
    else
    {
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 0);
    1564:	6811      	ldr	r1, [r2, #0]
    1566:	f021 0304 	bic.w	r3, r1, #4
    156a:	6013      	str	r3, [r2, #0]
    }

    //
    // Go to sleep.
    //
    AM_ASM_WFI;
    156c:	bf30      	wfi
    156e:	4770      	bx	lr
        AM_BFW(SYSCTRL, SCR, SLEEPDEEP, 1);
    1570:	6810      	ldr	r0, [r2, #0]
    1572:	f040 0104 	orr.w	r1, r0, #4
    1576:	6011      	str	r1, [r2, #0]
    AM_ASM_WFI;
    1578:	bf30      	wfi
    157a:	4770      	bx	lr
    157c:	e000ed10 	.word	0xe000ed10
    1580:	40020250 	.word	0x40020250

00001584 <am_hal_uart_config>:
//
//*****************************************************************************
void
am_hal_uart_config(uint32_t ui32Module, am_hal_uart_config_t *psConfig)

{
    1584:	b570      	push	{r4, r5, r6, lr}
    1586:	460c      	mov	r4, r1
    uint32_t ui32ConfigVal = 0;

    //
    // Configure the Baudrate.
    //
    config_baudrate(0, psConfig->ui32BaudRate, am_hal_clkgen_sysclk_get());
    1588:	680d      	ldr	r5, [r1, #0]
    158a:	f7ff fec3 	bl	1314 <am_hal_clkgen_sysclk_get>
    ui32BaudClk = BAUDCLK * ui32Baudrate;
    158e:	0129      	lsls	r1, r5, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    1590:	fbb0 f2f1 	udiv	r2, r0, r1
    if ( ui32IntegerDivisor == 0 )
    1594:	b30a      	cbz	r2, 15da <am_hal_uart_config+0x56>
    AM_REGn(UART, 0, IBRD) = ui32IntegerDivisor;
    1596:	4d11      	ldr	r5, [pc, #68]	; (15dc <am_hal_uart_config+0x58>)
    AM_REGn(UART, 0, FBRD) = ui32FractionDivisor;
    1598:	4e11      	ldr	r6, [pc, #68]	; (15e0 <am_hal_uart_config+0x5c>)
    AM_REGn(UART, 0, IBRD) = ui32IntegerDivisor;
    159a:	602a      	str	r2, [r5, #0]
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    159c:	0183      	lsls	r3, r0, #6
    159e:	fbb3 f0f1 	udiv	r0, r3, r1
    15a2:	eba0 1382 	sub.w	r3, r0, r2, lsl #6
    AM_REGn(UART, 0, IBRD) = ui32IntegerDivisor;
    15a6:	602a      	str	r2, [r5, #0]
    ui32ConfigVal |= psConfig->ui32Parity;

    //
    // Write config to Line control register.
    //
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    15a8:	490e      	ldr	r1, [pc, #56]	; (15e4 <am_hal_uart_config+0x60>)
    AM_REGn(UART, 0, FBRD) = ui32FractionDivisor;
    15aa:	6033      	str	r3, [r6, #0]
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    15ac:	68e6      	ldr	r6, [r4, #12]
    ui32ConfigVal |= psConfig->ui32DataBits;
    15ae:	6863      	ldr	r3, [r4, #4]
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    15b0:	7a25      	ldrb	r5, [r4, #8]
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    15b2:	6808      	ldr	r0, [r1, #0]

    //
    // Write the flow control settings to the control register.
    //
    AM_REGn(UART, 0, CR) |= psConfig->ui32FlowCtrl;
    15b4:	4a0c      	ldr	r2, [pc, #48]	; (15e8 <am_hal_uart_config+0x64>)
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    15b6:	4333      	orrs	r3, r6
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    15b8:	2d00      	cmp	r5, #0
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    15ba:	ea43 0300 	orr.w	r3, r3, r0
    ui32ConfigVal |= psConfig->bTwoStopBits ? AM_REG_UART_LCRH_STP2_M : 0;
    15be:	bf14      	ite	ne
    15c0:	2008      	movne	r0, #8
    15c2:	2000      	moveq	r0, #0
    AM_REGn(UART, 0, LCRH) |= ui32ConfigVal;
    15c4:	4303      	orrs	r3, r0
    15c6:	600b      	str	r3, [r1, #0]
    AM_REGn(UART, 0, CR) |= psConfig->ui32FlowCtrl;
    15c8:	6811      	ldr	r1, [r2, #0]
    15ca:	6924      	ldr	r4, [r4, #16]
    15cc:	4321      	orrs	r1, r4
    15ce:	6011      	str	r1, [r2, #0]

    //
    // Set the clock select field for 24MHz from the HFRC
    //
    AM_REGn(UART, 0, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    15d0:	6813      	ldr	r3, [r2, #0]
    15d2:	f043 0610 	orr.w	r6, r3, #16
    15d6:	6016      	str	r6, [r2, #0]
    15d8:	bd70      	pop	{r4, r5, r6, pc}
    15da:	e7fe      	b.n	15da <am_hal_uart_config+0x56>
    15dc:	4001c024 	.word	0x4001c024
    15e0:	4001c028 	.word	0x4001c028
    15e4:	4001c02c 	.word	0x4001c02c
    15e8:	4001c030 	.word	0x4001c030

000015ec <am_hal_uart_int_clear>:
am_hal_uart_int_clear(uint32_t ui32Module, uint32_t ui32Interrupt)
{
    //
    // Clear the bits.
    //
    AM_REGn(UART, 0, IEC) = ui32Interrupt;
    15ec:	4b01      	ldr	r3, [pc, #4]	; (15f4 <am_hal_uart_int_clear+0x8>)
    15ee:	6019      	str	r1, [r3, #0]
    15f0:	4770      	bx	lr
    15f2:	bf00      	nop
    15f4:	4001c044 	.word	0x4001c044

000015f8 <am_hal_uart_enable>:
am_hal_uart_enable(uint32_t ui32Module)
{
    //
    // Enable the UART, RX, and TX.
    //
    AM_REGn(UART, 0, CR) |= (AM_REG_UART_CR_UARTEN_M   |
    15f8:	4a03      	ldr	r2, [pc, #12]	; (1608 <am_hal_uart_enable+0x10>)
    15fa:	6813      	ldr	r3, [r2, #0]
    15fc:	f443 7040 	orr.w	r0, r3, #768	; 0x300
    1600:	f040 0101 	orr.w	r1, r0, #1
    1604:	6011      	str	r1, [r2, #0]
    1606:	4770      	bx	lr
    1608:	4001c030 	.word	0x4001c030

0000160c <am_hal_uart_disable>:
am_hal_uart_disable(uint32_t ui32Module)
{
    //
    // Disable the UART.
    //
    AM_REGn(UART, 0, CR) &= ~(AM_REG_UART_CR_UARTEN_M  |
    160c:	4a03      	ldr	r2, [pc, #12]	; (161c <am_hal_uart_disable+0x10>)
    160e:	6813      	ldr	r3, [r2, #0]
    1610:	f423 7040 	bic.w	r0, r3, #768	; 0x300
    1614:	f020 0101 	bic.w	r1, r0, #1
    1618:	6011      	str	r1, [r2, #0]
    161a:	4770      	bx	lr
    161c:	4001c030 	.word	0x4001c030

00001620 <am_hal_uart_clock_enable>:
am_hal_uart_clock_enable(uint32_t ui32Module)
{
    //
    // Enable the UART clock in the MCUCTRL module.
    //
    AM_REGn(CLKGEN, 0, UARTEN) |= AM_REG_CLKGEN_UARTEN_UARTEN_M;
    1620:	4907      	ldr	r1, [pc, #28]	; (1640 <am_hal_uart_clock_enable+0x20>)

    //
    // Enable the UART clock.
    //
    AM_REGn(UART, 0, CR) |= AM_REG_UART_CR_CLKEN_M;
    1622:	4b08      	ldr	r3, [pc, #32]	; (1644 <am_hal_uart_clock_enable+0x24>)
    AM_REGn(CLKGEN, 0, UARTEN) |= AM_REG_CLKGEN_UARTEN_UARTEN_M;
    1624:	680a      	ldr	r2, [r1, #0]
    1626:	f042 0001 	orr.w	r0, r2, #1
    162a:	6008      	str	r0, [r1, #0]
    AM_REGn(UART, 0, CR) |= AM_REG_UART_CR_CLKEN_M;
    162c:	6819      	ldr	r1, [r3, #0]
    162e:	f041 0208 	orr.w	r2, r1, #8
    1632:	601a      	str	r2, [r3, #0]

    //
    // Select default UART clock source
    //
    AM_REGn(UART, 0, CR) |= AM_REG_UART_CR_CLKSEL_24MHZ;
    1634:	6818      	ldr	r0, [r3, #0]
    1636:	f040 0110 	orr.w	r1, r0, #16
    163a:	6019      	str	r1, [r3, #0]
    163c:	4770      	bx	lr
    163e:	bf00      	nop
    1640:	4000402c 	.word	0x4000402c
    1644:	4001c030 	.word	0x4001c030

00001648 <am_hal_uart_clock_disable>:
am_hal_uart_clock_disable(uint32_t ui32Module)
{
    //
    // Disable the UART clock.
    //
    AM_REGn(UART, 0, CR) &= ~AM_REG_UART_CR_CLKEN_M;
    1648:	4905      	ldr	r1, [pc, #20]	; (1660 <am_hal_uart_clock_disable+0x18>)

    //
    // Disable the UART clock in the CLKGEN module.
    //
    AM_REGn(CLKGEN, 0, UARTEN) &= ~AM_REG_CLKGEN_UARTEN_UARTEN_M;
    164a:	4a06      	ldr	r2, [pc, #24]	; (1664 <am_hal_uart_clock_disable+0x1c>)
    AM_REGn(UART, 0, CR) &= ~AM_REG_UART_CR_CLKEN_M;
    164c:	680b      	ldr	r3, [r1, #0]
    164e:	f023 0008 	bic.w	r0, r3, #8
    1652:	6008      	str	r0, [r1, #0]
    AM_REGn(CLKGEN, 0, UARTEN) &= ~AM_REG_CLKGEN_UARTEN_UARTEN_M;
    1654:	6811      	ldr	r1, [r2, #0]
    1656:	f021 0301 	bic.w	r3, r1, #1
    165a:	6013      	str	r3, [r2, #0]
    165c:	4770      	bx	lr
    165e:	bf00      	nop
    1660:	4001c030 	.word	0x4001c030
    1664:	4000402c 	.word	0x4000402c

00001668 <am_hal_uart_fifo_config>:
am_hal_uart_fifo_config(uint32_t ui32Module, uint32_t ui32LvlCfg)
{
    //
    // Enable the use of FIFOs.
    //
    AM_REGn(UART, 0, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    1668:	4a03      	ldr	r2, [pc, #12]	; (1678 <am_hal_uart_fifo_config+0x10>)

    //
    // Write the FIFO level register.
    //
    AM_REGn(UART, 0, IFLS) = ui32LvlCfg;
    166a:	4804      	ldr	r0, [pc, #16]	; (167c <am_hal_uart_fifo_config+0x14>)
    AM_REGn(UART, 0, LCRH) |= AM_REG_UART_LCRH_FEN_M;
    166c:	6813      	ldr	r3, [r2, #0]
    166e:	f043 0310 	orr.w	r3, r3, #16
    1672:	6013      	str	r3, [r2, #0]
    AM_REGn(UART, 0, IFLS) = ui32LvlCfg;
    1674:	6001      	str	r1, [r0, #0]
    1676:	4770      	bx	lr
    1678:	4001c02c 	.word	0x4001c02c
    167c:	4001c034 	.word	0x4001c034

00001680 <am_hal_uart_flags_get>:
am_hal_uart_flags_get(uint32_t ui32Module)
{
    //
    // Read and return the Flags.
    //
    return AM_REGn(UART, 0, FR);
    1680:	4b01      	ldr	r3, [pc, #4]	; (1688 <am_hal_uart_flags_get+0x8>)
    1682:	6818      	ldr	r0, [r3, #0]
}
    1684:	4770      	bx	lr
    1686:	bf00      	nop
    1688:	4001c018 	.word	0x4001c018

0000168c <am_hal_uart_string_transmit_polled>:
//
//*****************************************************************************
void
am_hal_uart_string_transmit_polled(uint32_t ui32Module, char *pcString)
{
    while ( *pcString )
    168c:	7808      	ldrb	r0, [r1, #0]
    168e:	b160      	cbz	r0, 16aa <am_hal_uart_string_transmit_polled+0x1e>
{
    1690:	b410      	push	{r4}
    {
        //
        // Wait for space, i.e.  TX FIFO EMPTY.
        //
        while ( AM_BFRn(UART, 0, FR, TXFF) );
    1692:	4a06      	ldr	r2, [pc, #24]	; (16ac <am_hal_uart_string_transmit_polled+0x20>)

        //
        // Write the char.
        //
        AM_REGn(UART, 0, DR) = *pcString++;
    1694:	4c06      	ldr	r4, [pc, #24]	; (16b0 <am_hal_uart_string_transmit_polled+0x24>)
        while ( AM_BFRn(UART, 0, FR, TXFF) );
    1696:	6813      	ldr	r3, [r2, #0]
    1698:	069b      	lsls	r3, r3, #26
    169a:	d4fc      	bmi.n	1696 <am_hal_uart_string_transmit_polled+0xa>
        AM_REGn(UART, 0, DR) = *pcString++;
    169c:	6020      	str	r0, [r4, #0]
    while ( *pcString )
    169e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    16a2:	2800      	cmp	r0, #0
    16a4:	d1f7      	bne.n	1696 <am_hal_uart_string_transmit_polled+0xa>
    }
}
    16a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    16aa:	4770      	bx	lr
    16ac:	4001c018 	.word	0x4001c018
    16b0:	4001c000 	.word	0x4001c000

000016b4 <am_hal_vcomp_disable>:
//
//*****************************************************************************
void
am_hal_vcomp_disable(void)
{
    AM_REG(VCOMP, PWDKEY) = AM_REG_VCOMP_PWDKEY_KEYVAL;
    16b4:	4b01      	ldr	r3, [pc, #4]	; (16bc <am_hal_vcomp_disable+0x8>)
    16b6:	2237      	movs	r2, #55	; 0x37
    16b8:	601a      	str	r2, [r3, #0]
    16ba:	4770      	bx	lr
    16bc:	4000c008 	.word	0x4000c008
    16c0:	54524155 	.word	0x54524155
    16c4:	69725020 	.word	0x69725020
    16c8:	2066746e 	.word	0x2066746e
    16cc:	6d617845 	.word	0x6d617845
    16d0:	0a656c70 	.word	0x0a656c70
    16d4:	00000000 	.word	0x00000000
    16d8:	6542090a 	.word	0x6542090a
    16dc:	6e6e6967 	.word	0x6e6e6967
    16e0:	20676e69 	.word	0x20676e69
    16e4:	49435341 	.word	0x49435341
    16e8:	61772049 	.word	0x61772049
    16ec:	74206b6c 	.word	0x74206b6c
    16f0:	756f7268 	.word	0x756f7268
    16f4:	0a3a6867 	.word	0x0a3a6867
    16f8:	00000000 	.word	0x00000000
    16fc:	00000009 	.word	0x00000009
    1700:	00006325 	.word	0x00006325
    1704:	0000090a 	.word	0x0000090a

00001708 <CSWTCH.4>:
    1708:	016e3600 00b71b00 007a1200 005b8d80     .6n.......z...[.
    1718:	00493e00 003d0900 003450db 002dc6c0     .>I...=..P4...-.
